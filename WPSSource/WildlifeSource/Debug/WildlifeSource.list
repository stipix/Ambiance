
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028bc0  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  10068c80  10068c80  00029c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10068c84  10068c84  00029c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       0000104c  10068c88  10068c88  00029c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  10069cd4  10069cd4  0002acd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002fc  2000260c  10069cdc  0002b60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0002c004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  0002c004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  0002c004  2**2
                  ALLOC
 10 .bss          00002478  20000194  20000194  0002c004  2**2
                  ALLOC
 11 .noinit       0000223c  20002908  10069fd8  0002b908  2**2
                  ALLOC
 12 .ota_region_end 00000000  10069fd8  10069fd8  0002b908  2**0
                  CONTENTS
 13 .heap         00000000  20004b44  20004b44  0002b908  2**0
                  CONTENTS
 14 .stack        00000c00  20005400  20005400  0002c400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  0002b908  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  0002b908  2**0
                  CONTENTS, READONLY
 17 .debug_info   0003361d  00000000  00000000  0002b934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008c93  00000000  00000000  0005ef51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003968  00000000  00000000  00067be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b2be  00000000  00000000  0006b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004535a  00000000  00000000  0009680e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000da037  00000000  00000000  000dbb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      0000023b  00000000  00000000  001b5b9f  2**0
                  CONTENTS, READONLY
 24 .arm_vfe_header 00000004  00000000  00000000  001b5ddc  2**2
                  CONTENTS, READONLY
 25 .debug_rnglists 00002b5b  00000000  00000000  001b5de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  0000df70  00000000  00000000  001b893c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 000000f4  00000000  00000000  001c68ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <strlen>:
1004021c:	2300      	movs	r3, #0
1004021e:	5cc2      	ldrb	r2, [r0, r3]
10040220:	3301      	adds	r3, #1
10040222:	2a00      	cmp	r2, #0
10040224:	d1fb      	bne.n	1004021e <strlen+0x2>
10040226:	1e58      	subs	r0, r3, #1
10040228:	4770      	bx	lr
	...

1004022c <__gnu_thumb1_case_shi>:
1004022c:	b403      	push	{r0, r1}
1004022e:	4671      	mov	r1, lr
10040230:	0849      	lsrs	r1, r1, #1
10040232:	0040      	lsls	r0, r0, #1
10040234:	0049      	lsls	r1, r1, #1
10040236:	5e09      	ldrsh	r1, [r1, r0]
10040238:	0049      	lsls	r1, r1, #1
1004023a:	448e      	add	lr, r1
1004023c:	bc03      	pop	{r0, r1}
1004023e:	4770      	bx	lr

10040240 <__udivsi3>:
10040240:	2200      	movs	r2, #0
10040242:	0843      	lsrs	r3, r0, #1
10040244:	428b      	cmp	r3, r1
10040246:	d374      	bcc.n	10040332 <__udivsi3+0xf2>
10040248:	0903      	lsrs	r3, r0, #4
1004024a:	428b      	cmp	r3, r1
1004024c:	d35f      	bcc.n	1004030e <__udivsi3+0xce>
1004024e:	0a03      	lsrs	r3, r0, #8
10040250:	428b      	cmp	r3, r1
10040252:	d344      	bcc.n	100402de <__udivsi3+0x9e>
10040254:	0b03      	lsrs	r3, r0, #12
10040256:	428b      	cmp	r3, r1
10040258:	d328      	bcc.n	100402ac <__udivsi3+0x6c>
1004025a:	0c03      	lsrs	r3, r0, #16
1004025c:	428b      	cmp	r3, r1
1004025e:	d30d      	bcc.n	1004027c <__udivsi3+0x3c>
10040260:	22ff      	movs	r2, #255	@ 0xff
10040262:	0209      	lsls	r1, r1, #8
10040264:	ba12      	rev	r2, r2
10040266:	0c03      	lsrs	r3, r0, #16
10040268:	428b      	cmp	r3, r1
1004026a:	d302      	bcc.n	10040272 <__udivsi3+0x32>
1004026c:	1212      	asrs	r2, r2, #8
1004026e:	0209      	lsls	r1, r1, #8
10040270:	d065      	beq.n	1004033e <__udivsi3+0xfe>
10040272:	0b03      	lsrs	r3, r0, #12
10040274:	428b      	cmp	r3, r1
10040276:	d319      	bcc.n	100402ac <__udivsi3+0x6c>
10040278:	e000      	b.n	1004027c <__udivsi3+0x3c>
1004027a:	0a09      	lsrs	r1, r1, #8
1004027c:	0bc3      	lsrs	r3, r0, #15
1004027e:	428b      	cmp	r3, r1
10040280:	d301      	bcc.n	10040286 <__udivsi3+0x46>
10040282:	03cb      	lsls	r3, r1, #15
10040284:	1ac0      	subs	r0, r0, r3
10040286:	4152      	adcs	r2, r2
10040288:	0b83      	lsrs	r3, r0, #14
1004028a:	428b      	cmp	r3, r1
1004028c:	d301      	bcc.n	10040292 <__udivsi3+0x52>
1004028e:	038b      	lsls	r3, r1, #14
10040290:	1ac0      	subs	r0, r0, r3
10040292:	4152      	adcs	r2, r2
10040294:	0b43      	lsrs	r3, r0, #13
10040296:	428b      	cmp	r3, r1
10040298:	d301      	bcc.n	1004029e <__udivsi3+0x5e>
1004029a:	034b      	lsls	r3, r1, #13
1004029c:	1ac0      	subs	r0, r0, r3
1004029e:	4152      	adcs	r2, r2
100402a0:	0b03      	lsrs	r3, r0, #12
100402a2:	428b      	cmp	r3, r1
100402a4:	d301      	bcc.n	100402aa <__udivsi3+0x6a>
100402a6:	030b      	lsls	r3, r1, #12
100402a8:	1ac0      	subs	r0, r0, r3
100402aa:	4152      	adcs	r2, r2
100402ac:	0ac3      	lsrs	r3, r0, #11
100402ae:	428b      	cmp	r3, r1
100402b0:	d301      	bcc.n	100402b6 <__udivsi3+0x76>
100402b2:	02cb      	lsls	r3, r1, #11
100402b4:	1ac0      	subs	r0, r0, r3
100402b6:	4152      	adcs	r2, r2
100402b8:	0a83      	lsrs	r3, r0, #10
100402ba:	428b      	cmp	r3, r1
100402bc:	d301      	bcc.n	100402c2 <__udivsi3+0x82>
100402be:	028b      	lsls	r3, r1, #10
100402c0:	1ac0      	subs	r0, r0, r3
100402c2:	4152      	adcs	r2, r2
100402c4:	0a43      	lsrs	r3, r0, #9
100402c6:	428b      	cmp	r3, r1
100402c8:	d301      	bcc.n	100402ce <__udivsi3+0x8e>
100402ca:	024b      	lsls	r3, r1, #9
100402cc:	1ac0      	subs	r0, r0, r3
100402ce:	4152      	adcs	r2, r2
100402d0:	0a03      	lsrs	r3, r0, #8
100402d2:	428b      	cmp	r3, r1
100402d4:	d301      	bcc.n	100402da <__udivsi3+0x9a>
100402d6:	020b      	lsls	r3, r1, #8
100402d8:	1ac0      	subs	r0, r0, r3
100402da:	4152      	adcs	r2, r2
100402dc:	d2cd      	bcs.n	1004027a <__udivsi3+0x3a>
100402de:	09c3      	lsrs	r3, r0, #7
100402e0:	428b      	cmp	r3, r1
100402e2:	d301      	bcc.n	100402e8 <__udivsi3+0xa8>
100402e4:	01cb      	lsls	r3, r1, #7
100402e6:	1ac0      	subs	r0, r0, r3
100402e8:	4152      	adcs	r2, r2
100402ea:	0983      	lsrs	r3, r0, #6
100402ec:	428b      	cmp	r3, r1
100402ee:	d301      	bcc.n	100402f4 <__udivsi3+0xb4>
100402f0:	018b      	lsls	r3, r1, #6
100402f2:	1ac0      	subs	r0, r0, r3
100402f4:	4152      	adcs	r2, r2
100402f6:	0943      	lsrs	r3, r0, #5
100402f8:	428b      	cmp	r3, r1
100402fa:	d301      	bcc.n	10040300 <__udivsi3+0xc0>
100402fc:	014b      	lsls	r3, r1, #5
100402fe:	1ac0      	subs	r0, r0, r3
10040300:	4152      	adcs	r2, r2
10040302:	0903      	lsrs	r3, r0, #4
10040304:	428b      	cmp	r3, r1
10040306:	d301      	bcc.n	1004030c <__udivsi3+0xcc>
10040308:	010b      	lsls	r3, r1, #4
1004030a:	1ac0      	subs	r0, r0, r3
1004030c:	4152      	adcs	r2, r2
1004030e:	08c3      	lsrs	r3, r0, #3
10040310:	428b      	cmp	r3, r1
10040312:	d301      	bcc.n	10040318 <__udivsi3+0xd8>
10040314:	00cb      	lsls	r3, r1, #3
10040316:	1ac0      	subs	r0, r0, r3
10040318:	4152      	adcs	r2, r2
1004031a:	0883      	lsrs	r3, r0, #2
1004031c:	428b      	cmp	r3, r1
1004031e:	d301      	bcc.n	10040324 <__udivsi3+0xe4>
10040320:	008b      	lsls	r3, r1, #2
10040322:	1ac0      	subs	r0, r0, r3
10040324:	4152      	adcs	r2, r2
10040326:	0843      	lsrs	r3, r0, #1
10040328:	428b      	cmp	r3, r1
1004032a:	d301      	bcc.n	10040330 <__udivsi3+0xf0>
1004032c:	004b      	lsls	r3, r1, #1
1004032e:	1ac0      	subs	r0, r0, r3
10040330:	4152      	adcs	r2, r2
10040332:	1a41      	subs	r1, r0, r1
10040334:	d200      	bcs.n	10040338 <__udivsi3+0xf8>
10040336:	4601      	mov	r1, r0
10040338:	4152      	adcs	r2, r2
1004033a:	4610      	mov	r0, r2
1004033c:	4770      	bx	lr
1004033e:	e7ff      	b.n	10040340 <__udivsi3+0x100>
10040340:	b501      	push	{r0, lr}
10040342:	2000      	movs	r0, #0
10040344:	f000 f8f0 	bl	10040528 <__aeabi_idiv0>
10040348:	bd02      	pop	{r1, pc}
1004034a:	46c0      	nop			@ (mov r8, r8)

1004034c <__aeabi_uidivmod>:
1004034c:	2900      	cmp	r1, #0
1004034e:	d0f7      	beq.n	10040340 <__udivsi3+0x100>
10040350:	e776      	b.n	10040240 <__udivsi3>
10040352:	4770      	bx	lr

10040354 <__divsi3>:
10040354:	4603      	mov	r3, r0
10040356:	430b      	orrs	r3, r1
10040358:	d47f      	bmi.n	1004045a <__divsi3+0x106>
1004035a:	2200      	movs	r2, #0
1004035c:	0843      	lsrs	r3, r0, #1
1004035e:	428b      	cmp	r3, r1
10040360:	d374      	bcc.n	1004044c <__divsi3+0xf8>
10040362:	0903      	lsrs	r3, r0, #4
10040364:	428b      	cmp	r3, r1
10040366:	d35f      	bcc.n	10040428 <__divsi3+0xd4>
10040368:	0a03      	lsrs	r3, r0, #8
1004036a:	428b      	cmp	r3, r1
1004036c:	d344      	bcc.n	100403f8 <__divsi3+0xa4>
1004036e:	0b03      	lsrs	r3, r0, #12
10040370:	428b      	cmp	r3, r1
10040372:	d328      	bcc.n	100403c6 <__divsi3+0x72>
10040374:	0c03      	lsrs	r3, r0, #16
10040376:	428b      	cmp	r3, r1
10040378:	d30d      	bcc.n	10040396 <__divsi3+0x42>
1004037a:	22ff      	movs	r2, #255	@ 0xff
1004037c:	0209      	lsls	r1, r1, #8
1004037e:	ba12      	rev	r2, r2
10040380:	0c03      	lsrs	r3, r0, #16
10040382:	428b      	cmp	r3, r1
10040384:	d302      	bcc.n	1004038c <__divsi3+0x38>
10040386:	1212      	asrs	r2, r2, #8
10040388:	0209      	lsls	r1, r1, #8
1004038a:	d065      	beq.n	10040458 <__divsi3+0x104>
1004038c:	0b03      	lsrs	r3, r0, #12
1004038e:	428b      	cmp	r3, r1
10040390:	d319      	bcc.n	100403c6 <__divsi3+0x72>
10040392:	e000      	b.n	10040396 <__divsi3+0x42>
10040394:	0a09      	lsrs	r1, r1, #8
10040396:	0bc3      	lsrs	r3, r0, #15
10040398:	428b      	cmp	r3, r1
1004039a:	d301      	bcc.n	100403a0 <__divsi3+0x4c>
1004039c:	03cb      	lsls	r3, r1, #15
1004039e:	1ac0      	subs	r0, r0, r3
100403a0:	4152      	adcs	r2, r2
100403a2:	0b83      	lsrs	r3, r0, #14
100403a4:	428b      	cmp	r3, r1
100403a6:	d301      	bcc.n	100403ac <__divsi3+0x58>
100403a8:	038b      	lsls	r3, r1, #14
100403aa:	1ac0      	subs	r0, r0, r3
100403ac:	4152      	adcs	r2, r2
100403ae:	0b43      	lsrs	r3, r0, #13
100403b0:	428b      	cmp	r3, r1
100403b2:	d301      	bcc.n	100403b8 <__divsi3+0x64>
100403b4:	034b      	lsls	r3, r1, #13
100403b6:	1ac0      	subs	r0, r0, r3
100403b8:	4152      	adcs	r2, r2
100403ba:	0b03      	lsrs	r3, r0, #12
100403bc:	428b      	cmp	r3, r1
100403be:	d301      	bcc.n	100403c4 <__divsi3+0x70>
100403c0:	030b      	lsls	r3, r1, #12
100403c2:	1ac0      	subs	r0, r0, r3
100403c4:	4152      	adcs	r2, r2
100403c6:	0ac3      	lsrs	r3, r0, #11
100403c8:	428b      	cmp	r3, r1
100403ca:	d301      	bcc.n	100403d0 <__divsi3+0x7c>
100403cc:	02cb      	lsls	r3, r1, #11
100403ce:	1ac0      	subs	r0, r0, r3
100403d0:	4152      	adcs	r2, r2
100403d2:	0a83      	lsrs	r3, r0, #10
100403d4:	428b      	cmp	r3, r1
100403d6:	d301      	bcc.n	100403dc <__divsi3+0x88>
100403d8:	028b      	lsls	r3, r1, #10
100403da:	1ac0      	subs	r0, r0, r3
100403dc:	4152      	adcs	r2, r2
100403de:	0a43      	lsrs	r3, r0, #9
100403e0:	428b      	cmp	r3, r1
100403e2:	d301      	bcc.n	100403e8 <__divsi3+0x94>
100403e4:	024b      	lsls	r3, r1, #9
100403e6:	1ac0      	subs	r0, r0, r3
100403e8:	4152      	adcs	r2, r2
100403ea:	0a03      	lsrs	r3, r0, #8
100403ec:	428b      	cmp	r3, r1
100403ee:	d301      	bcc.n	100403f4 <__divsi3+0xa0>
100403f0:	020b      	lsls	r3, r1, #8
100403f2:	1ac0      	subs	r0, r0, r3
100403f4:	4152      	adcs	r2, r2
100403f6:	d2cd      	bcs.n	10040394 <__divsi3+0x40>
100403f8:	09c3      	lsrs	r3, r0, #7
100403fa:	428b      	cmp	r3, r1
100403fc:	d301      	bcc.n	10040402 <__divsi3+0xae>
100403fe:	01cb      	lsls	r3, r1, #7
10040400:	1ac0      	subs	r0, r0, r3
10040402:	4152      	adcs	r2, r2
10040404:	0983      	lsrs	r3, r0, #6
10040406:	428b      	cmp	r3, r1
10040408:	d301      	bcc.n	1004040e <__divsi3+0xba>
1004040a:	018b      	lsls	r3, r1, #6
1004040c:	1ac0      	subs	r0, r0, r3
1004040e:	4152      	adcs	r2, r2
10040410:	0943      	lsrs	r3, r0, #5
10040412:	428b      	cmp	r3, r1
10040414:	d301      	bcc.n	1004041a <__divsi3+0xc6>
10040416:	014b      	lsls	r3, r1, #5
10040418:	1ac0      	subs	r0, r0, r3
1004041a:	4152      	adcs	r2, r2
1004041c:	0903      	lsrs	r3, r0, #4
1004041e:	428b      	cmp	r3, r1
10040420:	d301      	bcc.n	10040426 <__divsi3+0xd2>
10040422:	010b      	lsls	r3, r1, #4
10040424:	1ac0      	subs	r0, r0, r3
10040426:	4152      	adcs	r2, r2
10040428:	08c3      	lsrs	r3, r0, #3
1004042a:	428b      	cmp	r3, r1
1004042c:	d301      	bcc.n	10040432 <__divsi3+0xde>
1004042e:	00cb      	lsls	r3, r1, #3
10040430:	1ac0      	subs	r0, r0, r3
10040432:	4152      	adcs	r2, r2
10040434:	0883      	lsrs	r3, r0, #2
10040436:	428b      	cmp	r3, r1
10040438:	d301      	bcc.n	1004043e <__divsi3+0xea>
1004043a:	008b      	lsls	r3, r1, #2
1004043c:	1ac0      	subs	r0, r0, r3
1004043e:	4152      	adcs	r2, r2
10040440:	0843      	lsrs	r3, r0, #1
10040442:	428b      	cmp	r3, r1
10040444:	d301      	bcc.n	1004044a <__divsi3+0xf6>
10040446:	004b      	lsls	r3, r1, #1
10040448:	1ac0      	subs	r0, r0, r3
1004044a:	4152      	adcs	r2, r2
1004044c:	1a41      	subs	r1, r0, r1
1004044e:	d200      	bcs.n	10040452 <__divsi3+0xfe>
10040450:	4601      	mov	r1, r0
10040452:	4152      	adcs	r2, r2
10040454:	4610      	mov	r0, r2
10040456:	4770      	bx	lr
10040458:	e05d      	b.n	10040516 <__divsi3+0x1c2>
1004045a:	0fca      	lsrs	r2, r1, #31
1004045c:	d000      	beq.n	10040460 <__divsi3+0x10c>
1004045e:	4249      	negs	r1, r1
10040460:	1003      	asrs	r3, r0, #32
10040462:	d300      	bcc.n	10040466 <__divsi3+0x112>
10040464:	4240      	negs	r0, r0
10040466:	4053      	eors	r3, r2
10040468:	2200      	movs	r2, #0
1004046a:	469c      	mov	ip, r3
1004046c:	0903      	lsrs	r3, r0, #4
1004046e:	428b      	cmp	r3, r1
10040470:	d32d      	bcc.n	100404ce <__divsi3+0x17a>
10040472:	0a03      	lsrs	r3, r0, #8
10040474:	428b      	cmp	r3, r1
10040476:	d312      	bcc.n	1004049e <__divsi3+0x14a>
10040478:	22fc      	movs	r2, #252	@ 0xfc
1004047a:	0189      	lsls	r1, r1, #6
1004047c:	ba12      	rev	r2, r2
1004047e:	0a03      	lsrs	r3, r0, #8
10040480:	428b      	cmp	r3, r1
10040482:	d30c      	bcc.n	1004049e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	1192      	asrs	r2, r2, #6
10040488:	428b      	cmp	r3, r1
1004048a:	d308      	bcc.n	1004049e <__divsi3+0x14a>
1004048c:	0189      	lsls	r1, r1, #6
1004048e:	1192      	asrs	r2, r2, #6
10040490:	428b      	cmp	r3, r1
10040492:	d304      	bcc.n	1004049e <__divsi3+0x14a>
10040494:	0189      	lsls	r1, r1, #6
10040496:	d03a      	beq.n	1004050e <__divsi3+0x1ba>
10040498:	1192      	asrs	r2, r2, #6
1004049a:	e000      	b.n	1004049e <__divsi3+0x14a>
1004049c:	0989      	lsrs	r1, r1, #6
1004049e:	09c3      	lsrs	r3, r0, #7
100404a0:	428b      	cmp	r3, r1
100404a2:	d301      	bcc.n	100404a8 <__divsi3+0x154>
100404a4:	01cb      	lsls	r3, r1, #7
100404a6:	1ac0      	subs	r0, r0, r3
100404a8:	4152      	adcs	r2, r2
100404aa:	0983      	lsrs	r3, r0, #6
100404ac:	428b      	cmp	r3, r1
100404ae:	d301      	bcc.n	100404b4 <__divsi3+0x160>
100404b0:	018b      	lsls	r3, r1, #6
100404b2:	1ac0      	subs	r0, r0, r3
100404b4:	4152      	adcs	r2, r2
100404b6:	0943      	lsrs	r3, r0, #5
100404b8:	428b      	cmp	r3, r1
100404ba:	d301      	bcc.n	100404c0 <__divsi3+0x16c>
100404bc:	014b      	lsls	r3, r1, #5
100404be:	1ac0      	subs	r0, r0, r3
100404c0:	4152      	adcs	r2, r2
100404c2:	0903      	lsrs	r3, r0, #4
100404c4:	428b      	cmp	r3, r1
100404c6:	d301      	bcc.n	100404cc <__divsi3+0x178>
100404c8:	010b      	lsls	r3, r1, #4
100404ca:	1ac0      	subs	r0, r0, r3
100404cc:	4152      	adcs	r2, r2
100404ce:	08c3      	lsrs	r3, r0, #3
100404d0:	428b      	cmp	r3, r1
100404d2:	d301      	bcc.n	100404d8 <__divsi3+0x184>
100404d4:	00cb      	lsls	r3, r1, #3
100404d6:	1ac0      	subs	r0, r0, r3
100404d8:	4152      	adcs	r2, r2
100404da:	0883      	lsrs	r3, r0, #2
100404dc:	428b      	cmp	r3, r1
100404de:	d301      	bcc.n	100404e4 <__divsi3+0x190>
100404e0:	008b      	lsls	r3, r1, #2
100404e2:	1ac0      	subs	r0, r0, r3
100404e4:	4152      	adcs	r2, r2
100404e6:	d2d9      	bcs.n	1004049c <__divsi3+0x148>
100404e8:	0843      	lsrs	r3, r0, #1
100404ea:	428b      	cmp	r3, r1
100404ec:	d301      	bcc.n	100404f2 <__divsi3+0x19e>
100404ee:	004b      	lsls	r3, r1, #1
100404f0:	1ac0      	subs	r0, r0, r3
100404f2:	4152      	adcs	r2, r2
100404f4:	1a41      	subs	r1, r0, r1
100404f6:	d200      	bcs.n	100404fa <__divsi3+0x1a6>
100404f8:	4601      	mov	r1, r0
100404fa:	4663      	mov	r3, ip
100404fc:	4152      	adcs	r2, r2
100404fe:	105b      	asrs	r3, r3, #1
10040500:	4610      	mov	r0, r2
10040502:	d301      	bcc.n	10040508 <__divsi3+0x1b4>
10040504:	4240      	negs	r0, r0
10040506:	2b00      	cmp	r3, #0
10040508:	d500      	bpl.n	1004050c <__divsi3+0x1b8>
1004050a:	4249      	negs	r1, r1
1004050c:	4770      	bx	lr
1004050e:	4663      	mov	r3, ip
10040510:	105b      	asrs	r3, r3, #1
10040512:	d300      	bcc.n	10040516 <__divsi3+0x1c2>
10040514:	4240      	negs	r0, r0
10040516:	b501      	push	{r0, lr}
10040518:	2000      	movs	r0, #0
1004051a:	f000 f805 	bl	10040528 <__aeabi_idiv0>
1004051e:	bd02      	pop	{r1, pc}

10040520 <__aeabi_idivmod>:
10040520:	2900      	cmp	r1, #0
10040522:	d0f8      	beq.n	10040516 <__divsi3+0x1c2>
10040524:	e716      	b.n	10040354 <__divsi3>
10040526:	4770      	bx	lr

10040528 <__aeabi_idiv0>:
10040528:	4770      	bx	lr
1004052a:	46c0      	nop			@ (mov r8, r8)

1004052c <__aeabi_llsl>:
1004052c:	4091      	lsls	r1, r2
1004052e:	0003      	movs	r3, r0
10040530:	4090      	lsls	r0, r2
10040532:	469c      	mov	ip, r3
10040534:	3a20      	subs	r2, #32
10040536:	4093      	lsls	r3, r2
10040538:	4319      	orrs	r1, r3
1004053a:	4252      	negs	r2, r2
1004053c:	4663      	mov	r3, ip
1004053e:	40d3      	lsrs	r3, r2
10040540:	4319      	orrs	r1, r3
10040542:	4770      	bx	lr

10040544 <__aeabi_cdrcmple>:
10040544:	4684      	mov	ip, r0
10040546:	0010      	movs	r0, r2
10040548:	4662      	mov	r2, ip
1004054a:	468c      	mov	ip, r1
1004054c:	0019      	movs	r1, r3
1004054e:	4663      	mov	r3, ip
10040550:	e000      	b.n	10040554 <__aeabi_cdcmpeq>
10040552:	46c0      	nop			@ (mov r8, r8)

10040554 <__aeabi_cdcmpeq>:
10040554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10040556:	f001 f8fd 	bl	10041754 <__ledf2>
1004055a:	2800      	cmp	r0, #0
1004055c:	d401      	bmi.n	10040562 <__aeabi_cdcmpeq+0xe>
1004055e:	2100      	movs	r1, #0
10040560:	42c8      	cmn	r0, r1
10040562:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10040564 <__aeabi_dcmpeq>:
10040564:	b510      	push	{r4, lr}
10040566:	f001 f841 	bl	100415ec <__eqdf2>
1004056a:	4240      	negs	r0, r0
1004056c:	3001      	adds	r0, #1
1004056e:	bd10      	pop	{r4, pc}

10040570 <__aeabi_dcmplt>:
10040570:	b510      	push	{r4, lr}
10040572:	f001 f8ef 	bl	10041754 <__ledf2>
10040576:	2800      	cmp	r0, #0
10040578:	db01      	blt.n	1004057e <__aeabi_dcmplt+0xe>
1004057a:	2000      	movs	r0, #0
1004057c:	bd10      	pop	{r4, pc}
1004057e:	2001      	movs	r0, #1
10040580:	bd10      	pop	{r4, pc}
10040582:	46c0      	nop			@ (mov r8, r8)

10040584 <__aeabi_dcmple>:
10040584:	b510      	push	{r4, lr}
10040586:	f001 f8e5 	bl	10041754 <__ledf2>
1004058a:	2800      	cmp	r0, #0
1004058c:	dd01      	ble.n	10040592 <__aeabi_dcmple+0xe>
1004058e:	2000      	movs	r0, #0
10040590:	bd10      	pop	{r4, pc}
10040592:	2001      	movs	r0, #1
10040594:	bd10      	pop	{r4, pc}
10040596:	46c0      	nop			@ (mov r8, r8)

10040598 <__aeabi_dcmpgt>:
10040598:	b510      	push	{r4, lr}
1004059a:	f001 f86b 	bl	10041674 <__gedf2>
1004059e:	2800      	cmp	r0, #0
100405a0:	dc01      	bgt.n	100405a6 <__aeabi_dcmpgt+0xe>
100405a2:	2000      	movs	r0, #0
100405a4:	bd10      	pop	{r4, pc}
100405a6:	2001      	movs	r0, #1
100405a8:	bd10      	pop	{r4, pc}
100405aa:	46c0      	nop			@ (mov r8, r8)

100405ac <__aeabi_dcmpge>:
100405ac:	b510      	push	{r4, lr}
100405ae:	f001 f861 	bl	10041674 <__gedf2>
100405b2:	2800      	cmp	r0, #0
100405b4:	da01      	bge.n	100405ba <__aeabi_dcmpge+0xe>
100405b6:	2000      	movs	r0, #0
100405b8:	bd10      	pop	{r4, pc}
100405ba:	2001      	movs	r0, #1
100405bc:	bd10      	pop	{r4, pc}
100405be:	46c0      	nop			@ (mov r8, r8)

100405c0 <__clzsi2>:
100405c0:	211c      	movs	r1, #28
100405c2:	2301      	movs	r3, #1
100405c4:	041b      	lsls	r3, r3, #16
100405c6:	4298      	cmp	r0, r3
100405c8:	d301      	bcc.n	100405ce <__clzsi2+0xe>
100405ca:	0c00      	lsrs	r0, r0, #16
100405cc:	3910      	subs	r1, #16
100405ce:	0a1b      	lsrs	r3, r3, #8
100405d0:	4298      	cmp	r0, r3
100405d2:	d301      	bcc.n	100405d8 <__clzsi2+0x18>
100405d4:	0a00      	lsrs	r0, r0, #8
100405d6:	3908      	subs	r1, #8
100405d8:	091b      	lsrs	r3, r3, #4
100405da:	4298      	cmp	r0, r3
100405dc:	d301      	bcc.n	100405e2 <__clzsi2+0x22>
100405de:	0900      	lsrs	r0, r0, #4
100405e0:	3904      	subs	r1, #4
100405e2:	a202      	add	r2, pc, #8	@ (adr r2, 100405ec <__clzsi2+0x2c>)
100405e4:	5c10      	ldrb	r0, [r2, r0]
100405e6:	1840      	adds	r0, r0, r1
100405e8:	4770      	bx	lr
100405ea:	46c0      	nop			@ (mov r8, r8)
100405ec:	02020304 	.word	0x02020304
100405f0:	01010101 	.word	0x01010101
	...

100405fc <__aeabi_uldivmod>:
100405fc:	2b00      	cmp	r3, #0
100405fe:	d111      	bne.n	10040624 <__aeabi_uldivmod+0x28>
10040600:	2a00      	cmp	r2, #0
10040602:	d10f      	bne.n	10040624 <__aeabi_uldivmod+0x28>
10040604:	2900      	cmp	r1, #0
10040606:	d100      	bne.n	1004060a <__aeabi_uldivmod+0xe>
10040608:	2800      	cmp	r0, #0
1004060a:	d002      	beq.n	10040612 <__aeabi_uldivmod+0x16>
1004060c:	2100      	movs	r1, #0
1004060e:	43c9      	mvns	r1, r1
10040610:	0008      	movs	r0, r1
10040612:	b407      	push	{r0, r1, r2}
10040614:	4802      	ldr	r0, [pc, #8]	@ (10040620 <__aeabi_uldivmod+0x24>)
10040616:	a102      	add	r1, pc, #8	@ (adr r1, 10040620 <__aeabi_uldivmod+0x24>)
10040618:	1840      	adds	r0, r0, r1
1004061a:	9002      	str	r0, [sp, #8]
1004061c:	bd03      	pop	{r0, r1, pc}
1004061e:	46c0      	nop			@ (mov r8, r8)
10040620:	ffffff09 	.word	0xffffff09
10040624:	b403      	push	{r0, r1}
10040626:	4668      	mov	r0, sp
10040628:	b501      	push	{r0, lr}
1004062a:	9802      	ldr	r0, [sp, #8]
1004062c:	f000 f834 	bl	10040698 <__udivmoddi4>
10040630:	9b01      	ldr	r3, [sp, #4]
10040632:	469e      	mov	lr, r3
10040634:	b002      	add	sp, #8
10040636:	bc0c      	pop	{r2, r3}
10040638:	4770      	bx	lr
1004063a:	46c0      	nop			@ (mov r8, r8)

1004063c <__aeabi_lmul>:
1004063c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004063e:	46ce      	mov	lr, r9
10040640:	4699      	mov	r9, r3
10040642:	0c03      	lsrs	r3, r0, #16
10040644:	469c      	mov	ip, r3
10040646:	0413      	lsls	r3, r2, #16
10040648:	4647      	mov	r7, r8
1004064a:	0c1b      	lsrs	r3, r3, #16
1004064c:	001d      	movs	r5, r3
1004064e:	000e      	movs	r6, r1
10040650:	4661      	mov	r1, ip
10040652:	0404      	lsls	r4, r0, #16
10040654:	0c24      	lsrs	r4, r4, #16
10040656:	b580      	push	{r7, lr}
10040658:	0007      	movs	r7, r0
1004065a:	0c10      	lsrs	r0, r2, #16
1004065c:	434b      	muls	r3, r1
1004065e:	4365      	muls	r5, r4
10040660:	4341      	muls	r1, r0
10040662:	4360      	muls	r0, r4
10040664:	0c2c      	lsrs	r4, r5, #16
10040666:	18c0      	adds	r0, r0, r3
10040668:	1824      	adds	r4, r4, r0
1004066a:	468c      	mov	ip, r1
1004066c:	42a3      	cmp	r3, r4
1004066e:	d903      	bls.n	10040678 <__aeabi_lmul+0x3c>
10040670:	2380      	movs	r3, #128	@ 0x80
10040672:	025b      	lsls	r3, r3, #9
10040674:	4698      	mov	r8, r3
10040676:	44c4      	add	ip, r8
10040678:	4649      	mov	r1, r9
1004067a:	4379      	muls	r1, r7
1004067c:	4356      	muls	r6, r2
1004067e:	0c23      	lsrs	r3, r4, #16
10040680:	042d      	lsls	r5, r5, #16
10040682:	0c2d      	lsrs	r5, r5, #16
10040684:	1989      	adds	r1, r1, r6
10040686:	4463      	add	r3, ip
10040688:	0424      	lsls	r4, r4, #16
1004068a:	1960      	adds	r0, r4, r5
1004068c:	18c9      	adds	r1, r1, r3
1004068e:	bcc0      	pop	{r6, r7}
10040690:	46b9      	mov	r9, r7
10040692:	46b0      	mov	r8, r6
10040694:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040696:	46c0      	nop			@ (mov r8, r8)

10040698 <__udivmoddi4>:
10040698:	b5f0      	push	{r4, r5, r6, r7, lr}
1004069a:	4657      	mov	r7, sl
1004069c:	464e      	mov	r6, r9
1004069e:	4645      	mov	r5, r8
100406a0:	46de      	mov	lr, fp
100406a2:	b5e0      	push	{r5, r6, r7, lr}
100406a4:	0004      	movs	r4, r0
100406a6:	000d      	movs	r5, r1
100406a8:	4692      	mov	sl, r2
100406aa:	4699      	mov	r9, r3
100406ac:	b083      	sub	sp, #12
100406ae:	428b      	cmp	r3, r1
100406b0:	d830      	bhi.n	10040714 <__udivmoddi4+0x7c>
100406b2:	d02d      	beq.n	10040710 <__udivmoddi4+0x78>
100406b4:	4649      	mov	r1, r9
100406b6:	4650      	mov	r0, sl
100406b8:	f001 fbf2 	bl	10041ea0 <__clzdi2>
100406bc:	0029      	movs	r1, r5
100406be:	0006      	movs	r6, r0
100406c0:	0020      	movs	r0, r4
100406c2:	f001 fbed 	bl	10041ea0 <__clzdi2>
100406c6:	1a33      	subs	r3, r6, r0
100406c8:	4698      	mov	r8, r3
100406ca:	3b20      	subs	r3, #32
100406cc:	d434      	bmi.n	10040738 <__udivmoddi4+0xa0>
100406ce:	469b      	mov	fp, r3
100406d0:	4653      	mov	r3, sl
100406d2:	465a      	mov	r2, fp
100406d4:	4093      	lsls	r3, r2
100406d6:	4642      	mov	r2, r8
100406d8:	001f      	movs	r7, r3
100406da:	4653      	mov	r3, sl
100406dc:	4093      	lsls	r3, r2
100406de:	001e      	movs	r6, r3
100406e0:	42af      	cmp	r7, r5
100406e2:	d83b      	bhi.n	1004075c <__udivmoddi4+0xc4>
100406e4:	42af      	cmp	r7, r5
100406e6:	d100      	bne.n	100406ea <__udivmoddi4+0x52>
100406e8:	e079      	b.n	100407de <__udivmoddi4+0x146>
100406ea:	465b      	mov	r3, fp
100406ec:	1ba4      	subs	r4, r4, r6
100406ee:	41bd      	sbcs	r5, r7
100406f0:	2b00      	cmp	r3, #0
100406f2:	da00      	bge.n	100406f6 <__udivmoddi4+0x5e>
100406f4:	e076      	b.n	100407e4 <__udivmoddi4+0x14c>
100406f6:	2200      	movs	r2, #0
100406f8:	2300      	movs	r3, #0
100406fa:	9200      	str	r2, [sp, #0]
100406fc:	9301      	str	r3, [sp, #4]
100406fe:	2301      	movs	r3, #1
10040700:	465a      	mov	r2, fp
10040702:	4093      	lsls	r3, r2
10040704:	9301      	str	r3, [sp, #4]
10040706:	2301      	movs	r3, #1
10040708:	4642      	mov	r2, r8
1004070a:	4093      	lsls	r3, r2
1004070c:	9300      	str	r3, [sp, #0]
1004070e:	e029      	b.n	10040764 <__udivmoddi4+0xcc>
10040710:	4282      	cmp	r2, r0
10040712:	d9cf      	bls.n	100406b4 <__udivmoddi4+0x1c>
10040714:	2200      	movs	r2, #0
10040716:	2300      	movs	r3, #0
10040718:	9200      	str	r2, [sp, #0]
1004071a:	9301      	str	r3, [sp, #4]
1004071c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
1004071e:	2b00      	cmp	r3, #0
10040720:	d001      	beq.n	10040726 <__udivmoddi4+0x8e>
10040722:	601c      	str	r4, [r3, #0]
10040724:	605d      	str	r5, [r3, #4]
10040726:	9800      	ldr	r0, [sp, #0]
10040728:	9901      	ldr	r1, [sp, #4]
1004072a:	b003      	add	sp, #12
1004072c:	bcf0      	pop	{r4, r5, r6, r7}
1004072e:	46bb      	mov	fp, r7
10040730:	46b2      	mov	sl, r6
10040732:	46a9      	mov	r9, r5
10040734:	46a0      	mov	r8, r4
10040736:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040738:	4642      	mov	r2, r8
1004073a:	469b      	mov	fp, r3
1004073c:	2320      	movs	r3, #32
1004073e:	1a9b      	subs	r3, r3, r2
10040740:	4652      	mov	r2, sl
10040742:	40da      	lsrs	r2, r3
10040744:	4641      	mov	r1, r8
10040746:	0013      	movs	r3, r2
10040748:	464a      	mov	r2, r9
1004074a:	408a      	lsls	r2, r1
1004074c:	0017      	movs	r7, r2
1004074e:	4642      	mov	r2, r8
10040750:	431f      	orrs	r7, r3
10040752:	4653      	mov	r3, sl
10040754:	4093      	lsls	r3, r2
10040756:	001e      	movs	r6, r3
10040758:	42af      	cmp	r7, r5
1004075a:	d9c3      	bls.n	100406e4 <__udivmoddi4+0x4c>
1004075c:	2200      	movs	r2, #0
1004075e:	2300      	movs	r3, #0
10040760:	9200      	str	r2, [sp, #0]
10040762:	9301      	str	r3, [sp, #4]
10040764:	4643      	mov	r3, r8
10040766:	2b00      	cmp	r3, #0
10040768:	d0d8      	beq.n	1004071c <__udivmoddi4+0x84>
1004076a:	07fb      	lsls	r3, r7, #31
1004076c:	0872      	lsrs	r2, r6, #1
1004076e:	431a      	orrs	r2, r3
10040770:	4646      	mov	r6, r8
10040772:	087b      	lsrs	r3, r7, #1
10040774:	e00e      	b.n	10040794 <__udivmoddi4+0xfc>
10040776:	42ab      	cmp	r3, r5
10040778:	d101      	bne.n	1004077e <__udivmoddi4+0xe6>
1004077a:	42a2      	cmp	r2, r4
1004077c:	d80c      	bhi.n	10040798 <__udivmoddi4+0x100>
1004077e:	1aa4      	subs	r4, r4, r2
10040780:	419d      	sbcs	r5, r3
10040782:	2001      	movs	r0, #1
10040784:	1924      	adds	r4, r4, r4
10040786:	416d      	adcs	r5, r5
10040788:	2100      	movs	r1, #0
1004078a:	3e01      	subs	r6, #1
1004078c:	1824      	adds	r4, r4, r0
1004078e:	414d      	adcs	r5, r1
10040790:	2e00      	cmp	r6, #0
10040792:	d006      	beq.n	100407a2 <__udivmoddi4+0x10a>
10040794:	42ab      	cmp	r3, r5
10040796:	d9ee      	bls.n	10040776 <__udivmoddi4+0xde>
10040798:	3e01      	subs	r6, #1
1004079a:	1924      	adds	r4, r4, r4
1004079c:	416d      	adcs	r5, r5
1004079e:	2e00      	cmp	r6, #0
100407a0:	d1f8      	bne.n	10040794 <__udivmoddi4+0xfc>
100407a2:	9800      	ldr	r0, [sp, #0]
100407a4:	9901      	ldr	r1, [sp, #4]
100407a6:	465b      	mov	r3, fp
100407a8:	1900      	adds	r0, r0, r4
100407aa:	4169      	adcs	r1, r5
100407ac:	2b00      	cmp	r3, #0
100407ae:	db24      	blt.n	100407fa <__udivmoddi4+0x162>
100407b0:	002b      	movs	r3, r5
100407b2:	465a      	mov	r2, fp
100407b4:	4644      	mov	r4, r8
100407b6:	40d3      	lsrs	r3, r2
100407b8:	002a      	movs	r2, r5
100407ba:	40e2      	lsrs	r2, r4
100407bc:	001c      	movs	r4, r3
100407be:	465b      	mov	r3, fp
100407c0:	0015      	movs	r5, r2
100407c2:	2b00      	cmp	r3, #0
100407c4:	db2a      	blt.n	1004081c <__udivmoddi4+0x184>
100407c6:	0026      	movs	r6, r4
100407c8:	409e      	lsls	r6, r3
100407ca:	0033      	movs	r3, r6
100407cc:	0026      	movs	r6, r4
100407ce:	4647      	mov	r7, r8
100407d0:	40be      	lsls	r6, r7
100407d2:	0032      	movs	r2, r6
100407d4:	1a80      	subs	r0, r0, r2
100407d6:	4199      	sbcs	r1, r3
100407d8:	9000      	str	r0, [sp, #0]
100407da:	9101      	str	r1, [sp, #4]
100407dc:	e79e      	b.n	1004071c <__udivmoddi4+0x84>
100407de:	42a3      	cmp	r3, r4
100407e0:	d8bc      	bhi.n	1004075c <__udivmoddi4+0xc4>
100407e2:	e782      	b.n	100406ea <__udivmoddi4+0x52>
100407e4:	4642      	mov	r2, r8
100407e6:	2320      	movs	r3, #32
100407e8:	2100      	movs	r1, #0
100407ea:	1a9b      	subs	r3, r3, r2
100407ec:	2200      	movs	r2, #0
100407ee:	9100      	str	r1, [sp, #0]
100407f0:	9201      	str	r2, [sp, #4]
100407f2:	2201      	movs	r2, #1
100407f4:	40da      	lsrs	r2, r3
100407f6:	9201      	str	r2, [sp, #4]
100407f8:	e785      	b.n	10040706 <__udivmoddi4+0x6e>
100407fa:	4642      	mov	r2, r8
100407fc:	2320      	movs	r3, #32
100407fe:	1a9b      	subs	r3, r3, r2
10040800:	002a      	movs	r2, r5
10040802:	4646      	mov	r6, r8
10040804:	409a      	lsls	r2, r3
10040806:	0023      	movs	r3, r4
10040808:	40f3      	lsrs	r3, r6
1004080a:	4644      	mov	r4, r8
1004080c:	4313      	orrs	r3, r2
1004080e:	002a      	movs	r2, r5
10040810:	40e2      	lsrs	r2, r4
10040812:	001c      	movs	r4, r3
10040814:	465b      	mov	r3, fp
10040816:	0015      	movs	r5, r2
10040818:	2b00      	cmp	r3, #0
1004081a:	dad4      	bge.n	100407c6 <__udivmoddi4+0x12e>
1004081c:	4642      	mov	r2, r8
1004081e:	002f      	movs	r7, r5
10040820:	2320      	movs	r3, #32
10040822:	0026      	movs	r6, r4
10040824:	4097      	lsls	r7, r2
10040826:	1a9b      	subs	r3, r3, r2
10040828:	40de      	lsrs	r6, r3
1004082a:	003b      	movs	r3, r7
1004082c:	4333      	orrs	r3, r6
1004082e:	e7cd      	b.n	100407cc <__udivmoddi4+0x134>

10040830 <__aeabi_dadd>:
10040830:	b5f0      	push	{r4, r5, r6, r7, lr}
10040832:	464f      	mov	r7, r9
10040834:	4646      	mov	r6, r8
10040836:	46d6      	mov	lr, sl
10040838:	b5c0      	push	{r6, r7, lr}
1004083a:	b082      	sub	sp, #8
1004083c:	9000      	str	r0, [sp, #0]
1004083e:	9101      	str	r1, [sp, #4]
10040840:	030e      	lsls	r6, r1, #12
10040842:	004c      	lsls	r4, r1, #1
10040844:	0fcd      	lsrs	r5, r1, #31
10040846:	0a71      	lsrs	r1, r6, #9
10040848:	9e00      	ldr	r6, [sp, #0]
1004084a:	005f      	lsls	r7, r3, #1
1004084c:	0f76      	lsrs	r6, r6, #29
1004084e:	430e      	orrs	r6, r1
10040850:	9900      	ldr	r1, [sp, #0]
10040852:	9200      	str	r2, [sp, #0]
10040854:	9301      	str	r3, [sp, #4]
10040856:	00c9      	lsls	r1, r1, #3
10040858:	4689      	mov	r9, r1
1004085a:	0319      	lsls	r1, r3, #12
1004085c:	0d7b      	lsrs	r3, r7, #21
1004085e:	4698      	mov	r8, r3
10040860:	9b01      	ldr	r3, [sp, #4]
10040862:	0a49      	lsrs	r1, r1, #9
10040864:	0fdb      	lsrs	r3, r3, #31
10040866:	469c      	mov	ip, r3
10040868:	9b00      	ldr	r3, [sp, #0]
1004086a:	9a00      	ldr	r2, [sp, #0]
1004086c:	0f5b      	lsrs	r3, r3, #29
1004086e:	430b      	orrs	r3, r1
10040870:	4641      	mov	r1, r8
10040872:	0d64      	lsrs	r4, r4, #21
10040874:	00d2      	lsls	r2, r2, #3
10040876:	1a61      	subs	r1, r4, r1
10040878:	4565      	cmp	r5, ip
1004087a:	d100      	bne.n	1004087e <__aeabi_dadd+0x4e>
1004087c:	e0a6      	b.n	100409cc <__aeabi_dadd+0x19c>
1004087e:	2900      	cmp	r1, #0
10040880:	dd72      	ble.n	10040968 <__aeabi_dadd+0x138>
10040882:	4647      	mov	r7, r8
10040884:	2f00      	cmp	r7, #0
10040886:	d100      	bne.n	1004088a <__aeabi_dadd+0x5a>
10040888:	e0dd      	b.n	10040a46 <__aeabi_dadd+0x216>
1004088a:	4fcc      	ldr	r7, [pc, #816]	@ (10040bbc <__aeabi_dadd+0x38c>)
1004088c:	42bc      	cmp	r4, r7
1004088e:	d100      	bne.n	10040892 <__aeabi_dadd+0x62>
10040890:	e19a      	b.n	10040bc8 <__aeabi_dadd+0x398>
10040892:	2701      	movs	r7, #1
10040894:	2938      	cmp	r1, #56	@ 0x38
10040896:	dc17      	bgt.n	100408c8 <__aeabi_dadd+0x98>
10040898:	2780      	movs	r7, #128	@ 0x80
1004089a:	043f      	lsls	r7, r7, #16
1004089c:	433b      	orrs	r3, r7
1004089e:	291f      	cmp	r1, #31
100408a0:	dd00      	ble.n	100408a4 <__aeabi_dadd+0x74>
100408a2:	e1dd      	b.n	10040c60 <__aeabi_dadd+0x430>
100408a4:	2720      	movs	r7, #32
100408a6:	1a78      	subs	r0, r7, r1
100408a8:	001f      	movs	r7, r3
100408aa:	4087      	lsls	r7, r0
100408ac:	46ba      	mov	sl, r7
100408ae:	0017      	movs	r7, r2
100408b0:	40cf      	lsrs	r7, r1
100408b2:	4684      	mov	ip, r0
100408b4:	0038      	movs	r0, r7
100408b6:	4657      	mov	r7, sl
100408b8:	4307      	orrs	r7, r0
100408ba:	4660      	mov	r0, ip
100408bc:	4082      	lsls	r2, r0
100408be:	40cb      	lsrs	r3, r1
100408c0:	1e50      	subs	r0, r2, #1
100408c2:	4182      	sbcs	r2, r0
100408c4:	1af6      	subs	r6, r6, r3
100408c6:	4317      	orrs	r7, r2
100408c8:	464b      	mov	r3, r9
100408ca:	1bdf      	subs	r7, r3, r7
100408cc:	45b9      	cmp	r9, r7
100408ce:	4180      	sbcs	r0, r0
100408d0:	4240      	negs	r0, r0
100408d2:	1a36      	subs	r6, r6, r0
100408d4:	0233      	lsls	r3, r6, #8
100408d6:	d400      	bmi.n	100408da <__aeabi_dadd+0xaa>
100408d8:	e0ff      	b.n	10040ada <__aeabi_dadd+0x2aa>
100408da:	0276      	lsls	r6, r6, #9
100408dc:	0a76      	lsrs	r6, r6, #9
100408de:	2e00      	cmp	r6, #0
100408e0:	d100      	bne.n	100408e4 <__aeabi_dadd+0xb4>
100408e2:	e13c      	b.n	10040b5e <__aeabi_dadd+0x32e>
100408e4:	0030      	movs	r0, r6
100408e6:	f7ff fe6b 	bl	100405c0 <__clzsi2>
100408ea:	0003      	movs	r3, r0
100408ec:	3b08      	subs	r3, #8
100408ee:	2120      	movs	r1, #32
100408f0:	0038      	movs	r0, r7
100408f2:	1aca      	subs	r2, r1, r3
100408f4:	40d0      	lsrs	r0, r2
100408f6:	409e      	lsls	r6, r3
100408f8:	0002      	movs	r2, r0
100408fa:	409f      	lsls	r7, r3
100408fc:	4332      	orrs	r2, r6
100408fe:	429c      	cmp	r4, r3
10040900:	dd00      	ble.n	10040904 <__aeabi_dadd+0xd4>
10040902:	e1a6      	b.n	10040c52 <__aeabi_dadd+0x422>
10040904:	1b18      	subs	r0, r3, r4
10040906:	3001      	adds	r0, #1
10040908:	1a09      	subs	r1, r1, r0
1004090a:	003e      	movs	r6, r7
1004090c:	408f      	lsls	r7, r1
1004090e:	40c6      	lsrs	r6, r0
10040910:	1e7b      	subs	r3, r7, #1
10040912:	419f      	sbcs	r7, r3
10040914:	0013      	movs	r3, r2
10040916:	408b      	lsls	r3, r1
10040918:	4337      	orrs	r7, r6
1004091a:	431f      	orrs	r7, r3
1004091c:	40c2      	lsrs	r2, r0
1004091e:	003b      	movs	r3, r7
10040920:	0016      	movs	r6, r2
10040922:	2400      	movs	r4, #0
10040924:	4313      	orrs	r3, r2
10040926:	d100      	bne.n	1004092a <__aeabi_dadd+0xfa>
10040928:	e1df      	b.n	10040cea <__aeabi_dadd+0x4ba>
1004092a:	077b      	lsls	r3, r7, #29
1004092c:	d100      	bne.n	10040930 <__aeabi_dadd+0x100>
1004092e:	e332      	b.n	10040f96 <__aeabi_dadd+0x766>
10040930:	230f      	movs	r3, #15
10040932:	003a      	movs	r2, r7
10040934:	403b      	ands	r3, r7
10040936:	2b04      	cmp	r3, #4
10040938:	d004      	beq.n	10040944 <__aeabi_dadd+0x114>
1004093a:	1d3a      	adds	r2, r7, #4
1004093c:	42ba      	cmp	r2, r7
1004093e:	41bf      	sbcs	r7, r7
10040940:	427f      	negs	r7, r7
10040942:	19f6      	adds	r6, r6, r7
10040944:	0233      	lsls	r3, r6, #8
10040946:	d400      	bmi.n	1004094a <__aeabi_dadd+0x11a>
10040948:	e323      	b.n	10040f92 <__aeabi_dadd+0x762>
1004094a:	4b9c      	ldr	r3, [pc, #624]	@ (10040bbc <__aeabi_dadd+0x38c>)
1004094c:	3401      	adds	r4, #1
1004094e:	429c      	cmp	r4, r3
10040950:	d100      	bne.n	10040954 <__aeabi_dadd+0x124>
10040952:	e0b4      	b.n	10040abe <__aeabi_dadd+0x28e>
10040954:	4b9a      	ldr	r3, [pc, #616]	@ (10040bc0 <__aeabi_dadd+0x390>)
10040956:	0564      	lsls	r4, r4, #21
10040958:	401e      	ands	r6, r3
1004095a:	0d64      	lsrs	r4, r4, #21
1004095c:	0777      	lsls	r7, r6, #29
1004095e:	08d2      	lsrs	r2, r2, #3
10040960:	0276      	lsls	r6, r6, #9
10040962:	4317      	orrs	r7, r2
10040964:	0b36      	lsrs	r6, r6, #12
10040966:	e0ac      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040968:	2900      	cmp	r1, #0
1004096a:	d100      	bne.n	1004096e <__aeabi_dadd+0x13e>
1004096c:	e07e      	b.n	10040a6c <__aeabi_dadd+0x23c>
1004096e:	4641      	mov	r1, r8
10040970:	1b09      	subs	r1, r1, r4
10040972:	2c00      	cmp	r4, #0
10040974:	d000      	beq.n	10040978 <__aeabi_dadd+0x148>
10040976:	e160      	b.n	10040c3a <__aeabi_dadd+0x40a>
10040978:	0034      	movs	r4, r6
1004097a:	4648      	mov	r0, r9
1004097c:	4304      	orrs	r4, r0
1004097e:	d100      	bne.n	10040982 <__aeabi_dadd+0x152>
10040980:	e1c9      	b.n	10040d16 <__aeabi_dadd+0x4e6>
10040982:	1e4c      	subs	r4, r1, #1
10040984:	2901      	cmp	r1, #1
10040986:	d100      	bne.n	1004098a <__aeabi_dadd+0x15a>
10040988:	e22e      	b.n	10040de8 <__aeabi_dadd+0x5b8>
1004098a:	4d8c      	ldr	r5, [pc, #560]	@ (10040bbc <__aeabi_dadd+0x38c>)
1004098c:	42a9      	cmp	r1, r5
1004098e:	d100      	bne.n	10040992 <__aeabi_dadd+0x162>
10040990:	e224      	b.n	10040ddc <__aeabi_dadd+0x5ac>
10040992:	2701      	movs	r7, #1
10040994:	2c38      	cmp	r4, #56	@ 0x38
10040996:	dc11      	bgt.n	100409bc <__aeabi_dadd+0x18c>
10040998:	0021      	movs	r1, r4
1004099a:	291f      	cmp	r1, #31
1004099c:	dd00      	ble.n	100409a0 <__aeabi_dadd+0x170>
1004099e:	e20b      	b.n	10040db8 <__aeabi_dadd+0x588>
100409a0:	2420      	movs	r4, #32
100409a2:	0037      	movs	r7, r6
100409a4:	4648      	mov	r0, r9
100409a6:	1a64      	subs	r4, r4, r1
100409a8:	40a7      	lsls	r7, r4
100409aa:	40c8      	lsrs	r0, r1
100409ac:	4307      	orrs	r7, r0
100409ae:	4648      	mov	r0, r9
100409b0:	40a0      	lsls	r0, r4
100409b2:	40ce      	lsrs	r6, r1
100409b4:	1e44      	subs	r4, r0, #1
100409b6:	41a0      	sbcs	r0, r4
100409b8:	1b9b      	subs	r3, r3, r6
100409ba:	4307      	orrs	r7, r0
100409bc:	1bd7      	subs	r7, r2, r7
100409be:	42ba      	cmp	r2, r7
100409c0:	4192      	sbcs	r2, r2
100409c2:	4252      	negs	r2, r2
100409c4:	4665      	mov	r5, ip
100409c6:	4644      	mov	r4, r8
100409c8:	1a9e      	subs	r6, r3, r2
100409ca:	e783      	b.n	100408d4 <__aeabi_dadd+0xa4>
100409cc:	2900      	cmp	r1, #0
100409ce:	dc00      	bgt.n	100409d2 <__aeabi_dadd+0x1a2>
100409d0:	e09c      	b.n	10040b0c <__aeabi_dadd+0x2dc>
100409d2:	4647      	mov	r7, r8
100409d4:	2f00      	cmp	r7, #0
100409d6:	d167      	bne.n	10040aa8 <__aeabi_dadd+0x278>
100409d8:	001f      	movs	r7, r3
100409da:	4317      	orrs	r7, r2
100409dc:	d100      	bne.n	100409e0 <__aeabi_dadd+0x1b0>
100409de:	e0e4      	b.n	10040baa <__aeabi_dadd+0x37a>
100409e0:	1e48      	subs	r0, r1, #1
100409e2:	2901      	cmp	r1, #1
100409e4:	d100      	bne.n	100409e8 <__aeabi_dadd+0x1b8>
100409e6:	e19b      	b.n	10040d20 <__aeabi_dadd+0x4f0>
100409e8:	4f74      	ldr	r7, [pc, #464]	@ (10040bbc <__aeabi_dadd+0x38c>)
100409ea:	42b9      	cmp	r1, r7
100409ec:	d100      	bne.n	100409f0 <__aeabi_dadd+0x1c0>
100409ee:	e0eb      	b.n	10040bc8 <__aeabi_dadd+0x398>
100409f0:	2701      	movs	r7, #1
100409f2:	0001      	movs	r1, r0
100409f4:	2838      	cmp	r0, #56	@ 0x38
100409f6:	dc11      	bgt.n	10040a1c <__aeabi_dadd+0x1ec>
100409f8:	291f      	cmp	r1, #31
100409fa:	dd00      	ble.n	100409fe <__aeabi_dadd+0x1ce>
100409fc:	e1c7      	b.n	10040d8e <__aeabi_dadd+0x55e>
100409fe:	2720      	movs	r7, #32
10040a00:	1a78      	subs	r0, r7, r1
10040a02:	001f      	movs	r7, r3
10040a04:	4684      	mov	ip, r0
10040a06:	4087      	lsls	r7, r0
10040a08:	0010      	movs	r0, r2
10040a0a:	40c8      	lsrs	r0, r1
10040a0c:	4307      	orrs	r7, r0
10040a0e:	4660      	mov	r0, ip
10040a10:	4082      	lsls	r2, r0
10040a12:	40cb      	lsrs	r3, r1
10040a14:	1e50      	subs	r0, r2, #1
10040a16:	4182      	sbcs	r2, r0
10040a18:	18f6      	adds	r6, r6, r3
10040a1a:	4317      	orrs	r7, r2
10040a1c:	444f      	add	r7, r9
10040a1e:	454f      	cmp	r7, r9
10040a20:	4180      	sbcs	r0, r0
10040a22:	4240      	negs	r0, r0
10040a24:	1836      	adds	r6, r6, r0
10040a26:	0233      	lsls	r3, r6, #8
10040a28:	d557      	bpl.n	10040ada <__aeabi_dadd+0x2aa>
10040a2a:	4b64      	ldr	r3, [pc, #400]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040a2c:	3401      	adds	r4, #1
10040a2e:	429c      	cmp	r4, r3
10040a30:	d045      	beq.n	10040abe <__aeabi_dadd+0x28e>
10040a32:	2101      	movs	r1, #1
10040a34:	4b62      	ldr	r3, [pc, #392]	@ (10040bc0 <__aeabi_dadd+0x390>)
10040a36:	087a      	lsrs	r2, r7, #1
10040a38:	401e      	ands	r6, r3
10040a3a:	4039      	ands	r1, r7
10040a3c:	430a      	orrs	r2, r1
10040a3e:	07f7      	lsls	r7, r6, #31
10040a40:	4317      	orrs	r7, r2
10040a42:	0876      	lsrs	r6, r6, #1
10040a44:	e771      	b.n	1004092a <__aeabi_dadd+0xfa>
10040a46:	001f      	movs	r7, r3
10040a48:	4317      	orrs	r7, r2
10040a4a:	d100      	bne.n	10040a4e <__aeabi_dadd+0x21e>
10040a4c:	e0ad      	b.n	10040baa <__aeabi_dadd+0x37a>
10040a4e:	1e4f      	subs	r7, r1, #1
10040a50:	46bc      	mov	ip, r7
10040a52:	2901      	cmp	r1, #1
10040a54:	d100      	bne.n	10040a58 <__aeabi_dadd+0x228>
10040a56:	e182      	b.n	10040d5e <__aeabi_dadd+0x52e>
10040a58:	4f58      	ldr	r7, [pc, #352]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040a5a:	42b9      	cmp	r1, r7
10040a5c:	d100      	bne.n	10040a60 <__aeabi_dadd+0x230>
10040a5e:	e190      	b.n	10040d82 <__aeabi_dadd+0x552>
10040a60:	4661      	mov	r1, ip
10040a62:	2701      	movs	r7, #1
10040a64:	2938      	cmp	r1, #56	@ 0x38
10040a66:	dd00      	ble.n	10040a6a <__aeabi_dadd+0x23a>
10040a68:	e72e      	b.n	100408c8 <__aeabi_dadd+0x98>
10040a6a:	e718      	b.n	1004089e <__aeabi_dadd+0x6e>
10040a6c:	4f55      	ldr	r7, [pc, #340]	@ (10040bc4 <__aeabi_dadd+0x394>)
10040a6e:	1c61      	adds	r1, r4, #1
10040a70:	4239      	tst	r1, r7
10040a72:	d000      	beq.n	10040a76 <__aeabi_dadd+0x246>
10040a74:	e0d0      	b.n	10040c18 <__aeabi_dadd+0x3e8>
10040a76:	0031      	movs	r1, r6
10040a78:	4648      	mov	r0, r9
10040a7a:	001f      	movs	r7, r3
10040a7c:	4301      	orrs	r1, r0
10040a7e:	4317      	orrs	r7, r2
10040a80:	2c00      	cmp	r4, #0
10040a82:	d000      	beq.n	10040a86 <__aeabi_dadd+0x256>
10040a84:	e13d      	b.n	10040d02 <__aeabi_dadd+0x4d2>
10040a86:	2900      	cmp	r1, #0
10040a88:	d100      	bne.n	10040a8c <__aeabi_dadd+0x25c>
10040a8a:	e1bc      	b.n	10040e06 <__aeabi_dadd+0x5d6>
10040a8c:	2f00      	cmp	r7, #0
10040a8e:	d000      	beq.n	10040a92 <__aeabi_dadd+0x262>
10040a90:	e1bf      	b.n	10040e12 <__aeabi_dadd+0x5e2>
10040a92:	464b      	mov	r3, r9
10040a94:	2100      	movs	r1, #0
10040a96:	08d8      	lsrs	r0, r3, #3
10040a98:	0777      	lsls	r7, r6, #29
10040a9a:	4307      	orrs	r7, r0
10040a9c:	08f0      	lsrs	r0, r6, #3
10040a9e:	0306      	lsls	r6, r0, #12
10040aa0:	054c      	lsls	r4, r1, #21
10040aa2:	0b36      	lsrs	r6, r6, #12
10040aa4:	0d64      	lsrs	r4, r4, #21
10040aa6:	e00c      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040aa8:	4f44      	ldr	r7, [pc, #272]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040aaa:	42bc      	cmp	r4, r7
10040aac:	d100      	bne.n	10040ab0 <__aeabi_dadd+0x280>
10040aae:	e08b      	b.n	10040bc8 <__aeabi_dadd+0x398>
10040ab0:	2701      	movs	r7, #1
10040ab2:	2938      	cmp	r1, #56	@ 0x38
10040ab4:	dcb2      	bgt.n	10040a1c <__aeabi_dadd+0x1ec>
10040ab6:	2780      	movs	r7, #128	@ 0x80
10040ab8:	043f      	lsls	r7, r7, #16
10040aba:	433b      	orrs	r3, r7
10040abc:	e79c      	b.n	100409f8 <__aeabi_dadd+0x1c8>
10040abe:	2600      	movs	r6, #0
10040ac0:	2700      	movs	r7, #0
10040ac2:	0524      	lsls	r4, r4, #20
10040ac4:	4334      	orrs	r4, r6
10040ac6:	07ed      	lsls	r5, r5, #31
10040ac8:	432c      	orrs	r4, r5
10040aca:	0038      	movs	r0, r7
10040acc:	0021      	movs	r1, r4
10040ace:	b002      	add	sp, #8
10040ad0:	bce0      	pop	{r5, r6, r7}
10040ad2:	46ba      	mov	sl, r7
10040ad4:	46b1      	mov	r9, r6
10040ad6:	46a8      	mov	r8, r5
10040ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040ada:	077b      	lsls	r3, r7, #29
10040adc:	d004      	beq.n	10040ae8 <__aeabi_dadd+0x2b8>
10040ade:	230f      	movs	r3, #15
10040ae0:	403b      	ands	r3, r7
10040ae2:	2b04      	cmp	r3, #4
10040ae4:	d000      	beq.n	10040ae8 <__aeabi_dadd+0x2b8>
10040ae6:	e728      	b.n	1004093a <__aeabi_dadd+0x10a>
10040ae8:	08f8      	lsrs	r0, r7, #3
10040aea:	4b34      	ldr	r3, [pc, #208]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040aec:	0777      	lsls	r7, r6, #29
10040aee:	4307      	orrs	r7, r0
10040af0:	08f0      	lsrs	r0, r6, #3
10040af2:	429c      	cmp	r4, r3
10040af4:	d000      	beq.n	10040af8 <__aeabi_dadd+0x2c8>
10040af6:	e24a      	b.n	10040f8e <__aeabi_dadd+0x75e>
10040af8:	003b      	movs	r3, r7
10040afa:	4303      	orrs	r3, r0
10040afc:	d059      	beq.n	10040bb2 <__aeabi_dadd+0x382>
10040afe:	2680      	movs	r6, #128	@ 0x80
10040b00:	0336      	lsls	r6, r6, #12
10040b02:	4306      	orrs	r6, r0
10040b04:	0336      	lsls	r6, r6, #12
10040b06:	4c2d      	ldr	r4, [pc, #180]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040b08:	0b36      	lsrs	r6, r6, #12
10040b0a:	e7da      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040b0c:	2900      	cmp	r1, #0
10040b0e:	d061      	beq.n	10040bd4 <__aeabi_dadd+0x3a4>
10040b10:	4641      	mov	r1, r8
10040b12:	1b09      	subs	r1, r1, r4
10040b14:	2c00      	cmp	r4, #0
10040b16:	d100      	bne.n	10040b1a <__aeabi_dadd+0x2ea>
10040b18:	e0b9      	b.n	10040c8e <__aeabi_dadd+0x45e>
10040b1a:	4c28      	ldr	r4, [pc, #160]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040b1c:	45a0      	cmp	r8, r4
10040b1e:	d100      	bne.n	10040b22 <__aeabi_dadd+0x2f2>
10040b20:	e1a5      	b.n	10040e6e <__aeabi_dadd+0x63e>
10040b22:	2701      	movs	r7, #1
10040b24:	2938      	cmp	r1, #56	@ 0x38
10040b26:	dc13      	bgt.n	10040b50 <__aeabi_dadd+0x320>
10040b28:	2480      	movs	r4, #128	@ 0x80
10040b2a:	0424      	lsls	r4, r4, #16
10040b2c:	4326      	orrs	r6, r4
10040b2e:	291f      	cmp	r1, #31
10040b30:	dd00      	ble.n	10040b34 <__aeabi_dadd+0x304>
10040b32:	e1c8      	b.n	10040ec6 <__aeabi_dadd+0x696>
10040b34:	2420      	movs	r4, #32
10040b36:	0037      	movs	r7, r6
10040b38:	4648      	mov	r0, r9
10040b3a:	1a64      	subs	r4, r4, r1
10040b3c:	40a7      	lsls	r7, r4
10040b3e:	40c8      	lsrs	r0, r1
10040b40:	4307      	orrs	r7, r0
10040b42:	4648      	mov	r0, r9
10040b44:	40a0      	lsls	r0, r4
10040b46:	40ce      	lsrs	r6, r1
10040b48:	1e44      	subs	r4, r0, #1
10040b4a:	41a0      	sbcs	r0, r4
10040b4c:	199b      	adds	r3, r3, r6
10040b4e:	4307      	orrs	r7, r0
10040b50:	18bf      	adds	r7, r7, r2
10040b52:	4297      	cmp	r7, r2
10040b54:	4192      	sbcs	r2, r2
10040b56:	4252      	negs	r2, r2
10040b58:	4644      	mov	r4, r8
10040b5a:	18d6      	adds	r6, r2, r3
10040b5c:	e763      	b.n	10040a26 <__aeabi_dadd+0x1f6>
10040b5e:	0038      	movs	r0, r7
10040b60:	f7ff fd2e 	bl	100405c0 <__clzsi2>
10040b64:	0003      	movs	r3, r0
10040b66:	3318      	adds	r3, #24
10040b68:	2b1f      	cmp	r3, #31
10040b6a:	dc00      	bgt.n	10040b6e <__aeabi_dadd+0x33e>
10040b6c:	e6bf      	b.n	100408ee <__aeabi_dadd+0xbe>
10040b6e:	003a      	movs	r2, r7
10040b70:	3808      	subs	r0, #8
10040b72:	4082      	lsls	r2, r0
10040b74:	429c      	cmp	r4, r3
10040b76:	dd00      	ble.n	10040b7a <__aeabi_dadd+0x34a>
10040b78:	e083      	b.n	10040c82 <__aeabi_dadd+0x452>
10040b7a:	1b1b      	subs	r3, r3, r4
10040b7c:	1c58      	adds	r0, r3, #1
10040b7e:	281f      	cmp	r0, #31
10040b80:	dc00      	bgt.n	10040b84 <__aeabi_dadd+0x354>
10040b82:	e1b4      	b.n	10040eee <__aeabi_dadd+0x6be>
10040b84:	0017      	movs	r7, r2
10040b86:	3b1f      	subs	r3, #31
10040b88:	40df      	lsrs	r7, r3
10040b8a:	2820      	cmp	r0, #32
10040b8c:	d005      	beq.n	10040b9a <__aeabi_dadd+0x36a>
10040b8e:	2340      	movs	r3, #64	@ 0x40
10040b90:	1a1b      	subs	r3, r3, r0
10040b92:	409a      	lsls	r2, r3
10040b94:	1e53      	subs	r3, r2, #1
10040b96:	419a      	sbcs	r2, r3
10040b98:	4317      	orrs	r7, r2
10040b9a:	2400      	movs	r4, #0
10040b9c:	2f00      	cmp	r7, #0
10040b9e:	d00a      	beq.n	10040bb6 <__aeabi_dadd+0x386>
10040ba0:	077b      	lsls	r3, r7, #29
10040ba2:	d000      	beq.n	10040ba6 <__aeabi_dadd+0x376>
10040ba4:	e6c4      	b.n	10040930 <__aeabi_dadd+0x100>
10040ba6:	0026      	movs	r6, r4
10040ba8:	e79e      	b.n	10040ae8 <__aeabi_dadd+0x2b8>
10040baa:	464b      	mov	r3, r9
10040bac:	000c      	movs	r4, r1
10040bae:	08d8      	lsrs	r0, r3, #3
10040bb0:	e79b      	b.n	10040aea <__aeabi_dadd+0x2ba>
10040bb2:	2700      	movs	r7, #0
10040bb4:	4c01      	ldr	r4, [pc, #4]	@ (10040bbc <__aeabi_dadd+0x38c>)
10040bb6:	2600      	movs	r6, #0
10040bb8:	e783      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040bba:	46c0      	nop			@ (mov r8, r8)
10040bbc:	000007ff 	.word	0x000007ff
10040bc0:	ff7fffff 	.word	0xff7fffff
10040bc4:	000007fe 	.word	0x000007fe
10040bc8:	464b      	mov	r3, r9
10040bca:	0777      	lsls	r7, r6, #29
10040bcc:	08d8      	lsrs	r0, r3, #3
10040bce:	4307      	orrs	r7, r0
10040bd0:	08f0      	lsrs	r0, r6, #3
10040bd2:	e791      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040bd4:	4fcd      	ldr	r7, [pc, #820]	@ (10040f0c <__aeabi_dadd+0x6dc>)
10040bd6:	1c61      	adds	r1, r4, #1
10040bd8:	4239      	tst	r1, r7
10040bda:	d16b      	bne.n	10040cb4 <__aeabi_dadd+0x484>
10040bdc:	0031      	movs	r1, r6
10040bde:	4648      	mov	r0, r9
10040be0:	4301      	orrs	r1, r0
10040be2:	2c00      	cmp	r4, #0
10040be4:	d000      	beq.n	10040be8 <__aeabi_dadd+0x3b8>
10040be6:	e14b      	b.n	10040e80 <__aeabi_dadd+0x650>
10040be8:	001f      	movs	r7, r3
10040bea:	4317      	orrs	r7, r2
10040bec:	2900      	cmp	r1, #0
10040bee:	d100      	bne.n	10040bf2 <__aeabi_dadd+0x3c2>
10040bf0:	e181      	b.n	10040ef6 <__aeabi_dadd+0x6c6>
10040bf2:	2f00      	cmp	r7, #0
10040bf4:	d100      	bne.n	10040bf8 <__aeabi_dadd+0x3c8>
10040bf6:	e74c      	b.n	10040a92 <__aeabi_dadd+0x262>
10040bf8:	444a      	add	r2, r9
10040bfa:	454a      	cmp	r2, r9
10040bfc:	4180      	sbcs	r0, r0
10040bfe:	18f6      	adds	r6, r6, r3
10040c00:	4240      	negs	r0, r0
10040c02:	1836      	adds	r6, r6, r0
10040c04:	0233      	lsls	r3, r6, #8
10040c06:	d500      	bpl.n	10040c0a <__aeabi_dadd+0x3da>
10040c08:	e1b0      	b.n	10040f6c <__aeabi_dadd+0x73c>
10040c0a:	0017      	movs	r7, r2
10040c0c:	4691      	mov	r9, r2
10040c0e:	4337      	orrs	r7, r6
10040c10:	d000      	beq.n	10040c14 <__aeabi_dadd+0x3e4>
10040c12:	e73e      	b.n	10040a92 <__aeabi_dadd+0x262>
10040c14:	2600      	movs	r6, #0
10040c16:	e754      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040c18:	4649      	mov	r1, r9
10040c1a:	1a89      	subs	r1, r1, r2
10040c1c:	4688      	mov	r8, r1
10040c1e:	45c1      	cmp	r9, r8
10040c20:	41bf      	sbcs	r7, r7
10040c22:	1af1      	subs	r1, r6, r3
10040c24:	427f      	negs	r7, r7
10040c26:	1bc9      	subs	r1, r1, r7
10040c28:	020f      	lsls	r7, r1, #8
10040c2a:	d461      	bmi.n	10040cf0 <__aeabi_dadd+0x4c0>
10040c2c:	4647      	mov	r7, r8
10040c2e:	430f      	orrs	r7, r1
10040c30:	d100      	bne.n	10040c34 <__aeabi_dadd+0x404>
10040c32:	e0bd      	b.n	10040db0 <__aeabi_dadd+0x580>
10040c34:	000e      	movs	r6, r1
10040c36:	4647      	mov	r7, r8
10040c38:	e651      	b.n	100408de <__aeabi_dadd+0xae>
10040c3a:	4cb5      	ldr	r4, [pc, #724]	@ (10040f10 <__aeabi_dadd+0x6e0>)
10040c3c:	45a0      	cmp	r8, r4
10040c3e:	d100      	bne.n	10040c42 <__aeabi_dadd+0x412>
10040c40:	e100      	b.n	10040e44 <__aeabi_dadd+0x614>
10040c42:	2701      	movs	r7, #1
10040c44:	2938      	cmp	r1, #56	@ 0x38
10040c46:	dd00      	ble.n	10040c4a <__aeabi_dadd+0x41a>
10040c48:	e6b8      	b.n	100409bc <__aeabi_dadd+0x18c>
10040c4a:	2480      	movs	r4, #128	@ 0x80
10040c4c:	0424      	lsls	r4, r4, #16
10040c4e:	4326      	orrs	r6, r4
10040c50:	e6a3      	b.n	1004099a <__aeabi_dadd+0x16a>
10040c52:	4eb0      	ldr	r6, [pc, #704]	@ (10040f14 <__aeabi_dadd+0x6e4>)
10040c54:	1ae4      	subs	r4, r4, r3
10040c56:	4016      	ands	r6, r2
10040c58:	077b      	lsls	r3, r7, #29
10040c5a:	d000      	beq.n	10040c5e <__aeabi_dadd+0x42e>
10040c5c:	e73f      	b.n	10040ade <__aeabi_dadd+0x2ae>
10040c5e:	e743      	b.n	10040ae8 <__aeabi_dadd+0x2b8>
10040c60:	000f      	movs	r7, r1
10040c62:	0018      	movs	r0, r3
10040c64:	3f20      	subs	r7, #32
10040c66:	40f8      	lsrs	r0, r7
10040c68:	4684      	mov	ip, r0
10040c6a:	2920      	cmp	r1, #32
10040c6c:	d003      	beq.n	10040c76 <__aeabi_dadd+0x446>
10040c6e:	2740      	movs	r7, #64	@ 0x40
10040c70:	1a79      	subs	r1, r7, r1
10040c72:	408b      	lsls	r3, r1
10040c74:	431a      	orrs	r2, r3
10040c76:	1e53      	subs	r3, r2, #1
10040c78:	419a      	sbcs	r2, r3
10040c7a:	4663      	mov	r3, ip
10040c7c:	0017      	movs	r7, r2
10040c7e:	431f      	orrs	r7, r3
10040c80:	e622      	b.n	100408c8 <__aeabi_dadd+0x98>
10040c82:	48a4      	ldr	r0, [pc, #656]	@ (10040f14 <__aeabi_dadd+0x6e4>)
10040c84:	1ae1      	subs	r1, r4, r3
10040c86:	4010      	ands	r0, r2
10040c88:	0747      	lsls	r7, r0, #29
10040c8a:	08c0      	lsrs	r0, r0, #3
10040c8c:	e707      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040c8e:	0034      	movs	r4, r6
10040c90:	4648      	mov	r0, r9
10040c92:	4304      	orrs	r4, r0
10040c94:	d100      	bne.n	10040c98 <__aeabi_dadd+0x468>
10040c96:	e0fa      	b.n	10040e8e <__aeabi_dadd+0x65e>
10040c98:	1e4c      	subs	r4, r1, #1
10040c9a:	2901      	cmp	r1, #1
10040c9c:	d100      	bne.n	10040ca0 <__aeabi_dadd+0x470>
10040c9e:	e0d7      	b.n	10040e50 <__aeabi_dadd+0x620>
10040ca0:	4f9b      	ldr	r7, [pc, #620]	@ (10040f10 <__aeabi_dadd+0x6e0>)
10040ca2:	42b9      	cmp	r1, r7
10040ca4:	d100      	bne.n	10040ca8 <__aeabi_dadd+0x478>
10040ca6:	e0e2      	b.n	10040e6e <__aeabi_dadd+0x63e>
10040ca8:	2701      	movs	r7, #1
10040caa:	2c38      	cmp	r4, #56	@ 0x38
10040cac:	dd00      	ble.n	10040cb0 <__aeabi_dadd+0x480>
10040cae:	e74f      	b.n	10040b50 <__aeabi_dadd+0x320>
10040cb0:	0021      	movs	r1, r4
10040cb2:	e73c      	b.n	10040b2e <__aeabi_dadd+0x2fe>
10040cb4:	4c96      	ldr	r4, [pc, #600]	@ (10040f10 <__aeabi_dadd+0x6e0>)
10040cb6:	42a1      	cmp	r1, r4
10040cb8:	d100      	bne.n	10040cbc <__aeabi_dadd+0x48c>
10040cba:	e0dd      	b.n	10040e78 <__aeabi_dadd+0x648>
10040cbc:	444a      	add	r2, r9
10040cbe:	454a      	cmp	r2, r9
10040cc0:	4180      	sbcs	r0, r0
10040cc2:	18f3      	adds	r3, r6, r3
10040cc4:	4240      	negs	r0, r0
10040cc6:	1818      	adds	r0, r3, r0
10040cc8:	07c7      	lsls	r7, r0, #31
10040cca:	0852      	lsrs	r2, r2, #1
10040ccc:	4317      	orrs	r7, r2
10040cce:	0846      	lsrs	r6, r0, #1
10040cd0:	0752      	lsls	r2, r2, #29
10040cd2:	d005      	beq.n	10040ce0 <__aeabi_dadd+0x4b0>
10040cd4:	220f      	movs	r2, #15
10040cd6:	000c      	movs	r4, r1
10040cd8:	403a      	ands	r2, r7
10040cda:	2a04      	cmp	r2, #4
10040cdc:	d000      	beq.n	10040ce0 <__aeabi_dadd+0x4b0>
10040cde:	e62c      	b.n	1004093a <__aeabi_dadd+0x10a>
10040ce0:	0776      	lsls	r6, r6, #29
10040ce2:	08ff      	lsrs	r7, r7, #3
10040ce4:	4337      	orrs	r7, r6
10040ce6:	0900      	lsrs	r0, r0, #4
10040ce8:	e6d9      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040cea:	2700      	movs	r7, #0
10040cec:	2600      	movs	r6, #0
10040cee:	e6e8      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040cf0:	4649      	mov	r1, r9
10040cf2:	1a57      	subs	r7, r2, r1
10040cf4:	42ba      	cmp	r2, r7
10040cf6:	4192      	sbcs	r2, r2
10040cf8:	1b9e      	subs	r6, r3, r6
10040cfa:	4252      	negs	r2, r2
10040cfc:	4665      	mov	r5, ip
10040cfe:	1ab6      	subs	r6, r6, r2
10040d00:	e5ed      	b.n	100408de <__aeabi_dadd+0xae>
10040d02:	2900      	cmp	r1, #0
10040d04:	d000      	beq.n	10040d08 <__aeabi_dadd+0x4d8>
10040d06:	e0c6      	b.n	10040e96 <__aeabi_dadd+0x666>
10040d08:	2f00      	cmp	r7, #0
10040d0a:	d167      	bne.n	10040ddc <__aeabi_dadd+0x5ac>
10040d0c:	2680      	movs	r6, #128	@ 0x80
10040d0e:	2500      	movs	r5, #0
10040d10:	4c7f      	ldr	r4, [pc, #508]	@ (10040f10 <__aeabi_dadd+0x6e0>)
10040d12:	0336      	lsls	r6, r6, #12
10040d14:	e6d5      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040d16:	4665      	mov	r5, ip
10040d18:	000c      	movs	r4, r1
10040d1a:	001e      	movs	r6, r3
10040d1c:	08d0      	lsrs	r0, r2, #3
10040d1e:	e6e4      	b.n	10040aea <__aeabi_dadd+0x2ba>
10040d20:	444a      	add	r2, r9
10040d22:	454a      	cmp	r2, r9
10040d24:	4180      	sbcs	r0, r0
10040d26:	18f3      	adds	r3, r6, r3
10040d28:	4240      	negs	r0, r0
10040d2a:	1818      	adds	r0, r3, r0
10040d2c:	0011      	movs	r1, r2
10040d2e:	0203      	lsls	r3, r0, #8
10040d30:	d400      	bmi.n	10040d34 <__aeabi_dadd+0x504>
10040d32:	e096      	b.n	10040e62 <__aeabi_dadd+0x632>
10040d34:	4b77      	ldr	r3, [pc, #476]	@ (10040f14 <__aeabi_dadd+0x6e4>)
10040d36:	0849      	lsrs	r1, r1, #1
10040d38:	4018      	ands	r0, r3
10040d3a:	07c3      	lsls	r3, r0, #31
10040d3c:	430b      	orrs	r3, r1
10040d3e:	0844      	lsrs	r4, r0, #1
10040d40:	0749      	lsls	r1, r1, #29
10040d42:	d100      	bne.n	10040d46 <__aeabi_dadd+0x516>
10040d44:	e129      	b.n	10040f9a <__aeabi_dadd+0x76a>
10040d46:	220f      	movs	r2, #15
10040d48:	401a      	ands	r2, r3
10040d4a:	2a04      	cmp	r2, #4
10040d4c:	d100      	bne.n	10040d50 <__aeabi_dadd+0x520>
10040d4e:	e0ea      	b.n	10040f26 <__aeabi_dadd+0x6f6>
10040d50:	1d1f      	adds	r7, r3, #4
10040d52:	429f      	cmp	r7, r3
10040d54:	41b6      	sbcs	r6, r6
10040d56:	4276      	negs	r6, r6
10040d58:	1936      	adds	r6, r6, r4
10040d5a:	2402      	movs	r4, #2
10040d5c:	e6c4      	b.n	10040ae8 <__aeabi_dadd+0x2b8>
10040d5e:	4649      	mov	r1, r9
10040d60:	1a8f      	subs	r7, r1, r2
10040d62:	45b9      	cmp	r9, r7
10040d64:	4180      	sbcs	r0, r0
10040d66:	1af6      	subs	r6, r6, r3
10040d68:	4240      	negs	r0, r0
10040d6a:	1a36      	subs	r6, r6, r0
10040d6c:	0233      	lsls	r3, r6, #8
10040d6e:	d406      	bmi.n	10040d7e <__aeabi_dadd+0x54e>
10040d70:	0773      	lsls	r3, r6, #29
10040d72:	08ff      	lsrs	r7, r7, #3
10040d74:	2101      	movs	r1, #1
10040d76:	431f      	orrs	r7, r3
10040d78:	08f0      	lsrs	r0, r6, #3
10040d7a:	e690      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040d7c:	4665      	mov	r5, ip
10040d7e:	2401      	movs	r4, #1
10040d80:	e5ab      	b.n	100408da <__aeabi_dadd+0xaa>
10040d82:	464b      	mov	r3, r9
10040d84:	0777      	lsls	r7, r6, #29
10040d86:	08d8      	lsrs	r0, r3, #3
10040d88:	4307      	orrs	r7, r0
10040d8a:	08f0      	lsrs	r0, r6, #3
10040d8c:	e6b4      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040d8e:	000f      	movs	r7, r1
10040d90:	0018      	movs	r0, r3
10040d92:	3f20      	subs	r7, #32
10040d94:	40f8      	lsrs	r0, r7
10040d96:	4684      	mov	ip, r0
10040d98:	2920      	cmp	r1, #32
10040d9a:	d003      	beq.n	10040da4 <__aeabi_dadd+0x574>
10040d9c:	2740      	movs	r7, #64	@ 0x40
10040d9e:	1a79      	subs	r1, r7, r1
10040da0:	408b      	lsls	r3, r1
10040da2:	431a      	orrs	r2, r3
10040da4:	1e53      	subs	r3, r2, #1
10040da6:	419a      	sbcs	r2, r3
10040da8:	4663      	mov	r3, ip
10040daa:	0017      	movs	r7, r2
10040dac:	431f      	orrs	r7, r3
10040dae:	e635      	b.n	10040a1c <__aeabi_dadd+0x1ec>
10040db0:	2500      	movs	r5, #0
10040db2:	2400      	movs	r4, #0
10040db4:	2600      	movs	r6, #0
10040db6:	e684      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040db8:	000c      	movs	r4, r1
10040dba:	0035      	movs	r5, r6
10040dbc:	3c20      	subs	r4, #32
10040dbe:	40e5      	lsrs	r5, r4
10040dc0:	2920      	cmp	r1, #32
10040dc2:	d005      	beq.n	10040dd0 <__aeabi_dadd+0x5a0>
10040dc4:	2440      	movs	r4, #64	@ 0x40
10040dc6:	1a61      	subs	r1, r4, r1
10040dc8:	408e      	lsls	r6, r1
10040dca:	4649      	mov	r1, r9
10040dcc:	4331      	orrs	r1, r6
10040dce:	4689      	mov	r9, r1
10040dd0:	4648      	mov	r0, r9
10040dd2:	1e41      	subs	r1, r0, #1
10040dd4:	4188      	sbcs	r0, r1
10040dd6:	0007      	movs	r7, r0
10040dd8:	432f      	orrs	r7, r5
10040dda:	e5ef      	b.n	100409bc <__aeabi_dadd+0x18c>
10040ddc:	08d2      	lsrs	r2, r2, #3
10040dde:	075f      	lsls	r7, r3, #29
10040de0:	4665      	mov	r5, ip
10040de2:	4317      	orrs	r7, r2
10040de4:	08d8      	lsrs	r0, r3, #3
10040de6:	e687      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040de8:	1a17      	subs	r7, r2, r0
10040dea:	42ba      	cmp	r2, r7
10040dec:	4192      	sbcs	r2, r2
10040dee:	1b9e      	subs	r6, r3, r6
10040df0:	4252      	negs	r2, r2
10040df2:	1ab6      	subs	r6, r6, r2
10040df4:	0233      	lsls	r3, r6, #8
10040df6:	d4c1      	bmi.n	10040d7c <__aeabi_dadd+0x54c>
10040df8:	0773      	lsls	r3, r6, #29
10040dfa:	08ff      	lsrs	r7, r7, #3
10040dfc:	4665      	mov	r5, ip
10040dfe:	2101      	movs	r1, #1
10040e00:	431f      	orrs	r7, r3
10040e02:	08f0      	lsrs	r0, r6, #3
10040e04:	e64b      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040e06:	2f00      	cmp	r7, #0
10040e08:	d07b      	beq.n	10040f02 <__aeabi_dadd+0x6d2>
10040e0a:	4665      	mov	r5, ip
10040e0c:	001e      	movs	r6, r3
10040e0e:	4691      	mov	r9, r2
10040e10:	e63f      	b.n	10040a92 <__aeabi_dadd+0x262>
10040e12:	1a81      	subs	r1, r0, r2
10040e14:	4688      	mov	r8, r1
10040e16:	45c1      	cmp	r9, r8
10040e18:	41a4      	sbcs	r4, r4
10040e1a:	1af1      	subs	r1, r6, r3
10040e1c:	4264      	negs	r4, r4
10040e1e:	1b09      	subs	r1, r1, r4
10040e20:	2480      	movs	r4, #128	@ 0x80
10040e22:	0424      	lsls	r4, r4, #16
10040e24:	4221      	tst	r1, r4
10040e26:	d077      	beq.n	10040f18 <__aeabi_dadd+0x6e8>
10040e28:	1a10      	subs	r0, r2, r0
10040e2a:	4282      	cmp	r2, r0
10040e2c:	4192      	sbcs	r2, r2
10040e2e:	0007      	movs	r7, r0
10040e30:	1b9e      	subs	r6, r3, r6
10040e32:	4252      	negs	r2, r2
10040e34:	1ab6      	subs	r6, r6, r2
10040e36:	4337      	orrs	r7, r6
10040e38:	d000      	beq.n	10040e3c <__aeabi_dadd+0x60c>
10040e3a:	e0a0      	b.n	10040f7e <__aeabi_dadd+0x74e>
10040e3c:	4665      	mov	r5, ip
10040e3e:	2400      	movs	r4, #0
10040e40:	2600      	movs	r6, #0
10040e42:	e63e      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040e44:	075f      	lsls	r7, r3, #29
10040e46:	08d2      	lsrs	r2, r2, #3
10040e48:	4665      	mov	r5, ip
10040e4a:	4317      	orrs	r7, r2
10040e4c:	08d8      	lsrs	r0, r3, #3
10040e4e:	e653      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040e50:	1881      	adds	r1, r0, r2
10040e52:	4291      	cmp	r1, r2
10040e54:	4192      	sbcs	r2, r2
10040e56:	18f0      	adds	r0, r6, r3
10040e58:	4252      	negs	r2, r2
10040e5a:	1880      	adds	r0, r0, r2
10040e5c:	0203      	lsls	r3, r0, #8
10040e5e:	d500      	bpl.n	10040e62 <__aeabi_dadd+0x632>
10040e60:	e768      	b.n	10040d34 <__aeabi_dadd+0x504>
10040e62:	0747      	lsls	r7, r0, #29
10040e64:	08c9      	lsrs	r1, r1, #3
10040e66:	430f      	orrs	r7, r1
10040e68:	08c0      	lsrs	r0, r0, #3
10040e6a:	2101      	movs	r1, #1
10040e6c:	e617      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040e6e:	08d2      	lsrs	r2, r2, #3
10040e70:	075f      	lsls	r7, r3, #29
10040e72:	4317      	orrs	r7, r2
10040e74:	08d8      	lsrs	r0, r3, #3
10040e76:	e63f      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040e78:	000c      	movs	r4, r1
10040e7a:	2600      	movs	r6, #0
10040e7c:	2700      	movs	r7, #0
10040e7e:	e620      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040e80:	2900      	cmp	r1, #0
10040e82:	d156      	bne.n	10040f32 <__aeabi_dadd+0x702>
10040e84:	075f      	lsls	r7, r3, #29
10040e86:	08d2      	lsrs	r2, r2, #3
10040e88:	4317      	orrs	r7, r2
10040e8a:	08d8      	lsrs	r0, r3, #3
10040e8c:	e634      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040e8e:	000c      	movs	r4, r1
10040e90:	001e      	movs	r6, r3
10040e92:	08d0      	lsrs	r0, r2, #3
10040e94:	e629      	b.n	10040aea <__aeabi_dadd+0x2ba>
10040e96:	08c1      	lsrs	r1, r0, #3
10040e98:	0770      	lsls	r0, r6, #29
10040e9a:	4301      	orrs	r1, r0
10040e9c:	08f0      	lsrs	r0, r6, #3
10040e9e:	2f00      	cmp	r7, #0
10040ea0:	d062      	beq.n	10040f68 <__aeabi_dadd+0x738>
10040ea2:	2480      	movs	r4, #128	@ 0x80
10040ea4:	0324      	lsls	r4, r4, #12
10040ea6:	4220      	tst	r0, r4
10040ea8:	d007      	beq.n	10040eba <__aeabi_dadd+0x68a>
10040eaa:	08de      	lsrs	r6, r3, #3
10040eac:	4226      	tst	r6, r4
10040eae:	d104      	bne.n	10040eba <__aeabi_dadd+0x68a>
10040eb0:	4665      	mov	r5, ip
10040eb2:	0030      	movs	r0, r6
10040eb4:	08d1      	lsrs	r1, r2, #3
10040eb6:	075b      	lsls	r3, r3, #29
10040eb8:	4319      	orrs	r1, r3
10040eba:	0f4f      	lsrs	r7, r1, #29
10040ebc:	00c9      	lsls	r1, r1, #3
10040ebe:	08c9      	lsrs	r1, r1, #3
10040ec0:	077f      	lsls	r7, r7, #29
10040ec2:	430f      	orrs	r7, r1
10040ec4:	e618      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040ec6:	000c      	movs	r4, r1
10040ec8:	0030      	movs	r0, r6
10040eca:	3c20      	subs	r4, #32
10040ecc:	40e0      	lsrs	r0, r4
10040ece:	4684      	mov	ip, r0
10040ed0:	2920      	cmp	r1, #32
10040ed2:	d005      	beq.n	10040ee0 <__aeabi_dadd+0x6b0>
10040ed4:	2440      	movs	r4, #64	@ 0x40
10040ed6:	1a61      	subs	r1, r4, r1
10040ed8:	408e      	lsls	r6, r1
10040eda:	4649      	mov	r1, r9
10040edc:	4331      	orrs	r1, r6
10040ede:	4689      	mov	r9, r1
10040ee0:	4648      	mov	r0, r9
10040ee2:	1e41      	subs	r1, r0, #1
10040ee4:	4188      	sbcs	r0, r1
10040ee6:	4661      	mov	r1, ip
10040ee8:	0007      	movs	r7, r0
10040eea:	430f      	orrs	r7, r1
10040eec:	e630      	b.n	10040b50 <__aeabi_dadd+0x320>
10040eee:	2120      	movs	r1, #32
10040ef0:	2700      	movs	r7, #0
10040ef2:	1a09      	subs	r1, r1, r0
10040ef4:	e50e      	b.n	10040914 <__aeabi_dadd+0xe4>
10040ef6:	001e      	movs	r6, r3
10040ef8:	2f00      	cmp	r7, #0
10040efa:	d000      	beq.n	10040efe <__aeabi_dadd+0x6ce>
10040efc:	e522      	b.n	10040944 <__aeabi_dadd+0x114>
10040efe:	2400      	movs	r4, #0
10040f00:	e758      	b.n	10040db4 <__aeabi_dadd+0x584>
10040f02:	2500      	movs	r5, #0
10040f04:	2400      	movs	r4, #0
10040f06:	2600      	movs	r6, #0
10040f08:	e5db      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040f0a:	46c0      	nop			@ (mov r8, r8)
10040f0c:	000007fe 	.word	0x000007fe
10040f10:	000007ff 	.word	0x000007ff
10040f14:	ff7fffff 	.word	0xff7fffff
10040f18:	4647      	mov	r7, r8
10040f1a:	430f      	orrs	r7, r1
10040f1c:	d100      	bne.n	10040f20 <__aeabi_dadd+0x6f0>
10040f1e:	e747      	b.n	10040db0 <__aeabi_dadd+0x580>
10040f20:	000e      	movs	r6, r1
10040f22:	46c1      	mov	r9, r8
10040f24:	e5b5      	b.n	10040a92 <__aeabi_dadd+0x262>
10040f26:	08df      	lsrs	r7, r3, #3
10040f28:	0764      	lsls	r4, r4, #29
10040f2a:	2102      	movs	r1, #2
10040f2c:	4327      	orrs	r7, r4
10040f2e:	0900      	lsrs	r0, r0, #4
10040f30:	e5b5      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040f32:	0019      	movs	r1, r3
10040f34:	08c0      	lsrs	r0, r0, #3
10040f36:	0777      	lsls	r7, r6, #29
10040f38:	4307      	orrs	r7, r0
10040f3a:	4311      	orrs	r1, r2
10040f3c:	08f0      	lsrs	r0, r6, #3
10040f3e:	2900      	cmp	r1, #0
10040f40:	d100      	bne.n	10040f44 <__aeabi_dadd+0x714>
10040f42:	e5d9      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040f44:	2180      	movs	r1, #128	@ 0x80
10040f46:	0309      	lsls	r1, r1, #12
10040f48:	4208      	tst	r0, r1
10040f4a:	d007      	beq.n	10040f5c <__aeabi_dadd+0x72c>
10040f4c:	08dc      	lsrs	r4, r3, #3
10040f4e:	420c      	tst	r4, r1
10040f50:	d104      	bne.n	10040f5c <__aeabi_dadd+0x72c>
10040f52:	08d2      	lsrs	r2, r2, #3
10040f54:	075b      	lsls	r3, r3, #29
10040f56:	431a      	orrs	r2, r3
10040f58:	0017      	movs	r7, r2
10040f5a:	0020      	movs	r0, r4
10040f5c:	0f7b      	lsrs	r3, r7, #29
10040f5e:	00ff      	lsls	r7, r7, #3
10040f60:	08ff      	lsrs	r7, r7, #3
10040f62:	075b      	lsls	r3, r3, #29
10040f64:	431f      	orrs	r7, r3
10040f66:	e5c7      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040f68:	000f      	movs	r7, r1
10040f6a:	e5c5      	b.n	10040af8 <__aeabi_dadd+0x2c8>
10040f6c:	4b12      	ldr	r3, [pc, #72]	@ (10040fb8 <__aeabi_dadd+0x788>)
10040f6e:	08d2      	lsrs	r2, r2, #3
10040f70:	4033      	ands	r3, r6
10040f72:	075f      	lsls	r7, r3, #29
10040f74:	025b      	lsls	r3, r3, #9
10040f76:	2401      	movs	r4, #1
10040f78:	4317      	orrs	r7, r2
10040f7a:	0b1e      	lsrs	r6, r3, #12
10040f7c:	e5a1      	b.n	10040ac2 <__aeabi_dadd+0x292>
10040f7e:	4226      	tst	r6, r4
10040f80:	d012      	beq.n	10040fa8 <__aeabi_dadd+0x778>
10040f82:	4b0d      	ldr	r3, [pc, #52]	@ (10040fb8 <__aeabi_dadd+0x788>)
10040f84:	4665      	mov	r5, ip
10040f86:	0002      	movs	r2, r0
10040f88:	2401      	movs	r4, #1
10040f8a:	401e      	ands	r6, r3
10040f8c:	e4e6      	b.n	1004095c <__aeabi_dadd+0x12c>
10040f8e:	0021      	movs	r1, r4
10040f90:	e585      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040f92:	0017      	movs	r7, r2
10040f94:	e5a8      	b.n	10040ae8 <__aeabi_dadd+0x2b8>
10040f96:	003a      	movs	r2, r7
10040f98:	e4d4      	b.n	10040944 <__aeabi_dadd+0x114>
10040f9a:	08db      	lsrs	r3, r3, #3
10040f9c:	0764      	lsls	r4, r4, #29
10040f9e:	431c      	orrs	r4, r3
10040fa0:	0027      	movs	r7, r4
10040fa2:	2102      	movs	r1, #2
10040fa4:	0900      	lsrs	r0, r0, #4
10040fa6:	e57a      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040fa8:	08c0      	lsrs	r0, r0, #3
10040faa:	0777      	lsls	r7, r6, #29
10040fac:	4307      	orrs	r7, r0
10040fae:	4665      	mov	r5, ip
10040fb0:	2100      	movs	r1, #0
10040fb2:	08f0      	lsrs	r0, r6, #3
10040fb4:	e573      	b.n	10040a9e <__aeabi_dadd+0x26e>
10040fb6:	46c0      	nop			@ (mov r8, r8)
10040fb8:	ff7fffff 	.word	0xff7fffff

10040fbc <__aeabi_ddiv>:
10040fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
10040fbe:	46de      	mov	lr, fp
10040fc0:	4645      	mov	r5, r8
10040fc2:	4657      	mov	r7, sl
10040fc4:	464e      	mov	r6, r9
10040fc6:	b5e0      	push	{r5, r6, r7, lr}
10040fc8:	b087      	sub	sp, #28
10040fca:	9200      	str	r2, [sp, #0]
10040fcc:	9301      	str	r3, [sp, #4]
10040fce:	030b      	lsls	r3, r1, #12
10040fd0:	0b1b      	lsrs	r3, r3, #12
10040fd2:	469b      	mov	fp, r3
10040fd4:	0fca      	lsrs	r2, r1, #31
10040fd6:	004b      	lsls	r3, r1, #1
10040fd8:	0004      	movs	r4, r0
10040fda:	4680      	mov	r8, r0
10040fdc:	0d5b      	lsrs	r3, r3, #21
10040fde:	9202      	str	r2, [sp, #8]
10040fe0:	d100      	bne.n	10040fe4 <__aeabi_ddiv+0x28>
10040fe2:	e098      	b.n	10041116 <__aeabi_ddiv+0x15a>
10040fe4:	4a7c      	ldr	r2, [pc, #496]	@ (100411d8 <__aeabi_ddiv+0x21c>)
10040fe6:	4293      	cmp	r3, r2
10040fe8:	d037      	beq.n	1004105a <__aeabi_ddiv+0x9e>
10040fea:	4659      	mov	r1, fp
10040fec:	0f42      	lsrs	r2, r0, #29
10040fee:	00c9      	lsls	r1, r1, #3
10040ff0:	430a      	orrs	r2, r1
10040ff2:	2180      	movs	r1, #128	@ 0x80
10040ff4:	0409      	lsls	r1, r1, #16
10040ff6:	4311      	orrs	r1, r2
10040ff8:	00c2      	lsls	r2, r0, #3
10040ffa:	4690      	mov	r8, r2
10040ffc:	4a77      	ldr	r2, [pc, #476]	@ (100411dc <__aeabi_ddiv+0x220>)
10040ffe:	4689      	mov	r9, r1
10041000:	4692      	mov	sl, r2
10041002:	449a      	add	sl, r3
10041004:	2300      	movs	r3, #0
10041006:	2400      	movs	r4, #0
10041008:	9303      	str	r3, [sp, #12]
1004100a:	9e00      	ldr	r6, [sp, #0]
1004100c:	9f01      	ldr	r7, [sp, #4]
1004100e:	033b      	lsls	r3, r7, #12
10041010:	0b1b      	lsrs	r3, r3, #12
10041012:	469b      	mov	fp, r3
10041014:	007b      	lsls	r3, r7, #1
10041016:	0030      	movs	r0, r6
10041018:	0d5b      	lsrs	r3, r3, #21
1004101a:	0ffd      	lsrs	r5, r7, #31
1004101c:	2b00      	cmp	r3, #0
1004101e:	d059      	beq.n	100410d4 <__aeabi_ddiv+0x118>
10041020:	4a6d      	ldr	r2, [pc, #436]	@ (100411d8 <__aeabi_ddiv+0x21c>)
10041022:	4293      	cmp	r3, r2
10041024:	d048      	beq.n	100410b8 <__aeabi_ddiv+0xfc>
10041026:	4659      	mov	r1, fp
10041028:	0f72      	lsrs	r2, r6, #29
1004102a:	00c9      	lsls	r1, r1, #3
1004102c:	430a      	orrs	r2, r1
1004102e:	2180      	movs	r1, #128	@ 0x80
10041030:	0409      	lsls	r1, r1, #16
10041032:	4311      	orrs	r1, r2
10041034:	468b      	mov	fp, r1
10041036:	4969      	ldr	r1, [pc, #420]	@ (100411dc <__aeabi_ddiv+0x220>)
10041038:	00f2      	lsls	r2, r6, #3
1004103a:	468c      	mov	ip, r1
1004103c:	4651      	mov	r1, sl
1004103e:	4463      	add	r3, ip
10041040:	1acb      	subs	r3, r1, r3
10041042:	469a      	mov	sl, r3
10041044:	2100      	movs	r1, #0
10041046:	9e02      	ldr	r6, [sp, #8]
10041048:	406e      	eors	r6, r5
1004104a:	b2f6      	uxtb	r6, r6
1004104c:	2c0f      	cmp	r4, #15
1004104e:	d900      	bls.n	10041052 <__aeabi_ddiv+0x96>
10041050:	e0ce      	b.n	100411f0 <__aeabi_ddiv+0x234>
10041052:	4b63      	ldr	r3, [pc, #396]	@ (100411e0 <__aeabi_ddiv+0x224>)
10041054:	00a4      	lsls	r4, r4, #2
10041056:	591b      	ldr	r3, [r3, r4]
10041058:	469f      	mov	pc, r3
1004105a:	465a      	mov	r2, fp
1004105c:	4302      	orrs	r2, r0
1004105e:	4691      	mov	r9, r2
10041060:	d000      	beq.n	10041064 <__aeabi_ddiv+0xa8>
10041062:	e090      	b.n	10041186 <__aeabi_ddiv+0x1ca>
10041064:	469a      	mov	sl, r3
10041066:	2302      	movs	r3, #2
10041068:	4690      	mov	r8, r2
1004106a:	2408      	movs	r4, #8
1004106c:	9303      	str	r3, [sp, #12]
1004106e:	e7cc      	b.n	1004100a <__aeabi_ddiv+0x4e>
10041070:	46cb      	mov	fp, r9
10041072:	4642      	mov	r2, r8
10041074:	9d02      	ldr	r5, [sp, #8]
10041076:	9903      	ldr	r1, [sp, #12]
10041078:	2902      	cmp	r1, #2
1004107a:	d100      	bne.n	1004107e <__aeabi_ddiv+0xc2>
1004107c:	e1de      	b.n	1004143c <__aeabi_ddiv+0x480>
1004107e:	2903      	cmp	r1, #3
10041080:	d100      	bne.n	10041084 <__aeabi_ddiv+0xc8>
10041082:	e08d      	b.n	100411a0 <__aeabi_ddiv+0x1e4>
10041084:	2901      	cmp	r1, #1
10041086:	d000      	beq.n	1004108a <__aeabi_ddiv+0xce>
10041088:	e179      	b.n	1004137e <__aeabi_ddiv+0x3c2>
1004108a:	002e      	movs	r6, r5
1004108c:	2200      	movs	r2, #0
1004108e:	2300      	movs	r3, #0
10041090:	2400      	movs	r4, #0
10041092:	4690      	mov	r8, r2
10041094:	051b      	lsls	r3, r3, #20
10041096:	4323      	orrs	r3, r4
10041098:	07f6      	lsls	r6, r6, #31
1004109a:	4333      	orrs	r3, r6
1004109c:	4640      	mov	r0, r8
1004109e:	0019      	movs	r1, r3
100410a0:	b007      	add	sp, #28
100410a2:	bcf0      	pop	{r4, r5, r6, r7}
100410a4:	46bb      	mov	fp, r7
100410a6:	46b2      	mov	sl, r6
100410a8:	46a9      	mov	r9, r5
100410aa:	46a0      	mov	r8, r4
100410ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100410ae:	2200      	movs	r2, #0
100410b0:	2400      	movs	r4, #0
100410b2:	4690      	mov	r8, r2
100410b4:	4b48      	ldr	r3, [pc, #288]	@ (100411d8 <__aeabi_ddiv+0x21c>)
100410b6:	e7ed      	b.n	10041094 <__aeabi_ddiv+0xd8>
100410b8:	465a      	mov	r2, fp
100410ba:	9b00      	ldr	r3, [sp, #0]
100410bc:	431a      	orrs	r2, r3
100410be:	4b49      	ldr	r3, [pc, #292]	@ (100411e4 <__aeabi_ddiv+0x228>)
100410c0:	469c      	mov	ip, r3
100410c2:	44e2      	add	sl, ip
100410c4:	2a00      	cmp	r2, #0
100410c6:	d159      	bne.n	1004117c <__aeabi_ddiv+0x1c0>
100410c8:	2302      	movs	r3, #2
100410ca:	431c      	orrs	r4, r3
100410cc:	2300      	movs	r3, #0
100410ce:	2102      	movs	r1, #2
100410d0:	469b      	mov	fp, r3
100410d2:	e7b8      	b.n	10041046 <__aeabi_ddiv+0x8a>
100410d4:	465a      	mov	r2, fp
100410d6:	9b00      	ldr	r3, [sp, #0]
100410d8:	431a      	orrs	r2, r3
100410da:	d049      	beq.n	10041170 <__aeabi_ddiv+0x1b4>
100410dc:	465b      	mov	r3, fp
100410de:	2b00      	cmp	r3, #0
100410e0:	d100      	bne.n	100410e4 <__aeabi_ddiv+0x128>
100410e2:	e19c      	b.n	1004141e <__aeabi_ddiv+0x462>
100410e4:	4658      	mov	r0, fp
100410e6:	f7ff fa6b 	bl	100405c0 <__clzsi2>
100410ea:	0002      	movs	r2, r0
100410ec:	0003      	movs	r3, r0
100410ee:	3a0b      	subs	r2, #11
100410f0:	271d      	movs	r7, #29
100410f2:	9e00      	ldr	r6, [sp, #0]
100410f4:	1aba      	subs	r2, r7, r2
100410f6:	0019      	movs	r1, r3
100410f8:	4658      	mov	r0, fp
100410fa:	40d6      	lsrs	r6, r2
100410fc:	3908      	subs	r1, #8
100410fe:	4088      	lsls	r0, r1
10041100:	0032      	movs	r2, r6
10041102:	4302      	orrs	r2, r0
10041104:	4693      	mov	fp, r2
10041106:	9a00      	ldr	r2, [sp, #0]
10041108:	408a      	lsls	r2, r1
1004110a:	4937      	ldr	r1, [pc, #220]	@ (100411e8 <__aeabi_ddiv+0x22c>)
1004110c:	4453      	add	r3, sl
1004110e:	468a      	mov	sl, r1
10041110:	2100      	movs	r1, #0
10041112:	449a      	add	sl, r3
10041114:	e797      	b.n	10041046 <__aeabi_ddiv+0x8a>
10041116:	465b      	mov	r3, fp
10041118:	4303      	orrs	r3, r0
1004111a:	4699      	mov	r9, r3
1004111c:	d021      	beq.n	10041162 <__aeabi_ddiv+0x1a6>
1004111e:	465b      	mov	r3, fp
10041120:	2b00      	cmp	r3, #0
10041122:	d100      	bne.n	10041126 <__aeabi_ddiv+0x16a>
10041124:	e169      	b.n	100413fa <__aeabi_ddiv+0x43e>
10041126:	4658      	mov	r0, fp
10041128:	f7ff fa4a 	bl	100405c0 <__clzsi2>
1004112c:	230b      	movs	r3, #11
1004112e:	425b      	negs	r3, r3
10041130:	469c      	mov	ip, r3
10041132:	0002      	movs	r2, r0
10041134:	4484      	add	ip, r0
10041136:	4666      	mov	r6, ip
10041138:	231d      	movs	r3, #29
1004113a:	1b9b      	subs	r3, r3, r6
1004113c:	0026      	movs	r6, r4
1004113e:	0011      	movs	r1, r2
10041140:	4658      	mov	r0, fp
10041142:	40de      	lsrs	r6, r3
10041144:	3908      	subs	r1, #8
10041146:	4088      	lsls	r0, r1
10041148:	0033      	movs	r3, r6
1004114a:	4303      	orrs	r3, r0
1004114c:	4699      	mov	r9, r3
1004114e:	0023      	movs	r3, r4
10041150:	408b      	lsls	r3, r1
10041152:	4698      	mov	r8, r3
10041154:	4b25      	ldr	r3, [pc, #148]	@ (100411ec <__aeabi_ddiv+0x230>)
10041156:	2400      	movs	r4, #0
10041158:	1a9b      	subs	r3, r3, r2
1004115a:	469a      	mov	sl, r3
1004115c:	2300      	movs	r3, #0
1004115e:	9303      	str	r3, [sp, #12]
10041160:	e753      	b.n	1004100a <__aeabi_ddiv+0x4e>
10041162:	2300      	movs	r3, #0
10041164:	4698      	mov	r8, r3
10041166:	469a      	mov	sl, r3
10041168:	3301      	adds	r3, #1
1004116a:	2404      	movs	r4, #4
1004116c:	9303      	str	r3, [sp, #12]
1004116e:	e74c      	b.n	1004100a <__aeabi_ddiv+0x4e>
10041170:	2301      	movs	r3, #1
10041172:	431c      	orrs	r4, r3
10041174:	2300      	movs	r3, #0
10041176:	2101      	movs	r1, #1
10041178:	469b      	mov	fp, r3
1004117a:	e764      	b.n	10041046 <__aeabi_ddiv+0x8a>
1004117c:	2303      	movs	r3, #3
1004117e:	0032      	movs	r2, r6
10041180:	2103      	movs	r1, #3
10041182:	431c      	orrs	r4, r3
10041184:	e75f      	b.n	10041046 <__aeabi_ddiv+0x8a>
10041186:	469a      	mov	sl, r3
10041188:	2303      	movs	r3, #3
1004118a:	46d9      	mov	r9, fp
1004118c:	240c      	movs	r4, #12
1004118e:	9303      	str	r3, [sp, #12]
10041190:	e73b      	b.n	1004100a <__aeabi_ddiv+0x4e>
10041192:	2300      	movs	r3, #0
10041194:	2480      	movs	r4, #128	@ 0x80
10041196:	4698      	mov	r8, r3
10041198:	2600      	movs	r6, #0
1004119a:	4b0f      	ldr	r3, [pc, #60]	@ (100411d8 <__aeabi_ddiv+0x21c>)
1004119c:	0324      	lsls	r4, r4, #12
1004119e:	e779      	b.n	10041094 <__aeabi_ddiv+0xd8>
100411a0:	2480      	movs	r4, #128	@ 0x80
100411a2:	465b      	mov	r3, fp
100411a4:	0324      	lsls	r4, r4, #12
100411a6:	431c      	orrs	r4, r3
100411a8:	0324      	lsls	r4, r4, #12
100411aa:	002e      	movs	r6, r5
100411ac:	4690      	mov	r8, r2
100411ae:	4b0a      	ldr	r3, [pc, #40]	@ (100411d8 <__aeabi_ddiv+0x21c>)
100411b0:	0b24      	lsrs	r4, r4, #12
100411b2:	e76f      	b.n	10041094 <__aeabi_ddiv+0xd8>
100411b4:	2480      	movs	r4, #128	@ 0x80
100411b6:	464b      	mov	r3, r9
100411b8:	0324      	lsls	r4, r4, #12
100411ba:	4223      	tst	r3, r4
100411bc:	d002      	beq.n	100411c4 <__aeabi_ddiv+0x208>
100411be:	465b      	mov	r3, fp
100411c0:	4223      	tst	r3, r4
100411c2:	d0f0      	beq.n	100411a6 <__aeabi_ddiv+0x1ea>
100411c4:	2480      	movs	r4, #128	@ 0x80
100411c6:	464b      	mov	r3, r9
100411c8:	0324      	lsls	r4, r4, #12
100411ca:	431c      	orrs	r4, r3
100411cc:	0324      	lsls	r4, r4, #12
100411ce:	9e02      	ldr	r6, [sp, #8]
100411d0:	4b01      	ldr	r3, [pc, #4]	@ (100411d8 <__aeabi_ddiv+0x21c>)
100411d2:	0b24      	lsrs	r4, r4, #12
100411d4:	e75e      	b.n	10041094 <__aeabi_ddiv+0xd8>
100411d6:	46c0      	nop			@ (mov r8, r8)
100411d8:	000007ff 	.word	0x000007ff
100411dc:	fffffc01 	.word	0xfffffc01
100411e0:	1006902c 	.word	0x1006902c
100411e4:	fffff801 	.word	0xfffff801
100411e8:	000003f3 	.word	0x000003f3
100411ec:	fffffc0d 	.word	0xfffffc0d
100411f0:	45cb      	cmp	fp, r9
100411f2:	d200      	bcs.n	100411f6 <__aeabi_ddiv+0x23a>
100411f4:	e0f8      	b.n	100413e8 <__aeabi_ddiv+0x42c>
100411f6:	d100      	bne.n	100411fa <__aeabi_ddiv+0x23e>
100411f8:	e0f3      	b.n	100413e2 <__aeabi_ddiv+0x426>
100411fa:	2301      	movs	r3, #1
100411fc:	425b      	negs	r3, r3
100411fe:	469c      	mov	ip, r3
10041200:	4644      	mov	r4, r8
10041202:	4648      	mov	r0, r9
10041204:	2500      	movs	r5, #0
10041206:	44e2      	add	sl, ip
10041208:	465b      	mov	r3, fp
1004120a:	0e17      	lsrs	r7, r2, #24
1004120c:	021b      	lsls	r3, r3, #8
1004120e:	431f      	orrs	r7, r3
10041210:	0c19      	lsrs	r1, r3, #16
10041212:	043b      	lsls	r3, r7, #16
10041214:	0212      	lsls	r2, r2, #8
10041216:	9700      	str	r7, [sp, #0]
10041218:	0c1f      	lsrs	r7, r3, #16
1004121a:	4691      	mov	r9, r2
1004121c:	9102      	str	r1, [sp, #8]
1004121e:	9703      	str	r7, [sp, #12]
10041220:	f7ff f894 	bl	1004034c <__aeabi_uidivmod>
10041224:	0002      	movs	r2, r0
10041226:	437a      	muls	r2, r7
10041228:	040b      	lsls	r3, r1, #16
1004122a:	0c21      	lsrs	r1, r4, #16
1004122c:	4680      	mov	r8, r0
1004122e:	4319      	orrs	r1, r3
10041230:	428a      	cmp	r2, r1
10041232:	d909      	bls.n	10041248 <__aeabi_ddiv+0x28c>
10041234:	9f00      	ldr	r7, [sp, #0]
10041236:	2301      	movs	r3, #1
10041238:	46bc      	mov	ip, r7
1004123a:	425b      	negs	r3, r3
1004123c:	4461      	add	r1, ip
1004123e:	469c      	mov	ip, r3
10041240:	44e0      	add	r8, ip
10041242:	428f      	cmp	r7, r1
10041244:	d800      	bhi.n	10041248 <__aeabi_ddiv+0x28c>
10041246:	e15c      	b.n	10041502 <__aeabi_ddiv+0x546>
10041248:	1a88      	subs	r0, r1, r2
1004124a:	9902      	ldr	r1, [sp, #8]
1004124c:	f7ff f87e 	bl	1004034c <__aeabi_uidivmod>
10041250:	9a03      	ldr	r2, [sp, #12]
10041252:	0424      	lsls	r4, r4, #16
10041254:	4342      	muls	r2, r0
10041256:	0409      	lsls	r1, r1, #16
10041258:	0c24      	lsrs	r4, r4, #16
1004125a:	0003      	movs	r3, r0
1004125c:	430c      	orrs	r4, r1
1004125e:	42a2      	cmp	r2, r4
10041260:	d906      	bls.n	10041270 <__aeabi_ddiv+0x2b4>
10041262:	9900      	ldr	r1, [sp, #0]
10041264:	3b01      	subs	r3, #1
10041266:	468c      	mov	ip, r1
10041268:	4464      	add	r4, ip
1004126a:	42a1      	cmp	r1, r4
1004126c:	d800      	bhi.n	10041270 <__aeabi_ddiv+0x2b4>
1004126e:	e142      	b.n	100414f6 <__aeabi_ddiv+0x53a>
10041270:	1aa0      	subs	r0, r4, r2
10041272:	4642      	mov	r2, r8
10041274:	0412      	lsls	r2, r2, #16
10041276:	431a      	orrs	r2, r3
10041278:	4693      	mov	fp, r2
1004127a:	464b      	mov	r3, r9
1004127c:	4659      	mov	r1, fp
1004127e:	0c1b      	lsrs	r3, r3, #16
10041280:	001f      	movs	r7, r3
10041282:	9304      	str	r3, [sp, #16]
10041284:	040b      	lsls	r3, r1, #16
10041286:	4649      	mov	r1, r9
10041288:	0409      	lsls	r1, r1, #16
1004128a:	0c09      	lsrs	r1, r1, #16
1004128c:	000c      	movs	r4, r1
1004128e:	0c1b      	lsrs	r3, r3, #16
10041290:	435c      	muls	r4, r3
10041292:	0c12      	lsrs	r2, r2, #16
10041294:	437b      	muls	r3, r7
10041296:	4688      	mov	r8, r1
10041298:	4351      	muls	r1, r2
1004129a:	437a      	muls	r2, r7
1004129c:	0c27      	lsrs	r7, r4, #16
1004129e:	46bc      	mov	ip, r7
100412a0:	185b      	adds	r3, r3, r1
100412a2:	4463      	add	r3, ip
100412a4:	4299      	cmp	r1, r3
100412a6:	d903      	bls.n	100412b0 <__aeabi_ddiv+0x2f4>
100412a8:	2180      	movs	r1, #128	@ 0x80
100412aa:	0249      	lsls	r1, r1, #9
100412ac:	468c      	mov	ip, r1
100412ae:	4462      	add	r2, ip
100412b0:	0c19      	lsrs	r1, r3, #16
100412b2:	0424      	lsls	r4, r4, #16
100412b4:	041b      	lsls	r3, r3, #16
100412b6:	0c24      	lsrs	r4, r4, #16
100412b8:	188a      	adds	r2, r1, r2
100412ba:	191c      	adds	r4, r3, r4
100412bc:	4290      	cmp	r0, r2
100412be:	d302      	bcc.n	100412c6 <__aeabi_ddiv+0x30a>
100412c0:	d116      	bne.n	100412f0 <__aeabi_ddiv+0x334>
100412c2:	42a5      	cmp	r5, r4
100412c4:	d214      	bcs.n	100412f0 <__aeabi_ddiv+0x334>
100412c6:	465b      	mov	r3, fp
100412c8:	9f00      	ldr	r7, [sp, #0]
100412ca:	3b01      	subs	r3, #1
100412cc:	444d      	add	r5, r9
100412ce:	9305      	str	r3, [sp, #20]
100412d0:	454d      	cmp	r5, r9
100412d2:	419b      	sbcs	r3, r3
100412d4:	46bc      	mov	ip, r7
100412d6:	425b      	negs	r3, r3
100412d8:	4463      	add	r3, ip
100412da:	18c0      	adds	r0, r0, r3
100412dc:	4287      	cmp	r7, r0
100412de:	d300      	bcc.n	100412e2 <__aeabi_ddiv+0x326>
100412e0:	e102      	b.n	100414e8 <__aeabi_ddiv+0x52c>
100412e2:	4282      	cmp	r2, r0
100412e4:	d900      	bls.n	100412e8 <__aeabi_ddiv+0x32c>
100412e6:	e129      	b.n	1004153c <__aeabi_ddiv+0x580>
100412e8:	d100      	bne.n	100412ec <__aeabi_ddiv+0x330>
100412ea:	e124      	b.n	10041536 <__aeabi_ddiv+0x57a>
100412ec:	9b05      	ldr	r3, [sp, #20]
100412ee:	469b      	mov	fp, r3
100412f0:	1b2c      	subs	r4, r5, r4
100412f2:	42a5      	cmp	r5, r4
100412f4:	41ad      	sbcs	r5, r5
100412f6:	9b00      	ldr	r3, [sp, #0]
100412f8:	1a80      	subs	r0, r0, r2
100412fa:	426d      	negs	r5, r5
100412fc:	1b40      	subs	r0, r0, r5
100412fe:	4283      	cmp	r3, r0
10041300:	d100      	bne.n	10041304 <__aeabi_ddiv+0x348>
10041302:	e10f      	b.n	10041524 <__aeabi_ddiv+0x568>
10041304:	9902      	ldr	r1, [sp, #8]
10041306:	f7ff f821 	bl	1004034c <__aeabi_uidivmod>
1004130a:	9a03      	ldr	r2, [sp, #12]
1004130c:	040b      	lsls	r3, r1, #16
1004130e:	4342      	muls	r2, r0
10041310:	0c21      	lsrs	r1, r4, #16
10041312:	0005      	movs	r5, r0
10041314:	4319      	orrs	r1, r3
10041316:	428a      	cmp	r2, r1
10041318:	d900      	bls.n	1004131c <__aeabi_ddiv+0x360>
1004131a:	e0cb      	b.n	100414b4 <__aeabi_ddiv+0x4f8>
1004131c:	1a88      	subs	r0, r1, r2
1004131e:	9902      	ldr	r1, [sp, #8]
10041320:	f7ff f814 	bl	1004034c <__aeabi_uidivmod>
10041324:	9a03      	ldr	r2, [sp, #12]
10041326:	0424      	lsls	r4, r4, #16
10041328:	4342      	muls	r2, r0
1004132a:	0409      	lsls	r1, r1, #16
1004132c:	0c24      	lsrs	r4, r4, #16
1004132e:	0003      	movs	r3, r0
10041330:	430c      	orrs	r4, r1
10041332:	42a2      	cmp	r2, r4
10041334:	d900      	bls.n	10041338 <__aeabi_ddiv+0x37c>
10041336:	e0ca      	b.n	100414ce <__aeabi_ddiv+0x512>
10041338:	4641      	mov	r1, r8
1004133a:	1aa4      	subs	r4, r4, r2
1004133c:	042a      	lsls	r2, r5, #16
1004133e:	431a      	orrs	r2, r3
10041340:	9f04      	ldr	r7, [sp, #16]
10041342:	0413      	lsls	r3, r2, #16
10041344:	0c1b      	lsrs	r3, r3, #16
10041346:	4359      	muls	r1, r3
10041348:	4640      	mov	r0, r8
1004134a:	437b      	muls	r3, r7
1004134c:	469c      	mov	ip, r3
1004134e:	0c15      	lsrs	r5, r2, #16
10041350:	4368      	muls	r0, r5
10041352:	0c0b      	lsrs	r3, r1, #16
10041354:	4484      	add	ip, r0
10041356:	4463      	add	r3, ip
10041358:	437d      	muls	r5, r7
1004135a:	4298      	cmp	r0, r3
1004135c:	d903      	bls.n	10041366 <__aeabi_ddiv+0x3aa>
1004135e:	2080      	movs	r0, #128	@ 0x80
10041360:	0240      	lsls	r0, r0, #9
10041362:	4684      	mov	ip, r0
10041364:	4465      	add	r5, ip
10041366:	0c18      	lsrs	r0, r3, #16
10041368:	0409      	lsls	r1, r1, #16
1004136a:	041b      	lsls	r3, r3, #16
1004136c:	0c09      	lsrs	r1, r1, #16
1004136e:	1940      	adds	r0, r0, r5
10041370:	185b      	adds	r3, r3, r1
10041372:	4284      	cmp	r4, r0
10041374:	d327      	bcc.n	100413c6 <__aeabi_ddiv+0x40a>
10041376:	d023      	beq.n	100413c0 <__aeabi_ddiv+0x404>
10041378:	2301      	movs	r3, #1
1004137a:	0035      	movs	r5, r6
1004137c:	431a      	orrs	r2, r3
1004137e:	4b94      	ldr	r3, [pc, #592]	@ (100415d0 <__aeabi_ddiv+0x614>)
10041380:	4453      	add	r3, sl
10041382:	2b00      	cmp	r3, #0
10041384:	dd60      	ble.n	10041448 <__aeabi_ddiv+0x48c>
10041386:	0751      	lsls	r1, r2, #29
10041388:	d000      	beq.n	1004138c <__aeabi_ddiv+0x3d0>
1004138a:	e086      	b.n	1004149a <__aeabi_ddiv+0x4de>
1004138c:	002e      	movs	r6, r5
1004138e:	08d1      	lsrs	r1, r2, #3
10041390:	465a      	mov	r2, fp
10041392:	01d2      	lsls	r2, r2, #7
10041394:	d506      	bpl.n	100413a4 <__aeabi_ddiv+0x3e8>
10041396:	465a      	mov	r2, fp
10041398:	4b8e      	ldr	r3, [pc, #568]	@ (100415d4 <__aeabi_ddiv+0x618>)
1004139a:	401a      	ands	r2, r3
1004139c:	2380      	movs	r3, #128	@ 0x80
1004139e:	4693      	mov	fp, r2
100413a0:	00db      	lsls	r3, r3, #3
100413a2:	4453      	add	r3, sl
100413a4:	4a8c      	ldr	r2, [pc, #560]	@ (100415d8 <__aeabi_ddiv+0x61c>)
100413a6:	4293      	cmp	r3, r2
100413a8:	dd00      	ble.n	100413ac <__aeabi_ddiv+0x3f0>
100413aa:	e680      	b.n	100410ae <__aeabi_ddiv+0xf2>
100413ac:	465a      	mov	r2, fp
100413ae:	0752      	lsls	r2, r2, #29
100413b0:	430a      	orrs	r2, r1
100413b2:	4690      	mov	r8, r2
100413b4:	465a      	mov	r2, fp
100413b6:	055b      	lsls	r3, r3, #21
100413b8:	0254      	lsls	r4, r2, #9
100413ba:	0b24      	lsrs	r4, r4, #12
100413bc:	0d5b      	lsrs	r3, r3, #21
100413be:	e669      	b.n	10041094 <__aeabi_ddiv+0xd8>
100413c0:	0035      	movs	r5, r6
100413c2:	2b00      	cmp	r3, #0
100413c4:	d0db      	beq.n	1004137e <__aeabi_ddiv+0x3c2>
100413c6:	9d00      	ldr	r5, [sp, #0]
100413c8:	1e51      	subs	r1, r2, #1
100413ca:	46ac      	mov	ip, r5
100413cc:	4464      	add	r4, ip
100413ce:	42ac      	cmp	r4, r5
100413d0:	d200      	bcs.n	100413d4 <__aeabi_ddiv+0x418>
100413d2:	e09e      	b.n	10041512 <__aeabi_ddiv+0x556>
100413d4:	4284      	cmp	r4, r0
100413d6:	d200      	bcs.n	100413da <__aeabi_ddiv+0x41e>
100413d8:	e0e1      	b.n	1004159e <__aeabi_ddiv+0x5e2>
100413da:	d100      	bne.n	100413de <__aeabi_ddiv+0x422>
100413dc:	e0ee      	b.n	100415bc <__aeabi_ddiv+0x600>
100413de:	000a      	movs	r2, r1
100413e0:	e7ca      	b.n	10041378 <__aeabi_ddiv+0x3bc>
100413e2:	4542      	cmp	r2, r8
100413e4:	d900      	bls.n	100413e8 <__aeabi_ddiv+0x42c>
100413e6:	e708      	b.n	100411fa <__aeabi_ddiv+0x23e>
100413e8:	464b      	mov	r3, r9
100413ea:	07dc      	lsls	r4, r3, #31
100413ec:	0858      	lsrs	r0, r3, #1
100413ee:	4643      	mov	r3, r8
100413f0:	085b      	lsrs	r3, r3, #1
100413f2:	431c      	orrs	r4, r3
100413f4:	4643      	mov	r3, r8
100413f6:	07dd      	lsls	r5, r3, #31
100413f8:	e706      	b.n	10041208 <__aeabi_ddiv+0x24c>
100413fa:	f7ff f8e1 	bl	100405c0 <__clzsi2>
100413fe:	2315      	movs	r3, #21
10041400:	469c      	mov	ip, r3
10041402:	4484      	add	ip, r0
10041404:	0002      	movs	r2, r0
10041406:	4663      	mov	r3, ip
10041408:	3220      	adds	r2, #32
1004140a:	2b1c      	cmp	r3, #28
1004140c:	dc00      	bgt.n	10041410 <__aeabi_ddiv+0x454>
1004140e:	e692      	b.n	10041136 <__aeabi_ddiv+0x17a>
10041410:	0023      	movs	r3, r4
10041412:	3808      	subs	r0, #8
10041414:	4083      	lsls	r3, r0
10041416:	4699      	mov	r9, r3
10041418:	2300      	movs	r3, #0
1004141a:	4698      	mov	r8, r3
1004141c:	e69a      	b.n	10041154 <__aeabi_ddiv+0x198>
1004141e:	f7ff f8cf 	bl	100405c0 <__clzsi2>
10041422:	0002      	movs	r2, r0
10041424:	0003      	movs	r3, r0
10041426:	3215      	adds	r2, #21
10041428:	3320      	adds	r3, #32
1004142a:	2a1c      	cmp	r2, #28
1004142c:	dc00      	bgt.n	10041430 <__aeabi_ddiv+0x474>
1004142e:	e65f      	b.n	100410f0 <__aeabi_ddiv+0x134>
10041430:	9900      	ldr	r1, [sp, #0]
10041432:	3808      	subs	r0, #8
10041434:	4081      	lsls	r1, r0
10041436:	2200      	movs	r2, #0
10041438:	468b      	mov	fp, r1
1004143a:	e666      	b.n	1004110a <__aeabi_ddiv+0x14e>
1004143c:	2200      	movs	r2, #0
1004143e:	002e      	movs	r6, r5
10041440:	2400      	movs	r4, #0
10041442:	4690      	mov	r8, r2
10041444:	4b65      	ldr	r3, [pc, #404]	@ (100415dc <__aeabi_ddiv+0x620>)
10041446:	e625      	b.n	10041094 <__aeabi_ddiv+0xd8>
10041448:	002e      	movs	r6, r5
1004144a:	2101      	movs	r1, #1
1004144c:	1ac9      	subs	r1, r1, r3
1004144e:	2938      	cmp	r1, #56	@ 0x38
10041450:	dd00      	ble.n	10041454 <__aeabi_ddiv+0x498>
10041452:	e61b      	b.n	1004108c <__aeabi_ddiv+0xd0>
10041454:	291f      	cmp	r1, #31
10041456:	dc7e      	bgt.n	10041556 <__aeabi_ddiv+0x59a>
10041458:	4861      	ldr	r0, [pc, #388]	@ (100415e0 <__aeabi_ddiv+0x624>)
1004145a:	0014      	movs	r4, r2
1004145c:	4450      	add	r0, sl
1004145e:	465b      	mov	r3, fp
10041460:	4082      	lsls	r2, r0
10041462:	4083      	lsls	r3, r0
10041464:	40cc      	lsrs	r4, r1
10041466:	1e50      	subs	r0, r2, #1
10041468:	4182      	sbcs	r2, r0
1004146a:	4323      	orrs	r3, r4
1004146c:	431a      	orrs	r2, r3
1004146e:	465b      	mov	r3, fp
10041470:	40cb      	lsrs	r3, r1
10041472:	0751      	lsls	r1, r2, #29
10041474:	d009      	beq.n	1004148a <__aeabi_ddiv+0x4ce>
10041476:	210f      	movs	r1, #15
10041478:	4011      	ands	r1, r2
1004147a:	2904      	cmp	r1, #4
1004147c:	d005      	beq.n	1004148a <__aeabi_ddiv+0x4ce>
1004147e:	1d11      	adds	r1, r2, #4
10041480:	4291      	cmp	r1, r2
10041482:	4192      	sbcs	r2, r2
10041484:	4252      	negs	r2, r2
10041486:	189b      	adds	r3, r3, r2
10041488:	000a      	movs	r2, r1
1004148a:	0219      	lsls	r1, r3, #8
1004148c:	d400      	bmi.n	10041490 <__aeabi_ddiv+0x4d4>
1004148e:	e09b      	b.n	100415c8 <__aeabi_ddiv+0x60c>
10041490:	2200      	movs	r2, #0
10041492:	2301      	movs	r3, #1
10041494:	2400      	movs	r4, #0
10041496:	4690      	mov	r8, r2
10041498:	e5fc      	b.n	10041094 <__aeabi_ddiv+0xd8>
1004149a:	210f      	movs	r1, #15
1004149c:	4011      	ands	r1, r2
1004149e:	2904      	cmp	r1, #4
100414a0:	d100      	bne.n	100414a4 <__aeabi_ddiv+0x4e8>
100414a2:	e773      	b.n	1004138c <__aeabi_ddiv+0x3d0>
100414a4:	1d11      	adds	r1, r2, #4
100414a6:	4291      	cmp	r1, r2
100414a8:	4192      	sbcs	r2, r2
100414aa:	4252      	negs	r2, r2
100414ac:	002e      	movs	r6, r5
100414ae:	08c9      	lsrs	r1, r1, #3
100414b0:	4493      	add	fp, r2
100414b2:	e76d      	b.n	10041390 <__aeabi_ddiv+0x3d4>
100414b4:	9b00      	ldr	r3, [sp, #0]
100414b6:	3d01      	subs	r5, #1
100414b8:	469c      	mov	ip, r3
100414ba:	4461      	add	r1, ip
100414bc:	428b      	cmp	r3, r1
100414be:	d900      	bls.n	100414c2 <__aeabi_ddiv+0x506>
100414c0:	e72c      	b.n	1004131c <__aeabi_ddiv+0x360>
100414c2:	428a      	cmp	r2, r1
100414c4:	d800      	bhi.n	100414c8 <__aeabi_ddiv+0x50c>
100414c6:	e729      	b.n	1004131c <__aeabi_ddiv+0x360>
100414c8:	1e85      	subs	r5, r0, #2
100414ca:	4461      	add	r1, ip
100414cc:	e726      	b.n	1004131c <__aeabi_ddiv+0x360>
100414ce:	9900      	ldr	r1, [sp, #0]
100414d0:	3b01      	subs	r3, #1
100414d2:	468c      	mov	ip, r1
100414d4:	4464      	add	r4, ip
100414d6:	42a1      	cmp	r1, r4
100414d8:	d900      	bls.n	100414dc <__aeabi_ddiv+0x520>
100414da:	e72d      	b.n	10041338 <__aeabi_ddiv+0x37c>
100414dc:	42a2      	cmp	r2, r4
100414de:	d800      	bhi.n	100414e2 <__aeabi_ddiv+0x526>
100414e0:	e72a      	b.n	10041338 <__aeabi_ddiv+0x37c>
100414e2:	1e83      	subs	r3, r0, #2
100414e4:	4464      	add	r4, ip
100414e6:	e727      	b.n	10041338 <__aeabi_ddiv+0x37c>
100414e8:	4287      	cmp	r7, r0
100414ea:	d000      	beq.n	100414ee <__aeabi_ddiv+0x532>
100414ec:	e6fe      	b.n	100412ec <__aeabi_ddiv+0x330>
100414ee:	45a9      	cmp	r9, r5
100414f0:	d900      	bls.n	100414f4 <__aeabi_ddiv+0x538>
100414f2:	e6fb      	b.n	100412ec <__aeabi_ddiv+0x330>
100414f4:	e6f5      	b.n	100412e2 <__aeabi_ddiv+0x326>
100414f6:	42a2      	cmp	r2, r4
100414f8:	d800      	bhi.n	100414fc <__aeabi_ddiv+0x540>
100414fa:	e6b9      	b.n	10041270 <__aeabi_ddiv+0x2b4>
100414fc:	1e83      	subs	r3, r0, #2
100414fe:	4464      	add	r4, ip
10041500:	e6b6      	b.n	10041270 <__aeabi_ddiv+0x2b4>
10041502:	428a      	cmp	r2, r1
10041504:	d800      	bhi.n	10041508 <__aeabi_ddiv+0x54c>
10041506:	e69f      	b.n	10041248 <__aeabi_ddiv+0x28c>
10041508:	46bc      	mov	ip, r7
1004150a:	1e83      	subs	r3, r0, #2
1004150c:	4698      	mov	r8, r3
1004150e:	4461      	add	r1, ip
10041510:	e69a      	b.n	10041248 <__aeabi_ddiv+0x28c>
10041512:	000a      	movs	r2, r1
10041514:	4284      	cmp	r4, r0
10041516:	d000      	beq.n	1004151a <__aeabi_ddiv+0x55e>
10041518:	e72e      	b.n	10041378 <__aeabi_ddiv+0x3bc>
1004151a:	454b      	cmp	r3, r9
1004151c:	d000      	beq.n	10041520 <__aeabi_ddiv+0x564>
1004151e:	e72b      	b.n	10041378 <__aeabi_ddiv+0x3bc>
10041520:	0035      	movs	r5, r6
10041522:	e72c      	b.n	1004137e <__aeabi_ddiv+0x3c2>
10041524:	4b2a      	ldr	r3, [pc, #168]	@ (100415d0 <__aeabi_ddiv+0x614>)
10041526:	4a2f      	ldr	r2, [pc, #188]	@ (100415e4 <__aeabi_ddiv+0x628>)
10041528:	4453      	add	r3, sl
1004152a:	4592      	cmp	sl, r2
1004152c:	db43      	blt.n	100415b6 <__aeabi_ddiv+0x5fa>
1004152e:	2201      	movs	r2, #1
10041530:	2100      	movs	r1, #0
10041532:	4493      	add	fp, r2
10041534:	e72c      	b.n	10041390 <__aeabi_ddiv+0x3d4>
10041536:	42ac      	cmp	r4, r5
10041538:	d800      	bhi.n	1004153c <__aeabi_ddiv+0x580>
1004153a:	e6d7      	b.n	100412ec <__aeabi_ddiv+0x330>
1004153c:	2302      	movs	r3, #2
1004153e:	425b      	negs	r3, r3
10041540:	469c      	mov	ip, r3
10041542:	9900      	ldr	r1, [sp, #0]
10041544:	444d      	add	r5, r9
10041546:	454d      	cmp	r5, r9
10041548:	419b      	sbcs	r3, r3
1004154a:	44e3      	add	fp, ip
1004154c:	468c      	mov	ip, r1
1004154e:	425b      	negs	r3, r3
10041550:	4463      	add	r3, ip
10041552:	18c0      	adds	r0, r0, r3
10041554:	e6cc      	b.n	100412f0 <__aeabi_ddiv+0x334>
10041556:	201f      	movs	r0, #31
10041558:	4240      	negs	r0, r0
1004155a:	1ac3      	subs	r3, r0, r3
1004155c:	4658      	mov	r0, fp
1004155e:	40d8      	lsrs	r0, r3
10041560:	2920      	cmp	r1, #32
10041562:	d004      	beq.n	1004156e <__aeabi_ddiv+0x5b2>
10041564:	4659      	mov	r1, fp
10041566:	4b20      	ldr	r3, [pc, #128]	@ (100415e8 <__aeabi_ddiv+0x62c>)
10041568:	4453      	add	r3, sl
1004156a:	4099      	lsls	r1, r3
1004156c:	430a      	orrs	r2, r1
1004156e:	1e53      	subs	r3, r2, #1
10041570:	419a      	sbcs	r2, r3
10041572:	2307      	movs	r3, #7
10041574:	0019      	movs	r1, r3
10041576:	4302      	orrs	r2, r0
10041578:	2400      	movs	r4, #0
1004157a:	4011      	ands	r1, r2
1004157c:	4213      	tst	r3, r2
1004157e:	d009      	beq.n	10041594 <__aeabi_ddiv+0x5d8>
10041580:	3308      	adds	r3, #8
10041582:	4013      	ands	r3, r2
10041584:	2b04      	cmp	r3, #4
10041586:	d01d      	beq.n	100415c4 <__aeabi_ddiv+0x608>
10041588:	1d13      	adds	r3, r2, #4
1004158a:	4293      	cmp	r3, r2
1004158c:	4189      	sbcs	r1, r1
1004158e:	001a      	movs	r2, r3
10041590:	4249      	negs	r1, r1
10041592:	0749      	lsls	r1, r1, #29
10041594:	08d2      	lsrs	r2, r2, #3
10041596:	430a      	orrs	r2, r1
10041598:	4690      	mov	r8, r2
1004159a:	2300      	movs	r3, #0
1004159c:	e57a      	b.n	10041094 <__aeabi_ddiv+0xd8>
1004159e:	4649      	mov	r1, r9
100415a0:	9f00      	ldr	r7, [sp, #0]
100415a2:	004d      	lsls	r5, r1, #1
100415a4:	454d      	cmp	r5, r9
100415a6:	4189      	sbcs	r1, r1
100415a8:	46bc      	mov	ip, r7
100415aa:	4249      	negs	r1, r1
100415ac:	4461      	add	r1, ip
100415ae:	46a9      	mov	r9, r5
100415b0:	3a02      	subs	r2, #2
100415b2:	1864      	adds	r4, r4, r1
100415b4:	e7ae      	b.n	10041514 <__aeabi_ddiv+0x558>
100415b6:	2201      	movs	r2, #1
100415b8:	4252      	negs	r2, r2
100415ba:	e746      	b.n	1004144a <__aeabi_ddiv+0x48e>
100415bc:	4599      	cmp	r9, r3
100415be:	d3ee      	bcc.n	1004159e <__aeabi_ddiv+0x5e2>
100415c0:	000a      	movs	r2, r1
100415c2:	e7aa      	b.n	1004151a <__aeabi_ddiv+0x55e>
100415c4:	2100      	movs	r1, #0
100415c6:	e7e5      	b.n	10041594 <__aeabi_ddiv+0x5d8>
100415c8:	0759      	lsls	r1, r3, #29
100415ca:	025b      	lsls	r3, r3, #9
100415cc:	0b1c      	lsrs	r4, r3, #12
100415ce:	e7e1      	b.n	10041594 <__aeabi_ddiv+0x5d8>
100415d0:	000003ff 	.word	0x000003ff
100415d4:	feffffff 	.word	0xfeffffff
100415d8:	000007fe 	.word	0x000007fe
100415dc:	000007ff 	.word	0x000007ff
100415e0:	0000041e 	.word	0x0000041e
100415e4:	fffffc02 	.word	0xfffffc02
100415e8:	0000043e 	.word	0x0000043e

100415ec <__eqdf2>:
100415ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100415ee:	4657      	mov	r7, sl
100415f0:	46de      	mov	lr, fp
100415f2:	464e      	mov	r6, r9
100415f4:	4645      	mov	r5, r8
100415f6:	b5e0      	push	{r5, r6, r7, lr}
100415f8:	000d      	movs	r5, r1
100415fa:	0004      	movs	r4, r0
100415fc:	0fe8      	lsrs	r0, r5, #31
100415fe:	4683      	mov	fp, r0
10041600:	0309      	lsls	r1, r1, #12
10041602:	0fd8      	lsrs	r0, r3, #31
10041604:	0b09      	lsrs	r1, r1, #12
10041606:	4682      	mov	sl, r0
10041608:	4819      	ldr	r0, [pc, #100]	@ (10041670 <__eqdf2+0x84>)
1004160a:	468c      	mov	ip, r1
1004160c:	031f      	lsls	r7, r3, #12
1004160e:	0069      	lsls	r1, r5, #1
10041610:	005e      	lsls	r6, r3, #1
10041612:	0d49      	lsrs	r1, r1, #21
10041614:	0b3f      	lsrs	r7, r7, #12
10041616:	0d76      	lsrs	r6, r6, #21
10041618:	4281      	cmp	r1, r0
1004161a:	d018      	beq.n	1004164e <__eqdf2+0x62>
1004161c:	4286      	cmp	r6, r0
1004161e:	d00f      	beq.n	10041640 <__eqdf2+0x54>
10041620:	2001      	movs	r0, #1
10041622:	42b1      	cmp	r1, r6
10041624:	d10d      	bne.n	10041642 <__eqdf2+0x56>
10041626:	45bc      	cmp	ip, r7
10041628:	d10b      	bne.n	10041642 <__eqdf2+0x56>
1004162a:	4294      	cmp	r4, r2
1004162c:	d109      	bne.n	10041642 <__eqdf2+0x56>
1004162e:	45d3      	cmp	fp, sl
10041630:	d01c      	beq.n	1004166c <__eqdf2+0x80>
10041632:	2900      	cmp	r1, #0
10041634:	d105      	bne.n	10041642 <__eqdf2+0x56>
10041636:	4660      	mov	r0, ip
10041638:	4320      	orrs	r0, r4
1004163a:	1e43      	subs	r3, r0, #1
1004163c:	4198      	sbcs	r0, r3
1004163e:	e000      	b.n	10041642 <__eqdf2+0x56>
10041640:	2001      	movs	r0, #1
10041642:	bcf0      	pop	{r4, r5, r6, r7}
10041644:	46bb      	mov	fp, r7
10041646:	46b2      	mov	sl, r6
10041648:	46a9      	mov	r9, r5
1004164a:	46a0      	mov	r8, r4
1004164c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004164e:	2001      	movs	r0, #1
10041650:	428e      	cmp	r6, r1
10041652:	d1f6      	bne.n	10041642 <__eqdf2+0x56>
10041654:	4661      	mov	r1, ip
10041656:	4339      	orrs	r1, r7
10041658:	000f      	movs	r7, r1
1004165a:	4317      	orrs	r7, r2
1004165c:	4327      	orrs	r7, r4
1004165e:	d1f0      	bne.n	10041642 <__eqdf2+0x56>
10041660:	465b      	mov	r3, fp
10041662:	4652      	mov	r2, sl
10041664:	1a98      	subs	r0, r3, r2
10041666:	1e43      	subs	r3, r0, #1
10041668:	4198      	sbcs	r0, r3
1004166a:	e7ea      	b.n	10041642 <__eqdf2+0x56>
1004166c:	2000      	movs	r0, #0
1004166e:	e7e8      	b.n	10041642 <__eqdf2+0x56>
10041670:	000007ff 	.word	0x000007ff

10041674 <__gedf2>:
10041674:	b5f0      	push	{r4, r5, r6, r7, lr}
10041676:	4657      	mov	r7, sl
10041678:	464e      	mov	r6, r9
1004167a:	4645      	mov	r5, r8
1004167c:	46de      	mov	lr, fp
1004167e:	b5e0      	push	{r5, r6, r7, lr}
10041680:	000d      	movs	r5, r1
10041682:	030e      	lsls	r6, r1, #12
10041684:	0049      	lsls	r1, r1, #1
10041686:	0d49      	lsrs	r1, r1, #21
10041688:	468a      	mov	sl, r1
1004168a:	0fdf      	lsrs	r7, r3, #31
1004168c:	0fe9      	lsrs	r1, r5, #31
1004168e:	46bc      	mov	ip, r7
10041690:	b083      	sub	sp, #12
10041692:	4f2f      	ldr	r7, [pc, #188]	@ (10041750 <__gedf2+0xdc>)
10041694:	0004      	movs	r4, r0
10041696:	4680      	mov	r8, r0
10041698:	9101      	str	r1, [sp, #4]
1004169a:	0058      	lsls	r0, r3, #1
1004169c:	0319      	lsls	r1, r3, #12
1004169e:	4691      	mov	r9, r2
100416a0:	0b36      	lsrs	r6, r6, #12
100416a2:	0b09      	lsrs	r1, r1, #12
100416a4:	0d40      	lsrs	r0, r0, #21
100416a6:	45ba      	cmp	sl, r7
100416a8:	d01d      	beq.n	100416e6 <__gedf2+0x72>
100416aa:	42b8      	cmp	r0, r7
100416ac:	d00d      	beq.n	100416ca <__gedf2+0x56>
100416ae:	4657      	mov	r7, sl
100416b0:	2f00      	cmp	r7, #0
100416b2:	d12a      	bne.n	1004170a <__gedf2+0x96>
100416b4:	4334      	orrs	r4, r6
100416b6:	2800      	cmp	r0, #0
100416b8:	d124      	bne.n	10041704 <__gedf2+0x90>
100416ba:	430a      	orrs	r2, r1
100416bc:	d036      	beq.n	1004172c <__gedf2+0xb8>
100416be:	2c00      	cmp	r4, #0
100416c0:	d141      	bne.n	10041746 <__gedf2+0xd2>
100416c2:	4663      	mov	r3, ip
100416c4:	0058      	lsls	r0, r3, #1
100416c6:	3801      	subs	r0, #1
100416c8:	e015      	b.n	100416f6 <__gedf2+0x82>
100416ca:	4311      	orrs	r1, r2
100416cc:	d138      	bne.n	10041740 <__gedf2+0xcc>
100416ce:	4653      	mov	r3, sl
100416d0:	2b00      	cmp	r3, #0
100416d2:	d101      	bne.n	100416d8 <__gedf2+0x64>
100416d4:	4326      	orrs	r6, r4
100416d6:	d0f4      	beq.n	100416c2 <__gedf2+0x4e>
100416d8:	9b01      	ldr	r3, [sp, #4]
100416da:	4563      	cmp	r3, ip
100416dc:	d107      	bne.n	100416ee <__gedf2+0x7a>
100416de:	9b01      	ldr	r3, [sp, #4]
100416e0:	0058      	lsls	r0, r3, #1
100416e2:	3801      	subs	r0, #1
100416e4:	e007      	b.n	100416f6 <__gedf2+0x82>
100416e6:	4326      	orrs	r6, r4
100416e8:	d12a      	bne.n	10041740 <__gedf2+0xcc>
100416ea:	4550      	cmp	r0, sl
100416ec:	d021      	beq.n	10041732 <__gedf2+0xbe>
100416ee:	2001      	movs	r0, #1
100416f0:	9b01      	ldr	r3, [sp, #4]
100416f2:	425f      	negs	r7, r3
100416f4:	4338      	orrs	r0, r7
100416f6:	b003      	add	sp, #12
100416f8:	bcf0      	pop	{r4, r5, r6, r7}
100416fa:	46bb      	mov	fp, r7
100416fc:	46b2      	mov	sl, r6
100416fe:	46a9      	mov	r9, r5
10041700:	46a0      	mov	r8, r4
10041702:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041704:	2c00      	cmp	r4, #0
10041706:	d0dc      	beq.n	100416c2 <__gedf2+0x4e>
10041708:	e7e6      	b.n	100416d8 <__gedf2+0x64>
1004170a:	2800      	cmp	r0, #0
1004170c:	d0ef      	beq.n	100416ee <__gedf2+0x7a>
1004170e:	9b01      	ldr	r3, [sp, #4]
10041710:	4563      	cmp	r3, ip
10041712:	d1ec      	bne.n	100416ee <__gedf2+0x7a>
10041714:	4582      	cmp	sl, r0
10041716:	dcea      	bgt.n	100416ee <__gedf2+0x7a>
10041718:	dbe1      	blt.n	100416de <__gedf2+0x6a>
1004171a:	428e      	cmp	r6, r1
1004171c:	d8e7      	bhi.n	100416ee <__gedf2+0x7a>
1004171e:	d1de      	bne.n	100416de <__gedf2+0x6a>
10041720:	45c8      	cmp	r8, r9
10041722:	d8e4      	bhi.n	100416ee <__gedf2+0x7a>
10041724:	2000      	movs	r0, #0
10041726:	45c8      	cmp	r8, r9
10041728:	d2e5      	bcs.n	100416f6 <__gedf2+0x82>
1004172a:	e7d8      	b.n	100416de <__gedf2+0x6a>
1004172c:	2c00      	cmp	r4, #0
1004172e:	d0e2      	beq.n	100416f6 <__gedf2+0x82>
10041730:	e7dd      	b.n	100416ee <__gedf2+0x7a>
10041732:	4311      	orrs	r1, r2
10041734:	d104      	bne.n	10041740 <__gedf2+0xcc>
10041736:	9b01      	ldr	r3, [sp, #4]
10041738:	4563      	cmp	r3, ip
1004173a:	d1d8      	bne.n	100416ee <__gedf2+0x7a>
1004173c:	2000      	movs	r0, #0
1004173e:	e7da      	b.n	100416f6 <__gedf2+0x82>
10041740:	2002      	movs	r0, #2
10041742:	4240      	negs	r0, r0
10041744:	e7d7      	b.n	100416f6 <__gedf2+0x82>
10041746:	9b01      	ldr	r3, [sp, #4]
10041748:	4563      	cmp	r3, ip
1004174a:	d0e6      	beq.n	1004171a <__gedf2+0xa6>
1004174c:	e7cf      	b.n	100416ee <__gedf2+0x7a>
1004174e:	46c0      	nop			@ (mov r8, r8)
10041750:	000007ff 	.word	0x000007ff

10041754 <__ledf2>:
10041754:	b5f0      	push	{r4, r5, r6, r7, lr}
10041756:	4657      	mov	r7, sl
10041758:	464e      	mov	r6, r9
1004175a:	4645      	mov	r5, r8
1004175c:	46de      	mov	lr, fp
1004175e:	b5e0      	push	{r5, r6, r7, lr}
10041760:	000d      	movs	r5, r1
10041762:	030e      	lsls	r6, r1, #12
10041764:	0049      	lsls	r1, r1, #1
10041766:	0d49      	lsrs	r1, r1, #21
10041768:	468a      	mov	sl, r1
1004176a:	0fdf      	lsrs	r7, r3, #31
1004176c:	0fe9      	lsrs	r1, r5, #31
1004176e:	46bc      	mov	ip, r7
10041770:	b083      	sub	sp, #12
10041772:	4f2e      	ldr	r7, [pc, #184]	@ (1004182c <__ledf2+0xd8>)
10041774:	0004      	movs	r4, r0
10041776:	4680      	mov	r8, r0
10041778:	9101      	str	r1, [sp, #4]
1004177a:	0058      	lsls	r0, r3, #1
1004177c:	0319      	lsls	r1, r3, #12
1004177e:	4691      	mov	r9, r2
10041780:	0b36      	lsrs	r6, r6, #12
10041782:	0b09      	lsrs	r1, r1, #12
10041784:	0d40      	lsrs	r0, r0, #21
10041786:	45ba      	cmp	sl, r7
10041788:	d01e      	beq.n	100417c8 <__ledf2+0x74>
1004178a:	42b8      	cmp	r0, r7
1004178c:	d00d      	beq.n	100417aa <__ledf2+0x56>
1004178e:	4657      	mov	r7, sl
10041790:	2f00      	cmp	r7, #0
10041792:	d127      	bne.n	100417e4 <__ledf2+0x90>
10041794:	4334      	orrs	r4, r6
10041796:	2800      	cmp	r0, #0
10041798:	d133      	bne.n	10041802 <__ledf2+0xae>
1004179a:	430a      	orrs	r2, r1
1004179c:	d034      	beq.n	10041808 <__ledf2+0xb4>
1004179e:	2c00      	cmp	r4, #0
100417a0:	d140      	bne.n	10041824 <__ledf2+0xd0>
100417a2:	4663      	mov	r3, ip
100417a4:	0058      	lsls	r0, r3, #1
100417a6:	3801      	subs	r0, #1
100417a8:	e015      	b.n	100417d6 <__ledf2+0x82>
100417aa:	4311      	orrs	r1, r2
100417ac:	d112      	bne.n	100417d4 <__ledf2+0x80>
100417ae:	4653      	mov	r3, sl
100417b0:	2b00      	cmp	r3, #0
100417b2:	d101      	bne.n	100417b8 <__ledf2+0x64>
100417b4:	4326      	orrs	r6, r4
100417b6:	d0f4      	beq.n	100417a2 <__ledf2+0x4e>
100417b8:	9b01      	ldr	r3, [sp, #4]
100417ba:	4563      	cmp	r3, ip
100417bc:	d01d      	beq.n	100417fa <__ledf2+0xa6>
100417be:	2001      	movs	r0, #1
100417c0:	9b01      	ldr	r3, [sp, #4]
100417c2:	425f      	negs	r7, r3
100417c4:	4338      	orrs	r0, r7
100417c6:	e006      	b.n	100417d6 <__ledf2+0x82>
100417c8:	4326      	orrs	r6, r4
100417ca:	d103      	bne.n	100417d4 <__ledf2+0x80>
100417cc:	4550      	cmp	r0, sl
100417ce:	d1f6      	bne.n	100417be <__ledf2+0x6a>
100417d0:	4311      	orrs	r1, r2
100417d2:	d01c      	beq.n	1004180e <__ledf2+0xba>
100417d4:	2002      	movs	r0, #2
100417d6:	b003      	add	sp, #12
100417d8:	bcf0      	pop	{r4, r5, r6, r7}
100417da:	46bb      	mov	fp, r7
100417dc:	46b2      	mov	sl, r6
100417de:	46a9      	mov	r9, r5
100417e0:	46a0      	mov	r8, r4
100417e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100417e4:	2800      	cmp	r0, #0
100417e6:	d0ea      	beq.n	100417be <__ledf2+0x6a>
100417e8:	9b01      	ldr	r3, [sp, #4]
100417ea:	4563      	cmp	r3, ip
100417ec:	d1e7      	bne.n	100417be <__ledf2+0x6a>
100417ee:	4582      	cmp	sl, r0
100417f0:	dce5      	bgt.n	100417be <__ledf2+0x6a>
100417f2:	db02      	blt.n	100417fa <__ledf2+0xa6>
100417f4:	428e      	cmp	r6, r1
100417f6:	d8e2      	bhi.n	100417be <__ledf2+0x6a>
100417f8:	d00e      	beq.n	10041818 <__ledf2+0xc4>
100417fa:	9b01      	ldr	r3, [sp, #4]
100417fc:	0058      	lsls	r0, r3, #1
100417fe:	3801      	subs	r0, #1
10041800:	e7e9      	b.n	100417d6 <__ledf2+0x82>
10041802:	2c00      	cmp	r4, #0
10041804:	d0cd      	beq.n	100417a2 <__ledf2+0x4e>
10041806:	e7d7      	b.n	100417b8 <__ledf2+0x64>
10041808:	2c00      	cmp	r4, #0
1004180a:	d0e4      	beq.n	100417d6 <__ledf2+0x82>
1004180c:	e7d7      	b.n	100417be <__ledf2+0x6a>
1004180e:	9b01      	ldr	r3, [sp, #4]
10041810:	2000      	movs	r0, #0
10041812:	4563      	cmp	r3, ip
10041814:	d0df      	beq.n	100417d6 <__ledf2+0x82>
10041816:	e7d2      	b.n	100417be <__ledf2+0x6a>
10041818:	45c8      	cmp	r8, r9
1004181a:	d8d0      	bhi.n	100417be <__ledf2+0x6a>
1004181c:	2000      	movs	r0, #0
1004181e:	45c8      	cmp	r8, r9
10041820:	d2d9      	bcs.n	100417d6 <__ledf2+0x82>
10041822:	e7ea      	b.n	100417fa <__ledf2+0xa6>
10041824:	9b01      	ldr	r3, [sp, #4]
10041826:	4563      	cmp	r3, ip
10041828:	d0e4      	beq.n	100417f4 <__ledf2+0xa0>
1004182a:	e7c8      	b.n	100417be <__ledf2+0x6a>
1004182c:	000007ff 	.word	0x000007ff

10041830 <__aeabi_dmul>:
10041830:	b5f0      	push	{r4, r5, r6, r7, lr}
10041832:	4657      	mov	r7, sl
10041834:	464e      	mov	r6, r9
10041836:	46de      	mov	lr, fp
10041838:	4645      	mov	r5, r8
1004183a:	b5e0      	push	{r5, r6, r7, lr}
1004183c:	001f      	movs	r7, r3
1004183e:	030b      	lsls	r3, r1, #12
10041840:	0b1b      	lsrs	r3, r3, #12
10041842:	0016      	movs	r6, r2
10041844:	469a      	mov	sl, r3
10041846:	0fca      	lsrs	r2, r1, #31
10041848:	004b      	lsls	r3, r1, #1
1004184a:	0004      	movs	r4, r0
1004184c:	4691      	mov	r9, r2
1004184e:	b085      	sub	sp, #20
10041850:	0d5b      	lsrs	r3, r3, #21
10041852:	d100      	bne.n	10041856 <__aeabi_dmul+0x26>
10041854:	e1cf      	b.n	10041bf6 <__aeabi_dmul+0x3c6>
10041856:	4acd      	ldr	r2, [pc, #820]	@ (10041b8c <__aeabi_dmul+0x35c>)
10041858:	4293      	cmp	r3, r2
1004185a:	d055      	beq.n	10041908 <__aeabi_dmul+0xd8>
1004185c:	4651      	mov	r1, sl
1004185e:	0f42      	lsrs	r2, r0, #29
10041860:	00c9      	lsls	r1, r1, #3
10041862:	430a      	orrs	r2, r1
10041864:	2180      	movs	r1, #128	@ 0x80
10041866:	0409      	lsls	r1, r1, #16
10041868:	4311      	orrs	r1, r2
1004186a:	00c2      	lsls	r2, r0, #3
1004186c:	4690      	mov	r8, r2
1004186e:	4ac8      	ldr	r2, [pc, #800]	@ (10041b90 <__aeabi_dmul+0x360>)
10041870:	468a      	mov	sl, r1
10041872:	4693      	mov	fp, r2
10041874:	449b      	add	fp, r3
10041876:	2300      	movs	r3, #0
10041878:	2500      	movs	r5, #0
1004187a:	9302      	str	r3, [sp, #8]
1004187c:	033c      	lsls	r4, r7, #12
1004187e:	007b      	lsls	r3, r7, #1
10041880:	0ffa      	lsrs	r2, r7, #31
10041882:	9601      	str	r6, [sp, #4]
10041884:	0b24      	lsrs	r4, r4, #12
10041886:	0d5b      	lsrs	r3, r3, #21
10041888:	9200      	str	r2, [sp, #0]
1004188a:	d100      	bne.n	1004188e <__aeabi_dmul+0x5e>
1004188c:	e188      	b.n	10041ba0 <__aeabi_dmul+0x370>
1004188e:	4abf      	ldr	r2, [pc, #764]	@ (10041b8c <__aeabi_dmul+0x35c>)
10041890:	4293      	cmp	r3, r2
10041892:	d100      	bne.n	10041896 <__aeabi_dmul+0x66>
10041894:	e092      	b.n	100419bc <__aeabi_dmul+0x18c>
10041896:	4abe      	ldr	r2, [pc, #760]	@ (10041b90 <__aeabi_dmul+0x360>)
10041898:	4694      	mov	ip, r2
1004189a:	4463      	add	r3, ip
1004189c:	449b      	add	fp, r3
1004189e:	2d0a      	cmp	r5, #10
100418a0:	dc42      	bgt.n	10041928 <__aeabi_dmul+0xf8>
100418a2:	00e4      	lsls	r4, r4, #3
100418a4:	0f73      	lsrs	r3, r6, #29
100418a6:	4323      	orrs	r3, r4
100418a8:	2480      	movs	r4, #128	@ 0x80
100418aa:	4649      	mov	r1, r9
100418ac:	0424      	lsls	r4, r4, #16
100418ae:	431c      	orrs	r4, r3
100418b0:	00f3      	lsls	r3, r6, #3
100418b2:	9301      	str	r3, [sp, #4]
100418b4:	9b00      	ldr	r3, [sp, #0]
100418b6:	2000      	movs	r0, #0
100418b8:	4059      	eors	r1, r3
100418ba:	b2cb      	uxtb	r3, r1
100418bc:	9303      	str	r3, [sp, #12]
100418be:	2d02      	cmp	r5, #2
100418c0:	dc00      	bgt.n	100418c4 <__aeabi_dmul+0x94>
100418c2:	e094      	b.n	100419ee <__aeabi_dmul+0x1be>
100418c4:	2301      	movs	r3, #1
100418c6:	40ab      	lsls	r3, r5
100418c8:	001d      	movs	r5, r3
100418ca:	23a6      	movs	r3, #166	@ 0xa6
100418cc:	002a      	movs	r2, r5
100418ce:	00db      	lsls	r3, r3, #3
100418d0:	401a      	ands	r2, r3
100418d2:	421d      	tst	r5, r3
100418d4:	d000      	beq.n	100418d8 <__aeabi_dmul+0xa8>
100418d6:	e229      	b.n	10041d2c <__aeabi_dmul+0x4fc>
100418d8:	2390      	movs	r3, #144	@ 0x90
100418da:	009b      	lsls	r3, r3, #2
100418dc:	421d      	tst	r5, r3
100418de:	d100      	bne.n	100418e2 <__aeabi_dmul+0xb2>
100418e0:	e24d      	b.n	10041d7e <__aeabi_dmul+0x54e>
100418e2:	2300      	movs	r3, #0
100418e4:	2480      	movs	r4, #128	@ 0x80
100418e6:	4699      	mov	r9, r3
100418e8:	0324      	lsls	r4, r4, #12
100418ea:	4ba8      	ldr	r3, [pc, #672]	@ (10041b8c <__aeabi_dmul+0x35c>)
100418ec:	0010      	movs	r0, r2
100418ee:	464a      	mov	r2, r9
100418f0:	051b      	lsls	r3, r3, #20
100418f2:	4323      	orrs	r3, r4
100418f4:	07d2      	lsls	r2, r2, #31
100418f6:	4313      	orrs	r3, r2
100418f8:	0019      	movs	r1, r3
100418fa:	b005      	add	sp, #20
100418fc:	bcf0      	pop	{r4, r5, r6, r7}
100418fe:	46bb      	mov	fp, r7
10041900:	46b2      	mov	sl, r6
10041902:	46a9      	mov	r9, r5
10041904:	46a0      	mov	r8, r4
10041906:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041908:	4652      	mov	r2, sl
1004190a:	4302      	orrs	r2, r0
1004190c:	4690      	mov	r8, r2
1004190e:	d000      	beq.n	10041912 <__aeabi_dmul+0xe2>
10041910:	e1ac      	b.n	10041c6c <__aeabi_dmul+0x43c>
10041912:	469b      	mov	fp, r3
10041914:	2302      	movs	r3, #2
10041916:	4692      	mov	sl, r2
10041918:	2508      	movs	r5, #8
1004191a:	9302      	str	r3, [sp, #8]
1004191c:	e7ae      	b.n	1004187c <__aeabi_dmul+0x4c>
1004191e:	9b00      	ldr	r3, [sp, #0]
10041920:	46a2      	mov	sl, r4
10041922:	4699      	mov	r9, r3
10041924:	9b01      	ldr	r3, [sp, #4]
10041926:	4698      	mov	r8, r3
10041928:	9b02      	ldr	r3, [sp, #8]
1004192a:	2b02      	cmp	r3, #2
1004192c:	d100      	bne.n	10041930 <__aeabi_dmul+0x100>
1004192e:	e1ca      	b.n	10041cc6 <__aeabi_dmul+0x496>
10041930:	2b03      	cmp	r3, #3
10041932:	d100      	bne.n	10041936 <__aeabi_dmul+0x106>
10041934:	e192      	b.n	10041c5c <__aeabi_dmul+0x42c>
10041936:	2b01      	cmp	r3, #1
10041938:	d110      	bne.n	1004195c <__aeabi_dmul+0x12c>
1004193a:	2300      	movs	r3, #0
1004193c:	2400      	movs	r4, #0
1004193e:	2200      	movs	r2, #0
10041940:	e7d4      	b.n	100418ec <__aeabi_dmul+0xbc>
10041942:	2201      	movs	r2, #1
10041944:	087b      	lsrs	r3, r7, #1
10041946:	403a      	ands	r2, r7
10041948:	4313      	orrs	r3, r2
1004194a:	4652      	mov	r2, sl
1004194c:	07d2      	lsls	r2, r2, #31
1004194e:	4313      	orrs	r3, r2
10041950:	4698      	mov	r8, r3
10041952:	4653      	mov	r3, sl
10041954:	085b      	lsrs	r3, r3, #1
10041956:	469a      	mov	sl, r3
10041958:	9b03      	ldr	r3, [sp, #12]
1004195a:	4699      	mov	r9, r3
1004195c:	465b      	mov	r3, fp
1004195e:	1c58      	adds	r0, r3, #1
10041960:	2380      	movs	r3, #128	@ 0x80
10041962:	00db      	lsls	r3, r3, #3
10041964:	445b      	add	r3, fp
10041966:	2b00      	cmp	r3, #0
10041968:	dc00      	bgt.n	1004196c <__aeabi_dmul+0x13c>
1004196a:	e1b1      	b.n	10041cd0 <__aeabi_dmul+0x4a0>
1004196c:	4642      	mov	r2, r8
1004196e:	0752      	lsls	r2, r2, #29
10041970:	d00b      	beq.n	1004198a <__aeabi_dmul+0x15a>
10041972:	220f      	movs	r2, #15
10041974:	4641      	mov	r1, r8
10041976:	400a      	ands	r2, r1
10041978:	2a04      	cmp	r2, #4
1004197a:	d006      	beq.n	1004198a <__aeabi_dmul+0x15a>
1004197c:	4642      	mov	r2, r8
1004197e:	1d11      	adds	r1, r2, #4
10041980:	4541      	cmp	r1, r8
10041982:	4192      	sbcs	r2, r2
10041984:	4688      	mov	r8, r1
10041986:	4252      	negs	r2, r2
10041988:	4492      	add	sl, r2
1004198a:	4652      	mov	r2, sl
1004198c:	01d2      	lsls	r2, r2, #7
1004198e:	d506      	bpl.n	1004199e <__aeabi_dmul+0x16e>
10041990:	4652      	mov	r2, sl
10041992:	4b80      	ldr	r3, [pc, #512]	@ (10041b94 <__aeabi_dmul+0x364>)
10041994:	401a      	ands	r2, r3
10041996:	2380      	movs	r3, #128	@ 0x80
10041998:	4692      	mov	sl, r2
1004199a:	00db      	lsls	r3, r3, #3
1004199c:	18c3      	adds	r3, r0, r3
1004199e:	4a7e      	ldr	r2, [pc, #504]	@ (10041b98 <__aeabi_dmul+0x368>)
100419a0:	4293      	cmp	r3, r2
100419a2:	dd00      	ble.n	100419a6 <__aeabi_dmul+0x176>
100419a4:	e18f      	b.n	10041cc6 <__aeabi_dmul+0x496>
100419a6:	4642      	mov	r2, r8
100419a8:	08d1      	lsrs	r1, r2, #3
100419aa:	4652      	mov	r2, sl
100419ac:	0752      	lsls	r2, r2, #29
100419ae:	430a      	orrs	r2, r1
100419b0:	4651      	mov	r1, sl
100419b2:	055b      	lsls	r3, r3, #21
100419b4:	024c      	lsls	r4, r1, #9
100419b6:	0b24      	lsrs	r4, r4, #12
100419b8:	0d5b      	lsrs	r3, r3, #21
100419ba:	e797      	b.n	100418ec <__aeabi_dmul+0xbc>
100419bc:	4b73      	ldr	r3, [pc, #460]	@ (10041b8c <__aeabi_dmul+0x35c>)
100419be:	4326      	orrs	r6, r4
100419c0:	469c      	mov	ip, r3
100419c2:	44e3      	add	fp, ip
100419c4:	2e00      	cmp	r6, #0
100419c6:	d100      	bne.n	100419ca <__aeabi_dmul+0x19a>
100419c8:	e16f      	b.n	10041caa <__aeabi_dmul+0x47a>
100419ca:	2303      	movs	r3, #3
100419cc:	4649      	mov	r1, r9
100419ce:	431d      	orrs	r5, r3
100419d0:	9b00      	ldr	r3, [sp, #0]
100419d2:	4059      	eors	r1, r3
100419d4:	b2cb      	uxtb	r3, r1
100419d6:	9303      	str	r3, [sp, #12]
100419d8:	2d0a      	cmp	r5, #10
100419da:	dd00      	ble.n	100419de <__aeabi_dmul+0x1ae>
100419dc:	e133      	b.n	10041c46 <__aeabi_dmul+0x416>
100419de:	2301      	movs	r3, #1
100419e0:	40ab      	lsls	r3, r5
100419e2:	001d      	movs	r5, r3
100419e4:	2303      	movs	r3, #3
100419e6:	9302      	str	r3, [sp, #8]
100419e8:	2288      	movs	r2, #136	@ 0x88
100419ea:	422a      	tst	r2, r5
100419ec:	d197      	bne.n	1004191e <__aeabi_dmul+0xee>
100419ee:	4642      	mov	r2, r8
100419f0:	4643      	mov	r3, r8
100419f2:	0412      	lsls	r2, r2, #16
100419f4:	0c12      	lsrs	r2, r2, #16
100419f6:	0016      	movs	r6, r2
100419f8:	9801      	ldr	r0, [sp, #4]
100419fa:	0c1d      	lsrs	r5, r3, #16
100419fc:	0c03      	lsrs	r3, r0, #16
100419fe:	0400      	lsls	r0, r0, #16
10041a00:	0c00      	lsrs	r0, r0, #16
10041a02:	4346      	muls	r6, r0
10041a04:	46b4      	mov	ip, r6
10041a06:	001e      	movs	r6, r3
10041a08:	436e      	muls	r6, r5
10041a0a:	9600      	str	r6, [sp, #0]
10041a0c:	0016      	movs	r6, r2
10041a0e:	0007      	movs	r7, r0
10041a10:	435e      	muls	r6, r3
10041a12:	4661      	mov	r1, ip
10041a14:	46b0      	mov	r8, r6
10041a16:	436f      	muls	r7, r5
10041a18:	0c0e      	lsrs	r6, r1, #16
10041a1a:	44b8      	add	r8, r7
10041a1c:	4446      	add	r6, r8
10041a1e:	42b7      	cmp	r7, r6
10041a20:	d905      	bls.n	10041a2e <__aeabi_dmul+0x1fe>
10041a22:	2180      	movs	r1, #128	@ 0x80
10041a24:	0249      	lsls	r1, r1, #9
10041a26:	4688      	mov	r8, r1
10041a28:	9f00      	ldr	r7, [sp, #0]
10041a2a:	4447      	add	r7, r8
10041a2c:	9700      	str	r7, [sp, #0]
10041a2e:	4661      	mov	r1, ip
10041a30:	0409      	lsls	r1, r1, #16
10041a32:	0c09      	lsrs	r1, r1, #16
10041a34:	0c37      	lsrs	r7, r6, #16
10041a36:	0436      	lsls	r6, r6, #16
10041a38:	468c      	mov	ip, r1
10041a3a:	0031      	movs	r1, r6
10041a3c:	4461      	add	r1, ip
10041a3e:	9101      	str	r1, [sp, #4]
10041a40:	0011      	movs	r1, r2
10041a42:	0c26      	lsrs	r6, r4, #16
10041a44:	0424      	lsls	r4, r4, #16
10041a46:	0c24      	lsrs	r4, r4, #16
10041a48:	4361      	muls	r1, r4
10041a4a:	468c      	mov	ip, r1
10041a4c:	0021      	movs	r1, r4
10041a4e:	4369      	muls	r1, r5
10041a50:	4689      	mov	r9, r1
10041a52:	4661      	mov	r1, ip
10041a54:	0c09      	lsrs	r1, r1, #16
10041a56:	4688      	mov	r8, r1
10041a58:	4372      	muls	r2, r6
10041a5a:	444a      	add	r2, r9
10041a5c:	4442      	add	r2, r8
10041a5e:	4375      	muls	r5, r6
10041a60:	4591      	cmp	r9, r2
10041a62:	d903      	bls.n	10041a6c <__aeabi_dmul+0x23c>
10041a64:	2180      	movs	r1, #128	@ 0x80
10041a66:	0249      	lsls	r1, r1, #9
10041a68:	4688      	mov	r8, r1
10041a6a:	4445      	add	r5, r8
10041a6c:	0c11      	lsrs	r1, r2, #16
10041a6e:	4688      	mov	r8, r1
10041a70:	4661      	mov	r1, ip
10041a72:	0409      	lsls	r1, r1, #16
10041a74:	0c09      	lsrs	r1, r1, #16
10041a76:	468c      	mov	ip, r1
10041a78:	0412      	lsls	r2, r2, #16
10041a7a:	4462      	add	r2, ip
10041a7c:	18b9      	adds	r1, r7, r2
10041a7e:	9102      	str	r1, [sp, #8]
10041a80:	4651      	mov	r1, sl
10041a82:	0c09      	lsrs	r1, r1, #16
10041a84:	468c      	mov	ip, r1
10041a86:	4651      	mov	r1, sl
10041a88:	040f      	lsls	r7, r1, #16
10041a8a:	0c3f      	lsrs	r7, r7, #16
10041a8c:	0039      	movs	r1, r7
10041a8e:	4341      	muls	r1, r0
10041a90:	4445      	add	r5, r8
10041a92:	4688      	mov	r8, r1
10041a94:	4661      	mov	r1, ip
10041a96:	4341      	muls	r1, r0
10041a98:	468a      	mov	sl, r1
10041a9a:	4641      	mov	r1, r8
10041a9c:	4660      	mov	r0, ip
10041a9e:	0c09      	lsrs	r1, r1, #16
10041aa0:	4689      	mov	r9, r1
10041aa2:	4358      	muls	r0, r3
10041aa4:	437b      	muls	r3, r7
10041aa6:	4453      	add	r3, sl
10041aa8:	444b      	add	r3, r9
10041aaa:	459a      	cmp	sl, r3
10041aac:	d903      	bls.n	10041ab6 <__aeabi_dmul+0x286>
10041aae:	2180      	movs	r1, #128	@ 0x80
10041ab0:	0249      	lsls	r1, r1, #9
10041ab2:	4689      	mov	r9, r1
10041ab4:	4448      	add	r0, r9
10041ab6:	0c19      	lsrs	r1, r3, #16
10041ab8:	4689      	mov	r9, r1
10041aba:	4641      	mov	r1, r8
10041abc:	0409      	lsls	r1, r1, #16
10041abe:	0c09      	lsrs	r1, r1, #16
10041ac0:	4688      	mov	r8, r1
10041ac2:	0039      	movs	r1, r7
10041ac4:	4361      	muls	r1, r4
10041ac6:	041b      	lsls	r3, r3, #16
10041ac8:	4443      	add	r3, r8
10041aca:	4688      	mov	r8, r1
10041acc:	4661      	mov	r1, ip
10041ace:	434c      	muls	r4, r1
10041ad0:	4371      	muls	r1, r6
10041ad2:	468c      	mov	ip, r1
10041ad4:	4641      	mov	r1, r8
10041ad6:	4377      	muls	r7, r6
10041ad8:	0c0e      	lsrs	r6, r1, #16
10041ada:	193f      	adds	r7, r7, r4
10041adc:	19f6      	adds	r6, r6, r7
10041ade:	4448      	add	r0, r9
10041ae0:	42b4      	cmp	r4, r6
10041ae2:	d903      	bls.n	10041aec <__aeabi_dmul+0x2bc>
10041ae4:	2180      	movs	r1, #128	@ 0x80
10041ae6:	0249      	lsls	r1, r1, #9
10041ae8:	4689      	mov	r9, r1
10041aea:	44cc      	add	ip, r9
10041aec:	9902      	ldr	r1, [sp, #8]
10041aee:	9f00      	ldr	r7, [sp, #0]
10041af0:	4689      	mov	r9, r1
10041af2:	0431      	lsls	r1, r6, #16
10041af4:	444f      	add	r7, r9
10041af6:	4689      	mov	r9, r1
10041af8:	4641      	mov	r1, r8
10041afa:	4297      	cmp	r7, r2
10041afc:	4192      	sbcs	r2, r2
10041afe:	040c      	lsls	r4, r1, #16
10041b00:	0c24      	lsrs	r4, r4, #16
10041b02:	444c      	add	r4, r9
10041b04:	18ff      	adds	r7, r7, r3
10041b06:	4252      	negs	r2, r2
10041b08:	1964      	adds	r4, r4, r5
10041b0a:	18a1      	adds	r1, r4, r2
10041b0c:	429f      	cmp	r7, r3
10041b0e:	419b      	sbcs	r3, r3
10041b10:	4688      	mov	r8, r1
10041b12:	4682      	mov	sl, r0
10041b14:	425b      	negs	r3, r3
10041b16:	4699      	mov	r9, r3
10041b18:	4590      	cmp	r8, r2
10041b1a:	4192      	sbcs	r2, r2
10041b1c:	42ac      	cmp	r4, r5
10041b1e:	41a4      	sbcs	r4, r4
10041b20:	44c2      	add	sl, r8
10041b22:	44d1      	add	r9, sl
10041b24:	4252      	negs	r2, r2
10041b26:	4264      	negs	r4, r4
10041b28:	4314      	orrs	r4, r2
10041b2a:	4599      	cmp	r9, r3
10041b2c:	419b      	sbcs	r3, r3
10041b2e:	4582      	cmp	sl, r0
10041b30:	4192      	sbcs	r2, r2
10041b32:	425b      	negs	r3, r3
10041b34:	4252      	negs	r2, r2
10041b36:	4313      	orrs	r3, r2
10041b38:	464a      	mov	r2, r9
10041b3a:	0c36      	lsrs	r6, r6, #16
10041b3c:	19a4      	adds	r4, r4, r6
10041b3e:	18e3      	adds	r3, r4, r3
10041b40:	4463      	add	r3, ip
10041b42:	025b      	lsls	r3, r3, #9
10041b44:	0dd2      	lsrs	r2, r2, #23
10041b46:	431a      	orrs	r2, r3
10041b48:	9901      	ldr	r1, [sp, #4]
10041b4a:	4692      	mov	sl, r2
10041b4c:	027a      	lsls	r2, r7, #9
10041b4e:	430a      	orrs	r2, r1
10041b50:	1e50      	subs	r0, r2, #1
10041b52:	4182      	sbcs	r2, r0
10041b54:	0dff      	lsrs	r7, r7, #23
10041b56:	4317      	orrs	r7, r2
10041b58:	464a      	mov	r2, r9
10041b5a:	0252      	lsls	r2, r2, #9
10041b5c:	4317      	orrs	r7, r2
10041b5e:	46b8      	mov	r8, r7
10041b60:	01db      	lsls	r3, r3, #7
10041b62:	d500      	bpl.n	10041b66 <__aeabi_dmul+0x336>
10041b64:	e6ed      	b.n	10041942 <__aeabi_dmul+0x112>
10041b66:	4b0d      	ldr	r3, [pc, #52]	@ (10041b9c <__aeabi_dmul+0x36c>)
10041b68:	9a03      	ldr	r2, [sp, #12]
10041b6a:	445b      	add	r3, fp
10041b6c:	4691      	mov	r9, r2
10041b6e:	2b00      	cmp	r3, #0
10041b70:	dc00      	bgt.n	10041b74 <__aeabi_dmul+0x344>
10041b72:	e0ac      	b.n	10041cce <__aeabi_dmul+0x49e>
10041b74:	003a      	movs	r2, r7
10041b76:	0752      	lsls	r2, r2, #29
10041b78:	d100      	bne.n	10041b7c <__aeabi_dmul+0x34c>
10041b7a:	e710      	b.n	1004199e <__aeabi_dmul+0x16e>
10041b7c:	220f      	movs	r2, #15
10041b7e:	4658      	mov	r0, fp
10041b80:	403a      	ands	r2, r7
10041b82:	2a04      	cmp	r2, #4
10041b84:	d000      	beq.n	10041b88 <__aeabi_dmul+0x358>
10041b86:	e6f9      	b.n	1004197c <__aeabi_dmul+0x14c>
10041b88:	e709      	b.n	1004199e <__aeabi_dmul+0x16e>
10041b8a:	46c0      	nop			@ (mov r8, r8)
10041b8c:	000007ff 	.word	0x000007ff
10041b90:	fffffc01 	.word	0xfffffc01
10041b94:	feffffff 	.word	0xfeffffff
10041b98:	000007fe 	.word	0x000007fe
10041b9c:	000003ff 	.word	0x000003ff
10041ba0:	0022      	movs	r2, r4
10041ba2:	4332      	orrs	r2, r6
10041ba4:	d06f      	beq.n	10041c86 <__aeabi_dmul+0x456>
10041ba6:	2c00      	cmp	r4, #0
10041ba8:	d100      	bne.n	10041bac <__aeabi_dmul+0x37c>
10041baa:	e0c2      	b.n	10041d32 <__aeabi_dmul+0x502>
10041bac:	0020      	movs	r0, r4
10041bae:	f7fe fd07 	bl	100405c0 <__clzsi2>
10041bb2:	0002      	movs	r2, r0
10041bb4:	0003      	movs	r3, r0
10041bb6:	3a0b      	subs	r2, #11
10041bb8:	201d      	movs	r0, #29
10041bba:	1a82      	subs	r2, r0, r2
10041bbc:	0030      	movs	r0, r6
10041bbe:	0019      	movs	r1, r3
10041bc0:	40d0      	lsrs	r0, r2
10041bc2:	3908      	subs	r1, #8
10041bc4:	408c      	lsls	r4, r1
10041bc6:	0002      	movs	r2, r0
10041bc8:	4322      	orrs	r2, r4
10041bca:	0034      	movs	r4, r6
10041bcc:	408c      	lsls	r4, r1
10041bce:	4659      	mov	r1, fp
10041bd0:	1acb      	subs	r3, r1, r3
10041bd2:	4986      	ldr	r1, [pc, #536]	@ (10041dec <__aeabi_dmul+0x5bc>)
10041bd4:	468b      	mov	fp, r1
10041bd6:	449b      	add	fp, r3
10041bd8:	2d0a      	cmp	r5, #10
10041bda:	dd00      	ble.n	10041bde <__aeabi_dmul+0x3ae>
10041bdc:	e6a4      	b.n	10041928 <__aeabi_dmul+0xf8>
10041bde:	4649      	mov	r1, r9
10041be0:	9b00      	ldr	r3, [sp, #0]
10041be2:	9401      	str	r4, [sp, #4]
10041be4:	4059      	eors	r1, r3
10041be6:	b2cb      	uxtb	r3, r1
10041be8:	0014      	movs	r4, r2
10041bea:	2000      	movs	r0, #0
10041bec:	9303      	str	r3, [sp, #12]
10041bee:	2d02      	cmp	r5, #2
10041bf0:	dd00      	ble.n	10041bf4 <__aeabi_dmul+0x3c4>
10041bf2:	e667      	b.n	100418c4 <__aeabi_dmul+0x94>
10041bf4:	e6fb      	b.n	100419ee <__aeabi_dmul+0x1be>
10041bf6:	4653      	mov	r3, sl
10041bf8:	4303      	orrs	r3, r0
10041bfa:	4698      	mov	r8, r3
10041bfc:	d03c      	beq.n	10041c78 <__aeabi_dmul+0x448>
10041bfe:	4653      	mov	r3, sl
10041c00:	2b00      	cmp	r3, #0
10041c02:	d100      	bne.n	10041c06 <__aeabi_dmul+0x3d6>
10041c04:	e0a3      	b.n	10041d4e <__aeabi_dmul+0x51e>
10041c06:	4650      	mov	r0, sl
10041c08:	f7fe fcda 	bl	100405c0 <__clzsi2>
10041c0c:	230b      	movs	r3, #11
10041c0e:	425b      	negs	r3, r3
10041c10:	469c      	mov	ip, r3
10041c12:	0002      	movs	r2, r0
10041c14:	4484      	add	ip, r0
10041c16:	0011      	movs	r1, r2
10041c18:	4650      	mov	r0, sl
10041c1a:	3908      	subs	r1, #8
10041c1c:	4088      	lsls	r0, r1
10041c1e:	231d      	movs	r3, #29
10041c20:	4680      	mov	r8, r0
10041c22:	4660      	mov	r0, ip
10041c24:	1a1b      	subs	r3, r3, r0
10041c26:	0020      	movs	r0, r4
10041c28:	40d8      	lsrs	r0, r3
10041c2a:	0003      	movs	r3, r0
10041c2c:	4640      	mov	r0, r8
10041c2e:	4303      	orrs	r3, r0
10041c30:	469a      	mov	sl, r3
10041c32:	0023      	movs	r3, r4
10041c34:	408b      	lsls	r3, r1
10041c36:	4698      	mov	r8, r3
10041c38:	4b6c      	ldr	r3, [pc, #432]	@ (10041dec <__aeabi_dmul+0x5bc>)
10041c3a:	2500      	movs	r5, #0
10041c3c:	1a9b      	subs	r3, r3, r2
10041c3e:	469b      	mov	fp, r3
10041c40:	2300      	movs	r3, #0
10041c42:	9302      	str	r3, [sp, #8]
10041c44:	e61a      	b.n	1004187c <__aeabi_dmul+0x4c>
10041c46:	2d0f      	cmp	r5, #15
10041c48:	d000      	beq.n	10041c4c <__aeabi_dmul+0x41c>
10041c4a:	e0c9      	b.n	10041de0 <__aeabi_dmul+0x5b0>
10041c4c:	2380      	movs	r3, #128	@ 0x80
10041c4e:	4652      	mov	r2, sl
10041c50:	031b      	lsls	r3, r3, #12
10041c52:	421a      	tst	r2, r3
10041c54:	d002      	beq.n	10041c5c <__aeabi_dmul+0x42c>
10041c56:	421c      	tst	r4, r3
10041c58:	d100      	bne.n	10041c5c <__aeabi_dmul+0x42c>
10041c5a:	e092      	b.n	10041d82 <__aeabi_dmul+0x552>
10041c5c:	2480      	movs	r4, #128	@ 0x80
10041c5e:	4653      	mov	r3, sl
10041c60:	0324      	lsls	r4, r4, #12
10041c62:	431c      	orrs	r4, r3
10041c64:	0324      	lsls	r4, r4, #12
10041c66:	4642      	mov	r2, r8
10041c68:	0b24      	lsrs	r4, r4, #12
10041c6a:	e63e      	b.n	100418ea <__aeabi_dmul+0xba>
10041c6c:	469b      	mov	fp, r3
10041c6e:	2303      	movs	r3, #3
10041c70:	4680      	mov	r8, r0
10041c72:	250c      	movs	r5, #12
10041c74:	9302      	str	r3, [sp, #8]
10041c76:	e601      	b.n	1004187c <__aeabi_dmul+0x4c>
10041c78:	2300      	movs	r3, #0
10041c7a:	469a      	mov	sl, r3
10041c7c:	469b      	mov	fp, r3
10041c7e:	3301      	adds	r3, #1
10041c80:	2504      	movs	r5, #4
10041c82:	9302      	str	r3, [sp, #8]
10041c84:	e5fa      	b.n	1004187c <__aeabi_dmul+0x4c>
10041c86:	2101      	movs	r1, #1
10041c88:	430d      	orrs	r5, r1
10041c8a:	2d0a      	cmp	r5, #10
10041c8c:	dd00      	ble.n	10041c90 <__aeabi_dmul+0x460>
10041c8e:	e64b      	b.n	10041928 <__aeabi_dmul+0xf8>
10041c90:	4649      	mov	r1, r9
10041c92:	9800      	ldr	r0, [sp, #0]
10041c94:	4041      	eors	r1, r0
10041c96:	b2c9      	uxtb	r1, r1
10041c98:	9103      	str	r1, [sp, #12]
10041c9a:	2d02      	cmp	r5, #2
10041c9c:	dc00      	bgt.n	10041ca0 <__aeabi_dmul+0x470>
10041c9e:	e096      	b.n	10041dce <__aeabi_dmul+0x59e>
10041ca0:	2300      	movs	r3, #0
10041ca2:	2400      	movs	r4, #0
10041ca4:	2001      	movs	r0, #1
10041ca6:	9301      	str	r3, [sp, #4]
10041ca8:	e60c      	b.n	100418c4 <__aeabi_dmul+0x94>
10041caa:	4649      	mov	r1, r9
10041cac:	2302      	movs	r3, #2
10041cae:	9a00      	ldr	r2, [sp, #0]
10041cb0:	432b      	orrs	r3, r5
10041cb2:	4051      	eors	r1, r2
10041cb4:	b2ca      	uxtb	r2, r1
10041cb6:	9203      	str	r2, [sp, #12]
10041cb8:	2b0a      	cmp	r3, #10
10041cba:	dd00      	ble.n	10041cbe <__aeabi_dmul+0x48e>
10041cbc:	e634      	b.n	10041928 <__aeabi_dmul+0xf8>
10041cbe:	2d00      	cmp	r5, #0
10041cc0:	d157      	bne.n	10041d72 <__aeabi_dmul+0x542>
10041cc2:	9b03      	ldr	r3, [sp, #12]
10041cc4:	4699      	mov	r9, r3
10041cc6:	2400      	movs	r4, #0
10041cc8:	2200      	movs	r2, #0
10041cca:	4b49      	ldr	r3, [pc, #292]	@ (10041df0 <__aeabi_dmul+0x5c0>)
10041ccc:	e60e      	b.n	100418ec <__aeabi_dmul+0xbc>
10041cce:	4658      	mov	r0, fp
10041cd0:	2101      	movs	r1, #1
10041cd2:	1ac9      	subs	r1, r1, r3
10041cd4:	2938      	cmp	r1, #56	@ 0x38
10041cd6:	dd00      	ble.n	10041cda <__aeabi_dmul+0x4aa>
10041cd8:	e62f      	b.n	1004193a <__aeabi_dmul+0x10a>
10041cda:	291f      	cmp	r1, #31
10041cdc:	dd56      	ble.n	10041d8c <__aeabi_dmul+0x55c>
10041cde:	221f      	movs	r2, #31
10041ce0:	4654      	mov	r4, sl
10041ce2:	4252      	negs	r2, r2
10041ce4:	1ad3      	subs	r3, r2, r3
10041ce6:	40dc      	lsrs	r4, r3
10041ce8:	2920      	cmp	r1, #32
10041cea:	d007      	beq.n	10041cfc <__aeabi_dmul+0x4cc>
10041cec:	4b41      	ldr	r3, [pc, #260]	@ (10041df4 <__aeabi_dmul+0x5c4>)
10041cee:	4642      	mov	r2, r8
10041cf0:	469c      	mov	ip, r3
10041cf2:	4653      	mov	r3, sl
10041cf4:	4460      	add	r0, ip
10041cf6:	4083      	lsls	r3, r0
10041cf8:	431a      	orrs	r2, r3
10041cfa:	4690      	mov	r8, r2
10041cfc:	4642      	mov	r2, r8
10041cfe:	2107      	movs	r1, #7
10041d00:	1e53      	subs	r3, r2, #1
10041d02:	419a      	sbcs	r2, r3
10041d04:	000b      	movs	r3, r1
10041d06:	4322      	orrs	r2, r4
10041d08:	4013      	ands	r3, r2
10041d0a:	2400      	movs	r4, #0
10041d0c:	4211      	tst	r1, r2
10041d0e:	d009      	beq.n	10041d24 <__aeabi_dmul+0x4f4>
10041d10:	230f      	movs	r3, #15
10041d12:	4013      	ands	r3, r2
10041d14:	2b04      	cmp	r3, #4
10041d16:	d05d      	beq.n	10041dd4 <__aeabi_dmul+0x5a4>
10041d18:	1d11      	adds	r1, r2, #4
10041d1a:	4291      	cmp	r1, r2
10041d1c:	419b      	sbcs	r3, r3
10041d1e:	000a      	movs	r2, r1
10041d20:	425b      	negs	r3, r3
10041d22:	075b      	lsls	r3, r3, #29
10041d24:	08d2      	lsrs	r2, r2, #3
10041d26:	431a      	orrs	r2, r3
10041d28:	2300      	movs	r3, #0
10041d2a:	e5df      	b.n	100418ec <__aeabi_dmul+0xbc>
10041d2c:	9b03      	ldr	r3, [sp, #12]
10041d2e:	4699      	mov	r9, r3
10041d30:	e5fa      	b.n	10041928 <__aeabi_dmul+0xf8>
10041d32:	9801      	ldr	r0, [sp, #4]
10041d34:	f7fe fc44 	bl	100405c0 <__clzsi2>
10041d38:	0002      	movs	r2, r0
10041d3a:	0003      	movs	r3, r0
10041d3c:	3215      	adds	r2, #21
10041d3e:	3320      	adds	r3, #32
10041d40:	2a1c      	cmp	r2, #28
10041d42:	dc00      	bgt.n	10041d46 <__aeabi_dmul+0x516>
10041d44:	e738      	b.n	10041bb8 <__aeabi_dmul+0x388>
10041d46:	9a01      	ldr	r2, [sp, #4]
10041d48:	3808      	subs	r0, #8
10041d4a:	4082      	lsls	r2, r0
10041d4c:	e73f      	b.n	10041bce <__aeabi_dmul+0x39e>
10041d4e:	f7fe fc37 	bl	100405c0 <__clzsi2>
10041d52:	2315      	movs	r3, #21
10041d54:	469c      	mov	ip, r3
10041d56:	4484      	add	ip, r0
10041d58:	0002      	movs	r2, r0
10041d5a:	4663      	mov	r3, ip
10041d5c:	3220      	adds	r2, #32
10041d5e:	2b1c      	cmp	r3, #28
10041d60:	dc00      	bgt.n	10041d64 <__aeabi_dmul+0x534>
10041d62:	e758      	b.n	10041c16 <__aeabi_dmul+0x3e6>
10041d64:	2300      	movs	r3, #0
10041d66:	4698      	mov	r8, r3
10041d68:	0023      	movs	r3, r4
10041d6a:	3808      	subs	r0, #8
10041d6c:	4083      	lsls	r3, r0
10041d6e:	469a      	mov	sl, r3
10041d70:	e762      	b.n	10041c38 <__aeabi_dmul+0x408>
10041d72:	001d      	movs	r5, r3
10041d74:	2300      	movs	r3, #0
10041d76:	2400      	movs	r4, #0
10041d78:	2002      	movs	r0, #2
10041d7a:	9301      	str	r3, [sp, #4]
10041d7c:	e5a2      	b.n	100418c4 <__aeabi_dmul+0x94>
10041d7e:	9002      	str	r0, [sp, #8]
10041d80:	e632      	b.n	100419e8 <__aeabi_dmul+0x1b8>
10041d82:	431c      	orrs	r4, r3
10041d84:	9b00      	ldr	r3, [sp, #0]
10041d86:	9a01      	ldr	r2, [sp, #4]
10041d88:	4699      	mov	r9, r3
10041d8a:	e5ae      	b.n	100418ea <__aeabi_dmul+0xba>
10041d8c:	4b1a      	ldr	r3, [pc, #104]	@ (10041df8 <__aeabi_dmul+0x5c8>)
10041d8e:	4652      	mov	r2, sl
10041d90:	18c3      	adds	r3, r0, r3
10041d92:	4640      	mov	r0, r8
10041d94:	409a      	lsls	r2, r3
10041d96:	40c8      	lsrs	r0, r1
10041d98:	4302      	orrs	r2, r0
10041d9a:	4640      	mov	r0, r8
10041d9c:	4098      	lsls	r0, r3
10041d9e:	0003      	movs	r3, r0
10041da0:	1e58      	subs	r0, r3, #1
10041da2:	4183      	sbcs	r3, r0
10041da4:	4654      	mov	r4, sl
10041da6:	431a      	orrs	r2, r3
10041da8:	40cc      	lsrs	r4, r1
10041daa:	0753      	lsls	r3, r2, #29
10041dac:	d009      	beq.n	10041dc2 <__aeabi_dmul+0x592>
10041dae:	230f      	movs	r3, #15
10041db0:	4013      	ands	r3, r2
10041db2:	2b04      	cmp	r3, #4
10041db4:	d005      	beq.n	10041dc2 <__aeabi_dmul+0x592>
10041db6:	1d13      	adds	r3, r2, #4
10041db8:	4293      	cmp	r3, r2
10041dba:	4192      	sbcs	r2, r2
10041dbc:	4252      	negs	r2, r2
10041dbe:	18a4      	adds	r4, r4, r2
10041dc0:	001a      	movs	r2, r3
10041dc2:	0223      	lsls	r3, r4, #8
10041dc4:	d508      	bpl.n	10041dd8 <__aeabi_dmul+0x5a8>
10041dc6:	2301      	movs	r3, #1
10041dc8:	2400      	movs	r4, #0
10041dca:	2200      	movs	r2, #0
10041dcc:	e58e      	b.n	100418ec <__aeabi_dmul+0xbc>
10041dce:	4689      	mov	r9, r1
10041dd0:	2400      	movs	r4, #0
10041dd2:	e58b      	b.n	100418ec <__aeabi_dmul+0xbc>
10041dd4:	2300      	movs	r3, #0
10041dd6:	e7a5      	b.n	10041d24 <__aeabi_dmul+0x4f4>
10041dd8:	0763      	lsls	r3, r4, #29
10041dda:	0264      	lsls	r4, r4, #9
10041ddc:	0b24      	lsrs	r4, r4, #12
10041dde:	e7a1      	b.n	10041d24 <__aeabi_dmul+0x4f4>
10041de0:	9b00      	ldr	r3, [sp, #0]
10041de2:	46a2      	mov	sl, r4
10041de4:	4699      	mov	r9, r3
10041de6:	9b01      	ldr	r3, [sp, #4]
10041de8:	4698      	mov	r8, r3
10041dea:	e737      	b.n	10041c5c <__aeabi_dmul+0x42c>
10041dec:	fffffc0d 	.word	0xfffffc0d
10041df0:	000007ff 	.word	0x000007ff
10041df4:	0000043e 	.word	0x0000043e
10041df8:	0000041e 	.word	0x0000041e

10041dfc <__aeabi_i2d>:
10041dfc:	b570      	push	{r4, r5, r6, lr}
10041dfe:	2800      	cmp	r0, #0
10041e00:	d016      	beq.n	10041e30 <__aeabi_i2d+0x34>
10041e02:	17c3      	asrs	r3, r0, #31
10041e04:	18c5      	adds	r5, r0, r3
10041e06:	405d      	eors	r5, r3
10041e08:	0fc4      	lsrs	r4, r0, #31
10041e0a:	0028      	movs	r0, r5
10041e0c:	f7fe fbd8 	bl	100405c0 <__clzsi2>
10041e10:	4b10      	ldr	r3, [pc, #64]	@ (10041e54 <__aeabi_i2d+0x58>)
10041e12:	1a1b      	subs	r3, r3, r0
10041e14:	055b      	lsls	r3, r3, #21
10041e16:	0d5b      	lsrs	r3, r3, #21
10041e18:	280a      	cmp	r0, #10
10041e1a:	dc14      	bgt.n	10041e46 <__aeabi_i2d+0x4a>
10041e1c:	0002      	movs	r2, r0
10041e1e:	002e      	movs	r6, r5
10041e20:	3215      	adds	r2, #21
10041e22:	4096      	lsls	r6, r2
10041e24:	220b      	movs	r2, #11
10041e26:	1a12      	subs	r2, r2, r0
10041e28:	40d5      	lsrs	r5, r2
10041e2a:	032d      	lsls	r5, r5, #12
10041e2c:	0b2d      	lsrs	r5, r5, #12
10041e2e:	e003      	b.n	10041e38 <__aeabi_i2d+0x3c>
10041e30:	2400      	movs	r4, #0
10041e32:	2300      	movs	r3, #0
10041e34:	2500      	movs	r5, #0
10041e36:	2600      	movs	r6, #0
10041e38:	051b      	lsls	r3, r3, #20
10041e3a:	432b      	orrs	r3, r5
10041e3c:	07e4      	lsls	r4, r4, #31
10041e3e:	4323      	orrs	r3, r4
10041e40:	0030      	movs	r0, r6
10041e42:	0019      	movs	r1, r3
10041e44:	bd70      	pop	{r4, r5, r6, pc}
10041e46:	380b      	subs	r0, #11
10041e48:	4085      	lsls	r5, r0
10041e4a:	032d      	lsls	r5, r5, #12
10041e4c:	2600      	movs	r6, #0
10041e4e:	0b2d      	lsrs	r5, r5, #12
10041e50:	e7f2      	b.n	10041e38 <__aeabi_i2d+0x3c>
10041e52:	46c0      	nop			@ (mov r8, r8)
10041e54:	0000041e 	.word	0x0000041e

10041e58 <__aeabi_ui2d>:
10041e58:	b510      	push	{r4, lr}
10041e5a:	1e04      	subs	r4, r0, #0
10041e5c:	d010      	beq.n	10041e80 <__aeabi_ui2d+0x28>
10041e5e:	f7fe fbaf 	bl	100405c0 <__clzsi2>
10041e62:	4b0e      	ldr	r3, [pc, #56]	@ (10041e9c <__aeabi_ui2d+0x44>)
10041e64:	1a1b      	subs	r3, r3, r0
10041e66:	055b      	lsls	r3, r3, #21
10041e68:	0d5b      	lsrs	r3, r3, #21
10041e6a:	280a      	cmp	r0, #10
10041e6c:	dc0f      	bgt.n	10041e8e <__aeabi_ui2d+0x36>
10041e6e:	220b      	movs	r2, #11
10041e70:	0021      	movs	r1, r4
10041e72:	1a12      	subs	r2, r2, r0
10041e74:	40d1      	lsrs	r1, r2
10041e76:	3015      	adds	r0, #21
10041e78:	030a      	lsls	r2, r1, #12
10041e7a:	4084      	lsls	r4, r0
10041e7c:	0b12      	lsrs	r2, r2, #12
10041e7e:	e001      	b.n	10041e84 <__aeabi_ui2d+0x2c>
10041e80:	2300      	movs	r3, #0
10041e82:	2200      	movs	r2, #0
10041e84:	051b      	lsls	r3, r3, #20
10041e86:	4313      	orrs	r3, r2
10041e88:	0020      	movs	r0, r4
10041e8a:	0019      	movs	r1, r3
10041e8c:	bd10      	pop	{r4, pc}
10041e8e:	0022      	movs	r2, r4
10041e90:	380b      	subs	r0, #11
10041e92:	4082      	lsls	r2, r0
10041e94:	0312      	lsls	r2, r2, #12
10041e96:	2400      	movs	r4, #0
10041e98:	0b12      	lsrs	r2, r2, #12
10041e9a:	e7f3      	b.n	10041e84 <__aeabi_ui2d+0x2c>
10041e9c:	0000041e 	.word	0x0000041e

10041ea0 <__clzdi2>:
10041ea0:	b510      	push	{r4, lr}
10041ea2:	2900      	cmp	r1, #0
10041ea4:	d103      	bne.n	10041eae <__clzdi2+0xe>
10041ea6:	f7fe fb8b 	bl	100405c0 <__clzsi2>
10041eaa:	3020      	adds	r0, #32
10041eac:	e002      	b.n	10041eb4 <__clzdi2+0x14>
10041eae:	0008      	movs	r0, r1
10041eb0:	f7fe fb86 	bl	100405c0 <__clzsi2>
10041eb4:	bd10      	pop	{r4, pc}
10041eb6:	46c0      	nop			@ (mov r8, r8)

10041eb8 <BLUETOOTH_BufferInit>:
 * @function: BLUETOOTH_BufferInit()
 * @brief: initialize the the bluetooth tx buffer for virtual USART communication
 * @param: none
 * @return: none
 */
void BLUETOOTH_BufferInit(){
10041eb8:	b580      	push	{r7, lr}
10041eba:	af00      	add	r7, sp, #0
	buffer.head = 0;
10041ebc:	4a07      	ldr	r2, [pc, #28]	@ (10041edc <BLUETOOTH_BufferInit+0x24>)
10041ebe:	2380      	movs	r3, #128	@ 0x80
10041ec0:	009b      	lsls	r3, r3, #2
10041ec2:	2100      	movs	r1, #0
10041ec4:	54d1      	strb	r1, [r2, r3]
	buffer.tail = 0;
10041ec6:	4b05      	ldr	r3, [pc, #20]	@ (10041edc <BLUETOOTH_BufferInit+0x24>)
10041ec8:	4a05      	ldr	r2, [pc, #20]	@ (10041ee0 <BLUETOOTH_BufferInit+0x28>)
10041eca:	2100      	movs	r1, #0
10041ecc:	5499      	strb	r1, [r3, r2]
	buffer.full = 0;
10041ece:	4b03      	ldr	r3, [pc, #12]	@ (10041edc <BLUETOOTH_BufferInit+0x24>)
10041ed0:	4a04      	ldr	r2, [pc, #16]	@ (10041ee4 <BLUETOOTH_BufferInit+0x2c>)
10041ed2:	2100      	movs	r1, #0
10041ed4:	5499      	strb	r1, [r3, r2]
}
10041ed6:	46c0      	nop			@ (mov r8, r8)
10041ed8:	46bd      	mov	sp, r7
10041eda:	bd80      	pop	{r7, pc}
10041edc:	20000194 	.word	0x20000194
10041ee0:	00000201 	.word	0x00000201
10041ee4:	00000202 	.word	0x00000202

10041ee8 <BLUETOOTH_WriteBuffer>:
 * @function: BLUETOOTH_WriteBuffer(uint8_t input)
 * @brief: places one character into the buffer for the external PC to read
 * @param: input: character to be placed in buffer
 * @return: none
 */
uint8_t BLUETOOTH_WriteBuffer(uint8_t input){
10041ee8:	b580      	push	{r7, lr}
10041eea:	b082      	sub	sp, #8
10041eec:	af00      	add	r7, sp, #0
10041eee:	0002      	movs	r2, r0
10041ef0:	1dfb      	adds	r3, r7, #7
10041ef2:	701a      	strb	r2, [r3, #0]
	if(!buffer.full){
10041ef4:	4b1f      	ldr	r3, [pc, #124]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041ef6:	4a20      	ldr	r2, [pc, #128]	@ (10041f78 <BLUETOOTH_WriteBuffer+0x90>)
10041ef8:	5c9b      	ldrb	r3, [r3, r2]
10041efa:	2b00      	cmp	r3, #0
10041efc:	d134      	bne.n	10041f68 <BLUETOOTH_WriteBuffer+0x80>
		buffer.data[buffer.head] = input;
10041efe:	4a1d      	ldr	r2, [pc, #116]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f00:	2380      	movs	r3, #128	@ 0x80
10041f02:	009b      	lsls	r3, r3, #2
10041f04:	5cd3      	ldrb	r3, [r2, r3]
10041f06:	0019      	movs	r1, r3
10041f08:	4b1a      	ldr	r3, [pc, #104]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f0a:	1dfa      	adds	r2, r7, #7
10041f0c:	7812      	ldrb	r2, [r2, #0]
10041f0e:	545a      	strb	r2, [r3, r1]
		buffer.head++;
10041f10:	4a18      	ldr	r2, [pc, #96]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f12:	2380      	movs	r3, #128	@ 0x80
10041f14:	009b      	lsls	r3, r3, #2
10041f16:	5cd3      	ldrb	r3, [r2, r3]
10041f18:	3301      	adds	r3, #1
10041f1a:	b2d9      	uxtb	r1, r3
10041f1c:	4a15      	ldr	r2, [pc, #84]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f1e:	2380      	movs	r3, #128	@ 0x80
10041f20:	009b      	lsls	r3, r3, #2
10041f22:	54d1      	strb	r1, [r2, r3]
		buffer.head %= BTBUFFERSIZE;
10041f24:	4a13      	ldr	r2, [pc, #76]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f26:	2380      	movs	r3, #128	@ 0x80
10041f28:	009b      	lsls	r3, r3, #2
10041f2a:	5cd1      	ldrb	r1, [r2, r3]
10041f2c:	4a11      	ldr	r2, [pc, #68]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f2e:	2380      	movs	r3, #128	@ 0x80
10041f30:	009b      	lsls	r3, r3, #2
10041f32:	54d1      	strb	r1, [r2, r3]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10041f34:	4a0f      	ldr	r2, [pc, #60]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f36:	2380      	movs	r3, #128	@ 0x80
10041f38:	009b      	lsls	r3, r3, #2
10041f3a:	5cd3      	ldrb	r3, [r2, r3]
10041f3c:	3301      	adds	r3, #1
10041f3e:	4a0f      	ldr	r2, [pc, #60]	@ (10041f7c <BLUETOOTH_WriteBuffer+0x94>)
10041f40:	4013      	ands	r3, r2
10041f42:	d503      	bpl.n	10041f4c <BLUETOOTH_WriteBuffer+0x64>
10041f44:	3b01      	subs	r3, #1
10041f46:	4a0e      	ldr	r2, [pc, #56]	@ (10041f80 <BLUETOOTH_WriteBuffer+0x98>)
10041f48:	4313      	orrs	r3, r2
10041f4a:	3301      	adds	r3, #1
10041f4c:	0019      	movs	r1, r3
10041f4e:	4b09      	ldr	r3, [pc, #36]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f50:	4a0c      	ldr	r2, [pc, #48]	@ (10041f84 <BLUETOOTH_WriteBuffer+0x9c>)
10041f52:	5c9b      	ldrb	r3, [r3, r2]
10041f54:	1acb      	subs	r3, r1, r3
10041f56:	425a      	negs	r2, r3
10041f58:	4153      	adcs	r3, r2
10041f5a:	b2db      	uxtb	r3, r3
10041f5c:	0019      	movs	r1, r3
10041f5e:	4b05      	ldr	r3, [pc, #20]	@ (10041f74 <BLUETOOTH_WriteBuffer+0x8c>)
10041f60:	4a05      	ldr	r2, [pc, #20]	@ (10041f78 <BLUETOOTH_WriteBuffer+0x90>)
10041f62:	5499      	strb	r1, [r3, r2]

		return 1;
10041f64:	2301      	movs	r3, #1
10041f66:	e000      	b.n	10041f6a <BLUETOOTH_WriteBuffer+0x82>
	} else {
		return 0;
10041f68:	2300      	movs	r3, #0
	}
}
10041f6a:	0018      	movs	r0, r3
10041f6c:	46bd      	mov	sp, r7
10041f6e:	b002      	add	sp, #8
10041f70:	bd80      	pop	{r7, pc}
10041f72:	46c0      	nop			@ (mov r8, r8)
10041f74:	20000194 	.word	0x20000194
10041f78:	00000202 	.word	0x00000202
10041f7c:	800001ff 	.word	0x800001ff
10041f80:	fffffe00 	.word	0xfffffe00
10041f84:	00000201 	.word	0x00000201

10041f88 <BLUETOOTH_ReadBuffer>:
 * @function: BLUETOOTH_ReadBuffer(uint8_t input)
 * @brief: returns a character from the buffer and removes it from the buffer
 * @param: none
 * @return: -1 if buffer empty, uint8_t character data if the buffer has data to return
 */
int16_t BLUETOOTH_ReadBuffer(){
10041f88:	b580      	push	{r7, lr}
10041f8a:	b082      	sub	sp, #8
10041f8c:	af00      	add	r7, sp, #0
	int16_t ret = -1;
10041f8e:	1dbb      	adds	r3, r7, #6
10041f90:	2201      	movs	r2, #1
10041f92:	4252      	negs	r2, r2
10041f94:	801a      	strh	r2, [r3, #0]
	if(buffer.head != buffer.tail || buffer.full){
10041f96:	4a21      	ldr	r2, [pc, #132]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041f98:	2380      	movs	r3, #128	@ 0x80
10041f9a:	009b      	lsls	r3, r3, #2
10041f9c:	5cd2      	ldrb	r2, [r2, r3]
10041f9e:	4b1f      	ldr	r3, [pc, #124]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fa0:	491f      	ldr	r1, [pc, #124]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fa2:	5c5b      	ldrb	r3, [r3, r1]
10041fa4:	429a      	cmp	r2, r3
10041fa6:	d104      	bne.n	10041fb2 <BLUETOOTH_ReadBuffer+0x2a>
10041fa8:	4b1c      	ldr	r3, [pc, #112]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041faa:	4a1e      	ldr	r2, [pc, #120]	@ (10042024 <BLUETOOTH_ReadBuffer+0x9c>)
10041fac:	5c9b      	ldrb	r3, [r3, r2]
10041fae:	2b00      	cmp	r3, #0
10041fb0:	d02d      	beq.n	1004200e <BLUETOOTH_ReadBuffer+0x86>

		ret = buffer.data[buffer.tail];
10041fb2:	4b1a      	ldr	r3, [pc, #104]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fb4:	4a1a      	ldr	r2, [pc, #104]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fb6:	5c9b      	ldrb	r3, [r3, r2]
10041fb8:	001a      	movs	r2, r3
10041fba:	4b18      	ldr	r3, [pc, #96]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fbc:	5c9a      	ldrb	r2, [r3, r2]
10041fbe:	1dbb      	adds	r3, r7, #6
10041fc0:	801a      	strh	r2, [r3, #0]
		buffer.tail++;
10041fc2:	4b16      	ldr	r3, [pc, #88]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fc4:	4a16      	ldr	r2, [pc, #88]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fc6:	5c9b      	ldrb	r3, [r3, r2]
10041fc8:	3301      	adds	r3, #1
10041fca:	b2d9      	uxtb	r1, r3
10041fcc:	4b13      	ldr	r3, [pc, #76]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fce:	4a14      	ldr	r2, [pc, #80]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fd0:	5499      	strb	r1, [r3, r2]
		buffer.tail %= BTBUFFERSIZE;
10041fd2:	4b12      	ldr	r3, [pc, #72]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fd4:	4a12      	ldr	r2, [pc, #72]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fd6:	5c99      	ldrb	r1, [r3, r2]
10041fd8:	4b10      	ldr	r3, [pc, #64]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fda:	4a11      	ldr	r2, [pc, #68]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041fdc:	5499      	strb	r1, [r3, r2]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10041fde:	4a0f      	ldr	r2, [pc, #60]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041fe0:	2380      	movs	r3, #128	@ 0x80
10041fe2:	009b      	lsls	r3, r3, #2
10041fe4:	5cd3      	ldrb	r3, [r2, r3]
10041fe6:	3301      	adds	r3, #1
10041fe8:	4a0f      	ldr	r2, [pc, #60]	@ (10042028 <BLUETOOTH_ReadBuffer+0xa0>)
10041fea:	4013      	ands	r3, r2
10041fec:	d503      	bpl.n	10041ff6 <BLUETOOTH_ReadBuffer+0x6e>
10041fee:	3b01      	subs	r3, #1
10041ff0:	4a0e      	ldr	r2, [pc, #56]	@ (1004202c <BLUETOOTH_ReadBuffer+0xa4>)
10041ff2:	4313      	orrs	r3, r2
10041ff4:	3301      	adds	r3, #1
10041ff6:	0019      	movs	r1, r3
10041ff8:	4b08      	ldr	r3, [pc, #32]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
10041ffa:	4a09      	ldr	r2, [pc, #36]	@ (10042020 <BLUETOOTH_ReadBuffer+0x98>)
10041ffc:	5c9b      	ldrb	r3, [r3, r2]
10041ffe:	1acb      	subs	r3, r1, r3
10042000:	425a      	negs	r2, r3
10042002:	4153      	adcs	r3, r2
10042004:	b2db      	uxtb	r3, r3
10042006:	0019      	movs	r1, r3
10042008:	4b04      	ldr	r3, [pc, #16]	@ (1004201c <BLUETOOTH_ReadBuffer+0x94>)
1004200a:	4a06      	ldr	r2, [pc, #24]	@ (10042024 <BLUETOOTH_ReadBuffer+0x9c>)
1004200c:	5499      	strb	r1, [r3, r2]
	}
	return ret;
1004200e:	1dbb      	adds	r3, r7, #6
10042010:	2200      	movs	r2, #0
10042012:	5e9b      	ldrsh	r3, [r3, r2]
}
10042014:	0018      	movs	r0, r3
10042016:	46bd      	mov	sp, r7
10042018:	b002      	add	sp, #8
1004201a:	bd80      	pop	{r7, pc}
1004201c:	20000194 	.word	0x20000194
10042020:	00000201 	.word	0x00000201
10042024:	00000202 	.word	0x00000202
10042028:	800001ff 	.word	0x800001ff
1004202c:	fffffe00 	.word	0xfffffe00

10042030 <BLUETOOTH_BufferEmpty>:
 * @function: BLUETOOTH_BufferEmpty()
 * @brief: returns if the buffer is empty or if the Bluetooth is disconnected
 * @param: none
 * @return: 0 if disconnected, 1 if connected and empty, 2 if connected and not empty
 */
uint8_t BLUETOOTH_BufferEmpty(){
10042030:	b580      	push	{r7, lr}
10042032:	af00      	add	r7, sp, #0
	return (buffer.head == buffer.tail && !buffer.full);
10042034:	4a0a      	ldr	r2, [pc, #40]	@ (10042060 <BLUETOOTH_BufferEmpty+0x30>)
10042036:	2380      	movs	r3, #128	@ 0x80
10042038:	009b      	lsls	r3, r3, #2
1004203a:	5cd2      	ldrb	r2, [r2, r3]
1004203c:	4b08      	ldr	r3, [pc, #32]	@ (10042060 <BLUETOOTH_BufferEmpty+0x30>)
1004203e:	4909      	ldr	r1, [pc, #36]	@ (10042064 <BLUETOOTH_BufferEmpty+0x34>)
10042040:	5c5b      	ldrb	r3, [r3, r1]
10042042:	429a      	cmp	r2, r3
10042044:	d106      	bne.n	10042054 <BLUETOOTH_BufferEmpty+0x24>
10042046:	4b06      	ldr	r3, [pc, #24]	@ (10042060 <BLUETOOTH_BufferEmpty+0x30>)
10042048:	4a07      	ldr	r2, [pc, #28]	@ (10042068 <BLUETOOTH_BufferEmpty+0x38>)
1004204a:	5c9b      	ldrb	r3, [r3, r2]
1004204c:	2b00      	cmp	r3, #0
1004204e:	d101      	bne.n	10042054 <BLUETOOTH_BufferEmpty+0x24>
10042050:	2301      	movs	r3, #1
10042052:	e000      	b.n	10042056 <BLUETOOTH_BufferEmpty+0x26>
10042054:	2300      	movs	r3, #0
10042056:	b2db      	uxtb	r3, r3
}
10042058:	0018      	movs	r0, r3
1004205a:	46bd      	mov	sp, r7
1004205c:	bd80      	pop	{r7, pc}
1004205e:	46c0      	nop			@ (mov r8, r8)
10042060:	20000194 	.word	0x20000194
10042064:	00000201 	.word	0x00000201
10042068:	00000202 	.word	0x00000202

1004206c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
1004206c:	b590      	push	{r4, r7, lr}
1004206e:	b089      	sub	sp, #36	@ 0x24
10042070:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10042072:	2408      	movs	r4, #8
10042074:	193b      	adds	r3, r7, r4
10042076:	0018      	movs	r0, r3
10042078:	2318      	movs	r3, #24
1004207a:	001a      	movs	r2, r3
1004207c:	2100      	movs	r1, #0
1004207e:	f025 fee7 	bl	10067e50 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10042082:	003b      	movs	r3, r7
10042084:	0018      	movs	r0, r3
10042086:	2308      	movs	r3, #8
10042088:	001a      	movs	r2, r3
1004208a:	2100      	movs	r1, #0
1004208c:	f025 fee0 	bl	10067e50 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
10042090:	193b      	adds	r3, r7, r4
10042092:	2205      	movs	r2, #5
10042094:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10042096:	193b      	adds	r3, r7, r4
10042098:	2280      	movs	r2, #128	@ 0x80
1004209a:	0252      	lsls	r2, r2, #9
1004209c:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
1004209e:	193b      	adds	r3, r7, r4
100420a0:	2204      	movs	r2, #4
100420a2:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100420a4:	193b      	adds	r3, r7, r4
100420a6:	0018      	movs	r0, r3
100420a8:	f00a ff6c 	bl	1004cf84 <HAL_RCC_OscConfig>
100420ac:	1e03      	subs	r3, r0, #0
100420ae:	d001      	beq.n	100420b4 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
100420b0:	2300      	movs	r3, #0
100420b2:	e00f      	b.n	100420d4 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
100420b4:	003b      	movs	r3, r7
100420b6:	2200      	movs	r2, #0
100420b8:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
100420ba:	003b      	movs	r3, r7
100420bc:	2200      	movs	r2, #0
100420be:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
100420c0:	003b      	movs	r3, r7
100420c2:	2110      	movs	r1, #16
100420c4:	0018      	movs	r0, r3
100420c6:	f00b f8a7 	bl	1004d218 <HAL_RCC_ClockConfig>
100420ca:	1e03      	subs	r3, r0, #0
100420cc:	d001      	beq.n	100420d2 <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
100420ce:	2300      	movs	r3, #0
100420d0:	e000      	b.n	100420d4 <SystemClock_Config+0x68>
	}
	return INIT_OK;
100420d2:	2301      	movs	r3, #1
}
100420d4:	0018      	movs	r0, r3
100420d6:	46bd      	mov	sp, r7
100420d8:	b009      	add	sp, #36	@ 0x24
100420da:	bd90      	pop	{r4, r7, pc}

100420dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
100420dc:	b580      	push	{r7, lr}
100420de:	b086      	sub	sp, #24
100420e0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100420e2:	003b      	movs	r3, r7
100420e4:	0018      	movs	r0, r3
100420e6:	2318      	movs	r3, #24
100420e8:	001a      	movs	r2, r3
100420ea:	2100      	movs	r1, #0
100420ec:	f025 feb0 	bl	10067e50 <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
100420f0:	003b      	movs	r3, r7
100420f2:	2202      	movs	r2, #2
100420f4:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
100420f6:	003b      	movs	r3, r7
100420f8:	2280      	movs	r2, #128	@ 0x80
100420fa:	0152      	lsls	r2, r2, #5
100420fc:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100420fe:	003b      	movs	r3, r7
10042100:	0018      	movs	r0, r3
10042102:	f00b fa1f 	bl	1004d544 <HAL_RCCEx_PeriphCLKConfig>
10042106:	1e03      	subs	r3, r0, #0
10042108:	d001      	beq.n	1004210e <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
1004210a:	2300      	movs	r3, #0
1004210c:	e000      	b.n	10042110 <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
1004210e:	2301      	movs	r3, #1
}
10042110:	0018      	movs	r0, r3
10042112:	46bd      	mov	sp, r7
10042114:	b006      	add	sp, #24
10042116:	bd80      	pop	{r7, pc}

10042118 <BOARD_Init>:
 * @function: BOARD_Init()
 * @brief: initialize the board's timers
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int BOARD_Init(void){
10042118:	b580      	push	{r7, lr}
1004211a:	b082      	sub	sp, #8
1004211c:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
1004211e:	4b0f      	ldr	r3, [pc, #60]	@ (1004215c <BOARD_Init+0x44>)
10042120:	781b      	ldrb	r3, [r3, #0]
10042122:	2b00      	cmp	r3, #0
10042124:	d001      	beq.n	1004212a <BOARD_Init+0x12>
10042126:	2301      	movs	r3, #1
10042128:	e013      	b.n	10042152 <BOARD_Init+0x3a>
	HAL_Init();
1004212a:	f005 fd95 	bl	10047c58 <HAL_Init>
	int errorFlag = INIT_OK;
1004212e:	2301      	movs	r3, #1
10042130:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
10042132:	f7ff ffd3 	bl	100420dc <PeriphCommonClock_Config>
10042136:	1e03      	subs	r3, r0, #0
10042138:	d101      	bne.n	1004213e <BOARD_Init+0x26>
		errorFlag = INIT_ERROR;
1004213a:	2300      	movs	r3, #0
1004213c:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
1004213e:	f7ff ff95 	bl	1004206c <SystemClock_Config>
10042142:	1e03      	subs	r3, r0, #0
10042144:	d101      	bne.n	1004214a <BOARD_Init+0x32>
		errorFlag = INIT_ERROR;
10042146:	2300      	movs	r3, #0
10042148:	607b      	str	r3, [r7, #4]
	}
	initialized = 1;
1004214a:	4b04      	ldr	r3, [pc, #16]	@ (1004215c <BOARD_Init+0x44>)
1004214c:	2201      	movs	r2, #1
1004214e:	701a      	strb	r2, [r3, #0]
	return errorFlag;
10042150:	687b      	ldr	r3, [r7, #4]
}
10042152:	0018      	movs	r0, r3
10042154:	46bd      	mov	sp, r7
10042156:	b002      	add	sp, #8
10042158:	bd80      	pop	{r7, pc}
1004215a:	46c0      	nop			@ (mov r8, r8)
1004215c:	20000397 	.word	0x20000397

10042160 <BOARD_CrashHandler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void BOARD_CrashHandler(void)
{
10042160:	b580      	push	{r7, lr}
10042162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10042164:	b672      	cpsid	i
}
10042166:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
10042168:	46c0      	nop			@ (mov r8, r8)
1004216a:	e7fd      	b.n	10042168 <BOARD_CrashHandler+0x8>

1004216c <Error_Handler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void Error_Handler(void)
{
1004216c:	b580      	push	{r7, lr}
1004216e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10042170:	b672      	cpsid	i
}
10042172:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10042174:	46c0      	nop			@ (mov r8, r8)
10042176:	e7fd      	b.n	10042174 <Error_Handler+0x8>

10042178 <DrawMain>:
static uint8_t dayselect;
static uint8_t Stimeselect;
static uint8_t Etimeselect;
//----------------------------------------Private Functions--------------------------------------

void DrawMain(){
10042178:	b5b0      	push	{r4, r5, r7, lr}
1004217a:	b0b2      	sub	sp, #200	@ 0xc8
1004217c:	af06      	add	r7, sp, #24
					  "Back:play track\n"
			   	   	  "Sel:append schedule\n"
	   	   	  	  	  "%c:Set Date/time\n"
					  "%c:more options\n"
					  "Volume: %c%.3d%c\n"
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
1004217e:	f002 fbb7 	bl	100448f0 <FLASH_GetVolume>
10042182:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10042184:	001c      	movs	r4, r3
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10042186:	f003 feed 	bl	10045f64 <MP3_GetCurrentFile>
1004218a:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
1004218c:	0a1b      	lsrs	r3, r3, #8
1004218e:	b29b      	uxth	r3, r3
10042190:	001d      	movs	r5, r3
					  "Current song %d-%d",DOWN_ARROW_OFF, UP_ARROW_OFF, LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON, MP3_GetCurrentFile()>>8, MP3_GetCurrentFile()&0xFF);
10042192:	f003 fee7 	bl	10045f64 <MP3_GetCurrentFile>
10042196:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10042198:	001a      	movs	r2, r3
1004219a:	23ff      	movs	r3, #255	@ 0xff
1004219c:	4013      	ands	r3, r2
1004219e:	490d      	ldr	r1, [pc, #52]	@ (100421d4 <DrawMain+0x5c>)
100421a0:	0038      	movs	r0, r7
100421a2:	9304      	str	r3, [sp, #16]
100421a4:	9503      	str	r5, [sp, #12]
100421a6:	2308      	movs	r3, #8
100421a8:	9302      	str	r3, [sp, #8]
100421aa:	9401      	str	r4, [sp, #4]
100421ac:	2306      	movs	r3, #6
100421ae:	9300      	str	r3, [sp, #0]
100421b0:	2301      	movs	r3, #1
100421b2:	2203      	movs	r2, #3
100421b4:	f025 fd30 	bl	10067c18 <siprintf>
	OledClear(OLED_COLOR_BLACK);
100421b8:	2000      	movs	r0, #0
100421ba:	f004 f81b 	bl	100461f4 <OledClear>
	OledDrawString(maintext);
100421be:	003b      	movs	r3, r7
100421c0:	0018      	movs	r0, r3
100421c2:	f003 ffcd 	bl	10046160 <OledDrawString>
	OledUpdate();
100421c6:	f004 f84b 	bl	10046260 <OledUpdate>
}
100421ca:	46c0      	nop			@ (mov r8, r8)
100421cc:	46bd      	mov	sp, r7
100421ce:	b02c      	add	sp, #176	@ 0xb0
100421d0:	bdb0      	pop	{r4, r5, r7, pc}
100421d2:	46c0      	nop			@ (mov r8, r8)
100421d4:	10068c88 	.word	0x10068c88

100421d8 <DrawFolder>:

void DrawFolder(uint8_t cursor, uint8_t folder, uint8_t track){
100421d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100421da:	b09d      	sub	sp, #116	@ 0x74
100421dc:	af04      	add	r7, sp, #16
100421de:	0004      	movs	r4, r0
100421e0:	0008      	movs	r0, r1
100421e2:	0011      	movs	r1, r2
100421e4:	1dfb      	adds	r3, r7, #7
100421e6:	1c22      	adds	r2, r4, #0
100421e8:	701a      	strb	r2, [r3, #0]
100421ea:	1dbb      	adds	r3, r7, #6
100421ec:	1c02      	adds	r2, r0, #0
100421ee:	701a      	strb	r2, [r3, #0]
100421f0:	1d7b      	adds	r3, r7, #5
100421f2:	1c0a      	adds	r2, r1, #0
100421f4:	701a      	strb	r2, [r3, #0]

	char folderselectstring[88];
	sprintf(folderselectstring, "Select Folder\n"
100421f6:	1dfb      	adds	r3, r7, #7
100421f8:	781b      	ldrb	r3, [r3, #0]
100421fa:	2b00      	cmp	r3, #0
100421fc:	d101      	bne.n	10042202 <DrawFolder+0x2a>
100421fe:	2102      	movs	r1, #2
10042200:	e000      	b.n	10042204 <DrawFolder+0x2c>
10042202:	2101      	movs	r1, #1
10042204:	1dfb      	adds	r3, r7, #7
10042206:	781b      	ldrb	r3, [r3, #0]
10042208:	2b00      	cmp	r3, #0
1004220a:	d001      	beq.n	10042210 <DrawFolder+0x38>
1004220c:	2002      	movs	r0, #2
1004220e:	e000      	b.n	10042212 <DrawFolder+0x3a>
10042210:	2001      	movs	r0, #1
10042212:	1dbb      	adds	r3, r7, #6
10042214:	781c      	ldrb	r4, [r3, #0]
10042216:	1d7b      	adds	r3, r7, #5
10042218:	781d      	ldrb	r5, [r3, #0]
1004221a:	1dfb      	adds	r3, r7, #7
1004221c:	781b      	ldrb	r3, [r3, #0]
1004221e:	2b00      	cmp	r3, #0
10042220:	d101      	bne.n	10042226 <DrawFolder+0x4e>
10042222:	2304      	movs	r3, #4
10042224:	e000      	b.n	10042228 <DrawFolder+0x50>
10042226:	2303      	movs	r3, #3
10042228:	1dfa      	adds	r2, r7, #7
1004222a:	7812      	ldrb	r2, [r2, #0]
1004222c:	2a00      	cmp	r2, #0
1004222e:	d001      	beq.n	10042234 <DrawFolder+0x5c>
10042230:	2204      	movs	r2, #4
10042232:	e000      	b.n	10042236 <DrawFolder+0x5e>
10042234:	2203      	movs	r2, #3
10042236:	4e0e      	ldr	r6, [pc, #56]	@ (10042270 <DrawFolder+0x98>)
10042238:	46b4      	mov	ip, r6
1004223a:	2608      	movs	r6, #8
1004223c:	19be      	adds	r6, r7, r6
1004223e:	9203      	str	r2, [sp, #12]
10042240:	9302      	str	r3, [sp, #8]
10042242:	9501      	str	r5, [sp, #4]
10042244:	9400      	str	r4, [sp, #0]
10042246:	0003      	movs	r3, r0
10042248:	000a      	movs	r2, r1
1004224a:	4661      	mov	r1, ip
1004224c:	0030      	movs	r0, r6
1004224e:	f025 fce3 	bl	10067c18 <siprintf>
			                    "Folder: %d Track: %d\n"
			                    "        %c        %c\n",
								!cursor?UP_ARROW_ON:UP_ARROW_OFF, cursor?UP_ARROW_ON:UP_ARROW_OFF,
								folder, track,
								!cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF, cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
10042252:	2000      	movs	r0, #0
10042254:	f003 ffce 	bl	100461f4 <OledClear>
	OledDrawString(folderselectstring);
10042258:	2608      	movs	r6, #8
1004225a:	19bb      	adds	r3, r7, r6
1004225c:	0018      	movs	r0, r3
1004225e:	f003 ff7f 	bl	10046160 <OledDrawString>
	OledUpdate();
10042262:	f003 fffd 	bl	10046260 <OledUpdate>
}
10042266:	46c0      	nop			@ (mov r8, r8)
10042268:	46bd      	mov	sp, r7
1004226a:	b019      	add	sp, #100	@ 0x64
1004226c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004226e:	46c0      	nop			@ (mov r8, r8)
10042270:	10068cfc 	.word	0x10068cfc

10042274 <DrawOptions>:

void DrawOptions(uint8_t cursor, uint8_t dutycycle){
10042274:	b5f0      	push	{r4, r5, r6, r7, lr}
10042276:	46c6      	mov	lr, r8
10042278:	b500      	push	{lr}
1004227a:	b09e      	sub	sp, #120	@ 0x78
1004227c:	af06      	add	r7, sp, #24
1004227e:	0002      	movs	r2, r0
10042280:	1dfb      	adds	r3, r7, #7
10042282:	701a      	strb	r2, [r3, #0]
10042284:	1dbb      	adds	r3, r7, #6
10042286:	1c0a      	adds	r2, r1, #0
10042288:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
	sprintf(folderselectstring, "Options\n"
1004228a:	1dfb      	adds	r3, r7, #7
1004228c:	781b      	ldrb	r3, [r3, #0]
1004228e:	2b00      	cmp	r3, #0
10042290:	d101      	bne.n	10042296 <DrawOptions+0x22>
10042292:	2506      	movs	r5, #6
10042294:	e000      	b.n	10042298 <DrawOptions+0x24>
10042296:	2505      	movs	r5, #5
10042298:	1dbb      	adds	r3, r7, #6
1004229a:	781b      	ldrb	r3, [r3, #0]
1004229c:	4698      	mov	r8, r3
1004229e:	1dfb      	adds	r3, r7, #7
100422a0:	781b      	ldrb	r3, [r3, #0]
100422a2:	2b00      	cmp	r3, #0
100422a4:	d101      	bne.n	100422aa <DrawOptions+0x36>
100422a6:	2308      	movs	r3, #8
100422a8:	e000      	b.n	100422ac <DrawOptions+0x38>
100422aa:	2307      	movs	r3, #7
100422ac:	1dfa      	adds	r2, r7, #7
100422ae:	7812      	ldrb	r2, [r2, #0]
100422b0:	2a01      	cmp	r2, #1
100422b2:	d101      	bne.n	100422b8 <DrawOptions+0x44>
100422b4:	2206      	movs	r2, #6
100422b6:	e000      	b.n	100422ba <DrawOptions+0x46>
100422b8:	2205      	movs	r2, #5
100422ba:	1df9      	adds	r1, r7, #7
100422bc:	7809      	ldrb	r1, [r1, #0]
100422be:	2901      	cmp	r1, #1
100422c0:	d101      	bne.n	100422c6 <DrawOptions+0x52>
100422c2:	2108      	movs	r1, #8
100422c4:	e000      	b.n	100422c8 <DrawOptions+0x54>
100422c6:	2107      	movs	r1, #7
100422c8:	1df8      	adds	r0, r7, #7
100422ca:	7800      	ldrb	r0, [r0, #0]
100422cc:	2802      	cmp	r0, #2
100422ce:	d101      	bne.n	100422d4 <DrawOptions+0x60>
100422d0:	2008      	movs	r0, #8
100422d2:	e000      	b.n	100422d6 <DrawOptions+0x62>
100422d4:	2007      	movs	r0, #7
100422d6:	1dfc      	adds	r4, r7, #7
100422d8:	7824      	ldrb	r4, [r4, #0]
100422da:	2c02      	cmp	r4, #2
100422dc:	d101      	bne.n	100422e2 <DrawOptions+0x6e>
100422de:	2406      	movs	r4, #6
100422e0:	e000      	b.n	100422e4 <DrawOptions+0x70>
100422e2:	2405      	movs	r4, #5
100422e4:	4e0f      	ldr	r6, [pc, #60]	@ (10042324 <DrawOptions+0xb0>)
100422e6:	46b4      	mov	ip, r6
100422e8:	2608      	movs	r6, #8
100422ea:	19be      	adds	r6, r7, r6
100422ec:	9404      	str	r4, [sp, #16]
100422ee:	9003      	str	r0, [sp, #12]
100422f0:	9102      	str	r1, [sp, #8]
100422f2:	9201      	str	r2, [sp, #4]
100422f4:	9300      	str	r3, [sp, #0]
100422f6:	4643      	mov	r3, r8
100422f8:	002a      	movs	r2, r5
100422fa:	4661      	mov	r1, ip
100422fc:	0030      	movs	r0, r6
100422fe:	f025 fc8b 	bl	10067c18 <siprintf>
								" Song:%c%c\n"
								"%cClear Schedule%c",
								0==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF, dutycycle,0==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								1==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF,           1==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								2==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF, 		  2==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
10042302:	2000      	movs	r0, #0
10042304:	f003 ff76 	bl	100461f4 <OledClear>
	OledDrawString(folderselectstring);
10042308:	2608      	movs	r6, #8
1004230a:	19bb      	adds	r3, r7, r6
1004230c:	0018      	movs	r0, r3
1004230e:	f003 ff27 	bl	10046160 <OledDrawString>
	OledUpdate();
10042312:	f003 ffa5 	bl	10046260 <OledUpdate>

}
10042316:	46c0      	nop			@ (mov r8, r8)
10042318:	46bd      	mov	sp, r7
1004231a:	b018      	add	sp, #96	@ 0x60
1004231c:	bc80      	pop	{r7}
1004231e:	46b8      	mov	r8, r7
10042320:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042322:	46c0      	nop			@ (mov r8, r8)
10042324:	10068d4c 	.word	0x10068d4c

10042328 <DrawSetTime>:

void DrawSetTime(uint8_t cursor, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute){
10042328:	b5f0      	push	{r4, r5, r6, r7, lr}
1004232a:	46de      	mov	lr, fp
1004232c:	4657      	mov	r7, sl
1004232e:	464e      	mov	r6, r9
10042330:	4645      	mov	r5, r8
10042332:	b5e0      	push	{r5, r6, r7, lr}
10042334:	b0a5      	sub	sp, #148	@ 0x94
10042336:	af0a      	add	r7, sp, #40	@ 0x28
10042338:	0005      	movs	r5, r0
1004233a:	000c      	movs	r4, r1
1004233c:	0010      	movs	r0, r2
1004233e:	0019      	movs	r1, r3
10042340:	260f      	movs	r6, #15
10042342:	19bb      	adds	r3, r7, r6
10042344:	1c2a      	adds	r2, r5, #0
10042346:	701a      	strb	r2, [r3, #0]
10042348:	230e      	movs	r3, #14
1004234a:	18fb      	adds	r3, r7, r3
1004234c:	1c22      	adds	r2, r4, #0
1004234e:	701a      	strb	r2, [r3, #0]
10042350:	230d      	movs	r3, #13
10042352:	18fb      	adds	r3, r7, r3
10042354:	1c02      	adds	r2, r0, #0
10042356:	701a      	strb	r2, [r3, #0]
10042358:	230c      	movs	r3, #12
1004235a:	18fb      	adds	r3, r7, r3
1004235c:	1c0a      	adds	r2, r1, #0
1004235e:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
#define TOPCHAR cursor?UP_ARROW_ON:UP_ARROW_OFF
#define BOTCHAR cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF
	sprintf(folderselectstring, "Set Date/Time\n"
10042360:	19bb      	adds	r3, r7, r6
10042362:	781b      	ldrb	r3, [r3, #0]
10042364:	2b00      	cmp	r3, #0
10042366:	d102      	bne.n	1004236e <DrawSetTime+0x46>
10042368:	2302      	movs	r3, #2
1004236a:	469c      	mov	ip, r3
1004236c:	e001      	b.n	10042372 <DrawSetTime+0x4a>
1004236e:	2301      	movs	r3, #1
10042370:	469c      	mov	ip, r3
10042372:	230f      	movs	r3, #15
10042374:	18fb      	adds	r3, r7, r3
10042376:	781b      	ldrb	r3, [r3, #0]
10042378:	2b01      	cmp	r3, #1
1004237a:	d102      	bne.n	10042382 <DrawSetTime+0x5a>
1004237c:	2302      	movs	r3, #2
1004237e:	4698      	mov	r8, r3
10042380:	e001      	b.n	10042386 <DrawSetTime+0x5e>
10042382:	2301      	movs	r3, #1
10042384:	4698      	mov	r8, r3
10042386:	230f      	movs	r3, #15
10042388:	18fb      	adds	r3, r7, r3
1004238a:	781b      	ldrb	r3, [r3, #0]
1004238c:	2b02      	cmp	r3, #2
1004238e:	d101      	bne.n	10042394 <DrawSetTime+0x6c>
10042390:	2202      	movs	r2, #2
10042392:	e000      	b.n	10042396 <DrawSetTime+0x6e>
10042394:	2201      	movs	r2, #1
10042396:	230f      	movs	r3, #15
10042398:	18fb      	adds	r3, r7, r3
1004239a:	781b      	ldrb	r3, [r3, #0]
1004239c:	2b03      	cmp	r3, #3
1004239e:	d101      	bne.n	100423a4 <DrawSetTime+0x7c>
100423a0:	2102      	movs	r1, #2
100423a2:	e000      	b.n	100423a6 <DrawSetTime+0x7e>
100423a4:	2101      	movs	r1, #1
100423a6:	230e      	movs	r3, #14
100423a8:	18fb      	adds	r3, r7, r3
100423aa:	781b      	ldrb	r3, [r3, #0]
100423ac:	4699      	mov	r9, r3
100423ae:	230d      	movs	r3, #13
100423b0:	18fb      	adds	r3, r7, r3
100423b2:	781b      	ldrb	r3, [r3, #0]
100423b4:	469a      	mov	sl, r3
100423b6:	230c      	movs	r3, #12
100423b8:	18fb      	adds	r3, r7, r3
100423ba:	781b      	ldrb	r3, [r3, #0]
100423bc:	469b      	mov	fp, r3
100423be:	2388      	movs	r3, #136	@ 0x88
100423c0:	2008      	movs	r0, #8
100423c2:	181b      	adds	r3, r3, r0
100423c4:	19db      	adds	r3, r3, r7
100423c6:	781b      	ldrb	r3, [r3, #0]
100423c8:	60bb      	str	r3, [r7, #8]
100423ca:	230f      	movs	r3, #15
100423cc:	18fb      	adds	r3, r7, r3
100423ce:	781b      	ldrb	r3, [r3, #0]
100423d0:	2b00      	cmp	r3, #0
100423d2:	d101      	bne.n	100423d8 <DrawSetTime+0xb0>
100423d4:	2404      	movs	r4, #4
100423d6:	e000      	b.n	100423da <DrawSetTime+0xb2>
100423d8:	2403      	movs	r4, #3
100423da:	230f      	movs	r3, #15
100423dc:	18fb      	adds	r3, r7, r3
100423de:	781b      	ldrb	r3, [r3, #0]
100423e0:	2b01      	cmp	r3, #1
100423e2:	d101      	bne.n	100423e8 <DrawSetTime+0xc0>
100423e4:	2504      	movs	r5, #4
100423e6:	e000      	b.n	100423ea <DrawSetTime+0xc2>
100423e8:	2503      	movs	r5, #3
100423ea:	230f      	movs	r3, #15
100423ec:	18fb      	adds	r3, r7, r3
100423ee:	781b      	ldrb	r3, [r3, #0]
100423f0:	2b02      	cmp	r3, #2
100423f2:	d101      	bne.n	100423f8 <DrawSetTime+0xd0>
100423f4:	2604      	movs	r6, #4
100423f6:	e000      	b.n	100423fa <DrawSetTime+0xd2>
100423f8:	2603      	movs	r6, #3
100423fa:	230f      	movs	r3, #15
100423fc:	18fb      	adds	r3, r7, r3
100423fe:	781b      	ldrb	r3, [r3, #0]
10042400:	2b03      	cmp	r3, #3
10042402:	d102      	bne.n	1004240a <DrawSetTime+0xe2>
10042404:	2304      	movs	r3, #4
10042406:	603b      	str	r3, [r7, #0]
10042408:	e001      	b.n	1004240e <DrawSetTime+0xe6>
1004240a:	2303      	movs	r3, #3
1004240c:	603b      	str	r3, [r7, #0]
1004240e:	4817      	ldr	r0, [pc, #92]	@ (1004246c <DrawSetTime+0x144>)
10042410:	6078      	str	r0, [r7, #4]
10042412:	2008      	movs	r0, #8
10042414:	2308      	movs	r3, #8
10042416:	18c0      	adds	r0, r0, r3
10042418:	19c0      	adds	r0, r0, r7
1004241a:	683b      	ldr	r3, [r7, #0]
1004241c:	9309      	str	r3, [sp, #36]	@ 0x24
1004241e:	9608      	str	r6, [sp, #32]
10042420:	9507      	str	r5, [sp, #28]
10042422:	9406      	str	r4, [sp, #24]
10042424:	68bb      	ldr	r3, [r7, #8]
10042426:	9305      	str	r3, [sp, #20]
10042428:	465b      	mov	r3, fp
1004242a:	9304      	str	r3, [sp, #16]
1004242c:	4653      	mov	r3, sl
1004242e:	9303      	str	r3, [sp, #12]
10042430:	464b      	mov	r3, r9
10042432:	9302      	str	r3, [sp, #8]
10042434:	9101      	str	r1, [sp, #4]
10042436:	9200      	str	r2, [sp, #0]
10042438:	4643      	mov	r3, r8
1004243a:	4662      	mov	r2, ip
1004243c:	6879      	ldr	r1, [r7, #4]
1004243e:	f025 fbeb 	bl	10067c18 <siprintf>
								"%.2d/%.2d %.2d:%.2d\n"
								" %c  %c  %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR,
								month, day, hour, minute,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
10042442:	2000      	movs	r0, #0
10042444:	f003 fed6 	bl	100461f4 <OledClear>
	OledDrawString(folderselectstring);
10042448:	2008      	movs	r0, #8
1004244a:	2308      	movs	r3, #8
1004244c:	18c3      	adds	r3, r0, r3
1004244e:	19db      	adds	r3, r3, r7
10042450:	0018      	movs	r0, r3
10042452:	f003 fe85 	bl	10046160 <OledDrawString>
	OledUpdate();
10042456:	f003 ff03 	bl	10046260 <OledUpdate>

}
1004245a:	46c0      	nop			@ (mov r8, r8)
1004245c:	46bd      	mov	sp, r7
1004245e:	b01b      	add	sp, #108	@ 0x6c
10042460:	bcf0      	pop	{r4, r5, r6, r7}
10042462:	46bb      	mov	fp, r7
10042464:	46b2      	mov	sl, r6
10042466:	46a9      	mov	r9, r5
10042468:	46a0      	mov	r8, r4
1004246a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004246c:	10068d88 	.word	0x10068d88

10042470 <DrawSchedule>:

void DrawSchedule(uint8_t cursor, uint8_t month, uint8_t day, uint8_t start, uint8_t end){
10042470:	b5f0      	push	{r4, r5, r6, r7, lr}
10042472:	46de      	mov	lr, fp
10042474:	4657      	mov	r7, sl
10042476:	464e      	mov	r6, r9
10042478:	4645      	mov	r5, r8
1004247a:	b5e0      	push	{r5, r6, r7, lr}
1004247c:	b0b3      	sub	sp, #204	@ 0xcc
1004247e:	af10      	add	r7, sp, #64	@ 0x40
10042480:	0005      	movs	r5, r0
10042482:	000c      	movs	r4, r1
10042484:	0010      	movs	r0, r2
10042486:	0019      	movs	r1, r3
10042488:	2627      	movs	r6, #39	@ 0x27
1004248a:	19bb      	adds	r3, r7, r6
1004248c:	1c2a      	adds	r2, r5, #0
1004248e:	701a      	strb	r2, [r3, #0]
10042490:	2326      	movs	r3, #38	@ 0x26
10042492:	18fb      	adds	r3, r7, r3
10042494:	1c22      	adds	r2, r4, #0
10042496:	701a      	strb	r2, [r3, #0]
10042498:	2325      	movs	r3, #37	@ 0x25
1004249a:	18fb      	adds	r3, r7, r3
1004249c:	1c02      	adds	r2, r0, #0
1004249e:	701a      	strb	r2, [r3, #0]
100424a0:	2024      	movs	r0, #36	@ 0x24
100424a2:	183b      	adds	r3, r7, r0
100424a4:	1c0a      	adds	r2, r1, #0
100424a6:	701a      	strb	r2, [r3, #0]
	char folderselectstring[92];
	uint8_t hour1 = (start&0b11111000)>>3;
100424a8:	2367      	movs	r3, #103	@ 0x67
100424aa:	2120      	movs	r1, #32
100424ac:	185b      	adds	r3, r3, r1
100424ae:	19db      	adds	r3, r3, r7
100424b0:	183a      	adds	r2, r7, r0
100424b2:	7812      	ldrb	r2, [r2, #0]
100424b4:	08d2      	lsrs	r2, r2, #3
100424b6:	701a      	strb	r2, [r3, #0]
	uint8_t minute1 = ((start & 0b011)*15);
100424b8:	183b      	adds	r3, r7, r0
100424ba:	781b      	ldrb	r3, [r3, #0]
100424bc:	2203      	movs	r2, #3
100424be:	4013      	ands	r3, r2
100424c0:	b2da      	uxtb	r2, r3
100424c2:	2366      	movs	r3, #102	@ 0x66
100424c4:	0008      	movs	r0, r1
100424c6:	185b      	adds	r3, r3, r1
100424c8:	19db      	adds	r3, r3, r7
100424ca:	1c11      	adds	r1, r2, #0
100424cc:	0109      	lsls	r1, r1, #4
100424ce:	1a8a      	subs	r2, r1, r2
100424d0:	701a      	strb	r2, [r3, #0]
	uint8_t hour2 = (end&0b11111000)>>3;
100424d2:	2365      	movs	r3, #101	@ 0x65
100424d4:	181b      	adds	r3, r3, r0
100424d6:	19da      	adds	r2, r3, r7
100424d8:	2190      	movs	r1, #144	@ 0x90
100424da:	180b      	adds	r3, r1, r0
100424dc:	19db      	adds	r3, r3, r7
100424de:	781b      	ldrb	r3, [r3, #0]
100424e0:	08db      	lsrs	r3, r3, #3
100424e2:	7013      	strb	r3, [r2, #0]
	uint8_t minute2 = ((end & 0b011)*15);
100424e4:	180b      	adds	r3, r1, r0
100424e6:	19db      	adds	r3, r3, r7
100424e8:	781b      	ldrb	r3, [r3, #0]
100424ea:	2203      	movs	r2, #3
100424ec:	4013      	ands	r3, r2
100424ee:	b2da      	uxtb	r2, r3
100424f0:	2364      	movs	r3, #100	@ 0x64
100424f2:	181b      	adds	r3, r3, r0
100424f4:	19db      	adds	r3, r3, r7
100424f6:	1c11      	adds	r1, r2, #0
100424f8:	0109      	lsls	r1, r1, #4
100424fa:	1a8a      	subs	r2, r1, r2
100424fc:	701a      	strb	r2, [r3, #0]
	sprintf(folderselectstring, "Schedule time to play\n"
100424fe:	19bb      	adds	r3, r7, r6
10042500:	781b      	ldrb	r3, [r3, #0]
10042502:	2b00      	cmp	r3, #0
10042504:	d102      	bne.n	1004250c <DrawSchedule+0x9c>
10042506:	2302      	movs	r3, #2
10042508:	623b      	str	r3, [r7, #32]
1004250a:	e001      	b.n	10042510 <DrawSchedule+0xa0>
1004250c:	2301      	movs	r3, #1
1004250e:	623b      	str	r3, [r7, #32]
10042510:	2327      	movs	r3, #39	@ 0x27
10042512:	18fb      	adds	r3, r7, r3
10042514:	781b      	ldrb	r3, [r3, #0]
10042516:	2b01      	cmp	r3, #1
10042518:	d102      	bne.n	10042520 <DrawSchedule+0xb0>
1004251a:	2302      	movs	r3, #2
1004251c:	61fb      	str	r3, [r7, #28]
1004251e:	e001      	b.n	10042524 <DrawSchedule+0xb4>
10042520:	2301      	movs	r3, #1
10042522:	61fb      	str	r3, [r7, #28]
10042524:	2327      	movs	r3, #39	@ 0x27
10042526:	18fb      	adds	r3, r7, r3
10042528:	781b      	ldrb	r3, [r3, #0]
1004252a:	2b02      	cmp	r3, #2
1004252c:	d102      	bne.n	10042534 <DrawSchedule+0xc4>
1004252e:	2302      	movs	r3, #2
10042530:	4698      	mov	r8, r3
10042532:	e001      	b.n	10042538 <DrawSchedule+0xc8>
10042534:	2301      	movs	r3, #1
10042536:	4698      	mov	r8, r3
10042538:	2327      	movs	r3, #39	@ 0x27
1004253a:	18fb      	adds	r3, r7, r3
1004253c:	781b      	ldrb	r3, [r3, #0]
1004253e:	2b03      	cmp	r3, #3
10042540:	d102      	bne.n	10042548 <DrawSchedule+0xd8>
10042542:	2302      	movs	r3, #2
10042544:	4699      	mov	r9, r3
10042546:	e001      	b.n	1004254c <DrawSchedule+0xdc>
10042548:	2301      	movs	r3, #1
1004254a:	4699      	mov	r9, r3
1004254c:	2327      	movs	r3, #39	@ 0x27
1004254e:	18fb      	adds	r3, r7, r3
10042550:	781b      	ldrb	r3, [r3, #0]
10042552:	2b04      	cmp	r3, #4
10042554:	d102      	bne.n	1004255c <DrawSchedule+0xec>
10042556:	2302      	movs	r3, #2
10042558:	469a      	mov	sl, r3
1004255a:	e001      	b.n	10042560 <DrawSchedule+0xf0>
1004255c:	2301      	movs	r3, #1
1004255e:	469a      	mov	sl, r3
10042560:	2327      	movs	r3, #39	@ 0x27
10042562:	18fb      	adds	r3, r7, r3
10042564:	781b      	ldrb	r3, [r3, #0]
10042566:	2b05      	cmp	r3, #5
10042568:	d102      	bne.n	10042570 <DrawSchedule+0x100>
1004256a:	2302      	movs	r3, #2
1004256c:	469b      	mov	fp, r3
1004256e:	e001      	b.n	10042574 <DrawSchedule+0x104>
10042570:	2301      	movs	r3, #1
10042572:	469b      	mov	fp, r3
10042574:	2326      	movs	r3, #38	@ 0x26
10042576:	18fb      	adds	r3, r7, r3
10042578:	781b      	ldrb	r3, [r3, #0]
1004257a:	61bb      	str	r3, [r7, #24]
1004257c:	2325      	movs	r3, #37	@ 0x25
1004257e:	18fb      	adds	r3, r7, r3
10042580:	781b      	ldrb	r3, [r3, #0]
10042582:	617b      	str	r3, [r7, #20]
10042584:	2367      	movs	r3, #103	@ 0x67
10042586:	2220      	movs	r2, #32
10042588:	189b      	adds	r3, r3, r2
1004258a:	19db      	adds	r3, r3, r7
1004258c:	781b      	ldrb	r3, [r3, #0]
1004258e:	613b      	str	r3, [r7, #16]
10042590:	2366      	movs	r3, #102	@ 0x66
10042592:	189b      	adds	r3, r3, r2
10042594:	19db      	adds	r3, r3, r7
10042596:	781b      	ldrb	r3, [r3, #0]
10042598:	60fb      	str	r3, [r7, #12]
1004259a:	2365      	movs	r3, #101	@ 0x65
1004259c:	189b      	adds	r3, r3, r2
1004259e:	19db      	adds	r3, r3, r7
100425a0:	781b      	ldrb	r3, [r3, #0]
100425a2:	60bb      	str	r3, [r7, #8]
100425a4:	2364      	movs	r3, #100	@ 0x64
100425a6:	189b      	adds	r3, r3, r2
100425a8:	19db      	adds	r3, r3, r7
100425aa:	781b      	ldrb	r3, [r3, #0]
100425ac:	607b      	str	r3, [r7, #4]
100425ae:	2327      	movs	r3, #39	@ 0x27
100425b0:	18fb      	adds	r3, r7, r3
100425b2:	781b      	ldrb	r3, [r3, #0]
100425b4:	2b00      	cmp	r3, #0
100425b6:	d102      	bne.n	100425be <DrawSchedule+0x14e>
100425b8:	2304      	movs	r3, #4
100425ba:	469c      	mov	ip, r3
100425bc:	e001      	b.n	100425c2 <DrawSchedule+0x152>
100425be:	2303      	movs	r3, #3
100425c0:	469c      	mov	ip, r3
100425c2:	2327      	movs	r3, #39	@ 0x27
100425c4:	18fb      	adds	r3, r7, r3
100425c6:	781b      	ldrb	r3, [r3, #0]
100425c8:	2b01      	cmp	r3, #1
100425ca:	d101      	bne.n	100425d0 <DrawSchedule+0x160>
100425cc:	2604      	movs	r6, #4
100425ce:	e000      	b.n	100425d2 <DrawSchedule+0x162>
100425d0:	2603      	movs	r6, #3
100425d2:	2327      	movs	r3, #39	@ 0x27
100425d4:	18fb      	adds	r3, r7, r3
100425d6:	781b      	ldrb	r3, [r3, #0]
100425d8:	2b02      	cmp	r3, #2
100425da:	d101      	bne.n	100425e0 <DrawSchedule+0x170>
100425dc:	2504      	movs	r5, #4
100425de:	e000      	b.n	100425e2 <DrawSchedule+0x172>
100425e0:	2503      	movs	r5, #3
100425e2:	2327      	movs	r3, #39	@ 0x27
100425e4:	18fb      	adds	r3, r7, r3
100425e6:	781b      	ldrb	r3, [r3, #0]
100425e8:	2b03      	cmp	r3, #3
100425ea:	d101      	bne.n	100425f0 <DrawSchedule+0x180>
100425ec:	2404      	movs	r4, #4
100425ee:	e000      	b.n	100425f2 <DrawSchedule+0x182>
100425f0:	2403      	movs	r4, #3
100425f2:	2327      	movs	r3, #39	@ 0x27
100425f4:	18fb      	adds	r3, r7, r3
100425f6:	781b      	ldrb	r3, [r3, #0]
100425f8:	2b04      	cmp	r3, #4
100425fa:	d101      	bne.n	10042600 <DrawSchedule+0x190>
100425fc:	2204      	movs	r2, #4
100425fe:	e000      	b.n	10042602 <DrawSchedule+0x192>
10042600:	2203      	movs	r2, #3
10042602:	2327      	movs	r3, #39	@ 0x27
10042604:	18fb      	adds	r3, r7, r3
10042606:	781b      	ldrb	r3, [r3, #0]
10042608:	2b05      	cmp	r3, #5
1004260a:	d101      	bne.n	10042610 <DrawSchedule+0x1a0>
1004260c:	2304      	movs	r3, #4
1004260e:	e000      	b.n	10042612 <DrawSchedule+0x1a2>
10042610:	2303      	movs	r3, #3
10042612:	491d      	ldr	r1, [pc, #116]	@ (10042688 <DrawSchedule+0x218>)
10042614:	6039      	str	r1, [r7, #0]
10042616:	2008      	movs	r0, #8
10042618:	2120      	movs	r1, #32
1004261a:	1840      	adds	r0, r0, r1
1004261c:	19c0      	adds	r0, r0, r7
1004261e:	930f      	str	r3, [sp, #60]	@ 0x3c
10042620:	920e      	str	r2, [sp, #56]	@ 0x38
10042622:	940d      	str	r4, [sp, #52]	@ 0x34
10042624:	950c      	str	r5, [sp, #48]	@ 0x30
10042626:	960b      	str	r6, [sp, #44]	@ 0x2c
10042628:	4663      	mov	r3, ip
1004262a:	930a      	str	r3, [sp, #40]	@ 0x28
1004262c:	687b      	ldr	r3, [r7, #4]
1004262e:	9309      	str	r3, [sp, #36]	@ 0x24
10042630:	68bb      	ldr	r3, [r7, #8]
10042632:	9308      	str	r3, [sp, #32]
10042634:	68fb      	ldr	r3, [r7, #12]
10042636:	9307      	str	r3, [sp, #28]
10042638:	693b      	ldr	r3, [r7, #16]
1004263a:	9306      	str	r3, [sp, #24]
1004263c:	697b      	ldr	r3, [r7, #20]
1004263e:	9305      	str	r3, [sp, #20]
10042640:	69bb      	ldr	r3, [r7, #24]
10042642:	9304      	str	r3, [sp, #16]
10042644:	465b      	mov	r3, fp
10042646:	9303      	str	r3, [sp, #12]
10042648:	4653      	mov	r3, sl
1004264a:	9302      	str	r3, [sp, #8]
1004264c:	464b      	mov	r3, r9
1004264e:	9301      	str	r3, [sp, #4]
10042650:	4643      	mov	r3, r8
10042652:	9300      	str	r3, [sp, #0]
10042654:	69fb      	ldr	r3, [r7, #28]
10042656:	6a3a      	ldr	r2, [r7, #32]
10042658:	6839      	ldr	r1, [r7, #0]
1004265a:	f025 fadd 	bl	10067c18 <siprintf>
								"%.2d/%.2d S:%.2d:%.2d E:%.2d:%.2d\n"
								" %c  %c    %c  %c    %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR, 4==TOPCHAR, 5==TOPCHAR,
								month, day , hour1, minute1, hour2, minute2,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR, 4==BOTCHAR, 5==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
1004265e:	2000      	movs	r0, #0
10042660:	f003 fdc8 	bl	100461f4 <OledClear>
	OledDrawString(folderselectstring);
10042664:	2008      	movs	r0, #8
10042666:	2320      	movs	r3, #32
10042668:	18c3      	adds	r3, r0, r3
1004266a:	19db      	adds	r3, r3, r7
1004266c:	0018      	movs	r0, r3
1004266e:	f003 fd77 	bl	10046160 <OledDrawString>
	OledUpdate();
10042672:	f003 fdf5 	bl	10046260 <OledUpdate>

}
10042676:	46c0      	nop			@ (mov r8, r8)
10042678:	46bd      	mov	sp, r7
1004267a:	b023      	add	sp, #140	@ 0x8c
1004267c:	bcf0      	pop	{r4, r5, r6, r7}
1004267e:	46bb      	mov	fp, r7
10042680:	46b2      	mov	sl, r6
10042682:	46a9      	mov	r9, r5
10042684:	46a0      	mov	r8, r4
10042686:	bdf0      	pop	{r4, r5, r6, r7, pc}
10042688:	10068dcc 	.word	0x10068dcc

1004268c <ButtonsMenuSM_Event_Init>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t ButtonsMenuSM_Event_Init(FIFO Queue){
1004268c:	b580      	push	{r7, lr}
1004268e:	b082      	sub	sp, #8
10042690:	af00      	add	r7, sp, #0
10042692:	6078      	str	r0, [r7, #4]
    ButtonsMenuSMqueue = Queue;
10042694:	4b0d      	ldr	r3, [pc, #52]	@ (100426cc <ButtonsMenuSM_Event_Init+0x40>)
10042696:	687a      	ldr	r2, [r7, #4]
10042698:	601a      	str	r2, [r3, #0]
    BMState = main;
1004269a:	4b0d      	ldr	r3, [pc, #52]	@ (100426d0 <ButtonsMenuSM_Event_Init+0x44>)
1004269c:	2200      	movs	r2, #0
1004269e:	701a      	strb	r2, [r3, #0]
    displayoff = 1;
100426a0:	4b0c      	ldr	r3, [pc, #48]	@ (100426d4 <ButtonsMenuSM_Event_Init+0x48>)
100426a2:	2201      	movs	r2, #1
100426a4:	701a      	strb	r2, [r3, #0]
    GPIO_Init();
100426a6:	f002 fb5b 	bl	10044d60 <GPIO_Init>
    I2C_Init();
100426aa:	f002 fdf9 	bl	100452a0 <I2C_Init>
	TIMERS_Init();
100426ae:	f004 f94d 	bl	1004694c <TIMERS_Init>
	OledInit();
100426b2:	f003 fc69 	bl	10045f88 <OledInit>
	BSP_LED_Init(LED_BLUE);
100426b6:	2000      	movs	r0, #0
100426b8:	f005 fa0a 	bl	10047ad0 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
100426bc:	2002      	movs	r0, #2
100426be:	f005 fa07 	bl	10047ad0 <BSP_LED_Init>
    return INIT_OK;
100426c2:	2301      	movs	r3, #1
}
100426c4:	0018      	movs	r0, r3
100426c6:	46bd      	mov	sp, r7
100426c8:	b002      	add	sp, #8
100426ca:	bd80      	pop	{r7, pc}
100426cc:	20000398 	.word	0x20000398
100426d0:	2000039c 	.word	0x2000039c
100426d4:	2000039d 	.word	0x2000039d

100426d8 <ButtonsMenuSM_Event_Post>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void ButtonsMenuSM_Event_Post(Event_t event){
100426d8:	b580      	push	{r7, lr}
100426da:	b082      	sub	sp, #8
100426dc:	af00      	add	r7, sp, #0
100426de:	1d3b      	adds	r3, r7, #4
100426e0:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(ButtonsMenuSMqueue, event);
100426e2:	4b05      	ldr	r3, [pc, #20]	@ (100426f8 <ButtonsMenuSM_Event_Post+0x20>)
100426e4:	681a      	ldr	r2, [r3, #0]
100426e6:	1d3b      	adds	r3, r7, #4
100426e8:	6819      	ldr	r1, [r3, #0]
100426ea:	0010      	movs	r0, r2
100426ec:	f001 ffad 	bl	1004464a <FIFO_Enqueue>
}
100426f0:	46c0      	nop			@ (mov r8, r8)
100426f2:	46bd      	mov	sp, r7
100426f4:	b002      	add	sp, #8
100426f6:	bd80      	pop	{r7, pc}
100426f8:	20000398 	.word	0x20000398

100426fc <ButtonsMenuSM_Event_Updater>:
 * @Function: ButtonsMenuSM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t ButtonsMenuSM_Event_Updater(void){
100426fc:	b5b0      	push	{r4, r5, r7, lr}
100426fe:	b084      	sub	sp, #16
10042700:	af00      	add	r7, sp, #0
    static uint32_t debounce = 0;
    static uint8_t lastbuttons = 0xFF;
    static uint32_t timer = 0;
    static uint8_t timeractive = 0;

    Event_t event = (Event_t){EVENT_NONE, 0};
10042702:	1d3b      	adds	r3, r7, #4
10042704:	2200      	movs	r2, #0
10042706:	701a      	strb	r2, [r3, #0]
10042708:	1d3b      	adds	r3, r7, #4
1004270a:	2200      	movs	r2, #0
1004270c:	805a      	strh	r2, [r3, #2]

    uint8_t currbuttons = GPIO_ReadButtons();
1004270e:	250f      	movs	r5, #15
10042710:	197c      	adds	r4, r7, r5
10042712:	f002 fb67 	bl	10044de4 <GPIO_ReadButtons>
10042716:	0003      	movs	r3, r0
10042718:	7023      	strb	r3, [r4, #0]

    if(currbuttons != lastbuttons && (debounce + DEBOUNCETIME < TIMERS_GetMilliSeconds())){
1004271a:	4b34      	ldr	r3, [pc, #208]	@ (100427ec <ButtonsMenuSM_Event_Updater+0xf0>)
1004271c:	781b      	ldrb	r3, [r3, #0]
1004271e:	197a      	adds	r2, r7, r5
10042720:	7812      	ldrb	r2, [r2, #0]
10042722:	429a      	cmp	r2, r3
10042724:	d02f      	beq.n	10042786 <ButtonsMenuSM_Event_Updater+0x8a>
10042726:	4b32      	ldr	r3, [pc, #200]	@ (100427f0 <ButtonsMenuSM_Event_Updater+0xf4>)
10042728:	681b      	ldr	r3, [r3, #0]
1004272a:	3332      	adds	r3, #50	@ 0x32
1004272c:	001c      	movs	r4, r3
1004272e:	f004 f959 	bl	100469e4 <TIMERS_GetMilliSeconds>
10042732:	0003      	movs	r3, r0
10042734:	429c      	cmp	r4, r3
10042736:	d226      	bcs.n	10042786 <ButtonsMenuSM_Event_Updater+0x8a>
    	event.status = EVENT_BUTTONS;
10042738:	1d3b      	adds	r3, r7, #4
1004273a:	2204      	movs	r2, #4
1004273c:	701a      	strb	r2, [r3, #0]
    	event.data = (((uint16_t)currbuttons ^ (uint16_t)lastbuttons) << 8) + (uint16_t)currbuttons;
1004273e:	4b2b      	ldr	r3, [pc, #172]	@ (100427ec <ButtonsMenuSM_Event_Updater+0xf0>)
10042740:	781a      	ldrb	r2, [r3, #0]
10042742:	197b      	adds	r3, r7, r5
10042744:	781b      	ldrb	r3, [r3, #0]
10042746:	4053      	eors	r3, r2
10042748:	b2db      	uxtb	r3, r3
1004274a:	021b      	lsls	r3, r3, #8
1004274c:	b29a      	uxth	r2, r3
1004274e:	197b      	adds	r3, r7, r5
10042750:	781b      	ldrb	r3, [r3, #0]
10042752:	b29b      	uxth	r3, r3
10042754:	18d3      	adds	r3, r2, r3
10042756:	b29a      	uxth	r2, r3
10042758:	1d3b      	adds	r3, r7, #4
1004275a:	805a      	strh	r2, [r3, #2]
    	lastbuttons = currbuttons;
1004275c:	4b23      	ldr	r3, [pc, #140]	@ (100427ec <ButtonsMenuSM_Event_Updater+0xf0>)
1004275e:	197a      	adds	r2, r7, r5
10042760:	7812      	ldrb	r2, [r2, #0]
10042762:	701a      	strb	r2, [r3, #0]
    	debounce = TIMERS_GetMilliSeconds();
10042764:	f004 f93e 	bl	100469e4 <TIMERS_GetMilliSeconds>
10042768:	0002      	movs	r2, r0
1004276a:	4b21      	ldr	r3, [pc, #132]	@ (100427f0 <ButtonsMenuSM_Event_Updater+0xf4>)
1004276c:	601a      	str	r2, [r3, #0]
    	timer = TIMERS_GetMilliSeconds();//delay the sleep timer
1004276e:	f004 f939 	bl	100469e4 <TIMERS_GetMilliSeconds>
10042772:	0002      	movs	r2, r0
10042774:	4b1f      	ldr	r3, [pc, #124]	@ (100427f4 <ButtonsMenuSM_Event_Updater+0xf8>)
10042776:	601a      	str	r2, [r3, #0]
    	timeractive = 1;
10042778:	4b1f      	ldr	r3, [pc, #124]	@ (100427f8 <ButtonsMenuSM_Event_Updater+0xfc>)
1004277a:	2201      	movs	r2, #1
1004277c:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
1004277e:	1d3b      	adds	r3, r7, #4
10042780:	6818      	ldr	r0, [r3, #0]
10042782:	f7ff ffa9 	bl	100426d8 <ButtonsMenuSM_Event_Post>
    }
    if(timeractive & (timer+SLEEPTIMER < TIMERS_GetMilliSeconds())){
10042786:	4b1c      	ldr	r3, [pc, #112]	@ (100427f8 <ButtonsMenuSM_Event_Updater+0xfc>)
10042788:	781b      	ldrb	r3, [r3, #0]
1004278a:	001d      	movs	r5, r3
1004278c:	4b19      	ldr	r3, [pc, #100]	@ (100427f4 <ButtonsMenuSM_Event_Updater+0xf8>)
1004278e:	681b      	ldr	r3, [r3, #0]
10042790:	4a1a      	ldr	r2, [pc, #104]	@ (100427fc <ButtonsMenuSM_Event_Updater+0x100>)
10042792:	189c      	adds	r4, r3, r2
10042794:	f004 f926 	bl	100469e4 <TIMERS_GetMilliSeconds>
10042798:	0003      	movs	r3, r0
1004279a:	429c      	cmp	r4, r3
1004279c:	419b      	sbcs	r3, r3
1004279e:	425b      	negs	r3, r3
100427a0:	b2db      	uxtb	r3, r3
100427a2:	402b      	ands	r3, r5
100427a4:	d00c      	beq.n	100427c0 <ButtonsMenuSM_Event_Updater+0xc4>
    	event.status = EVENT_TIMEOUT;
100427a6:	1d3b      	adds	r3, r7, #4
100427a8:	2209      	movs	r2, #9
100427aa:	701a      	strb	r2, [r3, #0]
    	event.data = 0;
100427ac:	1d3b      	adds	r3, r7, #4
100427ae:	2200      	movs	r2, #0
100427b0:	805a      	strh	r2, [r3, #2]
    	timeractive = 0;// disable sleep timer until next button press
100427b2:	4b11      	ldr	r3, [pc, #68]	@ (100427f8 <ButtonsMenuSM_Event_Updater+0xfc>)
100427b4:	2200      	movs	r2, #0
100427b6:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
100427b8:	1d3b      	adds	r3, r7, #4
100427ba:	6818      	ldr	r0, [r3, #0]
100427bc:	f7ff ff8c 	bl	100426d8 <ButtonsMenuSM_Event_Post>

    }
    return event;
100427c0:	2108      	movs	r1, #8
100427c2:	187b      	adds	r3, r7, r1
100427c4:	1d3a      	adds	r2, r7, #4
100427c6:	6812      	ldr	r2, [r2, #0]
100427c8:	601a      	str	r2, [r3, #0]
100427ca:	187a      	adds	r2, r7, r1
100427cc:	2300      	movs	r3, #0
100427ce:	8811      	ldrh	r1, [r2, #0]
100427d0:	0409      	lsls	r1, r1, #16
100427d2:	0c09      	lsrs	r1, r1, #16
100427d4:	0c1b      	lsrs	r3, r3, #16
100427d6:	041b      	lsls	r3, r3, #16
100427d8:	430b      	orrs	r3, r1
100427da:	8852      	ldrh	r2, [r2, #2]
100427dc:	0412      	lsls	r2, r2, #16
100427de:	041b      	lsls	r3, r3, #16
100427e0:	0c1b      	lsrs	r3, r3, #16
100427e2:	4313      	orrs	r3, r2
}
100427e4:	0018      	movs	r0, r3
100427e6:	46bd      	mov	sp, r7
100427e8:	b004      	add	sp, #16
100427ea:	bdb0      	pop	{r4, r5, r7, pc}
100427ec:	2000260c 	.word	0x2000260c
100427f0:	200003a8 	.word	0x200003a8
100427f4:	200003ac 	.word	0x200003ac
100427f8:	200003b0 	.word	0x200003b0
100427fc:	00007530 	.word	0x00007530

10042800 <ButtonsMenuSM_Event_Handler>:
 * @Function: ButtonsMenuSM_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t ButtonsMenuSM_Event_Handler(Event_t event){
10042800:	b590      	push	{r4, r7, lr}
10042802:	b08f      	sub	sp, #60	@ 0x3c
10042804:	af02      	add	r7, sp, #8
10042806:	1d3b      	adds	r3, r7, #4
10042808:	6018      	str	r0, [r3, #0]
	uint8_t transition = 0;
1004280a:	232f      	movs	r3, #47	@ 0x2f
1004280c:	18fb      	adds	r3, r7, r3
1004280e:	2200      	movs	r2, #0
10042810:	701a      	strb	r2, [r3, #0]
	ButtonsMenuStates_t nextstate = BMState;
10042812:	232e      	movs	r3, #46	@ 0x2e
10042814:	18fb      	adds	r3, r7, r3
10042816:	4ac4      	ldr	r2, [pc, #784]	@ (10042b28 <ButtonsMenuSM_Event_Handler+0x328>)
10042818:	7812      	ldrb	r2, [r2, #0]
1004281a:	701a      	strb	r2, [r3, #0]
	if(event.status == EVENT_TIMEOUT){
1004281c:	1d3b      	adds	r3, r7, #4
1004281e:	781b      	ldrb	r3, [r3, #0]
10042820:	b25b      	sxtb	r3, r3
10042822:	2b09      	cmp	r3, #9
10042824:	d104      	bne.n	10042830 <ButtonsMenuSM_Event_Handler+0x30>
		displayoff = 1;
10042826:	4bc1      	ldr	r3, [pc, #772]	@ (10042b2c <ButtonsMenuSM_Event_Handler+0x32c>)
10042828:	2201      	movs	r2, #1
1004282a:	701a      	strb	r2, [r3, #0]
		OledOff();
1004282c:	f003 fd11 	bl	10046252 <OledOff>
	}
	if(displayoff){
10042830:	4bbe      	ldr	r3, [pc, #760]	@ (10042b2c <ButtonsMenuSM_Event_Handler+0x32c>)
10042832:	781b      	ldrb	r3, [r3, #0]
10042834:	2b00      	cmp	r3, #0
10042836:	d015      	beq.n	10042864 <ButtonsMenuSM_Event_Handler+0x64>
		if(event.status == EVENT_BUTTONS){
10042838:	1d3b      	adds	r3, r7, #4
1004283a:	781b      	ldrb	r3, [r3, #0]
1004283c:	b25b      	sxtb	r3, r3
1004283e:	2b04      	cmp	r3, #4
10042840:	d001      	beq.n	10042846 <ButtonsMenuSM_Event_Handler+0x46>
10042842:	f001 f957 	bl	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
			displayoff = 0;
10042846:	4bb9      	ldr	r3, [pc, #740]	@ (10042b2c <ButtonsMenuSM_Event_Handler+0x32c>)
10042848:	2200      	movs	r2, #0
1004284a:	701a      	strb	r2, [r3, #0]
			nextstate = main;
1004284c:	232e      	movs	r3, #46	@ 0x2e
1004284e:	18fb      	adds	r3, r7, r3
10042850:	2200      	movs	r2, #0
10042852:	701a      	strb	r2, [r3, #0]
			transition = 1;
10042854:	232f      	movs	r3, #47	@ 0x2f
10042856:	18fb      	adds	r3, r7, r3
10042858:	2201      	movs	r2, #1
1004285a:	701a      	strb	r2, [r3, #0]
			OledOn();
1004285c:	f003 fcf2 	bl	10046244 <OledOn>
10042860:	f001 f948 	bl	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
		}
	} else {

		switch (BMState){
10042864:	4bb0      	ldr	r3, [pc, #704]	@ (10042b28 <ButtonsMenuSM_Event_Handler+0x328>)
10042866:	781b      	ldrb	r3, [r3, #0]
10042868:	2b05      	cmp	r3, #5
1004286a:	d901      	bls.n	10042870 <ButtonsMenuSM_Event_Handler+0x70>
1004286c:	f001 f935 	bl	10043ada <ButtonsMenuSM_Event_Handler+0x12da>
10042870:	009a      	lsls	r2, r3, #2
10042872:	4baf      	ldr	r3, [pc, #700]	@ (10042b30 <ButtonsMenuSM_Event_Handler+0x330>)
10042874:	18d3      	adds	r3, r2, r3
10042876:	681b      	ldr	r3, [r3, #0]
10042878:	469f      	mov	pc, r3
		case main:
			if(event.status == EVENT_ENTRY){
1004287a:	1d3b      	adds	r3, r7, #4
1004287c:	781b      	ldrb	r3, [r3, #0]
1004287e:	b25b      	sxtb	r3, r3
10042880:	2b02      	cmp	r3, #2
10042882:	d101      	bne.n	10042888 <ButtonsMenuSM_Event_Handler+0x88>
				DrawMain();
10042884:	f7ff fc78 	bl	10042178 <DrawMain>
			}
			if(event.status == EVENT_BUTTONS){
10042888:	1d3b      	adds	r3, r7, #4
1004288a:	781b      	ldrb	r3, [r3, #0]
1004288c:	b25b      	sxtb	r3, r3
1004288e:	2b04      	cmp	r3, #4
10042890:	d001      	beq.n	10042896 <ButtonsMenuSM_Event_Handler+0x96>
10042892:	f001 f924 	bl	10043ade <ButtonsMenuSM_Event_Handler+0x12de>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042896:	1d3b      	adds	r3, r7, #4
10042898:	885b      	ldrh	r3, [r3, #2]
1004289a:	001a      	movs	r2, r3
1004289c:	2380      	movs	r3, #128	@ 0x80
1004289e:	005b      	lsls	r3, r3, #1
100428a0:	4013      	ands	r3, r2
100428a2:	d014      	beq.n	100428ce <ButtonsMenuSM_Event_Handler+0xce>
100428a4:	1d3b      	adds	r3, r7, #4
100428a6:	885b      	ldrh	r3, [r3, #2]
100428a8:	001a      	movs	r2, r3
100428aa:	2301      	movs	r3, #1
100428ac:	4013      	ands	r3, r2
100428ae:	d10e      	bne.n	100428ce <ButtonsMenuSM_Event_Handler+0xce>
					//discountprintf("moving to folder control");
					nextstate = folderControl;
100428b0:	232e      	movs	r3, #46	@ 0x2e
100428b2:	18fb      	adds	r3, r7, r3
100428b4:	2201      	movs	r2, #1
100428b6:	701a      	strb	r2, [r3, #0]
					transition = 1;
100428b8:	232f      	movs	r3, #47	@ 0x2f
100428ba:	18fb      	adds	r3, r7, r3
100428bc:	2201      	movs	r2, #1
100428be:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
100428c0:	4b9c      	ldr	r3, [pc, #624]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
100428c2:	2200      	movs	r2, #0
100428c4:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
100428c6:	4b9c      	ldr	r3, [pc, #624]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
100428c8:	2200      	movs	r2, #0
100428ca:	701a      	strb	r2, [r3, #0]
100428cc:	e0a0      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100428ce:	1d3b      	adds	r3, r7, #4
100428d0:	885b      	ldrh	r3, [r3, #2]
100428d2:	001a      	movs	r2, r3
100428d4:	2380      	movs	r3, #128	@ 0x80
100428d6:	009b      	lsls	r3, r3, #2
100428d8:	4013      	ands	r3, r2
100428da:	d020      	beq.n	1004291e <ButtonsMenuSM_Event_Handler+0x11e>
100428dc:	1d3b      	adds	r3, r7, #4
100428de:	885b      	ldrh	r3, [r3, #2]
100428e0:	001a      	movs	r2, r3
100428e2:	2302      	movs	r3, #2
100428e4:	4013      	ands	r3, r2
100428e6:	d11a      	bne.n	1004291e <ButtonsMenuSM_Event_Handler+0x11e>
					//discountprintf("moving to schedule day");
					nextstate = scheduleTime;
100428e8:	232e      	movs	r3, #46	@ 0x2e
100428ea:	18fb      	adds	r3, r7, r3
100428ec:	2202      	movs	r2, #2
100428ee:	701a      	strb	r2, [r3, #0]
					transition = 1;
100428f0:	232f      	movs	r3, #47	@ 0x2f
100428f2:	18fb      	adds	r3, r7, r3
100428f4:	2201      	movs	r2, #1
100428f6:	701a      	strb	r2, [r3, #0]
					monthselect = 0;
100428f8:	4b90      	ldr	r3, [pc, #576]	@ (10042b3c <ButtonsMenuSM_Event_Handler+0x33c>)
100428fa:	2200      	movs	r2, #0
100428fc:	701a      	strb	r2, [r3, #0]
					dayselect = 0;
100428fe:	4b90      	ldr	r3, [pc, #576]	@ (10042b40 <ButtonsMenuSM_Event_Handler+0x340>)
10042900:	2200      	movs	r2, #0
10042902:	701a      	strb	r2, [r3, #0]
					Stimeselect = 0;
10042904:	4b8f      	ldr	r3, [pc, #572]	@ (10042b44 <ButtonsMenuSM_Event_Handler+0x344>)
10042906:	2200      	movs	r2, #0
10042908:	701a      	strb	r2, [r3, #0]
					Etimeselect = 0;
1004290a:	4b8f      	ldr	r3, [pc, #572]	@ (10042b48 <ButtonsMenuSM_Event_Handler+0x348>)
1004290c:	2200      	movs	r2, #0
1004290e:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
10042910:	4b88      	ldr	r3, [pc, #544]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042912:	2200      	movs	r2, #0
10042914:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
10042916:	4b88      	ldr	r3, [pc, #544]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042918:	2200      	movs	r2, #0
1004291a:	701a      	strb	r2, [r3, #0]
1004291c:	e078      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>

				}else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
1004291e:	1d3b      	adds	r3, r7, #4
10042920:	885b      	ldrh	r3, [r3, #2]
10042922:	001a      	movs	r2, r3
10042924:	2380      	movs	r3, #128	@ 0x80
10042926:	00db      	lsls	r3, r3, #3
10042928:	4013      	ands	r3, r2
1004292a:	d00e      	beq.n	1004294a <ButtonsMenuSM_Event_Handler+0x14a>
1004292c:	1d3b      	adds	r3, r7, #4
1004292e:	885b      	ldrh	r3, [r3, #2]
10042930:	001a      	movs	r2, r3
10042932:	2304      	movs	r3, #4
10042934:	4013      	ands	r3, r2
10042936:	d108      	bne.n	1004294a <ButtonsMenuSM_Event_Handler+0x14a>
					//discountprintf("incrementing volume");
					nextstate = setTime;
10042938:	232e      	movs	r3, #46	@ 0x2e
1004293a:	18fb      	adds	r3, r7, r3
1004293c:	2204      	movs	r2, #4
1004293e:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042940:	232f      	movs	r3, #47	@ 0x2f
10042942:	18fb      	adds	r3, r7, r3
10042944:	2201      	movs	r2, #1
10042946:	701a      	strb	r2, [r3, #0]
10042948:	e062      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
1004294a:	1d3b      	adds	r3, r7, #4
1004294c:	885b      	ldrh	r3, [r3, #2]
1004294e:	001a      	movs	r2, r3
10042950:	2380      	movs	r3, #128	@ 0x80
10042952:	011b      	lsls	r3, r3, #4
10042954:	4013      	ands	r3, r2
10042956:	d00e      	beq.n	10042976 <ButtonsMenuSM_Event_Handler+0x176>
10042958:	1d3b      	adds	r3, r7, #4
1004295a:	885b      	ldrh	r3, [r3, #2]
1004295c:	001a      	movs	r2, r3
1004295e:	2308      	movs	r3, #8
10042960:	4013      	ands	r3, r2
10042962:	d108      	bne.n	10042976 <ButtonsMenuSM_Event_Handler+0x176>
					//discountprintf("moving to options");
					nextstate = options;
10042964:	232e      	movs	r3, #46	@ 0x2e
10042966:	18fb      	adds	r3, r7, r3
10042968:	2205      	movs	r2, #5
1004296a:	701a      	strb	r2, [r3, #0]
					transition = 1;
1004296c:	232f      	movs	r3, #47	@ 0x2f
1004296e:	18fb      	adds	r3, r7, r3
10042970:	2201      	movs	r2, #1
10042972:	701a      	strb	r2, [r3, #0]
10042974:	e04c      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042976:	1d3b      	adds	r3, r7, #4
10042978:	885b      	ldrh	r3, [r3, #2]
1004297a:	001a      	movs	r2, r3
1004297c:	2380      	movs	r3, #128	@ 0x80
1004297e:	015b      	lsls	r3, r3, #5
10042980:	4013      	ands	r3, r2
10042982:	d01a      	beq.n	100429ba <ButtonsMenuSM_Event_Handler+0x1ba>
10042984:	1d3b      	adds	r3, r7, #4
10042986:	885b      	ldrh	r3, [r3, #2]
10042988:	001a      	movs	r2, r3
1004298a:	2310      	movs	r3, #16
1004298c:	4013      	ands	r3, r2
1004298e:	d114      	bne.n	100429ba <ButtonsMenuSM_Event_Handler+0x1ba>
					//discountprintf("decrementing volume");
					uint8_t vol = FLASH_GetVolume()-5;
10042990:	f001 ffae 	bl	100448f0 <FLASH_GetVolume>
10042994:	0003      	movs	r3, r0
10042996:	001a      	movs	r2, r3
10042998:	242a      	movs	r4, #42	@ 0x2a
1004299a:	193b      	adds	r3, r7, r4
1004299c:	3a05      	subs	r2, #5
1004299e:	701a      	strb	r2, [r3, #0]
					if(vol >= 0){
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
100429a0:	f001 ffbc 	bl	1004491c <FLASH_GetDutyCycle>
100429a4:	0003      	movs	r3, r0
100429a6:	001a      	movs	r2, r3
100429a8:	193b      	adds	r3, r7, r4
100429aa:	781b      	ldrb	r3, [r3, #0]
100429ac:	0011      	movs	r1, r2
100429ae:	0018      	movs	r0, r3
100429b0:	f001 ff5c 	bl	1004486c <FLASH_SetDCVol>
					}
					DrawMain();
100429b4:	f7ff fbe0 	bl	10042178 <DrawMain>
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
100429b8:	e02a      	b.n	10042a10 <ButtonsMenuSM_Event_Handler+0x210>

				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
100429ba:	1d3b      	adds	r3, r7, #4
100429bc:	885b      	ldrh	r3, [r3, #2]
100429be:	001a      	movs	r2, r3
100429c0:	2380      	movs	r3, #128	@ 0x80
100429c2:	019b      	lsls	r3, r3, #6
100429c4:	4013      	ands	r3, r2
100429c6:	d101      	bne.n	100429cc <ButtonsMenuSM_Event_Handler+0x1cc>
100429c8:	f001 f889 	bl	10043ade <ButtonsMenuSM_Event_Handler+0x12de>
100429cc:	1d3b      	adds	r3, r7, #4
100429ce:	885b      	ldrh	r3, [r3, #2]
100429d0:	001a      	movs	r2, r3
100429d2:	2320      	movs	r3, #32
100429d4:	4013      	ands	r3, r2
100429d6:	d001      	beq.n	100429dc <ButtonsMenuSM_Event_Handler+0x1dc>
100429d8:	f001 f881 	bl	10043ade <ButtonsMenuSM_Event_Handler+0x12de>
					//discountprintf("moving to set Time");
					uint8_t vol = FLASH_GetVolume()+5;
100429dc:	f001 ff88 	bl	100448f0 <FLASH_GetVolume>
100429e0:	0003      	movs	r3, r0
100429e2:	001a      	movs	r2, r3
100429e4:	2429      	movs	r4, #41	@ 0x29
100429e6:	193b      	adds	r3, r7, r4
100429e8:	3205      	adds	r2, #5
100429ea:	701a      	strb	r2, [r3, #0]
					if(vol <= 100){
100429ec:	193b      	adds	r3, r7, r4
100429ee:	781b      	ldrb	r3, [r3, #0]
100429f0:	2b64      	cmp	r3, #100	@ 0x64
100429f2:	d809      	bhi.n	10042a08 <ButtonsMenuSM_Event_Handler+0x208>
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
100429f4:	f001 ff92 	bl	1004491c <FLASH_GetDutyCycle>
100429f8:	0003      	movs	r3, r0
100429fa:	001a      	movs	r2, r3
100429fc:	193b      	adds	r3, r7, r4
100429fe:	781b      	ldrb	r3, [r3, #0]
10042a00:	0011      	movs	r1, r2
10042a02:	0018      	movs	r0, r3
10042a04:	f001 ff32 	bl	1004486c <FLASH_SetDCVol>
					}
					DrawMain();
10042a08:	f7ff fbb6 	bl	10042178 <DrawMain>

				}

			}
			break;
10042a0c:	f001 f867 	bl	10043ade <ButtonsMenuSM_Event_Handler+0x12de>
10042a10:	f001 f865 	bl	10043ade <ButtonsMenuSM_Event_Handler+0x12de>
		case folderControl:
			if(event.status == EVENT_ENTRY){
10042a14:	1d3b      	adds	r3, r7, #4
10042a16:	781b      	ldrb	r3, [r3, #0]
10042a18:	b25b      	sxtb	r3, r3
10042a1a:	2b02      	cmp	r3, #2
10042a1c:	d10b      	bne.n	10042a36 <ButtonsMenuSM_Event_Handler+0x236>
				cursorpos = 0;
10042a1e:	4b4b      	ldr	r3, [pc, #300]	@ (10042b4c <ButtonsMenuSM_Event_Handler+0x34c>)
10042a20:	2200      	movs	r2, #0
10042a22:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
10042a24:	4b49      	ldr	r3, [pc, #292]	@ (10042b4c <ButtonsMenuSM_Event_Handler+0x34c>)
10042a26:	7818      	ldrb	r0, [r3, #0]
10042a28:	4b42      	ldr	r3, [pc, #264]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042a2a:	7819      	ldrb	r1, [r3, #0]
10042a2c:	4b42      	ldr	r3, [pc, #264]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042a2e:	781b      	ldrb	r3, [r3, #0]
10042a30:	001a      	movs	r2, r3
10042a32:	f7ff fbd1 	bl	100421d8 <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
10042a36:	1d3b      	adds	r3, r7, #4
10042a38:	781b      	ldrb	r3, [r3, #0]
10042a3a:	b25b      	sxtb	r3, r3
10042a3c:	2b04      	cmp	r3, #4
10042a3e:	d001      	beq.n	10042a44 <ButtonsMenuSM_Event_Handler+0x244>
10042a40:	f001 f84f 	bl	10043ae2 <ButtonsMenuSM_Event_Handler+0x12e2>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042a44:	1d3b      	adds	r3, r7, #4
10042a46:	885b      	ldrh	r3, [r3, #2]
10042a48:	001a      	movs	r2, r3
10042a4a:	2380      	movs	r3, #128	@ 0x80
10042a4c:	005b      	lsls	r3, r3, #1
10042a4e:	4013      	ands	r3, r2
10042a50:	d00e      	beq.n	10042a70 <ButtonsMenuSM_Event_Handler+0x270>
10042a52:	1d3b      	adds	r3, r7, #4
10042a54:	885b      	ldrh	r3, [r3, #2]
10042a56:	001a      	movs	r2, r3
10042a58:	2301      	movs	r3, #1
10042a5a:	4013      	ands	r3, r2
10042a5c:	d108      	bne.n	10042a70 <ButtonsMenuSM_Event_Handler+0x270>
					//discountprintf("moving to main, back");
					nextstate = main;
10042a5e:	232e      	movs	r3, #46	@ 0x2e
10042a60:	18fb      	adds	r3, r7, r3
10042a62:	2200      	movs	r2, #0
10042a64:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042a66:	232f      	movs	r3, #47	@ 0x2f
10042a68:	18fb      	adds	r3, r7, r3
10042a6a:	2201      	movs	r2, #1
10042a6c:	701a      	strb	r2, [r3, #0]
10042a6e:	e0e9      	b.n	10042c44 <ButtonsMenuSM_Event_Handler+0x444>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042a70:	1d3b      	adds	r3, r7, #4
10042a72:	885b      	ldrh	r3, [r3, #2]
10042a74:	001a      	movs	r2, r3
10042a76:	2380      	movs	r3, #128	@ 0x80
10042a78:	009b      	lsls	r3, r3, #2
10042a7a:	4013      	ands	r3, r2
10042a7c:	d020      	beq.n	10042ac0 <ButtonsMenuSM_Event_Handler+0x2c0>
10042a7e:	1d3b      	adds	r3, r7, #4
10042a80:	885b      	ldrh	r3, [r3, #2]
10042a82:	001a      	movs	r2, r3
10042a84:	2302      	movs	r3, #2
10042a86:	4013      	ands	r3, r2
10042a88:	d11a      	bne.n	10042ac0 <ButtonsMenuSM_Event_Handler+0x2c0>
					MP3_Event_Post(((Event_t){EVENT_PLAY, ((folderselect)<<8) + (trackselect)}));
10042a8a:	2124      	movs	r1, #36	@ 0x24
10042a8c:	187b      	adds	r3, r7, r1
10042a8e:	220b      	movs	r2, #11
10042a90:	701a      	strb	r2, [r3, #0]
10042a92:	4b28      	ldr	r3, [pc, #160]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042a94:	781b      	ldrb	r3, [r3, #0]
10042a96:	021b      	lsls	r3, r3, #8
10042a98:	b29b      	uxth	r3, r3
10042a9a:	4a27      	ldr	r2, [pc, #156]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042a9c:	7812      	ldrb	r2, [r2, #0]
10042a9e:	189b      	adds	r3, r3, r2
10042aa0:	b29a      	uxth	r2, r3
10042aa2:	187b      	adds	r3, r7, r1
10042aa4:	805a      	strh	r2, [r3, #2]
10042aa6:	187b      	adds	r3, r7, r1
10042aa8:	6818      	ldr	r0, [r3, #0]
10042aaa:	f002 fec7 	bl	1004583c <MP3_Event_Post>
					//discountprintf("moving to main, select");
					nextstate = main;
10042aae:	232e      	movs	r3, #46	@ 0x2e
10042ab0:	18fb      	adds	r3, r7, r3
10042ab2:	2200      	movs	r2, #0
10042ab4:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042ab6:	232f      	movs	r3, #47	@ 0x2f
10042ab8:	18fb      	adds	r3, r7, r3
10042aba:	2201      	movs	r2, #1
10042abc:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042abe:	e0c1      	b.n	10042c44 <ButtonsMenuSM_Event_Handler+0x444>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042ac0:	1d3b      	adds	r3, r7, #4
10042ac2:	885b      	ldrh	r3, [r3, #2]
10042ac4:	001a      	movs	r2, r3
10042ac6:	2380      	movs	r3, #128	@ 0x80
10042ac8:	00db      	lsls	r3, r3, #3
10042aca:	4013      	ands	r3, r2
10042acc:	d040      	beq.n	10042b50 <ButtonsMenuSM_Event_Handler+0x350>
10042ace:	1d3b      	adds	r3, r7, #4
10042ad0:	885b      	ldrh	r3, [r3, #2]
10042ad2:	001a      	movs	r2, r3
10042ad4:	2304      	movs	r3, #4
10042ad6:	4013      	ands	r3, r2
10042ad8:	d13a      	bne.n	10042b50 <ButtonsMenuSM_Event_Handler+0x350>
					if(!cursorpos){
10042ada:	4b1c      	ldr	r3, [pc, #112]	@ (10042b4c <ButtonsMenuSM_Event_Handler+0x34c>)
10042adc:	781b      	ldrb	r3, [r3, #0]
10042ade:	2b00      	cmp	r3, #0
10042ae0:	d10d      	bne.n	10042afe <ButtonsMenuSM_Event_Handler+0x2fe>
						folderselect--;
10042ae2:	4b14      	ldr	r3, [pc, #80]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042ae4:	781b      	ldrb	r3, [r3, #0]
10042ae6:	3b01      	subs	r3, #1
10042ae8:	b2da      	uxtb	r2, r3
10042aea:	4b12      	ldr	r3, [pc, #72]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042aec:	701a      	strb	r2, [r3, #0]
						if(folderselect==255){
10042aee:	4b11      	ldr	r3, [pc, #68]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042af0:	781b      	ldrb	r3, [r3, #0]
10042af2:	2bff      	cmp	r3, #255	@ 0xff
10042af4:	d10d      	bne.n	10042b12 <ButtonsMenuSM_Event_Handler+0x312>
							folderselect = 100;
10042af6:	4b0f      	ldr	r3, [pc, #60]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042af8:	2264      	movs	r2, #100	@ 0x64
10042afa:	701a      	strb	r2, [r3, #0]
10042afc:	e009      	b.n	10042b12 <ButtonsMenuSM_Event_Handler+0x312>
						}
					} else {
						trackselect--;
10042afe:	4b0e      	ldr	r3, [pc, #56]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b00:	781b      	ldrb	r3, [r3, #0]
10042b02:	3b01      	subs	r3, #1
10042b04:	b2da      	uxtb	r2, r3
10042b06:	4b0c      	ldr	r3, [pc, #48]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b08:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10042b0a:	4b0b      	ldr	r3, [pc, #44]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b0c:	781a      	ldrb	r2, [r3, #0]
10042b0e:	4b0a      	ldr	r3, [pc, #40]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b10:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042b12:	4b0e      	ldr	r3, [pc, #56]	@ (10042b4c <ButtonsMenuSM_Event_Handler+0x34c>)
10042b14:	7818      	ldrb	r0, [r3, #0]
10042b16:	4b07      	ldr	r3, [pc, #28]	@ (10042b34 <ButtonsMenuSM_Event_Handler+0x334>)
10042b18:	7819      	ldrb	r1, [r3, #0]
10042b1a:	4b07      	ldr	r3, [pc, #28]	@ (10042b38 <ButtonsMenuSM_Event_Handler+0x338>)
10042b1c:	781b      	ldrb	r3, [r3, #0]
10042b1e:	001a      	movs	r2, r3
10042b20:	f7ff fb5a 	bl	100421d8 <DrawFolder>
10042b24:	e08e      	b.n	10042c44 <ButtonsMenuSM_Event_Handler+0x444>
10042b26:	46c0      	nop			@ (mov r8, r8)
10042b28:	2000039c 	.word	0x2000039c
10042b2c:	2000039d 	.word	0x2000039d
10042b30:	1006966c 	.word	0x1006966c
10042b34:	2000039f 	.word	0x2000039f
10042b38:	200003a0 	.word	0x200003a0
10042b3c:	200003a1 	.word	0x200003a1
10042b40:	200003a2 	.word	0x200003a2
10042b44:	200003a3 	.word	0x200003a3
10042b48:	200003a4 	.word	0x200003a4
10042b4c:	2000039e 	.word	0x2000039e

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042b50:	1d3b      	adds	r3, r7, #4
10042b52:	885b      	ldrh	r3, [r3, #2]
10042b54:	001a      	movs	r2, r3
10042b56:	2380      	movs	r3, #128	@ 0x80
10042b58:	011b      	lsls	r3, r3, #4
10042b5a:	4013      	ands	r3, r2
10042b5c:	d02f      	beq.n	10042bbe <ButtonsMenuSM_Event_Handler+0x3be>
10042b5e:	1d3b      	adds	r3, r7, #4
10042b60:	885b      	ldrh	r3, [r3, #2]
10042b62:	001a      	movs	r2, r3
10042b64:	2308      	movs	r3, #8
10042b66:	4013      	ands	r3, r2
10042b68:	d129      	bne.n	10042bbe <ButtonsMenuSM_Event_Handler+0x3be>
					if(!cursorpos){
10042b6a:	4bd1      	ldr	r3, [pc, #836]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042b6c:	781b      	ldrb	r3, [r3, #0]
10042b6e:	2b00      	cmp	r3, #0
10042b70:	d110      	bne.n	10042b94 <ButtonsMenuSM_Event_Handler+0x394>
						folderselect++;
10042b72:	4bd0      	ldr	r3, [pc, #832]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042b74:	781b      	ldrb	r3, [r3, #0]
10042b76:	3301      	adds	r3, #1
10042b78:	b2da      	uxtb	r2, r3
10042b7a:	4bce      	ldr	r3, [pc, #824]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042b7c:	701a      	strb	r2, [r3, #0]
						folderselect %= 100;
10042b7e:	4bcd      	ldr	r3, [pc, #820]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042b80:	781b      	ldrb	r3, [r3, #0]
10042b82:	2164      	movs	r1, #100	@ 0x64
10042b84:	0018      	movs	r0, r3
10042b86:	f7fd fbe1 	bl	1004034c <__aeabi_uidivmod>
10042b8a:	000b      	movs	r3, r1
10042b8c:	b2da      	uxtb	r2, r3
10042b8e:	4bc9      	ldr	r3, [pc, #804]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042b90:	701a      	strb	r2, [r3, #0]
10042b92:	e009      	b.n	10042ba8 <ButtonsMenuSM_Event_Handler+0x3a8>
					} else {
						trackselect++;
10042b94:	4bc8      	ldr	r3, [pc, #800]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042b96:	781b      	ldrb	r3, [r3, #0]
10042b98:	3301      	adds	r3, #1
10042b9a:	b2da      	uxtb	r2, r3
10042b9c:	4bc6      	ldr	r3, [pc, #792]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042b9e:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10042ba0:	4bc5      	ldr	r3, [pc, #788]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042ba2:	781a      	ldrb	r2, [r3, #0]
10042ba4:	4bc4      	ldr	r3, [pc, #784]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042ba6:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042ba8:	4bc1      	ldr	r3, [pc, #772]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042baa:	7818      	ldrb	r0, [r3, #0]
10042bac:	4bc1      	ldr	r3, [pc, #772]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042bae:	7819      	ldrb	r1, [r3, #0]
10042bb0:	4bc1      	ldr	r3, [pc, #772]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042bb2:	781b      	ldrb	r3, [r3, #0]
10042bb4:	001a      	movs	r2, r3
10042bb6:	f7ff fb0f 	bl	100421d8 <DrawFolder>
					break;
10042bba:	f000 ff9b 	bl	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042bbe:	1d3b      	adds	r3, r7, #4
10042bc0:	885b      	ldrh	r3, [r3, #2]
10042bc2:	001a      	movs	r2, r3
10042bc4:	2380      	movs	r3, #128	@ 0x80
10042bc6:	015b      	lsls	r3, r3, #5
10042bc8:	4013      	ands	r3, r2
10042bca:	d017      	beq.n	10042bfc <ButtonsMenuSM_Event_Handler+0x3fc>
10042bcc:	1d3b      	adds	r3, r7, #4
10042bce:	885b      	ldrh	r3, [r3, #2]
10042bd0:	001a      	movs	r2, r3
10042bd2:	2310      	movs	r3, #16
10042bd4:	4013      	ands	r3, r2
10042bd6:	d111      	bne.n	10042bfc <ButtonsMenuSM_Event_Handler+0x3fc>
					cursorpos = !cursorpos;
10042bd8:	4bb5      	ldr	r3, [pc, #724]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042bda:	781b      	ldrb	r3, [r3, #0]
10042bdc:	425a      	negs	r2, r3
10042bde:	4153      	adcs	r3, r2
10042be0:	b2db      	uxtb	r3, r3
10042be2:	001a      	movs	r2, r3
10042be4:	4bb2      	ldr	r3, [pc, #712]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042be6:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10042be8:	4bb1      	ldr	r3, [pc, #708]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042bea:	7818      	ldrb	r0, [r3, #0]
10042bec:	4bb1      	ldr	r3, [pc, #708]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042bee:	7819      	ldrb	r1, [r3, #0]
10042bf0:	4bb1      	ldr	r3, [pc, #708]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042bf2:	781b      	ldrb	r3, [r3, #0]
10042bf4:	001a      	movs	r2, r3
10042bf6:	f7ff faef 	bl	100421d8 <DrawFolder>
10042bfa:	e023      	b.n	10042c44 <ButtonsMenuSM_Event_Handler+0x444>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10042bfc:	1d3b      	adds	r3, r7, #4
10042bfe:	885b      	ldrh	r3, [r3, #2]
10042c00:	001a      	movs	r2, r3
10042c02:	2380      	movs	r3, #128	@ 0x80
10042c04:	019b      	lsls	r3, r3, #6
10042c06:	4013      	ands	r3, r2
10042c08:	d101      	bne.n	10042c0e <ButtonsMenuSM_Event_Handler+0x40e>
10042c0a:	f000 ff6a 	bl	10043ae2 <ButtonsMenuSM_Event_Handler+0x12e2>
10042c0e:	1d3b      	adds	r3, r7, #4
10042c10:	885b      	ldrh	r3, [r3, #2]
10042c12:	001a      	movs	r2, r3
10042c14:	2320      	movs	r3, #32
10042c16:	4013      	ands	r3, r2
10042c18:	d001      	beq.n	10042c1e <ButtonsMenuSM_Event_Handler+0x41e>
10042c1a:	f000 ff62 	bl	10043ae2 <ButtonsMenuSM_Event_Handler+0x12e2>
					cursorpos = !cursorpos;
10042c1e:	4ba4      	ldr	r3, [pc, #656]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c20:	781b      	ldrb	r3, [r3, #0]
10042c22:	425a      	negs	r2, r3
10042c24:	4153      	adcs	r3, r2
10042c26:	b2db      	uxtb	r3, r3
10042c28:	001a      	movs	r2, r3
10042c2a:	4ba1      	ldr	r3, [pc, #644]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c2c:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10042c2e:	4ba0      	ldr	r3, [pc, #640]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c30:	7818      	ldrb	r0, [r3, #0]
10042c32:	4ba0      	ldr	r3, [pc, #640]	@ (10042eb4 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042c34:	7819      	ldrb	r1, [r3, #0]
10042c36:	4ba0      	ldr	r3, [pc, #640]	@ (10042eb8 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042c38:	781b      	ldrb	r3, [r3, #0]
10042c3a:	001a      	movs	r2, r3
10042c3c:	f7ff facc 	bl	100421d8 <DrawFolder>
				}
			}
			break;
10042c40:	f000 ff4f 	bl	10043ae2 <ButtonsMenuSM_Event_Handler+0x12e2>
10042c44:	f000 ff4d 	bl	10043ae2 <ButtonsMenuSM_Event_Handler+0x12e2>
		case scheduleTime:
			if(event.status == EVENT_ENTRY){
10042c48:	1d3b      	adds	r3, r7, #4
10042c4a:	781b      	ldrb	r3, [r3, #0]
10042c4c:	b25b      	sxtb	r3, r3
10042c4e:	2b02      	cmp	r3, #2
10042c50:	d112      	bne.n	10042c78 <ButtonsMenuSM_Event_Handler+0x478>
				cursorpos = 0;
10042c52:	4b97      	ldr	r3, [pc, #604]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c54:	2200      	movs	r2, #0
10042c56:	701a      	strb	r2, [r3, #0]
				DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042c58:	4b95      	ldr	r3, [pc, #596]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042c5a:	7818      	ldrb	r0, [r3, #0]
10042c5c:	4b97      	ldr	r3, [pc, #604]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042c5e:	7819      	ldrb	r1, [r3, #0]
10042c60:	4b97      	ldr	r3, [pc, #604]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042c62:	781b      	ldrb	r3, [r3, #0]
10042c64:	3301      	adds	r3, #1
10042c66:	b2da      	uxtb	r2, r3
10042c68:	4b96      	ldr	r3, [pc, #600]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042c6a:	781c      	ldrb	r4, [r3, #0]
10042c6c:	4b96      	ldr	r3, [pc, #600]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042c6e:	781b      	ldrb	r3, [r3, #0]
10042c70:	9300      	str	r3, [sp, #0]
10042c72:	0023      	movs	r3, r4
10042c74:	f7ff fbfc 	bl	10042470 <DrawSchedule>
			}
			if(event.status == EVENT_BUTTONS){
10042c78:	1d3b      	adds	r3, r7, #4
10042c7a:	781b      	ldrb	r3, [r3, #0]
10042c7c:	b25b      	sxtb	r3, r3
10042c7e:	2b04      	cmp	r3, #4
10042c80:	d001      	beq.n	10042c86 <ButtonsMenuSM_Event_Handler+0x486>
10042c82:	f000 ff30 	bl	10043ae6 <ButtonsMenuSM_Event_Handler+0x12e6>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042c86:	1d3b      	adds	r3, r7, #4
10042c88:	885b      	ldrh	r3, [r3, #2]
10042c8a:	001a      	movs	r2, r3
10042c8c:	2380      	movs	r3, #128	@ 0x80
10042c8e:	005b      	lsls	r3, r3, #1
10042c90:	4013      	ands	r3, r2
10042c92:	d00e      	beq.n	10042cb2 <ButtonsMenuSM_Event_Handler+0x4b2>
10042c94:	1d3b      	adds	r3, r7, #4
10042c96:	885b      	ldrh	r3, [r3, #2]
10042c98:	001a      	movs	r2, r3
10042c9a:	2301      	movs	r3, #1
10042c9c:	4013      	ands	r3, r2
10042c9e:	d108      	bne.n	10042cb2 <ButtonsMenuSM_Event_Handler+0x4b2>
					nextstate = main;
10042ca0:	232e      	movs	r3, #46	@ 0x2e
10042ca2:	18fb      	adds	r3, r7, r3
10042ca4:	2200      	movs	r2, #0
10042ca6:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042ca8:	232f      	movs	r3, #47	@ 0x2f
10042caa:	18fb      	adds	r3, r7, r3
10042cac:	2201      	movs	r2, #1
10042cae:	701a      	strb	r2, [r3, #0]
10042cb0:	e1e6      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042cb2:	1d3b      	adds	r3, r7, #4
10042cb4:	885b      	ldrh	r3, [r3, #2]
10042cb6:	001a      	movs	r2, r3
10042cb8:	2380      	movs	r3, #128	@ 0x80
10042cba:	009b      	lsls	r3, r3, #2
10042cbc:	4013      	ands	r3, r2
10042cbe:	d00e      	beq.n	10042cde <ButtonsMenuSM_Event_Handler+0x4de>
10042cc0:	1d3b      	adds	r3, r7, #4
10042cc2:	885b      	ldrh	r3, [r3, #2]
10042cc4:	001a      	movs	r2, r3
10042cc6:	2302      	movs	r3, #2
10042cc8:	4013      	ands	r3, r2
10042cca:	d108      	bne.n	10042cde <ButtonsMenuSM_Event_Handler+0x4de>
					nextstate = scheduleFolder;
10042ccc:	232e      	movs	r3, #46	@ 0x2e
10042cce:	18fb      	adds	r3, r7, r3
10042cd0:	2203      	movs	r2, #3
10042cd2:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042cd4:	232f      	movs	r3, #47	@ 0x2f
10042cd6:	18fb      	adds	r3, r7, r3
10042cd8:	2201      	movs	r2, #1
10042cda:	701a      	strb	r2, [r3, #0]
10042cdc:	e1d0      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042cde:	1d3b      	adds	r3, r7, #4
10042ce0:	885b      	ldrh	r3, [r3, #2]
10042ce2:	001a      	movs	r2, r3
10042ce4:	2380      	movs	r3, #128	@ 0x80
10042ce6:	00db      	lsls	r3, r3, #3
10042ce8:	4013      	ands	r3, r2
10042cea:	d100      	bne.n	10042cee <ButtonsMenuSM_Event_Handler+0x4ee>
10042cec:	e0a5      	b.n	10042e3a <ButtonsMenuSM_Event_Handler+0x63a>
10042cee:	1d3b      	adds	r3, r7, #4
10042cf0:	885b      	ldrh	r3, [r3, #2]
10042cf2:	001a      	movs	r2, r3
10042cf4:	2304      	movs	r3, #4
10042cf6:	4013      	ands	r3, r2
10042cf8:	d000      	beq.n	10042cfc <ButtonsMenuSM_Event_Handler+0x4fc>
10042cfa:	e09e      	b.n	10042e3a <ButtonsMenuSM_Event_Handler+0x63a>
					switch(cursorpos){
10042cfc:	4b6c      	ldr	r3, [pc, #432]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042cfe:	781b      	ldrb	r3, [r3, #0]
10042d00:	2b05      	cmp	r3, #5
10042d02:	d900      	bls.n	10042d06 <ButtonsMenuSM_Event_Handler+0x506>
10042d04:	e083      	b.n	10042e0e <ButtonsMenuSM_Event_Handler+0x60e>
10042d06:	009a      	lsls	r2, r3, #2
10042d08:	4b70      	ldr	r3, [pc, #448]	@ (10042ecc <ButtonsMenuSM_Event_Handler+0x6cc>)
10042d0a:	18d3      	adds	r3, r2, r3
10042d0c:	681b      	ldr	r3, [r3, #0]
10042d0e:	469f      	mov	pc, r3
					case 0:
						monthselect--;
10042d10:	4b6a      	ldr	r3, [pc, #424]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042d12:	781b      	ldrb	r3, [r3, #0]
10042d14:	3b01      	subs	r3, #1
10042d16:	b2da      	uxtb	r2, r3
10042d18:	4b68      	ldr	r3, [pc, #416]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042d1a:	701a      	strb	r2, [r3, #0]
						if (monthselect == 255){
10042d1c:	4b67      	ldr	r3, [pc, #412]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042d1e:	781b      	ldrb	r3, [r3, #0]
10042d20:	2bff      	cmp	r3, #255	@ 0xff
10042d22:	d000      	beq.n	10042d26 <ButtonsMenuSM_Event_Handler+0x526>
10042d24:	e075      	b.n	10042e12 <ButtonsMenuSM_Event_Handler+0x612>
							monthselect = 12;
10042d26:	4b65      	ldr	r3, [pc, #404]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042d28:	220c      	movs	r2, #12
10042d2a:	701a      	strb	r2, [r3, #0]
						}
						break;
10042d2c:	e071      	b.n	10042e12 <ButtonsMenuSM_Event_Handler+0x612>
					case 1:
						dayselect--;
10042d2e:	4b64      	ldr	r3, [pc, #400]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042d30:	781b      	ldrb	r3, [r3, #0]
10042d32:	3b01      	subs	r3, #1
10042d34:	b2da      	uxtb	r2, r3
10042d36:	4b62      	ldr	r3, [pc, #392]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042d38:	701a      	strb	r2, [r3, #0]
						if (dayselect == 255){
10042d3a:	4b61      	ldr	r3, [pc, #388]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042d3c:	781b      	ldrb	r3, [r3, #0]
10042d3e:	2bff      	cmp	r3, #255	@ 0xff
10042d40:	d169      	bne.n	10042e16 <ButtonsMenuSM_Event_Handler+0x616>
							dayselect = 30;
10042d42:	4b5f      	ldr	r3, [pc, #380]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042d44:	221e      	movs	r2, #30
10042d46:	701a      	strb	r2, [r3, #0]
						}
						break;
10042d48:	e065      	b.n	10042e16 <ButtonsMenuSM_Event_Handler+0x616>
					case 2:
						if((Stimeselect&0b11111000) == 0){
10042d4a:	4b5e      	ldr	r3, [pc, #376]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d4c:	781b      	ldrb	r3, [r3, #0]
10042d4e:	001a      	movs	r2, r3
10042d50:	23f8      	movs	r3, #248	@ 0xf8
10042d52:	4013      	ands	r3, r2
10042d54:	d10d      	bne.n	10042d72 <ButtonsMenuSM_Event_Handler+0x572>
							Stimeselect = 0b10111000 | (Stimeselect&0b11);//23:XX
10042d56:	4b5b      	ldr	r3, [pc, #364]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d58:	781b      	ldrb	r3, [r3, #0]
10042d5a:	b25b      	sxtb	r3, r3
10042d5c:	2203      	movs	r2, #3
10042d5e:	4013      	ands	r3, r2
10042d60:	b25b      	sxtb	r3, r3
10042d62:	2248      	movs	r2, #72	@ 0x48
10042d64:	4252      	negs	r2, r2
10042d66:	4313      	orrs	r3, r2
10042d68:	b25b      	sxtb	r3, r3
10042d6a:	b2da      	uxtb	r2, r3
10042d6c:	4b55      	ldr	r3, [pc, #340]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d6e:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect -= 0b00001000;
						}
						break;
10042d70:	e052      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
							Stimeselect -= 0b00001000;
10042d72:	4b54      	ldr	r3, [pc, #336]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d74:	781b      	ldrb	r3, [r3, #0]
10042d76:	3b08      	subs	r3, #8
10042d78:	b2da      	uxtb	r2, r3
10042d7a:	4b52      	ldr	r3, [pc, #328]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d7c:	701a      	strb	r2, [r3, #0]
						break;
10042d7e:	e04b      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
					case 3:
						if(Stimeselect == 0){
10042d80:	4b50      	ldr	r3, [pc, #320]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d82:	781b      	ldrb	r3, [r3, #0]
10042d84:	2b00      	cmp	r3, #0
10042d86:	d103      	bne.n	10042d90 <ButtonsMenuSM_Event_Handler+0x590>
							Stimeselect = 0b10111011;//23:45
10042d88:	4b4e      	ldr	r3, [pc, #312]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d8a:	22bb      	movs	r2, #187	@ 0xbb
10042d8c:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect--;
							Stimeselect &= 0b11111011;
						}
						break;
10042d8e:	e043      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
							Stimeselect--;
10042d90:	4b4c      	ldr	r3, [pc, #304]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d92:	781b      	ldrb	r3, [r3, #0]
10042d94:	3b01      	subs	r3, #1
10042d96:	b2da      	uxtb	r2, r3
10042d98:	4b4a      	ldr	r3, [pc, #296]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d9a:	701a      	strb	r2, [r3, #0]
							Stimeselect &= 0b11111011;
10042d9c:	4b49      	ldr	r3, [pc, #292]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042d9e:	781b      	ldrb	r3, [r3, #0]
10042da0:	2204      	movs	r2, #4
10042da2:	4393      	bics	r3, r2
10042da4:	b2da      	uxtb	r2, r3
10042da6:	4b47      	ldr	r3, [pc, #284]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042da8:	701a      	strb	r2, [r3, #0]
						break;
10042daa:	e035      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
					case 4:
						if((Etimeselect&0b11111000) == 0){
10042dac:	4b46      	ldr	r3, [pc, #280]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dae:	781b      	ldrb	r3, [r3, #0]
10042db0:	001a      	movs	r2, r3
10042db2:	23f8      	movs	r3, #248	@ 0xf8
10042db4:	4013      	ands	r3, r2
10042db6:	d10d      	bne.n	10042dd4 <ButtonsMenuSM_Event_Handler+0x5d4>
							Etimeselect = 0b10111000 | (Etimeselect&0b11);//23:XX
10042db8:	4b43      	ldr	r3, [pc, #268]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dba:	781b      	ldrb	r3, [r3, #0]
10042dbc:	b25b      	sxtb	r3, r3
10042dbe:	2203      	movs	r2, #3
10042dc0:	4013      	ands	r3, r2
10042dc2:	b25b      	sxtb	r3, r3
10042dc4:	2248      	movs	r2, #72	@ 0x48
10042dc6:	4252      	negs	r2, r2
10042dc8:	4313      	orrs	r3, r2
10042dca:	b25b      	sxtb	r3, r3
10042dcc:	b2da      	uxtb	r2, r3
10042dce:	4b3e      	ldr	r3, [pc, #248]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dd0:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect -= 0b00001000;
						}break;
10042dd2:	e021      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
							Etimeselect -= 0b00001000;
10042dd4:	4b3c      	ldr	r3, [pc, #240]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dd6:	781b      	ldrb	r3, [r3, #0]
10042dd8:	3b08      	subs	r3, #8
10042dda:	b2da      	uxtb	r2, r3
10042ddc:	4b3a      	ldr	r3, [pc, #232]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dde:	701a      	strb	r2, [r3, #0]
						}break;
10042de0:	e01a      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
					case 5:
						if(Etimeselect == 0){
10042de2:	4b39      	ldr	r3, [pc, #228]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042de4:	781b      	ldrb	r3, [r3, #0]
10042de6:	2b00      	cmp	r3, #0
10042de8:	d103      	bne.n	10042df2 <ButtonsMenuSM_Event_Handler+0x5f2>
							Etimeselect = 0b10111011;//23:45
10042dea:	4b37      	ldr	r3, [pc, #220]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dec:	22bb      	movs	r2, #187	@ 0xbb
10042dee:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect--;
							Etimeselect &= 0b11111011;
						}
						break;
10042df0:	e012      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
							Etimeselect--;
10042df2:	4b35      	ldr	r3, [pc, #212]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042df4:	781b      	ldrb	r3, [r3, #0]
10042df6:	3b01      	subs	r3, #1
10042df8:	b2da      	uxtb	r2, r3
10042dfa:	4b33      	ldr	r3, [pc, #204]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042dfc:	701a      	strb	r2, [r3, #0]
							Etimeselect &= 0b11111011;
10042dfe:	4b32      	ldr	r3, [pc, #200]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042e00:	781b      	ldrb	r3, [r3, #0]
10042e02:	2204      	movs	r2, #4
10042e04:	4393      	bics	r3, r2
10042e06:	b2da      	uxtb	r2, r3
10042e08:	4b2f      	ldr	r3, [pc, #188]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042e0a:	701a      	strb	r2, [r3, #0]
						break;
10042e0c:	e004      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
					default:
						break;
10042e0e:	46c0      	nop			@ (mov r8, r8)
10042e10:	e002      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
						break;
10042e12:	46c0      	nop			@ (mov r8, r8)
10042e14:	e000      	b.n	10042e18 <ButtonsMenuSM_Event_Handler+0x618>
						break;
10042e16:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042e18:	4b25      	ldr	r3, [pc, #148]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042e1a:	7818      	ldrb	r0, [r3, #0]
10042e1c:	4b27      	ldr	r3, [pc, #156]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e1e:	7819      	ldrb	r1, [r3, #0]
10042e20:	4b27      	ldr	r3, [pc, #156]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042e22:	781b      	ldrb	r3, [r3, #0]
10042e24:	3301      	adds	r3, #1
10042e26:	b2da      	uxtb	r2, r3
10042e28:	4b26      	ldr	r3, [pc, #152]	@ (10042ec4 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042e2a:	781c      	ldrb	r4, [r3, #0]
10042e2c:	4b26      	ldr	r3, [pc, #152]	@ (10042ec8 <ButtonsMenuSM_Event_Handler+0x6c8>)
10042e2e:	781b      	ldrb	r3, [r3, #0]
10042e30:	9300      	str	r3, [sp, #0]
10042e32:	0023      	movs	r3, r4
10042e34:	f7ff fb1c 	bl	10042470 <DrawSchedule>
10042e38:	e122      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042e3a:	1d3b      	adds	r3, r7, #4
10042e3c:	885b      	ldrh	r3, [r3, #2]
10042e3e:	001a      	movs	r2, r3
10042e40:	2380      	movs	r3, #128	@ 0x80
10042e42:	011b      	lsls	r3, r3, #4
10042e44:	4013      	ands	r3, r2
10042e46:	d100      	bne.n	10042e4a <ButtonsMenuSM_Event_Handler+0x64a>
10042e48:	e0bc      	b.n	10042fc4 <ButtonsMenuSM_Event_Handler+0x7c4>
10042e4a:	1d3b      	adds	r3, r7, #4
10042e4c:	885b      	ldrh	r3, [r3, #2]
10042e4e:	001a      	movs	r2, r3
10042e50:	2308      	movs	r3, #8
10042e52:	4013      	ands	r3, r2
10042e54:	d000      	beq.n	10042e58 <ButtonsMenuSM_Event_Handler+0x658>
10042e56:	e0b5      	b.n	10042fc4 <ButtonsMenuSM_Event_Handler+0x7c4>
					switch(cursorpos){
10042e58:	4b15      	ldr	r3, [pc, #84]	@ (10042eb0 <ButtonsMenuSM_Event_Handler+0x6b0>)
10042e5a:	781b      	ldrb	r3, [r3, #0]
10042e5c:	2b05      	cmp	r3, #5
10042e5e:	d900      	bls.n	10042e62 <ButtonsMenuSM_Event_Handler+0x662>
10042e60:	e09a      	b.n	10042f98 <ButtonsMenuSM_Event_Handler+0x798>
10042e62:	009a      	lsls	r2, r3, #2
10042e64:	4b1a      	ldr	r3, [pc, #104]	@ (10042ed0 <ButtonsMenuSM_Event_Handler+0x6d0>)
10042e66:	18d3      	adds	r3, r2, r3
10042e68:	681b      	ldr	r3, [r3, #0]
10042e6a:	469f      	mov	pc, r3
					case 0:
						monthselect++;
10042e6c:	4b13      	ldr	r3, [pc, #76]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e6e:	781b      	ldrb	r3, [r3, #0]
10042e70:	3301      	adds	r3, #1
10042e72:	b2da      	uxtb	r2, r3
10042e74:	4b11      	ldr	r3, [pc, #68]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e76:	701a      	strb	r2, [r3, #0]
						monthselect %= 13;
10042e78:	4b10      	ldr	r3, [pc, #64]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e7a:	781b      	ldrb	r3, [r3, #0]
10042e7c:	210d      	movs	r1, #13
10042e7e:	0018      	movs	r0, r3
10042e80:	f7fd fa64 	bl	1004034c <__aeabi_uidivmod>
10042e84:	000b      	movs	r3, r1
10042e86:	b2da      	uxtb	r2, r3
10042e88:	4b0c      	ldr	r3, [pc, #48]	@ (10042ebc <ButtonsMenuSM_Event_Handler+0x6bc>)
10042e8a:	701a      	strb	r2, [r3, #0]
						break;
10042e8c:	e089      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 1:
						dayselect++;
10042e8e:	4b0c      	ldr	r3, [pc, #48]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042e90:	781b      	ldrb	r3, [r3, #0]
10042e92:	3301      	adds	r3, #1
10042e94:	b2da      	uxtb	r2, r3
10042e96:	4b0a      	ldr	r3, [pc, #40]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042e98:	701a      	strb	r2, [r3, #0]
						dayselect%=31;
10042e9a:	4b09      	ldr	r3, [pc, #36]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042e9c:	781b      	ldrb	r3, [r3, #0]
10042e9e:	211f      	movs	r1, #31
10042ea0:	0018      	movs	r0, r3
10042ea2:	f7fd fa53 	bl	1004034c <__aeabi_uidivmod>
10042ea6:	000b      	movs	r3, r1
10042ea8:	b2da      	uxtb	r2, r3
10042eaa:	4b05      	ldr	r3, [pc, #20]	@ (10042ec0 <ButtonsMenuSM_Event_Handler+0x6c0>)
10042eac:	701a      	strb	r2, [r3, #0]
						break;
10042eae:	e078      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
10042eb0:	2000039e 	.word	0x2000039e
10042eb4:	2000039f 	.word	0x2000039f
10042eb8:	200003a0 	.word	0x200003a0
10042ebc:	200003a1 	.word	0x200003a1
10042ec0:	200003a2 	.word	0x200003a2
10042ec4:	200003a3 	.word	0x200003a3
10042ec8:	200003a4 	.word	0x200003a4
10042ecc:	10069684 	.word	0x10069684
10042ed0:	1006969c 	.word	0x1006969c
					case 2:
						if((Stimeselect&0b11111000) == 0b10111000){
10042ed4:	4bca      	ldr	r3, [pc, #808]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042ed6:	781b      	ldrb	r3, [r3, #0]
10042ed8:	001a      	movs	r2, r3
10042eda:	23f8      	movs	r3, #248	@ 0xf8
10042edc:	4013      	ands	r3, r2
10042ede:	2bb8      	cmp	r3, #184	@ 0xb8
10042ee0:	d107      	bne.n	10042ef2 <ButtonsMenuSM_Event_Handler+0x6f2>
							Stimeselect &= 0b00000011;
10042ee2:	4bc7      	ldr	r3, [pc, #796]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042ee4:	781b      	ldrb	r3, [r3, #0]
10042ee6:	2203      	movs	r2, #3
10042ee8:	4013      	ands	r3, r2
10042eea:	b2da      	uxtb	r2, r3
10042eec:	4bc4      	ldr	r3, [pc, #784]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042eee:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect += 0b00001000;
						}
						break;
10042ef0:	e057      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
							Stimeselect += 0b00001000;
10042ef2:	4bc3      	ldr	r3, [pc, #780]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042ef4:	781b      	ldrb	r3, [r3, #0]
10042ef6:	3308      	adds	r3, #8
10042ef8:	b2da      	uxtb	r2, r3
10042efa:	4bc1      	ldr	r3, [pc, #772]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042efc:	701a      	strb	r2, [r3, #0]
						break;
10042efe:	e050      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 3:
						if(Stimeselect == 0b10111011){//23:45
10042f00:	4bbf      	ldr	r3, [pc, #764]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f02:	781b      	ldrb	r3, [r3, #0]
10042f04:	2bbb      	cmp	r3, #187	@ 0xbb
10042f06:	d103      	bne.n	10042f10 <ButtonsMenuSM_Event_Handler+0x710>
							Stimeselect = 0;//0:00
10042f08:	4bbd      	ldr	r3, [pc, #756]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f0a:	2200      	movs	r2, #0
10042f0c:	701a      	strb	r2, [r3, #0]
							Stimeselect++;
							if(Stimeselect & 0b00000100){
								Stimeselect += 0b00000100;
							}
						}
						break;
10042f0e:	e045      	b.n	10042f9c <ButtonsMenuSM_Event_Handler+0x79c>
							Stimeselect++;
10042f10:	4bbb      	ldr	r3, [pc, #748]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f12:	781b      	ldrb	r3, [r3, #0]
10042f14:	3301      	adds	r3, #1
10042f16:	b2da      	uxtb	r2, r3
10042f18:	4bb9      	ldr	r3, [pc, #740]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f1a:	701a      	strb	r2, [r3, #0]
							if(Stimeselect & 0b00000100){
10042f1c:	4bb8      	ldr	r3, [pc, #736]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f1e:	781b      	ldrb	r3, [r3, #0]
10042f20:	001a      	movs	r2, r3
10042f22:	2304      	movs	r3, #4
10042f24:	4013      	ands	r3, r2
10042f26:	d039      	beq.n	10042f9c <ButtonsMenuSM_Event_Handler+0x79c>
								Stimeselect += 0b00000100;
10042f28:	4bb5      	ldr	r3, [pc, #724]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f2a:	781b      	ldrb	r3, [r3, #0]
10042f2c:	3304      	adds	r3, #4
10042f2e:	b2da      	uxtb	r2, r3
10042f30:	4bb3      	ldr	r3, [pc, #716]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042f32:	701a      	strb	r2, [r3, #0]
						break;
10042f34:	e032      	b.n	10042f9c <ButtonsMenuSM_Event_Handler+0x79c>
					case 4:
						if((Etimeselect&0b11111000) == 0b10111000){
10042f36:	4bb3      	ldr	r3, [pc, #716]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f38:	781b      	ldrb	r3, [r3, #0]
10042f3a:	001a      	movs	r2, r3
10042f3c:	23f8      	movs	r3, #248	@ 0xf8
10042f3e:	4013      	ands	r3, r2
10042f40:	2bb8      	cmp	r3, #184	@ 0xb8
10042f42:	d107      	bne.n	10042f54 <ButtonsMenuSM_Event_Handler+0x754>
							Etimeselect &= 0b00000011;
10042f44:	4baf      	ldr	r3, [pc, #700]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f46:	781b      	ldrb	r3, [r3, #0]
10042f48:	2203      	movs	r2, #3
10042f4a:	4013      	ands	r3, r2
10042f4c:	b2da      	uxtb	r2, r3
10042f4e:	4bad      	ldr	r3, [pc, #692]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f50:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect += 0b00001000;
						}
						break;
10042f52:	e026      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
							Etimeselect += 0b00001000;
10042f54:	4bab      	ldr	r3, [pc, #684]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f56:	781b      	ldrb	r3, [r3, #0]
10042f58:	3308      	adds	r3, #8
10042f5a:	b2da      	uxtb	r2, r3
10042f5c:	4ba9      	ldr	r3, [pc, #676]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f5e:	701a      	strb	r2, [r3, #0]
						break;
10042f60:	e01f      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
					case 5:
						if(Etimeselect == 0b10111011){//23:45
10042f62:	4ba8      	ldr	r3, [pc, #672]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f64:	781b      	ldrb	r3, [r3, #0]
10042f66:	2bbb      	cmp	r3, #187	@ 0xbb
10042f68:	d103      	bne.n	10042f72 <ButtonsMenuSM_Event_Handler+0x772>
							Etimeselect = 0;//0:00
10042f6a:	4ba6      	ldr	r3, [pc, #664]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f6c:	2200      	movs	r2, #0
10042f6e:	701a      	strb	r2, [r3, #0]
							Etimeselect++;
							if(Etimeselect & 0b00000100){
								Etimeselect += 0b00000100;
							}
						}
						break;
10042f70:	e016      	b.n	10042fa0 <ButtonsMenuSM_Event_Handler+0x7a0>
							Etimeselect++;
10042f72:	4ba4      	ldr	r3, [pc, #656]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f74:	781b      	ldrb	r3, [r3, #0]
10042f76:	3301      	adds	r3, #1
10042f78:	b2da      	uxtb	r2, r3
10042f7a:	4ba2      	ldr	r3, [pc, #648]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f7c:	701a      	strb	r2, [r3, #0]
							if(Etimeselect & 0b00000100){
10042f7e:	4ba1      	ldr	r3, [pc, #644]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f80:	781b      	ldrb	r3, [r3, #0]
10042f82:	001a      	movs	r2, r3
10042f84:	2304      	movs	r3, #4
10042f86:	4013      	ands	r3, r2
10042f88:	d00a      	beq.n	10042fa0 <ButtonsMenuSM_Event_Handler+0x7a0>
								Etimeselect += 0b00000100;
10042f8a:	4b9e      	ldr	r3, [pc, #632]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f8c:	781b      	ldrb	r3, [r3, #0]
10042f8e:	3304      	adds	r3, #4
10042f90:	b2da      	uxtb	r2, r3
10042f92:	4b9c      	ldr	r3, [pc, #624]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042f94:	701a      	strb	r2, [r3, #0]
						break;
10042f96:	e003      	b.n	10042fa0 <ButtonsMenuSM_Event_Handler+0x7a0>
					default:
						break;
10042f98:	46c0      	nop			@ (mov r8, r8)
10042f9a:	e002      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
						break;
10042f9c:	46c0      	nop			@ (mov r8, r8)
10042f9e:	e000      	b.n	10042fa2 <ButtonsMenuSM_Event_Handler+0x7a2>
						break;
10042fa0:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042fa2:	4b99      	ldr	r3, [pc, #612]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042fa4:	7818      	ldrb	r0, [r3, #0]
10042fa6:	4b99      	ldr	r3, [pc, #612]	@ (1004320c <ButtonsMenuSM_Event_Handler+0xa0c>)
10042fa8:	7819      	ldrb	r1, [r3, #0]
10042faa:	4b99      	ldr	r3, [pc, #612]	@ (10043210 <ButtonsMenuSM_Event_Handler+0xa10>)
10042fac:	781b      	ldrb	r3, [r3, #0]
10042fae:	3301      	adds	r3, #1
10042fb0:	b2da      	uxtb	r2, r3
10042fb2:	4b93      	ldr	r3, [pc, #588]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10042fb4:	781c      	ldrb	r4, [r3, #0]
10042fb6:	4b93      	ldr	r3, [pc, #588]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10042fb8:	781b      	ldrb	r3, [r3, #0]
10042fba:	9300      	str	r3, [sp, #0]
10042fbc:	0023      	movs	r3, r4
10042fbe:	f7ff fa57 	bl	10042470 <DrawSchedule>
10042fc2:	e05d      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042fc4:	1d3b      	adds	r3, r7, #4
10042fc6:	885b      	ldrh	r3, [r3, #2]
10042fc8:	001a      	movs	r2, r3
10042fca:	2380      	movs	r3, #128	@ 0x80
10042fcc:	015b      	lsls	r3, r3, #5
10042fce:	4013      	ands	r3, r2
10042fd0:	d023      	beq.n	1004301a <ButtonsMenuSM_Event_Handler+0x81a>
10042fd2:	1d3b      	adds	r3, r7, #4
10042fd4:	885b      	ldrh	r3, [r3, #2]
10042fd6:	001a      	movs	r2, r3
10042fd8:	2310      	movs	r3, #16
10042fda:	4013      	ands	r3, r2
10042fdc:	d11d      	bne.n	1004301a <ButtonsMenuSM_Event_Handler+0x81a>
					cursorpos--;
10042fde:	4b8a      	ldr	r3, [pc, #552]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042fe0:	781b      	ldrb	r3, [r3, #0]
10042fe2:	3b01      	subs	r3, #1
10042fe4:	b2da      	uxtb	r2, r3
10042fe6:	4b88      	ldr	r3, [pc, #544]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042fe8:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10042fea:	4b87      	ldr	r3, [pc, #540]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042fec:	781b      	ldrb	r3, [r3, #0]
10042fee:	2bff      	cmp	r3, #255	@ 0xff
10042ff0:	d102      	bne.n	10042ff8 <ButtonsMenuSM_Event_Handler+0x7f8>
						cursorpos = 5;
10042ff2:	4b85      	ldr	r3, [pc, #532]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042ff4:	2205      	movs	r2, #5
10042ff6:	701a      	strb	r2, [r3, #0]
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042ff8:	4b83      	ldr	r3, [pc, #524]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10042ffa:	7818      	ldrb	r0, [r3, #0]
10042ffc:	4b83      	ldr	r3, [pc, #524]	@ (1004320c <ButtonsMenuSM_Event_Handler+0xa0c>)
10042ffe:	7819      	ldrb	r1, [r3, #0]
10043000:	4b83      	ldr	r3, [pc, #524]	@ (10043210 <ButtonsMenuSM_Event_Handler+0xa10>)
10043002:	781b      	ldrb	r3, [r3, #0]
10043004:	3301      	adds	r3, #1
10043006:	b2da      	uxtb	r2, r3
10043008:	4b7d      	ldr	r3, [pc, #500]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
1004300a:	781c      	ldrb	r4, [r3, #0]
1004300c:	4b7d      	ldr	r3, [pc, #500]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
1004300e:	781b      	ldrb	r3, [r3, #0]
10043010:	9300      	str	r3, [sp, #0]
10043012:	0023      	movs	r3, r4
10043014:	f7ff fa2c 	bl	10042470 <DrawSchedule>
10043018:	e032      	b.n	10043080 <ButtonsMenuSM_Event_Handler+0x880>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
1004301a:	1d3b      	adds	r3, r7, #4
1004301c:	885b      	ldrh	r3, [r3, #2]
1004301e:	001a      	movs	r2, r3
10043020:	2380      	movs	r3, #128	@ 0x80
10043022:	019b      	lsls	r3, r3, #6
10043024:	4013      	ands	r3, r2
10043026:	d101      	bne.n	1004302c <ButtonsMenuSM_Event_Handler+0x82c>
10043028:	f000 fd5d 	bl	10043ae6 <ButtonsMenuSM_Event_Handler+0x12e6>
1004302c:	1d3b      	adds	r3, r7, #4
1004302e:	885b      	ldrh	r3, [r3, #2]
10043030:	001a      	movs	r2, r3
10043032:	2320      	movs	r3, #32
10043034:	4013      	ands	r3, r2
10043036:	d001      	beq.n	1004303c <ButtonsMenuSM_Event_Handler+0x83c>
10043038:	f000 fd55 	bl	10043ae6 <ButtonsMenuSM_Event_Handler+0x12e6>
					cursorpos++;
1004303c:	4b72      	ldr	r3, [pc, #456]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
1004303e:	781b      	ldrb	r3, [r3, #0]
10043040:	3301      	adds	r3, #1
10043042:	b2da      	uxtb	r2, r3
10043044:	4b70      	ldr	r3, [pc, #448]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10043046:	701a      	strb	r2, [r3, #0]
					cursorpos %= 6;
10043048:	4b6f      	ldr	r3, [pc, #444]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
1004304a:	781b      	ldrb	r3, [r3, #0]
1004304c:	2106      	movs	r1, #6
1004304e:	0018      	movs	r0, r3
10043050:	f7fd f97c 	bl	1004034c <__aeabi_uidivmod>
10043054:	000b      	movs	r3, r1
10043056:	b2da      	uxtb	r2, r3
10043058:	4b6b      	ldr	r3, [pc, #428]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
1004305a:	701a      	strb	r2, [r3, #0]
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
1004305c:	4b6a      	ldr	r3, [pc, #424]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
1004305e:	7818      	ldrb	r0, [r3, #0]
10043060:	4b6a      	ldr	r3, [pc, #424]	@ (1004320c <ButtonsMenuSM_Event_Handler+0xa0c>)
10043062:	7819      	ldrb	r1, [r3, #0]
10043064:	4b6a      	ldr	r3, [pc, #424]	@ (10043210 <ButtonsMenuSM_Event_Handler+0xa10>)
10043066:	781b      	ldrb	r3, [r3, #0]
10043068:	3301      	adds	r3, #1
1004306a:	b2da      	uxtb	r2, r3
1004306c:	4b64      	ldr	r3, [pc, #400]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
1004306e:	781c      	ldrb	r4, [r3, #0]
10043070:	4b64      	ldr	r3, [pc, #400]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
10043072:	781b      	ldrb	r3, [r3, #0]
10043074:	9300      	str	r3, [sp, #0]
10043076:	0023      	movs	r3, r4
10043078:	f7ff f9fa 	bl	10042470 <DrawSchedule>
				}
			}
			break;
1004307c:	f000 fd33 	bl	10043ae6 <ButtonsMenuSM_Event_Handler+0x12e6>
10043080:	f000 fd31 	bl	10043ae6 <ButtonsMenuSM_Event_Handler+0x12e6>
		case scheduleFolder:
			if(event.status == EVENT_ENTRY){
10043084:	1d3b      	adds	r3, r7, #4
10043086:	781b      	ldrb	r3, [r3, #0]
10043088:	b25b      	sxtb	r3, r3
1004308a:	2b02      	cmp	r3, #2
1004308c:	d10b      	bne.n	100430a6 <ButtonsMenuSM_Event_Handler+0x8a6>
				cursorpos = 0;
1004308e:	4b5e      	ldr	r3, [pc, #376]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10043090:	2200      	movs	r2, #0
10043092:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
10043094:	4b5c      	ldr	r3, [pc, #368]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10043096:	7818      	ldrb	r0, [r3, #0]
10043098:	4b5e      	ldr	r3, [pc, #376]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
1004309a:	7819      	ldrb	r1, [r3, #0]
1004309c:	4b5e      	ldr	r3, [pc, #376]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
1004309e:	781b      	ldrb	r3, [r3, #0]
100430a0:	001a      	movs	r2, r3
100430a2:	f7ff f899 	bl	100421d8 <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
100430a6:	1d3b      	adds	r3, r7, #4
100430a8:	781b      	ldrb	r3, [r3, #0]
100430aa:	b25b      	sxtb	r3, r3
100430ac:	2b04      	cmp	r3, #4
100430ae:	d001      	beq.n	100430b4 <ButtonsMenuSM_Event_Handler+0x8b4>
100430b0:	f000 fd1b 	bl	10043aea <ButtonsMenuSM_Event_Handler+0x12ea>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
100430b4:	1d3b      	adds	r3, r7, #4
100430b6:	885b      	ldrh	r3, [r3, #2]
100430b8:	001a      	movs	r2, r3
100430ba:	2380      	movs	r3, #128	@ 0x80
100430bc:	005b      	lsls	r3, r3, #1
100430be:	4013      	ands	r3, r2
100430c0:	d00e      	beq.n	100430e0 <ButtonsMenuSM_Event_Handler+0x8e0>
100430c2:	1d3b      	adds	r3, r7, #4
100430c4:	885b      	ldrh	r3, [r3, #2]
100430c6:	001a      	movs	r2, r3
100430c8:	2301      	movs	r3, #1
100430ca:	4013      	ands	r3, r2
100430cc:	d108      	bne.n	100430e0 <ButtonsMenuSM_Event_Handler+0x8e0>
					//discountprintf("moving to schedule stop");
					nextstate = scheduleTime;
100430ce:	232e      	movs	r3, #46	@ 0x2e
100430d0:	18fb      	adds	r3, r7, r3
100430d2:	2202      	movs	r2, #2
100430d4:	701a      	strb	r2, [r3, #0]
					transition = 1;
100430d6:	232f      	movs	r3, #47	@ 0x2f
100430d8:	18fb      	adds	r3, r7, r3
100430da:	2201      	movs	r2, #1
100430dc:	701a      	strb	r2, [r3, #0]
100430de:	e0f4      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100430e0:	1d3b      	adds	r3, r7, #4
100430e2:	885b      	ldrh	r3, [r3, #2]
100430e4:	001a      	movs	r2, r3
100430e6:	2380      	movs	r3, #128	@ 0x80
100430e8:	009b      	lsls	r3, r3, #2
100430ea:	4013      	ands	r3, r2
100430ec:	d032      	beq.n	10043154 <ButtonsMenuSM_Event_Handler+0x954>
100430ee:	1d3b      	adds	r3, r7, #4
100430f0:	885b      	ldrh	r3, [r3, #2]
100430f2:	001a      	movs	r2, r3
100430f4:	2302      	movs	r3, #2
100430f6:	4013      	ands	r3, r2
100430f8:	d12c      	bne.n	10043154 <ButtonsMenuSM_Event_Handler+0x954>
					//discountprintf("moving to main");
					scheduleEvent sevent;
					sevent.month = monthselect;
100430fa:	4b44      	ldr	r3, [pc, #272]	@ (1004320c <ButtonsMenuSM_Event_Handler+0xa0c>)
100430fc:	781a      	ldrb	r2, [r3, #0]
100430fe:	211c      	movs	r1, #28
10043100:	187b      	adds	r3, r7, r1
10043102:	701a      	strb	r2, [r3, #0]
					sevent.day = dayselect+1;
10043104:	4b42      	ldr	r3, [pc, #264]	@ (10043210 <ButtonsMenuSM_Event_Handler+0xa10>)
10043106:	781b      	ldrb	r3, [r3, #0]
10043108:	3301      	adds	r3, #1
1004310a:	b2da      	uxtb	r2, r3
1004310c:	187b      	adds	r3, r7, r1
1004310e:	705a      	strb	r2, [r3, #1]
					sevent.start = Stimeselect;
10043110:	4b3b      	ldr	r3, [pc, #236]	@ (10043200 <ButtonsMenuSM_Event_Handler+0xa00>)
10043112:	781a      	ldrb	r2, [r3, #0]
10043114:	187b      	adds	r3, r7, r1
10043116:	709a      	strb	r2, [r3, #2]
					sevent.stop = Etimeselect;
10043118:	4b3a      	ldr	r3, [pc, #232]	@ (10043204 <ButtonsMenuSM_Event_Handler+0xa04>)
1004311a:	781a      	ldrb	r2, [r3, #0]
1004311c:	187b      	adds	r3, r7, r1
1004311e:	70da      	strb	r2, [r3, #3]
					sevent.track = trackselect+1;
10043120:	4b3d      	ldr	r3, [pc, #244]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
10043122:	781b      	ldrb	r3, [r3, #0]
10043124:	3301      	adds	r3, #1
10043126:	b2da      	uxtb	r2, r3
10043128:	187b      	adds	r3, r7, r1
1004312a:	715a      	strb	r2, [r3, #5]
					sevent.folder = folderselect+1;
1004312c:	4b39      	ldr	r3, [pc, #228]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
1004312e:	781b      	ldrb	r3, [r3, #0]
10043130:	3301      	adds	r3, #1
10043132:	b2da      	uxtb	r2, r3
10043134:	187b      	adds	r3, r7, r1
10043136:	711a      	strb	r2, [r3, #4]
					FLASH_AppendSchedule(sevent);
10043138:	187b      	adds	r3, r7, r1
1004313a:	6818      	ldr	r0, [r3, #0]
1004313c:	6859      	ldr	r1, [r3, #4]
1004313e:	f001 fce5 	bl	10044b0c <FLASH_AppendSchedule>
					nextstate = main;
10043142:	232e      	movs	r3, #46	@ 0x2e
10043144:	18fb      	adds	r3, r7, r3
10043146:	2200      	movs	r2, #0
10043148:	701a      	strb	r2, [r3, #0]
					transition = 1;
1004314a:	232f      	movs	r3, #47	@ 0x2f
1004314c:	18fb      	adds	r3, r7, r3
1004314e:	2201      	movs	r2, #1
10043150:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10043152:	e0ba      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10043154:	1d3b      	adds	r3, r7, #4
10043156:	885b      	ldrh	r3, [r3, #2]
10043158:	001a      	movs	r2, r3
1004315a:	2380      	movs	r3, #128	@ 0x80
1004315c:	00db      	lsls	r3, r3, #3
1004315e:	4013      	ands	r3, r2
10043160:	d02b      	beq.n	100431ba <ButtonsMenuSM_Event_Handler+0x9ba>
10043162:	1d3b      	adds	r3, r7, #4
10043164:	885b      	ldrh	r3, [r3, #2]
10043166:	001a      	movs	r2, r3
10043168:	2304      	movs	r3, #4
1004316a:	4013      	ands	r3, r2
1004316c:	d125      	bne.n	100431ba <ButtonsMenuSM_Event_Handler+0x9ba>
					if(!cursorpos){
1004316e:	4b26      	ldr	r3, [pc, #152]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
10043170:	781b      	ldrb	r3, [r3, #0]
10043172:	2b00      	cmp	r3, #0
10043174:	d10d      	bne.n	10043192 <ButtonsMenuSM_Event_Handler+0x992>
						folderselect--;
10043176:	4b27      	ldr	r3, [pc, #156]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
10043178:	781b      	ldrb	r3, [r3, #0]
1004317a:	3b01      	subs	r3, #1
1004317c:	b2da      	uxtb	r2, r3
1004317e:	4b25      	ldr	r3, [pc, #148]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
10043180:	701a      	strb	r2, [r3, #0]
						if(folderselect==255){
10043182:	4b24      	ldr	r3, [pc, #144]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
10043184:	781b      	ldrb	r3, [r3, #0]
10043186:	2bff      	cmp	r3, #255	@ 0xff
10043188:	d10d      	bne.n	100431a6 <ButtonsMenuSM_Event_Handler+0x9a6>
							folderselect = 100;
1004318a:	4b22      	ldr	r3, [pc, #136]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
1004318c:	2264      	movs	r2, #100	@ 0x64
1004318e:	701a      	strb	r2, [r3, #0]
10043190:	e009      	b.n	100431a6 <ButtonsMenuSM_Event_Handler+0x9a6>
						}
					} else {
						trackselect--;
10043192:	4b21      	ldr	r3, [pc, #132]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
10043194:	781b      	ldrb	r3, [r3, #0]
10043196:	3b01      	subs	r3, #1
10043198:	b2da      	uxtb	r2, r3
1004319a:	4b1f      	ldr	r3, [pc, #124]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
1004319c:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
1004319e:	4b1e      	ldr	r3, [pc, #120]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
100431a0:	781a      	ldrb	r2, [r3, #0]
100431a2:	4b1d      	ldr	r3, [pc, #116]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
100431a4:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
100431a6:	4b18      	ldr	r3, [pc, #96]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
100431a8:	7818      	ldrb	r0, [r3, #0]
100431aa:	4b1a      	ldr	r3, [pc, #104]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431ac:	7819      	ldrb	r1, [r3, #0]
100431ae:	4b1a      	ldr	r3, [pc, #104]	@ (10043218 <ButtonsMenuSM_Event_Handler+0xa18>)
100431b0:	781b      	ldrb	r3, [r3, #0]
100431b2:	001a      	movs	r2, r3
100431b4:	f7ff f810 	bl	100421d8 <DrawFolder>
100431b8:	e087      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
100431ba:	1d3b      	adds	r3, r7, #4
100431bc:	885b      	ldrh	r3, [r3, #2]
100431be:	001a      	movs	r2, r3
100431c0:	2380      	movs	r3, #128	@ 0x80
100431c2:	011b      	lsls	r3, r3, #4
100431c4:	4013      	ands	r3, r2
100431c6:	d03d      	beq.n	10043244 <ButtonsMenuSM_Event_Handler+0xa44>
100431c8:	1d3b      	adds	r3, r7, #4
100431ca:	885b      	ldrh	r3, [r3, #2]
100431cc:	001a      	movs	r2, r3
100431ce:	2308      	movs	r3, #8
100431d0:	4013      	ands	r3, r2
100431d2:	d137      	bne.n	10043244 <ButtonsMenuSM_Event_Handler+0xa44>
					if(!cursorpos){
100431d4:	4b0c      	ldr	r3, [pc, #48]	@ (10043208 <ButtonsMenuSM_Event_Handler+0xa08>)
100431d6:	781b      	ldrb	r3, [r3, #0]
100431d8:	2b00      	cmp	r3, #0
100431da:	d11f      	bne.n	1004321c <ButtonsMenuSM_Event_Handler+0xa1c>
						folderselect++;
100431dc:	4b0d      	ldr	r3, [pc, #52]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431de:	781b      	ldrb	r3, [r3, #0]
100431e0:	3301      	adds	r3, #1
100431e2:	b2da      	uxtb	r2, r3
100431e4:	4b0b      	ldr	r3, [pc, #44]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431e6:	701a      	strb	r2, [r3, #0]
						folderselect %= 100;
100431e8:	4b0a      	ldr	r3, [pc, #40]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431ea:	781b      	ldrb	r3, [r3, #0]
100431ec:	2164      	movs	r1, #100	@ 0x64
100431ee:	0018      	movs	r0, r3
100431f0:	f7fd f8ac 	bl	1004034c <__aeabi_uidivmod>
100431f4:	000b      	movs	r3, r1
100431f6:	b2da      	uxtb	r2, r3
100431f8:	4b06      	ldr	r3, [pc, #24]	@ (10043214 <ButtonsMenuSM_Event_Handler+0xa14>)
100431fa:	701a      	strb	r2, [r3, #0]
100431fc:	e018      	b.n	10043230 <ButtonsMenuSM_Event_Handler+0xa30>
100431fe:	46c0      	nop			@ (mov r8, r8)
10043200:	200003a3 	.word	0x200003a3
10043204:	200003a4 	.word	0x200003a4
10043208:	2000039e 	.word	0x2000039e
1004320c:	200003a1 	.word	0x200003a1
10043210:	200003a2 	.word	0x200003a2
10043214:	2000039f 	.word	0x2000039f
10043218:	200003a0 	.word	0x200003a0
					} else {
						trackselect++;
1004321c:	4bd0      	ldr	r3, [pc, #832]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
1004321e:	781b      	ldrb	r3, [r3, #0]
10043220:	3301      	adds	r3, #1
10043222:	b2da      	uxtb	r2, r3
10043224:	4bce      	ldr	r3, [pc, #824]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
10043226:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10043228:	4bcd      	ldr	r3, [pc, #820]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
1004322a:	781a      	ldrb	r2, [r3, #0]
1004322c:	4bcc      	ldr	r3, [pc, #816]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
1004322e:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10043230:	4bcc      	ldr	r3, [pc, #816]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
10043232:	7818      	ldrb	r0, [r3, #0]
10043234:	4bcc      	ldr	r3, [pc, #816]	@ (10043568 <ButtonsMenuSM_Event_Handler+0xd68>)
10043236:	7819      	ldrb	r1, [r3, #0]
10043238:	4bc9      	ldr	r3, [pc, #804]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
1004323a:	781b      	ldrb	r3, [r3, #0]
1004323c:	001a      	movs	r2, r3
1004323e:	f7fe ffcb 	bl	100421d8 <DrawFolder>
10043242:	e042      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10043244:	1d3b      	adds	r3, r7, #4
10043246:	885b      	ldrh	r3, [r3, #2]
10043248:	001a      	movs	r2, r3
1004324a:	2380      	movs	r3, #128	@ 0x80
1004324c:	015b      	lsls	r3, r3, #5
1004324e:	4013      	ands	r3, r2
10043250:	d017      	beq.n	10043282 <ButtonsMenuSM_Event_Handler+0xa82>
10043252:	1d3b      	adds	r3, r7, #4
10043254:	885b      	ldrh	r3, [r3, #2]
10043256:	001a      	movs	r2, r3
10043258:	2310      	movs	r3, #16
1004325a:	4013      	ands	r3, r2
1004325c:	d111      	bne.n	10043282 <ButtonsMenuSM_Event_Handler+0xa82>
					cursorpos = !cursorpos;
1004325e:	4bc1      	ldr	r3, [pc, #772]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
10043260:	781b      	ldrb	r3, [r3, #0]
10043262:	425a      	negs	r2, r3
10043264:	4153      	adcs	r3, r2
10043266:	b2db      	uxtb	r3, r3
10043268:	001a      	movs	r2, r3
1004326a:	4bbe      	ldr	r3, [pc, #760]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
1004326c:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
1004326e:	4bbd      	ldr	r3, [pc, #756]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
10043270:	7818      	ldrb	r0, [r3, #0]
10043272:	4bbd      	ldr	r3, [pc, #756]	@ (10043568 <ButtonsMenuSM_Event_Handler+0xd68>)
10043274:	7819      	ldrb	r1, [r3, #0]
10043276:	4bba      	ldr	r3, [pc, #744]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
10043278:	781b      	ldrb	r3, [r3, #0]
1004327a:	001a      	movs	r2, r3
1004327c:	f7fe ffac 	bl	100421d8 <DrawFolder>
10043280:	e023      	b.n	100432ca <ButtonsMenuSM_Event_Handler+0xaca>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10043282:	1d3b      	adds	r3, r7, #4
10043284:	885b      	ldrh	r3, [r3, #2]
10043286:	001a      	movs	r2, r3
10043288:	2380      	movs	r3, #128	@ 0x80
1004328a:	019b      	lsls	r3, r3, #6
1004328c:	4013      	ands	r3, r2
1004328e:	d101      	bne.n	10043294 <ButtonsMenuSM_Event_Handler+0xa94>
10043290:	f000 fc2b 	bl	10043aea <ButtonsMenuSM_Event_Handler+0x12ea>
10043294:	1d3b      	adds	r3, r7, #4
10043296:	885b      	ldrh	r3, [r3, #2]
10043298:	001a      	movs	r2, r3
1004329a:	2320      	movs	r3, #32
1004329c:	4013      	ands	r3, r2
1004329e:	d001      	beq.n	100432a4 <ButtonsMenuSM_Event_Handler+0xaa4>
100432a0:	f000 fc23 	bl	10043aea <ButtonsMenuSM_Event_Handler+0x12ea>
					cursorpos = !cursorpos;
100432a4:	4baf      	ldr	r3, [pc, #700]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100432a6:	781b      	ldrb	r3, [r3, #0]
100432a8:	425a      	negs	r2, r3
100432aa:	4153      	adcs	r3, r2
100432ac:	b2db      	uxtb	r3, r3
100432ae:	001a      	movs	r2, r3
100432b0:	4bac      	ldr	r3, [pc, #688]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100432b2:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
100432b4:	4bab      	ldr	r3, [pc, #684]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100432b6:	7818      	ldrb	r0, [r3, #0]
100432b8:	4bab      	ldr	r3, [pc, #684]	@ (10043568 <ButtonsMenuSM_Event_Handler+0xd68>)
100432ba:	7819      	ldrb	r1, [r3, #0]
100432bc:	4ba8      	ldr	r3, [pc, #672]	@ (10043560 <ButtonsMenuSM_Event_Handler+0xd60>)
100432be:	781b      	ldrb	r3, [r3, #0]
100432c0:	001a      	movs	r2, r3
100432c2:	f7fe ff89 	bl	100421d8 <DrawFolder>
				}
			}
			break;
100432c6:	f000 fc10 	bl	10043aea <ButtonsMenuSM_Event_Handler+0x12ea>
100432ca:	f000 fc0e 	bl	10043aea <ButtonsMenuSM_Event_Handler+0x12ea>
		case setTime:
			static int8_t minute;
			static int8_t hour;
			static int8_t day;
			static int8_t month;
			if(event.status == EVENT_ENTRY){
100432ce:	1d3b      	adds	r3, r7, #4
100432d0:	781b      	ldrb	r3, [r3, #0]
100432d2:	b25b      	sxtb	r3, r3
100432d4:	2b02      	cmp	r3, #2
100432d6:	d134      	bne.n	10043342 <ButtonsMenuSM_Event_Handler+0xb42>
				cursorpos = 0;
100432d8:	4ba2      	ldr	r3, [pc, #648]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100432da:	2200      	movs	r2, #0
100432dc:	701a      	strb	r2, [r3, #0]
				minute = Scheduler_GetMinute();
100432de:	f003 f9c1 	bl	10046664 <Scheduler_GetMinute>
100432e2:	0003      	movs	r3, r0
100432e4:	b25a      	sxtb	r2, r3
100432e6:	4ba1      	ldr	r3, [pc, #644]	@ (1004356c <ButtonsMenuSM_Event_Handler+0xd6c>)
100432e8:	701a      	strb	r2, [r3, #0]
				hour = Scheduler_GetHour();
100432ea:	f003 f9b1 	bl	10046650 <Scheduler_GetHour>
100432ee:	0003      	movs	r3, r0
100432f0:	b25a      	sxtb	r2, r3
100432f2:	4b9f      	ldr	r3, [pc, #636]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
100432f4:	701a      	strb	r2, [r3, #0]
				day = Scheduler_GetDay();
100432f6:	f003 f9a1 	bl	1004663c <Scheduler_GetDay>
100432fa:	0003      	movs	r3, r0
100432fc:	b25a      	sxtb	r2, r3
100432fe:	4b9d      	ldr	r3, [pc, #628]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043300:	701a      	strb	r2, [r3, #0]
				month = Scheduler_GetMonth();
10043302:	f003 f991 	bl	10046628 <Scheduler_GetMonth>
10043306:	0003      	movs	r3, r0
10043308:	b25a      	sxtb	r2, r3
1004330a:	4b9b      	ldr	r3, [pc, #620]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
1004330c:	701a      	strb	r2, [r3, #0]
				DrawSetTime(cursorpos, month+1, day+1, hour, minute);
1004330e:	4b95      	ldr	r3, [pc, #596]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
10043310:	7818      	ldrb	r0, [r3, #0]
10043312:	4b99      	ldr	r3, [pc, #612]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043314:	781b      	ldrb	r3, [r3, #0]
10043316:	b25b      	sxtb	r3, r3
10043318:	b2db      	uxtb	r3, r3
1004331a:	3301      	adds	r3, #1
1004331c:	b2d9      	uxtb	r1, r3
1004331e:	4b95      	ldr	r3, [pc, #596]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043320:	781b      	ldrb	r3, [r3, #0]
10043322:	b25b      	sxtb	r3, r3
10043324:	b2db      	uxtb	r3, r3
10043326:	3301      	adds	r3, #1
10043328:	b2da      	uxtb	r2, r3
1004332a:	4b91      	ldr	r3, [pc, #580]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004332c:	781b      	ldrb	r3, [r3, #0]
1004332e:	b25b      	sxtb	r3, r3
10043330:	b2dc      	uxtb	r4, r3
10043332:	4b8e      	ldr	r3, [pc, #568]	@ (1004356c <ButtonsMenuSM_Event_Handler+0xd6c>)
10043334:	781b      	ldrb	r3, [r3, #0]
10043336:	b25b      	sxtb	r3, r3
10043338:	b2db      	uxtb	r3, r3
1004333a:	9300      	str	r3, [sp, #0]
1004333c:	0023      	movs	r3, r4
1004333e:	f7fe fff3 	bl	10042328 <DrawSetTime>
			}
			if(event.status == EVENT_BUTTONS){
10043342:	1d3b      	adds	r3, r7, #4
10043344:	781b      	ldrb	r3, [r3, #0]
10043346:	b25b      	sxtb	r3, r3
10043348:	2b04      	cmp	r3, #4
1004334a:	d001      	beq.n	10043350 <ButtonsMenuSM_Event_Handler+0xb50>
1004334c:	f000 fbcf 	bl	10043aee <ButtonsMenuSM_Event_Handler+0x12ee>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10043350:	1d3b      	adds	r3, r7, #4
10043352:	885b      	ldrh	r3, [r3, #2]
10043354:	001a      	movs	r2, r3
10043356:	2380      	movs	r3, #128	@ 0x80
10043358:	005b      	lsls	r3, r3, #1
1004335a:	4013      	ands	r3, r2
1004335c:	d00e      	beq.n	1004337c <ButtonsMenuSM_Event_Handler+0xb7c>
1004335e:	1d3b      	adds	r3, r7, #4
10043360:	885b      	ldrh	r3, [r3, #2]
10043362:	001a      	movs	r2, r3
10043364:	2301      	movs	r3, #1
10043366:	4013      	ands	r3, r2
10043368:	d108      	bne.n	1004337c <ButtonsMenuSM_Event_Handler+0xb7c>
					//discountprintf("moving to main, back");
					nextstate = main;
1004336a:	232e      	movs	r3, #46	@ 0x2e
1004336c:	18fb      	adds	r3, r7, r3
1004336e:	2200      	movs	r2, #0
10043370:	701a      	strb	r2, [r3, #0]
					transition = 1;
10043372:	232f      	movs	r3, #47	@ 0x2f
10043374:	18fb      	adds	r3, r7, r3
10043376:	2201      	movs	r2, #1
10043378:	701a      	strb	r2, [r3, #0]
1004337a:	e254      	b.n	10043826 <ButtonsMenuSM_Event_Handler+0x1026>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
1004337c:	1d3b      	adds	r3, r7, #4
1004337e:	885b      	ldrh	r3, [r3, #2]
10043380:	001a      	movs	r2, r3
10043382:	2380      	movs	r3, #128	@ 0x80
10043384:	009b      	lsls	r3, r3, #2
10043386:	4013      	ands	r3, r2
10043388:	d100      	bne.n	1004338c <ButtonsMenuSM_Event_Handler+0xb8c>
1004338a:	e094      	b.n	100434b6 <ButtonsMenuSM_Event_Handler+0xcb6>
1004338c:	1d3b      	adds	r3, r7, #4
1004338e:	885b      	ldrh	r3, [r3, #2]
10043390:	001a      	movs	r2, r3
10043392:	2302      	movs	r3, #2
10043394:	4013      	ands	r3, r2
10043396:	d000      	beq.n	1004339a <ButtonsMenuSM_Event_Handler+0xb9a>
10043398:	e08d      	b.n	100434b6 <ButtonsMenuSM_Event_Handler+0xcb6>
					//discountprintf("moving to main, select");
					month++;
1004339a:	4b77      	ldr	r3, [pc, #476]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
1004339c:	781b      	ldrb	r3, [r3, #0]
1004339e:	b25b      	sxtb	r3, r3
100433a0:	b2db      	uxtb	r3, r3
100433a2:	3301      	adds	r3, #1
100433a4:	b2db      	uxtb	r3, r3
100433a6:	b25a      	sxtb	r2, r3
100433a8:	4b73      	ldr	r3, [pc, #460]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
100433aa:	701a      	strb	r2, [r3, #0]
					I2C_Transmit(RTCADDRESS, RTCSECADDR, 0);
100433ac:	2200      	movs	r2, #0
100433ae:	2100      	movs	r1, #0
100433b0:	206f      	movs	r0, #111	@ 0x6f
100433b2:	f001 ffef 	bl	10045394 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMINADDR, ((minute/10)<<4)|minute%10);
100433b6:	4b6d      	ldr	r3, [pc, #436]	@ (1004356c <ButtonsMenuSM_Event_Handler+0xd6c>)
100433b8:	781b      	ldrb	r3, [r3, #0]
100433ba:	b25b      	sxtb	r3, r3
100433bc:	210a      	movs	r1, #10
100433be:	0018      	movs	r0, r3
100433c0:	f7fc ffc8 	bl	10040354 <__divsi3>
100433c4:	0003      	movs	r3, r0
100433c6:	b25b      	sxtb	r3, r3
100433c8:	011b      	lsls	r3, r3, #4
100433ca:	b25c      	sxtb	r4, r3
100433cc:	4b67      	ldr	r3, [pc, #412]	@ (1004356c <ButtonsMenuSM_Event_Handler+0xd6c>)
100433ce:	781b      	ldrb	r3, [r3, #0]
100433d0:	b25b      	sxtb	r3, r3
100433d2:	210a      	movs	r1, #10
100433d4:	0018      	movs	r0, r3
100433d6:	f7fd f8a3 	bl	10040520 <__aeabi_idivmod>
100433da:	000b      	movs	r3, r1
100433dc:	b25b      	sxtb	r3, r3
100433de:	4323      	orrs	r3, r4
100433e0:	b25b      	sxtb	r3, r3
100433e2:	b2db      	uxtb	r3, r3
100433e4:	001a      	movs	r2, r3
100433e6:	2101      	movs	r1, #1
100433e8:	206f      	movs	r0, #111	@ 0x6f
100433ea:	f001 ffd3 	bl	10045394 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCHOURADDR, 0b01000000|((hour/10)<<4)|hour%10);
100433ee:	4b60      	ldr	r3, [pc, #384]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
100433f0:	781b      	ldrb	r3, [r3, #0]
100433f2:	b25b      	sxtb	r3, r3
100433f4:	210a      	movs	r1, #10
100433f6:	0018      	movs	r0, r3
100433f8:	f7fc ffac 	bl	10040354 <__divsi3>
100433fc:	0003      	movs	r3, r0
100433fe:	b25b      	sxtb	r3, r3
10043400:	011b      	lsls	r3, r3, #4
10043402:	b25b      	sxtb	r3, r3
10043404:	2240      	movs	r2, #64	@ 0x40
10043406:	4313      	orrs	r3, r2
10043408:	b25c      	sxtb	r4, r3
1004340a:	4b59      	ldr	r3, [pc, #356]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004340c:	781b      	ldrb	r3, [r3, #0]
1004340e:	b25b      	sxtb	r3, r3
10043410:	210a      	movs	r1, #10
10043412:	0018      	movs	r0, r3
10043414:	f7fd f884 	bl	10040520 <__aeabi_idivmod>
10043418:	000b      	movs	r3, r1
1004341a:	b25b      	sxtb	r3, r3
1004341c:	4323      	orrs	r3, r4
1004341e:	b25b      	sxtb	r3, r3
10043420:	b2db      	uxtb	r3, r3
10043422:	001a      	movs	r2, r3
10043424:	2102      	movs	r1, #2
10043426:	206f      	movs	r0, #111	@ 0x6f
10043428:	f001 ffb4 	bl	10045394 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCDAYADDR, (((day+1)/10)<<4)|(day+1)%10);
1004342c:	4b51      	ldr	r3, [pc, #324]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
1004342e:	781b      	ldrb	r3, [r3, #0]
10043430:	b25b      	sxtb	r3, r3
10043432:	3301      	adds	r3, #1
10043434:	210a      	movs	r1, #10
10043436:	0018      	movs	r0, r3
10043438:	f7fc ff8c 	bl	10040354 <__divsi3>
1004343c:	0003      	movs	r3, r0
1004343e:	b25b      	sxtb	r3, r3
10043440:	011b      	lsls	r3, r3, #4
10043442:	b25c      	sxtb	r4, r3
10043444:	4b4b      	ldr	r3, [pc, #300]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043446:	781b      	ldrb	r3, [r3, #0]
10043448:	b25b      	sxtb	r3, r3
1004344a:	3301      	adds	r3, #1
1004344c:	210a      	movs	r1, #10
1004344e:	0018      	movs	r0, r3
10043450:	f7fd f866 	bl	10040520 <__aeabi_idivmod>
10043454:	000b      	movs	r3, r1
10043456:	b25b      	sxtb	r3, r3
10043458:	4323      	orrs	r3, r4
1004345a:	b25b      	sxtb	r3, r3
1004345c:	b2db      	uxtb	r3, r3
1004345e:	001a      	movs	r2, r3
10043460:	2104      	movs	r1, #4
10043462:	206f      	movs	r0, #111	@ 0x6f
10043464:	f001 ff96 	bl	10045394 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMNTHADDR, (((month+1)/10)<<4)|(month+1)%10);
10043468:	4b43      	ldr	r3, [pc, #268]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
1004346a:	781b      	ldrb	r3, [r3, #0]
1004346c:	b25b      	sxtb	r3, r3
1004346e:	3301      	adds	r3, #1
10043470:	210a      	movs	r1, #10
10043472:	0018      	movs	r0, r3
10043474:	f7fc ff6e 	bl	10040354 <__divsi3>
10043478:	0003      	movs	r3, r0
1004347a:	b25b      	sxtb	r3, r3
1004347c:	011b      	lsls	r3, r3, #4
1004347e:	b25c      	sxtb	r4, r3
10043480:	4b3d      	ldr	r3, [pc, #244]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043482:	781b      	ldrb	r3, [r3, #0]
10043484:	b25b      	sxtb	r3, r3
10043486:	3301      	adds	r3, #1
10043488:	210a      	movs	r1, #10
1004348a:	0018      	movs	r0, r3
1004348c:	f7fd f848 	bl	10040520 <__aeabi_idivmod>
10043490:	000b      	movs	r3, r1
10043492:	b25b      	sxtb	r3, r3
10043494:	4323      	orrs	r3, r4
10043496:	b25b      	sxtb	r3, r3
10043498:	b2db      	uxtb	r3, r3
1004349a:	001a      	movs	r2, r3
1004349c:	2105      	movs	r1, #5
1004349e:	206f      	movs	r0, #111	@ 0x6f
100434a0:	f001 ff78 	bl	10045394 <I2C_Transmit>
					nextstate = main;
100434a4:	232e      	movs	r3, #46	@ 0x2e
100434a6:	18fb      	adds	r3, r7, r3
100434a8:	2200      	movs	r2, #0
100434aa:	701a      	strb	r2, [r3, #0]
					transition = 1;
100434ac:	232f      	movs	r3, #47	@ 0x2f
100434ae:	18fb      	adds	r3, r7, r3
100434b0:	2201      	movs	r2, #1
100434b2:	701a      	strb	r2, [r3, #0]
100434b4:	e1b7      	b.n	10043826 <ButtonsMenuSM_Event_Handler+0x1026>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100434b6:	1d3b      	adds	r3, r7, #4
100434b8:	885b      	ldrh	r3, [r3, #2]
100434ba:	001a      	movs	r2, r3
100434bc:	2380      	movs	r3, #128	@ 0x80
100434be:	00db      	lsls	r3, r3, #3
100434c0:	4013      	ands	r3, r2
100434c2:	d100      	bne.n	100434c6 <ButtonsMenuSM_Event_Handler+0xcc6>
100434c4:	e09f      	b.n	10043606 <ButtonsMenuSM_Event_Handler+0xe06>
100434c6:	1d3b      	adds	r3, r7, #4
100434c8:	885b      	ldrh	r3, [r3, #2]
100434ca:	001a      	movs	r2, r3
100434cc:	2304      	movs	r3, #4
100434ce:	4013      	ands	r3, r2
100434d0:	d000      	beq.n	100434d4 <ButtonsMenuSM_Event_Handler+0xcd4>
100434d2:	e098      	b.n	10043606 <ButtonsMenuSM_Event_Handler+0xe06>
					switch(cursorpos){
100434d4:	4b23      	ldr	r3, [pc, #140]	@ (10043564 <ButtonsMenuSM_Event_Handler+0xd64>)
100434d6:	781b      	ldrb	r3, [r3, #0]
100434d8:	2b03      	cmp	r3, #3
100434da:	d04f      	beq.n	1004357c <ButtonsMenuSM_Event_Handler+0xd7c>
100434dc:	dd00      	ble.n	100434e0 <ButtonsMenuSM_Event_Handler+0xce0>
100434de:	e077      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
100434e0:	2b02      	cmp	r3, #2
100434e2:	d02a      	beq.n	1004353a <ButtonsMenuSM_Event_Handler+0xd3a>
100434e4:	dd00      	ble.n	100434e8 <ButtonsMenuSM_Event_Handler+0xce8>
100434e6:	e073      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
100434e8:	2b00      	cmp	r3, #0
100434ea:	d002      	beq.n	100434f2 <ButtonsMenuSM_Event_Handler+0xcf2>
100434ec:	2b01      	cmp	r3, #1
100434ee:	d012      	beq.n	10043516 <ButtonsMenuSM_Event_Handler+0xd16>
100434f0:	e06e      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
					case 0:
						month--;
100434f2:	4b21      	ldr	r3, [pc, #132]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
100434f4:	781b      	ldrb	r3, [r3, #0]
100434f6:	b25b      	sxtb	r3, r3
100434f8:	b2db      	uxtb	r3, r3
100434fa:	3b01      	subs	r3, #1
100434fc:	b2db      	uxtb	r3, r3
100434fe:	b25a      	sxtb	r2, r3
10043500:	4b1d      	ldr	r3, [pc, #116]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043502:	701a      	strb	r2, [r3, #0]
						if(month < 0){
10043504:	4b1c      	ldr	r3, [pc, #112]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043506:	781b      	ldrb	r3, [r3, #0]
10043508:	b25b      	sxtb	r3, r3
1004350a:	2b00      	cmp	r3, #0
1004350c:	da59      	bge.n	100435c2 <ButtonsMenuSM_Event_Handler+0xdc2>
							month = 11;
1004350e:	4b1a      	ldr	r3, [pc, #104]	@ (10043578 <ButtonsMenuSM_Event_Handler+0xd78>)
10043510:	220b      	movs	r2, #11
10043512:	701a      	strb	r2, [r3, #0]
						}
						break;
10043514:	e055      	b.n	100435c2 <ButtonsMenuSM_Event_Handler+0xdc2>
					case 1:
						day--;
10043516:	4b17      	ldr	r3, [pc, #92]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043518:	781b      	ldrb	r3, [r3, #0]
1004351a:	b25b      	sxtb	r3, r3
1004351c:	b2db      	uxtb	r3, r3
1004351e:	3b01      	subs	r3, #1
10043520:	b2db      	uxtb	r3, r3
10043522:	b25a      	sxtb	r2, r3
10043524:	4b13      	ldr	r3, [pc, #76]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043526:	701a      	strb	r2, [r3, #0]
						if(day < 0){
10043528:	4b12      	ldr	r3, [pc, #72]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
1004352a:	781b      	ldrb	r3, [r3, #0]
1004352c:	b25b      	sxtb	r3, r3
1004352e:	2b00      	cmp	r3, #0
10043530:	da49      	bge.n	100435c6 <ButtonsMenuSM_Event_Handler+0xdc6>
							day = 30;
10043532:	4b10      	ldr	r3, [pc, #64]	@ (10043574 <ButtonsMenuSM_Event_Handler+0xd74>)
10043534:	221e      	movs	r2, #30
10043536:	701a      	strb	r2, [r3, #0]
						}
						break;
10043538:	e045      	b.n	100435c6 <ButtonsMenuSM_Event_Handler+0xdc6>
					case 2:
						hour--;
1004353a:	4b0d      	ldr	r3, [pc, #52]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004353c:	781b      	ldrb	r3, [r3, #0]
1004353e:	b25b      	sxtb	r3, r3
10043540:	b2db      	uxtb	r3, r3
10043542:	3b01      	subs	r3, #1
10043544:	b2db      	uxtb	r3, r3
10043546:	b25a      	sxtb	r2, r3
10043548:	4b09      	ldr	r3, [pc, #36]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004354a:	701a      	strb	r2, [r3, #0]
						if(hour < 0){
1004354c:	4b08      	ldr	r3, [pc, #32]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
1004354e:	781b      	ldrb	r3, [r3, #0]
10043550:	b25b      	sxtb	r3, r3
10043552:	2b00      	cmp	r3, #0
10043554:	da39      	bge.n	100435ca <ButtonsMenuSM_Event_Handler+0xdca>
							hour = 23;
10043556:	4b06      	ldr	r3, [pc, #24]	@ (10043570 <ButtonsMenuSM_Event_Handler+0xd70>)
10043558:	2217      	movs	r2, #23
1004355a:	701a      	strb	r2, [r3, #0]
						}
						break;
1004355c:	e035      	b.n	100435ca <ButtonsMenuSM_Event_Handler+0xdca>
1004355e:	46c0      	nop			@ (mov r8, r8)
10043560:	200003a0 	.word	0x200003a0
10043564:	2000039e 	.word	0x2000039e
10043568:	2000039f 	.word	0x2000039f
1004356c:	200003b1 	.word	0x200003b1
10043570:	200003b2 	.word	0x200003b2
10043574:	200003b3 	.word	0x200003b3
10043578:	200003b4 	.word	0x200003b4
					case 3:
						minute--;
1004357c:	4bcf      	ldr	r3, [pc, #828]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
1004357e:	781b      	ldrb	r3, [r3, #0]
10043580:	b25b      	sxtb	r3, r3
10043582:	b2db      	uxtb	r3, r3
10043584:	3b01      	subs	r3, #1
10043586:	b2db      	uxtb	r3, r3
10043588:	b25a      	sxtb	r2, r3
1004358a:	4bcc      	ldr	r3, [pc, #816]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
1004358c:	701a      	strb	r2, [r3, #0]
						if(minute < 0){
1004358e:	4bcb      	ldr	r3, [pc, #812]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
10043590:	781b      	ldrb	r3, [r3, #0]
10043592:	b25b      	sxtb	r3, r3
10043594:	2b00      	cmp	r3, #0
10043596:	da1a      	bge.n	100435ce <ButtonsMenuSM_Event_Handler+0xdce>
							minute = 59;
10043598:	4bc8      	ldr	r3, [pc, #800]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
1004359a:	223b      	movs	r2, #59	@ 0x3b
1004359c:	701a      	strb	r2, [r3, #0]
							hour--;
1004359e:	4bc8      	ldr	r3, [pc, #800]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435a0:	781b      	ldrb	r3, [r3, #0]
100435a2:	b25b      	sxtb	r3, r3
100435a4:	b2db      	uxtb	r3, r3
100435a6:	3b01      	subs	r3, #1
100435a8:	b2db      	uxtb	r3, r3
100435aa:	b25a      	sxtb	r2, r3
100435ac:	4bc4      	ldr	r3, [pc, #784]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435ae:	701a      	strb	r2, [r3, #0]
							if(hour < 0){
100435b0:	4bc3      	ldr	r3, [pc, #780]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435b2:	781b      	ldrb	r3, [r3, #0]
100435b4:	b25b      	sxtb	r3, r3
100435b6:	2b00      	cmp	r3, #0
100435b8:	da09      	bge.n	100435ce <ButtonsMenuSM_Event_Handler+0xdce>
								hour = 23;
100435ba:	4bc1      	ldr	r3, [pc, #772]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435bc:	2217      	movs	r2, #23
100435be:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
100435c0:	e005      	b.n	100435ce <ButtonsMenuSM_Event_Handler+0xdce>
						break;
100435c2:	46c0      	nop			@ (mov r8, r8)
100435c4:	e004      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
						break;
100435c6:	46c0      	nop			@ (mov r8, r8)
100435c8:	e002      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
						break;
100435ca:	46c0      	nop			@ (mov r8, r8)
100435cc:	e000      	b.n	100435d0 <ButtonsMenuSM_Event_Handler+0xdd0>
						break;
100435ce:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
100435d0:	4bbc      	ldr	r3, [pc, #752]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100435d2:	7818      	ldrb	r0, [r3, #0]
100435d4:	4bbc      	ldr	r3, [pc, #752]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
100435d6:	781b      	ldrb	r3, [r3, #0]
100435d8:	b25b      	sxtb	r3, r3
100435da:	b2db      	uxtb	r3, r3
100435dc:	3301      	adds	r3, #1
100435de:	b2d9      	uxtb	r1, r3
100435e0:	4bba      	ldr	r3, [pc, #744]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
100435e2:	781b      	ldrb	r3, [r3, #0]
100435e4:	b25b      	sxtb	r3, r3
100435e6:	b2db      	uxtb	r3, r3
100435e8:	3301      	adds	r3, #1
100435ea:	b2da      	uxtb	r2, r3
100435ec:	4bb4      	ldr	r3, [pc, #720]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100435ee:	781b      	ldrb	r3, [r3, #0]
100435f0:	b25b      	sxtb	r3, r3
100435f2:	b2dc      	uxtb	r4, r3
100435f4:	4bb1      	ldr	r3, [pc, #708]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100435f6:	781b      	ldrb	r3, [r3, #0]
100435f8:	b25b      	sxtb	r3, r3
100435fa:	b2db      	uxtb	r3, r3
100435fc:	9300      	str	r3, [sp, #0]
100435fe:	0023      	movs	r3, r4
10043600:	f7fe fe92 	bl	10042328 <DrawSetTime>
					break;
10043604:	e276      	b.n	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10043606:	1d3b      	adds	r3, r7, #4
10043608:	885b      	ldrh	r3, [r3, #2]
1004360a:	001a      	movs	r2, r3
1004360c:	2380      	movs	r3, #128	@ 0x80
1004360e:	011b      	lsls	r3, r3, #4
10043610:	4013      	ands	r3, r2
10043612:	d100      	bne.n	10043616 <ButtonsMenuSM_Event_Handler+0xe16>
10043614:	e09b      	b.n	1004374e <ButtonsMenuSM_Event_Handler+0xf4e>
10043616:	1d3b      	adds	r3, r7, #4
10043618:	885b      	ldrh	r3, [r3, #2]
1004361a:	001a      	movs	r2, r3
1004361c:	2308      	movs	r3, #8
1004361e:	4013      	ands	r3, r2
10043620:	d000      	beq.n	10043624 <ButtonsMenuSM_Event_Handler+0xe24>
10043622:	e094      	b.n	1004374e <ButtonsMenuSM_Event_Handler+0xf4e>
					switch(cursorpos){
10043624:	4ba7      	ldr	r3, [pc, #668]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043626:	781b      	ldrb	r3, [r3, #0]
10043628:	2b03      	cmp	r3, #3
1004362a:	d048      	beq.n	100436be <ButtonsMenuSM_Event_Handler+0xebe>
1004362c:	dd00      	ble.n	10043630 <ButtonsMenuSM_Event_Handler+0xe30>
1004362e:	e073      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
10043630:	2b02      	cmp	r3, #2
10043632:	d02f      	beq.n	10043694 <ButtonsMenuSM_Event_Handler+0xe94>
10043634:	dc70      	bgt.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
10043636:	2b00      	cmp	r3, #0
10043638:	d002      	beq.n	10043640 <ButtonsMenuSM_Event_Handler+0xe40>
1004363a:	2b01      	cmp	r3, #1
1004363c:	d015      	beq.n	1004366a <ButtonsMenuSM_Event_Handler+0xe6a>
1004363e:	e06b      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
					case 0:
						month++;
10043640:	4ba1      	ldr	r3, [pc, #644]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043642:	781b      	ldrb	r3, [r3, #0]
10043644:	b25b      	sxtb	r3, r3
10043646:	b2db      	uxtb	r3, r3
10043648:	3301      	adds	r3, #1
1004364a:	b2db      	uxtb	r3, r3
1004364c:	b25a      	sxtb	r2, r3
1004364e:	4b9e      	ldr	r3, [pc, #632]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043650:	701a      	strb	r2, [r3, #0]
						month %= 12;
10043652:	4b9d      	ldr	r3, [pc, #628]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043654:	781b      	ldrb	r3, [r3, #0]
10043656:	b25b      	sxtb	r3, r3
10043658:	210c      	movs	r1, #12
1004365a:	0018      	movs	r0, r3
1004365c:	f7fc ff60 	bl	10040520 <__aeabi_idivmod>
10043660:	000b      	movs	r3, r1
10043662:	b25a      	sxtb	r2, r3
10043664:	4b98      	ldr	r3, [pc, #608]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043666:	701a      	strb	r2, [r3, #0]
						break;
10043668:	e056      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
					case 1:
						day++;
1004366a:	4b98      	ldr	r3, [pc, #608]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
1004366c:	781b      	ldrb	r3, [r3, #0]
1004366e:	b25b      	sxtb	r3, r3
10043670:	b2db      	uxtb	r3, r3
10043672:	3301      	adds	r3, #1
10043674:	b2db      	uxtb	r3, r3
10043676:	b25a      	sxtb	r2, r3
10043678:	4b94      	ldr	r3, [pc, #592]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
1004367a:	701a      	strb	r2, [r3, #0]
						day%= 31;
1004367c:	4b93      	ldr	r3, [pc, #588]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
1004367e:	781b      	ldrb	r3, [r3, #0]
10043680:	b25b      	sxtb	r3, r3
10043682:	211f      	movs	r1, #31
10043684:	0018      	movs	r0, r3
10043686:	f7fc ff4b 	bl	10040520 <__aeabi_idivmod>
1004368a:	000b      	movs	r3, r1
1004368c:	b25a      	sxtb	r2, r3
1004368e:	4b8f      	ldr	r3, [pc, #572]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
10043690:	701a      	strb	r2, [r3, #0]
						break;
10043692:	e041      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
					case 2:
						hour++;
10043694:	4b8a      	ldr	r3, [pc, #552]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043696:	781b      	ldrb	r3, [r3, #0]
10043698:	b25b      	sxtb	r3, r3
1004369a:	b2db      	uxtb	r3, r3
1004369c:	3301      	adds	r3, #1
1004369e:	b2db      	uxtb	r3, r3
100436a0:	b25a      	sxtb	r2, r3
100436a2:	4b87      	ldr	r3, [pc, #540]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100436a4:	701a      	strb	r2, [r3, #0]
						hour %= 24;
100436a6:	4b86      	ldr	r3, [pc, #536]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100436a8:	781b      	ldrb	r3, [r3, #0]
100436aa:	b25b      	sxtb	r3, r3
100436ac:	2118      	movs	r1, #24
100436ae:	0018      	movs	r0, r3
100436b0:	f7fc ff36 	bl	10040520 <__aeabi_idivmod>
100436b4:	000b      	movs	r3, r1
100436b6:	b25a      	sxtb	r2, r3
100436b8:	4b81      	ldr	r3, [pc, #516]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100436ba:	701a      	strb	r2, [r3, #0]
						break;
100436bc:	e02c      	b.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
					case 3:
						minute++;
100436be:	4b7f      	ldr	r3, [pc, #508]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436c0:	781b      	ldrb	r3, [r3, #0]
100436c2:	b25b      	sxtb	r3, r3
100436c4:	b2db      	uxtb	r3, r3
100436c6:	3301      	adds	r3, #1
100436c8:	b2db      	uxtb	r3, r3
100436ca:	b25a      	sxtb	r2, r3
100436cc:	4b7b      	ldr	r3, [pc, #492]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436ce:	701a      	strb	r2, [r3, #0]
						minute%=60;
100436d0:	4b7a      	ldr	r3, [pc, #488]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436d2:	781b      	ldrb	r3, [r3, #0]
100436d4:	b25b      	sxtb	r3, r3
100436d6:	213c      	movs	r1, #60	@ 0x3c
100436d8:	0018      	movs	r0, r3
100436da:	f7fc ff21 	bl	10040520 <__aeabi_idivmod>
100436de:	000b      	movs	r3, r1
100436e0:	b25a      	sxtb	r2, r3
100436e2:	4b76      	ldr	r3, [pc, #472]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436e4:	701a      	strb	r2, [r3, #0]
						if(minute == 0){
100436e6:	4b75      	ldr	r3, [pc, #468]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100436e8:	781b      	ldrb	r3, [r3, #0]
100436ea:	b25b      	sxtb	r3, r3
100436ec:	2b00      	cmp	r3, #0
100436ee:	d113      	bne.n	10043718 <ButtonsMenuSM_Event_Handler+0xf18>
							hour++;
100436f0:	4b73      	ldr	r3, [pc, #460]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100436f2:	781b      	ldrb	r3, [r3, #0]
100436f4:	b25b      	sxtb	r3, r3
100436f6:	b2db      	uxtb	r3, r3
100436f8:	3301      	adds	r3, #1
100436fa:	b2db      	uxtb	r3, r3
100436fc:	b25a      	sxtb	r2, r3
100436fe:	4b70      	ldr	r3, [pc, #448]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043700:	701a      	strb	r2, [r3, #0]
							hour %= 24;
10043702:	4b6f      	ldr	r3, [pc, #444]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043704:	781b      	ldrb	r3, [r3, #0]
10043706:	b25b      	sxtb	r3, r3
10043708:	2118      	movs	r1, #24
1004370a:	0018      	movs	r0, r3
1004370c:	f7fc ff08 	bl	10040520 <__aeabi_idivmod>
10043710:	000b      	movs	r3, r1
10043712:	b25a      	sxtb	r2, r3
10043714:	4b6a      	ldr	r3, [pc, #424]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043716:	701a      	strb	r2, [r3, #0]
						}
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10043718:	4b6a      	ldr	r3, [pc, #424]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004371a:	7818      	ldrb	r0, [r3, #0]
1004371c:	4b6a      	ldr	r3, [pc, #424]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
1004371e:	781b      	ldrb	r3, [r3, #0]
10043720:	b25b      	sxtb	r3, r3
10043722:	b2db      	uxtb	r3, r3
10043724:	3301      	adds	r3, #1
10043726:	b2d9      	uxtb	r1, r3
10043728:	4b68      	ldr	r3, [pc, #416]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
1004372a:	781b      	ldrb	r3, [r3, #0]
1004372c:	b25b      	sxtb	r3, r3
1004372e:	b2db      	uxtb	r3, r3
10043730:	3301      	adds	r3, #1
10043732:	b2da      	uxtb	r2, r3
10043734:	4b62      	ldr	r3, [pc, #392]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
10043736:	781b      	ldrb	r3, [r3, #0]
10043738:	b25b      	sxtb	r3, r3
1004373a:	b2dc      	uxtb	r4, r3
1004373c:	4b5f      	ldr	r3, [pc, #380]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
1004373e:	781b      	ldrb	r3, [r3, #0]
10043740:	b25b      	sxtb	r3, r3
10043742:	b2db      	uxtb	r3, r3
10043744:	9300      	str	r3, [sp, #0]
10043746:	0023      	movs	r3, r4
10043748:	f7fe fdee 	bl	10042328 <DrawSetTime>
1004374c:	e06b      	b.n	10043826 <ButtonsMenuSM_Event_Handler+0x1026>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
1004374e:	1d3b      	adds	r3, r7, #4
10043750:	885b      	ldrh	r3, [r3, #2]
10043752:	001a      	movs	r2, r3
10043754:	2380      	movs	r3, #128	@ 0x80
10043756:	015b      	lsls	r3, r3, #5
10043758:	4013      	ands	r3, r2
1004375a:	d02d      	beq.n	100437b8 <ButtonsMenuSM_Event_Handler+0xfb8>
1004375c:	1d3b      	adds	r3, r7, #4
1004375e:	885b      	ldrh	r3, [r3, #2]
10043760:	001a      	movs	r2, r3
10043762:	2310      	movs	r3, #16
10043764:	4013      	ands	r3, r2
10043766:	d127      	bne.n	100437b8 <ButtonsMenuSM_Event_Handler+0xfb8>
					cursorpos--;
10043768:	4b56      	ldr	r3, [pc, #344]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004376a:	781b      	ldrb	r3, [r3, #0]
1004376c:	3b01      	subs	r3, #1
1004376e:	b2da      	uxtb	r2, r3
10043770:	4b54      	ldr	r3, [pc, #336]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043772:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10043774:	4b53      	ldr	r3, [pc, #332]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043776:	781b      	ldrb	r3, [r3, #0]
10043778:	2bff      	cmp	r3, #255	@ 0xff
1004377a:	d102      	bne.n	10043782 <ButtonsMenuSM_Event_Handler+0xf82>
						cursorpos = 3;
1004377c:	4b51      	ldr	r3, [pc, #324]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004377e:	2203      	movs	r2, #3
10043780:	701a      	strb	r2, [r3, #0]
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10043782:	4b50      	ldr	r3, [pc, #320]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043784:	7818      	ldrb	r0, [r3, #0]
10043786:	4b50      	ldr	r3, [pc, #320]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
10043788:	781b      	ldrb	r3, [r3, #0]
1004378a:	b25b      	sxtb	r3, r3
1004378c:	b2db      	uxtb	r3, r3
1004378e:	3301      	adds	r3, #1
10043790:	b2d9      	uxtb	r1, r3
10043792:	4b4e      	ldr	r3, [pc, #312]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
10043794:	781b      	ldrb	r3, [r3, #0]
10043796:	b25b      	sxtb	r3, r3
10043798:	b2db      	uxtb	r3, r3
1004379a:	3301      	adds	r3, #1
1004379c:	b2da      	uxtb	r2, r3
1004379e:	4b48      	ldr	r3, [pc, #288]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
100437a0:	781b      	ldrb	r3, [r3, #0]
100437a2:	b25b      	sxtb	r3, r3
100437a4:	b2dc      	uxtb	r4, r3
100437a6:	4b45      	ldr	r3, [pc, #276]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
100437a8:	781b      	ldrb	r3, [r3, #0]
100437aa:	b25b      	sxtb	r3, r3
100437ac:	b2db      	uxtb	r3, r3
100437ae:	9300      	str	r3, [sp, #0]
100437b0:	0023      	movs	r3, r4
100437b2:	f7fe fdb9 	bl	10042328 <DrawSetTime>
100437b6:	e036      	b.n	10043826 <ButtonsMenuSM_Event_Handler+0x1026>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
100437b8:	1d3b      	adds	r3, r7, #4
100437ba:	885b      	ldrh	r3, [r3, #2]
100437bc:	001a      	movs	r2, r3
100437be:	2380      	movs	r3, #128	@ 0x80
100437c0:	019b      	lsls	r3, r3, #6
100437c2:	4013      	ands	r3, r2
100437c4:	d100      	bne.n	100437c8 <ButtonsMenuSM_Event_Handler+0xfc8>
100437c6:	e192      	b.n	10043aee <ButtonsMenuSM_Event_Handler+0x12ee>
100437c8:	1d3b      	adds	r3, r7, #4
100437ca:	885b      	ldrh	r3, [r3, #2]
100437cc:	001a      	movs	r2, r3
100437ce:	2320      	movs	r3, #32
100437d0:	4013      	ands	r3, r2
100437d2:	d000      	beq.n	100437d6 <ButtonsMenuSM_Event_Handler+0xfd6>
100437d4:	e18b      	b.n	10043aee <ButtonsMenuSM_Event_Handler+0x12ee>
					cursorpos++;
100437d6:	4b3b      	ldr	r3, [pc, #236]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437d8:	781b      	ldrb	r3, [r3, #0]
100437da:	3301      	adds	r3, #1
100437dc:	b2da      	uxtb	r2, r3
100437de:	4b39      	ldr	r3, [pc, #228]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437e0:	701a      	strb	r2, [r3, #0]
					cursorpos %= 4;
100437e2:	4b38      	ldr	r3, [pc, #224]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437e4:	781b      	ldrb	r3, [r3, #0]
100437e6:	2203      	movs	r2, #3
100437e8:	4013      	ands	r3, r2
100437ea:	b2da      	uxtb	r2, r3
100437ec:	4b35      	ldr	r3, [pc, #212]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437ee:	701a      	strb	r2, [r3, #0]
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
100437f0:	4b34      	ldr	r3, [pc, #208]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
100437f2:	7818      	ldrb	r0, [r3, #0]
100437f4:	4b34      	ldr	r3, [pc, #208]	@ (100438c8 <ButtonsMenuSM_Event_Handler+0x10c8>)
100437f6:	781b      	ldrb	r3, [r3, #0]
100437f8:	b25b      	sxtb	r3, r3
100437fa:	b2db      	uxtb	r3, r3
100437fc:	3301      	adds	r3, #1
100437fe:	b2d9      	uxtb	r1, r3
10043800:	4b32      	ldr	r3, [pc, #200]	@ (100438cc <ButtonsMenuSM_Event_Handler+0x10cc>)
10043802:	781b      	ldrb	r3, [r3, #0]
10043804:	b25b      	sxtb	r3, r3
10043806:	b2db      	uxtb	r3, r3
10043808:	3301      	adds	r3, #1
1004380a:	b2da      	uxtb	r2, r3
1004380c:	4b2c      	ldr	r3, [pc, #176]	@ (100438c0 <ButtonsMenuSM_Event_Handler+0x10c0>)
1004380e:	781b      	ldrb	r3, [r3, #0]
10043810:	b25b      	sxtb	r3, r3
10043812:	b2dc      	uxtb	r4, r3
10043814:	4b29      	ldr	r3, [pc, #164]	@ (100438bc <ButtonsMenuSM_Event_Handler+0x10bc>)
10043816:	781b      	ldrb	r3, [r3, #0]
10043818:	b25b      	sxtb	r3, r3
1004381a:	b2db      	uxtb	r3, r3
1004381c:	9300      	str	r3, [sp, #0]
1004381e:	0023      	movs	r3, r4
10043820:	f7fe fd82 	bl	10042328 <DrawSetTime>
				}
			}
			break;
10043824:	e163      	b.n	10043aee <ButtonsMenuSM_Event_Handler+0x12ee>
10043826:	e162      	b.n	10043aee <ButtonsMenuSM_Event_Handler+0x12ee>
		case options:
			if(event.status == EVENT_ENTRY){
10043828:	1d3b      	adds	r3, r7, #4
1004382a:	781b      	ldrb	r3, [r3, #0]
1004382c:	b25b      	sxtb	r3, r3
1004382e:	2b02      	cmp	r3, #2
10043830:	d10b      	bne.n	1004384a <ButtonsMenuSM_Event_Handler+0x104a>
				cursorpos = 0;
10043832:	4b24      	ldr	r3, [pc, #144]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
10043834:	2200      	movs	r2, #0
10043836:	701a      	strb	r2, [r3, #0]

				DrawOptions(cursorpos, FLASH_GetDutyCycle());
10043838:	4b22      	ldr	r3, [pc, #136]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004383a:	781c      	ldrb	r4, [r3, #0]
1004383c:	f001 f86e 	bl	1004491c <FLASH_GetDutyCycle>
10043840:	0003      	movs	r3, r0
10043842:	0019      	movs	r1, r3
10043844:	0020      	movs	r0, r4
10043846:	f7fe fd15 	bl	10042274 <DrawOptions>
			}
			if(event.status == EVENT_BUTTONS){
1004384a:	1d3b      	adds	r3, r7, #4
1004384c:	781b      	ldrb	r3, [r3, #0]
1004384e:	b25b      	sxtb	r3, r3
10043850:	2b04      	cmp	r3, #4
10043852:	d000      	beq.n	10043856 <ButtonsMenuSM_Event_Handler+0x1056>
10043854:	e14d      	b.n	10043af2 <ButtonsMenuSM_Event_Handler+0x12f2>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10043856:	1d3b      	adds	r3, r7, #4
10043858:	885b      	ldrh	r3, [r3, #2]
1004385a:	001a      	movs	r2, r3
1004385c:	2380      	movs	r3, #128	@ 0x80
1004385e:	005b      	lsls	r3, r3, #1
10043860:	4013      	ands	r3, r2
10043862:	d00e      	beq.n	10043882 <ButtonsMenuSM_Event_Handler+0x1082>
10043864:	1d3b      	adds	r3, r7, #4
10043866:	885b      	ldrh	r3, [r3, #2]
10043868:	001a      	movs	r2, r3
1004386a:	2301      	movs	r3, #1
1004386c:	4013      	ands	r3, r2
1004386e:	d108      	bne.n	10043882 <ButtonsMenuSM_Event_Handler+0x1082>
					//discountprintf("moving to main");
					nextstate = main;
10043870:	232e      	movs	r3, #46	@ 0x2e
10043872:	18fb      	adds	r3, r7, r3
10043874:	2200      	movs	r2, #0
10043876:	701a      	strb	r2, [r3, #0]
					transition = 1;
10043878:	232f      	movs	r3, #47	@ 0x2f
1004387a:	18fb      	adds	r3, r7, r3
1004387c:	2201      	movs	r2, #1
1004387e:	701a      	strb	r2, [r3, #0]
10043880:	e12a      	b.n	10043ad8 <ButtonsMenuSM_Event_Handler+0x12d8>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10043882:	1d3b      	adds	r3, r7, #4
10043884:	885b      	ldrh	r3, [r3, #2]
10043886:	001a      	movs	r2, r3
10043888:	2380      	movs	r3, #128	@ 0x80
1004388a:	009b      	lsls	r3, r3, #2
1004388c:	4013      	ands	r3, r2
1004388e:	d01f      	beq.n	100438d0 <ButtonsMenuSM_Event_Handler+0x10d0>
10043890:	1d3b      	adds	r3, r7, #4
10043892:	885b      	ldrh	r3, [r3, #2]
10043894:	001a      	movs	r2, r3
10043896:	2302      	movs	r3, #2
10043898:	4013      	ands	r3, r2
1004389a:	d119      	bne.n	100438d0 <ButtonsMenuSM_Event_Handler+0x10d0>
					//discountprintf("moving to main");
					if(cursorpos == 2){
1004389c:	4b09      	ldr	r3, [pc, #36]	@ (100438c4 <ButtonsMenuSM_Event_Handler+0x10c4>)
1004389e:	781b      	ldrb	r3, [r3, #0]
100438a0:	2b02      	cmp	r3, #2
100438a2:	d101      	bne.n	100438a8 <ButtonsMenuSM_Event_Handler+0x10a8>
						FLASH_ClearSchedule();
100438a4:	f001 fa20 	bl	10044ce8 <FLASH_ClearSchedule>
					}
					nextstate = main;
100438a8:	232e      	movs	r3, #46	@ 0x2e
100438aa:	18fb      	adds	r3, r7, r3
100438ac:	2200      	movs	r2, #0
100438ae:	701a      	strb	r2, [r3, #0]
					transition = 1;
100438b0:	232f      	movs	r3, #47	@ 0x2f
100438b2:	18fb      	adds	r3, r7, r3
100438b4:	2201      	movs	r2, #1
100438b6:	701a      	strb	r2, [r3, #0]
100438b8:	e10e      	b.n	10043ad8 <ButtonsMenuSM_Event_Handler+0x12d8>
100438ba:	46c0      	nop			@ (mov r8, r8)
100438bc:	200003b1 	.word	0x200003b1
100438c0:	200003b2 	.word	0x200003b2
100438c4:	2000039e 	.word	0x2000039e
100438c8:	200003b4 	.word	0x200003b4
100438cc:	200003b3 	.word	0x200003b3
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100438d0:	1d3b      	adds	r3, r7, #4
100438d2:	885b      	ldrh	r3, [r3, #2]
100438d4:	001a      	movs	r2, r3
100438d6:	2380      	movs	r3, #128	@ 0x80
100438d8:	00db      	lsls	r3, r3, #3
100438da:	4013      	ands	r3, r2
100438dc:	d01f      	beq.n	1004391e <ButtonsMenuSM_Event_Handler+0x111e>
100438de:	1d3b      	adds	r3, r7, #4
100438e0:	885b      	ldrh	r3, [r3, #2]
100438e2:	001a      	movs	r2, r3
100438e4:	2304      	movs	r3, #4
100438e6:	4013      	ands	r3, r2
100438e8:	d119      	bne.n	1004391e <ButtonsMenuSM_Event_Handler+0x111e>
					cursorpos++;
100438ea:	4b95      	ldr	r3, [pc, #596]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
100438ec:	781b      	ldrb	r3, [r3, #0]
100438ee:	3301      	adds	r3, #1
100438f0:	b2da      	uxtb	r2, r3
100438f2:	4b93      	ldr	r3, [pc, #588]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
100438f4:	701a      	strb	r2, [r3, #0]
					cursorpos %= 3;
100438f6:	4b92      	ldr	r3, [pc, #584]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
100438f8:	781b      	ldrb	r3, [r3, #0]
100438fa:	2103      	movs	r1, #3
100438fc:	0018      	movs	r0, r3
100438fe:	f7fc fd25 	bl	1004034c <__aeabi_uidivmod>
10043902:	000b      	movs	r3, r1
10043904:	b2da      	uxtb	r2, r3
10043906:	4b8e      	ldr	r3, [pc, #568]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
10043908:	701a      	strb	r2, [r3, #0]
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
1004390a:	4b8d      	ldr	r3, [pc, #564]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
1004390c:	781c      	ldrb	r4, [r3, #0]
1004390e:	f001 f805 	bl	1004491c <FLASH_GetDutyCycle>
10043912:	0003      	movs	r3, r0
10043914:	0019      	movs	r1, r3
10043916:	0020      	movs	r0, r4
10043918:	f7fe fcac 	bl	10042274 <DrawOptions>
1004391c:	e0dc      	b.n	10043ad8 <ButtonsMenuSM_Event_Handler+0x12d8>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
1004391e:	1d3b      	adds	r3, r7, #4
10043920:	885b      	ldrh	r3, [r3, #2]
10043922:	001a      	movs	r2, r3
10043924:	2380      	movs	r3, #128	@ 0x80
10043926:	011b      	lsls	r3, r3, #4
10043928:	4013      	ands	r3, r2
1004392a:	d01c      	beq.n	10043966 <ButtonsMenuSM_Event_Handler+0x1166>
1004392c:	1d3b      	adds	r3, r7, #4
1004392e:	885b      	ldrh	r3, [r3, #2]
10043930:	001a      	movs	r2, r3
10043932:	2308      	movs	r3, #8
10043934:	4013      	ands	r3, r2
10043936:	d116      	bne.n	10043966 <ButtonsMenuSM_Event_Handler+0x1166>
					cursorpos--;
10043938:	4b81      	ldr	r3, [pc, #516]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
1004393a:	781b      	ldrb	r3, [r3, #0]
1004393c:	3b01      	subs	r3, #1
1004393e:	b2da      	uxtb	r2, r3
10043940:	4b7f      	ldr	r3, [pc, #508]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
10043942:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10043944:	4b7e      	ldr	r3, [pc, #504]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
10043946:	781b      	ldrb	r3, [r3, #0]
10043948:	2bff      	cmp	r3, #255	@ 0xff
1004394a:	d102      	bne.n	10043952 <ButtonsMenuSM_Event_Handler+0x1152>
						cursorpos = 2;
1004394c:	4b7c      	ldr	r3, [pc, #496]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
1004394e:	2202      	movs	r2, #2
10043950:	701a      	strb	r2, [r3, #0]
					}
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
10043952:	4b7b      	ldr	r3, [pc, #492]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
10043954:	781c      	ldrb	r4, [r3, #0]
10043956:	f000 ffe1 	bl	1004491c <FLASH_GetDutyCycle>
1004395a:	0003      	movs	r3, r0
1004395c:	0019      	movs	r1, r3
1004395e:	0020      	movs	r0, r4
10043960:	f7fe fc88 	bl	10042274 <DrawOptions>
					break;
10043964:	e0c6      	b.n	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10043966:	1d3b      	adds	r3, r7, #4
10043968:	885b      	ldrh	r3, [r3, #2]
1004396a:	001a      	movs	r2, r3
1004396c:	2380      	movs	r3, #128	@ 0x80
1004396e:	015b      	lsls	r3, r3, #5
10043970:	4013      	ands	r3, r2
10043972:	d057      	beq.n	10043a24 <ButtonsMenuSM_Event_Handler+0x1224>
10043974:	1d3b      	adds	r3, r7, #4
10043976:	885b      	ldrh	r3, [r3, #2]
10043978:	001a      	movs	r2, r3
1004397a:	2310      	movs	r3, #16
1004397c:	4013      	ands	r3, r2
1004397e:	d151      	bne.n	10043a24 <ButtonsMenuSM_Event_Handler+0x1224>
					switch(cursorpos){
10043980:	4b6f      	ldr	r3, [pc, #444]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
10043982:	781b      	ldrb	r3, [r3, #0]
10043984:	2b00      	cmp	r3, #0
10043986:	d002      	beq.n	1004398e <ButtonsMenuSM_Event_Handler+0x118e>
10043988:	2b01      	cmp	r3, #1
1004398a:	d036      	beq.n	100439fa <ButtonsMenuSM_Event_Handler+0x11fa>
					case 1:
						uint8_t accumulation = 0;
						MP3_Event_Post(((Event_t){EVENT_PLAY, MP3_GetCurrentFile()-1}));
						break;
					default:
						break;
1004398c:	e049      	b.n	10043a22 <ButtonsMenuSM_Event_Handler+0x1222>
						int8_t dc = FLASH_GetDutyCycle()-5;
1004398e:	f000 ffc5 	bl	1004491c <FLASH_GetDutyCycle>
10043992:	0003      	movs	r3, r0
10043994:	3b05      	subs	r3, #5
10043996:	b2da      	uxtb	r2, r3
10043998:	242c      	movs	r4, #44	@ 0x2c
1004399a:	193b      	adds	r3, r7, r4
1004399c:	701a      	strb	r2, [r3, #0]
						if(dc < 0){
1004399e:	193b      	adds	r3, r7, r4
100439a0:	781b      	ldrb	r3, [r3, #0]
100439a2:	2b7f      	cmp	r3, #127	@ 0x7f
100439a4:	d915      	bls.n	100439d2 <ButtonsMenuSM_Event_Handler+0x11d2>
							dc = 0;
100439a6:	193b      	adds	r3, r7, r4
100439a8:	2200      	movs	r2, #0
100439aa:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
100439ac:	f000 ffa0 	bl	100448f0 <FLASH_GetVolume>
100439b0:	0003      	movs	r3, r0
100439b2:	001a      	movs	r2, r3
100439b4:	193b      	adds	r3, r7, r4
100439b6:	781b      	ldrb	r3, [r3, #0]
100439b8:	0019      	movs	r1, r3
100439ba:	0010      	movs	r0, r2
100439bc:	f000 ff56 	bl	1004486c <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
100439c0:	4b5f      	ldr	r3, [pc, #380]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
100439c2:	781a      	ldrb	r2, [r3, #0]
100439c4:	193b      	adds	r3, r7, r4
100439c6:	781b      	ldrb	r3, [r3, #0]
100439c8:	0019      	movs	r1, r3
100439ca:	0010      	movs	r0, r2
100439cc:	f7fe fc52 	bl	10042274 <DrawOptions>
						break;
100439d0:	e027      	b.n	10043a22 <ButtonsMenuSM_Event_Handler+0x1222>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
100439d2:	f000 ff8d 	bl	100448f0 <FLASH_GetVolume>
100439d6:	0003      	movs	r3, r0
100439d8:	001a      	movs	r2, r3
100439da:	242c      	movs	r4, #44	@ 0x2c
100439dc:	193b      	adds	r3, r7, r4
100439de:	781b      	ldrb	r3, [r3, #0]
100439e0:	0019      	movs	r1, r3
100439e2:	0010      	movs	r0, r2
100439e4:	f000 ff42 	bl	1004486c <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
100439e8:	4b55      	ldr	r3, [pc, #340]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
100439ea:	781a      	ldrb	r2, [r3, #0]
100439ec:	193b      	adds	r3, r7, r4
100439ee:	781b      	ldrb	r3, [r3, #0]
100439f0:	0019      	movs	r1, r3
100439f2:	0010      	movs	r0, r2
100439f4:	f7fe fc3e 	bl	10042274 <DrawOptions>
						break;
100439f8:	e013      	b.n	10043a22 <ButtonsMenuSM_Event_Handler+0x1222>
						uint8_t accumulation = 0;
100439fa:	232d      	movs	r3, #45	@ 0x2d
100439fc:	18fb      	adds	r3, r7, r3
100439fe:	2200      	movs	r2, #0
10043a00:	701a      	strb	r2, [r3, #0]
						MP3_Event_Post(((Event_t){EVENT_PLAY, MP3_GetCurrentFile()-1}));
10043a02:	2418      	movs	r4, #24
10043a04:	193b      	adds	r3, r7, r4
10043a06:	220b      	movs	r2, #11
10043a08:	701a      	strb	r2, [r3, #0]
10043a0a:	f002 faab 	bl	10045f64 <MP3_GetCurrentFile>
10043a0e:	0003      	movs	r3, r0
10043a10:	3b01      	subs	r3, #1
10043a12:	b29a      	uxth	r2, r3
10043a14:	193b      	adds	r3, r7, r4
10043a16:	805a      	strh	r2, [r3, #2]
10043a18:	193b      	adds	r3, r7, r4
10043a1a:	6818      	ldr	r0, [r3, #0]
10043a1c:	f001 ff0e 	bl	1004583c <MP3_Event_Post>
						break;
10043a20:	46c0      	nop			@ (mov r8, r8)
					switch(cursorpos){
10043a22:	e059      	b.n	10043ad8 <ButtonsMenuSM_Event_Handler+0x12d8>
					}
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10043a24:	1d3b      	adds	r3, r7, #4
10043a26:	885b      	ldrh	r3, [r3, #2]
10043a28:	001a      	movs	r2, r3
10043a2a:	2380      	movs	r3, #128	@ 0x80
10043a2c:	019b      	lsls	r3, r3, #6
10043a2e:	4013      	ands	r3, r2
10043a30:	d05f      	beq.n	10043af2 <ButtonsMenuSM_Event_Handler+0x12f2>
10043a32:	1d3b      	adds	r3, r7, #4
10043a34:	885b      	ldrh	r3, [r3, #2]
10043a36:	001a      	movs	r2, r3
10043a38:	2320      	movs	r3, #32
10043a3a:	4013      	ands	r3, r2
10043a3c:	d159      	bne.n	10043af2 <ButtonsMenuSM_Event_Handler+0x12f2>
					switch(cursorpos){
10043a3e:	4b40      	ldr	r3, [pc, #256]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
10043a40:	781b      	ldrb	r3, [r3, #0]
10043a42:	2b00      	cmp	r3, #0
10043a44:	d002      	beq.n	10043a4c <ButtonsMenuSM_Event_Handler+0x124c>
10043a46:	2b01      	cmp	r3, #1
10043a48:	d036      	beq.n	10043ab8 <ButtonsMenuSM_Event_Handler+0x12b8>
						break;
					case 1:
						MP3_Event_Post(((Event_t){EVENT_PLAY, MP3_GetCurrentFile()+1}));
						break;
					default:
						break;
10043a4a:	e045      	b.n	10043ad8 <ButtonsMenuSM_Event_Handler+0x12d8>
						uint8_t dc = FLASH_GetDutyCycle()+5;
10043a4c:	f000 ff66 	bl	1004491c <FLASH_GetDutyCycle>
10043a50:	0003      	movs	r3, r0
10043a52:	001a      	movs	r2, r3
10043a54:	242b      	movs	r4, #43	@ 0x2b
10043a56:	193b      	adds	r3, r7, r4
10043a58:	3205      	adds	r2, #5
10043a5a:	701a      	strb	r2, [r3, #0]
						if(dc > 100){
10043a5c:	193b      	adds	r3, r7, r4
10043a5e:	781b      	ldrb	r3, [r3, #0]
10043a60:	2b64      	cmp	r3, #100	@ 0x64
10043a62:	d915      	bls.n	10043a90 <ButtonsMenuSM_Event_Handler+0x1290>
							dc = 100;
10043a64:	193b      	adds	r3, r7, r4
10043a66:	2264      	movs	r2, #100	@ 0x64
10043a68:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10043a6a:	f000 ff41 	bl	100448f0 <FLASH_GetVolume>
10043a6e:	0003      	movs	r3, r0
10043a70:	001a      	movs	r2, r3
10043a72:	193b      	adds	r3, r7, r4
10043a74:	781b      	ldrb	r3, [r3, #0]
10043a76:	0019      	movs	r1, r3
10043a78:	0010      	movs	r0, r2
10043a7a:	f000 fef7 	bl	1004486c <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
10043a7e:	4b30      	ldr	r3, [pc, #192]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
10043a80:	781a      	ldrb	r2, [r3, #0]
10043a82:	193b      	adds	r3, r7, r4
10043a84:	781b      	ldrb	r3, [r3, #0]
10043a86:	0019      	movs	r1, r3
10043a88:	0010      	movs	r0, r2
10043a8a:	f7fe fbf3 	bl	10042274 <DrawOptions>
						break;
10043a8e:	e023      	b.n	10043ad8 <ButtonsMenuSM_Event_Handler+0x12d8>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10043a90:	f000 ff2e 	bl	100448f0 <FLASH_GetVolume>
10043a94:	0003      	movs	r3, r0
10043a96:	001a      	movs	r2, r3
10043a98:	242b      	movs	r4, #43	@ 0x2b
10043a9a:	193b      	adds	r3, r7, r4
10043a9c:	781b      	ldrb	r3, [r3, #0]
10043a9e:	0019      	movs	r1, r3
10043aa0:	0010      	movs	r0, r2
10043aa2:	f000 fee3 	bl	1004486c <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
10043aa6:	4b26      	ldr	r3, [pc, #152]	@ (10043b40 <ButtonsMenuSM_Event_Handler+0x1340>)
10043aa8:	781a      	ldrb	r2, [r3, #0]
10043aaa:	193b      	adds	r3, r7, r4
10043aac:	781b      	ldrb	r3, [r3, #0]
10043aae:	0019      	movs	r1, r3
10043ab0:	0010      	movs	r0, r2
10043ab2:	f7fe fbdf 	bl	10042274 <DrawOptions>
						break;
10043ab6:	e00f      	b.n	10043ad8 <ButtonsMenuSM_Event_Handler+0x12d8>
						MP3_Event_Post(((Event_t){EVENT_PLAY, MP3_GetCurrentFile()+1}));
10043ab8:	2414      	movs	r4, #20
10043aba:	193b      	adds	r3, r7, r4
10043abc:	220b      	movs	r2, #11
10043abe:	701a      	strb	r2, [r3, #0]
10043ac0:	f002 fa50 	bl	10045f64 <MP3_GetCurrentFile>
10043ac4:	0003      	movs	r3, r0
10043ac6:	3301      	adds	r3, #1
10043ac8:	b29a      	uxth	r2, r3
10043aca:	193b      	adds	r3, r7, r4
10043acc:	805a      	strh	r2, [r3, #2]
10043ace:	193b      	adds	r3, r7, r4
10043ad0:	6818      	ldr	r0, [r3, #0]
10043ad2:	f001 feb3 	bl	1004583c <MP3_Event_Post>
						break;
10043ad6:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			break;
10043ad8:	e00b      	b.n	10043af2 <ButtonsMenuSM_Event_Handler+0x12f2>
		default:
			break;
10043ada:	46c0      	nop			@ (mov r8, r8)
10043adc:	e00a      	b.n	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
			break;
10043ade:	46c0      	nop			@ (mov r8, r8)
10043ae0:	e008      	b.n	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
			break;
10043ae2:	46c0      	nop			@ (mov r8, r8)
10043ae4:	e006      	b.n	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
			break;
10043ae6:	46c0      	nop			@ (mov r8, r8)
10043ae8:	e004      	b.n	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
			break;
10043aea:	46c0      	nop			@ (mov r8, r8)
10043aec:	e002      	b.n	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
			break;
10043aee:	46c0      	nop			@ (mov r8, r8)
10043af0:	e000      	b.n	10043af4 <ButtonsMenuSM_Event_Handler+0x12f4>
			break;
10043af2:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if(transition){
10043af4:	232f      	movs	r3, #47	@ 0x2f
10043af6:	18fb      	adds	r3, r7, r3
10043af8:	781b      	ldrb	r3, [r3, #0]
10043afa:	2b00      	cmp	r3, #0
10043afc:	d01a      	beq.n	10043b34 <ButtonsMenuSM_Event_Handler+0x1334>
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_EXIT});
10043afe:	2110      	movs	r1, #16
10043b00:	187b      	adds	r3, r7, r1
10043b02:	2200      	movs	r2, #0
10043b04:	601a      	str	r2, [r3, #0]
10043b06:	187b      	adds	r3, r7, r1
10043b08:	2203      	movs	r2, #3
10043b0a:	701a      	strb	r2, [r3, #0]
10043b0c:	187b      	adds	r3, r7, r1
10043b0e:	6818      	ldr	r0, [r3, #0]
10043b10:	f7fe fe76 	bl	10042800 <ButtonsMenuSM_Event_Handler>
		BMState = nextstate;
10043b14:	4b0b      	ldr	r3, [pc, #44]	@ (10043b44 <ButtonsMenuSM_Event_Handler+0x1344>)
10043b16:	222e      	movs	r2, #46	@ 0x2e
10043b18:	18ba      	adds	r2, r7, r2
10043b1a:	7812      	ldrb	r2, [r2, #0]
10043b1c:	701a      	strb	r2, [r3, #0]
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_ENTRY});
10043b1e:	210c      	movs	r1, #12
10043b20:	187b      	adds	r3, r7, r1
10043b22:	2200      	movs	r2, #0
10043b24:	601a      	str	r2, [r3, #0]
10043b26:	187b      	adds	r3, r7, r1
10043b28:	2202      	movs	r2, #2
10043b2a:	701a      	strb	r2, [r3, #0]
10043b2c:	187b      	adds	r3, r7, r1
10043b2e:	6818      	ldr	r0, [r3, #0]
10043b30:	f7fe fe66 	bl	10042800 <ButtonsMenuSM_Event_Handler>
	}
    return 1;
10043b34:	2301      	movs	r3, #1
}
10043b36:	0018      	movs	r0, r3
10043b38:	46bd      	mov	sp, r7
10043b3a:	b00d      	add	sp, #52	@ 0x34
10043b3c:	bd90      	pop	{r4, r7, pc}
10043b3e:	46c0      	nop			@ (mov r8, r8)
10043b40:	2000039e 	.word	0x2000039e
10043b44:	2000039c 	.word	0x2000039c

10043b48 <COMM_Event_Init>:
 * @Function: EVENT_COMM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t COMM_Event_Init(FIFO Queue){
10043b48:	b580      	push	{r7, lr}
10043b4a:	b084      	sub	sp, #16
10043b4c:	af00      	add	r7, sp, #0
10043b4e:	6078      	str	r0, [r7, #4]
	commSM = init;
10043b50:	4b0c      	ldr	r3, [pc, #48]	@ (10043b84 <COMM_Event_Init+0x3c>)
10043b52:	2200      	movs	r2, #0
10043b54:	701a      	strb	r2, [r3, #0]
	COMMqueue = Queue;
10043b56:	4b0c      	ldr	r3, [pc, #48]	@ (10043b88 <COMM_Event_Init+0x40>)
10043b58:	687a      	ldr	r2, [r7, #4]
10043b5a:	601a      	str	r2, [r3, #0]
	UARTs_Init();
10043b5c:	f002 fff4 	bl	10046b48 <UARTs_Init>
	FLASH_Init();
10043b60:	f000 fe08 	bl	10044774 <FLASH_Init>
	COMM_Event_Post((Event_t){EVENT_INIT, 0});
10043b64:	210c      	movs	r1, #12
10043b66:	187b      	adds	r3, r7, r1
10043b68:	2201      	movs	r2, #1
10043b6a:	701a      	strb	r2, [r3, #0]
10043b6c:	187b      	adds	r3, r7, r1
10043b6e:	2200      	movs	r2, #0
10043b70:	805a      	strh	r2, [r3, #2]
10043b72:	187b      	adds	r3, r7, r1
10043b74:	6818      	ldr	r0, [r3, #0]
10043b76:	f000 f809 	bl	10043b8c <COMM_Event_Post>
	return INIT_OK;
10043b7a:	2301      	movs	r3, #1
}
10043b7c:	0018      	movs	r0, r3
10043b7e:	46bd      	mov	sp, r7
10043b80:	b004      	add	sp, #16
10043b82:	bd80      	pop	{r7, pc}
10043b84:	200003b5 	.word	0x200003b5
10043b88:	200003b8 	.word	0x200003b8

10043b8c <COMM_Event_Post>:

void COMM_Event_Post(Event_t event){
10043b8c:	b580      	push	{r7, lr}
10043b8e:	b082      	sub	sp, #8
10043b90:	af00      	add	r7, sp, #0
10043b92:	1d3b      	adds	r3, r7, #4
10043b94:	6018      	str	r0, [r3, #0]
	FIFO_Enqueue(COMMqueue, event);
10043b96:	4b05      	ldr	r3, [pc, #20]	@ (10043bac <COMM_Event_Post+0x20>)
10043b98:	681a      	ldr	r2, [r3, #0]
10043b9a:	1d3b      	adds	r3, r7, #4
10043b9c:	6819      	ldr	r1, [r3, #0]
10043b9e:	0010      	movs	r0, r2
10043ba0:	f000 fd53 	bl	1004464a <FIFO_Enqueue>
}
10043ba4:	46c0      	nop			@ (mov r8, r8)
10043ba6:	46bd      	mov	sp, r7
10043ba8:	b002      	add	sp, #8
10043baa:	bd80      	pop	{r7, pc}
10043bac:	200003b8 	.word	0x200003b8

10043bb0 <COMM_Event_Updater>:
 * @Function: EVENT_COMM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the 
 * @param: none
 * @return: An event 
 */
Event_t COMM_Event_Updater(void){
10043bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10043bb2:	b087      	sub	sp, #28
10043bb4:	af00      	add	r7, sp, #0
	uint8_t event = 0;
10043bb6:	2317      	movs	r3, #23
10043bb8:	18fb      	adds	r3, r7, r3
10043bba:	2200      	movs	r2, #0
10043bbc:	701a      	strb	r2, [r3, #0]
    Event_t out = (Event_t){EVENT_NONE, 0};
10043bbe:	250c      	movs	r5, #12
10043bc0:	197b      	adds	r3, r7, r5
10043bc2:	2200      	movs	r2, #0
10043bc4:	701a      	strb	r2, [r3, #0]
10043bc6:	197b      	adds	r3, r7, r5
10043bc8:	2200      	movs	r2, #0
10043bca:	805a      	strh	r2, [r3, #2]
    char input = USART_ReadRx();
10043bcc:	2616      	movs	r6, #22
10043bce:	19bc      	adds	r4, r7, r6
10043bd0:	f003 f8b4 	bl	10046d3c <USART_ReadRx>
10043bd4:	0003      	movs	r3, r0
10043bd6:	7023      	strb	r3, [r4, #0]
    if(input != UARTFAILED){
10043bd8:	0031      	movs	r1, r6
10043bda:	187b      	adds	r3, r7, r1
10043bdc:	781b      	ldrb	r3, [r3, #0]
10043bde:	2b25      	cmp	r3, #37	@ 0x25
10043be0:	d00b      	beq.n	10043bfa <COMM_Event_Updater+0x4a>
    	event = 1;
10043be2:	2317      	movs	r3, #23
10043be4:	18fb      	adds	r3, r7, r3
10043be6:	2201      	movs	r2, #1
10043be8:	701a      	strb	r2, [r3, #0]
    	out.status = EVENT_USART;
10043bea:	197b      	adds	r3, r7, r5
10043bec:	2206      	movs	r2, #6
10043bee:	701a      	strb	r2, [r3, #0]
    	out.data = (uint16_t)input;
10043bf0:	187b      	adds	r3, r7, r1
10043bf2:	781b      	ldrb	r3, [r3, #0]
10043bf4:	b29a      	uxth	r2, r3
10043bf6:	197b      	adds	r3, r7, r5
10043bf8:	805a      	strh	r2, [r3, #2]
    }
    if(sendinglogs == 1){
10043bfa:	4b1f      	ldr	r3, [pc, #124]	@ (10043c78 <COMM_Event_Updater+0xc8>)
10043bfc:	781b      	ldrb	r3, [r3, #0]
10043bfe:	2b01      	cmp	r3, #1
10043c00:	d115      	bne.n	10043c2e <COMM_Event_Updater+0x7e>
    	if(USART_TxEmpty() || BLUETOOTH_BufferEmpty() == 1){
10043c02:	f003 f8b6 	bl	10046d72 <USART_TxEmpty>
10043c06:	1e03      	subs	r3, r0, #0
10043c08:	d104      	bne.n	10043c14 <COMM_Event_Updater+0x64>
10043c0a:	f7fe fa11 	bl	10042030 <BLUETOOTH_BufferEmpty>
10043c0e:	0003      	movs	r3, r0
10043c10:	2b01      	cmp	r3, #1
10043c12:	d10c      	bne.n	10043c2e <COMM_Event_Updater+0x7e>
    		FIFO_Enqueue(COMMqueue, (Event_t){EVENT_USART_READY, 0});
10043c14:	4b19      	ldr	r3, [pc, #100]	@ (10043c7c <COMM_Event_Updater+0xcc>)
10043c16:	681a      	ldr	r2, [r3, #0]
10043c18:	1d3b      	adds	r3, r7, #4
10043c1a:	2107      	movs	r1, #7
10043c1c:	7019      	strb	r1, [r3, #0]
10043c1e:	1d3b      	adds	r3, r7, #4
10043c20:	2100      	movs	r1, #0
10043c22:	8059      	strh	r1, [r3, #2]
10043c24:	1d3b      	adds	r3, r7, #4
10043c26:	6819      	ldr	r1, [r3, #0]
10043c28:	0010      	movs	r0, r2
10043c2a:	f000 fd0e 	bl	1004464a <FIFO_Enqueue>
    	}
    }
	if(event){FIFO_Enqueue(COMMqueue, out);}
10043c2e:	2317      	movs	r3, #23
10043c30:	18fb      	adds	r3, r7, r3
10043c32:	781b      	ldrb	r3, [r3, #0]
10043c34:	2b00      	cmp	r3, #0
10043c36:	d007      	beq.n	10043c48 <COMM_Event_Updater+0x98>
10043c38:	4b10      	ldr	r3, [pc, #64]	@ (10043c7c <COMM_Event_Updater+0xcc>)
10043c3a:	681a      	ldr	r2, [r3, #0]
10043c3c:	230c      	movs	r3, #12
10043c3e:	18fb      	adds	r3, r7, r3
10043c40:	6819      	ldr	r1, [r3, #0]
10043c42:	0010      	movs	r0, r2
10043c44:	f000 fd01 	bl	1004464a <FIFO_Enqueue>
    return out;
10043c48:	2110      	movs	r1, #16
10043c4a:	187b      	adds	r3, r7, r1
10043c4c:	220c      	movs	r2, #12
10043c4e:	18ba      	adds	r2, r7, r2
10043c50:	6812      	ldr	r2, [r2, #0]
10043c52:	601a      	str	r2, [r3, #0]
10043c54:	187a      	adds	r2, r7, r1
10043c56:	2300      	movs	r3, #0
10043c58:	8811      	ldrh	r1, [r2, #0]
10043c5a:	0409      	lsls	r1, r1, #16
10043c5c:	0c09      	lsrs	r1, r1, #16
10043c5e:	0c1b      	lsrs	r3, r3, #16
10043c60:	041b      	lsls	r3, r3, #16
10043c62:	430b      	orrs	r3, r1
10043c64:	8852      	ldrh	r2, [r2, #2]
10043c66:	0412      	lsls	r2, r2, #16
10043c68:	041b      	lsls	r3, r3, #16
10043c6a:	0c1b      	lsrs	r3, r3, #16
10043c6c:	4313      	orrs	r3, r2
}
10043c6e:	0018      	movs	r0, r3
10043c70:	46bd      	mov	sp, r7
10043c72:	b007      	add	sp, #28
10043c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043c76:	46c0      	nop			@ (mov r8, r8)
10043c78:	200003bc 	.word	0x200003bc
10043c7c:	200003b8 	.word	0x200003b8

10043c80 <COMM_Event_Handler>:
 * @Function: EVENT_COMM_Event_Handler
 * @Brief: 
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t COMM_Event_Handler(Event_t event){
10043c80:	b5b0      	push	{r4, r5, r7, lr}
10043c82:	b09e      	sub	sp, #120	@ 0x78
10043c84:	af00      	add	r7, sp, #0
10043c86:	1d3b      	adds	r3, r7, #4
10043c88:	6018      	str	r0, [r3, #0]
	bool transition = 0;
10043c8a:	2377      	movs	r3, #119	@ 0x77
10043c8c:	18fb      	adds	r3, r7, r3
10043c8e:	2200      	movs	r2, #0
10043c90:	701a      	strb	r2, [r3, #0]

	static uint8_t folder;
	COMMSTATES_t next = commSM;
10043c92:	2376      	movs	r3, #118	@ 0x76
10043c94:	18fb      	adds	r3, r7, r3
10043c96:	4ad6      	ldr	r2, [pc, #856]	@ (10043ff0 <COMM_Event_Handler+0x370>)
10043c98:	7812      	ldrb	r2, [r2, #0]
10043c9a:	701a      	strb	r2, [r3, #0]
	char text[50];
	switch(commSM){
10043c9c:	4bd4      	ldr	r3, [pc, #848]	@ (10043ff0 <COMM_Event_Handler+0x370>)
10043c9e:	781b      	ldrb	r3, [r3, #0]
10043ca0:	2b13      	cmp	r3, #19
10043ca2:	d901      	bls.n	10043ca8 <COMM_Event_Handler+0x28>
10043ca4:	f000 fc20 	bl	100444e8 <COMM_Event_Handler+0x868>
10043ca8:	009a      	lsls	r2, r3, #2
10043caa:	4bd2      	ldr	r3, [pc, #840]	@ (10043ff4 <COMM_Event_Handler+0x374>)
10043cac:	18d3      	adds	r3, r2, r3
10043cae:	681b      	ldr	r3, [r3, #0]
10043cb0:	469f      	mov	pc, r3
	case init:
		if(event.status == EVENT_INIT){
10043cb2:	1d3b      	adds	r3, r7, #4
10043cb4:	781b      	ldrb	r3, [r3, #0]
10043cb6:	b25b      	sxtb	r3, r3
10043cb8:	2b01      	cmp	r3, #1
10043cba:	d001      	beq.n	10043cc0 <COMM_Event_Handler+0x40>
10043cbc:	f000 fc16 	bl	100444ec <COMM_Event_Handler+0x86c>
			next = idle;
10043cc0:	2376      	movs	r3, #118	@ 0x76
10043cc2:	18fb      	adds	r3, r7, r3
10043cc4:	2201      	movs	r2, #1
10043cc6:	701a      	strb	r2, [r3, #0]
			transition = true;
10043cc8:	2377      	movs	r3, #119	@ 0x77
10043cca:	18fb      	adds	r3, r7, r3
10043ccc:	2201      	movs	r2, #1
10043cce:	701a      	strb	r2, [r3, #0]
		}
		break;
10043cd0:	f000 fc0c 	bl	100444ec <COMM_Event_Handler+0x86c>
	case idle:
		if(event.status == EVENT_ENTRY){
10043cd4:	1d3b      	adds	r3, r7, #4
10043cd6:	781b      	ldrb	r3, [r3, #0]
10043cd8:	b25b      	sxtb	r3, r3
10043cda:	2b02      	cmp	r3, #2
10043cdc:	d102      	bne.n	10043ce4 <COMM_Event_Handler+0x64>
			sendinglogs = 0;
10043cde:	4bc6      	ldr	r3, [pc, #792]	@ (10043ff8 <COMM_Event_Handler+0x378>)
10043ce0:	2200      	movs	r2, #0
10043ce2:	701a      	strb	r2, [r3, #0]
		}
		if(event.status == EVENT_USART){
10043ce4:	1d3b      	adds	r3, r7, #4
10043ce6:	781b      	ldrb	r3, [r3, #0]
10043ce8:	b25b      	sxtb	r3, r3
10043cea:	2b06      	cmp	r3, #6
10043cec:	d001      	beq.n	10043cf2 <COMM_Event_Handler+0x72>
10043cee:	f000 fbff 	bl	100444f0 <COMM_Event_Handler+0x870>
			switch (event.data){
10043cf2:	1d3b      	adds	r3, r7, #4
10043cf4:	885b      	ldrh	r3, [r3, #2]
10043cf6:	2b0f      	cmp	r3, #15
10043cf8:	d852      	bhi.n	10043da0 <COMM_Event_Handler+0x120>
10043cfa:	009a      	lsls	r2, r3, #2
10043cfc:	4bbf      	ldr	r3, [pc, #764]	@ (10043ffc <COMM_Event_Handler+0x37c>)
10043cfe:	18d3      	adds	r3, r2, r3
10043d00:	681b      	ldr	r3, [r3, #0]
10043d02:	469f      	mov	pc, r3
			case VOLUMECONTROL:
				discountprintf("received volume control");
10043d04:	4bbe      	ldr	r3, [pc, #760]	@ (10044000 <COMM_Event_Handler+0x380>)
10043d06:	0018      	movs	r0, r3
10043d08:	f000 fc3c 	bl	10044584 <discountprintf>
				next = volumecontrol;
10043d0c:	2376      	movs	r3, #118	@ 0x76
10043d0e:	18fb      	adds	r3, r7, r3
10043d10:	2202      	movs	r2, #2
10043d12:	701a      	strb	r2, [r3, #0]
				transition = true;
10043d14:	2377      	movs	r3, #119	@ 0x77
10043d16:	18fb      	adds	r3, r7, r3
10043d18:	2201      	movs	r2, #1
10043d1a:	701a      	strb	r2, [r3, #0]
				break;
10043d1c:	e041      	b.n	10043da2 <COMM_Event_Handler+0x122>
			case FOLDERCONTROL:
				discountprintf("received folder control");
10043d1e:	4bb9      	ldr	r3, [pc, #740]	@ (10044004 <COMM_Event_Handler+0x384>)
10043d20:	0018      	movs	r0, r3
10043d22:	f000 fc2f 	bl	10044584 <discountprintf>
				next = foldercontrol;
10043d26:	2376      	movs	r3, #118	@ 0x76
10043d28:	18fb      	adds	r3, r7, r3
10043d2a:	2203      	movs	r2, #3
10043d2c:	701a      	strb	r2, [r3, #0]
				transition = true;
10043d2e:	2377      	movs	r3, #119	@ 0x77
10043d30:	18fb      	adds	r3, r7, r3
10043d32:	2201      	movs	r2, #1
10043d34:	701a      	strb	r2, [r3, #0]
				break;
10043d36:	e034      	b.n	10043da2 <COMM_Event_Handler+0x122>
			case LOGSREQUEST:
				discountprintf("received logs request");
10043d38:	4bb3      	ldr	r3, [pc, #716]	@ (10044008 <COMM_Event_Handler+0x388>)
10043d3a:	0018      	movs	r0, r3
10043d3c:	f000 fc22 	bl	10044584 <discountprintf>
				next = logsrequest;
10043d40:	2376      	movs	r3, #118	@ 0x76
10043d42:	18fb      	adds	r3, r7, r3
10043d44:	2205      	movs	r2, #5
10043d46:	701a      	strb	r2, [r3, #0]
				transition = true;
10043d48:	2377      	movs	r3, #119	@ 0x77
10043d4a:	18fb      	adds	r3, r7, r3
10043d4c:	2201      	movs	r2, #1
10043d4e:	701a      	strb	r2, [r3, #0]
				break;
10043d50:	e027      	b.n	10043da2 <COMM_Event_Handler+0x122>
			case DCCONTROL:
				discountprintf("received DC control");
10043d52:	4bae      	ldr	r3, [pc, #696]	@ (1004400c <COMM_Event_Handler+0x38c>)
10043d54:	0018      	movs	r0, r3
10043d56:	f000 fc15 	bl	10044584 <discountprintf>
				next = dccontrol;
10043d5a:	2376      	movs	r3, #118	@ 0x76
10043d5c:	18fb      	adds	r3, r7, r3
10043d5e:	2207      	movs	r2, #7
10043d60:	701a      	strb	r2, [r3, #0]
				transition = true;
10043d62:	2377      	movs	r3, #119	@ 0x77
10043d64:	18fb      	adds	r3, r7, r3
10043d66:	2201      	movs	r2, #1
10043d68:	701a      	strb	r2, [r3, #0]
				break;
10043d6a:	e01a      	b.n	10043da2 <COMM_Event_Handler+0x122>
			case SCHEDULECONTROL:
				discountprintf("received schedule control");
10043d6c:	4ba8      	ldr	r3, [pc, #672]	@ (10044010 <COMM_Event_Handler+0x390>)
10043d6e:	0018      	movs	r0, r3
10043d70:	f000 fc08 	bl	10044584 <discountprintf>
				next = schedulecontrol;
10043d74:	2376      	movs	r3, #118	@ 0x76
10043d76:	18fb      	adds	r3, r7, r3
10043d78:	2208      	movs	r2, #8
10043d7a:	701a      	strb	r2, [r3, #0]
				transition = true;
10043d7c:	2377      	movs	r3, #119	@ 0x77
10043d7e:	18fb      	adds	r3, r7, r3
10043d80:	2201      	movs	r2, #1
10043d82:	701a      	strb	r2, [r3, #0]
				break;
10043d84:	e00d      	b.n	10043da2 <COMM_Event_Handler+0x122>
			case SETTIME:
				discountprintf("received set time control");
10043d86:	4ba3      	ldr	r3, [pc, #652]	@ (10044014 <COMM_Event_Handler+0x394>)
10043d88:	0018      	movs	r0, r3
10043d8a:	f000 fbfb 	bl	10044584 <discountprintf>
				next = timeminute;
10043d8e:	2376      	movs	r3, #118	@ 0x76
10043d90:	18fb      	adds	r3, r7, r3
10043d92:	2210      	movs	r2, #16
10043d94:	701a      	strb	r2, [r3, #0]
				transition = true;
10043d96:	2377      	movs	r3, #119	@ 0x77
10043d98:	18fb      	adds	r3, r7, r3
10043d9a:	2201      	movs	r2, #1
10043d9c:	701a      	strb	r2, [r3, #0]
				break;
10043d9e:	e000      	b.n	10043da2 <COMM_Event_Handler+0x122>
			default:
				break;
10043da0:	46c0      	nop			@ (mov r8, r8)
			}
		}
		break;
10043da2:	f000 fba5 	bl	100444f0 <COMM_Event_Handler+0x870>
	case volumecontrol:
		if(event.status == EVENT_USART){
10043da6:	1d3b      	adds	r3, r7, #4
10043da8:	781b      	ldrb	r3, [r3, #0]
10043daa:	b25b      	sxtb	r3, r3
10043dac:	2b06      	cmp	r3, #6
10043dae:	d001      	beq.n	10043db4 <COMM_Event_Handler+0x134>
10043db0:	f000 fba0 	bl	100444f4 <COMM_Event_Handler+0x874>
			FLASH_SetDCVol((uint8_t)event.data, FLASH_GetDutyCycle());
10043db4:	1d3b      	adds	r3, r7, #4
10043db6:	885b      	ldrh	r3, [r3, #2]
10043db8:	b2dc      	uxtb	r4, r3
10043dba:	f000 fdaf 	bl	1004491c <FLASH_GetDutyCycle>
10043dbe:	0003      	movs	r3, r0
10043dc0:	0019      	movs	r1, r3
10043dc2:	0020      	movs	r0, r4
10043dc4:	f000 fd52 	bl	1004486c <FLASH_SetDCVol>
			sprintf(text, "Storing volume %d", FLASH_GetVolume());
10043dc8:	f000 fd92 	bl	100448f0 <FLASH_GetVolume>
10043dcc:	0003      	movs	r3, r0
10043dce:	001a      	movs	r2, r3
10043dd0:	4991      	ldr	r1, [pc, #580]	@ (10044018 <COMM_Event_Handler+0x398>)
10043dd2:	2434      	movs	r4, #52	@ 0x34
10043dd4:	193b      	adds	r3, r7, r4
10043dd6:	0018      	movs	r0, r3
10043dd8:	f023 ff1e 	bl	10067c18 <siprintf>
			discountprintf(text);
10043ddc:	193b      	adds	r3, r7, r4
10043dde:	0018      	movs	r0, r3
10043de0:	f000 fbd0 	bl	10044584 <discountprintf>
			next = idle;
10043de4:	2376      	movs	r3, #118	@ 0x76
10043de6:	18fb      	adds	r3, r7, r3
10043de8:	2201      	movs	r2, #1
10043dea:	701a      	strb	r2, [r3, #0]
			transition = true;
10043dec:	2377      	movs	r3, #119	@ 0x77
10043dee:	18fb      	adds	r3, r7, r3
10043df0:	2201      	movs	r2, #1
10043df2:	701a      	strb	r2, [r3, #0]
		}
		break;
10043df4:	e37e      	b.n	100444f4 <COMM_Event_Handler+0x874>
	case foldercontrol:
		if(event.status == EVENT_USART){
10043df6:	1d3b      	adds	r3, r7, #4
10043df8:	781b      	ldrb	r3, [r3, #0]
10043dfa:	b25b      	sxtb	r3, r3
10043dfc:	2b06      	cmp	r3, #6
10043dfe:	d000      	beq.n	10043e02 <COMM_Event_Handler+0x182>
10043e00:	e37a      	b.n	100444f8 <COMM_Event_Handler+0x878>
			folder = event.data;
10043e02:	1d3b      	adds	r3, r7, #4
10043e04:	885b      	ldrh	r3, [r3, #2]
10043e06:	b2da      	uxtb	r2, r3
10043e08:	4b84      	ldr	r3, [pc, #528]	@ (1004401c <COMM_Event_Handler+0x39c>)
10043e0a:	701a      	strb	r2, [r3, #0]
			discountprintf("Storing folder selector");
10043e0c:	4b84      	ldr	r3, [pc, #528]	@ (10044020 <COMM_Event_Handler+0x3a0>)
10043e0e:	0018      	movs	r0, r3
10043e10:	f000 fbb8 	bl	10044584 <discountprintf>
			next = folderselected;
10043e14:	2376      	movs	r3, #118	@ 0x76
10043e16:	18fb      	adds	r3, r7, r3
10043e18:	2204      	movs	r2, #4
10043e1a:	701a      	strb	r2, [r3, #0]
			transition = true;
10043e1c:	2377      	movs	r3, #119	@ 0x77
10043e1e:	18fb      	adds	r3, r7, r3
10043e20:	2201      	movs	r2, #1
10043e22:	701a      	strb	r2, [r3, #0]
		}
		break;
10043e24:	e368      	b.n	100444f8 <COMM_Event_Handler+0x878>
	case folderselected:
		if(event.status == EVENT_USART){
10043e26:	1d3b      	adds	r3, r7, #4
10043e28:	781b      	ldrb	r3, [r3, #0]
10043e2a:	b25b      	sxtb	r3, r3
10043e2c:	2b06      	cmp	r3, #6
10043e2e:	d000      	beq.n	10043e32 <COMM_Event_Handler+0x1b2>
10043e30:	e364      	b.n	100444fc <COMM_Event_Handler+0x87c>
			//post to mp3 controller with the new data
			Event_t play = (Event_t){EVENT_PLAY, (folder<<8) + (event.data)};
10043e32:	2130      	movs	r1, #48	@ 0x30
10043e34:	187b      	adds	r3, r7, r1
10043e36:	220b      	movs	r2, #11
10043e38:	701a      	strb	r2, [r3, #0]
10043e3a:	4b78      	ldr	r3, [pc, #480]	@ (1004401c <COMM_Event_Handler+0x39c>)
10043e3c:	781b      	ldrb	r3, [r3, #0]
10043e3e:	021b      	lsls	r3, r3, #8
10043e40:	b29a      	uxth	r2, r3
10043e42:	1d3b      	adds	r3, r7, #4
10043e44:	885b      	ldrh	r3, [r3, #2]
10043e46:	18d3      	adds	r3, r2, r3
10043e48:	b29a      	uxth	r2, r3
10043e4a:	187b      	adds	r3, r7, r1
10043e4c:	805a      	strh	r2, [r3, #2]
			MP3_Event_Post(play);
10043e4e:	187b      	adds	r3, r7, r1
10043e50:	6818      	ldr	r0, [r3, #0]
10043e52:	f001 fcf3 	bl	1004583c <MP3_Event_Post>
			discountprintf("Sending track selector");
10043e56:	4b73      	ldr	r3, [pc, #460]	@ (10044024 <COMM_Event_Handler+0x3a4>)
10043e58:	0018      	movs	r0, r3
10043e5a:	f000 fb93 	bl	10044584 <discountprintf>
			next = idle;
10043e5e:	2376      	movs	r3, #118	@ 0x76
10043e60:	18fb      	adds	r3, r7, r3
10043e62:	2201      	movs	r2, #1
10043e64:	701a      	strb	r2, [r3, #0]
			transition = true;
10043e66:	2377      	movs	r3, #119	@ 0x77
10043e68:	18fb      	adds	r3, r7, r3
10043e6a:	2201      	movs	r2, #1
10043e6c:	701a      	strb	r2, [r3, #0]
		}
		break;
10043e6e:	e345      	b.n	100444fc <COMM_Event_Handler+0x87c>
	case logsrequest:
		static uint32_t sent;
		if(event.status == EVENT_ENTRY){
10043e70:	1d3b      	adds	r3, r7, #4
10043e72:	781b      	ldrb	r3, [r3, #0]
10043e74:	b25b      	sxtb	r3, r3
10043e76:	2b02      	cmp	r3, #2
10043e78:	d000      	beq.n	10043e7c <COMM_Event_Handler+0x1fc>
10043e7a:	e341      	b.n	10044500 <COMM_Event_Handler+0x880>
			sendinglogs = 1;
10043e7c:	4b5e      	ldr	r3, [pc, #376]	@ (10043ff8 <COMM_Event_Handler+0x378>)
10043e7e:	2201      	movs	r2, #1
10043e80:	701a      	strb	r2, [r3, #0]
			sent = 0;
10043e82:	4b69      	ldr	r3, [pc, #420]	@ (10044028 <COMM_Event_Handler+0x3a8>)
10043e84:	2200      	movs	r2, #0
10043e86:	601a      	str	r2, [r3, #0]
			uint16_t size = FLASH_GetLogsSize();
10043e88:	2568      	movs	r5, #104	@ 0x68
10043e8a:	197c      	adds	r4, r7, r5
10043e8c:	f000 fdb8 	bl	10044a00 <FLASH_GetLogsSize>
10043e90:	0003      	movs	r3, r0
10043e92:	8023      	strh	r3, [r4, #0]
			//uint16_t size = 32;
			USART_WriteTx((uint8_t)(size>>8));
10043e94:	002c      	movs	r4, r5
10043e96:	193b      	adds	r3, r7, r4
10043e98:	881b      	ldrh	r3, [r3, #0]
10043e9a:	0a1b      	lsrs	r3, r3, #8
10043e9c:	b29b      	uxth	r3, r3
10043e9e:	b2db      	uxtb	r3, r3
10043ea0:	0018      	movs	r0, r3
10043ea2:	f002 ff51 	bl	10046d48 <USART_WriteTx>
			USART_WriteTx((uint8_t)(size));
10043ea6:	193b      	adds	r3, r7, r4
10043ea8:	881b      	ldrh	r3, [r3, #0]
10043eaa:	b2db      	uxtb	r3, r3
10043eac:	0018      	movs	r0, r3
10043eae:	f002 ff4b 	bl	10046d48 <USART_WriteTx>
			next = logsdata;
10043eb2:	2376      	movs	r3, #118	@ 0x76
10043eb4:	18fb      	adds	r3, r7, r3
10043eb6:	2206      	movs	r2, #6
10043eb8:	701a      	strb	r2, [r3, #0]
			transition = true;
10043eba:	2377      	movs	r3, #119	@ 0x77
10043ebc:	18fb      	adds	r3, r7, r3
10043ebe:	2201      	movs	r2, #1
10043ec0:	701a      	strb	r2, [r3, #0]
		}
		break;
10043ec2:	e31d      	b.n	10044500 <COMM_Event_Handler+0x880>
	case logsdata:
		if(event.status == EVENT_USART_READY){
10043ec4:	1d3b      	adds	r3, r7, #4
10043ec6:	781b      	ldrb	r3, [r3, #0]
10043ec8:	b25b      	sxtb	r3, r3
10043eca:	2b07      	cmp	r3, #7
10043ecc:	d000      	beq.n	10043ed0 <COMM_Event_Handler+0x250>
10043ece:	e319      	b.n	10044504 <COMM_Event_Handler+0x884>
			//get logs size
			uint16_t size  = 32;
10043ed0:	216a      	movs	r1, #106	@ 0x6a
10043ed2:	187b      	adds	r3, r7, r1
10043ed4:	2220      	movs	r2, #32
10043ed6:	801a      	strh	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			if(size - sent > (uint16_t)(USARTBUFFERSIZE/6)){
10043ed8:	187b      	adds	r3, r7, r1
10043eda:	881a      	ldrh	r2, [r3, #0]
10043edc:	4b52      	ldr	r3, [pc, #328]	@ (10044028 <COMM_Event_Handler+0x3a8>)
10043ede:	681b      	ldr	r3, [r3, #0]
10043ee0:	1ad3      	subs	r3, r2, r3
10043ee2:	2b55      	cmp	r3, #85	@ 0x55
10043ee4:	d934      	bls.n	10043f50 <COMM_Event_Handler+0x2d0>
				//send next part of logs here, use sent to index the
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
10043ee6:	2300      	movs	r3, #0
10043ee8:	673b      	str	r3, [r7, #112]	@ 0x70
10043eea:	e02d      	b.n	10043f48 <COMM_Event_Handler+0x2c8>
					//scheduleEvent levent = FLASH_ReadLogs(sent);
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10043eec:	2024      	movs	r0, #36	@ 0x24
10043eee:	183b      	adds	r3, r7, r0
10043ef0:	4a4e      	ldr	r2, [pc, #312]	@ (1004402c <COMM_Event_Handler+0x3ac>)
10043ef2:	6811      	ldr	r1, [r2, #0]
10043ef4:	6019      	str	r1, [r3, #0]
10043ef6:	8892      	ldrh	r2, [r2, #4]
10043ef8:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
10043efa:	0004      	movs	r4, r0
10043efc:	193b      	adds	r3, r7, r4
10043efe:	781b      	ldrb	r3, [r3, #0]
10043f00:	0018      	movs	r0, r3
10043f02:	f002 ff21 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.day);
10043f06:	193b      	adds	r3, r7, r4
10043f08:	785b      	ldrb	r3, [r3, #1]
10043f0a:	0018      	movs	r0, r3
10043f0c:	f002 ff1c 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.start);
10043f10:	193b      	adds	r3, r7, r4
10043f12:	789b      	ldrb	r3, [r3, #2]
10043f14:	0018      	movs	r0, r3
10043f16:	f002 ff17 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.stop);
10043f1a:	193b      	adds	r3, r7, r4
10043f1c:	78db      	ldrb	r3, [r3, #3]
10043f1e:	0018      	movs	r0, r3
10043f20:	f002 ff12 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.folder);
10043f24:	193b      	adds	r3, r7, r4
10043f26:	791b      	ldrb	r3, [r3, #4]
10043f28:	0018      	movs	r0, r3
10043f2a:	f002 ff0d 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.track);
10043f2e:	193b      	adds	r3, r7, r4
10043f30:	795b      	ldrb	r3, [r3, #5]
10043f32:	0018      	movs	r0, r3
10043f34:	f002 ff08 	bl	10046d48 <USART_WriteTx>
					sent++;
10043f38:	4b3b      	ldr	r3, [pc, #236]	@ (10044028 <COMM_Event_Handler+0x3a8>)
10043f3a:	681b      	ldr	r3, [r3, #0]
10043f3c:	1c5a      	adds	r2, r3, #1
10043f3e:	4b3a      	ldr	r3, [pc, #232]	@ (10044028 <COMM_Event_Handler+0x3a8>)
10043f40:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
10043f42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10043f44:	3301      	adds	r3, #1
10043f46:	673b      	str	r3, [r7, #112]	@ 0x70
10043f48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10043f4a:	2b54      	cmp	r3, #84	@ 0x54
10043f4c:	ddce      	ble.n	10043eec <COMM_Event_Handler+0x26c>
				next = idle;
				transition = true;
				discountprintf("data sent");
			}
		}
		break;
10043f4e:	e2d9      	b.n	10044504 <COMM_Event_Handler+0x884>
				for(int i = 0; i < size - sent; i++){
10043f50:	2300      	movs	r3, #0
10043f52:	66fb      	str	r3, [r7, #108]	@ 0x6c
10043f54:	e02d      	b.n	10043fb2 <COMM_Event_Handler+0x332>
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10043f56:	201c      	movs	r0, #28
10043f58:	183b      	adds	r3, r7, r0
10043f5a:	4a34      	ldr	r2, [pc, #208]	@ (1004402c <COMM_Event_Handler+0x3ac>)
10043f5c:	6811      	ldr	r1, [r2, #0]
10043f5e:	6019      	str	r1, [r3, #0]
10043f60:	8892      	ldrh	r2, [r2, #4]
10043f62:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
10043f64:	0004      	movs	r4, r0
10043f66:	193b      	adds	r3, r7, r4
10043f68:	781b      	ldrb	r3, [r3, #0]
10043f6a:	0018      	movs	r0, r3
10043f6c:	f002 feec 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.day);
10043f70:	193b      	adds	r3, r7, r4
10043f72:	785b      	ldrb	r3, [r3, #1]
10043f74:	0018      	movs	r0, r3
10043f76:	f002 fee7 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.start);
10043f7a:	193b      	adds	r3, r7, r4
10043f7c:	789b      	ldrb	r3, [r3, #2]
10043f7e:	0018      	movs	r0, r3
10043f80:	f002 fee2 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.stop);
10043f84:	193b      	adds	r3, r7, r4
10043f86:	78db      	ldrb	r3, [r3, #3]
10043f88:	0018      	movs	r0, r3
10043f8a:	f002 fedd 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.folder);
10043f8e:	193b      	adds	r3, r7, r4
10043f90:	791b      	ldrb	r3, [r3, #4]
10043f92:	0018      	movs	r0, r3
10043f94:	f002 fed8 	bl	10046d48 <USART_WriteTx>
					USART_WriteTx(levent.track);
10043f98:	193b      	adds	r3, r7, r4
10043f9a:	795b      	ldrb	r3, [r3, #5]
10043f9c:	0018      	movs	r0, r3
10043f9e:	f002 fed3 	bl	10046d48 <USART_WriteTx>
					sent++;
10043fa2:	4b21      	ldr	r3, [pc, #132]	@ (10044028 <COMM_Event_Handler+0x3a8>)
10043fa4:	681b      	ldr	r3, [r3, #0]
10043fa6:	1c5a      	adds	r2, r3, #1
10043fa8:	4b1f      	ldr	r3, [pc, #124]	@ (10044028 <COMM_Event_Handler+0x3a8>)
10043faa:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < size - sent; i++){
10043fac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10043fae:	3301      	adds	r3, #1
10043fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
10043fb2:	236a      	movs	r3, #106	@ 0x6a
10043fb4:	18fb      	adds	r3, r7, r3
10043fb6:	881a      	ldrh	r2, [r3, #0]
10043fb8:	4b1b      	ldr	r3, [pc, #108]	@ (10044028 <COMM_Event_Handler+0x3a8>)
10043fba:	681b      	ldr	r3, [r3, #0]
10043fbc:	1ad2      	subs	r2, r2, r3
10043fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10043fc0:	429a      	cmp	r2, r3
10043fc2:	d8c8      	bhi.n	10043f56 <COMM_Event_Handler+0x2d6>
				USART_WriteTx(LOGSDONE);
10043fc4:	2003      	movs	r0, #3
10043fc6:	f002 febf 	bl	10046d48 <USART_WriteTx>
				sent = 0;
10043fca:	4b17      	ldr	r3, [pc, #92]	@ (10044028 <COMM_Event_Handler+0x3a8>)
10043fcc:	2200      	movs	r2, #0
10043fce:	601a      	str	r2, [r3, #0]
				sendinglogs = 0;
10043fd0:	4b09      	ldr	r3, [pc, #36]	@ (10043ff8 <COMM_Event_Handler+0x378>)
10043fd2:	2200      	movs	r2, #0
10043fd4:	701a      	strb	r2, [r3, #0]
				next = idle;
10043fd6:	2376      	movs	r3, #118	@ 0x76
10043fd8:	18fb      	adds	r3, r7, r3
10043fda:	2201      	movs	r2, #1
10043fdc:	701a      	strb	r2, [r3, #0]
				transition = true;
10043fde:	2377      	movs	r3, #119	@ 0x77
10043fe0:	18fb      	adds	r3, r7, r3
10043fe2:	2201      	movs	r2, #1
10043fe4:	701a      	strb	r2, [r3, #0]
				discountprintf("data sent");
10043fe6:	4b12      	ldr	r3, [pc, #72]	@ (10044030 <COMM_Event_Handler+0x3b0>)
10043fe8:	0018      	movs	r0, r3
10043fea:	f000 facb 	bl	10044584 <discountprintf>
		break;
10043fee:	e289      	b.n	10044504 <COMM_Event_Handler+0x884>
10043ff0:	200003b5 	.word	0x200003b5
10043ff4:	100696b4 	.word	0x100696b4
10043ff8:	200003bc 	.word	0x200003bc
10043ffc:	10069704 	.word	0x10069704
10044000:	10068e40 	.word	0x10068e40
10044004:	10068e58 	.word	0x10068e58
10044008:	10068e70 	.word	0x10068e70
1004400c:	10068e88 	.word	0x10068e88
10044010:	10068e9c 	.word	0x10068e9c
10044014:	10068eb8 	.word	0x10068eb8
10044018:	10068ed4 	.word	0x10068ed4
1004401c:	200003bd 	.word	0x200003bd
10044020:	10068ee8 	.word	0x10068ee8
10044024:	10068f00 	.word	0x10068f00
10044028:	200003c0 	.word	0x200003c0
1004402c:	10068fb8 	.word	0x10068fb8
10044030:	10068f18 	.word	0x10068f18
	case dccontrol:
		if(event.status == EVENT_USART){
10044034:	1d3b      	adds	r3, r7, #4
10044036:	781b      	ldrb	r3, [r3, #0]
10044038:	b25b      	sxtb	r3, r3
1004403a:	2b06      	cmp	r3, #6
1004403c:	d000      	beq.n	10044040 <COMM_Event_Handler+0x3c0>
1004403e:	e263      	b.n	10044508 <COMM_Event_Handler+0x888>
			FLASH_SetDCVol(FLASH_GetVolume(), (uint8_t)event.data);
10044040:	f000 fc56 	bl	100448f0 <FLASH_GetVolume>
10044044:	0003      	movs	r3, r0
10044046:	001a      	movs	r2, r3
10044048:	1d3b      	adds	r3, r7, #4
1004404a:	885b      	ldrh	r3, [r3, #2]
1004404c:	b2db      	uxtb	r3, r3
1004404e:	0019      	movs	r1, r3
10044050:	0010      	movs	r0, r2
10044052:	f000 fc0b 	bl	1004486c <FLASH_SetDCVol>
			sprintf(text, "Storing volume %d", FLASH_GetDutyCycle());
10044056:	f000 fc61 	bl	1004491c <FLASH_GetDutyCycle>
1004405a:	0003      	movs	r3, r0
1004405c:	001a      	movs	r2, r3
1004405e:	49d2      	ldr	r1, [pc, #840]	@ (100443a8 <COMM_Event_Handler+0x728>)
10044060:	2434      	movs	r4, #52	@ 0x34
10044062:	193b      	adds	r3, r7, r4
10044064:	0018      	movs	r0, r3
10044066:	f023 fdd7 	bl	10067c18 <siprintf>
			discountprintf(text);
1004406a:	193b      	adds	r3, r7, r4
1004406c:	0018      	movs	r0, r3
1004406e:	f000 fa89 	bl	10044584 <discountprintf>

			next = idle;
10044072:	2376      	movs	r3, #118	@ 0x76
10044074:	18fb      	adds	r3, r7, r3
10044076:	2201      	movs	r2, #1
10044078:	701a      	strb	r2, [r3, #0]
			transition = true;
1004407a:	2377      	movs	r3, #119	@ 0x77
1004407c:	18fb      	adds	r3, r7, r3
1004407e:	2201      	movs	r2, #1
10044080:	701a      	strb	r2, [r3, #0]
		}
		break;
10044082:	e241      	b.n	10044508 <COMM_Event_Handler+0x888>
	case schedulecontrol:
		static uint8_t numevents;
		static scheduleEvent sevent;
		if(event.status == EVENT_ENTRY){
10044084:	1d3b      	adds	r3, r7, #4
10044086:	781b      	ldrb	r3, [r3, #0]
10044088:	b25b      	sxtb	r3, r3
1004408a:	2b02      	cmp	r3, #2
1004408c:	d000      	beq.n	10044090 <COMM_Event_Handler+0x410>
1004408e:	e23d      	b.n	1004450c <COMM_Event_Handler+0x88c>
			discountprintf("receiving schedule");
10044090:	4bc6      	ldr	r3, [pc, #792]	@ (100443ac <COMM_Event_Handler+0x72c>)
10044092:	0018      	movs	r0, r3
10044094:	f000 fa76 	bl	10044584 <discountprintf>
			sevent = (scheduleEvent){0,0,0,0,0,0};
10044098:	4bc5      	ldr	r3, [pc, #788]	@ (100443b0 <COMM_Event_Handler+0x730>)
1004409a:	0018      	movs	r0, r3
1004409c:	2306      	movs	r3, #6
1004409e:	001a      	movs	r2, r3
100440a0:	2100      	movs	r1, #0
100440a2:	f023 fed5 	bl	10067e50 <memset>
			FLASH_ClearSchedule();
100440a6:	f000 fe1f 	bl	10044ce8 <FLASH_ClearSchedule>
			next = schedulemonth;
100440aa:	2376      	movs	r3, #118	@ 0x76
100440ac:	18fb      	adds	r3, r7, r3
100440ae:	2209      	movs	r2, #9
100440b0:	701a      	strb	r2, [r3, #0]
			transition = true;
100440b2:	2377      	movs	r3, #119	@ 0x77
100440b4:	18fb      	adds	r3, r7, r3
100440b6:	2201      	movs	r2, #1
100440b8:	701a      	strb	r2, [r3, #0]
			numevents = 0;
100440ba:	4bbe      	ldr	r3, [pc, #760]	@ (100443b4 <COMM_Event_Handler+0x734>)
100440bc:	2200      	movs	r2, #0
100440be:	701a      	strb	r2, [r3, #0]
		}
		break;
100440c0:	e224      	b.n	1004450c <COMM_Event_Handler+0x88c>
	case schedulemonth:
		if(event.status == EVENT_USART){
100440c2:	1d3b      	adds	r3, r7, #4
100440c4:	781b      	ldrb	r3, [r3, #0]
100440c6:	b25b      	sxtb	r3, r3
100440c8:	2b06      	cmp	r3, #6
100440ca:	d000      	beq.n	100440ce <COMM_Event_Handler+0x44e>
100440cc:	e220      	b.n	10044510 <COMM_Event_Handler+0x890>
			if(event.data == SCHEDULEEND){
100440ce:	1d3b      	adds	r3, r7, #4
100440d0:	885b      	ldrh	r3, [r3, #2]
100440d2:	2b0d      	cmp	r3, #13
100440d4:	d11a      	bne.n	1004410c <COMM_Event_Handler+0x48c>
				discountprintf("schedule complete");
100440d6:	4bb8      	ldr	r3, [pc, #736]	@ (100443b8 <COMM_Event_Handler+0x738>)
100440d8:	0018      	movs	r0, r3
100440da:	f000 fa53 	bl	10044584 <discountprintf>
				next = idle;
100440de:	2376      	movs	r3, #118	@ 0x76
100440e0:	18fb      	adds	r3, r7, r3
100440e2:	2201      	movs	r2, #1
100440e4:	701a      	strb	r2, [r3, #0]
				transition = true;
100440e6:	2377      	movs	r3, #119	@ 0x77
100440e8:	18fb      	adds	r3, r7, r3
100440ea:	2201      	movs	r2, #1
100440ec:	701a      	strb	r2, [r3, #0]
				if(!(sevent.month == 0 && sevent.day == 0)){
100440ee:	4bb0      	ldr	r3, [pc, #704]	@ (100443b0 <COMM_Event_Handler+0x730>)
100440f0:	781b      	ldrb	r3, [r3, #0]
100440f2:	2b00      	cmp	r3, #0
100440f4:	d104      	bne.n	10044100 <COMM_Event_Handler+0x480>
100440f6:	4bae      	ldr	r3, [pc, #696]	@ (100443b0 <COMM_Event_Handler+0x730>)
100440f8:	785b      	ldrb	r3, [r3, #1]
100440fa:	2b00      	cmp	r3, #0
100440fc:	d100      	bne.n	10044100 <COMM_Event_Handler+0x480>
100440fe:	e207      	b.n	10044510 <COMM_Event_Handler+0x890>
					FLASH_AppendSchedule(sevent);
10044100:	4bab      	ldr	r3, [pc, #684]	@ (100443b0 <COMM_Event_Handler+0x730>)
10044102:	6818      	ldr	r0, [r3, #0]
10044104:	6859      	ldr	r1, [r3, #4]
10044106:	f000 fd01 	bl	10044b0c <FLASH_AppendSchedule>
				//store month here
				next = scheduleday;
				transition = true;
			}
		}
		break;
1004410a:	e201      	b.n	10044510 <COMM_Event_Handler+0x890>
			} else if(numevents > MAXSCHEDULEEVENTS){
1004410c:	4ba9      	ldr	r3, [pc, #676]	@ (100443b4 <COMM_Event_Handler+0x734>)
1004410e:	781b      	ldrb	r3, [r3, #0]
10044110:	2bb4      	cmp	r3, #180	@ 0xb4
10044112:	d91c      	bls.n	1004414e <COMM_Event_Handler+0x4ce>
				discountprintf("schedule forced to complete");
10044114:	4ba9      	ldr	r3, [pc, #676]	@ (100443bc <COMM_Event_Handler+0x73c>)
10044116:	0018      	movs	r0, r3
10044118:	f000 fa34 	bl	10044584 <discountprintf>
				if(!(sevent.month == 0 && sevent.day == 0)){
1004411c:	4ba4      	ldr	r3, [pc, #656]	@ (100443b0 <COMM_Event_Handler+0x730>)
1004411e:	781b      	ldrb	r3, [r3, #0]
10044120:	2b00      	cmp	r3, #0
10044122:	d103      	bne.n	1004412c <COMM_Event_Handler+0x4ac>
10044124:	4ba2      	ldr	r3, [pc, #648]	@ (100443b0 <COMM_Event_Handler+0x730>)
10044126:	785b      	ldrb	r3, [r3, #1]
10044128:	2b00      	cmp	r3, #0
1004412a:	d004      	beq.n	10044136 <COMM_Event_Handler+0x4b6>
					FLASH_AppendSchedule(sevent);
1004412c:	4ba0      	ldr	r3, [pc, #640]	@ (100443b0 <COMM_Event_Handler+0x730>)
1004412e:	6818      	ldr	r0, [r3, #0]
10044130:	6859      	ldr	r1, [r3, #4]
10044132:	f000 fceb 	bl	10044b0c <FLASH_AppendSchedule>
				next = scheduleend;
10044136:	2376      	movs	r3, #118	@ 0x76
10044138:	18fb      	adds	r3, r7, r3
1004413a:	220f      	movs	r2, #15
1004413c:	701a      	strb	r2, [r3, #0]
				transition = true;
1004413e:	2377      	movs	r3, #119	@ 0x77
10044140:	18fb      	adds	r3, r7, r3
10044142:	2201      	movs	r2, #1
10044144:	701a      	strb	r2, [r3, #0]
				USART_WriteTx(SCHEDULEEND);//please stop sending me the schedule
10044146:	200d      	movs	r0, #13
10044148:	f002 fdfe 	bl	10046d48 <USART_WriteTx>
		break;
1004414c:	e1e0      	b.n	10044510 <COMM_Event_Handler+0x890>
				if(!(sevent.month == 0 && sevent.day == 0)){
1004414e:	4b98      	ldr	r3, [pc, #608]	@ (100443b0 <COMM_Event_Handler+0x730>)
10044150:	781b      	ldrb	r3, [r3, #0]
10044152:	2b00      	cmp	r3, #0
10044154:	d103      	bne.n	1004415e <COMM_Event_Handler+0x4de>
10044156:	4b96      	ldr	r3, [pc, #600]	@ (100443b0 <COMM_Event_Handler+0x730>)
10044158:	785b      	ldrb	r3, [r3, #1]
1004415a:	2b00      	cmp	r3, #0
1004415c:	d004      	beq.n	10044168 <COMM_Event_Handler+0x4e8>
					FLASH_AppendSchedule(sevent);
1004415e:	4b94      	ldr	r3, [pc, #592]	@ (100443b0 <COMM_Event_Handler+0x730>)
10044160:	6818      	ldr	r0, [r3, #0]
10044162:	6859      	ldr	r1, [r3, #4]
10044164:	f000 fcd2 	bl	10044b0c <FLASH_AppendSchedule>
				sevent.month = event.data;
10044168:	1d3b      	adds	r3, r7, #4
1004416a:	885b      	ldrh	r3, [r3, #2]
1004416c:	b2da      	uxtb	r2, r3
1004416e:	4b90      	ldr	r3, [pc, #576]	@ (100443b0 <COMM_Event_Handler+0x730>)
10044170:	701a      	strb	r2, [r3, #0]
				sprintf(text, "Month: %d", event.data);
10044172:	1d3b      	adds	r3, r7, #4
10044174:	885b      	ldrh	r3, [r3, #2]
10044176:	001a      	movs	r2, r3
10044178:	4991      	ldr	r1, [pc, #580]	@ (100443c0 <COMM_Event_Handler+0x740>)
1004417a:	2434      	movs	r4, #52	@ 0x34
1004417c:	193b      	adds	r3, r7, r4
1004417e:	0018      	movs	r0, r3
10044180:	f023 fd4a 	bl	10067c18 <siprintf>
				discountprintf(text);
10044184:	193b      	adds	r3, r7, r4
10044186:	0018      	movs	r0, r3
10044188:	f000 f9fc 	bl	10044584 <discountprintf>
				next = scheduleday;
1004418c:	2376      	movs	r3, #118	@ 0x76
1004418e:	18fb      	adds	r3, r7, r3
10044190:	220a      	movs	r2, #10
10044192:	701a      	strb	r2, [r3, #0]
				transition = true;
10044194:	2377      	movs	r3, #119	@ 0x77
10044196:	18fb      	adds	r3, r7, r3
10044198:	2201      	movs	r2, #1
1004419a:	701a      	strb	r2, [r3, #0]
		break;
1004419c:	e1b8      	b.n	10044510 <COMM_Event_Handler+0x890>
	case scheduleday:
		if(event.status == EVENT_USART){
1004419e:	1d3b      	adds	r3, r7, #4
100441a0:	781b      	ldrb	r3, [r3, #0]
100441a2:	b25b      	sxtb	r3, r3
100441a4:	2b06      	cmp	r3, #6
100441a6:	d000      	beq.n	100441aa <COMM_Event_Handler+0x52a>
100441a8:	e1b4      	b.n	10044514 <COMM_Event_Handler+0x894>
			sevent.day = event.data;
100441aa:	1d3b      	adds	r3, r7, #4
100441ac:	885b      	ldrh	r3, [r3, #2]
100441ae:	b2da      	uxtb	r2, r3
100441b0:	4b7f      	ldr	r3, [pc, #508]	@ (100443b0 <COMM_Event_Handler+0x730>)
100441b2:	705a      	strb	r2, [r3, #1]
			sprintf(text, "Day: %d", event.data);
100441b4:	1d3b      	adds	r3, r7, #4
100441b6:	885b      	ldrh	r3, [r3, #2]
100441b8:	001a      	movs	r2, r3
100441ba:	4982      	ldr	r1, [pc, #520]	@ (100443c4 <COMM_Event_Handler+0x744>)
100441bc:	2434      	movs	r4, #52	@ 0x34
100441be:	193b      	adds	r3, r7, r4
100441c0:	0018      	movs	r0, r3
100441c2:	f023 fd29 	bl	10067c18 <siprintf>
			discountprintf(text);
100441c6:	193b      	adds	r3, r7, r4
100441c8:	0018      	movs	r0, r3
100441ca:	f000 f9db 	bl	10044584 <discountprintf>
			next = schedulestart;
100441ce:	2376      	movs	r3, #118	@ 0x76
100441d0:	18fb      	adds	r3, r7, r3
100441d2:	220b      	movs	r2, #11
100441d4:	701a      	strb	r2, [r3, #0]
			transition = true;
100441d6:	2377      	movs	r3, #119	@ 0x77
100441d8:	18fb      	adds	r3, r7, r3
100441da:	2201      	movs	r2, #1
100441dc:	701a      	strb	r2, [r3, #0]
		}
		break;
100441de:	e199      	b.n	10044514 <COMM_Event_Handler+0x894>
	case schedulestart:
		if(event.status == EVENT_USART){
100441e0:	1d3b      	adds	r3, r7, #4
100441e2:	781b      	ldrb	r3, [r3, #0]
100441e4:	b25b      	sxtb	r3, r3
100441e6:	2b06      	cmp	r3, #6
100441e8:	d000      	beq.n	100441ec <COMM_Event_Handler+0x56c>
100441ea:	e195      	b.n	10044518 <COMM_Event_Handler+0x898>
			sevent.start =  event.data;
100441ec:	1d3b      	adds	r3, r7, #4
100441ee:	885b      	ldrh	r3, [r3, #2]
100441f0:	b2da      	uxtb	r2, r3
100441f2:	4b6f      	ldr	r3, [pc, #444]	@ (100443b0 <COMM_Event_Handler+0x730>)
100441f4:	709a      	strb	r2, [r3, #2]
			sprintf(text, "start time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
100441f6:	1d3b      	adds	r3, r7, #4
100441f8:	885b      	ldrh	r3, [r3, #2]
100441fa:	10db      	asrs	r3, r3, #3
100441fc:	221f      	movs	r2, #31
100441fe:	4013      	ands	r3, r2
10044200:	001c      	movs	r4, r3
10044202:	1d3b      	adds	r3, r7, #4
10044204:	885b      	ldrh	r3, [r3, #2]
10044206:	001a      	movs	r2, r3
10044208:	2303      	movs	r3, #3
1004420a:	401a      	ands	r2, r3
1004420c:	0013      	movs	r3, r2
1004420e:	011b      	lsls	r3, r3, #4
10044210:	1a9b      	subs	r3, r3, r2
10044212:	496d      	ldr	r1, [pc, #436]	@ (100443c8 <COMM_Event_Handler+0x748>)
10044214:	2534      	movs	r5, #52	@ 0x34
10044216:	1978      	adds	r0, r7, r5
10044218:	0022      	movs	r2, r4
1004421a:	f023 fcfd 	bl	10067c18 <siprintf>
			discountprintf(text);
1004421e:	197b      	adds	r3, r7, r5
10044220:	0018      	movs	r0, r3
10044222:	f000 f9af 	bl	10044584 <discountprintf>
			next = schedulestop;
10044226:	2376      	movs	r3, #118	@ 0x76
10044228:	18fb      	adds	r3, r7, r3
1004422a:	220c      	movs	r2, #12
1004422c:	701a      	strb	r2, [r3, #0]
			transition = true;
1004422e:	2377      	movs	r3, #119	@ 0x77
10044230:	18fb      	adds	r3, r7, r3
10044232:	2201      	movs	r2, #1
10044234:	701a      	strb	r2, [r3, #0]
		}
		break;
10044236:	e16f      	b.n	10044518 <COMM_Event_Handler+0x898>
	case schedulestop:
		if(event.status == EVENT_USART){
10044238:	1d3b      	adds	r3, r7, #4
1004423a:	781b      	ldrb	r3, [r3, #0]
1004423c:	b25b      	sxtb	r3, r3
1004423e:	2b06      	cmp	r3, #6
10044240:	d000      	beq.n	10044244 <COMM_Event_Handler+0x5c4>
10044242:	e16b      	b.n	1004451c <COMM_Event_Handler+0x89c>
			sevent.stop = event.data;
10044244:	1d3b      	adds	r3, r7, #4
10044246:	885b      	ldrh	r3, [r3, #2]
10044248:	b2da      	uxtb	r2, r3
1004424a:	4b59      	ldr	r3, [pc, #356]	@ (100443b0 <COMM_Event_Handler+0x730>)
1004424c:	70da      	strb	r2, [r3, #3]
			sprintf(text, "end time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
1004424e:	1d3b      	adds	r3, r7, #4
10044250:	885b      	ldrh	r3, [r3, #2]
10044252:	10db      	asrs	r3, r3, #3
10044254:	221f      	movs	r2, #31
10044256:	4013      	ands	r3, r2
10044258:	001c      	movs	r4, r3
1004425a:	1d3b      	adds	r3, r7, #4
1004425c:	885b      	ldrh	r3, [r3, #2]
1004425e:	001a      	movs	r2, r3
10044260:	2303      	movs	r3, #3
10044262:	401a      	ands	r2, r3
10044264:	0013      	movs	r3, r2
10044266:	011b      	lsls	r3, r3, #4
10044268:	1a9b      	subs	r3, r3, r2
1004426a:	4958      	ldr	r1, [pc, #352]	@ (100443cc <COMM_Event_Handler+0x74c>)
1004426c:	2534      	movs	r5, #52	@ 0x34
1004426e:	1978      	adds	r0, r7, r5
10044270:	0022      	movs	r2, r4
10044272:	f023 fcd1 	bl	10067c18 <siprintf>
			discountprintf(text);
10044276:	197b      	adds	r3, r7, r5
10044278:	0018      	movs	r0, r3
1004427a:	f000 f983 	bl	10044584 <discountprintf>
			next = schedulefolder;
1004427e:	2376      	movs	r3, #118	@ 0x76
10044280:	18fb      	adds	r3, r7, r3
10044282:	220d      	movs	r2, #13
10044284:	701a      	strb	r2, [r3, #0]
			transition = true;
10044286:	2377      	movs	r3, #119	@ 0x77
10044288:	18fb      	adds	r3, r7, r3
1004428a:	2201      	movs	r2, #1
1004428c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004428e:	e145      	b.n	1004451c <COMM_Event_Handler+0x89c>
	case schedulefolder:
		if(event.status == EVENT_USART){
10044290:	1d3b      	adds	r3, r7, #4
10044292:	781b      	ldrb	r3, [r3, #0]
10044294:	b25b      	sxtb	r3, r3
10044296:	2b06      	cmp	r3, #6
10044298:	d000      	beq.n	1004429c <COMM_Event_Handler+0x61c>
1004429a:	e141      	b.n	10044520 <COMM_Event_Handler+0x8a0>
			sevent.folder = event.data;
1004429c:	1d3b      	adds	r3, r7, #4
1004429e:	885b      	ldrh	r3, [r3, #2]
100442a0:	b2da      	uxtb	r2, r3
100442a2:	4b43      	ldr	r3, [pc, #268]	@ (100443b0 <COMM_Event_Handler+0x730>)
100442a4:	711a      	strb	r2, [r3, #4]
			sprintf(text, "folder#: %d", event.data);
100442a6:	1d3b      	adds	r3, r7, #4
100442a8:	885b      	ldrh	r3, [r3, #2]
100442aa:	001a      	movs	r2, r3
100442ac:	4948      	ldr	r1, [pc, #288]	@ (100443d0 <COMM_Event_Handler+0x750>)
100442ae:	2434      	movs	r4, #52	@ 0x34
100442b0:	193b      	adds	r3, r7, r4
100442b2:	0018      	movs	r0, r3
100442b4:	f023 fcb0 	bl	10067c18 <siprintf>
			discountprintf(text);
100442b8:	193b      	adds	r3, r7, r4
100442ba:	0018      	movs	r0, r3
100442bc:	f000 f962 	bl	10044584 <discountprintf>
			next = scheduletrack;
100442c0:	2376      	movs	r3, #118	@ 0x76
100442c2:	18fb      	adds	r3, r7, r3
100442c4:	220e      	movs	r2, #14
100442c6:	701a      	strb	r2, [r3, #0]
			transition = true;
100442c8:	2377      	movs	r3, #119	@ 0x77
100442ca:	18fb      	adds	r3, r7, r3
100442cc:	2201      	movs	r2, #1
100442ce:	701a      	strb	r2, [r3, #0]
		}
		break;
100442d0:	e126      	b.n	10044520 <COMM_Event_Handler+0x8a0>
	case scheduletrack:
		if(event.status == EVENT_USART){
100442d2:	1d3b      	adds	r3, r7, #4
100442d4:	781b      	ldrb	r3, [r3, #0]
100442d6:	b25b      	sxtb	r3, r3
100442d8:	2b06      	cmp	r3, #6
100442da:	d000      	beq.n	100442de <COMM_Event_Handler+0x65e>
100442dc:	e122      	b.n	10044524 <COMM_Event_Handler+0x8a4>
			sevent.track = event.data;
100442de:	1d3b      	adds	r3, r7, #4
100442e0:	885b      	ldrh	r3, [r3, #2]
100442e2:	b2da      	uxtb	r2, r3
100442e4:	4b32      	ldr	r3, [pc, #200]	@ (100443b0 <COMM_Event_Handler+0x730>)
100442e6:	715a      	strb	r2, [r3, #5]
			sprintf(text, "track#: %d", event.data);
100442e8:	1d3b      	adds	r3, r7, #4
100442ea:	885b      	ldrh	r3, [r3, #2]
100442ec:	001a      	movs	r2, r3
100442ee:	4939      	ldr	r1, [pc, #228]	@ (100443d4 <COMM_Event_Handler+0x754>)
100442f0:	2434      	movs	r4, #52	@ 0x34
100442f2:	193b      	adds	r3, r7, r4
100442f4:	0018      	movs	r0, r3
100442f6:	f023 fc8f 	bl	10067c18 <siprintf>
			discountprintf(text);
100442fa:	193b      	adds	r3, r7, r4
100442fc:	0018      	movs	r0, r3
100442fe:	f000 f941 	bl	10044584 <discountprintf>
			//record end time here
			next = schedulemonth;
10044302:	2376      	movs	r3, #118	@ 0x76
10044304:	18fb      	adds	r3, r7, r3
10044306:	2209      	movs	r2, #9
10044308:	701a      	strb	r2, [r3, #0]
			transition = true;
1004430a:	2377      	movs	r3, #119	@ 0x77
1004430c:	18fb      	adds	r3, r7, r3
1004430e:	2201      	movs	r2, #1
10044310:	701a      	strb	r2, [r3, #0]
			numevents++;
10044312:	4b28      	ldr	r3, [pc, #160]	@ (100443b4 <COMM_Event_Handler+0x734>)
10044314:	781b      	ldrb	r3, [r3, #0]
10044316:	3301      	adds	r3, #1
10044318:	b2da      	uxtb	r2, r3
1004431a:	4b26      	ldr	r3, [pc, #152]	@ (100443b4 <COMM_Event_Handler+0x734>)
1004431c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004431e:	e101      	b.n	10044524 <COMM_Event_Handler+0x8a4>
	case scheduleend:
		if(event.status == EVENT_USART){
10044320:	1d3b      	adds	r3, r7, #4
10044322:	781b      	ldrb	r3, [r3, #0]
10044324:	b25b      	sxtb	r3, r3
10044326:	2b06      	cmp	r3, #6
10044328:	d000      	beq.n	1004432c <COMM_Event_Handler+0x6ac>
1004432a:	e0fd      	b.n	10044528 <COMM_Event_Handler+0x8a8>
			if(event.data == SCHEDULEEND){
1004432c:	1d3b      	adds	r3, r7, #4
1004432e:	885b      	ldrh	r3, [r3, #2]
10044330:	2b0d      	cmp	r3, #13
10044332:	d000      	beq.n	10044336 <COMM_Event_Handler+0x6b6>
10044334:	e0f8      	b.n	10044528 <COMM_Event_Handler+0x8a8>
				next = idle;
10044336:	2376      	movs	r3, #118	@ 0x76
10044338:	18fb      	adds	r3, r7, r3
1004433a:	2201      	movs	r2, #1
1004433c:	701a      	strb	r2, [r3, #0]
				transition = true;
1004433e:	2377      	movs	r3, #119	@ 0x77
10044340:	18fb      	adds	r3, r7, r3
10044342:	2201      	movs	r2, #1
10044344:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
10044346:	e0ef      	b.n	10044528 <COMM_Event_Handler+0x8a8>
	case timeminute:
		if(event.status == EVENT_USART){
10044348:	1d3b      	adds	r3, r7, #4
1004434a:	781b      	ldrb	r3, [r3, #0]
1004434c:	b25b      	sxtb	r3, r3
1004434e:	2b06      	cmp	r3, #6
10044350:	d000      	beq.n	10044354 <COMM_Event_Handler+0x6d4>
10044352:	e0eb      	b.n	1004452c <COMM_Event_Handler+0x8ac>
			if(event.data < 60){
10044354:	1d3b      	adds	r3, r7, #4
10044356:	885b      	ldrh	r3, [r3, #2]
10044358:	2b3b      	cmp	r3, #59	@ 0x3b
1004435a:	d900      	bls.n	1004435e <COMM_Event_Handler+0x6de>
1004435c:	e0e6      	b.n	1004452c <COMM_Event_Handler+0x8ac>
				I2C_Transmit(RTCADDRESS, RTCMINADDR, ((event.data/10)<<4) + event.data%10);
1004435e:	1d3b      	adds	r3, r7, #4
10044360:	885b      	ldrh	r3, [r3, #2]
10044362:	210a      	movs	r1, #10
10044364:	0018      	movs	r0, r3
10044366:	f7fb ff6b 	bl	10040240 <__udivsi3>
1004436a:	0003      	movs	r3, r0
1004436c:	b29b      	uxth	r3, r3
1004436e:	b2db      	uxtb	r3, r3
10044370:	011b      	lsls	r3, r3, #4
10044372:	b2dc      	uxtb	r4, r3
10044374:	1d3b      	adds	r3, r7, #4
10044376:	885b      	ldrh	r3, [r3, #2]
10044378:	210a      	movs	r1, #10
1004437a:	0018      	movs	r0, r3
1004437c:	f7fb ffe6 	bl	1004034c <__aeabi_uidivmod>
10044380:	000b      	movs	r3, r1
10044382:	b29b      	uxth	r3, r3
10044384:	b2db      	uxtb	r3, r3
10044386:	18e3      	adds	r3, r4, r3
10044388:	b2db      	uxtb	r3, r3
1004438a:	001a      	movs	r2, r3
1004438c:	2101      	movs	r1, #1
1004438e:	206f      	movs	r0, #111	@ 0x6f
10044390:	f001 f800 	bl	10045394 <I2C_Transmit>
				next = timehour;
10044394:	2376      	movs	r3, #118	@ 0x76
10044396:	18fb      	adds	r3, r7, r3
10044398:	2211      	movs	r2, #17
1004439a:	701a      	strb	r2, [r3, #0]
				transition = true;
1004439c:	2377      	movs	r3, #119	@ 0x77
1004439e:	18fb      	adds	r3, r7, r3
100443a0:	2201      	movs	r2, #1
100443a2:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
100443a4:	e0c2      	b.n	1004452c <COMM_Event_Handler+0x8ac>
100443a6:	46c0      	nop			@ (mov r8, r8)
100443a8:	10068ed4 	.word	0x10068ed4
100443ac:	10068f24 	.word	0x10068f24
100443b0:	200003c4 	.word	0x200003c4
100443b4:	200003ca 	.word	0x200003ca
100443b8:	10068f38 	.word	0x10068f38
100443bc:	10068f4c 	.word	0x10068f4c
100443c0:	10068f68 	.word	0x10068f68
100443c4:	10068f74 	.word	0x10068f74
100443c8:	10068f7c 	.word	0x10068f7c
100443cc:	10068f90 	.word	0x10068f90
100443d0:	10068fa0 	.word	0x10068fa0
100443d4:	10068fac 	.word	0x10068fac
	case timehour:
		if(event.status == EVENT_USART){
100443d8:	1d3b      	adds	r3, r7, #4
100443da:	781b      	ldrb	r3, [r3, #0]
100443dc:	b25b      	sxtb	r3, r3
100443de:	2b06      	cmp	r3, #6
100443e0:	d000      	beq.n	100443e4 <COMM_Event_Handler+0x764>
100443e2:	e0a5      	b.n	10044530 <COMM_Event_Handler+0x8b0>
			if(event.data < 24){
100443e4:	1d3b      	adds	r3, r7, #4
100443e6:	885b      	ldrh	r3, [r3, #2]
100443e8:	2b17      	cmp	r3, #23
100443ea:	d900      	bls.n	100443ee <COMM_Event_Handler+0x76e>
100443ec:	e0a0      	b.n	10044530 <COMM_Event_Handler+0x8b0>
				I2C_Transmit(RTCADDRESS, RTCHOURADDR, ((event.data/10)<<4) + event.data%10);
100443ee:	1d3b      	adds	r3, r7, #4
100443f0:	885b      	ldrh	r3, [r3, #2]
100443f2:	210a      	movs	r1, #10
100443f4:	0018      	movs	r0, r3
100443f6:	f7fb ff23 	bl	10040240 <__udivsi3>
100443fa:	0003      	movs	r3, r0
100443fc:	b29b      	uxth	r3, r3
100443fe:	b2db      	uxtb	r3, r3
10044400:	011b      	lsls	r3, r3, #4
10044402:	b2dc      	uxtb	r4, r3
10044404:	1d3b      	adds	r3, r7, #4
10044406:	885b      	ldrh	r3, [r3, #2]
10044408:	210a      	movs	r1, #10
1004440a:	0018      	movs	r0, r3
1004440c:	f7fb ff9e 	bl	1004034c <__aeabi_uidivmod>
10044410:	000b      	movs	r3, r1
10044412:	b29b      	uxth	r3, r3
10044414:	b2db      	uxtb	r3, r3
10044416:	18e3      	adds	r3, r4, r3
10044418:	b2db      	uxtb	r3, r3
1004441a:	001a      	movs	r2, r3
1004441c:	2102      	movs	r1, #2
1004441e:	206f      	movs	r0, #111	@ 0x6f
10044420:	f000 ffb8 	bl	10045394 <I2C_Transmit>
				next = timeday;
10044424:	2376      	movs	r3, #118	@ 0x76
10044426:	18fb      	adds	r3, r7, r3
10044428:	2212      	movs	r2, #18
1004442a:	701a      	strb	r2, [r3, #0]
				transition = true;
1004442c:	2377      	movs	r3, #119	@ 0x77
1004442e:	18fb      	adds	r3, r7, r3
10044430:	2201      	movs	r2, #1
10044432:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
10044434:	e07c      	b.n	10044530 <COMM_Event_Handler+0x8b0>
	case timeday:
		if(event.status == EVENT_USART){
10044436:	1d3b      	adds	r3, r7, #4
10044438:	781b      	ldrb	r3, [r3, #0]
1004443a:	b25b      	sxtb	r3, r3
1004443c:	2b06      	cmp	r3, #6
1004443e:	d126      	bne.n	1004448e <COMM_Event_Handler+0x80e>
			if(event.data <= 31){
10044440:	1d3b      	adds	r3, r7, #4
10044442:	885b      	ldrh	r3, [r3, #2]
10044444:	2b1f      	cmp	r3, #31
10044446:	d822      	bhi.n	1004448e <COMM_Event_Handler+0x80e>
				I2C_Transmit(RTCADDRESS, RTCDAYADDR, ((event.data/10)<<4) + event.data%10);
10044448:	1d3b      	adds	r3, r7, #4
1004444a:	885b      	ldrh	r3, [r3, #2]
1004444c:	210a      	movs	r1, #10
1004444e:	0018      	movs	r0, r3
10044450:	f7fb fef6 	bl	10040240 <__udivsi3>
10044454:	0003      	movs	r3, r0
10044456:	b29b      	uxth	r3, r3
10044458:	b2db      	uxtb	r3, r3
1004445a:	011b      	lsls	r3, r3, #4
1004445c:	b2dc      	uxtb	r4, r3
1004445e:	1d3b      	adds	r3, r7, #4
10044460:	885b      	ldrh	r3, [r3, #2]
10044462:	210a      	movs	r1, #10
10044464:	0018      	movs	r0, r3
10044466:	f7fb ff71 	bl	1004034c <__aeabi_uidivmod>
1004446a:	000b      	movs	r3, r1
1004446c:	b29b      	uxth	r3, r3
1004446e:	b2db      	uxtb	r3, r3
10044470:	18e3      	adds	r3, r4, r3
10044472:	b2db      	uxtb	r3, r3
10044474:	001a      	movs	r2, r3
10044476:	2104      	movs	r1, #4
10044478:	206f      	movs	r0, #111	@ 0x6f
1004447a:	f000 ff8b 	bl	10045394 <I2C_Transmit>
				next = timemonth;
1004447e:	2376      	movs	r3, #118	@ 0x76
10044480:	18fb      	adds	r3, r7, r3
10044482:	2213      	movs	r2, #19
10044484:	701a      	strb	r2, [r3, #0]
				transition = true;
10044486:	2377      	movs	r3, #119	@ 0x77
10044488:	18fb      	adds	r3, r7, r3
1004448a:	2201      	movs	r2, #1
1004448c:	701a      	strb	r2, [r3, #0]
			}
		}
	case timemonth:
		if(event.status == EVENT_USART){
1004448e:	1d3b      	adds	r3, r7, #4
10044490:	781b      	ldrb	r3, [r3, #0]
10044492:	b25b      	sxtb	r3, r3
10044494:	2b06      	cmp	r3, #6
10044496:	d14d      	bne.n	10044534 <COMM_Event_Handler+0x8b4>
			if(event.data <= 12){
10044498:	1d3b      	adds	r3, r7, #4
1004449a:	885b      	ldrh	r3, [r3, #2]
1004449c:	2b0c      	cmp	r3, #12
1004449e:	d849      	bhi.n	10044534 <COMM_Event_Handler+0x8b4>
				I2C_Transmit(RTCADDRESS, RTCMNTHADDR, ((event.data/10)<<4) + event.data%10);
100444a0:	1d3b      	adds	r3, r7, #4
100444a2:	885b      	ldrh	r3, [r3, #2]
100444a4:	210a      	movs	r1, #10
100444a6:	0018      	movs	r0, r3
100444a8:	f7fb feca 	bl	10040240 <__udivsi3>
100444ac:	0003      	movs	r3, r0
100444ae:	b29b      	uxth	r3, r3
100444b0:	b2db      	uxtb	r3, r3
100444b2:	011b      	lsls	r3, r3, #4
100444b4:	b2dc      	uxtb	r4, r3
100444b6:	1d3b      	adds	r3, r7, #4
100444b8:	885b      	ldrh	r3, [r3, #2]
100444ba:	210a      	movs	r1, #10
100444bc:	0018      	movs	r0, r3
100444be:	f7fb ff45 	bl	1004034c <__aeabi_uidivmod>
100444c2:	000b      	movs	r3, r1
100444c4:	b29b      	uxth	r3, r3
100444c6:	b2db      	uxtb	r3, r3
100444c8:	18e3      	adds	r3, r4, r3
100444ca:	b2db      	uxtb	r3, r3
100444cc:	001a      	movs	r2, r3
100444ce:	2105      	movs	r1, #5
100444d0:	206f      	movs	r0, #111	@ 0x6f
100444d2:	f000 ff5f 	bl	10045394 <I2C_Transmit>
				next = idle;
100444d6:	2376      	movs	r3, #118	@ 0x76
100444d8:	18fb      	adds	r3, r7, r3
100444da:	2201      	movs	r2, #1
100444dc:	701a      	strb	r2, [r3, #0]
				transition = true;
100444de:	2377      	movs	r3, #119	@ 0x77
100444e0:	18fb      	adds	r3, r7, r3
100444e2:	2201      	movs	r2, #1
100444e4:	701a      	strb	r2, [r3, #0]
			}
		}

		break;
100444e6:	e025      	b.n	10044534 <COMM_Event_Handler+0x8b4>
	default:
		break;
100444e8:	46c0      	nop			@ (mov r8, r8)
100444ea:	e024      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
100444ec:	46c0      	nop			@ (mov r8, r8)
100444ee:	e022      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
100444f0:	46c0      	nop			@ (mov r8, r8)
100444f2:	e020      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
100444f4:	46c0      	nop			@ (mov r8, r8)
100444f6:	e01e      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
100444f8:	46c0      	nop			@ (mov r8, r8)
100444fa:	e01c      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
100444fc:	46c0      	nop			@ (mov r8, r8)
100444fe:	e01a      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044500:	46c0      	nop			@ (mov r8, r8)
10044502:	e018      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044504:	46c0      	nop			@ (mov r8, r8)
10044506:	e016      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044508:	46c0      	nop			@ (mov r8, r8)
1004450a:	e014      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
1004450c:	46c0      	nop			@ (mov r8, r8)
1004450e:	e012      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044510:	46c0      	nop			@ (mov r8, r8)
10044512:	e010      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044514:	46c0      	nop			@ (mov r8, r8)
10044516:	e00e      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044518:	46c0      	nop			@ (mov r8, r8)
1004451a:	e00c      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
1004451c:	46c0      	nop			@ (mov r8, r8)
1004451e:	e00a      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044520:	46c0      	nop			@ (mov r8, r8)
10044522:	e008      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044524:	46c0      	nop			@ (mov r8, r8)
10044526:	e006      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044528:	46c0      	nop			@ (mov r8, r8)
1004452a:	e004      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
1004452c:	46c0      	nop			@ (mov r8, r8)
1004452e:	e002      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044530:	46c0      	nop			@ (mov r8, r8)
10044532:	e000      	b.n	10044536 <COMM_Event_Handler+0x8b6>
		break;
10044534:	46c0      	nop			@ (mov r8, r8)
	}
	if(transition){
10044536:	2377      	movs	r3, #119	@ 0x77
10044538:	18fb      	adds	r3, r7, r3
1004453a:	781b      	ldrb	r3, [r3, #0]
1004453c:	2b00      	cmp	r3, #0
1004453e:	d01a      	beq.n	10044576 <COMM_Event_Handler+0x8f6>
		COMM_Event_Handler((Event_t){EVENT_EXIT});
10044540:	2110      	movs	r1, #16
10044542:	187b      	adds	r3, r7, r1
10044544:	2200      	movs	r2, #0
10044546:	601a      	str	r2, [r3, #0]
10044548:	187b      	adds	r3, r7, r1
1004454a:	2203      	movs	r2, #3
1004454c:	701a      	strb	r2, [r3, #0]
1004454e:	187b      	adds	r3, r7, r1
10044550:	6818      	ldr	r0, [r3, #0]
10044552:	f7ff fb95 	bl	10043c80 <COMM_Event_Handler>
		commSM = next;
10044556:	4b0a      	ldr	r3, [pc, #40]	@ (10044580 <COMM_Event_Handler+0x900>)
10044558:	2276      	movs	r2, #118	@ 0x76
1004455a:	18ba      	adds	r2, r7, r2
1004455c:	7812      	ldrb	r2, [r2, #0]
1004455e:	701a      	strb	r2, [r3, #0]
		COMM_Event_Handler((Event_t){EVENT_ENTRY});
10044560:	210c      	movs	r1, #12
10044562:	187b      	adds	r3, r7, r1
10044564:	2200      	movs	r2, #0
10044566:	601a      	str	r2, [r3, #0]
10044568:	187b      	adds	r3, r7, r1
1004456a:	2202      	movs	r2, #2
1004456c:	701a      	strb	r2, [r3, #0]
1004456e:	187b      	adds	r3, r7, r1
10044570:	6818      	ldr	r0, [r3, #0]
10044572:	f7ff fb85 	bl	10043c80 <COMM_Event_Handler>
	}
	return 1;
10044576:	2301      	movs	r3, #1
}
10044578:	0018      	movs	r0, r3
1004457a:	46bd      	mov	sp, r7
1004457c:	b01e      	add	sp, #120	@ 0x78
1004457e:	bdb0      	pop	{r4, r5, r7, pc}
10044580:	200003b5 	.word	0x200003b5

10044584 <discountprintf>:
#include "DiscountIO.h"

#define DEBUGPRINT   	0x0E
#define DEBUGPRINTEND  	'\n'

int	discountprintf (const char * text){
10044584:	b580      	push	{r7, lr}
10044586:	b084      	sub	sp, #16
10044588:	af00      	add	r7, sp, #0
1004458a:	6078      	str	r0, [r7, #4]
	int length = strlen(text);
1004458c:	687b      	ldr	r3, [r7, #4]
1004458e:	0018      	movs	r0, r3
10044590:	f7fb fe44 	bl	1004021c <strlen>
10044594:	0003      	movs	r3, r0
10044596:	60bb      	str	r3, [r7, #8]
	USART_WriteTx(DEBUGPRINT);
10044598:	200e      	movs	r0, #14
1004459a:	f002 fbd5 	bl	10046d48 <USART_WriteTx>
	for(int i = 0; i < length; i++){
1004459e:	2300      	movs	r3, #0
100445a0:	60fb      	str	r3, [r7, #12]
100445a2:	e009      	b.n	100445b8 <discountprintf+0x34>
		USART_WriteTx(text[i]);
100445a4:	68fb      	ldr	r3, [r7, #12]
100445a6:	687a      	ldr	r2, [r7, #4]
100445a8:	18d3      	adds	r3, r2, r3
100445aa:	781b      	ldrb	r3, [r3, #0]
100445ac:	0018      	movs	r0, r3
100445ae:	f002 fbcb 	bl	10046d48 <USART_WriteTx>
	for(int i = 0; i < length; i++){
100445b2:	68fb      	ldr	r3, [r7, #12]
100445b4:	3301      	adds	r3, #1
100445b6:	60fb      	str	r3, [r7, #12]
100445b8:	68fa      	ldr	r2, [r7, #12]
100445ba:	68bb      	ldr	r3, [r7, #8]
100445bc:	429a      	cmp	r2, r3
100445be:	dbf1      	blt.n	100445a4 <discountprintf+0x20>
	}
	USART_WriteTx(DEBUGPRINTEND);
100445c0:	200a      	movs	r0, #10
100445c2:	f002 fbc1 	bl	10046d48 <USART_WriteTx>
	return 1;
100445c6:	2301      	movs	r3, #1
}
100445c8:	0018      	movs	r0, r3
100445ca:	46bd      	mov	sp, r7
100445cc:	b004      	add	sp, #16
100445ce:	bd80      	pop	{r7, pc}

100445d0 <FIFO_Create>:

//----------------------------------------Private Functions--------------------------------------


//----------------------------------------Public Functions---------------------------------------
FIFO FIFO_Create(void){
100445d0:	b580      	push	{r7, lr}
100445d2:	b082      	sub	sp, #8
100445d4:	af00      	add	r7, sp, #0
	FIFO new = malloc(sizeof(struct _FIFO));
100445d6:	200c      	movs	r0, #12
100445d8:	f023 f934 	bl	10067844 <malloc>
100445dc:	0003      	movs	r3, r0
100445de:	607b      	str	r3, [r7, #4]
	if(new == NULL){
100445e0:	687b      	ldr	r3, [r7, #4]
100445e2:	2b00      	cmp	r3, #0
100445e4:	d101      	bne.n	100445ea <FIFO_Create+0x1a>
		return NULL;
100445e6:	2300      	movs	r3, #0
100445e8:	e009      	b.n	100445fe <FIFO_Create+0x2e>
	}
	new->first = NULL;
100445ea:	687b      	ldr	r3, [r7, #4]
100445ec:	2200      	movs	r2, #0
100445ee:	601a      	str	r2, [r3, #0]
	new->last = NULL;
100445f0:	687b      	ldr	r3, [r7, #4]
100445f2:	2200      	movs	r2, #0
100445f4:	605a      	str	r2, [r3, #4]
	new->size = 0;
100445f6:	687b      	ldr	r3, [r7, #4]
100445f8:	2200      	movs	r2, #0
100445fa:	811a      	strh	r2, [r3, #8]
	return new;
100445fc:	687b      	ldr	r3, [r7, #4]
}
100445fe:	0018      	movs	r0, r3
10044600:	46bd      	mov	sp, r7
10044602:	b002      	add	sp, #8
10044604:	bd80      	pop	{r7, pc}

10044606 <FIFO_Destroy>:

uint8_t FIFO_Destroy(FIFO doomed){
10044606:	b580      	push	{r7, lr}
10044608:	b084      	sub	sp, #16
1004460a:	af00      	add	r7, sp, #0
1004460c:	6078      	str	r0, [r7, #4]
	if(doomed == NULL){
1004460e:	687b      	ldr	r3, [r7, #4]
10044610:	2b00      	cmp	r3, #0
10044612:	d101      	bne.n	10044618 <FIFO_Destroy+0x12>
		return 0;// operation failled
10044614:	2300      	movs	r3, #0
10044616:	e014      	b.n	10044642 <FIFO_Destroy+0x3c>
	}
	node* cur = doomed->first;
10044618:	687b      	ldr	r3, [r7, #4]
1004461a:	681b      	ldr	r3, [r3, #0]
1004461c:	60fb      	str	r3, [r7, #12]
	while(cur != NULL){
1004461e:	e008      	b.n	10044632 <FIFO_Destroy+0x2c>
		node* last = cur;
10044620:	68fb      	ldr	r3, [r7, #12]
10044622:	60bb      	str	r3, [r7, #8]
		cur = cur->next;
10044624:	68fb      	ldr	r3, [r7, #12]
10044626:	685b      	ldr	r3, [r3, #4]
10044628:	60fb      	str	r3, [r7, #12]
		free(last);
1004462a:	68bb      	ldr	r3, [r7, #8]
1004462c:	0018      	movs	r0, r3
1004462e:	f023 f913 	bl	10067858 <free>
	while(cur != NULL){
10044632:	68fb      	ldr	r3, [r7, #12]
10044634:	2b00      	cmp	r3, #0
10044636:	d1f3      	bne.n	10044620 <FIFO_Destroy+0x1a>
	}
	free(doomed);
10044638:	687b      	ldr	r3, [r7, #4]
1004463a:	0018      	movs	r0, r3
1004463c:	f023 f90c 	bl	10067858 <free>
	return 1;
10044640:	2301      	movs	r3, #1
}
10044642:	0018      	movs	r0, r3
10044644:	46bd      	mov	sp, r7
10044646:	b004      	add	sp, #16
10044648:	bd80      	pop	{r7, pc}

1004464a <FIFO_Enqueue>:

uint8_t FIFO_Enqueue(FIFO list, Event_t event){
1004464a:	b580      	push	{r7, lr}
1004464c:	b084      	sub	sp, #16
1004464e:	af00      	add	r7, sp, #0
10044650:	6078      	str	r0, [r7, #4]
10044652:	003b      	movs	r3, r7
10044654:	6019      	str	r1, [r3, #0]
	if(list == NULL){
10044656:	687b      	ldr	r3, [r7, #4]
10044658:	2b00      	cmp	r3, #0
1004465a:	d101      	bne.n	10044660 <FIFO_Enqueue+0x16>
		return 0;
1004465c:	2300      	movs	r3, #0
1004465e:	e026      	b.n	100446ae <FIFO_Enqueue+0x64>
	}
	node* new = malloc(sizeof(node));
10044660:	2008      	movs	r0, #8
10044662:	f023 f8ef 	bl	10067844 <malloc>
10044666:	0003      	movs	r3, r0
10044668:	60fb      	str	r3, [r7, #12]
	if(new == NULL){
1004466a:	68fb      	ldr	r3, [r7, #12]
1004466c:	2b00      	cmp	r3, #0
1004466e:	d101      	bne.n	10044674 <FIFO_Enqueue+0x2a>
		return 0;
10044670:	2300      	movs	r3, #0
10044672:	e01c      	b.n	100446ae <FIFO_Enqueue+0x64>
	}
	new->event = event;
10044674:	68fb      	ldr	r3, [r7, #12]
10044676:	003a      	movs	r2, r7
10044678:	6812      	ldr	r2, [r2, #0]
1004467a:	601a      	str	r2, [r3, #0]
	new->next = NULL;
1004467c:	68fb      	ldr	r3, [r7, #12]
1004467e:	2200      	movs	r2, #0
10044680:	605a      	str	r2, [r3, #4]
	if(list->last != NULL){//predefined list
10044682:	687b      	ldr	r3, [r7, #4]
10044684:	685b      	ldr	r3, [r3, #4]
10044686:	2b00      	cmp	r3, #0
10044688:	d004      	beq.n	10044694 <FIFO_Enqueue+0x4a>
		list->last->next = new;
1004468a:	687b      	ldr	r3, [r7, #4]
1004468c:	685b      	ldr	r3, [r3, #4]
1004468e:	68fa      	ldr	r2, [r7, #12]
10044690:	605a      	str	r2, [r3, #4]
10044692:	e002      	b.n	1004469a <FIFO_Enqueue+0x50>
	}else{//new list
		list->first = new;
10044694:	687b      	ldr	r3, [r7, #4]
10044696:	68fa      	ldr	r2, [r7, #12]
10044698:	601a      	str	r2, [r3, #0]
	}
	list->last = new;
1004469a:	687b      	ldr	r3, [r7, #4]
1004469c:	68fa      	ldr	r2, [r7, #12]
1004469e:	605a      	str	r2, [r3, #4]
	list->size++;
100446a0:	687b      	ldr	r3, [r7, #4]
100446a2:	891b      	ldrh	r3, [r3, #8]
100446a4:	3301      	adds	r3, #1
100446a6:	b29a      	uxth	r2, r3
100446a8:	687b      	ldr	r3, [r7, #4]
100446aa:	811a      	strh	r2, [r3, #8]
	return 1;
100446ac:	2301      	movs	r3, #1
}
100446ae:	0018      	movs	r0, r3
100446b0:	46bd      	mov	sp, r7
100446b2:	b004      	add	sp, #16
100446b4:	bd80      	pop	{r7, pc}

100446b6 <FIFO_Dequeue>:

Event_t FIFO_Dequeue(FIFO list){
100446b6:	b590      	push	{r4, r7, lr}
100446b8:	b089      	sub	sp, #36	@ 0x24
100446ba:	af00      	add	r7, sp, #0
100446bc:	6078      	str	r0, [r7, #4]
	if(list == NULL){
100446be:	687b      	ldr	r3, [r7, #4]
100446c0:	2b00      	cmp	r3, #0
100446c2:	d107      	bne.n	100446d4 <FIFO_Dequeue+0x1e>
		return (Event_t){EVENT_ERROR, 0};
100446c4:	2118      	movs	r1, #24
100446c6:	187b      	adds	r3, r7, r1
100446c8:	22ff      	movs	r2, #255	@ 0xff
100446ca:	701a      	strb	r2, [r3, #0]
100446cc:	187b      	adds	r3, r7, r1
100446ce:	2200      	movs	r2, #0
100446d0:	805a      	strh	r2, [r3, #2]
100446d2:	e030      	b.n	10044736 <FIFO_Dequeue+0x80>
	}
	if(list->first == NULL){
100446d4:	687b      	ldr	r3, [r7, #4]
100446d6:	681b      	ldr	r3, [r3, #0]
100446d8:	2b00      	cmp	r3, #0
100446da:	d10a      	bne.n	100446f2 <FIFO_Dequeue+0x3c>
		list->last = NULL;// It is preferable to have a memory leak, rather than crash the system
100446dc:	687b      	ldr	r3, [r7, #4]
100446de:	2200      	movs	r2, #0
100446e0:	605a      	str	r2, [r3, #4]
		return (Event_t){EVENT_NONE, 0};
100446e2:	2118      	movs	r1, #24
100446e4:	187b      	adds	r3, r7, r1
100446e6:	2200      	movs	r2, #0
100446e8:	701a      	strb	r2, [r3, #0]
100446ea:	187b      	adds	r3, r7, r1
100446ec:	2200      	movs	r2, #0
100446ee:	805a      	strh	r2, [r3, #2]
100446f0:	e021      	b.n	10044736 <FIFO_Dequeue+0x80>
	}
	node* doomed = list->first;
100446f2:	687b      	ldr	r3, [r7, #4]
100446f4:	681b      	ldr	r3, [r3, #0]
100446f6:	61fb      	str	r3, [r7, #28]
	list->first = doomed->next;
100446f8:	69fb      	ldr	r3, [r7, #28]
100446fa:	685a      	ldr	r2, [r3, #4]
100446fc:	687b      	ldr	r3, [r7, #4]
100446fe:	601a      	str	r2, [r3, #0]
	if(list->first == NULL){
10044700:	687b      	ldr	r3, [r7, #4]
10044702:	681b      	ldr	r3, [r3, #0]
10044704:	2b00      	cmp	r3, #0
10044706:	d102      	bne.n	1004470e <FIFO_Dequeue+0x58>
		list->last = NULL;
10044708:	687b      	ldr	r3, [r7, #4]
1004470a:	2200      	movs	r2, #0
1004470c:	605a      	str	r2, [r3, #4]
	}
	Event_t out = doomed->event;
1004470e:	2414      	movs	r4, #20
10044710:	193b      	adds	r3, r7, r4
10044712:	69fa      	ldr	r2, [r7, #28]
10044714:	6812      	ldr	r2, [r2, #0]
10044716:	601a      	str	r2, [r3, #0]
	free(doomed);
10044718:	69fb      	ldr	r3, [r7, #28]
1004471a:	0018      	movs	r0, r3
1004471c:	f023 f89c 	bl	10067858 <free>
	list->size--;
10044720:	687b      	ldr	r3, [r7, #4]
10044722:	891b      	ldrh	r3, [r3, #8]
10044724:	3b01      	subs	r3, #1
10044726:	b29a      	uxth	r2, r3
10044728:	687b      	ldr	r3, [r7, #4]
1004472a:	811a      	strh	r2, [r3, #8]
	return out;
1004472c:	2318      	movs	r3, #24
1004472e:	18fb      	adds	r3, r7, r3
10044730:	193a      	adds	r2, r7, r4
10044732:	6812      	ldr	r2, [r2, #0]
10044734:	601a      	str	r2, [r3, #0]

}
10044736:	2318      	movs	r3, #24
10044738:	18fa      	adds	r2, r7, r3
1004473a:	2300      	movs	r3, #0
1004473c:	8811      	ldrh	r1, [r2, #0]
1004473e:	0409      	lsls	r1, r1, #16
10044740:	0c09      	lsrs	r1, r1, #16
10044742:	0c1b      	lsrs	r3, r3, #16
10044744:	041b      	lsls	r3, r3, #16
10044746:	430b      	orrs	r3, r1
10044748:	8852      	ldrh	r2, [r2, #2]
1004474a:	0412      	lsls	r2, r2, #16
1004474c:	041b      	lsls	r3, r3, #16
1004474e:	0c1b      	lsrs	r3, r3, #16
10044750:	4313      	orrs	r3, r2
10044752:	0018      	movs	r0, r3
10044754:	46bd      	mov	sp, r7
10044756:	b009      	add	sp, #36	@ 0x24
10044758:	bd90      	pop	{r4, r7, pc}

1004475a <FIFO_GetSize>:

bool FIFO_GetSize(FIFO list){
1004475a:	b580      	push	{r7, lr}
1004475c:	b082      	sub	sp, #8
1004475e:	af00      	add	r7, sp, #0
10044760:	6078      	str	r0, [r7, #4]
	return list->size;
10044762:	687b      	ldr	r3, [r7, #4]
10044764:	891b      	ldrh	r3, [r3, #8]
10044766:	1e5a      	subs	r2, r3, #1
10044768:	4193      	sbcs	r3, r2
1004476a:	b2db      	uxtb	r3, r3
}
1004476c:	0018      	movs	r0, r3
1004476e:	46bd      	mov	sp, r7
10044770:	b002      	add	sp, #8
10044772:	bd80      	pop	{r7, pc}

10044774 <FLASH_Init>:
 * @function: FLASH_Init()
 * @brief: initialize the flash access library
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint8_t FLASH_Init(){
10044774:	b580      	push	{r7, lr}
10044776:	b082      	sub	sp, #8
10044778:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
1004477a:	4b36      	ldr	r3, [pc, #216]	@ (10044854 <FLASH_Init+0xe0>)
1004477c:	781b      	ldrb	r3, [r3, #0]
1004477e:	2b00      	cmp	r3, #0
10044780:	d001      	beq.n	10044786 <FLASH_Init+0x12>
10044782:	2301      	movs	r3, #1
10044784:	e062      	b.n	1004484c <FLASH_Init+0xd8>
	
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
10044786:	4b34      	ldr	r3, [pc, #208]	@ (10044858 <FLASH_Init+0xe4>)
10044788:	691a      	ldr	r2, [r3, #16]
1004478a:	4b33      	ldr	r3, [pc, #204]	@ (10044858 <FLASH_Init+0xe4>)
1004478c:	210c      	movs	r1, #12
1004478e:	430a      	orrs	r2, r1
10044790:	611a      	str	r2, [r3, #16]
	//find size of schedule
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
10044792:	2300      	movs	r3, #0
10044794:	607b      	str	r3, [r7, #4]
10044796:	e00f      	b.n	100447b8 <FLASH_Init+0x44>
		if ((uint8_t)(*(uint8_t*)(SCHEDULEADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
10044798:	687b      	ldr	r3, [r7, #4]
1004479a:	4a30      	ldr	r2, [pc, #192]	@ (1004485c <FLASH_Init+0xe8>)
1004479c:	4694      	mov	ip, r2
1004479e:	4463      	add	r3, ip
100447a0:	00db      	lsls	r3, r3, #3
100447a2:	781b      	ldrb	r3, [r3, #0]
100447a4:	2bff      	cmp	r3, #255	@ 0xff
100447a6:	d104      	bne.n	100447b2 <FLASH_Init+0x3e>
			ScheduleSize = i;
100447a8:	687b      	ldr	r3, [r7, #4]
100447aa:	b21a      	sxth	r2, r3
100447ac:	4b2c      	ldr	r3, [pc, #176]	@ (10044860 <FLASH_Init+0xec>)
100447ae:	801a      	strh	r2, [r3, #0]
			break;
100447b0:	e005      	b.n	100447be <FLASH_Init+0x4a>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
100447b2:	687b      	ldr	r3, [r7, #4]
100447b4:	3301      	adds	r3, #1
100447b6:	607b      	str	r3, [r7, #4]
100447b8:	687b      	ldr	r3, [r7, #4]
100447ba:	2bff      	cmp	r3, #255	@ 0xff
100447bc:	ddec      	ble.n	10044798 <FLASH_Init+0x24>
		}
	}
	//find size of logs
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
100447be:	2300      	movs	r3, #0
100447c0:	603b      	str	r3, [r7, #0]
100447c2:	e00f      	b.n	100447e4 <FLASH_Init+0x70>
		if ((uint8_t)(*(uint8_t*)(LOGSADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
100447c4:	683b      	ldr	r3, [r7, #0]
100447c6:	4a27      	ldr	r2, [pc, #156]	@ (10044864 <FLASH_Init+0xf0>)
100447c8:	4694      	mov	ip, r2
100447ca:	4463      	add	r3, ip
100447cc:	00db      	lsls	r3, r3, #3
100447ce:	781b      	ldrb	r3, [r3, #0]
100447d0:	2bff      	cmp	r3, #255	@ 0xff
100447d2:	d104      	bne.n	100447de <FLASH_Init+0x6a>
			LogsSize = i;
100447d4:	683b      	ldr	r3, [r7, #0]
100447d6:	b21a      	sxth	r2, r3
100447d8:	4b23      	ldr	r3, [pc, #140]	@ (10044868 <FLASH_Init+0xf4>)
100447da:	801a      	strh	r2, [r3, #0]
			break;
100447dc:	e005      	b.n	100447ea <FLASH_Init+0x76>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
100447de:	683b      	ldr	r3, [r7, #0]
100447e0:	3301      	adds	r3, #1
100447e2:	603b      	str	r3, [r7, #0]
100447e4:	683b      	ldr	r3, [r7, #0]
100447e6:	2bff      	cmp	r3, #255	@ 0xff
100447e8:	ddec      	ble.n	100447c4 <FLASH_Init+0x50>
		}
	}
	initialized = 1;
100447ea:	4b1a      	ldr	r3, [pc, #104]	@ (10044854 <FLASH_Init+0xe0>)
100447ec:	2201      	movs	r2, #1
100447ee:	701a      	strb	r2, [r3, #0]
	//load default values into the duty cycle and volume if they are not initialized
	if(FLASH_GetVolume() == FLASHEMPTY ||FLASH_GetDutyCycle() == FLASHEMPTY){
100447f0:	f000 f87e 	bl	100448f0 <FLASH_GetVolume>
100447f4:	0003      	movs	r3, r0
100447f6:	2bff      	cmp	r3, #255	@ 0xff
100447f8:	d004      	beq.n	10044804 <FLASH_Init+0x90>
100447fa:	f000 f88f 	bl	1004491c <FLASH_GetDutyCycle>
100447fe:	0003      	movs	r3, r0
10044800:	2bff      	cmp	r3, #255	@ 0xff
10044802:	d122      	bne.n	1004484a <FLASH_Init+0xd6>
		if(FLASH_GetVolume() == FLASHEMPTY && FLASH_GetDutyCycle() == FLASHEMPTY){
10044804:	f000 f874 	bl	100448f0 <FLASH_GetVolume>
10044808:	0003      	movs	r3, r0
1004480a:	2bff      	cmp	r3, #255	@ 0xff
1004480c:	d109      	bne.n	10044822 <FLASH_Init+0xae>
1004480e:	f000 f885 	bl	1004491c <FLASH_GetDutyCycle>
10044812:	0003      	movs	r3, r0
10044814:	2bff      	cmp	r3, #255	@ 0xff
10044816:	d104      	bne.n	10044822 <FLASH_Init+0xae>
			FLASH_SetDCVol(50, 40);
10044818:	2128      	movs	r1, #40	@ 0x28
1004481a:	2032      	movs	r0, #50	@ 0x32
1004481c:	f000 f826 	bl	1004486c <FLASH_SetDCVol>
10044820:	e013      	b.n	1004484a <FLASH_Init+0xd6>
		}else {
			if(FLASH_GetVolume() == FLASHEMPTY){
10044822:	f000 f865 	bl	100448f0 <FLASH_GetVolume>
10044826:	0003      	movs	r3, r0
10044828:	2bff      	cmp	r3, #255	@ 0xff
1004482a:	d107      	bne.n	1004483c <FLASH_Init+0xc8>
				FLASH_SetDCVol(50, FLASH_GetDutyCycle());
1004482c:	f000 f876 	bl	1004491c <FLASH_GetDutyCycle>
10044830:	0003      	movs	r3, r0
10044832:	0019      	movs	r1, r3
10044834:	2032      	movs	r0, #50	@ 0x32
10044836:	f000 f819 	bl	1004486c <FLASH_SetDCVol>
1004483a:	e006      	b.n	1004484a <FLASH_Init+0xd6>
			}else {
				FLASH_SetDCVol(FLASH_GetVolume(), 40);
1004483c:	f000 f858 	bl	100448f0 <FLASH_GetVolume>
10044840:	0003      	movs	r3, r0
10044842:	2128      	movs	r1, #40	@ 0x28
10044844:	0018      	movs	r0, r3
10044846:	f000 f811 	bl	1004486c <FLASH_SetDCVol>
			}
		}
	}
	return INIT_OK;
1004484a:	2301      	movs	r3, #1
}
1004484c:	0018      	movs	r0, r3
1004484e:	46bd      	mov	sp, r7
10044850:	b002      	add	sp, #8
10044852:	bd80      	pop	{r7, pc}
10044854:	200003d0 	.word	0x200003d0
10044858:	40001000 	.word	0x40001000
1004485c:	0200de00 	.word	0x0200de00
10044860:	200003cc 	.word	0x200003cc
10044864:	0200dd00 	.word	0x0200dd00
10044868:	200003ce 	.word	0x200003ce

1004486c <FLASH_SetDCVol>:
 * @function: FLASH_SetVolume();
 * @brief: edits the volume and duty cycle stored in memory
 * @param: none
 * @return: success status
 */
uint8_t FLASH_SetDCVol(uint8_t volume, uint8_t DC){
1004486c:	b5b0      	push	{r4, r5, r7, lr}
1004486e:	b088      	sub	sp, #32
10044870:	af00      	add	r7, sp, #0
10044872:	0002      	movs	r2, r0
10044874:	1dfb      	adds	r3, r7, #7
10044876:	701a      	strb	r2, [r3, #0]
10044878:	1dbb      	adds	r3, r7, #6
1004487a:	1c0a      	adds	r2, r1, #0
1004487c:	701a      	strb	r2, [r3, #0]
	if(!initialized){return 0;}
1004487e:	4b1a      	ldr	r3, [pc, #104]	@ (100448e8 <FLASH_SetDCVol+0x7c>)
10044880:	781b      	ldrb	r3, [r3, #0]
10044882:	2b00      	cmp	r3, #0
10044884:	d101      	bne.n	1004488a <FLASH_SetDCVol+0x1e>
10044886:	2300      	movs	r3, #0
10044888:	e02a      	b.n	100448e0 <FLASH_SetDCVol+0x74>
	FLASH_EraseInitTypeDef erase;
	erase.Page = DCVOLPAGE;
1004488a:	210c      	movs	r1, #12
1004488c:	187b      	adds	r3, r7, r1
1004488e:	225c      	movs	r2, #92	@ 0x5c
10044890:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10044892:	187b      	adds	r3, r7, r1
10044894:	2201      	movs	r2, #1
10044896:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
10044898:	187b      	adds	r3, r7, r1
1004489a:	2200      	movs	r2, #0
1004489c:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_FLASHEx_Erase(&erase, &faultypage);
1004489e:	2308      	movs	r3, #8
100448a0:	18fa      	adds	r2, r7, r3
100448a2:	187b      	adds	r3, r7, r1
100448a4:	0011      	movs	r1, r2
100448a6:	0018      	movs	r0, r3
100448a8:	f003 fc8c 	bl	100481c4 <HAL_FLASHEx_Erase>
	FLASH_GetVolume();
100448ac:	f000 f820 	bl	100448f0 <FLASH_GetVolume>
	FLASH_GetDutyCycle();
100448b0:	f000 f834 	bl	1004491c <FLASH_GetDutyCycle>
	uint32_t data = ((uint32_t)(DC)<<8)+(uint32_t)(volume);
100448b4:	1dbb      	adds	r3, r7, #6
100448b6:	781b      	ldrb	r3, [r3, #0]
100448b8:	021a      	lsls	r2, r3, #8
100448ba:	1dfb      	adds	r3, r7, #7
100448bc:	781b      	ldrb	r3, [r3, #0]
100448be:	18d3      	adds	r3, r2, r3
100448c0:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, VOLUMEADDRESS, data);
100448c2:	251b      	movs	r5, #27
100448c4:	197c      	adds	r4, r7, r5
100448c6:	69fb      	ldr	r3, [r7, #28]
100448c8:	4908      	ldr	r1, [pc, #32]	@ (100448ec <FLASH_SetDCVol+0x80>)
100448ca:	001a      	movs	r2, r3
100448cc:	2000      	movs	r0, #0
100448ce:	f003 fb9f 	bl	10048010 <HAL_FLASH_Program>
100448d2:	0003      	movs	r3, r0
100448d4:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
100448d6:	197b      	adds	r3, r7, r5
100448d8:	781b      	ldrb	r3, [r3, #0]
100448da:	425a      	negs	r2, r3
100448dc:	4153      	adcs	r3, r2
100448de:	b2db      	uxtb	r3, r3
}
100448e0:	0018      	movs	r0, r3
100448e2:	46bd      	mov	sp, r7
100448e4:	b008      	add	sp, #32
100448e6:	bdb0      	pop	{r4, r5, r7, pc}
100448e8:	200003d0 	.word	0x200003d0
100448ec:	1006e000 	.word	0x1006e000

100448f0 <FLASH_GetVolume>:
 * @function: FLASH_GetVolume();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: volume
 */
uint8_t FLASH_GetVolume(){
100448f0:	b580      	push	{r7, lr}
100448f2:	b082      	sub	sp, #8
100448f4:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100448f6:	4b07      	ldr	r3, [pc, #28]	@ (10044914 <FLASH_GetVolume+0x24>)
100448f8:	781b      	ldrb	r3, [r3, #0]
100448fa:	2b00      	cmp	r3, #0
100448fc:	d101      	bne.n	10044902 <FLASH_GetVolume+0x12>
100448fe:	2300      	movs	r3, #0
10044900:	e003      	b.n	1004490a <FLASH_GetVolume+0x1a>
	uint8_t* adr = (uint8_t*)VOLUMEADDRESS;
10044902:	4b05      	ldr	r3, [pc, #20]	@ (10044918 <FLASH_GetVolume+0x28>)
10044904:	607b      	str	r3, [r7, #4]
	return *adr;
10044906:	687b      	ldr	r3, [r7, #4]
10044908:	781b      	ldrb	r3, [r3, #0]
}
1004490a:	0018      	movs	r0, r3
1004490c:	46bd      	mov	sp, r7
1004490e:	b002      	add	sp, #8
10044910:	bd80      	pop	{r7, pc}
10044912:	46c0      	nop			@ (mov r8, r8)
10044914:	200003d0 	.word	0x200003d0
10044918:	1006e000 	.word	0x1006e000

1004491c <FLASH_GetDutyCycle>:
 * @function: FLASH_GetDutyCycle();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: Duty Cycle
 */
uint8_t FLASH_GetDutyCycle(){
1004491c:	b580      	push	{r7, lr}
1004491e:	b082      	sub	sp, #8
10044920:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044922:	4b07      	ldr	r3, [pc, #28]	@ (10044940 <FLASH_GetDutyCycle+0x24>)
10044924:	781b      	ldrb	r3, [r3, #0]
10044926:	2b00      	cmp	r3, #0
10044928:	d101      	bne.n	1004492e <FLASH_GetDutyCycle+0x12>
1004492a:	2300      	movs	r3, #0
1004492c:	e003      	b.n	10044936 <FLASH_GetDutyCycle+0x1a>
	uint8_t* adr = (uint8_t*)DCADDRESS;
1004492e:	4b05      	ldr	r3, [pc, #20]	@ (10044944 <FLASH_GetDutyCycle+0x28>)
10044930:	607b      	str	r3, [r7, #4]
	return *adr;
10044932:	687b      	ldr	r3, [r7, #4]
10044934:	781b      	ldrb	r3, [r3, #0]
}
10044936:	0018      	movs	r0, r3
10044938:	46bd      	mov	sp, r7
1004493a:	b002      	add	sp, #8
1004493c:	bd80      	pop	{r7, pc}
1004493e:	46c0      	nop			@ (mov r8, r8)
10044940:	200003d0 	.word	0x200003d0
10044944:	1006e001 	.word	0x1006e001

10044948 <FLASH_AppendLogs>:
 * @function: FLASH_AppendLogs();
 * @brief: Adds a new event entry to the logs
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendLogs(scheduleEvent event){
10044948:	b580      	push	{r7, lr}
1004494a:	b084      	sub	sp, #16
1004494c:	af00      	add	r7, sp, #0
1004494e:	003b      	movs	r3, r7
10044950:	6018      	str	r0, [r3, #0]
10044952:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
10044954:	4b27      	ldr	r3, [pc, #156]	@ (100449f4 <FLASH_AppendLogs+0xac>)
10044956:	781b      	ldrb	r3, [r3, #0]
10044958:	2b00      	cmp	r3, #0
1004495a:	d101      	bne.n	10044960 <FLASH_AppendLogs+0x18>
1004495c:	2300      	movs	r3, #0
1004495e:	e044      	b.n	100449ea <FLASH_AppendLogs+0xa2>
	LogsSize++;
10044960:	4b25      	ldr	r3, [pc, #148]	@ (100449f8 <FLASH_AppendLogs+0xb0>)
10044962:	2200      	movs	r2, #0
10044964:	5e9b      	ldrsh	r3, [r3, r2]
10044966:	b29b      	uxth	r3, r3
10044968:	3301      	adds	r3, #1
1004496a:	b29b      	uxth	r3, r3
1004496c:	b21a      	sxth	r2, r3
1004496e:	4b22      	ldr	r3, [pc, #136]	@ (100449f8 <FLASH_AppendLogs+0xb0>)
10044970:	801a      	strh	r2, [r3, #0]
	uint32_t Data1 = (event.month)|(event.day<<8)|(event.start<<16)|(event.stop<<24);
10044972:	003b      	movs	r3, r7
10044974:	781b      	ldrb	r3, [r3, #0]
10044976:	001a      	movs	r2, r3
10044978:	003b      	movs	r3, r7
1004497a:	785b      	ldrb	r3, [r3, #1]
1004497c:	021b      	lsls	r3, r3, #8
1004497e:	431a      	orrs	r2, r3
10044980:	003b      	movs	r3, r7
10044982:	789b      	ldrb	r3, [r3, #2]
10044984:	041b      	lsls	r3, r3, #16
10044986:	431a      	orrs	r2, r3
10044988:	003b      	movs	r3, r7
1004498a:	78db      	ldrb	r3, [r3, #3]
1004498c:	061b      	lsls	r3, r3, #24
1004498e:	4313      	orrs	r3, r2
10044990:	60fb      	str	r3, [r7, #12]
	uint32_t Data2 = (event.folder)|(event.track<<8);
10044992:	003b      	movs	r3, r7
10044994:	791b      	ldrb	r3, [r3, #4]
10044996:	001a      	movs	r2, r3
10044998:	003b      	movs	r3, r7
1004499a:	795b      	ldrb	r3, [r3, #5]
1004499c:	021b      	lsls	r3, r3, #8
1004499e:	4313      	orrs	r3, r2
100449a0:	60bb      	str	r3, [r7, #8]
	//this isn't blocking code officer I swear! (this is blocking code, to be improved later)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
100449a2:	4b15      	ldr	r3, [pc, #84]	@ (100449f8 <FLASH_AppendLogs+0xb0>)
100449a4:	2200      	movs	r2, #0
100449a6:	5e9b      	ldrsh	r3, [r3, r2]
100449a8:	4a14      	ldr	r2, [pc, #80]	@ (100449fc <FLASH_AppendLogs+0xb4>)
100449aa:	4694      	mov	ip, r2
100449ac:	4463      	add	r3, ip
100449ae:	00db      	lsls	r3, r3, #3
100449b0:	0019      	movs	r1, r3
100449b2:	68fb      	ldr	r3, [r7, #12]
100449b4:	001a      	movs	r2, r3
100449b6:	2000      	movs	r0, #0
100449b8:	f003 fb2a 	bl	10048010 <HAL_FLASH_Program>
100449bc:	1e03      	subs	r3, r0, #0
100449be:	d001      	beq.n	100449c4 <FLASH_AppendLogs+0x7c>
		return 0;
100449c0:	2300      	movs	r3, #0
100449c2:	e012      	b.n	100449ea <FLASH_AppendLogs+0xa2>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
100449c4:	4b0c      	ldr	r3, [pc, #48]	@ (100449f8 <FLASH_AppendLogs+0xb0>)
100449c6:	2200      	movs	r2, #0
100449c8:	5e9b      	ldrsh	r3, [r3, r2]
100449ca:	4a0c      	ldr	r2, [pc, #48]	@ (100449fc <FLASH_AppendLogs+0xb4>)
100449cc:	4694      	mov	ip, r2
100449ce:	4463      	add	r3, ip
100449d0:	00db      	lsls	r3, r3, #3
100449d2:	3304      	adds	r3, #4
100449d4:	0019      	movs	r1, r3
100449d6:	68bb      	ldr	r3, [r7, #8]
100449d8:	001a      	movs	r2, r3
100449da:	2000      	movs	r0, #0
100449dc:	f003 fb18 	bl	10048010 <HAL_FLASH_Program>
100449e0:	1e03      	subs	r3, r0, #0
100449e2:	d001      	beq.n	100449e8 <FLASH_AppendLogs+0xa0>
		return 0;
100449e4:	2300      	movs	r3, #0
100449e6:	e000      	b.n	100449ea <FLASH_AppendLogs+0xa2>
	}
	return 1;
100449e8:	2301      	movs	r3, #1
}
100449ea:	0018      	movs	r0, r3
100449ec:	46bd      	mov	sp, r7
100449ee:	b004      	add	sp, #16
100449f0:	bd80      	pop	{r7, pc}
100449f2:	46c0      	nop			@ (mov r8, r8)
100449f4:	200003d0 	.word	0x200003d0
100449f8:	200003ce 	.word	0x200003ce
100449fc:	0200dd00 	.word	0x0200dd00

10044a00 <FLASH_GetLogsSize>:
 * @function: FLASH_GetLogsSize();
 * @brief: returns the size of the logs
 * @param: none
 * @return: Logs size
 */
uint16_t FLASH_GetLogsSize(){
10044a00:	b580      	push	{r7, lr}
10044a02:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044a04:	4b06      	ldr	r3, [pc, #24]	@ (10044a20 <FLASH_GetLogsSize+0x20>)
10044a06:	781b      	ldrb	r3, [r3, #0]
10044a08:	2b00      	cmp	r3, #0
10044a0a:	d101      	bne.n	10044a10 <FLASH_GetLogsSize+0x10>
10044a0c:	2300      	movs	r3, #0
10044a0e:	e003      	b.n	10044a18 <FLASH_GetLogsSize+0x18>
	return LogsSize;
10044a10:	4b04      	ldr	r3, [pc, #16]	@ (10044a24 <FLASH_GetLogsSize+0x24>)
10044a12:	2200      	movs	r2, #0
10044a14:	5e9b      	ldrsh	r3, [r3, r2]
10044a16:	b29b      	uxth	r3, r3
}
10044a18:	0018      	movs	r0, r3
10044a1a:	46bd      	mov	sp, r7
10044a1c:	bd80      	pop	{r7, pc}
10044a1e:	46c0      	nop			@ (mov r8, r8)
10044a20:	200003d0 	.word	0x200003d0
10044a24:	200003ce 	.word	0x200003ce

10044a28 <FLASH_ReadLogs>:
 * @function: FLASH_ReadLogs();
 * @brief: allows reading the logs that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index, null if invalid index
 */
scheduleEvent FLASH_ReadLogs(uint16_t index){
10044a28:	b590      	push	{r4, r7, lr}
10044a2a:	b087      	sub	sp, #28
10044a2c:	af00      	add	r7, sp, #0
10044a2e:	6078      	str	r0, [r7, #4]
10044a30:	000a      	movs	r2, r1
10044a32:	1cbb      	adds	r3, r7, #2
10044a34:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10044a36:	2410      	movs	r4, #16
10044a38:	193b      	adds	r3, r7, r4
10044a3a:	0018      	movs	r0, r3
10044a3c:	2306      	movs	r3, #6
10044a3e:	001a      	movs	r2, r3
10044a40:	2100      	movs	r1, #0
10044a42:	f023 fa05 	bl	10067e50 <memset>
	if(!initialized){return event;}
10044a46:	4b2e      	ldr	r3, [pc, #184]	@ (10044b00 <FLASH_ReadLogs+0xd8>)
10044a48:	781b      	ldrb	r3, [r3, #0]
10044a4a:	2b00      	cmp	r3, #0
10044a4c:	d108      	bne.n	10044a60 <FLASH_ReadLogs+0x38>
10044a4e:	687a      	ldr	r2, [r7, #4]
10044a50:	193b      	adds	r3, r7, r4
10044a52:	0010      	movs	r0, r2
10044a54:	0019      	movs	r1, r3
10044a56:	2306      	movs	r3, #6
10044a58:	001a      	movs	r2, r3
10044a5a:	f023 fa6e 	bl	10067f3a <memcpy>
10044a5e:	e04b      	b.n	10044af8 <FLASH_ReadLogs+0xd0>
	if(index >= 0 && index <= LogsSize){
10044a60:	1cbb      	adds	r3, r7, #2
10044a62:	881b      	ldrh	r3, [r3, #0]
10044a64:	4a27      	ldr	r2, [pc, #156]	@ (10044b04 <FLASH_ReadLogs+0xdc>)
10044a66:	2100      	movs	r1, #0
10044a68:	5e52      	ldrsh	r2, [r2, r1]
10044a6a:	4293      	cmp	r3, r2
10044a6c:	dc3b      	bgt.n	10044ae6 <FLASH_ReadLogs+0xbe>
		event.month = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE));
10044a6e:	1cbb      	adds	r3, r7, #2
10044a70:	881b      	ldrh	r3, [r3, #0]
10044a72:	4a25      	ldr	r2, [pc, #148]	@ (10044b08 <FLASH_ReadLogs+0xe0>)
10044a74:	4694      	mov	ip, r2
10044a76:	4463      	add	r3, ip
10044a78:	00db      	lsls	r3, r3, #3
10044a7a:	781a      	ldrb	r2, [r3, #0]
10044a7c:	2110      	movs	r1, #16
10044a7e:	187b      	adds	r3, r7, r1
10044a80:	701a      	strb	r2, [r3, #0]
		event.day = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+1));
10044a82:	1cbb      	adds	r3, r7, #2
10044a84:	881b      	ldrh	r3, [r3, #0]
10044a86:	4a20      	ldr	r2, [pc, #128]	@ (10044b08 <FLASH_ReadLogs+0xe0>)
10044a88:	4694      	mov	ip, r2
10044a8a:	4463      	add	r3, ip
10044a8c:	00db      	lsls	r3, r3, #3
10044a8e:	3301      	adds	r3, #1
10044a90:	781a      	ldrb	r2, [r3, #0]
10044a92:	187b      	adds	r3, r7, r1
10044a94:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+2));
10044a96:	1cbb      	adds	r3, r7, #2
10044a98:	881b      	ldrh	r3, [r3, #0]
10044a9a:	4a1b      	ldr	r2, [pc, #108]	@ (10044b08 <FLASH_ReadLogs+0xe0>)
10044a9c:	4694      	mov	ip, r2
10044a9e:	4463      	add	r3, ip
10044aa0:	00db      	lsls	r3, r3, #3
10044aa2:	3302      	adds	r3, #2
10044aa4:	781a      	ldrb	r2, [r3, #0]
10044aa6:	187b      	adds	r3, r7, r1
10044aa8:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+3));
10044aaa:	1cbb      	adds	r3, r7, #2
10044aac:	881b      	ldrh	r3, [r3, #0]
10044aae:	4a16      	ldr	r2, [pc, #88]	@ (10044b08 <FLASH_ReadLogs+0xe0>)
10044ab0:	4694      	mov	ip, r2
10044ab2:	4463      	add	r3, ip
10044ab4:	00db      	lsls	r3, r3, #3
10044ab6:	3303      	adds	r3, #3
10044ab8:	781a      	ldrb	r2, [r3, #0]
10044aba:	187b      	adds	r3, r7, r1
10044abc:	70da      	strb	r2, [r3, #3]
		event.folder = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+4));
10044abe:	1cbb      	adds	r3, r7, #2
10044ac0:	881b      	ldrh	r3, [r3, #0]
10044ac2:	4a11      	ldr	r2, [pc, #68]	@ (10044b08 <FLASH_ReadLogs+0xe0>)
10044ac4:	4694      	mov	ip, r2
10044ac6:	4463      	add	r3, ip
10044ac8:	00db      	lsls	r3, r3, #3
10044aca:	3304      	adds	r3, #4
10044acc:	781a      	ldrb	r2, [r3, #0]
10044ace:	187b      	adds	r3, r7, r1
10044ad0:	711a      	strb	r2, [r3, #4]
		event.track = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+5));
10044ad2:	1cbb      	adds	r3, r7, #2
10044ad4:	881b      	ldrh	r3, [r3, #0]
10044ad6:	4a0c      	ldr	r2, [pc, #48]	@ (10044b08 <FLASH_ReadLogs+0xe0>)
10044ad8:	4694      	mov	ip, r2
10044ada:	4463      	add	r3, ip
10044adc:	00db      	lsls	r3, r3, #3
10044ade:	3305      	adds	r3, #5
10044ae0:	781a      	ldrb	r2, [r3, #0]
10044ae2:	187b      	adds	r3, r7, r1
10044ae4:	715a      	strb	r2, [r3, #5]

	}
	return event;
10044ae6:	687a      	ldr	r2, [r7, #4]
10044ae8:	2310      	movs	r3, #16
10044aea:	18fb      	adds	r3, r7, r3
10044aec:	0010      	movs	r0, r2
10044aee:	0019      	movs	r1, r3
10044af0:	2306      	movs	r3, #6
10044af2:	001a      	movs	r2, r3
10044af4:	f023 fa21 	bl	10067f3a <memcpy>
}
10044af8:	6878      	ldr	r0, [r7, #4]
10044afa:	46bd      	mov	sp, r7
10044afc:	b007      	add	sp, #28
10044afe:	bd90      	pop	{r4, r7, pc}
10044b00:	200003d0 	.word	0x200003d0
10044b04:	200003ce 	.word	0x200003ce
10044b08:	0200dd00 	.word	0x0200dd00

10044b0c <FLASH_AppendSchedule>:
 * @function: FLASH_AppendSchedule();
 * @brief: Adds a new event entry to the schedule
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendSchedule(scheduleEvent event){
10044b0c:	b580      	push	{r7, lr}
10044b0e:	b086      	sub	sp, #24
10044b10:	af00      	add	r7, sp, #0
10044b12:	2308      	movs	r3, #8
10044b14:	18fb      	adds	r3, r7, r3
10044b16:	6018      	str	r0, [r3, #0]
10044b18:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
10044b1a:	4b2d      	ldr	r3, [pc, #180]	@ (10044bd0 <FLASH_AppendSchedule+0xc4>)
10044b1c:	781b      	ldrb	r3, [r3, #0]
10044b1e:	2b00      	cmp	r3, #0
10044b20:	d101      	bne.n	10044b26 <FLASH_AppendSchedule+0x1a>
10044b22:	2300      	movs	r3, #0
10044b24:	e050      	b.n	10044bc8 <FLASH_AppendSchedule+0xbc>
	uint32_t Data1 = (event.month)|(event.day<<8)|(event.start<<16)|(event.stop<<24);
10044b26:	2108      	movs	r1, #8
10044b28:	187b      	adds	r3, r7, r1
10044b2a:	781b      	ldrb	r3, [r3, #0]
10044b2c:	001a      	movs	r2, r3
10044b2e:	187b      	adds	r3, r7, r1
10044b30:	785b      	ldrb	r3, [r3, #1]
10044b32:	021b      	lsls	r3, r3, #8
10044b34:	431a      	orrs	r2, r3
10044b36:	187b      	adds	r3, r7, r1
10044b38:	789b      	ldrb	r3, [r3, #2]
10044b3a:	041b      	lsls	r3, r3, #16
10044b3c:	431a      	orrs	r2, r3
10044b3e:	187b      	adds	r3, r7, r1
10044b40:	78db      	ldrb	r3, [r3, #3]
10044b42:	061b      	lsls	r3, r3, #24
10044b44:	4313      	orrs	r3, r2
10044b46:	617b      	str	r3, [r7, #20]
	uint32_t Data2 = (event.folder)|(event.track<<8);
10044b48:	187b      	adds	r3, r7, r1
10044b4a:	791b      	ldrb	r3, [r3, #4]
10044b4c:	001a      	movs	r2, r3
10044b4e:	187b      	adds	r3, r7, r1
10044b50:	795b      	ldrb	r3, [r3, #5]
10044b52:	021b      	lsls	r3, r3, #8
10044b54:	4313      	orrs	r3, r2
10044b56:	613b      	str	r3, [r7, #16]
	//this isn't blocking code officer I swear! (this is blocking code)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
10044b58:	4b1e      	ldr	r3, [pc, #120]	@ (10044bd4 <FLASH_AppendSchedule+0xc8>)
10044b5a:	2200      	movs	r2, #0
10044b5c:	5e9b      	ldrsh	r3, [r3, r2]
10044b5e:	4a1e      	ldr	r2, [pc, #120]	@ (10044bd8 <FLASH_AppendSchedule+0xcc>)
10044b60:	4694      	mov	ip, r2
10044b62:	4463      	add	r3, ip
10044b64:	00db      	lsls	r3, r3, #3
10044b66:	0019      	movs	r1, r3
10044b68:	697b      	ldr	r3, [r7, #20]
10044b6a:	001a      	movs	r2, r3
10044b6c:	2000      	movs	r0, #0
10044b6e:	f003 fa4f 	bl	10048010 <HAL_FLASH_Program>
10044b72:	1e03      	subs	r3, r0, #0
10044b74:	d001      	beq.n	10044b7a <FLASH_AppendSchedule+0x6e>
		return 0;
10044b76:	2300      	movs	r3, #0
10044b78:	e026      	b.n	10044bc8 <FLASH_AppendSchedule+0xbc>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
10044b7a:	4b16      	ldr	r3, [pc, #88]	@ (10044bd4 <FLASH_AppendSchedule+0xc8>)
10044b7c:	2200      	movs	r2, #0
10044b7e:	5e9b      	ldrsh	r3, [r3, r2]
10044b80:	4a15      	ldr	r2, [pc, #84]	@ (10044bd8 <FLASH_AppendSchedule+0xcc>)
10044b82:	4694      	mov	ip, r2
10044b84:	4463      	add	r3, ip
10044b86:	00db      	lsls	r3, r3, #3
10044b88:	3304      	adds	r3, #4
10044b8a:	0019      	movs	r1, r3
10044b8c:	693b      	ldr	r3, [r7, #16]
10044b8e:	001a      	movs	r2, r3
10044b90:	2000      	movs	r0, #0
10044b92:	f003 fa3d 	bl	10048010 <HAL_FLASH_Program>
10044b96:	1e03      	subs	r3, r0, #0
10044b98:	d001      	beq.n	10044b9e <FLASH_AppendSchedule+0x92>
		return 0;
10044b9a:	2300      	movs	r3, #0
10044b9c:	e014      	b.n	10044bc8 <FLASH_AppendSchedule+0xbc>
	}
	ScheduleSize++;
10044b9e:	4b0d      	ldr	r3, [pc, #52]	@ (10044bd4 <FLASH_AppendSchedule+0xc8>)
10044ba0:	2200      	movs	r2, #0
10044ba2:	5e9b      	ldrsh	r3, [r3, r2]
10044ba4:	b29b      	uxth	r3, r3
10044ba6:	3301      	adds	r3, #1
10044ba8:	b29b      	uxth	r3, r3
10044baa:	b21a      	sxth	r2, r3
10044bac:	4b09      	ldr	r3, [pc, #36]	@ (10044bd4 <FLASH_AppendSchedule+0xc8>)
10044bae:	801a      	strh	r2, [r3, #0]
	FLASH_ReadSchedule(ScheduleSize-1);
10044bb0:	4b08      	ldr	r3, [pc, #32]	@ (10044bd4 <FLASH_AppendSchedule+0xc8>)
10044bb2:	2200      	movs	r2, #0
10044bb4:	5e9b      	ldrsh	r3, [r3, r2]
10044bb6:	b29b      	uxth	r3, r3
10044bb8:	3b01      	subs	r3, #1
10044bba:	b29a      	uxth	r2, r3
10044bbc:	003b      	movs	r3, r7
10044bbe:	0011      	movs	r1, r2
10044bc0:	0018      	movs	r0, r3
10044bc2:	f000 f81f 	bl	10044c04 <FLASH_ReadSchedule>
	return 1;
10044bc6:	2301      	movs	r3, #1
}
10044bc8:	0018      	movs	r0, r3
10044bca:	46bd      	mov	sp, r7
10044bcc:	b006      	add	sp, #24
10044bce:	bd80      	pop	{r7, pc}
10044bd0:	200003d0 	.word	0x200003d0
10044bd4:	200003cc 	.word	0x200003cc
10044bd8:	0200de00 	.word	0x0200de00

10044bdc <FLASH_GetScheduleSize>:
 * @function: FLASH_GetScheduleSize();
 * @brief: returns the size of the schedule
 * @param: none
 * @return: Schedule size
 */
uint16_t FLASH_GetScheduleSize(){
10044bdc:	b580      	push	{r7, lr}
10044bde:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10044be0:	4b06      	ldr	r3, [pc, #24]	@ (10044bfc <FLASH_GetScheduleSize+0x20>)
10044be2:	781b      	ldrb	r3, [r3, #0]
10044be4:	2b00      	cmp	r3, #0
10044be6:	d101      	bne.n	10044bec <FLASH_GetScheduleSize+0x10>
10044be8:	2300      	movs	r3, #0
10044bea:	e003      	b.n	10044bf4 <FLASH_GetScheduleSize+0x18>
	return ScheduleSize;
10044bec:	4b04      	ldr	r3, [pc, #16]	@ (10044c00 <FLASH_GetScheduleSize+0x24>)
10044bee:	2200      	movs	r2, #0
10044bf0:	5e9b      	ldrsh	r3, [r3, r2]
10044bf2:	b29b      	uxth	r3, r3
}
10044bf4:	0018      	movs	r0, r3
10044bf6:	46bd      	mov	sp, r7
10044bf8:	bd80      	pop	{r7, pc}
10044bfa:	46c0      	nop			@ (mov r8, r8)
10044bfc:	200003d0 	.word	0x200003d0
10044c00:	200003cc 	.word	0x200003cc

10044c04 <FLASH_ReadSchedule>:
 * @function: FLASH_ReadSchedule();
 * @brief: allows reading the schedule that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index
 */
scheduleEvent FLASH_ReadSchedule(uint16_t index){
10044c04:	b590      	push	{r4, r7, lr}
10044c06:	b087      	sub	sp, #28
10044c08:	af00      	add	r7, sp, #0
10044c0a:	6078      	str	r0, [r7, #4]
10044c0c:	000a      	movs	r2, r1
10044c0e:	1cbb      	adds	r3, r7, #2
10044c10:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10044c12:	2410      	movs	r4, #16
10044c14:	193b      	adds	r3, r7, r4
10044c16:	0018      	movs	r0, r3
10044c18:	2306      	movs	r3, #6
10044c1a:	001a      	movs	r2, r3
10044c1c:	2100      	movs	r1, #0
10044c1e:	f023 f917 	bl	10067e50 <memset>
	if(!initialized){return event;}
10044c22:	4b2e      	ldr	r3, [pc, #184]	@ (10044cdc <FLASH_ReadSchedule+0xd8>)
10044c24:	781b      	ldrb	r3, [r3, #0]
10044c26:	2b00      	cmp	r3, #0
10044c28:	d108      	bne.n	10044c3c <FLASH_ReadSchedule+0x38>
10044c2a:	687a      	ldr	r2, [r7, #4]
10044c2c:	193b      	adds	r3, r7, r4
10044c2e:	0010      	movs	r0, r2
10044c30:	0019      	movs	r1, r3
10044c32:	2306      	movs	r3, #6
10044c34:	001a      	movs	r2, r3
10044c36:	f023 f980 	bl	10067f3a <memcpy>
10044c3a:	e04b      	b.n	10044cd4 <FLASH_ReadSchedule+0xd0>
	if(index >= 0 && index < ScheduleSize){
10044c3c:	1cbb      	adds	r3, r7, #2
10044c3e:	881b      	ldrh	r3, [r3, #0]
10044c40:	4a27      	ldr	r2, [pc, #156]	@ (10044ce0 <FLASH_ReadSchedule+0xdc>)
10044c42:	2100      	movs	r1, #0
10044c44:	5e52      	ldrsh	r2, [r2, r1]
10044c46:	4293      	cmp	r3, r2
10044c48:	da3b      	bge.n	10044cc2 <FLASH_ReadSchedule+0xbe>
		event.month = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE));
10044c4a:	1cbb      	adds	r3, r7, #2
10044c4c:	881b      	ldrh	r3, [r3, #0]
10044c4e:	4a25      	ldr	r2, [pc, #148]	@ (10044ce4 <FLASH_ReadSchedule+0xe0>)
10044c50:	4694      	mov	ip, r2
10044c52:	4463      	add	r3, ip
10044c54:	00db      	lsls	r3, r3, #3
10044c56:	781a      	ldrb	r2, [r3, #0]
10044c58:	2110      	movs	r1, #16
10044c5a:	187b      	adds	r3, r7, r1
10044c5c:	701a      	strb	r2, [r3, #0]
		event.day = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+1));
10044c5e:	1cbb      	adds	r3, r7, #2
10044c60:	881b      	ldrh	r3, [r3, #0]
10044c62:	4a20      	ldr	r2, [pc, #128]	@ (10044ce4 <FLASH_ReadSchedule+0xe0>)
10044c64:	4694      	mov	ip, r2
10044c66:	4463      	add	r3, ip
10044c68:	00db      	lsls	r3, r3, #3
10044c6a:	3301      	adds	r3, #1
10044c6c:	781a      	ldrb	r2, [r3, #0]
10044c6e:	187b      	adds	r3, r7, r1
10044c70:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+2));
10044c72:	1cbb      	adds	r3, r7, #2
10044c74:	881b      	ldrh	r3, [r3, #0]
10044c76:	4a1b      	ldr	r2, [pc, #108]	@ (10044ce4 <FLASH_ReadSchedule+0xe0>)
10044c78:	4694      	mov	ip, r2
10044c7a:	4463      	add	r3, ip
10044c7c:	00db      	lsls	r3, r3, #3
10044c7e:	3302      	adds	r3, #2
10044c80:	781a      	ldrb	r2, [r3, #0]
10044c82:	187b      	adds	r3, r7, r1
10044c84:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+3));
10044c86:	1cbb      	adds	r3, r7, #2
10044c88:	881b      	ldrh	r3, [r3, #0]
10044c8a:	4a16      	ldr	r2, [pc, #88]	@ (10044ce4 <FLASH_ReadSchedule+0xe0>)
10044c8c:	4694      	mov	ip, r2
10044c8e:	4463      	add	r3, ip
10044c90:	00db      	lsls	r3, r3, #3
10044c92:	3303      	adds	r3, #3
10044c94:	781a      	ldrb	r2, [r3, #0]
10044c96:	187b      	adds	r3, r7, r1
10044c98:	70da      	strb	r2, [r3, #3]
		event.folder = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+4));
10044c9a:	1cbb      	adds	r3, r7, #2
10044c9c:	881b      	ldrh	r3, [r3, #0]
10044c9e:	4a11      	ldr	r2, [pc, #68]	@ (10044ce4 <FLASH_ReadSchedule+0xe0>)
10044ca0:	4694      	mov	ip, r2
10044ca2:	4463      	add	r3, ip
10044ca4:	00db      	lsls	r3, r3, #3
10044ca6:	3304      	adds	r3, #4
10044ca8:	781a      	ldrb	r2, [r3, #0]
10044caa:	187b      	adds	r3, r7, r1
10044cac:	711a      	strb	r2, [r3, #4]
		event.track = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+5));
10044cae:	1cbb      	adds	r3, r7, #2
10044cb0:	881b      	ldrh	r3, [r3, #0]
10044cb2:	4a0c      	ldr	r2, [pc, #48]	@ (10044ce4 <FLASH_ReadSchedule+0xe0>)
10044cb4:	4694      	mov	ip, r2
10044cb6:	4463      	add	r3, ip
10044cb8:	00db      	lsls	r3, r3, #3
10044cba:	3305      	adds	r3, #5
10044cbc:	781a      	ldrb	r2, [r3, #0]
10044cbe:	187b      	adds	r3, r7, r1
10044cc0:	715a      	strb	r2, [r3, #5]

	}
	return event;
10044cc2:	687a      	ldr	r2, [r7, #4]
10044cc4:	2310      	movs	r3, #16
10044cc6:	18fb      	adds	r3, r7, r3
10044cc8:	0010      	movs	r0, r2
10044cca:	0019      	movs	r1, r3
10044ccc:	2306      	movs	r3, #6
10044cce:	001a      	movs	r2, r3
10044cd0:	f023 f933 	bl	10067f3a <memcpy>
}
10044cd4:	6878      	ldr	r0, [r7, #4]
10044cd6:	46bd      	mov	sp, r7
10044cd8:	b007      	add	sp, #28
10044cda:	bd90      	pop	{r4, r7, pc}
10044cdc:	200003d0 	.word	0x200003d0
10044ce0:	200003cc 	.word	0x200003cc
10044ce4:	0200de00 	.word	0x0200de00

10044ce8 <FLASH_ClearSchedule>:
 * @function: FLASH_ClearSchedule();
 * @brief: Clears all Schedule entries
 * @param: none
 * @return: success status
 */
uint8_t FLASH_ClearSchedule(){
10044ce8:	b5b0      	push	{r4, r5, r7, lr}
10044cea:	b086      	sub	sp, #24
10044cec:	af00      	add	r7, sp, #0
	ScheduleSize = 0;
10044cee:	4b10      	ldr	r3, [pc, #64]	@ (10044d30 <FLASH_ClearSchedule+0x48>)
10044cf0:	2200      	movs	r2, #0
10044cf2:	801a      	strh	r2, [r3, #0]
	FLASH_EraseInitTypeDef erase;
	erase.Page = SCHEDULEPAGE;
10044cf4:	2108      	movs	r1, #8
10044cf6:	187b      	adds	r3, r7, r1
10044cf8:	225e      	movs	r2, #94	@ 0x5e
10044cfa:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10044cfc:	187b      	adds	r3, r7, r1
10044cfe:	2201      	movs	r2, #1
10044d00:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
10044d02:	187b      	adds	r3, r7, r1
10044d04:	2200      	movs	r2, #0
10044d06:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&erase, &faultypage);
10044d08:	2517      	movs	r5, #23
10044d0a:	197c      	adds	r4, r7, r5
10044d0c:	1d3a      	adds	r2, r7, #4
10044d0e:	187b      	adds	r3, r7, r1
10044d10:	0011      	movs	r1, r2
10044d12:	0018      	movs	r0, r3
10044d14:	f003 fa56 	bl	100481c4 <HAL_FLASHEx_Erase>
10044d18:	0003      	movs	r3, r0
10044d1a:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
10044d1c:	197b      	adds	r3, r7, r5
10044d1e:	781b      	ldrb	r3, [r3, #0]
10044d20:	425a      	negs	r2, r3
10044d22:	4153      	adcs	r3, r2
10044d24:	b2db      	uxtb	r3, r3
}
10044d26:	0018      	movs	r0, r3
10044d28:	46bd      	mov	sp, r7
10044d2a:	b006      	add	sp, #24
10044d2c:	bdb0      	pop	{r4, r5, r7, pc}
10044d2e:	46c0      	nop			@ (mov r8, r8)
10044d30:	200003cc 	.word	0x200003cc

10044d34 <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10044d34:	b580      	push	{r7, lr}
10044d36:	b084      	sub	sp, #16
10044d38:	af00      	add	r7, sp, #0
10044d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10044d3c:	4b07      	ldr	r3, [pc, #28]	@ (10044d5c <LL_AHB1_GRP1_EnableClock+0x28>)
10044d3e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10044d40:	4b06      	ldr	r3, [pc, #24]	@ (10044d5c <LL_AHB1_GRP1_EnableClock+0x28>)
10044d42:	687a      	ldr	r2, [r7, #4]
10044d44:	430a      	orrs	r2, r1
10044d46:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10044d48:	4b04      	ldr	r3, [pc, #16]	@ (10044d5c <LL_AHB1_GRP1_EnableClock+0x28>)
10044d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10044d4c:	687a      	ldr	r2, [r7, #4]
10044d4e:	4013      	ands	r3, r2
10044d50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10044d52:	68fb      	ldr	r3, [r7, #12]
}
10044d54:	46c0      	nop			@ (mov r8, r8)
10044d56:	46bd      	mov	sp, r7
10044d58:	b004      	add	sp, #16
10044d5a:	bd80      	pop	{r7, pc}
10044d5c:	48400000 	.word	0x48400000

10044d60 <GPIO_Init>:
 * @function: GPIO_Init()
 * @brief: initialized GPIO pins to receive 6 external buttons
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int GPIO_Init(){
10044d60:	b580      	push	{r7, lr}
10044d62:	b086      	sub	sp, #24
10044d64:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10044d66:	4b1d      	ldr	r3, [pc, #116]	@ (10044ddc <GPIO_Init+0x7c>)
10044d68:	781b      	ldrb	r3, [r3, #0]
10044d6a:	2b00      	cmp	r3, #0
10044d6c:	d001      	beq.n	10044d72 <GPIO_Init+0x12>
10044d6e:	2301      	movs	r3, #1
10044d70:	e030      	b.n	10044dd4 <GPIO_Init+0x74>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
10044d72:	1d3b      	adds	r3, r7, #4
10044d74:	0018      	movs	r0, r3
10044d76:	2314      	movs	r3, #20
10044d78:	001a      	movs	r2, r3
10044d7a:	2100      	movs	r1, #0
10044d7c:	f023 f868 	bl	10067e50 <memset>

	//GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
10044d80:	2008      	movs	r0, #8
10044d82:	f7ff ffd7 	bl	10044d34 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
10044d86:	2004      	movs	r0, #4
10044d88:	f7ff ffd4 	bl	10044d34 <LL_AHB1_GRP1_EnableClock>


	//Configure GPIO pins on port A
	GPIO_InitStruct.Pin = BUTTON_1_PIN | BUTTON_5_PIN | BUTTON_6_PIN ;
10044d8c:	1d3b      	adds	r3, r7, #4
10044d8e:	22b0      	movs	r2, #176	@ 0xb0
10044d90:	0112      	lsls	r2, r2, #4
10044d92:	601a      	str	r2, [r3, #0]
#ifndef USEDEBUG
//	GPIO_InitStruct.Pin |= BUTTON_2_PIN | BUTTON_3_PIN;//on a separate line to easily disable to allow the debugger to run
#endif
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10044d94:	1d3b      	adds	r3, r7, #4
10044d96:	2200      	movs	r2, #0
10044d98:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10044d9a:	1d3b      	adds	r3, r7, #4
10044d9c:	2200      	movs	r2, #0
10044d9e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10044da0:	1d3a      	adds	r2, r7, #4
10044da2:	2390      	movs	r3, #144	@ 0x90
10044da4:	05db      	lsls	r3, r3, #23
10044da6:	0011      	movs	r1, r2
10044da8:	0018      	movs	r0, r3
10044daa:	f003 fa8b 	bl	100482c4 <HAL_GPIO_Init>

	//Configure GPIO pins : PB15 PB13
	GPIO_InitStruct.Pin = BUTTON_4_PIN;
10044dae:	1d3b      	adds	r3, r7, #4
10044db0:	2210      	movs	r2, #16
10044db2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10044db4:	1d3b      	adds	r3, r7, #4
10044db6:	2200      	movs	r2, #0
10044db8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10044dba:	1d3b      	adds	r3, r7, #4
10044dbc:	2200      	movs	r2, #0
10044dbe:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10044dc0:	1d3b      	adds	r3, r7, #4
10044dc2:	4a07      	ldr	r2, [pc, #28]	@ (10044de0 <GPIO_Init+0x80>)
10044dc4:	0019      	movs	r1, r3
10044dc6:	0010      	movs	r0, r2
10044dc8:	f003 fa7c 	bl	100482c4 <HAL_GPIO_Init>

	initialized = 1;
10044dcc:	4b03      	ldr	r3, [pc, #12]	@ (10044ddc <GPIO_Init+0x7c>)
10044dce:	2201      	movs	r2, #1
10044dd0:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
10044dd2:	2301      	movs	r3, #1
}
10044dd4:	0018      	movs	r0, r3
10044dd6:	46bd      	mov	sp, r7
10044dd8:	b006      	add	sp, #24
10044dda:	bd80      	pop	{r7, pc}
10044ddc:	200003d1 	.word	0x200003d1
10044de0:	48100000 	.word	0x48100000

10044de4 <GPIO_ReadButtons>:
 * @Function: GPIO_ReadButtons
 * @Brief: Allows an easy way to read the external button states
 * @param: none
 * @return: An 8 bit integer where the LSB is button 0, and the 6th bit is button 5
 */
uint8_t GPIO_ReadButtons(void){
10044de4:	b5b0      	push	{r4, r5, r7, lr}
10044de6:	af00      	add	r7, sp, #0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
10044de8:	2380      	movs	r3, #128	@ 0x80
10044dea:	011a      	lsls	r2, r3, #4
10044dec:	2390      	movs	r3, #144	@ 0x90
10044dee:	05db      	lsls	r3, r3, #23
10044df0:	0011      	movs	r1, r2
10044df2:	0018      	movs	r0, r3
10044df4:	f003 fcee 	bl	100487d4 <HAL_GPIO_ReadPin>
10044df8:	0003      	movs	r3, r0
10044dfa:	b25b      	sxtb	r3, r3
10044dfc:	015b      	lsls	r3, r3, #5
10044dfe:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
10044e00:	2380      	movs	r3, #128	@ 0x80
10044e02:	009a      	lsls	r2, r3, #2
10044e04:	2390      	movs	r3, #144	@ 0x90
10044e06:	05db      	lsls	r3, r3, #23
10044e08:	0011      	movs	r1, r2
10044e0a:	0018      	movs	r0, r3
10044e0c:	f003 fce2 	bl	100487d4 <HAL_GPIO_ReadPin>
10044e10:	0003      	movs	r3, r0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
10044e12:	b25b      	sxtb	r3, r3
10044e14:	011b      	lsls	r3, r3, #4
10044e16:	b25b      	sxtb	r3, r3
10044e18:	4323      	orrs	r3, r4
10044e1a:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
10044e1c:	4b19      	ldr	r3, [pc, #100]	@ (10044e84 <GPIO_ReadButtons+0xa0>)
10044e1e:	2110      	movs	r1, #16
10044e20:	0018      	movs	r0, r3
10044e22:	f003 fcd7 	bl	100487d4 <HAL_GPIO_ReadPin>
10044e26:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
10044e28:	b25b      	sxtb	r3, r3
10044e2a:	00db      	lsls	r3, r3, #3
10044e2c:	b25b      	sxtb	r3, r3
10044e2e:	4323      	orrs	r3, r4
10044e30:	b25c      	sxtb	r4, r3
#ifndef USEDEBUG
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
10044e32:	2390      	movs	r3, #144	@ 0x90
10044e34:	05db      	lsls	r3, r3, #23
10044e36:	2108      	movs	r1, #8
10044e38:	0018      	movs	r0, r3
10044e3a:	f003 fccb 	bl	100487d4 <HAL_GPIO_ReadPin>
10044e3e:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
10044e40:	b25b      	sxtb	r3, r3
10044e42:	009b      	lsls	r3, r3, #2
10044e44:	b25b      	sxtb	r3, r3
10044e46:	4323      	orrs	r3, r4
10044e48:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
10044e4a:	2390      	movs	r3, #144	@ 0x90
10044e4c:	05db      	lsls	r3, r3, #23
10044e4e:	2104      	movs	r1, #4
10044e50:	0018      	movs	r0, r3
10044e52:	f003 fcbf 	bl	100487d4 <HAL_GPIO_ReadPin>
10044e56:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
10044e58:	b25b      	sxtb	r3, r3
10044e5a:	18db      	adds	r3, r3, r3
10044e5c:	b25b      	sxtb	r3, r3
10044e5e:	4323      	orrs	r3, r4
10044e60:	b25c      	sxtb	r4, r3
#else
			(1<<2)|
			(1<<1)|
#endif
			(HAL_GPIO_ReadPin(BUTTON_1) << 0));
10044e62:	2380      	movs	r3, #128	@ 0x80
10044e64:	005a      	lsls	r2, r3, #1
10044e66:	2390      	movs	r3, #144	@ 0x90
10044e68:	05db      	lsls	r3, r3, #23
10044e6a:	0011      	movs	r1, r2
10044e6c:	0018      	movs	r0, r3
10044e6e:	f003 fcb1 	bl	100487d4 <HAL_GPIO_ReadPin>
10044e72:	0003      	movs	r3, r0
10044e74:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
10044e76:	4323      	orrs	r3, r4
10044e78:	b25b      	sxtb	r3, r3
10044e7a:	b2db      	uxtb	r3, r3
}
10044e7c:	0018      	movs	r0, r3
10044e7e:	46bd      	mov	sp, r7
10044e80:	bdb0      	pop	{r4, r5, r7, pc}
10044e82:	46c0      	nop			@ (mov r8, r8)
10044e84:	48100000 	.word	0x48100000

10044e88 <I2CUARTtoI2C>:
 * @brief: if control is with USART, swaps control from the USART to I2C
 * @brief: If the module does swap the pin, a delay is added to insure the pin is initialized before leaving
 * @param: delay - a boolean value that indicates if the function should delay because the pin is used immediately after
 * @return: Init Status, whether the operation failed or succeeded
 */
void I2CUARTtoI2C(uint8_t delay){
10044e88:	b590      	push	{r4, r7, lr}
10044e8a:	b085      	sub	sp, #20
10044e8c:	af00      	add	r7, sp, #0
10044e8e:	0002      	movs	r2, r0
10044e90:	1dfb      	adds	r3, r7, #7
10044e92:	701a      	strb	r2, [r3, #0]
	if(PORTAPIN1.Alternate != GPIO_AF0_I2C1){
10044e94:	4b22      	ldr	r3, [pc, #136]	@ (10044f20 <I2CUARTtoI2C+0x98>)
10044e96:	691b      	ldr	r3, [r3, #16]
10044e98:	2b00      	cmp	r3, #0
10044e9a:	d03d      	beq.n	10044f18 <I2CUARTtoI2C+0x90>
		 hi2c1.Lock = HAL_UNLOCKED;
10044e9c:	4b21      	ldr	r3, [pc, #132]	@ (10044f24 <I2CUARTtoI2C+0x9c>)
10044e9e:	2240      	movs	r2, #64	@ 0x40
10044ea0:	2100      	movs	r1, #0
10044ea2:	5499      	strb	r1, [r3, r2]
		 hi2c1.State = HAL_I2C_STATE_READY;
10044ea4:	4b1f      	ldr	r3, [pc, #124]	@ (10044f24 <I2CUARTtoI2C+0x9c>)
10044ea6:	2241      	movs	r2, #65	@ 0x41
10044ea8:	2120      	movs	r1, #32
10044eaa:	5499      	strb	r1, [r3, r2]
		husart1.Instance->CR1 &= ~0x00000008;//disable the USART Transmit
10044eac:	4b1e      	ldr	r3, [pc, #120]	@ (10044f28 <I2CUARTtoI2C+0xa0>)
10044eae:	681b      	ldr	r3, [r3, #0]
10044eb0:	681a      	ldr	r2, [r3, #0]
10044eb2:	4b1d      	ldr	r3, [pc, #116]	@ (10044f28 <I2CUARTtoI2C+0xa0>)
10044eb4:	681b      	ldr	r3, [r3, #0]
10044eb6:	2108      	movs	r1, #8
10044eb8:	438a      	bics	r2, r1
10044eba:	601a      	str	r2, [r3, #0]
//		BSP_LED_Off(LED_BLUE);
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
10044ebc:	2390      	movs	r3, #144	@ 0x90
10044ebe:	05db      	lsls	r3, r3, #23
10044ec0:	2102      	movs	r1, #2
10044ec2:	0018      	movs	r0, r3
10044ec4:	f003 fba3 	bl	1004860e <HAL_GPIO_DeInit>

		PORTAPIN1.Mode = GPIO_MODE_AF_OD;
10044ec8:	4b15      	ldr	r3, [pc, #84]	@ (10044f20 <I2CUARTtoI2C+0x98>)
10044eca:	2212      	movs	r2, #18
10044ecc:	605a      	str	r2, [r3, #4]
		PORTAPIN1.Alternate = GPIO_AF0_I2C1;
10044ece:	4b14      	ldr	r3, [pc, #80]	@ (10044f20 <I2CUARTtoI2C+0x98>)
10044ed0:	2200      	movs	r2, #0
10044ed2:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &PORTAPIN1);
10044ed4:	4a12      	ldr	r2, [pc, #72]	@ (10044f20 <I2CUARTtoI2C+0x98>)
10044ed6:	2390      	movs	r3, #144	@ 0x90
10044ed8:	05db      	lsls	r3, r3, #23
10044eda:	0011      	movs	r1, r2
10044edc:	0018      	movs	r0, r3
10044ede:	f003 f9f1 	bl	100482c4 <HAL_GPIO_Init>

		HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
10044ee2:	2101      	movs	r1, #1
10044ee4:	2000      	movs	r0, #0
10044ee6:	f005 fcbd 	bl	1004a864 <HAL_PWREx_DisableGPIOPullUp>

		HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
10044eea:	2101      	movs	r1, #1
10044eec:	2000      	movs	r0, #0
10044eee:	f005 fce7 	bl	1004a8c0 <HAL_PWREx_DisableGPIOPullDown>
		if(delay){
10044ef2:	1dfb      	adds	r3, r7, #7
10044ef4:	781b      	ldrb	r3, [r3, #0]
10044ef6:	2b00      	cmp	r3, #0
10044ef8:	d00c      	beq.n	10044f14 <I2CUARTtoI2C+0x8c>
			uint32_t start = TIMERS_GetMilliSeconds();
10044efa:	f001 fd73 	bl	100469e4 <TIMERS_GetMilliSeconds>
10044efe:	0003      	movs	r3, r0
10044f00:	60fb      	str	r3, [r7, #12]
			while(start+20 > TIMERS_GetMilliSeconds());
10044f02:	46c0      	nop			@ (mov r8, r8)
10044f04:	68fb      	ldr	r3, [r7, #12]
10044f06:	3314      	adds	r3, #20
10044f08:	001c      	movs	r4, r3
10044f0a:	f001 fd6b 	bl	100469e4 <TIMERS_GetMilliSeconds>
10044f0e:	0003      	movs	r3, r0
10044f10:	429c      	cmp	r4, r3
10044f12:	d8f7      	bhi.n	10044f04 <I2CUARTtoI2C+0x7c>
		}

		I2C_Flushbuffer();
10044f14:	f000 fa78 	bl	10045408 <I2C_Flushbuffer>
	}
}
10044f18:	46c0      	nop			@ (mov r8, r8)
10044f1a:	46bd      	mov	sp, r7
10044f1c:	b005      	add	sp, #20
10044f1e:	bd90      	pop	{r4, r7, pc}
10044f20:	20002610 	.word	0x20002610
10044f24:	20002624 	.word	0x20002624
10044f28:	2000267c 	.word	0x2000267c

10044f2c <I2C_Post>:

//----------------------------------------Private functions--------------------------------------
#ifdef I2CTESTHARNESS
void fakeposter(Event_t event);
#endif
HAL_StatusTypeDef I2C_Post(MemAdd_t* post){
10044f2c:	b590      	push	{r4, r7, lr}
10044f2e:	b085      	sub	sp, #20
10044f30:	af02      	add	r7, sp, #8
10044f32:	6078      	str	r0, [r7, #4]
	if(post->posterindex == 0){
10044f34:	687b      	ldr	r3, [r7, #4]
10044f36:	78db      	ldrb	r3, [r3, #3]
10044f38:	2b00      	cmp	r3, #0
10044f3a:	d112      	bne.n	10044f62 <I2C_Post+0x36>
		return HAL_I2C_Mem_Write_IT(&hi2c1,
									post->targetadr<<1,
10044f3c:	687b      	ldr	r3, [r7, #4]
10044f3e:	781b      	ldrb	r3, [r3, #0]
		return HAL_I2C_Mem_Write_IT(&hi2c1,
10044f40:	18db      	adds	r3, r3, r3
10044f42:	b299      	uxth	r1, r3
									post->registeradr,
10044f44:	687b      	ldr	r3, [r7, #4]
10044f46:	785b      	ldrb	r3, [r3, #1]
		return HAL_I2C_Mem_Write_IT(&hi2c1,
10044f48:	001c      	movs	r4, r3
10044f4a:	687b      	ldr	r3, [r7, #4]
10044f4c:	3302      	adds	r3, #2
10044f4e:	4810      	ldr	r0, [pc, #64]	@ (10044f90 <I2C_Post+0x64>)
10044f50:	2201      	movs	r2, #1
10044f52:	9201      	str	r2, [sp, #4]
10044f54:	9300      	str	r3, [sp, #0]
10044f56:	2301      	movs	r3, #1
10044f58:	0022      	movs	r2, r4
10044f5a:	f003 fd65 	bl	10048a28 <HAL_I2C_Mem_Write_IT>
10044f5e:	0003      	movs	r3, r0
10044f60:	e011      	b.n	10044f86 <I2C_Post+0x5a>
									I2C_MEMADD_SIZE_8BIT,
									&(post->data),
									1);
	} else {
		return HAL_I2C_Mem_Read_IT(&hi2c1,
								   post->targetadr<<1,
10044f62:	687b      	ldr	r3, [r7, #4]
10044f64:	781b      	ldrb	r3, [r3, #0]
		return HAL_I2C_Mem_Read_IT(&hi2c1,
10044f66:	18db      	adds	r3, r3, r3
10044f68:	b299      	uxth	r1, r3
								   post->registeradr,
10044f6a:	687b      	ldr	r3, [r7, #4]
10044f6c:	785b      	ldrb	r3, [r3, #1]
		return HAL_I2C_Mem_Read_IT(&hi2c1,
10044f6e:	001c      	movs	r4, r3
10044f70:	687b      	ldr	r3, [r7, #4]
10044f72:	3302      	adds	r3, #2
10044f74:	4806      	ldr	r0, [pc, #24]	@ (10044f90 <I2C_Post+0x64>)
10044f76:	2201      	movs	r2, #1
10044f78:	9201      	str	r2, [sp, #4]
10044f7a:	9300      	str	r3, [sp, #0]
10044f7c:	2301      	movs	r3, #1
10044f7e:	0022      	movs	r2, r4
10044f80:	f003 fdf4 	bl	10048b6c <HAL_I2C_Mem_Read_IT>
10044f84:	0003      	movs	r3, r0
								   I2C_MEMADD_SIZE_8BIT,
								   &(post->data),
								   1);

	}
}
10044f86:	0018      	movs	r0, r3
10044f88:	46bd      	mov	sp, r7
10044f8a:	b003      	add	sp, #12
10044f8c:	bd90      	pop	{r4, r7, pc}
10044f8e:	46c0      	nop			@ (mov r8, r8)
10044f90:	20002624 	.word	0x20002624

10044f94 <I2C_Enqueue>:

HAL_StatusTypeDef I2C_Enqueue(MemAdd_t Post){
10044f94:	b590      	push	{r4, r7, lr}
10044f96:	b085      	sub	sp, #20
10044f98:	af00      	add	r7, sp, #0
10044f9a:	1d3b      	adds	r3, r7, #4
10044f9c:	6018      	str	r0, [r3, #0]
	if(!initialized){return HAL_ERROR;}
10044f9e:	4b49      	ldr	r3, [pc, #292]	@ (100450c4 <I2C_Enqueue+0x130>)
10044fa0:	781b      	ldrb	r3, [r3, #0]
10044fa2:	2b00      	cmp	r3, #0
10044fa4:	d101      	bne.n	10044faa <I2C_Enqueue+0x16>
10044fa6:	2301      	movs	r3, #1
10044fa8:	e087      	b.n	100450ba <I2C_Enqueue+0x126>
		HAL_StatusTypeDef status = HAL_OK;
10044faa:	230f      	movs	r3, #15
10044fac:	18fb      	adds	r3, r7, r3
10044fae:	2200      	movs	r2, #0
10044fb0:	701a      	strb	r2, [r3, #0]

		uint32_t start = TIMERS_GetMilliSeconds();
10044fb2:	f001 fd17 	bl	100469e4 <TIMERS_GetMilliSeconds>
10044fb6:	0003      	movs	r3, r0
10044fb8:	60bb      	str	r3, [r7, #8]
		while((MemBuff.tail == ((MemBuff.head+1)%CIRCBUFFERSIZE)) && (((start + I2CBUFFERTIMEOUT) > TIMERS_GetMilliSeconds())));
10044fba:	46c0      	nop			@ (mov r8, r8)
10044fbc:	4b42      	ldr	r3, [pc, #264]	@ (100450c8 <I2C_Enqueue+0x134>)
10044fbe:	4a43      	ldr	r2, [pc, #268]	@ (100450cc <I2C_Enqueue+0x138>)
10044fc0:	5a9b      	ldrh	r3, [r3, r2]
10044fc2:	001c      	movs	r4, r3
10044fc4:	4a40      	ldr	r2, [pc, #256]	@ (100450c8 <I2C_Enqueue+0x134>)
10044fc6:	23c0      	movs	r3, #192	@ 0xc0
10044fc8:	015b      	lsls	r3, r3, #5
10044fca:	5ad3      	ldrh	r3, [r2, r3]
10044fcc:	3301      	adds	r3, #1
10044fce:	22c0      	movs	r2, #192	@ 0xc0
10044fd0:	00d1      	lsls	r1, r2, #3
10044fd2:	0018      	movs	r0, r3
10044fd4:	f7fb faa4 	bl	10040520 <__aeabi_idivmod>
10044fd8:	000b      	movs	r3, r1
10044fda:	429c      	cmp	r4, r3
10044fdc:	d108      	bne.n	10044ff0 <I2C_Enqueue+0x5c>
10044fde:	68bb      	ldr	r3, [r7, #8]
10044fe0:	22fa      	movs	r2, #250	@ 0xfa
10044fe2:	0092      	lsls	r2, r2, #2
10044fe4:	189c      	adds	r4, r3, r2
10044fe6:	f001 fcfd 	bl	100469e4 <TIMERS_GetMilliSeconds>
10044fea:	0003      	movs	r3, r0
10044fec:	429c      	cmp	r4, r3
10044fee:	d8e5      	bhi.n	10044fbc <I2C_Enqueue+0x28>
		if(MemBuff.tail == (MemBuff.head+1)%CIRCBUFFERSIZE){
10044ff0:	4b35      	ldr	r3, [pc, #212]	@ (100450c8 <I2C_Enqueue+0x134>)
10044ff2:	4a36      	ldr	r2, [pc, #216]	@ (100450cc <I2C_Enqueue+0x138>)
10044ff4:	5a9b      	ldrh	r3, [r3, r2]
10044ff6:	001c      	movs	r4, r3
10044ff8:	4a33      	ldr	r2, [pc, #204]	@ (100450c8 <I2C_Enqueue+0x134>)
10044ffa:	23c0      	movs	r3, #192	@ 0xc0
10044ffc:	015b      	lsls	r3, r3, #5
10044ffe:	5ad3      	ldrh	r3, [r2, r3]
10045000:	3301      	adds	r3, #1
10045002:	22c0      	movs	r2, #192	@ 0xc0
10045004:	00d1      	lsls	r1, r2, #3
10045006:	0018      	movs	r0, r3
10045008:	f7fb fa8a 	bl	10040520 <__aeabi_idivmod>
1004500c:	000b      	movs	r3, r1
1004500e:	429c      	cmp	r4, r3
10045010:	d104      	bne.n	1004501c <I2C_Enqueue+0x88>
			BSP_LED_On(LED_RED);//indicate a fatal buffer overflow
10045012:	2002      	movs	r0, #2
10045014:	f002 fdd2 	bl	10047bbc <BSP_LED_On>
			return HAL_ERROR;
10045018:	2301      	movs	r3, #1
1004501a:	e04e      	b.n	100450ba <I2C_Enqueue+0x126>
		}
		BSP_LED_Off(LED_RED);
1004501c:	2002      	movs	r0, #2
1004501e:	f002 fdeb 	bl	10047bf8 <BSP_LED_Off>
		//place the transmit request into the buffer
		//The I2C-UARTmanager will disable the module but leave the state as ready, the data will still be loaded into the register
		//The module will not transmit until arbitration is complete


		MemBuff.data[MemBuff.head] = Post;
10045022:	4a29      	ldr	r2, [pc, #164]	@ (100450c8 <I2C_Enqueue+0x134>)
10045024:	23c0      	movs	r3, #192	@ 0xc0
10045026:	015b      	lsls	r3, r3, #5
10045028:	5ad3      	ldrh	r3, [r2, r3]
1004502a:	4a27      	ldr	r2, [pc, #156]	@ (100450c8 <I2C_Enqueue+0x134>)
1004502c:	0099      	lsls	r1, r3, #2
1004502e:	1d3b      	adds	r3, r7, #4
10045030:	681b      	ldr	r3, [r3, #0]
10045032:	508b      	str	r3, [r1, r2]
		MemBuff.head++;
10045034:	4a24      	ldr	r2, [pc, #144]	@ (100450c8 <I2C_Enqueue+0x134>)
10045036:	23c0      	movs	r3, #192	@ 0xc0
10045038:	015b      	lsls	r3, r3, #5
1004503a:	5ad3      	ldrh	r3, [r2, r3]
1004503c:	3301      	adds	r3, #1
1004503e:	b299      	uxth	r1, r3
10045040:	4a21      	ldr	r2, [pc, #132]	@ (100450c8 <I2C_Enqueue+0x134>)
10045042:	23c0      	movs	r3, #192	@ 0xc0
10045044:	015b      	lsls	r3, r3, #5
10045046:	52d1      	strh	r1, [r2, r3]
		MemBuff.head %= CIRCBUFFERSIZE;
10045048:	4a1f      	ldr	r2, [pc, #124]	@ (100450c8 <I2C_Enqueue+0x134>)
1004504a:	23c0      	movs	r3, #192	@ 0xc0
1004504c:	015b      	lsls	r3, r3, #5
1004504e:	5ad3      	ldrh	r3, [r2, r3]
10045050:	22c0      	movs	r2, #192	@ 0xc0
10045052:	00d1      	lsls	r1, r2, #3
10045054:	0018      	movs	r0, r3
10045056:	f7fb f979 	bl	1004034c <__aeabi_uidivmod>
1004505a:	000b      	movs	r3, r1
1004505c:	b299      	uxth	r1, r3
1004505e:	4a1a      	ldr	r2, [pc, #104]	@ (100450c8 <I2C_Enqueue+0x134>)
10045060:	23c0      	movs	r3, #192	@ 0xc0
10045062:	015b      	lsls	r3, r3, #5
10045064:	52d1      	strh	r1, [r2, r3]
		if((MemBuff.tail+1)%CIRCBUFFERSIZE == MemBuff.head && hi2c1.State == HAL_I2C_STATE_READY){
10045066:	4b18      	ldr	r3, [pc, #96]	@ (100450c8 <I2C_Enqueue+0x134>)
10045068:	4a18      	ldr	r2, [pc, #96]	@ (100450cc <I2C_Enqueue+0x138>)
1004506a:	5a9b      	ldrh	r3, [r3, r2]
1004506c:	3301      	adds	r3, #1
1004506e:	22c0      	movs	r2, #192	@ 0xc0
10045070:	00d1      	lsls	r1, r2, #3
10045072:	0018      	movs	r0, r3
10045074:	f7fb fa54 	bl	10040520 <__aeabi_idivmod>
10045078:	000b      	movs	r3, r1
1004507a:	0019      	movs	r1, r3
1004507c:	4a12      	ldr	r2, [pc, #72]	@ (100450c8 <I2C_Enqueue+0x134>)
1004507e:	23c0      	movs	r3, #192	@ 0xc0
10045080:	015b      	lsls	r3, r3, #5
10045082:	5ad3      	ldrh	r3, [r2, r3]
10045084:	4299      	cmp	r1, r3
10045086:	d115      	bne.n	100450b4 <I2C_Enqueue+0x120>
10045088:	4b11      	ldr	r3, [pc, #68]	@ (100450d0 <I2C_Enqueue+0x13c>)
1004508a:	2241      	movs	r2, #65	@ 0x41
1004508c:	5c9b      	ldrb	r3, [r3, r2]
1004508e:	b2db      	uxtb	r3, r3
10045090:	2b20      	cmp	r3, #32
10045092:	d10f      	bne.n	100450b4 <I2C_Enqueue+0x120>
			I2CUARTtoI2C(1);
10045094:	2001      	movs	r0, #1
10045096:	f7ff fef7 	bl	10044e88 <I2CUARTtoI2C>
			status = I2C_Post(MemBuff.data+MemBuff.tail);
1004509a:	4b0b      	ldr	r3, [pc, #44]	@ (100450c8 <I2C_Enqueue+0x134>)
1004509c:	4a0b      	ldr	r2, [pc, #44]	@ (100450cc <I2C_Enqueue+0x138>)
1004509e:	5a9b      	ldrh	r3, [r3, r2]
100450a0:	009a      	lsls	r2, r3, #2
100450a2:	4b09      	ldr	r3, [pc, #36]	@ (100450c8 <I2C_Enqueue+0x134>)
100450a4:	18d3      	adds	r3, r2, r3
100450a6:	220f      	movs	r2, #15
100450a8:	18bc      	adds	r4, r7, r2
100450aa:	0018      	movs	r0, r3
100450ac:	f7ff ff3e 	bl	10044f2c <I2C_Post>
100450b0:	0003      	movs	r3, r0
100450b2:	7023      	strb	r3, [r4, #0]

		}
		return status;
100450b4:	230f      	movs	r3, #15
100450b6:	18fb      	adds	r3, r7, r3
100450b8:	781b      	ldrb	r3, [r3, #0]
}
100450ba:	0018      	movs	r0, r3
100450bc:	46bd      	mov	sp, r7
100450be:	b005      	add	sp, #20
100450c0:	bd90      	pop	{r4, r7, pc}
100450c2:	46c0      	nop			@ (mov r8, r8)
100450c4:	20001bd8 	.word	0x20001bd8
100450c8:	200003d4 	.word	0x200003d4
100450cc:	00001802 	.word	0x00001802
100450d0:	20002624 	.word	0x20002624

100450d4 <HAL_I2C_MemTxCpltCallback>:
 * @Function: HAL_I2C_MemTxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory transmit operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
100450d4:	b580      	push	{r7, lr}
100450d6:	b082      	sub	sp, #8
100450d8:	af00      	add	r7, sp, #0
100450da:	6078      	str	r0, [r7, #4]
	//operation complete, the data at tail is now out-dated;
	MemBuff.tail++;
100450dc:	4b16      	ldr	r3, [pc, #88]	@ (10045138 <HAL_I2C_MemTxCpltCallback+0x64>)
100450de:	4a17      	ldr	r2, [pc, #92]	@ (1004513c <HAL_I2C_MemTxCpltCallback+0x68>)
100450e0:	5a9b      	ldrh	r3, [r3, r2]
100450e2:	3301      	adds	r3, #1
100450e4:	b299      	uxth	r1, r3
100450e6:	4b14      	ldr	r3, [pc, #80]	@ (10045138 <HAL_I2C_MemTxCpltCallback+0x64>)
100450e8:	4a14      	ldr	r2, [pc, #80]	@ (1004513c <HAL_I2C_MemTxCpltCallback+0x68>)
100450ea:	5299      	strh	r1, [r3, r2]
	MemBuff.tail %= CIRCBUFFERSIZE;
100450ec:	4b12      	ldr	r3, [pc, #72]	@ (10045138 <HAL_I2C_MemTxCpltCallback+0x64>)
100450ee:	4a13      	ldr	r2, [pc, #76]	@ (1004513c <HAL_I2C_MemTxCpltCallback+0x68>)
100450f0:	5a9b      	ldrh	r3, [r3, r2]
100450f2:	22c0      	movs	r2, #192	@ 0xc0
100450f4:	00d1      	lsls	r1, r2, #3
100450f6:	0018      	movs	r0, r3
100450f8:	f7fb f928 	bl	1004034c <__aeabi_uidivmod>
100450fc:	000b      	movs	r3, r1
100450fe:	b299      	uxth	r1, r3
10045100:	4b0d      	ldr	r3, [pc, #52]	@ (10045138 <HAL_I2C_MemTxCpltCallback+0x64>)
10045102:	4a0e      	ldr	r2, [pc, #56]	@ (1004513c <HAL_I2C_MemTxCpltCallback+0x68>)
10045104:	5299      	strh	r1, [r3, r2]
	//if there is more in the buffer
	if(MemBuff.tail != MemBuff.head){
10045106:	4b0c      	ldr	r3, [pc, #48]	@ (10045138 <HAL_I2C_MemTxCpltCallback+0x64>)
10045108:	4a0c      	ldr	r2, [pc, #48]	@ (1004513c <HAL_I2C_MemTxCpltCallback+0x68>)
1004510a:	5a9a      	ldrh	r2, [r3, r2]
1004510c:	490a      	ldr	r1, [pc, #40]	@ (10045138 <HAL_I2C_MemTxCpltCallback+0x64>)
1004510e:	23c0      	movs	r3, #192	@ 0xc0
10045110:	015b      	lsls	r3, r3, #5
10045112:	5acb      	ldrh	r3, [r1, r3]
10045114:	429a      	cmp	r2, r3
10045116:	d00b      	beq.n	10045130 <HAL_I2C_MemTxCpltCallback+0x5c>
		I2CUARTtoI2C(1);
10045118:	2001      	movs	r0, #1
1004511a:	f7ff feb5 	bl	10044e88 <I2CUARTtoI2C>
		I2C_Post(MemBuff.data+MemBuff.tail);
1004511e:	4b06      	ldr	r3, [pc, #24]	@ (10045138 <HAL_I2C_MemTxCpltCallback+0x64>)
10045120:	4a06      	ldr	r2, [pc, #24]	@ (1004513c <HAL_I2C_MemTxCpltCallback+0x68>)
10045122:	5a9b      	ldrh	r3, [r3, r2]
10045124:	009a      	lsls	r2, r3, #2
10045126:	4b04      	ldr	r3, [pc, #16]	@ (10045138 <HAL_I2C_MemTxCpltCallback+0x64>)
10045128:	18d3      	adds	r3, r2, r3
1004512a:	0018      	movs	r0, r3
1004512c:	f7ff fefe 	bl	10044f2c <I2C_Post>

	}
}
10045130:	46c0      	nop			@ (mov r8, r8)
10045132:	46bd      	mov	sp, r7
10045134:	b002      	add	sp, #8
10045136:	bd80      	pop	{r7, pc}
10045138:	200003d4 	.word	0x200003d4
1004513c:	00001802 	.word	0x00001802

10045140 <HAL_I2C_MemRxCpltCallback>:
 * @Function: HAL_I2C_MemRxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory receive operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
10045140:	b580      	push	{r7, lr}
10045142:	b084      	sub	sp, #16
10045144:	af00      	add	r7, sp, #0
10045146:	6078      	str	r0, [r7, #4]

	//use the received data construct and event to post
	Event_t ret = {EVENT_I2C, MemBuff.data[MemBuff.tail].registeradr << 8 | MemBuff.data[MemBuff.tail].data};
10045148:	200c      	movs	r0, #12
1004514a:	183b      	adds	r3, r7, r0
1004514c:	2205      	movs	r2, #5
1004514e:	701a      	strb	r2, [r3, #0]
10045150:	4b2a      	ldr	r3, [pc, #168]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
10045152:	4a2b      	ldr	r2, [pc, #172]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
10045154:	5a9b      	ldrh	r3, [r3, r2]
10045156:	4a29      	ldr	r2, [pc, #164]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
10045158:	009b      	lsls	r3, r3, #2
1004515a:	18d3      	adds	r3, r2, r3
1004515c:	3301      	adds	r3, #1
1004515e:	781b      	ldrb	r3, [r3, #0]
10045160:	b21b      	sxth	r3, r3
10045162:	021b      	lsls	r3, r3, #8
10045164:	b21a      	sxth	r2, r3
10045166:	4b25      	ldr	r3, [pc, #148]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
10045168:	4925      	ldr	r1, [pc, #148]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
1004516a:	5a5b      	ldrh	r3, [r3, r1]
1004516c:	4923      	ldr	r1, [pc, #140]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
1004516e:	009b      	lsls	r3, r3, #2
10045170:	18cb      	adds	r3, r1, r3
10045172:	3302      	adds	r3, #2
10045174:	781b      	ldrb	r3, [r3, #0]
10045176:	b21b      	sxth	r3, r3
10045178:	4313      	orrs	r3, r2
1004517a:	b21b      	sxth	r3, r3
1004517c:	b29a      	uxth	r2, r3
1004517e:	183b      	adds	r3, r7, r0
10045180:	805a      	strh	r2, [r3, #2]
	//post the event to the function given by the poster index

#ifdef I2CTESTHARNESS
	fakeposter(ret);
#else
	PosterList[MemBuff.data[MemBuff.tail].posterindex-1](ret);
10045182:	4b1e      	ldr	r3, [pc, #120]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
10045184:	4a1e      	ldr	r2, [pc, #120]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
10045186:	5a9b      	ldrh	r3, [r3, r2]
10045188:	4a1c      	ldr	r2, [pc, #112]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
1004518a:	009b      	lsls	r3, r3, #2
1004518c:	18d3      	adds	r3, r2, r3
1004518e:	3303      	adds	r3, #3
10045190:	781b      	ldrb	r3, [r3, #0]
10045192:	1e5a      	subs	r2, r3, #1
10045194:	4b1b      	ldr	r3, [pc, #108]	@ (10045204 <HAL_I2C_MemRxCpltCallback+0xc4>)
10045196:	0092      	lsls	r2, r2, #2
10045198:	58d2      	ldr	r2, [r2, r3]
1004519a:	183b      	adds	r3, r7, r0
1004519c:	6818      	ldr	r0, [r3, #0]
1004519e:	4790      	blx	r2
#endif
	//operation complete, the data at tail is now out-dated;
	MemBuff.tail++;
100451a0:	4b16      	ldr	r3, [pc, #88]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
100451a2:	4a17      	ldr	r2, [pc, #92]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
100451a4:	5a9b      	ldrh	r3, [r3, r2]
100451a6:	3301      	adds	r3, #1
100451a8:	b299      	uxth	r1, r3
100451aa:	4b14      	ldr	r3, [pc, #80]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
100451ac:	4a14      	ldr	r2, [pc, #80]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
100451ae:	5299      	strh	r1, [r3, r2]
	MemBuff.tail %= CIRCBUFFERSIZE;
100451b0:	4b12      	ldr	r3, [pc, #72]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
100451b2:	4a13      	ldr	r2, [pc, #76]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
100451b4:	5a9b      	ldrh	r3, [r3, r2]
100451b6:	22c0      	movs	r2, #192	@ 0xc0
100451b8:	00d1      	lsls	r1, r2, #3
100451ba:	0018      	movs	r0, r3
100451bc:	f7fb f8c6 	bl	1004034c <__aeabi_uidivmod>
100451c0:	000b      	movs	r3, r1
100451c2:	b299      	uxth	r1, r3
100451c4:	4b0d      	ldr	r3, [pc, #52]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
100451c6:	4a0e      	ldr	r2, [pc, #56]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
100451c8:	5299      	strh	r1, [r3, r2]
	//if there is more in the buffer
	if(MemBuff.tail != MemBuff.head){
100451ca:	4b0c      	ldr	r3, [pc, #48]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
100451cc:	4a0c      	ldr	r2, [pc, #48]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
100451ce:	5a9a      	ldrh	r2, [r3, r2]
100451d0:	490a      	ldr	r1, [pc, #40]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
100451d2:	23c0      	movs	r3, #192	@ 0xc0
100451d4:	015b      	lsls	r3, r3, #5
100451d6:	5acb      	ldrh	r3, [r1, r3]
100451d8:	429a      	cmp	r2, r3
100451da:	d00b      	beq.n	100451f4 <HAL_I2C_MemRxCpltCallback+0xb4>
		I2CUARTtoI2C(1);
100451dc:	2001      	movs	r0, #1
100451de:	f7ff fe53 	bl	10044e88 <I2CUARTtoI2C>
		I2C_Post(MemBuff.data+MemBuff.tail);
100451e2:	4b06      	ldr	r3, [pc, #24]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
100451e4:	4a06      	ldr	r2, [pc, #24]	@ (10045200 <HAL_I2C_MemRxCpltCallback+0xc0>)
100451e6:	5a9b      	ldrh	r3, [r3, r2]
100451e8:	009a      	lsls	r2, r3, #2
100451ea:	4b04      	ldr	r3, [pc, #16]	@ (100451fc <HAL_I2C_MemRxCpltCallback+0xbc>)
100451ec:	18d3      	adds	r3, r2, r3
100451ee:	0018      	movs	r0, r3
100451f0:	f7ff fe9c 	bl	10044f2c <I2C_Post>

	}
}
100451f4:	46c0      	nop			@ (mov r8, r8)
100451f6:	46bd      	mov	sp, r7
100451f8:	b004      	add	sp, #16
100451fa:	bd80      	pop	{r7, pc}
100451fc:	200003d4 	.word	0x200003d4
10045200:	00001802 	.word	0x00001802
10045204:	20002678 	.word	0x20002678

10045208 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
10045208:	b590      	push	{r4, r7, lr}
1004520a:	b085      	sub	sp, #20
1004520c:	af00      	add	r7, sp, #0
1004520e:	6078      	str	r0, [r7, #4]
	if(hi2c->ErrorCode&HAL_I2C_ERROR_AF){//NACK Error
10045210:	687b      	ldr	r3, [r7, #4]
10045212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10045214:	2204      	movs	r2, #4
10045216:	4013      	ands	r3, r2
10045218:	d021      	beq.n	1004525e <HAL_I2C_ErrorCallback+0x56>
		if(MemBuff.tail != MemBuff.head){
1004521a:	4b13      	ldr	r3, [pc, #76]	@ (10045268 <HAL_I2C_ErrorCallback+0x60>)
1004521c:	4a13      	ldr	r2, [pc, #76]	@ (1004526c <HAL_I2C_ErrorCallback+0x64>)
1004521e:	5a9a      	ldrh	r2, [r3, r2]
10045220:	4911      	ldr	r1, [pc, #68]	@ (10045268 <HAL_I2C_ErrorCallback+0x60>)
10045222:	23c0      	movs	r3, #192	@ 0xc0
10045224:	015b      	lsls	r3, r3, #5
10045226:	5acb      	ldrh	r3, [r1, r3]
10045228:	429a      	cmp	r2, r3
1004522a:	d018      	beq.n	1004525e <HAL_I2C_ErrorCallback+0x56>
			uint32_t start = TIMERS_GetMilliSeconds();
1004522c:	f001 fbda 	bl	100469e4 <TIMERS_GetMilliSeconds>
10045230:	0003      	movs	r3, r0
10045232:	60fb      	str	r3, [r7, #12]
			while(start+10 > TIMERS_GetMilliSeconds());
10045234:	46c0      	nop			@ (mov r8, r8)
10045236:	68fb      	ldr	r3, [r7, #12]
10045238:	330a      	adds	r3, #10
1004523a:	001c      	movs	r4, r3
1004523c:	f001 fbd2 	bl	100469e4 <TIMERS_GetMilliSeconds>
10045240:	0003      	movs	r3, r0
10045242:	429c      	cmp	r4, r3
10045244:	d8f7      	bhi.n	10045236 <HAL_I2C_ErrorCallback+0x2e>
			I2CUARTtoI2C(1);
10045246:	2001      	movs	r0, #1
10045248:	f7ff fe1e 	bl	10044e88 <I2CUARTtoI2C>
			I2C_Post(MemBuff.data+MemBuff.tail);//Repost the same data packet that got NACKed, without moving the tail forward
1004524c:	4b06      	ldr	r3, [pc, #24]	@ (10045268 <HAL_I2C_ErrorCallback+0x60>)
1004524e:	4a07      	ldr	r2, [pc, #28]	@ (1004526c <HAL_I2C_ErrorCallback+0x64>)
10045250:	5a9b      	ldrh	r3, [r3, r2]
10045252:	009a      	lsls	r2, r3, #2
10045254:	4b04      	ldr	r3, [pc, #16]	@ (10045268 <HAL_I2C_ErrorCallback+0x60>)
10045256:	18d3      	adds	r3, r2, r3
10045258:	0018      	movs	r0, r3
1004525a:	f7ff fe67 	bl	10044f2c <I2C_Post>

		}
	}
}
1004525e:	46c0      	nop			@ (mov r8, r8)
10045260:	46bd      	mov	sp, r7
10045262:	b005      	add	sp, #20
10045264:	bd90      	pop	{r4, r7, pc}
10045266:	46c0      	nop			@ (mov r8, r8)
10045268:	200003d4 	.word	0x200003d4
1004526c:	00001802 	.word	0x00001802

10045270 <I2C1_IRQHandler>:
 * @Brief: Overwrites a weak HAL function. handles I2C1 interrupts
 * @param: none
 * @return: none
 */
void I2C1_IRQHandler(void)
{
10045270:	b580      	push	{r7, lr}
10045272:	af00      	add	r7, sp, #0
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
10045274:	4b09      	ldr	r3, [pc, #36]	@ (1004529c <I2C1_IRQHandler+0x2c>)
10045276:	681b      	ldr	r3, [r3, #0]
10045278:	699a      	ldr	r2, [r3, #24]
1004527a:	23e0      	movs	r3, #224	@ 0xe0
1004527c:	00db      	lsls	r3, r3, #3
1004527e:	4013      	ands	r3, r2
10045280:	d004      	beq.n	1004528c <I2C1_IRQHandler+0x1c>
	{
		HAL_I2C_ER_IRQHandler(&hi2c1);//error handler
10045282:	4b06      	ldr	r3, [pc, #24]	@ (1004529c <I2C1_IRQHandler+0x2c>)
10045284:	0018      	movs	r0, r3
10045286:	f003 fd29 	bl	10048cdc <HAL_I2C_ER_IRQHandler>
	}
	else
	{
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
	}
}
1004528a:	e003      	b.n	10045294 <I2C1_IRQHandler+0x24>
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
1004528c:	4b03      	ldr	r3, [pc, #12]	@ (1004529c <I2C1_IRQHandler+0x2c>)
1004528e:	0018      	movs	r0, r3
10045290:	f003 fd0a 	bl	10048ca8 <HAL_I2C_EV_IRQHandler>
}
10045294:	46c0      	nop			@ (mov r8, r8)
10045296:	46bd      	mov	sp, r7
10045298:	bd80      	pop	{r7, pc}
1004529a:	46c0      	nop			@ (mov r8, r8)
1004529c:	20002624 	.word	0x20002624

100452a0 <I2C_Init>:
 * @function: I2C_Init()
 * @brief: initialize the I2C peripheral to receive and transmit
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int I2C_Init(void){
100452a0:	b590      	push	{r4, r7, lr}
100452a2:	b083      	sub	sp, #12
100452a4:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
100452a6:	4b36      	ldr	r3, [pc, #216]	@ (10045380 <I2C_Init+0xe0>)
100452a8:	781b      	ldrb	r3, [r3, #0]
100452aa:	2b00      	cmp	r3, #0
100452ac:	d001      	beq.n	100452b2 <I2C_Init+0x12>
100452ae:	2301      	movs	r3, #1
100452b0:	e062      	b.n	10045378 <I2C_Init+0xd8>
	TIMERS_Init();
100452b2:	f001 fb4b 	bl	1004694c <TIMERS_Init>
	hi2c1.Instance = I2C1;
100452b6:	4b33      	ldr	r3, [pc, #204]	@ (10045384 <I2C_Init+0xe4>)
100452b8:	2282      	movs	r2, #130	@ 0x82
100452ba:	05d2      	lsls	r2, r2, #23
100452bc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00305B5B;
100452be:	4b31      	ldr	r3, [pc, #196]	@ (10045384 <I2C_Init+0xe4>)
100452c0:	4a31      	ldr	r2, [pc, #196]	@ (10045388 <I2C_Init+0xe8>)
100452c2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
100452c4:	4b2f      	ldr	r3, [pc, #188]	@ (10045384 <I2C_Init+0xe4>)
100452c6:	2200      	movs	r2, #0
100452c8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
100452ca:	4b2e      	ldr	r3, [pc, #184]	@ (10045384 <I2C_Init+0xe4>)
100452cc:	2201      	movs	r2, #1
100452ce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
100452d0:	4b2c      	ldr	r3, [pc, #176]	@ (10045384 <I2C_Init+0xe4>)
100452d2:	2200      	movs	r2, #0
100452d4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
100452d6:	4b2b      	ldr	r3, [pc, #172]	@ (10045384 <I2C_Init+0xe4>)
100452d8:	2200      	movs	r2, #0
100452da:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
100452dc:	4b29      	ldr	r3, [pc, #164]	@ (10045384 <I2C_Init+0xe4>)
100452de:	2200      	movs	r2, #0
100452e0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
100452e2:	4b28      	ldr	r3, [pc, #160]	@ (10045384 <I2C_Init+0xe4>)
100452e4:	2200      	movs	r2, #0
100452e6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
100452e8:	4b26      	ldr	r3, [pc, #152]	@ (10045384 <I2C_Init+0xe4>)
100452ea:	2200      	movs	r2, #0
100452ec:	621a      	str	r2, [r3, #32]
	hi2c1.State = HAL_I2C_STATE_RESET;
100452ee:	4b25      	ldr	r3, [pc, #148]	@ (10045384 <I2C_Init+0xe4>)
100452f0:	2241      	movs	r2, #65	@ 0x41
100452f2:	2100      	movs	r1, #0
100452f4:	5499      	strb	r1, [r3, r2]
	HAL_StatusTypeDef ret = HAL_I2C_Init(&hi2c1);
100452f6:	1dfc      	adds	r4, r7, #7
100452f8:	4b22      	ldr	r3, [pc, #136]	@ (10045384 <I2C_Init+0xe4>)
100452fa:	0018      	movs	r0, r3
100452fc:	f003 faee 	bl	100488dc <HAL_I2C_Init>
10045300:	0003      	movs	r3, r0
10045302:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10045304:	1dfb      	adds	r3, r7, #7
10045306:	781b      	ldrb	r3, [r3, #0]
10045308:	2b00      	cmp	r3, #0
1004530a:	d001      	beq.n	10045310 <I2C_Init+0x70>
	{
		return INIT_ERROR;
1004530c:	2300      	movs	r3, #0
1004530e:	e033      	b.n	10045378 <I2C_Init+0xd8>
	}
	// Configure Analog filter
	ret = HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
10045310:	1dfc      	adds	r4, r7, #7
10045312:	4b1c      	ldr	r3, [pc, #112]	@ (10045384 <I2C_Init+0xe4>)
10045314:	2100      	movs	r1, #0
10045316:	0018      	movs	r0, r3
10045318:	f005 f9b0 	bl	1004a67c <HAL_I2CEx_ConfigAnalogFilter>
1004531c:	0003      	movs	r3, r0
1004531e:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10045320:	1dfb      	adds	r3, r7, #7
10045322:	781b      	ldrb	r3, [r3, #0]
10045324:	2b00      	cmp	r3, #0
10045326:	d001      	beq.n	1004532c <I2C_Init+0x8c>
	{
		return INIT_ERROR;
10045328:	2300      	movs	r3, #0
1004532a:	e025      	b.n	10045378 <I2C_Init+0xd8>
	}

	// Configure Digital filter
	ret = HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
1004532c:	1dfc      	adds	r4, r7, #7
1004532e:	4b15      	ldr	r3, [pc, #84]	@ (10045384 <I2C_Init+0xe4>)
10045330:	2100      	movs	r1, #0
10045332:	0018      	movs	r0, r3
10045334:	f005 f9ee 	bl	1004a714 <HAL_I2CEx_ConfigDigitalFilter>
10045338:	0003      	movs	r3, r0
1004533a:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
1004533c:	1dfb      	adds	r3, r7, #7
1004533e:	781b      	ldrb	r3, [r3, #0]
10045340:	2b00      	cmp	r3, #0
10045342:	d001      	beq.n	10045348 <I2C_Init+0xa8>
	{
		return INIT_ERROR;
10045344:	2300      	movs	r3, #0
10045346:	e017      	b.n	10045378 <I2C_Init+0xd8>
	}
	//set up circular buffers
	MemBuff.tail = 0;
10045348:	4b10      	ldr	r3, [pc, #64]	@ (1004538c <I2C_Init+0xec>)
1004534a:	4a11      	ldr	r2, [pc, #68]	@ (10045390 <I2C_Init+0xf0>)
1004534c:	2100      	movs	r1, #0
1004534e:	5299      	strh	r1, [r3, r2]
	MemBuff.head = 0;
10045350:	4a0e      	ldr	r2, [pc, #56]	@ (1004538c <I2C_Init+0xec>)
10045352:	23c0      	movs	r3, #192	@ 0xc0
10045354:	015b      	lsls	r3, r3, #5
10045356:	2100      	movs	r1, #0
10045358:	52d1      	strh	r1, [r2, r3]
	initialized = 1;
1004535a:	4b09      	ldr	r3, [pc, #36]	@ (10045380 <I2C_Init+0xe0>)
1004535c:	2201      	movs	r2, #1
1004535e:	701a      	strb	r2, [r3, #0]
	I2CUARTtoI2C(1);
10045360:	2001      	movs	r0, #1
10045362:	f7ff fd91 	bl	10044e88 <I2CUARTtoI2C>
	//enables interrupts
	HAL_NVIC_SetPriority(I2C1_IRQn, 2, 0);
10045366:	2200      	movs	r2, #0
10045368:	2102      	movs	r1, #2
1004536a:	2003      	movs	r0, #3
1004536c:	f002 fdca 	bl	10047f04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_IRQn);
10045370:	2003      	movs	r0, #3
10045372:	f002 fddc 	bl	10047f2e <HAL_NVIC_EnableIRQ>
	return INIT_OK;
10045376:	2301      	movs	r3, #1
}
10045378:	0018      	movs	r0, r3
1004537a:	46bd      	mov	sp, r7
1004537c:	b003      	add	sp, #12
1004537e:	bd90      	pop	{r4, r7, pc}
10045380:	20001bd8 	.word	0x20001bd8
10045384:	20002624 	.word	0x20002624
10045388:	00305b5b 	.word	0x00305b5b
1004538c:	200003d4 	.word	0x200003d4
10045390:	00001802 	.word	0x00001802

10045394 <I2C_Transmit>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to write to
 * 		   uint8_t data: to to be transmitted
 * @return: a flag if the data has been transmitted
 */
HAL_StatusTypeDef I2C_Transmit(uint8_t targetadr, uint8_t registeradr, uint8_t data){
10045394:	b5b0      	push	{r4, r5, r7, lr}
10045396:	b084      	sub	sp, #16
10045398:	af00      	add	r7, sp, #0
1004539a:	0004      	movs	r4, r0
1004539c:	0008      	movs	r0, r1
1004539e:	0011      	movs	r1, r2
100453a0:	1dfb      	adds	r3, r7, #7
100453a2:	1c22      	adds	r2, r4, #0
100453a4:	701a      	strb	r2, [r3, #0]
100453a6:	1dbb      	adds	r3, r7, #6
100453a8:	1c02      	adds	r2, r0, #0
100453aa:	701a      	strb	r2, [r3, #0]
100453ac:	1d7b      	adds	r3, r7, #5
100453ae:	1c0a      	adds	r2, r1, #0
100453b0:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
100453b2:	4b13      	ldr	r3, [pc, #76]	@ (10045400 <I2C_Transmit+0x6c>)
100453b4:	781b      	ldrb	r3, [r3, #0]
100453b6:	2b00      	cmp	r3, #0
100453b8:	d101      	bne.n	100453be <I2C_Transmit+0x2a>
100453ba:	2301      	movs	r3, #1
100453bc:	e01c      	b.n	100453f8 <I2C_Transmit+0x64>
	HAL_StatusTypeDef status = HAL_OK;
100453be:	210f      	movs	r1, #15
100453c0:	187b      	adds	r3, r7, r1
100453c2:	2200      	movs	r2, #0
100453c4:	701a      	strb	r2, [r3, #0]
	static MemAdd_t Post;
	Post.targetadr = targetadr;
100453c6:	4b0f      	ldr	r3, [pc, #60]	@ (10045404 <I2C_Transmit+0x70>)
100453c8:	1dfa      	adds	r2, r7, #7
100453ca:	7812      	ldrb	r2, [r2, #0]
100453cc:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
100453ce:	4b0d      	ldr	r3, [pc, #52]	@ (10045404 <I2C_Transmit+0x70>)
100453d0:	1dba      	adds	r2, r7, #6
100453d2:	7812      	ldrb	r2, [r2, #0]
100453d4:	705a      	strb	r2, [r3, #1]
	Post.posterindex = 0;//null pointer, no function is posted to after the transmit is complete
100453d6:	4b0b      	ldr	r3, [pc, #44]	@ (10045404 <I2C_Transmit+0x70>)
100453d8:	2200      	movs	r2, #0
100453da:	70da      	strb	r2, [r3, #3]
	Post.data = data;
100453dc:	4b09      	ldr	r3, [pc, #36]	@ (10045404 <I2C_Transmit+0x70>)
100453de:	1d7a      	adds	r2, r7, #5
100453e0:	7812      	ldrb	r2, [r2, #0]
100453e2:	709a      	strb	r2, [r3, #2]
	status = I2C_Enqueue(Post);
100453e4:	000d      	movs	r5, r1
100453e6:	187c      	adds	r4, r7, r1
100453e8:	4b06      	ldr	r3, [pc, #24]	@ (10045404 <I2C_Transmit+0x70>)
100453ea:	6818      	ldr	r0, [r3, #0]
100453ec:	f7ff fdd2 	bl	10044f94 <I2C_Enqueue>
100453f0:	0003      	movs	r3, r0
100453f2:	7023      	strb	r3, [r4, #0]
	return status;
100453f4:	197b      	adds	r3, r7, r5
100453f6:	781b      	ldrb	r3, [r3, #0]
}
100453f8:	0018      	movs	r0, r3
100453fa:	46bd      	mov	sp, r7
100453fc:	b004      	add	sp, #16
100453fe:	bdb0      	pop	{r4, r5, r7, pc}
10045400:	20001bd8 	.word	0x20001bd8
10045404:	20001bdc 	.word	0x20001bdc

10045408 <I2C_Flushbuffer>:

void I2C_Flushbuffer(){
10045408:	b580      	push	{r7, lr}
1004540a:	af00      	add	r7, sp, #0
	if(hi2c1.State == HAL_I2C_STATE_READY && MemBuff.tail != MemBuff.head){
1004540c:	4b0d      	ldr	r3, [pc, #52]	@ (10045444 <I2C_Flushbuffer+0x3c>)
1004540e:	2241      	movs	r2, #65	@ 0x41
10045410:	5c9b      	ldrb	r3, [r3, r2]
10045412:	b2db      	uxtb	r3, r3
10045414:	2b20      	cmp	r3, #32
10045416:	d111      	bne.n	1004543c <I2C_Flushbuffer+0x34>
10045418:	4b0b      	ldr	r3, [pc, #44]	@ (10045448 <I2C_Flushbuffer+0x40>)
1004541a:	4a0c      	ldr	r2, [pc, #48]	@ (1004544c <I2C_Flushbuffer+0x44>)
1004541c:	5a9a      	ldrh	r2, [r3, r2]
1004541e:	490a      	ldr	r1, [pc, #40]	@ (10045448 <I2C_Flushbuffer+0x40>)
10045420:	23c0      	movs	r3, #192	@ 0xc0
10045422:	015b      	lsls	r3, r3, #5
10045424:	5acb      	ldrh	r3, [r1, r3]
10045426:	429a      	cmp	r2, r3
10045428:	d008      	beq.n	1004543c <I2C_Flushbuffer+0x34>
		//error recovery
		I2C_Post(MemBuff.data+MemBuff.tail);
1004542a:	4b07      	ldr	r3, [pc, #28]	@ (10045448 <I2C_Flushbuffer+0x40>)
1004542c:	4a07      	ldr	r2, [pc, #28]	@ (1004544c <I2C_Flushbuffer+0x44>)
1004542e:	5a9b      	ldrh	r3, [r3, r2]
10045430:	009a      	lsls	r2, r3, #2
10045432:	4b05      	ldr	r3, [pc, #20]	@ (10045448 <I2C_Flushbuffer+0x40>)
10045434:	18d3      	adds	r3, r2, r3
10045436:	0018      	movs	r0, r3
10045438:	f7ff fd78 	bl	10044f2c <I2C_Post>
	}
}
1004543c:	46c0      	nop			@ (mov r8, r8)
1004543e:	46bd      	mov	sp, r7
10045440:	bd80      	pop	{r7, pc}
10045442:	46c0      	nop			@ (mov r8, r8)
10045444:	20002624 	.word	0x20002624
10045448:	200003d4 	.word	0x200003d4
1004544c:	00001802 	.word	0x00001802

10045450 <I2C_Recieve>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to read from
 * 		   void (*PostTo)(Event_t): which service to post to when the data is received
 * @return: -1 if error, 1 if success
 */
HAL_StatusTypeDef I2C_Recieve(uint8_t targetadr, uint8_t registeradr, uint8_t posterindex){
10045450:	b5b0      	push	{r4, r5, r7, lr}
10045452:	b084      	sub	sp, #16
10045454:	af00      	add	r7, sp, #0
10045456:	0004      	movs	r4, r0
10045458:	0008      	movs	r0, r1
1004545a:	0011      	movs	r1, r2
1004545c:	1dfb      	adds	r3, r7, #7
1004545e:	1c22      	adds	r2, r4, #0
10045460:	701a      	strb	r2, [r3, #0]
10045462:	1dbb      	adds	r3, r7, #6
10045464:	1c02      	adds	r2, r0, #0
10045466:	701a      	strb	r2, [r3, #0]
10045468:	1d7b      	adds	r3, r7, #5
1004546a:	1c0a      	adds	r2, r1, #0
1004546c:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
1004546e:	4b18      	ldr	r3, [pc, #96]	@ (100454d0 <I2C_Recieve+0x80>)
10045470:	781b      	ldrb	r3, [r3, #0]
10045472:	2b00      	cmp	r3, #0
10045474:	d101      	bne.n	1004547a <I2C_Recieve+0x2a>
10045476:	2301      	movs	r3, #1
10045478:	e026      	b.n	100454c8 <I2C_Recieve+0x78>
	HAL_StatusTypeDef status = HAL_OK;
1004547a:	230f      	movs	r3, #15
1004547c:	18fb      	adds	r3, r7, r3
1004547e:	2200      	movs	r2, #0
10045480:	701a      	strb	r2, [r3, #0]
	static MemAdd_t Post;
	Post.targetadr = targetadr;
10045482:	4b14      	ldr	r3, [pc, #80]	@ (100454d4 <I2C_Recieve+0x84>)
10045484:	1dfa      	adds	r2, r7, #7
10045486:	7812      	ldrb	r2, [r2, #0]
10045488:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
1004548a:	4b12      	ldr	r3, [pc, #72]	@ (100454d4 <I2C_Recieve+0x84>)
1004548c:	1dba      	adds	r2, r7, #6
1004548e:	7812      	ldrb	r2, [r2, #0]
10045490:	705a      	strb	r2, [r3, #1]
	if(posterindex == 0 || posterindex > NUMPOSTERS){
10045492:	1d7b      	adds	r3, r7, #5
10045494:	781b      	ldrb	r3, [r3, #0]
10045496:	2b00      	cmp	r3, #0
10045498:	d003      	beq.n	100454a2 <I2C_Recieve+0x52>
1004549a:	1d7b      	adds	r3, r7, #5
1004549c:	781b      	ldrb	r3, [r3, #0]
1004549e:	2b01      	cmp	r3, #1
100454a0:	d901      	bls.n	100454a6 <I2C_Recieve+0x56>
		return HAL_ERROR;
100454a2:	2301      	movs	r3, #1
100454a4:	e010      	b.n	100454c8 <I2C_Recieve+0x78>
	}
	Post.posterindex = posterindex;
100454a6:	4b0b      	ldr	r3, [pc, #44]	@ (100454d4 <I2C_Recieve+0x84>)
100454a8:	1d7a      	adds	r2, r7, #5
100454aa:	7812      	ldrb	r2, [r2, #0]
100454ac:	70da      	strb	r2, [r3, #3]
	Post.data = 0;//will store future recieved data
100454ae:	4b09      	ldr	r3, [pc, #36]	@ (100454d4 <I2C_Recieve+0x84>)
100454b0:	2200      	movs	r2, #0
100454b2:	709a      	strb	r2, [r3, #2]
	status = I2C_Enqueue(Post);
100454b4:	250f      	movs	r5, #15
100454b6:	197c      	adds	r4, r7, r5
100454b8:	4b06      	ldr	r3, [pc, #24]	@ (100454d4 <I2C_Recieve+0x84>)
100454ba:	6818      	ldr	r0, [r3, #0]
100454bc:	f7ff fd6a 	bl	10044f94 <I2C_Enqueue>
100454c0:	0003      	movs	r3, r0
100454c2:	7023      	strb	r3, [r4, #0]
	return status;
100454c4:	197b      	adds	r3, r7, r5
100454c6:	781b      	ldrb	r3, [r3, #0]

}
100454c8:	0018      	movs	r0, r3
100454ca:	46bd      	mov	sp, r7
100454cc:	b004      	add	sp, #16
100454ce:	bdb0      	pop	{r4, r5, r7, pc}
100454d0:	20001bd8 	.word	0x20001bd8
100454d4:	20001be0 	.word	0x20001be0

100454d8 <I2C_WriteReg>:
unsigned char I2C_WriteReg(
    unsigned char I2CAddress,
    unsigned char deviceRegisterAddress,
    uint8_t data
)
{
100454d8:	b5b0      	push	{r4, r5, r7, lr}
100454da:	b084      	sub	sp, #16
100454dc:	af00      	add	r7, sp, #0
100454de:	0004      	movs	r4, r0
100454e0:	0008      	movs	r0, r1
100454e2:	0011      	movs	r1, r2
100454e4:	1dfb      	adds	r3, r7, #7
100454e6:	1c22      	adds	r2, r4, #0
100454e8:	701a      	strb	r2, [r3, #0]
100454ea:	1dbb      	adds	r3, r7, #6
100454ec:	1c02      	adds	r2, r0, #0
100454ee:	701a      	strb	r2, [r3, #0]
100454f0:	1d7b      	adds	r3, r7, #5
100454f2:	1c0a      	adds	r2, r1, #0
100454f4:	701a      	strb	r2, [r3, #0]
//        I2C_MEMADD_SIZE_8BIT,
//        &data,
//        1,
//        HAL_MAX_DELAY
//    );
    ret = I2C_Transmit(I2CAddress, deviceRegisterAddress, data);
100454f6:	250f      	movs	r5, #15
100454f8:	197c      	adds	r4, r7, r5
100454fa:	1d7b      	adds	r3, r7, #5
100454fc:	781a      	ldrb	r2, [r3, #0]
100454fe:	1dbb      	adds	r3, r7, #6
10045500:	7819      	ldrb	r1, [r3, #0]
10045502:	1dfb      	adds	r3, r7, #7
10045504:	781b      	ldrb	r3, [r3, #0]
10045506:	0018      	movs	r0, r3
10045508:	f7ff ff44 	bl	10045394 <I2C_Transmit>
1004550c:	0003      	movs	r3, r0
1004550e:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK)
10045510:	197b      	adds	r3, r7, r5
10045512:	781b      	ldrb	r3, [r3, #0]
10045514:	2b00      	cmp	r3, #0
10045516:	d001      	beq.n	1004551c <I2C_WriteReg+0x44>
    {
        return ERROR;
10045518:	2301      	movs	r3, #1
1004551a:	e000      	b.n	1004551e <I2C_WriteReg+0x46>
    }

    return SUCCESS;
1004551c:	2300      	movs	r3, #0
}
1004551e:	0018      	movs	r0, r3
10045520:	46bd      	mov	sp, r7
10045522:	b004      	add	sp, #16
10045524:	bdb0      	pop	{r4, r5, r7, pc}
	...

10045528 <MP3_SendData>:
static uint8_t* folders;
static uint8_t numfolders;

static char lastsent[4];
//----------------------------------------Private Functions--------------------------------------
void MP3_SendData(char string[4]){
10045528:	b590      	push	{r4, r7, lr}
1004552a:	b085      	sub	sp, #20
1004552c:	af00      	add	r7, sp, #0
1004552e:	6078      	str	r0, [r7, #4]
	uint16_t accumulation = 0;
10045530:	240e      	movs	r4, #14
10045532:	193b      	adds	r3, r7, r4
10045534:	2200      	movs	r2, #0
10045536:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x7E);//start flag
10045538:	207e      	movs	r0, #126	@ 0x7e
1004553a:	f001 fbb5 	bl	10046ca8 <LPUART_WriteTx>
	accumulation += 0xFF;
1004553e:	193b      	adds	r3, r7, r4
10045540:	193a      	adds	r2, r7, r4
10045542:	8812      	ldrh	r2, [r2, #0]
10045544:	32ff      	adds	r2, #255	@ 0xff
10045546:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0xFF);//Version?
10045548:	20ff      	movs	r0, #255	@ 0xff
1004554a:	f001 fbad 	bl	10046ca8 <LPUART_WriteTx>
	accumulation += 0x06;
1004554e:	193b      	adds	r3, r7, r4
10045550:	193a      	adds	r2, r7, r4
10045552:	8812      	ldrh	r2, [r2, #0]
10045554:	3206      	adds	r2, #6
10045556:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x06);//length
10045558:	2006      	movs	r0, #6
1004555a:	f001 fba5 	bl	10046ca8 <LPUART_WriteTx>

	for(int i = 0; i < 4; i++){
1004555e:	2300      	movs	r3, #0
10045560:	60bb      	str	r3, [r7, #8]
10045562:	e01d      	b.n	100455a0 <MP3_SendData+0x78>
		accumulation += string[i];
10045564:	68bb      	ldr	r3, [r7, #8]
10045566:	687a      	ldr	r2, [r7, #4]
10045568:	18d3      	adds	r3, r2, r3
1004556a:	781b      	ldrb	r3, [r3, #0]
1004556c:	0019      	movs	r1, r3
1004556e:	220e      	movs	r2, #14
10045570:	18bb      	adds	r3, r7, r2
10045572:	18ba      	adds	r2, r7, r2
10045574:	8812      	ldrh	r2, [r2, #0]
10045576:	188a      	adds	r2, r1, r2
10045578:	801a      	strh	r2, [r3, #0]
		lastsent[i] = string[i];
1004557a:	68bb      	ldr	r3, [r7, #8]
1004557c:	687a      	ldr	r2, [r7, #4]
1004557e:	18d3      	adds	r3, r2, r3
10045580:	7819      	ldrb	r1, [r3, #0]
10045582:	4a16      	ldr	r2, [pc, #88]	@ (100455dc <MP3_SendData+0xb4>)
10045584:	68bb      	ldr	r3, [r7, #8]
10045586:	18d3      	adds	r3, r2, r3
10045588:	1c0a      	adds	r2, r1, #0
1004558a:	701a      	strb	r2, [r3, #0]
		LPUART_WriteTx(string[i]);//command and data
1004558c:	68bb      	ldr	r3, [r7, #8]
1004558e:	687a      	ldr	r2, [r7, #4]
10045590:	18d3      	adds	r3, r2, r3
10045592:	781b      	ldrb	r3, [r3, #0]
10045594:	0018      	movs	r0, r3
10045596:	f001 fb87 	bl	10046ca8 <LPUART_WriteTx>
	for(int i = 0; i < 4; i++){
1004559a:	68bb      	ldr	r3, [r7, #8]
1004559c:	3301      	adds	r3, #1
1004559e:	60bb      	str	r3, [r7, #8]
100455a0:	68bb      	ldr	r3, [r7, #8]
100455a2:	2b03      	cmp	r3, #3
100455a4:	ddde      	ble.n	10045564 <MP3_SendData+0x3c>
	}
	accumulation = -accumulation;//??required for it to work
100455a6:	240e      	movs	r4, #14
100455a8:	193b      	adds	r3, r7, r4
100455aa:	193a      	adds	r2, r7, r4
100455ac:	8812      	ldrh	r2, [r2, #0]
100455ae:	4252      	negs	r2, r2
100455b0:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(accumulation>>8);//checksum
100455b2:	193b      	adds	r3, r7, r4
100455b4:	881b      	ldrh	r3, [r3, #0]
100455b6:	0a1b      	lsrs	r3, r3, #8
100455b8:	b29b      	uxth	r3, r3
100455ba:	b2db      	uxtb	r3, r3
100455bc:	0018      	movs	r0, r3
100455be:	f001 fb73 	bl	10046ca8 <LPUART_WriteTx>
	LPUART_WriteTx(accumulation&0xFF);//checksum
100455c2:	193b      	adds	r3, r7, r4
100455c4:	881b      	ldrh	r3, [r3, #0]
100455c6:	b2db      	uxtb	r3, r3
100455c8:	0018      	movs	r0, r3
100455ca:	f001 fb6d 	bl	10046ca8 <LPUART_WriteTx>
	LPUART_WriteTx(0xEF);//start flag
100455ce:	20ef      	movs	r0, #239	@ 0xef
100455d0:	f001 fb6a 	bl	10046ca8 <LPUART_WriteTx>

}
100455d4:	46c0      	nop			@ (mov r8, r8)
100455d6:	46bd      	mov	sp, r7
100455d8:	b005      	add	sp, #20
100455da:	bd90      	pop	{r4, r7, pc}
100455dc:	20001c08 	.word	0x20001c08

100455e0 <parsePacket>:

uint8_t parsePacket(char rx){
100455e0:	b580      	push	{r7, lr}
100455e2:	b086      	sub	sp, #24
100455e4:	af00      	add	r7, sp, #0
100455e6:	0002      	movs	r2, r0
100455e8:	1dfb      	adds	r3, r7, #7
100455ea:	701a      	strb	r2, [r3, #0]
	if(rx == UARTFAILED){
100455ec:	1dfb      	adds	r3, r7, #7
100455ee:	781b      	ldrb	r3, [r3, #0]
100455f0:	2b25      	cmp	r3, #37	@ 0x25
100455f2:	d101      	bne.n	100455f8 <parsePacket+0x18>
		return 0;
100455f4:	2300      	movs	r3, #0
100455f6:	e0c6      	b.n	10045786 <parsePacket+0x1a6>
	}
	if(rx == 0x7E){
100455f8:	1dfb      	adds	r3, r7, #7
100455fa:	781b      	ldrb	r3, [r3, #0]
100455fc:	2b7e      	cmp	r3, #126	@ 0x7e
100455fe:	d102      	bne.n	10045606 <parsePacket+0x26>
		PacketSM = Start;
10045600:	4b63      	ldr	r3, [pc, #396]	@ (10045790 <parsePacket+0x1b0>)
10045602:	2200      	movs	r2, #0
10045604:	701a      	strb	r2, [r3, #0]
	}
	switch (PacketSM){
10045606:	4b62      	ldr	r3, [pc, #392]	@ (10045790 <parsePacket+0x1b0>)
10045608:	781b      	ldrb	r3, [r3, #0]
1004560a:	2b08      	cmp	r3, #8
1004560c:	d900      	bls.n	10045610 <parsePacket+0x30>
1004560e:	e0b9      	b.n	10045784 <parsePacket+0x1a4>
10045610:	009a      	lsls	r2, r3, #2
10045612:	4b60      	ldr	r3, [pc, #384]	@ (10045794 <parsePacket+0x1b4>)
10045614:	18d3      	adds	r3, r2, r3
10045616:	681b      	ldr	r3, [r3, #0]
10045618:	469f      	mov	pc, r3
	case Start:
		if(rx == 0xFF){
1004561a:	1dfb      	adds	r3, r7, #7
1004561c:	781b      	ldrb	r3, [r3, #0]
1004561e:	2bff      	cmp	r3, #255	@ 0xff
10045620:	d000      	beq.n	10045624 <parsePacket+0x44>
10045622:	e0ae      	b.n	10045782 <parsePacket+0x1a2>
			PacketSM = Version;
10045624:	4b5a      	ldr	r3, [pc, #360]	@ (10045790 <parsePacket+0x1b0>)
10045626:	2201      	movs	r2, #1
10045628:	701a      	strb	r2, [r3, #0]
		}
		break;
1004562a:	e0aa      	b.n	10045782 <parsePacket+0x1a2>
	case Version:
		if(rx == 0x06){
1004562c:	1dfb      	adds	r3, r7, #7
1004562e:	781b      	ldrb	r3, [r3, #0]
10045630:	2b06      	cmp	r3, #6
10045632:	d103      	bne.n	1004563c <parsePacket+0x5c>
			PacketSM = Length;
10045634:	4b56      	ldr	r3, [pc, #344]	@ (10045790 <parsePacket+0x1b0>)
10045636:	2202      	movs	r2, #2
10045638:	701a      	strb	r2, [r3, #0]
		} else {
			PacketSM = Start;
		}
		break;
1004563a:	e0a3      	b.n	10045784 <parsePacket+0x1a4>
			PacketSM = Start;
1004563c:	4b54      	ldr	r3, [pc, #336]	@ (10045790 <parsePacket+0x1b0>)
1004563e:	2200      	movs	r2, #0
10045640:	701a      	strb	r2, [r3, #0]
		break;
10045642:	e09f      	b.n	10045784 <parsePacket+0x1a4>
	case Length:
		PacketSM = Command;
10045644:	4b52      	ldr	r3, [pc, #328]	@ (10045790 <parsePacket+0x1b0>)
10045646:	2203      	movs	r2, #3
10045648:	701a      	strb	r2, [r3, #0]
		Packet.command = rx;
1004564a:	4b53      	ldr	r3, [pc, #332]	@ (10045798 <parsePacket+0x1b8>)
1004564c:	1dfa      	adds	r2, r7, #7
1004564e:	7812      	ldrb	r2, [r2, #0]
10045650:	701a      	strb	r2, [r3, #0]
		break;
10045652:	e097      	b.n	10045784 <parsePacket+0x1a4>
	case Command:
		if(rx == 0x01 || rx == 0x00){
10045654:	1dfb      	adds	r3, r7, #7
10045656:	781b      	ldrb	r3, [r3, #0]
10045658:	2b01      	cmp	r3, #1
1004565a:	d003      	beq.n	10045664 <parsePacket+0x84>
1004565c:	1dfb      	adds	r3, r7, #7
1004565e:	781b      	ldrb	r3, [r3, #0]
10045660:	2b00      	cmp	r3, #0
10045662:	d103      	bne.n	1004566c <parsePacket+0x8c>
			PacketSM = Ack;
10045664:	4b4a      	ldr	r3, [pc, #296]	@ (10045790 <parsePacket+0x1b0>)
10045666:	2204      	movs	r2, #4
10045668:	701a      	strb	r2, [r3, #0]
		} else {
			PacketSM = Start;
		}
		break;
1004566a:	e08b      	b.n	10045784 <parsePacket+0x1a4>
			PacketSM = Start;
1004566c:	4b48      	ldr	r3, [pc, #288]	@ (10045790 <parsePacket+0x1b0>)
1004566e:	2200      	movs	r2, #0
10045670:	701a      	strb	r2, [r3, #0]
		break;
10045672:	e087      	b.n	10045784 <parsePacket+0x1a4>
	case Ack:
		PacketSM = Param1;
10045674:	4b46      	ldr	r3, [pc, #280]	@ (10045790 <parsePacket+0x1b0>)
10045676:	2205      	movs	r2, #5
10045678:	701a      	strb	r2, [r3, #0]
		Packet.Param1 = rx;
1004567a:	4b47      	ldr	r3, [pc, #284]	@ (10045798 <parsePacket+0x1b8>)
1004567c:	1dfa      	adds	r2, r7, #7
1004567e:	7812      	ldrb	r2, [r2, #0]
10045680:	709a      	strb	r2, [r3, #2]

		break;
10045682:	e07f      	b.n	10045784 <parsePacket+0x1a4>
	case Param1:
		PacketSM = Param2;
10045684:	4b42      	ldr	r3, [pc, #264]	@ (10045790 <parsePacket+0x1b0>)
10045686:	2206      	movs	r2, #6
10045688:	701a      	strb	r2, [r3, #0]
		Packet.Param2 = rx;
1004568a:	4b43      	ldr	r3, [pc, #268]	@ (10045798 <parsePacket+0x1b8>)
1004568c:	1dfa      	adds	r2, r7, #7
1004568e:	7812      	ldrb	r2, [r2, #0]
10045690:	70da      	strb	r2, [r3, #3]
		break;
10045692:	e077      	b.n	10045784 <parsePacket+0x1a4>
	case Param2:
		uint16_t checkval = -(0x105+Packet.command+Packet.ack+Packet.Param1 +Packet.Param2);
10045694:	4b40      	ldr	r3, [pc, #256]	@ (10045798 <parsePacket+0x1b8>)
10045696:	781b      	ldrb	r3, [r3, #0]
10045698:	001a      	movs	r2, r3
1004569a:	4b3f      	ldr	r3, [pc, #252]	@ (10045798 <parsePacket+0x1b8>)
1004569c:	785b      	ldrb	r3, [r3, #1]
1004569e:	18d3      	adds	r3, r2, r3
100456a0:	b29b      	uxth	r3, r3
100456a2:	4a3d      	ldr	r2, [pc, #244]	@ (10045798 <parsePacket+0x1b8>)
100456a4:	7892      	ldrb	r2, [r2, #2]
100456a6:	189b      	adds	r3, r3, r2
100456a8:	b29b      	uxth	r3, r3
100456aa:	4a3b      	ldr	r2, [pc, #236]	@ (10045798 <parsePacket+0x1b8>)
100456ac:	78d2      	ldrb	r2, [r2, #3]
100456ae:	189b      	adds	r3, r3, r2
100456b0:	b29a      	uxth	r2, r3
100456b2:	2016      	movs	r0, #22
100456b4:	183b      	adds	r3, r7, r0
100456b6:	4939      	ldr	r1, [pc, #228]	@ (1004579c <parsePacket+0x1bc>)
100456b8:	1a8a      	subs	r2, r1, r2
100456ba:	801a      	strh	r2, [r3, #0]
		if(rx == checkval>>8){
100456bc:	1dfb      	adds	r3, r7, #7
100456be:	781b      	ldrb	r3, [r3, #0]
100456c0:	b29a      	uxth	r2, r3
100456c2:	183b      	adds	r3, r7, r0
100456c4:	881b      	ldrh	r3, [r3, #0]
100456c6:	0a1b      	lsrs	r3, r3, #8
100456c8:	b29b      	uxth	r3, r3
100456ca:	429a      	cmp	r2, r3
100456cc:	d103      	bne.n	100456d6 <parsePacket+0xf6>
			PacketSM = Checksum1;
100456ce:	4b30      	ldr	r3, [pc, #192]	@ (10045790 <parsePacket+0x1b0>)
100456d0:	2207      	movs	r2, #7
100456d2:	701a      	strb	r2, [r3, #0]
		}else {
			PacketSM = Start;
			char send[4] = {0x40, 0x00, 0x00, 0x06};
			MP3_SendData(send);
		}
		break;
100456d4:	e056      	b.n	10045784 <parsePacket+0x1a4>
			PacketSM = Start;
100456d6:	4b2e      	ldr	r3, [pc, #184]	@ (10045790 <parsePacket+0x1b0>)
100456d8:	2200      	movs	r2, #0
100456da:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x40, 0x00, 0x00, 0x06};
100456dc:	2110      	movs	r1, #16
100456de:	187b      	adds	r3, r7, r1
100456e0:	4a2f      	ldr	r2, [pc, #188]	@ (100457a0 <parsePacket+0x1c0>)
100456e2:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
100456e4:	187b      	adds	r3, r7, r1
100456e6:	0018      	movs	r0, r3
100456e8:	f7ff ff1e 	bl	10045528 <MP3_SendData>
		break;
100456ec:	e04a      	b.n	10045784 <parsePacket+0x1a4>
	case Checksum1:
		checkval = -(0x105+Packet.command+Packet.ack+Packet.Param1 +Packet.Param2);
100456ee:	4b2a      	ldr	r3, [pc, #168]	@ (10045798 <parsePacket+0x1b8>)
100456f0:	781b      	ldrb	r3, [r3, #0]
100456f2:	001a      	movs	r2, r3
100456f4:	4b28      	ldr	r3, [pc, #160]	@ (10045798 <parsePacket+0x1b8>)
100456f6:	785b      	ldrb	r3, [r3, #1]
100456f8:	18d3      	adds	r3, r2, r3
100456fa:	b29b      	uxth	r3, r3
100456fc:	4a26      	ldr	r2, [pc, #152]	@ (10045798 <parsePacket+0x1b8>)
100456fe:	7892      	ldrb	r2, [r2, #2]
10045700:	189b      	adds	r3, r3, r2
10045702:	b29b      	uxth	r3, r3
10045704:	4a24      	ldr	r2, [pc, #144]	@ (10045798 <parsePacket+0x1b8>)
10045706:	78d2      	ldrb	r2, [r2, #3]
10045708:	189b      	adds	r3, r3, r2
1004570a:	b29a      	uxth	r2, r3
1004570c:	2016      	movs	r0, #22
1004570e:	183b      	adds	r3, r7, r0
10045710:	4922      	ldr	r1, [pc, #136]	@ (1004579c <parsePacket+0x1bc>)
10045712:	1a8a      	subs	r2, r1, r2
10045714:	801a      	strh	r2, [r3, #0]
		if(rx == (checkval&0xFF)){
10045716:	1dfb      	adds	r3, r7, #7
10045718:	781a      	ldrb	r2, [r3, #0]
1004571a:	183b      	adds	r3, r7, r0
1004571c:	881b      	ldrh	r3, [r3, #0]
1004571e:	21ff      	movs	r1, #255	@ 0xff
10045720:	400b      	ands	r3, r1
10045722:	429a      	cmp	r2, r3
10045724:	d103      	bne.n	1004572e <parsePacket+0x14e>
			PacketSM = Checksum2;
10045726:	4b1a      	ldr	r3, [pc, #104]	@ (10045790 <parsePacket+0x1b0>)
10045728:	2208      	movs	r2, #8
1004572a:	701a      	strb	r2, [r3, #0]
		}else {
			PacketSM = Start;
			char send[4] = {0x40, 0x00, 0x00, 0x06};
			MP3_SendData(send);
		}
		break;
1004572c:	e02a      	b.n	10045784 <parsePacket+0x1a4>
			PacketSM = Start;
1004572e:	4b18      	ldr	r3, [pc, #96]	@ (10045790 <parsePacket+0x1b0>)
10045730:	2200      	movs	r2, #0
10045732:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x40, 0x00, 0x00, 0x06};
10045734:	210c      	movs	r1, #12
10045736:	187b      	adds	r3, r7, r1
10045738:	4a19      	ldr	r2, [pc, #100]	@ (100457a0 <parsePacket+0x1c0>)
1004573a:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
1004573c:	187b      	adds	r3, r7, r1
1004573e:	0018      	movs	r0, r3
10045740:	f7ff fef2 	bl	10045528 <MP3_SendData>
		break;
10045744:	e01e      	b.n	10045784 <parsePacket+0x1a4>
	case Checksum2:
		if(rx == 0xEF){
10045746:	1dfb      	adds	r3, r7, #7
10045748:	781b      	ldrb	r3, [r3, #0]
1004574a:	2bef      	cmp	r3, #239	@ 0xef
1004574c:	d115      	bne.n	1004577a <parsePacket+0x19a>
			if(Packet.command == 0x40){
1004574e:	4b12      	ldr	r3, [pc, #72]	@ (10045798 <parsePacket+0x1b8>)
10045750:	781b      	ldrb	r3, [r3, #0]
10045752:	2b40      	cmp	r3, #64	@ 0x40
10045754:	d10c      	bne.n	10045770 <parsePacket+0x190>
				if(Packet.Param2 == 0x04){
10045756:	4b10      	ldr	r3, [pc, #64]	@ (10045798 <parsePacket+0x1b8>)
10045758:	78db      	ldrb	r3, [r3, #3]
1004575a:	2b04      	cmp	r3, #4
1004575c:	d108      	bne.n	10045770 <parsePacket+0x190>
					MP3_SendData(lastsent);
1004575e:	4b11      	ldr	r3, [pc, #68]	@ (100457a4 <parsePacket+0x1c4>)
10045760:	0018      	movs	r0, r3
10045762:	f7ff fee1 	bl	10045528 <MP3_SendData>

					PacketSM = Start;
10045766:	4b0a      	ldr	r3, [pc, #40]	@ (10045790 <parsePacket+0x1b0>)
10045768:	2200      	movs	r2, #0
1004576a:	701a      	strb	r2, [r3, #0]
					return 0;
1004576c:	2300      	movs	r3, #0
1004576e:	e00a      	b.n	10045786 <parsePacket+0x1a6>
				}
			}
			PacketSM = Start;
10045770:	4b07      	ldr	r3, [pc, #28]	@ (10045790 <parsePacket+0x1b0>)
10045772:	2200      	movs	r2, #0
10045774:	701a      	strb	r2, [r3, #0]
			return 1;
10045776:	2301      	movs	r3, #1
10045778:	e005      	b.n	10045786 <parsePacket+0x1a6>
		}
		PacketSM = Start;
1004577a:	4b05      	ldr	r3, [pc, #20]	@ (10045790 <parsePacket+0x1b0>)
1004577c:	2200      	movs	r2, #0
1004577e:	701a      	strb	r2, [r3, #0]
		break;
10045780:	e000      	b.n	10045784 <parsePacket+0x1a4>
		break;
10045782:	46c0      	nop			@ (mov r8, r8)
	}
	return 0;
10045784:	2300      	movs	r3, #0
}
10045786:	0018      	movs	r0, r3
10045788:	46bd      	mov	sp, r7
1004578a:	b006      	add	sp, #24
1004578c:	bd80      	pop	{r7, pc}
1004578e:	46c0      	nop			@ (mov r8, r8)
10045790:	20001bf5 	.word	0x20001bf5
10045794:	10069744 	.word	0x10069744
10045798:	20001bf8 	.word	0x20001bf8
1004579c:	fffffefb 	.word	0xfffffefb
100457a0:	06000040 	.word	0x06000040
100457a4:	20001c08 	.word	0x20001c08

100457a8 <MP3_Event_Init>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t MP3_Event_Init(FIFO Queue){
100457a8:	b580      	push	{r7, lr}
100457aa:	b084      	sub	sp, #16
100457ac:	af00      	add	r7, sp, #0
100457ae:	6078      	str	r0, [r7, #4]
	//somehow need to be sent 3 seconds after the mp3 turns on
    MP3queue = Queue;
100457b0:	4b1b      	ldr	r3, [pc, #108]	@ (10045820 <MP3_Event_Init+0x78>)
100457b2:	687a      	ldr	r2, [r7, #4]
100457b4:	601a      	str	r2, [r3, #0]
    TIMERS_Init();
100457b6:	f001 f8c9 	bl	1004694c <TIMERS_Init>
    pause = 0x02;
100457ba:	4b1a      	ldr	r3, [pc, #104]	@ (10045824 <MP3_Event_Init+0x7c>)
100457bc:	2202      	movs	r2, #2
100457be:	701a      	strb	r2, [r3, #0]
    DC = FLASH_GetDutyCycle()/100;
100457c0:	f7ff f8ac 	bl	1004491c <FLASH_GetDutyCycle>
100457c4:	0003      	movs	r3, r0
100457c6:	2164      	movs	r1, #100	@ 0x64
100457c8:	0018      	movs	r0, r3
100457ca:	f7fa fd39 	bl	10040240 <__udivsi3>
100457ce:	0003      	movs	r3, r0
100457d0:	b2da      	uxtb	r2, r3
100457d2:	4b15      	ldr	r3, [pc, #84]	@ (10045828 <MP3_Event_Init+0x80>)
100457d4:	701a      	strb	r2, [r3, #0]
    volume = FLASH_GetVolume()/100;
100457d6:	f7ff f88b 	bl	100448f0 <FLASH_GetVolume>
100457da:	0003      	movs	r3, r0
100457dc:	2164      	movs	r1, #100	@ 0x64
100457de:	0018      	movs	r0, r3
100457e0:	f7fa fd2e 	bl	10040240 <__udivsi3>
100457e4:	0003      	movs	r3, r0
100457e6:	b2da      	uxtb	r2, r3
100457e8:	4b10      	ldr	r3, [pc, #64]	@ (1004582c <MP3_Event_Init+0x84>)
100457ea:	701a      	strb	r2, [r3, #0]
    starttime = TIMERS_GetMilliSeconds();
100457ec:	f001 f8fa 	bl	100469e4 <TIMERS_GetMilliSeconds>
100457f0:	0002      	movs	r2, r0
100457f2:	4b0f      	ldr	r3, [pc, #60]	@ (10045830 <MP3_Event_Init+0x88>)
100457f4:	601a      	str	r2, [r3, #0]
    inittime = TIMERS_GetMilliSeconds();
100457f6:	f001 f8f5 	bl	100469e4 <TIMERS_GetMilliSeconds>
100457fa:	0002      	movs	r2, r0
100457fc:	4b0d      	ldr	r3, [pc, #52]	@ (10045834 <MP3_Event_Init+0x8c>)
100457fe:	601a      	str	r2, [r3, #0]
    initialized = 0;
10045800:	4b0d      	ldr	r3, [pc, #52]	@ (10045838 <MP3_Event_Init+0x90>)
10045802:	2200      	movs	r2, #0
10045804:	701a      	strb	r2, [r3, #0]
	{
	char send[4] = {0x0C, 0x00, 0x00, 0x00};//reset module
10045806:	210c      	movs	r1, #12
10045808:	187b      	adds	r3, r7, r1
1004580a:	220c      	movs	r2, #12
1004580c:	601a      	str	r2, [r3, #0]
	MP3_SendData(send);
1004580e:	187b      	adds	r3, r7, r1
10045810:	0018      	movs	r0, r3
10045812:	f7ff fe89 	bl	10045528 <MP3_SendData>
	}

    return INIT_OK;
10045816:	2301      	movs	r3, #1
}
10045818:	0018      	movs	r0, r3
1004581a:	46bd      	mov	sp, r7
1004581c:	b004      	add	sp, #16
1004581e:	bd80      	pop	{r7, pc}
10045820:	20001be4 	.word	0x20001be4
10045824:	20001be8 	.word	0x20001be8
10045828:	20001be9 	.word	0x20001be9
1004582c:	20001bea 	.word	0x20001bea
10045830:	20001bec 	.word	0x20001bec
10045834:	20001bf0 	.word	0x20001bf0
10045838:	20001bf4 	.word	0x20001bf4

1004583c <MP3_Event_Post>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void MP3_Event_Post(Event_t event){
1004583c:	b580      	push	{r7, lr}
1004583e:	b082      	sub	sp, #8
10045840:	af00      	add	r7, sp, #0
10045842:	1d3b      	adds	r3, r7, #4
10045844:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(MP3queue, event);
10045846:	4b05      	ldr	r3, [pc, #20]	@ (1004585c <MP3_Event_Post+0x20>)
10045848:	681a      	ldr	r2, [r3, #0]
1004584a:	1d3b      	adds	r3, r7, #4
1004584c:	6819      	ldr	r1, [r3, #0]
1004584e:	0010      	movs	r0, r2
10045850:	f7fe fefb 	bl	1004464a <FIFO_Enqueue>
}
10045854:	46c0      	nop			@ (mov r8, r8)
10045856:	46bd      	mov	sp, r7
10045858:	b002      	add	sp, #8
1004585a:	bd80      	pop	{r7, pc}
1004585c:	20001be4 	.word	0x20001be4

10045860 <MP3_Event_Updater>:
 * @Function: MP3_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t MP3_Event_Updater(void){
10045860:	b5f0      	push	{r4, r5, r6, r7, lr}
10045862:	b087      	sub	sp, #28
10045864:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
10045866:	2508      	movs	r5, #8
10045868:	197b      	adds	r3, r7, r5
1004586a:	2200      	movs	r2, #0
1004586c:	701a      	strb	r2, [r3, #0]
1004586e:	197b      	adds	r3, r7, r5
10045870:	2200      	movs	r2, #0
10045872:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
10045874:	f001 f8b6 	bl	100469e4 <TIMERS_GetMilliSeconds>
10045878:	0003      	movs	r3, r0
1004587a:	617b      	str	r3, [r7, #20]
    char rx = LPUART_ReadRx();
1004587c:	2613      	movs	r6, #19
1004587e:	19bc      	adds	r4, r7, r6
10045880:	f001 f9e6 	bl	10046c50 <LPUART_ReadRx>
10045884:	0003      	movs	r3, r0
10045886:	7023      	strb	r3, [r4, #0]
    //Check for LPUART events
	if(rx != UARTFAILED){
10045888:	0031      	movs	r1, r6
1004588a:	187b      	adds	r3, r7, r1
1004588c:	781b      	ldrb	r3, [r3, #0]
1004588e:	2b25      	cmp	r3, #37	@ 0x25
10045890:	d00b      	beq.n	100458aa <MP3_Event_Updater+0x4a>
		event.status = EVENT_LPUART;
10045892:	197b      	adds	r3, r7, r5
10045894:	2208      	movs	r2, #8
10045896:	701a      	strb	r2, [r3, #0]
		event.data = rx;
10045898:	187b      	adds	r3, r7, r1
1004589a:	781b      	ldrb	r3, [r3, #0]
1004589c:	b29a      	uxth	r2, r3
1004589e:	197b      	adds	r3, r7, r5
100458a0:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
100458a2:	197b      	adds	r3, r7, r5
100458a4:	6818      	ldr	r0, [r3, #0]
100458a6:	f7ff ffc9 	bl	1004583c <MP3_Event_Post>
	}

	//Check for duty cycle events
	if(!(pause&0x02)){//if the module is in a scheduled playing time
100458aa:	4b6d      	ldr	r3, [pc, #436]	@ (10045a60 <MP3_Event_Updater+0x200>)
100458ac:	781b      	ldrb	r3, [r3, #0]
100458ae:	001a      	movs	r2, r3
100458b0:	2302      	movs	r3, #2
100458b2:	4013      	ands	r3, r2
100458b4:	d000      	beq.n	100458b8 <MP3_Event_Updater+0x58>
100458b6:	e081      	b.n	100459bc <MP3_Event_Updater+0x15c>
		if (!pause){
100458b8:	4b69      	ldr	r3, [pc, #420]	@ (10045a60 <MP3_Event_Updater+0x200>)
100458ba:	781b      	ldrb	r3, [r3, #0]
100458bc:	2b00      	cmp	r3, #0
100458be:	d13d      	bne.n	1004593c <MP3_Event_Updater+0xdc>
			if((CYCLELENGTH*((double)DC/100.0)+starttime) <= timer ){//if the speaker is playing, and time is up
100458c0:	4b68      	ldr	r3, [pc, #416]	@ (10045a64 <MP3_Event_Updater+0x204>)
100458c2:	781b      	ldrb	r3, [r3, #0]
100458c4:	0018      	movs	r0, r3
100458c6:	f7fc fac7 	bl	10041e58 <__aeabi_ui2d>
100458ca:	2200      	movs	r2, #0
100458cc:	4b66      	ldr	r3, [pc, #408]	@ (10045a68 <MP3_Event_Updater+0x208>)
100458ce:	f7fb fb75 	bl	10040fbc <__aeabi_ddiv>
100458d2:	0002      	movs	r2, r0
100458d4:	000b      	movs	r3, r1
100458d6:	0010      	movs	r0, r2
100458d8:	0019      	movs	r1, r3
100458da:	2200      	movs	r2, #0
100458dc:	4b63      	ldr	r3, [pc, #396]	@ (10045a6c <MP3_Event_Updater+0x20c>)
100458de:	f7fb ffa7 	bl	10041830 <__aeabi_dmul>
100458e2:	0002      	movs	r2, r0
100458e4:	000b      	movs	r3, r1
100458e6:	0014      	movs	r4, r2
100458e8:	001d      	movs	r5, r3
100458ea:	4b61      	ldr	r3, [pc, #388]	@ (10045a70 <MP3_Event_Updater+0x210>)
100458ec:	681b      	ldr	r3, [r3, #0]
100458ee:	0018      	movs	r0, r3
100458f0:	f7fc fab2 	bl	10041e58 <__aeabi_ui2d>
100458f4:	0002      	movs	r2, r0
100458f6:	000b      	movs	r3, r1
100458f8:	0020      	movs	r0, r4
100458fa:	0029      	movs	r1, r5
100458fc:	f7fa ff98 	bl	10040830 <__aeabi_dadd>
10045900:	0002      	movs	r2, r0
10045902:	000b      	movs	r3, r1
10045904:	0014      	movs	r4, r2
10045906:	001d      	movs	r5, r3
10045908:	6978      	ldr	r0, [r7, #20]
1004590a:	f7fc faa5 	bl	10041e58 <__aeabi_ui2d>
1004590e:	0002      	movs	r2, r0
10045910:	000b      	movs	r3, r1
10045912:	0020      	movs	r0, r4
10045914:	0029      	movs	r1, r5
10045916:	f7fa fe35 	bl	10040584 <__aeabi_dcmple>
1004591a:	1e03      	subs	r3, r0, #0
1004591c:	d04e      	beq.n	100459bc <MP3_Event_Updater+0x15c>
				event.status = EVENT_TIMEOUT;
1004591e:	2108      	movs	r1, #8
10045920:	187b      	adds	r3, r7, r1
10045922:	2209      	movs	r2, #9
10045924:	701a      	strb	r2, [r3, #0]
				event.data = 1;//next state of pause
10045926:	187b      	adds	r3, r7, r1
10045928:	2201      	movs	r2, #1
1004592a:	805a      	strh	r2, [r3, #2]
				starttime = timer;
1004592c:	4b50      	ldr	r3, [pc, #320]	@ (10045a70 <MP3_Event_Updater+0x210>)
1004592e:	697a      	ldr	r2, [r7, #20]
10045930:	601a      	str	r2, [r3, #0]
				MP3_Event_Post(event);
10045932:	187b      	adds	r3, r7, r1
10045934:	6818      	ldr	r0, [r3, #0]
10045936:	f7ff ff81 	bl	1004583c <MP3_Event_Post>
1004593a:	e03f      	b.n	100459bc <MP3_Event_Updater+0x15c>
			}
		} else {
			if((CYCLELENGTH*((double)(100-DC)/100.0)+starttime) <= timer ){// if the speaker is playing and time is up, DC = 0 don't play, used to stop the speaker
1004593c:	4b49      	ldr	r3, [pc, #292]	@ (10045a64 <MP3_Event_Updater+0x204>)
1004593e:	781b      	ldrb	r3, [r3, #0]
10045940:	001a      	movs	r2, r3
10045942:	2364      	movs	r3, #100	@ 0x64
10045944:	1a9b      	subs	r3, r3, r2
10045946:	0018      	movs	r0, r3
10045948:	f7fc fa58 	bl	10041dfc <__aeabi_i2d>
1004594c:	2200      	movs	r2, #0
1004594e:	4b46      	ldr	r3, [pc, #280]	@ (10045a68 <MP3_Event_Updater+0x208>)
10045950:	f7fb fb34 	bl	10040fbc <__aeabi_ddiv>
10045954:	0002      	movs	r2, r0
10045956:	000b      	movs	r3, r1
10045958:	0010      	movs	r0, r2
1004595a:	0019      	movs	r1, r3
1004595c:	2200      	movs	r2, #0
1004595e:	4b43      	ldr	r3, [pc, #268]	@ (10045a6c <MP3_Event_Updater+0x20c>)
10045960:	f7fb ff66 	bl	10041830 <__aeabi_dmul>
10045964:	0002      	movs	r2, r0
10045966:	000b      	movs	r3, r1
10045968:	0014      	movs	r4, r2
1004596a:	001d      	movs	r5, r3
1004596c:	4b40      	ldr	r3, [pc, #256]	@ (10045a70 <MP3_Event_Updater+0x210>)
1004596e:	681b      	ldr	r3, [r3, #0]
10045970:	0018      	movs	r0, r3
10045972:	f7fc fa71 	bl	10041e58 <__aeabi_ui2d>
10045976:	0002      	movs	r2, r0
10045978:	000b      	movs	r3, r1
1004597a:	0020      	movs	r0, r4
1004597c:	0029      	movs	r1, r5
1004597e:	f7fa ff57 	bl	10040830 <__aeabi_dadd>
10045982:	0002      	movs	r2, r0
10045984:	000b      	movs	r3, r1
10045986:	0014      	movs	r4, r2
10045988:	001d      	movs	r5, r3
1004598a:	6978      	ldr	r0, [r7, #20]
1004598c:	f7fc fa64 	bl	10041e58 <__aeabi_ui2d>
10045990:	0002      	movs	r2, r0
10045992:	000b      	movs	r3, r1
10045994:	0020      	movs	r0, r4
10045996:	0029      	movs	r1, r5
10045998:	f7fa fdf4 	bl	10040584 <__aeabi_dcmple>
1004599c:	1e03      	subs	r3, r0, #0
1004599e:	d00d      	beq.n	100459bc <MP3_Event_Updater+0x15c>
				event.status = EVENT_TIMEOUT;
100459a0:	2108      	movs	r1, #8
100459a2:	187b      	adds	r3, r7, r1
100459a4:	2209      	movs	r2, #9
100459a6:	701a      	strb	r2, [r3, #0]
				event.data = 0;//next state of pause
100459a8:	187b      	adds	r3, r7, r1
100459aa:	2200      	movs	r2, #0
100459ac:	805a      	strh	r2, [r3, #2]
				starttime = timer;
100459ae:	4b30      	ldr	r3, [pc, #192]	@ (10045a70 <MP3_Event_Updater+0x210>)
100459b0:	697a      	ldr	r2, [r7, #20]
100459b2:	601a      	str	r2, [r3, #0]
				MP3_Event_Post(event);
100459b4:	187b      	adds	r3, r7, r1
100459b6:	6818      	ldr	r0, [r3, #0]
100459b8:	f7ff ff40 	bl	1004583c <MP3_Event_Post>
			}
		}
	}

	//check for init timer events
    if(((timer-inittime) >= 3000) && !initialized){//wait for the speaker to be ready for use n initialization
100459bc:	4b2d      	ldr	r3, [pc, #180]	@ (10045a74 <MP3_Event_Updater+0x214>)
100459be:	681b      	ldr	r3, [r3, #0]
100459c0:	697a      	ldr	r2, [r7, #20]
100459c2:	1ad3      	subs	r3, r2, r3
100459c4:	4a2c      	ldr	r2, [pc, #176]	@ (10045a78 <MP3_Event_Updater+0x218>)
100459c6:	4293      	cmp	r3, r2
100459c8:	d90e      	bls.n	100459e8 <MP3_Event_Updater+0x188>
100459ca:	4b2c      	ldr	r3, [pc, #176]	@ (10045a7c <MP3_Event_Updater+0x21c>)
100459cc:	781b      	ldrb	r3, [r3, #0]
100459ce:	2b00      	cmp	r3, #0
100459d0:	d10a      	bne.n	100459e8 <MP3_Event_Updater+0x188>
		event.status = EVENT_INIT;
100459d2:	2108      	movs	r1, #8
100459d4:	187b      	adds	r3, r7, r1
100459d6:	2201      	movs	r2, #1
100459d8:	701a      	strb	r2, [r3, #0]
		event.data = 0;
100459da:	187b      	adds	r3, r7, r1
100459dc:	2200      	movs	r2, #0
100459de:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
100459e0:	187b      	adds	r3, r7, r1
100459e2:	6818      	ldr	r0, [r3, #0]
100459e4:	f7ff ff2a 	bl	1004583c <MP3_Event_Post>
	}

    //check for settings update events
    if(volume != FLASH_GetVolume() || DC != FLASH_GetDutyCycle()){
100459e8:	f7fe ff82 	bl	100448f0 <FLASH_GetVolume>
100459ec:	0003      	movs	r3, r0
100459ee:	001a      	movs	r2, r3
100459f0:	4b23      	ldr	r3, [pc, #140]	@ (10045a80 <MP3_Event_Updater+0x220>)
100459f2:	781b      	ldrb	r3, [r3, #0]
100459f4:	429a      	cmp	r2, r3
100459f6:	d107      	bne.n	10045a08 <MP3_Event_Updater+0x1a8>
100459f8:	f7fe ff90 	bl	1004491c <FLASH_GetDutyCycle>
100459fc:	0003      	movs	r3, r0
100459fe:	001a      	movs	r2, r3
10045a00:	4b18      	ldr	r3, [pc, #96]	@ (10045a64 <MP3_Event_Updater+0x204>)
10045a02:	781b      	ldrb	r3, [r3, #0]
10045a04:	429a      	cmp	r2, r3
10045a06:	d014      	beq.n	10045a32 <MP3_Event_Updater+0x1d2>
    	event.status = EVENT_SETTINGS;
10045a08:	2408      	movs	r4, #8
10045a0a:	193b      	adds	r3, r7, r4
10045a0c:	220a      	movs	r2, #10
10045a0e:	701a      	strb	r2, [r3, #0]
    	event.data = (volume == FLASH_GetVolume());
10045a10:	f7fe ff6e 	bl	100448f0 <FLASH_GetVolume>
10045a14:	0003      	movs	r3, r0
10045a16:	001a      	movs	r2, r3
10045a18:	4b19      	ldr	r3, [pc, #100]	@ (10045a80 <MP3_Event_Updater+0x220>)
10045a1a:	781b      	ldrb	r3, [r3, #0]
10045a1c:	1ad3      	subs	r3, r2, r3
10045a1e:	425a      	negs	r2, r3
10045a20:	4153      	adcs	r3, r2
10045a22:	b2db      	uxtb	r3, r3
10045a24:	001a      	movs	r2, r3
10045a26:	193b      	adds	r3, r7, r4
10045a28:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10045a2a:	193b      	adds	r3, r7, r4
10045a2c:	6818      	ldr	r0, [r3, #0]
10045a2e:	f7ff ff05 	bl	1004583c <MP3_Event_Post>
    }
    return event;
10045a32:	210c      	movs	r1, #12
10045a34:	187b      	adds	r3, r7, r1
10045a36:	2208      	movs	r2, #8
10045a38:	18ba      	adds	r2, r7, r2
10045a3a:	6812      	ldr	r2, [r2, #0]
10045a3c:	601a      	str	r2, [r3, #0]
10045a3e:	187a      	adds	r2, r7, r1
10045a40:	2300      	movs	r3, #0
10045a42:	8811      	ldrh	r1, [r2, #0]
10045a44:	0409      	lsls	r1, r1, #16
10045a46:	0c09      	lsrs	r1, r1, #16
10045a48:	0c1b      	lsrs	r3, r3, #16
10045a4a:	041b      	lsls	r3, r3, #16
10045a4c:	430b      	orrs	r3, r1
10045a4e:	8852      	ldrh	r2, [r2, #2]
10045a50:	0412      	lsls	r2, r2, #16
10045a52:	041b      	lsls	r3, r3, #16
10045a54:	0c1b      	lsrs	r3, r3, #16
10045a56:	4313      	orrs	r3, r2
}
10045a58:	0018      	movs	r0, r3
10045a5a:	46bd      	mov	sp, r7
10045a5c:	b007      	add	sp, #28
10045a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10045a60:	20001be8 	.word	0x20001be8
10045a64:	20001be9 	.word	0x20001be9
10045a68:	40590000 	.word	0x40590000
10045a6c:	41224f80 	.word	0x41224f80
10045a70:	20001bec 	.word	0x20001bec
10045a74:	20001bf0 	.word	0x20001bf0
10045a78:	00000bb7 	.word	0x00000bb7
10045a7c:	20001bf4 	.word	0x20001bf4
10045a80:	20001bea 	.word	0x20001bea

10045a84 <MP3_Event_Handler>:
 * @Function: MP3_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t MP3_Event_Handler(Event_t event){
10045a84:	b5b0      	push	{r4, r5, r7, lr}
10045a86:	b09e      	sub	sp, #120	@ 0x78
10045a88:	af00      	add	r7, sp, #0
10045a8a:	1d3b      	adds	r3, r7, #4
10045a8c:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_INIT){
10045a8e:	1d3b      	adds	r3, r7, #4
10045a90:	781b      	ldrb	r3, [r3, #0]
10045a92:	b25b      	sxtb	r3, r3
10045a94:	2b01      	cmp	r3, #1
10045a96:	d000      	beq.n	10045a9a <MP3_Event_Handler+0x16>
10045a98:	e0bd      	b.n	10045c16 <MP3_Event_Handler+0x192>
		//7E FF 06 08 00 00 01 xx EF //repeat folder
//		char send[4] = {0x08, 0x00, 0x00, 0x01};
//		MP3_SendData(send);

		{
		char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
10045a9a:	2154      	movs	r1, #84	@ 0x54
10045a9c:	187b      	adds	r3, r7, r1
10045a9e:	220e      	movs	r2, #14
10045aa0:	601a      	str	r2, [r3, #0]
		MP3_SendData(send);
10045aa2:	187b      	adds	r3, r7, r1
10045aa4:	0018      	movs	r0, r3
10045aa6:	f7ff fd3f 	bl	10045528 <MP3_SendData>
		}
		uint8_t scanning = 1;
10045aaa:	2377      	movs	r3, #119	@ 0x77
10045aac:	18fb      	adds	r3, r7, r3
10045aae:	2201      	movs	r2, #1
10045ab0:	701a      	strb	r2, [r3, #0]
		numfolders = 1;
10045ab2:	4bc0      	ldr	r3, [pc, #768]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045ab4:	2201      	movs	r2, #1
10045ab6:	701a      	strb	r2, [r3, #0]
		FIFO tempFolders = FIFO_Create();
10045ab8:	f7fe fd8a 	bl	100445d0 <FIFO_Create>
10045abc:	0003      	movs	r3, r0
10045abe:	66bb      	str	r3, [r7, #104]	@ 0x68
		while(scanning){
10045ac0:	e054      	b.n	10045b6c <MP3_Event_Handler+0xe8>
			{
			char send[4] = {0x4E, 0x00, 0x00, numfolders};//query the number of files on the micrSD
10045ac2:	2150      	movs	r1, #80	@ 0x50
10045ac4:	187b      	adds	r3, r7, r1
10045ac6:	224e      	movs	r2, #78	@ 0x4e
10045ac8:	701a      	strb	r2, [r3, #0]
10045aca:	187b      	adds	r3, r7, r1
10045acc:	2200      	movs	r2, #0
10045ace:	705a      	strb	r2, [r3, #1]
10045ad0:	187b      	adds	r3, r7, r1
10045ad2:	2200      	movs	r2, #0
10045ad4:	709a      	strb	r2, [r3, #2]
10045ad6:	4bb7      	ldr	r3, [pc, #732]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045ad8:	781a      	ldrb	r2, [r3, #0]
10045ada:	187b      	adds	r3, r7, r1
10045adc:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10045ade:	187b      	adds	r3, r7, r1
10045ae0:	0018      	movs	r0, r3
10045ae2:	f7ff fd21 	bl	10045528 <MP3_SendData>
			}
			uint32_t time = TIMERS_GetMilliSeconds();
10045ae6:	f000 ff7d 	bl	100469e4 <TIMERS_GetMilliSeconds>
10045aea:	0003      	movs	r3, r0
10045aec:	667b      	str	r3, [r7, #100]	@ 0x64
			while(!parsePacket(LPUART_ReadRx()) && (time+1000) > TIMERS_GetMilliSeconds());
10045aee:	46c0      	nop			@ (mov r8, r8)
10045af0:	f001 f8ae 	bl	10046c50 <LPUART_ReadRx>
10045af4:	0003      	movs	r3, r0
10045af6:	0018      	movs	r0, r3
10045af8:	f7ff fd72 	bl	100455e0 <parsePacket>
10045afc:	1e03      	subs	r3, r0, #0
10045afe:	d108      	bne.n	10045b12 <MP3_Event_Handler+0x8e>
10045b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10045b02:	22fa      	movs	r2, #250	@ 0xfa
10045b04:	0092      	lsls	r2, r2, #2
10045b06:	189c      	adds	r4, r3, r2
10045b08:	f000 ff6c 	bl	100469e4 <TIMERS_GetMilliSeconds>
10045b0c:	0003      	movs	r3, r0
10045b0e:	429c      	cmp	r4, r3
10045b10:	d8ee      	bhi.n	10045af0 <MP3_Event_Handler+0x6c>
			if((time+1000) < TIMERS_GetMilliSeconds()){
10045b12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
10045b14:	22fa      	movs	r2, #250	@ 0xfa
10045b16:	0092      	lsls	r2, r2, #2
10045b18:	189c      	adds	r4, r3, r2
10045b1a:	f000 ff63 	bl	100469e4 <TIMERS_GetMilliSeconds>
10045b1e:	0003      	movs	r3, r0
10045b20:	429c      	cmp	r4, r3
10045b22:	d322      	bcc.n	10045b6a <MP3_Event_Handler+0xe6>
				continue;// reattempt communication
			}
			if(Packet.command==0x4E){
10045b24:	4ba4      	ldr	r3, [pc, #656]	@ (10045db8 <MP3_Event_Handler+0x334>)
10045b26:	781b      	ldrb	r3, [r3, #0]
10045b28:	2b4e      	cmp	r3, #78	@ 0x4e
10045b2a:	d115      	bne.n	10045b58 <MP3_Event_Handler+0xd4>
				numfolders++;
10045b2c:	4ba1      	ldr	r3, [pc, #644]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045b2e:	781b      	ldrb	r3, [r3, #0]
10045b30:	3301      	adds	r3, #1
10045b32:	b2da      	uxtb	r2, r3
10045b34:	4b9f      	ldr	r3, [pc, #636]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045b36:	701a      	strb	r2, [r3, #0]
				FIFO_Enqueue(tempFolders, (Event_t){EVENT_NONE, Packet.Param2});
10045b38:	214c      	movs	r1, #76	@ 0x4c
10045b3a:	187b      	adds	r3, r7, r1
10045b3c:	2200      	movs	r2, #0
10045b3e:	701a      	strb	r2, [r3, #0]
10045b40:	4b9d      	ldr	r3, [pc, #628]	@ (10045db8 <MP3_Event_Handler+0x334>)
10045b42:	78db      	ldrb	r3, [r3, #3]
10045b44:	001a      	movs	r2, r3
10045b46:	187b      	adds	r3, r7, r1
10045b48:	805a      	strh	r2, [r3, #2]
10045b4a:	187b      	adds	r3, r7, r1
10045b4c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
10045b4e:	6819      	ldr	r1, [r3, #0]
10045b50:	0010      	movs	r0, r2
10045b52:	f7fe fd7a 	bl	1004464a <FIFO_Enqueue>
10045b56:	e009      	b.n	10045b6c <MP3_Event_Handler+0xe8>
			}else if(Packet.command == 0x40){
10045b58:	4b97      	ldr	r3, [pc, #604]	@ (10045db8 <MP3_Event_Handler+0x334>)
10045b5a:	781b      	ldrb	r3, [r3, #0]
10045b5c:	2b40      	cmp	r3, #64	@ 0x40
10045b5e:	d105      	bne.n	10045b6c <MP3_Event_Handler+0xe8>
				scanning = 0;
10045b60:	2377      	movs	r3, #119	@ 0x77
10045b62:	18fb      	adds	r3, r7, r3
10045b64:	2200      	movs	r2, #0
10045b66:	701a      	strb	r2, [r3, #0]
10045b68:	e000      	b.n	10045b6c <MP3_Event_Handler+0xe8>
				continue;// reattempt communication
10045b6a:	46c0      	nop			@ (mov r8, r8)
		while(scanning){
10045b6c:	2377      	movs	r3, #119	@ 0x77
10045b6e:	18fb      	adds	r3, r7, r3
10045b70:	781b      	ldrb	r3, [r3, #0]
10045b72:	2b00      	cmp	r3, #0
10045b74:	d1a5      	bne.n	10045ac2 <MP3_Event_Handler+0x3e>
			}
		}
		numfolders--;
10045b76:	4b8f      	ldr	r3, [pc, #572]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045b78:	781b      	ldrb	r3, [r3, #0]
10045b7a:	3b01      	subs	r3, #1
10045b7c:	b2da      	uxtb	r2, r3
10045b7e:	4b8d      	ldr	r3, [pc, #564]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045b80:	701a      	strb	r2, [r3, #0]
		folders = malloc(sizeof(uint8_t)*numfolders);
10045b82:	4b8c      	ldr	r3, [pc, #560]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045b84:	781b      	ldrb	r3, [r3, #0]
10045b86:	0018      	movs	r0, r3
10045b88:	f021 fe5c 	bl	10067844 <malloc>
10045b8c:	0003      	movs	r3, r0
10045b8e:	001a      	movs	r2, r3
10045b90:	4b8a      	ldr	r3, [pc, #552]	@ (10045dbc <MP3_Event_Handler+0x338>)
10045b92:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < numfolders; i++){
10045b94:	2300      	movs	r3, #0
10045b96:	673b      	str	r3, [r7, #112]	@ 0x70
10045b98:	e013      	b.n	10045bc2 <MP3_Event_Handler+0x13e>
			folders[i] = FIFO_Dequeue(tempFolders).data;
10045b9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10045b9c:	0018      	movs	r0, r3
10045b9e:	f7fe fd8a 	bl	100446b6 <FIFO_Dequeue>
10045ba2:	0003      	movs	r3, r0
10045ba4:	001a      	movs	r2, r3
10045ba6:	215c      	movs	r1, #92	@ 0x5c
10045ba8:	187b      	adds	r3, r7, r1
10045baa:	601a      	str	r2, [r3, #0]
10045bac:	187b      	adds	r3, r7, r1
10045bae:	8859      	ldrh	r1, [r3, #2]
10045bb0:	4b82      	ldr	r3, [pc, #520]	@ (10045dbc <MP3_Event_Handler+0x338>)
10045bb2:	681a      	ldr	r2, [r3, #0]
10045bb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10045bb6:	18d3      	adds	r3, r2, r3
10045bb8:	b2ca      	uxtb	r2, r1
10045bba:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < numfolders; i++){
10045bbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10045bbe:	3301      	adds	r3, #1
10045bc0:	673b      	str	r3, [r7, #112]	@ 0x70
10045bc2:	4b7c      	ldr	r3, [pc, #496]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045bc4:	781b      	ldrb	r3, [r3, #0]
10045bc6:	001a      	movs	r2, r3
10045bc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10045bca:	4293      	cmp	r3, r2
10045bcc:	dbe5      	blt.n	10045b9a <MP3_Event_Handler+0x116>
		}
		FIFO_Destroy(tempFolders);
10045bce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
10045bd0:	0018      	movs	r0, r3
10045bd2:	f7fe fd18 	bl	10044606 <FIFO_Destroy>
		initialized = 1;
10045bd6:	4b7a      	ldr	r3, [pc, #488]	@ (10045dc0 <MP3_Event_Handler+0x33c>)
10045bd8:	2201      	movs	r2, #1
10045bda:	701a      	strb	r2, [r3, #0]
		char send[4] = {0x06, 0x00, 0x00, (uint8_t)(((uint16_t)volume)*30/100)};
10045bdc:	2458      	movs	r4, #88	@ 0x58
10045bde:	193b      	adds	r3, r7, r4
10045be0:	2206      	movs	r2, #6
10045be2:	701a      	strb	r2, [r3, #0]
10045be4:	193b      	adds	r3, r7, r4
10045be6:	2200      	movs	r2, #0
10045be8:	705a      	strb	r2, [r3, #1]
10045bea:	193b      	adds	r3, r7, r4
10045bec:	2200      	movs	r2, #0
10045bee:	709a      	strb	r2, [r3, #2]
10045bf0:	4b74      	ldr	r3, [pc, #464]	@ (10045dc4 <MP3_Event_Handler+0x340>)
10045bf2:	781b      	ldrb	r3, [r3, #0]
10045bf4:	001a      	movs	r2, r3
10045bf6:	0013      	movs	r3, r2
10045bf8:	011b      	lsls	r3, r3, #4
10045bfa:	1a9b      	subs	r3, r3, r2
10045bfc:	005b      	lsls	r3, r3, #1
10045bfe:	2164      	movs	r1, #100	@ 0x64
10045c00:	0018      	movs	r0, r3
10045c02:	f7fa fba7 	bl	10040354 <__divsi3>
10045c06:	0003      	movs	r3, r0
10045c08:	b2da      	uxtb	r2, r3
10045c0a:	193b      	adds	r3, r7, r4
10045c0c:	70da      	strb	r2, [r3, #3]
		MP3_SendData(send);
10045c0e:	193b      	adds	r3, r7, r4
10045c10:	0018      	movs	r0, r3
10045c12:	f7ff fc89 	bl	10045528 <MP3_SendData>
	}
	if(event.status == EVENT_TIMEOUT){
10045c16:	1d3b      	adds	r3, r7, #4
10045c18:	781b      	ldrb	r3, [r3, #0]
10045c1a:	b25b      	sxtb	r3, r3
10045c1c:	2b09      	cmp	r3, #9
10045c1e:	d132      	bne.n	10045c86 <MP3_Event_Handler+0x202>
		//send either play or stop to the mp3 player
		if(event.data == 1){//pause
10045c20:	1d3b      	adds	r3, r7, #4
10045c22:	885b      	ldrh	r3, [r3, #2]
10045c24:	2b01      	cmp	r3, #1
10045c26:	d10d      	bne.n	10045c44 <MP3_Event_Handler+0x1c0>
			pause = event.data;
10045c28:	1d3b      	adds	r3, r7, #4
10045c2a:	885b      	ldrh	r3, [r3, #2]
10045c2c:	b2da      	uxtb	r2, r3
10045c2e:	4b66      	ldr	r3, [pc, #408]	@ (10045dc8 <MP3_Event_Handler+0x344>)
10045c30:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x0E, 0x00, 0x00, 0x00};
10045c32:	2148      	movs	r1, #72	@ 0x48
10045c34:	187b      	adds	r3, r7, r1
10045c36:	220e      	movs	r2, #14
10045c38:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10045c3a:	187b      	adds	r3, r7, r1
10045c3c:	0018      	movs	r0, r3
10045c3e:	f7ff fc73 	bl	10045528 <MP3_SendData>
10045c42:	e020      	b.n	10045c86 <MP3_Event_Handler+0x202>

		}else if(event.data == 0){//play
10045c44:	1d3b      	adds	r3, r7, #4
10045c46:	885b      	ldrh	r3, [r3, #2]
10045c48:	2b00      	cmp	r3, #0
10045c4a:	d11c      	bne.n	10045c86 <MP3_Event_Handler+0x202>
			pause = event.data;
10045c4c:	1d3b      	adds	r3, r7, #4
10045c4e:	885b      	ldrh	r3, [r3, #2]
10045c50:	b2da      	uxtb	r2, r3
10045c52:	4b5d      	ldr	r3, [pc, #372]	@ (10045dc8 <MP3_Event_Handler+0x344>)
10045c54:	701a      	strb	r2, [r3, #0]
			char send[4] = {0x03, 0x00, 0x00, firsttrack+track-1};
10045c56:	2144      	movs	r1, #68	@ 0x44
10045c58:	187b      	adds	r3, r7, r1
10045c5a:	2203      	movs	r2, #3
10045c5c:	701a      	strb	r2, [r3, #0]
10045c5e:	187b      	adds	r3, r7, r1
10045c60:	2200      	movs	r2, #0
10045c62:	705a      	strb	r2, [r3, #1]
10045c64:	187b      	adds	r3, r7, r1
10045c66:	2200      	movs	r2, #0
10045c68:	709a      	strb	r2, [r3, #2]
10045c6a:	4b58      	ldr	r3, [pc, #352]	@ (10045dcc <MP3_Event_Handler+0x348>)
10045c6c:	781a      	ldrb	r2, [r3, #0]
10045c6e:	4b58      	ldr	r3, [pc, #352]	@ (10045dd0 <MP3_Event_Handler+0x34c>)
10045c70:	781b      	ldrb	r3, [r3, #0]
10045c72:	18d3      	adds	r3, r2, r3
10045c74:	b2db      	uxtb	r3, r3
10045c76:	3b01      	subs	r3, #1
10045c78:	b2da      	uxtb	r2, r3
10045c7a:	187b      	adds	r3, r7, r1
10045c7c:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10045c7e:	187b      	adds	r3, r7, r1
10045c80:	0018      	movs	r0, r3
10045c82:	f7ff fc51 	bl	10045528 <MP3_SendData>
		}

	}if(event.status == EVENT_PLAY){
10045c86:	1d3b      	adds	r3, r7, #4
10045c88:	781b      	ldrb	r3, [r3, #0]
10045c8a:	b25b      	sxtb	r3, r3
10045c8c:	2b0b      	cmp	r3, #11
10045c8e:	d000      	beq.n	10045c92 <MP3_Event_Handler+0x20e>
10045c90:	e0c3      	b.n	10045e1a <MP3_Event_Handler+0x396>
		char text[30];
		sprintf(text, "Play event: %d, %d", event.data>>8, (event.data&0xFF));
10045c92:	1d3b      	adds	r3, r7, #4
10045c94:	885b      	ldrh	r3, [r3, #2]
10045c96:	0a1b      	lsrs	r3, r3, #8
10045c98:	b29b      	uxth	r3, r3
10045c9a:	001c      	movs	r4, r3
10045c9c:	1d3b      	adds	r3, r7, #4
10045c9e:	885b      	ldrh	r3, [r3, #2]
10045ca0:	001a      	movs	r2, r3
10045ca2:	23ff      	movs	r3, #255	@ 0xff
10045ca4:	4013      	ands	r3, r2
10045ca6:	494b      	ldr	r1, [pc, #300]	@ (10045dd4 <MP3_Event_Handler+0x350>)
10045ca8:	2524      	movs	r5, #36	@ 0x24
10045caa:	1978      	adds	r0, r7, r5
10045cac:	0022      	movs	r2, r4
10045cae:	f021 ffb3 	bl	10067c18 <siprintf>
		discountprintf(text);
10045cb2:	197b      	adds	r3, r7, r5
10045cb4:	0018      	movs	r0, r3
10045cb6:	f7fe fc65 	bl	10044584 <discountprintf>
		Scheduler_Event_Post(event);
10045cba:	1d3b      	adds	r3, r7, #4
10045cbc:	6818      	ldr	r0, [r3, #0]
10045cbe:	f000 fcfd 	bl	100466bc <Scheduler_Event_Post>
		starttime = TIMERS_GetMilliSeconds();
10045cc2:	f000 fe8f 	bl	100469e4 <TIMERS_GetMilliSeconds>
10045cc6:	0002      	movs	r2, r0
10045cc8:	4b43      	ldr	r3, [pc, #268]	@ (10045dd8 <MP3_Event_Handler+0x354>)
10045cca:	601a      	str	r2, [r3, #0]
		if(event.data>>8 != 0 && (event.data>>8) <= numfolders &&  (event.data&0xFF)!= 0 && (event.data&0xFF) <= folders[(event.data>>8)-1]){
10045ccc:	1d3b      	adds	r3, r7, #4
10045cce:	885b      	ldrh	r3, [r3, #2]
10045cd0:	0a1b      	lsrs	r3, r3, #8
10045cd2:	b29b      	uxth	r3, r3
10045cd4:	2b00      	cmp	r3, #0
10045cd6:	d100      	bne.n	10045cda <MP3_Event_Handler+0x256>
10045cd8:	e082      	b.n	10045de0 <MP3_Event_Handler+0x35c>
10045cda:	1d3b      	adds	r3, r7, #4
10045cdc:	885b      	ldrh	r3, [r3, #2]
10045cde:	0a1b      	lsrs	r3, r3, #8
10045ce0:	b29b      	uxth	r3, r3
10045ce2:	4a34      	ldr	r2, [pc, #208]	@ (10045db4 <MP3_Event_Handler+0x330>)
10045ce4:	7812      	ldrb	r2, [r2, #0]
10045ce6:	4293      	cmp	r3, r2
10045ce8:	d900      	bls.n	10045cec <MP3_Event_Handler+0x268>
10045cea:	e079      	b.n	10045de0 <MP3_Event_Handler+0x35c>
10045cec:	1d3b      	adds	r3, r7, #4
10045cee:	885b      	ldrh	r3, [r3, #2]
10045cf0:	001a      	movs	r2, r3
10045cf2:	23ff      	movs	r3, #255	@ 0xff
10045cf4:	4013      	ands	r3, r2
10045cf6:	d100      	bne.n	10045cfa <MP3_Event_Handler+0x276>
10045cf8:	e072      	b.n	10045de0 <MP3_Event_Handler+0x35c>
10045cfa:	1d3b      	adds	r3, r7, #4
10045cfc:	885b      	ldrh	r3, [r3, #2]
10045cfe:	001a      	movs	r2, r3
10045d00:	23ff      	movs	r3, #255	@ 0xff
10045d02:	401a      	ands	r2, r3
10045d04:	4b2d      	ldr	r3, [pc, #180]	@ (10045dbc <MP3_Event_Handler+0x338>)
10045d06:	6819      	ldr	r1, [r3, #0]
10045d08:	1d3b      	adds	r3, r7, #4
10045d0a:	885b      	ldrh	r3, [r3, #2]
10045d0c:	0a1b      	lsrs	r3, r3, #8
10045d0e:	b29b      	uxth	r3, r3
10045d10:	3b01      	subs	r3, #1
10045d12:	18cb      	adds	r3, r1, r3
10045d14:	781b      	ldrb	r3, [r3, #0]
10045d16:	429a      	cmp	r2, r3
10045d18:	dc62      	bgt.n	10045de0 <MP3_Event_Handler+0x35c>
			folder = event.data>>8;
10045d1a:	1d3b      	adds	r3, r7, #4
10045d1c:	885b      	ldrh	r3, [r3, #2]
10045d1e:	0a1b      	lsrs	r3, r3, #8
10045d20:	b29b      	uxth	r3, r3
10045d22:	b2da      	uxtb	r2, r3
10045d24:	4b2d      	ldr	r3, [pc, #180]	@ (10045ddc <MP3_Event_Handler+0x358>)
10045d26:	701a      	strb	r2, [r3, #0]
			track = event.data&0xFF;
10045d28:	1d3b      	adds	r3, r7, #4
10045d2a:	885b      	ldrh	r3, [r3, #2]
10045d2c:	b2da      	uxtb	r2, r3
10045d2e:	4b28      	ldr	r3, [pc, #160]	@ (10045dd0 <MP3_Event_Handler+0x34c>)
10045d30:	701a      	strb	r2, [r3, #0]
			firsttrack = 1;
10045d32:	4b26      	ldr	r3, [pc, #152]	@ (10045dcc <MP3_Event_Handler+0x348>)
10045d34:	2201      	movs	r2, #1
10045d36:	701a      	strb	r2, [r3, #0]
			pause = 0;
10045d38:	4b23      	ldr	r3, [pc, #140]	@ (10045dc8 <MP3_Event_Handler+0x344>)
10045d3a:	2200      	movs	r2, #0
10045d3c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < folder-1; i ++){
10045d3e:	2300      	movs	r3, #0
10045d40:	66fb      	str	r3, [r7, #108]	@ 0x6c
10045d42:	e00d      	b.n	10045d60 <MP3_Event_Handler+0x2dc>
				firsttrack+= folders[i];
10045d44:	4b1d      	ldr	r3, [pc, #116]	@ (10045dbc <MP3_Event_Handler+0x338>)
10045d46:	681a      	ldr	r2, [r3, #0]
10045d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10045d4a:	18d3      	adds	r3, r2, r3
10045d4c:	781a      	ldrb	r2, [r3, #0]
10045d4e:	4b1f      	ldr	r3, [pc, #124]	@ (10045dcc <MP3_Event_Handler+0x348>)
10045d50:	781b      	ldrb	r3, [r3, #0]
10045d52:	18d3      	adds	r3, r2, r3
10045d54:	b2da      	uxtb	r2, r3
10045d56:	4b1d      	ldr	r3, [pc, #116]	@ (10045dcc <MP3_Event_Handler+0x348>)
10045d58:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < folder-1; i ++){
10045d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10045d5c:	3301      	adds	r3, #1
10045d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
10045d60:	4b1e      	ldr	r3, [pc, #120]	@ (10045ddc <MP3_Event_Handler+0x358>)
10045d62:	781b      	ldrb	r3, [r3, #0]
10045d64:	3b01      	subs	r3, #1
10045d66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
10045d68:	429a      	cmp	r2, r3
10045d6a:	dbeb      	blt.n	10045d44 <MP3_Event_Handler+0x2c0>
			}
			{
			char send2[4] = {0x03, 0x00, 0x00, firsttrack+track-1};
10045d6c:	2120      	movs	r1, #32
10045d6e:	187b      	adds	r3, r7, r1
10045d70:	2203      	movs	r2, #3
10045d72:	701a      	strb	r2, [r3, #0]
10045d74:	187b      	adds	r3, r7, r1
10045d76:	2200      	movs	r2, #0
10045d78:	705a      	strb	r2, [r3, #1]
10045d7a:	187b      	adds	r3, r7, r1
10045d7c:	2200      	movs	r2, #0
10045d7e:	709a      	strb	r2, [r3, #2]
10045d80:	4b12      	ldr	r3, [pc, #72]	@ (10045dcc <MP3_Event_Handler+0x348>)
10045d82:	781a      	ldrb	r2, [r3, #0]
10045d84:	4b12      	ldr	r3, [pc, #72]	@ (10045dd0 <MP3_Event_Handler+0x34c>)
10045d86:	781b      	ldrb	r3, [r3, #0]
10045d88:	18d3      	adds	r3, r2, r3
10045d8a:	b2db      	uxtb	r3, r3
10045d8c:	3b01      	subs	r3, #1
10045d8e:	b2da      	uxtb	r2, r3
10045d90:	187b      	adds	r3, r7, r1
10045d92:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send2);
10045d94:	187b      	adds	r3, r7, r1
10045d96:	0018      	movs	r0, r3
10045d98:	f7ff fbc6 	bl	10045528 <MP3_SendData>
			HAL_Delay(100);
10045d9c:	2064      	movs	r0, #100	@ 0x64
10045d9e:	f001 ffe1 	bl	10047d64 <HAL_Delay>
			}
			{
			char send[4] = {0x0D, 0x00, 0x00, 0x00};
10045da2:	211c      	movs	r1, #28
10045da4:	187b      	adds	r3, r7, r1
10045da6:	220d      	movs	r2, #13
10045da8:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10045daa:	187b      	adds	r3, r7, r1
10045dac:	0018      	movs	r0, r3
10045dae:	f7ff fbbb 	bl	10045528 <MP3_SendData>
			{
10045db2:	e032      	b.n	10045e1a <MP3_Event_Handler+0x396>
10045db4:	20001c04 	.word	0x20001c04
10045db8:	20001bf8 	.word	0x20001bf8
10045dbc:	20001c00 	.word	0x20001c00
10045dc0:	20001bf4 	.word	0x20001bf4
10045dc4:	20001bea 	.word	0x20001bea
10045dc8:	20001be8 	.word	0x20001be8
10045dcc:	20001bfe 	.word	0x20001bfe
10045dd0:	20001bfc 	.word	0x20001bfc
10045dd4:	10068fc0 	.word	0x10068fc0
10045dd8:	20001bec 	.word	0x20001bec
10045ddc:	20001bfd 	.word	0x20001bfd
			}
		}else {

			pause = 0x02;
10045de0:	4b57      	ldr	r3, [pc, #348]	@ (10045f40 <MP3_Event_Handler+0x4bc>)
10045de2:	2202      	movs	r2, #2
10045de4:	701a      	strb	r2, [r3, #0]
			{
			char send[4] = {0x0E, 0x00, 0x00, 0x00};//pause
10045de6:	2118      	movs	r1, #24
10045de8:	187b      	adds	r3, r7, r1
10045dea:	220e      	movs	r2, #14
10045dec:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10045dee:	187b      	adds	r3, r7, r1
10045df0:	0018      	movs	r0, r3
10045df2:	f7ff fb99 	bl	10045528 <MP3_SendData>
			}
			if(!(event.data>>8) && !(event.data&0xFF)){
10045df6:	1d3b      	adds	r3, r7, #4
10045df8:	885b      	ldrh	r3, [r3, #2]
10045dfa:	0a1b      	lsrs	r3, r3, #8
10045dfc:	b29b      	uxth	r3, r3
10045dfe:	2b00      	cmp	r3, #0
10045e00:	d10b      	bne.n	10045e1a <MP3_Event_Handler+0x396>
10045e02:	1d3b      	adds	r3, r7, #4
10045e04:	885b      	ldrh	r3, [r3, #2]
10045e06:	001a      	movs	r2, r3
10045e08:	23ff      	movs	r3, #255	@ 0xff
10045e0a:	4013      	ands	r3, r2
10045e0c:	d105      	bne.n	10045e1a <MP3_Event_Handler+0x396>
				folder = 0;
10045e0e:	4b4d      	ldr	r3, [pc, #308]	@ (10045f44 <MP3_Event_Handler+0x4c0>)
10045e10:	2200      	movs	r2, #0
10045e12:	701a      	strb	r2, [r3, #0]
				track = 0;
10045e14:	4b4c      	ldr	r3, [pc, #304]	@ (10045f48 <MP3_Event_Handler+0x4c4>)
10045e16:	2200      	movs	r2, #0
10045e18:	701a      	strb	r2, [r3, #0]
//			char send[4] = {0x0A, 0x00, 0x00, 0x00};//enter low power mode
//			MP3_SendData(send);
		}


	}if(event.status == EVENT_SETTINGS){
10045e1a:	1d3b      	adds	r3, r7, #4
10045e1c:	781b      	ldrb	r3, [r3, #0]
10045e1e:	b25b      	sxtb	r3, r3
10045e20:	2b0a      	cmp	r3, #10
10045e22:	d12c      	bne.n	10045e7e <MP3_Event_Handler+0x3fa>
		DC = FLASH_GetDutyCycle();
10045e24:	f7fe fd7a 	bl	1004491c <FLASH_GetDutyCycle>
10045e28:	0003      	movs	r3, r0
10045e2a:	001a      	movs	r2, r3
10045e2c:	4b47      	ldr	r3, [pc, #284]	@ (10045f4c <MP3_Event_Handler+0x4c8>)
10045e2e:	701a      	strb	r2, [r3, #0]
		volume = FLASH_GetVolume();
10045e30:	f7fe fd5e 	bl	100448f0 <FLASH_GetVolume>
10045e34:	0003      	movs	r3, r0
10045e36:	001a      	movs	r2, r3
10045e38:	4b45      	ldr	r3, [pc, #276]	@ (10045f50 <MP3_Event_Handler+0x4cc>)
10045e3a:	701a      	strb	r2, [r3, #0]
//		char text[30];
//		sprintf(text, "Settings event: %d, %d", event.data>>8, (event.data&0xFF));
//		discountprintf(text);
		if(!event.data){//volume == FLASH_GetVolume()
10045e3c:	1d3b      	adds	r3, r7, #4
10045e3e:	885b      	ldrh	r3, [r3, #2]
10045e40:	2b00      	cmp	r3, #0
10045e42:	d11c      	bne.n	10045e7e <MP3_Event_Handler+0x3fa>
			//send new volume to the mp3 player
			char send[4] = {0x06, 0x00, 0x00, (uint8_t)(((uint16_t)volume)*30/100)};
10045e44:	2414      	movs	r4, #20
10045e46:	193b      	adds	r3, r7, r4
10045e48:	2206      	movs	r2, #6
10045e4a:	701a      	strb	r2, [r3, #0]
10045e4c:	193b      	adds	r3, r7, r4
10045e4e:	2200      	movs	r2, #0
10045e50:	705a      	strb	r2, [r3, #1]
10045e52:	193b      	adds	r3, r7, r4
10045e54:	2200      	movs	r2, #0
10045e56:	709a      	strb	r2, [r3, #2]
10045e58:	4b3d      	ldr	r3, [pc, #244]	@ (10045f50 <MP3_Event_Handler+0x4cc>)
10045e5a:	781b      	ldrb	r3, [r3, #0]
10045e5c:	001a      	movs	r2, r3
10045e5e:	0013      	movs	r3, r2
10045e60:	011b      	lsls	r3, r3, #4
10045e62:	1a9b      	subs	r3, r3, r2
10045e64:	005b      	lsls	r3, r3, #1
10045e66:	2164      	movs	r1, #100	@ 0x64
10045e68:	0018      	movs	r0, r3
10045e6a:	f7fa fa73 	bl	10040354 <__divsi3>
10045e6e:	0003      	movs	r3, r0
10045e70:	b2da      	uxtb	r2, r3
10045e72:	193b      	adds	r3, r7, r4
10045e74:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10045e76:	193b      	adds	r3, r7, r4
10045e78:	0018      	movs	r0, r3
10045e7a:	f7ff fb55 	bl	10045528 <MP3_SendData>
		}
	}if (event.status == EVENT_LPUART){
10045e7e:	1d3b      	adds	r3, r7, #4
10045e80:	781b      	ldrb	r3, [r3, #0]
10045e82:	b25b      	sxtb	r3, r3
10045e84:	2b08      	cmp	r3, #8
10045e86:	d155      	bne.n	10045f34 <MP3_Event_Handler+0x4b0>
		//USART_WriteTx(event.data);
		char rx = event.data;
10045e88:	1d3b      	adds	r3, r7, #4
10045e8a:	885a      	ldrh	r2, [r3, #2]
10045e8c:	2163      	movs	r1, #99	@ 0x63
10045e8e:	187b      	adds	r3, r7, r1
10045e90:	701a      	strb	r2, [r3, #0]
		if(rx != UARTFAILED){
10045e92:	000a      	movs	r2, r1
10045e94:	18bb      	adds	r3, r7, r2
10045e96:	781b      	ldrb	r3, [r3, #0]
10045e98:	2b25      	cmp	r3, #37	@ 0x25
10045e9a:	d04b      	beq.n	10045f34 <MP3_Event_Handler+0x4b0>
			if(parsePacket(rx)){
10045e9c:	18bb      	adds	r3, r7, r2
10045e9e:	781b      	ldrb	r3, [r3, #0]
10045ea0:	0018      	movs	r0, r3
10045ea2:	f7ff fb9d 	bl	100455e0 <parsePacket>
10045ea6:	1e03      	subs	r3, r0, #0
10045ea8:	d044      	beq.n	10045f34 <MP3_Event_Handler+0x4b0>
				if(Packet.command == 0x3D){
10045eaa:	4b2a      	ldr	r3, [pc, #168]	@ (10045f54 <MP3_Event_Handler+0x4d0>)
10045eac:	781b      	ldrb	r3, [r3, #0]
10045eae:	2b3d      	cmp	r3, #61	@ 0x3d
10045eb0:	d140      	bne.n	10045f34 <MP3_Event_Handler+0x4b0>
					if(Packet.Param2 != lastplayed){//prevent the mp3 play from sending double
10045eb2:	4b28      	ldr	r3, [pc, #160]	@ (10045f54 <MP3_Event_Handler+0x4d0>)
10045eb4:	78da      	ldrb	r2, [r3, #3]
10045eb6:	4b28      	ldr	r3, [pc, #160]	@ (10045f58 <MP3_Event_Handler+0x4d4>)
10045eb8:	781b      	ldrb	r3, [r3, #0]
10045eba:	429a      	cmp	r2, r3
10045ebc:	d03a      	beq.n	10045f34 <MP3_Event_Handler+0x4b0>
						lastplayed = Packet.Param2;
10045ebe:	4b25      	ldr	r3, [pc, #148]	@ (10045f54 <MP3_Event_Handler+0x4d0>)
10045ec0:	78da      	ldrb	r2, [r3, #3]
10045ec2:	4b25      	ldr	r3, [pc, #148]	@ (10045f58 <MP3_Event_Handler+0x4d4>)
10045ec4:	701a      	strb	r2, [r3, #0]
						if(folder && track){
10045ec6:	4b1f      	ldr	r3, [pc, #124]	@ (10045f44 <MP3_Event_Handler+0x4c0>)
10045ec8:	781b      	ldrb	r3, [r3, #0]
10045eca:	2b00      	cmp	r3, #0
10045ecc:	d032      	beq.n	10045f34 <MP3_Event_Handler+0x4b0>
10045ece:	4b1e      	ldr	r3, [pc, #120]	@ (10045f48 <MP3_Event_Handler+0x4c4>)
10045ed0:	781b      	ldrb	r3, [r3, #0]
10045ed2:	2b00      	cmp	r3, #0
10045ed4:	d02e      	beq.n	10045f34 <MP3_Event_Handler+0x4b0>
							track++;
10045ed6:	4b1c      	ldr	r3, [pc, #112]	@ (10045f48 <MP3_Event_Handler+0x4c4>)
10045ed8:	781b      	ldrb	r3, [r3, #0]
10045eda:	3301      	adds	r3, #1
10045edc:	b2da      	uxtb	r2, r3
10045ede:	4b1a      	ldr	r3, [pc, #104]	@ (10045f48 <MP3_Event_Handler+0x4c4>)
10045ee0:	701a      	strb	r2, [r3, #0]
							if(track > folders[folder-1]){
10045ee2:	4b1e      	ldr	r3, [pc, #120]	@ (10045f5c <MP3_Event_Handler+0x4d8>)
10045ee4:	681a      	ldr	r2, [r3, #0]
10045ee6:	4b17      	ldr	r3, [pc, #92]	@ (10045f44 <MP3_Event_Handler+0x4c0>)
10045ee8:	781b      	ldrb	r3, [r3, #0]
10045eea:	3b01      	subs	r3, #1
10045eec:	18d3      	adds	r3, r2, r3
10045eee:	781a      	ldrb	r2, [r3, #0]
10045ef0:	4b15      	ldr	r3, [pc, #84]	@ (10045f48 <MP3_Event_Handler+0x4c4>)
10045ef2:	781b      	ldrb	r3, [r3, #0]
10045ef4:	429a      	cmp	r2, r3
10045ef6:	d215      	bcs.n	10045f24 <MP3_Event_Handler+0x4a0>
								char send2[4] = {0x03, 0x00, 0x00, firsttrack};
10045ef8:	2110      	movs	r1, #16
10045efa:	187b      	adds	r3, r7, r1
10045efc:	2203      	movs	r2, #3
10045efe:	701a      	strb	r2, [r3, #0]
10045f00:	187b      	adds	r3, r7, r1
10045f02:	2200      	movs	r2, #0
10045f04:	705a      	strb	r2, [r3, #1]
10045f06:	187b      	adds	r3, r7, r1
10045f08:	2200      	movs	r2, #0
10045f0a:	709a      	strb	r2, [r3, #2]
10045f0c:	4b14      	ldr	r3, [pc, #80]	@ (10045f60 <MP3_Event_Handler+0x4dc>)
10045f0e:	781a      	ldrb	r2, [r3, #0]
10045f10:	187b      	adds	r3, r7, r1
10045f12:	70da      	strb	r2, [r3, #3]
								MP3_SendData(send2);
10045f14:	187b      	adds	r3, r7, r1
10045f16:	0018      	movs	r0, r3
10045f18:	f7ff fb06 	bl	10045528 <MP3_SendData>
								track = 1;
10045f1c:	4b0a      	ldr	r3, [pc, #40]	@ (10045f48 <MP3_Event_Handler+0x4c4>)
10045f1e:	2201      	movs	r2, #1
10045f20:	701a      	strb	r2, [r3, #0]
10045f22:	e007      	b.n	10045f34 <MP3_Event_Handler+0x4b0>
							} else {

								char send[4] = {0x01, 0x00, 0x00, 0x00};
10045f24:	210c      	movs	r1, #12
10045f26:	187b      	adds	r3, r7, r1
10045f28:	2201      	movs	r2, #1
10045f2a:	601a      	str	r2, [r3, #0]
								MP3_SendData(send);
10045f2c:	187b      	adds	r3, r7, r1
10045f2e:	0018      	movs	r0, r3
10045f30:	f7ff fafa 	bl	10045528 <MP3_SendData>
				}
			}
		}

	}
    return 1;
10045f34:	2301      	movs	r3, #1
}
10045f36:	0018      	movs	r0, r3
10045f38:	46bd      	mov	sp, r7
10045f3a:	b01e      	add	sp, #120	@ 0x78
10045f3c:	bdb0      	pop	{r4, r5, r7, pc}
10045f3e:	46c0      	nop			@ (mov r8, r8)
10045f40:	20001be8 	.word	0x20001be8
10045f44:	20001bfd 	.word	0x20001bfd
10045f48:	20001bfc 	.word	0x20001bfc
10045f4c:	20001be9 	.word	0x20001be9
10045f50:	20001bea 	.word	0x20001bea
10045f54:	20001bf8 	.word	0x20001bf8
10045f58:	20001bff 	.word	0x20001bff
10045f5c:	20001c00 	.word	0x20001c00
10045f60:	20001bfe 	.word	0x20001bfe

10045f64 <MP3_GetCurrentFile>:
 * @Function: MP3_GetCurrentFile
 * @Brief: gets the current track being played on the mp3 player
 * @param:
 * @return: two bytes, the upper 8bits contain the folder, the lower 8 bits hold the tracck number in the folder
 */
uint16_t MP3_GetCurrentFile(){
10045f64:	b580      	push	{r7, lr}
10045f66:	af00      	add	r7, sp, #0
	return ((uint16_t)folder<<8)+track;
10045f68:	4b05      	ldr	r3, [pc, #20]	@ (10045f80 <MP3_GetCurrentFile+0x1c>)
10045f6a:	781b      	ldrb	r3, [r3, #0]
10045f6c:	021b      	lsls	r3, r3, #8
10045f6e:	b29b      	uxth	r3, r3
10045f70:	4a04      	ldr	r2, [pc, #16]	@ (10045f84 <MP3_GetCurrentFile+0x20>)
10045f72:	7812      	ldrb	r2, [r2, #0]
10045f74:	189b      	adds	r3, r3, r2
10045f76:	b29b      	uxth	r3, r3
}
10045f78:	0018      	movs	r0, r3
10045f7a:	46bd      	mov	sp, r7
10045f7c:	bd80      	pop	{r7, pc}
10045f7e:	46c0      	nop			@ (mov r8, r8)
10045f80:	20001bfd 	.word	0x20001bfd
10045f84:	20001bfc 	.word	0x20001bfc

10045f88 <OledInit>:
#include <OledDriver.h>
#include <Oled.h>
#include <Ascii.h>

void OledInit(void)
{
10045f88:	b580      	push	{r7, lr}
10045f8a:	af00      	add	r7, sp, #0
    // First initialize the STM32 to be able to talk over I2C to the OLED.
    OledHostInit();
10045f8c:	f000 f96f 	bl	1004626e <OledHostInit>
    HAL_Delay(10);
10045f90:	200a      	movs	r0, #10
10045f92:	f001 fee7 	bl	10047d64 <HAL_Delay>

    // Now send initialization commands to the OLED.
    OledDriverInitDisplay();
10045f96:	f000 f975 	bl	10046284 <OledDriverInitDisplay>
    HAL_Delay(200);//allow time for OLED screen to initialize
10045f9a:	20c8      	movs	r0, #200	@ 0xc8
10045f9c:	f001 fee2 	bl	10047d64 <HAL_Delay>

    // Clear the frame buffer by filling it with black pixels.
    OledClear(OLED_COLOR_BLACK);
10045fa0:	2000      	movs	r0, #0
10045fa2:	f000 f927 	bl	100461f4 <OledClear>

    // Finally update the screen, triggering a write of all black pixels to the screen.
    OledUpdate();
10045fa6:	f000 f95b 	bl	10046260 <OledUpdate>
}
10045faa:	46c0      	nop			@ (mov r8, r8)
10045fac:	46bd      	mov	sp, r7
10045fae:	bd80      	pop	{r7, pc}

10045fb0 <OledDrawChar>:
    // Now return the desired bit.
    return (rgbOledBmp[index] >> shift) & 0x01;
}

uint8_t OledDrawChar(int x, int y, char c)
{
10045fb0:	b580      	push	{r7, lr}
10045fb2:	b092      	sub	sp, #72	@ 0x48
10045fb4:	af00      	add	r7, sp, #0
10045fb6:	60f8      	str	r0, [r7, #12]
10045fb8:	60b9      	str	r1, [r7, #8]
10045fba:	1dfb      	adds	r3, r7, #7
10045fbc:	701a      	strb	r2, [r3, #0]
    if (x <= OLED_DRIVER_PIXEL_COLUMNS - ASCII_FONT_WIDTH && y <= OLED_DRIVER_PIXEL_ROWS - ASCII_FONT_HEIGHT) {
10045fbe:	68fb      	ldr	r3, [r7, #12]
10045fc0:	2b7a      	cmp	r3, #122	@ 0x7a
10045fc2:	dd00      	ble.n	10045fc6 <OledDrawChar+0x16>
10045fc4:	e0c0      	b.n	10046148 <OledDrawChar+0x198>
10045fc6:	68bb      	ldr	r3, [r7, #8]
10045fc8:	2b38      	cmp	r3, #56	@ 0x38
10045fca:	dd00      	ble.n	10045fce <OledDrawChar+0x1e>
10045fcc:	e0bc      	b.n	10046148 <OledDrawChar+0x198>
        // We need to convert our signed char into an unsigned value to index into the ascii[] array.
        int charIndex = (int) (unsigned char) c;
10045fce:	1dfb      	adds	r3, r7, #7
10045fd0:	781b      	ldrb	r3, [r3, #0]
10045fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Now first determine the columns and rows of the OLED bits that need to be modified
        int rowMin, rowMax, colMin, colMax;
        rowMin = y / ASCII_FONT_HEIGHT;
10045fd4:	68bb      	ldr	r3, [r7, #8]
10045fd6:	2b00      	cmp	r3, #0
10045fd8:	da00      	bge.n	10045fdc <OledDrawChar+0x2c>
10045fda:	3307      	adds	r3, #7
10045fdc:	10db      	asrs	r3, r3, #3
10045fde:	63bb      	str	r3, [r7, #56]	@ 0x38
        int rowY = y % ASCII_FONT_HEIGHT;
10045fe0:	68bb      	ldr	r3, [r7, #8]
10045fe2:	4a5c      	ldr	r2, [pc, #368]	@ (10046154 <OledDrawChar+0x1a4>)
10045fe4:	4013      	ands	r3, r2
10045fe6:	d504      	bpl.n	10045ff2 <OledDrawChar+0x42>
10045fe8:	3b01      	subs	r3, #1
10045fea:	2208      	movs	r2, #8
10045fec:	4252      	negs	r2, r2
10045fee:	4313      	orrs	r3, r2
10045ff0:	3301      	adds	r3, #1
10045ff2:	637b      	str	r3, [r7, #52]	@ 0x34
        rowMax = (y + ASCII_FONT_HEIGHT) / OLED_DRIVER_BUFFER_LINE_HEIGHT;
10045ff4:	68bb      	ldr	r3, [r7, #8]
10045ff6:	3308      	adds	r3, #8
10045ff8:	2b00      	cmp	r3, #0
10045ffa:	da00      	bge.n	10045ffe <OledDrawChar+0x4e>
10045ffc:	3307      	adds	r3, #7
10045ffe:	10db      	asrs	r3, r3, #3
10046000:	633b      	str	r3, [r7, #48]	@ 0x30
        colMin = x;
10046002:	68fb      	ldr	r3, [r7, #12]
10046004:	62fb      	str	r3, [r7, #44]	@ 0x2c
        colMax = x + ASCII_FONT_WIDTH;
10046006:	68fb      	ldr	r3, [r7, #12]
10046008:	3306      	adds	r3, #6
1004600a:	62bb      	str	r3, [r7, #40]	@ 0x28
        {
            // Generate a positive mask for where in the column the new symbol will be drawn.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) << rowY;
1004600c:	22ff      	movs	r2, #255	@ 0xff
1004600e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046010:	409a      	lsls	r2, r3
10046012:	0013      	movs	r3, r2
10046014:	627b      	str	r3, [r7, #36]	@ 0x24
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
10046016:	2300      	movs	r3, #0
10046018:	647b      	str	r3, [r7, #68]	@ 0x44
1004601a:	e03a      	b.n	10046092 <OledDrawChar+0xe2>
                int oledCol = colMin + j;
1004601c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1004601e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10046020:	18d3      	adds	r3, r2, r3
10046022:	617b      	str	r3, [r7, #20]
                uint8_t newCharCol = rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
10046024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10046026:	01da      	lsls	r2, r3, #7
10046028:	697b      	ldr	r3, [r7, #20]
1004602a:	18d3      	adds	r3, r2, r3
1004602c:	4a4a      	ldr	r2, [pc, #296]	@ (10046158 <OledDrawChar+0x1a8>)
1004602e:	5cd3      	ldrb	r3, [r2, r3]
10046030:	b25b      	sxtb	r3, r3
10046032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10046034:	b252      	sxtb	r2, r2
10046036:	43d2      	mvns	r2, r2
10046038:	b252      	sxtb	r2, r2
1004603a:	4013      	ands	r3, r2
1004603c:	b25a      	sxtb	r2, r3
1004603e:	2013      	movs	r0, #19
10046040:	183b      	adds	r3, r7, r0
10046042:	701a      	strb	r2, [r3, #0]
                // Make sure we always grab from the top part of the character.
                newCharCol |= (ascii[charIndex][j] & (colMask >> rowY)) << rowY;
10046044:	4945      	ldr	r1, [pc, #276]	@ (1004615c <OledDrawChar+0x1ac>)
10046046:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10046048:	0013      	movs	r3, r2
1004604a:	005b      	lsls	r3, r3, #1
1004604c:	189b      	adds	r3, r3, r2
1004604e:	005b      	lsls	r3, r3, #1
10046050:	18ca      	adds	r2, r1, r3
10046052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10046054:	18d3      	adds	r3, r2, r3
10046056:	781b      	ldrb	r3, [r3, #0]
10046058:	0019      	movs	r1, r3
1004605a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004605c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004605e:	411a      	asrs	r2, r3
10046060:	0013      	movs	r3, r2
10046062:	400b      	ands	r3, r1
10046064:	001a      	movs	r2, r3
10046066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10046068:	409a      	lsls	r2, r3
1004606a:	0013      	movs	r3, r2
1004606c:	b25a      	sxtb	r2, r3
1004606e:	183b      	adds	r3, r7, r0
10046070:	781b      	ldrb	r3, [r3, #0]
10046072:	b25b      	sxtb	r3, r3
10046074:	4313      	orrs	r3, r2
10046076:	b25a      	sxtb	r2, r3
10046078:	183b      	adds	r3, r7, r0
1004607a:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
1004607c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004607e:	01da      	lsls	r2, r3, #7
10046080:	697b      	ldr	r3, [r7, #20]
10046082:	18d3      	adds	r3, r2, r3
10046084:	4a34      	ldr	r2, [pc, #208]	@ (10046158 <OledDrawChar+0x1a8>)
10046086:	1839      	adds	r1, r7, r0
10046088:	7809      	ldrb	r1, [r1, #0]
1004608a:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
1004608c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004608e:	3301      	adds	r3, #1
10046090:	647b      	str	r3, [r7, #68]	@ 0x44
10046092:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10046094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046096:	1ad3      	subs	r3, r2, r3
10046098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004609a:	429a      	cmp	r2, r3
1004609c:	dbbe      	blt.n	1004601c <OledDrawChar+0x6c>
            }
        }
        if (rowMax > rowMin) {
1004609e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100460a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100460a2:	429a      	cmp	r2, r3
100460a4:	dd50      	ble.n	10046148 <OledDrawChar+0x198>
            // Generate a positive mask for where in the column the new symbol will be drawn.
            // Since we need the lower portion of the symbol, we recalculate its height.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) >> (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
100460a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100460a8:	2208      	movs	r2, #8
100460aa:	1ad3      	subs	r3, r2, r3
100460ac:	22ff      	movs	r2, #255	@ 0xff
100460ae:	411a      	asrs	r2, r3
100460b0:	0013      	movs	r3, r2
100460b2:	623b      	str	r3, [r7, #32]
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
100460b4:	2300      	movs	r3, #0
100460b6:	643b      	str	r3, [r7, #64]	@ 0x40
100460b8:	e040      	b.n	1004613c <OledDrawChar+0x18c>
                int oledCol = colMin + j;
100460ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100460bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100460be:	18d3      	adds	r3, r2, r3
100460c0:	61fb      	str	r3, [r7, #28]
                uint8_t newCharCol = rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] & ~colMask;
100460c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
100460c4:	01db      	lsls	r3, r3, #7
100460c6:	1d5a      	adds	r2, r3, #5
100460c8:	69fb      	ldr	r3, [r7, #28]
100460ca:	1ad3      	subs	r3, r2, r3
100460cc:	4a22      	ldr	r2, [pc, #136]	@ (10046158 <OledDrawChar+0x1a8>)
100460ce:	5cd3      	ldrb	r3, [r2, r3]
100460d0:	b25b      	sxtb	r3, r3
100460d2:	6a3a      	ldr	r2, [r7, #32]
100460d4:	b252      	sxtb	r2, r2
100460d6:	43d2      	mvns	r2, r2
100460d8:	b252      	sxtb	r2, r2
100460da:	4013      	ands	r3, r2
100460dc:	b25a      	sxtb	r2, r3
100460de:	201b      	movs	r0, #27
100460e0:	183b      	adds	r3, r7, r0
100460e2:	701a      	strb	r2, [r3, #0]
                // Make sure we grab the proper part of the character from the font.
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
100460e4:	491d      	ldr	r1, [pc, #116]	@ (1004615c <OledDrawChar+0x1ac>)
100460e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100460e8:	0013      	movs	r3, r2
100460ea:	005b      	lsls	r3, r3, #1
100460ec:	189b      	adds	r3, r3, r2
100460ee:	005b      	lsls	r3, r3, #1
100460f0:	18ca      	adds	r2, r1, r3
100460f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
100460f4:	18d3      	adds	r3, r2, r3
100460f6:	781b      	ldrb	r3, [r3, #0]
100460f8:	0019      	movs	r1, r3
100460fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100460fc:	2208      	movs	r2, #8
100460fe:	1ad3      	subs	r3, r2, r3
10046100:	6a3a      	ldr	r2, [r7, #32]
10046102:	409a      	lsls	r2, r3
10046104:	0013      	movs	r3, r2
10046106:	400b      	ands	r3, r1
10046108:	001a      	movs	r2, r3
                        (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
1004610a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004610c:	2108      	movs	r1, #8
1004610e:	1acb      	subs	r3, r1, r3
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
10046110:	411a      	asrs	r2, r3
10046112:	0013      	movs	r3, r2
10046114:	b25a      	sxtb	r2, r3
10046116:	183b      	adds	r3, r7, r0
10046118:	781b      	ldrb	r3, [r3, #0]
1004611a:	b25b      	sxtb	r3, r3
1004611c:	4313      	orrs	r3, r2
1004611e:	b25a      	sxtb	r2, r3
10046120:	183b      	adds	r3, r7, r0
10046122:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] = newCharCol;
10046124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10046126:	01db      	lsls	r3, r3, #7
10046128:	1d5a      	adds	r2, r3, #5
1004612a:	69fb      	ldr	r3, [r7, #28]
1004612c:	1ad3      	subs	r3, r2, r3
1004612e:	4a0a      	ldr	r2, [pc, #40]	@ (10046158 <OledDrawChar+0x1a8>)
10046130:	1839      	adds	r1, r7, r0
10046132:	7809      	ldrb	r1, [r1, #0]
10046134:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
10046136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10046138:	3301      	adds	r3, #1
1004613a:	643b      	str	r3, [r7, #64]	@ 0x40
1004613c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10046140:	1ad3      	subs	r3, r2, r3
10046142:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10046144:	429a      	cmp	r2, r3
10046146:	dbb8      	blt.n	100460ba <OledDrawChar+0x10a>
            }
        }
    }

    return FALSE;
10046148:	2300      	movs	r3, #0
}
1004614a:	0018      	movs	r0, r3
1004614c:	46bd      	mov	sp, r7
1004614e:	b012      	add	sp, #72	@ 0x48
10046150:	bd80      	pop	{r7, pc}
10046152:	46c0      	nop			@ (mov r8, r8)
10046154:	80000007 	.word	0x80000007
10046158:	20001c0c 	.word	0x20001c0c
1004615c:	1006906c 	.word	0x1006906c

10046160 <OledDrawString>:

void OledDrawString(const char *string)
{
10046160:	b580      	push	{r7, lr}
10046162:	b086      	sub	sp, #24
10046164:	af00      	add	r7, sp, #0
10046166:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
10046168:	687b      	ldr	r3, [r7, #4]
1004616a:	2b00      	cmp	r3, #0
1004616c:	d03c      	beq.n	100461e8 <OledDrawString+0x88>
        return;
    }

    // Track the current line number we're in on the OLED. Valid values are [0, OLED_NUM_LINES).
    int line = 0;
1004616e:	2300      	movs	r3, #0
10046170:	617b      	str	r3, [r7, #20]

    // Track the current character we're writing to the OLED. Valid values are
    // [0, OLED_CHARS_PER_LINE).
    int column = 0;
10046172:	2300      	movs	r3, #0
10046174:	613b      	str	r3, [r7, #16]

    // Run through all characters. The maximum length can be the number of lines times the number
    // of characters per line + three newlines.
    int i;
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
10046176:	2300      	movs	r3, #0
10046178:	60fb      	str	r3, [r7, #12]
1004617a:	e02b      	b.n	100461d4 <OledDrawString+0x74>
        // Move the cursor to the next line if a newline character is encountered. This allows for
        // early line ending.
        if (string[i] == '\n') {
1004617c:	68fb      	ldr	r3, [r7, #12]
1004617e:	687a      	ldr	r2, [r7, #4]
10046180:	18d3      	adds	r3, r2, r3
10046182:	781b      	ldrb	r3, [r3, #0]
10046184:	2b0a      	cmp	r3, #10
10046186:	d105      	bne.n	10046194 <OledDrawString+0x34>
            ++line;
10046188:	697b      	ldr	r3, [r7, #20]
1004618a:	3301      	adds	r3, #1
1004618c:	617b      	str	r3, [r7, #20]
            column = 0;
1004618e:	2300      	movs	r3, #0
10046190:	613b      	str	r3, [r7, #16]
            continue;
10046192:	e01c      	b.n	100461ce <OledDrawString+0x6e>
        } else {
            // Reset to the start of the next line if we've hit the character limit of this line
            // without seeing a newline.
            if (column == OLED_CHARS_PER_LINE) {
10046194:	693b      	ldr	r3, [r7, #16]
10046196:	2b15      	cmp	r3, #21
10046198:	d104      	bne.n	100461a4 <OledDrawString+0x44>
                ++line;
1004619a:	697b      	ldr	r3, [r7, #20]
1004619c:	3301      	adds	r3, #1
1004619e:	617b      	str	r3, [r7, #20]
                column = 0;
100461a0:	2300      	movs	r3, #0
100461a2:	613b      	str	r3, [r7, #16]
            }

            // Now if we're < OLED_NUM_LINES and < OLED_CHARS_PER_LINE we can proceed. The second
            // check is implicitly handled by the above if-statement that forces a newline after
            // encountering a full line of characters.
            if (line == OLED_NUM_LINES) {
100461a4:	697b      	ldr	r3, [r7, #20]
100461a6:	2b08      	cmp	r3, #8
100461a8:	d020      	beq.n	100461ec <OledDrawString+0x8c>
                break;
            }

            // Finally at this point, we can write characters to the OLED.
            OledDrawChar(column * ASCII_FONT_WIDTH, line * ASCII_FONT_HEIGHT, string[i]);
100461aa:	693a      	ldr	r2, [r7, #16]
100461ac:	0013      	movs	r3, r2
100461ae:	005b      	lsls	r3, r3, #1
100461b0:	189b      	adds	r3, r3, r2
100461b2:	005b      	lsls	r3, r3, #1
100461b4:	0018      	movs	r0, r3
100461b6:	697b      	ldr	r3, [r7, #20]
100461b8:	00d9      	lsls	r1, r3, #3
100461ba:	68fb      	ldr	r3, [r7, #12]
100461bc:	687a      	ldr	r2, [r7, #4]
100461be:	18d3      	adds	r3, r2, r3
100461c0:	781b      	ldrb	r3, [r3, #0]
100461c2:	001a      	movs	r2, r3
100461c4:	f7ff fef4 	bl	10045fb0 <OledDrawChar>
            ++column;
100461c8:	693b      	ldr	r3, [r7, #16]
100461ca:	3301      	adds	r3, #1
100461cc:	613b      	str	r3, [r7, #16]
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
100461ce:	68fb      	ldr	r3, [r7, #12]
100461d0:	3301      	adds	r3, #1
100461d2:	60fb      	str	r3, [r7, #12]
100461d4:	68fb      	ldr	r3, [r7, #12]
100461d6:	687a      	ldr	r2, [r7, #4]
100461d8:	18d3      	adds	r3, r2, r3
100461da:	781b      	ldrb	r3, [r3, #0]
100461dc:	2b00      	cmp	r3, #0
100461de:	d006      	beq.n	100461ee <OledDrawString+0x8e>
100461e0:	68fb      	ldr	r3, [r7, #12]
100461e2:	2baa      	cmp	r3, #170	@ 0xaa
100461e4:	ddca      	ble.n	1004617c <OledDrawString+0x1c>
100461e6:	e002      	b.n	100461ee <OledDrawString+0x8e>
        return;
100461e8:	46c0      	nop			@ (mov r8, r8)
100461ea:	e000      	b.n	100461ee <OledDrawString+0x8e>
                break;
100461ec:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
100461ee:	46bd      	mov	sp, r7
100461f0:	b006      	add	sp, #24
100461f2:	bd80      	pop	{r7, pc}

100461f4 <OledClear>:

void OledClear(OledColor p)
{
100461f4:	b580      	push	{r7, lr}
100461f6:	b084      	sub	sp, #16
100461f8:	af00      	add	r7, sp, #0
100461fa:	0002      	movs	r2, r0
100461fc:	1dfb      	adds	r3, r7, #7
100461fe:	701a      	strb	r2, [r3, #0]
    int i;
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
10046200:	2300      	movs	r3, #0
10046202:	60fb      	str	r3, [r7, #12]
10046204:	e011      	b.n	1004622a <OledClear+0x36>
        if (p == OLED_COLOR_WHITE) {
10046206:	1dfb      	adds	r3, r7, #7
10046208:	781b      	ldrb	r3, [r3, #0]
1004620a:	2b01      	cmp	r3, #1
1004620c:	d105      	bne.n	1004621a <OledClear+0x26>
            rgbOledBmp[i] = 0xFF;
1004620e:	4a0c      	ldr	r2, [pc, #48]	@ (10046240 <OledClear+0x4c>)
10046210:	68fb      	ldr	r3, [r7, #12]
10046212:	18d3      	adds	r3, r2, r3
10046214:	22ff      	movs	r2, #255	@ 0xff
10046216:	701a      	strb	r2, [r3, #0]
10046218:	e004      	b.n	10046224 <OledClear+0x30>
        } else {
            rgbOledBmp[i] = 0;
1004621a:	4a09      	ldr	r2, [pc, #36]	@ (10046240 <OledClear+0x4c>)
1004621c:	68fb      	ldr	r3, [r7, #12]
1004621e:	18d3      	adds	r3, r2, r3
10046220:	2200      	movs	r2, #0
10046222:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
10046224:	68fb      	ldr	r3, [r7, #12]
10046226:	3301      	adds	r3, #1
10046228:	60fb      	str	r3, [r7, #12]
1004622a:	68fa      	ldr	r2, [r7, #12]
1004622c:	2380      	movs	r3, #128	@ 0x80
1004622e:	00db      	lsls	r3, r3, #3
10046230:	429a      	cmp	r2, r3
10046232:	dbe8      	blt.n	10046206 <OledClear+0x12>
        }
    }
}
10046234:	46c0      	nop			@ (mov r8, r8)
10046236:	46c0      	nop			@ (mov r8, r8)
10046238:	46bd      	mov	sp, r7
1004623a:	b004      	add	sp, #16
1004623c:	bd80      	pop	{r7, pc}
1004623e:	46c0      	nop			@ (mov r8, r8)
10046240:	20001c0c 	.word	0x20001c0c

10046244 <OledOn>:
{
    OledDriverSetDisplayNormal();
}

void OledOn(void)
{
10046244:	b580      	push	{r7, lr}
10046246:	af00      	add	r7, sp, #0
    OledDriverInitDisplay();
10046248:	f000 f81c 	bl	10046284 <OledDriverInitDisplay>
}
1004624c:	46c0      	nop			@ (mov r8, r8)
1004624e:	46bd      	mov	sp, r7
10046250:	bd80      	pop	{r7, pc}

10046252 <OledOff>:

void OledOff(void)
{
10046252:	b580      	push	{r7, lr}
10046254:	af00      	add	r7, sp, #0
    OledDriverDisableDisplay();
10046256:	f000 f872 	bl	1004633e <OledDriverDisableDisplay>
}
1004625a:	46c0      	nop			@ (mov r8, r8)
1004625c:	46bd      	mov	sp, r7
1004625e:	bd80      	pop	{r7, pc}

10046260 <OledUpdate>:

void OledUpdate(void)
{
10046260:	b580      	push	{r7, lr}
10046262:	af00      	add	r7, sp, #0
    OledDriverUpdateDisplay();
10046264:	f000 f876 	bl	10046354 <OledDriverUpdateDisplay>
}
10046268:	46c0      	nop			@ (mov r8, r8)
1004626a:	46bd      	mov	sp, r7
1004626c:	bd80      	pop	{r7, pc}

1004626e <OledHostInit>:
/**
 * Initialize the STM32 to communicate with the OLED display through the SSD1306
 * display controller using an instance of I2C.
 */
void OledHostInit(void)
{
1004626e:	b580      	push	{r7, lr}
10046270:	af00      	add	r7, sp, #0
    BOARD_Init(); // init board and printf functionality
10046272:	f7fb ff51 	bl	10042118 <BOARD_Init>
    TIMERS_Init(); // init timer module for delay functions
10046276:	f000 fb69 	bl	1004694c <TIMERS_Init>
    I2C_Init();   // init I2C module
1004627a:	f7ff f811 	bl	100452a0 <I2C_Init>
}
1004627e:	46c0      	nop			@ (mov r8, r8)
10046280:	46bd      	mov	sp, r7
10046282:	bd80      	pop	{r7, pc}

10046284 <OledDriverInitDisplay>:

/**
 * Initialize the OLED display and send init/config sequence
 */
void OledDriverInitDisplay(void)
{
10046284:	b580      	push	{r7, lr}
10046286:	af00      	add	r7, sp, #0
    // Turn off the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
10046288:	22ae      	movs	r2, #174	@ 0xae
1004628a:	2180      	movs	r1, #128	@ 0x80
1004628c:	203c      	movs	r0, #60	@ 0x3c
1004628e:	f7ff f923 	bl	100454d8 <I2C_WriteReg>
    DelayMs(10);
10046292:	200a      	movs	r0, #10
10046294:	f000 f8a0 	bl	100463d8 <DelayMs>
//
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_OSC_FREQ);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_OSC_FREQ);
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_MULTIPLEX_RATIO);
10046298:	22a8      	movs	r2, #168	@ 0xa8
1004629a:	2180      	movs	r1, #128	@ 0x80
1004629c:	203c      	movs	r0, #60	@ 0x3c
1004629e:	f7ff f91b 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x3F);
100462a2:	223f      	movs	r2, #63	@ 0x3f
100462a4:	2180      	movs	r1, #128	@ 0x80
100462a6:	203c      	movs	r0, #60	@ 0x3c
100462a8:	f7ff f916 	bl	100454d8 <I2C_WriteReg>
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xD3);//Display OFFSET
100462ac:	22d3      	movs	r2, #211	@ 0xd3
100462ae:	2180      	movs	r1, #128	@ 0x80
100462b0:	203c      	movs	r0, #60	@ 0x3c
100462b2:	f7ff f911 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x08);
100462b6:	2208      	movs	r2, #8
100462b8:	2180      	movs	r1, #128	@ 0x80
100462ba:	203c      	movs	r0, #60	@ 0x3c
100462bc:	f7ff f90c 	bl	100454d8 <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);//Set display start line
100462c0:	2240      	movs	r2, #64	@ 0x40
100462c2:	2180      	movs	r1, #128	@ 0x80
100462c4:	203c      	movs	r0, #60	@ 0x3c
100462c6:	f7ff f907 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA1);//Set segment re-map
100462ca:	22a1      	movs	r2, #161	@ 0xa1
100462cc:	2180      	movs	r1, #128	@ 0x80
100462ce:	203c      	movs	r0, #60	@ 0x3c
100462d0:	f7ff f902 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xC0);//Set COM output Scan direction
100462d4:	22c0      	movs	r2, #192	@ 0xc0
100462d6:	2180      	movs	r1, #128	@ 0x80
100462d8:	203c      	movs	r0, #60	@ 0x3c
100462da:	f7ff f8fd 	bl	100454d8 <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDA);//Set COM hardware config
100462de:	22da      	movs	r2, #218	@ 0xda
100462e0:	2180      	movs	r1, #128	@ 0x80
100462e2:	203c      	movs	r0, #60	@ 0x3c
100462e4:	f7ff f8f8 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x12);
100462e8:	2212      	movs	r2, #18
100462ea:	2180      	movs	r1, #128	@ 0x80
100462ec:	203c      	movs	r0, #60	@ 0x3c
100462ee:	f7ff f8f3 	bl	100454d8 <I2C_WriteReg>
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDB);//Set VCOMH deselect level
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);
//
//
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA4);//Set entire display on/off
100462f2:	22a4      	movs	r2, #164	@ 0xa4
100462f4:	2180      	movs	r1, #128	@ 0x80
100462f6:	203c      	movs	r0, #60	@ 0x3c
100462f8:	f7ff f8ee 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA6);//Set normal/inverted display
100462fc:	22a6      	movs	r2, #166	@ 0xa6
100462fe:	2180      	movs	r1, #128	@ 0x80
10046300:	203c      	movs	r0, #60	@ 0x3c
10046302:	f7ff f8e9 	bl	100454d8 <I2C_WriteReg>


    // Enable the charge pump and
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_CHARGE_PUMP);
10046306:	228d      	movs	r2, #141	@ 0x8d
10046308:	2180      	movs	r1, #128	@ 0x80
1004630a:	203c      	movs	r0, #60	@ 0x3c
1004630c:	f7ff f8e4 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_ENABLE_CHARGE_PUMP);
10046310:	2214      	movs	r2, #20
10046312:	2180      	movs	r1, #128	@ 0x80
10046314:	203c      	movs	r0, #60	@ 0x3c
10046316:	f7ff f8df 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_PRECHARGE_PERIOD);
1004631a:	22d9      	movs	r2, #217	@ 0xd9
1004631c:	2180      	movs	r1, #128	@ 0x80
1004631e:	203c      	movs	r0, #60	@ 0x3c
10046320:	f7ff f8da 	bl	100454d8 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_MAXIMUM_PRECHARGE);
10046324:	22f1      	movs	r2, #241	@ 0xf1
10046326:	2180      	movs	r1, #128	@ 0x80
10046328:	203c      	movs	r0, #60	@ 0x3c
1004632a:	f7ff f8d5 	bl	100454d8 <I2C_WriteReg>
//    // Set sequential COM configuration with non-interleaved memory.
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_COM_PINS_CONFIG);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED);

    // And turn on the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_ON);
1004632e:	22af      	movs	r2, #175	@ 0xaf
10046330:	2180      	movs	r1, #128	@ 0x80
10046332:	203c      	movs	r0, #60	@ 0x3c
10046334:	f7ff f8d0 	bl	100454d8 <I2C_WriteReg>
}
10046338:	46c0      	nop			@ (mov r8, r8)
1004633a:	46bd      	mov	sp, r7
1004633c:	bd80      	pop	{r7, pc}

1004633e <OledDriverDisableDisplay>:

/**
 * Disable the Oled display before power-off.
 */
void OledDriverDisableDisplay(void)
{
1004633e:	b580      	push	{r7, lr}
10046340:	af00      	add	r7, sp, #0
    // Send the display off command.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
10046342:	22ae      	movs	r2, #174	@ 0xae
10046344:	2180      	movs	r1, #128	@ 0x80
10046346:	203c      	movs	r0, #60	@ 0x3c
10046348:	f7ff f8c6 	bl	100454d8 <I2C_WriteReg>
}
1004634c:	46c0      	nop			@ (mov r8, r8)
1004634e:	46bd      	mov	sp, r7
10046350:	bd80      	pop	{r7, pc}
	...

10046354 <OledDriverUpdateDisplay>:

/**
 * Update the display with the contents of rgb0ledBmp.
 */
void OledDriverUpdateDisplay(void)
{
10046354:	b580      	push	{r7, lr}
10046356:	b084      	sub	sp, #16
10046358:	af00      	add	r7, sp, #0
    uint8_t *pb = &(rgbOledBmp[OLED_DRIVER_BUFFER_SIZE-1]);
1004635a:	4b1e      	ldr	r3, [pc, #120]	@ (100463d4 <OledDriverUpdateDisplay+0x80>)
1004635c:	60fb      	str	r3, [r7, #12]
    int page;
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
1004635e:	2300      	movs	r3, #0
10046360:	60bb      	str	r3, [r7, #8]
10046362:	e02f      	b.n	100463c4 <OledDriverUpdateDisplay+0x70>

        // Set the desired page.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xB0 | (OLED_DRIVER_PAGES- page));//select page start address
10046364:	68bb      	ldr	r3, [r7, #8]
10046366:	b2db      	uxtb	r3, r3
10046368:	2208      	movs	r2, #8
1004636a:	1ad3      	subs	r3, r2, r3
1004636c:	b2db      	uxtb	r3, r3
1004636e:	b25b      	sxtb	r3, r3
10046370:	2250      	movs	r2, #80	@ 0x50
10046372:	4252      	negs	r2, r2
10046374:	4313      	orrs	r3, r2
10046376:	b25b      	sxtb	r3, r3
10046378:	b2db      	uxtb	r3, r3
1004637a:	001a      	movs	r2, r3
1004637c:	2180      	movs	r1, #128	@ 0x80
1004637e:	203c      	movs	r0, #60	@ 0x3c
10046380:	f7ff f8aa 	bl	100454d8 <I2C_WriteReg>
//        I2C_WriteReg(OLED_ADDRESS, COMMAND, page);

        // Set the starting column back to the origin.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0);
10046384:	2200      	movs	r2, #0
10046386:	2180      	movs	r1, #128	@ 0x80
10046388:	203c      	movs	r0, #60	@ 0x3c
1004638a:	f7ff f8a5 	bl	100454d8 <I2C_WriteReg>
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0);
1004638e:	2210      	movs	r2, #16
10046390:	2180      	movs	r1, #128	@ 0x80
10046392:	203c      	movs	r0, #60	@ 0x3c
10046394:	f7ff f8a0 	bl	100454d8 <I2C_WriteReg>

        // Write this entire column to the OLED.
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
10046398:	2300      	movs	r3, #0
1004639a:	607b      	str	r3, [r7, #4]
1004639c:	e00c      	b.n	100463b8 <OledDriverUpdateDisplay+0x64>
            I2C_WriteReg(OLED_ADDRESS, DATA, *pb);
1004639e:	68fb      	ldr	r3, [r7, #12]
100463a0:	781b      	ldrb	r3, [r3, #0]
100463a2:	001a      	movs	r2, r3
100463a4:	21c0      	movs	r1, #192	@ 0xc0
100463a6:	203c      	movs	r0, #60	@ 0x3c
100463a8:	f7ff f896 	bl	100454d8 <I2C_WriteReg>
            pb--;
100463ac:	68fb      	ldr	r3, [r7, #12]
100463ae:	3b01      	subs	r3, #1
100463b0:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
100463b2:	687b      	ldr	r3, [r7, #4]
100463b4:	3301      	adds	r3, #1
100463b6:	607b      	str	r3, [r7, #4]
100463b8:	687b      	ldr	r3, [r7, #4]
100463ba:	2b7f      	cmp	r3, #127	@ 0x7f
100463bc:	ddef      	ble.n	1004639e <OledDriverUpdateDisplay+0x4a>
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
100463be:	68bb      	ldr	r3, [r7, #8]
100463c0:	3301      	adds	r3, #1
100463c2:	60bb      	str	r3, [r7, #8]
100463c4:	68bb      	ldr	r3, [r7, #8]
100463c6:	2b07      	cmp	r3, #7
100463c8:	ddcc      	ble.n	10046364 <OledDriverUpdateDisplay+0x10>
        }
    }
}
100463ca:	46c0      	nop			@ (mov r8, r8)
100463cc:	46c0      	nop			@ (mov r8, r8)
100463ce:	46bd      	mov	sp, r7
100463d0:	b004      	add	sp, #16
100463d2:	bd80      	pop	{r7, pc}
100463d4:	2000200b 	.word	0x2000200b

100463d8 <DelayMs>:

/**
 * Block the processor for the desired number of milliseconds.
 * @param ms The number of milliseconds to block for.
 */
void DelayMs(uint32_t ms) {
100463d8:	b580      	push	{r7, lr}
100463da:	b084      	sub	sp, #16
100463dc:	af00      	add	r7, sp, #0
100463de:	6078      	str	r0, [r7, #4]
    uint32_t curr_ms = TIMERS_GetMilliSeconds();
100463e0:	f000 fb00 	bl	100469e4 <TIMERS_GetMilliSeconds>
100463e4:	0003      	movs	r3, r0
100463e6:	60fb      	str	r3, [r7, #12]
    while ((TIMERS_GetMilliSeconds() - curr_ms) < ms);
100463e8:	46c0      	nop			@ (mov r8, r8)
100463ea:	f000 fafb 	bl	100469e4 <TIMERS_GetMilliSeconds>
100463ee:	0002      	movs	r2, r0
100463f0:	68fb      	ldr	r3, [r7, #12]
100463f2:	1ad3      	subs	r3, r2, r3
100463f4:	687a      	ldr	r2, [r7, #4]
100463f6:	429a      	cmp	r2, r3
100463f8:	d8f7      	bhi.n	100463ea <DelayMs+0x12>
}
100463fa:	46c0      	nop			@ (mov r8, r8)
100463fc:	46c0      	nop			@ (mov r8, r8)
100463fe:	46bd      	mov	sp, r7
10046400:	b004      	add	sp, #16
10046402:	bd80      	pop	{r7, pc}

10046404 <CompareTime>:
static uint8_t minute;

static uint8_t logging;//logging
static uint8_t playdata;
//----------------------------------------Private Functions--------------------------------------
void CompareTime(){
10046404:	b5f0      	push	{r4, r5, r6, r7, lr}
10046406:	b089      	sub	sp, #36	@ 0x24
10046408:	af00      	add	r7, sp, #0
	if(!newdata){
1004640a:	4b80      	ldr	r3, [pc, #512]	@ (1004660c <CompareTime+0x208>)
1004640c:	781b      	ldrb	r3, [r3, #0]
1004640e:	2b00      	cmp	r3, #0
10046410:	d100      	bne.n	10046414 <CompareTime+0x10>
10046412:	e0f7      	b.n	10046604 <CompareTime+0x200>
		return;
	}
	//discountprintf("Date received");
	if(logging){
10046414:	4b7e      	ldr	r3, [pc, #504]	@ (10046610 <CompareTime+0x20c>)
10046416:	781b      	ldrb	r3, [r3, #0]
10046418:	2b00      	cmp	r3, #0
1004641a:	d05e      	beq.n	100464da <CompareTime+0xd6>
		scheduleEvent event;

		event.month = month;
1004641c:	4b7d      	ldr	r3, [pc, #500]	@ (10046614 <CompareTime+0x210>)
1004641e:	781a      	ldrb	r2, [r3, #0]
10046420:	2518      	movs	r5, #24
10046422:	197b      	adds	r3, r7, r5
10046424:	701a      	strb	r2, [r3, #0]
		event.day = day;
10046426:	4b7c      	ldr	r3, [pc, #496]	@ (10046618 <CompareTime+0x214>)
10046428:	781a      	ldrb	r2, [r3, #0]
1004642a:	197b      	adds	r3, r7, r5
1004642c:	705a      	strb	r2, [r3, #1]
		if(playdata){
1004642e:	4b7b      	ldr	r3, [pc, #492]	@ (1004661c <CompareTime+0x218>)
10046430:	781b      	ldrb	r3, [r3, #0]
10046432:	2b00      	cmp	r3, #0
10046434:	d01d      	beq.n	10046472 <CompareTime+0x6e>
			event.start = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10046436:	4b7a      	ldr	r3, [pc, #488]	@ (10046620 <CompareTime+0x21c>)
10046438:	781b      	ldrb	r3, [r3, #0]
1004643a:	b25b      	sxtb	r3, r3
1004643c:	00db      	lsls	r3, r3, #3
1004643e:	b25c      	sxtb	r4, r3
10046440:	4b78      	ldr	r3, [pc, #480]	@ (10046624 <CompareTime+0x220>)
10046442:	781b      	ldrb	r3, [r3, #0]
10046444:	210f      	movs	r1, #15
10046446:	0018      	movs	r0, r3
10046448:	f7f9 fefa 	bl	10040240 <__udivsi3>
1004644c:	0003      	movs	r3, r0
1004644e:	b2db      	uxtb	r3, r3
10046450:	b25b      	sxtb	r3, r3
10046452:	4023      	ands	r3, r4
10046454:	b25b      	sxtb	r3, r3
10046456:	b2da      	uxtb	r2, r3
10046458:	197b      	adds	r3, r7, r5
1004645a:	709a      	strb	r2, [r3, #2]
			event.stop = 0;
1004645c:	197b      	adds	r3, r7, r5
1004645e:	2200      	movs	r2, #0
10046460:	70da      	strb	r2, [r3, #3]
			event.folder = (playdata>>8)&0xFF;
10046462:	197b      	adds	r3, r7, r5
10046464:	2200      	movs	r2, #0
10046466:	711a      	strb	r2, [r3, #4]
			event.track = playdata&0xFF;
10046468:	4b6c      	ldr	r3, [pc, #432]	@ (1004661c <CompareTime+0x218>)
1004646a:	781a      	ldrb	r2, [r3, #0]
1004646c:	197b      	adds	r3, r7, r5
1004646e:	715a      	strb	r2, [r3, #5]
10046470:	e029      	b.n	100464c6 <CompareTime+0xc2>
		} else {
			scheduleEvent prevevent = FLASH_ReadLogs(FLASH_GetLogsSize()-1);
10046472:	f7fe fac5 	bl	10044a00 <FLASH_GetLogsSize>
10046476:	0003      	movs	r3, r0
10046478:	3b01      	subs	r3, #1
1004647a:	b29a      	uxth	r2, r3
1004647c:	2610      	movs	r6, #16
1004647e:	19bb      	adds	r3, r7, r6
10046480:	0011      	movs	r1, r2
10046482:	0018      	movs	r0, r3
10046484:	f7fe fad0 	bl	10044a28 <FLASH_ReadLogs>
			event.start = 0;
10046488:	2518      	movs	r5, #24
1004648a:	197b      	adds	r3, r7, r5
1004648c:	2200      	movs	r2, #0
1004648e:	709a      	strb	r2, [r3, #2]
			event.stop = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
10046490:	4b63      	ldr	r3, [pc, #396]	@ (10046620 <CompareTime+0x21c>)
10046492:	781b      	ldrb	r3, [r3, #0]
10046494:	b25b      	sxtb	r3, r3
10046496:	00db      	lsls	r3, r3, #3
10046498:	b25c      	sxtb	r4, r3
1004649a:	4b62      	ldr	r3, [pc, #392]	@ (10046624 <CompareTime+0x220>)
1004649c:	781b      	ldrb	r3, [r3, #0]
1004649e:	210f      	movs	r1, #15
100464a0:	0018      	movs	r0, r3
100464a2:	f7f9 fecd 	bl	10040240 <__udivsi3>
100464a6:	0003      	movs	r3, r0
100464a8:	b2db      	uxtb	r3, r3
100464aa:	b25b      	sxtb	r3, r3
100464ac:	4023      	ands	r3, r4
100464ae:	b25b      	sxtb	r3, r3
100464b0:	b2da      	uxtb	r2, r3
100464b2:	197b      	adds	r3, r7, r5
100464b4:	70da      	strb	r2, [r3, #3]
			event.folder = prevevent.folder;
100464b6:	19bb      	adds	r3, r7, r6
100464b8:	791a      	ldrb	r2, [r3, #4]
100464ba:	197b      	adds	r3, r7, r5
100464bc:	711a      	strb	r2, [r3, #4]
			event.track = prevevent.track;
100464be:	19bb      	adds	r3, r7, r6
100464c0:	795a      	ldrb	r2, [r3, #5]
100464c2:	197b      	adds	r3, r7, r5
100464c4:	715a      	strb	r2, [r3, #5]
		}
		FLASH_AppendLogs(event);
100464c6:	2318      	movs	r3, #24
100464c8:	18fb      	adds	r3, r7, r3
100464ca:	6818      	ldr	r0, [r3, #0]
100464cc:	6859      	ldr	r1, [r3, #4]
100464ce:	f7fe fa3b 	bl	10044948 <FLASH_AppendLogs>
		logging  = 0;
100464d2:	4b4f      	ldr	r3, [pc, #316]	@ (10046610 <CompareTime+0x20c>)
100464d4:	2200      	movs	r2, #0
100464d6:	701a      	strb	r2, [r3, #0]
100464d8:	e090      	b.n	100465fc <CompareTime+0x1f8>
	} else {
		scheduleEvent event;
		Event_t play = (Event_t){EVENT_PLAY, 0};
100464da:	1d3b      	adds	r3, r7, #4
100464dc:	220b      	movs	r2, #11
100464de:	701a      	strb	r2, [r3, #0]
100464e0:	1d3b      	adds	r3, r7, #4
100464e2:	2200      	movs	r2, #0
100464e4:	805a      	strh	r2, [r3, #2]
		for(uint16_t i = 0; i < FLASH_GetScheduleSize(); i++){
100464e6:	231e      	movs	r3, #30
100464e8:	18fb      	adds	r3, r7, r3
100464ea:	2200      	movs	r2, #0
100464ec:	801a      	strh	r2, [r3, #0]
100464ee:	e079      	b.n	100465e4 <CompareTime+0x1e0>
			event = FLASH_ReadSchedule(i);
100464f0:	2408      	movs	r4, #8
100464f2:	193a      	adds	r2, r7, r4
100464f4:	231e      	movs	r3, #30
100464f6:	18fb      	adds	r3, r7, r3
100464f8:	881b      	ldrh	r3, [r3, #0]
100464fa:	0019      	movs	r1, r3
100464fc:	0010      	movs	r0, r2
100464fe:	f7fe fb81 	bl	10044c04 <FLASH_ReadSchedule>
			if(event.month == month && event.day == day){//if the scheduled event has the right day
10046502:	0021      	movs	r1, r4
10046504:	187b      	adds	r3, r7, r1
10046506:	781a      	ldrb	r2, [r3, #0]
10046508:	4b42      	ldr	r3, [pc, #264]	@ (10046614 <CompareTime+0x210>)
1004650a:	781b      	ldrb	r3, [r3, #0]
1004650c:	429a      	cmp	r2, r3
1004650e:	d163      	bne.n	100465d8 <CompareTime+0x1d4>
10046510:	187b      	adds	r3, r7, r1
10046512:	785a      	ldrb	r2, [r3, #1]
10046514:	4b40      	ldr	r3, [pc, #256]	@ (10046618 <CompareTime+0x214>)
10046516:	781b      	ldrb	r3, [r3, #0]
10046518:	429a      	cmp	r2, r3
1004651a:	d15d      	bne.n	100465d8 <CompareTime+0x1d4>
				if((event.start&0b11111000)>>3 <= hour && (event.stop&0b11111000)>>3 > hour){//if the current min is within when the schedule should be playing
1004651c:	187b      	adds	r3, r7, r1
1004651e:	789b      	ldrb	r3, [r3, #2]
10046520:	08db      	lsrs	r3, r3, #3
10046522:	b2da      	uxtb	r2, r3
10046524:	4b3e      	ldr	r3, [pc, #248]	@ (10046620 <CompareTime+0x21c>)
10046526:	781b      	ldrb	r3, [r3, #0]
10046528:	429a      	cmp	r2, r3
1004652a:	d839      	bhi.n	100465a0 <CompareTime+0x19c>
1004652c:	187b      	adds	r3, r7, r1
1004652e:	78db      	ldrb	r3, [r3, #3]
10046530:	08db      	lsrs	r3, r3, #3
10046532:	b2da      	uxtb	r2, r3
10046534:	4b3a      	ldr	r3, [pc, #232]	@ (10046620 <CompareTime+0x21c>)
10046536:	781b      	ldrb	r3, [r3, #0]
10046538:	429a      	cmp	r2, r3
1004653a:	d931      	bls.n	100465a0 <CompareTime+0x19c>
					if((event.start & 0b011)*15 <= minute && (event.stop & 0b011)*15 > minute){//repeat for minute
1004653c:	187b      	adds	r3, r7, r1
1004653e:	789b      	ldrb	r3, [r3, #2]
10046540:	001a      	movs	r2, r3
10046542:	2303      	movs	r3, #3
10046544:	401a      	ands	r2, r3
10046546:	0013      	movs	r3, r2
10046548:	011b      	lsls	r3, r3, #4
1004654a:	1a9b      	subs	r3, r3, r2
1004654c:	4a35      	ldr	r2, [pc, #212]	@ (10046624 <CompareTime+0x220>)
1004654e:	7812      	ldrb	r2, [r2, #0]
10046550:	4293      	cmp	r3, r2
10046552:	dc25      	bgt.n	100465a0 <CompareTime+0x19c>
10046554:	187b      	adds	r3, r7, r1
10046556:	78db      	ldrb	r3, [r3, #3]
10046558:	001a      	movs	r2, r3
1004655a:	2303      	movs	r3, #3
1004655c:	401a      	ands	r2, r3
1004655e:	0013      	movs	r3, r2
10046560:	011b      	lsls	r3, r3, #4
10046562:	1a9b      	subs	r3, r3, r2
10046564:	4a2f      	ldr	r2, [pc, #188]	@ (10046624 <CompareTime+0x220>)
10046566:	7812      	ldrb	r2, [r2, #0]
10046568:	4293      	cmp	r3, r2
1004656a:	dd19      	ble.n	100465a0 <CompareTime+0x19c>
						if(event.folder != (MP3_GetCurrentFile()>>8)){//if we have not already sent this event
1004656c:	000d      	movs	r5, r1
1004656e:	187b      	adds	r3, r7, r1
10046570:	791b      	ldrb	r3, [r3, #4]
10046572:	001c      	movs	r4, r3
10046574:	f7ff fcf6 	bl	10045f64 <MP3_GetCurrentFile>
10046578:	0003      	movs	r3, r0
1004657a:	0a1b      	lsrs	r3, r3, #8
1004657c:	b29b      	uxth	r3, r3
1004657e:	429c      	cmp	r4, r3
10046580:	d03b      	beq.n	100465fa <CompareTime+0x1f6>
							play.data = (event.folder<<8) + event.track;//Update the MP3
10046582:	197b      	adds	r3, r7, r5
10046584:	791b      	ldrb	r3, [r3, #4]
10046586:	021b      	lsls	r3, r3, #8
10046588:	b29b      	uxth	r3, r3
1004658a:	197a      	adds	r2, r7, r5
1004658c:	7952      	ldrb	r2, [r2, #5]
1004658e:	189b      	adds	r3, r3, r2
10046590:	b29a      	uxth	r2, r3
10046592:	1d3b      	adds	r3, r7, #4
10046594:	805a      	strh	r2, [r3, #2]
							MP3_Event_Post(play);
10046596:	1d3b      	adds	r3, r7, #4
10046598:	6818      	ldr	r0, [r3, #0]
1004659a:	f7ff f94f 	bl	1004583c <MP3_Event_Post>
						}
						break;
1004659e:	e02c      	b.n	100465fa <CompareTime+0x1f6>
					}
				}
				if ((event.stop&0b11111000)>>3 == hour && (event.stop & 0b011)*15 == minute){
100465a0:	2108      	movs	r1, #8
100465a2:	187b      	adds	r3, r7, r1
100465a4:	78db      	ldrb	r3, [r3, #3]
100465a6:	08db      	lsrs	r3, r3, #3
100465a8:	b2da      	uxtb	r2, r3
100465aa:	4b1d      	ldr	r3, [pc, #116]	@ (10046620 <CompareTime+0x21c>)
100465ac:	781b      	ldrb	r3, [r3, #0]
100465ae:	429a      	cmp	r2, r3
100465b0:	d112      	bne.n	100465d8 <CompareTime+0x1d4>
100465b2:	187b      	adds	r3, r7, r1
100465b4:	78db      	ldrb	r3, [r3, #3]
100465b6:	001a      	movs	r2, r3
100465b8:	2303      	movs	r3, #3
100465ba:	401a      	ands	r2, r3
100465bc:	0013      	movs	r3, r2
100465be:	011b      	lsls	r3, r3, #4
100465c0:	1a9b      	subs	r3, r3, r2
100465c2:	4a18      	ldr	r2, [pc, #96]	@ (10046624 <CompareTime+0x220>)
100465c4:	7812      	ldrb	r2, [r2, #0]
100465c6:	4293      	cmp	r3, r2
100465c8:	d106      	bne.n	100465d8 <CompareTime+0x1d4>
					play.data = 0;
100465ca:	1d3b      	adds	r3, r7, #4
100465cc:	2200      	movs	r2, #0
100465ce:	805a      	strh	r2, [r3, #2]
					MP3_Event_Post(play);
100465d0:	1d3b      	adds	r3, r7, #4
100465d2:	6818      	ldr	r0, [r3, #0]
100465d4:	f7ff f932 	bl	1004583c <MP3_Event_Post>
		for(uint16_t i = 0; i < FLASH_GetScheduleSize(); i++){
100465d8:	211e      	movs	r1, #30
100465da:	187b      	adds	r3, r7, r1
100465dc:	881a      	ldrh	r2, [r3, #0]
100465de:	187b      	adds	r3, r7, r1
100465e0:	3201      	adds	r2, #1
100465e2:	801a      	strh	r2, [r3, #0]
100465e4:	f7fe fafa 	bl	10044bdc <FLASH_GetScheduleSize>
100465e8:	0003      	movs	r3, r0
100465ea:	001a      	movs	r2, r3
100465ec:	231e      	movs	r3, #30
100465ee:	18fb      	adds	r3, r7, r3
100465f0:	881b      	ldrh	r3, [r3, #0]
100465f2:	4293      	cmp	r3, r2
100465f4:	d200      	bcs.n	100465f8 <CompareTime+0x1f4>
100465f6:	e77b      	b.n	100464f0 <CompareTime+0xec>
100465f8:	e000      	b.n	100465fc <CompareTime+0x1f8>
						break;
100465fa:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}
	newdata = 0;
100465fc:	4b03      	ldr	r3, [pc, #12]	@ (1004660c <CompareTime+0x208>)
100465fe:	2200      	movs	r2, #0
10046600:	701a      	strb	r2, [r3, #0]
10046602:	e000      	b.n	10046606 <CompareTime+0x202>
		return;
10046604:	46c0      	nop			@ (mov r8, r8)
}
10046606:	46bd      	mov	sp, r7
10046608:	b009      	add	sp, #36	@ 0x24
1004660a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004660c:	20002014 	.word	0x20002014
10046610:	20002019 	.word	0x20002019
10046614:	20002015 	.word	0x20002015
10046618:	20002016 	.word	0x20002016
1004661c:	2000201a 	.word	0x2000201a
10046620:	20002017 	.word	0x20002017
10046624:	20002018 	.word	0x20002018

10046628 <Scheduler_GetMonth>:
uint8_t Scheduler_GetMonth(){
10046628:	b580      	push	{r7, lr}
1004662a:	af00      	add	r7, sp, #0
	return month;
1004662c:	4b02      	ldr	r3, [pc, #8]	@ (10046638 <Scheduler_GetMonth+0x10>)
1004662e:	781b      	ldrb	r3, [r3, #0]
}
10046630:	0018      	movs	r0, r3
10046632:	46bd      	mov	sp, r7
10046634:	bd80      	pop	{r7, pc}
10046636:	46c0      	nop			@ (mov r8, r8)
10046638:	20002015 	.word	0x20002015

1004663c <Scheduler_GetDay>:
uint8_t Scheduler_GetDay(){
1004663c:	b580      	push	{r7, lr}
1004663e:	af00      	add	r7, sp, #0
	return day;
10046640:	4b02      	ldr	r3, [pc, #8]	@ (1004664c <Scheduler_GetDay+0x10>)
10046642:	781b      	ldrb	r3, [r3, #0]
}
10046644:	0018      	movs	r0, r3
10046646:	46bd      	mov	sp, r7
10046648:	bd80      	pop	{r7, pc}
1004664a:	46c0      	nop			@ (mov r8, r8)
1004664c:	20002016 	.word	0x20002016

10046650 <Scheduler_GetHour>:
uint8_t Scheduler_GetHour(){
10046650:	b580      	push	{r7, lr}
10046652:	af00      	add	r7, sp, #0
	return hour;
10046654:	4b02      	ldr	r3, [pc, #8]	@ (10046660 <Scheduler_GetHour+0x10>)
10046656:	781b      	ldrb	r3, [r3, #0]
}
10046658:	0018      	movs	r0, r3
1004665a:	46bd      	mov	sp, r7
1004665c:	bd80      	pop	{r7, pc}
1004665e:	46c0      	nop			@ (mov r8, r8)
10046660:	20002017 	.word	0x20002017

10046664 <Scheduler_GetMinute>:
uint8_t Scheduler_GetMinute(){
10046664:	b580      	push	{r7, lr}
10046666:	af00      	add	r7, sp, #0
	return minute;
10046668:	4b02      	ldr	r3, [pc, #8]	@ (10046674 <Scheduler_GetMinute+0x10>)
1004666a:	781b      	ldrb	r3, [r3, #0]
}
1004666c:	0018      	movs	r0, r3
1004666e:	46bd      	mov	sp, r7
10046670:	bd80      	pop	{r7, pc}
10046672:	46c0      	nop			@ (mov r8, r8)
10046674:	20002018 	.word	0x20002018

10046678 <Scheduler_Event_Init>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t Scheduler_Event_Init(FIFO Queue){
10046678:	b580      	push	{r7, lr}
1004667a:	b082      	sub	sp, #8
1004667c:	af00      	add	r7, sp, #0
1004667e:	6078      	str	r0, [r7, #4]
    Schedulerqueue = Queue;
10046680:	4b0c      	ldr	r3, [pc, #48]	@ (100466b4 <Scheduler_Event_Init+0x3c>)
10046682:	687a      	ldr	r2, [r7, #4]
10046684:	601a      	str	r2, [r3, #0]
    I2C_Init();
10046686:	f7fe fe0b 	bl	100452a0 <I2C_Init>
    TIMERS_Init();
1004668a:	f000 f95f 	bl	1004694c <TIMERS_Init>
    I2C_Transmit(RTCADDRESS, RTCSECADDR, 0x80);//enable the clock
1004668e:	2280      	movs	r2, #128	@ 0x80
10046690:	2100      	movs	r1, #0
10046692:	206f      	movs	r0, #111	@ 0x6f
10046694:	f7fe fe7e 	bl	10045394 <I2C_Transmit>
	I2C_Transmit(RTCADDRESS, RTCSTATADDR, 0x28);//enables the use of backup battery
10046698:	2228      	movs	r2, #40	@ 0x28
1004669a:	2103      	movs	r1, #3
1004669c:	206f      	movs	r0, #111	@ 0x6f
1004669e:	f7fe fe79 	bl	10045394 <I2C_Transmit>
    starttime = -1;//force check time on wake-up
100466a2:	4b05      	ldr	r3, [pc, #20]	@ (100466b8 <Scheduler_Event_Init+0x40>)
100466a4:	2201      	movs	r2, #1
100466a6:	4252      	negs	r2, r2
100466a8:	601a      	str	r2, [r3, #0]
    return INIT_OK;
100466aa:	2301      	movs	r3, #1
}
100466ac:	0018      	movs	r0, r3
100466ae:	46bd      	mov	sp, r7
100466b0:	b002      	add	sp, #8
100466b2:	bd80      	pop	{r7, pc}
100466b4:	2000200c 	.word	0x2000200c
100466b8:	20002010 	.word	0x20002010

100466bc <Scheduler_Event_Post>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void Scheduler_Event_Post(Event_t event){
100466bc:	b580      	push	{r7, lr}
100466be:	b082      	sub	sp, #8
100466c0:	af00      	add	r7, sp, #0
100466c2:	1d3b      	adds	r3, r7, #4
100466c4:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(Schedulerqueue, event);
100466c6:	4b05      	ldr	r3, [pc, #20]	@ (100466dc <Scheduler_Event_Post+0x20>)
100466c8:	681a      	ldr	r2, [r3, #0]
100466ca:	1d3b      	adds	r3, r7, #4
100466cc:	6819      	ldr	r1, [r3, #0]
100466ce:	0010      	movs	r0, r2
100466d0:	f7fd ffbb 	bl	1004464a <FIFO_Enqueue>
}
100466d4:	46c0      	nop			@ (mov r8, r8)
100466d6:	46bd      	mov	sp, r7
100466d8:	b002      	add	sp, #8
100466da:	bd80      	pop	{r7, pc}
100466dc:	2000200c 	.word	0x2000200c

100466e0 <Scheduler_Event_Updater>:
 * @Function: Scheduler_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t Scheduler_Event_Updater(void){
100466e0:	b580      	push	{r7, lr}
100466e2:	b084      	sub	sp, #16
100466e4:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
100466e6:	1d3b      	adds	r3, r7, #4
100466e8:	2200      	movs	r2, #0
100466ea:	701a      	strb	r2, [r3, #0]
100466ec:	1d3b      	adds	r3, r7, #4
100466ee:	2200      	movs	r2, #0
100466f0:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
100466f2:	f000 f977 	bl	100469e4 <TIMERS_GetMilliSeconds>
100466f6:	0003      	movs	r3, r0
100466f8:	60fb      	str	r3, [r7, #12]
	if((timer-starttime) >= REFRESHRATE){
100466fa:	4b15      	ldr	r3, [pc, #84]	@ (10046750 <Scheduler_Event_Updater+0x70>)
100466fc:	681b      	ldr	r3, [r3, #0]
100466fe:	68fa      	ldr	r2, [r7, #12]
10046700:	1ad3      	subs	r3, r2, r3
10046702:	4a14      	ldr	r2, [pc, #80]	@ (10046754 <Scheduler_Event_Updater+0x74>)
10046704:	4293      	cmp	r3, r2
10046706:	d90c      	bls.n	10046722 <Scheduler_Event_Updater+0x42>
		event.status = EVENT_TIMEOUT;
10046708:	1d3b      	adds	r3, r7, #4
1004670a:	2209      	movs	r2, #9
1004670c:	701a      	strb	r2, [r3, #0]
		event.data = 0;
1004670e:	1d3b      	adds	r3, r7, #4
10046710:	2200      	movs	r2, #0
10046712:	805a      	strh	r2, [r3, #2]
		starttime = timer;
10046714:	4b0e      	ldr	r3, [pc, #56]	@ (10046750 <Scheduler_Event_Updater+0x70>)
10046716:	68fa      	ldr	r2, [r7, #12]
10046718:	601a      	str	r2, [r3, #0]
		Scheduler_Event_Post(event);
1004671a:	1d3b      	adds	r3, r7, #4
1004671c:	6818      	ldr	r0, [r3, #0]
1004671e:	f7ff ffcd 	bl	100466bc <Scheduler_Event_Post>
	}
    return event;
10046722:	2108      	movs	r1, #8
10046724:	187b      	adds	r3, r7, r1
10046726:	1d3a      	adds	r2, r7, #4
10046728:	6812      	ldr	r2, [r2, #0]
1004672a:	601a      	str	r2, [r3, #0]
1004672c:	187a      	adds	r2, r7, r1
1004672e:	2300      	movs	r3, #0
10046730:	8811      	ldrh	r1, [r2, #0]
10046732:	0409      	lsls	r1, r1, #16
10046734:	0c09      	lsrs	r1, r1, #16
10046736:	0c1b      	lsrs	r3, r3, #16
10046738:	041b      	lsls	r3, r3, #16
1004673a:	430b      	orrs	r3, r1
1004673c:	8852      	ldrh	r2, [r2, #2]
1004673e:	0412      	lsls	r2, r2, #16
10046740:	041b      	lsls	r3, r3, #16
10046742:	0c1b      	lsrs	r3, r3, #16
10046744:	4313      	orrs	r3, r2
}
10046746:	0018      	movs	r0, r3
10046748:	46bd      	mov	sp, r7
1004674a:	b004      	add	sp, #16
1004674c:	bd80      	pop	{r7, pc}
1004674e:	46c0      	nop			@ (mov r8, r8)
10046750:	20002010 	.word	0x20002010
10046754:	0000ea5f 	.word	0x0000ea5f

10046758 <Scheduler_Event_Handler>:
 * @Function: Scheduler_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t Scheduler_Event_Handler(Event_t event){
10046758:	b580      	push	{r7, lr}
1004675a:	b082      	sub	sp, #8
1004675c:	af00      	add	r7, sp, #0
1004675e:	1d3b      	adds	r3, r7, #4
10046760:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_PLAY){
10046762:	1d3b      	adds	r3, r7, #4
10046764:	781b      	ldrb	r3, [r3, #0]
10046766:	b25b      	sxtb	r3, r3
10046768:	2b0b      	cmp	r3, #11
1004676a:	d11b      	bne.n	100467a4 <Scheduler_Event_Handler+0x4c>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
1004676c:	2201      	movs	r2, #1
1004676e:	2105      	movs	r1, #5
10046770:	206f      	movs	r0, #111	@ 0x6f
10046772:	f7fe fe6d 	bl	10045450 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
10046776:	2201      	movs	r2, #1
10046778:	2104      	movs	r1, #4
1004677a:	206f      	movs	r0, #111	@ 0x6f
1004677c:	f7fe fe68 	bl	10045450 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
10046780:	2201      	movs	r2, #1
10046782:	2102      	movs	r1, #2
10046784:	206f      	movs	r0, #111	@ 0x6f
10046786:	f7fe fe63 	bl	10045450 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
1004678a:	2201      	movs	r2, #1
1004678c:	2101      	movs	r1, #1
1004678e:	206f      	movs	r0, #111	@ 0x6f
10046790:	f7fe fe5e 	bl	10045450 <I2C_Recieve>
		logging = 1;
10046794:	4b66      	ldr	r3, [pc, #408]	@ (10046930 <Scheduler_Event_Handler+0x1d8>)
10046796:	2201      	movs	r2, #1
10046798:	701a      	strb	r2, [r3, #0]
		playdata = event.data;
1004679a:	1d3b      	adds	r3, r7, #4
1004679c:	885b      	ldrh	r3, [r3, #2]
1004679e:	b2da      	uxtb	r2, r3
100467a0:	4b64      	ldr	r3, [pc, #400]	@ (10046934 <Scheduler_Event_Handler+0x1dc>)
100467a2:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
100467a4:	1d3b      	adds	r3, r7, #4
100467a6:	781b      	ldrb	r3, [r3, #0]
100467a8:	b25b      	sxtb	r3, r3
100467aa:	2b09      	cmp	r3, #9
100467ac:	d113      	bne.n	100467d6 <Scheduler_Event_Handler+0x7e>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, 1);
100467ae:	2201      	movs	r2, #1
100467b0:	2105      	movs	r1, #5
100467b2:	206f      	movs	r0, #111	@ 0x6f
100467b4:	f7fe fe4c 	bl	10045450 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, 1);
100467b8:	2201      	movs	r2, #1
100467ba:	2104      	movs	r1, #4
100467bc:	206f      	movs	r0, #111	@ 0x6f
100467be:	f7fe fe47 	bl	10045450 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, 1);
100467c2:	2201      	movs	r2, #1
100467c4:	2102      	movs	r1, #2
100467c6:	206f      	movs	r0, #111	@ 0x6f
100467c8:	f7fe fe42 	bl	10045450 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, 1);
100467cc:	2201      	movs	r2, #1
100467ce:	2101      	movs	r1, #1
100467d0:	206f      	movs	r0, #111	@ 0x6f
100467d2:	f7fe fe3d 	bl	10045450 <I2C_Recieve>
	}
	if(event.status == EVENT_I2C){
100467d6:	1d3b      	adds	r3, r7, #4
100467d8:	781b      	ldrb	r3, [r3, #0]
100467da:	b25b      	sxtb	r3, r3
100467dc:	2b05      	cmp	r3, #5
100467de:	d000      	beq.n	100467e2 <Scheduler_Event_Handler+0x8a>
100467e0:	e0a1      	b.n	10046926 <Scheduler_Event_Handler+0x1ce>
		switch (event.data>>8){
100467e2:	1d3b      	adds	r3, r7, #4
100467e4:	885b      	ldrh	r3, [r3, #2]
100467e6:	0a1b      	lsrs	r3, r3, #8
100467e8:	b29b      	uxth	r3, r3
100467ea:	2b05      	cmp	r3, #5
100467ec:	d00b      	beq.n	10046806 <Scheduler_Event_Handler+0xae>
100467ee:	dd00      	ble.n	100467f2 <Scheduler_Event_Handler+0x9a>
100467f0:	e099      	b.n	10046926 <Scheduler_Event_Handler+0x1ce>
100467f2:	2b04      	cmp	r3, #4
100467f4:	d020      	beq.n	10046838 <Scheduler_Event_Handler+0xe0>
100467f6:	dd00      	ble.n	100467fa <Scheduler_Event_Handler+0xa2>
100467f8:	e095      	b.n	10046926 <Scheduler_Event_Handler+0x1ce>
100467fa:	2b01      	cmp	r3, #1
100467fc:	d100      	bne.n	10046800 <Scheduler_Event_Handler+0xa8>
100467fe:	e076      	b.n	100468ee <Scheduler_Event_Handler+0x196>
10046800:	2b02      	cmp	r3, #2
10046802:	d032      	beq.n	1004686a <Scheduler_Event_Handler+0x112>
10046804:	e08f      	b.n	10046926 <Scheduler_Event_Handler+0x1ce>
		case RTCMNTHADDR:
			month = ((event.data & 0x10)>>4)*10 + (event.data & 0x0F);
10046806:	1d3b      	adds	r3, r7, #4
10046808:	885b      	ldrh	r3, [r3, #2]
1004680a:	111b      	asrs	r3, r3, #4
1004680c:	b2db      	uxtb	r3, r3
1004680e:	2201      	movs	r2, #1
10046810:	4013      	ands	r3, r2
10046812:	b2db      	uxtb	r3, r3
10046814:	1c1a      	adds	r2, r3, #0
10046816:	0092      	lsls	r2, r2, #2
10046818:	18d3      	adds	r3, r2, r3
1004681a:	18db      	adds	r3, r3, r3
1004681c:	b2da      	uxtb	r2, r3
1004681e:	1d3b      	adds	r3, r7, #4
10046820:	885b      	ldrh	r3, [r3, #2]
10046822:	b2db      	uxtb	r3, r3
10046824:	210f      	movs	r1, #15
10046826:	400b      	ands	r3, r1
10046828:	b2db      	uxtb	r3, r3
1004682a:	18d3      	adds	r3, r2, r3
1004682c:	b2da      	uxtb	r2, r3
1004682e:	4b42      	ldr	r3, [pc, #264]	@ (10046938 <Scheduler_Event_Handler+0x1e0>)
10046830:	701a      	strb	r2, [r3, #0]
			CompareTime();
10046832:	f7ff fde7 	bl	10046404 <CompareTime>
			break;
10046836:	e076      	b.n	10046926 <Scheduler_Event_Handler+0x1ce>
		case RTCDAYADDR:
			day = ((event.data & 0x30)>>4)*10 + (event.data & 0x0F);
10046838:	1d3b      	adds	r3, r7, #4
1004683a:	885b      	ldrh	r3, [r3, #2]
1004683c:	111b      	asrs	r3, r3, #4
1004683e:	b2db      	uxtb	r3, r3
10046840:	2203      	movs	r2, #3
10046842:	4013      	ands	r3, r2
10046844:	b2db      	uxtb	r3, r3
10046846:	1c1a      	adds	r2, r3, #0
10046848:	0092      	lsls	r2, r2, #2
1004684a:	18d3      	adds	r3, r2, r3
1004684c:	18db      	adds	r3, r3, r3
1004684e:	b2da      	uxtb	r2, r3
10046850:	1d3b      	adds	r3, r7, #4
10046852:	885b      	ldrh	r3, [r3, #2]
10046854:	b2db      	uxtb	r3, r3
10046856:	210f      	movs	r1, #15
10046858:	400b      	ands	r3, r1
1004685a:	b2db      	uxtb	r3, r3
1004685c:	18d3      	adds	r3, r2, r3
1004685e:	b2da      	uxtb	r2, r3
10046860:	4b36      	ldr	r3, [pc, #216]	@ (1004693c <Scheduler_Event_Handler+0x1e4>)
10046862:	701a      	strb	r2, [r3, #0]
			CompareTime();
10046864:	f7ff fdce 	bl	10046404 <CompareTime>
			break;
10046868:	e05d      	b.n	10046926 <Scheduler_Event_Handler+0x1ce>
		case RTCHOURADDR:
			if(event.data & 0x40){//AM/PM
1004686a:	1d3b      	adds	r3, r7, #4
1004686c:	885b      	ldrh	r3, [r3, #2]
1004686e:	001a      	movs	r2, r3
10046870:	2340      	movs	r3, #64	@ 0x40
10046872:	4013      	ands	r3, r2
10046874:	d022      	beq.n	100468bc <Scheduler_Event_Handler+0x164>
				hour = 12*((event.data &0x20)>>5)+ 10*((event.data &0x10)>>4) + ((event.data &0x0F));
10046876:	1d3b      	adds	r3, r7, #4
10046878:	885b      	ldrh	r3, [r3, #2]
1004687a:	115b      	asrs	r3, r3, #5
1004687c:	b2db      	uxtb	r3, r3
1004687e:	2201      	movs	r2, #1
10046880:	4013      	ands	r3, r2
10046882:	b2db      	uxtb	r3, r3
10046884:	220c      	movs	r2, #12
10046886:	4353      	muls	r3, r2
10046888:	b2da      	uxtb	r2, r3
1004688a:	1d3b      	adds	r3, r7, #4
1004688c:	885b      	ldrh	r3, [r3, #2]
1004688e:	111b      	asrs	r3, r3, #4
10046890:	b2db      	uxtb	r3, r3
10046892:	2101      	movs	r1, #1
10046894:	400b      	ands	r3, r1
10046896:	b2db      	uxtb	r3, r3
10046898:	1c19      	adds	r1, r3, #0
1004689a:	0089      	lsls	r1, r1, #2
1004689c:	18cb      	adds	r3, r1, r3
1004689e:	18db      	adds	r3, r3, r3
100468a0:	b2db      	uxtb	r3, r3
100468a2:	18d3      	adds	r3, r2, r3
100468a4:	b2da      	uxtb	r2, r3
100468a6:	1d3b      	adds	r3, r7, #4
100468a8:	885b      	ldrh	r3, [r3, #2]
100468aa:	b2db      	uxtb	r3, r3
100468ac:	210f      	movs	r1, #15
100468ae:	400b      	ands	r3, r1
100468b0:	b2db      	uxtb	r3, r3
100468b2:	18d3      	adds	r3, r2, r3
100468b4:	b2da      	uxtb	r2, r3
100468b6:	4b22      	ldr	r3, [pc, #136]	@ (10046940 <Scheduler_Event_Handler+0x1e8>)
100468b8:	701a      	strb	r2, [r3, #0]
100468ba:	e015      	b.n	100468e8 <Scheduler_Event_Handler+0x190>
			}else {//24Hr
				hour = 10*((event.data &0x30)>>4) + ((event.data &0x0F));
100468bc:	1d3b      	adds	r3, r7, #4
100468be:	885b      	ldrh	r3, [r3, #2]
100468c0:	111b      	asrs	r3, r3, #4
100468c2:	b2db      	uxtb	r3, r3
100468c4:	2203      	movs	r2, #3
100468c6:	4013      	ands	r3, r2
100468c8:	b2db      	uxtb	r3, r3
100468ca:	1c1a      	adds	r2, r3, #0
100468cc:	0092      	lsls	r2, r2, #2
100468ce:	18d3      	adds	r3, r2, r3
100468d0:	18db      	adds	r3, r3, r3
100468d2:	b2da      	uxtb	r2, r3
100468d4:	1d3b      	adds	r3, r7, #4
100468d6:	885b      	ldrh	r3, [r3, #2]
100468d8:	b2db      	uxtb	r3, r3
100468da:	210f      	movs	r1, #15
100468dc:	400b      	ands	r3, r1
100468de:	b2db      	uxtb	r3, r3
100468e0:	18d3      	adds	r3, r2, r3
100468e2:	b2da      	uxtb	r2, r3
100468e4:	4b16      	ldr	r3, [pc, #88]	@ (10046940 <Scheduler_Event_Handler+0x1e8>)
100468e6:	701a      	strb	r2, [r3, #0]
			}
			CompareTime();
100468e8:	f7ff fd8c 	bl	10046404 <CompareTime>
			break;
100468ec:	e01b      	b.n	10046926 <Scheduler_Event_Handler+0x1ce>
		case RTCMINADDR:
			newdata = 1;
100468ee:	4b15      	ldr	r3, [pc, #84]	@ (10046944 <Scheduler_Event_Handler+0x1ec>)
100468f0:	2201      	movs	r2, #1
100468f2:	701a      	strb	r2, [r3, #0]
			//MINTEN2 MINTEN1 MINTEN0 MINONE3 MINONE2 MINONE1 MINONE0
			minute = 10*((event.data & 0x30)>>4) +((event.data &0x0F));
100468f4:	1d3b      	adds	r3, r7, #4
100468f6:	885b      	ldrh	r3, [r3, #2]
100468f8:	111b      	asrs	r3, r3, #4
100468fa:	b2db      	uxtb	r3, r3
100468fc:	2203      	movs	r2, #3
100468fe:	4013      	ands	r3, r2
10046900:	b2db      	uxtb	r3, r3
10046902:	1c1a      	adds	r2, r3, #0
10046904:	0092      	lsls	r2, r2, #2
10046906:	18d3      	adds	r3, r2, r3
10046908:	18db      	adds	r3, r3, r3
1004690a:	b2da      	uxtb	r2, r3
1004690c:	1d3b      	adds	r3, r7, #4
1004690e:	885b      	ldrh	r3, [r3, #2]
10046910:	b2db      	uxtb	r3, r3
10046912:	210f      	movs	r1, #15
10046914:	400b      	ands	r3, r1
10046916:	b2db      	uxtb	r3, r3
10046918:	18d3      	adds	r3, r2, r3
1004691a:	b2da      	uxtb	r2, r3
1004691c:	4b0a      	ldr	r3, [pc, #40]	@ (10046948 <Scheduler_Event_Handler+0x1f0>)
1004691e:	701a      	strb	r2, [r3, #0]
			CompareTime();
10046920:	f7ff fd70 	bl	10046404 <CompareTime>

			break;
10046924:	46c0      	nop			@ (mov r8, r8)
		}
	}
    return 1;
10046926:	2301      	movs	r3, #1
}
10046928:	0018      	movs	r0, r3
1004692a:	46bd      	mov	sp, r7
1004692c:	b002      	add	sp, #8
1004692e:	bd80      	pop	{r7, pc}
10046930:	20002019 	.word	0x20002019
10046934:	2000201a 	.word	0x2000201a
10046938:	20002015 	.word	0x20002015
1004693c:	20002016 	.word	0x20002016
10046940:	20002017 	.word	0x20002017
10046944:	20002014 	.word	0x20002014
10046948:	20002018 	.word	0x20002018

1004694c <TIMERS_Init>:
 * @function: TIMERS_Init()
 * @brief: initialize
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint32_t TIMERS_Init(){
1004694c:	b580      	push	{r7, lr}
1004694e:	b084      	sub	sp, #16
10046950:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10046952:	4b20      	ldr	r3, [pc, #128]	@ (100469d4 <TIMERS_Init+0x88>)
10046954:	781b      	ldrb	r3, [r3, #0]
10046956:	2b00      	cmp	r3, #0
10046958:	d001      	beq.n	1004695e <TIMERS_Init+0x12>
1004695a:	2301      	movs	r3, #1
1004695c:	e036      	b.n	100469cc <TIMERS_Init+0x80>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
1004695e:	003b      	movs	r3, r7
10046960:	0018      	movs	r0, r3
10046962:	2310      	movs	r3, #16
10046964:	001a      	movs	r2, r3
10046966:	2100      	movs	r1, #0
10046968:	f021 fa72 	bl	10067e50 <memset>
	htim2.Instance = TIM2;
1004696c:	4b1a      	ldr	r3, [pc, #104]	@ (100469d8 <TIMERS_Init+0x8c>)
1004696e:	4a1b      	ldr	r2, [pc, #108]	@ (100469dc <TIMERS_Init+0x90>)
10046970:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32;
10046972:	4b19      	ldr	r3, [pc, #100]	@ (100469d8 <TIMERS_Init+0x8c>)
10046974:	2220      	movs	r2, #32
10046976:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
10046978:	4b17      	ldr	r3, [pc, #92]	@ (100469d8 <TIMERS_Init+0x8c>)
1004697a:	2200      	movs	r2, #0
1004697c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
1004697e:	4b16      	ldr	r3, [pc, #88]	@ (100469d8 <TIMERS_Init+0x8c>)
10046980:	4a17      	ldr	r2, [pc, #92]	@ (100469e0 <TIMERS_Init+0x94>)
10046982:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
10046984:	4b14      	ldr	r3, [pc, #80]	@ (100469d8 <TIMERS_Init+0x8c>)
10046986:	2200      	movs	r2, #0
10046988:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1004698a:	4b13      	ldr	r3, [pc, #76]	@ (100469d8 <TIMERS_Init+0x8c>)
1004698c:	2200      	movs	r2, #0
1004698e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
10046990:	4b11      	ldr	r3, [pc, #68]	@ (100469d8 <TIMERS_Init+0x8c>)
10046992:	0018      	movs	r0, r3
10046994:	f006 fee9 	bl	1004d76a <HAL_TIM_Base_Init>
10046998:	1e03      	subs	r3, r0, #0
1004699a:	d001      	beq.n	100469a0 <TIMERS_Init+0x54>
	{
		Error_Handler();
1004699c:	f7fb fbe6 	bl	1004216c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
100469a0:	003b      	movs	r3, r7
100469a2:	2280      	movs	r2, #128	@ 0x80
100469a4:	0152      	lsls	r2, r2, #5
100469a6:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
100469a8:	003a      	movs	r2, r7
100469aa:	4b0b      	ldr	r3, [pc, #44]	@ (100469d8 <TIMERS_Init+0x8c>)
100469ac:	0011      	movs	r1, r2
100469ae:	0018      	movs	r0, r3
100469b0:	f007 f854 	bl	1004da5c <HAL_TIM_ConfigClockSource>
100469b4:	1e03      	subs	r3, r0, #0
100469b6:	d001      	beq.n	100469bc <TIMERS_Init+0x70>
	{
		Error_Handler();
100469b8:	f7fb fbd8 	bl	1004216c <Error_Handler>
	}
    HAL_TIM_Base_Start_IT(&htim2); // start interrupt
100469bc:	4b06      	ldr	r3, [pc, #24]	@ (100469d8 <TIMERS_Init+0x8c>)
100469be:	0018      	movs	r0, r3
100469c0:	f006 ff18 	bl	1004d7f4 <HAL_TIM_Base_Start_IT>
    initialized = 1;
100469c4:	4b03      	ldr	r3, [pc, #12]	@ (100469d4 <TIMERS_Init+0x88>)
100469c6:	2201      	movs	r2, #1
100469c8:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
100469ca:	2301      	movs	r3, #1
}
100469cc:	0018      	movs	r0, r3
100469ce:	46bd      	mov	sp, r7
100469d0:	b004      	add	sp, #16
100469d2:	bd80      	pop	{r7, pc}
100469d4:	2000205c 	.word	0x2000205c
100469d8:	2000201c 	.word	0x2000201c
100469dc:	40002000 	.word	0x40002000
100469e0:	000003e7 	.word	0x000003e7

100469e4 <TIMERS_GetMilliSeconds>:
 * @function: TIMERS_GetMilliSeconds()
 * @brief: accesses the free running timer's milliseconds
 * @param: none
 * @return: uint32_t FRT's milliseconds
 */
uint32_t TIMERS_GetMilliSeconds(){
100469e4:	b580      	push	{r7, lr}
100469e6:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100469e8:	4b05      	ldr	r3, [pc, #20]	@ (10046a00 <TIMERS_GetMilliSeconds+0x1c>)
100469ea:	781b      	ldrb	r3, [r3, #0]
100469ec:	2b00      	cmp	r3, #0
100469ee:	d101      	bne.n	100469f4 <TIMERS_GetMilliSeconds+0x10>
100469f0:	2300      	movs	r3, #0
100469f2:	e001      	b.n	100469f8 <TIMERS_GetMilliSeconds+0x14>
	return milliSeconds;
100469f4:	4b03      	ldr	r3, [pc, #12]	@ (10046a04 <TIMERS_GetMilliSeconds+0x20>)
100469f6:	681b      	ldr	r3, [r3, #0]
}
100469f8:	0018      	movs	r0, r3
100469fa:	46bd      	mov	sp, r7
100469fc:	bd80      	pop	{r7, pc}
100469fe:	46c0      	nop			@ (mov r8, r8)
10046a00:	2000205c 	.word	0x2000205c
10046a04:	20002058 	.word	0x20002058

10046a08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
10046a08:	b580      	push	{r7, lr}
10046a0a:	af00      	add	r7, sp, #0

	milliSeconds++;
10046a0c:	4b05      	ldr	r3, [pc, #20]	@ (10046a24 <TIM2_IRQHandler+0x1c>)
10046a0e:	681b      	ldr	r3, [r3, #0]
10046a10:	1c5a      	adds	r2, r3, #1
10046a12:	4b04      	ldr	r3, [pc, #16]	@ (10046a24 <TIM2_IRQHandler+0x1c>)
10046a14:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
10046a16:	4b04      	ldr	r3, [pc, #16]	@ (10046a28 <TIM2_IRQHandler+0x20>)
10046a18:	0018      	movs	r0, r3
10046a1a:	f006 ff31 	bl	1004d880 <HAL_TIM_IRQHandler>
}
10046a1e:	46c0      	nop			@ (mov r8, r8)
10046a20:	46bd      	mov	sp, r7
10046a22:	bd80      	pop	{r7, pc}
10046a24:	20002058 	.word	0x20002058
10046a28:	2000201c 	.word	0x2000201c

10046a2c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
10046a2c:	b580      	push	{r7, lr}
10046a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	if(hlpuart1.Instance->ISR & USART_ISR_ORE_Msk){
10046a30:	4b3c      	ldr	r3, [pc, #240]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046a32:	681b      	ldr	r3, [r3, #0]
10046a34:	69db      	ldr	r3, [r3, #28]
10046a36:	2208      	movs	r2, #8
10046a38:	4013      	ands	r3, r2
10046a3a:	d003      	beq.n	10046a44 <LPUART1_IRQHandler+0x18>
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_OREF);
10046a3c:	4b39      	ldr	r3, [pc, #228]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046a3e:	681b      	ldr	r3, [r3, #0]
10046a40:	2208      	movs	r2, #8
10046a42:	621a      	str	r2, [r3, #32]
	}
	if(hlpuart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
10046a44:	4b37      	ldr	r3, [pc, #220]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046a46:	681b      	ldr	r3, [r3, #0]
10046a48:	69db      	ldr	r3, [r3, #28]
10046a4a:	2220      	movs	r2, #32
10046a4c:	4013      	ands	r3, r2
10046a4e:	d030      	beq.n	10046ab2 <LPUART1_IRQHandler+0x86>
		if(!LPUARTrx.full){
10046a50:	4b35      	ldr	r3, [pc, #212]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a52:	2224      	movs	r2, #36	@ 0x24
10046a54:	5c9b      	ldrb	r3, [r3, r2]
10046a56:	2201      	movs	r2, #1
10046a58:	4053      	eors	r3, r2
10046a5a:	b2db      	uxtb	r3, r3
10046a5c:	2b00      	cmp	r3, #0
10046a5e:	d020      	beq.n	10046aa2 <LPUART1_IRQHandler+0x76>
			LPUARTrx.data[LPUARTrx.head] = hlpuart1.Instance->RDR;
10046a60:	4b30      	ldr	r3, [pc, #192]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046a62:	681b      	ldr	r3, [r3, #0]
10046a64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10046a66:	4b30      	ldr	r3, [pc, #192]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a68:	8c1b      	ldrh	r3, [r3, #32]
10046a6a:	001a      	movs	r2, r3
10046a6c:	b2c9      	uxtb	r1, r1
10046a6e:	4b2e      	ldr	r3, [pc, #184]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a70:	5499      	strb	r1, [r3, r2]
			LPUARTrx.head++;
10046a72:	4b2d      	ldr	r3, [pc, #180]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a74:	8c1b      	ldrh	r3, [r3, #32]
10046a76:	3301      	adds	r3, #1
10046a78:	b29a      	uxth	r2, r3
10046a7a:	4b2b      	ldr	r3, [pc, #172]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a7c:	841a      	strh	r2, [r3, #32]
			LPUARTrx.head %= LPUARTCIRCBUFFSIZE;
10046a7e:	4b2a      	ldr	r3, [pc, #168]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a80:	8c1b      	ldrh	r3, [r3, #32]
10046a82:	221f      	movs	r2, #31
10046a84:	4013      	ands	r3, r2
10046a86:	b29a      	uxth	r2, r3
10046a88:	4b27      	ldr	r3, [pc, #156]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a8a:	841a      	strh	r2, [r3, #32]
			if(LPUARTrx.tail == LPUARTrx.head){
10046a8c:	4b26      	ldr	r3, [pc, #152]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a8e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
10046a90:	4b25      	ldr	r3, [pc, #148]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a92:	8c1b      	ldrh	r3, [r3, #32]
10046a94:	429a      	cmp	r2, r3
10046a96:	d10c      	bne.n	10046ab2 <LPUART1_IRQHandler+0x86>
				LPUARTrx.full = true;
10046a98:	4b23      	ldr	r3, [pc, #140]	@ (10046b28 <LPUART1_IRQHandler+0xfc>)
10046a9a:	2224      	movs	r2, #36	@ 0x24
10046a9c:	2101      	movs	r1, #1
10046a9e:	5499      	strb	r1, [r3, r2]
10046aa0:	e007      	b.n	10046ab2 <LPUART1_IRQHandler+0x86>
			}
		} else {
			hlpuart1.Instance->RQR |= 0x08;
10046aa2:	4b20      	ldr	r3, [pc, #128]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046aa4:	681b      	ldr	r3, [r3, #0]
10046aa6:	699a      	ldr	r2, [r3, #24]
10046aa8:	4b1e      	ldr	r3, [pc, #120]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046aaa:	681b      	ldr	r3, [r3, #0]
10046aac:	2108      	movs	r1, #8
10046aae:	430a      	orrs	r2, r1
10046ab0:	619a      	str	r2, [r3, #24]
		}
	}
	if((hlpuart1.Instance->ISR & USART_ISR_TC_Msk)){
10046ab2:	4b1c      	ldr	r3, [pc, #112]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046ab4:	681b      	ldr	r3, [r3, #0]
10046ab6:	69db      	ldr	r3, [r3, #28]
10046ab8:	2240      	movs	r2, #64	@ 0x40
10046aba:	4013      	ands	r3, r2
10046abc:	d02e      	beq.n	10046b1c <LPUART1_IRQHandler+0xf0>
		if(LPUARTtx.head != LPUARTtx.tail || LPUARTtx.full){
10046abe:	4b1b      	ldr	r3, [pc, #108]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046ac0:	8c1a      	ldrh	r2, [r3, #32]
10046ac2:	4b1a      	ldr	r3, [pc, #104]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046ac4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046ac6:	429a      	cmp	r2, r3
10046ac8:	d104      	bne.n	10046ad4 <LPUART1_IRQHandler+0xa8>
10046aca:	4b18      	ldr	r3, [pc, #96]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046acc:	2224      	movs	r2, #36	@ 0x24
10046ace:	5c9b      	ldrb	r3, [r3, r2]
10046ad0:	2b00      	cmp	r3, #0
10046ad2:	d01e      	beq.n	10046b12 <LPUART1_IRQHandler+0xe6>
			hlpuart1.Instance->TDR = LPUARTtx.data[LPUARTtx.tail];
10046ad4:	4b15      	ldr	r3, [pc, #84]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046ad6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046ad8:	001a      	movs	r2, r3
10046ada:	4b14      	ldr	r3, [pc, #80]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046adc:	5c9a      	ldrb	r2, [r3, r2]
10046ade:	4b11      	ldr	r3, [pc, #68]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046ae0:	681b      	ldr	r3, [r3, #0]
10046ae2:	629a      	str	r2, [r3, #40]	@ 0x28
			LPUARTtx.tail++;
10046ae4:	4b11      	ldr	r3, [pc, #68]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046ae6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046ae8:	3301      	adds	r3, #1
10046aea:	b29a      	uxth	r2, r3
10046aec:	4b0f      	ldr	r3, [pc, #60]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046aee:	845a      	strh	r2, [r3, #34]	@ 0x22
			LPUARTtx.tail %= LPUARTCIRCBUFFSIZE;
10046af0:	4b0e      	ldr	r3, [pc, #56]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046af2:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046af4:	221f      	movs	r2, #31
10046af6:	4013      	ands	r3, r2
10046af8:	b29a      	uxth	r2, r3
10046afa:	4b0c      	ldr	r3, [pc, #48]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046afc:	845a      	strh	r2, [r3, #34]	@ 0x22
			if(LPUARTtx.full){
10046afe:	4b0b      	ldr	r3, [pc, #44]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046b00:	2224      	movs	r2, #36	@ 0x24
10046b02:	5c9b      	ldrb	r3, [r3, r2]
10046b04:	2b00      	cmp	r3, #0
10046b06:	d009      	beq.n	10046b1c <LPUART1_IRQHandler+0xf0>
				LPUARTtx.full = false;
10046b08:	4b08      	ldr	r3, [pc, #32]	@ (10046b2c <LPUART1_IRQHandler+0x100>)
10046b0a:	2224      	movs	r2, #36	@ 0x24
10046b0c:	2100      	movs	r1, #0
10046b0e:	5499      	strb	r1, [r3, r2]
			if(LPUARTtx.full){
10046b10:	e004      	b.n	10046b1c <LPUART1_IRQHandler+0xf0>
			}

		} else {
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_TCF);
10046b12:	4b04      	ldr	r3, [pc, #16]	@ (10046b24 <LPUART1_IRQHandler+0xf8>)
10046b14:	681b      	ldr	r3, [r3, #0]
10046b16:	2240      	movs	r2, #64	@ 0x40
10046b18:	621a      	str	r2, [r3, #32]

	//HAL_UART_IRQHandler(&hlpuart1);
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
10046b1a:	e7ff      	b.n	10046b1c <LPUART1_IRQHandler+0xf0>
10046b1c:	46c0      	nop			@ (mov r8, r8)
10046b1e:	46bd      	mov	sp, r7
10046b20:	bd80      	pop	{r7, pc}
10046b22:	46c0      	nop			@ (mov r8, r8)
10046b24:	20002060 	.word	0x20002060
10046b28:	20002154 	.word	0x20002154
10046b2c:	2000212c 	.word	0x2000212c

10046b30 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
10046b30:	b580      	push	{r7, lr}
10046b32:	af00      	add	r7, sp, #0
			__HAL_USART_CLEAR_FLAG(&husart1, UART_CLEAR_TCF);
			I2CUARTtoI2C(1);//after transmission is complete default to I2C, no delay
		}
	}
#endif
	HAL_USART_IRQHandler(&husart1);
10046b34:	4b03      	ldr	r3, [pc, #12]	@ (10046b44 <USART1_IRQHandler+0x14>)
10046b36:	0018      	movs	r0, r3
10046b38:	f007 ff12 	bl	1004e960 <HAL_USART_IRQHandler>

}
10046b3c:	46c0      	nop			@ (mov r8, r8)
10046b3e:	46bd      	mov	sp, r7
10046b40:	bd80      	pop	{r7, pc}
10046b42:	46c0      	nop			@ (mov r8, r8)
10046b44:	2000267c 	.word	0x2000267c

10046b48 <UARTs_Init>:
 * @function: UARTs_Init()
 * @brief: initialize the lpuart module
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int UARTs_Init(void){
10046b48:	b580      	push	{r7, lr}
10046b4a:	af00      	add	r7, sp, #0

	if(initialized == 1){ return 0;}
10046b4c:	4b3b      	ldr	r3, [pc, #236]	@ (10046c3c <UARTs_Init+0xf4>)
10046b4e:	781b      	ldrb	r3, [r3, #0]
10046b50:	2b01      	cmp	r3, #1
10046b52:	d101      	bne.n	10046b58 <UARTs_Init+0x10>
10046b54:	2300      	movs	r3, #0
10046b56:	e06e      	b.n	10046c36 <UARTs_Init+0xee>
	TIMERS_Init();
10046b58:	f7ff fef8 	bl	1004694c <TIMERS_Init>
	initialized = 1;
10046b5c:	4b37      	ldr	r3, [pc, #220]	@ (10046c3c <UARTs_Init+0xf4>)
10046b5e:	2201      	movs	r2, #1
10046b60:	701a      	strb	r2, [r3, #0]
	hlpuart1.Instance = LPUART1;
10046b62:	4b37      	ldr	r3, [pc, #220]	@ (10046c40 <UARTs_Init+0xf8>)
10046b64:	4a37      	ldr	r2, [pc, #220]	@ (10046c44 <UARTs_Init+0xfc>)
10046b66:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
10046b68:	4b35      	ldr	r3, [pc, #212]	@ (10046c40 <UARTs_Init+0xf8>)
10046b6a:	2296      	movs	r2, #150	@ 0x96
10046b6c:	0192      	lsls	r2, r2, #6
10046b6e:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
10046b70:	4b33      	ldr	r3, [pc, #204]	@ (10046c40 <UARTs_Init+0xf8>)
10046b72:	2200      	movs	r2, #0
10046b74:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
10046b76:	4b32      	ldr	r3, [pc, #200]	@ (10046c40 <UARTs_Init+0xf8>)
10046b78:	2200      	movs	r2, #0
10046b7a:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
10046b7c:	4b30      	ldr	r3, [pc, #192]	@ (10046c40 <UARTs_Init+0xf8>)
10046b7e:	2200      	movs	r2, #0
10046b80:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
10046b82:	4b2f      	ldr	r3, [pc, #188]	@ (10046c40 <UARTs_Init+0xf8>)
10046b84:	220c      	movs	r2, #12
10046b86:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10046b88:	4b2d      	ldr	r3, [pc, #180]	@ (10046c40 <UARTs_Init+0xf8>)
10046b8a:	2200      	movs	r2, #0
10046b8c:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10046b8e:	4b2c      	ldr	r3, [pc, #176]	@ (10046c40 <UARTs_Init+0xf8>)
10046b90:	2200      	movs	r2, #0
10046b92:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10046b94:	4b2a      	ldr	r3, [pc, #168]	@ (10046c40 <UARTs_Init+0xf8>)
10046b96:	2200      	movs	r2, #0
10046b98:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10046b9a:	4b29      	ldr	r3, [pc, #164]	@ (10046c40 <UARTs_Init+0xf8>)
10046b9c:	2200      	movs	r2, #0
10046b9e:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
10046ba0:	4b27      	ldr	r3, [pc, #156]	@ (10046c40 <UARTs_Init+0xf8>)
10046ba2:	2200      	movs	r2, #0
10046ba4:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
10046ba6:	4b26      	ldr	r3, [pc, #152]	@ (10046c40 <UARTs_Init+0xf8>)
10046ba8:	0018      	movs	r0, r3
10046baa:	f007 f941 	bl	1004de30 <HAL_UART_Init>
10046bae:	1e03      	subs	r3, r0, #0
10046bb0:	d001      	beq.n	10046bb6 <UARTs_Init+0x6e>
	{
		Error_Handler();
10046bb2:	f7fb fadb 	bl	1004216c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10046bb6:	4b22      	ldr	r3, [pc, #136]	@ (10046c40 <UARTs_Init+0xf8>)
10046bb8:	2100      	movs	r1, #0
10046bba:	0018      	movs	r0, r3
10046bbc:	f007 fdf0 	bl	1004e7a0 <HAL_UARTEx_SetTxFifoThreshold>
10046bc0:	1e03      	subs	r3, r0, #0
10046bc2:	d001      	beq.n	10046bc8 <UARTs_Init+0x80>
	{
		Error_Handler();
10046bc4:	f7fb fad2 	bl	1004216c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10046bc8:	4b1d      	ldr	r3, [pc, #116]	@ (10046c40 <UARTs_Init+0xf8>)
10046bca:	2100      	movs	r1, #0
10046bcc:	0018      	movs	r0, r3
10046bce:	f007 fe27 	bl	1004e820 <HAL_UARTEx_SetRxFifoThreshold>
10046bd2:	1e03      	subs	r3, r0, #0
10046bd4:	d001      	beq.n	10046bda <UARTs_Init+0x92>
	{
		Error_Handler();
10046bd6:	f7fb fac9 	bl	1004216c <Error_Handler>
	}
	hlpuart1.Instance->CR2 |= 0x8000;//swap the RX and TX pins
10046bda:	4b19      	ldr	r3, [pc, #100]	@ (10046c40 <UARTs_Init+0xf8>)
10046bdc:	681b      	ldr	r3, [r3, #0]
10046bde:	685a      	ldr	r2, [r3, #4]
10046be0:	4b17      	ldr	r3, [pc, #92]	@ (10046c40 <UARTs_Init+0xf8>)
10046be2:	681b      	ldr	r3, [r3, #0]
10046be4:	2180      	movs	r1, #128	@ 0x80
10046be6:	0209      	lsls	r1, r1, #8
10046be8:	430a      	orrs	r2, r1
10046bea:	605a      	str	r2, [r3, #4]

	HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
10046bec:	2200      	movs	r2, #0
10046bee:	2100      	movs	r1, #0
10046bf0:	2009      	movs	r0, #9
10046bf2:	f001 f987 	bl	10047f04 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10046bf6:	2009      	movs	r0, #9
10046bf8:	f001 f999 	bl	10047f2e <HAL_NVIC_EnableIRQ>

	LPUARTtx.tail = 0;
10046bfc:	4b12      	ldr	r3, [pc, #72]	@ (10046c48 <UARTs_Init+0x100>)
10046bfe:	2200      	movs	r2, #0
10046c00:	845a      	strh	r2, [r3, #34]	@ 0x22
	LPUARTtx.head = 0;
10046c02:	4b11      	ldr	r3, [pc, #68]	@ (10046c48 <UARTs_Init+0x100>)
10046c04:	2200      	movs	r2, #0
10046c06:	841a      	strh	r2, [r3, #32]
	LPUARTtx.full = false;
10046c08:	4b0f      	ldr	r3, [pc, #60]	@ (10046c48 <UARTs_Init+0x100>)
10046c0a:	2224      	movs	r2, #36	@ 0x24
10046c0c:	2100      	movs	r1, #0
10046c0e:	5499      	strb	r1, [r3, r2]

	LPUARTrx.tail = 0;
10046c10:	4b0e      	ldr	r3, [pc, #56]	@ (10046c4c <UARTs_Init+0x104>)
10046c12:	2200      	movs	r2, #0
10046c14:	845a      	strh	r2, [r3, #34]	@ 0x22
	LPUARTrx.head = 0;
10046c16:	4b0d      	ldr	r3, [pc, #52]	@ (10046c4c <UARTs_Init+0x104>)
10046c18:	2200      	movs	r2, #0
10046c1a:	841a      	strh	r2, [r3, #32]
	LPUARTrx.full = false;
10046c1c:	4b0b      	ldr	r3, [pc, #44]	@ (10046c4c <UARTs_Init+0x104>)
10046c1e:	2224      	movs	r2, #36	@ 0x24
10046c20:	2100      	movs	r1, #0
10046c22:	5499      	strb	r1, [r3, r2]
	hlpuart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
10046c24:	4b06      	ldr	r3, [pc, #24]	@ (10046c40 <UARTs_Init+0xf8>)
10046c26:	681b      	ldr	r3, [r3, #0]
10046c28:	681a      	ldr	r2, [r3, #0]
10046c2a:	4b05      	ldr	r3, [pc, #20]	@ (10046c40 <UARTs_Init+0xf8>)
10046c2c:	681b      	ldr	r3, [r3, #0]
10046c2e:	2160      	movs	r1, #96	@ 0x60
10046c30:	430a      	orrs	r2, r1
10046c32:	601a      	str	r2, [r3, #0]
	USARTrx.head = 0;
	USARTrx.full = false;
#endif
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_TXE);
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_RXNE);
	return 0;//not INIT_OK to have compatibility with the BLE trace function calls
10046c34:	2300      	movs	r3, #0
}
10046c36:	0018      	movs	r0, r3
10046c38:	46bd      	mov	sp, r7
10046c3a:	bd80      	pop	{r7, pc}
10046c3c:	2000217a 	.word	0x2000217a
10046c40:	20002060 	.word	0x20002060
10046c44:	41005000 	.word	0x41005000
10046c48:	2000212c 	.word	0x2000212c
10046c4c:	20002154 	.word	0x20002154

10046c50 <LPUART_ReadRx>:
 * @function: UART_ReadRx()
 * @brief: reads one received byte from the lpuart
 * @param: none
 * @return: the character received, is 0x00 if no character to read
 */
char LPUART_ReadRx(void){
10046c50:	b580      	push	{r7, lr}
10046c52:	b082      	sub	sp, #8
10046c54:	af00      	add	r7, sp, #0
	if(LPUARTrx.head != LPUARTrx.tail || LPUARTrx.full){
10046c56:	4b13      	ldr	r3, [pc, #76]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c58:	8c1a      	ldrh	r2, [r3, #32]
10046c5a:	4b12      	ldr	r3, [pc, #72]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c5c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046c5e:	429a      	cmp	r2, r3
10046c60:	d104      	bne.n	10046c6c <LPUART_ReadRx+0x1c>
10046c62:	4b10      	ldr	r3, [pc, #64]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c64:	2224      	movs	r2, #36	@ 0x24
10046c66:	5c9b      	ldrb	r3, [r3, r2]
10046c68:	2b00      	cmp	r3, #0
10046c6a:	d016      	beq.n	10046c9a <LPUART_ReadRx+0x4a>
		char data = LPUARTrx.data[LPUARTrx.tail];
10046c6c:	4b0d      	ldr	r3, [pc, #52]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046c70:	0019      	movs	r1, r3
10046c72:	1dfb      	adds	r3, r7, #7
10046c74:	4a0b      	ldr	r2, [pc, #44]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c76:	5c52      	ldrb	r2, [r2, r1]
10046c78:	701a      	strb	r2, [r3, #0]
		LPUARTrx.tail++;
10046c7a:	4b0a      	ldr	r3, [pc, #40]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c7c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046c7e:	3301      	adds	r3, #1
10046c80:	b29a      	uxth	r2, r3
10046c82:	4b08      	ldr	r3, [pc, #32]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c84:	845a      	strh	r2, [r3, #34]	@ 0x22
		LPUARTrx.tail %= LPUARTCIRCBUFFSIZE;
10046c86:	4b07      	ldr	r3, [pc, #28]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c88:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046c8a:	221f      	movs	r2, #31
10046c8c:	4013      	ands	r3, r2
10046c8e:	b29a      	uxth	r2, r3
10046c90:	4b04      	ldr	r3, [pc, #16]	@ (10046ca4 <LPUART_ReadRx+0x54>)
10046c92:	845a      	strh	r2, [r3, #34]	@ 0x22
		return data;
10046c94:	1dfb      	adds	r3, r7, #7
10046c96:	781b      	ldrb	r3, [r3, #0]
10046c98:	e000      	b.n	10046c9c <LPUART_ReadRx+0x4c>
	} else {
		return UARTFAILED;
10046c9a:	2325      	movs	r3, #37	@ 0x25
	}

}
10046c9c:	0018      	movs	r0, r3
10046c9e:	46bd      	mov	sp, r7
10046ca0:	b002      	add	sp, #8
10046ca2:	bd80      	pop	{r7, pc}
10046ca4:	20002154 	.word	0x20002154

10046ca8 <LPUART_WriteTx>:
 * @function: UART_WriteTx()
 * @brief: sends one byte through the lpuart
 * @param: none
 * @return: none
 */
char LPUART_WriteTx(char input){
10046ca8:	b580      	push	{r7, lr}
10046caa:	b082      	sub	sp, #8
10046cac:	af00      	add	r7, sp, #0
10046cae:	0002      	movs	r2, r0
10046cb0:	1dfb      	adds	r3, r7, #7
10046cb2:	701a      	strb	r2, [r3, #0]
	if(!LPUARTtx.full){
10046cb4:	4b1f      	ldr	r3, [pc, #124]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046cb6:	2224      	movs	r2, #36	@ 0x24
10046cb8:	5c9b      	ldrb	r3, [r3, r2]
10046cba:	2201      	movs	r2, #1
10046cbc:	4053      	eors	r3, r2
10046cbe:	b2db      	uxtb	r3, r3
10046cc0:	2b00      	cmp	r3, #0
10046cc2:	d031      	beq.n	10046d28 <LPUART_WriteTx+0x80>
		if(LPUARTtx.head == LPUARTtx.tail && (hlpuart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
10046cc4:	4b1b      	ldr	r3, [pc, #108]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046cc6:	8c1a      	ldrh	r2, [r3, #32]
10046cc8:	4b1a      	ldr	r3, [pc, #104]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046cca:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046ccc:	429a      	cmp	r2, r3
10046cce:	d10b      	bne.n	10046ce8 <LPUART_WriteTx+0x40>
10046cd0:	4b19      	ldr	r3, [pc, #100]	@ (10046d38 <LPUART_WriteTx+0x90>)
10046cd2:	681b      	ldr	r3, [r3, #0]
10046cd4:	69db      	ldr	r3, [r3, #28]
10046cd6:	2280      	movs	r2, #128	@ 0x80
10046cd8:	4013      	ands	r3, r2
10046cda:	d005      	beq.n	10046ce8 <LPUART_WriteTx+0x40>
			hlpuart1.Instance->TDR = input;
10046cdc:	4b16      	ldr	r3, [pc, #88]	@ (10046d38 <LPUART_WriteTx+0x90>)
10046cde:	681b      	ldr	r3, [r3, #0]
10046ce0:	1dfa      	adds	r2, r7, #7
10046ce2:	7812      	ldrb	r2, [r2, #0]
10046ce4:	629a      	str	r2, [r3, #40]	@ 0x28
10046ce6:	e01d      	b.n	10046d24 <LPUART_WriteTx+0x7c>
		} else {
			LPUARTtx.data[LPUARTtx.head] = input;
10046ce8:	4b12      	ldr	r3, [pc, #72]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046cea:	8c1b      	ldrh	r3, [r3, #32]
10046cec:	0019      	movs	r1, r3
10046cee:	4b11      	ldr	r3, [pc, #68]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046cf0:	1dfa      	adds	r2, r7, #7
10046cf2:	7812      	ldrb	r2, [r2, #0]
10046cf4:	545a      	strb	r2, [r3, r1]
			LPUARTtx.head++;
10046cf6:	4b0f      	ldr	r3, [pc, #60]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046cf8:	8c1b      	ldrh	r3, [r3, #32]
10046cfa:	3301      	adds	r3, #1
10046cfc:	b29a      	uxth	r2, r3
10046cfe:	4b0d      	ldr	r3, [pc, #52]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046d00:	841a      	strh	r2, [r3, #32]
			LPUARTtx.head %= LPUARTCIRCBUFFSIZE;
10046d02:	4b0c      	ldr	r3, [pc, #48]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046d04:	8c1b      	ldrh	r3, [r3, #32]
10046d06:	221f      	movs	r2, #31
10046d08:	4013      	ands	r3, r2
10046d0a:	b29a      	uxth	r2, r3
10046d0c:	4b09      	ldr	r3, [pc, #36]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046d0e:	841a      	strh	r2, [r3, #32]
			if(LPUARTtx.head == LPUARTtx.tail){
10046d10:	4b08      	ldr	r3, [pc, #32]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046d12:	8c1a      	ldrh	r2, [r3, #32]
10046d14:	4b07      	ldr	r3, [pc, #28]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046d16:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10046d18:	429a      	cmp	r2, r3
10046d1a:	d103      	bne.n	10046d24 <LPUART_WriteTx+0x7c>
				LPUARTtx.full = true;
10046d1c:	4b05      	ldr	r3, [pc, #20]	@ (10046d34 <LPUART_WriteTx+0x8c>)
10046d1e:	2224      	movs	r2, #36	@ 0x24
10046d20:	2101      	movs	r1, #1
10046d22:	5499      	strb	r1, [r3, r2]
			}
		}
		return UARTSUCCESS;
10046d24:	2300      	movs	r3, #0
10046d26:	e000      	b.n	10046d2a <LPUART_WriteTx+0x82>
	} else {
		return UARTFAILED;
10046d28:	2325      	movs	r3, #37	@ 0x25
	}
}
10046d2a:	0018      	movs	r0, r3
10046d2c:	46bd      	mov	sp, r7
10046d2e:	b002      	add	sp, #8
10046d30:	bd80      	pop	{r7, pc}
10046d32:	46c0      	nop			@ (mov r8, r8)
10046d34:	2000212c 	.word	0x2000212c
10046d38:	20002060 	.word	0x20002060

10046d3c <USART_ReadRx>:
 * @function: USART_ReadRx()
 * @brief: reads one received byte from the usart
 * @param: none
 * @return: the character received, 0x25 (NAK) if no character to read
 */
char USART_ReadRx(void){
10046d3c:	b580      	push	{r7, lr}
10046d3e:	af00      	add	r7, sp, #0
		return data;
	} else {
		return UARTFAILED;
	}
#else
	return UARTFAILED;
10046d40:	2325      	movs	r3, #37	@ 0x25
#endif
}
10046d42:	0018      	movs	r0, r3
10046d44:	46bd      	mov	sp, r7
10046d46:	bd80      	pop	{r7, pc}

10046d48 <USART_WriteTx>:
 * @function: USART_WriteTx()
 * @brief: sends one byte through the usart
 * @param: input, character to be sent
 * @return: status, 0x00 if success,  0x25 (NAK) if failed,
 */
char USART_WriteTx(char input){
10046d48:	b580      	push	{r7, lr}
10046d4a:	b082      	sub	sp, #8
10046d4c:	af00      	add	r7, sp, #0
10046d4e:	0002      	movs	r2, r0
10046d50:	1dfb      	adds	r3, r7, #7
10046d52:	701a      	strb	r2, [r3, #0]
	if (APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
10046d54:	f00b fa5e 	bl	10052214 <APP_BLE_Get_Server_Connection_Status>
10046d58:	0003      	movs	r3, r0
10046d5a:	2b02      	cmp	r3, #2
10046d5c:	d104      	bne.n	10046d68 <USART_WriteTx+0x20>
		BLUETOOTH_WriteBuffer(input);
10046d5e:	1dfb      	adds	r3, r7, #7
10046d60:	781b      	ldrb	r3, [r3, #0]
10046d62:	0018      	movs	r0, r3
10046d64:	f7fb f8c0 	bl	10041ee8 <BLUETOOTH_WriteBuffer>
		return UARTSUCCESS;
	} else {
		return UARTFAILED;
	}
#else
	return UARTFAILED;
10046d68:	2325      	movs	r3, #37	@ 0x25
#endif
}
10046d6a:	0018      	movs	r0, r3
10046d6c:	46bd      	mov	sp, r7
10046d6e:	b002      	add	sp, #8
10046d70:	bd80      	pop	{r7, pc}

10046d72 <USART_TxEmpty>:
 * @function: USART_TxEmpty()
 * @brief: returns if the Tx  buffer is empty
 * @param: none
 * @return: status, 0x00 if not empty,  0x01 if empty,
 */
uint8_t USART_TxEmpty(void){
10046d72:	b580      	push	{r7, lr}
10046d74:	af00      	add	r7, sp, #0
#if USEUSART == 1
	return (USARTtx.head == USARTtx.tail) && !USARTtx.full;
#else
	return 00;
10046d76:	2300      	movs	r3, #0
#endif
}
10046d78:	0018      	movs	r0, r3
10046d7a:	46bd      	mov	sp, r7
10046d7c:	bd80      	pop	{r7, pc}

10046d7e <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
10046d7e:	b580      	push	{r7, lr}
10046d80:	b082      	sub	sp, #8
10046d82:	af00      	add	r7, sp, #0
10046d84:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
10046d86:	2000      	movs	r0, #0
10046d88:	f00d fc52 	bl	10054630 <APP_DEBUG_SIGNAL_SET>

  /* USER CODE BEGIN APPE_Init_1 */

  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
10046d8c:	f008 fe68 	bl	1004fa60 <HW_RNG_Init>
10046d90:	1e03      	subs	r3, r0, #0
10046d92:	d001      	beq.n	10046d98 <MX_APPE_Init+0x1a>
  {
    Error_Handler();
10046d94:	f7fb f9ea 	bl	1004216c <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
10046d98:	f008 fd06 	bl	1004f7a8 <HW_AES_Init>
  HW_PKA_Init();
10046d9c:	f008 fdf8 	bl	1004f990 <HW_PKA_Init>
  APP_BLE_Init();
10046da0:	f00b f872 	bl	10051e88 <APP_BLE_Init>
  UTIL_LPM_Init();
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10046da4:	2000      	movs	r0, #0
10046da6:	f00d fc4d 	bl	10054644 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
10046daa:	2300      	movs	r3, #0
}
10046dac:	0018      	movs	r0, r3
10046dae:	46bd      	mov	sp, r7
10046db0:	b002      	add	sp, #8
10046db2:	bd80      	pop	{r7, pc}

10046db4 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10046db4:	b580      	push	{r7, lr}
10046db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10046db8:	2301      	movs	r3, #1
10046dba:	425b      	negs	r3, r3
10046dbc:	0018      	movs	r0, r3
10046dbe:	f00d fc51 	bl	10054664 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10046dc2:	46c0      	nop			@ (mov r8, r8)
10046dc4:	46bd      	mov	sp, r7
10046dc6:	bd80      	pop	{r7, pc}

10046dc8 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10046dc8:	b580      	push	{r7, lr}
10046dca:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10046dcc:	46c0      	nop			@ (mov r8, r8)
}
10046dce:	46bd      	mov	sp, r7
10046dd0:	bd80      	pop	{r7, pc}

10046dd2 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10046dd2:	b580      	push	{r7, lr}
10046dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10046dd6:	46c0      	nop			@ (mov r8, r8)
10046dd8:	46bd      	mov	sp, r7
10046dda:	bd80      	pop	{r7, pc}

10046ddc <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10046ddc:	b580      	push	{r7, lr}
10046dde:	b082      	sub	sp, #8
10046de0:	af00      	add	r7, sp, #0
10046de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10046de4:	687b      	ldr	r3, [r7, #4]
10046de6:	691b      	ldr	r3, [r3, #16]
}
10046de8:	0018      	movs	r0, r3
10046dea:	46bd      	mov	sp, r7
10046dec:	b002      	add	sp, #8
10046dee:	bd80      	pop	{r7, pc}

10046df0 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10046df0:	b580      	push	{r7, lr}
10046df2:	b084      	sub	sp, #16
10046df4:	af00      	add	r7, sp, #0
10046df6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10046df8:	4b07      	ldr	r3, [pc, #28]	@ (10046e18 <LL_APB2_GRP1_EnableClock+0x28>)
10046dfa:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10046dfc:	4b06      	ldr	r3, [pc, #24]	@ (10046e18 <LL_APB2_GRP1_EnableClock+0x28>)
10046dfe:	687a      	ldr	r2, [r7, #4]
10046e00:	430a      	orrs	r2, r1
10046e02:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10046e04:	4b04      	ldr	r3, [pc, #16]	@ (10046e18 <LL_APB2_GRP1_EnableClock+0x28>)
10046e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10046e08:	687a      	ldr	r2, [r7, #4]
10046e0a:	4013      	ands	r3, r2
10046e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046e0e:	68fb      	ldr	r3, [r7, #12]
}
10046e10:	46c0      	nop			@ (mov r8, r8)
10046e12:	46bd      	mov	sp, r7
10046e14:	b004      	add	sp, #16
10046e16:	bd80      	pop	{r7, pc}
10046e18:	48400000 	.word	0x48400000

10046e1c <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10046e1c:	b580      	push	{r7, lr}
10046e1e:	b082      	sub	sp, #8
10046e20:	af00      	add	r7, sp, #0
10046e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10046e24:	4b06      	ldr	r3, [pc, #24]	@ (10046e40 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10046e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10046e28:	687a      	ldr	r2, [r7, #4]
10046e2a:	4013      	ands	r3, r2
10046e2c:	687a      	ldr	r2, [r7, #4]
10046e2e:	429a      	cmp	r2, r3
10046e30:	d101      	bne.n	10046e36 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10046e32:	2301      	movs	r3, #1
10046e34:	e000      	b.n	10046e38 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10046e36:	2300      	movs	r3, #0
}
10046e38:	0018      	movs	r0, r3
10046e3a:	46bd      	mov	sp, r7
10046e3c:	b002      	add	sp, #8
10046e3e:	bd80      	pop	{r7, pc}
10046e40:	48400000 	.word	0x48400000

10046e44 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10046e44:	b580      	push	{r7, lr}
10046e46:	b082      	sub	sp, #8
10046e48:	af00      	add	r7, sp, #0
10046e4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10046e4c:	4b04      	ldr	r3, [pc, #16]	@ (10046e60 <LL_APB2_GRP1_ForceReset+0x1c>)
10046e4e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10046e50:	4b03      	ldr	r3, [pc, #12]	@ (10046e60 <LL_APB2_GRP1_ForceReset+0x1c>)
10046e52:	687a      	ldr	r2, [r7, #4]
10046e54:	430a      	orrs	r2, r1
10046e56:	641a      	str	r2, [r3, #64]	@ 0x40
}
10046e58:	46c0      	nop			@ (mov r8, r8)
10046e5a:	46bd      	mov	sp, r7
10046e5c:	b002      	add	sp, #8
10046e5e:	bd80      	pop	{r7, pc}
10046e60:	48400000 	.word	0x48400000

10046e64 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10046e64:	b580      	push	{r7, lr}
10046e66:	b082      	sub	sp, #8
10046e68:	af00      	add	r7, sp, #0
10046e6a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10046e6c:	4b05      	ldr	r3, [pc, #20]	@ (10046e84 <LL_APB2_GRP1_ReleaseReset+0x20>)
10046e6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10046e70:	687b      	ldr	r3, [r7, #4]
10046e72:	43d9      	mvns	r1, r3
10046e74:	4b03      	ldr	r3, [pc, #12]	@ (10046e84 <LL_APB2_GRP1_ReleaseReset+0x20>)
10046e76:	400a      	ands	r2, r1
10046e78:	641a      	str	r2, [r3, #64]	@ 0x40
}
10046e7a:	46c0      	nop			@ (mov r8, r8)
10046e7c:	46bd      	mov	sp, r7
10046e7e:	b002      	add	sp, #8
10046e80:	bd80      	pop	{r7, pc}
10046e82:	46c0      	nop			@ (mov r8, r8)
10046e84:	48400000 	.word	0x48400000

10046e88 <main>:
 * @author Caitlin Bonesio
 *
 */
#include "FLASH.h"
int main(void)
{
10046e88:	b580      	push	{r7, lr}
10046e8a:	b086      	sub	sp, #24
10046e8c:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------
	if( BOARD_Init() != INIT_OK){
10046e8e:	f7fb f943 	bl	10042118 <BOARD_Init>
10046e92:	0003      	movs	r3, r0
10046e94:	2b01      	cmp	r3, #1
10046e96:	d001      	beq.n	10046e9c <main+0x14>
		BOARD_CrashHandler();
10046e98:	f7fb f962 	bl	10042160 <BOARD_CrashHandler>
	}
    BSP_LED_Init(LED_BLUE);
10046e9c:	2000      	movs	r0, #0
10046e9e:	f000 fe17 	bl	10047ad0 <BSP_LED_Init>
    BSP_LED_Init(LED_RED);
10046ea2:	2002      	movs	r0, #2
10046ea4:	f000 fe14 	bl	10047ad0 <BSP_LED_Init>

	MX_RADIO_Init();
10046ea8:	f000 f89a 	bl	10046fe0 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
10046eac:	f000 f8b6 	bl	1004701c <MX_RADIO_TIMER_Init>
	MX_RNG_Init();
10046eb0:	f000 f8ea 	bl	10047088 <MX_RNG_Init>
	MX_PKA_Init();
10046eb4:	f000 f880 	bl	10046fb8 <MX_PKA_Init>
	//Initialize BLE middleware
	MX_APPE_Init(NULL);
10046eb8:	2000      	movs	r0, #0
10046eba:	f7ff ff60 	bl	10046d7e <MX_APPE_Init>


	BLUETOOTH_BufferInit();
10046ebe:	f7fa fffb 	bl	10041eb8 <BLUETOOTH_BufferInit>
	// Initialize all configured peripherals
	UARTs_Init();
10046ec2:	f7ff fe41 	bl	10046b48 <UARTs_Init>
	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
10046ec6:	2300      	movs	r3, #0
10046ec8:	617b      	str	r3, [r7, #20]
10046eca:	e013      	b.n	10046ef4 <main+0x6c>
		EventQueues[i] = FIFO_Create();
10046ecc:	f7fd fb80 	bl	100445d0 <FIFO_Create>
10046ed0:	0001      	movs	r1, r0
10046ed2:	4b35      	ldr	r3, [pc, #212]	@ (10046fa8 <main+0x120>)
10046ed4:	697a      	ldr	r2, [r7, #20]
10046ed6:	0092      	lsls	r2, r2, #2
10046ed8:	50d1      	str	r1, [r2, r3]
		if ((*InitList[i])(EventQueues[i]) == EVENT_ERROR){
10046eda:	4b34      	ldr	r3, [pc, #208]	@ (10046fac <main+0x124>)
10046edc:	697a      	ldr	r2, [r7, #20]
10046ede:	0092      	lsls	r2, r2, #2
10046ee0:	58d3      	ldr	r3, [r2, r3]
10046ee2:	4a31      	ldr	r2, [pc, #196]	@ (10046fa8 <main+0x120>)
10046ee4:	6979      	ldr	r1, [r7, #20]
10046ee6:	0089      	lsls	r1, r1, #2
10046ee8:	588a      	ldr	r2, [r1, r2]
10046eea:	0010      	movs	r0, r2
10046eec:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
10046eee:	697b      	ldr	r3, [r7, #20]
10046ef0:	3301      	adds	r3, #1
10046ef2:	617b      	str	r3, [r7, #20]
10046ef4:	697b      	ldr	r3, [r7, #20]
10046ef6:	2b03      	cmp	r3, #3
10046ef8:	dde8      	ble.n	10046ecc <main+0x44>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
10046efa:	2300      	movs	r3, #0
10046efc:	613b      	str	r3, [r7, #16]
10046efe:	e012      	b.n	10046f26 <main+0x9e>
			//collect updates from the updaters
			if (((*UpdateList[i])()).status == EVENT_ERROR){
10046f00:	4b2b      	ldr	r3, [pc, #172]	@ (10046fb0 <main+0x128>)
10046f02:	693a      	ldr	r2, [r7, #16]
10046f04:	0092      	lsls	r2, r2, #2
10046f06:	58d3      	ldr	r3, [r2, r3]
10046f08:	4798      	blx	r3
10046f0a:	0003      	movs	r3, r0
10046f0c:	001a      	movs	r2, r3
10046f0e:	1d3b      	adds	r3, r7, #4
10046f10:	601a      	str	r2, [r3, #0]
10046f12:	1d3b      	adds	r3, r7, #4
10046f14:	781b      	ldrb	r3, [r3, #0]
10046f16:	b25b      	sxtb	r3, r3
10046f18:	3301      	adds	r3, #1
10046f1a:	d101      	bne.n	10046f20 <main+0x98>
				BOARD_CrashHandler();//We've crashed
10046f1c:	f7fb f920 	bl	10042160 <BOARD_CrashHandler>
		for(int i = 0; i < EVENTLISTSIZE; i++){
10046f20:	693b      	ldr	r3, [r7, #16]
10046f22:	3301      	adds	r3, #1
10046f24:	613b      	str	r3, [r7, #16]
10046f26:	693b      	ldr	r3, [r7, #16]
10046f28:	2b03      	cmp	r3, #3
10046f2a:	dde9      	ble.n	10046f00 <main+0x78>
			}
		}
		uint8_t done = 0;
10046f2c:	230f      	movs	r3, #15
10046f2e:	18fb      	adds	r3, r7, r3
10046f30:	2200      	movs	r2, #0
10046f32:	701a      	strb	r2, [r3, #0]
		while(!done){
10046f34:	e030      	b.n	10046f98 <main+0x110>
			//run all module event handlers
			done = 1;//assume we're done
10046f36:	230f      	movs	r3, #15
10046f38:	18fb      	adds	r3, r7, r3
10046f3a:	2201      	movs	r2, #1
10046f3c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < EVENTLISTSIZE; i++){
10046f3e:	2300      	movs	r3, #0
10046f40:	60bb      	str	r3, [r7, #8]
10046f42:	e026      	b.n	10046f92 <main+0x10a>
				Event_t event = FIFO_Dequeue(EventQueues[i]);
10046f44:	4b18      	ldr	r3, [pc, #96]	@ (10046fa8 <main+0x120>)
10046f46:	68ba      	ldr	r2, [r7, #8]
10046f48:	0092      	lsls	r2, r2, #2
10046f4a:	58d3      	ldr	r3, [r2, r3]
10046f4c:	0018      	movs	r0, r3
10046f4e:	f7fd fbb2 	bl	100446b6 <FIFO_Dequeue>
10046f52:	0003      	movs	r3, r0
10046f54:	001a      	movs	r2, r3
10046f56:	003b      	movs	r3, r7
10046f58:	601a      	str	r2, [r3, #0]
				if(FIFO_GetSize(EventQueues[i]) != 0){
10046f5a:	4b13      	ldr	r3, [pc, #76]	@ (10046fa8 <main+0x120>)
10046f5c:	68ba      	ldr	r2, [r7, #8]
10046f5e:	0092      	lsls	r2, r2, #2
10046f60:	58d3      	ldr	r3, [r2, r3]
10046f62:	0018      	movs	r0, r3
10046f64:	f7fd fbf9 	bl	1004475a <FIFO_GetSize>
10046f68:	1e03      	subs	r3, r0, #0
10046f6a:	d003      	beq.n	10046f74 <main+0xec>
					done = 0;//if any queue is not empty, we are not done
10046f6c:	230f      	movs	r3, #15
10046f6e:	18fb      	adds	r3, r7, r3
10046f70:	2200      	movs	r2, #0
10046f72:	701a      	strb	r2, [r3, #0]
				}
				if(event.status != EVENT_NONE){//If there is an update
10046f74:	003b      	movs	r3, r7
10046f76:	781b      	ldrb	r3, [r3, #0]
10046f78:	b25b      	sxtb	r3, r3
10046f7a:	2b00      	cmp	r3, #0
10046f7c:	d006      	beq.n	10046f8c <main+0x104>
					if ((*HandlerList[i])(event) == EVENT_ERROR){//pass the updates to the handlers
10046f7e:	4b0d      	ldr	r3, [pc, #52]	@ (10046fb4 <main+0x12c>)
10046f80:	68ba      	ldr	r2, [r7, #8]
10046f82:	0092      	lsls	r2, r2, #2
10046f84:	58d2      	ldr	r2, [r2, r3]
10046f86:	003b      	movs	r3, r7
10046f88:	6818      	ldr	r0, [r3, #0]
10046f8a:	4790      	blx	r2
			for(int i = 0; i < EVENTLISTSIZE; i++){
10046f8c:	68bb      	ldr	r3, [r7, #8]
10046f8e:	3301      	adds	r3, #1
10046f90:	60bb      	str	r3, [r7, #8]
10046f92:	68bb      	ldr	r3, [r7, #8]
10046f94:	2b03      	cmp	r3, #3
10046f96:	ddd5      	ble.n	10046f44 <main+0xbc>
		while(!done){
10046f98:	230f      	movs	r3, #15
10046f9a:	18fb      	adds	r3, r7, r3
10046f9c:	781b      	ldrb	r3, [r3, #0]
10046f9e:	2b00      	cmp	r3, #0
10046fa0:	d0c9      	beq.n	10046f36 <main+0xae>
					}
				}
			}
		}
		//Run Bluetooth Middleware
	    MX_APPE_Process();
10046fa2:	f7ff ff07 	bl	10046db4 <MX_APPE_Process>
	while(1){
10046fa6:	e7a8      	b.n	10046efa <main+0x72>
10046fa8:	2000217c 	.word	0x2000217c
10046fac:	200026dc 	.word	0x200026dc
10046fb0:	200026ec 	.word	0x200026ec
10046fb4:	200026fc 	.word	0x200026fc

10046fb8 <MX_PKA_Init>:




static void MX_PKA_Init(void)
{
10046fb8:	b580      	push	{r7, lr}
10046fba:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10046fbc:	4b06      	ldr	r3, [pc, #24]	@ (10046fd8 <MX_PKA_Init+0x20>)
10046fbe:	4a07      	ldr	r2, [pc, #28]	@ (10046fdc <MX_PKA_Init+0x24>)
10046fc0:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10046fc2:	4b05      	ldr	r3, [pc, #20]	@ (10046fd8 <MX_PKA_Init+0x20>)
10046fc4:	0018      	movs	r0, r3
10046fc6:	f003 fbf1 	bl	1004a7ac <HAL_PKA_Init>
10046fca:	1e03      	subs	r3, r0, #0
10046fcc:	d001      	beq.n	10046fd2 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10046fce:	f7fb f8cd 	bl	1004216c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
10046fd2:	46c0      	nop			@ (mov r8, r8)
10046fd4:	46bd      	mov	sp, r7
10046fd6:	bd80      	pop	{r7, pc}
10046fd8:	2000218c 	.word	0x2000218c
10046fdc:	48300000 	.word	0x48300000

10046fe0 <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10046fe0:	b580      	push	{r7, lr}
10046fe2:	b082      	sub	sp, #8
10046fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */
//
  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
10046fe6:	2300      	movs	r3, #0
10046fe8:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */
//
  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10046fea:	2001      	movs	r0, #1
10046fec:	f7ff ff16 	bl	10046e1c <LL_APB2_GRP1_IsEnabledClock>
10046ff0:	1e03      	subs	r3, r0, #0
10046ff2:	d108      	bne.n	10047006 <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10046ff4:	2001      	movs	r0, #1
10046ff6:	f7ff ff25 	bl	10046e44 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10046ffa:	2001      	movs	r0, #1
10046ffc:	f7ff ff32 	bl	10046e64 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10047000:	2001      	movs	r0, #1
10047002:	f7ff fef5 	bl	10046df0 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
10047006:	23c0      	movs	r3, #192	@ 0xc0
10047008:	05db      	lsls	r3, r3, #23
1004700a:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
1004700c:	1d3b      	adds	r3, r7, #4
1004700e:	0018      	movs	r0, r3
10047010:	f003 fe2a 	bl	1004ac68 <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */
//
  /* USER CODE END RADIO_Init 2 */

}
10047014:	46c0      	nop			@ (mov r8, r8)
10047016:	46bd      	mov	sp, r7
10047018:	b002      	add	sp, #8
1004701a:	bd80      	pop	{r7, pc}

1004701c <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
1004701c:	b580      	push	{r7, lr}
1004701e:	b082      	sub	sp, #8
10047020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
//
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
10047022:	003b      	movs	r3, r7
10047024:	0018      	movs	r0, r3
10047026:	2308      	movs	r3, #8
10047028:	001a      	movs	r2, r3
1004702a:	2100      	movs	r1, #0
1004702c:	f020 ff10 	bl	10067e50 <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
//
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10047030:	2001      	movs	r0, #1
10047032:	f7ff fef3 	bl	10046e1c <LL_APB2_GRP1_IsEnabledClock>
10047036:	1e03      	subs	r3, r0, #0
10047038:	d108      	bne.n	1004704c <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
1004703a:	2001      	movs	r0, #1
1004703c:	f7ff ff02 	bl	10046e44 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
10047040:	2001      	movs	r0, #1
10047042:	f7ff ff0f 	bl	10046e64 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
10047046:	2001      	movs	r0, #1
10047048:	f7ff fed2 	bl	10046df0 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
1004704c:	46c0      	nop			@ (mov r8, r8)
1004704e:	4b0c      	ldr	r3, [pc, #48]	@ (10047080 <MX_RADIO_TIMER_Init+0x64>)
10047050:	0018      	movs	r0, r3
10047052:	f7ff fec3 	bl	10046ddc <LL_RADIO_TIMER_GetAbsoluteTime>
10047056:	0003      	movs	r3, r0
10047058:	2b0f      	cmp	r3, #15
1004705a:	d9f8      	bls.n	1004704e <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
1004705c:	003b      	movs	r3, r7
1004705e:	22a0      	movs	r2, #160	@ 0xa0
10047060:	0052      	lsls	r2, r2, #1
10047062:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = TRUE;
10047064:	003b      	movs	r3, r7
10047066:	2201      	movs	r2, #1
10047068:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 10000;
1004706a:	003b      	movs	r3, r7
1004706c:	4a05      	ldr	r2, [pc, #20]	@ (10047084 <MX_RADIO_TIMER_Init+0x68>)
1004706e:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10047070:	003b      	movs	r3, r7
10047072:	0018      	movs	r0, r3
10047074:	f004 fb1e 	bl	1004b6b4 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */
//
  /* USER CODE END RADIO_TIMER_Init 2 */

}
10047078:	46c0      	nop			@ (mov r8, r8)
1004707a:	46bd      	mov	sp, r7
1004707c:	b002      	add	sp, #8
1004707e:	bd80      	pop	{r7, pc}
10047080:	60001800 	.word	0x60001800
10047084:	00002710 	.word	0x00002710

10047088 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
10047088:	b580      	push	{r7, lr}
1004708a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
1004708c:	4b06      	ldr	r3, [pc, #24]	@ (100470a8 <MX_RNG_Init+0x20>)
1004708e:	4a07      	ldr	r2, [pc, #28]	@ (100470ac <MX_RNG_Init+0x24>)
10047090:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
10047092:	4b05      	ldr	r3, [pc, #20]	@ (100470a8 <MX_RNG_Init+0x20>)
10047094:	0018      	movs	r0, r3
10047096:	f006 fb2d 	bl	1004d6f4 <HAL_RNG_Init>
1004709a:	1e03      	subs	r3, r0, #0
1004709c:	d001      	beq.n	100470a2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
1004709e:	f7fb f865 	bl	1004216c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
100470a2:	46c0      	nop			@ (mov r8, r8)
100470a4:	46bd      	mov	sp, r7
100470a6:	bd80      	pop	{r7, pc}
100470a8:	20002198 	.word	0x20002198
100470ac:	48600000 	.word	0x48600000

100470b0 <LL_AHB1_GRP1_EnableClock>:
{
100470b0:	b580      	push	{r7, lr}
100470b2:	b084      	sub	sp, #16
100470b4:	af00      	add	r7, sp, #0
100470b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
100470b8:	4b07      	ldr	r3, [pc, #28]	@ (100470d8 <LL_AHB1_GRP1_EnableClock+0x28>)
100470ba:	6d19      	ldr	r1, [r3, #80]	@ 0x50
100470bc:	4b06      	ldr	r3, [pc, #24]	@ (100470d8 <LL_AHB1_GRP1_EnableClock+0x28>)
100470be:	687a      	ldr	r2, [r7, #4]
100470c0:	430a      	orrs	r2, r1
100470c2:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
100470c4:	4b04      	ldr	r3, [pc, #16]	@ (100470d8 <LL_AHB1_GRP1_EnableClock+0x28>)
100470c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100470c8:	687a      	ldr	r2, [r7, #4]
100470ca:	4013      	ands	r3, r2
100470cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100470ce:	68fb      	ldr	r3, [r7, #12]
}
100470d0:	46c0      	nop			@ (mov r8, r8)
100470d2:	46bd      	mov	sp, r7
100470d4:	b004      	add	sp, #16
100470d6:	bd80      	pop	{r7, pc}
100470d8:	48400000 	.word	0x48400000

100470dc <LL_APB0_GRP1_EnableClock>:
{
100470dc:	b580      	push	{r7, lr}
100470de:	b084      	sub	sp, #16
100470e0:	af00      	add	r7, sp, #0
100470e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
100470e4:	4b07      	ldr	r3, [pc, #28]	@ (10047104 <LL_APB0_GRP1_EnableClock+0x28>)
100470e6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
100470e8:	4b06      	ldr	r3, [pc, #24]	@ (10047104 <LL_APB0_GRP1_EnableClock+0x28>)
100470ea:	687a      	ldr	r2, [r7, #4]
100470ec:	430a      	orrs	r2, r1
100470ee:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100470f0:	4b04      	ldr	r3, [pc, #16]	@ (10047104 <LL_APB0_GRP1_EnableClock+0x28>)
100470f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100470f4:	687a      	ldr	r2, [r7, #4]
100470f6:	4013      	ands	r3, r2
100470f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100470fa:	68fb      	ldr	r3, [r7, #12]
}
100470fc:	46c0      	nop			@ (mov r8, r8)
100470fe:	46bd      	mov	sp, r7
10047100:	b004      	add	sp, #16
10047102:	bd80      	pop	{r7, pc}
10047104:	48400000 	.word	0x48400000

10047108 <LL_APB1_GRP1_EnableClock>:
{
10047108:	b580      	push	{r7, lr}
1004710a:	b084      	sub	sp, #16
1004710c:	af00      	add	r7, sp, #0
1004710e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10047110:	4b07      	ldr	r3, [pc, #28]	@ (10047130 <LL_APB1_GRP1_EnableClock+0x28>)
10047112:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10047114:	4b06      	ldr	r3, [pc, #24]	@ (10047130 <LL_APB1_GRP1_EnableClock+0x28>)
10047116:	687a      	ldr	r2, [r7, #4]
10047118:	430a      	orrs	r2, r1
1004711a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
1004711c:	4b04      	ldr	r3, [pc, #16]	@ (10047130 <LL_APB1_GRP1_EnableClock+0x28>)
1004711e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10047120:	687a      	ldr	r2, [r7, #4]
10047122:	4013      	ands	r3, r2
10047124:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047126:	68fb      	ldr	r3, [r7, #12]
}
10047128:	46c0      	nop			@ (mov r8, r8)
1004712a:	46bd      	mov	sp, r7
1004712c:	b004      	add	sp, #16
1004712e:	bd80      	pop	{r7, pc}
10047130:	48400000 	.word	0x48400000

10047134 <LL_APB2_GRP1_EnableClock>:
{
10047134:	b580      	push	{r7, lr}
10047136:	b084      	sub	sp, #16
10047138:	af00      	add	r7, sp, #0
1004713a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004713c:	4b07      	ldr	r3, [pc, #28]	@ (1004715c <LL_APB2_GRP1_EnableClock+0x28>)
1004713e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10047140:	4b06      	ldr	r3, [pc, #24]	@ (1004715c <LL_APB2_GRP1_EnableClock+0x28>)
10047142:	687a      	ldr	r2, [r7, #4]
10047144:	430a      	orrs	r2, r1
10047146:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10047148:	4b04      	ldr	r3, [pc, #16]	@ (1004715c <LL_APB2_GRP1_EnableClock+0x28>)
1004714a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004714c:	687a      	ldr	r2, [r7, #4]
1004714e:	4013      	ands	r3, r2
10047150:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047152:	68fb      	ldr	r3, [r7, #12]
}
10047154:	46c0      	nop			@ (mov r8, r8)
10047156:	46bd      	mov	sp, r7
10047158:	b004      	add	sp, #16
1004715a:	bd80      	pop	{r7, pc}
1004715c:	48400000 	.word	0x48400000

10047160 <LL_APB2_GRP1_IsEnabledClock>:
{
10047160:	b580      	push	{r7, lr}
10047162:	b082      	sub	sp, #8
10047164:	af00      	add	r7, sp, #0
10047166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10047168:	4b06      	ldr	r3, [pc, #24]	@ (10047184 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004716a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004716c:	687a      	ldr	r2, [r7, #4]
1004716e:	4013      	ands	r3, r2
10047170:	687a      	ldr	r2, [r7, #4]
10047172:	429a      	cmp	r2, r3
10047174:	d101      	bne.n	1004717a <LL_APB2_GRP1_IsEnabledClock+0x1a>
10047176:	2301      	movs	r3, #1
10047178:	e000      	b.n	1004717c <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004717a:	2300      	movs	r3, #0
}
1004717c:	0018      	movs	r0, r3
1004717e:	46bd      	mov	sp, r7
10047180:	b002      	add	sp, #8
10047182:	bd80      	pop	{r7, pc}
10047184:	48400000 	.word	0x48400000

10047188 <LL_APB2_GRP1_ForceReset>:
{
10047188:	b580      	push	{r7, lr}
1004718a:	b082      	sub	sp, #8
1004718c:	af00      	add	r7, sp, #0
1004718e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10047190:	4b04      	ldr	r3, [pc, #16]	@ (100471a4 <LL_APB2_GRP1_ForceReset+0x1c>)
10047192:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10047194:	4b03      	ldr	r3, [pc, #12]	@ (100471a4 <LL_APB2_GRP1_ForceReset+0x1c>)
10047196:	687a      	ldr	r2, [r7, #4]
10047198:	430a      	orrs	r2, r1
1004719a:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004719c:	46c0      	nop			@ (mov r8, r8)
1004719e:	46bd      	mov	sp, r7
100471a0:	b002      	add	sp, #8
100471a2:	bd80      	pop	{r7, pc}
100471a4:	48400000 	.word	0x48400000

100471a8 <LL_APB2_GRP1_ReleaseReset>:
{
100471a8:	b580      	push	{r7, lr}
100471aa:	b082      	sub	sp, #8
100471ac:	af00      	add	r7, sp, #0
100471ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
100471b0:	4b05      	ldr	r3, [pc, #20]	@ (100471c8 <LL_APB2_GRP1_ReleaseReset+0x20>)
100471b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
100471b4:	687b      	ldr	r3, [r7, #4]
100471b6:	43d9      	mvns	r1, r3
100471b8:	4b03      	ldr	r3, [pc, #12]	@ (100471c8 <LL_APB2_GRP1_ReleaseReset+0x20>)
100471ba:	400a      	ands	r2, r1
100471bc:	641a      	str	r2, [r3, #64]	@ 0x40
}
100471be:	46c0      	nop			@ (mov r8, r8)
100471c0:	46bd      	mov	sp, r7
100471c2:	b002      	add	sp, #8
100471c4:	bd80      	pop	{r7, pc}
100471c6:	46c0      	nop			@ (mov r8, r8)
100471c8:	48400000 	.word	0x48400000

100471cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100471cc:	b580      	push	{r7, lr}
100471ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
100471d0:	2380      	movs	r3, #128	@ 0x80
100471d2:	005b      	lsls	r3, r3, #1
100471d4:	0018      	movs	r0, r3
100471d6:	f7ff ff81 	bl	100470dc <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
100471da:	46c0      	nop			@ (mov r8, r8)
100471dc:	46bd      	mov	sp, r7
100471de:	bd80      	pop	{r7, pc}

100471e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
100471e0:	b590      	push	{r4, r7, lr}
100471e2:	b089      	sub	sp, #36	@ 0x24
100471e4:	af00      	add	r7, sp, #0
100471e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100471e8:	240c      	movs	r4, #12
100471ea:	193b      	adds	r3, r7, r4
100471ec:	0018      	movs	r0, r3
100471ee:	2314      	movs	r3, #20
100471f0:	001a      	movs	r2, r3
100471f2:	2100      	movs	r1, #0
100471f4:	f020 fe2c 	bl	10067e50 <memset>
  if(hi2c->Instance==I2C1)
100471f8:	687b      	ldr	r3, [r7, #4]
100471fa:	681a      	ldr	r2, [r3, #0]
100471fc:	2382      	movs	r3, #130	@ 0x82
100471fe:	05db      	lsls	r3, r3, #23
10047200:	429a      	cmp	r2, r3
10047202:	d147      	bne.n	10047294 <HAL_I2C_MspInit+0xb4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
10047204:	2004      	movs	r0, #4
10047206:	f7ff ff53 	bl	100470b0 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
1004720a:	2008      	movs	r0, #8
1004720c:	f7ff ff50 	bl	100470b0 <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA1     ------> I2C1_SDA
    PA0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
10047210:	193b      	adds	r3, r7, r4
10047212:	2202      	movs	r2, #2
10047214:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10047216:	193b      	adds	r3, r7, r4
10047218:	2212      	movs	r2, #18
1004721a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004721c:	193b      	adds	r3, r7, r4
1004721e:	2200      	movs	r2, #0
10047220:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10047222:	193b      	adds	r3, r7, r4
10047224:	2200      	movs	r2, #0
10047226:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10047228:	193b      	adds	r3, r7, r4
1004722a:	2200      	movs	r2, #0
1004722c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1004722e:	193a      	adds	r2, r7, r4
10047230:	2390      	movs	r3, #144	@ 0x90
10047232:	05db      	lsls	r3, r3, #23
10047234:	0011      	movs	r1, r2
10047236:	0018      	movs	r0, r3
10047238:	f001 f844 	bl	100482c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
1004723c:	0021      	movs	r1, r4
1004723e:	187b      	adds	r3, r7, r1
10047240:	2201      	movs	r2, #1
10047242:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10047244:	187b      	adds	r3, r7, r1
10047246:	2212      	movs	r2, #18
10047248:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004724a:	187b      	adds	r3, r7, r1
1004724c:	2200      	movs	r2, #0
1004724e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10047250:	187b      	adds	r3, r7, r1
10047252:	2200      	movs	r2, #0
10047254:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
10047256:	187b      	adds	r3, r7, r1
10047258:	2200      	movs	r2, #0
1004725a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
1004725c:	187a      	adds	r2, r7, r1
1004725e:	2390      	movs	r3, #144	@ 0x90
10047260:	05db      	lsls	r3, r3, #23
10047262:	0011      	movs	r1, r2
10047264:	0018      	movs	r0, r3
10047266:	f001 f82d 	bl	100482c4 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_1);
1004726a:	2102      	movs	r1, #2
1004726c:	2000      	movs	r0, #0
1004726e:	f003 faf9 	bl	1004a864 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
10047272:	2101      	movs	r1, #1
10047274:	2000      	movs	r0, #0
10047276:	f003 faf5 	bl	1004a864 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
1004727a:	2102      	movs	r1, #2
1004727c:	2000      	movs	r0, #0
1004727e:	f003 fb1f 	bl	1004a8c0 <HAL_PWREx_DisableGPIOPullDown>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
10047282:	2101      	movs	r1, #1
10047284:	2000      	movs	r0, #0
10047286:	f003 fb1b 	bl	1004a8c0 <HAL_PWREx_DisableGPIOPullDown>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
1004728a:	2380      	movs	r3, #128	@ 0x80
1004728c:	039b      	lsls	r3, r3, #14
1004728e:	0018      	movs	r0, r3
10047290:	f7ff ff3a 	bl	10047108 <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
10047294:	46c0      	nop			@ (mov r8, r8)
10047296:	46bd      	mov	sp, r7
10047298:	b009      	add	sp, #36	@ 0x24
1004729a:	bd90      	pop	{r4, r7, pc}

1004729c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
1004729c:	b590      	push	{r4, r7, lr}
1004729e:	b08f      	sub	sp, #60	@ 0x3c
100472a0:	af00      	add	r7, sp, #0
100472a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
100472a4:	2324      	movs	r3, #36	@ 0x24
100472a6:	18fb      	adds	r3, r7, r3
100472a8:	0018      	movs	r0, r3
100472aa:	2314      	movs	r3, #20
100472ac:	001a      	movs	r2, r3
100472ae:	2100      	movs	r1, #0
100472b0:	f020 fdce 	bl	10067e50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100472b4:	240c      	movs	r4, #12
100472b6:	193b      	adds	r3, r7, r4
100472b8:	0018      	movs	r0, r3
100472ba:	2318      	movs	r3, #24
100472bc:	001a      	movs	r2, r3
100472be:	2100      	movs	r1, #0
100472c0:	f020 fdc6 	bl	10067e50 <memset>
  if(huart->Instance==LPUART1)
100472c4:	687b      	ldr	r3, [r7, #4]
100472c6:	681b      	ldr	r3, [r3, #0]
100472c8:	4a46      	ldr	r2, [pc, #280]	@ (100473e4 <HAL_UART_MspInit+0x148>)
100472ca:	4293      	cmp	r3, r2
100472cc:	d000      	beq.n	100472d0 <HAL_UART_MspInit+0x34>
100472ce:	e084      	b.n	100473da <HAL_UART_MspInit+0x13e>
//
    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
100472d0:	193b      	adds	r3, r7, r4
100472d2:	2210      	movs	r2, #16
100472d4:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
100472d6:	193b      	adds	r3, r7, r4
100472d8:	2200      	movs	r2, #0
100472da:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100472dc:	193b      	adds	r3, r7, r4
100472de:	0018      	movs	r0, r3
100472e0:	f006 f930 	bl	1004d544 <HAL_RCCEx_PeriphCLKConfig>
100472e4:	1e03      	subs	r3, r0, #0
100472e6:	d001      	beq.n	100472ec <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
100472e8:	f7fa ff40 	bl	1004216c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
100472ec:	2380      	movs	r3, #128	@ 0x80
100472ee:	005b      	lsls	r3, r3, #1
100472f0:	0018      	movs	r0, r3
100472f2:	f7ff ff09 	bl	10047108 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
100472f6:	2008      	movs	r0, #8
100472f8:	f7ff feda 	bl	100470b0 <LL_AHB1_GRP1_EnableClock>
    PB7     ------> LPUART1_RX


    */

    GPIO_InitStruct.Pin = GPIO_PIN_3;
100472fc:	2424      	movs	r4, #36	@ 0x24
100472fe:	193b      	adds	r3, r7, r4
10047300:	2208      	movs	r2, #8
10047302:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10047304:	193b      	adds	r3, r7, r4
10047306:	2202      	movs	r2, #2
10047308:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004730a:	193b      	adds	r3, r7, r4
1004730c:	2200      	movs	r2, #0
1004730e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10047310:	193b      	adds	r3, r7, r4
10047312:	2200      	movs	r2, #0
10047314:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
10047316:	193b      	adds	r3, r7, r4
10047318:	2201      	movs	r2, #1
1004731a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
1004731c:	193b      	adds	r3, r7, r4
1004731e:	4a32      	ldr	r2, [pc, #200]	@ (100473e8 <HAL_UART_MspInit+0x14c>)
10047320:	0019      	movs	r1, r3
10047322:	0010      	movs	r0, r2
10047324:	f000 ffce 	bl	100482c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
10047328:	193b      	adds	r3, r7, r4
1004732a:	2280      	movs	r2, #128	@ 0x80
1004732c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004732e:	193b      	adds	r3, r7, r4
10047330:	2202      	movs	r2, #2
10047332:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10047334:	193b      	adds	r3, r7, r4
10047336:	2200      	movs	r2, #0
10047338:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
1004733a:	193b      	adds	r3, r7, r4
1004733c:	2200      	movs	r2, #0
1004733e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
10047340:	193b      	adds	r3, r7, r4
10047342:	2203      	movs	r2, #3
10047344:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10047346:	193b      	adds	r3, r7, r4
10047348:	4a27      	ldr	r2, [pc, #156]	@ (100473e8 <HAL_UART_MspInit+0x14c>)
1004734a:	0019      	movs	r1, r3
1004734c:	0010      	movs	r0, r2
1004734e:	f000 ffb9 	bl	100482c4 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
10047352:	2188      	movs	r1, #136	@ 0x88
10047354:	2001      	movs	r0, #1
10047356:	f003 fa85 	bl	1004a864 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
1004735a:	2188      	movs	r1, #136	@ 0x88
1004735c:	2001      	movs	r0, #1
1004735e:	f003 faaf 	bl	1004a8c0 <HAL_PWREx_DisableGPIOPullDown>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
10047362:	2200      	movs	r2, #0
10047364:	2101      	movs	r1, #1
10047366:	2009      	movs	r0, #9
10047368:	f000 fdcc 	bl	10047f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
1004736c:	2009      	movs	r0, #9
1004736e:	f000 fdde 	bl	10047f2e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPUART1_MspInit 1 */
    //    PB0     ------> USART_RX
    //    PA1     ------> USART_TX
    GPIO_InitStruct.Pin = GPIO_PIN_0;
10047372:	193b      	adds	r3, r7, r4
10047374:	2201      	movs	r2, #1
10047376:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
10047378:	193b      	adds	r3, r7, r4
1004737a:	2202      	movs	r2, #2
1004737c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004737e:	193b      	adds	r3, r7, r4
10047380:	2200      	movs	r2, #0
10047382:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10047384:	193b      	adds	r3, r7, r4
10047386:	2200      	movs	r2, #0
10047388:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
1004738a:	193b      	adds	r3, r7, r4
1004738c:	2200      	movs	r2, #0
1004738e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10047390:	193b      	adds	r3, r7, r4
10047392:	4a15      	ldr	r2, [pc, #84]	@ (100473e8 <HAL_UART_MspInit+0x14c>)
10047394:	0019      	movs	r1, r3
10047396:	0010      	movs	r0, r2
10047398:	f000 ff94 	bl	100482c4 <HAL_GPIO_Init>

    //default to PA1 being in I2C control
    GPIO_InitStruct.Pin = GPIO_PIN_1;
1004739c:	0021      	movs	r1, r4
1004739e:	187b      	adds	r3, r7, r1
100473a0:	2202      	movs	r2, #2
100473a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
100473a4:	187b      	adds	r3, r7, r1
100473a6:	2212      	movs	r2, #18
100473a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100473aa:	187b      	adds	r3, r7, r1
100473ac:	2200      	movs	r2, #0
100473ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100473b0:	187b      	adds	r3, r7, r1
100473b2:	2200      	movs	r2, #0
100473b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
100473b6:	187b      	adds	r3, r7, r1
100473b8:	2200      	movs	r2, #0
100473ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100473bc:	187a      	adds	r2, r7, r1
100473be:	2390      	movs	r3, #144	@ 0x90
100473c0:	05db      	lsls	r3, r3, #23
100473c2:	0011      	movs	r1, r2
100473c4:	0018      	movs	r0, r3
100473c6:	f000 ff7d 	bl	100482c4 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_0);
100473ca:	2101      	movs	r1, #1
100473cc:	2001      	movs	r0, #1
100473ce:	f003 fa49 	bl	1004a864 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
100473d2:	2102      	movs	r1, #2
100473d4:	2000      	movs	r0, #0
100473d6:	f003 fa73 	bl	1004a8c0 <HAL_PWREx_DisableGPIOPullDown>
//
    /* USER CODE END LPUART1_MspInit 1 */

  }

}
100473da:	46c0      	nop			@ (mov r8, r8)
100473dc:	46bd      	mov	sp, r7
100473de:	b00f      	add	sp, #60	@ 0x3c
100473e0:	bd90      	pop	{r4, r7, pc}
100473e2:	46c0      	nop			@ (mov r8, r8)
100473e4:	41005000 	.word	0x41005000
100473e8:	48100000 	.word	0x48100000

100473ec <HAL_PKA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
100473ec:	b580      	push	{r7, lr}
100473ee:	b082      	sub	sp, #8
100473f0:	af00      	add	r7, sp, #0
100473f2:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
100473f4:	687b      	ldr	r3, [r7, #4]
100473f6:	681b      	ldr	r3, [r3, #0]
100473f8:	4a05      	ldr	r2, [pc, #20]	@ (10047410 <HAL_PKA_MspInit+0x24>)
100473fa:	4293      	cmp	r3, r2
100473fc:	d104      	bne.n	10047408 <HAL_PKA_MspInit+0x1c>
  {
    /* USER CODE BEGIN PKA_MspInit 0 */

    /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
100473fe:	2380      	movs	r3, #128	@ 0x80
10047400:	025b      	lsls	r3, r3, #9
10047402:	0018      	movs	r0, r3
10047404:	f7ff fe54 	bl	100470b0 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END PKA_MspInit 1 */

  }

}
10047408:	46c0      	nop			@ (mov r8, r8)
1004740a:	46bd      	mov	sp, r7
1004740c:	b002      	add	sp, #8
1004740e:	bd80      	pop	{r7, pc}
10047410:	48300000 	.word	0x48300000

10047414 <HAL_RADIO_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hradio: RADIO handle pointer
  * @retval None
  */
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
10047414:	b590      	push	{r4, r7, lr}
10047416:	b089      	sub	sp, #36	@ 0x24
10047418:	af00      	add	r7, sp, #0
1004741a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
1004741c:	2408      	movs	r4, #8
1004741e:	193b      	adds	r3, r7, r4
10047420:	0018      	movs	r0, r3
10047422:	2318      	movs	r3, #24
10047424:	001a      	movs	r2, r3
10047426:	2100      	movs	r1, #0
10047428:	f020 fd12 	bl	10067e50 <memset>
  if(hradio->Instance==RADIO)
1004742c:	687b      	ldr	r3, [r7, #4]
1004742e:	681a      	ldr	r2, [r3, #0]
10047430:	23c0      	movs	r3, #192	@ 0xc0
10047432:	05db      	lsls	r3, r3, #23
10047434:	429a      	cmp	r2, r3
10047436:	d12d      	bne.n	10047494 <HAL_RADIO_MspInit+0x80>

    /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
10047438:	193b      	adds	r3, r7, r4
1004743a:	2201      	movs	r2, #1
1004743c:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
1004743e:	193b      	adds	r3, r7, r4
10047440:	2204      	movs	r2, #4
10047442:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10047444:	193b      	adds	r3, r7, r4
10047446:	0018      	movs	r0, r3
10047448:	f006 f87c 	bl	1004d544 <HAL_RCCEx_PeriphCLKConfig>
1004744c:	1e03      	subs	r3, r0, #0
1004744e:	d001      	beq.n	10047454 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
10047450:	f7fa fe8c 	bl	1004216c <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
10047454:	2001      	movs	r0, #1
10047456:	f7ff fe83 	bl	10047160 <LL_APB2_GRP1_IsEnabledClock>
1004745a:	1e03      	subs	r3, r0, #0
1004745c:	d108      	bne.n	10047470 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
1004745e:	2001      	movs	r0, #1
10047460:	f7ff fe92 	bl	10047188 <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10047464:	2001      	movs	r0, #1
10047466:	f7ff fe9f 	bl	100471a8 <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
1004746a:	2001      	movs	r0, #1
1004746c:	f7ff fe62 	bl	10047134 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10047470:	f00d f8f2 	bl	10054658 <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10047474:	2200      	movs	r2, #0
10047476:	2100      	movs	r1, #0
10047478:	2012      	movs	r0, #18
1004747a:	f000 fd43 	bl	10047f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
1004747e:	2012      	movs	r0, #18
10047480:	f000 fd55 	bl	10047f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10047484:	2200      	movs	r2, #0
10047486:	2100      	movs	r1, #0
10047488:	2019      	movs	r0, #25
1004748a:	f000 fd3b 	bl	10047f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
1004748e:	2019      	movs	r0, #25
10047490:	f000 fd4d 	bl	10047f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END RADIO_MspInit 1 */

  }

}
10047494:	46c0      	nop			@ (mov r8, r8)
10047496:	46bd      	mov	sp, r7
10047498:	b009      	add	sp, #36	@ 0x24
1004749a:	bd90      	pop	{r4, r7, pc}

1004749c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
1004749c:	b580      	push	{r7, lr}
1004749e:	b082      	sub	sp, #8
100474a0:	af00      	add	r7, sp, #0
100474a2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
100474a4:	687b      	ldr	r3, [r7, #4]
100474a6:	681b      	ldr	r3, [r3, #0]
100474a8:	4a05      	ldr	r2, [pc, #20]	@ (100474c0 <HAL_RNG_MspInit+0x24>)
100474aa:	4293      	cmp	r3, r2
100474ac:	d104      	bne.n	100474b8 <HAL_RNG_MspInit+0x1c>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
100474ae:	2380      	movs	r3, #128	@ 0x80
100474b0:	02db      	lsls	r3, r3, #11
100474b2:	0018      	movs	r0, r3
100474b4:	f7ff fdfc 	bl	100470b0 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
100474b8:	46c0      	nop			@ (mov r8, r8)
100474ba:	46bd      	mov	sp, r7
100474bc:	b002      	add	sp, #8
100474be:	bd80      	pop	{r7, pc}
100474c0:	48600000 	.word	0x48600000

100474c4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
100474c4:	b580      	push	{r7, lr}
100474c6:	b082      	sub	sp, #8
100474c8:	af00      	add	r7, sp, #0
100474ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
100474cc:	687b      	ldr	r3, [r7, #4]
100474ce:	681b      	ldr	r3, [r3, #0]
100474d0:	4a08      	ldr	r2, [pc, #32]	@ (100474f4 <HAL_TIM_Base_MspInit+0x30>)
100474d2:	4293      	cmp	r3, r2
100474d4:	d10a      	bne.n	100474ec <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
100474d6:	2001      	movs	r0, #1
100474d8:	f7ff fe00 	bl	100470dc <LL_APB0_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
100474dc:	2200      	movs	r2, #0
100474de:	2101      	movs	r1, #1
100474e0:	200a      	movs	r0, #10
100474e2:	f000 fd0f 	bl	10047f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
100474e6:	200a      	movs	r0, #10
100474e8:	f000 fd21 	bl	10047f2e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
100474ec:	46c0      	nop			@ (mov r8, r8)
100474ee:	46bd      	mov	sp, r7
100474f0:	b002      	add	sp, #8
100474f2:	bd80      	pop	{r7, pc}
100474f4:	40002000 	.word	0x40002000

100474f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
100474f8:	b580      	push	{r7, lr}
100474fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100474fc:	46c0      	nop			@ (mov r8, r8)
100474fe:	e7fd      	b.n	100474fc <NMI_Handler+0x4>

10047500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10047500:	b580      	push	{r7, lr}
10047502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10047504:	46c0      	nop			@ (mov r8, r8)
10047506:	e7fd      	b.n	10047504 <HardFault_Handler+0x4>

10047508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10047508:	b580      	push	{r7, lr}
1004750a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1004750c:	46c0      	nop			@ (mov r8, r8)
1004750e:	46bd      	mov	sp, r7
10047510:	bd80      	pop	{r7, pc}

10047512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10047512:	b580      	push	{r7, lr}
10047514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10047516:	46c0      	nop			@ (mov r8, r8)
10047518:	46bd      	mov	sp, r7
1004751a:	bd80      	pop	{r7, pc}

1004751c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
1004751c:	b580      	push	{r7, lr}
1004751e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10047520:	f000 fbfa 	bl	10047d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10047524:	46c0      	nop			@ (mov r8, r8)
10047526:	46bd      	mov	sp, r7
10047528:	bd80      	pop	{r7, pc}

1004752a <GPIOA_IRQHandler>:

/**
  * @brief This function handles GPIOA interrupt.
  */
void GPIOA_IRQHandler(void)
{
1004752a:	b580      	push	{r7, lr}
1004752c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOA_IRQn 0 */

  /* USER CODE END GPIOA_IRQn 0 */
  BSP_PB_IRQHandler(GPIOA,B1_PIN);
1004752e:	2390      	movs	r3, #144	@ 0x90
10047530:	05db      	lsls	r3, r3, #23
10047532:	2101      	movs	r1, #1
10047534:	0018      	movs	r0, r3
10047536:	f000 fb7d 	bl	10047c34 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOA_IRQn 1 */

  /* USER CODE END GPIOA_IRQn 1 */
}
1004753a:	46c0      	nop			@ (mov r8, r8)
1004753c:	46bd      	mov	sp, r7
1004753e:	bd80      	pop	{r7, pc}

10047540 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
10047540:	b580      	push	{r7, lr}
10047542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  BSP_PB_IRQHandler(GPIOB,B3_PIN);
10047544:	2380      	movs	r3, #128	@ 0x80
10047546:	01db      	lsls	r3, r3, #7
10047548:	4a06      	ldr	r2, [pc, #24]	@ (10047564 <GPIOB_IRQHandler+0x24>)
1004754a:	0019      	movs	r1, r3
1004754c:	0010      	movs	r0, r2
1004754e:	f000 fb71 	bl	10047c34 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(GPIOB,B2_PIN);
10047552:	4b04      	ldr	r3, [pc, #16]	@ (10047564 <GPIOB_IRQHandler+0x24>)
10047554:	2120      	movs	r1, #32
10047556:	0018      	movs	r0, r3
10047558:	f000 fb6c 	bl	10047c34 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
1004755c:	46c0      	nop			@ (mov r8, r8)
1004755e:	46bd      	mov	sp, r7
10047560:	bd80      	pop	{r7, pc}
10047562:	46c0      	nop			@ (mov r8, r8)
10047564:	48100000 	.word	0x48100000

10047568 <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
10047568:	b580      	push	{r7, lr}
1004756a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
1004756c:	f005 fb14 	bl	1004cb98 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10047570:	46c0      	nop			@ (mov r8, r8)
10047572:	46bd      	mov	sp, r7
10047574:	bd80      	pop	{r7, pc}

10047576 <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
10047576:	b580      	push	{r7, lr}
10047578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004757a:	f005 fb16 	bl	1004cbaa <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
1004757e:	46c0      	nop			@ (mov r8, r8)
10047580:	46bd      	mov	sp, r7
10047582:	bd80      	pop	{r7, pc}

10047584 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10047584:	b580      	push	{r7, lr}
10047586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
10047588:	f003 ff06 	bl	1004b398 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
1004758c:	46c0      	nop			@ (mov r8, r8)
1004758e:	46bd      	mov	sp, r7
10047590:	bd80      	pop	{r7, pc}

10047592 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10047592:	b580      	push	{r7, lr}
10047594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
10047596:	f003 ff20 	bl	1004b3da <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
1004759a:	46c0      	nop			@ (mov r8, r8)
1004759c:	46bd      	mov	sp, r7
1004759e:	bd80      	pop	{r7, pc}

100475a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
100475a0:	b580      	push	{r7, lr}
100475a2:	b086      	sub	sp, #24
100475a4:	af00      	add	r7, sp, #0
100475a6:	60f8      	str	r0, [r7, #12]
100475a8:	60b9      	str	r1, [r7, #8]
100475aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100475ac:	2300      	movs	r3, #0
100475ae:	617b      	str	r3, [r7, #20]
100475b0:	e00a      	b.n	100475c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
100475b2:	e000      	b.n	100475b6 <_read+0x16>
100475b4:	bf00      	nop
100475b6:	0001      	movs	r1, r0
100475b8:	68bb      	ldr	r3, [r7, #8]
100475ba:	1c5a      	adds	r2, r3, #1
100475bc:	60ba      	str	r2, [r7, #8]
100475be:	b2ca      	uxtb	r2, r1
100475c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100475c2:	697b      	ldr	r3, [r7, #20]
100475c4:	3301      	adds	r3, #1
100475c6:	617b      	str	r3, [r7, #20]
100475c8:	697a      	ldr	r2, [r7, #20]
100475ca:	687b      	ldr	r3, [r7, #4]
100475cc:	429a      	cmp	r2, r3
100475ce:	dbf0      	blt.n	100475b2 <_read+0x12>
  }

  return len;
100475d0:	687b      	ldr	r3, [r7, #4]
}
100475d2:	0018      	movs	r0, r3
100475d4:	46bd      	mov	sp, r7
100475d6:	b006      	add	sp, #24
100475d8:	bd80      	pop	{r7, pc}

100475da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
100475da:	b580      	push	{r7, lr}
100475dc:	b086      	sub	sp, #24
100475de:	af00      	add	r7, sp, #0
100475e0:	60f8      	str	r0, [r7, #12]
100475e2:	60b9      	str	r1, [r7, #8]
100475e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
100475e6:	2300      	movs	r3, #0
100475e8:	617b      	str	r3, [r7, #20]
100475ea:	e009      	b.n	10047600 <_write+0x26>
  {
    __io_putchar(*ptr++);
100475ec:	68bb      	ldr	r3, [r7, #8]
100475ee:	1c5a      	adds	r2, r3, #1
100475f0:	60ba      	str	r2, [r7, #8]
100475f2:	781b      	ldrb	r3, [r3, #0]
100475f4:	0018      	movs	r0, r3
100475f6:	e000      	b.n	100475fa <_write+0x20>
100475f8:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100475fa:	697b      	ldr	r3, [r7, #20]
100475fc:	3301      	adds	r3, #1
100475fe:	617b      	str	r3, [r7, #20]
10047600:	697a      	ldr	r2, [r7, #20]
10047602:	687b      	ldr	r3, [r7, #4]
10047604:	429a      	cmp	r2, r3
10047606:	dbf1      	blt.n	100475ec <_write+0x12>
  }
  return len;
10047608:	687b      	ldr	r3, [r7, #4]
}
1004760a:	0018      	movs	r0, r3
1004760c:	46bd      	mov	sp, r7
1004760e:	b006      	add	sp, #24
10047610:	bd80      	pop	{r7, pc}

10047612 <_close>:

int _close(int file)
{
10047612:	b580      	push	{r7, lr}
10047614:	b082      	sub	sp, #8
10047616:	af00      	add	r7, sp, #0
10047618:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
1004761a:	2301      	movs	r3, #1
1004761c:	425b      	negs	r3, r3
}
1004761e:	0018      	movs	r0, r3
10047620:	46bd      	mov	sp, r7
10047622:	b002      	add	sp, #8
10047624:	bd80      	pop	{r7, pc}

10047626 <_fstat>:


int _fstat(int file, struct stat *st)
{
10047626:	b580      	push	{r7, lr}
10047628:	b082      	sub	sp, #8
1004762a:	af00      	add	r7, sp, #0
1004762c:	6078      	str	r0, [r7, #4]
1004762e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
10047630:	683b      	ldr	r3, [r7, #0]
10047632:	2280      	movs	r2, #128	@ 0x80
10047634:	0192      	lsls	r2, r2, #6
10047636:	605a      	str	r2, [r3, #4]
  return 0;
10047638:	2300      	movs	r3, #0
}
1004763a:	0018      	movs	r0, r3
1004763c:	46bd      	mov	sp, r7
1004763e:	b002      	add	sp, #8
10047640:	bd80      	pop	{r7, pc}

10047642 <_isatty>:

int _isatty(int file)
{
10047642:	b580      	push	{r7, lr}
10047644:	b082      	sub	sp, #8
10047646:	af00      	add	r7, sp, #0
10047648:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
1004764a:	2301      	movs	r3, #1
}
1004764c:	0018      	movs	r0, r3
1004764e:	46bd      	mov	sp, r7
10047650:	b002      	add	sp, #8
10047652:	bd80      	pop	{r7, pc}

10047654 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10047654:	b580      	push	{r7, lr}
10047656:	b084      	sub	sp, #16
10047658:	af00      	add	r7, sp, #0
1004765a:	60f8      	str	r0, [r7, #12]
1004765c:	60b9      	str	r1, [r7, #8]
1004765e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10047660:	2300      	movs	r3, #0
}
10047662:	0018      	movs	r0, r3
10047664:	46bd      	mov	sp, r7
10047666:	b004      	add	sp, #16
10047668:	bd80      	pop	{r7, pc}
	...

1004766c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
1004766c:	b580      	push	{r7, lr}
1004766e:	b086      	sub	sp, #24
10047670:	af00      	add	r7, sp, #0
10047672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10047674:	4a14      	ldr	r2, [pc, #80]	@ (100476c8 <_sbrk+0x5c>)
10047676:	4b15      	ldr	r3, [pc, #84]	@ (100476cc <_sbrk+0x60>)
10047678:	1ad3      	subs	r3, r2, r3
1004767a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
1004767c:	697b      	ldr	r3, [r7, #20]
1004767e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10047680:	4b13      	ldr	r3, [pc, #76]	@ (100476d0 <_sbrk+0x64>)
10047682:	681b      	ldr	r3, [r3, #0]
10047684:	2b00      	cmp	r3, #0
10047686:	d102      	bne.n	1004768e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
10047688:	4b11      	ldr	r3, [pc, #68]	@ (100476d0 <_sbrk+0x64>)
1004768a:	4a12      	ldr	r2, [pc, #72]	@ (100476d4 <_sbrk+0x68>)
1004768c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
1004768e:	4b10      	ldr	r3, [pc, #64]	@ (100476d0 <_sbrk+0x64>)
10047690:	681a      	ldr	r2, [r3, #0]
10047692:	687b      	ldr	r3, [r7, #4]
10047694:	18d3      	adds	r3, r2, r3
10047696:	693a      	ldr	r2, [r7, #16]
10047698:	429a      	cmp	r2, r3
1004769a:	d207      	bcs.n	100476ac <_sbrk+0x40>
  {
    errno = ENOMEM;
1004769c:	f020 fc40 	bl	10067f20 <__errno>
100476a0:	0003      	movs	r3, r0
100476a2:	220c      	movs	r2, #12
100476a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
100476a6:	2301      	movs	r3, #1
100476a8:	425b      	negs	r3, r3
100476aa:	e009      	b.n	100476c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
100476ac:	4b08      	ldr	r3, [pc, #32]	@ (100476d0 <_sbrk+0x64>)
100476ae:	681b      	ldr	r3, [r3, #0]
100476b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
100476b2:	4b07      	ldr	r3, [pc, #28]	@ (100476d0 <_sbrk+0x64>)
100476b4:	681a      	ldr	r2, [r3, #0]
100476b6:	687b      	ldr	r3, [r7, #4]
100476b8:	18d2      	adds	r2, r2, r3
100476ba:	4b05      	ldr	r3, [pc, #20]	@ (100476d0 <_sbrk+0x64>)
100476bc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
100476be:	68fb      	ldr	r3, [r7, #12]
}
100476c0:	0018      	movs	r0, r3
100476c2:	46bd      	mov	sp, r7
100476c4:	b006      	add	sp, #24
100476c6:	bd80      	pop	{r7, pc}
100476c8:	20006000 	.word	0x20006000
100476cc:	00000c00 	.word	0x00000c00
100476d0:	200021ac 	.word	0x200021ac
100476d4:	20004b44 	.word	0x20004b44

100476d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
100476d8:	b590      	push	{r4, r7, lr}
100476da:	b083      	sub	sp, #12
100476dc:	af00      	add	r7, sp, #0
100476de:	0002      	movs	r2, r0
100476e0:	6039      	str	r1, [r7, #0]
100476e2:	1dfb      	adds	r3, r7, #7
100476e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100476e6:	1dfb      	adds	r3, r7, #7
100476e8:	781b      	ldrb	r3, [r3, #0]
100476ea:	2b7f      	cmp	r3, #127	@ 0x7f
100476ec:	d828      	bhi.n	10047740 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100476ee:	4a2f      	ldr	r2, [pc, #188]	@ (100477ac <__NVIC_SetPriority+0xd4>)
100476f0:	1dfb      	adds	r3, r7, #7
100476f2:	781b      	ldrb	r3, [r3, #0]
100476f4:	b25b      	sxtb	r3, r3
100476f6:	089b      	lsrs	r3, r3, #2
100476f8:	33c0      	adds	r3, #192	@ 0xc0
100476fa:	009b      	lsls	r3, r3, #2
100476fc:	589b      	ldr	r3, [r3, r2]
100476fe:	1dfa      	adds	r2, r7, #7
10047700:	7812      	ldrb	r2, [r2, #0]
10047702:	0011      	movs	r1, r2
10047704:	2203      	movs	r2, #3
10047706:	400a      	ands	r2, r1
10047708:	00d2      	lsls	r2, r2, #3
1004770a:	21ff      	movs	r1, #255	@ 0xff
1004770c:	4091      	lsls	r1, r2
1004770e:	000a      	movs	r2, r1
10047710:	43d2      	mvns	r2, r2
10047712:	401a      	ands	r2, r3
10047714:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10047716:	683b      	ldr	r3, [r7, #0]
10047718:	019b      	lsls	r3, r3, #6
1004771a:	22ff      	movs	r2, #255	@ 0xff
1004771c:	401a      	ands	r2, r3
1004771e:	1dfb      	adds	r3, r7, #7
10047720:	781b      	ldrb	r3, [r3, #0]
10047722:	0018      	movs	r0, r3
10047724:	2303      	movs	r3, #3
10047726:	4003      	ands	r3, r0
10047728:	00db      	lsls	r3, r3, #3
1004772a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004772c:	481f      	ldr	r0, [pc, #124]	@ (100477ac <__NVIC_SetPriority+0xd4>)
1004772e:	1dfb      	adds	r3, r7, #7
10047730:	781b      	ldrb	r3, [r3, #0]
10047732:	b25b      	sxtb	r3, r3
10047734:	089b      	lsrs	r3, r3, #2
10047736:	430a      	orrs	r2, r1
10047738:	33c0      	adds	r3, #192	@ 0xc0
1004773a:	009b      	lsls	r3, r3, #2
1004773c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
1004773e:	e031      	b.n	100477a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047740:	4a1b      	ldr	r2, [pc, #108]	@ (100477b0 <__NVIC_SetPriority+0xd8>)
10047742:	1dfb      	adds	r3, r7, #7
10047744:	781b      	ldrb	r3, [r3, #0]
10047746:	0019      	movs	r1, r3
10047748:	230f      	movs	r3, #15
1004774a:	400b      	ands	r3, r1
1004774c:	3b08      	subs	r3, #8
1004774e:	089b      	lsrs	r3, r3, #2
10047750:	3306      	adds	r3, #6
10047752:	009b      	lsls	r3, r3, #2
10047754:	18d3      	adds	r3, r2, r3
10047756:	3304      	adds	r3, #4
10047758:	681b      	ldr	r3, [r3, #0]
1004775a:	1dfa      	adds	r2, r7, #7
1004775c:	7812      	ldrb	r2, [r2, #0]
1004775e:	0011      	movs	r1, r2
10047760:	2203      	movs	r2, #3
10047762:	400a      	ands	r2, r1
10047764:	00d2      	lsls	r2, r2, #3
10047766:	21ff      	movs	r1, #255	@ 0xff
10047768:	4091      	lsls	r1, r2
1004776a:	000a      	movs	r2, r1
1004776c:	43d2      	mvns	r2, r2
1004776e:	401a      	ands	r2, r3
10047770:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10047772:	683b      	ldr	r3, [r7, #0]
10047774:	019b      	lsls	r3, r3, #6
10047776:	22ff      	movs	r2, #255	@ 0xff
10047778:	401a      	ands	r2, r3
1004777a:	1dfb      	adds	r3, r7, #7
1004777c:	781b      	ldrb	r3, [r3, #0]
1004777e:	0018      	movs	r0, r3
10047780:	2303      	movs	r3, #3
10047782:	4003      	ands	r3, r0
10047784:	00db      	lsls	r3, r3, #3
10047786:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047788:	4809      	ldr	r0, [pc, #36]	@ (100477b0 <__NVIC_SetPriority+0xd8>)
1004778a:	1dfb      	adds	r3, r7, #7
1004778c:	781b      	ldrb	r3, [r3, #0]
1004778e:	001c      	movs	r4, r3
10047790:	230f      	movs	r3, #15
10047792:	4023      	ands	r3, r4
10047794:	3b08      	subs	r3, #8
10047796:	089b      	lsrs	r3, r3, #2
10047798:	430a      	orrs	r2, r1
1004779a:	3306      	adds	r3, #6
1004779c:	009b      	lsls	r3, r3, #2
1004779e:	18c3      	adds	r3, r0, r3
100477a0:	3304      	adds	r3, #4
100477a2:	601a      	str	r2, [r3, #0]
}
100477a4:	46c0      	nop			@ (mov r8, r8)
100477a6:	46bd      	mov	sp, r7
100477a8:	b003      	add	sp, #12
100477aa:	bd90      	pop	{r4, r7, pc}
100477ac:	e000e100 	.word	0xe000e100
100477b0:	e000ed00 	.word	0xe000ed00

100477b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
100477b4:	b580      	push	{r7, lr}
100477b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
100477b8:	f3bf 8f4f 	dsb	sy
}
100477bc:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100477be:	4b04      	ldr	r3, [pc, #16]	@ (100477d0 <__NVIC_SystemReset+0x1c>)
100477c0:	4a04      	ldr	r2, [pc, #16]	@ (100477d4 <__NVIC_SystemReset+0x20>)
100477c2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
100477c4:	f3bf 8f4f 	dsb	sy
}
100477c8:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
100477ca:	46c0      	nop			@ (mov r8, r8)
100477cc:	e7fd      	b.n	100477ca <__NVIC_SystemReset+0x16>
100477ce:	46c0      	nop			@ (mov r8, r8)
100477d0:	e000ed00 	.word	0xe000ed00
100477d4:	05fa0004 	.word	0x05fa0004

100477d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
100477d8:	b590      	push	{r4, r7, lr}
100477da:	b087      	sub	sp, #28
100477dc:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
100477de:	4a5e      	ldr	r2, [pc, #376]	@ (10047958 <SystemInit+0x180>)
100477e0:	2394      	movs	r3, #148	@ 0x94
100477e2:	58d3      	ldr	r3, [r2, r3]
100477e4:	2b00      	cmp	r3, #0
100477e6:	d10e      	bne.n	10047806 <SystemInit+0x2e>
100477e8:	4b5c      	ldr	r3, [pc, #368]	@ (1004795c <SystemInit+0x184>)
100477ea:	691b      	ldr	r3, [r3, #16]
100477ec:	2b00      	cmp	r3, #0
100477ee:	d103      	bne.n	100477f8 <SystemInit+0x20>
100477f0:	4b5a      	ldr	r3, [pc, #360]	@ (1004795c <SystemInit+0x184>)
100477f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100477f4:	2b00      	cmp	r3, #0
100477f6:	d006      	beq.n	10047806 <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
100477f8:	4b59      	ldr	r3, [pc, #356]	@ (10047960 <SystemInit+0x188>)
100477fa:	2201      	movs	r2, #1
100477fc:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
100477fe:	f7f8 fcf3 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
10047802:	f7ff ffd7 	bl	100477b4 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
10047806:	4b57      	ldr	r3, [pc, #348]	@ (10047964 <SystemInit+0x18c>)
10047808:	4a57      	ldr	r2, [pc, #348]	@ (10047968 <SystemInit+0x190>)
1004780a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
1004780c:	4b55      	ldr	r3, [pc, #340]	@ (10047964 <SystemInit+0x18c>)
1004780e:	689a      	ldr	r2, [r3, #8]
10047810:	4b53      	ldr	r3, [pc, #332]	@ (10047960 <SystemInit+0x188>)
10047812:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
10047814:	4b51      	ldr	r3, [pc, #324]	@ (1004795c <SystemInit+0x184>)
10047816:	685a      	ldr	r2, [r3, #4]
10047818:	4b50      	ldr	r3, [pc, #320]	@ (1004795c <SystemInit+0x184>)
1004781a:	2120      	movs	r1, #32
1004781c:	430a      	orrs	r2, r1
1004781e:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
10047820:	4b4e      	ldr	r3, [pc, #312]	@ (1004795c <SystemInit+0x184>)
10047822:	685a      	ldr	r2, [r3, #4]
10047824:	4b4d      	ldr	r3, [pc, #308]	@ (1004795c <SystemInit+0x184>)
10047826:	4951      	ldr	r1, [pc, #324]	@ (1004796c <SystemInit+0x194>)
10047828:	400a      	ands	r2, r1
1004782a:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
1004782c:	46c0      	nop			@ (mov r8, r8)
1004782e:	4b4b      	ldr	r3, [pc, #300]	@ (1004795c <SystemInit+0x184>)
10047830:	695b      	ldr	r3, [r3, #20]
10047832:	2204      	movs	r2, #4
10047834:	4013      	ands	r3, r2
10047836:	2b04      	cmp	r3, #4
10047838:	d1f9      	bne.n	1004782e <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
1004783a:	4b48      	ldr	r3, [pc, #288]	@ (1004795c <SystemInit+0x184>)
1004783c:	69db      	ldr	r3, [r3, #28]
1004783e:	2230      	movs	r2, #48	@ 0x30
10047840:	4393      	bics	r3, r2
10047842:	001a      	movs	r2, r3
10047844:	4b45      	ldr	r3, [pc, #276]	@ (1004795c <SystemInit+0x184>)
10047846:	2120      	movs	r1, #32
10047848:	430a      	orrs	r2, r1
1004784a:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
1004784c:	4b43      	ldr	r3, [pc, #268]	@ (1004795c <SystemInit+0x184>)
1004784e:	69da      	ldr	r2, [r3, #28]
10047850:	4b42      	ldr	r3, [pc, #264]	@ (1004795c <SystemInit+0x184>)
10047852:	4947      	ldr	r1, [pc, #284]	@ (10047970 <SystemInit+0x198>)
10047854:	400a      	ands	r2, r1
10047856:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
10047858:	4b40      	ldr	r3, [pc, #256]	@ (1004795c <SystemInit+0x184>)
1004785a:	69da      	ldr	r2, [r3, #28]
1004785c:	4b3f      	ldr	r3, [pc, #252]	@ (1004795c <SystemInit+0x184>)
1004785e:	2180      	movs	r1, #128	@ 0x80
10047860:	0049      	lsls	r1, r1, #1
10047862:	430a      	orrs	r2, r1
10047864:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
10047866:	4b43      	ldr	r3, [pc, #268]	@ (10047974 <SystemInit+0x19c>)
10047868:	681b      	ldr	r3, [r3, #0]
1004786a:	4a43      	ldr	r2, [pc, #268]	@ (10047978 <SystemInit+0x1a0>)
1004786c:	4293      	cmp	r3, r2
1004786e:	d055      	beq.n	1004791c <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10047870:	231f      	movs	r3, #31
10047872:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10047874:	2308      	movs	r3, #8
10047876:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
10047878:	230a      	movs	r3, #10
1004787a:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
1004787c:	2303      	movs	r3, #3
1004787e:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10047880:	4b35      	ldr	r3, [pc, #212]	@ (10047958 <SystemInit+0x180>)
10047882:	68db      	ldr	r3, [r3, #12]
10047884:	221e      	movs	r2, #30
10047886:	4393      	bics	r3, r2
10047888:	0019      	movs	r1, r3
1004788a:	68fb      	ldr	r3, [r7, #12]
1004788c:	005a      	lsls	r2, r3, #1
1004788e:	4b32      	ldr	r3, [pc, #200]	@ (10047958 <SystemInit+0x180>)
10047890:	430a      	orrs	r2, r1
10047892:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10047894:	4b30      	ldr	r3, [pc, #192]	@ (10047958 <SystemInit+0x180>)
10047896:	68da      	ldr	r2, [r3, #12]
10047898:	4b2f      	ldr	r3, [pc, #188]	@ (10047958 <SystemInit+0x180>)
1004789a:	2101      	movs	r1, #1
1004789c:	430a      	orrs	r2, r1
1004789e:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
100478a0:	4b2d      	ldr	r3, [pc, #180]	@ (10047958 <SystemInit+0x180>)
100478a2:	68db      	ldr	r3, [r3, #12]
100478a4:	4a35      	ldr	r2, [pc, #212]	@ (1004797c <SystemInit+0x1a4>)
100478a6:	4013      	ands	r3, r2
100478a8:	0019      	movs	r1, r3
100478aa:	693b      	ldr	r3, [r7, #16]
100478ac:	061a      	lsls	r2, r3, #24
100478ae:	4b2a      	ldr	r3, [pc, #168]	@ (10047958 <SystemInit+0x180>)
100478b0:	430a      	orrs	r2, r1
100478b2:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
100478b4:	4b28      	ldr	r3, [pc, #160]	@ (10047958 <SystemInit+0x180>)
100478b6:	68da      	ldr	r2, [r3, #12]
100478b8:	4b27      	ldr	r3, [pc, #156]	@ (10047958 <SystemInit+0x180>)
100478ba:	2180      	movs	r1, #128	@ 0x80
100478bc:	0409      	lsls	r1, r1, #16
100478be:	430a      	orrs	r2, r1
100478c0:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
100478c2:	4a26      	ldr	r2, [pc, #152]	@ (1004795c <SystemInit+0x184>)
100478c4:	2394      	movs	r3, #148	@ 0x94
100478c6:	58d3      	ldr	r3, [r2, r3]
100478c8:	4a2d      	ldr	r2, [pc, #180]	@ (10047980 <SystemInit+0x1a8>)
100478ca:	401a      	ands	r2, r3
100478cc:	68bb      	ldr	r3, [r7, #8]
100478ce:	0199      	lsls	r1, r3, #6
100478d0:	23f0      	movs	r3, #240	@ 0xf0
100478d2:	009b      	lsls	r3, r3, #2
100478d4:	400b      	ands	r3, r1
100478d6:	4921      	ldr	r1, [pc, #132]	@ (1004795c <SystemInit+0x184>)
100478d8:	4313      	orrs	r3, r2
100478da:	2294      	movs	r2, #148	@ 0x94
100478dc:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
100478de:	4a1f      	ldr	r2, [pc, #124]	@ (1004795c <SystemInit+0x184>)
100478e0:	2394      	movs	r3, #148	@ 0x94
100478e2:	58d3      	ldr	r3, [r2, r3]
100478e4:	491d      	ldr	r1, [pc, #116]	@ (1004795c <SystemInit+0x184>)
100478e6:	2220      	movs	r2, #32
100478e8:	4313      	orrs	r3, r2
100478ea:	2294      	movs	r2, #148	@ 0x94
100478ec:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
100478ee:	4a1b      	ldr	r2, [pc, #108]	@ (1004795c <SystemInit+0x184>)
100478f0:	2394      	movs	r3, #148	@ 0x94
100478f2:	58d3      	ldr	r3, [r2, r3]
100478f4:	4a23      	ldr	r2, [pc, #140]	@ (10047984 <SystemInit+0x1ac>)
100478f6:	401a      	ands	r2, r3
100478f8:	687b      	ldr	r3, [r7, #4]
100478fa:	02d9      	lsls	r1, r3, #11
100478fc:	23e0      	movs	r3, #224	@ 0xe0
100478fe:	019b      	lsls	r3, r3, #6
10047900:	400b      	ands	r3, r1
10047902:	4916      	ldr	r1, [pc, #88]	@ (1004795c <SystemInit+0x184>)
10047904:	4313      	orrs	r3, r2
10047906:	2294      	movs	r2, #148	@ 0x94
10047908:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
1004790a:	4a14      	ldr	r2, [pc, #80]	@ (1004795c <SystemInit+0x184>)
1004790c:	2394      	movs	r3, #148	@ 0x94
1004790e:	58d3      	ldr	r3, [r2, r3]
10047910:	4912      	ldr	r1, [pc, #72]	@ (1004795c <SystemInit+0x184>)
10047912:	2280      	movs	r2, #128	@ 0x80
10047914:	00d2      	lsls	r2, r2, #3
10047916:	4313      	orrs	r3, r2
10047918:	2294      	movs	r2, #148	@ 0x94
1004791a:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
1004791c:	2317      	movs	r3, #23
1004791e:	18fb      	adds	r3, r7, r3
10047920:	2200      	movs	r2, #0
10047922:	701a      	strb	r2, [r3, #0]
10047924:	e00d      	b.n	10047942 <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
10047926:	2417      	movs	r4, #23
10047928:	193b      	adds	r3, r7, r4
1004792a:	781b      	ldrb	r3, [r3, #0]
1004792c:	b25b      	sxtb	r3, r3
1004792e:	2103      	movs	r1, #3
10047930:	0018      	movs	r0, r3
10047932:	f7ff fed1 	bl	100476d8 <__NVIC_SetPriority>
  for (i=0; i<32; i++)
10047936:	0021      	movs	r1, r4
10047938:	187b      	adds	r3, r7, r1
1004793a:	781a      	ldrb	r2, [r3, #0]
1004793c:	187b      	adds	r3, r7, r1
1004793e:	3201      	adds	r2, #1
10047940:	701a      	strb	r2, [r3, #0]
10047942:	2317      	movs	r3, #23
10047944:	18fb      	adds	r3, r7, r3
10047946:	781b      	ldrb	r3, [r3, #0]
10047948:	2b1f      	cmp	r3, #31
1004794a:	d9ec      	bls.n	10047926 <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
1004794c:	b662      	cpsie	i
}
1004794e:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
10047950:	46c0      	nop			@ (mov r8, r8)
10047952:	46bd      	mov	sp, r7
10047954:	b007      	add	sp, #28
10047956:	bd90      	pop	{r4, r7, pc}
10047958:	48400000 	.word	0x48400000
1004795c:	48500000 	.word	0x48500000
10047960:	20000004 	.word	0x20000004
10047964:	e000ed00 	.word	0xe000ed00
10047968:	10040000 	.word	0x10040000
1004796c:	fffffeff 	.word	0xfffffeff
10047970:	fffffbff 	.word	0xfffffbff
10047974:	10001ef8 	.word	0x10001ef8
10047978:	fcbceccc 	.word	0xfcbceccc
1004797c:	c0ffffff 	.word	0xc0ffffff
10047980:	fffffc3f 	.word	0xfffffc3f
10047984:	ffffc7ff 	.word	0xffffc7ff

10047988 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10047988:	b580      	push	{r7, lr}
1004798a:	b082      	sub	sp, #8
1004798c:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
1004798e:	4b13      	ldr	r3, [pc, #76]	@ (100479dc <SystemCoreClockUpdate+0x54>)
10047990:	689b      	ldr	r3, [r3, #8]
10047992:	085b      	lsrs	r3, r3, #1
10047994:	b2da      	uxtb	r2, r3
10047996:	1dfb      	adds	r3, r7, #7
10047998:	2101      	movs	r1, #1
1004799a:	400a      	ands	r2, r1
1004799c:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
1004799e:	4b0f      	ldr	r3, [pc, #60]	@ (100479dc <SystemCoreClockUpdate+0x54>)
100479a0:	689b      	ldr	r3, [r3, #8]
100479a2:	0a1b      	lsrs	r3, r3, #8
100479a4:	b2da      	uxtb	r2, r3
100479a6:	1dbb      	adds	r3, r7, #6
100479a8:	2107      	movs	r1, #7
100479aa:	400a      	ands	r2, r1
100479ac:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
100479ae:	1dfb      	adds	r3, r7, #7
100479b0:	781b      	ldrb	r3, [r3, #0]
100479b2:	2b00      	cmp	r3, #0
100479b4:	d007      	beq.n	100479c6 <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
100479b6:	1dbb      	adds	r3, r7, #6
100479b8:	781b      	ldrb	r3, [r3, #0]
100479ba:	3b01      	subs	r3, #1
100479bc:	4a08      	ldr	r2, [pc, #32]	@ (100479e0 <SystemCoreClockUpdate+0x58>)
100479be:	40da      	lsrs	r2, r3
100479c0:	4b08      	ldr	r3, [pc, #32]	@ (100479e4 <SystemCoreClockUpdate+0x5c>)
100479c2:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
100479c4:	e005      	b.n	100479d2 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
100479c6:	1dbb      	adds	r3, r7, #6
100479c8:	781b      	ldrb	r3, [r3, #0]
100479ca:	4a07      	ldr	r2, [pc, #28]	@ (100479e8 <SystemCoreClockUpdate+0x60>)
100479cc:	40da      	lsrs	r2, r3
100479ce:	4b05      	ldr	r3, [pc, #20]	@ (100479e4 <SystemCoreClockUpdate+0x5c>)
100479d0:	601a      	str	r2, [r3, #0]
}
100479d2:	46c0      	nop			@ (mov r8, r8)
100479d4:	46bd      	mov	sp, r7
100479d6:	b002      	add	sp, #8
100479d8:	bd80      	pop	{r7, pc}
100479da:	46c0      	nop			@ (mov r8, r8)
100479dc:	48400000 	.word	0x48400000
100479e0:	01e84800 	.word	0x01e84800
100479e4:	2000270c 	.word	0x2000270c
100479e8:	03d09000 	.word	0x03d09000

100479ec <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
100479ec:	4810      	ldr	r0, [pc, #64]	@ (10047a30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
100479ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
100479f0:	f7ff fef2 	bl	100477d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
100479f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100479f6:	e003      	b.n	10047a00 <LoopCopyDataInit>

100479f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
100479f8:	4b0e      	ldr	r3, [pc, #56]	@ (10047a34 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100479fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
100479fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
100479fe:	3104      	adds	r1, #4

10047a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10047a00:	480d      	ldr	r0, [pc, #52]	@ (10047a38 <LoopForever+0xa>)
  ldr  r3, =_edata
10047a02:	4b0e      	ldr	r3, [pc, #56]	@ (10047a3c <LoopForever+0xe>)
  adds  r2, r0, r1
10047a04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10047a06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10047a08:	d3f6      	bcc.n	100479f8 <CopyDataInit>
  ldr  r2, =_sbss
10047a0a:	4a0d      	ldr	r2, [pc, #52]	@ (10047a40 <LoopForever+0x12>)
  b  LoopFillZerobss
10047a0c:	e002      	b.n	10047a14 <LoopFillZerobss>

10047a0e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10047a0e:	2300      	movs	r3, #0
  str  r3, [r2]
10047a10:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047a12:	3204      	adds	r2, #4

10047a14 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10047a14:	4b0b      	ldr	r3, [pc, #44]	@ (10047a44 <LoopForever+0x16>)
  cmp  r2, r3
10047a16:	429a      	cmp	r2, r3
  bcc  FillZerobss
10047a18:	d3f9      	bcc.n	10047a0e <FillZerobss>
  ldr  r2, =_sbssblue
10047a1a:	4a0b      	ldr	r2, [pc, #44]	@ (10047a48 <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10047a1c:	e002      	b.n	10047a24 <LoopFillZeroBlueRam>

10047a1e <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10047a1e:	2300      	movs	r3, #0
  str  r3, [r2]
10047a20:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10047a22:	3204      	adds	r2, #4

10047a24 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10047a24:	4b09      	ldr	r3, [pc, #36]	@ (10047a4c <LoopForever+0x1e>)
  cmp  r2, r3
10047a26:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10047a28:	d3f9      	bcc.n	10047a1e <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10047a2a:	f7ff fa2d 	bl	10046e88 <main>

10047a2e <LoopForever>:

LoopForever:
    b LoopForever
10047a2e:	e7fe      	b.n	10047a2e <LoopForever>
   ldr   r0, =_estack
10047a30:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10047a34:	10069cdc 	.word	0x10069cdc
  ldr  r0, =_sdata
10047a38:	2000260c 	.word	0x2000260c
  ldr  r3, =_edata
10047a3c:	20002908 	.word	0x20002908
  ldr  r2, =_sbss
10047a40:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10047a44:	2000260c 	.word	0x2000260c
  ldr  r2, =_sbssblue
10047a48:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10047a4c:	20000194 	.word	0x20000194

10047a50 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10047a50:	e7fe      	b.n	10047a50 <ADC_IRQHandler>
	...

10047a54 <LL_PWR_IsEnabledPUPDCfg>:
  * @brief  Check if pull-up and pull-down configuration is enabled
  * @rmtoll CR1          APC           LL_PWR_IsEnabledPUPDCfg
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
{
10047a54:	b580      	push	{r7, lr}
10047a56:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10047a58:	4b05      	ldr	r3, [pc, #20]	@ (10047a70 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
10047a5a:	681b      	ldr	r3, [r3, #0]
10047a5c:	2210      	movs	r2, #16
10047a5e:	4013      	ands	r3, r2
10047a60:	2b10      	cmp	r3, #16
10047a62:	d101      	bne.n	10047a68 <LL_PWR_IsEnabledPUPDCfg+0x14>
10047a64:	2301      	movs	r3, #1
10047a66:	e000      	b.n	10047a6a <LL_PWR_IsEnabledPUPDCfg+0x16>
10047a68:	2300      	movs	r3, #0
}
10047a6a:	0018      	movs	r0, r3
10047a6c:	46bd      	mov	sp, r7
10047a6e:	bd80      	pop	{r7, pc}
10047a70:	48500000 	.word	0x48500000

10047a74 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10047a74:	b580      	push	{r7, lr}
10047a76:	b082      	sub	sp, #8
10047a78:	af00      	add	r7, sp, #0
10047a7a:	6078      	str	r0, [r7, #4]
10047a7c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10047a7e:	687b      	ldr	r3, [r7, #4]
10047a80:	3304      	adds	r3, #4
10047a82:	681a      	ldr	r2, [r3, #0]
10047a84:	683b      	ldr	r3, [r7, #0]
10047a86:	43d9      	mvns	r1, r3
10047a88:	687b      	ldr	r3, [r7, #4]
10047a8a:	3304      	adds	r3, #4
10047a8c:	400a      	ands	r2, r1
10047a8e:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10047a90:	687b      	ldr	r3, [r7, #4]
10047a92:	6819      	ldr	r1, [r3, #0]
10047a94:	687b      	ldr	r3, [r7, #4]
10047a96:	683a      	ldr	r2, [r7, #0]
10047a98:	430a      	orrs	r2, r1
10047a9a:	601a      	str	r2, [r3, #0]
}
10047a9c:	46c0      	nop			@ (mov r8, r8)
10047a9e:	46bd      	mov	sp, r7
10047aa0:	b002      	add	sp, #8
10047aa2:	bd80      	pop	{r7, pc}

10047aa4 <LL_AHB1_GRP1_EnableClock>:
{
10047aa4:	b580      	push	{r7, lr}
10047aa6:	b084      	sub	sp, #16
10047aa8:	af00      	add	r7, sp, #0
10047aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10047aac:	4b07      	ldr	r3, [pc, #28]	@ (10047acc <LL_AHB1_GRP1_EnableClock+0x28>)
10047aae:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10047ab0:	4b06      	ldr	r3, [pc, #24]	@ (10047acc <LL_AHB1_GRP1_EnableClock+0x28>)
10047ab2:	687a      	ldr	r2, [r7, #4]
10047ab4:	430a      	orrs	r2, r1
10047ab6:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10047ab8:	4b04      	ldr	r3, [pc, #16]	@ (10047acc <LL_AHB1_GRP1_EnableClock+0x28>)
10047aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10047abc:	687a      	ldr	r2, [r7, #4]
10047abe:	4013      	ands	r3, r2
10047ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10047ac2:	68fb      	ldr	r3, [r7, #12]
}
10047ac4:	46c0      	nop			@ (mov r8, r8)
10047ac6:	46bd      	mov	sp, r7
10047ac8:	b004      	add	sp, #16
10047aca:	bd80      	pop	{r7, pc}
10047acc:	48400000 	.word	0x48400000

10047ad0 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10047ad0:	b590      	push	{r4, r7, lr}
10047ad2:	b089      	sub	sp, #36	@ 0x24
10047ad4:	af00      	add	r7, sp, #0
10047ad6:	0002      	movs	r2, r0
10047ad8:	1dfb      	adds	r3, r7, #7
10047ada:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10047adc:	1dfb      	adds	r3, r7, #7
10047ade:	781b      	ldrb	r3, [r3, #0]
10047ae0:	2b00      	cmp	r3, #0
10047ae2:	d103      	bne.n	10047aec <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10047ae4:	2008      	movs	r0, #8
10047ae6:	f7ff ffdd 	bl	10047aa4 <LL_AHB1_GRP1_EnableClock>
10047aea:	e00a      	b.n	10047b02 <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10047aec:	1dfb      	adds	r3, r7, #7
10047aee:	781b      	ldrb	r3, [r3, #0]
10047af0:	2b01      	cmp	r3, #1
10047af2:	d103      	bne.n	10047afc <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10047af4:	2008      	movs	r0, #8
10047af6:	f7ff ffd5 	bl	10047aa4 <LL_AHB1_GRP1_EnableClock>
10047afa:	e002      	b.n	10047b02 <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10047afc:	2008      	movs	r0, #8
10047afe:	f7ff ffd1 	bl	10047aa4 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
10047b02:	1dfb      	adds	r3, r7, #7
10047b04:	781a      	ldrb	r2, [r3, #0]
10047b06:	4b28      	ldr	r3, [pc, #160]	@ (10047ba8 <BSP_LED_Init+0xd8>)
10047b08:	0052      	lsls	r2, r2, #1
10047b0a:	5ad3      	ldrh	r3, [r2, r3]
10047b0c:	001a      	movs	r2, r3
10047b0e:	240c      	movs	r4, #12
10047b10:	193b      	adds	r3, r7, r4
10047b12:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10047b14:	193b      	adds	r3, r7, r4
10047b16:	2201      	movs	r2, #1
10047b18:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
10047b1a:	193b      	adds	r3, r7, r4
10047b1c:	2201      	movs	r2, #1
10047b1e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10047b20:	193b      	adds	r3, r7, r4
10047b22:	2202      	movs	r2, #2
10047b24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
10047b26:	1dfb      	adds	r3, r7, #7
10047b28:	781a      	ldrb	r2, [r3, #0]
10047b2a:	4b20      	ldr	r3, [pc, #128]	@ (10047bac <BSP_LED_Init+0xdc>)
10047b2c:	0092      	lsls	r2, r2, #2
10047b2e:	58d3      	ldr	r3, [r2, r3]
10047b30:	193a      	adds	r2, r7, r4
10047b32:	0011      	movs	r1, r2
10047b34:	0018      	movs	r0, r3
10047b36:	f000 fbc5 	bl	100482c4 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10047b3a:	f7ff ff8b 	bl	10047a54 <LL_PWR_IsEnabledPUPDCfg>
10047b3e:	1e03      	subs	r3, r0, #0
10047b40:	d01f      	beq.n	10047b82 <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
10047b42:	1dfb      	adds	r3, r7, #7
10047b44:	781a      	ldrb	r2, [r3, #0]
10047b46:	4b19      	ldr	r3, [pc, #100]	@ (10047bac <BSP_LED_Init+0xdc>)
10047b48:	0092      	lsls	r2, r2, #2
10047b4a:	58d2      	ldr	r2, [r2, r3]
10047b4c:	2390      	movs	r3, #144	@ 0x90
10047b4e:	05db      	lsls	r3, r3, #23
10047b50:	429a      	cmp	r2, r3
10047b52:	d106      	bne.n	10047b62 <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10047b54:	193b      	adds	r3, r7, r4
10047b56:	681b      	ldr	r3, [r3, #0]
10047b58:	4a15      	ldr	r2, [pc, #84]	@ (10047bb0 <BSP_LED_Init+0xe0>)
10047b5a:	0019      	movs	r1, r3
10047b5c:	0010      	movs	r0, r2
10047b5e:	f7ff ff89 	bl	10047a74 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
10047b62:	1dfb      	adds	r3, r7, #7
10047b64:	781a      	ldrb	r2, [r3, #0]
10047b66:	4b11      	ldr	r3, [pc, #68]	@ (10047bac <BSP_LED_Init+0xdc>)
10047b68:	0092      	lsls	r2, r2, #2
10047b6a:	58d3      	ldr	r3, [r2, r3]
10047b6c:	4a11      	ldr	r2, [pc, #68]	@ (10047bb4 <BSP_LED_Init+0xe4>)
10047b6e:	4293      	cmp	r3, r2
10047b70:	d107      	bne.n	10047b82 <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10047b72:	230c      	movs	r3, #12
10047b74:	18fb      	adds	r3, r7, r3
10047b76:	681b      	ldr	r3, [r3, #0]
10047b78:	4a0f      	ldr	r2, [pc, #60]	@ (10047bb8 <BSP_LED_Init+0xe8>)
10047b7a:	0019      	movs	r1, r3
10047b7c:	0010      	movs	r0, r2
10047b7e:	f7ff ff79 	bl	10047a74 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10047b82:	1dfb      	adds	r3, r7, #7
10047b84:	781a      	ldrb	r2, [r3, #0]
10047b86:	4b09      	ldr	r3, [pc, #36]	@ (10047bac <BSP_LED_Init+0xdc>)
10047b88:	0092      	lsls	r2, r2, #2
10047b8a:	58d0      	ldr	r0, [r2, r3]
10047b8c:	1dfb      	adds	r3, r7, #7
10047b8e:	781a      	ldrb	r2, [r3, #0]
10047b90:	4b05      	ldr	r3, [pc, #20]	@ (10047ba8 <BSP_LED_Init+0xd8>)
10047b92:	0052      	lsls	r2, r2, #1
10047b94:	5ad3      	ldrh	r3, [r2, r3]
10047b96:	2201      	movs	r2, #1
10047b98:	0019      	movs	r1, r3
10047b9a:	f000 fe38 	bl	1004880e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10047b9e:	2300      	movs	r3, #0
}
10047ba0:	0018      	movs	r0, r3
10047ba2:	46bd      	mov	sp, r7
10047ba4:	b009      	add	sp, #36	@ 0x24
10047ba6:	bd90      	pop	{r4, r7, pc}
10047ba8:	20002710 	.word	0x20002710
10047bac:	20002718 	.word	0x20002718
10047bb0:	48500020 	.word	0x48500020
10047bb4:	48100000 	.word	0x48100000
10047bb8:	48500028 	.word	0x48500028

10047bbc <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10047bbc:	b580      	push	{r7, lr}
10047bbe:	b082      	sub	sp, #8
10047bc0:	af00      	add	r7, sp, #0
10047bc2:	0002      	movs	r2, r0
10047bc4:	1dfb      	adds	r3, r7, #7
10047bc6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10047bc8:	1dfb      	adds	r3, r7, #7
10047bca:	781a      	ldrb	r2, [r3, #0]
10047bcc:	4b08      	ldr	r3, [pc, #32]	@ (10047bf0 <BSP_LED_On+0x34>)
10047bce:	0092      	lsls	r2, r2, #2
10047bd0:	58d0      	ldr	r0, [r2, r3]
10047bd2:	1dfb      	adds	r3, r7, #7
10047bd4:	781a      	ldrb	r2, [r3, #0]
10047bd6:	4b07      	ldr	r3, [pc, #28]	@ (10047bf4 <BSP_LED_On+0x38>)
10047bd8:	0052      	lsls	r2, r2, #1
10047bda:	5ad3      	ldrh	r3, [r2, r3]
10047bdc:	2200      	movs	r2, #0
10047bde:	0019      	movs	r1, r3
10047be0:	f000 fe15 	bl	1004880e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10047be4:	2300      	movs	r3, #0
}
10047be6:	0018      	movs	r0, r3
10047be8:	46bd      	mov	sp, r7
10047bea:	b002      	add	sp, #8
10047bec:	bd80      	pop	{r7, pc}
10047bee:	46c0      	nop			@ (mov r8, r8)
10047bf0:	20002718 	.word	0x20002718
10047bf4:	20002710 	.word	0x20002710

10047bf8 <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
10047bf8:	b580      	push	{r7, lr}
10047bfa:	b082      	sub	sp, #8
10047bfc:	af00      	add	r7, sp, #0
10047bfe:	0002      	movs	r2, r0
10047c00:	1dfb      	adds	r3, r7, #7
10047c02:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10047c04:	1dfb      	adds	r3, r7, #7
10047c06:	781a      	ldrb	r2, [r3, #0]
10047c08:	4b08      	ldr	r3, [pc, #32]	@ (10047c2c <BSP_LED_Off+0x34>)
10047c0a:	0092      	lsls	r2, r2, #2
10047c0c:	58d0      	ldr	r0, [r2, r3]
10047c0e:	1dfb      	adds	r3, r7, #7
10047c10:	781a      	ldrb	r2, [r3, #0]
10047c12:	4b07      	ldr	r3, [pc, #28]	@ (10047c30 <BSP_LED_Off+0x38>)
10047c14:	0052      	lsls	r2, r2, #1
10047c16:	5ad3      	ldrh	r3, [r2, r3]
10047c18:	2201      	movs	r2, #1
10047c1a:	0019      	movs	r1, r3
10047c1c:	f000 fdf7 	bl	1004880e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10047c20:	2300      	movs	r3, #0
}
10047c22:	0018      	movs	r0, r3
10047c24:	46bd      	mov	sp, r7
10047c26:	b002      	add	sp, #8
10047c28:	bd80      	pop	{r7, pc}
10047c2a:	46c0      	nop			@ (mov r8, r8)
10047c2c:	20002718 	.word	0x20002718
10047c30:	20002710 	.word	0x20002710

10047c34 <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10047c34:	b580      	push	{r7, lr}
10047c36:	b082      	sub	sp, #8
10047c38:	af00      	add	r7, sp, #0
10047c3a:	6078      	str	r0, [r7, #4]
10047c3c:	000a      	movs	r2, r1
10047c3e:	1cbb      	adds	r3, r7, #2
10047c40:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
10047c42:	1cbb      	adds	r3, r7, #2
10047c44:	881a      	ldrh	r2, [r3, #0]
10047c46:	687b      	ldr	r3, [r7, #4]
10047c48:	0011      	movs	r1, r2
10047c4a:	0018      	movs	r0, r3
10047c4c:	f000 fdfc 	bl	10048848 <HAL_GPIO_EXTI_IRQHandler>
}
10047c50:	46c0      	nop			@ (mov r8, r8)
10047c52:	46bd      	mov	sp, r7
10047c54:	b002      	add	sp, #8
10047c56:	bd80      	pop	{r7, pc}

10047c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10047c58:	b580      	push	{r7, lr}
10047c5a:	b082      	sub	sp, #8
10047c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10047c5e:	1dfb      	adds	r3, r7, #7
10047c60:	2200      	movs	r2, #0
10047c62:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10047c64:	2003      	movs	r0, #3
10047c66:	f000 f80f 	bl	10047c88 <HAL_InitTick>
10047c6a:	1e03      	subs	r3, r0, #0
10047c6c:	d003      	beq.n	10047c76 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10047c6e:	1dfb      	adds	r3, r7, #7
10047c70:	2201      	movs	r2, #1
10047c72:	701a      	strb	r2, [r3, #0]
10047c74:	e001      	b.n	10047c7a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10047c76:	f7ff faa9 	bl	100471cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
10047c7a:	1dfb      	adds	r3, r7, #7
10047c7c:	781b      	ldrb	r3, [r3, #0]
}
10047c7e:	0018      	movs	r0, r3
10047c80:	46bd      	mov	sp, r7
10047c82:	b002      	add	sp, #8
10047c84:	bd80      	pop	{r7, pc}
	...

10047c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10047c88:	b590      	push	{r4, r7, lr}
10047c8a:	b085      	sub	sp, #20
10047c8c:	af00      	add	r7, sp, #0
10047c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10047c90:	230f      	movs	r3, #15
10047c92:	18fb      	adds	r3, r7, r3
10047c94:	2200      	movs	r2, #0
10047c96:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10047c98:	4b1d      	ldr	r3, [pc, #116]	@ (10047d10 <HAL_InitTick+0x88>)
10047c9a:	781b      	ldrb	r3, [r3, #0]
10047c9c:	2b00      	cmp	r3, #0
10047c9e:	d02c      	beq.n	10047cfa <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10047ca0:	f005 fb66 	bl	1004d370 <HAL_RCC_GetSysClockFreq>
10047ca4:	0004      	movs	r4, r0
10047ca6:	4b1a      	ldr	r3, [pc, #104]	@ (10047d10 <HAL_InitTick+0x88>)
10047ca8:	781b      	ldrb	r3, [r3, #0]
10047caa:	0019      	movs	r1, r3
10047cac:	23fa      	movs	r3, #250	@ 0xfa
10047cae:	0098      	lsls	r0, r3, #2
10047cb0:	f7f8 fac6 	bl	10040240 <__udivsi3>
10047cb4:	0003      	movs	r3, r0
10047cb6:	0019      	movs	r1, r3
10047cb8:	0020      	movs	r0, r4
10047cba:	f7f8 fac1 	bl	10040240 <__udivsi3>
10047cbe:	0003      	movs	r3, r0
10047cc0:	0018      	movs	r0, r3
10047cc2:	f000 f944 	bl	10047f4e <HAL_SYSTICK_Config>
10047cc6:	1e03      	subs	r3, r0, #0
10047cc8:	d112      	bne.n	10047cf0 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10047cca:	687b      	ldr	r3, [r7, #4]
10047ccc:	2b03      	cmp	r3, #3
10047cce:	d80a      	bhi.n	10047ce6 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10047cd0:	6879      	ldr	r1, [r7, #4]
10047cd2:	2301      	movs	r3, #1
10047cd4:	425b      	negs	r3, r3
10047cd6:	2200      	movs	r2, #0
10047cd8:	0018      	movs	r0, r3
10047cda:	f000 f913 	bl	10047f04 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
10047cde:	4b0d      	ldr	r3, [pc, #52]	@ (10047d14 <HAL_InitTick+0x8c>)
10047ce0:	687a      	ldr	r2, [r7, #4]
10047ce2:	601a      	str	r2, [r3, #0]
10047ce4:	e00d      	b.n	10047d02 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10047ce6:	230f      	movs	r3, #15
10047ce8:	18fb      	adds	r3, r7, r3
10047cea:	2201      	movs	r2, #1
10047cec:	701a      	strb	r2, [r3, #0]
10047cee:	e008      	b.n	10047d02 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10047cf0:	230f      	movs	r3, #15
10047cf2:	18fb      	adds	r3, r7, r3
10047cf4:	2201      	movs	r2, #1
10047cf6:	701a      	strb	r2, [r3, #0]
10047cf8:	e003      	b.n	10047d02 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
10047cfa:	230f      	movs	r3, #15
10047cfc:	18fb      	adds	r3, r7, r3
10047cfe:	2201      	movs	r2, #1
10047d00:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10047d02:	230f      	movs	r3, #15
10047d04:	18fb      	adds	r3, r7, r3
10047d06:	781b      	ldrb	r3, [r3, #0]
}
10047d08:	0018      	movs	r0, r3
10047d0a:	46bd      	mov	sp, r7
10047d0c:	b005      	add	sp, #20
10047d0e:	bd90      	pop	{r4, r7, pc}
10047d10:	20002728 	.word	0x20002728
10047d14:	20002724 	.word	0x20002724

10047d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10047d18:	b580      	push	{r7, lr}
10047d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10047d1c:	4b05      	ldr	r3, [pc, #20]	@ (10047d34 <HAL_IncTick+0x1c>)
10047d1e:	781b      	ldrb	r3, [r3, #0]
10047d20:	001a      	movs	r2, r3
10047d22:	4b05      	ldr	r3, [pc, #20]	@ (10047d38 <HAL_IncTick+0x20>)
10047d24:	681b      	ldr	r3, [r3, #0]
10047d26:	18d2      	adds	r2, r2, r3
10047d28:	4b03      	ldr	r3, [pc, #12]	@ (10047d38 <HAL_IncTick+0x20>)
10047d2a:	601a      	str	r2, [r3, #0]
}
10047d2c:	46c0      	nop			@ (mov r8, r8)
10047d2e:	46bd      	mov	sp, r7
10047d30:	bd80      	pop	{r7, pc}
10047d32:	46c0      	nop			@ (mov r8, r8)
10047d34:	20002728 	.word	0x20002728
10047d38:	200021b0 	.word	0x200021b0

10047d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10047d3c:	b580      	push	{r7, lr}
10047d3e:	af00      	add	r7, sp, #0
  return uwTick;
10047d40:	4b02      	ldr	r3, [pc, #8]	@ (10047d4c <HAL_GetTick+0x10>)
10047d42:	681b      	ldr	r3, [r3, #0]
}
10047d44:	0018      	movs	r0, r3
10047d46:	46bd      	mov	sp, r7
10047d48:	bd80      	pop	{r7, pc}
10047d4a:	46c0      	nop			@ (mov r8, r8)
10047d4c:	200021b0 	.word	0x200021b0

10047d50 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
10047d50:	b580      	push	{r7, lr}
10047d52:	af00      	add	r7, sp, #0
  return uwTickPrio;
10047d54:	4b02      	ldr	r3, [pc, #8]	@ (10047d60 <HAL_GetTickPrio+0x10>)
10047d56:	681b      	ldr	r3, [r3, #0]
}
10047d58:	0018      	movs	r0, r3
10047d5a:	46bd      	mov	sp, r7
10047d5c:	bd80      	pop	{r7, pc}
10047d5e:	46c0      	nop			@ (mov r8, r8)
10047d60:	20002724 	.word	0x20002724

10047d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10047d64:	b580      	push	{r7, lr}
10047d66:	b084      	sub	sp, #16
10047d68:	af00      	add	r7, sp, #0
10047d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10047d6c:	f7ff ffe6 	bl	10047d3c <HAL_GetTick>
10047d70:	0003      	movs	r3, r0
10047d72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
10047d74:	687b      	ldr	r3, [r7, #4]
10047d76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10047d78:	68fb      	ldr	r3, [r7, #12]
10047d7a:	3301      	adds	r3, #1
10047d7c:	d005      	beq.n	10047d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10047d7e:	4b0a      	ldr	r3, [pc, #40]	@ (10047da8 <HAL_Delay+0x44>)
10047d80:	781b      	ldrb	r3, [r3, #0]
10047d82:	001a      	movs	r2, r3
10047d84:	68fb      	ldr	r3, [r7, #12]
10047d86:	189b      	adds	r3, r3, r2
10047d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10047d8a:	46c0      	nop			@ (mov r8, r8)
10047d8c:	f7ff ffd6 	bl	10047d3c <HAL_GetTick>
10047d90:	0002      	movs	r2, r0
10047d92:	68bb      	ldr	r3, [r7, #8]
10047d94:	1ad3      	subs	r3, r2, r3
10047d96:	68fa      	ldr	r2, [r7, #12]
10047d98:	429a      	cmp	r2, r3
10047d9a:	d8f7      	bhi.n	10047d8c <HAL_Delay+0x28>
  {
  }
}
10047d9c:	46c0      	nop			@ (mov r8, r8)
10047d9e:	46c0      	nop			@ (mov r8, r8)
10047da0:	46bd      	mov	sp, r7
10047da2:	b004      	add	sp, #16
10047da4:	bd80      	pop	{r7, pc}
10047da6:	46c0      	nop			@ (mov r8, r8)
10047da8:	20002728 	.word	0x20002728

10047dac <__NVIC_EnableIRQ>:
{
10047dac:	b580      	push	{r7, lr}
10047dae:	b082      	sub	sp, #8
10047db0:	af00      	add	r7, sp, #0
10047db2:	0002      	movs	r2, r0
10047db4:	1dfb      	adds	r3, r7, #7
10047db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10047db8:	1dfb      	adds	r3, r7, #7
10047dba:	781b      	ldrb	r3, [r3, #0]
10047dbc:	2b7f      	cmp	r3, #127	@ 0x7f
10047dbe:	d809      	bhi.n	10047dd4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10047dc0:	1dfb      	adds	r3, r7, #7
10047dc2:	781b      	ldrb	r3, [r3, #0]
10047dc4:	001a      	movs	r2, r3
10047dc6:	231f      	movs	r3, #31
10047dc8:	401a      	ands	r2, r3
10047dca:	4b04      	ldr	r3, [pc, #16]	@ (10047ddc <__NVIC_EnableIRQ+0x30>)
10047dcc:	2101      	movs	r1, #1
10047dce:	4091      	lsls	r1, r2
10047dd0:	000a      	movs	r2, r1
10047dd2:	601a      	str	r2, [r3, #0]
}
10047dd4:	46c0      	nop			@ (mov r8, r8)
10047dd6:	46bd      	mov	sp, r7
10047dd8:	b002      	add	sp, #8
10047dda:	bd80      	pop	{r7, pc}
10047ddc:	e000e100 	.word	0xe000e100

10047de0 <__NVIC_SetPriority>:
{
10047de0:	b590      	push	{r4, r7, lr}
10047de2:	b083      	sub	sp, #12
10047de4:	af00      	add	r7, sp, #0
10047de6:	0002      	movs	r2, r0
10047de8:	6039      	str	r1, [r7, #0]
10047dea:	1dfb      	adds	r3, r7, #7
10047dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10047dee:	1dfb      	adds	r3, r7, #7
10047df0:	781b      	ldrb	r3, [r3, #0]
10047df2:	2b7f      	cmp	r3, #127	@ 0x7f
10047df4:	d828      	bhi.n	10047e48 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047df6:	4a2f      	ldr	r2, [pc, #188]	@ (10047eb4 <__NVIC_SetPriority+0xd4>)
10047df8:	1dfb      	adds	r3, r7, #7
10047dfa:	781b      	ldrb	r3, [r3, #0]
10047dfc:	b25b      	sxtb	r3, r3
10047dfe:	089b      	lsrs	r3, r3, #2
10047e00:	33c0      	adds	r3, #192	@ 0xc0
10047e02:	009b      	lsls	r3, r3, #2
10047e04:	589b      	ldr	r3, [r3, r2]
10047e06:	1dfa      	adds	r2, r7, #7
10047e08:	7812      	ldrb	r2, [r2, #0]
10047e0a:	0011      	movs	r1, r2
10047e0c:	2203      	movs	r2, #3
10047e0e:	400a      	ands	r2, r1
10047e10:	00d2      	lsls	r2, r2, #3
10047e12:	21ff      	movs	r1, #255	@ 0xff
10047e14:	4091      	lsls	r1, r2
10047e16:	000a      	movs	r2, r1
10047e18:	43d2      	mvns	r2, r2
10047e1a:	401a      	ands	r2, r3
10047e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10047e1e:	683b      	ldr	r3, [r7, #0]
10047e20:	019b      	lsls	r3, r3, #6
10047e22:	22ff      	movs	r2, #255	@ 0xff
10047e24:	401a      	ands	r2, r3
10047e26:	1dfb      	adds	r3, r7, #7
10047e28:	781b      	ldrb	r3, [r3, #0]
10047e2a:	0018      	movs	r0, r3
10047e2c:	2303      	movs	r3, #3
10047e2e:	4003      	ands	r3, r0
10047e30:	00db      	lsls	r3, r3, #3
10047e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047e34:	481f      	ldr	r0, [pc, #124]	@ (10047eb4 <__NVIC_SetPriority+0xd4>)
10047e36:	1dfb      	adds	r3, r7, #7
10047e38:	781b      	ldrb	r3, [r3, #0]
10047e3a:	b25b      	sxtb	r3, r3
10047e3c:	089b      	lsrs	r3, r3, #2
10047e3e:	430a      	orrs	r2, r1
10047e40:	33c0      	adds	r3, #192	@ 0xc0
10047e42:	009b      	lsls	r3, r3, #2
10047e44:	501a      	str	r2, [r3, r0]
}
10047e46:	e031      	b.n	10047eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047e48:	4a1b      	ldr	r2, [pc, #108]	@ (10047eb8 <__NVIC_SetPriority+0xd8>)
10047e4a:	1dfb      	adds	r3, r7, #7
10047e4c:	781b      	ldrb	r3, [r3, #0]
10047e4e:	0019      	movs	r1, r3
10047e50:	230f      	movs	r3, #15
10047e52:	400b      	ands	r3, r1
10047e54:	3b08      	subs	r3, #8
10047e56:	089b      	lsrs	r3, r3, #2
10047e58:	3306      	adds	r3, #6
10047e5a:	009b      	lsls	r3, r3, #2
10047e5c:	18d3      	adds	r3, r2, r3
10047e5e:	3304      	adds	r3, #4
10047e60:	681b      	ldr	r3, [r3, #0]
10047e62:	1dfa      	adds	r2, r7, #7
10047e64:	7812      	ldrb	r2, [r2, #0]
10047e66:	0011      	movs	r1, r2
10047e68:	2203      	movs	r2, #3
10047e6a:	400a      	ands	r2, r1
10047e6c:	00d2      	lsls	r2, r2, #3
10047e6e:	21ff      	movs	r1, #255	@ 0xff
10047e70:	4091      	lsls	r1, r2
10047e72:	000a      	movs	r2, r1
10047e74:	43d2      	mvns	r2, r2
10047e76:	401a      	ands	r2, r3
10047e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10047e7a:	683b      	ldr	r3, [r7, #0]
10047e7c:	019b      	lsls	r3, r3, #6
10047e7e:	22ff      	movs	r2, #255	@ 0xff
10047e80:	401a      	ands	r2, r3
10047e82:	1dfb      	adds	r3, r7, #7
10047e84:	781b      	ldrb	r3, [r3, #0]
10047e86:	0018      	movs	r0, r3
10047e88:	2303      	movs	r3, #3
10047e8a:	4003      	ands	r3, r0
10047e8c:	00db      	lsls	r3, r3, #3
10047e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047e90:	4809      	ldr	r0, [pc, #36]	@ (10047eb8 <__NVIC_SetPriority+0xd8>)
10047e92:	1dfb      	adds	r3, r7, #7
10047e94:	781b      	ldrb	r3, [r3, #0]
10047e96:	001c      	movs	r4, r3
10047e98:	230f      	movs	r3, #15
10047e9a:	4023      	ands	r3, r4
10047e9c:	3b08      	subs	r3, #8
10047e9e:	089b      	lsrs	r3, r3, #2
10047ea0:	430a      	orrs	r2, r1
10047ea2:	3306      	adds	r3, #6
10047ea4:	009b      	lsls	r3, r3, #2
10047ea6:	18c3      	adds	r3, r0, r3
10047ea8:	3304      	adds	r3, #4
10047eaa:	601a      	str	r2, [r3, #0]
}
10047eac:	46c0      	nop			@ (mov r8, r8)
10047eae:	46bd      	mov	sp, r7
10047eb0:	b003      	add	sp, #12
10047eb2:	bd90      	pop	{r4, r7, pc}
10047eb4:	e000e100 	.word	0xe000e100
10047eb8:	e000ed00 	.word	0xe000ed00

10047ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10047ebc:	b580      	push	{r7, lr}
10047ebe:	b082      	sub	sp, #8
10047ec0:	af00      	add	r7, sp, #0
10047ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10047ec4:	687b      	ldr	r3, [r7, #4]
10047ec6:	1e5a      	subs	r2, r3, #1
10047ec8:	2380      	movs	r3, #128	@ 0x80
10047eca:	045b      	lsls	r3, r3, #17
10047ecc:	429a      	cmp	r2, r3
10047ece:	d301      	bcc.n	10047ed4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10047ed0:	2301      	movs	r3, #1
10047ed2:	e010      	b.n	10047ef6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10047ed4:	4b0a      	ldr	r3, [pc, #40]	@ (10047f00 <SysTick_Config+0x44>)
10047ed6:	687a      	ldr	r2, [r7, #4]
10047ed8:	3a01      	subs	r2, #1
10047eda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10047edc:	2301      	movs	r3, #1
10047ede:	425b      	negs	r3, r3
10047ee0:	2103      	movs	r1, #3
10047ee2:	0018      	movs	r0, r3
10047ee4:	f7ff ff7c 	bl	10047de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10047ee8:	4b05      	ldr	r3, [pc, #20]	@ (10047f00 <SysTick_Config+0x44>)
10047eea:	2200      	movs	r2, #0
10047eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10047eee:	4b04      	ldr	r3, [pc, #16]	@ (10047f00 <SysTick_Config+0x44>)
10047ef0:	2207      	movs	r2, #7
10047ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10047ef4:	2300      	movs	r3, #0
}
10047ef6:	0018      	movs	r0, r3
10047ef8:	46bd      	mov	sp, r7
10047efa:	b002      	add	sp, #8
10047efc:	bd80      	pop	{r7, pc}
10047efe:	46c0      	nop			@ (mov r8, r8)
10047f00:	e000e010 	.word	0xe000e010

10047f04 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10047f04:	b580      	push	{r7, lr}
10047f06:	b084      	sub	sp, #16
10047f08:	af00      	add	r7, sp, #0
10047f0a:	60b9      	str	r1, [r7, #8]
10047f0c:	607a      	str	r2, [r7, #4]
10047f0e:	210f      	movs	r1, #15
10047f10:	187b      	adds	r3, r7, r1
10047f12:	1c02      	adds	r2, r0, #0
10047f14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10047f16:	68ba      	ldr	r2, [r7, #8]
10047f18:	187b      	adds	r3, r7, r1
10047f1a:	781b      	ldrb	r3, [r3, #0]
10047f1c:	b25b      	sxtb	r3, r3
10047f1e:	0011      	movs	r1, r2
10047f20:	0018      	movs	r0, r3
10047f22:	f7ff ff5d 	bl	10047de0 <__NVIC_SetPriority>
}
10047f26:	46c0      	nop			@ (mov r8, r8)
10047f28:	46bd      	mov	sp, r7
10047f2a:	b004      	add	sp, #16
10047f2c:	bd80      	pop	{r7, pc}

10047f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10047f2e:	b580      	push	{r7, lr}
10047f30:	b082      	sub	sp, #8
10047f32:	af00      	add	r7, sp, #0
10047f34:	0002      	movs	r2, r0
10047f36:	1dfb      	adds	r3, r7, #7
10047f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10047f3a:	1dfb      	adds	r3, r7, #7
10047f3c:	781b      	ldrb	r3, [r3, #0]
10047f3e:	b25b      	sxtb	r3, r3
10047f40:	0018      	movs	r0, r3
10047f42:	f7ff ff33 	bl	10047dac <__NVIC_EnableIRQ>
}
10047f46:	46c0      	nop			@ (mov r8, r8)
10047f48:	46bd      	mov	sp, r7
10047f4a:	b002      	add	sp, #8
10047f4c:	bd80      	pop	{r7, pc}

10047f4e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10047f4e:	b580      	push	{r7, lr}
10047f50:	b082      	sub	sp, #8
10047f52:	af00      	add	r7, sp, #0
10047f54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10047f56:	687b      	ldr	r3, [r7, #4]
10047f58:	0018      	movs	r0, r3
10047f5a:	f7ff ffaf 	bl	10047ebc <SysTick_Config>
10047f5e:	0003      	movs	r3, r0
}
10047f60:	0018      	movs	r0, r3
10047f62:	46bd      	mov	sp, r7
10047f64:	b002      	add	sp, #8
10047f66:	bd80      	pop	{r7, pc}

10047f68 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
10047f68:	b580      	push	{r7, lr}
10047f6a:	b084      	sub	sp, #16
10047f6c:	af00      	add	r7, sp, #0
10047f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10047f70:	210f      	movs	r1, #15
10047f72:	187b      	adds	r3, r7, r1
10047f74:	2200      	movs	r2, #0
10047f76:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
10047f78:	687b      	ldr	r3, [r7, #4]
10047f7a:	2225      	movs	r2, #37	@ 0x25
10047f7c:	5c9b      	ldrb	r3, [r3, r2]
10047f7e:	b2db      	uxtb	r3, r3
10047f80:	2b02      	cmp	r3, #2
10047f82:	d006      	beq.n	10047f92 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
10047f84:	687b      	ldr	r3, [r7, #4]
10047f86:	2204      	movs	r2, #4
10047f88:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
10047f8a:	187b      	adds	r3, r7, r1
10047f8c:	2201      	movs	r2, #1
10047f8e:	701a      	strb	r2, [r3, #0]
10047f90:	e02a      	b.n	10047fe8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10047f92:	687b      	ldr	r3, [r7, #4]
10047f94:	681b      	ldr	r3, [r3, #0]
10047f96:	681a      	ldr	r2, [r3, #0]
10047f98:	687b      	ldr	r3, [r7, #4]
10047f9a:	681b      	ldr	r3, [r3, #0]
10047f9c:	210e      	movs	r1, #14
10047f9e:	438a      	bics	r2, r1
10047fa0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
10047fa2:	687b      	ldr	r3, [r7, #4]
10047fa4:	681b      	ldr	r3, [r3, #0]
10047fa6:	681a      	ldr	r2, [r3, #0]
10047fa8:	687b      	ldr	r3, [r7, #4]
10047faa:	681b      	ldr	r3, [r3, #0]
10047fac:	2101      	movs	r1, #1
10047fae:	438a      	bics	r2, r1
10047fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10047fb2:	687b      	ldr	r3, [r7, #4]
10047fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10047fb6:	223c      	movs	r2, #60	@ 0x3c
10047fb8:	401a      	ands	r2, r3
10047fba:	687b      	ldr	r3, [r7, #4]
10047fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10047fbe:	2101      	movs	r1, #1
10047fc0:	4091      	lsls	r1, r2
10047fc2:	000a      	movs	r2, r1
10047fc4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
10047fc6:	687b      	ldr	r3, [r7, #4]
10047fc8:	2225      	movs	r2, #37	@ 0x25
10047fca:	2101      	movs	r1, #1
10047fcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10047fce:	687b      	ldr	r3, [r7, #4]
10047fd0:	2224      	movs	r2, #36	@ 0x24
10047fd2:	2100      	movs	r1, #0
10047fd4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
10047fd6:	687b      	ldr	r3, [r7, #4]
10047fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10047fda:	2b00      	cmp	r3, #0
10047fdc:	d004      	beq.n	10047fe8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
10047fde:	687b      	ldr	r3, [r7, #4]
10047fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10047fe2:	687a      	ldr	r2, [r7, #4]
10047fe4:	0010      	movs	r0, r2
10047fe6:	4798      	blx	r3
    }
  }
  return status;
10047fe8:	230f      	movs	r3, #15
10047fea:	18fb      	adds	r3, r7, r3
10047fec:	781b      	ldrb	r3, [r3, #0]
}
10047fee:	0018      	movs	r0, r3
10047ff0:	46bd      	mov	sp, r7
10047ff2:	b004      	add	sp, #16
10047ff4:	bd80      	pop	{r7, pc}

10047ff6 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
10047ff6:	b580      	push	{r7, lr}
10047ff8:	b082      	sub	sp, #8
10047ffa:	af00      	add	r7, sp, #0
10047ffc:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
10047ffe:	687b      	ldr	r3, [r7, #4]
10048000:	2225      	movs	r2, #37	@ 0x25
10048002:	5c9b      	ldrb	r3, [r3, r2]
10048004:	b2db      	uxtb	r3, r3
}
10048006:	0018      	movs	r0, r3
10048008:	46bd      	mov	sp, r7
1004800a:	b002      	add	sp, #8
1004800c:	bd80      	pop	{r7, pc}
	...

10048010 <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
10048010:	b5b0      	push	{r4, r5, r7, lr}
10048012:	b086      	sub	sp, #24
10048014:	af00      	add	r7, sp, #0
10048016:	60f8      	str	r0, [r7, #12]
10048018:	60b9      	str	r1, [r7, #8]
1004801a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
1004801c:	4b1d      	ldr	r3, [pc, #116]	@ (10048094 <HAL_FLASH_Program+0x84>)
1004801e:	781b      	ldrb	r3, [r3, #0]
10048020:	2b01      	cmp	r3, #1
10048022:	d101      	bne.n	10048028 <HAL_FLASH_Program+0x18>
10048024:	2302      	movs	r3, #2
10048026:	e031      	b.n	1004808c <HAL_FLASH_Program+0x7c>
10048028:	4b1a      	ldr	r3, [pc, #104]	@ (10048094 <HAL_FLASH_Program+0x84>)
1004802a:	2201      	movs	r2, #1
1004802c:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1004802e:	4b19      	ldr	r3, [pc, #100]	@ (10048094 <HAL_FLASH_Program+0x84>)
10048030:	2200      	movs	r2, #0
10048032:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10048034:	2517      	movs	r5, #23
10048036:	197c      	adds	r4, r7, r5
10048038:	23fa      	movs	r3, #250	@ 0xfa
1004803a:	009b      	lsls	r3, r3, #2
1004803c:	0018      	movs	r0, r3
1004803e:	f000 f82b 	bl	10048098 <FLASH_WaitForLastOperation>
10048042:	0003      	movs	r3, r0
10048044:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
10048046:	197b      	adds	r3, r7, r5
10048048:	781b      	ldrb	r3, [r3, #0]
1004804a:	2b00      	cmp	r3, #0
1004804c:	d118      	bne.n	10048080 <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
1004804e:	68fb      	ldr	r3, [r7, #12]
10048050:	2b00      	cmp	r3, #0
10048052:	d106      	bne.n	10048062 <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
10048054:	687a      	ldr	r2, [r7, #4]
10048056:	68bb      	ldr	r3, [r7, #8]
10048058:	0011      	movs	r1, r2
1004805a:	0018      	movs	r0, r3
1004805c:	f000 f856 	bl	1004810c <FLASH_Program_Word>
10048060:	e005      	b.n	1004806e <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
10048062:	687a      	ldr	r2, [r7, #4]
10048064:	68bb      	ldr	r3, [r7, #8]
10048066:	0011      	movs	r1, r2
10048068:	0018      	movs	r0, r3
1004806a:	f000 f871 	bl	10048150 <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004806e:	2317      	movs	r3, #23
10048070:	18fc      	adds	r4, r7, r3
10048072:	23fa      	movs	r3, #250	@ 0xfa
10048074:	009b      	lsls	r3, r3, #2
10048076:	0018      	movs	r0, r3
10048078:	f000 f80e 	bl	10048098 <FLASH_WaitForLastOperation>
1004807c:	0003      	movs	r3, r0
1004807e:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10048080:	4b04      	ldr	r3, [pc, #16]	@ (10048094 <HAL_FLASH_Program+0x84>)
10048082:	2200      	movs	r2, #0
10048084:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
10048086:	2317      	movs	r3, #23
10048088:	18fb      	adds	r3, r7, r3
1004808a:	781b      	ldrb	r3, [r3, #0]
}
1004808c:	0018      	movs	r0, r3
1004808e:	46bd      	mov	sp, r7
10048090:	b006      	add	sp, #24
10048092:	bdb0      	pop	{r4, r5, r7, pc}
10048094:	200021b4 	.word	0x200021b4

10048098 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
10048098:	b580      	push	{r7, lr}
1004809a:	b084      	sub	sp, #16
1004809c:	af00      	add	r7, sp, #0
1004809e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100480a0:	f7ff fe4c 	bl	10047d3c <HAL_GetTick>
100480a4:	0003      	movs	r3, r0
100480a6:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
100480a8:	e00c      	b.n	100480c4 <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
100480aa:	687b      	ldr	r3, [r7, #4]
100480ac:	3301      	adds	r3, #1
100480ae:	d009      	beq.n	100480c4 <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
100480b0:	f7ff fe44 	bl	10047d3c <HAL_GetTick>
100480b4:	0002      	movs	r2, r0
100480b6:	68fb      	ldr	r3, [r7, #12]
100480b8:	1ad3      	subs	r3, r2, r3
100480ba:	687a      	ldr	r2, [r7, #4]
100480bc:	429a      	cmp	r2, r3
100480be:	d801      	bhi.n	100480c4 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
100480c0:	2303      	movs	r3, #3
100480c2:	e01b      	b.n	100480fc <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
100480c4:	4b0f      	ldr	r3, [pc, #60]	@ (10048104 <FLASH_WaitForLastOperation+0x6c>)
100480c6:	691b      	ldr	r3, [r3, #16]
100480c8:	2201      	movs	r2, #1
100480ca:	4013      	ands	r3, r2
100480cc:	2b01      	cmp	r3, #1
100480ce:	d1ec      	bne.n	100480aa <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
100480d0:	4b0c      	ldr	r3, [pc, #48]	@ (10048104 <FLASH_WaitForLastOperation+0x6c>)
100480d2:	691b      	ldr	r3, [r3, #16]
100480d4:	220c      	movs	r2, #12
100480d6:	4013      	ands	r3, r2
100480d8:	2b0c      	cmp	r3, #12
100480da:	d10e      	bne.n	100480fa <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
100480dc:	4b09      	ldr	r3, [pc, #36]	@ (10048104 <FLASH_WaitForLastOperation+0x6c>)
100480de:	689a      	ldr	r2, [r3, #8]
100480e0:	4b09      	ldr	r3, [pc, #36]	@ (10048108 <FLASH_WaitForLastOperation+0x70>)
100480e2:	685b      	ldr	r3, [r3, #4]
100480e4:	431a      	orrs	r2, r3
100480e6:	4b08      	ldr	r3, [pc, #32]	@ (10048108 <FLASH_WaitForLastOperation+0x70>)
100480e8:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
100480ea:	4b06      	ldr	r3, [pc, #24]	@ (10048104 <FLASH_WaitForLastOperation+0x6c>)
100480ec:	691a      	ldr	r2, [r3, #16]
100480ee:	4b05      	ldr	r3, [pc, #20]	@ (10048104 <FLASH_WaitForLastOperation+0x6c>)
100480f0:	210c      	movs	r1, #12
100480f2:	430a      	orrs	r2, r1
100480f4:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
100480f6:	2301      	movs	r3, #1
100480f8:	e000      	b.n	100480fc <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
100480fa:	2300      	movs	r3, #0
}
100480fc:	0018      	movs	r0, r3
100480fe:	46bd      	mov	sp, r7
10048100:	b004      	add	sp, #16
10048102:	bd80      	pop	{r7, pc}
10048104:	40001000 	.word	0x40001000
10048108:	200021b4 	.word	0x200021b4

1004810c <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
1004810c:	b580      	push	{r7, lr}
1004810e:	b082      	sub	sp, #8
10048110:	af00      	add	r7, sp, #0
10048112:	6078      	str	r0, [r7, #4]
10048114:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10048116:	4b0c      	ldr	r3, [pc, #48]	@ (10048148 <FLASH_Program_Word+0x3c>)
10048118:	691a      	ldr	r2, [r3, #16]
1004811a:	4b0b      	ldr	r3, [pc, #44]	@ (10048148 <FLASH_Program_Word+0x3c>)
1004811c:	210f      	movs	r1, #15
1004811e:	430a      	orrs	r2, r1
10048120:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10048122:	687b      	ldr	r3, [r7, #4]
10048124:	4a09      	ldr	r2, [pc, #36]	@ (1004814c <FLASH_Program_Word+0x40>)
10048126:	4694      	mov	ip, r2
10048128:	4463      	add	r3, ip
1004812a:	089a      	lsrs	r2, r3, #2
1004812c:	4b06      	ldr	r3, [pc, #24]	@ (10048148 <FLASH_Program_Word+0x3c>)
1004812e:	0412      	lsls	r2, r2, #16
10048130:	0c12      	lsrs	r2, r2, #16
10048132:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10048134:	4b04      	ldr	r3, [pc, #16]	@ (10048148 <FLASH_Program_Word+0x3c>)
10048136:	683a      	ldr	r2, [r7, #0]
10048138:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
1004813a:	4b03      	ldr	r3, [pc, #12]	@ (10048148 <FLASH_Program_Word+0x3c>)
1004813c:	2233      	movs	r2, #51	@ 0x33
1004813e:	601a      	str	r2, [r3, #0]
}
10048140:	46c0      	nop			@ (mov r8, r8)
10048142:	46bd      	mov	sp, r7
10048144:	b002      	add	sp, #8
10048146:	bd80      	pop	{r7, pc}
10048148:	40001000 	.word	0x40001000
1004814c:	effc0000 	.word	0xeffc0000

10048150 <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
10048150:	b580      	push	{r7, lr}
10048152:	b084      	sub	sp, #16
10048154:	af00      	add	r7, sp, #0
10048156:	6078      	str	r0, [r7, #4]
10048158:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
1004815a:	683b      	ldr	r3, [r7, #0]
1004815c:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004815e:	4b17      	ldr	r3, [pc, #92]	@ (100481bc <FLASH_Program_Burst+0x6c>)
10048160:	691a      	ldr	r2, [r3, #16]
10048162:	4b16      	ldr	r3, [pc, #88]	@ (100481bc <FLASH_Program_Burst+0x6c>)
10048164:	210f      	movs	r1, #15
10048166:	430a      	orrs	r2, r1
10048168:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
1004816a:	687b      	ldr	r3, [r7, #4]
1004816c:	4a14      	ldr	r2, [pc, #80]	@ (100481c0 <FLASH_Program_Burst+0x70>)
1004816e:	4694      	mov	ip, r2
10048170:	4463      	add	r3, ip
10048172:	089a      	lsrs	r2, r3, #2
10048174:	4b11      	ldr	r3, [pc, #68]	@ (100481bc <FLASH_Program_Burst+0x6c>)
10048176:	0412      	lsls	r2, r2, #16
10048178:	0c12      	lsrs	r2, r2, #16
1004817a:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
1004817c:	4a0f      	ldr	r2, [pc, #60]	@ (100481bc <FLASH_Program_Burst+0x6c>)
1004817e:	68fb      	ldr	r3, [r7, #12]
10048180:	681b      	ldr	r3, [r3, #0]
10048182:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
10048184:	68fb      	ldr	r3, [r7, #12]
10048186:	3304      	adds	r3, #4
10048188:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
1004818a:	4a0c      	ldr	r2, [pc, #48]	@ (100481bc <FLASH_Program_Burst+0x6c>)
1004818c:	68fb      	ldr	r3, [r7, #12]
1004818e:	681b      	ldr	r3, [r3, #0]
10048190:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
10048192:	68fb      	ldr	r3, [r7, #12]
10048194:	3304      	adds	r3, #4
10048196:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
10048198:	4a08      	ldr	r2, [pc, #32]	@ (100481bc <FLASH_Program_Burst+0x6c>)
1004819a:	68fb      	ldr	r3, [r7, #12]
1004819c:	681b      	ldr	r3, [r3, #0]
1004819e:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
100481a0:	68fb      	ldr	r3, [r7, #12]
100481a2:	3304      	adds	r3, #4
100481a4:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
100481a6:	4a05      	ldr	r2, [pc, #20]	@ (100481bc <FLASH_Program_Burst+0x6c>)
100481a8:	68fb      	ldr	r3, [r7, #12]
100481aa:	681b      	ldr	r3, [r3, #0]
100481ac:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
100481ae:	4b03      	ldr	r3, [pc, #12]	@ (100481bc <FLASH_Program_Burst+0x6c>)
100481b0:	22cc      	movs	r2, #204	@ 0xcc
100481b2:	601a      	str	r2, [r3, #0]
}
100481b4:	46c0      	nop			@ (mov r8, r8)
100481b6:	46bd      	mov	sp, r7
100481b8:	b004      	add	sp, #16
100481ba:	bd80      	pop	{r7, pc}
100481bc:	40001000 	.word	0x40001000
100481c0:	effc0000 	.word	0xeffc0000

100481c4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
100481c4:	b5b0      	push	{r4, r5, r7, lr}
100481c6:	b084      	sub	sp, #16
100481c8:	af00      	add	r7, sp, #0
100481ca:	6078      	str	r0, [r7, #4]
100481cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
100481ce:	4b27      	ldr	r3, [pc, #156]	@ (1004826c <HAL_FLASHEx_Erase+0xa8>)
100481d0:	781b      	ldrb	r3, [r3, #0]
100481d2:	2b01      	cmp	r3, #1
100481d4:	d101      	bne.n	100481da <HAL_FLASHEx_Erase+0x16>
100481d6:	2302      	movs	r3, #2
100481d8:	e043      	b.n	10048262 <HAL_FLASHEx_Erase+0x9e>
100481da:	4b24      	ldr	r3, [pc, #144]	@ (1004826c <HAL_FLASHEx_Erase+0xa8>)
100481dc:	2201      	movs	r2, #1
100481de:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
100481e0:	4b22      	ldr	r3, [pc, #136]	@ (1004826c <HAL_FLASHEx_Erase+0xa8>)
100481e2:	2200      	movs	r2, #0
100481e4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
100481e6:	687b      	ldr	r3, [r7, #4]
100481e8:	681b      	ldr	r3, [r3, #0]
100481ea:	2bff      	cmp	r3, #255	@ 0xff
100481ec:	d10b      	bne.n	10048206 <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
100481ee:	f000 f83f 	bl	10048270 <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
100481f2:	230f      	movs	r3, #15
100481f4:	18fc      	adds	r4, r7, r3
100481f6:	23fa      	movs	r3, #250	@ 0xfa
100481f8:	009b      	lsls	r3, r3, #2
100481fa:	0018      	movs	r0, r3
100481fc:	f7ff ff4c 	bl	10048098 <FLASH_WaitForLastOperation>
10048200:	0003      	movs	r3, r0
10048202:	7023      	strb	r3, [r4, #0]
10048204:	e027      	b.n	10048256 <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
10048206:	683b      	ldr	r3, [r7, #0]
10048208:	2201      	movs	r2, #1
1004820a:	4252      	negs	r2, r2
1004820c:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
1004820e:	687b      	ldr	r3, [r7, #4]
10048210:	685b      	ldr	r3, [r3, #4]
10048212:	60bb      	str	r3, [r7, #8]
10048214:	e017      	b.n	10048246 <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
10048216:	68bb      	ldr	r3, [r7, #8]
10048218:	0018      	movs	r0, r3
1004821a:	f000 f839 	bl	10048290 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004821e:	250f      	movs	r5, #15
10048220:	197c      	adds	r4, r7, r5
10048222:	23fa      	movs	r3, #250	@ 0xfa
10048224:	009b      	lsls	r3, r3, #2
10048226:	0018      	movs	r0, r3
10048228:	f7ff ff36 	bl	10048098 <FLASH_WaitForLastOperation>
1004822c:	0003      	movs	r3, r0
1004822e:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
10048230:	197b      	adds	r3, r7, r5
10048232:	781b      	ldrb	r3, [r3, #0]
10048234:	2b00      	cmp	r3, #0
10048236:	d003      	beq.n	10048240 <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
10048238:	683b      	ldr	r3, [r7, #0]
1004823a:	68ba      	ldr	r2, [r7, #8]
1004823c:	601a      	str	r2, [r3, #0]
        break;
1004823e:	e00a      	b.n	10048256 <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
10048240:	68bb      	ldr	r3, [r7, #8]
10048242:	3301      	adds	r3, #1
10048244:	60bb      	str	r3, [r7, #8]
10048246:	687b      	ldr	r3, [r7, #4]
10048248:	685a      	ldr	r2, [r3, #4]
1004824a:	687b      	ldr	r3, [r7, #4]
1004824c:	689b      	ldr	r3, [r3, #8]
1004824e:	18d3      	adds	r3, r2, r3
10048250:	68ba      	ldr	r2, [r7, #8]
10048252:	429a      	cmp	r2, r3
10048254:	d3df      	bcc.n	10048216 <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10048256:	4b05      	ldr	r3, [pc, #20]	@ (1004826c <HAL_FLASHEx_Erase+0xa8>)
10048258:	2200      	movs	r2, #0
1004825a:	701a      	strb	r2, [r3, #0]

  return status;
1004825c:	230f      	movs	r3, #15
1004825e:	18fb      	adds	r3, r7, r3
10048260:	781b      	ldrb	r3, [r3, #0]
}
10048262:	0018      	movs	r0, r3
10048264:	46bd      	mov	sp, r7
10048266:	b004      	add	sp, #16
10048268:	bdb0      	pop	{r4, r5, r7, pc}
1004826a:	46c0      	nop			@ (mov r8, r8)
1004826c:	200021b4 	.word	0x200021b4

10048270 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
10048270:	b580      	push	{r7, lr}
10048272:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10048274:	4b05      	ldr	r3, [pc, #20]	@ (1004828c <FLASH_MassErase+0x1c>)
10048276:	691a      	ldr	r2, [r3, #16]
10048278:	4b04      	ldr	r3, [pc, #16]	@ (1004828c <FLASH_MassErase+0x1c>)
1004827a:	210f      	movs	r1, #15
1004827c:	430a      	orrs	r2, r1
1004827e:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
10048280:	4b02      	ldr	r3, [pc, #8]	@ (1004828c <FLASH_MassErase+0x1c>)
10048282:	2222      	movs	r2, #34	@ 0x22
10048284:	601a      	str	r2, [r3, #0]
}
10048286:	46c0      	nop			@ (mov r8, r8)
10048288:	46bd      	mov	sp, r7
1004828a:	bd80      	pop	{r7, pc}
1004828c:	40001000 	.word	0x40001000

10048290 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
10048290:	b580      	push	{r7, lr}
10048292:	b082      	sub	sp, #8
10048294:	af00      	add	r7, sp, #0
10048296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10048298:	4b09      	ldr	r3, [pc, #36]	@ (100482c0 <FLASH_PageErase+0x30>)
1004829a:	691a      	ldr	r2, [r3, #16]
1004829c:	4b08      	ldr	r3, [pc, #32]	@ (100482c0 <FLASH_PageErase+0x30>)
1004829e:	210f      	movs	r1, #15
100482a0:	430a      	orrs	r2, r1
100482a2:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
100482a4:	687b      	ldr	r3, [r7, #4]
100482a6:	02db      	lsls	r3, r3, #11
100482a8:	089a      	lsrs	r2, r3, #2
100482aa:	4b05      	ldr	r3, [pc, #20]	@ (100482c0 <FLASH_PageErase+0x30>)
100482ac:	0412      	lsls	r2, r2, #16
100482ae:	0c12      	lsrs	r2, r2, #16
100482b0:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
100482b2:	4b03      	ldr	r3, [pc, #12]	@ (100482c0 <FLASH_PageErase+0x30>)
100482b4:	2211      	movs	r2, #17
100482b6:	601a      	str	r2, [r3, #0]
}
100482b8:	46c0      	nop			@ (mov r8, r8)
100482ba:	46bd      	mov	sp, r7
100482bc:	b002      	add	sp, #8
100482be:	bd80      	pop	{r7, pc}
100482c0:	40001000 	.word	0x40001000

100482c4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100482c4:	b580      	push	{r7, lr}
100482c6:	b086      	sub	sp, #24
100482c8:	af00      	add	r7, sp, #0
100482ca:	6078      	str	r0, [r7, #4]
100482cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
100482ce:	2300      	movs	r3, #0
100482d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100482d2:	e190      	b.n	100485f6 <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
100482d4:	683b      	ldr	r3, [r7, #0]
100482d6:	681b      	ldr	r3, [r3, #0]
100482d8:	2101      	movs	r1, #1
100482da:	697a      	ldr	r2, [r7, #20]
100482dc:	4091      	lsls	r1, r2
100482de:	000a      	movs	r2, r1
100482e0:	4013      	ands	r3, r2
100482e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
100482e4:	68fb      	ldr	r3, [r7, #12]
100482e6:	2b00      	cmp	r3, #0
100482e8:	d100      	bne.n	100482ec <HAL_GPIO_Init+0x28>
100482ea:	e181      	b.n	100485f0 <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
100482ec:	683b      	ldr	r3, [r7, #0]
100482ee:	685b      	ldr	r3, [r3, #4]
100482f0:	2203      	movs	r2, #3
100482f2:	4013      	ands	r3, r2
100482f4:	2b01      	cmp	r3, #1
100482f6:	d005      	beq.n	10048304 <HAL_GPIO_Init+0x40>
100482f8:	683b      	ldr	r3, [r7, #0]
100482fa:	685b      	ldr	r3, [r3, #4]
100482fc:	2203      	movs	r2, #3
100482fe:	4013      	ands	r3, r2
10048300:	2b02      	cmp	r3, #2
10048302:	d130      	bne.n	10048366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10048304:	687b      	ldr	r3, [r7, #4]
10048306:	689b      	ldr	r3, [r3, #8]
10048308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
1004830a:	697b      	ldr	r3, [r7, #20]
1004830c:	005b      	lsls	r3, r3, #1
1004830e:	2203      	movs	r2, #3
10048310:	409a      	lsls	r2, r3
10048312:	0013      	movs	r3, r2
10048314:	43da      	mvns	r2, r3
10048316:	693b      	ldr	r3, [r7, #16]
10048318:	4013      	ands	r3, r2
1004831a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
1004831c:	683b      	ldr	r3, [r7, #0]
1004831e:	68da      	ldr	r2, [r3, #12]
10048320:	697b      	ldr	r3, [r7, #20]
10048322:	005b      	lsls	r3, r3, #1
10048324:	409a      	lsls	r2, r3
10048326:	0013      	movs	r3, r2
10048328:	693a      	ldr	r2, [r7, #16]
1004832a:	4313      	orrs	r3, r2
1004832c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004832e:	687b      	ldr	r3, [r7, #4]
10048330:	693a      	ldr	r2, [r7, #16]
10048332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10048334:	687b      	ldr	r3, [r7, #4]
10048336:	685b      	ldr	r3, [r3, #4]
10048338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
1004833a:	2201      	movs	r2, #1
1004833c:	697b      	ldr	r3, [r7, #20]
1004833e:	409a      	lsls	r2, r3
10048340:	0013      	movs	r3, r2
10048342:	43da      	mvns	r2, r3
10048344:	693b      	ldr	r3, [r7, #16]
10048346:	4013      	ands	r3, r2
10048348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
1004834a:	683b      	ldr	r3, [r7, #0]
1004834c:	685b      	ldr	r3, [r3, #4]
1004834e:	091b      	lsrs	r3, r3, #4
10048350:	2201      	movs	r2, #1
10048352:	401a      	ands	r2, r3
10048354:	697b      	ldr	r3, [r7, #20]
10048356:	409a      	lsls	r2, r3
10048358:	0013      	movs	r3, r2
1004835a:	693a      	ldr	r2, [r7, #16]
1004835c:	4313      	orrs	r3, r2
1004835e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
10048360:	687b      	ldr	r3, [r7, #4]
10048362:	693a      	ldr	r2, [r7, #16]
10048364:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10048366:	683b      	ldr	r3, [r7, #0]
10048368:	685b      	ldr	r3, [r3, #4]
1004836a:	2203      	movs	r2, #3
1004836c:	4013      	ands	r3, r2
1004836e:	2b03      	cmp	r3, #3
10048370:	d017      	beq.n	100483a2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
10048372:	687b      	ldr	r3, [r7, #4]
10048374:	68db      	ldr	r3, [r3, #12]
10048376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10048378:	697b      	ldr	r3, [r7, #20]
1004837a:	005b      	lsls	r3, r3, #1
1004837c:	2203      	movs	r2, #3
1004837e:	409a      	lsls	r2, r3
10048380:	0013      	movs	r3, r2
10048382:	43da      	mvns	r2, r3
10048384:	693b      	ldr	r3, [r7, #16]
10048386:	4013      	ands	r3, r2
10048388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
1004838a:	683b      	ldr	r3, [r7, #0]
1004838c:	689a      	ldr	r2, [r3, #8]
1004838e:	697b      	ldr	r3, [r7, #20]
10048390:	005b      	lsls	r3, r3, #1
10048392:	409a      	lsls	r2, r3
10048394:	0013      	movs	r3, r2
10048396:	693a      	ldr	r2, [r7, #16]
10048398:	4313      	orrs	r3, r2
1004839a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
1004839c:	687b      	ldr	r3, [r7, #4]
1004839e:	693a      	ldr	r2, [r7, #16]
100483a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
100483a2:	683b      	ldr	r3, [r7, #0]
100483a4:	685b      	ldr	r3, [r3, #4]
100483a6:	2203      	movs	r2, #3
100483a8:	4013      	ands	r3, r2
100483aa:	2b02      	cmp	r3, #2
100483ac:	d123      	bne.n	100483f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100483ae:	697b      	ldr	r3, [r7, #20]
100483b0:	08da      	lsrs	r2, r3, #3
100483b2:	687b      	ldr	r3, [r7, #4]
100483b4:	3208      	adds	r2, #8
100483b6:	0092      	lsls	r2, r2, #2
100483b8:	58d3      	ldr	r3, [r2, r3]
100483ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100483bc:	697b      	ldr	r3, [r7, #20]
100483be:	2207      	movs	r2, #7
100483c0:	4013      	ands	r3, r2
100483c2:	009b      	lsls	r3, r3, #2
100483c4:	220f      	movs	r2, #15
100483c6:	409a      	lsls	r2, r3
100483c8:	0013      	movs	r3, r2
100483ca:	43da      	mvns	r2, r3
100483cc:	693b      	ldr	r3, [r7, #16]
100483ce:	4013      	ands	r3, r2
100483d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100483d2:	683b      	ldr	r3, [r7, #0]
100483d4:	691a      	ldr	r2, [r3, #16]
100483d6:	697b      	ldr	r3, [r7, #20]
100483d8:	2107      	movs	r1, #7
100483da:	400b      	ands	r3, r1
100483dc:	009b      	lsls	r3, r3, #2
100483de:	409a      	lsls	r2, r3
100483e0:	0013      	movs	r3, r2
100483e2:	693a      	ldr	r2, [r7, #16]
100483e4:	4313      	orrs	r3, r2
100483e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100483e8:	697b      	ldr	r3, [r7, #20]
100483ea:	08da      	lsrs	r2, r3, #3
100483ec:	687b      	ldr	r3, [r7, #4]
100483ee:	3208      	adds	r2, #8
100483f0:	0092      	lsls	r2, r2, #2
100483f2:	6939      	ldr	r1, [r7, #16]
100483f4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100483f6:	687b      	ldr	r3, [r7, #4]
100483f8:	681b      	ldr	r3, [r3, #0]
100483fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
100483fc:	697b      	ldr	r3, [r7, #20]
100483fe:	005b      	lsls	r3, r3, #1
10048400:	2203      	movs	r2, #3
10048402:	409a      	lsls	r2, r3
10048404:	0013      	movs	r3, r2
10048406:	43da      	mvns	r2, r3
10048408:	693b      	ldr	r3, [r7, #16]
1004840a:	4013      	ands	r3, r2
1004840c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
1004840e:	683b      	ldr	r3, [r7, #0]
10048410:	685b      	ldr	r3, [r3, #4]
10048412:	2203      	movs	r2, #3
10048414:	401a      	ands	r2, r3
10048416:	697b      	ldr	r3, [r7, #20]
10048418:	005b      	lsls	r3, r3, #1
1004841a:	409a      	lsls	r2, r3
1004841c:	0013      	movs	r3, r2
1004841e:	693a      	ldr	r2, [r7, #16]
10048420:	4313      	orrs	r3, r2
10048422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10048424:	687b      	ldr	r3, [r7, #4]
10048426:	693a      	ldr	r2, [r7, #16]
10048428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
1004842a:	683b      	ldr	r3, [r7, #0]
1004842c:	685a      	ldr	r2, [r3, #4]
1004842e:	23c0      	movs	r3, #192	@ 0xc0
10048430:	029b      	lsls	r3, r3, #10
10048432:	4013      	ands	r3, r2
10048434:	d100      	bne.n	10048438 <HAL_GPIO_Init+0x174>
10048436:	e0db      	b.n	100485f0 <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10048438:	683b      	ldr	r3, [r7, #0]
1004843a:	685a      	ldr	r2, [r3, #4]
1004843c:	2380      	movs	r3, #128	@ 0x80
1004843e:	02db      	lsls	r3, r3, #11
10048440:	4013      	ands	r3, r2
10048442:	d030      	beq.n	100484a6 <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
10048444:	2380      	movs	r3, #128	@ 0x80
10048446:	05db      	lsls	r3, r3, #23
10048448:	68db      	ldr	r3, [r3, #12]
1004844a:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
1004844c:	687a      	ldr	r2, [r7, #4]
1004844e:	2390      	movs	r3, #144	@ 0x90
10048450:	05db      	lsls	r3, r3, #23
10048452:	429a      	cmp	r2, r3
10048454:	d111      	bne.n	1004847a <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10048456:	2201      	movs	r2, #1
10048458:	697b      	ldr	r3, [r7, #20]
1004845a:	409a      	lsls	r2, r3
1004845c:	0013      	movs	r3, r2
1004845e:	43db      	mvns	r3, r3
10048460:	001a      	movs	r2, r3
10048462:	693b      	ldr	r3, [r7, #16]
10048464:	4013      	ands	r3, r2
10048466:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10048468:	2201      	movs	r2, #1
1004846a:	697b      	ldr	r3, [r7, #20]
1004846c:	409a      	lsls	r2, r3
1004846e:	0013      	movs	r3, r2
10048470:	001a      	movs	r2, r3
10048472:	693b      	ldr	r3, [r7, #16]
10048474:	4313      	orrs	r3, r2
10048476:	613b      	str	r3, [r7, #16]
10048478:	e011      	b.n	1004849e <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
1004847a:	2201      	movs	r2, #1
1004847c:	697b      	ldr	r3, [r7, #20]
1004847e:	409a      	lsls	r2, r3
10048480:	0013      	movs	r3, r2
10048482:	041b      	lsls	r3, r3, #16
10048484:	43db      	mvns	r3, r3
10048486:	001a      	movs	r2, r3
10048488:	693b      	ldr	r3, [r7, #16]
1004848a:	4013      	ands	r3, r2
1004848c:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004848e:	2201      	movs	r2, #1
10048490:	697b      	ldr	r3, [r7, #20]
10048492:	409a      	lsls	r2, r3
10048494:	0013      	movs	r3, r2
10048496:	041b      	lsls	r3, r3, #16
10048498:	693a      	ldr	r2, [r7, #16]
1004849a:	4313      	orrs	r3, r2
1004849c:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
1004849e:	2380      	movs	r3, #128	@ 0x80
100484a0:	05db      	lsls	r3, r3, #23
100484a2:	693a      	ldr	r2, [r7, #16]
100484a4:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
100484a6:	683b      	ldr	r3, [r7, #0]
100484a8:	685a      	ldr	r2, [r3, #4]
100484aa:	2380      	movs	r3, #128	@ 0x80
100484ac:	035b      	lsls	r3, r3, #13
100484ae:	4013      	ands	r3, r2
100484b0:	d030      	beq.n	10048514 <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
100484b2:	2380      	movs	r3, #128	@ 0x80
100484b4:	05db      	lsls	r3, r3, #23
100484b6:	691b      	ldr	r3, [r3, #16]
100484b8:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100484ba:	687a      	ldr	r2, [r7, #4]
100484bc:	2390      	movs	r3, #144	@ 0x90
100484be:	05db      	lsls	r3, r3, #23
100484c0:	429a      	cmp	r2, r3
100484c2:	d111      	bne.n	100484e8 <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
100484c4:	2201      	movs	r2, #1
100484c6:	697b      	ldr	r3, [r7, #20]
100484c8:	409a      	lsls	r2, r3
100484ca:	0013      	movs	r3, r2
100484cc:	43db      	mvns	r3, r3
100484ce:	001a      	movs	r2, r3
100484d0:	693b      	ldr	r3, [r7, #16]
100484d2:	4013      	ands	r3, r2
100484d4:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100484d6:	2201      	movs	r2, #1
100484d8:	697b      	ldr	r3, [r7, #20]
100484da:	409a      	lsls	r2, r3
100484dc:	0013      	movs	r3, r2
100484de:	001a      	movs	r2, r3
100484e0:	693b      	ldr	r3, [r7, #16]
100484e2:	4313      	orrs	r3, r2
100484e4:	613b      	str	r3, [r7, #16]
100484e6:	e011      	b.n	1004850c <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100484e8:	2201      	movs	r2, #1
100484ea:	697b      	ldr	r3, [r7, #20]
100484ec:	409a      	lsls	r2, r3
100484ee:	0013      	movs	r3, r2
100484f0:	041b      	lsls	r3, r3, #16
100484f2:	43db      	mvns	r3, r3
100484f4:	001a      	movs	r2, r3
100484f6:	693b      	ldr	r3, [r7, #16]
100484f8:	4013      	ands	r3, r2
100484fa:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100484fc:	2201      	movs	r2, #1
100484fe:	697b      	ldr	r3, [r7, #20]
10048500:	409a      	lsls	r2, r3
10048502:	0013      	movs	r3, r2
10048504:	041b      	lsls	r3, r3, #16
10048506:	693a      	ldr	r2, [r7, #16]
10048508:	4313      	orrs	r3, r2
1004850a:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
1004850c:	2380      	movs	r3, #128	@ 0x80
1004850e:	05db      	lsls	r3, r3, #23
10048510:	693a      	ldr	r2, [r7, #16]
10048512:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10048514:	683b      	ldr	r3, [r7, #0]
10048516:	685a      	ldr	r2, [r3, #4]
10048518:	2380      	movs	r3, #128	@ 0x80
1004851a:	03db      	lsls	r3, r3, #15
1004851c:	4013      	ands	r3, r2
1004851e:	d030      	beq.n	10048582 <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
10048520:	2380      	movs	r3, #128	@ 0x80
10048522:	05db      	lsls	r3, r3, #23
10048524:	695b      	ldr	r3, [r3, #20]
10048526:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10048528:	687a      	ldr	r2, [r7, #4]
1004852a:	2390      	movs	r3, #144	@ 0x90
1004852c:	05db      	lsls	r3, r3, #23
1004852e:	429a      	cmp	r2, r3
10048530:	d111      	bne.n	10048556 <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
10048532:	2201      	movs	r2, #1
10048534:	697b      	ldr	r3, [r7, #20]
10048536:	409a      	lsls	r2, r3
10048538:	0013      	movs	r3, r2
1004853a:	43db      	mvns	r3, r3
1004853c:	001a      	movs	r2, r3
1004853e:	693b      	ldr	r3, [r7, #16]
10048540:	4013      	ands	r3, r2
10048542:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10048544:	2201      	movs	r2, #1
10048546:	697b      	ldr	r3, [r7, #20]
10048548:	409a      	lsls	r2, r3
1004854a:	0013      	movs	r3, r2
1004854c:	001a      	movs	r2, r3
1004854e:	693b      	ldr	r3, [r7, #16]
10048550:	4313      	orrs	r3, r2
10048552:	613b      	str	r3, [r7, #16]
10048554:	e011      	b.n	1004857a <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10048556:	2201      	movs	r2, #1
10048558:	697b      	ldr	r3, [r7, #20]
1004855a:	409a      	lsls	r2, r3
1004855c:	0013      	movs	r3, r2
1004855e:	041b      	lsls	r3, r3, #16
10048560:	43db      	mvns	r3, r3
10048562:	001a      	movs	r2, r3
10048564:	693b      	ldr	r3, [r7, #16]
10048566:	4013      	ands	r3, r2
10048568:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004856a:	2201      	movs	r2, #1
1004856c:	697b      	ldr	r3, [r7, #20]
1004856e:	409a      	lsls	r2, r3
10048570:	0013      	movs	r3, r2
10048572:	041b      	lsls	r3, r3, #16
10048574:	693a      	ldr	r2, [r7, #16]
10048576:	4313      	orrs	r3, r2
10048578:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
1004857a:	2380      	movs	r3, #128	@ 0x80
1004857c:	05db      	lsls	r3, r3, #23
1004857e:	693a      	ldr	r2, [r7, #16]
10048580:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
10048582:	683b      	ldr	r3, [r7, #0]
10048584:	685a      	ldr	r2, [r3, #4]
10048586:	2380      	movs	r3, #128	@ 0x80
10048588:	025b      	lsls	r3, r3, #9
1004858a:	4013      	ands	r3, r2
1004858c:	d030      	beq.n	100485f0 <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
1004858e:	2380      	movs	r3, #128	@ 0x80
10048590:	05db      	lsls	r3, r3, #23
10048592:	699b      	ldr	r3, [r3, #24]
10048594:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10048596:	687a      	ldr	r2, [r7, #4]
10048598:	2390      	movs	r3, #144	@ 0x90
1004859a:	05db      	lsls	r3, r3, #23
1004859c:	429a      	cmp	r2, r3
1004859e:	d111      	bne.n	100485c4 <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
100485a0:	2201      	movs	r2, #1
100485a2:	697b      	ldr	r3, [r7, #20]
100485a4:	409a      	lsls	r2, r3
100485a6:	0013      	movs	r3, r2
100485a8:	43db      	mvns	r3, r3
100485aa:	001a      	movs	r2, r3
100485ac:	693b      	ldr	r3, [r7, #16]
100485ae:	4013      	ands	r3, r2
100485b0:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100485b2:	2201      	movs	r2, #1
100485b4:	697b      	ldr	r3, [r7, #20]
100485b6:	409a      	lsls	r2, r3
100485b8:	0013      	movs	r3, r2
100485ba:	001a      	movs	r2, r3
100485bc:	693b      	ldr	r3, [r7, #16]
100485be:	4313      	orrs	r3, r2
100485c0:	613b      	str	r3, [r7, #16]
100485c2:	e011      	b.n	100485e8 <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100485c4:	2201      	movs	r2, #1
100485c6:	697b      	ldr	r3, [r7, #20]
100485c8:	409a      	lsls	r2, r3
100485ca:	0013      	movs	r3, r2
100485cc:	041b      	lsls	r3, r3, #16
100485ce:	43db      	mvns	r3, r3
100485d0:	001a      	movs	r2, r3
100485d2:	693b      	ldr	r3, [r7, #16]
100485d4:	4013      	ands	r3, r2
100485d6:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100485d8:	2201      	movs	r2, #1
100485da:	697b      	ldr	r3, [r7, #20]
100485dc:	409a      	lsls	r2, r3
100485de:	0013      	movs	r3, r2
100485e0:	041b      	lsls	r3, r3, #16
100485e2:	693a      	ldr	r2, [r7, #16]
100485e4:	4313      	orrs	r3, r2
100485e6:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
100485e8:	2380      	movs	r3, #128	@ 0x80
100485ea:	05db      	lsls	r3, r3, #23
100485ec:	693a      	ldr	r2, [r7, #16]
100485ee:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
100485f0:	697b      	ldr	r3, [r7, #20]
100485f2:	3301      	adds	r3, #1
100485f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100485f6:	683b      	ldr	r3, [r7, #0]
100485f8:	681a      	ldr	r2, [r3, #0]
100485fa:	697b      	ldr	r3, [r7, #20]
100485fc:	40da      	lsrs	r2, r3
100485fe:	1e13      	subs	r3, r2, #0
10048600:	d000      	beq.n	10048604 <HAL_GPIO_Init+0x340>
10048602:	e667      	b.n	100482d4 <HAL_GPIO_Init+0x10>
  }
}
10048604:	46c0      	nop			@ (mov r8, r8)
10048606:	46c0      	nop			@ (mov r8, r8)
10048608:	46bd      	mov	sp, r7
1004860a:	b006      	add	sp, #24
1004860c:	bd80      	pop	{r7, pc}

1004860e <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
1004860e:	b580      	push	{r7, lr}
10048610:	b086      	sub	sp, #24
10048612:	af00      	add	r7, sp, #0
10048614:	6078      	str	r0, [r7, #4]
10048616:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10048618:	2300      	movs	r3, #0
1004861a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
1004861c:	e0cf      	b.n	100487be <HAL_GPIO_DeInit+0x1b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
1004861e:	2201      	movs	r2, #1
10048620:	697b      	ldr	r3, [r7, #20]
10048622:	409a      	lsls	r2, r3
10048624:	683b      	ldr	r3, [r7, #0]
10048626:	4013      	ands	r3, r2
10048628:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
1004862a:	68fb      	ldr	r3, [r7, #12]
1004862c:	2b00      	cmp	r3, #0
1004862e:	d100      	bne.n	10048632 <HAL_GPIO_DeInit+0x24>
10048630:	e0c2      	b.n	100487b8 <HAL_GPIO_DeInit+0x1aa>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      /* Disable the specified EXTI interrupt line */
      tmp = SYSCFG->IO_IER;
10048632:	2380      	movs	r3, #128	@ 0x80
10048634:	05db      	lsls	r3, r3, #23
10048636:	699b      	ldr	r3, [r3, #24]
10048638:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
1004863a:	687a      	ldr	r2, [r7, #4]
1004863c:	2390      	movs	r3, #144	@ 0x90
1004863e:	05db      	lsls	r3, r3, #23
10048640:	429a      	cmp	r2, r3
10048642:	d109      	bne.n	10048658 <HAL_GPIO_DeInit+0x4a>
      {
        tmp &= ~(1<<position);
10048644:	2201      	movs	r2, #1
10048646:	697b      	ldr	r3, [r7, #20]
10048648:	409a      	lsls	r2, r3
1004864a:	0013      	movs	r3, r2
1004864c:	43db      	mvns	r3, r3
1004864e:	001a      	movs	r2, r3
10048650:	693b      	ldr	r3, [r7, #16]
10048652:	4013      	ands	r3, r2
10048654:	613b      	str	r3, [r7, #16]
10048656:	e009      	b.n	1004866c <HAL_GPIO_DeInit+0x5e>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10048658:	2201      	movs	r2, #1
1004865a:	697b      	ldr	r3, [r7, #20]
1004865c:	409a      	lsls	r2, r3
1004865e:	0013      	movs	r3, r2
10048660:	041b      	lsls	r3, r3, #16
10048662:	43db      	mvns	r3, r3
10048664:	001a      	movs	r2, r3
10048666:	693b      	ldr	r3, [r7, #16]
10048668:	4013      	ands	r3, r2
1004866a:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IER = tmp;
1004866c:	2380      	movs	r3, #128	@ 0x80
1004866e:	05db      	lsls	r3, r3, #23
10048670:	693a      	ldr	r2, [r7, #16]
10048672:	619a      	str	r2, [r3, #24]

      /* Clear EXTI line configuration */
      tmp = SYSCFG->IO_DTR;
10048674:	2380      	movs	r3, #128	@ 0x80
10048676:	05db      	lsls	r3, r3, #23
10048678:	68db      	ldr	r3, [r3, #12]
1004867a:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
1004867c:	687a      	ldr	r2, [r7, #4]
1004867e:	2390      	movs	r3, #144	@ 0x90
10048680:	05db      	lsls	r3, r3, #23
10048682:	429a      	cmp	r2, r3
10048684:	d109      	bne.n	1004869a <HAL_GPIO_DeInit+0x8c>
      {
        tmp &= ~(1<<position);
10048686:	2201      	movs	r2, #1
10048688:	697b      	ldr	r3, [r7, #20]
1004868a:	409a      	lsls	r2, r3
1004868c:	0013      	movs	r3, r2
1004868e:	43db      	mvns	r3, r3
10048690:	001a      	movs	r2, r3
10048692:	693b      	ldr	r3, [r7, #16]
10048694:	4013      	ands	r3, r2
10048696:	613b      	str	r3, [r7, #16]
10048698:	e009      	b.n	100486ae <HAL_GPIO_DeInit+0xa0>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
1004869a:	2201      	movs	r2, #1
1004869c:	697b      	ldr	r3, [r7, #20]
1004869e:	409a      	lsls	r2, r3
100486a0:	0013      	movs	r3, r2
100486a2:	041b      	lsls	r3, r3, #16
100486a4:	43db      	mvns	r3, r3
100486a6:	001a      	movs	r2, r3
100486a8:	693b      	ldr	r3, [r7, #16]
100486aa:	4013      	ands	r3, r2
100486ac:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_DTR = tmp;
100486ae:	2380      	movs	r3, #128	@ 0x80
100486b0:	05db      	lsls	r3, r3, #23
100486b2:	693a      	ldr	r2, [r7, #16]
100486b4:	60da      	str	r2, [r3, #12]

      tmp = SYSCFG->IO_IBER;
100486b6:	2380      	movs	r3, #128	@ 0x80
100486b8:	05db      	lsls	r3, r3, #23
100486ba:	691b      	ldr	r3, [r3, #16]
100486bc:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
100486be:	687a      	ldr	r2, [r7, #4]
100486c0:	2390      	movs	r3, #144	@ 0x90
100486c2:	05db      	lsls	r3, r3, #23
100486c4:	429a      	cmp	r2, r3
100486c6:	d109      	bne.n	100486dc <HAL_GPIO_DeInit+0xce>
      {
        tmp &= ~(1<<position);
100486c8:	2201      	movs	r2, #1
100486ca:	697b      	ldr	r3, [r7, #20]
100486cc:	409a      	lsls	r2, r3
100486ce:	0013      	movs	r3, r2
100486d0:	43db      	mvns	r3, r3
100486d2:	001a      	movs	r2, r3
100486d4:	693b      	ldr	r3, [r7, #16]
100486d6:	4013      	ands	r3, r2
100486d8:	613b      	str	r3, [r7, #16]
100486da:	e009      	b.n	100486f0 <HAL_GPIO_DeInit+0xe2>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
100486dc:	2201      	movs	r2, #1
100486de:	697b      	ldr	r3, [r7, #20]
100486e0:	409a      	lsls	r2, r3
100486e2:	0013      	movs	r3, r2
100486e4:	041b      	lsls	r3, r3, #16
100486e6:	43db      	mvns	r3, r3
100486e8:	001a      	movs	r2, r3
100486ea:	693b      	ldr	r3, [r7, #16]
100486ec:	4013      	ands	r3, r2
100486ee:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IBER = tmp;
100486f0:	2380      	movs	r3, #128	@ 0x80
100486f2:	05db      	lsls	r3, r3, #23
100486f4:	693a      	ldr	r2, [r7, #16]
100486f6:	611a      	str	r2, [r3, #16]

      /* Clear trigger mode configuration */
      tmp = SYSCFG->IO_IEVR;
100486f8:	2380      	movs	r3, #128	@ 0x80
100486fa:	05db      	lsls	r3, r3, #23
100486fc:	695b      	ldr	r3, [r3, #20]
100486fe:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10048700:	687a      	ldr	r2, [r7, #4]
10048702:	2390      	movs	r3, #144	@ 0x90
10048704:	05db      	lsls	r3, r3, #23
10048706:	429a      	cmp	r2, r3
10048708:	d109      	bne.n	1004871e <HAL_GPIO_DeInit+0x110>
      {
        tmp &= ~(1<<position);
1004870a:	2201      	movs	r2, #1
1004870c:	697b      	ldr	r3, [r7, #20]
1004870e:	409a      	lsls	r2, r3
10048710:	0013      	movs	r3, r2
10048712:	43db      	mvns	r3, r3
10048714:	001a      	movs	r2, r3
10048716:	693b      	ldr	r3, [r7, #16]
10048718:	4013      	ands	r3, r2
1004871a:	613b      	str	r3, [r7, #16]
1004871c:	e009      	b.n	10048732 <HAL_GPIO_DeInit+0x124>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
1004871e:	2201      	movs	r2, #1
10048720:	697b      	ldr	r3, [r7, #20]
10048722:	409a      	lsls	r2, r3
10048724:	0013      	movs	r3, r2
10048726:	041b      	lsls	r3, r3, #16
10048728:	43db      	mvns	r3, r3
1004872a:	001a      	movs	r2, r3
1004872c:	693b      	ldr	r3, [r7, #16]
1004872e:	4013      	ands	r3, r2
10048730:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IEVR = tmp;
10048732:	2380      	movs	r3, #128	@ 0x80
10048734:	05db      	lsls	r3, r3, #23
10048736:	693a      	ldr	r2, [r7, #16]
10048738:	615a      	str	r2, [r3, #20]

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
1004873a:	687b      	ldr	r3, [r7, #4]
1004873c:	681a      	ldr	r2, [r3, #0]
1004873e:	697b      	ldr	r3, [r7, #20]
10048740:	005b      	lsls	r3, r3, #1
10048742:	2103      	movs	r1, #3
10048744:	4099      	lsls	r1, r3
10048746:	000b      	movs	r3, r1
10048748:	431a      	orrs	r2, r3
1004874a:	687b      	ldr	r3, [r7, #4]
1004874c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
1004874e:	697b      	ldr	r3, [r7, #20]
10048750:	08da      	lsrs	r2, r3, #3
10048752:	687b      	ldr	r3, [r7, #4]
10048754:	3208      	adds	r2, #8
10048756:	0092      	lsls	r2, r2, #2
10048758:	58d3      	ldr	r3, [r2, r3]
1004875a:	697a      	ldr	r2, [r7, #20]
1004875c:	2107      	movs	r1, #7
1004875e:	400a      	ands	r2, r1
10048760:	0092      	lsls	r2, r2, #2
10048762:	210f      	movs	r1, #15
10048764:	4091      	lsls	r1, r2
10048766:	000a      	movs	r2, r1
10048768:	43d1      	mvns	r1, r2
1004876a:	697a      	ldr	r2, [r7, #20]
1004876c:	08d2      	lsrs	r2, r2, #3
1004876e:	4019      	ands	r1, r3
10048770:	687b      	ldr	r3, [r7, #4]
10048772:	3208      	adds	r2, #8
10048774:	0092      	lsls	r2, r2, #2
10048776:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
10048778:	687b      	ldr	r3, [r7, #4]
1004877a:	68db      	ldr	r3, [r3, #12]
1004877c:	697a      	ldr	r2, [r7, #20]
1004877e:	0052      	lsls	r2, r2, #1
10048780:	2103      	movs	r1, #3
10048782:	4091      	lsls	r1, r2
10048784:	000a      	movs	r2, r1
10048786:	43d2      	mvns	r2, r2
10048788:	401a      	ands	r2, r3
1004878a:	687b      	ldr	r3, [r7, #4]
1004878c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
1004878e:	687b      	ldr	r3, [r7, #4]
10048790:	685b      	ldr	r3, [r3, #4]
10048792:	2101      	movs	r1, #1
10048794:	697a      	ldr	r2, [r7, #20]
10048796:	4091      	lsls	r1, r2
10048798:	000a      	movs	r2, r1
1004879a:	43d2      	mvns	r2, r2
1004879c:	401a      	ands	r2, r3
1004879e:	687b      	ldr	r3, [r7, #4]
100487a0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
100487a2:	687b      	ldr	r3, [r7, #4]
100487a4:	689b      	ldr	r3, [r3, #8]
100487a6:	697a      	ldr	r2, [r7, #20]
100487a8:	0052      	lsls	r2, r2, #1
100487aa:	2103      	movs	r1, #3
100487ac:	4091      	lsls	r1, r2
100487ae:	000a      	movs	r2, r1
100487b0:	43d2      	mvns	r2, r2
100487b2:	401a      	ands	r2, r3
100487b4:	687b      	ldr	r3, [r7, #4]
100487b6:	609a      	str	r2, [r3, #8]
    }

    position++;
100487b8:	697b      	ldr	r3, [r7, #20]
100487ba:	3301      	adds	r3, #1
100487bc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
100487be:	683a      	ldr	r2, [r7, #0]
100487c0:	697b      	ldr	r3, [r7, #20]
100487c2:	40da      	lsrs	r2, r3
100487c4:	1e13      	subs	r3, r2, #0
100487c6:	d000      	beq.n	100487ca <HAL_GPIO_DeInit+0x1bc>
100487c8:	e729      	b.n	1004861e <HAL_GPIO_DeInit+0x10>
  }
}
100487ca:	46c0      	nop			@ (mov r8, r8)
100487cc:	46c0      	nop			@ (mov r8, r8)
100487ce:	46bd      	mov	sp, r7
100487d0:	b006      	add	sp, #24
100487d2:	bd80      	pop	{r7, pc}

100487d4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
100487d4:	b580      	push	{r7, lr}
100487d6:	b084      	sub	sp, #16
100487d8:	af00      	add	r7, sp, #0
100487da:	6078      	str	r0, [r7, #4]
100487dc:	000a      	movs	r2, r1
100487de:	1cbb      	adds	r3, r7, #2
100487e0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
100487e2:	687b      	ldr	r3, [r7, #4]
100487e4:	691b      	ldr	r3, [r3, #16]
100487e6:	1cba      	adds	r2, r7, #2
100487e8:	8812      	ldrh	r2, [r2, #0]
100487ea:	4013      	ands	r3, r2
100487ec:	d004      	beq.n	100487f8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
100487ee:	230f      	movs	r3, #15
100487f0:	18fb      	adds	r3, r7, r3
100487f2:	2201      	movs	r2, #1
100487f4:	701a      	strb	r2, [r3, #0]
100487f6:	e003      	b.n	10048800 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
100487f8:	230f      	movs	r3, #15
100487fa:	18fb      	adds	r3, r7, r3
100487fc:	2200      	movs	r2, #0
100487fe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
10048800:	230f      	movs	r3, #15
10048802:	18fb      	adds	r3, r7, r3
10048804:	781b      	ldrb	r3, [r3, #0]
}
10048806:	0018      	movs	r0, r3
10048808:	46bd      	mov	sp, r7
1004880a:	b004      	add	sp, #16
1004880c:	bd80      	pop	{r7, pc}

1004880e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
1004880e:	b580      	push	{r7, lr}
10048810:	b082      	sub	sp, #8
10048812:	af00      	add	r7, sp, #0
10048814:	6078      	str	r0, [r7, #4]
10048816:	0008      	movs	r0, r1
10048818:	0011      	movs	r1, r2
1004881a:	1cbb      	adds	r3, r7, #2
1004881c:	1c02      	adds	r2, r0, #0
1004881e:	801a      	strh	r2, [r3, #0]
10048820:	1c7b      	adds	r3, r7, #1
10048822:	1c0a      	adds	r2, r1, #0
10048824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10048826:	1c7b      	adds	r3, r7, #1
10048828:	781b      	ldrb	r3, [r3, #0]
1004882a:	2b00      	cmp	r3, #0
1004882c:	d004      	beq.n	10048838 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
1004882e:	1cbb      	adds	r3, r7, #2
10048830:	881a      	ldrh	r2, [r3, #0]
10048832:	687b      	ldr	r3, [r7, #4]
10048834:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10048836:	e003      	b.n	10048840 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10048838:	1cbb      	adds	r3, r7, #2
1004883a:	881a      	ldrh	r2, [r3, #0]
1004883c:	687b      	ldr	r3, [r7, #4]
1004883e:	629a      	str	r2, [r3, #40]	@ 0x28
}
10048840:	46c0      	nop			@ (mov r8, r8)
10048842:	46bd      	mov	sp, r7
10048844:	b002      	add	sp, #8
10048846:	bd80      	pop	{r7, pc}

10048848 <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10048848:	b580      	push	{r7, lr}
1004884a:	b082      	sub	sp, #8
1004884c:	af00      	add	r7, sp, #0
1004884e:	6078      	str	r0, [r7, #4]
10048850:	000a      	movs	r2, r1
10048852:	1cbb      	adds	r3, r7, #2
10048854:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
10048856:	687a      	ldr	r2, [r7, #4]
10048858:	2390      	movs	r3, #144	@ 0x90
1004885a:	05db      	lsls	r3, r3, #23
1004885c:	429a      	cmp	r2, r3
1004885e:	d109      	bne.n	10048874 <HAL_GPIO_EXTI_IRQHandler+0x2c>
10048860:	2380      	movs	r3, #128	@ 0x80
10048862:	05db      	lsls	r3, r3, #23
10048864:	69db      	ldr	r3, [r3, #28]
10048866:	1cba      	adds	r2, r7, #2
10048868:	8812      	ldrh	r2, [r2, #0]
1004886a:	4013      	ands	r3, r2
1004886c:	1e5a      	subs	r2, r3, #1
1004886e:	4193      	sbcs	r3, r2
10048870:	b2db      	uxtb	r3, r3
10048872:	e009      	b.n	10048888 <HAL_GPIO_EXTI_IRQHandler+0x40>
10048874:	2380      	movs	r3, #128	@ 0x80
10048876:	05db      	lsls	r3, r3, #23
10048878:	69db      	ldr	r3, [r3, #28]
1004887a:	1cba      	adds	r2, r7, #2
1004887c:	8812      	ldrh	r2, [r2, #0]
1004887e:	0412      	lsls	r2, r2, #16
10048880:	4013      	ands	r3, r2
10048882:	1e5a      	subs	r2, r3, #1
10048884:	4193      	sbcs	r3, r2
10048886:	b2db      	uxtb	r3, r3
10048888:	2b00      	cmp	r3, #0
1004888a:	d017      	beq.n	100488bc <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
1004888c:	687a      	ldr	r2, [r7, #4]
1004888e:	2390      	movs	r3, #144	@ 0x90
10048890:	05db      	lsls	r3, r3, #23
10048892:	429a      	cmp	r2, r3
10048894:	d105      	bne.n	100488a2 <HAL_GPIO_EXTI_IRQHandler+0x5a>
10048896:	2380      	movs	r3, #128	@ 0x80
10048898:	05db      	lsls	r3, r3, #23
1004889a:	1cba      	adds	r2, r7, #2
1004889c:	8812      	ldrh	r2, [r2, #0]
1004889e:	61da      	str	r2, [r3, #28]
100488a0:	e005      	b.n	100488ae <HAL_GPIO_EXTI_IRQHandler+0x66>
100488a2:	1cbb      	adds	r3, r7, #2
100488a4:	881a      	ldrh	r2, [r3, #0]
100488a6:	2380      	movs	r3, #128	@ 0x80
100488a8:	05db      	lsls	r3, r3, #23
100488aa:	0412      	lsls	r2, r2, #16
100488ac:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
100488ae:	1cbb      	adds	r3, r7, #2
100488b0:	881a      	ldrh	r2, [r3, #0]
100488b2:	687b      	ldr	r3, [r7, #4]
100488b4:	0011      	movs	r1, r2
100488b6:	0018      	movs	r0, r3
100488b8:	f000 f804 	bl	100488c4 <HAL_GPIO_EXTI_Callback>
  }
}
100488bc:	46c0      	nop			@ (mov r8, r8)
100488be:	46bd      	mov	sp, r7
100488c0:	b002      	add	sp, #8
100488c2:	bd80      	pop	{r7, pc}

100488c4 <HAL_GPIO_EXTI_Callback>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
100488c4:	b580      	push	{r7, lr}
100488c6:	b082      	sub	sp, #8
100488c8:	af00      	add	r7, sp, #0
100488ca:	6078      	str	r0, [r7, #4]
100488cc:	000a      	movs	r2, r1
100488ce:	1cbb      	adds	r3, r7, #2
100488d0:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
100488d2:	46c0      	nop			@ (mov r8, r8)
100488d4:	46bd      	mov	sp, r7
100488d6:	b002      	add	sp, #8
100488d8:	bd80      	pop	{r7, pc}
	...

100488dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
100488dc:	b580      	push	{r7, lr}
100488de:	b082      	sub	sp, #8
100488e0:	af00      	add	r7, sp, #0
100488e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
100488e4:	687b      	ldr	r3, [r7, #4]
100488e6:	2b00      	cmp	r3, #0
100488e8:	d101      	bne.n	100488ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
100488ea:	2301      	movs	r3, #1
100488ec:	e08f      	b.n	10048a0e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
100488ee:	687b      	ldr	r3, [r7, #4]
100488f0:	2241      	movs	r2, #65	@ 0x41
100488f2:	5c9b      	ldrb	r3, [r3, r2]
100488f4:	b2db      	uxtb	r3, r3
100488f6:	2b00      	cmp	r3, #0
100488f8:	d107      	bne.n	1004890a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
100488fa:	687b      	ldr	r3, [r7, #4]
100488fc:	2240      	movs	r2, #64	@ 0x40
100488fe:	2100      	movs	r1, #0
10048900:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10048902:	687b      	ldr	r3, [r7, #4]
10048904:	0018      	movs	r0, r3
10048906:	f7fe fc6b 	bl	100471e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
1004890a:	687b      	ldr	r3, [r7, #4]
1004890c:	2241      	movs	r2, #65	@ 0x41
1004890e:	2124      	movs	r1, #36	@ 0x24
10048910:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
10048912:	687b      	ldr	r3, [r7, #4]
10048914:	681b      	ldr	r3, [r3, #0]
10048916:	681a      	ldr	r2, [r3, #0]
10048918:	687b      	ldr	r3, [r7, #4]
1004891a:	681b      	ldr	r3, [r3, #0]
1004891c:	2101      	movs	r1, #1
1004891e:	438a      	bics	r2, r1
10048920:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10048922:	687b      	ldr	r3, [r7, #4]
10048924:	685a      	ldr	r2, [r3, #4]
10048926:	687b      	ldr	r3, [r7, #4]
10048928:	681b      	ldr	r3, [r3, #0]
1004892a:	493b      	ldr	r1, [pc, #236]	@ (10048a18 <HAL_I2C_Init+0x13c>)
1004892c:	400a      	ands	r2, r1
1004892e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10048930:	687b      	ldr	r3, [r7, #4]
10048932:	681b      	ldr	r3, [r3, #0]
10048934:	689a      	ldr	r2, [r3, #8]
10048936:	687b      	ldr	r3, [r7, #4]
10048938:	681b      	ldr	r3, [r3, #0]
1004893a:	4938      	ldr	r1, [pc, #224]	@ (10048a1c <HAL_I2C_Init+0x140>)
1004893c:	400a      	ands	r2, r1
1004893e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10048940:	687b      	ldr	r3, [r7, #4]
10048942:	68db      	ldr	r3, [r3, #12]
10048944:	2b01      	cmp	r3, #1
10048946:	d108      	bne.n	1004895a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
10048948:	687b      	ldr	r3, [r7, #4]
1004894a:	689a      	ldr	r2, [r3, #8]
1004894c:	687b      	ldr	r3, [r7, #4]
1004894e:	681b      	ldr	r3, [r3, #0]
10048950:	2180      	movs	r1, #128	@ 0x80
10048952:	0209      	lsls	r1, r1, #8
10048954:	430a      	orrs	r2, r1
10048956:	609a      	str	r2, [r3, #8]
10048958:	e007      	b.n	1004896a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
1004895a:	687b      	ldr	r3, [r7, #4]
1004895c:	689a      	ldr	r2, [r3, #8]
1004895e:	687b      	ldr	r3, [r7, #4]
10048960:	681b      	ldr	r3, [r3, #0]
10048962:	2184      	movs	r1, #132	@ 0x84
10048964:	0209      	lsls	r1, r1, #8
10048966:	430a      	orrs	r2, r1
10048968:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
1004896a:	687b      	ldr	r3, [r7, #4]
1004896c:	68db      	ldr	r3, [r3, #12]
1004896e:	2b02      	cmp	r3, #2
10048970:	d109      	bne.n	10048986 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10048972:	687b      	ldr	r3, [r7, #4]
10048974:	681b      	ldr	r3, [r3, #0]
10048976:	685a      	ldr	r2, [r3, #4]
10048978:	687b      	ldr	r3, [r7, #4]
1004897a:	681b      	ldr	r3, [r3, #0]
1004897c:	2180      	movs	r1, #128	@ 0x80
1004897e:	0109      	lsls	r1, r1, #4
10048980:	430a      	orrs	r2, r1
10048982:	605a      	str	r2, [r3, #4]
10048984:	e007      	b.n	10048996 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10048986:	687b      	ldr	r3, [r7, #4]
10048988:	681b      	ldr	r3, [r3, #0]
1004898a:	685a      	ldr	r2, [r3, #4]
1004898c:	687b      	ldr	r3, [r7, #4]
1004898e:	681b      	ldr	r3, [r3, #0]
10048990:	4923      	ldr	r1, [pc, #140]	@ (10048a20 <HAL_I2C_Init+0x144>)
10048992:	400a      	ands	r2, r1
10048994:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
10048996:	687b      	ldr	r3, [r7, #4]
10048998:	681b      	ldr	r3, [r3, #0]
1004899a:	685a      	ldr	r2, [r3, #4]
1004899c:	687b      	ldr	r3, [r7, #4]
1004899e:	681b      	ldr	r3, [r3, #0]
100489a0:	4920      	ldr	r1, [pc, #128]	@ (10048a24 <HAL_I2C_Init+0x148>)
100489a2:	430a      	orrs	r2, r1
100489a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
100489a6:	687b      	ldr	r3, [r7, #4]
100489a8:	681b      	ldr	r3, [r3, #0]
100489aa:	68da      	ldr	r2, [r3, #12]
100489ac:	687b      	ldr	r3, [r7, #4]
100489ae:	681b      	ldr	r3, [r3, #0]
100489b0:	491a      	ldr	r1, [pc, #104]	@ (10048a1c <HAL_I2C_Init+0x140>)
100489b2:	400a      	ands	r2, r1
100489b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100489b6:	687b      	ldr	r3, [r7, #4]
100489b8:	691a      	ldr	r2, [r3, #16]
100489ba:	687b      	ldr	r3, [r7, #4]
100489bc:	695b      	ldr	r3, [r3, #20]
100489be:	431a      	orrs	r2, r3
100489c0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
100489c2:	687b      	ldr	r3, [r7, #4]
100489c4:	699b      	ldr	r3, [r3, #24]
100489c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
100489c8:	687b      	ldr	r3, [r7, #4]
100489ca:	681b      	ldr	r3, [r3, #0]
100489cc:	430a      	orrs	r2, r1
100489ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
100489d0:	687b      	ldr	r3, [r7, #4]
100489d2:	69d9      	ldr	r1, [r3, #28]
100489d4:	687b      	ldr	r3, [r7, #4]
100489d6:	6a1a      	ldr	r2, [r3, #32]
100489d8:	687b      	ldr	r3, [r7, #4]
100489da:	681b      	ldr	r3, [r3, #0]
100489dc:	430a      	orrs	r2, r1
100489de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
100489e0:	687b      	ldr	r3, [r7, #4]
100489e2:	681b      	ldr	r3, [r3, #0]
100489e4:	681a      	ldr	r2, [r3, #0]
100489e6:	687b      	ldr	r3, [r7, #4]
100489e8:	681b      	ldr	r3, [r3, #0]
100489ea:	2101      	movs	r1, #1
100489ec:	430a      	orrs	r2, r1
100489ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
100489f0:	687b      	ldr	r3, [r7, #4]
100489f2:	2200      	movs	r2, #0
100489f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
100489f6:	687b      	ldr	r3, [r7, #4]
100489f8:	2241      	movs	r2, #65	@ 0x41
100489fa:	2120      	movs	r1, #32
100489fc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
100489fe:	687b      	ldr	r3, [r7, #4]
10048a00:	2200      	movs	r2, #0
10048a02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10048a04:	687b      	ldr	r3, [r7, #4]
10048a06:	2242      	movs	r2, #66	@ 0x42
10048a08:	2100      	movs	r1, #0
10048a0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048a0c:	2300      	movs	r3, #0
}
10048a0e:	0018      	movs	r0, r3
10048a10:	46bd      	mov	sp, r7
10048a12:	b002      	add	sp, #8
10048a14:	bd80      	pop	{r7, pc}
10048a16:	46c0      	nop			@ (mov r8, r8)
10048a18:	f0ffffff 	.word	0xf0ffffff
10048a1c:	ffff7fff 	.word	0xffff7fff
10048a20:	fffff7ff 	.word	0xfffff7ff
10048a24:	02008000 	.word	0x02008000

10048a28 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10048a28:	b590      	push	{r4, r7, lr}
10048a2a:	b087      	sub	sp, #28
10048a2c:	af02      	add	r7, sp, #8
10048a2e:	60f8      	str	r0, [r7, #12]
10048a30:	000c      	movs	r4, r1
10048a32:	0010      	movs	r0, r2
10048a34:	0019      	movs	r1, r3
10048a36:	230a      	movs	r3, #10
10048a38:	18fb      	adds	r3, r7, r3
10048a3a:	1c22      	adds	r2, r4, #0
10048a3c:	801a      	strh	r2, [r3, #0]
10048a3e:	2308      	movs	r3, #8
10048a40:	18fb      	adds	r3, r7, r3
10048a42:	1c02      	adds	r2, r0, #0
10048a44:	801a      	strh	r2, [r3, #0]
10048a46:	1dbb      	adds	r3, r7, #6
10048a48:	1c0a      	adds	r2, r1, #0
10048a4a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10048a4c:	68fb      	ldr	r3, [r7, #12]
10048a4e:	2241      	movs	r2, #65	@ 0x41
10048a50:	5c9b      	ldrb	r3, [r3, r2]
10048a52:	b2db      	uxtb	r3, r3
10048a54:	2b20      	cmp	r3, #32
10048a56:	d000      	beq.n	10048a5a <HAL_I2C_Mem_Write_IT+0x32>
10048a58:	e07d      	b.n	10048b56 <HAL_I2C_Mem_Write_IT+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
10048a5a:	6a3b      	ldr	r3, [r7, #32]
10048a5c:	2b00      	cmp	r3, #0
10048a5e:	d004      	beq.n	10048a6a <HAL_I2C_Mem_Write_IT+0x42>
10048a60:	2324      	movs	r3, #36	@ 0x24
10048a62:	18fb      	adds	r3, r7, r3
10048a64:	881b      	ldrh	r3, [r3, #0]
10048a66:	2b00      	cmp	r3, #0
10048a68:	d105      	bne.n	10048a76 <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10048a6a:	68fb      	ldr	r3, [r7, #12]
10048a6c:	2280      	movs	r2, #128	@ 0x80
10048a6e:	0092      	lsls	r2, r2, #2
10048a70:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10048a72:	2301      	movs	r3, #1
10048a74:	e070      	b.n	10048b58 <HAL_I2C_Mem_Write_IT+0x130>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
10048a76:	68fb      	ldr	r3, [r7, #12]
10048a78:	681b      	ldr	r3, [r3, #0]
10048a7a:	699a      	ldr	r2, [r3, #24]
10048a7c:	2380      	movs	r3, #128	@ 0x80
10048a7e:	021b      	lsls	r3, r3, #8
10048a80:	401a      	ands	r2, r3
10048a82:	2380      	movs	r3, #128	@ 0x80
10048a84:	021b      	lsls	r3, r3, #8
10048a86:	429a      	cmp	r2, r3
10048a88:	d101      	bne.n	10048a8e <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
10048a8a:	2302      	movs	r3, #2
10048a8c:	e064      	b.n	10048b58 <HAL_I2C_Mem_Write_IT+0x130>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10048a8e:	68fb      	ldr	r3, [r7, #12]
10048a90:	2240      	movs	r2, #64	@ 0x40
10048a92:	5c9b      	ldrb	r3, [r3, r2]
10048a94:	2b01      	cmp	r3, #1
10048a96:	d101      	bne.n	10048a9c <HAL_I2C_Mem_Write_IT+0x74>
10048a98:	2302      	movs	r3, #2
10048a9a:	e05d      	b.n	10048b58 <HAL_I2C_Mem_Write_IT+0x130>
10048a9c:	68fb      	ldr	r3, [r7, #12]
10048a9e:	2240      	movs	r2, #64	@ 0x40
10048aa0:	2101      	movs	r1, #1
10048aa2:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
10048aa4:	68fb      	ldr	r3, [r7, #12]
10048aa6:	2241      	movs	r2, #65	@ 0x41
10048aa8:	2121      	movs	r1, #33	@ 0x21
10048aaa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10048aac:	68fb      	ldr	r3, [r7, #12]
10048aae:	2242      	movs	r2, #66	@ 0x42
10048ab0:	2140      	movs	r1, #64	@ 0x40
10048ab2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10048ab4:	68fb      	ldr	r3, [r7, #12]
10048ab6:	2200      	movs	r2, #0
10048ab8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
10048aba:	68fb      	ldr	r3, [r7, #12]
10048abc:	2200      	movs	r2, #0
10048abe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
10048ac0:	68fb      	ldr	r3, [r7, #12]
10048ac2:	6a3a      	ldr	r2, [r7, #32]
10048ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10048ac6:	68fb      	ldr	r3, [r7, #12]
10048ac8:	2224      	movs	r2, #36	@ 0x24
10048aca:	18ba      	adds	r2, r7, r2
10048acc:	8812      	ldrh	r2, [r2, #0]
10048ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10048ad0:	68fb      	ldr	r3, [r7, #12]
10048ad2:	4a23      	ldr	r2, [pc, #140]	@ (10048b60 <HAL_I2C_Mem_Write_IT+0x138>)
10048ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10048ad6:	68fb      	ldr	r3, [r7, #12]
10048ad8:	4a22      	ldr	r2, [pc, #136]	@ (10048b64 <HAL_I2C_Mem_Write_IT+0x13c>)
10048ada:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
10048adc:	230a      	movs	r3, #10
10048ade:	18fb      	adds	r3, r7, r3
10048ae0:	881a      	ldrh	r2, [r3, #0]
10048ae2:	68fb      	ldr	r3, [r7, #12]
10048ae4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10048ae6:	1dbb      	adds	r3, r7, #6
10048ae8:	881b      	ldrh	r3, [r3, #0]
10048aea:	2b01      	cmp	r3, #1
10048aec:	d10b      	bne.n	10048b06 <HAL_I2C_Mem_Write_IT+0xde>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10048aee:	2308      	movs	r3, #8
10048af0:	18fb      	adds	r3, r7, r3
10048af2:	881b      	ldrh	r3, [r3, #0]
10048af4:	b2da      	uxtb	r2, r3
10048af6:	68fb      	ldr	r3, [r7, #12]
10048af8:	681b      	ldr	r3, [r3, #0]
10048afa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10048afc:	68fb      	ldr	r3, [r7, #12]
10048afe:	2201      	movs	r2, #1
10048b00:	4252      	negs	r2, r2
10048b02:	651a      	str	r2, [r3, #80]	@ 0x50
10048b04:	e00e      	b.n	10048b24 <HAL_I2C_Mem_Write_IT+0xfc>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10048b06:	2108      	movs	r1, #8
10048b08:	187b      	adds	r3, r7, r1
10048b0a:	881b      	ldrh	r3, [r3, #0]
10048b0c:	0a1b      	lsrs	r3, r3, #8
10048b0e:	b29b      	uxth	r3, r3
10048b10:	b2da      	uxtb	r2, r3
10048b12:	68fb      	ldr	r3, [r7, #12]
10048b14:	681b      	ldr	r3, [r3, #0]
10048b16:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
10048b18:	187b      	adds	r3, r7, r1
10048b1a:	881b      	ldrh	r3, [r3, #0]
10048b1c:	b2db      	uxtb	r3, r3
10048b1e:	001a      	movs	r2, r3
10048b20:	68fb      	ldr	r3, [r7, #12]
10048b22:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10048b24:	1dbb      	adds	r3, r7, #6
10048b26:	881b      	ldrh	r3, [r3, #0]
10048b28:	b2da      	uxtb	r2, r3
10048b2a:	2380      	movs	r3, #128	@ 0x80
10048b2c:	045c      	lsls	r4, r3, #17
10048b2e:	230a      	movs	r3, #10
10048b30:	18fb      	adds	r3, r7, r3
10048b32:	8819      	ldrh	r1, [r3, #0]
10048b34:	68f8      	ldr	r0, [r7, #12]
10048b36:	4b0c      	ldr	r3, [pc, #48]	@ (10048b68 <HAL_I2C_Mem_Write_IT+0x140>)
10048b38:	9300      	str	r3, [sp, #0]
10048b3a:	0023      	movs	r3, r4
10048b3c:	f001 fc76 	bl	1004a42c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048b40:	68fb      	ldr	r3, [r7, #12]
10048b42:	2240      	movs	r2, #64	@ 0x40
10048b44:	2100      	movs	r1, #0
10048b46:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
10048b48:	68fb      	ldr	r3, [r7, #12]
10048b4a:	2101      	movs	r1, #1
10048b4c:	0018      	movs	r0, r3
10048b4e:	f001 fca7 	bl	1004a4a0 <I2C_Enable_IRQ>

    return HAL_OK;
10048b52:	2300      	movs	r3, #0
10048b54:	e000      	b.n	10048b58 <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
10048b56:	2302      	movs	r3, #2
  }
}
10048b58:	0018      	movs	r0, r3
10048b5a:	46bd      	mov	sp, r7
10048b5c:	b005      	add	sp, #20
10048b5e:	bd90      	pop	{r4, r7, pc}
10048b60:	ffff0000 	.word	0xffff0000
10048b64:	10048e21 	.word	0x10048e21
10048b68:	80002000 	.word	0x80002000

10048b6c <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10048b6c:	b590      	push	{r4, r7, lr}
10048b6e:	b087      	sub	sp, #28
10048b70:	af02      	add	r7, sp, #8
10048b72:	60f8      	str	r0, [r7, #12]
10048b74:	000c      	movs	r4, r1
10048b76:	0010      	movs	r0, r2
10048b78:	0019      	movs	r1, r3
10048b7a:	230a      	movs	r3, #10
10048b7c:	18fb      	adds	r3, r7, r3
10048b7e:	1c22      	adds	r2, r4, #0
10048b80:	801a      	strh	r2, [r3, #0]
10048b82:	2308      	movs	r3, #8
10048b84:	18fb      	adds	r3, r7, r3
10048b86:	1c02      	adds	r2, r0, #0
10048b88:	801a      	strh	r2, [r3, #0]
10048b8a:	1dbb      	adds	r3, r7, #6
10048b8c:	1c0a      	adds	r2, r1, #0
10048b8e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10048b90:	68fb      	ldr	r3, [r7, #12]
10048b92:	2241      	movs	r2, #65	@ 0x41
10048b94:	5c9b      	ldrb	r3, [r3, r2]
10048b96:	b2db      	uxtb	r3, r3
10048b98:	2b20      	cmp	r3, #32
10048b9a:	d000      	beq.n	10048b9e <HAL_I2C_Mem_Read_IT+0x32>
10048b9c:	e078      	b.n	10048c90 <HAL_I2C_Mem_Read_IT+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10048b9e:	6a3b      	ldr	r3, [r7, #32]
10048ba0:	2b00      	cmp	r3, #0
10048ba2:	d004      	beq.n	10048bae <HAL_I2C_Mem_Read_IT+0x42>
10048ba4:	2324      	movs	r3, #36	@ 0x24
10048ba6:	18fb      	adds	r3, r7, r3
10048ba8:	881b      	ldrh	r3, [r3, #0]
10048baa:	2b00      	cmp	r3, #0
10048bac:	d105      	bne.n	10048bba <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10048bae:	68fb      	ldr	r3, [r7, #12]
10048bb0:	2280      	movs	r2, #128	@ 0x80
10048bb2:	0092      	lsls	r2, r2, #2
10048bb4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10048bb6:	2301      	movs	r3, #1
10048bb8:	e06b      	b.n	10048c92 <HAL_I2C_Mem_Read_IT+0x126>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
10048bba:	68fb      	ldr	r3, [r7, #12]
10048bbc:	681b      	ldr	r3, [r3, #0]
10048bbe:	699a      	ldr	r2, [r3, #24]
10048bc0:	2380      	movs	r3, #128	@ 0x80
10048bc2:	021b      	lsls	r3, r3, #8
10048bc4:	401a      	ands	r2, r3
10048bc6:	2380      	movs	r3, #128	@ 0x80
10048bc8:	021b      	lsls	r3, r3, #8
10048bca:	429a      	cmp	r2, r3
10048bcc:	d101      	bne.n	10048bd2 <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
10048bce:	2302      	movs	r3, #2
10048bd0:	e05f      	b.n	10048c92 <HAL_I2C_Mem_Read_IT+0x126>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10048bd2:	68fb      	ldr	r3, [r7, #12]
10048bd4:	2240      	movs	r2, #64	@ 0x40
10048bd6:	5c9b      	ldrb	r3, [r3, r2]
10048bd8:	2b01      	cmp	r3, #1
10048bda:	d101      	bne.n	10048be0 <HAL_I2C_Mem_Read_IT+0x74>
10048bdc:	2302      	movs	r3, #2
10048bde:	e058      	b.n	10048c92 <HAL_I2C_Mem_Read_IT+0x126>
10048be0:	68fb      	ldr	r3, [r7, #12]
10048be2:	2240      	movs	r2, #64	@ 0x40
10048be4:	2101      	movs	r1, #1
10048be6:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
10048be8:	68fb      	ldr	r3, [r7, #12]
10048bea:	2241      	movs	r2, #65	@ 0x41
10048bec:	2122      	movs	r1, #34	@ 0x22
10048bee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10048bf0:	68fb      	ldr	r3, [r7, #12]
10048bf2:	2242      	movs	r2, #66	@ 0x42
10048bf4:	2140      	movs	r1, #64	@ 0x40
10048bf6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10048bf8:	68fb      	ldr	r3, [r7, #12]
10048bfa:	2200      	movs	r2, #0
10048bfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
10048bfe:	68fb      	ldr	r3, [r7, #12]
10048c00:	6a3a      	ldr	r2, [r7, #32]
10048c02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10048c04:	68fb      	ldr	r3, [r7, #12]
10048c06:	2224      	movs	r2, #36	@ 0x24
10048c08:	18ba      	adds	r2, r7, r2
10048c0a:	8812      	ldrh	r2, [r2, #0]
10048c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10048c0e:	68fb      	ldr	r3, [r7, #12]
10048c10:	4a22      	ldr	r2, [pc, #136]	@ (10048c9c <HAL_I2C_Mem_Read_IT+0x130>)
10048c12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10048c14:	68fb      	ldr	r3, [r7, #12]
10048c16:	4a22      	ldr	r2, [pc, #136]	@ (10048ca0 <HAL_I2C_Mem_Read_IT+0x134>)
10048c18:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
10048c1a:	230a      	movs	r3, #10
10048c1c:	18fb      	adds	r3, r7, r3
10048c1e:	881a      	ldrh	r2, [r3, #0]
10048c20:	68fb      	ldr	r3, [r7, #12]
10048c22:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10048c24:	1dbb      	adds	r3, r7, #6
10048c26:	881b      	ldrh	r3, [r3, #0]
10048c28:	2b01      	cmp	r3, #1
10048c2a:	d10b      	bne.n	10048c44 <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10048c2c:	2308      	movs	r3, #8
10048c2e:	18fb      	adds	r3, r7, r3
10048c30:	881b      	ldrh	r3, [r3, #0]
10048c32:	b2da      	uxtb	r2, r3
10048c34:	68fb      	ldr	r3, [r7, #12]
10048c36:	681b      	ldr	r3, [r3, #0]
10048c38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10048c3a:	68fb      	ldr	r3, [r7, #12]
10048c3c:	2201      	movs	r2, #1
10048c3e:	4252      	negs	r2, r2
10048c40:	651a      	str	r2, [r3, #80]	@ 0x50
10048c42:	e00e      	b.n	10048c62 <HAL_I2C_Mem_Read_IT+0xf6>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10048c44:	2108      	movs	r1, #8
10048c46:	187b      	adds	r3, r7, r1
10048c48:	881b      	ldrh	r3, [r3, #0]
10048c4a:	0a1b      	lsrs	r3, r3, #8
10048c4c:	b29b      	uxth	r3, r3
10048c4e:	b2da      	uxtb	r2, r3
10048c50:	68fb      	ldr	r3, [r7, #12]
10048c52:	681b      	ldr	r3, [r3, #0]
10048c54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
10048c56:	187b      	adds	r3, r7, r1
10048c58:	881b      	ldrh	r3, [r3, #0]
10048c5a:	b2db      	uxtb	r3, r3
10048c5c:	001a      	movs	r2, r3
10048c5e:	68fb      	ldr	r3, [r7, #12]
10048c60:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
10048c62:	1dbb      	adds	r3, r7, #6
10048c64:	881b      	ldrh	r3, [r3, #0]
10048c66:	b2da      	uxtb	r2, r3
10048c68:	230a      	movs	r3, #10
10048c6a:	18fb      	adds	r3, r7, r3
10048c6c:	8819      	ldrh	r1, [r3, #0]
10048c6e:	68f8      	ldr	r0, [r7, #12]
10048c70:	4b0c      	ldr	r3, [pc, #48]	@ (10048ca4 <HAL_I2C_Mem_Read_IT+0x138>)
10048c72:	9300      	str	r3, [sp, #0]
10048c74:	2300      	movs	r3, #0
10048c76:	f001 fbd9 	bl	1004a42c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048c7a:	68fb      	ldr	r3, [r7, #12]
10048c7c:	2240      	movs	r2, #64	@ 0x40
10048c7e:	2100      	movs	r1, #0
10048c80:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
10048c82:	68fb      	ldr	r3, [r7, #12]
10048c84:	2101      	movs	r1, #1
10048c86:	0018      	movs	r0, r3
10048c88:	f001 fc0a 	bl	1004a4a0 <I2C_Enable_IRQ>

    return HAL_OK;
10048c8c:	2300      	movs	r3, #0
10048c8e:	e000      	b.n	10048c92 <HAL_I2C_Mem_Read_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
10048c90:	2302      	movs	r3, #2
  }
}
10048c92:	0018      	movs	r0, r3
10048c94:	46bd      	mov	sp, r7
10048c96:	b005      	add	sp, #20
10048c98:	bd90      	pop	{r4, r7, pc}
10048c9a:	46c0      	nop			@ (mov r8, r8)
10048c9c:	ffff0000 	.word	0xffff0000
10048ca0:	10048e21 	.word	0x10048e21
10048ca4:	80002000 	.word	0x80002000

10048ca8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
10048ca8:	b580      	push	{r7, lr}
10048caa:	b084      	sub	sp, #16
10048cac:	af00      	add	r7, sp, #0
10048cae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10048cb0:	687b      	ldr	r3, [r7, #4]
10048cb2:	681b      	ldr	r3, [r3, #0]
10048cb4:	699b      	ldr	r3, [r3, #24]
10048cb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10048cb8:	687b      	ldr	r3, [r7, #4]
10048cba:	681b      	ldr	r3, [r3, #0]
10048cbc:	681b      	ldr	r3, [r3, #0]
10048cbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
10048cc0:	687b      	ldr	r3, [r7, #4]
10048cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10048cc4:	2b00      	cmp	r3, #0
10048cc6:	d005      	beq.n	10048cd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
10048cc8:	687b      	ldr	r3, [r7, #4]
10048cca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
10048ccc:	68ba      	ldr	r2, [r7, #8]
10048cce:	68f9      	ldr	r1, [r7, #12]
10048cd0:	6878      	ldr	r0, [r7, #4]
10048cd2:	4798      	blx	r3
  }
}
10048cd4:	46c0      	nop			@ (mov r8, r8)
10048cd6:	46bd      	mov	sp, r7
10048cd8:	b004      	add	sp, #16
10048cda:	bd80      	pop	{r7, pc}

10048cdc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
10048cdc:	b580      	push	{r7, lr}
10048cde:	b086      	sub	sp, #24
10048ce0:	af00      	add	r7, sp, #0
10048ce2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
10048ce4:	687b      	ldr	r3, [r7, #4]
10048ce6:	681b      	ldr	r3, [r3, #0]
10048ce8:	699b      	ldr	r3, [r3, #24]
10048cea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
10048cec:	687b      	ldr	r3, [r7, #4]
10048cee:	681b      	ldr	r3, [r3, #0]
10048cf0:	681b      	ldr	r3, [r3, #0]
10048cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10048cf4:	697b      	ldr	r3, [r7, #20]
10048cf6:	0a1b      	lsrs	r3, r3, #8
10048cf8:	001a      	movs	r2, r3
10048cfa:	2301      	movs	r3, #1
10048cfc:	4013      	ands	r3, r2
10048cfe:	d010      	beq.n	10048d22 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10048d00:	693b      	ldr	r3, [r7, #16]
10048d02:	09db      	lsrs	r3, r3, #7
10048d04:	001a      	movs	r2, r3
10048d06:	2301      	movs	r3, #1
10048d08:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10048d0a:	d00a      	beq.n	10048d22 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
10048d0c:	687b      	ldr	r3, [r7, #4]
10048d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048d10:	2201      	movs	r2, #1
10048d12:	431a      	orrs	r2, r3
10048d14:	687b      	ldr	r3, [r7, #4]
10048d16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10048d18:	687b      	ldr	r3, [r7, #4]
10048d1a:	681b      	ldr	r3, [r3, #0]
10048d1c:	2280      	movs	r2, #128	@ 0x80
10048d1e:	0052      	lsls	r2, r2, #1
10048d20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10048d22:	697b      	ldr	r3, [r7, #20]
10048d24:	0a9b      	lsrs	r3, r3, #10
10048d26:	001a      	movs	r2, r3
10048d28:	2301      	movs	r3, #1
10048d2a:	4013      	ands	r3, r2
10048d2c:	d010      	beq.n	10048d50 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10048d2e:	693b      	ldr	r3, [r7, #16]
10048d30:	09db      	lsrs	r3, r3, #7
10048d32:	001a      	movs	r2, r3
10048d34:	2301      	movs	r3, #1
10048d36:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10048d38:	d00a      	beq.n	10048d50 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
10048d3a:	687b      	ldr	r3, [r7, #4]
10048d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048d3e:	2208      	movs	r2, #8
10048d40:	431a      	orrs	r2, r3
10048d42:	687b      	ldr	r3, [r7, #4]
10048d44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10048d46:	687b      	ldr	r3, [r7, #4]
10048d48:	681b      	ldr	r3, [r3, #0]
10048d4a:	2280      	movs	r2, #128	@ 0x80
10048d4c:	00d2      	lsls	r2, r2, #3
10048d4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10048d50:	697b      	ldr	r3, [r7, #20]
10048d52:	0a5b      	lsrs	r3, r3, #9
10048d54:	001a      	movs	r2, r3
10048d56:	2301      	movs	r3, #1
10048d58:	4013      	ands	r3, r2
10048d5a:	d010      	beq.n	10048d7e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10048d5c:	693b      	ldr	r3, [r7, #16]
10048d5e:	09db      	lsrs	r3, r3, #7
10048d60:	001a      	movs	r2, r3
10048d62:	2301      	movs	r3, #1
10048d64:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10048d66:	d00a      	beq.n	10048d7e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
10048d68:	687b      	ldr	r3, [r7, #4]
10048d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048d6c:	2202      	movs	r2, #2
10048d6e:	431a      	orrs	r2, r3
10048d70:	687b      	ldr	r3, [r7, #4]
10048d72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10048d74:	687b      	ldr	r3, [r7, #4]
10048d76:	681b      	ldr	r3, [r3, #0]
10048d78:	2280      	movs	r2, #128	@ 0x80
10048d7a:	0092      	lsls	r2, r2, #2
10048d7c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10048d7e:	687b      	ldr	r3, [r7, #4]
10048d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048d82:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
10048d84:	68fb      	ldr	r3, [r7, #12]
10048d86:	220b      	movs	r2, #11
10048d88:	4013      	ands	r3, r2
10048d8a:	d005      	beq.n	10048d98 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
10048d8c:	68fa      	ldr	r2, [r7, #12]
10048d8e:	687b      	ldr	r3, [r7, #4]
10048d90:	0011      	movs	r1, r2
10048d92:	0018      	movs	r0, r3
10048d94:	f001 f9de 	bl	1004a154 <I2C_ITError>
  }
}
10048d98:	46c0      	nop			@ (mov r8, r8)
10048d9a:	46bd      	mov	sp, r7
10048d9c:	b006      	add	sp, #24
10048d9e:	bd80      	pop	{r7, pc}

10048da0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048da0:	b580      	push	{r7, lr}
10048da2:	b082      	sub	sp, #8
10048da4:	af00      	add	r7, sp, #0
10048da6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
10048da8:	46c0      	nop			@ (mov r8, r8)
10048daa:	46bd      	mov	sp, r7
10048dac:	b002      	add	sp, #8
10048dae:	bd80      	pop	{r7, pc}

10048db0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048db0:	b580      	push	{r7, lr}
10048db2:	b082      	sub	sp, #8
10048db4:	af00      	add	r7, sp, #0
10048db6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
10048db8:	46c0      	nop			@ (mov r8, r8)
10048dba:	46bd      	mov	sp, r7
10048dbc:	b002      	add	sp, #8
10048dbe:	bd80      	pop	{r7, pc}

10048dc0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048dc0:	b580      	push	{r7, lr}
10048dc2:	b082      	sub	sp, #8
10048dc4:	af00      	add	r7, sp, #0
10048dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
10048dc8:	46c0      	nop			@ (mov r8, r8)
10048dca:	46bd      	mov	sp, r7
10048dcc:	b002      	add	sp, #8
10048dce:	bd80      	pop	{r7, pc}

10048dd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048dd0:	b580      	push	{r7, lr}
10048dd2:	b082      	sub	sp, #8
10048dd4:	af00      	add	r7, sp, #0
10048dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
10048dd8:	46c0      	nop			@ (mov r8, r8)
10048dda:	46bd      	mov	sp, r7
10048ddc:	b002      	add	sp, #8
10048dde:	bd80      	pop	{r7, pc}

10048de0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
10048de0:	b580      	push	{r7, lr}
10048de2:	b082      	sub	sp, #8
10048de4:	af00      	add	r7, sp, #0
10048de6:	6078      	str	r0, [r7, #4]
10048de8:	0008      	movs	r0, r1
10048dea:	0011      	movs	r1, r2
10048dec:	1cfb      	adds	r3, r7, #3
10048dee:	1c02      	adds	r2, r0, #0
10048df0:	701a      	strb	r2, [r3, #0]
10048df2:	003b      	movs	r3, r7
10048df4:	1c0a      	adds	r2, r1, #0
10048df6:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
10048df8:	46c0      	nop			@ (mov r8, r8)
10048dfa:	46bd      	mov	sp, r7
10048dfc:	b002      	add	sp, #8
10048dfe:	bd80      	pop	{r7, pc}

10048e00 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048e00:	b580      	push	{r7, lr}
10048e02:	b082      	sub	sp, #8
10048e04:	af00      	add	r7, sp, #0
10048e06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
10048e08:	46c0      	nop			@ (mov r8, r8)
10048e0a:	46bd      	mov	sp, r7
10048e0c:	b002      	add	sp, #8
10048e0e:	bd80      	pop	{r7, pc}

10048e10 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
10048e10:	b580      	push	{r7, lr}
10048e12:	b082      	sub	sp, #8
10048e14:	af00      	add	r7, sp, #0
10048e16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10048e18:	46c0      	nop			@ (mov r8, r8)
10048e1a:	46bd      	mov	sp, r7
10048e1c:	b002      	add	sp, #8
10048e1e:	bd80      	pop	{r7, pc}

10048e20 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
10048e20:	b590      	push	{r4, r7, lr}
10048e22:	b089      	sub	sp, #36	@ 0x24
10048e24:	af02      	add	r7, sp, #8
10048e26:	60f8      	str	r0, [r7, #12]
10048e28:	60b9      	str	r1, [r7, #8]
10048e2a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10048e2c:	4b97      	ldr	r3, [pc, #604]	@ (1004908c <I2C_Mem_ISR_IT+0x26c>)
10048e2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
10048e30:	68bb      	ldr	r3, [r7, #8]
10048e32:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10048e34:	68fb      	ldr	r3, [r7, #12]
10048e36:	2240      	movs	r2, #64	@ 0x40
10048e38:	5c9b      	ldrb	r3, [r3, r2]
10048e3a:	2b01      	cmp	r3, #1
10048e3c:	d101      	bne.n	10048e42 <I2C_Mem_ISR_IT+0x22>
10048e3e:	2302      	movs	r3, #2
10048e40:	e11f      	b.n	10049082 <I2C_Mem_ISR_IT+0x262>
10048e42:	68fb      	ldr	r3, [r7, #12]
10048e44:	2240      	movs	r2, #64	@ 0x40
10048e46:	2101      	movs	r1, #1
10048e48:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10048e4a:	693b      	ldr	r3, [r7, #16]
10048e4c:	091b      	lsrs	r3, r3, #4
10048e4e:	001a      	movs	r2, r3
10048e50:	2301      	movs	r3, #1
10048e52:	4013      	ands	r3, r2
10048e54:	d014      	beq.n	10048e80 <I2C_Mem_ISR_IT+0x60>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10048e56:	687b      	ldr	r3, [r7, #4]
10048e58:	091b      	lsrs	r3, r3, #4
10048e5a:	001a      	movs	r2, r3
10048e5c:	2301      	movs	r3, #1
10048e5e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10048e60:	d00e      	beq.n	10048e80 <I2C_Mem_ISR_IT+0x60>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048e62:	68fb      	ldr	r3, [r7, #12]
10048e64:	681b      	ldr	r3, [r3, #0]
10048e66:	2210      	movs	r2, #16
10048e68:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048e6a:	68fb      	ldr	r3, [r7, #12]
10048e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048e6e:	2204      	movs	r2, #4
10048e70:	431a      	orrs	r2, r3
10048e72:	68fb      	ldr	r3, [r7, #12]
10048e74:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10048e76:	68fb      	ldr	r3, [r7, #12]
10048e78:	0018      	movs	r0, r3
10048e7a:	f001 fa96 	bl	1004a3aa <I2C_Flush_TXDR>
10048e7e:	e0e9      	b.n	10049054 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10048e80:	693b      	ldr	r3, [r7, #16]
10048e82:	089b      	lsrs	r3, r3, #2
10048e84:	001a      	movs	r2, r3
10048e86:	2301      	movs	r3, #1
10048e88:	4013      	ands	r3, r2
10048e8a:	d023      	beq.n	10048ed4 <I2C_Mem_ISR_IT+0xb4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10048e8c:	687b      	ldr	r3, [r7, #4]
10048e8e:	089b      	lsrs	r3, r3, #2
10048e90:	001a      	movs	r2, r3
10048e92:	2301      	movs	r3, #1
10048e94:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
10048e96:	d01d      	beq.n	10048ed4 <I2C_Mem_ISR_IT+0xb4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10048e98:	693b      	ldr	r3, [r7, #16]
10048e9a:	2204      	movs	r2, #4
10048e9c:	4393      	bics	r3, r2
10048e9e:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10048ea0:	68fb      	ldr	r3, [r7, #12]
10048ea2:	681b      	ldr	r3, [r3, #0]
10048ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10048ea6:	68fb      	ldr	r3, [r7, #12]
10048ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048eaa:	b2d2      	uxtb	r2, r2
10048eac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10048eae:	68fb      	ldr	r3, [r7, #12]
10048eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048eb2:	1c5a      	adds	r2, r3, #1
10048eb4:	68fb      	ldr	r3, [r7, #12]
10048eb6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
10048eb8:	68fb      	ldr	r3, [r7, #12]
10048eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048ebc:	3b01      	subs	r3, #1
10048ebe:	b29a      	uxth	r2, r3
10048ec0:	68fb      	ldr	r3, [r7, #12]
10048ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
10048ec4:	68fb      	ldr	r3, [r7, #12]
10048ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048ec8:	b29b      	uxth	r3, r3
10048eca:	3b01      	subs	r3, #1
10048ecc:	b29a      	uxth	r2, r3
10048ece:	68fb      	ldr	r3, [r7, #12]
10048ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
10048ed2:	e0bf      	b.n	10049054 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10048ed4:	693b      	ldr	r3, [r7, #16]
10048ed6:	085b      	lsrs	r3, r3, #1
10048ed8:	001a      	movs	r2, r3
10048eda:	2301      	movs	r3, #1
10048edc:	4013      	ands	r3, r2
10048ede:	d02c      	beq.n	10048f3a <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10048ee0:	687b      	ldr	r3, [r7, #4]
10048ee2:	085b      	lsrs	r3, r3, #1
10048ee4:	001a      	movs	r2, r3
10048ee6:	2301      	movs	r3, #1
10048ee8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10048eea:	d026      	beq.n	10048f3a <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10048eec:	68fb      	ldr	r3, [r7, #12]
10048eee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10048ef0:	3301      	adds	r3, #1
10048ef2:	d118      	bne.n	10048f26 <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10048ef4:	68fb      	ldr	r3, [r7, #12]
10048ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048ef8:	781a      	ldrb	r2, [r3, #0]
10048efa:	68fb      	ldr	r3, [r7, #12]
10048efc:	681b      	ldr	r3, [r3, #0]
10048efe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10048f00:	68fb      	ldr	r3, [r7, #12]
10048f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048f04:	1c5a      	adds	r2, r3, #1
10048f06:	68fb      	ldr	r3, [r7, #12]
10048f08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10048f0a:	68fb      	ldr	r3, [r7, #12]
10048f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048f0e:	3b01      	subs	r3, #1
10048f10:	b29a      	uxth	r2, r3
10048f12:	68fb      	ldr	r3, [r7, #12]
10048f14:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10048f16:	68fb      	ldr	r3, [r7, #12]
10048f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048f1a:	b29b      	uxth	r3, r3
10048f1c:	3b01      	subs	r3, #1
10048f1e:	b29a      	uxth	r2, r3
10048f20:	68fb      	ldr	r3, [r7, #12]
10048f22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10048f24:	e096      	b.n	10049054 <I2C_Mem_ISR_IT+0x234>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
10048f26:	68fb      	ldr	r3, [r7, #12]
10048f28:	681b      	ldr	r3, [r3, #0]
10048f2a:	68fa      	ldr	r2, [r7, #12]
10048f2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10048f2e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10048f30:	68fb      	ldr	r3, [r7, #12]
10048f32:	2201      	movs	r2, #1
10048f34:	4252      	negs	r2, r2
10048f36:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10048f38:	e08c      	b.n	10049054 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10048f3a:	693b      	ldr	r3, [r7, #16]
10048f3c:	09db      	lsrs	r3, r3, #7
10048f3e:	001a      	movs	r2, r3
10048f40:	2301      	movs	r3, #1
10048f42:	4013      	ands	r3, r2
10048f44:	d03e      	beq.n	10048fc4 <I2C_Mem_ISR_IT+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048f46:	687b      	ldr	r3, [r7, #4]
10048f48:	099b      	lsrs	r3, r3, #6
10048f4a:	001a      	movs	r2, r3
10048f4c:	2301      	movs	r3, #1
10048f4e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10048f50:	d038      	beq.n	10048fc4 <I2C_Mem_ISR_IT+0x1a4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10048f52:	68fb      	ldr	r3, [r7, #12]
10048f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048f56:	b29b      	uxth	r3, r3
10048f58:	2b00      	cmp	r3, #0
10048f5a:	d02c      	beq.n	10048fb6 <I2C_Mem_ISR_IT+0x196>
10048f5c:	68fb      	ldr	r3, [r7, #12]
10048f5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048f60:	2b00      	cmp	r3, #0
10048f62:	d128      	bne.n	10048fb6 <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048f64:	68fb      	ldr	r3, [r7, #12]
10048f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048f68:	b29b      	uxth	r3, r3
10048f6a:	2bff      	cmp	r3, #255	@ 0xff
10048f6c:	d910      	bls.n	10048f90 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10048f6e:	68fb      	ldr	r3, [r7, #12]
10048f70:	22ff      	movs	r2, #255	@ 0xff
10048f72:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048f74:	68fb      	ldr	r3, [r7, #12]
10048f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048f78:	b299      	uxth	r1, r3
10048f7a:	68fb      	ldr	r3, [r7, #12]
10048f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048f7e:	b2da      	uxtb	r2, r3
10048f80:	2380      	movs	r3, #128	@ 0x80
10048f82:	045b      	lsls	r3, r3, #17
10048f84:	68f8      	ldr	r0, [r7, #12]
10048f86:	2400      	movs	r4, #0
10048f88:	9400      	str	r4, [sp, #0]
10048f8a:	f001 fa4f 	bl	1004a42c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048f8e:	e018      	b.n	10048fc2 <I2C_Mem_ISR_IT+0x1a2>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
10048f90:	68fb      	ldr	r3, [r7, #12]
10048f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048f94:	b29a      	uxth	r2, r3
10048f96:	68fb      	ldr	r3, [r7, #12]
10048f98:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048f9a:	68fb      	ldr	r3, [r7, #12]
10048f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048f9e:	b299      	uxth	r1, r3
10048fa0:	68fb      	ldr	r3, [r7, #12]
10048fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048fa4:	b2da      	uxtb	r2, r3
10048fa6:	2380      	movs	r3, #128	@ 0x80
10048fa8:	049b      	lsls	r3, r3, #18
10048faa:	68f8      	ldr	r0, [r7, #12]
10048fac:	2400      	movs	r4, #0
10048fae:	9400      	str	r4, [sp, #0]
10048fb0:	f001 fa3c 	bl	1004a42c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048fb4:	e005      	b.n	10048fc2 <I2C_Mem_ISR_IT+0x1a2>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10048fb6:	68fb      	ldr	r3, [r7, #12]
10048fb8:	2140      	movs	r1, #64	@ 0x40
10048fba:	0018      	movs	r0, r3
10048fbc:	f001 f8ca 	bl	1004a154 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
10048fc0:	e048      	b.n	10049054 <I2C_Mem_ISR_IT+0x234>
10048fc2:	e047      	b.n	10049054 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10048fc4:	693b      	ldr	r3, [r7, #16]
10048fc6:	099b      	lsrs	r3, r3, #6
10048fc8:	001a      	movs	r2, r3
10048fca:	2301      	movs	r3, #1
10048fcc:	4013      	ands	r3, r2
10048fce:	d041      	beq.n	10049054 <I2C_Mem_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048fd0:	687b      	ldr	r3, [r7, #4]
10048fd2:	099b      	lsrs	r3, r3, #6
10048fd4:	001a      	movs	r2, r3
10048fd6:	2301      	movs	r3, #1
10048fd8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
10048fda:	d03b      	beq.n	10049054 <I2C_Mem_ISR_IT+0x234>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10048fdc:	68fb      	ldr	r3, [r7, #12]
10048fde:	2101      	movs	r1, #1
10048fe0:	0018      	movs	r0, r3
10048fe2:	f001 fae7 	bl	1004a5b4 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
10048fe6:	68fb      	ldr	r3, [r7, #12]
10048fe8:	2102      	movs	r1, #2
10048fea:	0018      	movs	r0, r3
10048fec:	f001 fa58 	bl	1004a4a0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048ff0:	68fb      	ldr	r3, [r7, #12]
10048ff2:	2241      	movs	r2, #65	@ 0x41
10048ff4:	5c9b      	ldrb	r3, [r3, r2]
10048ff6:	b2db      	uxtb	r3, r3
10048ff8:	2b22      	cmp	r3, #34	@ 0x22
10048ffa:	d101      	bne.n	10049000 <I2C_Mem_ISR_IT+0x1e0>
    {
      direction = I2C_GENERATE_START_READ;
10048ffc:	4b24      	ldr	r3, [pc, #144]	@ (10049090 <I2C_Mem_ISR_IT+0x270>)
10048ffe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10049000:	68fb      	ldr	r3, [r7, #12]
10049002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049004:	b29b      	uxth	r3, r3
10049006:	2bff      	cmp	r3, #255	@ 0xff
10049008:	d911      	bls.n	1004902e <I2C_Mem_ISR_IT+0x20e>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
1004900a:	68fb      	ldr	r3, [r7, #12]
1004900c:	22ff      	movs	r2, #255	@ 0xff
1004900e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049010:	68fb      	ldr	r3, [r7, #12]
10049012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10049014:	b299      	uxth	r1, r3
10049016:	68fb      	ldr	r3, [r7, #12]
10049018:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004901a:	b2da      	uxtb	r2, r3
1004901c:	2380      	movs	r3, #128	@ 0x80
1004901e:	045c      	lsls	r4, r3, #17
10049020:	68f8      	ldr	r0, [r7, #12]
10049022:	697b      	ldr	r3, [r7, #20]
10049024:	9300      	str	r3, [sp, #0]
10049026:	0023      	movs	r3, r4
10049028:	f001 fa00 	bl	1004a42c <I2C_TransferConfig>
1004902c:	e012      	b.n	10049054 <I2C_Mem_ISR_IT+0x234>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
1004902e:	68fb      	ldr	r3, [r7, #12]
10049030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049032:	b29a      	uxth	r2, r3
10049034:	68fb      	ldr	r3, [r7, #12]
10049036:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10049038:	68fb      	ldr	r3, [r7, #12]
1004903a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004903c:	b299      	uxth	r1, r3
1004903e:	68fb      	ldr	r3, [r7, #12]
10049040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049042:	b2da      	uxtb	r2, r3
10049044:	2380      	movs	r3, #128	@ 0x80
10049046:	049c      	lsls	r4, r3, #18
10049048:	68f8      	ldr	r0, [r7, #12]
1004904a:	697b      	ldr	r3, [r7, #20]
1004904c:	9300      	str	r3, [sp, #0]
1004904e:	0023      	movs	r3, r4
10049050:	f001 f9ec 	bl	1004a42c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10049054:	693b      	ldr	r3, [r7, #16]
10049056:	095b      	lsrs	r3, r3, #5
10049058:	001a      	movs	r2, r3
1004905a:	2301      	movs	r3, #1
1004905c:	4013      	ands	r3, r2
1004905e:	d00b      	beq.n	10049078 <I2C_Mem_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10049060:	687b      	ldr	r3, [r7, #4]
10049062:	095b      	lsrs	r3, r3, #5
10049064:	001a      	movs	r2, r3
10049066:	2301      	movs	r3, #1
10049068:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
1004906a:	d005      	beq.n	10049078 <I2C_Mem_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
1004906c:	693a      	ldr	r2, [r7, #16]
1004906e:	68fb      	ldr	r3, [r7, #12]
10049070:	0011      	movs	r1, r2
10049072:	0018      	movs	r0, r3
10049074:	f000 fdb2 	bl	10049bdc <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10049078:	68fb      	ldr	r3, [r7, #12]
1004907a:	2240      	movs	r2, #64	@ 0x40
1004907c:	2100      	movs	r1, #0
1004907e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049080:	2300      	movs	r3, #0
}
10049082:	0018      	movs	r0, r3
10049084:	46bd      	mov	sp, r7
10049086:	b007      	add	sp, #28
10049088:	bd90      	pop	{r4, r7, pc}
1004908a:	46c0      	nop			@ (mov r8, r8)
1004908c:	80002000 	.word	0x80002000
10049090:	80002400 	.word	0x80002400

10049094 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
10049094:	b580      	push	{r7, lr}
10049096:	b086      	sub	sp, #24
10049098:	af00      	add	r7, sp, #0
1004909a:	60f8      	str	r0, [r7, #12]
1004909c:	60b9      	str	r1, [r7, #8]
1004909e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
100490a0:	68fb      	ldr	r3, [r7, #12]
100490a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100490a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
100490a6:	68bb      	ldr	r3, [r7, #8]
100490a8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
100490aa:	68fb      	ldr	r3, [r7, #12]
100490ac:	2240      	movs	r2, #64	@ 0x40
100490ae:	5c9b      	ldrb	r3, [r3, r2]
100490b0:	2b01      	cmp	r3, #1
100490b2:	d101      	bne.n	100490b8 <I2C_Slave_ISR_IT+0x24>
100490b4:	2302      	movs	r3, #2
100490b6:	e0fb      	b.n	100492b0 <I2C_Slave_ISR_IT+0x21c>
100490b8:	68fb      	ldr	r3, [r7, #12]
100490ba:	2240      	movs	r2, #64	@ 0x40
100490bc:	2101      	movs	r1, #1
100490be:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100490c0:	693b      	ldr	r3, [r7, #16]
100490c2:	095b      	lsrs	r3, r3, #5
100490c4:	001a      	movs	r2, r3
100490c6:	2301      	movs	r3, #1
100490c8:	4013      	ands	r3, r2
100490ca:	d00c      	beq.n	100490e6 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100490cc:	687b      	ldr	r3, [r7, #4]
100490ce:	095b      	lsrs	r3, r3, #5
100490d0:	001a      	movs	r2, r3
100490d2:	2301      	movs	r3, #1
100490d4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100490d6:	d006      	beq.n	100490e6 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
100490d8:	693a      	ldr	r2, [r7, #16]
100490da:	68fb      	ldr	r3, [r7, #12]
100490dc:	0011      	movs	r1, r2
100490de:	0018      	movs	r0, r3
100490e0:	f000 fe4e 	bl	10049d80 <I2C_ITSlaveCplt>
100490e4:	e0df      	b.n	100492a6 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100490e6:	693b      	ldr	r3, [r7, #16]
100490e8:	091b      	lsrs	r3, r3, #4
100490ea:	001a      	movs	r2, r3
100490ec:	2301      	movs	r3, #1
100490ee:	4013      	ands	r3, r2
100490f0:	d054      	beq.n	1004919c <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100490f2:	687b      	ldr	r3, [r7, #4]
100490f4:	091b      	lsrs	r3, r3, #4
100490f6:	001a      	movs	r2, r3
100490f8:	2301      	movs	r3, #1
100490fa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100490fc:	d04e      	beq.n	1004919c <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
100490fe:	68fb      	ldr	r3, [r7, #12]
10049100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049102:	b29b      	uxth	r3, r3
10049104:	2b00      	cmp	r3, #0
10049106:	d12d      	bne.n	10049164 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10049108:	68fb      	ldr	r3, [r7, #12]
1004910a:	2241      	movs	r2, #65	@ 0x41
1004910c:	5c9b      	ldrb	r3, [r3, r2]
1004910e:	b2db      	uxtb	r3, r3
10049110:	2b28      	cmp	r3, #40	@ 0x28
10049112:	d10b      	bne.n	1004912c <I2C_Slave_ISR_IT+0x98>
10049114:	697a      	ldr	r2, [r7, #20]
10049116:	2380      	movs	r3, #128	@ 0x80
10049118:	049b      	lsls	r3, r3, #18
1004911a:	429a      	cmp	r2, r3
1004911c:	d106      	bne.n	1004912c <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
1004911e:	693a      	ldr	r2, [r7, #16]
10049120:	68fb      	ldr	r3, [r7, #12]
10049122:	0011      	movs	r1, r2
10049124:	0018      	movs	r0, r3
10049126:	f000 ffbb 	bl	1004a0a0 <I2C_ITListenCplt>
1004912a:	e036      	b.n	1004919a <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
1004912c:	68fb      	ldr	r3, [r7, #12]
1004912e:	2241      	movs	r2, #65	@ 0x41
10049130:	5c9b      	ldrb	r3, [r3, r2]
10049132:	b2db      	uxtb	r3, r3
10049134:	2b29      	cmp	r3, #41	@ 0x29
10049136:	d110      	bne.n	1004915a <I2C_Slave_ISR_IT+0xc6>
10049138:	697b      	ldr	r3, [r7, #20]
1004913a:	4a5f      	ldr	r2, [pc, #380]	@ (100492b8 <I2C_Slave_ISR_IT+0x224>)
1004913c:	4293      	cmp	r3, r2
1004913e:	d00c      	beq.n	1004915a <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049140:	68fb      	ldr	r3, [r7, #12]
10049142:	681b      	ldr	r3, [r3, #0]
10049144:	2210      	movs	r2, #16
10049146:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10049148:	68fb      	ldr	r3, [r7, #12]
1004914a:	0018      	movs	r0, r3
1004914c:	f001 f92d 	bl	1004a3aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10049150:	68fb      	ldr	r3, [r7, #12]
10049152:	0018      	movs	r0, r3
10049154:	f000 fcdc 	bl	10049b10 <I2C_ITSlaveSeqCplt>
10049158:	e01f      	b.n	1004919a <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004915a:	68fb      	ldr	r3, [r7, #12]
1004915c:	681b      	ldr	r3, [r3, #0]
1004915e:	2210      	movs	r2, #16
10049160:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
10049162:	e09d      	b.n	100492a0 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049164:	68fb      	ldr	r3, [r7, #12]
10049166:	681b      	ldr	r3, [r3, #0]
10049168:	2210      	movs	r2, #16
1004916a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004916c:	68fb      	ldr	r3, [r7, #12]
1004916e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049170:	2204      	movs	r2, #4
10049172:	431a      	orrs	r2, r3
10049174:	68fb      	ldr	r3, [r7, #12]
10049176:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10049178:	697b      	ldr	r3, [r7, #20]
1004917a:	2b00      	cmp	r3, #0
1004917c:	d005      	beq.n	1004918a <I2C_Slave_ISR_IT+0xf6>
1004917e:	697a      	ldr	r2, [r7, #20]
10049180:	2380      	movs	r3, #128	@ 0x80
10049182:	045b      	lsls	r3, r3, #17
10049184:	429a      	cmp	r2, r3
10049186:	d000      	beq.n	1004918a <I2C_Slave_ISR_IT+0xf6>
10049188:	e08a      	b.n	100492a0 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
1004918a:	68fb      	ldr	r3, [r7, #12]
1004918c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004918e:	68fb      	ldr	r3, [r7, #12]
10049190:	0011      	movs	r1, r2
10049192:	0018      	movs	r0, r3
10049194:	f000 ffde 	bl	1004a154 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10049198:	e082      	b.n	100492a0 <I2C_Slave_ISR_IT+0x20c>
1004919a:	e081      	b.n	100492a0 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
1004919c:	693b      	ldr	r3, [r7, #16]
1004919e:	089b      	lsrs	r3, r3, #2
100491a0:	001a      	movs	r2, r3
100491a2:	2301      	movs	r3, #1
100491a4:	4013      	ands	r3, r2
100491a6:	d031      	beq.n	1004920c <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
100491a8:	687b      	ldr	r3, [r7, #4]
100491aa:	089b      	lsrs	r3, r3, #2
100491ac:	001a      	movs	r2, r3
100491ae:	2301      	movs	r3, #1
100491b0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100491b2:	d02b      	beq.n	1004920c <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
100491b4:	68fb      	ldr	r3, [r7, #12]
100491b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100491b8:	b29b      	uxth	r3, r3
100491ba:	2b00      	cmp	r3, #0
100491bc:	d018      	beq.n	100491f0 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100491be:	68fb      	ldr	r3, [r7, #12]
100491c0:	681b      	ldr	r3, [r3, #0]
100491c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100491c4:	68fb      	ldr	r3, [r7, #12]
100491c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100491c8:	b2d2      	uxtb	r2, r2
100491ca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100491cc:	68fb      	ldr	r3, [r7, #12]
100491ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100491d0:	1c5a      	adds	r2, r3, #1
100491d2:	68fb      	ldr	r3, [r7, #12]
100491d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
100491d6:	68fb      	ldr	r3, [r7, #12]
100491d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100491da:	3b01      	subs	r3, #1
100491dc:	b29a      	uxth	r2, r3
100491de:	68fb      	ldr	r3, [r7, #12]
100491e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100491e2:	68fb      	ldr	r3, [r7, #12]
100491e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100491e6:	b29b      	uxth	r3, r3
100491e8:	3b01      	subs	r3, #1
100491ea:	b29a      	uxth	r2, r3
100491ec:	68fb      	ldr	r3, [r7, #12]
100491ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
100491f0:	68fb      	ldr	r3, [r7, #12]
100491f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100491f4:	b29b      	uxth	r3, r3
100491f6:	2b00      	cmp	r3, #0
100491f8:	d154      	bne.n	100492a4 <I2C_Slave_ISR_IT+0x210>
100491fa:	697b      	ldr	r3, [r7, #20]
100491fc:	4a2e      	ldr	r2, [pc, #184]	@ (100492b8 <I2C_Slave_ISR_IT+0x224>)
100491fe:	4293      	cmp	r3, r2
10049200:	d050      	beq.n	100492a4 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
10049202:	68fb      	ldr	r3, [r7, #12]
10049204:	0018      	movs	r0, r3
10049206:	f000 fc83 	bl	10049b10 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
1004920a:	e04b      	b.n	100492a4 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
1004920c:	693b      	ldr	r3, [r7, #16]
1004920e:	08db      	lsrs	r3, r3, #3
10049210:	001a      	movs	r2, r3
10049212:	2301      	movs	r3, #1
10049214:	4013      	ands	r3, r2
10049216:	d00c      	beq.n	10049232 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10049218:	687b      	ldr	r3, [r7, #4]
1004921a:	08db      	lsrs	r3, r3, #3
1004921c:	001a      	movs	r2, r3
1004921e:	2301      	movs	r3, #1
10049220:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10049222:	d006      	beq.n	10049232 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10049224:	693a      	ldr	r2, [r7, #16]
10049226:	68fb      	ldr	r3, [r7, #12]
10049228:	0011      	movs	r1, r2
1004922a:	0018      	movs	r0, r3
1004922c:	f000 fb8a 	bl	10049944 <I2C_ITAddrCplt>
10049230:	e039      	b.n	100492a6 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10049232:	693b      	ldr	r3, [r7, #16]
10049234:	085b      	lsrs	r3, r3, #1
10049236:	001a      	movs	r2, r3
10049238:	2301      	movs	r3, #1
1004923a:	4013      	ands	r3, r2
1004923c:	d033      	beq.n	100492a6 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
1004923e:	687b      	ldr	r3, [r7, #4]
10049240:	085b      	lsrs	r3, r3, #1
10049242:	001a      	movs	r2, r3
10049244:	2301      	movs	r3, #1
10049246:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10049248:	d02d      	beq.n	100492a6 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
1004924a:	68fb      	ldr	r3, [r7, #12]
1004924c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004924e:	b29b      	uxth	r3, r3
10049250:	2b00      	cmp	r3, #0
10049252:	d018      	beq.n	10049286 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10049254:	68fb      	ldr	r3, [r7, #12]
10049256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049258:	781a      	ldrb	r2, [r3, #0]
1004925a:	68fb      	ldr	r3, [r7, #12]
1004925c:	681b      	ldr	r3, [r3, #0]
1004925e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
10049260:	68fb      	ldr	r3, [r7, #12]
10049262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049264:	1c5a      	adds	r2, r3, #1
10049266:	68fb      	ldr	r3, [r7, #12]
10049268:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
1004926a:	68fb      	ldr	r3, [r7, #12]
1004926c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004926e:	b29b      	uxth	r3, r3
10049270:	3b01      	subs	r3, #1
10049272:	b29a      	uxth	r2, r3
10049274:	68fb      	ldr	r3, [r7, #12]
10049276:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10049278:	68fb      	ldr	r3, [r7, #12]
1004927a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004927c:	3b01      	subs	r3, #1
1004927e:	b29a      	uxth	r2, r3
10049280:	68fb      	ldr	r3, [r7, #12]
10049282:	851a      	strh	r2, [r3, #40]	@ 0x28
10049284:	e00f      	b.n	100492a6 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
10049286:	697a      	ldr	r2, [r7, #20]
10049288:	2380      	movs	r3, #128	@ 0x80
1004928a:	045b      	lsls	r3, r3, #17
1004928c:	429a      	cmp	r2, r3
1004928e:	d002      	beq.n	10049296 <I2C_Slave_ISR_IT+0x202>
10049290:	697b      	ldr	r3, [r7, #20]
10049292:	2b00      	cmp	r3, #0
10049294:	d107      	bne.n	100492a6 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10049296:	68fb      	ldr	r3, [r7, #12]
10049298:	0018      	movs	r0, r3
1004929a:	f000 fc39 	bl	10049b10 <I2C_ITSlaveSeqCplt>
1004929e:	e002      	b.n	100492a6 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
100492a0:	46c0      	nop			@ (mov r8, r8)
100492a2:	e000      	b.n	100492a6 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
100492a4:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
100492a6:	68fb      	ldr	r3, [r7, #12]
100492a8:	2240      	movs	r2, #64	@ 0x40
100492aa:	2100      	movs	r1, #0
100492ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100492ae:	2300      	movs	r3, #0
}
100492b0:	0018      	movs	r0, r3
100492b2:	46bd      	mov	sp, r7
100492b4:	b006      	add	sp, #24
100492b6:	bd80      	pop	{r7, pc}
100492b8:	ffff0000 	.word	0xffff0000

100492bc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
100492bc:	b590      	push	{r4, r7, lr}
100492be:	b089      	sub	sp, #36	@ 0x24
100492c0:	af02      	add	r7, sp, #8
100492c2:	60f8      	str	r0, [r7, #12]
100492c4:	60b9      	str	r1, [r7, #8]
100492c6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
100492c8:	68fb      	ldr	r3, [r7, #12]
100492ca:	2240      	movs	r2, #64	@ 0x40
100492cc:	5c9b      	ldrb	r3, [r3, r2]
100492ce:	2b01      	cmp	r3, #1
100492d0:	d101      	bne.n	100492d6 <I2C_Master_ISR_DMA+0x1a>
100492d2:	2302      	movs	r3, #2
100492d4:	e0f7      	b.n	100494c6 <I2C_Master_ISR_DMA+0x20a>
100492d6:	68fb      	ldr	r3, [r7, #12]
100492d8:	2240      	movs	r2, #64	@ 0x40
100492da:	2101      	movs	r1, #1
100492dc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100492de:	68bb      	ldr	r3, [r7, #8]
100492e0:	091b      	lsrs	r3, r3, #4
100492e2:	001a      	movs	r2, r3
100492e4:	2301      	movs	r3, #1
100492e6:	4013      	ands	r3, r2
100492e8:	d019      	beq.n	1004931e <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100492ea:	687b      	ldr	r3, [r7, #4]
100492ec:	091b      	lsrs	r3, r3, #4
100492ee:	001a      	movs	r2, r3
100492f0:	2301      	movs	r3, #1
100492f2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100492f4:	d013      	beq.n	1004931e <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100492f6:	68fb      	ldr	r3, [r7, #12]
100492f8:	681b      	ldr	r3, [r3, #0]
100492fa:	2210      	movs	r2, #16
100492fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
100492fe:	68fb      	ldr	r3, [r7, #12]
10049300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049302:	2204      	movs	r2, #4
10049304:	431a      	orrs	r2, r3
10049306:	68fb      	ldr	r3, [r7, #12]
10049308:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
1004930a:	68fb      	ldr	r3, [r7, #12]
1004930c:	2120      	movs	r1, #32
1004930e:	0018      	movs	r0, r3
10049310:	f001 f8c6 	bl	1004a4a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10049314:	68fb      	ldr	r3, [r7, #12]
10049316:	0018      	movs	r0, r3
10049318:	f001 f847 	bl	1004a3aa <I2C_Flush_TXDR>
1004931c:	e0ce      	b.n	100494bc <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
1004931e:	68bb      	ldr	r3, [r7, #8]
10049320:	09db      	lsrs	r3, r3, #7
10049322:	001a      	movs	r2, r3
10049324:	2301      	movs	r3, #1
10049326:	4013      	ands	r3, r2
10049328:	d100      	bne.n	1004932c <I2C_Master_ISR_DMA+0x70>
1004932a:	e07e      	b.n	1004942a <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
1004932c:	687b      	ldr	r3, [r7, #4]
1004932e:	099b      	lsrs	r3, r3, #6
10049330:	001a      	movs	r2, r3
10049332:	2301      	movs	r3, #1
10049334:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10049336:	d100      	bne.n	1004933a <I2C_Master_ISR_DMA+0x7e>
10049338:	e077      	b.n	1004942a <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
1004933a:	68fb      	ldr	r3, [r7, #12]
1004933c:	681b      	ldr	r3, [r3, #0]
1004933e:	681a      	ldr	r2, [r3, #0]
10049340:	68fb      	ldr	r3, [r7, #12]
10049342:	681b      	ldr	r3, [r3, #0]
10049344:	2140      	movs	r1, #64	@ 0x40
10049346:	438a      	bics	r2, r1
10049348:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
1004934a:	68fb      	ldr	r3, [r7, #12]
1004934c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004934e:	b29b      	uxth	r3, r3
10049350:	2b00      	cmp	r3, #0
10049352:	d055      	beq.n	10049400 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
10049354:	68fb      	ldr	r3, [r7, #12]
10049356:	681b      	ldr	r3, [r3, #0]
10049358:	685b      	ldr	r3, [r3, #4]
1004935a:	b29a      	uxth	r2, r3
1004935c:	2312      	movs	r3, #18
1004935e:	18fb      	adds	r3, r7, r3
10049360:	0592      	lsls	r2, r2, #22
10049362:	0d92      	lsrs	r2, r2, #22
10049364:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10049366:	68fb      	ldr	r3, [r7, #12]
10049368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004936a:	b29b      	uxth	r3, r3
1004936c:	2bff      	cmp	r3, #255	@ 0xff
1004936e:	d906      	bls.n	1004937e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
10049370:	68fb      	ldr	r3, [r7, #12]
10049372:	22ff      	movs	r2, #255	@ 0xff
10049374:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
10049376:	2380      	movs	r3, #128	@ 0x80
10049378:	045b      	lsls	r3, r3, #17
1004937a:	617b      	str	r3, [r7, #20]
1004937c:	e010      	b.n	100493a0 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
1004937e:	68fb      	ldr	r3, [r7, #12]
10049380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049382:	b29a      	uxth	r2, r3
10049384:	68fb      	ldr	r3, [r7, #12]
10049386:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10049388:	68fb      	ldr	r3, [r7, #12]
1004938a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004938c:	4a50      	ldr	r2, [pc, #320]	@ (100494d0 <I2C_Master_ISR_DMA+0x214>)
1004938e:	4293      	cmp	r3, r2
10049390:	d003      	beq.n	1004939a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
10049392:	68fb      	ldr	r3, [r7, #12]
10049394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049396:	617b      	str	r3, [r7, #20]
10049398:	e002      	b.n	100493a0 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
1004939a:	2380      	movs	r3, #128	@ 0x80
1004939c:	049b      	lsls	r3, r3, #18
1004939e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
100493a0:	68fb      	ldr	r3, [r7, #12]
100493a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100493a4:	b2da      	uxtb	r2, r3
100493a6:	697c      	ldr	r4, [r7, #20]
100493a8:	2312      	movs	r3, #18
100493aa:	18fb      	adds	r3, r7, r3
100493ac:	8819      	ldrh	r1, [r3, #0]
100493ae:	68f8      	ldr	r0, [r7, #12]
100493b0:	2300      	movs	r3, #0
100493b2:	9300      	str	r3, [sp, #0]
100493b4:	0023      	movs	r3, r4
100493b6:	f001 f839 	bl	1004a42c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
100493ba:	68fb      	ldr	r3, [r7, #12]
100493bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100493be:	b29a      	uxth	r2, r3
100493c0:	68fb      	ldr	r3, [r7, #12]
100493c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100493c4:	1ad3      	subs	r3, r2, r3
100493c6:	b29a      	uxth	r2, r3
100493c8:	68fb      	ldr	r3, [r7, #12]
100493ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100493cc:	68fb      	ldr	r3, [r7, #12]
100493ce:	2241      	movs	r2, #65	@ 0x41
100493d0:	5c9b      	ldrb	r3, [r3, r2]
100493d2:	b2db      	uxtb	r3, r3
100493d4:	2b22      	cmp	r3, #34	@ 0x22
100493d6:	d109      	bne.n	100493ec <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
100493d8:	68fb      	ldr	r3, [r7, #12]
100493da:	681b      	ldr	r3, [r3, #0]
100493dc:	681a      	ldr	r2, [r3, #0]
100493de:	68fb      	ldr	r3, [r7, #12]
100493e0:	681b      	ldr	r3, [r3, #0]
100493e2:	2180      	movs	r1, #128	@ 0x80
100493e4:	0209      	lsls	r1, r1, #8
100493e6:	430a      	orrs	r2, r1
100493e8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
100493ea:	e067      	b.n	100494bc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
100493ec:	68fb      	ldr	r3, [r7, #12]
100493ee:	681b      	ldr	r3, [r3, #0]
100493f0:	681a      	ldr	r2, [r3, #0]
100493f2:	68fb      	ldr	r3, [r7, #12]
100493f4:	681b      	ldr	r3, [r3, #0]
100493f6:	2180      	movs	r1, #128	@ 0x80
100493f8:	01c9      	lsls	r1, r1, #7
100493fa:	430a      	orrs	r2, r1
100493fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
100493fe:	e05d      	b.n	100494bc <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10049400:	68fb      	ldr	r3, [r7, #12]
10049402:	681b      	ldr	r3, [r3, #0]
10049404:	685a      	ldr	r2, [r3, #4]
10049406:	2380      	movs	r3, #128	@ 0x80
10049408:	049b      	lsls	r3, r3, #18
1004940a:	401a      	ands	r2, r3
1004940c:	2380      	movs	r3, #128	@ 0x80
1004940e:	049b      	lsls	r3, r3, #18
10049410:	429a      	cmp	r2, r3
10049412:	d004      	beq.n	1004941e <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
10049414:	68fb      	ldr	r3, [r7, #12]
10049416:	0018      	movs	r0, r3
10049418:	f000 fb38 	bl	10049a8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
1004941c:	e04e      	b.n	100494bc <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
1004941e:	68fb      	ldr	r3, [r7, #12]
10049420:	2140      	movs	r1, #64	@ 0x40
10049422:	0018      	movs	r0, r3
10049424:	f000 fe96 	bl	1004a154 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10049428:	e048      	b.n	100494bc <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
1004942a:	68bb      	ldr	r3, [r7, #8]
1004942c:	099b      	lsrs	r3, r3, #6
1004942e:	001a      	movs	r2, r3
10049430:	2301      	movs	r3, #1
10049432:	4013      	ands	r3, r2
10049434:	d02e      	beq.n	10049494 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10049436:	687b      	ldr	r3, [r7, #4]
10049438:	099b      	lsrs	r3, r3, #6
1004943a:	001a      	movs	r2, r3
1004943c:	2301      	movs	r3, #1
1004943e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10049440:	d028      	beq.n	10049494 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
10049442:	68fb      	ldr	r3, [r7, #12]
10049444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049446:	b29b      	uxth	r3, r3
10049448:	2b00      	cmp	r3, #0
1004944a:	d11d      	bne.n	10049488 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
1004944c:	68fb      	ldr	r3, [r7, #12]
1004944e:	681b      	ldr	r3, [r3, #0]
10049450:	685a      	ldr	r2, [r3, #4]
10049452:	2380      	movs	r3, #128	@ 0x80
10049454:	049b      	lsls	r3, r3, #18
10049456:	401a      	ands	r2, r3
10049458:	2380      	movs	r3, #128	@ 0x80
1004945a:	049b      	lsls	r3, r3, #18
1004945c:	429a      	cmp	r2, r3
1004945e:	d02c      	beq.n	100494ba <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
10049460:	68fb      	ldr	r3, [r7, #12]
10049462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049464:	4a1a      	ldr	r2, [pc, #104]	@ (100494d0 <I2C_Master_ISR_DMA+0x214>)
10049466:	4293      	cmp	r3, r2
10049468:	d109      	bne.n	1004947e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
1004946a:	68fb      	ldr	r3, [r7, #12]
1004946c:	681b      	ldr	r3, [r3, #0]
1004946e:	685a      	ldr	r2, [r3, #4]
10049470:	68fb      	ldr	r3, [r7, #12]
10049472:	681b      	ldr	r3, [r3, #0]
10049474:	2180      	movs	r1, #128	@ 0x80
10049476:	01c9      	lsls	r1, r1, #7
10049478:	430a      	orrs	r2, r1
1004947a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
1004947c:	e01d      	b.n	100494ba <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
1004947e:	68fb      	ldr	r3, [r7, #12]
10049480:	0018      	movs	r0, r3
10049482:	f000 fb03 	bl	10049a8c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
10049486:	e018      	b.n	100494ba <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10049488:	68fb      	ldr	r3, [r7, #12]
1004948a:	2140      	movs	r1, #64	@ 0x40
1004948c:	0018      	movs	r0, r3
1004948e:	f000 fe61 	bl	1004a154 <I2C_ITError>
    if (hi2c->XferCount == 0U)
10049492:	e012      	b.n	100494ba <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049494:	68bb      	ldr	r3, [r7, #8]
10049496:	095b      	lsrs	r3, r3, #5
10049498:	001a      	movs	r2, r3
1004949a:	2301      	movs	r3, #1
1004949c:	4013      	ands	r3, r2
1004949e:	d00d      	beq.n	100494bc <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100494a0:	687b      	ldr	r3, [r7, #4]
100494a2:	095b      	lsrs	r3, r3, #5
100494a4:	001a      	movs	r2, r3
100494a6:	2301      	movs	r3, #1
100494a8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
100494aa:	d007      	beq.n	100494bc <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
100494ac:	68ba      	ldr	r2, [r7, #8]
100494ae:	68fb      	ldr	r3, [r7, #12]
100494b0:	0011      	movs	r1, r2
100494b2:	0018      	movs	r0, r3
100494b4:	f000 fb92 	bl	10049bdc <I2C_ITMasterCplt>
100494b8:	e000      	b.n	100494bc <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
100494ba:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
100494bc:	68fb      	ldr	r3, [r7, #12]
100494be:	2240      	movs	r2, #64	@ 0x40
100494c0:	2100      	movs	r1, #0
100494c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100494c4:	2300      	movs	r3, #0
}
100494c6:	0018      	movs	r0, r3
100494c8:	46bd      	mov	sp, r7
100494ca:	b007      	add	sp, #28
100494cc:	bd90      	pop	{r4, r7, pc}
100494ce:	46c0      	nop			@ (mov r8, r8)
100494d0:	ffff0000 	.word	0xffff0000

100494d4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
100494d4:	b590      	push	{r4, r7, lr}
100494d6:	b089      	sub	sp, #36	@ 0x24
100494d8:	af02      	add	r7, sp, #8
100494da:	60f8      	str	r0, [r7, #12]
100494dc:	60b9      	str	r1, [r7, #8]
100494de:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
100494e0:	4b9a      	ldr	r3, [pc, #616]	@ (1004974c <I2C_Mem_ISR_DMA+0x278>)
100494e2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
100494e4:	68fb      	ldr	r3, [r7, #12]
100494e6:	2240      	movs	r2, #64	@ 0x40
100494e8:	5c9b      	ldrb	r3, [r3, r2]
100494ea:	2b01      	cmp	r3, #1
100494ec:	d101      	bne.n	100494f2 <I2C_Mem_ISR_DMA+0x1e>
100494ee:	2302      	movs	r3, #2
100494f0:	e127      	b.n	10049742 <I2C_Mem_ISR_DMA+0x26e>
100494f2:	68fb      	ldr	r3, [r7, #12]
100494f4:	2240      	movs	r2, #64	@ 0x40
100494f6:	2101      	movs	r1, #1
100494f8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100494fa:	68bb      	ldr	r3, [r7, #8]
100494fc:	091b      	lsrs	r3, r3, #4
100494fe:	001a      	movs	r2, r3
10049500:	2301      	movs	r3, #1
10049502:	4013      	ands	r3, r2
10049504:	d019      	beq.n	1004953a <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10049506:	687b      	ldr	r3, [r7, #4]
10049508:	091b      	lsrs	r3, r3, #4
1004950a:	001a      	movs	r2, r3
1004950c:	2301      	movs	r3, #1
1004950e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10049510:	d013      	beq.n	1004953a <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049512:	68fb      	ldr	r3, [r7, #12]
10049514:	681b      	ldr	r3, [r3, #0]
10049516:	2210      	movs	r2, #16
10049518:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004951a:	68fb      	ldr	r3, [r7, #12]
1004951c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004951e:	2204      	movs	r2, #4
10049520:	431a      	orrs	r2, r3
10049522:	68fb      	ldr	r3, [r7, #12]
10049524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
10049526:	68fb      	ldr	r3, [r7, #12]
10049528:	2120      	movs	r1, #32
1004952a:	0018      	movs	r0, r3
1004952c:	f000 ffb8 	bl	1004a4a0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10049530:	68fb      	ldr	r3, [r7, #12]
10049532:	0018      	movs	r0, r3
10049534:	f000 ff39 	bl	1004a3aa <I2C_Flush_TXDR>
10049538:	e0fe      	b.n	10049738 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
1004953a:	68bb      	ldr	r3, [r7, #8]
1004953c:	085b      	lsrs	r3, r3, #1
1004953e:	001a      	movs	r2, r3
10049540:	2301      	movs	r3, #1
10049542:	4013      	ands	r3, r2
10049544:	d00f      	beq.n	10049566 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10049546:	687b      	ldr	r3, [r7, #4]
10049548:	085b      	lsrs	r3, r3, #1
1004954a:	001a      	movs	r2, r3
1004954c:	2301      	movs	r3, #1
1004954e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
10049550:	d009      	beq.n	10049566 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
10049552:	68fb      	ldr	r3, [r7, #12]
10049554:	681b      	ldr	r3, [r3, #0]
10049556:	68fa      	ldr	r2, [r7, #12]
10049558:	6d12      	ldr	r2, [r2, #80]	@ 0x50
1004955a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
1004955c:	68fb      	ldr	r3, [r7, #12]
1004955e:	2201      	movs	r2, #1
10049560:	4252      	negs	r2, r2
10049562:	651a      	str	r2, [r3, #80]	@ 0x50
10049564:	e0e8      	b.n	10049738 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10049566:	68bb      	ldr	r3, [r7, #8]
10049568:	09db      	lsrs	r3, r3, #7
1004956a:	001a      	movs	r2, r3
1004956c:	2301      	movs	r3, #1
1004956e:	4013      	ands	r3, r2
10049570:	d065      	beq.n	1004963e <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10049572:	687b      	ldr	r3, [r7, #4]
10049574:	099b      	lsrs	r3, r3, #6
10049576:	001a      	movs	r2, r3
10049578:	2301      	movs	r3, #1
1004957a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
1004957c:	d05f      	beq.n	1004963e <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004957e:	68fb      	ldr	r3, [r7, #12]
10049580:	2101      	movs	r1, #1
10049582:	0018      	movs	r0, r3
10049584:	f001 f816 	bl	1004a5b4 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10049588:	68fb      	ldr	r3, [r7, #12]
1004958a:	2110      	movs	r1, #16
1004958c:	0018      	movs	r0, r3
1004958e:	f000 ff87 	bl	1004a4a0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
10049592:	68fb      	ldr	r3, [r7, #12]
10049594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049596:	b29b      	uxth	r3, r3
10049598:	2b00      	cmp	r3, #0
1004959a:	d04a      	beq.n	10049632 <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
1004959c:	68fb      	ldr	r3, [r7, #12]
1004959e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100495a0:	b29b      	uxth	r3, r3
100495a2:	2bff      	cmp	r3, #255	@ 0xff
100495a4:	d910      	bls.n	100495c8 <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
100495a6:	68fb      	ldr	r3, [r7, #12]
100495a8:	22ff      	movs	r2, #255	@ 0xff
100495aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100495ac:	68fb      	ldr	r3, [r7, #12]
100495ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100495b0:	b299      	uxth	r1, r3
100495b2:	68fb      	ldr	r3, [r7, #12]
100495b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100495b6:	b2da      	uxtb	r2, r3
100495b8:	2380      	movs	r3, #128	@ 0x80
100495ba:	045b      	lsls	r3, r3, #17
100495bc:	68f8      	ldr	r0, [r7, #12]
100495be:	2400      	movs	r4, #0
100495c0:	9400      	str	r4, [sp, #0]
100495c2:	f000 ff33 	bl	1004a42c <I2C_TransferConfig>
100495c6:	e011      	b.n	100495ec <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
100495c8:	68fb      	ldr	r3, [r7, #12]
100495ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100495cc:	b29a      	uxth	r2, r3
100495ce:	68fb      	ldr	r3, [r7, #12]
100495d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100495d2:	68fb      	ldr	r3, [r7, #12]
100495d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100495d6:	b299      	uxth	r1, r3
100495d8:	68fb      	ldr	r3, [r7, #12]
100495da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100495dc:	b2da      	uxtb	r2, r3
100495de:	2380      	movs	r3, #128	@ 0x80
100495e0:	049b      	lsls	r3, r3, #18
100495e2:	68f8      	ldr	r0, [r7, #12]
100495e4:	2400      	movs	r4, #0
100495e6:	9400      	str	r4, [sp, #0]
100495e8:	f000 ff20 	bl	1004a42c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
100495ec:	68fb      	ldr	r3, [r7, #12]
100495ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100495f0:	b29a      	uxth	r2, r3
100495f2:	68fb      	ldr	r3, [r7, #12]
100495f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100495f6:	1ad3      	subs	r3, r2, r3
100495f8:	b29a      	uxth	r2, r3
100495fa:	68fb      	ldr	r3, [r7, #12]
100495fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100495fe:	68fb      	ldr	r3, [r7, #12]
10049600:	2241      	movs	r2, #65	@ 0x41
10049602:	5c9b      	ldrb	r3, [r3, r2]
10049604:	b2db      	uxtb	r3, r3
10049606:	2b22      	cmp	r3, #34	@ 0x22
10049608:	d109      	bne.n	1004961e <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
1004960a:	68fb      	ldr	r3, [r7, #12]
1004960c:	681b      	ldr	r3, [r3, #0]
1004960e:	681a      	ldr	r2, [r3, #0]
10049610:	68fb      	ldr	r3, [r7, #12]
10049612:	681b      	ldr	r3, [r3, #0]
10049614:	2180      	movs	r1, #128	@ 0x80
10049616:	0209      	lsls	r1, r1, #8
10049618:	430a      	orrs	r2, r1
1004961a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
1004961c:	e08c      	b.n	10049738 <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
1004961e:	68fb      	ldr	r3, [r7, #12]
10049620:	681b      	ldr	r3, [r3, #0]
10049622:	681a      	ldr	r2, [r3, #0]
10049624:	68fb      	ldr	r3, [r7, #12]
10049626:	681b      	ldr	r3, [r3, #0]
10049628:	2180      	movs	r1, #128	@ 0x80
1004962a:	01c9      	lsls	r1, r1, #7
1004962c:	430a      	orrs	r2, r1
1004962e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10049630:	e082      	b.n	10049738 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10049632:	68fb      	ldr	r3, [r7, #12]
10049634:	2140      	movs	r1, #64	@ 0x40
10049636:	0018      	movs	r0, r3
10049638:	f000 fd8c 	bl	1004a154 <I2C_ITError>
    if (hi2c->XferCount != 0U)
1004963c:	e07c      	b.n	10049738 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
1004963e:	68bb      	ldr	r3, [r7, #8]
10049640:	099b      	lsrs	r3, r3, #6
10049642:	001a      	movs	r2, r3
10049644:	2301      	movs	r3, #1
10049646:	4013      	ands	r3, r2
10049648:	d064      	beq.n	10049714 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
1004964a:	687b      	ldr	r3, [r7, #4]
1004964c:	099b      	lsrs	r3, r3, #6
1004964e:	001a      	movs	r2, r3
10049650:	2301      	movs	r3, #1
10049652:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10049654:	d05e      	beq.n	10049714 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10049656:	68fb      	ldr	r3, [r7, #12]
10049658:	2101      	movs	r1, #1
1004965a:	0018      	movs	r0, r3
1004965c:	f000 ffaa 	bl	1004a5b4 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10049660:	68fb      	ldr	r3, [r7, #12]
10049662:	2110      	movs	r1, #16
10049664:	0018      	movs	r0, r3
10049666:	f000 ff1b 	bl	1004a4a0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004966a:	68fb      	ldr	r3, [r7, #12]
1004966c:	2241      	movs	r2, #65	@ 0x41
1004966e:	5c9b      	ldrb	r3, [r3, r2]
10049670:	b2db      	uxtb	r3, r3
10049672:	2b22      	cmp	r3, #34	@ 0x22
10049674:	d101      	bne.n	1004967a <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
10049676:	4b36      	ldr	r3, [pc, #216]	@ (10049750 <I2C_Mem_ISR_DMA+0x27c>)
10049678:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
1004967a:	68fb      	ldr	r3, [r7, #12]
1004967c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004967e:	b29b      	uxth	r3, r3
10049680:	2bff      	cmp	r3, #255	@ 0xff
10049682:	d911      	bls.n	100496a8 <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10049684:	68fb      	ldr	r3, [r7, #12]
10049686:	22ff      	movs	r2, #255	@ 0xff
10049688:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
1004968a:	68fb      	ldr	r3, [r7, #12]
1004968c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004968e:	b299      	uxth	r1, r3
10049690:	68fb      	ldr	r3, [r7, #12]
10049692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049694:	b2da      	uxtb	r2, r3
10049696:	2380      	movs	r3, #128	@ 0x80
10049698:	045c      	lsls	r4, r3, #17
1004969a:	68f8      	ldr	r0, [r7, #12]
1004969c:	697b      	ldr	r3, [r7, #20]
1004969e:	9300      	str	r3, [sp, #0]
100496a0:	0023      	movs	r3, r4
100496a2:	f000 fec3 	bl	1004a42c <I2C_TransferConfig>
100496a6:	e012      	b.n	100496ce <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
100496a8:	68fb      	ldr	r3, [r7, #12]
100496aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100496ac:	b29a      	uxth	r2, r3
100496ae:	68fb      	ldr	r3, [r7, #12]
100496b0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100496b2:	68fb      	ldr	r3, [r7, #12]
100496b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100496b6:	b299      	uxth	r1, r3
100496b8:	68fb      	ldr	r3, [r7, #12]
100496ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100496bc:	b2da      	uxtb	r2, r3
100496be:	2380      	movs	r3, #128	@ 0x80
100496c0:	049c      	lsls	r4, r3, #18
100496c2:	68f8      	ldr	r0, [r7, #12]
100496c4:	697b      	ldr	r3, [r7, #20]
100496c6:	9300      	str	r3, [sp, #0]
100496c8:	0023      	movs	r3, r4
100496ca:	f000 feaf 	bl	1004a42c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
100496ce:	68fb      	ldr	r3, [r7, #12]
100496d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100496d2:	b29a      	uxth	r2, r3
100496d4:	68fb      	ldr	r3, [r7, #12]
100496d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100496d8:	1ad3      	subs	r3, r2, r3
100496da:	b29a      	uxth	r2, r3
100496dc:	68fb      	ldr	r3, [r7, #12]
100496de:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100496e0:	68fb      	ldr	r3, [r7, #12]
100496e2:	2241      	movs	r2, #65	@ 0x41
100496e4:	5c9b      	ldrb	r3, [r3, r2]
100496e6:	b2db      	uxtb	r3, r3
100496e8:	2b22      	cmp	r3, #34	@ 0x22
100496ea:	d109      	bne.n	10049700 <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
100496ec:	68fb      	ldr	r3, [r7, #12]
100496ee:	681b      	ldr	r3, [r3, #0]
100496f0:	681a      	ldr	r2, [r3, #0]
100496f2:	68fb      	ldr	r3, [r7, #12]
100496f4:	681b      	ldr	r3, [r3, #0]
100496f6:	2180      	movs	r1, #128	@ 0x80
100496f8:	0209      	lsls	r1, r1, #8
100496fa:	430a      	orrs	r2, r1
100496fc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100496fe:	e01b      	b.n	10049738 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10049700:	68fb      	ldr	r3, [r7, #12]
10049702:	681b      	ldr	r3, [r3, #0]
10049704:	681a      	ldr	r2, [r3, #0]
10049706:	68fb      	ldr	r3, [r7, #12]
10049708:	681b      	ldr	r3, [r3, #0]
1004970a:	2180      	movs	r1, #128	@ 0x80
1004970c:	01c9      	lsls	r1, r1, #7
1004970e:	430a      	orrs	r2, r1
10049710:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049712:	e011      	b.n	10049738 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049714:	68bb      	ldr	r3, [r7, #8]
10049716:	095b      	lsrs	r3, r3, #5
10049718:	001a      	movs	r2, r3
1004971a:	2301      	movs	r3, #1
1004971c:	4013      	ands	r3, r2
1004971e:	d00b      	beq.n	10049738 <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10049720:	687b      	ldr	r3, [r7, #4]
10049722:	095b      	lsrs	r3, r3, #5
10049724:	001a      	movs	r2, r3
10049726:	2301      	movs	r3, #1
10049728:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
1004972a:	d005      	beq.n	10049738 <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
1004972c:	68ba      	ldr	r2, [r7, #8]
1004972e:	68fb      	ldr	r3, [r7, #12]
10049730:	0011      	movs	r1, r2
10049732:	0018      	movs	r0, r3
10049734:	f000 fa52 	bl	10049bdc <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10049738:	68fb      	ldr	r3, [r7, #12]
1004973a:	2240      	movs	r2, #64	@ 0x40
1004973c:	2100      	movs	r1, #0
1004973e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049740:	2300      	movs	r3, #0
}
10049742:	0018      	movs	r0, r3
10049744:	46bd      	mov	sp, r7
10049746:	b007      	add	sp, #28
10049748:	bd90      	pop	{r4, r7, pc}
1004974a:	46c0      	nop			@ (mov r8, r8)
1004974c:	80002000 	.word	0x80002000
10049750:	80002400 	.word	0x80002400

10049754 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
10049754:	b580      	push	{r7, lr}
10049756:	b088      	sub	sp, #32
10049758:	af00      	add	r7, sp, #0
1004975a:	60f8      	str	r0, [r7, #12]
1004975c:	60b9      	str	r1, [r7, #8]
1004975e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10049760:	68fb      	ldr	r3, [r7, #12]
10049762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049764:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
10049766:	2300      	movs	r3, #0
10049768:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
1004976a:	68fb      	ldr	r3, [r7, #12]
1004976c:	2240      	movs	r2, #64	@ 0x40
1004976e:	5c9b      	ldrb	r3, [r3, r2]
10049770:	2b01      	cmp	r3, #1
10049772:	d101      	bne.n	10049778 <I2C_Slave_ISR_DMA+0x24>
10049774:	2302      	movs	r3, #2
10049776:	e0de      	b.n	10049936 <I2C_Slave_ISR_DMA+0x1e2>
10049778:	68fb      	ldr	r3, [r7, #12]
1004977a:	2240      	movs	r2, #64	@ 0x40
1004977c:	2101      	movs	r1, #1
1004977e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049780:	68bb      	ldr	r3, [r7, #8]
10049782:	095b      	lsrs	r3, r3, #5
10049784:	001a      	movs	r2, r3
10049786:	2301      	movs	r3, #1
10049788:	4013      	ands	r3, r2
1004978a:	d00c      	beq.n	100497a6 <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
1004978c:	687b      	ldr	r3, [r7, #4]
1004978e:	095b      	lsrs	r3, r3, #5
10049790:	001a      	movs	r2, r3
10049792:	2301      	movs	r3, #1
10049794:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10049796:	d006      	beq.n	100497a6 <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
10049798:	68ba      	ldr	r2, [r7, #8]
1004979a:	68fb      	ldr	r3, [r7, #12]
1004979c:	0011      	movs	r1, r2
1004979e:	0018      	movs	r0, r3
100497a0:	f000 faee 	bl	10049d80 <I2C_ITSlaveCplt>
100497a4:	e0c2      	b.n	1004992c <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100497a6:	68bb      	ldr	r3, [r7, #8]
100497a8:	091b      	lsrs	r3, r3, #4
100497aa:	001a      	movs	r2, r3
100497ac:	2301      	movs	r3, #1
100497ae:	4013      	ands	r3, r2
100497b0:	d100      	bne.n	100497b4 <I2C_Slave_ISR_DMA+0x60>
100497b2:	e0a9      	b.n	10049908 <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100497b4:	687b      	ldr	r3, [r7, #4]
100497b6:	091b      	lsrs	r3, r3, #4
100497b8:	001a      	movs	r2, r3
100497ba:	2301      	movs	r3, #1
100497bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100497be:	d100      	bne.n	100497c2 <I2C_Slave_ISR_DMA+0x6e>
100497c0:	e0a2      	b.n	10049908 <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
100497c2:	687b      	ldr	r3, [r7, #4]
100497c4:	0b9b      	lsrs	r3, r3, #14
100497c6:	001a      	movs	r2, r3
100497c8:	2301      	movs	r3, #1
100497ca:	4013      	ands	r3, r2
100497cc:	d106      	bne.n	100497dc <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
100497ce:	687b      	ldr	r3, [r7, #4]
100497d0:	0bdb      	lsrs	r3, r3, #15
100497d2:	001a      	movs	r2, r3
100497d4:	2301      	movs	r3, #1
100497d6:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
100497d8:	d100      	bne.n	100497dc <I2C_Slave_ISR_DMA+0x88>
100497da:	e08e      	b.n	100498fa <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
100497dc:	68fb      	ldr	r3, [r7, #12]
100497de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100497e0:	2b00      	cmp	r3, #0
100497e2:	d00d      	beq.n	10049800 <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
100497e4:	687b      	ldr	r3, [r7, #4]
100497e6:	0bdb      	lsrs	r3, r3, #15
100497e8:	001a      	movs	r2, r3
100497ea:	2301      	movs	r3, #1
100497ec:	4013      	ands	r3, r2
100497ee:	d007      	beq.n	10049800 <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
100497f0:	68fb      	ldr	r3, [r7, #12]
100497f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100497f4:	681b      	ldr	r3, [r3, #0]
100497f6:	685b      	ldr	r3, [r3, #4]
100497f8:	2b00      	cmp	r3, #0
100497fa:	d101      	bne.n	10049800 <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
100497fc:	2301      	movs	r3, #1
100497fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
10049800:	68fb      	ldr	r3, [r7, #12]
10049802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049804:	2b00      	cmp	r3, #0
10049806:	d00d      	beq.n	10049824 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
10049808:	687b      	ldr	r3, [r7, #4]
1004980a:	0b9b      	lsrs	r3, r3, #14
1004980c:	001a      	movs	r2, r3
1004980e:	2301      	movs	r3, #1
10049810:	4013      	ands	r3, r2
10049812:	d007      	beq.n	10049824 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
10049814:	68fb      	ldr	r3, [r7, #12]
10049816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049818:	681b      	ldr	r3, [r3, #0]
1004981a:	685b      	ldr	r3, [r3, #4]
1004981c:	2b00      	cmp	r3, #0
1004981e:	d101      	bne.n	10049824 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
10049820:	2301      	movs	r3, #1
10049822:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
10049824:	69fb      	ldr	r3, [r7, #28]
10049826:	2b01      	cmp	r3, #1
10049828:	d12d      	bne.n	10049886 <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
1004982a:	68fb      	ldr	r3, [r7, #12]
1004982c:	2241      	movs	r2, #65	@ 0x41
1004982e:	5c9b      	ldrb	r3, [r3, r2]
10049830:	b2db      	uxtb	r3, r3
10049832:	2b28      	cmp	r3, #40	@ 0x28
10049834:	d10b      	bne.n	1004984e <I2C_Slave_ISR_DMA+0xfa>
10049836:	69ba      	ldr	r2, [r7, #24]
10049838:	2380      	movs	r3, #128	@ 0x80
1004983a:	049b      	lsls	r3, r3, #18
1004983c:	429a      	cmp	r2, r3
1004983e:	d106      	bne.n	1004984e <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
10049840:	68ba      	ldr	r2, [r7, #8]
10049842:	68fb      	ldr	r3, [r7, #12]
10049844:	0011      	movs	r1, r2
10049846:	0018      	movs	r0, r3
10049848:	f000 fc2a 	bl	1004a0a0 <I2C_ITListenCplt>
1004984c:	e054      	b.n	100498f8 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
1004984e:	68fb      	ldr	r3, [r7, #12]
10049850:	2241      	movs	r2, #65	@ 0x41
10049852:	5c9b      	ldrb	r3, [r3, r2]
10049854:	b2db      	uxtb	r3, r3
10049856:	2b29      	cmp	r3, #41	@ 0x29
10049858:	d110      	bne.n	1004987c <I2C_Slave_ISR_DMA+0x128>
1004985a:	69bb      	ldr	r3, [r7, #24]
1004985c:	4a38      	ldr	r2, [pc, #224]	@ (10049940 <I2C_Slave_ISR_DMA+0x1ec>)
1004985e:	4293      	cmp	r3, r2
10049860:	d00c      	beq.n	1004987c <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049862:	68fb      	ldr	r3, [r7, #12]
10049864:	681b      	ldr	r3, [r3, #0]
10049866:	2210      	movs	r2, #16
10049868:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
1004986a:	68fb      	ldr	r3, [r7, #12]
1004986c:	0018      	movs	r0, r3
1004986e:	f000 fd9c 	bl	1004a3aa <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
10049872:	68fb      	ldr	r3, [r7, #12]
10049874:	0018      	movs	r0, r3
10049876:	f000 f94b 	bl	10049b10 <I2C_ITSlaveSeqCplt>
1004987a:	e03d      	b.n	100498f8 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004987c:	68fb      	ldr	r3, [r7, #12]
1004987e:	681b      	ldr	r3, [r3, #0]
10049880:	2210      	movs	r2, #16
10049882:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
10049884:	e03e      	b.n	10049904 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049886:	68fb      	ldr	r3, [r7, #12]
10049888:	681b      	ldr	r3, [r3, #0]
1004988a:	2210      	movs	r2, #16
1004988c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004988e:	68fb      	ldr	r3, [r7, #12]
10049890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049892:	2204      	movs	r2, #4
10049894:	431a      	orrs	r2, r3
10049896:	68fb      	ldr	r3, [r7, #12]
10049898:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
1004989a:	2317      	movs	r3, #23
1004989c:	18fb      	adds	r3, r7, r3
1004989e:	68fa      	ldr	r2, [r7, #12]
100498a0:	2141      	movs	r1, #65	@ 0x41
100498a2:	5c52      	ldrb	r2, [r2, r1]
100498a4:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
100498a6:	69bb      	ldr	r3, [r7, #24]
100498a8:	2b00      	cmp	r3, #0
100498aa:	d004      	beq.n	100498b6 <I2C_Slave_ISR_DMA+0x162>
100498ac:	69ba      	ldr	r2, [r7, #24]
100498ae:	2380      	movs	r3, #128	@ 0x80
100498b0:	045b      	lsls	r3, r3, #17
100498b2:	429a      	cmp	r2, r3
100498b4:	d126      	bne.n	10049904 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
100498b6:	2217      	movs	r2, #23
100498b8:	18bb      	adds	r3, r7, r2
100498ba:	781b      	ldrb	r3, [r3, #0]
100498bc:	2b21      	cmp	r3, #33	@ 0x21
100498be:	d003      	beq.n	100498c8 <I2C_Slave_ISR_DMA+0x174>
100498c0:	18bb      	adds	r3, r7, r2
100498c2:	781b      	ldrb	r3, [r3, #0]
100498c4:	2b29      	cmp	r3, #41	@ 0x29
100498c6:	d103      	bne.n	100498d0 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
100498c8:	68fb      	ldr	r3, [r7, #12]
100498ca:	2221      	movs	r2, #33	@ 0x21
100498cc:	631a      	str	r2, [r3, #48]	@ 0x30
100498ce:	e00b      	b.n	100498e8 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
100498d0:	2217      	movs	r2, #23
100498d2:	18bb      	adds	r3, r7, r2
100498d4:	781b      	ldrb	r3, [r3, #0]
100498d6:	2b22      	cmp	r3, #34	@ 0x22
100498d8:	d003      	beq.n	100498e2 <I2C_Slave_ISR_DMA+0x18e>
100498da:	18bb      	adds	r3, r7, r2
100498dc:	781b      	ldrb	r3, [r3, #0]
100498de:	2b2a      	cmp	r3, #42	@ 0x2a
100498e0:	d102      	bne.n	100498e8 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
100498e2:	68fb      	ldr	r3, [r7, #12]
100498e4:	2222      	movs	r2, #34	@ 0x22
100498e6:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
100498e8:	68fb      	ldr	r3, [r7, #12]
100498ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100498ec:	68fb      	ldr	r3, [r7, #12]
100498ee:	0011      	movs	r1, r2
100498f0:	0018      	movs	r0, r3
100498f2:	f000 fc2f 	bl	1004a154 <I2C_ITError>
      if (treatdmanack == 1U)
100498f6:	e005      	b.n	10049904 <I2C_Slave_ISR_DMA+0x1b0>
100498f8:	e004      	b.n	10049904 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
100498fa:	68fb      	ldr	r3, [r7, #12]
100498fc:	681b      	ldr	r3, [r3, #0]
100498fe:	2210      	movs	r2, #16
10049900:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10049902:	e013      	b.n	1004992c <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
10049904:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10049906:	e011      	b.n	1004992c <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10049908:	68bb      	ldr	r3, [r7, #8]
1004990a:	08db      	lsrs	r3, r3, #3
1004990c:	001a      	movs	r2, r3
1004990e:	2301      	movs	r3, #1
10049910:	4013      	ands	r3, r2
10049912:	d00b      	beq.n	1004992c <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10049914:	687b      	ldr	r3, [r7, #4]
10049916:	08db      	lsrs	r3, r3, #3
10049918:	001a      	movs	r2, r3
1004991a:	2301      	movs	r3, #1
1004991c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
1004991e:	d005      	beq.n	1004992c <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
10049920:	68ba      	ldr	r2, [r7, #8]
10049922:	68fb      	ldr	r3, [r7, #12]
10049924:	0011      	movs	r1, r2
10049926:	0018      	movs	r0, r3
10049928:	f000 f80c 	bl	10049944 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
1004992c:	68fb      	ldr	r3, [r7, #12]
1004992e:	2240      	movs	r2, #64	@ 0x40
10049930:	2100      	movs	r1, #0
10049932:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10049934:	2300      	movs	r3, #0
}
10049936:	0018      	movs	r0, r3
10049938:	46bd      	mov	sp, r7
1004993a:	b008      	add	sp, #32
1004993c:	bd80      	pop	{r7, pc}
1004993e:	46c0      	nop			@ (mov r8, r8)
10049940:	ffff0000 	.word	0xffff0000

10049944 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10049944:	b5b0      	push	{r4, r5, r7, lr}
10049946:	b084      	sub	sp, #16
10049948:	af00      	add	r7, sp, #0
1004994a:	6078      	str	r0, [r7, #4]
1004994c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
1004994e:	687b      	ldr	r3, [r7, #4]
10049950:	2241      	movs	r2, #65	@ 0x41
10049952:	5c9b      	ldrb	r3, [r3, r2]
10049954:	b2db      	uxtb	r3, r3
10049956:	001a      	movs	r2, r3
10049958:	2328      	movs	r3, #40	@ 0x28
1004995a:	4013      	ands	r3, r2
1004995c:	2b28      	cmp	r3, #40	@ 0x28
1004995e:	d000      	beq.n	10049962 <I2C_ITAddrCplt+0x1e>
10049960:	e088      	b.n	10049a74 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
10049962:	687b      	ldr	r3, [r7, #4]
10049964:	681b      	ldr	r3, [r3, #0]
10049966:	699b      	ldr	r3, [r3, #24]
10049968:	0c1b      	lsrs	r3, r3, #16
1004996a:	b2da      	uxtb	r2, r3
1004996c:	250f      	movs	r5, #15
1004996e:	197b      	adds	r3, r7, r5
10049970:	2101      	movs	r1, #1
10049972:	400a      	ands	r2, r1
10049974:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
10049976:	687b      	ldr	r3, [r7, #4]
10049978:	681b      	ldr	r3, [r3, #0]
1004997a:	699b      	ldr	r3, [r3, #24]
1004997c:	0c1b      	lsrs	r3, r3, #16
1004997e:	b29a      	uxth	r2, r3
10049980:	200c      	movs	r0, #12
10049982:	183b      	adds	r3, r7, r0
10049984:	21fe      	movs	r1, #254	@ 0xfe
10049986:	400a      	ands	r2, r1
10049988:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
1004998a:	687b      	ldr	r3, [r7, #4]
1004998c:	681b      	ldr	r3, [r3, #0]
1004998e:	689b      	ldr	r3, [r3, #8]
10049990:	b29a      	uxth	r2, r3
10049992:	240a      	movs	r4, #10
10049994:	193b      	adds	r3, r7, r4
10049996:	0592      	lsls	r2, r2, #22
10049998:	0d92      	lsrs	r2, r2, #22
1004999a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
1004999c:	687b      	ldr	r3, [r7, #4]
1004999e:	681b      	ldr	r3, [r3, #0]
100499a0:	68db      	ldr	r3, [r3, #12]
100499a2:	b29a      	uxth	r2, r3
100499a4:	2308      	movs	r3, #8
100499a6:	18fb      	adds	r3, r7, r3
100499a8:	21fe      	movs	r1, #254	@ 0xfe
100499aa:	400a      	ands	r2, r1
100499ac:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
100499ae:	687b      	ldr	r3, [r7, #4]
100499b0:	68db      	ldr	r3, [r3, #12]
100499b2:	2b02      	cmp	r3, #2
100499b4:	d148      	bne.n	10049a48 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
100499b6:	0021      	movs	r1, r4
100499b8:	187b      	adds	r3, r7, r1
100499ba:	881b      	ldrh	r3, [r3, #0]
100499bc:	09db      	lsrs	r3, r3, #7
100499be:	b29a      	uxth	r2, r3
100499c0:	183b      	adds	r3, r7, r0
100499c2:	881b      	ldrh	r3, [r3, #0]
100499c4:	4053      	eors	r3, r2
100499c6:	b29b      	uxth	r3, r3
100499c8:	001a      	movs	r2, r3
100499ca:	2306      	movs	r3, #6
100499cc:	4013      	ands	r3, r2
100499ce:	d120      	bne.n	10049a12 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
100499d0:	183b      	adds	r3, r7, r0
100499d2:	187a      	adds	r2, r7, r1
100499d4:	8812      	ldrh	r2, [r2, #0]
100499d6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
100499d8:	687b      	ldr	r3, [r7, #4]
100499da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100499dc:	1c5a      	adds	r2, r3, #1
100499de:	687b      	ldr	r3, [r7, #4]
100499e0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
100499e2:	687b      	ldr	r3, [r7, #4]
100499e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
100499e6:	2b02      	cmp	r3, #2
100499e8:	d14c      	bne.n	10049a84 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
100499ea:	687b      	ldr	r3, [r7, #4]
100499ec:	2200      	movs	r2, #0
100499ee:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
100499f0:	687b      	ldr	r3, [r7, #4]
100499f2:	681b      	ldr	r3, [r3, #0]
100499f4:	2208      	movs	r2, #8
100499f6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
100499f8:	687b      	ldr	r3, [r7, #4]
100499fa:	2240      	movs	r2, #64	@ 0x40
100499fc:	2100      	movs	r1, #0
100499fe:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10049a00:	183b      	adds	r3, r7, r0
10049a02:	881a      	ldrh	r2, [r3, #0]
10049a04:	197b      	adds	r3, r7, r5
10049a06:	7819      	ldrb	r1, [r3, #0]
10049a08:	687b      	ldr	r3, [r7, #4]
10049a0a:	0018      	movs	r0, r3
10049a0c:	f7ff f9e8 	bl	10048de0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
10049a10:	e038      	b.n	10049a84 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
10049a12:	240c      	movs	r4, #12
10049a14:	193b      	adds	r3, r7, r4
10049a16:	2208      	movs	r2, #8
10049a18:	18ba      	adds	r2, r7, r2
10049a1a:	8812      	ldrh	r2, [r2, #0]
10049a1c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10049a1e:	2380      	movs	r3, #128	@ 0x80
10049a20:	021a      	lsls	r2, r3, #8
10049a22:	687b      	ldr	r3, [r7, #4]
10049a24:	0011      	movs	r1, r2
10049a26:	0018      	movs	r0, r3
10049a28:	f000 fdc4 	bl	1004a5b4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
10049a2c:	687b      	ldr	r3, [r7, #4]
10049a2e:	2240      	movs	r2, #64	@ 0x40
10049a30:	2100      	movs	r1, #0
10049a32:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10049a34:	193b      	adds	r3, r7, r4
10049a36:	881a      	ldrh	r2, [r3, #0]
10049a38:	230f      	movs	r3, #15
10049a3a:	18fb      	adds	r3, r7, r3
10049a3c:	7819      	ldrb	r1, [r3, #0]
10049a3e:	687b      	ldr	r3, [r7, #4]
10049a40:	0018      	movs	r0, r3
10049a42:	f7ff f9cd 	bl	10048de0 <HAL_I2C_AddrCallback>
}
10049a46:	e01d      	b.n	10049a84 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10049a48:	2380      	movs	r3, #128	@ 0x80
10049a4a:	021a      	lsls	r2, r3, #8
10049a4c:	687b      	ldr	r3, [r7, #4]
10049a4e:	0011      	movs	r1, r2
10049a50:	0018      	movs	r0, r3
10049a52:	f000 fdaf 	bl	1004a5b4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
10049a56:	687b      	ldr	r3, [r7, #4]
10049a58:	2240      	movs	r2, #64	@ 0x40
10049a5a:	2100      	movs	r1, #0
10049a5c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10049a5e:	230c      	movs	r3, #12
10049a60:	18fb      	adds	r3, r7, r3
10049a62:	881a      	ldrh	r2, [r3, #0]
10049a64:	230f      	movs	r3, #15
10049a66:	18fb      	adds	r3, r7, r3
10049a68:	7819      	ldrb	r1, [r3, #0]
10049a6a:	687b      	ldr	r3, [r7, #4]
10049a6c:	0018      	movs	r0, r3
10049a6e:	f7ff f9b7 	bl	10048de0 <HAL_I2C_AddrCallback>
}
10049a72:	e007      	b.n	10049a84 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10049a74:	687b      	ldr	r3, [r7, #4]
10049a76:	681b      	ldr	r3, [r3, #0]
10049a78:	2208      	movs	r2, #8
10049a7a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
10049a7c:	687b      	ldr	r3, [r7, #4]
10049a7e:	2240      	movs	r2, #64	@ 0x40
10049a80:	2100      	movs	r1, #0
10049a82:	5499      	strb	r1, [r3, r2]
}
10049a84:	46c0      	nop			@ (mov r8, r8)
10049a86:	46bd      	mov	sp, r7
10049a88:	b004      	add	sp, #16
10049a8a:	bdb0      	pop	{r4, r5, r7, pc}

10049a8c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
10049a8c:	b580      	push	{r7, lr}
10049a8e:	b082      	sub	sp, #8
10049a90:	af00      	add	r7, sp, #0
10049a92:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10049a94:	687b      	ldr	r3, [r7, #4]
10049a96:	2242      	movs	r2, #66	@ 0x42
10049a98:	2100      	movs	r1, #0
10049a9a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10049a9c:	687b      	ldr	r3, [r7, #4]
10049a9e:	2241      	movs	r2, #65	@ 0x41
10049aa0:	5c9b      	ldrb	r3, [r3, r2]
10049aa2:	b2db      	uxtb	r3, r3
10049aa4:	2b21      	cmp	r3, #33	@ 0x21
10049aa6:	d117      	bne.n	10049ad8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
10049aa8:	687b      	ldr	r3, [r7, #4]
10049aaa:	2241      	movs	r2, #65	@ 0x41
10049aac:	2120      	movs	r1, #32
10049aae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10049ab0:	687b      	ldr	r3, [r7, #4]
10049ab2:	2211      	movs	r2, #17
10049ab4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
10049ab6:	687b      	ldr	r3, [r7, #4]
10049ab8:	2200      	movs	r2, #0
10049aba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10049abc:	687b      	ldr	r3, [r7, #4]
10049abe:	2101      	movs	r1, #1
10049ac0:	0018      	movs	r0, r3
10049ac2:	f000 fd77 	bl	1004a5b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10049ac6:	687b      	ldr	r3, [r7, #4]
10049ac8:	2240      	movs	r2, #64	@ 0x40
10049aca:	2100      	movs	r1, #0
10049acc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
10049ace:	687b      	ldr	r3, [r7, #4]
10049ad0:	0018      	movs	r0, r3
10049ad2:	f7ff f965 	bl	10048da0 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10049ad6:	e016      	b.n	10049b06 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
10049ad8:	687b      	ldr	r3, [r7, #4]
10049ada:	2241      	movs	r2, #65	@ 0x41
10049adc:	2120      	movs	r1, #32
10049ade:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10049ae0:	687b      	ldr	r3, [r7, #4]
10049ae2:	2212      	movs	r2, #18
10049ae4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
10049ae6:	687b      	ldr	r3, [r7, #4]
10049ae8:	2200      	movs	r2, #0
10049aea:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10049aec:	687b      	ldr	r3, [r7, #4]
10049aee:	2102      	movs	r1, #2
10049af0:	0018      	movs	r0, r3
10049af2:	f000 fd5f 	bl	1004a5b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
10049af6:	687b      	ldr	r3, [r7, #4]
10049af8:	2240      	movs	r2, #64	@ 0x40
10049afa:	2100      	movs	r1, #0
10049afc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
10049afe:	687b      	ldr	r3, [r7, #4]
10049b00:	0018      	movs	r0, r3
10049b02:	f7ff f955 	bl	10048db0 <HAL_I2C_MasterRxCpltCallback>
}
10049b06:	46c0      	nop			@ (mov r8, r8)
10049b08:	46bd      	mov	sp, r7
10049b0a:	b002      	add	sp, #8
10049b0c:	bd80      	pop	{r7, pc}
	...

10049b10 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10049b10:	b580      	push	{r7, lr}
10049b12:	b084      	sub	sp, #16
10049b14:	af00      	add	r7, sp, #0
10049b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10049b18:	687b      	ldr	r3, [r7, #4]
10049b1a:	681b      	ldr	r3, [r3, #0]
10049b1c:	681b      	ldr	r3, [r3, #0]
10049b1e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10049b20:	687b      	ldr	r3, [r7, #4]
10049b22:	2242      	movs	r2, #66	@ 0x42
10049b24:	2100      	movs	r1, #0
10049b26:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10049b28:	68fb      	ldr	r3, [r7, #12]
10049b2a:	0b9b      	lsrs	r3, r3, #14
10049b2c:	001a      	movs	r2, r3
10049b2e:	2301      	movs	r3, #1
10049b30:	4013      	ands	r3, r2
10049b32:	d008      	beq.n	10049b46 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10049b34:	687b      	ldr	r3, [r7, #4]
10049b36:	681b      	ldr	r3, [r3, #0]
10049b38:	681a      	ldr	r2, [r3, #0]
10049b3a:	687b      	ldr	r3, [r7, #4]
10049b3c:	681b      	ldr	r3, [r3, #0]
10049b3e:	4925      	ldr	r1, [pc, #148]	@ (10049bd4 <I2C_ITSlaveSeqCplt+0xc4>)
10049b40:	400a      	ands	r2, r1
10049b42:	601a      	str	r2, [r3, #0]
10049b44:	e00d      	b.n	10049b62 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10049b46:	68fb      	ldr	r3, [r7, #12]
10049b48:	0bdb      	lsrs	r3, r3, #15
10049b4a:	001a      	movs	r2, r3
10049b4c:	2301      	movs	r3, #1
10049b4e:	4013      	ands	r3, r2
10049b50:	d007      	beq.n	10049b62 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10049b52:	687b      	ldr	r3, [r7, #4]
10049b54:	681b      	ldr	r3, [r3, #0]
10049b56:	681a      	ldr	r2, [r3, #0]
10049b58:	687b      	ldr	r3, [r7, #4]
10049b5a:	681b      	ldr	r3, [r3, #0]
10049b5c:	491e      	ldr	r1, [pc, #120]	@ (10049bd8 <I2C_ITSlaveSeqCplt+0xc8>)
10049b5e:	400a      	ands	r2, r1
10049b60:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
10049b62:	687b      	ldr	r3, [r7, #4]
10049b64:	2241      	movs	r2, #65	@ 0x41
10049b66:	5c9b      	ldrb	r3, [r3, r2]
10049b68:	b2db      	uxtb	r3, r3
10049b6a:	2b29      	cmp	r3, #41	@ 0x29
10049b6c:	d114      	bne.n	10049b98 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10049b6e:	687b      	ldr	r3, [r7, #4]
10049b70:	2241      	movs	r2, #65	@ 0x41
10049b72:	2128      	movs	r1, #40	@ 0x28
10049b74:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10049b76:	687b      	ldr	r3, [r7, #4]
10049b78:	2221      	movs	r2, #33	@ 0x21
10049b7a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10049b7c:	687b      	ldr	r3, [r7, #4]
10049b7e:	2101      	movs	r1, #1
10049b80:	0018      	movs	r0, r3
10049b82:	f000 fd17 	bl	1004a5b4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10049b86:	687b      	ldr	r3, [r7, #4]
10049b88:	2240      	movs	r2, #64	@ 0x40
10049b8a:	2100      	movs	r1, #0
10049b8c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10049b8e:	687b      	ldr	r3, [r7, #4]
10049b90:	0018      	movs	r0, r3
10049b92:	f7ff f915 	bl	10048dc0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
10049b96:	e019      	b.n	10049bcc <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
10049b98:	687b      	ldr	r3, [r7, #4]
10049b9a:	2241      	movs	r2, #65	@ 0x41
10049b9c:	5c9b      	ldrb	r3, [r3, r2]
10049b9e:	b2db      	uxtb	r3, r3
10049ba0:	2b2a      	cmp	r3, #42	@ 0x2a
10049ba2:	d113      	bne.n	10049bcc <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10049ba4:	687b      	ldr	r3, [r7, #4]
10049ba6:	2241      	movs	r2, #65	@ 0x41
10049ba8:	2128      	movs	r1, #40	@ 0x28
10049baa:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10049bac:	687b      	ldr	r3, [r7, #4]
10049bae:	2222      	movs	r2, #34	@ 0x22
10049bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10049bb2:	687b      	ldr	r3, [r7, #4]
10049bb4:	2102      	movs	r1, #2
10049bb6:	0018      	movs	r0, r3
10049bb8:	f000 fcfc 	bl	1004a5b4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
10049bbc:	687b      	ldr	r3, [r7, #4]
10049bbe:	2240      	movs	r2, #64	@ 0x40
10049bc0:	2100      	movs	r1, #0
10049bc2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10049bc4:	687b      	ldr	r3, [r7, #4]
10049bc6:	0018      	movs	r0, r3
10049bc8:	f7ff f902 	bl	10048dd0 <HAL_I2C_SlaveRxCpltCallback>
}
10049bcc:	46c0      	nop			@ (mov r8, r8)
10049bce:	46bd      	mov	sp, r7
10049bd0:	b004      	add	sp, #16
10049bd2:	bd80      	pop	{r7, pc}
10049bd4:	ffffbfff 	.word	0xffffbfff
10049bd8:	ffff7fff 	.word	0xffff7fff

10049bdc <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10049bdc:	b580      	push	{r7, lr}
10049bde:	b086      	sub	sp, #24
10049be0:	af00      	add	r7, sp, #0
10049be2:	6078      	str	r0, [r7, #4]
10049be4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
10049be6:	683b      	ldr	r3, [r7, #0]
10049be8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10049bea:	687b      	ldr	r3, [r7, #4]
10049bec:	681b      	ldr	r3, [r3, #0]
10049bee:	2220      	movs	r2, #32
10049bf0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10049bf2:	687b      	ldr	r3, [r7, #4]
10049bf4:	2241      	movs	r2, #65	@ 0x41
10049bf6:	5c9b      	ldrb	r3, [r3, r2]
10049bf8:	b2db      	uxtb	r3, r3
10049bfa:	2b21      	cmp	r3, #33	@ 0x21
10049bfc:	d108      	bne.n	10049c10 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10049bfe:	687b      	ldr	r3, [r7, #4]
10049c00:	2101      	movs	r1, #1
10049c02:	0018      	movs	r0, r3
10049c04:	f000 fcd6 	bl	1004a5b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10049c08:	687b      	ldr	r3, [r7, #4]
10049c0a:	2211      	movs	r2, #17
10049c0c:	631a      	str	r2, [r3, #48]	@ 0x30
10049c0e:	e00d      	b.n	10049c2c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049c10:	687b      	ldr	r3, [r7, #4]
10049c12:	2241      	movs	r2, #65	@ 0x41
10049c14:	5c9b      	ldrb	r3, [r3, r2]
10049c16:	b2db      	uxtb	r3, r3
10049c18:	2b22      	cmp	r3, #34	@ 0x22
10049c1a:	d107      	bne.n	10049c2c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10049c1c:	687b      	ldr	r3, [r7, #4]
10049c1e:	2102      	movs	r1, #2
10049c20:	0018      	movs	r0, r3
10049c22:	f000 fcc7 	bl	1004a5b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10049c26:	687b      	ldr	r3, [r7, #4]
10049c28:	2212      	movs	r2, #18
10049c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10049c2c:	687b      	ldr	r3, [r7, #4]
10049c2e:	681b      	ldr	r3, [r3, #0]
10049c30:	685a      	ldr	r2, [r3, #4]
10049c32:	687b      	ldr	r3, [r7, #4]
10049c34:	681b      	ldr	r3, [r3, #0]
10049c36:	4950      	ldr	r1, [pc, #320]	@ (10049d78 <I2C_ITMasterCplt+0x19c>)
10049c38:	400a      	ands	r2, r1
10049c3a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
10049c3c:	687b      	ldr	r3, [r7, #4]
10049c3e:	2200      	movs	r2, #0
10049c40:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
10049c42:	687b      	ldr	r3, [r7, #4]
10049c44:	4a4d      	ldr	r2, [pc, #308]	@ (10049d7c <I2C_ITMasterCplt+0x1a0>)
10049c46:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
10049c48:	697b      	ldr	r3, [r7, #20]
10049c4a:	091b      	lsrs	r3, r3, #4
10049c4c:	001a      	movs	r2, r3
10049c4e:	2301      	movs	r3, #1
10049c50:	4013      	ands	r3, r2
10049c52:	d009      	beq.n	10049c68 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049c54:	687b      	ldr	r3, [r7, #4]
10049c56:	681b      	ldr	r3, [r3, #0]
10049c58:	2210      	movs	r2, #16
10049c5a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049c5c:	687b      	ldr	r3, [r7, #4]
10049c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049c60:	2204      	movs	r2, #4
10049c62:	431a      	orrs	r2, r3
10049c64:	687b      	ldr	r3, [r7, #4]
10049c66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
10049c68:	687b      	ldr	r3, [r7, #4]
10049c6a:	2241      	movs	r2, #65	@ 0x41
10049c6c:	5c9b      	ldrb	r3, [r3, r2]
10049c6e:	b2db      	uxtb	r3, r3
10049c70:	2b60      	cmp	r3, #96	@ 0x60
10049c72:	d10b      	bne.n	10049c8c <I2C_ITMasterCplt+0xb0>
10049c74:	697b      	ldr	r3, [r7, #20]
10049c76:	089b      	lsrs	r3, r3, #2
10049c78:	001a      	movs	r2, r3
10049c7a:	2301      	movs	r3, #1
10049c7c:	4013      	ands	r3, r2
10049c7e:	d005      	beq.n	10049c8c <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
10049c80:	687b      	ldr	r3, [r7, #4]
10049c82:	681b      	ldr	r3, [r3, #0]
10049c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049c86:	b2db      	uxtb	r3, r3
10049c88:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
10049c8a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10049c8c:	687b      	ldr	r3, [r7, #4]
10049c8e:	0018      	movs	r0, r3
10049c90:	f000 fb8b 	bl	1004a3aa <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
10049c94:	687b      	ldr	r3, [r7, #4]
10049c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049c98:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
10049c9a:	687b      	ldr	r3, [r7, #4]
10049c9c:	2241      	movs	r2, #65	@ 0x41
10049c9e:	5c9b      	ldrb	r3, [r3, r2]
10049ca0:	b2db      	uxtb	r3, r3
10049ca2:	2b60      	cmp	r3, #96	@ 0x60
10049ca4:	d002      	beq.n	10049cac <I2C_ITMasterCplt+0xd0>
10049ca6:	693b      	ldr	r3, [r7, #16]
10049ca8:	2b00      	cmp	r3, #0
10049caa:	d007      	beq.n	10049cbc <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10049cac:	687b      	ldr	r3, [r7, #4]
10049cae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049cb0:	687b      	ldr	r3, [r7, #4]
10049cb2:	0011      	movs	r1, r2
10049cb4:	0018      	movs	r0, r3
10049cb6:	f000 fa4d 	bl	1004a154 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
10049cba:	e058      	b.n	10049d6e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10049cbc:	687b      	ldr	r3, [r7, #4]
10049cbe:	2241      	movs	r2, #65	@ 0x41
10049cc0:	5c9b      	ldrb	r3, [r3, r2]
10049cc2:	b2db      	uxtb	r3, r3
10049cc4:	2b21      	cmp	r3, #33	@ 0x21
10049cc6:	d126      	bne.n	10049d16 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
10049cc8:	687b      	ldr	r3, [r7, #4]
10049cca:	2241      	movs	r2, #65	@ 0x41
10049ccc:	2120      	movs	r1, #32
10049cce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049cd0:	687b      	ldr	r3, [r7, #4]
10049cd2:	2200      	movs	r2, #0
10049cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
10049cd6:	687b      	ldr	r3, [r7, #4]
10049cd8:	2242      	movs	r2, #66	@ 0x42
10049cda:	5c9b      	ldrb	r3, [r3, r2]
10049cdc:	b2db      	uxtb	r3, r3
10049cde:	2b40      	cmp	r3, #64	@ 0x40
10049ce0:	d10c      	bne.n	10049cfc <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049ce2:	687b      	ldr	r3, [r7, #4]
10049ce4:	2242      	movs	r2, #66	@ 0x42
10049ce6:	2100      	movs	r1, #0
10049ce8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10049cea:	687b      	ldr	r3, [r7, #4]
10049cec:	2240      	movs	r2, #64	@ 0x40
10049cee:	2100      	movs	r1, #0
10049cf0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
10049cf2:	687b      	ldr	r3, [r7, #4]
10049cf4:	0018      	movs	r0, r3
10049cf6:	f7fb f9ed 	bl	100450d4 <HAL_I2C_MemTxCpltCallback>
}
10049cfa:	e038      	b.n	10049d6e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049cfc:	687b      	ldr	r3, [r7, #4]
10049cfe:	2242      	movs	r2, #66	@ 0x42
10049d00:	2100      	movs	r1, #0
10049d02:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10049d04:	687b      	ldr	r3, [r7, #4]
10049d06:	2240      	movs	r2, #64	@ 0x40
10049d08:	2100      	movs	r1, #0
10049d0a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
10049d0c:	687b      	ldr	r3, [r7, #4]
10049d0e:	0018      	movs	r0, r3
10049d10:	f7ff f846 	bl	10048da0 <HAL_I2C_MasterTxCpltCallback>
}
10049d14:	e02b      	b.n	10049d6e <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049d16:	687b      	ldr	r3, [r7, #4]
10049d18:	2241      	movs	r2, #65	@ 0x41
10049d1a:	5c9b      	ldrb	r3, [r3, r2]
10049d1c:	b2db      	uxtb	r3, r3
10049d1e:	2b22      	cmp	r3, #34	@ 0x22
10049d20:	d125      	bne.n	10049d6e <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
10049d22:	687b      	ldr	r3, [r7, #4]
10049d24:	2241      	movs	r2, #65	@ 0x41
10049d26:	2120      	movs	r1, #32
10049d28:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049d2a:	687b      	ldr	r3, [r7, #4]
10049d2c:	2200      	movs	r2, #0
10049d2e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
10049d30:	687b      	ldr	r3, [r7, #4]
10049d32:	2242      	movs	r2, #66	@ 0x42
10049d34:	5c9b      	ldrb	r3, [r3, r2]
10049d36:	b2db      	uxtb	r3, r3
10049d38:	2b40      	cmp	r3, #64	@ 0x40
10049d3a:	d10c      	bne.n	10049d56 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049d3c:	687b      	ldr	r3, [r7, #4]
10049d3e:	2242      	movs	r2, #66	@ 0x42
10049d40:	2100      	movs	r1, #0
10049d42:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10049d44:	687b      	ldr	r3, [r7, #4]
10049d46:	2240      	movs	r2, #64	@ 0x40
10049d48:	2100      	movs	r1, #0
10049d4a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
10049d4c:	687b      	ldr	r3, [r7, #4]
10049d4e:	0018      	movs	r0, r3
10049d50:	f7fb f9f6 	bl	10045140 <HAL_I2C_MemRxCpltCallback>
}
10049d54:	e00b      	b.n	10049d6e <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049d56:	687b      	ldr	r3, [r7, #4]
10049d58:	2242      	movs	r2, #66	@ 0x42
10049d5a:	2100      	movs	r1, #0
10049d5c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10049d5e:	687b      	ldr	r3, [r7, #4]
10049d60:	2240      	movs	r2, #64	@ 0x40
10049d62:	2100      	movs	r1, #0
10049d64:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
10049d66:	687b      	ldr	r3, [r7, #4]
10049d68:	0018      	movs	r0, r3
10049d6a:	f7ff f821 	bl	10048db0 <HAL_I2C_MasterRxCpltCallback>
}
10049d6e:	46c0      	nop			@ (mov r8, r8)
10049d70:	46bd      	mov	sp, r7
10049d72:	b006      	add	sp, #24
10049d74:	bd80      	pop	{r7, pc}
10049d76:	46c0      	nop			@ (mov r8, r8)
10049d78:	fe00e800 	.word	0xfe00e800
10049d7c:	ffff0000 	.word	0xffff0000

10049d80 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10049d80:	b580      	push	{r7, lr}
10049d82:	b086      	sub	sp, #24
10049d84:	af00      	add	r7, sp, #0
10049d86:	6078      	str	r0, [r7, #4]
10049d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10049d8a:	687b      	ldr	r3, [r7, #4]
10049d8c:	681b      	ldr	r3, [r3, #0]
10049d8e:	681b      	ldr	r3, [r3, #0]
10049d90:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
10049d92:	683b      	ldr	r3, [r7, #0]
10049d94:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
10049d96:	687b      	ldr	r3, [r7, #4]
10049d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049d9a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
10049d9c:	200b      	movs	r0, #11
10049d9e:	183b      	adds	r3, r7, r0
10049da0:	687a      	ldr	r2, [r7, #4]
10049da2:	2141      	movs	r1, #65	@ 0x41
10049da4:	5c52      	ldrb	r2, [r2, r1]
10049da6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10049da8:	687b      	ldr	r3, [r7, #4]
10049daa:	681b      	ldr	r3, [r3, #0]
10049dac:	2220      	movs	r2, #32
10049dae:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10049db0:	183b      	adds	r3, r7, r0
10049db2:	781b      	ldrb	r3, [r3, #0]
10049db4:	2b21      	cmp	r3, #33	@ 0x21
10049db6:	d003      	beq.n	10049dc0 <I2C_ITSlaveCplt+0x40>
10049db8:	183b      	adds	r3, r7, r0
10049dba:	781b      	ldrb	r3, [r3, #0]
10049dbc:	2b29      	cmp	r3, #41	@ 0x29
10049dbe:	d109      	bne.n	10049dd4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
10049dc0:	4ab0      	ldr	r2, [pc, #704]	@ (1004a084 <I2C_ITSlaveCplt+0x304>)
10049dc2:	687b      	ldr	r3, [r7, #4]
10049dc4:	0011      	movs	r1, r2
10049dc6:	0018      	movs	r0, r3
10049dc8:	f000 fbf4 	bl	1004a5b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10049dcc:	687b      	ldr	r3, [r7, #4]
10049dce:	2221      	movs	r2, #33	@ 0x21
10049dd0:	631a      	str	r2, [r3, #48]	@ 0x30
10049dd2:	e020      	b.n	10049e16 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10049dd4:	220b      	movs	r2, #11
10049dd6:	18bb      	adds	r3, r7, r2
10049dd8:	781b      	ldrb	r3, [r3, #0]
10049dda:	2b22      	cmp	r3, #34	@ 0x22
10049ddc:	d003      	beq.n	10049de6 <I2C_ITSlaveCplt+0x66>
10049dde:	18bb      	adds	r3, r7, r2
10049de0:	781b      	ldrb	r3, [r3, #0]
10049de2:	2b2a      	cmp	r3, #42	@ 0x2a
10049de4:	d109      	bne.n	10049dfa <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
10049de6:	4aa8      	ldr	r2, [pc, #672]	@ (1004a088 <I2C_ITSlaveCplt+0x308>)
10049de8:	687b      	ldr	r3, [r7, #4]
10049dea:	0011      	movs	r1, r2
10049dec:	0018      	movs	r0, r3
10049dee:	f000 fbe1 	bl	1004a5b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10049df2:	687b      	ldr	r3, [r7, #4]
10049df4:	2222      	movs	r2, #34	@ 0x22
10049df6:	631a      	str	r2, [r3, #48]	@ 0x30
10049df8:	e00d      	b.n	10049e16 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
10049dfa:	230b      	movs	r3, #11
10049dfc:	18fb      	adds	r3, r7, r3
10049dfe:	781b      	ldrb	r3, [r3, #0]
10049e00:	2b28      	cmp	r3, #40	@ 0x28
10049e02:	d108      	bne.n	10049e16 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
10049e04:	4aa1      	ldr	r2, [pc, #644]	@ (1004a08c <I2C_ITSlaveCplt+0x30c>)
10049e06:	687b      	ldr	r3, [r7, #4]
10049e08:	0011      	movs	r1, r2
10049e0a:	0018      	movs	r0, r3
10049e0c:	f000 fbd2 	bl	1004a5b4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
10049e10:	687b      	ldr	r3, [r7, #4]
10049e12:	2200      	movs	r2, #0
10049e14:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
10049e16:	687b      	ldr	r3, [r7, #4]
10049e18:	681b      	ldr	r3, [r3, #0]
10049e1a:	685a      	ldr	r2, [r3, #4]
10049e1c:	687b      	ldr	r3, [r7, #4]
10049e1e:	681b      	ldr	r3, [r3, #0]
10049e20:	2180      	movs	r1, #128	@ 0x80
10049e22:	0209      	lsls	r1, r1, #8
10049e24:	430a      	orrs	r2, r1
10049e26:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10049e28:	687b      	ldr	r3, [r7, #4]
10049e2a:	681b      	ldr	r3, [r3, #0]
10049e2c:	685a      	ldr	r2, [r3, #4]
10049e2e:	687b      	ldr	r3, [r7, #4]
10049e30:	681b      	ldr	r3, [r3, #0]
10049e32:	4997      	ldr	r1, [pc, #604]	@ (1004a090 <I2C_ITSlaveCplt+0x310>)
10049e34:	400a      	ands	r2, r1
10049e36:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10049e38:	687b      	ldr	r3, [r7, #4]
10049e3a:	0018      	movs	r0, r3
10049e3c:	f000 fab5 	bl	1004a3aa <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10049e40:	693b      	ldr	r3, [r7, #16]
10049e42:	0b9b      	lsrs	r3, r3, #14
10049e44:	001a      	movs	r2, r3
10049e46:	2301      	movs	r3, #1
10049e48:	4013      	ands	r3, r2
10049e4a:	d013      	beq.n	10049e74 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10049e4c:	687b      	ldr	r3, [r7, #4]
10049e4e:	681b      	ldr	r3, [r3, #0]
10049e50:	681a      	ldr	r2, [r3, #0]
10049e52:	687b      	ldr	r3, [r7, #4]
10049e54:	681b      	ldr	r3, [r3, #0]
10049e56:	498f      	ldr	r1, [pc, #572]	@ (1004a094 <I2C_ITSlaveCplt+0x314>)
10049e58:	400a      	ands	r2, r1
10049e5a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
10049e5c:	687b      	ldr	r3, [r7, #4]
10049e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049e60:	2b00      	cmp	r3, #0
10049e62:	d020      	beq.n	10049ea6 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
10049e64:	687b      	ldr	r3, [r7, #4]
10049e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049e68:	681b      	ldr	r3, [r3, #0]
10049e6a:	685b      	ldr	r3, [r3, #4]
10049e6c:	b29a      	uxth	r2, r3
10049e6e:	687b      	ldr	r3, [r7, #4]
10049e70:	855a      	strh	r2, [r3, #42]	@ 0x2a
10049e72:	e018      	b.n	10049ea6 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10049e74:	693b      	ldr	r3, [r7, #16]
10049e76:	0bdb      	lsrs	r3, r3, #15
10049e78:	001a      	movs	r2, r3
10049e7a:	2301      	movs	r3, #1
10049e7c:	4013      	ands	r3, r2
10049e7e:	d012      	beq.n	10049ea6 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10049e80:	687b      	ldr	r3, [r7, #4]
10049e82:	681b      	ldr	r3, [r3, #0]
10049e84:	681a      	ldr	r2, [r3, #0]
10049e86:	687b      	ldr	r3, [r7, #4]
10049e88:	681b      	ldr	r3, [r3, #0]
10049e8a:	4983      	ldr	r1, [pc, #524]	@ (1004a098 <I2C_ITSlaveCplt+0x318>)
10049e8c:	400a      	ands	r2, r1
10049e8e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
10049e90:	687b      	ldr	r3, [r7, #4]
10049e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049e94:	2b00      	cmp	r3, #0
10049e96:	d006      	beq.n	10049ea6 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
10049e98:	687b      	ldr	r3, [r7, #4]
10049e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049e9c:	681b      	ldr	r3, [r3, #0]
10049e9e:	685b      	ldr	r3, [r3, #4]
10049ea0:	b29a      	uxth	r2, r3
10049ea2:	687b      	ldr	r3, [r7, #4]
10049ea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
10049ea6:	697b      	ldr	r3, [r7, #20]
10049ea8:	089b      	lsrs	r3, r3, #2
10049eaa:	001a      	movs	r2, r3
10049eac:	2301      	movs	r3, #1
10049eae:	4013      	ands	r3, r2
10049eb0:	d020      	beq.n	10049ef4 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
10049eb2:	697b      	ldr	r3, [r7, #20]
10049eb4:	2204      	movs	r2, #4
10049eb6:	4393      	bics	r3, r2
10049eb8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
10049eba:	687b      	ldr	r3, [r7, #4]
10049ebc:	681b      	ldr	r3, [r3, #0]
10049ebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049ec0:	687b      	ldr	r3, [r7, #4]
10049ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049ec4:	b2d2      	uxtb	r2, r2
10049ec6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
10049ec8:	687b      	ldr	r3, [r7, #4]
10049eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049ecc:	1c5a      	adds	r2, r3, #1
10049ece:	687b      	ldr	r3, [r7, #4]
10049ed0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
10049ed2:	687b      	ldr	r3, [r7, #4]
10049ed4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049ed6:	2b00      	cmp	r3, #0
10049ed8:	d00c      	beq.n	10049ef4 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
10049eda:	687b      	ldr	r3, [r7, #4]
10049edc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049ede:	3b01      	subs	r3, #1
10049ee0:	b29a      	uxth	r2, r3
10049ee2:	687b      	ldr	r3, [r7, #4]
10049ee4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10049ee6:	687b      	ldr	r3, [r7, #4]
10049ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049eea:	b29b      	uxth	r3, r3
10049eec:	3b01      	subs	r3, #1
10049eee:	b29a      	uxth	r2, r3
10049ef0:	687b      	ldr	r3, [r7, #4]
10049ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
10049ef4:	687b      	ldr	r3, [r7, #4]
10049ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049ef8:	b29b      	uxth	r3, r3
10049efa:	2b00      	cmp	r3, #0
10049efc:	d005      	beq.n	10049f0a <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049efe:	687b      	ldr	r3, [r7, #4]
10049f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049f02:	2204      	movs	r2, #4
10049f04:	431a      	orrs	r2, r3
10049f06:	687b      	ldr	r3, [r7, #4]
10049f08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10049f0a:	697b      	ldr	r3, [r7, #20]
10049f0c:	091b      	lsrs	r3, r3, #4
10049f0e:	001a      	movs	r2, r3
10049f10:	2301      	movs	r3, #1
10049f12:	4013      	ands	r3, r2
10049f14:	d051      	beq.n	10049fba <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
10049f16:	693b      	ldr	r3, [r7, #16]
10049f18:	091b      	lsrs	r3, r3, #4
10049f1a:	001a      	movs	r2, r3
10049f1c:	2301      	movs	r3, #1
10049f1e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10049f20:	d04b      	beq.n	10049fba <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
10049f22:	687b      	ldr	r3, [r7, #4]
10049f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049f26:	b29b      	uxth	r3, r3
10049f28:	2b00      	cmp	r3, #0
10049f2a:	d12d      	bne.n	10049f88 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10049f2c:	687b      	ldr	r3, [r7, #4]
10049f2e:	2241      	movs	r2, #65	@ 0x41
10049f30:	5c9b      	ldrb	r3, [r3, r2]
10049f32:	b2db      	uxtb	r3, r3
10049f34:	2b28      	cmp	r3, #40	@ 0x28
10049f36:	d10b      	bne.n	10049f50 <I2C_ITSlaveCplt+0x1d0>
10049f38:	68fa      	ldr	r2, [r7, #12]
10049f3a:	2380      	movs	r3, #128	@ 0x80
10049f3c:	049b      	lsls	r3, r3, #18
10049f3e:	429a      	cmp	r2, r3
10049f40:	d106      	bne.n	10049f50 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
10049f42:	697a      	ldr	r2, [r7, #20]
10049f44:	687b      	ldr	r3, [r7, #4]
10049f46:	0011      	movs	r1, r2
10049f48:	0018      	movs	r0, r3
10049f4a:	f000 f8a9 	bl	1004a0a0 <I2C_ITListenCplt>
10049f4e:	e034      	b.n	10049fba <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10049f50:	687b      	ldr	r3, [r7, #4]
10049f52:	2241      	movs	r2, #65	@ 0x41
10049f54:	5c9b      	ldrb	r3, [r3, r2]
10049f56:	b2db      	uxtb	r3, r3
10049f58:	2b29      	cmp	r3, #41	@ 0x29
10049f5a:	d110      	bne.n	10049f7e <I2C_ITSlaveCplt+0x1fe>
10049f5c:	68fb      	ldr	r3, [r7, #12]
10049f5e:	4a4f      	ldr	r2, [pc, #316]	@ (1004a09c <I2C_ITSlaveCplt+0x31c>)
10049f60:	4293      	cmp	r3, r2
10049f62:	d00c      	beq.n	10049f7e <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049f64:	687b      	ldr	r3, [r7, #4]
10049f66:	681b      	ldr	r3, [r3, #0]
10049f68:	2210      	movs	r2, #16
10049f6a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10049f6c:	687b      	ldr	r3, [r7, #4]
10049f6e:	0018      	movs	r0, r3
10049f70:	f000 fa1b 	bl	1004a3aa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10049f74:	687b      	ldr	r3, [r7, #4]
10049f76:	0018      	movs	r0, r3
10049f78:	f7ff fdca 	bl	10049b10 <I2C_ITSlaveSeqCplt>
10049f7c:	e01d      	b.n	10049fba <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049f7e:	687b      	ldr	r3, [r7, #4]
10049f80:	681b      	ldr	r3, [r3, #0]
10049f82:	2210      	movs	r2, #16
10049f84:	61da      	str	r2, [r3, #28]
10049f86:	e018      	b.n	10049fba <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049f88:	687b      	ldr	r3, [r7, #4]
10049f8a:	681b      	ldr	r3, [r3, #0]
10049f8c:	2210      	movs	r2, #16
10049f8e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049f90:	687b      	ldr	r3, [r7, #4]
10049f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049f94:	2204      	movs	r2, #4
10049f96:	431a      	orrs	r2, r3
10049f98:	687b      	ldr	r3, [r7, #4]
10049f9a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10049f9c:	68fb      	ldr	r3, [r7, #12]
10049f9e:	2b00      	cmp	r3, #0
10049fa0:	d004      	beq.n	10049fac <I2C_ITSlaveCplt+0x22c>
10049fa2:	68fa      	ldr	r2, [r7, #12]
10049fa4:	2380      	movs	r3, #128	@ 0x80
10049fa6:	045b      	lsls	r3, r3, #17
10049fa8:	429a      	cmp	r2, r3
10049faa:	d106      	bne.n	10049fba <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10049fac:	687b      	ldr	r3, [r7, #4]
10049fae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049fb0:	687b      	ldr	r3, [r7, #4]
10049fb2:	0011      	movs	r1, r2
10049fb4:	0018      	movs	r0, r3
10049fb6:	f000 f8cd 	bl	1004a154 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
10049fba:	687b      	ldr	r3, [r7, #4]
10049fbc:	2242      	movs	r2, #66	@ 0x42
10049fbe:	2100      	movs	r1, #0
10049fc0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
10049fc2:	687b      	ldr	r3, [r7, #4]
10049fc4:	2200      	movs	r2, #0
10049fc6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
10049fc8:	687b      	ldr	r3, [r7, #4]
10049fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049fcc:	2b00      	cmp	r3, #0
10049fce:	d013      	beq.n	10049ff8 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
10049fd0:	687b      	ldr	r3, [r7, #4]
10049fd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10049fd4:	687b      	ldr	r3, [r7, #4]
10049fd6:	0011      	movs	r1, r2
10049fd8:	0018      	movs	r0, r3
10049fda:	f000 f8bb 	bl	1004a154 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
10049fde:	687b      	ldr	r3, [r7, #4]
10049fe0:	2241      	movs	r2, #65	@ 0x41
10049fe2:	5c9b      	ldrb	r3, [r3, r2]
10049fe4:	b2db      	uxtb	r3, r3
10049fe6:	2b28      	cmp	r3, #40	@ 0x28
10049fe8:	d147      	bne.n	1004a07a <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
10049fea:	697a      	ldr	r2, [r7, #20]
10049fec:	687b      	ldr	r3, [r7, #4]
10049fee:	0011      	movs	r1, r2
10049ff0:	0018      	movs	r0, r3
10049ff2:	f000 f855 	bl	1004a0a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10049ff6:	e040      	b.n	1004a07a <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10049ff8:	687b      	ldr	r3, [r7, #4]
10049ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049ffc:	4a27      	ldr	r2, [pc, #156]	@ (1004a09c <I2C_ITSlaveCplt+0x31c>)
10049ffe:	4293      	cmp	r3, r2
1004a000:	d016      	beq.n	1004a030 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
1004a002:	687b      	ldr	r3, [r7, #4]
1004a004:	0018      	movs	r0, r3
1004a006:	f7ff fd83 	bl	10049b10 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1004a00a:	687b      	ldr	r3, [r7, #4]
1004a00c:	4a23      	ldr	r2, [pc, #140]	@ (1004a09c <I2C_ITSlaveCplt+0x31c>)
1004a00e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
1004a010:	687b      	ldr	r3, [r7, #4]
1004a012:	2241      	movs	r2, #65	@ 0x41
1004a014:	2120      	movs	r1, #32
1004a016:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a018:	687b      	ldr	r3, [r7, #4]
1004a01a:	2200      	movs	r2, #0
1004a01c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004a01e:	687b      	ldr	r3, [r7, #4]
1004a020:	2240      	movs	r2, #64	@ 0x40
1004a022:	2100      	movs	r1, #0
1004a024:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
1004a026:	687b      	ldr	r3, [r7, #4]
1004a028:	0018      	movs	r0, r3
1004a02a:	f7fe fee9 	bl	10048e00 <HAL_I2C_ListenCpltCallback>
}
1004a02e:	e024      	b.n	1004a07a <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004a030:	687b      	ldr	r3, [r7, #4]
1004a032:	2241      	movs	r2, #65	@ 0x41
1004a034:	5c9b      	ldrb	r3, [r3, r2]
1004a036:	b2db      	uxtb	r3, r3
1004a038:	2b22      	cmp	r3, #34	@ 0x22
1004a03a:	d10f      	bne.n	1004a05c <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
1004a03c:	687b      	ldr	r3, [r7, #4]
1004a03e:	2241      	movs	r2, #65	@ 0x41
1004a040:	2120      	movs	r1, #32
1004a042:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a044:	687b      	ldr	r3, [r7, #4]
1004a046:	2200      	movs	r2, #0
1004a048:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004a04a:	687b      	ldr	r3, [r7, #4]
1004a04c:	2240      	movs	r2, #64	@ 0x40
1004a04e:	2100      	movs	r1, #0
1004a050:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
1004a052:	687b      	ldr	r3, [r7, #4]
1004a054:	0018      	movs	r0, r3
1004a056:	f7fe febb 	bl	10048dd0 <HAL_I2C_SlaveRxCpltCallback>
}
1004a05a:	e00e      	b.n	1004a07a <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
1004a05c:	687b      	ldr	r3, [r7, #4]
1004a05e:	2241      	movs	r2, #65	@ 0x41
1004a060:	2120      	movs	r1, #32
1004a062:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a064:	687b      	ldr	r3, [r7, #4]
1004a066:	2200      	movs	r2, #0
1004a068:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004a06a:	687b      	ldr	r3, [r7, #4]
1004a06c:	2240      	movs	r2, #64	@ 0x40
1004a06e:	2100      	movs	r1, #0
1004a070:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
1004a072:	687b      	ldr	r3, [r7, #4]
1004a074:	0018      	movs	r0, r3
1004a076:	f7fe fea3 	bl	10048dc0 <HAL_I2C_SlaveTxCpltCallback>
}
1004a07a:	46c0      	nop			@ (mov r8, r8)
1004a07c:	46bd      	mov	sp, r7
1004a07e:	b006      	add	sp, #24
1004a080:	bd80      	pop	{r7, pc}
1004a082:	46c0      	nop			@ (mov r8, r8)
1004a084:	00008001 	.word	0x00008001
1004a088:	00008002 	.word	0x00008002
1004a08c:	00008003 	.word	0x00008003
1004a090:	fe00e800 	.word	0xfe00e800
1004a094:	ffffbfff 	.word	0xffffbfff
1004a098:	ffff7fff 	.word	0xffff7fff
1004a09c:	ffff0000 	.word	0xffff0000

1004a0a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1004a0a0:	b580      	push	{r7, lr}
1004a0a2:	b082      	sub	sp, #8
1004a0a4:	af00      	add	r7, sp, #0
1004a0a6:	6078      	str	r0, [r7, #4]
1004a0a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1004a0aa:	687b      	ldr	r3, [r7, #4]
1004a0ac:	4a27      	ldr	r2, [pc, #156]	@ (1004a14c <I2C_ITListenCplt+0xac>)
1004a0ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
1004a0b0:	687b      	ldr	r3, [r7, #4]
1004a0b2:	2200      	movs	r2, #0
1004a0b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
1004a0b6:	687b      	ldr	r3, [r7, #4]
1004a0b8:	2241      	movs	r2, #65	@ 0x41
1004a0ba:	2120      	movs	r1, #32
1004a0bc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
1004a0be:	687b      	ldr	r3, [r7, #4]
1004a0c0:	2242      	movs	r2, #66	@ 0x42
1004a0c2:	2100      	movs	r1, #0
1004a0c4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
1004a0c6:	687b      	ldr	r3, [r7, #4]
1004a0c8:	2200      	movs	r2, #0
1004a0ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
1004a0cc:	683b      	ldr	r3, [r7, #0]
1004a0ce:	089b      	lsrs	r3, r3, #2
1004a0d0:	001a      	movs	r2, r3
1004a0d2:	2301      	movs	r3, #1
1004a0d4:	4013      	ands	r3, r2
1004a0d6:	d022      	beq.n	1004a11e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
1004a0d8:	687b      	ldr	r3, [r7, #4]
1004a0da:	681b      	ldr	r3, [r3, #0]
1004a0dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004a0de:	687b      	ldr	r3, [r7, #4]
1004a0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a0e2:	b2d2      	uxtb	r2, r2
1004a0e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
1004a0e6:	687b      	ldr	r3, [r7, #4]
1004a0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
1004a0ea:	1c5a      	adds	r2, r3, #1
1004a0ec:	687b      	ldr	r3, [r7, #4]
1004a0ee:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
1004a0f0:	687b      	ldr	r3, [r7, #4]
1004a0f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004a0f4:	2b00      	cmp	r3, #0
1004a0f6:	d012      	beq.n	1004a11e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
1004a0f8:	687b      	ldr	r3, [r7, #4]
1004a0fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004a0fc:	3b01      	subs	r3, #1
1004a0fe:	b29a      	uxth	r2, r3
1004a100:	687b      	ldr	r3, [r7, #4]
1004a102:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
1004a104:	687b      	ldr	r3, [r7, #4]
1004a106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004a108:	b29b      	uxth	r3, r3
1004a10a:	3b01      	subs	r3, #1
1004a10c:	b29a      	uxth	r2, r3
1004a10e:	687b      	ldr	r3, [r7, #4]
1004a110:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004a112:	687b      	ldr	r3, [r7, #4]
1004a114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a116:	2204      	movs	r2, #4
1004a118:	431a      	orrs	r2, r3
1004a11a:	687b      	ldr	r3, [r7, #4]
1004a11c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004a11e:	4a0c      	ldr	r2, [pc, #48]	@ (1004a150 <I2C_ITListenCplt+0xb0>)
1004a120:	687b      	ldr	r3, [r7, #4]
1004a122:	0011      	movs	r1, r2
1004a124:	0018      	movs	r0, r3
1004a126:	f000 fa45 	bl	1004a5b4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a12a:	687b      	ldr	r3, [r7, #4]
1004a12c:	681b      	ldr	r3, [r3, #0]
1004a12e:	2210      	movs	r2, #16
1004a130:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
1004a132:	687b      	ldr	r3, [r7, #4]
1004a134:	2240      	movs	r2, #64	@ 0x40
1004a136:	2100      	movs	r1, #0
1004a138:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
1004a13a:	687b      	ldr	r3, [r7, #4]
1004a13c:	0018      	movs	r0, r3
1004a13e:	f7fe fe5f 	bl	10048e00 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
1004a142:	46c0      	nop			@ (mov r8, r8)
1004a144:	46bd      	mov	sp, r7
1004a146:	b002      	add	sp, #8
1004a148:	bd80      	pop	{r7, pc}
1004a14a:	46c0      	nop			@ (mov r8, r8)
1004a14c:	ffff0000 	.word	0xffff0000
1004a150:	00008003 	.word	0x00008003

1004a154 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
1004a154:	b580      	push	{r7, lr}
1004a156:	b084      	sub	sp, #16
1004a158:	af00      	add	r7, sp, #0
1004a15a:	6078      	str	r0, [r7, #4]
1004a15c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
1004a15e:	200f      	movs	r0, #15
1004a160:	183b      	adds	r3, r7, r0
1004a162:	687a      	ldr	r2, [r7, #4]
1004a164:	2141      	movs	r1, #65	@ 0x41
1004a166:	5c52      	ldrb	r2, [r2, r1]
1004a168:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
1004a16a:	687b      	ldr	r3, [r7, #4]
1004a16c:	2242      	movs	r2, #66	@ 0x42
1004a16e:	2100      	movs	r1, #0
1004a170:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
1004a172:	687b      	ldr	r3, [r7, #4]
1004a174:	4a72      	ldr	r2, [pc, #456]	@ (1004a340 <I2C_ITError+0x1ec>)
1004a176:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
1004a178:	687b      	ldr	r3, [r7, #4]
1004a17a:	2200      	movs	r2, #0
1004a17c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
1004a17e:	687b      	ldr	r3, [r7, #4]
1004a180:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004a182:	683b      	ldr	r3, [r7, #0]
1004a184:	431a      	orrs	r2, r3
1004a186:	687b      	ldr	r3, [r7, #4]
1004a188:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
1004a18a:	183b      	adds	r3, r7, r0
1004a18c:	781b      	ldrb	r3, [r3, #0]
1004a18e:	2b28      	cmp	r3, #40	@ 0x28
1004a190:	d007      	beq.n	1004a1a2 <I2C_ITError+0x4e>
1004a192:	183b      	adds	r3, r7, r0
1004a194:	781b      	ldrb	r3, [r3, #0]
1004a196:	2b29      	cmp	r3, #41	@ 0x29
1004a198:	d003      	beq.n	1004a1a2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
1004a19a:	183b      	adds	r3, r7, r0
1004a19c:	781b      	ldrb	r3, [r3, #0]
1004a19e:	2b2a      	cmp	r3, #42	@ 0x2a
1004a1a0:	d10c      	bne.n	1004a1bc <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004a1a2:	687b      	ldr	r3, [r7, #4]
1004a1a4:	2103      	movs	r1, #3
1004a1a6:	0018      	movs	r0, r3
1004a1a8:	f000 fa04 	bl	1004a5b4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
1004a1ac:	687b      	ldr	r3, [r7, #4]
1004a1ae:	2241      	movs	r2, #65	@ 0x41
1004a1b0:	2128      	movs	r1, #40	@ 0x28
1004a1b2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
1004a1b4:	687b      	ldr	r3, [r7, #4]
1004a1b6:	4a63      	ldr	r2, [pc, #396]	@ (1004a344 <I2C_ITError+0x1f0>)
1004a1b8:	635a      	str	r2, [r3, #52]	@ 0x34
1004a1ba:	e032      	b.n	1004a222 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004a1bc:	4a62      	ldr	r2, [pc, #392]	@ (1004a348 <I2C_ITError+0x1f4>)
1004a1be:	687b      	ldr	r3, [r7, #4]
1004a1c0:	0011      	movs	r1, r2
1004a1c2:	0018      	movs	r0, r3
1004a1c4:	f000 f9f6 	bl	1004a5b4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
1004a1c8:	687b      	ldr	r3, [r7, #4]
1004a1ca:	0018      	movs	r0, r3
1004a1cc:	f000 f8ed 	bl	1004a3aa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
1004a1d0:	687b      	ldr	r3, [r7, #4]
1004a1d2:	2241      	movs	r2, #65	@ 0x41
1004a1d4:	5c9b      	ldrb	r3, [r3, r2]
1004a1d6:	b2db      	uxtb	r3, r3
1004a1d8:	2b60      	cmp	r3, #96	@ 0x60
1004a1da:	d01f      	beq.n	1004a21c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
1004a1dc:	687b      	ldr	r3, [r7, #4]
1004a1de:	2241      	movs	r2, #65	@ 0x41
1004a1e0:	2120      	movs	r1, #32
1004a1e2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
1004a1e4:	687b      	ldr	r3, [r7, #4]
1004a1e6:	681b      	ldr	r3, [r3, #0]
1004a1e8:	699b      	ldr	r3, [r3, #24]
1004a1ea:	2220      	movs	r2, #32
1004a1ec:	4013      	ands	r3, r2
1004a1ee:	2b20      	cmp	r3, #32
1004a1f0:	d114      	bne.n	1004a21c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
1004a1f2:	687b      	ldr	r3, [r7, #4]
1004a1f4:	681b      	ldr	r3, [r3, #0]
1004a1f6:	699b      	ldr	r3, [r3, #24]
1004a1f8:	2210      	movs	r2, #16
1004a1fa:	4013      	ands	r3, r2
1004a1fc:	2b10      	cmp	r3, #16
1004a1fe:	d109      	bne.n	1004a214 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004a200:	687b      	ldr	r3, [r7, #4]
1004a202:	681b      	ldr	r3, [r3, #0]
1004a204:	2210      	movs	r2, #16
1004a206:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004a208:	687b      	ldr	r3, [r7, #4]
1004a20a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004a20c:	2204      	movs	r2, #4
1004a20e:	431a      	orrs	r2, r3
1004a210:	687b      	ldr	r3, [r7, #4]
1004a212:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
1004a214:	687b      	ldr	r3, [r7, #4]
1004a216:	681b      	ldr	r3, [r3, #0]
1004a218:	2220      	movs	r2, #32
1004a21a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
1004a21c:	687b      	ldr	r3, [r7, #4]
1004a21e:	2200      	movs	r2, #0
1004a220:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
1004a222:	687b      	ldr	r3, [r7, #4]
1004a224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004a226:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
1004a228:	687b      	ldr	r3, [r7, #4]
1004a22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a22c:	2b00      	cmp	r3, #0
1004a22e:	d03b      	beq.n	1004a2a8 <I2C_ITError+0x154>
1004a230:	68bb      	ldr	r3, [r7, #8]
1004a232:	2b11      	cmp	r3, #17
1004a234:	d002      	beq.n	1004a23c <I2C_ITError+0xe8>
1004a236:	68bb      	ldr	r3, [r7, #8]
1004a238:	2b21      	cmp	r3, #33	@ 0x21
1004a23a:	d135      	bne.n	1004a2a8 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
1004a23c:	687b      	ldr	r3, [r7, #4]
1004a23e:	681b      	ldr	r3, [r3, #0]
1004a240:	681a      	ldr	r2, [r3, #0]
1004a242:	2380      	movs	r3, #128	@ 0x80
1004a244:	01db      	lsls	r3, r3, #7
1004a246:	401a      	ands	r2, r3
1004a248:	2380      	movs	r3, #128	@ 0x80
1004a24a:	01db      	lsls	r3, r3, #7
1004a24c:	429a      	cmp	r2, r3
1004a24e:	d107      	bne.n	1004a260 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004a250:	687b      	ldr	r3, [r7, #4]
1004a252:	681b      	ldr	r3, [r3, #0]
1004a254:	681a      	ldr	r2, [r3, #0]
1004a256:	687b      	ldr	r3, [r7, #4]
1004a258:	681b      	ldr	r3, [r3, #0]
1004a25a:	493c      	ldr	r1, [pc, #240]	@ (1004a34c <I2C_ITError+0x1f8>)
1004a25c:	400a      	ands	r2, r1
1004a25e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004a260:	687b      	ldr	r3, [r7, #4]
1004a262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a264:	0018      	movs	r0, r3
1004a266:	f7fd fec6 	bl	10047ff6 <HAL_DMA_GetState>
1004a26a:	0003      	movs	r3, r0
1004a26c:	2b01      	cmp	r3, #1
1004a26e:	d016      	beq.n	1004a29e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
1004a270:	687b      	ldr	r3, [r7, #4]
1004a272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a274:	4a36      	ldr	r2, [pc, #216]	@ (1004a350 <I2C_ITError+0x1fc>)
1004a276:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1004a278:	687b      	ldr	r3, [r7, #4]
1004a27a:	2240      	movs	r2, #64	@ 0x40
1004a27c:	2100      	movs	r1, #0
1004a27e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
1004a280:	687b      	ldr	r3, [r7, #4]
1004a282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a284:	0018      	movs	r0, r3
1004a286:	f7fd fe6f 	bl	10047f68 <HAL_DMA_Abort_IT>
1004a28a:	1e03      	subs	r3, r0, #0
1004a28c:	d051      	beq.n	1004a332 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
1004a28e:	687b      	ldr	r3, [r7, #4]
1004a290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004a294:	687b      	ldr	r3, [r7, #4]
1004a296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a298:	0018      	movs	r0, r3
1004a29a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004a29c:	e049      	b.n	1004a332 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
1004a29e:	687b      	ldr	r3, [r7, #4]
1004a2a0:	0018      	movs	r0, r3
1004a2a2:	f000 f859 	bl	1004a358 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004a2a6:	e044      	b.n	1004a332 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
1004a2a8:	687b      	ldr	r3, [r7, #4]
1004a2aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a2ac:	2b00      	cmp	r3, #0
1004a2ae:	d03b      	beq.n	1004a328 <I2C_ITError+0x1d4>
1004a2b0:	68bb      	ldr	r3, [r7, #8]
1004a2b2:	2b12      	cmp	r3, #18
1004a2b4:	d002      	beq.n	1004a2bc <I2C_ITError+0x168>
1004a2b6:	68bb      	ldr	r3, [r7, #8]
1004a2b8:	2b22      	cmp	r3, #34	@ 0x22
1004a2ba:	d135      	bne.n	1004a328 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
1004a2bc:	687b      	ldr	r3, [r7, #4]
1004a2be:	681b      	ldr	r3, [r3, #0]
1004a2c0:	681a      	ldr	r2, [r3, #0]
1004a2c2:	2380      	movs	r3, #128	@ 0x80
1004a2c4:	021b      	lsls	r3, r3, #8
1004a2c6:	401a      	ands	r2, r3
1004a2c8:	2380      	movs	r3, #128	@ 0x80
1004a2ca:	021b      	lsls	r3, r3, #8
1004a2cc:	429a      	cmp	r2, r3
1004a2ce:	d107      	bne.n	1004a2e0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
1004a2d0:	687b      	ldr	r3, [r7, #4]
1004a2d2:	681b      	ldr	r3, [r3, #0]
1004a2d4:	681a      	ldr	r2, [r3, #0]
1004a2d6:	687b      	ldr	r3, [r7, #4]
1004a2d8:	681b      	ldr	r3, [r3, #0]
1004a2da:	491e      	ldr	r1, [pc, #120]	@ (1004a354 <I2C_ITError+0x200>)
1004a2dc:	400a      	ands	r2, r1
1004a2de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004a2e0:	687b      	ldr	r3, [r7, #4]
1004a2e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a2e4:	0018      	movs	r0, r3
1004a2e6:	f7fd fe86 	bl	10047ff6 <HAL_DMA_GetState>
1004a2ea:	0003      	movs	r3, r0
1004a2ec:	2b01      	cmp	r3, #1
1004a2ee:	d016      	beq.n	1004a31e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
1004a2f0:	687b      	ldr	r3, [r7, #4]
1004a2f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a2f4:	4a16      	ldr	r2, [pc, #88]	@ (1004a350 <I2C_ITError+0x1fc>)
1004a2f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
1004a2f8:	687b      	ldr	r3, [r7, #4]
1004a2fa:	2240      	movs	r2, #64	@ 0x40
1004a2fc:	2100      	movs	r1, #0
1004a2fe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
1004a300:	687b      	ldr	r3, [r7, #4]
1004a302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a304:	0018      	movs	r0, r3
1004a306:	f7fd fe2f 	bl	10047f68 <HAL_DMA_Abort_IT>
1004a30a:	1e03      	subs	r3, r0, #0
1004a30c:	d013      	beq.n	1004a336 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
1004a30e:	687b      	ldr	r3, [r7, #4]
1004a310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004a314:	687b      	ldr	r3, [r7, #4]
1004a316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a318:	0018      	movs	r0, r3
1004a31a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004a31c:	e00b      	b.n	1004a336 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
1004a31e:	687b      	ldr	r3, [r7, #4]
1004a320:	0018      	movs	r0, r3
1004a322:	f000 f819 	bl	1004a358 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004a326:	e006      	b.n	1004a336 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
1004a328:	687b      	ldr	r3, [r7, #4]
1004a32a:	0018      	movs	r0, r3
1004a32c:	f000 f814 	bl	1004a358 <I2C_TreatErrorCallback>
  }
}
1004a330:	e002      	b.n	1004a338 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004a332:	46c0      	nop			@ (mov r8, r8)
1004a334:	e000      	b.n	1004a338 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
1004a336:	46c0      	nop			@ (mov r8, r8)
}
1004a338:	46c0      	nop			@ (mov r8, r8)
1004a33a:	46bd      	mov	sp, r7
1004a33c:	b004      	add	sp, #16
1004a33e:	bd80      	pop	{r7, pc}
1004a340:	ffff0000 	.word	0xffff0000
1004a344:	10049095 	.word	0x10049095
1004a348:	00008003 	.word	0x00008003
1004a34c:	ffffbfff 	.word	0xffffbfff
1004a350:	1004a3ef 	.word	0x1004a3ef
1004a354:	ffff7fff 	.word	0xffff7fff

1004a358 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
1004a358:	b580      	push	{r7, lr}
1004a35a:	b082      	sub	sp, #8
1004a35c:	af00      	add	r7, sp, #0
1004a35e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
1004a360:	687b      	ldr	r3, [r7, #4]
1004a362:	2241      	movs	r2, #65	@ 0x41
1004a364:	5c9b      	ldrb	r3, [r3, r2]
1004a366:	b2db      	uxtb	r3, r3
1004a368:	2b60      	cmp	r3, #96	@ 0x60
1004a36a:	d10f      	bne.n	1004a38c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
1004a36c:	687b      	ldr	r3, [r7, #4]
1004a36e:	2241      	movs	r2, #65	@ 0x41
1004a370:	2120      	movs	r1, #32
1004a372:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
1004a374:	687b      	ldr	r3, [r7, #4]
1004a376:	2200      	movs	r2, #0
1004a378:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004a37a:	687b      	ldr	r3, [r7, #4]
1004a37c:	2240      	movs	r2, #64	@ 0x40
1004a37e:	2100      	movs	r1, #0
1004a380:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
1004a382:	687b      	ldr	r3, [r7, #4]
1004a384:	0018      	movs	r0, r3
1004a386:	f7fe fd43 	bl	10048e10 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
1004a38a:	e00a      	b.n	1004a3a2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
1004a38c:	687b      	ldr	r3, [r7, #4]
1004a38e:	2200      	movs	r2, #0
1004a390:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004a392:	687b      	ldr	r3, [r7, #4]
1004a394:	2240      	movs	r2, #64	@ 0x40
1004a396:	2100      	movs	r1, #0
1004a398:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
1004a39a:	687b      	ldr	r3, [r7, #4]
1004a39c:	0018      	movs	r0, r3
1004a39e:	f7fa ff33 	bl	10045208 <HAL_I2C_ErrorCallback>
}
1004a3a2:	46c0      	nop			@ (mov r8, r8)
1004a3a4:	46bd      	mov	sp, r7
1004a3a6:	b002      	add	sp, #8
1004a3a8:	bd80      	pop	{r7, pc}

1004a3aa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
1004a3aa:	b580      	push	{r7, lr}
1004a3ac:	b082      	sub	sp, #8
1004a3ae:	af00      	add	r7, sp, #0
1004a3b0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
1004a3b2:	687b      	ldr	r3, [r7, #4]
1004a3b4:	681b      	ldr	r3, [r3, #0]
1004a3b6:	699b      	ldr	r3, [r3, #24]
1004a3b8:	2202      	movs	r2, #2
1004a3ba:	4013      	ands	r3, r2
1004a3bc:	2b02      	cmp	r3, #2
1004a3be:	d103      	bne.n	1004a3c8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
1004a3c0:	687b      	ldr	r3, [r7, #4]
1004a3c2:	681b      	ldr	r3, [r3, #0]
1004a3c4:	2200      	movs	r2, #0
1004a3c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
1004a3c8:	687b      	ldr	r3, [r7, #4]
1004a3ca:	681b      	ldr	r3, [r3, #0]
1004a3cc:	699b      	ldr	r3, [r3, #24]
1004a3ce:	2201      	movs	r2, #1
1004a3d0:	4013      	ands	r3, r2
1004a3d2:	2b01      	cmp	r3, #1
1004a3d4:	d007      	beq.n	1004a3e6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
1004a3d6:	687b      	ldr	r3, [r7, #4]
1004a3d8:	681b      	ldr	r3, [r3, #0]
1004a3da:	699a      	ldr	r2, [r3, #24]
1004a3dc:	687b      	ldr	r3, [r7, #4]
1004a3de:	681b      	ldr	r3, [r3, #0]
1004a3e0:	2101      	movs	r1, #1
1004a3e2:	430a      	orrs	r2, r1
1004a3e4:	619a      	str	r2, [r3, #24]
  }
}
1004a3e6:	46c0      	nop			@ (mov r8, r8)
1004a3e8:	46bd      	mov	sp, r7
1004a3ea:	b002      	add	sp, #8
1004a3ec:	bd80      	pop	{r7, pc}

1004a3ee <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
1004a3ee:	b580      	push	{r7, lr}
1004a3f0:	b084      	sub	sp, #16
1004a3f2:	af00      	add	r7, sp, #0
1004a3f4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
1004a3f6:	687b      	ldr	r3, [r7, #4]
1004a3f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
1004a3fc:	68fb      	ldr	r3, [r7, #12]
1004a3fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a400:	2b00      	cmp	r3, #0
1004a402:	d003      	beq.n	1004a40c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
1004a404:	68fb      	ldr	r3, [r7, #12]
1004a406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004a408:	2200      	movs	r2, #0
1004a40a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
1004a40c:	68fb      	ldr	r3, [r7, #12]
1004a40e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a410:	2b00      	cmp	r3, #0
1004a412:	d003      	beq.n	1004a41c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
1004a414:	68fb      	ldr	r3, [r7, #12]
1004a416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004a418:	2200      	movs	r2, #0
1004a41a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
1004a41c:	68fb      	ldr	r3, [r7, #12]
1004a41e:	0018      	movs	r0, r3
1004a420:	f7ff ff9a 	bl	1004a358 <I2C_TreatErrorCallback>
}
1004a424:	46c0      	nop			@ (mov r8, r8)
1004a426:	46bd      	mov	sp, r7
1004a428:	b004      	add	sp, #16
1004a42a:	bd80      	pop	{r7, pc}

1004a42c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
1004a42c:	b590      	push	{r4, r7, lr}
1004a42e:	b087      	sub	sp, #28
1004a430:	af00      	add	r7, sp, #0
1004a432:	60f8      	str	r0, [r7, #12]
1004a434:	0008      	movs	r0, r1
1004a436:	0011      	movs	r1, r2
1004a438:	607b      	str	r3, [r7, #4]
1004a43a:	240a      	movs	r4, #10
1004a43c:	193b      	adds	r3, r7, r4
1004a43e:	1c02      	adds	r2, r0, #0
1004a440:	801a      	strh	r2, [r3, #0]
1004a442:	2009      	movs	r0, #9
1004a444:	183b      	adds	r3, r7, r0
1004a446:	1c0a      	adds	r2, r1, #0
1004a448:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1004a44a:	193b      	adds	r3, r7, r4
1004a44c:	881b      	ldrh	r3, [r3, #0]
1004a44e:	059b      	lsls	r3, r3, #22
1004a450:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
1004a452:	183b      	adds	r3, r7, r0
1004a454:	781b      	ldrb	r3, [r3, #0]
1004a456:	0419      	lsls	r1, r3, #16
1004a458:	23ff      	movs	r3, #255	@ 0xff
1004a45a:	041b      	lsls	r3, r3, #16
1004a45c:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1004a45e:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
1004a460:	687b      	ldr	r3, [r7, #4]
1004a462:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1004a464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004a466:	4313      	orrs	r3, r2
1004a468:	005b      	lsls	r3, r3, #1
1004a46a:	085b      	lsrs	r3, r3, #1
1004a46c:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
1004a46e:	68fb      	ldr	r3, [r7, #12]
1004a470:	681b      	ldr	r3, [r3, #0]
1004a472:	685b      	ldr	r3, [r3, #4]
1004a474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004a476:	0d51      	lsrs	r1, r2, #21
1004a478:	2280      	movs	r2, #128	@ 0x80
1004a47a:	00d2      	lsls	r2, r2, #3
1004a47c:	400a      	ands	r2, r1
1004a47e:	4907      	ldr	r1, [pc, #28]	@ (1004a49c <I2C_TransferConfig+0x70>)
1004a480:	430a      	orrs	r2, r1
1004a482:	43d2      	mvns	r2, r2
1004a484:	401a      	ands	r2, r3
1004a486:	0011      	movs	r1, r2
1004a488:	68fb      	ldr	r3, [r7, #12]
1004a48a:	681b      	ldr	r3, [r3, #0]
1004a48c:	697a      	ldr	r2, [r7, #20]
1004a48e:	430a      	orrs	r2, r1
1004a490:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
1004a492:	46c0      	nop			@ (mov r8, r8)
1004a494:	46bd      	mov	sp, r7
1004a496:	b007      	add	sp, #28
1004a498:	bd90      	pop	{r4, r7, pc}
1004a49a:	46c0      	nop			@ (mov r8, r8)
1004a49c:	03ff63ff 	.word	0x03ff63ff

1004a4a0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
1004a4a0:	b580      	push	{r7, lr}
1004a4a2:	b084      	sub	sp, #16
1004a4a4:	af00      	add	r7, sp, #0
1004a4a6:	6078      	str	r0, [r7, #4]
1004a4a8:	000a      	movs	r2, r1
1004a4aa:	1cbb      	adds	r3, r7, #2
1004a4ac:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
1004a4ae:	2300      	movs	r3, #0
1004a4b0:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
1004a4b2:	687b      	ldr	r3, [r7, #4]
1004a4b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004a4b6:	4b3c      	ldr	r3, [pc, #240]	@ (1004a5a8 <I2C_Enable_IRQ+0x108>)
1004a4b8:	429a      	cmp	r2, r3
1004a4ba:	d035      	beq.n	1004a528 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
1004a4bc:	687b      	ldr	r3, [r7, #4]
1004a4be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
1004a4c0:	4b3a      	ldr	r3, [pc, #232]	@ (1004a5ac <I2C_Enable_IRQ+0x10c>)
1004a4c2:	429a      	cmp	r2, r3
1004a4c4:	d030      	beq.n	1004a528 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
1004a4c6:	687b      	ldr	r3, [r7, #4]
1004a4c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
1004a4ca:	4b39      	ldr	r3, [pc, #228]	@ (1004a5b0 <I2C_Enable_IRQ+0x110>)
1004a4cc:	429a      	cmp	r2, r3
1004a4ce:	d02b      	beq.n	1004a528 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004a4d0:	1cbb      	adds	r3, r7, #2
1004a4d2:	2200      	movs	r2, #0
1004a4d4:	5e9b      	ldrsh	r3, [r3, r2]
1004a4d6:	2b00      	cmp	r3, #0
1004a4d8:	da03      	bge.n	1004a4e2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a4da:	68fb      	ldr	r3, [r7, #12]
1004a4dc:	22b8      	movs	r2, #184	@ 0xb8
1004a4de:	4313      	orrs	r3, r2
1004a4e0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004a4e2:	1cbb      	adds	r3, r7, #2
1004a4e4:	881b      	ldrh	r3, [r3, #0]
1004a4e6:	2201      	movs	r2, #1
1004a4e8:	4013      	ands	r3, r2
1004a4ea:	d003      	beq.n	1004a4f4 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
1004a4ec:	68fb      	ldr	r3, [r7, #12]
1004a4ee:	22f2      	movs	r2, #242	@ 0xf2
1004a4f0:	4313      	orrs	r3, r2
1004a4f2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004a4f4:	1cbb      	adds	r3, r7, #2
1004a4f6:	881b      	ldrh	r3, [r3, #0]
1004a4f8:	2202      	movs	r2, #2
1004a4fa:	4013      	ands	r3, r2
1004a4fc:	d003      	beq.n	1004a506 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004a4fe:	68fb      	ldr	r3, [r7, #12]
1004a500:	22f4      	movs	r2, #244	@ 0xf4
1004a502:	4313      	orrs	r3, r2
1004a504:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
1004a506:	1cbb      	adds	r3, r7, #2
1004a508:	881b      	ldrh	r3, [r3, #0]
1004a50a:	2b10      	cmp	r3, #16
1004a50c:	d103      	bne.n	1004a516 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004a50e:	68fb      	ldr	r3, [r7, #12]
1004a510:	2290      	movs	r2, #144	@ 0x90
1004a512:	4313      	orrs	r3, r2
1004a514:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004a516:	1cbb      	adds	r3, r7, #2
1004a518:	881b      	ldrh	r3, [r3, #0]
1004a51a:	2b20      	cmp	r3, #32
1004a51c:	d137      	bne.n	1004a58e <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
1004a51e:	68fb      	ldr	r3, [r7, #12]
1004a520:	2220      	movs	r2, #32
1004a522:	4313      	orrs	r3, r2
1004a524:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004a526:	e032      	b.n	1004a58e <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004a528:	1cbb      	adds	r3, r7, #2
1004a52a:	2200      	movs	r2, #0
1004a52c:	5e9b      	ldrsh	r3, [r3, r2]
1004a52e:	2b00      	cmp	r3, #0
1004a530:	da03      	bge.n	1004a53a <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a532:	68fb      	ldr	r3, [r7, #12]
1004a534:	22b8      	movs	r2, #184	@ 0xb8
1004a536:	4313      	orrs	r3, r2
1004a538:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004a53a:	1cbb      	adds	r3, r7, #2
1004a53c:	881b      	ldrh	r3, [r3, #0]
1004a53e:	2201      	movs	r2, #1
1004a540:	4013      	ands	r3, r2
1004a542:	d003      	beq.n	1004a54c <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
1004a544:	68fb      	ldr	r3, [r7, #12]
1004a546:	22f2      	movs	r2, #242	@ 0xf2
1004a548:	4313      	orrs	r3, r2
1004a54a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004a54c:	1cbb      	adds	r3, r7, #2
1004a54e:	881b      	ldrh	r3, [r3, #0]
1004a550:	2202      	movs	r2, #2
1004a552:	4013      	ands	r3, r2
1004a554:	d003      	beq.n	1004a55e <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004a556:	68fb      	ldr	r3, [r7, #12]
1004a558:	22f4      	movs	r2, #244	@ 0xf4
1004a55a:	4313      	orrs	r3, r2
1004a55c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
1004a55e:	1cbb      	adds	r3, r7, #2
1004a560:	881b      	ldrh	r3, [r3, #0]
1004a562:	2b10      	cmp	r3, #16
1004a564:	d103      	bne.n	1004a56e <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004a566:	68fb      	ldr	r3, [r7, #12]
1004a568:	2290      	movs	r2, #144	@ 0x90
1004a56a:	4313      	orrs	r3, r2
1004a56c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004a56e:	1cbb      	adds	r3, r7, #2
1004a570:	881b      	ldrh	r3, [r3, #0]
1004a572:	2b20      	cmp	r3, #32
1004a574:	d103      	bne.n	1004a57e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
1004a576:	68fb      	ldr	r3, [r7, #12]
1004a578:	2260      	movs	r2, #96	@ 0x60
1004a57a:	4313      	orrs	r3, r2
1004a57c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
1004a57e:	1cbb      	adds	r3, r7, #2
1004a580:	881b      	ldrh	r3, [r3, #0]
1004a582:	2b40      	cmp	r3, #64	@ 0x40
1004a584:	d103      	bne.n	1004a58e <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
1004a586:	68fb      	ldr	r3, [r7, #12]
1004a588:	2240      	movs	r2, #64	@ 0x40
1004a58a:	4313      	orrs	r3, r2
1004a58c:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
1004a58e:	687b      	ldr	r3, [r7, #4]
1004a590:	681b      	ldr	r3, [r3, #0]
1004a592:	6819      	ldr	r1, [r3, #0]
1004a594:	687b      	ldr	r3, [r7, #4]
1004a596:	681b      	ldr	r3, [r3, #0]
1004a598:	68fa      	ldr	r2, [r7, #12]
1004a59a:	430a      	orrs	r2, r1
1004a59c:	601a      	str	r2, [r3, #0]
}
1004a59e:	46c0      	nop			@ (mov r8, r8)
1004a5a0:	46bd      	mov	sp, r7
1004a5a2:	b004      	add	sp, #16
1004a5a4:	bd80      	pop	{r7, pc}
1004a5a6:	46c0      	nop			@ (mov r8, r8)
1004a5a8:	100492bd 	.word	0x100492bd
1004a5ac:	10049755 	.word	0x10049755
1004a5b0:	100494d5 	.word	0x100494d5

1004a5b4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
1004a5b4:	b580      	push	{r7, lr}
1004a5b6:	b084      	sub	sp, #16
1004a5b8:	af00      	add	r7, sp, #0
1004a5ba:	6078      	str	r0, [r7, #4]
1004a5bc:	000a      	movs	r2, r1
1004a5be:	1cbb      	adds	r3, r7, #2
1004a5c0:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
1004a5c2:	2300      	movs	r3, #0
1004a5c4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
1004a5c6:	1cbb      	adds	r3, r7, #2
1004a5c8:	881b      	ldrh	r3, [r3, #0]
1004a5ca:	2201      	movs	r2, #1
1004a5cc:	4013      	ands	r3, r2
1004a5ce:	d010      	beq.n	1004a5f2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
1004a5d0:	68fb      	ldr	r3, [r7, #12]
1004a5d2:	2242      	movs	r2, #66	@ 0x42
1004a5d4:	4313      	orrs	r3, r2
1004a5d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
1004a5d8:	687b      	ldr	r3, [r7, #4]
1004a5da:	2241      	movs	r2, #65	@ 0x41
1004a5dc:	5c9b      	ldrb	r3, [r3, r2]
1004a5de:	b2db      	uxtb	r3, r3
1004a5e0:	001a      	movs	r2, r3
1004a5e2:	2328      	movs	r3, #40	@ 0x28
1004a5e4:	4013      	ands	r3, r2
1004a5e6:	2b28      	cmp	r3, #40	@ 0x28
1004a5e8:	d003      	beq.n	1004a5f2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a5ea:	68fb      	ldr	r3, [r7, #12]
1004a5ec:	22b0      	movs	r2, #176	@ 0xb0
1004a5ee:	4313      	orrs	r3, r2
1004a5f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
1004a5f2:	1cbb      	adds	r3, r7, #2
1004a5f4:	881b      	ldrh	r3, [r3, #0]
1004a5f6:	2202      	movs	r2, #2
1004a5f8:	4013      	ands	r3, r2
1004a5fa:	d010      	beq.n	1004a61e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
1004a5fc:	68fb      	ldr	r3, [r7, #12]
1004a5fe:	2244      	movs	r2, #68	@ 0x44
1004a600:	4313      	orrs	r3, r2
1004a602:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
1004a604:	687b      	ldr	r3, [r7, #4]
1004a606:	2241      	movs	r2, #65	@ 0x41
1004a608:	5c9b      	ldrb	r3, [r3, r2]
1004a60a:	b2db      	uxtb	r3, r3
1004a60c:	001a      	movs	r2, r3
1004a60e:	2328      	movs	r3, #40	@ 0x28
1004a610:	4013      	ands	r3, r2
1004a612:	2b28      	cmp	r3, #40	@ 0x28
1004a614:	d003      	beq.n	1004a61e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a616:	68fb      	ldr	r3, [r7, #12]
1004a618:	22b0      	movs	r2, #176	@ 0xb0
1004a61a:	4313      	orrs	r3, r2
1004a61c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
1004a61e:	1cbb      	adds	r3, r7, #2
1004a620:	2200      	movs	r2, #0
1004a622:	5e9b      	ldrsh	r3, [r3, r2]
1004a624:	2b00      	cmp	r3, #0
1004a626:	da03      	bge.n	1004a630 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004a628:	68fb      	ldr	r3, [r7, #12]
1004a62a:	22b8      	movs	r2, #184	@ 0xb8
1004a62c:	4313      	orrs	r3, r2
1004a62e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
1004a630:	1cbb      	adds	r3, r7, #2
1004a632:	881b      	ldrh	r3, [r3, #0]
1004a634:	2b10      	cmp	r3, #16
1004a636:	d103      	bne.n	1004a640 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004a638:	68fb      	ldr	r3, [r7, #12]
1004a63a:	2290      	movs	r2, #144	@ 0x90
1004a63c:	4313      	orrs	r3, r2
1004a63e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
1004a640:	1cbb      	adds	r3, r7, #2
1004a642:	881b      	ldrh	r3, [r3, #0]
1004a644:	2b20      	cmp	r3, #32
1004a646:	d103      	bne.n	1004a650 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
1004a648:	68fb      	ldr	r3, [r7, #12]
1004a64a:	2220      	movs	r2, #32
1004a64c:	4313      	orrs	r3, r2
1004a64e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
1004a650:	1cbb      	adds	r3, r7, #2
1004a652:	881b      	ldrh	r3, [r3, #0]
1004a654:	2b40      	cmp	r3, #64	@ 0x40
1004a656:	d103      	bne.n	1004a660 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
1004a658:	68fb      	ldr	r3, [r7, #12]
1004a65a:	2240      	movs	r2, #64	@ 0x40
1004a65c:	4313      	orrs	r3, r2
1004a65e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
1004a660:	687b      	ldr	r3, [r7, #4]
1004a662:	681b      	ldr	r3, [r3, #0]
1004a664:	681a      	ldr	r2, [r3, #0]
1004a666:	68fb      	ldr	r3, [r7, #12]
1004a668:	43d9      	mvns	r1, r3
1004a66a:	687b      	ldr	r3, [r7, #4]
1004a66c:	681b      	ldr	r3, [r3, #0]
1004a66e:	400a      	ands	r2, r1
1004a670:	601a      	str	r2, [r3, #0]
}
1004a672:	46c0      	nop			@ (mov r8, r8)
1004a674:	46bd      	mov	sp, r7
1004a676:	b004      	add	sp, #16
1004a678:	bd80      	pop	{r7, pc}
	...

1004a67c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
1004a67c:	b580      	push	{r7, lr}
1004a67e:	b082      	sub	sp, #8
1004a680:	af00      	add	r7, sp, #0
1004a682:	6078      	str	r0, [r7, #4]
1004a684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004a686:	687b      	ldr	r3, [r7, #4]
1004a688:	2241      	movs	r2, #65	@ 0x41
1004a68a:	5c9b      	ldrb	r3, [r3, r2]
1004a68c:	b2db      	uxtb	r3, r3
1004a68e:	2b20      	cmp	r3, #32
1004a690:	d138      	bne.n	1004a704 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1004a692:	687b      	ldr	r3, [r7, #4]
1004a694:	2240      	movs	r2, #64	@ 0x40
1004a696:	5c9b      	ldrb	r3, [r3, r2]
1004a698:	2b01      	cmp	r3, #1
1004a69a:	d101      	bne.n	1004a6a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
1004a69c:	2302      	movs	r3, #2
1004a69e:	e032      	b.n	1004a706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
1004a6a0:	687b      	ldr	r3, [r7, #4]
1004a6a2:	2240      	movs	r2, #64	@ 0x40
1004a6a4:	2101      	movs	r1, #1
1004a6a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
1004a6a8:	687b      	ldr	r3, [r7, #4]
1004a6aa:	2241      	movs	r2, #65	@ 0x41
1004a6ac:	2124      	movs	r1, #36	@ 0x24
1004a6ae:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1004a6b0:	687b      	ldr	r3, [r7, #4]
1004a6b2:	681b      	ldr	r3, [r3, #0]
1004a6b4:	681a      	ldr	r2, [r3, #0]
1004a6b6:	687b      	ldr	r3, [r7, #4]
1004a6b8:	681b      	ldr	r3, [r3, #0]
1004a6ba:	2101      	movs	r1, #1
1004a6bc:	438a      	bics	r2, r1
1004a6be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
1004a6c0:	687b      	ldr	r3, [r7, #4]
1004a6c2:	681b      	ldr	r3, [r3, #0]
1004a6c4:	681a      	ldr	r2, [r3, #0]
1004a6c6:	687b      	ldr	r3, [r7, #4]
1004a6c8:	681b      	ldr	r3, [r3, #0]
1004a6ca:	4911      	ldr	r1, [pc, #68]	@ (1004a710 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
1004a6cc:	400a      	ands	r2, r1
1004a6ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
1004a6d0:	687b      	ldr	r3, [r7, #4]
1004a6d2:	681b      	ldr	r3, [r3, #0]
1004a6d4:	6819      	ldr	r1, [r3, #0]
1004a6d6:	687b      	ldr	r3, [r7, #4]
1004a6d8:	681b      	ldr	r3, [r3, #0]
1004a6da:	683a      	ldr	r2, [r7, #0]
1004a6dc:	430a      	orrs	r2, r1
1004a6de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
1004a6e0:	687b      	ldr	r3, [r7, #4]
1004a6e2:	681b      	ldr	r3, [r3, #0]
1004a6e4:	681a      	ldr	r2, [r3, #0]
1004a6e6:	687b      	ldr	r3, [r7, #4]
1004a6e8:	681b      	ldr	r3, [r3, #0]
1004a6ea:	2101      	movs	r1, #1
1004a6ec:	430a      	orrs	r2, r1
1004a6ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
1004a6f0:	687b      	ldr	r3, [r7, #4]
1004a6f2:	2241      	movs	r2, #65	@ 0x41
1004a6f4:	2120      	movs	r1, #32
1004a6f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004a6f8:	687b      	ldr	r3, [r7, #4]
1004a6fa:	2240      	movs	r2, #64	@ 0x40
1004a6fc:	2100      	movs	r1, #0
1004a6fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004a700:	2300      	movs	r3, #0
1004a702:	e000      	b.n	1004a706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
1004a704:	2302      	movs	r3, #2
  }
}
1004a706:	0018      	movs	r0, r3
1004a708:	46bd      	mov	sp, r7
1004a70a:	b002      	add	sp, #8
1004a70c:	bd80      	pop	{r7, pc}
1004a70e:	46c0      	nop			@ (mov r8, r8)
1004a710:	ffffefff 	.word	0xffffefff

1004a714 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
1004a714:	b580      	push	{r7, lr}
1004a716:	b084      	sub	sp, #16
1004a718:	af00      	add	r7, sp, #0
1004a71a:	6078      	str	r0, [r7, #4]
1004a71c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
1004a71e:	687b      	ldr	r3, [r7, #4]
1004a720:	2241      	movs	r2, #65	@ 0x41
1004a722:	5c9b      	ldrb	r3, [r3, r2]
1004a724:	b2db      	uxtb	r3, r3
1004a726:	2b20      	cmp	r3, #32
1004a728:	d139      	bne.n	1004a79e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
1004a72a:	687b      	ldr	r3, [r7, #4]
1004a72c:	2240      	movs	r2, #64	@ 0x40
1004a72e:	5c9b      	ldrb	r3, [r3, r2]
1004a730:	2b01      	cmp	r3, #1
1004a732:	d101      	bne.n	1004a738 <HAL_I2CEx_ConfigDigitalFilter+0x24>
1004a734:	2302      	movs	r3, #2
1004a736:	e033      	b.n	1004a7a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
1004a738:	687b      	ldr	r3, [r7, #4]
1004a73a:	2240      	movs	r2, #64	@ 0x40
1004a73c:	2101      	movs	r1, #1
1004a73e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
1004a740:	687b      	ldr	r3, [r7, #4]
1004a742:	2241      	movs	r2, #65	@ 0x41
1004a744:	2124      	movs	r1, #36	@ 0x24
1004a746:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
1004a748:	687b      	ldr	r3, [r7, #4]
1004a74a:	681b      	ldr	r3, [r3, #0]
1004a74c:	681a      	ldr	r2, [r3, #0]
1004a74e:	687b      	ldr	r3, [r7, #4]
1004a750:	681b      	ldr	r3, [r3, #0]
1004a752:	2101      	movs	r1, #1
1004a754:	438a      	bics	r2, r1
1004a756:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
1004a758:	687b      	ldr	r3, [r7, #4]
1004a75a:	681b      	ldr	r3, [r3, #0]
1004a75c:	681b      	ldr	r3, [r3, #0]
1004a75e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
1004a760:	68fb      	ldr	r3, [r7, #12]
1004a762:	4a11      	ldr	r2, [pc, #68]	@ (1004a7a8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
1004a764:	4013      	ands	r3, r2
1004a766:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
1004a768:	683b      	ldr	r3, [r7, #0]
1004a76a:	021b      	lsls	r3, r3, #8
1004a76c:	68fa      	ldr	r2, [r7, #12]
1004a76e:	4313      	orrs	r3, r2
1004a770:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
1004a772:	687b      	ldr	r3, [r7, #4]
1004a774:	681b      	ldr	r3, [r3, #0]
1004a776:	68fa      	ldr	r2, [r7, #12]
1004a778:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
1004a77a:	687b      	ldr	r3, [r7, #4]
1004a77c:	681b      	ldr	r3, [r3, #0]
1004a77e:	681a      	ldr	r2, [r3, #0]
1004a780:	687b      	ldr	r3, [r7, #4]
1004a782:	681b      	ldr	r3, [r3, #0]
1004a784:	2101      	movs	r1, #1
1004a786:	430a      	orrs	r2, r1
1004a788:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
1004a78a:	687b      	ldr	r3, [r7, #4]
1004a78c:	2241      	movs	r2, #65	@ 0x41
1004a78e:	2120      	movs	r1, #32
1004a790:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
1004a792:	687b      	ldr	r3, [r7, #4]
1004a794:	2240      	movs	r2, #64	@ 0x40
1004a796:	2100      	movs	r1, #0
1004a798:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
1004a79a:	2300      	movs	r3, #0
1004a79c:	e000      	b.n	1004a7a0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
1004a79e:	2302      	movs	r3, #2
  }
}
1004a7a0:	0018      	movs	r0, r3
1004a7a2:	46bd      	mov	sp, r7
1004a7a4:	b004      	add	sp, #16
1004a7a6:	bd80      	pop	{r7, pc}
1004a7a8:	fffff0ff 	.word	0xfffff0ff

1004a7ac <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
1004a7ac:	b580      	push	{r7, lr}
1004a7ae:	b084      	sub	sp, #16
1004a7b0:	af00      	add	r7, sp, #0
1004a7b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
1004a7b4:	230f      	movs	r3, #15
1004a7b6:	18fb      	adds	r3, r7, r3
1004a7b8:	2200      	movs	r2, #0
1004a7ba:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
1004a7bc:	687b      	ldr	r3, [r7, #4]
1004a7be:	2b00      	cmp	r3, #0
1004a7c0:	d045      	beq.n	1004a84e <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
1004a7c2:	687b      	ldr	r3, [r7, #4]
1004a7c4:	791b      	ldrb	r3, [r3, #4]
1004a7c6:	b2db      	uxtb	r3, r3
1004a7c8:	2b00      	cmp	r3, #0
1004a7ca:	d103      	bne.n	1004a7d4 <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
1004a7cc:	687b      	ldr	r3, [r7, #4]
1004a7ce:	0018      	movs	r0, r3
1004a7d0:	f7fc fe0c 	bl	100473ec <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
1004a7d4:	f7fd fab2 	bl	10047d3c <HAL_GetTick>
1004a7d8:	0003      	movs	r3, r0
1004a7da:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
1004a7dc:	687b      	ldr	r3, [r7, #4]
1004a7de:	2202      	movs	r2, #2
1004a7e0:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004a7e2:	e011      	b.n	1004a808 <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
1004a7e4:	687b      	ldr	r3, [r7, #4]
1004a7e6:	681b      	ldr	r3, [r3, #0]
1004a7e8:	2201      	movs	r2, #1
1004a7ea:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
1004a7ec:	f7fd faa6 	bl	10047d3c <HAL_GetTick>
1004a7f0:	0002      	movs	r2, r0
1004a7f2:	68bb      	ldr	r3, [r7, #8]
1004a7f4:	1ad2      	subs	r2, r2, r3
1004a7f6:	23fa      	movs	r3, #250	@ 0xfa
1004a7f8:	009b      	lsls	r3, r3, #2
1004a7fa:	429a      	cmp	r2, r3
1004a7fc:	d904      	bls.n	1004a808 <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
1004a7fe:	230f      	movs	r3, #15
1004a800:	18fb      	adds	r3, r7, r3
1004a802:	2203      	movs	r2, #3
1004a804:	701a      	strb	r2, [r3, #0]
        break;
1004a806:	e006      	b.n	1004a816 <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
1004a808:	687b      	ldr	r3, [r7, #4]
1004a80a:	681b      	ldr	r3, [r3, #0]
1004a80c:	681b      	ldr	r3, [r3, #0]
1004a80e:	2201      	movs	r2, #1
1004a810:	4013      	ands	r3, r2
1004a812:	2b01      	cmp	r3, #1
1004a814:	d1e6      	bne.n	1004a7e4 <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
1004a816:	230f      	movs	r3, #15
1004a818:	18fb      	adds	r3, r7, r3
1004a81a:	781b      	ldrb	r3, [r3, #0]
1004a81c:	2b00      	cmp	r3, #0
1004a81e:	d10f      	bne.n	1004a840 <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
1004a820:	687b      	ldr	r3, [r7, #4]
1004a822:	681b      	ldr	r3, [r3, #0]
1004a824:	689a      	ldr	r2, [r3, #8]
1004a826:	687b      	ldr	r3, [r7, #4]
1004a828:	681b      	ldr	r3, [r3, #0]
1004a82a:	21d0      	movs	r1, #208	@ 0xd0
1004a82c:	0349      	lsls	r1, r1, #13
1004a82e:	430a      	orrs	r2, r1
1004a830:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
1004a832:	687b      	ldr	r3, [r7, #4]
1004a834:	2200      	movs	r2, #0
1004a836:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
1004a838:	687b      	ldr	r3, [r7, #4]
1004a83a:	2201      	movs	r2, #1
1004a83c:	711a      	strb	r2, [r3, #4]
1004a83e:	e00a      	b.n	1004a856 <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
1004a840:	687b      	ldr	r3, [r7, #4]
1004a842:	2204      	movs	r2, #4
1004a844:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
1004a846:	687b      	ldr	r3, [r7, #4]
1004a848:	2203      	movs	r2, #3
1004a84a:	711a      	strb	r2, [r3, #4]
1004a84c:	e003      	b.n	1004a856 <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
1004a84e:	230f      	movs	r3, #15
1004a850:	18fb      	adds	r3, r7, r3
1004a852:	2201      	movs	r2, #1
1004a854:	701a      	strb	r2, [r3, #0]
  }

  return err;
1004a856:	230f      	movs	r3, #15
1004a858:	18fb      	adds	r3, r7, r3
1004a85a:	781b      	ldrb	r3, [r3, #0]
}
1004a85c:	0018      	movs	r0, r3
1004a85e:	46bd      	mov	sp, r7
1004a860:	b004      	add	sp, #16
1004a862:	bd80      	pop	{r7, pc}

1004a864 <HAL_PWREx_DisableGPIOPullUp>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
1004a864:	b580      	push	{r7, lr}
1004a866:	b084      	sub	sp, #16
1004a868:	af00      	add	r7, sp, #0
1004a86a:	6078      	str	r0, [r7, #4]
1004a86c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004a86e:	230f      	movs	r3, #15
1004a870:	18fb      	adds	r3, r7, r3
1004a872:	2200      	movs	r2, #0
1004a874:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004a876:	687b      	ldr	r3, [r7, #4]
1004a878:	2b00      	cmp	r3, #0
1004a87a:	d003      	beq.n	1004a884 <HAL_PWREx_DisableGPIOPullUp+0x20>
1004a87c:	687b      	ldr	r3, [r7, #4]
1004a87e:	2b01      	cmp	r3, #1
1004a880:	d008      	beq.n	1004a894 <HAL_PWREx_DisableGPIOPullUp+0x30>
1004a882:	e00f      	b.n	1004a8a4 <HAL_PWREx_DisableGPIOPullUp+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
1004a884:	4b0d      	ldr	r3, [pc, #52]	@ (1004a8bc <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004a886:	6a1a      	ldr	r2, [r3, #32]
1004a888:	683b      	ldr	r3, [r7, #0]
1004a88a:	43d9      	mvns	r1, r3
1004a88c:	4b0b      	ldr	r3, [pc, #44]	@ (1004a8bc <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004a88e:	400a      	ands	r2, r1
1004a890:	621a      	str	r2, [r3, #32]
      break;
1004a892:	e00c      	b.n	1004a8ae <HAL_PWREx_DisableGPIOPullUp+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004a894:	4b09      	ldr	r3, [pc, #36]	@ (1004a8bc <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004a896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004a898:	683b      	ldr	r3, [r7, #0]
1004a89a:	43d9      	mvns	r1, r3
1004a89c:	4b07      	ldr	r3, [pc, #28]	@ (1004a8bc <HAL_PWREx_DisableGPIOPullUp+0x58>)
1004a89e:	400a      	ands	r2, r1
1004a8a0:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
1004a8a2:	e004      	b.n	1004a8ae <HAL_PWREx_DisableGPIOPullUp+0x4a>
    default:
      status = HAL_ERROR;
1004a8a4:	230f      	movs	r3, #15
1004a8a6:	18fb      	adds	r3, r7, r3
1004a8a8:	2201      	movs	r2, #1
1004a8aa:	701a      	strb	r2, [r3, #0]
      break;
1004a8ac:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004a8ae:	230f      	movs	r3, #15
1004a8b0:	18fb      	adds	r3, r7, r3
1004a8b2:	781b      	ldrb	r3, [r3, #0]
}
1004a8b4:	0018      	movs	r0, r3
1004a8b6:	46bd      	mov	sp, r7
1004a8b8:	b004      	add	sp, #16
1004a8ba:	bd80      	pop	{r7, pc}
1004a8bc:	48500000 	.word	0x48500000

1004a8c0 <HAL_PWREx_DisableGPIOPullDown>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
1004a8c0:	b580      	push	{r7, lr}
1004a8c2:	b084      	sub	sp, #16
1004a8c4:	af00      	add	r7, sp, #0
1004a8c6:	6078      	str	r0, [r7, #4]
1004a8c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004a8ca:	230f      	movs	r3, #15
1004a8cc:	18fb      	adds	r3, r7, r3
1004a8ce:	2200      	movs	r2, #0
1004a8d0:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
1004a8d2:	687b      	ldr	r3, [r7, #4]
1004a8d4:	2b00      	cmp	r3, #0
1004a8d6:	d003      	beq.n	1004a8e0 <HAL_PWREx_DisableGPIOPullDown+0x20>
1004a8d8:	687b      	ldr	r3, [r7, #4]
1004a8da:	2b01      	cmp	r3, #1
1004a8dc:	d008      	beq.n	1004a8f0 <HAL_PWREx_DisableGPIOPullDown+0x30>
1004a8de:	e00f      	b.n	1004a900 <HAL_PWREx_DisableGPIOPullDown+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
1004a8e0:	4b0d      	ldr	r3, [pc, #52]	@ (1004a918 <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004a8e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004a8e4:	683b      	ldr	r3, [r7, #0]
1004a8e6:	43d9      	mvns	r1, r3
1004a8e8:	4b0b      	ldr	r3, [pc, #44]	@ (1004a918 <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004a8ea:	400a      	ands	r2, r1
1004a8ec:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
1004a8ee:	e00c      	b.n	1004a90a <HAL_PWREx_DisableGPIOPullDown+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004a8f0:	4b09      	ldr	r3, [pc, #36]	@ (1004a918 <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004a8f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004a8f4:	683b      	ldr	r3, [r7, #0]
1004a8f6:	43d9      	mvns	r1, r3
1004a8f8:	4b07      	ldr	r3, [pc, #28]	@ (1004a918 <HAL_PWREx_DisableGPIOPullDown+0x58>)
1004a8fa:	400a      	ands	r2, r1
1004a8fc:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
1004a8fe:	e004      	b.n	1004a90a <HAL_PWREx_DisableGPIOPullDown+0x4a>
    default:
      status = HAL_ERROR;
1004a900:	230f      	movs	r3, #15
1004a902:	18fb      	adds	r3, r7, r3
1004a904:	2201      	movs	r2, #1
1004a906:	701a      	strb	r2, [r3, #0]
      break;
1004a908:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
1004a90a:	230f      	movs	r3, #15
1004a90c:	18fb      	adds	r3, r7, r3
1004a90e:	781b      	ldrb	r3, [r3, #0]
}
1004a910:	0018      	movs	r0, r3
1004a912:	46bd      	mov	sp, r7
1004a914:	b004      	add	sp, #16
1004a916:	bd80      	pop	{r7, pc}
1004a918:	48500000 	.word	0x48500000

1004a91c <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
1004a91c:	b580      	push	{r7, lr}
1004a91e:	b082      	sub	sp, #8
1004a920:	af00      	add	r7, sp, #0
1004a922:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
1004a924:	4b04      	ldr	r3, [pc, #16]	@ (1004a938 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004a926:	681b      	ldr	r3, [r3, #0]
1004a928:	4b03      	ldr	r3, [pc, #12]	@ (1004a938 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
1004a92a:	687a      	ldr	r2, [r7, #4]
1004a92c:	601a      	str	r2, [r3, #0]
}
1004a92e:	46c0      	nop			@ (mov r8, r8)
1004a930:	46bd      	mov	sp, r7
1004a932:	b002      	add	sp, #8
1004a934:	bd80      	pop	{r7, pc}
1004a936:	46c0      	nop			@ (mov r8, r8)
1004a938:	200000c0 	.word	0x200000c0

1004a93c <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
1004a93c:	b580      	push	{r7, lr}
1004a93e:	b082      	sub	sp, #8
1004a940:	af00      	add	r7, sp, #0
1004a942:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
1004a944:	4b07      	ldr	r3, [pc, #28]	@ (1004a964 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004a946:	685b      	ldr	r3, [r3, #4]
1004a948:	4a07      	ldr	r2, [pc, #28]	@ (1004a968 <LL_RADIO_SetWakeupInitDelay+0x2c>)
1004a94a:	4013      	ands	r3, r2
1004a94c:	0019      	movs	r1, r3
1004a94e:	687b      	ldr	r3, [r7, #4]
1004a950:	021b      	lsls	r3, r3, #8
1004a952:	041b      	lsls	r3, r3, #16
1004a954:	0c1a      	lsrs	r2, r3, #16
1004a956:	4b03      	ldr	r3, [pc, #12]	@ (1004a964 <LL_RADIO_SetWakeupInitDelay+0x28>)
1004a958:	430a      	orrs	r2, r1
1004a95a:	605a      	str	r2, [r3, #4]
}
1004a95c:	46c0      	nop			@ (mov r8, r8)
1004a95e:	46bd      	mov	sp, r7
1004a960:	b002      	add	sp, #8
1004a962:	bd80      	pop	{r7, pc}
1004a964:	200000c0 	.word	0x200000c0
1004a968:	ffff00ff 	.word	0xffff00ff

1004a96c <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
1004a96c:	b580      	push	{r7, lr}
1004a96e:	b082      	sub	sp, #8
1004a970:	af00      	add	r7, sp, #0
1004a972:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
1004a974:	4b08      	ldr	r3, [pc, #32]	@ (1004a998 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004a976:	685b      	ldr	r3, [r3, #4]
1004a978:	4a08      	ldr	r2, [pc, #32]	@ (1004a99c <LL_RADIO_SetTimer12InitDelayCal+0x30>)
1004a97a:	4013      	ands	r3, r2
1004a97c:	0019      	movs	r1, r3
1004a97e:	687b      	ldr	r3, [r7, #4]
1004a980:	041a      	lsls	r2, r3, #16
1004a982:	23ff      	movs	r3, #255	@ 0xff
1004a984:	041b      	lsls	r3, r3, #16
1004a986:	401a      	ands	r2, r3
1004a988:	4b03      	ldr	r3, [pc, #12]	@ (1004a998 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
1004a98a:	430a      	orrs	r2, r1
1004a98c:	605a      	str	r2, [r3, #4]
}
1004a98e:	46c0      	nop			@ (mov r8, r8)
1004a990:	46bd      	mov	sp, r7
1004a992:	b002      	add	sp, #8
1004a994:	bd80      	pop	{r7, pc}
1004a996:	46c0      	nop			@ (mov r8, r8)
1004a998:	200000c0 	.word	0x200000c0
1004a99c:	ff00ffff 	.word	0xff00ffff

1004a9a0 <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
1004a9a0:	b580      	push	{r7, lr}
1004a9a2:	b082      	sub	sp, #8
1004a9a4:	af00      	add	r7, sp, #0
1004a9a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
1004a9a8:	4b06      	ldr	r3, [pc, #24]	@ (1004a9c4 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004a9aa:	685b      	ldr	r3, [r3, #4]
1004a9ac:	021b      	lsls	r3, r3, #8
1004a9ae:	0a19      	lsrs	r1, r3, #8
1004a9b0:	687b      	ldr	r3, [r7, #4]
1004a9b2:	061a      	lsls	r2, r3, #24
1004a9b4:	4b03      	ldr	r3, [pc, #12]	@ (1004a9c4 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
1004a9b6:	430a      	orrs	r2, r1
1004a9b8:	605a      	str	r2, [r3, #4]
}
1004a9ba:	46c0      	nop			@ (mov r8, r8)
1004a9bc:	46bd      	mov	sp, r7
1004a9be:	b002      	add	sp, #8
1004a9c0:	bd80      	pop	{r7, pc}
1004a9c2:	46c0      	nop			@ (mov r8, r8)
1004a9c4:	200000c0 	.word	0x200000c0

1004a9c8 <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
1004a9c8:	b580      	push	{r7, lr}
1004a9ca:	b082      	sub	sp, #8
1004a9cc:	af00      	add	r7, sp, #0
1004a9ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
1004a9d0:	4b07      	ldr	r3, [pc, #28]	@ (1004a9f0 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004a9d2:	689b      	ldr	r3, [r3, #8]
1004a9d4:	22ff      	movs	r2, #255	@ 0xff
1004a9d6:	4393      	bics	r3, r2
1004a9d8:	0019      	movs	r1, r3
1004a9da:	687b      	ldr	r3, [r7, #4]
1004a9dc:	22ff      	movs	r2, #255	@ 0xff
1004a9de:	401a      	ands	r2, r3
1004a9e0:	4b03      	ldr	r3, [pc, #12]	@ (1004a9f0 <LL_RADIO_SetTransmitCalDelayChk+0x28>)
1004a9e2:	430a      	orrs	r2, r1
1004a9e4:	609a      	str	r2, [r3, #8]
}
1004a9e6:	46c0      	nop			@ (mov r8, r8)
1004a9e8:	46bd      	mov	sp, r7
1004a9ea:	b002      	add	sp, #8
1004a9ec:	bd80      	pop	{r7, pc}
1004a9ee:	46c0      	nop			@ (mov r8, r8)
1004a9f0:	200000c0 	.word	0x200000c0

1004a9f4 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
1004a9f4:	b580      	push	{r7, lr}
1004a9f6:	b082      	sub	sp, #8
1004a9f8:	af00      	add	r7, sp, #0
1004a9fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
1004a9fc:	4b07      	ldr	r3, [pc, #28]	@ (1004aa1c <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004a9fe:	689b      	ldr	r3, [r3, #8]
1004aa00:	4a07      	ldr	r2, [pc, #28]	@ (1004aa20 <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
1004aa02:	4013      	ands	r3, r2
1004aa04:	0019      	movs	r1, r3
1004aa06:	687b      	ldr	r3, [r7, #4]
1004aa08:	021b      	lsls	r3, r3, #8
1004aa0a:	041b      	lsls	r3, r3, #16
1004aa0c:	0c1a      	lsrs	r2, r3, #16
1004aa0e:	4b03      	ldr	r3, [pc, #12]	@ (1004aa1c <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
1004aa10:	430a      	orrs	r2, r1
1004aa12:	609a      	str	r2, [r3, #8]
}
1004aa14:	46c0      	nop			@ (mov r8, r8)
1004aa16:	46bd      	mov	sp, r7
1004aa18:	b002      	add	sp, #8
1004aa1a:	bd80      	pop	{r7, pc}
1004aa1c:	200000c0 	.word	0x200000c0
1004aa20:	ffff00ff 	.word	0xffff00ff

1004aa24 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
1004aa24:	b580      	push	{r7, lr}
1004aa26:	b082      	sub	sp, #8
1004aa28:	af00      	add	r7, sp, #0
1004aa2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
1004aa2c:	4b08      	ldr	r3, [pc, #32]	@ (1004aa50 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004aa2e:	689b      	ldr	r3, [r3, #8]
1004aa30:	4a08      	ldr	r2, [pc, #32]	@ (1004aa54 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
1004aa32:	4013      	ands	r3, r2
1004aa34:	0019      	movs	r1, r3
1004aa36:	687b      	ldr	r3, [r7, #4]
1004aa38:	041a      	lsls	r2, r3, #16
1004aa3a:	23ff      	movs	r3, #255	@ 0xff
1004aa3c:	041b      	lsls	r3, r3, #16
1004aa3e:	401a      	ands	r2, r3
1004aa40:	4b03      	ldr	r3, [pc, #12]	@ (1004aa50 <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
1004aa42:	430a      	orrs	r2, r1
1004aa44:	609a      	str	r2, [r3, #8]
}
1004aa46:	46c0      	nop			@ (mov r8, r8)
1004aa48:	46bd      	mov	sp, r7
1004aa4a:	b002      	add	sp, #8
1004aa4c:	bd80      	pop	{r7, pc}
1004aa4e:	46c0      	nop			@ (mov r8, r8)
1004aa50:	200000c0 	.word	0x200000c0
1004aa54:	ff00ffff 	.word	0xff00ffff

1004aa58 <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
1004aa58:	b580      	push	{r7, lr}
1004aa5a:	b082      	sub	sp, #8
1004aa5c:	af00      	add	r7, sp, #0
1004aa5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
1004aa60:	4b06      	ldr	r3, [pc, #24]	@ (1004aa7c <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004aa62:	689b      	ldr	r3, [r3, #8]
1004aa64:	021b      	lsls	r3, r3, #8
1004aa66:	0a19      	lsrs	r1, r3, #8
1004aa68:	687b      	ldr	r3, [r7, #4]
1004aa6a:	061a      	lsls	r2, r3, #24
1004aa6c:	4b03      	ldr	r3, [pc, #12]	@ (1004aa7c <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
1004aa6e:	430a      	orrs	r2, r1
1004aa70:	609a      	str	r2, [r3, #8]
}
1004aa72:	46c0      	nop			@ (mov r8, r8)
1004aa74:	46bd      	mov	sp, r7
1004aa76:	b002      	add	sp, #8
1004aa78:	bd80      	pop	{r7, pc}
1004aa7a:	46c0      	nop			@ (mov r8, r8)
1004aa7c:	200000c0 	.word	0x200000c0

1004aa80 <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
1004aa80:	b580      	push	{r7, lr}
1004aa82:	b082      	sub	sp, #8
1004aa84:	af00      	add	r7, sp, #0
1004aa86:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
1004aa88:	4b07      	ldr	r3, [pc, #28]	@ (1004aaa8 <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004aa8a:	68db      	ldr	r3, [r3, #12]
1004aa8c:	22ff      	movs	r2, #255	@ 0xff
1004aa8e:	4393      	bics	r3, r2
1004aa90:	0019      	movs	r1, r3
1004aa92:	687b      	ldr	r3, [r7, #4]
1004aa94:	22ff      	movs	r2, #255	@ 0xff
1004aa96:	401a      	ands	r2, r3
1004aa98:	4b03      	ldr	r3, [pc, #12]	@ (1004aaa8 <LL_RADIO_SetConfigurationEndDuration+0x28>)
1004aa9a:	430a      	orrs	r2, r1
1004aa9c:	60da      	str	r2, [r3, #12]
}
1004aa9e:	46c0      	nop			@ (mov r8, r8)
1004aaa0:	46bd      	mov	sp, r7
1004aaa2:	b002      	add	sp, #8
1004aaa4:	bd80      	pop	{r7, pc}
1004aaa6:	46c0      	nop			@ (mov r8, r8)
1004aaa8:	200000c0 	.word	0x200000c0

1004aaac <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
1004aaac:	b580      	push	{r7, lr}
1004aaae:	b082      	sub	sp, #8
1004aab0:	af00      	add	r7, sp, #0
1004aab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
1004aab4:	4b07      	ldr	r3, [pc, #28]	@ (1004aad4 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004aab6:	68db      	ldr	r3, [r3, #12]
1004aab8:	4a07      	ldr	r2, [pc, #28]	@ (1004aad8 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
1004aaba:	4013      	ands	r3, r2
1004aabc:	0019      	movs	r1, r3
1004aabe:	687b      	ldr	r3, [r7, #4]
1004aac0:	021b      	lsls	r3, r3, #8
1004aac2:	041b      	lsls	r3, r3, #16
1004aac4:	0c1a      	lsrs	r2, r3, #16
1004aac6:	4b03      	ldr	r3, [pc, #12]	@ (1004aad4 <LL_RADIO_SetTxDataReadyCheck+0x28>)
1004aac8:	430a      	orrs	r2, r1
1004aaca:	60da      	str	r2, [r3, #12]
}
1004aacc:	46c0      	nop			@ (mov r8, r8)
1004aace:	46bd      	mov	sp, r7
1004aad0:	b002      	add	sp, #8
1004aad2:	bd80      	pop	{r7, pc}
1004aad4:	200000c0 	.word	0x200000c0
1004aad8:	ffff00ff 	.word	0xffff00ff

1004aadc <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
1004aadc:	b580      	push	{r7, lr}
1004aade:	b082      	sub	sp, #8
1004aae0:	af00      	add	r7, sp, #0
1004aae2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
1004aae4:	4b08      	ldr	r3, [pc, #32]	@ (1004ab08 <LL_RADIO_SetTxDelayStart+0x2c>)
1004aae6:	68db      	ldr	r3, [r3, #12]
1004aae8:	4a08      	ldr	r2, [pc, #32]	@ (1004ab0c <LL_RADIO_SetTxDelayStart+0x30>)
1004aaea:	4013      	ands	r3, r2
1004aaec:	0019      	movs	r1, r3
1004aaee:	687b      	ldr	r3, [r7, #4]
1004aaf0:	041a      	lsls	r2, r3, #16
1004aaf2:	23ff      	movs	r3, #255	@ 0xff
1004aaf4:	041b      	lsls	r3, r3, #16
1004aaf6:	401a      	ands	r2, r3
1004aaf8:	4b03      	ldr	r3, [pc, #12]	@ (1004ab08 <LL_RADIO_SetTxDelayStart+0x2c>)
1004aafa:	430a      	orrs	r2, r1
1004aafc:	60da      	str	r2, [r3, #12]
}
1004aafe:	46c0      	nop			@ (mov r8, r8)
1004ab00:	46bd      	mov	sp, r7
1004ab02:	b002      	add	sp, #8
1004ab04:	bd80      	pop	{r7, pc}
1004ab06:	46c0      	nop			@ (mov r8, r8)
1004ab08:	200000c0 	.word	0x200000c0
1004ab0c:	ff00ffff 	.word	0xff00ffff

1004ab10 <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
1004ab10:	b580      	push	{r7, lr}
1004ab12:	b082      	sub	sp, #8
1004ab14:	af00      	add	r7, sp, #0
1004ab16:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
1004ab18:	4b08      	ldr	r3, [pc, #32]	@ (1004ab3c <LL_RADIO_SetTxDelayEnd+0x2c>)
1004ab1a:	68db      	ldr	r3, [r3, #12]
1004ab1c:	4a08      	ldr	r2, [pc, #32]	@ (1004ab40 <LL_RADIO_SetTxDelayEnd+0x30>)
1004ab1e:	4013      	ands	r3, r2
1004ab20:	0019      	movs	r1, r3
1004ab22:	687b      	ldr	r3, [r7, #4]
1004ab24:	061a      	lsls	r2, r3, #24
1004ab26:	23fc      	movs	r3, #252	@ 0xfc
1004ab28:	059b      	lsls	r3, r3, #22
1004ab2a:	401a      	ands	r2, r3
1004ab2c:	4b03      	ldr	r3, [pc, #12]	@ (1004ab3c <LL_RADIO_SetTxDelayEnd+0x2c>)
1004ab2e:	430a      	orrs	r2, r1
1004ab30:	60da      	str	r2, [r3, #12]
}
1004ab32:	46c0      	nop			@ (mov r8, r8)
1004ab34:	46bd      	mov	sp, r7
1004ab36:	b002      	add	sp, #8
1004ab38:	bd80      	pop	{r7, pc}
1004ab3a:	46c0      	nop			@ (mov r8, r8)
1004ab3c:	200000c0 	.word	0x200000c0
1004ab40:	c0ffffff 	.word	0xc0ffffff

1004ab44 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
1004ab44:	b580      	push	{r7, lr}
1004ab46:	b082      	sub	sp, #8
1004ab48:	af00      	add	r7, sp, #0
1004ab4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
1004ab4c:	4b07      	ldr	r3, [pc, #28]	@ (1004ab6c <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004ab4e:	691b      	ldr	r3, [r3, #16]
1004ab50:	22ff      	movs	r2, #255	@ 0xff
1004ab52:	4393      	bics	r3, r2
1004ab54:	0019      	movs	r1, r3
1004ab56:	687b      	ldr	r3, [r7, #4]
1004ab58:	22ff      	movs	r2, #255	@ 0xff
1004ab5a:	401a      	ands	r2, r3
1004ab5c:	4b03      	ldr	r3, [pc, #12]	@ (1004ab6c <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
1004ab5e:	430a      	orrs	r2, r1
1004ab60:	611a      	str	r2, [r3, #16]
}
1004ab62:	46c0      	nop			@ (mov r8, r8)
1004ab64:	46bd      	mov	sp, r7
1004ab66:	b002      	add	sp, #8
1004ab68:	bd80      	pop	{r7, pc}
1004ab6a:	46c0      	nop			@ (mov r8, r8)
1004ab6c:	200000c0 	.word	0x200000c0

1004ab70 <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
1004ab70:	b580      	push	{r7, lr}
1004ab72:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
1004ab74:	4b04      	ldr	r3, [pc, #16]	@ (1004ab88 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004ab76:	695a      	ldr	r2, [r3, #20]
1004ab78:	4b03      	ldr	r3, [pc, #12]	@ (1004ab88 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
1004ab7a:	2104      	movs	r1, #4
1004ab7c:	430a      	orrs	r2, r1
1004ab7e:	615a      	str	r2, [r3, #20]
}
1004ab80:	46c0      	nop			@ (mov r8, r8)
1004ab82:	46bd      	mov	sp, r7
1004ab84:	bd80      	pop	{r7, pc}
1004ab86:	46c0      	nop			@ (mov r8, r8)
1004ab88:	200000c0 	.word	0x200000c0

1004ab8c <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
1004ab8c:	b580      	push	{r7, lr}
1004ab8e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
1004ab90:	4b04      	ldr	r3, [pc, #16]	@ (1004aba4 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004ab92:	695a      	ldr	r2, [r3, #20]
1004ab94:	4b03      	ldr	r3, [pc, #12]	@ (1004aba4 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
1004ab96:	2180      	movs	r1, #128	@ 0x80
1004ab98:	0409      	lsls	r1, r1, #16
1004ab9a:	430a      	orrs	r2, r1
1004ab9c:	615a      	str	r2, [r3, #20]
}
1004ab9e:	46c0      	nop			@ (mov r8, r8)
1004aba0:	46bd      	mov	sp, r7
1004aba2:	bd80      	pop	{r7, pc}
1004aba4:	200000c0 	.word	0x200000c0

1004aba8 <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
1004aba8:	b580      	push	{r7, lr}
1004abaa:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
1004abac:	4b04      	ldr	r3, [pc, #16]	@ (1004abc0 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004abae:	695a      	ldr	r2, [r3, #20]
1004abb0:	4b03      	ldr	r3, [pc, #12]	@ (1004abc0 <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
1004abb2:	2180      	movs	r1, #128	@ 0x80
1004abb4:	0589      	lsls	r1, r1, #22
1004abb6:	430a      	orrs	r2, r1
1004abb8:	615a      	str	r2, [r3, #20]
}
1004abba:	46c0      	nop			@ (mov r8, r8)
1004abbc:	46bd      	mov	sp, r7
1004abbe:	bd80      	pop	{r7, pc}
1004abc0:	200000c0 	.word	0x200000c0

1004abc4 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
1004abc4:	b580      	push	{r7, lr}
1004abc6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
1004abc8:	4b04      	ldr	r3, [pc, #16]	@ (1004abdc <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004abca:	695a      	ldr	r2, [r3, #20]
1004abcc:	4b03      	ldr	r3, [pc, #12]	@ (1004abdc <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
1004abce:	2180      	movs	r1, #128	@ 0x80
1004abd0:	05c9      	lsls	r1, r1, #23
1004abd2:	430a      	orrs	r2, r1
1004abd4:	615a      	str	r2, [r3, #20]
}
1004abd6:	46c0      	nop			@ (mov r8, r8)
1004abd8:	46bd      	mov	sp, r7
1004abda:	bd80      	pop	{r7, pc}
1004abdc:	200000c0 	.word	0x200000c0

1004abe0 <LL_RADIO_SetDefaultAntennaID>:
  * @rmtoll WORD6          DEFAULTANTENNAID       LL_RADIO_SetDefaultAntennaID
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDefaultAntennaID(uint32_t value)
{
1004abe0:	b580      	push	{r7, lr}
1004abe2:	b082      	sub	sp, #8
1004abe4:	af00      	add	r7, sp, #0
1004abe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
1004abe8:	4b07      	ldr	r3, [pc, #28]	@ (1004ac08 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004abea:	699b      	ldr	r3, [r3, #24]
1004abec:	227f      	movs	r2, #127	@ 0x7f
1004abee:	4393      	bics	r3, r2
1004abf0:	0019      	movs	r1, r3
1004abf2:	687b      	ldr	r3, [r7, #4]
1004abf4:	227f      	movs	r2, #127	@ 0x7f
1004abf6:	401a      	ands	r2, r3
1004abf8:	4b03      	ldr	r3, [pc, #12]	@ (1004ac08 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004abfa:	430a      	orrs	r2, r1
1004abfc:	619a      	str	r2, [r3, #24]
}
1004abfe:	46c0      	nop			@ (mov r8, r8)
1004ac00:	46bd      	mov	sp, r7
1004ac02:	b002      	add	sp, #8
1004ac04:	bd80      	pop	{r7, pc}
1004ac06:	46c0      	nop			@ (mov r8, r8)
1004ac08:	200000c0 	.word	0x200000c0

1004ac0c <LL_RADIO_TIMER_DisableTimer1>:
{
1004ac0c:	b580      	push	{r7, lr}
1004ac0e:	b082      	sub	sp, #8
1004ac10:	af00      	add	r7, sp, #0
1004ac12:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004ac14:	687b      	ldr	r3, [r7, #4]
1004ac16:	68db      	ldr	r3, [r3, #12]
1004ac18:	2203      	movs	r2, #3
1004ac1a:	4393      	bics	r3, r2
1004ac1c:	001a      	movs	r2, r3
1004ac1e:	687b      	ldr	r3, [r7, #4]
1004ac20:	60da      	str	r2, [r3, #12]
}
1004ac22:	46c0      	nop			@ (mov r8, r8)
1004ac24:	46bd      	mov	sp, r7
1004ac26:	b002      	add	sp, #8
1004ac28:	bd80      	pop	{r7, pc}

1004ac2a <LL_RADIO_TIMER_DisableTimer2>:
{
1004ac2a:	b580      	push	{r7, lr}
1004ac2c:	b082      	sub	sp, #8
1004ac2e:	af00      	add	r7, sp, #0
1004ac30:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004ac32:	687b      	ldr	r3, [r7, #4]
1004ac34:	68db      	ldr	r3, [r3, #12]
1004ac36:	2203      	movs	r2, #3
1004ac38:	4393      	bics	r3, r2
1004ac3a:	001a      	movs	r2, r3
1004ac3c:	687b      	ldr	r3, [r7, #4]
1004ac3e:	60da      	str	r2, [r3, #12]
}
1004ac40:	46c0      	nop			@ (mov r8, r8)
1004ac42:	46bd      	mov	sp, r7
1004ac44:	b002      	add	sp, #8
1004ac46:	bd80      	pop	{r7, pc}

1004ac48 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004ac48:	b580      	push	{r7, lr}
1004ac4a:	b082      	sub	sp, #8
1004ac4c:	af00      	add	r7, sp, #0
1004ac4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004ac50:	687b      	ldr	r3, [r7, #4]
1004ac52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ac54:	4a03      	ldr	r2, [pc, #12]	@ (1004ac64 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004ac56:	401a      	ands	r2, r3
1004ac58:	687b      	ldr	r3, [r7, #4]
1004ac5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004ac5c:	46c0      	nop			@ (mov r8, r8)
1004ac5e:	46bd      	mov	sp, r7
1004ac60:	b002      	add	sp, #8
1004ac62:	bd80      	pop	{r7, pc}
1004ac64:	bfffffff 	.word	0xbfffffff

1004ac68 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
1004ac68:	b590      	push	{r4, r7, lr}
1004ac6a:	b08d      	sub	sp, #52	@ 0x34
1004ac6c:	af00      	add	r7, sp, #0
1004ac6e:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
1004ac70:	4b14      	ldr	r3, [pc, #80]	@ (1004acc4 <HAL_RADIO_Init+0x5c>)
1004ac72:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
1004ac74:	4b14      	ldr	r3, [pc, #80]	@ (1004acc8 <HAL_RADIO_Init+0x60>)
1004ac76:	681b      	ldr	r3, [r3, #0]
1004ac78:	4a14      	ldr	r2, [pc, #80]	@ (1004accc <HAL_RADIO_Init+0x64>)
1004ac7a:	4293      	cmp	r3, r2
1004ac7c:	d12a      	bne.n	1004acd4 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
1004ac7e:	4b14      	ldr	r3, [pc, #80]	@ (1004acd0 <HAL_RADIO_Init+0x68>)
1004ac80:	681b      	ldr	r3, [r3, #0]
1004ac82:	0a1b      	lsrs	r3, r3, #8
1004ac84:	220f      	movs	r2, #15
1004ac86:	4013      	ands	r3, r2
1004ac88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
1004ac8a:	4b11      	ldr	r3, [pc, #68]	@ (1004acd0 <HAL_RADIO_Init+0x68>)
1004ac8c:	681b      	ldr	r3, [r3, #0]
1004ac8e:	0b1b      	lsrs	r3, r3, #12
1004ac90:	220f      	movs	r2, #15
1004ac92:	4013      	ands	r3, r2
1004ac94:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
1004ac96:	4b0e      	ldr	r3, [pc, #56]	@ (1004acd0 <HAL_RADIO_Init+0x68>)
1004ac98:	681b      	ldr	r3, [r3, #0]
1004ac9a:	0c1b      	lsrs	r3, r3, #16
1004ac9c:	220f      	movs	r2, #15
1004ac9e:	4013      	ands	r3, r2
1004aca0:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
1004aca2:	4b0b      	ldr	r3, [pc, #44]	@ (1004acd0 <HAL_RADIO_Init+0x68>)
1004aca4:	681b      	ldr	r3, [r3, #0]
1004aca6:	0d1b      	lsrs	r3, r3, #20
1004aca8:	2207      	movs	r2, #7
1004acaa:	4013      	ands	r3, r2
1004acac:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
1004acae:	4b08      	ldr	r3, [pc, #32]	@ (1004acd0 <HAL_RADIO_Init+0x68>)
1004acb0:	681b      	ldr	r3, [r3, #0]
1004acb2:	0e1b      	lsrs	r3, r3, #24
1004acb4:	2207      	movs	r2, #7
1004acb6:	4013      	ands	r3, r2
1004acb8:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004acba:	231b      	movs	r3, #27
1004acbc:	18fb      	adds	r3, r7, r3
1004acbe:	2201      	movs	r2, #1
1004acc0:	701a      	strb	r2, [r3, #0]
1004acc2:	e018      	b.n	1004acf6 <HAL_RADIO_Init+0x8e>
1004acc4:	200021dc 	.word	0x200021dc
1004acc8:	10001ef8 	.word	0x10001ef8
1004accc:	fcbceccc 	.word	0xfcbceccc
1004acd0:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
1004acd4:	2308      	movs	r3, #8
1004acd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
1004acd8:	2307      	movs	r3, #7
1004acda:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004acdc:	2308      	movs	r3, #8
1004acde:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
1004ace0:	211b      	movs	r1, #27
1004ace2:	187b      	adds	r3, r7, r1
1004ace4:	2200      	movs	r2, #0
1004ace6:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
1004ace8:	2303      	movs	r3, #3
1004acea:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
1004acec:	2303      	movs	r3, #3
1004acee:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004acf0:	187b      	adds	r3, r7, r1
1004acf2:	2201      	movs	r2, #1
1004acf4:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
1004acf6:	4bfc      	ldr	r3, [pc, #1008]	@ (1004b0e8 <HAL_RADIO_Init+0x480>)
1004acf8:	2200      	movs	r2, #0
1004acfa:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004acfc:	687b      	ldr	r3, [r7, #4]
1004acfe:	2b00      	cmp	r3, #0
1004ad00:	d003      	beq.n	1004ad0a <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
1004ad02:	687b      	ldr	r3, [r7, #4]
1004ad04:	0018      	movs	r0, r3
1004ad06:	f7fc fb85 	bl	10047414 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004ad0a:	23c0      	movs	r3, #192	@ 0xc0
1004ad0c:	05db      	lsls	r3, r3, #23
1004ad0e:	0018      	movs	r0, r3
1004ad10:	f7ff ff7c 	bl	1004ac0c <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004ad14:	23c0      	movs	r3, #192	@ 0xc0
1004ad16:	05db      	lsls	r3, r3, #23
1004ad18:	0018      	movs	r0, r3
1004ad1a:	f7ff ff86 	bl	1004ac2a <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004ad1e:	4bf3      	ldr	r3, [pc, #972]	@ (1004b0ec <HAL_RADIO_Init+0x484>)
1004ad20:	0018      	movs	r0, r3
1004ad22:	f7ff ff91 	bl	1004ac48 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
1004ad26:	4af2      	ldr	r2, [pc, #968]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ad28:	239e      	movs	r3, #158	@ 0x9e
1004ad2a:	009b      	lsls	r3, r3, #2
1004ad2c:	58d3      	ldr	r3, [r2, r3]
1004ad2e:	220f      	movs	r2, #15
1004ad30:	4393      	bics	r3, r2
1004ad32:	001a      	movs	r2, r3
1004ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ad36:	210f      	movs	r1, #15
1004ad38:	400b      	ands	r3, r1
1004ad3a:	49ed      	ldr	r1, [pc, #948]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ad3c:	431a      	orrs	r2, r3
1004ad3e:	239e      	movs	r3, #158	@ 0x9e
1004ad40:	009b      	lsls	r3, r3, #2
1004ad42:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
1004ad44:	4aea      	ldr	r2, [pc, #936]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ad46:	239d      	movs	r3, #157	@ 0x9d
1004ad48:	009b      	lsls	r3, r3, #2
1004ad4a:	58d3      	ldr	r3, [r2, r3]
1004ad4c:	22f0      	movs	r2, #240	@ 0xf0
1004ad4e:	4393      	bics	r3, r2
1004ad50:	001a      	movs	r2, r3
1004ad52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004ad54:	011b      	lsls	r3, r3, #4
1004ad56:	21ff      	movs	r1, #255	@ 0xff
1004ad58:	400b      	ands	r3, r1
1004ad5a:	49e5      	ldr	r1, [pc, #916]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ad5c:	431a      	orrs	r2, r3
1004ad5e:	239d      	movs	r3, #157	@ 0x9d
1004ad60:	009b      	lsls	r3, r3, #2
1004ad62:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004ad64:	4ae2      	ldr	r2, [pc, #904]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ad66:	239d      	movs	r3, #157	@ 0x9d
1004ad68:	009b      	lsls	r3, r3, #2
1004ad6a:	58d3      	ldr	r3, [r2, r3]
1004ad6c:	220f      	movs	r2, #15
1004ad6e:	4393      	bics	r3, r2
1004ad70:	001a      	movs	r2, r3
1004ad72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004ad74:	210f      	movs	r1, #15
1004ad76:	400b      	ands	r3, r1
1004ad78:	49dd      	ldr	r1, [pc, #884]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ad7a:	431a      	orrs	r2, r3
1004ad7c:	239d      	movs	r3, #157	@ 0x9d
1004ad7e:	009b      	lsls	r3, r3, #2
1004ad80:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
1004ad82:	231b      	movs	r3, #27
1004ad84:	18fb      	adds	r3, r7, r3
1004ad86:	781b      	ldrb	r3, [r3, #0]
1004ad88:	2b00      	cmp	r3, #0
1004ad8a:	d01e      	beq.n	1004adca <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
1004ad8c:	4ad8      	ldr	r2, [pc, #864]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ad8e:	2392      	movs	r3, #146	@ 0x92
1004ad90:	009b      	lsls	r3, r3, #2
1004ad92:	58d3      	ldr	r3, [r2, r3]
1004ad94:	2207      	movs	r2, #7
1004ad96:	4393      	bics	r3, r2
1004ad98:	001a      	movs	r2, r3
1004ad9a:	6a3b      	ldr	r3, [r7, #32]
1004ad9c:	2107      	movs	r1, #7
1004ad9e:	400b      	ands	r3, r1
1004ada0:	49d3      	ldr	r1, [pc, #844]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ada2:	431a      	orrs	r2, r3
1004ada4:	2392      	movs	r3, #146	@ 0x92
1004ada6:	009b      	lsls	r3, r3, #2
1004ada8:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
1004adaa:	4ad1      	ldr	r2, [pc, #836]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004adac:	2392      	movs	r3, #146	@ 0x92
1004adae:	009b      	lsls	r3, r3, #2
1004adb0:	58d3      	ldr	r3, [r2, r3]
1004adb2:	2238      	movs	r2, #56	@ 0x38
1004adb4:	4393      	bics	r3, r2
1004adb6:	001a      	movs	r2, r3
1004adb8:	69fb      	ldr	r3, [r7, #28]
1004adba:	00db      	lsls	r3, r3, #3
1004adbc:	2138      	movs	r1, #56	@ 0x38
1004adbe:	400b      	ands	r3, r1
1004adc0:	49cb      	ldr	r1, [pc, #812]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004adc2:	431a      	orrs	r2, r3
1004adc4:	2392      	movs	r3, #146	@ 0x92
1004adc6:	009b      	lsls	r3, r3, #2
1004adc8:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004adca:	4ac9      	ldr	r2, [pc, #804]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004adcc:	23a4      	movs	r3, #164	@ 0xa4
1004adce:	005b      	lsls	r3, r3, #1
1004add0:	58d3      	ldr	r3, [r2, r3]
1004add2:	22ff      	movs	r2, #255	@ 0xff
1004add4:	4393      	bics	r3, r2
1004add6:	49c6      	ldr	r1, [pc, #792]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004add8:	2255      	movs	r2, #85	@ 0x55
1004adda:	431a      	orrs	r2, r3
1004addc:	23a4      	movs	r3, #164	@ 0xa4
1004adde:	005b      	lsls	r3, r3, #1
1004ade0:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
1004ade2:	4ac3      	ldr	r2, [pc, #780]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ade4:	23aa      	movs	r3, #170	@ 0xaa
1004ade6:	005b      	lsls	r3, r3, #1
1004ade8:	58d3      	ldr	r3, [r2, r3]
1004adea:	22ff      	movs	r2, #255	@ 0xff
1004adec:	4393      	bics	r3, r2
1004adee:	49c0      	ldr	r1, [pc, #768]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004adf0:	2266      	movs	r2, #102	@ 0x66
1004adf2:	431a      	orrs	r2, r3
1004adf4:	23aa      	movs	r3, #170	@ 0xaa
1004adf6:	005b      	lsls	r3, r3, #1
1004adf8:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004adfa:	4abd      	ldr	r2, [pc, #756]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004adfc:	23b4      	movs	r3, #180	@ 0xb4
1004adfe:	005b      	lsls	r3, r3, #1
1004ae00:	58d3      	ldr	r3, [r2, r3]
1004ae02:	22ff      	movs	r2, #255	@ 0xff
1004ae04:	4393      	bics	r3, r2
1004ae06:	49ba      	ldr	r1, [pc, #744]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae08:	2255      	movs	r2, #85	@ 0x55
1004ae0a:	431a      	orrs	r2, r3
1004ae0c:	23b4      	movs	r3, #180	@ 0xb4
1004ae0e:	005b      	lsls	r3, r3, #1
1004ae10:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
1004ae12:	4ab7      	ldr	r2, [pc, #732]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae14:	23c4      	movs	r3, #196	@ 0xc4
1004ae16:	005b      	lsls	r3, r3, #1
1004ae18:	58d3      	ldr	r3, [r2, r3]
1004ae1a:	22ff      	movs	r2, #255	@ 0xff
1004ae1c:	4393      	bics	r3, r2
1004ae1e:	49b4      	ldr	r1, [pc, #720]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae20:	221d      	movs	r2, #29
1004ae22:	431a      	orrs	r2, r3
1004ae24:	23c4      	movs	r3, #196	@ 0xc4
1004ae26:	005b      	lsls	r3, r3, #1
1004ae28:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004ae2a:	4ab1      	ldr	r2, [pc, #708]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae2c:	23c2      	movs	r3, #194	@ 0xc2
1004ae2e:	005b      	lsls	r3, r3, #1
1004ae30:	58d3      	ldr	r3, [r2, r3]
1004ae32:	22ff      	movs	r2, #255	@ 0xff
1004ae34:	4393      	bics	r3, r2
1004ae36:	49ae      	ldr	r1, [pc, #696]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae38:	2259      	movs	r2, #89	@ 0x59
1004ae3a:	431a      	orrs	r2, r3
1004ae3c:	23c2      	movs	r3, #194	@ 0xc2
1004ae3e:	005b      	lsls	r3, r3, #1
1004ae40:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
1004ae42:	4aab      	ldr	r2, [pc, #684]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae44:	23c6      	movs	r3, #198	@ 0xc6
1004ae46:	005b      	lsls	r3, r3, #1
1004ae48:	58d3      	ldr	r3, [r2, r3]
1004ae4a:	22ff      	movs	r2, #255	@ 0xff
1004ae4c:	4393      	bics	r3, r2
1004ae4e:	49a8      	ldr	r1, [pc, #672]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae50:	2232      	movs	r2, #50	@ 0x32
1004ae52:	431a      	orrs	r2, r3
1004ae54:	23c6      	movs	r3, #198	@ 0xc6
1004ae56:	005b      	lsls	r3, r3, #1
1004ae58:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
1004ae5a:	4aa5      	ldr	r2, [pc, #660]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae5c:	23b6      	movs	r3, #182	@ 0xb6
1004ae5e:	005b      	lsls	r3, r3, #1
1004ae60:	58d3      	ldr	r3, [r2, r3]
1004ae62:	49a3      	ldr	r1, [pc, #652]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae64:	2201      	movs	r2, #1
1004ae66:	431a      	orrs	r2, r3
1004ae68:	23b6      	movs	r3, #182	@ 0xb6
1004ae6a:	005b      	lsls	r3, r3, #1
1004ae6c:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
1004ae6e:	4aa0      	ldr	r2, [pc, #640]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae70:	23d0      	movs	r3, #208	@ 0xd0
1004ae72:	009b      	lsls	r3, r3, #2
1004ae74:	58d3      	ldr	r3, [r2, r3]
1004ae76:	22ff      	movs	r2, #255	@ 0xff
1004ae78:	4393      	bics	r3, r2
1004ae7a:	499d      	ldr	r1, [pc, #628]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae7c:	221f      	movs	r2, #31
1004ae7e:	431a      	orrs	r2, r3
1004ae80:	23d0      	movs	r3, #208	@ 0xd0
1004ae82:	009b      	lsls	r3, r3, #2
1004ae84:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
1004ae86:	4a9a      	ldr	r2, [pc, #616]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae88:	23d1      	movs	r3, #209	@ 0xd1
1004ae8a:	009b      	lsls	r3, r3, #2
1004ae8c:	58d3      	ldr	r3, [r2, r3]
1004ae8e:	22ff      	movs	r2, #255	@ 0xff
1004ae90:	4393      	bics	r3, r2
1004ae92:	4997      	ldr	r1, [pc, #604]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004ae94:	2209      	movs	r2, #9
1004ae96:	431a      	orrs	r2, r3
1004ae98:	23d1      	movs	r3, #209	@ 0xd1
1004ae9a:	009b      	lsls	r3, r3, #2
1004ae9c:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
1004ae9e:	2040      	movs	r0, #64	@ 0x40
1004aea0:	f7ff fd4c 	bl	1004a93c <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004aea4:	203f      	movs	r0, #63	@ 0x3f
1004aea6:	f7ff fd61 	bl	1004a96c <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
1004aeaa:	2009      	movs	r0, #9
1004aeac:	f7ff fd78 	bl	1004a9a0 <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
1004aeb0:	205a      	movs	r0, #90	@ 0x5a
1004aeb2:	f7ff fdb7 	bl	1004aa24 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
1004aeb6:	2032      	movs	r0, #50	@ 0x32
1004aeb8:	f7ff fdce 	bl	1004aa58 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
1004aebc:	205a      	movs	r0, #90	@ 0x5a
1004aebe:	f7ff fd83 	bl	1004a9c8 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
1004aec2:	2032      	movs	r0, #50	@ 0x32
1004aec4:	f7ff fd96 	bl	1004a9f4 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
1004aec8:	2010      	movs	r0, #16
1004aeca:	f7ff fe07 	bl	1004aadc <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
1004aece:	2010      	movs	r0, #16
1004aed0:	f7ff fe1e 	bl	1004ab10 <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
1004aed4:	2004      	movs	r0, #4
1004aed6:	f7ff fe35 	bl	1004ab44 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
1004aeda:	2014      	movs	r0, #20
1004aedc:	f7ff fdd0 	bl	1004aa80 <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
1004aee0:	2005      	movs	r0, #5
1004aee2:	f7ff fde3 	bl	1004aaac <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
1004aee6:	f7ff fe43 	bl	1004ab70 <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
1004aeea:	f7ff fe4f 	bl	1004ab8c <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
1004aeee:	f7ff fe5b 	bl	1004aba8 <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
1004aef2:	2000      	movs	r0, #0
1004aef4:	f7ff fe74 	bl	1004abe0 <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
1004aef8:	2013      	movs	r0, #19
1004aefa:	183b      	adds	r3, r7, r0
1004aefc:	2200      	movs	r2, #0
1004aefe:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004af00:	183b      	adds	r3, r7, r0
1004af02:	781b      	ldrb	r3, [r3, #0]
1004af04:	183a      	adds	r2, r7, r0
1004af06:	1c59      	adds	r1, r3, #1
1004af08:	7011      	strb	r1, [r2, #0]
1004af0a:	001a      	movs	r2, r3
1004af0c:	697b      	ldr	r3, [r7, #20]
1004af0e:	189b      	adds	r3, r3, r2
1004af10:	2201      	movs	r2, #1
1004af12:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
1004af14:	183b      	adds	r3, r7, r0
1004af16:	781b      	ldrb	r3, [r3, #0]
1004af18:	183a      	adds	r2, r7, r0
1004af1a:	1c59      	adds	r1, r3, #1
1004af1c:	7011      	strb	r1, [r2, #0]
1004af1e:	001a      	movs	r2, r3
1004af20:	697b      	ldr	r3, [r7, #20]
1004af22:	189b      	adds	r3, r3, r2
1004af24:	225e      	movs	r2, #94	@ 0x5e
1004af26:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004af28:	4a71      	ldr	r2, [pc, #452]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004af2a:	239e      	movs	r3, #158	@ 0x9e
1004af2c:	009b      	lsls	r3, r3, #2
1004af2e:	58d1      	ldr	r1, [r2, r3]
1004af30:	183b      	adds	r3, r7, r0
1004af32:	781b      	ldrb	r3, [r3, #0]
1004af34:	0004      	movs	r4, r0
1004af36:	183a      	adds	r2, r7, r0
1004af38:	1c58      	adds	r0, r3, #1
1004af3a:	7010      	strb	r0, [r2, #0]
1004af3c:	001a      	movs	r2, r3
1004af3e:	697b      	ldr	r3, [r7, #20]
1004af40:	189b      	adds	r3, r3, r2
1004af42:	b2ca      	uxtb	r2, r1
1004af44:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004af46:	0020      	movs	r0, r4
1004af48:	183b      	adds	r3, r7, r0
1004af4a:	781b      	ldrb	r3, [r3, #0]
1004af4c:	183a      	adds	r2, r7, r0
1004af4e:	1c59      	adds	r1, r3, #1
1004af50:	7011      	strb	r1, [r2, #0]
1004af52:	001a      	movs	r2, r3
1004af54:	697b      	ldr	r3, [r7, #20]
1004af56:	189b      	adds	r3, r3, r2
1004af58:	2201      	movs	r2, #1
1004af5a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
1004af5c:	183b      	adds	r3, r7, r0
1004af5e:	781b      	ldrb	r3, [r3, #0]
1004af60:	183a      	adds	r2, r7, r0
1004af62:	1c59      	adds	r1, r3, #1
1004af64:	7011      	strb	r1, [r2, #0]
1004af66:	001a      	movs	r2, r3
1004af68:	697b      	ldr	r3, [r7, #20]
1004af6a:	189b      	adds	r3, r3, r2
1004af6c:	225d      	movs	r2, #93	@ 0x5d
1004af6e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004af70:	4a5f      	ldr	r2, [pc, #380]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004af72:	239d      	movs	r3, #157	@ 0x9d
1004af74:	009b      	lsls	r3, r3, #2
1004af76:	58d1      	ldr	r1, [r2, r3]
1004af78:	183b      	adds	r3, r7, r0
1004af7a:	781b      	ldrb	r3, [r3, #0]
1004af7c:	0004      	movs	r4, r0
1004af7e:	183a      	adds	r2, r7, r0
1004af80:	1c58      	adds	r0, r3, #1
1004af82:	7010      	strb	r0, [r2, #0]
1004af84:	001a      	movs	r2, r3
1004af86:	697b      	ldr	r3, [r7, #20]
1004af88:	189b      	adds	r3, r3, r2
1004af8a:	b2ca      	uxtb	r2, r1
1004af8c:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004af8e:	0020      	movs	r0, r4
1004af90:	183b      	adds	r3, r7, r0
1004af92:	781b      	ldrb	r3, [r3, #0]
1004af94:	183a      	adds	r2, r7, r0
1004af96:	1c59      	adds	r1, r3, #1
1004af98:	7011      	strb	r1, [r2, #0]
1004af9a:	001a      	movs	r2, r3
1004af9c:	697b      	ldr	r3, [r7, #20]
1004af9e:	189b      	adds	r3, r3, r2
1004afa0:	2201      	movs	r2, #1
1004afa2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
1004afa4:	183b      	adds	r3, r7, r0
1004afa6:	781b      	ldrb	r3, [r3, #0]
1004afa8:	183a      	adds	r2, r7, r0
1004afaa:	1c59      	adds	r1, r3, #1
1004afac:	7011      	strb	r1, [r2, #0]
1004afae:	001a      	movs	r2, r3
1004afb0:	697b      	ldr	r3, [r7, #20]
1004afb2:	189b      	adds	r3, r3, r2
1004afb4:	2252      	movs	r2, #82	@ 0x52
1004afb6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
1004afb8:	4a4d      	ldr	r2, [pc, #308]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004afba:	2392      	movs	r3, #146	@ 0x92
1004afbc:	009b      	lsls	r3, r3, #2
1004afbe:	58d1      	ldr	r1, [r2, r3]
1004afc0:	183b      	adds	r3, r7, r0
1004afc2:	781b      	ldrb	r3, [r3, #0]
1004afc4:	0004      	movs	r4, r0
1004afc6:	183a      	adds	r2, r7, r0
1004afc8:	1c58      	adds	r0, r3, #1
1004afca:	7010      	strb	r0, [r2, #0]
1004afcc:	001a      	movs	r2, r3
1004afce:	697b      	ldr	r3, [r7, #20]
1004afd0:	189b      	adds	r3, r3, r2
1004afd2:	b2ca      	uxtb	r2, r1
1004afd4:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004afd6:	0020      	movs	r0, r4
1004afd8:	183b      	adds	r3, r7, r0
1004afda:	781b      	ldrb	r3, [r3, #0]
1004afdc:	183a      	adds	r2, r7, r0
1004afde:	1c59      	adds	r1, r3, #1
1004afe0:	7011      	strb	r1, [r2, #0]
1004afe2:	001a      	movs	r2, r3
1004afe4:	697b      	ldr	r3, [r7, #20]
1004afe6:	189b      	adds	r3, r3, r2
1004afe8:	2201      	movs	r2, #1
1004afea:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
1004afec:	183b      	adds	r3, r7, r0
1004afee:	781b      	ldrb	r3, [r3, #0]
1004aff0:	183a      	adds	r2, r7, r0
1004aff2:	1c59      	adds	r1, r3, #1
1004aff4:	7011      	strb	r1, [r2, #0]
1004aff6:	001a      	movs	r2, r3
1004aff8:	697b      	ldr	r3, [r7, #20]
1004affa:	189b      	adds	r3, r3, r2
1004affc:	2212      	movs	r2, #18
1004affe:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004b000:	4a3b      	ldr	r2, [pc, #236]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004b002:	23a4      	movs	r3, #164	@ 0xa4
1004b004:	005b      	lsls	r3, r3, #1
1004b006:	58d1      	ldr	r1, [r2, r3]
1004b008:	183b      	adds	r3, r7, r0
1004b00a:	781b      	ldrb	r3, [r3, #0]
1004b00c:	0004      	movs	r4, r0
1004b00e:	183a      	adds	r2, r7, r0
1004b010:	1c58      	adds	r0, r3, #1
1004b012:	7010      	strb	r0, [r2, #0]
1004b014:	001a      	movs	r2, r3
1004b016:	697b      	ldr	r3, [r7, #20]
1004b018:	189b      	adds	r3, r3, r2
1004b01a:	b2ca      	uxtb	r2, r1
1004b01c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b01e:	0020      	movs	r0, r4
1004b020:	183b      	adds	r3, r7, r0
1004b022:	781b      	ldrb	r3, [r3, #0]
1004b024:	183a      	adds	r2, r7, r0
1004b026:	1c59      	adds	r1, r3, #1
1004b028:	7011      	strb	r1, [r2, #0]
1004b02a:	001a      	movs	r2, r3
1004b02c:	697b      	ldr	r3, [r7, #20]
1004b02e:	189b      	adds	r3, r3, r2
1004b030:	2201      	movs	r2, #1
1004b032:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
1004b034:	183b      	adds	r3, r7, r0
1004b036:	781b      	ldrb	r3, [r3, #0]
1004b038:	183a      	adds	r2, r7, r0
1004b03a:	1c59      	adds	r1, r3, #1
1004b03c:	7011      	strb	r1, [r2, #0]
1004b03e:	001a      	movs	r2, r3
1004b040:	697b      	ldr	r3, [r7, #20]
1004b042:	189b      	adds	r3, r3, r2
1004b044:	2215      	movs	r2, #21
1004b046:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
1004b048:	4a29      	ldr	r2, [pc, #164]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004b04a:	23aa      	movs	r3, #170	@ 0xaa
1004b04c:	005b      	lsls	r3, r3, #1
1004b04e:	58d1      	ldr	r1, [r2, r3]
1004b050:	183b      	adds	r3, r7, r0
1004b052:	781b      	ldrb	r3, [r3, #0]
1004b054:	0004      	movs	r4, r0
1004b056:	183a      	adds	r2, r7, r0
1004b058:	1c58      	adds	r0, r3, #1
1004b05a:	7010      	strb	r0, [r2, #0]
1004b05c:	001a      	movs	r2, r3
1004b05e:	697b      	ldr	r3, [r7, #20]
1004b060:	189b      	adds	r3, r3, r2
1004b062:	b2ca      	uxtb	r2, r1
1004b064:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b066:	0020      	movs	r0, r4
1004b068:	183b      	adds	r3, r7, r0
1004b06a:	781b      	ldrb	r3, [r3, #0]
1004b06c:	183a      	adds	r2, r7, r0
1004b06e:	1c59      	adds	r1, r3, #1
1004b070:	7011      	strb	r1, [r2, #0]
1004b072:	001a      	movs	r2, r3
1004b074:	697b      	ldr	r3, [r7, #20]
1004b076:	189b      	adds	r3, r3, r2
1004b078:	2201      	movs	r2, #1
1004b07a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
1004b07c:	183b      	adds	r3, r7, r0
1004b07e:	781b      	ldrb	r3, [r3, #0]
1004b080:	183a      	adds	r2, r7, r0
1004b082:	1c59      	adds	r1, r3, #1
1004b084:	7011      	strb	r1, [r2, #0]
1004b086:	001a      	movs	r2, r3
1004b088:	697b      	ldr	r3, [r7, #20]
1004b08a:	189b      	adds	r3, r3, r2
1004b08c:	221a      	movs	r2, #26
1004b08e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004b090:	4a17      	ldr	r2, [pc, #92]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004b092:	23b4      	movs	r3, #180	@ 0xb4
1004b094:	005b      	lsls	r3, r3, #1
1004b096:	58d1      	ldr	r1, [r2, r3]
1004b098:	183b      	adds	r3, r7, r0
1004b09a:	781b      	ldrb	r3, [r3, #0]
1004b09c:	0004      	movs	r4, r0
1004b09e:	183a      	adds	r2, r7, r0
1004b0a0:	1c58      	adds	r0, r3, #1
1004b0a2:	7010      	strb	r0, [r2, #0]
1004b0a4:	001a      	movs	r2, r3
1004b0a6:	697b      	ldr	r3, [r7, #20]
1004b0a8:	189b      	adds	r3, r3, r2
1004b0aa:	b2ca      	uxtb	r2, r1
1004b0ac:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b0ae:	0020      	movs	r0, r4
1004b0b0:	183b      	adds	r3, r7, r0
1004b0b2:	781b      	ldrb	r3, [r3, #0]
1004b0b4:	183a      	adds	r2, r7, r0
1004b0b6:	1c59      	adds	r1, r3, #1
1004b0b8:	7011      	strb	r1, [r2, #0]
1004b0ba:	001a      	movs	r2, r3
1004b0bc:	697b      	ldr	r3, [r7, #20]
1004b0be:	189b      	adds	r3, r3, r2
1004b0c0:	2201      	movs	r2, #1
1004b0c2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
1004b0c4:	183b      	adds	r3, r7, r0
1004b0c6:	781b      	ldrb	r3, [r3, #0]
1004b0c8:	183a      	adds	r2, r7, r0
1004b0ca:	1c59      	adds	r1, r3, #1
1004b0cc:	7011      	strb	r1, [r2, #0]
1004b0ce:	001a      	movs	r2, r3
1004b0d0:	697b      	ldr	r3, [r7, #20]
1004b0d2:	189b      	adds	r3, r3, r2
1004b0d4:	2222      	movs	r2, #34	@ 0x22
1004b0d6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
1004b0d8:	4a05      	ldr	r2, [pc, #20]	@ (1004b0f0 <HAL_RADIO_Init+0x488>)
1004b0da:	23c4      	movs	r3, #196	@ 0xc4
1004b0dc:	005b      	lsls	r3, r3, #1
1004b0de:	58d1      	ldr	r1, [r2, r3]
1004b0e0:	183b      	adds	r3, r7, r0
1004b0e2:	781b      	ldrb	r3, [r3, #0]
1004b0e4:	0004      	movs	r4, r0
1004b0e6:	e005      	b.n	1004b0f4 <HAL_RADIO_Init+0x48c>
1004b0e8:	200000c0 	.word	0x200000c0
1004b0ec:	60001800 	.word	0x60001800
1004b0f0:	60001400 	.word	0x60001400
1004b0f4:	183a      	adds	r2, r7, r0
1004b0f6:	1c58      	adds	r0, r3, #1
1004b0f8:	7010      	strb	r0, [r2, #0]
1004b0fa:	001a      	movs	r2, r3
1004b0fc:	697b      	ldr	r3, [r7, #20]
1004b0fe:	189b      	adds	r3, r3, r2
1004b100:	b2ca      	uxtb	r2, r1
1004b102:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b104:	0020      	movs	r0, r4
1004b106:	183b      	adds	r3, r7, r0
1004b108:	781b      	ldrb	r3, [r3, #0]
1004b10a:	183a      	adds	r2, r7, r0
1004b10c:	1c59      	adds	r1, r3, #1
1004b10e:	7011      	strb	r1, [r2, #0]
1004b110:	001a      	movs	r2, r3
1004b112:	697b      	ldr	r3, [r7, #20]
1004b114:	189b      	adds	r3, r3, r2
1004b116:	2201      	movs	r2, #1
1004b118:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
1004b11a:	183b      	adds	r3, r7, r0
1004b11c:	781b      	ldrb	r3, [r3, #0]
1004b11e:	183a      	adds	r2, r7, r0
1004b120:	1c59      	adds	r1, r3, #1
1004b122:	7011      	strb	r1, [r2, #0]
1004b124:	001a      	movs	r2, r3
1004b126:	697b      	ldr	r3, [r7, #20]
1004b128:	189b      	adds	r3, r3, r2
1004b12a:	2221      	movs	r2, #33	@ 0x21
1004b12c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004b12e:	4a6d      	ldr	r2, [pc, #436]	@ (1004b2e4 <HAL_RADIO_Init+0x67c>)
1004b130:	23c2      	movs	r3, #194	@ 0xc2
1004b132:	005b      	lsls	r3, r3, #1
1004b134:	58d1      	ldr	r1, [r2, r3]
1004b136:	183b      	adds	r3, r7, r0
1004b138:	781b      	ldrb	r3, [r3, #0]
1004b13a:	0004      	movs	r4, r0
1004b13c:	183a      	adds	r2, r7, r0
1004b13e:	1c58      	adds	r0, r3, #1
1004b140:	7010      	strb	r0, [r2, #0]
1004b142:	001a      	movs	r2, r3
1004b144:	697b      	ldr	r3, [r7, #20]
1004b146:	189b      	adds	r3, r3, r2
1004b148:	b2ca      	uxtb	r2, r1
1004b14a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b14c:	0020      	movs	r0, r4
1004b14e:	183b      	adds	r3, r7, r0
1004b150:	781b      	ldrb	r3, [r3, #0]
1004b152:	183a      	adds	r2, r7, r0
1004b154:	1c59      	adds	r1, r3, #1
1004b156:	7011      	strb	r1, [r2, #0]
1004b158:	001a      	movs	r2, r3
1004b15a:	697b      	ldr	r3, [r7, #20]
1004b15c:	189b      	adds	r3, r3, r2
1004b15e:	2201      	movs	r2, #1
1004b160:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
1004b162:	183b      	adds	r3, r7, r0
1004b164:	781b      	ldrb	r3, [r3, #0]
1004b166:	183a      	adds	r2, r7, r0
1004b168:	1c59      	adds	r1, r3, #1
1004b16a:	7011      	strb	r1, [r2, #0]
1004b16c:	001a      	movs	r2, r3
1004b16e:	697b      	ldr	r3, [r7, #20]
1004b170:	189b      	adds	r3, r3, r2
1004b172:	2223      	movs	r2, #35	@ 0x23
1004b174:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
1004b176:	4a5b      	ldr	r2, [pc, #364]	@ (1004b2e4 <HAL_RADIO_Init+0x67c>)
1004b178:	23c6      	movs	r3, #198	@ 0xc6
1004b17a:	005b      	lsls	r3, r3, #1
1004b17c:	58d1      	ldr	r1, [r2, r3]
1004b17e:	183b      	adds	r3, r7, r0
1004b180:	781b      	ldrb	r3, [r3, #0]
1004b182:	0004      	movs	r4, r0
1004b184:	183a      	adds	r2, r7, r0
1004b186:	1c58      	adds	r0, r3, #1
1004b188:	7010      	strb	r0, [r2, #0]
1004b18a:	001a      	movs	r2, r3
1004b18c:	697b      	ldr	r3, [r7, #20]
1004b18e:	189b      	adds	r3, r3, r2
1004b190:	b2ca      	uxtb	r2, r1
1004b192:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b194:	0020      	movs	r0, r4
1004b196:	183b      	adds	r3, r7, r0
1004b198:	781b      	ldrb	r3, [r3, #0]
1004b19a:	183a      	adds	r2, r7, r0
1004b19c:	1c59      	adds	r1, r3, #1
1004b19e:	7011      	strb	r1, [r2, #0]
1004b1a0:	001a      	movs	r2, r3
1004b1a2:	697b      	ldr	r3, [r7, #20]
1004b1a4:	189b      	adds	r3, r3, r2
1004b1a6:	2201      	movs	r2, #1
1004b1a8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
1004b1aa:	183b      	adds	r3, r7, r0
1004b1ac:	781b      	ldrb	r3, [r3, #0]
1004b1ae:	183a      	adds	r2, r7, r0
1004b1b0:	1c59      	adds	r1, r3, #1
1004b1b2:	7011      	strb	r1, [r2, #0]
1004b1b4:	001a      	movs	r2, r3
1004b1b6:	697b      	ldr	r3, [r7, #20]
1004b1b8:	189b      	adds	r3, r3, r2
1004b1ba:	221b      	movs	r2, #27
1004b1bc:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
1004b1be:	4a49      	ldr	r2, [pc, #292]	@ (1004b2e4 <HAL_RADIO_Init+0x67c>)
1004b1c0:	23b6      	movs	r3, #182	@ 0xb6
1004b1c2:	005b      	lsls	r3, r3, #1
1004b1c4:	58d1      	ldr	r1, [r2, r3]
1004b1c6:	183b      	adds	r3, r7, r0
1004b1c8:	781b      	ldrb	r3, [r3, #0]
1004b1ca:	0004      	movs	r4, r0
1004b1cc:	183a      	adds	r2, r7, r0
1004b1ce:	1c58      	adds	r0, r3, #1
1004b1d0:	7010      	strb	r0, [r2, #0]
1004b1d2:	001a      	movs	r2, r3
1004b1d4:	697b      	ldr	r3, [r7, #20]
1004b1d6:	189b      	adds	r3, r3, r2
1004b1d8:	b2ca      	uxtb	r2, r1
1004b1da:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
1004b1dc:	0020      	movs	r0, r4
1004b1de:	183b      	adds	r3, r7, r0
1004b1e0:	781b      	ldrb	r3, [r3, #0]
1004b1e2:	183a      	adds	r2, r7, r0
1004b1e4:	1c59      	adds	r1, r3, #1
1004b1e6:	7011      	strb	r1, [r2, #0]
1004b1e8:	001a      	movs	r2, r3
1004b1ea:	697b      	ldr	r3, [r7, #20]
1004b1ec:	189b      	adds	r3, r3, r2
1004b1ee:	2201      	movs	r2, #1
1004b1f0:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
1004b1f2:	183b      	adds	r3, r7, r0
1004b1f4:	781b      	ldrb	r3, [r3, #0]
1004b1f6:	183a      	adds	r2, r7, r0
1004b1f8:	1c59      	adds	r1, r3, #1
1004b1fa:	7011      	strb	r1, [r2, #0]
1004b1fc:	001a      	movs	r2, r3
1004b1fe:	697b      	ldr	r3, [r7, #20]
1004b200:	189b      	adds	r3, r3, r2
1004b202:	2290      	movs	r2, #144	@ 0x90
1004b204:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
1004b206:	4a37      	ldr	r2, [pc, #220]	@ (1004b2e4 <HAL_RADIO_Init+0x67c>)
1004b208:	23d0      	movs	r3, #208	@ 0xd0
1004b20a:	009b      	lsls	r3, r3, #2
1004b20c:	58d1      	ldr	r1, [r2, r3]
1004b20e:	183b      	adds	r3, r7, r0
1004b210:	781b      	ldrb	r3, [r3, #0]
1004b212:	0004      	movs	r4, r0
1004b214:	183a      	adds	r2, r7, r0
1004b216:	1c58      	adds	r0, r3, #1
1004b218:	7010      	strb	r0, [r2, #0]
1004b21a:	001a      	movs	r2, r3
1004b21c:	697b      	ldr	r3, [r7, #20]
1004b21e:	189b      	adds	r3, r3, r2
1004b220:	b2ca      	uxtb	r2, r1
1004b222:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004b224:	0020      	movs	r0, r4
1004b226:	183b      	adds	r3, r7, r0
1004b228:	781b      	ldrb	r3, [r3, #0]
1004b22a:	183a      	adds	r2, r7, r0
1004b22c:	1c59      	adds	r1, r3, #1
1004b22e:	7011      	strb	r1, [r2, #0]
1004b230:	001a      	movs	r2, r3
1004b232:	697b      	ldr	r3, [r7, #20]
1004b234:	189b      	adds	r3, r3, r2
1004b236:	2201      	movs	r2, #1
1004b238:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004b23a:	183b      	adds	r3, r7, r0
1004b23c:	781b      	ldrb	r3, [r3, #0]
1004b23e:	183a      	adds	r2, r7, r0
1004b240:	1c59      	adds	r1, r3, #1
1004b242:	7011      	strb	r1, [r2, #0]
1004b244:	001a      	movs	r2, r3
1004b246:	697b      	ldr	r3, [r7, #20]
1004b248:	189b      	adds	r3, r3, r2
1004b24a:	2291      	movs	r2, #145	@ 0x91
1004b24c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004b24e:	4a25      	ldr	r2, [pc, #148]	@ (1004b2e4 <HAL_RADIO_Init+0x67c>)
1004b250:	23d1      	movs	r3, #209	@ 0xd1
1004b252:	009b      	lsls	r3, r3, #2
1004b254:	58d1      	ldr	r1, [r2, r3]
1004b256:	183b      	adds	r3, r7, r0
1004b258:	781b      	ldrb	r3, [r3, #0]
1004b25a:	0004      	movs	r4, r0
1004b25c:	183a      	adds	r2, r7, r0
1004b25e:	1c58      	adds	r0, r3, #1
1004b260:	7010      	strb	r0, [r2, #0]
1004b262:	001a      	movs	r2, r3
1004b264:	697b      	ldr	r3, [r7, #20]
1004b266:	189b      	adds	r3, r3, r2
1004b268:	b2ca      	uxtb	r2, r1
1004b26a:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
1004b26c:	193b      	adds	r3, r7, r4
1004b26e:	781b      	ldrb	r3, [r3, #0]
1004b270:	193a      	adds	r2, r7, r4
1004b272:	1c59      	adds	r1, r3, #1
1004b274:	7011      	strb	r1, [r2, #0]
1004b276:	001a      	movs	r2, r3
1004b278:	697b      	ldr	r3, [r7, #20]
1004b27a:	189b      	adds	r3, r3, r2
1004b27c:	2200      	movs	r2, #0
1004b27e:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
1004b280:	4a19      	ldr	r2, [pc, #100]	@ (1004b2e8 <HAL_RADIO_Init+0x680>)
1004b282:	4b1a      	ldr	r3, [pc, #104]	@ (1004b2ec <HAL_RADIO_Init+0x684>)
1004b284:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
1004b286:	4a18      	ldr	r2, [pc, #96]	@ (1004b2e8 <HAL_RADIO_Init+0x680>)
1004b288:	4b18      	ldr	r3, [pc, #96]	@ (1004b2ec <HAL_RADIO_Init+0x684>)
1004b28a:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
1004b28c:	4a18      	ldr	r2, [pc, #96]	@ (1004b2f0 <HAL_RADIO_Init+0x688>)
1004b28e:	4b17      	ldr	r3, [pc, #92]	@ (1004b2ec <HAL_RADIO_Init+0x684>)
1004b290:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
1004b292:	4b16      	ldr	r3, [pc, #88]	@ (1004b2ec <HAL_RADIO_Init+0x684>)
1004b294:	2200      	movs	r2, #0
1004b296:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
1004b298:	4b14      	ldr	r3, [pc, #80]	@ (1004b2ec <HAL_RADIO_Init+0x684>)
1004b29a:	681b      	ldr	r3, [r3, #0]
1004b29c:	0018      	movs	r0, r3
1004b29e:	f7ff fb3d 	bl	1004a91c <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
1004b2a2:	4b10      	ldr	r3, [pc, #64]	@ (1004b2e4 <HAL_RADIO_Init+0x67c>)
1004b2a4:	2201      	movs	r2, #1
1004b2a6:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004b2a8:	f7ff fc8c 	bl	1004abc4 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
1004b2ac:	23c0      	movs	r3, #192	@ 0xc0
1004b2ae:	05db      	lsls	r3, r3, #23
1004b2b0:	685b      	ldr	r3, [r3, #4]
1004b2b2:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
1004b2b4:	23c0      	movs	r3, #192	@ 0xc0
1004b2b6:	05db      	lsls	r3, r3, #23
1004b2b8:	68fa      	ldr	r2, [r7, #12]
1004b2ba:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
1004b2bc:	4b0d      	ldr	r3, [pc, #52]	@ (1004b2f4 <HAL_RADIO_Init+0x68c>)
1004b2be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004b2c0:	4b0c      	ldr	r3, [pc, #48]	@ (1004b2f4 <HAL_RADIO_Init+0x68c>)
1004b2c2:	2101      	movs	r1, #1
1004b2c4:	430a      	orrs	r2, r1
1004b2c6:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
1004b2c8:	4b0a      	ldr	r3, [pc, #40]	@ (1004b2f4 <HAL_RADIO_Init+0x68c>)
1004b2ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004b2cc:	4b09      	ldr	r3, [pc, #36]	@ (1004b2f4 <HAL_RADIO_Init+0x68c>)
1004b2ce:	2101      	movs	r1, #1
1004b2d0:	430a      	orrs	r2, r1
1004b2d2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
1004b2d4:	23c0      	movs	r3, #192	@ 0xc0
1004b2d6:	05db      	lsls	r3, r3, #23
1004b2d8:	685b      	ldr	r3, [r3, #4]
1004b2da:	60fb      	str	r3, [r7, #12]

  return;
1004b2dc:	46c0      	nop			@ (mov r8, r8)
}
1004b2de:	46bd      	mov	sp, r7
1004b2e0:	b00d      	add	sp, #52	@ 0x34
1004b2e2:	bd90      	pop	{r4, r7, pc}
1004b2e4:	60001400 	.word	0x60001400
1004b2e8:	200021dc 	.word	0x200021dc
1004b2ec:	200021cc 	.word	0x200021cc
1004b2f0:	200021d8 	.word	0x200021d8
1004b2f4:	60001800 	.word	0x60001800

1004b2f8 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
1004b2f8:	b580      	push	{r7, lr}
1004b2fa:	b086      	sub	sp, #24
1004b2fc:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004b2fe:	4a24      	ldr	r2, [pc, #144]	@ (1004b390 <HAL_RADIO_ReadRSSI+0x98>)
1004b300:	23a9      	movs	r3, #169	@ 0xa9
1004b302:	009b      	lsls	r3, r3, #2
1004b304:	58d3      	ldr	r3, [r2, r3]
1004b306:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
1004b308:	4a21      	ldr	r2, [pc, #132]	@ (1004b390 <HAL_RADIO_ReadRSSI+0x98>)
1004b30a:	23aa      	movs	r3, #170	@ 0xaa
1004b30c:	009b      	lsls	r3, r3, #2
1004b30e:	58d3      	ldr	r3, [r2, r3]
1004b310:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004b312:	68bb      	ldr	r3, [r7, #8]
1004b314:	021b      	lsls	r3, r3, #8
1004b316:	041b      	lsls	r3, r3, #16
1004b318:	0c1a      	lsrs	r2, r3, #16
1004b31a:	68fb      	ldr	r3, [r7, #12]
1004b31c:	21ff      	movs	r1, #255	@ 0xff
1004b31e:	400b      	ands	r3, r1
1004b320:	4313      	orrs	r3, r2
1004b322:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
1004b324:	4a1a      	ldr	r2, [pc, #104]	@ (1004b390 <HAL_RADIO_ReadRSSI+0x98>)
1004b326:	23ab      	movs	r3, #171	@ 0xab
1004b328:	009b      	lsls	r3, r3, #2
1004b32a:	58d3      	ldr	r3, [r2, r3]
1004b32c:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
1004b32e:	693b      	ldr	r3, [r7, #16]
1004b330:	2b00      	cmp	r3, #0
1004b332:	d002      	beq.n	1004b33a <HAL_RADIO_ReadRSSI+0x42>
1004b334:	687b      	ldr	r3, [r7, #4]
1004b336:	2b0b      	cmp	r3, #11
1004b338:	d902      	bls.n	1004b340 <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
1004b33a:	237f      	movs	r3, #127	@ 0x7f
1004b33c:	617b      	str	r3, [r7, #20]
1004b33e:	e020      	b.n	1004b382 <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
1004b340:	687a      	ldr	r2, [r7, #4]
1004b342:	0013      	movs	r3, r2
1004b344:	005b      	lsls	r3, r3, #1
1004b346:	189b      	adds	r3, r3, r2
1004b348:	005b      	lsls	r3, r3, #1
1004b34a:	3b77      	subs	r3, #119	@ 0x77
1004b34c:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
1004b34e:	e005      	b.n	1004b35c <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
1004b350:	697b      	ldr	r3, [r7, #20]
1004b352:	3306      	adds	r3, #6
1004b354:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
1004b356:	693b      	ldr	r3, [r7, #16]
1004b358:	085b      	lsrs	r3, r3, #1
1004b35a:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
1004b35c:	693b      	ldr	r3, [r7, #16]
1004b35e:	2b1e      	cmp	r3, #30
1004b360:	d8f6      	bhi.n	1004b350 <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
1004b362:	693a      	ldr	r2, [r7, #16]
1004b364:	0013      	movs	r3, r2
1004b366:	005b      	lsls	r3, r3, #1
1004b368:	189b      	adds	r3, r3, r2
1004b36a:	009b      	lsls	r3, r3, #2
1004b36c:	189b      	adds	r3, r3, r2
1004b36e:	015b      	lsls	r3, r3, #5
1004b370:	189b      	adds	r3, r3, r2
1004b372:	4a08      	ldr	r2, [pc, #32]	@ (1004b394 <HAL_RADIO_ReadRSSI+0x9c>)
1004b374:	4694      	mov	ip, r2
1004b376:	4463      	add	r3, ip
1004b378:	0a9b      	lsrs	r3, r3, #10
1004b37a:	001a      	movs	r2, r3
1004b37c:	697b      	ldr	r3, [r7, #20]
1004b37e:	189b      	adds	r3, r3, r2
1004b380:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
1004b382:	697b      	ldr	r3, [r7, #20]
1004b384:	b25b      	sxtb	r3, r3
}
1004b386:	0018      	movs	r0, r3
1004b388:	46bd      	mov	sp, r7
1004b38a:	b006      	add	sp, #24
1004b38c:	bd80      	pop	{r7, pc}
1004b38e:	46c0      	nop			@ (mov r8, r8)
1004b390:	60001400 	.word	0x60001400
1004b394:	000046a0 	.word	0x000046a0

1004b398 <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
1004b398:	b580      	push	{r7, lr}
1004b39a:	b082      	sub	sp, #8
1004b39c:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
1004b39e:	23c0      	movs	r3, #192	@ 0xc0
1004b3a0:	05db      	lsls	r3, r3, #23
1004b3a2:	69db      	ldr	r3, [r3, #28]
1004b3a4:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
1004b3a6:	23c0      	movs	r3, #192	@ 0xc0
1004b3a8:	05db      	lsls	r3, r3, #23
1004b3aa:	685b      	ldr	r3, [r3, #4]
1004b3ac:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004b3ae:	23c0      	movs	r3, #192	@ 0xc0
1004b3b0:	05db      	lsls	r3, r3, #23
1004b3b2:	683a      	ldr	r2, [r7, #0]
1004b3b4:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
1004b3b6:	f000 fcd3 	bl	1004bd60 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
1004b3ba:	687a      	ldr	r2, [r7, #4]
1004b3bc:	683b      	ldr	r3, [r7, #0]
1004b3be:	4313      	orrs	r3, r2
1004b3c0:	0018      	movs	r0, r3
1004b3c2:	f006 fd4a 	bl	10051e5a <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004b3c6:	f000 fcc5 	bl	1004bd54 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
1004b3ca:	23c0      	movs	r3, #192	@ 0xc0
1004b3cc:	05db      	lsls	r3, r3, #23
1004b3ce:	685b      	ldr	r3, [r3, #4]
1004b3d0:	603b      	str	r3, [r7, #0]
}
1004b3d2:	46c0      	nop			@ (mov r8, r8)
1004b3d4:	46bd      	mov	sp, r7
1004b3d6:	b002      	add	sp, #8
1004b3d8:	bd80      	pop	{r7, pc}

1004b3da <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004b3da:	b580      	push	{r7, lr}
1004b3dc:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004b3de:	f006 fb61 	bl	10051aa4 <HAL_RADIO_TxRxSeqCallback>
}
1004b3e2:	46c0      	nop			@ (mov r8, r8)
1004b3e4:	46bd      	mov	sp, r7
1004b3e6:	bd80      	pop	{r7, pc}

1004b3e8 <__NVIC_EnableIRQ>:
{
1004b3e8:	b580      	push	{r7, lr}
1004b3ea:	b082      	sub	sp, #8
1004b3ec:	af00      	add	r7, sp, #0
1004b3ee:	0002      	movs	r2, r0
1004b3f0:	1dfb      	adds	r3, r7, #7
1004b3f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004b3f4:	1dfb      	adds	r3, r7, #7
1004b3f6:	781b      	ldrb	r3, [r3, #0]
1004b3f8:	2b7f      	cmp	r3, #127	@ 0x7f
1004b3fa:	d809      	bhi.n	1004b410 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004b3fc:	1dfb      	adds	r3, r7, #7
1004b3fe:	781b      	ldrb	r3, [r3, #0]
1004b400:	001a      	movs	r2, r3
1004b402:	231f      	movs	r3, #31
1004b404:	401a      	ands	r2, r3
1004b406:	4b04      	ldr	r3, [pc, #16]	@ (1004b418 <__NVIC_EnableIRQ+0x30>)
1004b408:	2101      	movs	r1, #1
1004b40a:	4091      	lsls	r1, r2
1004b40c:	000a      	movs	r2, r1
1004b40e:	601a      	str	r2, [r3, #0]
}
1004b410:	46c0      	nop			@ (mov r8, r8)
1004b412:	46bd      	mov	sp, r7
1004b414:	b002      	add	sp, #8
1004b416:	bd80      	pop	{r7, pc}
1004b418:	e000e100 	.word	0xe000e100

1004b41c <LL_RADIO_TIMER_EnableTimer1>:
{
1004b41c:	b580      	push	{r7, lr}
1004b41e:	b082      	sub	sp, #8
1004b420:	af00      	add	r7, sp, #0
1004b422:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
1004b424:	687b      	ldr	r3, [r7, #4]
1004b426:	68db      	ldr	r3, [r3, #12]
1004b428:	2203      	movs	r2, #3
1004b42a:	4393      	bics	r3, r2
1004b42c:	2202      	movs	r2, #2
1004b42e:	431a      	orrs	r2, r3
1004b430:	687b      	ldr	r3, [r7, #4]
1004b432:	60da      	str	r2, [r3, #12]
}
1004b434:	46c0      	nop			@ (mov r8, r8)
1004b436:	46bd      	mov	sp, r7
1004b438:	b002      	add	sp, #8
1004b43a:	bd80      	pop	{r7, pc}

1004b43c <LL_RADIO_TIMER_DisableTimer1>:
{
1004b43c:	b580      	push	{r7, lr}
1004b43e:	b082      	sub	sp, #8
1004b440:	af00      	add	r7, sp, #0
1004b442:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004b444:	687b      	ldr	r3, [r7, #4]
1004b446:	68db      	ldr	r3, [r3, #12]
1004b448:	2203      	movs	r2, #3
1004b44a:	4393      	bics	r3, r2
1004b44c:	001a      	movs	r2, r3
1004b44e:	687b      	ldr	r3, [r7, #4]
1004b450:	60da      	str	r2, [r3, #12]
}
1004b452:	46c0      	nop			@ (mov r8, r8)
1004b454:	46bd      	mov	sp, r7
1004b456:	b002      	add	sp, #8
1004b458:	bd80      	pop	{r7, pc}

1004b45a <LL_RADIO_TIMER_DisableTimer2>:
{
1004b45a:	b580      	push	{r7, lr}
1004b45c:	b082      	sub	sp, #8
1004b45e:	af00      	add	r7, sp, #0
1004b460:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004b462:	687b      	ldr	r3, [r7, #4]
1004b464:	68db      	ldr	r3, [r3, #12]
1004b466:	2203      	movs	r2, #3
1004b468:	4393      	bics	r3, r2
1004b46a:	001a      	movs	r2, r3
1004b46c:	687b      	ldr	r3, [r7, #4]
1004b46e:	60da      	str	r2, [r3, #12]
}
1004b470:	46c0      	nop			@ (mov r8, r8)
1004b472:	46bd      	mov	sp, r7
1004b474:	b002      	add	sp, #8
1004b476:	bd80      	pop	{r7, pc}

1004b478 <LL_RADIO_TIMER_SetTimeout>:
{
1004b478:	b580      	push	{r7, lr}
1004b47a:	b082      	sub	sp, #8
1004b47c:	af00      	add	r7, sp, #0
1004b47e:	6078      	str	r0, [r7, #4]
1004b480:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
1004b482:	687b      	ldr	r3, [r7, #4]
1004b484:	683a      	ldr	r2, [r7, #0]
1004b486:	611a      	str	r2, [r3, #16]
}
1004b488:	46c0      	nop			@ (mov r8, r8)
1004b48a:	46bd      	mov	sp, r7
1004b48c:	b002      	add	sp, #8
1004b48e:	bd80      	pop	{r7, pc}

1004b490 <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004b490:	b580      	push	{r7, lr}
1004b492:	b082      	sub	sp, #8
1004b494:	af00      	add	r7, sp, #0
1004b496:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004b498:	687b      	ldr	r3, [r7, #4]
1004b49a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b49c:	2280      	movs	r2, #128	@ 0x80
1004b49e:	05d2      	lsls	r2, r2, #23
1004b4a0:	431a      	orrs	r2, r3
1004b4a2:	687b      	ldr	r3, [r7, #4]
1004b4a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004b4a6:	46c0      	nop			@ (mov r8, r8)
1004b4a8:	46bd      	mov	sp, r7
1004b4aa:	b002      	add	sp, #8
1004b4ac:	bd80      	pop	{r7, pc}
	...

1004b4b0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004b4b0:	b580      	push	{r7, lr}
1004b4b2:	b082      	sub	sp, #8
1004b4b4:	af00      	add	r7, sp, #0
1004b4b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004b4b8:	687b      	ldr	r3, [r7, #4]
1004b4ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b4bc:	4a03      	ldr	r2, [pc, #12]	@ (1004b4cc <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004b4be:	401a      	ands	r2, r3
1004b4c0:	687b      	ldr	r3, [r7, #4]
1004b4c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004b4c4:	46c0      	nop			@ (mov r8, r8)
1004b4c6:	46bd      	mov	sp, r7
1004b4c8:	b002      	add	sp, #8
1004b4ca:	bd80      	pop	{r7, pc}
1004b4cc:	bfffffff 	.word	0xbfffffff

1004b4d0 <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
1004b4d0:	b580      	push	{r7, lr}
1004b4d2:	b082      	sub	sp, #8
1004b4d4:	af00      	add	r7, sp, #0
1004b4d6:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004b4d8:	687b      	ldr	r3, [r7, #4]
1004b4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004b4dc:	2280      	movs	r2, #128	@ 0x80
1004b4de:	05d2      	lsls	r2, r2, #23
1004b4e0:	431a      	orrs	r2, r3
1004b4e2:	687b      	ldr	r3, [r7, #4]
1004b4e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004b4e6:	46c0      	nop			@ (mov r8, r8)
1004b4e8:	46bd      	mov	sp, r7
1004b4ea:	b002      	add	sp, #8
1004b4ec:	bd80      	pop	{r7, pc}
	...

1004b4f0 <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
1004b4f0:	b580      	push	{r7, lr}
1004b4f2:	b082      	sub	sp, #8
1004b4f4:	af00      	add	r7, sp, #0
1004b4f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004b4f8:	687b      	ldr	r3, [r7, #4]
1004b4fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004b4fc:	4a03      	ldr	r2, [pc, #12]	@ (1004b50c <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004b4fe:	401a      	ands	r2, r3
1004b500:	687b      	ldr	r3, [r7, #4]
1004b502:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004b504:	46c0      	nop			@ (mov r8, r8)
1004b506:	46bd      	mov	sp, r7
1004b508:	b002      	add	sp, #8
1004b50a:	bd80      	pop	{r7, pc}
1004b50c:	bfffffff 	.word	0xbfffffff

1004b510 <LL_RADIO_TIMER_SetWakeupOffset>:
{
1004b510:	b580      	push	{r7, lr}
1004b512:	b082      	sub	sp, #8
1004b514:	af00      	add	r7, sp, #0
1004b516:	6078      	str	r0, [r7, #4]
1004b518:	000a      	movs	r2, r1
1004b51a:	1cfb      	adds	r3, r7, #3
1004b51c:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004b51e:	1cfb      	adds	r3, r7, #3
1004b520:	781a      	ldrb	r2, [r3, #0]
1004b522:	687b      	ldr	r3, [r7, #4]
1004b524:	609a      	str	r2, [r3, #8]
}
1004b526:	46c0      	nop			@ (mov r8, r8)
1004b528:	46bd      	mov	sp, r7
1004b52a:	b002      	add	sp, #8
1004b52c:	bd80      	pop	{r7, pc}

1004b52e <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004b52e:	b580      	push	{r7, lr}
1004b530:	b082      	sub	sp, #8
1004b532:	af00      	add	r7, sp, #0
1004b534:	6078      	str	r0, [r7, #4]
1004b536:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
1004b538:	687b      	ldr	r3, [r7, #4]
1004b53a:	683a      	ldr	r2, [r7, #0]
1004b53c:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004b53e:	46c0      	nop			@ (mov r8, r8)
1004b540:	46bd      	mov	sp, r7
1004b542:	b002      	add	sp, #8
1004b544:	bd80      	pop	{r7, pc}

1004b546 <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004b546:	b580      	push	{r7, lr}
1004b548:	b082      	sub	sp, #8
1004b54a:	af00      	add	r7, sp, #0
1004b54c:	6078      	str	r0, [r7, #4]
1004b54e:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
1004b550:	687b      	ldr	r3, [r7, #4]
1004b552:	683a      	ldr	r2, [r7, #0]
1004b554:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004b556:	46c0      	nop			@ (mov r8, r8)
1004b558:	46bd      	mov	sp, r7
1004b55a:	b002      	add	sp, #8
1004b55c:	bd80      	pop	{r7, pc}

1004b55e <LL_RADIO_TIMER_GetAbsoluteTime>:
{
1004b55e:	b580      	push	{r7, lr}
1004b560:	b082      	sub	sp, #8
1004b562:	af00      	add	r7, sp, #0
1004b564:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004b566:	687b      	ldr	r3, [r7, #4]
1004b568:	691b      	ldr	r3, [r3, #16]
}
1004b56a:	0018      	movs	r0, r3
1004b56c:	46bd      	mov	sp, r7
1004b56e:	b002      	add	sp, #8
1004b570:	bd80      	pop	{r7, pc}

1004b572 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004b572:	b580      	push	{r7, lr}
1004b574:	b082      	sub	sp, #8
1004b576:	af00      	add	r7, sp, #0
1004b578:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
1004b57a:	687b      	ldr	r3, [r7, #4]
1004b57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b57e:	2280      	movs	r2, #128	@ 0x80
1004b580:	0592      	lsls	r2, r2, #22
1004b582:	431a      	orrs	r2, r3
1004b584:	687b      	ldr	r3, [r7, #4]
1004b586:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004b588:	46c0      	nop			@ (mov r8, r8)
1004b58a:	46bd      	mov	sp, r7
1004b58c:	b002      	add	sp, #8
1004b58e:	bd80      	pop	{r7, pc}

1004b590 <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
1004b590:	b580      	push	{r7, lr}
1004b592:	b082      	sub	sp, #8
1004b594:	af00      	add	r7, sp, #0
1004b596:	6078      	str	r0, [r7, #4]
1004b598:	000a      	movs	r2, r1
1004b59a:	1cfb      	adds	r3, r7, #3
1004b59c:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
1004b59e:	4b08      	ldr	r3, [pc, #32]	@ (1004b5c0 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004b5a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004b5a2:	2207      	movs	r2, #7
1004b5a4:	4393      	bics	r3, r2
1004b5a6:	0019      	movs	r1, r3
1004b5a8:	1cfb      	adds	r3, r7, #3
1004b5aa:	781b      	ldrb	r3, [r3, #0]
1004b5ac:	2207      	movs	r2, #7
1004b5ae:	401a      	ands	r2, r3
1004b5b0:	4b03      	ldr	r3, [pc, #12]	@ (1004b5c0 <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004b5b2:	430a      	orrs	r2, r1
1004b5b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
1004b5b6:	46c0      	nop			@ (mov r8, r8)
1004b5b8:	46bd      	mov	sp, r7
1004b5ba:	b002      	add	sp, #8
1004b5bc:	bd80      	pop	{r7, pc}
1004b5be:	46c0      	nop			@ (mov r8, r8)
1004b5c0:	60001800 	.word	0x60001800

1004b5c4 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004b5c4:	b580      	push	{r7, lr}
1004b5c6:	b082      	sub	sp, #8
1004b5c8:	af00      	add	r7, sp, #0
1004b5ca:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004b5cc:	687b      	ldr	r3, [r7, #4]
1004b5ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004b5d0:	2201      	movs	r2, #1
1004b5d2:	431a      	orrs	r2, r3
1004b5d4:	687b      	ldr	r3, [r7, #4]
1004b5d6:	649a      	str	r2, [r3, #72]	@ 0x48
}
1004b5d8:	46c0      	nop			@ (mov r8, r8)
1004b5da:	46bd      	mov	sp, r7
1004b5dc:	b002      	add	sp, #8
1004b5de:	bd80      	pop	{r7, pc}

1004b5e0 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004b5e0:	b580      	push	{r7, lr}
1004b5e2:	b082      	sub	sp, #8
1004b5e4:	af00      	add	r7, sp, #0
1004b5e6:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004b5e8:	687b      	ldr	r3, [r7, #4]
1004b5ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004b5ec:	2201      	movs	r2, #1
1004b5ee:	431a      	orrs	r2, r3
1004b5f0:	687b      	ldr	r3, [r7, #4]
1004b5f2:	64da      	str	r2, [r3, #76]	@ 0x4c
}
1004b5f4:	46c0      	nop			@ (mov r8, r8)
1004b5f6:	46bd      	mov	sp, r7
1004b5f8:	b002      	add	sp, #8
1004b5fa:	bd80      	pop	{r7, pc}

1004b5fc <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004b5fc:	b580      	push	{r7, lr}
1004b5fe:	b082      	sub	sp, #8
1004b600:	af00      	add	r7, sp, #0
1004b602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004b604:	687b      	ldr	r3, [r7, #4]
1004b606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004b608:	2201      	movs	r2, #1
1004b60a:	4013      	ands	r3, r2
1004b60c:	2b01      	cmp	r3, #1
1004b60e:	d101      	bne.n	1004b614 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
1004b610:	2301      	movs	r3, #1
1004b612:	e000      	b.n	1004b616 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
1004b614:	2300      	movs	r3, #0
}
1004b616:	0018      	movs	r0, r3
1004b618:	46bd      	mov	sp, r7
1004b61a:	b002      	add	sp, #8
1004b61c:	bd80      	pop	{r7, pc}

1004b61e <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
1004b61e:	b580      	push	{r7, lr}
1004b620:	b082      	sub	sp, #8
1004b622:	af00      	add	r7, sp, #0
1004b624:	6078      	str	r0, [r7, #4]
1004b626:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
1004b628:	687b      	ldr	r3, [r7, #4]
1004b62a:	683a      	ldr	r2, [r7, #0]
1004b62c:	605a      	str	r2, [r3, #4]
}
1004b62e:	46c0      	nop			@ (mov r8, r8)
1004b630:	46bd      	mov	sp, r7
1004b632:	b002      	add	sp, #8
1004b634:	bd80      	pop	{r7, pc}

1004b636 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b636:	b580      	push	{r7, lr}
1004b638:	b082      	sub	sp, #8
1004b63a:	af00      	add	r7, sp, #0
1004b63c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
1004b63e:	687b      	ldr	r3, [r7, #4]
1004b640:	2200      	movs	r2, #0
1004b642:	609a      	str	r2, [r3, #8]
}
1004b644:	46c0      	nop			@ (mov r8, r8)
1004b646:	46bd      	mov	sp, r7
1004b648:	b002      	add	sp, #8
1004b64a:	bd80      	pop	{r7, pc}

1004b64c <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b64c:	b580      	push	{r7, lr}
1004b64e:	b082      	sub	sp, #8
1004b650:	af00      	add	r7, sp, #0
1004b652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004b654:	687b      	ldr	r3, [r7, #4]
1004b656:	689b      	ldr	r3, [r3, #8]
}
1004b658:	0018      	movs	r0, r3
1004b65a:	46bd      	mov	sp, r7
1004b65c:	b002      	add	sp, #8
1004b65e:	bd80      	pop	{r7, pc}

1004b660 <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b660:	b580      	push	{r7, lr}
1004b662:	b082      	sub	sp, #8
1004b664:	af00      	add	r7, sp, #0
1004b666:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
1004b668:	687b      	ldr	r3, [r7, #4]
1004b66a:	68db      	ldr	r3, [r3, #12]
}
1004b66c:	0018      	movs	r0, r3
1004b66e:	46bd      	mov	sp, r7
1004b670:	b002      	add	sp, #8
1004b672:	bd80      	pop	{r7, pc}

1004b674 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b674:	b580      	push	{r7, lr}
1004b676:	b082      	sub	sp, #8
1004b678:	af00      	add	r7, sp, #0
1004b67a:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004b67c:	687b      	ldr	r3, [r7, #4]
1004b67e:	691b      	ldr	r3, [r3, #16]
1004b680:	2201      	movs	r2, #1
1004b682:	431a      	orrs	r2, r3
1004b684:	687b      	ldr	r3, [r7, #4]
1004b686:	611a      	str	r2, [r3, #16]
}
1004b688:	46c0      	nop			@ (mov r8, r8)
1004b68a:	46bd      	mov	sp, r7
1004b68c:	b002      	add	sp, #8
1004b68e:	bd80      	pop	{r7, pc}

1004b690 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004b690:	b580      	push	{r7, lr}
1004b692:	b082      	sub	sp, #8
1004b694:	af00      	add	r7, sp, #0
1004b696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004b698:	687b      	ldr	r3, [r7, #4]
1004b69a:	691b      	ldr	r3, [r3, #16]
1004b69c:	2201      	movs	r2, #1
1004b69e:	4013      	ands	r3, r2
1004b6a0:	2b01      	cmp	r3, #1
1004b6a2:	d101      	bne.n	1004b6a8 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004b6a4:	2301      	movs	r3, #1
1004b6a6:	e000      	b.n	1004b6aa <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004b6a8:	2300      	movs	r3, #0
}
1004b6aa:	0018      	movs	r0, r3
1004b6ac:	46bd      	mov	sp, r7
1004b6ae:	b002      	add	sp, #8
1004b6b0:	bd80      	pop	{r7, pc}
	...

1004b6b4 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004b6b6:	b083      	sub	sp, #12
1004b6b8:	af00      	add	r7, sp, #0
1004b6ba:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004b6bc:	4b71      	ldr	r3, [pc, #452]	@ (1004b884 <HAL_RADIO_TIMER_Init+0x1d0>)
1004b6be:	0018      	movs	r0, r3
1004b6c0:	f7ff ff8e 	bl	1004b5e0 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
1004b6c4:	4b6f      	ldr	r3, [pc, #444]	@ (1004b884 <HAL_RADIO_TIMER_Init+0x1d0>)
1004b6c6:	0018      	movs	r0, r3
1004b6c8:	f7ff ff7c 	bl	1004b5c4 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
1004b6cc:	2017      	movs	r0, #23
1004b6ce:	f7ff fe8b 	bl	1004b3e8 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004b6d2:	2014      	movs	r0, #20
1004b6d4:	f7ff fe88 	bl	1004b3e8 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
1004b6d8:	687b      	ldr	r3, [r7, #4]
1004b6da:	685b      	ldr	r3, [r3, #4]
1004b6dc:	1e5a      	subs	r2, r3, #1
1004b6de:	4193      	sbcs	r3, r2
1004b6e0:	b2db      	uxtb	r3, r3
1004b6e2:	001a      	movs	r2, r3
1004b6e4:	4b68      	ldr	r3, [pc, #416]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b6e6:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
1004b6e8:	4b67      	ldr	r3, [pc, #412]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b6ea:	781b      	ldrb	r3, [r3, #0]
1004b6ec:	2b00      	cmp	r3, #0
1004b6ee:	d103      	bne.n	1004b6f8 <HAL_RADIO_TIMER_Init+0x44>
1004b6f0:	687b      	ldr	r3, [r7, #4]
1004b6f2:	789b      	ldrb	r3, [r3, #2]
1004b6f4:	2b00      	cmp	r3, #0
1004b6f6:	d002      	beq.n	1004b6fe <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
1004b6f8:	f000 fc0a 	bl	1004bf10 <_calibrationProcedure>
1004b6fc:	e010      	b.n	1004b720 <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
1004b6fe:	4b62      	ldr	r3, [pc, #392]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b700:	22c8      	movs	r2, #200	@ 0xc8
1004b702:	0352      	lsls	r2, r2, #13
1004b704:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
1004b706:	4b60      	ldr	r3, [pc, #384]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b708:	22c8      	movs	r2, #200	@ 0xc8
1004b70a:	0352      	lsls	r2, r2, #13
1004b70c:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
1004b70e:	4b5e      	ldr	r3, [pc, #376]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b710:	4a5e      	ldr	r2, [pc, #376]	@ (1004b88c <HAL_RADIO_TIMER_Init+0x1d8>)
1004b712:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
1004b714:	4b5c      	ldr	r3, [pc, #368]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b716:	4a5e      	ldr	r2, [pc, #376]	@ (1004b890 <HAL_RADIO_TIMER_Init+0x1dc>)
1004b718:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
1004b71a:	4b5b      	ldr	r3, [pc, #364]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b71c:	4a5d      	ldr	r2, [pc, #372]	@ (1004b894 <HAL_RADIO_TIMER_Init+0x1e0>)
1004b71e:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
1004b720:	687b      	ldr	r3, [r7, #4]
1004b722:	685b      	ldr	r3, [r3, #4]
1004b724:	2b00      	cmp	r3, #0
1004b726:	d108      	bne.n	1004b73a <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
1004b728:	23a0      	movs	r3, #160	@ 0xa0
1004b72a:	05db      	lsls	r3, r3, #23
1004b72c:	0018      	movs	r0, r3
1004b72e:	f000 fb23 	bl	1004bd78 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004b732:	0002      	movs	r2, r0
1004b734:	4b54      	ldr	r3, [pc, #336]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b736:	605a      	str	r2, [r3, #4]
1004b738:	e01d      	b.n	1004b776 <HAL_RADIO_TIMER_Init+0xc2>

    
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
1004b73a:	687b      	ldr	r3, [r7, #4]
1004b73c:	685b      	ldr	r3, [r3, #4]
1004b73e:	031b      	lsls	r3, r3, #12
1004b740:	210a      	movs	r1, #10
1004b742:	0018      	movs	r0, r3
1004b744:	f7f4 fd7c 	bl	10040240 <__udivsi3>
1004b748:	0003      	movs	r3, r0
1004b74a:	001a      	movs	r2, r3
1004b74c:	4b4e      	ldr	r3, [pc, #312]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b74e:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004b750:	4b4d      	ldr	r3, [pc, #308]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b752:	685e      	ldr	r6, [r3, #4]
1004b754:	4b50      	ldr	r3, [pc, #320]	@ (1004b898 <HAL_RADIO_TIMER_Init+0x1e4>)
1004b756:	0018      	movs	r0, r3
1004b758:	f000 fb0e 	bl	1004bd78 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004b75c:	0003      	movs	r3, r0
1004b75e:	429e      	cmp	r6, r3
1004b760:	d202      	bcs.n	1004b768 <HAL_RADIO_TIMER_Init+0xb4>
1004b762:	4b49      	ldr	r3, [pc, #292]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b764:	685a      	ldr	r2, [r3, #4]
1004b766:	e004      	b.n	1004b772 <HAL_RADIO_TIMER_Init+0xbe>
1004b768:	4b4b      	ldr	r3, [pc, #300]	@ (1004b898 <HAL_RADIO_TIMER_Init+0x1e4>)
1004b76a:	0018      	movs	r0, r3
1004b76c:	f000 fb04 	bl	1004bd78 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004b770:	0002      	movs	r2, r0
1004b772:	4b45      	ldr	r3, [pc, #276]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b774:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration = CALIBRATION_CHECK_DURATION;
1004b776:	4b44      	ldr	r3, [pc, #272]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b778:	2264      	movs	r2, #100	@ 0x64
1004b77a:	609a      	str	r2, [r3, #8]
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004b77c:	4b42      	ldr	r3, [pc, #264]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b77e:	2200      	movs	r2, #0
1004b780:	731a      	strb	r2, [r3, #12]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
1004b782:	687b      	ldr	r3, [r7, #4]
1004b784:	881b      	ldrh	r3, [r3, #0]
1004b786:	001a      	movs	r2, r3
1004b788:	4b3f      	ldr	r3, [pc, #252]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b78a:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004b78c:	4b3e      	ldr	r3, [pc, #248]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b78e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004b790:	b29a      	uxth	r2, r3
1004b792:	4b3d      	ldr	r3, [pc, #244]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b794:	699b      	ldr	r3, [r3, #24]
1004b796:	0019      	movs	r1, r3
1004b798:	0010      	movs	r0, r2
1004b79a:	f000 fd2d 	bl	1004c1f8 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
1004b79e:	4b3a      	ldr	r3, [pc, #232]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7a0:	2284      	movs	r2, #132	@ 0x84
1004b7a2:	2100      	movs	r1, #0
1004b7a4:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
1004b7a6:	4938      	ldr	r1, [pc, #224]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7a8:	2200      	movs	r2, #0
1004b7aa:	2300      	movs	r3, #0
1004b7ac:	670a      	str	r2, [r1, #112]	@ 0x70
1004b7ae:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004b7b0:	4b34      	ldr	r3, [pc, #208]	@ (1004b884 <HAL_RADIO_TIMER_Init+0x1d0>)
1004b7b2:	0018      	movs	r0, r3
1004b7b4:	f7ff fed3 	bl	1004b55e <LL_RADIO_TIMER_GetAbsoluteTime>
1004b7b8:	0002      	movs	r2, r0
1004b7ba:	4b33      	ldr	r3, [pc, #204]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7bc:	2180      	movs	r1, #128	@ 0x80
1004b7be:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004b7c0:	4931      	ldr	r1, [pc, #196]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7c2:	2200      	movs	r2, #0
1004b7c4:	2300      	movs	r3, #0
1004b7c6:	678a      	str	r2, [r1, #120]	@ 0x78
1004b7c8:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
1004b7ca:	492f      	ldr	r1, [pc, #188]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7cc:	2200      	movs	r2, #0
1004b7ce:	2300      	movs	r3, #0
1004b7d0:	628a      	str	r2, [r1, #40]	@ 0x28
1004b7d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004b7d4:	4b2c      	ldr	r3, [pc, #176]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7d6:	2234      	movs	r2, #52	@ 0x34
1004b7d8:	2100      	movs	r1, #0
1004b7da:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004b7dc:	4b2a      	ldr	r3, [pc, #168]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7de:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004b7e0:	4b29      	ldr	r3, [pc, #164]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7e2:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004b7e4:	0019      	movs	r1, r3
1004b7e6:	4b2d      	ldr	r3, [pc, #180]	@ (1004b89c <HAL_RADIO_TIMER_Init+0x1e8>)
1004b7e8:	001a      	movs	r2, r3
1004b7ea:	f7f4 fc69 	bl	100400c0 <blue_unit_conversion>
1004b7ee:	0002      	movs	r2, r0
1004b7f0:	4b25      	ldr	r3, [pc, #148]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7f2:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
1004b7f4:	4b24      	ldr	r3, [pc, #144]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7f6:	7819      	ldrb	r1, [r3, #0]
1004b7f8:	4b23      	ldr	r3, [pc, #140]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b7fa:	2294      	movs	r2, #148	@ 0x94
1004b7fc:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
1004b7fe:	4b22      	ldr	r3, [pc, #136]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b800:	228c      	movs	r2, #140	@ 0x8c
1004b802:	2100      	movs	r1, #0
1004b804:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
1004b806:	4b20      	ldr	r3, [pc, #128]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b808:	2290      	movs	r2, #144	@ 0x90
1004b80a:	2101      	movs	r1, #1
1004b80c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004b80e:	4b1e      	ldr	r3, [pc, #120]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b810:	2293      	movs	r2, #147	@ 0x93
1004b812:	2100      	movs	r1, #0
1004b814:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
1004b816:	4b1c      	ldr	r3, [pc, #112]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b818:	2291      	movs	r2, #145	@ 0x91
1004b81a:	2100      	movs	r1, #0
1004b81c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
1004b81e:	4b1a      	ldr	r3, [pc, #104]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b820:	2292      	movs	r2, #146	@ 0x92
1004b822:	2100      	movs	r1, #0
1004b824:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004b826:	4b18      	ldr	r3, [pc, #96]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b828:	2261      	movs	r2, #97	@ 0x61
1004b82a:	2100      	movs	r1, #0
1004b82c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004b82e:	4b16      	ldr	r3, [pc, #88]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b830:	2262      	movs	r2, #98	@ 0x62
1004b832:	2100      	movs	r1, #0
1004b834:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004b836:	4b14      	ldr	r3, [pc, #80]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b838:	2263      	movs	r2, #99	@ 0x63
1004b83a:	2100      	movs	r1, #0
1004b83c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
1004b83e:	4912      	ldr	r1, [pc, #72]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b840:	2200      	movs	r2, #0
1004b842:	2300      	movs	r3, #0
1004b844:	658a      	str	r2, [r1, #88]	@ 0x58
1004b846:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
1004b848:	4b0f      	ldr	r3, [pc, #60]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b84a:	4a15      	ldr	r2, [pc, #84]	@ (1004b8a0 <HAL_RADIO_TIMER_Init+0x1ec>)
1004b84c:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
1004b84e:	4b0e      	ldr	r3, [pc, #56]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b850:	2200      	movs	r2, #0
1004b852:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004b854:	f000 faa6 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b858:	0002      	movs	r2, r0
1004b85a:	000b      	movs	r3, r1
1004b85c:	490a      	ldr	r1, [pc, #40]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b85e:	6849      	ldr	r1, [r1, #4]
1004b860:	000c      	movs	r4, r1
1004b862:	2100      	movs	r1, #0
1004b864:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004b866:	1912      	adds	r2, r2, r4
1004b868:	416b      	adcs	r3, r5
1004b86a:	490e      	ldr	r1, [pc, #56]	@ (1004b8a4 <HAL_RADIO_TIMER_Init+0x1f0>)
1004b86c:	0008      	movs	r0, r1
1004b86e:	f000 fd1d 	bl	1004c2ac <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
1004b872:	4b05      	ldr	r3, [pc, #20]	@ (1004b888 <HAL_RADIO_TIMER_Init+0x1d4>)
1004b874:	2101      	movs	r1, #1
1004b876:	0018      	movs	r0, r3
1004b878:	f000 fbfa 	bl	1004c070 <_configureTxRxDelay>
}
1004b87c:	46c0      	nop			@ (mov r8, r8)
1004b87e:	46bd      	mov	sp, r7
1004b880:	b003      	add	sp, #12
1004b882:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b884:	60001800 	.word	0x60001800
1004b888:	20002208 	.word	0x20002208
1004b88c:	0028f5c2 	.word	0x0028f5c2
1004b890:	00005b8d 	.word	0x00005b8d
1004b894:	0165ebec 	.word	0x0165ebec
1004b898:	ffffefff 	.word	0xffffefff
1004b89c:	00000326 	.word	0x00000326
1004b8a0:	1004c255 	.word	0x1004c255
1004b8a4:	20002248 	.word	0x20002248

1004b8a8 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
1004b8a8:	b5b0      	push	{r4, r5, r7, lr}
1004b8aa:	b090      	sub	sp, #64	@ 0x40
1004b8ac:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004b8ae:	230f      	movs	r3, #15
1004b8b0:	18fb      	adds	r3, r7, r3
1004b8b2:	2200      	movs	r2, #0
1004b8b4:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b8b6:	f3ef 8310 	mrs	r3, PRIMASK
1004b8ba:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004b8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
1004b8be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004b8c0:	b672      	cpsid	i
}
1004b8c2:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
1004b8c4:	4b9e      	ldr	r3, [pc, #632]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b8c6:	2261      	movs	r2, #97	@ 0x61
1004b8c8:	5c9b      	ldrb	r3, [r3, r2]
1004b8ca:	2b00      	cmp	r3, #0
1004b8cc:	d00f      	beq.n	1004b8ee <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004b8ce:	4b9c      	ldr	r3, [pc, #624]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b8d0:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004b8d2:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
1004b8d4:	f000 fa66 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b8d8:	0002      	movs	r2, r0
1004b8da:	000b      	movs	r3, r1
1004b8dc:	42ab      	cmp	r3, r5
1004b8de:	d802      	bhi.n	1004b8e6 <HAL_RADIO_TIMER_Tick+0x3e>
1004b8e0:	d105      	bne.n	1004b8ee <HAL_RADIO_TIMER_Tick+0x46>
1004b8e2:	42a2      	cmp	r2, r4
1004b8e4:	d903      	bls.n	1004b8ee <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004b8e6:	4b96      	ldr	r3, [pc, #600]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b8e8:	2261      	movs	r2, #97	@ 0x61
1004b8ea:	2100      	movs	r1, #0
1004b8ec:	5499      	strb	r1, [r3, r2]
1004b8ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004b8f0:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b8f2:	6a3b      	ldr	r3, [r7, #32]
1004b8f4:	f383 8810 	msr	PRIMASK, r3
}
1004b8f8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004b8fa:	e06e      	b.n	1004b9da <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
1004b8fc:	4b90      	ldr	r3, [pc, #576]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b8fe:	2291      	movs	r2, #145	@ 0x91
1004b900:	5c99      	ldrb	r1, [r3, r2]
1004b902:	4b8f      	ldr	r3, [pc, #572]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b904:	2292      	movs	r2, #146	@ 0x92
1004b906:	5c9a      	ldrb	r2, [r3, r2]
1004b908:	232b      	movs	r3, #43	@ 0x2b
1004b90a:	2008      	movs	r0, #8
1004b90c:	181b      	adds	r3, r3, r0
1004b90e:	19db      	adds	r3, r3, r7
1004b910:	1a8a      	subs	r2, r1, r2
1004b912:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
1004b914:	4b8a      	ldr	r3, [pc, #552]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b916:	228c      	movs	r2, #140	@ 0x8c
1004b918:	589b      	ldr	r3, [r3, r2]
1004b91a:	183a      	adds	r2, r7, r0
1004b91c:	0011      	movs	r1, r2
1004b91e:	0018      	movs	r0, r3
1004b920:	f000 fe9a 	bl	1004c658 <_check_callbacks>
1004b924:	0002      	movs	r2, r0
1004b926:	4b86      	ldr	r3, [pc, #536]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b928:	218c      	movs	r1, #140	@ 0x8c
1004b92a:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
1004b92c:	68bb      	ldr	r3, [r7, #8]
1004b92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004b930:	e010      	b.n	1004b954 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
1004b932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b934:	691b      	ldr	r3, [r3, #16]
1004b936:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
1004b938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b93a:	2200      	movs	r2, #0
1004b93c:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
1004b93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b940:	689b      	ldr	r3, [r3, #8]
1004b942:	2b00      	cmp	r3, #0
1004b944:	d004      	beq.n	1004b950 <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
1004b946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b948:	689b      	ldr	r3, [r3, #8]
1004b94a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004b94c:	0010      	movs	r0, r2
1004b94e:	4798      	blx	r3
      }
      curr = next;
1004b950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004b952:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004b954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004b956:	2b00      	cmp	r3, #0
1004b958:	d1eb      	bne.n	1004b932 <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004b95a:	4b79      	ldr	r3, [pc, #484]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b95c:	228c      	movs	r2, #140	@ 0x8c
1004b95e:	589b      	ldr	r3, [r3, r2]
1004b960:	240f      	movs	r4, #15
1004b962:	193a      	adds	r2, r7, r4
1004b964:	0011      	movs	r1, r2
1004b966:	0018      	movs	r0, r3
1004b968:	f000 fd66 	bl	1004c438 <_update_user_timeout>
1004b96c:	0002      	movs	r2, r0
1004b96e:	4b74      	ldr	r3, [pc, #464]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b970:	218c      	movs	r1, #140	@ 0x8c
1004b972:	505a      	str	r2, [r3, r1]
    if (expired == 1)
1004b974:	193b      	adds	r3, r7, r4
1004b976:	781b      	ldrb	r3, [r3, #0]
1004b978:	2b01      	cmp	r3, #1
1004b97a:	d121      	bne.n	1004b9c0 <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b97c:	f3ef 8310 	mrs	r3, PRIMASK
1004b980:	61fb      	str	r3, [r7, #28]
  return(result);
1004b982:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004b984:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
1004b986:	b672      	cpsid	i
}
1004b988:	46c0      	nop			@ (mov r8, r8)
1004b98a:	4b6d      	ldr	r3, [pc, #436]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b98c:	2291      	movs	r2, #145	@ 0x91
1004b98e:	5c9b      	ldrb	r3, [r3, r2]
1004b990:	3301      	adds	r3, #1
1004b992:	4a6b      	ldr	r2, [pc, #428]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b994:	2192      	movs	r1, #146	@ 0x92
1004b996:	5c52      	ldrb	r2, [r2, r1]
1004b998:	4293      	cmp	r3, r2
1004b99a:	d103      	bne.n	1004b9a4 <HAL_RADIO_TIMER_Tick+0xfc>
1004b99c:	4b68      	ldr	r3, [pc, #416]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b99e:	2291      	movs	r2, #145	@ 0x91
1004b9a0:	5c9b      	ldrb	r3, [r3, r2]
1004b9a2:	e004      	b.n	1004b9ae <HAL_RADIO_TIMER_Tick+0x106>
1004b9a4:	4b66      	ldr	r3, [pc, #408]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b9a6:	2291      	movs	r2, #145	@ 0x91
1004b9a8:	5c9b      	ldrb	r3, [r3, r2]
1004b9aa:	3301      	adds	r3, #1
1004b9ac:	b2db      	uxtb	r3, r3
1004b9ae:	4a64      	ldr	r2, [pc, #400]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b9b0:	2191      	movs	r1, #145	@ 0x91
1004b9b2:	5453      	strb	r3, [r2, r1]
1004b9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004b9b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b9b8:	69bb      	ldr	r3, [r7, #24]
1004b9ba:	f383 8810 	msr	PRIMASK, r3
}
1004b9be:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004b9c0:	4b5f      	ldr	r3, [pc, #380]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b9c2:	2292      	movs	r2, #146	@ 0x92
1004b9c4:	5c9a      	ldrb	r2, [r3, r2]
1004b9c6:	232b      	movs	r3, #43	@ 0x2b
1004b9c8:	2108      	movs	r1, #8
1004b9ca:	185b      	adds	r3, r3, r1
1004b9cc:	19db      	adds	r3, r3, r7
1004b9ce:	781b      	ldrb	r3, [r3, #0]
1004b9d0:	18d3      	adds	r3, r2, r3
1004b9d2:	b2d9      	uxtb	r1, r3
1004b9d4:	4b5a      	ldr	r3, [pc, #360]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b9d6:	2292      	movs	r2, #146	@ 0x92
1004b9d8:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004b9da:	4b59      	ldr	r3, [pc, #356]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b9dc:	2291      	movs	r2, #145	@ 0x91
1004b9de:	5c9a      	ldrb	r2, [r3, r2]
1004b9e0:	4b57      	ldr	r3, [pc, #348]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b9e2:	2192      	movs	r1, #146	@ 0x92
1004b9e4:	5c5b      	ldrb	r3, [r3, r1]
1004b9e6:	429a      	cmp	r2, r3
1004b9e8:	d30a      	bcc.n	1004ba00 <HAL_RADIO_TIMER_Tick+0x158>
1004b9ea:	4b55      	ldr	r3, [pc, #340]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b9ec:	2291      	movs	r2, #145	@ 0x91
1004b9ee:	5c9a      	ldrb	r2, [r3, r2]
1004b9f0:	4b53      	ldr	r3, [pc, #332]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004b9f2:	2192      	movs	r1, #146	@ 0x92
1004b9f4:	5c5b      	ldrb	r3, [r3, r1]
1004b9f6:	1ad3      	subs	r3, r2, r3
1004b9f8:	1e5a      	subs	r2, r3, #1
1004b9fa:	4193      	sbcs	r3, r2
1004b9fc:	b2db      	uxtb	r3, r3
1004b9fe:	e00c      	b.n	1004ba1a <HAL_RADIO_TIMER_Tick+0x172>
1004ba00:	4b4f      	ldr	r3, [pc, #316]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba02:	2291      	movs	r2, #145	@ 0x91
1004ba04:	5c9b      	ldrb	r3, [r3, r2]
1004ba06:	0019      	movs	r1, r3
1004ba08:	4b4d      	ldr	r3, [pc, #308]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba0a:	2292      	movs	r2, #146	@ 0x92
1004ba0c:	5c9b      	ldrb	r3, [r3, r2]
1004ba0e:	1acb      	subs	r3, r1, r3
1004ba10:	3301      	adds	r3, #1
1004ba12:	33ff      	adds	r3, #255	@ 0xff
1004ba14:	1e5a      	subs	r2, r3, #1
1004ba16:	4193      	sbcs	r3, r2
1004ba18:	b2db      	uxtb	r3, r3
1004ba1a:	2b00      	cmp	r3, #0
1004ba1c:	d000      	beq.n	1004ba20 <HAL_RADIO_TIMER_Tick+0x178>
1004ba1e:	e76d      	b.n	1004b8fc <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
1004ba20:	4b47      	ldr	r3, [pc, #284]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba22:	7b1b      	ldrb	r3, [r3, #12]
1004ba24:	2b00      	cmp	r3, #0
1004ba26:	d06a      	beq.n	1004bafe <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
1004ba28:	4b46      	ldr	r3, [pc, #280]	@ (1004bb44 <HAL_RADIO_TIMER_Tick+0x29c>)
1004ba2a:	0018      	movs	r0, r3
1004ba2c:	f7ff fe30 	bl	1004b690 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004ba30:	1e03      	subs	r3, r0, #0
1004ba32:	d100      	bne.n	1004ba36 <HAL_RADIO_TIMER_Tick+0x18e>
1004ba34:	e07f      	b.n	1004bb36 <HAL_RADIO_TIMER_Tick+0x28e>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004ba36:	4b42      	ldr	r3, [pc, #264]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba38:	2200      	movs	r2, #0
1004ba3a:	731a      	strb	r2, [r3, #12]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
1004ba3c:	4b40      	ldr	r3, [pc, #256]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba3e:	2294      	movs	r2, #148	@ 0x94
1004ba40:	5c9b      	ldrb	r3, [r3, r2]
1004ba42:	2b00      	cmp	r3, #0
1004ba44:	d109      	bne.n	1004ba5a <HAL_RADIO_TIMER_Tick+0x1b2>
1004ba46:	4b3e      	ldr	r3, [pc, #248]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba48:	2293      	movs	r2, #147	@ 0x93
1004ba4a:	5c9b      	ldrb	r3, [r3, r2]
1004ba4c:	2b00      	cmp	r3, #0
1004ba4e:	d004      	beq.n	1004ba5a <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004ba50:	4b3b      	ldr	r3, [pc, #236]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba52:	2293      	movs	r2, #147	@ 0x93
1004ba54:	2100      	movs	r1, #0
1004ba56:	5499      	strb	r1, [r3, r2]
1004ba58:	e034      	b.n	1004bac4 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
1004ba5a:	f000 fe47 	bl	1004c6ec <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004ba5e:	4b38      	ldr	r3, [pc, #224]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba60:	228c      	movs	r2, #140	@ 0x8c
1004ba62:	589b      	ldr	r3, [r3, r2]
1004ba64:	240f      	movs	r4, #15
1004ba66:	193a      	adds	r2, r7, r4
1004ba68:	0011      	movs	r1, r2
1004ba6a:	0018      	movs	r0, r3
1004ba6c:	f000 fce4 	bl	1004c438 <_update_user_timeout>
1004ba70:	0002      	movs	r2, r0
1004ba72:	4b33      	ldr	r3, [pc, #204]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba74:	218c      	movs	r1, #140	@ 0x8c
1004ba76:	505a      	str	r2, [r3, r1]
        if (expired == 1)
1004ba78:	193b      	adds	r3, r7, r4
1004ba7a:	781b      	ldrb	r3, [r3, #0]
1004ba7c:	2b01      	cmp	r3, #1
1004ba7e:	d121      	bne.n	1004bac4 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ba80:	f3ef 8310 	mrs	r3, PRIMASK
1004ba84:	617b      	str	r3, [r7, #20]
  return(result);
1004ba86:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
1004ba88:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
1004ba8a:	b672      	cpsid	i
}
1004ba8c:	46c0      	nop			@ (mov r8, r8)
1004ba8e:	4b2c      	ldr	r3, [pc, #176]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba90:	2291      	movs	r2, #145	@ 0x91
1004ba92:	5c9b      	ldrb	r3, [r3, r2]
1004ba94:	3301      	adds	r3, #1
1004ba96:	4a2a      	ldr	r2, [pc, #168]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004ba98:	2192      	movs	r1, #146	@ 0x92
1004ba9a:	5c52      	ldrb	r2, [r2, r1]
1004ba9c:	4293      	cmp	r3, r2
1004ba9e:	d103      	bne.n	1004baa8 <HAL_RADIO_TIMER_Tick+0x200>
1004baa0:	4b27      	ldr	r3, [pc, #156]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004baa2:	2291      	movs	r2, #145	@ 0x91
1004baa4:	5c9b      	ldrb	r3, [r3, r2]
1004baa6:	e004      	b.n	1004bab2 <HAL_RADIO_TIMER_Tick+0x20a>
1004baa8:	4b25      	ldr	r3, [pc, #148]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004baaa:	2291      	movs	r2, #145	@ 0x91
1004baac:	5c9b      	ldrb	r3, [r3, r2]
1004baae:	3301      	adds	r3, #1
1004bab0:	b2db      	uxtb	r3, r3
1004bab2:	4a23      	ldr	r2, [pc, #140]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004bab4:	2191      	movs	r1, #145	@ 0x91
1004bab6:	5453      	strb	r3, [r2, r1]
1004bab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004baba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004babc:	693b      	ldr	r3, [r7, #16]
1004babe:	f383 8810 	msr	PRIMASK, r3
}
1004bac2:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired); //Start Radio Timer after calibration
1004bac4:	230f      	movs	r3, #15
1004bac6:	18fa      	adds	r2, r7, r3
1004bac8:	4b1f      	ldr	r3, [pc, #124]	@ (1004bb48 <HAL_RADIO_TIMER_Tick+0x2a0>)
1004baca:	0011      	movs	r1, r2
1004bacc:	0018      	movs	r0, r3
1004bace:	f000 fec1 	bl	1004c854 <_check_radio_activity>
#endif

      /* Schedule next calibration event */
      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004bad2:	4b1e      	ldr	r3, [pc, #120]	@ (1004bb4c <HAL_RADIO_TIMER_Tick+0x2a4>)
1004bad4:	0018      	movs	r0, r3
1004bad6:	f000 f991 	bl	1004bdfc <HAL_RADIO_TIMER_StopVirtualTimer>
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004bada:	f000 f963 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004bade:	0002      	movs	r2, r0
1004bae0:	000b      	movs	r3, r1
1004bae2:	4917      	ldr	r1, [pc, #92]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004bae4:	6849      	ldr	r1, [r1, #4]
1004bae6:	6039      	str	r1, [r7, #0]
1004bae8:	2100      	movs	r1, #0
1004baea:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004baec:	6838      	ldr	r0, [r7, #0]
1004baee:	6879      	ldr	r1, [r7, #4]
1004baf0:	1812      	adds	r2, r2, r0
1004baf2:	414b      	adcs	r3, r1
1004baf4:	4915      	ldr	r1, [pc, #84]	@ (1004bb4c <HAL_RADIO_TIMER_Tick+0x2a4>)
1004baf6:	0008      	movs	r0, r1
1004baf8:	f000 fbd8 	bl	1004c2ac <_start_timer>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
1004bafc:	e01b      	b.n	1004bb36 <HAL_RADIO_TIMER_Tick+0x28e>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004bafe:	4b10      	ldr	r3, [pc, #64]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004bb00:	781b      	ldrb	r3, [r3, #0]
1004bb02:	2b00      	cmp	r3, #0
1004bb04:	d017      	beq.n	1004bb36 <HAL_RADIO_TIMER_Tick+0x28e>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
1004bb06:	f000 f94d 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004bb0a:	4b0d      	ldr	r3, [pc, #52]	@ (1004bb40 <HAL_RADIO_TIMER_Tick+0x298>)
1004bb0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004bb0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004bb10:	24fa      	movs	r4, #250	@ 0xfa
1004bb12:	0364      	lsls	r4, r4, #13
1004bb14:	2500      	movs	r5, #0
1004bb16:	1912      	adds	r2, r2, r4
1004bb18:	416b      	adcs	r3, r5
1004bb1a:	4299      	cmp	r1, r3
1004bb1c:	d803      	bhi.n	1004bb26 <HAL_RADIO_TIMER_Tick+0x27e>
1004bb1e:	d10a      	bne.n	1004bb36 <HAL_RADIO_TIMER_Tick+0x28e>
1004bb20:	4290      	cmp	r0, r2
1004bb22:	d800      	bhi.n	1004bb26 <HAL_RADIO_TIMER_Tick+0x27e>
}
1004bb24:	e007      	b.n	1004bb36 <HAL_RADIO_TIMER_Tick+0x28e>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004bb26:	4b09      	ldr	r3, [pc, #36]	@ (1004bb4c <HAL_RADIO_TIMER_Tick+0x2a4>)
1004bb28:	0018      	movs	r0, r3
1004bb2a:	f000 f967 	bl	1004bdfc <HAL_RADIO_TIMER_StopVirtualTimer>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004bb2e:	4b07      	ldr	r3, [pc, #28]	@ (1004bb4c <HAL_RADIO_TIMER_Tick+0x2a4>)
1004bb30:	0018      	movs	r0, r3
1004bb32:	f000 fb8f 	bl	1004c254 <_calibration_callback>
}
1004bb36:	46c0      	nop			@ (mov r8, r8)
1004bb38:	46bd      	mov	sp, r7
1004bb3a:	b010      	add	sp, #64	@ 0x40
1004bb3c:	bdb0      	pop	{r4, r5, r7, pc}
1004bb3e:	46c0      	nop			@ (mov r8, r8)
1004bb40:	20002208 	.word	0x20002208
1004bb44:	60001000 	.word	0x60001000
1004bb48:	20002260 	.word	0x20002260
1004bb4c:	20002248 	.word	0x20002248

1004bb50 <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
1004bb50:	b580      	push	{r7, lr}
1004bb52:	b082      	sub	sp, #8
1004bb54:	af00      	add	r7, sp, #0
1004bb56:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
1004bb58:	23c0      	movs	r3, #192	@ 0xc0
1004bb5a:	05db      	lsls	r3, r3, #23
1004bb5c:	695b      	ldr	r3, [r3, #20]
1004bb5e:	687a      	ldr	r2, [r7, #4]
1004bb60:	0011      	movs	r1, r2
1004bb62:	0018      	movs	r0, r3
1004bb64:	f000 ffe8 	bl	1004cb38 <TIMER_GetPastSysTime>
1004bb68:	0002      	movs	r2, r0
1004bb6a:	000b      	movs	r3, r1
}
1004bb6c:	0010      	movs	r0, r2
1004bb6e:	0019      	movs	r1, r3
1004bb70:	46bd      	mov	sp, r7
1004bb72:	b002      	add	sp, #8
1004bb74:	bd80      	pop	{r7, pc}
	...

1004bb78 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
1004bb78:	b5f0      	push	{r4, r5, r6, r7, lr}
1004bb7a:	b085      	sub	sp, #20
1004bb7c:	af00      	add	r7, sp, #0
1004bb7e:	6078      	str	r0, [r7, #4]
1004bb80:	0008      	movs	r0, r1
1004bb82:	0011      	movs	r1, r2
1004bb84:	1cfb      	adds	r3, r7, #3
1004bb86:	1c02      	adds	r2, r0, #0
1004bb88:	701a      	strb	r2, [r3, #0]
1004bb8a:	1cbb      	adds	r3, r7, #2
1004bb8c:	1c0a      	adds	r2, r1, #0
1004bb8e:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
1004bb90:	260f      	movs	r6, #15
1004bb92:	19bb      	adds	r3, r7, r6
1004bb94:	2200      	movs	r2, #0
1004bb96:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
1004bb98:	1cfb      	adds	r3, r7, #3
1004bb9a:	781b      	ldrb	r3, [r3, #0]
1004bb9c:	1e5a      	subs	r2, r3, #1
1004bb9e:	4193      	sbcs	r3, r2
1004bba0:	b2d9      	uxtb	r1, r3
1004bba2:	4b1b      	ldr	r3, [pc, #108]	@ (1004bc10 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004bba4:	2264      	movs	r2, #100	@ 0x64
1004bba6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
1004bba8:	1cbb      	adds	r3, r7, #2
1004bbaa:	781b      	ldrb	r3, [r3, #0]
1004bbac:	1e5a      	subs	r2, r3, #1
1004bbae:	4193      	sbcs	r3, r2
1004bbb0:	b2d9      	uxtb	r1, r3
1004bbb2:	4b17      	ldr	r3, [pc, #92]	@ (1004bc10 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004bbb4:	2260      	movs	r2, #96	@ 0x60
1004bbb6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
1004bbb8:	4b15      	ldr	r3, [pc, #84]	@ (1004bc10 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004bbba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004bbbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004bbbe:	4914      	ldr	r1, [pc, #80]	@ (1004bc10 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004bbc0:	6a88      	ldr	r0, [r1, #40]	@ 0x28
1004bbc2:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
1004bbc4:	6879      	ldr	r1, [r7, #4]
1004bbc6:	1a09      	subs	r1, r1, r0
1004bbc8:	000c      	movs	r4, r1
1004bbca:	2100      	movs	r1, #0
1004bbcc:	000d      	movs	r5, r1
1004bbce:	1912      	adds	r2, r2, r4
1004bbd0:	416b      	adcs	r3, r5
1004bbd2:	490f      	ldr	r1, [pc, #60]	@ (1004bc10 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004bbd4:	658a      	str	r2, [r1, #88]	@ 0x58
1004bbd6:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004bbd8:	4b0d      	ldr	r3, [pc, #52]	@ (1004bc10 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004bbda:	2261      	movs	r2, #97	@ 0x61
1004bbdc:	2100      	movs	r1, #0
1004bbde:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004bbe0:	4b0b      	ldr	r3, [pc, #44]	@ (1004bc10 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004bbe2:	2263      	movs	r2, #99	@ 0x63
1004bbe4:	2100      	movs	r1, #0
1004bbe6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
1004bbe8:	4b09      	ldr	r3, [pc, #36]	@ (1004bc10 <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004bbea:	2262      	movs	r2, #98	@ 0x62
1004bbec:	2101      	movs	r1, #1
1004bbee:	5499      	strb	r1, [r3, r2]
      _set_controller_as_host();
      _check_host_activity();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
1004bbf0:	19ba      	adds	r2, r7, r6
1004bbf2:	4b08      	ldr	r3, [pc, #32]	@ (1004bc14 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
1004bbf4:	0011      	movs	r1, r2
1004bbf6:	0018      	movs	r0, r3
1004bbf8:	f000 fe2c 	bl	1004c854 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
1004bbfc:	2001      	movs	r0, #1
1004bbfe:	f000 fcd3 	bl	1004c5a8 <_virtualTimeBaseEnable>

  return retVal;
1004bc02:	19bb      	adds	r3, r7, r6
1004bc04:	781b      	ldrb	r3, [r3, #0]
}
1004bc06:	0018      	movs	r0, r3
1004bc08:	46bd      	mov	sp, r7
1004bc0a:	b005      	add	sp, #20
1004bc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004bc0e:	46c0      	nop			@ (mov r8, r8)
1004bc10:	20002208 	.word	0x20002208
1004bc14:	20002260 	.word	0x20002260

1004bc18 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
1004bc18:	b5b0      	push	{r4, r5, r7, lr}
1004bc1a:	b088      	sub	sp, #32
1004bc1c:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004bc1e:	23c0      	movs	r3, #192	@ 0xc0
1004bc20:	05db      	lsls	r3, r3, #23
1004bc22:	0018      	movs	r0, r3
1004bc24:	f7ff fc0a 	bl	1004b43c <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004bc28:	23c0      	movs	r3, #192	@ 0xc0
1004bc2a:	05db      	lsls	r3, r3, #23
1004bc2c:	0018      	movs	r0, r3
1004bc2e:	f7ff fc14 	bl	1004b45a <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004bc32:	4b31      	ldr	r3, [pc, #196]	@ (1004bcf8 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004bc34:	0018      	movs	r0, r3
1004bc36:	f7ff fc3b 	bl	1004b4b0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004bc3a:	4b30      	ldr	r3, [pc, #192]	@ (1004bcfc <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004bc3c:	2261      	movs	r2, #97	@ 0x61
1004bc3e:	2100      	movs	r1, #0
1004bc40:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004bc42:	4b2e      	ldr	r3, [pc, #184]	@ (1004bcfc <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004bc44:	2262      	movs	r2, #98	@ 0x62
1004bc46:	2100      	movs	r1, #0
1004bc48:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004bc4a:	4b2c      	ldr	r3, [pc, #176]	@ (1004bcfc <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004bc4c:	2263      	movs	r2, #99	@ 0x63
1004bc4e:	2100      	movs	r1, #0
1004bc50:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bc52:	f3ef 8310 	mrs	r3, PRIMASK
1004bc56:	60bb      	str	r3, [r7, #8]
  return(result);
1004bc58:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
1004bc5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004bc5c:	b672      	cpsid	i
}
1004bc5e:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004bc60:	4b26      	ldr	r3, [pc, #152]	@ (1004bcfc <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004bc62:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004bc64:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
1004bc66:	f000 f89d 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004bc6a:	0002      	movs	r2, r0
1004bc6c:	000b      	movs	r3, r1
1004bc6e:	1aa4      	subs	r4, r4, r2
1004bc70:	419d      	sbcs	r5, r3
1004bc72:	0022      	movs	r2, r4
1004bc74:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
1004bc76:	4921      	ldr	r1, [pc, #132]	@ (1004bcfc <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004bc78:	2084      	movs	r0, #132	@ 0x84
1004bc7a:	5c09      	ldrb	r1, [r1, r0]
1004bc7c:	6039      	str	r1, [r7, #0]
1004bc7e:	2100      	movs	r1, #0
1004bc80:	6079      	str	r1, [r7, #4]
1004bc82:	6838      	ldr	r0, [r7, #0]
1004bc84:	6879      	ldr	r1, [r7, #4]
1004bc86:	1a12      	subs	r2, r2, r0
1004bc88:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004bc8a:	613a      	str	r2, [r7, #16]
1004bc8c:	617b      	str	r3, [r7, #20]
1004bc8e:	69bb      	ldr	r3, [r7, #24]
1004bc90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bc92:	68fb      	ldr	r3, [r7, #12]
1004bc94:	f383 8810 	msr	PRIMASK, r3
}
1004bc98:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
1004bc9a:	697b      	ldr	r3, [r7, #20]
1004bc9c:	2b00      	cmp	r3, #0
1004bc9e:	dc0c      	bgt.n	1004bcba <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
1004bca0:	697b      	ldr	r3, [r7, #20]
1004bca2:	2b00      	cmp	r3, #0
1004bca4:	d102      	bne.n	1004bcac <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
1004bca6:	693b      	ldr	r3, [r7, #16]
1004bca8:	2b00      	cmp	r3, #0
1004bcaa:	d106      	bne.n	1004bcba <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
1004bcac:	2317      	movs	r3, #23
1004bcae:	2208      	movs	r2, #8
1004bcb0:	189b      	adds	r3, r3, r2
1004bcb2:	19db      	adds	r3, r3, r7
1004bcb4:	2201      	movs	r2, #1
1004bcb6:	701a      	strb	r2, [r3, #0]
1004bcb8:	e015      	b.n	1004bce6 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
1004bcba:	697b      	ldr	r3, [r7, #20]
1004bcbc:	2b00      	cmp	r3, #0
1004bcbe:	dc0c      	bgt.n	1004bcda <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
1004bcc0:	697b      	ldr	r3, [r7, #20]
1004bcc2:	2b00      	cmp	r3, #0
1004bcc4:	d102      	bne.n	1004bccc <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
1004bcc6:	693b      	ldr	r3, [r7, #16]
1004bcc8:	2b0e      	cmp	r3, #14
1004bcca:	d806      	bhi.n	1004bcda <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
1004bccc:	2317      	movs	r3, #23
1004bcce:	2208      	movs	r2, #8
1004bcd0:	189b      	adds	r3, r3, r2
1004bcd2:	19db      	adds	r3, r3, r7
1004bcd4:	2202      	movs	r2, #2
1004bcd6:	701a      	strb	r2, [r3, #0]
1004bcd8:	e005      	b.n	1004bce6 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
1004bcda:	2317      	movs	r3, #23
1004bcdc:	2208      	movs	r2, #8
1004bcde:	189b      	adds	r3, r3, r2
1004bce0:	19db      	adds	r3, r3, r7
1004bce2:	2200      	movs	r2, #0
1004bce4:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
1004bce6:	2317      	movs	r3, #23
1004bce8:	2208      	movs	r2, #8
1004bcea:	189b      	adds	r3, r3, r2
1004bcec:	19db      	adds	r3, r3, r7
1004bcee:	781b      	ldrb	r3, [r3, #0]
}
1004bcf0:	0018      	movs	r0, r3
1004bcf2:	46bd      	mov	sp, r7
1004bcf4:	b008      	add	sp, #32
1004bcf6:	bdb0      	pop	{r4, r5, r7, pc}
1004bcf8:	60001800 	.word	0x60001800
1004bcfc:	20002208 	.word	0x20002208

1004bd00 <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
1004bd00:	b580      	push	{r7, lr}
1004bd02:	b084      	sub	sp, #16
1004bd04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bd06:	f3ef 8310 	mrs	r3, PRIMASK
1004bd0a:	603b      	str	r3, [r7, #0]
  return(result);
1004bd0c:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
1004bd0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004bd10:	b672      	cpsid	i
}
1004bd12:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004bd14:	4b0e      	ldr	r3, [pc, #56]	@ (1004bd50 <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
1004bd16:	0018      	movs	r0, r3
1004bd18:	f7ff fc21 	bl	1004b55e <LL_RADIO_TIMER_GetAbsoluteTime>
1004bd1c:	0003      	movs	r3, r0
1004bd1e:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
1004bd20:	68bb      	ldr	r3, [r7, #8]
1004bd22:	1c9a      	adds	r2, r3, #2
1004bd24:	23c0      	movs	r3, #192	@ 0xc0
1004bd26:	05db      	lsls	r3, r3, #23
1004bd28:	0011      	movs	r1, r2
1004bd2a:	0018      	movs	r0, r3
1004bd2c:	f7ff fba4 	bl	1004b478 <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
1004bd30:	23c0      	movs	r3, #192	@ 0xc0
1004bd32:	05db      	lsls	r3, r3, #23
1004bd34:	0018      	movs	r0, r3
1004bd36:	f7ff fb71 	bl	1004b41c <LL_RADIO_TIMER_EnableTimer1>
1004bd3a:	68fb      	ldr	r3, [r7, #12]
1004bd3c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bd3e:	687b      	ldr	r3, [r7, #4]
1004bd40:	f383 8810 	msr	PRIMASK, r3
}
1004bd44:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004bd46:	46c0      	nop			@ (mov r8, r8)
1004bd48:	46bd      	mov	sp, r7
1004bd4a:	b004      	add	sp, #16
1004bd4c:	bd80      	pop	{r7, pc}
1004bd4e:	46c0      	nop			@ (mov r8, r8)
1004bd50:	60001800 	.word	0x60001800

1004bd54 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
1004bd54:	b580      	push	{r7, lr}
1004bd56:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
1004bd58:	46c0      	nop			@ (mov r8, r8)
1004bd5a:	46bd      	mov	sp, r7
1004bd5c:	bd80      	pop	{r7, pc}
	...

1004bd60 <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
1004bd60:	b580      	push	{r7, lr}
1004bd62:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004bd64:	4b03      	ldr	r3, [pc, #12]	@ (1004bd74 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
1004bd66:	2263      	movs	r2, #99	@ 0x63
1004bd68:	2100      	movs	r1, #0
1004bd6a:	5499      	strb	r1, [r3, r2]
}
1004bd6c:	46c0      	nop			@ (mov r8, r8)
1004bd6e:	46bd      	mov	sp, r7
1004bd70:	bd80      	pop	{r7, pc}
1004bd72:	46c0      	nop			@ (mov r8, r8)
1004bd74:	20002208 	.word	0x20002208

1004bd78 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
1004bd78:	b580      	push	{r7, lr}
1004bd7a:	b082      	sub	sp, #8
1004bd7c:	af00      	add	r7, sp, #0
1004bd7e:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004bd80:	4b06      	ldr	r3, [pc, #24]	@ (1004bd9c <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
1004bd82:	69db      	ldr	r3, [r3, #28]
1004bd84:	0019      	movs	r1, r3
1004bd86:	4a06      	ldr	r2, [pc, #24]	@ (1004bda0 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
1004bd88:	687b      	ldr	r3, [r7, #4]
1004bd8a:	0018      	movs	r0, r3
1004bd8c:	f7f4 f998 	bl	100400c0 <blue_unit_conversion>
1004bd90:	0003      	movs	r3, r0
}
1004bd92:	0018      	movs	r0, r3
1004bd94:	46bd      	mov	sp, r7
1004bd96:	b002      	add	sp, #8
1004bd98:	bd80      	pop	{r7, pc}
1004bd9a:	46c0      	nop			@ (mov r8, r8)
1004bd9c:	20002208 	.word	0x20002208
1004bda0:	00000635 	.word	0x00000635

1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004bda4:	b580      	push	{r7, lr}
1004bda6:	b082      	sub	sp, #8
1004bda8:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004bdaa:	1d3a      	adds	r2, r7, #4
1004bdac:	4b05      	ldr	r3, [pc, #20]	@ (1004bdc4 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
1004bdae:	0011      	movs	r1, r2
1004bdb0:	0018      	movs	r0, r3
1004bdb2:	f000 fad9 	bl	1004c368 <_get_system_time_and_machine>
1004bdb6:	0002      	movs	r2, r0
1004bdb8:	000b      	movs	r3, r1
}
1004bdba:	0010      	movs	r0, r2
1004bdbc:	0019      	movs	r1, r3
1004bdbe:	46bd      	mov	sp, r7
1004bdc0:	b002      	add	sp, #8
1004bdc2:	bd80      	pop	{r7, pc}
1004bdc4:	20002208 	.word	0x20002208

1004bdc8 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004bdc8:	b590      	push	{r4, r7, lr}
1004bdca:	b087      	sub	sp, #28
1004bdcc:	af00      	add	r7, sp, #0
1004bdce:	60f8      	str	r0, [r7, #12]
1004bdd0:	603a      	str	r2, [r7, #0]
1004bdd2:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
1004bdd4:	683a      	ldr	r2, [r7, #0]
1004bdd6:	687b      	ldr	r3, [r7, #4]
1004bdd8:	68f9      	ldr	r1, [r7, #12]
1004bdda:	0008      	movs	r0, r1
1004bddc:	f000 fa66 	bl	1004c2ac <_start_timer>
1004bde0:	0002      	movs	r2, r0
1004bde2:	2417      	movs	r4, #23
1004bde4:	193b      	adds	r3, r7, r4
1004bde6:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004bde8:	2001      	movs	r0, #1
1004bdea:	f000 fbdd 	bl	1004c5a8 <_virtualTimeBaseEnable>

  return retVal;
1004bdee:	193b      	adds	r3, r7, r4
1004bdf0:	781b      	ldrb	r3, [r3, #0]
}
1004bdf2:	0018      	movs	r0, r3
1004bdf4:	46bd      	mov	sp, r7
1004bdf6:	b007      	add	sp, #28
1004bdf8:	bd90      	pop	{r4, r7, pc}
	...

1004bdfc <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
1004bdfc:	b590      	push	{r4, r7, lr}
1004bdfe:	b089      	sub	sp, #36	@ 0x24
1004be00:	af00      	add	r7, sp, #0
1004be02:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
1004be04:	4b28      	ldr	r3, [pc, #160]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be06:	228c      	movs	r2, #140	@ 0x8c
1004be08:	589b      	ldr	r3, [r3, r2]
1004be0a:	687a      	ldr	r2, [r7, #4]
1004be0c:	0011      	movs	r1, r2
1004be0e:	0018      	movs	r0, r3
1004be10:	f000 fbf6 	bl	1004c600 <_remove_timer_in_queue>
1004be14:	0003      	movs	r3, r0
1004be16:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
1004be18:	210f      	movs	r1, #15
1004be1a:	187b      	adds	r3, r7, r1
1004be1c:	2200      	movs	r2, #0
1004be1e:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
1004be20:	687b      	ldr	r3, [r7, #4]
1004be22:	2200      	movs	r2, #0
1004be24:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004be26:	4b20      	ldr	r3, [pc, #128]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be28:	228c      	movs	r2, #140	@ 0x8c
1004be2a:	589b      	ldr	r3, [r3, r2]
1004be2c:	69fa      	ldr	r2, [r7, #28]
1004be2e:	429a      	cmp	r2, r3
1004be30:	d031      	beq.n	1004be96 <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
1004be32:	000c      	movs	r4, r1
1004be34:	187a      	adds	r2, r7, r1
1004be36:	69fb      	ldr	r3, [r7, #28]
1004be38:	0011      	movs	r1, r2
1004be3a:	0018      	movs	r0, r3
1004be3c:	f000 fafc 	bl	1004c438 <_update_user_timeout>
1004be40:	0002      	movs	r2, r0
1004be42:	4b19      	ldr	r3, [pc, #100]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be44:	218c      	movs	r1, #140	@ 0x8c
1004be46:	505a      	str	r2, [r3, r1]
    if (expired)
1004be48:	193b      	adds	r3, r7, r4
1004be4a:	781b      	ldrb	r3, [r3, #0]
1004be4c:	2b00      	cmp	r3, #0
1004be4e:	d026      	beq.n	1004be9e <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004be50:	f3ef 8310 	mrs	r3, PRIMASK
1004be54:	617b      	str	r3, [r7, #20]
  return(result);
1004be56:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004be58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004be5a:	b672      	cpsid	i
}
1004be5c:	46c0      	nop			@ (mov r8, r8)
1004be5e:	4b12      	ldr	r3, [pc, #72]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be60:	2291      	movs	r2, #145	@ 0x91
1004be62:	5c9b      	ldrb	r3, [r3, r2]
1004be64:	3301      	adds	r3, #1
1004be66:	4a10      	ldr	r2, [pc, #64]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be68:	2192      	movs	r1, #146	@ 0x92
1004be6a:	5c52      	ldrb	r2, [r2, r1]
1004be6c:	4293      	cmp	r3, r2
1004be6e:	d103      	bne.n	1004be78 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
1004be70:	4b0d      	ldr	r3, [pc, #52]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be72:	2291      	movs	r2, #145	@ 0x91
1004be74:	5c9b      	ldrb	r3, [r3, r2]
1004be76:	e004      	b.n	1004be82 <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
1004be78:	4b0b      	ldr	r3, [pc, #44]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be7a:	2291      	movs	r2, #145	@ 0x91
1004be7c:	5c9b      	ldrb	r3, [r3, r2]
1004be7e:	3301      	adds	r3, #1
1004be80:	b2db      	uxtb	r3, r3
1004be82:	4a09      	ldr	r2, [pc, #36]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be84:	2191      	movs	r1, #145	@ 0x91
1004be86:	5453      	strb	r3, [r2, r1]
1004be88:	69bb      	ldr	r3, [r7, #24]
1004be8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004be8c:	693b      	ldr	r3, [r7, #16]
1004be8e:	f383 8810 	msr	PRIMASK, r3
}
1004be92:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
1004be94:	e003      	b.n	1004be9e <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
1004be96:	4b04      	ldr	r3, [pc, #16]	@ (1004bea8 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004be98:	218c      	movs	r1, #140	@ 0x8c
1004be9a:	69fa      	ldr	r2, [r7, #28]
1004be9c:	505a      	str	r2, [r3, r1]
}
1004be9e:	46c0      	nop			@ (mov r8, r8)
1004bea0:	46bd      	mov	sp, r7
1004bea2:	b009      	add	sp, #36	@ 0x24
1004bea4:	bd90      	pop	{r4, r7, pc}
1004bea6:	46c0      	nop			@ (mov r8, r8)
1004bea8:	20002208 	.word	0x20002208

1004beac <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
1004beac:	b580      	push	{r7, lr}
1004beae:	b082      	sub	sp, #8
1004beb0:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004beb2:	2300      	movs	r3, #0
1004beb4:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004beb6:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004beb8:	4b13      	ldr	r3, [pc, #76]	@ (1004bf08 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004beba:	0018      	movs	r0, r3
1004bebc:	f7ff fb18 	bl	1004b4f0 <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
1004bec0:	4b12      	ldr	r3, [pc, #72]	@ (1004bf0c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004bec2:	2291      	movs	r2, #145	@ 0x91
1004bec4:	5c9b      	ldrb	r3, [r3, r2]
1004bec6:	3301      	adds	r3, #1
1004bec8:	4a10      	ldr	r2, [pc, #64]	@ (1004bf0c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004beca:	2192      	movs	r1, #146	@ 0x92
1004becc:	5c52      	ldrb	r2, [r2, r1]
1004bece:	4293      	cmp	r3, r2
1004bed0:	d103      	bne.n	1004beda <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
1004bed2:	4b0e      	ldr	r3, [pc, #56]	@ (1004bf0c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004bed4:	2291      	movs	r2, #145	@ 0x91
1004bed6:	5c9b      	ldrb	r3, [r3, r2]
1004bed8:	e004      	b.n	1004bee4 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
1004beda:	4b0c      	ldr	r3, [pc, #48]	@ (1004bf0c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004bedc:	2291      	movs	r2, #145	@ 0x91
1004bede:	5c9b      	ldrb	r3, [r3, r2]
1004bee0:	3301      	adds	r3, #1
1004bee2:	b2db      	uxtb	r3, r3
1004bee4:	4a09      	ldr	r2, [pc, #36]	@ (1004bf0c <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004bee6:	2191      	movs	r1, #145	@ 0x91
1004bee8:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004beea:	4b07      	ldr	r3, [pc, #28]	@ (1004bf08 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004beec:	0018      	movs	r0, r3
1004beee:	f7ff fb77 	bl	1004b5e0 <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
1004bef2:	4b05      	ldr	r3, [pc, #20]	@ (1004bf08 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004bef4:	0018      	movs	r0, r3
1004bef6:	f7ff fb81 	bl	1004b5fc <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004befa:	0003      	movs	r3, r0
1004befc:	607b      	str	r3, [r7, #4]
}
1004befe:	46c0      	nop			@ (mov r8, r8)
1004bf00:	46bd      	mov	sp, r7
1004bf02:	b002      	add	sp, #8
1004bf04:	bd80      	pop	{r7, pc}
1004bf06:	46c0      	nop			@ (mov r8, r8)
1004bf08:	60001800 	.word	0x60001800
1004bf0c:	20002208 	.word	0x20002208

1004bf10 <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
1004bf10:	b580      	push	{r7, lr}
1004bf12:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004bf14:	46c0      	nop			@ (mov r8, r8)
1004bf16:	4b0b      	ldr	r3, [pc, #44]	@ (1004bf44 <_calibrationProcedure+0x34>)
1004bf18:	0018      	movs	r0, r3
1004bf1a:	f7ff fbb9 	bl	1004b690 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004bf1e:	1e03      	subs	r3, r0, #0
1004bf20:	d0f9      	beq.n	1004bf16 <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004bf22:	4b08      	ldr	r3, [pc, #32]	@ (1004bf44 <_calibrationProcedure+0x34>)
1004bf24:	2117      	movs	r1, #23
1004bf26:	0018      	movs	r0, r3
1004bf28:	f7ff fb79 	bl	1004b61e <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
1004bf2c:	4b06      	ldr	r3, [pc, #24]	@ (1004bf48 <_calibrationProcedure+0x38>)
1004bf2e:	0018      	movs	r0, r3
1004bf30:	f000 f81e 	bl	1004bf70 <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
1004bf34:	4b05      	ldr	r3, [pc, #20]	@ (1004bf4c <_calibrationProcedure+0x3c>)
1004bf36:	69da      	ldr	r2, [r3, #28]
1004bf38:	4b04      	ldr	r3, [pc, #16]	@ (1004bf4c <_calibrationProcedure+0x3c>)
1004bf3a:	621a      	str	r2, [r3, #32]

}
1004bf3c:	46c0      	nop			@ (mov r8, r8)
1004bf3e:	46bd      	mov	sp, r7
1004bf40:	bd80      	pop	{r7, pc}
1004bf42:	46c0      	nop			@ (mov r8, r8)
1004bf44:	60001000 	.word	0x60001000
1004bf48:	20002218 	.word	0x20002218
1004bf4c:	20002208 	.word	0x20002208

1004bf50 <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
1004bf50:	b580      	push	{r7, lr}
1004bf52:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
1004bf54:	4b05      	ldr	r3, [pc, #20]	@ (1004bf6c <_timer_start_calibration+0x1c>)
1004bf56:	0018      	movs	r0, r3
1004bf58:	f7ff fb8c 	bl	1004b674 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
1004bf5c:	4b03      	ldr	r3, [pc, #12]	@ (1004bf6c <_timer_start_calibration+0x1c>)
1004bf5e:	0018      	movs	r0, r3
1004bf60:	f7ff fb69 	bl	1004b636 <LL_RADIO_TIMER_StartLSICalibration>
}
1004bf64:	46c0      	nop			@ (mov r8, r8)
1004bf66:	46bd      	mov	sp, r7
1004bf68:	bd80      	pop	{r7, pc}
1004bf6a:	46c0      	nop			@ (mov r8, r8)
1004bf6c:	60001000 	.word	0x60001000

1004bf70 <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
1004bf70:	b580      	push	{r7, lr}
1004bf72:	b082      	sub	sp, #8
1004bf74:	af00      	add	r7, sp, #0
1004bf76:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
1004bf78:	f7ff ffea 	bl	1004bf50 <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004bf7c:	46c0      	nop			@ (mov r8, r8)
1004bf7e:	4b07      	ldr	r3, [pc, #28]	@ (1004bf9c <_timer_calibrate+0x2c>)
1004bf80:	0018      	movs	r0, r3
1004bf82:	f7ff fb85 	bl	1004b690 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004bf86:	1e03      	subs	r3, r0, #0
1004bf88:	d0f9      	beq.n	1004bf7e <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
1004bf8a:	687b      	ldr	r3, [r7, #4]
1004bf8c:	0018      	movs	r0, r3
1004bf8e:	f000 f807 	bl	1004bfa0 <_get_calibration_data>
}
1004bf92:	46c0      	nop			@ (mov r8, r8)
1004bf94:	46bd      	mov	sp, r7
1004bf96:	b002      	add	sp, #8
1004bf98:	bd80      	pop	{r7, pc}
1004bf9a:	46c0      	nop			@ (mov r8, r8)
1004bf9c:	60001000 	.word	0x60001000

1004bfa0 <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
1004bfa0:	b580      	push	{r7, lr}
1004bfa2:	b08a      	sub	sp, #40	@ 0x28
1004bfa4:	af00      	add	r7, sp, #0
1004bfa6:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004bfa8:	4b2e      	ldr	r3, [pc, #184]	@ (1004c064 <_get_calibration_data+0xc4>)
1004bfaa:	0018      	movs	r0, r3
1004bfac:	f7ff fb4e 	bl	1004b64c <LL_RADIO_TIMER_GetLSIPeriod>
1004bfb0:	0003      	movs	r3, r0
1004bfb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004bfb4:	e005      	b.n	1004bfc2 <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004bfb6:	4b2b      	ldr	r3, [pc, #172]	@ (1004c064 <_get_calibration_data+0xc4>)
1004bfb8:	0018      	movs	r0, r3
1004bfba:	f7ff fb47 	bl	1004b64c <LL_RADIO_TIMER_GetLSIPeriod>
1004bfbe:	0003      	movs	r3, r0
1004bfc0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004bfc2:	4b28      	ldr	r3, [pc, #160]	@ (1004c064 <_get_calibration_data+0xc4>)
1004bfc4:	0018      	movs	r0, r3
1004bfc6:	f7ff fb41 	bl	1004b64c <LL_RADIO_TIMER_GetLSIPeriod>
1004bfca:	0002      	movs	r2, r0
1004bfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bfce:	429a      	cmp	r2, r3
1004bfd0:	d1f1      	bne.n	1004bfb6 <_get_calibration_data+0x16>
1004bfd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bfd4:	2b00      	cmp	r3, #0
1004bfd6:	d0ee      	beq.n	1004bfb6 <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
1004bfd8:	4b23      	ldr	r3, [pc, #140]	@ (1004c068 <_get_calibration_data+0xc8>)
1004bfda:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004bfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bfde:	121b      	asrs	r3, r3, #8
1004bfe0:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
1004bfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bfe4:	22ff      	movs	r2, #255	@ 0xff
1004bfe6:	4013      	ands	r3, r2
1004bfe8:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004bfea:	69fb      	ldr	r3, [r7, #28]
1004bfec:	69ba      	ldr	r2, [r7, #24]
1004bfee:	435a      	muls	r2, r3
1004bff0:	697b      	ldr	r3, [r7, #20]
1004bff2:	69f9      	ldr	r1, [r7, #28]
1004bff4:	434b      	muls	r3, r1
1004bff6:	121b      	asrs	r3, r3, #8
1004bff8:	18d3      	adds	r3, r2, r3
1004bffa:	3310      	adds	r3, #16
1004bffc:	115a      	asrs	r2, r3, #5
1004bffe:	687b      	ldr	r3, [r7, #4]
1004c000:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004c002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004c004:	687b      	ldr	r3, [r7, #4]
1004c006:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
1004c008:	4b18      	ldr	r3, [pc, #96]	@ (1004c06c <_get_calibration_data+0xcc>)
1004c00a:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004c00c:	4b15      	ldr	r3, [pc, #84]	@ (1004c064 <_get_calibration_data+0xc4>)
1004c00e:	0018      	movs	r0, r3
1004c010:	f7ff fb26 	bl	1004b660 <LL_RADIO_TIMER_GetLSIFrequency>
1004c014:	0003      	movs	r3, r0
1004c016:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004c018:	e005      	b.n	1004c026 <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004c01a:	4b12      	ldr	r3, [pc, #72]	@ (1004c064 <_get_calibration_data+0xc4>)
1004c01c:	0018      	movs	r0, r3
1004c01e:	f7ff fb1f 	bl	1004b660 <LL_RADIO_TIMER_GetLSIFrequency>
1004c022:	0003      	movs	r3, r0
1004c024:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004c026:	4b0f      	ldr	r3, [pc, #60]	@ (1004c064 <_get_calibration_data+0xc4>)
1004c028:	0018      	movs	r0, r3
1004c02a:	f7ff fb19 	bl	1004b660 <LL_RADIO_TIMER_GetLSIFrequency>
1004c02e:	0002      	movs	r2, r0
1004c030:	6a3b      	ldr	r3, [r7, #32]
1004c032:	429a      	cmp	r2, r3
1004c034:	d1f1      	bne.n	1004c01a <_get_calibration_data+0x7a>
1004c036:	6a3b      	ldr	r3, [r7, #32]
1004c038:	2b00      	cmp	r3, #0
1004c03a:	d0ee      	beq.n	1004c01a <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004c03c:	6a3b      	ldr	r3, [r7, #32]
1004c03e:	119b      	asrs	r3, r3, #6
1004c040:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004c042:	68fb      	ldr	r3, [r7, #12]
1004c044:	693a      	ldr	r2, [r7, #16]
1004c046:	4353      	muls	r3, r2
1004c048:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004c04a:	68bb      	ldr	r3, [r7, #8]
1004c04c:	3380      	adds	r3, #128	@ 0x80
1004c04e:	121a      	asrs	r2, r3, #8
1004c050:	687b      	ldr	r3, [r7, #4]
1004c052:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
1004c054:	6a3a      	ldr	r2, [r7, #32]
1004c056:	687b      	ldr	r3, [r7, #4]
1004c058:	605a      	str	r2, [r3, #4]
}
1004c05a:	46c0      	nop			@ (mov r8, r8)
1004c05c:	46bd      	mov	sp, r7
1004c05e:	b00a      	add	sp, #40	@ 0x28
1004c060:	bd80      	pop	{r7, pc}
1004c062:	46c0      	nop			@ (mov r8, r8)
1004c064:	60001000 	.word	0x60001000
1004c068:	0008bcf6 	.word	0x0008bcf6
1004c06c:	00000753 	.word	0x00000753

1004c070 <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
1004c070:	b590      	push	{r4, r7, lr}
1004c072:	b085      	sub	sp, #20
1004c074:	af00      	add	r7, sp, #0
1004c076:	6078      	str	r0, [r7, #4]
1004c078:	000a      	movs	r2, r1
1004c07a:	1cfb      	adds	r3, r7, #3
1004c07c:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
1004c07e:	4b38      	ldr	r3, [pc, #224]	@ (1004c160 <_configureTxRxDelay+0xf0>)
1004c080:	7b9b      	ldrb	r3, [r3, #14]
1004c082:	b2db      	uxtb	r3, r3
1004c084:	2b00      	cmp	r3, #0
1004c086:	da00      	bge.n	1004c08a <_configureTxRxDelay+0x1a>
1004c088:	3307      	adds	r3, #7
1004c08a:	10db      	asrs	r3, r3, #3
1004c08c:	b2da      	uxtb	r2, r3
1004c08e:	240f      	movs	r4, #15
1004c090:	193b      	adds	r3, r7, r4
1004c092:	3201      	adds	r2, #1
1004c094:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004c096:	687b      	ldr	r3, [r7, #4]
1004c098:	699b      	ldr	r3, [r3, #24]
1004c09a:	0019      	movs	r1, r3
1004c09c:	4b31      	ldr	r3, [pc, #196]	@ (1004c164 <_configureTxRxDelay+0xf4>)
1004c09e:	001a      	movs	r2, r3
1004c0a0:	201b      	movs	r0, #27
1004c0a2:	f7f4 f80d 	bl	100400c0 <blue_unit_conversion>
1004c0a6:	0002      	movs	r2, r0
1004c0a8:	4b2d      	ldr	r3, [pc, #180]	@ (1004c160 <_configureTxRxDelay+0xf0>)
1004c0aa:	b2d2      	uxtb	r2, r2
1004c0ac:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
1004c0ae:	4b2c      	ldr	r3, [pc, #176]	@ (1004c160 <_configureTxRxDelay+0xf0>)
1004c0b0:	799b      	ldrb	r3, [r3, #6]
1004c0b2:	b2db      	uxtb	r3, r3
1004c0b4:	0018      	movs	r0, r3
1004c0b6:	f000 f86d 	bl	1004c194 <_us_to_machinetime>
1004c0ba:	0003      	movs	r3, r0
1004c0bc:	b2d9      	uxtb	r1, r3
1004c0be:	687b      	ldr	r3, [r7, #4]
1004c0c0:	223d      	movs	r2, #61	@ 0x3d
1004c0c2:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004c0c4:	4b26      	ldr	r3, [pc, #152]	@ (1004c160 <_configureTxRxDelay+0xf0>)
1004c0c6:	7a1b      	ldrb	r3, [r3, #8]
1004c0c8:	b2db      	uxtb	r3, r3
1004c0ca:	001a      	movs	r2, r3
1004c0cc:	193b      	adds	r3, r7, r4
1004c0ce:	781b      	ldrb	r3, [r3, #0]
1004c0d0:	18d3      	adds	r3, r2, r3
1004c0d2:	0018      	movs	r0, r3
1004c0d4:	f000 f85e 	bl	1004c194 <_us_to_machinetime>
1004c0d8:	0003      	movs	r3, r0
1004c0da:	b2d9      	uxtb	r1, r3
1004c0dc:	687b      	ldr	r3, [r7, #4]
1004c0de:	2238      	movs	r2, #56	@ 0x38
1004c0e0:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004c0e2:	4b1f      	ldr	r3, [pc, #124]	@ (1004c160 <_configureTxRxDelay+0xf0>)
1004c0e4:	7a5b      	ldrb	r3, [r3, #9]
1004c0e6:	b2db      	uxtb	r3, r3
1004c0e8:	001a      	movs	r2, r3
1004c0ea:	193b      	adds	r3, r7, r4
1004c0ec:	781b      	ldrb	r3, [r3, #0]
1004c0ee:	18d3      	adds	r3, r2, r3
1004c0f0:	0018      	movs	r0, r3
1004c0f2:	f000 f84f 	bl	1004c194 <_us_to_machinetime>
1004c0f6:	0003      	movs	r3, r0
1004c0f8:	b2d9      	uxtb	r1, r3
1004c0fa:	687b      	ldr	r3, [r7, #4]
1004c0fc:	2239      	movs	r2, #57	@ 0x39
1004c0fe:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
1004c100:	4b17      	ldr	r3, [pc, #92]	@ (1004c160 <_configureTxRxDelay+0xf0>)
1004c102:	7a9b      	ldrb	r3, [r3, #10]
1004c104:	b2db      	uxtb	r3, r3
1004c106:	0018      	movs	r0, r3
1004c108:	f000 f844 	bl	1004c194 <_us_to_machinetime>
1004c10c:	0003      	movs	r3, r0
1004c10e:	b2d9      	uxtb	r1, r3
1004c110:	687b      	ldr	r3, [r7, #4]
1004c112:	223a      	movs	r2, #58	@ 0x3a
1004c114:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004c116:	4b12      	ldr	r3, [pc, #72]	@ (1004c160 <_configureTxRxDelay+0xf0>)
1004c118:	7adb      	ldrb	r3, [r3, #11]
1004c11a:	b2db      	uxtb	r3, r3
1004c11c:	0018      	movs	r0, r3
1004c11e:	f000 f839 	bl	1004c194 <_us_to_machinetime>
1004c122:	0003      	movs	r3, r0
1004c124:	b2d9      	uxtb	r1, r3
1004c126:	687b      	ldr	r3, [r7, #4]
1004c128:	223b      	movs	r2, #59	@ 0x3b
1004c12a:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004c12c:	1cfb      	adds	r3, r7, #3
1004c12e:	781b      	ldrb	r3, [r3, #0]
1004c130:	2b00      	cmp	r3, #0
1004c132:	d010      	beq.n	1004c156 <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
1004c134:	4b0a      	ldr	r3, [pc, #40]	@ (1004c160 <_configureTxRxDelay+0xf0>)
1004c136:	7a1b      	ldrb	r3, [r3, #8]
1004c138:	b2db      	uxtb	r3, r3
1004c13a:	001a      	movs	r2, r3
1004c13c:	193b      	adds	r3, r7, r4
1004c13e:	781b      	ldrb	r3, [r3, #0]
1004c140:	18d3      	adds	r3, r2, r3
1004c142:	0018      	movs	r0, r3
1004c144:	f000 f810 	bl	1004c168 <_us_to_systime>
1004c148:	0003      	movs	r3, r0
1004c14a:	b2db      	uxtb	r3, r3
1004c14c:	331b      	adds	r3, #27
1004c14e:	b2d9      	uxtb	r1, r3
1004c150:	687b      	ldr	r3, [r7, #4]
1004c152:	223c      	movs	r2, #60	@ 0x3c
1004c154:	5499      	strb	r1, [r3, r2]
  }

}
1004c156:	46c0      	nop			@ (mov r8, r8)
1004c158:	46bd      	mov	sp, r7
1004c15a:	b005      	add	sp, #20
1004c15c:	bd90      	pop	{r4, r7, pc}
1004c15e:	46c0      	nop			@ (mov r8, r8)
1004c160:	200000c0 	.word	0x200000c0
1004c164:	00000326 	.word	0x00000326

1004c168 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
1004c168:	b580      	push	{r7, lr}
1004c16a:	b084      	sub	sp, #16
1004c16c:	af00      	add	r7, sp, #0
1004c16e:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004c170:	687b      	ldr	r3, [r7, #4]
1004c172:	2268      	movs	r2, #104	@ 0x68
1004c174:	4353      	muls	r3, r2
1004c176:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
1004c178:	687b      	ldr	r3, [r7, #4]
1004c17a:	22db      	movs	r2, #219	@ 0xdb
1004c17c:	4353      	muls	r3, r2
1004c17e:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004c180:	68fb      	ldr	r3, [r7, #12]
1004c182:	0a1a      	lsrs	r2, r3, #8
1004c184:	68bb      	ldr	r3, [r7, #8]
1004c186:	0c1b      	lsrs	r3, r3, #16
1004c188:	18d3      	adds	r3, r2, r3
}
1004c18a:	0018      	movs	r0, r3
1004c18c:	46bd      	mov	sp, r7
1004c18e:	b004      	add	sp, #16
1004c190:	bd80      	pop	{r7, pc}
	...

1004c194 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
1004c194:	b5b0      	push	{r4, r5, r7, lr}
1004c196:	b088      	sub	sp, #32
1004c198:	af00      	add	r7, sp, #0
1004c19a:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
1004c19c:	4915      	ldr	r1, [pc, #84]	@ (1004c1f4 <_us_to_machinetime+0x60>)
1004c19e:	6949      	ldr	r1, [r1, #20]
1004c1a0:	6039      	str	r1, [r7, #0]
1004c1a2:	2100      	movs	r1, #0
1004c1a4:	6079      	str	r1, [r7, #4]
1004c1a6:	68f9      	ldr	r1, [r7, #12]
1004c1a8:	000a      	movs	r2, r1
1004c1aa:	2100      	movs	r1, #0
1004c1ac:	000b      	movs	r3, r1
1004c1ae:	6838      	ldr	r0, [r7, #0]
1004c1b0:	6879      	ldr	r1, [r7, #4]
1004c1b2:	f7f4 fa43 	bl	1004063c <__aeabi_lmul>
1004c1b6:	0002      	movs	r2, r0
1004c1b8:	000b      	movs	r3, r1
1004c1ba:	0010      	movs	r0, r2
1004c1bc:	0019      	movs	r1, r3
1004c1be:	0002      	movs	r2, r0
1004c1c0:	000b      	movs	r3, r1
1004c1c2:	1892      	adds	r2, r2, r2
1004c1c4:	415b      	adcs	r3, r3
1004c1c6:	1812      	adds	r2, r2, r0
1004c1c8:	414b      	adcs	r3, r1
1004c1ca:	61ba      	str	r2, [r7, #24]
1004c1cc:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004c1ce:	69ba      	ldr	r2, [r7, #24]
1004c1d0:	69fb      	ldr	r3, [r7, #28]
1004c1d2:	2080      	movs	r0, #128	@ 0x80
1004c1d4:	04c0      	lsls	r0, r0, #19
1004c1d6:	2100      	movs	r1, #0
1004c1d8:	1812      	adds	r2, r2, r0
1004c1da:	414b      	adcs	r3, r1
1004c1dc:	0159      	lsls	r1, r3, #5
1004c1de:	0ed4      	lsrs	r4, r2, #27
1004c1e0:	430c      	orrs	r4, r1
1004c1e2:	0edd      	lsrs	r5, r3, #27
1004c1e4:	0023      	movs	r3, r4
1004c1e6:	617b      	str	r3, [r7, #20]

  return time_mt;
1004c1e8:	697b      	ldr	r3, [r7, #20]
}
1004c1ea:	0018      	movs	r0, r3
1004c1ec:	46bd      	mov	sp, r7
1004c1ee:	b008      	add	sp, #32
1004c1f0:	bdb0      	pop	{r4, r5, r7, pc}
1004c1f2:	46c0      	nop			@ (mov r8, r8)
1004c1f4:	20002208 	.word	0x20002208

1004c1f8 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
1004c1f8:	b580      	push	{r7, lr}
1004c1fa:	b084      	sub	sp, #16
1004c1fc:	af00      	add	r7, sp, #0
1004c1fe:	0002      	movs	r2, r0
1004c200:	6039      	str	r1, [r7, #0]
1004c202:	1dbb      	adds	r3, r7, #6
1004c204:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004c206:	1dbb      	adds	r3, r7, #6
1004c208:	881b      	ldrh	r3, [r3, #0]
1004c20a:	6839      	ldr	r1, [r7, #0]
1004c20c:	4a0e      	ldr	r2, [pc, #56]	@ (1004c248 <_update_xtal_startup_time+0x50>)
1004c20e:	0018      	movs	r0, r3
1004c210:	f7f3 ff56 	bl	100400c0 <blue_unit_conversion>
1004c214:	0003      	movs	r3, r0
1004c216:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
1004c218:	68fa      	ldr	r2, [r7, #12]
1004c21a:	2380      	movs	r3, #128	@ 0x80
1004c21c:	015b      	lsls	r3, r3, #5
1004c21e:	429a      	cmp	r2, r3
1004c220:	db01      	blt.n	1004c226 <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004c222:	4b0a      	ldr	r3, [pc, #40]	@ (1004c24c <_update_xtal_startup_time+0x54>)
1004c224:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
1004c226:	68fb      	ldr	r3, [r7, #12]
1004c228:	2b0f      	cmp	r3, #15
1004c22a:	dc01      	bgt.n	1004c230 <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004c22c:	2310      	movs	r3, #16
1004c22e:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
1004c230:	68fb      	ldr	r3, [r7, #12]
1004c232:	111b      	asrs	r3, r3, #4
1004c234:	b2db      	uxtb	r3, r3
1004c236:	4a06      	ldr	r2, [pc, #24]	@ (1004c250 <_update_xtal_startup_time+0x58>)
1004c238:	0019      	movs	r1, r3
1004c23a:	0010      	movs	r0, r2
1004c23c:	f7ff f968 	bl	1004b510 <LL_RADIO_TIMER_SetWakeupOffset>
}
1004c240:	46c0      	nop			@ (mov r8, r8)
1004c242:	46bd      	mov	sp, r7
1004c244:	b004      	add	sp, #16
1004c246:	bd80      	pop	{r7, pc}
1004c248:	00000326 	.word	0x00000326
1004c24c:	00000fff 	.word	0x00000fff
1004c250:	60001800 	.word	0x60001800

1004c254 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
1004c254:	b5b0      	push	{r4, r5, r7, lr}
1004c256:	b082      	sub	sp, #8
1004c258:	af00      	add	r7, sp, #0
1004c25a:	6078      	str	r0, [r7, #4]
  if(RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE)
1004c25c:	4b11      	ldr	r3, [pc, #68]	@ (1004c2a4 <_calibration_callback+0x50>)
1004c25e:	7b1b      	ldrb	r3, [r3, #12]
1004c260:	2201      	movs	r2, #1
1004c262:	4053      	eors	r3, r2
1004c264:	b2db      	uxtb	r3, r3
1004c266:	2b00      	cmp	r3, #0
1004c268:	d008      	beq.n	1004c27c <_calibration_callback+0x28>
  {
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004c26a:	4b0e      	ldr	r3, [pc, #56]	@ (1004c2a4 <_calibration_callback+0x50>)
1004c26c:	781b      	ldrb	r3, [r3, #0]
1004c26e:	2b00      	cmp	r3, #0
1004c270:	d001      	beq.n	1004c276 <_calibration_callback+0x22>
    {
      _timer_start_calibration();
1004c272:	f7ff fe6d 	bl	1004bf50 <_timer_start_calibration>
    }
    RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
1004c276:	4b0b      	ldr	r3, [pc, #44]	@ (1004c2a4 <_calibration_callback+0x50>)
1004c278:	2201      	movs	r2, #1
1004c27a:	731a      	strb	r2, [r3, #12]
  }
  _start_timer(&RADIO_TIMER_Context.calibrationTimer, HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration);
1004c27c:	f7ff fd92 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c280:	0002      	movs	r2, r0
1004c282:	000b      	movs	r3, r1
1004c284:	4907      	ldr	r1, [pc, #28]	@ (1004c2a4 <_calibration_callback+0x50>)
1004c286:	6889      	ldr	r1, [r1, #8]
1004c288:	000c      	movs	r4, r1
1004c28a:	2100      	movs	r1, #0
1004c28c:	000d      	movs	r5, r1
1004c28e:	1912      	adds	r2, r2, r4
1004c290:	416b      	adcs	r3, r5
1004c292:	4905      	ldr	r1, [pc, #20]	@ (1004c2a8 <_calibration_callback+0x54>)
1004c294:	0008      	movs	r0, r1
1004c296:	f000 f809 	bl	1004c2ac <_start_timer>
}
1004c29a:	46c0      	nop			@ (mov r8, r8)
1004c29c:	46bd      	mov	sp, r7
1004c29e:	b002      	add	sp, #8
1004c2a0:	bdb0      	pop	{r4, r5, r7, pc}
1004c2a2:	46c0      	nop			@ (mov r8, r8)
1004c2a4:	20002208 	.word	0x20002208
1004c2a8:	20002248 	.word	0x20002248

1004c2ac <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004c2ac:	b590      	push	{r4, r7, lr}
1004c2ae:	b089      	sub	sp, #36	@ 0x24
1004c2b0:	af00      	add	r7, sp, #0
1004c2b2:	60f8      	str	r0, [r7, #12]
1004c2b4:	603a      	str	r2, [r7, #0]
1004c2b6:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
1004c2b8:	2313      	movs	r3, #19
1004c2ba:	18fb      	adds	r3, r7, r3
1004c2bc:	2200      	movs	r2, #0
1004c2be:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
1004c2c0:	68fb      	ldr	r3, [r7, #12]
1004c2c2:	7b1b      	ldrb	r3, [r3, #12]
1004c2c4:	2b00      	cmp	r3, #0
1004c2c6:	d001      	beq.n	1004c2cc <_start_timer+0x20>
  {
    return 1;
1004c2c8:	2301      	movs	r3, #1
1004c2ca:	e047      	b.n	1004c35c <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
1004c2cc:	68f9      	ldr	r1, [r7, #12]
1004c2ce:	683a      	ldr	r2, [r7, #0]
1004c2d0:	687b      	ldr	r3, [r7, #4]
1004c2d2:	600a      	str	r2, [r1, #0]
1004c2d4:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004c2d6:	68fb      	ldr	r3, [r7, #12]
1004c2d8:	2201      	movs	r2, #1
1004c2da:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
1004c2dc:	4b21      	ldr	r3, [pc, #132]	@ (1004c364 <_start_timer+0xb8>)
1004c2de:	228c      	movs	r2, #140	@ 0x8c
1004c2e0:	589b      	ldr	r3, [r3, r2]
1004c2e2:	68fa      	ldr	r2, [r7, #12]
1004c2e4:	0011      	movs	r1, r2
1004c2e6:	0018      	movs	r0, r3
1004c2e8:	f000 f92e 	bl	1004c548 <_insert_timer_in_queue>
1004c2ec:	0002      	movs	r2, r0
1004c2ee:	68fb      	ldr	r3, [r7, #12]
1004c2f0:	4293      	cmp	r3, r2
1004c2f2:	d130      	bne.n	1004c356 <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004c2f4:	2413      	movs	r4, #19
1004c2f6:	193a      	adds	r2, r7, r4
1004c2f8:	68fb      	ldr	r3, [r7, #12]
1004c2fa:	0011      	movs	r1, r2
1004c2fc:	0018      	movs	r0, r3
1004c2fe:	f000 f89b 	bl	1004c438 <_update_user_timeout>
1004c302:	0002      	movs	r2, r0
1004c304:	4b17      	ldr	r3, [pc, #92]	@ (1004c364 <_start_timer+0xb8>)
1004c306:	218c      	movs	r1, #140	@ 0x8c
1004c308:	505a      	str	r2, [r3, r1]
    if (expired)
1004c30a:	193b      	adds	r3, r7, r4
1004c30c:	781b      	ldrb	r3, [r3, #0]
1004c30e:	2b00      	cmp	r3, #0
1004c310:	d021      	beq.n	1004c356 <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c312:	f3ef 8310 	mrs	r3, PRIMASK
1004c316:	61bb      	str	r3, [r7, #24]
  return(result);
1004c318:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004c31a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004c31c:	b672      	cpsid	i
}
1004c31e:	46c0      	nop			@ (mov r8, r8)
1004c320:	4b10      	ldr	r3, [pc, #64]	@ (1004c364 <_start_timer+0xb8>)
1004c322:	2291      	movs	r2, #145	@ 0x91
1004c324:	5c9b      	ldrb	r3, [r3, r2]
1004c326:	3301      	adds	r3, #1
1004c328:	4a0e      	ldr	r2, [pc, #56]	@ (1004c364 <_start_timer+0xb8>)
1004c32a:	2192      	movs	r1, #146	@ 0x92
1004c32c:	5c52      	ldrb	r2, [r2, r1]
1004c32e:	4293      	cmp	r3, r2
1004c330:	d103      	bne.n	1004c33a <_start_timer+0x8e>
1004c332:	4b0c      	ldr	r3, [pc, #48]	@ (1004c364 <_start_timer+0xb8>)
1004c334:	2291      	movs	r2, #145	@ 0x91
1004c336:	5c9b      	ldrb	r3, [r3, r2]
1004c338:	e004      	b.n	1004c344 <_start_timer+0x98>
1004c33a:	4b0a      	ldr	r3, [pc, #40]	@ (1004c364 <_start_timer+0xb8>)
1004c33c:	2291      	movs	r2, #145	@ 0x91
1004c33e:	5c9b      	ldrb	r3, [r3, r2]
1004c340:	3301      	adds	r3, #1
1004c342:	b2db      	uxtb	r3, r3
1004c344:	4a07      	ldr	r2, [pc, #28]	@ (1004c364 <_start_timer+0xb8>)
1004c346:	2191      	movs	r1, #145	@ 0x91
1004c348:	5453      	strb	r3, [r2, r1]
1004c34a:	69fb      	ldr	r3, [r7, #28]
1004c34c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c34e:	697b      	ldr	r3, [r7, #20]
1004c350:	f383 8810 	msr	PRIMASK, r3
}
1004c354:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
  #endif
  
  return expired;
1004c356:	2313      	movs	r3, #19
1004c358:	18fb      	adds	r3, r7, r3
1004c35a:	781b      	ldrb	r3, [r3, #0]
}
1004c35c:	0018      	movs	r0, r3
1004c35e:	46bd      	mov	sp, r7
1004c360:	b009      	add	sp, #36	@ 0x24
1004c362:	bd90      	pop	{r4, r7, pc}
1004c364:	20002208 	.word	0x20002208

1004c368 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
1004c368:	b5b0      	push	{r4, r5, r7, lr}
1004c36a:	b08a      	sub	sp, #40	@ 0x28
1004c36c:	af00      	add	r7, sp, #0
1004c36e:	60f8      	str	r0, [r7, #12]
1004c370:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c372:	f3ef 8310 	mrs	r3, PRIMASK
1004c376:	617b      	str	r3, [r7, #20]
  return(result);
1004c378:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004c37a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004c37c:	b672      	cpsid	i
}
1004c37e:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
1004c380:	68fb      	ldr	r3, [r7, #12]
1004c382:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004c384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004c386:	623a      	str	r2, [r7, #32]
1004c388:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004c38a:	4b29      	ldr	r3, [pc, #164]	@ (1004c430 <_get_system_time_and_machine+0xc8>)
1004c38c:	0018      	movs	r0, r3
1004c38e:	f7ff f8e6 	bl	1004b55e <LL_RADIO_TIMER_GetAbsoluteTime>
1004c392:	0002      	movs	r2, r0
1004c394:	68bb      	ldr	r3, [r7, #8]
1004c396:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
1004c398:	68bb      	ldr	r3, [r7, #8]
1004c39a:	681a      	ldr	r2, [r3, #0]
1004c39c:	68fb      	ldr	r3, [r7, #12]
1004c39e:	2180      	movs	r1, #128	@ 0x80
1004c3a0:	585b      	ldr	r3, [r3, r1]
1004c3a2:	1ad3      	subs	r3, r2, r3
1004c3a4:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
1004c3a6:	68fb      	ldr	r3, [r7, #12]
1004c3a8:	69db      	ldr	r3, [r3, #28]
1004c3aa:	0019      	movs	r1, r3
1004c3ac:	4a21      	ldr	r2, [pc, #132]	@ (1004c434 <_get_system_time_and_machine+0xcc>)
1004c3ae:	69bb      	ldr	r3, [r7, #24]
1004c3b0:	0018      	movs	r0, r3
1004c3b2:	f7f3 fe85 	bl	100400c0 <blue_unit_conversion>
1004c3b6:	0003      	movs	r3, r0
1004c3b8:	603b      	str	r3, [r7, #0]
1004c3ba:	2300      	movs	r3, #0
1004c3bc:	607b      	str	r3, [r7, #4]
1004c3be:	6a3a      	ldr	r2, [r7, #32]
1004c3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c3c2:	6838      	ldr	r0, [r7, #0]
1004c3c4:	6879      	ldr	r1, [r7, #4]
1004c3c6:	1812      	adds	r2, r2, r0
1004c3c8:	414b      	adcs	r3, r1
1004c3ca:	623a      	str	r2, [r7, #32]
1004c3cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
1004c3ce:	68fb      	ldr	r3, [r7, #12]
1004c3d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004c3d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004c3d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004c3d6:	4299      	cmp	r1, r3
1004c3d8:	d305      	bcc.n	1004c3e6 <_get_system_time_and_machine+0x7e>
1004c3da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004c3dc:	4299      	cmp	r1, r3
1004c3de:	d115      	bne.n	1004c40c <_get_system_time_and_machine+0xa4>
1004c3e0:	6a39      	ldr	r1, [r7, #32]
1004c3e2:	4291      	cmp	r1, r2
1004c3e4:	d212      	bcs.n	1004c40c <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004c3e6:	68fb      	ldr	r3, [r7, #12]
1004c3e8:	69db      	ldr	r3, [r3, #28]
1004c3ea:	0019      	movs	r1, r3
1004c3ec:	4a11      	ldr	r2, [pc, #68]	@ (1004c434 <_get_system_time_and_machine+0xcc>)
1004c3ee:	2301      	movs	r3, #1
1004c3f0:	425b      	negs	r3, r3
1004c3f2:	0018      	movs	r0, r3
1004c3f4:	f7f3 fe64 	bl	100400c0 <blue_unit_conversion>
1004c3f8:	0003      	movs	r3, r0
1004c3fa:	001c      	movs	r4, r3
1004c3fc:	2300      	movs	r3, #0
1004c3fe:	001d      	movs	r5, r3
1004c400:	6a3a      	ldr	r2, [r7, #32]
1004c402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c404:	1912      	adds	r2, r2, r4
1004c406:	416b      	adcs	r3, r5
1004c408:	623a      	str	r2, [r7, #32]
1004c40a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004c40c:	68f9      	ldr	r1, [r7, #12]
1004c40e:	6a3a      	ldr	r2, [r7, #32]
1004c410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c412:	678a      	str	r2, [r1, #120]	@ 0x78
1004c414:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004c416:	69fb      	ldr	r3, [r7, #28]
1004c418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c41a:	693b      	ldr	r3, [r7, #16]
1004c41c:	f383 8810 	msr	PRIMASK, r3
}
1004c420:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004c422:	6a3a      	ldr	r2, [r7, #32]
1004c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004c426:	0010      	movs	r0, r2
1004c428:	0019      	movs	r1, r3
1004c42a:	46bd      	mov	sp, r7
1004c42c:	b00a      	add	sp, #40	@ 0x28
1004c42e:	bdb0      	pop	{r4, r5, r7, pc}
1004c430:	60001800 	.word	0x60001800
1004c434:	00000635 	.word	0x00000635

1004c438 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
1004c438:	b5b0      	push	{r4, r5, r7, lr}
1004c43a:	b08a      	sub	sp, #40	@ 0x28
1004c43c:	af00      	add	r7, sp, #0
1004c43e:	6078      	str	r0, [r7, #4]
1004c440:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004c442:	687b      	ldr	r3, [r7, #4]
1004c444:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004c446:	687b      	ldr	r3, [r7, #4]
1004c448:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004c44a:	683b      	ldr	r3, [r7, #0]
1004c44c:	2200      	movs	r2, #0
1004c44e:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
1004c450:	e033      	b.n	1004c4ba <_update_user_timeout+0x82>
  {
    if (curr->active)
1004c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c454:	7b1b      	ldrb	r3, [r3, #12]
1004c456:	2b00      	cmp	r3, #0
1004c458:	d02c      	beq.n	1004c4b4 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c45a:	f3ef 8310 	mrs	r3, PRIMASK
1004c45e:	60fb      	str	r3, [r7, #12]
  return(result);
1004c460:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004c462:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004c464:	b672      	cpsid	i
}
1004c466:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004c468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c46a:	681c      	ldr	r4, [r3, #0]
1004c46c:	685d      	ldr	r5, [r3, #4]
1004c46e:	f7ff fc99 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c472:	0002      	movs	r2, r0
1004c474:	000b      	movs	r3, r1
1004c476:	1aa4      	subs	r4, r4, r2
1004c478:	419d      	sbcs	r5, r3
1004c47a:	0022      	movs	r2, r4
1004c47c:	002b      	movs	r3, r5
1004c47e:	613a      	str	r2, [r7, #16]
1004c480:	617b      	str	r3, [r7, #20]
      if (delay > 0)
1004c482:	697b      	ldr	r3, [r7, #20]
1004c484:	2b00      	cmp	r3, #0
1004c486:	dc05      	bgt.n	1004c494 <_update_user_timeout+0x5c>
1004c488:	697b      	ldr	r3, [r7, #20]
1004c48a:	2b00      	cmp	r3, #0
1004c48c:	d108      	bne.n	1004c4a0 <_update_user_timeout+0x68>
1004c48e:	693b      	ldr	r3, [r7, #16]
1004c490:	2b00      	cmp	r3, #0
1004c492:	d005      	beq.n	1004c4a0 <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
1004c494:	693b      	ldr	r3, [r7, #16]
1004c496:	2101      	movs	r1, #1
1004c498:	0018      	movs	r0, r3
1004c49a:	f000 f81d 	bl	1004c4d8 <VTIMER_SetWakeupTime>
1004c49e:	e002      	b.n	1004c4a6 <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
1004c4a0:	683b      	ldr	r3, [r7, #0]
1004c4a2:	2201      	movs	r2, #1
1004c4a4:	701a      	strb	r2, [r3, #0]
1004c4a6:	69fb      	ldr	r3, [r7, #28]
1004c4a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c4aa:	68bb      	ldr	r3, [r7, #8]
1004c4ac:	f383 8810 	msr	PRIMASK, r3
}
1004c4b0:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
1004c4b2:	e005      	b.n	1004c4c0 <_update_user_timeout+0x88>
    }
    curr = curr->next;
1004c4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c4b6:	691b      	ldr	r3, [r3, #16]
1004c4b8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
1004c4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c4bc:	2b00      	cmp	r3, #0
1004c4be:	d1c8      	bne.n	1004c452 <_update_user_timeout+0x1a>
  }
  if (*expired)
1004c4c0:	683b      	ldr	r3, [r7, #0]
1004c4c2:	781b      	ldrb	r3, [r3, #0]
1004c4c4:	2b00      	cmp	r3, #0
1004c4c6:	d001      	beq.n	1004c4cc <_update_user_timeout+0x94>
  {
    return rootOrig;
1004c4c8:	6a3b      	ldr	r3, [r7, #32]
1004c4ca:	e000      	b.n	1004c4ce <_update_user_timeout+0x96>
  }

  return curr;
1004c4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004c4ce:	0018      	movs	r0, r3
1004c4d0:	46bd      	mov	sp, r7
1004c4d2:	b00a      	add	sp, #40	@ 0x28
1004c4d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004c4d8 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
1004c4d8:	b580      	push	{r7, lr}
1004c4da:	b084      	sub	sp, #16
1004c4dc:	af00      	add	r7, sp, #0
1004c4de:	6078      	str	r0, [r7, #4]
1004c4e0:	000a      	movs	r2, r1
1004c4e2:	1cfb      	adds	r3, r7, #3
1004c4e4:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004c4e6:	4b15      	ldr	r3, [pc, #84]	@ (1004c53c <VTIMER_SetWakeupTime+0x64>)
1004c4e8:	699b      	ldr	r3, [r3, #24]
1004c4ea:	0019      	movs	r1, r3
1004c4ec:	4a14      	ldr	r2, [pc, #80]	@ (1004c540 <VTIMER_SetWakeupTime+0x68>)
1004c4ee:	687b      	ldr	r3, [r7, #4]
1004c4f0:	0018      	movs	r0, r3
1004c4f2:	f7f3 fde5 	bl	100400c0 <blue_unit_conversion>
1004c4f6:	0003      	movs	r3, r0
1004c4f8:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004c4fa:	687b      	ldr	r3, [r7, #4]
1004c4fc:	2b20      	cmp	r3, #32
1004c4fe:	d200      	bcs.n	1004c502 <VTIMER_SetWakeupTime+0x2a>
1004c500:	2320      	movs	r3, #32
1004c502:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004c504:	4b0f      	ldr	r3, [pc, #60]	@ (1004c544 <VTIMER_SetWakeupTime+0x6c>)
1004c506:	0018      	movs	r0, r3
1004c508:	f7ff f829 	bl	1004b55e <LL_RADIO_TIMER_GetAbsoluteTime>
1004c50c:	0003      	movs	r3, r0
1004c50e:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
1004c510:	687a      	ldr	r2, [r7, #4]
1004c512:	68fb      	ldr	r3, [r7, #12]
1004c514:	18d3      	adds	r3, r2, r3
1004c516:	3308      	adds	r3, #8
1004c518:	4a0a      	ldr	r2, [pc, #40]	@ (1004c544 <VTIMER_SetWakeupTime+0x6c>)
1004c51a:	0019      	movs	r1, r3
1004c51c:	0010      	movs	r0, r2
1004c51e:	f7ff f812 	bl	1004b546 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004c522:	4b08      	ldr	r3, [pc, #32]	@ (1004c544 <VTIMER_SetWakeupTime+0x6c>)
1004c524:	0018      	movs	r0, r3
1004c526:	f7ff f824 	bl	1004b572 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004c52a:	4b06      	ldr	r3, [pc, #24]	@ (1004c544 <VTIMER_SetWakeupTime+0x6c>)
1004c52c:	0018      	movs	r0, r3
1004c52e:	f7fe ffcf 	bl	1004b4d0 <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004c532:	68fb      	ldr	r3, [r7, #12]
}
1004c534:	0018      	movs	r0, r3
1004c536:	46bd      	mov	sp, r7
1004c538:	b004      	add	sp, #16
1004c53a:	bd80      	pop	{r7, pc}
1004c53c:	20002208 	.word	0x20002208
1004c540:	00000326 	.word	0x00000326
1004c544:	60001800 	.word	0x60001800

1004c548 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004c548:	b580      	push	{r7, lr}
1004c54a:	b086      	sub	sp, #24
1004c54c:	af00      	add	r7, sp, #0
1004c54e:	6078      	str	r0, [r7, #4]
1004c550:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004c552:	687b      	ldr	r3, [r7, #4]
1004c554:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004c556:	2300      	movs	r3, #0
1004c558:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004c55a:	687b      	ldr	r3, [r7, #4]
1004c55c:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004c55e:	e004      	b.n	1004c56a <_insert_timer_in_queue+0x22>
  {
    prev = current;
1004c560:	697b      	ldr	r3, [r7, #20]
1004c562:	613b      	str	r3, [r7, #16]
    current = current->next;
1004c564:	697b      	ldr	r3, [r7, #20]
1004c566:	691b      	ldr	r3, [r3, #16]
1004c568:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004c56a:	697b      	ldr	r3, [r7, #20]
1004c56c:	2b00      	cmp	r3, #0
1004c56e:	d00a      	beq.n	1004c586 <_insert_timer_in_queue+0x3e>
1004c570:	697b      	ldr	r3, [r7, #20]
1004c572:	681a      	ldr	r2, [r3, #0]
1004c574:	685b      	ldr	r3, [r3, #4]
1004c576:	6839      	ldr	r1, [r7, #0]
1004c578:	6808      	ldr	r0, [r1, #0]
1004c57a:	6849      	ldr	r1, [r1, #4]
1004c57c:	4299      	cmp	r1, r3
1004c57e:	d8ef      	bhi.n	1004c560 <_insert_timer_in_queue+0x18>
1004c580:	d101      	bne.n	1004c586 <_insert_timer_in_queue+0x3e>
1004c582:	4290      	cmp	r0, r2
1004c584:	d8ec      	bhi.n	1004c560 <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004c586:	683b      	ldr	r3, [r7, #0]
1004c588:	697a      	ldr	r2, [r7, #20]
1004c58a:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004c58c:	693b      	ldr	r3, [r7, #16]
1004c58e:	2b00      	cmp	r3, #0
1004c590:	d102      	bne.n	1004c598 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004c592:	683b      	ldr	r3, [r7, #0]
1004c594:	60fb      	str	r3, [r7, #12]
1004c596:	e002      	b.n	1004c59e <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
1004c598:	693b      	ldr	r3, [r7, #16]
1004c59a:	683a      	ldr	r2, [r7, #0]
1004c59c:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004c59e:	68fb      	ldr	r3, [r7, #12]
}
1004c5a0:	0018      	movs	r0, r3
1004c5a2:	46bd      	mov	sp, r7
1004c5a4:	b006      	add	sp, #24
1004c5a6:	bd80      	pop	{r7, pc}

1004c5a8 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
1004c5a8:	b580      	push	{r7, lr}
1004c5aa:	b082      	sub	sp, #8
1004c5ac:	af00      	add	r7, sp, #0
1004c5ae:	0002      	movs	r2, r0
1004c5b0:	1dfb      	adds	r3, r7, #7
1004c5b2:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
1004c5b4:	1dfb      	adds	r3, r7, #7
1004c5b6:	781b      	ldrb	r3, [r3, #0]
1004c5b8:	2b00      	cmp	r3, #0
1004c5ba:	d010      	beq.n	1004c5de <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004c5bc:	4b0e      	ldr	r3, [pc, #56]	@ (1004c5f8 <_virtualTimeBaseEnable+0x50>)
1004c5be:	2290      	movs	r2, #144	@ 0x90
1004c5c0:	5c9b      	ldrb	r3, [r3, r2]
1004c5c2:	2201      	movs	r2, #1
1004c5c4:	4053      	eors	r3, r2
1004c5c6:	b2db      	uxtb	r3, r3
1004c5c8:	2b00      	cmp	r3, #0
1004c5ca:	d010      	beq.n	1004c5ee <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004c5cc:	4b0b      	ldr	r3, [pc, #44]	@ (1004c5fc <_virtualTimeBaseEnable+0x54>)
1004c5ce:	0018      	movs	r0, r3
1004c5d0:	f7ff fe40 	bl	1004c254 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004c5d4:	4b08      	ldr	r3, [pc, #32]	@ (1004c5f8 <_virtualTimeBaseEnable+0x50>)
1004c5d6:	2290      	movs	r2, #144	@ 0x90
1004c5d8:	2101      	movs	r1, #1
1004c5da:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
1004c5dc:	e007      	b.n	1004c5ee <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004c5de:	4b07      	ldr	r3, [pc, #28]	@ (1004c5fc <_virtualTimeBaseEnable+0x54>)
1004c5e0:	0018      	movs	r0, r3
1004c5e2:	f7ff fc0b 	bl	1004bdfc <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004c5e6:	4b04      	ldr	r3, [pc, #16]	@ (1004c5f8 <_virtualTimeBaseEnable+0x50>)
1004c5e8:	2290      	movs	r2, #144	@ 0x90
1004c5ea:	2100      	movs	r1, #0
1004c5ec:	5499      	strb	r1, [r3, r2]
}
1004c5ee:	46c0      	nop			@ (mov r8, r8)
1004c5f0:	46bd      	mov	sp, r7
1004c5f2:	b002      	add	sp, #8
1004c5f4:	bd80      	pop	{r7, pc}
1004c5f6:	46c0      	nop			@ (mov r8, r8)
1004c5f8:	20002208 	.word	0x20002208
1004c5fc:	20002248 	.word	0x20002248

1004c600 <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004c600:	b580      	push	{r7, lr}
1004c602:	b086      	sub	sp, #24
1004c604:	af00      	add	r7, sp, #0
1004c606:	6078      	str	r0, [r7, #4]
1004c608:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004c60a:	687b      	ldr	r3, [r7, #4]
1004c60c:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004c60e:	2300      	movs	r3, #0
1004c610:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004c612:	687b      	ldr	r3, [r7, #4]
1004c614:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004c616:	e004      	b.n	1004c622 <_remove_timer_in_queue+0x22>
  {
    prev = current;
1004c618:	697b      	ldr	r3, [r7, #20]
1004c61a:	613b      	str	r3, [r7, #16]
    current = current->next;
1004c61c:	697b      	ldr	r3, [r7, #20]
1004c61e:	691b      	ldr	r3, [r3, #16]
1004c620:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004c622:	697b      	ldr	r3, [r7, #20]
1004c624:	2b00      	cmp	r3, #0
1004c626:	d003      	beq.n	1004c630 <_remove_timer_in_queue+0x30>
1004c628:	697a      	ldr	r2, [r7, #20]
1004c62a:	683b      	ldr	r3, [r7, #0]
1004c62c:	429a      	cmp	r2, r3
1004c62e:	d1f3      	bne.n	1004c618 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
1004c630:	697b      	ldr	r3, [r7, #20]
1004c632:	2b00      	cmp	r3, #0
1004c634:	d00b      	beq.n	1004c64e <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004c636:	697a      	ldr	r2, [r7, #20]
1004c638:	687b      	ldr	r3, [r7, #4]
1004c63a:	429a      	cmp	r2, r3
1004c63c:	d103      	bne.n	1004c646 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004c63e:	697b      	ldr	r3, [r7, #20]
1004c640:	691b      	ldr	r3, [r3, #16]
1004c642:	60fb      	str	r3, [r7, #12]
1004c644:	e003      	b.n	1004c64e <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004c646:	697b      	ldr	r3, [r7, #20]
1004c648:	691a      	ldr	r2, [r3, #16]
1004c64a:	693b      	ldr	r3, [r7, #16]
1004c64c:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004c64e:	68fb      	ldr	r3, [r7, #12]
}
1004c650:	0018      	movs	r0, r3
1004c652:	46bd      	mov	sp, r7
1004c654:	b006      	add	sp, #24
1004c656:	bd80      	pop	{r7, pc}

1004c658 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
1004c658:	b5b0      	push	{r4, r5, r7, lr}
1004c65a:	b088      	sub	sp, #32
1004c65c:	af00      	add	r7, sp, #0
1004c65e:	6078      	str	r0, [r7, #4]
1004c660:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004c662:	687b      	ldr	r3, [r7, #4]
1004c664:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004c666:	2300      	movs	r3, #0
1004c668:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004c66a:	687b      	ldr	r3, [r7, #4]
1004c66c:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004c66e:	683b      	ldr	r3, [r7, #0]
1004c670:	687a      	ldr	r2, [r7, #4]
1004c672:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004c674:	2300      	movs	r3, #0
1004c676:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
1004c678:	e021      	b.n	1004c6be <_check_callbacks+0x66>
  {

    if (curr->active)
1004c67a:	69fb      	ldr	r3, [r7, #28]
1004c67c:	7b1b      	ldrb	r3, [r3, #12]
1004c67e:	2b00      	cmp	r3, #0
1004c680:	d015      	beq.n	1004c6ae <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004c682:	69fb      	ldr	r3, [r7, #28]
1004c684:	681c      	ldr	r4, [r3, #0]
1004c686:	685d      	ldr	r5, [r3, #4]
1004c688:	f7ff fb8c 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c68c:	0002      	movs	r2, r0
1004c68e:	000b      	movs	r3, r1
1004c690:	1aa4      	subs	r4, r4, r2
1004c692:	419d      	sbcs	r5, r3
1004c694:	0022      	movs	r2, r4
1004c696:	002b      	movs	r3, r5
1004c698:	60ba      	str	r2, [r7, #8]
1004c69a:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
1004c69c:	68fb      	ldr	r3, [r7, #12]
1004c69e:	2b00      	cmp	r3, #0
1004c6a0:	dc11      	bgt.n	1004c6c6 <_check_callbacks+0x6e>
1004c6a2:	68fb      	ldr	r3, [r7, #12]
1004c6a4:	2b00      	cmp	r3, #0
1004c6a6:	d102      	bne.n	1004c6ae <_check_callbacks+0x56>
1004c6a8:	68bb      	ldr	r3, [r7, #8]
1004c6aa:	2b05      	cmp	r3, #5
1004c6ac:	d80b      	bhi.n	1004c6c6 <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004c6ae:	69fb      	ldr	r3, [r7, #28]
1004c6b0:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004c6b2:	69fb      	ldr	r3, [r7, #28]
1004c6b4:	691b      	ldr	r3, [r3, #16]
1004c6b6:	61fb      	str	r3, [r7, #28]
    expiredCount++;
1004c6b8:	693b      	ldr	r3, [r7, #16]
1004c6ba:	3301      	adds	r3, #1
1004c6bc:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004c6be:	69fb      	ldr	r3, [r7, #28]
1004c6c0:	2b00      	cmp	r3, #0
1004c6c2:	d1da      	bne.n	1004c67a <_check_callbacks+0x22>
1004c6c4:	e000      	b.n	1004c6c8 <_check_callbacks+0x70>
        break;
1004c6c6:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
1004c6c8:	693b      	ldr	r3, [r7, #16]
1004c6ca:	2b00      	cmp	r3, #0
1004c6cc:	d005      	beq.n	1004c6da <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004c6ce:	69bb      	ldr	r3, [r7, #24]
1004c6d0:	2200      	movs	r2, #0
1004c6d2:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004c6d4:	69fb      	ldr	r3, [r7, #28]
1004c6d6:	617b      	str	r3, [r7, #20]
1004c6d8:	e002      	b.n	1004c6e0 <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
1004c6da:	683b      	ldr	r3, [r7, #0]
1004c6dc:	2200      	movs	r2, #0
1004c6de:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
1004c6e0:	697b      	ldr	r3, [r7, #20]
}
1004c6e2:	0018      	movs	r0, r3
1004c6e4:	46bd      	mov	sp, r7
1004c6e6:	b008      	add	sp, #32
1004c6e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004c6ec <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
1004c6ec:	b580      	push	{r7, lr}
1004c6ee:	b090      	sub	sp, #64	@ 0x40
1004c6f0:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004c6f2:	4b28      	ldr	r3, [pc, #160]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c6f4:	781b      	ldrb	r3, [r3, #0]
1004c6f6:	2b00      	cmp	r3, #0
1004c6f8:	d037      	beq.n	1004c76a <_updateCalibrationData+0x7e>
  {

    CalibrationDataTypeDef updatedCalibrationData;
    _get_calibration_data(&updatedCalibrationData);
1004c6fa:	003b      	movs	r3, r7
1004c6fc:	0018      	movs	r0, r3
1004c6fe:	f7ff fc4f 	bl	1004bfa0 <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, updatedCalibrationData.freq1);
1004c702:	4b24      	ldr	r3, [pc, #144]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004c706:	b29a      	uxth	r2, r3
1004c708:	003b      	movs	r3, r7
1004c70a:	689b      	ldr	r3, [r3, #8]
1004c70c:	0019      	movs	r1, r3
1004c70e:	0010      	movs	r0, r2
1004c710:	f7ff fd72 	bl	1004c1f8 <_update_xtal_startup_time>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c714:	f3ef 8310 	mrs	r3, PRIMASK
1004c718:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
1004c71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    
    ATOMIC_SECTION_BEGIN();
1004c71c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004c71e:	b672      	cpsid	i
}
1004c720:	46c0      	nop			@ (mov r8, r8)
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004c722:	4b1c      	ldr	r3, [pc, #112]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c724:	2234      	movs	r2, #52	@ 0x34
1004c726:	2101      	movs	r1, #1
1004c728:	5499      	strb	r1, [r3, r2]
    RADIO_TIMER_Context.calibrationData.freq = updatedCalibrationData.freq;
1004c72a:	003b      	movs	r3, r7
1004c72c:	685a      	ldr	r2, [r3, #4]
1004c72e:	4b19      	ldr	r3, [pc, #100]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c730:	615a      	str	r2, [r3, #20]
    RADIO_TIMER_Context.calibrationData.freq1 = updatedCalibrationData.freq1;
1004c732:	003b      	movs	r3, r7
1004c734:	689a      	ldr	r2, [r3, #8]
1004c736:	4b17      	ldr	r3, [pc, #92]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c738:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = updatedCalibrationData.period;
1004c73a:	003b      	movs	r3, r7
1004c73c:	681a      	ldr	r2, [r3, #0]
1004c73e:	4b15      	ldr	r3, [pc, #84]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c740:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.period1 = updatedCalibrationData.period1;
1004c742:	003b      	movs	r3, r7
1004c744:	68da      	ldr	r2, [r3, #12]
1004c746:	4b13      	ldr	r3, [pc, #76]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c748:	61da      	str	r2, [r3, #28]
    _update_system_time(&RADIO_TIMER_Context);
1004c74a:	4b12      	ldr	r3, [pc, #72]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c74c:	0018      	movs	r0, r3
1004c74e:	f000 f823 	bl	1004c798 <_update_system_time>
1004c752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004c754:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004c758:	f383 8810 	msr	PRIMASK, r3
}
1004c75c:	46c0      	nop			@ (mov r8, r8)
    ATOMIC_SECTION_END();

    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004c75e:	4b0d      	ldr	r3, [pc, #52]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c760:	2100      	movs	r1, #0
1004c762:	0018      	movs	r0, r3
1004c764:	f7ff fc84 	bl	1004c070 <_configureTxRxDelay>
  {
  ATOMIC_SECTION_BEGIN();
  _update_system_time(&RADIO_TIMER_Context);
  ATOMIC_SECTION_END();
  }
}
1004c768:	e010      	b.n	1004c78c <_updateCalibrationData+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c76a:	f3ef 8310 	mrs	r3, PRIMASK
1004c76e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
1004c770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  ATOMIC_SECTION_BEGIN();
1004c772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
1004c774:	b672      	cpsid	i
}
1004c776:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004c778:	4b06      	ldr	r3, [pc, #24]	@ (1004c794 <_updateCalibrationData+0xa8>)
1004c77a:	0018      	movs	r0, r3
1004c77c:	f000 f80c 	bl	1004c798 <_update_system_time>
1004c780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004c782:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004c786:	f383 8810 	msr	PRIMASK, r3
}
1004c78a:	46c0      	nop			@ (mov r8, r8)
}
1004c78c:	46c0      	nop			@ (mov r8, r8)
1004c78e:	46bd      	mov	sp, r7
1004c790:	b010      	add	sp, #64	@ 0x40
1004c792:	bd80      	pop	{r7, pc}
1004c794:	20002208 	.word	0x20002208

1004c798 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
1004c798:	b5b0      	push	{r4, r5, r7, lr}
1004c79a:	b088      	sub	sp, #32
1004c79c:	af00      	add	r7, sp, #0
1004c79e:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004c7a0:	4b2a      	ldr	r3, [pc, #168]	@ (1004c84c <_update_system_time+0xb4>)
1004c7a2:	0018      	movs	r0, r3
1004c7a4:	f7fe fedb 	bl	1004b55e <LL_RADIO_TIMER_GetAbsoluteTime>
1004c7a8:	0003      	movs	r3, r0
1004c7aa:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004c7ac:	697b      	ldr	r3, [r7, #20]
1004c7ae:	6a1b      	ldr	r3, [r3, #32]
1004c7b0:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004c7b2:	697b      	ldr	r3, [r7, #20]
1004c7b4:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004c7b6:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
1004c7b8:	697b      	ldr	r3, [r7, #20]
1004c7ba:	2280      	movs	r2, #128	@ 0x80
1004c7bc:	589b      	ldr	r3, [r3, r2]
1004c7be:	69fa      	ldr	r2, [r7, #28]
1004c7c0:	1ad3      	subs	r3, r2, r3
1004c7c2:	4a23      	ldr	r2, [pc, #140]	@ (1004c850 <_update_system_time+0xb8>)
1004c7c4:	69b9      	ldr	r1, [r7, #24]
1004c7c6:	0018      	movs	r0, r3
1004c7c8:	f7f3 fc7a 	bl	100400c0 <blue_unit_conversion>
1004c7cc:	0003      	movs	r3, r0
1004c7ce:	60bb      	str	r3, [r7, #8]
1004c7d0:	2300      	movs	r3, #0
1004c7d2:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004c7d4:	68ba      	ldr	r2, [r7, #8]
1004c7d6:	68fb      	ldr	r3, [r7, #12]
1004c7d8:	1912      	adds	r2, r2, r4
1004c7da:	416b      	adcs	r3, r5
1004c7dc:	6979      	ldr	r1, [r7, #20]
1004c7de:	670a      	str	r2, [r1, #112]	@ 0x70
1004c7e0:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
1004c7e2:	697b      	ldr	r3, [r7, #20]
1004c7e4:	781b      	ldrb	r3, [r3, #0]
1004c7e6:	2b00      	cmp	r3, #0
1004c7e8:	d11d      	bne.n	1004c826 <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
1004c7ea:	697b      	ldr	r3, [r7, #20]
1004c7ec:	2280      	movs	r2, #128	@ 0x80
1004c7ee:	589b      	ldr	r3, [r3, r2]
1004c7f0:	69fa      	ldr	r2, [r7, #28]
1004c7f2:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
1004c7f4:	697b      	ldr	r3, [r7, #20]
1004c7f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
1004c7f8:	429a      	cmp	r2, r3
1004c7fa:	d214      	bcs.n	1004c826 <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
1004c7fc:	4a14      	ldr	r2, [pc, #80]	@ (1004c850 <_update_system_time+0xb8>)
1004c7fe:	69b9      	ldr	r1, [r7, #24]
1004c800:	2301      	movs	r3, #1
1004c802:	425b      	negs	r3, r3
1004c804:	0018      	movs	r0, r3
1004c806:	f7f3 fc5b 	bl	100400c0 <blue_unit_conversion>
1004c80a:	0001      	movs	r1, r0
1004c80c:	697b      	ldr	r3, [r7, #20]
1004c80e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004c810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004c812:	6039      	str	r1, [r7, #0]
1004c814:	2100      	movs	r1, #0
1004c816:	6079      	str	r1, [r7, #4]
1004c818:	6838      	ldr	r0, [r7, #0]
1004c81a:	6879      	ldr	r1, [r7, #4]
1004c81c:	1812      	adds	r2, r2, r0
1004c81e:	414b      	adcs	r3, r1
1004c820:	6979      	ldr	r1, [r7, #20]
1004c822:	670a      	str	r2, [r1, #112]	@ 0x70
1004c824:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004c826:	697b      	ldr	r3, [r7, #20]
1004c828:	2180      	movs	r1, #128	@ 0x80
1004c82a:	69fa      	ldr	r2, [r7, #28]
1004c82c:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004c82e:	697b      	ldr	r3, [r7, #20]
1004c830:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004c832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004c834:	6979      	ldr	r1, [r7, #20]
1004c836:	628a      	str	r2, [r1, #40]	@ 0x28
1004c838:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
1004c83a:	697b      	ldr	r3, [r7, #20]
1004c83c:	69da      	ldr	r2, [r3, #28]
1004c83e:	697b      	ldr	r3, [r7, #20]
1004c840:	621a      	str	r2, [r3, #32]
}
1004c842:	46c0      	nop			@ (mov r8, r8)
1004c844:	46bd      	mov	sp, r7
1004c846:	b008      	add	sp, #32
1004c848:	bdb0      	pop	{r4, r5, r7, pc}
1004c84a:	46c0      	nop			@ (mov r8, r8)
1004c84c:	60001800 	.word	0x60001800
1004c850:	00000635 	.word	0x00000635

1004c854 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004c854:	b5b0      	push	{r4, r5, r7, lr}
1004c856:	b08a      	sub	sp, #40	@ 0x28
1004c858:	af00      	add	r7, sp, #0
1004c85a:	6078      	str	r0, [r7, #4]
1004c85c:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004c85e:	683b      	ldr	r3, [r7, #0]
1004c860:	2200      	movs	r2, #0
1004c862:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004c864:	687b      	ldr	r3, [r7, #4]
1004c866:	7a9b      	ldrb	r3, [r3, #10]
1004c868:	2b00      	cmp	r3, #0
1004c86a:	d100      	bne.n	1004c86e <_check_radio_activity+0x1a>
1004c86c:	e070      	b.n	1004c950 <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004c86e:	4b3a      	ldr	r3, [pc, #232]	@ (1004c958 <_check_radio_activity+0x104>)
1004c870:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004c872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004c874:	4938      	ldr	r1, [pc, #224]	@ (1004c958 <_check_radio_activity+0x104>)
1004c876:	6849      	ldr	r1, [r1, #4]
1004c878:	000c      	movs	r4, r1
1004c87a:	2100      	movs	r1, #0
1004c87c:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004c87e:	1912      	adds	r2, r2, r4
1004c880:	416b      	adcs	r3, r5
1004c882:	623a      	str	r2, [r7, #32]
1004c884:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004c886:	f3ef 8310 	mrs	r3, PRIMASK
1004c88a:	60fb      	str	r3, [r7, #12]
  return(result);
1004c88c:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
1004c88e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004c890:	b672      	cpsid	i
}
1004c892:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004c894:	f7ff fa86 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004c898:	0002      	movs	r2, r0
1004c89a:	000b      	movs	r3, r1
1004c89c:	613a      	str	r2, [r7, #16]
1004c89e:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004c8a0:	687b      	ldr	r3, [r7, #4]
1004c8a2:	681a      	ldr	r2, [r3, #0]
1004c8a4:	685b      	ldr	r3, [r3, #4]
1004c8a6:	6a38      	ldr	r0, [r7, #32]
1004c8a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004c8aa:	24c8      	movs	r4, #200	@ 0xc8
1004c8ac:	02a4      	lsls	r4, r4, #10
1004c8ae:	2500      	movs	r5, #0
1004c8b0:	1900      	adds	r0, r0, r4
1004c8b2:	4169      	adcs	r1, r5
1004c8b4:	4299      	cmp	r1, r3
1004c8b6:	d812      	bhi.n	1004c8de <_check_radio_activity+0x8a>
1004c8b8:	d101      	bne.n	1004c8be <_check_radio_activity+0x6a>
1004c8ba:	4290      	cmp	r0, r2
1004c8bc:	d80f      	bhi.n	1004c8de <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004c8be:	6a3a      	ldr	r2, [r7, #32]
1004c8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004c8c2:	20b9      	movs	r0, #185	@ 0xb9
1004c8c4:	0040      	lsls	r0, r0, #1
1004c8c6:	2100      	movs	r1, #0
1004c8c8:	1812      	adds	r2, r2, r0
1004c8ca:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004c8cc:	6979      	ldr	r1, [r7, #20]
1004c8ce:	4299      	cmp	r1, r3
1004c8d0:	d805      	bhi.n	1004c8de <_check_radio_activity+0x8a>
1004c8d2:	6979      	ldr	r1, [r7, #20]
1004c8d4:	4299      	cmp	r1, r3
1004c8d6:	d135      	bne.n	1004c944 <_check_radio_activity+0xf0>
1004c8d8:	6939      	ldr	r1, [r7, #16]
1004c8da:	4291      	cmp	r1, r2
1004c8dc:	d932      	bls.n	1004c944 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004c8de:	687b      	ldr	r3, [r7, #4]
1004c8e0:	681a      	ldr	r2, [r3, #0]
1004c8e2:	685b      	ldr	r3, [r3, #4]
1004c8e4:	204c      	movs	r0, #76	@ 0x4c
1004c8e6:	4240      	negs	r0, r0
1004c8e8:	17c1      	asrs	r1, r0, #31
1004c8ea:	1880      	adds	r0, r0, r2
1004c8ec:	4159      	adcs	r1, r3
1004c8ee:	693a      	ldr	r2, [r7, #16]
1004c8f0:	697b      	ldr	r3, [r7, #20]
1004c8f2:	240a      	movs	r4, #10
1004c8f4:	2500      	movs	r5, #0
1004c8f6:	1912      	adds	r2, r2, r4
1004c8f8:	416b      	adcs	r3, r5
1004c8fa:	4299      	cmp	r1, r3
1004c8fc:	d802      	bhi.n	1004c904 <_check_radio_activity+0xb0>
1004c8fe:	d11a      	bne.n	1004c936 <_check_radio_activity+0xe2>
1004c900:	4290      	cmp	r0, r2
1004c902:	d918      	bls.n	1004c936 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
1004c904:	687b      	ldr	r3, [r7, #4]
1004c906:	681a      	ldr	r2, [r3, #0]
1004c908:	685b      	ldr	r3, [r3, #4]
1004c90a:	0010      	movs	r0, r2
1004c90c:	687b      	ldr	r3, [r7, #4]
1004c90e:	7b19      	ldrb	r1, [r3, #12]
1004c910:	687b      	ldr	r3, [r7, #4]
1004c912:	7a1b      	ldrb	r3, [r3, #8]
1004c914:	001a      	movs	r2, r3
1004c916:	f000 f821 	bl	1004c95c <TIMER_SetRadioTimerValue>
1004c91a:	0003      	movs	r3, r0
1004c91c:	001a      	movs	r2, r3
1004c91e:	683b      	ldr	r3, [r7, #0]
1004c920:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004c922:	687b      	ldr	r3, [r7, #4]
1004c924:	2200      	movs	r2, #0
1004c926:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
1004c928:	687b      	ldr	r3, [r7, #4]
1004c92a:	2201      	movs	r2, #1
1004c92c:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004c92e:	687b      	ldr	r3, [r7, #4]
1004c930:	2201      	movs	r2, #1
1004c932:	72da      	strb	r2, [r3, #11]
1004c934:	e006      	b.n	1004c944 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004c936:	4b08      	ldr	r3, [pc, #32]	@ (1004c958 <_check_radio_activity+0x104>)
1004c938:	2262      	movs	r2, #98	@ 0x62
1004c93a:	2100      	movs	r1, #0
1004c93c:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004c93e:	683b      	ldr	r3, [r7, #0]
1004c940:	2201      	movs	r2, #1
1004c942:	701a      	strb	r2, [r3, #0]
1004c944:	69fb      	ldr	r3, [r7, #28]
1004c946:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004c948:	68bb      	ldr	r3, [r7, #8]
1004c94a:	f383 8810 	msr	PRIMASK, r3
}
1004c94e:	46c0      	nop			@ (mov r8, r8)
      
    }
    ATOMIC_SECTION_END();
    
  }
}
1004c950:	46c0      	nop			@ (mov r8, r8)
1004c952:	46bd      	mov	sp, r7
1004c954:	b00a      	add	sp, #40	@ 0x28
1004c956:	bdb0      	pop	{r4, r5, r7, pc}
1004c958:	20002208 	.word	0x20002208

1004c95c <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004c95c:	b580      	push	{r7, lr}
1004c95e:	b08a      	sub	sp, #40	@ 0x28
1004c960:	af00      	add	r7, sp, #0
1004c962:	6078      	str	r0, [r7, #4]
1004c964:	0008      	movs	r0, r1
1004c966:	0011      	movs	r1, r2
1004c968:	1cfb      	adds	r3, r7, #3
1004c96a:	1c02      	adds	r2, r0, #0
1004c96c:	701a      	strb	r2, [r3, #0]
1004c96e:	1cbb      	adds	r3, r7, #2
1004c970:	1c0a      	adds	r2, r1, #0
1004c972:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004c974:	1cfb      	adds	r3, r7, #3
1004c976:	781b      	ldrb	r3, [r3, #0]
1004c978:	2b00      	cmp	r3, #0
1004c97a:	d015      	beq.n	1004c9a8 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
1004c97c:	1cbb      	adds	r3, r7, #2
1004c97e:	781b      	ldrb	r3, [r3, #0]
1004c980:	2b00      	cmp	r3, #0
1004c982:	d008      	beq.n	1004c996 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004c984:	4b67      	ldr	r3, [pc, #412]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c986:	2238      	movs	r2, #56	@ 0x38
1004c988:	5c9b      	ldrb	r3, [r3, r2]
1004c98a:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004c98c:	4b65      	ldr	r3, [pc, #404]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c98e:	223c      	movs	r2, #60	@ 0x3c
1004c990:	5c9b      	ldrb	r3, [r3, r2]
1004c992:	61fb      	str	r3, [r7, #28]
1004c994:	e01d      	b.n	1004c9d2 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004c996:	4b63      	ldr	r3, [pc, #396]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c998:	2239      	movs	r2, #57	@ 0x39
1004c99a:	5c9b      	ldrb	r3, [r3, r2]
1004c99c:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004c99e:	4b61      	ldr	r3, [pc, #388]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c9a0:	223c      	movs	r2, #60	@ 0x3c
1004c9a2:	5c9b      	ldrb	r3, [r3, r2]
1004c9a4:	61fb      	str	r3, [r7, #28]
1004c9a6:	e014      	b.n	1004c9d2 <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
1004c9a8:	1cbb      	adds	r3, r7, #2
1004c9aa:	781b      	ldrb	r3, [r3, #0]
1004c9ac:	2b00      	cmp	r3, #0
1004c9ae:	d008      	beq.n	1004c9c2 <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
1004c9b0:	4b5c      	ldr	r3, [pc, #368]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c9b2:	223a      	movs	r2, #58	@ 0x3a
1004c9b4:	5c9b      	ldrb	r3, [r3, r2]
1004c9b6:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004c9b8:	4b5a      	ldr	r3, [pc, #360]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c9ba:	223c      	movs	r2, #60	@ 0x3c
1004c9bc:	5c9b      	ldrb	r3, [r3, r2]
1004c9be:	61fb      	str	r3, [r7, #28]
1004c9c0:	e007      	b.n	1004c9d2 <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
1004c9c2:	4b58      	ldr	r3, [pc, #352]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c9c4:	223b      	movs	r2, #59	@ 0x3b
1004c9c6:	5c9b      	ldrb	r3, [r3, r2]
1004c9c8:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004c9ca:	4b56      	ldr	r3, [pc, #344]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c9cc:	223c      	movs	r2, #60	@ 0x3c
1004c9ce:	5c9b      	ldrb	r3, [r3, r2]
1004c9d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
1004c9d2:	230c      	movs	r3, #12
1004c9d4:	18fa      	adds	r2, r7, r3
1004c9d6:	4b53      	ldr	r3, [pc, #332]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c9d8:	0011      	movs	r1, r2
1004c9da:	0018      	movs	r0, r3
1004c9dc:	f7ff fcc4 	bl	1004c368 <_get_system_time_and_machine>
1004c9e0:	0002      	movs	r2, r0
1004c9e2:	000b      	movs	r3, r1
1004c9e4:	687b      	ldr	r3, [r7, #4]
1004c9e6:	1a9b      	subs	r3, r3, r2
1004c9e8:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004c9ea:	4b4e      	ldr	r3, [pc, #312]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004c9ec:	699b      	ldr	r3, [r3, #24]
1004c9ee:	0019      	movs	r1, r3
1004c9f0:	4a4d      	ldr	r2, [pc, #308]	@ (1004cb28 <TIMER_SetRadioTimerValue+0x1cc>)
1004c9f2:	697b      	ldr	r3, [r7, #20]
1004c9f4:	0018      	movs	r0, r3
1004c9f6:	f7f3 fb63 	bl	100400c0 <blue_unit_conversion>
1004c9fa:	0003      	movs	r3, r0
1004c9fc:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
1004c9fe:	4b49      	ldr	r3, [pc, #292]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004ca00:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
1004ca02:	69fb      	ldr	r3, [r7, #28]
1004ca04:	18d3      	adds	r3, r2, r3
1004ca06:	33c8      	adds	r3, #200	@ 0xc8
1004ca08:	697a      	ldr	r2, [r7, #20]
1004ca0a:	429a      	cmp	r2, r3
1004ca0c:	d92f      	bls.n	1004ca6e <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
1004ca0e:	4b47      	ldr	r3, [pc, #284]	@ (1004cb2c <TIMER_SetRadioTimerValue+0x1d0>)
1004ca10:	795b      	ldrb	r3, [r3, #5]
1004ca12:	b2db      	uxtb	r3, r3
1004ca14:	001a      	movs	r2, r3
1004ca16:	693b      	ldr	r3, [r7, #16]
1004ca18:	1a9a      	subs	r2, r3, r2
1004ca1a:	6a3b      	ldr	r3, [r7, #32]
1004ca1c:	1ad3      	subs	r3, r2, r3
1004ca1e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
1004ca20:	68fa      	ldr	r2, [r7, #12]
1004ca22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ca24:	18d3      	adds	r3, r2, r3
1004ca26:	4a42      	ldr	r2, [pc, #264]	@ (1004cb30 <TIMER_SetRadioTimerValue+0x1d4>)
1004ca28:	0019      	movs	r1, r3
1004ca2a:	0010      	movs	r0, r2
1004ca2c:	f7fe fd7f 	bl	1004b52e <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
1004ca30:	4b3f      	ldr	r3, [pc, #252]	@ (1004cb30 <TIMER_SetRadioTimerValue+0x1d4>)
1004ca32:	2100      	movs	r1, #0
1004ca34:	0018      	movs	r0, r3
1004ca36:	f7fe fdab 	bl	1004b590 <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004ca3a:	23c0      	movs	r3, #192	@ 0xc0
1004ca3c:	05db      	lsls	r3, r3, #23
1004ca3e:	0018      	movs	r0, r3
1004ca40:	f7fe fcfc 	bl	1004b43c <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004ca44:	23c0      	movs	r3, #192	@ 0xc0
1004ca46:	05db      	lsls	r3, r3, #23
1004ca48:	0018      	movs	r0, r3
1004ca4a:	f7fe fd06 	bl	1004b45a <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004ca4e:	4b38      	ldr	r3, [pc, #224]	@ (1004cb30 <TIMER_SetRadioTimerValue+0x1d4>)
1004ca50:	0018      	movs	r0, r3
1004ca52:	f7fe fd1d 	bl	1004b490 <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004ca56:	4b36      	ldr	r3, [pc, #216]	@ (1004cb30 <TIMER_SetRadioTimerValue+0x1d4>)
1004ca58:	0018      	movs	r0, r3
1004ca5a:	f7fe fd8a 	bl	1004b572 <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
1004ca5e:	4b33      	ldr	r3, [pc, #204]	@ (1004cb2c <TIMER_SetRadioTimerValue+0x1d0>)
1004ca60:	795b      	ldrb	r3, [r3, #5]
1004ca62:	b2db      	uxtb	r3, r3
1004ca64:	001a      	movs	r2, r3
1004ca66:	6a3b      	ldr	r3, [r7, #32]
1004ca68:	189b      	adds	r3, r3, r2
1004ca6a:	623b      	str	r3, [r7, #32]
1004ca6c:	e021      	b.n	1004cab2 <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
1004ca6e:	4b2d      	ldr	r3, [pc, #180]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004ca70:	223d      	movs	r2, #61	@ 0x3d
1004ca72:	5c9b      	ldrb	r3, [r3, r2]
1004ca74:	001a      	movs	r2, r3
1004ca76:	693b      	ldr	r3, [r7, #16]
1004ca78:	1a9a      	subs	r2, r3, r2
1004ca7a:	6a3b      	ldr	r3, [r7, #32]
1004ca7c:	1ad3      	subs	r3, r2, r3
1004ca7e:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
1004ca80:	68fa      	ldr	r2, [r7, #12]
1004ca82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ca84:	18d2      	adds	r2, r2, r3
1004ca86:	23c0      	movs	r3, #192	@ 0xc0
1004ca88:	05db      	lsls	r3, r3, #23
1004ca8a:	0011      	movs	r1, r2
1004ca8c:	0018      	movs	r0, r3
1004ca8e:	f7fe fcf3 	bl	1004b478 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004ca92:	4b27      	ldr	r3, [pc, #156]	@ (1004cb30 <TIMER_SetRadioTimerValue+0x1d4>)
1004ca94:	0018      	movs	r0, r3
1004ca96:	f7fe fd0b 	bl	1004b4b0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
1004ca9a:	23c0      	movs	r3, #192	@ 0xc0
1004ca9c:	05db      	lsls	r3, r3, #23
1004ca9e:	0018      	movs	r0, r3
1004caa0:	f7fe fcbc 	bl	1004b41c <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004caa4:	4b1f      	ldr	r3, [pc, #124]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004caa6:	223d      	movs	r2, #61	@ 0x3d
1004caa8:	5c9b      	ldrb	r3, [r3, r2]
1004caaa:	001a      	movs	r2, r3
1004caac:	6a3b      	ldr	r3, [r7, #32]
1004caae:	189b      	adds	r3, r3, r2
1004cab0:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
1004cab2:	68fa      	ldr	r2, [r7, #12]
1004cab4:	693b      	ldr	r3, [r7, #16]
1004cab6:	18d2      	adds	r2, r2, r3
1004cab8:	4b1a      	ldr	r3, [pc, #104]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004caba:	2188      	movs	r1, #136	@ 0x88
1004cabc:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
1004cabe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004cac0:	6a3b      	ldr	r3, [r7, #32]
1004cac2:	18d2      	adds	r2, r2, r3
1004cac4:	6a3b      	ldr	r3, [r7, #32]
1004cac6:	3305      	adds	r3, #5
1004cac8:	429a      	cmp	r2, r3
1004caca:	d212      	bcs.n	1004caf2 <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004cacc:	23c0      	movs	r3, #192	@ 0xc0
1004cace:	05db      	lsls	r3, r3, #23
1004cad0:	0018      	movs	r0, r3
1004cad2:	f7fe fcb3 	bl	1004b43c <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004cad6:	23c0      	movs	r3, #192	@ 0xc0
1004cad8:	05db      	lsls	r3, r3, #23
1004cada:	0018      	movs	r0, r3
1004cadc:	f7fe fcbd 	bl	1004b45a <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004cae0:	4b13      	ldr	r3, [pc, #76]	@ (1004cb30 <TIMER_SetRadioTimerValue+0x1d4>)
1004cae2:	0018      	movs	r0, r3
1004cae4:	f7fe fce4 	bl	1004b4b0 <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
1004cae8:	231b      	movs	r3, #27
1004caea:	18fb      	adds	r3, r7, r3
1004caec:	2201      	movs	r2, #1
1004caee:	701a      	strb	r2, [r3, #0]
1004caf0:	e010      	b.n	1004cb14 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004caf2:	4b0c      	ldr	r3, [pc, #48]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004caf4:	69db      	ldr	r3, [r3, #28]
1004caf6:	0019      	movs	r1, r3
1004caf8:	4a0e      	ldr	r2, [pc, #56]	@ (1004cb34 <TIMER_SetRadioTimerValue+0x1d8>)
1004cafa:	6a3b      	ldr	r3, [r7, #32]
1004cafc:	0018      	movs	r0, r3
1004cafe:	f7f3 fadf 	bl	100400c0 <blue_unit_conversion>
1004cb02:	0003      	movs	r3, r0
1004cb04:	b2d9      	uxtb	r1, r3
1004cb06:	4b07      	ldr	r3, [pc, #28]	@ (1004cb24 <TIMER_SetRadioTimerValue+0x1c8>)
1004cb08:	2284      	movs	r2, #132	@ 0x84
1004cb0a:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
1004cb0c:	231b      	movs	r3, #27
1004cb0e:	18fb      	adds	r3, r7, r3
1004cb10:	2200      	movs	r2, #0
1004cb12:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004cb14:	231b      	movs	r3, #27
1004cb16:	18fb      	adds	r3, r7, r3
1004cb18:	781b      	ldrb	r3, [r3, #0]
}
1004cb1a:	0018      	movs	r0, r3
1004cb1c:	46bd      	mov	sp, r7
1004cb1e:	b00a      	add	sp, #40	@ 0x28
1004cb20:	bd80      	pop	{r7, pc}
1004cb22:	46c0      	nop			@ (mov r8, r8)
1004cb24:	20002208 	.word	0x20002208
1004cb28:	00000326 	.word	0x00000326
1004cb2c:	200000c0 	.word	0x200000c0
1004cb30:	60001800 	.word	0x60001800
1004cb34:	00000635 	.word	0x00000635

1004cb38 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
1004cb38:	b5b0      	push	{r4, r5, r7, lr}
1004cb3a:	b084      	sub	sp, #16
1004cb3c:	af00      	add	r7, sp, #0
1004cb3e:	6078      	str	r0, [r7, #4]
1004cb40:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004cb42:	2308      	movs	r3, #8
1004cb44:	18fa      	adds	r2, r7, r3
1004cb46:	4b12      	ldr	r3, [pc, #72]	@ (1004cb90 <TIMER_GetPastSysTime+0x58>)
1004cb48:	0011      	movs	r1, r2
1004cb4a:	0018      	movs	r0, r3
1004cb4c:	f7ff fc0c 	bl	1004c368 <_get_system_time_and_machine>
1004cb50:	0002      	movs	r2, r0
1004cb52:	000b      	movs	r3, r1
1004cb54:	6839      	ldr	r1, [r7, #0]
1004cb56:	600a      	str	r2, [r1, #0]
1004cb58:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004cb5a:	68ba      	ldr	r2, [r7, #8]
1004cb5c:	687b      	ldr	r3, [r7, #4]
1004cb5e:	1ad0      	subs	r0, r2, r3
1004cb60:	4b0b      	ldr	r3, [pc, #44]	@ (1004cb90 <TIMER_GetPastSysTime+0x58>)
1004cb62:	69db      	ldr	r3, [r3, #28]
1004cb64:	0019      	movs	r1, r3
1004cb66:	4b0b      	ldr	r3, [pc, #44]	@ (1004cb94 <TIMER_GetPastSysTime+0x5c>)
1004cb68:	001a      	movs	r2, r3
1004cb6a:	f7f3 faa9 	bl	100400c0 <blue_unit_conversion>
1004cb6e:	0003      	movs	r3, r0
1004cb70:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004cb72:	683b      	ldr	r3, [r7, #0]
1004cb74:	681a      	ldr	r2, [r3, #0]
1004cb76:	685b      	ldr	r3, [r3, #4]
1004cb78:	68f9      	ldr	r1, [r7, #12]
1004cb7a:	000c      	movs	r4, r1
1004cb7c:	2100      	movs	r1, #0
1004cb7e:	000d      	movs	r5, r1
1004cb80:	1b12      	subs	r2, r2, r4
1004cb82:	41ab      	sbcs	r3, r5
}
1004cb84:	0010      	movs	r0, r2
1004cb86:	0019      	movs	r1, r3
1004cb88:	46bd      	mov	sp, r7
1004cb8a:	b004      	add	sp, #16
1004cb8c:	bdb0      	pop	{r4, r5, r7, pc}
1004cb8e:	46c0      	nop			@ (mov r8, r8)
1004cb90:	20002208 	.word	0x20002208
1004cb94:	00000635 	.word	0x00000635

1004cb98 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004cb98:	b580      	push	{r7, lr}
1004cb9a:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004cb9c:	f7ff f986 	bl	1004beac <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
1004cba0:	f005 f954 	bl	10051e4c <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004cba4:	46c0      	nop			@ (mov r8, r8)
1004cba6:	46bd      	mov	sp, r7
1004cba8:	bd80      	pop	{r7, pc}

1004cbaa <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
1004cbaa:	b580      	push	{r7, lr}
1004cbac:	b082      	sub	sp, #8
1004cbae:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
1004cbb0:	2300      	movs	r3, #0
1004cbb2:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
1004cbb4:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
1004cbb6:	23c0      	movs	r3, #192	@ 0xc0
1004cbb8:	05db      	lsls	r3, r3, #23
1004cbba:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004cbbc:	23c0      	movs	r3, #192	@ 0xc0
1004cbbe:	05db      	lsls	r3, r3, #23
1004cbc0:	2101      	movs	r1, #1
1004cbc2:	430a      	orrs	r2, r1
1004cbc4:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
1004cbc6:	23c0      	movs	r3, #192	@ 0xc0
1004cbc8:	05db      	lsls	r3, r3, #23
1004cbca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004cbcc:	607b      	str	r3, [r7, #4]
}
1004cbce:	46c0      	nop			@ (mov r8, r8)
1004cbd0:	46bd      	mov	sp, r7
1004cbd2:	b002      	add	sp, #8
1004cbd4:	bd80      	pop	{r7, pc}
	...

1004cbd8 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
1004cbd8:	b580      	push	{r7, lr}
1004cbda:	b082      	sub	sp, #8
1004cbdc:	af00      	add	r7, sp, #0
1004cbde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004cbe0:	4b08      	ldr	r3, [pc, #32]	@ (1004cc04 <LL_PWR_SetNoPullB+0x2c>)
1004cbe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004cbe4:	687b      	ldr	r3, [r7, #4]
1004cbe6:	43d9      	mvns	r1, r3
1004cbe8:	4b06      	ldr	r3, [pc, #24]	@ (1004cc04 <LL_PWR_SetNoPullB+0x2c>)
1004cbea:	400a      	ands	r2, r1
1004cbec:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004cbee:	4b05      	ldr	r3, [pc, #20]	@ (1004cc04 <LL_PWR_SetNoPullB+0x2c>)
1004cbf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004cbf2:	687b      	ldr	r3, [r7, #4]
1004cbf4:	43d9      	mvns	r1, r3
1004cbf6:	4b03      	ldr	r3, [pc, #12]	@ (1004cc04 <LL_PWR_SetNoPullB+0x2c>)
1004cbf8:	400a      	ands	r2, r1
1004cbfa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004cbfc:	46c0      	nop			@ (mov r8, r8)
1004cbfe:	46bd      	mov	sp, r7
1004cc00:	b002      	add	sp, #8
1004cc02:	bd80      	pop	{r7, pc}
1004cc04:	48500000 	.word	0x48500000

1004cc08 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
1004cc08:	b580      	push	{r7, lr}
1004cc0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
1004cc0c:	4b04      	ldr	r3, [pc, #16]	@ (1004cc20 <LL_RCC_HSE_Enable+0x18>)
1004cc0e:	681a      	ldr	r2, [r3, #0]
1004cc10:	4b03      	ldr	r3, [pc, #12]	@ (1004cc20 <LL_RCC_HSE_Enable+0x18>)
1004cc12:	2180      	movs	r1, #128	@ 0x80
1004cc14:	0249      	lsls	r1, r1, #9
1004cc16:	430a      	orrs	r2, r1
1004cc18:	601a      	str	r2, [r3, #0]
}
1004cc1a:	46c0      	nop			@ (mov r8, r8)
1004cc1c:	46bd      	mov	sp, r7
1004cc1e:	bd80      	pop	{r7, pc}
1004cc20:	48400000 	.word	0x48400000

1004cc24 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004cc24:	b580      	push	{r7, lr}
1004cc26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
1004cc28:	4b04      	ldr	r3, [pc, #16]	@ (1004cc3c <LL_RCC_HSE_Disable+0x18>)
1004cc2a:	681a      	ldr	r2, [r3, #0]
1004cc2c:	4b03      	ldr	r3, [pc, #12]	@ (1004cc3c <LL_RCC_HSE_Disable+0x18>)
1004cc2e:	4904      	ldr	r1, [pc, #16]	@ (1004cc40 <LL_RCC_HSE_Disable+0x1c>)
1004cc30:	400a      	ands	r2, r1
1004cc32:	601a      	str	r2, [r3, #0]
}
1004cc34:	46c0      	nop			@ (mov r8, r8)
1004cc36:	46bd      	mov	sp, r7
1004cc38:	bd80      	pop	{r7, pc}
1004cc3a:	46c0      	nop			@ (mov r8, r8)
1004cc3c:	48400000 	.word	0x48400000
1004cc40:	fffeffff 	.word	0xfffeffff

1004cc44 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004cc44:	b580      	push	{r7, lr}
1004cc46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004cc48:	4b07      	ldr	r3, [pc, #28]	@ (1004cc68 <LL_RCC_HSE_IsReady+0x24>)
1004cc4a:	681a      	ldr	r2, [r3, #0]
1004cc4c:	2380      	movs	r3, #128	@ 0x80
1004cc4e:	029b      	lsls	r3, r3, #10
1004cc50:	401a      	ands	r2, r3
1004cc52:	2380      	movs	r3, #128	@ 0x80
1004cc54:	029b      	lsls	r3, r3, #10
1004cc56:	429a      	cmp	r2, r3
1004cc58:	d101      	bne.n	1004cc5e <LL_RCC_HSE_IsReady+0x1a>
1004cc5a:	2301      	movs	r3, #1
1004cc5c:	e000      	b.n	1004cc60 <LL_RCC_HSE_IsReady+0x1c>
1004cc5e:	2300      	movs	r3, #0
}
1004cc60:	0018      	movs	r0, r3
1004cc62:	46bd      	mov	sp, r7
1004cc64:	bd80      	pop	{r7, pc}
1004cc66:	46c0      	nop			@ (mov r8, r8)
1004cc68:	48400000 	.word	0x48400000

1004cc6c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
1004cc6c:	b580      	push	{r7, lr}
1004cc6e:	b082      	sub	sp, #8
1004cc70:	af00      	add	r7, sp, #0
1004cc72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004cc74:	4a0b      	ldr	r2, [pc, #44]	@ (1004cca4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004cc76:	2398      	movs	r3, #152	@ 0x98
1004cc78:	58d3      	ldr	r3, [r2, r3]
1004cc7a:	4a0b      	ldr	r2, [pc, #44]	@ (1004cca8 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
1004cc7c:	401a      	ands	r2, r3
1004cc7e:	687b      	ldr	r3, [r7, #4]
1004cc80:	021b      	lsls	r3, r3, #8
1004cc82:	4908      	ldr	r1, [pc, #32]	@ (1004cca4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004cc84:	4313      	orrs	r3, r2
1004cc86:	2298      	movs	r2, #152	@ 0x98
1004cc88:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
1004cc8a:	4a06      	ldr	r2, [pc, #24]	@ (1004cca4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004cc8c:	2398      	movs	r3, #152	@ 0x98
1004cc8e:	58d3      	ldr	r3, [r2, r3]
1004cc90:	4904      	ldr	r1, [pc, #16]	@ (1004cca4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004cc92:	2280      	movs	r2, #128	@ 0x80
1004cc94:	4313      	orrs	r3, r2
1004cc96:	2298      	movs	r2, #152	@ 0x98
1004cc98:	508b      	str	r3, [r1, r2]
}
1004cc9a:	46c0      	nop			@ (mov r8, r8)
1004cc9c:	46bd      	mov	sp, r7
1004cc9e:	b002      	add	sp, #8
1004cca0:	bd80      	pop	{r7, pc}
1004cca2:	46c0      	nop			@ (mov r8, r8)
1004cca4:	48400000 	.word	0x48400000
1004cca8:	ffffc0ff 	.word	0xffffc0ff

1004ccac <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
1004ccac:	b580      	push	{r7, lr}
1004ccae:	b082      	sub	sp, #8
1004ccb0:	af00      	add	r7, sp, #0
1004ccb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
1004ccb4:	4a07      	ldr	r2, [pc, #28]	@ (1004ccd4 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004ccb6:	2398      	movs	r3, #152	@ 0x98
1004ccb8:	58d3      	ldr	r3, [r2, r3]
1004ccba:	2270      	movs	r2, #112	@ 0x70
1004ccbc:	4393      	bics	r3, r2
1004ccbe:	001a      	movs	r2, r3
1004ccc0:	4904      	ldr	r1, [pc, #16]	@ (1004ccd4 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004ccc2:	687b      	ldr	r3, [r7, #4]
1004ccc4:	4313      	orrs	r3, r2
1004ccc6:	2298      	movs	r2, #152	@ 0x98
1004ccc8:	508b      	str	r3, [r1, r2]
}
1004ccca:	46c0      	nop			@ (mov r8, r8)
1004cccc:	46bd      	mov	sp, r7
1004ccce:	b002      	add	sp, #8
1004ccd0:	bd80      	pop	{r7, pc}
1004ccd2:	46c0      	nop			@ (mov r8, r8)
1004ccd4:	48400000 	.word	0x48400000

1004ccd8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
1004ccd8:	b580      	push	{r7, lr}
1004ccda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004ccdc:	4b07      	ldr	r3, [pc, #28]	@ (1004ccfc <LL_RCC_HSI_Enable+0x24>)
1004ccde:	689a      	ldr	r2, [r3, #8]
1004cce0:	4b06      	ldr	r3, [pc, #24]	@ (1004ccfc <LL_RCC_HSI_Enable+0x24>)
1004cce2:	2104      	movs	r1, #4
1004cce4:	438a      	bics	r2, r1
1004cce6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004cce8:	4b04      	ldr	r3, [pc, #16]	@ (1004ccfc <LL_RCC_HSI_Enable+0x24>)
1004ccea:	689a      	ldr	r2, [r3, #8]
1004ccec:	4b03      	ldr	r3, [pc, #12]	@ (1004ccfc <LL_RCC_HSI_Enable+0x24>)
1004ccee:	2102      	movs	r1, #2
1004ccf0:	438a      	bics	r2, r1
1004ccf2:	609a      	str	r2, [r3, #8]
}
1004ccf4:	46c0      	nop			@ (mov r8, r8)
1004ccf6:	46bd      	mov	sp, r7
1004ccf8:	bd80      	pop	{r7, pc}
1004ccfa:	46c0      	nop			@ (mov r8, r8)
1004ccfc:	48400000 	.word	0x48400000

1004cd00 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
1004cd00:	b580      	push	{r7, lr}
1004cd02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004cd04:	4b07      	ldr	r3, [pc, #28]	@ (1004cd24 <LL_RCC_HSI_Disable+0x24>)
1004cd06:	689a      	ldr	r2, [r3, #8]
1004cd08:	4b06      	ldr	r3, [pc, #24]	@ (1004cd24 <LL_RCC_HSI_Disable+0x24>)
1004cd0a:	2102      	movs	r1, #2
1004cd0c:	430a      	orrs	r2, r1
1004cd0e:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004cd10:	4b04      	ldr	r3, [pc, #16]	@ (1004cd24 <LL_RCC_HSI_Disable+0x24>)
1004cd12:	689a      	ldr	r2, [r3, #8]
1004cd14:	4b03      	ldr	r3, [pc, #12]	@ (1004cd24 <LL_RCC_HSI_Disable+0x24>)
1004cd16:	2104      	movs	r1, #4
1004cd18:	430a      	orrs	r2, r1
1004cd1a:	609a      	str	r2, [r3, #8]
}
1004cd1c:	46c0      	nop			@ (mov r8, r8)
1004cd1e:	46bd      	mov	sp, r7
1004cd20:	bd80      	pop	{r7, pc}
1004cd22:	46c0      	nop			@ (mov r8, r8)
1004cd24:	48400000 	.word	0x48400000

1004cd28 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
1004cd28:	b580      	push	{r7, lr}
1004cd2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004cd2c:	4b07      	ldr	r3, [pc, #28]	@ (1004cd4c <LL_RCC_HSI_IsReady+0x24>)
1004cd2e:	681a      	ldr	r2, [r3, #0]
1004cd30:	2380      	movs	r3, #128	@ 0x80
1004cd32:	00db      	lsls	r3, r3, #3
1004cd34:	401a      	ands	r2, r3
1004cd36:	2380      	movs	r3, #128	@ 0x80
1004cd38:	00db      	lsls	r3, r3, #3
1004cd3a:	429a      	cmp	r2, r3
1004cd3c:	d101      	bne.n	1004cd42 <LL_RCC_HSI_IsReady+0x1a>
1004cd3e:	2301      	movs	r3, #1
1004cd40:	e000      	b.n	1004cd44 <LL_RCC_HSI_IsReady+0x1c>
1004cd42:	2300      	movs	r3, #0
}
1004cd44:	0018      	movs	r0, r3
1004cd46:	46bd      	mov	sp, r7
1004cd48:	bd80      	pop	{r7, pc}
1004cd4a:	46c0      	nop			@ (mov r8, r8)
1004cd4c:	48400000 	.word	0x48400000

1004cd50 <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
1004cd50:	b580      	push	{r7, lr}
1004cd52:	b082      	sub	sp, #8
1004cd54:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004cd56:	46c0      	nop			@ (mov r8, r8)
1004cd58:	4b0f      	ldr	r3, [pc, #60]	@ (1004cd98 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004cd5a:	681a      	ldr	r2, [r3, #0]
1004cd5c:	2380      	movs	r3, #128	@ 0x80
1004cd5e:	029b      	lsls	r3, r3, #10
1004cd60:	4013      	ands	r3, r2
1004cd62:	d0f9      	beq.n	1004cd58 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004cd64:	4b0c      	ldr	r3, [pc, #48]	@ (1004cd98 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004cd66:	689a      	ldr	r2, [r3, #8]
1004cd68:	4b0b      	ldr	r3, [pc, #44]	@ (1004cd98 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004cd6a:	2102      	movs	r1, #2
1004cd6c:	430a      	orrs	r2, r1
1004cd6e:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
1004cd70:	2300      	movs	r3, #0
1004cd72:	607b      	str	r3, [r7, #4]
1004cd74:	e003      	b.n	1004cd7e <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
1004cd76:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004cd78:	687b      	ldr	r3, [r7, #4]
1004cd7a:	3301      	adds	r3, #1
1004cd7c:	607b      	str	r3, [r7, #4]
1004cd7e:	687b      	ldr	r3, [r7, #4]
1004cd80:	2b05      	cmp	r3, #5
1004cd82:	ddf8      	ble.n	1004cd76 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004cd84:	4b04      	ldr	r3, [pc, #16]	@ (1004cd98 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004cd86:	689a      	ldr	r2, [r3, #8]
1004cd88:	4b03      	ldr	r3, [pc, #12]	@ (1004cd98 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004cd8a:	2104      	movs	r1, #4
1004cd8c:	430a      	orrs	r2, r1
1004cd8e:	609a      	str	r2, [r3, #8]
}
1004cd90:	46c0      	nop			@ (mov r8, r8)
1004cd92:	46bd      	mov	sp, r7
1004cd94:	b002      	add	sp, #8
1004cd96:	bd80      	pop	{r7, pc}
1004cd98:	48400000 	.word	0x48400000

1004cd9c <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
1004cd9c:	b580      	push	{r7, lr}
1004cd9e:	b082      	sub	sp, #8
1004cda0:	af00      	add	r7, sp, #0
1004cda2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004cda4:	4b06      	ldr	r3, [pc, #24]	@ (1004cdc0 <LL_RCC_LSCO_SetSource+0x24>)
1004cda6:	689b      	ldr	r3, [r3, #8]
1004cda8:	4a06      	ldr	r2, [pc, #24]	@ (1004cdc4 <LL_RCC_LSCO_SetSource+0x28>)
1004cdaa:	4013      	ands	r3, r2
1004cdac:	0019      	movs	r1, r3
1004cdae:	4b04      	ldr	r3, [pc, #16]	@ (1004cdc0 <LL_RCC_LSCO_SetSource+0x24>)
1004cdb0:	687a      	ldr	r2, [r7, #4]
1004cdb2:	430a      	orrs	r2, r1
1004cdb4:	609a      	str	r2, [r3, #8]
}
1004cdb6:	46c0      	nop			@ (mov r8, r8)
1004cdb8:	46bd      	mov	sp, r7
1004cdba:	b002      	add	sp, #8
1004cdbc:	bd80      	pop	{r7, pc}
1004cdbe:	46c0      	nop			@ (mov r8, r8)
1004cdc0:	48400000 	.word	0x48400000
1004cdc4:	fffe7fff 	.word	0xfffe7fff

1004cdc8 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
1004cdc8:	b580      	push	{r7, lr}
1004cdca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004cdcc:	4b04      	ldr	r3, [pc, #16]	@ (1004cde0 <LL_RCC_LSE_Enable+0x18>)
1004cdce:	681a      	ldr	r2, [r3, #0]
1004cdd0:	4b03      	ldr	r3, [pc, #12]	@ (1004cde0 <LL_RCC_LSE_Enable+0x18>)
1004cdd2:	2110      	movs	r1, #16
1004cdd4:	430a      	orrs	r2, r1
1004cdd6:	601a      	str	r2, [r3, #0]
}
1004cdd8:	46c0      	nop			@ (mov r8, r8)
1004cdda:	46bd      	mov	sp, r7
1004cddc:	bd80      	pop	{r7, pc}
1004cdde:	46c0      	nop			@ (mov r8, r8)
1004cde0:	48400000 	.word	0x48400000

1004cde4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
1004cde4:	b580      	push	{r7, lr}
1004cde6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004cde8:	4b04      	ldr	r3, [pc, #16]	@ (1004cdfc <LL_RCC_LSE_Disable+0x18>)
1004cdea:	681a      	ldr	r2, [r3, #0]
1004cdec:	4b03      	ldr	r3, [pc, #12]	@ (1004cdfc <LL_RCC_LSE_Disable+0x18>)
1004cdee:	2110      	movs	r1, #16
1004cdf0:	438a      	bics	r2, r1
1004cdf2:	601a      	str	r2, [r3, #0]
}
1004cdf4:	46c0      	nop			@ (mov r8, r8)
1004cdf6:	46bd      	mov	sp, r7
1004cdf8:	bd80      	pop	{r7, pc}
1004cdfa:	46c0      	nop			@ (mov r8, r8)
1004cdfc:	48400000 	.word	0x48400000

1004ce00 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
1004ce00:	b580      	push	{r7, lr}
1004ce02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004ce04:	4b05      	ldr	r3, [pc, #20]	@ (1004ce1c <LL_RCC_LSE_IsReady+0x1c>)
1004ce06:	681b      	ldr	r3, [r3, #0]
1004ce08:	2220      	movs	r2, #32
1004ce0a:	4013      	ands	r3, r2
1004ce0c:	2b20      	cmp	r3, #32
1004ce0e:	d101      	bne.n	1004ce14 <LL_RCC_LSE_IsReady+0x14>
1004ce10:	2301      	movs	r3, #1
1004ce12:	e000      	b.n	1004ce16 <LL_RCC_LSE_IsReady+0x16>
1004ce14:	2300      	movs	r3, #0
}
1004ce16:	0018      	movs	r0, r3
1004ce18:	46bd      	mov	sp, r7
1004ce1a:	bd80      	pop	{r7, pc}
1004ce1c:	48400000 	.word	0x48400000

1004ce20 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
1004ce20:	b580      	push	{r7, lr}
1004ce22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004ce24:	4b04      	ldr	r3, [pc, #16]	@ (1004ce38 <LL_RCC_LSE_EnableBypass+0x18>)
1004ce26:	681a      	ldr	r2, [r3, #0]
1004ce28:	4b03      	ldr	r3, [pc, #12]	@ (1004ce38 <LL_RCC_LSE_EnableBypass+0x18>)
1004ce2a:	2140      	movs	r1, #64	@ 0x40
1004ce2c:	430a      	orrs	r2, r1
1004ce2e:	601a      	str	r2, [r3, #0]
}
1004ce30:	46c0      	nop			@ (mov r8, r8)
1004ce32:	46bd      	mov	sp, r7
1004ce34:	bd80      	pop	{r7, pc}
1004ce36:	46c0      	nop			@ (mov r8, r8)
1004ce38:	48400000 	.word	0x48400000

1004ce3c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
1004ce3c:	b580      	push	{r7, lr}
1004ce3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
1004ce40:	4b04      	ldr	r3, [pc, #16]	@ (1004ce54 <LL_RCC_LSE_DisableBypass+0x18>)
1004ce42:	681a      	ldr	r2, [r3, #0]
1004ce44:	4b03      	ldr	r3, [pc, #12]	@ (1004ce54 <LL_RCC_LSE_DisableBypass+0x18>)
1004ce46:	2140      	movs	r1, #64	@ 0x40
1004ce48:	438a      	bics	r2, r1
1004ce4a:	601a      	str	r2, [r3, #0]
}
1004ce4c:	46c0      	nop			@ (mov r8, r8)
1004ce4e:	46bd      	mov	sp, r7
1004ce50:	bd80      	pop	{r7, pc}
1004ce52:	46c0      	nop			@ (mov r8, r8)
1004ce54:	48400000 	.word	0x48400000

1004ce58 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
1004ce58:	b580      	push	{r7, lr}
1004ce5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
1004ce5c:	4b05      	ldr	r3, [pc, #20]	@ (1004ce74 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1004ce5e:	681b      	ldr	r3, [r3, #0]
1004ce60:	2240      	movs	r2, #64	@ 0x40
1004ce62:	4013      	ands	r3, r2
1004ce64:	2b40      	cmp	r3, #64	@ 0x40
1004ce66:	d101      	bne.n	1004ce6c <LL_RCC_LSE_IsBypassEnabled+0x14>
1004ce68:	2301      	movs	r3, #1
1004ce6a:	e000      	b.n	1004ce6e <LL_RCC_LSE_IsBypassEnabled+0x16>
1004ce6c:	2300      	movs	r3, #0
}
1004ce6e:	0018      	movs	r0, r3
1004ce70:	46bd      	mov	sp, r7
1004ce72:	bd80      	pop	{r7, pc}
1004ce74:	48400000 	.word	0x48400000

1004ce78 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
1004ce78:	b580      	push	{r7, lr}
1004ce7a:	b082      	sub	sp, #8
1004ce7c:	af00      	add	r7, sp, #0
1004ce7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
1004ce80:	4b06      	ldr	r3, [pc, #24]	@ (1004ce9c <LL_RCC_LSE_SetDriveCapability+0x24>)
1004ce82:	68db      	ldr	r3, [r3, #12]
1004ce84:	2260      	movs	r2, #96	@ 0x60
1004ce86:	4393      	bics	r3, r2
1004ce88:	0019      	movs	r1, r3
1004ce8a:	4b04      	ldr	r3, [pc, #16]	@ (1004ce9c <LL_RCC_LSE_SetDriveCapability+0x24>)
1004ce8c:	687a      	ldr	r2, [r7, #4]
1004ce8e:	430a      	orrs	r2, r1
1004ce90:	60da      	str	r2, [r3, #12]
}
1004ce92:	46c0      	nop			@ (mov r8, r8)
1004ce94:	46bd      	mov	sp, r7
1004ce96:	b002      	add	sp, #8
1004ce98:	bd80      	pop	{r7, pc}
1004ce9a:	46c0      	nop			@ (mov r8, r8)
1004ce9c:	48400000 	.word	0x48400000

1004cea0 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
1004cea0:	b580      	push	{r7, lr}
1004cea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
1004cea4:	4b04      	ldr	r3, [pc, #16]	@ (1004ceb8 <LL_RCC_LSI_Enable+0x18>)
1004cea6:	681a      	ldr	r2, [r3, #0]
1004cea8:	4b03      	ldr	r3, [pc, #12]	@ (1004ceb8 <LL_RCC_LSI_Enable+0x18>)
1004ceaa:	2104      	movs	r1, #4
1004ceac:	430a      	orrs	r2, r1
1004ceae:	601a      	str	r2, [r3, #0]
}
1004ceb0:	46c0      	nop			@ (mov r8, r8)
1004ceb2:	46bd      	mov	sp, r7
1004ceb4:	bd80      	pop	{r7, pc}
1004ceb6:	46c0      	nop			@ (mov r8, r8)
1004ceb8:	48400000 	.word	0x48400000

1004cebc <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
1004cebc:	b580      	push	{r7, lr}
1004cebe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004cec0:	4b04      	ldr	r3, [pc, #16]	@ (1004ced4 <LL_RCC_LSI_Disable+0x18>)
1004cec2:	681a      	ldr	r2, [r3, #0]
1004cec4:	4b03      	ldr	r3, [pc, #12]	@ (1004ced4 <LL_RCC_LSI_Disable+0x18>)
1004cec6:	2104      	movs	r1, #4
1004cec8:	438a      	bics	r2, r1
1004ceca:	601a      	str	r2, [r3, #0]
}
1004cecc:	46c0      	nop			@ (mov r8, r8)
1004cece:	46bd      	mov	sp, r7
1004ced0:	bd80      	pop	{r7, pc}
1004ced2:	46c0      	nop			@ (mov r8, r8)
1004ced4:	48400000 	.word	0x48400000

1004ced8 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
1004ced8:	b580      	push	{r7, lr}
1004ceda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004cedc:	4b05      	ldr	r3, [pc, #20]	@ (1004cef4 <LL_RCC_LSI_IsReady+0x1c>)
1004cede:	681b      	ldr	r3, [r3, #0]
1004cee0:	2208      	movs	r2, #8
1004cee2:	4013      	ands	r3, r2
1004cee4:	2b08      	cmp	r3, #8
1004cee6:	d101      	bne.n	1004ceec <LL_RCC_LSI_IsReady+0x14>
1004cee8:	2301      	movs	r3, #1
1004ceea:	e000      	b.n	1004ceee <LL_RCC_LSI_IsReady+0x16>
1004ceec:	2300      	movs	r3, #0
}
1004ceee:	0018      	movs	r0, r3
1004cef0:	46bd      	mov	sp, r7
1004cef2:	bd80      	pop	{r7, pc}
1004cef4:	48400000 	.word	0x48400000

1004cef8 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
1004cef8:	b580      	push	{r7, lr}
1004cefa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004cefc:	4b04      	ldr	r3, [pc, #16]	@ (1004cf10 <LL_RCC_RC64MPLL_Enable+0x18>)
1004cefe:	681a      	ldr	r2, [r3, #0]
1004cf00:	4b03      	ldr	r3, [pc, #12]	@ (1004cf10 <LL_RCC_RC64MPLL_Enable+0x18>)
1004cf02:	2180      	movs	r1, #128	@ 0x80
1004cf04:	0189      	lsls	r1, r1, #6
1004cf06:	430a      	orrs	r2, r1
1004cf08:	601a      	str	r2, [r3, #0]
}
1004cf0a:	46c0      	nop			@ (mov r8, r8)
1004cf0c:	46bd      	mov	sp, r7
1004cf0e:	bd80      	pop	{r7, pc}
1004cf10:	48400000 	.word	0x48400000

1004cf14 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
1004cf14:	b580      	push	{r7, lr}
1004cf16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004cf18:	4b04      	ldr	r3, [pc, #16]	@ (1004cf2c <LL_RCC_RC64MPLL_Disable+0x18>)
1004cf1a:	681a      	ldr	r2, [r3, #0]
1004cf1c:	4b03      	ldr	r3, [pc, #12]	@ (1004cf2c <LL_RCC_RC64MPLL_Disable+0x18>)
1004cf1e:	4904      	ldr	r1, [pc, #16]	@ (1004cf30 <LL_RCC_RC64MPLL_Disable+0x1c>)
1004cf20:	400a      	ands	r2, r1
1004cf22:	601a      	str	r2, [r3, #0]
}
1004cf24:	46c0      	nop			@ (mov r8, r8)
1004cf26:	46bd      	mov	sp, r7
1004cf28:	bd80      	pop	{r7, pc}
1004cf2a:	46c0      	nop			@ (mov r8, r8)
1004cf2c:	48400000 	.word	0x48400000
1004cf30:	ffffdfff 	.word	0xffffdfff

1004cf34 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
1004cf34:	b580      	push	{r7, lr}
1004cf36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004cf38:	4b07      	ldr	r3, [pc, #28]	@ (1004cf58 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004cf3a:	681a      	ldr	r2, [r3, #0]
1004cf3c:	2380      	movs	r3, #128	@ 0x80
1004cf3e:	01db      	lsls	r3, r3, #7
1004cf40:	401a      	ands	r2, r3
1004cf42:	2380      	movs	r3, #128	@ 0x80
1004cf44:	01db      	lsls	r3, r3, #7
1004cf46:	429a      	cmp	r2, r3
1004cf48:	d101      	bne.n	1004cf4e <LL_RCC_RC64MPLL_IsReady+0x1a>
1004cf4a:	2301      	movs	r3, #1
1004cf4c:	e000      	b.n	1004cf50 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004cf4e:	2300      	movs	r3, #0
}
1004cf50:	0018      	movs	r0, r3
1004cf52:	46bd      	mov	sp, r7
1004cf54:	bd80      	pop	{r7, pc}
1004cf56:	46c0      	nop			@ (mov r8, r8)
1004cf58:	48400000 	.word	0x48400000

1004cf5c <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
1004cf5c:	b580      	push	{r7, lr}
1004cf5e:	b082      	sub	sp, #8
1004cf60:	af00      	add	r7, sp, #0
1004cf62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
1004cf64:	4b06      	ldr	r3, [pc, #24]	@ (1004cf80 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004cf66:	689b      	ldr	r3, [r3, #8]
1004cf68:	22e0      	movs	r2, #224	@ 0xe0
1004cf6a:	4393      	bics	r3, r2
1004cf6c:	0019      	movs	r1, r3
1004cf6e:	4b04      	ldr	r3, [pc, #16]	@ (1004cf80 <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004cf70:	687a      	ldr	r2, [r7, #4]
1004cf72:	430a      	orrs	r2, r1
1004cf74:	609a      	str	r2, [r3, #8]
}
1004cf76:	46c0      	nop			@ (mov r8, r8)
1004cf78:	46bd      	mov	sp, r7
1004cf7a:	b002      	add	sp, #8
1004cf7c:	bd80      	pop	{r7, pc}
1004cf7e:	46c0      	nop			@ (mov r8, r8)
1004cf80:	48400000 	.word	0x48400000

1004cf84 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1004cf84:	b580      	push	{r7, lr}
1004cf86:	b084      	sub	sp, #16
1004cf88:	af00      	add	r7, sp, #0
1004cf8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1004cf8c:	687b      	ldr	r3, [r7, #4]
1004cf8e:	2b00      	cmp	r3, #0
1004cf90:	d101      	bne.n	1004cf96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
1004cf92:	2301      	movs	r3, #1
1004cf94:	e13c      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1004cf96:	687b      	ldr	r3, [r7, #4]
1004cf98:	681b      	ldr	r3, [r3, #0]
1004cf9a:	2210      	movs	r2, #16
1004cf9c:	4013      	ands	r3, r2
1004cf9e:	d033      	beq.n	1004d008 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
1004cfa0:	687b      	ldr	r3, [r7, #4]
1004cfa2:	689b      	ldr	r3, [r3, #8]
1004cfa4:	2b00      	cmp	r3, #0
1004cfa6:	d102      	bne.n	1004cfae <HAL_RCC_OscConfig+0x2a>
1004cfa8:	f7ff fe96 	bl	1004ccd8 <LL_RCC_HSI_Enable>
1004cfac:	e001      	b.n	1004cfb2 <HAL_RCC_OscConfig+0x2e>
1004cfae:	f7ff fea7 	bl	1004cd00 <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
1004cfb2:	687b      	ldr	r3, [r7, #4]
1004cfb4:	689b      	ldr	r3, [r3, #8]
1004cfb6:	2b04      	cmp	r3, #4
1004cfb8:	d113      	bne.n	1004cfe2 <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cfba:	f7fa febf 	bl	10047d3c <HAL_GetTick>
1004cfbe:	0003      	movs	r3, r0
1004cfc0:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
1004cfc2:	e008      	b.n	1004cfd6 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004cfc4:	f7fa feba 	bl	10047d3c <HAL_GetTick>
1004cfc8:	0002      	movs	r2, r0
1004cfca:	68fb      	ldr	r3, [r7, #12]
1004cfcc:	1ad3      	subs	r3, r2, r3
1004cfce:	2b64      	cmp	r3, #100	@ 0x64
1004cfd0:	d901      	bls.n	1004cfd6 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004cfd2:	2303      	movs	r3, #3
1004cfd4:	e11c      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
1004cfd6:	f7ff fea7 	bl	1004cd28 <LL_RCC_HSI_IsReady>
1004cfda:	0003      	movs	r3, r0
1004cfdc:	2b01      	cmp	r3, #1
1004cfde:	d0f1      	beq.n	1004cfc4 <HAL_RCC_OscConfig+0x40>
1004cfe0:	e012      	b.n	1004d008 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004cfe2:	f7fa feab 	bl	10047d3c <HAL_GetTick>
1004cfe6:	0003      	movs	r3, r0
1004cfe8:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004cfea:	e008      	b.n	1004cffe <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004cfec:	f7fa fea6 	bl	10047d3c <HAL_GetTick>
1004cff0:	0002      	movs	r2, r0
1004cff2:	68fb      	ldr	r3, [r7, #12]
1004cff4:	1ad3      	subs	r3, r2, r3
1004cff6:	2b64      	cmp	r3, #100	@ 0x64
1004cff8:	d901      	bls.n	1004cffe <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004cffa:	2303      	movs	r3, #3
1004cffc:	e108      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1004cffe:	f7ff fe93 	bl	1004cd28 <LL_RCC_HSI_IsReady>
1004d002:	0003      	movs	r3, r0
1004d004:	2b01      	cmp	r3, #1
1004d006:	d1f1      	bne.n	1004cfec <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1004d008:	687b      	ldr	r3, [r7, #4]
1004d00a:	681b      	ldr	r3, [r3, #0]
1004d00c:	2201      	movs	r2, #1
1004d00e:	4013      	ands	r3, r2
1004d010:	d039      	beq.n	1004d086 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004d012:	2020      	movs	r0, #32
1004d014:	f7ff fe2a 	bl	1004cc6c <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
1004d018:	2030      	movs	r0, #48	@ 0x30
1004d01a:	f7ff fe47 	bl	1004ccac <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1004d01e:	687b      	ldr	r3, [r7, #4]
1004d020:	685a      	ldr	r2, [r3, #4]
1004d022:	2380      	movs	r3, #128	@ 0x80
1004d024:	025b      	lsls	r3, r3, #9
1004d026:	429a      	cmp	r2, r3
1004d028:	d102      	bne.n	1004d030 <HAL_RCC_OscConfig+0xac>
1004d02a:	f7ff fded 	bl	1004cc08 <LL_RCC_HSE_Enable>
1004d02e:	e001      	b.n	1004d034 <HAL_RCC_OscConfig+0xb0>
1004d030:	f7ff fdf8 	bl	1004cc24 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
1004d034:	687b      	ldr	r3, [r7, #4]
1004d036:	685b      	ldr	r3, [r3, #4]
1004d038:	2b00      	cmp	r3, #0
1004d03a:	d012      	beq.n	1004d062 <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d03c:	f7fa fe7e 	bl	10047d3c <HAL_GetTick>
1004d040:	0003      	movs	r3, r0
1004d042:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
1004d044:	e008      	b.n	1004d058 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004d046:	f7fa fe79 	bl	10047d3c <HAL_GetTick>
1004d04a:	0002      	movs	r2, r0
1004d04c:	68fb      	ldr	r3, [r7, #12]
1004d04e:	1ad3      	subs	r3, r2, r3
1004d050:	2b64      	cmp	r3, #100	@ 0x64
1004d052:	d901      	bls.n	1004d058 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
1004d054:	2303      	movs	r3, #3
1004d056:	e0db      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
1004d058:	f7ff fdf4 	bl	1004cc44 <LL_RCC_HSE_IsReady>
1004d05c:	1e03      	subs	r3, r0, #0
1004d05e:	d0f2      	beq.n	1004d046 <HAL_RCC_OscConfig+0xc2>
1004d060:	e011      	b.n	1004d086 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d062:	f7fa fe6b 	bl	10047d3c <HAL_GetTick>
1004d066:	0003      	movs	r3, r0
1004d068:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
1004d06a:	e008      	b.n	1004d07e <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004d06c:	f7fa fe66 	bl	10047d3c <HAL_GetTick>
1004d070:	0002      	movs	r2, r0
1004d072:	68fb      	ldr	r3, [r7, #12]
1004d074:	1ad3      	subs	r3, r2, r3
1004d076:	2b64      	cmp	r3, #100	@ 0x64
1004d078:	d901      	bls.n	1004d07e <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004d07a:	2303      	movs	r3, #3
1004d07c:	e0c8      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
1004d07e:	f7ff fde1 	bl	1004cc44 <LL_RCC_HSE_IsReady>
1004d082:	1e03      	subs	r3, r0, #0
1004d084:	d1f2      	bne.n	1004d06c <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004d086:	687b      	ldr	r3, [r7, #4]
1004d088:	681b      	ldr	r3, [r3, #0]
1004d08a:	2204      	movs	r2, #4
1004d08c:	4013      	ands	r3, r2
1004d08e:	d03a      	beq.n	1004d106 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
1004d090:	687b      	ldr	r3, [r7, #4]
1004d092:	691b      	ldr	r3, [r3, #16]
1004d094:	2b00      	cmp	r3, #0
1004d096:	d022      	beq.n	1004d0de <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
1004d098:	f7ff ff10 	bl	1004cebc <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
1004d09c:	46c0      	nop			@ (mov r8, r8)
1004d09e:	f7ff ff1b 	bl	1004ced8 <LL_RCC_LSI_IsReady>
1004d0a2:	1e03      	subs	r3, r0, #0
1004d0a4:	d1fb      	bne.n	1004d09e <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004d0a6:	f7ff fe9d 	bl	1004cde4 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004d0aa:	2380      	movs	r3, #128	@ 0x80
1004d0ac:	025b      	lsls	r3, r3, #9
1004d0ae:	0018      	movs	r0, r3
1004d0b0:	f7ff fe74 	bl	1004cd9c <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
1004d0b4:	f7ff fef4 	bl	1004cea0 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d0b8:	f7fa fe40 	bl	10047d3c <HAL_GetTick>
1004d0bc:	0003      	movs	r3, r0
1004d0be:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004d0c0:	e008      	b.n	1004d0d4 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004d0c2:	f7fa fe3b 	bl	10047d3c <HAL_GetTick>
1004d0c6:	0002      	movs	r2, r0
1004d0c8:	68fb      	ldr	r3, [r7, #12]
1004d0ca:	1ad3      	subs	r3, r2, r3
1004d0cc:	2b02      	cmp	r3, #2
1004d0ce:	d901      	bls.n	1004d0d4 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
1004d0d0:	2303      	movs	r3, #3
1004d0d2:	e09d      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004d0d4:	f7ff ff00 	bl	1004ced8 <LL_RCC_LSI_IsReady>
1004d0d8:	1e03      	subs	r3, r0, #0
1004d0da:	d0f2      	beq.n	1004d0c2 <HAL_RCC_OscConfig+0x13e>
1004d0dc:	e013      	b.n	1004d106 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004d0de:	f7ff feed 	bl	1004cebc <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d0e2:	f7fa fe2b 	bl	10047d3c <HAL_GetTick>
1004d0e6:	0003      	movs	r3, r0
1004d0e8:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004d0ea:	e008      	b.n	1004d0fe <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004d0ec:	f7fa fe26 	bl	10047d3c <HAL_GetTick>
1004d0f0:	0002      	movs	r2, r0
1004d0f2:	68fb      	ldr	r3, [r7, #12]
1004d0f4:	1ad3      	subs	r3, r2, r3
1004d0f6:	2b02      	cmp	r3, #2
1004d0f8:	d901      	bls.n	1004d0fe <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
1004d0fa:	2303      	movs	r3, #3
1004d0fc:	e088      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004d0fe:	f7ff feeb 	bl	1004ced8 <LL_RCC_LSI_IsReady>
1004d102:	1e03      	subs	r3, r0, #0
1004d104:	d1f2      	bne.n	1004d0ec <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004d106:	687b      	ldr	r3, [r7, #4]
1004d108:	681b      	ldr	r3, [r3, #0]
1004d10a:	2202      	movs	r2, #2
1004d10c:	4013      	ands	r3, r2
1004d10e:	d047      	beq.n	1004d1a0 <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
1004d110:	f7ff fed4 	bl	1004cebc <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004d114:	f7ff fe66 	bl	1004cde4 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
1004d118:	46c0      	nop			@ (mov r8, r8)
1004d11a:	f7ff fe71 	bl	1004ce00 <LL_RCC_LSE_IsReady>
1004d11e:	1e03      	subs	r3, r0, #0
1004d120:	d1fb      	bne.n	1004d11a <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004d122:	23c0      	movs	r3, #192	@ 0xc0
1004d124:	019b      	lsls	r3, r3, #6
1004d126:	0018      	movs	r0, r3
1004d128:	f7ff fd56 	bl	1004cbd8 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
1004d12c:	2380      	movs	r3, #128	@ 0x80
1004d12e:	021b      	lsls	r3, r3, #8
1004d130:	0018      	movs	r0, r3
1004d132:	f7ff fe33 	bl	1004cd9c <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
1004d136:	2020      	movs	r0, #32
1004d138:	f7ff fe9e 	bl	1004ce78 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
1004d13c:	687b      	ldr	r3, [r7, #4]
1004d13e:	68db      	ldr	r3, [r3, #12]
1004d140:	2b10      	cmp	r3, #16
1004d142:	d102      	bne.n	1004d14a <HAL_RCC_OscConfig+0x1c6>
1004d144:	f7ff fe40 	bl	1004cdc8 <LL_RCC_LSE_Enable>
1004d148:	e001      	b.n	1004d14e <HAL_RCC_OscConfig+0x1ca>
1004d14a:	f7ff fe4b 	bl	1004cde4 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
1004d14e:	687b      	ldr	r3, [r7, #4]
1004d150:	68db      	ldr	r3, [r3, #12]
1004d152:	2b00      	cmp	r3, #0
1004d154:	d012      	beq.n	1004d17c <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d156:	f7fa fdf1 	bl	10047d3c <HAL_GetTick>
1004d15a:	0003      	movs	r3, r0
1004d15c:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004d15e:	e008      	b.n	1004d172 <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004d160:	f7fa fdec 	bl	10047d3c <HAL_GetTick>
1004d164:	0002      	movs	r2, r0
1004d166:	68fb      	ldr	r3, [r7, #12]
1004d168:	1ad3      	subs	r3, r2, r3
1004d16a:	2b64      	cmp	r3, #100	@ 0x64
1004d16c:	d901      	bls.n	1004d172 <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1004d16e:	2303      	movs	r3, #3
1004d170:	e04e      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004d172:	f7ff fe45 	bl	1004ce00 <LL_RCC_LSE_IsReady>
1004d176:	1e03      	subs	r3, r0, #0
1004d178:	d0f2      	beq.n	1004d160 <HAL_RCC_OscConfig+0x1dc>
1004d17a:	e011      	b.n	1004d1a0 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d17c:	f7fa fdde 	bl	10047d3c <HAL_GetTick>
1004d180:	0003      	movs	r3, r0
1004d182:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004d184:	e008      	b.n	1004d198 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004d186:	f7fa fdd9 	bl	10047d3c <HAL_GetTick>
1004d18a:	0002      	movs	r2, r0
1004d18c:	68fb      	ldr	r3, [r7, #12]
1004d18e:	1ad3      	subs	r3, r2, r3
1004d190:	2b64      	cmp	r3, #100	@ 0x64
1004d192:	d901      	bls.n	1004d198 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
1004d194:	2303      	movs	r3, #3
1004d196:	e03b      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004d198:	f7ff fe32 	bl	1004ce00 <LL_RCC_LSE_IsReady>
1004d19c:	1e03      	subs	r3, r0, #0
1004d19e:	d1f2      	bne.n	1004d186 <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
1004d1a0:	687b      	ldr	r3, [r7, #4]
1004d1a2:	681b      	ldr	r3, [r3, #0]
1004d1a4:	2208      	movs	r2, #8
1004d1a6:	4013      	ands	r3, r2
1004d1a8:	d031      	beq.n	1004d20e <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004d1aa:	687b      	ldr	r3, [r7, #4]
1004d1ac:	695b      	ldr	r3, [r3, #20]
1004d1ae:	2b40      	cmp	r3, #64	@ 0x40
1004d1b0:	d102      	bne.n	1004d1b8 <HAL_RCC_OscConfig+0x234>
1004d1b2:	f7ff fe35 	bl	1004ce20 <LL_RCC_LSE_EnableBypass>
1004d1b6:	e001      	b.n	1004d1bc <HAL_RCC_OscConfig+0x238>
1004d1b8:	f7ff fe40 	bl	1004ce3c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
1004d1bc:	687b      	ldr	r3, [r7, #4]
1004d1be:	695b      	ldr	r3, [r3, #20]
1004d1c0:	2b00      	cmp	r3, #0
1004d1c2:	d012      	beq.n	1004d1ea <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d1c4:	f7fa fdba 	bl	10047d3c <HAL_GetTick>
1004d1c8:	0003      	movs	r3, r0
1004d1ca:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004d1cc:	e008      	b.n	1004d1e0 <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004d1ce:	f7fa fdb5 	bl	10047d3c <HAL_GetTick>
1004d1d2:	0002      	movs	r2, r0
1004d1d4:	68fb      	ldr	r3, [r7, #12]
1004d1d6:	1ad3      	subs	r3, r2, r3
1004d1d8:	2b64      	cmp	r3, #100	@ 0x64
1004d1da:	d901      	bls.n	1004d1e0 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
1004d1dc:	2303      	movs	r3, #3
1004d1de:	e017      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004d1e0:	f7ff fe3a 	bl	1004ce58 <LL_RCC_LSE_IsBypassEnabled>
1004d1e4:	1e03      	subs	r3, r0, #0
1004d1e6:	d0f2      	beq.n	1004d1ce <HAL_RCC_OscConfig+0x24a>
1004d1e8:	e011      	b.n	1004d20e <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004d1ea:	f7fa fda7 	bl	10047d3c <HAL_GetTick>
1004d1ee:	0003      	movs	r3, r0
1004d1f0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004d1f2:	e008      	b.n	1004d206 <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004d1f4:	f7fa fda2 	bl	10047d3c <HAL_GetTick>
1004d1f8:	0002      	movs	r2, r0
1004d1fa:	68fb      	ldr	r3, [r7, #12]
1004d1fc:	1ad3      	subs	r3, r2, r3
1004d1fe:	2b64      	cmp	r3, #100	@ 0x64
1004d200:	d901      	bls.n	1004d206 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
1004d202:	2303      	movs	r3, #3
1004d204:	e004      	b.n	1004d210 <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004d206:	f7ff fe27 	bl	1004ce58 <LL_RCC_LSE_IsBypassEnabled>
1004d20a:	1e03      	subs	r3, r0, #0
1004d20c:	d1f2      	bne.n	1004d1f4 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
1004d20e:	2300      	movs	r3, #0
}
1004d210:	0018      	movs	r0, r3
1004d212:	46bd      	mov	sp, r7
1004d214:	b004      	add	sp, #16
1004d216:	bd80      	pop	{r7, pc}

1004d218 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
1004d218:	b580      	push	{r7, lr}
1004d21a:	b084      	sub	sp, #16
1004d21c:	af00      	add	r7, sp, #0
1004d21e:	6078      	str	r0, [r7, #4]
1004d220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
1004d222:	687b      	ldr	r3, [r7, #4]
1004d224:	2b00      	cmp	r3, #0
1004d226:	d101      	bne.n	1004d22c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
1004d228:	2301      	movs	r3, #1
1004d22a:	e098      	b.n	1004d35e <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004d22c:	4b4e      	ldr	r3, [pc, #312]	@ (1004d368 <HAL_RCC_ClockConfig+0x150>)
1004d22e:	685b      	ldr	r3, [r3, #4]
1004d230:	2230      	movs	r2, #48	@ 0x30
1004d232:	4393      	bics	r3, r2
1004d234:	0019      	movs	r1, r3
1004d236:	4b4c      	ldr	r3, [pc, #304]	@ (1004d368 <HAL_RCC_ClockConfig+0x150>)
1004d238:	683a      	ldr	r2, [r7, #0]
1004d23a:	430a      	orrs	r2, r1
1004d23c:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
1004d23e:	687b      	ldr	r3, [r7, #4]
1004d240:	681b      	ldr	r3, [r3, #0]
1004d242:	2b02      	cmp	r3, #2
1004d244:	d10e      	bne.n	1004d264 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
1004d246:	f7ff fd47 	bl	1004ccd8 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004d24a:	f7ff fd6d 	bl	1004cd28 <LL_RCC_HSI_IsReady>
1004d24e:	1e03      	subs	r3, r0, #0
1004d250:	d101      	bne.n	1004d256 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
1004d252:	2301      	movs	r3, #1
1004d254:	e083      	b.n	1004d35e <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
1004d256:	f7ff fe5d 	bl	1004cf14 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004d25a:	687b      	ldr	r3, [r7, #4]
1004d25c:	685b      	ldr	r3, [r3, #4]
1004d25e:	0018      	movs	r0, r3
1004d260:	f7ff fe7c 	bl	1004cf5c <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
1004d264:	687b      	ldr	r3, [r7, #4]
1004d266:	681b      	ldr	r3, [r3, #0]
1004d268:	2b00      	cmp	r3, #0
1004d26a:	d124      	bne.n	1004d2b6 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004d26c:	f7ff fd5c 	bl	1004cd28 <LL_RCC_HSI_IsReady>
1004d270:	1e03      	subs	r3, r0, #0
1004d272:	d101      	bne.n	1004d278 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
1004d274:	2301      	movs	r3, #1
1004d276:	e072      	b.n	1004d35e <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004d278:	f7ff fce4 	bl	1004cc44 <LL_RCC_HSE_IsReady>
1004d27c:	1e03      	subs	r3, r0, #0
1004d27e:	d101      	bne.n	1004d284 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
1004d280:	2301      	movs	r3, #1
1004d282:	e06c      	b.n	1004d35e <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
1004d284:	f7ff fe38 	bl	1004cef8 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004d288:	f7fa fd58 	bl	10047d3c <HAL_GetTick>
1004d28c:	0003      	movs	r3, r0
1004d28e:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004d290:	e008      	b.n	1004d2a4 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004d292:	f7fa fd53 	bl	10047d3c <HAL_GetTick>
1004d296:	0002      	movs	r2, r0
1004d298:	68fb      	ldr	r3, [r7, #12]
1004d29a:	1ad3      	subs	r3, r2, r3
1004d29c:	2b02      	cmp	r3, #2
1004d29e:	d901      	bls.n	1004d2a4 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
1004d2a0:	2303      	movs	r3, #3
1004d2a2:	e05c      	b.n	1004d35e <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004d2a4:	f7ff fe46 	bl	1004cf34 <LL_RCC_RC64MPLL_IsReady>
1004d2a8:	1e03      	subs	r3, r0, #0
1004d2aa:	d0f2      	beq.n	1004d292 <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004d2ac:	687b      	ldr	r3, [r7, #4]
1004d2ae:	685b      	ldr	r3, [r3, #4]
1004d2b0:	0018      	movs	r0, r3
1004d2b2:	f7ff fe53 	bl	1004cf5c <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004d2b6:	687b      	ldr	r3, [r7, #4]
1004d2b8:	681b      	ldr	r3, [r3, #0]
1004d2ba:	2b01      	cmp	r3, #1
1004d2bc:	d117      	bne.n	1004d2ee <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004d2be:	f7ff fd47 	bl	1004cd50 <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004d2c2:	f7ff fd31 	bl	1004cd28 <LL_RCC_HSI_IsReady>
1004d2c6:	1e03      	subs	r3, r0, #0
1004d2c8:	d001      	beq.n	1004d2ce <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004d2ca:	2301      	movs	r3, #1
1004d2cc:	e047      	b.n	1004d35e <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004d2ce:	f7ff fcb9 	bl	1004cc44 <LL_RCC_HSE_IsReady>
1004d2d2:	1e03      	subs	r3, r0, #0
1004d2d4:	d101      	bne.n	1004d2da <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004d2d6:	2301      	movs	r3, #1
1004d2d8:	e041      	b.n	1004d35e <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004d2da:	4b24      	ldr	r3, [pc, #144]	@ (1004d36c <HAL_RCC_ClockConfig+0x154>)
1004d2dc:	689b      	ldr	r3, [r3, #8]
1004d2de:	22e0      	movs	r2, #224	@ 0xe0
1004d2e0:	4393      	bics	r3, r2
1004d2e2:	0019      	movs	r1, r3
1004d2e4:	687b      	ldr	r3, [r7, #4]
1004d2e6:	685a      	ldr	r2, [r3, #4]
1004d2e8:	4b20      	ldr	r3, [pc, #128]	@ (1004d36c <HAL_RCC_ClockConfig+0x154>)
1004d2ea:	430a      	orrs	r2, r1
1004d2ec:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004d2ee:	4b1e      	ldr	r3, [pc, #120]	@ (1004d368 <HAL_RCC_ClockConfig+0x150>)
1004d2f0:	685b      	ldr	r3, [r3, #4]
1004d2f2:	2230      	movs	r2, #48	@ 0x30
1004d2f4:	4013      	ands	r3, r2
1004d2f6:	683a      	ldr	r2, [r7, #0]
1004d2f8:	429a      	cmp	r2, r3
1004d2fa:	d01d      	beq.n	1004d338 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004d2fc:	4b1a      	ldr	r3, [pc, #104]	@ (1004d368 <HAL_RCC_ClockConfig+0x150>)
1004d2fe:	685b      	ldr	r3, [r3, #4]
1004d300:	2230      	movs	r2, #48	@ 0x30
1004d302:	4393      	bics	r3, r2
1004d304:	0019      	movs	r1, r3
1004d306:	4b18      	ldr	r3, [pc, #96]	@ (1004d368 <HAL_RCC_ClockConfig+0x150>)
1004d308:	683a      	ldr	r2, [r7, #0]
1004d30a:	430a      	orrs	r2, r1
1004d30c:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004d30e:	f7fa fd15 	bl	10047d3c <HAL_GetTick>
1004d312:	0003      	movs	r3, r0
1004d314:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004d316:	e008      	b.n	1004d32a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
1004d318:	f7fa fd10 	bl	10047d3c <HAL_GetTick>
1004d31c:	0002      	movs	r2, r0
1004d31e:	68fb      	ldr	r3, [r7, #12]
1004d320:	1ad3      	subs	r3, r2, r3
1004d322:	2b02      	cmp	r3, #2
1004d324:	d901      	bls.n	1004d32a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004d326:	2303      	movs	r3, #3
1004d328:	e019      	b.n	1004d35e <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004d32a:	4b0f      	ldr	r3, [pc, #60]	@ (1004d368 <HAL_RCC_ClockConfig+0x150>)
1004d32c:	685b      	ldr	r3, [r3, #4]
1004d32e:	2230      	movs	r2, #48	@ 0x30
1004d330:	4013      	ands	r3, r2
1004d332:	683a      	ldr	r2, [r7, #0]
1004d334:	429a      	cmp	r2, r3
1004d336:	d1ef      	bne.n	1004d318 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
1004d338:	2300      	movs	r3, #0
1004d33a:	60bb      	str	r3, [r7, #8]
1004d33c:	e003      	b.n	1004d346 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1004d33e:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004d340:	68bb      	ldr	r3, [r7, #8]
1004d342:	3301      	adds	r3, #1
1004d344:	60bb      	str	r3, [r7, #8]
1004d346:	68bb      	ldr	r3, [r7, #8]
1004d348:	2b05      	cmp	r3, #5
1004d34a:	ddf8      	ble.n	1004d33e <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
1004d34c:	f7fa fb1c 	bl	10047988 <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1004d350:	f7fa fcfe 	bl	10047d50 <HAL_GetTickPrio>
1004d354:	0003      	movs	r3, r0
1004d356:	0018      	movs	r0, r3
1004d358:	f7fa fc96 	bl	10047c88 <HAL_InitTick>
1004d35c:	0003      	movs	r3, r0
}
1004d35e:	0018      	movs	r0, r3
1004d360:	46bd      	mov	sp, r7
1004d362:	b004      	add	sp, #16
1004d364:	bd80      	pop	{r7, pc}
1004d366:	46c0      	nop			@ (mov r8, r8)
1004d368:	40001000 	.word	0x40001000
1004d36c:	48400000 	.word	0x48400000

1004d370 <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004d370:	b580      	push	{r7, lr}
1004d372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
1004d374:	4b02      	ldr	r3, [pc, #8]	@ (1004d380 <HAL_RCC_GetSysClockFreq+0x10>)
1004d376:	681b      	ldr	r3, [r3, #0]
}
1004d378:	0018      	movs	r0, r3
1004d37a:	46bd      	mov	sp, r7
1004d37c:	bd80      	pop	{r7, pc}
1004d37e:	46c0      	nop			@ (mov r8, r8)
1004d380:	2000270c 	.word	0x2000270c

1004d384 <LL_RCC_HSE_IsReady>:
{
1004d384:	b580      	push	{r7, lr}
1004d386:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004d388:	4b07      	ldr	r3, [pc, #28]	@ (1004d3a8 <LL_RCC_HSE_IsReady+0x24>)
1004d38a:	681a      	ldr	r2, [r3, #0]
1004d38c:	2380      	movs	r3, #128	@ 0x80
1004d38e:	029b      	lsls	r3, r3, #10
1004d390:	401a      	ands	r2, r3
1004d392:	2380      	movs	r3, #128	@ 0x80
1004d394:	029b      	lsls	r3, r3, #10
1004d396:	429a      	cmp	r2, r3
1004d398:	d101      	bne.n	1004d39e <LL_RCC_HSE_IsReady+0x1a>
1004d39a:	2301      	movs	r3, #1
1004d39c:	e000      	b.n	1004d3a0 <LL_RCC_HSE_IsReady+0x1c>
1004d39e:	2300      	movs	r3, #0
}
1004d3a0:	0018      	movs	r0, r3
1004d3a2:	46bd      	mov	sp, r7
1004d3a4:	bd80      	pop	{r7, pc}
1004d3a6:	46c0      	nop			@ (mov r8, r8)
1004d3a8:	48400000 	.word	0x48400000

1004d3ac <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004d3ac:	b580      	push	{r7, lr}
1004d3ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004d3b0:	4b05      	ldr	r3, [pc, #20]	@ (1004d3c8 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004d3b2:	689b      	ldr	r3, [r3, #8]
1004d3b4:	2208      	movs	r2, #8
1004d3b6:	4013      	ands	r3, r2
1004d3b8:	2b08      	cmp	r3, #8
1004d3ba:	d101      	bne.n	1004d3c0 <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004d3bc:	2301      	movs	r3, #1
1004d3be:	e000      	b.n	1004d3c2 <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004d3c0:	2300      	movs	r3, #0
}
1004d3c2:	0018      	movs	r0, r3
1004d3c4:	46bd      	mov	sp, r7
1004d3c6:	bd80      	pop	{r7, pc}
1004d3c8:	48400000 	.word	0x48400000

1004d3cc <LL_RCC_LSCO_SetSource>:
{
1004d3cc:	b580      	push	{r7, lr}
1004d3ce:	b082      	sub	sp, #8
1004d3d0:	af00      	add	r7, sp, #0
1004d3d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004d3d4:	4b06      	ldr	r3, [pc, #24]	@ (1004d3f0 <LL_RCC_LSCO_SetSource+0x24>)
1004d3d6:	689b      	ldr	r3, [r3, #8]
1004d3d8:	4a06      	ldr	r2, [pc, #24]	@ (1004d3f4 <LL_RCC_LSCO_SetSource+0x28>)
1004d3da:	4013      	ands	r3, r2
1004d3dc:	0019      	movs	r1, r3
1004d3de:	4b04      	ldr	r3, [pc, #16]	@ (1004d3f0 <LL_RCC_LSCO_SetSource+0x24>)
1004d3e0:	687a      	ldr	r2, [r7, #4]
1004d3e2:	430a      	orrs	r2, r1
1004d3e4:	609a      	str	r2, [r3, #8]
}
1004d3e6:	46c0      	nop			@ (mov r8, r8)
1004d3e8:	46bd      	mov	sp, r7
1004d3ea:	b002      	add	sp, #8
1004d3ec:	bd80      	pop	{r7, pc}
1004d3ee:	46c0      	nop			@ (mov r8, r8)
1004d3f0:	48400000 	.word	0x48400000
1004d3f4:	fffe7fff 	.word	0xfffe7fff

1004d3f8 <LL_RCC_LSCO_GetSource>:
{
1004d3f8:	b580      	push	{r7, lr}
1004d3fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
1004d3fc:	4b03      	ldr	r3, [pc, #12]	@ (1004d40c <LL_RCC_LSCO_GetSource+0x14>)
1004d3fe:	689a      	ldr	r2, [r3, #8]
1004d400:	23c0      	movs	r3, #192	@ 0xc0
1004d402:	025b      	lsls	r3, r3, #9
1004d404:	4013      	ands	r3, r2
}
1004d406:	0018      	movs	r0, r3
1004d408:	46bd      	mov	sp, r7
1004d40a:	bd80      	pop	{r7, pc}
1004d40c:	48400000 	.word	0x48400000

1004d410 <LL_RCC_SetRFClock>:
{
1004d410:	b580      	push	{r7, lr}
1004d412:	b082      	sub	sp, #8
1004d414:	af00      	add	r7, sp, #0
1004d416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
1004d418:	4b06      	ldr	r3, [pc, #24]	@ (1004d434 <LL_RCC_SetRFClock+0x24>)
1004d41a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004d41c:	2204      	movs	r2, #4
1004d41e:	4393      	bics	r3, r2
1004d420:	0019      	movs	r1, r3
1004d422:	4b04      	ldr	r3, [pc, #16]	@ (1004d434 <LL_RCC_SetRFClock+0x24>)
1004d424:	687a      	ldr	r2, [r7, #4]
1004d426:	430a      	orrs	r2, r1
1004d428:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004d42a:	46c0      	nop			@ (mov r8, r8)
1004d42c:	46bd      	mov	sp, r7
1004d42e:	b002      	add	sp, #8
1004d430:	bd80      	pop	{r7, pc}
1004d432:	46c0      	nop			@ (mov r8, r8)
1004d434:	48400000 	.word	0x48400000

1004d438 <LL_RCC_GetRFClock>:
{
1004d438:	b580      	push	{r7, lr}
1004d43a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
1004d43c:	4b03      	ldr	r3, [pc, #12]	@ (1004d44c <LL_RCC_GetRFClock+0x14>)
1004d43e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004d440:	2204      	movs	r2, #4
1004d442:	4013      	ands	r3, r2
}
1004d444:	0018      	movs	r0, r3
1004d446:	46bd      	mov	sp, r7
1004d448:	bd80      	pop	{r7, pc}
1004d44a:	46c0      	nop			@ (mov r8, r8)
1004d44c:	48400000 	.word	0x48400000

1004d450 <LL_RCC_SetSMPSPrescaler>:
{
1004d450:	b580      	push	{r7, lr}
1004d452:	b082      	sub	sp, #8
1004d454:	af00      	add	r7, sp, #0
1004d456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
1004d458:	4b06      	ldr	r3, [pc, #24]	@ (1004d474 <LL_RCC_SetSMPSPrescaler+0x24>)
1004d45a:	689b      	ldr	r3, [r3, #8]
1004d45c:	4a06      	ldr	r2, [pc, #24]	@ (1004d478 <LL_RCC_SetSMPSPrescaler+0x28>)
1004d45e:	4013      	ands	r3, r2
1004d460:	0019      	movs	r1, r3
1004d462:	4b04      	ldr	r3, [pc, #16]	@ (1004d474 <LL_RCC_SetSMPSPrescaler+0x24>)
1004d464:	687a      	ldr	r2, [r7, #4]
1004d466:	430a      	orrs	r2, r1
1004d468:	609a      	str	r2, [r3, #8]
}
1004d46a:	46c0      	nop			@ (mov r8, r8)
1004d46c:	46bd      	mov	sp, r7
1004d46e:	b002      	add	sp, #8
1004d470:	bd80      	pop	{r7, pc}
1004d472:	46c0      	nop			@ (mov r8, r8)
1004d474:	48400000 	.word	0x48400000
1004d478:	ffffefff 	.word	0xffffefff

1004d47c <LL_RCC_GetSMPSPrescaler>:
{
1004d47c:	b580      	push	{r7, lr}
1004d47e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
1004d480:	4b03      	ldr	r3, [pc, #12]	@ (1004d490 <LL_RCC_GetSMPSPrescaler+0x14>)
1004d482:	689a      	ldr	r2, [r3, #8]
1004d484:	2380      	movs	r3, #128	@ 0x80
1004d486:	015b      	lsls	r3, r3, #5
1004d488:	4013      	ands	r3, r2
}
1004d48a:	0018      	movs	r0, r3
1004d48c:	46bd      	mov	sp, r7
1004d48e:	bd80      	pop	{r7, pc}
1004d490:	48400000 	.word	0x48400000

1004d494 <LL_RCC_SetLPUARTClockSource>:
{
1004d494:	b580      	push	{r7, lr}
1004d496:	b082      	sub	sp, #8
1004d498:	af00      	add	r7, sp, #0
1004d49a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
1004d49c:	4b06      	ldr	r3, [pc, #24]	@ (1004d4b8 <LL_RCC_SetLPUARTClockSource+0x24>)
1004d49e:	689b      	ldr	r3, [r3, #8]
1004d4a0:	4a06      	ldr	r2, [pc, #24]	@ (1004d4bc <LL_RCC_SetLPUARTClockSource+0x28>)
1004d4a2:	4013      	ands	r3, r2
1004d4a4:	0019      	movs	r1, r3
1004d4a6:	4b04      	ldr	r3, [pc, #16]	@ (1004d4b8 <LL_RCC_SetLPUARTClockSource+0x24>)
1004d4a8:	687a      	ldr	r2, [r7, #4]
1004d4aa:	430a      	orrs	r2, r1
1004d4ac:	609a      	str	r2, [r3, #8]
}
1004d4ae:	46c0      	nop			@ (mov r8, r8)
1004d4b0:	46bd      	mov	sp, r7
1004d4b2:	b002      	add	sp, #8
1004d4b4:	bd80      	pop	{r7, pc}
1004d4b6:	46c0      	nop			@ (mov r8, r8)
1004d4b8:	48400000 	.word	0x48400000
1004d4bc:	ffffdfff 	.word	0xffffdfff

1004d4c0 <LL_RCC_GetLPUARTClockSource>:
{
1004d4c0:	b580      	push	{r7, lr}
1004d4c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
1004d4c4:	4b03      	ldr	r3, [pc, #12]	@ (1004d4d4 <LL_RCC_GetLPUARTClockSource+0x14>)
1004d4c6:	689a      	ldr	r2, [r3, #8]
1004d4c8:	2380      	movs	r3, #128	@ 0x80
1004d4ca:	019b      	lsls	r3, r3, #6
1004d4cc:	4013      	ands	r3, r2
}
1004d4ce:	0018      	movs	r0, r3
1004d4d0:	46bd      	mov	sp, r7
1004d4d2:	bd80      	pop	{r7, pc}
1004d4d4:	48400000 	.word	0x48400000

1004d4d8 <LL_RCC_SetSPI3I2SClockSource>:
{
1004d4d8:	b580      	push	{r7, lr}
1004d4da:	b082      	sub	sp, #8
1004d4dc:	af00      	add	r7, sp, #0
1004d4de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
1004d4e0:	4b06      	ldr	r3, [pc, #24]	@ (1004d4fc <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004d4e2:	689b      	ldr	r3, [r3, #8]
1004d4e4:	4a06      	ldr	r2, [pc, #24]	@ (1004d500 <LL_RCC_SetSPI3I2SClockSource+0x28>)
1004d4e6:	4013      	ands	r3, r2
1004d4e8:	0019      	movs	r1, r3
1004d4ea:	4b04      	ldr	r3, [pc, #16]	@ (1004d4fc <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004d4ec:	687a      	ldr	r2, [r7, #4]
1004d4ee:	430a      	orrs	r2, r1
1004d4f0:	609a      	str	r2, [r3, #8]
}
1004d4f2:	46c0      	nop			@ (mov r8, r8)
1004d4f4:	46bd      	mov	sp, r7
1004d4f6:	b002      	add	sp, #8
1004d4f8:	bd80      	pop	{r7, pc}
1004d4fa:	46c0      	nop			@ (mov r8, r8)
1004d4fc:	48400000 	.word	0x48400000
1004d500:	ff3fffff 	.word	0xff3fffff

1004d504 <LL_RCC_GetSPI3I2SClockSource>:
{
1004d504:	b580      	push	{r7, lr}
1004d506:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
1004d508:	4b03      	ldr	r3, [pc, #12]	@ (1004d518 <LL_RCC_GetSPI3I2SClockSource+0x14>)
1004d50a:	689a      	ldr	r2, [r3, #8]
1004d50c:	23c0      	movs	r3, #192	@ 0xc0
1004d50e:	041b      	lsls	r3, r3, #16
1004d510:	4013      	ands	r3, r2
}
1004d512:	0018      	movs	r0, r3
1004d514:	46bd      	mov	sp, r7
1004d516:	bd80      	pop	{r7, pc}
1004d518:	48400000 	.word	0x48400000

1004d51c <LL_RCC_RC64MPLL_IsReady>:
{
1004d51c:	b580      	push	{r7, lr}
1004d51e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004d520:	4b07      	ldr	r3, [pc, #28]	@ (1004d540 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004d522:	681a      	ldr	r2, [r3, #0]
1004d524:	2380      	movs	r3, #128	@ 0x80
1004d526:	01db      	lsls	r3, r3, #7
1004d528:	401a      	ands	r2, r3
1004d52a:	2380      	movs	r3, #128	@ 0x80
1004d52c:	01db      	lsls	r3, r3, #7
1004d52e:	429a      	cmp	r2, r3
1004d530:	d101      	bne.n	1004d536 <LL_RCC_RC64MPLL_IsReady+0x1a>
1004d532:	2301      	movs	r3, #1
1004d534:	e000      	b.n	1004d538 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004d536:	2300      	movs	r3, #0
}
1004d538:	0018      	movs	r0, r3
1004d53a:	46bd      	mov	sp, r7
1004d53c:	bd80      	pop	{r7, pc}
1004d53e:	46c0      	nop			@ (mov r8, r8)
1004d540:	48400000 	.word	0x48400000

1004d544 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
1004d544:	b580      	push	{r7, lr}
1004d546:	b082      	sub	sp, #8
1004d548:	af00      	add	r7, sp, #0
1004d54a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
1004d54c:	687b      	ldr	r3, [r7, #4]
1004d54e:	681b      	ldr	r3, [r3, #0]
1004d550:	2201      	movs	r2, #1
1004d552:	4013      	ands	r3, r2
1004d554:	d004      	beq.n	1004d560 <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004d556:	687b      	ldr	r3, [r7, #4]
1004d558:	691b      	ldr	r3, [r3, #16]
1004d55a:	0018      	movs	r0, r3
1004d55c:	f7ff ff58 	bl	1004d410 <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004d560:	687b      	ldr	r3, [r7, #4]
1004d562:	681b      	ldr	r3, [r3, #0]
1004d564:	2202      	movs	r2, #2
1004d566:	4013      	ands	r3, r2
1004d568:	d004      	beq.n	1004d574 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004d56a:	687b      	ldr	r3, [r7, #4]
1004d56c:	695b      	ldr	r3, [r3, #20]
1004d56e:	0018      	movs	r0, r3
1004d570:	f7ff ff6e 	bl	1004d450 <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004d574:	687b      	ldr	r3, [r7, #4]
1004d576:	681b      	ldr	r3, [r3, #0]
1004d578:	2208      	movs	r2, #8
1004d57a:	4013      	ands	r3, r2
1004d57c:	d004      	beq.n	1004d588 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004d57e:	687b      	ldr	r3, [r7, #4]
1004d580:	685b      	ldr	r3, [r3, #4]
1004d582:	0018      	movs	r0, r3
1004d584:	f7ff ffa8 	bl	1004d4d8 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
1004d588:	687b      	ldr	r3, [r7, #4]
1004d58a:	681b      	ldr	r3, [r3, #0]
1004d58c:	2210      	movs	r2, #16
1004d58e:	4013      	ands	r3, r2
1004d590:	d004      	beq.n	1004d59c <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004d592:	687b      	ldr	r3, [r7, #4]
1004d594:	68db      	ldr	r3, [r3, #12]
1004d596:	0018      	movs	r0, r3
1004d598:	f7ff ff7c 	bl	1004d494 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004d59c:	687b      	ldr	r3, [r7, #4]
1004d59e:	689b      	ldr	r3, [r3, #8]
1004d5a0:	2220      	movs	r2, #32
1004d5a2:	4013      	ands	r3, r2
1004d5a4:	d004      	beq.n	1004d5b0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004d5a6:	687b      	ldr	r3, [r7, #4]
1004d5a8:	689b      	ldr	r3, [r3, #8]
1004d5aa:	0018      	movs	r0, r3
1004d5ac:	f7ff ff0e 	bl	1004d3cc <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
1004d5b0:	2300      	movs	r3, #0
}
1004d5b2:	0018      	movs	r0, r3
1004d5b4:	46bd      	mov	sp, r7
1004d5b6:	b002      	add	sp, #8
1004d5b8:	bd80      	pop	{r7, pc}
	...

1004d5bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
1004d5bc:	b580      	push	{r7, lr}
1004d5be:	b084      	sub	sp, #16
1004d5c0:	af00      	add	r7, sp, #0
1004d5c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
1004d5c4:	2300      	movs	r3, #0
1004d5c6:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
1004d5c8:	687b      	ldr	r3, [r7, #4]
1004d5ca:	2b20      	cmp	r3, #32
1004d5cc:	d900      	bls.n	1004d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x14>
1004d5ce:	e07b      	b.n	1004d6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
1004d5d0:	687b      	ldr	r3, [r7, #4]
1004d5d2:	009a      	lsls	r2, r3, #2
1004d5d4:	4b40      	ldr	r3, [pc, #256]	@ (1004d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
1004d5d6:	18d3      	adds	r3, r2, r3
1004d5d8:	681b      	ldr	r3, [r3, #0]
1004d5da:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
1004d5dc:	f7ff ff2c 	bl	1004d438 <LL_RCC_GetRFClock>
1004d5e0:	1e03      	subs	r3, r0, #0
1004d5e2:	d002      	beq.n	1004d5ea <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
1004d5e4:	2b04      	cmp	r3, #4
1004d5e6:	d003      	beq.n	1004d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
1004d5e8:	e071      	b.n	1004d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
1004d5ea:	4b3c      	ldr	r3, [pc, #240]	@ (1004d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004d5ec:	60fb      	str	r3, [r7, #12]
          break;
1004d5ee:	e002      	b.n	1004d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
1004d5f0:	4b3b      	ldr	r3, [pc, #236]	@ (1004d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004d5f2:	60fb      	str	r3, [r7, #12]
          break;
1004d5f4:	46c0      	nop			@ (mov r8, r8)
      break;
1004d5f6:	e06a      	b.n	1004d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
1004d5f8:	f7ff ff40 	bl	1004d47c <LL_RCC_GetSMPSPrescaler>
1004d5fc:	1e03      	subs	r3, r0, #0
1004d5fe:	d004      	beq.n	1004d60a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
1004d600:	2280      	movs	r2, #128	@ 0x80
1004d602:	0152      	lsls	r2, r2, #5
1004d604:	4293      	cmp	r3, r2
1004d606:	d003      	beq.n	1004d610 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
1004d608:	e061      	b.n	1004d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
1004d60a:	4b36      	ldr	r3, [pc, #216]	@ (1004d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
1004d60c:	60fb      	str	r3, [r7, #12]
          break;
1004d60e:	e002      	b.n	1004d616 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
1004d610:	4b35      	ldr	r3, [pc, #212]	@ (1004d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1004d612:	60fb      	str	r3, [r7, #12]
          break;
1004d614:	46c0      	nop			@ (mov r8, r8)
      break;
1004d616:	e05a      	b.n	1004d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004d618:	f7ff fec8 	bl	1004d3ac <LL_RCC_DIRECT_HSE_IsEnabled>
1004d61c:	1e03      	subs	r3, r0, #0
1004d61e:	d005      	beq.n	1004d62c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
1004d620:	f7ff feb0 	bl	1004d384 <LL_RCC_HSE_IsReady>
1004d624:	1e03      	subs	r3, r0, #0
1004d626:	d107      	bne.n	1004d638 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004d628:	2300      	movs	r3, #0
1004d62a:	e051      	b.n	1004d6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
1004d62c:	f7ff ff76 	bl	1004d51c <LL_RCC_RC64MPLL_IsReady>
1004d630:	1e03      	subs	r3, r0, #0
1004d632:	d101      	bne.n	1004d638 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004d634:	2300      	movs	r3, #0
1004d636:	e04b      	b.n	1004d6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
1004d638:	f7ff ff64 	bl	1004d504 <LL_RCC_GetSPI3I2SClockSource>
1004d63c:	0003      	movs	r3, r0
1004d63e:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
1004d640:	68bb      	ldr	r3, [r7, #8]
1004d642:	2b00      	cmp	r3, #0
1004d644:	d101      	bne.n	1004d64a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
1004d646:	4b26      	ldr	r3, [pc, #152]	@ (1004d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004d648:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
1004d64a:	68ba      	ldr	r2, [r7, #8]
1004d64c:	2380      	movs	r3, #128	@ 0x80
1004d64e:	03db      	lsls	r3, r3, #15
1004d650:	429a      	cmp	r2, r3
1004d652:	d101      	bne.n	1004d658 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
1004d654:	4b21      	ldr	r3, [pc, #132]	@ (1004d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004d656:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
1004d658:	68ba      	ldr	r2, [r7, #8]
1004d65a:	2380      	movs	r3, #128	@ 0x80
1004d65c:	041b      	lsls	r3, r3, #16
1004d65e:	429a      	cmp	r2, r3
1004d660:	d134      	bne.n	1004d6cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004d662:	4b22      	ldr	r3, [pc, #136]	@ (1004d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
1004d664:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
1004d666:	e031      	b.n	1004d6cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
1004d668:	f7ff ff2a 	bl	1004d4c0 <LL_RCC_GetLPUARTClockSource>
1004d66c:	0002      	movs	r2, r0
1004d66e:	2380      	movs	r3, #128	@ 0x80
1004d670:	019b      	lsls	r3, r3, #6
1004d672:	429a      	cmp	r2, r3
1004d674:	d103      	bne.n	1004d67e <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1004d676:	2380      	movs	r3, #128	@ 0x80
1004d678:	021b      	lsls	r3, r3, #8
1004d67a:	60fb      	str	r3, [r7, #12]
          break;
1004d67c:	e002      	b.n	1004d684 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004d67e:	4b18      	ldr	r3, [pc, #96]	@ (1004d6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004d680:	60fb      	str	r3, [r7, #12]
          break;
1004d682:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004d684:	e023      	b.n	1004d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
1004d686:	f7ff feb7 	bl	1004d3f8 <LL_RCC_LSCO_GetSource>
1004d68a:	0003      	movs	r3, r0
1004d68c:	22c0      	movs	r2, #192	@ 0xc0
1004d68e:	0252      	lsls	r2, r2, #9
1004d690:	4293      	cmp	r3, r2
1004d692:	d014      	beq.n	1004d6be <HAL_RCCEx_GetPeriphCLKFreq+0x102>
1004d694:	22c0      	movs	r2, #192	@ 0xc0
1004d696:	0252      	lsls	r2, r2, #9
1004d698:	4293      	cmp	r3, r2
1004d69a:	d813      	bhi.n	1004d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
1004d69c:	2280      	movs	r2, #128	@ 0x80
1004d69e:	0212      	lsls	r2, r2, #8
1004d6a0:	4293      	cmp	r3, r2
1004d6a2:	d004      	beq.n	1004d6ae <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
1004d6a4:	2280      	movs	r2, #128	@ 0x80
1004d6a6:	0252      	lsls	r2, r2, #9
1004d6a8:	4293      	cmp	r3, r2
1004d6aa:	d004      	beq.n	1004d6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
1004d6ac:	e00a      	b.n	1004d6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004d6ae:	2380      	movs	r3, #128	@ 0x80
1004d6b0:	021b      	lsls	r3, r3, #8
1004d6b2:	60fb      	str	r3, [r7, #12]
          break;
1004d6b4:	e007      	b.n	1004d6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
1004d6b6:	23fa      	movs	r3, #250	@ 0xfa
1004d6b8:	01db      	lsls	r3, r3, #7
1004d6ba:	60fb      	str	r3, [r7, #12]
          break;
1004d6bc:	e003      	b.n	1004d6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004d6be:	4b0c      	ldr	r3, [pc, #48]	@ (1004d6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
1004d6c0:	60fb      	str	r3, [r7, #12]
          break;
1004d6c2:	e000      	b.n	1004d6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
1004d6c4:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004d6c6:	e002      	b.n	1004d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
1004d6c8:	46c0      	nop			@ (mov r8, r8)
1004d6ca:	e000      	b.n	1004d6ce <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
1004d6cc:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004d6ce:	68fb      	ldr	r3, [r7, #12]
}
1004d6d0:	0018      	movs	r0, r3
1004d6d2:	46bd      	mov	sp, r7
1004d6d4:	b004      	add	sp, #16
1004d6d6:	bd80      	pop	{r7, pc}
1004d6d8:	10069768 	.word	0x10069768
1004d6dc:	01e84800 	.word	0x01e84800
1004d6e0:	00f42400 	.word	0x00f42400
1004d6e4:	007a1200 	.word	0x007a1200
1004d6e8:	003d0900 	.word	0x003d0900
1004d6ec:	03d09000 	.word	0x03d09000
1004d6f0:	00007a12 	.word	0x00007a12

1004d6f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
1004d6f4:	b580      	push	{r7, lr}
1004d6f6:	b082      	sub	sp, #8
1004d6f8:	af00      	add	r7, sp, #0
1004d6fa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
1004d6fc:	687b      	ldr	r3, [r7, #4]
1004d6fe:	2b00      	cmp	r3, #0
1004d700:	d101      	bne.n	1004d706 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
1004d702:	2301      	movs	r3, #1
1004d704:	e02d      	b.n	1004d762 <HAL_RNG_Init+0x6e>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined (RNG_CR_TST_CLK)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* RNG_CR_TST_CLK */

  if (hrng->State == HAL_RNG_STATE_RESET)
1004d706:	687b      	ldr	r3, [r7, #4]
1004d708:	7a5b      	ldrb	r3, [r3, #9]
1004d70a:	b2db      	uxtb	r3, r3
1004d70c:	2b00      	cmp	r3, #0
1004d70e:	d106      	bne.n	1004d71e <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
1004d710:	687b      	ldr	r3, [r7, #4]
1004d712:	2200      	movs	r2, #0
1004d714:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
1004d716:	687b      	ldr	r3, [r7, #4]
1004d718:	0018      	movs	r0, r3
1004d71a:	f7f9 febf 	bl	1004749c <HAL_RNG_MspInit>
  }

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
1004d71e:	687b      	ldr	r3, [r7, #4]
1004d720:	2202      	movs	r2, #2
1004d722:	725a      	strb	r2, [r3, #9]

  /* Reset the CR */
  hrng->Instance->CR = 0U;
1004d724:	687b      	ldr	r3, [r7, #4]
1004d726:	681b      	ldr	r3, [r3, #0]
1004d728:	2200      	movs	r2, #0
1004d72a:	601a      	str	r2, [r3, #0]

#if defined (RNG_CR_TST_CLK)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_TST_CLK, hrng->Init.ClockErrorDetection);
1004d72c:	687b      	ldr	r3, [r7, #4]
1004d72e:	681b      	ldr	r3, [r3, #0]
1004d730:	681b      	ldr	r3, [r3, #0]
1004d732:	2208      	movs	r2, #8
1004d734:	4393      	bics	r3, r2
1004d736:	0019      	movs	r1, r3
1004d738:	687b      	ldr	r3, [r7, #4]
1004d73a:	685a      	ldr	r2, [r3, #4]
1004d73c:	687b      	ldr	r3, [r7, #4]
1004d73e:	681b      	ldr	r3, [r3, #0]
1004d740:	430a      	orrs	r2, r1
1004d742:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_TST_CLK */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
1004d744:	687b      	ldr	r3, [r7, #4]
1004d746:	681b      	ldr	r3, [r3, #0]
1004d748:	681a      	ldr	r2, [r3, #0]
1004d74a:	687b      	ldr	r3, [r7, #4]
1004d74c:	681b      	ldr	r3, [r3, #0]
1004d74e:	2104      	movs	r1, #4
1004d750:	438a      	bics	r2, r1
1004d752:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
1004d754:	687b      	ldr	r3, [r7, #4]
1004d756:	2201      	movs	r2, #1
1004d758:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
1004d75a:	687b      	ldr	r3, [r7, #4]
1004d75c:	2200      	movs	r2, #0
1004d75e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
1004d760:	2300      	movs	r3, #0
}
1004d762:	0018      	movs	r0, r3
1004d764:	46bd      	mov	sp, r7
1004d766:	b002      	add	sp, #8
1004d768:	bd80      	pop	{r7, pc}

1004d76a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
1004d76a:	b580      	push	{r7, lr}
1004d76c:	b082      	sub	sp, #8
1004d76e:	af00      	add	r7, sp, #0
1004d770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
1004d772:	687b      	ldr	r3, [r7, #4]
1004d774:	2b00      	cmp	r3, #0
1004d776:	d101      	bne.n	1004d77c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
1004d778:	2301      	movs	r3, #1
1004d77a:	e036      	b.n	1004d7ea <HAL_TIM_Base_Init+0x80>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
1004d77c:	687b      	ldr	r3, [r7, #4]
1004d77e:	2235      	movs	r2, #53	@ 0x35
1004d780:	5c9b      	ldrb	r3, [r3, r2]
1004d782:	b2db      	uxtb	r3, r3
1004d784:	2b00      	cmp	r3, #0
1004d786:	d107      	bne.n	1004d798 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
1004d788:	687b      	ldr	r3, [r7, #4]
1004d78a:	2234      	movs	r2, #52	@ 0x34
1004d78c:	2100      	movs	r1, #0
1004d78e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
1004d790:	687b      	ldr	r3, [r7, #4]
1004d792:	0018      	movs	r0, r3
1004d794:	f7f9 fe96 	bl	100474c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004d798:	687b      	ldr	r3, [r7, #4]
1004d79a:	2235      	movs	r2, #53	@ 0x35
1004d79c:	2102      	movs	r1, #2
1004d79e:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
1004d7a0:	687b      	ldr	r3, [r7, #4]
1004d7a2:	681a      	ldr	r2, [r3, #0]
1004d7a4:	687b      	ldr	r3, [r7, #4]
1004d7a6:	3304      	adds	r3, #4
1004d7a8:	0019      	movs	r1, r3
1004d7aa:	0010      	movs	r0, r2
1004d7ac:	f000 fa3a 	bl	1004dc24 <TIM_Base_SetConfig>

#if defined(TIM_DMA_SUPPORT)
  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
1004d7b0:	687b      	ldr	r3, [r7, #4]
1004d7b2:	223b      	movs	r2, #59	@ 0x3b
1004d7b4:	2101      	movs	r1, #1
1004d7b6:	5499      	strb	r1, [r3, r2]
#endif /* TIM_DMA_SUPPORT */

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004d7b8:	687b      	ldr	r3, [r7, #4]
1004d7ba:	2236      	movs	r2, #54	@ 0x36
1004d7bc:	2101      	movs	r1, #1
1004d7be:	5499      	strb	r1, [r3, r2]
1004d7c0:	687b      	ldr	r3, [r7, #4]
1004d7c2:	2237      	movs	r2, #55	@ 0x37
1004d7c4:	2101      	movs	r1, #1
1004d7c6:	5499      	strb	r1, [r3, r2]
1004d7c8:	687b      	ldr	r3, [r7, #4]
1004d7ca:	2238      	movs	r2, #56	@ 0x38
1004d7cc:	2101      	movs	r1, #1
1004d7ce:	5499      	strb	r1, [r3, r2]
1004d7d0:	687b      	ldr	r3, [r7, #4]
1004d7d2:	2239      	movs	r2, #57	@ 0x39
1004d7d4:	2101      	movs	r1, #1
1004d7d6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004d7d8:	687b      	ldr	r3, [r7, #4]
1004d7da:	223a      	movs	r2, #58	@ 0x3a
1004d7dc:	2101      	movs	r1, #1
1004d7de:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
1004d7e0:	687b      	ldr	r3, [r7, #4]
1004d7e2:	2235      	movs	r2, #53	@ 0x35
1004d7e4:	2101      	movs	r1, #1
1004d7e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004d7e8:	2300      	movs	r3, #0
}
1004d7ea:	0018      	movs	r0, r3
1004d7ec:	46bd      	mov	sp, r7
1004d7ee:	b002      	add	sp, #8
1004d7f0:	bd80      	pop	{r7, pc}
	...

1004d7f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
1004d7f4:	b580      	push	{r7, lr}
1004d7f6:	b084      	sub	sp, #16
1004d7f8:	af00      	add	r7, sp, #0
1004d7fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
1004d7fc:	687b      	ldr	r3, [r7, #4]
1004d7fe:	2235      	movs	r2, #53	@ 0x35
1004d800:	5c9b      	ldrb	r3, [r3, r2]
1004d802:	b2db      	uxtb	r3, r3
1004d804:	2b01      	cmp	r3, #1
1004d806:	d001      	beq.n	1004d80c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
1004d808:	2301      	movs	r3, #1
1004d80a:	e030      	b.n	1004d86e <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004d80c:	687b      	ldr	r3, [r7, #4]
1004d80e:	2235      	movs	r2, #53	@ 0x35
1004d810:	2102      	movs	r1, #2
1004d812:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
1004d814:	687b      	ldr	r3, [r7, #4]
1004d816:	681b      	ldr	r3, [r3, #0]
1004d818:	68da      	ldr	r2, [r3, #12]
1004d81a:	687b      	ldr	r3, [r7, #4]
1004d81c:	681b      	ldr	r3, [r3, #0]
1004d81e:	2101      	movs	r1, #1
1004d820:	430a      	orrs	r2, r1
1004d822:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
1004d824:	687b      	ldr	r3, [r7, #4]
1004d826:	681b      	ldr	r3, [r3, #0]
1004d828:	4a13      	ldr	r2, [pc, #76]	@ (1004d878 <HAL_TIM_Base_Start_IT+0x84>)
1004d82a:	4293      	cmp	r3, r2
1004d82c:	d116      	bne.n	1004d85c <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1004d82e:	687b      	ldr	r3, [r7, #4]
1004d830:	681b      	ldr	r3, [r3, #0]
1004d832:	689b      	ldr	r3, [r3, #8]
1004d834:	4a11      	ldr	r2, [pc, #68]	@ (1004d87c <HAL_TIM_Base_Start_IT+0x88>)
1004d836:	4013      	ands	r3, r2
1004d838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1004d83a:	68fb      	ldr	r3, [r7, #12]
1004d83c:	2b06      	cmp	r3, #6
1004d83e:	d015      	beq.n	1004d86c <HAL_TIM_Base_Start_IT+0x78>
1004d840:	68fa      	ldr	r2, [r7, #12]
1004d842:	2380      	movs	r3, #128	@ 0x80
1004d844:	025b      	lsls	r3, r3, #9
1004d846:	429a      	cmp	r2, r3
1004d848:	d010      	beq.n	1004d86c <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
1004d84a:	687b      	ldr	r3, [r7, #4]
1004d84c:	681b      	ldr	r3, [r3, #0]
1004d84e:	681a      	ldr	r2, [r3, #0]
1004d850:	687b      	ldr	r3, [r7, #4]
1004d852:	681b      	ldr	r3, [r3, #0]
1004d854:	2101      	movs	r1, #1
1004d856:	430a      	orrs	r2, r1
1004d858:	601a      	str	r2, [r3, #0]
1004d85a:	e007      	b.n	1004d86c <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
1004d85c:	687b      	ldr	r3, [r7, #4]
1004d85e:	681b      	ldr	r3, [r3, #0]
1004d860:	681a      	ldr	r2, [r3, #0]
1004d862:	687b      	ldr	r3, [r7, #4]
1004d864:	681b      	ldr	r3, [r3, #0]
1004d866:	2101      	movs	r1, #1
1004d868:	430a      	orrs	r2, r1
1004d86a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
1004d86c:	2300      	movs	r3, #0
}
1004d86e:	0018      	movs	r0, r3
1004d870:	46bd      	mov	sp, r7
1004d872:	b004      	add	sp, #16
1004d874:	bd80      	pop	{r7, pc}
1004d876:	46c0      	nop			@ (mov r8, r8)
1004d878:	40002000 	.word	0x40002000
1004d87c:	00010007 	.word	0x00010007

1004d880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
1004d880:	b580      	push	{r7, lr}
1004d882:	b084      	sub	sp, #16
1004d884:	af00      	add	r7, sp, #0
1004d886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
1004d888:	687b      	ldr	r3, [r7, #4]
1004d88a:	681b      	ldr	r3, [r3, #0]
1004d88c:	68db      	ldr	r3, [r3, #12]
1004d88e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
1004d890:	687b      	ldr	r3, [r7, #4]
1004d892:	681b      	ldr	r3, [r3, #0]
1004d894:	691b      	ldr	r3, [r3, #16]
1004d896:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
1004d898:	68bb      	ldr	r3, [r7, #8]
1004d89a:	2202      	movs	r2, #2
1004d89c:	4013      	ands	r3, r2
1004d89e:	d021      	beq.n	1004d8e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
1004d8a0:	68fb      	ldr	r3, [r7, #12]
1004d8a2:	2202      	movs	r2, #2
1004d8a4:	4013      	ands	r3, r2
1004d8a6:	d01d      	beq.n	1004d8e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
1004d8a8:	687b      	ldr	r3, [r7, #4]
1004d8aa:	681b      	ldr	r3, [r3, #0]
1004d8ac:	2203      	movs	r2, #3
1004d8ae:	4252      	negs	r2, r2
1004d8b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
1004d8b2:	687b      	ldr	r3, [r7, #4]
1004d8b4:	2201      	movs	r2, #1
1004d8b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
1004d8b8:	687b      	ldr	r3, [r7, #4]
1004d8ba:	681b      	ldr	r3, [r3, #0]
1004d8bc:	699b      	ldr	r3, [r3, #24]
1004d8be:	2203      	movs	r2, #3
1004d8c0:	4013      	ands	r3, r2
1004d8c2:	d004      	beq.n	1004d8ce <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
1004d8c4:	687b      	ldr	r3, [r7, #4]
1004d8c6:	0018      	movs	r0, r3
1004d8c8:	f000 f994 	bl	1004dbf4 <HAL_TIM_IC_CaptureCallback>
1004d8cc:	e007      	b.n	1004d8de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
1004d8ce:	687b      	ldr	r3, [r7, #4]
1004d8d0:	0018      	movs	r0, r3
1004d8d2:	f000 f987 	bl	1004dbe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
1004d8d6:	687b      	ldr	r3, [r7, #4]
1004d8d8:	0018      	movs	r0, r3
1004d8da:	f000 f993 	bl	1004dc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004d8de:	687b      	ldr	r3, [r7, #4]
1004d8e0:	2200      	movs	r2, #0
1004d8e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
1004d8e4:	68bb      	ldr	r3, [r7, #8]
1004d8e6:	2204      	movs	r2, #4
1004d8e8:	4013      	ands	r3, r2
1004d8ea:	d022      	beq.n	1004d932 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
1004d8ec:	68fb      	ldr	r3, [r7, #12]
1004d8ee:	2204      	movs	r2, #4
1004d8f0:	4013      	ands	r3, r2
1004d8f2:	d01e      	beq.n	1004d932 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
1004d8f4:	687b      	ldr	r3, [r7, #4]
1004d8f6:	681b      	ldr	r3, [r3, #0]
1004d8f8:	2205      	movs	r2, #5
1004d8fa:	4252      	negs	r2, r2
1004d8fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
1004d8fe:	687b      	ldr	r3, [r7, #4]
1004d900:	2202      	movs	r2, #2
1004d902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
1004d904:	687b      	ldr	r3, [r7, #4]
1004d906:	681b      	ldr	r3, [r3, #0]
1004d908:	699a      	ldr	r2, [r3, #24]
1004d90a:	23c0      	movs	r3, #192	@ 0xc0
1004d90c:	009b      	lsls	r3, r3, #2
1004d90e:	4013      	ands	r3, r2
1004d910:	d004      	beq.n	1004d91c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004d912:	687b      	ldr	r3, [r7, #4]
1004d914:	0018      	movs	r0, r3
1004d916:	f000 f96d 	bl	1004dbf4 <HAL_TIM_IC_CaptureCallback>
1004d91a:	e007      	b.n	1004d92c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004d91c:	687b      	ldr	r3, [r7, #4]
1004d91e:	0018      	movs	r0, r3
1004d920:	f000 f960 	bl	1004dbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004d924:	687b      	ldr	r3, [r7, #4]
1004d926:	0018      	movs	r0, r3
1004d928:	f000 f96c 	bl	1004dc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004d92c:	687b      	ldr	r3, [r7, #4]
1004d92e:	2200      	movs	r2, #0
1004d930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
1004d932:	68bb      	ldr	r3, [r7, #8]
1004d934:	2208      	movs	r2, #8
1004d936:	4013      	ands	r3, r2
1004d938:	d021      	beq.n	1004d97e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
1004d93a:	68fb      	ldr	r3, [r7, #12]
1004d93c:	2208      	movs	r2, #8
1004d93e:	4013      	ands	r3, r2
1004d940:	d01d      	beq.n	1004d97e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
1004d942:	687b      	ldr	r3, [r7, #4]
1004d944:	681b      	ldr	r3, [r3, #0]
1004d946:	2209      	movs	r2, #9
1004d948:	4252      	negs	r2, r2
1004d94a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1004d94c:	687b      	ldr	r3, [r7, #4]
1004d94e:	2204      	movs	r2, #4
1004d950:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
1004d952:	687b      	ldr	r3, [r7, #4]
1004d954:	681b      	ldr	r3, [r3, #0]
1004d956:	69db      	ldr	r3, [r3, #28]
1004d958:	2203      	movs	r2, #3
1004d95a:	4013      	ands	r3, r2
1004d95c:	d004      	beq.n	1004d968 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004d95e:	687b      	ldr	r3, [r7, #4]
1004d960:	0018      	movs	r0, r3
1004d962:	f000 f947 	bl	1004dbf4 <HAL_TIM_IC_CaptureCallback>
1004d966:	e007      	b.n	1004d978 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004d968:	687b      	ldr	r3, [r7, #4]
1004d96a:	0018      	movs	r0, r3
1004d96c:	f000 f93a 	bl	1004dbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004d970:	687b      	ldr	r3, [r7, #4]
1004d972:	0018      	movs	r0, r3
1004d974:	f000 f946 	bl	1004dc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004d978:	687b      	ldr	r3, [r7, #4]
1004d97a:	2200      	movs	r2, #0
1004d97c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
1004d97e:	68bb      	ldr	r3, [r7, #8]
1004d980:	2210      	movs	r2, #16
1004d982:	4013      	ands	r3, r2
1004d984:	d022      	beq.n	1004d9cc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
1004d986:	68fb      	ldr	r3, [r7, #12]
1004d988:	2210      	movs	r2, #16
1004d98a:	4013      	ands	r3, r2
1004d98c:	d01e      	beq.n	1004d9cc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
1004d98e:	687b      	ldr	r3, [r7, #4]
1004d990:	681b      	ldr	r3, [r3, #0]
1004d992:	2211      	movs	r2, #17
1004d994:	4252      	negs	r2, r2
1004d996:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
1004d998:	687b      	ldr	r3, [r7, #4]
1004d99a:	2208      	movs	r2, #8
1004d99c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
1004d99e:	687b      	ldr	r3, [r7, #4]
1004d9a0:	681b      	ldr	r3, [r3, #0]
1004d9a2:	69da      	ldr	r2, [r3, #28]
1004d9a4:	23c0      	movs	r3, #192	@ 0xc0
1004d9a6:	009b      	lsls	r3, r3, #2
1004d9a8:	4013      	ands	r3, r2
1004d9aa:	d004      	beq.n	1004d9b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004d9ac:	687b      	ldr	r3, [r7, #4]
1004d9ae:	0018      	movs	r0, r3
1004d9b0:	f000 f920 	bl	1004dbf4 <HAL_TIM_IC_CaptureCallback>
1004d9b4:	e007      	b.n	1004d9c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004d9b6:	687b      	ldr	r3, [r7, #4]
1004d9b8:	0018      	movs	r0, r3
1004d9ba:	f000 f913 	bl	1004dbe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004d9be:	687b      	ldr	r3, [r7, #4]
1004d9c0:	0018      	movs	r0, r3
1004d9c2:	f000 f91f 	bl	1004dc04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004d9c6:	687b      	ldr	r3, [r7, #4]
1004d9c8:	2200      	movs	r2, #0
1004d9ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
1004d9cc:	68bb      	ldr	r3, [r7, #8]
1004d9ce:	2201      	movs	r2, #1
1004d9d0:	4013      	ands	r3, r2
1004d9d2:	d00c      	beq.n	1004d9ee <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
1004d9d4:	68fb      	ldr	r3, [r7, #12]
1004d9d6:	2201      	movs	r2, #1
1004d9d8:	4013      	ands	r3, r2
1004d9da:	d008      	beq.n	1004d9ee <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
1004d9dc:	687b      	ldr	r3, [r7, #4]
1004d9de:	681b      	ldr	r3, [r3, #0]
1004d9e0:	2202      	movs	r2, #2
1004d9e2:	4252      	negs	r2, r2
1004d9e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
1004d9e6:	687b      	ldr	r3, [r7, #4]
1004d9e8:	0018      	movs	r0, r3
1004d9ea:	f000 f8f3 	bl	1004dbd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
1004d9ee:	68bb      	ldr	r3, [r7, #8]
1004d9f0:	2280      	movs	r2, #128	@ 0x80
1004d9f2:	4013      	ands	r3, r2
1004d9f4:	d00c      	beq.n	1004da10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
1004d9f6:	68fb      	ldr	r3, [r7, #12]
1004d9f8:	2280      	movs	r2, #128	@ 0x80
1004d9fa:	4013      	ands	r3, r2
1004d9fc:	d008      	beq.n	1004da10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
1004d9fe:	687b      	ldr	r3, [r7, #4]
1004da00:	681b      	ldr	r3, [r3, #0]
1004da02:	2281      	movs	r2, #129	@ 0x81
1004da04:	4252      	negs	r2, r2
1004da06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
1004da08:	687b      	ldr	r3, [r7, #4]
1004da0a:	0018      	movs	r0, r3
1004da0c:	f000 fa08 	bl	1004de20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
1004da10:	68bb      	ldr	r3, [r7, #8]
1004da12:	2240      	movs	r2, #64	@ 0x40
1004da14:	4013      	ands	r3, r2
1004da16:	d00c      	beq.n	1004da32 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
1004da18:	68fb      	ldr	r3, [r7, #12]
1004da1a:	2240      	movs	r2, #64	@ 0x40
1004da1c:	4013      	ands	r3, r2
1004da1e:	d008      	beq.n	1004da32 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
1004da20:	687b      	ldr	r3, [r7, #4]
1004da22:	681b      	ldr	r3, [r3, #0]
1004da24:	2241      	movs	r2, #65	@ 0x41
1004da26:	4252      	negs	r2, r2
1004da28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
1004da2a:	687b      	ldr	r3, [r7, #4]
1004da2c:	0018      	movs	r0, r3
1004da2e:	f000 f8f1 	bl	1004dc14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
1004da32:	68bb      	ldr	r3, [r7, #8]
1004da34:	2220      	movs	r2, #32
1004da36:	4013      	ands	r3, r2
1004da38:	d00c      	beq.n	1004da54 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
1004da3a:	68fb      	ldr	r3, [r7, #12]
1004da3c:	2220      	movs	r2, #32
1004da3e:	4013      	ands	r3, r2
1004da40:	d008      	beq.n	1004da54 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
1004da42:	687b      	ldr	r3, [r7, #4]
1004da44:	681b      	ldr	r3, [r3, #0]
1004da46:	2221      	movs	r2, #33	@ 0x21
1004da48:	4252      	negs	r2, r2
1004da4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
1004da4c:	687b      	ldr	r3, [r7, #4]
1004da4e:	0018      	movs	r0, r3
1004da50:	f000 f9de 	bl	1004de10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
1004da54:	46c0      	nop			@ (mov r8, r8)
1004da56:	46bd      	mov	sp, r7
1004da58:	b004      	add	sp, #16
1004da5a:	bd80      	pop	{r7, pc}

1004da5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
1004da5c:	b580      	push	{r7, lr}
1004da5e:	b084      	sub	sp, #16
1004da60:	af00      	add	r7, sp, #0
1004da62:	6078      	str	r0, [r7, #4]
1004da64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004da66:	230f      	movs	r3, #15
1004da68:	18fb      	adds	r3, r7, r3
1004da6a:	2200      	movs	r2, #0
1004da6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
1004da6e:	687b      	ldr	r3, [r7, #4]
1004da70:	2234      	movs	r2, #52	@ 0x34
1004da72:	5c9b      	ldrb	r3, [r3, r2]
1004da74:	2b01      	cmp	r3, #1
1004da76:	d101      	bne.n	1004da7c <HAL_TIM_ConfigClockSource+0x20>
1004da78:	2302      	movs	r3, #2
1004da7a:	e0a2      	b.n	1004dbc2 <HAL_TIM_ConfigClockSource+0x166>
1004da7c:	687b      	ldr	r3, [r7, #4]
1004da7e:	2234      	movs	r2, #52	@ 0x34
1004da80:	2101      	movs	r1, #1
1004da82:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
1004da84:	687b      	ldr	r3, [r7, #4]
1004da86:	2235      	movs	r2, #53	@ 0x35
1004da88:	2102      	movs	r1, #2
1004da8a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
1004da8c:	687b      	ldr	r3, [r7, #4]
1004da8e:	681b      	ldr	r3, [r3, #0]
1004da90:	689b      	ldr	r3, [r3, #8]
1004da92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
1004da94:	68bb      	ldr	r3, [r7, #8]
1004da96:	4a4d      	ldr	r2, [pc, #308]	@ (1004dbcc <HAL_TIM_ConfigClockSource+0x170>)
1004da98:	4013      	ands	r3, r2
1004da9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004da9c:	68bb      	ldr	r3, [r7, #8]
1004da9e:	4a4c      	ldr	r2, [pc, #304]	@ (1004dbd0 <HAL_TIM_ConfigClockSource+0x174>)
1004daa0:	4013      	ands	r3, r2
1004daa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
1004daa4:	687b      	ldr	r3, [r7, #4]
1004daa6:	681b      	ldr	r3, [r3, #0]
1004daa8:	68ba      	ldr	r2, [r7, #8]
1004daaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
1004daac:	683b      	ldr	r3, [r7, #0]
1004daae:	681b      	ldr	r3, [r3, #0]
1004dab0:	2280      	movs	r2, #128	@ 0x80
1004dab2:	0192      	lsls	r2, r2, #6
1004dab4:	4293      	cmp	r3, r2
1004dab6:	d02f      	beq.n	1004db18 <HAL_TIM_ConfigClockSource+0xbc>
1004dab8:	2280      	movs	r2, #128	@ 0x80
1004daba:	0192      	lsls	r2, r2, #6
1004dabc:	4293      	cmp	r3, r2
1004dabe:	d900      	bls.n	1004dac2 <HAL_TIM_ConfigClockSource+0x66>
1004dac0:	e06e      	b.n	1004dba0 <HAL_TIM_ConfigClockSource+0x144>
1004dac2:	2280      	movs	r2, #128	@ 0x80
1004dac4:	0152      	lsls	r2, r2, #5
1004dac6:	4293      	cmp	r3, r2
1004dac8:	d100      	bne.n	1004dacc <HAL_TIM_ConfigClockSource+0x70>
1004daca:	e06e      	b.n	1004dbaa <HAL_TIM_ConfigClockSource+0x14e>
1004dacc:	2280      	movs	r2, #128	@ 0x80
1004dace:	0152      	lsls	r2, r2, #5
1004dad0:	4293      	cmp	r3, r2
1004dad2:	d865      	bhi.n	1004dba0 <HAL_TIM_ConfigClockSource+0x144>
1004dad4:	2b70      	cmp	r3, #112	@ 0x70
1004dad6:	d008      	beq.n	1004daea <HAL_TIM_ConfigClockSource+0x8e>
1004dad8:	d862      	bhi.n	1004dba0 <HAL_TIM_ConfigClockSource+0x144>
1004dada:	2b60      	cmp	r3, #96	@ 0x60
1004dadc:	d040      	beq.n	1004db60 <HAL_TIM_ConfigClockSource+0x104>
1004dade:	d85f      	bhi.n	1004dba0 <HAL_TIM_ConfigClockSource+0x144>
1004dae0:	2b40      	cmp	r3, #64	@ 0x40
1004dae2:	d04d      	beq.n	1004db80 <HAL_TIM_ConfigClockSource+0x124>
1004dae4:	2b50      	cmp	r3, #80	@ 0x50
1004dae6:	d02b      	beq.n	1004db40 <HAL_TIM_ConfigClockSource+0xe4>
1004dae8:	e05a      	b.n	1004dba0 <HAL_TIM_ConfigClockSource+0x144>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004daea:	687b      	ldr	r3, [r7, #4]
1004daec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004daee:	683b      	ldr	r3, [r7, #0]
1004daf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004daf2:	683b      	ldr	r3, [r7, #0]
1004daf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004daf6:	683b      	ldr	r3, [r7, #0]
1004daf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004dafa:	f000 f969 	bl	1004ddd0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
1004dafe:	687b      	ldr	r3, [r7, #4]
1004db00:	681b      	ldr	r3, [r3, #0]
1004db02:	689b      	ldr	r3, [r3, #8]
1004db04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
1004db06:	68bb      	ldr	r3, [r7, #8]
1004db08:	2277      	movs	r2, #119	@ 0x77
1004db0a:	4313      	orrs	r3, r2
1004db0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
1004db0e:	687b      	ldr	r3, [r7, #4]
1004db10:	681b      	ldr	r3, [r3, #0]
1004db12:	68ba      	ldr	r2, [r7, #8]
1004db14:	609a      	str	r2, [r3, #8]
      break;
1004db16:	e049      	b.n	1004dbac <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004db18:	687b      	ldr	r3, [r7, #4]
1004db1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004db1c:	683b      	ldr	r3, [r7, #0]
1004db1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004db20:	683b      	ldr	r3, [r7, #0]
1004db22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004db24:	683b      	ldr	r3, [r7, #0]
1004db26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004db28:	f000 f952 	bl	1004ddd0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
1004db2c:	687b      	ldr	r3, [r7, #4]
1004db2e:	681b      	ldr	r3, [r3, #0]
1004db30:	689a      	ldr	r2, [r3, #8]
1004db32:	687b      	ldr	r3, [r7, #4]
1004db34:	681b      	ldr	r3, [r3, #0]
1004db36:	2180      	movs	r1, #128	@ 0x80
1004db38:	01c9      	lsls	r1, r1, #7
1004db3a:	430a      	orrs	r2, r1
1004db3c:	609a      	str	r2, [r3, #8]
      break;
1004db3e:	e035      	b.n	1004dbac <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004db40:	687b      	ldr	r3, [r7, #4]
1004db42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004db44:	683b      	ldr	r3, [r7, #0]
1004db46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004db48:	683b      	ldr	r3, [r7, #0]
1004db4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004db4c:	001a      	movs	r2, r3
1004db4e:	f000 f8c5 	bl	1004dcdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
1004db52:	687b      	ldr	r3, [r7, #4]
1004db54:	681b      	ldr	r3, [r3, #0]
1004db56:	2150      	movs	r1, #80	@ 0x50
1004db58:	0018      	movs	r0, r3
1004db5a:	f000 f91f 	bl	1004dd9c <TIM_ITRx_SetConfig>
      break;
1004db5e:	e025      	b.n	1004dbac <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
1004db60:	687b      	ldr	r3, [r7, #4]
1004db62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004db64:	683b      	ldr	r3, [r7, #0]
1004db66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004db68:	683b      	ldr	r3, [r7, #0]
1004db6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
1004db6c:	001a      	movs	r2, r3
1004db6e:	f000 f8e3 	bl	1004dd38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
1004db72:	687b      	ldr	r3, [r7, #4]
1004db74:	681b      	ldr	r3, [r3, #0]
1004db76:	2160      	movs	r1, #96	@ 0x60
1004db78:	0018      	movs	r0, r3
1004db7a:	f000 f90f 	bl	1004dd9c <TIM_ITRx_SetConfig>
      break;
1004db7e:	e015      	b.n	1004dbac <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004db80:	687b      	ldr	r3, [r7, #4]
1004db82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004db84:	683b      	ldr	r3, [r7, #0]
1004db86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004db88:	683b      	ldr	r3, [r7, #0]
1004db8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004db8c:	001a      	movs	r2, r3
1004db8e:	f000 f8a5 	bl	1004dcdc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
1004db92:	687b      	ldr	r3, [r7, #4]
1004db94:	681b      	ldr	r3, [r3, #0]
1004db96:	2140      	movs	r1, #64	@ 0x40
1004db98:	0018      	movs	r0, r3
1004db9a:	f000 f8ff 	bl	1004dd9c <TIM_ITRx_SetConfig>
      break;
1004db9e:	e005      	b.n	1004dbac <HAL_TIM_ConfigClockSource+0x150>
    }


    default:
      status = HAL_ERROR;
1004dba0:	230f      	movs	r3, #15
1004dba2:	18fb      	adds	r3, r7, r3
1004dba4:	2201      	movs	r2, #1
1004dba6:	701a      	strb	r2, [r3, #0]
      break;
1004dba8:	e000      	b.n	1004dbac <HAL_TIM_ConfigClockSource+0x150>
      break;
1004dbaa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
1004dbac:	687b      	ldr	r3, [r7, #4]
1004dbae:	2235      	movs	r2, #53	@ 0x35
1004dbb0:	2101      	movs	r1, #1
1004dbb2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
1004dbb4:	687b      	ldr	r3, [r7, #4]
1004dbb6:	2234      	movs	r2, #52	@ 0x34
1004dbb8:	2100      	movs	r1, #0
1004dbba:	5499      	strb	r1, [r3, r2]

  return status;
1004dbbc:	230f      	movs	r3, #15
1004dbbe:	18fb      	adds	r3, r7, r3
1004dbc0:	781b      	ldrb	r3, [r3, #0]
}
1004dbc2:	0018      	movs	r0, r3
1004dbc4:	46bd      	mov	sp, r7
1004dbc6:	b004      	add	sp, #16
1004dbc8:	bd80      	pop	{r7, pc}
1004dbca:	46c0      	nop			@ (mov r8, r8)
1004dbcc:	fffeff88 	.word	0xfffeff88
1004dbd0:	ffff00ff 	.word	0xffff00ff

1004dbd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
1004dbd4:	b580      	push	{r7, lr}
1004dbd6:	b082      	sub	sp, #8
1004dbd8:	af00      	add	r7, sp, #0
1004dbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
1004dbdc:	46c0      	nop			@ (mov r8, r8)
1004dbde:	46bd      	mov	sp, r7
1004dbe0:	b002      	add	sp, #8
1004dbe2:	bd80      	pop	{r7, pc}

1004dbe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
1004dbe4:	b580      	push	{r7, lr}
1004dbe6:	b082      	sub	sp, #8
1004dbe8:	af00      	add	r7, sp, #0
1004dbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
1004dbec:	46c0      	nop			@ (mov r8, r8)
1004dbee:	46bd      	mov	sp, r7
1004dbf0:	b002      	add	sp, #8
1004dbf2:	bd80      	pop	{r7, pc}

1004dbf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
1004dbf4:	b580      	push	{r7, lr}
1004dbf6:	b082      	sub	sp, #8
1004dbf8:	af00      	add	r7, sp, #0
1004dbfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
1004dbfc:	46c0      	nop			@ (mov r8, r8)
1004dbfe:	46bd      	mov	sp, r7
1004dc00:	b002      	add	sp, #8
1004dc02:	bd80      	pop	{r7, pc}

1004dc04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
1004dc04:	b580      	push	{r7, lr}
1004dc06:	b082      	sub	sp, #8
1004dc08:	af00      	add	r7, sp, #0
1004dc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
1004dc0c:	46c0      	nop			@ (mov r8, r8)
1004dc0e:	46bd      	mov	sp, r7
1004dc10:	b002      	add	sp, #8
1004dc12:	bd80      	pop	{r7, pc}

1004dc14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
1004dc14:	b580      	push	{r7, lr}
1004dc16:	b082      	sub	sp, #8
1004dc18:	af00      	add	r7, sp, #0
1004dc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
1004dc1c:	46c0      	nop			@ (mov r8, r8)
1004dc1e:	46bd      	mov	sp, r7
1004dc20:	b002      	add	sp, #8
1004dc22:	bd80      	pop	{r7, pc}

1004dc24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
1004dc24:	b580      	push	{r7, lr}
1004dc26:	b084      	sub	sp, #16
1004dc28:	af00      	add	r7, sp, #0
1004dc2a:	6078      	str	r0, [r7, #4]
1004dc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
1004dc2e:	687b      	ldr	r3, [r7, #4]
1004dc30:	681b      	ldr	r3, [r3, #0]
1004dc32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
1004dc34:	687b      	ldr	r3, [r7, #4]
1004dc36:	4a25      	ldr	r2, [pc, #148]	@ (1004dccc <TIM_Base_SetConfig+0xa8>)
1004dc38:	4293      	cmp	r3, r2
1004dc3a:	d108      	bne.n	1004dc4e <TIM_Base_SetConfig+0x2a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
1004dc3c:	68fb      	ldr	r3, [r7, #12]
1004dc3e:	2270      	movs	r2, #112	@ 0x70
1004dc40:	4393      	bics	r3, r2
1004dc42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
1004dc44:	683b      	ldr	r3, [r7, #0]
1004dc46:	685b      	ldr	r3, [r3, #4]
1004dc48:	68fa      	ldr	r2, [r7, #12]
1004dc4a:	4313      	orrs	r3, r2
1004dc4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
1004dc4e:	687b      	ldr	r3, [r7, #4]
1004dc50:	4a1e      	ldr	r2, [pc, #120]	@ (1004dccc <TIM_Base_SetConfig+0xa8>)
1004dc52:	4293      	cmp	r3, r2
1004dc54:	d007      	beq.n	1004dc66 <TIM_Base_SetConfig+0x42>
1004dc56:	687b      	ldr	r3, [r7, #4]
1004dc58:	4a1d      	ldr	r2, [pc, #116]	@ (1004dcd0 <TIM_Base_SetConfig+0xac>)
1004dc5a:	4293      	cmp	r3, r2
1004dc5c:	d003      	beq.n	1004dc66 <TIM_Base_SetConfig+0x42>
1004dc5e:	687b      	ldr	r3, [r7, #4]
1004dc60:	4a1c      	ldr	r2, [pc, #112]	@ (1004dcd4 <TIM_Base_SetConfig+0xb0>)
1004dc62:	4293      	cmp	r3, r2
1004dc64:	d108      	bne.n	1004dc78 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
1004dc66:	68fb      	ldr	r3, [r7, #12]
1004dc68:	4a1b      	ldr	r2, [pc, #108]	@ (1004dcd8 <TIM_Base_SetConfig+0xb4>)
1004dc6a:	4013      	ands	r3, r2
1004dc6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1004dc6e:	683b      	ldr	r3, [r7, #0]
1004dc70:	68db      	ldr	r3, [r3, #12]
1004dc72:	68fa      	ldr	r2, [r7, #12]
1004dc74:	4313      	orrs	r3, r2
1004dc76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
1004dc78:	68fb      	ldr	r3, [r7, #12]
1004dc7a:	2280      	movs	r2, #128	@ 0x80
1004dc7c:	4393      	bics	r3, r2
1004dc7e:	001a      	movs	r2, r3
1004dc80:	683b      	ldr	r3, [r7, #0]
1004dc82:	695b      	ldr	r3, [r3, #20]
1004dc84:	4313      	orrs	r3, r2
1004dc86:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
1004dc88:	687b      	ldr	r3, [r7, #4]
1004dc8a:	68fa      	ldr	r2, [r7, #12]
1004dc8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
1004dc8e:	683b      	ldr	r3, [r7, #0]
1004dc90:	689a      	ldr	r2, [r3, #8]
1004dc92:	687b      	ldr	r3, [r7, #4]
1004dc94:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
1004dc96:	683b      	ldr	r3, [r7, #0]
1004dc98:	681a      	ldr	r2, [r3, #0]
1004dc9a:	687b      	ldr	r3, [r7, #4]
1004dc9c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
1004dc9e:	687b      	ldr	r3, [r7, #4]
1004dca0:	4a0a      	ldr	r2, [pc, #40]	@ (1004dccc <TIM_Base_SetConfig+0xa8>)
1004dca2:	4293      	cmp	r3, r2
1004dca4:	d007      	beq.n	1004dcb6 <TIM_Base_SetConfig+0x92>
1004dca6:	687b      	ldr	r3, [r7, #4]
1004dca8:	4a09      	ldr	r2, [pc, #36]	@ (1004dcd0 <TIM_Base_SetConfig+0xac>)
1004dcaa:	4293      	cmp	r3, r2
1004dcac:	d003      	beq.n	1004dcb6 <TIM_Base_SetConfig+0x92>
1004dcae:	687b      	ldr	r3, [r7, #4]
1004dcb0:	4a08      	ldr	r2, [pc, #32]	@ (1004dcd4 <TIM_Base_SetConfig+0xb0>)
1004dcb2:	4293      	cmp	r3, r2
1004dcb4:	d103      	bne.n	1004dcbe <TIM_Base_SetConfig+0x9a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
1004dcb6:	683b      	ldr	r3, [r7, #0]
1004dcb8:	691a      	ldr	r2, [r3, #16]
1004dcba:	687b      	ldr	r3, [r7, #4]
1004dcbc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
1004dcbe:	687b      	ldr	r3, [r7, #4]
1004dcc0:	2201      	movs	r2, #1
1004dcc2:	615a      	str	r2, [r3, #20]
}
1004dcc4:	46c0      	nop			@ (mov r8, r8)
1004dcc6:	46bd      	mov	sp, r7
1004dcc8:	b004      	add	sp, #16
1004dcca:	bd80      	pop	{r7, pc}
1004dccc:	40002000 	.word	0x40002000
1004dcd0:	40005000 	.word	0x40005000
1004dcd4:	40006000 	.word	0x40006000
1004dcd8:	fffffcff 	.word	0xfffffcff

1004dcdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004dcdc:	b580      	push	{r7, lr}
1004dcde:	b086      	sub	sp, #24
1004dce0:	af00      	add	r7, sp, #0
1004dce2:	60f8      	str	r0, [r7, #12]
1004dce4:	60b9      	str	r1, [r7, #8]
1004dce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
1004dce8:	68fb      	ldr	r3, [r7, #12]
1004dcea:	6a1b      	ldr	r3, [r3, #32]
1004dcec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
1004dcee:	68fb      	ldr	r3, [r7, #12]
1004dcf0:	6a1b      	ldr	r3, [r3, #32]
1004dcf2:	2201      	movs	r2, #1
1004dcf4:	4393      	bics	r3, r2
1004dcf6:	001a      	movs	r2, r3
1004dcf8:	68fb      	ldr	r3, [r7, #12]
1004dcfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004dcfc:	68fb      	ldr	r3, [r7, #12]
1004dcfe:	699b      	ldr	r3, [r3, #24]
1004dd00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
1004dd02:	693b      	ldr	r3, [r7, #16]
1004dd04:	22f0      	movs	r2, #240	@ 0xf0
1004dd06:	4393      	bics	r3, r2
1004dd08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
1004dd0a:	687b      	ldr	r3, [r7, #4]
1004dd0c:	011b      	lsls	r3, r3, #4
1004dd0e:	693a      	ldr	r2, [r7, #16]
1004dd10:	4313      	orrs	r3, r2
1004dd12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
1004dd14:	697b      	ldr	r3, [r7, #20]
1004dd16:	220a      	movs	r2, #10
1004dd18:	4393      	bics	r3, r2
1004dd1a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
1004dd1c:	697a      	ldr	r2, [r7, #20]
1004dd1e:	68bb      	ldr	r3, [r7, #8]
1004dd20:	4313      	orrs	r3, r2
1004dd22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
1004dd24:	68fb      	ldr	r3, [r7, #12]
1004dd26:	693a      	ldr	r2, [r7, #16]
1004dd28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004dd2a:	68fb      	ldr	r3, [r7, #12]
1004dd2c:	697a      	ldr	r2, [r7, #20]
1004dd2e:	621a      	str	r2, [r3, #32]
}
1004dd30:	46c0      	nop			@ (mov r8, r8)
1004dd32:	46bd      	mov	sp, r7
1004dd34:	b006      	add	sp, #24
1004dd36:	bd80      	pop	{r7, pc}

1004dd38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004dd38:	b580      	push	{r7, lr}
1004dd3a:	b086      	sub	sp, #24
1004dd3c:	af00      	add	r7, sp, #0
1004dd3e:	60f8      	str	r0, [r7, #12]
1004dd40:	60b9      	str	r1, [r7, #8]
1004dd42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
1004dd44:	68fb      	ldr	r3, [r7, #12]
1004dd46:	6a1b      	ldr	r3, [r3, #32]
1004dd48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
1004dd4a:	68fb      	ldr	r3, [r7, #12]
1004dd4c:	6a1b      	ldr	r3, [r3, #32]
1004dd4e:	2210      	movs	r2, #16
1004dd50:	4393      	bics	r3, r2
1004dd52:	001a      	movs	r2, r3
1004dd54:	68fb      	ldr	r3, [r7, #12]
1004dd56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004dd58:	68fb      	ldr	r3, [r7, #12]
1004dd5a:	699b      	ldr	r3, [r3, #24]
1004dd5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
1004dd5e:	693b      	ldr	r3, [r7, #16]
1004dd60:	4a0d      	ldr	r2, [pc, #52]	@ (1004dd98 <TIM_TI2_ConfigInputStage+0x60>)
1004dd62:	4013      	ands	r3, r2
1004dd64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
1004dd66:	687b      	ldr	r3, [r7, #4]
1004dd68:	031b      	lsls	r3, r3, #12
1004dd6a:	693a      	ldr	r2, [r7, #16]
1004dd6c:	4313      	orrs	r3, r2
1004dd6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
1004dd70:	697b      	ldr	r3, [r7, #20]
1004dd72:	22a0      	movs	r2, #160	@ 0xa0
1004dd74:	4393      	bics	r3, r2
1004dd76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
1004dd78:	68bb      	ldr	r3, [r7, #8]
1004dd7a:	011b      	lsls	r3, r3, #4
1004dd7c:	697a      	ldr	r2, [r7, #20]
1004dd7e:	4313      	orrs	r3, r2
1004dd80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
1004dd82:	68fb      	ldr	r3, [r7, #12]
1004dd84:	693a      	ldr	r2, [r7, #16]
1004dd86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004dd88:	68fb      	ldr	r3, [r7, #12]
1004dd8a:	697a      	ldr	r2, [r7, #20]
1004dd8c:	621a      	str	r2, [r3, #32]
}
1004dd8e:	46c0      	nop			@ (mov r8, r8)
1004dd90:	46bd      	mov	sp, r7
1004dd92:	b006      	add	sp, #24
1004dd94:	bd80      	pop	{r7, pc}
1004dd96:	46c0      	nop			@ (mov r8, r8)
1004dd98:	ffff0fff 	.word	0xffff0fff

1004dd9c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
1004dd9c:	b580      	push	{r7, lr}
1004dd9e:	b084      	sub	sp, #16
1004dda0:	af00      	add	r7, sp, #0
1004dda2:	6078      	str	r0, [r7, #4]
1004dda4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
1004dda6:	687b      	ldr	r3, [r7, #4]
1004dda8:	689b      	ldr	r3, [r3, #8]
1004ddaa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
1004ddac:	68fb      	ldr	r3, [r7, #12]
1004ddae:	2270      	movs	r2, #112	@ 0x70
1004ddb0:	4393      	bics	r3, r2
1004ddb2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
1004ddb4:	683a      	ldr	r2, [r7, #0]
1004ddb6:	68fb      	ldr	r3, [r7, #12]
1004ddb8:	4313      	orrs	r3, r2
1004ddba:	2207      	movs	r2, #7
1004ddbc:	4313      	orrs	r3, r2
1004ddbe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004ddc0:	687b      	ldr	r3, [r7, #4]
1004ddc2:	68fa      	ldr	r2, [r7, #12]
1004ddc4:	609a      	str	r2, [r3, #8]
}
1004ddc6:	46c0      	nop			@ (mov r8, r8)
1004ddc8:	46bd      	mov	sp, r7
1004ddca:	b004      	add	sp, #16
1004ddcc:	bd80      	pop	{r7, pc}
	...

1004ddd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
1004ddd0:	b580      	push	{r7, lr}
1004ddd2:	b086      	sub	sp, #24
1004ddd4:	af00      	add	r7, sp, #0
1004ddd6:	60f8      	str	r0, [r7, #12]
1004ddd8:	60b9      	str	r1, [r7, #8]
1004ddda:	607a      	str	r2, [r7, #4]
1004dddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
1004ddde:	68fb      	ldr	r3, [r7, #12]
1004dde0:	689b      	ldr	r3, [r3, #8]
1004dde2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004dde4:	697b      	ldr	r3, [r7, #20]
1004dde6:	4a09      	ldr	r2, [pc, #36]	@ (1004de0c <TIM_ETR_SetConfig+0x3c>)
1004dde8:	4013      	ands	r3, r2
1004ddea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
1004ddec:	683b      	ldr	r3, [r7, #0]
1004ddee:	021a      	lsls	r2, r3, #8
1004ddf0:	687b      	ldr	r3, [r7, #4]
1004ddf2:	431a      	orrs	r2, r3
1004ddf4:	68bb      	ldr	r3, [r7, #8]
1004ddf6:	4313      	orrs	r3, r2
1004ddf8:	697a      	ldr	r2, [r7, #20]
1004ddfa:	4313      	orrs	r3, r2
1004ddfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004ddfe:	68fb      	ldr	r3, [r7, #12]
1004de00:	697a      	ldr	r2, [r7, #20]
1004de02:	609a      	str	r2, [r3, #8]
}
1004de04:	46c0      	nop			@ (mov r8, r8)
1004de06:	46bd      	mov	sp, r7
1004de08:	b006      	add	sp, #24
1004de0a:	bd80      	pop	{r7, pc}
1004de0c:	ffff00ff 	.word	0xffff00ff

1004de10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
1004de10:	b580      	push	{r7, lr}
1004de12:	b082      	sub	sp, #8
1004de14:	af00      	add	r7, sp, #0
1004de16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
1004de18:	46c0      	nop			@ (mov r8, r8)
1004de1a:	46bd      	mov	sp, r7
1004de1c:	b002      	add	sp, #8
1004de1e:	bd80      	pop	{r7, pc}

1004de20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
1004de20:	b580      	push	{r7, lr}
1004de22:	b082      	sub	sp, #8
1004de24:	af00      	add	r7, sp, #0
1004de26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
1004de28:	46c0      	nop			@ (mov r8, r8)
1004de2a:	46bd      	mov	sp, r7
1004de2c:	b002      	add	sp, #8
1004de2e:	bd80      	pop	{r7, pc}

1004de30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
1004de30:	b580      	push	{r7, lr}
1004de32:	b082      	sub	sp, #8
1004de34:	af00      	add	r7, sp, #0
1004de36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
1004de38:	687b      	ldr	r3, [r7, #4]
1004de3a:	2b00      	cmp	r3, #0
1004de3c:	d101      	bne.n	1004de42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004de3e:	2301      	movs	r3, #1
1004de40:	e055      	b.n	1004deee <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
1004de42:	687b      	ldr	r3, [r7, #4]
1004de44:	2288      	movs	r2, #136	@ 0x88
1004de46:	589b      	ldr	r3, [r3, r2]
1004de48:	2b00      	cmp	r3, #0
1004de4a:	d116      	bne.n	1004de7a <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1004de4c:	687b      	ldr	r3, [r7, #4]
1004de4e:	2284      	movs	r2, #132	@ 0x84
1004de50:	2100      	movs	r1, #0
1004de52:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
1004de54:	687b      	ldr	r3, [r7, #4]
1004de56:	0018      	movs	r0, r3
1004de58:	f000 f89e 	bl	1004df98 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
1004de5c:	687b      	ldr	r3, [r7, #4]
1004de5e:	22c4      	movs	r2, #196	@ 0xc4
1004de60:	589b      	ldr	r3, [r3, r2]
1004de62:	2b00      	cmp	r3, #0
1004de64:	d103      	bne.n	1004de6e <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
1004de66:	687b      	ldr	r3, [r7, #4]
1004de68:	21c4      	movs	r1, #196	@ 0xc4
1004de6a:	4a23      	ldr	r2, [pc, #140]	@ (1004def8 <HAL_UART_Init+0xc8>)
1004de6c:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
1004de6e:	687b      	ldr	r3, [r7, #4]
1004de70:	22c4      	movs	r2, #196	@ 0xc4
1004de72:	589b      	ldr	r3, [r3, r2]
1004de74:	687a      	ldr	r2, [r7, #4]
1004de76:	0010      	movs	r0, r2
1004de78:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1004de7a:	687b      	ldr	r3, [r7, #4]
1004de7c:	2288      	movs	r2, #136	@ 0x88
1004de7e:	2124      	movs	r1, #36	@ 0x24
1004de80:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
1004de82:	687b      	ldr	r3, [r7, #4]
1004de84:	681b      	ldr	r3, [r3, #0]
1004de86:	681a      	ldr	r2, [r3, #0]
1004de88:	687b      	ldr	r3, [r7, #4]
1004de8a:	681b      	ldr	r3, [r3, #0]
1004de8c:	2101      	movs	r1, #1
1004de8e:	438a      	bics	r2, r1
1004de90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1004de92:	687b      	ldr	r3, [r7, #4]
1004de94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004de96:	2b00      	cmp	r3, #0
1004de98:	d003      	beq.n	1004dea2 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
1004de9a:	687b      	ldr	r3, [r7, #4]
1004de9c:	0018      	movs	r0, r3
1004de9e:	f000 fa33 	bl	1004e308 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
1004dea2:	687b      	ldr	r3, [r7, #4]
1004dea4:	0018      	movs	r0, r3
1004dea6:	f000 f8c7 	bl	1004e038 <UART_SetConfig>
1004deaa:	0003      	movs	r3, r0
1004deac:	2b01      	cmp	r3, #1
1004deae:	d101      	bne.n	1004deb4 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
1004deb0:	2301      	movs	r3, #1
1004deb2:	e01c      	b.n	1004deee <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1004deb4:	687b      	ldr	r3, [r7, #4]
1004deb6:	681b      	ldr	r3, [r3, #0]
1004deb8:	685a      	ldr	r2, [r3, #4]
1004deba:	687b      	ldr	r3, [r7, #4]
1004debc:	681b      	ldr	r3, [r3, #0]
1004debe:	490f      	ldr	r1, [pc, #60]	@ (1004defc <HAL_UART_Init+0xcc>)
1004dec0:	400a      	ands	r2, r1
1004dec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1004dec4:	687b      	ldr	r3, [r7, #4]
1004dec6:	681b      	ldr	r3, [r3, #0]
1004dec8:	689a      	ldr	r2, [r3, #8]
1004deca:	687b      	ldr	r3, [r7, #4]
1004decc:	681b      	ldr	r3, [r3, #0]
1004dece:	212a      	movs	r1, #42	@ 0x2a
1004ded0:	438a      	bics	r2, r1
1004ded2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1004ded4:	687b      	ldr	r3, [r7, #4]
1004ded6:	681b      	ldr	r3, [r3, #0]
1004ded8:	681a      	ldr	r2, [r3, #0]
1004deda:	687b      	ldr	r3, [r7, #4]
1004dedc:	681b      	ldr	r3, [r3, #0]
1004dede:	2101      	movs	r1, #1
1004dee0:	430a      	orrs	r2, r1
1004dee2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1004dee4:	687b      	ldr	r3, [r7, #4]
1004dee6:	0018      	movs	r0, r3
1004dee8:	f000 fac2 	bl	1004e470 <UART_CheckIdleState>
1004deec:	0003      	movs	r3, r0
}
1004deee:	0018      	movs	r0, r3
1004def0:	46bd      	mov	sp, r7
1004def2:	b002      	add	sp, #8
1004def4:	bd80      	pop	{r7, pc}
1004def6:	46c0      	nop			@ (mov r8, r8)
1004def8:	1004729d 	.word	0x1004729d
1004defc:	ffffb7ff 	.word	0xffffb7ff

1004df00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
1004df00:	b580      	push	{r7, lr}
1004df02:	b082      	sub	sp, #8
1004df04:	af00      	add	r7, sp, #0
1004df06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
1004df08:	46c0      	nop			@ (mov r8, r8)
1004df0a:	46bd      	mov	sp, r7
1004df0c:	b002      	add	sp, #8
1004df0e:	bd80      	pop	{r7, pc}

1004df10 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004df10:	b580      	push	{r7, lr}
1004df12:	b082      	sub	sp, #8
1004df14:	af00      	add	r7, sp, #0
1004df16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
1004df18:	46c0      	nop			@ (mov r8, r8)
1004df1a:	46bd      	mov	sp, r7
1004df1c:	b002      	add	sp, #8
1004df1e:	bd80      	pop	{r7, pc}

1004df20 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
1004df20:	b580      	push	{r7, lr}
1004df22:	b082      	sub	sp, #8
1004df24:	af00      	add	r7, sp, #0
1004df26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
1004df28:	46c0      	nop			@ (mov r8, r8)
1004df2a:	46bd      	mov	sp, r7
1004df2c:	b002      	add	sp, #8
1004df2e:	bd80      	pop	{r7, pc}

1004df30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004df30:	b580      	push	{r7, lr}
1004df32:	b082      	sub	sp, #8
1004df34:	af00      	add	r7, sp, #0
1004df36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
1004df38:	46c0      	nop			@ (mov r8, r8)
1004df3a:	46bd      	mov	sp, r7
1004df3c:	b002      	add	sp, #8
1004df3e:	bd80      	pop	{r7, pc}

1004df40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
1004df40:	b580      	push	{r7, lr}
1004df42:	b082      	sub	sp, #8
1004df44:	af00      	add	r7, sp, #0
1004df46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
1004df48:	46c0      	nop			@ (mov r8, r8)
1004df4a:	46bd      	mov	sp, r7
1004df4c:	b002      	add	sp, #8
1004df4e:	bd80      	pop	{r7, pc}

1004df50 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
1004df50:	b580      	push	{r7, lr}
1004df52:	b082      	sub	sp, #8
1004df54:	af00      	add	r7, sp, #0
1004df56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
1004df58:	46c0      	nop			@ (mov r8, r8)
1004df5a:	46bd      	mov	sp, r7
1004df5c:	b002      	add	sp, #8
1004df5e:	bd80      	pop	{r7, pc}

1004df60 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
1004df60:	b580      	push	{r7, lr}
1004df62:	b082      	sub	sp, #8
1004df64:	af00      	add	r7, sp, #0
1004df66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
1004df68:	46c0      	nop			@ (mov r8, r8)
1004df6a:	46bd      	mov	sp, r7
1004df6c:	b002      	add	sp, #8
1004df6e:	bd80      	pop	{r7, pc}

1004df70 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
1004df70:	b580      	push	{r7, lr}
1004df72:	b082      	sub	sp, #8
1004df74:	af00      	add	r7, sp, #0
1004df76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
1004df78:	46c0      	nop			@ (mov r8, r8)
1004df7a:	46bd      	mov	sp, r7
1004df7c:	b002      	add	sp, #8
1004df7e:	bd80      	pop	{r7, pc}

1004df80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
1004df80:	b580      	push	{r7, lr}
1004df82:	b082      	sub	sp, #8
1004df84:	af00      	add	r7, sp, #0
1004df86:	6078      	str	r0, [r7, #4]
1004df88:	000a      	movs	r2, r1
1004df8a:	1cbb      	adds	r3, r7, #2
1004df8c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
1004df8e:	46c0      	nop			@ (mov r8, r8)
1004df90:	46bd      	mov	sp, r7
1004df92:	b002      	add	sp, #8
1004df94:	bd80      	pop	{r7, pc}
	...

1004df98 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
1004df98:	b580      	push	{r7, lr}
1004df9a:	b082      	sub	sp, #8
1004df9c:	af00      	add	r7, sp, #0
1004df9e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
1004dfa0:	687b      	ldr	r3, [r7, #4]
1004dfa2:	2194      	movs	r1, #148	@ 0x94
1004dfa4:	4a18      	ldr	r2, [pc, #96]	@ (1004e008 <UART_InitCallbacksToDefault+0x70>)
1004dfa6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
1004dfa8:	687b      	ldr	r3, [r7, #4]
1004dfaa:	2198      	movs	r1, #152	@ 0x98
1004dfac:	4a17      	ldr	r2, [pc, #92]	@ (1004e00c <UART_InitCallbacksToDefault+0x74>)
1004dfae:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
1004dfb0:	687b      	ldr	r3, [r7, #4]
1004dfb2:	219c      	movs	r1, #156	@ 0x9c
1004dfb4:	4a16      	ldr	r2, [pc, #88]	@ (1004e010 <UART_InitCallbacksToDefault+0x78>)
1004dfb6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
1004dfb8:	687b      	ldr	r3, [r7, #4]
1004dfba:	21a0      	movs	r1, #160	@ 0xa0
1004dfbc:	4a15      	ldr	r2, [pc, #84]	@ (1004e014 <UART_InitCallbacksToDefault+0x7c>)
1004dfbe:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
1004dfc0:	687b      	ldr	r3, [r7, #4]
1004dfc2:	21a4      	movs	r1, #164	@ 0xa4
1004dfc4:	4a14      	ldr	r2, [pc, #80]	@ (1004e018 <UART_InitCallbacksToDefault+0x80>)
1004dfc6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
1004dfc8:	687b      	ldr	r3, [r7, #4]
1004dfca:	21a8      	movs	r1, #168	@ 0xa8
1004dfcc:	4a13      	ldr	r2, [pc, #76]	@ (1004e01c <UART_InitCallbacksToDefault+0x84>)
1004dfce:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
1004dfd0:	687b      	ldr	r3, [r7, #4]
1004dfd2:	21ac      	movs	r1, #172	@ 0xac
1004dfd4:	4a12      	ldr	r2, [pc, #72]	@ (1004e020 <UART_InitCallbacksToDefault+0x88>)
1004dfd6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
1004dfd8:	687b      	ldr	r3, [r7, #4]
1004dfda:	21b0      	movs	r1, #176	@ 0xb0
1004dfdc:	4a11      	ldr	r2, [pc, #68]	@ (1004e024 <UART_InitCallbacksToDefault+0x8c>)
1004dfde:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
1004dfe0:	687b      	ldr	r3, [r7, #4]
1004dfe2:	21b4      	movs	r1, #180	@ 0xb4
1004dfe4:	4a10      	ldr	r2, [pc, #64]	@ (1004e028 <UART_InitCallbacksToDefault+0x90>)
1004dfe6:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
1004dfe8:	687b      	ldr	r3, [r7, #4]
1004dfea:	21b8      	movs	r1, #184	@ 0xb8
1004dfec:	4a0f      	ldr	r2, [pc, #60]	@ (1004e02c <UART_InitCallbacksToDefault+0x94>)
1004dfee:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
1004dff0:	687b      	ldr	r3, [r7, #4]
1004dff2:	21bc      	movs	r1, #188	@ 0xbc
1004dff4:	4a0e      	ldr	r2, [pc, #56]	@ (1004e030 <UART_InitCallbacksToDefault+0x98>)
1004dff6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
1004dff8:	687b      	ldr	r3, [r7, #4]
1004dffa:	21c0      	movs	r1, #192	@ 0xc0
1004dffc:	4a0d      	ldr	r2, [pc, #52]	@ (1004e034 <UART_InitCallbacksToDefault+0x9c>)
1004dffe:	505a      	str	r2, [r3, r1]

}
1004e000:	46c0      	nop			@ (mov r8, r8)
1004e002:	46bd      	mov	sp, r7
1004e004:	b002      	add	sp, #8
1004e006:	bd80      	pop	{r7, pc}
1004e008:	1004df11 	.word	0x1004df11
1004e00c:	1004df01 	.word	0x1004df01
1004e010:	1004df31 	.word	0x1004df31
1004e014:	1004df21 	.word	0x1004df21
1004e018:	1004df41 	.word	0x1004df41
1004e01c:	1004df51 	.word	0x1004df51
1004e020:	1004df61 	.word	0x1004df61
1004e024:	1004df71 	.word	0x1004df71
1004e028:	1004e771 	.word	0x1004e771
1004e02c:	1004e781 	.word	0x1004e781
1004e030:	1004e791 	.word	0x1004e791
1004e034:	1004df81 	.word	0x1004df81

1004e038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
1004e038:	b5b0      	push	{r4, r5, r7, lr}
1004e03a:	b090      	sub	sp, #64	@ 0x40
1004e03c:	af00      	add	r7, sp, #0
1004e03e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
1004e040:	231b      	movs	r3, #27
1004e042:	2220      	movs	r2, #32
1004e044:	189b      	adds	r3, r3, r2
1004e046:	19db      	adds	r3, r3, r7
1004e048:	2200      	movs	r2, #0
1004e04a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
1004e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e04e:	689a      	ldr	r2, [r3, #8]
1004e050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e052:	691b      	ldr	r3, [r3, #16]
1004e054:	431a      	orrs	r2, r3
1004e056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e058:	695b      	ldr	r3, [r3, #20]
1004e05a:	431a      	orrs	r2, r3
1004e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e05e:	69db      	ldr	r3, [r3, #28]
1004e060:	4313      	orrs	r3, r2
1004e062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
1004e064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e066:	681b      	ldr	r3, [r3, #0]
1004e068:	681b      	ldr	r3, [r3, #0]
1004e06a:	4aa1      	ldr	r2, [pc, #644]	@ (1004e2f0 <UART_SetConfig+0x2b8>)
1004e06c:	4013      	ands	r3, r2
1004e06e:	0019      	movs	r1, r3
1004e070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e072:	681a      	ldr	r2, [r3, #0]
1004e074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e076:	430b      	orrs	r3, r1
1004e078:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
1004e07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e07c:	681b      	ldr	r3, [r3, #0]
1004e07e:	685b      	ldr	r3, [r3, #4]
1004e080:	4a9c      	ldr	r2, [pc, #624]	@ (1004e2f4 <UART_SetConfig+0x2bc>)
1004e082:	4013      	ands	r3, r2
1004e084:	0018      	movs	r0, r3
1004e086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e088:	68d9      	ldr	r1, [r3, #12]
1004e08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e08c:	681a      	ldr	r2, [r3, #0]
1004e08e:	0003      	movs	r3, r0
1004e090:	430b      	orrs	r3, r1
1004e092:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1004e094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e096:	699b      	ldr	r3, [r3, #24]
1004e098:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
1004e09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e09c:	681b      	ldr	r3, [r3, #0]
1004e09e:	4a96      	ldr	r2, [pc, #600]	@ (1004e2f8 <UART_SetConfig+0x2c0>)
1004e0a0:	4293      	cmp	r3, r2
1004e0a2:	d004      	beq.n	1004e0ae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
1004e0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e0a6:	6a1b      	ldr	r3, [r3, #32]
1004e0a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004e0aa:	4313      	orrs	r3, r2
1004e0ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1004e0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e0b0:	681b      	ldr	r3, [r3, #0]
1004e0b2:	689b      	ldr	r3, [r3, #8]
1004e0b4:	4a91      	ldr	r2, [pc, #580]	@ (1004e2fc <UART_SetConfig+0x2c4>)
1004e0b6:	4013      	ands	r3, r2
1004e0b8:	0019      	movs	r1, r3
1004e0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e0bc:	681a      	ldr	r2, [r3, #0]
1004e0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e0c0:	430b      	orrs	r3, r1
1004e0c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
1004e0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e0c6:	681b      	ldr	r3, [r3, #0]
1004e0c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004e0ca:	220f      	movs	r2, #15
1004e0cc:	4393      	bics	r3, r2
1004e0ce:	0018      	movs	r0, r3
1004e0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e0d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004e0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e0d6:	681a      	ldr	r2, [r3, #0]
1004e0d8:	0003      	movs	r3, r0
1004e0da:	430b      	orrs	r3, r1
1004e0dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
1004e0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e0e0:	681b      	ldr	r3, [r3, #0]
1004e0e2:	4a85      	ldr	r2, [pc, #532]	@ (1004e2f8 <UART_SetConfig+0x2c0>)
1004e0e4:	4293      	cmp	r3, r2
1004e0e6:	d16d      	bne.n	1004e1c4 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
1004e0e8:	2010      	movs	r0, #16
1004e0ea:	f7ff fa67 	bl	1004d5bc <HAL_RCCEx_GetPeriphCLKFreq>
1004e0ee:	0003      	movs	r3, r0
1004e0f0:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
1004e0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e0f4:	2b00      	cmp	r3, #0
1004e0f6:	d100      	bne.n	1004e0fa <UART_SetConfig+0xc2>
1004e0f8:	e0e3      	b.n	1004e2c2 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
1004e0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e0fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004e0fe:	4b80      	ldr	r3, [pc, #512]	@ (1004e300 <UART_SetConfig+0x2c8>)
1004e100:	0052      	lsls	r2, r2, #1
1004e102:	5ad3      	ldrh	r3, [r2, r3]
1004e104:	0019      	movs	r1, r3
1004e106:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004e108:	f7f2 f89a 	bl	10040240 <__udivsi3>
1004e10c:	0003      	movs	r3, r0
1004e10e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004e110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e112:	685a      	ldr	r2, [r3, #4]
1004e114:	0013      	movs	r3, r2
1004e116:	005b      	lsls	r3, r3, #1
1004e118:	189b      	adds	r3, r3, r2
1004e11a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004e11c:	429a      	cmp	r2, r3
1004e11e:	d305      	bcc.n	1004e12c <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
1004e120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e122:	685b      	ldr	r3, [r3, #4]
1004e124:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004e126:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004e128:	429a      	cmp	r2, r3
1004e12a:	d906      	bls.n	1004e13a <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
1004e12c:	231b      	movs	r3, #27
1004e12e:	2220      	movs	r2, #32
1004e130:	189b      	adds	r3, r3, r2
1004e132:	19db      	adds	r3, r3, r7
1004e134:	2201      	movs	r2, #1
1004e136:	701a      	strb	r2, [r3, #0]
1004e138:	e0c3      	b.n	1004e2c2 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004e13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e13c:	61bb      	str	r3, [r7, #24]
1004e13e:	2300      	movs	r3, #0
1004e140:	61fb      	str	r3, [r7, #28]
1004e142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e144:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004e146:	4b6e      	ldr	r3, [pc, #440]	@ (1004e300 <UART_SetConfig+0x2c8>)
1004e148:	0052      	lsls	r2, r2, #1
1004e14a:	5ad3      	ldrh	r3, [r2, r3]
1004e14c:	613b      	str	r3, [r7, #16]
1004e14e:	2300      	movs	r3, #0
1004e150:	617b      	str	r3, [r7, #20]
1004e152:	693a      	ldr	r2, [r7, #16]
1004e154:	697b      	ldr	r3, [r7, #20]
1004e156:	69b8      	ldr	r0, [r7, #24]
1004e158:	69f9      	ldr	r1, [r7, #28]
1004e15a:	f7f2 fa4f 	bl	100405fc <__aeabi_uldivmod>
1004e15e:	0002      	movs	r2, r0
1004e160:	000b      	movs	r3, r1
1004e162:	0e11      	lsrs	r1, r2, #24
1004e164:	021d      	lsls	r5, r3, #8
1004e166:	430d      	orrs	r5, r1
1004e168:	0214      	lsls	r4, r2, #8
1004e16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e16c:	685b      	ldr	r3, [r3, #4]
1004e16e:	085b      	lsrs	r3, r3, #1
1004e170:	60bb      	str	r3, [r7, #8]
1004e172:	2300      	movs	r3, #0
1004e174:	60fb      	str	r3, [r7, #12]
1004e176:	68b8      	ldr	r0, [r7, #8]
1004e178:	68f9      	ldr	r1, [r7, #12]
1004e17a:	1900      	adds	r0, r0, r4
1004e17c:	4169      	adcs	r1, r5
1004e17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e180:	685b      	ldr	r3, [r3, #4]
1004e182:	603b      	str	r3, [r7, #0]
1004e184:	2300      	movs	r3, #0
1004e186:	607b      	str	r3, [r7, #4]
1004e188:	683a      	ldr	r2, [r7, #0]
1004e18a:	687b      	ldr	r3, [r7, #4]
1004e18c:	f7f2 fa36 	bl	100405fc <__aeabi_uldivmod>
1004e190:	0002      	movs	r2, r0
1004e192:	000b      	movs	r3, r1
1004e194:	0013      	movs	r3, r2
1004e196:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
1004e198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004e19a:	23c0      	movs	r3, #192	@ 0xc0
1004e19c:	009b      	lsls	r3, r3, #2
1004e19e:	429a      	cmp	r2, r3
1004e1a0:	d309      	bcc.n	1004e1b6 <UART_SetConfig+0x17e>
1004e1a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004e1a4:	2380      	movs	r3, #128	@ 0x80
1004e1a6:	035b      	lsls	r3, r3, #13
1004e1a8:	429a      	cmp	r2, r3
1004e1aa:	d204      	bcs.n	1004e1b6 <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
1004e1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e1ae:	681b      	ldr	r3, [r3, #0]
1004e1b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004e1b2:	60da      	str	r2, [r3, #12]
1004e1b4:	e085      	b.n	1004e2c2 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
1004e1b6:	231b      	movs	r3, #27
1004e1b8:	2220      	movs	r2, #32
1004e1ba:	189b      	adds	r3, r3, r2
1004e1bc:	19db      	adds	r3, r3, r7
1004e1be:	2201      	movs	r2, #1
1004e1c0:	701a      	strb	r2, [r3, #0]
1004e1c2:	e07e      	b.n	1004e2c2 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
1004e1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e1c6:	69da      	ldr	r2, [r3, #28]
1004e1c8:	2380      	movs	r3, #128	@ 0x80
1004e1ca:	021b      	lsls	r3, r3, #8
1004e1cc:	429a      	cmp	r2, r3
1004e1ce:	d148      	bne.n	1004e262 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
1004e1d0:	4b4c      	ldr	r3, [pc, #304]	@ (1004e304 <UART_SetConfig+0x2cc>)
1004e1d2:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
1004e1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e1d6:	2b00      	cmp	r3, #0
1004e1d8:	d100      	bne.n	1004e1dc <UART_SetConfig+0x1a4>
1004e1da:	e072      	b.n	1004e2c2 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004e1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e1de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004e1e0:	4b47      	ldr	r3, [pc, #284]	@ (1004e300 <UART_SetConfig+0x2c8>)
1004e1e2:	0052      	lsls	r2, r2, #1
1004e1e4:	5ad3      	ldrh	r3, [r2, r3]
1004e1e6:	0019      	movs	r1, r3
1004e1e8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004e1ea:	f7f2 f829 	bl	10040240 <__udivsi3>
1004e1ee:	0003      	movs	r3, r0
1004e1f0:	005a      	lsls	r2, r3, #1
1004e1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e1f4:	685b      	ldr	r3, [r3, #4]
1004e1f6:	085b      	lsrs	r3, r3, #1
1004e1f8:	18d2      	adds	r2, r2, r3
1004e1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e1fc:	685b      	ldr	r3, [r3, #4]
1004e1fe:	0019      	movs	r1, r3
1004e200:	0010      	movs	r0, r2
1004e202:	f7f2 f81d 	bl	10040240 <__udivsi3>
1004e206:	0003      	movs	r3, r0
1004e208:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004e20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e20c:	2b0f      	cmp	r3, #15
1004e20e:	d921      	bls.n	1004e254 <UART_SetConfig+0x21c>
1004e210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004e212:	2380      	movs	r3, #128	@ 0x80
1004e214:	025b      	lsls	r3, r3, #9
1004e216:	429a      	cmp	r2, r3
1004e218:	d21c      	bcs.n	1004e254 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1004e21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e21c:	b29a      	uxth	r2, r3
1004e21e:	200e      	movs	r0, #14
1004e220:	2420      	movs	r4, #32
1004e222:	1903      	adds	r3, r0, r4
1004e224:	19db      	adds	r3, r3, r7
1004e226:	210f      	movs	r1, #15
1004e228:	438a      	bics	r2, r1
1004e22a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1004e22c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e22e:	085b      	lsrs	r3, r3, #1
1004e230:	b29b      	uxth	r3, r3
1004e232:	2207      	movs	r2, #7
1004e234:	4013      	ands	r3, r2
1004e236:	b299      	uxth	r1, r3
1004e238:	1903      	adds	r3, r0, r4
1004e23a:	19db      	adds	r3, r3, r7
1004e23c:	1902      	adds	r2, r0, r4
1004e23e:	19d2      	adds	r2, r2, r7
1004e240:	8812      	ldrh	r2, [r2, #0]
1004e242:	430a      	orrs	r2, r1
1004e244:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
1004e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e248:	681b      	ldr	r3, [r3, #0]
1004e24a:	1902      	adds	r2, r0, r4
1004e24c:	19d2      	adds	r2, r2, r7
1004e24e:	8812      	ldrh	r2, [r2, #0]
1004e250:	60da      	str	r2, [r3, #12]
1004e252:	e036      	b.n	1004e2c2 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004e254:	231b      	movs	r3, #27
1004e256:	2220      	movs	r2, #32
1004e258:	189b      	adds	r3, r3, r2
1004e25a:	19db      	adds	r3, r3, r7
1004e25c:	2201      	movs	r2, #1
1004e25e:	701a      	strb	r2, [r3, #0]
1004e260:	e02f      	b.n	1004e2c2 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
1004e262:	4b28      	ldr	r3, [pc, #160]	@ (1004e304 <UART_SetConfig+0x2cc>)
1004e264:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
1004e266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e268:	2b00      	cmp	r3, #0
1004e26a:	d02a      	beq.n	1004e2c2 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004e26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e26e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004e270:	4b23      	ldr	r3, [pc, #140]	@ (1004e300 <UART_SetConfig+0x2c8>)
1004e272:	0052      	lsls	r2, r2, #1
1004e274:	5ad3      	ldrh	r3, [r2, r3]
1004e276:	0019      	movs	r1, r3
1004e278:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004e27a:	f7f1 ffe1 	bl	10040240 <__udivsi3>
1004e27e:	0003      	movs	r3, r0
1004e280:	001a      	movs	r2, r3
1004e282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e284:	685b      	ldr	r3, [r3, #4]
1004e286:	085b      	lsrs	r3, r3, #1
1004e288:	18d2      	adds	r2, r2, r3
1004e28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e28c:	685b      	ldr	r3, [r3, #4]
1004e28e:	0019      	movs	r1, r3
1004e290:	0010      	movs	r0, r2
1004e292:	f7f1 ffd5 	bl	10040240 <__udivsi3>
1004e296:	0003      	movs	r3, r0
1004e298:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004e29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e29c:	2b0f      	cmp	r3, #15
1004e29e:	d90a      	bls.n	1004e2b6 <UART_SetConfig+0x27e>
1004e2a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004e2a2:	2380      	movs	r3, #128	@ 0x80
1004e2a4:	025b      	lsls	r3, r3, #9
1004e2a6:	429a      	cmp	r2, r3
1004e2a8:	d205      	bcs.n	1004e2b6 <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
1004e2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e2ac:	b29a      	uxth	r2, r3
1004e2ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e2b0:	681b      	ldr	r3, [r3, #0]
1004e2b2:	60da      	str	r2, [r3, #12]
1004e2b4:	e005      	b.n	1004e2c2 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004e2b6:	231b      	movs	r3, #27
1004e2b8:	2220      	movs	r2, #32
1004e2ba:	189b      	adds	r3, r3, r2
1004e2bc:	19db      	adds	r3, r3, r7
1004e2be:	2201      	movs	r2, #1
1004e2c0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1004e2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e2c4:	226a      	movs	r2, #106	@ 0x6a
1004e2c6:	2101      	movs	r1, #1
1004e2c8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
1004e2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e2cc:	2268      	movs	r2, #104	@ 0x68
1004e2ce:	2101      	movs	r1, #1
1004e2d0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1004e2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e2d4:	2200      	movs	r2, #0
1004e2d6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
1004e2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e2da:	2200      	movs	r2, #0
1004e2dc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
1004e2de:	231b      	movs	r3, #27
1004e2e0:	2220      	movs	r2, #32
1004e2e2:	189b      	adds	r3, r3, r2
1004e2e4:	19db      	adds	r3, r3, r7
1004e2e6:	781b      	ldrb	r3, [r3, #0]
}
1004e2e8:	0018      	movs	r0, r3
1004e2ea:	46bd      	mov	sp, r7
1004e2ec:	b010      	add	sp, #64	@ 0x40
1004e2ee:	bdb0      	pop	{r4, r5, r7, pc}
1004e2f0:	cfff69f3 	.word	0xcfff69f3
1004e2f4:	ffffcfff 	.word	0xffffcfff
1004e2f8:	41005000 	.word	0x41005000
1004e2fc:	11fff4ff 	.word	0x11fff4ff
1004e300:	100697ec 	.word	0x100697ec
1004e304:	00f42400 	.word	0x00f42400

1004e308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1004e308:	b580      	push	{r7, lr}
1004e30a:	b082      	sub	sp, #8
1004e30c:	af00      	add	r7, sp, #0
1004e30e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1004e310:	687b      	ldr	r3, [r7, #4]
1004e312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e314:	2208      	movs	r2, #8
1004e316:	4013      	ands	r3, r2
1004e318:	d00b      	beq.n	1004e332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1004e31a:	687b      	ldr	r3, [r7, #4]
1004e31c:	681b      	ldr	r3, [r3, #0]
1004e31e:	685b      	ldr	r3, [r3, #4]
1004e320:	4a4a      	ldr	r2, [pc, #296]	@ (1004e44c <UART_AdvFeatureConfig+0x144>)
1004e322:	4013      	ands	r3, r2
1004e324:	0019      	movs	r1, r3
1004e326:	687b      	ldr	r3, [r7, #4]
1004e328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004e32a:	687b      	ldr	r3, [r7, #4]
1004e32c:	681b      	ldr	r3, [r3, #0]
1004e32e:	430a      	orrs	r2, r1
1004e330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1004e332:	687b      	ldr	r3, [r7, #4]
1004e334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e336:	2201      	movs	r2, #1
1004e338:	4013      	ands	r3, r2
1004e33a:	d00b      	beq.n	1004e354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1004e33c:	687b      	ldr	r3, [r7, #4]
1004e33e:	681b      	ldr	r3, [r3, #0]
1004e340:	685b      	ldr	r3, [r3, #4]
1004e342:	4a43      	ldr	r2, [pc, #268]	@ (1004e450 <UART_AdvFeatureConfig+0x148>)
1004e344:	4013      	ands	r3, r2
1004e346:	0019      	movs	r1, r3
1004e348:	687b      	ldr	r3, [r7, #4]
1004e34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004e34c:	687b      	ldr	r3, [r7, #4]
1004e34e:	681b      	ldr	r3, [r3, #0]
1004e350:	430a      	orrs	r2, r1
1004e352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1004e354:	687b      	ldr	r3, [r7, #4]
1004e356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e358:	2202      	movs	r2, #2
1004e35a:	4013      	ands	r3, r2
1004e35c:	d00b      	beq.n	1004e376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1004e35e:	687b      	ldr	r3, [r7, #4]
1004e360:	681b      	ldr	r3, [r3, #0]
1004e362:	685b      	ldr	r3, [r3, #4]
1004e364:	4a3b      	ldr	r2, [pc, #236]	@ (1004e454 <UART_AdvFeatureConfig+0x14c>)
1004e366:	4013      	ands	r3, r2
1004e368:	0019      	movs	r1, r3
1004e36a:	687b      	ldr	r3, [r7, #4]
1004e36c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004e36e:	687b      	ldr	r3, [r7, #4]
1004e370:	681b      	ldr	r3, [r3, #0]
1004e372:	430a      	orrs	r2, r1
1004e374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004e376:	687b      	ldr	r3, [r7, #4]
1004e378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e37a:	2204      	movs	r2, #4
1004e37c:	4013      	ands	r3, r2
1004e37e:	d00b      	beq.n	1004e398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1004e380:	687b      	ldr	r3, [r7, #4]
1004e382:	681b      	ldr	r3, [r3, #0]
1004e384:	685b      	ldr	r3, [r3, #4]
1004e386:	4a34      	ldr	r2, [pc, #208]	@ (1004e458 <UART_AdvFeatureConfig+0x150>)
1004e388:	4013      	ands	r3, r2
1004e38a:	0019      	movs	r1, r3
1004e38c:	687b      	ldr	r3, [r7, #4]
1004e38e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004e390:	687b      	ldr	r3, [r7, #4]
1004e392:	681b      	ldr	r3, [r3, #0]
1004e394:	430a      	orrs	r2, r1
1004e396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1004e398:	687b      	ldr	r3, [r7, #4]
1004e39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e39c:	2210      	movs	r2, #16
1004e39e:	4013      	ands	r3, r2
1004e3a0:	d00b      	beq.n	1004e3ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1004e3a2:	687b      	ldr	r3, [r7, #4]
1004e3a4:	681b      	ldr	r3, [r3, #0]
1004e3a6:	689b      	ldr	r3, [r3, #8]
1004e3a8:	4a2c      	ldr	r2, [pc, #176]	@ (1004e45c <UART_AdvFeatureConfig+0x154>)
1004e3aa:	4013      	ands	r3, r2
1004e3ac:	0019      	movs	r1, r3
1004e3ae:	687b      	ldr	r3, [r7, #4]
1004e3b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
1004e3b2:	687b      	ldr	r3, [r7, #4]
1004e3b4:	681b      	ldr	r3, [r3, #0]
1004e3b6:	430a      	orrs	r2, r1
1004e3b8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1004e3ba:	687b      	ldr	r3, [r7, #4]
1004e3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e3be:	2220      	movs	r2, #32
1004e3c0:	4013      	ands	r3, r2
1004e3c2:	d00b      	beq.n	1004e3dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1004e3c4:	687b      	ldr	r3, [r7, #4]
1004e3c6:	681b      	ldr	r3, [r3, #0]
1004e3c8:	689b      	ldr	r3, [r3, #8]
1004e3ca:	4a25      	ldr	r2, [pc, #148]	@ (1004e460 <UART_AdvFeatureConfig+0x158>)
1004e3cc:	4013      	ands	r3, r2
1004e3ce:	0019      	movs	r1, r3
1004e3d0:	687b      	ldr	r3, [r7, #4]
1004e3d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004e3d4:	687b      	ldr	r3, [r7, #4]
1004e3d6:	681b      	ldr	r3, [r3, #0]
1004e3d8:	430a      	orrs	r2, r1
1004e3da:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1004e3dc:	687b      	ldr	r3, [r7, #4]
1004e3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e3e0:	2240      	movs	r2, #64	@ 0x40
1004e3e2:	4013      	ands	r3, r2
1004e3e4:	d01d      	beq.n	1004e422 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004e3e6:	687b      	ldr	r3, [r7, #4]
1004e3e8:	681b      	ldr	r3, [r3, #0]
1004e3ea:	685b      	ldr	r3, [r3, #4]
1004e3ec:	4a1d      	ldr	r2, [pc, #116]	@ (1004e464 <UART_AdvFeatureConfig+0x15c>)
1004e3ee:	4013      	ands	r3, r2
1004e3f0:	0019      	movs	r1, r3
1004e3f2:	687b      	ldr	r3, [r7, #4]
1004e3f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004e3f6:	687b      	ldr	r3, [r7, #4]
1004e3f8:	681b      	ldr	r3, [r3, #0]
1004e3fa:	430a      	orrs	r2, r1
1004e3fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1004e3fe:	687b      	ldr	r3, [r7, #4]
1004e400:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004e402:	2380      	movs	r3, #128	@ 0x80
1004e404:	035b      	lsls	r3, r3, #13
1004e406:	429a      	cmp	r2, r3
1004e408:	d10b      	bne.n	1004e422 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1004e40a:	687b      	ldr	r3, [r7, #4]
1004e40c:	681b      	ldr	r3, [r3, #0]
1004e40e:	685b      	ldr	r3, [r3, #4]
1004e410:	4a15      	ldr	r2, [pc, #84]	@ (1004e468 <UART_AdvFeatureConfig+0x160>)
1004e412:	4013      	ands	r3, r2
1004e414:	0019      	movs	r1, r3
1004e416:	687b      	ldr	r3, [r7, #4]
1004e418:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004e41a:	687b      	ldr	r3, [r7, #4]
1004e41c:	681b      	ldr	r3, [r3, #0]
1004e41e:	430a      	orrs	r2, r1
1004e420:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1004e422:	687b      	ldr	r3, [r7, #4]
1004e424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e426:	2280      	movs	r2, #128	@ 0x80
1004e428:	4013      	ands	r3, r2
1004e42a:	d00b      	beq.n	1004e444 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1004e42c:	687b      	ldr	r3, [r7, #4]
1004e42e:	681b      	ldr	r3, [r3, #0]
1004e430:	685b      	ldr	r3, [r3, #4]
1004e432:	4a0e      	ldr	r2, [pc, #56]	@ (1004e46c <UART_AdvFeatureConfig+0x164>)
1004e434:	4013      	ands	r3, r2
1004e436:	0019      	movs	r1, r3
1004e438:	687b      	ldr	r3, [r7, #4]
1004e43a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
1004e43c:	687b      	ldr	r3, [r7, #4]
1004e43e:	681b      	ldr	r3, [r3, #0]
1004e440:	430a      	orrs	r2, r1
1004e442:	605a      	str	r2, [r3, #4]
  }
}
1004e444:	46c0      	nop			@ (mov r8, r8)
1004e446:	46bd      	mov	sp, r7
1004e448:	b002      	add	sp, #8
1004e44a:	bd80      	pop	{r7, pc}
1004e44c:	ffff7fff 	.word	0xffff7fff
1004e450:	fffdffff 	.word	0xfffdffff
1004e454:	fffeffff 	.word	0xfffeffff
1004e458:	fffbffff 	.word	0xfffbffff
1004e45c:	ffffefff 	.word	0xffffefff
1004e460:	ffffdfff 	.word	0xffffdfff
1004e464:	ffefffff 	.word	0xffefffff
1004e468:	ff9fffff 	.word	0xff9fffff
1004e46c:	fff7ffff 	.word	0xfff7ffff

1004e470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1004e470:	b580      	push	{r7, lr}
1004e472:	b092      	sub	sp, #72	@ 0x48
1004e474:	af02      	add	r7, sp, #8
1004e476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1004e478:	687b      	ldr	r3, [r7, #4]
1004e47a:	2290      	movs	r2, #144	@ 0x90
1004e47c:	2100      	movs	r1, #0
1004e47e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
1004e480:	f7f9 fc5c 	bl	10047d3c <HAL_GetTick>
1004e484:	0003      	movs	r3, r0
1004e486:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1004e488:	687b      	ldr	r3, [r7, #4]
1004e48a:	681b      	ldr	r3, [r3, #0]
1004e48c:	681b      	ldr	r3, [r3, #0]
1004e48e:	2208      	movs	r2, #8
1004e490:	4013      	ands	r3, r2
1004e492:	2b08      	cmp	r3, #8
1004e494:	d12d      	bne.n	1004e4f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004e496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e498:	2280      	movs	r2, #128	@ 0x80
1004e49a:	0391      	lsls	r1, r2, #14
1004e49c:	6878      	ldr	r0, [r7, #4]
1004e49e:	4a47      	ldr	r2, [pc, #284]	@ (1004e5bc <UART_CheckIdleState+0x14c>)
1004e4a0:	9200      	str	r2, [sp, #0]
1004e4a2:	2200      	movs	r2, #0
1004e4a4:	f000 f88e 	bl	1004e5c4 <UART_WaitOnFlagUntilTimeout>
1004e4a8:	1e03      	subs	r3, r0, #0
1004e4aa:	d022      	beq.n	1004e4f2 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e4ac:	f3ef 8310 	mrs	r3, PRIMASK
1004e4b0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004e4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
1004e4b4:	63bb      	str	r3, [r7, #56]	@ 0x38
1004e4b6:	2301      	movs	r3, #1
1004e4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e4ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e4bc:	f383 8810 	msr	PRIMASK, r3
}
1004e4c0:	46c0      	nop			@ (mov r8, r8)
1004e4c2:	687b      	ldr	r3, [r7, #4]
1004e4c4:	681b      	ldr	r3, [r3, #0]
1004e4c6:	681a      	ldr	r2, [r3, #0]
1004e4c8:	687b      	ldr	r3, [r7, #4]
1004e4ca:	681b      	ldr	r3, [r3, #0]
1004e4cc:	2180      	movs	r1, #128	@ 0x80
1004e4ce:	438a      	bics	r2, r1
1004e4d0:	601a      	str	r2, [r3, #0]
1004e4d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e4d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004e4d8:	f383 8810 	msr	PRIMASK, r3
}
1004e4dc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1004e4de:	687b      	ldr	r3, [r7, #4]
1004e4e0:	2288      	movs	r2, #136	@ 0x88
1004e4e2:	2120      	movs	r1, #32
1004e4e4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004e4e6:	687b      	ldr	r3, [r7, #4]
1004e4e8:	2284      	movs	r2, #132	@ 0x84
1004e4ea:	2100      	movs	r1, #0
1004e4ec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004e4ee:	2303      	movs	r3, #3
1004e4f0:	e060      	b.n	1004e5b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1004e4f2:	687b      	ldr	r3, [r7, #4]
1004e4f4:	681b      	ldr	r3, [r3, #0]
1004e4f6:	681b      	ldr	r3, [r3, #0]
1004e4f8:	2204      	movs	r2, #4
1004e4fa:	4013      	ands	r3, r2
1004e4fc:	2b04      	cmp	r3, #4
1004e4fe:	d146      	bne.n	1004e58e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004e500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e502:	2280      	movs	r2, #128	@ 0x80
1004e504:	03d1      	lsls	r1, r2, #15
1004e506:	6878      	ldr	r0, [r7, #4]
1004e508:	4a2c      	ldr	r2, [pc, #176]	@ (1004e5bc <UART_CheckIdleState+0x14c>)
1004e50a:	9200      	str	r2, [sp, #0]
1004e50c:	2200      	movs	r2, #0
1004e50e:	f000 f859 	bl	1004e5c4 <UART_WaitOnFlagUntilTimeout>
1004e512:	1e03      	subs	r3, r0, #0
1004e514:	d03b      	beq.n	1004e58e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e516:	f3ef 8310 	mrs	r3, PRIMASK
1004e51a:	60fb      	str	r3, [r7, #12]
  return(result);
1004e51c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004e51e:	637b      	str	r3, [r7, #52]	@ 0x34
1004e520:	2301      	movs	r3, #1
1004e522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e524:	693b      	ldr	r3, [r7, #16]
1004e526:	f383 8810 	msr	PRIMASK, r3
}
1004e52a:	46c0      	nop			@ (mov r8, r8)
1004e52c:	687b      	ldr	r3, [r7, #4]
1004e52e:	681b      	ldr	r3, [r3, #0]
1004e530:	681a      	ldr	r2, [r3, #0]
1004e532:	687b      	ldr	r3, [r7, #4]
1004e534:	681b      	ldr	r3, [r3, #0]
1004e536:	4922      	ldr	r1, [pc, #136]	@ (1004e5c0 <UART_CheckIdleState+0x150>)
1004e538:	400a      	ands	r2, r1
1004e53a:	601a      	str	r2, [r3, #0]
1004e53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e53e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e540:	697b      	ldr	r3, [r7, #20]
1004e542:	f383 8810 	msr	PRIMASK, r3
}
1004e546:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e548:	f3ef 8310 	mrs	r3, PRIMASK
1004e54c:	61bb      	str	r3, [r7, #24]
  return(result);
1004e54e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004e550:	633b      	str	r3, [r7, #48]	@ 0x30
1004e552:	2301      	movs	r3, #1
1004e554:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e556:	69fb      	ldr	r3, [r7, #28]
1004e558:	f383 8810 	msr	PRIMASK, r3
}
1004e55c:	46c0      	nop			@ (mov r8, r8)
1004e55e:	687b      	ldr	r3, [r7, #4]
1004e560:	681b      	ldr	r3, [r3, #0]
1004e562:	689a      	ldr	r2, [r3, #8]
1004e564:	687b      	ldr	r3, [r7, #4]
1004e566:	681b      	ldr	r3, [r3, #0]
1004e568:	2101      	movs	r1, #1
1004e56a:	438a      	bics	r2, r1
1004e56c:	609a      	str	r2, [r3, #8]
1004e56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e570:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e572:	6a3b      	ldr	r3, [r7, #32]
1004e574:	f383 8810 	msr	PRIMASK, r3
}
1004e578:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004e57a:	687b      	ldr	r3, [r7, #4]
1004e57c:	228c      	movs	r2, #140	@ 0x8c
1004e57e:	2120      	movs	r1, #32
1004e580:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004e582:	687b      	ldr	r3, [r7, #4]
1004e584:	2284      	movs	r2, #132	@ 0x84
1004e586:	2100      	movs	r1, #0
1004e588:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004e58a:	2303      	movs	r3, #3
1004e58c:	e012      	b.n	1004e5b4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1004e58e:	687b      	ldr	r3, [r7, #4]
1004e590:	2288      	movs	r2, #136	@ 0x88
1004e592:	2120      	movs	r1, #32
1004e594:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004e596:	687b      	ldr	r3, [r7, #4]
1004e598:	228c      	movs	r2, #140	@ 0x8c
1004e59a:	2120      	movs	r1, #32
1004e59c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004e59e:	687b      	ldr	r3, [r7, #4]
1004e5a0:	2200      	movs	r2, #0
1004e5a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
1004e5a4:	687b      	ldr	r3, [r7, #4]
1004e5a6:	2200      	movs	r2, #0
1004e5a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004e5aa:	687b      	ldr	r3, [r7, #4]
1004e5ac:	2284      	movs	r2, #132	@ 0x84
1004e5ae:	2100      	movs	r1, #0
1004e5b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e5b2:	2300      	movs	r3, #0
}
1004e5b4:	0018      	movs	r0, r3
1004e5b6:	46bd      	mov	sp, r7
1004e5b8:	b010      	add	sp, #64	@ 0x40
1004e5ba:	bd80      	pop	{r7, pc}
1004e5bc:	01ffffff 	.word	0x01ffffff
1004e5c0:	fffffedf 	.word	0xfffffedf

1004e5c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004e5c4:	b580      	push	{r7, lr}
1004e5c6:	b084      	sub	sp, #16
1004e5c8:	af00      	add	r7, sp, #0
1004e5ca:	60f8      	str	r0, [r7, #12]
1004e5cc:	60b9      	str	r1, [r7, #8]
1004e5ce:	603b      	str	r3, [r7, #0]
1004e5d0:	1dfb      	adds	r3, r7, #7
1004e5d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004e5d4:	e051      	b.n	1004e67a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1004e5d6:	69bb      	ldr	r3, [r7, #24]
1004e5d8:	3301      	adds	r3, #1
1004e5da:	d04e      	beq.n	1004e67a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004e5dc:	f7f9 fbae 	bl	10047d3c <HAL_GetTick>
1004e5e0:	0002      	movs	r2, r0
1004e5e2:	683b      	ldr	r3, [r7, #0]
1004e5e4:	1ad3      	subs	r3, r2, r3
1004e5e6:	69ba      	ldr	r2, [r7, #24]
1004e5e8:	429a      	cmp	r2, r3
1004e5ea:	d302      	bcc.n	1004e5f2 <UART_WaitOnFlagUntilTimeout+0x2e>
1004e5ec:	69bb      	ldr	r3, [r7, #24]
1004e5ee:	2b00      	cmp	r3, #0
1004e5f0:	d101      	bne.n	1004e5f6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004e5f2:	2303      	movs	r3, #3
1004e5f4:	e051      	b.n	1004e69a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004e5f6:	68fb      	ldr	r3, [r7, #12]
1004e5f8:	681b      	ldr	r3, [r3, #0]
1004e5fa:	681b      	ldr	r3, [r3, #0]
1004e5fc:	2204      	movs	r2, #4
1004e5fe:	4013      	ands	r3, r2
1004e600:	d03b      	beq.n	1004e67a <UART_WaitOnFlagUntilTimeout+0xb6>
1004e602:	68bb      	ldr	r3, [r7, #8]
1004e604:	2b80      	cmp	r3, #128	@ 0x80
1004e606:	d038      	beq.n	1004e67a <UART_WaitOnFlagUntilTimeout+0xb6>
1004e608:	68bb      	ldr	r3, [r7, #8]
1004e60a:	2b40      	cmp	r3, #64	@ 0x40
1004e60c:	d035      	beq.n	1004e67a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004e60e:	68fb      	ldr	r3, [r7, #12]
1004e610:	681b      	ldr	r3, [r3, #0]
1004e612:	69db      	ldr	r3, [r3, #28]
1004e614:	2208      	movs	r2, #8
1004e616:	4013      	ands	r3, r2
1004e618:	2b08      	cmp	r3, #8
1004e61a:	d111      	bne.n	1004e640 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004e61c:	68fb      	ldr	r3, [r7, #12]
1004e61e:	681b      	ldr	r3, [r3, #0]
1004e620:	2208      	movs	r2, #8
1004e622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004e624:	68fb      	ldr	r3, [r7, #12]
1004e626:	0018      	movs	r0, r3
1004e628:	f000 f83c 	bl	1004e6a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004e62c:	68fb      	ldr	r3, [r7, #12]
1004e62e:	2290      	movs	r2, #144	@ 0x90
1004e630:	2108      	movs	r1, #8
1004e632:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004e634:	68fb      	ldr	r3, [r7, #12]
1004e636:	2284      	movs	r2, #132	@ 0x84
1004e638:	2100      	movs	r1, #0
1004e63a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004e63c:	2301      	movs	r3, #1
1004e63e:	e02c      	b.n	1004e69a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1004e640:	68fb      	ldr	r3, [r7, #12]
1004e642:	681b      	ldr	r3, [r3, #0]
1004e644:	69da      	ldr	r2, [r3, #28]
1004e646:	2380      	movs	r3, #128	@ 0x80
1004e648:	011b      	lsls	r3, r3, #4
1004e64a:	401a      	ands	r2, r3
1004e64c:	2380      	movs	r3, #128	@ 0x80
1004e64e:	011b      	lsls	r3, r3, #4
1004e650:	429a      	cmp	r2, r3
1004e652:	d112      	bne.n	1004e67a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004e654:	68fb      	ldr	r3, [r7, #12]
1004e656:	681b      	ldr	r3, [r3, #0]
1004e658:	2280      	movs	r2, #128	@ 0x80
1004e65a:	0112      	lsls	r2, r2, #4
1004e65c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004e65e:	68fb      	ldr	r3, [r7, #12]
1004e660:	0018      	movs	r0, r3
1004e662:	f000 f81f 	bl	1004e6a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004e666:	68fb      	ldr	r3, [r7, #12]
1004e668:	2290      	movs	r2, #144	@ 0x90
1004e66a:	2120      	movs	r1, #32
1004e66c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004e66e:	68fb      	ldr	r3, [r7, #12]
1004e670:	2284      	movs	r2, #132	@ 0x84
1004e672:	2100      	movs	r1, #0
1004e674:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004e676:	2303      	movs	r3, #3
1004e678:	e00f      	b.n	1004e69a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004e67a:	68fb      	ldr	r3, [r7, #12]
1004e67c:	681b      	ldr	r3, [r3, #0]
1004e67e:	69db      	ldr	r3, [r3, #28]
1004e680:	68ba      	ldr	r2, [r7, #8]
1004e682:	4013      	ands	r3, r2
1004e684:	68ba      	ldr	r2, [r7, #8]
1004e686:	1ad3      	subs	r3, r2, r3
1004e688:	425a      	negs	r2, r3
1004e68a:	4153      	adcs	r3, r2
1004e68c:	b2db      	uxtb	r3, r3
1004e68e:	001a      	movs	r2, r3
1004e690:	1dfb      	adds	r3, r7, #7
1004e692:	781b      	ldrb	r3, [r3, #0]
1004e694:	429a      	cmp	r2, r3
1004e696:	d09e      	beq.n	1004e5d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004e698:	2300      	movs	r3, #0
}
1004e69a:	0018      	movs	r0, r3
1004e69c:	46bd      	mov	sp, r7
1004e69e:	b004      	add	sp, #16
1004e6a0:	bd80      	pop	{r7, pc}
	...

1004e6a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004e6a4:	b580      	push	{r7, lr}
1004e6a6:	b08e      	sub	sp, #56	@ 0x38
1004e6a8:	af00      	add	r7, sp, #0
1004e6aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e6ac:	f3ef 8310 	mrs	r3, PRIMASK
1004e6b0:	617b      	str	r3, [r7, #20]
  return(result);
1004e6b2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004e6b4:	637b      	str	r3, [r7, #52]	@ 0x34
1004e6b6:	2301      	movs	r3, #1
1004e6b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e6ba:	69bb      	ldr	r3, [r7, #24]
1004e6bc:	f383 8810 	msr	PRIMASK, r3
}
1004e6c0:	46c0      	nop			@ (mov r8, r8)
1004e6c2:	687b      	ldr	r3, [r7, #4]
1004e6c4:	681b      	ldr	r3, [r3, #0]
1004e6c6:	681a      	ldr	r2, [r3, #0]
1004e6c8:	687b      	ldr	r3, [r7, #4]
1004e6ca:	681b      	ldr	r3, [r3, #0]
1004e6cc:	4926      	ldr	r1, [pc, #152]	@ (1004e768 <UART_EndRxTransfer+0xc4>)
1004e6ce:	400a      	ands	r2, r1
1004e6d0:	601a      	str	r2, [r3, #0]
1004e6d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e6d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e6d6:	69fb      	ldr	r3, [r7, #28]
1004e6d8:	f383 8810 	msr	PRIMASK, r3
}
1004e6dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e6de:	f3ef 8310 	mrs	r3, PRIMASK
1004e6e2:	623b      	str	r3, [r7, #32]
  return(result);
1004e6e4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004e6e6:	633b      	str	r3, [r7, #48]	@ 0x30
1004e6e8:	2301      	movs	r3, #1
1004e6ea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e6ee:	f383 8810 	msr	PRIMASK, r3
}
1004e6f2:	46c0      	nop			@ (mov r8, r8)
1004e6f4:	687b      	ldr	r3, [r7, #4]
1004e6f6:	681b      	ldr	r3, [r3, #0]
1004e6f8:	689a      	ldr	r2, [r3, #8]
1004e6fa:	687b      	ldr	r3, [r7, #4]
1004e6fc:	681b      	ldr	r3, [r3, #0]
1004e6fe:	491b      	ldr	r1, [pc, #108]	@ (1004e76c <UART_EndRxTransfer+0xc8>)
1004e700:	400a      	ands	r2, r1
1004e702:	609a      	str	r2, [r3, #8]
1004e704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e706:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e70a:	f383 8810 	msr	PRIMASK, r3
}
1004e70e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004e710:	687b      	ldr	r3, [r7, #4]
1004e712:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004e714:	2b01      	cmp	r3, #1
1004e716:	d118      	bne.n	1004e74a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e718:	f3ef 8310 	mrs	r3, PRIMASK
1004e71c:	60bb      	str	r3, [r7, #8]
  return(result);
1004e71e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004e720:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004e722:	2301      	movs	r3, #1
1004e724:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e726:	68fb      	ldr	r3, [r7, #12]
1004e728:	f383 8810 	msr	PRIMASK, r3
}
1004e72c:	46c0      	nop			@ (mov r8, r8)
1004e72e:	687b      	ldr	r3, [r7, #4]
1004e730:	681b      	ldr	r3, [r3, #0]
1004e732:	681a      	ldr	r2, [r3, #0]
1004e734:	687b      	ldr	r3, [r7, #4]
1004e736:	681b      	ldr	r3, [r3, #0]
1004e738:	2110      	movs	r1, #16
1004e73a:	438a      	bics	r2, r1
1004e73c:	601a      	str	r2, [r3, #0]
1004e73e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004e740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e742:	693b      	ldr	r3, [r7, #16]
1004e744:	f383 8810 	msr	PRIMASK, r3
}
1004e748:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004e74a:	687b      	ldr	r3, [r7, #4]
1004e74c:	228c      	movs	r2, #140	@ 0x8c
1004e74e:	2120      	movs	r1, #32
1004e750:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004e752:	687b      	ldr	r3, [r7, #4]
1004e754:	2200      	movs	r2, #0
1004e756:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004e758:	687b      	ldr	r3, [r7, #4]
1004e75a:	2200      	movs	r2, #0
1004e75c:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004e75e:	46c0      	nop			@ (mov r8, r8)
1004e760:	46bd      	mov	sp, r7
1004e762:	b00e      	add	sp, #56	@ 0x38
1004e764:	bd80      	pop	{r7, pc}
1004e766:	46c0      	nop			@ (mov r8, r8)
1004e768:	fffffedf 	.word	0xfffffedf
1004e76c:	effffffe 	.word	0xeffffffe

1004e770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
1004e770:	b580      	push	{r7, lr}
1004e772:	b082      	sub	sp, #8
1004e774:	af00      	add	r7, sp, #0
1004e776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1004e778:	46c0      	nop			@ (mov r8, r8)
1004e77a:	46bd      	mov	sp, r7
1004e77c:	b002      	add	sp, #8
1004e77e:	bd80      	pop	{r7, pc}

1004e780 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
1004e780:	b580      	push	{r7, lr}
1004e782:	b082      	sub	sp, #8
1004e784:	af00      	add	r7, sp, #0
1004e786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004e788:	46c0      	nop			@ (mov r8, r8)
1004e78a:	46bd      	mov	sp, r7
1004e78c:	b002      	add	sp, #8
1004e78e:	bd80      	pop	{r7, pc}

1004e790 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
1004e790:	b580      	push	{r7, lr}
1004e792:	b082      	sub	sp, #8
1004e794:	af00      	add	r7, sp, #0
1004e796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004e798:	46c0      	nop			@ (mov r8, r8)
1004e79a:	46bd      	mov	sp, r7
1004e79c:	b002      	add	sp, #8
1004e79e:	bd80      	pop	{r7, pc}

1004e7a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004e7a0:	b580      	push	{r7, lr}
1004e7a2:	b084      	sub	sp, #16
1004e7a4:	af00      	add	r7, sp, #0
1004e7a6:	6078      	str	r0, [r7, #4]
1004e7a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004e7aa:	687b      	ldr	r3, [r7, #4]
1004e7ac:	2284      	movs	r2, #132	@ 0x84
1004e7ae:	5c9b      	ldrb	r3, [r3, r2]
1004e7b0:	2b01      	cmp	r3, #1
1004e7b2:	d101      	bne.n	1004e7b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004e7b4:	2302      	movs	r3, #2
1004e7b6:	e02e      	b.n	1004e816 <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004e7b8:	687b      	ldr	r3, [r7, #4]
1004e7ba:	2284      	movs	r2, #132	@ 0x84
1004e7bc:	2101      	movs	r1, #1
1004e7be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004e7c0:	687b      	ldr	r3, [r7, #4]
1004e7c2:	2288      	movs	r2, #136	@ 0x88
1004e7c4:	2124      	movs	r1, #36	@ 0x24
1004e7c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004e7c8:	687b      	ldr	r3, [r7, #4]
1004e7ca:	681b      	ldr	r3, [r3, #0]
1004e7cc:	681b      	ldr	r3, [r3, #0]
1004e7ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004e7d0:	687b      	ldr	r3, [r7, #4]
1004e7d2:	681b      	ldr	r3, [r3, #0]
1004e7d4:	681a      	ldr	r2, [r3, #0]
1004e7d6:	687b      	ldr	r3, [r7, #4]
1004e7d8:	681b      	ldr	r3, [r3, #0]
1004e7da:	2101      	movs	r1, #1
1004e7dc:	438a      	bics	r2, r1
1004e7de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1004e7e0:	687b      	ldr	r3, [r7, #4]
1004e7e2:	681b      	ldr	r3, [r3, #0]
1004e7e4:	689b      	ldr	r3, [r3, #8]
1004e7e6:	00db      	lsls	r3, r3, #3
1004e7e8:	08d9      	lsrs	r1, r3, #3
1004e7ea:	687b      	ldr	r3, [r7, #4]
1004e7ec:	681b      	ldr	r3, [r3, #0]
1004e7ee:	683a      	ldr	r2, [r7, #0]
1004e7f0:	430a      	orrs	r2, r1
1004e7f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004e7f4:	687b      	ldr	r3, [r7, #4]
1004e7f6:	0018      	movs	r0, r3
1004e7f8:	f000 f854 	bl	1004e8a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004e7fc:	687b      	ldr	r3, [r7, #4]
1004e7fe:	681b      	ldr	r3, [r3, #0]
1004e800:	68fa      	ldr	r2, [r7, #12]
1004e802:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004e804:	687b      	ldr	r3, [r7, #4]
1004e806:	2288      	movs	r2, #136	@ 0x88
1004e808:	2120      	movs	r1, #32
1004e80a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004e80c:	687b      	ldr	r3, [r7, #4]
1004e80e:	2284      	movs	r2, #132	@ 0x84
1004e810:	2100      	movs	r1, #0
1004e812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e814:	2300      	movs	r3, #0
}
1004e816:	0018      	movs	r0, r3
1004e818:	46bd      	mov	sp, r7
1004e81a:	b004      	add	sp, #16
1004e81c:	bd80      	pop	{r7, pc}
	...

1004e820 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004e820:	b580      	push	{r7, lr}
1004e822:	b084      	sub	sp, #16
1004e824:	af00      	add	r7, sp, #0
1004e826:	6078      	str	r0, [r7, #4]
1004e828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004e82a:	687b      	ldr	r3, [r7, #4]
1004e82c:	2284      	movs	r2, #132	@ 0x84
1004e82e:	5c9b      	ldrb	r3, [r3, r2]
1004e830:	2b01      	cmp	r3, #1
1004e832:	d101      	bne.n	1004e838 <HAL_UARTEx_SetRxFifoThreshold+0x18>
1004e834:	2302      	movs	r3, #2
1004e836:	e02f      	b.n	1004e898 <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004e838:	687b      	ldr	r3, [r7, #4]
1004e83a:	2284      	movs	r2, #132	@ 0x84
1004e83c:	2101      	movs	r1, #1
1004e83e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004e840:	687b      	ldr	r3, [r7, #4]
1004e842:	2288      	movs	r2, #136	@ 0x88
1004e844:	2124      	movs	r1, #36	@ 0x24
1004e846:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004e848:	687b      	ldr	r3, [r7, #4]
1004e84a:	681b      	ldr	r3, [r3, #0]
1004e84c:	681b      	ldr	r3, [r3, #0]
1004e84e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004e850:	687b      	ldr	r3, [r7, #4]
1004e852:	681b      	ldr	r3, [r3, #0]
1004e854:	681a      	ldr	r2, [r3, #0]
1004e856:	687b      	ldr	r3, [r7, #4]
1004e858:	681b      	ldr	r3, [r3, #0]
1004e85a:	2101      	movs	r1, #1
1004e85c:	438a      	bics	r2, r1
1004e85e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004e860:	687b      	ldr	r3, [r7, #4]
1004e862:	681b      	ldr	r3, [r3, #0]
1004e864:	689b      	ldr	r3, [r3, #8]
1004e866:	4a0e      	ldr	r2, [pc, #56]	@ (1004e8a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004e868:	4013      	ands	r3, r2
1004e86a:	0019      	movs	r1, r3
1004e86c:	687b      	ldr	r3, [r7, #4]
1004e86e:	681b      	ldr	r3, [r3, #0]
1004e870:	683a      	ldr	r2, [r7, #0]
1004e872:	430a      	orrs	r2, r1
1004e874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004e876:	687b      	ldr	r3, [r7, #4]
1004e878:	0018      	movs	r0, r3
1004e87a:	f000 f813 	bl	1004e8a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004e87e:	687b      	ldr	r3, [r7, #4]
1004e880:	681b      	ldr	r3, [r3, #0]
1004e882:	68fa      	ldr	r2, [r7, #12]
1004e884:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004e886:	687b      	ldr	r3, [r7, #4]
1004e888:	2288      	movs	r2, #136	@ 0x88
1004e88a:	2120      	movs	r1, #32
1004e88c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004e88e:	687b      	ldr	r3, [r7, #4]
1004e890:	2284      	movs	r2, #132	@ 0x84
1004e892:	2100      	movs	r1, #0
1004e894:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e896:	2300      	movs	r3, #0
}
1004e898:	0018      	movs	r0, r3
1004e89a:	46bd      	mov	sp, r7
1004e89c:	b004      	add	sp, #16
1004e89e:	bd80      	pop	{r7, pc}
1004e8a0:	f1ffffff 	.word	0xf1ffffff

1004e8a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004e8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e8a6:	b085      	sub	sp, #20
1004e8a8:	af00      	add	r7, sp, #0
1004e8aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004e8ac:	687b      	ldr	r3, [r7, #4]
1004e8ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1004e8b0:	2b00      	cmp	r3, #0
1004e8b2:	d108      	bne.n	1004e8c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004e8b4:	687b      	ldr	r3, [r7, #4]
1004e8b6:	226a      	movs	r2, #106	@ 0x6a
1004e8b8:	2101      	movs	r1, #1
1004e8ba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004e8bc:	687b      	ldr	r3, [r7, #4]
1004e8be:	2268      	movs	r2, #104	@ 0x68
1004e8c0:	2101      	movs	r1, #1
1004e8c2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004e8c4:	e043      	b.n	1004e94e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004e8c6:	260f      	movs	r6, #15
1004e8c8:	19bb      	adds	r3, r7, r6
1004e8ca:	2208      	movs	r2, #8
1004e8cc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004e8ce:	200e      	movs	r0, #14
1004e8d0:	183b      	adds	r3, r7, r0
1004e8d2:	2208      	movs	r2, #8
1004e8d4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004e8d6:	687b      	ldr	r3, [r7, #4]
1004e8d8:	681b      	ldr	r3, [r3, #0]
1004e8da:	689b      	ldr	r3, [r3, #8]
1004e8dc:	0e5b      	lsrs	r3, r3, #25
1004e8de:	b2da      	uxtb	r2, r3
1004e8e0:	240d      	movs	r4, #13
1004e8e2:	193b      	adds	r3, r7, r4
1004e8e4:	2107      	movs	r1, #7
1004e8e6:	400a      	ands	r2, r1
1004e8e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004e8ea:	687b      	ldr	r3, [r7, #4]
1004e8ec:	681b      	ldr	r3, [r3, #0]
1004e8ee:	689b      	ldr	r3, [r3, #8]
1004e8f0:	0f5b      	lsrs	r3, r3, #29
1004e8f2:	b2da      	uxtb	r2, r3
1004e8f4:	250c      	movs	r5, #12
1004e8f6:	197b      	adds	r3, r7, r5
1004e8f8:	2107      	movs	r1, #7
1004e8fa:	400a      	ands	r2, r1
1004e8fc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004e8fe:	183b      	adds	r3, r7, r0
1004e900:	781b      	ldrb	r3, [r3, #0]
1004e902:	197a      	adds	r2, r7, r5
1004e904:	7812      	ldrb	r2, [r2, #0]
1004e906:	4914      	ldr	r1, [pc, #80]	@ (1004e958 <UARTEx_SetNbDataToProcess+0xb4>)
1004e908:	5c8a      	ldrb	r2, [r1, r2]
1004e90a:	435a      	muls	r2, r3
1004e90c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004e90e:	197b      	adds	r3, r7, r5
1004e910:	781b      	ldrb	r3, [r3, #0]
1004e912:	4a12      	ldr	r2, [pc, #72]	@ (1004e95c <UARTEx_SetNbDataToProcess+0xb8>)
1004e914:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004e916:	0019      	movs	r1, r3
1004e918:	f7f1 fd1c 	bl	10040354 <__divsi3>
1004e91c:	0003      	movs	r3, r0
1004e91e:	b299      	uxth	r1, r3
1004e920:	687b      	ldr	r3, [r7, #4]
1004e922:	226a      	movs	r2, #106	@ 0x6a
1004e924:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004e926:	19bb      	adds	r3, r7, r6
1004e928:	781b      	ldrb	r3, [r3, #0]
1004e92a:	193a      	adds	r2, r7, r4
1004e92c:	7812      	ldrb	r2, [r2, #0]
1004e92e:	490a      	ldr	r1, [pc, #40]	@ (1004e958 <UARTEx_SetNbDataToProcess+0xb4>)
1004e930:	5c8a      	ldrb	r2, [r1, r2]
1004e932:	435a      	muls	r2, r3
1004e934:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004e936:	193b      	adds	r3, r7, r4
1004e938:	781b      	ldrb	r3, [r3, #0]
1004e93a:	4a08      	ldr	r2, [pc, #32]	@ (1004e95c <UARTEx_SetNbDataToProcess+0xb8>)
1004e93c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004e93e:	0019      	movs	r1, r3
1004e940:	f7f1 fd08 	bl	10040354 <__divsi3>
1004e944:	0003      	movs	r3, r0
1004e946:	b299      	uxth	r1, r3
1004e948:	687b      	ldr	r3, [r7, #4]
1004e94a:	2268      	movs	r2, #104	@ 0x68
1004e94c:	5299      	strh	r1, [r3, r2]
}
1004e94e:	46c0      	nop			@ (mov r8, r8)
1004e950:	46bd      	mov	sp, r7
1004e952:	b005      	add	sp, #20
1004e954:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e956:	46c0      	nop			@ (mov r8, r8)
1004e958:	10069804 	.word	0x10069804
1004e95c:	1006980c 	.word	0x1006980c

1004e960 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
1004e960:	b580      	push	{r7, lr}
1004e962:	b088      	sub	sp, #32
1004e964:	af00      	add	r7, sp, #0
1004e966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
1004e968:	687b      	ldr	r3, [r7, #4]
1004e96a:	681b      	ldr	r3, [r3, #0]
1004e96c:	69db      	ldr	r3, [r3, #28]
1004e96e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
1004e970:	687b      	ldr	r3, [r7, #4]
1004e972:	681b      	ldr	r3, [r3, #0]
1004e974:	681b      	ldr	r3, [r3, #0]
1004e976:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
1004e978:	687b      	ldr	r3, [r7, #4]
1004e97a:	681b      	ldr	r3, [r3, #0]
1004e97c:	689b      	ldr	r3, [r3, #8]
1004e97e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
1004e980:	69fb      	ldr	r3, [r7, #28]
1004e982:	4ab3      	ldr	r2, [pc, #716]	@ (1004ec50 <HAL_USART_IRQHandler+0x2f0>)
1004e984:	4013      	ands	r3, r2
1004e986:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
1004e988:	693b      	ldr	r3, [r7, #16]
1004e98a:	2b00      	cmp	r3, #0
1004e98c:	d117      	bne.n	1004e9be <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004e98e:	69fb      	ldr	r3, [r7, #28]
1004e990:	2220      	movs	r2, #32
1004e992:	4013      	ands	r3, r2
1004e994:	d013      	beq.n	1004e9be <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004e996:	69bb      	ldr	r3, [r7, #24]
1004e998:	2220      	movs	r2, #32
1004e99a:	4013      	ands	r3, r2
1004e99c:	d104      	bne.n	1004e9a8 <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004e99e:	697a      	ldr	r2, [r7, #20]
1004e9a0:	2380      	movs	r3, #128	@ 0x80
1004e9a2:	055b      	lsls	r3, r3, #21
1004e9a4:	4013      	ands	r3, r2
1004e9a6:	d00a      	beq.n	1004e9be <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
1004e9a8:	687b      	ldr	r3, [r7, #4]
1004e9aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e9ac:	2b00      	cmp	r3, #0
1004e9ae:	d100      	bne.n	1004e9b2 <HAL_USART_IRQHandler+0x52>
1004e9b0:	e14a      	b.n	1004ec48 <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
1004e9b2:	687b      	ldr	r3, [r7, #4]
1004e9b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e9b6:	687a      	ldr	r2, [r7, #4]
1004e9b8:	0010      	movs	r0, r2
1004e9ba:	4798      	blx	r3
      }
      return;
1004e9bc:	e144      	b.n	1004ec48 <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
1004e9be:	693b      	ldr	r3, [r7, #16]
1004e9c0:	2b00      	cmp	r3, #0
1004e9c2:	d100      	bne.n	1004e9c6 <HAL_USART_IRQHandler+0x66>
1004e9c4:	e100      	b.n	1004ebc8 <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004e9c6:	697b      	ldr	r3, [r7, #20]
1004e9c8:	4aa2      	ldr	r2, [pc, #648]	@ (1004ec54 <HAL_USART_IRQHandler+0x2f4>)
1004e9ca:	4013      	ands	r3, r2
1004e9cc:	d105      	bne.n	1004e9da <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
1004e9ce:	69ba      	ldr	r2, [r7, #24]
1004e9d0:	2390      	movs	r3, #144	@ 0x90
1004e9d2:	005b      	lsls	r3, r3, #1
1004e9d4:	4013      	ands	r3, r2
1004e9d6:	d100      	bne.n	1004e9da <HAL_USART_IRQHandler+0x7a>
1004e9d8:	e0f6      	b.n	1004ebc8 <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004e9da:	69fb      	ldr	r3, [r7, #28]
1004e9dc:	2201      	movs	r2, #1
1004e9de:	4013      	ands	r3, r2
1004e9e0:	d00e      	beq.n	1004ea00 <HAL_USART_IRQHandler+0xa0>
1004e9e2:	69ba      	ldr	r2, [r7, #24]
1004e9e4:	2380      	movs	r3, #128	@ 0x80
1004e9e6:	005b      	lsls	r3, r3, #1
1004e9e8:	4013      	ands	r3, r2
1004e9ea:	d009      	beq.n	1004ea00 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
1004e9ec:	687b      	ldr	r3, [r7, #4]
1004e9ee:	681b      	ldr	r3, [r3, #0]
1004e9f0:	2201      	movs	r2, #1
1004e9f2:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
1004e9f4:	687b      	ldr	r3, [r7, #4]
1004e9f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e9f8:	2201      	movs	r2, #1
1004e9fa:	431a      	orrs	r2, r3
1004e9fc:	687b      	ldr	r3, [r7, #4]
1004e9fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004ea00:	69fb      	ldr	r3, [r7, #28]
1004ea02:	2202      	movs	r2, #2
1004ea04:	4013      	ands	r3, r2
1004ea06:	d00d      	beq.n	1004ea24 <HAL_USART_IRQHandler+0xc4>
1004ea08:	697b      	ldr	r3, [r7, #20]
1004ea0a:	2201      	movs	r2, #1
1004ea0c:	4013      	ands	r3, r2
1004ea0e:	d009      	beq.n	1004ea24 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
1004ea10:	687b      	ldr	r3, [r7, #4]
1004ea12:	681b      	ldr	r3, [r3, #0]
1004ea14:	2202      	movs	r2, #2
1004ea16:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
1004ea18:	687b      	ldr	r3, [r7, #4]
1004ea1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004ea1c:	2204      	movs	r2, #4
1004ea1e:	431a      	orrs	r2, r3
1004ea20:	687b      	ldr	r3, [r7, #4]
1004ea22:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004ea24:	69fb      	ldr	r3, [r7, #28]
1004ea26:	2204      	movs	r2, #4
1004ea28:	4013      	ands	r3, r2
1004ea2a:	d00d      	beq.n	1004ea48 <HAL_USART_IRQHandler+0xe8>
1004ea2c:	697b      	ldr	r3, [r7, #20]
1004ea2e:	2201      	movs	r2, #1
1004ea30:	4013      	ands	r3, r2
1004ea32:	d009      	beq.n	1004ea48 <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
1004ea34:	687b      	ldr	r3, [r7, #4]
1004ea36:	681b      	ldr	r3, [r3, #0]
1004ea38:	2204      	movs	r2, #4
1004ea3a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
1004ea3c:	687b      	ldr	r3, [r7, #4]
1004ea3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004ea40:	2202      	movs	r2, #2
1004ea42:	431a      	orrs	r2, r3
1004ea44:	687b      	ldr	r3, [r7, #4]
1004ea46:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004ea48:	69fb      	ldr	r3, [r7, #28]
1004ea4a:	2208      	movs	r2, #8
1004ea4c:	4013      	ands	r3, r2
1004ea4e:	d011      	beq.n	1004ea74 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004ea50:	69bb      	ldr	r3, [r7, #24]
1004ea52:	2220      	movs	r2, #32
1004ea54:	4013      	ands	r3, r2
1004ea56:	d103      	bne.n	1004ea60 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
1004ea58:	697b      	ldr	r3, [r7, #20]
1004ea5a:	4a7e      	ldr	r2, [pc, #504]	@ (1004ec54 <HAL_USART_IRQHandler+0x2f4>)
1004ea5c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004ea5e:	d009      	beq.n	1004ea74 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
1004ea60:	687b      	ldr	r3, [r7, #4]
1004ea62:	681b      	ldr	r3, [r3, #0]
1004ea64:	2208      	movs	r2, #8
1004ea66:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
1004ea68:	687b      	ldr	r3, [r7, #4]
1004ea6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004ea6c:	2208      	movs	r2, #8
1004ea6e:	431a      	orrs	r2, r3
1004ea70:	687b      	ldr	r3, [r7, #4]
1004ea72:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
1004ea74:	69fa      	ldr	r2, [r7, #28]
1004ea76:	2380      	movs	r3, #128	@ 0x80
1004ea78:	011b      	lsls	r3, r3, #4
1004ea7a:	4013      	ands	r3, r2
1004ea7c:	d00f      	beq.n	1004ea9e <HAL_USART_IRQHandler+0x13e>
1004ea7e:	69ba      	ldr	r2, [r7, #24]
1004ea80:	2380      	movs	r3, #128	@ 0x80
1004ea82:	04db      	lsls	r3, r3, #19
1004ea84:	4013      	ands	r3, r2
1004ea86:	d00a      	beq.n	1004ea9e <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
1004ea88:	687b      	ldr	r3, [r7, #4]
1004ea8a:	681b      	ldr	r3, [r3, #0]
1004ea8c:	2280      	movs	r2, #128	@ 0x80
1004ea8e:	0112      	lsls	r2, r2, #4
1004ea90:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
1004ea92:	687b      	ldr	r3, [r7, #4]
1004ea94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004ea96:	2280      	movs	r2, #128	@ 0x80
1004ea98:	431a      	orrs	r2, r3
1004ea9a:	687b      	ldr	r3, [r7, #4]
1004ea9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004ea9e:	69fa      	ldr	r2, [r7, #28]
1004eaa0:	2380      	movs	r3, #128	@ 0x80
1004eaa2:	019b      	lsls	r3, r3, #6
1004eaa4:	4013      	ands	r3, r2
1004eaa6:	d01a      	beq.n	1004eade <HAL_USART_IRQHandler+0x17e>
1004eaa8:	697b      	ldr	r3, [r7, #20]
1004eaaa:	2201      	movs	r2, #1
1004eaac:	4013      	ands	r3, r2
1004eaae:	d016      	beq.n	1004eade <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
1004eab0:	687b      	ldr	r3, [r7, #4]
1004eab2:	2259      	movs	r2, #89	@ 0x59
1004eab4:	5c9b      	ldrb	r3, [r3, r2]
1004eab6:	b2db      	uxtb	r3, r3
1004eab8:	2b22      	cmp	r3, #34	@ 0x22
1004eaba:	d105      	bne.n	1004eac8 <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004eabc:	687b      	ldr	r3, [r7, #4]
1004eabe:	681b      	ldr	r3, [r3, #0]
1004eac0:	2280      	movs	r2, #128	@ 0x80
1004eac2:	0192      	lsls	r2, r2, #6
1004eac4:	621a      	str	r2, [r3, #32]
        return;
1004eac6:	e0ca      	b.n	1004ec5e <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004eac8:	687b      	ldr	r3, [r7, #4]
1004eaca:	681b      	ldr	r3, [r3, #0]
1004eacc:	2280      	movs	r2, #128	@ 0x80
1004eace:	0192      	lsls	r2, r2, #6
1004ead0:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
1004ead2:	687b      	ldr	r3, [r7, #4]
1004ead4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004ead6:	2220      	movs	r2, #32
1004ead8:	431a      	orrs	r2, r3
1004eada:	687b      	ldr	r3, [r7, #4]
1004eadc:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
1004eade:	687b      	ldr	r3, [r7, #4]
1004eae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004eae2:	2b00      	cmp	r3, #0
1004eae4:	d100      	bne.n	1004eae8 <HAL_USART_IRQHandler+0x188>
1004eae6:	e0b1      	b.n	1004ec4c <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004eae8:	69fb      	ldr	r3, [r7, #28]
1004eaea:	2220      	movs	r2, #32
1004eaec:	4013      	ands	r3, r2
1004eaee:	d011      	beq.n	1004eb14 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004eaf0:	69bb      	ldr	r3, [r7, #24]
1004eaf2:	2220      	movs	r2, #32
1004eaf4:	4013      	ands	r3, r2
1004eaf6:	d104      	bne.n	1004eb02 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004eaf8:	697a      	ldr	r2, [r7, #20]
1004eafa:	2380      	movs	r3, #128	@ 0x80
1004eafc:	055b      	lsls	r3, r3, #21
1004eafe:	4013      	ands	r3, r2
1004eb00:	d008      	beq.n	1004eb14 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
1004eb02:	687b      	ldr	r3, [r7, #4]
1004eb04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004eb06:	2b00      	cmp	r3, #0
1004eb08:	d004      	beq.n	1004eb14 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
1004eb0a:	687b      	ldr	r3, [r7, #4]
1004eb0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004eb0e:	687a      	ldr	r2, [r7, #4]
1004eb10:	0010      	movs	r0, r2
1004eb12:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
1004eb14:	687b      	ldr	r3, [r7, #4]
1004eb16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004eb18:	2208      	movs	r2, #8
1004eb1a:	4013      	ands	r3, r2
1004eb1c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
1004eb1e:	687b      	ldr	r3, [r7, #4]
1004eb20:	681b      	ldr	r3, [r3, #0]
1004eb22:	689b      	ldr	r3, [r3, #8]
1004eb24:	2240      	movs	r2, #64	@ 0x40
1004eb26:	4013      	ands	r3, r2
1004eb28:	2b40      	cmp	r3, #64	@ 0x40
1004eb2a:	d002      	beq.n	1004eb32 <HAL_USART_IRQHandler+0x1d2>
1004eb2c:	68fb      	ldr	r3, [r7, #12]
1004eb2e:	2b00      	cmp	r3, #0
1004eb30:	d040      	beq.n	1004ebb4 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
1004eb32:	687b      	ldr	r3, [r7, #4]
1004eb34:	0018      	movs	r0, r3
1004eb36:	f000 f8ad 	bl	1004ec94 <USART_EndTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004eb3a:	687b      	ldr	r3, [r7, #4]
1004eb3c:	681b      	ldr	r3, [r3, #0]
1004eb3e:	689b      	ldr	r3, [r3, #8]
1004eb40:	2240      	movs	r2, #64	@ 0x40
1004eb42:	4013      	ands	r3, r2
1004eb44:	2b40      	cmp	r3, #64	@ 0x40
1004eb46:	d130      	bne.n	1004ebaa <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
1004eb48:	687b      	ldr	r3, [r7, #4]
1004eb4a:	681b      	ldr	r3, [r3, #0]
1004eb4c:	689a      	ldr	r2, [r3, #8]
1004eb4e:	687b      	ldr	r3, [r7, #4]
1004eb50:	681b      	ldr	r3, [r3, #0]
1004eb52:	2140      	movs	r1, #64	@ 0x40
1004eb54:	438a      	bics	r2, r1
1004eb56:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
1004eb58:	687b      	ldr	r3, [r7, #4]
1004eb5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004eb5c:	2b00      	cmp	r3, #0
1004eb5e:	d008      	beq.n	1004eb72 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
1004eb60:	687b      	ldr	r3, [r7, #4]
1004eb62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004eb64:	2200      	movs	r2, #0
1004eb66:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
1004eb68:	687b      	ldr	r3, [r7, #4]
1004eb6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004eb6c:	0018      	movs	r0, r3
1004eb6e:	f7f9 f9fb 	bl	10047f68 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
1004eb72:	687b      	ldr	r3, [r7, #4]
1004eb74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004eb76:	2b00      	cmp	r3, #0
1004eb78:	d012      	beq.n	1004eba0 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
1004eb7a:	687b      	ldr	r3, [r7, #4]
1004eb7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004eb7e:	4a36      	ldr	r2, [pc, #216]	@ (1004ec58 <HAL_USART_IRQHandler+0x2f8>)
1004eb80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
1004eb82:	687b      	ldr	r3, [r7, #4]
1004eb84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004eb86:	0018      	movs	r0, r3
1004eb88:	f7f9 f9ee 	bl	10047f68 <HAL_DMA_Abort_IT>
1004eb8c:	1e03      	subs	r3, r0, #0
1004eb8e:	d019      	beq.n	1004ebc4 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
1004eb90:	687b      	ldr	r3, [r7, #4]
1004eb92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004eb94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004eb96:	687b      	ldr	r3, [r7, #4]
1004eb98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004eb9a:	0018      	movs	r0, r3
1004eb9c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004eb9e:	e011      	b.n	1004ebc4 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
1004eba0:	687b      	ldr	r3, [r7, #4]
1004eba2:	0018      	movs	r0, r3
1004eba4:	f000 f86e 	bl	1004ec84 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004eba8:	e00c      	b.n	1004ebc4 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
1004ebaa:	687b      	ldr	r3, [r7, #4]
1004ebac:	0018      	movs	r0, r3
1004ebae:	f000 f869 	bl	1004ec84 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004ebb2:	e007      	b.n	1004ebc4 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
1004ebb4:	687b      	ldr	r3, [r7, #4]
1004ebb6:	0018      	movs	r0, r3
1004ebb8:	f000 f864 	bl	1004ec84 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
1004ebbc:	687b      	ldr	r3, [r7, #4]
1004ebbe:	2200      	movs	r2, #0
1004ebc0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
1004ebc2:	e043      	b.n	1004ec4c <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004ebc4:	46c0      	nop			@ (mov r8, r8)
    return;
1004ebc6:	e041      	b.n	1004ec4c <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004ebc8:	69fb      	ldr	r3, [r7, #28]
1004ebca:	2280      	movs	r2, #128	@ 0x80
1004ebcc:	4013      	ands	r3, r2
1004ebce:	d012      	beq.n	1004ebf6 <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
1004ebd0:	69bb      	ldr	r3, [r7, #24]
1004ebd2:	2280      	movs	r2, #128	@ 0x80
1004ebd4:	4013      	ands	r3, r2
1004ebd6:	d104      	bne.n	1004ebe2 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004ebd8:	697a      	ldr	r2, [r7, #20]
1004ebda:	2380      	movs	r3, #128	@ 0x80
1004ebdc:	041b      	lsls	r3, r3, #16
1004ebde:	4013      	ands	r3, r2
1004ebe0:	d009      	beq.n	1004ebf6 <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
1004ebe2:	687b      	ldr	r3, [r7, #4]
1004ebe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004ebe6:	2b00      	cmp	r3, #0
1004ebe8:	d038      	beq.n	1004ec5c <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
1004ebea:	687b      	ldr	r3, [r7, #4]
1004ebec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004ebee:	687a      	ldr	r2, [r7, #4]
1004ebf0:	0010      	movs	r0, r2
1004ebf2:	4798      	blx	r3
    }
    return;
1004ebf4:	e032      	b.n	1004ec5c <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004ebf6:	69fb      	ldr	r3, [r7, #28]
1004ebf8:	2240      	movs	r2, #64	@ 0x40
1004ebfa:	4013      	ands	r3, r2
1004ebfc:	d008      	beq.n	1004ec10 <HAL_USART_IRQHandler+0x2b0>
1004ebfe:	69bb      	ldr	r3, [r7, #24]
1004ec00:	2240      	movs	r2, #64	@ 0x40
1004ec02:	4013      	ands	r3, r2
1004ec04:	d004      	beq.n	1004ec10 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
1004ec06:	687b      	ldr	r3, [r7, #4]
1004ec08:	0018      	movs	r0, r3
1004ec0a:	f000 f878 	bl	1004ecfe <USART_EndTransmit_IT>
    return;
1004ec0e:	e026      	b.n	1004ec5e <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
1004ec10:	69fa      	ldr	r2, [r7, #28]
1004ec12:	2380      	movs	r3, #128	@ 0x80
1004ec14:	041b      	lsls	r3, r3, #16
1004ec16:	4013      	ands	r3, r2
1004ec18:	d009      	beq.n	1004ec2e <HAL_USART_IRQHandler+0x2ce>
1004ec1a:	69ba      	ldr	r2, [r7, #24]
1004ec1c:	2380      	movs	r3, #128	@ 0x80
1004ec1e:	05db      	lsls	r3, r3, #23
1004ec20:	4013      	ands	r3, r2
1004ec22:	d004      	beq.n	1004ec2e <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
1004ec24:	687b      	ldr	r3, [r7, #4]
1004ec26:	0018      	movs	r0, r3
1004ec28:	f000 f8b4 	bl	1004ed94 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004ec2c:	e017      	b.n	1004ec5e <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
1004ec2e:	69fa      	ldr	r2, [r7, #28]
1004ec30:	2380      	movs	r3, #128	@ 0x80
1004ec32:	045b      	lsls	r3, r3, #17
1004ec34:	4013      	ands	r3, r2
1004ec36:	d012      	beq.n	1004ec5e <HAL_USART_IRQHandler+0x2fe>
1004ec38:	69bb      	ldr	r3, [r7, #24]
1004ec3a:	2b00      	cmp	r3, #0
1004ec3c:	da0f      	bge.n	1004ec5e <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
1004ec3e:	687b      	ldr	r3, [r7, #4]
1004ec40:	0018      	movs	r0, r3
1004ec42:	f000 f89f 	bl	1004ed84 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004ec46:	e00a      	b.n	1004ec5e <HAL_USART_IRQHandler+0x2fe>
      return;
1004ec48:	46c0      	nop			@ (mov r8, r8)
1004ec4a:	e008      	b.n	1004ec5e <HAL_USART_IRQHandler+0x2fe>
    return;
1004ec4c:	46c0      	nop			@ (mov r8, r8)
1004ec4e:	e006      	b.n	1004ec5e <HAL_USART_IRQHandler+0x2fe>
1004ec50:	0000280f 	.word	0x0000280f
1004ec54:	10000001 	.word	0x10000001
1004ec58:	1004ecd5 	.word	0x1004ecd5
    return;
1004ec5c:	46c0      	nop			@ (mov r8, r8)
  }
}
1004ec5e:	46bd      	mov	sp, r7
1004ec60:	b008      	add	sp, #32
1004ec62:	bd80      	pop	{r7, pc}

1004ec64 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
1004ec64:	b580      	push	{r7, lr}
1004ec66:	b082      	sub	sp, #8
1004ec68:	af00      	add	r7, sp, #0
1004ec6a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
1004ec6c:	46c0      	nop			@ (mov r8, r8)
1004ec6e:	46bd      	mov	sp, r7
1004ec70:	b002      	add	sp, #8
1004ec72:	bd80      	pop	{r7, pc}

1004ec74 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
1004ec74:	b580      	push	{r7, lr}
1004ec76:	b082      	sub	sp, #8
1004ec78:	af00      	add	r7, sp, #0
1004ec7a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
1004ec7c:	46c0      	nop			@ (mov r8, r8)
1004ec7e:	46bd      	mov	sp, r7
1004ec80:	b002      	add	sp, #8
1004ec82:	bd80      	pop	{r7, pc}

1004ec84 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
1004ec84:	b580      	push	{r7, lr}
1004ec86:	b082      	sub	sp, #8
1004ec88:	af00      	add	r7, sp, #0
1004ec8a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
1004ec8c:	46c0      	nop			@ (mov r8, r8)
1004ec8e:	46bd      	mov	sp, r7
1004ec90:	b002      	add	sp, #8
1004ec92:	bd80      	pop	{r7, pc}

1004ec94 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
1004ec94:	b580      	push	{r7, lr}
1004ec96:	b082      	sub	sp, #8
1004ec98:	af00      	add	r7, sp, #0
1004ec9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
1004ec9c:	687b      	ldr	r3, [r7, #4]
1004ec9e:	681b      	ldr	r3, [r3, #0]
1004eca0:	681a      	ldr	r2, [r3, #0]
1004eca2:	687b      	ldr	r3, [r7, #4]
1004eca4:	681b      	ldr	r3, [r3, #0]
1004eca6:	4909      	ldr	r1, [pc, #36]	@ (1004eccc <USART_EndTransfer+0x38>)
1004eca8:	400a      	ands	r2, r1
1004ecaa:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
1004ecac:	687b      	ldr	r3, [r7, #4]
1004ecae:	681b      	ldr	r3, [r3, #0]
1004ecb0:	689a      	ldr	r2, [r3, #8]
1004ecb2:	687b      	ldr	r3, [r7, #4]
1004ecb4:	681b      	ldr	r3, [r3, #0]
1004ecb6:	4906      	ldr	r1, [pc, #24]	@ (1004ecd0 <USART_EndTransfer+0x3c>)
1004ecb8:	400a      	ands	r2, r1
1004ecba:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
1004ecbc:	687b      	ldr	r3, [r7, #4]
1004ecbe:	2259      	movs	r2, #89	@ 0x59
1004ecc0:	2101      	movs	r1, #1
1004ecc2:	5499      	strb	r1, [r3, r2]
}
1004ecc4:	46c0      	nop			@ (mov r8, r8)
1004ecc6:	46bd      	mov	sp, r7
1004ecc8:	b002      	add	sp, #8
1004ecca:	bd80      	pop	{r7, pc}
1004eccc:	fffffe1f 	.word	0xfffffe1f
1004ecd0:	ef7ffffe 	.word	0xef7ffffe

1004ecd4 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
1004ecd4:	b580      	push	{r7, lr}
1004ecd6:	b084      	sub	sp, #16
1004ecd8:	af00      	add	r7, sp, #0
1004ecda:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
1004ecdc:	687b      	ldr	r3, [r7, #4]
1004ecde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004ece0:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
1004ece2:	68fb      	ldr	r3, [r7, #12]
1004ece4:	2200      	movs	r2, #0
1004ece6:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
1004ece8:	68fb      	ldr	r3, [r7, #12]
1004ecea:	2200      	movs	r2, #0
1004ecec:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
1004ecee:	68fb      	ldr	r3, [r7, #12]
1004ecf0:	0018      	movs	r0, r3
1004ecf2:	f7ff ffc7 	bl	1004ec84 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
1004ecf6:	46c0      	nop			@ (mov r8, r8)
1004ecf8:	46bd      	mov	sp, r7
1004ecfa:	b004      	add	sp, #16
1004ecfc:	bd80      	pop	{r7, pc}

1004ecfe <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
1004ecfe:	b580      	push	{r7, lr}
1004ed00:	b082      	sub	sp, #8
1004ed02:	af00      	add	r7, sp, #0
1004ed04:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
1004ed06:	687b      	ldr	r3, [r7, #4]
1004ed08:	681b      	ldr	r3, [r3, #0]
1004ed0a:	681a      	ldr	r2, [r3, #0]
1004ed0c:	687b      	ldr	r3, [r7, #4]
1004ed0e:	681b      	ldr	r3, [r3, #0]
1004ed10:	2140      	movs	r1, #64	@ 0x40
1004ed12:	438a      	bics	r2, r1
1004ed14:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
1004ed16:	687b      	ldr	r3, [r7, #4]
1004ed18:	681b      	ldr	r3, [r3, #0]
1004ed1a:	689a      	ldr	r2, [r3, #8]
1004ed1c:	687b      	ldr	r3, [r7, #4]
1004ed1e:	681b      	ldr	r3, [r3, #0]
1004ed20:	2101      	movs	r1, #1
1004ed22:	438a      	bics	r2, r1
1004ed24:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
1004ed26:	687b      	ldr	r3, [r7, #4]
1004ed28:	2200      	movs	r2, #0
1004ed2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
1004ed2c:	687b      	ldr	r3, [r7, #4]
1004ed2e:	2259      	movs	r2, #89	@ 0x59
1004ed30:	5c9b      	ldrb	r3, [r3, r2]
1004ed32:	b2db      	uxtb	r3, r3
1004ed34:	2b12      	cmp	r3, #18
1004ed36:	d114      	bne.n	1004ed62 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
1004ed38:	687b      	ldr	r3, [r7, #4]
1004ed3a:	681b      	ldr	r3, [r3, #0]
1004ed3c:	2208      	movs	r2, #8
1004ed3e:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
1004ed40:	687b      	ldr	r3, [r7, #4]
1004ed42:	681b      	ldr	r3, [r3, #0]
1004ed44:	699a      	ldr	r2, [r3, #24]
1004ed46:	687b      	ldr	r3, [r7, #4]
1004ed48:	681b      	ldr	r3, [r3, #0]
1004ed4a:	2108      	movs	r1, #8
1004ed4c:	430a      	orrs	r2, r1
1004ed4e:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
1004ed50:	687b      	ldr	r3, [r7, #4]
1004ed52:	2259      	movs	r2, #89	@ 0x59
1004ed54:	2101      	movs	r1, #1
1004ed56:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
1004ed58:	687b      	ldr	r3, [r7, #4]
1004ed5a:	0018      	movs	r0, r3
1004ed5c:	f7ff ff82 	bl	1004ec64 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
1004ed60:	e00c      	b.n	1004ed7c <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
1004ed62:	687b      	ldr	r3, [r7, #4]
1004ed64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
1004ed66:	b29b      	uxth	r3, r3
1004ed68:	2b00      	cmp	r3, #0
1004ed6a:	d107      	bne.n	1004ed7c <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
1004ed6c:	687b      	ldr	r3, [r7, #4]
1004ed6e:	2259      	movs	r2, #89	@ 0x59
1004ed70:	2101      	movs	r1, #1
1004ed72:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
1004ed74:	687b      	ldr	r3, [r7, #4]
1004ed76:	0018      	movs	r0, r3
1004ed78:	f7ff ff7c 	bl	1004ec74 <HAL_USART_TxRxCpltCallback>
}
1004ed7c:	46c0      	nop			@ (mov r8, r8)
1004ed7e:	46bd      	mov	sp, r7
1004ed80:	b002      	add	sp, #8
1004ed82:	bd80      	pop	{r7, pc}

1004ed84 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
1004ed84:	b580      	push	{r7, lr}
1004ed86:	b082      	sub	sp, #8
1004ed88:	af00      	add	r7, sp, #0
1004ed8a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004ed8c:	46c0      	nop			@ (mov r8, r8)
1004ed8e:	46bd      	mov	sp, r7
1004ed90:	b002      	add	sp, #8
1004ed92:	bd80      	pop	{r7, pc}

1004ed94 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
1004ed94:	b580      	push	{r7, lr}
1004ed96:	b082      	sub	sp, #8
1004ed98:	af00      	add	r7, sp, #0
1004ed9a:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004ed9c:	46c0      	nop			@ (mov r8, r8)
1004ed9e:	46bd      	mov	sp, r7
1004eda0:	b002      	add	sp, #8
1004eda2:	bd80      	pop	{r7, pc}

1004eda4 <BLEEVT_RegisterGattEvtHandler>:

  return;
}

int BLEEVT_RegisterGattEvtHandler(BLEEVT_GattEvtHandlerFunc_t EvtHandlerFunc)
{
1004eda4:	b580      	push	{r7, lr}
1004eda6:	b082      	sub	sp, #8
1004eda8:	af00      	add	r7, sp, #0
1004edaa:	6078      	str	r0, [r7, #4]
  if(BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers == BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS)
1004edac:	4b0c      	ldr	r3, [pc, #48]	@ (1004ede0 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004edae:	791b      	ldrb	r3, [r3, #4]
1004edb0:	2b01      	cmp	r3, #1
1004edb2:	d102      	bne.n	1004edba <BLEEVT_RegisterGattEvtHandler+0x16>
  {
    return -1;
1004edb4:	2301      	movs	r3, #1
1004edb6:	425b      	negs	r3, r3
1004edb8:	e00d      	b.n	1004edd6 <BLEEVT_RegisterGattEvtHandler+0x32>
  }
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
  BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers] = EvtHandlerFunc;
1004edba:	4b09      	ldr	r3, [pc, #36]	@ (1004ede0 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004edbc:	791b      	ldrb	r3, [r3, #4]
1004edbe:	001a      	movs	r2, r3
1004edc0:	4b07      	ldr	r3, [pc, #28]	@ (1004ede0 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004edc2:	0092      	lsls	r2, r2, #2
1004edc4:	6879      	ldr	r1, [r7, #4]
1004edc6:	50d1      	str	r1, [r2, r3]
  BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers++;
1004edc8:	4b05      	ldr	r3, [pc, #20]	@ (1004ede0 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004edca:	791b      	ldrb	r3, [r3, #4]
1004edcc:	3301      	adds	r3, #1
1004edce:	b2da      	uxtb	r2, r3
1004edd0:	4b03      	ldr	r3, [pc, #12]	@ (1004ede0 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004edd2:	711a      	strb	r2, [r3, #4]
#else
  (void)(EvtHandlerFunc);
#endif

  return 0;
1004edd4:	2300      	movs	r3, #0
}
1004edd6:	0018      	movs	r0, r3
1004edd8:	46bd      	mov	sp, r7
1004edda:	b002      	add	sp, #8
1004eddc:	bd80      	pop	{r7, pc}
1004edde:	46c0      	nop			@ (mov r8, r8)
1004ede0:	200022a0 	.word	0x200022a0

1004ede4 <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1004ede4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ede6:	b089      	sub	sp, #36	@ 0x24
1004ede8:	af00      	add	r7, sp, #0
1004edea:	6078      	str	r0, [r7, #4]
1004edec:	000a      	movs	r2, r1
1004edee:	1cbb      	adds	r3, r7, #2
1004edf0:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1004edf2:	231f      	movs	r3, #31
1004edf4:	18fb      	adds	r3, r7, r3
1004edf6:	2200      	movs	r2, #0
1004edf8:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
1004edfa:	687b      	ldr	r3, [r7, #4]
1004edfc:	781b      	ldrb	r3, [r3, #0]
1004edfe:	2b04      	cmp	r3, #4
1004ee00:	d003      	beq.n	1004ee0a <BLE_STACK_Event+0x26>
1004ee02:	687b      	ldr	r3, [r7, #4]
1004ee04:	781b      	ldrb	r3, [r3, #0]
1004ee06:	2b82      	cmp	r3, #130	@ 0x82
1004ee08:	d148      	bne.n	1004ee9c <BLE_STACK_Event+0xb8>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
1004ee0a:	687b      	ldr	r3, [r7, #4]
1004ee0c:	3301      	adds	r3, #1
1004ee0e:	613b      	str	r3, [r7, #16]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004ee10:	687b      	ldr	r3, [r7, #4]
1004ee12:	781b      	ldrb	r3, [r3, #0]
1004ee14:	2b04      	cmp	r3, #4
1004ee16:	d103      	bne.n	1004ee20 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
1004ee18:	693b      	ldr	r3, [r7, #16]
1004ee1a:	3302      	adds	r3, #2
1004ee1c:	61bb      	str	r3, [r7, #24]
1004ee1e:	e005      	b.n	1004ee2c <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004ee20:	687b      	ldr	r3, [r7, #4]
1004ee22:	3301      	adds	r3, #1
1004ee24:	60fb      	str	r3, [r7, #12]
      data = event_pckt->data;
1004ee26:	68fb      	ldr	r3, [r7, #12]
1004ee28:	3303      	adds	r3, #3
1004ee2a:	61bb      	str	r3, [r7, #24]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004ee2c:	693b      	ldr	r3, [r7, #16]
1004ee2e:	781b      	ldrb	r3, [r3, #0]
1004ee30:	2bff      	cmp	r3, #255	@ 0xff
1004ee32:	d133      	bne.n	1004ee9c <BLE_STACK_Event+0xb8>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
1004ee34:	69bb      	ldr	r3, [r7, #24]
1004ee36:	60bb      	str	r3, [r7, #8]
      
      if((blecore_evt->ecode & BLEEVT_EGID_EVT_MASK) == BLEEVT_GATT_EVT_TYPE)
1004ee38:	68bb      	ldr	r3, [r7, #8]
1004ee3a:	781a      	ldrb	r2, [r3, #0]
1004ee3c:	785b      	ldrb	r3, [r3, #1]
1004ee3e:	021b      	lsls	r3, r3, #8
1004ee40:	4313      	orrs	r3, r2
1004ee42:	b29b      	uxth	r3, r3
1004ee44:	001a      	movs	r2, r3
1004ee46:	23fc      	movs	r3, #252	@ 0xfc
1004ee48:	021b      	lsls	r3, r3, #8
1004ee4a:	401a      	ands	r2, r3
1004ee4c:	23c0      	movs	r3, #192	@ 0xc0
1004ee4e:	011b      	lsls	r3, r3, #4
1004ee50:	429a      	cmp	r2, r3
1004ee52:	d123      	bne.n	1004ee9c <BLE_STACK_Event+0xb8>
      {
        /* GATT events */
        
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
        /* For GATT event handler */
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004ee54:	2317      	movs	r3, #23
1004ee56:	18fb      	adds	r3, r7, r3
1004ee58:	2200      	movs	r2, #0
1004ee5a:	701a      	strb	r2, [r3, #0]
1004ee5c:	e015      	b.n	1004ee8a <BLE_STACK_Event+0xa6>
        {
          event_notification_status = BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[index](blecore_evt);
1004ee5e:	2517      	movs	r5, #23
1004ee60:	197b      	adds	r3, r7, r5
1004ee62:	781a      	ldrb	r2, [r3, #0]
1004ee64:	4b14      	ldr	r3, [pc, #80]	@ (1004eeb8 <BLE_STACK_Event+0xd4>)
1004ee66:	0092      	lsls	r2, r2, #2
1004ee68:	58d3      	ldr	r3, [r2, r3]
1004ee6a:	261f      	movs	r6, #31
1004ee6c:	19bc      	adds	r4, r7, r6
1004ee6e:	68ba      	ldr	r2, [r7, #8]
1004ee70:	0010      	movs	r0, r2
1004ee72:	4798      	blx	r3
1004ee74:	0003      	movs	r3, r0
1004ee76:	7023      	strb	r3, [r4, #0]
          /**
          * When a GATT event has been acknowledged by application, do not call other registered handler.
          * a GATT event may be relevant for only one Service
          */
          if (event_notification_status == BLEEVT_Ack)
1004ee78:	19bb      	adds	r3, r7, r6
1004ee7a:	781b      	ldrb	r3, [r3, #0]
1004ee7c:	2b01      	cmp	r3, #1
1004ee7e:	d00c      	beq.n	1004ee9a <BLE_STACK_Event+0xb6>
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004ee80:	197b      	adds	r3, r7, r5
1004ee82:	781a      	ldrb	r2, [r3, #0]
1004ee84:	197b      	adds	r3, r7, r5
1004ee86:	3201      	adds	r2, #1
1004ee88:	701a      	strb	r2, [r3, #0]
1004ee8a:	4b0b      	ldr	r3, [pc, #44]	@ (1004eeb8 <BLE_STACK_Event+0xd4>)
1004ee8c:	791b      	ldrb	r3, [r3, #4]
1004ee8e:	2217      	movs	r2, #23
1004ee90:	18ba      	adds	r2, r7, r2
1004ee92:	7812      	ldrb	r2, [r2, #0]
1004ee94:	429a      	cmp	r2, r3
1004ee96:	d3e2      	bcc.n	1004ee5e <BLE_STACK_Event+0x7a>
1004ee98:	e000      	b.n	1004ee9c <BLE_STACK_Event+0xb8>
          {
            /**
            *  The event has been managed. The Event processing should be stopped
            */
            break;
1004ee9a:	46c0      	nop			@ (mov r8, r8)
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
1004ee9c:	231f      	movs	r3, #31
1004ee9e:	18fb      	adds	r3, r7, r3
1004eea0:	781b      	ldrb	r3, [r3, #0]
1004eea2:	2b00      	cmp	r3, #0
1004eea4:	d103      	bne.n	1004eeae <BLE_STACK_Event+0xca>
  {
    BLEEVT_App_Notification(hci_pckt);
1004eea6:	687b      	ldr	r3, [r7, #4]
1004eea8:	0018      	movs	r0, r3
1004eeaa:	f003 f81d 	bl	10051ee8 <BLEEVT_App_Notification>
  }
}
1004eeae:	46c0      	nop			@ (mov r8, r8)
1004eeb0:	46bd      	mov	sp, r7
1004eeb2:	b009      	add	sp, #36	@ 0x24
1004eeb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004eeb6:	46c0      	nop			@ (mov r8, r8)
1004eeb8:	200022a0 	.word	0x200022a0

1004eebc <GAP_name_disc_proc_connected_check_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_name_disc_proc_connected_check_ucfg(uint16_t task_idx)
{
1004eebc:	b580      	push	{r7, lr}
1004eebe:	b082      	sub	sp, #8
1004eec0:	af00      	add	r7, sp, #0
1004eec2:	0002      	movs	r2, r0
1004eec4:	1dbb      	adds	r3, r7, #6
1004eec6:	801a      	strh	r2, [r3, #0]
    GAP_name_disc_proc_connected_check(task_idx);
1004eec8:	1dbb      	adds	r3, r7, #6
1004eeca:	881b      	ldrh	r3, [r3, #0]
1004eecc:	0018      	movs	r0, r3
1004eece:	f007 f89f 	bl	10056010 <GAP_name_disc_proc_connected_check>
}
1004eed2:	46c0      	nop			@ (mov r8, r8)
1004eed4:	46bd      	mov	sp, r7
1004eed6:	b002      	add	sp, #8
1004eed8:	bd80      	pop	{r7, pc}

1004eeda <GAP_LimDiscTimeoutcb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_LimDiscTimeoutcb_ucfg(uint8_t timer_id)
{
1004eeda:	b580      	push	{r7, lr}
1004eedc:	b082      	sub	sp, #8
1004eede:	af00      	add	r7, sp, #0
1004eee0:	0002      	movs	r2, r0
1004eee2:	1dfb      	adds	r3, r7, #7
1004eee4:	701a      	strb	r2, [r3, #0]
    GAP_LimDiscTimeoutcb(timer_id);
1004eee6:	1dfb      	adds	r3, r7, #7
1004eee8:	781b      	ldrb	r3, [r3, #0]
1004eeea:	0018      	movs	r0, r3
1004eeec:	f007 fad4 	bl	10056498 <GAP_LimDiscTimeoutcb>
}
1004eef0:	46c0      	nop			@ (mov r8, r8)
1004eef2:	46bd      	mov	sp, r7
1004eef4:	b002      	add	sp, #8
1004eef6:	bd80      	pop	{r7, pc}

1004eef8 <hci_acl_data_tx_cmpl_event_int_cb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_tx_cmpl_event_int_cb_ucfg(void* header_p,
                                                  uint8_t* buff_p)
{
1004eef8:	b580      	push	{r7, lr}
1004eefa:	b082      	sub	sp, #8
1004eefc:	af00      	add	r7, sp, #0
1004eefe:	6078      	str	r0, [r7, #4]
1004ef00:	6039      	str	r1, [r7, #0]
    return hci_acl_data_tx_cmpl_event_int_cb(header_p,
1004ef02:	683a      	ldr	r2, [r7, #0]
1004ef04:	687b      	ldr	r3, [r7, #4]
1004ef06:	0011      	movs	r1, r2
1004ef08:	0018      	movs	r0, r3
1004ef0a:	f006 f8ab 	bl	10055064 <hci_acl_data_tx_cmpl_event_int_cb>
1004ef0e:	0003      	movs	r3, r0
                                             buff_p);
}
1004ef10:	0018      	movs	r0, r3
1004ef12:	46bd      	mov	sp, r7
1004ef14:	b002      	add	sp, #8
1004ef16:	bd80      	pop	{r7, pc}

1004ef18 <hci_acl_data_ind_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_ind_event_int_cb_ucfg(void* header_p,
                                              uint8_t* buff_p)
{
1004ef18:	b580      	push	{r7, lr}
1004ef1a:	b082      	sub	sp, #8
1004ef1c:	af00      	add	r7, sp, #0
1004ef1e:	6078      	str	r0, [r7, #4]
1004ef20:	6039      	str	r1, [r7, #0]
    return hci_acl_data_ind_event_int_cb(header_p,
1004ef22:	683a      	ldr	r2, [r7, #0]
1004ef24:	687b      	ldr	r3, [r7, #4]
1004ef26:	0011      	movs	r1, r2
1004ef28:	0018      	movs	r0, r3
1004ef2a:	f006 f8c5 	bl	100550b8 <hci_acl_data_ind_event_int_cb>
1004ef2e:	0003      	movs	r3, r0
                                         buff_p);
}
1004ef30:	0018      	movs	r0, r3
1004ef32:	46bd      	mov	sp, r7
1004ef34:	b002      	add	sp, #8
1004ef36:	bd80      	pop	{r7, pc}

1004ef38 <Controller_Process_Q_ucfg>:
#endif /* ((CONTROLLER_CHAN_CLASS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void Controller_Process_Q_ucfg(uint16_t task_idx)
{
1004ef38:	b580      	push	{r7, lr}
1004ef3a:	b082      	sub	sp, #8
1004ef3c:	af00      	add	r7, sp, #0
1004ef3e:	0002      	movs	r2, r0
1004ef40:	1dbb      	adds	r3, r7, #6
1004ef42:	801a      	strh	r2, [r3, #0]
    Controller_Process_Q(task_idx);
1004ef44:	1dbb      	adds	r3, r7, #6
1004ef46:	881b      	ldrh	r3, [r3, #0]
1004ef48:	0018      	movs	r0, r3
1004ef4a:	f00a fc03 	bl	10059754 <Controller_Process_Q>
}
1004ef4e:	46c0      	nop			@ (mov r8, r8)
1004ef50:	46bd      	mov	sp, r7
1004ef52:	b002      	add	sp, #8
1004ef54:	bd80      	pop	{r7, pc}

1004ef56 <LLC_offline_control_procedures_processing_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_offline_control_procedures_processing_ucfg(uint16_t task_idx)
{
1004ef56:	b580      	push	{r7, lr}
1004ef58:	b082      	sub	sp, #8
1004ef5a:	af00      	add	r7, sp, #0
1004ef5c:	0002      	movs	r2, r0
1004ef5e:	1dbb      	adds	r3, r7, #6
1004ef60:	801a      	strh	r2, [r3, #0]
    LLC_offline_control_procedures_processing(task_idx);
1004ef62:	1dbb      	adds	r3, r7, #6
1004ef64:	881b      	ldrh	r3, [r3, #0]
1004ef66:	0018      	movs	r0, r3
1004ef68:	f00a fc44 	bl	100597f4 <LLC_offline_control_procedures_processing>
}
1004ef6c:	46c0      	nop			@ (mov r8, r8)
1004ef6e:	46bd      	mov	sp, r7
1004ef70:	b002      	add	sp, #8
1004ef72:	bd80      	pop	{r7, pc}

1004ef74 <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
1004ef74:	b580      	push	{r7, lr}
1004ef76:	af00      	add	r7, sp, #0
    return phy_upd_csr();
1004ef78:	f00a fd06 	bl	10059988 <phy_upd_csr>
1004ef7c:	0003      	movs	r3, r0
}
1004ef7e:	0018      	movs	r0, r3
1004ef80:	46bd      	mov	sp, r7
1004ef82:	bd80      	pop	{r7, pc}

1004ef84 <conn_supp_csr_ucfg>:
}
#endif /* (CONTROLLER_SCAN_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint32_t conn_supp_csr_ucfg(void)
{
1004ef84:	b580      	push	{r7, lr}
1004ef86:	af00      	add	r7, sp, #0
    return conn_supp_csr();
1004ef88:	f00a fd02 	bl	10059990 <conn_supp_csr>
1004ef8c:	0003      	movs	r3, r0
}
1004ef8e:	0018      	movs	r0, r3
1004ef90:	46bd      	mov	sp, r7
1004ef92:	bd80      	pop	{r7, pc}

1004ef94 <ACL_pkt_init_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus ACL_pkt_init_ucfg(void)
{
1004ef94:	b580      	push	{r7, lr}
1004ef96:	af00      	add	r7, sp, #0
    return ACL_pkt_init();
1004ef98:	f006 f8b0 	bl	100550fc <ACL_pkt_init>
1004ef9c:	0003      	movs	r3, r0
}
1004ef9e:	0018      	movs	r0, r3
1004efa0:	46bd      	mov	sp, r7
1004efa2:	bd80      	pop	{r7, pc}

1004efa4 <hci_disconnection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_disconnection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004efa4:	b580      	push	{r7, lr}
1004efa6:	b082      	sub	sp, #8
1004efa8:	af00      	add	r7, sp, #0
1004efaa:	6078      	str	r0, [r7, #4]
1004efac:	6039      	str	r1, [r7, #0]
    return hci_disconnection_complete_event_int_cb(header_p,
1004efae:	683a      	ldr	r2, [r7, #0]
1004efb0:	687b      	ldr	r3, [r7, #4]
1004efb2:	0011      	movs	r1, r2
1004efb4:	0018      	movs	r0, r3
1004efb6:	f006 fc53 	bl	10055860 <hci_disconnection_complete_event_int_cb>
1004efba:	0003      	movs	r3, r0
                                                   buff_p);
}
1004efbc:	0018      	movs	r0, r3
1004efbe:	46bd      	mov	sp, r7
1004efc0:	b002      	add	sp, #8
1004efc2:	bd80      	pop	{r7, pc}

1004efc4 <hci_encryption_change_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_change_event_int_cb_ucfg(void* header_p,
                                                   uint8_t* buff_p)
{
1004efc4:	b580      	push	{r7, lr}
1004efc6:	b082      	sub	sp, #8
1004efc8:	af00      	add	r7, sp, #0
1004efca:	6078      	str	r0, [r7, #4]
1004efcc:	6039      	str	r1, [r7, #0]
    return hci_encryption_change_event_int_cb(header_p,
1004efce:	683a      	ldr	r2, [r7, #0]
1004efd0:	687b      	ldr	r3, [r7, #4]
1004efd2:	0011      	movs	r1, r2
1004efd4:	0018      	movs	r0, r3
1004efd6:	f006 fc73 	bl	100558c0 <hci_encryption_change_event_int_cb>
1004efda:	0003      	movs	r3, r0
                                              buff_p);
}
1004efdc:	0018      	movs	r0, r3
1004efde:	46bd      	mov	sp, r7
1004efe0:	b002      	add	sp, #8
1004efe2:	bd80      	pop	{r7, pc}

1004efe4 <hci_encryption_key_refresh_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_key_refresh_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004efe4:	b580      	push	{r7, lr}
1004efe6:	b082      	sub	sp, #8
1004efe8:	af00      	add	r7, sp, #0
1004efea:	6078      	str	r0, [r7, #4]
1004efec:	6039      	str	r1, [r7, #0]
    return hci_encryption_key_refresh_complete_event_int_cb(header_p,
1004efee:	683a      	ldr	r2, [r7, #0]
1004eff0:	687b      	ldr	r3, [r7, #4]
1004eff2:	0011      	movs	r1, r2
1004eff4:	0018      	movs	r0, r3
1004eff6:	f006 fc7f 	bl	100558f8 <hci_encryption_key_refresh_complete_event_int_cb>
1004effa:	0003      	movs	r3, r0
                                                            buff_p);
}
1004effc:	0018      	movs	r0, r3
1004effe:	46bd      	mov	sp, r7
1004f000:	b002      	add	sp, #8
1004f002:	bd80      	pop	{r7, pc}

1004f004 <hci_le_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_connection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004f004:	b580      	push	{r7, lr}
1004f006:	b082      	sub	sp, #8
1004f008:	af00      	add	r7, sp, #0
1004f00a:	6078      	str	r0, [r7, #4]
1004f00c:	6039      	str	r1, [r7, #0]
    return hci_le_connection_complete_event_int_cb(header_p,
1004f00e:	683a      	ldr	r2, [r7, #0]
1004f010:	687b      	ldr	r3, [r7, #4]
1004f012:	0011      	movs	r1, r2
1004f014:	0018      	movs	r0, r3
1004f016:	f006 fc8b 	bl	10055930 <hci_le_connection_complete_event_int_cb>
1004f01a:	0003      	movs	r3, r0
                                                   buff_p);
}
1004f01c:	0018      	movs	r0, r3
1004f01e:	46bd      	mov	sp, r7
1004f020:	b002      	add	sp, #8
1004f022:	bd80      	pop	{r7, pc}

1004f024 <hci_le_enhanced_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_enhanced_connection_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004f024:	b580      	push	{r7, lr}
1004f026:	b082      	sub	sp, #8
1004f028:	af00      	add	r7, sp, #0
1004f02a:	6078      	str	r0, [r7, #4]
1004f02c:	6039      	str	r1, [r7, #0]
    return hci_le_enhanced_connection_complete_event_int_cb(header_p,
1004f02e:	683a      	ldr	r2, [r7, #0]
1004f030:	687b      	ldr	r3, [r7, #4]
1004f032:	0011      	movs	r1, r2
1004f034:	0018      	movs	r0, r3
1004f036:	f006 fcbb 	bl	100559b0 <hci_le_enhanced_connection_complete_event_int_cb>
1004f03a:	0003      	movs	r3, r0
                                                            buff_p);
}
1004f03c:	0018      	movs	r0, r3
1004f03e:	46bd      	mov	sp, r7
1004f040:	b002      	add	sp, #8
1004f042:	bd80      	pop	{r7, pc}

1004f044 <hci_le_long_term_key_request_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_long_term_key_request_event_int_cb_ucfg(void* header_p,
                                                          uint8_t* buff_p)
{
1004f044:	b580      	push	{r7, lr}
1004f046:	b082      	sub	sp, #8
1004f048:	af00      	add	r7, sp, #0
1004f04a:	6078      	str	r0, [r7, #4]
1004f04c:	6039      	str	r1, [r7, #0]
    return hci_le_long_term_key_request_event_int_cb(header_p,
1004f04e:	683a      	ldr	r2, [r7, #0]
1004f050:	687b      	ldr	r3, [r7, #4]
1004f052:	0011      	movs	r1, r2
1004f054:	0018      	movs	r0, r3
1004f056:	f006 fcf1 	bl	10055a3c <hci_le_long_term_key_request_event_int_cb>
1004f05a:	0003      	movs	r3, r0
                                                     buff_p);
}
1004f05c:	0018      	movs	r0, r3
1004f05e:	46bd      	mov	sp, r7
1004f060:	b002      	add	sp, #8
1004f062:	bd80      	pop	{r7, pc}

1004f064 <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg(void* header_p,
                                                                        uint8_t* buff_p)
{
1004f064:	b580      	push	{r7, lr}
1004f066:	b082      	sub	sp, #8
1004f068:	af00      	add	r7, sp, #0
1004f06a:	6078      	str	r0, [r7, #4]
1004f06c:	6039      	str	r1, [r7, #0]
    return hci_le_read_local_p256_public_key_complete_event_int_cb(header_p,
1004f06e:	683a      	ldr	r2, [r7, #0]
1004f070:	687b      	ldr	r3, [r7, #4]
1004f072:	0011      	movs	r1, r2
1004f074:	0018      	movs	r0, r3
1004f076:	f006 fd11 	bl	10055a9c <hci_le_read_local_p256_public_key_complete_event_int_cb>
1004f07a:	0003      	movs	r3, r0
                                                                   buff_p);
}
1004f07c:	0018      	movs	r0, r3
1004f07e:	46bd      	mov	sp, r7
1004f080:	b002      	add	sp, #8
1004f082:	bd80      	pop	{r7, pc}

1004f084 <hci_le_generate_dhkey_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_generate_dhkey_complete_event_int_cb_ucfg(void* header_p,
                                                            uint8_t* buff_p)
{
1004f084:	b580      	push	{r7, lr}
1004f086:	b082      	sub	sp, #8
1004f088:	af00      	add	r7, sp, #0
1004f08a:	6078      	str	r0, [r7, #4]
1004f08c:	6039      	str	r1, [r7, #0]
    return hci_le_generate_dhkey_complete_event_int_cb(header_p,
1004f08e:	683a      	ldr	r2, [r7, #0]
1004f090:	687b      	ldr	r3, [r7, #4]
1004f092:	0011      	movs	r1, r2
1004f094:	0018      	movs	r0, r3
1004f096:	f006 fd1f 	bl	10055ad8 <hci_le_generate_dhkey_complete_event_int_cb>
1004f09a:	0003      	movs	r3, r0
                                                       buff_p);
}
1004f09c:	0018      	movs	r0, r3
1004f09e:	46bd      	mov	sp, r7
1004f0a0:	b002      	add	sp, #8
1004f0a2:	bd80      	pop	{r7, pc}

1004f0a4 <MBM_init_ucfg>:
      (CONTROLLER_PERIODIC_ADV_ENABLED == 1) &&\
      (CONTROLLER_BIS_ENABLED == 1)\
     )\
    )
tBleStatus MBM_init_ucfg(void)
{
1004f0a4:	b580      	push	{r7, lr}
1004f0a6:	af00      	add	r7, sp, #0
    return MBM_init();
1004f0a8:	f011 fe20 	bl	10060cec <MBM_init>
1004f0ac:	0003      	movs	r3, r0
}
1004f0ae:	0018      	movs	r0, r3
1004f0b0:	46bd      	mov	sp, r7
1004f0b2:	bd80      	pop	{r7, pc}

1004f0b4 <smp_debug_trudy__set_config_ucfg>:
#endif

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_debug_trudy__set_config_ucfg(uint32_t config)
{
1004f0b4:	b580      	push	{r7, lr}
1004f0b6:	b082      	sub	sp, #8
1004f0b8:	af00      	add	r7, sp, #0
1004f0ba:	6078      	str	r0, [r7, #4]
    return smp_debug_trudy__set_config(config);
1004f0bc:	687b      	ldr	r3, [r7, #4]
1004f0be:	0018      	movs	r0, r3
1004f0c0:	f012 fe0b 	bl	10061cda <smp_debug_trudy__set_config>
1004f0c4:	0003      	movs	r3, r0
}
1004f0c6:	0018      	movs	r0, r3
1004f0c8:	46bd      	mov	sp, r7
1004f0ca:	b002      	add	sp, #8
1004f0cc:	bd80      	pop	{r7, pc}

1004f0ce <smp_sap_scp_force_debug_key_usage_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_sap_scp_force_debug_key_usage_ucfg(uint8_t config_val)
{
1004f0ce:	b580      	push	{r7, lr}
1004f0d0:	b082      	sub	sp, #8
1004f0d2:	af00      	add	r7, sp, #0
1004f0d4:	0002      	movs	r2, r0
1004f0d6:	1dfb      	adds	r3, r7, #7
1004f0d8:	701a      	strb	r2, [r3, #0]
    return smp_sap_scp_force_debug_key_usage(config_val);
1004f0da:	1dfb      	adds	r3, r7, #7
1004f0dc:	781b      	ldrb	r3, [r3, #0]
1004f0de:	0018      	movs	r0, r3
1004f0e0:	f013 fafa 	bl	100626d8 <smp_sap_scp_force_debug_key_usage>
1004f0e4:	0003      	movs	r3, r0
}
1004f0e6:	0018      	movs	r0, r3
1004f0e8:	46bd      	mov	sp, r7
1004f0ea:	b002      	add	sp, #8
1004f0ec:	bd80      	pop	{r7, pc}

1004f0ee <L2C_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus L2C_init_ucfg(uint8_t cos_enabled)
{
1004f0ee:	b580      	push	{r7, lr}
1004f0f0:	b082      	sub	sp, #8
1004f0f2:	af00      	add	r7, sp, #0
1004f0f4:	0002      	movs	r2, r0
1004f0f6:	1dfb      	adds	r3, r7, #7
1004f0f8:	701a      	strb	r2, [r3, #0]
    return L2C_init(cos_enabled);
1004f0fa:	1dfb      	adds	r3, r7, #7
1004f0fc:	781b      	ldrb	r3, [r3, #0]
1004f0fe:	0018      	movs	r0, r3
1004f100:	f00a fe26 	bl	10059d50 <L2C_init>
1004f104:	0003      	movs	r3, r0
}
1004f106:	0018      	movs	r0, r3
1004f108:	46bd      	mov	sp, r7
1004f10a:	b002      	add	sp, #8
1004f10c:	bd80      	pop	{r7, pc}

1004f10e <llc_conn_multi_link_connection_ucfg>:
#endif /* ((CONNECTION_SUBRATING_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
tBleStatus llc_conn_multi_link_connection_ucfg(uint8_t enable)
{
1004f10e:	b580      	push	{r7, lr}
1004f110:	b082      	sub	sp, #8
1004f112:	af00      	add	r7, sp, #0
1004f114:	0002      	movs	r2, r0
1004f116:	1dfb      	adds	r3, r7, #7
1004f118:	701a      	strb	r2, [r3, #0]
    return llc_conn_multi_link_connection(enable);
1004f11a:	1dfb      	adds	r3, r7, #7
1004f11c:	781b      	ldrb	r3, [r3, #0]
1004f11e:	0018      	movs	r0, r3
1004f120:	f00b fe75 	bl	1005ae0e <llc_conn_multi_link_connection>
1004f124:	0003      	movs	r3, r0
}
1004f126:	0018      	movs	r0, r3
1004f128:	46bd      	mov	sp, r7
1004f12a:	b002      	add	sp, #8
1004f12c:	bd80      	pop	{r7, pc}

1004f12e <llc_conn_peripheral_roll_back_params_tsk_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_conn_peripheral_roll_back_params_tsk_ucfg(uint16_t task_idx)
{
1004f12e:	b580      	push	{r7, lr}
1004f130:	b082      	sub	sp, #8
1004f132:	af00      	add	r7, sp, #0
1004f134:	0002      	movs	r2, r0
1004f136:	1dbb      	adds	r3, r7, #6
1004f138:	801a      	strh	r2, [r3, #0]
    llc_conn_peripheral_roll_back_params_tsk(task_idx);
1004f13a:	1dbb      	adds	r3, r7, #6
1004f13c:	881b      	ldrh	r3, [r3, #0]
1004f13e:	0018      	movs	r0, r3
1004f140:	f00c fcb0 	bl	1005baa4 <llc_conn_peripheral_roll_back_params_tsk>
}
1004f144:	46c0      	nop			@ (mov r8, r8)
1004f146:	46bd      	mov	sp, r7
1004f148:	b002      	add	sp, #8
1004f14a:	bd80      	pop	{r7, pc}

1004f14c <LL_cpe_init_phy_update_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_cpe_init_phy_update_ucfg(void)
{
1004f14c:	b580      	push	{r7, lr}
1004f14e:	af00      	add	r7, sp, #0
    LL_cpe_init_phy_update();
1004f150:	f00d fc82 	bl	1005ca58 <LL_cpe_init_phy_update>
}
1004f154:	46c0      	nop			@ (mov r8, r8)
1004f156:	46bd      	mov	sp, r7
1004f158:	bd80      	pop	{r7, pc}

1004f15a <LL_cpe_init_conn_update_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_conn_update_ucfg(void)
{
1004f15a:	b580      	push	{r7, lr}
1004f15c:	af00      	add	r7, sp, #0
    LL_cpe_init_conn_update();
1004f15e:	f00d fc83 	bl	1005ca68 <LL_cpe_init_conn_update>
}
1004f162:	46c0      	nop			@ (mov r8, r8)
1004f164:	46bd      	mov	sp, r7
1004f166:	bd80      	pop	{r7, pc}

1004f168 <LL_cpe_init_chmap_update_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_chmap_update_ucfg(void)
{
1004f168:	b580      	push	{r7, lr}
1004f16a:	af00      	add	r7, sp, #0
    LL_cpe_init_chmap_update();
1004f16c:	f00d fc84 	bl	1005ca78 <LL_cpe_init_chmap_update>
}
1004f170:	46c0      	nop			@ (mov r8, r8)
1004f172:	46bd      	mov	sp, r7
1004f174:	bd80      	pop	{r7, pc}

1004f176 <LL_cpe_init_ucfg>:
#endif /* ((CONTROLLER_CIS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_ucfg(void)
{
1004f176:	b580      	push	{r7, lr}
1004f178:	af00      	add	r7, sp, #0
    LL_cpe_init();
1004f17a:	f00d fcc1 	bl	1005cb00 <LL_cpe_init>
}
1004f17e:	46c0      	nop			@ (mov r8, r8)
1004f180:	46bd      	mov	sp, r7
1004f182:	bd80      	pop	{r7, pc}

1004f184 <LL_conn_upd_max_tx_time_coded_ucfg>:
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_max_tx_time_coded_ucfg(void* params)
{
1004f184:	b580      	push	{r7, lr}
1004f186:	b082      	sub	sp, #8
1004f188:	af00      	add	r7, sp, #0
1004f18a:	6078      	str	r0, [r7, #4]
    LL_conn_upd_max_tx_time_coded(params);
1004f18c:	687b      	ldr	r3, [r7, #4]
1004f18e:	0018      	movs	r0, r3
1004f190:	f00e f8de 	bl	1005d350 <LL_conn_upd_max_tx_time_coded>
}
1004f194:	46c0      	nop			@ (mov r8, r8)
1004f196:	46bd      	mov	sp, r7
1004f198:	b002      	add	sp, #8
1004f19a:	bd80      	pop	{r7, pc}

1004f19c <LL_conn_upd_data_length_change_event_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_data_length_change_event_ucfg(void* params)
{
1004f19c:	b580      	push	{r7, lr}
1004f19e:	b082      	sub	sp, #8
1004f1a0:	af00      	add	r7, sp, #0
1004f1a2:	6078      	str	r0, [r7, #4]
    LL_conn_upd_data_length_change_event(params);
1004f1a4:	687b      	ldr	r3, [r7, #4]
1004f1a6:	0018      	movs	r0, r3
1004f1a8:	f00e f956 	bl	1005d458 <LL_conn_upd_data_length_change_event>
}
1004f1ac:	46c0      	nop			@ (mov r8, r8)
1004f1ae:	46bd      	mov	sp, r7
1004f1b0:	b002      	add	sp, #8
1004f1b2:	bd80      	pop	{r7, pc}

1004f1b4 <LLC_authenticated_payload_timeout_processing_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_authenticated_payload_timeout_processing_ucfg(uint16_t task_idx)
{
1004f1b4:	b580      	push	{r7, lr}
1004f1b6:	b082      	sub	sp, #8
1004f1b8:	af00      	add	r7, sp, #0
1004f1ba:	0002      	movs	r2, r0
1004f1bc:	1dbb      	adds	r3, r7, #6
1004f1be:	801a      	strh	r2, [r3, #0]
    LLC_authenticated_payload_timeout_processing(task_idx);
1004f1c0:	1dbb      	adds	r3, r7, #6
1004f1c2:	881b      	ldrh	r3, [r3, #0]
1004f1c4:	0018      	movs	r0, r3
1004f1c6:	f00e ff47 	bl	1005e058 <LLC_authenticated_payload_timeout_processing>
}
1004f1ca:	46c0      	nop			@ (mov r8, r8)
1004f1cc:	46bd      	mov	sp, r7
1004f1ce:	b002      	add	sp, #8
1004f1d0:	bd80      	pop	{r7, pc}

1004f1d2 <LL_phy_upd_pending_ucfg>:
          (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint8_t LL_phy_upd_pending_ucfg(uint8_t conn_idx)
{
1004f1d2:	b580      	push	{r7, lr}
1004f1d4:	b082      	sub	sp, #8
1004f1d6:	af00      	add	r7, sp, #0
1004f1d8:	0002      	movs	r2, r0
1004f1da:	1dfb      	adds	r3, r7, #7
1004f1dc:	701a      	strb	r2, [r3, #0]
    return LL_phy_upd_pending(conn_idx);
1004f1de:	1dfb      	adds	r3, r7, #7
1004f1e0:	781b      	ldrb	r3, [r3, #0]
1004f1e2:	0018      	movs	r0, r3
1004f1e4:	f00f f905 	bl	1005e3f2 <LL_phy_upd_pending>
1004f1e8:	0003      	movs	r3, r0
}
1004f1ea:	0018      	movs	r0, r3
1004f1ec:	46bd      	mov	sp, r7
1004f1ee:	b002      	add	sp, #8
1004f1f0:	bd80      	pop	{r7, pc}

1004f1f2 <LL_phy_update_init_ucfg>:
#endif /* (CONTROLLER_2M_CODED_PHY_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_ucfg(void)
{
1004f1f2:	b580      	push	{r7, lr}
1004f1f4:	af00      	add	r7, sp, #0
    return LL_phy_update_init();
1004f1f6:	f00f f8b7 	bl	1005e368 <LL_phy_update_init>
1004f1fa:	0003      	movs	r3, r0
}
1004f1fc:	0018      	movs	r0, r3
1004f1fe:	46bd      	mov	sp, r7
1004f200:	bd80      	pop	{r7, pc}

1004f202 <LL_phy_update_init_per_st_data_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_per_st_data_ucfg(uint8_t conn_idx)
{
1004f202:	b580      	push	{r7, lr}
1004f204:	b082      	sub	sp, #8
1004f206:	af00      	add	r7, sp, #0
1004f208:	0002      	movs	r2, r0
1004f20a:	1dfb      	adds	r3, r7, #7
1004f20c:	701a      	strb	r2, [r3, #0]
    return LL_phy_update_init_per_st_data(conn_idx);
1004f20e:	1dfb      	adds	r3, r7, #7
1004f210:	781b      	ldrb	r3, [r3, #0]
1004f212:	0018      	movs	r0, r3
1004f214:	f00f f8b2 	bl	1005e37c <LL_phy_update_init_per_st_data>
1004f218:	0003      	movs	r3, r0
}
1004f21a:	0018      	movs	r0, r3
1004f21c:	46bd      	mov	sp, r7
1004f21e:	b002      	add	sp, #8
1004f220:	bd80      	pop	{r7, pc}

1004f222 <LL_phy_upd_evt_pending_check_isr_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_evt_pending_check_isr_ucfg(uint8_t conn_idx)
{
1004f222:	b580      	push	{r7, lr}
1004f224:	b082      	sub	sp, #8
1004f226:	af00      	add	r7, sp, #0
1004f228:	0002      	movs	r2, r0
1004f22a:	1dfb      	adds	r3, r7, #7
1004f22c:	701a      	strb	r2, [r3, #0]
    LL_phy_upd_evt_pending_check_isr(conn_idx);
1004f22e:	1dfb      	adds	r3, r7, #7
1004f230:	781b      	ldrb	r3, [r3, #0]
1004f232:	0018      	movs	r0, r3
1004f234:	f00f fc8c 	bl	1005eb50 <LL_phy_upd_evt_pending_check_isr>
}
1004f238:	46c0      	nop			@ (mov r8, r8)
1004f23a:	46bd      	mov	sp, r7
1004f23c:	b002      	add	sp, #8
1004f23e:	bd80      	pop	{r7, pc}

1004f240 <ADV_ISR_connect_request_received_ucfg>:

#if (CONNECTION_ENABLED == 1)
void ADV_ISR_connect_request_received_ucfg(void* pointer,
                                           uint8_t* packet,
                                           void* PeerIDAddress_p)
{
1004f240:	b580      	push	{r7, lr}
1004f242:	b084      	sub	sp, #16
1004f244:	af00      	add	r7, sp, #0
1004f246:	60f8      	str	r0, [r7, #12]
1004f248:	60b9      	str	r1, [r7, #8]
1004f24a:	607a      	str	r2, [r7, #4]
    ADV_ISR_connect_request_received(pointer,
1004f24c:	687a      	ldr	r2, [r7, #4]
1004f24e:	68b9      	ldr	r1, [r7, #8]
1004f250:	68fb      	ldr	r3, [r7, #12]
1004f252:	0018      	movs	r0, r3
1004f254:	f010 fd4a 	bl	1005fcec <ADV_ISR_connect_request_received>
                                     packet,
                                     PeerIDAddress_p);
}
1004f258:	46c0      	nop			@ (mov r8, r8)
1004f25a:	46bd      	mov	sp, r7
1004f25c:	b004      	add	sp, #16
1004f25e:	bd80      	pop	{r7, pc}

1004f260 <EADV_start_request_radio_tasks_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint8_t EADV_start_request_radio_tasks_ucfg(void* pointer)
{
1004f260:	b580      	push	{r7, lr}
1004f262:	b082      	sub	sp, #8
1004f264:	af00      	add	r7, sp, #0
1004f266:	6078      	str	r0, [r7, #4]
    return EADV_start_request_radio_tasks(pointer);
1004f268:	687b      	ldr	r3, [r7, #4]
1004f26a:	0018      	movs	r0, r3
1004f26c:	f010 feca 	bl	10060004 <EADV_start_request_radio_tasks>
1004f270:	0003      	movs	r3, r0
}
1004f272:	0018      	movs	r0, r3
1004f274:	46bd      	mov	sp, r7
1004f276:	b002      	add	sp, #8
1004f278:	bd80      	pop	{r7, pc}

1004f27a <LL_init_ucfg>:
                  uint8_t PerAdvScanWr,
                  uint8_t Cte,
                  uint8_t Pcl,
                  uint8_t Cns,
                  uint8_t Chc)
{
1004f27a:	b5b0      	push	{r4, r5, r7, lr}
1004f27c:	b08a      	sub	sp, #40	@ 0x28
1004f27e:	af08      	add	r7, sp, #32
1004f280:	0005      	movs	r5, r0
1004f282:	000c      	movs	r4, r1
1004f284:	0010      	movs	r0, r2
1004f286:	0019      	movs	r1, r3
1004f288:	1dfb      	adds	r3, r7, #7
1004f28a:	1c2a      	adds	r2, r5, #0
1004f28c:	701a      	strb	r2, [r3, #0]
1004f28e:	1dbb      	adds	r3, r7, #6
1004f290:	1c22      	adds	r2, r4, #0
1004f292:	701a      	strb	r2, [r3, #0]
1004f294:	1d7b      	adds	r3, r7, #5
1004f296:	1c02      	adds	r2, r0, #0
1004f298:	701a      	strb	r2, [r3, #0]
1004f29a:	1d3b      	adds	r3, r7, #4
1004f29c:	1c0a      	adds	r2, r1, #0
1004f29e:	701a      	strb	r2, [r3, #0]
    LL_init(dataLenExt,
1004f2a0:	1d3b      	adds	r3, r7, #4
1004f2a2:	781c      	ldrb	r4, [r3, #0]
1004f2a4:	1d7b      	adds	r3, r7, #5
1004f2a6:	781a      	ldrb	r2, [r3, #0]
1004f2a8:	1dbb      	adds	r3, r7, #6
1004f2aa:	7819      	ldrb	r1, [r3, #0]
1004f2ac:	1dfb      	adds	r3, r7, #7
1004f2ae:	7818      	ldrb	r0, [r3, #0]
1004f2b0:	2330      	movs	r3, #48	@ 0x30
1004f2b2:	18fb      	adds	r3, r7, r3
1004f2b4:	781b      	ldrb	r3, [r3, #0]
1004f2b6:	9306      	str	r3, [sp, #24]
1004f2b8:	232c      	movs	r3, #44	@ 0x2c
1004f2ba:	18fb      	adds	r3, r7, r3
1004f2bc:	781b      	ldrb	r3, [r3, #0]
1004f2be:	9305      	str	r3, [sp, #20]
1004f2c0:	2328      	movs	r3, #40	@ 0x28
1004f2c2:	18fb      	adds	r3, r7, r3
1004f2c4:	781b      	ldrb	r3, [r3, #0]
1004f2c6:	9304      	str	r3, [sp, #16]
1004f2c8:	2324      	movs	r3, #36	@ 0x24
1004f2ca:	18fb      	adds	r3, r7, r3
1004f2cc:	781b      	ldrb	r3, [r3, #0]
1004f2ce:	9303      	str	r3, [sp, #12]
1004f2d0:	2320      	movs	r3, #32
1004f2d2:	18fb      	adds	r3, r7, r3
1004f2d4:	781b      	ldrb	r3, [r3, #0]
1004f2d6:	9302      	str	r3, [sp, #8]
1004f2d8:	231c      	movs	r3, #28
1004f2da:	18fb      	adds	r3, r7, r3
1004f2dc:	781b      	ldrb	r3, [r3, #0]
1004f2de:	9301      	str	r3, [sp, #4]
1004f2e0:	2318      	movs	r3, #24
1004f2e2:	18fb      	adds	r3, r7, r3
1004f2e4:	781b      	ldrb	r3, [r3, #0]
1004f2e6:	9300      	str	r3, [sp, #0]
1004f2e8:	0023      	movs	r3, r4
1004f2ea:	f011 f94f 	bl	1006058c <LL_init>
            PerAdvScanWr,
            Cte,
            Pcl,
            Cns,
            Chc);
}
1004f2ee:	46c0      	nop			@ (mov r8, r8)
1004f2f0:	46bd      	mov	sp, r7
1004f2f2:	b002      	add	sp, #8
1004f2f4:	bdb0      	pop	{r4, r5, r7, pc}

1004f2f6 <smp_fsm_process_actions_wrt_state_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_fsm_process_actions_wrt_state_tsk_ucfg(uint16_t task_idx)
{
1004f2f6:	b580      	push	{r7, lr}
1004f2f8:	b082      	sub	sp, #8
1004f2fa:	af00      	add	r7, sp, #0
1004f2fc:	0002      	movs	r2, r0
1004f2fe:	1dbb      	adds	r3, r7, #6
1004f300:	801a      	strh	r2, [r3, #0]
    smp_fsm_process_actions_wrt_state_tsk(task_idx);
1004f302:	1dbb      	adds	r3, r7, #6
1004f304:	881b      	ldrh	r3, [r3, #0]
1004f306:	0018      	movs	r0, r3
1004f308:	f012 fcea 	bl	10061ce0 <smp_fsm_process_actions_wrt_state_tsk>
}
1004f30c:	46c0      	nop			@ (mov r8, r8)
1004f30e:	46bd      	mov	sp, r7
1004f310:	b002      	add	sp, #8
1004f312:	bd80      	pop	{r7, pc}

1004f314 <smp_rxp_process_rxed_packets_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_rxp_process_rxed_packets_tsk_ucfg(uint16_t task_idx)
{
1004f314:	b580      	push	{r7, lr}
1004f316:	b082      	sub	sp, #8
1004f318:	af00      	add	r7, sp, #0
1004f31a:	0002      	movs	r2, r0
1004f31c:	1dbb      	adds	r3, r7, #6
1004f31e:	801a      	strh	r2, [r3, #0]
    smp_rxp_process_rxed_packets_tsk(task_idx);
1004f320:	1dbb      	adds	r3, r7, #6
1004f322:	881b      	ldrh	r3, [r3, #0]
1004f324:	0018      	movs	r0, r3
1004f326:	f012 fdbf 	bl	10061ea8 <smp_rxp_process_rxed_packets_tsk>
}
1004f32a:	46c0      	nop			@ (mov r8, r8)
1004f32c:	46bd      	mov	sp, r7
1004f32e:	b002      	add	sp, #8
1004f330:	bd80      	pop	{r7, pc}

1004f332 <smp_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_init_ucfg(void)
{
1004f332:	b580      	push	{r7, lr}
1004f334:	af00      	add	r7, sp, #0
    smp_init();
1004f336:	f012 ff17 	bl	10062168 <smp_init>
}
1004f33a:	46c0      	nop			@ (mov r8, r8)
1004f33c:	46bd      	mov	sp, r7
1004f33e:	bd80      	pop	{r7, pc}

1004f340 <GAT_att_cmn_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_init_ucfg(void)
{
1004f340:	b580      	push	{r7, lr}
1004f342:	af00      	add	r7, sp, #0
    GAT_att_cmn_init();
1004f344:	f007 fc66 	bl	10056c14 <GAT_att_cmn_init>
}
1004f348:	46c0      	nop			@ (mov r8, r8)
1004f34a:	46bd      	mov	sp, r7
1004f34c:	bd80      	pop	{r7, pc}

1004f34e <GAT_att_cmn_timer_expire_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_timer_expire_tsk_ucfg(uint16_t task_idx)
{
1004f34e:	b580      	push	{r7, lr}
1004f350:	b082      	sub	sp, #8
1004f352:	af00      	add	r7, sp, #0
1004f354:	0002      	movs	r2, r0
1004f356:	1dbb      	adds	r3, r7, #6
1004f358:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_timer_expire_tsk(task_idx);
1004f35a:	1dbb      	adds	r3, r7, #6
1004f35c:	881b      	ldrh	r3, [r3, #0]
1004f35e:	0018      	movs	r0, r3
1004f360:	f007 fcc4 	bl	10056cec <GAT_att_cmn_timer_expire_tsk>
}
1004f364:	46c0      	nop			@ (mov r8, r8)
1004f366:	46bd      	mov	sp, r7
1004f368:	b002      	add	sp, #8
1004f36a:	bd80      	pop	{r7, pc}

1004f36c <GAT_att_cmn_tx_pool_evt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_tx_pool_evt_tsk_ucfg(uint16_t task_idx)
{
1004f36c:	b580      	push	{r7, lr}
1004f36e:	b082      	sub	sp, #8
1004f370:	af00      	add	r7, sp, #0
1004f372:	0002      	movs	r2, r0
1004f374:	1dbb      	adds	r3, r7, #6
1004f376:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_tx_pool_evt_tsk(task_idx);
1004f378:	1dbb      	adds	r3, r7, #6
1004f37a:	881b      	ldrh	r3, [r3, #0]
1004f37c:	0018      	movs	r0, r3
1004f37e:	f007 fd29 	bl	10056dd4 <GAT_att_cmn_tx_pool_evt_tsk>
}
1004f382:	46c0      	nop			@ (mov r8, r8)
1004f384:	46bd      	mov	sp, r7
1004f386:	b002      	add	sp, #8
1004f388:	bd80      	pop	{r7, pc}

1004f38a <GAT_att_srv_process_rx_pckt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_srv_process_rx_pckt_tsk_ucfg(uint16_t task_idx)
{
1004f38a:	b580      	push	{r7, lr}
1004f38c:	b082      	sub	sp, #8
1004f38e:	af00      	add	r7, sp, #0
1004f390:	0002      	movs	r2, r0
1004f392:	1dbb      	adds	r3, r7, #6
1004f394:	801a      	strh	r2, [r3, #0]
    GAT_att_srv_process_rx_pckt_tsk(task_idx);
1004f396:	1dbb      	adds	r3, r7, #6
1004f398:	881b      	ldrh	r3, [r3, #0]
1004f39a:	0018      	movs	r0, r3
1004f39c:	f008 f846 	bl	1005742c <GAT_att_srv_process_rx_pckt_tsk>
}
1004f3a0:	46c0      	nop			@ (mov r8, r8)
1004f3a2:	46bd      	mov	sp, r7
1004f3a4:	b002      	add	sp, #8
1004f3a6:	bd80      	pop	{r7, pc}

1004f3a8 <GAT_srv_db_hash_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_db_hash_tsk_ucfg(uint16_t task_idx)
{
1004f3a8:	b580      	push	{r7, lr}
1004f3aa:	b082      	sub	sp, #8
1004f3ac:	af00      	add	r7, sp, #0
1004f3ae:	0002      	movs	r2, r0
1004f3b0:	1dbb      	adds	r3, r7, #6
1004f3b2:	801a      	strh	r2, [r3, #0]
    GAT_srv_db_hash_tsk(task_idx);
1004f3b4:	1dbb      	adds	r3, r7, #6
1004f3b6:	881b      	ldrh	r3, [r3, #0]
1004f3b8:	0018      	movs	r0, r3
1004f3ba:	f009 f921 	bl	10058600 <GAT_srv_db_hash_tsk>
}
1004f3be:	46c0      	nop			@ (mov r8, r8)
1004f3c0:	46bd      	mov	sp, r7
1004f3c2:	b002      	add	sp, #8
1004f3c4:	bd80      	pop	{r7, pc}

1004f3c6 <GAT_srv_send_srv_change_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_send_srv_change_tsk_ucfg(uint16_t task_idx)
{
1004f3c6:	b580      	push	{r7, lr}
1004f3c8:	b082      	sub	sp, #8
1004f3ca:	af00      	add	r7, sp, #0
1004f3cc:	0002      	movs	r2, r0
1004f3ce:	1dbb      	adds	r3, r7, #6
1004f3d0:	801a      	strh	r2, [r3, #0]
    GAT_srv_send_srv_change_tsk(task_idx);
1004f3d2:	1dbb      	adds	r3, r7, #6
1004f3d4:	881b      	ldrh	r3, [r3, #0]
1004f3d6:	0018      	movs	r0, r3
1004f3d8:	f009 f9cc 	bl	10058774 <GAT_srv_send_srv_change_tsk>
}
1004f3dc:	46c0      	nop			@ (mov r8, r8)
1004f3de:	46bd      	mov	sp, r7
1004f3e0:	b002      	add	sp, #8
1004f3e2:	bd80      	pop	{r7, pc}

1004f3e4 <aci_gap_terminate>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
1004f3e4:	b580      	push	{r7, lr}
1004f3e6:	b082      	sub	sp, #8
1004f3e8:	af00      	add	r7, sp, #0
1004f3ea:	0002      	movs	r2, r0
1004f3ec:	1dbb      	adds	r3, r7, #6
1004f3ee:	801a      	strh	r2, [r3, #0]
1004f3f0:	1d7b      	adds	r3, r7, #5
1004f3f2:	1c0a      	adds	r2, r1, #0
1004f3f4:	701a      	strb	r2, [r3, #0]
    return aci_gap_terminate_api(Connection_Handle,
1004f3f6:	1d7b      	adds	r3, r7, #5
1004f3f8:	781a      	ldrb	r2, [r3, #0]
1004f3fa:	1dbb      	adds	r3, r7, #6
1004f3fc:	881b      	ldrh	r3, [r3, #0]
1004f3fe:	0011      	movs	r1, r2
1004f400:	0018      	movs	r0, r3
1004f402:	f005 fb49 	bl	10054a98 <aci_gap_terminate_api>
1004f406:	0003      	movs	r3, r0
                                 Reason);
}
1004f408:	0018      	movs	r0, r3
1004f40a:	46bd      	mov	sp, r7
1004f40c:	b002      	add	sp, #8
1004f40e:	bd80      	pop	{r7, pc}

1004f410 <aci_gap_set_io_capability>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
1004f410:	b580      	push	{r7, lr}
1004f412:	b082      	sub	sp, #8
1004f414:	af00      	add	r7, sp, #0
1004f416:	0002      	movs	r2, r0
1004f418:	1dfb      	adds	r3, r7, #7
1004f41a:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_io_capability_api(IO_Capability);
1004f41c:	1dfb      	adds	r3, r7, #7
1004f41e:	781b      	ldrb	r3, [r3, #0]
1004f420:	0018      	movs	r0, r3
1004f422:	f005 fbc4 	bl	10054bae <aci_gap_set_io_capability_api>
1004f426:	0003      	movs	r3, r0
}
1004f428:	0018      	movs	r0, r3
1004f42a:	46bd      	mov	sp, r7
1004f42c:	b002      	add	sp, #8
1004f42e:	bd80      	pop	{r7, pc}

1004f430 <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
1004f430:	b5b0      	push	{r4, r5, r7, lr}
1004f432:	b086      	sub	sp, #24
1004f434:	af04      	add	r7, sp, #16
1004f436:	0005      	movs	r5, r0
1004f438:	000c      	movs	r4, r1
1004f43a:	0010      	movs	r0, r2
1004f43c:	0019      	movs	r1, r3
1004f43e:	1dfb      	adds	r3, r7, #7
1004f440:	1c2a      	adds	r2, r5, #0
1004f442:	701a      	strb	r2, [r3, #0]
1004f444:	1dbb      	adds	r3, r7, #6
1004f446:	1c22      	adds	r2, r4, #0
1004f448:	701a      	strb	r2, [r3, #0]
1004f44a:	1d7b      	adds	r3, r7, #5
1004f44c:	1c02      	adds	r2, r0, #0
1004f44e:	701a      	strb	r2, [r3, #0]
1004f450:	1d3b      	adds	r3, r7, #4
1004f452:	1c0a      	adds	r2, r1, #0
1004f454:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_security_requirements_api(Bonding_Mode,
1004f456:	1d3b      	adds	r3, r7, #4
1004f458:	781c      	ldrb	r4, [r3, #0]
1004f45a:	1d7b      	adds	r3, r7, #5
1004f45c:	781a      	ldrb	r2, [r3, #0]
1004f45e:	1dbb      	adds	r3, r7, #6
1004f460:	7819      	ldrb	r1, [r3, #0]
1004f462:	1dfb      	adds	r3, r7, #7
1004f464:	7818      	ldrb	r0, [r3, #0]
1004f466:	2320      	movs	r3, #32
1004f468:	18fb      	adds	r3, r7, r3
1004f46a:	781b      	ldrb	r3, [r3, #0]
1004f46c:	9302      	str	r3, [sp, #8]
1004f46e:	231c      	movs	r3, #28
1004f470:	18fb      	adds	r3, r7, r3
1004f472:	781b      	ldrb	r3, [r3, #0]
1004f474:	9301      	str	r3, [sp, #4]
1004f476:	2318      	movs	r3, #24
1004f478:	18fb      	adds	r3, r7, r3
1004f47a:	781b      	ldrb	r3, [r3, #0]
1004f47c:	9300      	str	r3, [sp, #0]
1004f47e:	0023      	movs	r3, r4
1004f480:	f005 fb9e 	bl	10054bc0 <aci_gap_set_security_requirements_api>
1004f484:	0003      	movs	r3, r0
                                                 SC_Support,
                                                 KeyPress_Notification_Support,
                                                 Min_Encryption_Key_Size,
                                                 Max_Encryption_Key_Size,
                                                 Pairing_Response);
}
1004f486:	0018      	movs	r0, r3
1004f488:	46bd      	mov	sp, r7
1004f48a:	b002      	add	sp, #8
1004f48c:	bdb0      	pop	{r4, r5, r7, pc}

1004f48e <aci_gap_passkey_resp>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey)
{
1004f48e:	b580      	push	{r7, lr}
1004f490:	b082      	sub	sp, #8
1004f492:	af00      	add	r7, sp, #0
1004f494:	0002      	movs	r2, r0
1004f496:	6039      	str	r1, [r7, #0]
1004f498:	1dbb      	adds	r3, r7, #6
1004f49a:	801a      	strh	r2, [r3, #0]
    return aci_gap_passkey_resp_api(Connection_Handle,
1004f49c:	683a      	ldr	r2, [r7, #0]
1004f49e:	1dbb      	adds	r3, r7, #6
1004f4a0:	881b      	ldrh	r3, [r3, #0]
1004f4a2:	0011      	movs	r1, r2
1004f4a4:	0018      	movs	r0, r3
1004f4a6:	f005 fbcf 	bl	10054c48 <aci_gap_passkey_resp_api>
1004f4aa:	0003      	movs	r3, r0
                                    Passkey);
}
1004f4ac:	0018      	movs	r0, r3
1004f4ae:	46bd      	mov	sp, r7
1004f4b0:	b002      	add	sp, #8
1004f4b2:	bd80      	pop	{r7, pc}

1004f4b4 <aci_gatt_srv_add_service>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_service(ble_gatt_srv_def_t* Serv_p)
{
1004f4b4:	b580      	push	{r7, lr}
1004f4b6:	b082      	sub	sp, #8
1004f4b8:	af00      	add	r7, sp, #0
1004f4ba:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_add_service_api(Serv_p);
1004f4bc:	687b      	ldr	r3, [r7, #4]
1004f4be:	0018      	movs	r0, r3
1004f4c0:	f005 fbce 	bl	10054c60 <aci_gatt_srv_add_service_api>
1004f4c4:	0003      	movs	r3, r0
}
1004f4c6:	0018      	movs	r0, r3
1004f4c8:	46bd      	mov	sp, r7
1004f4ca:	b002      	add	sp, #8
1004f4cc:	bd80      	pop	{r7, pc}

1004f4ce <aci_gatt_srv_get_service_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_service_handle(ble_gatt_srv_def_t* Serv_p)
{
1004f4ce:	b580      	push	{r7, lr}
1004f4d0:	b082      	sub	sp, #8
1004f4d2:	af00      	add	r7, sp, #0
1004f4d4:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_service_handle_api(Serv_p);
1004f4d6:	687b      	ldr	r3, [r7, #4]
1004f4d8:	0018      	movs	r0, r3
1004f4da:	f005 fbc5 	bl	10054c68 <aci_gatt_srv_get_service_handle_api>
1004f4de:	0003      	movs	r3, r0
}
1004f4e0:	0018      	movs	r0, r3
1004f4e2:	46bd      	mov	sp, r7
1004f4e4:	b002      	add	sp, #8
1004f4e6:	bd80      	pop	{r7, pc}

1004f4e8 <aci_gatt_srv_add_char>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_char(ble_gatt_chr_def_t* Char_p,
                                 uint16_t Serv_Attr_H)
{
1004f4e8:	b580      	push	{r7, lr}
1004f4ea:	b082      	sub	sp, #8
1004f4ec:	af00      	add	r7, sp, #0
1004f4ee:	6078      	str	r0, [r7, #4]
1004f4f0:	000a      	movs	r2, r1
1004f4f2:	1cbb      	adds	r3, r7, #2
1004f4f4:	801a      	strh	r2, [r3, #0]
    return aci_gatt_srv_add_char_api(Char_p,
1004f4f6:	1cbb      	adds	r3, r7, #2
1004f4f8:	881a      	ldrh	r2, [r3, #0]
1004f4fa:	687b      	ldr	r3, [r7, #4]
1004f4fc:	0011      	movs	r1, r2
1004f4fe:	0018      	movs	r0, r3
1004f500:	f005 fbb6 	bl	10054c70 <aci_gatt_srv_add_char_api>
1004f504:	0003      	movs	r3, r0
                                     Serv_Attr_H);
}
1004f506:	0018      	movs	r0, r3
1004f508:	46bd      	mov	sp, r7
1004f50a:	b002      	add	sp, #8
1004f50c:	bd80      	pop	{r7, pc}

1004f50e <aci_gatt_srv_get_char_decl_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_char_decl_handle(ble_gatt_chr_def_t* Char_p)
{
1004f50e:	b580      	push	{r7, lr}
1004f510:	b082      	sub	sp, #8
1004f512:	af00      	add	r7, sp, #0
1004f514:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_char_decl_handle_api(Char_p);
1004f516:	687b      	ldr	r3, [r7, #4]
1004f518:	0018      	movs	r0, r3
1004f51a:	f005 fbad 	bl	10054c78 <aci_gatt_srv_get_char_decl_handle_api>
1004f51e:	0003      	movs	r3, r0
}
1004f520:	0018      	movs	r0, r3
1004f522:	46bd      	mov	sp, r7
1004f524:	b002      	add	sp, #8
1004f526:	bd80      	pop	{r7, pc}

1004f528 <aci_gatt_srv_resp>:
                             uint16_t CID,
                             uint16_t Attr_Handle,
                             uint8_t Error_Code,
                             uint16_t Data_Len,
                             uint8_t* Data_p)
{
1004f528:	b5b0      	push	{r4, r5, r7, lr}
1004f52a:	b084      	sub	sp, #16
1004f52c:	af02      	add	r7, sp, #8
1004f52e:	0005      	movs	r5, r0
1004f530:	000c      	movs	r4, r1
1004f532:	0010      	movs	r0, r2
1004f534:	0019      	movs	r1, r3
1004f536:	1dbb      	adds	r3, r7, #6
1004f538:	1c2a      	adds	r2, r5, #0
1004f53a:	801a      	strh	r2, [r3, #0]
1004f53c:	1d3b      	adds	r3, r7, #4
1004f53e:	1c22      	adds	r2, r4, #0
1004f540:	801a      	strh	r2, [r3, #0]
1004f542:	1cbb      	adds	r3, r7, #2
1004f544:	1c02      	adds	r2, r0, #0
1004f546:	801a      	strh	r2, [r3, #0]
1004f548:	1c7b      	adds	r3, r7, #1
1004f54a:	1c0a      	adds	r2, r1, #0
1004f54c:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_resp_api(Connection_Handle,
1004f54e:	1c7b      	adds	r3, r7, #1
1004f550:	781c      	ldrb	r4, [r3, #0]
1004f552:	1cbb      	adds	r3, r7, #2
1004f554:	881a      	ldrh	r2, [r3, #0]
1004f556:	1d3b      	adds	r3, r7, #4
1004f558:	8819      	ldrh	r1, [r3, #0]
1004f55a:	1dbb      	adds	r3, r7, #6
1004f55c:	8818      	ldrh	r0, [r3, #0]
1004f55e:	69fb      	ldr	r3, [r7, #28]
1004f560:	9301      	str	r3, [sp, #4]
1004f562:	2318      	movs	r3, #24
1004f564:	18fb      	adds	r3, r7, r3
1004f566:	881b      	ldrh	r3, [r3, #0]
1004f568:	9300      	str	r3, [sp, #0]
1004f56a:	0023      	movs	r3, r4
1004f56c:	f005 fb88 	bl	10054c80 <aci_gatt_srv_resp_api>
1004f570:	0003      	movs	r3, r0
                                 CID,
                                 Attr_Handle,
                                 Error_Code,
                                 Data_Len,
                                 Data_p);
}
1004f572:	0018      	movs	r0, r3
1004f574:	46bd      	mov	sp, r7
1004f576:	b002      	add	sp, #8
1004f578:	bdb0      	pop	{r4, r5, r7, pc}

1004f57a <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier)
{
1004f57a:	b5b0      	push	{r4, r5, r7, lr}
1004f57c:	b084      	sub	sp, #16
1004f57e:	af02      	add	r7, sp, #8
1004f580:	0005      	movs	r5, r0
1004f582:	000c      	movs	r4, r1
1004f584:	0010      	movs	r0, r2
1004f586:	0019      	movs	r1, r3
1004f588:	1dbb      	adds	r3, r7, #6
1004f58a:	1c2a      	adds	r2, r5, #0
1004f58c:	801a      	strh	r2, [r3, #0]
1004f58e:	1d3b      	adds	r3, r7, #4
1004f590:	1c22      	adds	r2, r4, #0
1004f592:	801a      	strh	r2, [r3, #0]
1004f594:	1cbb      	adds	r3, r7, #2
1004f596:	1c02      	adds	r2, r0, #0
1004f598:	801a      	strh	r2, [r3, #0]
1004f59a:	003b      	movs	r3, r7
1004f59c:	1c0a      	adds	r2, r1, #0
1004f59e:	801a      	strh	r2, [r3, #0]
    return aci_l2cap_connection_parameter_update_req_api(Connection_Handle,
1004f5a0:	003b      	movs	r3, r7
1004f5a2:	881c      	ldrh	r4, [r3, #0]
1004f5a4:	1cbb      	adds	r3, r7, #2
1004f5a6:	881a      	ldrh	r2, [r3, #0]
1004f5a8:	1d3b      	adds	r3, r7, #4
1004f5aa:	8819      	ldrh	r1, [r3, #0]
1004f5ac:	1dbb      	adds	r3, r7, #6
1004f5ae:	8818      	ldrh	r0, [r3, #0]
1004f5b0:	2318      	movs	r3, #24
1004f5b2:	18fb      	adds	r3, r7, r3
1004f5b4:	881b      	ldrh	r3, [r3, #0]
1004f5b6:	9300      	str	r3, [sp, #0]
1004f5b8:	0023      	movs	r3, r4
1004f5ba:	f005 fcd7 	bl	10054f6c <aci_l2cap_connection_parameter_update_req_api>
1004f5be:	0003      	movs	r3, r0
                                                         Connection_Interval_Min,
                                                         Connection_Interval_Max,
                                                         Peripheral_Latency,
                                                         Timeout_Multiplier);
}
1004f5c0:	0018      	movs	r0, r3
1004f5c2:	46bd      	mov	sp, r7
1004f5c4:	b002      	add	sp, #8
1004f5c6:	bdb0      	pop	{r4, r5, r7, pc}

1004f5c8 <AES_128_HW_enc>:

/* Implementation of the AES 128 required by the crypto library. */
void AES_128_HW_enc(const uint32_t *P_pInputBuffer,
                    uint32_t *P_pOutputBuffer,
                    const uint8_t *P_pKey)
{
1004f5c8:	b580      	push	{r7, lr}
1004f5ca:	b094      	sub	sp, #80	@ 0x50
1004f5cc:	af00      	add	r7, sp, #0
1004f5ce:	60f8      	str	r0, [r7, #12]
1004f5d0:	60b9      	str	r1, [r7, #8]
1004f5d2:	607a      	str	r2, [r7, #4]
  uint32_t tmp_key_32[4], input_32[4], output_32[4];
  uint8_t *tmp_key = (uint8_t *)tmp_key_32;
1004f5d4:	2330      	movs	r3, #48	@ 0x30
1004f5d6:	18fb      	adds	r3, r7, r3
1004f5d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *input = (uint8_t *)input_32;
1004f5da:	2320      	movs	r3, #32
1004f5dc:	18fb      	adds	r3, r7, r3
1004f5de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *output = (uint8_t *)output_32;
1004f5e0:	2310      	movs	r3, #16
1004f5e2:	18fb      	adds	r3, r7, r3
1004f5e4:	643b      	str	r3, [r7, #64]	@ 0x40
  int32_t i;

  for (i = 0; i < 16; i++)
1004f5e6:	2300      	movs	r3, #0
1004f5e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f5ea:	e00d      	b.n	1004f608 <AES_128_HW_enc+0x40>
  {
    tmp_key[15 - i] =  P_pKey[i];
1004f5ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f5ee:	687a      	ldr	r2, [r7, #4]
1004f5f0:	18d2      	adds	r2, r2, r3
1004f5f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f5f4:	210f      	movs	r1, #15
1004f5f6:	1acb      	subs	r3, r1, r3
1004f5f8:	0019      	movs	r1, r3
1004f5fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1004f5fc:	185b      	adds	r3, r3, r1
1004f5fe:	7812      	ldrb	r2, [r2, #0]
1004f600:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
1004f602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f604:	3301      	adds	r3, #1
1004f606:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f60a:	2b0f      	cmp	r3, #15
1004f60c:	ddee      	ble.n	1004f5ec <AES_128_HW_enc+0x24>
  }

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f60e:	2300      	movs	r3, #0
1004f610:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f612:	e03d      	b.n	1004f690 <AES_128_HW_enc+0xc8>
  {
    LEW32_2_BUFFER(input, i * 4, P_pInputBuffer[3 - i]);
1004f614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f616:	2203      	movs	r2, #3
1004f618:	1ad3      	subs	r3, r2, r3
1004f61a:	009b      	lsls	r3, r3, #2
1004f61c:	68fa      	ldr	r2, [r7, #12]
1004f61e:	18d3      	adds	r3, r2, r3
1004f620:	681a      	ldr	r2, [r3, #0]
1004f622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f624:	009b      	lsls	r3, r3, #2
1004f626:	0019      	movs	r1, r3
1004f628:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004f62a:	185b      	adds	r3, r3, r1
1004f62c:	b2d2      	uxtb	r2, r2
1004f62e:	701a      	strb	r2, [r3, #0]
1004f630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f632:	2203      	movs	r2, #3
1004f634:	1ad3      	subs	r3, r2, r3
1004f636:	009b      	lsls	r3, r3, #2
1004f638:	68fa      	ldr	r2, [r7, #12]
1004f63a:	18d3      	adds	r3, r2, r3
1004f63c:	681b      	ldr	r3, [r3, #0]
1004f63e:	0a19      	lsrs	r1, r3, #8
1004f640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f642:	009b      	lsls	r3, r3, #2
1004f644:	3301      	adds	r3, #1
1004f646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f648:	18d3      	adds	r3, r2, r3
1004f64a:	b2ca      	uxtb	r2, r1
1004f64c:	701a      	strb	r2, [r3, #0]
1004f64e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f650:	2203      	movs	r2, #3
1004f652:	1ad3      	subs	r3, r2, r3
1004f654:	009b      	lsls	r3, r3, #2
1004f656:	68fa      	ldr	r2, [r7, #12]
1004f658:	18d3      	adds	r3, r2, r3
1004f65a:	681b      	ldr	r3, [r3, #0]
1004f65c:	0c19      	lsrs	r1, r3, #16
1004f65e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f660:	009b      	lsls	r3, r3, #2
1004f662:	3302      	adds	r3, #2
1004f664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f666:	18d3      	adds	r3, r2, r3
1004f668:	b2ca      	uxtb	r2, r1
1004f66a:	701a      	strb	r2, [r3, #0]
1004f66c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f66e:	2203      	movs	r2, #3
1004f670:	1ad3      	subs	r3, r2, r3
1004f672:	009b      	lsls	r3, r3, #2
1004f674:	68fa      	ldr	r2, [r7, #12]
1004f676:	18d3      	adds	r3, r2, r3
1004f678:	681b      	ldr	r3, [r3, #0]
1004f67a:	0e19      	lsrs	r1, r3, #24
1004f67c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f67e:	009b      	lsls	r3, r3, #2
1004f680:	3303      	adds	r3, #3
1004f682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f684:	18d3      	adds	r3, r2, r3
1004f686:	b2ca      	uxtb	r2, r1
1004f688:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f68a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f68c:	3301      	adds	r3, #1
1004f68e:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f692:	2b03      	cmp	r3, #3
1004f694:	ddbe      	ble.n	1004f614 <AES_128_HW_enc+0x4c>
  }

  HW_AES_Encrypt(input_32, tmp_key_32, output_32);
1004f696:	2310      	movs	r3, #16
1004f698:	18fa      	adds	r2, r7, r3
1004f69a:	2330      	movs	r3, #48	@ 0x30
1004f69c:	18f9      	adds	r1, r7, r3
1004f69e:	2320      	movs	r3, #32
1004f6a0:	18fb      	adds	r3, r7, r3
1004f6a2:	0018      	movs	r0, r3
1004f6a4:	f000 f894 	bl	1004f7d0 <HW_AES_Encrypt>

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f6a8:	2300      	movs	r3, #0
1004f6aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f6ac:	e028      	b.n	1004f700 <AES_128_HW_enc+0x138>
  {
    P_pOutputBuffer[3 - i] = BUFFER_2_LEW32(output, i * 4);
1004f6ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f6b0:	009b      	lsls	r3, r3, #2
1004f6b2:	3303      	adds	r3, #3
1004f6b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1004f6b6:	18d3      	adds	r3, r2, r3
1004f6b8:	781b      	ldrb	r3, [r3, #0]
1004f6ba:	061a      	lsls	r2, r3, #24
1004f6bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f6be:	009b      	lsls	r3, r3, #2
1004f6c0:	3302      	adds	r3, #2
1004f6c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004f6c4:	18cb      	adds	r3, r1, r3
1004f6c6:	781b      	ldrb	r3, [r3, #0]
1004f6c8:	041b      	lsls	r3, r3, #16
1004f6ca:	431a      	orrs	r2, r3
1004f6cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f6ce:	009b      	lsls	r3, r3, #2
1004f6d0:	3301      	adds	r3, #1
1004f6d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004f6d4:	18cb      	adds	r3, r1, r3
1004f6d6:	781b      	ldrb	r3, [r3, #0]
1004f6d8:	021b      	lsls	r3, r3, #8
1004f6da:	431a      	orrs	r2, r3
1004f6dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f6de:	009b      	lsls	r3, r3, #2
1004f6e0:	0019      	movs	r1, r3
1004f6e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004f6e4:	185b      	adds	r3, r3, r1
1004f6e6:	781b      	ldrb	r3, [r3, #0]
1004f6e8:	0018      	movs	r0, r3
1004f6ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f6ec:	2103      	movs	r1, #3
1004f6ee:	1acb      	subs	r3, r1, r3
1004f6f0:	009b      	lsls	r3, r3, #2
1004f6f2:	68b9      	ldr	r1, [r7, #8]
1004f6f4:	18cb      	adds	r3, r1, r3
1004f6f6:	4302      	orrs	r2, r0
1004f6f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f6fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f6fc:	3301      	adds	r3, #1
1004f6fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f702:	2b03      	cmp	r3, #3
1004f704:	ddd3      	ble.n	1004f6ae <AES_128_HW_enc+0xe6>
  }
}
1004f706:	46c0      	nop			@ (mov r8, r8)
1004f708:	46c0      	nop			@ (mov r8, r8)
1004f70a:	46bd      	mov	sp, r7
1004f70c:	b014      	add	sp, #80	@ 0x50
1004f70e:	bd80      	pop	{r7, pc}

1004f710 <LL_APB2_GRP1_EnableClock>:
{
1004f710:	b580      	push	{r7, lr}
1004f712:	b084      	sub	sp, #16
1004f714:	af00      	add	r7, sp, #0
1004f716:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004f718:	4b07      	ldr	r3, [pc, #28]	@ (1004f738 <LL_APB2_GRP1_EnableClock+0x28>)
1004f71a:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004f71c:	4b06      	ldr	r3, [pc, #24]	@ (1004f738 <LL_APB2_GRP1_EnableClock+0x28>)
1004f71e:	687a      	ldr	r2, [r7, #4]
1004f720:	430a      	orrs	r2, r1
1004f722:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004f724:	4b04      	ldr	r3, [pc, #16]	@ (1004f738 <LL_APB2_GRP1_EnableClock+0x28>)
1004f726:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004f728:	687a      	ldr	r2, [r7, #4]
1004f72a:	4013      	ands	r3, r2
1004f72c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004f72e:	68fb      	ldr	r3, [r7, #12]
}
1004f730:	46c0      	nop			@ (mov r8, r8)
1004f732:	46bd      	mov	sp, r7
1004f734:	b004      	add	sp, #16
1004f736:	bd80      	pop	{r7, pc}
1004f738:	48400000 	.word	0x48400000

1004f73c <LL_APB2_GRP1_IsEnabledClock>:
{
1004f73c:	b580      	push	{r7, lr}
1004f73e:	b082      	sub	sp, #8
1004f740:	af00      	add	r7, sp, #0
1004f742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004f744:	4b06      	ldr	r3, [pc, #24]	@ (1004f760 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004f746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004f748:	687a      	ldr	r2, [r7, #4]
1004f74a:	4013      	ands	r3, r2
1004f74c:	687a      	ldr	r2, [r7, #4]
1004f74e:	429a      	cmp	r2, r3
1004f750:	d101      	bne.n	1004f756 <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004f752:	2301      	movs	r3, #1
1004f754:	e000      	b.n	1004f758 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004f756:	2300      	movs	r3, #0
}
1004f758:	0018      	movs	r0, r3
1004f75a:	46bd      	mov	sp, r7
1004f75c:	b002      	add	sp, #8
1004f75e:	bd80      	pop	{r7, pc}
1004f760:	48400000 	.word	0x48400000

1004f764 <LL_APB2_GRP1_ForceReset>:
{
1004f764:	b580      	push	{r7, lr}
1004f766:	b082      	sub	sp, #8
1004f768:	af00      	add	r7, sp, #0
1004f76a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004f76c:	4b04      	ldr	r3, [pc, #16]	@ (1004f780 <LL_APB2_GRP1_ForceReset+0x1c>)
1004f76e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
1004f770:	4b03      	ldr	r3, [pc, #12]	@ (1004f780 <LL_APB2_GRP1_ForceReset+0x1c>)
1004f772:	687a      	ldr	r2, [r7, #4]
1004f774:	430a      	orrs	r2, r1
1004f776:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004f778:	46c0      	nop			@ (mov r8, r8)
1004f77a:	46bd      	mov	sp, r7
1004f77c:	b002      	add	sp, #8
1004f77e:	bd80      	pop	{r7, pc}
1004f780:	48400000 	.word	0x48400000

1004f784 <LL_APB2_GRP1_ReleaseReset>:
{
1004f784:	b580      	push	{r7, lr}
1004f786:	b082      	sub	sp, #8
1004f788:	af00      	add	r7, sp, #0
1004f78a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004f78c:	4b05      	ldr	r3, [pc, #20]	@ (1004f7a4 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004f78e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004f790:	687b      	ldr	r3, [r7, #4]
1004f792:	43d9      	mvns	r1, r3
1004f794:	4b03      	ldr	r3, [pc, #12]	@ (1004f7a4 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004f796:	400a      	ands	r2, r1
1004f798:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004f79a:	46c0      	nop			@ (mov r8, r8)
1004f79c:	46bd      	mov	sp, r7
1004f79e:	b002      	add	sp, #8
1004f7a0:	bd80      	pop	{r7, pc}
1004f7a2:	46c0      	nop			@ (mov r8, r8)
1004f7a4:	48400000 	.word	0x48400000

1004f7a8 <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
1004f7a8:	b580      	push	{r7, lr}
1004f7aa:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004f7ac:	2001      	movs	r0, #1
1004f7ae:	f7ff ffc5 	bl	1004f73c <LL_APB2_GRP1_IsEnabledClock>
1004f7b2:	1e03      	subs	r3, r0, #0
1004f7b4:	d108      	bne.n	1004f7c8 <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004f7b6:	2001      	movs	r0, #1
1004f7b8:	f7ff ffd4 	bl	1004f764 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004f7bc:	2001      	movs	r0, #1
1004f7be:	f7ff ffe1 	bl	1004f784 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004f7c2:	2001      	movs	r0, #1
1004f7c4:	f7ff ffa4 	bl	1004f710 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
1004f7c8:	2300      	movs	r3, #0
}
1004f7ca:	0018      	movs	r0, r3
1004f7cc:	46bd      	mov	sp, r7
1004f7ce:	bd80      	pop	{r7, pc}

1004f7d0 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
1004f7d0:	b590      	push	{r4, r7, lr}
1004f7d2:	b087      	sub	sp, #28
1004f7d4:	af00      	add	r7, sp, #0
1004f7d6:	60f8      	str	r0, [r7, #12]
1004f7d8:	60b9      	str	r1, [r7, #8]
1004f7da:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
1004f7dc:	4b31      	ldr	r3, [pc, #196]	@ (1004f8a4 <HW_AES_Encrypt+0xd4>)
1004f7de:	781b      	ldrb	r3, [r3, #0]
1004f7e0:	b2db      	uxtb	r3, r3
1004f7e2:	3301      	adds	r3, #1
1004f7e4:	b2da      	uxtb	r2, r3
1004f7e6:	4b2f      	ldr	r3, [pc, #188]	@ (1004f8a4 <HW_AES_Encrypt+0xd4>)
1004f7e8:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
1004f7ea:	2417      	movs	r4, #23
1004f7ec:	193b      	adds	r3, r7, r4
1004f7ee:	4a2d      	ldr	r2, [pc, #180]	@ (1004f8a4 <HW_AES_Encrypt+0xd4>)
1004f7f0:	7812      	ldrb	r2, [r2, #0]
1004f7f2:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
1004f7f4:	23c0      	movs	r3, #192	@ 0xc0
1004f7f6:	05db      	lsls	r3, r3, #23
1004f7f8:	68ba      	ldr	r2, [r7, #8]
1004f7fa:	6812      	ldr	r2, [r2, #0]
1004f7fc:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
1004f7fe:	68bb      	ldr	r3, [r7, #8]
1004f800:	1d1a      	adds	r2, r3, #4
1004f802:	23c0      	movs	r3, #192	@ 0xc0
1004f804:	05db      	lsls	r3, r3, #23
1004f806:	6812      	ldr	r2, [r2, #0]
1004f808:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
1004f80a:	68bb      	ldr	r3, [r7, #8]
1004f80c:	3308      	adds	r3, #8
1004f80e:	001a      	movs	r2, r3
1004f810:	23c0      	movs	r3, #192	@ 0xc0
1004f812:	05db      	lsls	r3, r3, #23
1004f814:	6812      	ldr	r2, [r2, #0]
1004f816:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
1004f818:	68bb      	ldr	r3, [r7, #8]
1004f81a:	330c      	adds	r3, #12
1004f81c:	001a      	movs	r2, r3
1004f81e:	23c0      	movs	r3, #192	@ 0xc0
1004f820:	05db      	lsls	r3, r3, #23
1004f822:	6812      	ldr	r2, [r2, #0]
1004f824:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
1004f826:	23c0      	movs	r3, #192	@ 0xc0
1004f828:	05db      	lsls	r3, r3, #23
1004f82a:	68fa      	ldr	r2, [r7, #12]
1004f82c:	6812      	ldr	r2, [r2, #0]
1004f82e:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
1004f830:	68fb      	ldr	r3, [r7, #12]
1004f832:	1d1a      	adds	r2, r3, #4
1004f834:	23c0      	movs	r3, #192	@ 0xc0
1004f836:	05db      	lsls	r3, r3, #23
1004f838:	6812      	ldr	r2, [r2, #0]
1004f83a:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
1004f83c:	68fb      	ldr	r3, [r7, #12]
1004f83e:	3308      	adds	r3, #8
1004f840:	001a      	movs	r2, r3
1004f842:	23c0      	movs	r3, #192	@ 0xc0
1004f844:	05db      	lsls	r3, r3, #23
1004f846:	6812      	ldr	r2, [r2, #0]
1004f848:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
1004f84a:	68fb      	ldr	r3, [r7, #12]
1004f84c:	330c      	adds	r3, #12
1004f84e:	001a      	movs	r2, r3
1004f850:	23c0      	movs	r3, #192	@ 0xc0
1004f852:	05db      	lsls	r3, r3, #23
1004f854:	6812      	ldr	r2, [r2, #0]
1004f856:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
1004f858:	f000 f826 	bl	1004f8a8 <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
1004f85c:	23c0      	movs	r3, #192	@ 0xc0
1004f85e:	05db      	lsls	r3, r3, #23
1004f860:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004f862:	687b      	ldr	r3, [r7, #4]
1004f864:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
1004f866:	23c0      	movs	r3, #192	@ 0xc0
1004f868:	05da      	lsls	r2, r3, #23
1004f86a:	687b      	ldr	r3, [r7, #4]
1004f86c:	3304      	adds	r3, #4
1004f86e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
1004f870:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
1004f872:	23c0      	movs	r3, #192	@ 0xc0
1004f874:	05da      	lsls	r2, r3, #23
1004f876:	687b      	ldr	r3, [r7, #4]
1004f878:	3308      	adds	r3, #8
1004f87a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
1004f87c:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
1004f87e:	23c0      	movs	r3, #192	@ 0xc0
1004f880:	05da      	lsls	r2, r3, #23
1004f882:	687b      	ldr	r3, [r7, #4]
1004f884:	330c      	adds	r3, #12
1004f886:	6d52      	ldr	r2, [r2, #84]	@ 0x54
1004f888:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
1004f88a:	4b06      	ldr	r3, [pc, #24]	@ (1004f8a4 <HW_AES_Encrypt+0xd4>)
1004f88c:	781b      	ldrb	r3, [r3, #0]
1004f88e:	b2db      	uxtb	r3, r3
1004f890:	193a      	adds	r2, r7, r4
1004f892:	7812      	ldrb	r2, [r2, #0]
1004f894:	429a      	cmp	r2, r3
1004f896:	d1a8      	bne.n	1004f7ea <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
1004f898:	2300      	movs	r3, #0
}
1004f89a:	0018      	movs	r0, r3
1004f89c:	46bd      	mov	sp, r7
1004f89e:	b007      	add	sp, #28
1004f8a0:	bd90      	pop	{r4, r7, pc}
1004f8a2:	46c0      	nop			@ (mov r8, r8)
1004f8a4:	200022a8 	.word	0x200022a8

1004f8a8 <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
1004f8a8:	b580      	push	{r7, lr}
1004f8aa:	b082      	sub	sp, #8
1004f8ac:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
1004f8ae:	1dfb      	adds	r3, r7, #7
1004f8b0:	2264      	movs	r2, #100	@ 0x64
1004f8b2:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
1004f8b4:	23c0      	movs	r3, #192	@ 0xc0
1004f8b6:	05db      	lsls	r3, r3, #23
1004f8b8:	0018      	movs	r0, r3
1004f8ba:	f000 f81c 	bl	1004f8f6 <LL_AES_StartManualEncription>
    do
    {
        i--;
1004f8be:	1dfb      	adds	r3, r7, #7
1004f8c0:	781b      	ldrb	r3, [r3, #0]
1004f8c2:	b2db      	uxtb	r3, r3
1004f8c4:	3b01      	subs	r3, #1
1004f8c6:	b2da      	uxtb	r2, r3
1004f8c8:	1dfb      	adds	r3, r7, #7
1004f8ca:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
1004f8cc:	23c0      	movs	r3, #192	@ 0xc0
1004f8ce:	05db      	lsls	r3, r3, #23
1004f8d0:	0018      	movs	r0, r3
1004f8d2:	f000 f81e 	bl	1004f912 <LL_AES_IsBusy>
1004f8d6:	1e03      	subs	r3, r0, #0
1004f8d8:	d005      	beq.n	1004f8e6 <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
1004f8da:	1dfb      	adds	r3, r7, #7
1004f8dc:	781b      	ldrb	r3, [r3, #0]
1004f8de:	b2db      	uxtb	r3, r3
1004f8e0:	2b00      	cmp	r3, #0
1004f8e2:	d1ec      	bne.n	1004f8be <HW_AES_Start+0x16>
1004f8e4:	e000      	b.n	1004f8e8 <HW_AES_Start+0x40>
            break;
1004f8e6:	46c0      	nop			@ (mov r8, r8)

    return i;
1004f8e8:	1dfb      	adds	r3, r7, #7
1004f8ea:	781b      	ldrb	r3, [r3, #0]
1004f8ec:	b2db      	uxtb	r3, r3
}
1004f8ee:	0018      	movs	r0, r3
1004f8f0:	46bd      	mov	sp, r7
1004f8f2:	b002      	add	sp, #8
1004f8f4:	bd80      	pop	{r7, pc}

1004f8f6 <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
1004f8f6:	b580      	push	{r7, lr}
1004f8f8:	b082      	sub	sp, #8
1004f8fa:	af00      	add	r7, sp, #0
1004f8fc:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
1004f8fe:	687b      	ldr	r3, [r7, #4]
1004f900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004f902:	2201      	movs	r2, #1
1004f904:	431a      	orrs	r2, r3
1004f906:	687b      	ldr	r3, [r7, #4]
1004f908:	659a      	str	r2, [r3, #88]	@ 0x58
}
1004f90a:	46c0      	nop			@ (mov r8, r8)
1004f90c:	46bd      	mov	sp, r7
1004f90e:	b002      	add	sp, #8
1004f910:	bd80      	pop	{r7, pc}

1004f912 <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
1004f912:	b580      	push	{r7, lr}
1004f914:	b082      	sub	sp, #8
1004f916:	af00      	add	r7, sp, #0
1004f918:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
1004f91a:	687b      	ldr	r3, [r7, #4]
1004f91c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f91e:	2201      	movs	r2, #1
1004f920:	4013      	ands	r3, r2
1004f922:	2b01      	cmp	r3, #1
1004f924:	d101      	bne.n	1004f92a <LL_AES_IsBusy+0x18>
1004f926:	2301      	movs	r3, #1
1004f928:	e000      	b.n	1004f92c <LL_AES_IsBusy+0x1a>
1004f92a:	2300      	movs	r3, #0
}
1004f92c:	0018      	movs	r0, r3
1004f92e:	46bd      	mov	sp, r7
1004f930:	b002      	add	sp, #8
1004f932:	bd80      	pop	{r7, pc}

1004f934 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
1004f934:	b580      	push	{r7, lr}
1004f936:	b082      	sub	sp, #8
1004f938:	af00      	add	r7, sp, #0
1004f93a:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
1004f93c:	687b      	ldr	r3, [r7, #4]
1004f93e:	681b      	ldr	r3, [r3, #0]
1004f940:	2280      	movs	r2, #128	@ 0x80
1004f942:	0352      	lsls	r2, r2, #13
1004f944:	431a      	orrs	r2, r3
1004f946:	687b      	ldr	r3, [r7, #4]
1004f948:	601a      	str	r2, [r3, #0]
}
1004f94a:	46c0      	nop			@ (mov r8, r8)
1004f94c:	46bd      	mov	sp, r7
1004f94e:	b002      	add	sp, #8
1004f950:	bd80      	pop	{r7, pc}

1004f952 <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
1004f952:	b580      	push	{r7, lr}
1004f954:	b082      	sub	sp, #8
1004f956:	af00      	add	r7, sp, #0
1004f958:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
1004f95a:	687b      	ldr	r3, [r7, #4]
1004f95c:	681b      	ldr	r3, [r3, #0]
1004f95e:	2280      	movs	r2, #128	@ 0x80
1004f960:	0312      	lsls	r2, r2, #12
1004f962:	431a      	orrs	r2, r3
1004f964:	687b      	ldr	r3, [r7, #4]
1004f966:	601a      	str	r2, [r3, #0]
}
1004f968:	46c0      	nop			@ (mov r8, r8)
1004f96a:	46bd      	mov	sp, r7
1004f96c:	b002      	add	sp, #8
1004f96e:	bd80      	pop	{r7, pc}

1004f970 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
1004f970:	b580      	push	{r7, lr}
1004f972:	b082      	sub	sp, #8
1004f974:	af00      	add	r7, sp, #0
1004f976:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
1004f978:	687b      	ldr	r3, [r7, #4]
1004f97a:	681b      	ldr	r3, [r3, #0]
1004f97c:	2280      	movs	r2, #128	@ 0x80
1004f97e:	0292      	lsls	r2, r2, #10
1004f980:	431a      	orrs	r2, r3
1004f982:	687b      	ldr	r3, [r7, #4]
1004f984:	601a      	str	r2, [r3, #0]
}
1004f986:	46c0      	nop			@ (mov r8, r8)
1004f988:	46bd      	mov	sp, r7
1004f98a:	b002      	add	sp, #8
1004f98c:	bd80      	pop	{r7, pc}
	...

1004f990 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
1004f990:	b580      	push	{r7, lr}
1004f992:	af00      	add	r7, sp, #0
  PKAMGR_Init();
1004f994:	f001 fc98 	bl	100512c8 <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
1004f998:	4b07      	ldr	r3, [pc, #28]	@ (1004f9b8 <HW_PKA_Init+0x28>)
1004f99a:	0018      	movs	r0, r3
1004f99c:	f7ff ffca 	bl	1004f934 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
1004f9a0:	4b05      	ldr	r3, [pc, #20]	@ (1004f9b8 <HW_PKA_Init+0x28>)
1004f9a2:	0018      	movs	r0, r3
1004f9a4:	f7ff ffd5 	bl	1004f952 <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
1004f9a8:	4b03      	ldr	r3, [pc, #12]	@ (1004f9b8 <HW_PKA_Init+0x28>)
1004f9aa:	0018      	movs	r0, r3
1004f9ac:	f7ff ffe0 	bl	1004f970 <LL_PKA_EnableIT_PROCEND>
}
1004f9b0:	46c0      	nop			@ (mov r8, r8)
1004f9b2:	46bd      	mov	sp, r7
1004f9b4:	bd80      	pop	{r7, pc}
1004f9b6:	46c0      	nop			@ (mov r8, r8)
1004f9b8:	48300000 	.word	0x48300000

1004f9bc <LL_AHB1_GRP1_EnableClock>:
{
1004f9bc:	b580      	push	{r7, lr}
1004f9be:	b084      	sub	sp, #16
1004f9c0:	af00      	add	r7, sp, #0
1004f9c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004f9c4:	4b07      	ldr	r3, [pc, #28]	@ (1004f9e4 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f9c6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004f9c8:	4b06      	ldr	r3, [pc, #24]	@ (1004f9e4 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f9ca:	687a      	ldr	r2, [r7, #4]
1004f9cc:	430a      	orrs	r2, r1
1004f9ce:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004f9d0:	4b04      	ldr	r3, [pc, #16]	@ (1004f9e4 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f9d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004f9d4:	687a      	ldr	r2, [r7, #4]
1004f9d6:	4013      	ands	r3, r2
1004f9d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004f9da:	68fb      	ldr	r3, [r7, #12]
}
1004f9dc:	46c0      	nop			@ (mov r8, r8)
1004f9de:	46bd      	mov	sp, r7
1004f9e0:	b004      	add	sp, #16
1004f9e2:	bd80      	pop	{r7, pc}
1004f9e4:	48400000 	.word	0x48400000

1004f9e8 <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
1004f9e8:	b580      	push	{r7, lr}
1004f9ea:	b082      	sub	sp, #8
1004f9ec:	af00      	add	r7, sp, #0
1004f9ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RNGx->CR, RNG_CR_RNG_DIS);
1004f9f0:	687b      	ldr	r3, [r7, #4]
1004f9f2:	681b      	ldr	r3, [r3, #0]
1004f9f4:	2204      	movs	r2, #4
1004f9f6:	4393      	bics	r3, r2
1004f9f8:	001a      	movs	r2, r3
1004f9fa:	687b      	ldr	r3, [r7, #4]
1004f9fc:	601a      	str	r2, [r3, #0]
}
1004f9fe:	46c0      	nop			@ (mov r8, r8)
1004fa00:	46bd      	mov	sp, r7
1004fa02:	b002      	add	sp, #8
1004fa04:	bd80      	pop	{r7, pc}

1004fa06 <LL_RNG_IsActiveFlag_RNGRDY>:
  * @rmtoll SR           RNGRDY          LL_RNG_IsActiveFlag_RNGRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_RNGRDY(RNG_TypeDef *RNGx)
{
1004fa06:	b580      	push	{r7, lr}
1004fa08:	b082      	sub	sp, #8
1004fa0a:	af00      	add	r7, sp, #0
1004fa0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_RNGRDY) == (RNG_SR_RNGRDY)) ? 1UL : 0UL);
1004fa0e:	687b      	ldr	r3, [r7, #4]
1004fa10:	685b      	ldr	r3, [r3, #4]
1004fa12:	2201      	movs	r2, #1
1004fa14:	4013      	ands	r3, r2
1004fa16:	2b01      	cmp	r3, #1
1004fa18:	d101      	bne.n	1004fa1e <LL_RNG_IsActiveFlag_RNGRDY+0x18>
1004fa1a:	2301      	movs	r3, #1
1004fa1c:	e000      	b.n	1004fa20 <LL_RNG_IsActiveFlag_RNGRDY+0x1a>
1004fa1e:	2300      	movs	r3, #0
}
1004fa20:	0018      	movs	r0, r3
1004fa22:	46bd      	mov	sp, r7
1004fa24:	b002      	add	sp, #8
1004fa26:	bd80      	pop	{r7, pc}

1004fa28 <LL_RNG_IsActiveFlag_FAULT>:
  * @rmtoll SR           FAULT          LL_RNG_IsActiveFlag_FAULT
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_FAULT(RNG_TypeDef *RNGx)
{
1004fa28:	b580      	push	{r7, lr}
1004fa2a:	b082      	sub	sp, #8
1004fa2c:	af00      	add	r7, sp, #0
1004fa2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_FAULT) == (RNG_SR_FAULT)) ? 1UL : 0UL);
1004fa30:	687b      	ldr	r3, [r7, #4]
1004fa32:	685b      	ldr	r3, [r3, #4]
1004fa34:	2204      	movs	r2, #4
1004fa36:	4013      	ands	r3, r2
1004fa38:	2b04      	cmp	r3, #4
1004fa3a:	d101      	bne.n	1004fa40 <LL_RNG_IsActiveFlag_FAULT+0x18>
1004fa3c:	2301      	movs	r3, #1
1004fa3e:	e000      	b.n	1004fa42 <LL_RNG_IsActiveFlag_FAULT+0x1a>
1004fa40:	2300      	movs	r3, #0
}
1004fa42:	0018      	movs	r0, r3
1004fa44:	46bd      	mov	sp, r7
1004fa46:	b002      	add	sp, #8
1004fa48:	bd80      	pop	{r7, pc}

1004fa4a <LL_RNG_ReadRandData16>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData16
  * @param  RNGx RNG Instance
  * @retval Generated 16-bit random value
  */
__STATIC_INLINE uint16_t LL_RNG_ReadRandData16(RNG_TypeDef *RNGx)
{
1004fa4a:	b580      	push	{r7, lr}
1004fa4c:	b082      	sub	sp, #8
1004fa4e:	af00      	add	r7, sp, #0
1004fa50:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_REG(RNGx->VAL));
1004fa52:	687b      	ldr	r3, [r7, #4]
1004fa54:	689b      	ldr	r3, [r3, #8]
1004fa56:	b29b      	uxth	r3, r3
}
1004fa58:	0018      	movs	r0, r3
1004fa5a:	46bd      	mov	sp, r7
1004fa5c:	b002      	add	sp, #8
1004fa5e:	bd80      	pop	{r7, pc}

1004fa60 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
1004fa60:	b580      	push	{r7, lr}
1004fa62:	af00      	add	r7, sp, #0
  }
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
1004fa64:	2380      	movs	r3, #128	@ 0x80
1004fa66:	02db      	lsls	r3, r3, #11
1004fa68:	0018      	movs	r0, r3
1004fa6a:	f7ff ffa7 	bl	1004f9bc <LL_AHB1_GRP1_EnableClock>

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
1004fa6e:	4b0b      	ldr	r3, [pc, #44]	@ (1004fa9c <HW_RNG_Init+0x3c>)
1004fa70:	0018      	movs	r0, r3
1004fa72:	f7ff ffb9 	bl	1004f9e8 <LL_RNG_Enable>

  /* Wait for DRDY flag to be raised */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004fa76:	46c0      	nop			@ (mov r8, r8)
1004fa78:	4b08      	ldr	r3, [pc, #32]	@ (1004fa9c <HW_RNG_Init+0x3c>)
1004fa7a:	0018      	movs	r0, r3
1004fa7c:	f7ff ffc3 	bl	1004fa06 <LL_RNG_IsActiveFlag_RNGRDY>
1004fa80:	1e03      	subs	r3, r0, #0
1004fa82:	d0f9      	beq.n	1004fa78 <HW_RNG_Init+0x18>

  /* Check if error occurs */
  if (  LL_RNG_IsActiveFlag_FAULT(RNG)  )
1004fa84:	4b05      	ldr	r3, [pc, #20]	@ (1004fa9c <HW_RNG_Init+0x3c>)
1004fa86:	0018      	movs	r0, r3
1004fa88:	f7ff ffce 	bl	1004fa28 <LL_RNG_IsActiveFlag_FAULT>
1004fa8c:	1e03      	subs	r3, r0, #0
1004fa8e:	d001      	beq.n	1004fa94 <HW_RNG_Init+0x34>
  {
    /* Clock or Seed Error detected. Set LED to blinking mode (Error type)*/
    return HW_RNG_ERROR;
1004fa90:	2301      	movs	r3, #1
1004fa92:	e000      	b.n	1004fa96 <HW_RNG_Init+0x36>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
1004fa94:	2300      	movs	r3, #0
}
1004fa96:	0018      	movs	r0, r3
1004fa98:	46bd      	mov	sp, r7
1004fa9a:	bd80      	pop	{r7, pc}
1004fa9c:	48600000 	.word	0x48600000

1004faa0 <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
1004faa0:	b580      	push	{r7, lr}
1004faa2:	b082      	sub	sp, #8
1004faa4:	af00      	add	r7, sp, #0
1004faa6:	6078      	str	r0, [r7, #4]

#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004faa8:	46c0      	nop			@ (mov r8, r8)
1004faaa:	4b09      	ldr	r3, [pc, #36]	@ (1004fad0 <HW_RNG_GetRandom16+0x30>)
1004faac:	0018      	movs	r0, r3
1004faae:	f7ff ffaa 	bl	1004fa06 <LL_RNG_IsActiveFlag_RNGRDY>
1004fab2:	1e03      	subs	r3, r0, #0
1004fab4:	d0f9      	beq.n	1004faaa <HW_RNG_GetRandom16+0xa>

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004fab6:	4b06      	ldr	r3, [pc, #24]	@ (1004fad0 <HW_RNG_GetRandom16+0x30>)
1004fab8:	0018      	movs	r0, r3
1004faba:	f7ff ffc6 	bl	1004fa4a <LL_RNG_ReadRandData16>
1004fabe:	0003      	movs	r3, r0
1004fac0:	001a      	movs	r2, r3
1004fac2:	687b      	ldr	r3, [r7, #4]
1004fac4:	801a      	strh	r2, [r3, #0]

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004fac6:	2300      	movs	r3, #0
}
1004fac8:	0018      	movs	r0, r3
1004faca:	46bd      	mov	sp, r7
1004facc:	b002      	add	sp, #8
1004face:	bd80      	pop	{r7, pc}
1004fad0:	48600000 	.word	0x48600000

1004fad4 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
1004fad4:	b590      	push	{r4, r7, lr}
1004fad6:	b085      	sub	sp, #20
1004fad8:	af00      	add	r7, sp, #0
1004fada:	6078      	str	r0, [r7, #4]

  *num = LL_RNG_READRANDDATA32(RNG);
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  uint16_t *num_16 = (uint16_t *) num;
1004fadc:	687b      	ldr	r3, [r7, #4]
1004fade:	60fb      	str	r3, [r7, #12]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004fae0:	46c0      	nop			@ (mov r8, r8)
1004fae2:	4b11      	ldr	r3, [pc, #68]	@ (1004fb28 <HW_RNG_GetRandom32+0x54>)
1004fae4:	0018      	movs	r0, r3
1004fae6:	f7ff ff8e 	bl	1004fa06 <LL_RNG_IsActiveFlag_RNGRDY>
1004faea:	1e03      	subs	r3, r0, #0
1004faec:	d0f9      	beq.n	1004fae2 <HW_RNG_GetRandom32+0xe>

  num_16[0] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004faee:	4b0e      	ldr	r3, [pc, #56]	@ (1004fb28 <HW_RNG_GetRandom32+0x54>)
1004faf0:	0018      	movs	r0, r3
1004faf2:	f7ff ffaa 	bl	1004fa4a <LL_RNG_ReadRandData16>
1004faf6:	0003      	movs	r3, r0
1004faf8:	001a      	movs	r2, r3
1004fafa:	68fb      	ldr	r3, [r7, #12]
1004fafc:	801a      	strh	r2, [r3, #0]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004fafe:	46c0      	nop			@ (mov r8, r8)
1004fb00:	4b09      	ldr	r3, [pc, #36]	@ (1004fb28 <HW_RNG_GetRandom32+0x54>)
1004fb02:	0018      	movs	r0, r3
1004fb04:	f7ff ff7f 	bl	1004fa06 <LL_RNG_IsActiveFlag_RNGRDY>
1004fb08:	1e03      	subs	r3, r0, #0
1004fb0a:	d0f9      	beq.n	1004fb00 <HW_RNG_GetRandom32+0x2c>

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004fb0c:	68fb      	ldr	r3, [r7, #12]
1004fb0e:	1c9c      	adds	r4, r3, #2
1004fb10:	4b05      	ldr	r3, [pc, #20]	@ (1004fb28 <HW_RNG_GetRandom32+0x54>)
1004fb12:	0018      	movs	r0, r3
1004fb14:	f7ff ff99 	bl	1004fa4a <LL_RNG_ReadRandData16>
1004fb18:	0003      	movs	r3, r0
1004fb1a:	8023      	strh	r3, [r4, #0]
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004fb1c:	2300      	movs	r3, #0
}
1004fb1e:	0018      	movs	r0, r3
1004fb20:	46bd      	mov	sp, r7
1004fb22:	b005      	add	sp, #20
1004fb24:	bd90      	pop	{r4, r7, pc}
1004fb26:	46c0      	nop			@ (mov r8, r8)
1004fb28:	48600000 	.word	0x48600000

1004fb2c <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
1004fb2c:	b580      	push	{r7, lr}
1004fb2e:	b084      	sub	sp, #16
1004fb30:	af00      	add	r7, sp, #0
1004fb32:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
1004fb34:	687b      	ldr	r3, [r7, #4]
1004fb36:	681b      	ldr	r3, [r3, #0]
1004fb38:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
1004fb3a:	687b      	ldr	r3, [r7, #4]
1004fb3c:	2200      	movs	r2, #0
1004fb3e:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
1004fb40:	687b      	ldr	r3, [r7, #4]
1004fb42:	2200      	movs	r2, #0
1004fb44:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
1004fb46:	687b      	ldr	r3, [r7, #4]
1004fb48:	2200      	movs	r2, #0
1004fb4a:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
1004fb4c:	687b      	ldr	r3, [r7, #4]
1004fb4e:	2200      	movs	r2, #0
1004fb50:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
1004fb52:	68fb      	ldr	r3, [r7, #12]
1004fb54:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
1004fb56:	68bb      	ldr	r3, [r7, #8]
1004fb58:	781b      	ldrb	r3, [r3, #0]
1004fb5a:	2bff      	cmp	r3, #255	@ 0xff
1004fb5c:	d10c      	bne.n	1004fb78 <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
1004fb5e:	687b      	ldr	r3, [r7, #4]
1004fb60:	685b      	ldr	r3, [r3, #4]
1004fb62:	b29a      	uxth	r2, r3
1004fb64:	68fb      	ldr	r3, [r7, #12]
1004fb66:	b29b      	uxth	r3, r3
1004fb68:	1ad3      	subs	r3, r2, r3
1004fb6a:	b29b      	uxth	r3, r3
1004fb6c:	3b04      	subs	r3, #4
1004fb6e:	b29a      	uxth	r2, r3
1004fb70:	687b      	ldr	r3, [r7, #4]
1004fb72:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
1004fb74:	2300      	movs	r3, #0
1004fb76:	e028      	b.n	1004fbca <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
1004fb78:	68bb      	ldr	r3, [r7, #8]
1004fb7a:	781b      	ldrb	r3, [r3, #0]
1004fb7c:	2bfe      	cmp	r3, #254	@ 0xfe
1004fb7e:	d106      	bne.n	1004fb8e <NVMDB_get_info+0x62>
    {
      info->valid_records++;
1004fb80:	687b      	ldr	r3, [r7, #4]
1004fb82:	891b      	ldrh	r3, [r3, #8]
1004fb84:	3301      	adds	r3, #1
1004fb86:	b29a      	uxth	r2, r3
1004fb88:	687b      	ldr	r3, [r7, #4]
1004fb8a:	811a      	strh	r2, [r3, #8]
1004fb8c:	e00c      	b.n	1004fba8 <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
1004fb8e:	68bb      	ldr	r3, [r7, #8]
1004fb90:	781b      	ldrb	r3, [r3, #0]
1004fb92:	2b00      	cmp	r3, #0
1004fb94:	d106      	bne.n	1004fba4 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
1004fb96:	687b      	ldr	r3, [r7, #4]
1004fb98:	895b      	ldrh	r3, [r3, #10]
1004fb9a:	3301      	adds	r3, #1
1004fb9c:	b29a      	uxth	r2, r3
1004fb9e:	687b      	ldr	r3, [r7, #4]
1004fba0:	815a      	strh	r2, [r3, #10]
1004fba2:	e001      	b.n	1004fba8 <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
1004fba4:	2303      	movs	r3, #3
1004fba6:	e010      	b.n	1004fbca <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004fba8:	68bb      	ldr	r3, [r7, #8]
1004fbaa:	885b      	ldrh	r3, [r3, #2]
1004fbac:	3303      	adds	r3, #3
1004fbae:	2203      	movs	r2, #3
1004fbb0:	4313      	orrs	r3, r2
1004fbb2:	001a      	movs	r2, r3
1004fbb4:	68fb      	ldr	r3, [r7, #12]
1004fbb6:	18d3      	adds	r3, r2, r3
1004fbb8:	3301      	adds	r3, #1
1004fbba:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
1004fbbc:	68fb      	ldr	r3, [r7, #12]
1004fbbe:	1d5a      	adds	r2, r3, #5
1004fbc0:	687b      	ldr	r3, [r7, #4]
1004fbc2:	685b      	ldr	r3, [r3, #4]
1004fbc4:	429a      	cmp	r2, r3
1004fbc6:	d3c4      	bcc.n	1004fb52 <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
1004fbc8:	2300      	movs	r3, #0
    }
  }
}
1004fbca:	0018      	movs	r0, r3
1004fbcc:	46bd      	mov	sp, r7
1004fbce:	b004      	add	sp, #16
1004fbd0:	bd80      	pop	{r7, pc}

1004fbd2 <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
1004fbd2:	b580      	push	{r7, lr}
1004fbd4:	b086      	sub	sp, #24
1004fbd6:	af00      	add	r7, sp, #0
1004fbd8:	60f8      	str	r0, [r7, #12]
1004fbda:	607a      	str	r2, [r7, #4]
1004fbdc:	603b      	str	r3, [r7, #0]
1004fbde:	230b      	movs	r3, #11
1004fbe0:	18fb      	adds	r3, r7, r3
1004fbe2:	1c0a      	adds	r2, r1, #0
1004fbe4:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
1004fbe6:	2020      	movs	r0, #32
1004fbe8:	183b      	adds	r3, r7, r0
1004fbea:	881b      	ldrh	r3, [r3, #0]
1004fbec:	2b00      	cmp	r3, #0
1004fbee:	d00a      	beq.n	1004fc06 <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
1004fbf0:	2110      	movs	r1, #16
1004fbf2:	187a      	adds	r2, r7, r1
1004fbf4:	183b      	adds	r3, r7, r0
1004fbf6:	881b      	ldrh	r3, [r3, #0]
1004fbf8:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
1004fbfa:	187b      	adds	r3, r7, r1
1004fbfc:	22fe      	movs	r2, #254	@ 0xfe
1004fbfe:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004fc00:	187b      	adds	r3, r7, r1
1004fc02:	617b      	str	r3, [r7, #20]
1004fc04:	e002      	b.n	1004fc0c <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fc06:	68fb      	ldr	r3, [r7, #12]
1004fc08:	685b      	ldr	r3, [r3, #4]
1004fc0a:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fc0c:	68fb      	ldr	r3, [r7, #12]
1004fc0e:	685a      	ldr	r2, [r3, #4]
1004fc10:	68fb      	ldr	r3, [r7, #12]
1004fc12:	689b      	ldr	r3, [r3, #8]
1004fc14:	429a      	cmp	r2, r3
1004fc16:	d203      	bcs.n	1004fc20 <NextRecordNoLock+0x4e>
1004fc18:	697b      	ldr	r3, [r7, #20]
1004fc1a:	781b      	ldrb	r3, [r3, #0]
1004fc1c:	2bff      	cmp	r3, #255	@ 0xff
1004fc1e:	d101      	bne.n	1004fc24 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
1004fc20:	2304      	movs	r3, #4
1004fc22:	e04b      	b.n	1004fcbc <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
1004fc24:	68fb      	ldr	r3, [r7, #12]
1004fc26:	7b1b      	ldrb	r3, [r3, #12]
1004fc28:	2b00      	cmp	r3, #0
1004fc2a:	d003      	beq.n	1004fc34 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
1004fc2c:	68fb      	ldr	r3, [r7, #12]
1004fc2e:	2200      	movs	r2, #0
1004fc30:	731a      	strb	r2, [r3, #12]
1004fc32:	e019      	b.n	1004fc68 <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004fc34:	68fb      	ldr	r3, [r7, #12]
1004fc36:	685b      	ldr	r3, [r3, #4]
1004fc38:	697a      	ldr	r2, [r7, #20]
1004fc3a:	8852      	ldrh	r2, [r2, #2]
1004fc3c:	3203      	adds	r2, #3
1004fc3e:	2103      	movs	r1, #3
1004fc40:	430a      	orrs	r2, r1
1004fc42:	189b      	adds	r3, r3, r2
1004fc44:	1c5a      	adds	r2, r3, #1
1004fc46:	68fb      	ldr	r3, [r7, #12]
1004fc48:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fc4a:	68fb      	ldr	r3, [r7, #12]
1004fc4c:	685b      	ldr	r3, [r3, #4]
1004fc4e:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fc50:	68fb      	ldr	r3, [r7, #12]
1004fc52:	685a      	ldr	r2, [r3, #4]
1004fc54:	68fb      	ldr	r3, [r7, #12]
1004fc56:	689b      	ldr	r3, [r3, #8]
1004fc58:	429a      	cmp	r2, r3
1004fc5a:	d203      	bcs.n	1004fc64 <NextRecordNoLock+0x92>
1004fc5c:	697b      	ldr	r3, [r7, #20]
1004fc5e:	781b      	ldrb	r3, [r3, #0]
1004fc60:	2bff      	cmp	r3, #255	@ 0xff
1004fc62:	d101      	bne.n	1004fc68 <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
1004fc64:	2304      	movs	r3, #4
1004fc66:	e029      	b.n	1004fcbc <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
1004fc68:	697b      	ldr	r3, [r7, #20]
1004fc6a:	781b      	ldrb	r3, [r3, #0]
1004fc6c:	2b00      	cmp	r3, #0
1004fc6e:	d023      	beq.n	1004fcb8 <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
1004fc70:	697b      	ldr	r3, [r7, #20]
1004fc72:	781b      	ldrb	r3, [r3, #0]
1004fc74:	2bfe      	cmp	r3, #254	@ 0xfe
1004fc76:	d001      	beq.n	1004fc7c <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
1004fc78:	2303      	movs	r3, #3
1004fc7a:	e01f      	b.n	1004fcbc <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
1004fc7c:	220b      	movs	r2, #11
1004fc7e:	18bb      	adds	r3, r7, r2
1004fc80:	781b      	ldrb	r3, [r3, #0]
1004fc82:	2bff      	cmp	r3, #255	@ 0xff
1004fc84:	d005      	beq.n	1004fc92 <NextRecordNoLock+0xc0>
1004fc86:	697b      	ldr	r3, [r7, #20]
1004fc88:	785b      	ldrb	r3, [r3, #1]
1004fc8a:	18ba      	adds	r2, r7, r2
1004fc8c:	7812      	ldrb	r2, [r2, #0]
1004fc8e:	429a      	cmp	r2, r3
1004fc90:	d1c8      	bne.n	1004fc24 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1004fc92:	68fb      	ldr	r3, [r7, #12]
1004fc94:	685b      	ldr	r3, [r3, #4]
1004fc96:	3304      	adds	r3, #4
1004fc98:	001a      	movs	r2, r3
1004fc9a:	687b      	ldr	r3, [r7, #4]
1004fc9c:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
1004fc9e:	697b      	ldr	r3, [r7, #20]
1004fca0:	885a      	ldrh	r2, [r3, #2]
1004fca2:	683b      	ldr	r3, [r7, #0]
1004fca4:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
1004fca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004fca8:	2b00      	cmp	r3, #0
1004fcaa:	d003      	beq.n	1004fcb4 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
1004fcac:	697b      	ldr	r3, [r7, #20]
1004fcae:	785a      	ldrb	r2, [r3, #1]
1004fcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004fcb2:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
1004fcb4:	2300      	movs	r3, #0
1004fcb6:	e001      	b.n	1004fcbc <NextRecordNoLock+0xea>
      continue;
1004fcb8:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
1004fcba:	e7b3      	b.n	1004fc24 <NextRecordNoLock+0x52>
    }
  }
}
1004fcbc:	0018      	movs	r0, r3
1004fcbe:	46bd      	mov	sp, r7
1004fcc0:	b006      	add	sp, #24
1004fcc2:	bd80      	pop	{r7, pc}

1004fcc4 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
1004fcc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1004fcc6:	b08b      	sub	sp, #44	@ 0x2c
1004fcc8:	af02      	add	r7, sp, #8
1004fcca:	60f8      	str	r0, [r7, #12]
1004fccc:	0008      	movs	r0, r1
1004fcce:	0011      	movs	r1, r2
1004fcd0:	607b      	str	r3, [r7, #4]
1004fcd2:	230b      	movs	r3, #11
1004fcd4:	18fb      	adds	r3, r7, r3
1004fcd6:	1c02      	adds	r2, r0, #0
1004fcd8:	701a      	strb	r2, [r3, #0]
1004fcda:	2208      	movs	r2, #8
1004fcdc:	0010      	movs	r0, r2
1004fcde:	18bb      	adds	r3, r7, r2
1004fce0:	1c0a      	adds	r2, r1, #0
1004fce2:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
1004fce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004fce6:	2200      	movs	r2, #0
1004fce8:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
1004fcea:	261f      	movs	r6, #31
1004fcec:	19bc      	adds	r4, r7, r6
1004fcee:	2216      	movs	r2, #22
1004fcf0:	18bd      	adds	r5, r7, r2
1004fcf2:	2218      	movs	r2, #24
1004fcf4:	18ba      	adds	r2, r7, r2
1004fcf6:	230b      	movs	r3, #11
1004fcf8:	18fb      	adds	r3, r7, r3
1004fcfa:	7819      	ldrb	r1, [r3, #0]
1004fcfc:	68fb      	ldr	r3, [r7, #12]
1004fcfe:	469c      	mov	ip, r3
1004fd00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004fd02:	9301      	str	r3, [sp, #4]
1004fd04:	2338      	movs	r3, #56	@ 0x38
1004fd06:	181b      	adds	r3, r3, r0
1004fd08:	19db      	adds	r3, r3, r7
1004fd0a:	881b      	ldrh	r3, [r3, #0]
1004fd0c:	9300      	str	r3, [sp, #0]
1004fd0e:	002b      	movs	r3, r5
1004fd10:	4660      	mov	r0, ip
1004fd12:	f7ff ff5e 	bl	1004fbd2 <NextRecordNoLock>
1004fd16:	0003      	movs	r3, r0
1004fd18:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
1004fd1a:	19bb      	adds	r3, r7, r6
1004fd1c:	781b      	ldrb	r3, [r3, #0]
1004fd1e:	2b00      	cmp	r3, #0
1004fd20:	d002      	beq.n	1004fd28 <ReadNextRecordNoLock+0x64>
  {
    return status;
1004fd22:	19bb      	adds	r3, r7, r6
1004fd24:	781b      	ldrb	r3, [r3, #0]
1004fd26:	e027      	b.n	1004fd78 <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
1004fd28:	2316      	movs	r3, #22
1004fd2a:	18fb      	adds	r3, r7, r3
1004fd2c:	881b      	ldrh	r3, [r3, #0]
1004fd2e:	2208      	movs	r2, #8
1004fd30:	18ba      	adds	r2, r7, r2
1004fd32:	8812      	ldrh	r2, [r2, #0]
1004fd34:	429a      	cmp	r2, r3
1004fd36:	d301      	bcc.n	1004fd3c <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004fd38:	2306      	movs	r3, #6
1004fd3a:	e01d      	b.n	1004fd78 <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
1004fd3c:	69ba      	ldr	r2, [r7, #24]
1004fd3e:	2408      	movs	r4, #8
1004fd40:	193b      	adds	r3, r7, r4
1004fd42:	881b      	ldrh	r3, [r3, #0]
1004fd44:	18d1      	adds	r1, r2, r3
1004fd46:	2330      	movs	r3, #48	@ 0x30
1004fd48:	2208      	movs	r2, #8
1004fd4a:	189b      	adds	r3, r3, r2
1004fd4c:	19db      	adds	r3, r3, r7
1004fd4e:	881a      	ldrh	r2, [r3, #0]
1004fd50:	2316      	movs	r3, #22
1004fd52:	18fb      	adds	r3, r7, r3
1004fd54:	881b      	ldrh	r3, [r3, #0]
1004fd56:	0018      	movs	r0, r3
1004fd58:	193b      	adds	r3, r7, r4
1004fd5a:	881b      	ldrh	r3, [r3, #0]
1004fd5c:	1ac3      	subs	r3, r0, r3
1004fd5e:	429a      	cmp	r2, r3
1004fd60:	dd00      	ble.n	1004fd64 <ReadNextRecordNoLock+0xa0>
1004fd62:	001a      	movs	r2, r3
1004fd64:	687b      	ldr	r3, [r7, #4]
1004fd66:	0018      	movs	r0, r3
1004fd68:	f018 f8e7 	bl	10067f3a <memcpy>
  *size_p = data_len;
1004fd6c:	2316      	movs	r3, #22
1004fd6e:	18fb      	adds	r3, r7, r3
1004fd70:	881a      	ldrh	r2, [r3, #0]
1004fd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004fd74:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004fd76:	2300      	movs	r3, #0
}
1004fd78:	0018      	movs	r0, r3
1004fd7a:	46bd      	mov	sp, r7
1004fd7c:	b009      	add	sp, #36	@ 0x24
1004fd7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004fd80 <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
1004fd80:	b590      	push	{r4, r7, lr}
1004fd82:	b089      	sub	sp, #36	@ 0x24
1004fd84:	af00      	add	r7, sp, #0
1004fd86:	60f8      	str	r0, [r7, #12]
1004fd88:	607a      	str	r2, [r7, #4]
1004fd8a:	200a      	movs	r0, #10
1004fd8c:	183b      	adds	r3, r7, r0
1004fd8e:	1c0a      	adds	r2, r1, #0
1004fd90:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1004fd92:	687b      	ldr	r3, [r7, #4]
1004fd94:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
1004fd96:	0001      	movs	r1, r0
1004fd98:	187b      	adds	r3, r7, r1
1004fd9a:	881b      	ldrh	r3, [r3, #0]
1004fd9c:	089b      	lsrs	r3, r3, #2
1004fd9e:	b29a      	uxth	r2, r3
1004fda0:	2016      	movs	r0, #22
1004fda2:	183b      	adds	r3, r7, r0
1004fda4:	0092      	lsls	r2, r2, #2
1004fda6:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
1004fda8:	187b      	adds	r3, r7, r1
1004fdaa:	881b      	ldrh	r3, [r3, #0]
1004fdac:	b2d9      	uxtb	r1, r3
1004fdae:	183b      	adds	r3, r7, r0
1004fdb0:	881b      	ldrh	r3, [r3, #0]
1004fdb2:	b2da      	uxtb	r2, r3
1004fdb4:	2315      	movs	r3, #21
1004fdb6:	18fb      	adds	r3, r7, r3
1004fdb8:	1a8a      	subs	r2, r1, r2
1004fdba:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
1004fdbc:	2300      	movs	r3, #0
1004fdbe:	61fb      	str	r3, [r7, #28]
1004fdc0:	e013      	b.n	1004fdea <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
1004fdc2:	69fb      	ldr	r3, [r7, #28]
1004fdc4:	69ba      	ldr	r2, [r7, #24]
1004fdc6:	18d1      	adds	r1, r2, r3
1004fdc8:	2310      	movs	r3, #16
1004fdca:	18fb      	adds	r3, r7, r3
1004fdcc:	2204      	movs	r2, #4
1004fdce:	0018      	movs	r0, r3
1004fdd0:	f018 f8b3 	bl	10067f3a <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
1004fdd4:	69fa      	ldr	r2, [r7, #28]
1004fdd6:	68fb      	ldr	r3, [r7, #12]
1004fdd8:	18d3      	adds	r3, r2, r3
1004fdda:	693a      	ldr	r2, [r7, #16]
1004fddc:	0019      	movs	r1, r3
1004fdde:	2000      	movs	r0, #0
1004fde0:	f7f8 f916 	bl	10048010 <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
1004fde4:	69fb      	ldr	r3, [r7, #28]
1004fde6:	3304      	adds	r3, #4
1004fde8:	61fb      	str	r3, [r7, #28]
1004fdea:	2416      	movs	r4, #22
1004fdec:	193b      	adds	r3, r7, r4
1004fdee:	881b      	ldrh	r3, [r3, #0]
1004fdf0:	69fa      	ldr	r2, [r7, #28]
1004fdf2:	429a      	cmp	r2, r3
1004fdf4:	dbe5      	blt.n	1004fdc2 <write_data+0x42>
  }
  word = 0xFFFFFFFF;
1004fdf6:	2301      	movs	r3, #1
1004fdf8:	425b      	negs	r3, r3
1004fdfa:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
1004fdfc:	193b      	adds	r3, r7, r4
1004fdfe:	881b      	ldrh	r3, [r3, #0]
1004fe00:	69ba      	ldr	r2, [r7, #24]
1004fe02:	18d1      	adds	r1, r2, r3
1004fe04:	2315      	movs	r3, #21
1004fe06:	18fb      	adds	r3, r7, r3
1004fe08:	781a      	ldrb	r2, [r3, #0]
1004fe0a:	2310      	movs	r3, #16
1004fe0c:	18fb      	adds	r3, r7, r3
1004fe0e:	0018      	movs	r0, r3
1004fe10:	f018 f893 	bl	10067f3a <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
1004fe14:	193b      	adds	r3, r7, r4
1004fe16:	881a      	ldrh	r2, [r3, #0]
1004fe18:	68fb      	ldr	r3, [r7, #12]
1004fe1a:	18d3      	adds	r3, r2, r3
1004fe1c:	693a      	ldr	r2, [r7, #16]
1004fe1e:	0019      	movs	r1, r3
1004fe20:	2000      	movs	r0, #0
1004fe22:	f7f8 f8f5 	bl	10048010 <HAL_FLASH_Program>
}
1004fe26:	46c0      	nop			@ (mov r8, r8)
1004fe28:	46bd      	mov	sp, r7
1004fe2a:	b009      	add	sp, #36	@ 0x24
1004fe2c:	bd90      	pop	{r4, r7, pc}

1004fe2e <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004fe2e:	b5f0      	push	{r4, r5, r6, r7, lr}
1004fe30:	b087      	sub	sp, #28
1004fe32:	af00      	add	r7, sp, #0
1004fe34:	60f8      	str	r0, [r7, #12]
1004fe36:	0008      	movs	r0, r1
1004fe38:	0011      	movs	r1, r2
1004fe3a:	607b      	str	r3, [r7, #4]
1004fe3c:	250b      	movs	r5, #11
1004fe3e:	197b      	adds	r3, r7, r5
1004fe40:	1c02      	adds	r2, r0, #0
1004fe42:	701a      	strb	r2, [r3, #0]
1004fe44:	2408      	movs	r4, #8
1004fe46:	193b      	adds	r3, r7, r4
1004fe48:	1c0a      	adds	r2, r1, #0
1004fe4a:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
1004fe4c:	2310      	movs	r3, #16
1004fe4e:	18fb      	adds	r3, r7, r3
1004fe50:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
1004fe52:	193b      	adds	r3, r7, r4
1004fe54:	881b      	ldrh	r3, [r3, #0]
1004fe56:	3b01      	subs	r3, #1
1004fe58:	b29b      	uxth	r3, r3
1004fe5a:	b21b      	sxth	r3, r3
1004fe5c:	2203      	movs	r2, #3
1004fe5e:	4313      	orrs	r3, r2
1004fe60:	b21b      	sxth	r3, r3
1004fe62:	b29a      	uxth	r2, r3
1004fe64:	193b      	adds	r3, r7, r4
1004fe66:	3201      	adds	r2, #1
1004fe68:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
1004fe6a:	697b      	ldr	r3, [r7, #20]
1004fe6c:	22fe      	movs	r2, #254	@ 0xfe
1004fe6e:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
1004fe70:	697b      	ldr	r3, [r7, #20]
1004fe72:	197a      	adds	r2, r7, r5
1004fe74:	7812      	ldrb	r2, [r2, #0]
1004fe76:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
1004fe78:	193a      	adds	r2, r7, r4
1004fe7a:	2520      	movs	r5, #32
1004fe7c:	2608      	movs	r6, #8
1004fe7e:	19ab      	adds	r3, r5, r6
1004fe80:	2108      	movs	r1, #8
1004fe82:	468c      	mov	ip, r1
1004fe84:	44bc      	add	ip, r7
1004fe86:	4463      	add	r3, ip
1004fe88:	8812      	ldrh	r2, [r2, #0]
1004fe8a:	881b      	ldrh	r3, [r3, #0]
1004fe8c:	18d3      	adds	r3, r2, r3
1004fe8e:	b29a      	uxth	r2, r3
1004fe90:	697b      	ldr	r3, [r7, #20]
1004fe92:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
1004fe94:	693a      	ldr	r2, [r7, #16]
1004fe96:	68fb      	ldr	r3, [r7, #12]
1004fe98:	0019      	movs	r1, r3
1004fe9a:	2000      	movs	r0, #0
1004fe9c:	f7f8 f8b8 	bl	10048010 <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
1004fea0:	68fb      	ldr	r3, [r7, #12]
1004fea2:	1d18      	adds	r0, r3, #4
1004fea4:	687a      	ldr	r2, [r7, #4]
1004fea6:	193b      	adds	r3, r7, r4
1004fea8:	881b      	ldrh	r3, [r3, #0]
1004feaa:	0019      	movs	r1, r3
1004feac:	f7ff ff68 	bl	1004fd80 <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
1004feb0:	193b      	adds	r3, r7, r4
1004feb2:	881a      	ldrh	r2, [r3, #0]
1004feb4:	68fb      	ldr	r3, [r7, #12]
1004feb6:	18d3      	adds	r3, r2, r3
1004feb8:	1d18      	adds	r0, r3, #4
1004feba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004febc:	19ab      	adds	r3, r5, r6
1004febe:	2108      	movs	r1, #8
1004fec0:	468c      	mov	ip, r1
1004fec2:	44bc      	add	ip, r7
1004fec4:	4463      	add	r3, ip
1004fec6:	881b      	ldrh	r3, [r3, #0]
1004fec8:	0019      	movs	r1, r3
1004feca:	f7ff ff59 	bl	1004fd80 <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004fece:	2300      	movs	r3, #0
}
1004fed0:	0018      	movs	r0, r3
1004fed2:	46bd      	mov	sp, r7
1004fed4:	b007      	add	sp, #28
1004fed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004fed8 <NVMDB_CompareCurrentRecord>:

int NVMDB_CompareCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, const uint8_t *data_p, NVMDB_RecordSizeType size)
{
1004fed8:	b580      	push	{r7, lr}
1004feda:	b086      	sub	sp, #24
1004fedc:	af00      	add	r7, sp, #0
1004fede:	60f8      	str	r0, [r7, #12]
1004fee0:	0008      	movs	r0, r1
1004fee2:	607a      	str	r2, [r7, #4]
1004fee4:	0019      	movs	r1, r3
1004fee6:	230a      	movs	r3, #10
1004fee8:	18fb      	adds	r3, r7, r3
1004feea:	1c02      	adds	r2, r0, #0
1004feec:	801a      	strh	r2, [r3, #0]
1004feee:	2308      	movs	r3, #8
1004fef0:	18fb      	adds	r3, r7, r3
1004fef2:	1c0a      	adds	r2, r1, #0
1004fef4:	801a      	strh	r2, [r3, #0]
    }
  }

#endif

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fef6:	68fb      	ldr	r3, [r7, #12]
1004fef8:	685b      	ldr	r3, [r3, #4]
1004fefa:	617b      	str	r3, [r7, #20]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fefc:	68fb      	ldr	r3, [r7, #12]
1004fefe:	685a      	ldr	r2, [r3, #4]
1004ff00:	68fb      	ldr	r3, [r7, #12]
1004ff02:	689b      	ldr	r3, [r3, #8]
1004ff04:	429a      	cmp	r2, r3
1004ff06:	d203      	bcs.n	1004ff10 <NVMDB_CompareCurrentRecord+0x38>
1004ff08:	697b      	ldr	r3, [r7, #20]
1004ff0a:	781b      	ldrb	r3, [r3, #0]
1004ff0c:	2bff      	cmp	r3, #255	@ 0xff
1004ff0e:	d101      	bne.n	1004ff14 <NVMDB_CompareCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_END_OF_DB;
1004ff10:	2304      	movs	r3, #4
1004ff12:	e02a      	b.n	1004ff6a <NVMDB_CompareCurrentRecord+0x92>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004ff14:	68fb      	ldr	r3, [r7, #12]
1004ff16:	7b1b      	ldrb	r3, [r3, #12]
1004ff18:	2b00      	cmp	r3, #0
1004ff1a:	d103      	bne.n	1004ff24 <NVMDB_CompareCurrentRecord+0x4c>
1004ff1c:	697b      	ldr	r3, [r7, #20]
1004ff1e:	781b      	ldrb	r3, [r3, #0]
1004ff20:	2bfe      	cmp	r3, #254	@ 0xfe
1004ff22:	d001      	beq.n	1004ff28 <NVMDB_CompareCurrentRecord+0x50>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004ff24:	2305      	movs	r3, #5
1004ff26:	e020      	b.n	1004ff6a <NVMDB_CompareCurrentRecord+0x92>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004ff28:	697b      	ldr	r3, [r7, #20]
1004ff2a:	885b      	ldrh	r3, [r3, #2]
1004ff2c:	220a      	movs	r2, #10
1004ff2e:	18ba      	adds	r2, r7, r2
1004ff30:	8812      	ldrh	r2, [r2, #0]
1004ff32:	429a      	cmp	r2, r3
1004ff34:	d301      	bcc.n	1004ff3a <NVMDB_CompareCurrentRecord+0x62>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004ff36:	2306      	movs	r3, #6
1004ff38:	e017      	b.n	1004ff6a <NVMDB_CompareCurrentRecord+0x92>
  }

  handle_p->first_read = FALSE;
1004ff3a:	68fb      	ldr	r3, [r7, #12]
1004ff3c:	2200      	movs	r2, #0
1004ff3e:	731a      	strb	r2, [r3, #12]

  if(memcmp(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, size) == 0)
1004ff40:	230a      	movs	r3, #10
1004ff42:	18fb      	adds	r3, r7, r3
1004ff44:	881a      	ldrh	r2, [r3, #0]
1004ff46:	68fb      	ldr	r3, [r7, #12]
1004ff48:	685b      	ldr	r3, [r3, #4]
1004ff4a:	18d3      	adds	r3, r2, r3
1004ff4c:	3304      	adds	r3, #4
1004ff4e:	0019      	movs	r1, r3
1004ff50:	2308      	movs	r3, #8
1004ff52:	18fb      	adds	r3, r7, r3
1004ff54:	881a      	ldrh	r2, [r3, #0]
1004ff56:	687b      	ldr	r3, [r7, #4]
1004ff58:	0018      	movs	r0, r3
1004ff5a:	f017 ff6b 	bl	10067e34 <memcmp>
1004ff5e:	1e03      	subs	r3, r0, #0
1004ff60:	d101      	bne.n	1004ff66 <NVMDB_CompareCurrentRecord+0x8e>
  {
    return NVMDB_STATUS_OK;
1004ff62:	2300      	movs	r3, #0
1004ff64:	e001      	b.n	1004ff6a <NVMDB_CompareCurrentRecord+0x92>
  }
  else
  {
    return -1;
1004ff66:	2301      	movs	r3, #1
1004ff68:	425b      	negs	r3, r3
  }
}
1004ff6a:	0018      	movs	r0, r3
1004ff6c:	46bd      	mov	sp, r7
1004ff6e:	b006      	add	sp, #24
1004ff70:	bd80      	pop	{r7, pc}

1004ff72 <ReadCurrentRecordNoLock>:

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
1004ff72:	b590      	push	{r4, r7, lr}
1004ff74:	b087      	sub	sp, #28
1004ff76:	af00      	add	r7, sp, #0
1004ff78:	60f8      	str	r0, [r7, #12]
1004ff7a:	0008      	movs	r0, r1
1004ff7c:	607a      	str	r2, [r7, #4]
1004ff7e:	0019      	movs	r1, r3
1004ff80:	230a      	movs	r3, #10
1004ff82:	18fb      	adds	r3, r7, r3
1004ff84:	1c02      	adds	r2, r0, #0
1004ff86:	801a      	strh	r2, [r3, #0]
1004ff88:	2308      	movs	r3, #8
1004ff8a:	0018      	movs	r0, r3
1004ff8c:	18fb      	adds	r3, r7, r3
1004ff8e:	1c0a      	adds	r2, r1, #0
1004ff90:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
1004ff92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004ff94:	2200      	movs	r2, #0
1004ff96:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
1004ff98:	2224      	movs	r2, #36	@ 0x24
1004ff9a:	1813      	adds	r3, r2, r0
1004ff9c:	19db      	adds	r3, r3, r7
1004ff9e:	881b      	ldrh	r3, [r3, #0]
1004ffa0:	2b00      	cmp	r3, #0
1004ffa2:	d00b      	beq.n	1004ffbc <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
1004ffa4:	2110      	movs	r1, #16
1004ffa6:	187b      	adds	r3, r7, r1
1004ffa8:	1812      	adds	r2, r2, r0
1004ffaa:	19d2      	adds	r2, r2, r7
1004ffac:	8812      	ldrh	r2, [r2, #0]
1004ffae:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
1004ffb0:	187b      	adds	r3, r7, r1
1004ffb2:	22fe      	movs	r2, #254	@ 0xfe
1004ffb4:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004ffb6:	187b      	adds	r3, r7, r1
1004ffb8:	617b      	str	r3, [r7, #20]
1004ffba:	e002      	b.n	1004ffc2 <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004ffbc:	68fb      	ldr	r3, [r7, #12]
1004ffbe:	685b      	ldr	r3, [r3, #4]
1004ffc0:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004ffc2:	68fb      	ldr	r3, [r7, #12]
1004ffc4:	685a      	ldr	r2, [r3, #4]
1004ffc6:	68fb      	ldr	r3, [r7, #12]
1004ffc8:	689b      	ldr	r3, [r3, #8]
1004ffca:	429a      	cmp	r2, r3
1004ffcc:	d203      	bcs.n	1004ffd6 <ReadCurrentRecordNoLock+0x64>
1004ffce:	697b      	ldr	r3, [r7, #20]
1004ffd0:	781b      	ldrb	r3, [r3, #0]
1004ffd2:	2bff      	cmp	r3, #255	@ 0xff
1004ffd4:	d101      	bne.n	1004ffda <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
1004ffd6:	2304      	movs	r3, #4
1004ffd8:	e033      	b.n	10050042 <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004ffda:	68fb      	ldr	r3, [r7, #12]
1004ffdc:	7b1b      	ldrb	r3, [r3, #12]
1004ffde:	2b00      	cmp	r3, #0
1004ffe0:	d103      	bne.n	1004ffea <ReadCurrentRecordNoLock+0x78>
1004ffe2:	697b      	ldr	r3, [r7, #20]
1004ffe4:	781b      	ldrb	r3, [r3, #0]
1004ffe6:	2bfe      	cmp	r3, #254	@ 0xfe
1004ffe8:	d001      	beq.n	1004ffee <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004ffea:	2305      	movs	r3, #5
1004ffec:	e029      	b.n	10050042 <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004ffee:	697b      	ldr	r3, [r7, #20]
1004fff0:	885b      	ldrh	r3, [r3, #2]
1004fff2:	220a      	movs	r2, #10
1004fff4:	18ba      	adds	r2, r7, r2
1004fff6:	8812      	ldrh	r2, [r2, #0]
1004fff8:	429a      	cmp	r2, r3
1004fffa:	d301      	bcc.n	10050000 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004fffc:	2306      	movs	r3, #6
1004fffe:	e020      	b.n	10050042 <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
10050000:	68fb      	ldr	r3, [r7, #12]
10050002:	2200      	movs	r2, #0
10050004:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
10050006:	240a      	movs	r4, #10
10050008:	193b      	adds	r3, r7, r4
1005000a:	881a      	ldrh	r2, [r3, #0]
1005000c:	68fb      	ldr	r3, [r7, #12]
1005000e:	685b      	ldr	r3, [r3, #4]
10050010:	18d3      	adds	r3, r2, r3
10050012:	3304      	adds	r3, #4
10050014:	0018      	movs	r0, r3
10050016:	2308      	movs	r3, #8
10050018:	18fb      	adds	r3, r7, r3
1005001a:	881a      	ldrh	r2, [r3, #0]
1005001c:	697b      	ldr	r3, [r7, #20]
1005001e:	885b      	ldrh	r3, [r3, #2]
10050020:	0019      	movs	r1, r3
10050022:	193b      	adds	r3, r7, r4
10050024:	881b      	ldrh	r3, [r3, #0]
10050026:	1acb      	subs	r3, r1, r3
10050028:	429a      	cmp	r2, r3
1005002a:	dd00      	ble.n	1005002e <ReadCurrentRecordNoLock+0xbc>
1005002c:	001a      	movs	r2, r3
1005002e:	687b      	ldr	r3, [r7, #4]
10050030:	0001      	movs	r1, r0
10050032:	0018      	movs	r0, r3
10050034:	f017 ff81 	bl	10067f3a <memcpy>
  *size_p = record_p->header.length;
10050038:	697b      	ldr	r3, [r7, #20]
1005003a:	885a      	ldrh	r2, [r3, #2]
1005003c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1005003e:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10050040:	2300      	movs	r3, #0
}
10050042:	0018      	movs	r0, r3
10050044:	46bd      	mov	sp, r7
10050046:	b007      	add	sp, #28
10050048:	bd90      	pop	{r4, r7, pc}
	...

1005004c <InvalidateRecord>:

static NVMDB_status_t InvalidateRecord(uint32_t address)
{
1005004c:	b580      	push	{r7, lr}
1005004e:	b084      	sub	sp, #16
10050050:	af00      	add	r7, sp, #0
10050052:	6078      	str	r0, [r7, #4]
  uint32_t word = 0xFFFFFF00;
10050054:	4b06      	ldr	r3, [pc, #24]	@ (10050070 <InvalidateRecord+0x24>)
10050056:	60fb      	str	r3, [r7, #12]
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif
  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_WRITE(address, word);
10050058:	68fa      	ldr	r2, [r7, #12]
1005005a:	687b      	ldr	r3, [r7, #4]
1005005c:	0019      	movs	r1, r3
1005005e:	2000      	movs	r0, #0
10050060:	f7f7 ffd6 	bl	10048010 <HAL_FLASH_Program>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
10050064:	2300      	movs	r3, #0
}
10050066:	0018      	movs	r0, r3
10050068:	46bd      	mov	sp, r7
1005006a:	b004      	add	sp, #16
1005006c:	bd80      	pop	{r7, pc}
1005006e:	46c0      	nop			@ (mov r8, r8)
10050070:	ffffff00 	.word	0xffffff00

10050074 <NVMDB_DeleteRecordNoCache>:

static NVMDB_status_t NVMDB_DeleteRecordNoCache(const NVMDB_HandleType *handle_p)
{
10050074:	b5b0      	push	{r4, r5, r7, lr}
10050076:	b084      	sub	sp, #16
10050078:	af00      	add	r7, sp, #0
1005007a:	6078      	str	r0, [r7, #4]
  NVMDB_RecordType *record_p;
  NVMDB_status_t status;

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1005007c:	687b      	ldr	r3, [r7, #4]
1005007e:	685b      	ldr	r3, [r3, #4]
10050080:	60fb      	str	r3, [r7, #12]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
10050082:	687b      	ldr	r3, [r7, #4]
10050084:	685a      	ldr	r2, [r3, #4]
10050086:	687b      	ldr	r3, [r7, #4]
10050088:	689b      	ldr	r3, [r3, #8]
1005008a:	429a      	cmp	r2, r3
1005008c:	d203      	bcs.n	10050096 <NVMDB_DeleteRecordNoCache+0x22>
1005008e:	68fb      	ldr	r3, [r7, #12]
10050090:	781b      	ldrb	r3, [r3, #0]
10050092:	2bff      	cmp	r3, #255	@ 0xff
10050094:	d101      	bne.n	1005009a <NVMDB_DeleteRecordNoCache+0x26>
  {
    return NVMDB_STATUS_END_OF_DB;
10050096:	2304      	movs	r3, #4
10050098:	e041      	b.n	1005011e <NVMDB_DeleteRecordNoCache+0xaa>
  }
  if(record_p->header.valid_flag == VALID_RECORD)
1005009a:	68fb      	ldr	r3, [r7, #12]
1005009c:	781b      	ldrb	r3, [r3, #0]
1005009e:	2bfe      	cmp	r3, #254	@ 0xfe
100500a0:	d13c      	bne.n	1005011c <NVMDB_DeleteRecordNoCache+0xa8>
  {

    status = InvalidateRecord((uint32_t)record_p);
100500a2:	68fb      	ldr	r3, [r7, #12]
100500a4:	250b      	movs	r5, #11
100500a6:	197c      	adds	r4, r7, r5
100500a8:	0018      	movs	r0, r3
100500aa:	f7ff ffcf 	bl	1005004c <InvalidateRecord>
100500ae:	0003      	movs	r3, r0
100500b0:	7023      	strb	r3, [r4, #0]
    if(status)
100500b2:	197b      	adds	r3, r7, r5
100500b4:	781b      	ldrb	r3, [r3, #0]
100500b6:	2b00      	cmp	r3, #0
100500b8:	d002      	beq.n	100500c0 <NVMDB_DeleteRecordNoCache+0x4c>
    {
      return status;
100500ba:	197b      	adds	r3, r7, r5
100500bc:	781b      	ldrb	r3, [r3, #0]
100500be:	e02e      	b.n	1005011e <NVMDB_DeleteRecordNoCache+0xaa>
    }

    DBInfo[handle_p->id].valid_records--;
100500c0:	687b      	ldr	r3, [r7, #4]
100500c2:	781b      	ldrb	r3, [r3, #0]
100500c4:	001a      	movs	r2, r3
100500c6:	4918      	ldr	r1, [pc, #96]	@ (10050128 <NVMDB_DeleteRecordNoCache+0xb4>)
100500c8:	0013      	movs	r3, r2
100500ca:	009b      	lsls	r3, r3, #2
100500cc:	189b      	adds	r3, r3, r2
100500ce:	009b      	lsls	r3, r3, #2
100500d0:	18cb      	adds	r3, r1, r3
100500d2:	3308      	adds	r3, #8
100500d4:	881b      	ldrh	r3, [r3, #0]
100500d6:	3b01      	subs	r3, #1
100500d8:	b298      	uxth	r0, r3
100500da:	4913      	ldr	r1, [pc, #76]	@ (10050128 <NVMDB_DeleteRecordNoCache+0xb4>)
100500dc:	0013      	movs	r3, r2
100500de:	009b      	lsls	r3, r3, #2
100500e0:	189b      	adds	r3, r3, r2
100500e2:	009b      	lsls	r3, r3, #2
100500e4:	18cb      	adds	r3, r1, r3
100500e6:	3308      	adds	r3, #8
100500e8:	1c02      	adds	r2, r0, #0
100500ea:	801a      	strh	r2, [r3, #0]
    DBInfo[handle_p->id].invalid_records++;
100500ec:	687b      	ldr	r3, [r7, #4]
100500ee:	781b      	ldrb	r3, [r3, #0]
100500f0:	001a      	movs	r2, r3
100500f2:	490d      	ldr	r1, [pc, #52]	@ (10050128 <NVMDB_DeleteRecordNoCache+0xb4>)
100500f4:	0013      	movs	r3, r2
100500f6:	009b      	lsls	r3, r3, #2
100500f8:	189b      	adds	r3, r3, r2
100500fa:	009b      	lsls	r3, r3, #2
100500fc:	18cb      	adds	r3, r1, r3
100500fe:	330a      	adds	r3, #10
10050100:	881b      	ldrh	r3, [r3, #0]
10050102:	3301      	adds	r3, #1
10050104:	b298      	uxth	r0, r3
10050106:	4908      	ldr	r1, [pc, #32]	@ (10050128 <NVMDB_DeleteRecordNoCache+0xb4>)
10050108:	0013      	movs	r3, r2
1005010a:	009b      	lsls	r3, r3, #2
1005010c:	189b      	adds	r3, r3, r2
1005010e:	009b      	lsls	r3, r3, #2
10050110:	18cb      	adds	r3, r1, r3
10050112:	330a      	adds	r3, #10
10050114:	1c02      	adds	r2, r0, #0
10050116:	801a      	strh	r2, [r3, #0]

    return NVMDB_STATUS_OK;
10050118:	2300      	movs	r3, #0
1005011a:	e000      	b.n	1005011e <NVMDB_DeleteRecordNoCache+0xaa>
  }
  else
  {
    return NVMDB_STATUS_INVALID_RECORD;
1005011c:	2305      	movs	r3, #5
  }
}
1005011e:	0018      	movs	r0, r3
10050120:	46bd      	mov	sp, r7
10050122:	b004      	add	sp, #16
10050124:	bdb0      	pop	{r4, r5, r7, pc}
10050126:	46c0      	nop			@ (mov r8, r8)
10050128:	200022ac 	.word	0x200022ac

1005012c <ErasePage>:

static void ErasePage(uint32_t address, uint8_t num_pages)
{
1005012c:	b580      	push	{r7, lr}
1005012e:	b088      	sub	sp, #32
10050130:	af00      	add	r7, sp, #0
10050132:	6078      	str	r0, [r7, #4]
10050134:	000a      	movs	r2, r1
10050136:	1cfb      	adds	r3, r7, #3
10050138:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1005013a:	687b      	ldr	r3, [r7, #4]
1005013c:	4a0d      	ldr	r2, [pc, #52]	@ (10050174 <ErasePage+0x48>)
1005013e:	4694      	mov	ip, r2
10050140:	4463      	add	r3, ip
10050142:	0adb      	lsrs	r3, r3, #11
10050144:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
10050146:	2110      	movs	r1, #16
10050148:	187b      	adds	r3, r7, r1
1005014a:	2200      	movs	r2, #0
1005014c:	601a      	str	r2, [r3, #0]
1005014e:	69fa      	ldr	r2, [r7, #28]
10050150:	187b      	adds	r3, r7, r1
10050152:	605a      	str	r2, [r3, #4]
10050154:	1cfb      	adds	r3, r7, #3
10050156:	781a      	ldrb	r2, [r3, #0]
10050158:	187b      	adds	r3, r7, r1
1005015a:	609a      	str	r2, [r3, #8]
1005015c:	230c      	movs	r3, #12
1005015e:	18fa      	adds	r2, r7, r3
10050160:	187b      	adds	r3, r7, r1
10050162:	0011      	movs	r1, r2
10050164:	0018      	movs	r0, r3
10050166:	f7f8 f82d 	bl	100481c4 <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
1005016a:	46c0      	nop			@ (mov r8, r8)
1005016c:	46bd      	mov	sp, r7
1005016e:	b008      	add	sp, #32
10050170:	bd80      	pop	{r7, pc}
10050172:	46c0      	nop			@ (mov r8, r8)
10050174:	effc0000 	.word	0xeffc0000

10050178 <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
10050178:	b580      	push	{r7, lr}
1005017a:	b086      	sub	sp, #24
1005017c:	af00      	add	r7, sp, #0
1005017e:	60f8      	str	r0, [r7, #12]
10050180:	60b9      	str	r1, [r7, #8]
10050182:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
10050184:	687b      	ldr	r3, [r7, #4]
10050186:	055b      	lsls	r3, r3, #21
10050188:	0d5b      	lsrs	r3, r3, #21
1005018a:	d107      	bne.n	1005019c <WriteBufferToFlash+0x24>
1005018c:	68fb      	ldr	r3, [r7, #12]
1005018e:	687a      	ldr	r2, [r7, #4]
10050190:	68b9      	ldr	r1, [r7, #8]
10050192:	0018      	movs	r0, r3
10050194:	f017 fe4e 	bl	10067e34 <memcmp>
10050198:	1e03      	subs	r3, r0, #0
1005019a:	d026      	beq.n	100501ea <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
1005019c:	687b      	ldr	r3, [r7, #4]
1005019e:	3b01      	subs	r3, #1
100501a0:	4a14      	ldr	r2, [pc, #80]	@ (100501f4 <WriteBufferToFlash+0x7c>)
100501a2:	4313      	orrs	r3, r2
100501a4:	3301      	adds	r3, #1
100501a6:	0adb      	lsrs	r3, r3, #11
100501a8:	b2da      	uxtb	r2, r3
100501aa:	68fb      	ldr	r3, [r7, #12]
100501ac:	0011      	movs	r1, r2
100501ae:	0018      	movs	r0, r3
100501b0:	f7ff ffbc 	bl	1005012c <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
100501b4:	2300      	movs	r3, #0
100501b6:	617b      	str	r3, [r7, #20]
100501b8:	e012      	b.n	100501e0 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
100501ba:	697a      	ldr	r2, [r7, #20]
100501bc:	68fb      	ldr	r3, [r7, #12]
100501be:	18d1      	adds	r1, r2, r3
100501c0:	697b      	ldr	r3, [r7, #20]
100501c2:	2b00      	cmp	r3, #0
100501c4:	da00      	bge.n	100501c8 <WriteBufferToFlash+0x50>
100501c6:	3303      	adds	r3, #3
100501c8:	109b      	asrs	r3, r3, #2
100501ca:	009b      	lsls	r3, r3, #2
100501cc:	68ba      	ldr	r2, [r7, #8]
100501ce:	18d3      	adds	r3, r2, r3
100501d0:	681b      	ldr	r3, [r3, #0]
100501d2:	001a      	movs	r2, r3
100501d4:	2000      	movs	r0, #0
100501d6:	f7f7 ff1b 	bl	10048010 <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
100501da:	697b      	ldr	r3, [r7, #20]
100501dc:	3304      	adds	r3, #4
100501de:	617b      	str	r3, [r7, #20]
100501e0:	697b      	ldr	r3, [r7, #20]
100501e2:	687a      	ldr	r2, [r7, #4]
100501e4:	429a      	cmp	r2, r3
100501e6:	d8e8      	bhi.n	100501ba <WriteBufferToFlash+0x42>
100501e8:	e000      	b.n	100501ec <WriteBufferToFlash+0x74>
    return;
100501ea:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
100501ec:	46bd      	mov	sp, r7
100501ee:	b006      	add	sp, #24
100501f0:	bd80      	pop	{r7, pc}
100501f2:	46c0      	nop			@ (mov r8, r8)
100501f4:	000007ff 	.word	0x000007ff

100501f8 <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
100501f8:	b580      	push	{r7, lr}
100501fa:	b082      	sub	sp, #8
100501fc:	af00      	add	r7, sp, #0
100501fe:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
10050200:	687b      	ldr	r3, [r7, #4]
10050202:	2201      	movs	r2, #1
10050204:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
10050206:	687b      	ldr	r3, [r7, #4]
10050208:	2200      	movs	r2, #0
1005020a:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
1005020c:	687b      	ldr	r3, [r7, #4]
1005020e:	2200      	movs	r2, #0
10050210:	809a      	strh	r2, [r3, #4]
}
10050212:	46c0      	nop			@ (mov r8, r8)
10050214:	46bd      	mov	sp, r7
10050216:	b002      	add	sp, #8
10050218:	bd80      	pop	{r7, pc}

1005021a <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
1005021a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005021c:	b08d      	sub	sp, #52	@ 0x34
1005021e:	af04      	add	r7, sp, #16
10050220:	60f8      	str	r0, [r7, #12]
10050222:	60b9      	str	r1, [r7, #8]
10050224:	603b      	str	r3, [r7, #0]
10050226:	1dbb      	adds	r3, r7, #6
10050228:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
1005022a:	231e      	movs	r3, #30
1005022c:	18fb      	adds	r3, r7, r3
1005022e:	2200      	movs	r2, #0
10050230:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
10050232:	1dbb      	adds	r3, r7, #6
10050234:	881a      	ldrh	r2, [r3, #0]
10050236:	68bb      	ldr	r3, [r7, #8]
10050238:	21ff      	movs	r1, #255	@ 0xff
1005023a:	0018      	movs	r0, r3
1005023c:	f017 fe08 	bl	10067e50 <memset>

  header.valid_flag = VALID_RECORD;
10050240:	2310      	movs	r3, #16
10050242:	18fb      	adds	r3, r7, r3
10050244:	22fe      	movs	r2, #254	@ 0xfe
10050246:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10050248:	1dba      	adds	r2, r7, #6
1005024a:	251e      	movs	r5, #30
1005024c:	197b      	adds	r3, r7, r5
1005024e:	8812      	ldrh	r2, [r2, #0]
10050250:	881b      	ldrh	r3, [r3, #0]
10050252:	1ad3      	subs	r3, r2, r3
10050254:	b29a      	uxth	r2, r3
10050256:	231c      	movs	r3, #28
10050258:	18fb      	adds	r3, r7, r3
1005025a:	3a04      	subs	r2, #4
1005025c:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
1005025e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050260:	781b      	ldrb	r3, [r3, #0]
10050262:	2b00      	cmp	r3, #0
10050264:	d04e      	beq.n	10050304 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
10050266:	197b      	adds	r3, r7, r5
10050268:	881b      	ldrh	r3, [r3, #0]
1005026a:	3304      	adds	r3, #4
1005026c:	68ba      	ldr	r2, [r7, #8]
1005026e:	18d1      	adds	r1, r2, r3
10050270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050272:	889b      	ldrh	r3, [r3, #4]
10050274:	261b      	movs	r6, #27
10050276:	19bc      	adds	r4, r7, r6
10050278:	68f8      	ldr	r0, [r7, #12]
1005027a:	2210      	movs	r2, #16
1005027c:	18ba      	adds	r2, r7, r2
1005027e:	3201      	adds	r2, #1
10050280:	9203      	str	r2, [sp, #12]
10050282:	9302      	str	r3, [sp, #8]
10050284:	2216      	movs	r2, #22
10050286:	18bb      	adds	r3, r7, r2
10050288:	9301      	str	r3, [sp, #4]
1005028a:	231c      	movs	r3, #28
1005028c:	18fb      	adds	r3, r7, r3
1005028e:	881b      	ldrh	r3, [r3, #0]
10050290:	9300      	str	r3, [sp, #0]
10050292:	000b      	movs	r3, r1
10050294:	2200      	movs	r2, #0
10050296:	21ff      	movs	r1, #255	@ 0xff
10050298:	f7ff fd14 	bl	1004fcc4 <ReadNextRecordNoLock>
1005029c:	0003      	movs	r3, r0
1005029e:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
100502a0:	2216      	movs	r2, #22
100502a2:	18bb      	adds	r3, r7, r2
100502a4:	881a      	ldrh	r2, [r3, #0]
100502a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100502a8:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
100502aa:	19bb      	adds	r3, r7, r6
100502ac:	781b      	ldrb	r3, [r3, #0]
100502ae:	2b00      	cmp	r3, #0
100502b0:	d006      	beq.n	100502c0 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
100502b2:	683b      	ldr	r3, [r7, #0]
100502b4:	197a      	adds	r2, r7, r5
100502b6:	8812      	ldrh	r2, [r2, #0]
100502b8:	801a      	strh	r2, [r3, #0]
        return status;
100502ba:	19bb      	adds	r3, r7, r6
100502bc:	781b      	ldrb	r3, [r3, #0]
100502be:	e0a1      	b.n	10050404 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
100502c0:	2316      	movs	r3, #22
100502c2:	18fb      	adds	r3, r7, r3
100502c4:	881a      	ldrh	r2, [r3, #0]
100502c6:	2110      	movs	r1, #16
100502c8:	187b      	adds	r3, r7, r1
100502ca:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
100502cc:	251e      	movs	r5, #30
100502ce:	197b      	adds	r3, r7, r5
100502d0:	881b      	ldrh	r3, [r3, #0]
100502d2:	68ba      	ldr	r2, [r7, #8]
100502d4:	18d3      	adds	r3, r2, r3
100502d6:	000c      	movs	r4, r1
100502d8:	1879      	adds	r1, r7, r1
100502da:	2204      	movs	r2, #4
100502dc:	0018      	movs	r0, r3
100502de:	f017 fe2c 	bl	10067f3a <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
100502e2:	193b      	adds	r3, r7, r4
100502e4:	885b      	ldrh	r3, [r3, #2]
100502e6:	3303      	adds	r3, #3
100502e8:	b29b      	uxth	r3, r3
100502ea:	b21b      	sxth	r3, r3
100502ec:	2203      	movs	r2, #3
100502ee:	4313      	orrs	r3, r2
100502f0:	b21b      	sxth	r3, r3
100502f2:	b29a      	uxth	r2, r3
100502f4:	197b      	adds	r3, r7, r5
100502f6:	881b      	ldrh	r3, [r3, #0]
100502f8:	18d3      	adds	r3, r2, r3
100502fa:	b29a      	uxth	r2, r3
100502fc:	197b      	adds	r3, r7, r5
100502fe:	3201      	adds	r2, #1
10050300:	801a      	strh	r2, [r3, #0]
10050302:	e031      	b.n	10050368 <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
10050304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050306:	8859      	ldrh	r1, [r3, #2]
10050308:	231e      	movs	r3, #30
1005030a:	18fb      	adds	r3, r7, r3
1005030c:	881b      	ldrh	r3, [r3, #0]
1005030e:	68ba      	ldr	r2, [r7, #8]
10050310:	18d5      	adds	r5, r2, r3
10050312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050314:	889b      	ldrh	r3, [r3, #4]
10050316:	261b      	movs	r6, #27
10050318:	19bc      	adds	r4, r7, r6
1005031a:	221c      	movs	r2, #28
1005031c:	18ba      	adds	r2, r7, r2
1005031e:	8812      	ldrh	r2, [r2, #0]
10050320:	68f8      	ldr	r0, [r7, #12]
10050322:	9301      	str	r3, [sp, #4]
10050324:	2316      	movs	r3, #22
10050326:	18fb      	adds	r3, r7, r3
10050328:	9300      	str	r3, [sp, #0]
1005032a:	0013      	movs	r3, r2
1005032c:	002a      	movs	r2, r5
1005032e:	f7ff fe20 	bl	1004ff72 <ReadCurrentRecordNoLock>
10050332:	0003      	movs	r3, r0
10050334:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
10050336:	19bb      	adds	r3, r7, r6
10050338:	781b      	ldrb	r3, [r3, #0]
1005033a:	2b00      	cmp	r3, #0
1005033c:	d002      	beq.n	10050344 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
1005033e:	19bb      	adds	r3, r7, r6
10050340:	781b      	ldrb	r3, [r3, #0]
10050342:	e05f      	b.n	10050404 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
10050344:	2316      	movs	r3, #22
10050346:	18fb      	adds	r3, r7, r3
10050348:	881a      	ldrh	r2, [r3, #0]
1005034a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005034c:	885b      	ldrh	r3, [r3, #2]
1005034e:	1ad3      	subs	r3, r2, r3
10050350:	b29b      	uxth	r3, r3
10050352:	3b01      	subs	r3, #1
10050354:	b29b      	uxth	r3, r3
10050356:	b21b      	sxth	r3, r3
10050358:	2203      	movs	r2, #3
1005035a:	4313      	orrs	r3, r2
1005035c:	b21b      	sxth	r3, r3
1005035e:	b29a      	uxth	r2, r3
10050360:	231e      	movs	r3, #30
10050362:	18fb      	adds	r3, r7, r3
10050364:	3201      	adds	r2, #1
10050366:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
10050368:	2316      	movs	r3, #22
1005036a:	18fb      	adds	r3, r7, r3
1005036c:	881a      	ldrh	r2, [r3, #0]
1005036e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050370:	885b      	ldrh	r3, [r3, #2]
10050372:	1ad3      	subs	r3, r2, r3
10050374:	b29b      	uxth	r3, r3
10050376:	3b01      	subs	r3, #1
10050378:	b29b      	uxth	r3, r3
1005037a:	b21b      	sxth	r3, r3
1005037c:	2203      	movs	r2, #3
1005037e:	4313      	orrs	r3, r2
10050380:	b21b      	sxth	r3, r3
10050382:	b29a      	uxth	r2, r3
10050384:	2118      	movs	r1, #24
10050386:	187b      	adds	r3, r7, r1
10050388:	3201      	adds	r2, #1
1005038a:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
1005038c:	187a      	adds	r2, r7, r1
1005038e:	211c      	movs	r1, #28
10050390:	187b      	adds	r3, r7, r1
10050392:	8812      	ldrh	r2, [r2, #0]
10050394:	881b      	ldrh	r3, [r3, #0]
10050396:	429a      	cmp	r2, r3
10050398:	d910      	bls.n	100503bc <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
1005039a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005039c:	2200      	movs	r2, #0
1005039e:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
100503a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100503a2:	885a      	ldrh	r2, [r3, #2]
100503a4:	187b      	adds	r3, r7, r1
100503a6:	881b      	ldrh	r3, [r3, #0]
100503a8:	18d3      	adds	r3, r2, r3
100503aa:	b29a      	uxth	r2, r3
100503ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100503ae:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100503b0:	683b      	ldr	r3, [r7, #0]
100503b2:	1dba      	adds	r2, r7, #6
100503b4:	8812      	ldrh	r2, [r2, #0]
100503b6:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
100503b8:	2300      	movs	r3, #0
100503ba:	e023      	b.n	10050404 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
100503bc:	2318      	movs	r3, #24
100503be:	18fa      	adds	r2, r7, r3
100503c0:	231c      	movs	r3, #28
100503c2:	18fb      	adds	r3, r7, r3
100503c4:	8812      	ldrh	r2, [r2, #0]
100503c6:	881b      	ldrh	r3, [r3, #0]
100503c8:	429a      	cmp	r2, r3
100503ca:	d10b      	bne.n	100503e4 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
100503cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100503ce:	2201      	movs	r2, #1
100503d0:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
100503d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100503d4:	2200      	movs	r2, #0
100503d6:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100503d8:	683b      	ldr	r3, [r7, #0]
100503da:	1dba      	adds	r2, r7, #6
100503dc:	8812      	ldrh	r2, [r2, #0]
100503de:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
100503e0:	2300      	movs	r3, #0
100503e2:	e00f      	b.n	10050404 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
100503e4:	2318      	movs	r3, #24
100503e6:	18fa      	adds	r2, r7, r3
100503e8:	231c      	movs	r3, #28
100503ea:	18fb      	adds	r3, r7, r3
100503ec:	8812      	ldrh	r2, [r2, #0]
100503ee:	881b      	ldrh	r3, [r3, #0]
100503f0:	429a      	cmp	r2, r3
100503f2:	d300      	bcc.n	100503f6 <LoadDBToRAM+0x1dc>
100503f4:	e728      	b.n	10050248 <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
100503f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100503f8:	2201      	movs	r2, #1
100503fa:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
100503fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100503fe:	2200      	movs	r2, #0
10050400:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10050402:	e721      	b.n	10050248 <LoadDBToRAM+0x2e>
    }
  }
}
10050404:	0018      	movs	r0, r3
10050406:	46bd      	mov	sp, r7
10050408:	b009      	add	sp, #36	@ 0x24
1005040a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005040c <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
1005040c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005040e:	4c60      	ldr	r4, [pc, #384]	@ (10050590 <CleanLargeDB+0x184>)
10050410:	44a5      	add	sp, r4
10050412:	af02      	add	r7, sp, #8
10050414:	0002      	movs	r2, r0
10050416:	4b5f      	ldr	r3, [pc, #380]	@ (10050594 <CleanLargeDB+0x188>)
10050418:	2184      	movs	r1, #132	@ 0x84
1005041a:	0109      	lsls	r1, r1, #4
1005041c:	185b      	adds	r3, r3, r1
1005041e:	19db      	adds	r3, r3, r7
10050420:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
10050422:	4b5c      	ldr	r3, [pc, #368]	@ (10050594 <CleanLargeDB+0x188>)
10050424:	185b      	adds	r3, r3, r1
10050426:	19db      	adds	r3, r3, r7
10050428:	781a      	ldrb	r2, [r3, #0]
1005042a:	495b      	ldr	r1, [pc, #364]	@ (10050598 <CleanLargeDB+0x18c>)
1005042c:	0013      	movs	r3, r2
1005042e:	009b      	lsls	r3, r3, #2
10050430:	189b      	adds	r3, r3, r2
10050432:	009b      	lsls	r3, r3, #2
10050434:	18cb      	adds	r3, r1, r3
10050436:	330a      	adds	r3, #10
10050438:	881b      	ldrh	r3, [r3, #0]
1005043a:	2b00      	cmp	r3, #0
1005043c:	d101      	bne.n	10050442 <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
1005043e:	2300      	movs	r3, #0
10050440:	e0a0      	b.n	10050584 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
10050442:	4b56      	ldr	r3, [pc, #344]	@ (1005059c <CleanLargeDB+0x190>)
10050444:	18fc      	adds	r4, r7, r3
10050446:	4d56      	ldr	r5, [pc, #344]	@ (100505a0 <CleanLargeDB+0x194>)
10050448:	197a      	adds	r2, r7, r5
1005044a:	4b52      	ldr	r3, [pc, #328]	@ (10050594 <CleanLargeDB+0x188>)
1005044c:	2184      	movs	r1, #132	@ 0x84
1005044e:	0109      	lsls	r1, r1, #4
10050450:	185b      	adds	r3, r3, r1
10050452:	19db      	adds	r3, r3, r7
10050454:	781b      	ldrb	r3, [r3, #0]
10050456:	0011      	movs	r1, r2
10050458:	0018      	movs	r0, r3
1005045a:	f000 fcd3 	bl	10050e04 <NVMDB_HandleInit>
1005045e:	0003      	movs	r3, r0
10050460:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
10050462:	197b      	adds	r3, r7, r5
10050464:	685b      	ldr	r3, [r3, #4]
10050466:	4a4f      	ldr	r2, [pc, #316]	@ (100505a4 <CleanLargeDB+0x198>)
10050468:	18ba      	adds	r2, r7, r2
1005046a:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
1005046c:	4b4e      	ldr	r3, [pc, #312]	@ (100505a8 <CleanLargeDB+0x19c>)
1005046e:	18fb      	adds	r3, r7, r3
10050470:	0018      	movs	r0, r3
10050472:	f7ff fec1 	bl	100501f8 <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
10050476:	4e49      	ldr	r6, [pc, #292]	@ (1005059c <CleanLargeDB+0x190>)
10050478:	19bc      	adds	r4, r7, r6
1005047a:	4b4c      	ldr	r3, [pc, #304]	@ (100505ac <CleanLargeDB+0x1a0>)
1005047c:	18fd      	adds	r5, r7, r3
1005047e:	2380      	movs	r3, #128	@ 0x80
10050480:	011a      	lsls	r2, r3, #4
10050482:	230c      	movs	r3, #12
10050484:	18f9      	adds	r1, r7, r3
10050486:	4b46      	ldr	r3, [pc, #280]	@ (100505a0 <CleanLargeDB+0x194>)
10050488:	18f8      	adds	r0, r7, r3
1005048a:	4b47      	ldr	r3, [pc, #284]	@ (100505a8 <CleanLargeDB+0x19c>)
1005048c:	18fb      	adds	r3, r7, r3
1005048e:	9300      	str	r3, [sp, #0]
10050490:	002b      	movs	r3, r5
10050492:	f7ff fec2 	bl	1005021a <LoadDBToRAM>
10050496:	0003      	movs	r3, r0
10050498:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
1005049a:	19bb      	adds	r3, r7, r6
1005049c:	781b      	ldrb	r3, [r3, #0]
1005049e:	2b04      	cmp	r3, #4
100504a0:	d006      	beq.n	100504b0 <CleanLargeDB+0xa4>
100504a2:	19bb      	adds	r3, r7, r6
100504a4:	781b      	ldrb	r3, [r3, #0]
100504a6:	2b00      	cmp	r3, #0
100504a8:	d002      	beq.n	100504b0 <CleanLargeDB+0xa4>
    {
      return status;
100504aa:	19bb      	adds	r3, r7, r6
100504ac:	781b      	ldrb	r3, [r3, #0]
100504ae:	e069      	b.n	10050584 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
100504b0:	4b3e      	ldr	r3, [pc, #248]	@ (100505ac <CleanLargeDB+0x1a0>)
100504b2:	18fb      	adds	r3, r7, r3
100504b4:	881a      	ldrh	r2, [r3, #0]
100504b6:	2380      	movs	r3, #128	@ 0x80
100504b8:	011b      	lsls	r3, r3, #4
100504ba:	429a      	cmp	r2, r3
100504bc:	d004      	beq.n	100504c8 <CleanLargeDB+0xbc>
100504be:	4b37      	ldr	r3, [pc, #220]	@ (1005059c <CleanLargeDB+0x190>)
100504c0:	18fb      	adds	r3, r7, r3
100504c2:	781b      	ldrb	r3, [r3, #0]
100504c4:	2b00      	cmp	r3, #0
100504c6:	d0d6      	beq.n	10050476 <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
100504c8:	4a38      	ldr	r2, [pc, #224]	@ (100505ac <CleanLargeDB+0x1a0>)
100504ca:	18bb      	adds	r3, r7, r2
100504cc:	881b      	ldrh	r3, [r3, #0]
100504ce:	2b00      	cmp	r3, #0
100504d0:	d019      	beq.n	10050506 <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
100504d2:	18bb      	adds	r3, r7, r2
100504d4:	881b      	ldrh	r3, [r3, #0]
100504d6:	001a      	movs	r2, r3
100504d8:	230c      	movs	r3, #12
100504da:	18f9      	adds	r1, r7, r3
100504dc:	4c31      	ldr	r4, [pc, #196]	@ (100505a4 <CleanLargeDB+0x198>)
100504de:	193b      	adds	r3, r7, r4
100504e0:	681b      	ldr	r3, [r3, #0]
100504e2:	0018      	movs	r0, r3
100504e4:	f7ff fe48 	bl	10050178 <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
100504e8:	0022      	movs	r2, r4
100504ea:	18bb      	adds	r3, r7, r2
100504ec:	681b      	ldr	r3, [r3, #0]
100504ee:	2180      	movs	r1, #128	@ 0x80
100504f0:	0109      	lsls	r1, r1, #4
100504f2:	468c      	mov	ip, r1
100504f4:	4463      	add	r3, ip
100504f6:	18ba      	adds	r2, r7, r2
100504f8:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
100504fa:	4b28      	ldr	r3, [pc, #160]	@ (1005059c <CleanLargeDB+0x190>)
100504fc:	18fb      	adds	r3, r7, r3
100504fe:	781b      	ldrb	r3, [r3, #0]
10050500:	2b00      	cmp	r3, #0
10050502:	d102      	bne.n	1005050a <CleanLargeDB+0xfe>
  {
10050504:	e7b7      	b.n	10050476 <CleanLargeDB+0x6a>
        break;
10050506:	46c0      	nop			@ (mov r8, r8)
10050508:	e000      	b.n	1005050c <CleanLargeDB+0x100>
      {
        break;
1005050a:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
1005050c:	4b24      	ldr	r3, [pc, #144]	@ (100505a0 <CleanLargeDB+0x194>)
1005050e:	18fb      	adds	r3, r7, r3
10050510:	689b      	ldr	r3, [r3, #8]
10050512:	3b01      	subs	r3, #1
10050514:	4a26      	ldr	r2, [pc, #152]	@ (100505b0 <CleanLargeDB+0x1a4>)
10050516:	431a      	orrs	r2, r3
10050518:	4922      	ldr	r1, [pc, #136]	@ (100505a4 <CleanLargeDB+0x198>)
1005051a:	187b      	adds	r3, r7, r1
1005051c:	681b      	ldr	r3, [r3, #0]
1005051e:	1ad3      	subs	r3, r2, r3
10050520:	3301      	adds	r3, #1
10050522:	0ada      	lsrs	r2, r3, #11
10050524:	4823      	ldr	r0, [pc, #140]	@ (100505b4 <CleanLargeDB+0x1a8>)
10050526:	183b      	adds	r3, r7, r0
10050528:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1005052a:	187b      	adds	r3, r7, r1
1005052c:	681b      	ldr	r3, [r3, #0]
1005052e:	4a22      	ldr	r2, [pc, #136]	@ (100505b8 <CleanLargeDB+0x1ac>)
10050530:	4694      	mov	ip, r2
10050532:	4463      	add	r3, ip
10050534:	0ada      	lsrs	r2, r3, #11
10050536:	4c21      	ldr	r4, [pc, #132]	@ (100505bc <CleanLargeDB+0x1b0>)
10050538:	193b      	adds	r3, r7, r4
1005053a:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
1005053c:	2181      	movs	r1, #129	@ 0x81
1005053e:	0109      	lsls	r1, r1, #4
10050540:	187b      	adds	r3, r7, r1
10050542:	2200      	movs	r2, #0
10050544:	601a      	str	r2, [r3, #0]
10050546:	193b      	adds	r3, r7, r4
10050548:	781a      	ldrb	r2, [r3, #0]
1005054a:	187b      	adds	r3, r7, r1
1005054c:	605a      	str	r2, [r3, #4]
1005054e:	183b      	adds	r3, r7, r0
10050550:	781a      	ldrb	r2, [r3, #0]
10050552:	187b      	adds	r3, r7, r1
10050554:	609a      	str	r2, [r3, #8]
10050556:	4b1a      	ldr	r3, [pc, #104]	@ (100505c0 <CleanLargeDB+0x1b4>)
10050558:	18fa      	adds	r2, r7, r3
1005055a:	187b      	adds	r3, r7, r1
1005055c:	0011      	movs	r1, r2
1005055e:	0018      	movs	r0, r3
10050560:	f7f7 fe30 	bl	100481c4 <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
10050564:	4b0b      	ldr	r3, [pc, #44]	@ (10050594 <CleanLargeDB+0x188>)
10050566:	2284      	movs	r2, #132	@ 0x84
10050568:	0112      	lsls	r2, r2, #4
1005056a:	189b      	adds	r3, r3, r2
1005056c:	19db      	adds	r3, r3, r7
1005056e:	781a      	ldrb	r2, [r3, #0]
10050570:	0013      	movs	r3, r2
10050572:	009b      	lsls	r3, r3, #2
10050574:	189b      	adds	r3, r3, r2
10050576:	009b      	lsls	r3, r3, #2
10050578:	4a07      	ldr	r2, [pc, #28]	@ (10050598 <CleanLargeDB+0x18c>)
1005057a:	189b      	adds	r3, r3, r2
1005057c:	0018      	movs	r0, r3
1005057e:	f7ff fad5 	bl	1004fb2c <NVMDB_get_info>
10050582:	0003      	movs	r3, r0
}
10050584:	0018      	movs	r0, r3
10050586:	46bd      	mov	sp, r7
10050588:	4b0e      	ldr	r3, [pc, #56]	@ (100505c4 <CleanLargeDB+0x1b8>)
1005058a:	449d      	add	sp, r3
1005058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005058e:	46c0      	nop			@ (mov r8, r8)
10050590:	fffff7b4 	.word	0xfffff7b4
10050594:	fffff7c7 	.word	0xfffff7c7
10050598:	200022ac 	.word	0x200022ac
1005059c:	0000083b 	.word	0x0000083b
100505a0:	00000824 	.word	0x00000824
100505a4:	0000083c 	.word	0x0000083c
100505a8:	0000081c 	.word	0x0000081c
100505ac:	00000836 	.word	0x00000836
100505b0:	000007ff 	.word	0x000007ff
100505b4:	0000083a 	.word	0x0000083a
100505b8:	effc0000 	.word	0xeffc0000
100505bc:	00000839 	.word	0x00000839
100505c0:	0000080c 	.word	0x0000080c
100505c4:	00000844 	.word	0x00000844

100505c8 <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100505c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100505ca:	4c7a      	ldr	r4, [pc, #488]	@ (100507b4 <CleanPage+0x1ec>)
100505cc:	44a5      	add	sp, r4
100505ce:	af02      	add	r7, sp, #8
100505d0:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
100505d2:	4b79      	ldr	r3, [pc, #484]	@ (100507b8 <CleanPage+0x1f0>)
100505d4:	18fb      	adds	r3, r7, r3
100505d6:	2200      	movs	r2, #0
100505d8:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
100505da:	4b78      	ldr	r3, [pc, #480]	@ (100507bc <CleanPage+0x1f4>)
100505dc:	18fb      	adds	r3, r7, r3
100505de:	2200      	movs	r2, #0
100505e0:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
100505e2:	2300      	movs	r3, #0
100505e4:	4a76      	ldr	r2, [pc, #472]	@ (100507c0 <CleanPage+0x1f8>)
100505e6:	18ba      	adds	r2, r7, r2
100505e8:	6013      	str	r3, [r2, #0]
100505ea:	e023      	b.n	10050634 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
100505ec:	687b      	ldr	r3, [r7, #4]
100505ee:	6899      	ldr	r1, [r3, #8]
100505f0:	4b73      	ldr	r3, [pc, #460]	@ (100507c0 <CleanPage+0x1f8>)
100505f2:	18fb      	adds	r3, r7, r3
100505f4:	681a      	ldr	r2, [r3, #0]
100505f6:	0013      	movs	r3, r2
100505f8:	005b      	lsls	r3, r3, #1
100505fa:	189b      	adds	r3, r3, r2
100505fc:	009b      	lsls	r3, r3, #2
100505fe:	18ca      	adds	r2, r1, r3
10050600:	4970      	ldr	r1, [pc, #448]	@ (100507c4 <CleanPage+0x1fc>)
10050602:	187b      	adds	r3, r7, r1
10050604:	7812      	ldrb	r2, [r2, #0]
10050606:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
10050608:	187b      	adds	r3, r7, r1
1005060a:	781a      	ldrb	r2, [r3, #0]
1005060c:	496e      	ldr	r1, [pc, #440]	@ (100507c8 <CleanPage+0x200>)
1005060e:	0013      	movs	r3, r2
10050610:	009b      	lsls	r3, r3, #2
10050612:	189b      	adds	r3, r3, r2
10050614:	009b      	lsls	r3, r3, #2
10050616:	18cb      	adds	r3, r1, r3
10050618:	330a      	adds	r3, #10
1005061a:	881b      	ldrh	r3, [r3, #0]
1005061c:	2b00      	cmp	r3, #0
1005061e:	d003      	beq.n	10050628 <CleanPage+0x60>
    {
      found = TRUE;
10050620:	4b66      	ldr	r3, [pc, #408]	@ (100507bc <CleanPage+0x1f4>)
10050622:	18fb      	adds	r3, r7, r3
10050624:	2201      	movs	r2, #1
10050626:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050628:	4a65      	ldr	r2, [pc, #404]	@ (100507c0 <CleanPage+0x1f8>)
1005062a:	18bb      	adds	r3, r7, r2
1005062c:	681b      	ldr	r3, [r3, #0]
1005062e:	3301      	adds	r3, #1
10050630:	18ba      	adds	r2, r7, r2
10050632:	6013      	str	r3, [r2, #0]
10050634:	687b      	ldr	r3, [r7, #4]
10050636:	791b      	ldrb	r3, [r3, #4]
10050638:	001a      	movs	r2, r3
1005063a:	4b61      	ldr	r3, [pc, #388]	@ (100507c0 <CleanPage+0x1f8>)
1005063c:	18fb      	adds	r3, r7, r3
1005063e:	681b      	ldr	r3, [r3, #0]
10050640:	4293      	cmp	r3, r2
10050642:	dbd3      	blt.n	100505ec <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10050644:	4b5d      	ldr	r3, [pc, #372]	@ (100507bc <CleanPage+0x1f4>)
10050646:	18fb      	adds	r3, r7, r3
10050648:	781b      	ldrb	r3, [r3, #0]
1005064a:	2b00      	cmp	r3, #0
1005064c:	d101      	bne.n	10050652 <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
1005064e:	2300      	movs	r3, #0
10050650:	e0ab      	b.n	100507aa <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
10050652:	2380      	movs	r3, #128	@ 0x80
10050654:	011a      	lsls	r2, r3, #4
10050656:	2308      	movs	r3, #8
10050658:	18fb      	adds	r3, r7, r3
1005065a:	21ff      	movs	r1, #255	@ 0xff
1005065c:	0018      	movs	r0, r3
1005065e:	f017 fbf7 	bl	10067e50 <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050662:	2300      	movs	r3, #0
10050664:	4a56      	ldr	r2, [pc, #344]	@ (100507c0 <CleanPage+0x1f8>)
10050666:	18ba      	adds	r2, r7, r2
10050668:	6013      	str	r3, [r2, #0]
1005066a:	e051      	b.n	10050710 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1005066c:	687b      	ldr	r3, [r7, #4]
1005066e:	6899      	ldr	r1, [r3, #8]
10050670:	4853      	ldr	r0, [pc, #332]	@ (100507c0 <CleanPage+0x1f8>)
10050672:	183b      	adds	r3, r7, r0
10050674:	681a      	ldr	r2, [r3, #0]
10050676:	0013      	movs	r3, r2
10050678:	005b      	lsls	r3, r3, #1
1005067a:	189b      	adds	r3, r3, r2
1005067c:	009b      	lsls	r3, r3, #2
1005067e:	18ca      	adds	r2, r1, r3
10050680:	4d50      	ldr	r5, [pc, #320]	@ (100507c4 <CleanPage+0x1fc>)
10050682:	197b      	adds	r3, r7, r5
10050684:	7812      	ldrb	r2, [r2, #0]
10050686:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
10050688:	687b      	ldr	r3, [r7, #4]
1005068a:	6899      	ldr	r1, [r3, #8]
1005068c:	183b      	adds	r3, r7, r0
1005068e:	681a      	ldr	r2, [r3, #0]
10050690:	0013      	movs	r3, r2
10050692:	005b      	lsls	r3, r3, #1
10050694:	189b      	adds	r3, r3, r2
10050696:	009b      	lsls	r3, r3, #2
10050698:	18cb      	adds	r3, r1, r3
1005069a:	685b      	ldr	r3, [r3, #4]
1005069c:	2282      	movs	r2, #130	@ 0x82
1005069e:	0112      	lsls	r2, r2, #4
100506a0:	18ba      	adds	r2, r7, r2
100506a2:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
100506a4:	4e49      	ldr	r6, [pc, #292]	@ (100507cc <CleanPage+0x204>)
100506a6:	19bc      	adds	r4, r7, r6
100506a8:	2381      	movs	r3, #129	@ 0x81
100506aa:	011b      	lsls	r3, r3, #4
100506ac:	18fa      	adds	r2, r7, r3
100506ae:	197b      	adds	r3, r7, r5
100506b0:	781b      	ldrb	r3, [r3, #0]
100506b2:	0011      	movs	r1, r2
100506b4:	0018      	movs	r0, r3
100506b6:	f000 fba5 	bl	10050e04 <NVMDB_HandleInit>
100506ba:	0003      	movs	r3, r0
100506bc:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
100506be:	19bb      	adds	r3, r7, r6
100506c0:	781b      	ldrb	r3, [r3, #0]
100506c2:	2b00      	cmp	r3, #0
100506c4:	d001      	beq.n	100506ca <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
100506c6:	2300      	movs	r3, #0
100506c8:	e06f      	b.n	100507aa <CleanPage+0x1e2>
    }

    InitReadState(&state);
100506ca:	4d41      	ldr	r5, [pc, #260]	@ (100507d0 <CleanPage+0x208>)
100506cc:	197b      	adds	r3, r7, r5
100506ce:	0018      	movs	r0, r3
100506d0:	f7ff fd92 	bl	100501f8 <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
100506d4:	2308      	movs	r3, #8
100506d6:	18fa      	adds	r2, r7, r3
100506d8:	2082      	movs	r0, #130	@ 0x82
100506da:	0100      	lsls	r0, r0, #4
100506dc:	183b      	adds	r3, r7, r0
100506de:	681b      	ldr	r3, [r3, #0]
100506e0:	18d1      	adds	r1, r2, r3
100506e2:	183b      	adds	r3, r7, r0
100506e4:	681b      	ldr	r3, [r3, #0]
100506e6:	b29b      	uxth	r3, r3
100506e8:	2280      	movs	r2, #128	@ 0x80
100506ea:	0112      	lsls	r2, r2, #4
100506ec:	1ad3      	subs	r3, r2, r3
100506ee:	b29a      	uxth	r2, r3
100506f0:	4b38      	ldr	r3, [pc, #224]	@ (100507d4 <CleanPage+0x20c>)
100506f2:	18fc      	adds	r4, r7, r3
100506f4:	2381      	movs	r3, #129	@ 0x81
100506f6:	011b      	lsls	r3, r3, #4
100506f8:	18f8      	adds	r0, r7, r3
100506fa:	197b      	adds	r3, r7, r5
100506fc:	9300      	str	r3, [sp, #0]
100506fe:	0023      	movs	r3, r4
10050700:	f7ff fd8b 	bl	1005021a <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050704:	4a2e      	ldr	r2, [pc, #184]	@ (100507c0 <CleanPage+0x1f8>)
10050706:	18bb      	adds	r3, r7, r2
10050708:	681b      	ldr	r3, [r3, #0]
1005070a:	3301      	adds	r3, #1
1005070c:	18ba      	adds	r2, r7, r2
1005070e:	6013      	str	r3, [r2, #0]
10050710:	687b      	ldr	r3, [r7, #4]
10050712:	791b      	ldrb	r3, [r3, #4]
10050714:	001a      	movs	r2, r3
10050716:	4c2a      	ldr	r4, [pc, #168]	@ (100507c0 <CleanPage+0x1f8>)
10050718:	193b      	adds	r3, r7, r4
1005071a:	681b      	ldr	r3, [r3, #0]
1005071c:	4293      	cmp	r3, r2
1005071e:	dba5      	blt.n	1005066c <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
10050720:	687b      	ldr	r3, [r7, #4]
10050722:	681b      	ldr	r3, [r3, #0]
10050724:	2280      	movs	r2, #128	@ 0x80
10050726:	0112      	lsls	r2, r2, #4
10050728:	2108      	movs	r1, #8
1005072a:	1879      	adds	r1, r7, r1
1005072c:	0018      	movs	r0, r3
1005072e:	f7ff fd23 	bl	10050178 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050732:	2300      	movs	r3, #0
10050734:	193a      	adds	r2, r7, r4
10050736:	6013      	str	r3, [r2, #0]
10050738:	e02c      	b.n	10050794 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1005073a:	687b      	ldr	r3, [r7, #4]
1005073c:	6899      	ldr	r1, [r3, #8]
1005073e:	4b20      	ldr	r3, [pc, #128]	@ (100507c0 <CleanPage+0x1f8>)
10050740:	18fb      	adds	r3, r7, r3
10050742:	681a      	ldr	r2, [r3, #0]
10050744:	0013      	movs	r3, r2
10050746:	005b      	lsls	r3, r3, #1
10050748:	189b      	adds	r3, r3, r2
1005074a:	009b      	lsls	r3, r3, #2
1005074c:	18ca      	adds	r2, r1, r3
1005074e:	491d      	ldr	r1, [pc, #116]	@ (100507c4 <CleanPage+0x1fc>)
10050750:	187b      	adds	r3, r7, r1
10050752:	7812      	ldrb	r2, [r2, #0]
10050754:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
10050756:	187b      	adds	r3, r7, r1
10050758:	781a      	ldrb	r2, [r3, #0]
1005075a:	0013      	movs	r3, r2
1005075c:	009b      	lsls	r3, r3, #2
1005075e:	189b      	adds	r3, r3, r2
10050760:	009b      	lsls	r3, r3, #2
10050762:	4a19      	ldr	r2, [pc, #100]	@ (100507c8 <CleanPage+0x200>)
10050764:	189b      	adds	r3, r3, r2
10050766:	4d19      	ldr	r5, [pc, #100]	@ (100507cc <CleanPage+0x204>)
10050768:	197c      	adds	r4, r7, r5
1005076a:	0018      	movs	r0, r3
1005076c:	f7ff f9de 	bl	1004fb2c <NVMDB_get_info>
10050770:	0003      	movs	r3, r0
10050772:	7023      	strb	r3, [r4, #0]
    if(status)
10050774:	002a      	movs	r2, r5
10050776:	18bb      	adds	r3, r7, r2
10050778:	781b      	ldrb	r3, [r3, #0]
1005077a:	2b00      	cmp	r3, #0
1005077c:	d004      	beq.n	10050788 <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
1005077e:	4b0e      	ldr	r3, [pc, #56]	@ (100507b8 <CleanPage+0x1f0>)
10050780:	18fb      	adds	r3, r7, r3
10050782:	18ba      	adds	r2, r7, r2
10050784:	7812      	ldrb	r2, [r2, #0]
10050786:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050788:	4a0d      	ldr	r2, [pc, #52]	@ (100507c0 <CleanPage+0x1f8>)
1005078a:	18bb      	adds	r3, r7, r2
1005078c:	681b      	ldr	r3, [r3, #0]
1005078e:	3301      	adds	r3, #1
10050790:	18ba      	adds	r2, r7, r2
10050792:	6013      	str	r3, [r2, #0]
10050794:	687b      	ldr	r3, [r7, #4]
10050796:	791b      	ldrb	r3, [r3, #4]
10050798:	001a      	movs	r2, r3
1005079a:	4b09      	ldr	r3, [pc, #36]	@ (100507c0 <CleanPage+0x1f8>)
1005079c:	18fb      	adds	r3, r7, r3
1005079e:	681b      	ldr	r3, [r3, #0]
100507a0:	4293      	cmp	r3, r2
100507a2:	dbca      	blt.n	1005073a <CleanPage+0x172>
    }
  }

  return ret;
100507a4:	4b04      	ldr	r3, [pc, #16]	@ (100507b8 <CleanPage+0x1f0>)
100507a6:	18fb      	adds	r3, r7, r3
100507a8:	781b      	ldrb	r3, [r3, #0]
}
100507aa:	0018      	movs	r0, r3
100507ac:	46bd      	mov	sp, r7
100507ae:	4b0a      	ldr	r3, [pc, #40]	@ (100507d8 <CleanPage+0x210>)
100507b0:	449d      	add	sp, r3
100507b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100507b4:	fffff7c4 	.word	0xfffff7c4
100507b8:	0000082f 	.word	0x0000082f
100507bc:	00000827 	.word	0x00000827
100507c0:	00000828 	.word	0x00000828
100507c4:	00000826 	.word	0x00000826
100507c8:	200022ac 	.word	0x200022ac
100507cc:	00000825 	.word	0x00000825
100507d0:	00000808 	.word	0x00000808
100507d4:	0000080e 	.word	0x0000080e
100507d8:	00000834 	.word	0x00000834

100507dc <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
100507dc:	b590      	push	{r4, r7, lr}
100507de:	b087      	sub	sp, #28
100507e0:	af00      	add	r7, sp, #0
100507e2:	0002      	movs	r2, r0
100507e4:	6039      	str	r1, [r7, #0]
100507e6:	1dfb      	adds	r3, r7, #7
100507e8:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
100507ea:	2300      	movs	r3, #0
100507ec:	617b      	str	r3, [r7, #20]
100507ee:	e016      	b.n	1005081e <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
100507f0:	240b      	movs	r4, #11
100507f2:	1939      	adds	r1, r7, r4
100507f4:	482e      	ldr	r0, [pc, #184]	@ (100508b0 <GetDBType+0xd4>)
100507f6:	697a      	ldr	r2, [r7, #20]
100507f8:	0013      	movs	r3, r2
100507fa:	005b      	lsls	r3, r3, #1
100507fc:	189b      	adds	r3, r3, r2
100507fe:	009b      	lsls	r3, r3, #2
10050800:	18c3      	adds	r3, r0, r3
10050802:	3306      	adds	r3, #6
10050804:	781b      	ldrb	r3, [r3, #0]
10050806:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
10050808:	193a      	adds	r2, r7, r4
1005080a:	1dfb      	adds	r3, r7, #7
1005080c:	7812      	ldrb	r2, [r2, #0]
1005080e:	781b      	ldrb	r3, [r3, #0]
10050810:	429a      	cmp	r2, r3
10050812:	d101      	bne.n	10050818 <GetDBType+0x3c>
    {
      return LARGE_DB;
10050814:	2302      	movs	r3, #2
10050816:	e046      	b.n	100508a6 <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10050818:	697b      	ldr	r3, [r7, #20]
1005081a:	3301      	adds	r3, #1
1005081c:	617b      	str	r3, [r7, #20]
1005081e:	697b      	ldr	r3, [r7, #20]
10050820:	2b01      	cmp	r3, #1
10050822:	dde5      	ble.n	100507f0 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10050824:	2300      	movs	r3, #0
10050826:	613b      	str	r3, [r7, #16]
10050828:	e039      	b.n	1005089e <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1005082a:	2300      	movs	r3, #0
1005082c:	60fb      	str	r3, [r7, #12]
1005082e:	e026      	b.n	1005087e <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10050830:	4920      	ldr	r1, [pc, #128]	@ (100508b4 <GetDBType+0xd8>)
10050832:	693a      	ldr	r2, [r7, #16]
10050834:	0013      	movs	r3, r2
10050836:	005b      	lsls	r3, r3, #1
10050838:	189b      	adds	r3, r3, r2
1005083a:	009b      	lsls	r3, r3, #2
1005083c:	18cb      	adds	r3, r1, r3
1005083e:	3308      	adds	r3, #8
10050840:	6819      	ldr	r1, [r3, #0]
10050842:	68fa      	ldr	r2, [r7, #12]
10050844:	0013      	movs	r3, r2
10050846:	005b      	lsls	r3, r3, #1
10050848:	189b      	adds	r3, r3, r2
1005084a:	009b      	lsls	r3, r3, #2
1005084c:	18ca      	adds	r2, r1, r3
1005084e:	210b      	movs	r1, #11
10050850:	187b      	adds	r3, r7, r1
10050852:	7812      	ldrb	r2, [r2, #0]
10050854:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
10050856:	187a      	adds	r2, r7, r1
10050858:	1dfb      	adds	r3, r7, #7
1005085a:	7812      	ldrb	r2, [r2, #0]
1005085c:	781b      	ldrb	r3, [r3, #0]
1005085e:	429a      	cmp	r2, r3
10050860:	d10a      	bne.n	10050878 <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
10050862:	693a      	ldr	r2, [r7, #16]
10050864:	0013      	movs	r3, r2
10050866:	005b      	lsls	r3, r3, #1
10050868:	189b      	adds	r3, r3, r2
1005086a:	009b      	lsls	r3, r3, #2
1005086c:	4a11      	ldr	r2, [pc, #68]	@ (100508b4 <GetDBType+0xd8>)
1005086e:	189a      	adds	r2, r3, r2
10050870:	683b      	ldr	r3, [r7, #0]
10050872:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
10050874:	2301      	movs	r3, #1
10050876:	e016      	b.n	100508a6 <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10050878:	68fb      	ldr	r3, [r7, #12]
1005087a:	3301      	adds	r3, #1
1005087c:	60fb      	str	r3, [r7, #12]
1005087e:	490d      	ldr	r1, [pc, #52]	@ (100508b4 <GetDBType+0xd8>)
10050880:	693a      	ldr	r2, [r7, #16]
10050882:	0013      	movs	r3, r2
10050884:	005b      	lsls	r3, r3, #1
10050886:	189b      	adds	r3, r3, r2
10050888:	009b      	lsls	r3, r3, #2
1005088a:	18cb      	adds	r3, r1, r3
1005088c:	3304      	adds	r3, #4
1005088e:	781b      	ldrb	r3, [r3, #0]
10050890:	001a      	movs	r2, r3
10050892:	68fb      	ldr	r3, [r7, #12]
10050894:	4293      	cmp	r3, r2
10050896:	dbcb      	blt.n	10050830 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10050898:	693b      	ldr	r3, [r7, #16]
1005089a:	3301      	adds	r3, #1
1005089c:	613b      	str	r3, [r7, #16]
1005089e:	693b      	ldr	r3, [r7, #16]
100508a0:	2b00      	cmp	r3, #0
100508a2:	dbc2      	blt.n	1005082a <GetDBType+0x4e>
      }
    }
  }

  return 0;
100508a4:	2300      	movs	r3, #0
}
100508a6:	0018      	movs	r0, r3
100508a8:	46bd      	mov	sp, r7
100508aa:	b007      	add	sp, #28
100508ac:	bd90      	pop	{r4, r7, pc}
100508ae:	46c0      	nop			@ (mov r8, r8)
100508b0:	10069814 	.word	0x10069814
100508b4:	200022d8 	.word	0x200022d8

100508b8 <EraseSmallDB>:
}

#endif

__NOINLINE static NVMDB_status_t EraseSmallDB(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100508b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100508ba:	4c3d      	ldr	r4, [pc, #244]	@ (100509b0 <EraseSmallDB+0xf8>)
100508bc:	44a5      	add	sp, r4
100508be:	af02      	add	r7, sp, #8
100508c0:	0002      	movs	r2, r0
100508c2:	6039      	str	r1, [r7, #0]
100508c4:	4b3b      	ldr	r3, [pc, #236]	@ (100509b4 <EraseSmallDB+0xfc>)
100508c6:	2183      	movs	r1, #131	@ 0x83
100508c8:	0109      	lsls	r1, r1, #4
100508ca:	185b      	adds	r3, r3, r1
100508cc:	19db      	adds	r3, r3, r7
100508ce:	701a      	strb	r2, [r3, #0]
#endif
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
100508d0:	2380      	movs	r3, #128	@ 0x80
100508d2:	011a      	lsls	r2, r3, #4
100508d4:	2324      	movs	r3, #36	@ 0x24
100508d6:	18fb      	adds	r3, r7, r3
100508d8:	21ff      	movs	r1, #255	@ 0xff
100508da:	0018      	movs	r0, r3
100508dc:	f017 fab8 	bl	10067e50 <memset>

  // Search other databases in the same page
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
100508e0:	2300      	movs	r3, #0
100508e2:	4a35      	ldr	r2, [pc, #212]	@ (100509b8 <EraseSmallDB+0x100>)
100508e4:	18ba      	adds	r2, r7, r2
100508e6:	6013      	str	r3, [r2, #0]
100508e8:	e04b      	b.n	10050982 <EraseSmallDB+0xca>
  {
    NVMDB_HandleType handle;
    uint16_t num_read_bytes;
    ReadStateType state;
    NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
100508ea:	683b      	ldr	r3, [r7, #0]
100508ec:	6899      	ldr	r1, [r3, #8]
100508ee:	4c32      	ldr	r4, [pc, #200]	@ (100509b8 <EraseSmallDB+0x100>)
100508f0:	193b      	adds	r3, r7, r4
100508f2:	681a      	ldr	r2, [r3, #0]
100508f4:	0013      	movs	r3, r2
100508f6:	005b      	lsls	r3, r3, #1
100508f8:	189b      	adds	r3, r3, r2
100508fa:	009b      	lsls	r3, r3, #2
100508fc:	18ca      	adds	r2, r1, r3
100508fe:	492f      	ldr	r1, [pc, #188]	@ (100509bc <EraseSmallDB+0x104>)
10050900:	187b      	adds	r3, r7, r1
10050902:	7812      	ldrb	r2, [r2, #0]
10050904:	701a      	strb	r2, [r3, #0]
    if(id != NVMDB_id)
10050906:	187a      	adds	r2, r7, r1
10050908:	4b2a      	ldr	r3, [pc, #168]	@ (100509b4 <EraseSmallDB+0xfc>)
1005090a:	2083      	movs	r0, #131	@ 0x83
1005090c:	0100      	lsls	r0, r0, #4
1005090e:	181b      	adds	r3, r3, r0
10050910:	19db      	adds	r3, r3, r7
10050912:	7812      	ldrb	r2, [r2, #0]
10050914:	781b      	ldrb	r3, [r3, #0]
10050916:	429a      	cmp	r2, r3
10050918:	d02d      	beq.n	10050976 <EraseSmallDB+0xbe>
    {
      // This is not the db to be erased. Save it.
      NVMDB_HandleInit(id, &handle);
1005091a:	2514      	movs	r5, #20
1005091c:	197a      	adds	r2, r7, r5
1005091e:	187b      	adds	r3, r7, r1
10050920:	781b      	ldrb	r3, [r3, #0]
10050922:	0011      	movs	r1, r2
10050924:	0018      	movs	r0, r3
10050926:	f000 fa6d 	bl	10050e04 <NVMDB_HandleInit>
      uint32_t offset = smallDBContainer_p->dbs[i].offset;
1005092a:	683b      	ldr	r3, [r7, #0]
1005092c:	6899      	ldr	r1, [r3, #8]
1005092e:	193b      	adds	r3, r7, r4
10050930:	681a      	ldr	r2, [r3, #0]
10050932:	0013      	movs	r3, r2
10050934:	005b      	lsls	r3, r3, #1
10050936:	189b      	adds	r3, r3, r2
10050938:	009b      	lsls	r3, r3, #2
1005093a:	18cb      	adds	r3, r1, r3
1005093c:	685b      	ldr	r3, [r3, #4]
1005093e:	4c20      	ldr	r4, [pc, #128]	@ (100509c0 <EraseSmallDB+0x108>)
10050940:	193a      	adds	r2, r7, r4
10050942:	6013      	str	r3, [r2, #0]
      InitReadState(&state);
10050944:	260c      	movs	r6, #12
10050946:	19bb      	adds	r3, r7, r6
10050948:	0018      	movs	r0, r3
1005094a:	f7ff fc55 	bl	100501f8 <InitReadState>
      LoadDBToRAM(&handle, NVM_buffer + offset, sizeof(NVM_buffer) - offset, &num_read_bytes, &state);
1005094e:	2324      	movs	r3, #36	@ 0x24
10050950:	18fa      	adds	r2, r7, r3
10050952:	193b      	adds	r3, r7, r4
10050954:	681b      	ldr	r3, [r3, #0]
10050956:	18d1      	adds	r1, r2, r3
10050958:	193b      	adds	r3, r7, r4
1005095a:	681b      	ldr	r3, [r3, #0]
1005095c:	b29b      	uxth	r3, r3
1005095e:	2280      	movs	r2, #128	@ 0x80
10050960:	0112      	lsls	r2, r2, #4
10050962:	1ad3      	subs	r3, r2, r3
10050964:	b29a      	uxth	r2, r3
10050966:	2312      	movs	r3, #18
10050968:	18fc      	adds	r4, r7, r3
1005096a:	1978      	adds	r0, r7, r5
1005096c:	19bb      	adds	r3, r7, r6
1005096e:	9300      	str	r3, [sp, #0]
10050970:	0023      	movs	r3, r4
10050972:	f7ff fc52 	bl	1005021a <LoadDBToRAM>
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
10050976:	4a10      	ldr	r2, [pc, #64]	@ (100509b8 <EraseSmallDB+0x100>)
10050978:	18bb      	adds	r3, r7, r2
1005097a:	681b      	ldr	r3, [r3, #0]
1005097c:	3301      	adds	r3, #1
1005097e:	18ba      	adds	r2, r7, r2
10050980:	6013      	str	r3, [r2, #0]
10050982:	683b      	ldr	r3, [r7, #0]
10050984:	791b      	ldrb	r3, [r3, #4]
10050986:	001a      	movs	r2, r3
10050988:	4b0b      	ldr	r3, [pc, #44]	@ (100509b8 <EraseSmallDB+0x100>)
1005098a:	18fb      	adds	r3, r7, r3
1005098c:	681b      	ldr	r3, [r3, #0]
1005098e:	4293      	cmp	r3, r2
10050990:	dbab      	blt.n	100508ea <EraseSmallDB+0x32>
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  // Write buffer to flash
  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
10050992:	683b      	ldr	r3, [r7, #0]
10050994:	681b      	ldr	r3, [r3, #0]
10050996:	2280      	movs	r2, #128	@ 0x80
10050998:	0112      	lsls	r2, r2, #4
1005099a:	2124      	movs	r1, #36	@ 0x24
1005099c:	1879      	adds	r1, r7, r1
1005099e:	0018      	movs	r0, r3
100509a0:	f7ff fbea 	bl	10050178 <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
100509a4:	2300      	movs	r3, #0
}
100509a6:	0018      	movs	r0, r3
100509a8:	46bd      	mov	sp, r7
100509aa:	4b06      	ldr	r3, [pc, #24]	@ (100509c4 <EraseSmallDB+0x10c>)
100509ac:	449d      	add	sp, r3
100509ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
100509b0:	fffff7c4 	.word	0xfffff7c4
100509b4:	fffff7d7 	.word	0xfffff7d7
100509b8:	0000082c 	.word	0x0000082c
100509bc:	0000082b 	.word	0x0000082b
100509c0:	00000824 	.word	0x00000824
100509c4:	00000834 	.word	0x00000834

100509c8 <NVMDB_AppendRecordNoCache>:

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
100509c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100509ca:	b089      	sub	sp, #36	@ 0x24
100509cc:	af02      	add	r7, sp, #8
100509ce:	60f8      	str	r0, [r7, #12]
100509d0:	0008      	movs	r0, r1
100509d2:	0011      	movs	r1, r2
100509d4:	607b      	str	r3, [r7, #4]
100509d6:	230b      	movs	r3, #11
100509d8:	18fb      	adds	r3, r7, r3
100509da:	1c02      	adds	r2, r0, #0
100509dc:	701a      	strb	r2, [r3, #0]
100509de:	2008      	movs	r0, #8
100509e0:	183b      	adds	r3, r7, r0
100509e2:	1c0a      	adds	r2, r1, #0
100509e4:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
100509e6:	0001      	movs	r1, r0
100509e8:	187b      	adds	r3, r7, r1
100509ea:	881b      	ldrh	r3, [r3, #0]
100509ec:	3b01      	subs	r3, #1
100509ee:	b29b      	uxth	r3, r3
100509f0:	b21b      	sxth	r3, r3
100509f2:	2203      	movs	r2, #3
100509f4:	4313      	orrs	r3, r2
100509f6:	b21b      	sxth	r3, r3
100509f8:	b29a      	uxth	r2, r3
100509fa:	187b      	adds	r3, r7, r1
100509fc:	3201      	adds	r2, #1
100509fe:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10050a00:	68fb      	ldr	r3, [r7, #12]
10050a02:	685b      	ldr	r3, [r3, #4]
10050a04:	1d5a      	adds	r2, r3, #5
10050a06:	68fb      	ldr	r3, [r7, #12]
10050a08:	689b      	ldr	r3, [r3, #8]
10050a0a:	429a      	cmp	r2, r3
10050a0c:	d310      	bcc.n	10050a30 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
10050a0e:	68fb      	ldr	r3, [r7, #12]
10050a10:	781b      	ldrb	r3, [r3, #0]
10050a12:	0019      	movs	r1, r3
10050a14:	4a4a      	ldr	r2, [pc, #296]	@ (10050b40 <NVMDB_AppendRecordNoCache+0x178>)
10050a16:	000b      	movs	r3, r1
10050a18:	009b      	lsls	r3, r3, #2
10050a1a:	185b      	adds	r3, r3, r1
10050a1c:	009b      	lsls	r3, r3, #2
10050a1e:	18d3      	adds	r3, r2, r3
10050a20:	330a      	adds	r3, #10
10050a22:	881b      	ldrh	r3, [r3, #0]
10050a24:	2b00      	cmp	r3, #0
10050a26:	d001      	beq.n	10050a2c <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
10050a28:	230b      	movs	r3, #11
10050a2a:	e084      	b.n	10050b36 <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10050a2c:	2302      	movs	r3, #2
10050a2e:	e082      	b.n	10050b36 <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10050a30:	68fb      	ldr	r3, [r7, #12]
10050a32:	685b      	ldr	r3, [r3, #4]
10050a34:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
10050a36:	697b      	ldr	r3, [r7, #20]
10050a38:	781b      	ldrb	r3, [r3, #0]
10050a3a:	2bff      	cmp	r3, #255	@ 0xff
10050a3c:	d11c      	bne.n	10050a78 <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
10050a3e:	68fb      	ldr	r3, [r7, #12]
10050a40:	689a      	ldr	r2, [r3, #8]
10050a42:	68fb      	ldr	r3, [r7, #12]
10050a44:	685b      	ldr	r3, [r3, #4]
10050a46:	1ad3      	subs	r3, r2, r3
10050a48:	2280      	movs	r2, #128	@ 0x80
10050a4a:	0252      	lsls	r2, r2, #9
10050a4c:	4293      	cmp	r3, r2
10050a4e:	d300      	bcc.n	10050a52 <NVMDB_AppendRecordNoCache+0x8a>
10050a50:	4b3c      	ldr	r3, [pc, #240]	@ (10050b44 <NVMDB_AppendRecordNoCache+0x17c>)
10050a52:	2112      	movs	r1, #18
10050a54:	187a      	adds	r2, r7, r1
10050a56:	8013      	strh	r3, [r2, #0]
      break;
10050a58:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
10050a5a:	2308      	movs	r3, #8
10050a5c:	0018      	movs	r0, r3
10050a5e:	18fb      	adds	r3, r7, r3
10050a60:	881a      	ldrh	r2, [r3, #0]
10050a62:	2328      	movs	r3, #40	@ 0x28
10050a64:	181b      	adds	r3, r3, r0
10050a66:	19db      	adds	r3, r3, r7
10050a68:	881b      	ldrh	r3, [r3, #0]
10050a6a:	18d3      	adds	r3, r2, r3
10050a6c:	1cda      	adds	r2, r3, #3
10050a6e:	187b      	adds	r3, r7, r1
10050a70:	881b      	ldrh	r3, [r3, #0]
10050a72:	429a      	cmp	r2, r3
10050a74:	db27      	blt.n	10050ac6 <NVMDB_AppendRecordNoCache+0xfe>
10050a76:	e015      	b.n	10050aa4 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
10050a78:	697b      	ldr	r3, [r7, #20]
10050a7a:	781b      	ldrb	r3, [r3, #0]
10050a7c:	2bfe      	cmp	r3, #254	@ 0xfe
10050a7e:	d005      	beq.n	10050a8c <NVMDB_AppendRecordNoCache+0xc4>
10050a80:	697b      	ldr	r3, [r7, #20]
10050a82:	781b      	ldrb	r3, [r3, #0]
10050a84:	2b00      	cmp	r3, #0
10050a86:	d001      	beq.n	10050a8c <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
10050a88:	2303      	movs	r3, #3
10050a8a:	e054      	b.n	10050b36 <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
10050a8c:	68fb      	ldr	r3, [r7, #12]
10050a8e:	685b      	ldr	r3, [r3, #4]
10050a90:	697a      	ldr	r2, [r7, #20]
10050a92:	8852      	ldrh	r2, [r2, #2]
10050a94:	3203      	adds	r2, #3
10050a96:	2103      	movs	r1, #3
10050a98:	430a      	orrs	r2, r1
10050a9a:	189b      	adds	r3, r3, r2
10050a9c:	1c5a      	adds	r2, r3, #1
10050a9e:	68fb      	ldr	r3, [r7, #12]
10050aa0:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10050aa2:	e7ad      	b.n	10050a00 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
10050aa4:	68fb      	ldr	r3, [r7, #12]
10050aa6:	781b      	ldrb	r3, [r3, #0]
10050aa8:	0019      	movs	r1, r3
10050aaa:	4a25      	ldr	r2, [pc, #148]	@ (10050b40 <NVMDB_AppendRecordNoCache+0x178>)
10050aac:	000b      	movs	r3, r1
10050aae:	009b      	lsls	r3, r3, #2
10050ab0:	185b      	adds	r3, r3, r1
10050ab2:	009b      	lsls	r3, r3, #2
10050ab4:	18d3      	adds	r3, r2, r3
10050ab6:	330a      	adds	r3, #10
10050ab8:	881b      	ldrh	r3, [r3, #0]
10050aba:	2b00      	cmp	r3, #0
10050abc:	d001      	beq.n	10050ac2 <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
10050abe:	230b      	movs	r3, #11
10050ac0:	e039      	b.n	10050b36 <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
10050ac2:	2302      	movs	r3, #2
10050ac4:	e037      	b.n	10050b36 <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
10050ac6:	68fb      	ldr	r3, [r7, #12]
10050ac8:	6858      	ldr	r0, [r3, #4]
10050aca:	2611      	movs	r6, #17
10050acc:	19bc      	adds	r4, r7, r6
10050ace:	687d      	ldr	r5, [r7, #4]
10050ad0:	2308      	movs	r3, #8
10050ad2:	001a      	movs	r2, r3
10050ad4:	18fb      	adds	r3, r7, r3
10050ad6:	881b      	ldrh	r3, [r3, #0]
10050ad8:	469c      	mov	ip, r3
10050ada:	230b      	movs	r3, #11
10050adc:	18fb      	adds	r3, r7, r3
10050ade:	7819      	ldrb	r1, [r3, #0]
10050ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050ae2:	9301      	str	r3, [sp, #4]
10050ae4:	2328      	movs	r3, #40	@ 0x28
10050ae6:	189b      	adds	r3, r3, r2
10050ae8:	19db      	adds	r3, r3, r7
10050aea:	881b      	ldrh	r3, [r3, #0]
10050aec:	9300      	str	r3, [sp, #0]
10050aee:	002b      	movs	r3, r5
10050af0:	4662      	mov	r2, ip
10050af2:	f7ff f99c 	bl	1004fe2e <WriteRecord>
10050af6:	0003      	movs	r3, r0
10050af8:	7023      	strb	r3, [r4, #0]
  if(status)
10050afa:	19bb      	adds	r3, r7, r6
10050afc:	781b      	ldrb	r3, [r3, #0]
10050afe:	2b00      	cmp	r3, #0
10050b00:	d002      	beq.n	10050b08 <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
10050b02:	19bb      	adds	r3, r7, r6
10050b04:	781b      	ldrb	r3, [r3, #0]
10050b06:	e016      	b.n	10050b36 <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
10050b08:	68fb      	ldr	r3, [r7, #12]
10050b0a:	781b      	ldrb	r3, [r3, #0]
10050b0c:	001a      	movs	r2, r3
10050b0e:	490c      	ldr	r1, [pc, #48]	@ (10050b40 <NVMDB_AppendRecordNoCache+0x178>)
10050b10:	0013      	movs	r3, r2
10050b12:	009b      	lsls	r3, r3, #2
10050b14:	189b      	adds	r3, r3, r2
10050b16:	009b      	lsls	r3, r3, #2
10050b18:	18cb      	adds	r3, r1, r3
10050b1a:	3308      	adds	r3, #8
10050b1c:	881b      	ldrh	r3, [r3, #0]
10050b1e:	3301      	adds	r3, #1
10050b20:	b298      	uxth	r0, r3
10050b22:	4907      	ldr	r1, [pc, #28]	@ (10050b40 <NVMDB_AppendRecordNoCache+0x178>)
10050b24:	0013      	movs	r3, r2
10050b26:	009b      	lsls	r3, r3, #2
10050b28:	189b      	adds	r3, r3, r2
10050b2a:	009b      	lsls	r3, r3, #2
10050b2c:	18cb      	adds	r3, r1, r3
10050b2e:	3308      	adds	r3, #8
10050b30:	1c02      	adds	r2, r0, #0
10050b32:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10050b34:	2300      	movs	r3, #0
}
10050b36:	0018      	movs	r0, r3
10050b38:	46bd      	mov	sp, r7
10050b3a:	b007      	add	sp, #28
10050b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10050b3e:	46c0      	nop			@ (mov r8, r8)
10050b40:	200022ac 	.word	0x200022ac
10050b44:	0000ffff 	.word	0x0000ffff

10050b48 <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
10050b48:	b5b0      	push	{r4, r5, r7, lr}
10050b4a:	b088      	sub	sp, #32
10050b4c:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10050b4e:	2300      	movs	r3, #0
10050b50:	61fb      	str	r3, [r7, #28]
10050b52:	e0cd      	b.n	10050cf0 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10050b54:	49a8      	ldr	r1, [pc, #672]	@ (10050df8 <NVMDB_Init+0x2b0>)
10050b56:	69fa      	ldr	r2, [r7, #28]
10050b58:	0013      	movs	r3, r2
10050b5a:	005b      	lsls	r3, r3, #1
10050b5c:	189b      	adds	r3, r3, r2
10050b5e:	009b      	lsls	r3, r3, #2
10050b60:	585b      	ldr	r3, [r3, r1]
10050b62:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10050b64:	2300      	movs	r3, #0
10050b66:	61bb      	str	r3, [r7, #24]
10050b68:	e0b1      	b.n	10050cce <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10050b6a:	49a3      	ldr	r1, [pc, #652]	@ (10050df8 <NVMDB_Init+0x2b0>)
10050b6c:	69fa      	ldr	r2, [r7, #28]
10050b6e:	0013      	movs	r3, r2
10050b70:	005b      	lsls	r3, r3, #1
10050b72:	189b      	adds	r3, r3, r2
10050b74:	009b      	lsls	r3, r3, #2
10050b76:	18cb      	adds	r3, r1, r3
10050b78:	3308      	adds	r3, #8
10050b7a:	6819      	ldr	r1, [r3, #0]
10050b7c:	69ba      	ldr	r2, [r7, #24]
10050b7e:	0013      	movs	r3, r2
10050b80:	005b      	lsls	r3, r3, #1
10050b82:	189b      	adds	r3, r3, r2
10050b84:	009b      	lsls	r3, r3, #2
10050b86:	18ca      	adds	r2, r1, r3
10050b88:	2013      	movs	r0, #19
10050b8a:	183b      	adds	r3, r7, r0
10050b8c:	7812      	ldrb	r2, [r2, #0]
10050b8e:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
10050b90:	4999      	ldr	r1, [pc, #612]	@ (10050df8 <NVMDB_Init+0x2b0>)
10050b92:	69fa      	ldr	r2, [r7, #28]
10050b94:	0013      	movs	r3, r2
10050b96:	005b      	lsls	r3, r3, #1
10050b98:	189b      	adds	r3, r3, r2
10050b9a:	009b      	lsls	r3, r3, #2
10050b9c:	18cb      	adds	r3, r1, r3
10050b9e:	3308      	adds	r3, #8
10050ba0:	6819      	ldr	r1, [r3, #0]
10050ba2:	69ba      	ldr	r2, [r7, #24]
10050ba4:	0013      	movs	r3, r2
10050ba6:	005b      	lsls	r3, r3, #1
10050ba8:	189b      	adds	r3, r3, r2
10050baa:	009b      	lsls	r3, r3, #2
10050bac:	18cb      	adds	r3, r1, r3
10050bae:	685b      	ldr	r3, [r3, #4]
10050bb0:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
10050bb2:	4991      	ldr	r1, [pc, #580]	@ (10050df8 <NVMDB_Init+0x2b0>)
10050bb4:	69fa      	ldr	r2, [r7, #28]
10050bb6:	0013      	movs	r3, r2
10050bb8:	005b      	lsls	r3, r3, #1
10050bba:	189b      	adds	r3, r3, r2
10050bbc:	009b      	lsls	r3, r3, #2
10050bbe:	18cb      	adds	r3, r1, r3
10050bc0:	3308      	adds	r3, #8
10050bc2:	6819      	ldr	r1, [r3, #0]
10050bc4:	69ba      	ldr	r2, [r7, #24]
10050bc6:	0013      	movs	r3, r2
10050bc8:	005b      	lsls	r3, r3, #1
10050bca:	189b      	adds	r3, r3, r2
10050bcc:	009b      	lsls	r3, r3, #2
10050bce:	18ca      	adds	r2, r1, r3
10050bd0:	1dbb      	adds	r3, r7, #6
10050bd2:	8912      	ldrh	r2, [r2, #8]
10050bd4:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
10050bd6:	183b      	adds	r3, r7, r0
10050bd8:	781a      	ldrb	r2, [r3, #0]
10050bda:	4988      	ldr	r1, [pc, #544]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050bdc:	0013      	movs	r3, r2
10050bde:	009b      	lsls	r3, r3, #2
10050be0:	189b      	adds	r3, r3, r2
10050be2:	009b      	lsls	r3, r3, #2
10050be4:	585b      	ldr	r3, [r3, r1]
10050be6:	2b00      	cmp	r3, #0
10050be8:	d103      	bne.n	10050bf2 <NVMDB_Init+0xaa>
10050bea:	183b      	adds	r3, r7, r0
10050bec:	781b      	ldrb	r3, [r3, #0]
10050bee:	2b01      	cmp	r3, #1
10050bf0:	d901      	bls.n	10050bf6 <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
10050bf2:	2301      	movs	r3, #1
10050bf4:	e0fc      	b.n	10050df0 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
10050bf6:	2413      	movs	r4, #19
10050bf8:	193b      	adds	r3, r7, r4
10050bfa:	781a      	ldrb	r2, [r3, #0]
10050bfc:	68f9      	ldr	r1, [r7, #12]
10050bfe:	68bb      	ldr	r3, [r7, #8]
10050c00:	18c8      	adds	r0, r1, r3
10050c02:	497e      	ldr	r1, [pc, #504]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050c04:	0013      	movs	r3, r2
10050c06:	009b      	lsls	r3, r3, #2
10050c08:	189b      	adds	r3, r3, r2
10050c0a:	009b      	lsls	r3, r3, #2
10050c0c:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
10050c0e:	497a      	ldr	r1, [pc, #488]	@ (10050df8 <NVMDB_Init+0x2b0>)
10050c10:	69fa      	ldr	r2, [r7, #28]
10050c12:	0013      	movs	r3, r2
10050c14:	005b      	lsls	r3, r3, #1
10050c16:	189b      	adds	r3, r3, r2
10050c18:	009b      	lsls	r3, r3, #2
10050c1a:	18cb      	adds	r3, r1, r3
10050c1c:	3304      	adds	r3, #4
10050c1e:	781b      	ldrb	r3, [r3, #0]
10050c20:	3b01      	subs	r3, #1
10050c22:	69ba      	ldr	r2, [r7, #24]
10050c24:	429a      	cmp	r2, r3
10050c26:	d10e      	bne.n	10050c46 <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
10050c28:	193b      	adds	r3, r7, r4
10050c2a:	781a      	ldrb	r2, [r3, #0]
10050c2c:	68fb      	ldr	r3, [r7, #12]
10050c2e:	2180      	movs	r1, #128	@ 0x80
10050c30:	0109      	lsls	r1, r1, #4
10050c32:	1859      	adds	r1, r3, r1
10050c34:	4871      	ldr	r0, [pc, #452]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050c36:	0013      	movs	r3, r2
10050c38:	009b      	lsls	r3, r3, #2
10050c3a:	189b      	adds	r3, r3, r2
10050c3c:	009b      	lsls	r3, r3, #2
10050c3e:	18c3      	adds	r3, r0, r3
10050c40:	3304      	adds	r3, #4
10050c42:	6019      	str	r1, [r3, #0]
10050c44:	e01d      	b.n	10050c82 <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
10050c46:	496c      	ldr	r1, [pc, #432]	@ (10050df8 <NVMDB_Init+0x2b0>)
10050c48:	69fa      	ldr	r2, [r7, #28]
10050c4a:	0013      	movs	r3, r2
10050c4c:	005b      	lsls	r3, r3, #1
10050c4e:	189b      	adds	r3, r3, r2
10050c50:	009b      	lsls	r3, r3, #2
10050c52:	18cb      	adds	r3, r1, r3
10050c54:	3308      	adds	r3, #8
10050c56:	6819      	ldr	r1, [r3, #0]
10050c58:	69bb      	ldr	r3, [r7, #24]
10050c5a:	1c5a      	adds	r2, r3, #1
10050c5c:	0013      	movs	r3, r2
10050c5e:	005b      	lsls	r3, r3, #1
10050c60:	189b      	adds	r3, r3, r2
10050c62:	009b      	lsls	r3, r3, #2
10050c64:	18cb      	adds	r3, r1, r3
10050c66:	6859      	ldr	r1, [r3, #4]
10050c68:	2313      	movs	r3, #19
10050c6a:	18fb      	adds	r3, r7, r3
10050c6c:	781a      	ldrb	r2, [r3, #0]
10050c6e:	68fb      	ldr	r3, [r7, #12]
10050c70:	18c9      	adds	r1, r1, r3
10050c72:	4862      	ldr	r0, [pc, #392]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050c74:	0013      	movs	r3, r2
10050c76:	009b      	lsls	r3, r3, #2
10050c78:	189b      	adds	r3, r3, r2
10050c7a:	009b      	lsls	r3, r3, #2
10050c7c:	18c3      	adds	r3, r0, r3
10050c7e:	3304      	adds	r3, #4
10050c80:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
10050c82:	2013      	movs	r0, #19
10050c84:	183b      	adds	r3, r7, r0
10050c86:	781a      	ldrb	r2, [r3, #0]
10050c88:	495c      	ldr	r1, [pc, #368]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050c8a:	0013      	movs	r3, r2
10050c8c:	009b      	lsls	r3, r3, #2
10050c8e:	189b      	adds	r3, r3, r2
10050c90:	009b      	lsls	r3, r3, #2
10050c92:	18cb      	adds	r3, r1, r3
10050c94:	3310      	adds	r3, #16
10050c96:	1dba      	adds	r2, r7, #6
10050c98:	8812      	ldrh	r2, [r2, #0]
10050c9a:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
10050c9c:	183b      	adds	r3, r7, r0
10050c9e:	781a      	ldrb	r2, [r3, #0]
10050ca0:	0013      	movs	r3, r2
10050ca2:	009b      	lsls	r3, r3, #2
10050ca4:	189b      	adds	r3, r3, r2
10050ca6:	009b      	lsls	r3, r3, #2
10050ca8:	4a54      	ldr	r2, [pc, #336]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050caa:	189b      	adds	r3, r3, r2
10050cac:	2512      	movs	r5, #18
10050cae:	197c      	adds	r4, r7, r5
10050cb0:	0018      	movs	r0, r3
10050cb2:	f7fe ff3b 	bl	1004fb2c <NVMDB_get_info>
10050cb6:	0003      	movs	r3, r0
10050cb8:	7023      	strb	r3, [r4, #0]
      if(status)
10050cba:	197b      	adds	r3, r7, r5
10050cbc:	781b      	ldrb	r3, [r3, #0]
10050cbe:	2b00      	cmp	r3, #0
10050cc0:	d002      	beq.n	10050cc8 <NVMDB_Init+0x180>
      {
        return status;
10050cc2:	197b      	adds	r3, r7, r5
10050cc4:	781b      	ldrb	r3, [r3, #0]
10050cc6:	e093      	b.n	10050df0 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10050cc8:	69bb      	ldr	r3, [r7, #24]
10050cca:	3301      	adds	r3, #1
10050ccc:	61bb      	str	r3, [r7, #24]
10050cce:	494a      	ldr	r1, [pc, #296]	@ (10050df8 <NVMDB_Init+0x2b0>)
10050cd0:	69fa      	ldr	r2, [r7, #28]
10050cd2:	0013      	movs	r3, r2
10050cd4:	005b      	lsls	r3, r3, #1
10050cd6:	189b      	adds	r3, r3, r2
10050cd8:	009b      	lsls	r3, r3, #2
10050cda:	18cb      	adds	r3, r1, r3
10050cdc:	3304      	adds	r3, #4
10050cde:	781b      	ldrb	r3, [r3, #0]
10050ce0:	001a      	movs	r2, r3
10050ce2:	69bb      	ldr	r3, [r7, #24]
10050ce4:	4293      	cmp	r3, r2
10050ce6:	da00      	bge.n	10050cea <NVMDB_Init+0x1a2>
10050ce8:	e73f      	b.n	10050b6a <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10050cea:	69fb      	ldr	r3, [r7, #28]
10050cec:	3301      	adds	r3, #1
10050cee:	61fb      	str	r3, [r7, #28]
10050cf0:	69fb      	ldr	r3, [r7, #28]
10050cf2:	2b00      	cmp	r3, #0
10050cf4:	da00      	bge.n	10050cf8 <NVMDB_Init+0x1b0>
10050cf6:	e72d      	b.n	10050b54 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10050cf8:	2300      	movs	r3, #0
10050cfa:	617b      	str	r3, [r7, #20]
10050cfc:	e074      	b.n	10050de8 <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10050cfe:	2413      	movs	r4, #19
10050d00:	1939      	adds	r1, r7, r4
10050d02:	483f      	ldr	r0, [pc, #252]	@ (10050e00 <NVMDB_Init+0x2b8>)
10050d04:	697a      	ldr	r2, [r7, #20]
10050d06:	0013      	movs	r3, r2
10050d08:	005b      	lsls	r3, r3, #1
10050d0a:	189b      	adds	r3, r3, r2
10050d0c:	009b      	lsls	r3, r3, #2
10050d0e:	18c3      	adds	r3, r0, r3
10050d10:	3306      	adds	r3, #6
10050d12:	781b      	ldrb	r3, [r3, #0]
10050d14:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
10050d16:	193b      	adds	r3, r7, r4
10050d18:	781a      	ldrb	r2, [r3, #0]
10050d1a:	4938      	ldr	r1, [pc, #224]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050d1c:	0013      	movs	r3, r2
10050d1e:	009b      	lsls	r3, r3, #2
10050d20:	189b      	adds	r3, r3, r2
10050d22:	009b      	lsls	r3, r3, #2
10050d24:	585b      	ldr	r3, [r3, r1]
10050d26:	2b00      	cmp	r3, #0
10050d28:	d103      	bne.n	10050d32 <NVMDB_Init+0x1ea>
10050d2a:	193b      	adds	r3, r7, r4
10050d2c:	781b      	ldrb	r3, [r3, #0]
10050d2e:	2b01      	cmp	r3, #1
10050d30:	d901      	bls.n	10050d36 <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
10050d32:	2301      	movs	r3, #1
10050d34:	e05c      	b.n	10050df0 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
10050d36:	2413      	movs	r4, #19
10050d38:	193b      	adds	r3, r7, r4
10050d3a:	781a      	ldrb	r2, [r3, #0]
10050d3c:	4830      	ldr	r0, [pc, #192]	@ (10050e00 <NVMDB_Init+0x2b8>)
10050d3e:	6979      	ldr	r1, [r7, #20]
10050d40:	000b      	movs	r3, r1
10050d42:	005b      	lsls	r3, r3, #1
10050d44:	185b      	adds	r3, r3, r1
10050d46:	009b      	lsls	r3, r3, #2
10050d48:	5818      	ldr	r0, [r3, r0]
10050d4a:	492c      	ldr	r1, [pc, #176]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050d4c:	0013      	movs	r3, r2
10050d4e:	009b      	lsls	r3, r3, #2
10050d50:	189b      	adds	r3, r3, r2
10050d52:	009b      	lsls	r3, r3, #2
10050d54:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
10050d56:	492a      	ldr	r1, [pc, #168]	@ (10050e00 <NVMDB_Init+0x2b8>)
10050d58:	697a      	ldr	r2, [r7, #20]
10050d5a:	0013      	movs	r3, r2
10050d5c:	005b      	lsls	r3, r3, #1
10050d5e:	189b      	adds	r3, r3, r2
10050d60:	009b      	lsls	r3, r3, #2
10050d62:	5859      	ldr	r1, [r3, r1]
10050d64:	4826      	ldr	r0, [pc, #152]	@ (10050e00 <NVMDB_Init+0x2b8>)
10050d66:	697a      	ldr	r2, [r7, #20]
10050d68:	0013      	movs	r3, r2
10050d6a:	005b      	lsls	r3, r3, #1
10050d6c:	189b      	adds	r3, r3, r2
10050d6e:	009b      	lsls	r3, r3, #2
10050d70:	18c3      	adds	r3, r0, r3
10050d72:	3304      	adds	r3, #4
10050d74:	881b      	ldrh	r3, [r3, #0]
10050d76:	0018      	movs	r0, r3
10050d78:	193b      	adds	r3, r7, r4
10050d7a:	781a      	ldrb	r2, [r3, #0]
10050d7c:	1809      	adds	r1, r1, r0
10050d7e:	481f      	ldr	r0, [pc, #124]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050d80:	0013      	movs	r3, r2
10050d82:	009b      	lsls	r3, r3, #2
10050d84:	189b      	adds	r3, r3, r2
10050d86:	009b      	lsls	r3, r3, #2
10050d88:	18c3      	adds	r3, r0, r3
10050d8a:	3304      	adds	r3, #4
10050d8c:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
10050d8e:	193b      	adds	r3, r7, r4
10050d90:	781a      	ldrb	r2, [r3, #0]
10050d92:	481b      	ldr	r0, [pc, #108]	@ (10050e00 <NVMDB_Init+0x2b8>)
10050d94:	6979      	ldr	r1, [r7, #20]
10050d96:	000b      	movs	r3, r1
10050d98:	005b      	lsls	r3, r3, #1
10050d9a:	185b      	adds	r3, r3, r1
10050d9c:	009b      	lsls	r3, r3, #2
10050d9e:	18c3      	adds	r3, r0, r3
10050da0:	3308      	adds	r3, #8
10050da2:	8818      	ldrh	r0, [r3, #0]
10050da4:	4915      	ldr	r1, [pc, #84]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050da6:	0013      	movs	r3, r2
10050da8:	009b      	lsls	r3, r3, #2
10050daa:	189b      	adds	r3, r3, r2
10050dac:	009b      	lsls	r3, r3, #2
10050dae:	18cb      	adds	r3, r1, r3
10050db0:	3310      	adds	r3, #16
10050db2:	1c02      	adds	r2, r0, #0
10050db4:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
10050db6:	193b      	adds	r3, r7, r4
10050db8:	781a      	ldrb	r2, [r3, #0]
10050dba:	0013      	movs	r3, r2
10050dbc:	009b      	lsls	r3, r3, #2
10050dbe:	189b      	adds	r3, r3, r2
10050dc0:	009b      	lsls	r3, r3, #2
10050dc2:	4a0e      	ldr	r2, [pc, #56]	@ (10050dfc <NVMDB_Init+0x2b4>)
10050dc4:	189b      	adds	r3, r3, r2
10050dc6:	2512      	movs	r5, #18
10050dc8:	197c      	adds	r4, r7, r5
10050dca:	0018      	movs	r0, r3
10050dcc:	f7fe feae 	bl	1004fb2c <NVMDB_get_info>
10050dd0:	0003      	movs	r3, r0
10050dd2:	7023      	strb	r3, [r4, #0]
    if(status)
10050dd4:	197b      	adds	r3, r7, r5
10050dd6:	781b      	ldrb	r3, [r3, #0]
10050dd8:	2b00      	cmp	r3, #0
10050dda:	d002      	beq.n	10050de2 <NVMDB_Init+0x29a>
    {
      return status;
10050ddc:	197b      	adds	r3, r7, r5
10050dde:	781b      	ldrb	r3, [r3, #0]
10050de0:	e006      	b.n	10050df0 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10050de2:	697b      	ldr	r3, [r7, #20]
10050de4:	3301      	adds	r3, #1
10050de6:	617b      	str	r3, [r7, #20]
10050de8:	697b      	ldr	r3, [r7, #20]
10050dea:	2b01      	cmp	r3, #1
10050dec:	dd87      	ble.n	10050cfe <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
10050dee:	2300      	movs	r3, #0
}
10050df0:	0018      	movs	r0, r3
10050df2:	46bd      	mov	sp, r7
10050df4:	b008      	add	sp, #32
10050df6:	bdb0      	pop	{r4, r5, r7, pc}
10050df8:	200022d8 	.word	0x200022d8
10050dfc:	200022ac 	.word	0x200022ac
10050e00:	10069814 	.word	0x10069814

10050e04 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
10050e04:	b580      	push	{r7, lr}
10050e06:	b082      	sub	sp, #8
10050e08:	af00      	add	r7, sp, #0
10050e0a:	0002      	movs	r2, r0
10050e0c:	6039      	str	r1, [r7, #0]
10050e0e:	1dfb      	adds	r3, r7, #7
10050e10:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
10050e12:	1dfb      	adds	r3, r7, #7
10050e14:	781b      	ldrb	r3, [r3, #0]
10050e16:	2b01      	cmp	r3, #1
10050e18:	d901      	bls.n	10050e1e <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
10050e1a:	2301      	movs	r3, #1
10050e1c:	e020      	b.n	10050e60 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
10050e1e:	1dfb      	adds	r3, r7, #7
10050e20:	781a      	ldrb	r2, [r3, #0]
10050e22:	4911      	ldr	r1, [pc, #68]	@ (10050e68 <NVMDB_HandleInit+0x64>)
10050e24:	0013      	movs	r3, r2
10050e26:	009b      	lsls	r3, r3, #2
10050e28:	189b      	adds	r3, r3, r2
10050e2a:	009b      	lsls	r3, r3, #2
10050e2c:	585a      	ldr	r2, [r3, r1]
10050e2e:	683b      	ldr	r3, [r7, #0]
10050e30:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
10050e32:	1dfb      	adds	r3, r7, #7
10050e34:	781a      	ldrb	r2, [r3, #0]
10050e36:	490c      	ldr	r1, [pc, #48]	@ (10050e68 <NVMDB_HandleInit+0x64>)
10050e38:	0013      	movs	r3, r2
10050e3a:	009b      	lsls	r3, r3, #2
10050e3c:	189b      	adds	r3, r3, r2
10050e3e:	009b      	lsls	r3, r3, #2
10050e40:	18cb      	adds	r3, r1, r3
10050e42:	3304      	adds	r3, #4
10050e44:	681a      	ldr	r2, [r3, #0]
10050e46:	683b      	ldr	r3, [r7, #0]
10050e48:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
10050e4a:	683b      	ldr	r3, [r7, #0]
10050e4c:	2201      	movs	r2, #1
10050e4e:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
10050e50:	683b      	ldr	r3, [r7, #0]
10050e52:	1dfa      	adds	r2, r7, #7
10050e54:	7812      	ldrb	r2, [r2, #0]
10050e56:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
10050e58:	683b      	ldr	r3, [r7, #0]
10050e5a:	2200      	movs	r2, #0
10050e5c:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
10050e5e:	2300      	movs	r3, #0
}
10050e60:	0018      	movs	r0, r3
10050e62:	46bd      	mov	sp, r7
10050e64:	b002      	add	sp, #8
10050e66:	bd80      	pop	{r7, pc}
10050e68:	200022ac 	.word	0x200022ac

10050e6c <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10050e6c:	b590      	push	{r4, r7, lr}
10050e6e:	b089      	sub	sp, #36	@ 0x24
10050e70:	af04      	add	r7, sp, #16
10050e72:	60f8      	str	r0, [r7, #12]
10050e74:	0008      	movs	r0, r1
10050e76:	0011      	movs	r1, r2
10050e78:	607b      	str	r3, [r7, #4]
10050e7a:	230b      	movs	r3, #11
10050e7c:	18fb      	adds	r3, r7, r3
10050e7e:	1c02      	adds	r2, r0, #0
10050e80:	701a      	strb	r2, [r3, #0]
10050e82:	2308      	movs	r3, #8
10050e84:	18fb      	adds	r3, r7, r3
10050e86:	1c0a      	adds	r2, r1, #0
10050e88:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
10050e8a:	68fb      	ldr	r3, [r7, #12]
10050e8c:	781b      	ldrb	r3, [r3, #0]
10050e8e:	0019      	movs	r1, r3
10050e90:	4a12      	ldr	r2, [pc, #72]	@ (10050edc <NVMDB_ReadNextRecord+0x70>)
10050e92:	000b      	movs	r3, r1
10050e94:	009b      	lsls	r3, r3, #2
10050e96:	185b      	adds	r3, r3, r1
10050e98:	009b      	lsls	r3, r3, #2
10050e9a:	18d3      	adds	r3, r2, r3
10050e9c:	330e      	adds	r3, #14
10050e9e:	781b      	ldrb	r3, [r3, #0]
10050ea0:	2b00      	cmp	r3, #0
10050ea2:	d001      	beq.n	10050ea8 <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10050ea4:	230a      	movs	r3, #10
10050ea6:	e015      	b.n	10050ed4 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
10050ea8:	687c      	ldr	r4, [r7, #4]
10050eaa:	2308      	movs	r3, #8
10050eac:	18fb      	adds	r3, r7, r3
10050eae:	881a      	ldrh	r2, [r3, #0]
10050eb0:	230b      	movs	r3, #11
10050eb2:	18fb      	adds	r3, r7, r3
10050eb4:	7819      	ldrb	r1, [r3, #0]
10050eb6:	68f8      	ldr	r0, [r7, #12]
10050eb8:	2300      	movs	r3, #0
10050eba:	9303      	str	r3, [sp, #12]
10050ebc:	2300      	movs	r3, #0
10050ebe:	9302      	str	r3, [sp, #8]
10050ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050ec2:	9301      	str	r3, [sp, #4]
10050ec4:	2320      	movs	r3, #32
10050ec6:	18fb      	adds	r3, r7, r3
10050ec8:	881b      	ldrh	r3, [r3, #0]
10050eca:	9300      	str	r3, [sp, #0]
10050ecc:	0023      	movs	r3, r4
10050ece:	f7fe fef9 	bl	1004fcc4 <ReadNextRecordNoLock>
10050ed2:	0003      	movs	r3, r0
}
10050ed4:	0018      	movs	r0, r3
10050ed6:	46bd      	mov	sp, r7
10050ed8:	b005      	add	sp, #20
10050eda:	bd90      	pop	{r4, r7, pc}
10050edc:	200022ac 	.word	0x200022ac

10050ee0 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10050ee0:	b590      	push	{r4, r7, lr}
10050ee2:	b087      	sub	sp, #28
10050ee4:	af02      	add	r7, sp, #8
10050ee6:	60f8      	str	r0, [r7, #12]
10050ee8:	0008      	movs	r0, r1
10050eea:	607a      	str	r2, [r7, #4]
10050eec:	0019      	movs	r1, r3
10050eee:	230a      	movs	r3, #10
10050ef0:	18fb      	adds	r3, r7, r3
10050ef2:	1c02      	adds	r2, r0, #0
10050ef4:	801a      	strh	r2, [r3, #0]
10050ef6:	2308      	movs	r3, #8
10050ef8:	18fb      	adds	r3, r7, r3
10050efa:	1c0a      	adds	r2, r1, #0
10050efc:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
10050efe:	68fb      	ldr	r3, [r7, #12]
10050f00:	781b      	ldrb	r3, [r3, #0]
10050f02:	0019      	movs	r1, r3
10050f04:	4a0f      	ldr	r2, [pc, #60]	@ (10050f44 <NVMDB_ReadCurrentRecord+0x64>)
10050f06:	000b      	movs	r3, r1
10050f08:	009b      	lsls	r3, r3, #2
10050f0a:	185b      	adds	r3, r3, r1
10050f0c:	009b      	lsls	r3, r3, #2
10050f0e:	18d3      	adds	r3, r2, r3
10050f10:	330e      	adds	r3, #14
10050f12:	781b      	ldrb	r3, [r3, #0]
10050f14:	2b00      	cmp	r3, #0
10050f16:	d001      	beq.n	10050f1c <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10050f18:	230a      	movs	r3, #10
10050f1a:	e00f      	b.n	10050f3c <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
10050f1c:	2308      	movs	r3, #8
10050f1e:	18fb      	adds	r3, r7, r3
10050f20:	881c      	ldrh	r4, [r3, #0]
10050f22:	687a      	ldr	r2, [r7, #4]
10050f24:	230a      	movs	r3, #10
10050f26:	18fb      	adds	r3, r7, r3
10050f28:	8819      	ldrh	r1, [r3, #0]
10050f2a:	68f8      	ldr	r0, [r7, #12]
10050f2c:	2300      	movs	r3, #0
10050f2e:	9301      	str	r3, [sp, #4]
10050f30:	6a3b      	ldr	r3, [r7, #32]
10050f32:	9300      	str	r3, [sp, #0]
10050f34:	0023      	movs	r3, r4
10050f36:	f7ff f81c 	bl	1004ff72 <ReadCurrentRecordNoLock>
10050f3a:	0003      	movs	r3, r0
}
10050f3c:	0018      	movs	r0, r3
10050f3e:	46bd      	mov	sp, r7
10050f40:	b005      	add	sp, #20
10050f42:	bd90      	pop	{r4, r7, pc}
10050f44:	200022ac 	.word	0x200022ac

10050f48 <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
10050f48:	b5f0      	push	{r4, r5, r6, r7, lr}
10050f4a:	46c6      	mov	lr, r8
10050f4c:	b500      	push	{lr}
10050f4e:	b088      	sub	sp, #32
10050f50:	af02      	add	r7, sp, #8
10050f52:	60f8      	str	r0, [r7, #12]
10050f54:	0008      	movs	r0, r1
10050f56:	0011      	movs	r1, r2
10050f58:	607b      	str	r3, [r7, #4]
10050f5a:	230b      	movs	r3, #11
10050f5c:	001c      	movs	r4, r3
10050f5e:	18fb      	adds	r3, r7, r3
10050f60:	1c02      	adds	r2, r0, #0
10050f62:	701a      	strb	r2, [r3, #0]
10050f64:	2008      	movs	r0, #8
10050f66:	183b      	adds	r3, r7, r0
10050f68:	1c0a      	adds	r2, r1, #0
10050f6a:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
10050f6c:	2617      	movs	r6, #23
10050f6e:	46b0      	mov	r8, r6
10050f70:	44b8      	add	r8, r7
10050f72:	687d      	ldr	r5, [r7, #4]
10050f74:	183b      	adds	r3, r7, r0
10050f76:	881a      	ldrh	r2, [r3, #0]
10050f78:	0023      	movs	r3, r4
10050f7a:	18fb      	adds	r3, r7, r3
10050f7c:	7819      	ldrb	r1, [r3, #0]
10050f7e:	68f8      	ldr	r0, [r7, #12]
10050f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050f82:	9301      	str	r3, [sp, #4]
10050f84:	2328      	movs	r3, #40	@ 0x28
10050f86:	2408      	movs	r4, #8
10050f88:	191b      	adds	r3, r3, r4
10050f8a:	19db      	adds	r3, r3, r7
10050f8c:	881b      	ldrh	r3, [r3, #0]
10050f8e:	9300      	str	r3, [sp, #0]
10050f90:	002b      	movs	r3, r5
10050f92:	f7ff fd19 	bl	100509c8 <NVMDB_AppendRecordNoCache>
10050f96:	0003      	movs	r3, r0
10050f98:	4642      	mov	r2, r8
10050f9a:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
10050f9c:	19bb      	adds	r3, r7, r6
10050f9e:	781b      	ldrb	r3, [r3, #0]
10050fa0:	2b00      	cmp	r3, #0
10050fa2:	d002      	beq.n	10050faa <NVMDB_AppendRecord+0x62>
  {
    return status;
10050fa4:	19bb      	adds	r3, r7, r6
10050fa6:	781b      	ldrb	r3, [r3, #0]
10050fa8:	e02c      	b.n	10051004 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
10050faa:	68fb      	ldr	r3, [r7, #12]
10050fac:	781b      	ldrb	r3, [r3, #0]
10050fae:	0019      	movs	r1, r3
10050fb0:	4a17      	ldr	r2, [pc, #92]	@ (10051010 <NVMDB_AppendRecord+0xc8>)
10050fb2:	000b      	movs	r3, r1
10050fb4:	009b      	lsls	r3, r3, #2
10050fb6:	185b      	adds	r3, r3, r1
10050fb8:	009b      	lsls	r3, r3, #2
10050fba:	18d3      	adds	r3, r2, r3
10050fbc:	330c      	adds	r3, #12
10050fbe:	881a      	ldrh	r2, [r3, #0]
10050fc0:	2308      	movs	r3, #8
10050fc2:	0018      	movs	r0, r3
10050fc4:	18f9      	adds	r1, r7, r3
10050fc6:	2328      	movs	r3, #40	@ 0x28
10050fc8:	181b      	adds	r3, r3, r0
10050fca:	19db      	adds	r3, r3, r7
10050fcc:	8809      	ldrh	r1, [r1, #0]
10050fce:	881b      	ldrh	r3, [r3, #0]
10050fd0:	18cb      	adds	r3, r1, r3
10050fd2:	b29b      	uxth	r3, r3
10050fd4:	3b01      	subs	r3, #1
10050fd6:	b29b      	uxth	r3, r3
10050fd8:	b21b      	sxth	r3, r3
10050fda:	2103      	movs	r1, #3
10050fdc:	430b      	orrs	r3, r1
10050fde:	b21b      	sxth	r3, r3
10050fe0:	b29b      	uxth	r3, r3
10050fe2:	1ad3      	subs	r3, r2, r3
10050fe4:	b29b      	uxth	r3, r3
10050fe6:	68fa      	ldr	r2, [r7, #12]
10050fe8:	7812      	ldrb	r2, [r2, #0]
10050fea:	0011      	movs	r1, r2
10050fec:	3b05      	subs	r3, #5
10050fee:	b298      	uxth	r0, r3
10050ff0:	4a07      	ldr	r2, [pc, #28]	@ (10051010 <NVMDB_AppendRecord+0xc8>)
10050ff2:	000b      	movs	r3, r1
10050ff4:	009b      	lsls	r3, r3, #2
10050ff6:	185b      	adds	r3, r3, r1
10050ff8:	009b      	lsls	r3, r3, #2
10050ffa:	18d3      	adds	r3, r2, r3
10050ffc:	330c      	adds	r3, #12
10050ffe:	1c02      	adds	r2, r0, #0
10051000:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10051002:	2300      	movs	r3, #0
}
10051004:	0018      	movs	r0, r3
10051006:	46bd      	mov	sp, r7
10051008:	b006      	add	sp, #24
1005100a:	bc80      	pop	{r7}
1005100c:	46b8      	mov	r8, r7
1005100e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051010:	200022ac 	.word	0x200022ac

10051014 <NVMDB_DeleteRecord>:
 *
 * @param[in,out] handle_p Handle pointing to the record to be deleted.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_DeleteRecord(const NVMDB_HandleType *handle_p)
{
10051014:	b580      	push	{r7, lr}
10051016:	b082      	sub	sp, #8
10051018:	af00      	add	r7, sp, #0
1005101a:	6078      	str	r0, [r7, #4]
  /* No time to complete the operation immediately.  */
  return ScheduleDeleteOperation(handle_p->id, handle_p->address);

#else /* NVM_CACHE */

  return NVMDB_DeleteRecordNoCache(handle_p);
1005101c:	687b      	ldr	r3, [r7, #4]
1005101e:	0018      	movs	r0, r3
10051020:	f7ff f828 	bl	10050074 <NVMDB_DeleteRecordNoCache>
10051024:	0003      	movs	r3, r0

#endif
}
10051026:	0018      	movs	r0, r3
10051028:	46bd      	mov	sp, r7
1005102a:	b002      	add	sp, #8
1005102c:	bd80      	pop	{r7, pc}
	...

10051030 <NVMDB_Erase>:
 *
 * @param      NVMDB_id The ID of the record to be erased.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Erase(NVMDB_IdType NVMDB_id)
{
10051030:	b5b0      	push	{r4, r5, r7, lr}
10051032:	b08c      	sub	sp, #48	@ 0x30
10051034:	af00      	add	r7, sp, #0
10051036:	0002      	movs	r2, r0
10051038:	1dfb      	adds	r3, r7, #7
1005103a:	701a      	strb	r2, [r3, #0]
  {
    return NVMDB_STATUS_CACHE_OP_PENDING;
  }
#endif

  type = GetDBType(NVMDB_id, &smallDBContainer_p);
1005103c:	252b      	movs	r5, #43	@ 0x2b
1005103e:	197c      	adds	r4, r7, r5
10051040:	2318      	movs	r3, #24
10051042:	18fa      	adds	r2, r7, r3
10051044:	1dfb      	adds	r3, r7, #7
10051046:	781b      	ldrb	r3, [r3, #0]
10051048:	0011      	movs	r1, r2
1005104a:	0018      	movs	r0, r3
1005104c:	f7ff fbc6 	bl	100507dc <GetDBType>
10051050:	0003      	movs	r3, r0
10051052:	7023      	strb	r3, [r4, #0]

  if(type == LARGE_DB)
10051054:	197b      	adds	r3, r7, r5
10051056:	781b      	ldrb	r3, [r3, #0]
10051058:	2b02      	cmp	r3, #2
1005105a:	d146      	bne.n	100510ea <NVMDB_Erase+0xba>
  {
    uint8_t page_num_start, num_pages;
    uint32_t start_address = DBInfo[NVMDB_id].start_address;
1005105c:	1dfb      	adds	r3, r7, #7
1005105e:	781a      	ldrb	r2, [r3, #0]
10051060:	4942      	ldr	r1, [pc, #264]	@ (1005116c <NVMDB_Erase+0x13c>)
10051062:	0013      	movs	r3, r2
10051064:	009b      	lsls	r3, r3, #2
10051066:	189b      	adds	r3, r3, r2
10051068:	009b      	lsls	r3, r3, #2
1005106a:	585b      	ldr	r3, [r3, r1]
1005106c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t end_address = DBInfo[NVMDB_id].end_address;
1005106e:	1dfb      	adds	r3, r7, #7
10051070:	781a      	ldrb	r2, [r3, #0]
10051072:	493e      	ldr	r1, [pc, #248]	@ (1005116c <NVMDB_Erase+0x13c>)
10051074:	0013      	movs	r3, r2
10051076:	009b      	lsls	r3, r3, #2
10051078:	189b      	adds	r3, r3, r2
1005107a:	009b      	lsls	r3, r3, #2
1005107c:	18cb      	adds	r3, r1, r3
1005107e:	3304      	adds	r3, #4
10051080:	681b      	ldr	r3, [r3, #0]
10051082:	623b      	str	r3, [r7, #32]

    page_num_start = (start_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10051084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051086:	4a3a      	ldr	r2, [pc, #232]	@ (10051170 <NVMDB_Erase+0x140>)
10051088:	4694      	mov	ip, r2
1005108a:	4463      	add	r3, ip
1005108c:	0ada      	lsrs	r2, r3, #11
1005108e:	201f      	movs	r0, #31
10051090:	183b      	adds	r3, r7, r0
10051092:	701a      	strb	r2, [r3, #0]
    num_pages = (ROUNDPAGE_R(end_address) - start_address) / PAGE_SIZE;
10051094:	6a3b      	ldr	r3, [r7, #32]
10051096:	3b01      	subs	r3, #1
10051098:	4a36      	ldr	r2, [pc, #216]	@ (10051174 <NVMDB_Erase+0x144>)
1005109a:	431a      	orrs	r2, r3
1005109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1005109e:	1ad3      	subs	r3, r2, r3
100510a0:	3301      	adds	r3, #1
100510a2:	0ada      	lsrs	r2, r3, #11
100510a4:	241e      	movs	r4, #30
100510a6:	193b      	adds	r3, r7, r4
100510a8:	701a      	strb	r2, [r3, #0]
      return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
    }

#else

    NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
100510aa:	210c      	movs	r1, #12
100510ac:	187b      	adds	r3, r7, r1
100510ae:	2200      	movs	r2, #0
100510b0:	601a      	str	r2, [r3, #0]
100510b2:	183b      	adds	r3, r7, r0
100510b4:	781a      	ldrb	r2, [r3, #0]
100510b6:	187b      	adds	r3, r7, r1
100510b8:	605a      	str	r2, [r3, #4]
100510ba:	193b      	adds	r3, r7, r4
100510bc:	781a      	ldrb	r2, [r3, #0]
100510be:	187b      	adds	r3, r7, r1
100510c0:	609a      	str	r2, [r3, #8]
100510c2:	2308      	movs	r3, #8
100510c4:	18fa      	adds	r2, r7, r3
100510c6:	187b      	adds	r3, r7, r1
100510c8:	0011      	movs	r1, r2
100510ca:	0018      	movs	r0, r3
100510cc:	f7f7 f87a 	bl	100481c4 <HAL_FLASHEx_Erase>

#endif

    NVMDB_get_info(&DBInfo[NVMDB_id]);
100510d0:	1dfb      	adds	r3, r7, #7
100510d2:	781a      	ldrb	r2, [r3, #0]
100510d4:	0013      	movs	r3, r2
100510d6:	009b      	lsls	r3, r3, #2
100510d8:	189b      	adds	r3, r3, r2
100510da:	009b      	lsls	r3, r3, #2
100510dc:	4a23      	ldr	r2, [pc, #140]	@ (1005116c <NVMDB_Erase+0x13c>)
100510de:	189b      	adds	r3, r3, r2
100510e0:	0018      	movs	r0, r3
100510e2:	f7fe fd23 	bl	1004fb2c <NVMDB_get_info>

    return NVMDB_STATUS_OK;
100510e6:	2300      	movs	r3, #0
100510e8:	e03b      	b.n	10051162 <NVMDB_Erase+0x132>
  }

  if(type == SMALL_DB)
100510ea:	232b      	movs	r3, #43	@ 0x2b
100510ec:	18fb      	adds	r3, r7, r3
100510ee:	781b      	ldrb	r3, [r3, #0]
100510f0:	2b01      	cmp	r3, #1
100510f2:	d135      	bne.n	10051160 <NVMDB_Erase+0x130>
  {

    status = EraseSmallDB(NVMDB_id, smallDBContainer_p);
100510f4:	69ba      	ldr	r2, [r7, #24]
100510f6:	252a      	movs	r5, #42	@ 0x2a
100510f8:	197c      	adds	r4, r7, r5
100510fa:	1dfb      	adds	r3, r7, #7
100510fc:	781b      	ldrb	r3, [r3, #0]
100510fe:	0011      	movs	r1, r2
10051100:	0018      	movs	r0, r3
10051102:	f7ff fbd9 	bl	100508b8 <EraseSmallDB>
10051106:	0003      	movs	r3, r0
10051108:	7023      	strb	r3, [r4, #0]

    if(status == NVMDB_STATUS_OK)
1005110a:	197b      	adds	r3, r7, r5
1005110c:	781b      	ldrb	r3, [r3, #0]
1005110e:	2b00      	cmp	r3, #0
10051110:	d122      	bne.n	10051158 <NVMDB_Erase+0x128>
    {
      // Remove any operations in cache for all the DBs in the page. This means write and delete operations.
      // Cache operations for all the DBs in the same page have been executed by LoadDBToRAM().
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
10051112:	2300      	movs	r3, #0
10051114:	62fb      	str	r3, [r7, #44]	@ 0x2c
10051116:	e019      	b.n	1005114c <NVMDB_Erase+0x11c>
      {
        NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
10051118:	69bb      	ldr	r3, [r7, #24]
1005111a:	6899      	ldr	r1, [r3, #8]
1005111c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
1005111e:	0013      	movs	r3, r2
10051120:	005b      	lsls	r3, r3, #1
10051122:	189b      	adds	r3, r3, r2
10051124:	009b      	lsls	r3, r3, #2
10051126:	18ca      	adds	r2, r1, r3
10051128:	2129      	movs	r1, #41	@ 0x29
1005112a:	187b      	adds	r3, r7, r1
1005112c:	7812      	ldrb	r2, [r2, #0]
1005112e:	701a      	strb	r2, [r3, #0]
#if NVM_CACHE
        RemoveCacheOp(id);
#endif
        NVMDB_get_info(&DBInfo[id]);
10051130:	187b      	adds	r3, r7, r1
10051132:	781a      	ldrb	r2, [r3, #0]
10051134:	0013      	movs	r3, r2
10051136:	009b      	lsls	r3, r3, #2
10051138:	189b      	adds	r3, r3, r2
1005113a:	009b      	lsls	r3, r3, #2
1005113c:	4a0b      	ldr	r2, [pc, #44]	@ (1005116c <NVMDB_Erase+0x13c>)
1005113e:	189b      	adds	r3, r3, r2
10051140:	0018      	movs	r0, r3
10051142:	f7fe fcf3 	bl	1004fb2c <NVMDB_get_info>
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
10051146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10051148:	3301      	adds	r3, #1
1005114a:	62fb      	str	r3, [r7, #44]	@ 0x2c
1005114c:	69bb      	ldr	r3, [r7, #24]
1005114e:	791b      	ldrb	r3, [r3, #4]
10051150:	001a      	movs	r2, r3
10051152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10051154:	4293      	cmp	r3, r2
10051156:	dbdf      	blt.n	10051118 <NVMDB_Erase+0xe8>
#if NVM_CACHE
      return ScheduleSmallDBEraseOperation(NVMDB_id, smallDBContainer_p);
#endif
    }

    return status;
10051158:	232a      	movs	r3, #42	@ 0x2a
1005115a:	18fb      	adds	r3, r7, r3
1005115c:	781b      	ldrb	r3, [r3, #0]
1005115e:	e000      	b.n	10051162 <NVMDB_Erase+0x132>
  }

  return NVMDB_STATUS_INVALID_ID;
10051160:	2301      	movs	r3, #1
}
10051162:	0018      	movs	r0, r3
10051164:	46bd      	mov	sp, r7
10051166:	b00c      	add	sp, #48	@ 0x30
10051168:	bdb0      	pop	{r4, r5, r7, pc}
1005116a:	46c0      	nop			@ (mov r8, r8)
1005116c:	200022ac 	.word	0x200022ac
10051170:	effc0000 	.word	0xeffc0000
10051174:	000007ff 	.word	0x000007ff

10051178 <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
10051178:	b5b0      	push	{r4, r5, r7, lr}
1005117a:	b084      	sub	sp, #16
1005117c:	af00      	add	r7, sp, #0
1005117e:	0002      	movs	r2, r0
10051180:	1dfb      	adds	r3, r7, #7
10051182:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
10051184:	250f      	movs	r5, #15
10051186:	197c      	adds	r4, r7, r5
10051188:	2308      	movs	r3, #8
1005118a:	18fa      	adds	r2, r7, r3
1005118c:	1dfb      	adds	r3, r7, #7
1005118e:	781b      	ldrb	r3, [r3, #0]
10051190:	0011      	movs	r1, r2
10051192:	0018      	movs	r0, r3
10051194:	f7ff fb22 	bl	100507dc <GetDBType>
10051198:	0003      	movs	r3, r0
1005119a:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
1005119c:	197b      	adds	r3, r7, r5
1005119e:	781b      	ldrb	r3, [r3, #0]
100511a0:	2b02      	cmp	r3, #2
100511a2:	d106      	bne.n	100511b2 <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
100511a4:	1dfb      	adds	r3, r7, #7
100511a6:	781b      	ldrb	r3, [r3, #0]
100511a8:	0018      	movs	r0, r3
100511aa:	f7ff f92f 	bl	1005040c <CleanLargeDB>
100511ae:	0003      	movs	r3, r0
100511b0:	e00b      	b.n	100511ca <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
100511b2:	230f      	movs	r3, #15
100511b4:	18fb      	adds	r3, r7, r3
100511b6:	781b      	ldrb	r3, [r3, #0]
100511b8:	2b01      	cmp	r3, #1
100511ba:	d105      	bne.n	100511c8 <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
100511bc:	68bb      	ldr	r3, [r7, #8]
100511be:	0018      	movs	r0, r3
100511c0:	f7ff fa02 	bl	100505c8 <CleanPage>
100511c4:	0003      	movs	r3, r0
100511c6:	e000      	b.n	100511ca <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
100511c8:	2301      	movs	r3, #1
}
100511ca:	0018      	movs	r0, r3
100511cc:	46bd      	mov	sp, r7
100511ce:	b004      	add	sp, #16
100511d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

100511d4 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
100511d4:	b590      	push	{r4, r7, lr}
100511d6:	b083      	sub	sp, #12
100511d8:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
100511da:	1dfc      	adds	r4, r7, #7
100511dc:	f000 f816 	bl	1005120c <NVMDB_CleanCheck>
100511e0:	0003      	movs	r3, r0
100511e2:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
100511e4:	1dfb      	adds	r3, r7, #7
100511e6:	781b      	ldrb	r3, [r3, #0]
100511e8:	2b7f      	cmp	r3, #127	@ 0x7f
100511ea:	d808      	bhi.n	100511fe <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
100511ec:	1dfb      	adds	r3, r7, #7
100511ee:	781b      	ldrb	r3, [r3, #0]
100511f0:	0018      	movs	r0, r3
100511f2:	f7ff ffc1 	bl	10051178 <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
100511f6:	4b04      	ldr	r3, [pc, #16]	@ (10051208 <NVMDB_Tick+0x34>)
100511f8:	0018      	movs	r0, r3
100511fa:	f016 fd03 	bl	10067c04 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
100511fe:	2300      	movs	r3, #0
}
10051200:	0018      	movs	r0, r3
10051202:	46bd      	mov	sp, r7
10051204:	b003      	add	sp, #12
10051206:	bd90      	pop	{r4, r7, pc}
10051208:	10068fd4 	.word	0x10068fd4

1005120c <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
1005120c:	b580      	push	{r7, lr}
1005120e:	b082      	sub	sp, #8
10051210:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
10051212:	4b2b      	ldr	r3, [pc, #172]	@ (100512c0 <NVMDB_CleanCheck+0xb4>)
10051214:	2200      	movs	r2, #0
10051216:	569a      	ldrsb	r2, [r3, r2]
10051218:	1dfb      	adds	r3, r7, #7
1005121a:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
1005121c:	1dfb      	adds	r3, r7, #7
1005121e:	781a      	ldrb	r2, [r3, #0]
10051220:	4928      	ldr	r1, [pc, #160]	@ (100512c4 <NVMDB_CleanCheck+0xb8>)
10051222:	0013      	movs	r3, r2
10051224:	009b      	lsls	r3, r3, #2
10051226:	189b      	adds	r3, r3, r2
10051228:	009b      	lsls	r3, r3, #2
1005122a:	18cb      	adds	r3, r1, r3
1005122c:	330a      	adds	r3, #10
1005122e:	881b      	ldrh	r3, [r3, #0]
10051230:	2b00      	cmp	r3, #0
10051232:	d028      	beq.n	10051286 <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
10051234:	1dfb      	adds	r3, r7, #7
10051236:	781a      	ldrb	r2, [r3, #0]
10051238:	4922      	ldr	r1, [pc, #136]	@ (100512c4 <NVMDB_CleanCheck+0xb8>)
1005123a:	0013      	movs	r3, r2
1005123c:	009b      	lsls	r3, r3, #2
1005123e:	189b      	adds	r3, r3, r2
10051240:	009b      	lsls	r3, r3, #2
10051242:	18cb      	adds	r3, r1, r3
10051244:	330c      	adds	r3, #12
10051246:	8819      	ldrh	r1, [r3, #0]
10051248:	1dfb      	adds	r3, r7, #7
1005124a:	781a      	ldrb	r2, [r3, #0]
1005124c:	481d      	ldr	r0, [pc, #116]	@ (100512c4 <NVMDB_CleanCheck+0xb8>)
1005124e:	0013      	movs	r3, r2
10051250:	009b      	lsls	r3, r3, #2
10051252:	189b      	adds	r3, r3, r2
10051254:	009b      	lsls	r3, r3, #2
10051256:	18c3      	adds	r3, r0, r3
10051258:	3310      	adds	r3, #16
1005125a:	881b      	ldrh	r3, [r3, #0]
1005125c:	4299      	cmp	r1, r3
1005125e:	d212      	bcs.n	10051286 <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
10051260:	1dfb      	adds	r3, r7, #7
10051262:	781b      	ldrb	r3, [r3, #0]
10051264:	3301      	adds	r3, #1
10051266:	b2db      	uxtb	r3, r3
10051268:	b25a      	sxtb	r2, r3
1005126a:	4b15      	ldr	r3, [pc, #84]	@ (100512c0 <NVMDB_CleanCheck+0xb4>)
1005126c:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
1005126e:	4b14      	ldr	r3, [pc, #80]	@ (100512c0 <NVMDB_CleanCheck+0xb4>)
10051270:	781b      	ldrb	r3, [r3, #0]
10051272:	b25b      	sxtb	r3, r3
10051274:	2b02      	cmp	r3, #2
10051276:	d102      	bne.n	1005127e <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
10051278:	4b11      	ldr	r3, [pc, #68]	@ (100512c0 <NVMDB_CleanCheck+0xb4>)
1005127a:	2200      	movs	r2, #0
1005127c:	701a      	strb	r2, [r3, #0]
        }
        return i;
1005127e:	1dfb      	adds	r3, r7, #7
10051280:	781b      	ldrb	r3, [r3, #0]
10051282:	b25b      	sxtb	r3, r3
10051284:	e017      	b.n	100512b6 <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
10051286:	1dfb      	adds	r3, r7, #7
10051288:	781a      	ldrb	r2, [r3, #0]
1005128a:	1dfb      	adds	r3, r7, #7
1005128c:	3201      	adds	r2, #1
1005128e:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
10051290:	1dfb      	adds	r3, r7, #7
10051292:	781b      	ldrb	r3, [r3, #0]
10051294:	2b02      	cmp	r3, #2
10051296:	d102      	bne.n	1005129e <NVMDB_CleanCheck+0x92>
    {
      i = 0;
10051298:	1dfb      	adds	r3, r7, #7
1005129a:	2200      	movs	r2, #0
1005129c:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
1005129e:	1dfb      	adds	r3, r7, #7
100512a0:	781b      	ldrb	r3, [r3, #0]
100512a2:	4a07      	ldr	r2, [pc, #28]	@ (100512c0 <NVMDB_CleanCheck+0xb4>)
100512a4:	7812      	ldrb	r2, [r2, #0]
100512a6:	b252      	sxtb	r2, r2
100512a8:	4293      	cmp	r3, r2
100512aa:	d1b7      	bne.n	1005121c <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
100512ac:	4b04      	ldr	r3, [pc, #16]	@ (100512c0 <NVMDB_CleanCheck+0xb4>)
100512ae:	2200      	movs	r2, #0
100512b0:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
100512b2:	2301      	movs	r3, #1
100512b4:	425b      	negs	r3, r3
}
100512b6:	0018      	movs	r0, r3
100512b8:	46bd      	mov	sp, r7
100512ba:	b002      	add	sp, #8
100512bc:	bd80      	pop	{r7, pc}
100512be:	46c0      	nop			@ (mov r8, r8)
100512c0:	200022d4 	.word	0x200022d4
100512c4:	200022ac 	.word	0x200022ac

100512c8 <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
100512c8:	b580      	push	{r7, lr}
100512ca:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
100512cc:	4b03      	ldr	r3, [pc, #12]	@ (100512dc <PKAMGR_Init+0x14>)
100512ce:	2201      	movs	r2, #1
100512d0:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
100512d2:	2300      	movs	r3, #0
}
100512d4:	0018      	movs	r0, r3
100512d6:	46bd      	mov	sp, r7
100512d8:	bd80      	pop	{r7, pc}
100512da:	46c0      	nop			@ (mov r8, r8)
100512dc:	2000272c 	.word	0x2000272c

100512e0 <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
100512e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100512e2:	b087      	sub	sp, #28
100512e4:	af00      	add	r7, sp, #0
100512e6:	60ba      	str	r2, [r7, #8]
100512e8:	607b      	str	r3, [r7, #4]
100512ea:	240f      	movs	r4, #15
100512ec:	193b      	adds	r3, r7, r4
100512ee:	1c02      	adds	r2, r0, #0
100512f0:	701a      	strb	r2, [r3, #0]
100512f2:	230e      	movs	r3, #14
100512f4:	18fb      	adds	r3, r7, r3
100512f6:	1c0a      	adds	r2, r1, #0
100512f8:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gap_srvc_handle;
  
  *Dev_Name_Char_Handle = 0x0000;
100512fa:	68bb      	ldr	r3, [r7, #8]
100512fc:	2200      	movs	r2, #0
100512fe:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle= 0x0000;
10051300:	687b      	ldr	r3, [r7, #4]
10051302:	2200      	movs	r2, #0
10051304:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = 0x0000;
10051306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10051308:	2200      	movs	r2, #0
1005130a:	801a      	strh	r2, [r3, #0]
  
  if ((Role & (GAP_PERIPHERAL_ROLE | GAP_CENTRAL_ROLE)) != 0x0U)
1005130c:	193b      	adds	r3, r7, r4
1005130e:	781b      	ldrb	r3, [r3, #0]
10051310:	2205      	movs	r2, #5
10051312:	4013      	ands	r3, r2
10051314:	d046      	beq.n	100513a4 <aci_gap_profile_init+0xc4>
  {
    /**
    * Register GAP service.
    * Device Name and Appearance Characteristics will be also registered.
    */
    ret = aci_gatt_srv_add_service(&gap_srvc);
10051316:	2517      	movs	r5, #23
10051318:	197c      	adds	r4, r7, r5
1005131a:	4b25      	ldr	r3, [pc, #148]	@ (100513b0 <aci_gap_profile_init+0xd0>)
1005131c:	0018      	movs	r0, r3
1005131e:	f7fe f8c9 	bl	1004f4b4 <aci_gatt_srv_add_service>
10051322:	0003      	movs	r3, r0
10051324:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
10051326:	197b      	adds	r3, r7, r5
10051328:	781b      	ldrb	r3, [r3, #0]
1005132a:	2b00      	cmp	r3, #0
1005132c:	d002      	beq.n	10051334 <aci_gap_profile_init+0x54>
    {
      return ret;
1005132e:	197b      	adds	r3, r7, r5
10051330:	781b      	ldrb	r3, [r3, #0]
10051332:	e038      	b.n	100513a6 <aci_gap_profile_init+0xc6>
    }
    
    *Dev_Name_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]);
10051334:	4b1f      	ldr	r3, [pc, #124]	@ (100513b4 <aci_gap_profile_init+0xd4>)
10051336:	0018      	movs	r0, r3
10051338:	f7fe f8e9 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
1005133c:	0003      	movs	r3, r0
1005133e:	001a      	movs	r2, r3
10051340:	68bb      	ldr	r3, [r7, #8]
10051342:	801a      	strh	r2, [r3, #0]
    *Appearance_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]);
10051344:	4b1c      	ldr	r3, [pc, #112]	@ (100513b8 <aci_gap_profile_init+0xd8>)
10051346:	0018      	movs	r0, r3
10051348:	f7fe f8e1 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
1005134c:	0003      	movs	r3, r0
1005134e:	001a      	movs	r2, r3
10051350:	687b      	ldr	r3, [r7, #4]
10051352:	801a      	strh	r2, [r3, #0]
    
    gap_srvc_handle = aci_gatt_srv_get_service_handle(&gap_srvc);
10051354:	2614      	movs	r6, #20
10051356:	19bc      	adds	r4, r7, r6
10051358:	4b15      	ldr	r3, [pc, #84]	@ (100513b0 <aci_gap_profile_init+0xd0>)
1005135a:	0018      	movs	r0, r3
1005135c:	f7fe f8b7 	bl	1004f4ce <aci_gatt_srv_get_service_handle>
10051360:	0003      	movs	r3, r0
10051362:	8023      	strh	r3, [r4, #0]
      }
    }
    
    *Periph_Pref_Conn_Param_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[2U]);
#else
    *Periph_Pref_Conn_Param_Char_Handle = 0;
10051364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10051366:	2200      	movs	r2, #0
10051368:	801a      	strh	r2, [r3, #0]
#endif    
    
    if (Privacy_Type == 2U)
1005136a:	230e      	movs	r3, #14
1005136c:	18fb      	adds	r3, r7, r3
1005136e:	781b      	ldrb	r3, [r3, #0]
10051370:	2b02      	cmp	r3, #2
10051372:	d111      	bne.n	10051398 <aci_gap_profile_init+0xb8>
    {
      /**
      * Register Central Address Resolution Characteristic.
      */
      ret = aci_gatt_srv_add_char(&gap_chrs[3U], gap_srvc_handle);
10051374:	2517      	movs	r5, #23
10051376:	197c      	adds	r4, r7, r5
10051378:	19bb      	adds	r3, r7, r6
1005137a:	881a      	ldrh	r2, [r3, #0]
1005137c:	4b0f      	ldr	r3, [pc, #60]	@ (100513bc <aci_gap_profile_init+0xdc>)
1005137e:	0011      	movs	r1, r2
10051380:	0018      	movs	r0, r3
10051382:	f7fe f8b1 	bl	1004f4e8 <aci_gatt_srv_add_char>
10051386:	0003      	movs	r3, r0
10051388:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
1005138a:	197b      	adds	r3, r7, r5
1005138c:	781b      	ldrb	r3, [r3, #0]
1005138e:	2b00      	cmp	r3, #0
10051390:	d002      	beq.n	10051398 <aci_gap_profile_init+0xb8>
      {
        return ret;
10051392:	197b      	adds	r3, r7, r5
10051394:	781b      	ldrb	r3, [r3, #0]
10051396:	e006      	b.n	100513a6 <aci_gap_profile_init+0xc6>
#endif /* CFG_BLE_GAP_ENCRYPTED_KEY_MATERIAL_CHARACTERISTIC */
    
    /**
    * Set default device name.
    */
    Gap_profile_set_dev_name(0U, sizeof(default_dev_name),
10051398:	4b09      	ldr	r3, [pc, #36]	@ (100513c0 <aci_gap_profile_init+0xe0>)
1005139a:	001a      	movs	r2, r3
1005139c:	2108      	movs	r1, #8
1005139e:	2000      	movs	r0, #0
100513a0:	f000 f810 	bl	100513c4 <Gap_profile_set_dev_name>
                             (uint8_t *)default_dev_name);
    
  }
  
  return BLE_STATUS_SUCCESS;
100513a4:	2300      	movs	r3, #0
}
100513a6:	0018      	movs	r0, r3
100513a8:	46bd      	mov	sp, r7
100513aa:	b007      	add	sp, #28
100513ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100513ae:	46c0      	nop			@ (mov r8, r8)
100513b0:	200027fc 	.word	0x200027fc
100513b4:	20002748 	.word	0x20002748
100513b8:	2000276c 	.word	0x2000276c
100513bc:	200027b4 	.word	0x200027b4
100513c0:	1006982c 	.word	0x1006982c

100513c4 <Gap_profile_set_dev_name>:

tBleStatus Gap_profile_set_dev_name(uint16_t offset,
                                    uint16_t length,
                                    uint8_t *dev_name_p)
{
100513c4:	b590      	push	{r4, r7, lr}
100513c6:	b085      	sub	sp, #20
100513c8:	af00      	add	r7, sp, #0
100513ca:	603a      	str	r2, [r7, #0]
100513cc:	1dbb      	adds	r3, r7, #6
100513ce:	1c02      	adds	r2, r0, #0
100513d0:	801a      	strh	r2, [r3, #0]
100513d2:	1d3b      	adds	r3, r7, #4
100513d4:	1c0a      	adds	r2, r1, #0
100513d6:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]) + 1U;
100513d8:	4b0c      	ldr	r3, [pc, #48]	@ (1005140c <Gap_profile_set_dev_name+0x48>)
100513da:	0018      	movs	r0, r3
100513dc:	f7fe f897 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
100513e0:	0003      	movs	r3, r0
100513e2:	001a      	movs	r2, r3
100513e4:	200e      	movs	r0, #14
100513e6:	183b      	adds	r3, r7, r0
100513e8:	3201      	adds	r2, #1
100513ea:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, dev_name_p);
100513ec:	683c      	ldr	r4, [r7, #0]
100513ee:	1d3b      	adds	r3, r7, #4
100513f0:	881a      	ldrh	r2, [r3, #0]
100513f2:	1dbb      	adds	r3, r7, #6
100513f4:	8819      	ldrh	r1, [r3, #0]
100513f6:	183b      	adds	r3, r7, r0
100513f8:	8818      	ldrh	r0, [r3, #0]
100513fa:	0023      	movs	r3, r4
100513fc:	f000 f82e 	bl	1005145c <Gap_profile_set_char_value>
10051400:	0003      	movs	r3, r0
}
10051402:	0018      	movs	r0, r3
10051404:	46bd      	mov	sp, r7
10051406:	b005      	add	sp, #20
10051408:	bd90      	pop	{r4, r7, pc}
1005140a:	46c0      	nop			@ (mov r8, r8)
1005140c:	20002748 	.word	0x20002748

10051410 <Gap_profile_set_appearance>:

tBleStatus Gap_profile_set_appearance(uint16_t offset,
                                      uint16_t length,
                                      uint8_t *appearance_p)
{
10051410:	b590      	push	{r4, r7, lr}
10051412:	b085      	sub	sp, #20
10051414:	af00      	add	r7, sp, #0
10051416:	603a      	str	r2, [r7, #0]
10051418:	1dbb      	adds	r3, r7, #6
1005141a:	1c02      	adds	r2, r0, #0
1005141c:	801a      	strh	r2, [r3, #0]
1005141e:	1d3b      	adds	r3, r7, #4
10051420:	1c0a      	adds	r2, r1, #0
10051422:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]) + 1U;
10051424:	4b0c      	ldr	r3, [pc, #48]	@ (10051458 <Gap_profile_set_appearance+0x48>)
10051426:	0018      	movs	r0, r3
10051428:	f7fe f871 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
1005142c:	0003      	movs	r3, r0
1005142e:	001a      	movs	r2, r3
10051430:	200e      	movs	r0, #14
10051432:	183b      	adds	r3, r7, r0
10051434:	3201      	adds	r2, #1
10051436:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, appearance_p);
10051438:	683c      	ldr	r4, [r7, #0]
1005143a:	1d3b      	adds	r3, r7, #4
1005143c:	881a      	ldrh	r2, [r3, #0]
1005143e:	1dbb      	adds	r3, r7, #6
10051440:	8819      	ldrh	r1, [r3, #0]
10051442:	183b      	adds	r3, r7, r0
10051444:	8818      	ldrh	r0, [r3, #0]
10051446:	0023      	movs	r3, r4
10051448:	f000 f808 	bl	1005145c <Gap_profile_set_char_value>
1005144c:	0003      	movs	r3, r0
}
1005144e:	0018      	movs	r0, r3
10051450:	46bd      	mov	sp, r7
10051452:	b005      	add	sp, #20
10051454:	bd90      	pop	{r4, r7, pc}
10051456:	46c0      	nop			@ (mov r8, r8)
10051458:	2000276c 	.word	0x2000276c

1005145c <Gap_profile_set_char_value>:

tBleStatus Gap_profile_set_char_value(uint16_t attr_h,
                                      uint16_t val_offset,
                                      uint16_t val_length,
                                      uint8_t *val_p)
{
1005145c:	b5b0      	push	{r4, r5, r7, lr}
1005145e:	b086      	sub	sp, #24
10051460:	af00      	add	r7, sp, #0
10051462:	0004      	movs	r4, r0
10051464:	0008      	movs	r0, r1
10051466:	0011      	movs	r1, r2
10051468:	607b      	str	r3, [r7, #4]
1005146a:	230e      	movs	r3, #14
1005146c:	18fb      	adds	r3, r7, r3
1005146e:	1c22      	adds	r2, r4, #0
10051470:	801a      	strh	r2, [r3, #0]
10051472:	230c      	movs	r3, #12
10051474:	18fb      	adds	r3, r7, r3
10051476:	1c02      	adds	r2, r0, #0
10051478:	801a      	strh	r2, [r3, #0]
1005147a:	230a      	movs	r3, #10
1005147c:	18fb      	adds	r3, r7, r3
1005147e:	1c0a      	adds	r2, r1, #0
10051480:	801a      	strh	r2, [r3, #0]
    uint16_t handle;

    /**
     * Search for GAP characteristic.
     */
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
10051482:	2317      	movs	r3, #23
10051484:	18fb      	adds	r3, r7, r3
10051486:	2200      	movs	r2, #0
10051488:	701a      	strb	r2, [r3, #0]
1005148a:	e021      	b.n	100514d0 <Gap_profile_set_char_value+0x74>
    {
        handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[i]);
1005148c:	2317      	movs	r3, #23
1005148e:	18fb      	adds	r3, r7, r3
10051490:	781a      	ldrb	r2, [r3, #0]
10051492:	0013      	movs	r3, r2
10051494:	00db      	lsls	r3, r3, #3
10051496:	189b      	adds	r3, r3, r2
10051498:	009b      	lsls	r3, r3, #2
1005149a:	4a43      	ldr	r2, [pc, #268]	@ (100515a8 <Gap_profile_set_char_value+0x14c>)
1005149c:	189b      	adds	r3, r3, r2
1005149e:	2514      	movs	r5, #20
100514a0:	197c      	adds	r4, r7, r5
100514a2:	0018      	movs	r0, r3
100514a4:	f7fe f833 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
100514a8:	0003      	movs	r3, r0
100514aa:	8023      	strh	r3, [r4, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
100514ac:	197b      	adds	r3, r7, r5
100514ae:	881b      	ldrh	r3, [r3, #0]
100514b0:	2b00      	cmp	r3, #0
100514b2:	d007      	beq.n	100514c4 <Gap_profile_set_char_value+0x68>
            ((handle + 1U) == attr_h))
100514b4:	197b      	adds	r3, r7, r5
100514b6:	881b      	ldrh	r3, [r3, #0]
100514b8:	1c5a      	adds	r2, r3, #1
100514ba:	230e      	movs	r3, #14
100514bc:	18fb      	adds	r3, r7, r3
100514be:	881b      	ldrh	r3, [r3, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
100514c0:	429a      	cmp	r2, r3
100514c2:	d00b      	beq.n	100514dc <Gap_profile_set_char_value+0x80>
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
100514c4:	2117      	movs	r1, #23
100514c6:	187b      	adds	r3, r7, r1
100514c8:	781a      	ldrb	r2, [r3, #0]
100514ca:	187b      	adds	r3, r7, r1
100514cc:	3201      	adds	r2, #1
100514ce:	701a      	strb	r2, [r3, #0]
100514d0:	2317      	movs	r3, #23
100514d2:	18fb      	adds	r3, r7, r3
100514d4:	781b      	ldrb	r3, [r3, #0]
100514d6:	2b04      	cmp	r3, #4
100514d8:	d9d8      	bls.n	1005148c <Gap_profile_set_char_value+0x30>
100514da:	e000      	b.n	100514de <Gap_profile_set_char_value+0x82>
        {
            break;
100514dc:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (i == (sizeof(gap_chrs) / sizeof(gap_chrs[0U])))
100514de:	2317      	movs	r3, #23
100514e0:	18fb      	adds	r3, r7, r3
100514e2:	781b      	ldrb	r3, [r3, #0]
100514e4:	2b05      	cmp	r3, #5
100514e6:	d101      	bne.n	100514ec <Gap_profile_set_char_value+0x90>
    {
        /**
         * The given attribute handle is not registered for GAP service.
         */
        return BLE_STATUS_INVALID_PARAMS;
100514e8:	2312      	movs	r3, #18
100514ea:	e059      	b.n	100515a0 <Gap_profile_set_char_value+0x144>
    }

    if ((val_offset + val_length) > gap_chrs[i].val_buffer_p->buffer_len)
100514ec:	230c      	movs	r3, #12
100514ee:	18fb      	adds	r3, r7, r3
100514f0:	881a      	ldrh	r2, [r3, #0]
100514f2:	230a      	movs	r3, #10
100514f4:	18fb      	adds	r3, r7, r3
100514f6:	881b      	ldrh	r3, [r3, #0]
100514f8:	18d1      	adds	r1, r2, r3
100514fa:	2317      	movs	r3, #23
100514fc:	18fb      	adds	r3, r7, r3
100514fe:	781a      	ldrb	r2, [r3, #0]
10051500:	4829      	ldr	r0, [pc, #164]	@ (100515a8 <Gap_profile_set_char_value+0x14c>)
10051502:	0013      	movs	r3, r2
10051504:	00db      	lsls	r3, r3, #3
10051506:	189b      	adds	r3, r3, r2
10051508:	009b      	lsls	r3, r3, #2
1005150a:	18c3      	adds	r3, r0, r3
1005150c:	3320      	adds	r3, #32
1005150e:	681b      	ldr	r3, [r3, #0]
10051510:	889b      	ldrh	r3, [r3, #4]
10051512:	4299      	cmp	r1, r3
10051514:	dd01      	ble.n	1005151a <Gap_profile_set_char_value+0xbe>
    {
        /**
         * Invalid value length.
         */
        return BLE_STATUS_INVALID_PARAMS;
10051516:	2312      	movs	r3, #18
10051518:	e042      	b.n	100515a0 <Gap_profile_set_char_value+0x144>
    }
    
    if(gap_chrs[i].val_buffer_p == NULL)
1005151a:	2317      	movs	r3, #23
1005151c:	18fb      	adds	r3, r7, r3
1005151e:	781a      	ldrb	r2, [r3, #0]
10051520:	4921      	ldr	r1, [pc, #132]	@ (100515a8 <Gap_profile_set_char_value+0x14c>)
10051522:	0013      	movs	r3, r2
10051524:	00db      	lsls	r3, r3, #3
10051526:	189b      	adds	r3, r3, r2
10051528:	009b      	lsls	r3, r3, #2
1005152a:	18cb      	adds	r3, r1, r3
1005152c:	3320      	adds	r3, #32
1005152e:	681b      	ldr	r3, [r3, #0]
10051530:	2b00      	cmp	r3, #0
10051532:	d101      	bne.n	10051538 <Gap_profile_set_char_value+0xdc>
    {
      /**
       * The given attribute handle is not related to a buffered characteristic.
       */
      return BLE_STATUS_INVALID_PARAMS;
10051534:	2312      	movs	r3, #18
10051536:	e033      	b.n	100515a0 <Gap_profile_set_char_value+0x144>
    }

    /**
     * Write characteristic value.
     */
    memcpy(&gap_chrs[i].val_buffer_p->buffer_p[val_offset], val_p, val_length);
10051538:	2417      	movs	r4, #23
1005153a:	193b      	adds	r3, r7, r4
1005153c:	781a      	ldrb	r2, [r3, #0]
1005153e:	491a      	ldr	r1, [pc, #104]	@ (100515a8 <Gap_profile_set_char_value+0x14c>)
10051540:	0013      	movs	r3, r2
10051542:	00db      	lsls	r3, r3, #3
10051544:	189b      	adds	r3, r3, r2
10051546:	009b      	lsls	r3, r3, #2
10051548:	18cb      	adds	r3, r1, r3
1005154a:	3320      	adds	r3, #32
1005154c:	681b      	ldr	r3, [r3, #0]
1005154e:	689a      	ldr	r2, [r3, #8]
10051550:	230c      	movs	r3, #12
10051552:	18fb      	adds	r3, r7, r3
10051554:	881b      	ldrh	r3, [r3, #0]
10051556:	18d0      	adds	r0, r2, r3
10051558:	250a      	movs	r5, #10
1005155a:	197b      	adds	r3, r7, r5
1005155c:	881a      	ldrh	r2, [r3, #0]
1005155e:	687b      	ldr	r3, [r7, #4]
10051560:	0019      	movs	r1, r3
10051562:	f016 fcea 	bl	10067f3a <memcpy>
    if ((gap_chrs[i].val_buffer_p->op_flags & BLE_GATT_SRV_OP_VALUE_VAR_LENGTH_FLAG) != 0U)
10051566:	193b      	adds	r3, r7, r4
10051568:	781a      	ldrb	r2, [r3, #0]
1005156a:	490f      	ldr	r1, [pc, #60]	@ (100515a8 <Gap_profile_set_char_value+0x14c>)
1005156c:	0013      	movs	r3, r2
1005156e:	00db      	lsls	r3, r3, #3
10051570:	189b      	adds	r3, r3, r2
10051572:	009b      	lsls	r3, r3, #2
10051574:	18cb      	adds	r3, r1, r3
10051576:	3320      	adds	r3, #32
10051578:	681b      	ldr	r3, [r3, #0]
1005157a:	781b      	ldrb	r3, [r3, #0]
1005157c:	001a      	movs	r2, r3
1005157e:	2302      	movs	r3, #2
10051580:	4013      	ands	r3, r2
10051582:	d00c      	beq.n	1005159e <Gap_profile_set_char_value+0x142>
    {
        gap_chrs[i].val_buffer_p->val_len = val_length;
10051584:	193b      	adds	r3, r7, r4
10051586:	781a      	ldrb	r2, [r3, #0]
10051588:	4907      	ldr	r1, [pc, #28]	@ (100515a8 <Gap_profile_set_char_value+0x14c>)
1005158a:	0013      	movs	r3, r2
1005158c:	00db      	lsls	r3, r3, #3
1005158e:	189b      	adds	r3, r3, r2
10051590:	009b      	lsls	r3, r3, #2
10051592:	18cb      	adds	r3, r1, r3
10051594:	3320      	adds	r3, #32
10051596:	681b      	ldr	r3, [r3, #0]
10051598:	197a      	adds	r2, r7, r5
1005159a:	8812      	ldrh	r2, [r2, #0]
1005159c:	805a      	strh	r2, [r3, #2]
    }

    return BLE_STATUS_SUCCESS;
1005159e:	2300      	movs	r3, #0
}
100515a0:	0018      	movs	r0, r3
100515a2:	46bd      	mov	sp, r7
100515a4:	b006      	add	sp, #24
100515a6:	bdb0      	pop	{r4, r5, r7, pc}
100515a8:	20002748 	.word	0x20002748

100515ac <aci_gatt_srv_profile_init>:
    .chrs = {0, NULL},
};

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
100515ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100515ae:	b085      	sub	sp, #20
100515b0:	af00      	add	r7, sp, #0
100515b2:	0002      	movs	r2, r0
100515b4:	6039      	str	r1, [r7, #0]
100515b6:	1dfb      	adds	r3, r7, #7
100515b8:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_srvc_handle;

  *Service_Changed_Handle = 0x0000;
100515ba:	683b      	ldr	r3, [r7, #0]
100515bc:	2200      	movs	r2, #0
100515be:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_service(&gatt_srvc);
100515c0:	250f      	movs	r5, #15
100515c2:	197c      	adds	r4, r7, r5
100515c4:	4b38      	ldr	r3, [pc, #224]	@ (100516a8 <aci_gatt_srv_profile_init+0xfc>)
100515c6:	0018      	movs	r0, r3
100515c8:	f7fd ff74 	bl	1004f4b4 <aci_gatt_srv_add_service>
100515cc:	0003      	movs	r3, r0
100515ce:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100515d0:	197b      	adds	r3, r7, r5
100515d2:	781b      	ldrb	r3, [r3, #0]
100515d4:	2b00      	cmp	r3, #0
100515d6:	d002      	beq.n	100515de <aci_gatt_srv_profile_init+0x32>
  {
    return ret;
100515d8:	197b      	adds	r3, r7, r5
100515da:	781b      	ldrb	r3, [r3, #0]
100515dc:	e060      	b.n	100516a0 <aci_gatt_srv_profile_init+0xf4>
  }

  gatt_srvc_handle = aci_gatt_srv_get_service_handle(&gatt_srvc);
100515de:	260c      	movs	r6, #12
100515e0:	19bc      	adds	r4, r7, r6
100515e2:	4b31      	ldr	r3, [pc, #196]	@ (100516a8 <aci_gatt_srv_profile_init+0xfc>)
100515e4:	0018      	movs	r0, r3
100515e6:	f7fd ff72 	bl	1004f4ce <aci_gatt_srv_get_service_handle>
100515ea:	0003      	movs	r3, r0
100515ec:	8023      	strh	r3, [r4, #0]

  if(Characteristics & GATT_INIT_SERVICE_CHANGED_BIT)
100515ee:	1dfb      	adds	r3, r7, #7
100515f0:	781b      	ldrb	r3, [r3, #0]
100515f2:	2201      	movs	r2, #1
100515f4:	4013      	ands	r3, r2
100515f6:	d011      	beq.n	1005161c <aci_gatt_srv_profile_init+0x70>
  {
    ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr, gatt_srvc_handle);
100515f8:	250f      	movs	r5, #15
100515fa:	197c      	adds	r4, r7, r5
100515fc:	19bb      	adds	r3, r7, r6
100515fe:	881a      	ldrh	r2, [r3, #0]
10051600:	4b2a      	ldr	r3, [pc, #168]	@ (100516ac <aci_gatt_srv_profile_init+0x100>)
10051602:	0011      	movs	r1, r2
10051604:	0018      	movs	r0, r3
10051606:	f7fd ff6f 	bl	1004f4e8 <aci_gatt_srv_add_char>
1005160a:	0003      	movs	r3, r0
1005160c:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1005160e:	197b      	adds	r3, r7, r5
10051610:	781b      	ldrb	r3, [r3, #0]
10051612:	2b00      	cmp	r3, #0
10051614:	d002      	beq.n	1005161c <aci_gatt_srv_profile_init+0x70>
    {
      return ret;
10051616:	197b      	adds	r3, r7, r5
10051618:	781b      	ldrb	r3, [r3, #0]
1005161a:	e041      	b.n	100516a0 <aci_gatt_srv_profile_init+0xf4>
    }
  }
  *Service_Changed_Handle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr);
1005161c:	4b23      	ldr	r3, [pc, #140]	@ (100516ac <aci_gatt_srv_profile_init+0x100>)
1005161e:	0018      	movs	r0, r3
10051620:	f7fd ff75 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
10051624:	0003      	movs	r3, r0
10051626:	001a      	movs	r2, r3
10051628:	683b      	ldr	r3, [r7, #0]
1005162a:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_clt_supp_feat_chr, gatt_srvc_handle);
1005162c:	250f      	movs	r5, #15
1005162e:	197c      	adds	r4, r7, r5
10051630:	230c      	movs	r3, #12
10051632:	18fb      	adds	r3, r7, r3
10051634:	881a      	ldrh	r2, [r3, #0]
10051636:	4b1e      	ldr	r3, [pc, #120]	@ (100516b0 <aci_gatt_srv_profile_init+0x104>)
10051638:	0011      	movs	r1, r2
1005163a:	0018      	movs	r0, r3
1005163c:	f7fd ff54 	bl	1004f4e8 <aci_gatt_srv_add_char>
10051640:	0003      	movs	r3, r0
10051642:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051644:	197b      	adds	r3, r7, r5
10051646:	781b      	ldrb	r3, [r3, #0]
10051648:	2b00      	cmp	r3, #0
1005164a:	d002      	beq.n	10051652 <aci_gatt_srv_profile_init+0xa6>
  {
    return ret;
1005164c:	197b      	adds	r3, r7, r5
1005164e:	781b      	ldrb	r3, [r3, #0]
10051650:	e026      	b.n	100516a0 <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_db_hash_chr, gatt_srvc_handle);
10051652:	250f      	movs	r5, #15
10051654:	197c      	adds	r4, r7, r5
10051656:	230c      	movs	r3, #12
10051658:	18fb      	adds	r3, r7, r3
1005165a:	881a      	ldrh	r2, [r3, #0]
1005165c:	4b15      	ldr	r3, [pc, #84]	@ (100516b4 <aci_gatt_srv_profile_init+0x108>)
1005165e:	0011      	movs	r1, r2
10051660:	0018      	movs	r0, r3
10051662:	f7fd ff41 	bl	1004f4e8 <aci_gatt_srv_add_char>
10051666:	0003      	movs	r3, r0
10051668:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1005166a:	197b      	adds	r3, r7, r5
1005166c:	781b      	ldrb	r3, [r3, #0]
1005166e:	2b00      	cmp	r3, #0
10051670:	d002      	beq.n	10051678 <aci_gatt_srv_profile_init+0xcc>
  {
    return ret;
10051672:	197b      	adds	r3, r7, r5
10051674:	781b      	ldrb	r3, [r3, #0]
10051676:	e013      	b.n	100516a0 <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srv_supp_feat_chr, gatt_srvc_handle);
10051678:	250f      	movs	r5, #15
1005167a:	197c      	adds	r4, r7, r5
1005167c:	230c      	movs	r3, #12
1005167e:	18fb      	adds	r3, r7, r3
10051680:	881a      	ldrh	r2, [r3, #0]
10051682:	4b0d      	ldr	r3, [pc, #52]	@ (100516b8 <aci_gatt_srv_profile_init+0x10c>)
10051684:	0011      	movs	r1, r2
10051686:	0018      	movs	r0, r3
10051688:	f7fd ff2e 	bl	1004f4e8 <aci_gatt_srv_add_char>
1005168c:	0003      	movs	r3, r0
1005168e:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051690:	197b      	adds	r3, r7, r5
10051692:	781b      	ldrb	r3, [r3, #0]
10051694:	2b00      	cmp	r3, #0
10051696:	d002      	beq.n	1005169e <aci_gatt_srv_profile_init+0xf2>
  {
    return ret;
10051698:	197b      	adds	r3, r7, r5
1005169a:	781b      	ldrb	r3, [r3, #0]
1005169c:	e000      	b.n	100516a0 <aci_gatt_srv_profile_init+0xf4>
  }

  return   BLE_STATUS_SUCCESS;
1005169e:	2300      	movs	r3, #0
}
100516a0:	0018      	movs	r0, r3
100516a2:	46bd      	mov	sp, r7
100516a4:	b005      	add	sp, #20
100516a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100516a8:	20002840 	.word	0x20002840
100516ac:	10069890 	.word	0x10069890
100516b0:	100698b4 	.word	0x100698b4
100516b4:	100698d8 	.word	0x100698d8
100516b8:	100698fc 	.word	0x100698fc

100516bc <__NVIC_EnableIRQ>:
{
100516bc:	b580      	push	{r7, lr}
100516be:	b082      	sub	sp, #8
100516c0:	af00      	add	r7, sp, #0
100516c2:	0002      	movs	r2, r0
100516c4:	1dfb      	adds	r3, r7, #7
100516c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100516c8:	1dfb      	adds	r3, r7, #7
100516ca:	781b      	ldrb	r3, [r3, #0]
100516cc:	2b7f      	cmp	r3, #127	@ 0x7f
100516ce:	d809      	bhi.n	100516e4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100516d0:	1dfb      	adds	r3, r7, #7
100516d2:	781b      	ldrb	r3, [r3, #0]
100516d4:	001a      	movs	r2, r3
100516d6:	231f      	movs	r3, #31
100516d8:	401a      	ands	r2, r3
100516da:	4b04      	ldr	r3, [pc, #16]	@ (100516ec <__NVIC_EnableIRQ+0x30>)
100516dc:	2101      	movs	r1, #1
100516de:	4091      	lsls	r1, r2
100516e0:	000a      	movs	r2, r1
100516e2:	601a      	str	r2, [r3, #0]
}
100516e4:	46c0      	nop			@ (mov r8, r8)
100516e6:	46bd      	mov	sp, r7
100516e8:	b002      	add	sp, #8
100516ea:	bd80      	pop	{r7, pc}
100516ec:	e000e100 	.word	0xe000e100

100516f0 <__NVIC_DisableIRQ>:
{
100516f0:	b580      	push	{r7, lr}
100516f2:	b082      	sub	sp, #8
100516f4:	af00      	add	r7, sp, #0
100516f6:	0002      	movs	r2, r0
100516f8:	1dfb      	adds	r3, r7, #7
100516fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100516fc:	1dfb      	adds	r3, r7, #7
100516fe:	781b      	ldrb	r3, [r3, #0]
10051700:	2b7f      	cmp	r3, #127	@ 0x7f
10051702:	d810      	bhi.n	10051726 <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10051704:	1dfb      	adds	r3, r7, #7
10051706:	781b      	ldrb	r3, [r3, #0]
10051708:	001a      	movs	r2, r3
1005170a:	231f      	movs	r3, #31
1005170c:	4013      	ands	r3, r2
1005170e:	4908      	ldr	r1, [pc, #32]	@ (10051730 <__NVIC_DisableIRQ+0x40>)
10051710:	2201      	movs	r2, #1
10051712:	409a      	lsls	r2, r3
10051714:	0013      	movs	r3, r2
10051716:	2280      	movs	r2, #128	@ 0x80
10051718:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
1005171a:	f3bf 8f4f 	dsb	sy
}
1005171e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
10051720:	f3bf 8f6f 	isb	sy
}
10051724:	46c0      	nop			@ (mov r8, r8)
}
10051726:	46c0      	nop			@ (mov r8, r8)
10051728:	46bd      	mov	sp, r7
1005172a:	b002      	add	sp, #8
1005172c:	bd80      	pop	{r7, pc}
1005172e:	46c0      	nop			@ (mov r8, r8)
10051730:	e000e100 	.word	0xe000e100

10051734 <LL_PWR_IsSMPSReady>:
{
10051734:	b580      	push	{r7, lr}
10051736:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
10051738:	4b05      	ldr	r3, [pc, #20]	@ (10051750 <LL_PWR_IsSMPSReady+0x1c>)
1005173a:	695b      	ldr	r3, [r3, #20]
1005173c:	2204      	movs	r2, #4
1005173e:	4013      	ands	r3, r2
10051740:	2b04      	cmp	r3, #4
10051742:	d101      	bne.n	10051748 <LL_PWR_IsSMPSReady+0x14>
10051744:	2301      	movs	r3, #1
10051746:	e000      	b.n	1005174a <LL_PWR_IsSMPSReady+0x16>
10051748:	2300      	movs	r3, #0
}
1005174a:	0018      	movs	r0, r3
1005174c:	46bd      	mov	sp, r7
1005174e:	bd80      	pop	{r7, pc}
10051750:	48500000 	.word	0x48500000

10051754 <LL_PWR_GetSMPSMode>:
{
10051754:	b580      	push	{r7, lr}
10051756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
10051758:	4b03      	ldr	r3, [pc, #12]	@ (10051768 <LL_PWR_GetSMPSMode+0x14>)
1005175a:	69da      	ldr	r2, [r3, #28]
1005175c:	2380      	movs	r3, #128	@ 0x80
1005175e:	00db      	lsls	r3, r3, #3
10051760:	4013      	ands	r3, r2
}
10051762:	0018      	movs	r0, r3
10051764:	46bd      	mov	sp, r7
10051766:	bd80      	pop	{r7, pc}
10051768:	48500000 	.word	0x48500000

1005176c <LL_PWR_SetSMPSPrechargeMode>:
{
1005176c:	b580      	push	{r7, lr}
1005176e:	b082      	sub	sp, #8
10051770:	af00      	add	r7, sp, #0
10051772:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
10051774:	4b06      	ldr	r3, [pc, #24]	@ (10051790 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10051776:	69db      	ldr	r3, [r3, #28]
10051778:	4a06      	ldr	r2, [pc, #24]	@ (10051794 <LL_PWR_SetSMPSPrechargeMode+0x28>)
1005177a:	4013      	ands	r3, r2
1005177c:	0019      	movs	r1, r3
1005177e:	4b04      	ldr	r3, [pc, #16]	@ (10051790 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10051780:	687a      	ldr	r2, [r7, #4]
10051782:	430a      	orrs	r2, r1
10051784:	61da      	str	r2, [r3, #28]
}
10051786:	46c0      	nop			@ (mov r8, r8)
10051788:	46bd      	mov	sp, r7
1005178a:	b002      	add	sp, #8
1005178c:	bd80      	pop	{r7, pc}
1005178e:	46c0      	nop			@ (mov r8, r8)
10051790:	48500000 	.word	0x48500000
10051794:	fffffdff 	.word	0xfffffdff

10051798 <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
10051798:	b580      	push	{r7, lr}
1005179a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
1005179c:	4b07      	ldr	r3, [pc, #28]	@ (100517bc <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
1005179e:	69da      	ldr	r2, [r3, #28]
100517a0:	2380      	movs	r3, #128	@ 0x80
100517a2:	009b      	lsls	r3, r3, #2
100517a4:	401a      	ands	r2, r3
100517a6:	2380      	movs	r3, #128	@ 0x80
100517a8:	009b      	lsls	r3, r3, #2
100517aa:	429a      	cmp	r2, r3
100517ac:	d101      	bne.n	100517b2 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
100517ae:	2301      	movs	r3, #1
100517b0:	e000      	b.n	100517b4 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
100517b2:	2300      	movs	r3, #0
}
100517b4:	0018      	movs	r0, r3
100517b6:	46bd      	mov	sp, r7
100517b8:	bd80      	pop	{r7, pc}
100517ba:	46c0      	nop			@ (mov r8, r8)
100517bc:	48500000 	.word	0x48500000

100517c0 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
100517c0:	b580      	push	{r7, lr}
100517c2:	b082      	sub	sp, #8
100517c4:	af00      	add	r7, sp, #0
100517c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
100517c8:	4b06      	ldr	r3, [pc, #24]	@ (100517e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100517ca:	69db      	ldr	r3, [r3, #28]
100517cc:	220f      	movs	r2, #15
100517ce:	4393      	bics	r3, r2
100517d0:	0019      	movs	r1, r3
100517d2:	4b04      	ldr	r3, [pc, #16]	@ (100517e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100517d4:	687a      	ldr	r2, [r7, #4]
100517d6:	430a      	orrs	r2, r1
100517d8:	61da      	str	r2, [r3, #28]
}
100517da:	46c0      	nop			@ (mov r8, r8)
100517dc:	46bd      	mov	sp, r7
100517de:	b002      	add	sp, #8
100517e0:	bd80      	pop	{r7, pc}
100517e2:	46c0      	nop			@ (mov r8, r8)
100517e4:	48500000 	.word	0x48500000

100517e8 <LL_SYSCFG_BLERXTX_EnableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_EnableIT(uint32_t Signal)
{
100517e8:	b580      	push	{r7, lr}
100517ea:	b082      	sub	sp, #8
100517ec:	af00      	add	r7, sp, #0
100517ee:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->BLERXTX_IER, Signal);
100517f0:	2380      	movs	r3, #128	@ 0x80
100517f2:	05db      	lsls	r3, r3, #23
100517f4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
100517f6:	2380      	movs	r3, #128	@ 0x80
100517f8:	05db      	lsls	r3, r3, #23
100517fa:	687a      	ldr	r2, [r7, #4]
100517fc:	430a      	orrs	r2, r1
100517fe:	639a      	str	r2, [r3, #56]	@ 0x38
}
10051800:	46c0      	nop			@ (mov r8, r8)
10051802:	46bd      	mov	sp, r7
10051804:	b002      	add	sp, #8
10051806:	bd80      	pop	{r7, pc}

10051808 <LL_SYSCFG_BLERXTX_DisableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_DisableIT(uint32_t Signal)
{
10051808:	b580      	push	{r7, lr}
1005180a:	b082      	sub	sp, #8
1005180c:	af00      	add	r7, sp, #0
1005180e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SYSCFG->BLERXTX_IER, Signal);
10051810:	2380      	movs	r3, #128	@ 0x80
10051812:	05db      	lsls	r3, r3, #23
10051814:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10051816:	687b      	ldr	r3, [r7, #4]
10051818:	43d9      	mvns	r1, r3
1005181a:	2380      	movs	r3, #128	@ 0x80
1005181c:	05db      	lsls	r3, r3, #23
1005181e:	400a      	ands	r2, r1
10051820:	639a      	str	r2, [r3, #56]	@ 0x38
}
10051822:	46c0      	nop			@ (mov r8, r8)
10051824:	46bd      	mov	sp, r7
10051826:	b002      	add	sp, #8
10051828:	bd80      	pop	{r7, pc}

1005182a <LL_SYSCFG_BLERXTX_SetType>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetType(uint8_t Type, uint32_t Signal)
{
1005182a:	b580      	push	{r7, lr}
1005182c:	b082      	sub	sp, #8
1005182e:	af00      	add	r7, sp, #0
10051830:	0002      	movs	r2, r0
10051832:	6039      	str	r1, [r7, #0]
10051834:	1dfb      	adds	r3, r7, #7
10051836:	701a      	strb	r2, [r3, #0]
  if (Type == LL_SYSCFG_BLERXTX_DET_TYPE_EDGE)
10051838:	1dfb      	adds	r3, r7, #7
1005183a:	781b      	ldrb	r3, [r3, #0]
1005183c:	2b00      	cmp	r3, #0
1005183e:	d109      	bne.n	10051854 <LL_SYSCFG_BLERXTX_SetType+0x2a>
  {
    CLEAR_BIT(SYSCFG->BLERXTX_DTR, Signal);
10051840:	2380      	movs	r3, #128	@ 0x80
10051842:	05db      	lsls	r3, r3, #23
10051844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10051846:	683b      	ldr	r3, [r7, #0]
10051848:	43d9      	mvns	r1, r3
1005184a:	2380      	movs	r3, #128	@ 0x80
1005184c:	05db      	lsls	r3, r3, #23
1005184e:	400a      	ands	r2, r1
10051850:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
  }
}
10051852:	e007      	b.n	10051864 <LL_SYSCFG_BLERXTX_SetType+0x3a>
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
10051854:	2380      	movs	r3, #128	@ 0x80
10051856:	05db      	lsls	r3, r3, #23
10051858:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1005185a:	2380      	movs	r3, #128	@ 0x80
1005185c:	05db      	lsls	r3, r3, #23
1005185e:	683a      	ldr	r2, [r7, #0]
10051860:	430a      	orrs	r2, r1
10051862:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10051864:	46c0      	nop			@ (mov r8, r8)
10051866:	46bd      	mov	sp, r7
10051868:	b002      	add	sp, #8
1005186a:	bd80      	pop	{r7, pc}

1005186c <LL_SYSCFG_BLERXTX_SetTrigger>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetTrigger(uint8_t Trigger, uint32_t Signal)
{
1005186c:	b580      	push	{r7, lr}
1005186e:	b082      	sub	sp, #8
10051870:	af00      	add	r7, sp, #0
10051872:	0002      	movs	r2, r0
10051874:	6039      	str	r1, [r7, #0]
10051876:	1dfb      	adds	r3, r7, #7
10051878:	701a      	strb	r2, [r3, #0]
  switch (Trigger)
1005187a:	1dfb      	adds	r3, r7, #7
1005187c:	781b      	ldrb	r3, [r3, #0]
1005187e:	2b04      	cmp	r3, #4
10051880:	d860      	bhi.n	10051944 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
10051882:	009a      	lsls	r2, r3, #2
10051884:	4b31      	ldr	r3, [pc, #196]	@ (1005194c <LL_SYSCFG_BLERXTX_SetTrigger+0xe0>)
10051886:	18d3      	adds	r3, r2, r3
10051888:	681b      	ldr	r3, [r3, #0]
1005188a:	469f      	mov	pc, r3
  {
    case LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE:
    {
      SET_BIT(SYSCFG->BLERXTX_IBER, Signal);
1005188c:	2380      	movs	r3, #128	@ 0x80
1005188e:	05db      	lsls	r3, r3, #23
10051890:	6b19      	ldr	r1, [r3, #48]	@ 0x30
10051892:	2380      	movs	r3, #128	@ 0x80
10051894:	05db      	lsls	r3, r3, #23
10051896:	683a      	ldr	r2, [r7, #0]
10051898:	430a      	orrs	r2, r1
1005189a:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1005189c:	2380      	movs	r3, #128	@ 0x80
1005189e:	05db      	lsls	r3, r3, #23
100518a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100518a2:	683b      	ldr	r3, [r7, #0]
100518a4:	43d9      	mvns	r1, r3
100518a6:	2380      	movs	r3, #128	@ 0x80
100518a8:	05db      	lsls	r3, r3, #23
100518aa:	400a      	ands	r2, r1
100518ac:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100518ae:	e049      	b.n	10051944 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_RISING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100518b0:	2380      	movs	r3, #128	@ 0x80
100518b2:	05db      	lsls	r3, r3, #23
100518b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100518b6:	683b      	ldr	r3, [r7, #0]
100518b8:	43d9      	mvns	r1, r3
100518ba:	2380      	movs	r3, #128	@ 0x80
100518bc:	05db      	lsls	r3, r3, #23
100518be:	400a      	ands	r2, r1
100518c0:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100518c2:	2380      	movs	r3, #128	@ 0x80
100518c4:	05db      	lsls	r3, r3, #23
100518c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
100518c8:	2380      	movs	r3, #128	@ 0x80
100518ca:	05db      	lsls	r3, r3, #23
100518cc:	683a      	ldr	r2, [r7, #0]
100518ce:	430a      	orrs	r2, r1
100518d0:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100518d2:	e037      	b.n	10051944 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_FALLING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100518d4:	2380      	movs	r3, #128	@ 0x80
100518d6:	05db      	lsls	r3, r3, #23
100518d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100518da:	683b      	ldr	r3, [r7, #0]
100518dc:	43d9      	mvns	r1, r3
100518de:	2380      	movs	r3, #128	@ 0x80
100518e0:	05db      	lsls	r3, r3, #23
100518e2:	400a      	ands	r2, r1
100518e4:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100518e6:	2380      	movs	r3, #128	@ 0x80
100518e8:	05db      	lsls	r3, r3, #23
100518ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100518ec:	683b      	ldr	r3, [r7, #0]
100518ee:	43d9      	mvns	r1, r3
100518f0:	2380      	movs	r3, #128	@ 0x80
100518f2:	05db      	lsls	r3, r3, #23
100518f4:	400a      	ands	r2, r1
100518f6:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100518f8:	e024      	b.n	10051944 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_LOW_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100518fa:	2380      	movs	r3, #128	@ 0x80
100518fc:	05db      	lsls	r3, r3, #23
100518fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10051900:	683b      	ldr	r3, [r7, #0]
10051902:	43d9      	mvns	r1, r3
10051904:	2380      	movs	r3, #128	@ 0x80
10051906:	05db      	lsls	r3, r3, #23
10051908:	400a      	ands	r2, r1
1005190a:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
1005190c:	2380      	movs	r3, #128	@ 0x80
1005190e:	05db      	lsls	r3, r3, #23
10051910:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10051912:	683b      	ldr	r3, [r7, #0]
10051914:	43d9      	mvns	r1, r3
10051916:	2380      	movs	r3, #128	@ 0x80
10051918:	05db      	lsls	r3, r3, #23
1005191a:	400a      	ands	r2, r1
1005191c:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1005191e:	e011      	b.n	10051944 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_HIGH_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
10051920:	2380      	movs	r3, #128	@ 0x80
10051922:	05db      	lsls	r3, r3, #23
10051924:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10051926:	683b      	ldr	r3, [r7, #0]
10051928:	43d9      	mvns	r1, r3
1005192a:	2380      	movs	r3, #128	@ 0x80
1005192c:	05db      	lsls	r3, r3, #23
1005192e:	400a      	ands	r2, r1
10051930:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
10051932:	2380      	movs	r3, #128	@ 0x80
10051934:	05db      	lsls	r3, r3, #23
10051936:	6b59      	ldr	r1, [r3, #52]	@ 0x34
10051938:	2380      	movs	r3, #128	@ 0x80
1005193a:	05db      	lsls	r3, r3, #23
1005193c:	683a      	ldr	r2, [r7, #0]
1005193e:	430a      	orrs	r2, r1
10051940:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  }
}
10051942:	e7ff      	b.n	10051944 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
10051944:	46c0      	nop			@ (mov r8, r8)
10051946:	46bd      	mov	sp, r7
10051948:	b002      	add	sp, #8
1005194a:	bd80      	pop	{r7, pc}
1005194c:	10069920 	.word	0x10069920

10051950 <LL_SYSCFG_BLERXTX_IsInterruptPending>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSCFG_BLERXTX_IsInterruptPending(uint32_t Signal)
{
10051950:	b580      	push	{r7, lr}
10051952:	b082      	sub	sp, #8
10051954:	af00      	add	r7, sp, #0
10051956:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SYSCFG->BLERXTX_ISCR, Signal) == (Signal)) ? 1UL : 0UL);
10051958:	2380      	movs	r3, #128	@ 0x80
1005195a:	05db      	lsls	r3, r3, #23
1005195c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1005195e:	687a      	ldr	r2, [r7, #4]
10051960:	4013      	ands	r3, r2
10051962:	687a      	ldr	r2, [r7, #4]
10051964:	429a      	cmp	r2, r3
10051966:	d101      	bne.n	1005196c <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1c>
10051968:	2301      	movs	r3, #1
1005196a:	e000      	b.n	1005196e <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1e>
1005196c:	2300      	movs	r3, #0
}
1005196e:	0018      	movs	r0, r3
10051970:	46bd      	mov	sp, r7
10051972:	b002      	add	sp, #8
10051974:	bd80      	pop	{r7, pc}

10051976 <LL_SYSCFG_BLERXTX_ClearInterrupt>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_ClearInterrupt(uint32_t Signal)
{
10051976:	b580      	push	{r7, lr}
10051978:	b082      	sub	sp, #8
1005197a:	af00      	add	r7, sp, #0
1005197c:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->BLERXTX_ISCR, Signal);
1005197e:	2380      	movs	r3, #128	@ 0x80
10051980:	05db      	lsls	r3, r3, #23
10051982:	687a      	ldr	r2, [r7, #4]
10051984:	63da      	str	r2, [r3, #60]	@ 0x3c
}
10051986:	46c0      	nop			@ (mov r8, r8)
10051988:	46bd      	mov	sp, r7
1005198a:	b002      	add	sp, #8
1005198c:	bd80      	pop	{r7, pc}
	...

10051990 <LL_APB0_GRP1_EnableClock>:
{
10051990:	b580      	push	{r7, lr}
10051992:	b084      	sub	sp, #16
10051994:	af00      	add	r7, sp, #0
10051996:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10051998:	4b07      	ldr	r3, [pc, #28]	@ (100519b8 <LL_APB0_GRP1_EnableClock+0x28>)
1005199a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
1005199c:	4b06      	ldr	r3, [pc, #24]	@ (100519b8 <LL_APB0_GRP1_EnableClock+0x28>)
1005199e:	687a      	ldr	r2, [r7, #4]
100519a0:	430a      	orrs	r2, r1
100519a2:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100519a4:	4b04      	ldr	r3, [pc, #16]	@ (100519b8 <LL_APB0_GRP1_EnableClock+0x28>)
100519a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100519a8:	687a      	ldr	r2, [r7, #4]
100519aa:	4013      	ands	r3, r2
100519ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100519ae:	68fb      	ldr	r3, [r7, #12]
}
100519b0:	46c0      	nop			@ (mov r8, r8)
100519b2:	46bd      	mov	sp, r7
100519b4:	b004      	add	sp, #16
100519b6:	bd80      	pop	{r7, pc}
100519b8:	48400000 	.word	0x48400000

100519bc <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
100519bc:	b580      	push	{r7, lr}
100519be:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
100519c0:	231f      	movs	r3, #31
}
100519c2:	0018      	movs	r0, r3
100519c4:	46bd      	mov	sp, r7
100519c6:	bd80      	pop	{r7, pc}

100519c8 <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
100519c8:	b580      	push	{r7, lr}
100519ca:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
100519cc:	231f      	movs	r3, #31
}
100519ce:	0018      	movs	r0, r3
100519d0:	46bd      	mov	sp, r7
100519d2:	bd80      	pop	{r7, pc}

100519d4 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
100519d4:	b580      	push	{r7, lr}
100519d6:	b082      	sub	sp, #8
100519d8:	af00      	add	r7, sp, #0
100519da:	0002      	movs	r2, r0
100519dc:	1dfb      	adds	r3, r7, #7
100519de:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
100519e0:	1dfb      	adds	r3, r7, #7
100519e2:	781b      	ldrb	r3, [r3, #0]
100519e4:	2b00      	cmp	r3, #0
100519e6:	d01d      	beq.n	10051a24 <RADIO_SetHighPower+0x50>
  {
    if(high_power == FALSE)
100519e8:	4b2d      	ldr	r3, [pc, #180]	@ (10051aa0 <RADIO_SetHighPower+0xcc>)
100519ea:	781b      	ldrb	r3, [r3, #0]
100519ec:	2b00      	cmp	r3, #0
100519ee:	d129      	bne.n	10051a44 <RADIO_SetHighPower+0x70>
    {
      high_power = TRUE;
100519f0:	4b2b      	ldr	r3, [pc, #172]	@ (10051aa0 <RADIO_SetHighPower+0xcc>)
100519f2:	2201      	movs	r2, #1
100519f4:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_SYSCFG);
100519f6:	2380      	movs	r3, #128	@ 0x80
100519f8:	005b      	lsls	r3, r3, #1
100519fa:	0018      	movs	r0, r3
100519fc:	f7ff ffc8 	bl	10051990 <LL_APB0_GRP1_EnableClock>
      LL_SYSCFG_BLERXTX_SetTrigger(LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE, LL_SYSCFG_BLE_TX_EVENT);
10051a00:	2101      	movs	r1, #1
10051a02:	2002      	movs	r0, #2
10051a04:	f7ff ff32 	bl	1005186c <LL_SYSCFG_BLERXTX_SetTrigger>
      LL_SYSCFG_BLERXTX_SetType(LL_SYSCFG_BLERXTX_DET_TYPE_EDGE, LL_SYSCFG_BLE_TX_EVENT);
10051a08:	2101      	movs	r1, #1
10051a0a:	2000      	movs	r0, #0
10051a0c:	f7ff ff0d 	bl	1005182a <LL_SYSCFG_BLERXTX_SetType>
      LL_SYSCFG_BLERXTX_EnableIT(LL_SYSCFG_BLE_TX_EVENT);
10051a10:	2001      	movs	r0, #1
10051a12:	f7ff fee9 	bl	100517e8 <LL_SYSCFG_BLERXTX_EnableIT>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10051a16:	2001      	movs	r0, #1
10051a18:	f7ff ffad 	bl	10051976 <LL_SYSCFG_BLERXTX_ClearInterrupt>
      NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10051a1c:	2019      	movs	r0, #25
10051a1e:	f7ff fe4d 	bl	100516bc <__NVIC_EnableIRQ>
10051a22:	e00f      	b.n	10051a44 <RADIO_SetHighPower+0x70>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
10051a24:	4b1e      	ldr	r3, [pc, #120]	@ (10051aa0 <RADIO_SetHighPower+0xcc>)
10051a26:	781b      	ldrb	r3, [r3, #0]
10051a28:	2b01      	cmp	r3, #1
10051a2a:	d10b      	bne.n	10051a44 <RADIO_SetHighPower+0x70>
    {
      high_power = FALSE;
10051a2c:	4b1c      	ldr	r3, [pc, #112]	@ (10051aa0 <RADIO_SetHighPower+0xcc>)
10051a2e:	2200      	movs	r2, #0
10051a30:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_SYSCFG_BLERXTX_DisableIT(LL_SYSCFG_BLE_TX_EVENT);
10051a32:	2001      	movs	r0, #1
10051a34:	f7ff fee8 	bl	10051808 <LL_SYSCFG_BLERXTX_DisableIT>
      NVIC_DisableIRQ(RADIO_TXRX_SEQ_IRQn);
10051a38:	2019      	movs	r0, #25
10051a3a:	f7ff fe59 	bl	100516f0 <__NVIC_DisableIRQ>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10051a3e:	2001      	movs	r0, #1
10051a40:	f7ff ff99 	bl	10051976 <LL_SYSCFG_BLERXTX_ClearInterrupt>
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
10051a44:	f7ff fea8 	bl	10051798 <LL_PWR_IsEnabledSMPSPrechargeMode>
10051a48:	1e03      	subs	r3, r0, #0
10051a4a:	d124      	bne.n	10051a96 <RADIO_SetHighPower+0xc2>
10051a4c:	f7ff fe82 	bl	10051754 <LL_PWR_GetSMPSMode>
10051a50:	0002      	movs	r2, r0
10051a52:	2380      	movs	r3, #128	@ 0x80
10051a54:	00db      	lsls	r3, r3, #3
10051a56:	429a      	cmp	r2, r3
10051a58:	d01d      	beq.n	10051a96 <RADIO_SetHighPower+0xc2>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
10051a5a:	2380      	movs	r3, #128	@ 0x80
10051a5c:	009b      	lsls	r3, r3, #2
10051a5e:	0018      	movs	r0, r3
10051a60:	f7ff fe84 	bl	1005176c <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
10051a64:	46c0      	nop			@ (mov r8, r8)
10051a66:	f7ff fe65 	bl	10051734 <LL_PWR_IsSMPSReady>
10051a6a:	1e03      	subs	r3, r0, #0
10051a6c:	d1fb      	bne.n	10051a66 <RADIO_SetHighPower+0x92>
  /* Change level */
  if(state != DISABLE)
10051a6e:	1dfb      	adds	r3, r7, #7
10051a70:	781b      	ldrb	r3, [r3, #0]
10051a72:	2b00      	cmp	r3, #0
10051a74:	d003      	beq.n	10051a7e <RADIO_SetHighPower+0xaa>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
10051a76:	200e      	movs	r0, #14
10051a78:	f7ff fea2 	bl	100517c0 <LL_PWR_SMPS_SetOutputVoltageLevel>
10051a7c:	e002      	b.n	10051a84 <RADIO_SetHighPower+0xb0>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
10051a7e:	2004      	movs	r0, #4
10051a80:	f7ff fe9e 	bl	100517c0 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
10051a84:	2000      	movs	r0, #0
10051a86:	f7ff fe71 	bl	1005176c <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
10051a8a:	46c0      	nop			@ (mov r8, r8)
10051a8c:	f7ff fe52 	bl	10051734 <LL_PWR_IsSMPSReady>
10051a90:	1e03      	subs	r3, r0, #0
10051a92:	d0fb      	beq.n	10051a8c <RADIO_SetHighPower+0xb8>
10051a94:	e000      	b.n	10051a98 <RADIO_SetHighPower+0xc4>
    return;
10051a96:	46c0      	nop			@ (mov r8, r8)
}
10051a98:	46bd      	mov	sp, r7
10051a9a:	b002      	add	sp, #8
10051a9c:	bd80      	pop	{r7, pc}
10051a9e:	46c0      	nop			@ (mov r8, r8)
10051aa0:	2000231f 	.word	0x2000231f

10051aa4 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
10051aa4:	b580      	push	{r7, lr}
10051aa6:	af00      	add	r7, sp, #0
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
  if(high_power == FALSE)
10051aa8:	4b16      	ldr	r3, [pc, #88]	@ (10051b04 <HAL_RADIO_TxRxSeqCallback+0x60>)
10051aaa:	781b      	ldrb	r3, [r3, #0]
10051aac:	2b00      	cmp	r3, #0
10051aae:	d025      	beq.n	10051afc <HAL_RADIO_TxRxSeqCallback+0x58>
    return;

  if(LL_SYSCFG_BLERXTX_IsInterruptPending(LL_SYSCFG_BLE_TX_EVENT)){
10051ab0:	2001      	movs	r0, #1
10051ab2:	f7ff ff4d 	bl	10051950 <LL_SYSCFG_BLERXTX_IsInterruptPending>
10051ab6:	1e03      	subs	r3, r0, #0
10051ab8:	d021      	beq.n	10051afe <HAL_RADIO_TxRxSeqCallback+0x5a>
    if(RRM->FSM_STATUS_DIG_OUT & RRM_FSM_STATUS_DIG_OUT_STATUS_4)
10051aba:	4a13      	ldr	r2, [pc, #76]	@ (10051b08 <HAL_RADIO_TxRxSeqCallback+0x64>)
10051abc:	23a6      	movs	r3, #166	@ 0xa6
10051abe:	009b      	lsls	r3, r3, #2
10051ac0:	58d3      	ldr	r3, [r2, r3]
10051ac2:	2210      	movs	r2, #16
10051ac4:	4013      	ands	r3, r2
10051ac6:	d00a      	beq.n	10051ade <HAL_RADIO_TxRxSeqCallback+0x3a>
    {
      // Rising edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 1);
10051ac8:	4a0f      	ldr	r2, [pc, #60]	@ (10051b08 <HAL_RADIO_TxRxSeqCallback+0x64>)
10051aca:	2395      	movs	r3, #149	@ 0x95
10051acc:	009b      	lsls	r3, r3, #2
10051ace:	58d3      	ldr	r3, [r2, r3]
10051ad0:	490d      	ldr	r1, [pc, #52]	@ (10051b08 <HAL_RADIO_TxRxSeqCallback+0x64>)
10051ad2:	2202      	movs	r2, #2
10051ad4:	431a      	orrs	r2, r3
10051ad6:	2395      	movs	r3, #149	@ 0x95
10051ad8:	009b      	lsls	r3, r3, #2
10051ada:	50ca      	str	r2, [r1, r3]
10051adc:	e00a      	b.n	10051af4 <HAL_RADIO_TxRxSeqCallback+0x50>
    }
    else
    {
      // Falling edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
10051ade:	4a0a      	ldr	r2, [pc, #40]	@ (10051b08 <HAL_RADIO_TxRxSeqCallback+0x64>)
10051ae0:	2395      	movs	r3, #149	@ 0x95
10051ae2:	009b      	lsls	r3, r3, #2
10051ae4:	58d3      	ldr	r3, [r2, r3]
10051ae6:	4908      	ldr	r1, [pc, #32]	@ (10051b08 <HAL_RADIO_TxRxSeqCallback+0x64>)
10051ae8:	2202      	movs	r2, #2
10051aea:	4393      	bics	r3, r2
10051aec:	001a      	movs	r2, r3
10051aee:	2395      	movs	r3, #149	@ 0x95
10051af0:	009b      	lsls	r3, r3, #2
10051af2:	50ca      	str	r2, [r1, r3]
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10051af4:	2001      	movs	r0, #1
10051af6:	f7ff ff3e 	bl	10051976 <LL_SYSCFG_BLERXTX_ClearInterrupt>
10051afa:	e000      	b.n	10051afe <HAL_RADIO_TxRxSeqCallback+0x5a>
    return;
10051afc:	46c0      	nop			@ (mov r8, r8)
  }
#endif
}
10051afe:	46bd      	mov	sp, r7
10051b00:	bd80      	pop	{r7, pc}
10051b02:	46c0      	nop			@ (mov r8, r8)
10051b04:	2000231f 	.word	0x2000231f
10051b08:	60001400 	.word	0x60001400

10051b0c <LL_SYSCFG_GetDeviceRevision>:
{
10051b0c:	b580      	push	{r7, lr}
10051b0e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
10051b10:	2380      	movs	r3, #128	@ 0x80
10051b12:	05db      	lsls	r3, r3, #23
10051b14:	681b      	ldr	r3, [r3, #0]
10051b16:	220f      	movs	r2, #15
10051b18:	4013      	ands	r3, r2
}
10051b1a:	0018      	movs	r0, r3
10051b1c:	46bd      	mov	sp, r7
10051b1e:	bd80      	pop	{r7, pc}

10051b20 <LL_SYSCFG_GetDeviceVersion>:
{
10051b20:	b580      	push	{r7, lr}
10051b22:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10051b24:	2380      	movs	r3, #128	@ 0x80
10051b26:	05db      	lsls	r3, r3, #23
10051b28:	681b      	ldr	r3, [r3, #0]
10051b2a:	091b      	lsrs	r3, r3, #4
10051b2c:	220f      	movs	r2, #15
10051b2e:	4013      	ands	r3, r2
}
10051b30:	0018      	movs	r0, r3
10051b32:	46bd      	mov	sp, r7
10051b34:	bd80      	pop	{r7, pc}

10051b36 <LL_SYSCFG_GetDeviceJTAG_ID>:
{
10051b36:	b580      	push	{r7, lr}
10051b38:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
10051b3a:	2380      	movs	r3, #128	@ 0x80
10051b3c:	05db      	lsls	r3, r3, #23
10051b3e:	685b      	ldr	r3, [r3, #4]
}
10051b40:	0018      	movs	r0, r3
10051b42:	46bd      	mov	sp, r7
10051b44:	bd80      	pop	{r7, pc}
	...

10051b48 <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
10051b48:	b580      	push	{r7, lr}
10051b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
10051b4c:	4b03      	ldr	r3, [pc, #12]	@ (10051b5c <LL_GetFlashSize+0x14>)
10051b4e:	681b      	ldr	r3, [r3, #0]
10051b50:	041b      	lsls	r3, r3, #16
10051b52:	0c1b      	lsrs	r3, r3, #16
}
10051b54:	0018      	movs	r0, r3
10051b56:	46bd      	mov	sp, r7
10051b58:	bd80      	pop	{r7, pc}
10051b5a:	46c0      	nop			@ (mov r8, r8)
10051b5c:	40001014 	.word	0x40001014

10051b60 <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
10051b60:	b580      	push	{r7, lr}
10051b62:	b082      	sub	sp, #8
10051b64:	af00      	add	r7, sp, #0

    if (tmpreg == 0) {
      tmpreg = LL_UTILS_RAMSIZE_32K;
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
10051b66:	2300      	movs	r3, #0
10051b68:	607b      	str	r3, [r7, #4]
#endif
    
    return tmpreg;
10051b6a:	687b      	ldr	r3, [r7, #4]
  }
10051b6c:	0018      	movs	r0, r3
10051b6e:	46bd      	mov	sp, r7
10051b70:	b002      	add	sp, #8
10051b72:	bd80      	pop	{r7, pc}

10051b74 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
10051b74:	b580      	push	{r7, lr}
10051b76:	b084      	sub	sp, #16
10051b78:	af00      	add	r7, sp, #0
10051b7a:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
10051b7c:	687b      	ldr	r3, [r7, #4]
10051b7e:	22ff      	movs	r2, #255	@ 0xff
10051b80:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
10051b82:	f7ff ffd8 	bl	10051b36 <LL_SYSCFG_GetDeviceJTAG_ID>
10051b86:	0003      	movs	r3, r0
10051b88:	60fb      	str	r3, [r7, #12]
  if(jtag_id == JTAG_ID_CODE_STM32WB07XX)
  {
    partInfo->die_id = DIE_SW_ID_STM32WB07XX;
  }
#elif defined(STM32WB05)
  if(jtag_id == JTAG_ID_CODE_STM32WB05XX)
10051b8a:	68fb      	ldr	r3, [r7, #12]
10051b8c:	4a18      	ldr	r2, [pc, #96]	@ (10051bf0 <GetPartInfo+0x7c>)
10051b8e:	4293      	cmp	r3, r2
10051b90:	d102      	bne.n	10051b98 <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
10051b92:	687b      	ldr	r3, [r7, #4]
10051b94:	2205      	movs	r2, #5
10051b96:	701a      	strb	r2, [r3, #0]
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
10051b98:	f7ff ffc2 	bl	10051b20 <LL_SYSCFG_GetDeviceVersion>
10051b9c:	0003      	movs	r3, r0
10051b9e:	b2da      	uxtb	r2, r3
10051ba0:	687b      	ldr	r3, [r7, #4]
10051ba2:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
10051ba4:	f7ff ffb2 	bl	10051b0c <LL_SYSCFG_GetDeviceRevision>
10051ba8:	0003      	movs	r3, r0
10051baa:	b2da      	uxtb	r2, r3
10051bac:	687b      	ldr	r3, [r7, #4]
10051bae:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
10051bb0:	f7ff ffc1 	bl	10051b36 <LL_SYSCFG_GetDeviceJTAG_ID>
10051bb4:	0002      	movs	r2, r0
10051bb6:	687b      	ldr	r3, [r7, #4]
10051bb8:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
10051bba:	f7ff ffc5 	bl	10051b48 <LL_GetFlashSize>
10051bbe:	0003      	movs	r3, r0
10051bc0:	3301      	adds	r3, #1
10051bc2:	009a      	lsls	r2, r3, #2
10051bc4:	687b      	ldr	r3, [r7, #4]
10051bc6:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
10051bc8:	f7ff ffca 	bl	10051b60 <LL_GetRAMSize>
10051bcc:	1e03      	subs	r3, r0, #0
10051bce:	d007      	beq.n	10051be0 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
10051bd0:	f7ff ffc6 	bl	10051b60 <LL_GetRAMSize>
10051bd4:	0003      	movs	r3, r0
10051bd6:	3301      	adds	r3, #1
10051bd8:	039a      	lsls	r2, r3, #14
10051bda:	687b      	ldr	r3, [r7, #4]
10051bdc:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
10051bde:	e003      	b.n	10051be8 <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
10051be0:	687b      	ldr	r3, [r7, #4]
10051be2:	22c0      	movs	r2, #192	@ 0xc0
10051be4:	01d2      	lsls	r2, r2, #7
10051be6:	60da      	str	r2, [r3, #12]
}
10051be8:	46c0      	nop			@ (mov r8, r8)
10051bea:	46bd      	mov	sp, r7
10051bec:	b004      	add	sp, #16
10051bee:	bd80      	pop	{r7, pc}
10051bf0:	02028041 	.word	0x02028041

10051bf4 <__NVIC_SystemReset>:
{
10051bf4:	b580      	push	{r7, lr}
10051bf6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
10051bf8:	f3bf 8f4f 	dsb	sy
}
10051bfc:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10051bfe:	4b04      	ldr	r3, [pc, #16]	@ (10051c10 <__NVIC_SystemReset+0x1c>)
10051c00:	4a04      	ldr	r2, [pc, #16]	@ (10051c14 <__NVIC_SystemReset+0x20>)
10051c02:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10051c04:	f3bf 8f4f 	dsb	sy
}
10051c08:	46c0      	nop			@ (mov r8, r8)
    __NOP();
10051c0a:	46c0      	nop			@ (mov r8, r8)
10051c0c:	e7fd      	b.n	10051c0a <__NVIC_SystemReset+0x16>
10051c0e:	46c0      	nop			@ (mov r8, r8)
10051c10:	e000ed00 	.word	0xe000ed00
10051c14:	05fa0004 	.word	0x05fa0004

10051c18 <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
10051c18:	b580      	push	{r7, lr}
10051c1a:	af00      	add	r7, sp, #0
  BLENVM_Init();
10051c1c:	f000 fde4 	bl	100527e8 <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
10051c20:	f7ff fb52 	bl	100512c8 <PKAMGR_Init>
10051c24:	0003      	movs	r3, r0
10051c26:	3301      	adds	r3, #1
10051c28:	d101      	bne.n	10051c2e <ModulesInit+0x16>
  {
    Error_Handler();
10051c2a:	f7f0 fa9f 	bl	1004216c <Error_Handler>
  }
}
10051c2e:	46c0      	nop			@ (mov r8, r8)
10051c30:	46bd      	mov	sp, r7
10051c32:	bd80      	pop	{r7, pc}

10051c34 <BLE_Init>:

void BLE_Init(void)
{
10051c34:	b5f0      	push	{r4, r5, r6, r7, lr}
10051c36:	b099      	sub	sp, #100	@ 0x64
10051c38:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
10051c3a:	234f      	movs	r3, #79	@ 0x4f
10051c3c:	18fb      	adds	r3, r7, r3
10051c3e:	2200      	movs	r2, #0
10051c40:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint16_t gap_dev_name_char_handle;
  uint16_t gap_appearance_char_handle;
  uint16_t gap_periph_pref_conn_param_char_handle;
  uint8_t bd_address[6] = {0};
10051c42:	233c      	movs	r3, #60	@ 0x3c
10051c44:	18fb      	adds	r3, r7, r3
10051c46:	0018      	movs	r0, r3
10051c48:	2306      	movs	r3, #6
10051c4a:	001a      	movs	r2, r3
10051c4c:	2100      	movs	r1, #0
10051c4e:	f016 f8ff 	bl	10067e50 <memset>
  uint8_t bd_address_len= 6;
10051c52:	234e      	movs	r3, #78	@ 0x4e
10051c54:	18fb      	adds	r3, r7, r3
10051c56:	2206      	movs	r2, #6
10051c58:	701a      	strb	r2, [r3, #0]
  uint16_t appearance = CFG_GAP_APPEARANCE;
10051c5a:	233a      	movs	r3, #58	@ 0x3a
10051c5c:	18fb      	adds	r3, r7, r3
10051c5e:	22a0      	movs	r2, #160	@ 0xa0
10051c60:	0092      	lsls	r2, r2, #2
10051c62:	801a      	strh	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
10051c64:	1d3a      	adds	r2, r7, #4
10051c66:	4b5b      	ldr	r3, [pc, #364]	@ (10051dd4 <BLE_Init+0x1a0>)
10051c68:	0010      	movs	r0, r2
10051c6a:	0019      	movs	r1, r3
10051c6c:	2334      	movs	r3, #52	@ 0x34
10051c6e:	001a      	movs	r2, r3
10051c70:	f016 f963 	bl	10067f3a <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
10051c74:	254d      	movs	r5, #77	@ 0x4d
10051c76:	197c      	adds	r4, r7, r5
10051c78:	1d3b      	adds	r3, r7, #4
10051c7a:	0018      	movs	r0, r3
10051c7c:	f003 fbf2 	bl	10055464 <BLE_STACK_Init>
10051c80:	0003      	movs	r3, r0
10051c82:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
10051c84:	197b      	adds	r3, r7, r5
10051c86:	781b      	ldrb	r3, [r3, #0]
10051c88:	2b00      	cmp	r3, #0
10051c8a:	d001      	beq.n	10051c90 <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
    Error_Handler();
10051c8c:	f7f0 fa6e 	bl	1004216c <Error_Handler>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_PUBLIC)

  bd_address[0] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000000000FF));
10051c90:	213c      	movs	r1, #60	@ 0x3c
10051c92:	187b      	adds	r3, r7, r1
10051c94:	2234      	movs	r2, #52	@ 0x34
10051c96:	701a      	strb	r2, [r3, #0]
  bd_address[1] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00000000FF00) >> 8);
10051c98:	187b      	adds	r3, r7, r1
10051c9a:	2212      	movs	r2, #18
10051c9c:	705a      	strb	r2, [r3, #1]
  bd_address[2] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x000000FF0000) >> 16);
10051c9e:	187b      	adds	r3, r7, r1
10051ca0:	222a      	movs	r2, #42	@ 0x2a
10051ca2:	709a      	strb	r2, [r3, #2]
  bd_address[3] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000FF000000) >> 24);
10051ca4:	187b      	adds	r3, r7, r1
10051ca6:	22e1      	movs	r2, #225	@ 0xe1
10051ca8:	70da      	strb	r2, [r3, #3]
  bd_address[4] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00FF00000000) >> 32);
10051caa:	187b      	adds	r3, r7, r1
10051cac:	2208      	movs	r2, #8
10051cae:	711a      	strb	r2, [r3, #4]
  bd_address[5] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0xFF0000000000) >> 40);
10051cb0:	187b      	adds	r3, r7, r1
10051cb2:	2200      	movs	r2, #0
10051cb4:	715a      	strb	r2, [r3, #5]
  (void)bd_address_len;

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bd_address);
10051cb6:	254d      	movs	r5, #77	@ 0x4d
10051cb8:	197c      	adds	r4, r7, r5
10051cba:	187b      	adds	r3, r7, r1
10051cbc:	001a      	movs	r2, r3
10051cbe:	2106      	movs	r1, #6
10051cc0:	2000      	movs	r0, #0
10051cc2:	f003 f8c7 	bl	10054e54 <aci_hal_write_config_data>
10051cc6:	0003      	movs	r3, r0
10051cc8:	7023      	strb	r3, [r4, #0]
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
10051cca:	197c      	adds	r4, r7, r5
10051ccc:	211f      	movs	r1, #31
10051cce:	2000      	movs	r0, #0
10051cd0:	f003 f8c4 	bl	10054e5c <aci_hal_set_tx_power_level>
10051cd4:	0003      	movs	r3, r0
10051cd6:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
10051cd8:	197c      	adds	r4, r7, r5
10051cda:	234a      	movs	r3, #74	@ 0x4a
10051cdc:	18fb      	adds	r3, r7, r3
10051cde:	0019      	movs	r1, r3
10051ce0:	2001      	movs	r0, #1
10051ce2:	f7ff fc63 	bl	100515ac <aci_gatt_srv_profile_init>
10051ce6:	0003      	movs	r3, r0
10051ce8:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
10051cea:	214c      	movs	r1, #76	@ 0x4c
10051cec:	187b      	adds	r3, r7, r1
10051cee:	2200      	movs	r2, #0
10051cf0:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
10051cf2:	187b      	adds	r3, r7, r1
10051cf4:	187a      	adds	r2, r7, r1
10051cf6:	7812      	ldrb	r2, [r2, #0]
10051cf8:	2101      	movs	r1, #1
10051cfa:	430a      	orrs	r2, r1
10051cfc:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
10051cfe:	197c      	adds	r4, r7, r5
10051d00:	224f      	movs	r2, #79	@ 0x4f
10051d02:	18bb      	adds	r3, r7, r2
10051d04:	781b      	ldrb	r3, [r3, #0]
10051d06:	2100      	movs	r1, #0
10051d08:	0018      	movs	r0, r3
10051d0a:	f002 febd 	bl	10054a88 <aci_gap_init>
10051d0e:	0003      	movs	r3, r0
10051d10:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
  }

  ret = aci_gap_profile_init(role, privacy_type,
10051d12:	002e      	movs	r6, r5
10051d14:	197c      	adds	r4, r7, r5
10051d16:	2546      	movs	r5, #70	@ 0x46
10051d18:	197d      	adds	r5, r7, r5
10051d1a:	2348      	movs	r3, #72	@ 0x48
10051d1c:	18fa      	adds	r2, r7, r3
10051d1e:	204f      	movs	r0, #79	@ 0x4f
10051d20:	183b      	adds	r3, r7, r0
10051d22:	7819      	ldrb	r1, [r3, #0]
10051d24:	234c      	movs	r3, #76	@ 0x4c
10051d26:	18fb      	adds	r3, r7, r3
10051d28:	7818      	ldrb	r0, [r3, #0]
10051d2a:	2344      	movs	r3, #68	@ 0x44
10051d2c:	18fb      	adds	r3, r7, r3
10051d2e:	9300      	str	r3, [sp, #0]
10051d30:	002b      	movs	r3, r5
10051d32:	f7ff fad5 	bl	100512e0 <aci_gap_profile_init>
10051d36:	0003      	movs	r3, r0
10051d38:	7023      	strb	r3, [r4, #0]
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  ret = Gap_profile_set_dev_name(0, sizeof(a_GapDeviceName), (uint8_t*)a_GapDeviceName);
10051d3a:	0035      	movs	r5, r6
10051d3c:	197c      	adds	r4, r7, r5
10051d3e:	4b26      	ldr	r3, [pc, #152]	@ (10051dd8 <BLE_Init+0x1a4>)
10051d40:	001a      	movs	r2, r3
10051d42:	2119      	movs	r1, #25
10051d44:	2000      	movs	r0, #0
10051d46:	f7ff fb3d 	bl	100513c4 <Gap_profile_set_dev_name>
10051d4a:	0003      	movs	r3, r0
10051d4c:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_dev_name - Device Name\n");
  }

  ret = Gap_profile_set_appearance(0, sizeof(appearance), (uint8_t*)&appearance);
10051d4e:	197c      	adds	r4, r7, r5
10051d50:	233a      	movs	r3, #58	@ 0x3a
10051d52:	18fb      	adds	r3, r7, r3
10051d54:	001a      	movs	r2, r3
10051d56:	2102      	movs	r1, #2
10051d58:	2000      	movs	r0, #0
10051d5a:	f7ff fb59 	bl	10051410 <Gap_profile_set_appearance>
10051d5e:	0003      	movs	r3, r0
10051d60:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize IO capability
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
10051d62:	4b1e      	ldr	r3, [pc, #120]	@ (10051ddc <BLE_Init+0x1a8>)
10051d64:	2201      	movs	r2, #1
10051d66:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
10051d68:	4b1c      	ldr	r3, [pc, #112]	@ (10051ddc <BLE_Init+0x1a8>)
10051d6a:	781b      	ldrb	r3, [r3, #0]
10051d6c:	197c      	adds	r4, r7, r5
10051d6e:	0018      	movs	r0, r3
10051d70:	f7fd fb4e 	bl	1004f410 <aci_gap_set_io_capability>
10051d74:	0003      	movs	r3, r0
10051d76:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize authentication
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
10051d78:	4b18      	ldr	r3, [pc, #96]	@ (10051ddc <BLE_Init+0x1a8>)
10051d7a:	2201      	movs	r2, #1
10051d7c:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
10051d7e:	4b17      	ldr	r3, [pc, #92]	@ (10051ddc <BLE_Init+0x1a8>)
10051d80:	2208      	movs	r2, #8
10051d82:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
10051d84:	4b15      	ldr	r3, [pc, #84]	@ (10051ddc <BLE_Init+0x1a8>)
10051d86:	2210      	movs	r2, #16
10051d88:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
10051d8a:	4b14      	ldr	r3, [pc, #80]	@ (10051ddc <BLE_Init+0x1a8>)
10051d8c:	2201      	movs	r2, #1
10051d8e:	709a      	strb	r2, [r3, #2]

  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/
  ret = aci_gap_set_security_requirements(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
10051d90:	4b12      	ldr	r3, [pc, #72]	@ (10051ddc <BLE_Init+0x1a8>)
10051d92:	7898      	ldrb	r0, [r3, #2]
10051d94:	4b11      	ldr	r3, [pc, #68]	@ (10051ddc <BLE_Init+0x1a8>)
10051d96:	7859      	ldrb	r1, [r3, #1]
10051d98:	4b10      	ldr	r3, [pc, #64]	@ (10051ddc <BLE_Init+0x1a8>)
10051d9a:	78db      	ldrb	r3, [r3, #3]
10051d9c:	4a0f      	ldr	r2, [pc, #60]	@ (10051ddc <BLE_Init+0x1a8>)
10051d9e:	7912      	ldrb	r2, [r2, #4]
10051da0:	002e      	movs	r6, r5
10051da2:	197c      	adds	r4, r7, r5
10051da4:	2500      	movs	r5, #0
10051da6:	9502      	str	r5, [sp, #8]
10051da8:	9201      	str	r2, [sp, #4]
10051daa:	9300      	str	r3, [sp, #0]
10051dac:	2300      	movs	r3, #0
10051dae:	2201      	movs	r2, #1
10051db0:	f7fd fb3e 	bl	1004f430 <aci_gap_set_security_requirements>
10051db4:	0003      	movs	r3, r0
10051db6:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize Filter Accept List
   */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
10051db8:	4b08      	ldr	r3, [pc, #32]	@ (10051ddc <BLE_Init+0x1a8>)
10051dba:	789b      	ldrb	r3, [r3, #2]
10051dbc:	2b00      	cmp	r3, #0
10051dbe:	d005      	beq.n	10051dcc <BLE_Init+0x198>
  {
    ret = aci_gap_configure_filter_accept_and_resolving_list(0x01);
10051dc0:	19bc      	adds	r4, r7, r6
10051dc2:	2001      	movs	r0, #1
10051dc4:	f002 fe8a 	bl	10054adc <aci_gap_configure_filter_accept_and_resolving_list>
10051dc8:	0003      	movs	r3, r0
10051dca:	7023      	strb	r3, [r4, #0]
      APP_DBG_MSG("  Success: aci_gap_configure_filter_accept_and_resolving_list command\n");
    }
  }
  APP_DBG_MSG("==>> End BLE_Init function\n");

}
10051dcc:	46c0      	nop			@ (mov r8, r8)
10051dce:	46bd      	mov	sp, r7
10051dd0:	b015      	add	sp, #84	@ 0x54
10051dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051dd4:	10068ff8 	.word	0x10068ff8
10051dd8:	10069934 	.word	0x10069934
10051ddc:	20002320 	.word	0x20002320

10051de0 <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
10051de0:	b580      	push	{r7, lr}
10051de2:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
10051de4:	2101      	movs	r1, #1
10051de6:	2001      	movs	r0, #1
10051de8:	f002 fd60 	bl	100548ac <UTIL_SEQ_SetTask>
}
10051dec:	46c0      	nop			@ (mov r8, r8)
10051dee:	46bd      	mov	sp, r7
10051df0:	bd80      	pop	{r7, pc}

10051df2 <BLEStack_Process>:
static void BLEStack_Process(void)
{
10051df2:	b580      	push	{r7, lr}
10051df4:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
10051df6:	2001      	movs	r0, #1
10051df8:	f002 fc1a 	bl	10054630 <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
10051dfc:	f003 fa4e 	bl	1005529c <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
10051e00:	2001      	movs	r0, #1
10051e02:	f002 fc1f 	bl	10054644 <APP_DEBUG_SIGNAL_RESET>
}
10051e06:	46c0      	nop			@ (mov r8, r8)
10051e08:	46bd      	mov	sp, r7
10051e0a:	bd80      	pop	{r7, pc}

10051e0c <VTimer_Process>:

void VTimer_Process(void)
{
10051e0c:	b580      	push	{r7, lr}
10051e0e:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
10051e10:	f7f9 fd4a 	bl	1004b8a8 <HAL_RADIO_TIMER_Tick>
}
10051e14:	46c0      	nop			@ (mov r8, r8)
10051e16:	46bd      	mov	sp, r7
10051e18:	bd80      	pop	{r7, pc}

10051e1a <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
10051e1a:	b580      	push	{r7, lr}
10051e1c:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
10051e1e:	2100      	movs	r1, #0
10051e20:	2002      	movs	r0, #2
10051e22:	f002 fd43 	bl	100548ac <UTIL_SEQ_SetTask>
}
10051e26:	46c0      	nop			@ (mov r8, r8)
10051e28:	46bd      	mov	sp, r7
10051e2a:	bd80      	pop	{r7, pc}

10051e2c <NVM_Process>:
void NVM_Process(void)
{
10051e2c:	b580      	push	{r7, lr}
10051e2e:	af00      	add	r7, sp, #0
  NVMDB_Tick();
10051e30:	f7ff f9d0 	bl	100511d4 <NVMDB_Tick>
}
10051e34:	46c0      	nop			@ (mov r8, r8)
10051e36:	46bd      	mov	sp, r7
10051e38:	bd80      	pop	{r7, pc}

10051e3a <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
10051e3a:	b580      	push	{r7, lr}
10051e3c:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
10051e3e:	2101      	movs	r1, #1
10051e40:	2004      	movs	r0, #4
10051e42:	f002 fd33 	bl	100548ac <UTIL_SEQ_SetTask>
}
10051e46:	46c0      	nop			@ (mov r8, r8)
10051e48:	46bd      	mov	sp, r7
10051e4a:	bd80      	pop	{r7, pc}

10051e4c <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10051e4c:	b580      	push	{r7, lr}
10051e4e:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
10051e50:	f7ff ffe3 	bl	10051e1a <VTimer_Process_Schedule>
}
10051e54:	46c0      	nop			@ (mov r8, r8)
10051e56:	46bd      	mov	sp, r7
10051e58:	bd80      	pop	{r7, pc}

10051e5a <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10051e5a:	b580      	push	{r7, lr}
10051e5c:	b082      	sub	sp, #8
10051e5e:	af00      	add	r7, sp, #0
10051e60:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
10051e62:	687b      	ldr	r3, [r7, #4]
10051e64:	0018      	movs	r0, r3
10051e66:	f00e f91b 	bl	100600a0 <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
10051e6a:	f7ff ffd6 	bl	10051e1a <VTimer_Process_Schedule>
  NVM_Process_Schedule();
10051e6e:	f7ff ffe4 	bl	10051e3a <NVM_Process_Schedule>
}
10051e72:	46c0      	nop			@ (mov r8, r8)
10051e74:	46bd      	mov	sp, r7
10051e76:	b002      	add	sp, #8
10051e78:	bd80      	pop	{r7, pc}

10051e7a <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
10051e7a:	b580      	push	{r7, lr}
10051e7c:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
10051e7e:	f7ff ffaf 	bl	10051de0 <BLEStack_Process_Schedule>
}
10051e82:	46c0      	nop			@ (mov r8, r8)
10051e84:	46bd      	mov	sp, r7
10051e86:	bd80      	pop	{r7, pc}

10051e88 <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
10051e88:	b580      	push	{r7, lr}
10051e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10051e8c:	4b12      	ldr	r3, [pc, #72]	@ (10051ed8 <APP_BLE_Init+0x50>)
10051e8e:	001a      	movs	r2, r3
10051e90:	2100      	movs	r1, #0
10051e92:	2001      	movs	r0, #1
10051e94:	f002 fce6 	bl	10054864 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
10051e98:	4b10      	ldr	r3, [pc, #64]	@ (10051edc <APP_BLE_Init+0x54>)
10051e9a:	001a      	movs	r2, r3
10051e9c:	2100      	movs	r1, #0
10051e9e:	2002      	movs	r0, #2
10051ea0:	f002 fce0 	bl	10054864 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10051ea4:	4b0e      	ldr	r3, [pc, #56]	@ (10051ee0 <APP_BLE_Init+0x58>)
10051ea6:	001a      	movs	r2, r3
10051ea8:	2100      	movs	r1, #0
10051eaa:	2004      	movs	r0, #4
10051eac:	f002 fcda 	bl	10054864 <UTIL_SEQ_RegTask>
  ModulesInit();
10051eb0:	f7ff feb2 	bl	10051c18 <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10051eb4:	f7ff febe 	bl	10051c34 <BLE_Init>

  /**
  * Initialization of the BLE App Context
  */
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10051eb8:	4b0a      	ldr	r3, [pc, #40]	@ (10051ee4 <APP_BLE_Init+0x5c>)
10051eba:	2200      	movs	r2, #0
10051ebc:	739a      	strb	r2, [r3, #14]
  bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10051ebe:	4b09      	ldr	r3, [pc, #36]	@ (10051ee4 <APP_BLE_Init+0x5c>)
10051ec0:	2201      	movs	r2, #1
10051ec2:	4252      	negs	r2, r2
10051ec4:	819a      	strh	r2, [r3, #12]
  /**
  * Initialize Services and Characteristics.
  */
  APP_DBG_MSG("\n");
  APP_DBG_MSG("Services and Characteristics creation\n");
  USART_APP_Init();
10051ec6:	f000 fc81 	bl	100527cc <USART_APP_Init>
  APP_DBG_MSG("\n");

  /* USER CODE BEGIN APP_BLE_Init_3 */

    /* Start to Advertise to accept a connection */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10051eca:	2001      	movs	r0, #1
10051ecc:	f000 f9ac 	bl	10052228 <APP_BLE_Procedure_Gap_Peripheral>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
10051ed0:	46c0      	nop			@ (mov r8, r8)
}
10051ed2:	46bd      	mov	sp, r7
10051ed4:	bd80      	pop	{r7, pc}
10051ed6:	46c0      	nop			@ (mov r8, r8)
10051ed8:	10051df3 	.word	0x10051df3
10051edc:	10051e0d 	.word	0x10051e0d
10051ee0:	10051e2d 	.word	0x10051e2d
10051ee4:	20002320 	.word	0x20002320

10051ee8 <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
10051ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
10051eea:	b099      	sub	sp, #100	@ 0x64
10051eec:	af04      	add	r7, sp, #16
10051eee:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
10051ef0:	234b      	movs	r3, #75	@ 0x4b
10051ef2:	18fb      	adds	r3, r7, r3
10051ef4:	2286      	movs	r2, #134	@ 0x86
10051ef6:	701a      	strb	r2, [r3, #0]
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  if(hci_pckt->type != HCI_EVENT_PKT_TYPE && hci_pckt->type != HCI_EVENT_EXT_PKT_TYPE)
10051ef8:	687b      	ldr	r3, [r7, #4]
10051efa:	781b      	ldrb	r3, [r3, #0]
10051efc:	2b04      	cmp	r3, #4
10051efe:	d004      	beq.n	10051f0a <BLEEVT_App_Notification+0x22>
10051f00:	687b      	ldr	r3, [r7, #4]
10051f02:	781b      	ldrb	r3, [r3, #0]
10051f04:	2b82      	cmp	r3, #130	@ 0x82
10051f06:	d000      	beq.n	10051f0a <BLEEVT_App_Notification+0x22>
10051f08:	e132      	b.n	10052170 <BLEEVT_App_Notification+0x288>
  {
    /* Not an event */
    return;
  }

  p_event_pckt = (hci_event_pckt*)hci_pckt->data;
10051f0a:	687b      	ldr	r3, [r7, #4]
10051f0c:	3301      	adds	r3, #1
10051f0e:	647b      	str	r3, [r7, #68]	@ 0x44

  if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
10051f10:	687b      	ldr	r3, [r7, #4]
10051f12:	781b      	ldrb	r3, [r3, #0]
10051f14:	2b04      	cmp	r3, #4
10051f16:	d103      	bne.n	10051f20 <BLEEVT_App_Notification+0x38>
    event_data = p_event_pckt->data;
10051f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051f1a:	3302      	adds	r3, #2
10051f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
10051f1e:	e005      	b.n	10051f2c <BLEEVT_App_Notification+0x44>
  }
  else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
    hci_event_ext_pckt *p_event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
10051f20:	687b      	ldr	r3, [r7, #4]
10051f22:	3301      	adds	r3, #1
10051f24:	643b      	str	r3, [r7, #64]	@ 0x40
    event_data = p_event_pckt->data;
10051f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10051f28:	3303      	adds	r3, #3
10051f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  switch (p_event_pckt->evt) /* evt field is at same offset in hci_event_pckt and hci_event_ext_pckt */
10051f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051f2e:	781b      	ldrb	r3, [r3, #0]
10051f30:	2bff      	cmp	r3, #255	@ 0xff
10051f32:	d100      	bne.n	10051f36 <BLEEVT_App_Notification+0x4e>
10051f34:	e0a4      	b.n	10052080 <BLEEVT_App_Notification+0x198>
10051f36:	dd00      	ble.n	10051f3a <BLEEVT_App_Notification+0x52>
10051f38:	e11c      	b.n	10052174 <BLEEVT_App_Notification+0x28c>
10051f3a:	2b3e      	cmp	r3, #62	@ 0x3e
10051f3c:	d02d      	beq.n	10051f9a <BLEEVT_App_Notification+0xb2>
10051f3e:	dd00      	ble.n	10051f42 <BLEEVT_App_Notification+0x5a>
10051f40:	e118      	b.n	10052174 <BLEEVT_App_Notification+0x28c>
10051f42:	2b05      	cmp	r3, #5
10051f44:	d003      	beq.n	10051f4e <BLEEVT_App_Notification+0x66>
10051f46:	2b10      	cmp	r3, #16
10051f48:	d100      	bne.n	10051f4c <BLEEVT_App_Notification+0x64>
10051f4a:	e108      	b.n	1005215e <BLEEVT_App_Notification+0x276>

  default:
    /* USER CODE BEGIN ECODE_DEFAULT*/

    /* USER CODE END ECODE_DEFAULT*/
    break;
10051f4c:	e112      	b.n	10052174 <BLEEVT_App_Notification+0x28c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
10051f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051f50:	3302      	adds	r3, #2
10051f52:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
10051f54:	68fb      	ldr	r3, [r7, #12]
10051f56:	785a      	ldrb	r2, [r3, #1]
10051f58:	789b      	ldrb	r3, [r3, #2]
10051f5a:	021b      	lsls	r3, r3, #8
10051f5c:	4313      	orrs	r3, r2
10051f5e:	b29a      	uxth	r2, r3
10051f60:	4b87      	ldr	r3, [pc, #540]	@ (10052180 <BLEEVT_App_Notification+0x298>)
10051f62:	899b      	ldrh	r3, [r3, #12]
10051f64:	429a      	cmp	r2, r3
10051f66:	d106      	bne.n	10051f76 <BLEEVT_App_Notification+0x8e>
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10051f68:	4b85      	ldr	r3, [pc, #532]	@ (10052180 <BLEEVT_App_Notification+0x298>)
10051f6a:	2201      	movs	r2, #1
10051f6c:	4252      	negs	r2, r2
10051f6e:	819a      	strh	r2, [r3, #12]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10051f70:	4b83      	ldr	r3, [pc, #524]	@ (10052180 <BLEEVT_App_Notification+0x298>)
10051f72:	2200      	movs	r2, #0
10051f74:	739a      	strb	r2, [r3, #14]
      gap_cmd_resp_release();
10051f76:	f000 fa2b 	bl	100523d0 <gap_cmd_resp_release>
      USARTHandleNotification.EvtOpcode = USART_DISCON_HANDLE_EVT;
10051f7a:	4b82      	ldr	r3, [pc, #520]	@ (10052184 <BLEEVT_App_Notification+0x29c>)
10051f7c:	2201      	movs	r2, #1
10051f7e:	701a      	strb	r2, [r3, #0]
      USARTHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
10051f80:	68fb      	ldr	r3, [r7, #12]
10051f82:	785a      	ldrb	r2, [r3, #1]
10051f84:	789b      	ldrb	r3, [r3, #2]
10051f86:	021b      	lsls	r3, r3, #8
10051f88:	4313      	orrs	r3, r2
10051f8a:	b29a      	uxth	r2, r3
10051f8c:	4b7d      	ldr	r3, [pc, #500]	@ (10052184 <BLEEVT_App_Notification+0x29c>)
10051f8e:	805a      	strh	r2, [r3, #2]
      USART_APP_EvtRx(&USARTHandleNotification);
10051f90:	4b7c      	ldr	r3, [pc, #496]	@ (10052184 <BLEEVT_App_Notification+0x29c>)
10051f92:	0018      	movs	r0, r3
10051f94:	f000 fbfc 	bl	10052790 <USART_APP_EvtRx>
    break;
10051f98:	e0ef      	b.n	1005217a <BLEEVT_App_Notification+0x292>
      p_meta_evt = (hci_le_meta_event*) p_event_pckt->data;
10051f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051f9c:	3302      	adds	r3, #2
10051f9e:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_meta_evt->subevent)
10051fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051fa2:	781b      	ldrb	r3, [r3, #0]
10051fa4:	2b0c      	cmp	r3, #12
10051fa6:	d00b      	beq.n	10051fc0 <BLEEVT_App_Notification+0xd8>
10051fa8:	dc68      	bgt.n	1005207c <BLEEVT_App_Notification+0x194>
10051faa:	2b0a      	cmp	r3, #10
10051fac:	d00e      	beq.n	10051fcc <BLEEVT_App_Notification+0xe4>
10051fae:	dc65      	bgt.n	1005207c <BLEEVT_App_Notification+0x194>
10051fb0:	2b01      	cmp	r3, #1
10051fb2:	d037      	beq.n	10052024 <BLEEVT_App_Notification+0x13c>
10051fb4:	2b03      	cmp	r3, #3
10051fb6:	d161      	bne.n	1005207c <BLEEVT_App_Notification+0x194>
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
10051fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051fba:	3301      	adds	r3, #1
10051fbc:	61bb      	str	r3, [r7, #24]
        break;
10051fbe:	e05e      	b.n	1005207e <BLEEVT_App_Notification+0x196>
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
10051fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051fc2:	3301      	adds	r3, #1
10051fc4:	623b      	str	r3, [r7, #32]
          gap_cmd_resp_release();
10051fc6:	f000 fa03 	bl	100523d0 <gap_cmd_resp_release>
        break;
10051fca:	e058      	b.n	1005207e <BLEEVT_App_Notification+0x196>
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
10051fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051fce:	3301      	adds	r3, #1
10051fd0:	61fb      	str	r3, [r7, #28]
          connection_complete_event(p_enhanced_conn_complete->Status,
10051fd2:	69fb      	ldr	r3, [r7, #28]
10051fd4:	781c      	ldrb	r4, [r3, #0]
10051fd6:	69fb      	ldr	r3, [r7, #28]
10051fd8:	785a      	ldrb	r2, [r3, #1]
10051fda:	789b      	ldrb	r3, [r3, #2]
10051fdc:	021b      	lsls	r3, r3, #8
10051fde:	4313      	orrs	r3, r2
10051fe0:	b29d      	uxth	r5, r3
10051fe2:	69fb      	ldr	r3, [r7, #28]
10051fe4:	791e      	ldrb	r6, [r3, #4]
                                    p_enhanced_conn_complete->Peer_Address,
10051fe6:	69fb      	ldr	r3, [r7, #28]
10051fe8:	3305      	adds	r3, #5
10051fea:	469c      	mov	ip, r3
          connection_complete_event(p_enhanced_conn_complete->Status,
10051fec:	69fb      	ldr	r3, [r7, #28]
10051fee:	7dda      	ldrb	r2, [r3, #23]
10051ff0:	7e1b      	ldrb	r3, [r3, #24]
10051ff2:	021b      	lsls	r3, r3, #8
10051ff4:	4313      	orrs	r3, r2
10051ff6:	b29a      	uxth	r2, r3
10051ff8:	69fb      	ldr	r3, [r7, #28]
10051ffa:	7e59      	ldrb	r1, [r3, #25]
10051ffc:	7e9b      	ldrb	r3, [r3, #26]
10051ffe:	021b      	lsls	r3, r3, #8
10052000:	430b      	orrs	r3, r1
10052002:	b299      	uxth	r1, r3
10052004:	69fb      	ldr	r3, [r7, #28]
10052006:	7ed8      	ldrb	r0, [r3, #27]
10052008:	7f1b      	ldrb	r3, [r3, #28]
1005200a:	021b      	lsls	r3, r3, #8
1005200c:	4303      	orrs	r3, r0
1005200e:	b29b      	uxth	r3, r3
10052010:	9302      	str	r3, [sp, #8]
10052012:	9101      	str	r1, [sp, #4]
10052014:	9200      	str	r2, [sp, #0]
10052016:	4663      	mov	r3, ip
10052018:	0032      	movs	r2, r6
1005201a:	0029      	movs	r1, r5
1005201c:	0020      	movs	r0, r4
1005201e:	f000 f8bf 	bl	100521a0 <connection_complete_event>
        break;
10052022:	e02c      	b.n	1005207e <BLEEVT_App_Notification+0x196>
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
10052024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10052026:	3301      	adds	r3, #1
10052028:	617b      	str	r3, [r7, #20]
          connection_complete_event(p_conn_complete->Status,
1005202a:	697b      	ldr	r3, [r7, #20]
1005202c:	781c      	ldrb	r4, [r3, #0]
1005202e:	697b      	ldr	r3, [r7, #20]
10052030:	785a      	ldrb	r2, [r3, #1]
10052032:	789b      	ldrb	r3, [r3, #2]
10052034:	021b      	lsls	r3, r3, #8
10052036:	4313      	orrs	r3, r2
10052038:	b29d      	uxth	r5, r3
1005203a:	697b      	ldr	r3, [r7, #20]
1005203c:	791e      	ldrb	r6, [r3, #4]
                                    p_conn_complete->Peer_Address,
1005203e:	697b      	ldr	r3, [r7, #20]
10052040:	3305      	adds	r3, #5
10052042:	469c      	mov	ip, r3
          connection_complete_event(p_conn_complete->Status,
10052044:	697b      	ldr	r3, [r7, #20]
10052046:	7ada      	ldrb	r2, [r3, #11]
10052048:	7b1b      	ldrb	r3, [r3, #12]
1005204a:	021b      	lsls	r3, r3, #8
1005204c:	4313      	orrs	r3, r2
1005204e:	b29a      	uxth	r2, r3
10052050:	697b      	ldr	r3, [r7, #20]
10052052:	7b59      	ldrb	r1, [r3, #13]
10052054:	7b9b      	ldrb	r3, [r3, #14]
10052056:	021b      	lsls	r3, r3, #8
10052058:	430b      	orrs	r3, r1
1005205a:	b299      	uxth	r1, r3
1005205c:	697b      	ldr	r3, [r7, #20]
1005205e:	7bd8      	ldrb	r0, [r3, #15]
10052060:	7c1b      	ldrb	r3, [r3, #16]
10052062:	021b      	lsls	r3, r3, #8
10052064:	4303      	orrs	r3, r0
10052066:	b29b      	uxth	r3, r3
10052068:	9302      	str	r3, [sp, #8]
1005206a:	9101      	str	r1, [sp, #4]
1005206c:	9200      	str	r2, [sp, #0]
1005206e:	4663      	mov	r3, ip
10052070:	0032      	movs	r2, r6
10052072:	0029      	movs	r1, r5
10052074:	0020      	movs	r0, r4
10052076:	f000 f893 	bl	100521a0 <connection_complete_event>
        break;
1005207a:	e000      	b.n	1005207e <BLEEVT_App_Notification+0x196>
        break;
1005207c:	46c0      	nop			@ (mov r8, r8)
    break;
1005207e:	e07c      	b.n	1005217a <BLEEVT_App_Notification+0x292>
      aci_blecore_event *p_blecore_evt = (aci_blecore_event*) event_data;
10052080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10052082:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
10052084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052086:	781a      	ldrb	r2, [r3, #0]
10052088:	785b      	ldrb	r3, [r3, #1]
1005208a:	021b      	lsls	r3, r3, #8
1005208c:	4313      	orrs	r3, r2
1005208e:	b29b      	uxth	r3, r3
10052090:	4a3d      	ldr	r2, [pc, #244]	@ (10052188 <BLEEVT_App_Notification+0x2a0>)
10052092:	4293      	cmp	r3, r2
10052094:	d03b      	beq.n	1005210e <BLEEVT_App_Notification+0x226>
10052096:	4a3c      	ldr	r2, [pc, #240]	@ (10052188 <BLEEVT_App_Notification+0x2a0>)
10052098:	4293      	cmp	r3, r2
1005209a:	dc5a      	bgt.n	10052152 <BLEEVT_App_Notification+0x26a>
1005209c:	2280      	movs	r2, #128	@ 0x80
1005209e:	0112      	lsls	r2, r2, #4
100520a0:	4293      	cmp	r3, r2
100520a2:	d01c      	beq.n	100520de <BLEEVT_App_Notification+0x1f6>
100520a4:	2280      	movs	r2, #128	@ 0x80
100520a6:	0112      	lsls	r2, r2, #4
100520a8:	4293      	cmp	r3, r2
100520aa:	dc52      	bgt.n	10052152 <BLEEVT_App_Notification+0x26a>
100520ac:	4a37      	ldr	r2, [pc, #220]	@ (1005218c <BLEEVT_App_Notification+0x2a4>)
100520ae:	4293      	cmp	r3, r2
100520b0:	d051      	beq.n	10052156 <BLEEVT_App_Notification+0x26e>
100520b2:	4a36      	ldr	r2, [pc, #216]	@ (1005218c <BLEEVT_App_Notification+0x2a4>)
100520b4:	4293      	cmp	r3, r2
100520b6:	dc4c      	bgt.n	10052152 <BLEEVT_App_Notification+0x26a>
100520b8:	4a35      	ldr	r2, [pc, #212]	@ (10052190 <BLEEVT_App_Notification+0x2a8>)
100520ba:	4293      	cmp	r3, r2
100520bc:	d013      	beq.n	100520e6 <BLEEVT_App_Notification+0x1fe>
100520be:	2281      	movs	r2, #129	@ 0x81
100520c0:	00d2      	lsls	r2, r2, #3
100520c2:	4293      	cmp	r3, r2
100520c4:	da45      	bge.n	10052152 <BLEEVT_App_Notification+0x26a>
100520c6:	4a33      	ldr	r2, [pc, #204]	@ (10052194 <BLEEVT_App_Notification+0x2ac>)
100520c8:	4293      	cmp	r3, r2
100520ca:	d010      	beq.n	100520ee <BLEEVT_App_Notification+0x206>
100520cc:	4a31      	ldr	r2, [pc, #196]	@ (10052194 <BLEEVT_App_Notification+0x2ac>)
100520ce:	4293      	cmp	r3, r2
100520d0:	dc3f      	bgt.n	10052152 <BLEEVT_App_Notification+0x26a>
100520d2:	2b04      	cmp	r3, #4
100520d4:	d041      	beq.n	1005215a <BLEEVT_App_Notification+0x272>
100520d6:	4a30      	ldr	r2, [pc, #192]	@ (10052198 <BLEEVT_App_Notification+0x2b0>)
100520d8:	4293      	cmp	r3, r2
100520da:	d014      	beq.n	10052106 <BLEEVT_App_Notification+0x21e>
        break;
100520dc:	e039      	b.n	10052152 <BLEEVT_App_Notification+0x26a>
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
100520de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100520e0:	3302      	adds	r3, #2
100520e2:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
100520e4:	e03a      	b.n	1005215c <BLEEVT_App_Notification+0x274>
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
100520e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100520e8:	3302      	adds	r3, #2
100520ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
100520ec:	e036      	b.n	1005215c <BLEEVT_App_Notification+0x274>
          ret = aci_gap_passkey_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
100520ee:	4b24      	ldr	r3, [pc, #144]	@ (10052180 <BLEEVT_App_Notification+0x298>)
100520f0:	899b      	ldrh	r3, [r3, #12]
100520f2:	224b      	movs	r2, #75	@ 0x4b
100520f4:	18bc      	adds	r4, r7, r2
100520f6:	4a29      	ldr	r2, [pc, #164]	@ (1005219c <BLEEVT_App_Notification+0x2b4>)
100520f8:	0011      	movs	r1, r2
100520fa:	0018      	movs	r0, r3
100520fc:	f7fd f9c7 	bl	1004f48e <aci_gap_passkey_resp>
10052100:	0003      	movs	r3, r0
10052102:	7023      	strb	r3, [r4, #0]
        break;
10052104:	e02a      	b.n	1005215c <BLEEVT_App_Notification+0x274>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
10052106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052108:	3302      	adds	r3, #2
1005210a:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
1005210c:	e026      	b.n	1005215c <BLEEVT_App_Notification+0x274>
          p_read = (aci_gatt_srv_read_event_rp0*)p_blecore_evt->data;
1005210e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10052110:	3302      	adds	r3, #2
10052112:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t error_code = BLE_ATT_ERR_INSUFF_AUTHORIZATION;
10052114:	2437      	movs	r4, #55	@ 0x37
10052116:	193b      	adds	r3, r7, r4
10052118:	2208      	movs	r2, #8
1005211a:	701a      	strb	r2, [r3, #0]
          aci_gatt_srv_resp(p_read->Connection_Handle,
1005211c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005211e:	781a      	ldrb	r2, [r3, #0]
10052120:	785b      	ldrb	r3, [r3, #1]
10052122:	021b      	lsls	r3, r3, #8
10052124:	4313      	orrs	r3, r2
10052126:	b298      	uxth	r0, r3
10052128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005212a:	789a      	ldrb	r2, [r3, #2]
1005212c:	78db      	ldrb	r3, [r3, #3]
1005212e:	021b      	lsls	r3, r3, #8
10052130:	4313      	orrs	r3, r2
10052132:	b299      	uxth	r1, r3
10052134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10052136:	791a      	ldrb	r2, [r3, #4]
10052138:	795b      	ldrb	r3, [r3, #5]
1005213a:	021b      	lsls	r3, r3, #8
1005213c:	4313      	orrs	r3, r2
1005213e:	b29a      	uxth	r2, r3
10052140:	193b      	adds	r3, r7, r4
10052142:	781b      	ldrb	r3, [r3, #0]
10052144:	2400      	movs	r4, #0
10052146:	9401      	str	r4, [sp, #4]
10052148:	2400      	movs	r4, #0
1005214a:	9400      	str	r4, [sp, #0]
1005214c:	f7fd f9ec 	bl	1004f528 <aci_gatt_srv_resp>
          break;
10052150:	e004      	b.n	1005215c <BLEEVT_App_Notification+0x274>
        break;
10052152:	46c0      	nop			@ (mov r8, r8)
10052154:	e011      	b.n	1005217a <BLEEVT_App_Notification+0x292>
        break;
10052156:	46c0      	nop			@ (mov r8, r8)
10052158:	e00f      	b.n	1005217a <BLEEVT_App_Notification+0x292>
        break;
1005215a:	46c0      	nop			@ (mov r8, r8)
    break;
1005215c:	e00d      	b.n	1005217a <BLEEVT_App_Notification+0x292>
      p_hci_hardware_error_event = (hci_hardware_error_event_rp0*)p_event_pckt->data;
1005215e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10052160:	3302      	adds	r3, #2
10052162:	613b      	str	r3, [r7, #16]
      if (p_hci_hardware_error_event->Hardware_Code <= 0x03)
10052164:	693b      	ldr	r3, [r7, #16]
10052166:	781b      	ldrb	r3, [r3, #0]
10052168:	2b03      	cmp	r3, #3
1005216a:	d805      	bhi.n	10052178 <BLEEVT_App_Notification+0x290>
        NVIC_SystemReset();
1005216c:	f7ff fd42 	bl	10051bf4 <__NVIC_SystemReset>
    return;
10052170:	46c0      	nop			@ (mov r8, r8)
10052172:	e002      	b.n	1005217a <BLEEVT_App_Notification+0x292>
    break;
10052174:	46c0      	nop			@ (mov r8, r8)
10052176:	e000      	b.n	1005217a <BLEEVT_App_Notification+0x292>
    break;
10052178:	46c0      	nop			@ (mov r8, r8)
  }
}
1005217a:	46bd      	mov	sp, r7
1005217c:	b015      	add	sp, #84	@ 0x54
1005217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10052180:	20002320 	.word	0x20002320
10052184:	20002330 	.word	0x20002330
10052188:	00000c19 	.word	0x00000c19
1005218c:	0000040a 	.word	0x0000040a
10052190:	00000407 	.word	0x00000407
10052194:	00000402 	.word	0x00000402
10052198:	00000401 	.word	0x00000401
1005219c:	0001b207 	.word	0x0001b207

100521a0 <connection_complete_event>:
                                      uint8_t Peer_Address_Type,
                                      uint8_t Peer_Address[6],
                                      uint16_t Connection_Interval,
                                      uint16_t Peripheral_Latency,
                                      uint16_t Supervision_Timeout)
{
100521a0:	b590      	push	{r4, r7, lr}
100521a2:	b083      	sub	sp, #12
100521a4:	af00      	add	r7, sp, #0
100521a6:	0004      	movs	r4, r0
100521a8:	0008      	movs	r0, r1
100521aa:	0011      	movs	r1, r2
100521ac:	603b      	str	r3, [r7, #0]
100521ae:	1dfb      	adds	r3, r7, #7
100521b0:	1c22      	adds	r2, r4, #0
100521b2:	701a      	strb	r2, [r3, #0]
100521b4:	1d3b      	adds	r3, r7, #4
100521b6:	1c02      	adds	r2, r0, #0
100521b8:	801a      	strh	r2, [r3, #0]
100521ba:	1dbb      	adds	r3, r7, #6
100521bc:	1c0a      	adds	r2, r1, #0
100521be:	701a      	strb	r2, [r3, #0]
  if(Status != 0)
100521c0:	1dfb      	adds	r3, r7, #7
100521c2:	781b      	ldrb	r3, [r3, #0]
100521c4:	2b00      	cmp	r3, #0
100521c6:	d003      	beq.n	100521d0 <connection_complete_event+0x30>
  {
    APP_DBG_MSG("==>> connection_complete_event Fail, Status: 0x%02X\n", Status);
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
100521c8:	4b10      	ldr	r3, [pc, #64]	@ (1005220c <connection_complete_event+0x6c>)
100521ca:	2200      	movs	r2, #0
100521cc:	739a      	strb	r2, [r3, #14]
    return;
100521ce:	e019      	b.n	10052204 <connection_complete_event+0x64>
              FRACTIONAL_2DIGITS(Connection_Interval*1.25),
              Peripheral_Latency,
              Supervision_Timeout * 10
              );

  if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
100521d0:	4b0e      	ldr	r3, [pc, #56]	@ (1005220c <connection_complete_event+0x6c>)
100521d2:	7b9b      	ldrb	r3, [r3, #14]
100521d4:	2b01      	cmp	r3, #1
100521d6:	d103      	bne.n	100521e0 <connection_complete_event+0x40>
  {
    /* Connection as client */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
100521d8:	4b0c      	ldr	r3, [pc, #48]	@ (1005220c <connection_complete_event+0x6c>)
100521da:	2203      	movs	r2, #3
100521dc:	739a      	strb	r2, [r3, #14]
100521de:	e002      	b.n	100521e6 <connection_complete_event+0x46>
  }
  else
  {
    /* Connection as server */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
100521e0:	4b0a      	ldr	r3, [pc, #40]	@ (1005220c <connection_complete_event+0x6c>)
100521e2:	2202      	movs	r2, #2
100521e4:	739a      	strb	r2, [r3, #14]
  }
  bleAppContext.BleApplicationContext_legacy.connectionHandle = Connection_Handle;
100521e6:	4b09      	ldr	r3, [pc, #36]	@ (1005220c <connection_complete_event+0x6c>)
100521e8:	1d3a      	adds	r2, r7, #4
100521ea:	8812      	ldrh	r2, [r2, #0]
100521ec:	819a      	strh	r2, [r3, #12]

  USARTHandleNotification.EvtOpcode = USART_CONN_HANDLE_EVT;
100521ee:	4b08      	ldr	r3, [pc, #32]	@ (10052210 <connection_complete_event+0x70>)
100521f0:	2200      	movs	r2, #0
100521f2:	701a      	strb	r2, [r3, #0]
  USARTHandleNotification.ConnectionHandle = Connection_Handle;
100521f4:	4b06      	ldr	r3, [pc, #24]	@ (10052210 <connection_complete_event+0x70>)
100521f6:	1d3a      	adds	r2, r7, #4
100521f8:	8812      	ldrh	r2, [r2, #0]
100521fa:	805a      	strh	r2, [r3, #2]
  USART_APP_EvtRx(&USARTHandleNotification);
100521fc:	4b04      	ldr	r3, [pc, #16]	@ (10052210 <connection_complete_event+0x70>)
100521fe:	0018      	movs	r0, r3
10052200:	f000 fac6 	bl	10052790 <USART_APP_EvtRx>

  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE */

  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE */
}/* end hci_le_connection_complete_event() */
10052204:	46bd      	mov	sp, r7
10052206:	b003      	add	sp, #12
10052208:	bd90      	pop	{r4, r7, pc}
1005220a:	46c0      	nop			@ (mov r8, r8)
1005220c:	20002320 	.word	0x20002320
10052210:	20002330 	.word	0x20002330

10052214 <APP_BLE_Get_Server_Connection_Status>:
/* USER CODE BEGIN EVT_VENDOR_3 */

/* USER CODE END EVT_VENDOR_3 */

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
10052214:	b580      	push	{r7, lr}
10052216:	af00      	add	r7, sp, #0
  return bleAppContext.Device_Connection_Status;
10052218:	4b02      	ldr	r3, [pc, #8]	@ (10052224 <APP_BLE_Get_Server_Connection_Status+0x10>)
1005221a:	7b9b      	ldrb	r3, [r3, #14]
}
1005221c:	0018      	movs	r0, r3
1005221e:	46bd      	mov	sp, r7
10052220:	bd80      	pop	{r7, pc}
10052222:	46c0      	nop			@ (mov r8, r8)
10052224:	20002320 	.word	0x20002320

10052228 <APP_BLE_Procedure_Gap_Peripheral>:
  }
  return;
}

void APP_BLE_Procedure_Gap_Peripheral(ProcGapPeripheralId_t ProcGapPeripheralId)
{
10052228:	b5b0      	push	{r4, r5, r7, lr}
1005222a:	b094      	sub	sp, #80	@ 0x50
1005222c:	af0c      	add	r7, sp, #48	@ 0x30
1005222e:	0002      	movs	r2, r0
10052230:	1dfb      	adds	r3, r7, #7
10052232:	701a      	strb	r2, [r3, #0]
  tBleStatus status;
  uint32_t paramA = ADV_INTERVAL_MIN;
10052234:	2380      	movs	r3, #128	@ 0x80
10052236:	61fb      	str	r3, [r7, #28]
  uint32_t paramB = ADV_INTERVAL_MAX;
10052238:	23a0      	movs	r3, #160	@ 0xa0
1005223a:	61bb      	str	r3, [r7, #24]
  uint32_t paramC, paramD;

  /* First set parameters before calling ACI APIs, only if needed */
  switch(ProcGapPeripheralId)
1005223c:	1dfb      	adds	r3, r7, #7
1005223e:	781b      	ldrb	r3, [r3, #0]
10052240:	2b05      	cmp	r3, #5
10052242:	d834      	bhi.n	100522ae <APP_BLE_Procedure_Gap_Peripheral+0x86>
10052244:	009a      	lsls	r2, r3, #2
10052246:	4b5f      	ldr	r3, [pc, #380]	@ (100523c4 <APP_BLE_Procedure_Gap_Peripheral+0x19c>)
10052248:	18d3      	adds	r3, r2, r3
1005224a:	681b      	ldr	r3, [r3, #0]
1005224c:	469f      	mov	pc, r3
  {
    case PROC_GAP_PERIPH_ADVERTISE_START_FAST:
    {
      paramA = ADV_INTERVAL_MIN;
1005224e:	2380      	movs	r3, #128	@ 0x80
10052250:	61fb      	str	r3, [r7, #28]
      paramB = ADV_INTERVAL_MAX;
10052252:	23a0      	movs	r3, #160	@ 0xa0
10052254:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_FAST;
10052256:	2304      	movs	r3, #4
10052258:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_FAST */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_FAST */
      break;
1005225a:	e02b      	b.n	100522b4 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_FAST */
    case PROC_GAP_PERIPH_ADVERTISE_START_LP:
    {
      paramA = ADV_LP_INTERVAL_MIN;
1005225c:	23c8      	movs	r3, #200	@ 0xc8
1005225e:	00db      	lsls	r3, r3, #3
10052260:	61fb      	str	r3, [r7, #28]
      paramB = ADV_LP_INTERVAL_MAX;
10052262:	23fa      	movs	r3, #250	@ 0xfa
10052264:	011b      	lsls	r3, r3, #4
10052266:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_LP;
10052268:	2305      	movs	r3, #5
1005226a:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_LP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_LP */
      break;
1005226c:	e022      	b.n	100522b4 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_LP */
    case PROC_GAP_PERIPH_ADVERTISE_STOP:
    {
      paramC = APP_BLE_IDLE;
1005226e:	2300      	movs	r3, #0
10052270:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_STOP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_STOP */
      break;
10052272:	e01f      	b.n	100522b4 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_STOP */
    case PROC_GAP_PERIPH_CONN_PARAM_UPDATE:
    {
      paramA = CONN_INT_MS(1000);
10052274:	23c8      	movs	r3, #200	@ 0xc8
10052276:	009b      	lsls	r3, r3, #2
10052278:	61fb      	str	r3, [r7, #28]
      paramB = CONN_INT_MS(1000);
1005227a:	23c8      	movs	r3, #200	@ 0xc8
1005227c:	009b      	lsls	r3, r3, #2
1005227e:	61bb      	str	r3, [r7, #24]
      paramC = 0x0000;
10052280:	2300      	movs	r3, #0
10052282:	617b      	str	r3, [r7, #20]
      paramD = 0x01F4;
10052284:	23fa      	movs	r3, #250	@ 0xfa
10052286:	005b      	lsls	r3, r3, #1
10052288:	613b      	str	r3, [r7, #16]

      /* USER CODE BEGIN CONN_PARAM_UPDATE */

      /* USER CODE END CONN_PARAM_UPDATE */
      break;
1005228a:	e013      	b.n	100522b4 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_CONN_PARAM_UPDATE */
    case PROC_GAP_PERIPH_CONN_TERMINATE:
    {
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0x13);
1005228c:	4b4e      	ldr	r3, [pc, #312]	@ (100523c8 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1005228e:	899b      	ldrh	r3, [r3, #12]
10052290:	250f      	movs	r5, #15
10052292:	197c      	adds	r4, r7, r5
10052294:	2113      	movs	r1, #19
10052296:	0018      	movs	r0, r3
10052298:	f7fd f8a4 	bl	1004f3e4 <aci_gap_terminate>
1005229c:	0003      	movs	r3, r0
1005229e:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
100522a0:	197b      	adds	r3, r7, r5
100522a2:	781b      	ldrb	r3, [r3, #0]
100522a4:	2b00      	cmp	r3, #0
100522a6:	d104      	bne.n	100522b2 <APP_BLE_Procedure_Gap_Peripheral+0x8a>
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
      }
      else
      {
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
100522a8:	f000 f89a 	bl	100523e0 <gap_cmd_resp_wait>
      }
      break;
100522ac:	e001      	b.n	100522b2 <APP_BLE_Procedure_Gap_Peripheral+0x8a>
    /* PROC_GAP_PERIPH_CONN_TERMINATE */
    /* USER CODE BEGIN GAP_PERIPHERAL_1 */

    /* USER CODE END GAP_PERIPHERAL_1 */
    default:
      break;
100522ae:	46c0      	nop			@ (mov r8, r8)
100522b0:	e000      	b.n	100522b4 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
      break;
100522b2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Call ACI APIs */
  switch(ProcGapPeripheralId)
100522b4:	1dfb      	adds	r3, r7, #7
100522b6:	781b      	ldrb	r3, [r3, #0]
100522b8:	2b06      	cmp	r3, #6
100522ba:	d100      	bne.n	100522be <APP_BLE_Procedure_Gap_Peripheral+0x96>
100522bc:	e078      	b.n	100523b0 <APP_BLE_Procedure_Gap_Peripheral+0x188>
100522be:	dd00      	ble.n	100522c2 <APP_BLE_Procedure_Gap_Peripheral+0x9a>
100522c0:	e078      	b.n	100523b4 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
100522c2:	2b04      	cmp	r3, #4
100522c4:	d061      	beq.n	1005238a <APP_BLE_Procedure_Gap_Peripheral+0x162>
100522c6:	dd00      	ble.n	100522ca <APP_BLE_Procedure_Gap_Peripheral+0xa2>
100522c8:	e074      	b.n	100523b4 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
100522ca:	2b01      	cmp	r3, #1
100522cc:	dc02      	bgt.n	100522d4 <APP_BLE_Procedure_Gap_Peripheral+0xac>
100522ce:	2b00      	cmp	r3, #0
100522d0:	da03      	bge.n	100522da <APP_BLE_Procedure_Gap_Peripheral+0xb2>
    }/* PROC_GAP_PERIPH_SET_BROADCAST_MODE */
    /* USER CODE BEGIN GAP_PERIPHERAL_2 */

    /* USER CODE END GAP_PERIPHERAL_2 */
    default:
      break;
100522d2:	e06f      	b.n	100523b4 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
  switch(ProcGapPeripheralId)
100522d4:	2b02      	cmp	r3, #2
100522d6:	d046      	beq.n	10052366 <APP_BLE_Procedure_Gap_Peripheral+0x13e>
      break;
100522d8:	e06c      	b.n	100523b4 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
      Advertising_Set_Parameters_t Advertising_Set_Parameters = {0};
100522da:	2308      	movs	r3, #8
100522dc:	18fb      	adds	r3, r7, r3
100522de:	0018      	movs	r0, r3
100522e0:	2306      	movs	r3, #6
100522e2:	001a      	movs	r2, r3
100522e4:	2100      	movs	r1, #0
100522e6:	f015 fdb3 	bl	10067e50 <memset>
      status = aci_gap_set_advertising_configuration(0,
100522ea:	250f      	movs	r5, #15
100522ec:	197c      	adds	r4, r7, r5
100522ee:	69fa      	ldr	r2, [r7, #28]
100522f0:	2300      	movs	r3, #0
100522f2:	930a      	str	r3, [sp, #40]	@ 0x28
100522f4:	2300      	movs	r3, #0
100522f6:	9309      	str	r3, [sp, #36]	@ 0x24
100522f8:	2301      	movs	r3, #1
100522fa:	9308      	str	r3, [sp, #32]
100522fc:	2300      	movs	r3, #0
100522fe:	9307      	str	r3, [sp, #28]
10052300:	2301      	movs	r3, #1
10052302:	9306      	str	r3, [sp, #24]
10052304:	2300      	movs	r3, #0
10052306:	9305      	str	r3, [sp, #20]
10052308:	2300      	movs	r3, #0
1005230a:	9304      	str	r3, [sp, #16]
1005230c:	2300      	movs	r3, #0
1005230e:	9303      	str	r3, [sp, #12]
10052310:	2300      	movs	r3, #0
10052312:	9302      	str	r3, [sp, #8]
10052314:	2307      	movs	r3, #7
10052316:	9301      	str	r3, [sp, #4]
10052318:	69bb      	ldr	r3, [r7, #24]
1005231a:	9300      	str	r3, [sp, #0]
1005231c:	0013      	movs	r3, r2
1005231e:	2213      	movs	r2, #19
10052320:	2102      	movs	r1, #2
10052322:	2000      	movs	r0, #0
10052324:	f002 fc06 	bl	10054b34 <aci_gap_set_advertising_configuration>
10052328:	0003      	movs	r3, r0
1005232a:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
1005232c:	197b      	adds	r3, r7, r5
1005232e:	781b      	ldrb	r3, [r3, #0]
10052330:	2b00      	cmp	r3, #0
10052332:	d103      	bne.n	1005233c <APP_BLE_Procedure_Gap_Peripheral+0x114>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10052334:	697b      	ldr	r3, [r7, #20]
10052336:	b2da      	uxtb	r2, r3
10052338:	4b23      	ldr	r3, [pc, #140]	@ (100523c8 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1005233a:	739a      	strb	r2, [r3, #14]
      status = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(a_AdvData), (uint8_t*) a_AdvData);
1005233c:	250f      	movs	r5, #15
1005233e:	197c      	adds	r4, r7, r5
10052340:	4b22      	ldr	r3, [pc, #136]	@ (100523cc <APP_BLE_Procedure_Gap_Peripheral+0x1a4>)
10052342:	2210      	movs	r2, #16
10052344:	2103      	movs	r1, #3
10052346:	2000      	movs	r0, #0
10052348:	f002 fc29 	bl	10054b9e <aci_gap_set_advertising_data>
1005234c:	0003      	movs	r3, r0
1005234e:	7023      	strb	r3, [r4, #0]
      status = aci_gap_set_advertising_enable(ENABLE, 1, &Advertising_Set_Parameters);
10052350:	197c      	adds	r4, r7, r5
10052352:	2308      	movs	r3, #8
10052354:	18fb      	adds	r3, r7, r3
10052356:	001a      	movs	r2, r3
10052358:	2101      	movs	r1, #1
1005235a:	2001      	movs	r0, #1
1005235c:	f002 fc23 	bl	10054ba6 <aci_gap_set_advertising_enable>
10052360:	0003      	movs	r3, r0
10052362:	7023      	strb	r3, [r4, #0]
      break;
10052364:	e029      	b.n	100523ba <APP_BLE_Procedure_Gap_Peripheral+0x192>
      status = aci_gap_set_advertising_enable(DISABLE, 0, NULL);
10052366:	250f      	movs	r5, #15
10052368:	197c      	adds	r4, r7, r5
1005236a:	2200      	movs	r2, #0
1005236c:	2100      	movs	r1, #0
1005236e:	2000      	movs	r0, #0
10052370:	f002 fc19 	bl	10054ba6 <aci_gap_set_advertising_enable>
10052374:	0003      	movs	r3, r0
10052376:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10052378:	197b      	adds	r3, r7, r5
1005237a:	781b      	ldrb	r3, [r3, #0]
1005237c:	2b00      	cmp	r3, #0
1005237e:	d11b      	bne.n	100523b8 <APP_BLE_Procedure_Gap_Peripheral+0x190>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10052380:	697b      	ldr	r3, [r7, #20]
10052382:	b2da      	uxtb	r2, r3
10052384:	4b10      	ldr	r3, [pc, #64]	@ (100523c8 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10052386:	739a      	strb	r2, [r3, #14]
      break;
10052388:	e016      	b.n	100523b8 <APP_BLE_Procedure_Gap_Peripheral+0x190>
       status = aci_l2cap_connection_parameter_update_req(
1005238a:	4b0f      	ldr	r3, [pc, #60]	@ (100523c8 <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1005238c:	8998      	ldrh	r0, [r3, #12]
1005238e:	69fb      	ldr	r3, [r7, #28]
10052390:	b299      	uxth	r1, r3
10052392:	69bb      	ldr	r3, [r7, #24]
10052394:	b29a      	uxth	r2, r3
10052396:	697b      	ldr	r3, [r7, #20]
10052398:	b29d      	uxth	r5, r3
1005239a:	693b      	ldr	r3, [r7, #16]
1005239c:	b29b      	uxth	r3, r3
1005239e:	240f      	movs	r4, #15
100523a0:	193c      	adds	r4, r7, r4
100523a2:	9300      	str	r3, [sp, #0]
100523a4:	002b      	movs	r3, r5
100523a6:	f7fd f8e8 	bl	1004f57a <aci_l2cap_connection_parameter_update_req>
100523aa:	0003      	movs	r3, r0
100523ac:	7023      	strb	r3, [r4, #0]
      break;
100523ae:	e004      	b.n	100523ba <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
100523b0:	46c0      	nop			@ (mov r8, r8)
100523b2:	e002      	b.n	100523ba <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
100523b4:	46c0      	nop			@ (mov r8, r8)
100523b6:	e000      	b.n	100523ba <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
100523b8:	46c0      	nop			@ (mov r8, r8)
  }
  return;
100523ba:	46c0      	nop			@ (mov r8, r8)
}
100523bc:	46bd      	mov	sp, r7
100523be:	b008      	add	sp, #32
100523c0:	bdb0      	pop	{r4, r5, r7, pc}
100523c2:	46c0      	nop			@ (mov r8, r8)
100523c4:	10069950 	.word	0x10069950
100523c8:	20002320 	.word	0x20002320
100523cc:	20002868 	.word	0x20002868

100523d0 <gap_cmd_resp_release>:
/* USER CODE BEGIN FD*/

/* USER CODE END FD*/

static void gap_cmd_resp_release(void)
{
100523d0:	b580      	push	{r7, lr}
100523d2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
100523d4:	2001      	movs	r0, #1
100523d6:	f002 fa95 	bl	10054904 <UTIL_SEQ_SetEvt>
  return;
100523da:	46c0      	nop			@ (mov r8, r8)
}
100523dc:	46bd      	mov	sp, r7
100523de:	bd80      	pop	{r7, pc}

100523e0 <gap_cmd_resp_wait>:

static void gap_cmd_resp_wait(void)
{
100523e0:	b580      	push	{r7, lr}
100523e2:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
100523e4:	2001      	movs	r0, #1
100523e6:	f002 faab 	bl	10054940 <UTIL_SEQ_WaitEvt>
  return;
100523ea:	46c0      	nop			@ (mov r8, r8)
}
100523ec:	46bd      	mov	sp, r7
100523ee:	bd80      	pop	{r7, pc}

100523f0 <USART_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t USART_EventHandler(aci_blecore_event *p_evt)
{
100523f0:	b580      	push	{r7, lr}
100523f2:	b08e      	sub	sp, #56	@ 0x38
100523f4:	af00      	add	r7, sp, #0
100523f6:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
100523f8:	2337      	movs	r3, #55	@ 0x37
100523fa:	18fb      	adds	r3, r7, r3
100523fc:	2200      	movs	r2, #0
100523fe:	701a      	strb	r2, [r3, #0]
  USART_NotificationEvt_t notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  switch(p_evt->ecode)
10052400:	687b      	ldr	r3, [r7, #4]
10052402:	781a      	ldrb	r2, [r3, #0]
10052404:	785b      	ldrb	r3, [r3, #1]
10052406:	021b      	lsls	r3, r3, #8
10052408:	4313      	orrs	r3, r2
1005240a:	b29b      	uxth	r3, r3
1005240c:	4a62      	ldr	r2, [pc, #392]	@ (10052598 <USART_EventHandler+0x1a8>)
1005240e:	4694      	mov	ip, r2
10052410:	4463      	add	r3, ip
10052412:	2b19      	cmp	r3, #25
10052414:	d900      	bls.n	10052418 <USART_EventHandler+0x28>
10052416:	e0b1      	b.n	1005257c <USART_EventHandler+0x18c>
10052418:	009a      	lsls	r2, r3, #2
1005241a:	4b60      	ldr	r3, [pc, #384]	@ (1005259c <USART_EventHandler+0x1ac>)
1005241c:	18d3      	adds	r3, r2, r3
1005241e:	681b      	ldr	r3, [r3, #0]
10052420:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
10052422:	687b      	ldr	r3, [r7, #4]
10052424:	3302      	adds	r3, #2
10052426:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
10052428:	6a3b      	ldr	r3, [r7, #32]
1005242a:	781a      	ldrb	r2, [r3, #0]
1005242c:	785b      	ldrb	r3, [r3, #1]
1005242e:	021b      	lsls	r3, r3, #8
10052430:	4313      	orrs	r3, r2
10052432:	b29a      	uxth	r2, r3
10052434:	210c      	movs	r1, #12
10052436:	187b      	adds	r3, r7, r1
10052438:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
1005243a:	6a3b      	ldr	r3, [r7, #32]
1005243c:	791a      	ldrb	r2, [r3, #4]
1005243e:	795b      	ldrb	r3, [r3, #5]
10052440:	021b      	lsls	r3, r3, #8
10052442:	4313      	orrs	r3, r2
10052444:	b29a      	uxth	r2, r3
10052446:	187b      	adds	r3, r7, r1
10052448:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
1005244a:	6a3b      	ldr	r3, [r7, #32]
1005244c:	799a      	ldrb	r2, [r3, #6]
1005244e:	79db      	ldrb	r3, [r3, #7]
10052450:	021b      	lsls	r3, r3, #8
10052452:	4313      	orrs	r3, r2
10052454:	b29b      	uxth	r3, r3
10052456:	b2da      	uxtb	r2, r3
10052458:	187b      	adds	r3, r7, r1
1005245a:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
1005245c:	6a3b      	ldr	r3, [r7, #32]
1005245e:	3308      	adds	r3, #8
10052460:	001a      	movs	r2, r3
10052462:	187b      	adds	r3, r7, r1
10052464:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052466:	6a3b      	ldr	r3, [r7, #32]
10052468:	791a      	ldrb	r2, [r3, #4]
1005246a:	795b      	ldrb	r3, [r3, #5]
1005246c:	021b      	lsls	r3, r3, #8
1005246e:	4313      	orrs	r3, r2
10052470:	b29b      	uxth	r3, r3
10052472:	001a      	movs	r2, r3
10052474:	4b4a      	ldr	r3, [pc, #296]	@ (100525a0 <USART_EventHandler+0x1b0>)
10052476:	889b      	ldrh	r3, [r3, #4]
10052478:	3301      	adds	r3, #1
1005247a:	429a      	cmp	r2, r3
1005247c:	d10b      	bne.n	10052496 <USART_EventHandler+0xa6>
      {
        return_value = BLEEVT_Ack;
1005247e:	2337      	movs	r3, #55	@ 0x37
10052480:	18fb      	adds	r3, r7, r3
10052482:	2201      	movs	r2, #1
10052484:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = USART_RX_WRITE_NO_RESP_EVT;
10052486:	187b      	adds	r3, r7, r1
10052488:	2201      	movs	r2, #1
1005248a:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

        /* USER CODE END Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        USART_Notification(&notification);
1005248c:	187b      	adds	r3, r7, r1
1005248e:	0018      	movs	r0, r3
10052490:	f000 f914 	bl	100526bc <USART_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10052494:	e074      	b.n	10052580 <USART_EventHandler+0x190>
      else if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052496:	6a3b      	ldr	r3, [r7, #32]
10052498:	791a      	ldrb	r2, [r3, #4]
1005249a:	795b      	ldrb	r3, [r3, #5]
1005249c:	021b      	lsls	r3, r3, #8
1005249e:	4313      	orrs	r3, r2
100524a0:	b29b      	uxth	r3, r3
100524a2:	001a      	movs	r2, r3
100524a4:	4b3e      	ldr	r3, [pc, #248]	@ (100525a0 <USART_EventHandler+0x1b0>)
100524a6:	88db      	ldrh	r3, [r3, #6]
100524a8:	3301      	adds	r3, #1
100524aa:	429a      	cmp	r2, r3
100524ac:	d168      	bne.n	10052580 <USART_EventHandler+0x190>
        return_value = BLEEVT_Ack;
100524ae:	2337      	movs	r3, #55	@ 0x37
100524b0:	18fb      	adds	r3, r7, r3
100524b2:	2201      	movs	r2, #1
100524b4:	701a      	strb	r2, [r3, #0]
        notification.EvtOpcode = USART_REQ_TX_WRITE_EVT;
100524b6:	210c      	movs	r1, #12
100524b8:	187b      	adds	r3, r7, r1
100524ba:	2203      	movs	r2, #3
100524bc:	701a      	strb	r2, [r3, #0]
        USART_Notification(&notification);
100524be:	187b      	adds	r3, r7, r1
100524c0:	0018      	movs	r0, r3
100524c2:	f000 f8fb 	bl	100526bc <USART_Notification>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
100524c6:	e05b      	b.n	10052580 <USART_EventHandler+0x190>
    case ACI_GATT_SRV_READ_VSEVT_CODE :
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_SRV_READ_BEGIN */
      p_read = (aci_gatt_srv_read_event_rp0*)p_evt->data;
100524c8:	687b      	ldr	r3, [r7, #4]
100524ca:	3302      	adds	r3, #2
100524cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if(p_read->Attribute_Handle == (USART_Context.TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100524ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100524d0:	791a      	ldrb	r2, [r3, #4]
100524d2:	795b      	ldrb	r3, [r3, #5]
100524d4:	021b      	lsls	r3, r3, #8
100524d6:	4313      	orrs	r3, r2
100524d8:	b29b      	uxth	r3, r3
100524da:	001a      	movs	r2, r3
100524dc:	4b30      	ldr	r3, [pc, #192]	@ (100525a0 <USART_EventHandler+0x1b0>)
100524de:	885b      	ldrh	r3, [r3, #2]
100524e0:	3301      	adds	r3, #1
100524e2:	429a      	cmp	r2, r3
100524e4:	d10c      	bne.n	10052500 <USART_EventHandler+0x110>
	  {
		return_value = BLEEVT_Ack;
100524e6:	2337      	movs	r3, #55	@ 0x37
100524e8:	18fb      	adds	r3, r7, r3
100524ea:	2201      	movs	r2, #1
100524ec:	701a      	strb	r2, [r3, #0]
		/*USER CODE BEGIN Service1_Char_1_ACI_GATT_SRV_READ_VSEVT_CODE_1 */
		notification.EvtOpcode = USART_TX_READ_EVT;
100524ee:	210c      	movs	r1, #12
100524f0:	187b      	adds	r3, r7, r1
100524f2:	2200      	movs	r2, #0
100524f4:	701a      	strb	r2, [r3, #0]
		USART_Notification(&notification);
100524f6:	187b      	adds	r3, r7, r1
100524f8:	0018      	movs	r0, r3
100524fa:	f000 f8df 	bl	100526bc <USART_Notification>
	  } /* if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_END */

      /* USER CODE END EVT_EVT_BLUE_GATT_SRV_READ_END */
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
100524fe:	e041      	b.n	10052584 <USART_EventHandler+0x194>
	  else if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10052502:	791a      	ldrb	r2, [r3, #4]
10052504:	795b      	ldrb	r3, [r3, #5]
10052506:	021b      	lsls	r3, r3, #8
10052508:	4313      	orrs	r3, r2
1005250a:	b29b      	uxth	r3, r3
1005250c:	001a      	movs	r2, r3
1005250e:	4b24      	ldr	r3, [pc, #144]	@ (100525a0 <USART_EventHandler+0x1b0>)
10052510:	88db      	ldrh	r3, [r3, #6]
10052512:	3301      	adds	r3, #1
10052514:	429a      	cmp	r2, r3
10052516:	d135      	bne.n	10052584 <USART_EventHandler+0x194>
		return_value = BLEEVT_Ack;
10052518:	2337      	movs	r3, #55	@ 0x37
1005251a:	18fb      	adds	r3, r7, r3
1005251c:	2201      	movs	r2, #1
1005251e:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052520:	e030      	b.n	10052584 <USART_EventHandler+0x194>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
10052522:	687b      	ldr	r3, [r7, #4]
10052524:	3302      	adds	r3, #2
10052526:	633b      	str	r3, [r7, #48]	@ 0x30
      if(p_write->Attribute_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1005252a:	795a      	ldrb	r2, [r3, #5]
1005252c:	799b      	ldrb	r3, [r3, #6]
1005252e:	021b      	lsls	r3, r3, #8
10052530:	4313      	orrs	r3, r2
10052532:	b29b      	uxth	r3, r3
10052534:	001a      	movs	r2, r3
10052536:	4b1a      	ldr	r3, [pc, #104]	@ (100525a0 <USART_EventHandler+0x1b0>)
10052538:	889b      	ldrh	r3, [r3, #4]
1005253a:	3301      	adds	r3, #1
1005253c:	429a      	cmp	r2, r3
1005253e:	d104      	bne.n	1005254a <USART_EventHandler+0x15a>
      {
        return_value = BLEEVT_Ack;
10052540:	2337      	movs	r3, #55	@ 0x37
10052542:	18fb      	adds	r3, r7, r3
10052544:	2201      	movs	r2, #1
10052546:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10052548:	e01e      	b.n	10052588 <USART_EventHandler+0x198>
      else if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1005254a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1005254c:	795a      	ldrb	r2, [r3, #5]
1005254e:	799b      	ldrb	r3, [r3, #6]
10052550:	021b      	lsls	r3, r3, #8
10052552:	4313      	orrs	r3, r2
10052554:	b29b      	uxth	r3, r3
10052556:	001a      	movs	r2, r3
10052558:	4b11      	ldr	r3, [pc, #68]	@ (100525a0 <USART_EventHandler+0x1b0>)
1005255a:	88db      	ldrh	r3, [r3, #6]
1005255c:	3301      	adds	r3, #1
1005255e:	429a      	cmp	r2, r3
10052560:	d112      	bne.n	10052588 <USART_EventHandler+0x198>
        return_value = BLEEVT_Ack;
10052562:	2337      	movs	r3, #55	@ 0x37
10052564:	18fb      	adds	r3, r7, r3
10052566:	2201      	movs	r2, #1
10052568:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1005256a:	e00d      	b.n	10052588 <USART_EventHandler+0x198>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
1005256c:	687b      	ldr	r3, [r7, #4]
1005256e:	3302      	adds	r3, #2
10052570:	62bb      	str	r3, [r7, #40]	@ 0x28
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
10052572:	e00a      	b.n	1005258a <USART_EventHandler+0x19a>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
10052574:	687b      	ldr	r3, [r7, #4]
10052576:	3302      	adds	r3, #2
10052578:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
1005257a:	e006      	b.n	1005258a <USART_EventHandler+0x19a>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
1005257c:	46c0      	nop			@ (mov r8, r8)
1005257e:	e004      	b.n	1005258a <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10052580:	46c0      	nop			@ (mov r8, r8)
10052582:	e002      	b.n	1005258a <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052584:	46c0      	nop			@ (mov r8, r8)
10052586:	e000      	b.n	1005258a <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
10052588:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
1005258a:	2337      	movs	r3, #55	@ 0x37
1005258c:	18fb      	adds	r3, r7, r3
1005258e:	781b      	ldrb	r3, [r3, #0]
}/* end USART_EventHandler */
10052590:	0018      	movs	r0, r3
10052592:	46bd      	mov	sp, r7
10052594:	b00e      	add	sp, #56	@ 0x38
10052596:	bd80      	pop	{r7, pc}
10052598:	fffff3ff 	.word	0xfffff3ff
1005259c:	100699fc 	.word	0x100699fc
100525a0:	20002334 	.word	0x20002334

100525a4 <USART_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void USART_Init(void)
{
100525a4:	b590      	push	{r4, r7, lr}
100525a6:	b083      	sub	sp, #12
100525a8:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
100525aa:	1dfb      	adds	r3, r7, #7
100525ac:	2212      	movs	r2, #18
100525ae:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(USART_EventHandler);
100525b0:	4b17      	ldr	r3, [pc, #92]	@ (10052610 <USART_Init+0x6c>)
100525b2:	0018      	movs	r0, r3
100525b4:	f7fc fbf6 	bl	1004eda4 <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&usart_service);
100525b8:	1dfc      	adds	r4, r7, #7
100525ba:	4b16      	ldr	r3, [pc, #88]	@ (10052614 <USART_Init+0x70>)
100525bc:	0018      	movs	r0, r3
100525be:	f7fc ff79 	bl	1004f4b4 <aci_gatt_srv_add_service>
100525c2:	0003      	movs	r3, r0
100525c4:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: USART \n");
  }

  USART_Context.UsartSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &usart_service);
100525c6:	4b13      	ldr	r3, [pc, #76]	@ (10052614 <USART_Init+0x70>)
100525c8:	0018      	movs	r0, r3
100525ca:	f7fc ff80 	bl	1004f4ce <aci_gatt_srv_get_service_handle>
100525ce:	0003      	movs	r3, r0
100525d0:	001a      	movs	r2, r3
100525d2:	4b11      	ldr	r3, [pc, #68]	@ (10052618 <USART_Init+0x74>)
100525d4:	801a      	strh	r2, [r3, #0]
  USART_Context.TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[0]);
100525d6:	4b11      	ldr	r3, [pc, #68]	@ (1005261c <USART_Init+0x78>)
100525d8:	0018      	movs	r0, r3
100525da:	f7fc ff98 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
100525de:	0003      	movs	r3, r0
100525e0:	001a      	movs	r2, r3
100525e2:	4b0d      	ldr	r3, [pc, #52]	@ (10052618 <USART_Init+0x74>)
100525e4:	805a      	strh	r2, [r3, #2]
  USART_Context.RxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[1]);
100525e6:	4b0e      	ldr	r3, [pc, #56]	@ (10052620 <USART_Init+0x7c>)
100525e8:	0018      	movs	r0, r3
100525ea:	f7fc ff90 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
100525ee:	0003      	movs	r3, r0
100525f0:	001a      	movs	r2, r3
100525f2:	4b09      	ldr	r3, [pc, #36]	@ (10052618 <USART_Init+0x74>)
100525f4:	809a      	strh	r2, [r3, #4]
  USART_Context.Req_TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[2]);
100525f6:	4b0b      	ldr	r3, [pc, #44]	@ (10052624 <USART_Init+0x80>)
100525f8:	0018      	movs	r0, r3
100525fa:	f7fc ff88 	bl	1004f50e <aci_gatt_srv_get_char_decl_handle>
100525fe:	0003      	movs	r3, r0
10052600:	001a      	movs	r2, r3
10052602:	4b05      	ldr	r3, [pc, #20]	@ (10052618 <USART_Init+0x74>)
10052604:	80da      	strh	r2, [r3, #6]
  if (ret != BLE_STATUS_SUCCESS)
  {
    APP_DBG_MSG("  Fail registering USART handlers\n");
  }

  return;
10052606:	46c0      	nop			@ (mov r8, r8)
}
10052608:	46bd      	mov	sp, r7
1005260a:	b003      	add	sp, #12
1005260c:	bd90      	pop	{r4, r7, pc}
1005260e:	46c0      	nop			@ (mov r8, r8)
10052610:	100523f1 	.word	0x100523f1
10052614:	100699d4 	.word	0x100699d4
10052618:	20002334 	.word	0x20002334
1005261c:	10069968 	.word	0x10069968
10052620:	1006998c 	.word	0x1006998c
10052624:	100699b0 	.word	0x100699b0

10052628 <USART_UpdateValue>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pData: pointer to the new data to be written in the characteristic
 *
 */
tBleStatus USART_UpdateValue(USART_CharOpcode_t CharOpcode, USART_Data_t *pData)
{
10052628:	b580      	push	{r7, lr}
1005262a:	b084      	sub	sp, #16
1005262c:	af00      	add	r7, sp, #0
1005262e:	0002      	movs	r2, r0
10052630:	6039      	str	r1, [r7, #0]
10052632:	1dfb      	adds	r3, r7, #7
10052634:	701a      	strb	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_SUCCESS;
10052636:	230f      	movs	r3, #15
10052638:	18fb      	adds	r3, r7, r3
1005263a:	2200      	movs	r2, #0
1005263c:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Service1_App_Update_Char_1 */

  /* USER CODE END Service1_App_Update_Char_1 */

  switch(CharOpcode)
1005263e:	1dfb      	adds	r3, r7, #7
10052640:	781b      	ldrb	r3, [r3, #0]
10052642:	2b02      	cmp	r3, #2
10052644:	d01f      	beq.n	10052686 <USART_UpdateValue+0x5e>
10052646:	dc2b      	bgt.n	100526a0 <USART_UpdateValue+0x78>
10052648:	2b00      	cmp	r3, #0
1005264a:	d002      	beq.n	10052652 <USART_UpdateValue+0x2a>
1005264c:	2b01      	cmp	r3, #1
1005264e:	d00d      	beq.n	1005266c <USART_UpdateValue+0x44>

      /* USER CODE END Service1_Char_Value_3*/
      break;

    default:
      break;
10052650:	e026      	b.n	100526a0 <USART_UpdateValue+0x78>
      memcpy(tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(tx_val_buffer)));
10052652:	683b      	ldr	r3, [r7, #0]
10052654:	6819      	ldr	r1, [r3, #0]
10052656:	683b      	ldr	r3, [r7, #0]
10052658:	791b      	ldrb	r3, [r3, #4]
1005265a:	1e5a      	subs	r2, r3, #1
1005265c:	4193      	sbcs	r3, r2
1005265e:	b2db      	uxtb	r3, r3
10052660:	001a      	movs	r2, r3
10052662:	4b13      	ldr	r3, [pc, #76]	@ (100526b0 <USART_UpdateValue+0x88>)
10052664:	0018      	movs	r0, r3
10052666:	f015 fc68 	bl	10067f3a <memcpy>
      break;
1005266a:	e01a      	b.n	100526a2 <USART_UpdateValue+0x7a>
      memcpy(rx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(rx_val_buffer)));
1005266c:	683b      	ldr	r3, [r7, #0]
1005266e:	6819      	ldr	r1, [r3, #0]
10052670:	683b      	ldr	r3, [r7, #0]
10052672:	791b      	ldrb	r3, [r3, #4]
10052674:	1e5a      	subs	r2, r3, #1
10052676:	4193      	sbcs	r3, r2
10052678:	b2db      	uxtb	r3, r3
1005267a:	001a      	movs	r2, r3
1005267c:	4b0d      	ldr	r3, [pc, #52]	@ (100526b4 <USART_UpdateValue+0x8c>)
1005267e:	0018      	movs	r0, r3
10052680:	f015 fc5b 	bl	10067f3a <memcpy>
      break;
10052684:	e00d      	b.n	100526a2 <USART_UpdateValue+0x7a>
      memcpy(req_tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(req_tx_val_buffer)));
10052686:	683b      	ldr	r3, [r7, #0]
10052688:	6819      	ldr	r1, [r3, #0]
1005268a:	683b      	ldr	r3, [r7, #0]
1005268c:	791b      	ldrb	r3, [r3, #4]
1005268e:	1e5a      	subs	r2, r3, #1
10052690:	4193      	sbcs	r3, r2
10052692:	b2db      	uxtb	r3, r3
10052694:	001a      	movs	r2, r3
10052696:	4b08      	ldr	r3, [pc, #32]	@ (100526b8 <USART_UpdateValue+0x90>)
10052698:	0018      	movs	r0, r3
1005269a:	f015 fc4e 	bl	10067f3a <memcpy>
      break;
1005269e:	e000      	b.n	100526a2 <USART_UpdateValue+0x7a>
      break;
100526a0:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_App_Update_Char_2 */

  /* USER CODE END Service1_App_Update_Char_2 */

  return ret;
100526a2:	230f      	movs	r3, #15
100526a4:	18fb      	adds	r3, r7, r3
100526a6:	781b      	ldrb	r3, [r3, #0]
}
100526a8:	0018      	movs	r0, r3
100526aa:	46bd      	mov	sp, r7
100526ac:	b004      	add	sp, #16
100526ae:	bd80      	pop	{r7, pc}
100526b0:	2000233c 	.word	0x2000233c
100526b4:	20002340 	.word	0x20002340
100526b8:	20002344 	.word	0x20002344

100526bc <USART_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void USART_Notification(USART_NotificationEvt_t *p_Notification)
{
100526bc:	b5b0      	push	{r4, r5, r7, lr}
100526be:	b08e      	sub	sp, #56	@ 0x38
100526c0:	af00      	add	r7, sp, #0
100526c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
100526c4:	687b      	ldr	r3, [r7, #4]
100526c6:	781b      	ldrb	r3, [r3, #0]
100526c8:	2b03      	cmp	r3, #3
100526ca:	d017      	beq.n	100526fc <USART_Notification+0x40>
100526cc:	dc56      	bgt.n	1005277c <USART_Notification+0xc0>
100526ce:	2b02      	cmp	r3, #2
100526d0:	d056      	beq.n	10052780 <USART_Notification+0xc4>
100526d2:	dc53      	bgt.n	1005277c <USART_Notification+0xc0>
100526d4:	2b00      	cmp	r3, #0
100526d6:	d055      	beq.n	10052784 <USART_Notification+0xc8>
100526d8:	2b01      	cmp	r3, #1
100526da:	d000      	beq.n	100526de <USART_Notification+0x22>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
100526dc:	e04e      	b.n	1005277c <USART_Notification+0xc0>
      Event_t recieved = {EVENT_USART, p_Notification->DataTransfered.p_Payload[0]};
100526de:	2130      	movs	r1, #48	@ 0x30
100526e0:	187b      	adds	r3, r7, r1
100526e2:	2206      	movs	r2, #6
100526e4:	701a      	strb	r2, [r3, #0]
100526e6:	687b      	ldr	r3, [r7, #4]
100526e8:	685b      	ldr	r3, [r3, #4]
100526ea:	781b      	ldrb	r3, [r3, #0]
100526ec:	001a      	movs	r2, r3
100526ee:	187b      	adds	r3, r7, r1
100526f0:	805a      	strh	r2, [r3, #2]
      COMM_Event_Post(recieved);
100526f2:	187b      	adds	r3, r7, r1
100526f4:	6818      	ldr	r0, [r3, #0]
100526f6:	f7f1 fa49 	bl	10043b8c <COMM_Event_Post>
      break;
100526fa:	e044      	b.n	10052786 <USART_Notification+0xca>
        int16_t data = BLUETOOTH_ReadBuffer();
100526fc:	2536      	movs	r5, #54	@ 0x36
100526fe:	197c      	adds	r4, r7, r5
10052700:	f7ef fc42 	bl	10041f88 <BLUETOOTH_ReadBuffer>
10052704:	0003      	movs	r3, r0
10052706:	8023      	strh	r3, [r4, #0]
        if(data != -1){
10052708:	002a      	movs	r2, r5
1005270a:	18bb      	adds	r3, r7, r2
1005270c:	2100      	movs	r1, #0
1005270e:	5e5b      	ldrsh	r3, [r3, r1]
10052710:	3301      	adds	r3, #1
10052712:	d022      	beq.n	1005275a <USART_Notification+0x9e>
        	uint8_t data1 = (uint8_t)data;
10052714:	18bb      	adds	r3, r7, r2
10052716:	881b      	ldrh	r3, [r3, #0]
10052718:	b2da      	uxtb	r2, r3
1005271a:	202f      	movs	r0, #47	@ 0x2f
1005271c:	183b      	adds	r3, r7, r0
1005271e:	701a      	strb	r2, [r3, #0]
			USART_Data_t value1 = {&data1, 1};
10052720:	2124      	movs	r1, #36	@ 0x24
10052722:	187b      	adds	r3, r7, r1
10052724:	183a      	adds	r2, r7, r0
10052726:	601a      	str	r2, [r3, #0]
10052728:	187b      	adds	r3, r7, r1
1005272a:	2201      	movs	r2, #1
1005272c:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_TX, &value1);
1005272e:	187b      	adds	r3, r7, r1
10052730:	0019      	movs	r1, r3
10052732:	2000      	movs	r0, #0
10052734:	f7ff ff78 	bl	10052628 <USART_UpdateValue>
			uint8_t data2 = 0;
10052738:	2023      	movs	r0, #35	@ 0x23
1005273a:	183b      	adds	r3, r7, r0
1005273c:	2200      	movs	r2, #0
1005273e:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
10052740:	2118      	movs	r1, #24
10052742:	187b      	adds	r3, r7, r1
10052744:	183a      	adds	r2, r7, r0
10052746:	601a      	str	r2, [r3, #0]
10052748:	187b      	adds	r3, r7, r1
1005274a:	2201      	movs	r2, #1
1005274c:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
1005274e:	187b      	adds	r3, r7, r1
10052750:	0019      	movs	r1, r3
10052752:	2002      	movs	r0, #2
10052754:	f7ff ff68 	bl	10052628 <USART_UpdateValue>
      break;
10052758:	e015      	b.n	10052786 <USART_Notification+0xca>
			uint8_t data2 = 2;
1005275a:	2017      	movs	r0, #23
1005275c:	183b      	adds	r3, r7, r0
1005275e:	2202      	movs	r2, #2
10052760:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
10052762:	210c      	movs	r1, #12
10052764:	187b      	adds	r3, r7, r1
10052766:	183a      	adds	r2, r7, r0
10052768:	601a      	str	r2, [r3, #0]
1005276a:	187b      	adds	r3, r7, r1
1005276c:	2201      	movs	r2, #1
1005276e:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
10052770:	187b      	adds	r3, r7, r1
10052772:	0019      	movs	r1, r3
10052774:	2002      	movs	r0, #2
10052776:	f7ff ff57 	bl	10052628 <USART_UpdateValue>
      break;
1005277a:	e004      	b.n	10052786 <USART_Notification+0xca>
      break;
1005277c:	46c0      	nop			@ (mov r8, r8)
1005277e:	e002      	b.n	10052786 <USART_Notification+0xca>
      break;
10052780:	46c0      	nop			@ (mov r8, r8)
10052782:	e000      	b.n	10052786 <USART_Notification+0xca>
      break;
10052784:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
10052786:	46c0      	nop			@ (mov r8, r8)
}
10052788:	46bd      	mov	sp, r7
1005278a:	b00e      	add	sp, #56	@ 0x38
1005278c:	bdb0      	pop	{r4, r5, r7, pc}
	...

10052790 <USART_APP_EvtRx>:

void USART_APP_EvtRx(USART_APP_ConnHandleNotEvt_t *p_Notification)
{
10052790:	b580      	push	{r7, lr}
10052792:	b082      	sub	sp, #8
10052794:	af00      	add	r7, sp, #0
10052796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
10052798:	687b      	ldr	r3, [r7, #4]
1005279a:	781b      	ldrb	r3, [r3, #0]
1005279c:	2b00      	cmp	r3, #0
1005279e:	d002      	beq.n	100527a6 <USART_APP_EvtRx+0x16>
100527a0:	2b01      	cmp	r3, #1
100527a2:	d005      	beq.n	100527b0 <USART_APP_EvtRx+0x20>
      break;
    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
100527a4:	e00c      	b.n	100527c0 <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
100527a6:	687b      	ldr	r3, [r7, #4]
100527a8:	885a      	ldrh	r2, [r3, #2]
100527aa:	4b07      	ldr	r3, [pc, #28]	@ (100527c8 <USART_APP_EvtRx+0x38>)
100527ac:	801a      	strh	r2, [r3, #0]
      break;
100527ae:	e007      	b.n	100527c0 <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = 0xFFFF;
100527b0:	4b05      	ldr	r3, [pc, #20]	@ (100527c8 <USART_APP_EvtRx+0x38>)
100527b2:	2201      	movs	r2, #1
100527b4:	4252      	negs	r2, r2
100527b6:	801a      	strh	r2, [r3, #0]
            APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
100527b8:	2001      	movs	r0, #1
100527ba:	f7ff fd35 	bl	10052228 <APP_BLE_Procedure_Gap_Peripheral>
      break;
100527be:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
100527c0:	46c0      	nop			@ (mov r8, r8)
}
100527c2:	46bd      	mov	sp, r7
100527c4:	b002      	add	sp, #8
100527c6:	bd80      	pop	{r7, pc}
100527c8:	20002348 	.word	0x20002348

100527cc <USART_APP_Init>:

void USART_APP_Init(void)
{
100527cc:	b580      	push	{r7, lr}
100527ce:	af00      	add	r7, sp, #0
  USART_APP_Context.ConnectionHandle = 0xFFFF;
100527d0:	4b04      	ldr	r3, [pc, #16]	@ (100527e4 <USART_APP_Init+0x18>)
100527d2:	2201      	movs	r2, #1
100527d4:	4252      	negs	r2, r2
100527d6:	801a      	strh	r2, [r3, #0]
  USART_Init();
100527d8:	f7ff fee4 	bl	100525a4 <USART_Init>

  /* USER CODE BEGIN Service1_APP_Init */

  /* USER CODE END Service1_APP_Init */
  return;
100527dc:	46c0      	nop			@ (mov r8, r8)
}
100527de:	46bd      	mov	sp, r7
100527e0:	bd80      	pop	{r7, pc}
100527e2:	46c0      	nop			@ (mov r8, r8)
100527e4:	20002348 	.word	0x20002348

100527e8 <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
100527e8:	b580      	push	{r7, lr}
100527ea:	af00      	add	r7, sp, #0
  NVMDB_Init();
100527ec:	f7fe f9ac 	bl	10050b48 <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
100527f0:	4b07      	ldr	r3, [pc, #28]	@ (10052810 <BLENVM_Init+0x28>)
100527f2:	0019      	movs	r1, r3
100527f4:	2000      	movs	r0, #0
100527f6:	f7fe fb05 	bl	10050e04 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
100527fa:	4b06      	ldr	r3, [pc, #24]	@ (10052814 <BLENVM_Init+0x2c>)
100527fc:	0019      	movs	r1, r3
100527fe:	2001      	movs	r0, #1
10052800:	f7fe fb00 	bl	10050e04 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10052804:	4b04      	ldr	r3, [pc, #16]	@ (10052818 <BLENVM_Init+0x30>)
10052806:	4a02      	ldr	r2, [pc, #8]	@ (10052810 <BLENVM_Init+0x28>)
10052808:	601a      	str	r2, [r3, #0]
}
1005280a:	46c0      	nop			@ (mov r8, r8)
1005280c:	46bd      	mov	sp, r7
1005280e:	bd80      	pop	{r7, pc}
10052810:	2000234c 	.word	0x2000234c
10052814:	2000235c 	.word	0x2000235c
10052818:	2000236c 	.word	0x2000236c

1005281c <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
1005281c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005281e:	b089      	sub	sp, #36	@ 0x24
10052820:	af02      	add	r7, sp, #8
10052822:	60b9      	str	r1, [r7, #8]
10052824:	0011      	movs	r1, r2
10052826:	607b      	str	r3, [r7, #4]
10052828:	240f      	movs	r4, #15
1005282a:	193b      	adds	r3, r7, r4
1005282c:	1c02      	adds	r2, r0, #0
1005282e:	701a      	strb	r2, [r3, #0]
10052830:	230c      	movs	r3, #12
10052832:	18fb      	adds	r3, r7, r3
10052834:	1c0a      	adds	r2, r1, #0
10052836:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
10052838:	193b      	adds	r3, r7, r4
1005283a:	781b      	ldrb	r3, [r3, #0]
1005283c:	2b02      	cmp	r3, #2
1005283e:	d103      	bne.n	10052848 <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
10052840:	4b1a      	ldr	r3, [pc, #104]	@ (100528ac <BLEPLAT_NvmAdd+0x90>)
10052842:	4a1b      	ldr	r2, [pc, #108]	@ (100528b0 <BLEPLAT_NvmAdd+0x94>)
10052844:	601a      	str	r2, [r3, #0]
10052846:	e002      	b.n	1005284e <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10052848:	4b18      	ldr	r3, [pc, #96]	@ (100528ac <BLEPLAT_NvmAdd+0x90>)
1005284a:	4a1a      	ldr	r2, [pc, #104]	@ (100528b4 <BLEPLAT_NvmAdd+0x98>)
1005284c:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
1005284e:	4b17      	ldr	r3, [pc, #92]	@ (100528ac <BLEPLAT_NvmAdd+0x90>)
10052850:	6818      	ldr	r0, [r3, #0]
10052852:	2617      	movs	r6, #23
10052854:	19bc      	adds	r4, r7, r6
10052856:	68bd      	ldr	r5, [r7, #8]
10052858:	230c      	movs	r3, #12
1005285a:	18fb      	adds	r3, r7, r3
1005285c:	881b      	ldrh	r3, [r3, #0]
1005285e:	469c      	mov	ip, r3
10052860:	230f      	movs	r3, #15
10052862:	18fb      	adds	r3, r7, r3
10052864:	7819      	ldrb	r1, [r3, #0]
10052866:	687b      	ldr	r3, [r7, #4]
10052868:	9301      	str	r3, [sp, #4]
1005286a:	2328      	movs	r3, #40	@ 0x28
1005286c:	2208      	movs	r2, #8
1005286e:	189b      	adds	r3, r3, r2
10052870:	19db      	adds	r3, r3, r7
10052872:	881b      	ldrh	r3, [r3, #0]
10052874:	9300      	str	r3, [sp, #0]
10052876:	002b      	movs	r3, r5
10052878:	4662      	mov	r2, ip
1005287a:	f7fe fb65 	bl	10050f48 <NVMDB_AppendRecord>
1005287e:	0003      	movs	r3, r0
10052880:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
10052882:	19bb      	adds	r3, r7, r6
10052884:	781b      	ldrb	r3, [r3, #0]
10052886:	2b00      	cmp	r3, #0
10052888:	d101      	bne.n	1005288e <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
1005288a:	2300      	movs	r3, #0
1005288c:	e009      	b.n	100528a2 <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
1005288e:	2317      	movs	r3, #23
10052890:	18fb      	adds	r3, r7, r3
10052892:	781b      	ldrb	r3, [r3, #0]
10052894:	2b02      	cmp	r3, #2
10052896:	d102      	bne.n	1005289e <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
10052898:	2301      	movs	r3, #1
1005289a:	425b      	negs	r3, r3
1005289c:	e001      	b.n	100528a2 <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
1005289e:	2302      	movs	r3, #2
100528a0:	425b      	negs	r3, r3
}
100528a2:	0018      	movs	r0, r3
100528a4:	46bd      	mov	sp, r7
100528a6:	b007      	add	sp, #28
100528a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100528aa:	46c0      	nop			@ (mov r8, r8)
100528ac:	2000236c 	.word	0x2000236c
100528b0:	2000235c 	.word	0x2000235c
100528b4:	2000234c 	.word	0x2000234c

100528b8 <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
100528b8:	b5b0      	push	{r4, r5, r7, lr}
100528ba:	b086      	sub	sp, #24
100528bc:	af02      	add	r7, sp, #8
100528be:	0004      	movs	r4, r0
100528c0:	0008      	movs	r0, r1
100528c2:	0011      	movs	r1, r2
100528c4:	603b      	str	r3, [r7, #0]
100528c6:	1dfb      	adds	r3, r7, #7
100528c8:	1c22      	adds	r2, r4, #0
100528ca:	701a      	strb	r2, [r3, #0]
100528cc:	1dbb      	adds	r3, r7, #6
100528ce:	1c02      	adds	r2, r0, #0
100528d0:	701a      	strb	r2, [r3, #0]
100528d2:	1d3b      	adds	r3, r7, #4
100528d4:	1c0a      	adds	r2, r1, #0
100528d6:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
100528d8:	1dbb      	adds	r3, r7, #6
100528da:	781b      	ldrb	r3, [r3, #0]
100528dc:	2b02      	cmp	r3, #2
100528de:	d107      	bne.n	100528f0 <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
100528e0:	4b2e      	ldr	r3, [pc, #184]	@ (1005299c <BLEPLAT_NvmGet+0xe4>)
100528e2:	4a2f      	ldr	r2, [pc, #188]	@ (100529a0 <BLEPLAT_NvmGet+0xe8>)
100528e4:	601a      	str	r2, [r3, #0]
    db_id = 1;
100528e6:	230e      	movs	r3, #14
100528e8:	18fb      	adds	r3, r7, r3
100528ea:	2201      	movs	r2, #1
100528ec:	701a      	strb	r2, [r3, #0]
100528ee:	e006      	b.n	100528fe <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
100528f0:	4b2a      	ldr	r3, [pc, #168]	@ (1005299c <BLEPLAT_NvmGet+0xe4>)
100528f2:	4a2c      	ldr	r2, [pc, #176]	@ (100529a4 <BLEPLAT_NvmGet+0xec>)
100528f4:	601a      	str	r2, [r3, #0]
    db_id = 0;
100528f6:	230e      	movs	r3, #14
100528f8:	18fb      	adds	r3, r7, r3
100528fa:	2200      	movs	r2, #0
100528fc:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
100528fe:	1dfb      	adds	r3, r7, #7
10052900:	781b      	ldrb	r3, [r3, #0]
10052902:	2b02      	cmp	r3, #2
10052904:	d112      	bne.n	1005292c <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
10052906:	4b25      	ldr	r3, [pc, #148]	@ (1005299c <BLEPLAT_NvmGet+0xe4>)
10052908:	6818      	ldr	r0, [r3, #0]
1005290a:	230f      	movs	r3, #15
1005290c:	18fc      	adds	r4, r7, r3
1005290e:	2320      	movs	r3, #32
10052910:	18fb      	adds	r3, r7, r3
10052912:	881d      	ldrh	r5, [r3, #0]
10052914:	683a      	ldr	r2, [r7, #0]
10052916:	1d3b      	adds	r3, r7, #4
10052918:	8819      	ldrh	r1, [r3, #0]
1005291a:	230c      	movs	r3, #12
1005291c:	18fb      	adds	r3, r7, r3
1005291e:	9300      	str	r3, [sp, #0]
10052920:	002b      	movs	r3, r5
10052922:	f7fe fadd 	bl	10050ee0 <NVMDB_ReadCurrentRecord>
10052926:	0003      	movs	r3, r0
10052928:	7023      	strb	r3, [r4, #0]
1005292a:	e021      	b.n	10052970 <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
1005292c:	1dfb      	adds	r3, r7, #7
1005292e:	781b      	ldrb	r3, [r3, #0]
10052930:	2b00      	cmp	r3, #0
10052932:	d108      	bne.n	10052946 <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10052934:	4b19      	ldr	r3, [pc, #100]	@ (1005299c <BLEPLAT_NvmGet+0xe4>)
10052936:	681a      	ldr	r2, [r3, #0]
10052938:	230e      	movs	r3, #14
1005293a:	18fb      	adds	r3, r7, r3
1005293c:	781b      	ldrb	r3, [r3, #0]
1005293e:	0011      	movs	r1, r2
10052940:	0018      	movs	r0, r3
10052942:	f7fe fa5f 	bl	10050e04 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
10052946:	4b15      	ldr	r3, [pc, #84]	@ (1005299c <BLEPLAT_NvmGet+0xe4>)
10052948:	6818      	ldr	r0, [r3, #0]
1005294a:	230f      	movs	r3, #15
1005294c:	18fc      	adds	r4, r7, r3
1005294e:	683d      	ldr	r5, [r7, #0]
10052950:	1d3b      	adds	r3, r7, #4
10052952:	881a      	ldrh	r2, [r3, #0]
10052954:	1dbb      	adds	r3, r7, #6
10052956:	7819      	ldrb	r1, [r3, #0]
10052958:	230c      	movs	r3, #12
1005295a:	18fb      	adds	r3, r7, r3
1005295c:	9301      	str	r3, [sp, #4]
1005295e:	2320      	movs	r3, #32
10052960:	18fb      	adds	r3, r7, r3
10052962:	881b      	ldrh	r3, [r3, #0]
10052964:	9300      	str	r3, [sp, #0]
10052966:	002b      	movs	r3, r5
10052968:	f7fe fa80 	bl	10050e6c <NVMDB_ReadNextRecord>
1005296c:	0003      	movs	r3, r0
1005296e:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
10052970:	230f      	movs	r3, #15
10052972:	18fb      	adds	r3, r7, r3
10052974:	781b      	ldrb	r3, [r3, #0]
10052976:	2b00      	cmp	r3, #0
10052978:	d101      	bne.n	1005297e <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
1005297a:	2300      	movs	r3, #0
1005297c:	e009      	b.n	10052992 <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
1005297e:	230f      	movs	r3, #15
10052980:	18fb      	adds	r3, r7, r3
10052982:	781b      	ldrb	r3, [r3, #0]
10052984:	2b04      	cmp	r3, #4
10052986:	d102      	bne.n	1005298e <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
10052988:	2303      	movs	r3, #3
1005298a:	425b      	negs	r3, r3
1005298c:	e001      	b.n	10052992 <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
1005298e:	2302      	movs	r3, #2
10052990:	425b      	negs	r3, r3
}
10052992:	0018      	movs	r0, r3
10052994:	46bd      	mov	sp, r7
10052996:	b004      	add	sp, #16
10052998:	bdb0      	pop	{r4, r5, r7, pc}
1005299a:	46c0      	nop			@ (mov r8, r8)
1005299c:	2000236c 	.word	0x2000236c
100529a0:	2000235c 	.word	0x2000235c
100529a4:	2000234c 	.word	0x2000234c

100529a8 <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare(uint16_t Offset, const uint8_t* pData, uint16_t Size)
{
100529a8:	b590      	push	{r4, r7, lr}
100529aa:	b085      	sub	sp, #20
100529ac:	af00      	add	r7, sp, #0
100529ae:	6039      	str	r1, [r7, #0]
100529b0:	0011      	movs	r1, r2
100529b2:	1dbb      	adds	r3, r7, #6
100529b4:	1c02      	adds	r2, r0, #0
100529b6:	801a      	strh	r2, [r3, #0]
100529b8:	1d3b      	adds	r3, r7, #4
100529ba:	1c0a      	adds	r2, r1, #0
100529bc:	801a      	strh	r2, [r3, #0]
  int ret;

  ret = NVMDB_CompareCurrentRecord(curr_handle_p, Offset, pData, Size);
100529be:	4b0e      	ldr	r3, [pc, #56]	@ (100529f8 <BLEPLAT_NvmCompare+0x50>)
100529c0:	6818      	ldr	r0, [r3, #0]
100529c2:	1d3b      	adds	r3, r7, #4
100529c4:	881c      	ldrh	r4, [r3, #0]
100529c6:	683a      	ldr	r2, [r7, #0]
100529c8:	1dbb      	adds	r3, r7, #6
100529ca:	8819      	ldrh	r1, [r3, #0]
100529cc:	0023      	movs	r3, r4
100529ce:	f7fd fa83 	bl	1004fed8 <NVMDB_CompareCurrentRecord>
100529d2:	0003      	movs	r3, r0
100529d4:	60fb      	str	r3, [r7, #12]

  if(ret == 0)
100529d6:	68fb      	ldr	r3, [r7, #12]
100529d8:	2b00      	cmp	r3, #0
100529da:	d101      	bne.n	100529e0 <BLEPLAT_NvmCompare+0x38>
  {
    return BLEPLAT_OK;
100529dc:	2300      	movs	r3, #0
100529de:	e007      	b.n	100529f0 <BLEPLAT_NvmCompare+0x48>
  }
  else if(ret < 0)
100529e0:	68fb      	ldr	r3, [r7, #12]
100529e2:	2b00      	cmp	r3, #0
100529e4:	da02      	bge.n	100529ec <BLEPLAT_NvmCompare+0x44>
  {
    return Size;
100529e6:	1d3b      	adds	r3, r7, #4
100529e8:	881b      	ldrh	r3, [r3, #0]
100529ea:	e001      	b.n	100529f0 <BLEPLAT_NvmCompare+0x48>
  }
  else
  {
    return BLEPLAT_EOF;
100529ec:	2303      	movs	r3, #3
100529ee:	425b      	negs	r3, r3
  }
}
100529f0:	0018      	movs	r0, r3
100529f2:	46bd      	mov	sp, r7
100529f4:	b005      	add	sp, #20
100529f6:	bd90      	pop	{r4, r7, pc}
100529f8:	2000236c 	.word	0x2000236c

100529fc <BLEPLAT_NvmDiscard>:

void BLEPLAT_NvmDiscard(BLEPLAT_NvmSeekModeTypeDef Mode)
{
100529fc:	b580      	push	{r7, lr}
100529fe:	b082      	sub	sp, #8
10052a00:	af00      	add	r7, sp, #0
10052a02:	0002      	movs	r2, r0
10052a04:	1dfb      	adds	r3, r7, #7
10052a06:	701a      	strb	r2, [r3, #0]
  DEBUG_GPIO2_HIGH();
  if(Mode == BLEPLAT_NVM_CURRENT)
10052a08:	1dfb      	adds	r3, r7, #7
10052a0a:	781b      	ldrb	r3, [r3, #0]
10052a0c:	2b02      	cmp	r3, #2
10052a0e:	d10a      	bne.n	10052a26 <BLEPLAT_NvmDiscard+0x2a>
  {
    if(curr_handle_p == &device_id_db_h) // Do not allow to erase device ID data.
10052a10:	4b0b      	ldr	r3, [pc, #44]	@ (10052a40 <BLEPLAT_NvmDiscard+0x44>)
10052a12:	681a      	ldr	r2, [r3, #0]
10052a14:	4b0b      	ldr	r3, [pc, #44]	@ (10052a44 <BLEPLAT_NvmDiscard+0x48>)
10052a16:	429a      	cmp	r2, r3
10052a18:	d00d      	beq.n	10052a36 <BLEPLAT_NvmDiscard+0x3a>
    {
      return;
    }
    NVMDB_DeleteRecord(curr_handle_p);
10052a1a:	4b09      	ldr	r3, [pc, #36]	@ (10052a40 <BLEPLAT_NvmDiscard+0x44>)
10052a1c:	681b      	ldr	r3, [r3, #0]
10052a1e:	0018      	movs	r0, r3
10052a20:	f7fe faf8 	bl	10051014 <NVMDB_DeleteRecord>
10052a24:	e008      	b.n	10052a38 <BLEPLAT_NvmDiscard+0x3c>
  }
  else if(Mode == BLEPLAT_NVM_ALL)
10052a26:	1dfb      	adds	r3, r7, #7
10052a28:	781b      	ldrb	r3, [r3, #0]
10052a2a:	2b03      	cmp	r3, #3
10052a2c:	d104      	bne.n	10052a38 <BLEPLAT_NvmDiscard+0x3c>
  {

    NVMDB_Erase(SEC_GATT_BD);
10052a2e:	2000      	movs	r0, #0
10052a30:	f7fe fafe 	bl	10051030 <NVMDB_Erase>
10052a34:	e000      	b.n	10052a38 <BLEPLAT_NvmDiscard+0x3c>
      return;
10052a36:	46c0      	nop			@ (mov r8, r8)
       else
        return;
       }*/
  }
  DEBUG_GPIO2_LOW();
}
10052a38:	46bd      	mov	sp, r7
10052a3a:	b002      	add	sp, #8
10052a3c:	bd80      	pop	{r7, pc}
10052a3e:	46c0      	nop			@ (mov r8, r8)
10052a40:	2000236c 	.word	0x2000236c
10052a44:	2000235c 	.word	0x2000235c

10052a48 <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
10052a48:	b580      	push	{r7, lr}
10052a4a:	b084      	sub	sp, #16
10052a4c:	af00      	add	r7, sp, #0
10052a4e:	60f8      	str	r0, [r7, #12]
10052a50:	60b9      	str	r1, [r7, #8]
10052a52:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10052a54:	687a      	ldr	r2, [r7, #4]
10052a56:	68b9      	ldr	r1, [r7, #8]
10052a58:	68fb      	ldr	r3, [r7, #12]
10052a5a:	0018      	movs	r0, r3
10052a5c:	f7ed fb52 	bl	10040104 <Osal_MemCpy>
}
10052a60:	46c0      	nop			@ (mov r8, r8)
10052a62:	46bd      	mov	sp, r7
10052a64:	b004      	add	sp, #16
10052a66:	bd80      	pop	{r7, pc}

10052a68 <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
10052a68:	b580      	push	{r7, lr}
10052a6a:	b084      	sub	sp, #16
10052a6c:	af00      	add	r7, sp, #0
10052a6e:	60f8      	str	r0, [r7, #12]
10052a70:	60b9      	str	r1, [r7, #8]
10052a72:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10052a74:	687a      	ldr	r2, [r7, #4]
10052a76:	68b9      	ldr	r1, [r7, #8]
10052a78:	68fb      	ldr	r3, [r7, #12]
10052a7a:	0018      	movs	r0, r3
10052a7c:	f015 f9e8 	bl	10067e50 <memset>
}
10052a80:	46c0      	nop			@ (mov r8, r8)
10052a82:	46bd      	mov	sp, r7
10052a84:	b004      	add	sp, #16
10052a86:	bd80      	pop	{r7, pc}

10052a88 <BLEPLAT_MemCmp>:

int BLEPLAT_MemCmp(void *S1, void *S2, unsigned int Size)
{
10052a88:	b580      	push	{r7, lr}
10052a8a:	b084      	sub	sp, #16
10052a8c:	af00      	add	r7, sp, #0
10052a8e:	60f8      	str	r0, [r7, #12]
10052a90:	60b9      	str	r1, [r7, #8]
10052a92:	607a      	str	r2, [r7, #4]
  return memcmp(S1, S2, Size);
10052a94:	687a      	ldr	r2, [r7, #4]
10052a96:	68b9      	ldr	r1, [r7, #8]
10052a98:	68fb      	ldr	r3, [r7, #12]
10052a9a:	0018      	movs	r0, r3
10052a9c:	f015 f9ca 	bl	10067e34 <memcmp>
10052aa0:	0003      	movs	r3, r0
}
10052aa2:	0018      	movs	r0, r3
10052aa4:	46bd      	mov	sp, r7
10052aa6:	b004      	add	sp, #16
10052aa8:	bd80      	pop	{r7, pc}

10052aaa <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
10052aaa:	b590      	push	{r4, r7, lr}
10052aac:	b089      	sub	sp, #36	@ 0x24
10052aae:	af00      	add	r7, sp, #0
10052ab0:	60f8      	str	r0, [r7, #12]
10052ab2:	60b9      	str	r1, [r7, #8]
10052ab4:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
10052ab6:	2410      	movs	r4, #16
10052ab8:	193b      	adds	r3, r7, r4
10052aba:	0018      	movs	r0, r3
10052abc:	f7ff f85a 	bl	10051b74 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
10052ac0:	0021      	movs	r1, r4
10052ac2:	187b      	adds	r3, r7, r1
10052ac4:	781a      	ldrb	r2, [r3, #0]
10052ac6:	68fb      	ldr	r3, [r7, #12]
10052ac8:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
10052aca:	187b      	adds	r3, r7, r1
10052acc:	785a      	ldrb	r2, [r3, #1]
10052ace:	68bb      	ldr	r3, [r7, #8]
10052ad0:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
10052ad2:	187b      	adds	r3, r7, r1
10052ad4:	789a      	ldrb	r2, [r3, #2]
10052ad6:	687b      	ldr	r3, [r7, #4]
10052ad8:	701a      	strb	r2, [r3, #0]
}
10052ada:	46c0      	nop			@ (mov r8, r8)
10052adc:	46bd      	mov	sp, r7
10052ade:	b009      	add	sp, #36	@ 0x24
10052ae0:	bd90      	pop	{r4, r7, pc}

10052ae2 <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
10052ae2:	b580      	push	{r7, lr}
10052ae4:	b084      	sub	sp, #16
10052ae6:	af00      	add	r7, sp, #0
10052ae8:	60f8      	str	r0, [r7, #12]
10052aea:	60b9      	str	r1, [r7, #8]
10052aec:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
10052aee:	687a      	ldr	r2, [r7, #4]
10052af0:	68b9      	ldr	r1, [r7, #8]
10052af2:	68fb      	ldr	r3, [r7, #12]
10052af4:	0018      	movs	r0, r3
10052af6:	f7fc fe6b 	bl	1004f7d0 <HW_AES_Encrypt>
}
10052afa:	46c0      	nop			@ (mov r8, r8)
10052afc:	46bd      	mov	sp, r7
10052afe:	b004      	add	sp, #16
10052b00:	bd80      	pop	{r7, pc}

10052b02 <BLEPLAT_AesCMACEncryptInit>:

int32_t BLEPLAT_AesCMACEncryptInit(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx)
{
10052b02:	b580      	push	{r7, lr}
10052b04:	b082      	sub	sp, #8
10052b06:	af00      	add	r7, sp, #0
10052b08:	6078      	str	r0, [r7, #4]
  return AES_CMAC_Encrypt_Init((AESCMACctx_stt*)pAESCMACctx);
10052b0a:	687b      	ldr	r3, [r7, #4]
10052b0c:	0018      	movs	r0, r3
10052b0e:	f016 f843 	bl	10068b98 <AES_CMAC_Encrypt_Init>
10052b12:	0003      	movs	r3, r0
}
10052b14:	0018      	movs	r0, r3
10052b16:	46bd      	mov	sp, r7
10052b18:	b002      	add	sp, #8
10052b1a:	bd80      	pop	{r7, pc}

10052b1c <BLEPLAT_AesCMACEncryptAppend>:

int32_t BLEPLAT_AesCMACEncryptAppend(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     const uint8_t  *pInputBuffer,
                                     int32_t InputSize)
{
10052b1c:	b580      	push	{r7, lr}
10052b1e:	b084      	sub	sp, #16
10052b20:	af00      	add	r7, sp, #0
10052b22:	60f8      	str	r0, [r7, #12]
10052b24:	60b9      	str	r1, [r7, #8]
10052b26:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Append((AESCMACctx_stt*)pAESCMACctx, pInputBuffer, InputSize);
10052b28:	687a      	ldr	r2, [r7, #4]
10052b2a:	68b9      	ldr	r1, [r7, #8]
10052b2c:	68fb      	ldr	r3, [r7, #12]
10052b2e:	0018      	movs	r0, r3
10052b30:	f015 fec8 	bl	100688c4 <AES_CMAC_Encrypt_Append>
10052b34:	0003      	movs	r3, r0
}
10052b36:	0018      	movs	r0, r3
10052b38:	46bd      	mov	sp, r7
10052b3a:	b004      	add	sp, #16
10052b3c:	bd80      	pop	{r7, pc}

10052b3e <BLEPLAT_AesCMACEncryptFinish>:

int32_t BLEPLAT_AesCMACEncryptFinish(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     uint8_t *pOutputBuffer,
                                     int32_t *pOutputSize)
{
10052b3e:	b580      	push	{r7, lr}
10052b40:	b084      	sub	sp, #16
10052b42:	af00      	add	r7, sp, #0
10052b44:	60f8      	str	r0, [r7, #12]
10052b46:	60b9      	str	r1, [r7, #8]
10052b48:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
10052b4a:	687a      	ldr	r2, [r7, #4]
10052b4c:	68b9      	ldr	r1, [r7, #8]
10052b4e:	68fb      	ldr	r3, [r7, #12]
10052b50:	0018      	movs	r0, r3
10052b52:	f015 ffeb 	bl	10068b2c <AES_CMAC_Encrypt_Finish>
10052b56:	0003      	movs	r3, r0
}
10052b58:	0018      	movs	r0, r3
10052b5a:	46bd      	mov	sp, r7
10052b5c:	b004      	add	sp, #16
10052b5e:	bd80      	pop	{r7, pc}

10052b60 <BLEPLAT_RngGetRandom16>:

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
10052b60:	b580      	push	{r7, lr}
10052b62:	b082      	sub	sp, #8
10052b64:	af00      	add	r7, sp, #0
10052b66:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
10052b68:	687b      	ldr	r3, [r7, #4]
10052b6a:	0018      	movs	r0, r3
10052b6c:	f7fc ff98 	bl	1004faa0 <HW_RNG_GetRandom16>
}
10052b70:	46c0      	nop			@ (mov r8, r8)
10052b72:	46bd      	mov	sp, r7
10052b74:	b002      	add	sp, #8
10052b76:	bd80      	pop	{r7, pc}

10052b78 <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
10052b78:	b580      	push	{r7, lr}
10052b7a:	b082      	sub	sp, #8
10052b7c:	af00      	add	r7, sp, #0
10052b7e:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
10052b80:	687b      	ldr	r3, [r7, #4]
10052b82:	0018      	movs	r0, r3
10052b84:	f7fc ffa6 	bl	1004fad4 <HW_RNG_GetRandom32>
}
10052b88:	46c0      	nop			@ (mov r8, r8)
10052b8a:	46bd      	mov	sp, r7
10052b8c:	b002      	add	sp, #8
10052b8e:	bd80      	pop	{r7, pc}

10052b90 <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
10052b90:	b580      	push	{r7, lr}
10052b92:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
10052b94:	f7fe ff12 	bl	100519bc <RADIO_GetMaxPALevel>
10052b98:	0003      	movs	r3, r0
}
10052b9a:	0018      	movs	r0, r3
10052b9c:	46bd      	mov	sp, r7
10052b9e:	bd80      	pop	{r7, pc}

10052ba0 <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
10052ba0:	b580      	push	{r7, lr}
10052ba2:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
10052ba4:	f7fe ff10 	bl	100519c8 <RADIO_GetDefaultPALevel>
10052ba8:	0003      	movs	r3, r0
}
10052baa:	0018      	movs	r0, r3
10052bac:	46bd      	mov	sp, r7
10052bae:	bd80      	pop	{r7, pc}

10052bb0 <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
10052bb0:	b580      	push	{r7, lr}
10052bb2:	b082      	sub	sp, #8
10052bb4:	af00      	add	r7, sp, #0
10052bb6:	0002      	movs	r2, r0
10052bb8:	1dfb      	adds	r3, r7, #7
10052bba:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
10052bbc:	1dfb      	adds	r3, r7, #7
10052bbe:	781b      	ldrb	r3, [r3, #0]
10052bc0:	0018      	movs	r0, r3
10052bc2:	f7fe ff07 	bl	100519d4 <RADIO_SetHighPower>
}
10052bc6:	46c0      	nop			@ (mov r8, r8)
10052bc8:	46bd      	mov	sp, r7
10052bca:	b002      	add	sp, #8
10052bcc:	bd80      	pop	{r7, pc}

10052bce <BLEPLAT_CalculateRSSI>:

int8_t BLEPLAT_CalculateRSSI(void)
{
10052bce:	b580      	push	{r7, lr}
10052bd0:	af00      	add	r7, sp, #0
  return HAL_RADIO_ReadRSSI();
10052bd2:	f7f8 fb91 	bl	1004b2f8 <HAL_RADIO_ReadRSSI>
10052bd6:	0003      	movs	r3, r0
}
10052bd8:	0018      	movs	r0, r3
10052bda:	46bd      	mov	sp, r7
10052bdc:	bd80      	pop	{r7, pc}

10052bde <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
10052bde:	b580      	push	{r7, lr}
10052be0:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
10052be2:	f7f9 f8df 	bl	1004bda4 <HAL_RADIO_TIMER_GetCurrentSysTime>
10052be6:	0002      	movs	r2, r0
10052be8:	000b      	movs	r3, r1

}
10052bea:	0010      	movs	r0, r2
10052bec:	0019      	movs	r1, r3
10052bee:	46bd      	mov	sp, r7
10052bf0:	bd80      	pop	{r7, pc}

10052bf2 <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10052bf2:	b580      	push	{r7, lr}
10052bf4:	b084      	sub	sp, #16
10052bf6:	af00      	add	r7, sp, #0
10052bf8:	60f8      	str	r0, [r7, #12]
10052bfa:	603a      	str	r2, [r7, #0]
10052bfc:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
10052bfe:	683a      	ldr	r2, [r7, #0]
10052c00:	687b      	ldr	r3, [r7, #4]
10052c02:	68f9      	ldr	r1, [r7, #12]
10052c04:	0008      	movs	r0, r1
10052c06:	f7f9 f8df 	bl	1004bdc8 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
10052c0a:	0003      	movs	r3, r0
}
10052c0c:	0018      	movs	r0, r3
10052c0e:	46bd      	mov	sp, r7
10052c10:	b004      	add	sp, #16
10052c12:	bd80      	pop	{r7, pc}

10052c14 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10052c14:	b580      	push	{r7, lr}
10052c16:	b082      	sub	sp, #8
10052c18:	af00      	add	r7, sp, #0
10052c1a:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
10052c1c:	687b      	ldr	r3, [r7, #4]
10052c1e:	0018      	movs	r0, r3
10052c20:	f7f9 f8ec 	bl	1004bdfc <HAL_RADIO_TIMER_StopVirtualTimer>
}
10052c24:	46c0      	nop			@ (mov r8, r8)
10052c26:	46bd      	mov	sp, r7
10052c28:	b002      	add	sp, #8
10052c2a:	bd80      	pop	{r7, pc}

10052c2c <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
10052c2c:	b580      	push	{r7, lr}
10052c2e:	b082      	sub	sp, #8
10052c30:	af00      	add	r7, sp, #0
10052c32:	6078      	str	r0, [r7, #4]
10052c34:	0008      	movs	r0, r1
10052c36:	0011      	movs	r1, r2
10052c38:	1cfb      	adds	r3, r7, #3
10052c3a:	1c02      	adds	r2, r0, #0
10052c3c:	701a      	strb	r2, [r3, #0]
10052c3e:	1cbb      	adds	r3, r7, #2
10052c40:	1c0a      	adds	r2, r1, #0
10052c42:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10052c44:	1cbb      	adds	r3, r7, #2
10052c46:	781a      	ldrb	r2, [r3, #0]
10052c48:	1cfb      	adds	r3, r7, #3
10052c4a:	7819      	ldrb	r1, [r3, #0]
10052c4c:	687b      	ldr	r3, [r7, #4]
10052c4e:	0018      	movs	r0, r3
10052c50:	f7f8 ff92 	bl	1004bb78 <HAL_RADIO_TIMER_SetRadioTimerValue>
10052c54:	0003      	movs	r3, r0
10052c56:	b2db      	uxtb	r3, r3
}
10052c58:	0018      	movs	r0, r3
10052c5a:	46bd      	mov	sp, r7
10052c5c:	b002      	add	sp, #8
10052c5e:	bd80      	pop	{r7, pc}

10052c60 <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
10052c60:	b580      	push	{r7, lr}
10052c62:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
10052c64:	f7f8 ffd8 	bl	1004bc18 <HAL_RADIO_TIMER_ClearRadioTimerValue>
10052c68:	0003      	movs	r3, r0
10052c6a:	b2db      	uxtb	r3, r3
}
10052c6c:	0018      	movs	r0, r3
10052c6e:	46bd      	mov	sp, r7
10052c70:	bd80      	pop	{r7, pc}

10052c72 <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
10052c72:	b580      	push	{r7, lr}
10052c74:	b082      	sub	sp, #8
10052c76:	af00      	add	r7, sp, #0
10052c78:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
10052c7a:	687b      	ldr	r3, [r7, #4]
10052c7c:	0018      	movs	r0, r3
10052c7e:	f7f8 ff67 	bl	1004bb50 <HAL_RADIO_TIMER_GetAnchorPoint>
10052c82:	0002      	movs	r2, r0
10052c84:	000b      	movs	r3, r1
}
10052c86:	0010      	movs	r0, r2
10052c88:	0019      	movs	r1, r3
10052c8a:	46bd      	mov	sp, r7
10052c8c:	b002      	add	sp, #8
10052c8e:	bd80      	pop	{r7, pc}

10052c90 <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
10052c90:	b580      	push	{r7, lr}
10052c92:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
10052c94:	f7f9 f834 	bl	1004bd00 <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
10052c98:	46c0      	nop			@ (mov r8, r8)
10052c9a:	46bd      	mov	sp, r7
10052c9c:	bd80      	pop	{r7, pc}
	...

10052ca0 <LL_RADIO_SetCurrentConnectionMachineNumber>:
{
10052ca0:	b580      	push	{r7, lr}
10052ca2:	b082      	sub	sp, #8
10052ca4:	af00      	add	r7, sp, #0
10052ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
10052ca8:	4b07      	ldr	r3, [pc, #28]	@ (10052cc8 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10052caa:	685b      	ldr	r3, [r3, #4]
10052cac:	227f      	movs	r2, #127	@ 0x7f
10052cae:	4393      	bics	r3, r2
10052cb0:	0019      	movs	r1, r3
10052cb2:	687b      	ldr	r3, [r7, #4]
10052cb4:	227f      	movs	r2, #127	@ 0x7f
10052cb6:	401a      	ands	r2, r3
10052cb8:	4b03      	ldr	r3, [pc, #12]	@ (10052cc8 <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
10052cba:	430a      	orrs	r2, r1
10052cbc:	605a      	str	r2, [r3, #4]
}
10052cbe:	46c0      	nop			@ (mov r8, r8)
10052cc0:	46bd      	mov	sp, r7
10052cc2:	b002      	add	sp, #8
10052cc4:	bd80      	pop	{r7, pc}
10052cc6:	46c0      	nop			@ (mov r8, r8)
10052cc8:	200000c0 	.word	0x200000c0

10052ccc <LL_RADIO_GlobalEnableBlue>:
{
10052ccc:	b580      	push	{r7, lr}
10052cce:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10052cd0:	4b04      	ldr	r3, [pc, #16]	@ (10052ce4 <LL_RADIO_GlobalEnableBlue+0x18>)
10052cd2:	685a      	ldr	r2, [r3, #4]
10052cd4:	4b03      	ldr	r3, [pc, #12]	@ (10052ce4 <LL_RADIO_GlobalEnableBlue+0x18>)
10052cd6:	2180      	movs	r1, #128	@ 0x80
10052cd8:	430a      	orrs	r2, r1
10052cda:	605a      	str	r2, [r3, #4]
}
10052cdc:	46c0      	nop			@ (mov r8, r8)
10052cde:	46bd      	mov	sp, r7
10052ce0:	bd80      	pop	{r7, pc}
10052ce2:	46c0      	nop			@ (mov r8, r8)
10052ce4:	200000c0 	.word	0x200000c0

10052ce8 <LL_RADIO_GlobalDisableBlue>:
{
10052ce8:	b580      	push	{r7, lr}
10052cea:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10052cec:	4b04      	ldr	r3, [pc, #16]	@ (10052d00 <LL_RADIO_GlobalDisableBlue+0x18>)
10052cee:	685a      	ldr	r2, [r3, #4]
10052cf0:	4b03      	ldr	r3, [pc, #12]	@ (10052d00 <LL_RADIO_GlobalDisableBlue+0x18>)
10052cf2:	2180      	movs	r1, #128	@ 0x80
10052cf4:	438a      	bics	r2, r1
10052cf6:	605a      	str	r2, [r3, #4]
}
10052cf8:	46c0      	nop			@ (mov r8, r8)
10052cfa:	46bd      	mov	sp, r7
10052cfc:	bd80      	pop	{r7, pc}
10052cfe:	46c0      	nop			@ (mov r8, r8)
10052d00:	200000c0 	.word	0x200000c0

10052d04 <LL_RADIO_SetReceiveWindowTimeout>:
{
10052d04:	b580      	push	{r7, lr}
10052d06:	b082      	sub	sp, #8
10052d08:	af00      	add	r7, sp, #0
10052d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
10052d0c:	4b07      	ldr	r3, [pc, #28]	@ (10052d2c <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10052d0e:	691b      	ldr	r3, [r3, #16]
10052d10:	4a07      	ldr	r2, [pc, #28]	@ (10052d30 <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
10052d12:	4013      	ands	r3, r2
10052d14:	0019      	movs	r1, r3
10052d16:	687b      	ldr	r3, [r7, #4]
10052d18:	021b      	lsls	r3, r3, #8
10052d1a:	4a06      	ldr	r2, [pc, #24]	@ (10052d34 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10052d1c:	401a      	ands	r2, r3
10052d1e:	4b03      	ldr	r3, [pc, #12]	@ (10052d2c <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10052d20:	430a      	orrs	r2, r1
10052d22:	611a      	str	r2, [r3, #16]
}
10052d24:	46c0      	nop			@ (mov r8, r8)
10052d26:	46bd      	mov	sp, r7
10052d28:	b002      	add	sp, #8
10052d2a:	bd80      	pop	{r7, pc}
10052d2c:	200000c0 	.word	0x200000c0
10052d30:	f00000ff 	.word	0xf00000ff
10052d34:	0fffff00 	.word	0x0fffff00

10052d38 <LL_RADIO_SetUnmappedChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUnmappedChannel(uint8_t stateMachineNo, uint32_t value)
{
10052d38:	b580      	push	{r7, lr}
10052d3a:	b082      	sub	sp, #8
10052d3c:	af00      	add	r7, sp, #0
10052d3e:	0002      	movs	r2, r0
10052d40:	6039      	str	r1, [r7, #0]
10052d42:	1dfb      	adds	r3, r7, #7
10052d44:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_UCHAN, value);
10052d46:	1dfb      	adds	r3, r7, #7
10052d48:	781b      	ldrb	r3, [r3, #0]
10052d4a:	225c      	movs	r2, #92	@ 0x5c
10052d4c:	4353      	muls	r3, r2
10052d4e:	4a0b      	ldr	r2, [pc, #44]	@ (10052d7c <LL_RADIO_SetUnmappedChannel+0x44>)
10052d50:	4694      	mov	ip, r2
10052d52:	4463      	add	r3, ip
10052d54:	681b      	ldr	r3, [r3, #0]
10052d56:	223f      	movs	r2, #63	@ 0x3f
10052d58:	4393      	bics	r3, r2
10052d5a:	0019      	movs	r1, r3
10052d5c:	683b      	ldr	r3, [r7, #0]
10052d5e:	223f      	movs	r2, #63	@ 0x3f
10052d60:	401a      	ands	r2, r3
10052d62:	1dfb      	adds	r3, r7, #7
10052d64:	781b      	ldrb	r3, [r3, #0]
10052d66:	205c      	movs	r0, #92	@ 0x5c
10052d68:	4343      	muls	r3, r0
10052d6a:	4804      	ldr	r0, [pc, #16]	@ (10052d7c <LL_RADIO_SetUnmappedChannel+0x44>)
10052d6c:	4684      	mov	ip, r0
10052d6e:	4463      	add	r3, ip
10052d70:	430a      	orrs	r2, r1
10052d72:	601a      	str	r2, [r3, #0]
}
10052d74:	46c0      	nop			@ (mov r8, r8)
10052d76:	46bd      	mov	sp, r7
10052d78:	b002      	add	sp, #8
10052d7a:	bd80      	pop	{r7, pc}
10052d7c:	200000dc 	.word	0x200000dc

10052d80 <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
10052d80:	b580      	push	{r7, lr}
10052d82:	b082      	sub	sp, #8
10052d84:	af00      	add	r7, sp, #0
10052d86:	0002      	movs	r2, r0
10052d88:	1dfb      	adds	r3, r7, #7
10052d8a:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10052d8c:	1dfb      	adds	r3, r7, #7
10052d8e:	781b      	ldrb	r3, [r3, #0]
10052d90:	225c      	movs	r2, #92	@ 0x5c
10052d92:	4353      	muls	r3, r2
10052d94:	4a08      	ldr	r2, [pc, #32]	@ (10052db8 <LL_RADIO_RadioCommandList_Enable+0x38>)
10052d96:	4694      	mov	ip, r2
10052d98:	4463      	add	r3, ip
10052d9a:	681a      	ldr	r2, [r3, #0]
10052d9c:	1dfb      	adds	r3, r7, #7
10052d9e:	781b      	ldrb	r3, [r3, #0]
10052da0:	215c      	movs	r1, #92	@ 0x5c
10052da2:	434b      	muls	r3, r1
10052da4:	4904      	ldr	r1, [pc, #16]	@ (10052db8 <LL_RADIO_RadioCommandList_Enable+0x38>)
10052da6:	468c      	mov	ip, r1
10052da8:	4463      	add	r3, ip
10052daa:	2140      	movs	r1, #64	@ 0x40
10052dac:	430a      	orrs	r2, r1
10052dae:	601a      	str	r2, [r3, #0]
}
10052db0:	46c0      	nop			@ (mov r8, r8)
10052db2:	46bd      	mov	sp, r7
10052db4:	b002      	add	sp, #8
10052db6:	bd80      	pop	{r7, pc}
10052db8:	200000dc 	.word	0x200000dc

10052dbc <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
10052dbc:	b580      	push	{r7, lr}
10052dbe:	b082      	sub	sp, #8
10052dc0:	af00      	add	r7, sp, #0
10052dc2:	0002      	movs	r2, r0
10052dc4:	1dfb      	adds	r3, r7, #7
10052dc6:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10052dc8:	1dfb      	adds	r3, r7, #7
10052dca:	781b      	ldrb	r3, [r3, #0]
10052dcc:	225c      	movs	r2, #92	@ 0x5c
10052dce:	4353      	muls	r3, r2
10052dd0:	4a08      	ldr	r2, [pc, #32]	@ (10052df4 <LL_RADIO_RadioCommandList_Disable+0x38>)
10052dd2:	4694      	mov	ip, r2
10052dd4:	4463      	add	r3, ip
10052dd6:	681a      	ldr	r2, [r3, #0]
10052dd8:	1dfb      	adds	r3, r7, #7
10052dda:	781b      	ldrb	r3, [r3, #0]
10052ddc:	215c      	movs	r1, #92	@ 0x5c
10052dde:	434b      	muls	r3, r1
10052de0:	4904      	ldr	r1, [pc, #16]	@ (10052df4 <LL_RADIO_RadioCommandList_Disable+0x38>)
10052de2:	468c      	mov	ip, r1
10052de4:	4463      	add	r3, ip
10052de6:	2140      	movs	r1, #64	@ 0x40
10052de8:	438a      	bics	r2, r1
10052dea:	601a      	str	r2, [r3, #0]
}
10052dec:	46c0      	nop			@ (mov r8, r8)
10052dee:	46bd      	mov	sp, r7
10052df0:	b002      	add	sp, #8
10052df2:	bd80      	pop	{r7, pc}
10052df4:	200000dc 	.word	0x200000dc

10052df8 <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10052df8:	b580      	push	{r7, lr}
10052dfa:	b082      	sub	sp, #8
10052dfc:	af00      	add	r7, sp, #0
10052dfe:	0002      	movs	r2, r0
10052e00:	1dfb      	adds	r3, r7, #7
10052e02:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10052e04:	1dfb      	adds	r3, r7, #7
10052e06:	781b      	ldrb	r3, [r3, #0]
10052e08:	225c      	movs	r2, #92	@ 0x5c
10052e0a:	4353      	muls	r3, r2
10052e0c:	4a08      	ldr	r2, [pc, #32]	@ (10052e30 <LL_RADIO_TxMode_Enable+0x38>)
10052e0e:	4694      	mov	ip, r2
10052e10:	4463      	add	r3, ip
10052e12:	681a      	ldr	r2, [r3, #0]
10052e14:	1dfb      	adds	r3, r7, #7
10052e16:	781b      	ldrb	r3, [r3, #0]
10052e18:	215c      	movs	r1, #92	@ 0x5c
10052e1a:	434b      	muls	r3, r1
10052e1c:	4904      	ldr	r1, [pc, #16]	@ (10052e30 <LL_RADIO_TxMode_Enable+0x38>)
10052e1e:	468c      	mov	ip, r1
10052e20:	4463      	add	r3, ip
10052e22:	2180      	movs	r1, #128	@ 0x80
10052e24:	430a      	orrs	r2, r1
10052e26:	601a      	str	r2, [r3, #0]
}
10052e28:	46c0      	nop			@ (mov r8, r8)
10052e2a:	46bd      	mov	sp, r7
10052e2c:	b002      	add	sp, #8
10052e2e:	bd80      	pop	{r7, pc}
10052e30:	200000dc 	.word	0x200000dc

10052e34 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10052e34:	b580      	push	{r7, lr}
10052e36:	b082      	sub	sp, #8
10052e38:	af00      	add	r7, sp, #0
10052e3a:	0002      	movs	r2, r0
10052e3c:	1dfb      	adds	r3, r7, #7
10052e3e:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10052e40:	1dfb      	adds	r3, r7, #7
10052e42:	781b      	ldrb	r3, [r3, #0]
10052e44:	225c      	movs	r2, #92	@ 0x5c
10052e46:	4353      	muls	r3, r2
10052e48:	4a08      	ldr	r2, [pc, #32]	@ (10052e6c <LL_RADIO_TxMode_Disable+0x38>)
10052e4a:	4694      	mov	ip, r2
10052e4c:	4463      	add	r3, ip
10052e4e:	681a      	ldr	r2, [r3, #0]
10052e50:	1dfb      	adds	r3, r7, #7
10052e52:	781b      	ldrb	r3, [r3, #0]
10052e54:	215c      	movs	r1, #92	@ 0x5c
10052e56:	434b      	muls	r3, r1
10052e58:	4904      	ldr	r1, [pc, #16]	@ (10052e6c <LL_RADIO_TxMode_Disable+0x38>)
10052e5a:	468c      	mov	ip, r1
10052e5c:	4463      	add	r3, ip
10052e5e:	2180      	movs	r1, #128	@ 0x80
10052e60:	438a      	bics	r2, r1
10052e62:	601a      	str	r2, [r3, #0]
}
10052e64:	46c0      	nop			@ (mov r8, r8)
10052e66:	46bd      	mov	sp, r7
10052e68:	b002      	add	sp, #8
10052e6a:	bd80      	pop	{r7, pc}
10052e6c:	200000dc 	.word	0x200000dc

10052e70 <LL_RADIO_TxMode_IsEnabled>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxMode_IsEnabled(uint8_t stateMachineNo)
{
10052e70:	b580      	push	{r7, lr}
10052e72:	b082      	sub	sp, #8
10052e74:	af00      	add	r7, sp, #0
10052e76:	0002      	movs	r2, r0
10052e78:	1dfb      	adds	r3, r7, #7
10052e7a:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE) == (STATEMACH_WORD0_TXMODE)) ? 1U : 0U);
10052e7c:	1dfb      	adds	r3, r7, #7
10052e7e:	781b      	ldrb	r3, [r3, #0]
10052e80:	225c      	movs	r2, #92	@ 0x5c
10052e82:	4353      	muls	r3, r2
10052e84:	4a07      	ldr	r2, [pc, #28]	@ (10052ea4 <LL_RADIO_TxMode_IsEnabled+0x34>)
10052e86:	4694      	mov	ip, r2
10052e88:	4463      	add	r3, ip
10052e8a:	681b      	ldr	r3, [r3, #0]
10052e8c:	2280      	movs	r2, #128	@ 0x80
10052e8e:	4013      	ands	r3, r2
10052e90:	2b80      	cmp	r3, #128	@ 0x80
10052e92:	d101      	bne.n	10052e98 <LL_RADIO_TxMode_IsEnabled+0x28>
10052e94:	2301      	movs	r3, #1
10052e96:	e000      	b.n	10052e9a <LL_RADIO_TxMode_IsEnabled+0x2a>
10052e98:	2300      	movs	r3, #0
}
10052e9a:	0018      	movs	r0, r3
10052e9c:	46bd      	mov	sp, r7
10052e9e:	b002      	add	sp, #8
10052ea0:	bd80      	pop	{r7, pc}
10052ea2:	46c0      	nop			@ (mov r8, r8)
10052ea4:	200000dc 	.word	0x200000dc

10052ea8 <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10052ea8:	b580      	push	{r7, lr}
10052eaa:	b082      	sub	sp, #8
10052eac:	af00      	add	r7, sp, #0
10052eae:	0002      	movs	r2, r0
10052eb0:	6039      	str	r1, [r7, #0]
10052eb2:	1dfb      	adds	r3, r7, #7
10052eb4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10052eb6:	1dfb      	adds	r3, r7, #7
10052eb8:	781b      	ldrb	r3, [r3, #0]
10052eba:	225c      	movs	r2, #92	@ 0x5c
10052ebc:	4353      	muls	r3, r2
10052ebe:	4a0c      	ldr	r2, [pc, #48]	@ (10052ef0 <LL_RADIO_SetRemapChannel+0x48>)
10052ec0:	4694      	mov	ip, r2
10052ec2:	4463      	add	r3, ip
10052ec4:	681b      	ldr	r3, [r3, #0]
10052ec6:	4a0b      	ldr	r2, [pc, #44]	@ (10052ef4 <LL_RADIO_SetRemapChannel+0x4c>)
10052ec8:	4013      	ands	r3, r2
10052eca:	0019      	movs	r1, r3
10052ecc:	683b      	ldr	r3, [r7, #0]
10052ece:	021a      	lsls	r2, r3, #8
10052ed0:	23fc      	movs	r3, #252	@ 0xfc
10052ed2:	019b      	lsls	r3, r3, #6
10052ed4:	401a      	ands	r2, r3
10052ed6:	1dfb      	adds	r3, r7, #7
10052ed8:	781b      	ldrb	r3, [r3, #0]
10052eda:	205c      	movs	r0, #92	@ 0x5c
10052edc:	4343      	muls	r3, r0
10052ede:	4804      	ldr	r0, [pc, #16]	@ (10052ef0 <LL_RADIO_SetRemapChannel+0x48>)
10052ee0:	4684      	mov	ip, r0
10052ee2:	4463      	add	r3, ip
10052ee4:	430a      	orrs	r2, r1
10052ee6:	601a      	str	r2, [r3, #0]
}
10052ee8:	46c0      	nop			@ (mov r8, r8)
10052eea:	46bd      	mov	sp, r7
10052eec:	b002      	add	sp, #8
10052eee:	bd80      	pop	{r7, pc}
10052ef0:	200000dc 	.word	0x200000dc
10052ef4:	ffffc0ff 	.word	0xffffc0ff

10052ef8 <LL_RADIO_GetRemapChannel>:
  * @rmtoll WORD0          REMAP_CHAN       LL_RADIO_GetRemapChannel
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetRemapChannel(uint8_t stateMachineNo)
{
10052ef8:	b580      	push	{r7, lr}
10052efa:	b082      	sub	sp, #8
10052efc:	af00      	add	r7, sp, #0
10052efe:	0002      	movs	r2, r0
10052f00:	1dfb      	adds	r3, r7, #7
10052f02:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0,
10052f04:	1dfb      	adds	r3, r7, #7
10052f06:	781b      	ldrb	r3, [r3, #0]
10052f08:	225c      	movs	r2, #92	@ 0x5c
10052f0a:	4353      	muls	r3, r2
10052f0c:	4a05      	ldr	r2, [pc, #20]	@ (10052f24 <LL_RADIO_GetRemapChannel+0x2c>)
10052f0e:	4694      	mov	ip, r2
10052f10:	4463      	add	r3, ip
10052f12:	681b      	ldr	r3, [r3, #0]
10052f14:	0a1b      	lsrs	r3, r3, #8
10052f16:	223f      	movs	r2, #63	@ 0x3f
10052f18:	4013      	ands	r3, r2
                             STATEMACH_WORD0_REMAP_CHAN) >> STATEMACH_WORD0_REMAP_CHAN_Pos);
}
10052f1a:	0018      	movs	r0, r3
10052f1c:	46bd      	mov	sp, r7
10052f1e:	b002      	add	sp, #8
10052f20:	bd80      	pop	{r7, pc}
10052f22:	46c0      	nop			@ (mov r8, r8)
10052f24:	200000dc 	.word	0x200000dc

10052f28 <LL_RADIO_ToggleNextExpectedSequenceNumber>:
  * @rmtoll WORD0          NESN       LL_RADIO_ToggleNextExpectedSequenceNumber
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ToggleNextExpectedSequenceNumber(uint8_t stateMachineNo)
{
10052f28:	b580      	push	{r7, lr}
10052f2a:	b082      	sub	sp, #8
10052f2c:	af00      	add	r7, sp, #0
10052f2e:	0002      	movs	r2, r0
10052f30:	1dfb      	adds	r3, r7, #7
10052f32:	701a      	strb	r2, [r3, #0]
  TOGGLE_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_NESN);
10052f34:	1dfb      	adds	r3, r7, #7
10052f36:	781b      	ldrb	r3, [r3, #0]
10052f38:	225c      	movs	r2, #92	@ 0x5c
10052f3a:	4353      	muls	r3, r2
10052f3c:	4a09      	ldr	r2, [pc, #36]	@ (10052f64 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
10052f3e:	4694      	mov	ip, r2
10052f40:	4463      	add	r3, ip
10052f42:	681a      	ldr	r2, [r3, #0]
10052f44:	1dfb      	adds	r3, r7, #7
10052f46:	781b      	ldrb	r3, [r3, #0]
10052f48:	215c      	movs	r1, #92	@ 0x5c
10052f4a:	434b      	muls	r3, r1
10052f4c:	4905      	ldr	r1, [pc, #20]	@ (10052f64 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
10052f4e:	468c      	mov	ip, r1
10052f50:	4463      	add	r3, ip
10052f52:	2180      	movs	r1, #128	@ 0x80
10052f54:	0209      	lsls	r1, r1, #8
10052f56:	404a      	eors	r2, r1
10052f58:	601a      	str	r2, [r3, #0]
}
10052f5a:	46c0      	nop			@ (mov r8, r8)
10052f5c:	46bd      	mov	sp, r7
10052f5e:	b002      	add	sp, #8
10052f60:	bd80      	pop	{r7, pc}
10052f62:	46c0      	nop			@ (mov r8, r8)
10052f64:	200000dc 	.word	0x200000dc

10052f68 <LL_RADIO_Encryption_Enable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Enable(uint8_t stateMachineNo)
{
10052f68:	b580      	push	{r7, lr}
10052f6a:	b082      	sub	sp, #8
10052f6c:	af00      	add	r7, sp, #0
10052f6e:	0002      	movs	r2, r0
10052f70:	1dfb      	adds	r3, r7, #7
10052f72:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10052f74:	1dfb      	adds	r3, r7, #7
10052f76:	781b      	ldrb	r3, [r3, #0]
10052f78:	225c      	movs	r2, #92	@ 0x5c
10052f7a:	4353      	muls	r3, r2
10052f7c:	4a09      	ldr	r2, [pc, #36]	@ (10052fa4 <LL_RADIO_Encryption_Enable+0x3c>)
10052f7e:	4694      	mov	ip, r2
10052f80:	4463      	add	r3, ip
10052f82:	681a      	ldr	r2, [r3, #0]
10052f84:	1dfb      	adds	r3, r7, #7
10052f86:	781b      	ldrb	r3, [r3, #0]
10052f88:	215c      	movs	r1, #92	@ 0x5c
10052f8a:	434b      	muls	r3, r1
10052f8c:	4905      	ldr	r1, [pc, #20]	@ (10052fa4 <LL_RADIO_Encryption_Enable+0x3c>)
10052f8e:	468c      	mov	ip, r1
10052f90:	4463      	add	r3, ip
10052f92:	2180      	movs	r1, #128	@ 0x80
10052f94:	0389      	lsls	r1, r1, #14
10052f96:	430a      	orrs	r2, r1
10052f98:	601a      	str	r2, [r3, #0]
}
10052f9a:	46c0      	nop			@ (mov r8, r8)
10052f9c:	46bd      	mov	sp, r7
10052f9e:	b002      	add	sp, #8
10052fa0:	bd80      	pop	{r7, pc}
10052fa2:	46c0      	nop			@ (mov r8, r8)
10052fa4:	200000dc 	.word	0x200000dc

10052fa8 <LL_RADIO_Encryption_Disable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Disable(uint8_t stateMachineNo)
{
10052fa8:	b580      	push	{r7, lr}
10052faa:	b082      	sub	sp, #8
10052fac:	af00      	add	r7, sp, #0
10052fae:	0002      	movs	r2, r0
10052fb0:	1dfb      	adds	r3, r7, #7
10052fb2:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10052fb4:	1dfb      	adds	r3, r7, #7
10052fb6:	781b      	ldrb	r3, [r3, #0]
10052fb8:	225c      	movs	r2, #92	@ 0x5c
10052fba:	4353      	muls	r3, r2
10052fbc:	4a08      	ldr	r2, [pc, #32]	@ (10052fe0 <LL_RADIO_Encryption_Disable+0x38>)
10052fbe:	4694      	mov	ip, r2
10052fc0:	4463      	add	r3, ip
10052fc2:	681a      	ldr	r2, [r3, #0]
10052fc4:	1dfb      	adds	r3, r7, #7
10052fc6:	781b      	ldrb	r3, [r3, #0]
10052fc8:	215c      	movs	r1, #92	@ 0x5c
10052fca:	434b      	muls	r3, r1
10052fcc:	4904      	ldr	r1, [pc, #16]	@ (10052fe0 <LL_RADIO_Encryption_Disable+0x38>)
10052fce:	468c      	mov	ip, r1
10052fd0:	4463      	add	r3, ip
10052fd2:	4904      	ldr	r1, [pc, #16]	@ (10052fe4 <LL_RADIO_Encryption_Disable+0x3c>)
10052fd4:	400a      	ands	r2, r1
10052fd6:	601a      	str	r2, [r3, #0]
}
10052fd8:	46c0      	nop			@ (mov r8, r8)
10052fda:	46bd      	mov	sp, r7
10052fdc:	b002      	add	sp, #8
10052fde:	bd80      	pop	{r7, pc}
10052fe0:	200000dc 	.word	0x200000dc
10052fe4:	ffdfffff 	.word	0xffdfffff

10052fe8 <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10052fe8:	b580      	push	{r7, lr}
10052fea:	b082      	sub	sp, #8
10052fec:	af00      	add	r7, sp, #0
10052fee:	0002      	movs	r2, r0
10052ff0:	6039      	str	r1, [r7, #0]
10052ff2:	1dfb      	adds	r3, r7, #7
10052ff4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10052ff6:	1dfb      	adds	r3, r7, #7
10052ff8:	781b      	ldrb	r3, [r3, #0]
10052ffa:	225c      	movs	r2, #92	@ 0x5c
10052ffc:	4353      	muls	r3, r2
10052ffe:	4a0c      	ldr	r2, [pc, #48]	@ (10053030 <LL_RADIO_SetTransmissionPhy+0x48>)
10053000:	4694      	mov	ip, r2
10053002:	4463      	add	r3, ip
10053004:	681b      	ldr	r3, [r3, #0]
10053006:	4a0b      	ldr	r2, [pc, #44]	@ (10053034 <LL_RADIO_SetTransmissionPhy+0x4c>)
10053008:	4013      	ands	r3, r2
1005300a:	0019      	movs	r1, r3
1005300c:	683b      	ldr	r3, [r7, #0]
1005300e:	061a      	lsls	r2, r3, #24
10053010:	23e0      	movs	r3, #224	@ 0xe0
10053012:	04db      	lsls	r3, r3, #19
10053014:	401a      	ands	r2, r3
10053016:	1dfb      	adds	r3, r7, #7
10053018:	781b      	ldrb	r3, [r3, #0]
1005301a:	205c      	movs	r0, #92	@ 0x5c
1005301c:	4343      	muls	r3, r0
1005301e:	4804      	ldr	r0, [pc, #16]	@ (10053030 <LL_RADIO_SetTransmissionPhy+0x48>)
10053020:	4684      	mov	ip, r0
10053022:	4463      	add	r3, ip
10053024:	430a      	orrs	r2, r1
10053026:	601a      	str	r2, [r3, #0]
}
10053028:	46c0      	nop			@ (mov r8, r8)
1005302a:	46bd      	mov	sp, r7
1005302c:	b002      	add	sp, #8
1005302e:	bd80      	pop	{r7, pc}
10053030:	200000dc 	.word	0x200000dc
10053034:	f8ffffff 	.word	0xf8ffffff

10053038 <LL_RADIO_GetTransmissionPhy>:
  * @rmtoll WORD0          TXPHY       LL_RADIO_GetTransmissionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetTransmissionPhy(uint8_t stateMachineNo)
{
10053038:	b580      	push	{r7, lr}
1005303a:	b082      	sub	sp, #8
1005303c:	af00      	add	r7, sp, #0
1005303e:	0002      	movs	r2, r0
10053040:	1dfb      	adds	r3, r7, #7
10053042:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY) >> STATEMACH_WORD0_TXPHY_Pos);
10053044:	1dfb      	adds	r3, r7, #7
10053046:	781b      	ldrb	r3, [r3, #0]
10053048:	225c      	movs	r2, #92	@ 0x5c
1005304a:	4353      	muls	r3, r2
1005304c:	4a05      	ldr	r2, [pc, #20]	@ (10053064 <LL_RADIO_GetTransmissionPhy+0x2c>)
1005304e:	4694      	mov	ip, r2
10053050:	4463      	add	r3, ip
10053052:	681b      	ldr	r3, [r3, #0]
10053054:	0e1b      	lsrs	r3, r3, #24
10053056:	2207      	movs	r2, #7
10053058:	4013      	ands	r3, r2
}
1005305a:	0018      	movs	r0, r3
1005305c:	46bd      	mov	sp, r7
1005305e:	b002      	add	sp, #8
10053060:	bd80      	pop	{r7, pc}
10053062:	46c0      	nop			@ (mov r8, r8)
10053064:	200000dc 	.word	0x200000dc

10053068 <LL_RADIO_SetCTEDisable>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEDisable(uint8_t stateMachineNo, uint32_t value)
{
10053068:	b580      	push	{r7, lr}
1005306a:	b082      	sub	sp, #8
1005306c:	af00      	add	r7, sp, #0
1005306e:	0002      	movs	r2, r0
10053070:	6039      	str	r1, [r7, #0]
10053072:	1dfb      	adds	r3, r7, #7
10053074:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_CTEDISABLE, value);
10053076:	1dfb      	adds	r3, r7, #7
10053078:	781b      	ldrb	r3, [r3, #0]
1005307a:	225c      	movs	r2, #92	@ 0x5c
1005307c:	4353      	muls	r3, r2
1005307e:	4a0c      	ldr	r2, [pc, #48]	@ (100530b0 <LL_RADIO_SetCTEDisable+0x48>)
10053080:	4694      	mov	ip, r2
10053082:	4463      	add	r3, ip
10053084:	681b      	ldr	r3, [r3, #0]
10053086:	4a0b      	ldr	r2, [pc, #44]	@ (100530b4 <LL_RADIO_SetCTEDisable+0x4c>)
10053088:	4013      	ands	r3, r2
1005308a:	0019      	movs	r1, r3
1005308c:	683b      	ldr	r3, [r7, #0]
1005308e:	06da      	lsls	r2, r3, #27
10053090:	2380      	movs	r3, #128	@ 0x80
10053092:	051b      	lsls	r3, r3, #20
10053094:	401a      	ands	r2, r3
10053096:	1dfb      	adds	r3, r7, #7
10053098:	781b      	ldrb	r3, [r3, #0]
1005309a:	205c      	movs	r0, #92	@ 0x5c
1005309c:	4343      	muls	r3, r0
1005309e:	4804      	ldr	r0, [pc, #16]	@ (100530b0 <LL_RADIO_SetCTEDisable+0x48>)
100530a0:	4684      	mov	ip, r0
100530a2:	4463      	add	r3, ip
100530a4:	430a      	orrs	r2, r1
100530a6:	601a      	str	r2, [r3, #0]
}
100530a8:	46c0      	nop			@ (mov r8, r8)
100530aa:	46bd      	mov	sp, r7
100530ac:	b002      	add	sp, #8
100530ae:	bd80      	pop	{r7, pc}
100530b0:	200000dc 	.word	0x200000dc
100530b4:	f7ffffff 	.word	0xf7ffffff

100530b8 <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
100530b8:	b580      	push	{r7, lr}
100530ba:	b082      	sub	sp, #8
100530bc:	af00      	add	r7, sp, #0
100530be:	0002      	movs	r2, r0
100530c0:	6039      	str	r1, [r7, #0]
100530c2:	1dfb      	adds	r3, r7, #7
100530c4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
100530c6:	1dfb      	adds	r3, r7, #7
100530c8:	781b      	ldrb	r3, [r3, #0]
100530ca:	225c      	movs	r2, #92	@ 0x5c
100530cc:	4353      	muls	r3, r2
100530ce:	4a0c      	ldr	r2, [pc, #48]	@ (10053100 <LL_RADIO_SetReceptionPhy+0x48>)
100530d0:	4694      	mov	ip, r2
100530d2:	4463      	add	r3, ip
100530d4:	681b      	ldr	r3, [r3, #0]
100530d6:	4a0b      	ldr	r2, [pc, #44]	@ (10053104 <LL_RADIO_SetReceptionPhy+0x4c>)
100530d8:	4013      	ands	r3, r2
100530da:	0019      	movs	r1, r3
100530dc:	683b      	ldr	r3, [r7, #0]
100530de:	071a      	lsls	r2, r3, #28
100530e0:	23e0      	movs	r3, #224	@ 0xe0
100530e2:	05db      	lsls	r3, r3, #23
100530e4:	401a      	ands	r2, r3
100530e6:	1dfb      	adds	r3, r7, #7
100530e8:	781b      	ldrb	r3, [r3, #0]
100530ea:	205c      	movs	r0, #92	@ 0x5c
100530ec:	4343      	muls	r3, r0
100530ee:	4804      	ldr	r0, [pc, #16]	@ (10053100 <LL_RADIO_SetReceptionPhy+0x48>)
100530f0:	4684      	mov	ip, r0
100530f2:	4463      	add	r3, ip
100530f4:	430a      	orrs	r2, r1
100530f6:	601a      	str	r2, [r3, #0]
}
100530f8:	46c0      	nop			@ (mov r8, r8)
100530fa:	46bd      	mov	sp, r7
100530fc:	b002      	add	sp, #8
100530fe:	bd80      	pop	{r7, pc}
10053100:	200000dc 	.word	0x200000dc
10053104:	8fffffff 	.word	0x8fffffff

10053108 <LL_RADIO_GetReceptionPhy>:
  * @rmtoll WORD0          RXPHY       LL_RADIO_GetReceptionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetReceptionPhy(uint8_t stateMachineNo)
{
10053108:	b580      	push	{r7, lr}
1005310a:	b082      	sub	sp, #8
1005310c:	af00      	add	r7, sp, #0
1005310e:	0002      	movs	r2, r0
10053110:	1dfb      	adds	r3, r7, #7
10053112:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY) >> STATEMACH_WORD0_RXPHY_Pos);
10053114:	1dfb      	adds	r3, r7, #7
10053116:	781b      	ldrb	r3, [r3, #0]
10053118:	225c      	movs	r2, #92	@ 0x5c
1005311a:	4353      	muls	r3, r2
1005311c:	4a05      	ldr	r2, [pc, #20]	@ (10053134 <LL_RADIO_GetReceptionPhy+0x2c>)
1005311e:	4694      	mov	ip, r2
10053120:	4463      	add	r3, ip
10053122:	681b      	ldr	r3, [r3, #0]
10053124:	0f1b      	lsrs	r3, r3, #28
10053126:	2207      	movs	r2, #7
10053128:	4013      	ands	r3, r2
}
1005312a:	0018      	movs	r0, r3
1005312c:	46bd      	mov	sp, r7
1005312e:	b002      	add	sp, #8
10053130:	bd80      	pop	{r7, pc}
10053132:	46c0      	nop			@ (mov r8, r8)
10053134:	200000dc 	.word	0x200000dc

10053138 <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10053138:	b580      	push	{r7, lr}
1005313a:	b082      	sub	sp, #8
1005313c:	af00      	add	r7, sp, #0
1005313e:	0002      	movs	r2, r0
10053140:	6039      	str	r1, [r7, #0]
10053142:	1dfb      	adds	r3, r7, #7
10053144:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10053146:	1dfb      	adds	r3, r7, #7
10053148:	781b      	ldrb	r3, [r3, #0]
1005314a:	225c      	movs	r2, #92	@ 0x5c
1005314c:	4353      	muls	r3, r2
1005314e:	4a08      	ldr	r2, [pc, #32]	@ (10053170 <LL_RADIO_SetTxPoint+0x38>)
10053150:	4694      	mov	ip, r2
10053152:	4463      	add	r3, ip
10053154:	685b      	ldr	r3, [r3, #4]
10053156:	1dfb      	adds	r3, r7, #7
10053158:	781b      	ldrb	r3, [r3, #0]
1005315a:	225c      	movs	r2, #92	@ 0x5c
1005315c:	4353      	muls	r3, r2
1005315e:	4a04      	ldr	r2, [pc, #16]	@ (10053170 <LL_RADIO_SetTxPoint+0x38>)
10053160:	4694      	mov	ip, r2
10053162:	4463      	add	r3, ip
10053164:	683a      	ldr	r2, [r7, #0]
10053166:	605a      	str	r2, [r3, #4]
}
10053168:	46c0      	nop			@ (mov r8, r8)
1005316a:	46bd      	mov	sp, r7
1005316c:	b002      	add	sp, #8
1005316e:	bd80      	pop	{r7, pc}
10053170:	200000dc 	.word	0x200000dc

10053174 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
10053174:	b580      	push	{r7, lr}
10053176:	b082      	sub	sp, #8
10053178:	af00      	add	r7, sp, #0
1005317a:	0002      	movs	r2, r0
1005317c:	6039      	str	r1, [r7, #0]
1005317e:	1dfb      	adds	r3, r7, #7
10053180:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
10053182:	1dfb      	adds	r3, r7, #7
10053184:	781b      	ldrb	r3, [r3, #0]
10053186:	225c      	movs	r2, #92	@ 0x5c
10053188:	4353      	muls	r3, r2
1005318a:	4a08      	ldr	r2, [pc, #32]	@ (100531ac <LL_RADIO_SetRcvPoint+0x38>)
1005318c:	4694      	mov	ip, r2
1005318e:	4463      	add	r3, ip
10053190:	689b      	ldr	r3, [r3, #8]
10053192:	1dfb      	adds	r3, r7, #7
10053194:	781b      	ldrb	r3, [r3, #0]
10053196:	225c      	movs	r2, #92	@ 0x5c
10053198:	4353      	muls	r3, r2
1005319a:	4a04      	ldr	r2, [pc, #16]	@ (100531ac <LL_RADIO_SetRcvPoint+0x38>)
1005319c:	4694      	mov	ip, r2
1005319e:	4463      	add	r3, ip
100531a0:	683a      	ldr	r2, [r7, #0]
100531a2:	609a      	str	r2, [r3, #8]
}
100531a4:	46c0      	nop			@ (mov r8, r8)
100531a6:	46bd      	mov	sp, r7
100531a8:	b002      	add	sp, #8
100531aa:	bd80      	pop	{r7, pc}
100531ac:	200000dc 	.word	0x200000dc

100531b0 <LL_RADIO_SetPacketCounterTx_31_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_31_0(uint8_t stateMachineNo, uint32_t value)
{
100531b0:	b580      	push	{r7, lr}
100531b2:	b082      	sub	sp, #8
100531b4:	af00      	add	r7, sp, #0
100531b6:	0002      	movs	r2, r0
100531b8:	6039      	str	r1, [r7, #0]
100531ba:	1dfb      	adds	r3, r7, #7
100531bc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD6, STATEMACH_WORD6_PCNTTX_31_0, value);
100531be:	1dfb      	adds	r3, r7, #7
100531c0:	781b      	ldrb	r3, [r3, #0]
100531c2:	225c      	movs	r2, #92	@ 0x5c
100531c4:	4353      	muls	r3, r2
100531c6:	4a08      	ldr	r2, [pc, #32]	@ (100531e8 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
100531c8:	4694      	mov	ip, r2
100531ca:	4463      	add	r3, ip
100531cc:	699b      	ldr	r3, [r3, #24]
100531ce:	1dfb      	adds	r3, r7, #7
100531d0:	781b      	ldrb	r3, [r3, #0]
100531d2:	225c      	movs	r2, #92	@ 0x5c
100531d4:	4353      	muls	r3, r2
100531d6:	4a04      	ldr	r2, [pc, #16]	@ (100531e8 <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
100531d8:	4694      	mov	ip, r2
100531da:	4463      	add	r3, ip
100531dc:	683a      	ldr	r2, [r7, #0]
100531de:	619a      	str	r2, [r3, #24]
}
100531e0:	46c0      	nop			@ (mov r8, r8)
100531e2:	46bd      	mov	sp, r7
100531e4:	b002      	add	sp, #8
100531e6:	bd80      	pop	{r7, pc}
100531e8:	200000dc 	.word	0x200000dc

100531ec <LL_RADIO_SetPacketCounterTx_39_32>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_39_32(uint8_t stateMachineNo, uint32_t value)
{
100531ec:	b580      	push	{r7, lr}
100531ee:	b082      	sub	sp, #8
100531f0:	af00      	add	r7, sp, #0
100531f2:	0002      	movs	r2, r0
100531f4:	6039      	str	r1, [r7, #0]
100531f6:	1dfb      	adds	r3, r7, #7
100531f8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTTX_39_32, value);
100531fa:	1dfb      	adds	r3, r7, #7
100531fc:	781b      	ldrb	r3, [r3, #0]
100531fe:	225c      	movs	r2, #92	@ 0x5c
10053200:	4353      	muls	r3, r2
10053202:	4a0b      	ldr	r2, [pc, #44]	@ (10053230 <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10053204:	4694      	mov	ip, r2
10053206:	4463      	add	r3, ip
10053208:	69db      	ldr	r3, [r3, #28]
1005320a:	22ff      	movs	r2, #255	@ 0xff
1005320c:	4393      	bics	r3, r2
1005320e:	0019      	movs	r1, r3
10053210:	683b      	ldr	r3, [r7, #0]
10053212:	22ff      	movs	r2, #255	@ 0xff
10053214:	401a      	ands	r2, r3
10053216:	1dfb      	adds	r3, r7, #7
10053218:	781b      	ldrb	r3, [r3, #0]
1005321a:	205c      	movs	r0, #92	@ 0x5c
1005321c:	4343      	muls	r3, r0
1005321e:	4804      	ldr	r0, [pc, #16]	@ (10053230 <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10053220:	4684      	mov	ip, r0
10053222:	4463      	add	r3, ip
10053224:	430a      	orrs	r2, r1
10053226:	61da      	str	r2, [r3, #28]
}
10053228:	46c0      	nop			@ (mov r8, r8)
1005322a:	46bd      	mov	sp, r7
1005322c:	b002      	add	sp, #8
1005322e:	bd80      	pop	{r7, pc}
10053230:	200000dc 	.word	0x200000dc

10053234 <LL_RADIO_GetPacketCounterTx_39_32>:
  * @rmtoll WORD7          PCNTTX_39_32       LL_RADIO_GetPacketCounterTx_39_32
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterTx_39_32(uint8_t stateMachineNo)
{
10053234:	b580      	push	{r7, lr}
10053236:	b082      	sub	sp, #8
10053238:	af00      	add	r7, sp, #0
1005323a:	0002      	movs	r2, r0
1005323c:	1dfb      	adds	r3, r7, #7
1005323e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10053240:	1dfb      	adds	r3, r7, #7
10053242:	781b      	ldrb	r3, [r3, #0]
10053244:	225c      	movs	r2, #92	@ 0x5c
10053246:	4353      	muls	r3, r2
10053248:	4a04      	ldr	r2, [pc, #16]	@ (1005325c <LL_RADIO_GetPacketCounterTx_39_32+0x28>)
1005324a:	4694      	mov	ip, r2
1005324c:	4463      	add	r3, ip
1005324e:	69db      	ldr	r3, [r3, #28]
10053250:	22ff      	movs	r2, #255	@ 0xff
10053252:	4013      	ands	r3, r2
                             STATEMACH_WORD7_PCNTTX_39_32) >> STATEMACH_WORD7_PCNTTX_39_32_Pos);
}
10053254:	0018      	movs	r0, r3
10053256:	46bd      	mov	sp, r7
10053258:	b002      	add	sp, #8
1005325a:	bd80      	pop	{r7, pc}
1005325c:	200000dc 	.word	0x200000dc

10053260 <LL_RADIO_SetPacketCounterRx_23_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_23_0(uint8_t stateMachineNo, uint32_t value)
{
10053260:	b580      	push	{r7, lr}
10053262:	b082      	sub	sp, #8
10053264:	af00      	add	r7, sp, #0
10053266:	0002      	movs	r2, r0
10053268:	6039      	str	r1, [r7, #0]
1005326a:	1dfb      	adds	r3, r7, #7
1005326c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTRCV_23_0, value);
1005326e:	1dfb      	adds	r3, r7, #7
10053270:	781b      	ldrb	r3, [r3, #0]
10053272:	225c      	movs	r2, #92	@ 0x5c
10053274:	4353      	muls	r3, r2
10053276:	4a0b      	ldr	r2, [pc, #44]	@ (100532a4 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10053278:	4694      	mov	ip, r2
1005327a:	4463      	add	r3, ip
1005327c:	69db      	ldr	r3, [r3, #28]
1005327e:	22ff      	movs	r2, #255	@ 0xff
10053280:	4013      	ands	r3, r2
10053282:	0019      	movs	r1, r3
10053284:	683b      	ldr	r3, [r7, #0]
10053286:	021a      	lsls	r2, r3, #8
10053288:	1dfb      	adds	r3, r7, #7
1005328a:	781b      	ldrb	r3, [r3, #0]
1005328c:	205c      	movs	r0, #92	@ 0x5c
1005328e:	4343      	muls	r3, r0
10053290:	4804      	ldr	r0, [pc, #16]	@ (100532a4 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10053292:	4684      	mov	ip, r0
10053294:	4463      	add	r3, ip
10053296:	430a      	orrs	r2, r1
10053298:	61da      	str	r2, [r3, #28]
}
1005329a:	46c0      	nop			@ (mov r8, r8)
1005329c:	46bd      	mov	sp, r7
1005329e:	b002      	add	sp, #8
100532a0:	bd80      	pop	{r7, pc}
100532a2:	46c0      	nop			@ (mov r8, r8)
100532a4:	200000dc 	.word	0x200000dc

100532a8 <LL_RADIO_GetPacketCounterRx_23_0>:
  * @rmtoll WORD7          PCNTRCV_23_0       LL_RADIO_GetPacketCounterRx_23_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_23_0(uint8_t stateMachineNo)
{
100532a8:	b580      	push	{r7, lr}
100532aa:	b082      	sub	sp, #8
100532ac:	af00      	add	r7, sp, #0
100532ae:	0002      	movs	r2, r0
100532b0:	1dfb      	adds	r3, r7, #7
100532b2:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
100532b4:	1dfb      	adds	r3, r7, #7
100532b6:	781b      	ldrb	r3, [r3, #0]
100532b8:	225c      	movs	r2, #92	@ 0x5c
100532ba:	4353      	muls	r3, r2
100532bc:	4a05      	ldr	r2, [pc, #20]	@ (100532d4 <LL_RADIO_GetPacketCounterRx_23_0+0x2c>)
100532be:	4694      	mov	ip, r2
100532c0:	4463      	add	r3, ip
100532c2:	69db      	ldr	r3, [r3, #28]
100532c4:	0a1b      	lsrs	r3, r3, #8
100532c6:	021b      	lsls	r3, r3, #8
100532c8:	0a1b      	lsrs	r3, r3, #8
                             STATEMACH_WORD7_PCNTRCV_23_0) >> STATEMACH_WORD7_PCNTRCV_23_0_Pos);
}
100532ca:	0018      	movs	r0, r3
100532cc:	46bd      	mov	sp, r7
100532ce:	b002      	add	sp, #8
100532d0:	bd80      	pop	{r7, pc}
100532d2:	46c0      	nop			@ (mov r8, r8)
100532d4:	200000dc 	.word	0x200000dc

100532d8 <LL_RADIO_SetPacketCounterRx_39_24>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_39_24(uint8_t stateMachineNo, uint32_t value)
{
100532d8:	b580      	push	{r7, lr}
100532da:	b082      	sub	sp, #8
100532dc:	af00      	add	r7, sp, #0
100532de:	0002      	movs	r2, r0
100532e0:	6039      	str	r1, [r7, #0]
100532e2:	1dfb      	adds	r3, r7, #7
100532e4:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_PCNTRCV_39_24, value);
100532e6:	1dfb      	adds	r3, r7, #7
100532e8:	781b      	ldrb	r3, [r3, #0]
100532ea:	225c      	movs	r2, #92	@ 0x5c
100532ec:	4353      	muls	r3, r2
100532ee:	4a0b      	ldr	r2, [pc, #44]	@ (1005331c <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
100532f0:	4694      	mov	ip, r2
100532f2:	4463      	add	r3, ip
100532f4:	6a1b      	ldr	r3, [r3, #32]
100532f6:	0c1b      	lsrs	r3, r3, #16
100532f8:	0419      	lsls	r1, r3, #16
100532fa:	683b      	ldr	r3, [r7, #0]
100532fc:	041b      	lsls	r3, r3, #16
100532fe:	0c1a      	lsrs	r2, r3, #16
10053300:	1dfb      	adds	r3, r7, #7
10053302:	781b      	ldrb	r3, [r3, #0]
10053304:	205c      	movs	r0, #92	@ 0x5c
10053306:	4343      	muls	r3, r0
10053308:	4804      	ldr	r0, [pc, #16]	@ (1005331c <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
1005330a:	4684      	mov	ip, r0
1005330c:	4463      	add	r3, ip
1005330e:	430a      	orrs	r2, r1
10053310:	621a      	str	r2, [r3, #32]
}
10053312:	46c0      	nop			@ (mov r8, r8)
10053314:	46bd      	mov	sp, r7
10053316:	b002      	add	sp, #8
10053318:	bd80      	pop	{r7, pc}
1005331a:	46c0      	nop			@ (mov r8, r8)
1005331c:	200000dc 	.word	0x200000dc

10053320 <LL_RADIO_GetPacketCounterRx_39_24>:
  * @rmtoll WORD8          PCNTRCV_39_24       LL_RADIO_GetPacketCounterRx_39_24
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_39_24(uint8_t stateMachineNo)
{
10053320:	b580      	push	{r7, lr}
10053322:	b082      	sub	sp, #8
10053324:	af00      	add	r7, sp, #0
10053326:	0002      	movs	r2, r0
10053328:	1dfb      	adds	r3, r7, #7
1005332a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD8,
1005332c:	1dfb      	adds	r3, r7, #7
1005332e:	781b      	ldrb	r3, [r3, #0]
10053330:	225c      	movs	r2, #92	@ 0x5c
10053332:	4353      	muls	r3, r2
10053334:	4a04      	ldr	r2, [pc, #16]	@ (10053348 <LL_RADIO_GetPacketCounterRx_39_24+0x28>)
10053336:	4694      	mov	ip, r2
10053338:	4463      	add	r3, ip
1005333a:	6a1b      	ldr	r3, [r3, #32]
1005333c:	041b      	lsls	r3, r3, #16
1005333e:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORD8_PCNTRCV_39_24) >> STATEMACH_WORD8_PCNTRCV_39_24_Pos);
}
10053340:	0018      	movs	r0, r3
10053342:	46bd      	mov	sp, r7
10053344:	b002      	add	sp, #8
10053346:	bd80      	pop	{r7, pc}
10053348:	200000dc 	.word	0x200000dc

1005334c <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(uint8_t stateMachineNo)
{
1005334c:	b580      	push	{r7, lr}
1005334e:	b082      	sub	sp, #8
10053350:	af00      	add	r7, sp, #0
10053352:	0002      	movs	r2, r0
10053354:	1dfb      	adds	r3, r7, #7
10053356:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10053358:	1dfb      	adds	r3, r7, #7
1005335a:	781b      	ldrb	r3, [r3, #0]
1005335c:	225c      	movs	r2, #92	@ 0x5c
1005335e:	4353      	muls	r3, r2
10053360:	4a09      	ldr	r2, [pc, #36]	@ (10053388 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
10053362:	4694      	mov	ip, r2
10053364:	4463      	add	r3, ip
10053366:	6a1a      	ldr	r2, [r3, #32]
10053368:	1dfb      	adds	r3, r7, #7
1005336a:	781b      	ldrb	r3, [r3, #0]
1005336c:	215c      	movs	r1, #92	@ 0x5c
1005336e:	434b      	muls	r3, r1
10053370:	4905      	ldr	r1, [pc, #20]	@ (10053388 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
10053372:	468c      	mov	ip, r1
10053374:	4463      	add	r3, ip
10053376:	2180      	movs	r1, #128	@ 0x80
10053378:	0589      	lsls	r1, r1, #22
1005337a:	430a      	orrs	r2, r1
1005337c:	621a      	str	r2, [r3, #32]
}
1005337e:	46c0      	nop			@ (mov r8, r8)
10053380:	46bd      	mov	sp, r7
10053382:	b002      	add	sp, #8
10053384:	bd80      	pop	{r7, pc}
10053386:	46c0      	nop			@ (mov r8, r8)
10053388:	200000dc 	.word	0x200000dc

1005338c <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(uint8_t stateMachineNo)
{
1005338c:	b580      	push	{r7, lr}
1005338e:	b082      	sub	sp, #8
10053390:	af00      	add	r7, sp, #0
10053392:	0002      	movs	r2, r0
10053394:	1dfb      	adds	r3, r7, #7
10053396:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
10053398:	1dfb      	adds	r3, r7, #7
1005339a:	781b      	ldrb	r3, [r3, #0]
1005339c:	225c      	movs	r2, #92	@ 0x5c
1005339e:	4353      	muls	r3, r2
100533a0:	4a08      	ldr	r2, [pc, #32]	@ (100533c4 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
100533a2:	4694      	mov	ip, r2
100533a4:	4463      	add	r3, ip
100533a6:	6a1a      	ldr	r2, [r3, #32]
100533a8:	1dfb      	adds	r3, r7, #7
100533aa:	781b      	ldrb	r3, [r3, #0]
100533ac:	215c      	movs	r1, #92	@ 0x5c
100533ae:	434b      	muls	r3, r1
100533b0:	4904      	ldr	r1, [pc, #16]	@ (100533c4 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
100533b2:	468c      	mov	ip, r1
100533b4:	4463      	add	r3, ip
100533b6:	4904      	ldr	r1, [pc, #16]	@ (100533c8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x3c>)
100533b8:	400a      	ands	r2, r1
100533ba:	621a      	str	r2, [r3, #32]
}
100533bc:	46c0      	nop			@ (mov r8, r8)
100533be:	46bd      	mov	sp, r7
100533c0:	b002      	add	sp, #8
100533c2:	bd80      	pop	{r7, pc}
100533c4:	200000dc 	.word	0x200000dc
100533c8:	dfffffff 	.word	0xdfffffff

100533cc <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
100533cc:	b580      	push	{r7, lr}
100533ce:	b082      	sub	sp, #8
100533d0:	af00      	add	r7, sp, #0
100533d2:	0002      	movs	r2, r0
100533d4:	6039      	str	r1, [r7, #0]
100533d6:	1dfb      	adds	r3, r7, #7
100533d8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
100533da:	1dfb      	adds	r3, r7, #7
100533dc:	781b      	ldrb	r3, [r3, #0]
100533de:	225c      	movs	r2, #92	@ 0x5c
100533e0:	4353      	muls	r3, r2
100533e2:	4a08      	ldr	r2, [pc, #32]	@ (10053404 <LL_RADIO_SetAccessAddress+0x38>)
100533e4:	4694      	mov	ip, r2
100533e6:	4463      	add	r3, ip
100533e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100533ea:	1dfb      	adds	r3, r7, #7
100533ec:	781b      	ldrb	r3, [r3, #0]
100533ee:	225c      	movs	r2, #92	@ 0x5c
100533f0:	4353      	muls	r3, r2
100533f2:	4a04      	ldr	r2, [pc, #16]	@ (10053404 <LL_RADIO_SetAccessAddress+0x38>)
100533f4:	4694      	mov	ip, r2
100533f6:	4463      	add	r3, ip
100533f8:	683a      	ldr	r2, [r7, #0]
100533fa:	625a      	str	r2, [r3, #36]	@ 0x24
}
100533fc:	46c0      	nop			@ (mov r8, r8)
100533fe:	46bd      	mov	sp, r7
10053400:	b002      	add	sp, #8
10053402:	bd80      	pop	{r7, pc}
10053404:	200000dc 	.word	0x200000dc

10053408 <LL_RADIO_GetAccessAddress>:
  * @rmtoll WORD9          ACCADDR       LL_RADIO_GetAccessAddress
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetAccessAddress(uint8_t stateMachineNo)
{
10053408:	b580      	push	{r7, lr}
1005340a:	b082      	sub	sp, #8
1005340c:	af00      	add	r7, sp, #0
1005340e:	0002      	movs	r2, r0
10053410:	1dfb      	adds	r3, r7, #7
10053412:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD9,
10053414:	1dfb      	adds	r3, r7, #7
10053416:	781b      	ldrb	r3, [r3, #0]
10053418:	225c      	movs	r2, #92	@ 0x5c
1005341a:	4353      	muls	r3, r2
1005341c:	4a03      	ldr	r2, [pc, #12]	@ (1005342c <LL_RADIO_GetAccessAddress+0x24>)
1005341e:	4694      	mov	ip, r2
10053420:	4463      	add	r3, ip
10053422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                             STATEMACH_WORD9_ACCADDR) >> STATEMACH_WORD9_ACCADDR_Pos);
}
10053424:	0018      	movs	r0, r3
10053426:	46bd      	mov	sp, r7
10053428:	b002      	add	sp, #8
1005342a:	bd80      	pop	{r7, pc}
1005342c:	200000dc 	.word	0x200000dc

10053430 <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
10053430:	b580      	push	{r7, lr}
10053432:	b082      	sub	sp, #8
10053434:	af00      	add	r7, sp, #0
10053436:	0002      	movs	r2, r0
10053438:	6039      	str	r1, [r7, #0]
1005343a:	1dfb      	adds	r3, r7, #7
1005343c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
1005343e:	1dfb      	adds	r3, r7, #7
10053440:	781b      	ldrb	r3, [r3, #0]
10053442:	225c      	movs	r2, #92	@ 0x5c
10053444:	4353      	muls	r3, r2
10053446:	4a0b      	ldr	r2, [pc, #44]	@ (10053474 <LL_RADIO_SetCRCInitializationValue+0x44>)
10053448:	4694      	mov	ip, r2
1005344a:	4463      	add	r3, ip
1005344c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1005344e:	0e1b      	lsrs	r3, r3, #24
10053450:	0619      	lsls	r1, r3, #24
10053452:	683b      	ldr	r3, [r7, #0]
10053454:	021b      	lsls	r3, r3, #8
10053456:	0a1a      	lsrs	r2, r3, #8
10053458:	1dfb      	adds	r3, r7, #7
1005345a:	781b      	ldrb	r3, [r3, #0]
1005345c:	205c      	movs	r0, #92	@ 0x5c
1005345e:	4343      	muls	r3, r0
10053460:	4804      	ldr	r0, [pc, #16]	@ (10053474 <LL_RADIO_SetCRCInitializationValue+0x44>)
10053462:	4684      	mov	ip, r0
10053464:	4463      	add	r3, ip
10053466:	430a      	orrs	r2, r1
10053468:	629a      	str	r2, [r3, #40]	@ 0x28
}
1005346a:	46c0      	nop			@ (mov r8, r8)
1005346c:	46bd      	mov	sp, r7
1005346e:	b002      	add	sp, #8
10053470:	bd80      	pop	{r7, pc}
10053472:	46c0      	nop			@ (mov r8, r8)
10053474:	200000dc 	.word	0x200000dc

10053478 <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
10053478:	b580      	push	{r7, lr}
1005347a:	b082      	sub	sp, #8
1005347c:	af00      	add	r7, sp, #0
1005347e:	0002      	movs	r2, r0
10053480:	6039      	str	r1, [r7, #0]
10053482:	1dfb      	adds	r3, r7, #7
10053484:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
10053486:	1dfb      	adds	r3, r7, #7
10053488:	781b      	ldrb	r3, [r3, #0]
1005348a:	225c      	movs	r2, #92	@ 0x5c
1005348c:	4353      	muls	r3, r2
1005348e:	4a0a      	ldr	r2, [pc, #40]	@ (100534b8 <LL_RADIO_SetMaximumReceiveLength+0x40>)
10053490:	4694      	mov	ip, r2
10053492:	4463      	add	r3, ip
10053494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10053496:	021b      	lsls	r3, r3, #8
10053498:	0a19      	lsrs	r1, r3, #8
1005349a:	683b      	ldr	r3, [r7, #0]
1005349c:	061a      	lsls	r2, r3, #24
1005349e:	1dfb      	adds	r3, r7, #7
100534a0:	781b      	ldrb	r3, [r3, #0]
100534a2:	205c      	movs	r0, #92	@ 0x5c
100534a4:	4343      	muls	r3, r0
100534a6:	4804      	ldr	r0, [pc, #16]	@ (100534b8 <LL_RADIO_SetMaximumReceiveLength+0x40>)
100534a8:	4684      	mov	ip, r0
100534aa:	4463      	add	r3, ip
100534ac:	430a      	orrs	r2, r1
100534ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
100534b0:	46c0      	nop			@ (mov r8, r8)
100534b2:	46bd      	mov	sp, r7
100534b4:	b002      	add	sp, #8
100534b6:	bd80      	pop	{r7, pc}
100534b8:	200000dc 	.word	0x200000dc

100534bc <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
100534bc:	b580      	push	{r7, lr}
100534be:	b082      	sub	sp, #8
100534c0:	af00      	add	r7, sp, #0
100534c2:	0002      	movs	r2, r0
100534c4:	6039      	str	r1, [r7, #0]
100534c6:	1dfb      	adds	r3, r7, #7
100534c8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
100534ca:	1dfb      	adds	r3, r7, #7
100534cc:	781b      	ldrb	r3, [r3, #0]
100534ce:	225c      	movs	r2, #92	@ 0x5c
100534d0:	4353      	muls	r3, r2
100534d2:	4a0b      	ldr	r2, [pc, #44]	@ (10053500 <LL_RADIO_SetPAPower+0x44>)
100534d4:	4694      	mov	ip, r2
100534d6:	4463      	add	r3, ip
100534d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100534da:	221f      	movs	r2, #31
100534dc:	4393      	bics	r3, r2
100534de:	0019      	movs	r1, r3
100534e0:	683b      	ldr	r3, [r7, #0]
100534e2:	221f      	movs	r2, #31
100534e4:	401a      	ands	r2, r3
100534e6:	1dfb      	adds	r3, r7, #7
100534e8:	781b      	ldrb	r3, [r3, #0]
100534ea:	205c      	movs	r0, #92	@ 0x5c
100534ec:	4343      	muls	r3, r0
100534ee:	4804      	ldr	r0, [pc, #16]	@ (10053500 <LL_RADIO_SetPAPower+0x44>)
100534f0:	4684      	mov	ip, r0
100534f2:	4463      	add	r3, ip
100534f4:	430a      	orrs	r2, r1
100534f6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100534f8:	46c0      	nop			@ (mov r8, r8)
100534fa:	46bd      	mov	sp, r7
100534fc:	b002      	add	sp, #8
100534fe:	bd80      	pop	{r7, pc}
10053500:	200000dc 	.word	0x200000dc

10053504 <LL_RADIO_GetPAPower>:
  * @rmtoll WORDB          PAPOWER       LL_RADIO_GetPAPower
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPAPower(uint8_t stateMachineNo)
{
10053504:	b580      	push	{r7, lr}
10053506:	b082      	sub	sp, #8
10053508:	af00      	add	r7, sp, #0
1005350a:	0002      	movs	r2, r0
1005350c:	1dfb      	adds	r3, r7, #7
1005350e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10053510:	1dfb      	adds	r3, r7, #7
10053512:	781b      	ldrb	r3, [r3, #0]
10053514:	225c      	movs	r2, #92	@ 0x5c
10053516:	4353      	muls	r3, r2
10053518:	4a04      	ldr	r2, [pc, #16]	@ (1005352c <LL_RADIO_GetPAPower+0x28>)
1005351a:	4694      	mov	ip, r2
1005351c:	4463      	add	r3, ip
1005351e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053520:	221f      	movs	r2, #31
10053522:	4013      	ands	r3, r2
                             STATEMACH_WORDB_PAPOWER) >> STATEMACH_WORDB_PAPOWER_Pos);
}
10053524:	0018      	movs	r0, r3
10053526:	46bd      	mov	sp, r7
10053528:	b002      	add	sp, #8
1005352a:	bd80      	pop	{r7, pc}
1005352c:	200000dc 	.word	0x200000dc

10053530 <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10053530:	b580      	push	{r7, lr}
10053532:	b082      	sub	sp, #8
10053534:	af00      	add	r7, sp, #0
10053536:	0002      	movs	r2, r0
10053538:	6039      	str	r1, [r7, #0]
1005353a:	1dfb      	adds	r3, r7, #7
1005353c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
1005353e:	1dfb      	adds	r3, r7, #7
10053540:	781b      	ldrb	r3, [r3, #0]
10053542:	225c      	movs	r2, #92	@ 0x5c
10053544:	4353      	muls	r3, r2
10053546:	4a0c      	ldr	r2, [pc, #48]	@ (10053578 <LL_RADIO_SetHopIncrement+0x48>)
10053548:	4694      	mov	ip, r2
1005354a:	4463      	add	r3, ip
1005354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1005354e:	4a0b      	ldr	r2, [pc, #44]	@ (1005357c <LL_RADIO_SetHopIncrement+0x4c>)
10053550:	4013      	ands	r3, r2
10053552:	0019      	movs	r1, r3
10053554:	683b      	ldr	r3, [r7, #0]
10053556:	021a      	lsls	r2, r3, #8
10053558:	23fc      	movs	r3, #252	@ 0xfc
1005355a:	019b      	lsls	r3, r3, #6
1005355c:	401a      	ands	r2, r3
1005355e:	1dfb      	adds	r3, r7, #7
10053560:	781b      	ldrb	r3, [r3, #0]
10053562:	205c      	movs	r0, #92	@ 0x5c
10053564:	4343      	muls	r3, r0
10053566:	4804      	ldr	r0, [pc, #16]	@ (10053578 <LL_RADIO_SetHopIncrement+0x48>)
10053568:	4684      	mov	ip, r0
1005356a:	4463      	add	r3, ip
1005356c:	430a      	orrs	r2, r1
1005356e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10053570:	46c0      	nop			@ (mov r8, r8)
10053572:	46bd      	mov	sp, r7
10053574:	b002      	add	sp, #8
10053576:	bd80      	pop	{r7, pc}
10053578:	200000dc 	.word	0x200000dc
1005357c:	ffffc0ff 	.word	0xffffc0ff

10053580 <LL_RADIO_GetHopIncrement>:
  * @rmtoll WORDB          HOPINCR       LL_RADIO_GetHopIncrement
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetHopIncrement(uint8_t stateMachineNo)
{
10053580:	b580      	push	{r7, lr}
10053582:	b082      	sub	sp, #8
10053584:	af00      	add	r7, sp, #0
10053586:	0002      	movs	r2, r0
10053588:	1dfb      	adds	r3, r7, #7
1005358a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
1005358c:	1dfb      	adds	r3, r7, #7
1005358e:	781b      	ldrb	r3, [r3, #0]
10053590:	225c      	movs	r2, #92	@ 0x5c
10053592:	4353      	muls	r3, r2
10053594:	4a05      	ldr	r2, [pc, #20]	@ (100535ac <LL_RADIO_GetHopIncrement+0x2c>)
10053596:	4694      	mov	ip, r2
10053598:	4463      	add	r3, ip
1005359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1005359c:	0a1b      	lsrs	r3, r3, #8
1005359e:	223f      	movs	r2, #63	@ 0x3f
100535a0:	4013      	ands	r3, r2
                             STATEMACH_WORDB_HOPINCR) >> STATEMACH_WORDB_HOPINCR_Pos);
}
100535a2:	0018      	movs	r0, r3
100535a4:	46bd      	mov	sp, r7
100535a6:	b002      	add	sp, #8
100535a8:	bd80      	pop	{r7, pc}
100535aa:	46c0      	nop			@ (mov r8, r8)
100535ac:	200000dc 	.word	0x200000dc

100535b0 <LL_RADIO_SetUsedChannelFlags_15_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_15_0(uint8_t stateMachineNo, uint32_t value)
{
100535b0:	b580      	push	{r7, lr}
100535b2:	b082      	sub	sp, #8
100535b4:	af00      	add	r7, sp, #0
100535b6:	0002      	movs	r2, r0
100535b8:	6039      	str	r1, [r7, #0]
100535ba:	1dfb      	adds	r3, r7, #7
100535bc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_USEDCHANNELFLAGS_15_0, value);
100535be:	1dfb      	adds	r3, r7, #7
100535c0:	781b      	ldrb	r3, [r3, #0]
100535c2:	225c      	movs	r2, #92	@ 0x5c
100535c4:	4353      	muls	r3, r2
100535c6:	4a0a      	ldr	r2, [pc, #40]	@ (100535f0 <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
100535c8:	4694      	mov	ip, r2
100535ca:	4463      	add	r3, ip
100535cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100535ce:	041b      	lsls	r3, r3, #16
100535d0:	0c19      	lsrs	r1, r3, #16
100535d2:	683b      	ldr	r3, [r7, #0]
100535d4:	041a      	lsls	r2, r3, #16
100535d6:	1dfb      	adds	r3, r7, #7
100535d8:	781b      	ldrb	r3, [r3, #0]
100535da:	205c      	movs	r0, #92	@ 0x5c
100535dc:	4343      	muls	r3, r0
100535de:	4804      	ldr	r0, [pc, #16]	@ (100535f0 <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
100535e0:	4684      	mov	ip, r0
100535e2:	4463      	add	r3, ip
100535e4:	430a      	orrs	r2, r1
100535e6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100535e8:	46c0      	nop			@ (mov r8, r8)
100535ea:	46bd      	mov	sp, r7
100535ec:	b002      	add	sp, #8
100535ee:	bd80      	pop	{r7, pc}
100535f0:	200000dc 	.word	0x200000dc

100535f4 <LL_RADIO_GetUsedChannelFlags_15_0>:
  * @rmtoll WORDB          USEDCHANNELFLAGS_15_0       LL_RADIO_GetUsedChannelFlags_15_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_15_0(uint8_t stateMachineNo)
{
100535f4:	b580      	push	{r7, lr}
100535f6:	b082      	sub	sp, #8
100535f8:	af00      	add	r7, sp, #0
100535fa:	0002      	movs	r2, r0
100535fc:	1dfb      	adds	r3, r7, #7
100535fe:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10053600:	1dfb      	adds	r3, r7, #7
10053602:	781b      	ldrb	r3, [r3, #0]
10053604:	225c      	movs	r2, #92	@ 0x5c
10053606:	4353      	muls	r3, r2
10053608:	4a05      	ldr	r2, [pc, #20]	@ (10053620 <LL_RADIO_GetUsedChannelFlags_15_0+0x2c>)
1005360a:	4694      	mov	ip, r2
1005360c:	4463      	add	r3, ip
1005360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053610:	0c1b      	lsrs	r3, r3, #16
10053612:	041b      	lsls	r3, r3, #16
10053614:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORDB_USEDCHANNELFLAGS_15_0) >> STATEMACH_WORDB_USEDCHANNELFLAGS_15_0_Pos);
}
10053616:	0018      	movs	r0, r3
10053618:	46bd      	mov	sp, r7
1005361a:	b002      	add	sp, #8
1005361c:	bd80      	pop	{r7, pc}
1005361e:	46c0      	nop			@ (mov r8, r8)
10053620:	200000dc 	.word	0x200000dc

10053624 <LL_RADIO_SetUsedChannelFlags_36_16>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_36_16(uint8_t stateMachineNo, uint32_t value)
{
10053624:	b580      	push	{r7, lr}
10053626:	b082      	sub	sp, #8
10053628:	af00      	add	r7, sp, #0
1005362a:	0002      	movs	r2, r0
1005362c:	6039      	str	r1, [r7, #0]
1005362e:	1dfb      	adds	r3, r7, #7
10053630:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDC, STATEMACH_WORDC_USEDCHANNELFLAGS_36_16, value);
10053632:	1dfb      	adds	r3, r7, #7
10053634:	781b      	ldrb	r3, [r3, #0]
10053636:	225c      	movs	r2, #92	@ 0x5c
10053638:	4353      	muls	r3, r2
1005363a:	4a0b      	ldr	r2, [pc, #44]	@ (10053668 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
1005363c:	4694      	mov	ip, r2
1005363e:	4463      	add	r3, ip
10053640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10053642:	0d9b      	lsrs	r3, r3, #22
10053644:	0599      	lsls	r1, r3, #22
10053646:	683b      	ldr	r3, [r7, #0]
10053648:	029b      	lsls	r3, r3, #10
1005364a:	0a9a      	lsrs	r2, r3, #10
1005364c:	1dfb      	adds	r3, r7, #7
1005364e:	781b      	ldrb	r3, [r3, #0]
10053650:	205c      	movs	r0, #92	@ 0x5c
10053652:	4343      	muls	r3, r0
10053654:	4804      	ldr	r0, [pc, #16]	@ (10053668 <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10053656:	4684      	mov	ip, r0
10053658:	4463      	add	r3, ip
1005365a:	430a      	orrs	r2, r1
1005365c:	631a      	str	r2, [r3, #48]	@ 0x30
}
1005365e:	46c0      	nop			@ (mov r8, r8)
10053660:	46bd      	mov	sp, r7
10053662:	b002      	add	sp, #8
10053664:	bd80      	pop	{r7, pc}
10053666:	46c0      	nop			@ (mov r8, r8)
10053668:	200000dc 	.word	0x200000dc

1005366c <LL_RADIO_GetUsedChannelFlags_36_16>:
  * @rmtoll WORDC          USEDCHANNELFLAGS_36_16       LL_RADIO_GetUsedChannelFlags_36_16
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_36_16(uint8_t stateMachineNo)
{
1005366c:	b580      	push	{r7, lr}
1005366e:	b082      	sub	sp, #8
10053670:	af00      	add	r7, sp, #0
10053672:	0002      	movs	r2, r0
10053674:	1dfb      	adds	r3, r7, #7
10053676:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDC,
10053678:	1dfb      	adds	r3, r7, #7
1005367a:	781b      	ldrb	r3, [r3, #0]
1005367c:	225c      	movs	r2, #92	@ 0x5c
1005367e:	4353      	muls	r3, r2
10053680:	4a04      	ldr	r2, [pc, #16]	@ (10053694 <LL_RADIO_GetUsedChannelFlags_36_16+0x28>)
10053682:	4694      	mov	ip, r2
10053684:	4463      	add	r3, ip
10053686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10053688:	029b      	lsls	r3, r3, #10
1005368a:	0a9b      	lsrs	r3, r3, #10
                             STATEMACH_WORDC_USEDCHANNELFLAGS_36_16) >> STATEMACH_WORDC_USEDCHANNELFLAGS_36_16_Pos);
}
1005368c:	0018      	movs	r0, r3
1005368e:	46bd      	mov	sp, r7
10053690:	b002      	add	sp, #8
10053692:	bd80      	pop	{r7, pc}
10053694:	200000dc 	.word	0x200000dc

10053698 <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10053698:	b580      	push	{r7, lr}
1005369a:	b082      	sub	sp, #8
1005369c:	af00      	add	r7, sp, #0
1005369e:	6078      	str	r0, [r7, #4]
100536a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
100536a2:	687b      	ldr	r3, [r7, #4]
100536a4:	681b      	ldr	r3, [r3, #0]
100536a6:	687b      	ldr	r3, [r7, #4]
100536a8:	683a      	ldr	r2, [r7, #0]
100536aa:	601a      	str	r2, [r3, #0]
}
100536ac:	46c0      	nop			@ (mov r8, r8)
100536ae:	46bd      	mov	sp, r7
100536b0:	b002      	add	sp, #8
100536b2:	bd80      	pop	{r7, pc}

100536b4 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100536b4:	b580      	push	{r7, lr}
100536b6:	b082      	sub	sp, #8
100536b8:	af00      	add	r7, sp, #0
100536ba:	6078      	str	r0, [r7, #4]
100536bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
100536be:	687b      	ldr	r3, [r7, #4]
100536c0:	685b      	ldr	r3, [r3, #4]
100536c2:	2201      	movs	r2, #1
100536c4:	4393      	bics	r3, r2
100536c6:	001a      	movs	r2, r3
100536c8:	683b      	ldr	r3, [r7, #0]
100536ca:	2101      	movs	r1, #1
100536cc:	400b      	ands	r3, r1
100536ce:	431a      	orrs	r2, r3
100536d0:	687b      	ldr	r3, [r7, #4]
100536d2:	605a      	str	r2, [r3, #4]
}
100536d4:	46c0      	nop			@ (mov r8, r8)
100536d6:	46bd      	mov	sp, r7
100536d8:	b002      	add	sp, #8
100536da:	bd80      	pop	{r7, pc}

100536dc <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100536dc:	b580      	push	{r7, lr}
100536de:	b082      	sub	sp, #8
100536e0:	af00      	add	r7, sp, #0
100536e2:	6078      	str	r0, [r7, #4]
100536e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
100536e6:	687b      	ldr	r3, [r7, #4]
100536e8:	685b      	ldr	r3, [r3, #4]
100536ea:	2204      	movs	r2, #4
100536ec:	4393      	bics	r3, r2
100536ee:	001a      	movs	r2, r3
100536f0:	683b      	ldr	r3, [r7, #0]
100536f2:	009b      	lsls	r3, r3, #2
100536f4:	2104      	movs	r1, #4
100536f6:	400b      	ands	r3, r1
100536f8:	431a      	orrs	r2, r3
100536fa:	687b      	ldr	r3, [r7, #4]
100536fc:	605a      	str	r2, [r3, #4]
}
100536fe:	46c0      	nop			@ (mov r8, r8)
10053700:	46bd      	mov	sp, r7
10053702:	b002      	add	sp, #8
10053704:	bd80      	pop	{r7, pc}

10053706 <LL_RADIO_SetCTEAndSamplingEnable>:
  * @rmtoll WORD1          CTEANDSAMPLINGENABLE        LL_RADIO_SetCTEAndSamplingEnable
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEAndSamplingEnable(TXRXPACK_TypeDef *p, uint32_t value)
{
10053706:	b580      	push	{r7, lr}
10053708:	b082      	sub	sp, #8
1005370a:	af00      	add	r7, sp, #0
1005370c:	6078      	str	r0, [r7, #4]
1005370e:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CTEANDSAMPLINGENABLE, value);
10053710:	687b      	ldr	r3, [r7, #4]
10053712:	685b      	ldr	r3, [r3, #4]
10053714:	2208      	movs	r2, #8
10053716:	4393      	bics	r3, r2
10053718:	001a      	movs	r2, r3
1005371a:	683b      	ldr	r3, [r7, #0]
1005371c:	00db      	lsls	r3, r3, #3
1005371e:	2108      	movs	r1, #8
10053720:	400b      	ands	r3, r1
10053722:	431a      	orrs	r2, r3
10053724:	687b      	ldr	r3, [r7, #4]
10053726:	605a      	str	r2, [r3, #4]
}
10053728:	46c0      	nop			@ (mov r8, r8)
1005372a:	46bd      	mov	sp, r7
1005372c:	b002      	add	sp, #8
1005372e:	bd80      	pop	{r7, pc}

10053730 <LL_RADIO_SetCRCInitializationSelector>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationSelector(TXRXPACK_TypeDef *p, uint32_t value)
{
10053730:	b580      	push	{r7, lr}
10053732:	b082      	sub	sp, #8
10053734:	af00      	add	r7, sp, #0
10053736:	6078      	str	r0, [r7, #4]
10053738:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CRCINITSEL, value);
1005373a:	687b      	ldr	r3, [r7, #4]
1005373c:	685b      	ldr	r3, [r3, #4]
1005373e:	2210      	movs	r2, #16
10053740:	4393      	bics	r3, r2
10053742:	001a      	movs	r2, r3
10053744:	683b      	ldr	r3, [r7, #0]
10053746:	011b      	lsls	r3, r3, #4
10053748:	2110      	movs	r1, #16
1005374a:	400b      	ands	r3, r1
1005374c:	431a      	orrs	r2, r3
1005374e:	687b      	ldr	r3, [r7, #4]
10053750:	605a      	str	r2, [r3, #4]
}
10053752:	46c0      	nop			@ (mov r8, r8)
10053754:	46bd      	mov	sp, r7
10053756:	b002      	add	sp, #8
10053758:	bd80      	pop	{r7, pc}

1005375a <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
1005375a:	b580      	push	{r7, lr}
1005375c:	b082      	sub	sp, #8
1005375e:	af00      	add	r7, sp, #0
10053760:	6078      	str	r0, [r7, #4]
10053762:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10053764:	687b      	ldr	r3, [r7, #4]
10053766:	685b      	ldr	r3, [r3, #4]
10053768:	2220      	movs	r2, #32
1005376a:	4393      	bics	r3, r2
1005376c:	001a      	movs	r2, r3
1005376e:	683b      	ldr	r3, [r7, #0]
10053770:	015b      	lsls	r3, r3, #5
10053772:	2120      	movs	r1, #32
10053774:	400b      	ands	r3, r1
10053776:	431a      	orrs	r2, r3
10053778:	687b      	ldr	r3, [r7, #4]
1005377a:	605a      	str	r2, [r3, #4]
}
1005377c:	46c0      	nop			@ (mov r8, r8)
1005377e:	46bd      	mov	sp, r7
10053780:	b002      	add	sp, #8
10053782:	bd80      	pop	{r7, pc}

10053784 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>:
  * @rmtoll WORD1          SN_EN            LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable(TXRXPACK_TypeDef *p)
{
10053784:	b580      	push	{r7, lr}
10053786:	b082      	sub	sp, #8
10053788:	af00      	add	r7, sp, #0
1005378a:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_SN_EN);
1005378c:	687b      	ldr	r3, [r7, #4]
1005378e:	685b      	ldr	r3, [r3, #4]
10053790:	2240      	movs	r2, #64	@ 0x40
10053792:	431a      	orrs	r2, r3
10053794:	687b      	ldr	r3, [r7, #4]
10053796:	605a      	str	r2, [r3, #4]
}
10053798:	46c0      	nop			@ (mov r8, r8)
1005379a:	46bd      	mov	sp, r7
1005379c:	b002      	add	sp, #8
1005379e:	bd80      	pop	{r7, pc}

100537a0 <LL_RADIO_IncrementerChannel_Enable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Enable(TXRXPACK_TypeDef *p)
{
100537a0:	b580      	push	{r7, lr}
100537a2:	b082      	sub	sp, #8
100537a4:	af00      	add	r7, sp, #0
100537a6:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100537a8:	687b      	ldr	r3, [r7, #4]
100537aa:	685b      	ldr	r3, [r3, #4]
100537ac:	2280      	movs	r2, #128	@ 0x80
100537ae:	431a      	orrs	r2, r3
100537b0:	687b      	ldr	r3, [r7, #4]
100537b2:	605a      	str	r2, [r3, #4]
}
100537b4:	46c0      	nop			@ (mov r8, r8)
100537b6:	46bd      	mov	sp, r7
100537b8:	b002      	add	sp, #8
100537ba:	bd80      	pop	{r7, pc}

100537bc <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
100537bc:	b580      	push	{r7, lr}
100537be:	b082      	sub	sp, #8
100537c0:	af00      	add	r7, sp, #0
100537c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100537c4:	687b      	ldr	r3, [r7, #4]
100537c6:	685b      	ldr	r3, [r3, #4]
100537c8:	2280      	movs	r2, #128	@ 0x80
100537ca:	4393      	bics	r3, r2
100537cc:	001a      	movs	r2, r3
100537ce:	687b      	ldr	r3, [r7, #4]
100537d0:	605a      	str	r2, [r3, #4]
}
100537d2:	46c0      	nop			@ (mov r8, r8)
100537d4:	46bd      	mov	sp, r7
100537d6:	b002      	add	sp, #8
100537d8:	bd80      	pop	{r7, pc}
	...

100537dc <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
100537dc:	b580      	push	{r7, lr}
100537de:	b082      	sub	sp, #8
100537e0:	af00      	add	r7, sp, #0
100537e2:	6078      	str	r0, [r7, #4]
100537e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
100537e6:	687b      	ldr	r3, [r7, #4]
100537e8:	685b      	ldr	r3, [r3, #4]
100537ea:	4a07      	ldr	r2, [pc, #28]	@ (10053808 <LL_RADIO_SetNextTxMode+0x2c>)
100537ec:	401a      	ands	r2, r3
100537ee:	683b      	ldr	r3, [r7, #0]
100537f0:	0219      	lsls	r1, r3, #8
100537f2:	2380      	movs	r3, #128	@ 0x80
100537f4:	005b      	lsls	r3, r3, #1
100537f6:	400b      	ands	r3, r1
100537f8:	431a      	orrs	r2, r3
100537fa:	687b      	ldr	r3, [r7, #4]
100537fc:	605a      	str	r2, [r3, #4]
}
100537fe:	46c0      	nop			@ (mov r8, r8)
10053800:	46bd      	mov	sp, r7
10053802:	b002      	add	sp, #8
10053804:	bd80      	pop	{r7, pc}
10053806:	46c0      	nop			@ (mov r8, r8)
10053808:	fffffeff 	.word	0xfffffeff

1005380c <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
1005380c:	b580      	push	{r7, lr}
1005380e:	b082      	sub	sp, #8
10053810:	af00      	add	r7, sp, #0
10053812:	6078      	str	r0, [r7, #4]
10053814:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
10053816:	687b      	ldr	r3, [r7, #4]
10053818:	685b      	ldr	r3, [r3, #4]
1005381a:	4a07      	ldr	r2, [pc, #28]	@ (10053838 <LL_RADIO_SetAllTableDataReady+0x2c>)
1005381c:	401a      	ands	r2, r3
1005381e:	683b      	ldr	r3, [r7, #0]
10053820:	0259      	lsls	r1, r3, #9
10053822:	2380      	movs	r3, #128	@ 0x80
10053824:	009b      	lsls	r3, r3, #2
10053826:	400b      	ands	r3, r1
10053828:	431a      	orrs	r2, r3
1005382a:	687b      	ldr	r3, [r7, #4]
1005382c:	605a      	str	r2, [r3, #4]
}
1005382e:	46c0      	nop			@ (mov r8, r8)
10053830:	46bd      	mov	sp, r7
10053832:	b002      	add	sp, #8
10053834:	bd80      	pop	{r7, pc}
10053836:	46c0      	nop			@ (mov r8, r8)
10053838:	fffffdff 	.word	0xfffffdff

1005383c <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
1005383c:	b580      	push	{r7, lr}
1005383e:	b082      	sub	sp, #8
10053840:	af00      	add	r7, sp, #0
10053842:	6078      	str	r0, [r7, #4]
10053844:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
10053846:	687b      	ldr	r3, [r7, #4]
10053848:	685b      	ldr	r3, [r3, #4]
1005384a:	4a07      	ldr	r2, [pc, #28]	@ (10053868 <LL_RADIO_SetTransmissionDataReady+0x2c>)
1005384c:	401a      	ands	r2, r3
1005384e:	683b      	ldr	r3, [r7, #0]
10053850:	0299      	lsls	r1, r3, #10
10053852:	2380      	movs	r3, #128	@ 0x80
10053854:	00db      	lsls	r3, r3, #3
10053856:	400b      	ands	r3, r1
10053858:	431a      	orrs	r2, r3
1005385a:	687b      	ldr	r3, [r7, #4]
1005385c:	605a      	str	r2, [r3, #4]
}
1005385e:	46c0      	nop			@ (mov r8, r8)
10053860:	46bd      	mov	sp, r7
10053862:	b002      	add	sp, #8
10053864:	bd80      	pop	{r7, pc}
10053866:	46c0      	nop			@ (mov r8, r8)
10053868:	fffffbff 	.word	0xfffffbff

1005386c <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
1005386c:	b580      	push	{r7, lr}
1005386e:	b082      	sub	sp, #8
10053870:	af00      	add	r7, sp, #0
10053872:	6078      	str	r0, [r7, #4]
10053874:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
10053876:	687b      	ldr	r3, [r7, #4]
10053878:	689b      	ldr	r3, [r3, #8]
1005387a:	687b      	ldr	r3, [r7, #4]
1005387c:	683a      	ldr	r2, [r7, #0]
1005387e:	609a      	str	r2, [r3, #8]
}
10053880:	46c0      	nop			@ (mov r8, r8)
10053882:	46bd      	mov	sp, r7
10053884:	b002      	add	sp, #8
10053886:	bd80      	pop	{r7, pc}

10053888 <LL_RADIO_GetDataPointer>:
  * @rmtoll WORD2          DATAPTR       LL_RADIO_GetDataPointer
  * @param  p RADIO Instance
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetDataPointer(TXRXPACK_TypeDef *p)
{
10053888:	b580      	push	{r7, lr}
1005388a:	b082      	sub	sp, #8
1005388c:	af00      	add	r7, sp, #0
1005388e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR) >> TXRXPACK_WORD2_DATAPTR_Pos);
10053890:	687b      	ldr	r3, [r7, #4]
10053892:	689b      	ldr	r3, [r3, #8]
}
10053894:	0018      	movs	r0, r3
10053896:	46bd      	mov	sp, r7
10053898:	b002      	add	sp, #8
1005389a:	bd80      	pop	{r7, pc}

1005389c <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
1005389c:	b580      	push	{r7, lr}
1005389e:	b082      	sub	sp, #8
100538a0:	af00      	add	r7, sp, #0
100538a2:	6078      	str	r0, [r7, #4]
100538a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
100538a6:	687b      	ldr	r3, [r7, #4]
100538a8:	68db      	ldr	r3, [r3, #12]
100538aa:	0d1b      	lsrs	r3, r3, #20
100538ac:	051a      	lsls	r2, r3, #20
100538ae:	683b      	ldr	r3, [r7, #0]
100538b0:	031b      	lsls	r3, r3, #12
100538b2:	0b1b      	lsrs	r3, r3, #12
100538b4:	431a      	orrs	r2, r3
100538b6:	687b      	ldr	r3, [r7, #4]
100538b8:	60da      	str	r2, [r3, #12]
}
100538ba:	46c0      	nop			@ (mov r8, r8)
100538bc:	46bd      	mov	sp, r7
100538be:	b002      	add	sp, #8
100538c0:	bd80      	pop	{r7, pc}

100538c2 <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
100538c2:	b580      	push	{r7, lr}
100538c4:	b082      	sub	sp, #8
100538c6:	af00      	add	r7, sp, #0
100538c8:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
100538ca:	687b      	ldr	r3, [r7, #4]
100538cc:	68db      	ldr	r3, [r3, #12]
100538ce:	2280      	movs	r2, #128	@ 0x80
100538d0:	0352      	lsls	r2, r2, #13
100538d2:	431a      	orrs	r2, r3
100538d4:	687b      	ldr	r3, [r7, #4]
100538d6:	60da      	str	r2, [r3, #12]
}
100538d8:	46c0      	nop			@ (mov r8, r8)
100538da:	46bd      	mov	sp, r7
100538dc:	b002      	add	sp, #8
100538de:	bd80      	pop	{r7, pc}

100538e0 <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
100538e0:	b580      	push	{r7, lr}
100538e2:	b082      	sub	sp, #8
100538e4:	af00      	add	r7, sp, #0
100538e6:	6078      	str	r0, [r7, #4]
100538e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
100538ea:	687b      	ldr	r3, [r7, #4]
100538ec:	68db      	ldr	r3, [r3, #12]
100538ee:	4a07      	ldr	r2, [pc, #28]	@ (1005390c <LL_RADIO_SetTrigRcv+0x2c>)
100538f0:	401a      	ands	r2, r3
100538f2:	683b      	ldr	r3, [r7, #0]
100538f4:	0599      	lsls	r1, r3, #22
100538f6:	2380      	movs	r3, #128	@ 0x80
100538f8:	03db      	lsls	r3, r3, #15
100538fa:	400b      	ands	r3, r1
100538fc:	431a      	orrs	r2, r3
100538fe:	687b      	ldr	r3, [r7, #4]
10053900:	60da      	str	r2, [r3, #12]
}
10053902:	46c0      	nop			@ (mov r8, r8)
10053904:	46bd      	mov	sp, r7
10053906:	b002      	add	sp, #8
10053908:	bd80      	pop	{r7, pc}
1005390a:	46c0      	nop			@ (mov r8, r8)
1005390c:	ffbfffff 	.word	0xffbfffff

10053910 <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
10053910:	b580      	push	{r7, lr}
10053912:	b082      	sub	sp, #8
10053914:	af00      	add	r7, sp, #0
10053916:	6078      	str	r0, [r7, #4]
10053918:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
1005391a:	687b      	ldr	r3, [r7, #4]
1005391c:	68db      	ldr	r3, [r3, #12]
1005391e:	4a07      	ldr	r2, [pc, #28]	@ (1005393c <LL_RADIO_SetTrigDone+0x2c>)
10053920:	401a      	ands	r2, r3
10053922:	683b      	ldr	r3, [r7, #0]
10053924:	05d9      	lsls	r1, r3, #23
10053926:	2380      	movs	r3, #128	@ 0x80
10053928:	041b      	lsls	r3, r3, #16
1005392a:	400b      	ands	r3, r1
1005392c:	431a      	orrs	r2, r3
1005392e:	687b      	ldr	r3, [r7, #4]
10053930:	60da      	str	r2, [r3, #12]
}
10053932:	46c0      	nop			@ (mov r8, r8)
10053934:	46bd      	mov	sp, r7
10053936:	b002      	add	sp, #8
10053938:	bd80      	pop	{r7, pc}
1005393a:	46c0      	nop			@ (mov r8, r8)
1005393c:	ff7fffff 	.word	0xff7fffff

10053940 <LL_RADIO_SetIntTxOk>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetIntTxOk(TXRXPACK_TypeDef *p, uint32_t value)
{
10053940:	b580      	push	{r7, lr}
10053942:	b082      	sub	sp, #8
10053944:	af00      	add	r7, sp, #0
10053946:	6078      	str	r0, [r7, #4]
10053948:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTTXOK, value);
1005394a:	687b      	ldr	r3, [r7, #4]
1005394c:	68db      	ldr	r3, [r3, #12]
1005394e:	4a07      	ldr	r2, [pc, #28]	@ (1005396c <LL_RADIO_SetIntTxOk+0x2c>)
10053950:	401a      	ands	r2, r3
10053952:	683b      	ldr	r3, [r7, #0]
10053954:	0619      	lsls	r1, r3, #24
10053956:	2380      	movs	r3, #128	@ 0x80
10053958:	045b      	lsls	r3, r3, #17
1005395a:	400b      	ands	r3, r1
1005395c:	431a      	orrs	r2, r3
1005395e:	687b      	ldr	r3, [r7, #4]
10053960:	60da      	str	r2, [r3, #12]
}
10053962:	46c0      	nop			@ (mov r8, r8)
10053964:	46bd      	mov	sp, r7
10053966:	b002      	add	sp, #8
10053968:	bd80      	pop	{r7, pc}
1005396a:	46c0      	nop			@ (mov r8, r8)
1005396c:	feffffff 	.word	0xfeffffff

10053970 <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
10053970:	b580      	push	{r7, lr}
10053972:	b082      	sub	sp, #8
10053974:	af00      	add	r7, sp, #0
10053976:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
10053978:	687b      	ldr	r3, [r7, #4]
1005397a:	68db      	ldr	r3, [r3, #12]
1005397c:	2280      	movs	r2, #128	@ 0x80
1005397e:	0492      	lsls	r2, r2, #18
10053980:	431a      	orrs	r2, r3
10053982:	687b      	ldr	r3, [r7, #4]
10053984:	60da      	str	r2, [r3, #12]
}
10053986:	46c0      	nop			@ (mov r8, r8)
10053988:	46bd      	mov	sp, r7
1005398a:	b002      	add	sp, #8
1005398c:	bd80      	pop	{r7, pc}

1005398e <LL_RADIO_IntRcvTimeout_Enable>:
  * @rmtoll WORD3          INTRCVTIMEOUT            LL_RADIO_IntRcvTimeout_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvTimeout_Enable(TXRXPACK_TypeDef *p)
{
1005398e:	b580      	push	{r7, lr}
10053990:	b082      	sub	sp, #8
10053992:	af00      	add	r7, sp, #0
10053994:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVTIMEOUT);
10053996:	687b      	ldr	r3, [r7, #4]
10053998:	68db      	ldr	r3, [r3, #12]
1005399a:	2280      	movs	r2, #128	@ 0x80
1005399c:	04d2      	lsls	r2, r2, #19
1005399e:	431a      	orrs	r2, r3
100539a0:	687b      	ldr	r3, [r7, #4]
100539a2:	60da      	str	r2, [r3, #12]
}
100539a4:	46c0      	nop			@ (mov r8, r8)
100539a6:	46bd      	mov	sp, r7
100539a8:	b002      	add	sp, #8
100539aa:	bd80      	pop	{r7, pc}

100539ac <LL_RADIO_IntRcvCRCErr_Enable>:
  * @rmtoll WORD3          INTRCVCRCERR            LL_RADIO_IntRcvCRCErr_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvCRCErr_Enable(TXRXPACK_TypeDef *p)
{
100539ac:	b580      	push	{r7, lr}
100539ae:	b082      	sub	sp, #8
100539b0:	af00      	add	r7, sp, #0
100539b2:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVCRCERR);
100539b4:	687b      	ldr	r3, [r7, #4]
100539b6:	68db      	ldr	r3, [r3, #12]
100539b8:	2280      	movs	r2, #128	@ 0x80
100539ba:	05d2      	lsls	r2, r2, #23
100539bc:	431a      	orrs	r2, r3
100539be:	687b      	ldr	r3, [r7, #4]
100539c0:	60da      	str	r2, [r3, #12]
}
100539c2:	46c0      	nop			@ (mov r8, r8)
100539c4:	46bd      	mov	sp, r7
100539c6:	b002      	add	sp, #8
100539c8:	bd80      	pop	{r7, pc}

100539ca <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100539ca:	b580      	push	{r7, lr}
100539cc:	b082      	sub	sp, #8
100539ce:	af00      	add	r7, sp, #0
100539d0:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100539d2:	687b      	ldr	r3, [r7, #4]
100539d4:	68db      	ldr	r3, [r3, #12]
100539d6:	2280      	movs	r2, #128	@ 0x80
100539d8:	0612      	lsls	r2, r2, #24
100539da:	431a      	orrs	r2, r3
100539dc:	687b      	ldr	r3, [r7, #4]
100539de:	60da      	str	r2, [r3, #12]
}
100539e0:	46c0      	nop			@ (mov r8, r8)
100539e2:	46bd      	mov	sp, r7
100539e4:	b002      	add	sp, #8
100539e6:	bd80      	pop	{r7, pc}

100539e8 <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100539e8:	b580      	push	{r7, lr}
100539ea:	b082      	sub	sp, #8
100539ec:	af00      	add	r7, sp, #0
100539ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
100539f0:	23c0      	movs	r3, #192	@ 0xc0
100539f2:	05db      	lsls	r3, r3, #23
100539f4:	685b      	ldr	r3, [r3, #4]
100539f6:	4a07      	ldr	r2, [pc, #28]	@ (10053a14 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
100539f8:	4013      	ands	r3, r2
100539fa:	0019      	movs	r1, r3
100539fc:	687b      	ldr	r3, [r7, #4]
100539fe:	4a06      	ldr	r2, [pc, #24]	@ (10053a18 <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
10053a00:	401a      	ands	r2, r3
10053a02:	23c0      	movs	r3, #192	@ 0xc0
10053a04:	05db      	lsls	r3, r3, #23
10053a06:	430a      	orrs	r2, r1
10053a08:	605a      	str	r2, [r3, #4]
}
10053a0a:	46c0      	nop			@ (mov r8, r8)
10053a0c:	46bd      	mov	sp, r7
10053a0e:	b002      	add	sp, #8
10053a10:	bd80      	pop	{r7, pc}
10053a12:	46c0      	nop			@ (mov r8, r8)
10053a14:	0002004f 	.word	0x0002004f
10053a18:	fffdffb0 	.word	0xfffdffb0

10053a1c <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10053a1c:	b580      	push	{r7, lr}
10053a1e:	b082      	sub	sp, #8
10053a20:	af00      	add	r7, sp, #0
10053a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10053a24:	23c0      	movs	r3, #192	@ 0xc0
10053a26:	05db      	lsls	r3, r3, #23
10053a28:	699b      	ldr	r3, [r3, #24]
10053a2a:	2208      	movs	r2, #8
10053a2c:	4393      	bics	r3, r2
10053a2e:	0019      	movs	r1, r3
10053a30:	687b      	ldr	r3, [r7, #4]
10053a32:	00db      	lsls	r3, r3, #3
10053a34:	2208      	movs	r2, #8
10053a36:	401a      	ands	r2, r3
10053a38:	23c0      	movs	r3, #192	@ 0xc0
10053a3a:	05db      	lsls	r3, r3, #23
10053a3c:	430a      	orrs	r2, r1
10053a3e:	619a      	str	r2, [r3, #24]
}
10053a40:	46c0      	nop			@ (mov r8, r8)
10053a42:	46bd      	mov	sp, r7
10053a44:	b002      	add	sp, #8
10053a46:	bd80      	pop	{r7, pc}

10053a48 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
10053a48:	b580      	push	{r7, lr}
10053a4a:	b088      	sub	sp, #32
10053a4c:	af00      	add	r7, sp, #0
10053a4e:	6078      	str	r0, [r7, #4]
10053a50:	0008      	movs	r0, r1
10053a52:	0011      	movs	r1, r2
10053a54:	1cfb      	adds	r3, r7, #3
10053a56:	1c02      	adds	r2, r0, #0
10053a58:	701a      	strb	r2, [r3, #0]
10053a5a:	1cbb      	adds	r3, r7, #2
10053a5c:	1c0a      	adds	r2, r1, #0
10053a5e:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
10053a60:	687b      	ldr	r3, [r7, #4]
10053a62:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10053a64:	1cfb      	adds	r3, r7, #3
10053a66:	781b      	ldrb	r3, [r3, #0]
10053a68:	2b01      	cmp	r3, #1
10053a6a:	d105      	bne.n	10053a78 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in connection, initiating and active
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
10053a6c:	2304      	movs	r3, #4
10053a6e:	60bb      	str	r3, [r7, #8]
#else
        const int32_t Adjust_Value = 6;
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
10053a70:	68bb      	ldr	r3, [r7, #8]
10053a72:	3302      	adds	r3, #2
10053a74:	61fb      	str	r3, [r7, #28]
10053a76:	e015      	b.n	10053aa4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
10053a78:	1cfb      	adds	r3, r7, #3
10053a7a:	781b      	ldrb	r3, [r3, #0]
10053a7c:	2b00      	cmp	r3, #0
10053a7e:	d105      	bne.n	10053a8c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * values used in prrevious versions of the stack.
         * They could be optimized after careful analysis of timing margins and
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
10053a80:	2304      	movs	r3, #4
10053a82:	60fb      	str	r3, [r7, #12]
#else
        const int32_t Adjust_Value = 4;
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10053a84:	68fb      	ldr	r3, [r7, #12]
10053a86:	3302      	adds	r3, #2
10053a88:	61fb      	str	r3, [r7, #28]
10053a8a:	e00b      	b.n	10053aa4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
10053a8c:	1cfb      	adds	r3, r7, #3
10053a8e:	781b      	ldrb	r3, [r3, #0]
10053a90:	2b02      	cmp	r3, #2
10053a92:	d105      	bne.n	10053aa0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
    {
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
10053a94:	2301      	movs	r3, #1
10053a96:	613b      	str	r3, [r7, #16]
#else
        const int32_t Adjust_Value = 2;
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
10053a98:	693b      	ldr	r3, [r7, #16]
10053a9a:	3304      	adds	r3, #4
10053a9c:	61fb      	str	r3, [r7, #28]
10053a9e:	e001      	b.n	10053aa4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
10053aa0:	2300      	movs	r3, #0
10053aa2:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
10053aa4:	1cfb      	adds	r3, r7, #3
10053aa6:	781b      	ldrb	r3, [r3, #0]
10053aa8:	2b01      	cmp	r3, #1
10053aaa:	d003      	beq.n	10053ab4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
10053aac:	1cfb      	adds	r3, r7, #3
10053aae:	781b      	ldrb	r3, [r3, #0]
10053ab0:	2b02      	cmp	r3, #2
10053ab2:	d109      	bne.n	10053ac8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
10053ab4:	1cbb      	adds	r3, r7, #2
10053ab6:	781b      	ldrb	r3, [r3, #0]
10053ab8:	2b01      	cmp	r3, #1
10053aba:	d102      	bne.n	10053ac2 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
10053abc:	239b      	movs	r3, #155	@ 0x9b
10053abe:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
10053ac0:	e013      	b.n	10053aea <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
10053ac2:	233d      	movs	r3, #61	@ 0x3d
10053ac4:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
10053ac6:	e010      	b.n	10053aea <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
10053ac8:	1cfb      	adds	r3, r7, #3
10053aca:	781b      	ldrb	r3, [r3, #0]
10053acc:	2b00      	cmp	r3, #0
10053ace:	d003      	beq.n	10053ad8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
10053ad0:	1cfb      	adds	r3, r7, #3
10053ad2:	781b      	ldrb	r3, [r3, #0]
10053ad4:	2b03      	cmp	r3, #3
10053ad6:	d108      	bne.n	10053aea <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
10053ad8:	1cbb      	adds	r3, r7, #2
10053ada:	781b      	ldrb	r3, [r3, #0]
10053adc:	2b01      	cmp	r3, #1
10053ade:	d102      	bne.n	10053ae6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
10053ae0:	2399      	movs	r3, #153	@ 0x99
10053ae2:	61bb      	str	r3, [r7, #24]
10053ae4:	e001      	b.n	10053aea <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
10053ae6:	233b      	movs	r3, #59	@ 0x3b
10053ae8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
10053aea:	69ba      	ldr	r2, [r7, #24]
10053aec:	69fb      	ldr	r3, [r7, #28]
10053aee:	18d3      	adds	r3, r2, r3
10053af0:	697a      	ldr	r2, [r7, #20]
10053af2:	1ad3      	subs	r3, r2, r3
10053af4:	617b      	str	r3, [r7, #20]

    return Timeout;
10053af6:	697b      	ldr	r3, [r7, #20]
}
10053af8:	0018      	movs	r0, r3
10053afa:	46bd      	mov	sp, r7
10053afc:	b008      	add	sp, #32
10053afe:	bd80      	pop	{r7, pc}

10053b00 <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
10053b00:	b580      	push	{r7, lr}
10053b02:	b082      	sub	sp, #8
10053b04:	af00      	add	r7, sp, #0
10053b06:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
10053b08:	687b      	ldr	r3, [r7, #4]
10053b0a:	0018      	movs	r0, r3
10053b0c:	f7ff ff6c 	bl	100539e8 <LL_RADIO_BlueSetInterrupt1RegRegister>
}
10053b10:	46c0      	nop			@ (mov r8, r8)
10053b12:	46bd      	mov	sp, r7
10053b14:	b002      	add	sp, #8
10053b16:	bd80      	pop	{r7, pc}

10053b18 <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
10053b18:	b580      	push	{r7, lr}
10053b1a:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10053b1c:	2001      	movs	r0, #1
10053b1e:	f7ff ff7d 	bl	10053a1c <LL_RADIO_BlueSetClearSemaphoreRequest>
}
10053b22:	46c0      	nop			@ (mov r8, r8)
10053b24:	46bd      	mov	sp, r7
10053b26:	bd80      	pop	{r7, pc}

10053b28 <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
10053b28:	b580      	push	{r7, lr}
10053b2a:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10053b2c:	f7ff f8dc 	bl	10052ce8 <LL_RADIO_GlobalDisableBlue>
}
10053b30:	46c0      	nop			@ (mov r8, r8)
10053b32:	46bd      	mov	sp, r7
10053b34:	bd80      	pop	{r7, pc}

10053b36 <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
10053b36:	b580      	push	{r7, lr}
10053b38:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
10053b3a:	f7ff f8c7 	bl	10052ccc <LL_RADIO_GlobalEnableBlue>
}
10053b3e:	46c0      	nop			@ (mov r8, r8)
10053b40:	46bd      	mov	sp, r7
10053b42:	bd80      	pop	{r7, pc}

10053b44 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10053b44:	b580      	push	{r7, lr}
10053b46:	b082      	sub	sp, #8
10053b48:	af00      	add	r7, sp, #0
10053b4a:	0002      	movs	r2, r0
10053b4c:	1dfb      	adds	r3, r7, #7
10053b4e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
10053b50:	1dfb      	adds	r3, r7, #7
10053b52:	781b      	ldrb	r3, [r3, #0]
10053b54:	0018      	movs	r0, r3
10053b56:	f7ff f8a3 	bl	10052ca0 <LL_RADIO_SetCurrentConnectionMachineNumber>
}
10053b5a:	46c0      	nop			@ (mov r8, r8)
10053b5c:	46bd      	mov	sp, r7
10053b5e:	b002      	add	sp, #8
10053b60:	bd80      	pop	{r7, pc}
	...

10053b64 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10053b64:	b580      	push	{r7, lr}
10053b66:	b082      	sub	sp, #8
10053b68:	af00      	add	r7, sp, #0
10053b6a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10053b6c:	687b      	ldr	r3, [r7, #4]
10053b6e:	4a03      	ldr	r2, [pc, #12]	@ (10053b7c <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
10053b70:	4013      	ands	r3, r2
}
10053b72:	0018      	movs	r0, r3
10053b74:	46bd      	mov	sp, r7
10053b76:	b002      	add	sp, #8
10053b78:	bd80      	pop	{r7, pc}
10053b7a:	46c0      	nop			@ (mov r8, r8)
10053b7c:	00c9df30 	.word	0x00c9df30

10053b80 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
10053b80:	b580      	push	{r7, lr}
10053b82:	b082      	sub	sp, #8
10053b84:	af00      	add	r7, sp, #0
10053b86:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
10053b88:	687a      	ldr	r2, [r7, #4]
10053b8a:	2380      	movs	r3, #128	@ 0x80
10053b8c:	03db      	lsls	r3, r3, #15
10053b8e:	4013      	ands	r3, r2
}
10053b90:	0018      	movs	r0, r3
10053b92:	46bd      	mov	sp, r7
10053b94:	b002      	add	sp, #8
10053b96:	bd80      	pop	{r7, pc}

10053b98 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
10053b98:	b580      	push	{r7, lr}
10053b9a:	b082      	sub	sp, #8
10053b9c:	af00      	add	r7, sp, #0
10053b9e:	6078      	str	r0, [r7, #4]
    return 0;
10053ba0:	2300      	movs	r3, #0
}
10053ba2:	0018      	movs	r0, r3
10053ba4:	46bd      	mov	sp, r7
10053ba6:	b002      	add	sp, #8
10053ba8:	bd80      	pop	{r7, pc}

10053baa <BLEPLAT_CNTR_IntGetIntStatusCrcErr>:

#if defined(BLUE_STATUSREG_RCVCRCERR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusCrcErr(uint32_t x)
{
10053baa:	b580      	push	{r7, lr}
10053bac:	b082      	sub	sp, #8
10053bae:	af00      	add	r7, sp, #0
10053bb0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVCRCERR_Msk);
10053bb2:	687a      	ldr	r2, [r7, #4]
10053bb4:	2380      	movs	r3, #128	@ 0x80
10053bb6:	05db      	lsls	r3, r3, #23
10053bb8:	4013      	ands	r3, r2
}
10053bba:	0018      	movs	r0, r3
10053bbc:	46bd      	mov	sp, r7
10053bbe:	b002      	add	sp, #8
10053bc0:	bd80      	pop	{r7, pc}

10053bc2 <BLEPLAT_CNTR_IntGetIntStatusDone>:
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
10053bc2:	b580      	push	{r7, lr}
10053bc4:	b082      	sub	sp, #8
10053bc6:	af00      	add	r7, sp, #0
10053bc8:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
10053bca:	687a      	ldr	r2, [r7, #4]
10053bcc:	2380      	movs	r3, #128	@ 0x80
10053bce:	049b      	lsls	r3, r3, #18
10053bd0:	4013      	ands	r3, r2
}
10053bd2:	0018      	movs	r0, r3
10053bd4:	46bd      	mov	sp, r7
10053bd6:	b002      	add	sp, #8
10053bd8:	bd80      	pop	{r7, pc}

10053bda <BLEPLAT_CNTR_IntGetIntStatusEncErr>:
#endif

#if defined(BLUE_STATUSREG_ENCERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusEncErr(uint32_t x)
{
10053bda:	b580      	push	{r7, lr}
10053bdc:	b082      	sub	sp, #8
10053bde:	af00      	add	r7, sp, #0
10053be0:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ENCERROR_Msk);
10053be2:	687a      	ldr	r2, [r7, #4]
10053be4:	2380      	movs	r3, #128	@ 0x80
10053be6:	019b      	lsls	r3, r3, #6
10053be8:	4013      	ands	r3, r2
}
10053bea:	0018      	movs	r0, r3
10053bec:	46bd      	mov	sp, r7
10053bee:	b002      	add	sp, #8
10053bf0:	bd80      	pop	{r7, pc}

10053bf2 <BLEPLAT_CNTR_IntGetIntStatusLenErr>:
#endif

#if defined(BLUE_STATUSREG_RCVLENGTHERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusLenErr(uint32_t x)
{
10053bf2:	b580      	push	{r7, lr}
10053bf4:	b082      	sub	sp, #8
10053bf6:	af00      	add	r7, sp, #0
10053bf8:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVLENGTHERROR_Msk);
10053bfa:	687a      	ldr	r2, [r7, #4]
10053bfc:	2380      	movs	r3, #128	@ 0x80
10053bfe:	02db      	lsls	r3, r3, #11
10053c00:	4013      	ands	r3, r2
}
10053c02:	0018      	movs	r0, r3
10053c04:	46bd      	mov	sp, r7
10053c06:	b002      	add	sp, #8
10053c08:	bd80      	pop	{r7, pc}

10053c0a <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
10053c0a:	b580      	push	{r7, lr}
10053c0c:	b082      	sub	sp, #8
10053c0e:	af00      	add	r7, sp, #0
10053c10:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
10053c12:	687a      	ldr	r2, [r7, #4]
10053c14:	2380      	movs	r3, #128	@ 0x80
10053c16:	025b      	lsls	r3, r3, #9
10053c18:	4013      	ands	r3, r2
}
10053c1a:	0018      	movs	r0, r3
10053c1c:	46bd      	mov	sp, r7
10053c1e:	b002      	add	sp, #8
10053c20:	bd80      	pop	{r7, pc}

10053c22 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
10053c22:	b580      	push	{r7, lr}
10053c24:	b082      	sub	sp, #8
10053c26:	af00      	add	r7, sp, #0
10053c28:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
10053c2a:	687a      	ldr	r2, [r7, #4]
10053c2c:	2380      	movs	r3, #128	@ 0x80
10053c2e:	039b      	lsls	r3, r3, #14
10053c30:	4013      	ands	r3, r2
}
10053c32:	0018      	movs	r0, r3
10053c34:	46bd      	mov	sp, r7
10053c36:	b002      	add	sp, #8
10053c38:	bd80      	pop	{r7, pc}

10053c3a <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
10053c3a:	b580      	push	{r7, lr}
10053c3c:	b082      	sub	sp, #8
10053c3e:	af00      	add	r7, sp, #0
10053c40:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
10053c42:	687a      	ldr	r2, [r7, #4]
10053c44:	2380      	movs	r3, #128	@ 0x80
10053c46:	009b      	lsls	r3, r3, #2
10053c48:	4013      	ands	r3, r2
}
10053c4a:	0018      	movs	r0, r3
10053c4c:	46bd      	mov	sp, r7
10053c4e:	b002      	add	sp, #8
10053c50:	bd80      	pop	{r7, pc}

10053c52 <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
10053c52:	b580      	push	{r7, lr}
10053c54:	b082      	sub	sp, #8
10053c56:	af00      	add	r7, sp, #0
10053c58:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
10053c5a:	687a      	ldr	r2, [r7, #4]
10053c5c:	2380      	movs	r3, #128	@ 0x80
10053c5e:	011b      	lsls	r3, r3, #4
10053c60:	4013      	ands	r3, r2
}
10053c62:	0018      	movs	r0, r3
10053c64:	46bd      	mov	sp, r7
10053c66:	b002      	add	sp, #8
10053c68:	bd80      	pop	{r7, pc}

10053c6a <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
10053c6a:	b580      	push	{r7, lr}
10053c6c:	b082      	sub	sp, #8
10053c6e:	af00      	add	r7, sp, #0
10053c70:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
10053c72:	687b      	ldr	r3, [r7, #4]
10053c74:	0fdb      	lsrs	r3, r3, #31
10053c76:	07db      	lsls	r3, r3, #31
}
10053c78:	0018      	movs	r0, r3
10053c7a:	46bd      	mov	sp, r7
10053c7c:	b002      	add	sp, #8
10053c7e:	bd80      	pop	{r7, pc}

10053c80 <BLEPLAT_CNTR_IntGetIntStatusTimeout>:
#endif

#if defined(BLUE_STATUSREG_RCVTIMEOUT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTimeout(uint32_t x)
{
10053c80:	b580      	push	{r7, lr}
10053c82:	b082      	sub	sp, #8
10053c84:	af00      	add	r7, sp, #0
10053c86:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVTIMEOUT_Msk);
10053c88:	687a      	ldr	r2, [r7, #4]
10053c8a:	2380      	movs	r3, #128	@ 0x80
10053c8c:	04db      	lsls	r3, r3, #19
10053c8e:	4013      	ands	r3, r2
}
10053c90:	0018      	movs	r0, r3
10053c92:	46bd      	mov	sp, r7
10053c94:	b002      	add	sp, #8
10053c96:	bd80      	pop	{r7, pc}

10053c98 <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
10053c98:	b580      	push	{r7, lr}
10053c9a:	b082      	sub	sp, #8
10053c9c:	af00      	add	r7, sp, #0
10053c9e:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
10053ca0:	687b      	ldr	r3, [r7, #4]
10053ca2:	2240      	movs	r2, #64	@ 0x40
10053ca4:	4013      	ands	r3, r2
}
10053ca6:	0018      	movs	r0, r3
10053ca8:	46bd      	mov	sp, r7
10053caa:	b002      	add	sp, #8
10053cac:	bd80      	pop	{r7, pc}

10053cae <BLEPLAT_CNTR_IntGetIntStatusTxOk>:
#endif

#if defined(BLUE_STATUSREG_TXOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxOk(uint32_t x)
{
10053cae:	b580      	push	{r7, lr}
10053cb0:	b082      	sub	sp, #8
10053cb2:	af00      	add	r7, sp, #0
10053cb4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXOK_Msk);
10053cb6:	687a      	ldr	r2, [r7, #4]
10053cb8:	2380      	movs	r3, #128	@ 0x80
10053cba:	045b      	lsls	r3, r3, #17
10053cbc:	4013      	ands	r3, r2
}
10053cbe:	0018      	movs	r0, r3
10053cc0:	46bd      	mov	sp, r7
10053cc2:	b002      	add	sp, #8
10053cc4:	bd80      	pop	{r7, pc}

10053cc6 <BLEPLAT_CNTR_PacketClrCteSamplingEn>:
{
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketClrCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053cc6:	b580      	push	{r7, lr}
10053cc8:	b082      	sub	sp, #8
10053cca:	af00      	add	r7, sp, #0
10053ccc:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x0);
10053cce:	687b      	ldr	r3, [r7, #4]
10053cd0:	2100      	movs	r1, #0
10053cd2:	0018      	movs	r0, r3
10053cd4:	f7ff fd17 	bl	10053706 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10053cd8:	46c0      	nop			@ (mov r8, r8)
10053cda:	46bd      	mov	sp, r7
10053cdc:	b002      	add	sp, #8
10053cde:	bd80      	pop	{r7, pc}

10053ce0 <BLEPLAT_CNTR_PacketClrIncChan>:

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053ce0:	b580      	push	{r7, lr}
10053ce2:	b082      	sub	sp, #8
10053ce4:	af00      	add	r7, sp, #0
10053ce6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
10053ce8:	687b      	ldr	r3, [r7, #4]
10053cea:	0018      	movs	r0, r3
10053cec:	f7ff fd66 	bl	100537bc <LL_RADIO_IncrementerChannel_Disable>
}
10053cf0:	46c0      	nop			@ (mov r8, r8)
10053cf2:	46bd      	mov	sp, r7
10053cf4:	b002      	add	sp, #8
10053cf6:	bd80      	pop	{r7, pc}

10053cf8 <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053cf8:	b580      	push	{r7, lr}
10053cfa:	b082      	sub	sp, #8
10053cfc:	af00      	add	r7, sp, #0
10053cfe:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10053d00:	687b      	ldr	r3, [r7, #4]
10053d02:	2100      	movs	r1, #0
10053d04:	0018      	movs	r0, r3
10053d06:	f7ff fcd5 	bl	100536b4 <LL_RADIO_SetCalibrationRequest>
}
10053d0a:	46c0      	nop			@ (mov r8, r8)
10053d0c:	46bd      	mov	sp, r7
10053d0e:	b002      	add	sp, #8
10053d10:	bd80      	pop	{r7, pc}

10053d12 <BLEPLAT_CNTR_PacketGetDataPtr>:
#endif

}

uint8_t* BLEPLAT_CNTR_PacketGetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053d12:	b580      	push	{r7, lr}
10053d14:	b082      	sub	sp, #8
10053d16:	af00      	add	r7, sp, #0
10053d18:	6078      	str	r0, [r7, #4]
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
10053d1a:	687b      	ldr	r3, [r7, #4]
10053d1c:	0018      	movs	r0, r3
10053d1e:	f7ff fdb3 	bl	10053888 <LL_RADIO_GetDataPointer>
10053d22:	0003      	movs	r3, r0
}
10053d24:	0018      	movs	r0, r3
10053d26:	46bd      	mov	sp, r7
10053d28:	b002      	add	sp, #8
10053d2a:	bd80      	pop	{r7, pc}

10053d2c <BLEPLAT_CNTR_PacketInitTo0>:

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053d2c:	b580      	push	{r7, lr}
10053d2e:	b082      	sub	sp, #8
10053d30:	af00      	add	r7, sp, #0
10053d32:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10053d34:	687b      	ldr	r3, [r7, #4]
10053d36:	2210      	movs	r2, #16
10053d38:	2100      	movs	r1, #0
10053d3a:	0018      	movs	r0, r3
10053d3c:	f014 f888 	bl	10067e50 <memset>
}
10053d40:	46c0      	nop			@ (mov r8, r8)
10053d42:	46bd      	mov	sp, r7
10053d44:	b002      	add	sp, #8
10053d46:	bd80      	pop	{r7, pc}

10053d48 <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053d48:	b580      	push	{r7, lr}
10053d4a:	b082      	sub	sp, #8
10053d4c:	af00      	add	r7, sp, #0
10053d4e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053d50:	687b      	ldr	r3, [r7, #4]
10053d52:	2101      	movs	r1, #1
10053d54:	0018      	movs	r0, r3
10053d56:	f7ff fd00 	bl	1005375a <LL_RADIO_SetAdvertise>
}
10053d5a:	46c0      	nop			@ (mov r8, r8)
10053d5c:	46bd      	mov	sp, r7
10053d5e:	b002      	add	sp, #8
10053d60:	bd80      	pop	{r7, pc}

10053d62 <BLEPLAT_CNTR_PacketSetCrcinitSel>:

void BLEPLAT_CNTR_PacketSetCrcinitSel(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053d62:	b580      	push	{r7, lr}
10053d64:	b082      	sub	sp, #8
10053d66:	af00      	add	r7, sp, #0
10053d68:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053d6a:	687b      	ldr	r3, [r7, #4]
10053d6c:	2101      	movs	r1, #1
10053d6e:	0018      	movs	r0, r3
10053d70:	f7ff fcde 	bl	10053730 <LL_RADIO_SetCRCInitializationSelector>
}
10053d74:	46c0      	nop			@ (mov r8, r8)
10053d76:	46bd      	mov	sp, r7
10053d78:	b002      	add	sp, #8
10053d7a:	bd80      	pop	{r7, pc}

10053d7c <BLEPLAT_CNTR_PacketSetCteSamplingEn>:

void BLEPLAT_CNTR_PacketSetCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053d7c:	b580      	push	{r7, lr}
10053d7e:	b082      	sub	sp, #8
10053d80:	af00      	add	r7, sp, #0
10053d82:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x01);
10053d84:	687b      	ldr	r3, [r7, #4]
10053d86:	2101      	movs	r1, #1
10053d88:	0018      	movs	r0, r3
10053d8a:	f7ff fcbc 	bl	10053706 <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10053d8e:	46c0      	nop			@ (mov r8, r8)
10053d90:	46bd      	mov	sp, r7
10053d92:	b002      	add	sp, #8
10053d94:	bd80      	pop	{r7, pc}

10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
10053d96:	b580      	push	{r7, lr}
10053d98:	b082      	sub	sp, #8
10053d9a:	af00      	add	r7, sp, #0
10053d9c:	6078      	str	r0, [r7, #4]
10053d9e:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
10053da0:	683a      	ldr	r2, [r7, #0]
10053da2:	687b      	ldr	r3, [r7, #4]
10053da4:	0011      	movs	r1, r2
10053da6:	0018      	movs	r0, r3
10053da8:	f7ff fd60 	bl	1005386c <LL_RADIO_SetDataPointer>
}
10053dac:	46c0      	nop			@ (mov r8, r8)
10053dae:	46bd      	mov	sp, r7
10053db0:	b002      	add	sp, #8
10053db2:	bd80      	pop	{r7, pc}

10053db4 <BLEPLAT_CNTR_PacketSetIncChan>:

void BLEPLAT_CNTR_PacketSetIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053db4:	b580      	push	{r7, lr}
10053db6:	b082      	sub	sp, #8
10053db8:	af00      	add	r7, sp, #0
10053dba:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Enable((TXRXPACK_TypeDef*)packetP);
10053dbc:	687b      	ldr	r3, [r7, #4]
10053dbe:	0018      	movs	r0, r3
10053dc0:	f7ff fcee 	bl	100537a0 <LL_RADIO_IncrementerChannel_Enable>
}
10053dc4:	46c0      	nop			@ (mov r8, r8)
10053dc6:	46bd      	mov	sp, r7
10053dc8:	b002      	add	sp, #8
10053dca:	bd80      	pop	{r7, pc}

10053dcc <BLEPLAT_CNTR_PacketSetIntCrcErr>:

void BLEPLAT_CNTR_PacketSetIntCrcErr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053dcc:	b580      	push	{r7, lr}
10053dce:	b082      	sub	sp, #8
10053dd0:	af00      	add	r7, sp, #0
10053dd2:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
10053dd4:	687b      	ldr	r3, [r7, #4]
10053dd6:	0018      	movs	r0, r3
10053dd8:	f7ff fde8 	bl	100539ac <LL_RADIO_IntRcvCRCErr_Enable>
}
10053ddc:	46c0      	nop			@ (mov r8, r8)
10053dde:	46bd      	mov	sp, r7
10053de0:	b002      	add	sp, #8
10053de2:	bd80      	pop	{r7, pc}

10053de4 <BLEPLAT_CNTR_PacketSetIntDone>:

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053de4:	b580      	push	{r7, lr}
10053de6:	b082      	sub	sp, #8
10053de8:	af00      	add	r7, sp, #0
10053dea:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
10053dec:	687b      	ldr	r3, [r7, #4]
10053dee:	0018      	movs	r0, r3
10053df0:	f7ff fdbe 	bl	10053970 <LL_RADIO_IntDone_Enable>
}
10053df4:	46c0      	nop			@ (mov r8, r8)
10053df6:	46bd      	mov	sp, r7
10053df8:	b002      	add	sp, #8
10053dfa:	bd80      	pop	{r7, pc}

10053dfc <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053dfc:	b580      	push	{r7, lr}
10053dfe:	b082      	sub	sp, #8
10053e00:	af00      	add	r7, sp, #0
10053e02:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
10053e04:	687b      	ldr	r3, [r7, #4]
10053e06:	0018      	movs	r0, r3
10053e08:	f7ff fddf 	bl	100539ca <LL_RADIO_IntRcvOk_Enable>
}
10053e0c:	46c0      	nop			@ (mov r8, r8)
10053e0e:	46bd      	mov	sp, r7
10053e10:	b002      	add	sp, #8
10053e12:	bd80      	pop	{r7, pc}

10053e14 <BLEPLAT_CNTR_PacketSetIntTimeout>:

void BLEPLAT_CNTR_PacketSetIntTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053e14:	b580      	push	{r7, lr}
10053e16:	b082      	sub	sp, #8
10053e18:	af00      	add	r7, sp, #0
10053e1a:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvTimeout_Enable((TXRXPACK_TypeDef*)packetP);
10053e1c:	687b      	ldr	r3, [r7, #4]
10053e1e:	0018      	movs	r0, r3
10053e20:	f7ff fdb5 	bl	1005398e <LL_RADIO_IntRcvTimeout_Enable>
}
10053e24:	46c0      	nop			@ (mov r8, r8)
10053e26:	46bd      	mov	sp, r7
10053e28:	b002      	add	sp, #8
10053e2a:	bd80      	pop	{r7, pc}

10053e2c <BLEPLAT_CNTR_PacketSetIntTxOk>:
{
  LL_RADIO_SetIntTimeCapture((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1U);
}

void BLEPLAT_CNTR_PacketSetIntTxOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053e2c:	b580      	push	{r7, lr}
10053e2e:	b082      	sub	sp, #8
10053e30:	af00      	add	r7, sp, #0
10053e32:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053e34:	687b      	ldr	r3, [r7, #4]
10053e36:	2101      	movs	r1, #1
10053e38:	0018      	movs	r0, r3
10053e3a:	f7ff fd81 	bl	10053940 <LL_RADIO_SetIntTxOk>
}
10053e3e:	46c0      	nop			@ (mov r8, r8)
10053e40:	46bd      	mov	sp, r7
10053e42:	b002      	add	sp, #8
10053e44:	bd80      	pop	{r7, pc}

10053e46 <BLEPLAT_CNTR_PacketSetKeepsemareq>:

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053e46:	b580      	push	{r7, lr}
10053e48:	b082      	sub	sp, #8
10053e4a:	af00      	add	r7, sp, #0
10053e4c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053e4e:	687b      	ldr	r3, [r7, #4]
10053e50:	2101      	movs	r1, #1
10053e52:	0018      	movs	r0, r3
10053e54:	f7ff fc42 	bl	100536dc <LL_RADIO_SetKeepSemaRequest>
}
10053e58:	46c0      	nop			@ (mov r8, r8)
10053e5a:	46bd      	mov	sp, r7
10053e5c:	b002      	add	sp, #8
10053e5e:	bd80      	pop	{r7, pc}

10053e60 <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
10053e60:	b580      	push	{r7, lr}
10053e62:	b082      	sub	sp, #8
10053e64:	af00      	add	r7, sp, #0
10053e66:	6078      	str	r0, [r7, #4]
10053e68:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
10053e6a:	683a      	ldr	r2, [r7, #0]
10053e6c:	687b      	ldr	r3, [r7, #4]
10053e6e:	0011      	movs	r1, r2
10053e70:	0018      	movs	r0, r3
10053e72:	f7ff fc11 	bl	10053698 <LL_RADIO_SetNextPointer>
}
10053e76:	46c0      	nop			@ (mov r8, r8)
10053e78:	46bd      	mov	sp, r7
10053e7a:	b002      	add	sp, #8
10053e7c:	bd80      	pop	{r7, pc}

10053e7e <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053e7e:	b580      	push	{r7, lr}
10053e80:	b082      	sub	sp, #8
10053e82:	af00      	add	r7, sp, #0
10053e84:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10053e86:	687b      	ldr	r3, [r7, #4]
10053e88:	2100      	movs	r1, #0
10053e8a:	0018      	movs	r0, r3
10053e8c:	f7ff fca6 	bl	100537dc <LL_RADIO_SetNextTxMode>
}
10053e90:	46c0      	nop			@ (mov r8, r8)
10053e92:	46bd      	mov	sp, r7
10053e94:	b002      	add	sp, #8
10053e96:	bd80      	pop	{r7, pc}

10053e98 <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
10053e98:	b580      	push	{r7, lr}
10053e9a:	b082      	sub	sp, #8
10053e9c:	af00      	add	r7, sp, #0
10053e9e:	6078      	str	r0, [r7, #4]
10053ea0:	000a      	movs	r2, r1
10053ea2:	1cfb      	adds	r3, r7, #3
10053ea4:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
10053ea6:	46c0      	nop			@ (mov r8, r8)
10053ea8:	46bd      	mov	sp, r7
10053eaa:	b002      	add	sp, #8
10053eac:	bd80      	pop	{r7, pc}

10053eae <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053eae:	b580      	push	{r7, lr}
10053eb0:	b082      	sub	sp, #8
10053eb2:	af00      	add	r7, sp, #0
10053eb4:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053eb6:	687b      	ldr	r3, [r7, #4]
10053eb8:	2101      	movs	r1, #1
10053eba:	0018      	movs	r0, r3
10053ebc:	f7ff fc8e 	bl	100537dc <LL_RADIO_SetNextTxMode>
}
10053ec0:	46c0      	nop			@ (mov r8, r8)
10053ec2:	46bd      	mov	sp, r7
10053ec4:	b002      	add	sp, #8
10053ec6:	bd80      	pop	{r7, pc}

10053ec8 <BLEPLAT_CNTR_PacketSetNsEn>:

void BLEPLAT_CNTR_PacketSetNsEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053ec8:	b580      	push	{r7, lr}
10053eca:	b082      	sub	sp, #8
10053ecc:	af00      	add	r7, sp, #0
10053ece:	6078      	str	r0, [r7, #4]
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
10053ed0:	687b      	ldr	r3, [r7, #4]
10053ed2:	0018      	movs	r0, r3
10053ed4:	f7ff fc56 	bl	10053784 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>
}
10053ed8:	46c0      	nop			@ (mov r8, r8)
10053eda:	46bd      	mov	sp, r7
10053edc:	b002      	add	sp, #8
10053ede:	bd80      	pop	{r7, pc}

10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>:

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053ee0:	b580      	push	{r7, lr}
10053ee2:	b082      	sub	sp, #8
10053ee4:	af00      	add	r7, sp, #0
10053ee6:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053ee8:	687b      	ldr	r3, [r7, #4]
10053eea:	2101      	movs	r1, #1
10053eec:	0018      	movs	r0, r3
10053eee:	f7ff fbe1 	bl	100536b4 <LL_RADIO_SetCalibrationRequest>
}
10053ef2:	46c0      	nop			@ (mov r8, r8)
10053ef4:	46bd      	mov	sp, r7
10053ef6:	b002      	add	sp, #8
10053ef8:	bd80      	pop	{r7, pc}

10053efa <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053efa:	b580      	push	{r7, lr}
10053efc:	b082      	sub	sp, #8
10053efe:	af00      	add	r7, sp, #0
10053f00:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053f02:	687b      	ldr	r3, [r7, #4]
10053f04:	2101      	movs	r1, #1
10053f06:	0018      	movs	r0, r3
10053f08:	f7ff fc80 	bl	1005380c <LL_RADIO_SetAllTableDataReady>
}
10053f0c:	46c0      	nop			@ (mov r8, r8)
10053f0e:	46bd      	mov	sp, r7
10053f10:	b002      	add	sp, #8
10053f12:	bd80      	pop	{r7, pc}

10053f14 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10053f14:	b580      	push	{r7, lr}
10053f16:	b082      	sub	sp, #8
10053f18:	af00      	add	r7, sp, #0
10053f1a:	6078      	str	r0, [r7, #4]
10053f1c:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
10053f1e:	683a      	ldr	r2, [r7, #0]
10053f20:	687b      	ldr	r3, [r7, #4]
10053f22:	0011      	movs	r1, r2
10053f24:	0018      	movs	r0, r3
10053f26:	f7ff fcb9 	bl	1005389c <LL_RADIO_SetTimer2Triggering>
}
10053f2a:	46c0      	nop			@ (mov r8, r8)
10053f2c:	46bd      	mov	sp, r7
10053f2e:	b002      	add	sp, #8
10053f30:	bd80      	pop	{r7, pc}

10053f32 <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053f32:	b580      	push	{r7, lr}
10053f34:	b082      	sub	sp, #8
10053f36:	af00      	add	r7, sp, #0
10053f38:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
10053f3a:	687b      	ldr	r3, [r7, #4]
10053f3c:	0018      	movs	r0, r3
10053f3e:	f7ff fcc0 	bl	100538c2 <LL_RADIO_Timer2_Enable>
}
10053f42:	46c0      	nop			@ (mov r8, r8)
10053f44:	46bd      	mov	sp, r7
10053f46:	b002      	add	sp, #8
10053f48:	bd80      	pop	{r7, pc}

10053f4a <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053f4a:	b580      	push	{r7, lr}
10053f4c:	b082      	sub	sp, #8
10053f4e:	af00      	add	r7, sp, #0
10053f50:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053f52:	687b      	ldr	r3, [r7, #4]
10053f54:	2101      	movs	r1, #1
10053f56:	0018      	movs	r0, r3
10053f58:	f7ff fcda 	bl	10053910 <LL_RADIO_SetTrigDone>
}
10053f5c:	46c0      	nop			@ (mov r8, r8)
10053f5e:	46bd      	mov	sp, r7
10053f60:	b002      	add	sp, #8
10053f62:	bd80      	pop	{r7, pc}

10053f64 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053f64:	b580      	push	{r7, lr}
10053f66:	b082      	sub	sp, #8
10053f68:	af00      	add	r7, sp, #0
10053f6a:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053f6c:	687b      	ldr	r3, [r7, #4]
10053f6e:	2101      	movs	r1, #1
10053f70:	0018      	movs	r0, r3
10053f72:	f7ff fcb5 	bl	100538e0 <LL_RADIO_SetTrigRcv>
}
10053f76:	46c0      	nop			@ (mov r8, r8)
10053f78:	46bd      	mov	sp, r7
10053f7a:	b002      	add	sp, #8
10053f7c:	bd80      	pop	{r7, pc}

10053f7e <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053f7e:	b580      	push	{r7, lr}
10053f80:	b082      	sub	sp, #8
10053f82:	af00      	add	r7, sp, #0
10053f84:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053f86:	687b      	ldr	r3, [r7, #4]
10053f88:	2101      	movs	r1, #1
10053f8a:	0018      	movs	r0, r3
10053f8c:	f7ff fc56 	bl	1005383c <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053f90:	687b      	ldr	r3, [r7, #4]
10053f92:	2101      	movs	r1, #1
10053f94:	0018      	movs	r0, r3
10053f96:	f7ff fc39 	bl	1005380c <LL_RADIO_SetAllTableDataReady>
}
10053f9a:	46c0      	nop			@ (mov r8, r8)
10053f9c:	46bd      	mov	sp, r7
10053f9e:	b002      	add	sp, #8
10053fa0:	bd80      	pop	{r7, pc}

10053fa2 <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
10053fa2:	b580      	push	{r7, lr}
10053fa4:	b082      	sub	sp, #8
10053fa6:	af00      	add	r7, sp, #0
10053fa8:	6078      	str	r0, [r7, #4]
10053faa:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
10053fac:	683b      	ldr	r3, [r7, #0]
10053fae:	031b      	lsls	r3, r3, #12
10053fb0:	0b1b      	lsrs	r3, r3, #12
10053fb2:	0018      	movs	r0, r3
10053fb4:	f7fe fea6 	bl	10052d04 <LL_RADIO_SetReceiveWindowTimeout>
}
10053fb8:	46c0      	nop			@ (mov r8, r8)
10053fba:	46bd      	mov	sp, r7
10053fbc:	b002      	add	sp, #8
10053fbe:	bd80      	pop	{r7, pc}

10053fc0 <BLEPLAT_CNTR_SmCteOff>:

void BLEPLAT_CNTR_SmCteOff(uint8_t smNo)
{
10053fc0:	b580      	push	{r7, lr}
10053fc2:	b082      	sub	sp, #8
10053fc4:	af00      	add	r7, sp, #0
10053fc6:	0002      	movs	r2, r0
10053fc8:	1dfb      	adds	r3, r7, #7
10053fca:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEDisable(smNo, 0x01);
10053fcc:	1dfb      	adds	r3, r7, #7
10053fce:	781b      	ldrb	r3, [r3, #0]
10053fd0:	2101      	movs	r1, #1
10053fd2:	0018      	movs	r0, r3
10053fd4:	f7ff f848 	bl	10053068 <LL_RADIO_SetCTEDisable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10053fd8:	46c0      	nop			@ (mov r8, r8)
10053fda:	46bd      	mov	sp, r7
10053fdc:	b002      	add	sp, #8
10053fde:	bd80      	pop	{r7, pc}

10053fe0 <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
10053fe0:	b580      	push	{r7, lr}
10053fe2:	b082      	sub	sp, #8
10053fe4:	af00      	add	r7, sp, #0
10053fe6:	0002      	movs	r2, r0
10053fe8:	6039      	str	r1, [r7, #0]
10053fea:	1dfb      	adds	r3, r7, #7
10053fec:	701a      	strb	r2, [r3, #0]
    if(enable)
10053fee:	683b      	ldr	r3, [r7, #0]
10053ff0:	2b00      	cmp	r3, #0
10053ff2:	d005      	beq.n	10054000 <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10053ff4:	1dfb      	adds	r3, r7, #7
10053ff6:	781b      	ldrb	r3, [r3, #0]
10053ff8:	0018      	movs	r0, r3
10053ffa:	f7fe fec1 	bl	10052d80 <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
10053ffe:	e004      	b.n	1005400a <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
10054000:	1dfb      	adds	r3, r7, #7
10054002:	781b      	ldrb	r3, [r3, #0]
10054004:	0018      	movs	r0, r3
10054006:	f7fe fed9 	bl	10052dbc <LL_RADIO_RadioCommandList_Disable>
}
1005400a:	46c0      	nop			@ (mov r8, r8)
1005400c:	46bd      	mov	sp, r7
1005400e:	b002      	add	sp, #8
10054010:	bd80      	pop	{r7, pc}

10054012 <BLEPLAT_CNTR_SmEncOff>:

void BLEPLAT_CNTR_SmEncOff(uint8_t smNo)
{
10054012:	b580      	push	{r7, lr}
10054014:	b082      	sub	sp, #8
10054016:	af00      	add	r7, sp, #0
10054018:	0002      	movs	r2, r0
1005401a:	1dfb      	adds	r3, r7, #7
1005401c:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Disable(smNo);
1005401e:	1dfb      	adds	r3, r7, #7
10054020:	781b      	ldrb	r3, [r3, #0]
10054022:	0018      	movs	r0, r3
10054024:	f7fe ffc0 	bl	10052fa8 <LL_RADIO_Encryption_Disable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(smNo);
10054028:	1dfb      	adds	r3, r7, #7
1005402a:	781b      	ldrb	r3, [r3, #0]
1005402c:	0018      	movs	r0, r3
1005402e:	f7ff f9ad 	bl	1005338c <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>
}
10054032:	46c0      	nop			@ (mov r8, r8)
10054034:	46bd      	mov	sp, r7
10054036:	b002      	add	sp, #8
10054038:	bd80      	pop	{r7, pc}

1005403a <BLEPLAT_CNTR_SmEncOn>:

void BLEPLAT_CNTR_SmEncOn(uint8_t smNo)
{
1005403a:	b580      	push	{r7, lr}
1005403c:	b082      	sub	sp, #8
1005403e:	af00      	add	r7, sp, #0
10054040:	0002      	movs	r2, r0
10054042:	1dfb      	adds	r3, r7, #7
10054044:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Enable(smNo);
10054046:	1dfb      	adds	r3, r7, #7
10054048:	781b      	ldrb	r3, [r3, #0]
1005404a:	0018      	movs	r0, r3
1005404c:	f7fe ff8c 	bl	10052f68 <LL_RADIO_Encryption_Enable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(smNo);
10054050:	1dfb      	adds	r3, r7, #7
10054052:	781b      	ldrb	r3, [r3, #0]
10054054:	0018      	movs	r0, r3
10054056:	f7ff f979 	bl	1005334c <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>
}
1005405a:	46c0      	nop			@ (mov r8, r8)
1005405c:	46bd      	mov	sp, r7
1005405e:	b002      	add	sp, #8
10054060:	bd80      	pop	{r7, pc}

10054062 <BLEPLAT_CNTR_SmGetAccessAddr>:

uint32_t BLEPLAT_CNTR_SmGetAccessAddr(uint8_t smNo)
{
10054062:	b580      	push	{r7, lr}
10054064:	b082      	sub	sp, #8
10054066:	af00      	add	r7, sp, #0
10054068:	0002      	movs	r2, r0
1005406a:	1dfb      	adds	r3, r7, #7
1005406c:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_GetAccessAddress(smNo);
1005406e:	1dfb      	adds	r3, r7, #7
10054070:	781b      	ldrb	r3, [r3, #0]
10054072:	0018      	movs	r0, r3
10054074:	f7ff f9c8 	bl	10053408 <LL_RADIO_GetAccessAddress>
10054078:	0003      	movs	r3, r0
}
1005407a:	0018      	movs	r0, r3
1005407c:	46bd      	mov	sp, r7
1005407e:	b002      	add	sp, #8
10054080:	bd80      	pop	{r7, pc}

10054082 <BLEPLAT_CNTR_SmGetChannelMap>:

void BLEPLAT_CNTR_SmGetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10054082:	b580      	push	{r7, lr}
10054084:	b082      	sub	sp, #8
10054086:	af00      	add	r7, sp, #0
10054088:	0002      	movs	r2, r0
1005408a:	6039      	str	r1, [r7, #0]
1005408c:	1dfb      	adds	r3, r7, #7
1005408e:	701a      	strb	r2, [r3, #0]
    chanMap[0] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo));
10054090:	1dfb      	adds	r3, r7, #7
10054092:	781b      	ldrb	r3, [r3, #0]
10054094:	0018      	movs	r0, r3
10054096:	f7ff faad 	bl	100535f4 <LL_RADIO_GetUsedChannelFlags_15_0>
1005409a:	0003      	movs	r3, r0
1005409c:	b2da      	uxtb	r2, r3
1005409e:	683b      	ldr	r3, [r7, #0]
100540a0:	701a      	strb	r2, [r3, #0]
    chanMap[1] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo) >> 8U);
100540a2:	1dfb      	adds	r3, r7, #7
100540a4:	781b      	ldrb	r3, [r3, #0]
100540a6:	0018      	movs	r0, r3
100540a8:	f7ff faa4 	bl	100535f4 <LL_RADIO_GetUsedChannelFlags_15_0>
100540ac:	0003      	movs	r3, r0
100540ae:	0a1a      	lsrs	r2, r3, #8
100540b0:	683b      	ldr	r3, [r7, #0]
100540b2:	3301      	adds	r3, #1
100540b4:	b2d2      	uxtb	r2, r2
100540b6:	701a      	strb	r2, [r3, #0]
    chanMap[2] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo));
100540b8:	1dfb      	adds	r3, r7, #7
100540ba:	781b      	ldrb	r3, [r3, #0]
100540bc:	0018      	movs	r0, r3
100540be:	f7ff fad5 	bl	1005366c <LL_RADIO_GetUsedChannelFlags_36_16>
100540c2:	0002      	movs	r2, r0
100540c4:	683b      	ldr	r3, [r7, #0]
100540c6:	3302      	adds	r3, #2
100540c8:	b2d2      	uxtb	r2, r2
100540ca:	701a      	strb	r2, [r3, #0]
    chanMap[3] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 8U);
100540cc:	1dfb      	adds	r3, r7, #7
100540ce:	781b      	ldrb	r3, [r3, #0]
100540d0:	0018      	movs	r0, r3
100540d2:	f7ff facb 	bl	1005366c <LL_RADIO_GetUsedChannelFlags_36_16>
100540d6:	0003      	movs	r3, r0
100540d8:	0a1a      	lsrs	r2, r3, #8
100540da:	683b      	ldr	r3, [r7, #0]
100540dc:	3303      	adds	r3, #3
100540de:	b2d2      	uxtb	r2, r2
100540e0:	701a      	strb	r2, [r3, #0]
    chanMap[4] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 16U);
100540e2:	1dfb      	adds	r3, r7, #7
100540e4:	781b      	ldrb	r3, [r3, #0]
100540e6:	0018      	movs	r0, r3
100540e8:	f7ff fac0 	bl	1005366c <LL_RADIO_GetUsedChannelFlags_36_16>
100540ec:	0003      	movs	r3, r0
100540ee:	0c1a      	lsrs	r2, r3, #16
100540f0:	683b      	ldr	r3, [r7, #0]
100540f2:	3304      	adds	r3, #4
100540f4:	b2d2      	uxtb	r2, r2
100540f6:	701a      	strb	r2, [r3, #0]
}
100540f8:	46c0      	nop			@ (mov r8, r8)
100540fa:	46bd      	mov	sp, r7
100540fc:	b002      	add	sp, #8
100540fe:	bd80      	pop	{r7, pc}

10054100 <BLEPLAT_CNTR_SmGetEncIvPtr>:
  return (uint8_t)0;
#endif
}

uint32_t* BLEPLAT_CNTR_SmGetEncIvPtr(uint8_t smNo)
{
10054100:	b580      	push	{r7, lr}
10054102:	b082      	sub	sp, #8
10054104:	af00      	add	r7, sp, #0
10054106:	0002      	movs	r2, r0
10054108:	1dfb      	adds	r3, r7, #7
1005410a:	701a      	strb	r2, [r3, #0]
    return (uint32_t*)&(bluedata + smNo)->ENCRYPTIV[0];
1005410c:	1dfb      	adds	r3, r7, #7
1005410e:	781b      	ldrb	r3, [r3, #0]
10054110:	225c      	movs	r2, #92	@ 0x5c
10054112:	4353      	muls	r3, r2
10054114:	4a03      	ldr	r2, [pc, #12]	@ (10054124 <BLEPLAT_CNTR_SmGetEncIvPtr+0x24>)
10054116:	4694      	mov	ip, r2
10054118:	4463      	add	r3, ip
1005411a:	3338      	adds	r3, #56	@ 0x38
}
1005411c:	0018      	movs	r0, r3
1005411e:	46bd      	mov	sp, r7
10054120:	b002      	add	sp, #8
10054122:	bd80      	pop	{r7, pc}
10054124:	200000dc 	.word	0x200000dc

10054128 <BLEPLAT_CNTR_SmGetEncKeyPtr>:

uint32_t* BLEPLAT_CNTR_SmGetEncKeyPtr(uint8_t smNo)
{
10054128:	b580      	push	{r7, lr}
1005412a:	b082      	sub	sp, #8
1005412c:	af00      	add	r7, sp, #0
1005412e:	0002      	movs	r2, r0
10054130:	1dfb      	adds	r3, r7, #7
10054132:	701a      	strb	r2, [r3, #0]
	return (uint32_t*)&(bluedata + smNo)->ENCRYPTK[0];
10054134:	1dfb      	adds	r3, r7, #7
10054136:	781b      	ldrb	r3, [r3, #0]
10054138:	225c      	movs	r2, #92	@ 0x5c
1005413a:	4353      	muls	r3, r2
1005413c:	4a03      	ldr	r2, [pc, #12]	@ (1005414c <BLEPLAT_CNTR_SmGetEncKeyPtr+0x24>)
1005413e:	4694      	mov	ip, r2
10054140:	4463      	add	r3, ip
10054142:	3340      	adds	r3, #64	@ 0x40
}
10054144:	0018      	movs	r0, r3
10054146:	46bd      	mov	sp, r7
10054148:	b002      	add	sp, #8
1005414a:	bd80      	pop	{r7, pc}
1005414c:	200000dc 	.word	0x200000dc

10054150 <BLEPLAT_CNTR_SmGetHopIncr>:
{
    return (uint8_t)LL_RADIO_Encryption_IsEnabled(smNo);
}

uint8_t BLEPLAT_CNTR_SmGetHopIncr(uint8_t smNo)
{
10054150:	b580      	push	{r7, lr}
10054152:	b082      	sub	sp, #8
10054154:	af00      	add	r7, sp, #0
10054156:	0002      	movs	r2, r0
10054158:	1dfb      	adds	r3, r7, #7
1005415a:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetHopIncrement(smNo);
1005415c:	1dfb      	adds	r3, r7, #7
1005415e:	781b      	ldrb	r3, [r3, #0]
10054160:	0018      	movs	r0, r3
10054162:	f7ff fa0d 	bl	10053580 <LL_RADIO_GetHopIncrement>
10054166:	0003      	movs	r3, r0
10054168:	b2db      	uxtb	r3, r3
}
1005416a:	0018      	movs	r0, r3
1005416c:	46bd      	mov	sp, r7
1005416e:	b002      	add	sp, #8
10054170:	bd80      	pop	{r7, pc}

10054172 <BLEPLAT_CNTR_SmGetMode>:

uint8_t BLEPLAT_CNTR_SmGetMode(uint8_t smNo)
{
10054172:	b580      	push	{r7, lr}
10054174:	b082      	sub	sp, #8
10054176:	af00      	add	r7, sp, #0
10054178:	0002      	movs	r2, r0
1005417a:	1dfb      	adds	r3, r7, #7
1005417c:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_TxMode_IsEnabled(smNo);
1005417e:	1dfb      	adds	r3, r7, #7
10054180:	781b      	ldrb	r3, [r3, #0]
10054182:	0018      	movs	r0, r3
10054184:	f7fe fe74 	bl	10052e70 <LL_RADIO_TxMode_IsEnabled>
10054188:	0003      	movs	r3, r0
1005418a:	b2db      	uxtb	r3, r3
}
1005418c:	0018      	movs	r0, r3
1005418e:	46bd      	mov	sp, r7
10054190:	b002      	add	sp, #8
10054192:	bd80      	pop	{r7, pc}

10054194 <BLEPLAT_CNTR_SmGetRemapChan>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPointPrevious(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetRemapChan(uint8_t smNo)
{
10054194:	b580      	push	{r7, lr}
10054196:	b082      	sub	sp, #8
10054198:	af00      	add	r7, sp, #0
1005419a:	0002      	movs	r2, r0
1005419c:	1dfb      	adds	r3, r7, #7
1005419e:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetRemapChannel(smNo);
100541a0:	1dfb      	adds	r3, r7, #7
100541a2:	781b      	ldrb	r3, [r3, #0]
100541a4:	0018      	movs	r0, r3
100541a6:	f7fe fea7 	bl	10052ef8 <LL_RADIO_GetRemapChannel>
100541aa:	0003      	movs	r3, r0
100541ac:	b2db      	uxtb	r3, r3
}
100541ae:	0018      	movs	r0, r3
100541b0:	46bd      	mov	sp, r7
100541b2:	b002      	add	sp, #8
100541b4:	bd80      	pop	{r7, pc}

100541b6 <BLEPLAT_CNTR_SmGetRxCount>:

void BLEPLAT_CNTR_SmGetRxCount(uint8_t smNo, uint32_t* packetCount)
{
100541b6:	b590      	push	{r4, r7, lr}
100541b8:	b083      	sub	sp, #12
100541ba:	af00      	add	r7, sp, #0
100541bc:	0002      	movs	r2, r0
100541be:	6039      	str	r1, [r7, #0]
100541c0:	1dfb      	adds	r3, r7, #7
100541c2:	701a      	strb	r2, [r3, #0]

    packetCount[0] = LL_RADIO_GetPacketCounterRx_23_0(smNo);
100541c4:	1dfb      	adds	r3, r7, #7
100541c6:	781b      	ldrb	r3, [r3, #0]
100541c8:	0018      	movs	r0, r3
100541ca:	f7ff f86d 	bl	100532a8 <LL_RADIO_GetPacketCounterRx_23_0>
100541ce:	0002      	movs	r2, r0
100541d0:	683b      	ldr	r3, [r7, #0]
100541d2:	601a      	str	r2, [r3, #0]
    packetCount[0] = packetCount[0] | ((uint32_t)LL_RADIO_GetPacketCounterRx_39_24(smNo) << 24U);
100541d4:	683b      	ldr	r3, [r7, #0]
100541d6:	681c      	ldr	r4, [r3, #0]
100541d8:	1dfb      	adds	r3, r7, #7
100541da:	781b      	ldrb	r3, [r3, #0]
100541dc:	0018      	movs	r0, r3
100541de:	f7ff f89f 	bl	10053320 <LL_RADIO_GetPacketCounterRx_39_24>
100541e2:	0003      	movs	r3, r0
100541e4:	061b      	lsls	r3, r3, #24
100541e6:	0022      	movs	r2, r4
100541e8:	431a      	orrs	r2, r3
100541ea:	683b      	ldr	r3, [r7, #0]
100541ec:	601a      	str	r2, [r3, #0]
    packetCount[1] = LL_RADIO_GetPacketCounterRx_39_24(smNo) >> 8U;
100541ee:	1dfb      	adds	r3, r7, #7
100541f0:	781b      	ldrb	r3, [r3, #0]
100541f2:	0018      	movs	r0, r3
100541f4:	f7ff f894 	bl	10053320 <LL_RADIO_GetPacketCounterRx_39_24>
100541f8:	0002      	movs	r2, r0
100541fa:	683b      	ldr	r3, [r7, #0]
100541fc:	3304      	adds	r3, #4
100541fe:	0a12      	lsrs	r2, r2, #8
10054200:	601a      	str	r2, [r3, #0]
}
10054202:	46c0      	nop			@ (mov r8, r8)
10054204:	46bd      	mov	sp, r7
10054206:	b003      	add	sp, #12
10054208:	bd90      	pop	{r4, r7, pc}

1005420a <BLEPLAT_CNTR_SmGetRxPhy>:

uint8_t BLEPLAT_CNTR_SmGetRxPhy(uint8_t smNo)
{
1005420a:	b580      	push	{r7, lr}
1005420c:	b082      	sub	sp, #8
1005420e:	af00      	add	r7, sp, #0
10054210:	0002      	movs	r2, r0
10054212:	1dfb      	adds	r3, r7, #7
10054214:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetReceptionPhy(smNo);
10054216:	1dfb      	adds	r3, r7, #7
10054218:	781b      	ldrb	r3, [r3, #0]
1005421a:	0018      	movs	r0, r3
1005421c:	f7fe ff74 	bl	10053108 <LL_RADIO_GetReceptionPhy>
10054220:	0003      	movs	r3, r0
10054222:	b2db      	uxtb	r3, r3
}
10054224:	0018      	movs	r0, r3
10054226:	46bd      	mov	sp, r7
10054228:	b002      	add	sp, #8
1005422a:	bd80      	pop	{r7, pc}

1005422c <BLEPLAT_CNTR_SmGetTxPhy>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPoint(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetTxPhy(uint8_t smNo)
{
1005422c:	b580      	push	{r7, lr}
1005422e:	b082      	sub	sp, #8
10054230:	af00      	add	r7, sp, #0
10054232:	0002      	movs	r2, r0
10054234:	1dfb      	adds	r3, r7, #7
10054236:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetTransmissionPhy(smNo);
10054238:	1dfb      	adds	r3, r7, #7
1005423a:	781b      	ldrb	r3, [r3, #0]
1005423c:	0018      	movs	r0, r3
1005423e:	f7fe fefb 	bl	10053038 <LL_RADIO_GetTransmissionPhy>
10054242:	0003      	movs	r3, r0
10054244:	b2db      	uxtb	r3, r3
}
10054246:	0018      	movs	r0, r3
10054248:	46bd      	mov	sp, r7
1005424a:	b002      	add	sp, #8
1005424c:	bd80      	pop	{r7, pc}

1005424e <BLEPLAT_CNTR_SmGetTxPwr>:

uint8_t BLEPLAT_CNTR_SmGetTxPwr(uint8_t smNo)
{
1005424e:	b580      	push	{r7, lr}
10054250:	b084      	sub	sp, #16
10054252:	af00      	add	r7, sp, #0
10054254:	0002      	movs	r2, r0
10054256:	1dfb      	adds	r3, r7, #7
10054258:	701a      	strb	r2, [r3, #0]
    uint8_t pa_level = LL_RADIO_GetPAPower(smNo);
1005425a:	1dfb      	adds	r3, r7, #7
1005425c:	781b      	ldrb	r3, [r3, #0]
1005425e:	0018      	movs	r0, r3
10054260:	f7ff f950 	bl	10053504 <LL_RADIO_GetPAPower>
10054264:	0002      	movs	r2, r0
10054266:	210f      	movs	r1, #15
10054268:	187b      	adds	r3, r7, r1
1005426a:	701a      	strb	r2, [r3, #0]
    if (LL_RADIO_TxHp_IsEnabled(smNo) && (pa_level == MAX_PA_LEVEL))
    {
        pa_level = HP_PA_LEVEL;
    }
#endif
    return pa_level;
1005426c:	187b      	adds	r3, r7, r1
1005426e:	781b      	ldrb	r3, [r3, #0]
}
10054270:	0018      	movs	r0, r3
10054272:	46bd      	mov	sp, r7
10054274:	b004      	add	sp, #16
10054276:	bd80      	pop	{r7, pc}

10054278 <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10054278:	b580      	push	{r7, lr}
1005427a:	b082      	sub	sp, #8
1005427c:	af00      	add	r7, sp, #0
1005427e:	0002      	movs	r2, r0
10054280:	1dfb      	adds	r3, r7, #7
10054282:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
10054284:	1dfb      	adds	r3, r7, #7
10054286:	781b      	ldrb	r3, [r3, #0]
10054288:	225c      	movs	r2, #92	@ 0x5c
1005428a:	4353      	muls	r3, r2
1005428c:	4a08      	ldr	r2, [pc, #32]	@ (100542b0 <BLEPLAT_CNTR_SmInitTo0+0x38>)
1005428e:	4694      	mov	ip, r2
10054290:	4463      	add	r3, ip
10054292:	225c      	movs	r2, #92	@ 0x5c
10054294:	2100      	movs	r1, #0
10054296:	0018      	movs	r0, r3
10054298:	f013 fdda 	bl	10067e50 <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
1005429c:	1dfb      	adds	r3, r7, #7
1005429e:	781b      	ldrb	r3, [r3, #0]
100542a0:	2101      	movs	r1, #1
100542a2:	0018      	movs	r0, r3
100542a4:	f7ff fe9c 	bl	10053fe0 <BLEPLAT_CNTR_SmEnRadioConfig>
}
100542a8:	46c0      	nop			@ (mov r8, r8)
100542aa:	46bd      	mov	sp, r7
100542ac:	b002      	add	sp, #8
100542ae:	bd80      	pop	{r7, pc}
100542b0:	200000dc 	.word	0x200000dc

100542b4 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
100542b4:	b580      	push	{r7, lr}
100542b6:	b082      	sub	sp, #8
100542b8:	af00      	add	r7, sp, #0
100542ba:	0002      	movs	r2, r0
100542bc:	6039      	str	r1, [r7, #0]
100542be:	1dfb      	adds	r3, r7, #7
100542c0:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
100542c2:	683a      	ldr	r2, [r7, #0]
100542c4:	1dfb      	adds	r3, r7, #7
100542c6:	781b      	ldrb	r3, [r3, #0]
100542c8:	0011      	movs	r1, r2
100542ca:	0018      	movs	r0, r3
100542cc:	f7ff f87e 	bl	100533cc <LL_RADIO_SetAccessAddress>
}
100542d0:	46c0      	nop			@ (mov r8, r8)
100542d2:	46bd      	mov	sp, r7
100542d4:	b002      	add	sp, #8
100542d6:	bd80      	pop	{r7, pc}

100542d8 <BLEPLAT_CNTR_SmSetChannelMap>:

void BLEPLAT_CNTR_SmSetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
100542d8:	b580      	push	{r7, lr}
100542da:	b084      	sub	sp, #16
100542dc:	af00      	add	r7, sp, #0
100542de:	0002      	movs	r2, r0
100542e0:	6039      	str	r1, [r7, #0]
100542e2:	1dfb      	adds	r3, r7, #7
100542e4:	701a      	strb	r2, [r3, #0]
    uint32_t value = (uint32_t)chanMap[0] | ((uint32_t)chanMap[1] << 8U);
100542e6:	683b      	ldr	r3, [r7, #0]
100542e8:	781b      	ldrb	r3, [r3, #0]
100542ea:	001a      	movs	r2, r3
100542ec:	683b      	ldr	r3, [r7, #0]
100542ee:	3301      	adds	r3, #1
100542f0:	781b      	ldrb	r3, [r3, #0]
100542f2:	021b      	lsls	r3, r3, #8
100542f4:	4313      	orrs	r3, r2
100542f6:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_15_0(smNo, value);
100542f8:	68fa      	ldr	r2, [r7, #12]
100542fa:	1dfb      	adds	r3, r7, #7
100542fc:	781b      	ldrb	r3, [r3, #0]
100542fe:	0011      	movs	r1, r2
10054300:	0018      	movs	r0, r3
10054302:	f7ff f955 	bl	100535b0 <LL_RADIO_SetUsedChannelFlags_15_0>
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
10054306:	683b      	ldr	r3, [r7, #0]
10054308:	3302      	adds	r3, #2
1005430a:	781b      	ldrb	r3, [r3, #0]
1005430c:	001a      	movs	r2, r3
1005430e:	683b      	ldr	r3, [r7, #0]
10054310:	3303      	adds	r3, #3
10054312:	781b      	ldrb	r3, [r3, #0]
10054314:	021b      	lsls	r3, r3, #8
10054316:	431a      	orrs	r2, r3
10054318:	683b      	ldr	r3, [r7, #0]
1005431a:	3304      	adds	r3, #4
1005431c:	781b      	ldrb	r3, [r3, #0]
1005431e:	041b      	lsls	r3, r3, #16
10054320:	4313      	orrs	r3, r2
10054322:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
10054324:	68fa      	ldr	r2, [r7, #12]
10054326:	1dfb      	adds	r3, r7, #7
10054328:	781b      	ldrb	r3, [r3, #0]
1005432a:	0011      	movs	r1, r2
1005432c:	0018      	movs	r0, r3
1005432e:	f7ff f979 	bl	10053624 <LL_RADIO_SetUsedChannelFlags_36_16>
}
10054332:	46c0      	nop			@ (mov r8, r8)
10054334:	46bd      	mov	sp, r7
10054336:	b004      	add	sp, #16
10054338:	bd80      	pop	{r7, pc}

1005433a <BLEPLAT_CNTR_SmSetCrcInit>:

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
1005433a:	b580      	push	{r7, lr}
1005433c:	b082      	sub	sp, #8
1005433e:	af00      	add	r7, sp, #0
10054340:	0002      	movs	r2, r0
10054342:	6039      	str	r1, [r7, #0]
10054344:	1dfb      	adds	r3, r7, #7
10054346:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
10054348:	683a      	ldr	r2, [r7, #0]
1005434a:	1dfb      	adds	r3, r7, #7
1005434c:	781b      	ldrb	r3, [r3, #0]
1005434e:	0011      	movs	r1, r2
10054350:	0018      	movs	r0, r3
10054352:	f7ff f86d 	bl	10053430 <LL_RADIO_SetCRCInitializationValue>
}
10054356:	46c0      	nop			@ (mov r8, r8)
10054358:	46bd      	mov	sp, r7
1005435a:	b002      	add	sp, #8
1005435c:	bd80      	pop	{r7, pc}

1005435e <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
1005435e:	b580      	push	{r7, lr}
10054360:	b082      	sub	sp, #8
10054362:	af00      	add	r7, sp, #0
10054364:	0002      	movs	r2, r0
10054366:	1dfb      	adds	r3, r7, #7
10054368:	701a      	strb	r2, [r3, #0]
1005436a:	1dbb      	adds	r3, r7, #6
1005436c:	1c0a      	adds	r2, r1, #0
1005436e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
10054370:	1dbb      	adds	r3, r7, #6
10054372:	781a      	ldrb	r2, [r3, #0]
10054374:	1dfb      	adds	r3, r7, #7
10054376:	781b      	ldrb	r3, [r3, #0]
10054378:	0011      	movs	r1, r2
1005437a:	0018      	movs	r0, r3
1005437c:	f7ff f87c 	bl	10053478 <LL_RADIO_SetMaximumReceiveLength>
}
10054380:	46c0      	nop			@ (mov r8, r8)
10054382:	46bd      	mov	sp, r7
10054384:	b002      	add	sp, #8
10054386:	bd80      	pop	{r7, pc}

10054388 <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
10054388:	b580      	push	{r7, lr}
1005438a:	b082      	sub	sp, #8
1005438c:	af00      	add	r7, sp, #0
1005438e:	0002      	movs	r2, r0
10054390:	1dfb      	adds	r3, r7, #7
10054392:	701a      	strb	r2, [r3, #0]
10054394:	1dbb      	adds	r3, r7, #6
10054396:	1c0a      	adds	r2, r1, #0
10054398:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
1005439a:	1dbb      	adds	r3, r7, #6
1005439c:	781a      	ldrb	r2, [r3, #0]
1005439e:	1dfb      	adds	r3, r7, #7
100543a0:	781b      	ldrb	r3, [r3, #0]
100543a2:	0011      	movs	r1, r2
100543a4:	0018      	movs	r0, r3
100543a6:	f7ff f8c3 	bl	10053530 <LL_RADIO_SetHopIncrement>
}
100543aa:	46c0      	nop			@ (mov r8, r8)
100543ac:	46bd      	mov	sp, r7
100543ae:	b002      	add	sp, #8
100543b0:	bd80      	pop	{r7, pc}

100543b2 <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
100543b2:	b580      	push	{r7, lr}
100543b4:	b082      	sub	sp, #8
100543b6:	af00      	add	r7, sp, #0
100543b8:	0002      	movs	r2, r0
100543ba:	1dfb      	adds	r3, r7, #7
100543bc:	701a      	strb	r2, [r3, #0]
100543be:	1dbb      	adds	r3, r7, #6
100543c0:	1c0a      	adds	r2, r1, #0
100543c2:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
100543c4:	1dbb      	adds	r3, r7, #6
100543c6:	781a      	ldrb	r2, [r3, #0]
100543c8:	1dfb      	adds	r3, r7, #7
100543ca:	781b      	ldrb	r3, [r3, #0]
100543cc:	0011      	movs	r1, r2
100543ce:	0018      	movs	r0, r3
100543d0:	f7fe fd6a 	bl	10052ea8 <LL_RADIO_SetRemapChannel>
}
100543d4:	46c0      	nop			@ (mov r8, r8)
100543d6:	46bd      	mov	sp, r7
100543d8:	b002      	add	sp, #8
100543da:	bd80      	pop	{r7, pc}

100543dc <BLEPLAT_CNTR_SmSetRxCount>:

void BLEPLAT_CNTR_SmSetRxCount(uint8_t smNo, uint32_t* packetCount)
{
100543dc:	b580      	push	{r7, lr}
100543de:	b084      	sub	sp, #16
100543e0:	af00      	add	r7, sp, #0
100543e2:	0002      	movs	r2, r0
100543e4:	6039      	str	r1, [r7, #0]
100543e6:	1dfb      	adds	r3, r7, #7
100543e8:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterRx_23_0(smNo, (uint32_t) packetCount[0]);
100543ea:	683b      	ldr	r3, [r7, #0]
100543ec:	681a      	ldr	r2, [r3, #0]
100543ee:	1dfb      	adds	r3, r7, #7
100543f0:	781b      	ldrb	r3, [r3, #0]
100543f2:	0011      	movs	r1, r2
100543f4:	0018      	movs	r0, r3
100543f6:	f7fe ff33 	bl	10053260 <LL_RADIO_SetPacketCounterRx_23_0>
    uint32_t value = (uint32_t)(packetCount[1] << 8U) | (uint32_t)(packetCount[0] >> 24U);
100543fa:	683b      	ldr	r3, [r7, #0]
100543fc:	3304      	adds	r3, #4
100543fe:	681b      	ldr	r3, [r3, #0]
10054400:	021a      	lsls	r2, r3, #8
10054402:	683b      	ldr	r3, [r7, #0]
10054404:	681b      	ldr	r3, [r3, #0]
10054406:	0e1b      	lsrs	r3, r3, #24
10054408:	4313      	orrs	r3, r2
1005440a:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
1005440c:	68fa      	ldr	r2, [r7, #12]
1005440e:	1dfb      	adds	r3, r7, #7
10054410:	781b      	ldrb	r3, [r3, #0]
10054412:	0011      	movs	r1, r2
10054414:	0018      	movs	r0, r3
10054416:	f7fe ff5f 	bl	100532d8 <LL_RADIO_SetPacketCounterRx_39_24>
}
1005441a:	46c0      	nop			@ (mov r8, r8)
1005441c:	46bd      	mov	sp, r7
1005441e:	b004      	add	sp, #16
10054420:	bd80      	pop	{r7, pc}

10054422 <BLEPLAT_CNTR_SmSetRxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetRxCountDirectionBit(uint8_t smNo)
{
10054422:	b580      	push	{r7, lr}
10054424:	b084      	sub	sp, #16
10054426:	af00      	add	r7, sp, #0
10054428:	0002      	movs	r2, r0
1005442a:	1dfb      	adds	r3, r7, #7
1005442c:	701a      	strb	r2, [r3, #0]
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
1005442e:	1dfb      	adds	r3, r7, #7
10054430:	781b      	ldrb	r3, [r3, #0]
10054432:	0018      	movs	r0, r3
10054434:	f7fe ff74 	bl	10053320 <LL_RADIO_GetPacketCounterRx_39_24>
10054438:	0002      	movs	r2, r0
1005443a:	2380      	movs	r3, #128	@ 0x80
1005443c:	021b      	lsls	r3, r3, #8
1005443e:	4313      	orrs	r3, r2
10054440:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10054442:	68fa      	ldr	r2, [r7, #12]
10054444:	1dfb      	adds	r3, r7, #7
10054446:	781b      	ldrb	r3, [r3, #0]
10054448:	0011      	movs	r1, r2
1005444a:	0018      	movs	r0, r3
1005444c:	f7fe ff44 	bl	100532d8 <LL_RADIO_SetPacketCounterRx_39_24>
}
10054450:	46c0      	nop			@ (mov r8, r8)
10054452:	46bd      	mov	sp, r7
10054454:	b004      	add	sp, #16
10054456:	bd80      	pop	{r7, pc}

10054458 <BLEPLAT_CNTR_SmSetRxMode>:

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
10054458:	b580      	push	{r7, lr}
1005445a:	b082      	sub	sp, #8
1005445c:	af00      	add	r7, sp, #0
1005445e:	0002      	movs	r2, r0
10054460:	1dfb      	adds	r3, r7, #7
10054462:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
10054464:	1dfb      	adds	r3, r7, #7
10054466:	781b      	ldrb	r3, [r3, #0]
10054468:	0018      	movs	r0, r3
1005446a:	f7fe fce3 	bl	10052e34 <LL_RADIO_TxMode_Disable>
}
1005446e:	46c0      	nop			@ (mov r8, r8)
10054470:	46bd      	mov	sp, r7
10054472:	b002      	add	sp, #8
10054474:	bd80      	pop	{r7, pc}

10054476 <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054476:	b580      	push	{r7, lr}
10054478:	b082      	sub	sp, #8
1005447a:	af00      	add	r7, sp, #0
1005447c:	0002      	movs	r2, r0
1005447e:	6039      	str	r1, [r7, #0]
10054480:	1dfb      	adds	r3, r7, #7
10054482:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10054484:	683a      	ldr	r2, [r7, #0]
10054486:	1dfb      	adds	r3, r7, #7
10054488:	781b      	ldrb	r3, [r3, #0]
1005448a:	0011      	movs	r1, r2
1005448c:	0018      	movs	r0, r3
1005448e:	f7fe fe71 	bl	10053174 <LL_RADIO_SetRcvPoint>
}
10054492:	46c0      	nop			@ (mov r8, r8)
10054494:	46bd      	mov	sp, r7
10054496:	b002      	add	sp, #8
10054498:	bd80      	pop	{r7, pc}

1005449a <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
1005449a:	b580      	push	{r7, lr}
1005449c:	b082      	sub	sp, #8
1005449e:	af00      	add	r7, sp, #0
100544a0:	0002      	movs	r2, r0
100544a2:	1dfb      	adds	r3, r7, #7
100544a4:	701a      	strb	r2, [r3, #0]
100544a6:	1dbb      	adds	r3, r7, #6
100544a8:	1c0a      	adds	r2, r1, #0
100544aa:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
100544ac:	1dbb      	adds	r3, r7, #6
100544ae:	781a      	ldrb	r2, [r3, #0]
100544b0:	1dfb      	adds	r3, r7, #7
100544b2:	781b      	ldrb	r3, [r3, #0]
100544b4:	0011      	movs	r1, r2
100544b6:	0018      	movs	r0, r3
100544b8:	f7fe fdfe 	bl	100530b8 <LL_RADIO_SetReceptionPhy>
}
100544bc:	46c0      	nop			@ (mov r8, r8)
100544be:	46bd      	mov	sp, r7
100544c0:	b002      	add	sp, #8
100544c2:	bd80      	pop	{r7, pc}

100544c4 <BLEPLAT_CNTR_SmSetTxCount>:

void BLEPLAT_CNTR_SmSetTxCount(uint8_t smNo, uint32_t* packetCount)
{
100544c4:	b580      	push	{r7, lr}
100544c6:	b082      	sub	sp, #8
100544c8:	af00      	add	r7, sp, #0
100544ca:	0002      	movs	r2, r0
100544cc:	6039      	str	r1, [r7, #0]
100544ce:	1dfb      	adds	r3, r7, #7
100544d0:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterTx_31_0(smNo, (uint32_t) packetCount[0]);
100544d2:	683b      	ldr	r3, [r7, #0]
100544d4:	681a      	ldr	r2, [r3, #0]
100544d6:	1dfb      	adds	r3, r7, #7
100544d8:	781b      	ldrb	r3, [r3, #0]
100544da:	0011      	movs	r1, r2
100544dc:	0018      	movs	r0, r3
100544de:	f7fe fe67 	bl	100531b0 <LL_RADIO_SetPacketCounterTx_31_0>
    LL_RADIO_SetPacketCounterTx_39_32(smNo, (uint32_t) packetCount[1]);
100544e2:	683b      	ldr	r3, [r7, #0]
100544e4:	3304      	adds	r3, #4
100544e6:	681a      	ldr	r2, [r3, #0]
100544e8:	1dfb      	adds	r3, r7, #7
100544ea:	781b      	ldrb	r3, [r3, #0]
100544ec:	0011      	movs	r1, r2
100544ee:	0018      	movs	r0, r3
100544f0:	f7fe fe7c 	bl	100531ec <LL_RADIO_SetPacketCounterTx_39_32>
}
100544f4:	46c0      	nop			@ (mov r8, r8)
100544f6:	46bd      	mov	sp, r7
100544f8:	b002      	add	sp, #8
100544fa:	bd80      	pop	{r7, pc}

100544fc <BLEPLAT_CNTR_SmSetTxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetTxCountDirectionBit(uint8_t smNo)
{
100544fc:	b580      	push	{r7, lr}
100544fe:	b084      	sub	sp, #16
10054500:	af00      	add	r7, sp, #0
10054502:	0002      	movs	r2, r0
10054504:	1dfb      	adds	r3, r7, #7
10054506:	701a      	strb	r2, [r3, #0]
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
10054508:	1dfb      	adds	r3, r7, #7
1005450a:	781b      	ldrb	r3, [r3, #0]
1005450c:	0018      	movs	r0, r3
1005450e:	f7fe fe91 	bl	10053234 <LL_RADIO_GetPacketCounterTx_39_32>
10054512:	0003      	movs	r3, r0
10054514:	2280      	movs	r2, #128	@ 0x80
10054516:	4313      	orrs	r3, r2
10054518:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
1005451a:	68fa      	ldr	r2, [r7, #12]
1005451c:	1dfb      	adds	r3, r7, #7
1005451e:	781b      	ldrb	r3, [r3, #0]
10054520:	0011      	movs	r1, r2
10054522:	0018      	movs	r0, r3
10054524:	f7fe fe62 	bl	100531ec <LL_RADIO_SetPacketCounterTx_39_32>
}
10054528:	46c0      	nop			@ (mov r8, r8)
1005452a:	46bd      	mov	sp, r7
1005452c:	b004      	add	sp, #16
1005452e:	bd80      	pop	{r7, pc}

10054530 <BLEPLAT_CNTR_SmSetTxMode>:

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
10054530:	b580      	push	{r7, lr}
10054532:	b082      	sub	sp, #8
10054534:	af00      	add	r7, sp, #0
10054536:	0002      	movs	r2, r0
10054538:	1dfb      	adds	r3, r7, #7
1005453a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
1005453c:	1dfb      	adds	r3, r7, #7
1005453e:	781b      	ldrb	r3, [r3, #0]
10054540:	0018      	movs	r0, r3
10054542:	f7fe fc59 	bl	10052df8 <LL_RADIO_TxMode_Enable>
}
10054546:	46c0      	nop			@ (mov r8, r8)
10054548:	46bd      	mov	sp, r7
1005454a:	b002      	add	sp, #8
1005454c:	bd80      	pop	{r7, pc}

1005454e <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005454e:	b580      	push	{r7, lr}
10054550:	b082      	sub	sp, #8
10054552:	af00      	add	r7, sp, #0
10054554:	0002      	movs	r2, r0
10054556:	6039      	str	r1, [r7, #0]
10054558:	1dfb      	adds	r3, r7, #7
1005455a:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
1005455c:	683a      	ldr	r2, [r7, #0]
1005455e:	1dfb      	adds	r3, r7, #7
10054560:	781b      	ldrb	r3, [r3, #0]
10054562:	0011      	movs	r1, r2
10054564:	0018      	movs	r0, r3
10054566:	f7fe fde7 	bl	10053138 <LL_RADIO_SetTxPoint>
}
1005456a:	46c0      	nop			@ (mov r8, r8)
1005456c:	46bd      	mov	sp, r7
1005456e:	b002      	add	sp, #8
10054570:	bd80      	pop	{r7, pc}

10054572 <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10054572:	b580      	push	{r7, lr}
10054574:	b082      	sub	sp, #8
10054576:	af00      	add	r7, sp, #0
10054578:	0002      	movs	r2, r0
1005457a:	1dfb      	adds	r3, r7, #7
1005457c:	701a      	strb	r2, [r3, #0]
1005457e:	1dbb      	adds	r3, r7, #6
10054580:	1c0a      	adds	r2, r1, #0
10054582:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10054584:	1dbb      	adds	r3, r7, #6
10054586:	781a      	ldrb	r2, [r3, #0]
10054588:	1dfb      	adds	r3, r7, #7
1005458a:	781b      	ldrb	r3, [r3, #0]
1005458c:	0011      	movs	r1, r2
1005458e:	0018      	movs	r0, r3
10054590:	f7fe fd2a 	bl	10052fe8 <LL_RADIO_SetTransmissionPhy>
}
10054594:	46c0      	nop			@ (mov r8, r8)
10054596:	46bd      	mov	sp, r7
10054598:	b002      	add	sp, #8
1005459a:	bd80      	pop	{r7, pc}

1005459c <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
1005459c:	b580      	push	{r7, lr}
1005459e:	b082      	sub	sp, #8
100545a0:	af00      	add	r7, sp, #0
100545a2:	0002      	movs	r2, r0
100545a4:	1dfb      	adds	r3, r7, #7
100545a6:	701a      	strb	r2, [r3, #0]
100545a8:	1dbb      	adds	r3, r7, #6
100545aa:	1c0a      	adds	r2, r1, #0
100545ac:	701a      	strb	r2, [r3, #0]
  {
    LL_RADIO_TxHp_Disable(smNo);
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
100545ae:	1dbb      	adds	r3, r7, #6
100545b0:	781a      	ldrb	r2, [r3, #0]
100545b2:	1dfb      	adds	r3, r7, #7
100545b4:	781b      	ldrb	r3, [r3, #0]
100545b6:	0011      	movs	r1, r2
100545b8:	0018      	movs	r0, r3
100545ba:	f7fe ff7f 	bl	100534bc <LL_RADIO_SetPAPower>
}
100545be:	46c0      	nop			@ (mov r8, r8)
100545c0:	46bd      	mov	sp, r7
100545c2:	b002      	add	sp, #8
100545c4:	bd80      	pop	{r7, pc}

100545c6 <BLEPLAT_CNTR_SmSetUnmappedChan>:

void BLEPLAT_CNTR_SmSetUnmappedChan(uint8_t smNo, uint8_t chan)
{
100545c6:	b580      	push	{r7, lr}
100545c8:	b082      	sub	sp, #8
100545ca:	af00      	add	r7, sp, #0
100545cc:	0002      	movs	r2, r0
100545ce:	1dfb      	adds	r3, r7, #7
100545d0:	701a      	strb	r2, [r3, #0]
100545d2:	1dbb      	adds	r3, r7, #6
100545d4:	1c0a      	adds	r2, r1, #0
100545d6:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetUnmappedChannel(smNo, (uint32_t) chan);
100545d8:	1dbb      	adds	r3, r7, #6
100545da:	781a      	ldrb	r2, [r3, #0]
100545dc:	1dfb      	adds	r3, r7, #7
100545de:	781b      	ldrb	r3, [r3, #0]
100545e0:	0011      	movs	r1, r2
100545e2:	0018      	movs	r0, r3
100545e4:	f7fe fba8 	bl	10052d38 <LL_RADIO_SetUnmappedChannel>
}
100545e8:	46c0      	nop			@ (mov r8, r8)
100545ea:	46bd      	mov	sp, r7
100545ec:	b002      	add	sp, #8
100545ee:	bd80      	pop	{r7, pc}

100545f0 <BLEPLAT_CNTR_SmToggleNesn>:

void BLEPLAT_CNTR_SmToggleNesn(uint8_t smNo)
{
100545f0:	b580      	push	{r7, lr}
100545f2:	b082      	sub	sp, #8
100545f4:	af00      	add	r7, sp, #0
100545f6:	0002      	movs	r2, r0
100545f8:	1dfb      	adds	r3, r7, #7
100545fa:	701a      	strb	r2, [r3, #0]
  LL_RADIO_ToggleNextExpectedSequenceNumber(smNo);
100545fc:	1dfb      	adds	r3, r7, #7
100545fe:	781b      	ldrb	r3, [r3, #0]
10054600:	0018      	movs	r0, r3
10054602:	f7fe fc91 	bl	10052f28 <LL_RADIO_ToggleNextExpectedSequenceNumber>
}
10054606:	46c0      	nop			@ (mov r8, r8)
10054608:	46bd      	mov	sp, r7
1005460a:	b002      	add	sp, #8
1005460c:	bd80      	pop	{r7, pc}

1005460e <BLEPLAT_CNTR_DemodDelaySt>:
{
    return (uint32_t)(x - y);
}

uint8_t BLEPLAT_CNTR_DemodDelaySt(uint8_t RxPHY)
{
1005460e:	b580      	push	{r7, lr}
10054610:	b082      	sub	sp, #8
10054612:	af00      	add	r7, sp, #0
10054614:	0002      	movs	r2, r0
10054616:	1dfb      	adds	r3, r7, #7
10054618:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((LL_PHY_CODED == RxPHY) ? 0x9DU : 0x12U);
1005461a:	1dfb      	adds	r3, r7, #7
1005461c:	781b      	ldrb	r3, [r3, #0]
1005461e:	2b04      	cmp	r3, #4
10054620:	d101      	bne.n	10054626 <BLEPLAT_CNTR_DemodDelaySt+0x18>
10054622:	239d      	movs	r3, #157	@ 0x9d
10054624:	e000      	b.n	10054628 <BLEPLAT_CNTR_DemodDelaySt+0x1a>
10054626:	2312      	movs	r3, #18
}
10054628:	0018      	movs	r0, r3
1005462a:	46bd      	mov	sp, r7
1005462c:	b002      	add	sp, #8
1005462e:	bd80      	pop	{r7, pc}

10054630 <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10054630:	b580      	push	{r7, lr}
10054632:	b082      	sub	sp, #8
10054634:	af00      	add	r7, sp, #0
10054636:	0002      	movs	r2, r0
10054638:	1dfb      	adds	r3, r7, #7
1005463a:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
1005463c:	46c0      	nop			@ (mov r8, r8)
1005463e:	46bd      	mov	sp, r7
10054640:	b002      	add	sp, #8
10054642:	bd80      	pop	{r7, pc}

10054644 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10054644:	b580      	push	{r7, lr}
10054646:	b082      	sub	sp, #8
10054648:	af00      	add	r7, sp, #0
1005464a:	0002      	movs	r2, r0
1005464c:	1dfb      	adds	r3, r7, #7
1005464e:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054650:	46c0      	nop			@ (mov r8, r8)
10054652:	46bd      	mov	sp, r7
10054654:	b002      	add	sp, #8
10054656:	bd80      	pop	{r7, pc}

10054658 <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
10054658:	b580      	push	{r7, lr}
1005465a:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
1005465c:	46c0      	nop			@ (mov r8, r8)
1005465e:	46bd      	mov	sp, r7
10054660:	bd80      	pop	{r7, pc}
	...

10054664 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
10054664:	b580      	push	{r7, lr}
10054666:	b090      	sub	sp, #64	@ 0x40
10054668:	af00      	add	r7, sp, #0
1005466a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
1005466c:	4b75      	ldr	r3, [pc, #468]	@ (10054844 <UTIL_SEQ_Run+0x1e0>)
1005466e:	681b      	ldr	r3, [r3, #0]
10054670:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
10054672:	4b74      	ldr	r3, [pc, #464]	@ (10054844 <UTIL_SEQ_Run+0x1e0>)
10054674:	681b      	ldr	r3, [r3, #0]
10054676:	687a      	ldr	r2, [r7, #4]
10054678:	401a      	ands	r2, r3
1005467a:	4b72      	ldr	r3, [pc, #456]	@ (10054844 <UTIL_SEQ_Run+0x1e0>)
1005467c:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
1005467e:	4b72      	ldr	r3, [pc, #456]	@ (10054848 <UTIL_SEQ_Run+0x1e4>)
10054680:	681b      	ldr	r3, [r3, #0]
10054682:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
10054684:	4b71      	ldr	r3, [pc, #452]	@ (1005484c <UTIL_SEQ_Run+0x1e8>)
10054686:	681b      	ldr	r3, [r3, #0]
10054688:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
1005468a:	4b71      	ldr	r3, [pc, #452]	@ (10054850 <UTIL_SEQ_Run+0x1ec>)
1005468c:	681b      	ldr	r3, [r3, #0]
1005468e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
10054690:	4b70      	ldr	r3, [pc, #448]	@ (10054854 <UTIL_SEQ_Run+0x1f0>)
10054692:	681b      	ldr	r3, [r3, #0]
10054694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
10054696:	e090      	b.n	100547ba <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
10054698:	2300      	movs	r3, #0
1005469a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
1005469c:	e002      	b.n	100546a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
1005469e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100546a0:	3301      	adds	r3, #1
100546a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100546a4:	4b6c      	ldr	r3, [pc, #432]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
100546a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100546a8:	00d2      	lsls	r2, r2, #3
100546aa:	58d3      	ldr	r3, [r2, r3]
100546ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100546ae:	401a      	ands	r2, r3
100546b0:	4b64      	ldr	r3, [pc, #400]	@ (10054844 <UTIL_SEQ_Run+0x1e0>)
100546b2:	681b      	ldr	r3, [r3, #0]
100546b4:	4013      	ands	r3, r2
100546b6:	d0f2      	beq.n	1005469e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
100546b8:	4b67      	ldr	r3, [pc, #412]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
100546ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100546bc:	00d2      	lsls	r2, r2, #3
100546be:	58d3      	ldr	r3, [r2, r3]
100546c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100546c2:	401a      	ands	r2, r3
100546c4:	4b5f      	ldr	r3, [pc, #380]	@ (10054844 <UTIL_SEQ_Run+0x1e0>)
100546c6:	681b      	ldr	r3, [r3, #0]
100546c8:	4013      	ands	r3, r2
100546ca:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
100546cc:	4a62      	ldr	r2, [pc, #392]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
100546ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100546d0:	00db      	lsls	r3, r3, #3
100546d2:	18d3      	adds	r3, r2, r3
100546d4:	3304      	adds	r3, #4
100546d6:	681b      	ldr	r3, [r3, #0]
100546d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100546da:	4013      	ands	r3, r2
100546dc:	d107      	bne.n	100546ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
100546de:	4a5e      	ldr	r2, [pc, #376]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
100546e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100546e2:	00db      	lsls	r3, r3, #3
100546e4:	18d3      	adds	r3, r2, r3
100546e6:	3304      	adds	r3, #4
100546e8:	2201      	movs	r2, #1
100546ea:	4252      	negs	r2, r2
100546ec:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
100546ee:	4a5a      	ldr	r2, [pc, #360]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
100546f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100546f2:	00db      	lsls	r3, r3, #3
100546f4:	18d3      	adds	r3, r2, r3
100546f6:	3304      	adds	r3, #4
100546f8:	681b      	ldr	r3, [r3, #0]
100546fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100546fc:	4013      	ands	r3, r2
100546fe:	0018      	movs	r0, r3
10054700:	f000 f97c 	bl	100549fc <SEQ_BitPosition>
10054704:	0003      	movs	r3, r0
10054706:	001a      	movs	r2, r3
10054708:	4b54      	ldr	r3, [pc, #336]	@ (1005485c <UTIL_SEQ_Run+0x1f8>)
1005470a:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
1005470c:	4a52      	ldr	r2, [pc, #328]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
1005470e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054710:	00db      	lsls	r3, r3, #3
10054712:	18d3      	adds	r3, r2, r3
10054714:	3304      	adds	r3, #4
10054716:	681a      	ldr	r2, [r3, #0]
10054718:	4b50      	ldr	r3, [pc, #320]	@ (1005485c <UTIL_SEQ_Run+0x1f8>)
1005471a:	681b      	ldr	r3, [r3, #0]
1005471c:	2101      	movs	r1, #1
1005471e:	4099      	lsls	r1, r3
10054720:	000b      	movs	r3, r1
10054722:	43db      	mvns	r3, r3
10054724:	401a      	ands	r2, r3
10054726:	494c      	ldr	r1, [pc, #304]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
10054728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005472a:	00db      	lsls	r3, r3, #3
1005472c:	18cb      	adds	r3, r1, r3
1005472e:	3304      	adds	r3, #4
10054730:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10054732:	f3ef 8310 	mrs	r3, PRIMASK
10054736:	61bb      	str	r3, [r7, #24]
  return(result);
10054738:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1005473a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
1005473c:	b672      	cpsid	i
}
1005473e:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
10054740:	4b46      	ldr	r3, [pc, #280]	@ (1005485c <UTIL_SEQ_Run+0x1f8>)
10054742:	681b      	ldr	r3, [r3, #0]
10054744:	2201      	movs	r2, #1
10054746:	409a      	lsls	r2, r3
10054748:	0013      	movs	r3, r2
1005474a:	43da      	mvns	r2, r3
1005474c:	4b3e      	ldr	r3, [pc, #248]	@ (10054848 <UTIL_SEQ_Run+0x1e4>)
1005474e:	681b      	ldr	r3, [r3, #0]
10054750:	401a      	ands	r2, r3
10054752:	4b3d      	ldr	r3, [pc, #244]	@ (10054848 <UTIL_SEQ_Run+0x1e4>)
10054754:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10054756:	2302      	movs	r3, #2
10054758:	63fb      	str	r3, [r7, #60]	@ 0x3c
1005475a:	e013      	b.n	10054784 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
1005475c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005475e:	1e5a      	subs	r2, r3, #1
10054760:	4b3d      	ldr	r3, [pc, #244]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
10054762:	00d2      	lsls	r2, r2, #3
10054764:	58d1      	ldr	r1, [r2, r3]
10054766:	4b3d      	ldr	r3, [pc, #244]	@ (1005485c <UTIL_SEQ_Run+0x1f8>)
10054768:	681b      	ldr	r3, [r3, #0]
1005476a:	2201      	movs	r2, #1
1005476c:	409a      	lsls	r2, r3
1005476e:	0013      	movs	r3, r2
10054770:	43db      	mvns	r3, r3
10054772:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10054774:	3a01      	subs	r2, #1
10054776:	4019      	ands	r1, r3
10054778:	4b37      	ldr	r3, [pc, #220]	@ (10054858 <UTIL_SEQ_Run+0x1f4>)
1005477a:	00d2      	lsls	r2, r2, #3
1005477c:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1005477e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054780:	3b01      	subs	r3, #1
10054782:	63fb      	str	r3, [r7, #60]	@ 0x3c
10054784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054786:	2b00      	cmp	r3, #0
10054788:	d1e8      	bne.n	1005475c <UTIL_SEQ_Run+0xf8>
1005478a:	6a3b      	ldr	r3, [r7, #32]
1005478c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005478e:	697b      	ldr	r3, [r7, #20]
10054790:	f383 8810 	msr	PRIMASK, r3
}
10054794:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
10054796:	4b31      	ldr	r3, [pc, #196]	@ (1005485c <UTIL_SEQ_Run+0x1f8>)
10054798:	681a      	ldr	r2, [r3, #0]
1005479a:	4b31      	ldr	r3, [pc, #196]	@ (10054860 <UTIL_SEQ_Run+0x1fc>)
1005479c:	0092      	lsls	r2, r2, #2
1005479e:	58d3      	ldr	r3, [r2, r3]
100547a0:	4798      	blx	r3

    local_taskset = TaskSet;
100547a2:	4b29      	ldr	r3, [pc, #164]	@ (10054848 <UTIL_SEQ_Run+0x1e4>)
100547a4:	681b      	ldr	r3, [r3, #0]
100547a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100547a8:	4b28      	ldr	r3, [pc, #160]	@ (1005484c <UTIL_SEQ_Run+0x1e8>)
100547aa:	681b      	ldr	r3, [r3, #0]
100547ac:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
100547ae:	4b28      	ldr	r3, [pc, #160]	@ (10054850 <UTIL_SEQ_Run+0x1ec>)
100547b0:	681b      	ldr	r3, [r3, #0]
100547b2:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
100547b4:	4b27      	ldr	r3, [pc, #156]	@ (10054854 <UTIL_SEQ_Run+0x1f0>)
100547b6:	681b      	ldr	r3, [r3, #0]
100547b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100547ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100547bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100547be:	401a      	ands	r2, r3
100547c0:	4b20      	ldr	r3, [pc, #128]	@ (10054844 <UTIL_SEQ_Run+0x1e0>)
100547c2:	681b      	ldr	r3, [r3, #0]
100547c4:	4013      	ands	r3, r2
100547c6:	d004      	beq.n	100547d2 <UTIL_SEQ_Run+0x16e>
100547c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100547ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100547cc:	4013      	ands	r3, r2
100547ce:	d100      	bne.n	100547d2 <UTIL_SEQ_Run+0x16e>
100547d0:	e762      	b.n	10054698 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
100547d2:	4b22      	ldr	r3, [pc, #136]	@ (1005485c <UTIL_SEQ_Run+0x1f8>)
100547d4:	2201      	movs	r2, #1
100547d6:	4252      	negs	r2, r2
100547d8:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
100547da:	4b1e      	ldr	r3, [pc, #120]	@ (10054854 <UTIL_SEQ_Run+0x1f0>)
100547dc:	681b      	ldr	r3, [r3, #0]
100547de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100547e0:	4013      	ands	r3, r2
100547e2:	d127      	bne.n	10054834 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
100547e4:	f7f2 faf0 	bl	10046dc8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100547e8:	f3ef 8310 	mrs	r3, PRIMASK
100547ec:	613b      	str	r3, [r7, #16]
  return(result);
100547ee:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
100547f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
100547f2:	b672      	cpsid	i
}
100547f4:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
100547f6:	4b14      	ldr	r3, [pc, #80]	@ (10054848 <UTIL_SEQ_Run+0x1e4>)
100547f8:	681b      	ldr	r3, [r3, #0]
100547fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100547fc:	4b13      	ldr	r3, [pc, #76]	@ (1005484c <UTIL_SEQ_Run+0x1e8>)
100547fe:	681b      	ldr	r3, [r3, #0]
10054800:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10054802:	4b13      	ldr	r3, [pc, #76]	@ (10054850 <UTIL_SEQ_Run+0x1ec>)
10054804:	681b      	ldr	r3, [r3, #0]
10054806:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
10054808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005480a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1005480c:	401a      	ands	r2, r3
1005480e:	4b0d      	ldr	r3, [pc, #52]	@ (10054844 <UTIL_SEQ_Run+0x1e0>)
10054810:	681b      	ldr	r3, [r3, #0]
10054812:	4013      	ands	r3, r2
10054814:	d106      	bne.n	10054824 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
10054816:	4b0f      	ldr	r3, [pc, #60]	@ (10054854 <UTIL_SEQ_Run+0x1f0>)
10054818:	681b      	ldr	r3, [r3, #0]
1005481a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1005481c:	4013      	ands	r3, r2
1005481e:	d101      	bne.n	10054824 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
10054820:	f7f2 fad7 	bl	10046dd2 <UTIL_SEQ_Idle>
10054824:	69fb      	ldr	r3, [r7, #28]
10054826:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10054828:	68fb      	ldr	r3, [r7, #12]
1005482a:	f383 8810 	msr	PRIMASK, r3
}
1005482e:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
10054830:	f000 f8de 	bl	100549f0 <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
10054834:	4b03      	ldr	r3, [pc, #12]	@ (10054844 <UTIL_SEQ_Run+0x1e0>)
10054836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10054838:	601a      	str	r2, [r3, #0]

  return;
1005483a:	46c0      	nop			@ (mov r8, r8)
}
1005483c:	46bd      	mov	sp, r7
1005483e:	b010      	add	sp, #64	@ 0x40
10054840:	bd80      	pop	{r7, pc}
10054842:	46c0      	nop			@ (mov r8, r8)
10054844:	200028a0 	.word	0x200028a0
10054848:	20002370 	.word	0x20002370
1005484c:	20002374 	.word	0x20002374
10054850:	2000289c 	.word	0x2000289c
10054854:	20002378 	.word	0x20002378
10054858:	20002400 	.word	0x20002400
1005485c:	2000237c 	.word	0x2000237c
10054860:	20002380 	.word	0x20002380

10054864 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
10054864:	b580      	push	{r7, lr}
10054866:	b088      	sub	sp, #32
10054868:	af00      	add	r7, sp, #0
1005486a:	60f8      	str	r0, [r7, #12]
1005486c:	60b9      	str	r1, [r7, #8]
1005486e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10054870:	f3ef 8310 	mrs	r3, PRIMASK
10054874:	617b      	str	r3, [r7, #20]
  return(result);
10054876:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
10054878:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1005487a:	b672      	cpsid	i
}
1005487c:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
1005487e:	68fb      	ldr	r3, [r7, #12]
10054880:	0018      	movs	r0, r3
10054882:	f000 f8bb 	bl	100549fc <SEQ_BitPosition>
10054886:	0003      	movs	r3, r0
10054888:	001a      	movs	r2, r3
1005488a:	4b07      	ldr	r3, [pc, #28]	@ (100548a8 <UTIL_SEQ_RegTask+0x44>)
1005488c:	0092      	lsls	r2, r2, #2
1005488e:	6879      	ldr	r1, [r7, #4]
10054890:	50d1      	str	r1, [r2, r3]
10054892:	69fb      	ldr	r3, [r7, #28]
10054894:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
10054896:	69bb      	ldr	r3, [r7, #24]
10054898:	f383 8810 	msr	PRIMASK, r3
}
1005489c:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
1005489e:	46c0      	nop			@ (mov r8, r8)
}
100548a0:	46bd      	mov	sp, r7
100548a2:	b008      	add	sp, #32
100548a4:	bd80      	pop	{r7, pc}
100548a6:	46c0      	nop			@ (mov r8, r8)
100548a8:	20002380 	.word	0x20002380

100548ac <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
100548ac:	b580      	push	{r7, lr}
100548ae:	b086      	sub	sp, #24
100548b0:	af00      	add	r7, sp, #0
100548b2:	6078      	str	r0, [r7, #4]
100548b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100548b6:	f3ef 8310 	mrs	r3, PRIMASK
100548ba:	60fb      	str	r3, [r7, #12]
  return(result);
100548bc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100548be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100548c0:	b672      	cpsid	i
}
100548c2:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
100548c4:	4b0d      	ldr	r3, [pc, #52]	@ (100548fc <UTIL_SEQ_SetTask+0x50>)
100548c6:	681a      	ldr	r2, [r3, #0]
100548c8:	687b      	ldr	r3, [r7, #4]
100548ca:	431a      	orrs	r2, r3
100548cc:	4b0b      	ldr	r3, [pc, #44]	@ (100548fc <UTIL_SEQ_SetTask+0x50>)
100548ce:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
100548d0:	4b0b      	ldr	r3, [pc, #44]	@ (10054900 <UTIL_SEQ_SetTask+0x54>)
100548d2:	683a      	ldr	r2, [r7, #0]
100548d4:	00d2      	lsls	r2, r2, #3
100548d6:	58d2      	ldr	r2, [r2, r3]
100548d8:	687b      	ldr	r3, [r7, #4]
100548da:	431a      	orrs	r2, r3
100548dc:	0011      	movs	r1, r2
100548de:	4b08      	ldr	r3, [pc, #32]	@ (10054900 <UTIL_SEQ_SetTask+0x54>)
100548e0:	683a      	ldr	r2, [r7, #0]
100548e2:	00d2      	lsls	r2, r2, #3
100548e4:	50d1      	str	r1, [r2, r3]
100548e6:	697b      	ldr	r3, [r7, #20]
100548e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100548ea:	693b      	ldr	r3, [r7, #16]
100548ec:	f383 8810 	msr	PRIMASK, r3
}
100548f0:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
100548f2:	46c0      	nop			@ (mov r8, r8)
}
100548f4:	46bd      	mov	sp, r7
100548f6:	b006      	add	sp, #24
100548f8:	bd80      	pop	{r7, pc}
100548fa:	46c0      	nop			@ (mov r8, r8)
100548fc:	20002370 	.word	0x20002370
10054900:	20002400 	.word	0x20002400

10054904 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
10054904:	b580      	push	{r7, lr}
10054906:	b086      	sub	sp, #24
10054908:	af00      	add	r7, sp, #0
1005490a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1005490c:	f3ef 8310 	mrs	r3, PRIMASK
10054910:	60fb      	str	r3, [r7, #12]
  return(result);
10054912:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10054914:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
10054916:	b672      	cpsid	i
}
10054918:	46c0      	nop			@ (mov r8, r8)

  EvtSet |= EvtId_bm;
1005491a:	4b08      	ldr	r3, [pc, #32]	@ (1005493c <UTIL_SEQ_SetEvt+0x38>)
1005491c:	681a      	ldr	r2, [r3, #0]
1005491e:	687b      	ldr	r3, [r7, #4]
10054920:	431a      	orrs	r2, r3
10054922:	4b06      	ldr	r3, [pc, #24]	@ (1005493c <UTIL_SEQ_SetEvt+0x38>)
10054924:	601a      	str	r2, [r3, #0]
10054926:	697b      	ldr	r3, [r7, #20]
10054928:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005492a:	693b      	ldr	r3, [r7, #16]
1005492c:	f383 8810 	msr	PRIMASK, r3
}
10054930:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
10054932:	46c0      	nop			@ (mov r8, r8)
}
10054934:	46bd      	mov	sp, r7
10054936:	b006      	add	sp, #24
10054938:	bd80      	pop	{r7, pc}
1005493a:	46c0      	nop			@ (mov r8, r8)
1005493c:	20002374 	.word	0x20002374

10054940 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
10054940:	b580      	push	{r7, lr}
10054942:	b088      	sub	sp, #32
10054944:	af00      	add	r7, sp, #0
10054946:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
10054948:	4b1f      	ldr	r3, [pc, #124]	@ (100549c8 <UTIL_SEQ_WaitEvt+0x88>)
1005494a:	681b      	ldr	r3, [r3, #0]
1005494c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
1005494e:	4b1e      	ldr	r3, [pc, #120]	@ (100549c8 <UTIL_SEQ_WaitEvt+0x88>)
10054950:	681b      	ldr	r3, [r3, #0]
10054952:	3301      	adds	r3, #1
10054954:	d102      	bne.n	1005495c <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0u;
10054956:	2300      	movs	r3, #0
10054958:	61fb      	str	r3, [r7, #28]
1005495a:	e005      	b.n	10054968 <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
1005495c:	4b1a      	ldr	r3, [pc, #104]	@ (100549c8 <UTIL_SEQ_WaitEvt+0x88>)
1005495e:	681b      	ldr	r3, [r3, #0]
10054960:	2201      	movs	r2, #1
10054962:	409a      	lsls	r2, r3
10054964:	0013      	movs	r3, r2
10054966:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
10054968:	4b18      	ldr	r3, [pc, #96]	@ (100549cc <UTIL_SEQ_WaitEvt+0x8c>)
1005496a:	681b      	ldr	r3, [r3, #0]
1005496c:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
1005496e:	4b17      	ldr	r3, [pc, #92]	@ (100549cc <UTIL_SEQ_WaitEvt+0x8c>)
10054970:	687a      	ldr	r2, [r7, #4]
10054972:	601a      	str	r2, [r3, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
10054974:	e005      	b.n	10054982 <UTIL_SEQ_WaitEvt+0x42>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
10054976:	687a      	ldr	r2, [r7, #4]
10054978:	69fb      	ldr	r3, [r7, #28]
1005497a:	0011      	movs	r1, r2
1005497c:	0018      	movs	r0, r3
1005497e:	f000 f829 	bl	100549d4 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
10054982:	4b13      	ldr	r3, [pc, #76]	@ (100549d0 <UTIL_SEQ_WaitEvt+0x90>)
10054984:	681b      	ldr	r3, [r3, #0]
10054986:	687a      	ldr	r2, [r7, #4]
10054988:	4013      	ands	r3, r2
1005498a:	d0f4      	beq.n	10054976 <UTIL_SEQ_WaitEvt+0x36>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
1005498c:	4b0e      	ldr	r3, [pc, #56]	@ (100549c8 <UTIL_SEQ_WaitEvt+0x88>)
1005498e:	69ba      	ldr	r2, [r7, #24]
10054990:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10054992:	f3ef 8310 	mrs	r3, PRIMASK
10054996:	60bb      	str	r3, [r7, #8]
  return(result);
10054998:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1005499a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
1005499c:	b672      	cpsid	i
}
1005499e:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
100549a0:	687b      	ldr	r3, [r7, #4]
100549a2:	43da      	mvns	r2, r3
100549a4:	4b0a      	ldr	r3, [pc, #40]	@ (100549d0 <UTIL_SEQ_WaitEvt+0x90>)
100549a6:	681b      	ldr	r3, [r3, #0]
100549a8:	401a      	ands	r2, r3
100549aa:	4b09      	ldr	r3, [pc, #36]	@ (100549d0 <UTIL_SEQ_WaitEvt+0x90>)
100549ac:	601a      	str	r2, [r3, #0]
100549ae:	693b      	ldr	r3, [r7, #16]
100549b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100549b2:	68fb      	ldr	r3, [r7, #12]
100549b4:	f383 8810 	msr	PRIMASK, r3
}
100549b8:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
100549ba:	4b04      	ldr	r3, [pc, #16]	@ (100549cc <UTIL_SEQ_WaitEvt+0x8c>)
100549bc:	697a      	ldr	r2, [r7, #20]
100549be:	601a      	str	r2, [r3, #0]
  return;
100549c0:	46c0      	nop			@ (mov r8, r8)
}
100549c2:	46bd      	mov	sp, r7
100549c4:	b008      	add	sp, #32
100549c6:	bd80      	pop	{r7, pc}
100549c8:	2000237c 	.word	0x2000237c
100549cc:	20002378 	.word	0x20002378
100549d0:	20002374 	.word	0x20002374

100549d4 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
100549d4:	b580      	push	{r7, lr}
100549d6:	b082      	sub	sp, #8
100549d8:	af00      	add	r7, sp, #0
100549da:	6078      	str	r0, [r7, #4]
100549dc:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
100549de:	687b      	ldr	r3, [r7, #4]
100549e0:	43db      	mvns	r3, r3
100549e2:	0018      	movs	r0, r3
100549e4:	f7ff fe3e 	bl	10054664 <UTIL_SEQ_Run>
  return;
100549e8:	46c0      	nop			@ (mov r8, r8)
}
100549ea:	46bd      	mov	sp, r7
100549ec:	b002      	add	sp, #8
100549ee:	bd80      	pop	{r7, pc}

100549f0 <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
100549f0:	b580      	push	{r7, lr}
100549f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
100549f4:	46c0      	nop			@ (mov r8, r8)
}
100549f6:	46bd      	mov	sp, r7
100549f8:	bd80      	pop	{r7, pc}
	...

100549fc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
100549fc:	b580      	push	{r7, lr}
100549fe:	b084      	sub	sp, #16
10054a00:	af00      	add	r7, sp, #0
10054a02:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
10054a04:	210f      	movs	r1, #15
10054a06:	187b      	adds	r3, r7, r1
10054a08:	2200      	movs	r2, #0
10054a0a:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
10054a0c:	687b      	ldr	r3, [r7, #4]
10054a0e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
10054a10:	68ba      	ldr	r2, [r7, #8]
10054a12:	2380      	movs	r3, #128	@ 0x80
10054a14:	025b      	lsls	r3, r3, #9
10054a16:	429a      	cmp	r2, r3
10054a18:	d205      	bcs.n	10054a26 <SEQ_BitPosition+0x2a>
10054a1a:	187b      	adds	r3, r7, r1
10054a1c:	2210      	movs	r2, #16
10054a1e:	701a      	strb	r2, [r3, #0]
10054a20:	68bb      	ldr	r3, [r7, #8]
10054a22:	041b      	lsls	r3, r3, #16
10054a24:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
10054a26:	68ba      	ldr	r2, [r7, #8]
10054a28:	2380      	movs	r3, #128	@ 0x80
10054a2a:	045b      	lsls	r3, r3, #17
10054a2c:	429a      	cmp	r2, r3
10054a2e:	d208      	bcs.n	10054a42 <SEQ_BitPosition+0x46>
10054a30:	220f      	movs	r2, #15
10054a32:	18bb      	adds	r3, r7, r2
10054a34:	18ba      	adds	r2, r7, r2
10054a36:	7812      	ldrb	r2, [r2, #0]
10054a38:	3208      	adds	r2, #8
10054a3a:	701a      	strb	r2, [r3, #0]
10054a3c:	68bb      	ldr	r3, [r7, #8]
10054a3e:	021b      	lsls	r3, r3, #8
10054a40:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
10054a42:	68ba      	ldr	r2, [r7, #8]
10054a44:	2380      	movs	r3, #128	@ 0x80
10054a46:	055b      	lsls	r3, r3, #21
10054a48:	429a      	cmp	r2, r3
10054a4a:	d208      	bcs.n	10054a5e <SEQ_BitPosition+0x62>
10054a4c:	220f      	movs	r2, #15
10054a4e:	18bb      	adds	r3, r7, r2
10054a50:	18ba      	adds	r2, r7, r2
10054a52:	7812      	ldrb	r2, [r2, #0]
10054a54:	3204      	adds	r2, #4
10054a56:	701a      	strb	r2, [r3, #0]
10054a58:	68bb      	ldr	r3, [r7, #8]
10054a5a:	011b      	lsls	r3, r3, #4
10054a5c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
10054a5e:	68bb      	ldr	r3, [r7, #8]
10054a60:	0f1b      	lsrs	r3, r3, #28
10054a62:	4a08      	ldr	r2, [pc, #32]	@ (10054a84 <SEQ_BitPosition+0x88>)
10054a64:	5cd1      	ldrb	r1, [r2, r3]
10054a66:	200f      	movs	r0, #15
10054a68:	183b      	adds	r3, r7, r0
10054a6a:	183a      	adds	r2, r7, r0
10054a6c:	7812      	ldrb	r2, [r2, #0]
10054a6e:	188a      	adds	r2, r1, r2
10054a70:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
10054a72:	183b      	adds	r3, r7, r0
10054a74:	781b      	ldrb	r3, [r3, #0]
10054a76:	221f      	movs	r2, #31
10054a78:	1ad3      	subs	r3, r2, r3
10054a7a:	b2db      	uxtb	r3, r3
}
10054a7c:	0018      	movs	r0, r3
10054a7e:	46bd      	mov	sp, r7
10054a80:	b004      	add	sp, #16
10054a82:	bd80      	pop	{r7, pc}
10054a84:	10069a64 	.word	0x10069a64

10054a88 <aci_gap_init>:
10054a88:	b580      	push	{r7, lr}
10054a8a:	2802      	cmp	r0, #2
10054a8c:	d901      	bls.n	10054a92 <aci_gap_init+0xa>
10054a8e:	2012      	movs	r0, #18
10054a90:	bd80      	pop	{r7, pc}
10054a92:	f001 fc17 	bl	100562c4 <GAP_Init>
10054a96:	bd80      	pop	{r7, pc}

10054a98 <aci_gap_terminate_api>:
10054a98:	b580      	push	{r7, lr}
10054a9a:	f001 fde9 	bl	10056670 <GAP_Terminate_Link>
10054a9e:	bd80      	pop	{r7, pc}

10054aa0 <_aci_gap_lists_check>:
10054aa0:	b5b0      	push	{r4, r5, r7, lr}
10054aa2:	4604      	mov	r4, r0
10054aa4:	7800      	ldrb	r0, [r0, #0]
10054aa6:	2800      	cmp	r0, #0
10054aa8:	d001      	beq.n	10054aae <_aci_gap_lists_check+0xe>
10054aaa:	2804      	cmp	r0, #4
10054aac:	d301      	bcc.n	10054ab2 <_aci_gap_lists_check+0x12>
10054aae:	2012      	movs	r0, #18
10054ab0:	e000      	b.n	10054ab4 <_aci_gap_lists_check+0x14>
10054ab2:	2000      	movs	r0, #0
10054ab4:	2512      	movs	r5, #18
10054ab6:	2a00      	cmp	r2, #0
10054ab8:	462a      	mov	r2, r5
10054aba:	d000      	beq.n	10054abe <_aci_gap_lists_check+0x1e>
10054abc:	4602      	mov	r2, r0
10054abe:	2901      	cmp	r1, #1
10054ac0:	d800      	bhi.n	10054ac4 <_aci_gap_lists_check+0x24>
10054ac2:	4615      	mov	r5, r2
10054ac4:	2d00      	cmp	r5, #0
10054ac6:	d107      	bne.n	10054ad8 <_aci_gap_lists_check+0x38>
10054ac8:	f007 f9b1 	bl	1005be2e <llc_priv_controller_privacy_csr_ucfg_weak>
10054acc:	2800      	cmp	r0, #0
10054ace:	d103      	bne.n	10054ad8 <_aci_gap_lists_check+0x38>
10054ad0:	7820      	ldrb	r0, [r4, #0]
10054ad2:	21fd      	movs	r1, #253	@ 0xfd
10054ad4:	4001      	ands	r1, r0
10054ad6:	7021      	strb	r1, [r4, #0]
10054ad8:	4628      	mov	r0, r5
10054ada:	bdb0      	pop	{r4, r5, r7, pc}

10054adc <aci_gap_configure_filter_accept_and_resolving_list>:
10054adc:	b5e0      	push	{r5, r6, r7, lr}
10054ade:	a901      	add	r1, sp, #4
10054ae0:	7008      	strb	r0, [r1, #0]
10054ae2:	2201      	movs	r2, #1
10054ae4:	4608      	mov	r0, r1
10054ae6:	4611      	mov	r1, r2
10054ae8:	f7ff ffda 	bl	10054aa0 <_aci_gap_lists_check>
10054aec:	2800      	cmp	r0, #0
10054aee:	d000      	beq.n	10054af2 <aci_gap_configure_filter_accept_and_resolving_list+0x16>
10054af0:	bd8c      	pop	{r2, r3, r7, pc}
10054af2:	a801      	add	r0, sp, #4
10054af4:	7800      	ldrb	r0, [r0, #0]
10054af6:	f001 fdd1 	bl	1005669c <GAP_configure_filter_accept_and_resolving_list>
10054afa:	bd8c      	pop	{r2, r3, r7, pc}

10054afc <GAP_set_advertising_configuration_ucfg_weak>:
10054afc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10054afe:	461c      	mov	r4, r3
10054b00:	4608      	mov	r0, r1
10054b02:	990a      	ldr	r1, [sp, #40]	@ 0x28
10054b04:	9103      	str	r1, [sp, #12]
10054b06:	9909      	ldr	r1, [sp, #36]	@ 0x24
10054b08:	9102      	str	r1, [sp, #8]
10054b0a:	9908      	ldr	r1, [sp, #32]
10054b0c:	9101      	str	r1, [sp, #4]
10054b0e:	9907      	ldr	r1, [sp, #28]
10054b10:	9100      	str	r1, [sp, #0]
10054b12:	9b06      	ldr	r3, [sp, #24]
10054b14:	4611      	mov	r1, r2
10054b16:	4622      	mov	r2, r4
10054b18:	f001 fea0 	bl	1005685c <GAP_set_legacy_advertising_configuration>
10054b1c:	b004      	add	sp, #16
10054b1e:	bd10      	pop	{r4, pc}

10054b20 <GAP_set_advertising_data_ucfg_weak>:
10054b20:	b580      	push	{r7, lr}
10054b22:	4619      	mov	r1, r3
10054b24:	4610      	mov	r0, r2
10054b26:	f002 f80d 	bl	10056b44 <GAP_set_legacy_advertising_data>
10054b2a:	bd80      	pop	{r7, pc}

10054b2c <GAP_set_advertising_enable_ucfg_weak>:
10054b2c:	b580      	push	{r7, lr}
10054b2e:	f001 ff05 	bl	1005693c <GAP_set_legacy_advertising_enable>
10054b32:	bd80      	pop	{r7, pc}

10054b34 <aci_gap_set_advertising_configuration>:
10054b34:	b5f0      	push	{r4, r5, r6, r7, lr}
10054b36:	b093      	sub	sp, #76	@ 0x4c
10054b38:	461f      	mov	r7, r3
10054b3a:	4615      	mov	r5, r2
10054b3c:	460e      	mov	r6, r1
10054b3e:	9012      	str	r0, [sp, #72]	@ 0x48
10054b40:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
10054b42:	4608      	mov	r0, r1
10054b44:	4611      	mov	r1, r2
10054b46:	4622      	mov	r2, r4
10054b48:	f001 fe5a 	bl	10056800 <GAP_check_discoverability_mode>
10054b4c:	2800      	cmp	r0, #0
10054b4e:	d124      	bne.n	10054b9a <aci_gap_set_advertising_configuration+0x66>
10054b50:	9822      	ldr	r0, [sp, #136]	@ 0x88
10054b52:	900d      	str	r0, [sp, #52]	@ 0x34
10054b54:	ab1f      	add	r3, sp, #124	@ 0x7c
10054b56:	cb0d      	ldmia	r3, {r0, r2, r3}
10054b58:	9011      	str	r0, [sp, #68]	@ 0x44
10054b5a:	981e      	ldr	r0, [sp, #120]	@ 0x78
10054b5c:	900f      	str	r0, [sp, #60]	@ 0x3c
10054b5e:	981d      	ldr	r0, [sp, #116]	@ 0x74
10054b60:	900e      	str	r0, [sp, #56]	@ 0x38
10054b62:	981b      	ldr	r0, [sp, #108]	@ 0x6c
10054b64:	900c      	str	r0, [sp, #48]	@ 0x30
10054b66:	991a      	ldr	r1, [sp, #104]	@ 0x68
10054b68:	9819      	ldr	r0, [sp, #100]	@ 0x64
10054b6a:	9710      	str	r7, [sp, #64]	@ 0x40
10054b6c:	9f18      	ldr	r7, [sp, #96]	@ 0x60
10054b6e:	9208      	str	r2, [sp, #32]
10054b70:	9309      	str	r3, [sp, #36]	@ 0x24
10054b72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10054b74:	920a      	str	r2, [sp, #40]	@ 0x28
10054b76:	9700      	str	r7, [sp, #0]
10054b78:	9001      	str	r0, [sp, #4]
10054b7a:	9102      	str	r1, [sp, #8]
10054b7c:	980c      	ldr	r0, [sp, #48]	@ 0x30
10054b7e:	9003      	str	r0, [sp, #12]
10054b80:	9404      	str	r4, [sp, #16]
10054b82:	980e      	ldr	r0, [sp, #56]	@ 0x38
10054b84:	9005      	str	r0, [sp, #20]
10054b86:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10054b88:	9006      	str	r0, [sp, #24]
10054b8a:	9811      	ldr	r0, [sp, #68]	@ 0x44
10054b8c:	9007      	str	r0, [sp, #28]
10054b8e:	9812      	ldr	r0, [sp, #72]	@ 0x48
10054b90:	4631      	mov	r1, r6
10054b92:	462a      	mov	r2, r5
10054b94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10054b96:	f7ff ffb1 	bl	10054afc <GAP_set_advertising_configuration_ucfg_weak>
10054b9a:	b013      	add	sp, #76	@ 0x4c
10054b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054b9e <aci_gap_set_advertising_data>:
10054b9e:	b580      	push	{r7, lr}
10054ba0:	f7ff ffbe 	bl	10054b20 <GAP_set_advertising_data_ucfg_weak>
10054ba4:	bd80      	pop	{r7, pc}

10054ba6 <aci_gap_set_advertising_enable>:
10054ba6:	b580      	push	{r7, lr}
10054ba8:	f7ff ffc0 	bl	10054b2c <GAP_set_advertising_enable_ucfg_weak>
10054bac:	bd80      	pop	{r7, pc}

10054bae <aci_gap_set_io_capability_api>:
10054bae:	b580      	push	{r7, lr}
10054bb0:	2804      	cmp	r0, #4
10054bb2:	d901      	bls.n	10054bb8 <aci_gap_set_io_capability_api+0xa>
10054bb4:	2012      	movs	r0, #18
10054bb6:	bd80      	pop	{r7, pc}
10054bb8:	f00d fb26 	bl	10062208 <smp_sap_aci_set_io_capabilities>
10054bbc:	bd80      	pop	{r7, pc}
	...

10054bc0 <aci_gap_set_security_requirements_api>:
10054bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10054bc2:	b089      	sub	sp, #36	@ 0x24
10054bc4:	4605      	mov	r5, r0
10054bc6:	4608      	mov	r0, r1
10054bc8:	4328      	orrs	r0, r5
10054bca:	2412      	movs	r4, #18
10054bcc:	2801      	cmp	r0, #1
10054bce:	d836      	bhi.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054bd0:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
10054bd2:	2f07      	cmp	r7, #7
10054bd4:	d333      	bcc.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054bd6:	2f10      	cmp	r7, #16
10054bd8:	d831      	bhi.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054bda:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10054bdc:	2810      	cmp	r0, #16
10054bde:	d82e      	bhi.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054be0:	42b8      	cmp	r0, r7
10054be2:	d32c      	bcc.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054be4:	460e      	mov	r6, r1
10054be6:	9910      	ldr	r1, [sp, #64]	@ 0x40
10054be8:	2902      	cmp	r1, #2
10054bea:	d828      	bhi.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054bec:	9101      	str	r1, [sp, #4]
10054bee:	9002      	str	r0, [sp, #8]
10054bf0:	9303      	str	r3, [sp, #12]
10054bf2:	9204      	str	r2, [sp, #16]
10054bf4:	f00d fd81 	bl	100626fa <secure_connections_csr_ucfg_weak>
10054bf8:	2801      	cmp	r0, #1
10054bfa:	d106      	bne.n	10054c0a <aci_gap_set_security_requirements_api+0x4a>
10054bfc:	9904      	ldr	r1, [sp, #16]
10054bfe:	2902      	cmp	r1, #2
10054c00:	d81d      	bhi.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054c02:	9a03      	ldr	r2, [sp, #12]
10054c04:	2a01      	cmp	r2, #1
10054c06:	d907      	bls.n	10054c18 <aci_gap_set_security_requirements_api+0x58>
10054c08:	e019      	b.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054c0a:	9a03      	ldr	r2, [sp, #12]
10054c0c:	4610      	mov	r0, r2
10054c0e:	9904      	ldr	r1, [sp, #16]
10054c10:	4308      	orrs	r0, r1
10054c12:	d001      	beq.n	10054c18 <aci_gap_set_security_requirements_api+0x58>
10054c14:	2411      	movs	r4, #17
10054c16:	e012      	b.n	10054c3e <aci_gap_set_security_requirements_api+0x7e>
10054c18:	ac05      	add	r4, sp, #20
10054c1a:	9801      	ldr	r0, [sp, #4]
10054c1c:	7320      	strb	r0, [r4, #12]
10054c1e:	4809      	ldr	r0, [pc, #36]	@ (10054c44 <__arm_cp.1_0>)
10054c20:	80e0      	strh	r0, [r4, #6]
10054c22:	9802      	ldr	r0, [sp, #8]
10054c24:	7160      	strb	r0, [r4, #5]
10054c26:	7127      	strb	r7, [r4, #4]
10054c28:	70e2      	strb	r2, [r4, #3]
10054c2a:	70a1      	strb	r1, [r4, #2]
10054c2c:	7066      	strb	r6, [r4, #1]
10054c2e:	7025      	strb	r5, [r4, #0]
10054c30:	f001 fcfe 	bl	10056630 <GAP_get_identity_address_type>
10054c34:	7360      	strb	r0, [r4, #13]
10054c36:	4620      	mov	r0, r4
10054c38:	f00d fb1c 	bl	10062274 <smp_sap_aci_set_authentication_req>
10054c3c:	4604      	mov	r4, r0
10054c3e:	4620      	mov	r0, r4
10054c40:	b009      	add	sp, #36	@ 0x24
10054c42:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054c44 <__arm_cp.1_0>:
10054c44:	00000707 	.word	0x00000707

10054c48 <aci_gap_passkey_resp_api>:
10054c48:	b580      	push	{r7, lr}
10054c4a:	4a04      	ldr	r2, [pc, #16]	@ (10054c5c <__arm_cp.4_0>)
10054c4c:	4291      	cmp	r1, r2
10054c4e:	d901      	bls.n	10054c54 <aci_gap_passkey_resp_api+0xc>
10054c50:	2012      	movs	r0, #18
10054c52:	bd80      	pop	{r7, pc}
10054c54:	f00d fb38 	bl	100622c8 <smp_sap_aci_passkey_response>
10054c58:	bd80      	pop	{r7, pc}
10054c5a:	46c0      	nop			@ (mov r8, r8)

10054c5c <__arm_cp.4_0>:
10054c5c:	000f423f 	.word	0x000f423f

10054c60 <aci_gatt_srv_add_service_api>:
10054c60:	b580      	push	{r7, lr}
10054c62:	f004 fa37 	bl	100590d4 <GAT_srv_add_service>
10054c66:	bd80      	pop	{r7, pc}

10054c68 <aci_gatt_srv_get_service_handle_api>:
10054c68:	b580      	push	{r7, lr}
10054c6a:	f004 fc71 	bl	10059550 <GAT_srv_get_service_handle>
10054c6e:	bd80      	pop	{r7, pc}

10054c70 <aci_gatt_srv_add_char_api>:
10054c70:	b580      	push	{r7, lr}
10054c72:	f004 fadf 	bl	10059234 <GAT_srv_add_characteristic>
10054c76:	bd80      	pop	{r7, pc}

10054c78 <aci_gatt_srv_get_char_decl_handle_api>:
10054c78:	b580      	push	{r7, lr}
10054c7a:	f004 fc73 	bl	10059564 <GAT_srv_get_char_decl_handle>
10054c7e:	bd80      	pop	{r7, pc}

10054c80 <aci_gatt_srv_resp_api>:
10054c80:	b51c      	push	{r2, r3, r4, lr}
10054c82:	9c05      	ldr	r4, [sp, #20]
10054c84:	9401      	str	r4, [sp, #4]
10054c86:	9c04      	ldr	r4, [sp, #16]
10054c88:	9400      	str	r4, [sp, #0]
10054c8a:	f004 fc59 	bl	10059540 <GAT_srv_resp>
10054c8e:	2000      	movs	r0, #0
10054c90:	bd1c      	pop	{r2, r3, r4, pc}

10054c92 <configBitmapSet>:
10054c92:	2000      	movs	r0, #0
10054c94:	4770      	bx	lr
	...

10054c98 <HAL_Write_ConfigData>:
10054c98:	b5f0      	push	{r4, r5, r6, r7, lr}
10054c9a:	b087      	sub	sp, #28
10054c9c:	4614      	mov	r4, r2
10054c9e:	460d      	mov	r5, r1
10054ca0:	4606      	mov	r6, r0
10054ca2:	4869      	ldr	r0, [pc, #420]	@ (10054e48 <__arm_cp.4_0>)
10054ca4:	6800      	ldr	r0, [r0, #0]
10054ca6:	2e00      	cmp	r6, #0
10054ca8:	d101      	bne.n	10054cae <HAL_Write_ConfigData+0x16>
10054caa:	2d06      	cmp	r5, #6
10054cac:	d017      	beq.n	10054cde <HAL_Write_ConfigData+0x46>
10054cae:	2e06      	cmp	r6, #6
10054cb0:	d101      	bne.n	10054cb6 <HAL_Write_ConfigData+0x1e>
10054cb2:	2d02      	cmp	r5, #2
10054cb4:	d013      	beq.n	10054cde <HAL_Write_ConfigData+0x46>
10054cb6:	2e08      	cmp	r6, #8
10054cb8:	d101      	bne.n	10054cbe <HAL_Write_ConfigData+0x26>
10054cba:	2d10      	cmp	r5, #16
10054cbc:	d00f      	beq.n	10054cde <HAL_Write_ConfigData+0x46>
10054cbe:	2e18      	cmp	r6, #24
10054cc0:	d101      	bne.n	10054cc6 <HAL_Write_ConfigData+0x2e>
10054cc2:	2d10      	cmp	r5, #16
10054cc4:	d00b      	beq.n	10054cde <HAL_Write_ConfigData+0x46>
10054cc6:	2e28      	cmp	r6, #40	@ 0x28
10054cc8:	d101      	bne.n	10054cce <HAL_Write_ConfigData+0x36>
10054cca:	2d02      	cmp	r5, #2
10054ccc:	d007      	beq.n	10054cde <HAL_Write_ConfigData+0x46>
10054cce:	2e2a      	cmp	r6, #42	@ 0x2a
10054cd0:	d101      	bne.n	10054cd6 <HAL_Write_ConfigData+0x3e>
10054cd2:	2d02      	cmp	r5, #2
10054cd4:	d003      	beq.n	10054cde <HAL_Write_ConfigData+0x46>
10054cd6:	2e2c      	cmp	r6, #44	@ 0x2c
10054cd8:	d109      	bne.n	10054cee <HAL_Write_ConfigData+0x56>
10054cda:	2d01      	cmp	r5, #1
10054cdc:	d107      	bne.n	10054cee <HAL_Write_ConfigData+0x56>
10054cde:	1980      	adds	r0, r0, r6
10054ce0:	4621      	mov	r1, r4
10054ce2:	462a      	mov	r2, r5
10054ce4:	f7fd feb0 	bl	10052a48 <BLEPLAT_MemCpy>
10054ce8:	2000      	movs	r0, #0
10054cea:	b007      	add	sp, #28
10054cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054cee:	2e2e      	cmp	r6, #46	@ 0x2e
10054cf0:	d107      	bne.n	10054d02 <HAL_Write_ConfigData+0x6a>
10054cf2:	2d06      	cmp	r5, #6
10054cf4:	d105      	bne.n	10054d02 <HAL_Write_ConfigData+0x6a>
10054cf6:	7961      	ldrb	r1, [r4, #5]
10054cf8:	0989      	lsrs	r1, r1, #6
10054cfa:	2903      	cmp	r1, #3
10054cfc:	d2ef      	bcs.n	10054cde <HAL_Write_ConfigData+0x46>
10054cfe:	2012      	movs	r0, #18
10054d00:	e7f3      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054d02:	2ed0      	cmp	r6, #208	@ 0xd0
10054d04:	d105      	bne.n	10054d12 <HAL_Write_ConfigData+0x7a>
10054d06:	2d01      	cmp	r5, #1
10054d08:	d103      	bne.n	10054d12 <HAL_Write_ConfigData+0x7a>
10054d0a:	7820      	ldrb	r0, [r4, #0]
10054d0c:	f7fa f9df 	bl	1004f0ce <smp_sap_scp_force_debug_key_usage_ucfg>
10054d10:	e7eb      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054d12:	2ed2      	cmp	r6, #210	@ 0xd2
10054d14:	d105      	bne.n	10054d22 <HAL_Write_ConfigData+0x8a>
10054d16:	2d01      	cmp	r5, #1
10054d18:	d103      	bne.n	10054d22 <HAL_Write_ConfigData+0x8a>
10054d1a:	7821      	ldrb	r1, [r4, #0]
10054d1c:	2236      	movs	r2, #54	@ 0x36
10054d1e:	5481      	strb	r1, [r0, r2]
10054d20:	e7e2      	b.n	10054ce8 <HAL_Write_ConfigData+0x50>
10054d22:	2ed5      	cmp	r6, #213	@ 0xd5
10054d24:	d10a      	bne.n	10054d3c <HAL_Write_ConfigData+0xa4>
10054d26:	2d04      	cmp	r5, #4
10054d28:	d108      	bne.n	10054d3c <HAL_Write_ConfigData+0xa4>
10054d2a:	a802      	add	r0, sp, #8
10054d2c:	2204      	movs	r2, #4
10054d2e:	4621      	mov	r1, r4
10054d30:	f7fd fe8a 	bl	10052a48 <BLEPLAT_MemCpy>
10054d34:	9802      	ldr	r0, [sp, #8]
10054d36:	f7fa f9bd 	bl	1004f0b4 <smp_debug_trudy__set_config_ucfg>
10054d3a:	e7d6      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054d3c:	f004 fe20 	bl	10059980 <data_length_extension_csr_ucfg_weak>
10054d40:	2d08      	cmp	r5, #8
10054d42:	d123      	bne.n	10054d8c <HAL_Write_ConfigData+0xf4>
10054d44:	2ed1      	cmp	r6, #209	@ 0xd1
10054d46:	d121      	bne.n	10054d8c <HAL_Write_ConfigData+0xf4>
10054d48:	2801      	cmp	r0, #1
10054d4a:	d11f      	bne.n	10054d8c <HAL_Write_ConfigData+0xf4>
10054d4c:	a802      	add	r0, sp, #8
10054d4e:	9001      	str	r0, [sp, #4]
10054d50:	2602      	movs	r6, #2
10054d52:	4d3f      	ldr	r5, [pc, #252]	@ (10054e50 <__arm_cp.4_2>)
10054d54:	4621      	mov	r1, r4
10054d56:	4632      	mov	r2, r6
10054d58:	47a8      	blx	r5
10054d5a:	1ca1      	adds	r1, r4, #2
10054d5c:	af06      	add	r7, sp, #24
10054d5e:	4638      	mov	r0, r7
10054d60:	4632      	mov	r2, r6
10054d62:	47a8      	blx	r5
10054d64:	1d21      	adds	r1, r4, #4
10054d66:	ad05      	add	r5, sp, #20
10054d68:	4628      	mov	r0, r5
10054d6a:	4632      	mov	r2, r6
10054d6c:	4b38      	ldr	r3, [pc, #224]	@ (10054e50 <__arm_cp.4_2>)
10054d6e:	4798      	blx	r3
10054d70:	1da1      	adds	r1, r4, #6
10054d72:	ac04      	add	r4, sp, #16
10054d74:	4620      	mov	r0, r4
10054d76:	4632      	mov	r2, r6
10054d78:	4b35      	ldr	r3, [pc, #212]	@ (10054e50 <__arm_cp.4_2>)
10054d7a:	4798      	blx	r3
10054d7c:	8823      	ldrh	r3, [r4, #0]
10054d7e:	882a      	ldrh	r2, [r5, #0]
10054d80:	8839      	ldrh	r1, [r7, #0]
10054d82:	9801      	ldr	r0, [sp, #4]
10054d84:	8800      	ldrh	r0, [r0, #0]
10054d86:	f00b fa6d 	bl	10060264 <ll_write_supported_data_ucfg_weak>
10054d8a:	e7ae      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054d8c:	2e30      	cmp	r6, #48	@ 0x30
10054d8e:	d105      	bne.n	10054d9c <HAL_Write_ConfigData+0x104>
10054d90:	2d01      	cmp	r5, #1
10054d92:	d103      	bne.n	10054d9c <HAL_Write_ConfigData+0x104>
10054d94:	7820      	ldrb	r0, [r4, #0]
10054d96:	f7fa f9ba 	bl	1004f10e <llc_conn_multi_link_connection_ucfg>
10054d9a:	e7a6      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054d9c:	2ed3      	cmp	r6, #211	@ 0xd3
10054d9e:	d105      	bne.n	10054dac <HAL_Write_ConfigData+0x114>
10054da0:	2d01      	cmp	r5, #1
10054da2:	d103      	bne.n	10054dac <HAL_Write_ConfigData+0x114>
10054da4:	7820      	ldrb	r0, [r4, #0]
10054da6:	f00b f96b 	bl	10060080 <LL_force_chsel_1>
10054daa:	e79e      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054dac:	2eff      	cmp	r6, #255	@ 0xff
10054dae:	d10a      	bne.n	10054dc6 <HAL_Write_ConfigData+0x12e>
10054db0:	2d04      	cmp	r5, #4
10054db2:	d108      	bne.n	10054dc6 <HAL_Write_ConfigData+0x12e>
10054db4:	a802      	add	r0, sp, #8
10054db6:	2204      	movs	r2, #4
10054db8:	4621      	mov	r1, r4
10054dba:	f7fd fe45 	bl	10052a48 <BLEPLAT_MemCpy>
10054dbe:	9802      	ldr	r0, [sp, #8]
10054dc0:	f7ff ff67 	bl	10054c92 <configBitmapSet>
10054dc4:	e00c      	b.n	10054de0 <HAL_Write_ConfigData+0x148>
10054dc6:	2efe      	cmp	r6, #254	@ 0xfe
10054dc8:	d10d      	bne.n	10054de6 <HAL_Write_ConfigData+0x14e>
10054dca:	2d05      	cmp	r5, #5
10054dcc:	d10b      	bne.n	10054de6 <HAL_Write_ConfigData+0x14e>
10054dce:	ad02      	add	r5, sp, #8
10054dd0:	2205      	movs	r2, #5
10054dd2:	4628      	mov	r0, r5
10054dd4:	4621      	mov	r1, r4
10054dd6:	f7fd fe37 	bl	10052a48 <BLEPLAT_MemCpy>
10054dda:	4628      	mov	r0, r5
10054ddc:	f000 fb78 	bl	100554d0 <log_verbosity_set_ucfg_weak>
10054de0:	2800      	cmp	r0, #0
10054de2:	d181      	bne.n	10054ce8 <HAL_Write_ConfigData+0x50>
10054de4:	e78b      	b.n	10054cfe <HAL_Write_ConfigData+0x66>
10054de6:	2e2f      	cmp	r6, #47	@ 0x2f
10054de8:	d105      	bne.n	10054df6 <HAL_Write_ConfigData+0x15e>
10054dea:	2d01      	cmp	r5, #1
10054dec:	d103      	bne.n	10054df6 <HAL_Write_ConfigData+0x15e>
10054dee:	7820      	ldrb	r0, [r4, #0]
10054df0:	f007 f85c 	bl	1005beac <llc_scan_set_scan_channel_bitmap>
10054df4:	e779      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054df6:	2e32      	cmp	r6, #50	@ 0x32
10054df8:	d112      	bne.n	10054e20 <HAL_Write_ConfigData+0x188>
10054dfa:	2d02      	cmp	r5, #2
10054dfc:	d110      	bne.n	10054e20 <HAL_Write_ConfigData+0x188>
10054dfe:	ad02      	add	r5, sp, #8
10054e00:	2202      	movs	r2, #2
10054e02:	4628      	mov	r0, r5
10054e04:	4621      	mov	r1, r4
10054e06:	f7fd fe1f 	bl	10052a48 <BLEPLAT_MemCpy>
10054e0a:	8828      	ldrh	r0, [r5, #0]
10054e0c:	1e41      	subs	r1, r0, #1
10054e0e:	08c9      	lsrs	r1, r1, #3
10054e10:	29e0      	cmp	r1, #224	@ 0xe0
10054e12:	d900      	bls.n	10054e16 <HAL_Write_ConfigData+0x17e>
10054e14:	e773      	b.n	10054cfe <HAL_Write_ConfigData+0x66>
10054e16:	490d      	ldr	r1, [pc, #52]	@ (10054e4c <__arm_cp.4_1>)
10054e18:	6809      	ldr	r1, [r1, #0]
10054e1a:	225a      	movs	r2, #90	@ 0x5a
10054e1c:	5288      	strh	r0, [r1, r2]
10054e1e:	e763      	b.n	10054ce8 <HAL_Write_ConfigData+0x50>
10054e20:	2012      	movs	r0, #18
10054e22:	2e33      	cmp	r6, #51	@ 0x33
10054e24:	d000      	beq.n	10054e28 <HAL_Write_ConfigData+0x190>
10054e26:	e760      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054e28:	2d01      	cmp	r5, #1
10054e2a:	d000      	beq.n	10054e2e <HAL_Write_ConfigData+0x196>
10054e2c:	e75d      	b.n	10054cea <HAL_Write_ConfigData+0x52>
10054e2e:	ad02      	add	r5, sp, #8
10054e30:	2201      	movs	r2, #1
10054e32:	4628      	mov	r0, r5
10054e34:	4621      	mov	r1, r4
10054e36:	f7fd fe07 	bl	10052a48 <BLEPLAT_MemCpy>
10054e3a:	7828      	ldrb	r0, [r5, #0]
10054e3c:	f001 fcd8 	bl	100567f0 <GAP_enable_rpa_change_at_timeout>
10054e40:	7828      	ldrb	r0, [r5, #0]
10054e42:	f006 fffb 	bl	1005be3c <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>
10054e46:	e74f      	b.n	10054ce8 <HAL_Write_ConfigData+0x50>

10054e48 <__arm_cp.4_0>:
10054e48:	20002414 	.word	0x20002414

10054e4c <__arm_cp.4_1>:
10054e4c:	2000241c 	.word	0x2000241c

10054e50 <__arm_cp.4_2>:
10054e50:	10052a49 	.word	0x10052a49

10054e54 <aci_hal_write_config_data>:
10054e54:	b580      	push	{r7, lr}
10054e56:	f7ff ff1f 	bl	10054c98 <HAL_Write_ConfigData>
10054e5a:	bd80      	pop	{r7, pc}

10054e5c <aci_hal_set_tx_power_level>:
10054e5c:	b580      	push	{r7, lr}
10054e5e:	f000 f801 	bl	10054e64 <HAL_Set_TX_Power_Level>
10054e62:	bd80      	pop	{r7, pc}

10054e64 <HAL_Set_TX_Power_Level>:
10054e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054e66:	460e      	mov	r6, r1
10054e68:	4605      	mov	r5, r0
10054e6a:	2412      	movs	r4, #18
10054e6c:	f7fd fe90 	bl	10052b90 <BLEPLAT_GetMaxPALevel>
10054e70:	42b0      	cmp	r0, r6
10054e72:	d317      	bcc.n	10054ea4 <HAL_Set_TX_Power_Level+0x40>
10054e74:	2d01      	cmp	r5, #1
10054e76:	d815      	bhi.n	10054ea4 <HAL_Set_TX_Power_Level+0x40>
10054e78:	480b      	ldr	r0, [pc, #44]	@ (10054ea8 <__arm_cp.11_0>)
10054e7a:	6800      	ldr	r0, [r0, #0]
10054e7c:	7a81      	ldrb	r1, [r0, #10]
10054e7e:	9100      	str	r1, [sp, #0]
10054e80:	7285      	strb	r5, [r0, #10]
10054e82:	7a47      	ldrb	r7, [r0, #9]
10054e84:	7246      	strb	r6, [r0, #9]
10054e86:	4628      	mov	r0, r5
10054e88:	f7fd fe92 	bl	10052bb0 <BLEPLAT_SetHighPower>
10054e8c:	2400      	movs	r4, #0
10054e8e:	42b7      	cmp	r7, r6
10054e90:	d102      	bne.n	10054e98 <HAL_Set_TX_Power_Level+0x34>
10054e92:	9800      	ldr	r0, [sp, #0]
10054e94:	42a8      	cmp	r0, r5
10054e96:	d005      	beq.n	10054ea4 <HAL_Set_TX_Power_Level+0x40>
10054e98:	20ff      	movs	r0, #255	@ 0xff
10054e9a:	227f      	movs	r2, #127	@ 0x7f
10054e9c:	2101      	movs	r1, #1
10054e9e:	460b      	mov	r3, r1
10054ea0:	f009 fa5e 	bl	1005e360 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10054ea4:	4620      	mov	r0, r4
10054ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054ea8 <__arm_cp.11_0>:
10054ea8:	20002468 	.word	0x20002468

10054eac <ble_HAL_Init>:
10054eac:	b580      	push	{r7, lr}
10054eae:	4804      	ldr	r0, [pc, #16]	@ (10054ec0 <__arm_cp.17_0>)
10054eb0:	6800      	ldr	r0, [r0, #0]
10054eb2:	3060      	adds	r0, #96	@ 0x60
10054eb4:	2100      	movs	r1, #0
10054eb6:	2204      	movs	r2, #4
10054eb8:	f7fd fdd6 	bl	10052a68 <BLEPLAT_MemSet>
10054ebc:	bd80      	pop	{r7, pc}
10054ebe:	46c0      	nop			@ (mov r8, r8)

10054ec0 <__arm_cp.17_0>:
10054ec0:	20002468 	.word	0x20002468

10054ec4 <hal_read_radio_activity_state>:
10054ec4:	b570      	push	{r4, r5, r6, lr}
10054ec6:	4603      	mov	r3, r0
10054ec8:	480a      	ldr	r0, [pc, #40]	@ (10054ef4 <__arm_cp.18_0>)
10054eca:	6804      	ldr	r4, [r0, #0]
10054ecc:	f3ef 8010 	mrs	r0, PRIMASK
10054ed0:	b672      	cpsid	i
10054ed2:	7d20      	ldrb	r0, [r4, #20]
10054ed4:	2500      	movs	r5, #0
10054ed6:	7525      	strb	r5, [r4, #20]
10054ed8:	7c25      	ldrb	r5, [r4, #16]
10054eda:	260f      	movs	r6, #15
10054edc:	402e      	ands	r6, r5
10054ede:	701e      	strb	r6, [r3, #0]
10054ee0:	7c23      	ldrb	r3, [r4, #16]
10054ee2:	091b      	lsrs	r3, r3, #4
10054ee4:	700b      	strb	r3, [r1, #0]
10054ee6:	68e1      	ldr	r1, [r4, #12]
10054ee8:	6011      	str	r1, [r2, #0]
10054eea:	1e41      	subs	r1, r0, #1
10054eec:	4188      	sbcs	r0, r1
10054eee:	b662      	cpsie	i
10054ef0:	bd70      	pop	{r4, r5, r6, pc}
10054ef2:	46c0      	nop			@ (mov r8, r8)

10054ef4 <__arm_cp.18_0>:
10054ef4:	20002468 	.word	0x20002468

10054ef8 <hal_radio_activity_state_init>:
10054ef8:	4803      	ldr	r0, [pc, #12]	@ (10054f08 <__arm_cp.20_0>)
10054efa:	6800      	ldr	r0, [r0, #0]
10054efc:	2100      	movs	r1, #0
10054efe:	7501      	strb	r1, [r0, #20]
10054f00:	8241      	strh	r1, [r0, #18]
10054f02:	7401      	strb	r1, [r0, #16]
10054f04:	4770      	bx	lr
10054f06:	46c0      	nop			@ (mov r8, r8)

10054f08 <__arm_cp.20_0>:
10054f08:	20002468 	.word	0x20002468

10054f0c <hal_radio_activity_state_cb_check>:
10054f0c:	b510      	push	{r4, lr}
10054f0e:	b086      	sub	sp, #24
10054f10:	4815      	ldr	r0, [pc, #84]	@ (10054f68 <__arm_cp.22_0>)
10054f12:	6804      	ldr	r4, [r0, #0]
10054f14:	a802      	add	r0, sp, #8
10054f16:	a901      	add	r1, sp, #4
10054f18:	466a      	mov	r2, sp
10054f1a:	f7ff ffd3 	bl	10054ec4 <hal_read_radio_activity_state>
10054f1e:	2800      	cmp	r0, #0
10054f20:	d01f      	beq.n	10054f62 <hal_radio_activity_state_cb_check+0x56>
10054f22:	a802      	add	r0, sp, #8
10054f24:	7801      	ldrb	r1, [r0, #0]
10054f26:	8a60      	ldrh	r0, [r4, #18]
10054f28:	40c8      	lsrs	r0, r1
10054f2a:	07c0      	lsls	r0, r0, #31
10054f2c:	d019      	beq.n	10054f62 <hal_radio_activity_state_cb_check+0x56>
10054f2e:	9a01      	ldr	r2, [sp, #4]
10054f30:	9b00      	ldr	r3, [sp, #0]
10054f32:	a803      	add	r0, sp, #12
10054f34:	2408      	movs	r4, #8
10054f36:	7084      	strb	r4, [r0, #2]
10054f38:	0e1c      	lsrs	r4, r3, #24
10054f3a:	72c4      	strb	r4, [r0, #11]
10054f3c:	0c1c      	lsrs	r4, r3, #16
10054f3e:	7284      	strb	r4, [r0, #10]
10054f40:	0a1c      	lsrs	r4, r3, #8
10054f42:	7244      	strb	r4, [r0, #9]
10054f44:	7203      	strb	r3, [r0, #8]
10054f46:	71c2      	strb	r2, [r0, #7]
10054f48:	7181      	strb	r1, [r0, #6]
10054f4a:	21ff      	movs	r1, #255	@ 0xff
10054f4c:	7041      	strb	r1, [r0, #1]
10054f4e:	2182      	movs	r1, #130	@ 0x82
10054f50:	7001      	strb	r1, [r0, #0]
10054f52:	2100      	movs	r1, #0
10054f54:	7141      	strb	r1, [r0, #5]
10054f56:	2204      	movs	r2, #4
10054f58:	7102      	strb	r2, [r0, #4]
10054f5a:	70c1      	strb	r1, [r0, #3]
10054f5c:	210c      	movs	r1, #12
10054f5e:	f7f9 ff41 	bl	1004ede4 <BLE_STACK_Event>
10054f62:	b006      	add	sp, #24
10054f64:	bd10      	pop	{r4, pc}
10054f66:	46c0      	nop			@ (mov r8, r8)

10054f68 <__arm_cp.22_0>:
10054f68:	20002468 	.word	0x20002468

10054f6c <aci_l2cap_connection_parameter_update_req_api>:
10054f6c:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10054f6e:	ac01      	add	r4, sp, #4
10054f70:	9d08      	ldr	r5, [sp, #32]
10054f72:	8125      	strh	r5, [r4, #8]
10054f74:	80e3      	strh	r3, [r4, #6]
10054f76:	80a2      	strh	r2, [r4, #4]
10054f78:	8061      	strh	r1, [r4, #2]
10054f7a:	8020      	strh	r0, [r4, #0]
10054f7c:	4620      	mov	r0, r4
10054f7e:	f004 fd0b 	bl	10059998 <L2C_build_connect_update_request>
10054f82:	b004      	add	sp, #16
10054f84:	bdb0      	pop	{r4, r5, r7, pc}
	...

10054f88 <Acl_Init>:
10054f88:	4803      	ldr	r0, [pc, #12]	@ (10054f98 <__arm_cp.0_0>)
10054f8a:	6800      	ldr	r0, [r0, #0]
10054f8c:	2188      	movs	r1, #136	@ 0x88
10054f8e:	4a03      	ldr	r2, [pc, #12]	@ (10054f9c <__arm_cp.0_1>)
10054f90:	5042      	str	r2, [r0, r1]
10054f92:	2000      	movs	r0, #0
10054f94:	4770      	bx	lr
10054f96:	46c0      	nop			@ (mov r8, r8)

10054f98 <__arm_cp.0_0>:
10054f98:	20002468 	.word	0x20002468

10054f9c <__arm_cp.0_1>:
10054f9c:	03030000 	.word	0x03030000

10054fa0 <isr_Acl_Data_Indication_Queue_Full>:
10054fa0:	4805      	ldr	r0, [pc, #20]	@ (10054fb8 <__arm_cp.1_0>)
10054fa2:	6800      	ldr	r0, [r0, #0]
10054fa4:	2188      	movs	r1, #136	@ 0x88
10054fa6:	5c41      	ldrb	r1, [r0, r1]
10054fa8:	3088      	adds	r0, #136	@ 0x88
10054faa:	7880      	ldrb	r0, [r0, #2]
10054fac:	4281      	cmp	r1, r0
10054fae:	d801      	bhi.n	10054fb4 <isr_Acl_Data_Indication_Queue_Full+0x14>
10054fb0:	2000      	movs	r0, #0
10054fb2:	4770      	bx	lr
10054fb4:	2001      	movs	r0, #1
10054fb6:	4770      	bx	lr

10054fb8 <__arm_cp.1_0>:
10054fb8:	20002468 	.word	0x20002468

10054fbc <isr_Acl_Data_TX_Cmpl_Queue_Full>:
10054fbc:	4805      	ldr	r0, [pc, #20]	@ (10054fd4 <__arm_cp.2_0>)
10054fbe:	6800      	ldr	r0, [r0, #0]
10054fc0:	2189      	movs	r1, #137	@ 0x89
10054fc2:	5c41      	ldrb	r1, [r0, r1]
10054fc4:	3089      	adds	r0, #137	@ 0x89
10054fc6:	7880      	ldrb	r0, [r0, #2]
10054fc8:	4281      	cmp	r1, r0
10054fca:	d801      	bhi.n	10054fd0 <isr_Acl_Data_TX_Cmpl_Queue_Full+0x14>
10054fcc:	2000      	movs	r0, #0
10054fce:	4770      	bx	lr
10054fd0:	2001      	movs	r0, #1
10054fd2:	4770      	bx	lr

10054fd4 <__arm_cp.2_0>:
10054fd4:	20002468 	.word	0x20002468

10054fd8 <Acl_Rcv_Pkt_Handler>:
10054fd8:	b510      	push	{r4, lr}
10054fda:	4604      	mov	r4, r0
10054fdc:	480a      	ldr	r0, [pc, #40]	@ (10055008 <__arm_cp.5_0>)
10054fde:	6800      	ldr	r0, [r0, #0]
10054fe0:	6900      	ldr	r0, [r0, #16]
10054fe2:	2190      	movs	r1, #144	@ 0x90
10054fe4:	2201      	movs	r2, #1
10054fe6:	4613      	mov	r3, r2
10054fe8:	f000 fa7a 	bl	100554e0 <aci_event_fifo_push_header>
10054fec:	2800      	cmp	r0, #0
10054fee:	d004      	beq.n	10054ffa <Acl_Rcv_Pkt_Handler+0x22>
10054ff0:	4601      	mov	r1, r0
10054ff2:	6044      	str	r4, [r0, #4]
10054ff4:	2090      	movs	r0, #144	@ 0x90
10054ff6:	f000 fb10 	bl	1005561a <aci_event_fifo_push>
10054ffa:	4804      	ldr	r0, [pc, #16]	@ (1005500c <__arm_cp.5_1>)
10054ffc:	6800      	ldr	r0, [r0, #0]
10054ffe:	2188      	movs	r1, #136	@ 0x88
10055000:	5c42      	ldrb	r2, [r0, r1]
10055002:	1c52      	adds	r2, r2, #1
10055004:	5442      	strb	r2, [r0, r1]
10055006:	bd10      	pop	{r4, pc}

10055008 <__arm_cp.5_0>:
10055008:	20002418 	.word	0x20002418

1005500c <__arm_cp.5_1>:
1005500c:	20002468 	.word	0x20002468

10055010 <Acl_Tx_Cmpl_Pkt_Handler>:
10055010:	b510      	push	{r4, lr}
10055012:	4604      	mov	r4, r0
10055014:	7a00      	ldrb	r0, [r0, #8]
10055016:	21f7      	movs	r1, #247	@ 0xf7
10055018:	4001      	ands	r1, r0
1005501a:	7221      	strb	r1, [r4, #8]
1005501c:	480a      	ldr	r0, [pc, #40]	@ (10055048 <__arm_cp.6_0>)
1005501e:	6800      	ldr	r0, [r0, #0]
10055020:	6900      	ldr	r0, [r0, #16]
10055022:	2190      	movs	r1, #144	@ 0x90
10055024:	2200      	movs	r2, #0
10055026:	2301      	movs	r3, #1
10055028:	f000 fa5a 	bl	100554e0 <aci_event_fifo_push_header>
1005502c:	2800      	cmp	r0, #0
1005502e:	d004      	beq.n	1005503a <Acl_Tx_Cmpl_Pkt_Handler+0x2a>
10055030:	4601      	mov	r1, r0
10055032:	6044      	str	r4, [r0, #4]
10055034:	2090      	movs	r0, #144	@ 0x90
10055036:	f000 faf0 	bl	1005561a <aci_event_fifo_push>
1005503a:	4804      	ldr	r0, [pc, #16]	@ (1005504c <__arm_cp.6_1>)
1005503c:	6800      	ldr	r0, [r0, #0]
1005503e:	2189      	movs	r1, #137	@ 0x89
10055040:	5c42      	ldrb	r2, [r0, r1]
10055042:	1c52      	adds	r2, r2, #1
10055044:	5442      	strb	r2, [r0, r1]
10055046:	bd10      	pop	{r4, pc}

10055048 <__arm_cp.6_0>:
10055048:	20002418 	.word	0x20002418

1005504c <__arm_cp.6_1>:
1005504c:	20002468 	.word	0x20002468

10055050 <Acl_Transmit_Data>:
10055050:	b510      	push	{r4, lr}
10055052:	2400      	movs	r4, #0
10055054:	61c4      	str	r4, [r0, #28]
10055056:	f006 fc0f 	bl	1005b878 <llc_conn_send_acl_data>
1005505a:	2884      	cmp	r0, #132	@ 0x84
1005505c:	d000      	beq.n	10055060 <Acl_Transmit_Data+0x10>
1005505e:	2481      	movs	r4, #129	@ 0x81
10055060:	4620      	mov	r0, r4
10055062:	bd10      	pop	{r4, pc}

10055064 <hci_acl_data_tx_cmpl_event_int_cb>:
10055064:	b5b0      	push	{r4, r5, r7, lr}
10055066:	6809      	ldr	r1, [r1, #0]
10055068:	2483      	movs	r4, #131	@ 0x83
1005506a:	2200      	movs	r2, #0
1005506c:	2900      	cmp	r1, #0
1005506e:	d012      	beq.n	10055096 <hci_acl_data_tx_cmpl_event_int_cb+0x32>
10055070:	69cd      	ldr	r5, [r1, #28]
10055072:	2400      	movs	r4, #0
10055074:	61cc      	str	r4, [r1, #28]
10055076:	7a08      	ldrb	r0, [r1, #8]
10055078:	06c0      	lsls	r0, r0, #27
1005507a:	d403      	bmi.n	10055084 <hci_acl_data_tx_cmpl_event_int_cb+0x20>
1005507c:	2000      	movs	r0, #0
1005507e:	f004 ff87 	bl	10059f90 <L2C_mux_acl_packet>
10055082:	e002      	b.n	1005508a <hci_acl_data_tx_cmpl_event_int_cb+0x26>
10055084:	4608      	mov	r0, r1
10055086:	f004 faab 	bl	100595e0 <hci_tx_acl_data_done>
1005508a:	2201      	movs	r2, #1
1005508c:	2800      	cmp	r0, #0
1005508e:	4629      	mov	r1, r5
10055090:	d0ec      	beq.n	1005506c <hci_acl_data_tx_cmpl_event_int_cb+0x8>
10055092:	2483      	movs	r4, #131	@ 0x83
10055094:	e00c      	b.n	100550b0 <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10055096:	07d0      	lsls	r0, r2, #31
10055098:	d00a      	beq.n	100550b0 <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
1005509a:	f3ef 8010 	mrs	r0, PRIMASK
1005509e:	b672      	cpsid	i
100550a0:	4804      	ldr	r0, [pc, #16]	@ (100550b4 <__arm_cp.9_0>)
100550a2:	6800      	ldr	r0, [r0, #0]
100550a4:	2189      	movs	r1, #137	@ 0x89
100550a6:	5c42      	ldrb	r2, [r0, r1]
100550a8:	1e52      	subs	r2, r2, #1
100550aa:	5442      	strb	r2, [r0, r1]
100550ac:	b662      	cpsie	i
100550ae:	2400      	movs	r4, #0
100550b0:	b2e0      	uxtb	r0, r4
100550b2:	bdb0      	pop	{r4, r5, r7, pc}

100550b4 <__arm_cp.9_0>:
100550b4:	20002468 	.word	0x20002468

100550b8 <hci_acl_data_ind_event_int_cb>:
100550b8:	b580      	push	{r7, lr}
100550ba:	480e      	ldr	r0, [pc, #56]	@ (100550f4 <__arm_cp.11_0>)
100550bc:	6800      	ldr	r0, [r0, #0]
100550be:	222c      	movs	r2, #44	@ 0x2c
100550c0:	5c80      	ldrb	r0, [r0, r2]
100550c2:	07c0      	lsls	r0, r0, #31
100550c4:	6808      	ldr	r0, [r1, #0]
100550c6:	d102      	bne.n	100550ce <hci_acl_data_ind_event_int_cb+0x16>
100550c8:	f004 fed4 	bl	10059e74 <L2C_receive_data>
100550cc:	e001      	b.n	100550d2 <hci_acl_data_ind_event_int_cb+0x1a>
100550ce:	f004 fa53 	bl	10059578 <hci_rx_acl_data>
100550d2:	2800      	cmp	r0, #0
100550d4:	d001      	beq.n	100550da <hci_acl_data_ind_event_int_cb+0x22>
100550d6:	2083      	movs	r0, #131	@ 0x83
100550d8:	bd80      	pop	{r7, pc}
100550da:	f3ef 8010 	mrs	r0, PRIMASK
100550de:	b672      	cpsid	i
100550e0:	4805      	ldr	r0, [pc, #20]	@ (100550f8 <__arm_cp.11_1>)
100550e2:	6800      	ldr	r0, [r0, #0]
100550e4:	2188      	movs	r1, #136	@ 0x88
100550e6:	5c42      	ldrb	r2, [r0, r1]
100550e8:	1e52      	subs	r2, r2, #1
100550ea:	5442      	strb	r2, [r0, r1]
100550ec:	b662      	cpsie	i
100550ee:	2000      	movs	r0, #0
100550f0:	bd80      	pop	{r7, pc}
100550f2:	46c0      	nop			@ (mov r8, r8)

100550f4 <__arm_cp.11_0>:
100550f4:	20002414 	.word	0x20002414

100550f8 <__arm_cp.11_1>:
100550f8:	20002468 	.word	0x20002468

100550fc <ACL_pkt_init>:
100550fc:	b570      	push	{r4, r5, r6, lr}
100550fe:	4c0b      	ldr	r4, [pc, #44]	@ (1005512c <__arm_cp.1_0>)
10055100:	2501      	movs	r5, #1
10055102:	2204      	movs	r2, #4
10055104:	4620      	mov	r0, r4
10055106:	4629      	mov	r1, r5
10055108:	f00b ff4c 	bl	10060fa4 <csmem_mem_assign>
1005510c:	4e08      	ldr	r6, [pc, #32]	@ (10055130 <__arm_cp.1_1>)
1005510e:	6030      	str	r0, [r6, #0]
10055110:	2206      	movs	r2, #6
10055112:	4620      	mov	r0, r4
10055114:	4629      	mov	r1, r5
10055116:	f00b ff45 	bl	10060fa4 <csmem_mem_assign>
1005511a:	6831      	ldr	r1, [r6, #0]
1005511c:	6008      	str	r0, [r1, #0]
1005511e:	6830      	ldr	r0, [r6, #0]
10055120:	6801      	ldr	r1, [r0, #0]
10055122:	2000      	movs	r0, #0
10055124:	8088      	strh	r0, [r1, #4]
10055126:	8048      	strh	r0, [r1, #2]
10055128:	7008      	strb	r0, [r1, #0]
1005512a:	bd70      	pop	{r4, r5, r6, pc}

1005512c <__arm_cp.1_0>:
1005512c:	20002478 	.word	0x20002478

10055130 <__arm_cp.1_1>:
10055130:	20002410 	.word	0x20002410

10055134 <ACL_pkt_get>:
10055134:	b5b0      	push	{r4, r5, r7, lr}
10055136:	460d      	mov	r5, r1
10055138:	4604      	mov	r4, r0
1005513a:	1e41      	subs	r1, r0, #1
1005513c:	4188      	sbcs	r0, r1
1005513e:	1e51      	subs	r1, r2, #1
10055140:	221f      	movs	r2, #31
10055142:	430a      	orrs	r2, r1
10055144:	3221      	adds	r2, #33	@ 0x21
10055146:	b291      	uxth	r1, r2
10055148:	f00b fe0a 	bl	10060d60 <MBM_get>
1005514c:	2800      	cmp	r0, #0
1005514e:	d006      	beq.n	1005515e <ACL_pkt_get+0x2a>
10055150:	8085      	strh	r5, [r0, #4]
10055152:	6801      	ldr	r1, [r0, #0]
10055154:	6081      	str	r1, [r0, #8]
10055156:	2c00      	cmp	r4, #0
10055158:	d103      	bne.n	10055162 <ACL_pkt_get+0x2e>
1005515a:	2140      	movs	r1, #64	@ 0x40
1005515c:	e003      	b.n	10055166 <ACL_pkt_get+0x32>
1005515e:	2000      	movs	r0, #0
10055160:	bdb0      	pop	{r4, r5, r7, pc}
10055162:	217f      	movs	r1, #127	@ 0x7f
10055164:	43c9      	mvns	r1, r1
10055166:	7301      	strb	r1, [r0, #12]
10055168:	1d00      	adds	r0, r0, #4
1005516a:	bdb0      	pop	{r4, r5, r7, pc}

1005516c <ACL_pkt_get_available_mem_buffers>:
1005516c:	b580      	push	{r7, lr}
1005516e:	1e41      	subs	r1, r0, #1
10055170:	4188      	sbcs	r0, r1
10055172:	f00b fe5d 	bl	10060e30 <MBM_get_available_mem_buffers>
10055176:	bd80      	pop	{r7, pc}

10055178 <ACL_pkt_release>:
10055178:	b580      	push	{r7, lr}
1005517a:	7a01      	ldrb	r1, [r0, #8]
1005517c:	098a      	lsrs	r2, r1, #6
1005517e:	2101      	movs	r1, #1
10055180:	4391      	bics	r1, r2
10055182:	1f00      	subs	r0, r0, #4
10055184:	f00b fe26 	bl	10060dd4 <MBM_release>
10055188:	bd80      	pop	{r7, pc}

1005518a <ACL_pkt_resize>:
1005518a:	b580      	push	{r7, lr}
1005518c:	460a      	mov	r2, r1
1005518e:	7a01      	ldrb	r1, [r0, #8]
10055190:	098b      	lsrs	r3, r1, #6
10055192:	2101      	movs	r1, #1
10055194:	4399      	bics	r1, r3
10055196:	6840      	ldr	r0, [r0, #4]
10055198:	f00b fe5e 	bl	10060e58 <MBM_resize>
1005519c:	bd80      	pop	{r7, pc}

1005519e <ACL_pkt_cmp>:
1005519e:	b510      	push	{r4, lr}
100551a0:	4614      	mov	r4, r2
100551a2:	460a      	mov	r2, r1
100551a4:	6840      	ldr	r0, [r0, #4]
100551a6:	4619      	mov	r1, r3
100551a8:	4623      	mov	r3, r4
100551aa:	f00c f82f 	bl	1006120c <Mem_Buff_cmp>
100551ae:	bd10      	pop	{r4, pc}

100551b0 <ACL_pkt_read>:
100551b0:	b510      	push	{r4, lr}
100551b2:	4614      	mov	r4, r2
100551b4:	460a      	mov	r2, r1
100551b6:	6840      	ldr	r0, [r0, #4]
100551b8:	4619      	mov	r1, r3
100551ba:	4623      	mov	r3, r4
100551bc:	f00b ffed 	bl	1006119a <Mem_Buff_read>
100551c0:	bd10      	pop	{r4, pc}

100551c2 <ACL_pkt_read_16b>:
100551c2:	b5e0      	push	{r5, r6, r7, lr}
100551c4:	2202      	movs	r2, #2
100551c6:	ab01      	add	r3, sp, #4
100551c8:	f7ff fff2 	bl	100551b0 <ACL_pkt_read>
100551cc:	2800      	cmp	r0, #0
100551ce:	d001      	beq.n	100551d4 <ACL_pkt_read_16b+0x12>
100551d0:	2000      	movs	r0, #0
100551d2:	e004      	b.n	100551de <ACL_pkt_read_16b+0x1c>
100551d4:	a801      	add	r0, sp, #4
100551d6:	7801      	ldrb	r1, [r0, #0]
100551d8:	7840      	ldrb	r0, [r0, #1]
100551da:	0200      	lsls	r0, r0, #8
100551dc:	1840      	adds	r0, r0, r1
100551de:	b280      	uxth	r0, r0
100551e0:	bd8c      	pop	{r2, r3, r7, pc}

100551e2 <ACL_pkt_write_16b>:
100551e2:	b5e0      	push	{r5, r6, r7, lr}
100551e4:	ab01      	add	r3, sp, #4
100551e6:	701a      	strb	r2, [r3, #0]
100551e8:	0a12      	lsrs	r2, r2, #8
100551ea:	705a      	strb	r2, [r3, #1]
100551ec:	2202      	movs	r2, #2
100551ee:	f000 f801 	bl	100551f4 <ACL_pkt_write>
100551f2:	bd8c      	pop	{r2, r3, r7, pc}

100551f4 <ACL_pkt_write>:
100551f4:	b510      	push	{r4, lr}
100551f6:	4614      	mov	r4, r2
100551f8:	460a      	mov	r2, r1
100551fa:	6840      	ldr	r0, [r0, #4]
100551fc:	4619      	mov	r1, r3
100551fe:	4623      	mov	r3, r4
10055200:	f00b ff91 	bl	10061126 <Mem_Buff_write>
10055204:	bd10      	pop	{r4, pc}

10055206 <ACL_pkt_extract_pdu>:
10055206:	1f01      	subs	r1, r0, #4
10055208:	2200      	movs	r2, #0
1005520a:	600a      	str	r2, [r1, #0]
1005520c:	6840      	ldr	r0, [r0, #4]
1005520e:	4770      	bx	lr

10055210 <ACL_pkt_connection>:
10055210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055212:	480f      	ldr	r0, [pc, #60]	@ (10055250 <__arm_cp.14_0>)
10055214:	6800      	ldr	r0, [r0, #0]
10055216:	6805      	ldr	r5, [r0, #0]
10055218:	7828      	ldrb	r0, [r5, #0]
1005521a:	1c41      	adds	r1, r0, #1
1005521c:	7029      	strb	r1, [r5, #0]
1005521e:	4f0d      	ldr	r7, [pc, #52]	@ (10055254 <__arm_cp.14_1>)
10055220:	8a39      	ldrh	r1, [r7, #16]
10055222:	3125      	adds	r1, #37	@ 0x25
10055224:	094e      	lsrs	r6, r1, #5
10055226:	1c74      	adds	r4, r6, #1
10055228:	2800      	cmp	r0, #0
1005522a:	d109      	bne.n	10055240 <ACL_pkt_connection+0x30>
1005522c:	2000      	movs	r0, #0
1005522e:	4621      	mov	r1, r4
10055230:	f00b fe4e 	bl	10060ed0 <MBM_reserve>
10055234:	8a38      	ldrh	r0, [r7, #16]
10055236:	3025      	adds	r0, #37	@ 0x25
10055238:	0940      	lsrs	r0, r0, #5
1005523a:	1c40      	adds	r0, r0, #1
1005523c:	8068      	strh	r0, [r5, #2]
1005523e:	1cb4      	adds	r4, r6, #2
10055240:	2001      	movs	r0, #1
10055242:	4621      	mov	r1, r4
10055244:	f00b fe44 	bl	10060ed0 <MBM_reserve>
10055248:	88a8      	ldrh	r0, [r5, #4]
1005524a:	1900      	adds	r0, r0, r4
1005524c:	80a8      	strh	r0, [r5, #4]
1005524e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055250 <__arm_cp.14_0>:
10055250:	20002410 	.word	0x20002410

10055254 <__arm_cp.14_1>:
10055254:	2000247c 	.word	0x2000247c

10055258 <ACL_pkt_disconnection>:
10055258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005525a:	480e      	ldr	r0, [pc, #56]	@ (10055294 <__arm_cp.15_0>)
1005525c:	6800      	ldr	r0, [r0, #0]
1005525e:	6806      	ldr	r6, [r0, #0]
10055260:	7830      	ldrb	r0, [r6, #0]
10055262:	1e40      	subs	r0, r0, #1
10055264:	7030      	strb	r0, [r6, #0]
10055266:	490c      	ldr	r1, [pc, #48]	@ (10055298 <__arm_cp.15_1>)
10055268:	8a09      	ldrh	r1, [r1, #16]
1005526a:	3125      	adds	r1, #37	@ 0x25
1005526c:	094f      	lsrs	r7, r1, #5
1005526e:	1c7c      	adds	r4, r7, #1
10055270:	0600      	lsls	r0, r0, #24
10055272:	d106      	bne.n	10055282 <ACL_pkt_disconnection+0x2a>
10055274:	2500      	movs	r5, #0
10055276:	4628      	mov	r0, r5
10055278:	4621      	mov	r1, r4
1005527a:	f00b fe7d 	bl	10060f78 <MBM_unreserve>
1005527e:	8075      	strh	r5, [r6, #2]
10055280:	1cbc      	adds	r4, r7, #2
10055282:	2001      	movs	r0, #1
10055284:	4621      	mov	r1, r4
10055286:	f00b fe77 	bl	10060f78 <MBM_unreserve>
1005528a:	88b0      	ldrh	r0, [r6, #4]
1005528c:	1b00      	subs	r0, r0, r4
1005528e:	80b0      	strh	r0, [r6, #4]
10055290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10055292:	46c0      	nop			@ (mov r8, r8)

10055294 <__arm_cp.15_0>:
10055294:	20002410 	.word	0x20002410

10055298 <__arm_cp.15_1>:
10055298:	2000247c 	.word	0x2000247c

1005529c <BLE_STACK_Tick>:
1005529c:	b580      	push	{r7, lr}
1005529e:	f00d fc35 	bl	10062b0c <tsk_scheduler>
100552a2:	bd80      	pop	{r7, pc}

100552a4 <BlueNRG_Stack_Initialize_Layers>:
100552a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100552a6:	b08f      	sub	sp, #60	@ 0x3c
100552a8:	9309      	str	r3, [sp, #36]	@ 0x24
100552aa:	920b      	str	r2, [sp, #44]	@ 0x2c
100552ac:	910a      	str	r1, [sp, #40]	@ 0x28
100552ae:	9008      	str	r0, [sp, #32]
100552b0:	f00b fe72 	bl	10060f98 <csmem_init>
100552b4:	2401      	movs	r4, #1
100552b6:	2138      	movs	r1, #56	@ 0x38
100552b8:	4620      	mov	r0, r4
100552ba:	f00b fe85 	bl	10060fc8 <csmem_mem_0_assign>
100552be:	4933      	ldr	r1, [pc, #204]	@ (1005538c <__arm_cp.1_0>)
100552c0:	7ac9      	ldrb	r1, [r1, #11]
100552c2:	2234      	movs	r2, #52	@ 0x34
100552c4:	5481      	strb	r1, [r0, r2]
100552c6:	4e32      	ldr	r6, [pc, #200]	@ (10055390 <__arm_cp.1_1>)
100552c8:	6030      	str	r0, [r6, #0]
100552ca:	2700      	movs	r7, #0
100552cc:	7007      	strb	r7, [r0, #0]
100552ce:	6830      	ldr	r0, [r6, #0]
100552d0:	7047      	strb	r7, [r0, #1]
100552d2:	6830      	ldr	r0, [r6, #0]
100552d4:	7087      	strb	r7, [r0, #2]
100552d6:	6830      	ldr	r0, [r6, #0]
100552d8:	21e1      	movs	r1, #225	@ 0xe1
100552da:	70c1      	strb	r1, [r0, #3]
100552dc:	2005      	movs	r0, #5
100552de:	01c0      	lsls	r0, r0, #7
100552e0:	6831      	ldr	r1, [r6, #0]
100552e2:	8088      	strh	r0, [r1, #4]
100552e4:	2030      	movs	r0, #48	@ 0x30
100552e6:	8508      	strh	r0, [r1, #40]	@ 0x28
100552e8:	ad0e      	add	r5, sp, #56	@ 0x38
100552ea:	a90d      	add	r1, sp, #52	@ 0x34
100552ec:	aa0c      	add	r2, sp, #48	@ 0x30
100552ee:	4628      	mov	r0, r5
100552f0:	f7fd fbdb 	bl	10052aaa <BLEPLAT_GetPartInfo>
100552f4:	980c      	ldr	r0, [sp, #48]	@ 0x30
100552f6:	0200      	lsls	r0, r0, #8
100552f8:	7829      	ldrb	r1, [r5, #0]
100552fa:	0109      	lsls	r1, r1, #4
100552fc:	4301      	orrs	r1, r0
100552fe:	980d      	ldr	r0, [sp, #52]	@ 0x34
10055300:	0300      	lsls	r0, r0, #12
10055302:	4308      	orrs	r0, r1
10055304:	1d00      	adds	r0, r0, #4
10055306:	6831      	ldr	r1, [r6, #0]
10055308:	8548      	strh	r0, [r1, #42]	@ 0x2a
1005530a:	2118      	movs	r1, #24
1005530c:	4620      	mov	r0, r4
1005530e:	f00b fe5b 	bl	10060fc8 <csmem_mem_0_assign>
10055312:	4920      	ldr	r1, [pc, #128]	@ (10055394 <__arm_cp.1_2>)
10055314:	6008      	str	r0, [r1, #0]
10055316:	7507      	strb	r7, [r0, #20]
10055318:	f00d fbee 	bl	10062af8 <tsk_init>
1005531c:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005531e:	9006      	str	r0, [sp, #24]
10055320:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
10055322:	9405      	str	r4, [sp, #20]
10055324:	981a      	ldr	r0, [sp, #104]	@ 0x68
10055326:	9004      	str	r0, [sp, #16]
10055328:	9819      	ldr	r0, [sp, #100]	@ 0x64
1005532a:	9003      	str	r0, [sp, #12]
1005532c:	9818      	ldr	r0, [sp, #96]	@ 0x60
1005532e:	9002      	str	r0, [sp, #8]
10055330:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10055332:	9001      	str	r0, [sp, #4]
10055334:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10055336:	9500      	str	r5, [sp, #0]
10055338:	9808      	ldr	r0, [sp, #32]
1005533a:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005533c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005533e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10055340:	f7f9 ff9b 	bl	1004f27a <LL_init_ucfg>
10055344:	f7f9 feae 	bl	1004f0a4 <MBM_init_ucfg>
10055348:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
1005534a:	2c01      	cmp	r4, #1
1005534c:	d101      	bne.n	10055352 <BlueNRG_Stack_Initialize_Layers+0xae>
1005534e:	f7f9 fe21 	bl	1004ef94 <ACL_pkt_init_ucfg>
10055352:	f000 f98b 	bl	1005566c <Events_Process_init>
10055356:	2f01      	cmp	r7, #1
10055358:	d101      	bne.n	1005535e <BlueNRG_Stack_Initialize_Layers+0xba>
1005535a:	f000 f8bb 	bl	100554d4 <log_init_ucfg_weak>
1005535e:	6830      	ldr	r0, [r6, #0]
10055360:	212c      	movs	r1, #44	@ 0x2c
10055362:	5c40      	ldrb	r0, [r0, r1]
10055364:	07c0      	lsls	r0, r0, #31
10055366:	d10e      	bne.n	10055386 <BlueNRG_Stack_Initialize_Layers+0xe2>
10055368:	2c01      	cmp	r4, #1
1005536a:	d106      	bne.n	1005537a <BlueNRG_Stack_Initialize_Layers+0xd6>
1005536c:	9816      	ldr	r0, [sp, #88]	@ 0x58
1005536e:	f7f9 febe 	bl	1004f0ee <L2C_init_ucfg>
10055372:	f7f9 ffde 	bl	1004f332 <smp_init_ucfg>
10055376:	f7f9 ffe3 	bl	1004f340 <GAT_att_cmn_init_ucfg>
1005537a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005537c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005537e:	462a      	mov	r2, r5
10055380:	4623      	mov	r3, r4
10055382:	f000 ff03 	bl	1005618c <GAP_init_context>
10055386:	b00f      	add	sp, #60	@ 0x3c
10055388:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005538a:	46c0      	nop			@ (mov r8, r8)

1005538c <__arm_cp.1_0>:
1005538c:	2000247c 	.word	0x2000247c

10055390 <__arm_cp.1_1>:
10055390:	20002414 	.word	0x20002414

10055394 <__arm_cp.1_2>:
10055394:	200024bc 	.word	0x200024bc

10055398 <_BlueNRG_Stack_Initialization>:
10055398:	b5f0      	push	{r4, r5, r6, r7, lr}
1005539a:	b095      	sub	sp, #84	@ 0x54
1005539c:	2001      	movs	r0, #1
1005539e:	0481      	lsls	r1, r0, #18
100553a0:	9114      	str	r1, [sp, #80]	@ 0x50
100553a2:	482e      	ldr	r0, [pc, #184]	@ (1005545c <__arm_cp.2_0>)
100553a4:	6001      	str	r1, [r0, #0]
100553a6:	f3bf 8f4f 	dsb	sy
100553aa:	f3bf 8f6f 	isb	sy
100553ae:	f7fe fbbb 	bl	10053b28 <BLEPLAT_CNTR_GlobDisableBlue>
100553b2:	f7fd fc55 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
100553b6:	2000      	movs	r0, #0
100553b8:	9012      	str	r0, [sp, #72]	@ 0x48
100553ba:	43c0      	mvns	r0, r0
100553bc:	f7fe fba0 	bl	10053b00 <BLEPLAT_CNTR_ClearInterrupt>
100553c0:	f004 fade 	bl	10059980 <data_length_extension_csr_ucfg_weak>
100553c4:	9013      	str	r0, [sp, #76]	@ 0x4c
100553c6:	f7f9 fdd5 	bl	1004ef74 <phy_upd_csr_ucfg>
100553ca:	9011      	str	r0, [sp, #68]	@ 0x44
100553cc:	f00a fe64 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
100553d0:	9010      	str	r0, [sp, #64]	@ 0x40
100553d2:	f006 fd2c 	bl	1005be2e <llc_priv_controller_privacy_csr_ucfg_weak>
100553d6:	900f      	str	r0, [sp, #60]	@ 0x3c
100553d8:	f00d f98f 	bl	100626fa <secure_connections_csr_ucfg_weak>
100553dc:	f004 fad6 	bl	1005998c <scan_csr_ucfg_weak>
100553e0:	900e      	str	r0, [sp, #56]	@ 0x38
100553e2:	f004 fc99 	bl	10059d18 <l2c_cos_csr_ucfg_weak>
100553e6:	900d      	str	r0, [sp, #52]	@ 0x34
100553e8:	f006 fd18 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100553ec:	900c      	str	r0, [sp, #48]	@ 0x30
100553ee:	f006 fd17 	bl	1005be20 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100553f2:	900b      	str	r0, [sp, #44]	@ 0x2c
100553f4:	f004 fa68 	bl	100598c8 <cte_csr_ucfg_weak>
100553f8:	4604      	mov	r4, r0
100553fa:	f004 fac3 	bl	10059984 <pcl_csr_ucfg_weak>
100553fe:	4605      	mov	r5, r0
10055400:	f7f9 fdc0 	bl	1004ef84 <conn_supp_csr_ucfg>
10055404:	4606      	mov	r6, r0
10055406:	f004 f96a 	bl	100596de <chc_csr_ucfg_weak>
1005540a:	4607      	mov	r7, r0
1005540c:	f000 f865 	bl	100554da <log_csr_ucfg_weak>
10055410:	b2c0      	uxtb	r0, r0
10055412:	b2f9      	uxtb	r1, r7
10055414:	9108      	str	r1, [sp, #32]
10055416:	9009      	str	r0, [sp, #36]	@ 0x24
10055418:	b2f0      	uxtb	r0, r6
1005541a:	b2e9      	uxtb	r1, r5
1005541c:	b2e2      	uxtb	r2, r4
1005541e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10055420:	b2db      	uxtb	r3, r3
10055422:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10055424:	b2e4      	uxtb	r4, r4
10055426:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10055428:	b2ed      	uxtb	r5, r5
1005542a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1005542c:	b2f6      	uxtb	r6, r6
1005542e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
10055430:	9700      	str	r7, [sp, #0]
10055432:	9601      	str	r6, [sp, #4]
10055434:	9502      	str	r5, [sp, #8]
10055436:	9403      	str	r4, [sp, #12]
10055438:	9304      	str	r3, [sp, #16]
1005543a:	9205      	str	r2, [sp, #20]
1005543c:	9106      	str	r1, [sp, #24]
1005543e:	9007      	str	r0, [sp, #28]
10055440:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10055442:	b2c0      	uxtb	r0, r0
10055444:	9911      	ldr	r1, [sp, #68]	@ 0x44
10055446:	b2c9      	uxtb	r1, r1
10055448:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005544a:	b2d3      	uxtb	r3, r2
1005544c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005544e:	f7ff ff29 	bl	100552a4 <BlueNRG_Stack_Initialize_Layers>
10055452:	4803      	ldr	r0, [pc, #12]	@ (10055460 <__arm_cp.2_1>)
10055454:	9914      	ldr	r1, [sp, #80]	@ 0x50
10055456:	6001      	str	r1, [r0, #0]
10055458:	b015      	add	sp, #84	@ 0x54
1005545a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005545c <__arm_cp.2_0>:
1005545c:	e000e180 	.word	0xe000e180

10055460 <__arm_cp.2_1>:
10055460:	e000e100 	.word	0xe000e100

10055464 <BLE_STACK_Init>:
10055464:	b5b0      	push	{r4, r5, r7, lr}
10055466:	4605      	mov	r5, r0
10055468:	7ac0      	ldrb	r0, [r0, #11]
1005546a:	2412      	movs	r4, #18
1005546c:	2880      	cmp	r0, #128	@ 0x80
1005546e:	d829      	bhi.n	100554c4 <BLE_STACK_Init+0x60>
10055470:	8c29      	ldrh	r1, [r5, #32]
10055472:	2917      	cmp	r1, #23
10055474:	d326      	bcc.n	100554c4 <BLE_STACK_Init+0x60>
10055476:	4814      	ldr	r0, [pc, #80]	@ (100554c8 <__arm_cp.3_0>)
10055478:	1d82      	adds	r2, r0, #6
1005547a:	4291      	cmp	r1, r2
1005547c:	d822      	bhi.n	100554c4 <BLE_STACK_Init+0x60>
1005547e:	8a29      	ldrh	r1, [r5, #16]
10055480:	2917      	cmp	r1, #23
10055482:	d31f      	bcc.n	100554c4 <BLE_STACK_Init+0x60>
10055484:	4281      	cmp	r1, r0
10055486:	d81d      	bhi.n	100554c4 <BLE_STACK_Init+0x60>
10055488:	7ea8      	ldrb	r0, [r5, #26]
1005548a:	2800      	cmp	r0, #0
1005548c:	d01a      	beq.n	100554c4 <BLE_STACK_Init+0x60>
1005548e:	f006 fcc7 	bl	1005be20 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10055492:	2800      	cmp	r0, #0
10055494:	d008      	beq.n	100554a8 <BLE_STACK_Init+0x44>
10055496:	7ee8      	ldrb	r0, [r5, #27]
10055498:	2800      	cmp	r0, #0
1005549a:	d013      	beq.n	100554c4 <BLE_STACK_Init+0x60>
1005549c:	2880      	cmp	r0, #128	@ 0x80
1005549e:	d811      	bhi.n	100554c4 <BLE_STACK_Init+0x60>
100554a0:	7f28      	ldrb	r0, [r5, #28]
100554a2:	1e40      	subs	r0, r0, #1
100554a4:	280e      	cmp	r0, #14
100554a6:	d80d      	bhi.n	100554c4 <BLE_STACK_Init+0x60>
100554a8:	4808      	ldr	r0, [pc, #32]	@ (100554cc <__arm_cp.3_1>)
100554aa:	2234      	movs	r2, #52	@ 0x34
100554ac:	4629      	mov	r1, r5
100554ae:	f7fd facb 	bl	10052a48 <BLEPLAT_MemCpy>
100554b2:	f00b ff23 	bl	100612fc <BlueNRG_Stack_Initialize_RAM_check>
100554b6:	2800      	cmp	r0, #0
100554b8:	d403      	bmi.n	100554c2 <BLE_STACK_Init+0x5e>
100554ba:	f7ff ff6d 	bl	10055398 <_BlueNRG_Stack_Initialization>
100554be:	2400      	movs	r4, #0
100554c0:	e000      	b.n	100554c4 <BLE_STACK_Init+0x60>
100554c2:	2487      	movs	r4, #135	@ 0x87
100554c4:	4620      	mov	r0, r4
100554c6:	bdb0      	pop	{r4, r5, r7, pc}

100554c8 <__arm_cp.3_0>:
100554c8:	000003fa 	.word	0x000003fa

100554cc <__arm_cp.3_1>:
100554cc:	2000247c 	.word	0x2000247c

100554d0 <log_verbosity_set_ucfg_weak>:
100554d0:	2000      	movs	r0, #0
100554d2:	4770      	bx	lr

100554d4 <log_init_ucfg_weak>:
100554d4:	4770      	bx	lr

100554d6 <log_notify_stu_ucfg_weak>:
100554d6:	4770      	bx	lr

100554d8 <log_notify_us_flush_ucfg_weak>:
100554d8:	4770      	bx	lr

100554da <log_csr_ucfg_weak>:
100554da:	2000      	movs	r0, #0
100554dc:	4770      	bx	lr
	...

100554e0 <aci_event_fifo_push_header>:
100554e0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100554e2:	4615      	mov	r5, r2
100554e4:	460c      	mov	r4, r1
100554e6:	4606      	mov	r6, r0
100554e8:	0608      	lsls	r0, r1, #24
100554ea:	d414      	bmi.n	10055516 <aci_event_fifo_push_header+0x36>
100554ec:	aa02      	add	r2, sp, #8
100554ee:	af01      	add	r7, sp, #4
100554f0:	4630      	mov	r0, r6
100554f2:	4619      	mov	r1, r3
100554f4:	463b      	mov	r3, r7
100554f6:	f000 f853 	bl	100555a0 <fifoBuf_getFreeHeader>
100554fa:	2800      	cmp	r0, #0
100554fc:	d021      	beq.n	10055542 <aci_event_fifo_push_header+0x62>
100554fe:	0660      	lsls	r0, r4, #25
10055500:	d438      	bmi.n	10055574 <aci_event_fifo_push_header+0x94>
10055502:	9802      	ldr	r0, [sp, #8]
10055504:	7881      	ldrb	r1, [r0, #2]
10055506:	22fc      	movs	r2, #252	@ 0xfc
10055508:	400a      	ands	r2, r1
1005550a:	7082      	strb	r2, [r0, #2]
1005550c:	9901      	ldr	r1, [sp, #4]
1005550e:	8001      	strh	r1, [r0, #0]
10055510:	8071      	strh	r1, [r6, #2]
10055512:	2701      	movs	r7, #1
10055514:	e02f      	b.n	10055576 <aci_event_fifo_push_header+0x96>
10055516:	f3ef 8010 	mrs	r0, PRIMASK
1005551a:	b672      	cpsid	i
1005551c:	aa02      	add	r2, sp, #8
1005551e:	af01      	add	r7, sp, #4
10055520:	4630      	mov	r0, r6
10055522:	4619      	mov	r1, r3
10055524:	463b      	mov	r3, r7
10055526:	f000 f83b 	bl	100555a0 <fifoBuf_getFreeHeader>
1005552a:	2800      	cmp	r0, #0
1005552c:	d00b      	beq.n	10055546 <aci_event_fifo_push_header+0x66>
1005552e:	9902      	ldr	r1, [sp, #8]
10055530:	788a      	ldrb	r2, [r1, #2]
10055532:	23fc      	movs	r3, #252	@ 0xfc
10055534:	4013      	ands	r3, r2
10055536:	708b      	strb	r3, [r1, #2]
10055538:	9a01      	ldr	r2, [sp, #4]
1005553a:	800a      	strh	r2, [r1, #0]
1005553c:	8072      	strh	r2, [r6, #2]
1005553e:	2701      	movs	r7, #1
10055540:	e002      	b.n	10055548 <aci_event_fifo_push_header+0x68>
10055542:	2700      	movs	r7, #0
10055544:	e003      	b.n	1005554e <aci_event_fifo_push_header+0x6e>
10055546:	2700      	movs	r7, #0
10055548:	b662      	cpsie	i
1005554a:	2800      	cmp	r0, #0
1005554c:	d113      	bne.n	10055576 <aci_event_fifo_push_header+0x96>
1005554e:	f3ef 8010 	mrs	r0, PRIMASK
10055552:	b672      	cpsid	i
10055554:	06a0      	lsls	r0, r4, #26
10055556:	d40a      	bmi.n	1005556e <aci_event_fifo_push_header+0x8e>
10055558:	4810      	ldr	r0, [pc, #64]	@ (1005559c <__arm_cp.0_0>)
1005555a:	6800      	ldr	r0, [r0, #0]
1005555c:	6801      	ldr	r1, [r0, #0]
1005555e:	2208      	movs	r2, #8
10055560:	430a      	orrs	r2, r1
10055562:	6002      	str	r2, [r0, #0]
10055564:	2000      	movs	r0, #0
10055566:	f00d fb05 	bl	10062b74 <tsk_notify_idx>
1005556a:	f7fc fc86 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005556e:	b662      	cpsie	i
10055570:	2600      	movs	r6, #0
10055572:	e00a      	b.n	1005558a <aci_event_fifo_push_header+0xaa>
10055574:	2700      	movs	r7, #0
10055576:	9e02      	ldr	r6, [sp, #8]
10055578:	70f5      	strb	r5, [r6, #3]
1005557a:	00a0      	lsls	r0, r4, #2
1005557c:	2160      	movs	r1, #96	@ 0x60
1005557e:	4001      	ands	r1, r0
10055580:	78b0      	ldrb	r0, [r6, #2]
10055582:	2203      	movs	r2, #3
10055584:	4002      	ands	r2, r0
10055586:	1850      	adds	r0, r2, r1
10055588:	70b0      	strb	r0, [r6, #2]
1005558a:	2f00      	cmp	r7, #0
1005558c:	d004      	beq.n	10055598 <aci_event_fifo_push_header+0xb8>
1005558e:	2000      	movs	r0, #0
10055590:	f00d faf0 	bl	10062b74 <tsk_notify_idx>
10055594:	f7fc fc71 	bl	10051e7a <BLE_STACK_ProcessRequest>
10055598:	4630      	mov	r0, r6
1005559a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005559c <__arm_cp.0_0>:
1005559c:	20002418 	.word	0x20002418

100555a0 <fifoBuf_getFreeHeader>:
100555a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100555a2:	9200      	str	r2, [sp, #0]
100555a4:	8845      	ldrh	r5, [r0, #2]
100555a6:	08ac      	lsrs	r4, r5, #2
100555a8:	801c      	strh	r4, [r3, #0]
100555aa:	1c49      	adds	r1, r1, #1
100555ac:	b28a      	uxth	r2, r1
100555ae:	18a6      	adds	r6, r4, r2
100555b0:	8887      	ldrh	r7, [r0, #4]
100555b2:	42be      	cmp	r6, r7
100555b4:	d900      	bls.n	100555b8 <fifoBuf_getFreeHeader+0x18>
100555b6:	1b09      	subs	r1, r1, r4
100555b8:	190a      	adds	r2, r1, r4
100555ba:	0092      	lsls	r2, r2, #2
100555bc:	42be      	cmp	r6, r7
100555be:	d900      	bls.n	100555c2 <fifoBuf_getFreeHeader+0x22>
100555c0:	1c6d      	adds	r5, r5, #1
100555c2:	2603      	movs	r6, #3
100555c4:	4035      	ands	r5, r6
100555c6:	1952      	adds	r2, r2, r5
100555c8:	801a      	strh	r2, [r3, #0]
100555ca:	00a3      	lsls	r3, r4, #2
100555cc:	181b      	adds	r3, r3, r0
100555ce:	3308      	adds	r3, #8
100555d0:	9c00      	ldr	r4, [sp, #0]
100555d2:	6023      	str	r3, [r4, #0]
100555d4:	b292      	uxth	r2, r2
100555d6:	8805      	ldrh	r5, [r0, #0]
100555d8:	1b52      	subs	r2, r2, r5
100555da:	4617      	mov	r7, r2
100555dc:	4037      	ands	r7, r6
100555de:	8884      	ldrh	r4, [r0, #4]
100555e0:	4367      	muls	r7, r4
100555e2:	4035      	ands	r5, r6
100555e4:	1952      	adds	r2, r2, r5
100555e6:	0892      	lsrs	r2, r2, #2
100555e8:	19d2      	adds	r2, r2, r7
100555ea:	b295      	uxth	r5, r2
100555ec:	88c6      	ldrh	r6, [r0, #6]
100555ee:	42b5      	cmp	r5, r6
100555f0:	d900      	bls.n	100555f4 <fifoBuf_getFreeHeader+0x54>
100555f2:	80c2      	strh	r2, [r0, #6]
100555f4:	42a5      	cmp	r5, r4
100555f6:	d80a      	bhi.n	1005560e <fifoBuf_getFreeHeader+0x6e>
100555f8:	b209      	sxth	r1, r1
100555fa:	2900      	cmp	r1, #0
100555fc:	d507      	bpl.n	1005560e <fifoBuf_getFreeHeader+0x6e>
100555fe:	7899      	ldrb	r1, [r3, #2]
10055600:	22fc      	movs	r2, #252	@ 0xfc
10055602:	400a      	ands	r2, r1
10055604:	1c51      	adds	r1, r2, #1
10055606:	7099      	strb	r1, [r3, #2]
10055608:	3008      	adds	r0, #8
1005560a:	9900      	ldr	r1, [sp, #0]
1005560c:	6008      	str	r0, [r1, #0]
1005560e:	42a5      	cmp	r5, r4
10055610:	d901      	bls.n	10055616 <fifoBuf_getFreeHeader+0x76>
10055612:	2000      	movs	r0, #0
10055614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10055616:	2001      	movs	r0, #1
10055618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005561a <aci_event_fifo_push>:
1005561a:	b580      	push	{r7, lr}
1005561c:	0640      	lsls	r0, r0, #25
1005561e:	d405      	bmi.n	1005562c <aci_event_fifo_push+0x12>
10055620:	7888      	ldrb	r0, [r1, #2]
10055622:	22fc      	movs	r2, #252	@ 0xfc
10055624:	4002      	ands	r2, r0
10055626:	1c90      	adds	r0, r2, #2
10055628:	7088      	strb	r0, [r1, #2]
1005562a:	bd80      	pop	{r7, pc}
1005562c:	4608      	mov	r0, r1
1005562e:	f000 f801 	bl	10055634 <event_notify_cb>
10055632:	bd80      	pop	{r7, pc}

10055634 <event_notify_cb>:
10055634:	b580      	push	{r7, lr}
10055636:	1d01      	adds	r1, r0, #4
10055638:	78c2      	ldrb	r2, [r0, #3]
1005563a:	2a14      	cmp	r2, #20
1005563c:	d804      	bhi.n	10055648 <event_notify_cb+0x14>
1005563e:	6842      	ldr	r2, [r0, #4]
10055640:	7880      	ldrb	r0, [r0, #2]
10055642:	0880      	lsrs	r0, r0, #2
10055644:	4790      	blx	r2
10055646:	bd80      	pop	{r7, pc}
10055648:	2a3d      	cmp	r2, #61	@ 0x3d
1005564a:	d803      	bhi.n	10055654 <event_notify_cb+0x20>
1005564c:	2000      	movs	r0, #0
1005564e:	f000 f8e9 	bl	10055824 <hci_event_notify_cb>
10055652:	bd80      	pop	{r7, pc}
10055654:	2a3f      	cmp	r2, #63	@ 0x3f
10055656:	d803      	bhi.n	10055660 <event_notify_cb+0x2c>
10055658:	2000      	movs	r0, #0
1005565a:	f000 f8f5 	bl	10055848 <hci_rx_data_notify_cb>
1005565e:	bd80      	pop	{r7, pc}
10055660:	2a60      	cmp	r2, #96	@ 0x60
10055662:	d802      	bhi.n	1005566a <event_notify_cb+0x36>
10055664:	2000      	movs	r0, #0
10055666:	f000 f8e4 	bl	10055832 <hci_aci_event_notify_cb>
1005566a:	bd80      	pop	{r7, pc}

1005566c <Events_Process_init>:
1005566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005566e:	2001      	movs	r0, #1
10055670:	211c      	movs	r1, #28
10055672:	4a29      	ldr	r2, [pc, #164]	@ (10055718 <__arm_cp.7_0>)
10055674:	4790      	blx	r2
10055676:	4f29      	ldr	r7, [pc, #164]	@ (1005571c <__arm_cp.7_1>)
10055678:	6038      	str	r0, [r7, #0]
1005567a:	4d29      	ldr	r5, [pc, #164]	@ (10055720 <__arm_cp.7_2>)
1005567c:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
1005567e:	1e40      	subs	r0, r0, #1
10055680:	2603      	movs	r6, #3
10055682:	4330      	orrs	r0, r6
10055684:	1c40      	adds	r0, r0, #1
10055686:	0880      	lsrs	r0, r0, #2
10055688:	1cc0      	adds	r0, r0, #3
1005568a:	2404      	movs	r4, #4
1005568c:	4621      	mov	r1, r4
1005568e:	4a22      	ldr	r2, [pc, #136]	@ (10055718 <__arm_cp.7_0>)
10055690:	4790      	blx	r2
10055692:	6839      	ldr	r1, [r7, #0]
10055694:	6048      	str	r0, [r1, #4]
10055696:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
10055698:	1e40      	subs	r0, r0, #1
1005569a:	4330      	orrs	r0, r6
1005569c:	1c40      	adds	r0, r0, #1
1005569e:	0880      	lsrs	r0, r0, #2
100556a0:	1cc0      	adds	r0, r0, #3
100556a2:	4621      	mov	r1, r4
100556a4:	4d1c      	ldr	r5, [pc, #112]	@ (10055718 <__arm_cp.7_0>)
100556a6:	47a8      	blx	r5
100556a8:	462a      	mov	r2, r5
100556aa:	6839      	ldr	r1, [r7, #0]
100556ac:	6088      	str	r0, [r1, #8]
100556ae:	4d1c      	ldr	r5, [pc, #112]	@ (10055720 <__arm_cp.7_2>)
100556b0:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
100556b2:	1e40      	subs	r0, r0, #1
100556b4:	4330      	orrs	r0, r6
100556b6:	1c40      	adds	r0, r0, #1
100556b8:	0880      	lsrs	r0, r0, #2
100556ba:	1cc0      	adds	r0, r0, #3
100556bc:	4621      	mov	r1, r4
100556be:	4790      	blx	r2
100556c0:	6839      	ldr	r1, [r7, #0]
100556c2:	60c8      	str	r0, [r1, #12]
100556c4:	f7ff fc18 	bl	10054ef8 <hal_radio_activity_state_init>
100556c8:	6838      	ldr	r0, [r7, #0]
100556ca:	6842      	ldr	r2, [r0, #4]
100556cc:	2100      	movs	r1, #0
100556ce:	8011      	strh	r1, [r2, #0]
100556d0:	8051      	strh	r1, [r2, #2]
100556d2:	6883      	ldr	r3, [r0, #8]
100556d4:	8019      	strh	r1, [r3, #0]
100556d6:	80d1      	strh	r1, [r2, #6]
100556d8:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
100556da:	1e7f      	subs	r7, r7, #1
100556dc:	4337      	orrs	r7, r6
100556de:	1c7f      	adds	r7, r7, #1
100556e0:	08bf      	lsrs	r7, r7, #2
100556e2:	8097      	strh	r7, [r2, #4]
100556e4:	8059      	strh	r1, [r3, #2]
100556e6:	80d9      	strh	r1, [r3, #6]
100556e8:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
100556ea:	1e7f      	subs	r7, r7, #1
100556ec:	4337      	orrs	r7, r6
100556ee:	1c7f      	adds	r7, r7, #1
100556f0:	08bf      	lsrs	r7, r7, #2
100556f2:	809f      	strh	r7, [r3, #4]
100556f4:	68c7      	ldr	r7, [r0, #12]
100556f6:	8039      	strh	r1, [r7, #0]
100556f8:	6102      	str	r2, [r0, #16]
100556fa:	6143      	str	r3, [r0, #20]
100556fc:	80f9      	strh	r1, [r7, #6]
100556fe:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
10055700:	1e52      	subs	r2, r2, #1
10055702:	4332      	orrs	r2, r6
10055704:	1c52      	adds	r2, r2, #1
10055706:	0892      	lsrs	r2, r2, #2
10055708:	80ba      	strh	r2, [r7, #4]
1005570a:	8079      	strh	r1, [r7, #2]
1005570c:	6187      	str	r7, [r0, #24]
1005570e:	4622      	mov	r2, r4
10055710:	f7fd f9aa 	bl	10052a68 <BLEPLAT_MemSet>
10055714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10055716:	46c0      	nop			@ (mov r8, r8)

10055718 <__arm_cp.7_0>:
10055718:	10060fc9 	.word	0x10060fc9

1005571c <__arm_cp.7_1>:
1005571c:	20002418 	.word	0x20002418

10055720 <__arm_cp.7_2>:
10055720:	2000247c 	.word	0x2000247c

10055724 <Events_Process_Q>:
10055724:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055726:	4d3d      	ldr	r5, [pc, #244]	@ (1005581c <__arm_cp.8_0>)
10055728:	6828      	ldr	r0, [r5, #0]
1005572a:	3010      	adds	r0, #16
1005572c:	2100      	movs	r1, #0
1005572e:	2906      	cmp	r1, #6
10055730:	d005      	beq.n	1005573e <Events_Process_Q+0x1a>
10055732:	c804      	ldmia	r0!, {r2}
10055734:	8852      	ldrh	r2, [r2, #2]
10055736:	ab01      	add	r3, sp, #4
10055738:	525a      	strh	r2, [r3, r1]
1005573a:	1c89      	adds	r1, r1, #2
1005573c:	e7f7      	b.n	1005572e <Events_Process_Q+0xa>
1005573e:	f3ef 8010 	mrs	r0, PRIMASK
10055742:	b672      	cpsid	i
10055744:	6828      	ldr	r0, [r5, #0]
10055746:	6804      	ldr	r4, [r0, #0]
10055748:	2700      	movs	r7, #0
1005574a:	6007      	str	r7, [r0, #0]
1005574c:	b662      	cpsie	i
1005574e:	07e0      	lsls	r0, r4, #31
10055750:	d002      	beq.n	10055758 <Events_Process_Q+0x34>
10055752:	2000      	movs	r0, #0
10055754:	f000 fc4a 	bl	10055fec <hci_hardware_error_event_cb>
10055758:	07a0      	lsls	r0, r4, #30
1005575a:	d502      	bpl.n	10055762 <Events_Process_Q+0x3e>
1005575c:	2001      	movs	r0, #1
1005575e:	f000 fc45 	bl	10055fec <hci_hardware_error_event_cb>
10055762:	0760      	lsls	r0, r4, #29
10055764:	d502      	bpl.n	1005576c <Events_Process_Q+0x48>
10055766:	2002      	movs	r0, #2
10055768:	f000 fc40 	bl	10055fec <hci_hardware_error_event_cb>
1005576c:	0720      	lsls	r0, r4, #28
1005576e:	d502      	bpl.n	10055776 <Events_Process_Q+0x52>
10055770:	2003      	movs	r0, #3
10055772:	f000 fc3b 	bl	10055fec <hci_hardware_error_event_cb>
10055776:	06e0      	lsls	r0, r4, #27
10055778:	d54a      	bpl.n	10055810 <Events_Process_Q+0xec>
1005577a:	2004      	movs	r0, #4
1005577c:	f000 fc36 	bl	10055fec <hci_hardware_error_event_cb>
10055780:	e046      	b.n	10055810 <Events_Process_Q+0xec>
10055782:	0078      	lsls	r0, r7, #1
10055784:	a901      	add	r1, sp, #4
10055786:	5a0e      	ldrh	r6, [r1, r0]
10055788:	9700      	str	r7, [sp, #0]
1005578a:	00bf      	lsls	r7, r7, #2
1005578c:	6828      	ldr	r0, [r5, #0]
1005578e:	19c0      	adds	r0, r0, r7
10055790:	6900      	ldr	r0, [r0, #16]
10055792:	8801      	ldrh	r1, [r0, #0]
10055794:	8802      	ldrh	r2, [r0, #0]
10055796:	42b2      	cmp	r2, r6
10055798:	d02a      	beq.n	100557f0 <Events_Process_Q+0xcc>
1005579a:	0889      	lsrs	r1, r1, #2
1005579c:	1c89      	adds	r1, r1, #2
1005579e:	0089      	lsls	r1, r1, #2
100557a0:	1844      	adds	r4, r0, r1
100557a2:	78a1      	ldrb	r1, [r4, #2]
100557a4:	2203      	movs	r2, #3
100557a6:	400a      	ands	r2, r1
100557a8:	2a01      	cmp	r2, #1
100557aa:	d002      	beq.n	100557b2 <Events_Process_Q+0x8e>
100557ac:	2a00      	cmp	r2, #0
100557ae:	d103      	bne.n	100557b8 <Events_Process_Q+0x94>
100557b0:	e01e      	b.n	100557f0 <Events_Process_Q+0xcc>
100557b2:	7a81      	ldrb	r1, [r0, #10]
100557b4:	3008      	adds	r0, #8
100557b6:	4604      	mov	r4, r0
100557b8:	0648      	lsls	r0, r1, #25
100557ba:	d403      	bmi.n	100557c4 <Events_Process_Q+0xa0>
100557bc:	4620      	mov	r0, r4
100557be:	f7ff ff39 	bl	10055634 <event_notify_cb>
100557c2:	e00a      	b.n	100557da <Events_Process_Q+0xb6>
100557c4:	78e0      	ldrb	r0, [r4, #3]
100557c6:	2813      	cmp	r0, #19
100557c8:	d207      	bcs.n	100557da <Events_Process_Q+0xb6>
100557ca:	0080      	lsls	r0, r0, #2
100557cc:	4914      	ldr	r1, [pc, #80]	@ (10055820 <__arm_cp.8_1>)
100557ce:	580a      	ldr	r2, [r1, r0]
100557d0:	1d21      	adds	r1, r4, #4
100557d2:	4620      	mov	r0, r4
100557d4:	4790      	blx	r2
100557d6:	2800      	cmp	r0, #0
100557d8:	d105      	bne.n	100557e6 <Events_Process_Q+0xc2>
100557da:	6828      	ldr	r0, [r5, #0]
100557dc:	19c0      	adds	r0, r0, r7
100557de:	6900      	ldr	r0, [r0, #16]
100557e0:	8821      	ldrh	r1, [r4, #0]
100557e2:	8001      	strh	r1, [r0, #0]
100557e4:	e7d5      	b.n	10055792 <Events_Process_Q+0x6e>
100557e6:	2000      	movs	r0, #0
100557e8:	f00d f9c4 	bl	10062b74 <tsk_notify_idx>
100557ec:	f7fc fb45 	bl	10051e7a <BLE_STACK_ProcessRequest>
100557f0:	f3ef 8010 	mrs	r0, PRIMASK
100557f4:	b672      	cpsid	i
100557f6:	6828      	ldr	r0, [r5, #0]
100557f8:	19c0      	adds	r0, r0, r7
100557fa:	6900      	ldr	r0, [r0, #16]
100557fc:	8841      	ldrh	r1, [r0, #2]
100557fe:	8802      	ldrh	r2, [r0, #0]
10055800:	4291      	cmp	r1, r2
10055802:	d102      	bne.n	1005580a <Events_Process_Q+0xe6>
10055804:	2100      	movs	r1, #0
10055806:	8001      	strh	r1, [r0, #0]
10055808:	8041      	strh	r1, [r0, #2]
1005580a:	b662      	cpsie	i
1005580c:	9f00      	ldr	r7, [sp, #0]
1005580e:	1c7f      	adds	r7, r7, #1
10055810:	2f03      	cmp	r7, #3
10055812:	d1b6      	bne.n	10055782 <Events_Process_Q+0x5e>
10055814:	f7ff fb7a 	bl	10054f0c <hal_radio_activity_state_cb_check>
10055818:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005581a:	46c0      	nop			@ (mov r8, r8)

1005581c <__arm_cp.8_0>:
1005581c:	20002418 	.word	0x20002418

10055820 <__arm_cp.8_1>:
10055820:	10069a74 	.word	0x10069a74

10055824 <hci_event_notify_cb>:
10055824:	b580      	push	{r7, lr}
10055826:	4608      	mov	r0, r1
10055828:	7889      	ldrb	r1, [r1, #2]
1005582a:	1cc9      	adds	r1, r1, #3
1005582c:	f7f9 fada 	bl	1004ede4 <BLE_STACK_Event>
10055830:	bd80      	pop	{r7, pc}

10055832 <hci_aci_event_notify_cb>:
10055832:	b580      	push	{r7, lr}
10055834:	4608      	mov	r0, r1
10055836:	7889      	ldrb	r1, [r1, #2]
10055838:	78c2      	ldrb	r2, [r0, #3]
1005583a:	0212      	lsls	r2, r2, #8
1005583c:	1851      	adds	r1, r2, r1
1005583e:	1d09      	adds	r1, r1, #4
10055840:	b289      	uxth	r1, r1
10055842:	f7f9 facf 	bl	1004ede4 <BLE_STACK_Event>
10055846:	bd80      	pop	{r7, pc}

10055848 <hci_rx_data_notify_cb>:
10055848:	b580      	push	{r7, lr}
1005584a:	4608      	mov	r0, r1
1005584c:	78c9      	ldrb	r1, [r1, #3]
1005584e:	7902      	ldrb	r2, [r0, #4]
10055850:	0212      	lsls	r2, r2, #8
10055852:	1851      	adds	r1, r2, r1
10055854:	1d49      	adds	r1, r1, #5
10055856:	b289      	uxth	r1, r1
10055858:	f7f9 fac4 	bl	1004ede4 <BLE_STACK_Event>
1005585c:	bd80      	pop	{r7, pc}
	...

10055860 <hci_disconnection_complete_event_int_cb>:
10055860:	b5b0      	push	{r4, r5, r7, lr}
10055862:	460d      	mov	r5, r1
10055864:	4604      	mov	r4, r0
10055866:	7908      	ldrb	r0, [r1, #4]
10055868:	7949      	ldrb	r1, [r1, #5]
1005586a:	0209      	lsls	r1, r1, #8
1005586c:	1808      	adds	r0, r1, r0
1005586e:	f001 fb3f 	bl	10056ef0 <GAT_att_cmn_disconnection>
10055872:	7928      	ldrb	r0, [r5, #4]
10055874:	7969      	ldrb	r1, [r5, #5]
10055876:	0209      	lsls	r1, r1, #8
10055878:	1808      	adds	r0, r1, r0
1005587a:	f00c feff 	bl	1006267c <smp_sap_hci_disconnection_complete_evt_hndl>
1005587e:	7928      	ldrb	r0, [r5, #4]
10055880:	7969      	ldrb	r1, [r5, #5]
10055882:	0209      	lsls	r1, r1, #8
10055884:	1808      	adds	r0, r1, r0
10055886:	f004 fd1b 	bl	1005a2c0 <l2c_sap_hci_disconnection_complete_evt_hndl>
1005588a:	f000 feba 	bl	10056602 <GAP_hci_disconnection_complete_evt_hndl>
1005588e:	7928      	ldrb	r0, [r5, #4]
10055890:	7969      	ldrb	r1, [r5, #5]
10055892:	0209      	lsls	r1, r1, #8
10055894:	1808      	adds	r0, r1, r0
10055896:	f7ff fcdf 	bl	10055258 <ACL_pkt_disconnection>
1005589a:	4808      	ldr	r0, [pc, #32]	@ (100558bc <__arm_cp.14_0>)
1005589c:	6800      	ldr	r0, [r0, #0]
1005589e:	2136      	movs	r1, #54	@ 0x36
100558a0:	5c40      	ldrb	r0, [r0, r1]
100558a2:	06c0      	lsls	r0, r0, #27
100558a4:	d401      	bmi.n	100558aa <hci_disconnection_complete_event_int_cb+0x4a>
100558a6:	2000      	movs	r0, #0
100558a8:	bdb0      	pop	{r4, r5, r7, pc}
100558aa:	2015      	movs	r0, #21
100558ac:	70e0      	strb	r0, [r4, #3]
100558ae:	78a0      	ldrb	r0, [r4, #2]
100558b0:	21bf      	movs	r1, #191	@ 0xbf
100558b2:	4001      	ands	r1, r0
100558b4:	70a1      	strb	r1, [r4, #2]
100558b6:	2084      	movs	r0, #132	@ 0x84
100558b8:	bdb0      	pop	{r4, r5, r7, pc}
100558ba:	46c0      	nop			@ (mov r8, r8)

100558bc <__arm_cp.14_0>:
100558bc:	20002468 	.word	0x20002468

100558c0 <hci_encryption_change_event_int_cb>:
100558c0:	b510      	push	{r4, lr}
100558c2:	4604      	mov	r4, r0
100558c4:	7908      	ldrb	r0, [r1, #4]
100558c6:	794a      	ldrb	r2, [r1, #5]
100558c8:	0212      	lsls	r2, r2, #8
100558ca:	1812      	adds	r2, r2, r0
100558cc:	78c9      	ldrb	r1, [r1, #3]
100558ce:	2006      	movs	r0, #6
100558d0:	f00c fe5a 	bl	10062588 <smp_sap_hci_encryption_change_evt_hndl>
100558d4:	4807      	ldr	r0, [pc, #28]	@ (100558f4 <__arm_cp.16_0>)
100558d6:	6800      	ldr	r0, [r0, #0]
100558d8:	2136      	movs	r1, #54	@ 0x36
100558da:	5640      	ldrsb	r0, [r0, r1]
100558dc:	2800      	cmp	r0, #0
100558de:	d401      	bmi.n	100558e4 <hci_encryption_change_event_int_cb+0x24>
100558e0:	2000      	movs	r0, #0
100558e2:	bd10      	pop	{r4, pc}
100558e4:	2016      	movs	r0, #22
100558e6:	70e0      	strb	r0, [r4, #3]
100558e8:	78a0      	ldrb	r0, [r4, #2]
100558ea:	21bf      	movs	r1, #191	@ 0xbf
100558ec:	4001      	ands	r1, r0
100558ee:	70a1      	strb	r1, [r4, #2]
100558f0:	2084      	movs	r0, #132	@ 0x84
100558f2:	bd10      	pop	{r4, pc}

100558f4 <__arm_cp.16_0>:
100558f4:	20002468 	.word	0x20002468

100558f8 <hci_encryption_key_refresh_complete_event_int_cb>:
100558f8:	b510      	push	{r4, lr}
100558fa:	4604      	mov	r4, r0
100558fc:	7908      	ldrb	r0, [r1, #4]
100558fe:	794a      	ldrb	r2, [r1, #5]
10055900:	0212      	lsls	r2, r2, #8
10055902:	1812      	adds	r2, r2, r0
10055904:	78c9      	ldrb	r1, [r1, #3]
10055906:	2007      	movs	r0, #7
10055908:	f00c fe3e 	bl	10062588 <smp_sap_hci_encryption_change_evt_hndl>
1005590c:	4807      	ldr	r0, [pc, #28]	@ (1005592c <__arm_cp.18_0>)
1005590e:	6800      	ldr	r0, [r0, #0]
10055910:	213b      	movs	r1, #59	@ 0x3b
10055912:	5640      	ldrsb	r0, [r0, r1]
10055914:	2800      	cmp	r0, #0
10055916:	d401      	bmi.n	1005591c <hci_encryption_key_refresh_complete_event_int_cb+0x24>
10055918:	2000      	movs	r0, #0
1005591a:	bd10      	pop	{r4, pc}
1005591c:	2017      	movs	r0, #23
1005591e:	70e0      	strb	r0, [r4, #3]
10055920:	78a0      	ldrb	r0, [r4, #2]
10055922:	21bf      	movs	r1, #191	@ 0xbf
10055924:	4001      	ands	r1, r0
10055926:	70a1      	strb	r1, [r4, #2]
10055928:	2084      	movs	r0, #132	@ 0x84
1005592a:	bd10      	pop	{r4, pc}

1005592c <__arm_cp.18_0>:
1005592c:	20002468 	.word	0x20002468

10055930 <hci_le_connection_complete_event_int_cb>:
10055930:	b5b0      	push	{r4, r5, r7, lr}
10055932:	460d      	mov	r5, r1
10055934:	4604      	mov	r4, r0
10055936:	7908      	ldrb	r0, [r1, #4]
10055938:	2800      	cmp	r0, #0
1005593a:	d11d      	bne.n	10055978 <hci_le_connection_complete_event_int_cb+0x48>
1005593c:	7968      	ldrb	r0, [r5, #5]
1005593e:	79a9      	ldrb	r1, [r5, #6]
10055940:	0209      	lsls	r1, r1, #8
10055942:	1808      	adds	r0, r1, r0
10055944:	f7ff fc64 	bl	10055210 <ACL_pkt_connection>
10055948:	7968      	ldrb	r0, [r5, #5]
1005594a:	79a9      	ldrb	r1, [r5, #6]
1005594c:	0209      	lsls	r1, r1, #8
1005594e:	1808      	adds	r0, r1, r0
10055950:	7a2a      	ldrb	r2, [r5, #8]
10055952:	79e9      	ldrb	r1, [r5, #7]
10055954:	462b      	mov	r3, r5
10055956:	3309      	adds	r3, #9
10055958:	f00c fcd4 	bl	10062304 <smp_sap_hci_le_connection_complete_evt_hndl>
1005595c:	7968      	ldrb	r0, [r5, #5]
1005595e:	79a9      	ldrb	r1, [r5, #6]
10055960:	0209      	lsls	r1, r1, #8
10055962:	1808      	adds	r0, r1, r0
10055964:	f001 faa4 	bl	10056eb0 <GAT_att_cmn_connection>
10055968:	7968      	ldrb	r0, [r5, #5]
1005596a:	79a9      	ldrb	r1, [r5, #6]
1005596c:	0209      	lsls	r1, r1, #8
1005596e:	1808      	adds	r0, r1, r0
10055970:	79e9      	ldrb	r1, [r5, #7]
10055972:	f004 fc95 	bl	1005a2a0 <l2c_sap_hci_le_connection_complete_evt_hndl>
10055976:	7928      	ldrb	r0, [r5, #4]
10055978:	7969      	ldrb	r1, [r5, #5]
1005597a:	79aa      	ldrb	r2, [r5, #6]
1005597c:	0212      	lsls	r2, r2, #8
1005597e:	1851      	adds	r1, r2, r1
10055980:	79ea      	ldrb	r2, [r5, #7]
10055982:	f000 fe3f 	bl	10056604 <GAP_hci_le_connection_complete_evt_hndl>
10055986:	4809      	ldr	r0, [pc, #36]	@ (100559ac <__arm_cp.20_0>)
10055988:	6801      	ldr	r1, [r0, #0]
1005598a:	203d      	movs	r0, #61	@ 0x3d
1005598c:	5c0a      	ldrb	r2, [r1, r0]
1005598e:	2000      	movs	r0, #0
10055990:	0692      	lsls	r2, r2, #26
10055992:	d50a      	bpl.n	100559aa <hci_le_connection_complete_event_int_cb+0x7a>
10055994:	313d      	adds	r1, #61	@ 0x3d
10055996:	7a49      	ldrb	r1, [r1, #9]
10055998:	07c9      	lsls	r1, r1, #31
1005599a:	d006      	beq.n	100559aa <hci_le_connection_complete_event_int_cb+0x7a>
1005599c:	2018      	movs	r0, #24
1005599e:	70e0      	strb	r0, [r4, #3]
100559a0:	78a0      	ldrb	r0, [r4, #2]
100559a2:	21bf      	movs	r1, #191	@ 0xbf
100559a4:	4001      	ands	r1, r0
100559a6:	70a1      	strb	r1, [r4, #2]
100559a8:	2084      	movs	r0, #132	@ 0x84
100559aa:	bdb0      	pop	{r4, r5, r7, pc}

100559ac <__arm_cp.20_0>:
100559ac:	20002468 	.word	0x20002468

100559b0 <hci_le_enhanced_connection_complete_event_int_cb>:
100559b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100559b2:	460d      	mov	r5, r1
100559b4:	4604      	mov	r4, r0
100559b6:	7908      	ldrb	r0, [r1, #4]
100559b8:	2800      	cmp	r0, #0
100559ba:	d123      	bne.n	10055a04 <hci_le_enhanced_connection_complete_event_int_cb+0x54>
100559bc:	7968      	ldrb	r0, [r5, #5]
100559be:	79a9      	ldrb	r1, [r5, #6]
100559c0:	0209      	lsls	r1, r1, #8
100559c2:	1808      	adds	r0, r1, r0
100559c4:	f7ff fc24 	bl	10055210 <ACL_pkt_connection>
100559c8:	7a2a      	ldrb	r2, [r5, #8]
100559ca:	79e9      	ldrb	r1, [r5, #7]
100559cc:	7968      	ldrb	r0, [r5, #5]
100559ce:	79ab      	ldrb	r3, [r5, #6]
100559d0:	462e      	mov	r6, r5
100559d2:	3615      	adds	r6, #21
100559d4:	462f      	mov	r7, r5
100559d6:	370f      	adds	r7, #15
100559d8:	9700      	str	r7, [sp, #0]
100559da:	9601      	str	r6, [sp, #4]
100559dc:	021b      	lsls	r3, r3, #8
100559de:	1818      	adds	r0, r3, r0
100559e0:	462b      	mov	r3, r5
100559e2:	3309      	adds	r3, #9
100559e4:	f00c fd28 	bl	10062438 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>
100559e8:	7968      	ldrb	r0, [r5, #5]
100559ea:	79a9      	ldrb	r1, [r5, #6]
100559ec:	0209      	lsls	r1, r1, #8
100559ee:	1808      	adds	r0, r1, r0
100559f0:	f001 fa5e 	bl	10056eb0 <GAT_att_cmn_connection>
100559f4:	7968      	ldrb	r0, [r5, #5]
100559f6:	79a9      	ldrb	r1, [r5, #6]
100559f8:	0209      	lsls	r1, r1, #8
100559fa:	1808      	adds	r0, r1, r0
100559fc:	79e9      	ldrb	r1, [r5, #7]
100559fe:	f004 fc4f 	bl	1005a2a0 <l2c_sap_hci_le_connection_complete_evt_hndl>
10055a02:	7928      	ldrb	r0, [r5, #4]
10055a04:	7969      	ldrb	r1, [r5, #5]
10055a06:	79aa      	ldrb	r2, [r5, #6]
10055a08:	0212      	lsls	r2, r2, #8
10055a0a:	1851      	adds	r1, r2, r1
10055a0c:	79ea      	ldrb	r2, [r5, #7]
10055a0e:	f000 fdf9 	bl	10056604 <GAP_hci_le_connection_complete_evt_hndl>
10055a12:	4809      	ldr	r0, [pc, #36]	@ (10055a38 <__arm_cp.22_0>)
10055a14:	6801      	ldr	r1, [r0, #0]
10055a16:	203d      	movs	r0, #61	@ 0x3d
10055a18:	5c0a      	ldrb	r2, [r1, r0]
10055a1a:	2000      	movs	r0, #0
10055a1c:	0692      	lsls	r2, r2, #26
10055a1e:	d50a      	bpl.n	10055a36 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10055a20:	313d      	adds	r1, #61	@ 0x3d
10055a22:	7a89      	ldrb	r1, [r1, #10]
10055a24:	0789      	lsls	r1, r1, #30
10055a26:	d506      	bpl.n	10055a36 <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10055a28:	201c      	movs	r0, #28
10055a2a:	70e0      	strb	r0, [r4, #3]
10055a2c:	78a0      	ldrb	r0, [r4, #2]
10055a2e:	21bf      	movs	r1, #191	@ 0xbf
10055a30:	4001      	ands	r1, r0
10055a32:	70a1      	strb	r1, [r4, #2]
10055a34:	2084      	movs	r0, #132	@ 0x84
10055a36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055a38 <__arm_cp.22_0>:
10055a38:	20002468 	.word	0x20002468

10055a3c <hci_le_long_term_key_request_event_int_cb>:
10055a3c:	b570      	push	{r4, r5, r6, lr}
10055a3e:	4604      	mov	r4, r0
10055a40:	4d14      	ldr	r5, [pc, #80]	@ (10055a94 <__arm_cp.24_0>)
10055a42:	6828      	ldr	r0, [r5, #0]
10055a44:	2636      	movs	r6, #54	@ 0x36
10055a46:	5d80      	ldrb	r0, [r0, r6]
10055a48:	2800      	cmp	r0, #0
10055a4a:	d10e      	bne.n	10055a6a <hci_le_long_term_key_request_event_int_cb+0x2e>
10055a4c:	7908      	ldrb	r0, [r1, #4]
10055a4e:	794a      	ldrb	r2, [r1, #5]
10055a50:	0212      	lsls	r2, r2, #8
10055a52:	1810      	adds	r0, r2, r0
10055a54:	7b8a      	ldrb	r2, [r1, #14]
10055a56:	7bcb      	ldrb	r3, [r1, #15]
10055a58:	021b      	lsls	r3, r3, #8
10055a5a:	189a      	adds	r2, r3, r2
10055a5c:	1d89      	adds	r1, r1, #6
10055a5e:	f00c fd13 	bl	10062488 <smp_sap_hci_le_long_term_key_request_evt_hndl>
10055a62:	6828      	ldr	r0, [r5, #0]
10055a64:	5d80      	ldrb	r0, [r0, r6]
10055a66:	2800      	cmp	r0, #0
10055a68:	d012      	beq.n	10055a90 <hci_le_long_term_key_request_event_int_cb+0x54>
10055a6a:	480b      	ldr	r0, [pc, #44]	@ (10055a98 <__arm_cp.24_1>)
10055a6c:	6801      	ldr	r1, [r0, #0]
10055a6e:	203d      	movs	r0, #61	@ 0x3d
10055a70:	5c0a      	ldrb	r2, [r1, r0]
10055a72:	2000      	movs	r0, #0
10055a74:	0692      	lsls	r2, r2, #26
10055a76:	d50a      	bpl.n	10055a8e <hci_le_long_term_key_request_event_int_cb+0x52>
10055a78:	313d      	adds	r1, #61	@ 0x3d
10055a7a:	7a49      	ldrb	r1, [r1, #9]
10055a7c:	06c9      	lsls	r1, r1, #27
10055a7e:	d506      	bpl.n	10055a8e <hci_le_long_term_key_request_event_int_cb+0x52>
10055a80:	2019      	movs	r0, #25
10055a82:	70e0      	strb	r0, [r4, #3]
10055a84:	78a0      	ldrb	r0, [r4, #2]
10055a86:	21bf      	movs	r1, #191	@ 0xbf
10055a88:	4001      	ands	r1, r0
10055a8a:	70a1      	strb	r1, [r4, #2]
10055a8c:	2084      	movs	r0, #132	@ 0x84
10055a8e:	bd70      	pop	{r4, r5, r6, pc}
10055a90:	2000      	movs	r0, #0
10055a92:	bd70      	pop	{r4, r5, r6, pc}

10055a94 <__arm_cp.24_0>:
10055a94:	20002414 	.word	0x20002414

10055a98 <__arm_cp.24_1>:
10055a98:	20002468 	.word	0x20002468

10055a9c <hci_le_read_local_p256_public_key_complete_event_int_cb>:
10055a9c:	b510      	push	{r4, lr}
10055a9e:	4604      	mov	r4, r0
10055aa0:	7908      	ldrb	r0, [r1, #4]
10055aa2:	1d49      	adds	r1, r1, #5
10055aa4:	f00c fe2b 	bl	100626fe <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>
10055aa8:	480a      	ldr	r0, [pc, #40]	@ (10055ad4 <__arm_cp.26_0>)
10055aaa:	6801      	ldr	r1, [r0, #0]
10055aac:	203d      	movs	r0, #61	@ 0x3d
10055aae:	5c0a      	ldrb	r2, [r1, r0]
10055ab0:	2000      	movs	r0, #0
10055ab2:	0692      	lsls	r2, r2, #26
10055ab4:	d504      	bpl.n	10055ac0 <hci_le_read_local_p256_public_key_complete_event_int_cb+0x24>
10055ab6:	313d      	adds	r1, #61	@ 0x3d
10055ab8:	2209      	movs	r2, #9
10055aba:	5689      	ldrsb	r1, [r1, r2]
10055abc:	2900      	cmp	r1, #0
10055abe:	d400      	bmi.n	10055ac2 <hci_le_read_local_p256_public_key_complete_event_int_cb+0x26>
10055ac0:	bd10      	pop	{r4, pc}
10055ac2:	201a      	movs	r0, #26
10055ac4:	70e0      	strb	r0, [r4, #3]
10055ac6:	78a0      	ldrb	r0, [r4, #2]
10055ac8:	21bf      	movs	r1, #191	@ 0xbf
10055aca:	4001      	ands	r1, r0
10055acc:	70a1      	strb	r1, [r4, #2]
10055ace:	2084      	movs	r0, #132	@ 0x84
10055ad0:	bd10      	pop	{r4, pc}
10055ad2:	46c0      	nop			@ (mov r8, r8)

10055ad4 <__arm_cp.26_0>:
10055ad4:	20002468 	.word	0x20002468

10055ad8 <hci_le_generate_dhkey_complete_event_int_cb>:
10055ad8:	b510      	push	{r4, lr}
10055ada:	4604      	mov	r4, r0
10055adc:	7908      	ldrb	r0, [r1, #4]
10055ade:	1d49      	adds	r1, r1, #5
10055ae0:	f00c fe0e 	bl	10062700 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>
10055ae4:	4809      	ldr	r0, [pc, #36]	@ (10055b0c <__arm_cp.28_0>)
10055ae6:	6801      	ldr	r1, [r0, #0]
10055ae8:	203d      	movs	r0, #61	@ 0x3d
10055aea:	5c0a      	ldrb	r2, [r1, r0]
10055aec:	2000      	movs	r0, #0
10055aee:	0692      	lsls	r2, r2, #26
10055af0:	d50a      	bpl.n	10055b08 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
10055af2:	313d      	adds	r1, #61	@ 0x3d
10055af4:	7a89      	ldrb	r1, [r1, #10]
10055af6:	07c9      	lsls	r1, r1, #31
10055af8:	d006      	beq.n	10055b08 <hci_le_generate_dhkey_complete_event_int_cb+0x30>
10055afa:	201b      	movs	r0, #27
10055afc:	70e0      	strb	r0, [r4, #3]
10055afe:	78a0      	ldrb	r0, [r4, #2]
10055b00:	21bf      	movs	r1, #191	@ 0xbf
10055b02:	4001      	ands	r1, r0
10055b04:	70a1      	strb	r1, [r4, #2]
10055b06:	2084      	movs	r0, #132	@ 0x84
10055b08:	bd10      	pop	{r4, pc}
10055b0a:	46c0      	nop			@ (mov r8, r8)

10055b0c <__arm_cp.28_0>:
10055b0c:	20002468 	.word	0x20002468

10055b10 <hci_le_advertising_report_event_int_cb_ucfg_weak>:
10055b10:	2000      	movs	r0, #0
10055b12:	4770      	bx	lr

10055b14 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
10055b14:	2000      	movs	r0, #0
10055b16:	4770      	bx	lr

10055b18 <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
10055b18:	2000      	movs	r0, #0
10055b1a:	4770      	bx	lr

10055b1c <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
10055b1c:	2000      	movs	r0, #0
10055b1e:	4770      	bx	lr

10055b20 <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
10055b20:	2000      	movs	r0, #0
10055b22:	4770      	bx	lr

10055b24 <hci_read_remote_version_information_complete_event_copy>:
10055b24:	7101      	strb	r1, [r0, #4]
10055b26:	2300      	movs	r3, #0
10055b28:	70c3      	strb	r3, [r0, #3]
10055b2a:	0a09      	lsrs	r1, r1, #8
10055b2c:	7141      	strb	r1, [r0, #5]
10055b2e:	7811      	ldrb	r1, [r2, #0]
10055b30:	7181      	strb	r1, [r0, #6]
10055b32:	7851      	ldrb	r1, [r2, #1]
10055b34:	7893      	ldrb	r3, [r2, #2]
10055b36:	7203      	strb	r3, [r0, #8]
10055b38:	71c1      	strb	r1, [r0, #7]
10055b3a:	78d1      	ldrb	r1, [r2, #3]
10055b3c:	7912      	ldrb	r2, [r2, #4]
10055b3e:	7282      	strb	r2, [r0, #10]
10055b40:	7241      	strb	r1, [r0, #9]
10055b42:	4770      	bx	lr

10055b44 <hci_number_of_completed_packets_event_copy>:
10055b44:	2200      	movs	r2, #0
10055b46:	7102      	strb	r2, [r0, #4]
10055b48:	2201      	movs	r2, #1
10055b4a:	70c2      	strb	r2, [r0, #3]
10055b4c:	7041      	strb	r1, [r0, #1]
10055b4e:	7002      	strb	r2, [r0, #0]
10055b50:	0a09      	lsrs	r1, r1, #8
10055b52:	7081      	strb	r1, [r0, #2]
10055b54:	4770      	bx	lr

10055b56 <aci_gap_proc_complete_event_copy>:
10055b56:	b510      	push	{r4, lr}
10055b58:	7813      	ldrb	r3, [r2, #0]
10055b5a:	7183      	strb	r3, [r0, #6]
10055b5c:	7853      	ldrb	r3, [r2, #1]
10055b5e:	1e8c      	subs	r4, r1, #2
10055b60:	7204      	strb	r4, [r0, #8]
10055b62:	71c3      	strb	r3, [r0, #7]
10055b64:	3009      	adds	r0, #9
10055b66:	1c91      	adds	r1, r2, #2
10055b68:	b2e2      	uxtb	r2, r4
10055b6a:	f7fc ff6d 	bl	10052a48 <BLEPLAT_MemCpy>
10055b6e:	bd10      	pop	{r4, pc}

10055b70 <aci_l2cap_connection_update_req_event_copy>:
10055b70:	b5f0      	push	{r4, r5, r6, r7, lr}
10055b72:	b085      	sub	sp, #20
10055b74:	4617      	mov	r7, r2
10055b76:	9103      	str	r1, [sp, #12]
10055b78:	4604      	mov	r4, r0
10055b7a:	6850      	ldr	r0, [r2, #4]
10055b7c:	7a40      	ldrb	r0, [r0, #9]
10055b7e:	9004      	str	r0, [sp, #16]
10055b80:	2106      	movs	r1, #6
10055b82:	4d16      	ldr	r5, [pc, #88]	@ (10055bdc <__arm_cp.42_0>)
10055b84:	4610      	mov	r0, r2
10055b86:	47a8      	blx	r5
10055b88:	9002      	str	r0, [sp, #8]
10055b8a:	2108      	movs	r1, #8
10055b8c:	4638      	mov	r0, r7
10055b8e:	47a8      	blx	r5
10055b90:	9001      	str	r0, [sp, #4]
10055b92:	210a      	movs	r1, #10
10055b94:	4638      	mov	r0, r7
10055b96:	47a8      	blx	r5
10055b98:	4606      	mov	r6, r0
10055b9a:	210c      	movs	r1, #12
10055b9c:	4638      	mov	r0, r7
10055b9e:	47a8      	blx	r5
10055ba0:	462a      	mov	r2, r5
10055ba2:	4605      	mov	r5, r0
10055ba4:	210e      	movs	r1, #14
10055ba6:	4638      	mov	r0, r7
10055ba8:	4790      	blx	r2
10055baa:	7460      	strb	r0, [r4, #17]
10055bac:	0a29      	lsrs	r1, r5, #8
10055bae:	7421      	strb	r1, [r4, #16]
10055bb0:	73e5      	strb	r5, [r4, #15]
10055bb2:	0a31      	lsrs	r1, r6, #8
10055bb4:	73a1      	strb	r1, [r4, #14]
10055bb6:	7366      	strb	r6, [r4, #13]
10055bb8:	9a01      	ldr	r2, [sp, #4]
10055bba:	0a11      	lsrs	r1, r2, #8
10055bbc:	7321      	strb	r1, [r4, #12]
10055bbe:	72e2      	strb	r2, [r4, #11]
10055bc0:	9a02      	ldr	r2, [sp, #8]
10055bc2:	0a11      	lsrs	r1, r2, #8
10055bc4:	72a1      	strb	r1, [r4, #10]
10055bc6:	7262      	strb	r2, [r4, #9]
10055bc8:	9a03      	ldr	r2, [sp, #12]
10055bca:	0a11      	lsrs	r1, r2, #8
10055bcc:	71e1      	strb	r1, [r4, #7]
10055bce:	71a2      	strb	r2, [r4, #6]
10055bd0:	9904      	ldr	r1, [sp, #16]
10055bd2:	7221      	strb	r1, [r4, #8]
10055bd4:	0a00      	lsrs	r0, r0, #8
10055bd6:	74a0      	strb	r0, [r4, #18]
10055bd8:	b005      	add	sp, #20
10055bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055bdc <__arm_cp.42_0>:
10055bdc:	100551c3 	.word	0x100551c3

10055be0 <ACL_pkt_read_8b>:
10055be0:	b51c      	push	{r2, r3, r4, lr}
10055be2:	291f      	cmp	r1, #31
10055be4:	d803      	bhi.n	10055bee <ACL_pkt_read_8b+0xe>
10055be6:	aa01      	add	r2, sp, #4
10055be8:	8011      	strh	r1, [r2, #0]
10055bea:	6840      	ldr	r0, [r0, #4]
10055bec:	e005      	b.n	10055bfa <ACL_pkt_read_8b+0x1a>
10055bee:	6840      	ldr	r0, [r0, #4]
10055bf0:	ac01      	add	r4, sp, #4
10055bf2:	4622      	mov	r2, r4
10055bf4:	f00b fa87 	bl	10061106 <Mem_Buff_get_buff_off>
10055bf8:	8821      	ldrh	r1, [r4, #0]
10055bfa:	1840      	adds	r0, r0, r1
10055bfc:	7900      	ldrb	r0, [r0, #4]
10055bfe:	bd1c      	pop	{r2, r3, r4, pc}

10055c00 <aci_l2cap_command_reject_event_copy>:
10055c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055c02:	4615      	mov	r5, r2
10055c04:	460e      	mov	r6, r1
10055c06:	4604      	mov	r4, r0
10055c08:	6850      	ldr	r0, [r2, #4]
10055c0a:	7a40      	ldrb	r0, [r0, #9]
10055c0c:	9000      	str	r0, [sp, #0]
10055c0e:	2106      	movs	r1, #6
10055c10:	4610      	mov	r0, r2
10055c12:	f7ff fad6 	bl	100551c2 <ACL_pkt_read_16b>
10055c16:	4607      	mov	r7, r0
10055c18:	2108      	movs	r1, #8
10055c1a:	4628      	mov	r0, r5
10055c1c:	f7ff fad1 	bl	100551c2 <ACL_pkt_read_16b>
10055c20:	1eb9      	subs	r1, r7, #2
10055c22:	72e1      	strb	r1, [r4, #11]
10055c24:	7260      	strb	r0, [r4, #9]
10055c26:	9a00      	ldr	r2, [sp, #0]
10055c28:	7222      	strb	r2, [r4, #8]
10055c2a:	0a32      	lsrs	r2, r6, #8
10055c2c:	71e2      	strb	r2, [r4, #7]
10055c2e:	71a6      	strb	r6, [r4, #6]
10055c30:	0a00      	lsrs	r0, r0, #8
10055c32:	72a0      	strb	r0, [r4, #10]
10055c34:	b2ca      	uxtb	r2, r1
10055c36:	89a8      	ldrh	r0, [r5, #12]
10055c38:	340c      	adds	r4, #12
10055c3a:	1d80      	adds	r0, r0, #6
10055c3c:	b281      	uxth	r1, r0
10055c3e:	4628      	mov	r0, r5
10055c40:	4623      	mov	r3, r4
10055c42:	f7ff fab5 	bl	100551b0 <ACL_pkt_read>
10055c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055c48 <aci_att_clt_find_info_resp_event_copy>:
10055c48:	b570      	push	{r4, r5, r6, lr}
10055c4a:	461c      	mov	r4, r3
10055c4c:	4605      	mov	r5, r0
10055c4e:	885e      	ldrh	r6, [r3, #2]
10055c50:	0a10      	lsrs	r0, r2, #8
10055c52:	70e8      	strb	r0, [r5, #3]
10055c54:	70aa      	strb	r2, [r5, #2]
10055c56:	0a08      	lsrs	r0, r1, #8
10055c58:	7068      	strb	r0, [r5, #1]
10055c5a:	7029      	strb	r1, [r5, #0]
10055c5c:	8998      	ldrh	r0, [r3, #12]
10055c5e:	1c40      	adds	r0, r0, #1
10055c60:	b281      	uxth	r1, r0
10055c62:	4618      	mov	r0, r3
10055c64:	f7ff ffbc 	bl	10055be0 <ACL_pkt_read_8b>
10055c68:	1eb1      	subs	r1, r6, #2
10055c6a:	0a0a      	lsrs	r2, r1, #8
10055c6c:	71aa      	strb	r2, [r5, #6]
10055c6e:	7169      	strb	r1, [r5, #5]
10055c70:	7128      	strb	r0, [r5, #4]
10055c72:	89a0      	ldrh	r0, [r4, #12]
10055c74:	1deb      	adds	r3, r5, #7
10055c76:	b28a      	uxth	r2, r1
10055c78:	1c80      	adds	r0, r0, #2
10055c7a:	b281      	uxth	r1, r0
10055c7c:	4620      	mov	r0, r4
10055c7e:	f7ff fa97 	bl	100551b0 <ACL_pkt_read>
10055c82:	bd70      	pop	{r4, r5, r6, pc}

10055c84 <aci_att_clt_find_by_type_value_resp_event_copy>:
10055c84:	b5b0      	push	{r4, r5, r7, lr}
10055c86:	461c      	mov	r4, r3
10055c88:	885b      	ldrh	r3, [r3, #2]
10055c8a:	0a15      	lsrs	r5, r2, #8
10055c8c:	70c5      	strb	r5, [r0, #3]
10055c8e:	7082      	strb	r2, [r0, #2]
10055c90:	0a0a      	lsrs	r2, r1, #8
10055c92:	7042      	strb	r2, [r0, #1]
10055c94:	7001      	strb	r1, [r0, #0]
10055c96:	1e59      	subs	r1, r3, #1
10055c98:	088a      	lsrs	r2, r1, #2
10055c9a:	7102      	strb	r2, [r0, #4]
10055c9c:	89a5      	ldrh	r5, [r4, #12]
10055c9e:	1d43      	adds	r3, r0, #5
10055ca0:	b28a      	uxth	r2, r1
10055ca2:	1c68      	adds	r0, r5, #1
10055ca4:	b281      	uxth	r1, r0
10055ca6:	4620      	mov	r0, r4
10055ca8:	f7ff fa82 	bl	100551b0 <ACL_pkt_read>
10055cac:	bdb0      	pop	{r4, r5, r7, pc}

10055cae <aci_att_clt_read_by_type_resp_event_copy>:
10055cae:	b570      	push	{r4, r5, r6, lr}
10055cb0:	461c      	mov	r4, r3
10055cb2:	4605      	mov	r5, r0
10055cb4:	885e      	ldrh	r6, [r3, #2]
10055cb6:	0a10      	lsrs	r0, r2, #8
10055cb8:	70e8      	strb	r0, [r5, #3]
10055cba:	70aa      	strb	r2, [r5, #2]
10055cbc:	0a08      	lsrs	r0, r1, #8
10055cbe:	7068      	strb	r0, [r5, #1]
10055cc0:	7029      	strb	r1, [r5, #0]
10055cc2:	8998      	ldrh	r0, [r3, #12]
10055cc4:	1c40      	adds	r0, r0, #1
10055cc6:	b281      	uxth	r1, r0
10055cc8:	4618      	mov	r0, r3
10055cca:	f7ff ff89 	bl	10055be0 <ACL_pkt_read_8b>
10055cce:	1eb1      	subs	r1, r6, #2
10055cd0:	0a0a      	lsrs	r2, r1, #8
10055cd2:	71aa      	strb	r2, [r5, #6]
10055cd4:	7169      	strb	r1, [r5, #5]
10055cd6:	7128      	strb	r0, [r5, #4]
10055cd8:	89a0      	ldrh	r0, [r4, #12]
10055cda:	1deb      	adds	r3, r5, #7
10055cdc:	b28a      	uxth	r2, r1
10055cde:	1c80      	adds	r0, r0, #2
10055ce0:	b281      	uxth	r1, r0
10055ce2:	4620      	mov	r0, r4
10055ce4:	f7ff fa64 	bl	100551b0 <ACL_pkt_read>
10055ce8:	bd70      	pop	{r4, r5, r6, pc}

10055cea <aci_att_clt_read_resp_event_copy>:
10055cea:	b5b0      	push	{r4, r5, r7, lr}
10055cec:	461c      	mov	r4, r3
10055cee:	885b      	ldrh	r3, [r3, #2]
10055cf0:	0a15      	lsrs	r5, r2, #8
10055cf2:	70c5      	strb	r5, [r0, #3]
10055cf4:	7082      	strb	r2, [r0, #2]
10055cf6:	0a0a      	lsrs	r2, r1, #8
10055cf8:	7042      	strb	r2, [r0, #1]
10055cfa:	7001      	strb	r1, [r0, #0]
10055cfc:	1e59      	subs	r1, r3, #1
10055cfe:	7101      	strb	r1, [r0, #4]
10055d00:	0a0a      	lsrs	r2, r1, #8
10055d02:	7142      	strb	r2, [r0, #5]
10055d04:	89a5      	ldrh	r5, [r4, #12]
10055d06:	1d83      	adds	r3, r0, #6
10055d08:	b28a      	uxth	r2, r1
10055d0a:	1c68      	adds	r0, r5, #1
10055d0c:	b281      	uxth	r1, r0
10055d0e:	4620      	mov	r0, r4
10055d10:	f7ff fa4e 	bl	100551b0 <ACL_pkt_read>
10055d14:	bdb0      	pop	{r4, r5, r7, pc}

10055d16 <aci_att_clt_read_blob_resp_event_copy>:
10055d16:	b5b0      	push	{r4, r5, r7, lr}
10055d18:	461c      	mov	r4, r3
10055d1a:	885b      	ldrh	r3, [r3, #2]
10055d1c:	0a15      	lsrs	r5, r2, #8
10055d1e:	70c5      	strb	r5, [r0, #3]
10055d20:	7082      	strb	r2, [r0, #2]
10055d22:	0a0a      	lsrs	r2, r1, #8
10055d24:	7042      	strb	r2, [r0, #1]
10055d26:	7001      	strb	r1, [r0, #0]
10055d28:	1e59      	subs	r1, r3, #1
10055d2a:	7101      	strb	r1, [r0, #4]
10055d2c:	0a0a      	lsrs	r2, r1, #8
10055d2e:	7142      	strb	r2, [r0, #5]
10055d30:	89a5      	ldrh	r5, [r4, #12]
10055d32:	1d83      	adds	r3, r0, #6
10055d34:	b28a      	uxth	r2, r1
10055d36:	1c68      	adds	r0, r5, #1
10055d38:	b281      	uxth	r1, r0
10055d3a:	4620      	mov	r0, r4
10055d3c:	f7ff fa38 	bl	100551b0 <ACL_pkt_read>
10055d40:	bdb0      	pop	{r4, r5, r7, pc}

10055d42 <aci_att_clt_read_multiple_resp_event_copy>:
10055d42:	b5b0      	push	{r4, r5, r7, lr}
10055d44:	461c      	mov	r4, r3
10055d46:	885b      	ldrh	r3, [r3, #2]
10055d48:	0a15      	lsrs	r5, r2, #8
10055d4a:	70c5      	strb	r5, [r0, #3]
10055d4c:	7082      	strb	r2, [r0, #2]
10055d4e:	0a0a      	lsrs	r2, r1, #8
10055d50:	7042      	strb	r2, [r0, #1]
10055d52:	7001      	strb	r1, [r0, #0]
10055d54:	1e59      	subs	r1, r3, #1
10055d56:	7101      	strb	r1, [r0, #4]
10055d58:	0a0a      	lsrs	r2, r1, #8
10055d5a:	7142      	strb	r2, [r0, #5]
10055d5c:	89a5      	ldrh	r5, [r4, #12]
10055d5e:	1d83      	adds	r3, r0, #6
10055d60:	b28a      	uxth	r2, r1
10055d62:	1c68      	adds	r0, r5, #1
10055d64:	b281      	uxth	r1, r0
10055d66:	4620      	mov	r0, r4
10055d68:	f7ff fa22 	bl	100551b0 <ACL_pkt_read>
10055d6c:	bdb0      	pop	{r4, r5, r7, pc}

10055d6e <aci_att_clt_read_by_group_type_resp_event_copy>:
10055d6e:	b570      	push	{r4, r5, r6, lr}
10055d70:	461c      	mov	r4, r3
10055d72:	4605      	mov	r5, r0
10055d74:	885e      	ldrh	r6, [r3, #2]
10055d76:	0a10      	lsrs	r0, r2, #8
10055d78:	70e8      	strb	r0, [r5, #3]
10055d7a:	70aa      	strb	r2, [r5, #2]
10055d7c:	0a08      	lsrs	r0, r1, #8
10055d7e:	7068      	strb	r0, [r5, #1]
10055d80:	7029      	strb	r1, [r5, #0]
10055d82:	8998      	ldrh	r0, [r3, #12]
10055d84:	1c40      	adds	r0, r0, #1
10055d86:	b281      	uxth	r1, r0
10055d88:	4618      	mov	r0, r3
10055d8a:	f7ff ff29 	bl	10055be0 <ACL_pkt_read_8b>
10055d8e:	1eb1      	subs	r1, r6, #2
10055d90:	0a0a      	lsrs	r2, r1, #8
10055d92:	71aa      	strb	r2, [r5, #6]
10055d94:	7169      	strb	r1, [r5, #5]
10055d96:	7128      	strb	r0, [r5, #4]
10055d98:	89a0      	ldrh	r0, [r4, #12]
10055d9a:	1deb      	adds	r3, r5, #7
10055d9c:	b28a      	uxth	r2, r1
10055d9e:	1c80      	adds	r0, r0, #2
10055da0:	b281      	uxth	r1, r0
10055da2:	4620      	mov	r0, r4
10055da4:	f7ff fa04 	bl	100551b0 <ACL_pkt_read>
10055da8:	bd70      	pop	{r4, r5, r6, pc}

10055daa <aci_att_clt_prepare_write_resp_event_copy>:
10055daa:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055dac:	461c      	mov	r4, r3
10055dae:	4617      	mov	r7, r2
10055db0:	9102      	str	r1, [sp, #8]
10055db2:	4605      	mov	r5, r0
10055db4:	8858      	ldrh	r0, [r3, #2]
10055db6:	9001      	str	r0, [sp, #4]
10055db8:	8998      	ldrh	r0, [r3, #12]
10055dba:	1c40      	adds	r0, r0, #1
10055dbc:	b281      	uxth	r1, r0
10055dbe:	4618      	mov	r0, r3
10055dc0:	f7ff f9ff 	bl	100551c2 <ACL_pkt_read_16b>
10055dc4:	4606      	mov	r6, r0
10055dc6:	89a0      	ldrh	r0, [r4, #12]
10055dc8:	1cc0      	adds	r0, r0, #3
10055dca:	b281      	uxth	r1, r0
10055dcc:	4620      	mov	r0, r4
10055dce:	f7ff f9f8 	bl	100551c2 <ACL_pkt_read_16b>
10055dd2:	9901      	ldr	r1, [sp, #4]
10055dd4:	1f49      	subs	r1, r1, #5
10055dd6:	0a0a      	lsrs	r2, r1, #8
10055dd8:	726a      	strb	r2, [r5, #9]
10055dda:	7229      	strb	r1, [r5, #8]
10055ddc:	71a8      	strb	r0, [r5, #6]
10055dde:	0a32      	lsrs	r2, r6, #8
10055de0:	716a      	strb	r2, [r5, #5]
10055de2:	712e      	strb	r6, [r5, #4]
10055de4:	0a3a      	lsrs	r2, r7, #8
10055de6:	70ea      	strb	r2, [r5, #3]
10055de8:	70af      	strb	r7, [r5, #2]
10055dea:	9b02      	ldr	r3, [sp, #8]
10055dec:	0a1a      	lsrs	r2, r3, #8
10055dee:	706a      	strb	r2, [r5, #1]
10055df0:	702b      	strb	r3, [r5, #0]
10055df2:	0a00      	lsrs	r0, r0, #8
10055df4:	71e8      	strb	r0, [r5, #7]
10055df6:	89a0      	ldrh	r0, [r4, #12]
10055df8:	350a      	adds	r5, #10
10055dfa:	b28a      	uxth	r2, r1
10055dfc:	1d40      	adds	r0, r0, #5
10055dfe:	b281      	uxth	r1, r0
10055e00:	4620      	mov	r0, r4
10055e02:	462b      	mov	r3, r5
10055e04:	f7ff f9d4 	bl	100551b0 <ACL_pkt_read>
10055e08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055e0a <aci_gatt_clt_indication_event_copy>:
10055e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055e0c:	461c      	mov	r4, r3
10055e0e:	4617      	mov	r7, r2
10055e10:	460e      	mov	r6, r1
10055e12:	4605      	mov	r5, r0
10055e14:	8858      	ldrh	r0, [r3, #2]
10055e16:	9000      	str	r0, [sp, #0]
10055e18:	8998      	ldrh	r0, [r3, #12]
10055e1a:	1c40      	adds	r0, r0, #1
10055e1c:	b281      	uxth	r1, r0
10055e1e:	4618      	mov	r0, r3
10055e20:	f7ff f9cf 	bl	100551c2 <ACL_pkt_read_16b>
10055e24:	9900      	ldr	r1, [sp, #0]
10055e26:	1ec9      	subs	r1, r1, #3
10055e28:	0a0a      	lsrs	r2, r1, #8
10055e2a:	71ea      	strb	r2, [r5, #7]
10055e2c:	71a9      	strb	r1, [r5, #6]
10055e2e:	7128      	strb	r0, [r5, #4]
10055e30:	0a3a      	lsrs	r2, r7, #8
10055e32:	70ea      	strb	r2, [r5, #3]
10055e34:	70af      	strb	r7, [r5, #2]
10055e36:	0a32      	lsrs	r2, r6, #8
10055e38:	706a      	strb	r2, [r5, #1]
10055e3a:	702e      	strb	r6, [r5, #0]
10055e3c:	0a00      	lsrs	r0, r0, #8
10055e3e:	7168      	strb	r0, [r5, #5]
10055e40:	89a0      	ldrh	r0, [r4, #12]
10055e42:	3508      	adds	r5, #8
10055e44:	b28a      	uxth	r2, r1
10055e46:	1cc0      	adds	r0, r0, #3
10055e48:	b281      	uxth	r1, r0
10055e4a:	4620      	mov	r0, r4
10055e4c:	462b      	mov	r3, r5
10055e4e:	f7ff f9af 	bl	100551b0 <ACL_pkt_read>
10055e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055e54 <aci_gatt_clt_notification_event_copy>:
10055e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055e56:	461c      	mov	r4, r3
10055e58:	4617      	mov	r7, r2
10055e5a:	460e      	mov	r6, r1
10055e5c:	4605      	mov	r5, r0
10055e5e:	8858      	ldrh	r0, [r3, #2]
10055e60:	9000      	str	r0, [sp, #0]
10055e62:	8998      	ldrh	r0, [r3, #12]
10055e64:	1c40      	adds	r0, r0, #1
10055e66:	b281      	uxth	r1, r0
10055e68:	4618      	mov	r0, r3
10055e6a:	f7ff f9aa 	bl	100551c2 <ACL_pkt_read_16b>
10055e6e:	9900      	ldr	r1, [sp, #0]
10055e70:	1ec9      	subs	r1, r1, #3
10055e72:	0a0a      	lsrs	r2, r1, #8
10055e74:	71ea      	strb	r2, [r5, #7]
10055e76:	71a9      	strb	r1, [r5, #6]
10055e78:	7128      	strb	r0, [r5, #4]
10055e7a:	0a3a      	lsrs	r2, r7, #8
10055e7c:	70ea      	strb	r2, [r5, #3]
10055e7e:	70af      	strb	r7, [r5, #2]
10055e80:	0a32      	lsrs	r2, r6, #8
10055e82:	706a      	strb	r2, [r5, #1]
10055e84:	702e      	strb	r6, [r5, #0]
10055e86:	0a00      	lsrs	r0, r0, #8
10055e88:	7168      	strb	r0, [r5, #5]
10055e8a:	89a0      	ldrh	r0, [r4, #12]
10055e8c:	3508      	adds	r5, #8
10055e8e:	b28a      	uxth	r2, r1
10055e90:	1cc0      	adds	r0, r0, #3
10055e92:	b281      	uxth	r1, r0
10055e94:	4620      	mov	r0, r4
10055e96:	462b      	mov	r3, r5
10055e98:	f7ff f98a 	bl	100551b0 <ACL_pkt_read>
10055e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055e9e <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>:
10055e9e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10055ea0:	461d      	mov	r5, r3
10055ea2:	4604      	mov	r4, r0
10055ea4:	7202      	strb	r2, [r0, #8]
10055ea6:	7181      	strb	r1, [r0, #6]
10055ea8:	0a10      	lsrs	r0, r2, #8
10055eaa:	7260      	strb	r0, [r4, #9]
10055eac:	0a08      	lsrs	r0, r1, #8
10055eae:	71e0      	strb	r0, [r4, #7]
10055eb0:	9e07      	ldr	r6, [sp, #28]
10055eb2:	89b0      	ldrh	r0, [r6, #12]
10055eb4:	18c0      	adds	r0, r0, r3
10055eb6:	b281      	uxth	r1, r0
10055eb8:	2202      	movs	r2, #2
10055eba:	ab01      	add	r3, sp, #4
10055ebc:	4630      	mov	r0, r6
10055ebe:	f7ff f977 	bl	100551b0 <ACL_pkt_read>
10055ec2:	9806      	ldr	r0, [sp, #24]
10055ec4:	1e80      	subs	r0, r0, #2
10055ec6:	7320      	strb	r0, [r4, #12]
10055ec8:	9901      	ldr	r1, [sp, #4]
10055eca:	72a1      	strb	r1, [r4, #10]
10055ecc:	0a09      	lsrs	r1, r1, #8
10055ece:	72e1      	strb	r1, [r4, #11]
10055ed0:	89b1      	ldrh	r1, [r6, #12]
10055ed2:	1869      	adds	r1, r5, r1
10055ed4:	1c89      	adds	r1, r1, #2
10055ed6:	b289      	uxth	r1, r1
10055ed8:	340d      	adds	r4, #13
10055eda:	b2c2      	uxtb	r2, r0
10055edc:	4630      	mov	r0, r6
10055ede:	4623      	mov	r3, r4
10055ee0:	f7ff f966 	bl	100551b0 <ACL_pkt_read>
10055ee4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10055ee6 <aci_gatt_srv_write_event_copy>:
10055ee6:	b5b0      	push	{r4, r5, r7, lr}
10055ee8:	4615      	mov	r5, r2
10055eea:	4604      	mov	r4, r0
10055eec:	9a05      	ldr	r2, [sp, #20]
10055eee:	71c2      	strb	r2, [r0, #7]
10055ef0:	9804      	ldr	r0, [sp, #16]
10055ef2:	7160      	strb	r0, [r4, #5]
10055ef4:	7123      	strb	r3, [r4, #4]
10055ef6:	70a5      	strb	r5, [r4, #2]
10055ef8:	7021      	strb	r1, [r4, #0]
10055efa:	0a13      	lsrs	r3, r2, #8
10055efc:	7223      	strb	r3, [r4, #8]
10055efe:	0a00      	lsrs	r0, r0, #8
10055f00:	71a0      	strb	r0, [r4, #6]
10055f02:	0a28      	lsrs	r0, r5, #8
10055f04:	70e0      	strb	r0, [r4, #3]
10055f06:	0a08      	lsrs	r0, r1, #8
10055f08:	7060      	strb	r0, [r4, #1]
10055f0a:	9806      	ldr	r0, [sp, #24]
10055f0c:	8981      	ldrh	r1, [r0, #12]
10055f0e:	3409      	adds	r4, #9
10055f10:	1cc9      	adds	r1, r1, #3
10055f12:	b289      	uxth	r1, r1
10055f14:	4623      	mov	r3, r4
10055f16:	f7ff f94b 	bl	100551b0 <ACL_pkt_read>
10055f1a:	bdb0      	pop	{r4, r5, r7, pc}

10055f1c <aci_att_srv_prepare_write_req_event_copy>:
10055f1c:	b570      	push	{r4, r5, r6, lr}
10055f1e:	4615      	mov	r5, r2
10055f20:	4604      	mov	r4, r0
10055f22:	9a05      	ldr	r2, [sp, #20]
10055f24:	7202      	strb	r2, [r0, #8]
10055f26:	9804      	ldr	r0, [sp, #16]
10055f28:	71a0      	strb	r0, [r4, #6]
10055f2a:	7123      	strb	r3, [r4, #4]
10055f2c:	70a5      	strb	r5, [r4, #2]
10055f2e:	7021      	strb	r1, [r4, #0]
10055f30:	0a16      	lsrs	r6, r2, #8
10055f32:	7266      	strb	r6, [r4, #9]
10055f34:	0a00      	lsrs	r0, r0, #8
10055f36:	71e0      	strb	r0, [r4, #7]
10055f38:	0a18      	lsrs	r0, r3, #8
10055f3a:	7160      	strb	r0, [r4, #5]
10055f3c:	0a28      	lsrs	r0, r5, #8
10055f3e:	70e0      	strb	r0, [r4, #3]
10055f40:	0a08      	lsrs	r0, r1, #8
10055f42:	7060      	strb	r0, [r4, #1]
10055f44:	9806      	ldr	r0, [sp, #24]
10055f46:	8981      	ldrh	r1, [r0, #12]
10055f48:	340a      	adds	r4, #10
10055f4a:	1d49      	adds	r1, r1, #5
10055f4c:	b289      	uxth	r1, r1
10055f4e:	4623      	mov	r3, r4
10055f50:	f7ff f92e 	bl	100551b0 <ACL_pkt_read>
10055f54:	bd70      	pop	{r4, r5, r6, pc}

10055f56 <aci_gatt_clt_multi_notification_int_event_copy>:
10055f56:	b5b0      	push	{r4, r5, r7, lr}
10055f58:	461c      	mov	r4, r3
10055f5a:	885b      	ldrh	r3, [r3, #2]
10055f5c:	0a15      	lsrs	r5, r2, #8
10055f5e:	70c5      	strb	r5, [r0, #3]
10055f60:	7082      	strb	r2, [r0, #2]
10055f62:	0a0a      	lsrs	r2, r1, #8
10055f64:	7042      	strb	r2, [r0, #1]
10055f66:	7001      	strb	r1, [r0, #0]
10055f68:	1e59      	subs	r1, r3, #1
10055f6a:	7101      	strb	r1, [r0, #4]
10055f6c:	0a0a      	lsrs	r2, r1, #8
10055f6e:	7142      	strb	r2, [r0, #5]
10055f70:	89a5      	ldrh	r5, [r4, #12]
10055f72:	1d83      	adds	r3, r0, #6
10055f74:	b28a      	uxth	r2, r1
10055f76:	1c68      	adds	r0, r5, #1
10055f78:	b281      	uxth	r1, r0
10055f7a:	4620      	mov	r0, r4
10055f7c:	f7ff f918 	bl	100551b0 <ACL_pkt_read>
10055f80:	bdb0      	pop	{r4, r5, r7, pc}

10055f82 <aci_att_clt_read_multiple_var_len_resp_event_copy>:
10055f82:	b5b0      	push	{r4, r5, r7, lr}
10055f84:	461c      	mov	r4, r3
10055f86:	885b      	ldrh	r3, [r3, #2]
10055f88:	0a15      	lsrs	r5, r2, #8
10055f8a:	70c5      	strb	r5, [r0, #3]
10055f8c:	7082      	strb	r2, [r0, #2]
10055f8e:	0a0a      	lsrs	r2, r1, #8
10055f90:	7042      	strb	r2, [r0, #1]
10055f92:	7001      	strb	r1, [r0, #0]
10055f94:	1e59      	subs	r1, r3, #1
10055f96:	7101      	strb	r1, [r0, #4]
10055f98:	0a0a      	lsrs	r2, r1, #8
10055f9a:	7142      	strb	r2, [r0, #5]
10055f9c:	89a5      	ldrh	r5, [r4, #12]
10055f9e:	1d83      	adds	r3, r0, #6
10055fa0:	b28a      	uxth	r2, r1
10055fa2:	1c68      	adds	r0, r5, #1
10055fa4:	b281      	uxth	r1, r0
10055fa6:	4620      	mov	r0, r4
10055fa8:	f7ff f902 	bl	100551b0 <ACL_pkt_read>
10055fac:	bdb0      	pop	{r4, r5, r7, pc}

10055fae <hci_rx_acl_data_event_copy>:
10055fae:	b5b0      	push	{r4, r5, r7, lr}
10055fb0:	4614      	mov	r4, r2
10055fb2:	9a04      	ldr	r2, [sp, #16]
10055fb4:	70c2      	strb	r2, [r0, #3]
10055fb6:	7041      	strb	r1, [r0, #1]
10055fb8:	0a15      	lsrs	r5, r2, #8
10055fba:	7105      	strb	r5, [r0, #4]
10055fbc:	250f      	movs	r5, #15
10055fbe:	022d      	lsls	r5, r5, #8
10055fc0:	400d      	ands	r5, r1
10055fc2:	07a1      	lsls	r1, r4, #30
10055fc4:	0c89      	lsrs	r1, r1, #18
10055fc6:	1949      	adds	r1, r1, r5
10055fc8:	039b      	lsls	r3, r3, #14
10055fca:	18c9      	adds	r1, r1, r3
10055fcc:	0a09      	lsrs	r1, r1, #8
10055fce:	7081      	strb	r1, [r0, #2]
10055fd0:	1d43      	adds	r3, r0, #5
10055fd2:	9805      	ldr	r0, [sp, #20]
10055fd4:	2100      	movs	r1, #0
10055fd6:	f7ff f8eb 	bl	100551b0 <ACL_pkt_read>
10055fda:	bdb0      	pop	{r4, r5, r7, pc}

10055fdc <aci_l2cap_proc_timeout_event_copy>:
10055fdc:	7001      	strb	r1, [r0, #0]
10055fde:	2200      	movs	r2, #0
10055fe0:	7082      	strb	r2, [r0, #2]
10055fe2:	0a09      	lsrs	r1, r1, #8
10055fe4:	7041      	strb	r1, [r0, #1]
10055fe6:	4770      	bx	lr

10055fe8 <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
10055fe8:	2000      	movs	r0, #0
10055fea:	4770      	bx	lr

10055fec <hci_hardware_error_event_cb>:
10055fec:	b5e0      	push	{r5, r6, r7, lr}
10055fee:	aa01      	add	r2, sp, #4
10055ff0:	70d0      	strb	r0, [r2, #3]
10055ff2:	2001      	movs	r0, #1
10055ff4:	7090      	strb	r0, [r2, #2]
10055ff6:	2010      	movs	r0, #16
10055ff8:	7050      	strb	r0, [r2, #1]
10055ffa:	2104      	movs	r1, #4
10055ffc:	7011      	strb	r1, [r2, #0]
10055ffe:	4610      	mov	r0, r2
10056000:	f7f8 fef0 	bl	1004ede4 <BLE_STACK_Event>
10056004:	bd8c      	pop	{r2, r3, r7, pc}

10056006 <GAP_enable_disable_scan_ucfg_weak>:
10056006:	2000      	movs	r0, #0
10056008:	4770      	bx	lr

1005600a <GAP_discover_peer_name_ucfg_weak>:
1005600a:	2000      	movs	r0, #0
1005600c:	4770      	bx	lr
	...

10056010 <GAP_name_disc_proc_connected_check>:
10056010:	b51c      	push	{r2, r3, r4, lr}
10056012:	4811      	ldr	r0, [pc, #68]	@ (10056058 <__arm_cp.18_0>)
10056014:	6804      	ldr	r4, [r0, #0]
10056016:	f7ff fff8 	bl	1005600a <GAP_discover_peer_name_ucfg_weak>
1005601a:	2888      	cmp	r0, #136	@ 0x88
1005601c:	d007      	beq.n	1005602e <GAP_name_disc_proc_connected_check+0x1e>
1005601e:	280c      	cmp	r0, #12
10056020:	d005      	beq.n	1005602e <GAP_name_disc_proc_connected_check+0x1e>
10056022:	345d      	adds	r4, #93	@ 0x5d
10056024:	2800      	cmp	r0, #0
10056026:	d108      	bne.n	1005603a <GAP_name_disc_proc_connected_check+0x2a>
10056028:	2002      	movs	r0, #2
1005602a:	7060      	strb	r0, [r4, #1]
1005602c:	bd1c      	pop	{r2, r3, r4, pc}
1005602e:	2005      	movs	r0, #5
10056030:	f00c fda0 	bl	10062b74 <tsk_notify_idx>
10056034:	f7fb ff21 	bl	10051e7a <BLE_STACK_ProcessRequest>
10056038:	bd1c      	pop	{r2, r3, r4, pc}
1005603a:	2000      	movs	r0, #0
1005603c:	7060      	strb	r0, [r4, #1]
1005603e:	7820      	ldrb	r0, [r4, #0]
10056040:	217f      	movs	r1, #127	@ 0x7f
10056042:	4001      	ands	r1, r0
10056044:	7021      	strb	r1, [r4, #0]
10056046:	a901      	add	r1, sp, #4
10056048:	2086      	movs	r0, #134	@ 0x86
1005604a:	7048      	strb	r0, [r1, #1]
1005604c:	2080      	movs	r0, #128	@ 0x80
1005604e:	7008      	strb	r0, [r1, #0]
10056050:	2002      	movs	r0, #2
10056052:	f000 f9bf 	bl	100563d4 <aci_gap_proc_complete_event_wrapper>
10056056:	bd1c      	pop	{r2, r3, r4, pc}

10056058 <__arm_cp.18_0>:
10056058:	2000241c 	.word	0x2000241c

1005605c <GAP_central_connection_complete_handler_ucfg_weak>:
1005605c:	4770      	bx	lr

1005605e <GAP_DiscProcTimeoutcb_ucfg_weak>:
1005605e:	4770      	bx	lr

10056060 <GAP_started_gatt_proc>:
10056060:	4907      	ldr	r1, [pc, #28]	@ (10056080 <__arm_cp.28_0>)
10056062:	6809      	ldr	r1, [r1, #0]
10056064:	225d      	movs	r2, #93	@ 0x5d
10056066:	5c8a      	ldrb	r2, [r1, r2]
10056068:	2388      	movs	r3, #136	@ 0x88
1005606a:	421a      	tst	r2, r3
1005606c:	d004      	beq.n	10056078 <GAP_started_gatt_proc+0x18>
1005606e:	3172      	adds	r1, #114	@ 0x72
10056070:	8809      	ldrh	r1, [r1, #0]
10056072:	4041      	eors	r1, r0
10056074:	0508      	lsls	r0, r1, #20
10056076:	d001      	beq.n	1005607c <GAP_started_gatt_proc+0x1c>
10056078:	2000      	movs	r0, #0
1005607a:	4770      	bx	lr
1005607c:	2001      	movs	r0, #1
1005607e:	4770      	bx	lr

10056080 <__arm_cp.28_0>:
10056080:	2000241c 	.word	0x2000241c

10056084 <gap_timers_callback_wrapper>:
10056084:	b580      	push	{r7, lr}
10056086:	6940      	ldr	r0, [r0, #20]
10056088:	4901      	ldr	r1, [pc, #4]	@ (10056090 <__arm_cp.0_0>)
1005608a:	f00c feaa 	bl	10062de2 <cst_sharedCallback>
1005608e:	bd80      	pop	{r7, pc}

10056090 <__arm_cp.0_0>:
10056090:	10056095 	.word	0x10056095

10056094 <gap_timers_callback>:
10056094:	b580      	push	{r7, lr}
10056096:	2802      	cmp	r0, #2
10056098:	d007      	beq.n	100560aa <gap_timers_callback+0x16>
1005609a:	2801      	cmp	r0, #1
1005609c:	d009      	beq.n	100560b2 <gap_timers_callback+0x1e>
1005609e:	2800      	cmp	r0, #0
100560a0:	d106      	bne.n	100560b0 <gap_timers_callback+0x1c>
100560a2:	2000      	movs	r0, #0
100560a4:	f7f8 ff19 	bl	1004eeda <GAP_LimDiscTimeoutcb_ucfg>
100560a8:	bd80      	pop	{r7, pc}
100560aa:	2000      	movs	r0, #0
100560ac:	f7ff ffd7 	bl	1005605e <GAP_DiscProcTimeoutcb_ucfg_weak>
100560b0:	bd80      	pop	{r7, pc}
100560b2:	2000      	movs	r0, #0
100560b4:	f000 f802 	bl	100560bc <GAP_PrivateAddrTimercb>
100560b8:	bd80      	pop	{r7, pc}
	...

100560bc <GAP_PrivateAddrTimercb>:
100560bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100560be:	b087      	sub	sp, #28
100560c0:	4831      	ldr	r0, [pc, #196]	@ (10056188 <__arm_cp.2_0>)
100560c2:	6804      	ldr	r4, [r0, #0]
100560c4:	a906      	add	r1, sp, #24
100560c6:	9104      	str	r1, [sp, #16]
100560c8:	2000      	movs	r0, #0
100560ca:	9001      	str	r0, [sp, #4]
100560cc:	7008      	strb	r0, [r1, #0]
100560ce:	ae05      	add	r6, sp, #20
100560d0:	2001      	movs	r0, #1
100560d2:	7030      	strb	r0, [r6, #0]
100560d4:	f000 f950 	bl	10056378 <GAP_reset_privacy_timer>
100560d8:	205d      	movs	r0, #93	@ 0x5d
100560da:	9403      	str	r4, [sp, #12]
100560dc:	5c27      	ldrb	r7, [r4, r0]
100560de:	1e78      	subs	r0, r7, #1
100560e0:	463d      	mov	r5, r7
100560e2:	4185      	sbcs	r5, r0
100560e4:	2020      	movs	r0, #32
100560e6:	4038      	ands	r0, r7
100560e8:	4244      	negs	r4, r0
100560ea:	9002      	str	r0, [sp, #8]
100560ec:	4144      	adcs	r4, r0
100560ee:	9804      	ldr	r0, [sp, #16]
100560f0:	4631      	mov	r1, r6
100560f2:	f000 fd51 	bl	10056b98 <GAP_check_adv_status>
100560f6:	2f00      	cmp	r7, #0
100560f8:	d101      	bne.n	100560fe <GAP_PrivateAddrTimercb+0x42>
100560fa:	2801      	cmp	r0, #1
100560fc:	d13e      	bne.n	1005617c <GAP_PrivateAddrTimercb+0xc0>
100560fe:	402c      	ands	r4, r5
10056100:	d138      	bne.n	10056174 <GAP_PrivateAddrTimercb+0xb8>
10056102:	a805      	add	r0, sp, #20
10056104:	7800      	ldrb	r0, [r0, #0]
10056106:	2800      	cmp	r0, #0
10056108:	d034      	beq.n	10056174 <GAP_PrivateAddrTimercb+0xb8>
1005610a:	9c03      	ldr	r4, [sp, #12]
1005610c:	4620      	mov	r0, r4
1005610e:	305d      	adds	r0, #93	@ 0x5d
10056110:	7bc0      	ldrb	r0, [r0, #15]
10056112:	2800      	cmp	r0, #0
10056114:	d034      	beq.n	10056180 <GAP_PrivateAddrTimercb+0xc4>
10056116:	3428      	adds	r4, #40	@ 0x28
10056118:	9d02      	ldr	r5, [sp, #8]
1005611a:	2d00      	cmp	r5, #0
1005611c:	d003      	beq.n	10056126 <GAP_PrivateAddrTimercb+0x6a>
1005611e:	7821      	ldrb	r1, [r4, #0]
10056120:	2000      	movs	r0, #0
10056122:	f7ff ff70 	bl	10056006 <GAP_enable_disable_scan_ucfg_weak>
10056126:	a806      	add	r0, sp, #24
10056128:	7800      	ldrb	r0, [r0, #0]
1005612a:	2801      	cmp	r0, #1
1005612c:	d102      	bne.n	10056134 <GAP_PrivateAddrTimercb+0x78>
1005612e:	2000      	movs	r0, #0
10056130:	f000 fcf6 	bl	10056b20 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
10056134:	f000 fafc 	bl	10056730 <GAP_generate_new_rpa>
10056138:	2800      	cmp	r0, #0
1005613a:	d104      	bne.n	10056146 <GAP_PrivateAddrTimercb+0x8a>
1005613c:	2000      	movs	r0, #0
1005613e:	2101      	movs	r1, #1
10056140:	f000 face 	bl	100566e0 <GAP_start_privacy_timer>
10056144:	9001      	str	r0, [sp, #4]
10056146:	2d00      	cmp	r5, #0
10056148:	d00a      	beq.n	10056160 <GAP_PrivateAddrTimercb+0xa4>
1005614a:	7821      	ldrb	r1, [r4, #0]
1005614c:	2001      	movs	r0, #1
1005614e:	f7ff ff5a 	bl	10056006 <GAP_enable_disable_scan_ucfg_weak>
10056152:	2800      	cmp	r0, #0
10056154:	d004      	beq.n	10056160 <GAP_PrivateAddrTimercb+0xa4>
10056156:	9801      	ldr	r0, [sp, #4]
10056158:	2800      	cmp	r0, #0
1005615a:	d001      	beq.n	10056160 <GAP_PrivateAddrTimercb+0xa4>
1005615c:	f000 fa2c 	bl	100565b8 <GAP_stop_privacy_timer>
10056160:	a806      	add	r0, sp, #24
10056162:	7800      	ldrb	r0, [r0, #0]
10056164:	2801      	cmp	r0, #1
10056166:	d109      	bne.n	1005617c <GAP_PrivateAddrTimercb+0xc0>
10056168:	2006      	movs	r0, #6
1005616a:	f00c fd03 	bl	10062b74 <tsk_notify_idx>
1005616e:	f7fb fe84 	bl	10051e7a <BLE_STACK_ProcessRequest>
10056172:	e003      	b.n	1005617c <GAP_PrivateAddrTimercb+0xc0>
10056174:	2001      	movs	r0, #1
10056176:	4601      	mov	r1, r0
10056178:	f000 fab2 	bl	100566e0 <GAP_start_privacy_timer>
1005617c:	b007      	add	sp, #28
1005617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056180:	2000      	movs	r0, #0
10056182:	2101      	movs	r1, #1
10056184:	e7f8      	b.n	10056178 <GAP_PrivateAddrTimercb+0xbc>
10056186:	46c0      	nop			@ (mov r8, r8)

10056188 <__arm_cp.2_0>:
10056188:	2000241c 	.word	0x2000241c

1005618c <GAP_init_context>:
1005618c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005618e:	461f      	mov	r7, r3
10056190:	9201      	str	r2, [sp, #4]
10056192:	9102      	str	r1, [sp, #8]
10056194:	4605      	mov	r5, r0
10056196:	2401      	movs	r4, #1
10056198:	2178      	movs	r1, #120	@ 0x78
1005619a:	4620      	mov	r0, r4
1005619c:	f00a ff14 	bl	10060fc8 <csmem_mem_0_assign>
100561a0:	21e1      	movs	r1, #225	@ 0xe1
100561a2:	0089      	lsls	r1, r1, #2
100561a4:	225a      	movs	r2, #90	@ 0x5a
100561a6:	5281      	strh	r1, [r0, r2]
100561a8:	4e24      	ldr	r6, [pc, #144]	@ (1005623c <__arm_cp.3_0>)
100561aa:	6030      	str	r0, [r6, #0]
100561ac:	2d01      	cmp	r5, #1
100561ae:	d117      	bne.n	100561e0 <GAP_init_context+0x54>
100561b0:	2001      	movs	r0, #1
100561b2:	2106      	movs	r1, #6
100561b4:	f00a ff08 	bl	10060fc8 <csmem_mem_0_assign>
100561b8:	4601      	mov	r1, r0
100561ba:	6830      	ldr	r0, [r6, #0]
100561bc:	6381      	str	r1, [r0, #56]	@ 0x38
100561be:	2f01      	cmp	r7, #1
100561c0:	d10e      	bne.n	100561e0 <GAP_init_context+0x54>
100561c2:	2501      	movs	r5, #1
100561c4:	270e      	movs	r7, #14
100561c6:	4628      	mov	r0, r5
100561c8:	4639      	mov	r1, r7
100561ca:	f00a fefd 	bl	10060fc8 <csmem_mem_0_assign>
100561ce:	6831      	ldr	r1, [r6, #0]
100561d0:	64c8      	str	r0, [r1, #76]	@ 0x4c
100561d2:	4628      	mov	r0, r5
100561d4:	4639      	mov	r1, r7
100561d6:	f00a fef7 	bl	10060fc8 <csmem_mem_0_assign>
100561da:	4601      	mov	r1, r0
100561dc:	6830      	ldr	r0, [r6, #0]
100561de:	6501      	str	r1, [r0, #80]	@ 0x50
100561e0:	9902      	ldr	r1, [sp, #8]
100561e2:	2901      	cmp	r1, #1
100561e4:	d10b      	bne.n	100561fe <GAP_init_context+0x72>
100561e6:	9801      	ldr	r0, [sp, #4]
100561e8:	2801      	cmp	r0, #1
100561ea:	d105      	bne.n	100561f8 <GAP_init_context+0x6c>
100561ec:	201c      	movs	r0, #28
100561ee:	2101      	movs	r1, #1
100561f0:	f00a feea 	bl	10060fc8 <csmem_mem_0_assign>
100561f4:	6831      	ldr	r1, [r6, #0]
100561f6:	62c8      	str	r0, [r1, #44]	@ 0x2c
100561f8:	4811      	ldr	r0, [pc, #68]	@ (10056240 <__arm_cp.3_1>)
100561fa:	7e84      	ldrb	r4, [r0, #26]
100561fc:	e001      	b.n	10056202 <GAP_init_context+0x76>
100561fe:	2100      	movs	r1, #0
10056200:	62c1      	str	r1, [r0, #44]	@ 0x2c
10056202:	2114      	movs	r1, #20
10056204:	4620      	mov	r0, r4
10056206:	f00a fedf 	bl	10060fc8 <csmem_mem_0_assign>
1005620a:	6831      	ldr	r1, [r6, #0]
1005620c:	6548      	str	r0, [r1, #84]	@ 0x54
1005620e:	4c0d      	ldr	r4, [pc, #52]	@ (10056244 <__arm_cp.3_2>)
10056210:	2104      	movs	r1, #4
10056212:	2201      	movs	r2, #1
10056214:	4620      	mov	r0, r4
10056216:	f00a fec5 	bl	10060fa4 <csmem_mem_assign>
1005621a:	6831      	ldr	r1, [r6, #0]
1005621c:	6208      	str	r0, [r1, #32]
1005621e:	2503      	movs	r5, #3
10056220:	2202      	movs	r2, #2
10056222:	4620      	mov	r0, r4
10056224:	4629      	mov	r1, r5
10056226:	f00a febd 	bl	10060fa4 <csmem_mem_assign>
1005622a:	6831      	ldr	r1, [r6, #0]
1005622c:	6248      	str	r0, [r1, #36]	@ 0x24
1005622e:	4a06      	ldr	r2, [pc, #24]	@ (10056248 <__arm_cp.3_3>)
10056230:	2307      	movs	r3, #7
10056232:	4608      	mov	r0, r1
10056234:	4629      	mov	r1, r5
10056236:	f00c fcfb 	bl	10062c30 <CST_init>
1005623a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005623c <__arm_cp.3_0>:
1005623c:	2000241c 	.word	0x2000241c

10056240 <__arm_cp.3_1>:
10056240:	2000247c 	.word	0x2000247c

10056244 <__arm_cp.3_2>:
10056244:	20002478 	.word	0x20002478

10056248 <__arm_cp.3_3>:
10056248:	10056085 	.word	0x10056085

1005624c <GAP_get_default_le_event_mask>:
1005624c:	b5b0      	push	{r4, r5, r7, lr}
1005624e:	4604      	mov	r4, r0
10056250:	2100      	movs	r1, #0
10056252:	2508      	movs	r5, #8
10056254:	462a      	mov	r2, r5
10056256:	f7fc fc07 	bl	10052a68 <BLEPLAT_MemSet>
1005625a:	7820      	ldrb	r0, [r4, #0]
1005625c:	21df      	movs	r1, #223	@ 0xdf
1005625e:	4301      	orrs	r1, r0
10056260:	7021      	strb	r1, [r4, #0]
10056262:	7860      	ldrb	r0, [r4, #1]
10056264:	2109      	movs	r1, #9
10056266:	4301      	orrs	r1, r0
10056268:	7061      	strb	r1, [r4, #1]
1005626a:	78a1      	ldrb	r1, [r4, #2]
1005626c:	4329      	orrs	r1, r5
1005626e:	70a1      	strb	r1, [r4, #2]
10056270:	4911      	ldr	r1, [pc, #68]	@ (100562b8 <__arm_cp.4_0>)
10056272:	6809      	ldr	r1, [r1, #0]
10056274:	225c      	movs	r2, #92	@ 0x5c
10056276:	5c89      	ldrb	r1, [r1, r2]
10056278:	0689      	lsls	r1, r1, #26
1005627a:	d502      	bpl.n	10056282 <GAP_get_default_le_event_mask+0x36>
1005627c:	210f      	movs	r1, #15
1005627e:	4308      	orrs	r0, r1
10056280:	7060      	strb	r0, [r4, #1]
10056282:	f009 ff09 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
10056286:	2801      	cmp	r0, #1
10056288:	d107      	bne.n	1005629a <GAP_get_default_le_event_mask+0x4e>
1005628a:	7860      	ldrb	r0, [r4, #1]
1005628c:	2112      	movs	r1, #18
1005628e:	4301      	orrs	r1, r0
10056290:	7061      	strb	r1, [r4, #1]
10056292:	78a0      	ldrb	r0, [r4, #2]
10056294:	2107      	movs	r1, #7
10056296:	4301      	orrs	r1, r0
10056298:	70a1      	strb	r1, [r4, #2]
1005629a:	f005 fdbf 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005629e:	b2c0      	uxtb	r0, r0
100562a0:	2801      	cmp	r0, #1
100562a2:	d107      	bne.n	100562b4 <GAP_get_default_le_event_mask+0x68>
100562a4:	7860      	ldrb	r0, [r4, #1]
100562a6:	21e0      	movs	r1, #224	@ 0xe0
100562a8:	4301      	orrs	r1, r0
100562aa:	7061      	strb	r1, [r4, #1]
100562ac:	78a0      	ldrb	r0, [r4, #2]
100562ae:	2180      	movs	r1, #128	@ 0x80
100562b0:	4301      	orrs	r1, r0
100562b2:	70a1      	strb	r1, [r4, #2]
100562b4:	bdb0      	pop	{r4, r5, r7, pc}
100562b6:	46c0      	nop			@ (mov r8, r8)

100562b8 <__arm_cp.4_0>:
100562b8:	2000241c 	.word	0x2000241c

100562bc <gap_extended_adv_scan_supported>:
100562bc:	b580      	push	{r7, lr}
100562be:	f009 feeb 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
100562c2:	bd80      	pop	{r7, pc}

100562c4 <GAP_Init>:
100562c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100562c6:	b085      	sub	sp, #20
100562c8:	4605      	mov	r5, r0
100562ca:	a804      	add	r0, sp, #16
100562cc:	2700      	movs	r7, #0
100562ce:	7007      	strb	r7, [r0, #0]
100562d0:	2412      	movs	r4, #18
100562d2:	2901      	cmp	r1, #1
100562d4:	d901      	bls.n	100562da <GAP_Init+0x16>
100562d6:	4620      	mov	r0, r4
100562d8:	e048      	b.n	1005636c <GAP_Init+0xa8>
100562da:	460e      	mov	r6, r1
100562dc:	4824      	ldr	r0, [pc, #144]	@ (10056370 <__arm_cp.7_0>)
100562de:	6800      	ldr	r0, [r0, #0]
100562e0:	9000      	str	r0, [sp, #0]
100562e2:	f00c ff85 	bl	100631f0 <IDD_Initialize_Device_IDs>
100562e6:	2800      	cmp	r0, #0
100562e8:	d140      	bne.n	1005636c <GAP_Init+0xa8>
100562ea:	9900      	ldr	r1, [sp, #0]
100562ec:	315c      	adds	r1, #92	@ 0x5c
100562ee:	7808      	ldrb	r0, [r1, #0]
100562f0:	07c0      	lsls	r0, r0, #31
100562f2:	d111      	bne.n	10056318 <GAP_Init+0x54>
100562f4:	78c8      	ldrb	r0, [r1, #3]
100562f6:	4330      	orrs	r0, r6
100562f8:	460e      	mov	r6, r1
100562fa:	70c8      	strb	r0, [r1, #3]
100562fc:	a803      	add	r0, sp, #12
100562fe:	2107      	movs	r1, #7
10056300:	7001      	strb	r1, [r0, #0]
10056302:	2d00      	cmp	r5, #0
10056304:	d012      	beq.n	1005632c <GAP_Init+0x68>
10056306:	2d02      	cmp	r5, #2
10056308:	d008      	beq.n	1005631c <GAP_Init+0x58>
1005630a:	2d01      	cmp	r5, #1
1005630c:	4620      	mov	r0, r4
1005630e:	d12d      	bne.n	1005636c <GAP_Init+0xa8>
10056310:	a804      	add	r0, sp, #16
10056312:	2110      	movs	r1, #16
10056314:	7001      	strb	r1, [r0, #0]
10056316:	e009      	b.n	1005632c <GAP_Init+0x68>
10056318:	200c      	movs	r0, #12
1005631a:	e027      	b.n	1005636c <GAP_Init+0xa8>
1005631c:	a804      	add	r0, sp, #16
1005631e:	2120      	movs	r1, #32
10056320:	7001      	strb	r1, [r0, #0]
10056322:	a903      	add	r1, sp, #12
10056324:	f000 f9a2 	bl	1005666c <GAP_enable_controller_privacy_ucfg_weak>
10056328:	2800      	cmp	r0, #0
1005632a:	d11f      	bne.n	1005636c <GAP_Init+0xa8>
1005632c:	f000 f9d6 	bl	100566dc <GAP_init_advertising_sets_ucfg_weak>
10056330:	2800      	cmp	r0, #0
10056332:	d11b      	bne.n	1005636c <GAP_Init+0xa8>
10056334:	9800      	ldr	r0, [sp, #0]
10056336:	3060      	adds	r0, #96	@ 0x60
10056338:	f000 f9cc 	bl	100566d4 <GAP_set_controller_random_address_ucfg_weak>
1005633c:	2800      	cmp	r0, #0
1005633e:	d115      	bne.n	1005636c <GAP_Init+0xa8>
10056340:	9804      	ldr	r0, [sp, #16]
10056342:	2101      	movs	r1, #1
10056344:	7431      	strb	r1, [r6, #16]
10056346:	4308      	orrs	r0, r1
10056348:	7030      	strb	r0, [r6, #0]
1005634a:	f000 f815 	bl	10056378 <GAP_reset_privacy_timer>
1005634e:	ac01      	add	r4, sp, #4
10056350:	4620      	mov	r0, r4
10056352:	f7ff ff7b 	bl	1005624c <GAP_get_default_le_event_mask>
10056356:	4620      	mov	r0, r4
10056358:	f003 fa24 	bl	100597a4 <hci_le_set_event_mask>
1005635c:	43f8      	mvns	r0, r7
1005635e:	9001      	str	r0, [sp, #4]
10056360:	4804      	ldr	r0, [pc, #16]	@ (10056374 <__arm_cp.7_1>)
10056362:	9002      	str	r0, [sp, #8]
10056364:	4620      	mov	r0, r4
10056366:	f003 fa0d 	bl	10059784 <hci_set_event_mask>
1005636a:	4638      	mov	r0, r7
1005636c:	b005      	add	sp, #20
1005636e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056370 <__arm_cp.7_0>:
10056370:	2000241c 	.word	0x2000241c

10056374 <__arm_cp.7_1>:
10056374:	20009fff 	.word	0x20009fff

10056378 <GAP_reset_privacy_timer>:
10056378:	4806      	ldr	r0, [pc, #24]	@ (10056394 <__arm_cp.8_0>)
1005637a:	6800      	ldr	r0, [r0, #0]
1005637c:	215c      	movs	r1, #92	@ 0x5c
1005637e:	5c41      	ldrb	r1, [r0, r1]
10056380:	0689      	lsls	r1, r1, #26
10056382:	0f89      	lsrs	r1, r1, #30
10056384:	d004      	beq.n	10056390 <GAP_reset_privacy_timer+0x18>
10056386:	305c      	adds	r0, #92	@ 0x5c
10056388:	78c1      	ldrb	r1, [r0, #3]
1005638a:	2202      	movs	r2, #2
1005638c:	430a      	orrs	r2, r1
1005638e:	70c2      	strb	r2, [r0, #3]
10056390:	4770      	bx	lr
10056392:	46c0      	nop			@ (mov r8, r8)

10056394 <__arm_cp.8_0>:
10056394:	2000241c 	.word	0x2000241c

10056398 <GAP_internal_evt_handler>:
10056398:	b5b0      	push	{r4, r5, r7, lr}
1005639a:	285c      	cmp	r0, #92	@ 0x5c
1005639c:	d106      	bne.n	100563ac <GAP_internal_evt_handler+0x14>
1005639e:	480c      	ldr	r0, [pc, #48]	@ (100563d0 <__arm_cp.12_0>)
100563a0:	6804      	ldr	r4, [r0, #0]
100563a2:	345d      	adds	r4, #93	@ 0x5d
100563a4:	2500      	movs	r5, #0
100563a6:	5760      	ldrsb	r0, [r4, r5]
100563a8:	2800      	cmp	r0, #0
100563aa:	d400      	bmi.n	100563ae <GAP_internal_evt_handler+0x16>
100563ac:	bdb0      	pop	{r4, r5, r7, pc}
100563ae:	7860      	ldrb	r0, [r4, #1]
100563b0:	2802      	cmp	r0, #2
100563b2:	d1fb      	bne.n	100563ac <GAP_internal_evt_handler+0x14>
100563b4:	7055      	strb	r5, [r2, #1]
100563b6:	2080      	movs	r0, #128	@ 0x80
100563b8:	7010      	strb	r0, [r2, #0]
100563ba:	b2c8      	uxtb	r0, r1
100563bc:	4611      	mov	r1, r2
100563be:	f000 f809 	bl	100563d4 <aci_gap_proc_complete_event_wrapper>
100563c2:	7065      	strb	r5, [r4, #1]
100563c4:	7820      	ldrb	r0, [r4, #0]
100563c6:	217f      	movs	r1, #127	@ 0x7f
100563c8:	4001      	ands	r1, r0
100563ca:	7021      	strb	r1, [r4, #0]
100563cc:	bdb0      	pop	{r4, r5, r7, pc}
100563ce:	46c0      	nop			@ (mov r8, r8)

100563d0 <__arm_cp.12_0>:
100563d0:	2000241c 	.word	0x2000241c

100563d4 <aci_gap_proc_complete_event_wrapper>:
100563d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100563d6:	2900      	cmp	r1, #0
100563d8:	d016      	beq.n	10056408 <aci_gap_proc_complete_event_wrapper+0x34>
100563da:	460e      	mov	r6, r1
100563dc:	4605      	mov	r5, r0
100563de:	7809      	ldrb	r1, [r1, #0]
100563e0:	2400      	movs	r4, #0
100563e2:	07c8      	lsls	r0, r1, #31
100563e4:	4620      	mov	r0, r4
100563e6:	d11f      	bne.n	10056428 <aci_gap_proc_complete_event_wrapper+0x54>
100563e8:	0788      	lsls	r0, r1, #30
100563ea:	d40f      	bmi.n	1005640c <aci_gap_proc_complete_event_wrapper+0x38>
100563ec:	0748      	lsls	r0, r1, #29
100563ee:	d40f      	bmi.n	10056410 <aci_gap_proc_complete_event_wrapper+0x3c>
100563f0:	0708      	lsls	r0, r1, #28
100563f2:	d40f      	bmi.n	10056414 <aci_gap_proc_complete_event_wrapper+0x40>
100563f4:	06c8      	lsls	r0, r1, #27
100563f6:	d40f      	bmi.n	10056418 <aci_gap_proc_complete_event_wrapper+0x44>
100563f8:	0688      	lsls	r0, r1, #26
100563fa:	d40f      	bmi.n	1005641c <aci_gap_proc_complete_event_wrapper+0x48>
100563fc:	0648      	lsls	r0, r1, #25
100563fe:	d40f      	bmi.n	10056420 <aci_gap_proc_complete_event_wrapper+0x4c>
10056400:	0608      	lsls	r0, r1, #24
10056402:	d50f      	bpl.n	10056424 <aci_gap_proc_complete_event_wrapper+0x50>
10056404:	2007      	movs	r0, #7
10056406:	e00f      	b.n	10056428 <aci_gap_proc_complete_event_wrapper+0x54>
10056408:	2412      	movs	r4, #18
1005640a:	e03c      	b.n	10056486 <aci_gap_proc_complete_event_wrapper+0xb2>
1005640c:	2001      	movs	r0, #1
1005640e:	e00b      	b.n	10056428 <aci_gap_proc_complete_event_wrapper+0x54>
10056410:	2002      	movs	r0, #2
10056412:	e009      	b.n	10056428 <aci_gap_proc_complete_event_wrapper+0x54>
10056414:	2003      	movs	r0, #3
10056416:	e007      	b.n	10056428 <aci_gap_proc_complete_event_wrapper+0x54>
10056418:	2004      	movs	r0, #4
1005641a:	e005      	b.n	10056428 <aci_gap_proc_complete_event_wrapper+0x54>
1005641c:	2005      	movs	r0, #5
1005641e:	e003      	b.n	10056428 <aci_gap_proc_complete_event_wrapper+0x54>
10056420:	2006      	movs	r0, #6
10056422:	e001      	b.n	10056428 <aci_gap_proc_complete_event_wrapper+0x54>
10056424:	2000      	movs	r0, #0
10056426:	43c0      	mvns	r0, r0
10056428:	7030      	strb	r0, [r6, #0]
1005642a:	4818      	ldr	r0, [pc, #96]	@ (1005648c <__arm_cp.13_0>)
1005642c:	6800      	ldr	r0, [r0, #0]
1005642e:	214e      	movs	r1, #78	@ 0x4e
10056430:	5640      	ldrsb	r0, [r0, r1]
10056432:	2800      	cmp	r0, #0
10056434:	d527      	bpl.n	10056486 <aci_gap_proc_complete_event_wrapper+0xb2>
10056436:	4816      	ldr	r0, [pc, #88]	@ (10056490 <__arm_cp.13_1>)
10056438:	1828      	adds	r0, r5, r0
1005643a:	2103      	movs	r1, #3
1005643c:	4301      	orrs	r1, r0
1005643e:	310d      	adds	r1, #13
10056440:	0888      	lsrs	r0, r1, #2
10056442:	b283      	uxth	r3, r0
10056444:	4813      	ldr	r0, [pc, #76]	@ (10056494 <__arm_cp.13_2>)
10056446:	6800      	ldr	r0, [r0, #0]
10056448:	6980      	ldr	r0, [r0, #24]
1005644a:	2102      	movs	r1, #2
1005644c:	2247      	movs	r2, #71	@ 0x47
1005644e:	f7ff f847 	bl	100554e0 <aci_event_fifo_push_header>
10056452:	2800      	cmp	r0, #0
10056454:	d016      	beq.n	10056484 <aci_gap_proc_complete_event_wrapper+0xb0>
10056456:	4607      	mov	r7, r0
10056458:	1d00      	adds	r0, r0, #4
1005645a:	4629      	mov	r1, r5
1005645c:	4632      	mov	r2, r6
1005645e:	f7ff fb7a 	bl	10055b56 <aci_gap_proc_complete_event_copy>
10056462:	2004      	movs	r0, #4
10056464:	7278      	strb	r0, [r7, #9]
10056466:	2007      	movs	r0, #7
10056468:	7238      	strb	r0, [r7, #8]
1005646a:	1ce8      	adds	r0, r5, #3
1005646c:	0a01      	lsrs	r1, r0, #8
1005646e:	71f9      	strb	r1, [r7, #7]
10056470:	71b8      	strb	r0, [r7, #6]
10056472:	20ff      	movs	r0, #255	@ 0xff
10056474:	7178      	strb	r0, [r7, #5]
10056476:	2082      	movs	r0, #130	@ 0x82
10056478:	7138      	strb	r0, [r7, #4]
1005647a:	2002      	movs	r0, #2
1005647c:	4639      	mov	r1, r7
1005647e:	f7ff f8cc 	bl	1005561a <aci_event_fifo_push>
10056482:	e000      	b.n	10056486 <aci_gap_proc_complete_event_wrapper+0xb2>
10056484:	2407      	movs	r4, #7
10056486:	4620      	mov	r0, r4
10056488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005648a:	46c0      	nop			@ (mov r8, r8)

1005648c <__arm_cp.13_0>:
1005648c:	20002468 	.word	0x20002468

10056490 <__arm_cp.13_1>:
10056490:	0003fffd 	.word	0x0003fffd

10056494 <__arm_cp.13_2>:
10056494:	20002418 	.word	0x20002418

10056498 <GAP_LimDiscTimeoutcb>:
10056498:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005649a:	4811      	ldr	r0, [pc, #68]	@ (100564e0 <__arm_cp.15_0>)
1005649c:	6800      	ldr	r0, [r0, #0]
1005649e:	6d44      	ldr	r4, [r0, #84]	@ 0x54
100564a0:	f009 fdfa 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
100564a4:	2800      	cmp	r0, #0
100564a6:	d002      	beq.n	100564ae <GAP_LimDiscTimeoutcb+0x16>
100564a8:	480e      	ldr	r0, [pc, #56]	@ (100564e4 <__arm_cp.15_1>)
100564aa:	7e80      	ldrb	r0, [r0, #26]
100564ac:	e000      	b.n	100564b0 <GAP_LimDiscTimeoutcb+0x18>
100564ae:	2001      	movs	r0, #1
100564b0:	b2c5      	uxtb	r5, r0
100564b2:	3411      	adds	r4, #17
100564b4:	2d00      	cmp	r5, #0
100564b6:	d011      	beq.n	100564dc <GAP_LimDiscTimeoutcb+0x44>
100564b8:	7820      	ldrb	r0, [r4, #0]
100564ba:	2800      	cmp	r0, #0
100564bc:	d00b      	beq.n	100564d6 <GAP_LimDiscTimeoutcb+0x3e>
100564be:	4620      	mov	r0, r4
100564c0:	380f      	subs	r0, #15
100564c2:	7800      	ldrb	r0, [r0, #0]
100564c4:	0780      	lsls	r0, r0, #30
100564c6:	d506      	bpl.n	100564d6 <GAP_LimDiscTimeoutcb+0x3e>
100564c8:	7860      	ldrb	r0, [r4, #1]
100564ca:	466a      	mov	r2, sp
100564cc:	7010      	strb	r0, [r2, #0]
100564ce:	2000      	movs	r0, #0
100564d0:	2101      	movs	r1, #1
100564d2:	f7fe fb2b 	bl	10054b2c <GAP_set_advertising_enable_ucfg_weak>
100564d6:	3414      	adds	r4, #20
100564d8:	1e6d      	subs	r5, r5, #1
100564da:	e7eb      	b.n	100564b4 <GAP_LimDiscTimeoutcb+0x1c>
100564dc:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100564de:	46c0      	nop			@ (mov r8, r8)

100564e0 <__arm_cp.15_0>:
100564e0:	2000241c 	.word	0x2000241c

100564e4 <__arm_cp.15_1>:
100564e4:	2000247c 	.word	0x2000247c

100564e8 <GAP_stop_discoverability>:
100564e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100564ea:	4604      	mov	r4, r0
100564ec:	4668      	mov	r0, sp
100564ee:	2500      	movs	r5, #0
100564f0:	7005      	strb	r5, [r0, #0]
100564f2:	f009 fdd1 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
100564f6:	2800      	cmp	r0, #0
100564f8:	d005      	beq.n	10056506 <GAP_stop_discoverability+0x1e>
100564fa:	466d      	mov	r5, sp
100564fc:	4620      	mov	r0, r4
100564fe:	4629      	mov	r1, r5
10056500:	f000 f9fe 	bl	10056900 <GAP_get_advertising_set_index>
10056504:	782d      	ldrb	r5, [r5, #0]
10056506:	f009 fdc7 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
1005650a:	2800      	cmp	r0, #0
1005650c:	d002      	beq.n	10056514 <GAP_stop_discoverability+0x2c>
1005650e:	4826      	ldr	r0, [pc, #152]	@ (100565a8 <__arm_cp.18_0>)
10056510:	7e83      	ldrb	r3, [r0, #26]
10056512:	e000      	b.n	10056516 <GAP_stop_discoverability+0x2e>
10056514:	2301      	movs	r3, #1
10056516:	2614      	movs	r6, #20
10056518:	4375      	muls	r5, r6
1005651a:	4f24      	ldr	r7, [pc, #144]	@ (100565ac <__arm_cp.18_1>)
1005651c:	6838      	ldr	r0, [r7, #0]
1005651e:	6d41      	ldr	r1, [r0, #84]	@ 0x54
10056520:	194c      	adds	r4, r1, r5
10056522:	78a5      	ldrb	r5, [r4, #2]
10056524:	2202      	movs	r2, #2
10056526:	402a      	ands	r2, r5
10056528:	d002      	beq.n	10056530 <GAP_stop_discoverability+0x48>
1005652a:	1ca4      	adds	r4, r4, #2
1005652c:	2500      	movs	r5, #0
1005652e:	7025      	strb	r5, [r4, #0]
10056530:	3111      	adds	r1, #17
10056532:	b2db      	uxtb	r3, r3
10056534:	2b00      	cmp	r3, #0
10056536:	d00a      	beq.n	1005654e <GAP_stop_discoverability+0x66>
10056538:	780c      	ldrb	r4, [r1, #0]
1005653a:	2c00      	cmp	r4, #0
1005653c:	d004      	beq.n	10056548 <GAP_stop_discoverability+0x60>
1005653e:	460c      	mov	r4, r1
10056540:	3c0f      	subs	r4, #15
10056542:	7824      	ldrb	r4, [r4, #0]
10056544:	07a4      	lsls	r4, r4, #30
10056546:	d426      	bmi.n	10056596 <GAP_stop_discoverability+0xae>
10056548:	1e5b      	subs	r3, r3, #1
1005654a:	3114      	adds	r1, #20
1005654c:	e7f2      	b.n	10056534 <GAP_stop_discoverability+0x4c>
1005654e:	2a00      	cmp	r2, #0
10056550:	d021      	beq.n	10056596 <GAP_stop_discoverability+0xae>
10056552:	2400      	movs	r4, #0
10056554:	4621      	mov	r1, r4
10056556:	f00c fb80 	bl	10062c5a <CST_stop>
1005655a:	4815      	ldr	r0, [pc, #84]	@ (100565b0 <__arm_cp.18_2>)
1005655c:	6800      	ldr	r0, [r0, #0]
1005655e:	214e      	movs	r1, #78	@ 0x4e
10056560:	5c40      	ldrb	r0, [r0, r1]
10056562:	07c0      	lsls	r0, r0, #31
10056564:	d017      	beq.n	10056596 <GAP_stop_discoverability+0xae>
10056566:	4813      	ldr	r0, [pc, #76]	@ (100565b4 <__arm_cp.18_3>)
10056568:	6800      	ldr	r0, [r0, #0]
1005656a:	6980      	ldr	r0, [r0, #24]
1005656c:	2244      	movs	r2, #68	@ 0x44
1005656e:	2502      	movs	r5, #2
10056570:	4629      	mov	r1, r5
10056572:	462b      	mov	r3, r5
10056574:	f7fe ffb4 	bl	100554e0 <aci_event_fifo_push_header>
10056578:	2800      	cmp	r0, #0
1005657a:	d00c      	beq.n	10056596 <GAP_stop_discoverability+0xae>
1005657c:	4601      	mov	r1, r0
1005657e:	7185      	strb	r5, [r0, #6]
10056580:	71c4      	strb	r4, [r0, #7]
10056582:	7204      	strb	r4, [r0, #8]
10056584:	20ff      	movs	r0, #255	@ 0xff
10056586:	7148      	strb	r0, [r1, #5]
10056588:	2082      	movs	r0, #130	@ 0x82
1005658a:	7108      	strb	r0, [r1, #4]
1005658c:	2004      	movs	r0, #4
1005658e:	7248      	strb	r0, [r1, #9]
10056590:	4628      	mov	r0, r5
10056592:	f7ff f842 	bl	1005561a <aci_event_fifo_push>
10056596:	4668      	mov	r0, sp
10056598:	7800      	ldrb	r0, [r0, #0]
1005659a:	4346      	muls	r6, r0
1005659c:	6838      	ldr	r0, [r7, #0]
1005659e:	6d40      	ldr	r0, [r0, #84]	@ 0x54
100565a0:	1980      	adds	r0, r0, r6
100565a2:	2100      	movs	r1, #0
100565a4:	7441      	strb	r1, [r0, #17]
100565a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100565a8 <__arm_cp.18_0>:
100565a8:	2000247c 	.word	0x2000247c

100565ac <__arm_cp.18_1>:
100565ac:	2000241c 	.word	0x2000241c

100565b0 <__arm_cp.18_2>:
100565b0:	20002468 	.word	0x20002468

100565b4 <__arm_cp.18_3>:
100565b4:	20002418 	.word	0x20002418

100565b8 <GAP_stop_privacy_timer>:
100565b8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100565ba:	4c0d      	ldr	r4, [pc, #52]	@ (100565f0 <__arm_cp.19_0>)
100565bc:	6825      	ldr	r5, [r4, #0]
100565be:	205c      	movs	r0, #92	@ 0x5c
100565c0:	5c28      	ldrb	r0, [r5, r0]
100565c2:	0680      	lsls	r0, r0, #26
100565c4:	0f80      	lsrs	r0, r0, #30
100565c6:	d012      	beq.n	100565ee <GAP_stop_privacy_timer+0x36>
100565c8:	355c      	adds	r5, #92	@ 0x5c
100565ca:	78e8      	ldrb	r0, [r5, #3]
100565cc:	2602      	movs	r6, #2
100565ce:	4030      	ands	r0, r6
100565d0:	d10d      	bne.n	100565ee <GAP_stop_privacy_timer+0x36>
100565d2:	a801      	add	r0, sp, #4
100565d4:	4669      	mov	r1, sp
100565d6:	f000 fadf 	bl	10056b98 <GAP_check_adv_status>
100565da:	7869      	ldrb	r1, [r5, #1]
100565dc:	4301      	orrs	r1, r0
100565de:	d106      	bne.n	100565ee <GAP_stop_privacy_timer+0x36>
100565e0:	78e8      	ldrb	r0, [r5, #3]
100565e2:	4330      	orrs	r0, r6
100565e4:	70e8      	strb	r0, [r5, #3]
100565e6:	6820      	ldr	r0, [r4, #0]
100565e8:	2101      	movs	r1, #1
100565ea:	f00c fb36 	bl	10062c5a <CST_stop>
100565ee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100565f0 <__arm_cp.19_0>:
100565f0:	2000241c 	.word	0x2000241c

100565f4 <GAP_peripheral_connection_complete_handler_ucfg_weak>:
100565f4:	b580      	push	{r7, lr}
100565f6:	2000      	movs	r0, #0
100565f8:	f7ff ff76 	bl	100564e8 <GAP_stop_discoverability>
100565fc:	f7ff ffdc 	bl	100565b8 <GAP_stop_privacy_timer>
10056600:	bd80      	pop	{r7, pc}

10056602 <GAP_hci_disconnection_complete_evt_hndl>:
10056602:	4770      	bx	lr

10056604 <GAP_hci_le_connection_complete_evt_hndl>:
10056604:	b580      	push	{r7, lr}
10056606:	2a00      	cmp	r2, #0
10056608:	d003      	beq.n	10056612 <GAP_hci_le_connection_complete_evt_hndl+0xe>
1005660a:	4608      	mov	r0, r1
1005660c:	f7ff fff2 	bl	100565f4 <GAP_peripheral_connection_complete_handler_ucfg_weak>
10056610:	bd80      	pop	{r7, pc}
10056612:	f7ff fd23 	bl	1005605c <GAP_central_connection_complete_handler_ucfg_weak>
10056616:	bd80      	pop	{r7, pc}

10056618 <GapIsPrivacySupported>:
10056618:	4804      	ldr	r0, [pc, #16]	@ (1005662c <__arm_cp.26_0>)
1005661a:	6800      	ldr	r0, [r0, #0]
1005661c:	215c      	movs	r1, #92	@ 0x5c
1005661e:	5c41      	ldrb	r1, [r0, r1]
10056620:	2030      	movs	r0, #48	@ 0x30
10056622:	4008      	ands	r0, r1
10056624:	1e41      	subs	r1, r0, #1
10056626:	4188      	sbcs	r0, r1
10056628:	4770      	bx	lr
1005662a:	46c0      	nop			@ (mov r8, r8)

1005662c <__arm_cp.26_0>:
1005662c:	2000241c 	.word	0x2000241c

10056630 <GAP_get_identity_address_type>:
10056630:	4803      	ldr	r0, [pc, #12]	@ (10056640 <__arm_cp.28_0>)
10056632:	6800      	ldr	r0, [r0, #0]
10056634:	215f      	movs	r1, #95	@ 0x5f
10056636:	5c41      	ldrb	r1, [r0, r1]
10056638:	2001      	movs	r0, #1
1005663a:	4008      	ands	r0, r1
1005663c:	4770      	bx	lr
1005663e:	46c0      	nop			@ (mov r8, r8)

10056640 <__arm_cp.28_0>:
10056640:	2000241c 	.word	0x2000241c

10056644 <GAP_get_own_address_type>:
10056644:	4808      	ldr	r0, [pc, #32]	@ (10056668 <__arm_cp.29_0>)
10056646:	6800      	ldr	r0, [r0, #0]
10056648:	215c      	movs	r1, #92	@ 0x5c
1005664a:	5c41      	ldrb	r1, [r0, r1]
1005664c:	06ca      	lsls	r2, r1, #27
1005664e:	d406      	bmi.n	1005665e <GAP_get_own_address_type+0x1a>
10056650:	0689      	lsls	r1, r1, #26
10056652:	d406      	bmi.n	10056662 <GAP_get_own_address_type+0x1e>
10056654:	305c      	adds	r0, #92	@ 0x5c
10056656:	78c1      	ldrb	r1, [r0, #3]
10056658:	2001      	movs	r0, #1
1005665a:	4008      	ands	r0, r1
1005665c:	4770      	bx	lr
1005665e:	2001      	movs	r0, #1
10056660:	4770      	bx	lr
10056662:	2003      	movs	r0, #3
10056664:	4770      	bx	lr
10056666:	46c0      	nop			@ (mov r8, r8)

10056668 <__arm_cp.29_0>:
10056668:	2000241c 	.word	0x2000241c

1005666c <GAP_enable_controller_privacy_ucfg_weak>:
1005666c:	2012      	movs	r0, #18
1005666e:	4770      	bx	lr

10056670 <GAP_Terminate_Link>:
10056670:	b580      	push	{r7, lr}
10056672:	f004 fd17 	bl	1005b0a4 <llc_conn_disconnect_link>
10056676:	bd80      	pop	{r7, pc}

10056678 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>:
10056678:	b580      	push	{r7, lr}
1005667a:	07c0      	lsls	r0, r0, #31
1005667c:	d101      	bne.n	10056682 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak+0xa>
1005667e:	2000      	movs	r0, #0
10056680:	bd80      	pop	{r7, pc}
10056682:	4608      	mov	r0, r1
10056684:	4611      	mov	r1, r2
10056686:	f003 f966 	bl	10059956 <hci_le_add_device_to_filter_accept_list>
1005668a:	bd80      	pop	{r7, pc}

1005668c <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>:
1005668c:	b580      	push	{r7, lr}
1005668e:	07c0      	lsls	r0, r0, #31
10056690:	d101      	bne.n	10056696 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak+0xa>
10056692:	2000      	movs	r0, #0
10056694:	bd80      	pop	{r7, pc}
10056696:	f003 f95a 	bl	1005994e <hci_le_clear_filter_accept_list>
1005669a:	bd80      	pop	{r7, pc}

1005669c <GAP_configure_filter_accept_and_resolving_list>:
1005669c:	b570      	push	{r4, r5, r6, lr}
1005669e:	b094      	sub	sp, #80	@ 0x50
100566a0:	4604      	mov	r4, r0
100566a2:	f7ff fff3 	bl	1005668c <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>
100566a6:	4606      	mov	r6, r0
100566a8:	466d      	mov	r5, sp
100566aa:	353e      	adds	r5, #62	@ 0x3e
100566ac:	4668      	mov	r0, sp
100566ae:	f00b f8d3 	bl	10061858 <sdb_sap_read_security_record_sequential>
100566b2:	2800      	cmp	r0, #0
100566b4:	d10b      	bne.n	100566ce <GAP_configure_filter_accept_and_resolving_list+0x32>
100566b6:	2e00      	cmp	r6, #0
100566b8:	d109      	bne.n	100566ce <GAP_configure_filter_accept_and_resolving_list+0x32>
100566ba:	4668      	mov	r0, sp
100566bc:	7840      	ldrb	r0, [r0, #1]
100566be:	2101      	movs	r1, #1
100566c0:	4001      	ands	r1, r0
100566c2:	4620      	mov	r0, r4
100566c4:	462a      	mov	r2, r5
100566c6:	f7ff ffd7 	bl	10056678 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>
100566ca:	4606      	mov	r6, r0
100566cc:	e7ee      	b.n	100566ac <GAP_configure_filter_accept_and_resolving_list+0x10>
100566ce:	b2f0      	uxtb	r0, r6
100566d0:	b014      	add	sp, #80	@ 0x50
100566d2:	bd70      	pop	{r4, r5, r6, pc}

100566d4 <GAP_set_controller_random_address_ucfg_weak>:
100566d4:	b580      	push	{r7, lr}
100566d6:	f003 f851 	bl	1005977c <hci_le_set_random_address>
100566da:	bd80      	pop	{r7, pc}

100566dc <GAP_init_advertising_sets_ucfg_weak>:
100566dc:	2000      	movs	r0, #0
100566de:	4770      	bx	lr

100566e0 <GAP_start_privacy_timer>:
100566e0:	b5b0      	push	{r4, r5, r7, lr}
100566e2:	4602      	mov	r2, r0
100566e4:	4810      	ldr	r0, [pc, #64]	@ (10056728 <__arm_cp.47_0>)
100566e6:	6800      	ldr	r0, [r0, #0]
100566e8:	4605      	mov	r5, r0
100566ea:	355a      	adds	r5, #90	@ 0x5a
100566ec:	2900      	cmp	r1, #0
100566ee:	d108      	bne.n	10056702 <GAP_start_privacy_timer+0x22>
100566f0:	78a9      	ldrb	r1, [r5, #2]
100566f2:	0689      	lsls	r1, r1, #26
100566f4:	2400      	movs	r4, #0
100566f6:	0f89      	lsrs	r1, r1, #30
100566f8:	d014      	beq.n	10056724 <GAP_start_privacy_timer+0x44>
100566fa:	7969      	ldrb	r1, [r5, #5]
100566fc:	2302      	movs	r3, #2
100566fe:	400b      	ands	r3, r1
10056700:	d010      	beq.n	10056724 <GAP_start_privacy_timer+0x44>
10056702:	2a00      	cmp	r2, #0
10056704:	d001      	beq.n	1005670a <GAP_start_privacy_timer+0x2a>
10056706:	4b09      	ldr	r3, [pc, #36]	@ (1005672c <__arm_cp.47_1>)
10056708:	e003      	b.n	10056712 <GAP_start_privacy_timer+0x32>
1005670a:	217d      	movs	r1, #125	@ 0x7d
1005670c:	00c9      	lsls	r1, r1, #3
1005670e:	882b      	ldrh	r3, [r5, #0]
10056710:	434b      	muls	r3, r1
10056712:	2401      	movs	r4, #1
10056714:	4621      	mov	r1, r4
10056716:	4622      	mov	r2, r4
10056718:	f00c fad5 	bl	10062cc6 <CST_start>
1005671c:	7968      	ldrb	r0, [r5, #5]
1005671e:	21fd      	movs	r1, #253	@ 0xfd
10056720:	4001      	ands	r1, r0
10056722:	7169      	strb	r1, [r5, #5]
10056724:	4620      	mov	r0, r4
10056726:	bdb0      	pop	{r4, r5, r7, pc}

10056728 <__arm_cp.47_0>:
10056728:	2000241c 	.word	0x2000241c

1005672c <__arm_cp.47_1>:
1005672c:	00007530 	.word	0x00007530

10056730 <GAP_generate_new_rpa>:
10056730:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10056732:	4d0d      	ldr	r5, [pc, #52]	@ (10056768 <__arm_cp.48_0>)
10056734:	6828      	ldr	r0, [r5, #0]
10056736:	215f      	movs	r1, #95	@ 0x5f
10056738:	5c40      	ldrb	r0, [r0, r1]
1005673a:	0780      	lsls	r0, r0, #30
1005673c:	d401      	bmi.n	10056742 <GAP_generate_new_rpa+0x12>
1005673e:	240c      	movs	r4, #12
10056740:	e00f      	b.n	10056762 <GAP_generate_new_rpa+0x32>
10056742:	466c      	mov	r4, sp
10056744:	4620      	mov	r0, r4
10056746:	f00b f997 	bl	10061a78 <smp_sap_crt_generate_rpa>
1005674a:	4620      	mov	r0, r4
1005674c:	f7ff ffc2 	bl	100566d4 <GAP_set_controller_random_address_ucfg_weak>
10056750:	4604      	mov	r4, r0
10056752:	2800      	cmp	r0, #0
10056754:	d105      	bne.n	10056762 <GAP_generate_new_rpa+0x32>
10056756:	6828      	ldr	r0, [r5, #0]
10056758:	3066      	adds	r0, #102	@ 0x66
1005675a:	4669      	mov	r1, sp
1005675c:	2206      	movs	r2, #6
1005675e:	f7fc f973 	bl	10052a48 <BLEPLAT_MemCpy>
10056762:	4620      	mov	r0, r4
10056764:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056766:	46c0      	nop			@ (mov r8, r8)

10056768 <__arm_cp.48_0>:
10056768:	2000241c 	.word	0x2000241c

1005676c <GAP_get_current_address>:
1005676c:	b5b0      	push	{r4, r5, r7, lr}
1005676e:	460d      	mov	r5, r1
10056770:	4604      	mov	r4, r0
10056772:	480f      	ldr	r0, [pc, #60]	@ (100567b0 <__arm_cp.49_0>)
10056774:	6800      	ldr	r0, [r0, #0]
10056776:	215c      	movs	r1, #92	@ 0x5c
10056778:	5c40      	ldrb	r0, [r0, r1]
1005677a:	0680      	lsls	r0, r0, #26
1005677c:	0f80      	lsrs	r0, r0, #30
1005677e:	d005      	beq.n	1005678c <GAP_get_current_address+0x20>
10056780:	2001      	movs	r0, #1
10056782:	7028      	strb	r0, [r5, #0]
10056784:	4620      	mov	r0, r4
10056786:	f000 f815 	bl	100567b4 <GAP_get_rpa>
1005678a:	e00e      	b.n	100567aa <GAP_get_current_address+0x3e>
1005678c:	f7ff ff5a 	bl	10056644 <GAP_get_own_address_type>
10056790:	2800      	cmp	r0, #0
10056792:	d005      	beq.n	100567a0 <GAP_get_current_address+0x34>
10056794:	2001      	movs	r0, #1
10056796:	7028      	strb	r0, [r5, #0]
10056798:	4620      	mov	r0, r4
1005679a:	f000 f81f 	bl	100567dc <GAP_get_static_random_address>
1005679e:	e004      	b.n	100567aa <GAP_get_current_address+0x3e>
100567a0:	2000      	movs	r0, #0
100567a2:	7028      	strb	r0, [r5, #0]
100567a4:	4620      	mov	r0, r4
100567a6:	f000 f80f 	bl	100567c8 <GAP_get_public_address>
100567aa:	2000      	movs	r0, #0
100567ac:	bdb0      	pop	{r4, r5, r7, pc}
100567ae:	46c0      	nop			@ (mov r8, r8)

100567b0 <__arm_cp.49_0>:
100567b0:	2000241c 	.word	0x2000241c

100567b4 <GAP_get_rpa>:
100567b4:	b580      	push	{r7, lr}
100567b6:	4903      	ldr	r1, [pc, #12]	@ (100567c4 <__arm_cp.50_0>)
100567b8:	6809      	ldr	r1, [r1, #0]
100567ba:	3166      	adds	r1, #102	@ 0x66
100567bc:	2206      	movs	r2, #6
100567be:	f7fc f943 	bl	10052a48 <BLEPLAT_MemCpy>
100567c2:	bd80      	pop	{r7, pc}

100567c4 <__arm_cp.50_0>:
100567c4:	2000241c 	.word	0x2000241c

100567c8 <GAP_get_public_address>:
100567c8:	b580      	push	{r7, lr}
100567ca:	4903      	ldr	r1, [pc, #12]	@ (100567d8 <__arm_cp.51_0>)
100567cc:	6809      	ldr	r1, [r1, #0]
100567ce:	2206      	movs	r2, #6
100567d0:	f7fc f93a 	bl	10052a48 <BLEPLAT_MemCpy>
100567d4:	bd80      	pop	{r7, pc}
100567d6:	46c0      	nop			@ (mov r8, r8)

100567d8 <__arm_cp.51_0>:
100567d8:	20002414 	.word	0x20002414

100567dc <GAP_get_static_random_address>:
100567dc:	b580      	push	{r7, lr}
100567de:	4903      	ldr	r1, [pc, #12]	@ (100567ec <__arm_cp.52_0>)
100567e0:	6809      	ldr	r1, [r1, #0]
100567e2:	3160      	adds	r1, #96	@ 0x60
100567e4:	2206      	movs	r2, #6
100567e6:	f7fc f92f 	bl	10052a48 <BLEPLAT_MemCpy>
100567ea:	bd80      	pop	{r7, pc}

100567ec <__arm_cp.52_0>:
100567ec:	2000241c 	.word	0x2000241c

100567f0 <GAP_enable_rpa_change_at_timeout>:
100567f0:	4902      	ldr	r1, [pc, #8]	@ (100567fc <__arm_cp.53_0>)
100567f2:	6809      	ldr	r1, [r1, #0]
100567f4:	226c      	movs	r2, #108	@ 0x6c
100567f6:	5488      	strb	r0, [r1, r2]
100567f8:	4770      	bx	lr
100567fa:	46c0      	nop			@ (mov r8, r8)

100567fc <__arm_cp.53_0>:
100567fc:	2000241c 	.word	0x2000241c

10056800 <GAP_check_discoverability_mode>:
10056800:	1e43      	subs	r3, r0, #1
10056802:	2b02      	cmp	r3, #2
10056804:	d309      	bcc.n	1005681a <GAP_check_discoverability_mode+0x1a>
10056806:	2800      	cmp	r0, #0
10056808:	d00c      	beq.n	10056824 <GAP_check_discoverability_mode+0x24>
1005680a:	2803      	cmp	r0, #3
1005680c:	d109      	bne.n	10056822 <GAP_check_discoverability_mode+0x22>
1005680e:	2001      	movs	r0, #1
10056810:	4001      	ands	r1, r0
10056812:	4249      	negs	r1, r1
10056814:	2012      	movs	r0, #18
10056816:	4008      	ands	r0, r1
10056818:	4770      	bx	lr
1005681a:	2a00      	cmp	r2, #0
1005681c:	d101      	bne.n	10056822 <GAP_check_discoverability_mode+0x22>
1005681e:	4610      	mov	r0, r2
10056820:	4770      	bx	lr
10056822:	2012      	movs	r0, #18
10056824:	4770      	bx	lr
	...

10056828 <GAP_advEvtProp_to_advType>:
10056828:	4601      	mov	r1, r0
1005682a:	3910      	subs	r1, #16
1005682c:	2905      	cmp	r1, #5
1005682e:	d80a      	bhi.n	10056846 <GAP_advEvtProp_to_advType+0x1e>
10056830:	2000      	movs	r0, #0
10056832:	46c0      	nop			@ (mov r8, r8)
10056834:	4479      	add	r1, pc
10056836:	7909      	ldrb	r1, [r1, #4]
10056838:	0049      	lsls	r1, r1, #1
1005683a:	448f      	add	pc, r1
1005683c:	090a0802 	.word	0x090a0802
10056840:	0c08      	.short	0x0c08
10056842:	2003      	movs	r0, #3
10056844:	4770      	bx	lr
10056846:	281d      	cmp	r0, #29
10056848:	d101      	bne.n	1005684e <GAP_advEvtProp_to_advType+0x26>
1005684a:	2001      	movs	r0, #1
1005684c:	4770      	bx	lr
1005684e:	2005      	movs	r0, #5
10056850:	4770      	bx	lr
10056852:	2002      	movs	r0, #2
10056854:	4770      	bx	lr
10056856:	2004      	movs	r0, #4
10056858:	4770      	bx	lr
	...

1005685c <GAP_set_legacy_advertising_configuration>:
1005685c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005685e:	b08b      	sub	sp, #44	@ 0x2c
10056860:	4615      	mov	r5, r2
10056862:	460f      	mov	r7, r1
10056864:	4601      	mov	r1, r0
10056866:	06fa      	lsls	r2, r7, #27
10056868:	2012      	movs	r0, #18
1005686a:	2a00      	cmp	r2, #0
1005686c:	d53f      	bpl.n	100568ee <GAP_set_legacy_advertising_configuration+0x92>
1005686e:	461c      	mov	r4, r3
10056870:	2301      	movs	r3, #1
10056872:	039a      	lsls	r2, r3, #14
10056874:	4295      	cmp	r5, r2
10056876:	d83a      	bhi.n	100568ee <GAP_set_legacy_advertising_configuration+0x92>
10056878:	4294      	cmp	r4, r2
1005687a:	d838      	bhi.n	100568ee <GAP_set_legacy_advertising_configuration+0x92>
1005687c:	930a      	str	r3, [sp, #40]	@ 0x28
1005687e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10056880:	9009      	str	r0, [sp, #36]	@ 0x24
10056882:	9812      	ldr	r0, [sp, #72]	@ 0x48
10056884:	9008      	str	r0, [sp, #32]
10056886:	9811      	ldr	r0, [sp, #68]	@ 0x44
10056888:	9006      	str	r0, [sp, #24]
1005688a:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005688c:	9007      	str	r0, [sp, #28]
1005688e:	4819      	ldr	r0, [pc, #100]	@ (100568f4 <__arm_cp.2_0>)
10056890:	6800      	ldr	r0, [r0, #0]
10056892:	6d46      	ldr	r6, [r0, #84]	@ 0x54
10056894:	2000      	movs	r0, #0
10056896:	9004      	str	r0, [sp, #16]
10056898:	7070      	strb	r0, [r6, #1]
1005689a:	7031      	strb	r1, [r6, #0]
1005689c:	f7ff fed2 	bl	10056644 <GAP_get_own_address_type>
100568a0:	9005      	str	r0, [sp, #20]
100568a2:	4638      	mov	r0, r7
100568a4:	f7ff ffc0 	bl	10056828 <GAP_advEvtProp_to_advType>
100568a8:	4602      	mov	r2, r0
100568aa:	7870      	ldrb	r0, [r6, #1]
100568ac:	2120      	movs	r1, #32
100568ae:	4301      	orrs	r1, r0
100568b0:	7071      	strb	r1, [r6, #1]
100568b2:	2a04      	cmp	r2, #4
100568b4:	d808      	bhi.n	100568c8 <GAP_set_legacy_advertising_configuration+0x6c>
100568b6:	2117      	movs	r1, #23
100568b8:	40d1      	lsrs	r1, r2
100568ba:	07c9      	lsls	r1, r1, #31
100568bc:	d004      	beq.n	100568c8 <GAP_set_legacy_advertising_configuration+0x6c>
100568be:	b251      	sxtb	r1, r2
100568c0:	a30d      	add	r3, pc, #52	@ (adr r3, 100568f8 <__arm_cp.2_0+0x4>)
100568c2:	5c59      	ldrb	r1, [r3, r1]
100568c4:	4308      	orrs	r0, r1
100568c6:	7070      	strb	r0, [r6, #1]
100568c8:	9806      	ldr	r0, [sp, #24]
100568ca:	9000      	str	r0, [sp, #0]
100568cc:	9808      	ldr	r0, [sp, #32]
100568ce:	9001      	str	r0, [sp, #4]
100568d0:	9807      	ldr	r0, [sp, #28]
100568d2:	9002      	str	r0, [sp, #8]
100568d4:	9809      	ldr	r0, [sp, #36]	@ 0x24
100568d6:	9003      	str	r0, [sp, #12]
100568d8:	b2a8      	uxth	r0, r5
100568da:	b2a1      	uxth	r1, r4
100568dc:	9b05      	ldr	r3, [sp, #20]
100568de:	f002 fe8d 	bl	100595fc <hci_le_set_advertising_parameters>
100568e2:	2800      	cmp	r0, #0
100568e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
100568e6:	d102      	bne.n	100568ee <GAP_set_legacy_advertising_configuration+0x92>
100568e8:	9804      	ldr	r0, [sp, #16]
100568ea:	74b0      	strb	r0, [r6, #18]
100568ec:	7431      	strb	r1, [r6, #16]
100568ee:	b00b      	add	sp, #44	@ 0x2c
100568f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100568f2:	46c0      	nop			@ (mov r8, r8)

100568f4 <__arm_cp.2_0>:
100568f4:	2000241c 	.word	0x2000241c
100568f8:	70287028 	.word	0x70287028
100568fc:	00000030 	.word	0x00000030

10056900 <GAP_get_advertising_set_index>:
10056900:	b570      	push	{r4, r5, r6, lr}
10056902:	4602      	mov	r2, r0
10056904:	480b      	ldr	r0, [pc, #44]	@ (10056934 <__arm_cp.4_0>)
10056906:	7e84      	ldrb	r4, [r0, #26]
10056908:	480b      	ldr	r0, [pc, #44]	@ (10056938 <__arm_cp.4_1>)
1005690a:	6800      	ldr	r0, [r0, #0]
1005690c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
1005690e:	3510      	adds	r5, #16
10056910:	2000      	movs	r0, #0
10056912:	4603      	mov	r3, r0
10056914:	429c      	cmp	r4, r3
10056916:	d008      	beq.n	1005692a <GAP_get_advertising_set_index+0x2a>
10056918:	782e      	ldrb	r6, [r5, #0]
1005691a:	2e00      	cmp	r6, #0
1005691c:	d008      	beq.n	10056930 <GAP_get_advertising_set_index+0x30>
1005691e:	78ae      	ldrb	r6, [r5, #2]
10056920:	4296      	cmp	r6, r2
10056922:	d004      	beq.n	1005692e <GAP_get_advertising_set_index+0x2e>
10056924:	3514      	adds	r5, #20
10056926:	1c5b      	adds	r3, r3, #1
10056928:	e7f4      	b.n	10056914 <GAP_get_advertising_set_index+0x14>
1005692a:	4623      	mov	r3, r4
1005692c:	e000      	b.n	10056930 <GAP_get_advertising_set_index+0x30>
1005692e:	2001      	movs	r0, #1
10056930:	700b      	strb	r3, [r1, #0]
10056932:	bd70      	pop	{r4, r5, r6, pc}

10056934 <__arm_cp.4_0>:
10056934:	2000247c 	.word	0x2000247c

10056938 <__arm_cp.4_1>:
10056938:	2000241c 	.word	0x2000241c

1005693c <GAP_set_legacy_advertising_enable>:
1005693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005693e:	4604      	mov	r4, r0
10056940:	4819      	ldr	r0, [pc, #100]	@ (100569a8 <__arm_cp.5_0>)
10056942:	6800      	ldr	r0, [r0, #0]
10056944:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10056946:	2c00      	cmp	r4, #0
10056948:	d00d      	beq.n	10056966 <GAP_set_legacy_advertising_enable+0x2a>
1005694a:	7c38      	ldrb	r0, [r7, #16]
1005694c:	2800      	cmp	r0, #0
1005694e:	d023      	beq.n	10056998 <GAP_set_legacy_advertising_enable+0x5c>
10056950:	2000      	movs	r0, #0
10056952:	4601      	mov	r1, r0
10056954:	f000 f82a 	bl	100569ac <GAP_check_flags>
10056958:	4605      	mov	r5, r0
1005695a:	2800      	cmp	r0, #0
1005695c:	d122      	bne.n	100569a4 <GAP_set_legacy_advertising_enable+0x68>
1005695e:	f7ff fee7 	bl	10056730 <GAP_generate_new_rpa>
10056962:	4606      	mov	r6, r0
10056964:	e000      	b.n	10056968 <GAP_set_legacy_advertising_enable+0x2c>
10056966:	260c      	movs	r6, #12
10056968:	4620      	mov	r0, r4
1005696a:	f002 fea7 	bl	100596bc <hci_le_set_advertising_enable>
1005696e:	4605      	mov	r5, r0
10056970:	2800      	cmp	r0, #0
10056972:	d117      	bne.n	100569a4 <GAP_set_legacy_advertising_enable+0x68>
10056974:	2500      	movs	r5, #0
10056976:	4620      	mov	r0, r4
10056978:	4629      	mov	r1, r5
1005697a:	462a      	mov	r2, r5
1005697c:	f000 f870 	bl	10056a60 <GAP_set_discoverability_mode>
10056980:	2c00      	cmp	r4, #0
10056982:	d00b      	beq.n	1005699c <GAP_set_legacy_advertising_enable+0x60>
10056984:	2001      	movs	r0, #1
10056986:	7478      	strb	r0, [r7, #17]
10056988:	2e00      	cmp	r6, #0
1005698a:	d10b      	bne.n	100569a4 <GAP_set_legacy_advertising_enable+0x68>
1005698c:	2500      	movs	r5, #0
1005698e:	4628      	mov	r0, r5
10056990:	4629      	mov	r1, r5
10056992:	f7ff fea5 	bl	100566e0 <GAP_start_privacy_timer>
10056996:	e005      	b.n	100569a4 <GAP_set_legacy_advertising_enable+0x68>
10056998:	25d3      	movs	r5, #211	@ 0xd3
1005699a:	e003      	b.n	100569a4 <GAP_set_legacy_advertising_enable+0x68>
1005699c:	2500      	movs	r5, #0
1005699e:	747d      	strb	r5, [r7, #17]
100569a0:	f7ff fe0a 	bl	100565b8 <GAP_stop_privacy_timer>
100569a4:	4628      	mov	r0, r5
100569a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100569a8 <__arm_cp.5_0>:
100569a8:	2000241c 	.word	0x2000241c

100569ac <GAP_check_flags>:
100569ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100569ae:	4a28      	ldr	r2, [pc, #160]	@ (10056a50 <__arm_cp.6_0>)
100569b0:	7e92      	ldrb	r2, [r2, #26]
100569b2:	2512      	movs	r5, #18
100569b4:	428a      	cmp	r2, r1
100569b6:	d925      	bls.n	10056a04 <GAP_check_flags+0x58>
100569b8:	2800      	cmp	r0, #0
100569ba:	d100      	bne.n	100569be <GAP_check_flags+0x12>
100569bc:	4601      	mov	r1, r0
100569be:	2214      	movs	r2, #20
100569c0:	434a      	muls	r2, r1
100569c2:	4824      	ldr	r0, [pc, #144]	@ (10056a54 <__arm_cp.6_1>)
100569c4:	6800      	ldr	r0, [r0, #0]
100569c6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
100569c8:	1899      	adds	r1, r3, r2
100569ca:	784c      	ldrb	r4, [r1, #1]
100569cc:	06a0      	lsls	r0, r4, #26
100569ce:	0fc6      	lsrs	r6, r0, #31
100569d0:	2000      	movs	r0, #0
100569d2:	2e00      	cmp	r6, #0
100569d4:	d002      	beq.n	100569dc <GAP_check_flags+0x30>
100569d6:	2710      	movs	r7, #16
100569d8:	4027      	ands	r7, r4
100569da:	d114      	bne.n	10056a06 <GAP_check_flags+0x5a>
100569dc:	2e00      	cmp	r6, #0
100569de:	d102      	bne.n	100569e6 <GAP_check_flags+0x3a>
100569e0:	2608      	movs	r6, #8
100569e2:	4034      	ands	r4, r6
100569e4:	d10f      	bne.n	10056a06 <GAP_check_flags+0x5a>
100569e6:	5c9e      	ldrb	r6, [r3, r2]
100569e8:	684c      	ldr	r4, [r1, #4]
100569ea:	8988      	ldrh	r0, [r1, #12]
100569ec:	4621      	mov	r1, r4
100569ee:	f000 f8bb 	bl	10056b68 <GAP_search_flags_index>
100569f2:	4919      	ldr	r1, [pc, #100]	@ (10056a58 <__arm_cp.6_2>)
100569f4:	4288      	cmp	r0, r1
100569f6:	d008      	beq.n	10056a0a <GAP_check_flags+0x5e>
100569f8:	1900      	adds	r0, r0, r4
100569fa:	7881      	ldrb	r1, [r0, #2]
100569fc:	0748      	lsls	r0, r1, #29
100569fe:	d40b      	bmi.n	10056a18 <GAP_check_flags+0x6c>
10056a00:	20d4      	movs	r0, #212	@ 0xd4
10056a02:	e000      	b.n	10056a06 <GAP_check_flags+0x5a>
10056a04:	4628      	mov	r0, r5
10056a06:	b2c0      	uxtb	r0, r0
10056a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056a0a:	2e03      	cmp	r6, #3
10056a0c:	4628      	mov	r0, r5
10056a0e:	d8fa      	bhi.n	10056a06 <GAP_check_flags+0x5a>
10056a10:	00f1      	lsls	r1, r6, #3
10056a12:	4812      	ldr	r0, [pc, #72]	@ (10056a5c <__arm_cp.6_3>)
10056a14:	40c8      	lsrs	r0, r1
10056a16:	e7f6      	b.n	10056a06 <GAP_check_flags+0x5a>
10056a18:	2e03      	cmp	r6, #3
10056a1a:	4628      	mov	r0, r5
10056a1c:	d8f3      	bhi.n	10056a06 <GAP_check_flags+0x5a>
10056a1e:	46c0      	nop			@ (mov r8, r8)
10056a20:	447e      	add	r6, pc
10056a22:	7936      	ldrb	r6, [r6, #4]
10056a24:	0076      	lsls	r6, r6, #1
10056a26:	44b7      	add	pc, r6
10056a28:	010d0601 	.word	0x010d0601
10056a2c:	2003      	movs	r0, #3
10056a2e:	4001      	ands	r1, r0
10056a30:	d105      	bne.n	10056a3e <GAP_check_flags+0x92>
10056a32:	4608      	mov	r0, r1
10056a34:	e7e7      	b.n	10056a06 <GAP_check_flags+0x5a>
10056a36:	2003      	movs	r0, #3
10056a38:	4001      	ands	r1, r0
10056a3a:	2901      	cmp	r1, #1
10056a3c:	d006      	beq.n	10056a4c <GAP_check_flags+0xa0>
10056a3e:	202b      	movs	r0, #43	@ 0x2b
10056a40:	43c0      	mvns	r0, r0
10056a42:	e7e0      	b.n	10056a06 <GAP_check_flags+0x5a>
10056a44:	2003      	movs	r0, #3
10056a46:	4001      	ands	r1, r0
10056a48:	2902      	cmp	r1, #2
10056a4a:	d1f8      	bne.n	10056a3e <GAP_check_flags+0x92>
10056a4c:	2000      	movs	r0, #0
10056a4e:	e7da      	b.n	10056a06 <GAP_check_flags+0x5a>

10056a50 <__arm_cp.6_0>:
10056a50:	2000247c 	.word	0x2000247c

10056a54 <__arm_cp.6_1>:
10056a54:	2000241c 	.word	0x2000241c

10056a58 <__arm_cp.6_2>:
10056a58:	0000ffff 	.word	0x0000ffff

10056a5c <__arm_cp.6_3>:
10056a5c:	00d4d400 	.word	0x00d4d400

10056a60 <GAP_set_discoverability_mode>:
10056a60:	b570      	push	{r4, r5, r6, lr}
10056a62:	4603      	mov	r3, r0
10056a64:	2900      	cmp	r1, #0
10056a66:	d100      	bne.n	10056a6a <GAP_set_discoverability_mode+0xa>
10056a68:	460a      	mov	r2, r1
10056a6a:	4829      	ldr	r0, [pc, #164]	@ (10056b10 <__arm_cp.7_0>)
10056a6c:	6800      	ldr	r0, [r0, #0]
10056a6e:	6d41      	ldr	r1, [r0, #84]	@ 0x54
10056a70:	2b01      	cmp	r3, #1
10056a72:	d10c      	bne.n	10056a8e <GAP_set_discoverability_mode+0x2e>
10056a74:	2314      	movs	r3, #20
10056a76:	4353      	muls	r3, r2
10056a78:	5cca      	ldrb	r2, [r1, r3]
10056a7a:	2a01      	cmp	r2, #1
10056a7c:	d033      	beq.n	10056ae6 <GAP_set_discoverability_mode+0x86>
10056a7e:	2a02      	cmp	r2, #2
10056a80:	d13e      	bne.n	10056b00 <GAP_set_discoverability_mode+0xa0>
10056a82:	18ca      	adds	r2, r1, r3
10056a84:	7894      	ldrb	r4, [r2, #2]
10056a86:	2004      	movs	r0, #4
10056a88:	4320      	orrs	r0, r4
10056a8a:	7090      	strb	r0, [r2, #2]
10056a8c:	e03a      	b.n	10056b04 <GAP_set_discoverability_mode+0xa4>
10056a8e:	2314      	movs	r3, #20
10056a90:	4353      	muls	r3, r2
10056a92:	18c9      	adds	r1, r1, r3
10056a94:	1c8e      	adds	r6, r1, #2
10056a96:	7889      	ldrb	r1, [r1, #2]
10056a98:	0789      	lsls	r1, r1, #30
10056a9a:	d521      	bpl.n	10056ae0 <GAP_set_discoverability_mode+0x80>
10056a9c:	2400      	movs	r4, #0
10056a9e:	4621      	mov	r1, r4
10056aa0:	f00c f8db 	bl	10062c5a <CST_stop>
10056aa4:	481b      	ldr	r0, [pc, #108]	@ (10056b14 <__arm_cp.7_1>)
10056aa6:	6800      	ldr	r0, [r0, #0]
10056aa8:	214e      	movs	r1, #78	@ 0x4e
10056aaa:	5c40      	ldrb	r0, [r0, r1]
10056aac:	07c0      	lsls	r0, r0, #31
10056aae:	d017      	beq.n	10056ae0 <GAP_set_discoverability_mode+0x80>
10056ab0:	4819      	ldr	r0, [pc, #100]	@ (10056b18 <__arm_cp.7_2>)
10056ab2:	6800      	ldr	r0, [r0, #0]
10056ab4:	6980      	ldr	r0, [r0, #24]
10056ab6:	2244      	movs	r2, #68	@ 0x44
10056ab8:	2502      	movs	r5, #2
10056aba:	4629      	mov	r1, r5
10056abc:	462b      	mov	r3, r5
10056abe:	f7fe fd0f 	bl	100554e0 <aci_event_fifo_push_header>
10056ac2:	2800      	cmp	r0, #0
10056ac4:	d00c      	beq.n	10056ae0 <GAP_set_discoverability_mode+0x80>
10056ac6:	4601      	mov	r1, r0
10056ac8:	7185      	strb	r5, [r0, #6]
10056aca:	71c4      	strb	r4, [r0, #7]
10056acc:	7204      	strb	r4, [r0, #8]
10056ace:	20ff      	movs	r0, #255	@ 0xff
10056ad0:	7148      	strb	r0, [r1, #5]
10056ad2:	2082      	movs	r0, #130	@ 0x82
10056ad4:	7108      	strb	r0, [r1, #4]
10056ad6:	2004      	movs	r0, #4
10056ad8:	7248      	strb	r0, [r1, #9]
10056ada:	4628      	mov	r0, r5
10056adc:	f7fe fd9d 	bl	1005561a <aci_event_fifo_push>
10056ae0:	2000      	movs	r0, #0
10056ae2:	7030      	strb	r0, [r6, #0]
10056ae4:	bd70      	pop	{r4, r5, r6, pc}
10056ae6:	18c9      	adds	r1, r1, r3
10056ae8:	784a      	ldrb	r2, [r1, #1]
10056aea:	788b      	ldrb	r3, [r1, #2]
10056aec:	4313      	orrs	r3, r2
10056aee:	2202      	movs	r2, #2
10056af0:	431a      	orrs	r2, r3
10056af2:	708a      	strb	r2, [r1, #2]
10056af4:	2100      	movs	r1, #0
10056af6:	2201      	movs	r2, #1
10056af8:	4b08      	ldr	r3, [pc, #32]	@ (10056b1c <__arm_cp.7_3>)
10056afa:	f00c f8e4 	bl	10062cc6 <CST_start>
10056afe:	bd70      	pop	{r4, r5, r6, pc}
10056b00:	18c8      	adds	r0, r1, r3
10056b02:	7880      	ldrb	r0, [r0, #2]
10056b04:	18c9      	adds	r1, r1, r3
10056b06:	784a      	ldrb	r2, [r1, #1]
10056b08:	4302      	orrs	r2, r0
10056b0a:	708a      	strb	r2, [r1, #2]
10056b0c:	bd70      	pop	{r4, r5, r6, pc}
10056b0e:	46c0      	nop			@ (mov r8, r8)

10056b10 <__arm_cp.7_0>:
10056b10:	2000241c 	.word	0x2000241c

10056b14 <__arm_cp.7_1>:
10056b14:	20002468 	.word	0x20002468

10056b18 <__arm_cp.7_2>:
10056b18:	20002418 	.word	0x20002418

10056b1c <__arm_cp.7_3>:
10056b1c:	0002bf20 	.word	0x0002bf20

10056b20 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
10056b20:	b580      	push	{r7, lr}
10056b22:	f000 f801 	bl	10056b28 <GAP_suspend_resume_active_advertising_sets_legacy>
10056b26:	bd80      	pop	{r7, pc}

10056b28 <GAP_suspend_resume_active_advertising_sets_legacy>:
10056b28:	b580      	push	{r7, lr}
10056b2a:	4905      	ldr	r1, [pc, #20]	@ (10056b40 <__arm_cp.11_0>)
10056b2c:	6809      	ldr	r1, [r1, #0]
10056b2e:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10056b30:	7c49      	ldrb	r1, [r1, #17]
10056b32:	2901      	cmp	r1, #1
10056b34:	d102      	bne.n	10056b3c <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
10056b36:	f002 fdc1 	bl	100596bc <hci_le_set_advertising_enable>
10056b3a:	bd80      	pop	{r7, pc}
10056b3c:	2000      	movs	r0, #0
10056b3e:	bd80      	pop	{r7, pc}

10056b40 <__arm_cp.11_0>:
10056b40:	2000241c 	.word	0x2000241c

10056b44 <GAP_set_legacy_advertising_data>:
10056b44:	b5b0      	push	{r4, r5, r7, lr}
10056b46:	460c      	mov	r4, r1
10056b48:	4605      	mov	r5, r0
10056b4a:	b2c0      	uxtb	r0, r0
10056b4c:	f008 fe9e 	bl	1005f88c <ll_set_legacy_advertising_data_ptr>
10056b50:	2800      	cmp	r0, #0
10056b52:	d000      	beq.n	10056b56 <GAP_set_legacy_advertising_data+0x12>
10056b54:	bdb0      	pop	{r4, r5, r7, pc}
10056b56:	4903      	ldr	r1, [pc, #12]	@ (10056b64 <__arm_cp.12_0>)
10056b58:	6809      	ldr	r1, [r1, #0]
10056b5a:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10056b5c:	818d      	strh	r5, [r1, #12]
10056b5e:	604c      	str	r4, [r1, #4]
10056b60:	bdb0      	pop	{r4, r5, r7, pc}
10056b62:	46c0      	nop			@ (mov r8, r8)

10056b64 <__arm_cp.12_0>:
10056b64:	2000241c 	.word	0x2000241c

10056b68 <GAP_search_flags_index>:
10056b68:	b5b0      	push	{r4, r5, r7, lr}
10056b6a:	4a0a      	ldr	r2, [pc, #40]	@ (10056b94 <__arm_cp.16_0>)
10056b6c:	2803      	cmp	r0, #3
10056b6e:	d30f      	bcc.n	10056b90 <GAP_search_flags_index+0x28>
10056b70:	2300      	movs	r3, #0
10056b72:	b29d      	uxth	r5, r3
10056b74:	5d4c      	ldrb	r4, [r1, r5]
10056b76:	2c02      	cmp	r4, #2
10056b78:	d103      	bne.n	10056b82 <GAP_search_flags_index+0x1a>
10056b7a:	186d      	adds	r5, r5, r1
10056b7c:	786d      	ldrb	r5, [r5, #1]
10056b7e:	2d01      	cmp	r5, #1
10056b80:	d005      	beq.n	10056b8e <GAP_search_flags_index+0x26>
10056b82:	191b      	adds	r3, r3, r4
10056b84:	1c5b      	adds	r3, r3, #1
10056b86:	b29c      	uxth	r4, r3
10056b88:	4284      	cmp	r4, r0
10056b8a:	d3f2      	bcc.n	10056b72 <GAP_search_flags_index+0xa>
10056b8c:	e000      	b.n	10056b90 <GAP_search_flags_index+0x28>
10056b8e:	461a      	mov	r2, r3
10056b90:	b290      	uxth	r0, r2
10056b92:	bdb0      	pop	{r4, r5, r7, pc}

10056b94 <__arm_cp.16_0>:
10056b94:	0000ffff 	.word	0x0000ffff

10056b98 <GAP_check_adv_status>:
10056b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056b9a:	4605      	mov	r5, r0
10056b9c:	2600      	movs	r6, #0
10056b9e:	7006      	strb	r6, [r0, #0]
10056ba0:	2401      	movs	r4, #1
10056ba2:	9100      	str	r1, [sp, #0]
10056ba4:	700c      	strb	r4, [r1, #0]
10056ba6:	4816      	ldr	r0, [pc, #88]	@ (10056c00 <__arm_cp.17_0>)
10056ba8:	6800      	ldr	r0, [r0, #0]
10056baa:	6d47      	ldr	r7, [r0, #84]	@ 0x54
10056bac:	f7ff fb86 	bl	100562bc <gap_extended_adv_scan_supported>
10056bb0:	2800      	cmp	r0, #0
10056bb2:	d001      	beq.n	10056bb8 <GAP_check_adv_status+0x20>
10056bb4:	4813      	ldr	r0, [pc, #76]	@ (10056c04 <__arm_cp.17_1>)
10056bb6:	7e84      	ldrb	r4, [r0, #26]
10056bb8:	b2e1      	uxtb	r1, r4
10056bba:	3711      	adds	r7, #17
10056bbc:	4630      	mov	r0, r6
10056bbe:	4632      	mov	r2, r6
10056bc0:	2900      	cmp	r1, #0
10056bc2:	d00f      	beq.n	10056be4 <GAP_check_adv_status+0x4c>
10056bc4:	783b      	ldrb	r3, [r7, #0]
10056bc6:	2b00      	cmp	r3, #0
10056bc8:	d009      	beq.n	10056bde <GAP_check_adv_status+0x46>
10056bca:	2b02      	cmp	r3, #2
10056bcc:	d100      	bne.n	10056bd0 <GAP_check_adv_status+0x38>
10056bce:	2001      	movs	r0, #1
10056bd0:	463a      	mov	r2, r7
10056bd2:	3a0f      	subs	r2, #15
10056bd4:	7813      	ldrb	r3, [r2, #0]
10056bd6:	2201      	movs	r2, #1
10056bd8:	079b      	lsls	r3, r3, #30
10056bda:	d500      	bpl.n	10056bde <GAP_check_adv_status+0x46>
10056bdc:	4616      	mov	r6, r2
10056bde:	3714      	adds	r7, #20
10056be0:	1e49      	subs	r1, r1, #1
10056be2:	e7ed      	b.n	10056bc0 <GAP_check_adv_status+0x28>
10056be4:	2a01      	cmp	r2, #1
10056be6:	d101      	bne.n	10056bec <GAP_check_adv_status+0x54>
10056be8:	2101      	movs	r1, #1
10056bea:	7029      	strb	r1, [r5, #0]
10056bec:	2801      	cmp	r0, #1
10056bee:	d002      	beq.n	10056bf6 <GAP_check_adv_status+0x5e>
10056bf0:	b2f0      	uxtb	r0, r6
10056bf2:	2801      	cmp	r0, #1
10056bf4:	d102      	bne.n	10056bfc <GAP_check_adv_status+0x64>
10056bf6:	2000      	movs	r0, #0
10056bf8:	9900      	ldr	r1, [sp, #0]
10056bfa:	7008      	strb	r0, [r1, #0]
10056bfc:	b2d0      	uxtb	r0, r2
10056bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056c00 <__arm_cp.17_0>:
10056c00:	2000241c 	.word	0x2000241c

10056c04 <__arm_cp.17_1>:
10056c04:	2000247c 	.word	0x2000247c

10056c08 <GAP_ResumeAdvertising_ucfg_weak>:
10056c08:	b580      	push	{r7, lr}
10056c0a:	2001      	movs	r0, #1
10056c0c:	f7ff ff8c 	bl	10056b28 <GAP_suspend_resume_active_advertising_sets_legacy>
10056c10:	bd80      	pop	{r7, pc}
	...

10056c14 <GAT_att_cmn_init>:
10056c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056c16:	2001      	movs	r0, #1
10056c18:	2198      	movs	r1, #152	@ 0x98
10056c1a:	f00a f9d5 	bl	10060fc8 <csmem_mem_0_assign>
10056c1e:	4e2b      	ldr	r6, [pc, #172]	@ (10056ccc <__arm_cp.1_0>)
10056c20:	6030      	str	r0, [r6, #0]
10056c22:	4f2b      	ldr	r7, [pc, #172]	@ (10056cd0 <__arm_cp.1_1>)
10056c24:	7af8      	ldrb	r0, [r7, #11]
10056c26:	7b39      	ldrb	r1, [r7, #12]
10056c28:	1808      	adds	r0, r1, r0
10056c2a:	2414      	movs	r4, #20
10056c2c:	4621      	mov	r1, r4
10056c2e:	f00a f9cb 	bl	10060fc8 <csmem_mem_0_assign>
10056c32:	6832      	ldr	r2, [r6, #0]
10056c34:	2500      	movs	r5, #0
10056c36:	6355      	str	r5, [r2, #52]	@ 0x34
10056c38:	62d5      	str	r5, [r2, #44]	@ 0x2c
10056c3a:	7af9      	ldrb	r1, [r7, #11]
10056c3c:	4603      	mov	r3, r0
10056c3e:	462f      	mov	r7, r5
10056c40:	42b9      	cmp	r1, r7
10056c42:	d00a      	beq.n	10056c5a <GAT_att_cmn_init+0x46>
10056c44:	611d      	str	r5, [r3, #16]
10056c46:	705f      	strb	r7, [r3, #1]
10056c48:	701f      	strb	r7, [r3, #0]
10056c4a:	6832      	ldr	r2, [r6, #0]
10056c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
10056c4e:	4625      	mov	r5, r4
10056c50:	437d      	muls	r5, r7
10056c52:	1945      	adds	r5, r0, r5
10056c54:	3314      	adds	r3, #20
10056c56:	1c7f      	adds	r7, r7, #1
10056c58:	e7f2      	b.n	10056c40 <GAT_att_cmn_init+0x2c>
10056c5a:	2300      	movs	r3, #0
10056c5c:	6313      	str	r3, [r2, #48]	@ 0x30
10056c5e:	4a1c      	ldr	r2, [pc, #112]	@ (10056cd0 <__arm_cp.1_1>)
10056c60:	7b12      	ldrb	r2, [r2, #12]
10056c62:	1852      	adds	r2, r2, r1
10056c64:	b2cd      	uxtb	r5, r1
10056c66:	42aa      	cmp	r2, r5
10056c68:	d90a      	bls.n	10056c80 <GAT_att_cmn_init+0x6c>
10056c6a:	4365      	muls	r5, r4
10056c6c:	27ff      	movs	r7, #255	@ 0xff
10056c6e:	5547      	strb	r7, [r0, r5]
10056c70:	1945      	adds	r5, r0, r5
10056c72:	612b      	str	r3, [r5, #16]
10056c74:	7069      	strb	r1, [r5, #1]
10056c76:	6833      	ldr	r3, [r6, #0]
10056c78:	631d      	str	r5, [r3, #48]	@ 0x30
10056c7a:	1c49      	adds	r1, r1, #1
10056c7c:	462b      	mov	r3, r5
10056c7e:	e7f1      	b.n	10056c64 <GAT_att_cmn_init+0x50>
10056c80:	0690      	lsls	r0, r2, #26
10056c82:	0e00      	lsrs	r0, r0, #24
10056c84:	1c41      	adds	r1, r0, #1
10056c86:	4c13      	ldr	r4, [pc, #76]	@ (10056cd4 <__arm_cp.1_2>)
10056c88:	2201      	movs	r2, #1
10056c8a:	4620      	mov	r0, r4
10056c8c:	f00a f98a 	bl	10060fa4 <csmem_mem_assign>
10056c90:	6831      	ldr	r1, [r6, #0]
10056c92:	6208      	str	r0, [r1, #32]
10056c94:	4d0e      	ldr	r5, [pc, #56]	@ (10056cd0 <__arm_cp.1_1>)
10056c96:	7ae8      	ldrb	r0, [r5, #11]
10056c98:	7b29      	ldrb	r1, [r5, #12]
10056c9a:	1808      	adds	r0, r1, r0
10056c9c:	0680      	lsls	r0, r0, #26
10056c9e:	0e01      	lsrs	r1, r0, #24
10056ca0:	2202      	movs	r2, #2
10056ca2:	4620      	mov	r0, r4
10056ca4:	f00a f97e 	bl	10060fa4 <csmem_mem_assign>
10056ca8:	6834      	ldr	r4, [r6, #0]
10056caa:	6260      	str	r0, [r4, #36]	@ 0x24
10056cac:	7ae8      	ldrb	r0, [r5, #11]
10056cae:	7b29      	ldrb	r1, [r5, #12]
10056cb0:	1808      	adds	r0, r1, r0
10056cb2:	0680      	lsls	r0, r0, #26
10056cb4:	0e01      	lsrs	r1, r0, #24
10056cb6:	4a08      	ldr	r2, [pc, #32]	@ (10056cd8 <__arm_cp.1_3>)
10056cb8:	2307      	movs	r3, #7
10056cba:	4620      	mov	r0, r4
10056cbc:	f00b ffb8 	bl	10062c30 <CST_init>
10056cc0:	f000 f9f2 	bl	100570a8 <GAT_att_srv_init>
10056cc4:	f00d fbfc 	bl	100644c0 <GAT_att_clt_init>
10056cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056cca:	46c0      	nop			@ (mov r8, r8)

10056ccc <__arm_cp.1_0>:
10056ccc:	20002420 	.word	0x20002420

10056cd0 <__arm_cp.1_1>:
10056cd0:	2000247c 	.word	0x2000247c

10056cd4 <__arm_cp.1_2>:
10056cd4:	20002478 	.word	0x20002478

10056cd8 <__arm_cp.1_3>:
10056cd8:	10056cdd 	.word	0x10056cdd

10056cdc <GAT_att_cmn_timeout_cb_wrapper>:
10056cdc:	b580      	push	{r7, lr}
10056cde:	6940      	ldr	r0, [r0, #20]
10056ce0:	4901      	ldr	r1, [pc, #4]	@ (10056ce8 <__arm_cp.2_0>)
10056ce2:	f00c f87e 	bl	10062de2 <cst_sharedCallback>
10056ce6:	bd80      	pop	{r7, pc}

10056ce8 <__arm_cp.2_0>:
10056ce8:	10057055 	.word	0x10057055

10056cec <GAT_att_cmn_timer_expire_tsk>:
10056cec:	b5e0      	push	{r5, r6, r7, lr}
10056cee:	2000      	movs	r0, #0
10056cf0:	9000      	str	r0, [sp, #0]
10056cf2:	4b06      	ldr	r3, [pc, #24]	@ (10056d0c <__arm_cp.4_0>)
10056cf4:	4601      	mov	r1, r0
10056cf6:	4602      	mov	r2, r0
10056cf8:	f000 f80a 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
10056cfc:	2800      	cmp	r0, #0
10056cfe:	d004      	beq.n	10056d0a <GAT_att_cmn_timer_expire_tsk+0x1e>
10056d00:	2007      	movs	r0, #7
10056d02:	f00b ff37 	bl	10062b74 <tsk_notify_idx>
10056d06:	f7fb f8b8 	bl	10051e7a <BLE_STACK_ProcessRequest>
10056d0a:	bd8c      	pop	{r2, r3, r7, pc}

10056d0c <__arm_cp.4_0>:
10056d0c:	10056d6d 	.word	0x10056d6d

10056d10 <GAT_att_cmn_for_each_ch_descr>:
10056d10:	b5f0      	push	{r4, r5, r6, r7, lr}
10056d12:	b085      	sub	sp, #20
10056d14:	9304      	str	r3, [sp, #16]
10056d16:	9201      	str	r2, [sp, #4]
10056d18:	9102      	str	r1, [sp, #8]
10056d1a:	4607      	mov	r7, r0
10056d1c:	2002      	movs	r0, #2
10056d1e:	4038      	ands	r0, r7
10056d20:	9003      	str	r0, [sp, #12]
10056d22:	2401      	movs	r4, #1
10056d24:	403c      	ands	r4, r7
10056d26:	4810      	ldr	r0, [pc, #64]	@ (10056d68 <__arm_cp.5_0>)
10056d28:	6805      	ldr	r5, [r0, #0]
10056d2a:	3534      	adds	r5, #52	@ 0x34
10056d2c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10056d2e:	682d      	ldr	r5, [r5, #0]
10056d30:	2d00      	cmp	r5, #0
10056d32:	d016      	beq.n	10056d62 <GAT_att_cmn_for_each_ch_descr+0x52>
10056d34:	2f00      	cmp	r7, #0
10056d36:	d00c      	beq.n	10056d52 <GAT_att_cmn_for_each_ch_descr+0x42>
10056d38:	2c00      	cmp	r4, #0
10056d3a:	d003      	beq.n	10056d44 <GAT_att_cmn_for_each_ch_descr+0x34>
10056d3c:	8928      	ldrh	r0, [r5, #8]
10056d3e:	9902      	ldr	r1, [sp, #8]
10056d40:	4288      	cmp	r0, r1
10056d42:	d10c      	bne.n	10056d5e <GAT_att_cmn_for_each_ch_descr+0x4e>
10056d44:	9803      	ldr	r0, [sp, #12]
10056d46:	2800      	cmp	r0, #0
10056d48:	d003      	beq.n	10056d52 <GAT_att_cmn_for_each_ch_descr+0x42>
10056d4a:	8968      	ldrh	r0, [r5, #10]
10056d4c:	9901      	ldr	r1, [sp, #4]
10056d4e:	4288      	cmp	r0, r1
10056d50:	d105      	bne.n	10056d5e <GAT_att_cmn_for_each_ch_descr+0x4e>
10056d52:	4628      	mov	r0, r5
10056d54:	4631      	mov	r1, r6
10056d56:	9a04      	ldr	r2, [sp, #16]
10056d58:	4790      	blx	r2
10056d5a:	2800      	cmp	r0, #0
10056d5c:	d102      	bne.n	10056d64 <GAT_att_cmn_for_each_ch_descr+0x54>
10056d5e:	3510      	adds	r5, #16
10056d60:	e7e5      	b.n	10056d2e <GAT_att_cmn_for_each_ch_descr+0x1e>
10056d62:	2000      	movs	r0, #0
10056d64:	b005      	add	sp, #20
10056d66:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056d68 <__arm_cp.5_0>:
10056d68:	20002420 	.word	0x20002420

10056d6c <GAT_att_cmn_handle_disconnec_iterate_f>:
10056d6c:	b5b0      	push	{r4, r5, r7, lr}
10056d6e:	4604      	mov	r4, r0
10056d70:	8880      	ldrh	r0, [r0, #4]
10056d72:	2500      	movs	r5, #0
10056d74:	05c0      	lsls	r0, r0, #23
10056d76:	d401      	bmi.n	10056d7c <GAT_att_cmn_handle_disconnec_iterate_f+0x10>
10056d78:	4628      	mov	r0, r5
10056d7a:	e006      	b.n	10056d8a <GAT_att_cmn_handle_disconnec_iterate_f+0x1e>
10056d7c:	8962      	ldrh	r2, [r4, #10]
10056d7e:	8921      	ldrh	r1, [r4, #8]
10056d80:	2002      	movs	r0, #2
10056d82:	f00c fd83 	bl	1006388c <aci_gatt_proc_timeout_event_push_noinline>
10056d86:	2800      	cmp	r0, #0
10056d88:	d000      	beq.n	10056d8c <GAT_att_cmn_handle_disconnec_iterate_f+0x20>
10056d8a:	bdb0      	pop	{r4, r5, r7, pc}
10056d8c:	8920      	ldrh	r0, [r4, #8]
10056d8e:	8961      	ldrh	r1, [r4, #10]
10056d90:	2904      	cmp	r1, #4
10056d92:	d102      	bne.n	10056d9a <GAT_att_cmn_handle_disconnec_iterate_f+0x2e>
10056d94:	f000 f8ac 	bl	10056ef0 <GAT_att_cmn_disconnection>
10056d98:	e7ee      	b.n	10056d78 <GAT_att_cmn_handle_disconnec_iterate_f+0xc>
10056d9a:	f000 fb17 	bl	100573cc <GAT_att_srv_bearer_close>
10056d9e:	8961      	ldrh	r1, [r4, #10]
10056da0:	8920      	ldrh	r0, [r4, #8]
10056da2:	f00d fc7e 	bl	100646a2 <GAT_att_clt_bearer_close>
10056da6:	2000      	movs	r0, #0
10056da8:	8120      	strh	r0, [r4, #8]
10056daa:	4909      	ldr	r1, [pc, #36]	@ (10056dd0 <__arm_cp.6_0>)
10056dac:	6809      	ldr	r1, [r1, #0]
10056dae:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
10056db0:	42a3      	cmp	r3, r4
10056db2:	d005      	beq.n	10056dc0 <GAT_att_cmn_handle_disconnec_iterate_f+0x54>
10056db4:	461a      	mov	r2, r3
10056db6:	691b      	ldr	r3, [r3, #16]
10056db8:	42a3      	cmp	r3, r4
10056dba:	d1fb      	bne.n	10056db4 <GAT_att_cmn_handle_disconnec_iterate_f+0x48>
10056dbc:	3210      	adds	r2, #16
10056dbe:	e001      	b.n	10056dc4 <GAT_att_cmn_handle_disconnec_iterate_f+0x58>
10056dc0:	460a      	mov	r2, r1
10056dc2:	3234      	adds	r2, #52	@ 0x34
10056dc4:	6923      	ldr	r3, [r4, #16]
10056dc6:	6013      	str	r3, [r2, #0]
10056dc8:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
10056dca:	6122      	str	r2, [r4, #16]
10056dcc:	630c      	str	r4, [r1, #48]	@ 0x30
10056dce:	bdb0      	pop	{r4, r5, r7, pc}

10056dd0 <__arm_cp.6_0>:
10056dd0:	20002420 	.word	0x20002420

10056dd4 <GAT_att_cmn_tx_pool_evt_tsk>:
10056dd4:	b580      	push	{r7, lr}
10056dd6:	2000      	movs	r0, #0
10056dd8:	f7fe f9c8 	bl	1005516c <ACL_pkt_get_available_mem_buffers>
10056ddc:	490d      	ldr	r1, [pc, #52]	@ (10056e14 <__arm_cp.8_0>)
10056dde:	8a09      	ldrh	r1, [r1, #16]
10056de0:	3125      	adds	r1, #37	@ 0x25
10056de2:	0949      	lsrs	r1, r1, #5
10056de4:	4288      	cmp	r0, r1
10056de6:	d90f      	bls.n	10056e08 <GAT_att_cmn_tx_pool_evt_tsk+0x34>
10056de8:	1c49      	adds	r1, r1, #1
10056dea:	f7e9 fa29 	bl	10040240 <__udivsi3>
10056dee:	4602      	mov	r2, r0
10056df0:	2042      	movs	r0, #66	@ 0x42
10056df2:	2100      	movs	r1, #0
10056df4:	f00c fe86 	bl	10063b04 <aci_gatt_tx_pool_available_event_push_noinline>
10056df8:	2800      	cmp	r0, #0
10056dfa:	d004      	beq.n	10056e06 <GAT_att_cmn_tx_pool_evt_tsk+0x32>
10056dfc:	2008      	movs	r0, #8
10056dfe:	f00b feb9 	bl	10062b74 <tsk_notify_idx>
10056e02:	f7fb f83a 	bl	10051e7a <BLE_STACK_ProcessRequest>
10056e06:	bd80      	pop	{r7, pc}
10056e08:	2008      	movs	r0, #8
10056e0a:	2100      	movs	r1, #0
10056e0c:	f00b fec4 	bl	10062b98 <tsk_wait_resource_idx>
10056e10:	bd80      	pop	{r7, pc}
10056e12:	46c0      	nop			@ (mov r8, r8)

10056e14 <__arm_cp.8_0>:
10056e14:	2000247c 	.word	0x2000247c

10056e18 <GAT_att_cmn_rcv>:
10056e18:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10056e1a:	460c      	mov	r4, r1
10056e1c:	2800      	cmp	r0, #0
10056e1e:	d013      	beq.n	10056e48 <GAT_att_cmn_rcv+0x30>
10056e20:	8825      	ldrh	r5, [r4, #0]
10056e22:	4620      	mov	r0, r4
10056e24:	f002 febf 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10056e28:	4601      	mov	r1, r0
10056e2a:	4628      	mov	r0, r5
10056e2c:	f000 f82e 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
10056e30:	2800      	cmp	r0, #0
10056e32:	d009      	beq.n	10056e48 <GAT_att_cmn_rcv+0x30>
10056e34:	8860      	ldrh	r0, [r4, #2]
10056e36:	2800      	cmp	r0, #0
10056e38:	d006      	beq.n	10056e48 <GAT_att_cmn_rcv+0x30>
10056e3a:	89a1      	ldrh	r1, [r4, #12]
10056e3c:	291f      	cmp	r1, #31
10056e3e:	d808      	bhi.n	10056e52 <GAT_att_cmn_rcv+0x3a>
10056e40:	a801      	add	r0, sp, #4
10056e42:	8001      	strh	r1, [r0, #0]
10056e44:	6860      	ldr	r0, [r4, #4]
10056e46:	e00a      	b.n	10056e5e <GAT_att_cmn_rcv+0x46>
10056e48:	4620      	mov	r0, r4
10056e4a:	f7fe f995 	bl	10055178 <ACL_pkt_release>
10056e4e:	2000      	movs	r0, #0
10056e50:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056e52:	6860      	ldr	r0, [r4, #4]
10056e54:	ad01      	add	r5, sp, #4
10056e56:	462a      	mov	r2, r5
10056e58:	f00a f955 	bl	10061106 <Mem_Buff_get_buff_off>
10056e5c:	8829      	ldrh	r1, [r5, #0]
10056e5e:	1840      	adds	r0, r0, r1
10056e60:	7900      	ldrb	r0, [r0, #4]
10056e62:	07c1      	lsls	r1, r0, #31
10056e64:	d104      	bne.n	10056e70 <GAT_att_cmn_rcv+0x58>
10056e66:	281b      	cmp	r0, #27
10056e68:	d008      	beq.n	10056e7c <GAT_att_cmn_rcv+0x64>
10056e6a:	281d      	cmp	r0, #29
10056e6c:	d006      	beq.n	10056e7c <GAT_att_cmn_rcv+0x64>
10056e6e:	e009      	b.n	10056e84 <GAT_att_cmn_rcv+0x6c>
10056e70:	281e      	cmp	r0, #30
10056e72:	d303      	bcc.n	10056e7c <GAT_att_cmn_rcv+0x64>
10056e74:	2102      	movs	r1, #2
10056e76:	4308      	orrs	r0, r1
10056e78:	2823      	cmp	r0, #35	@ 0x23
10056e7a:	d103      	bne.n	10056e84 <GAT_att_cmn_rcv+0x6c>
10056e7c:	4620      	mov	r0, r4
10056e7e:	f00d fb23 	bl	100644c8 <GAT_att_clt_rcv>
10056e82:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056e84:	4620      	mov	r0, r4
10056e86:	f000 f927 	bl	100570d8 <GAT_att_srv_rcv>
10056e8a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10056e8c <GAT_att_cmn_get_channel_descr_p>:
10056e8c:	4a07      	ldr	r2, [pc, #28]	@ (10056eac <__arm_cp.10_0>)
10056e8e:	6812      	ldr	r2, [r2, #0]
10056e90:	3234      	adds	r2, #52	@ 0x34
10056e92:	6812      	ldr	r2, [r2, #0]
10056e94:	2a00      	cmp	r2, #0
10056e96:	d007      	beq.n	10056ea8 <GAT_att_cmn_get_channel_descr_p+0x1c>
10056e98:	8913      	ldrh	r3, [r2, #8]
10056e9a:	4283      	cmp	r3, r0
10056e9c:	d102      	bne.n	10056ea4 <GAT_att_cmn_get_channel_descr_p+0x18>
10056e9e:	8953      	ldrh	r3, [r2, #10]
10056ea0:	428b      	cmp	r3, r1
10056ea2:	d001      	beq.n	10056ea8 <GAT_att_cmn_get_channel_descr_p+0x1c>
10056ea4:	3210      	adds	r2, #16
10056ea6:	e7f4      	b.n	10056e92 <GAT_att_cmn_get_channel_descr_p+0x6>
10056ea8:	4610      	mov	r0, r2
10056eaa:	4770      	bx	lr

10056eac <__arm_cp.10_0>:
10056eac:	20002420 	.word	0x20002420

10056eb0 <GAT_att_cmn_connection>:
10056eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056eb2:	4604      	mov	r4, r0
10056eb4:	4e0d      	ldr	r6, [pc, #52]	@ (10056eec <__arm_cp.11_0>)
10056eb6:	6830      	ldr	r0, [r6, #0]
10056eb8:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
10056eba:	6929      	ldr	r1, [r5, #16]
10056ebc:	62c1      	str	r1, [r0, #44]	@ 0x2c
10056ebe:	882f      	ldrh	r7, [r5, #0]
10056ec0:	2100      	movs	r1, #0
10056ec2:	2214      	movs	r2, #20
10056ec4:	4628      	mov	r0, r5
10056ec6:	f7fb fdcf 	bl	10052a68 <BLEPLAT_MemSet>
10056eca:	2004      	movs	r0, #4
10056ecc:	8168      	strh	r0, [r5, #10]
10056ece:	2017      	movs	r0, #23
10056ed0:	80e8      	strh	r0, [r5, #6]
10056ed2:	812c      	strh	r4, [r5, #8]
10056ed4:	802f      	strh	r7, [r5, #0]
10056ed6:	6830      	ldr	r0, [r6, #0]
10056ed8:	6b41      	ldr	r1, [r0, #52]	@ 0x34
10056eda:	6345      	str	r5, [r0, #52]	@ 0x34
10056edc:	6129      	str	r1, [r5, #16]
10056ede:	4620      	mov	r0, r4
10056ee0:	f000 fa70 	bl	100573c4 <GAT_att_srv_connection>
10056ee4:	4620      	mov	r0, r4
10056ee6:	f00d fbd8 	bl	1006469a <GAT_att_clt_connection>
10056eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056eec <__arm_cp.11_0>:
10056eec:	20002420 	.word	0x20002420

10056ef0 <GAT_att_cmn_disconnection>:
10056ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056ef2:	4604      	mov	r4, r0
10056ef4:	f00b fceb 	bl	100628ce <smp_sap_forget_device_upon_disconnection>
10056ef8:	481c      	ldr	r0, [pc, #112]	@ (10056f6c <__arm_cp.12_0>)
10056efa:	6800      	ldr	r0, [r0, #0]
10056efc:	6b46      	ldr	r6, [r0, #52]	@ 0x34
10056efe:	2e00      	cmp	r6, #0
10056f00:	d032      	beq.n	10056f68 <GAT_att_cmn_disconnection+0x78>
10056f02:	4637      	mov	r7, r6
10056f04:	6936      	ldr	r6, [r6, #16]
10056f06:	8938      	ldrh	r0, [r7, #8]
10056f08:	42a0      	cmp	r0, r4
10056f0a:	d1f8      	bne.n	10056efe <GAT_att_cmn_disconnection+0xe>
10056f0c:	2500      	movs	r5, #0
10056f0e:	897a      	ldrh	r2, [r7, #10]
10056f10:	b2e8      	uxtb	r0, r5
10056f12:	2803      	cmp	r0, #3
10056f14:	d804      	bhi.n	10056f20 <GAT_att_cmn_disconnection+0x30>
10056f16:	4621      	mov	r1, r4
10056f18:	f000 f82a 	bl	10056f70 <GAT_att_cmn_stop_timer>
10056f1c:	1c6d      	adds	r5, r5, #1
10056f1e:	e7f6      	b.n	10056f0e <GAT_att_cmn_disconnection+0x1e>
10056f20:	4620      	mov	r0, r4
10056f22:	4611      	mov	r1, r2
10056f24:	f000 fa52 	bl	100573cc <GAT_att_srv_bearer_close>
10056f28:	8979      	ldrh	r1, [r7, #10]
10056f2a:	4620      	mov	r0, r4
10056f2c:	f00d fbb9 	bl	100646a2 <GAT_att_clt_bearer_close>
10056f30:	2000      	movs	r0, #0
10056f32:	8138      	strh	r0, [r7, #8]
10056f34:	480d      	ldr	r0, [pc, #52]	@ (10056f6c <__arm_cp.12_0>)
10056f36:	6800      	ldr	r0, [r0, #0]
10056f38:	6b42      	ldr	r2, [r0, #52]	@ 0x34
10056f3a:	42ba      	cmp	r2, r7
10056f3c:	d005      	beq.n	10056f4a <GAT_att_cmn_disconnection+0x5a>
10056f3e:	4611      	mov	r1, r2
10056f40:	6912      	ldr	r2, [r2, #16]
10056f42:	42ba      	cmp	r2, r7
10056f44:	d1fb      	bne.n	10056f3e <GAT_att_cmn_disconnection+0x4e>
10056f46:	3110      	adds	r1, #16
10056f48:	e001      	b.n	10056f4e <GAT_att_cmn_disconnection+0x5e>
10056f4a:	4601      	mov	r1, r0
10056f4c:	3134      	adds	r1, #52	@ 0x34
10056f4e:	693a      	ldr	r2, [r7, #16]
10056f50:	600a      	str	r2, [r1, #0]
10056f52:	8979      	ldrh	r1, [r7, #10]
10056f54:	2904      	cmp	r1, #4
10056f56:	d103      	bne.n	10056f60 <GAT_att_cmn_disconnection+0x70>
10056f58:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10056f5a:	6139      	str	r1, [r7, #16]
10056f5c:	62c7      	str	r7, [r0, #44]	@ 0x2c
10056f5e:	e7ce      	b.n	10056efe <GAT_att_cmn_disconnection+0xe>
10056f60:	6b01      	ldr	r1, [r0, #48]	@ 0x30
10056f62:	6139      	str	r1, [r7, #16]
10056f64:	6307      	str	r7, [r0, #48]	@ 0x30
10056f66:	e7ca      	b.n	10056efe <GAT_att_cmn_disconnection+0xe>
10056f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056f6a:	46c0      	nop			@ (mov r8, r8)

10056f6c <__arm_cp.12_0>:
10056f6c:	20002420 	.word	0x20002420

10056f70 <GAT_att_cmn_stop_timer>:
10056f70:	b510      	push	{r4, lr}
10056f72:	4604      	mov	r4, r0
10056f74:	4608      	mov	r0, r1
10056f76:	4611      	mov	r1, r2
10056f78:	f000 f858 	bl	1005702c <GAT_att_cmn_get_timer_index>
10056f7c:	0080      	lsls	r0, r0, #2
10056f7e:	1900      	adds	r0, r0, r4
10056f80:	b2c1      	uxtb	r1, r0
10056f82:	4802      	ldr	r0, [pc, #8]	@ (10056f8c <__arm_cp.13_0>)
10056f84:	6800      	ldr	r0, [r0, #0]
10056f86:	f00b fe68 	bl	10062c5a <CST_stop>
10056f8a:	bd10      	pop	{r4, pc}

10056f8c <__arm_cp.13_0>:
10056f8c:	20002420 	.word	0x20002420

10056f90 <GAT_att_cmn_send>:
10056f90:	b5b0      	push	{r4, r5, r7, lr}
10056f92:	460c      	mov	r4, r1
10056f94:	4605      	mov	r5, r0
10056f96:	8848      	ldrh	r0, [r1, #2]
10056f98:	1d00      	adds	r0, r0, #4
10056f9a:	b281      	uxth	r1, r0
10056f9c:	4620      	mov	r0, r4
10056f9e:	f7fe f8f4 	bl	1005518a <ACL_pkt_resize>
10056fa2:	4628      	mov	r0, r5
10056fa4:	4621      	mov	r1, r4
10056fa6:	f002 ff29 	bl	10059dfc <L2C_send_frame>
10056faa:	2800      	cmp	r0, #0
10056fac:	d004      	beq.n	10056fb8 <GAT_att_cmn_send+0x28>
10056fae:	4620      	mov	r0, r4
10056fb0:	f7fe f8e2 	bl	10055178 <ACL_pkt_release>
10056fb4:	2081      	movs	r0, #129	@ 0x81
10056fb6:	bdb0      	pop	{r4, r5, r7, pc}
10056fb8:	2000      	movs	r0, #0
10056fba:	bdb0      	pop	{r4, r5, r7, pc}

10056fbc <GAT_att_cmn_dscr_flag_check_is_not_set_f>:
10056fbc:	8809      	ldrh	r1, [r1, #0]
10056fbe:	8880      	ldrh	r0, [r0, #4]
10056fc0:	4008      	ands	r0, r1
10056fc2:	d000      	beq.n	10056fc6 <GAT_att_cmn_dscr_flag_check_is_not_set_f+0xa>
10056fc4:	2086      	movs	r0, #134	@ 0x86
10056fc6:	4770      	bx	lr

10056fc8 <GAT_att_cmn_dscr_flag_set_f>:
10056fc8:	8809      	ldrh	r1, [r1, #0]
10056fca:	8882      	ldrh	r2, [r0, #4]
10056fcc:	430a      	orrs	r2, r1
10056fce:	8082      	strh	r2, [r0, #4]
10056fd0:	2000      	movs	r0, #0
10056fd2:	4770      	bx	lr

10056fd4 <GAT_att_cmn_dscr_flag_clear_f>:
10056fd4:	8809      	ldrh	r1, [r1, #0]
10056fd6:	8882      	ldrh	r2, [r0, #4]
10056fd8:	438a      	bics	r2, r1
10056fda:	8082      	strh	r2, [r0, #4]
10056fdc:	2000      	movs	r0, #0
10056fde:	4770      	bx	lr

10056fe0 <GAT_att_cmn_get_conn_index>:
10056fe0:	4907      	ldr	r1, [pc, #28]	@ (10057000 <__arm_cp.22_0>)
10056fe2:	6809      	ldr	r1, [r1, #0]
10056fe4:	3134      	adds	r1, #52	@ 0x34
10056fe6:	6809      	ldr	r1, [r1, #0]
10056fe8:	2900      	cmp	r1, #0
10056fea:	d004      	beq.n	10056ff6 <GAT_att_cmn_get_conn_index+0x16>
10056fec:	890a      	ldrh	r2, [r1, #8]
10056fee:	4282      	cmp	r2, r0
10056ff0:	d003      	beq.n	10056ffa <GAT_att_cmn_get_conn_index+0x1a>
10056ff2:	3110      	adds	r1, #16
10056ff4:	e7f7      	b.n	10056fe6 <GAT_att_cmn_get_conn_index+0x6>
10056ff6:	20ff      	movs	r0, #255	@ 0xff
10056ff8:	4770      	bx	lr
10056ffa:	7808      	ldrb	r0, [r1, #0]
10056ffc:	4770      	bx	lr
10056ffe:	46c0      	nop			@ (mov r8, r8)

10057000 <__arm_cp.22_0>:
10057000:	20002420 	.word	0x20002420

10057004 <GAT_att_cmn_start_timer>:
10057004:	b510      	push	{r4, lr}
10057006:	4604      	mov	r4, r0
10057008:	4608      	mov	r0, r1
1005700a:	4611      	mov	r1, r2
1005700c:	f000 f80e 	bl	1005702c <GAT_att_cmn_get_timer_index>
10057010:	0080      	lsls	r0, r0, #2
10057012:	1900      	adds	r0, r0, r4
10057014:	b2c1      	uxtb	r1, r0
10057016:	4803      	ldr	r0, [pc, #12]	@ (10057024 <__arm_cp.23_0>)
10057018:	6800      	ldr	r0, [r0, #0]
1005701a:	2200      	movs	r2, #0
1005701c:	4b02      	ldr	r3, [pc, #8]	@ (10057028 <__arm_cp.23_1>)
1005701e:	f00b fe52 	bl	10062cc6 <CST_start>
10057022:	bd10      	pop	{r4, pc}

10057024 <__arm_cp.23_0>:
10057024:	20002420 	.word	0x20002420

10057028 <__arm_cp.23_1>:
10057028:	00007530 	.word	0x00007530

1005702c <GAT_att_cmn_get_timer_index>:
1005702c:	4a08      	ldr	r2, [pc, #32]	@ (10057050 <__arm_cp.24_0>)
1005702e:	6812      	ldr	r2, [r2, #0]
10057030:	3234      	adds	r2, #52	@ 0x34
10057032:	6812      	ldr	r2, [r2, #0]
10057034:	2a00      	cmp	r2, #0
10057036:	d007      	beq.n	10057048 <GAT_att_cmn_get_timer_index+0x1c>
10057038:	8913      	ldrh	r3, [r2, #8]
1005703a:	4283      	cmp	r3, r0
1005703c:	d102      	bne.n	10057044 <GAT_att_cmn_get_timer_index+0x18>
1005703e:	8953      	ldrh	r3, [r2, #10]
10057040:	428b      	cmp	r3, r1
10057042:	d003      	beq.n	1005704c <GAT_att_cmn_get_timer_index+0x20>
10057044:	3210      	adds	r2, #16
10057046:	e7f4      	b.n	10057032 <GAT_att_cmn_get_timer_index+0x6>
10057048:	20ff      	movs	r0, #255	@ 0xff
1005704a:	4770      	bx	lr
1005704c:	7850      	ldrb	r0, [r2, #1]
1005704e:	4770      	bx	lr

10057050 <__arm_cp.24_0>:
10057050:	20002420 	.word	0x20002420

10057054 <GAT_att_cmn_timeout_cb>:
10057054:	b580      	push	{r7, lr}
10057056:	0881      	lsrs	r1, r0, #2
10057058:	480a      	ldr	r0, [pc, #40]	@ (10057084 <__arm_cp.25_0>)
1005705a:	6800      	ldr	r0, [r0, #0]
1005705c:	3034      	adds	r0, #52	@ 0x34
1005705e:	6800      	ldr	r0, [r0, #0]
10057060:	2800      	cmp	r0, #0
10057062:	d00e      	beq.n	10057082 <GAT_att_cmn_timeout_cb+0x2e>
10057064:	7842      	ldrb	r2, [r0, #1]
10057066:	428a      	cmp	r2, r1
10057068:	d001      	beq.n	1005706e <GAT_att_cmn_timeout_cb+0x1a>
1005706a:	3010      	adds	r0, #16
1005706c:	e7f7      	b.n	1005705e <GAT_att_cmn_timeout_cb+0xa>
1005706e:	2101      	movs	r1, #1
10057070:	0209      	lsls	r1, r1, #8
10057072:	8882      	ldrh	r2, [r0, #4]
10057074:	430a      	orrs	r2, r1
10057076:	8082      	strh	r2, [r0, #4]
10057078:	2007      	movs	r0, #7
1005707a:	f00b fd7b 	bl	10062b74 <tsk_notify_idx>
1005707e:	f7fa fefc 	bl	10051e7a <BLE_STACK_ProcessRequest>
10057082:	bd80      	pop	{r7, pc}

10057084 <__arm_cp.25_0>:
10057084:	20002420 	.word	0x20002420

10057088 <GAT_att_cmn_get_pckt>:
10057088:	b510      	push	{r4, lr}
1005708a:	8944      	ldrh	r4, [r0, #10]
1005708c:	2c04      	cmp	r4, #4
1005708e:	d000      	beq.n	10057092 <GAT_att_cmn_get_pckt+0xa>
10057090:	2406      	movs	r4, #6
10057092:	1861      	adds	r1, r4, r1
10057094:	b28a      	uxth	r2, r1
10057096:	8901      	ldrh	r1, [r0, #8]
10057098:	2000      	movs	r0, #0
1005709a:	f7fe f84b 	bl	10055134 <ACL_pkt_get>
1005709e:	2800      	cmp	r0, #0
100570a0:	d000      	beq.n	100570a4 <GAT_att_cmn_get_pckt+0x1c>
100570a2:	8184      	strh	r4, [r0, #12]
100570a4:	bd10      	pop	{r4, pc}
	...

100570a8 <GAT_att_srv_init>:
100570a8:	b510      	push	{r4, lr}
100570aa:	4c08      	ldr	r4, [pc, #32]	@ (100570cc <__arm_cp.0_0>)
100570ac:	6820      	ldr	r0, [r4, #0]
100570ae:	3040      	adds	r0, #64	@ 0x40
100570b0:	f00b ff52 	bl	10062f58 <ACL_list_init>
100570b4:	6820      	ldr	r0, [r4, #0]
100570b6:	3038      	adds	r0, #56	@ 0x38
100570b8:	f00b ff4e 	bl	10062f58 <ACL_list_init>
100570bc:	4804      	ldr	r0, [pc, #16]	@ (100570d0 <__arm_cp.0_1>)
100570be:	4905      	ldr	r1, [pc, #20]	@ (100570d4 <__arm_cp.0_2>)
100570c0:	223c      	movs	r2, #60	@ 0x3c
100570c2:	f7fb fcc1 	bl	10052a48 <BLEPLAT_MemCpy>
100570c6:	f001 f8ef 	bl	100582a8 <GAT_srv_init>
100570ca:	bd10      	pop	{r4, pc}

100570cc <__arm_cp.0_0>:
100570cc:	20002420 	.word	0x20002420

100570d0 <__arm_cp.0_1>:
100570d0:	20002424 	.word	0x20002424

100570d4 <__arm_cp.0_2>:
100570d4:	10069ac0 	.word	0x10069ac0

100570d8 <GAT_att_srv_rcv>:
100570d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100570da:	b087      	sub	sp, #28
100570dc:	4604      	mov	r4, r0
100570de:	8805      	ldrh	r5, [r0, #0]
100570e0:	f002 fd61 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
100570e4:	4601      	mov	r1, r0
100570e6:	4628      	mov	r0, r5
100570e8:	f7ff fed0 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
100570ec:	4605      	mov	r5, r0
100570ee:	4620      	mov	r0, r4
100570f0:	f000 f858 	bl	100571a4 <GAT_att_cmn_get_opcode>
100570f4:	4606      	mov	r6, r0
100570f6:	f000 f85b 	bl	100571b0 <GAT_att_srv_get_exec_fn_id_by_op>
100570fa:	280f      	cmp	r0, #15
100570fc:	d119      	bne.n	10057132 <GAT_att_srv_rcv+0x5a>
100570fe:	2e1e      	cmp	r6, #30
10057100:	d047      	beq.n	10057192 <GAT_att_srv_rcv+0xba>
10057102:	2040      	movs	r0, #64	@ 0x40
10057104:	4030      	ands	r0, r6
10057106:	d144      	bne.n	10057192 <GAT_att_srv_rcv+0xba>
10057108:	2105      	movs	r1, #5
1005710a:	4628      	mov	r0, r5
1005710c:	f7ff ffbc 	bl	10057088 <GAT_att_cmn_get_pckt>
10057110:	2800      	cmp	r0, #0
10057112:	d045      	beq.n	100571a0 <GAT_att_srv_rcv+0xc8>
10057114:	4607      	mov	r7, r0
10057116:	2100      	movs	r1, #0
10057118:	2206      	movs	r2, #6
1005711a:	4630      	mov	r0, r6
1005711c:	463b      	mov	r3, r7
1005711e:	f000 fafd 	bl	1005771c <GAT_att_srv_write_err_packet>
10057122:	8968      	ldrh	r0, [r5, #10]
10057124:	4639      	mov	r1, r7
10057126:	f7ff ff33 	bl	10056f90 <GAT_att_cmn_send>
1005712a:	4607      	mov	r7, r0
1005712c:	2800      	cmp	r0, #0
1005712e:	d134      	bne.n	1005719a <GAT_att_srv_rcv+0xc2>
10057130:	e02f      	b.n	10057192 <GAT_att_srv_rcv+0xba>
10057132:	9501      	str	r5, [sp, #4]
10057134:	2500      	movs	r5, #0
10057136:	2e1e      	cmp	r6, #30
10057138:	462f      	mov	r7, r5
1005713a:	d016      	beq.n	1005716a <GAT_att_srv_rcv+0x92>
1005713c:	2040      	movs	r0, #64	@ 0x40
1005713e:	4006      	ands	r6, r0
10057140:	462f      	mov	r7, r5
10057142:	d112      	bne.n	1005716a <GAT_att_srv_rcv+0x92>
10057144:	9b01      	ldr	r3, [sp, #4]
10057146:	8898      	ldrh	r0, [r3, #4]
10057148:	07c0      	lsls	r0, r0, #31
1005714a:	d118      	bne.n	1005717e <GAT_att_srv_rcv+0xa6>
1005714c:	895a      	ldrh	r2, [r3, #10]
1005714e:	8919      	ldrh	r1, [r3, #8]
10057150:	2600      	movs	r6, #0
10057152:	4630      	mov	r0, r6
10057154:	f7ff ff56 	bl	10057004 <GAT_att_cmn_start_timer>
10057158:	4607      	mov	r7, r0
1005715a:	2800      	cmp	r0, #0
1005715c:	d105      	bne.n	1005716a <GAT_att_srv_rcv+0x92>
1005715e:	9a01      	ldr	r2, [sp, #4]
10057160:	8890      	ldrh	r0, [r2, #4]
10057162:	2101      	movs	r1, #1
10057164:	4301      	orrs	r1, r0
10057166:	8091      	strh	r1, [r2, #4]
10057168:	4637      	mov	r7, r6
1005716a:	a802      	add	r0, sp, #8
1005716c:	8005      	strh	r5, [r0, #0]
1005716e:	9506      	str	r5, [sp, #24]
10057170:	9505      	str	r5, [sp, #20]
10057172:	9901      	ldr	r1, [sp, #4]
10057174:	9104      	str	r1, [sp, #16]
10057176:	9403      	str	r4, [sp, #12]
10057178:	f000 f854 	bl	10057224 <GAT_att_srv_run>
1005717c:	e00d      	b.n	1005719a <GAT_att_srv_rcv+0xc2>
1005717e:	3308      	adds	r3, #8
10057180:	2042      	movs	r0, #66	@ 0x42
10057182:	2103      	movs	r1, #3
10057184:	2202      	movs	r2, #2
10057186:	f00d f8eb 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
1005718a:	2800      	cmp	r0, #0
1005718c:	d001      	beq.n	10057192 <GAT_att_srv_rcv+0xba>
1005718e:	2784      	movs	r7, #132	@ 0x84
10057190:	e003      	b.n	1005719a <GAT_att_srv_rcv+0xc2>
10057192:	4620      	mov	r0, r4
10057194:	f7fd fff0 	bl	10055178 <ACL_pkt_release>
10057198:	2700      	movs	r7, #0
1005719a:	4638      	mov	r0, r7
1005719c:	b007      	add	sp, #28
1005719e:	bdf0      	pop	{r4, r5, r6, r7, pc}
100571a0:	2788      	movs	r7, #136	@ 0x88
100571a2:	e7fa      	b.n	1005719a <GAT_att_srv_rcv+0xc2>

100571a4 <GAT_att_cmn_get_opcode>:
100571a4:	b580      	push	{r7, lr}
100571a6:	8981      	ldrh	r1, [r0, #12]
100571a8:	f001 f84d 	bl	10058246 <ACL_pkt_read_8b>
100571ac:	bd80      	pop	{r7, pc}
	...

100571b0 <GAT_att_srv_get_exec_fn_id_by_op>:
100571b0:	1e81      	subs	r1, r0, #2
100571b2:	291e      	cmp	r1, #30
100571b4:	d816      	bhi.n	100571e4 <GAT_att_srv_get_exec_fn_id_by_op+0x34>
100571b6:	2000      	movs	r0, #0
100571b8:	4479      	add	r1, pc
100571ba:	7909      	ldrb	r1, [r1, #4]
100571bc:	0049      	lsls	r1, r1, #1
100571be:	448f      	add	pc, r1
100571c0:	170f1718 	.word	0x170f1718
100571c4:	171b1719 	.word	0x171b1719
100571c8:	171f171d 	.word	0x171f171d
100571cc:	17231721 	.word	0x17231721
100571d0:	17171725 	.word	0x17171725
100571d4:	17291727 	.word	0x17291727
100571d8:	17171717 	.word	0x17171717
100571dc:	002d172b 	.word	0x002d172b
100571e0:	2001      	movs	r0, #1
100571e2:	4770      	bx	lr
100571e4:	2852      	cmp	r0, #82	@ 0x52
100571e6:	d01b      	beq.n	10057220 <GAT_att_srv_get_exec_fn_id_by_op+0x70>
100571e8:	28d2      	cmp	r0, #210	@ 0xd2
100571ea:	d101      	bne.n	100571f0 <GAT_att_srv_get_exec_fn_id_by_op+0x40>
100571ec:	200a      	movs	r0, #10
100571ee:	4770      	bx	lr
100571f0:	200f      	movs	r0, #15
100571f2:	4770      	bx	lr
100571f4:	2002      	movs	r0, #2
100571f6:	4770      	bx	lr
100571f8:	2003      	movs	r0, #3
100571fa:	4770      	bx	lr
100571fc:	2004      	movs	r0, #4
100571fe:	4770      	bx	lr
10057200:	2005      	movs	r0, #5
10057202:	4770      	bx	lr
10057204:	2006      	movs	r0, #6
10057206:	4770      	bx	lr
10057208:	2007      	movs	r0, #7
1005720a:	4770      	bx	lr
1005720c:	2008      	movs	r0, #8
1005720e:	4770      	bx	lr
10057210:	200b      	movs	r0, #11
10057212:	4770      	bx	lr
10057214:	200c      	movs	r0, #12
10057216:	4770      	bx	lr
10057218:	200d      	movs	r0, #13
1005721a:	4770      	bx	lr
1005721c:	200e      	movs	r0, #14
1005721e:	4770      	bx	lr
10057220:	2009      	movs	r0, #9
10057222:	4770      	bx	lr

10057224 <GAT_att_srv_run>:
10057224:	b5f0      	push	{r4, r5, r6, r7, lr}
10057226:	b085      	sub	sp, #20
10057228:	4604      	mov	r4, r0
1005722a:	7800      	ldrb	r0, [r0, #0]
1005722c:	2800      	cmp	r0, #0
1005722e:	d107      	bne.n	10057240 <GAT_att_srv_run+0x1c>
10057230:	6860      	ldr	r0, [r4, #4]
10057232:	f7ff ffb7 	bl	100571a4 <GAT_att_cmn_get_opcode>
10057236:	7060      	strb	r0, [r4, #1]
10057238:	68a5      	ldr	r5, [r4, #8]
1005723a:	68e8      	ldr	r0, [r5, #12]
1005723c:	2800      	cmp	r0, #0
1005723e:	d03c      	beq.n	100572ba <GAT_att_srv_run+0x96>
10057240:	7865      	ldrb	r5, [r4, #1]
10057242:	4628      	mov	r0, r5
10057244:	f7ff ffb4 	bl	100571b0 <GAT_att_srv_get_exec_fn_id_by_op>
10057248:	280e      	cmp	r0, #14
1005724a:	d808      	bhi.n	1005725e <GAT_att_srv_run+0x3a>
1005724c:	0080      	lsls	r0, r0, #2
1005724e:	495b      	ldr	r1, [pc, #364]	@ (100573bc <__arm_cp.4_3>)
10057250:	5809      	ldr	r1, [r1, r0]
10057252:	2900      	cmp	r1, #0
10057254:	d003      	beq.n	1005725e <GAT_att_srv_run+0x3a>
10057256:	4620      	mov	r0, r4
10057258:	4788      	blx	r1
1005725a:	4607      	mov	r7, r0
1005725c:	e007      	b.n	1005726e <GAT_att_srv_run+0x4a>
1005725e:	68a0      	ldr	r0, [r4, #8]
10057260:	68c3      	ldr	r3, [r0, #12]
10057262:	2100      	movs	r1, #0
10057264:	2206      	movs	r2, #6
10057266:	4628      	mov	r0, r5
10057268:	f000 fa58 	bl	1005771c <GAT_att_srv_write_err_packet>
1005726c:	2786      	movs	r7, #134	@ 0x86
1005726e:	6861      	ldr	r1, [r4, #4]
10057270:	2900      	cmp	r1, #0
10057272:	d019      	beq.n	100572a8 <GAT_att_srv_run+0x84>
10057274:	2f88      	cmp	r7, #136	@ 0x88
10057276:	d003      	beq.n	10057280 <GAT_att_srv_run+0x5c>
10057278:	2f84      	cmp	r7, #132	@ 0x84
1005727a:	d00c      	beq.n	10057296 <GAT_att_srv_run+0x72>
1005727c:	2f07      	cmp	r7, #7
1005727e:	d110      	bne.n	100572a2 <GAT_att_srv_run+0x7e>
10057280:	484f      	ldr	r0, [pc, #316]	@ (100573c0 <__arm_cp.4_4>)
10057282:	6800      	ldr	r0, [r0, #0]
10057284:	3040      	adds	r0, #64	@ 0x40
10057286:	f00b fe6b 	bl	10062f60 <ACL_list_insert_tail>
1005728a:	2009      	movs	r0, #9
1005728c:	f00b fc72 	bl	10062b74 <tsk_notify_idx>
10057290:	f7fa fdf3 	bl	10051e7a <BLE_STACK_ProcessRequest>
10057294:	e008      	b.n	100572a8 <GAT_att_srv_run+0x84>
10057296:	484a      	ldr	r0, [pc, #296]	@ (100573c0 <__arm_cp.4_4>)
10057298:	6800      	ldr	r0, [r0, #0]
1005729a:	3038      	adds	r0, #56	@ 0x38
1005729c:	f00b fe60 	bl	10062f60 <ACL_list_insert_tail>
100572a0:	e009      	b.n	100572b6 <GAT_att_srv_run+0x92>
100572a2:	4608      	mov	r0, r1
100572a4:	f7fd ff68 	bl	10055178 <ACL_pkt_release>
100572a8:	2f86      	cmp	r7, #134	@ 0x86
100572aa:	d001      	beq.n	100572b0 <GAT_att_srv_run+0x8c>
100572ac:	2f00      	cmp	r7, #0
100572ae:	d102      	bne.n	100572b6 <GAT_att_srv_run+0x92>
100572b0:	68a0      	ldr	r0, [r4, #8]
100572b2:	f000 fa47 	bl	10057744 <GAT_att_srv_send_response>
100572b6:	b005      	add	sp, #20
100572b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100572ba:	6867      	ldr	r7, [r4, #4]
100572bc:	4638      	mov	r0, r7
100572be:	f7ff ff71 	bl	100571a4 <GAT_att_cmn_get_opcode>
100572c2:	4606      	mov	r6, r0
100572c4:	f7ff ff74 	bl	100571b0 <GAT_att_srv_get_exec_fn_id_by_op>
100572c8:	8879      	ldrh	r1, [r7, #2]
100572ca:	88ea      	ldrh	r2, [r5, #6]
100572cc:	2304      	movs	r3, #4
100572ce:	9302      	str	r3, [sp, #8]
100572d0:	2300      	movs	r3, #0
100572d2:	4291      	cmp	r1, r2
100572d4:	d83e      	bhi.n	10057354 <GAT_att_srv_run+0x130>
100572d6:	280e      	cmp	r0, #14
100572d8:	d83c      	bhi.n	10057354 <GAT_att_srv_run+0x130>
100572da:	9301      	str	r3, [sp, #4]
100572dc:	0042      	lsls	r2, r0, #1
100572de:	4b34      	ldr	r3, [pc, #208]	@ (100573b0 <__arm_cp.4_0>)
100572e0:	5a9a      	ldrh	r2, [r3, r2]
100572e2:	4b34      	ldr	r3, [pc, #208]	@ (100573b4 <__arm_cp.4_1>)
100572e4:	40c3      	lsrs	r3, r0
100572e6:	07db      	lsls	r3, r3, #31
100572e8:	d105      	bne.n	100572f6 <GAT_att_srv_run+0xd2>
100572ea:	2380      	movs	r3, #128	@ 0x80
100572ec:	439a      	bics	r2, r3
100572ee:	4291      	cmp	r1, r2
100572f0:	9b01      	ldr	r3, [sp, #4]
100572f2:	d003      	beq.n	100572fc <GAT_att_srv_run+0xd8>
100572f4:	e02e      	b.n	10057354 <GAT_att_srv_run+0x130>
100572f6:	4291      	cmp	r1, r2
100572f8:	9b01      	ldr	r3, [sp, #4]
100572fa:	d32b      	bcc.n	10057354 <GAT_att_srv_run+0x130>
100572fc:	1e41      	subs	r1, r0, #1
100572fe:	2903      	cmp	r1, #3
10057300:	d301      	bcc.n	10057306 <GAT_att_srv_run+0xe2>
10057302:	2807      	cmp	r0, #7
10057304:	d10d      	bne.n	10057322 <GAT_att_srv_run+0xfe>
10057306:	a904      	add	r1, sp, #16
10057308:	aa03      	add	r2, sp, #12
1005730a:	9202      	str	r2, [sp, #8]
1005730c:	4638      	mov	r0, r7
1005730e:	460f      	mov	r7, r1
10057310:	f000 ff49 	bl	100581a6 <GAT_att_srv_get_handle_range>
10057314:	883b      	ldrh	r3, [r7, #0]
10057316:	9802      	ldr	r0, [sp, #8]
10057318:	8800      	ldrh	r0, [r0, #0]
1005731a:	4283      	cmp	r3, r0
1005731c:	d818      	bhi.n	10057350 <GAT_att_srv_run+0x12c>
1005731e:	2b00      	cmp	r3, #0
10057320:	d016      	beq.n	10057350 <GAT_att_srv_run+0x12c>
10057322:	6866      	ldr	r6, [r4, #4]
10057324:	4630      	mov	r0, r6
10057326:	f7ff ff3d 	bl	100571a4 <GAT_att_cmn_get_opcode>
1005732a:	4607      	mov	r7, r0
1005732c:	8835      	ldrh	r5, [r6, #0]
1005732e:	4630      	mov	r0, r6
10057330:	f002 fc39 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10057334:	4601      	mov	r1, r0
10057336:	4628      	mov	r0, r5
10057338:	f7ff fda8 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
1005733c:	4605      	mov	r5, r0
1005733e:	2f1e      	cmp	r7, #30
10057340:	d01d      	beq.n	1005737e <GAT_att_srv_run+0x15a>
10057342:	2040      	movs	r0, #64	@ 0x40
10057344:	4038      	ands	r0, r7
10057346:	d11a      	bne.n	1005737e <GAT_att_srv_run+0x15a>
10057348:	2f16      	cmp	r7, #22
1005734a:	d11b      	bne.n	10057384 <GAT_att_srv_run+0x160>
1005734c:	8871      	ldrh	r1, [r6, #2]
1005734e:	e026      	b.n	1005739e <GAT_att_srv_run+0x17a>
10057350:	2001      	movs	r0, #1
10057352:	9002      	str	r0, [sp, #8]
10057354:	2786      	movs	r7, #134	@ 0x86
10057356:	2e1e      	cmp	r6, #30
10057358:	d089      	beq.n	1005726e <GAT_att_srv_run+0x4a>
1005735a:	2040      	movs	r0, #64	@ 0x40
1005735c:	4030      	ands	r0, r6
1005735e:	d186      	bne.n	1005726e <GAT_att_srv_run+0x4a>
10057360:	9301      	str	r3, [sp, #4]
10057362:	2105      	movs	r1, #5
10057364:	4628      	mov	r0, r5
10057366:	f7ff fe8f 	bl	10057088 <GAT_att_cmn_get_pckt>
1005736a:	60e8      	str	r0, [r5, #12]
1005736c:	2800      	cmp	r0, #0
1005736e:	d01d      	beq.n	100573ac <GAT_att_srv_run+0x188>
10057370:	4603      	mov	r3, r0
10057372:	4630      	mov	r0, r6
10057374:	9901      	ldr	r1, [sp, #4]
10057376:	9a02      	ldr	r2, [sp, #8]
10057378:	f000 f9d0 	bl	1005771c <GAT_att_srv_write_err_packet>
1005737c:	e777      	b.n	1005726e <GAT_att_srv_run+0x4a>
1005737e:	2000      	movs	r0, #0
10057380:	60e8      	str	r0, [r5, #12]
10057382:	e75d      	b.n	10057240 <GAT_att_srv_run+0x1c>
10057384:	4638      	mov	r0, r7
10057386:	f7ff ff13 	bl	100571b0 <GAT_att_srv_get_exec_fn_id_by_op>
1005738a:	280e      	cmp	r0, #14
1005738c:	d900      	bls.n	10057390 <GAT_att_srv_run+0x16c>
1005738e:	e76d      	b.n	1005726c <GAT_att_srv_run+0x48>
10057390:	0040      	lsls	r0, r0, #1
10057392:	4909      	ldr	r1, [pc, #36]	@ (100573b8 <__arm_cp.4_2>)
10057394:	5a09      	ldrh	r1, [r1, r0]
10057396:	88e8      	ldrh	r0, [r5, #6]
10057398:	4281      	cmp	r1, r0
1005739a:	d300      	bcc.n	1005739e <GAT_att_srv_run+0x17a>
1005739c:	4601      	mov	r1, r0
1005739e:	4628      	mov	r0, r5
100573a0:	f7ff fe72 	bl	10057088 <GAT_att_cmn_get_pckt>
100573a4:	60e8      	str	r0, [r5, #12]
100573a6:	2800      	cmp	r0, #0
100573a8:	d000      	beq.n	100573ac <GAT_att_srv_run+0x188>
100573aa:	e749      	b.n	10057240 <GAT_att_srv_run+0x1c>
100573ac:	2788      	movs	r7, #136	@ 0x88
100573ae:	e75e      	b.n	1005726e <GAT_att_srv_run+0x4a>

100573b0 <__arm_cp.4_0>:
100573b0:	10069afc 	.word	0x10069afc

100573b4 <__arm_cp.4_1>:
100573b4:	00004fcc 	.word	0x00004fcc

100573b8 <__arm_cp.4_2>:
100573b8:	10069b1a 	.word	0x10069b1a

100573bc <__arm_cp.4_3>:
100573bc:	20002424 	.word	0x20002424

100573c0 <__arm_cp.4_4>:
100573c0:	20002420 	.word	0x20002420

100573c4 <GAT_att_srv_connection>:
100573c4:	b580      	push	{r7, lr}
100573c6:	f000 ff81 	bl	100582cc <GAT_srv_connection>
100573ca:	bd80      	pop	{r7, pc}

100573cc <GAT_att_srv_bearer_close>:
100573cc:	b570      	push	{r4, r5, r6, lr}
100573ce:	460c      	mov	r4, r1
100573d0:	4605      	mov	r5, r0
100573d2:	f001 f821 	bl	10058418 <GAT_srv_bearer_close>
100573d6:	4e07      	ldr	r6, [pc, #28]	@ (100573f4 <__arm_cp.6_0>)
100573d8:	6832      	ldr	r2, [r6, #0]
100573da:	3240      	adds	r2, #64	@ 0x40
100573dc:	4628      	mov	r0, r5
100573de:	4621      	mov	r1, r4
100573e0:	f000 f80a 	bl	100573f8 <GAT_att_srv_flush_rx_pckts>
100573e4:	6832      	ldr	r2, [r6, #0]
100573e6:	3238      	adds	r2, #56	@ 0x38
100573e8:	4628      	mov	r0, r5
100573ea:	4621      	mov	r1, r4
100573ec:	f000 f804 	bl	100573f8 <GAT_att_srv_flush_rx_pckts>
100573f0:	bd70      	pop	{r4, r5, r6, pc}
100573f2:	46c0      	nop			@ (mov r8, r8)

100573f4 <__arm_cp.6_0>:
100573f4:	20002420 	.word	0x20002420

100573f8 <GAT_att_srv_flush_rx_pckts>:
100573f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100573fa:	460d      	mov	r5, r1
100573fc:	4606      	mov	r6, r0
100573fe:	9200      	str	r2, [sp, #0]
10057400:	6814      	ldr	r4, [r2, #0]
10057402:	2c00      	cmp	r4, #0
10057404:	d011      	beq.n	1005742a <GAT_att_srv_flush_rx_pckts+0x32>
10057406:	4627      	mov	r7, r4
10057408:	69e4      	ldr	r4, [r4, #28]
1005740a:	8838      	ldrh	r0, [r7, #0]
1005740c:	42b0      	cmp	r0, r6
1005740e:	d1f8      	bne.n	10057402 <GAT_att_srv_flush_rx_pckts+0xa>
10057410:	4638      	mov	r0, r7
10057412:	f002 fbc8 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10057416:	42a8      	cmp	r0, r5
10057418:	d1f3      	bne.n	10057402 <GAT_att_srv_flush_rx_pckts+0xa>
1005741a:	9800      	ldr	r0, [sp, #0]
1005741c:	4639      	mov	r1, r7
1005741e:	f00b fdaf 	bl	10062f80 <ACL_list_remove>
10057422:	4638      	mov	r0, r7
10057424:	f7fd fea8 	bl	10055178 <ACL_pkt_release>
10057428:	e7eb      	b.n	10057402 <GAT_att_srv_flush_rx_pckts+0xa>
1005742a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005742c <GAT_att_srv_process_rx_pckt_tsk>:
1005742c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005742e:	b085      	sub	sp, #20
10057430:	4f0f      	ldr	r7, [pc, #60]	@ (10057470 <__arm_cp.9_0>)
10057432:	6838      	ldr	r0, [r7, #0]
10057434:	3040      	adds	r0, #64	@ 0x40
10057436:	f00b fdc3 	bl	10062fc0 <ACL_list_get_pckt_count>
1005743a:	4604      	mov	r4, r0
1005743c:	0420      	lsls	r0, r4, #16
1005743e:	d014      	beq.n	1005746a <GAT_att_srv_process_rx_pckt_tsk+0x3e>
10057440:	466d      	mov	r5, sp
10057442:	2000      	movs	r0, #0
10057444:	7028      	strb	r0, [r5, #0]
10057446:	6838      	ldr	r0, [r7, #0]
10057448:	3040      	adds	r0, #64	@ 0x40
1005744a:	f00b fdaf 	bl	10062fac <ACL_list_remove_head>
1005744e:	9001      	str	r0, [sp, #4]
10057450:	8806      	ldrh	r6, [r0, #0]
10057452:	f002 fba8 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10057456:	4601      	mov	r1, r0
10057458:	4630      	mov	r0, r6
1005745a:	f7ff fd17 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
1005745e:	9002      	str	r0, [sp, #8]
10057460:	4628      	mov	r0, r5
10057462:	f7ff fedf 	bl	10057224 <GAT_att_srv_run>
10057466:	1e64      	subs	r4, r4, #1
10057468:	e7e8      	b.n	1005743c <GAT_att_srv_process_rx_pckt_tsk+0x10>
1005746a:	b005      	add	sp, #20
1005746c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005746e:	46c0      	nop			@ (mov r8, r8)

10057470 <__arm_cp.9_0>:
10057470:	20002420 	.word	0x20002420

10057474 <GAT_att_srv_hvtx>:
10057474:	b5f0      	push	{r4, r5, r6, r7, lr}
10057476:	b08b      	sub	sp, #44	@ 0x2c
10057478:	930a      	str	r3, [sp, #40]	@ 0x28
1005747a:	4614      	mov	r4, r2
1005747c:	460d      	mov	r5, r1
1005747e:	4607      	mov	r7, r0
10057480:	f7ff fd04 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
10057484:	2800      	cmp	r0, #0
10057486:	d011      	beq.n	100574ac <GAT_att_srv_hvtx+0x38>
10057488:	4606      	mov	r6, r0
1005748a:	9704      	str	r7, [sp, #16]
1005748c:	8880      	ldrh	r0, [r0, #4]
1005748e:	270c      	movs	r7, #12
10057490:	0741      	lsls	r1, r0, #29
10057492:	d47f      	bmi.n	10057594 <GAT_att_srv_hvtx+0x120>
10057494:	2c02      	cmp	r4, #2
10057496:	d101      	bne.n	1005749c <GAT_att_srv_hvtx+0x28>
10057498:	0780      	lsls	r0, r0, #30
1005749a:	d47b      	bmi.n	10057594 <GAT_att_srv_hvtx+0x120>
1005749c:	9502      	str	r5, [sp, #8]
1005749e:	9403      	str	r4, [sp, #12]
100574a0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
100574a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100574a4:	2b01      	cmp	r3, #1
100574a6:	d803      	bhi.n	100574b0 <GAT_att_srv_hvtx+0x3c>
100574a8:	2503      	movs	r5, #3
100574aa:	e003      	b.n	100574b4 <GAT_att_srv_hvtx+0x40>
100574ac:	2712      	movs	r7, #18
100574ae:	e071      	b.n	10057594 <GAT_att_srv_hvtx+0x120>
100574b0:	0098      	lsls	r0, r3, #2
100574b2:	1c45      	adds	r5, r0, #1
100574b4:	1ca0      	adds	r0, r4, #2
100574b6:	4619      	mov	r1, r3
100574b8:	2900      	cmp	r1, #0
100574ba:	d004      	beq.n	100574c6 <GAT_att_srv_hvtx+0x52>
100574bc:	8802      	ldrh	r2, [r0, #0]
100574be:	1955      	adds	r5, r2, r5
100574c0:	3008      	adds	r0, #8
100574c2:	1e49      	subs	r1, r1, #1
100574c4:	e7f8      	b.n	100574b8 <GAT_att_srv_hvtx+0x44>
100574c6:	88f0      	ldrh	r0, [r6, #6]
100574c8:	2b02      	cmp	r3, #2
100574ca:	d302      	bcc.n	100574d2 <GAT_att_srv_hvtx+0x5e>
100574cc:	b2a9      	uxth	r1, r5
100574ce:	4281      	cmp	r1, r0
100574d0:	d860      	bhi.n	10057594 <GAT_att_srv_hvtx+0x120>
100574d2:	b2a9      	uxth	r1, r5
100574d4:	4281      	cmp	r1, r0
100574d6:	d300      	bcc.n	100574da <GAT_att_srv_hvtx+0x66>
100574d8:	4605      	mov	r5, r0
100574da:	b2a9      	uxth	r1, r5
100574dc:	4630      	mov	r0, r6
100574de:	9106      	str	r1, [sp, #24]
100574e0:	f7ff fdd2 	bl	10057088 <GAT_att_cmn_get_pckt>
100574e4:	2800      	cmp	r0, #0
100574e6:	d00e      	beq.n	10057506 <GAT_att_srv_hvtx+0x92>
100574e8:	4607      	mov	r7, r0
100574ea:	9803      	ldr	r0, [sp, #12]
100574ec:	2802      	cmp	r0, #2
100574ee:	9707      	str	r7, [sp, #28]
100574f0:	9601      	str	r6, [sp, #4]
100574f2:	d10f      	bne.n	10057514 <GAT_att_srv_hvtx+0xa0>
100574f4:	89b9      	ldrh	r1, [r7, #12]
100574f6:	221d      	movs	r2, #29
100574f8:	4638      	mov	r0, r7
100574fa:	f000 f889 	bl	10057610 <ACL_pkt_write_8b>
100574fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057500:	2801      	cmp	r0, #1
10057502:	d00f      	beq.n	10057524 <GAT_att_srv_hvtx+0xb0>
10057504:	e04e      	b.n	100575a4 <GAT_att_srv_hvtx+0x130>
10057506:	2008      	movs	r0, #8
10057508:	f00b fb34 	bl	10062b74 <tsk_notify_idx>
1005750c:	f7fa fcb5 	bl	10051e7a <BLE_STACK_ProcessRequest>
10057510:	2788      	movs	r7, #136	@ 0x88
10057512:	e03f      	b.n	10057594 <GAT_att_srv_hvtx+0x120>
10057514:	89b9      	ldrh	r1, [r7, #12]
10057516:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057518:	2801      	cmp	r0, #1
1005751a:	d13e      	bne.n	1005759a <GAT_att_srv_hvtx+0x126>
1005751c:	221b      	movs	r2, #27
1005751e:	4638      	mov	r0, r7
10057520:	f000 f876 	bl	10057610 <ACL_pkt_write_8b>
10057524:	8822      	ldrh	r2, [r4, #0]
10057526:	89b8      	ldrh	r0, [r7, #12]
10057528:	1c40      	adds	r0, r0, #1
1005752a:	b281      	uxth	r1, r0
1005752c:	4638      	mov	r0, r7
1005752e:	f7fd fe58 	bl	100551e2 <ACL_pkt_write_16b>
10057532:	6863      	ldr	r3, [r4, #4]
10057534:	89b8      	ldrh	r0, [r7, #12]
10057536:	1ee9      	subs	r1, r5, #3
10057538:	b28a      	uxth	r2, r1
1005753a:	1cc0      	adds	r0, r0, #3
1005753c:	b281      	uxth	r1, r0
1005753e:	4638      	mov	r0, r7
10057540:	f7fd fe58 	bl	100551f4 <ACL_pkt_write>
10057544:	9807      	ldr	r0, [sp, #28]
10057546:	8045      	strh	r5, [r0, #2]
10057548:	9d03      	ldr	r5, [sp, #12]
1005754a:	2d02      	cmp	r5, #2
1005754c:	d10c      	bne.n	10057568 <GAT_att_srv_hvtx+0xf4>
1005754e:	2001      	movs	r0, #1
10057550:	9904      	ldr	r1, [sp, #16]
10057552:	9a02      	ldr	r2, [sp, #8]
10057554:	f7ff fd56 	bl	10057004 <GAT_att_cmn_start_timer>
10057558:	2800      	cmp	r0, #0
1005755a:	9c01      	ldr	r4, [sp, #4]
1005755c:	d00c      	beq.n	10057578 <GAT_att_srv_hvtx+0x104>
1005755e:	4607      	mov	r7, r0
10057560:	9807      	ldr	r0, [sp, #28]
10057562:	f7fd fe09 	bl	10055178 <ACL_pkt_release>
10057566:	e015      	b.n	10057594 <GAT_att_srv_hvtx+0x120>
10057568:	07e8      	lsls	r0, r5, #31
1005756a:	9c01      	ldr	r4, [sp, #4]
1005756c:	d004      	beq.n	10057578 <GAT_att_srv_hvtx+0x104>
1005756e:	9a07      	ldr	r2, [sp, #28]
10057570:	7a10      	ldrb	r0, [r2, #8]
10057572:	2108      	movs	r1, #8
10057574:	4301      	orrs	r1, r0
10057576:	7211      	strb	r1, [r2, #8]
10057578:	9802      	ldr	r0, [sp, #8]
1005757a:	9907      	ldr	r1, [sp, #28]
1005757c:	f7ff fd08 	bl	10056f90 <GAT_att_cmn_send>
10057580:	4607      	mov	r7, r0
10057582:	2d02      	cmp	r5, #2
10057584:	d106      	bne.n	10057594 <GAT_att_srv_hvtx+0x120>
10057586:	2f00      	cmp	r7, #0
10057588:	d104      	bne.n	10057594 <GAT_att_srv_hvtx+0x120>
1005758a:	88a0      	ldrh	r0, [r4, #4]
1005758c:	2102      	movs	r1, #2
1005758e:	4301      	orrs	r1, r0
10057590:	80a1      	strh	r1, [r4, #4]
10057592:	2700      	movs	r7, #0
10057594:	4638      	mov	r0, r7
10057596:	b00b      	add	sp, #44	@ 0x2c
10057598:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005759a:	2223      	movs	r2, #35	@ 0x23
1005759c:	4638      	mov	r0, r7
1005759e:	f000 f837 	bl	10057610 <ACL_pkt_write_8b>
100575a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
100575a4:	1ca7      	adds	r7, r4, #2
100575a6:	2101      	movs	r1, #1
100575a8:	9505      	str	r5, [sp, #20]
100575aa:	2800      	cmp	r0, #0
100575ac:	d0ca      	beq.n	10057544 <GAT_att_srv_hvtx+0xd0>
100575ae:	900a      	str	r0, [sp, #40]	@ 0x28
100575b0:	9d07      	ldr	r5, [sp, #28]
100575b2:	89a8      	ldrh	r0, [r5, #12]
100575b4:	1840      	adds	r0, r0, r1
100575b6:	9108      	str	r1, [sp, #32]
100575b8:	b281      	uxth	r1, r0
100575ba:	1ebb      	subs	r3, r7, #2
100575bc:	2402      	movs	r4, #2
100575be:	4628      	mov	r0, r5
100575c0:	4622      	mov	r2, r4
100575c2:	4e12      	ldr	r6, [pc, #72]	@ (1005760c <__arm_cp.10_0>)
100575c4:	47b0      	blx	r6
100575c6:	89a8      	ldrh	r0, [r5, #12]
100575c8:	9e08      	ldr	r6, [sp, #32]
100575ca:	1830      	adds	r0, r6, r0
100575cc:	1c80      	adds	r0, r0, #2
100575ce:	b281      	uxth	r1, r0
100575d0:	4628      	mov	r0, r5
100575d2:	9409      	str	r4, [sp, #36]	@ 0x24
100575d4:	4622      	mov	r2, r4
100575d6:	463b      	mov	r3, r7
100575d8:	4c0c      	ldr	r4, [pc, #48]	@ (1005760c <__arm_cp.10_0>)
100575da:	47a0      	blx	r4
100575dc:	1d31      	adds	r1, r6, #4
100575de:	89a8      	ldrh	r0, [r5, #12]
100575e0:	1840      	adds	r0, r0, r1
100575e2:	b28e      	uxth	r6, r1
100575e4:	9906      	ldr	r1, [sp, #24]
100575e6:	1b8a      	subs	r2, r1, r6
100575e8:	8839      	ldrh	r1, [r7, #0]
100575ea:	428a      	cmp	r2, r1
100575ec:	db00      	blt.n	100575f0 <GAT_att_srv_hvtx+0x17c>
100575ee:	460a      	mov	r2, r1
100575f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
100575f2:	587b      	ldr	r3, [r7, r1]
100575f4:	b281      	uxth	r1, r0
100575f6:	b294      	uxth	r4, r2
100575f8:	4628      	mov	r0, r5
100575fa:	4622      	mov	r2, r4
100575fc:	4d03      	ldr	r5, [pc, #12]	@ (1005760c <__arm_cp.10_0>)
100575fe:	47a8      	blx	r5
10057600:	19a1      	adds	r1, r4, r6
10057602:	3708      	adds	r7, #8
10057604:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057606:	1e40      	subs	r0, r0, #1
10057608:	9d05      	ldr	r5, [sp, #20]
1005760a:	e7ce      	b.n	100575aa <GAT_att_srv_hvtx+0x136>

1005760c <__arm_cp.10_0>:
1005760c:	100551f5 	.word	0x100551f5

10057610 <ACL_pkt_write_8b>:
10057610:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10057612:	4614      	mov	r4, r2
10057614:	6840      	ldr	r0, [r0, #4]
10057616:	2920      	cmp	r1, #32
10057618:	d304      	bcc.n	10057624 <ACL_pkt_write_8b+0x14>
1005761a:	ad01      	add	r5, sp, #4
1005761c:	462a      	mov	r2, r5
1005761e:	f009 fd72 	bl	10061106 <Mem_Buff_get_buff_off>
10057622:	8829      	ldrh	r1, [r5, #0]
10057624:	1840      	adds	r0, r0, r1
10057626:	7104      	strb	r4, [r0, #4]
10057628:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005762a <GAT_att_srv_extract_write_packet_data>:
1005762a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005762c:	461d      	mov	r5, r3
1005762e:	4614      	mov	r4, r2
10057630:	460f      	mov	r7, r1
10057632:	4606      	mov	r6, r0
10057634:	f7ff fdb6 	bl	100571a4 <GAT_att_cmn_get_opcode>
10057638:	210e      	movs	r1, #14
1005763a:	43c9      	mvns	r1, r1
1005763c:	28d2      	cmp	r0, #210	@ 0xd2
1005763e:	d000      	beq.n	10057642 <GAT_att_srv_extract_write_packet_data+0x18>
10057640:	310c      	adds	r1, #12
10057642:	8870      	ldrh	r0, [r6, #2]
10057644:	1808      	adds	r0, r1, r0
10057646:	b282      	uxth	r2, r0
10057648:	9906      	ldr	r1, [sp, #24]
1005764a:	42ba      	cmp	r2, r7
1005764c:	d905      	bls.n	1005765a <GAT_att_srv_extract_write_packet_data+0x30>
1005764e:	200d      	movs	r0, #13
10057650:	7008      	strb	r0, [r1, #0]
10057652:	2000      	movs	r0, #0
10057654:	8028      	strh	r0, [r5, #0]
10057656:	2786      	movs	r7, #134	@ 0x86
10057658:	e009      	b.n	1005766e <GAT_att_srv_extract_write_packet_data+0x44>
1005765a:	2700      	movs	r7, #0
1005765c:	700f      	strb	r7, [r1, #0]
1005765e:	8028      	strh	r0, [r5, #0]
10057660:	89b0      	ldrh	r0, [r6, #12]
10057662:	1cc0      	adds	r0, r0, #3
10057664:	b281      	uxth	r1, r0
10057666:	4630      	mov	r0, r6
10057668:	4623      	mov	r3, r4
1005766a:	f7fd fda1 	bl	100551b0 <ACL_pkt_read>
1005766e:	4638      	mov	r0, r7
10057670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10057674 <GAT_att_srv_resp>:
10057674:	b5f0      	push	{r4, r5, r6, r7, lr}
10057676:	b089      	sub	sp, #36	@ 0x24
10057678:	461f      	mov	r7, r3
1005767a:	9203      	str	r2, [sp, #12]
1005767c:	460e      	mov	r6, r1
1005767e:	4605      	mov	r5, r0
10057680:	f7ff fc04 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
10057684:	2800      	cmp	r0, #0
10057686:	d045      	beq.n	10057714 <GAT_att_srv_resp+0xa0>
10057688:	4604      	mov	r4, r0
1005768a:	68c0      	ldr	r0, [r0, #12]
1005768c:	2800      	cmp	r0, #0
1005768e:	d041      	beq.n	10057714 <GAT_att_srv_resp+0xa0>
10057690:	9702      	str	r7, [sp, #8]
10057692:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10057694:	9001      	str	r0, [sp, #4]
10057696:	980e      	ldr	r0, [sp, #56]	@ 0x38
10057698:	9000      	str	r0, [sp, #0]
1005769a:	481f      	ldr	r0, [pc, #124]	@ (10057718 <__arm_cp.13_0>)
1005769c:	6807      	ldr	r7, [r0, #0]
1005769e:	3738      	adds	r7, #56	@ 0x38
100576a0:	683f      	ldr	r7, [r7, #0]
100576a2:	2f00      	cmp	r7, #0
100576a4:	d00f      	beq.n	100576c6 <GAT_att_srv_resp+0x52>
100576a6:	8838      	ldrh	r0, [r7, #0]
100576a8:	42a8      	cmp	r0, r5
100576aa:	d104      	bne.n	100576b6 <GAT_att_srv_resp+0x42>
100576ac:	4638      	mov	r0, r7
100576ae:	f002 fa7a 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
100576b2:	42b0      	cmp	r0, r6
100576b4:	d001      	beq.n	100576ba <GAT_att_srv_resp+0x46>
100576b6:	371c      	adds	r7, #28
100576b8:	e7f2      	b.n	100576a0 <GAT_att_srv_resp+0x2c>
100576ba:	4817      	ldr	r0, [pc, #92]	@ (10057718 <__arm_cp.13_0>)
100576bc:	6800      	ldr	r0, [r0, #0]
100576be:	3038      	adds	r0, #56	@ 0x38
100576c0:	4639      	mov	r1, r7
100576c2:	f00b fc5d 	bl	10062f80 <ACL_list_remove>
100576c6:	68e0      	ldr	r0, [r4, #12]
100576c8:	f7ff fd6c 	bl	100571a4 <GAT_att_cmn_get_opcode>
100576cc:	1e41      	subs	r1, r0, #1
100576ce:	9802      	ldr	r0, [sp, #8]
100576d0:	2800      	cmp	r0, #0
100576d2:	d013      	beq.n	100576fc <GAT_att_srv_resp+0x88>
100576d4:	b2c8      	uxtb	r0, r1
100576d6:	281e      	cmp	r0, #30
100576d8:	d007      	beq.n	100576ea <GAT_att_srv_resp+0x76>
100576da:	2240      	movs	r2, #64	@ 0x40
100576dc:	4011      	ands	r1, r2
100576de:	d104      	bne.n	100576ea <GAT_att_srv_resp+0x76>
100576e0:	68e3      	ldr	r3, [r4, #12]
100576e2:	9903      	ldr	r1, [sp, #12]
100576e4:	9a02      	ldr	r2, [sp, #8]
100576e6:	f000 f819 	bl	1005771c <GAT_att_srv_write_err_packet>
100576ea:	4620      	mov	r0, r4
100576ec:	f000 f82a 	bl	10057744 <GAT_att_srv_send_response>
100576f0:	2f00      	cmp	r7, #0
100576f2:	d00f      	beq.n	10057714 <GAT_att_srv_resp+0xa0>
100576f4:	4638      	mov	r0, r7
100576f6:	f7fd fd3f 	bl	10055178 <ACL_pkt_release>
100576fa:	e00b      	b.n	10057714 <GAT_att_srv_resp+0xa0>
100576fc:	a804      	add	r0, sp, #16
100576fe:	9a00      	ldr	r2, [sp, #0]
10057700:	8182      	strh	r2, [r0, #12]
10057702:	7041      	strb	r1, [r0, #1]
10057704:	2101      	movs	r1, #1
10057706:	7001      	strb	r1, [r0, #0]
10057708:	9901      	ldr	r1, [sp, #4]
1005770a:	9108      	str	r1, [sp, #32]
1005770c:	9406      	str	r4, [sp, #24]
1005770e:	9705      	str	r7, [sp, #20]
10057710:	f7ff fd88 	bl	10057224 <GAT_att_srv_run>
10057714:	b009      	add	sp, #36	@ 0x24
10057716:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057718 <__arm_cp.13_0>:
10057718:	20002420 	.word	0x20002420

1005771c <GAT_att_srv_write_err_packet>:
1005771c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005771e:	2b00      	cmp	r3, #0
10057720:	d00f      	beq.n	10057742 <GAT_att_srv_write_err_packet+0x26>
10057722:	461c      	mov	r4, r3
10057724:	466b      	mov	r3, sp
10057726:	7099      	strb	r1, [r3, #2]
10057728:	7058      	strb	r0, [r3, #1]
1005772a:	2001      	movs	r0, #1
1005772c:	7018      	strb	r0, [r3, #0]
1005772e:	711a      	strb	r2, [r3, #4]
10057730:	0a08      	lsrs	r0, r1, #8
10057732:	70d8      	strb	r0, [r3, #3]
10057734:	89a1      	ldrh	r1, [r4, #12]
10057736:	2505      	movs	r5, #5
10057738:	4620      	mov	r0, r4
1005773a:	462a      	mov	r2, r5
1005773c:	f7fd fd5a 	bl	100551f4 <ACL_pkt_write>
10057740:	8065      	strh	r5, [r4, #2]
10057742:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10057744 <GAT_att_srv_send_response>:
10057744:	b510      	push	{r4, lr}
10057746:	4604      	mov	r4, r0
10057748:	68c0      	ldr	r0, [r0, #12]
1005774a:	2800      	cmp	r0, #0
1005774c:	d015      	beq.n	1005777a <GAT_att_srv_send_response+0x36>
1005774e:	8841      	ldrh	r1, [r0, #2]
10057750:	1d09      	adds	r1, r1, #4
10057752:	b289      	uxth	r1, r1
10057754:	f7fd fd19 	bl	1005518a <ACL_pkt_resize>
10057758:	68e1      	ldr	r1, [r4, #12]
1005775a:	8960      	ldrh	r0, [r4, #10]
1005775c:	f7ff fc18 	bl	10056f90 <GAT_att_cmn_send>
10057760:	2800      	cmp	r0, #0
10057762:	d108      	bne.n	10057776 <GAT_att_srv_send_response+0x32>
10057764:	8962      	ldrh	r2, [r4, #10]
10057766:	8921      	ldrh	r1, [r4, #8]
10057768:	2000      	movs	r0, #0
1005776a:	f7ff fc01 	bl	10056f70 <GAT_att_cmn_stop_timer>
1005776e:	88a0      	ldrh	r0, [r4, #4]
10057770:	2101      	movs	r1, #1
10057772:	4388      	bics	r0, r1
10057774:	80a0      	strh	r0, [r4, #4]
10057776:	2000      	movs	r0, #0
10057778:	60e0      	str	r0, [r4, #12]
1005777a:	bd10      	pop	{r4, pc}

1005777c <GAT_att_srv_confirmation_pending>:
1005777c:	b5e0      	push	{r5, r6, r7, lr}
1005777e:	a801      	add	r0, sp, #4
10057780:	2102      	movs	r1, #2
10057782:	8001      	strh	r1, [r0, #0]
10057784:	9000      	str	r0, [sp, #0]
10057786:	2000      	movs	r0, #0
10057788:	4b04      	ldr	r3, [pc, #16]	@ (1005779c <__arm_cp.16_0>)
1005778a:	4601      	mov	r1, r0
1005778c:	4602      	mov	r2, r0
1005778e:	f7ff fabf 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
10057792:	3886      	subs	r0, #134	@ 0x86
10057794:	4241      	negs	r1, r0
10057796:	4148      	adcs	r0, r1
10057798:	bd8c      	pop	{r2, r3, r7, pc}
1005779a:	46c0      	nop			@ (mov r8, r8)

1005779c <__arm_cp.16_0>:
1005779c:	10056fbd 	.word	0x10056fbd

100577a0 <GAT_att_srv_request_user_pending>:
100577a0:	b510      	push	{r4, lr}
100577a2:	480a      	ldr	r0, [pc, #40]	@ (100577cc <__arm_cp.17_0>)
100577a4:	6804      	ldr	r4, [r0, #0]
100577a6:	3438      	adds	r4, #56	@ 0x38
100577a8:	6824      	ldr	r4, [r4, #0]
100577aa:	2c00      	cmp	r4, #0
100577ac:	d009      	beq.n	100577c2 <GAT_att_srv_request_user_pending+0x22>
100577ae:	4620      	mov	r0, r4
100577b0:	f7ff fcf8 	bl	100571a4 <GAT_att_cmn_get_opcode>
100577b4:	281e      	cmp	r0, #30
100577b6:	d002      	beq.n	100577be <GAT_att_srv_request_user_pending+0x1e>
100577b8:	2140      	movs	r1, #64	@ 0x40
100577ba:	4008      	ands	r0, r1
100577bc:	d003      	beq.n	100577c6 <GAT_att_srv_request_user_pending+0x26>
100577be:	341c      	adds	r4, #28
100577c0:	e7f2      	b.n	100577a8 <GAT_att_srv_request_user_pending+0x8>
100577c2:	2000      	movs	r0, #0
100577c4:	bd10      	pop	{r4, pc}
100577c6:	2001      	movs	r0, #1
100577c8:	bd10      	pop	{r4, pc}
100577ca:	46c0      	nop			@ (mov r8, r8)

100577cc <__arm_cp.17_0>:
100577cc:	20002420 	.word	0x20002420

100577d0 <GAT_att_srv_flush_user_pending_list>:
100577d0:	b570      	push	{r4, r5, r6, lr}
100577d2:	4d08      	ldr	r5, [pc, #32]	@ (100577f4 <__arm_cp.18_0>)
100577d4:	6828      	ldr	r0, [r5, #0]
100577d6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
100577d8:	2c00      	cmp	r4, #0
100577da:	d00a      	beq.n	100577f2 <GAT_att_srv_flush_user_pending_list+0x22>
100577dc:	69e6      	ldr	r6, [r4, #28]
100577de:	6828      	ldr	r0, [r5, #0]
100577e0:	3038      	adds	r0, #56	@ 0x38
100577e2:	4621      	mov	r1, r4
100577e4:	f00b fbcc 	bl	10062f80 <ACL_list_remove>
100577e8:	4620      	mov	r0, r4
100577ea:	f7fd fcc5 	bl	10055178 <ACL_pkt_release>
100577ee:	4634      	mov	r4, r6
100577f0:	e7f2      	b.n	100577d8 <GAT_att_srv_flush_user_pending_list+0x8>
100577f2:	bd70      	pop	{r4, r5, r6, pc}

100577f4 <__arm_cp.18_0>:
100577f4:	20002420 	.word	0x20002420

100577f8 <GAT_att_srv_exchange_mtu_exc>:
100577f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100577fa:	4604      	mov	r4, r0
100577fc:	6880      	ldr	r0, [r0, #8]
100577fe:	8941      	ldrh	r1, [r0, #10]
10057800:	2904      	cmp	r1, #4
10057802:	d11a      	bne.n	1005783a <GAT_att_srv_exchange_mtu_exc+0x42>
10057804:	6860      	ldr	r0, [r4, #4]
10057806:	8981      	ldrh	r1, [r0, #12]
10057808:	1c49      	adds	r1, r1, #1
1005780a:	b289      	uxth	r1, r1
1005780c:	f7fd fcd9 	bl	100551c2 <ACL_pkt_read_16b>
10057810:	4605      	mov	r5, r0
10057812:	2817      	cmp	r0, #23
10057814:	d800      	bhi.n	10057818 <GAT_att_srv_exchange_mtu_exc+0x20>
10057816:	2517      	movs	r5, #23
10057818:	4e1d      	ldr	r6, [pc, #116]	@ (10057890 <__arm_cp.19_0>)
1005781a:	8a30      	ldrh	r0, [r6, #16]
1005781c:	4285      	cmp	r5, r0
1005781e:	d300      	bcc.n	10057822 <GAT_att_srv_exchange_mtu_exc+0x2a>
10057820:	4605      	mov	r5, r0
10057822:	68a3      	ldr	r3, [r4, #8]
10057824:	8898      	ldrh	r0, [r3, #4]
10057826:	0700      	lsls	r0, r0, #28
10057828:	d40f      	bmi.n	1005784a <GAT_att_srv_exchange_mtu_exc+0x52>
1005782a:	8919      	ldrh	r1, [r3, #8]
1005782c:	2002      	movs	r0, #2
1005782e:	462a      	mov	r2, r5
10057830:	f00c fa66 	bl	10063d00 <aci_att_exchange_mtu_resp_event_push_noinline>
10057834:	2800      	cmp	r0, #0
10057836:	d014      	beq.n	10057862 <GAT_att_srv_exchange_mtu_exc+0x6a>
10057838:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005783a:	68c3      	ldr	r3, [r0, #12]
1005783c:	2002      	movs	r0, #2
1005783e:	2100      	movs	r1, #0
10057840:	2206      	movs	r2, #6
10057842:	f7ff ff6b 	bl	1005771c <GAT_att_srv_write_err_packet>
10057846:	2086      	movs	r0, #134	@ 0x86
10057848:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005784a:	88d8      	ldrh	r0, [r3, #6]
1005784c:	42a8      	cmp	r0, r5
1005784e:	d00e      	beq.n	1005786e <GAT_att_srv_exchange_mtu_exc+0x76>
10057850:	3308      	adds	r3, #8
10057852:	2042      	movs	r0, #66	@ 0x42
10057854:	2103      	movs	r1, #3
10057856:	2202      	movs	r2, #2
10057858:	f00c fd82 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
1005785c:	2800      	cmp	r0, #0
1005785e:	d1eb      	bne.n	10057838 <GAT_att_srv_exchange_mtu_exc+0x40>
10057860:	e005      	b.n	1005786e <GAT_att_srv_exchange_mtu_exc+0x76>
10057862:	68a0      	ldr	r0, [r4, #8]
10057864:	80c5      	strh	r5, [r0, #6]
10057866:	8881      	ldrh	r1, [r0, #4]
10057868:	2208      	movs	r2, #8
1005786a:	430a      	orrs	r2, r1
1005786c:	8082      	strh	r2, [r0, #4]
1005786e:	8a30      	ldrh	r0, [r6, #16]
10057870:	ab01      	add	r3, sp, #4
10057872:	7058      	strb	r0, [r3, #1]
10057874:	2503      	movs	r5, #3
10057876:	701d      	strb	r5, [r3, #0]
10057878:	0a00      	lsrs	r0, r0, #8
1005787a:	7098      	strb	r0, [r3, #2]
1005787c:	68a0      	ldr	r0, [r4, #8]
1005787e:	68c4      	ldr	r4, [r0, #12]
10057880:	89a1      	ldrh	r1, [r4, #12]
10057882:	4620      	mov	r0, r4
10057884:	462a      	mov	r2, r5
10057886:	f7fd fcb5 	bl	100551f4 <ACL_pkt_write>
1005788a:	8065      	strh	r5, [r4, #2]
1005788c:	2000      	movs	r0, #0
1005788e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10057890 <__arm_cp.19_0>:
10057890:	2000247c 	.word	0x2000247c

10057894 <GAT_att_srv_find_info_exc>:
10057894:	b5f0      	push	{r4, r5, r6, r7, lr}
10057896:	b08f      	sub	sp, #60	@ 0x3c
10057898:	4601      	mov	r1, r0
1005789a:	6840      	ldr	r0, [r0, #4]
1005789c:	9101      	str	r1, [sp, #4]
1005789e:	6889      	ldr	r1, [r1, #8]
100578a0:	68cf      	ldr	r7, [r1, #12]
100578a2:	ad0d      	add	r5, sp, #52	@ 0x34
100578a4:	ac0e      	add	r4, sp, #56	@ 0x38
100578a6:	4629      	mov	r1, r5
100578a8:	4622      	mov	r2, r4
100578aa:	f000 fc7c 	bl	100581a6 <GAT_att_srv_get_handle_range>
100578ae:	8828      	ldrh	r0, [r5, #0]
100578b0:	9007      	str	r0, [sp, #28]
100578b2:	f00d fa17 	bl	10064ce4 <GAT_att_db_find_from_handle>
100578b6:	4602      	mov	r2, r0
100578b8:	8820      	ldrh	r0, [r4, #0]
100578ba:	9002      	str	r0, [sp, #8]
100578bc:	2500      	movs	r5, #0
100578be:	462b      	mov	r3, r5
100578c0:	9500      	str	r5, [sp, #0]
100578c2:	9503      	str	r5, [sp, #12]
100578c4:	2a00      	cmp	r2, #0
100578c6:	9506      	str	r5, [sp, #24]
100578c8:	d050      	beq.n	1005796c <GAT_att_srv_find_info_exc+0xd8>
100578ca:	8850      	ldrh	r0, [r2, #2]
100578cc:	9007      	str	r0, [sp, #28]
100578ce:	9902      	ldr	r1, [sp, #8]
100578d0:	4288      	cmp	r0, r1
100578d2:	d84b      	bhi.n	1005796c <GAT_att_srv_find_info_exc+0xd8>
100578d4:	b2a8      	uxth	r0, r5
100578d6:	18c0      	adds	r0, r0, r3
100578d8:	9901      	ldr	r1, [sp, #4]
100578da:	6889      	ldr	r1, [r1, #8]
100578dc:	88c9      	ldrh	r1, [r1, #6]
100578de:	4288      	cmp	r0, r1
100578e0:	d844      	bhi.n	1005796c <GAT_att_srv_find_info_exc+0xd8>
100578e2:	461c      	mov	r4, r3
100578e4:	ad08      	add	r5, sp, #32
100578e6:	9205      	str	r2, [sp, #20]
100578e8:	4610      	mov	r0, r2
100578ea:	4629      	mov	r1, r5
100578ec:	f000 ffba 	bl	10058864 <GAT_srv_get_attr_type>
100578f0:	7c2e      	ldrb	r6, [r5, #16]
100578f2:	9803      	ldr	r0, [sp, #12]
100578f4:	0600      	lsls	r0, r0, #24
100578f6:	d006      	beq.n	10057906 <GAT_att_srv_find_info_exc+0x72>
100578f8:	9800      	ldr	r0, [sp, #0]
100578fa:	4286      	cmp	r6, r0
100578fc:	d139      	bne.n	10057972 <GAT_att_srv_find_info_exc+0xde>
100578fe:	08c0      	lsrs	r0, r0, #3
10057900:	9004      	str	r0, [sp, #16]
10057902:	9d06      	ldr	r5, [sp, #24]
10057904:	e016      	b.n	10057934 <GAT_att_srv_find_info_exc+0xa0>
10057906:	89b9      	ldrh	r1, [r7, #12]
10057908:	2205      	movs	r2, #5
1005790a:	4638      	mov	r0, r7
1005790c:	f7ff fe80 	bl	10057610 <ACL_pkt_write_8b>
10057910:	2e10      	cmp	r6, #16
10057912:	d001      	beq.n	10057918 <GAT_att_srv_find_info_exc+0x84>
10057914:	2202      	movs	r2, #2
10057916:	e000      	b.n	1005791a <GAT_att_srv_find_info_exc+0x86>
10057918:	2201      	movs	r2, #1
1005791a:	9d06      	ldr	r5, [sp, #24]
1005791c:	89b8      	ldrh	r0, [r7, #12]
1005791e:	1c40      	adds	r0, r0, #1
10057920:	b281      	uxth	r1, r0
10057922:	4638      	mov	r0, r7
10057924:	9203      	str	r2, [sp, #12]
10057926:	f7ff fe73 	bl	10057610 <ACL_pkt_write_8b>
1005792a:	1cad      	adds	r5, r5, #2
1005792c:	08f0      	lsrs	r0, r6, #3
1005792e:	9004      	str	r0, [sp, #16]
10057930:	1c84      	adds	r4, r0, #2
10057932:	9600      	str	r6, [sp, #0]
10057934:	89b8      	ldrh	r0, [r7, #12]
10057936:	1940      	adds	r0, r0, r5
10057938:	b281      	uxth	r1, r0
1005793a:	4638      	mov	r0, r7
1005793c:	9a07      	ldr	r2, [sp, #28]
1005793e:	f7fd fc50 	bl	100551e2 <ACL_pkt_write_16b>
10057942:	89b8      	ldrh	r0, [r7, #12]
10057944:	1828      	adds	r0, r5, r0
10057946:	1c86      	adds	r6, r0, #2
10057948:	a808      	add	r0, sp, #32
1005794a:	f00b fb00 	bl	10062f4e <UUID_get_value_p>
1005794e:	4603      	mov	r3, r0
10057950:	b2b1      	uxth	r1, r6
10057952:	9804      	ldr	r0, [sp, #16]
10057954:	b2c2      	uxtb	r2, r0
10057956:	4638      	mov	r0, r7
10057958:	f7fd fc4c 	bl	100551f4 <ACL_pkt_write>
1005795c:	b2e0      	uxtb	r0, r4
1005795e:	182d      	adds	r5, r5, r0
10057960:	9805      	ldr	r0, [sp, #20]
10057962:	f00d fa21 	bl	10064da8 <GAT_att_db_get_next>
10057966:	4602      	mov	r2, r0
10057968:	4623      	mov	r3, r4
1005796a:	e7ab      	b.n	100578c4 <GAT_att_srv_find_info_exc+0x30>
1005796c:	9803      	ldr	r0, [sp, #12]
1005796e:	0600      	lsls	r0, r0, #24
10057970:	d003      	beq.n	1005797a <GAT_att_srv_find_info_exc+0xe6>
10057972:	9806      	ldr	r0, [sp, #24]
10057974:	8078      	strh	r0, [r7, #2]
10057976:	2000      	movs	r0, #0
10057978:	e007      	b.n	1005798a <GAT_att_srv_find_info_exc+0xf6>
1005797a:	9807      	ldr	r0, [sp, #28]
1005797c:	b281      	uxth	r1, r0
1005797e:	2004      	movs	r0, #4
10057980:	220a      	movs	r2, #10
10057982:	463b      	mov	r3, r7
10057984:	f7ff feca 	bl	1005771c <GAT_att_srv_write_err_packet>
10057988:	2086      	movs	r0, #134	@ 0x86
1005798a:	b00f      	add	sp, #60	@ 0x3c
1005798c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005798e <GAT_att_srv_find_by_type_val_exc>:
1005798e:	b5f0      	push	{r4, r5, r6, r7, lr}
10057990:	b091      	sub	sp, #68	@ 0x44
10057992:	4607      	mov	r7, r0
10057994:	ac09      	add	r4, sp, #36	@ 0x24
10057996:	2010      	movs	r0, #16
10057998:	7420      	strb	r0, [r4, #16]
1005799a:	6878      	ldr	r0, [r7, #4]
1005799c:	8981      	ldrh	r1, [r0, #12]
1005799e:	1d49      	adds	r1, r1, #5
100579a0:	b289      	uxth	r1, r1
100579a2:	f7fd fc0e 	bl	100551c2 <ACL_pkt_read_16b>
100579a6:	81a0      	strh	r0, [r4, #12]
100579a8:	6878      	ldr	r0, [r7, #4]
100579aa:	ae0f      	add	r6, sp, #60	@ 0x3c
100579ac:	ad0e      	add	r5, sp, #56	@ 0x38
100579ae:	4631      	mov	r1, r6
100579b0:	462a      	mov	r2, r5
100579b2:	f000 fbf8 	bl	100581a6 <GAT_att_srv_get_handle_range>
100579b6:	8836      	ldrh	r6, [r6, #0]
100579b8:	6878      	ldr	r0, [r7, #4]
100579ba:	9706      	str	r7, [sp, #24]
100579bc:	68b9      	ldr	r1, [r7, #8]
100579be:	8844      	ldrh	r4, [r0, #2]
100579c0:	68c8      	ldr	r0, [r1, #12]
100579c2:	8981      	ldrh	r1, [r0, #12]
100579c4:	2207      	movs	r2, #7
100579c6:	9002      	str	r0, [sp, #8]
100579c8:	f7ff fe22 	bl	10057610 <ACL_pkt_write_8b>
100579cc:	1fe0      	subs	r0, r4, #7
100579ce:	8829      	ldrh	r1, [r5, #0]
100579d0:	9104      	str	r1, [sp, #16]
100579d2:	2101      	movs	r1, #1
100579d4:	9105      	str	r1, [sp, #20]
100579d6:	b280      	uxth	r0, r0
100579d8:	9003      	str	r0, [sp, #12]
100579da:	9601      	str	r6, [sp, #4]
100579dc:	9805      	ldr	r0, [sp, #20]
100579de:	b287      	uxth	r7, r0
100579e0:	1d3c      	adds	r4, r7, #4
100579e2:	9806      	ldr	r0, [sp, #24]
100579e4:	6880      	ldr	r0, [r0, #8]
100579e6:	88c0      	ldrh	r0, [r0, #6]
100579e8:	4284      	cmp	r4, r0
100579ea:	d83c      	bhi.n	10057a66 <GAT_att_srv_find_by_type_val_exc+0xd8>
100579ec:	b2b0      	uxth	r0, r6
100579ee:	aa09      	add	r2, sp, #36	@ 0x24
100579f0:	9904      	ldr	r1, [sp, #16]
100579f2:	f001 faa7 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
100579f6:	2800      	cmp	r0, #0
100579f8:	d035      	beq.n	10057a66 <GAT_att_srv_find_by_type_val_exc+0xd8>
100579fa:	4605      	mov	r5, r0
100579fc:	a810      	add	r0, sp, #64	@ 0x40
100579fe:	9000      	str	r0, [sp, #0]
10057a00:	2200      	movs	r2, #0
10057a02:	ab08      	add	r3, sp, #32
10057a04:	9806      	ldr	r0, [sp, #24]
10057a06:	4629      	mov	r1, r5
10057a08:	f000 fbe0 	bl	100581cc <GAT_att_srv_value_read>
10057a0c:	2886      	cmp	r0, #134	@ 0x86
10057a0e:	d028      	beq.n	10057a62 <GAT_att_srv_find_by_type_val_exc+0xd4>
10057a10:	2800      	cmp	r0, #0
10057a12:	d136      	bne.n	10057a82 <GAT_att_srv_find_by_type_val_exc+0xf4>
10057a14:	886e      	ldrh	r6, [r5, #2]
10057a16:	9808      	ldr	r0, [sp, #32]
10057a18:	6843      	ldr	r3, [r0, #4]
10057a1a:	9806      	ldr	r0, [sp, #24]
10057a1c:	6840      	ldr	r0, [r0, #4]
10057a1e:	8981      	ldrh	r1, [r0, #12]
10057a20:	1dc9      	adds	r1, r1, #7
10057a22:	b289      	uxth	r1, r1
10057a24:	9f03      	ldr	r7, [sp, #12]
10057a26:	463a      	mov	r2, r7
10057a28:	f7fd fbb9 	bl	1005519e <ACL_pkt_cmp>
10057a2c:	9908      	ldr	r1, [sp, #32]
10057a2e:	8809      	ldrh	r1, [r1, #0]
10057a30:	42b9      	cmp	r1, r7
10057a32:	d116      	bne.n	10057a62 <GAT_att_srv_find_by_type_val_exc+0xd4>
10057a34:	2800      	cmp	r0, #0
10057a36:	d114      	bne.n	10057a62 <GAT_att_srv_find_by_type_val_exc+0xd4>
10057a38:	af07      	add	r7, sp, #28
10057a3a:	703e      	strb	r6, [r7, #0]
10057a3c:	0a30      	lsrs	r0, r6, #8
10057a3e:	7078      	strb	r0, [r7, #1]
10057a40:	4628      	mov	r0, r5
10057a42:	f000 ff37 	bl	100588b4 <GAT_srv_get_att_group_end_handle>
10057a46:	4606      	mov	r6, r0
10057a48:	70b8      	strb	r0, [r7, #2]
10057a4a:	0a00      	lsrs	r0, r0, #8
10057a4c:	70f8      	strb	r0, [r7, #3]
10057a4e:	9802      	ldr	r0, [sp, #8]
10057a50:	8981      	ldrh	r1, [r0, #12]
10057a52:	9a05      	ldr	r2, [sp, #20]
10057a54:	1889      	adds	r1, r1, r2
10057a56:	b289      	uxth	r1, r1
10057a58:	2204      	movs	r2, #4
10057a5a:	463b      	mov	r3, r7
10057a5c:	f7fd fbca 	bl	100551f4 <ACL_pkt_write>
10057a60:	9405      	str	r4, [sp, #20]
10057a62:	1c76      	adds	r6, r6, #1
10057a64:	e7ba      	b.n	100579dc <GAT_att_srv_find_by_type_val_exc+0x4e>
10057a66:	2f01      	cmp	r7, #1
10057a68:	d107      	bne.n	10057a7a <GAT_att_srv_find_by_type_val_exc+0xec>
10057a6a:	2006      	movs	r0, #6
10057a6c:	220a      	movs	r2, #10
10057a6e:	9901      	ldr	r1, [sp, #4]
10057a70:	9b02      	ldr	r3, [sp, #8]
10057a72:	f7ff fe53 	bl	1005771c <GAT_att_srv_write_err_packet>
10057a76:	2086      	movs	r0, #134	@ 0x86
10057a78:	e003      	b.n	10057a82 <GAT_att_srv_find_by_type_val_exc+0xf4>
10057a7a:	9802      	ldr	r0, [sp, #8]
10057a7c:	9905      	ldr	r1, [sp, #20]
10057a7e:	8041      	strh	r1, [r0, #2]
10057a80:	2000      	movs	r0, #0
10057a82:	b011      	add	sp, #68	@ 0x44
10057a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057a86 <GAT_att_srv_read_by_type_exc>:
10057a86:	b5f0      	push	{r4, r5, r6, r7, lr}
10057a88:	b097      	sub	sp, #92	@ 0x5c
10057a8a:	4604      	mov	r4, r0
10057a8c:	6840      	ldr	r0, [r0, #4]
10057a8e:	a915      	add	r1, sp, #84	@ 0x54
10057a90:	aa14      	add	r2, sp, #80	@ 0x50
10057a92:	f000 fb88 	bl	100581a6 <GAT_att_srv_get_handle_range>
10057a96:	940a      	str	r4, [sp, #40]	@ 0x28
10057a98:	6860      	ldr	r0, [r4, #4]
10057a9a:	8981      	ldrh	r1, [r0, #12]
10057a9c:	1d49      	adds	r1, r1, #5
10057a9e:	8842      	ldrh	r2, [r0, #2]
10057aa0:	b289      	uxth	r1, r1
10057aa2:	2a07      	cmp	r2, #7
10057aa4:	d105      	bne.n	10057ab2 <GAT_att_srv_read_by_type_exc+0x2c>
10057aa6:	f7fd fb8c 	bl	100551c2 <ACL_pkt_read_16b>
10057aaa:	a90f      	add	r1, sp, #60	@ 0x3c
10057aac:	8188      	strh	r0, [r1, #12]
10057aae:	2010      	movs	r0, #16
10057ab0:	e004      	b.n	10057abc <GAT_att_srv_read_by_type_exc+0x36>
10057ab2:	2210      	movs	r2, #16
10057ab4:	ab0f      	add	r3, sp, #60	@ 0x3c
10057ab6:	f7fd fb7b 	bl	100551b0 <ACL_pkt_read>
10057aba:	2080      	movs	r0, #128	@ 0x80
10057abc:	a90f      	add	r1, sp, #60	@ 0x3c
10057abe:	7408      	strb	r0, [r1, #16]
10057ac0:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057ac2:	7840      	ldrb	r0, [r0, #1]
10057ac4:	2810      	cmp	r0, #16
10057ac6:	d001      	beq.n	10057acc <GAT_att_srv_read_by_type_exc+0x46>
10057ac8:	2102      	movs	r1, #2
10057aca:	e000      	b.n	10057ace <GAT_att_srv_read_by_type_exc+0x48>
10057acc:	2104      	movs	r1, #4
10057ace:	9107      	str	r1, [sp, #28]
10057ad0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10057ad2:	6891      	ldr	r1, [r2, #8]
10057ad4:	68cc      	ldr	r4, [r1, #12]
10057ad6:	88cb      	ldrh	r3, [r1, #6]
10057ad8:	9305      	str	r3, [sp, #20]
10057ada:	7812      	ldrb	r2, [r2, #0]
10057adc:	2a00      	cmp	r2, #0
10057ade:	9404      	str	r4, [sp, #16]
10057ae0:	d00a      	beq.n	10057af8 <GAT_att_srv_read_by_type_exc+0x72>
10057ae2:	8865      	ldrh	r5, [r4, #2]
10057ae4:	2d02      	cmp	r5, #2
10057ae6:	d315      	bcc.n	10057b14 <GAT_att_srv_read_by_type_exc+0x8e>
10057ae8:	89a0      	ldrh	r0, [r4, #12]
10057aea:	1c40      	adds	r0, r0, #1
10057aec:	b281      	uxth	r1, r0
10057aee:	4620      	mov	r0, r4
10057af0:	f000 fba9 	bl	10058246 <ACL_pkt_read_8b>
10057af4:	4606      	mov	r6, r0
10057af6:	e00e      	b.n	10057b16 <GAT_att_srv_read_by_type_exc+0x90>
10057af8:	aa15      	add	r2, sp, #84	@ 0x54
10057afa:	8815      	ldrh	r5, [r2, #0]
10057afc:	2810      	cmp	r0, #16
10057afe:	d112      	bne.n	10057b26 <GAT_att_srv_read_by_type_exc+0xa0>
10057b00:	a80f      	add	r0, sp, #60	@ 0x3c
10057b02:	f001 f981 	bl	10058e08 <GAT_srv_is_supported_grouping_type>
10057b06:	2800      	cmp	r0, #0
10057b08:	d100      	bne.n	10057b0c <GAT_att_srv_read_by_type_exc+0x86>
10057b0a:	e0b8      	b.n	10057c7e <GAT_att_srv_read_by_type_exc+0x1f8>
10057b0c:	9508      	str	r5, [sp, #32]
10057b0e:	89a1      	ldrh	r1, [r4, #12]
10057b10:	2211      	movs	r2, #17
10057b12:	e01b      	b.n	10057b4c <GAT_att_srv_read_by_type_exc+0xc6>
10057b14:	2600      	movs	r6, #0
10057b16:	89a0      	ldrh	r0, [r4, #12]
10057b18:	1940      	adds	r0, r0, r5
10057b1a:	b281      	uxth	r1, r0
10057b1c:	4620      	mov	r0, r4
10057b1e:	f7fd fb50 	bl	100551c2 <ACL_pkt_read_16b>
10057b22:	9008      	str	r0, [sp, #32]
10057b24:	e018      	b.n	10057b58 <GAT_att_srv_read_by_type_exc+0xd2>
10057b26:	a80b      	add	r0, sp, #44	@ 0x2c
10057b28:	8105      	strh	r5, [r0, #8]
10057b2a:	2202      	movs	r2, #2
10057b2c:	7102      	strb	r2, [r0, #4]
10057b2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10057b30:	8142      	strh	r2, [r0, #10]
10057b32:	910b      	str	r1, [sp, #44]	@ 0x2c
10057b34:	a90f      	add	r1, sp, #60	@ 0x3c
10057b36:	910e      	str	r1, [sp, #56]	@ 0x38
10057b38:	f001 f9a8 	bl	10058e8c <GAT_srv_check_change_aware>
10057b3c:	2886      	cmp	r0, #134	@ 0x86
10057b3e:	d102      	bne.n	10057b46 <GAT_att_srv_read_by_type_exc+0xc0>
10057b40:	a816      	add	r0, sp, #88	@ 0x58
10057b42:	2212      	movs	r2, #18
10057b44:	e09d      	b.n	10057c82 <GAT_att_srv_read_by_type_exc+0x1fc>
10057b46:	9508      	str	r5, [sp, #32]
10057b48:	89a1      	ldrh	r1, [r4, #12]
10057b4a:	2209      	movs	r2, #9
10057b4c:	4620      	mov	r0, r4
10057b4e:	f7ff fd5f 	bl	10057610 <ACL_pkt_write_8b>
10057b52:	2501      	movs	r5, #1
10057b54:	8065      	strh	r5, [r4, #2]
10057b56:	2600      	movs	r6, #0
10057b58:	9805      	ldr	r0, [sp, #20]
10057b5a:	1e80      	subs	r0, r0, #2
10057b5c:	9001      	str	r0, [sp, #4]
10057b5e:	a814      	add	r0, sp, #80	@ 0x50
10057b60:	8800      	ldrh	r0, [r0, #0]
10057b62:	9003      	str	r0, [sp, #12]
10057b64:	9609      	str	r6, [sp, #36]	@ 0x24
10057b66:	b2f6      	uxtb	r6, r6
10057b68:	9506      	str	r5, [sp, #24]
10057b6a:	b2af      	uxth	r7, r5
10057b6c:	19b8      	adds	r0, r7, r6
10057b6e:	9905      	ldr	r1, [sp, #20]
10057b70:	4288      	cmp	r0, r1
10057b72:	d874      	bhi.n	10057c5e <GAT_att_srv_read_by_type_exc+0x1d8>
10057b74:	9808      	ldr	r0, [sp, #32]
10057b76:	b285      	uxth	r5, r0
10057b78:	aa0f      	add	r2, sp, #60	@ 0x3c
10057b7a:	4628      	mov	r0, r5
10057b7c:	9903      	ldr	r1, [sp, #12]
10057b7e:	f001 f9e1 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
10057b82:	2800      	cmp	r0, #0
10057b84:	d06b      	beq.n	10057c5e <GAT_att_srv_read_by_type_exc+0x1d8>
10057b86:	4604      	mov	r4, r0
10057b88:	9502      	str	r5, [sp, #8]
10057b8a:	a816      	add	r0, sp, #88	@ 0x58
10057b8c:	9000      	str	r0, [sp, #0]
10057b8e:	2500      	movs	r5, #0
10057b90:	ab0b      	add	r3, sp, #44	@ 0x2c
10057b92:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057b94:	4621      	mov	r1, r4
10057b96:	462a      	mov	r2, r5
10057b98:	f000 fb18 	bl	100581cc <GAT_att_srv_value_read>
10057b9c:	2800      	cmp	r0, #0
10057b9e:	d14f      	bne.n	10057c40 <GAT_att_srv_read_by_type_exc+0x1ba>
10057ba0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10057ba2:	8800      	ldrh	r0, [r0, #0]
10057ba4:	9907      	ldr	r1, [sp, #28]
10057ba6:	1809      	adds	r1, r1, r0
10057ba8:	2f01      	cmp	r7, #1
10057baa:	d111      	bne.n	10057bd0 <GAT_att_srv_read_by_type_exc+0x14a>
10057bac:	29ff      	cmp	r1, #255	@ 0xff
10057bae:	d300      	bcc.n	10057bb2 <GAT_att_srv_read_by_type_exc+0x12c>
10057bb0:	21ff      	movs	r1, #255	@ 0xff
10057bb2:	9801      	ldr	r0, [sp, #4]
10057bb4:	4281      	cmp	r1, r0
10057bb6:	d300      	bcc.n	10057bba <GAT_att_srv_read_by_type_exc+0x134>
10057bb8:	9901      	ldr	r1, [sp, #4]
10057bba:	9109      	str	r1, [sp, #36]	@ 0x24
10057bbc:	b2ca      	uxtb	r2, r1
10057bbe:	9e04      	ldr	r6, [sp, #16]
10057bc0:	89b0      	ldrh	r0, [r6, #12]
10057bc2:	1c40      	adds	r0, r0, #1
10057bc4:	b281      	uxth	r1, r0
10057bc6:	4630      	mov	r0, r6
10057bc8:	f7ff fd22 	bl	10057610 <ACL_pkt_write_8b>
10057bcc:	2702      	movs	r7, #2
10057bce:	e003      	b.n	10057bd8 <GAT_att_srv_read_by_type_exc+0x152>
10057bd0:	42b1      	cmp	r1, r6
10057bd2:	9e04      	ldr	r6, [sp, #16]
10057bd4:	9f06      	ldr	r7, [sp, #24]
10057bd6:	d15c      	bne.n	10057c92 <GAT_att_srv_read_by_type_exc+0x20c>
10057bd8:	8865      	ldrh	r5, [r4, #2]
10057bda:	4620      	mov	r0, r4
10057bdc:	f000 fe6a 	bl	100588b4 <GAT_srv_get_att_group_end_handle>
10057be0:	9008      	str	r0, [sp, #32]
10057be2:	89b0      	ldrh	r0, [r6, #12]
10057be4:	19c0      	adds	r0, r0, r7
10057be6:	b281      	uxth	r1, r0
10057be8:	4630      	mov	r0, r6
10057bea:	462a      	mov	r2, r5
10057bec:	f7fd faf9 	bl	100551e2 <ACL_pkt_write_16b>
10057bf0:	9807      	ldr	r0, [sp, #28]
10057bf2:	9909      	ldr	r1, [sp, #36]	@ 0x24
10057bf4:	1a0a      	subs	r2, r1, r0
10057bf6:	463c      	mov	r4, r7
10057bf8:	1cbf      	adds	r7, r7, #2
10057bfa:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057bfc:	7840      	ldrb	r0, [r0, #1]
10057bfe:	2810      	cmp	r0, #16
10057c00:	d10a      	bne.n	10057c18 <GAT_att_srv_read_by_type_exc+0x192>
10057c02:	89b0      	ldrh	r0, [r6, #12]
10057c04:	19c0      	adds	r0, r0, r7
10057c06:	b281      	uxth	r1, r0
10057c08:	4630      	mov	r0, r6
10057c0a:	9d08      	ldr	r5, [sp, #32]
10057c0c:	4617      	mov	r7, r2
10057c0e:	462a      	mov	r2, r5
10057c10:	f7fd fae7 	bl	100551e2 <ACL_pkt_write_16b>
10057c14:	463a      	mov	r2, r7
10057c16:	1d27      	adds	r7, r4, #4
10057c18:	462c      	mov	r4, r5
10057c1a:	89b0      	ldrh	r0, [r6, #12]
10057c1c:	19c0      	adds	r0, r0, r7
10057c1e:	b281      	uxth	r1, r0
10057c20:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10057c22:	6843      	ldr	r3, [r0, #4]
10057c24:	b2d5      	uxtb	r5, r2
10057c26:	4630      	mov	r0, r6
10057c28:	462a      	mov	r2, r5
10057c2a:	f7fd fae3 	bl	100551f4 <ACL_pkt_write>
10057c2e:	197d      	adds	r5, r7, r5
10057c30:	8075      	strh	r5, [r6, #2]
10057c32:	2002      	movs	r0, #2
10057c34:	990a      	ldr	r1, [sp, #40]	@ 0x28
10057c36:	7008      	strb	r0, [r1, #0]
10057c38:	1c60      	adds	r0, r4, #1
10057c3a:	9008      	str	r0, [sp, #32]
10057c3c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10057c3e:	e791      	b.n	10057b64 <GAT_att_srv_read_by_type_exc+0xde>
10057c40:	2886      	cmp	r0, #134	@ 0x86
10057c42:	9a06      	ldr	r2, [sp, #24]
10057c44:	d016      	beq.n	10057c74 <GAT_att_srv_read_by_type_exc+0x1ee>
10057c46:	2884      	cmp	r0, #132	@ 0x84
10057c48:	4605      	mov	r5, r0
10057c4a:	9804      	ldr	r0, [sp, #16]
10057c4c:	d121      	bne.n	10057c92 <GAT_att_srv_read_by_type_exc+0x20c>
10057c4e:	8981      	ldrh	r1, [r0, #12]
10057c50:	1889      	adds	r1, r1, r2
10057c52:	b289      	uxth	r1, r1
10057c54:	9a02      	ldr	r2, [sp, #8]
10057c56:	f7fd fac4 	bl	100551e2 <ACL_pkt_write_16b>
10057c5a:	2584      	movs	r5, #132	@ 0x84
10057c5c:	e019      	b.n	10057c92 <GAT_att_srv_read_by_type_exc+0x20c>
10057c5e:	2f01      	cmp	r7, #1
10057c60:	d106      	bne.n	10057c70 <GAT_att_srv_read_by_type_exc+0x1ea>
10057c62:	a816      	add	r0, sp, #88	@ 0x58
10057c64:	220a      	movs	r2, #10
10057c66:	7002      	strb	r2, [r0, #0]
10057c68:	a815      	add	r0, sp, #84	@ 0x54
10057c6a:	8805      	ldrh	r5, [r0, #0]
10057c6c:	9c04      	ldr	r4, [sp, #16]
10057c6e:	e009      	b.n	10057c84 <GAT_att_srv_read_by_type_exc+0x1fe>
10057c70:	2500      	movs	r5, #0
10057c72:	e00e      	b.n	10057c92 <GAT_att_srv_read_by_type_exc+0x20c>
10057c74:	a816      	add	r0, sp, #88	@ 0x58
10057c76:	7802      	ldrb	r2, [r0, #0]
10057c78:	9c04      	ldr	r4, [sp, #16]
10057c7a:	9d08      	ldr	r5, [sp, #32]
10057c7c:	e002      	b.n	10057c84 <GAT_att_srv_read_by_type_exc+0x1fe>
10057c7e:	a816      	add	r0, sp, #88	@ 0x58
10057c80:	2210      	movs	r2, #16
10057c82:	7002      	strb	r2, [r0, #0]
10057c84:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057c86:	7840      	ldrb	r0, [r0, #1]
10057c88:	b2a9      	uxth	r1, r5
10057c8a:	4623      	mov	r3, r4
10057c8c:	f7ff fd46 	bl	1005771c <GAT_att_srv_write_err_packet>
10057c90:	2586      	movs	r5, #134	@ 0x86
10057c92:	4628      	mov	r0, r5
10057c94:	b017      	add	sp, #92	@ 0x5c
10057c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057c98 <GAT_att_srv_read_exc>:
10057c98:	b5f0      	push	{r4, r5, r6, r7, lr}
10057c9a:	b08b      	sub	sp, #44	@ 0x2c
10057c9c:	4605      	mov	r5, r0
10057c9e:	6880      	ldr	r0, [r0, #8]
10057ca0:	68c4      	ldr	r4, [r0, #12]
10057ca2:	88c7      	ldrh	r7, [r0, #6]
10057ca4:	7828      	ldrb	r0, [r5, #0]
10057ca6:	2800      	cmp	r0, #0
10057ca8:	d024      	beq.n	10057cf4 <GAT_att_srv_read_exc+0x5c>
10057caa:	462e      	mov	r6, r5
10057cac:	360c      	adds	r6, #12
10057cae:	9605      	str	r6, [sp, #20]
10057cb0:	6868      	ldr	r0, [r5, #4]
10057cb2:	8980      	ldrh	r0, [r0, #12]
10057cb4:	1c40      	adds	r0, r0, #1
10057cb6:	b281      	uxth	r1, r0
10057cb8:	2204      	movs	r2, #4
10057cba:	ab04      	add	r3, sp, #16
10057cbc:	4620      	mov	r0, r4
10057cbe:	f7fd fa77 	bl	100551b0 <ACL_pkt_read>
10057cc2:	8830      	ldrh	r0, [r6, #0]
10057cc4:	7869      	ldrb	r1, [r5, #1]
10057cc6:	1e7f      	subs	r7, r7, #1
10057cc8:	290c      	cmp	r1, #12
10057cca:	d103      	bne.n	10057cd4 <GAT_att_srv_read_exc+0x3c>
10057ccc:	4287      	cmp	r7, r0
10057cce:	d253      	bcs.n	10057d78 <GAT_att_srv_read_exc+0xe0>
10057cd0:	9904      	ldr	r1, [sp, #16]
10057cd2:	1a40      	subs	r0, r0, r1
10057cd4:	b280      	uxth	r0, r0
10057cd6:	4287      	cmp	r7, r0
10057cd8:	d300      	bcc.n	10057cdc <GAT_att_srv_read_exc+0x44>
10057cda:	4607      	mov	r7, r0
10057cdc:	b2ba      	uxth	r2, r7
10057cde:	6873      	ldr	r3, [r6, #4]
10057ce0:	89a0      	ldrh	r0, [r4, #12]
10057ce2:	1c40      	adds	r0, r0, #1
10057ce4:	b281      	uxth	r1, r0
10057ce6:	4620      	mov	r0, r4
10057ce8:	f7fd fa84 	bl	100551f4 <ACL_pkt_write>
10057cec:	1c78      	adds	r0, r7, #1
10057cee:	8060      	strh	r0, [r4, #2]
10057cf0:	2000      	movs	r0, #0
10057cf2:	e04d      	b.n	10057d90 <GAT_att_srv_read_exc+0xf8>
10057cf4:	7868      	ldrb	r0, [r5, #1]
10057cf6:	280c      	cmp	r0, #12
10057cf8:	9702      	str	r7, [sp, #8]
10057cfa:	d107      	bne.n	10057d0c <GAT_att_srv_read_exc+0x74>
10057cfc:	6868      	ldr	r0, [r5, #4]
10057cfe:	8981      	ldrh	r1, [r0, #12]
10057d00:	1cc9      	adds	r1, r1, #3
10057d02:	b289      	uxth	r1, r1
10057d04:	f7fd fa5d 	bl	100551c2 <ACL_pkt_read_16b>
10057d08:	220d      	movs	r2, #13
10057d0a:	e001      	b.n	10057d10 <GAT_att_srv_read_exc+0x78>
10057d0c:	220b      	movs	r2, #11
10057d0e:	2000      	movs	r0, #0
10057d10:	af04      	add	r7, sp, #16
10057d12:	9003      	str	r0, [sp, #12]
10057d14:	8038      	strh	r0, [r7, #0]
10057d16:	89a1      	ldrh	r1, [r4, #12]
10057d18:	4620      	mov	r0, r4
10057d1a:	f7ff fc79 	bl	10057610 <ACL_pkt_write_8b>
10057d1e:	6868      	ldr	r0, [r5, #4]
10057d20:	8981      	ldrh	r1, [r0, #12]
10057d22:	1c49      	adds	r1, r1, #1
10057d24:	b289      	uxth	r1, r1
10057d26:	f7fd fa4c 	bl	100551c2 <ACL_pkt_read_16b>
10057d2a:	4606      	mov	r6, r0
10057d2c:	8078      	strh	r0, [r7, #2]
10057d2e:	a807      	add	r0, sp, #28
10057d30:	8106      	strh	r6, [r0, #8]
10057d32:	2701      	movs	r7, #1
10057d34:	7107      	strb	r7, [r0, #4]
10057d36:	68a9      	ldr	r1, [r5, #8]
10057d38:	9107      	str	r1, [sp, #28]
10057d3a:	f001 f8a7 	bl	10058e8c <GAT_srv_check_change_aware>
10057d3e:	2886      	cmp	r0, #134	@ 0x86
10057d40:	d101      	bne.n	10057d46 <GAT_att_srv_read_exc+0xae>
10057d42:	2712      	movs	r7, #18
10057d44:	e015      	b.n	10057d72 <GAT_att_srv_read_exc+0xda>
10057d46:	4630      	mov	r0, r6
10057d48:	f00c ffa4 	bl	10064c94 <GAT_att_db_find_by_handle>
10057d4c:	2800      	cmp	r0, #0
10057d4e:	d010      	beq.n	10057d72 <GAT_att_srv_read_exc+0xda>
10057d50:	4601      	mov	r1, r0
10057d52:	a806      	add	r0, sp, #24
10057d54:	9000      	str	r0, [sp, #0]
10057d56:	ab05      	add	r3, sp, #20
10057d58:	4628      	mov	r0, r5
10057d5a:	9a03      	ldr	r2, [sp, #12]
10057d5c:	f000 fa36 	bl	100581cc <GAT_att_srv_value_read>
10057d60:	2800      	cmp	r0, #0
10057d62:	d017      	beq.n	10057d94 <GAT_att_srv_read_exc+0xfc>
10057d64:	2884      	cmp	r0, #132	@ 0x84
10057d66:	d018      	beq.n	10057d9a <GAT_att_srv_read_exc+0x102>
10057d68:	2886      	cmp	r0, #134	@ 0x86
10057d6a:	d111      	bne.n	10057d90 <GAT_att_srv_read_exc+0xf8>
10057d6c:	a806      	add	r0, sp, #24
10057d6e:	7807      	ldrb	r7, [r0, #0]
10057d70:	e007      	b.n	10057d82 <GAT_att_srv_read_exc+0xea>
10057d72:	a806      	add	r0, sp, #24
10057d74:	7007      	strb	r7, [r0, #0]
10057d76:	e004      	b.n	10057d82 <GAT_att_srv_read_exc+0xea>
10057d78:	a806      	add	r0, sp, #24
10057d7a:	270b      	movs	r7, #11
10057d7c:	7007      	strb	r7, [r0, #0]
10057d7e:	a804      	add	r0, sp, #16
10057d80:	8846      	ldrh	r6, [r0, #2]
10057d82:	7868      	ldrb	r0, [r5, #1]
10057d84:	4631      	mov	r1, r6
10057d86:	463a      	mov	r2, r7
10057d88:	4623      	mov	r3, r4
10057d8a:	f7ff fcc7 	bl	1005771c <GAT_att_srv_write_err_packet>
10057d8e:	2086      	movs	r0, #134	@ 0x86
10057d90:	b00b      	add	sp, #44	@ 0x2c
10057d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057d94:	9e05      	ldr	r6, [sp, #20]
10057d96:	9f02      	ldr	r7, [sp, #8]
10057d98:	e793      	b.n	10057cc2 <GAT_att_srv_read_exc+0x2a>
10057d9a:	89a0      	ldrh	r0, [r4, #12]
10057d9c:	1c40      	adds	r0, r0, #1
10057d9e:	b281      	uxth	r1, r0
10057da0:	2204      	movs	r2, #4
10057da2:	ab04      	add	r3, sp, #16
10057da4:	4620      	mov	r0, r4
10057da6:	f7fd fa25 	bl	100551f4 <ACL_pkt_write>
10057daa:	2084      	movs	r0, #132	@ 0x84
10057dac:	e7f0      	b.n	10057d90 <GAT_att_srv_read_exc+0xf8>

10057dae <GAT_att_srv_read_multi_exc>:
10057dae:	b5f0      	push	{r4, r5, r6, r7, lr}
10057db0:	b08d      	sub	sp, #52	@ 0x34
10057db2:	6881      	ldr	r1, [r0, #8]
10057db4:	68ce      	ldr	r6, [r1, #12]
10057db6:	88c9      	ldrh	r1, [r1, #6]
10057db8:	9106      	str	r1, [sp, #24]
10057dba:	7801      	ldrb	r1, [r0, #0]
10057dbc:	2900      	cmp	r1, #0
10057dbe:	9007      	str	r0, [sp, #28]
10057dc0:	d009      	beq.n	10057dd6 <GAT_att_srv_read_multi_exc+0x28>
10057dc2:	8877      	ldrh	r7, [r6, #2]
10057dc4:	89b0      	ldrh	r0, [r6, #12]
10057dc6:	19c0      	adds	r0, r0, r7
10057dc8:	b281      	uxth	r1, r0
10057dca:	4630      	mov	r0, r6
10057dcc:	f7fd f9f9 	bl	100551c2 <ACL_pkt_read_16b>
10057dd0:	9907      	ldr	r1, [sp, #28]
10057dd2:	4602      	mov	r2, r0
10057dd4:	e00c      	b.n	10057df0 <GAT_att_srv_read_multi_exc+0x42>
10057dd6:	7840      	ldrb	r0, [r0, #1]
10057dd8:	280e      	cmp	r0, #14
10057dda:	d001      	beq.n	10057de0 <GAT_att_srv_read_multi_exc+0x32>
10057ddc:	2221      	movs	r2, #33	@ 0x21
10057dde:	e000      	b.n	10057de2 <GAT_att_srv_read_multi_exc+0x34>
10057de0:	220f      	movs	r2, #15
10057de2:	89b1      	ldrh	r1, [r6, #12]
10057de4:	4630      	mov	r0, r6
10057de6:	f7ff fc13 	bl	10057610 <ACL_pkt_write_8b>
10057dea:	2201      	movs	r2, #1
10057dec:	4617      	mov	r7, r2
10057dee:	9907      	ldr	r1, [sp, #28]
10057df0:	6848      	ldr	r0, [r1, #4]
10057df2:	7880      	ldrb	r0, [r0, #2]
10057df4:	1a80      	subs	r0, r0, r2
10057df6:	b2c0      	uxtb	r0, r0
10057df8:	0845      	lsrs	r5, r0, #1
10057dfa:	7808      	ldrb	r0, [r1, #0]
10057dfc:	2800      	cmp	r0, #0
10057dfe:	9602      	str	r6, [sp, #8]
10057e00:	d066      	beq.n	10057ed0 <GAT_att_srv_read_multi_exc+0x122>
10057e02:	9907      	ldr	r1, [sp, #28]
10057e04:	4608      	mov	r0, r1
10057e06:	300c      	adds	r0, #12
10057e08:	9001      	str	r0, [sp, #4]
10057e0a:	b2ed      	uxtb	r5, r5
10057e0c:	35ff      	adds	r5, #255	@ 0xff
10057e0e:	b2e8      	uxtb	r0, r5
10057e10:	2300      	movs	r3, #0
10057e12:	9303      	str	r3, [sp, #12]
10057e14:	42a8      	cmp	r0, r5
10057e16:	d100      	bne.n	10057e1a <GAT_att_srv_read_multi_exc+0x6c>
10057e18:	e0b3      	b.n	10057f82 <GAT_att_srv_read_multi_exc+0x1d4>
10057e1a:	b2bc      	uxth	r4, r7
10057e1c:	9806      	ldr	r0, [sp, #24]
10057e1e:	42a0      	cmp	r0, r4
10057e20:	d800      	bhi.n	10057e24 <GAT_att_srv_read_multi_exc+0x76>
10057e22:	e0ae      	b.n	10057f82 <GAT_att_srv_read_multi_exc+0x1d4>
10057e24:	6848      	ldr	r0, [r1, #4]
10057e26:	8981      	ldrh	r1, [r0, #12]
10057e28:	9205      	str	r2, [sp, #20]
10057e2a:	1889      	adds	r1, r1, r2
10057e2c:	b289      	uxth	r1, r1
10057e2e:	2202      	movs	r2, #2
10057e30:	ab0c      	add	r3, sp, #48	@ 0x30
10057e32:	9204      	str	r2, [sp, #16]
10057e34:	f7fd f9bc 	bl	100551b0 <ACL_pkt_read>
10057e38:	9907      	ldr	r1, [sp, #28]
10057e3a:	7808      	ldrb	r0, [r1, #0]
10057e3c:	2801      	cmp	r0, #1
10057e3e:	d102      	bne.n	10057e46 <GAT_att_srv_read_multi_exc+0x98>
10057e40:	9801      	ldr	r0, [sp, #4]
10057e42:	9008      	str	r0, [sp, #32]
10057e44:	e00d      	b.n	10057e62 <GAT_att_srv_read_multi_exc+0xb4>
10057e46:	a80c      	add	r0, sp, #48	@ 0x30
10057e48:	8800      	ldrh	r0, [r0, #0]
10057e4a:	f00c ff23 	bl	10064c94 <GAT_att_db_find_by_handle>
10057e4e:	4601      	mov	r1, r0
10057e50:	9807      	ldr	r0, [sp, #28]
10057e52:	6880      	ldr	r0, [r0, #8]
10057e54:	8900      	ldrh	r0, [r0, #8]
10057e56:	aa08      	add	r2, sp, #32
10057e58:	f000 fdc6 	bl	100589e8 <GAT_srv_get_attr_value>
10057e5c:	9907      	ldr	r1, [sp, #28]
10057e5e:	2884      	cmp	r0, #132	@ 0x84
10057e60:	d065      	beq.n	10057f2e <GAT_att_srv_read_multi_exc+0x180>
10057e62:	9806      	ldr	r0, [sp, #24]
10057e64:	1b04      	subs	r4, r0, r4
10057e66:	7848      	ldrb	r0, [r1, #1]
10057e68:	280e      	cmp	r0, #14
10057e6a:	d109      	bne.n	10057e80 <GAT_att_srv_read_multi_exc+0xd2>
10057e6c:	89b0      	ldrh	r0, [r6, #12]
10057e6e:	19c1      	adds	r1, r0, r7
10057e70:	9808      	ldr	r0, [sp, #32]
10057e72:	8802      	ldrh	r2, [r0, #0]
10057e74:	4294      	cmp	r4, r2
10057e76:	db00      	blt.n	10057e7a <GAT_att_srv_read_multi_exc+0xcc>
10057e78:	4614      	mov	r4, r2
10057e7a:	b289      	uxth	r1, r1
10057e7c:	b2a2      	uxth	r2, r4
10057e7e:	e013      	b.n	10057ea8 <GAT_att_srv_read_multi_exc+0xfa>
10057e80:	89b0      	ldrh	r0, [r6, #12]
10057e82:	19c0      	adds	r0, r0, r7
10057e84:	b281      	uxth	r1, r0
10057e86:	9a08      	ldr	r2, [sp, #32]
10057e88:	4630      	mov	r0, r6
10057e8a:	8816      	ldrh	r6, [r2, #0]
10057e8c:	4632      	mov	r2, r6
10057e8e:	f7fd f9a8 	bl	100551e2 <ACL_pkt_write_16b>
10057e92:	1ea4      	subs	r4, r4, #2
10057e94:	42b4      	cmp	r4, r6
10057e96:	d300      	bcc.n	10057e9a <GAT_att_srv_read_multi_exc+0xec>
10057e98:	4634      	mov	r4, r6
10057e9a:	b2a2      	uxth	r2, r4
10057e9c:	1cbf      	adds	r7, r7, #2
10057e9e:	9e02      	ldr	r6, [sp, #8]
10057ea0:	89b0      	ldrh	r0, [r6, #12]
10057ea2:	19c0      	adds	r0, r0, r7
10057ea4:	b281      	uxth	r1, r0
10057ea6:	9808      	ldr	r0, [sp, #32]
10057ea8:	6843      	ldr	r3, [r0, #4]
10057eaa:	4630      	mov	r0, r6
10057eac:	f7fd f9a2 	bl	100551f4 <ACL_pkt_write>
10057eb0:	193f      	adds	r7, r7, r4
10057eb2:	8077      	strh	r7, [r6, #2]
10057eb4:	9907      	ldr	r1, [sp, #28]
10057eb6:	7848      	ldrb	r0, [r1, #1]
10057eb8:	2820      	cmp	r0, #32
10057eba:	9a05      	ldr	r2, [sp, #20]
10057ebc:	d104      	bne.n	10057ec8 <GAT_att_srv_read_multi_exc+0x11a>
10057ebe:	9806      	ldr	r0, [sp, #24]
10057ec0:	1bc0      	subs	r0, r0, r7
10057ec2:	b280      	uxth	r0, r0
10057ec4:	2802      	cmp	r0, #2
10057ec6:	d35c      	bcc.n	10057f82 <GAT_att_srv_read_multi_exc+0x1d4>
10057ec8:	9804      	ldr	r0, [sp, #16]
10057eca:	7008      	strb	r0, [r1, #0]
10057ecc:	1c92      	adds	r2, r2, #2
10057ece:	e79c      	b.n	10057e0a <GAT_att_srv_read_multi_exc+0x5c>
10057ed0:	2100      	movs	r1, #0
10057ed2:	9205      	str	r2, [sp, #20]
10057ed4:	9c07      	ldr	r4, [sp, #28]
10057ed6:	b288      	uxth	r0, r1
10057ed8:	42a8      	cmp	r0, r5
10057eda:	d292      	bcs.n	10057e02 <GAT_att_srv_read_multi_exc+0x54>
10057edc:	9104      	str	r1, [sp, #16]
10057ede:	0049      	lsls	r1, r1, #1
10057ee0:	6860      	ldr	r0, [r4, #4]
10057ee2:	8982      	ldrh	r2, [r0, #12]
10057ee4:	1851      	adds	r1, r2, r1
10057ee6:	1c49      	adds	r1, r1, #1
10057ee8:	b289      	uxth	r1, r1
10057eea:	2202      	movs	r2, #2
10057eec:	ab0c      	add	r3, sp, #48	@ 0x30
10057eee:	f7fd f95f 	bl	100551b0 <ACL_pkt_read>
10057ef2:	a808      	add	r0, sp, #32
10057ef4:	2601      	movs	r6, #1
10057ef6:	7106      	strb	r6, [r0, #4]
10057ef8:	990c      	ldr	r1, [sp, #48]	@ 0x30
10057efa:	8101      	strh	r1, [r0, #8]
10057efc:	68a1      	ldr	r1, [r4, #8]
10057efe:	9108      	str	r1, [sp, #32]
10057f00:	f000 ffc4 	bl	10058e8c <GAT_srv_check_change_aware>
10057f04:	2886      	cmp	r0, #134	@ 0x86
10057f06:	d02a      	beq.n	10057f5e <GAT_att_srv_read_multi_exc+0x1b0>
10057f08:	a80c      	add	r0, sp, #48	@ 0x30
10057f0a:	8800      	ldrh	r0, [r0, #0]
10057f0c:	f00c fec2 	bl	10064c94 <GAT_att_db_find_by_handle>
10057f10:	2800      	cmp	r0, #0
10057f12:	d027      	beq.n	10057f64 <GAT_att_srv_read_multi_exc+0x1b6>
10057f14:	9907      	ldr	r1, [sp, #28]
10057f16:	6889      	ldr	r1, [r1, #8]
10057f18:	8909      	ldrh	r1, [r1, #8]
10057f1a:	2201      	movs	r2, #1
10057f1c:	f000 fcee 	bl	100588fc <GAT_srv_check_perms>
10057f20:	2800      	cmp	r0, #0
10057f22:	d11e      	bne.n	10057f62 <GAT_att_srv_read_multi_exc+0x1b4>
10057f24:	9904      	ldr	r1, [sp, #16]
10057f26:	1c49      	adds	r1, r1, #1
10057f28:	9e02      	ldr	r6, [sp, #8]
10057f2a:	9a05      	ldr	r2, [sp, #20]
10057f2c:	e7d3      	b.n	10057ed6 <GAT_att_srv_read_multi_exc+0x128>
10057f2e:	a80c      	add	r0, sp, #48	@ 0x30
10057f30:	8803      	ldrh	r3, [r0, #0]
10057f32:	6888      	ldr	r0, [r1, #8]
10057f34:	8942      	ldrh	r2, [r0, #10]
10057f36:	8901      	ldrh	r1, [r0, #8]
10057f38:	2000      	movs	r0, #0
10057f3a:	9000      	str	r0, [sp, #0]
10057f3c:	2002      	movs	r0, #2
10057f3e:	f00b fe45 	bl	10063bcc <aci_gatt_srv_read_event_push_noinline>
10057f42:	9003      	str	r0, [sp, #12]
10057f44:	2800      	cmp	r0, #0
10057f46:	9a05      	ldr	r2, [sp, #20]
10057f48:	d11b      	bne.n	10057f82 <GAT_att_srv_read_multi_exc+0x1d4>
10057f4a:	8077      	strh	r7, [r6, #2]
10057f4c:	89b0      	ldrh	r0, [r6, #12]
10057f4e:	19c0      	adds	r0, r0, r7
10057f50:	b281      	uxth	r1, r0
10057f52:	b292      	uxth	r2, r2
10057f54:	4630      	mov	r0, r6
10057f56:	f7fd f944 	bl	100551e2 <ACL_pkt_write_16b>
10057f5a:	2084      	movs	r0, #132	@ 0x84
10057f5c:	e010      	b.n	10057f80 <GAT_att_srv_read_multi_exc+0x1d2>
10057f5e:	2612      	movs	r6, #18
10057f60:	e000      	b.n	10057f64 <GAT_att_srv_read_multi_exc+0x1b6>
10057f62:	4606      	mov	r6, r0
10057f64:	a80c      	add	r0, sp, #48	@ 0x30
10057f66:	8801      	ldrh	r1, [r0, #0]
10057f68:	9807      	ldr	r0, [sp, #28]
10057f6a:	7840      	ldrb	r0, [r0, #1]
10057f6c:	280e      	cmp	r0, #14
10057f6e:	d101      	bne.n	10057f74 <GAT_att_srv_read_multi_exc+0x1c6>
10057f70:	200e      	movs	r0, #14
10057f72:	e000      	b.n	10057f76 <GAT_att_srv_read_multi_exc+0x1c8>
10057f74:	2020      	movs	r0, #32
10057f76:	4632      	mov	r2, r6
10057f78:	9b02      	ldr	r3, [sp, #8]
10057f7a:	f7ff fbcf 	bl	1005771c <GAT_att_srv_write_err_packet>
10057f7e:	2086      	movs	r0, #134	@ 0x86
10057f80:	9003      	str	r0, [sp, #12]
10057f82:	9803      	ldr	r0, [sp, #12]
10057f84:	b00d      	add	sp, #52	@ 0x34
10057f86:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057f88 <GAT_att_srv_write_exc>:
10057f88:	b5f0      	push	{r4, r5, r6, r7, lr}
10057f8a:	b089      	sub	sp, #36	@ 0x24
10057f8c:	4604      	mov	r4, r0
10057f8e:	7800      	ldrb	r0, [r0, #0]
10057f90:	2800      	cmp	r0, #0
10057f92:	d001      	beq.n	10057f98 <GAT_att_srv_write_exc+0x10>
10057f94:	2000      	movs	r0, #0
10057f96:	e03b      	b.n	10058010 <GAT_att_srv_write_exc+0x88>
10057f98:	6860      	ldr	r0, [r4, #4]
10057f9a:	68a1      	ldr	r1, [r4, #8]
10057f9c:	68c9      	ldr	r1, [r1, #12]
10057f9e:	9106      	str	r1, [sp, #24]
10057fa0:	8846      	ldrh	r6, [r0, #2]
10057fa2:	8981      	ldrh	r1, [r0, #12]
10057fa4:	1c49      	adds	r1, r1, #1
10057fa6:	b289      	uxth	r1, r1
10057fa8:	f7fd f90b 	bl	100551c2 <ACL_pkt_read_16b>
10057fac:	4605      	mov	r5, r0
10057fae:	1ef1      	subs	r1, r6, #3
10057fb0:	7860      	ldrb	r0, [r4, #1]
10057fb2:	2700      	movs	r7, #0
10057fb4:	2852      	cmp	r0, #82	@ 0x52
10057fb6:	d00c      	beq.n	10057fd2 <GAT_att_srv_write_exc+0x4a>
10057fb8:	28d2      	cmp	r0, #210	@ 0xd2
10057fba:	d10e      	bne.n	10057fda <GAT_att_srv_write_exc+0x52>
10057fbc:	68a0      	ldr	r0, [r4, #8]
10057fbe:	8940      	ldrh	r0, [r0, #10]
10057fc0:	2804      	cmp	r0, #4
10057fc2:	d124      	bne.n	1005800e <GAT_att_srv_write_exc+0x86>
10057fc4:	3e0f      	subs	r6, #15
10057fc6:	2205      	movs	r2, #5
10057fc8:	2701      	movs	r7, #1
10057fca:	2000      	movs	r0, #0
10057fcc:	9004      	str	r0, [sp, #16]
10057fce:	9605      	str	r6, [sp, #20]
10057fd0:	e00e      	b.n	10057ff0 <GAT_att_srv_write_exc+0x68>
10057fd2:	9105      	str	r1, [sp, #20]
10057fd4:	2204      	movs	r2, #4
10057fd6:	9704      	str	r7, [sp, #16]
10057fd8:	e00a      	b.n	10057ff0 <GAT_att_srv_write_exc+0x68>
10057fda:	9105      	str	r1, [sp, #20]
10057fdc:	9e06      	ldr	r6, [sp, #24]
10057fde:	89b1      	ldrh	r1, [r6, #12]
10057fe0:	2213      	movs	r2, #19
10057fe2:	4630      	mov	r0, r6
10057fe4:	f7ff fb14 	bl	10057610 <ACL_pkt_write_8b>
10057fe8:	2001      	movs	r0, #1
10057fea:	9004      	str	r0, [sp, #16]
10057fec:	8070      	strh	r0, [r6, #2]
10057fee:	2203      	movs	r2, #3
10057ff0:	ab07      	add	r3, sp, #28
10057ff2:	4620      	mov	r0, r4
10057ff4:	4629      	mov	r1, r5
10057ff6:	f000 f936 	bl	10058266 <GAT_att_srv_set_attr_value_check>
10057ffa:	4602      	mov	r2, r0
10057ffc:	a808      	add	r0, sp, #32
10057ffe:	7002      	strb	r2, [r0, #0]
10058000:	2a00      	cmp	r2, #0
10058002:	d007      	beq.n	10058014 <GAT_att_srv_write_exc+0x8c>
10058004:	7860      	ldrb	r0, [r4, #1]
10058006:	4629      	mov	r1, r5
10058008:	9b06      	ldr	r3, [sp, #24]
1005800a:	f7ff fb87 	bl	1005771c <GAT_att_srv_write_err_packet>
1005800e:	2086      	movs	r0, #134	@ 0x86
10058010:	b009      	add	sp, #36	@ 0x24
10058012:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058014:	2f00      	cmp	r7, #0
10058016:	d008      	beq.n	1005802a <GAT_att_srv_write_exc+0xa2>
10058018:	6861      	ldr	r1, [r4, #4]
1005801a:	68a0      	ldr	r0, [r4, #8]
1005801c:	8900      	ldrh	r0, [r0, #8]
1005801e:	f00a fc94 	bl	1006294a <smp_sap_sm2_packet_data_signing_validate>
10058022:	2800      	cmp	r0, #0
10058024:	d001      	beq.n	1005802a <GAT_att_srv_write_exc+0xa2>
10058026:	2200      	movs	r2, #0
10058028:	e7ec      	b.n	10058004 <GAT_att_srv_write_exc+0x7c>
1005802a:	6861      	ldr	r1, [r4, #4]
1005802c:	9807      	ldr	r0, [sp, #28]
1005802e:	aa08      	add	r2, sp, #32
10058030:	f000 fdda 	bl	10058be8 <GAT_srv_attr_value_write>
10058034:	2800      	cmp	r0, #0
10058036:	d0eb      	beq.n	10058010 <GAT_att_srv_write_exc+0x88>
10058038:	2884      	cmp	r0, #132	@ 0x84
1005803a:	d112      	bne.n	10058062 <GAT_att_srv_write_exc+0xda>
1005803c:	6860      	ldr	r0, [r4, #4]
1005803e:	68a1      	ldr	r1, [r4, #8]
10058040:	894a      	ldrh	r2, [r1, #10]
10058042:	8909      	ldrh	r1, [r1, #8]
10058044:	9b05      	ldr	r3, [sp, #20]
10058046:	b29b      	uxth	r3, r3
10058048:	9500      	str	r5, [sp, #0]
1005804a:	9301      	str	r3, [sp, #4]
1005804c:	9002      	str	r0, [sp, #8]
1005804e:	200a      	movs	r0, #10
10058050:	9b04      	ldr	r3, [sp, #16]
10058052:	f00b fdf5 	bl	10063c40 <aci_gatt_srv_write_event_push_noinline>
10058056:	2800      	cmp	r0, #0
10058058:	d1da      	bne.n	10058010 <GAT_att_srv_write_exc+0x88>
1005805a:	2000      	movs	r0, #0
1005805c:	6060      	str	r0, [r4, #4]
1005805e:	2084      	movs	r0, #132	@ 0x84
10058060:	e7d6      	b.n	10058010 <GAT_att_srv_write_exc+0x88>
10058062:	a808      	add	r0, sp, #32
10058064:	7802      	ldrb	r2, [r0, #0]
10058066:	e7cd      	b.n	10058004 <GAT_att_srv_write_exc+0x7c>

10058068 <GAT_att_srv_prep_wr_exc>:
10058068:	b570      	push	{r4, r5, r6, lr}
1005806a:	b086      	sub	sp, #24
1005806c:	4604      	mov	r4, r0
1005806e:	7800      	ldrb	r0, [r0, #0]
10058070:	2800      	cmp	r0, #0
10058072:	d014      	beq.n	1005809e <GAT_att_srv_prep_wr_exc+0x36>
10058074:	89a5      	ldrh	r5, [r4, #12]
10058076:	68a0      	ldr	r0, [r4, #8]
10058078:	88c1      	ldrh	r1, [r0, #6]
1005807a:	1f49      	subs	r1, r1, #5
1005807c:	42a9      	cmp	r1, r5
1005807e:	d800      	bhi.n	10058082 <GAT_att_srv_prep_wr_exc+0x1a>
10058080:	460d      	mov	r5, r1
10058082:	b2aa      	uxth	r2, r5
10058084:	6923      	ldr	r3, [r4, #16]
10058086:	68c0      	ldr	r0, [r0, #12]
10058088:	8981      	ldrh	r1, [r0, #12]
1005808a:	1d49      	adds	r1, r1, #5
1005808c:	b289      	uxth	r1, r1
1005808e:	f7fd f8b1 	bl	100551f4 <ACL_pkt_write>
10058092:	1d68      	adds	r0, r5, #5
10058094:	68a1      	ldr	r1, [r4, #8]
10058096:	68c9      	ldr	r1, [r1, #12]
10058098:	8048      	strh	r0, [r1, #2]
1005809a:	2000      	movs	r0, #0
1005809c:	e040      	b.n	10058120 <GAT_att_srv_prep_wr_exc+0xb8>
1005809e:	6860      	ldr	r0, [r4, #4]
100580a0:	8981      	ldrh	r1, [r0, #12]
100580a2:	1c49      	adds	r1, r1, #1
100580a4:	b289      	uxth	r1, r1
100580a6:	f7fd f88c 	bl	100551c2 <ACL_pkt_read_16b>
100580aa:	4605      	mov	r5, r0
100580ac:	2203      	movs	r2, #3
100580ae:	ab05      	add	r3, sp, #20
100580b0:	4620      	mov	r0, r4
100580b2:	4629      	mov	r1, r5
100580b4:	f000 f8d7 	bl	10058266 <GAT_att_srv_set_attr_value_check>
100580b8:	2800      	cmp	r0, #0
100580ba:	d008      	beq.n	100580ce <GAT_att_srv_prep_wr_exc+0x66>
100580bc:	4602      	mov	r2, r0
100580be:	68a0      	ldr	r0, [r4, #8]
100580c0:	68c3      	ldr	r3, [r0, #12]
100580c2:	2016      	movs	r0, #22
100580c4:	4629      	mov	r1, r5
100580c6:	f7ff fb29 	bl	1005771c <GAT_att_srv_write_err_packet>
100580ca:	2086      	movs	r0, #134	@ 0x86
100580cc:	e028      	b.n	10058120 <GAT_att_srv_prep_wr_exc+0xb8>
100580ce:	6860      	ldr	r0, [r4, #4]
100580d0:	8981      	ldrh	r1, [r0, #12]
100580d2:	1cc9      	adds	r1, r1, #3
100580d4:	b289      	uxth	r1, r1
100580d6:	f7fd f874 	bl	100551c2 <ACL_pkt_read_16b>
100580da:	4606      	mov	r6, r0
100580dc:	6860      	ldr	r0, [r4, #4]
100580de:	68a1      	ldr	r1, [r4, #8]
100580e0:	894a      	ldrh	r2, [r1, #10]
100580e2:	8909      	ldrh	r1, [r1, #8]
100580e4:	8843      	ldrh	r3, [r0, #2]
100580e6:	1f5b      	subs	r3, r3, #5
100580e8:	b29b      	uxth	r3, r3
100580ea:	9600      	str	r6, [sp, #0]
100580ec:	9301      	str	r3, [sp, #4]
100580ee:	9002      	str	r0, [sp, #8]
100580f0:	200a      	movs	r0, #10
100580f2:	462b      	mov	r3, r5
100580f4:	f00c f80c 	bl	10064110 <aci_att_srv_prepare_write_req_event_push_noinline>
100580f8:	2800      	cmp	r0, #0
100580fa:	d111      	bne.n	10058120 <GAT_att_srv_prep_wr_exc+0xb8>
100580fc:	ab03      	add	r3, sp, #12
100580fe:	705d      	strb	r5, [r3, #1]
10058100:	0a28      	lsrs	r0, r5, #8
10058102:	7098      	strb	r0, [r3, #2]
10058104:	70de      	strb	r6, [r3, #3]
10058106:	2017      	movs	r0, #23
10058108:	7018      	strb	r0, [r3, #0]
1005810a:	0a30      	lsrs	r0, r6, #8
1005810c:	7118      	strb	r0, [r3, #4]
1005810e:	68a0      	ldr	r0, [r4, #8]
10058110:	68c0      	ldr	r0, [r0, #12]
10058112:	8981      	ldrh	r1, [r0, #12]
10058114:	2205      	movs	r2, #5
10058116:	f7fd f86d 	bl	100551f4 <ACL_pkt_write>
1005811a:	2000      	movs	r0, #0
1005811c:	6060      	str	r0, [r4, #4]
1005811e:	2084      	movs	r0, #132	@ 0x84
10058120:	b006      	add	sp, #24
10058122:	bd70      	pop	{r4, r5, r6, pc}

10058124 <GAT_att_srv_exec_wr_exc>:
10058124:	b510      	push	{r4, lr}
10058126:	4604      	mov	r4, r0
10058128:	7800      	ldrb	r0, [r0, #0]
1005812a:	2800      	cmp	r0, #0
1005812c:	d001      	beq.n	10058132 <GAT_att_srv_exec_wr_exc+0xe>
1005812e:	2000      	movs	r0, #0
10058130:	bd10      	pop	{r4, pc}
10058132:	6860      	ldr	r0, [r4, #4]
10058134:	8981      	ldrh	r1, [r0, #12]
10058136:	1c49      	adds	r1, r1, #1
10058138:	b289      	uxth	r1, r1
1005813a:	f000 f884 	bl	10058246 <ACL_pkt_read_8b>
1005813e:	4603      	mov	r3, r0
10058140:	68a0      	ldr	r0, [r4, #8]
10058142:	8942      	ldrh	r2, [r0, #10]
10058144:	8901      	ldrh	r1, [r0, #8]
10058146:	2002      	movs	r0, #2
10058148:	f00c f810 	bl	1006416c <aci_att_srv_exec_write_req_event_push_noinline>
1005814c:	2800      	cmp	r0, #0
1005814e:	d000      	beq.n	10058152 <GAT_att_srv_exec_wr_exc+0x2e>
10058150:	bd10      	pop	{r4, pc}
10058152:	68a0      	ldr	r0, [r4, #8]
10058154:	68c0      	ldr	r0, [r0, #12]
10058156:	8981      	ldrh	r1, [r0, #12]
10058158:	2219      	movs	r2, #25
1005815a:	f7ff fa59 	bl	10057610 <ACL_pkt_write_8b>
1005815e:	68a0      	ldr	r0, [r4, #8]
10058160:	68c0      	ldr	r0, [r0, #12]
10058162:	2101      	movs	r1, #1
10058164:	8041      	strh	r1, [r0, #2]
10058166:	2084      	movs	r0, #132	@ 0x84
10058168:	bd10      	pop	{r4, pc}

1005816a <GAT_att_srv_confirm_exc>:
1005816a:	b5b0      	push	{r4, r5, r7, lr}
1005816c:	4605      	mov	r5, r0
1005816e:	6880      	ldr	r0, [r0, #8]
10058170:	8942      	ldrh	r2, [r0, #10]
10058172:	8901      	ldrh	r1, [r0, #8]
10058174:	2042      	movs	r0, #66	@ 0x42
10058176:	f00b fcf7 	bl	10063b68 <aci_gatt_srv_confirmation_event_push_noinline>
1005817a:	4604      	mov	r4, r0
1005817c:	2800      	cmp	r0, #0
1005817e:	d110      	bne.n	100581a2 <GAT_att_srv_confirm_exc+0x38>
10058180:	68a8      	ldr	r0, [r5, #8]
10058182:	8942      	ldrh	r2, [r0, #10]
10058184:	8901      	ldrh	r1, [r0, #8]
10058186:	2001      	movs	r0, #1
10058188:	f7fe fef2 	bl	10056f70 <GAT_att_cmn_stop_timer>
1005818c:	68a8      	ldr	r0, [r5, #8]
1005818e:	8881      	ldrh	r1, [r0, #4]
10058190:	064a      	lsls	r2, r1, #25
10058192:	d503      	bpl.n	1005819c <GAT_att_srv_confirm_exc+0x32>
10058194:	f000 fe6c 	bl	10058e70 <GAT_srv_set_change_aware>
10058198:	68a8      	ldr	r0, [r5, #8]
1005819a:	8881      	ldrh	r1, [r0, #4]
1005819c:	2202      	movs	r2, #2
1005819e:	4391      	bics	r1, r2
100581a0:	8081      	strh	r1, [r0, #4]
100581a2:	4620      	mov	r0, r4
100581a4:	bdb0      	pop	{r4, r5, r7, pc}

100581a6 <GAT_att_srv_get_handle_range>:
100581a6:	b570      	push	{r4, r5, r6, lr}
100581a8:	4614      	mov	r4, r2
100581aa:	460d      	mov	r5, r1
100581ac:	4606      	mov	r6, r0
100581ae:	8980      	ldrh	r0, [r0, #12]
100581b0:	1c40      	adds	r0, r0, #1
100581b2:	b281      	uxth	r1, r0
100581b4:	4630      	mov	r0, r6
100581b6:	f7fd f804 	bl	100551c2 <ACL_pkt_read_16b>
100581ba:	8028      	strh	r0, [r5, #0]
100581bc:	89b0      	ldrh	r0, [r6, #12]
100581be:	1cc0      	adds	r0, r0, #3
100581c0:	b281      	uxth	r1, r0
100581c2:	4630      	mov	r0, r6
100581c4:	f7fc fffd 	bl	100551c2 <ACL_pkt_read_16b>
100581c8:	8020      	strh	r0, [r4, #0]
100581ca:	bd70      	pop	{r4, r5, r6, pc}

100581cc <GAT_att_srv_value_read>:
100581cc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100581ce:	461f      	mov	r7, r3
100581d0:	4606      	mov	r6, r0
100581d2:	9d08      	ldr	r5, [sp, #32]
100581d4:	2400      	movs	r4, #0
100581d6:	702c      	strb	r4, [r5, #0]
100581d8:	7800      	ldrb	r0, [r0, #0]
100581da:	2801      	cmp	r0, #1
100581dc:	d107      	bne.n	100581ee <GAT_att_srv_value_read+0x22>
100581de:	6930      	ldr	r0, [r6, #16]
100581e0:	2800      	cmp	r0, #0
100581e2:	d01f      	beq.n	10058224 <GAT_att_srv_value_read+0x58>
100581e4:	360c      	adds	r6, #12
100581e6:	603e      	str	r6, [r7, #0]
100581e8:	2000      	movs	r0, #0
100581ea:	7028      	strb	r0, [r5, #0]
100581ec:	e029      	b.n	10058242 <GAT_att_srv_value_read+0x76>
100581ee:	9202      	str	r2, [sp, #8]
100581f0:	68b0      	ldr	r0, [r6, #8]
100581f2:	8900      	ldrh	r0, [r0, #8]
100581f4:	9101      	str	r1, [sp, #4]
100581f6:	463a      	mov	r2, r7
100581f8:	462b      	mov	r3, r5
100581fa:	f000 fb66 	bl	100588ca <GAT_srv_attr_value_read>
100581fe:	2800      	cmp	r0, #0
10058200:	d012      	beq.n	10058228 <GAT_att_srv_value_read+0x5c>
10058202:	2884      	cmp	r0, #132	@ 0x84
10058204:	d11d      	bne.n	10058242 <GAT_att_srv_value_read+0x76>
10058206:	9801      	ldr	r0, [sp, #4]
10058208:	8843      	ldrh	r3, [r0, #2]
1005820a:	68b0      	ldr	r0, [r6, #8]
1005820c:	8942      	ldrh	r2, [r0, #10]
1005820e:	8901      	ldrh	r1, [r0, #8]
10058210:	9802      	ldr	r0, [sp, #8]
10058212:	9000      	str	r0, [sp, #0]
10058214:	2002      	movs	r0, #2
10058216:	f00b fcd9 	bl	10063bcc <aci_gatt_srv_read_event_push_noinline>
1005821a:	2800      	cmp	r0, #0
1005821c:	d111      	bne.n	10058242 <GAT_att_srv_value_read+0x76>
1005821e:	207b      	movs	r0, #123	@ 0x7b
10058220:	43c0      	mvns	r0, r0
10058222:	e00e      	b.n	10058242 <GAT_att_srv_value_read+0x76>
10058224:	200e      	movs	r0, #14
10058226:	e005      	b.n	10058234 <GAT_att_srv_value_read+0x68>
10058228:	6838      	ldr	r0, [r7, #0]
1005822a:	8801      	ldrh	r1, [r0, #0]
1005822c:	9a02      	ldr	r2, [sp, #8]
1005822e:	4291      	cmp	r1, r2
10058230:	d203      	bcs.n	1005823a <GAT_att_srv_value_read+0x6e>
10058232:	2007      	movs	r0, #7
10058234:	7028      	strb	r0, [r5, #0]
10058236:	2086      	movs	r0, #134	@ 0x86
10058238:	e003      	b.n	10058242 <GAT_att_srv_value_read+0x76>
1005823a:	6841      	ldr	r1, [r0, #4]
1005823c:	1889      	adds	r1, r1, r2
1005823e:	6041      	str	r1, [r0, #4]
10058240:	4620      	mov	r0, r4
10058242:	b2c0      	uxtb	r0, r0
10058244:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10058246 <ACL_pkt_read_8b>:
10058246:	b51c      	push	{r2, r3, r4, lr}
10058248:	291f      	cmp	r1, #31
1005824a:	d803      	bhi.n	10058254 <ACL_pkt_read_8b+0xe>
1005824c:	aa01      	add	r2, sp, #4
1005824e:	8011      	strh	r1, [r2, #0]
10058250:	6840      	ldr	r0, [r0, #4]
10058252:	e005      	b.n	10058260 <ACL_pkt_read_8b+0x1a>
10058254:	6840      	ldr	r0, [r0, #4]
10058256:	ac01      	add	r4, sp, #4
10058258:	4622      	mov	r2, r4
1005825a:	f008 ff54 	bl	10061106 <Mem_Buff_get_buff_off>
1005825e:	8821      	ldrh	r1, [r4, #0]
10058260:	1840      	adds	r0, r0, r1
10058262:	7900      	ldrb	r0, [r0, #4]
10058264:	bd1c      	pop	{r2, r3, r4, pc}

10058266 <GAT_att_srv_set_attr_value_check>:
10058266:	b5f0      	push	{r4, r5, r6, r7, lr}
10058268:	b085      	sub	sp, #20
1005826a:	461e      	mov	r6, r3
1005826c:	4614      	mov	r4, r2
1005826e:	460f      	mov	r7, r1
10058270:	4605      	mov	r5, r0
10058272:	a801      	add	r0, sp, #4
10058274:	8101      	strh	r1, [r0, #8]
10058276:	7102      	strb	r2, [r0, #4]
10058278:	68a9      	ldr	r1, [r5, #8]
1005827a:	9101      	str	r1, [sp, #4]
1005827c:	f000 fe06 	bl	10058e8c <GAT_srv_check_change_aware>
10058280:	2886      	cmp	r0, #134	@ 0x86
10058282:	d101      	bne.n	10058288 <GAT_att_srv_set_attr_value_check+0x22>
10058284:	2012      	movs	r0, #18
10058286:	e00c      	b.n	100582a2 <GAT_att_srv_set_attr_value_check+0x3c>
10058288:	4638      	mov	r0, r7
1005828a:	f00c fd03 	bl	10064c94 <GAT_att_db_find_by_handle>
1005828e:	6030      	str	r0, [r6, #0]
10058290:	2800      	cmp	r0, #0
10058292:	d005      	beq.n	100582a0 <GAT_att_srv_set_attr_value_check+0x3a>
10058294:	68a9      	ldr	r1, [r5, #8]
10058296:	8909      	ldrh	r1, [r1, #8]
10058298:	4622      	mov	r2, r4
1005829a:	f000 fb2f 	bl	100588fc <GAT_srv_check_perms>
1005829e:	e000      	b.n	100582a2 <GAT_att_srv_set_attr_value_check+0x3c>
100582a0:	2001      	movs	r0, #1
100582a2:	b005      	add	sp, #20
100582a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100582a8 <GAT_srv_init>:
100582a8:	b580      	push	{r7, lr}
100582aa:	4806      	ldr	r0, [pc, #24]	@ (100582c4 <__arm_cp.0_0>)
100582ac:	8900      	ldrh	r0, [r0, #8]
100582ae:	3016      	adds	r0, #22
100582b0:	b280      	uxth	r0, r0
100582b2:	f00c fc8b 	bl	10064bcc <GAT_att_db_init>
100582b6:	4804      	ldr	r0, [pc, #16]	@ (100582c8 <__arm_cp.0_1>)
100582b8:	6800      	ldr	r0, [r0, #0]
100582ba:	215c      	movs	r1, #92	@ 0x5c
100582bc:	2201      	movs	r2, #1
100582be:	5442      	strb	r2, [r0, r1]
100582c0:	bd80      	pop	{r7, pc}
100582c2:	46c0      	nop			@ (mov r8, r8)

100582c4 <__arm_cp.0_0>:
100582c4:	2000247c 	.word	0x2000247c

100582c8 <__arm_cp.0_1>:
100582c8:	20002420 	.word	0x20002420

100582cc <GAT_srv_connection>:
100582cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100582ce:	b0a1      	sub	sp, #132	@ 0x84
100582d0:	4604      	mov	r4, r0
100582d2:	f000 f89b 	bl	1005840c <GAT_srv_is_bonded>
100582d6:	2801      	cmp	r0, #1
100582d8:	d114      	bne.n	10058304 <GAT_srv_connection+0x38>
100582da:	a807      	add	r0, sp, #28
100582dc:	4945      	ldr	r1, [pc, #276]	@ (100583f4 <__arm_cp.1_0>)
100582de:	2514      	movs	r5, #20
100582e0:	462a      	mov	r2, r5
100582e2:	f00f fe26 	bl	10067f32 <__aeabi_memcpy>
100582e6:	a802      	add	r0, sp, #8
100582e8:	4943      	ldr	r1, [pc, #268]	@ (100583f8 <__arm_cp.1_1>)
100582ea:	462a      	mov	r2, r5
100582ec:	f00f fe21 	bl	10067f32 <__aeabi_memcpy>
100582f0:	2044      	movs	r0, #68	@ 0x44
100582f2:	900f      	str	r0, [sp, #60]	@ 0x3c
100582f4:	2101      	movs	r1, #1
100582f6:	aa0d      	add	r2, sp, #52	@ 0x34
100582f8:	ab0c      	add	r3, sp, #48	@ 0x30
100582fa:	4620      	mov	r0, r4
100582fc:	f00a fa87 	bl	1006280e <smp_sap_get_remote_address_check_addr_type>
10058300:	2800      	cmp	r0, #0
10058302:	d001      	beq.n	10058308 <GAT_srv_connection+0x3c>
10058304:	b021      	add	sp, #132	@ 0x84
10058306:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058308:	a80c      	add	r0, sp, #48	@ 0x30
1005830a:	7801      	ldrb	r1, [r0, #0]
1005830c:	a80d      	add	r0, sp, #52	@ 0x34
1005830e:	aa0f      	add	r2, sp, #60	@ 0x3c
10058310:	ab10      	add	r3, sp, #64	@ 0x40
10058312:	f009 fb1a 	bl	1006194a <SDB_sap_read_peer_bonded_gatt_client_data>
10058316:	2800      	cmp	r0, #0
10058318:	d1f4      	bne.n	10058304 <GAT_srv_connection+0x38>
1005831a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1005831c:	2844      	cmp	r0, #68	@ 0x44
1005831e:	d8f1      	bhi.n	10058304 <GAT_srv_connection+0x38>
10058320:	2001      	movs	r0, #1
10058322:	4d36      	ldr	r5, [pc, #216]	@ (100583fc <__arm_cp.1_2>)
10058324:	aa02      	add	r2, sp, #8
10058326:	4629      	mov	r1, r5
10058328:	f000 fe0c 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
1005832c:	2800      	cmp	r0, #0
1005832e:	d010      	beq.n	10058352 <GAT_srv_connection+0x86>
10058330:	4606      	mov	r6, r0
10058332:	4620      	mov	r0, r4
10058334:	f7fe fe54 	bl	10056fe0 <GAT_att_cmn_get_conn_index>
10058338:	a910      	add	r1, sp, #64	@ 0x40
1005833a:	7c0a      	ldrb	r2, [r1, #16]
1005833c:	4930      	ldr	r1, [pc, #192]	@ (10058400 <__arm_cp.1_3>)
1005833e:	7ac9      	ldrb	r1, [r1, #11]
10058340:	6873      	ldr	r3, [r6, #4]
10058342:	6a1b      	ldr	r3, [r3, #32]
10058344:	689b      	ldr	r3, [r3, #8]
10058346:	9300      	str	r3, [sp, #0]
10058348:	0849      	lsrs	r1, r1, #1
1005834a:	1c4b      	adds	r3, r1, #1
1005834c:	2104      	movs	r1, #4
1005834e:	f000 fd08 	bl	10058d62 <GAT_srv_set_zip_val>
10058352:	482c      	ldr	r0, [pc, #176]	@ (10058404 <__arm_cp.1_4>)
10058354:	6801      	ldr	r1, [r0, #0]
10058356:	3183      	adds	r1, #131	@ 0x83
10058358:	a810      	add	r0, sp, #64	@ 0x40
1005835a:	2210      	movs	r2, #16
1005835c:	f7fa fb94 	bl	10052a88 <BLEPLAT_MemCmp>
10058360:	2800      	cmp	r0, #0
10058362:	d01f      	beq.n	100583a4 <GAT_srv_connection+0xd8>
10058364:	2001      	movs	r0, #1
10058366:	aa07      	add	r2, sp, #28
10058368:	4629      	mov	r1, r5
1005836a:	f000 fdeb 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
1005836e:	2800      	cmp	r0, #0
10058370:	d0c8      	beq.n	10058304 <GAT_srv_connection+0x38>
10058372:	f000 fe3f 	bl	10058ff4 <GAT_srv_get_cccd_attr_p>
10058376:	2800      	cmp	r0, #0
10058378:	d0c4      	beq.n	10058304 <GAT_srv_connection+0x38>
1005837a:	4605      	mov	r5, r0
1005837c:	2104      	movs	r1, #4
1005837e:	4620      	mov	r0, r4
10058380:	f7fe fd84 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
10058384:	8881      	ldrh	r1, [r0, #4]
10058386:	2240      	movs	r2, #64	@ 0x40
10058388:	430a      	orrs	r2, r1
1005838a:	8082      	strh	r2, [r0, #4]
1005838c:	a810      	add	r0, sp, #64	@ 0x40
1005838e:	7c42      	ldrb	r2, [r0, #17]
10058390:	4620      	mov	r0, r4
10058392:	4629      	mov	r1, r5
10058394:	f000 fd26 	bl	10058de4 <GAT_srv_set_cccd_val>
10058398:	200b      	movs	r0, #11
1005839a:	f00a fbeb 	bl	10062b74 <tsk_notify_idx>
1005839e:	f7f9 fd6c 	bl	10051e7a <BLE_STACK_ProcessRequest>
100583a2:	e7af      	b.n	10058304 <GAT_srv_connection+0x38>
100583a4:	2001      	movs	r0, #1
100583a6:	f00c fc9d 	bl	10064ce4 <GAT_att_db_find_from_handle>
100583aa:	4606      	mov	r6, r0
100583ac:	ad10      	add	r5, sp, #64	@ 0x40
100583ae:	3512      	adds	r5, #18
100583b0:	2700      	movs	r7, #0
100583b2:	2e00      	cmp	r6, #0
100583b4:	d0a6      	beq.n	10058304 <GAT_srv_connection+0x38>
100583b6:	b2b8      	uxth	r0, r7
100583b8:	2863      	cmp	r0, #99	@ 0x63
100583ba:	d8a3      	bhi.n	10058304 <GAT_srv_connection+0x38>
100583bc:	7831      	ldrb	r1, [r6, #0]
100583be:	2904      	cmp	r1, #4
100583c0:	d112      	bne.n	100583e8 <GAT_srv_connection+0x11c>
100583c2:	6871      	ldr	r1, [r6, #4]
100583c4:	7d0a      	ldrb	r2, [r1, #20]
100583c6:	2a10      	cmp	r2, #16
100583c8:	d10e      	bne.n	100583e8 <GAT_srv_connection+0x11c>
100583ca:	8a09      	ldrh	r1, [r1, #16]
100583cc:	4a0e      	ldr	r2, [pc, #56]	@ (10058408 <__arm_cp.1_5>)
100583ce:	4291      	cmp	r1, r2
100583d0:	d10a      	bne.n	100583e8 <GAT_srv_connection+0x11c>
100583d2:	2102      	movs	r1, #2
100583d4:	2232      	movs	r2, #50	@ 0x32
100583d6:	462b      	mov	r3, r5
100583d8:	f000 fcb0 	bl	10058d3c <GAT_srv_get_zip_val>
100583dc:	4602      	mov	r2, r0
100583de:	4620      	mov	r0, r4
100583e0:	4631      	mov	r1, r6
100583e2:	f000 fcff 	bl	10058de4 <GAT_srv_set_cccd_val>
100583e6:	1c7f      	adds	r7, r7, #1
100583e8:	4630      	mov	r0, r6
100583ea:	f00c fcdd 	bl	10064da8 <GAT_att_db_get_next>
100583ee:	4606      	mov	r6, r0
100583f0:	e7df      	b.n	100583b2 <GAT_srv_connection+0xe6>
100583f2:	46c0      	nop			@ (mov r8, r8)

100583f4 <__arm_cp.1_0>:
100583f4:	10069b38 	.word	0x10069b38

100583f8 <__arm_cp.1_1>:
100583f8:	10069b4c 	.word	0x10069b4c

100583fc <__arm_cp.1_2>:
100583fc:	0000ffff 	.word	0x0000ffff

10058400 <__arm_cp.1_3>:
10058400:	2000247c 	.word	0x2000247c

10058404 <__arm_cp.1_4>:
10058404:	20002420 	.word	0x20002420

10058408 <__arm_cp.1_5>:
10058408:	00002902 	.word	0x00002902

1005840c <GAT_srv_is_bonded>:
1005840c:	b580      	push	{r7, lr}
1005840e:	f00a fa34 	bl	1006287a <smp_sap_check_is_peer_device_bonded>
10058412:	4241      	negs	r1, r0
10058414:	4148      	adcs	r0, r1
10058416:	bd80      	pop	{r7, pc}

10058418 <GAT_srv_bearer_close>:
10058418:	b5f0      	push	{r4, r5, r6, r7, lr}
1005841a:	b0a1      	sub	sp, #132	@ 0x84
1005841c:	2904      	cmp	r1, #4
1005841e:	d000      	beq.n	10058422 <GAT_srv_bearer_close+0xa>
10058420:	e0de      	b.n	100585e0 <GAT_srv_bearer_close+0x1c8>
10058422:	4607      	mov	r7, r0
10058424:	f7ff fff2 	bl	1005840c <GAT_srv_is_bonded>
10058428:	4c6e      	ldr	r4, [pc, #440]	@ (100585e4 <__arm_cp.3_0>)
1005842a:	4e6f      	ldr	r6, [pc, #444]	@ (100585e8 <__arm_cp.3_1>)
1005842c:	2801      	cmp	r0, #1
1005842e:	d000      	beq.n	10058432 <GAT_srv_bearer_close+0x1a>
10058430:	e0a0      	b.n	10058574 <GAT_srv_bearer_close+0x15c>
10058432:	ad0b      	add	r5, sp, #44	@ 0x2c
10058434:	496d      	ldr	r1, [pc, #436]	@ (100585ec <__arm_cp.3_2>)
10058436:	2214      	movs	r2, #20
10058438:	4628      	mov	r0, r5
1005843a:	f00f fd7a 	bl	10067f32 <__aeabi_memcpy>
1005843e:	a810      	add	r0, sp, #64	@ 0x40
10058440:	4634      	mov	r4, r6
10058442:	2600      	movs	r6, #0
10058444:	2244      	movs	r2, #68	@ 0x44
10058446:	4631      	mov	r1, r6
10058448:	f7fa fb0e 	bl	10052a68 <BLEPLAT_MemSet>
1005844c:	2001      	movs	r0, #1
1005844e:	4621      	mov	r1, r4
10058450:	462a      	mov	r2, r5
10058452:	f000 fd77 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
10058456:	2800      	cmp	r0, #0
10058458:	d00f      	beq.n	1005847a <GAT_srv_bearer_close+0x62>
1005845a:	4604      	mov	r4, r0
1005845c:	4638      	mov	r0, r7
1005845e:	f7fe fdbf 	bl	10056fe0 <GAT_att_cmn_get_conn_index>
10058462:	6861      	ldr	r1, [r4, #4]
10058464:	6a09      	ldr	r1, [r1, #32]
10058466:	688b      	ldr	r3, [r1, #8]
10058468:	4961      	ldr	r1, [pc, #388]	@ (100585f0 <__arm_cp.3_3>)
1005846a:	7ac9      	ldrb	r1, [r1, #11]
1005846c:	0849      	lsrs	r1, r1, #1
1005846e:	1c4a      	adds	r2, r1, #1
10058470:	2104      	movs	r1, #4
10058472:	f000 fc63 	bl	10058d3c <GAT_srv_get_zip_val>
10058476:	a910      	add	r1, sp, #64	@ 0x40
10058478:	7408      	strb	r0, [r1, #16]
1005847a:	2104      	movs	r1, #4
1005847c:	9704      	str	r7, [sp, #16]
1005847e:	4638      	mov	r0, r7
10058480:	f7fe fd04 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
10058484:	a910      	add	r1, sp, #64	@ 0x40
10058486:	7c09      	ldrb	r1, [r1, #16]
10058488:	2901      	cmp	r1, #1
1005848a:	d103      	bne.n	10058494 <GAT_srv_bearer_close+0x7c>
1005848c:	8880      	ldrh	r0, [r0, #4]
1005848e:	0600      	lsls	r0, r0, #24
10058490:	0f80      	lsrs	r0, r0, #30
10058492:	d106      	bne.n	100584a2 <GAT_srv_bearer_close+0x8a>
10058494:	4857      	ldr	r0, [pc, #348]	@ (100585f4 <__arm_cp.3_4>)
10058496:	6801      	ldr	r1, [r0, #0]
10058498:	3183      	adds	r1, #131	@ 0x83
1005849a:	a810      	add	r0, sp, #64	@ 0x40
1005849c:	2210      	movs	r2, #16
1005849e:	f7fa fad3 	bl	10052a48 <BLEPLAT_MemCpy>
100584a2:	2001      	movs	r0, #1
100584a4:	9003      	str	r0, [sp, #12]
100584a6:	f00c fc1d 	bl	10064ce4 <GAT_att_db_find_from_handle>
100584aa:	4605      	mov	r5, r0
100584ac:	a810      	add	r0, sp, #64	@ 0x40
100584ae:	3012      	adds	r0, #18
100584b0:	9002      	str	r0, [sp, #8]
100584b2:	9605      	str	r6, [sp, #20]
100584b4:	4c4b      	ldr	r4, [pc, #300]	@ (100585e4 <__arm_cp.3_0>)
100584b6:	2d00      	cmp	r5, #0
100584b8:	d034      	beq.n	10058524 <GAT_srv_bearer_close+0x10c>
100584ba:	b2b7      	uxth	r7, r6
100584bc:	2f63      	cmp	r7, #99	@ 0x63
100584be:	d831      	bhi.n	10058524 <GAT_srv_bearer_close+0x10c>
100584c0:	7828      	ldrb	r0, [r5, #0]
100584c2:	2804      	cmp	r0, #4
100584c4:	d00b      	beq.n	100584de <GAT_srv_bearer_close+0xc6>
100584c6:	2802      	cmp	r0, #2
100584c8:	d127      	bne.n	1005851a <GAT_srv_bearer_close+0x102>
100584ca:	6868      	ldr	r0, [r5, #4]
100584cc:	7d01      	ldrb	r1, [r0, #20]
100584ce:	2910      	cmp	r1, #16
100584d0:	d121      	bne.n	10058516 <GAT_srv_bearer_close+0xfe>
100584d2:	8a00      	ldrh	r0, [r0, #16]
100584d4:	4949      	ldr	r1, [pc, #292]	@ (100585fc <__arm_cp.3_6>)
100584d6:	4288      	cmp	r0, r1
100584d8:	d11d      	bne.n	10058516 <GAT_srv_bearer_close+0xfe>
100584da:	9803      	ldr	r0, [sp, #12]
100584dc:	e01c      	b.n	10058518 <GAT_srv_bearer_close+0x100>
100584de:	6868      	ldr	r0, [r5, #4]
100584e0:	7d01      	ldrb	r1, [r0, #20]
100584e2:	2910      	cmp	r1, #16
100584e4:	d119      	bne.n	1005851a <GAT_srv_bearer_close+0x102>
100584e6:	8a00      	ldrh	r0, [r0, #16]
100584e8:	42a0      	cmp	r0, r4
100584ea:	d116      	bne.n	1005851a <GAT_srv_bearer_close+0x102>
100584ec:	9804      	ldr	r0, [sp, #16]
100584ee:	4629      	mov	r1, r5
100584f0:	f000 fdb0 	bl	10059054 <GAT_srv_get_cccd_val>
100584f4:	4604      	mov	r4, r0
100584f6:	9802      	ldr	r0, [sp, #8]
100584f8:	9000      	str	r0, [sp, #0]
100584fa:	b2e2      	uxtb	r2, r4
100584fc:	2102      	movs	r1, #2
100584fe:	2332      	movs	r3, #50	@ 0x32
10058500:	4638      	mov	r0, r7
10058502:	f000 fc2e 	bl	10058d62 <GAT_srv_set_zip_val>
10058506:	9805      	ldr	r0, [sp, #20]
10058508:	2801      	cmp	r0, #1
1005850a:	d101      	bne.n	10058510 <GAT_srv_bearer_close+0xf8>
1005850c:	a810      	add	r0, sp, #64	@ 0x40
1005850e:	7444      	strb	r4, [r0, #17]
10058510:	1c76      	adds	r6, r6, #1
10058512:	4c34      	ldr	r4, [pc, #208]	@ (100585e4 <__arm_cp.3_0>)
10058514:	e001      	b.n	1005851a <GAT_srv_bearer_close+0x102>
10058516:	2000      	movs	r0, #0
10058518:	9005      	str	r0, [sp, #20]
1005851a:	4628      	mov	r0, r5
1005851c:	f00c fc44 	bl	10064da8 <GAT_att_db_get_next>
10058520:	4605      	mov	r5, r0
10058522:	e7c8      	b.n	100584b6 <GAT_srv_bearer_close+0x9e>
10058524:	2101      	movs	r1, #1
10058526:	aa09      	add	r2, sp, #36	@ 0x24
10058528:	ab08      	add	r3, sp, #32
1005852a:	9f04      	ldr	r7, [sp, #16]
1005852c:	4638      	mov	r0, r7
1005852e:	f00a f96e 	bl	1006280e <smp_sap_get_remote_address_check_addr_type>
10058532:	2800      	cmp	r0, #0
10058534:	d11c      	bne.n	10058570 <GAT_srv_bearer_close+0x158>
10058536:	b2b0      	uxth	r0, r6
10058538:	0040      	lsls	r0, r0, #1
1005853a:	492f      	ldr	r1, [pc, #188]	@ (100585f8 <__arm_cp.3_5>)
1005853c:	1840      	adds	r0, r0, r1
1005853e:	0880      	lsrs	r0, r0, #2
10058540:	3013      	adds	r0, #19
10058542:	b282      	uxth	r2, r0
10058544:	a808      	add	r0, sp, #32
10058546:	7801      	ldrb	r1, [r0, #0]
10058548:	a809      	add	r0, sp, #36	@ 0x24
1005854a:	ab10      	add	r3, sp, #64	@ 0x40
1005854c:	f009 f9cb 	bl	100618e6 <SDB_sap_write_peer_bonded_gatt_client_data>
10058550:	2800      	cmp	r0, #0
10058552:	d00d      	beq.n	10058570 <GAT_srv_bearer_close+0x158>
10058554:	4604      	mov	r4, r0
10058556:	ad06      	add	r5, sp, #24
10058558:	a909      	add	r1, sp, #36	@ 0x24
1005855a:	2206      	movs	r2, #6
1005855c:	4628      	mov	r0, r5
1005855e:	f7fa fa73 	bl	10052a48 <BLEPLAT_MemCpy>
10058562:	71ac      	strb	r4, [r5, #6]
10058564:	2042      	movs	r0, #66	@ 0x42
10058566:	2104      	movs	r1, #4
10058568:	2207      	movs	r2, #7
1005856a:	462b      	mov	r3, r5
1005856c:	f00b fef8 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
10058570:	4e1d      	ldr	r6, [pc, #116]	@ (100585e8 <__arm_cp.3_1>)
10058572:	4c1c      	ldr	r4, [pc, #112]	@ (100585e4 <__arm_cp.3_0>)
10058574:	2001      	movs	r0, #1
10058576:	f00c fbb5 	bl	10064ce4 <GAT_att_db_find_from_handle>
1005857a:	4605      	mov	r5, r0
1005857c:	2800      	cmp	r0, #0
1005857e:	d012      	beq.n	100585a6 <GAT_srv_bearer_close+0x18e>
10058580:	7828      	ldrb	r0, [r5, #0]
10058582:	2804      	cmp	r0, #4
10058584:	d10b      	bne.n	1005859e <GAT_srv_bearer_close+0x186>
10058586:	6868      	ldr	r0, [r5, #4]
10058588:	7d01      	ldrb	r1, [r0, #20]
1005858a:	2910      	cmp	r1, #16
1005858c:	d107      	bne.n	1005859e <GAT_srv_bearer_close+0x186>
1005858e:	8a00      	ldrh	r0, [r0, #16]
10058590:	42a0      	cmp	r0, r4
10058592:	d104      	bne.n	1005859e <GAT_srv_bearer_close+0x186>
10058594:	2200      	movs	r2, #0
10058596:	4638      	mov	r0, r7
10058598:	4629      	mov	r1, r5
1005859a:	f000 fc23 	bl	10058de4 <GAT_srv_set_cccd_val>
1005859e:	4628      	mov	r0, r5
100585a0:	f00c fc02 	bl	10064da8 <GAT_att_db_get_next>
100585a4:	e7e9      	b.n	1005857a <GAT_srv_bearer_close+0x162>
100585a6:	ac10      	add	r4, sp, #64	@ 0x40
100585a8:	4910      	ldr	r1, [pc, #64]	@ (100585ec <__arm_cp.3_2>)
100585aa:	2214      	movs	r2, #20
100585ac:	4620      	mov	r0, r4
100585ae:	f00f fcc0 	bl	10067f32 <__aeabi_memcpy>
100585b2:	2001      	movs	r0, #1
100585b4:	4631      	mov	r1, r6
100585b6:	4622      	mov	r2, r4
100585b8:	f000 fcc4 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
100585bc:	2800      	cmp	r0, #0
100585be:	d00f      	beq.n	100585e0 <GAT_srv_bearer_close+0x1c8>
100585c0:	4604      	mov	r4, r0
100585c2:	4638      	mov	r0, r7
100585c4:	f7fe fd0c 	bl	10056fe0 <GAT_att_cmn_get_conn_index>
100585c8:	4909      	ldr	r1, [pc, #36]	@ (100585f0 <__arm_cp.3_3>)
100585ca:	7ac9      	ldrb	r1, [r1, #11]
100585cc:	6862      	ldr	r2, [r4, #4]
100585ce:	6a12      	ldr	r2, [r2, #32]
100585d0:	6892      	ldr	r2, [r2, #8]
100585d2:	9200      	str	r2, [sp, #0]
100585d4:	0849      	lsrs	r1, r1, #1
100585d6:	1c4b      	adds	r3, r1, #1
100585d8:	2104      	movs	r1, #4
100585da:	2200      	movs	r2, #0
100585dc:	f000 fbc1 	bl	10058d62 <GAT_srv_set_zip_val>
100585e0:	b021      	add	sp, #132	@ 0x84
100585e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100585e4 <__arm_cp.3_0>:
100585e4:	00002902 	.word	0x00002902

100585e8 <__arm_cp.3_1>:
100585e8:	0000ffff 	.word	0x0000ffff

100585ec <__arm_cp.3_2>:
100585ec:	10069b4c 	.word	0x10069b4c

100585f0 <__arm_cp.3_3>:
100585f0:	2000247c 	.word	0x2000247c

100585f4 <__arm_cp.3_4>:
100585f4:	20002420 	.word	0x20002420

100585f8 <__arm_cp.3_5>:
100585f8:	0003fffe 	.word	0x0003fffe

100585fc <__arm_cp.3_6>:
100585fc:	00002a05 	.word	0x00002a05

10058600 <GAT_srv_db_hash_tsk>:
10058600:	b5f0      	push	{r4, r5, r6, r7, lr}
10058602:	b0d3      	sub	sp, #332	@ 0x14c
10058604:	2500      	movs	r5, #0
10058606:	950c      	str	r5, [sp, #48]	@ 0x30
10058608:	950b      	str	r5, [sp, #44]	@ 0x2c
1005860a:	950a      	str	r5, [sp, #40]	@ 0x28
1005860c:	9509      	str	r5, [sp, #36]	@ 0x24
1005860e:	2041      	movs	r0, #65	@ 0x41
10058610:	0082      	lsls	r2, r0, #2
10058612:	ac0d      	add	r4, sp, #52	@ 0x34
10058614:	4620      	mov	r0, r4
10058616:	4629      	mov	r1, r5
10058618:	f7fa fa26 	bl	10052a68 <BLEPLAT_MemSet>
1005861c:	7125      	strb	r5, [r4, #4]
1005861e:	2010      	movs	r0, #16
10058620:	9044      	str	r0, [sp, #272]	@ 0x110
10058622:	9016      	str	r0, [sp, #88]	@ 0x58
10058624:	a809      	add	r0, sp, #36	@ 0x24
10058626:	900f      	str	r0, [sp, #60]	@ 0x3c
10058628:	4620      	mov	r0, r4
1005862a:	f7fa fa6a 	bl	10052b02 <BLEPLAT_AesCMACEncryptInit>
1005862e:	34dc      	adds	r4, #220	@ 0xdc
10058630:	9401      	str	r4, [sp, #4]
10058632:	2001      	movs	r0, #1
10058634:	f00c fb56 	bl	10064ce4 <GAT_att_db_find_from_handle>
10058638:	4606      	mov	r6, r0
1005863a:	a84e      	add	r0, sp, #312	@ 0x138
1005863c:	300c      	adds	r0, #12
1005863e:	9002      	str	r0, [sp, #8]
10058640:	4d48      	ldr	r5, [pc, #288]	@ (10058764 <__arm_cp.5_2>)
10058642:	2e00      	cmp	r6, #0
10058644:	d041      	beq.n	100586ca <GAT_srv_db_hash_tsk+0xca>
10058646:	7830      	ldrb	r0, [r6, #0]
10058648:	2803      	cmp	r0, #3
1005864a:	d039      	beq.n	100586c0 <GAT_srv_db_hash_tsk+0xc0>
1005864c:	af4e      	add	r7, sp, #312	@ 0x138
1005864e:	4630      	mov	r0, r6
10058650:	4639      	mov	r1, r7
10058652:	f000 f907 	bl	10058864 <GAT_srv_get_attr_type>
10058656:	7c38      	ldrb	r0, [r7, #16]
10058658:	2810      	cmp	r0, #16
1005865a:	d131      	bne.n	100586c0 <GAT_srv_db_hash_tsk+0xc0>
1005865c:	8870      	ldrh	r0, [r6, #2]
1005865e:	a904      	add	r1, sp, #16
10058660:	8008      	strh	r0, [r1, #0]
10058662:	a84e      	add	r0, sp, #312	@ 0x138
10058664:	8980      	ldrh	r0, [r0, #12]
10058666:	493d      	ldr	r1, [pc, #244]	@ (1005875c <__arm_cp.5_0>)
10058668:	1841      	adds	r1, r0, r1
1005866a:	2905      	cmp	r1, #5
1005866c:	d31c      	bcc.n	100586a8 <GAT_srv_db_hash_tsk+0xa8>
1005866e:	493c      	ldr	r1, [pc, #240]	@ (10058760 <__arm_cp.5_1>)
10058670:	1841      	adds	r1, r0, r1
10058672:	2904      	cmp	r1, #4
10058674:	d303      	bcc.n	1005867e <GAT_srv_db_hash_tsk+0x7e>
10058676:	2129      	movs	r1, #41	@ 0x29
10058678:	0209      	lsls	r1, r1, #8
1005867a:	4288      	cmp	r0, r1
1005867c:	d120      	bne.n	100586c0 <GAT_srv_db_hash_tsk+0xc0>
1005867e:	af0d      	add	r7, sp, #52	@ 0x34
10058680:	2402      	movs	r4, #2
10058682:	aa04      	add	r2, sp, #16
10058684:	4638      	mov	r0, r7
10058686:	4621      	mov	r1, r4
10058688:	47a8      	blx	r5
1005868a:	4638      	mov	r0, r7
1005868c:	4621      	mov	r1, r4
1005868e:	9a02      	ldr	r2, [sp, #8]
10058690:	47a8      	blx	r5
10058692:	2000      	movs	r0, #0
10058694:	aa05      	add	r2, sp, #20
10058696:	4631      	mov	r1, r6
10058698:	f000 f9a6 	bl	100589e8 <GAT_srv_get_attr_value>
1005869c:	9805      	ldr	r0, [sp, #20]
1005869e:	6842      	ldr	r2, [r0, #4]
100586a0:	8801      	ldrh	r1, [r0, #0]
100586a2:	4638      	mov	r0, r7
100586a4:	47a8      	blx	r5
100586a6:	e00b      	b.n	100586c0 <GAT_srv_db_hash_tsk+0xc0>
100586a8:	ac0d      	add	r4, sp, #52	@ 0x34
100586aa:	2702      	movs	r7, #2
100586ac:	aa04      	add	r2, sp, #16
100586ae:	4620      	mov	r0, r4
100586b0:	4639      	mov	r1, r7
100586b2:	f000 fcdb 	bl	1005906c <GAT_srv_aes_cmac_append>
100586b6:	4620      	mov	r0, r4
100586b8:	4639      	mov	r1, r7
100586ba:	9a02      	ldr	r2, [sp, #8]
100586bc:	f000 fcd6 	bl	1005906c <GAT_srv_aes_cmac_append>
100586c0:	4630      	mov	r0, r6
100586c2:	f00c fb71 	bl	10064da8 <GAT_att_db_get_next>
100586c6:	4606      	mov	r6, r0
100586c8:	e7bb      	b.n	10058642 <GAT_srv_db_hash_tsk+0x42>
100586ca:	9801      	ldr	r0, [sp, #4]
100586cc:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
100586ce:	2a00      	cmp	r2, #0
100586d0:	d006      	beq.n	100586e0 <GAT_srv_db_hash_tsk+0xe0>
100586d2:	a80d      	add	r0, sp, #52	@ 0x34
100586d4:	2120      	movs	r1, #32
100586d6:	7101      	strb	r1, [r0, #4]
100586d8:	4601      	mov	r1, r0
100586da:	31e0      	adds	r1, #224	@ 0xe0
100586dc:	f7fa fa1e 	bl	10052b1c <BLEPLAT_AesCMACEncryptAppend>
100586e0:	a80d      	add	r0, sp, #52	@ 0x34
100586e2:	ac4e      	add	r4, sp, #312	@ 0x138
100586e4:	aa04      	add	r2, sp, #16
100586e6:	4621      	mov	r1, r4
100586e8:	f7fa fa29 	bl	10052b3e <BLEPLAT_AesCMACEncryptFinish>
100586ec:	ad05      	add	r5, sp, #20
100586ee:	2610      	movs	r6, #16
100586f0:	2301      	movs	r3, #1
100586f2:	4628      	mov	r0, r5
100586f4:	4621      	mov	r1, r4
100586f6:	4632      	mov	r2, r6
100586f8:	f00a fba2 	bl	10062e40 <copy_swap_buffer>
100586fc:	4f1a      	ldr	r7, [pc, #104]	@ (10058768 <__arm_cp.5_3>)
100586fe:	6839      	ldr	r1, [r7, #0]
10058700:	3183      	adds	r1, #131	@ 0x83
10058702:	4628      	mov	r0, r5
10058704:	4632      	mov	r2, r6
10058706:	f7fa f9bf 	bl	10052a88 <BLEPLAT_MemCmp>
1005870a:	2800      	cmp	r0, #0
1005870c:	d019      	beq.n	10058742 <GAT_srv_db_hash_tsk+0x142>
1005870e:	6838      	ldr	r0, [r7, #0]
10058710:	3083      	adds	r0, #131	@ 0x83
10058712:	a905      	add	r1, sp, #20
10058714:	2210      	movs	r2, #16
10058716:	f7fa f997 	bl	10052a48 <BLEPLAT_MemCpy>
1005871a:	ad03      	add	r5, sp, #12
1005871c:	2082      	movs	r0, #130	@ 0x82
1005871e:	8028      	strh	r0, [r5, #0]
10058720:	9500      	str	r5, [sp, #0]
10058722:	2400      	movs	r4, #0
10058724:	4b11      	ldr	r3, [pc, #68]	@ (1005876c <__arm_cp.5_4>)
10058726:	4620      	mov	r0, r4
10058728:	4621      	mov	r1, r4
1005872a:	4622      	mov	r2, r4
1005872c:	f7fe faf0 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
10058730:	2040      	movs	r0, #64	@ 0x40
10058732:	8028      	strh	r0, [r5, #0]
10058734:	9500      	str	r5, [sp, #0]
10058736:	4b0e      	ldr	r3, [pc, #56]	@ (10058770 <__arm_cp.5_5>)
10058738:	4620      	mov	r0, r4
1005873a:	4621      	mov	r1, r4
1005873c:	4622      	mov	r2, r4
1005873e:	f7fe fae7 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
10058742:	6838      	ldr	r0, [r7, #0]
10058744:	215c      	movs	r1, #92	@ 0x5c
10058746:	5c42      	ldrb	r2, [r0, r1]
10058748:	23fd      	movs	r3, #253	@ 0xfd
1005874a:	4013      	ands	r3, r2
1005874c:	5443      	strb	r3, [r0, r1]
1005874e:	200b      	movs	r0, #11
10058750:	f00a fa10 	bl	10062b74 <tsk_notify_idx>
10058754:	f7f9 fb91 	bl	10051e7a <BLE_STACK_ProcessRequest>
10058758:	b053      	add	sp, #332	@ 0x14c
1005875a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005875c <__arm_cp.5_0>:
1005875c:	ffffd6ff 	.word	0xffffd6ff

10058760 <__arm_cp.5_1>:
10058760:	ffffd800 	.word	0xffffd800

10058764 <__arm_cp.5_2>:
10058764:	1005906d 	.word	0x1005906d

10058768 <__arm_cp.5_3>:
10058768:	20002420 	.word	0x20002420

1005876c <__arm_cp.5_4>:
1005876c:	10056fd5 	.word	0x10056fd5

10058770 <__arm_cp.5_5>:
10058770:	10056fc9 	.word	0x10056fc9

10058774 <GAT_srv_send_srv_change_tsk>:
10058774:	b5e0      	push	{r5, r6, r7, lr}
10058776:	2100      	movs	r1, #0
10058778:	9100      	str	r1, [sp, #0]
1005877a:	2002      	movs	r0, #2
1005877c:	2204      	movs	r2, #4
1005877e:	4b07      	ldr	r3, [pc, #28]	@ (1005879c <__arm_cp.7_0>)
10058780:	f7fe fac6 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
10058784:	2800      	cmp	r0, #0
10058786:	d001      	beq.n	1005878c <GAT_srv_send_srv_change_tsk+0x18>
10058788:	2881      	cmp	r0, #129	@ 0x81
1005878a:	d100      	bne.n	1005878e <GAT_srv_send_srv_change_tsk+0x1a>
1005878c:	bd8c      	pop	{r2, r3, r7, pc}
1005878e:	200b      	movs	r0, #11
10058790:	f00a f9f0 	bl	10062b74 <tsk_notify_idx>
10058794:	f7f9 fb71 	bl	10051e7a <BLE_STACK_ProcessRequest>
10058798:	bd8c      	pop	{r2, r3, r7, pc}
1005879a:	46c0      	nop			@ (mov r8, r8)

1005879c <__arm_cp.7_0>:
1005879c:	100587a1 	.word	0x100587a1

100587a0 <GAT_srv_tx_service_change>:
100587a0:	b5b0      	push	{r4, r5, r7, lr}
100587a2:	b08a      	sub	sp, #40	@ 0x28
100587a4:	4604      	mov	r4, r0
100587a6:	8880      	ldrh	r0, [r0, #4]
100587a8:	0640      	lsls	r0, r0, #25
100587aa:	d401      	bmi.n	100587b0 <GAT_srv_tx_service_change+0x10>
100587ac:	2500      	movs	r5, #0
100587ae:	e04b      	b.n	10058848 <GAT_srv_tx_service_change+0xa8>
100587b0:	a809      	add	r0, sp, #36	@ 0x24
100587b2:	2180      	movs	r1, #128	@ 0x80
100587b4:	8001      	strh	r1, [r0, #0]
100587b6:	8921      	ldrh	r1, [r4, #8]
100587b8:	9000      	str	r0, [sp, #0]
100587ba:	2001      	movs	r0, #1
100587bc:	2500      	movs	r5, #0
100587be:	4b24      	ldr	r3, [pc, #144]	@ (10058850 <__arm_cp.8_0>)
100587c0:	462a      	mov	r2, r5
100587c2:	f7fe faa5 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
100587c6:	88a1      	ldrh	r1, [r4, #4]
100587c8:	0789      	lsls	r1, r1, #30
100587ca:	d43d      	bmi.n	10058848 <GAT_srv_tx_service_change+0xa8>
100587cc:	2800      	cmp	r0, #0
100587ce:	d13b      	bne.n	10058848 <GAT_srv_tx_service_change+0xa8>
100587d0:	ad04      	add	r5, sp, #16
100587d2:	4920      	ldr	r1, [pc, #128]	@ (10058854 <__arm_cp.8_1>)
100587d4:	2214      	movs	r2, #20
100587d6:	4628      	mov	r0, r5
100587d8:	f00f fbab 	bl	10067f32 <__aeabi_memcpy>
100587dc:	2001      	movs	r0, #1
100587de:	491e      	ldr	r1, [pc, #120]	@ (10058858 <__arm_cp.8_2>)
100587e0:	462a      	mov	r2, r5
100587e2:	f000 fbaf 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
100587e6:	2800      	cmp	r0, #0
100587e8:	d012      	beq.n	10058810 <GAT_srv_tx_service_change+0x70>
100587ea:	4605      	mov	r5, r0
100587ec:	f000 fc02 	bl	10058ff4 <GAT_srv_get_cccd_attr_p>
100587f0:	2800      	cmp	r0, #0
100587f2:	d00d      	beq.n	10058810 <GAT_srv_tx_service_change+0x70>
100587f4:	4601      	mov	r1, r0
100587f6:	8920      	ldrh	r0, [r4, #8]
100587f8:	f000 fc2c 	bl	10059054 <GAT_srv_get_cccd_val>
100587fc:	0780      	lsls	r0, r0, #30
100587fe:	d412      	bmi.n	10058826 <GAT_srv_tx_service_change+0x86>
10058800:	8920      	ldrh	r0, [r4, #8]
10058802:	2100      	movs	r1, #0
10058804:	2201      	movs	r2, #1
10058806:	f000 fbbd 	bl	10058f84 <GAT_srv_check_client_support_feature>
1005880a:	4605      	mov	r5, r0
1005880c:	2881      	cmp	r0, #129	@ 0x81
1005880e:	d11b      	bne.n	10058848 <GAT_srv_tx_service_change+0xa8>
10058810:	a809      	add	r0, sp, #36	@ 0x24
10058812:	2140      	movs	r1, #64	@ 0x40
10058814:	8001      	strh	r1, [r0, #0]
10058816:	8921      	ldrh	r1, [r4, #8]
10058818:	9000      	str	r0, [sp, #0]
1005881a:	2001      	movs	r0, #1
1005881c:	2200      	movs	r2, #0
1005881e:	4b10      	ldr	r3, [pc, #64]	@ (10058860 <__arm_cp.8_4>)
10058820:	f7fe fa76 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
10058824:	e00f      	b.n	10058846 <GAT_srv_tx_service_change+0xa6>
10058826:	480d      	ldr	r0, [pc, #52]	@ (1005885c <__arm_cp.8_3>)
10058828:	9003      	str	r0, [sp, #12]
1005882a:	aa01      	add	r2, sp, #4
1005882c:	2004      	movs	r0, #4
1005882e:	8050      	strh	r0, [r2, #2]
10058830:	8868      	ldrh	r0, [r5, #2]
10058832:	8010      	strh	r0, [r2, #0]
10058834:	a803      	add	r0, sp, #12
10058836:	9002      	str	r0, [sp, #8]
10058838:	8961      	ldrh	r1, [r4, #10]
1005883a:	8920      	ldrh	r0, [r4, #8]
1005883c:	9200      	str	r2, [sp, #0]
1005883e:	2202      	movs	r2, #2
10058840:	2301      	movs	r3, #1
10058842:	f7fe fe17 	bl	10057474 <GAT_att_srv_hvtx>
10058846:	4605      	mov	r5, r0
10058848:	4628      	mov	r0, r5
1005884a:	b00a      	add	sp, #40	@ 0x28
1005884c:	bdb0      	pop	{r4, r5, r7, pc}
1005884e:	46c0      	nop			@ (mov r8, r8)

10058850 <__arm_cp.8_0>:
10058850:	10056fbd 	.word	0x10056fbd

10058854 <__arm_cp.8_1>:
10058854:	10069b38 	.word	0x10069b38

10058858 <__arm_cp.8_2>:
10058858:	0000ffff 	.word	0x0000ffff

1005885c <__arm_cp.8_3>:
1005885c:	ffff0001 	.word	0xffff0001

10058860 <__arm_cp.8_4>:
10058860:	10056fd5 	.word	0x10056fd5

10058864 <GAT_srv_get_attr_type>:
10058864:	b580      	push	{r7, lr}
10058866:	2210      	movs	r2, #16
10058868:	740a      	strb	r2, [r1, #16]
1005886a:	7802      	ldrb	r2, [r0, #0]
1005886c:	2a04      	cmp	r2, #4
1005886e:	d80d      	bhi.n	1005888c <GAT_srv_get_attr_type+0x28>
10058870:	447a      	add	r2, pc
10058872:	7912      	ldrb	r2, [r2, #4]
10058874:	0052      	lsls	r2, r2, #1
10058876:	4497      	add	pc, r2
10058878:	0212160a 	.word	0x0212160a
1005887c:	0002      	.short	0x0002
1005887e:	6840      	ldr	r0, [r0, #4]
10058880:	1d03      	adds	r3, r0, #4
10058882:	2214      	movs	r2, #20
10058884:	4608      	mov	r0, r1
10058886:	4619      	mov	r1, r3
10058888:	f7fa f8de 	bl	10052a48 <BLEPLAT_MemCpy>
1005888c:	bd80      	pop	{r7, pc}
1005888e:	2205      	movs	r2, #5
10058890:	02d2      	lsls	r2, r2, #11
10058892:	6840      	ldr	r0, [r0, #4]
10058894:	7d00      	ldrb	r0, [r0, #20]
10058896:	2801      	cmp	r0, #1
10058898:	d109      	bne.n	100588ae <GAT_srv_get_attr_type+0x4a>
1005889a:	818a      	strh	r2, [r1, #12]
1005889c:	bd80      	pop	{r7, pc}
1005889e:	2005      	movs	r0, #5
100588a0:	02c0      	lsls	r0, r0, #11
100588a2:	1cc0      	adds	r0, r0, #3
100588a4:	e004      	b.n	100588b0 <GAT_srv_get_attr_type+0x4c>
100588a6:	2005      	movs	r0, #5
100588a8:	02c0      	lsls	r0, r0, #11
100588aa:	1c80      	adds	r0, r0, #2
100588ac:	e000      	b.n	100588b0 <GAT_srv_get_attr_type+0x4c>
100588ae:	1c50      	adds	r0, r2, #1
100588b0:	8188      	strh	r0, [r1, #12]
100588b2:	bd80      	pop	{r7, pc}

100588b4 <GAT_srv_get_att_group_end_handle>:
100588b4:	b580      	push	{r7, lr}
100588b6:	7801      	ldrb	r1, [r0, #0]
100588b8:	2202      	movs	r2, #2
100588ba:	430a      	orrs	r2, r1
100588bc:	2a02      	cmp	r2, #2
100588be:	d102      	bne.n	100588c6 <GAT_srv_get_att_group_end_handle+0x12>
100588c0:	f00c fa86 	bl	10064dd0 <GAT_att_db_get_last_group_handle>
100588c4:	bd80      	pop	{r7, pc}
100588c6:	8840      	ldrh	r0, [r0, #2]
100588c8:	bd80      	pop	{r7, pc}

100588ca <GAT_srv_attr_value_read>:
100588ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100588cc:	461c      	mov	r4, r3
100588ce:	9200      	str	r2, [sp, #0]
100588d0:	460e      	mov	r6, r1
100588d2:	4607      	mov	r7, r0
100588d4:	2201      	movs	r2, #1
100588d6:	4608      	mov	r0, r1
100588d8:	4639      	mov	r1, r7
100588da:	f000 f80f 	bl	100588fc <GAT_srv_check_perms>
100588de:	7020      	strb	r0, [r4, #0]
100588e0:	2586      	movs	r5, #134	@ 0x86
100588e2:	2800      	cmp	r0, #0
100588e4:	d108      	bne.n	100588f8 <GAT_srv_attr_value_read+0x2e>
100588e6:	4638      	mov	r0, r7
100588e8:	4631      	mov	r1, r6
100588ea:	9a00      	ldr	r2, [sp, #0]
100588ec:	f000 f87c 	bl	100589e8 <GAT_srv_get_attr_value>
100588f0:	2886      	cmp	r0, #134	@ 0x86
100588f2:	d102      	bne.n	100588fa <GAT_srv_attr_value_read+0x30>
100588f4:	200e      	movs	r0, #14
100588f6:	7020      	strb	r0, [r4, #0]
100588f8:	4628      	mov	r0, r5
100588fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100588fc <GAT_srv_check_perms>:
100588fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100588fe:	b085      	sub	sp, #20
10058900:	4615      	mov	r5, r2
10058902:	9101      	str	r1, [sp, #4]
10058904:	4601      	mov	r1, r0
10058906:	7804      	ldrb	r4, [r0, #0]
10058908:	2700      	movs	r7, #0
1005890a:	2302      	movs	r3, #2
1005890c:	200e      	movs	r0, #14
1005890e:	2c03      	cmp	r4, #3
10058910:	461a      	mov	r2, r3
10058912:	463e      	mov	r6, r7
10058914:	d312      	bcc.n	1005893c <GAT_srv_check_perms+0x40>
10058916:	d00b      	beq.n	10058930 <GAT_srv_check_perms+0x34>
10058918:	2c04      	cmp	r4, #4
1005891a:	d158      	bne.n	100589ce <GAT_srv_check_perms+0xd2>
1005891c:	6848      	ldr	r0, [r1, #4]
1005891e:	7801      	ldrb	r1, [r0, #0]
10058920:	078c      	lsls	r4, r1, #30
10058922:	07c9      	lsls	r1, r1, #31
10058924:	0f8a      	lsrs	r2, r1, #30
10058926:	2c00      	cmp	r4, #0
10058928:	d500      	bpl.n	1005892c <GAT_srv_check_perms+0x30>
1005892a:	324c      	adds	r2, #76	@ 0x4c
1005892c:	1c41      	adds	r1, r0, #1
1005892e:	e002      	b.n	10058936 <GAT_srv_check_perms+0x3a>
10058930:	6848      	ldr	r0, [r1, #4]
10058932:	1c41      	adds	r1, r0, #1
10058934:	7802      	ldrb	r2, [r0, #0]
10058936:	1c80      	adds	r0, r0, #2
10058938:	780e      	ldrb	r6, [r1, #0]
1005893a:	7807      	ldrb	r7, [r0, #0]
1005893c:	2d01      	cmp	r5, #1
1005893e:	d103      	bne.n	10058948 <GAT_srv_check_perms+0x4c>
10058940:	4610      	mov	r0, r2
10058942:	4018      	ands	r0, r3
10058944:	4618      	mov	r0, r3
10058946:	d042      	beq.n	100589ce <GAT_srv_check_perms+0xd2>
10058948:	2003      	movs	r0, #3
1005894a:	2d03      	cmp	r5, #3
1005894c:	d102      	bne.n	10058954 <GAT_srv_check_perms+0x58>
1005894e:	2108      	movs	r1, #8
10058950:	4011      	ands	r1, r2
10058952:	d03c      	beq.n	100589ce <GAT_srv_check_perms+0xd2>
10058954:	2d04      	cmp	r5, #4
10058956:	d102      	bne.n	1005895e <GAT_srv_check_perms+0x62>
10058958:	2104      	movs	r1, #4
1005895a:	4011      	ands	r1, r2
1005895c:	d037      	beq.n	100589ce <GAT_srv_check_perms+0xd2>
1005895e:	2d05      	cmp	r5, #5
10058960:	d102      	bne.n	10058968 <GAT_srv_check_perms+0x6c>
10058962:	2140      	movs	r1, #64	@ 0x40
10058964:	400a      	ands	r2, r1
10058966:	d032      	beq.n	100589ce <GAT_srv_check_perms+0xd2>
10058968:	a904      	add	r1, sp, #16
1005896a:	aa03      	add	r2, sp, #12
1005896c:	ab02      	add	r3, sp, #8
1005896e:	9c01      	ldr	r4, [sp, #4]
10058970:	4620      	mov	r0, r4
10058972:	f009 ff26 	bl	100627c2 <smp_sap_get_security_level>
10058976:	2802      	cmp	r0, #2
10058978:	d102      	bne.n	10058980 <GAT_srv_check_perms+0x84>
1005897a:	2f00      	cmp	r7, #0
1005897c:	d10f      	bne.n	1005899e <GAT_srv_check_perms+0xa2>
1005897e:	e025      	b.n	100589cc <GAT_srv_check_perms+0xd0>
10058980:	2d01      	cmp	r5, #1
10058982:	d000      	beq.n	10058986 <GAT_srv_check_perms+0x8a>
10058984:	08ff      	lsrs	r7, r7, #3
10058986:	2d05      	cmp	r5, #5
10058988:	d10b      	bne.n	100589a2 <GAT_srv_check_perms+0xa6>
1005898a:	a804      	add	r0, sp, #16
1005898c:	7800      	ldrb	r0, [r0, #0]
1005898e:	2802      	cmp	r0, #2
10058990:	d105      	bne.n	1005899e <GAT_srv_check_perms+0xa2>
10058992:	a802      	add	r0, sp, #8
10058994:	7800      	ldrb	r0, [r0, #0]
10058996:	2802      	cmp	r0, #2
10058998:	d114      	bne.n	100589c4 <GAT_srv_check_perms+0xc8>
1005899a:	2000      	movs	r0, #0
1005899c:	e013      	b.n	100589c6 <GAT_srv_check_perms+0xca>
1005899e:	200e      	movs	r0, #14
100589a0:	e015      	b.n	100589ce <GAT_srv_check_perms+0xd2>
100589a2:	2000      	movs	r0, #0
100589a4:	2f00      	cmp	r7, #0
100589a6:	d012      	beq.n	100589ce <GAT_srv_check_perms+0xd2>
100589a8:	a903      	add	r1, sp, #12
100589aa:	7809      	ldrb	r1, [r1, #0]
100589ac:	07fa      	lsls	r2, r7, #31
100589ae:	d003      	beq.n	100589b8 <GAT_srv_check_perms+0xbc>
100589b0:	2903      	cmp	r1, #3
100589b2:	d201      	bcs.n	100589b8 <GAT_srv_check_perms+0xbc>
100589b4:	2005      	movs	r0, #5
100589b6:	e00a      	b.n	100589ce <GAT_srv_check_perms+0xd2>
100589b8:	077a      	lsls	r2, r7, #29
100589ba:	d508      	bpl.n	100589ce <GAT_srv_check_perms+0xd2>
100589bc:	2902      	cmp	r1, #2
100589be:	d208      	bcs.n	100589d2 <GAT_srv_check_perms+0xd6>
100589c0:	200f      	movs	r0, #15
100589c2:	e004      	b.n	100589ce <GAT_srv_check_perms+0xd2>
100589c4:	2005      	movs	r0, #5
100589c6:	2101      	movs	r1, #1
100589c8:	400f      	ands	r7, r1
100589ca:	d100      	bne.n	100589ce <GAT_srv_check_perms+0xd2>
100589cc:	4638      	mov	r0, r7
100589ce:	b005      	add	sp, #20
100589d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100589d2:	4620      	mov	r0, r4
100589d4:	4631      	mov	r1, r6
100589d6:	f009 ff6a 	bl	100628ae <smp_sap_check_encryption_key_size>
100589da:	28b6      	cmp	r0, #182	@ 0xb6
100589dc:	d001      	beq.n	100589e2 <GAT_srv_check_perms+0xe6>
100589de:	2000      	movs	r0, #0
100589e0:	e7f5      	b.n	100589ce <GAT_srv_check_perms+0xd2>
100589e2:	200c      	movs	r0, #12
100589e4:	e7f3      	b.n	100589ce <GAT_srv_check_perms+0xd2>
	...

100589e8 <GAT_srv_get_attr_value>:
100589e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100589ea:	b085      	sub	sp, #20
100589ec:	460d      	mov	r5, r1
100589ee:	7809      	ldrb	r1, [r1, #0]
100589f0:	2904      	cmp	r1, #4
100589f2:	d811      	bhi.n	10058a18 <GAT_srv_get_attr_value+0x30>
100589f4:	4614      	mov	r4, r2
100589f6:	46c0      	nop			@ (mov r8, r8)
100589f8:	4479      	add	r1, pc
100589fa:	7909      	ldrb	r1, [r1, #4]
100589fc:	0049      	lsls	r1, r1, #1
100589fe:	448f      	add	pc, r1
10058a00:	694a0d02 	.word	0x694a0d02
10058a04:	007e      	.short	0x007e
10058a06:	4e73      	ldr	r6, [pc, #460]	@ (10058bd4 <__arm_cp.13_0>)
10058a08:	6830      	ldr	r0, [r6, #0]
10058a0a:	4601      	mov	r1, r0
10058a0c:	3170      	adds	r1, #112	@ 0x70
10058a0e:	66c1      	str	r1, [r0, #108]	@ 0x6c
10058a10:	6868      	ldr	r0, [r5, #4]
10058a12:	f00a fa87 	bl	10062f24 <UUID_write_to_flat>
10058a16:	e057      	b.n	10058ac8 <GAT_srv_get_attr_value+0xe0>
10058a18:	2686      	movs	r6, #134	@ 0x86
10058a1a:	e0d3      	b.n	10058bc4 <GAT_srv_get_attr_value+0x1dc>
10058a1c:	4f6d      	ldr	r7, [pc, #436]	@ (10058bd4 <__arm_cp.13_0>)
10058a1e:	6838      	ldr	r0, [r7, #0]
10058a20:	4601      	mov	r1, r0
10058a22:	3170      	adds	r1, #112	@ 0x70
10058a24:	66c1      	str	r1, [r0, #108]	@ 0x6c
10058a26:	686b      	ldr	r3, [r5, #4]
10058a28:	2001      	movs	r0, #1
10058a2a:	496e      	ldr	r1, [pc, #440]	@ (10058be4 <__arm_cp.13_4>)
10058a2c:	2600      	movs	r6, #0
10058a2e:	4632      	mov	r2, r6
10058a30:	f000 fad6 	bl	10058fe0 <GAT_srv_get_attribute_handle>
10058a34:	a901      	add	r1, sp, #4
10058a36:	8008      	strh	r0, [r1, #0]
10058a38:	2800      	cmp	r0, #0
10058a3a:	d100      	bne.n	10058a3e <GAT_srv_get_attr_value+0x56>
10058a3c:	e0ad      	b.n	10058b9a <GAT_srv_get_attr_value+0x1b2>
10058a3e:	f00c f929 	bl	10064c94 <GAT_att_db_find_by_handle>
10058a42:	f7ff ff37 	bl	100588b4 <GAT_srv_get_att_group_end_handle>
10058a46:	a902      	add	r1, sp, #8
10058a48:	9100      	str	r1, [sp, #0]
10058a4a:	8008      	strh	r0, [r1, #0]
10058a4c:	6838      	ldr	r0, [r7, #0]
10058a4e:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10058a50:	a901      	add	r1, sp, #4
10058a52:	2702      	movs	r7, #2
10058a54:	463a      	mov	r2, r7
10058a56:	f7f9 fff7 	bl	10052a48 <BLEPLAT_MemCpy>
10058a5a:	485e      	ldr	r0, [pc, #376]	@ (10058bd4 <__arm_cp.13_0>)
10058a5c:	6800      	ldr	r0, [r0, #0]
10058a5e:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10058a60:	1c80      	adds	r0, r0, #2
10058a62:	9900      	ldr	r1, [sp, #0]
10058a64:	463a      	mov	r2, r7
10058a66:	f7f9 ffef 	bl	10052a48 <BLEPLAT_MemCpy>
10058a6a:	485a      	ldr	r0, [pc, #360]	@ (10058bd4 <__arm_cp.13_0>)
10058a6c:	6800      	ldr	r0, [r0, #0]
10058a6e:	2768      	movs	r7, #104	@ 0x68
10058a70:	2104      	movs	r1, #4
10058a72:	53c1      	strh	r1, [r0, r7]
10058a74:	6869      	ldr	r1, [r5, #4]
10058a76:	7c0a      	ldrb	r2, [r1, #16]
10058a78:	2a10      	cmp	r2, #16
10058a7a:	d000      	beq.n	10058a7e <GAT_srv_get_attr_value+0x96>
10058a7c:	e091      	b.n	10058ba2 <GAT_srv_get_attr_value+0x1ba>
10058a7e:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10058a80:	310c      	adds	r1, #12
10058a82:	1d00      	adds	r0, r0, #4
10058a84:	2202      	movs	r2, #2
10058a86:	f7f9 ffdf 	bl	10052a48 <BLEPLAT_MemCpy>
10058a8a:	4852      	ldr	r0, [pc, #328]	@ (10058bd4 <__arm_cp.13_0>)
10058a8c:	6800      	ldr	r0, [r0, #0]
10058a8e:	5bc1      	ldrh	r1, [r0, r7]
10058a90:	1c89      	adds	r1, r1, #2
10058a92:	53c1      	strh	r1, [r0, r7]
10058a94:	e085      	b.n	10058ba2 <GAT_srv_get_attr_value+0x1ba>
10058a96:	4e4f      	ldr	r6, [pc, #316]	@ (10058bd4 <__arm_cp.13_0>)
10058a98:	6830      	ldr	r0, [r6, #0]
10058a9a:	4601      	mov	r1, r0
10058a9c:	3170      	adds	r1, #112	@ 0x70
10058a9e:	66c1      	str	r1, [r0, #108]	@ 0x6c
10058aa0:	6869      	ldr	r1, [r5, #4]
10058aa2:	7809      	ldrb	r1, [r1, #0]
10058aa4:	2270      	movs	r2, #112	@ 0x70
10058aa6:	5481      	strb	r1, [r0, r2]
10058aa8:	8869      	ldrh	r1, [r5, #2]
10058aaa:	1c4a      	adds	r2, r1, #1
10058aac:	a903      	add	r1, sp, #12
10058aae:	800a      	strh	r2, [r1, #0]
10058ab0:	3071      	adds	r0, #113	@ 0x71
10058ab2:	2202      	movs	r2, #2
10058ab4:	f7f9 ffc8 	bl	10052a48 <BLEPLAT_MemCpy>
10058ab8:	6830      	ldr	r0, [r6, #0]
10058aba:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
10058abc:	6868      	ldr	r0, [r5, #4]
10058abe:	1d00      	adds	r0, r0, #4
10058ac0:	1cc9      	adds	r1, r1, #3
10058ac2:	f00a fa2f 	bl	10062f24 <UUID_write_to_flat>
10058ac6:	1cc0      	adds	r0, r0, #3
10058ac8:	6831      	ldr	r1, [r6, #0]
10058aca:	2268      	movs	r2, #104	@ 0x68
10058acc:	5288      	strh	r0, [r1, r2]
10058ace:	3168      	adds	r1, #104	@ 0x68
10058ad0:	6021      	str	r1, [r4, #0]
10058ad2:	e076      	b.n	10058bc2 <GAT_srv_get_attr_value+0x1da>
10058ad4:	6869      	ldr	r1, [r5, #4]
10058ad6:	7d0a      	ldrb	r2, [r1, #20]
10058ad8:	2a10      	cmp	r2, #16
10058ada:	d132      	bne.n	10058b42 <GAT_srv_get_attr_value+0x15a>
10058adc:	4a3f      	ldr	r2, [pc, #252]	@ (10058bdc <__arm_cp.13_2>)
10058ade:	1c52      	adds	r2, r2, #1
10058ae0:	8a0b      	ldrh	r3, [r1, #16]
10058ae2:	4293      	cmp	r3, r2
10058ae4:	d12d      	bne.n	10058b42 <GAT_srv_get_attr_value+0x15a>
10058ae6:	483b      	ldr	r0, [pc, #236]	@ (10058bd4 <__arm_cp.13_0>)
10058ae8:	6801      	ldr	r1, [r0, #0]
10058aea:	3168      	adds	r1, #104	@ 0x68
10058aec:	6021      	str	r1, [r4, #0]
10058aee:	6800      	ldr	r0, [r0, #0]
10058af0:	2168      	movs	r1, #104	@ 0x68
10058af2:	2210      	movs	r2, #16
10058af4:	5242      	strh	r2, [r0, r1]
10058af6:	4601      	mov	r1, r0
10058af8:	3183      	adds	r1, #131	@ 0x83
10058afa:	66c1      	str	r1, [r0, #108]	@ 0x6c
10058afc:	e061      	b.n	10058bc2 <GAT_srv_get_attr_value+0x1da>
10058afe:	6869      	ldr	r1, [r5, #4]
10058b00:	6989      	ldr	r1, [r1, #24]
10058b02:	2900      	cmp	r1, #0
10058b04:	d045      	beq.n	10058b92 <GAT_srv_get_attr_value+0x1aa>
10058b06:	4e33      	ldr	r6, [pc, #204]	@ (10058bd4 <__arm_cp.13_0>)
10058b08:	6831      	ldr	r1, [r6, #0]
10058b0a:	3168      	adds	r1, #104	@ 0x68
10058b0c:	6021      	str	r1, [r4, #0]
10058b0e:	6869      	ldr	r1, [r5, #4]
10058b10:	7d0a      	ldrb	r2, [r1, #20]
10058b12:	2a10      	cmp	r2, #16
10058b14:	d13f      	bne.n	10058b96 <GAT_srv_get_attr_value+0x1ae>
10058b16:	8a0a      	ldrh	r2, [r1, #16]
10058b18:	4b2f      	ldr	r3, [pc, #188]	@ (10058bd8 <__arm_cp.13_1>)
10058b1a:	429a      	cmp	r2, r3
10058b1c:	d13b      	bne.n	10058b96 <GAT_srv_get_attr_value+0x1ae>
10058b1e:	6831      	ldr	r1, [r6, #0]
10058b20:	2268      	movs	r2, #104	@ 0x68
10058b22:	2402      	movs	r4, #2
10058b24:	528c      	strh	r4, [r1, r2]
10058b26:	460a      	mov	r2, r1
10058b28:	3270      	adds	r2, #112	@ 0x70
10058b2a:	66ca      	str	r2, [r1, #108]	@ 0x6c
10058b2c:	4629      	mov	r1, r5
10058b2e:	f000 fa91 	bl	10059054 <GAT_srv_get_cccd_val>
10058b32:	a904      	add	r1, sp, #16
10058b34:	8008      	strh	r0, [r1, #0]
10058b36:	6830      	ldr	r0, [r6, #0]
10058b38:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10058b3a:	4622      	mov	r2, r4
10058b3c:	f7f9 ff84 	bl	10052a48 <BLEPLAT_MemCpy>
10058b40:	e03f      	b.n	10058bc2 <GAT_srv_get_attr_value+0x1da>
10058b42:	6a09      	ldr	r1, [r1, #32]
10058b44:	2900      	cmp	r1, #0
10058b46:	d024      	beq.n	10058b92 <GAT_srv_get_attr_value+0x1aa>
10058b48:	4e22      	ldr	r6, [pc, #136]	@ (10058bd4 <__arm_cp.13_0>)
10058b4a:	6831      	ldr	r1, [r6, #0]
10058b4c:	3168      	adds	r1, #104	@ 0x68
10058b4e:	6021      	str	r1, [r4, #0]
10058b50:	6869      	ldr	r1, [r5, #4]
10058b52:	7d0a      	ldrb	r2, [r1, #20]
10058b54:	2a10      	cmp	r2, #16
10058b56:	d127      	bne.n	10058ba8 <GAT_srv_get_attr_value+0x1c0>
10058b58:	8a0a      	ldrh	r2, [r1, #16]
10058b5a:	4b20      	ldr	r3, [pc, #128]	@ (10058bdc <__arm_cp.13_2>)
10058b5c:	429a      	cmp	r2, r3
10058b5e:	d123      	bne.n	10058ba8 <GAT_srv_get_attr_value+0x1c0>
10058b60:	6831      	ldr	r1, [r6, #0]
10058b62:	2268      	movs	r2, #104	@ 0x68
10058b64:	2301      	movs	r3, #1
10058b66:	528b      	strh	r3, [r1, r2]
10058b68:	460a      	mov	r2, r1
10058b6a:	3270      	adds	r2, #112	@ 0x70
10058b6c:	66ca      	str	r2, [r1, #108]	@ 0x6c
10058b6e:	f7fe fa37 	bl	10056fe0 <GAT_att_cmn_get_conn_index>
10058b72:	28ff      	cmp	r0, #255	@ 0xff
10058b74:	d029      	beq.n	10058bca <GAT_srv_get_attr_value+0x1e2>
10058b76:	6869      	ldr	r1, [r5, #4]
10058b78:	6a09      	ldr	r1, [r1, #32]
10058b7a:	688b      	ldr	r3, [r1, #8]
10058b7c:	4918      	ldr	r1, [pc, #96]	@ (10058be0 <__arm_cp.13_3>)
10058b7e:	7ac9      	ldrb	r1, [r1, #11]
10058b80:	0849      	lsrs	r1, r1, #1
10058b82:	1c4a      	adds	r2, r1, #1
10058b84:	2104      	movs	r1, #4
10058b86:	f000 f8d9 	bl	10058d3c <GAT_srv_get_zip_val>
10058b8a:	6831      	ldr	r1, [r6, #0]
10058b8c:	2270      	movs	r2, #112	@ 0x70
10058b8e:	5488      	strb	r0, [r1, r2]
10058b90:	e017      	b.n	10058bc2 <GAT_srv_get_attr_value+0x1da>
10058b92:	2684      	movs	r6, #132	@ 0x84
10058b94:	e016      	b.n	10058bc4 <GAT_srv_get_attr_value+0x1dc>
10058b96:	6988      	ldr	r0, [r1, #24]
10058b98:	e007      	b.n	10058baa <GAT_srv_get_attr_value+0x1c2>
10058b9a:	6838      	ldr	r0, [r7, #0]
10058b9c:	2168      	movs	r1, #104	@ 0x68
10058b9e:	2200      	movs	r2, #0
10058ba0:	5242      	strh	r2, [r0, r1]
10058ba2:	3068      	adds	r0, #104	@ 0x68
10058ba4:	6020      	str	r0, [r4, #0]
10058ba6:	e00d      	b.n	10058bc4 <GAT_srv_get_attr_value+0x1dc>
10058ba8:	6a08      	ldr	r0, [r1, #32]
10058baa:	7801      	ldrb	r1, [r0, #0]
10058bac:	0789      	lsls	r1, r1, #30
10058bae:	d501      	bpl.n	10058bb4 <GAT_srv_get_attr_value+0x1cc>
10058bb0:	2102      	movs	r1, #2
10058bb2:	e000      	b.n	10058bb6 <GAT_srv_get_attr_value+0x1ce>
10058bb4:	2104      	movs	r1, #4
10058bb6:	5a41      	ldrh	r1, [r0, r1]
10058bb8:	6880      	ldr	r0, [r0, #8]
10058bba:	6832      	ldr	r2, [r6, #0]
10058bbc:	2368      	movs	r3, #104	@ 0x68
10058bbe:	52d1      	strh	r1, [r2, r3]
10058bc0:	66d0      	str	r0, [r2, #108]	@ 0x6c
10058bc2:	2600      	movs	r6, #0
10058bc4:	4630      	mov	r0, r6
10058bc6:	b005      	add	sp, #20
10058bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058bca:	6830      	ldr	r0, [r6, #0]
10058bcc:	2170      	movs	r1, #112	@ 0x70
10058bce:	2600      	movs	r6, #0
10058bd0:	5446      	strb	r6, [r0, r1]
10058bd2:	e7f7      	b.n	10058bc4 <GAT_srv_get_attr_value+0x1dc>

10058bd4 <__arm_cp.13_0>:
10058bd4:	20002420 	.word	0x20002420

10058bd8 <__arm_cp.13_1>:
10058bd8:	00002902 	.word	0x00002902

10058bdc <__arm_cp.13_2>:
10058bdc:	00002b29 	.word	0x00002b29

10058be0 <__arm_cp.13_3>:
10058be0:	2000247c 	.word	0x2000247c

10058be4 <__arm_cp.13_4>:
10058be4:	0000ffff 	.word	0x0000ffff

10058be8 <GAT_srv_attr_value_write>:
10058be8:	b5f0      	push	{r4, r5, r6, r7, lr}
10058bea:	b089      	sub	sp, #36	@ 0x24
10058bec:	4617      	mov	r7, r2
10058bee:	460d      	mov	r5, r1
10058bf0:	4606      	mov	r6, r0
10058bf2:	7800      	ldrb	r0, [r0, #0]
10058bf4:	8874      	ldrh	r4, [r6, #2]
10058bf6:	2804      	cmp	r0, #4
10058bf8:	d045      	beq.n	10058c86 <GAT_srv_attr_value_write+0x9e>
10058bfa:	2803      	cmp	r0, #3
10058bfc:	d177      	bne.n	10058cee <GAT_srv_attr_value_write+0x106>
10058bfe:	6871      	ldr	r1, [r6, #4]
10058c00:	6a08      	ldr	r0, [r1, #32]
10058c02:	2800      	cmp	r0, #0
10058c04:	d07d      	beq.n	10058d02 <GAT_srv_attr_value_write+0x11a>
10058c06:	7d0a      	ldrb	r2, [r1, #20]
10058c08:	2a10      	cmp	r2, #16
10058c0a:	d174      	bne.n	10058cf6 <GAT_srv_attr_value_write+0x10e>
10058c0c:	8a09      	ldrh	r1, [r1, #16]
10058c0e:	4a49      	ldr	r2, [pc, #292]	@ (10058d34 <__arm_cp.14_1>)
10058c10:	4291      	cmp	r1, r2
10058c12:	d170      	bne.n	10058cf6 <GAT_srv_attr_value_write+0x10e>
10058c14:	9700      	str	r7, [sp, #0]
10058c16:	2101      	movs	r1, #1
10058c18:	aa07      	add	r2, sp, #28
10058c1a:	ab08      	add	r3, sp, #32
10058c1c:	4628      	mov	r0, r5
10058c1e:	f7fe fd04 	bl	1005762a <GAT_att_srv_extract_write_packet_data>
10058c22:	2800      	cmp	r0, #0
10058c24:	d16e      	bne.n	10058d04 <GAT_srv_attr_value_write+0x11c>
10058c26:	8828      	ldrh	r0, [r5, #0]
10058c28:	f7fe f9da 	bl	10056fe0 <GAT_att_cmn_get_conn_index>
10058c2c:	aa07      	add	r2, sp, #28
10058c2e:	7811      	ldrb	r1, [r2, #0]
10058c30:	2307      	movs	r3, #7
10058c32:	400b      	ands	r3, r1
10058c34:	9305      	str	r3, [sp, #20]
10058c36:	7013      	strb	r3, [r2, #0]
10058c38:	6871      	ldr	r1, [r6, #4]
10058c3a:	6a09      	ldr	r1, [r1, #32]
10058c3c:	688b      	ldr	r3, [r1, #8]
10058c3e:	493e      	ldr	r1, [pc, #248]	@ (10058d38 <__arm_cp.14_2>)
10058c40:	7ac9      	ldrb	r1, [r1, #11]
10058c42:	0849      	lsrs	r1, r1, #1
10058c44:	1c4a      	adds	r2, r1, #1
10058c46:	2104      	movs	r1, #4
10058c48:	9004      	str	r0, [sp, #16]
10058c4a:	9203      	str	r2, [sp, #12]
10058c4c:	9302      	str	r3, [sp, #8]
10058c4e:	f000 f875 	bl	10058d3c <GAT_srv_get_zip_val>
10058c52:	9a05      	ldr	r2, [sp, #20]
10058c54:	4601      	mov	r1, r0
10058c56:	4011      	ands	r1, r2
10058c58:	4281      	cmp	r1, r0
10058c5a:	d157      	bne.n	10058d0c <GAT_srv_attr_value_write+0x124>
10058c5c:	9802      	ldr	r0, [sp, #8]
10058c5e:	9000      	str	r0, [sp, #0]
10058c60:	2104      	movs	r1, #4
10058c62:	9804      	ldr	r0, [sp, #16]
10058c64:	9b03      	ldr	r3, [sp, #12]
10058c66:	f000 f87c 	bl	10058d62 <GAT_srv_set_zip_val>
10058c6a:	6870      	ldr	r0, [r6, #4]
10058c6c:	6a00      	ldr	r0, [r0, #32]
10058c6e:	7800      	ldrb	r0, [r0, #0]
10058c70:	07c0      	lsls	r0, r0, #31
10058c72:	d03a      	beq.n	10058cea <GAT_srv_attr_value_write+0x102>
10058c74:	882e      	ldrh	r6, [r5, #0]
10058c76:	4628      	mov	r0, r5
10058c78:	f000 ff95 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10058c7c:	4602      	mov	r2, r0
10058c7e:	a808      	add	r0, sp, #32
10058c80:	8800      	ldrh	r0, [r0, #0]
10058c82:	a907      	add	r1, sp, #28
10058c84:	e04c      	b.n	10058d20 <GAT_srv_attr_value_write+0x138>
10058c86:	6871      	ldr	r1, [r6, #4]
10058c88:	6988      	ldr	r0, [r1, #24]
10058c8a:	2800      	cmp	r0, #0
10058c8c:	d039      	beq.n	10058d02 <GAT_srv_attr_value_write+0x11a>
10058c8e:	7d0a      	ldrb	r2, [r1, #20]
10058c90:	2a10      	cmp	r2, #16
10058c92:	d130      	bne.n	10058cf6 <GAT_srv_attr_value_write+0x10e>
10058c94:	8a09      	ldrh	r1, [r1, #16]
10058c96:	4a26      	ldr	r2, [pc, #152]	@ (10058d30 <__arm_cp.14_0>)
10058c98:	4291      	cmp	r1, r2
10058c9a:	d12c      	bne.n	10058cf6 <GAT_srv_attr_value_write+0x10e>
10058c9c:	9700      	str	r7, [sp, #0]
10058c9e:	2102      	movs	r1, #2
10058ca0:	aa06      	add	r2, sp, #24
10058ca2:	ab08      	add	r3, sp, #32
10058ca4:	4628      	mov	r0, r5
10058ca6:	f7fe fcc0 	bl	1005762a <GAT_att_srv_extract_write_packet_data>
10058caa:	2800      	cmp	r0, #0
10058cac:	d12a      	bne.n	10058d04 <GAT_srv_attr_value_write+0x11c>
10058cae:	a806      	add	r0, sp, #24
10058cb0:	8800      	ldrh	r0, [r0, #0]
10058cb2:	9005      	str	r0, [sp, #20]
10058cb4:	8870      	ldrh	r0, [r6, #2]
10058cb6:	1e80      	subs	r0, r0, #2
10058cb8:	b281      	uxth	r1, r0
10058cba:	2002      	movs	r0, #2
10058cbc:	f00c f920 	bl	10064f00 <GAT_att_db_reverse_find_attr_of_type>
10058cc0:	2800      	cmp	r0, #0
10058cc2:	d021      	beq.n	10058d08 <GAT_srv_attr_value_write+0x120>
10058cc4:	9905      	ldr	r1, [sp, #20]
10058cc6:	0789      	lsls	r1, r1, #30
10058cc8:	0e89      	lsrs	r1, r1, #26
10058cca:	6840      	ldr	r0, [r0, #4]
10058ccc:	7800      	ldrb	r0, [r0, #0]
10058cce:	4008      	ands	r0, r1
10058cd0:	4288      	cmp	r0, r1
10058cd2:	d119      	bne.n	10058d08 <GAT_srv_attr_value_write+0x120>
10058cd4:	a806      	add	r0, sp, #24
10058cd6:	8802      	ldrh	r2, [r0, #0]
10058cd8:	8828      	ldrh	r0, [r5, #0]
10058cda:	4631      	mov	r1, r6
10058cdc:	f000 f882 	bl	10058de4 <GAT_srv_set_cccd_val>
10058ce0:	6870      	ldr	r0, [r6, #4]
10058ce2:	6980      	ldr	r0, [r0, #24]
10058ce4:	7800      	ldrb	r0, [r0, #0]
10058ce6:	07c0      	lsls	r0, r0, #31
10058ce8:	d112      	bne.n	10058d10 <GAT_srv_attr_value_write+0x128>
10058cea:	2000      	movs	r0, #0
10058cec:	e00a      	b.n	10058d04 <GAT_srv_attr_value_write+0x11c>
10058cee:	2003      	movs	r0, #3
10058cf0:	7038      	strb	r0, [r7, #0]
10058cf2:	2086      	movs	r0, #134	@ 0x86
10058cf4:	e006      	b.n	10058d04 <GAT_srv_attr_value_write+0x11c>
10058cf6:	4621      	mov	r1, r4
10058cf8:	462a      	mov	r2, r5
10058cfa:	463b      	mov	r3, r7
10058cfc:	f000 f847 	bl	10058d8e <GAT_srv_attr_direct_value_write>
10058d00:	e000      	b.n	10058d04 <GAT_srv_attr_value_write+0x11c>
10058d02:	2084      	movs	r0, #132	@ 0x84
10058d04:	b009      	add	sp, #36	@ 0x24
10058d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058d08:	20fd      	movs	r0, #253	@ 0xfd
10058d0a:	e7f1      	b.n	10058cf0 <GAT_srv_attr_value_write+0x108>
10058d0c:	2013      	movs	r0, #19
10058d0e:	e7ef      	b.n	10058cf0 <GAT_srv_attr_value_write+0x108>
10058d10:	882e      	ldrh	r6, [r5, #0]
10058d12:	4628      	mov	r0, r5
10058d14:	f000 ff47 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10058d18:	4602      	mov	r2, r0
10058d1a:	a808      	add	r0, sp, #32
10058d1c:	8800      	ldrh	r0, [r0, #0]
10058d1e:	a906      	add	r1, sp, #24
10058d20:	9000      	str	r0, [sp, #0]
10058d22:	9101      	str	r1, [sp, #4]
10058d24:	2002      	movs	r0, #2
10058d26:	4631      	mov	r1, r6
10058d28:	4623      	mov	r3, r4
10058d2a:	f00a fd59 	bl	100637e0 <aci_gatt_srv_attribute_modified_event_push_noinline>
10058d2e:	e7e9      	b.n	10058d04 <GAT_srv_attr_value_write+0x11c>

10058d30 <__arm_cp.14_0>:
10058d30:	00002902 	.word	0x00002902

10058d34 <__arm_cp.14_1>:
10058d34:	00002b29 	.word	0x00002b29

10058d38 <__arm_cp.14_2>:
10058d38:	2000247c 	.word	0x2000247c

10058d3c <GAT_srv_get_zip_val>:
10058d3c:	b510      	push	{r4, lr}
10058d3e:	4348      	muls	r0, r1
10058d40:	08c4      	lsrs	r4, r0, #3
10058d42:	b2a4      	uxth	r4, r4
10058d44:	4294      	cmp	r4, r2
10058d46:	d901      	bls.n	10058d4c <GAT_srv_get_zip_val+0x10>
10058d48:	2000      	movs	r0, #0
10058d4a:	bd10      	pop	{r4, pc}
10058d4c:	2207      	movs	r2, #7
10058d4e:	4010      	ands	r0, r2
10058d50:	5d1a      	ldrb	r2, [r3, r4]
10058d52:	40c2      	lsrs	r2, r0
10058d54:	2020      	movs	r0, #32
10058d56:	1a41      	subs	r1, r0, r1
10058d58:	2000      	movs	r0, #0
10058d5a:	43c0      	mvns	r0, r0
10058d5c:	40c8      	lsrs	r0, r1
10058d5e:	4010      	ands	r0, r2
10058d60:	bd10      	pop	{r4, pc}

10058d62 <GAT_srv_set_zip_val>:
10058d62:	b5b0      	push	{r4, r5, r7, lr}
10058d64:	4348      	muls	r0, r1
10058d66:	08c4      	lsrs	r4, r0, #3
10058d68:	b2a4      	uxth	r4, r4
10058d6a:	429c      	cmp	r4, r3
10058d6c:	d80e      	bhi.n	10058d8c <GAT_srv_set_zip_val+0x2a>
10058d6e:	9b04      	ldr	r3, [sp, #16]
10058d70:	2507      	movs	r5, #7
10058d72:	4028      	ands	r0, r5
10058d74:	2520      	movs	r5, #32
10058d76:	1a69      	subs	r1, r5, r1
10058d78:	2500      	movs	r5, #0
10058d7a:	43ed      	mvns	r5, r5
10058d7c:	40cd      	lsrs	r5, r1
10058d7e:	402a      	ands	r2, r5
10058d80:	4082      	lsls	r2, r0
10058d82:	4085      	lsls	r5, r0
10058d84:	5d18      	ldrb	r0, [r3, r4]
10058d86:	43a8      	bics	r0, r5
10058d88:	4310      	orrs	r0, r2
10058d8a:	5518      	strb	r0, [r3, r4]
10058d8c:	bdb0      	pop	{r4, r5, r7, pc}

10058d8e <GAT_srv_attr_direct_value_write>:
10058d8e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058d90:	4616      	mov	r6, r2
10058d92:	460c      	mov	r4, r1
10058d94:	4605      	mov	r5, r0
10058d96:	6882      	ldr	r2, [r0, #8]
10058d98:	8881      	ldrh	r1, [r0, #4]
10058d9a:	9300      	str	r3, [sp, #0]
10058d9c:	ab02      	add	r3, sp, #8
10058d9e:	4630      	mov	r0, r6
10058da0:	f7fe fc43 	bl	1005762a <GAT_att_srv_extract_write_packet_data>
10058da4:	2800      	cmp	r0, #0
10058da6:	d000      	beq.n	10058daa <GAT_srv_attr_direct_value_write+0x1c>
10058da8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058daa:	7828      	ldrb	r0, [r5, #0]
10058dac:	0781      	lsls	r1, r0, #30
10058dae:	d403      	bmi.n	10058db8 <GAT_srv_attr_direct_value_write+0x2a>
10058db0:	88a9      	ldrh	r1, [r5, #4]
10058db2:	aa02      	add	r2, sp, #8
10058db4:	8011      	strh	r1, [r2, #0]
10058db6:	e001      	b.n	10058dbc <GAT_srv_attr_direct_value_write+0x2e>
10058db8:	9902      	ldr	r1, [sp, #8]
10058dba:	8069      	strh	r1, [r5, #2]
10058dbc:	07c0      	lsls	r0, r0, #31
10058dbe:	d101      	bne.n	10058dc4 <GAT_srv_attr_direct_value_write+0x36>
10058dc0:	2000      	movs	r0, #0
10058dc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058dc4:	8837      	ldrh	r7, [r6, #0]
10058dc6:	4630      	mov	r0, r6
10058dc8:	f000 feed 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10058dcc:	4602      	mov	r2, r0
10058dce:	a802      	add	r0, sp, #8
10058dd0:	8800      	ldrh	r0, [r0, #0]
10058dd2:	68a9      	ldr	r1, [r5, #8]
10058dd4:	9000      	str	r0, [sp, #0]
10058dd6:	9101      	str	r1, [sp, #4]
10058dd8:	2002      	movs	r0, #2
10058dda:	4639      	mov	r1, r7
10058ddc:	4623      	mov	r3, r4
10058dde:	f00a fcff 	bl	100637e0 <aci_gatt_srv_attribute_modified_event_push_noinline>
10058de2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10058de4 <GAT_srv_set_cccd_val>:
10058de4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10058de6:	4614      	mov	r4, r2
10058de8:	460d      	mov	r5, r1
10058dea:	f7fe f8f9 	bl	10056fe0 <GAT_att_cmn_get_conn_index>
10058dee:	6869      	ldr	r1, [r5, #4]
10058df0:	6989      	ldr	r1, [r1, #24]
10058df2:	888b      	ldrh	r3, [r1, #4]
10058df4:	6889      	ldr	r1, [r1, #8]
10058df6:	9100      	str	r1, [sp, #0]
10058df8:	2103      	movs	r1, #3
10058dfa:	400c      	ands	r4, r1
10058dfc:	2102      	movs	r1, #2
10058dfe:	4622      	mov	r2, r4
10058e00:	f7ff ffaf 	bl	10058d62 <GAT_srv_set_zip_val>
10058e04:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

10058e08 <GAT_srv_is_supported_grouping_type>:
10058e08:	b570      	push	{r4, r5, r6, lr}
10058e0a:	b08a      	sub	sp, #40	@ 0x28
10058e0c:	4604      	mov	r4, r0
10058e0e:	ad05      	add	r5, sp, #20
10058e10:	a10d      	add	r1, pc, #52	@ (adr r1, 10058e48 <GAT_srv_is_supported_grouping_type+0x40>)
10058e12:	2614      	movs	r6, #20
10058e14:	4628      	mov	r0, r5
10058e16:	4632      	mov	r2, r6
10058e18:	f00f f88b 	bl	10067f32 <__aeabi_memcpy>
10058e1c:	4668      	mov	r0, sp
10058e1e:	a10f      	add	r1, pc, #60	@ (adr r1, 10058e5c <GAT_srv_is_supported_grouping_type+0x54>)
10058e20:	4632      	mov	r2, r6
10058e22:	f00f f886 	bl	10067f32 <__aeabi_memcpy>
10058e26:	4620      	mov	r0, r4
10058e28:	4629      	mov	r1, r5
10058e2a:	f00a f84b 	bl	10062ec4 <UUID_cmp_128bits>
10058e2e:	2800      	cmp	r0, #0
10058e30:	d007      	beq.n	10058e42 <GAT_srv_is_supported_grouping_type+0x3a>
10058e32:	4669      	mov	r1, sp
10058e34:	4620      	mov	r0, r4
10058e36:	f00a f845 	bl	10062ec4 <UUID_cmp_128bits>
10058e3a:	4601      	mov	r1, r0
10058e3c:	4240      	negs	r0, r0
10058e3e:	4148      	adcs	r0, r1
10058e40:	e000      	b.n	10058e44 <GAT_srv_is_supported_grouping_type+0x3c>
10058e42:	2001      	movs	r0, #1
10058e44:	b00a      	add	sp, #40	@ 0x28
10058e46:	bd70      	pop	{r4, r5, r6, pc}
10058e48:	5f9b34fb 	.word	0x5f9b34fb
10058e4c:	80000080 	.word	0x80000080
10058e50:	00001000 	.word	0x00001000
10058e54:	00002800 	.word	0x00002800
10058e58:	00000010 	.word	0x00000010
10058e5c:	5f9b34fb 	.word	0x5f9b34fb
10058e60:	80000080 	.word	0x80000080
10058e64:	00001000 	.word	0x00001000
10058e68:	00002801 	.word	0x00002801
10058e6c:	00000010 	.word	0x00000010

10058e70 <GAT_srv_set_change_aware>:
10058e70:	b5e0      	push	{r5, r6, r7, lr}
10058e72:	aa01      	add	r2, sp, #4
10058e74:	21c2      	movs	r1, #194	@ 0xc2
10058e76:	8011      	strh	r1, [r2, #0]
10058e78:	8901      	ldrh	r1, [r0, #8]
10058e7a:	9200      	str	r2, [sp, #0]
10058e7c:	2001      	movs	r0, #1
10058e7e:	2200      	movs	r2, #0
10058e80:	4b01      	ldr	r3, [pc, #4]	@ (10058e88 <__arm_cp.21_0>)
10058e82:	f7fd ff45 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
10058e86:	bd8c      	pop	{r2, r3, r7, pc}

10058e88 <__arm_cp.21_0>:
10058e88:	10056fd5 	.word	0x10056fd5

10058e8c <GAT_srv_check_change_aware>:
10058e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
10058e8e:	b087      	sub	sp, #28
10058e90:	4605      	mov	r5, r0
10058e92:	ac02      	add	r4, sp, #8
10058e94:	4927      	ldr	r1, [pc, #156]	@ (10058f34 <__arm_cp.22_0>)
10058e96:	2214      	movs	r2, #20
10058e98:	4620      	mov	r0, r4
10058e9a:	f00f f84a 	bl	10067f32 <__aeabi_memcpy>
10058e9e:	2001      	movs	r0, #1
10058ea0:	4e25      	ldr	r6, [pc, #148]	@ (10058f38 <__arm_cp.22_1>)
10058ea2:	4631      	mov	r1, r6
10058ea4:	4622      	mov	r2, r4
10058ea6:	f000 f84d 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
10058eaa:	2700      	movs	r7, #0
10058eac:	2800      	cmp	r0, #0
10058eae:	d03c      	beq.n	10058f2a <GAT_srv_check_change_aware+0x9e>
10058eb0:	4601      	mov	r1, r0
10058eb2:	6828      	ldr	r0, [r5, #0]
10058eb4:	8882      	ldrh	r2, [r0, #4]
10058eb6:	0652      	lsls	r2, r2, #25
10058eb8:	d537      	bpl.n	10058f2a <GAT_srv_check_change_aware+0x9e>
10058eba:	792a      	ldrb	r2, [r5, #4]
10058ebc:	23fe      	movs	r3, #254	@ 0xfe
10058ebe:	4013      	ands	r3, r2
10058ec0:	2486      	movs	r4, #134	@ 0x86
10058ec2:	2b04      	cmp	r3, #4
10058ec4:	d032      	beq.n	10058f2c <GAT_srv_check_change_aware+0xa0>
10058ec6:	8900      	ldrh	r0, [r0, #8]
10058ec8:	2201      	movs	r2, #1
10058eca:	f000 f85b 	bl	10058f84 <GAT_srv_check_client_support_feature>
10058ece:	2881      	cmp	r0, #129	@ 0x81
10058ed0:	d02b      	beq.n	10058f2a <GAT_srv_check_change_aware+0x9e>
10058ed2:	6828      	ldr	r0, [r5, #0]
10058ed4:	8881      	ldrh	r1, [r0, #4]
10058ed6:	060a      	lsls	r2, r1, #24
10058ed8:	d425      	bmi.n	10058f26 <GAT_srv_check_change_aware+0x9a>
10058eda:	2780      	movs	r7, #128	@ 0x80
10058edc:	4339      	orrs	r1, r7
10058ede:	8081      	strh	r1, [r0, #4]
10058ee0:	7928      	ldrb	r0, [r5, #4]
10058ee2:	2802      	cmp	r0, #2
10058ee4:	d122      	bne.n	10058f2c <GAT_srv_check_change_aware+0xa0>
10058ee6:	8928      	ldrh	r0, [r5, #8]
10058ee8:	2801      	cmp	r0, #1
10058eea:	d11f      	bne.n	10058f2c <GAT_srv_check_change_aware+0xa0>
10058eec:	8968      	ldrh	r0, [r5, #10]
10058eee:	42b0      	cmp	r0, r6
10058ef0:	d11c      	bne.n	10058f2c <GAT_srv_check_change_aware+0xa0>
10058ef2:	68ea      	ldr	r2, [r5, #12]
10058ef4:	7c10      	ldrb	r0, [r2, #16]
10058ef6:	2810      	cmp	r0, #16
10058ef8:	d118      	bne.n	10058f2c <GAT_srv_check_change_aware+0xa0>
10058efa:	8990      	ldrh	r0, [r2, #12]
10058efc:	490f      	ldr	r1, [pc, #60]	@ (10058f3c <__arm_cp.22_2>)
10058efe:	4288      	cmp	r0, r1
10058f00:	d114      	bne.n	10058f2c <GAT_srv_check_change_aware+0xa0>
10058f02:	2001      	movs	r0, #1
10058f04:	4631      	mov	r1, r6
10058f06:	f000 f81d 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
10058f0a:	2800      	cmp	r0, #0
10058f0c:	d00e      	beq.n	10058f2c <GAT_srv_check_change_aware+0xa0>
10058f0e:	a801      	add	r0, sp, #4
10058f10:	8007      	strh	r7, [r0, #0]
10058f12:	6829      	ldr	r1, [r5, #0]
10058f14:	8909      	ldrh	r1, [r1, #8]
10058f16:	9000      	str	r0, [sp, #0]
10058f18:	2001      	movs	r0, #1
10058f1a:	2400      	movs	r4, #0
10058f1c:	4b08      	ldr	r3, [pc, #32]	@ (10058f40 <__arm_cp.22_3>)
10058f1e:	4622      	mov	r2, r4
10058f20:	f7fd fef6 	bl	10056d10 <GAT_att_cmn_for_each_ch_descr>
10058f24:	e002      	b.n	10058f2c <GAT_srv_check_change_aware+0xa0>
10058f26:	f7ff ffa3 	bl	10058e70 <GAT_srv_set_change_aware>
10058f2a:	463c      	mov	r4, r7
10058f2c:	4620      	mov	r0, r4
10058f2e:	b007      	add	sp, #28
10058f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058f32:	46c0      	nop			@ (mov r8, r8)

10058f34 <__arm_cp.22_0>:
10058f34:	10069b4c 	.word	0x10069b4c

10058f38 <__arm_cp.22_1>:
10058f38:	0000ffff 	.word	0x0000ffff

10058f3c <__arm_cp.22_2>:
10058f3c:	00002b2a 	.word	0x00002b2a

10058f40 <__arm_cp.22_3>:
10058f40:	10056fc9 	.word	0x10056fc9

10058f44 <GAT_srv_find_by_type_attr_p>:
10058f44:	b5f0      	push	{r4, r5, r6, r7, lr}
10058f46:	b085      	sub	sp, #20
10058f48:	4614      	mov	r4, r2
10058f4a:	460d      	mov	r5, r1
10058f4c:	f00b feca 	bl	10064ce4 <GAT_att_db_find_from_handle>
10058f50:	4606      	mov	r6, r0
10058f52:	2000      	movs	r0, #0
10058f54:	2e00      	cmp	r6, #0
10058f56:	d012      	beq.n	10058f7e <GAT_srv_find_by_type_attr_p+0x3a>
10058f58:	8871      	ldrh	r1, [r6, #2]
10058f5a:	42a9      	cmp	r1, r5
10058f5c:	d80f      	bhi.n	10058f7e <GAT_srv_find_by_type_attr_p+0x3a>
10058f5e:	466f      	mov	r7, sp
10058f60:	4630      	mov	r0, r6
10058f62:	4639      	mov	r1, r7
10058f64:	f7ff fc7e 	bl	10058864 <GAT_srv_get_attr_type>
10058f68:	4620      	mov	r0, r4
10058f6a:	4639      	mov	r1, r7
10058f6c:	f009 ff93 	bl	10062e96 <UUID_cmp>
10058f70:	2800      	cmp	r0, #0
10058f72:	d003      	beq.n	10058f7c <GAT_srv_find_by_type_attr_p+0x38>
10058f74:	4630      	mov	r0, r6
10058f76:	f00b ff17 	bl	10064da8 <GAT_att_db_get_next>
10058f7a:	e7e9      	b.n	10058f50 <GAT_srv_find_by_type_attr_p+0xc>
10058f7c:	4630      	mov	r0, r6
10058f7e:	b005      	add	sp, #20
10058f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10058f84 <GAT_srv_check_client_support_feature>:
10058f84:	b570      	push	{r4, r5, r6, lr}
10058f86:	b086      	sub	sp, #24
10058f88:	4614      	mov	r4, r2
10058f8a:	460e      	mov	r6, r1
10058f8c:	4605      	mov	r5, r0
10058f8e:	a801      	add	r0, sp, #4
10058f90:	4910      	ldr	r1, [pc, #64]	@ (10058fd4 <__arm_cp.24_0>)
10058f92:	2214      	movs	r2, #20
10058f94:	f00e ffcd 	bl	10067f32 <__aeabi_memcpy>
10058f98:	2e00      	cmp	r6, #0
10058f9a:	d107      	bne.n	10058fac <GAT_srv_check_client_support_feature+0x28>
10058f9c:	2001      	movs	r0, #1
10058f9e:	490e      	ldr	r1, [pc, #56]	@ (10058fd8 <__arm_cp.24_1>)
10058fa0:	aa01      	add	r2, sp, #4
10058fa2:	f7ff ffcf 	bl	10058f44 <GAT_srv_find_by_type_attr_p>
10058fa6:	4606      	mov	r6, r0
10058fa8:	2800      	cmp	r0, #0
10058faa:	d010      	beq.n	10058fce <GAT_srv_check_client_support_feature+0x4a>
10058fac:	4628      	mov	r0, r5
10058fae:	f7fe f817 	bl	10056fe0 <GAT_att_cmn_get_conn_index>
10058fb2:	6871      	ldr	r1, [r6, #4]
10058fb4:	6a09      	ldr	r1, [r1, #32]
10058fb6:	688b      	ldr	r3, [r1, #8]
10058fb8:	4908      	ldr	r1, [pc, #32]	@ (10058fdc <__arm_cp.24_2>)
10058fba:	7ac9      	ldrb	r1, [r1, #11]
10058fbc:	0849      	lsrs	r1, r1, #1
10058fbe:	1c4a      	adds	r2, r1, #1
10058fc0:	2104      	movs	r1, #4
10058fc2:	f7ff febb 	bl	10058d3c <GAT_srv_get_zip_val>
10058fc6:	4220      	tst	r0, r4
10058fc8:	d001      	beq.n	10058fce <GAT_srv_check_client_support_feature+0x4a>
10058fca:	2000      	movs	r0, #0
10058fcc:	e000      	b.n	10058fd0 <GAT_srv_check_client_support_feature+0x4c>
10058fce:	2081      	movs	r0, #129	@ 0x81
10058fd0:	b006      	add	sp, #24
10058fd2:	bd70      	pop	{r4, r5, r6, pc}

10058fd4 <__arm_cp.24_0>:
10058fd4:	10069b4c 	.word	0x10069b4c

10058fd8 <__arm_cp.24_1>:
10058fd8:	0000ffff 	.word	0x0000ffff

10058fdc <__arm_cp.24_2>:
10058fdc:	2000247c 	.word	0x2000247c

10058fe0 <GAT_srv_get_attribute_handle>:
10058fe0:	b580      	push	{r7, lr}
10058fe2:	f00b fea9 	bl	10064d38 <GAT_att_db_find_by_def>
10058fe6:	2800      	cmp	r0, #0
10058fe8:	d001      	beq.n	10058fee <GAT_srv_get_attribute_handle+0xe>
10058fea:	8840      	ldrh	r0, [r0, #2]
10058fec:	bd80      	pop	{r7, pc}
10058fee:	2000      	movs	r0, #0
10058ff0:	bd80      	pop	{r7, pc}
	...

10058ff4 <GAT_srv_get_cccd_attr_p>:
10058ff4:	b570      	push	{r4, r5, r6, lr}
10058ff6:	b08a      	sub	sp, #40	@ 0x28
10058ff8:	4605      	mov	r5, r0
10058ffa:	a805      	add	r0, sp, #20
10058ffc:	a110      	add	r1, pc, #64	@ (adr r1, 10059040 <GAT_srv_get_cccd_attr_p+0x4c>)
10058ffe:	2214      	movs	r2, #20
10059000:	f00e ff97 	bl	10067f32 <__aeabi_memcpy>
10059004:	7828      	ldrb	r0, [r5, #0]
10059006:	21fe      	movs	r1, #254	@ 0xfe
10059008:	4001      	ands	r1, r0
1005900a:	2400      	movs	r4, #0
1005900c:	2902      	cmp	r1, #2
1005900e:	d114      	bne.n	1005903a <GAT_srv_get_cccd_attr_p+0x46>
10059010:	4628      	mov	r0, r5
10059012:	f00b fec9 	bl	10064da8 <GAT_att_db_get_next>
10059016:	4605      	mov	r5, r0
10059018:	2800      	cmp	r0, #0
1005901a:	d00e      	beq.n	1005903a <GAT_srv_get_cccd_attr_p+0x46>
1005901c:	7828      	ldrb	r0, [r5, #0]
1005901e:	2802      	cmp	r0, #2
10059020:	d00b      	beq.n	1005903a <GAT_srv_get_cccd_attr_p+0x46>
10059022:	466e      	mov	r6, sp
10059024:	4628      	mov	r0, r5
10059026:	4631      	mov	r1, r6
10059028:	f7ff fc1c 	bl	10058864 <GAT_srv_get_attr_type>
1005902c:	a805      	add	r0, sp, #20
1005902e:	4631      	mov	r1, r6
10059030:	f009 ff31 	bl	10062e96 <UUID_cmp>
10059034:	2800      	cmp	r0, #0
10059036:	d1eb      	bne.n	10059010 <GAT_srv_get_cccd_attr_p+0x1c>
10059038:	462c      	mov	r4, r5
1005903a:	4620      	mov	r0, r4
1005903c:	b00a      	add	sp, #40	@ 0x28
1005903e:	bd70      	pop	{r4, r5, r6, pc}
10059040:	5f9b34fb 	.word	0x5f9b34fb
10059044:	80000080 	.word	0x80000080
10059048:	00001000 	.word	0x00001000
1005904c:	00002902 	.word	0x00002902
10059050:	00000010 	.word	0x00000010

10059054 <GAT_srv_get_cccd_val>:
10059054:	b510      	push	{r4, lr}
10059056:	460c      	mov	r4, r1
10059058:	f7fd ffc2 	bl	10056fe0 <GAT_att_cmn_get_conn_index>
1005905c:	6861      	ldr	r1, [r4, #4]
1005905e:	6989      	ldr	r1, [r1, #24]
10059060:	688b      	ldr	r3, [r1, #8]
10059062:	888a      	ldrh	r2, [r1, #4]
10059064:	2102      	movs	r1, #2
10059066:	f7ff fe69 	bl	10058d3c <GAT_srv_get_zip_val>
1005906a:	bd10      	pop	{r4, pc}

1005906c <GAT_srv_aes_cmac_append>:
1005906c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005906e:	b085      	sub	sp, #20
10059070:	9203      	str	r2, [sp, #12]
10059072:	460c      	mov	r4, r1
10059074:	2101      	movs	r1, #1
10059076:	0209      	lsls	r1, r1, #8
10059078:	1841      	adds	r1, r0, r1
1005907a:	9104      	str	r1, [sp, #16]
1005907c:	9002      	str	r0, [sp, #8]
1005907e:	30e0      	adds	r0, #224	@ 0xe0
10059080:	9001      	str	r0, [sp, #4]
10059082:	0420      	lsls	r0, r4, #16
10059084:	d023      	beq.n	100590ce <GAT_srv_aes_cmac_append+0x62>
10059086:	9804      	ldr	r0, [sp, #16]
10059088:	8800      	ldrh	r0, [r0, #0]
1005908a:	2810      	cmp	r0, #16
1005908c:	d107      	bne.n	1005909e <GAT_srv_aes_cmac_append+0x32>
1005908e:	2210      	movs	r2, #16
10059090:	9802      	ldr	r0, [sp, #8]
10059092:	9901      	ldr	r1, [sp, #4]
10059094:	f7f9 fd42 	bl	10052b1c <BLEPLAT_AesCMACEncryptAppend>
10059098:	2000      	movs	r0, #0
1005909a:	9904      	ldr	r1, [sp, #16]
1005909c:	8008      	strh	r0, [r1, #0]
1005909e:	2110      	movs	r1, #16
100590a0:	1a0d      	subs	r5, r1, r0
100590a2:	b2a9      	uxth	r1, r5
100590a4:	b2a2      	uxth	r2, r4
100590a6:	4291      	cmp	r1, r2
100590a8:	d300      	bcc.n	100590ac <GAT_srv_aes_cmac_append+0x40>
100590aa:	4625      	mov	r5, r4
100590ac:	b2af      	uxth	r7, r5
100590ae:	9902      	ldr	r1, [sp, #8]
100590b0:	1808      	adds	r0, r1, r0
100590b2:	30e0      	adds	r0, #224	@ 0xe0
100590b4:	9e03      	ldr	r6, [sp, #12]
100590b6:	4631      	mov	r1, r6
100590b8:	463a      	mov	r2, r7
100590ba:	f7f9 fcc5 	bl	10052a48 <BLEPLAT_MemCpy>
100590be:	9904      	ldr	r1, [sp, #16]
100590c0:	8808      	ldrh	r0, [r1, #0]
100590c2:	1828      	adds	r0, r5, r0
100590c4:	8008      	strh	r0, [r1, #0]
100590c6:	1b64      	subs	r4, r4, r5
100590c8:	19f6      	adds	r6, r6, r7
100590ca:	9603      	str	r6, [sp, #12]
100590cc:	e7d9      	b.n	10059082 <GAT_srv_aes_cmac_append+0x16>
100590ce:	b005      	add	sp, #20
100590d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100590d4 <GAT_srv_add_service>:
100590d4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100590d6:	4604      	mov	r4, r0
100590d8:	f000 f89c 	bl	10059214 <GAT_srv_db_update_allowed>
100590dc:	250c      	movs	r5, #12
100590de:	2800      	cmp	r0, #0
100590e0:	d025      	beq.n	1005912e <GAT_srv_add_service+0x5a>
100590e2:	2612      	movs	r6, #18
100590e4:	2c00      	cmp	r4, #0
100590e6:	d023      	beq.n	10059130 <GAT_srv_add_service+0x5c>
100590e8:	7d20      	ldrb	r0, [r4, #20]
100590ea:	1e40      	subs	r0, r0, #1
100590ec:	2801      	cmp	r0, #1
100590ee:	d81f      	bhi.n	10059130 <GAT_srv_add_service+0x5c>
100590f0:	7c20      	ldrb	r0, [r4, #16]
100590f2:	2880      	cmp	r0, #128	@ 0x80
100590f4:	d01e      	beq.n	10059134 <GAT_srv_add_service+0x60>
100590f6:	2810      	cmp	r0, #16
100590f8:	d11a      	bne.n	10059130 <GAT_srv_add_service+0x5c>
100590fa:	89a0      	ldrh	r0, [r4, #12]
100590fc:	2101      	movs	r1, #1
100590fe:	4388      	bics	r0, r1
10059100:	2103      	movs	r1, #3
10059102:	02c9      	lsls	r1, r1, #11
10059104:	4288      	cmp	r0, r1
10059106:	d115      	bne.n	10059134 <GAT_srv_add_service+0x60>
10059108:	2001      	movs	r0, #1
1005910a:	f00b fdeb 	bl	10064ce4 <GAT_att_db_find_from_handle>
1005910e:	2800      	cmp	r0, #0
10059110:	d010      	beq.n	10059134 <GAT_srv_add_service+0x60>
10059112:	7801      	ldrb	r1, [r0, #0]
10059114:	2900      	cmp	r1, #0
10059116:	d107      	bne.n	10059128 <GAT_srv_add_service+0x54>
10059118:	6841      	ldr	r1, [r0, #4]
1005911a:	7c0a      	ldrb	r2, [r1, #16]
1005911c:	2a10      	cmp	r2, #16
1005911e:	d103      	bne.n	10059128 <GAT_srv_add_service+0x54>
10059120:	8989      	ldrh	r1, [r1, #12]
10059122:	89a2      	ldrh	r2, [r4, #12]
10059124:	428a      	cmp	r2, r1
10059126:	d002      	beq.n	1005912e <GAT_srv_add_service+0x5a>
10059128:	f00b fe3e 	bl	10064da8 <GAT_att_db_get_next>
1005912c:	e7ef      	b.n	1005910e <GAT_srv_add_service+0x3a>
1005912e:	462e      	mov	r6, r5
10059130:	4630      	mov	r0, r6
10059132:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10059134:	2000      	movs	r0, #0
10059136:	f00b fecd 	bl	10064ed4 <GAT_att_db_find_last_attr_of_type>
1005913a:	2800      	cmp	r0, #0
1005913c:	d006      	beq.n	1005914c <GAT_srv_add_service+0x78>
1005913e:	6841      	ldr	r1, [r0, #4]
10059140:	8ac9      	ldrh	r1, [r1, #22]
10059142:	2900      	cmp	r1, #0
10059144:	d004      	beq.n	10059150 <GAT_srv_add_service+0x7c>
10059146:	8840      	ldrh	r0, [r0, #2]
10059148:	1840      	adds	r0, r0, r1
1005914a:	e004      	b.n	10059156 <GAT_srv_add_service+0x82>
1005914c:	2001      	movs	r0, #1
1005914e:	e002      	b.n	10059156 <GAT_srv_add_service+0x82>
10059150:	f00b fe6e 	bl	10064e30 <GAT_att_db_get_last_handle>
10059154:	1c40      	adds	r0, r0, #1
10059156:	b282      	uxth	r2, r0
10059158:	2600      	movs	r6, #0
1005915a:	4630      	mov	r0, r6
1005915c:	4631      	mov	r1, r6
1005915e:	4623      	mov	r3, r4
10059160:	f00b fd44 	bl	10064bec <GAT_att_db_insert>
10059164:	2800      	cmp	r0, #0
10059166:	d020      	beq.n	100591aa <GAT_srv_add_service+0xd6>
10059168:	43f7      	mvns	r7, r6
1005916a:	8ae1      	ldrh	r1, [r4, #22]
1005916c:	1e49      	subs	r1, r1, #1
1005916e:	9102      	str	r1, [sp, #8]
10059170:	9000      	str	r0, [sp, #0]
10059172:	9401      	str	r4, [sp, #4]
10059174:	1c7f      	adds	r7, r7, #1
10059176:	7e21      	ldrb	r1, [r4, #24]
10059178:	428f      	cmp	r7, r1
1005917a:	d218      	bcs.n	100591ae <GAT_srv_add_service+0xda>
1005917c:	8ae1      	ldrh	r1, [r4, #22]
1005917e:	2900      	cmp	r1, #0
10059180:	d004      	beq.n	1005918c <GAT_srv_add_service+0xb8>
10059182:	9a02      	ldr	r2, [sp, #8]
10059184:	0411      	lsls	r1, r2, #16
10059186:	d03a      	beq.n	100591fe <GAT_srv_add_service+0x12a>
10059188:	1e52      	subs	r2, r2, #1
1005918a:	9202      	str	r2, [sp, #8]
1005918c:	1d35      	adds	r5, r6, #4
1005918e:	1c40      	adds	r0, r0, #1
10059190:	9c01      	ldr	r4, [sp, #4]
10059192:	69e1      	ldr	r1, [r4, #28]
10059194:	598b      	ldr	r3, [r1, r6]
10059196:	b282      	uxth	r2, r0
10059198:	2001      	movs	r0, #1
1005919a:	2100      	movs	r1, #0
1005919c:	f00b fd26 	bl	10064bec <GAT_att_db_insert>
100591a0:	2800      	cmp	r0, #0
100591a2:	462e      	mov	r6, r5
100591a4:	d1e6      	bne.n	10059174 <GAT_srv_add_service+0xa0>
100591a6:	2687      	movs	r6, #135	@ 0x87
100591a8:	e02e      	b.n	10059208 <GAT_srv_add_service+0x134>
100591aa:	2687      	movs	r6, #135	@ 0x87
100591ac:	e7c0      	b.n	10059130 <GAT_srv_add_service+0x5c>
100591ae:	4818      	ldr	r0, [pc, #96]	@ (10059210 <__arm_cp.0_0>)
100591b0:	6800      	ldr	r0, [r0, #0]
100591b2:	215c      	movs	r1, #92	@ 0x5c
100591b4:	5c42      	ldrb	r2, [r0, r1]
100591b6:	2302      	movs	r3, #2
100591b8:	4313      	orrs	r3, r2
100591ba:	5443      	strb	r3, [r0, r1]
100591bc:	200a      	movs	r0, #10
100591be:	f009 fcd9 	bl	10062b74 <tsk_notify_idx>
100591c2:	f7f8 fe5a 	bl	10051e7a <BLE_STACK_ProcessRequest>
100591c6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
100591c8:	2600      	movs	r6, #0
100591ca:	2800      	cmp	r0, #0
100591cc:	d0b0      	beq.n	10059130 <GAT_srv_add_service+0x5c>
100591ce:	2020      	movs	r0, #32
100591d0:	5c20      	ldrb	r0, [r4, r0]
100591d2:	2800      	cmp	r0, #0
100591d4:	d0ac      	beq.n	10059130 <GAT_srv_add_service+0x5c>
100591d6:	4621      	mov	r1, r4
100591d8:	3120      	adds	r1, #32
100591da:	9102      	str	r1, [sp, #8]
100591dc:	2500      	movs	r5, #0
100591de:	462f      	mov	r7, r5
100591e0:	9501      	str	r5, [sp, #4]
100591e2:	4285      	cmp	r5, r0
100591e4:	9900      	ldr	r1, [sp, #0]
100591e6:	d20c      	bcs.n	10059202 <GAT_srv_add_service+0x12e>
100591e8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
100591ea:	19c0      	adds	r0, r0, r7
100591ec:	f000 f822 	bl	10059234 <GAT_srv_add_characteristic>
100591f0:	2800      	cmp	r0, #0
100591f2:	d108      	bne.n	10059206 <GAT_srv_add_service+0x132>
100591f4:	3724      	adds	r7, #36	@ 0x24
100591f6:	9802      	ldr	r0, [sp, #8]
100591f8:	7800      	ldrb	r0, [r0, #0]
100591fa:	1c6d      	adds	r5, r5, #1
100591fc:	e7f1      	b.n	100591e2 <GAT_srv_add_service+0x10e>
100591fe:	2612      	movs	r6, #18
10059200:	e002      	b.n	10059208 <GAT_srv_add_service+0x134>
10059202:	9e01      	ldr	r6, [sp, #4]
10059204:	e794      	b.n	10059130 <GAT_srv_add_service+0x5c>
10059206:	4606      	mov	r6, r0
10059208:	9800      	ldr	r0, [sp, #0]
1005920a:	f000 f8a3 	bl	10059354 <GAT_srv_rm_service>
1005920e:	e78f      	b.n	10059130 <GAT_srv_add_service+0x5c>

10059210 <__arm_cp.0_0>:
10059210:	20002420 	.word	0x20002420

10059214 <GAT_srv_db_update_allowed>:
10059214:	b510      	push	{r4, lr}
10059216:	f7fe fac3 	bl	100577a0 <GAT_att_srv_request_user_pending>
1005921a:	2400      	movs	r4, #0
1005921c:	2800      	cmp	r0, #0
1005921e:	d106      	bne.n	1005922e <GAT_srv_db_update_allowed+0x1a>
10059220:	f7fe faac 	bl	1005777c <GAT_att_srv_confirmation_pending>
10059224:	2800      	cmp	r0, #0
10059226:	d102      	bne.n	1005922e <GAT_srv_db_update_allowed+0x1a>
10059228:	f7fe fad2 	bl	100577d0 <GAT_att_srv_flush_user_pending_list>
1005922c:	2401      	movs	r4, #1
1005922e:	4620      	mov	r0, r4
10059230:	bd10      	pop	{r4, pc}
	...

10059234 <GAT_srv_add_characteristic>:
10059234:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10059236:	460e      	mov	r6, r1
10059238:	4604      	mov	r4, r0
1005923a:	f7ff ffeb 	bl	10059214 <GAT_srv_db_update_allowed>
1005923e:	2800      	cmp	r0, #0
10059240:	d066      	beq.n	10059310 <GAT_srv_add_characteristic+0xdc>
10059242:	2512      	movs	r5, #18
10059244:	2c00      	cmp	r4, #0
10059246:	d064      	beq.n	10059312 <GAT_srv_add_characteristic+0xde>
10059248:	7d20      	ldrb	r0, [r4, #20]
1005924a:	2880      	cmp	r0, #128	@ 0x80
1005924c:	d013      	beq.n	10059276 <GAT_srv_add_characteristic+0x42>
1005924e:	2810      	cmp	r0, #16
10059250:	d15f      	bne.n	10059312 <GAT_srv_add_characteristic+0xde>
10059252:	8a20      	ldrh	r0, [r4, #16]
10059254:	493c      	ldr	r1, [pc, #240]	@ (10059348 <__arm_cp.2_0>)
10059256:	4288      	cmp	r0, r1
10059258:	d10d      	bne.n	10059276 <GAT_srv_add_characteristic+0x42>
1005925a:	6a20      	ldr	r0, [r4, #32]
1005925c:	2800      	cmp	r0, #0
1005925e:	d058      	beq.n	10059312 <GAT_srv_add_characteristic+0xde>
10059260:	8882      	ldrh	r2, [r0, #4]
10059262:	493a      	ldr	r1, [pc, #232]	@ (1005934c <__arm_cp.2_1>)
10059264:	7ac9      	ldrb	r1, [r1, #11]
10059266:	0849      	lsrs	r1, r1, #1
10059268:	1c49      	adds	r1, r1, #1
1005926a:	428a      	cmp	r2, r1
1005926c:	d351      	bcc.n	10059312 <GAT_srv_add_characteristic+0xde>
1005926e:	6880      	ldr	r0, [r0, #8]
10059270:	2100      	movs	r1, #0
10059272:	f7f9 fbf9 	bl	10052a68 <BLEPLAT_MemSet>
10059276:	78a0      	ldrb	r0, [r4, #2]
10059278:	2124      	movs	r1, #36	@ 0x24
1005927a:	4208      	tst	r0, r1
1005927c:	d003      	beq.n	10059286 <GAT_srv_add_characteristic+0x52>
1005927e:	7860      	ldrb	r0, [r4, #1]
10059280:	1fc0      	subs	r0, r0, #7
10059282:	2809      	cmp	r0, #9
10059284:	d845      	bhi.n	10059312 <GAT_srv_add_characteristic+0xde>
10059286:	4630      	mov	r0, r6
10059288:	f00b fd04 	bl	10064c94 <GAT_att_db_find_by_handle>
1005928c:	2800      	cmp	r0, #0
1005928e:	d040      	beq.n	10059312 <GAT_srv_add_characteristic+0xde>
10059290:	4606      	mov	r6, r0
10059292:	7800      	ldrb	r0, [r0, #0]
10059294:	2800      	cmp	r0, #0
10059296:	d13c      	bne.n	10059312 <GAT_srv_add_characteristic+0xde>
10059298:	7e20      	ldrb	r0, [r4, #24]
1005929a:	1c81      	adds	r1, r0, #2
1005929c:	4630      	mov	r0, r6
1005929e:	f000 f883 	bl	100593a8 <GAT_srv_check_group_size>
100592a2:	4605      	mov	r5, r0
100592a4:	2800      	cmp	r0, #0
100592a6:	d134      	bne.n	10059312 <GAT_srv_add_characteristic+0xde>
100592a8:	4630      	mov	r0, r6
100592aa:	f7ff fb03 	bl	100588b4 <GAT_srv_get_att_group_end_handle>
100592ae:	4605      	mov	r5, r0
100592b0:	f00b fcf0 	bl	10064c94 <GAT_att_db_find_by_handle>
100592b4:	4601      	mov	r1, r0
100592b6:	1c68      	adds	r0, r5, #1
100592b8:	b286      	uxth	r6, r0
100592ba:	2702      	movs	r7, #2
100592bc:	4638      	mov	r0, r7
100592be:	4632      	mov	r2, r6
100592c0:	4623      	mov	r3, r4
100592c2:	f00b fc93 	bl	10064bec <GAT_att_db_insert>
100592c6:	42b0      	cmp	r0, r6
100592c8:	d125      	bne.n	10059316 <GAT_srv_add_characteristic+0xe2>
100592ca:	4630      	mov	r0, r6
100592cc:	f00b fce2 	bl	10064c94 <GAT_att_db_find_by_handle>
100592d0:	4601      	mov	r1, r0
100592d2:	1ca8      	adds	r0, r5, #2
100592d4:	b282      	uxth	r2, r0
100592d6:	2003      	movs	r0, #3
100592d8:	4623      	mov	r3, r4
100592da:	f00b fc87 	bl	10064bec <GAT_att_db_insert>
100592de:	2800      	cmp	r0, #0
100592e0:	d029      	beq.n	10059336 <GAT_srv_add_characteristic+0x102>
100592e2:	9701      	str	r7, [sp, #4]
100592e4:	9602      	str	r6, [sp, #8]
100592e6:	69e0      	ldr	r0, [r4, #28]
100592e8:	2800      	cmp	r0, #0
100592ea:	d016      	beq.n	1005931a <GAT_srv_add_characteristic+0xe6>
100592ec:	7e20      	ldrb	r0, [r4, #24]
100592ee:	2800      	cmp	r0, #0
100592f0:	d013      	beq.n	1005931a <GAT_srv_add_characteristic+0xe6>
100592f2:	2600      	movs	r6, #0
100592f4:	4637      	mov	r7, r6
100592f6:	4287      	cmp	r7, r0
100592f8:	d20f      	bcs.n	1005931a <GAT_srv_add_characteristic+0xe6>
100592fa:	69e0      	ldr	r0, [r4, #28]
100592fc:	1980      	adds	r0, r0, r6
100592fe:	9902      	ldr	r1, [sp, #8]
10059300:	f000 f86c 	bl	100593dc <GAT_srv_add_char_descriptor>
10059304:	2800      	cmp	r0, #0
10059306:	d118      	bne.n	1005933a <GAT_srv_add_characteristic+0x106>
10059308:	361c      	adds	r6, #28
1005930a:	7e20      	ldrb	r0, [r4, #24]
1005930c:	1c7f      	adds	r7, r7, #1
1005930e:	e7f2      	b.n	100592f6 <GAT_srv_add_characteristic+0xc2>
10059310:	250c      	movs	r5, #12
10059312:	4628      	mov	r0, r5
10059314:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10059316:	2587      	movs	r5, #135	@ 0x87
10059318:	e7fb      	b.n	10059312 <GAT_srv_add_characteristic+0xde>
1005931a:	480d      	ldr	r0, [pc, #52]	@ (10059350 <__arm_cp.2_2>)
1005931c:	6800      	ldr	r0, [r0, #0]
1005931e:	215c      	movs	r1, #92	@ 0x5c
10059320:	5c42      	ldrb	r2, [r0, r1]
10059322:	9b01      	ldr	r3, [sp, #4]
10059324:	431a      	orrs	r2, r3
10059326:	5442      	strb	r2, [r0, r1]
10059328:	200a      	movs	r0, #10
1005932a:	f009 fc23 	bl	10062b74 <tsk_notify_idx>
1005932e:	f7f8 fda4 	bl	10051e7a <BLE_STACK_ProcessRequest>
10059332:	2500      	movs	r5, #0
10059334:	e7ed      	b.n	10059312 <GAT_srv_add_characteristic+0xde>
10059336:	2587      	movs	r5, #135	@ 0x87
10059338:	e001      	b.n	1005933e <GAT_srv_add_characteristic+0x10a>
1005933a:	4605      	mov	r5, r0
1005933c:	9e02      	ldr	r6, [sp, #8]
1005933e:	4630      	mov	r0, r6
10059340:	f000 f8d4 	bl	100594ec <GAT_srv_rm_characteristic>
10059344:	e7e5      	b.n	10059312 <GAT_srv_add_characteristic+0xde>
10059346:	46c0      	nop			@ (mov r8, r8)

10059348 <__arm_cp.2_0>:
10059348:	00002b29 	.word	0x00002b29

1005934c <__arm_cp.2_1>:
1005934c:	2000247c 	.word	0x2000247c

10059350 <__arm_cp.2_2>:
10059350:	20002420 	.word	0x20002420

10059354 <GAT_srv_rm_service>:
10059354:	b510      	push	{r4, lr}
10059356:	4604      	mov	r4, r0
10059358:	f7ff ff5c 	bl	10059214 <GAT_srv_db_update_allowed>
1005935c:	2800      	cmp	r0, #0
1005935e:	d00a      	beq.n	10059376 <GAT_srv_rm_service+0x22>
10059360:	4620      	mov	r0, r4
10059362:	f00b fc97 	bl	10064c94 <GAT_att_db_find_by_handle>
10059366:	4601      	mov	r1, r0
10059368:	2012      	movs	r0, #18
1005936a:	2900      	cmp	r1, #0
1005936c:	d002      	beq.n	10059374 <GAT_srv_rm_service+0x20>
1005936e:	780a      	ldrb	r2, [r1, #0]
10059370:	2a00      	cmp	r2, #0
10059372:	d002      	beq.n	1005937a <GAT_srv_rm_service+0x26>
10059374:	bd10      	pop	{r4, pc}
10059376:	200c      	movs	r0, #12
10059378:	bd10      	pop	{r4, pc}
1005937a:	4608      	mov	r0, r1
1005937c:	f00b fd28 	bl	10064dd0 <GAT_att_db_get_last_group_handle>
10059380:	4601      	mov	r1, r0
10059382:	4620      	mov	r0, r4
10059384:	f00b fd64 	bl	10064e50 <GAT_att_db_rm_att_range>
10059388:	4806      	ldr	r0, [pc, #24]	@ (100593a4 <__arm_cp.3_0>)
1005938a:	6800      	ldr	r0, [r0, #0]
1005938c:	215c      	movs	r1, #92	@ 0x5c
1005938e:	5c42      	ldrb	r2, [r0, r1]
10059390:	2302      	movs	r3, #2
10059392:	4313      	orrs	r3, r2
10059394:	5443      	strb	r3, [r0, r1]
10059396:	200a      	movs	r0, #10
10059398:	f009 fbec 	bl	10062b74 <tsk_notify_idx>
1005939c:	f7f8 fd6d 	bl	10051e7a <BLE_STACK_ProcessRequest>
100593a0:	2000      	movs	r0, #0
100593a2:	bd10      	pop	{r4, pc}

100593a4 <__arm_cp.3_0>:
100593a4:	20002420 	.word	0x20002420

100593a8 <GAT_srv_check_group_size>:
100593a8:	b5b0      	push	{r4, r5, r7, lr}
100593aa:	460d      	mov	r5, r1
100593ac:	4604      	mov	r4, r0
100593ae:	f7ff fa81 	bl	100588b4 <GAT_srv_get_att_group_end_handle>
100593b2:	6861      	ldr	r1, [r4, #4]
100593b4:	8ac9      	ldrh	r1, [r1, #22]
100593b6:	2900      	cmp	r1, #0
100593b8:	d008      	beq.n	100593cc <GAT_srv_check_group_size+0x24>
100593ba:	43c0      	mvns	r0, r0
100593bc:	1808      	adds	r0, r1, r0
100593be:	8861      	ldrh	r1, [r4, #2]
100593c0:	1840      	adds	r0, r0, r1
100593c2:	b280      	uxth	r0, r0
100593c4:	42a8      	cmp	r0, r5
100593c6:	d306      	bcc.n	100593d6 <GAT_srv_check_group_size+0x2e>
100593c8:	2000      	movs	r0, #0
100593ca:	bdb0      	pop	{r4, r5, r7, pc}
100593cc:	2000      	movs	r0, #0
100593ce:	f00b fd81 	bl	10064ed4 <GAT_att_db_find_last_attr_of_type>
100593d2:	42a0      	cmp	r0, r4
100593d4:	d0f8      	beq.n	100593c8 <GAT_srv_check_group_size+0x20>
100593d6:	200c      	movs	r0, #12
100593d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

100593dc <GAT_srv_add_char_descriptor>:
100593dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100593de:	460e      	mov	r6, r1
100593e0:	4604      	mov	r4, r0
100593e2:	f7ff ff17 	bl	10059214 <GAT_srv_db_update_allowed>
100593e6:	2800      	cmp	r0, #0
100593e8:	d075      	beq.n	100594d6 <GAT_srv_add_char_descriptor+0xfa>
100593ea:	2512      	movs	r5, #18
100593ec:	2c00      	cmp	r4, #0
100593ee:	d073      	beq.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
100593f0:	7d20      	ldrb	r0, [r4, #20]
100593f2:	2880      	cmp	r0, #128	@ 0x80
100593f4:	d001      	beq.n	100593fa <GAT_srv_add_char_descriptor+0x1e>
100593f6:	2810      	cmp	r0, #16
100593f8:	d16e      	bne.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
100593fa:	2810      	cmp	r0, #16
100593fc:	d108      	bne.n	10059410 <GAT_srv_add_char_descriptor+0x34>
100593fe:	8a21      	ldrh	r1, [r4, #16]
10059400:	2229      	movs	r2, #41	@ 0x29
10059402:	0212      	lsls	r2, r2, #8
10059404:	1c92      	adds	r2, r2, #2
10059406:	4291      	cmp	r1, r2
10059408:	d102      	bne.n	10059410 <GAT_srv_add_char_descriptor+0x34>
1005940a:	69a1      	ldr	r1, [r4, #24]
1005940c:	2900      	cmp	r1, #0
1005940e:	d063      	beq.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
10059410:	78a1      	ldrb	r1, [r4, #2]
10059412:	2224      	movs	r2, #36	@ 0x24
10059414:	4211      	tst	r1, r2
10059416:	d003      	beq.n	10059420 <GAT_srv_add_char_descriptor+0x44>
10059418:	7862      	ldrb	r2, [r4, #1]
1005941a:	1fd2      	subs	r2, r2, #7
1005941c:	2a09      	cmp	r2, #9
1005941e:	d85b      	bhi.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
10059420:	2810      	cmp	r0, #16
10059422:	d115      	bne.n	10059450 <GAT_srv_add_char_descriptor+0x74>
10059424:	8a20      	ldrh	r0, [r4, #16]
10059426:	4a2f      	ldr	r2, [pc, #188]	@ (100594e4 <__arm_cp.7_0>)
10059428:	1882      	adds	r2, r0, r2
1005942a:	2a05      	cmp	r2, #5
1005942c:	d810      	bhi.n	10059450 <GAT_srv_add_char_descriptor+0x74>
1005942e:	2301      	movs	r3, #1
10059430:	4093      	lsls	r3, r2
10059432:	2231      	movs	r2, #49	@ 0x31
10059434:	4213      	tst	r3, r2
10059436:	d00b      	beq.n	10059450 <GAT_srv_add_char_descriptor+0x74>
10059438:	7822      	ldrb	r2, [r4, #0]
1005943a:	2a01      	cmp	r2, #1
1005943c:	d14c      	bne.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
1005943e:	2900      	cmp	r1, #0
10059440:	d14a      	bne.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
10059442:	2129      	movs	r1, #41	@ 0x29
10059444:	0209      	lsls	r1, r1, #8
10059446:	4288      	cmp	r0, r1
10059448:	d102      	bne.n	10059450 <GAT_srv_add_char_descriptor+0x74>
1005944a:	69a0      	ldr	r0, [r4, #24]
1005944c:	2800      	cmp	r0, #0
1005944e:	d043      	beq.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
10059450:	4630      	mov	r0, r6
10059452:	f00b fc1f 	bl	10064c94 <GAT_att_db_find_by_handle>
10059456:	2800      	cmp	r0, #0
10059458:	d03e      	beq.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
1005945a:	4607      	mov	r7, r0
1005945c:	7800      	ldrb	r0, [r0, #0]
1005945e:	2802      	cmp	r0, #2
10059460:	d13a      	bne.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
10059462:	2500      	movs	r5, #0
10059464:	4628      	mov	r0, r5
10059466:	4631      	mov	r1, r6
10059468:	f00b fd4a 	bl	10064f00 <GAT_att_db_reverse_find_attr_of_type>
1005946c:	2800      	cmp	r0, #0
1005946e:	d035      	beq.n	100594dc <GAT_srv_add_char_descriptor+0x100>
10059470:	462e      	mov	r6, r5
10059472:	2101      	movs	r1, #1
10059474:	f7ff ff98 	bl	100593a8 <GAT_srv_check_group_size>
10059478:	4605      	mov	r5, r0
1005947a:	2800      	cmp	r0, #0
1005947c:	d12c      	bne.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
1005947e:	4638      	mov	r0, r7
10059480:	f7ff fa18 	bl	100588b4 <GAT_srv_get_att_group_end_handle>
10059484:	4605      	mov	r5, r0
10059486:	f00b fc05 	bl	10064c94 <GAT_att_db_find_by_handle>
1005948a:	4601      	mov	r1, r0
1005948c:	1c6d      	adds	r5, r5, #1
1005948e:	b2aa      	uxth	r2, r5
10059490:	2004      	movs	r0, #4
10059492:	4623      	mov	r3, r4
10059494:	f00b fbaa 	bl	10064bec <GAT_att_db_insert>
10059498:	4285      	cmp	r5, r0
1005949a:	d121      	bne.n	100594e0 <GAT_srv_add_char_descriptor+0x104>
1005949c:	7d20      	ldrb	r0, [r4, #20]
1005949e:	2810      	cmp	r0, #16
100594a0:	d10b      	bne.n	100594ba <GAT_srv_add_char_descriptor+0xde>
100594a2:	8a20      	ldrh	r0, [r4, #16]
100594a4:	2129      	movs	r1, #41	@ 0x29
100594a6:	0209      	lsls	r1, r1, #8
100594a8:	1c89      	adds	r1, r1, #2
100594aa:	4288      	cmp	r0, r1
100594ac:	d105      	bne.n	100594ba <GAT_srv_add_char_descriptor+0xde>
100594ae:	69a0      	ldr	r0, [r4, #24]
100594b0:	8882      	ldrh	r2, [r0, #4]
100594b2:	6880      	ldr	r0, [r0, #8]
100594b4:	2100      	movs	r1, #0
100594b6:	f7f9 fad7 	bl	10052a68 <BLEPLAT_MemSet>
100594ba:	480b      	ldr	r0, [pc, #44]	@ (100594e8 <__arm_cp.7_1>)
100594bc:	6800      	ldr	r0, [r0, #0]
100594be:	215c      	movs	r1, #92	@ 0x5c
100594c0:	5c42      	ldrb	r2, [r0, r1]
100594c2:	2302      	movs	r3, #2
100594c4:	4313      	orrs	r3, r2
100594c6:	5443      	strb	r3, [r0, r1]
100594c8:	200a      	movs	r0, #10
100594ca:	f009 fb53 	bl	10062b74 <tsk_notify_idx>
100594ce:	f7f8 fcd4 	bl	10051e7a <BLE_STACK_ProcessRequest>
100594d2:	4635      	mov	r5, r6
100594d4:	e000      	b.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
100594d6:	250c      	movs	r5, #12
100594d8:	4628      	mov	r0, r5
100594da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100594dc:	2586      	movs	r5, #134	@ 0x86
100594de:	e7fb      	b.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>
100594e0:	2587      	movs	r5, #135	@ 0x87
100594e2:	e7f9      	b.n	100594d8 <GAT_srv_add_char_descriptor+0xfc>

100594e4 <__arm_cp.7_0>:
100594e4:	ffffd700 	.word	0xffffd700

100594e8 <__arm_cp.7_1>:
100594e8:	20002420 	.word	0x20002420

100594ec <GAT_srv_rm_characteristic>:
100594ec:	b510      	push	{r4, lr}
100594ee:	4604      	mov	r4, r0
100594f0:	f7ff fe90 	bl	10059214 <GAT_srv_db_update_allowed>
100594f4:	2800      	cmp	r0, #0
100594f6:	d01e      	beq.n	10059536 <GAT_srv_rm_characteristic+0x4a>
100594f8:	4620      	mov	r0, r4
100594fa:	f00b fbcb 	bl	10064c94 <GAT_att_db_find_by_handle>
100594fe:	4601      	mov	r1, r0
10059500:	2012      	movs	r0, #18
10059502:	2900      	cmp	r1, #0
10059504:	d016      	beq.n	10059534 <GAT_srv_rm_characteristic+0x48>
10059506:	780a      	ldrb	r2, [r1, #0]
10059508:	2a02      	cmp	r2, #2
1005950a:	d113      	bne.n	10059534 <GAT_srv_rm_characteristic+0x48>
1005950c:	4608      	mov	r0, r1
1005950e:	f00b fc5f 	bl	10064dd0 <GAT_att_db_get_last_group_handle>
10059512:	4601      	mov	r1, r0
10059514:	4620      	mov	r0, r4
10059516:	f00b fc9b 	bl	10064e50 <GAT_att_db_rm_att_range>
1005951a:	4808      	ldr	r0, [pc, #32]	@ (1005953c <__arm_cp.8_0>)
1005951c:	6800      	ldr	r0, [r0, #0]
1005951e:	215c      	movs	r1, #92	@ 0x5c
10059520:	5c42      	ldrb	r2, [r0, r1]
10059522:	2302      	movs	r3, #2
10059524:	4313      	orrs	r3, r2
10059526:	5443      	strb	r3, [r0, r1]
10059528:	200a      	movs	r0, #10
1005952a:	f009 fb23 	bl	10062b74 <tsk_notify_idx>
1005952e:	f7f8 fca4 	bl	10051e7a <BLE_STACK_ProcessRequest>
10059532:	2000      	movs	r0, #0
10059534:	bd10      	pop	{r4, pc}
10059536:	200c      	movs	r0, #12
10059538:	bd10      	pop	{r4, pc}
1005953a:	46c0      	nop			@ (mov r8, r8)

1005953c <__arm_cp.8_0>:
1005953c:	20002420 	.word	0x20002420

10059540 <GAT_srv_resp>:
10059540:	b51c      	push	{r2, r3, r4, lr}
10059542:	9c05      	ldr	r4, [sp, #20]
10059544:	9401      	str	r4, [sp, #4]
10059546:	9c04      	ldr	r4, [sp, #16]
10059548:	9400      	str	r4, [sp, #0]
1005954a:	f7fe f893 	bl	10057674 <GAT_att_srv_resp>
1005954e:	bd1c      	pop	{r2, r3, r4, pc}

10059550 <GAT_srv_get_service_handle>:
10059550:	b580      	push	{r7, lr}
10059552:	4603      	mov	r3, r0
10059554:	2001      	movs	r0, #1
10059556:	4902      	ldr	r1, [pc, #8]	@ (10059560 <__arm_cp.14_0>)
10059558:	2200      	movs	r2, #0
1005955a:	f7ff fd41 	bl	10058fe0 <GAT_srv_get_attribute_handle>
1005955e:	bd80      	pop	{r7, pc}

10059560 <__arm_cp.14_0>:
10059560:	0000ffff 	.word	0x0000ffff

10059564 <GAT_srv_get_char_decl_handle>:
10059564:	b580      	push	{r7, lr}
10059566:	4603      	mov	r3, r0
10059568:	2001      	movs	r0, #1
1005956a:	4902      	ldr	r1, [pc, #8]	@ (10059574 <__arm_cp.16_0>)
1005956c:	2202      	movs	r2, #2
1005956e:	f7ff fd37 	bl	10058fe0 <GAT_srv_get_attribute_handle>
10059572:	bd80      	pop	{r7, pc}

10059574 <__arm_cp.16_0>:
10059574:	0000ffff 	.word	0x0000ffff

10059578 <hci_rx_acl_data>:
10059578:	b5f0      	push	{r4, r5, r6, r7, lr}
1005957a:	b085      	sub	sp, #20
1005957c:	4604      	mov	r4, r0
1005957e:	7887      	ldrb	r7, [r0, #2]
10059580:	1e78      	subs	r0, r7, #1
10059582:	2103      	movs	r1, #3
10059584:	9104      	str	r1, [sp, #16]
10059586:	4308      	orrs	r0, r1
10059588:	3009      	adds	r0, #9
1005958a:	0880      	lsrs	r0, r0, #2
1005958c:	b283      	uxth	r3, r0
1005958e:	7a20      	ldrb	r0, [r4, #8]
10059590:	9003      	str	r0, [sp, #12]
10059592:	8820      	ldrh	r0, [r4, #0]
10059594:	9002      	str	r0, [sp, #8]
10059596:	4811      	ldr	r0, [pc, #68]	@ (100595dc <__arm_cp.2_0>)
10059598:	6800      	ldr	r0, [r0, #0]
1005959a:	6980      	ldr	r0, [r0, #24]
1005959c:	2502      	movs	r5, #2
1005959e:	223e      	movs	r2, #62	@ 0x3e
100595a0:	4629      	mov	r1, r5
100595a2:	f7fb ff9d 	bl	100554e0 <aci_event_fifo_push_header>
100595a6:	2800      	cmp	r0, #0
100595a8:	d014      	beq.n	100595d4 <hci_rx_acl_data+0x5c>
100595aa:	4606      	mov	r6, r0
100595ac:	9700      	str	r7, [sp, #0]
100595ae:	9401      	str	r4, [sp, #4]
100595b0:	9804      	ldr	r0, [sp, #16]
100595b2:	9a03      	ldr	r2, [sp, #12]
100595b4:	4002      	ands	r2, r0
100595b6:	1d30      	adds	r0, r6, #4
100595b8:	2700      	movs	r7, #0
100595ba:	9902      	ldr	r1, [sp, #8]
100595bc:	463b      	mov	r3, r7
100595be:	f7fc fcf6 	bl	10055fae <hci_rx_acl_data_event_copy>
100595c2:	7135      	strb	r5, [r6, #4]
100595c4:	4628      	mov	r0, r5
100595c6:	4631      	mov	r1, r6
100595c8:	f7fc f827 	bl	1005561a <aci_event_fifo_push>
100595cc:	4620      	mov	r0, r4
100595ce:	f7fb fdd3 	bl	10055178 <ACL_pkt_release>
100595d2:	e000      	b.n	100595d6 <hci_rx_acl_data+0x5e>
100595d4:	2707      	movs	r7, #7
100595d6:	4638      	mov	r0, r7
100595d8:	b005      	add	sp, #20
100595da:	bdf0      	pop	{r4, r5, r6, r7, pc}

100595dc <__arm_cp.2_0>:
100595dc:	20002418 	.word	0x20002418

100595e0 <hci_tx_acl_data_done>:
100595e0:	b5b0      	push	{r4, r5, r7, lr}
100595e2:	4604      	mov	r4, r0
100595e4:	8801      	ldrh	r1, [r0, #0]
100595e6:	2002      	movs	r0, #2
100595e8:	f00a fe38 	bl	1006425c <hci_number_of_completed_packets_event_push_noinline>
100595ec:	4605      	mov	r5, r0
100595ee:	2800      	cmp	r0, #0
100595f0:	d102      	bne.n	100595f8 <hci_tx_acl_data_done+0x18>
100595f2:	4620      	mov	r0, r4
100595f4:	f7fb fdc0 	bl	10055178 <ACL_pkt_release>
100595f8:	4628      	mov	r0, r5
100595fa:	bdb0      	pop	{r4, r5, r7, pc}

100595fc <hci_le_set_advertising_parameters>:
100595fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100595fe:	b089      	sub	sp, #36	@ 0x24
10059600:	461d      	mov	r5, r3
10059602:	4616      	mov	r6, r2
10059604:	460f      	mov	r7, r1
10059606:	9004      	str	r0, [sp, #16]
10059608:	2002      	movs	r0, #2
1005960a:	2401      	movs	r4, #1
1005960c:	4621      	mov	r1, r4
1005960e:	f000 f8d9 	bl	100597c4 <hci_get_set_legacy_ext_flag>
10059612:	2800      	cmp	r0, #0
10059614:	d150      	bne.n	100596b8 <hci_le_set_advertising_parameters+0xbc>
10059616:	9703      	str	r7, [sp, #12]
10059618:	2012      	movs	r0, #18
1005961a:	2e04      	cmp	r6, #4
1005961c:	d84c      	bhi.n	100596b8 <hci_le_set_advertising_parameters+0xbc>
1005961e:	9002      	str	r0, [sp, #8]
10059620:	f7f5 fcb0 	bl	1004ef84 <conn_supp_csr_ucfg>
10059624:	2e01      	cmp	r6, #1
10059626:	d803      	bhi.n	10059630 <hci_le_set_advertising_parameters+0x34>
10059628:	2800      	cmp	r0, #0
1005962a:	d101      	bne.n	10059630 <hci_le_set_advertising_parameters+0x34>
1005962c:	2011      	movs	r0, #17
1005962e:	e043      	b.n	100596b8 <hci_le_set_advertising_parameters+0xbc>
10059630:	9811      	ldr	r0, [sp, #68]	@ 0x44
10059632:	9000      	str	r0, [sp, #0]
10059634:	9810      	ldr	r0, [sp, #64]	@ 0x40
10059636:	9001      	str	r0, [sp, #4]
10059638:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005963a:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005963c:	af05      	add	r7, sp, #20
1005963e:	7238      	strb	r0, [r7, #8]
10059640:	71fd      	strb	r5, [r7, #7]
10059642:	713e      	strb	r6, [r7, #4]
10059644:	9803      	ldr	r0, [sp, #12]
10059646:	8078      	strh	r0, [r7, #2]
10059648:	9804      	ldr	r0, [sp, #16]
1005964a:	8038      	strh	r0, [r7, #0]
1005964c:	4638      	mov	r0, r7
1005964e:	3009      	adds	r0, #9
10059650:	2206      	movs	r2, #6
10059652:	f7f9 f9f9 	bl	10052a48 <BLEPLAT_MemCpy>
10059656:	9900      	ldr	r1, [sp, #0]
10059658:	71b9      	strb	r1, [r7, #6]
1005965a:	9801      	ldr	r0, [sp, #4]
1005965c:	7178      	strb	r0, [r7, #5]
1005965e:	7938      	ldrb	r0, [r7, #4]
10059660:	2804      	cmp	r0, #4
10059662:	d001      	beq.n	10059668 <hci_le_set_advertising_parameters+0x6c>
10059664:	2801      	cmp	r0, #1
10059666:	d104      	bne.n	10059672 <hci_le_set_advertising_parameters+0x76>
10059668:	a905      	add	r1, sp, #20
1005966a:	7a09      	ldrb	r1, [r1, #8]
1005966c:	2902      	cmp	r1, #2
1005966e:	d302      	bcc.n	10059676 <hci_le_set_advertising_parameters+0x7a>
10059670:	e021      	b.n	100596b6 <hci_le_set_advertising_parameters+0xba>
10059672:	2903      	cmp	r1, #3
10059674:	d81f      	bhi.n	100596b6 <hci_le_set_advertising_parameters+0xba>
10059676:	2801      	cmp	r0, #1
10059678:	d10e      	bne.n	10059698 <hci_le_set_advertising_parameters+0x9c>
1005967a:	f000 f966 	bl	1005994a <hci_le_check_own_address_type_max_value_ucfg_weak>
1005967e:	a905      	add	r1, sp, #20
10059680:	79c9      	ldrb	r1, [r1, #7]
10059682:	4281      	cmp	r1, r0
10059684:	d817      	bhi.n	100596b6 <hci_le_set_advertising_parameters+0xba>
10059686:	a805      	add	r0, sp, #20
10059688:	7940      	ldrb	r0, [r0, #5]
1005968a:	0740      	lsls	r0, r0, #29
1005968c:	9802      	ldr	r0, [sp, #8]
1005968e:	d013      	beq.n	100596b8 <hci_le_set_advertising_parameters+0xbc>
10059690:	a805      	add	r0, sp, #20
10059692:	f005 fde1 	bl	1005f258 <LL_LE_Set_Advertising_Parameters>
10059696:	e00f      	b.n	100596b8 <hci_le_set_advertising_parameters+0xbc>
10059698:	a805      	add	r0, sp, #20
1005969a:	8800      	ldrh	r0, [r0, #0]
1005969c:	2820      	cmp	r0, #32
1005969e:	d30a      	bcc.n	100596b6 <hci_le_set_advertising_parameters+0xba>
100596a0:	03a1      	lsls	r1, r4, #14
100596a2:	4288      	cmp	r0, r1
100596a4:	d807      	bhi.n	100596b6 <hci_le_set_advertising_parameters+0xba>
100596a6:	aa05      	add	r2, sp, #20
100596a8:	8852      	ldrh	r2, [r2, #2]
100596aa:	2a20      	cmp	r2, #32
100596ac:	d303      	bcc.n	100596b6 <hci_le_set_advertising_parameters+0xba>
100596ae:	428a      	cmp	r2, r1
100596b0:	d801      	bhi.n	100596b6 <hci_le_set_advertising_parameters+0xba>
100596b2:	4290      	cmp	r0, r2
100596b4:	d9e1      	bls.n	1005967a <hci_le_set_advertising_parameters+0x7e>
100596b6:	9802      	ldr	r0, [sp, #8]
100596b8:	b009      	add	sp, #36	@ 0x24
100596ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

100596bc <hci_le_set_advertising_enable>:
100596bc:	b510      	push	{r4, lr}
100596be:	4604      	mov	r4, r0
100596c0:	2002      	movs	r0, #2
100596c2:	2101      	movs	r1, #1
100596c4:	f000 f87e 	bl	100597c4 <hci_get_set_legacy_ext_flag>
100596c8:	2800      	cmp	r0, #0
100596ca:	d000      	beq.n	100596ce <hci_le_set_advertising_enable+0x12>
100596cc:	bd10      	pop	{r4, pc}
100596ce:	2c01      	cmp	r4, #1
100596d0:	d803      	bhi.n	100596da <hci_le_set_advertising_enable+0x1e>
100596d2:	4620      	mov	r0, r4
100596d4:	f005 fe44 	bl	1005f360 <LL_LE_Set_Advertise_Enable>
100596d8:	bd10      	pop	{r4, pc}
100596da:	2012      	movs	r0, #18
100596dc:	bd10      	pop	{r4, pc}

100596de <chc_csr_ucfg_weak>:
100596de:	2000      	movs	r0, #0
100596e0:	4770      	bx	lr
	...

100596e4 <HCI_Init>:
100596e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100596e6:	4917      	ldr	r1, [pc, #92]	@ (10059744 <__arm_cp.0_0>)
100596e8:	6808      	ldr	r0, [r1, #0]
100596ea:	460d      	mov	r5, r1
100596ec:	2124      	movs	r1, #36	@ 0x24
100596ee:	2400      	movs	r4, #0
100596f0:	5444      	strb	r4, [r0, r1]
100596f2:	3025      	adds	r0, #37	@ 0x25
100596f4:	2211      	movs	r2, #17
100596f6:	4f14      	ldr	r7, [pc, #80]	@ (10059748 <__arm_cp.0_1>)
100596f8:	4621      	mov	r1, r4
100596fa:	47b8      	blx	r7
100596fc:	6828      	ldr	r0, [r5, #0]
100596fe:	3036      	adds	r0, #54	@ 0x36
10059700:	26ff      	movs	r6, #255	@ 0xff
10059702:	2205      	movs	r2, #5
10059704:	4631      	mov	r1, r6
10059706:	47b8      	blx	r7
10059708:	6829      	ldr	r1, [r5, #0]
1005970a:	203b      	movs	r0, #59	@ 0x3b
1005970c:	231f      	movs	r3, #31
1005970e:	540b      	strb	r3, [r1, r0]
10059710:	2201      	movs	r2, #1
10059712:	0355      	lsls	r5, r2, #13
10059714:	4608      	mov	r0, r1
10059716:	303b      	adds	r0, #59	@ 0x3b
10059718:	5285      	strh	r5, [r0, r2]
1005971a:	72c3      	strb	r3, [r0, #11]
1005971c:	3147      	adds	r1, #71	@ 0x47
1005971e:	2207      	movs	r2, #7
10059720:	4608      	mov	r0, r1
10059722:	4621      	mov	r1, r4
10059724:	47b8      	blx	r7
10059726:	4d07      	ldr	r5, [pc, #28]	@ (10059744 <__arm_cp.0_0>)
10059728:	6828      	ldr	r0, [r5, #0]
1005972a:	304e      	adds	r0, #78	@ 0x4e
1005972c:	2208      	movs	r2, #8
1005972e:	4631      	mov	r1, r6
10059730:	47b8      	blx	r7
10059732:	4806      	ldr	r0, [pc, #24]	@ (1005974c <__arm_cp.0_2>)
10059734:	6800      	ldr	r0, [r0, #0]
10059736:	2135      	movs	r1, #53	@ 0x35
10059738:	5444      	strb	r4, [r0, r1]
1005973a:	6828      	ldr	r0, [r5, #0]
1005973c:	4904      	ldr	r1, [pc, #16]	@ (10059750 <__arm_cp.0_3>)
1005973e:	6201      	str	r1, [r0, #32]
10059740:	65c4      	str	r4, [r0, #92]	@ 0x5c
10059742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10059744 <__arm_cp.0_0>:
10059744:	20002468 	.word	0x20002468

10059748 <__arm_cp.0_1>:
10059748:	10052a69 	.word	0x10052a69

1005974c <__arm_cp.0_2>:
1005974c:	20002414 	.word	0x20002414

10059750 <__arm_cp.0_3>:
10059750:	fffffdbe 	.word	0xfffffdbe

10059754 <Controller_Process_Q>:
10059754:	b570      	push	{r4, r5, r6, lr}
10059756:	2500      	movs	r5, #0
10059758:	4e07      	ldr	r6, [pc, #28]	@ (10059778 <__arm_cp.2_0>)
1005975a:	7af0      	ldrb	r0, [r6, #11]
1005975c:	4285      	cmp	r5, r0
1005975e:	d20a      	bcs.n	10059776 <Controller_Process_Q+0x22>
10059760:	b2ec      	uxtb	r4, r5
10059762:	4620      	mov	r0, r4
10059764:	f002 fcc6 	bl	1005c0f4 <LL_cpe_engine>
10059768:	2800      	cmp	r0, #0
1005976a:	d002      	beq.n	10059772 <Controller_Process_Q+0x1e>
1005976c:	4620      	mov	r0, r4
1005976e:	f002 fcc1 	bl	1005c0f4 <LL_cpe_engine>
10059772:	1c6d      	adds	r5, r5, #1
10059774:	e7f1      	b.n	1005975a <Controller_Process_Q+0x6>
10059776:	bd70      	pop	{r4, r5, r6, pc}

10059778 <__arm_cp.2_0>:
10059778:	2000247c 	.word	0x2000247c

1005977c <hci_le_set_random_address>:
1005977c:	b580      	push	{r7, lr}
1005977e:	f005 ffff 	bl	1005f780 <LL_Set_Advertising_Set_Random_Address>
10059782:	bd80      	pop	{r7, pc}

10059784 <hci_set_event_mask>:
10059784:	b510      	push	{r4, lr}
10059786:	2136      	movs	r1, #54	@ 0x36
10059788:	4a05      	ldr	r2, [pc, #20]	@ (100597a0 <__arm_cp.14_0>)
1005978a:	293e      	cmp	r1, #62	@ 0x3e
1005978c:	d006      	beq.n	1005979c <hci_set_event_mask+0x18>
1005978e:	1843      	adds	r3, r0, r1
10059790:	3b36      	subs	r3, #54	@ 0x36
10059792:	781b      	ldrb	r3, [r3, #0]
10059794:	6814      	ldr	r4, [r2, #0]
10059796:	5463      	strb	r3, [r4, r1]
10059798:	1c49      	adds	r1, r1, #1
1005979a:	e7f6      	b.n	1005978a <hci_set_event_mask+0x6>
1005979c:	2000      	movs	r0, #0
1005979e:	bd10      	pop	{r4, pc}

100597a0 <__arm_cp.14_0>:
100597a0:	20002468 	.word	0x20002468

100597a4 <hci_le_set_event_mask>:
100597a4:	b510      	push	{r4, lr}
100597a6:	2146      	movs	r1, #70	@ 0x46
100597a8:	4a05      	ldr	r2, [pc, #20]	@ (100597c0 <__arm_cp.16_0>)
100597aa:	294e      	cmp	r1, #78	@ 0x4e
100597ac:	d006      	beq.n	100597bc <hci_le_set_event_mask+0x18>
100597ae:	1843      	adds	r3, r0, r1
100597b0:	3b46      	subs	r3, #70	@ 0x46
100597b2:	781b      	ldrb	r3, [r3, #0]
100597b4:	6814      	ldr	r4, [r2, #0]
100597b6:	5463      	strb	r3, [r4, r1]
100597b8:	1c49      	adds	r1, r1, #1
100597ba:	e7f6      	b.n	100597aa <hci_le_set_event_mask+0x6>
100597bc:	2000      	movs	r0, #0
100597be:	bd10      	pop	{r4, pc}

100597c0 <__arm_cp.16_0>:
100597c0:	20002468 	.word	0x20002468

100597c4 <hci_get_set_legacy_ext_flag>:
100597c4:	4a05      	ldr	r2, [pc, #20]	@ (100597dc <__arm_cp.18_0>)
100597c6:	6812      	ldr	r2, [r2, #0]
100597c8:	2335      	movs	r3, #53	@ 0x35
100597ca:	5cd3      	ldrb	r3, [r2, r3]
100597cc:	4203      	tst	r3, r0
100597ce:	d001      	beq.n	100597d4 <hci_get_set_legacy_ext_flag+0x10>
100597d0:	200c      	movs	r0, #12
100597d2:	4770      	bx	lr
100597d4:	3235      	adds	r2, #53	@ 0x35
100597d6:	7011      	strb	r1, [r2, #0]
100597d8:	2000      	movs	r0, #0
100597da:	4770      	bx	lr

100597dc <__arm_cp.18_0>:
100597dc:	20002414 	.word	0x20002414

100597e0 <hci_check_legacy_ext_flag>:
100597e0:	4903      	ldr	r1, [pc, #12]	@ (100597f0 <__arm_cp.25_0>)
100597e2:	6809      	ldr	r1, [r1, #0]
100597e4:	2235      	movs	r2, #53	@ 0x35
100597e6:	5c89      	ldrb	r1, [r1, r2]
100597e8:	4008      	ands	r0, r1
100597ea:	1e41      	subs	r1, r0, #1
100597ec:	4188      	sbcs	r0, r1
100597ee:	4770      	bx	lr

100597f0 <__arm_cp.25_0>:
100597f0:	20002414 	.word	0x20002414

100597f4 <LLC_offline_control_procedures_processing>:
100597f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100597f6:	2400      	movs	r4, #0
100597f8:	4620      	mov	r0, r4
100597fa:	f000 fd97 	bl	1005a32c <llc_conn_get_cntxt_per_p>
100597fe:	4605      	mov	r5, r0
10059800:	2201      	movs	r2, #1
10059802:	4b30      	ldr	r3, [pc, #192]	@ (100598c4 <__arm_cp.27_0>)
10059804:	4627      	mov	r7, r4
10059806:	9200      	str	r2, [sp, #0]
10059808:	6818      	ldr	r0, [r3, #0]
1005980a:	2134      	movs	r1, #52	@ 0x34
1005980c:	5c40      	ldrb	r0, [r0, r1]
1005980e:	4284      	cmp	r4, r0
10059810:	d250      	bcs.n	100598b4 <LLC_offline_control_procedures_processing+0xc0>
10059812:	202c      	movs	r0, #44	@ 0x2c
10059814:	5c28      	ldrb	r0, [r5, r0]
10059816:	21fe      	movs	r1, #254	@ 0xfe
10059818:	4001      	ands	r1, r0
1005981a:	2902      	cmp	r1, #2
1005981c:	d13e      	bne.n	1005989c <LLC_offline_control_procedures_processing+0xa8>
1005981e:	208c      	movs	r0, #140	@ 0x8c
10059820:	582e      	ldr	r6, [r5, r0]
10059822:	07f0      	lsls	r0, r6, #31
10059824:	d00d      	beq.n	10059842 <LLC_offline_control_procedures_processing+0x4e>
10059826:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
10059828:	2000      	movs	r0, #0
1005982a:	f004 fb93 	bl	1005df54 <LL_Read_Remote_Used_Features>
1005982e:	283a      	cmp	r0, #58	@ 0x3a
10059830:	9a00      	ldr	r2, [sp, #0]
10059832:	4610      	mov	r0, r2
10059834:	d030      	beq.n	10059898 <LLC_offline_control_procedures_processing+0xa4>
10059836:	4628      	mov	r0, r5
10059838:	308c      	adds	r0, #140	@ 0x8c
1005983a:	6801      	ldr	r1, [r0, #0]
1005983c:	2201      	movs	r2, #1
1005983e:	4391      	bics	r1, r2
10059840:	6001      	str	r1, [r0, #0]
10059842:	4628      	mov	r0, r5
10059844:	f002 fb7e 	bl	1005bf44 <llc_subrate_offline_processing_ucfg_weak>
10059848:	2800      	cmp	r0, #0
1005984a:	9a00      	ldr	r2, [sp, #0]
1005984c:	4610      	mov	r0, r2
1005984e:	d123      	bne.n	10059898 <LLC_offline_control_procedures_processing+0xa4>
10059850:	4628      	mov	r0, r5
10059852:	4631      	mov	r1, r6
10059854:	f006 fd04 	bl	10060260 <Data_Len_Update_Offline_Processing_ucfg_weak>
10059858:	9a00      	ldr	r2, [sp, #0]
1005985a:	2800      	cmp	r0, #0
1005985c:	4610      	mov	r0, r2
1005985e:	d11b      	bne.n	10059898 <LLC_offline_control_procedures_processing+0xa4>
10059860:	b2e6      	uxtb	r6, r4
10059862:	4630      	mov	r0, r6
10059864:	f003 fc0e 	bl	1005d084 <LLC_channel_map_update_offline_processing_ucfg_weak>
10059868:	9a00      	ldr	r2, [sp, #0]
1005986a:	2800      	cmp	r0, #0
1005986c:	4610      	mov	r0, r2
1005986e:	d113      	bne.n	10059898 <LLC_offline_control_procedures_processing+0xa4>
10059870:	4630      	mov	r0, r6
10059872:	f003 fc0b 	bl	1005d08c <LLC_chc_reporting_offline_processing_ucfg_weak>
10059876:	9a00      	ldr	r2, [sp, #0]
10059878:	2800      	cmp	r0, #0
1005987a:	4610      	mov	r0, r2
1005987c:	d10c      	bne.n	10059898 <LLC_offline_control_procedures_processing+0xa4>
1005987e:	4628      	mov	r0, r5
10059880:	f003 fe45 	bl	1005d50e <LLC_cte_request_procedure_ucfg_weak>
10059884:	9a00      	ldr	r2, [sp, #0]
10059886:	2800      	cmp	r0, #0
10059888:	4610      	mov	r0, r2
1005988a:	d105      	bne.n	10059898 <LLC_offline_control_procedures_processing+0xa4>
1005988c:	4630      	mov	r0, r6
1005988e:	f004 fd68 	bl	1005e362 <LLC_pcl_offline_processing_ucfg_weak>
10059892:	9a00      	ldr	r2, [sp, #0]
10059894:	1e41      	subs	r1, r0, #1
10059896:	4188      	sbcs	r0, r1
10059898:	4b0a      	ldr	r3, [pc, #40]	@ (100598c4 <__arm_cp.27_0>)
1005989a:	e000      	b.n	1005989e <LLC_offline_control_procedures_processing+0xaa>
1005989c:	2000      	movs	r0, #0
1005989e:	1e41      	subs	r1, r0, #1
100598a0:	4188      	sbcs	r0, r1
100598a2:	0639      	lsls	r1, r7, #24
100598a4:	4617      	mov	r7, r2
100598a6:	d100      	bne.n	100598aa <LLC_offline_control_procedures_processing+0xb6>
100598a8:	4607      	mov	r7, r0
100598aa:	204d      	movs	r0, #77	@ 0x4d
100598ac:	0080      	lsls	r0, r0, #2
100598ae:	182d      	adds	r5, r5, r0
100598b0:	1c64      	adds	r4, r4, #1
100598b2:	e7a9      	b.n	10059808 <LLC_offline_control_procedures_processing+0x14>
100598b4:	0638      	lsls	r0, r7, #24
100598b6:	d003      	beq.n	100598c0 <LLC_offline_control_procedures_processing+0xcc>
100598b8:	2011      	movs	r0, #17
100598ba:	2101      	movs	r1, #1
100598bc:	f009 f96c 	bl	10062b98 <tsk_wait_resource_idx>
100598c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100598c2:	46c0      	nop			@ (mov r8, r8)

100598c4 <__arm_cp.27_0>:
100598c4:	20002414 	.word	0x20002414

100598c8 <cte_csr_ucfg_weak>:
100598c8:	2000      	movs	r0, #0
100598ca:	4770      	bx	lr

100598cc <hci_le_encrypt>:
100598cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100598ce:	b08f      	sub	sp, #60	@ 0x3c
100598d0:	9202      	str	r2, [sp, #8]
100598d2:	4607      	mov	r7, r0
100598d4:	a807      	add	r0, sp, #28
100598d6:	9001      	str	r0, [sp, #4]
100598d8:	2510      	movs	r5, #16
100598da:	4e0c      	ldr	r6, [pc, #48]	@ (1005990c <__arm_cp.0_0>)
100598dc:	462a      	mov	r2, r5
100598de:	47b0      	blx	r6
100598e0:	ac0b      	add	r4, sp, #44	@ 0x2c
100598e2:	4620      	mov	r0, r4
100598e4:	4639      	mov	r1, r7
100598e6:	462a      	mov	r2, r5
100598e8:	47b0      	blx	r6
100598ea:	af03      	add	r7, sp, #12
100598ec:	2600      	movs	r6, #0
100598ee:	9801      	ldr	r0, [sp, #4]
100598f0:	4621      	mov	r1, r4
100598f2:	463a      	mov	r2, r7
100598f4:	4633      	mov	r3, r6
100598f6:	f009 fc53 	bl	100631a0 <BLEPLAT_aes128_encrypt>
100598fa:	9802      	ldr	r0, [sp, #8]
100598fc:	4639      	mov	r1, r7
100598fe:	462a      	mov	r2, r5
10059900:	4b02      	ldr	r3, [pc, #8]	@ (1005990c <__arm_cp.0_0>)
10059902:	4798      	blx	r3
10059904:	4630      	mov	r0, r6
10059906:	b00f      	add	sp, #60	@ 0x3c
10059908:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005990a:	46c0      	nop			@ (mov r8, r8)

1005990c <__arm_cp.0_0>:
1005990c:	10052a49 	.word	0x10052a49

10059910 <hci_le_long_term_key_request_reply_api>:
10059910:	b5b0      	push	{r4, r5, r7, lr}
10059912:	460c      	mov	r4, r1
10059914:	4605      	mov	r5, r0
10059916:	f000 ff83 	bl	1005a820 <llc_conn_get_conn_idx>
1005991a:	28ff      	cmp	r0, #255	@ 0xff
1005991c:	d005      	beq.n	1005992a <hci_le_long_term_key_request_reply_api+0x1a>
1005991e:	2000      	movs	r0, #0
10059920:	4629      	mov	r1, r5
10059922:	4622      	mov	r2, r4
10059924:	f004 f9c3 	bl	1005dcae <LL_Get_LTK>
10059928:	bdb0      	pop	{r4, r5, r7, pc}
1005992a:	2002      	movs	r0, #2
1005992c:	bdb0      	pop	{r4, r5, r7, pc}

1005992e <hci_le_long_term_key_request_negative_reply_api>:
1005992e:	b510      	push	{r4, lr}
10059930:	4604      	mov	r4, r0
10059932:	f000 ff75 	bl	1005a820 <llc_conn_get_conn_idx>
10059936:	28ff      	cmp	r0, #255	@ 0xff
10059938:	d005      	beq.n	10059946 <hci_le_long_term_key_request_negative_reply_api+0x18>
1005993a:	2081      	movs	r0, #129	@ 0x81
1005993c:	2200      	movs	r2, #0
1005993e:	4621      	mov	r1, r4
10059940:	f004 f9b5 	bl	1005dcae <LL_Get_LTK>
10059944:	bd10      	pop	{r4, pc}
10059946:	2002      	movs	r0, #2
10059948:	bd10      	pop	{r4, pc}

1005994a <hci_le_check_own_address_type_max_value_ucfg_weak>:
1005994a:	2001      	movs	r0, #1
1005994c:	4770      	bx	lr

1005994e <hci_le_clear_filter_accept_list>:
1005994e:	b580      	push	{r7, lr}
10059950:	f002 fa02 	bl	1005bd58 <llc_wl_clear_filter_accept_list>
10059954:	bd80      	pop	{r7, pc}

10059956 <hci_le_add_device_to_filter_accept_list>:
10059956:	b5e0      	push	{r5, r6, r7, lr}
10059958:	2802      	cmp	r0, #2
1005995a:	d301      	bcc.n	10059960 <hci_le_add_device_to_filter_accept_list+0xa>
1005995c:	28ff      	cmp	r0, #255	@ 0xff
1005995e:	d10d      	bne.n	1005997c <hci_le_add_device_to_filter_accept_list+0x26>
10059960:	2200      	movs	r2, #0
10059962:	9200      	str	r2, [sp, #0]
10059964:	466b      	mov	r3, sp
10059966:	7018      	strb	r0, [r3, #0]
10059968:	9201      	str	r2, [sp, #4]
1005996a:	1c58      	adds	r0, r3, #1
1005996c:	2206      	movs	r2, #6
1005996e:	f7f9 f86b 	bl	10052a48 <BLEPLAT_MemCpy>
10059972:	9901      	ldr	r1, [sp, #4]
10059974:	9800      	ldr	r0, [sp, #0]
10059976:	f002 fa09 	bl	1005bd8c <llc_wl_add_device_to_filter_accept_list>
1005997a:	bd8c      	pop	{r2, r3, r7, pc}
1005997c:	2012      	movs	r0, #18
1005997e:	bd8c      	pop	{r2, r3, r7, pc}

10059980 <data_length_extension_csr_ucfg_weak>:
10059980:	2000      	movs	r0, #0
10059982:	4770      	bx	lr

10059984 <pcl_csr_ucfg_weak>:
10059984:	2000      	movs	r0, #0
10059986:	4770      	bx	lr

10059988 <phy_upd_csr>:
10059988:	2001      	movs	r0, #1
1005998a:	4770      	bx	lr

1005998c <scan_csr_ucfg_weak>:
1005998c:	2000      	movs	r0, #0
1005998e:	4770      	bx	lr

10059990 <conn_supp_csr>:
10059990:	2001      	movs	r0, #1
10059992:	4770      	bx	lr

10059994 <subrate_csr_ucfg_weak>:
10059994:	2000      	movs	r0, #0
10059996:	4770      	bx	lr

10059998 <L2C_build_connect_update_request>:
10059998:	b5f0      	push	{r4, r5, r6, r7, lr}
1005999a:	b087      	sub	sp, #28
1005999c:	8901      	ldrh	r1, [r0, #8]
1005999e:	9104      	str	r1, [sp, #16]
100599a0:	88c1      	ldrh	r1, [r0, #6]
100599a2:	9105      	str	r1, [sp, #20]
100599a4:	8884      	ldrh	r4, [r0, #4]
100599a6:	8846      	ldrh	r6, [r0, #2]
100599a8:	8807      	ldrh	r7, [r0, #0]
100599aa:	2000      	movs	r0, #0
100599ac:	9006      	str	r0, [sp, #24]
100599ae:	a906      	add	r1, sp, #24
100599b0:	4638      	mov	r0, r7
100599b2:	f000 f89f 	bl	10059af4 <l2c_get_check_link_status_on_request_sending>
100599b6:	4605      	mov	r5, r0
100599b8:	2800      	cmp	r0, #0
100599ba:	d15a      	bne.n	10059a72 <L2C_build_connect_update_request+0xda>
100599bc:	9603      	str	r6, [sp, #12]
100599be:	9402      	str	r4, [sp, #8]
100599c0:	9806      	ldr	r0, [sp, #24]
100599c2:	7880      	ldrb	r0, [r0, #2]
100599c4:	07c0      	lsls	r0, r0, #31
100599c6:	d151      	bne.n	10059a6c <L2C_build_connect_update_request+0xd4>
100599c8:	2400      	movs	r4, #0
100599ca:	2210      	movs	r2, #16
100599cc:	4620      	mov	r0, r4
100599ce:	4639      	mov	r1, r7
100599d0:	f7fb fbb0 	bl	10055134 <ACL_pkt_get>
100599d4:	2800      	cmp	r0, #0
100599d6:	d04b      	beq.n	10059a70 <L2C_build_connect_update_request+0xd8>
100599d8:	4607      	mov	r7, r0
100599da:	482a      	ldr	r0, [pc, #168]	@ (10059a84 <__arm_cp.0_0>)
100599dc:	9a03      	ldr	r2, [sp, #12]
100599de:	1f91      	subs	r1, r2, #6
100599e0:	b289      	uxth	r1, r1
100599e2:	2512      	movs	r5, #18
100599e4:	4281      	cmp	r1, r0
100599e6:	d23d      	bcs.n	10059a64 <L2C_build_connect_update_request+0xcc>
100599e8:	9e02      	ldr	r6, [sp, #8]
100599ea:	2e06      	cmp	r6, #6
100599ec:	d33a      	bcc.n	10059a64 <L2C_build_connect_update_request+0xcc>
100599ee:	1d80      	adds	r0, r0, #6
100599f0:	4286      	cmp	r6, r0
100599f2:	d237      	bcs.n	10059a64 <L2C_build_connect_update_request+0xcc>
100599f4:	42b2      	cmp	r2, r6
100599f6:	d835      	bhi.n	10059a64 <L2C_build_connect_update_request+0xcc>
100599f8:	9a05      	ldr	r2, [sp, #20]
100599fa:	0891      	lsrs	r1, r2, #2
100599fc:	297c      	cmp	r1, #124	@ 0x7c
100599fe:	d831      	bhi.n	10059a64 <L2C_build_connect_update_request+0xcc>
10059a00:	1c51      	adds	r1, r2, #1
10059a02:	4371      	muls	r1, r6
10059a04:	9b04      	ldr	r3, [sp, #16]
10059a06:	009a      	lsls	r2, r3, #2
10059a08:	4291      	cmp	r1, r2
10059a0a:	d82b      	bhi.n	10059a64 <L2C_build_connect_update_request+0xcc>
10059a0c:	2b0a      	cmp	r3, #10
10059a0e:	d329      	bcc.n	10059a64 <L2C_build_connect_update_request+0xcc>
10059a10:	4283      	cmp	r3, r0
10059a12:	d227      	bcs.n	10059a64 <L2C_build_connect_update_request+0xcc>
10059a14:	9401      	str	r4, [sp, #4]
10059a16:	6878      	ldr	r0, [r7, #4]
10059a18:	2112      	movs	r1, #18
10059a1a:	7201      	strb	r1, [r0, #8]
10059a1c:	6878      	ldr	r0, [r7, #4]
10059a1e:	9906      	ldr	r1, [sp, #24]
10059a20:	7909      	ldrb	r1, [r1, #4]
10059a22:	7241      	strb	r1, [r0, #9]
10059a24:	2106      	movs	r1, #6
10059a26:	2508      	movs	r5, #8
10059a28:	4c17      	ldr	r4, [pc, #92]	@ (10059a88 <__arm_cp.0_1>)
10059a2a:	4638      	mov	r0, r7
10059a2c:	462a      	mov	r2, r5
10059a2e:	47a0      	blx	r4
10059a30:	4638      	mov	r0, r7
10059a32:	4629      	mov	r1, r5
10059a34:	9a03      	ldr	r2, [sp, #12]
10059a36:	47a0      	blx	r4
10059a38:	210a      	movs	r1, #10
10059a3a:	4638      	mov	r0, r7
10059a3c:	4632      	mov	r2, r6
10059a3e:	4625      	mov	r5, r4
10059a40:	47a0      	blx	r4
10059a42:	240c      	movs	r4, #12
10059a44:	4638      	mov	r0, r7
10059a46:	4621      	mov	r1, r4
10059a48:	9a05      	ldr	r2, [sp, #20]
10059a4a:	47a8      	blx	r5
10059a4c:	210e      	movs	r1, #14
10059a4e:	4638      	mov	r0, r7
10059a50:	9a04      	ldr	r2, [sp, #16]
10059a52:	47a8      	blx	r5
10059a54:	807c      	strh	r4, [r7, #2]
10059a56:	2005      	movs	r0, #5
10059a58:	4639      	mov	r1, r7
10059a5a:	f000 f9cf 	bl	10059dfc <L2C_send_frame>
10059a5e:	2800      	cmp	r0, #0
10059a60:	d00a      	beq.n	10059a78 <L2C_build_connect_update_request+0xe0>
10059a62:	2581      	movs	r5, #129	@ 0x81
10059a64:	4638      	mov	r0, r7
10059a66:	f7fb fb87 	bl	10055178 <ACL_pkt_release>
10059a6a:	e002      	b.n	10059a72 <L2C_build_connect_update_request+0xda>
10059a6c:	250c      	movs	r5, #12
10059a6e:	e000      	b.n	10059a72 <L2C_build_connect_update_request+0xda>
10059a70:	2588      	movs	r5, #136	@ 0x88
10059a72:	4628      	mov	r0, r5
10059a74:	b007      	add	sp, #28
10059a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059a78:	9906      	ldr	r1, [sp, #24]
10059a7a:	2012      	movs	r0, #18
10059a7c:	f000 f84f 	bl	10059b1e <l2c_set_link_status_after_request_enqueued>
10059a80:	9d01      	ldr	r5, [sp, #4]
10059a82:	e7f6      	b.n	10059a72 <L2C_build_connect_update_request+0xda>

10059a84 <__arm_cp.0_0>:
10059a84:	00000c7b 	.word	0x00000c7b

10059a88 <__arm_cp.0_1>:
10059a88:	100551e3 	.word	0x100551e3

10059a8c <l2c_get_link_control_block_ref>:
10059a8c:	b570      	push	{r4, r5, r6, lr}
10059a8e:	490b      	ldr	r1, [pc, #44]	@ (10059abc <__arm_cp.0_0>)
10059a90:	7ac9      	ldrb	r1, [r1, #11]
10059a92:	2214      	movs	r2, #20
10059a94:	434a      	muls	r2, r1
10059a96:	3214      	adds	r2, #20
10059a98:	4909      	ldr	r1, [pc, #36]	@ (10059ac0 <__arm_cp.0_1>)
10059a9a:	680b      	ldr	r3, [r1, #0]
10059a9c:	2100      	movs	r1, #0
10059a9e:	460d      	mov	r5, r1
10059aa0:	460c      	mov	r4, r1
10059aa2:	3414      	adds	r4, #20
10059aa4:	42a2      	cmp	r2, r4
10059aa6:	d006      	beq.n	10059ab6 <l2c_get_link_control_block_ref+0x2a>
10059aa8:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
10059aaa:	5b75      	ldrh	r5, [r6, r5]
10059aac:	4285      	cmp	r5, r0
10059aae:	4625      	mov	r5, r4
10059ab0:	d1f7      	bne.n	10059aa2 <l2c_get_link_control_block_ref+0x16>
10059ab2:	1931      	adds	r1, r6, r4
10059ab4:	3914      	subs	r1, #20
10059ab6:	4608      	mov	r0, r1
10059ab8:	bd70      	pop	{r4, r5, r6, pc}
10059aba:	46c0      	nop			@ (mov r8, r8)

10059abc <__arm_cp.0_0>:
10059abc:	2000247c 	.word	0x2000247c

10059ac0 <__arm_cp.0_1>:
10059ac0:	20002460 	.word	0x20002460

10059ac4 <l2c_get_link_control_block_index>:
10059ac4:	b5b0      	push	{r4, r5, r7, lr}
10059ac6:	4909      	ldr	r1, [pc, #36]	@ (10059aec <__arm_cp.1_0>)
10059ac8:	7aca      	ldrb	r2, [r1, #11]
10059aca:	4909      	ldr	r1, [pc, #36]	@ (10059af0 <__arm_cp.1_1>)
10059acc:	680b      	ldr	r3, [r1, #0]
10059ace:	2400      	movs	r4, #0
10059ad0:	4621      	mov	r1, r4
10059ad2:	428a      	cmp	r2, r1
10059ad4:	d006      	beq.n	10059ae4 <l2c_get_link_control_block_index+0x20>
10059ad6:	6add      	ldr	r5, [r3, #44]	@ 0x2c
10059ad8:	5b2d      	ldrh	r5, [r5, r4]
10059ada:	4285      	cmp	r5, r0
10059adc:	d003      	beq.n	10059ae6 <l2c_get_link_control_block_index+0x22>
10059ade:	3414      	adds	r4, #20
10059ae0:	1c49      	adds	r1, r1, #1
10059ae2:	e7f6      	b.n	10059ad2 <l2c_get_link_control_block_index+0xe>
10059ae4:	4611      	mov	r1, r2
10059ae6:	b2c8      	uxtb	r0, r1
10059ae8:	bdb0      	pop	{r4, r5, r7, pc}
10059aea:	46c0      	nop			@ (mov r8, r8)

10059aec <__arm_cp.1_0>:
10059aec:	2000247c 	.word	0x2000247c

10059af0 <__arm_cp.1_1>:
10059af0:	20002460 	.word	0x20002460

10059af4 <l2c_get_check_link_status_on_request_sending>:
10059af4:	b5b0      	push	{r4, r5, r7, lr}
10059af6:	460c      	mov	r4, r1
10059af8:	4605      	mov	r5, r0
10059afa:	f7ff ffc7 	bl	10059a8c <l2c_get_link_control_block_ref>
10059afe:	4601      	mov	r1, r0
10059b00:	6020      	str	r0, [r4, #0]
10059b02:	2002      	movs	r0, #2
10059b04:	2d00      	cmp	r5, #0
10059b06:	d009      	beq.n	10059b1c <l2c_get_check_link_status_on_request_sending+0x28>
10059b08:	2900      	cmp	r1, #0
10059b0a:	d007      	beq.n	10059b1c <l2c_get_check_link_status_on_request_sending+0x28>
10059b0c:	7908      	ldrb	r0, [r1, #4]
10059b0e:	2800      	cmp	r0, #0
10059b10:	d003      	beq.n	10059b1a <l2c_get_check_link_status_on_request_sending+0x26>
10059b12:	7889      	ldrb	r1, [r1, #2]
10059b14:	2006      	movs	r0, #6
10059b16:	4008      	ands	r0, r1
10059b18:	d000      	beq.n	10059b1c <l2c_get_check_link_status_on_request_sending+0x28>
10059b1a:	200c      	movs	r0, #12
10059b1c:	bdb0      	pop	{r4, r5, r7, pc}

10059b1e <l2c_set_link_status_after_request_enqueued>:
10059b1e:	7188      	strb	r0, [r1, #6]
10059b20:	7908      	ldrb	r0, [r1, #4]
10059b22:	71c8      	strb	r0, [r1, #7]
10059b24:	7888      	ldrb	r0, [r1, #2]
10059b26:	2206      	movs	r2, #6
10059b28:	4302      	orrs	r2, r0
10059b2a:	708a      	strb	r2, [r1, #2]
10059b2c:	4770      	bx	lr

10059b2e <l2c_post_process_incoming_request_packet>:
10059b2e:	7190      	strb	r0, [r2, #6]
10059b30:	7151      	strb	r1, [r2, #5]
10059b32:	7890      	ldrb	r0, [r2, #2]
10059b34:	2104      	movs	r1, #4
10059b36:	4301      	orrs	r1, r0
10059b38:	7091      	strb	r1, [r2, #2]
10059b3a:	4770      	bx	lr

10059b3c <l2c_pre_process_incoming_response_packet>:
10059b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059b3e:	4604      	mov	r4, r0
10059b40:	2014      	movs	r0, #20
10059b42:	4360      	muls	r0, r4
10059b44:	4b14      	ldr	r3, [pc, #80]	@ (10059b98 <__arm_cp.7_0>)
10059b46:	681b      	ldr	r3, [r3, #0]
10059b48:	6add      	ldr	r5, [r3, #44]	@ 0x2c
10059b4a:	182d      	adds	r5, r5, r0
10059b4c:	78a8      	ldrb	r0, [r5, #2]
10059b4e:	0746      	lsls	r6, r0, #29
10059b50:	2081      	movs	r0, #129	@ 0x81
10059b52:	2e00      	cmp	r6, #0
10059b54:	d51f      	bpl.n	10059b96 <l2c_pre_process_incoming_response_packet+0x5a>
10059b56:	79ae      	ldrb	r6, [r5, #6]
10059b58:	1c76      	adds	r6, r6, #1
10059b5a:	428e      	cmp	r6, r1
10059b5c:	d001      	beq.n	10059b62 <l2c_pre_process_incoming_response_packet+0x26>
10059b5e:	2901      	cmp	r1, #1
10059b60:	d119      	bne.n	10059b96 <l2c_pre_process_incoming_response_packet+0x5a>
10059b62:	79e9      	ldrb	r1, [r5, #7]
10059b64:	4291      	cmp	r1, r2
10059b66:	d116      	bne.n	10059b96 <l2c_pre_process_incoming_response_packet+0x5a>
10059b68:	1cae      	adds	r6, r5, #2
10059b6a:	1daf      	adds	r7, r5, #6
10059b6c:	1de8      	adds	r0, r5, #7
10059b6e:	9000      	str	r0, [sp, #0]
10059b70:	4618      	mov	r0, r3
10059b72:	4621      	mov	r1, r4
10059b74:	f009 f871 	bl	10062c5a <CST_stop>
10059b78:	2000      	movs	r0, #0
10059b7a:	7038      	strb	r0, [r7, #0]
10059b7c:	9900      	ldr	r1, [sp, #0]
10059b7e:	7008      	strb	r0, [r1, #0]
10059b80:	7831      	ldrb	r1, [r6, #0]
10059b82:	22fb      	movs	r2, #251	@ 0xfb
10059b84:	400a      	ands	r2, r1
10059b86:	7032      	strb	r2, [r6, #0]
10059b88:	7929      	ldrb	r1, [r5, #4]
10059b8a:	1c4a      	adds	r2, r1, #1
10059b8c:	b2d1      	uxtb	r1, r2
10059b8e:	4291      	cmp	r1, r2
10059b90:	d000      	beq.n	10059b94 <l2c_pre_process_incoming_response_packet+0x58>
10059b92:	2101      	movs	r1, #1
10059b94:	7129      	strb	r1, [r5, #4]
10059b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10059b98 <__arm_cp.7_0>:
10059b98:	20002460 	.word	0x20002460

10059b9c <l2c_release_unexpected_acl_packet>:
10059b9c:	b580      	push	{r7, lr}
10059b9e:	4608      	mov	r0, r1
10059ba0:	f7fb faea 	bl	10055178 <ACL_pkt_release>
10059ba4:	bd80      	pop	{r7, pc}

10059ba6 <L2C_get_cid_from_basic_packet_header>:
10059ba6:	b580      	push	{r7, lr}
10059ba8:	2102      	movs	r1, #2
10059baa:	f7fb fb0a 	bl	100551c2 <ACL_pkt_read_16b>
10059bae:	bd80      	pop	{r7, pc}

10059bb0 <L2C_build_command_reject_pdu>:
10059bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
10059bb2:	b085      	sub	sp, #20
10059bb4:	461e      	mov	r6, r3
10059bb6:	9204      	str	r2, [sp, #16]
10059bb8:	460d      	mov	r5, r1
10059bba:	4607      	mov	r7, r0
10059bbc:	f7ff ff66 	bl	10059a8c <l2c_get_link_control_block_ref>
10059bc0:	2800      	cmp	r0, #0
10059bc2:	d00f      	beq.n	10059be4 <L2C_build_command_reject_pdu+0x34>
10059bc4:	4604      	mov	r4, r0
10059bc6:	9603      	str	r6, [sp, #12]
10059bc8:	7940      	ldrb	r0, [r0, #5]
10059bca:	2612      	movs	r6, #18
10059bcc:	42a8      	cmp	r0, r5
10059bce:	d10a      	bne.n	10059be6 <L2C_build_command_reject_pdu+0x36>
10059bd0:	9904      	ldr	r1, [sp, #16]
10059bd2:	2902      	cmp	r1, #2
10059bd4:	d807      	bhi.n	10059be6 <L2C_build_command_reject_pdu+0x36>
10059bd6:	78a0      	ldrb	r0, [r4, #2]
10059bd8:	0780      	lsls	r0, r0, #30
10059bda:	d407      	bmi.n	10059bec <L2C_build_command_reject_pdu+0x3c>
10059bdc:	2901      	cmp	r1, #1
10059bde:	d007      	beq.n	10059bf0 <L2C_build_command_reject_pdu+0x40>
10059be0:	2004      	movs	r0, #4
10059be2:	e006      	b.n	10059bf2 <L2C_build_command_reject_pdu+0x42>
10059be4:	2602      	movs	r6, #2
10059be6:	4630      	mov	r0, r6
10059be8:	b005      	add	sp, #20
10059bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059bec:	260c      	movs	r6, #12
10059bee:	e7fa      	b.n	10059be6 <L2C_build_command_reject_pdu+0x36>
10059bf0:	2002      	movs	r0, #2
10059bf2:	2900      	cmp	r1, #0
10059bf4:	d100      	bne.n	10059bf8 <L2C_build_command_reject_pdu+0x48>
10059bf6:	4608      	mov	r0, r1
10059bf8:	9002      	str	r0, [sp, #8]
10059bfa:	1d82      	adds	r2, r0, #6
10059bfc:	2600      	movs	r6, #0
10059bfe:	4630      	mov	r0, r6
10059c00:	4639      	mov	r1, r7
10059c02:	9201      	str	r2, [sp, #4]
10059c04:	f7fb fa96 	bl	10055134 <ACL_pkt_get>
10059c08:	2800      	cmp	r0, #0
10059c0a:	d027      	beq.n	10059c5c <L2C_build_command_reject_pdu+0xac>
10059c0c:	4607      	mov	r7, r0
10059c0e:	6840      	ldr	r0, [r0, #4]
10059c10:	2101      	movs	r1, #1
10059c12:	7201      	strb	r1, [r0, #8]
10059c14:	6878      	ldr	r0, [r7, #4]
10059c16:	7245      	strb	r5, [r0, #9]
10059c18:	9802      	ldr	r0, [sp, #8]
10059c1a:	1c80      	adds	r0, r0, #2
10059c1c:	b282      	uxth	r2, r0
10059c1e:	2106      	movs	r1, #6
10059c20:	4638      	mov	r0, r7
10059c22:	f7fb fade 	bl	100551e2 <ACL_pkt_write_16b>
10059c26:	2108      	movs	r1, #8
10059c28:	4638      	mov	r0, r7
10059c2a:	9d04      	ldr	r5, [sp, #16]
10059c2c:	462a      	mov	r2, r5
10059c2e:	f7fb fad8 	bl	100551e2 <ACL_pkt_write_16b>
10059c32:	2d00      	cmp	r5, #0
10059c34:	d005      	beq.n	10059c42 <L2C_build_command_reject_pdu+0x92>
10059c36:	210a      	movs	r1, #10
10059c38:	4638      	mov	r0, r7
10059c3a:	9a02      	ldr	r2, [sp, #8]
10059c3c:	9b03      	ldr	r3, [sp, #12]
10059c3e:	f7fb fad9 	bl	100551f4 <ACL_pkt_write>
10059c42:	9801      	ldr	r0, [sp, #4]
10059c44:	8078      	strh	r0, [r7, #2]
10059c46:	2005      	movs	r0, #5
10059c48:	4639      	mov	r1, r7
10059c4a:	f000 f8d7 	bl	10059dfc <L2C_send_frame>
10059c4e:	2800      	cmp	r0, #0
10059c50:	d006      	beq.n	10059c60 <L2C_build_command_reject_pdu+0xb0>
10059c52:	4638      	mov	r0, r7
10059c54:	f7fb fa90 	bl	10055178 <ACL_pkt_release>
10059c58:	2681      	movs	r6, #129	@ 0x81
10059c5a:	e7c4      	b.n	10059be6 <L2C_build_command_reject_pdu+0x36>
10059c5c:	2688      	movs	r6, #136	@ 0x88
10059c5e:	e7c2      	b.n	10059be6 <L2C_build_command_reject_pdu+0x36>
10059c60:	71a6      	strb	r6, [r4, #6]
10059c62:	78a0      	ldrb	r0, [r4, #2]
10059c64:	21fb      	movs	r1, #251	@ 0xfb
10059c66:	4001      	ands	r1, r0
10059c68:	70a1      	strb	r1, [r4, #2]
10059c6a:	e7bc      	b.n	10059be6 <L2C_build_command_reject_pdu+0x36>

10059c6c <l2c_cos_channel_descriptor_reset>:
10059c6c:	b570      	push	{r4, r5, r6, lr}
10059c6e:	4604      	mov	r4, r0
10059c70:	2022      	movs	r0, #34	@ 0x22
10059c72:	4910      	ldr	r1, [pc, #64]	@ (10059cb4 <__arm_cp.4_0>)
10059c74:	5c08      	ldrb	r0, [r1, r0]
10059c76:	42a0      	cmp	r0, r4
10059c78:	d91b      	bls.n	10059cb2 <l2c_cos_channel_descriptor_reset+0x46>
10059c7a:	4d0f      	ldr	r5, [pc, #60]	@ (10059cb8 <__arm_cp.4_1>)
10059c7c:	6829      	ldr	r1, [r5, #0]
10059c7e:	2030      	movs	r0, #48	@ 0x30
10059c80:	5c0a      	ldrb	r2, [r1, r0]
10059c82:	1c52      	adds	r2, r2, #1
10059c84:	540a      	strb	r2, [r1, r0]
10059c86:	2234      	movs	r2, #52	@ 0x34
10059c88:	4354      	muls	r4, r2
10059c8a:	3130      	adds	r1, #48	@ 0x30
10059c8c:	6848      	ldr	r0, [r1, #4]
10059c8e:	1900      	adds	r0, r0, r4
10059c90:	7883      	ldrb	r3, [r0, #2]
10059c92:	071b      	lsls	r3, r3, #28
10059c94:	d505      	bpl.n	10059ca2 <l2c_cos_channel_descriptor_reset+0x36>
10059c96:	78c3      	ldrb	r3, [r0, #3]
10059c98:	2b11      	cmp	r3, #17
10059c9a:	d302      	bcc.n	10059ca2 <l2c_cos_channel_descriptor_reset+0x36>
10059c9c:	784b      	ldrb	r3, [r1, #1]
10059c9e:	1e5b      	subs	r3, r3, #1
10059ca0:	704b      	strb	r3, [r1, #1]
10059ca2:	8946      	ldrh	r6, [r0, #10]
10059ca4:	2100      	movs	r1, #0
10059ca6:	f7f8 fedf 	bl	10052a68 <BLEPLAT_MemSet>
10059caa:	6828      	ldr	r0, [r5, #0]
10059cac:	6b40      	ldr	r0, [r0, #52]	@ 0x34
10059cae:	1900      	adds	r0, r0, r4
10059cb0:	8146      	strh	r6, [r0, #10]
10059cb2:	bd70      	pop	{r4, r5, r6, pc}

10059cb4 <__arm_cp.4_0>:
10059cb4:	2000247c 	.word	0x2000247c

10059cb8 <__arm_cp.4_1>:
10059cb8:	20002460 	.word	0x20002460

10059cbc <L2C_cos_channel_descriptors_reset_pending>:
10059cbc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10059cbe:	460c      	mov	r4, r1
10059cc0:	4605      	mov	r5, r0
10059cc2:	2022      	movs	r0, #34	@ 0x22
10059cc4:	4912      	ldr	r1, [pc, #72]	@ (10059d10 <__arm_cp.5_0>)
10059cc6:	9002      	str	r0, [sp, #8]
10059cc8:	5c08      	ldrb	r0, [r1, r0]
10059cca:	2700      	movs	r7, #0
10059ccc:	2603      	movs	r6, #3
10059cce:	4b11      	ldr	r3, [pc, #68]	@ (10059d14 <__arm_cp.5_1>)
10059cd0:	9501      	str	r5, [sp, #4]
10059cd2:	b2c1      	uxtb	r1, r0
10059cd4:	428f      	cmp	r7, r1
10059cd6:	d219      	bcs.n	10059d0c <L2C_cos_channel_descriptors_reset_pending+0x50>
10059cd8:	6819      	ldr	r1, [r3, #0]
10059cda:	6b49      	ldr	r1, [r1, #52]	@ 0x34
10059cdc:	198a      	adds	r2, r1, r6
10059cde:	1ed2      	subs	r2, r2, #3
10059ce0:	8812      	ldrh	r2, [r2, #0]
10059ce2:	42aa      	cmp	r2, r5
10059ce4:	d10f      	bne.n	10059d06 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10059ce6:	2cff      	cmp	r4, #255	@ 0xff
10059ce8:	d002      	beq.n	10059cf0 <L2C_cos_channel_descriptors_reset_pending+0x34>
10059cea:	5d89      	ldrb	r1, [r1, r6]
10059cec:	42a1      	cmp	r1, r4
10059cee:	d10a      	bne.n	10059d06 <L2C_cos_channel_descriptors_reset_pending+0x4a>
10059cf0:	b2f8      	uxtb	r0, r7
10059cf2:	4625      	mov	r5, r4
10059cf4:	461c      	mov	r4, r3
10059cf6:	f7ff ffb9 	bl	10059c6c <l2c_cos_channel_descriptor_reset>
10059cfa:	4623      	mov	r3, r4
10059cfc:	462c      	mov	r4, r5
10059cfe:	9d01      	ldr	r5, [sp, #4]
10059d00:	9802      	ldr	r0, [sp, #8]
10059d02:	4903      	ldr	r1, [pc, #12]	@ (10059d10 <__arm_cp.5_0>)
10059d04:	5c08      	ldrb	r0, [r1, r0]
10059d06:	3634      	adds	r6, #52	@ 0x34
10059d08:	1c7f      	adds	r7, r7, #1
10059d0a:	e7e2      	b.n	10059cd2 <L2C_cos_channel_descriptors_reset_pending+0x16>
10059d0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10059d0e:	46c0      	nop			@ (mov r8, r8)

10059d10 <__arm_cp.5_0>:
10059d10:	2000247c 	.word	0x2000247c

10059d14 <__arm_cp.5_1>:
10059d14:	20002460 	.word	0x20002460

10059d18 <l2c_cos_csr_ucfg_weak>:
10059d18:	2000      	movs	r0, #0
10059d1a:	4770      	bx	lr

10059d1c <L2C_cos_cfc_init_ucfg_weak>:
10059d1c:	2000      	movs	r0, #0
10059d1e:	4770      	bx	lr

10059d20 <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
10059d20:	4770      	bx	lr

10059d22 <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>:
10059d22:	4770      	bx	lr

10059d24 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>:
10059d24:	2000      	movs	r0, #0
10059d26:	4770      	bx	lr

10059d28 <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
10059d28:	4770      	bx	lr

10059d2a <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
10059d2a:	4770      	bx	lr

10059d2c <l2cap_timers_callback_wrapper>:
10059d2c:	b580      	push	{r7, lr}
10059d2e:	6940      	ldr	r0, [r0, #20]
10059d30:	4901      	ldr	r1, [pc, #4]	@ (10059d38 <__arm_cp.0_0>)
10059d32:	f009 f856 	bl	10062de2 <cst_sharedCallback>
10059d36:	bd80      	pop	{r7, pc}

10059d38 <__arm_cp.0_0>:
10059d38:	10059d3d 	.word	0x10059d3d

10059d3c <l2cap_timers_callback>:
10059d3c:	b580      	push	{r7, lr}
10059d3e:	4903      	ldr	r1, [pc, #12]	@ (10059d4c <__arm_cp.1_0>)
10059d40:	7ac9      	ldrb	r1, [r1, #11]
10059d42:	4281      	cmp	r1, r0
10059d44:	d301      	bcc.n	10059d4a <l2cap_timers_callback+0xe>
10059d46:	f000 fa77 	bl	1005a238 <L2C_timeout_handler_signalling>
10059d4a:	bd80      	pop	{r7, pc}

10059d4c <__arm_cp.1_0>:
10059d4c:	2000247c 	.word	0x2000247c

10059d50 <L2C_init>:
10059d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059d52:	4605      	mov	r5, r0
10059d54:	2001      	movs	r0, #1
10059d56:	2168      	movs	r1, #104	@ 0x68
10059d58:	f007 f936 	bl	10060fc8 <csmem_mem_0_assign>
10059d5c:	4f23      	ldr	r7, [pc, #140]	@ (10059dec <__arm_cp.3_0>)
10059d5e:	6038      	str	r0, [r7, #0]
10059d60:	4e23      	ldr	r6, [pc, #140]	@ (10059df0 <__arm_cp.3_1>)
10059d62:	7af0      	ldrb	r0, [r6, #11]
10059d64:	2414      	movs	r4, #20
10059d66:	4621      	mov	r1, r4
10059d68:	f007 f92e 	bl	10060fc8 <csmem_mem_0_assign>
10059d6c:	4601      	mov	r1, r0
10059d6e:	6838      	ldr	r0, [r7, #0]
10059d70:	62c1      	str	r1, [r0, #44]	@ 0x2c
10059d72:	2d01      	cmp	r5, #1
10059d74:	d110      	bne.n	10059d98 <L2C_init+0x48>
10059d76:	305c      	adds	r0, #92	@ 0x5c
10059d78:	f009 f8ee 	bl	10062f58 <ACL_list_init>
10059d7c:	2522      	movs	r5, #34	@ 0x22
10059d7e:	5d70      	ldrb	r0, [r6, r5]
10059d80:	2134      	movs	r1, #52	@ 0x34
10059d82:	f007 f921 	bl	10060fc8 <csmem_mem_0_assign>
10059d86:	6839      	ldr	r1, [r7, #0]
10059d88:	6348      	str	r0, [r1, #52]	@ 0x34
10059d8a:	5d70      	ldrb	r0, [r6, r5]
10059d8c:	0040      	lsls	r0, r0, #1
10059d8e:	2110      	movs	r1, #16
10059d90:	f007 f91a 	bl	10060fc8 <csmem_mem_0_assign>
10059d94:	6839      	ldr	r1, [r7, #0]
10059d96:	6488      	str	r0, [r1, #72]	@ 0x48
10059d98:	7af0      	ldrb	r0, [r6, #11]
10059d9a:	1c41      	adds	r1, r0, #1
10059d9c:	4d15      	ldr	r5, [pc, #84]	@ (10059df4 <__arm_cp.3_2>)
10059d9e:	2201      	movs	r2, #1
10059da0:	4628      	mov	r0, r5
10059da2:	f007 f8ff 	bl	10060fa4 <csmem_mem_assign>
10059da6:	6839      	ldr	r1, [r7, #0]
10059da8:	6208      	str	r0, [r1, #32]
10059daa:	7af1      	ldrb	r1, [r6, #11]
10059dac:	2202      	movs	r2, #2
10059dae:	4628      	mov	r0, r5
10059db0:	f007 f8f8 	bl	10060fa4 <csmem_mem_assign>
10059db4:	683d      	ldr	r5, [r7, #0]
10059db6:	6268      	str	r0, [r5, #36]	@ 0x24
10059db8:	7af1      	ldrb	r1, [r6, #11]
10059dba:	4a0f      	ldr	r2, [pc, #60]	@ (10059df8 <__arm_cp.3_3>)
10059dbc:	2307      	movs	r3, #7
10059dbe:	4628      	mov	r0, r5
10059dc0:	f008 ff36 	bl	10062c30 <CST_init>
10059dc4:	6838      	ldr	r0, [r7, #0]
10059dc6:	2117      	movs	r1, #23
10059dc8:	8501      	strh	r1, [r0, #40]	@ 0x28
10059dca:	8c31      	ldrh	r1, [r6, #32]
10059dcc:	2917      	cmp	r1, #23
10059dce:	d201      	bcs.n	10059dd4 <L2C_init+0x84>
10059dd0:	2086      	movs	r0, #134	@ 0x86
10059dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059dd4:	8541      	strh	r1, [r0, #42]	@ 0x2a
10059dd6:	7af1      	ldrb	r1, [r6, #11]
10059dd8:	434c      	muls	r4, r1
10059dda:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059ddc:	2100      	movs	r1, #0
10059dde:	4622      	mov	r2, r4
10059de0:	f7f8 fe42 	bl	10052a68 <BLEPLAT_MemSet>
10059de4:	f7ff ff9a 	bl	10059d1c <L2C_cos_cfc_init_ucfg_weak>
10059de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059dea:	46c0      	nop			@ (mov r8, r8)

10059dec <__arm_cp.3_0>:
10059dec:	20002460 	.word	0x20002460

10059df0 <__arm_cp.3_1>:
10059df0:	2000247c 	.word	0x2000247c

10059df4 <__arm_cp.3_2>:
10059df4:	20002478 	.word	0x20002478

10059df8 <__arm_cp.3_3>:
10059df8:	10059d2d 	.word	0x10059d2d

10059dfc <L2C_send_frame>:
10059dfc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10059dfe:	460c      	mov	r4, r1
10059e00:	1f01      	subs	r1, r0, #4
10059e02:	4606      	mov	r6, r0
10059e04:	2902      	cmp	r1, #2
10059e06:	d821      	bhi.n	10059e4c <L2C_send_frame+0x50>
10059e08:	8862      	ldrh	r2, [r4, #2]
10059e0a:	2500      	movs	r5, #0
10059e0c:	4620      	mov	r0, r4
10059e0e:	4629      	mov	r1, r5
10059e10:	f7fb f9e7 	bl	100551e2 <ACL_pkt_write_16b>
10059e14:	2702      	movs	r7, #2
10059e16:	4620      	mov	r0, r4
10059e18:	4639      	mov	r1, r7
10059e1a:	4632      	mov	r2, r6
10059e1c:	f7fb f9e1 	bl	100551e2 <ACL_pkt_write_16b>
10059e20:	8225      	strh	r5, [r4, #16]
10059e22:	81e5      	strh	r5, [r4, #14]
10059e24:	7325      	strb	r5, [r4, #12]
10059e26:	6860      	ldr	r0, [r4, #4]
10059e28:	6160      	str	r0, [r4, #20]
10059e2a:	61a0      	str	r0, [r4, #24]
10059e2c:	8860      	ldrh	r0, [r4, #2]
10059e2e:	1d00      	adds	r0, r0, #4
10059e30:	8060      	strh	r0, [r4, #2]
10059e32:	7a20      	ldrb	r0, [r4, #8]
10059e34:	4338      	orrs	r0, r7
10059e36:	7220      	strb	r0, [r4, #8]
10059e38:	4620      	mov	r0, r4
10059e3a:	f7fb f909 	bl	10055050 <Acl_Transmit_Data>
10059e3e:	2800      	cmp	r0, #0
10059e40:	d014      	beq.n	10059e6c <L2C_send_frame+0x70>
10059e42:	8860      	ldrh	r0, [r4, #2]
10059e44:	1f00      	subs	r0, r0, #4
10059e46:	8060      	strh	r0, [r4, #2]
10059e48:	2581      	movs	r5, #129	@ 0x81
10059e4a:	e00f      	b.n	10059e6c <L2C_send_frame+0x70>
10059e4c:	25a0      	movs	r5, #160	@ 0xa0
10059e4e:	283f      	cmp	r0, #63	@ 0x3f
10059e50:	d00c      	beq.n	10059e6c <L2C_send_frame+0x70>
10059e52:	3820      	subs	r0, #32
10059e54:	285f      	cmp	r0, #95	@ 0x5f
10059e56:	d809      	bhi.n	10059e6c <L2C_send_frame+0x70>
10059e58:	a801      	add	r0, sp, #4
10059e5a:	8086      	strh	r6, [r0, #4]
10059e5c:	2122      	movs	r1, #34	@ 0x22
10059e5e:	4a04      	ldr	r2, [pc, #16]	@ (10059e70 <__arm_cp.4_0>)
10059e60:	5c51      	ldrb	r1, [r2, r1]
10059e62:	7181      	strb	r1, [r0, #6]
10059e64:	9401      	str	r4, [sp, #4]
10059e66:	f7ff ff5d 	bl	10059d24 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>
10059e6a:	4605      	mov	r5, r0
10059e6c:	4628      	mov	r0, r5
10059e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10059e70 <__arm_cp.4_0>:
10059e70:	2000247c 	.word	0x2000247c

10059e74 <L2C_receive_data>:
10059e74:	b5f0      	push	{r4, r5, r6, r7, lr}
10059e76:	b0c3      	sub	sp, #268	@ 0x10c
10059e78:	4604      	mov	r4, r0
10059e7a:	8800      	ldrh	r0, [r0, #0]
10059e7c:	f7ff fe06 	bl	10059a8c <l2c_get_link_control_block_ref>
10059e80:	2800      	cmp	r0, #0
10059e82:	d07c      	beq.n	10059f7e <L2C_receive_data+0x10a>
10059e84:	4605      	mov	r5, r0
10059e86:	7a20      	ldrb	r0, [r4, #8]
10059e88:	2703      	movs	r7, #3
10059e8a:	4007      	ands	r7, r0
10059e8c:	6928      	ldr	r0, [r5, #16]
10059e8e:	462a      	mov	r2, r5
10059e90:	320c      	adds	r2, #12
10059e92:	2f02      	cmp	r7, #2
10059e94:	9203      	str	r2, [sp, #12]
10059e96:	d108      	bne.n	10059eaa <L2C_receive_data+0x36>
10059e98:	2800      	cmp	r0, #0
10059e9a:	d02f      	beq.n	10059efc <L2C_receive_data+0x88>
10059e9c:	8811      	ldrh	r1, [r2, #0]
10059e9e:	2684      	movs	r6, #132	@ 0x84
10059ea0:	2904      	cmp	r1, #4
10059ea2:	d354      	bcc.n	10059f4e <L2C_receive_data+0xda>
10059ea4:	2101      	movs	r1, #1
10059ea6:	9102      	str	r1, [sp, #8]
10059ea8:	e031      	b.n	10059f0e <L2C_receive_data+0x9a>
10059eaa:	2800      	cmp	r0, #0
10059eac:	d04a      	beq.n	10059f44 <L2C_receive_data+0xd0>
10059eae:	8866      	ldrh	r6, [r4, #2]
10059eb0:	2e00      	cmp	r6, #0
10059eb2:	d026      	beq.n	10059f02 <L2C_receive_data+0x8e>
10059eb4:	2100      	movs	r1, #0
10059eb6:	9101      	str	r1, [sp, #4]
10059eb8:	a804      	add	r0, sp, #16
10059eba:	9002      	str	r0, [sp, #8]
10059ebc:	4620      	mov	r0, r4
10059ebe:	4632      	mov	r2, r6
10059ec0:	9b02      	ldr	r3, [sp, #8]
10059ec2:	f7fb f975 	bl	100551b0 <ACL_pkt_read>
10059ec6:	6928      	ldr	r0, [r5, #16]
10059ec8:	6840      	ldr	r0, [r0, #4]
10059eca:	9000      	str	r0, [sp, #0]
10059ecc:	4620      	mov	r0, r4
10059ece:	f7fb f99a 	bl	10055206 <ACL_pkt_extract_pdu>
10059ed2:	4601      	mov	r1, r0
10059ed4:	9800      	ldr	r0, [sp, #0]
10059ed6:	f007 fa0a 	bl	100612ee <Mem_Buff_append>
10059eda:	89a9      	ldrh	r1, [r5, #12]
10059edc:	6928      	ldr	r0, [r5, #16]
10059ede:	4632      	mov	r2, r6
10059ee0:	9b02      	ldr	r3, [sp, #8]
10059ee2:	f7fb f987 	bl	100551f4 <ACL_pkt_write>
10059ee6:	89a8      	ldrh	r0, [r5, #12]
10059ee8:	1980      	adds	r0, r0, r6
10059eea:	81a8      	strh	r0, [r5, #12]
10059eec:	b281      	uxth	r1, r0
10059eee:	6928      	ldr	r0, [r5, #16]
10059ef0:	f7fb f94b 	bl	1005518a <ACL_pkt_resize>
10059ef4:	9a03      	ldr	r2, [sp, #12]
10059ef6:	9801      	ldr	r0, [sp, #4]
10059ef8:	8060      	strh	r0, [r4, #2]
10059efa:	e002      	b.n	10059f02 <L2C_receive_data+0x8e>
10059efc:	612c      	str	r4, [r5, #16]
10059efe:	8860      	ldrh	r0, [r4, #2]
10059f00:	81a8      	strh	r0, [r5, #12]
10059f02:	8810      	ldrh	r0, [r2, #0]
10059f04:	2804      	cmp	r0, #4
10059f06:	d31b      	bcc.n	10059f40 <L2C_receive_data+0xcc>
10059f08:	6928      	ldr	r0, [r5, #16]
10059f0a:	2600      	movs	r6, #0
10059f0c:	9602      	str	r6, [sp, #8]
10059f0e:	2100      	movs	r1, #0
10059f10:	9101      	str	r1, [sp, #4]
10059f12:	f7fb f956 	bl	100551c2 <ACL_pkt_read_16b>
10059f16:	1d00      	adds	r0, r0, #4
10059f18:	b281      	uxth	r1, r0
10059f1a:	89aa      	ldrh	r2, [r5, #12]
10059f1c:	428a      	cmp	r2, r1
10059f1e:	d816      	bhi.n	10059f4e <L2C_receive_data+0xda>
10059f20:	d112      	bne.n	10059f48 <L2C_receive_data+0xd4>
10059f22:	6929      	ldr	r1, [r5, #16]
10059f24:	8048      	strh	r0, [r1, #2]
10059f26:	2001      	movs	r0, #1
10059f28:	f000 f832 	bl	10059f90 <L2C_mux_acl_packet>
10059f2c:	2800      	cmp	r0, #0
10059f2e:	d02d      	beq.n	10059f8c <L2C_receive_data+0x118>
10059f30:	6928      	ldr	r0, [r5, #16]
10059f32:	2684      	movs	r6, #132	@ 0x84
10059f34:	42a0      	cmp	r0, r4
10059f36:	d126      	bne.n	10059f86 <L2C_receive_data+0x112>
10059f38:	9801      	ldr	r0, [sp, #4]
10059f3a:	81a8      	strh	r0, [r5, #12]
10059f3c:	6128      	str	r0, [r5, #16]
10059f3e:	e022      	b.n	10059f86 <L2C_receive_data+0x112>
10059f40:	2600      	movs	r6, #0
10059f42:	e018      	b.n	10059f76 <L2C_receive_data+0x102>
10059f44:	2600      	movs	r6, #0
10059f46:	e002      	b.n	10059f4e <L2C_receive_data+0xda>
10059f48:	9802      	ldr	r0, [sp, #8]
10059f4a:	2800      	cmp	r0, #0
10059f4c:	d013      	beq.n	10059f76 <L2C_receive_data+0x102>
10059f4e:	78a8      	ldrb	r0, [r5, #2]
10059f50:	2110      	movs	r1, #16
10059f52:	4301      	orrs	r1, r0
10059f54:	70a9      	strb	r1, [r5, #2]
10059f56:	2042      	movs	r0, #66	@ 0x42
10059f58:	2101      	movs	r1, #1
10059f5a:	2202      	movs	r2, #2
10059f5c:	462b      	mov	r3, r5
10059f5e:	f00a f9ff 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
10059f62:	6928      	ldr	r0, [r5, #16]
10059f64:	2800      	cmp	r0, #0
10059f66:	d006      	beq.n	10059f76 <L2C_receive_data+0x102>
10059f68:	f7fb f906 	bl	10055178 <ACL_pkt_release>
10059f6c:	2000      	movs	r0, #0
10059f6e:	6128      	str	r0, [r5, #16]
10059f70:	9903      	ldr	r1, [sp, #12]
10059f72:	2000      	movs	r0, #0
10059f74:	8008      	strh	r0, [r1, #0]
10059f76:	2e00      	cmp	r6, #0
10059f78:	d105      	bne.n	10059f86 <L2C_receive_data+0x112>
10059f7a:	2f01      	cmp	r7, #1
10059f7c:	d103      	bne.n	10059f86 <L2C_receive_data+0x112>
10059f7e:	4620      	mov	r0, r4
10059f80:	f7fb f8fa 	bl	10055178 <ACL_pkt_release>
10059f84:	2600      	movs	r6, #0
10059f86:	4630      	mov	r0, r6
10059f88:	b043      	add	sp, #268	@ 0x10c
10059f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059f8c:	9801      	ldr	r0, [sp, #4]
10059f8e:	e7ee      	b.n	10059f6e <L2C_receive_data+0xfa>

10059f90 <L2C_mux_acl_packet>:
10059f90:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10059f92:	460c      	mov	r4, r1
10059f94:	4605      	mov	r5, r0
10059f96:	8848      	ldrh	r0, [r1, #2]
10059f98:	1f00      	subs	r0, r0, #4
10059f9a:	8048      	strh	r0, [r1, #2]
10059f9c:	4608      	mov	r0, r1
10059f9e:	f7ff fe02 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10059fa2:	1f01      	subs	r1, r0, #4
10059fa4:	2902      	cmp	r1, #2
10059fa6:	d80c      	bhi.n	10059fc2 <L2C_mux_acl_packet+0x32>
10059fa8:	2806      	cmp	r0, #6
10059faa:	d01a      	beq.n	10059fe2 <L2C_mux_acl_packet+0x52>
10059fac:	2805      	cmp	r0, #5
10059fae:	d01d      	beq.n	10059fec <L2C_mux_acl_packet+0x5c>
10059fb0:	2804      	cmp	r0, #4
10059fb2:	d111      	bne.n	10059fd8 <L2C_mux_acl_packet+0x48>
10059fb4:	2004      	movs	r0, #4
10059fb6:	81a0      	strh	r0, [r4, #12]
10059fb8:	4628      	mov	r0, r5
10059fba:	4621      	mov	r1, r4
10059fbc:	f7fc ff2c 	bl	10056e18 <GAT_att_cmn_rcv>
10059fc0:	e018      	b.n	10059ff4 <L2C_mux_acl_packet+0x64>
10059fc2:	283f      	cmp	r0, #63	@ 0x3f
10059fc4:	d008      	beq.n	10059fd8 <L2C_mux_acl_packet+0x48>
10059fc6:	3820      	subs	r0, #32
10059fc8:	285f      	cmp	r0, #95	@ 0x5f
10059fca:	d805      	bhi.n	10059fd8 <L2C_mux_acl_packet+0x48>
10059fcc:	4668      	mov	r0, sp
10059fce:	7005      	strb	r5, [r0, #0]
10059fd0:	9401      	str	r4, [sp, #4]
10059fd2:	f00b fb8b 	bl	100656ec <l2c_cos_hndl_incoming_le_frame_ucfg_weak>
10059fd6:	e00d      	b.n	10059ff4 <L2C_mux_acl_packet+0x64>
10059fd8:	4628      	mov	r0, r5
10059fda:	4621      	mov	r1, r4
10059fdc:	f7ff fdde 	bl	10059b9c <l2c_release_unexpected_acl_packet>
10059fe0:	e00e      	b.n	1005a000 <L2C_mux_acl_packet+0x70>
10059fe2:	4628      	mov	r0, r5
10059fe4:	4621      	mov	r1, r4
10059fe6:	f008 fb8d 	bl	10062704 <smp_sap_l2c_acl_data_hndl>
10059fea:	e003      	b.n	10059ff4 <L2C_mux_acl_packet+0x64>
10059fec:	4628      	mov	r0, r5
10059fee:	4621      	mov	r1, r4
10059ff0:	f000 f808 	bl	1005a004 <L2C_acl_cframe_signaling_hndl>
10059ff4:	2800      	cmp	r0, #0
10059ff6:	d003      	beq.n	1005a000 <L2C_mux_acl_packet+0x70>
10059ff8:	8861      	ldrh	r1, [r4, #2]
10059ffa:	1d09      	adds	r1, r1, #4
10059ffc:	8061      	strh	r1, [r4, #2]
10059ffe:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005a000:	2000      	movs	r0, #0
1005a002:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005a004 <L2C_acl_cframe_signaling_hndl>:
1005a004:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a006:	b085      	sub	sp, #20
1005a008:	460c      	mov	r4, r1
1005a00a:	4606      	mov	r6, r0
1005a00c:	880f      	ldrh	r7, [r1, #0]
1005a00e:	4638      	mov	r0, r7
1005a010:	f7ff fd58 	bl	10059ac4 <l2c_get_link_control_block_index>
1005a014:	4605      	mov	r5, r0
1005a016:	4880      	ldr	r0, [pc, #512]	@ (1005a218 <__arm_cp.7_0>)
1005a018:	7ac1      	ldrb	r1, [r0, #11]
1005a01a:	428d      	cmp	r5, r1
1005a01c:	d206      	bcs.n	1005a02c <L2C_acl_cframe_signaling_hndl+0x28>
1005a01e:	2014      	movs	r0, #20
1005a020:	4368      	muls	r0, r5
1005a022:	4a7e      	ldr	r2, [pc, #504]	@ (1005a21c <__arm_cp.7_1>)
1005a024:	6812      	ldr	r2, [r2, #0]
1005a026:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
1005a028:	1810      	adds	r0, r2, r0
1005a02a:	9002      	str	r0, [sp, #8]
1005a02c:	6862      	ldr	r2, [r4, #4]
1005a02e:	7a10      	ldrb	r0, [r2, #8]
1005a030:	2300      	movs	r3, #0
1005a032:	2e01      	cmp	r6, #1
1005a034:	d01c      	beq.n	1005a070 <L2C_acl_cframe_signaling_hndl+0x6c>
1005a036:	2e00      	cmp	r6, #0
1005a038:	d13c      	bne.n	1005a0b4 <L2C_acl_cframe_signaling_hndl+0xb0>
1005a03a:	461e      	mov	r6, r3
1005a03c:	428d      	cmp	r5, r1
1005a03e:	d212      	bcs.n	1005a066 <L2C_acl_cframe_signaling_hndl+0x62>
1005a040:	2819      	cmp	r0, #25
1005a042:	d80b      	bhi.n	1005a05c <L2C_acl_cframe_signaling_hndl+0x58>
1005a044:	2101      	movs	r1, #1
1005a046:	4081      	lsls	r1, r0
1005a048:	4879      	ldr	r0, [pc, #484]	@ (1005a230 <__arm_cp.7_6>)
1005a04a:	4201      	tst	r1, r0
1005a04c:	d006      	beq.n	1005a05c <L2C_acl_cframe_signaling_hndl+0x58>
1005a04e:	4873      	ldr	r0, [pc, #460]	@ (1005a21c <__arm_cp.7_1>)
1005a050:	6800      	ldr	r0, [r0, #0]
1005a052:	2201      	movs	r2, #1
1005a054:	4b77      	ldr	r3, [pc, #476]	@ (1005a234 <__arm_cp.7_7>)
1005a056:	4629      	mov	r1, r5
1005a058:	f008 fe35 	bl	10062cc6 <CST_start>
1005a05c:	9a02      	ldr	r2, [sp, #8]
1005a05e:	7890      	ldrb	r0, [r2, #2]
1005a060:	21fd      	movs	r1, #253	@ 0xfd
1005a062:	4001      	ands	r1, r0
1005a064:	7091      	strb	r1, [r2, #2]
1005a066:	4620      	mov	r0, r4
1005a068:	f7fb f886 	bl	10055178 <ACL_pkt_release>
1005a06c:	4630      	mov	r0, r6
1005a06e:	e0d0      	b.n	1005a212 <L2C_acl_cframe_signaling_hndl+0x20e>
1005a070:	428d      	cmp	r5, r1
1005a072:	d300      	bcc.n	1005a076 <L2C_acl_cframe_signaling_hndl+0x72>
1005a074:	e0c8      	b.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a076:	7a56      	ldrb	r6, [r2, #9]
1005a078:	2813      	cmp	r0, #19
1005a07a:	d81d      	bhi.n	1005a0b8 <L2C_acl_cframe_signaling_hndl+0xb4>
1005a07c:	2101      	movs	r1, #1
1005a07e:	9100      	str	r1, [sp, #0]
1005a080:	4081      	lsls	r1, r0
1005a082:	4a67      	ldr	r2, [pc, #412]	@ (1005a220 <__arm_cp.7_2>)
1005a084:	4211      	tst	r1, r2
1005a086:	d017      	beq.n	1005a0b8 <L2C_acl_cframe_signaling_hndl+0xb4>
1005a088:	2801      	cmp	r0, #1
1005a08a:	d021      	beq.n	1005a0d0 <L2C_acl_cframe_signaling_hndl+0xcc>
1005a08c:	2114      	movs	r1, #20
1005a08e:	4a63      	ldr	r2, [pc, #396]	@ (1005a21c <__arm_cp.7_1>)
1005a090:	6812      	ldr	r2, [r2, #0]
1005a092:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
1005a094:	2813      	cmp	r0, #19
1005a096:	d03e      	beq.n	1005a116 <L2C_acl_cframe_signaling_hndl+0x112>
1005a098:	2812      	cmp	r0, #18
1005a09a:	d000      	beq.n	1005a09e <L2C_acl_cframe_signaling_hndl+0x9a>
1005a09c:	e0b4      	b.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a09e:	9301      	str	r3, [sp, #4]
1005a0a0:	4608      	mov	r0, r1
1005a0a2:	4368      	muls	r0, r5
1005a0a4:	1810      	adds	r0, r2, r0
1005a0a6:	7883      	ldrb	r3, [r0, #2]
1005a0a8:	07df      	lsls	r7, r3, #31
1005a0aa:	d166      	bne.n	1005a17a <L2C_acl_cframe_signaling_hndl+0x176>
1005a0ac:	7146      	strb	r6, [r0, #5]
1005a0ae:	8820      	ldrh	r0, [r4, #0]
1005a0b0:	2200      	movs	r2, #0
1005a0b2:	e09d      	b.n	1005a1f0 <L2C_acl_cframe_signaling_hndl+0x1ec>
1005a0b4:	4618      	mov	r0, r3
1005a0b6:	e0ac      	b.n	1005a212 <L2C_acl_cframe_signaling_hndl+0x20e>
1005a0b8:	9301      	str	r3, [sp, #4]
1005a0ba:	f00b fb15 	bl	100656e8 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>
1005a0be:	2800      	cmp	r0, #0
1005a0c0:	d100      	bne.n	1005a0c4 <L2C_acl_cframe_signaling_hndl+0xc0>
1005a0c2:	e091      	b.n	1005a1e8 <L2C_acl_cframe_signaling_hndl+0x1e4>
1005a0c4:	a803      	add	r0, sp, #12
1005a0c6:	7105      	strb	r5, [r0, #4]
1005a0c8:	9403      	str	r4, [sp, #12]
1005a0ca:	f00b fb0b 	bl	100656e4 <L2C_cos_process_cfc_mode_command_ucfg_weak>
1005a0ce:	e093      	b.n	1005a1f8 <L2C_acl_cframe_signaling_hndl+0x1f4>
1005a0d0:	2701      	movs	r7, #1
1005a0d2:	4628      	mov	r0, r5
1005a0d4:	4639      	mov	r1, r7
1005a0d6:	4632      	mov	r2, r6
1005a0d8:	9301      	str	r3, [sp, #4]
1005a0da:	f7ff fd2f 	bl	10059b3c <l2c_pre_process_incoming_response_packet>
1005a0de:	9b01      	ldr	r3, [sp, #4]
1005a0e0:	2800      	cmp	r0, #0
1005a0e2:	d000      	beq.n	1005a0e6 <L2C_acl_cframe_signaling_hndl+0xe2>
1005a0e4:	e090      	b.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a0e6:	8826      	ldrh	r6, [r4, #0]
1005a0e8:	484e      	ldr	r0, [pc, #312]	@ (1005a224 <__arm_cp.7_3>)
1005a0ea:	6800      	ldr	r0, [r0, #0]
1005a0ec:	6980      	ldr	r0, [r0, #24]
1005a0ee:	2142      	movs	r1, #66	@ 0x42
1005a0f0:	2252      	movs	r2, #82	@ 0x52
1005a0f2:	2303      	movs	r3, #3
1005a0f4:	f7fb f9f4 	bl	100554e0 <aci_event_fifo_push_header>
1005a0f8:	9b01      	ldr	r3, [sp, #4]
1005a0fa:	2800      	cmp	r0, #0
1005a0fc:	d100      	bne.n	1005a100 <L2C_acl_cframe_signaling_hndl+0xfc>
1005a0fe:	e083      	b.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a100:	4605      	mov	r5, r0
1005a102:	4631      	mov	r1, r6
1005a104:	1d06      	adds	r6, r0, #4
1005a106:	4630      	mov	r0, r6
1005a108:	4622      	mov	r2, r4
1005a10a:	f7fb fd79 	bl	10055c00 <aci_l2cap_command_reject_event_copy>
1005a10e:	02f8      	lsls	r0, r7, #11
1005a110:	300a      	adds	r0, #10
1005a112:	2108      	movs	r1, #8
1005a114:	e058      	b.n	1005a1c8 <L2C_acl_cframe_signaling_hndl+0x1c4>
1005a116:	4369      	muls	r1, r5
1005a118:	1850      	adds	r0, r2, r1
1005a11a:	7880      	ldrb	r0, [r0, #2]
1005a11c:	07c0      	lsls	r0, r0, #31
1005a11e:	d173      	bne.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a120:	2113      	movs	r1, #19
1005a122:	4628      	mov	r0, r5
1005a124:	4632      	mov	r2, r6
1005a126:	9301      	str	r3, [sp, #4]
1005a128:	f7ff fd08 	bl	10059b3c <l2c_pre_process_incoming_response_packet>
1005a12c:	9b01      	ldr	r3, [sp, #4]
1005a12e:	2800      	cmp	r0, #0
1005a130:	d16a      	bne.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a132:	2108      	movs	r1, #8
1005a134:	4620      	mov	r0, r4
1005a136:	f7fb f844 	bl	100551c2 <ACL_pkt_read_16b>
1005a13a:	9b01      	ldr	r3, [sp, #4]
1005a13c:	4606      	mov	r6, r0
1005a13e:	483a      	ldr	r0, [pc, #232]	@ (1005a228 <__arm_cp.7_4>)
1005a140:	6800      	ldr	r0, [r0, #0]
1005a142:	214f      	movs	r1, #79	@ 0x4f
1005a144:	5c40      	ldrb	r0, [r0, r1]
1005a146:	0780      	lsls	r0, r0, #30
1005a148:	d55e      	bpl.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a14a:	8827      	ldrh	r7, [r4, #0]
1005a14c:	4835      	ldr	r0, [pc, #212]	@ (1005a224 <__arm_cp.7_3>)
1005a14e:	6800      	ldr	r0, [r0, #0]
1005a150:	6980      	ldr	r0, [r0, #24]
1005a152:	2142      	movs	r1, #66	@ 0x42
1005a154:	224c      	movs	r2, #76	@ 0x4c
1005a156:	2303      	movs	r3, #3
1005a158:	f7fb f9c2 	bl	100554e0 <aci_event_fifo_push_header>
1005a15c:	9b01      	ldr	r3, [sp, #4]
1005a15e:	2800      	cmp	r0, #0
1005a160:	d052      	beq.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a162:	4605      	mov	r5, r0
1005a164:	7306      	strb	r6, [r0, #12]
1005a166:	7287      	strb	r7, [r0, #10]
1005a168:	0a30      	lsrs	r0, r6, #8
1005a16a:	7368      	strb	r0, [r5, #13]
1005a16c:	0a38      	lsrs	r0, r7, #8
1005a16e:	72e8      	strb	r0, [r5, #11]
1005a170:	1d2e      	adds	r6, r5, #4
1005a172:	9800      	ldr	r0, [sp, #0]
1005a174:	02c0      	lsls	r0, r0, #11
1005a176:	2106      	movs	r1, #6
1005a178:	e026      	b.n	1005a1c8 <L2C_acl_cframe_signaling_hndl+0x1c4>
1005a17a:	0758      	lsls	r0, r3, #29
1005a17c:	9b01      	ldr	r3, [sp, #4]
1005a17e:	d443      	bmi.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a180:	4369      	muls	r1, r5
1005a182:	1852      	adds	r2, r2, r1
1005a184:	2012      	movs	r0, #18
1005a186:	4631      	mov	r1, r6
1005a188:	f7ff fcd1 	bl	10059b2e <l2c_post_process_incoming_request_packet>
1005a18c:	9b01      	ldr	r3, [sp, #4]
1005a18e:	4826      	ldr	r0, [pc, #152]	@ (1005a228 <__arm_cp.7_4>)
1005a190:	6800      	ldr	r0, [r0, #0]
1005a192:	214f      	movs	r1, #79	@ 0x4f
1005a194:	5c40      	ldrb	r0, [r0, r1]
1005a196:	07c0      	lsls	r0, r0, #31
1005a198:	d036      	beq.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a19a:	8827      	ldrh	r7, [r4, #0]
1005a19c:	4821      	ldr	r0, [pc, #132]	@ (1005a224 <__arm_cp.7_3>)
1005a19e:	6800      	ldr	r0, [r0, #0]
1005a1a0:	6980      	ldr	r0, [r0, #24]
1005a1a2:	2142      	movs	r1, #66	@ 0x42
1005a1a4:	224d      	movs	r2, #77	@ 0x4d
1005a1a6:	2305      	movs	r3, #5
1005a1a8:	f7fb f99a 	bl	100554e0 <aci_event_fifo_push_header>
1005a1ac:	9b01      	ldr	r3, [sp, #4]
1005a1ae:	2800      	cmp	r0, #0
1005a1b0:	d02a      	beq.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a1b2:	4605      	mov	r5, r0
1005a1b4:	1d06      	adds	r6, r0, #4
1005a1b6:	4630      	mov	r0, r6
1005a1b8:	4639      	mov	r1, r7
1005a1ba:	4622      	mov	r2, r4
1005a1bc:	f7fb fcd8 	bl	10055b70 <aci_l2cap_connection_update_req_event_copy>
1005a1c0:	9800      	ldr	r0, [sp, #0]
1005a1c2:	02c0      	lsls	r0, r0, #11
1005a1c4:	1c80      	adds	r0, r0, #2
1005a1c6:	210f      	movs	r1, #15
1005a1c8:	22ff      	movs	r2, #255	@ 0xff
1005a1ca:	7072      	strb	r2, [r6, #1]
1005a1cc:	2282      	movs	r2, #130	@ 0x82
1005a1ce:	7032      	strb	r2, [r6, #0]
1005a1d0:	0a02      	lsrs	r2, r0, #8
1005a1d2:	726a      	strb	r2, [r5, #9]
1005a1d4:	7228      	strb	r0, [r5, #8]
1005a1d6:	2000      	movs	r0, #0
1005a1d8:	71e8      	strb	r0, [r5, #7]
1005a1da:	71a9      	strb	r1, [r5, #6]
1005a1dc:	2042      	movs	r0, #66	@ 0x42
1005a1de:	4629      	mov	r1, r5
1005a1e0:	f7fb fa1b 	bl	1005561a <aci_event_fifo_push>
1005a1e4:	9b01      	ldr	r3, [sp, #4]
1005a1e6:	e00f      	b.n	1005a208 <L2C_acl_cframe_signaling_hndl+0x204>
1005a1e8:	9802      	ldr	r0, [sp, #8]
1005a1ea:	7146      	strb	r6, [r0, #5]
1005a1ec:	2200      	movs	r2, #0
1005a1ee:	4638      	mov	r0, r7
1005a1f0:	4631      	mov	r1, r6
1005a1f2:	4613      	mov	r3, r2
1005a1f4:	f7ff fcdc 	bl	10059bb0 <L2C_build_command_reject_pdu>
1005a1f8:	9b01      	ldr	r3, [sp, #4]
1005a1fa:	2812      	cmp	r0, #18
1005a1fc:	d809      	bhi.n	1005a212 <L2C_acl_cframe_signaling_hndl+0x20e>
1005a1fe:	2101      	movs	r1, #1
1005a200:	4081      	lsls	r1, r0
1005a202:	4a0a      	ldr	r2, [pc, #40]	@ (1005a22c <__arm_cp.7_5>)
1005a204:	4211      	tst	r1, r2
1005a206:	d004      	beq.n	1005a212 <L2C_acl_cframe_signaling_hndl+0x20e>
1005a208:	4620      	mov	r0, r4
1005a20a:	461c      	mov	r4, r3
1005a20c:	f7fa ffb4 	bl	10055178 <ACL_pkt_release>
1005a210:	4620      	mov	r0, r4
1005a212:	b005      	add	sp, #20
1005a214:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a216:	46c0      	nop			@ (mov r8, r8)

1005a218 <__arm_cp.7_0>:
1005a218:	2000247c 	.word	0x2000247c

1005a21c <__arm_cp.7_1>:
1005a21c:	20002460 	.word	0x20002460

1005a220 <__arm_cp.7_2>:
1005a220:	000c0002 	.word	0x000c0002

1005a224 <__arm_cp.7_3>:
1005a224:	20002418 	.word	0x20002418

1005a228 <__arm_cp.7_4>:
1005a228:	20002468 	.word	0x20002468

1005a22c <__arm_cp.7_5>:
1005a22c:	00040005 	.word	0x00040005

1005a230 <__arm_cp.7_6>:
1005a230:	02940040 	.word	0x02940040

1005a234 <__arm_cp.7_7>:
1005a234:	00007530 	.word	0x00007530

1005a238 <L2C_timeout_handler_signalling>:
1005a238:	b570      	push	{r4, r5, r6, lr}
1005a23a:	2414      	movs	r4, #20
1005a23c:	4344      	muls	r4, r0
1005a23e:	4d14      	ldr	r5, [pc, #80]	@ (1005a290 <__arm_cp.8_0>)
1005a240:	4814      	ldr	r0, [pc, #80]	@ (1005a294 <__arm_cp.8_1>)
1005a242:	6800      	ldr	r0, [r0, #0]
1005a244:	214f      	movs	r1, #79	@ 0x4f
1005a246:	5c40      	ldrb	r0, [r0, r1]
1005a248:	0700      	lsls	r0, r0, #28
1005a24a:	d513      	bpl.n	1005a274 <L2C_timeout_handler_signalling+0x3c>
1005a24c:	6828      	ldr	r0, [r5, #0]
1005a24e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005a250:	5b06      	ldrh	r6, [r0, r4]
1005a252:	4811      	ldr	r0, [pc, #68]	@ (1005a298 <__arm_cp.8_2>)
1005a254:	6800      	ldr	r0, [r0, #0]
1005a256:	6980      	ldr	r0, [r0, #24]
1005a258:	2206      	movs	r2, #6
1005a25a:	2102      	movs	r1, #2
1005a25c:	460b      	mov	r3, r1
1005a25e:	f7fb f93f 	bl	100554e0 <aci_event_fifo_push_header>
1005a262:	2800      	cmp	r0, #0
1005a264:	d006      	beq.n	1005a274 <L2C_timeout_handler_signalling+0x3c>
1005a266:	4601      	mov	r1, r0
1005a268:	480c      	ldr	r0, [pc, #48]	@ (1005a29c <__arm_cp.8_3>)
1005a26a:	6048      	str	r0, [r1, #4]
1005a26c:	810e      	strh	r6, [r1, #8]
1005a26e:	2002      	movs	r0, #2
1005a270:	f7fb f9d3 	bl	1005561a <aci_event_fifo_push>
1005a274:	6828      	ldr	r0, [r5, #0]
1005a276:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005a278:	1901      	adds	r1, r0, r4
1005a27a:	2200      	movs	r2, #0
1005a27c:	718a      	strb	r2, [r1, #6]
1005a27e:	788a      	ldrb	r2, [r1, #2]
1005a280:	23f9      	movs	r3, #249	@ 0xf9
1005a282:	4013      	ands	r3, r2
1005a284:	708b      	strb	r3, [r1, #2]
1005a286:	5b00      	ldrh	r0, [r0, r4]
1005a288:	21ff      	movs	r1, #255	@ 0xff
1005a28a:	f7ff fd17 	bl	10059cbc <L2C_cos_channel_descriptors_reset_pending>
1005a28e:	bd70      	pop	{r4, r5, r6, pc}

1005a290 <__arm_cp.8_0>:
1005a290:	20002460 	.word	0x20002460

1005a294 <__arm_cp.8_1>:
1005a294:	20002468 	.word	0x20002468

1005a298 <__arm_cp.8_2>:
1005a298:	20002418 	.word	0x20002418

1005a29c <__arm_cp.8_3>:
1005a29c:	10064329 	.word	0x10064329

1005a2a0 <l2c_sap_hci_le_connection_complete_evt_hndl>:
1005a2a0:	b5b0      	push	{r4, r5, r7, lr}
1005a2a2:	460c      	mov	r4, r1
1005a2a4:	4605      	mov	r5, r0
1005a2a6:	2000      	movs	r0, #0
1005a2a8:	f7ff fbf0 	bl	10059a8c <l2c_get_link_control_block_ref>
1005a2ac:	2800      	cmp	r0, #0
1005a2ae:	d005      	beq.n	1005a2bc <l2c_sap_hci_le_connection_complete_evt_hndl+0x1c>
1005a2b0:	2101      	movs	r1, #1
1005a2b2:	8081      	strh	r1, [r0, #4]
1005a2b4:	8005      	strh	r5, [r0, #0]
1005a2b6:	4261      	negs	r1, r4
1005a2b8:	4161      	adcs	r1, r4
1005a2ba:	7081      	strb	r1, [r0, #2]
1005a2bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005a2c0 <l2c_sap_hci_disconnection_complete_evt_hndl>:
1005a2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a2c2:	4604      	mov	r4, r0
1005a2c4:	f7ff fbfe 	bl	10059ac4 <l2c_get_link_control_block_index>
1005a2c8:	4605      	mov	r5, r0
1005a2ca:	4810      	ldr	r0, [pc, #64]	@ (1005a30c <__arm_cp.1_0>)
1005a2cc:	7ac0      	ldrb	r0, [r0, #11]
1005a2ce:	4285      	cmp	r5, r0
1005a2d0:	d21b      	bcs.n	1005a30a <l2c_sap_hci_disconnection_complete_evt_hndl+0x4a>
1005a2d2:	4e0f      	ldr	r6, [pc, #60]	@ (1005a310 <__arm_cp.1_1>)
1005a2d4:	6830      	ldr	r0, [r6, #0]
1005a2d6:	4629      	mov	r1, r5
1005a2d8:	f008 fcbf 	bl	10062c5a <CST_stop>
1005a2dc:	2714      	movs	r7, #20
1005a2de:	436f      	muls	r7, r5
1005a2e0:	6830      	ldr	r0, [r6, #0]
1005a2e2:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005a2e4:	2500      	movs	r5, #0
1005a2e6:	53c5      	strh	r5, [r0, r7]
1005a2e8:	19c0      	adds	r0, r0, r7
1005a2ea:	6900      	ldr	r0, [r0, #16]
1005a2ec:	2800      	cmp	r0, #0
1005a2ee:	d009      	beq.n	1005a304 <l2c_sap_hci_disconnection_complete_evt_hndl+0x44>
1005a2f0:	f7fa ff42 	bl	10055178 <ACL_pkt_release>
1005a2f4:	6830      	ldr	r0, [r6, #0]
1005a2f6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005a2f8:	19c0      	adds	r0, r0, r7
1005a2fa:	6105      	str	r5, [r0, #16]
1005a2fc:	6830      	ldr	r0, [r6, #0]
1005a2fe:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005a300:	19c0      	adds	r0, r0, r7
1005a302:	8185      	strh	r5, [r0, #12]
1005a304:	4620      	mov	r0, r4
1005a306:	f7ff fd0c 	bl	10059d22 <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>
1005a30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a30c <__arm_cp.1_0>:
1005a30c:	2000247c 	.word	0x2000247c

1005a310 <__arm_cp.1_1>:
1005a310:	20002460 	.word	0x20002460

1005a314 <llc_cig_cmn_start_cis_ucfg_weak>:
1005a314:	4770      	bx	lr

1005a316 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>:
1005a316:	4770      	bx	lr

1005a318 <llc_conn_get_cntxt_p>:
1005a318:	4803      	ldr	r0, [pc, #12]	@ (1005a328 <__arm_cp.0_0>)
1005a31a:	6800      	ldr	r0, [r0, #0]
1005a31c:	219c      	movs	r1, #156	@ 0x9c
1005a31e:	5840      	ldr	r0, [r0, r1]
1005a320:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a322:	6800      	ldr	r0, [r0, #0]
1005a324:	4770      	bx	lr
1005a326:	46c0      	nop			@ (mov r8, r8)

1005a328 <__arm_cp.0_0>:
1005a328:	20002468 	.word	0x20002468

1005a32c <llc_conn_get_cntxt_per_p>:
1005a32c:	214d      	movs	r1, #77	@ 0x4d
1005a32e:	0089      	lsls	r1, r1, #2
1005a330:	4341      	muls	r1, r0
1005a332:	4804      	ldr	r0, [pc, #16]	@ (1005a344 <__arm_cp.1_0>)
1005a334:	6800      	ldr	r0, [r0, #0]
1005a336:	229c      	movs	r2, #156	@ 0x9c
1005a338:	5880      	ldr	r0, [r0, r2]
1005a33a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a33c:	6840      	ldr	r0, [r0, #4]
1005a33e:	1840      	adds	r0, r0, r1
1005a340:	4770      	bx	lr
1005a342:	46c0      	nop			@ (mov r8, r8)

1005a344 <__arm_cp.1_0>:
1005a344:	20002468 	.word	0x20002468

1005a348 <llc_conn_get_cntxt_per_p_from_handle>:
1005a348:	b510      	push	{r4, lr}
1005a34a:	4601      	mov	r1, r0
1005a34c:	2000      	movs	r0, #0
1005a34e:	4a0d      	ldr	r2, [pc, #52]	@ (1005a384 <__arm_cp.2_0>)
1005a350:	4291      	cmp	r1, r2
1005a352:	d015      	beq.n	1005a380 <llc_conn_get_cntxt_per_p_from_handle+0x38>
1005a354:	4a0c      	ldr	r2, [pc, #48]	@ (1005a388 <__arm_cp.2_1>)
1005a356:	6812      	ldr	r2, [r2, #0]
1005a358:	2334      	movs	r3, #52	@ 0x34
1005a35a:	5cd2      	ldrb	r2, [r2, r3]
1005a35c:	1c52      	adds	r2, r2, #1
1005a35e:	4b0b      	ldr	r3, [pc, #44]	@ (1005a38c <__arm_cp.2_2>)
1005a360:	681b      	ldr	r3, [r3, #0]
1005a362:	249c      	movs	r4, #156	@ 0x9c
1005a364:	591b      	ldr	r3, [r3, r4]
1005a366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1005a368:	685b      	ldr	r3, [r3, #4]
1005a36a:	1e52      	subs	r2, r2, #1
1005a36c:	d008      	beq.n	1005a380 <llc_conn_get_cntxt_per_p_from_handle+0x38>
1005a36e:	244d      	movs	r4, #77	@ 0x4d
1005a370:	00a4      	lsls	r4, r4, #2
1005a372:	191c      	adds	r4, r3, r4
1005a374:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
1005a376:	428b      	cmp	r3, r1
1005a378:	4623      	mov	r3, r4
1005a37a:	d1f6      	bne.n	1005a36a <llc_conn_get_cntxt_per_p_from_handle+0x22>
1005a37c:	4804      	ldr	r0, [pc, #16]	@ (1005a390 <__arm_cp.2_3>)
1005a37e:	1820      	adds	r0, r4, r0
1005a380:	bd10      	pop	{r4, pc}
1005a382:	46c0      	nop			@ (mov r8, r8)

1005a384 <__arm_cp.2_0>:
1005a384:	0000ffff 	.word	0x0000ffff

1005a388 <__arm_cp.2_1>:
1005a388:	20002414 	.word	0x20002414

1005a38c <__arm_cp.2_2>:
1005a38c:	20002468 	.word	0x20002468

1005a390 <__arm_cp.2_3>:
1005a390:	fffffecc 	.word	0xfffffecc

1005a394 <llc_conn_get_phy_upd_cntxt_per_p>:
1005a394:	b510      	push	{r4, lr}
1005a396:	4604      	mov	r4, r0
1005a398:	f7f4 fdec 	bl	1004ef74 <phy_upd_csr_ucfg>
1005a39c:	2801      	cmp	r0, #1
1005a39e:	d109      	bne.n	1005a3b4 <llc_conn_get_phy_upd_cntxt_per_p+0x20>
1005a3a0:	200e      	movs	r0, #14
1005a3a2:	4360      	muls	r0, r4
1005a3a4:	4904      	ldr	r1, [pc, #16]	@ (1005a3b8 <__arm_cp.7_0>)
1005a3a6:	6809      	ldr	r1, [r1, #0]
1005a3a8:	229c      	movs	r2, #156	@ 0x9c
1005a3aa:	5889      	ldr	r1, [r1, r2]
1005a3ac:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a3ae:	6949      	ldr	r1, [r1, #20]
1005a3b0:	1808      	adds	r0, r1, r0
1005a3b2:	bd10      	pop	{r4, pc}
1005a3b4:	2000      	movs	r0, #0
1005a3b6:	bd10      	pop	{r4, pc}

1005a3b8 <__arm_cp.7_0>:
1005a3b8:	20002468 	.word	0x20002468

1005a3bc <llc_conn_init>:
1005a3bc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a3be:	4c3e      	ldr	r4, [pc, #248]	@ (1005a4b8 <__arm_cp.8_0>)
1005a3c0:	6820      	ldr	r0, [r4, #0]
1005a3c2:	259c      	movs	r5, #156	@ 0x9c
1005a3c4:	5940      	ldr	r0, [r0, r5]
1005a3c6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a3c8:	6803      	ldr	r3, [r0, #0]
1005a3ca:	2136      	movs	r1, #54	@ 0x36
1005a3cc:	2600      	movs	r6, #0
1005a3ce:	545e      	strb	r6, [r3, r1]
1005a3d0:	493a      	ldr	r1, [pc, #232]	@ (1005a4bc <__arm_cp.8_1>)
1005a3d2:	6949      	ldr	r1, [r1, #20]
1005a3d4:	0c0a      	lsrs	r2, r1, #16
1005a3d6:	2a19      	cmp	r2, #25
1005a3d8:	d301      	bcc.n	1005a3de <llc_conn_init+0x22>
1005a3da:	2119      	movs	r1, #25
1005a3dc:	0409      	lsls	r1, r1, #16
1005a3de:	6059      	str	r1, [r3, #4]
1005a3e0:	6019      	str	r1, [r3, #0]
1005a3e2:	6900      	ldr	r0, [r0, #16]
1005a3e4:	9302      	str	r3, [sp, #8]
1005a3e6:	6098      	str	r0, [r3, #8]
1005a3e8:	f000 fad0 	bl	1005a98c <llc_conn_list_reset>
1005a3ec:	6820      	ldr	r0, [r4, #0]
1005a3ee:	5940      	ldr	r0, [r0, r5]
1005a3f0:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a3f2:	6807      	ldr	r7, [r0, #0]
1005a3f4:	f7ff fac4 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1005a3f8:	2801      	cmp	r0, #1
1005a3fa:	d001      	beq.n	1005a400 <llc_conn_init+0x44>
1005a3fc:	201b      	movs	r0, #27
1005a3fe:	e000      	b.n	1005a402 <llc_conn_init+0x46>
1005a400:	20fb      	movs	r0, #251	@ 0xfb
1005a402:	82b8      	strh	r0, [r7, #20]
1005a404:	f7ff fabc 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1005a408:	4604      	mov	r4, r0
1005a40a:	2029      	movs	r0, #41	@ 0x29
1005a40c:	00c0      	lsls	r0, r0, #3
1005a40e:	9000      	str	r0, [sp, #0]
1005a410:	20a9      	movs	r0, #169	@ 0xa9
1005a412:	0105      	lsls	r5, r0, #4
1005a414:	f7f4 fdae 	bl	1004ef74 <phy_upd_csr_ucfg>
1005a418:	2c01      	cmp	r4, #1
1005a41a:	9501      	str	r5, [sp, #4]
1005a41c:	d107      	bne.n	1005a42e <llc_conn_init+0x72>
1005a41e:	2801      	cmp	r0, #1
1005a420:	4d27      	ldr	r5, [pc, #156]	@ (1005a4c0 <__arm_cp.8_2>)
1005a422:	9c00      	ldr	r4, [sp, #0]
1005a424:	d00c      	beq.n	1005a440 <llc_conn_init+0x84>
1005a426:	4d27      	ldr	r5, [pc, #156]	@ (1005a4c4 <__arm_cp.8_3>)
1005a428:	f7ff fa4e 	bl	100598c8 <cte_csr_ucfg_weak>
1005a42c:	e005      	b.n	1005a43a <llc_conn_init+0x7e>
1005a42e:	2801      	cmp	r0, #1
1005a430:	9c00      	ldr	r4, [sp, #0]
1005a432:	d005      	beq.n	1005a440 <llc_conn_init+0x84>
1005a434:	f7ff fa48 	bl	100598c8 <cte_csr_ucfg_weak>
1005a438:	4625      	mov	r5, r4
1005a43a:	2801      	cmp	r0, #1
1005a43c:	d100      	bne.n	1005a440 <llc_conn_init+0x84>
1005a43e:	3508      	adds	r5, #8
1005a440:	82fd      	strh	r5, [r7, #22]
1005a442:	f7ff fa9d 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1005a446:	2801      	cmp	r0, #1
1005a448:	d001      	beq.n	1005a44e <llc_conn_init+0x92>
1005a44a:	201b      	movs	r0, #27
1005a44c:	e000      	b.n	1005a450 <llc_conn_init+0x94>
1005a44e:	20fb      	movs	r0, #251	@ 0xfb
1005a450:	8338      	strh	r0, [r7, #24]
1005a452:	f7ff fa95 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1005a456:	4605      	mov	r5, r0
1005a458:	f7f4 fd8c 	bl	1004ef74 <phy_upd_csr_ucfg>
1005a45c:	2d01      	cmp	r5, #1
1005a45e:	d107      	bne.n	1005a470 <llc_conn_init+0xb4>
1005a460:	2801      	cmp	r0, #1
1005a462:	9d01      	ldr	r5, [sp, #4]
1005a464:	4916      	ldr	r1, [pc, #88]	@ (1005a4c0 <__arm_cp.8_2>)
1005a466:	d00d      	beq.n	1005a484 <llc_conn_init+0xc8>
1005a468:	f7ff fa2e 	bl	100598c8 <cte_csr_ucfg_weak>
1005a46c:	4915      	ldr	r1, [pc, #84]	@ (1005a4c4 <__arm_cp.8_3>)
1005a46e:	e006      	b.n	1005a47e <llc_conn_init+0xc2>
1005a470:	2801      	cmp	r0, #1
1005a472:	9d01      	ldr	r5, [sp, #4]
1005a474:	4629      	mov	r1, r5
1005a476:	d005      	beq.n	1005a484 <llc_conn_init+0xc8>
1005a478:	f7ff fa26 	bl	100598c8 <cte_csr_ucfg_weak>
1005a47c:	4621      	mov	r1, r4
1005a47e:	2801      	cmp	r0, #1
1005a480:	d100      	bne.n	1005a484 <llc_conn_init+0xc8>
1005a482:	3108      	adds	r1, #8
1005a484:	83fc      	strh	r4, [r7, #30]
1005a486:	201b      	movs	r0, #27
1005a488:	83b8      	strh	r0, [r7, #28]
1005a48a:	827d      	strh	r5, [r7, #18]
1005a48c:	823c      	strh	r4, [r7, #16]
1005a48e:	81fc      	strh	r4, [r7, #14]
1005a490:	81b8      	strh	r0, [r7, #12]
1005a492:	8379      	strh	r1, [r7, #26]
1005a494:	f7f4 fead 	bl	1004f1f2 <LL_phy_update_init_ucfg>
1005a498:	9802      	ldr	r0, [sp, #8]
1005a49a:	f001 fd33 	bl	1005bf04 <llc_subrate_init_acceptable>
1005a49e:	4c0a      	ldr	r4, [pc, #40]	@ (1005a4c8 <__arm_cp.8_4>)
1005a4a0:	6820      	ldr	r0, [r4, #0]
1005a4a2:	2134      	movs	r1, #52	@ 0x34
1005a4a4:	5c41      	ldrb	r1, [r0, r1]
1005a4a6:	b2f0      	uxtb	r0, r6
1005a4a8:	4288      	cmp	r0, r1
1005a4aa:	d203      	bcs.n	1005a4b4 <llc_conn_init+0xf8>
1005a4ac:	f000 f80e 	bl	1005a4cc <llc_conn_per_init>
1005a4b0:	1c76      	adds	r6, r6, #1
1005a4b2:	e7f5      	b.n	1005a4a0 <llc_conn_init+0xe4>
1005a4b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a4b6:	46c0      	nop			@ (mov r8, r8)

1005a4b8 <__arm_cp.8_0>:
1005a4b8:	20002468 	.word	0x20002468

1005a4bc <__arm_cp.8_1>:
1005a4bc:	2000247c 	.word	0x2000247c

1005a4c0 <__arm_cp.8_2>:
1005a4c0:	00004290 	.word	0x00004290

1005a4c4 <__arm_cp.8_3>:
1005a4c4:	00000848 	.word	0x00000848

1005a4c8 <__arm_cp.8_4>:
1005a4c8:	20002414 	.word	0x20002414

1005a4cc <llc_conn_per_init>:
1005a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a4ce:	4605      	mov	r5, r0
1005a4d0:	204d      	movs	r0, #77	@ 0x4d
1005a4d2:	0080      	lsls	r0, r0, #2
1005a4d4:	4368      	muls	r0, r5
1005a4d6:	492d      	ldr	r1, [pc, #180]	@ (1005a58c <__arm_cp.9_0>)
1005a4d8:	6809      	ldr	r1, [r1, #0]
1005a4da:	279c      	movs	r7, #156	@ 0x9c
1005a4dc:	59c9      	ldr	r1, [r1, r7]
1005a4de:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a4e0:	6849      	ldr	r1, [r1, #4]
1005a4e2:	180c      	adds	r4, r1, r0
1005a4e4:	f001 fc9a 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005a4e8:	4606      	mov	r6, r0
1005a4ea:	f001 fc8d 	bl	1005be08 <cis_csr_ucfg_weak>
1005a4ee:	4330      	orrs	r0, r6
1005a4f0:	b2c0      	uxtb	r0, r0
1005a4f2:	f006 f8a3 	bl	1006063c <LL_get_control_pdu_size>
1005a4f6:	2200      	movs	r2, #0
1005a4f8:	51e2      	str	r2, [r4, r7]
1005a4fa:	212e      	movs	r1, #46	@ 0x2e
1005a4fc:	231f      	movs	r3, #31
1005a4fe:	5463      	strb	r3, [r4, r1]
1005a500:	85a2      	strh	r2, [r4, #44]	@ 0x2c
1005a502:	0880      	lsrs	r0, r0, #2
1005a504:	4368      	muls	r0, r5
1005a506:	0080      	lsls	r0, r0, #2
1005a508:	4920      	ldr	r1, [pc, #128]	@ (1005a58c <__arm_cp.9_0>)
1005a50a:	6809      	ldr	r1, [r1, #0]
1005a50c:	460b      	mov	r3, r1
1005a50e:	3394      	adds	r3, #148	@ 0x94
1005a510:	685b      	ldr	r3, [r3, #4]
1005a512:	181b      	adds	r3, r3, r0
1005a514:	2690      	movs	r6, #144	@ 0x90
1005a516:	51a3      	str	r3, [r4, r6]
1005a518:	238c      	movs	r3, #140	@ 0x8c
1005a51a:	50e2      	str	r2, [r4, r3]
1005a51c:	2388      	movs	r3, #136	@ 0x88
1005a51e:	50e2      	str	r2, [r4, r3]
1005a520:	2330      	movs	r3, #48	@ 0x30
1005a522:	54e5      	strb	r5, [r4, r3]
1005a524:	239a      	movs	r3, #154	@ 0x9a
1005a526:	52e2      	strh	r2, [r4, r3]
1005a528:	23ff      	movs	r3, #255	@ 0xff
1005a52a:	461d      	mov	r5, r3
1005a52c:	3508      	adds	r5, #8
1005a52e:	5562      	strb	r2, [r4, r5]
1005a530:	2241      	movs	r2, #65	@ 0x41
1005a532:	54a3      	strb	r3, [r4, r2]
1005a534:	222f      	movs	r2, #47	@ 0x2f
1005a536:	2307      	movs	r3, #7
1005a538:	54a3      	strb	r3, [r4, r2]
1005a53a:	227d      	movs	r2, #125	@ 0x7d
1005a53c:	0452      	lsls	r2, r2, #17
1005a53e:	66e2      	str	r2, [r4, #108]	@ 0x6c
1005a540:	6722      	str	r2, [r4, #112]	@ 0x70
1005a542:	2201      	movs	r2, #1
1005a544:	8522      	strh	r2, [r4, #40]	@ 0x28
1005a546:	4a12      	ldr	r2, [pc, #72]	@ (1005a590 <__arm_cp.9_1>)
1005a548:	8762      	strh	r2, [r4, #58]	@ 0x3a
1005a54a:	2219      	movs	r2, #25
1005a54c:	0412      	lsls	r2, r2, #16
1005a54e:	65a2      	str	r2, [r4, #88]	@ 0x58
1005a550:	65e2      	str	r2, [r4, #92]	@ 0x5c
1005a552:	6622      	str	r2, [r4, #96]	@ 0x60
1005a554:	4622      	mov	r2, r4
1005a556:	32b4      	adds	r2, #180	@ 0xb4
1005a558:	2394      	movs	r3, #148	@ 0x94
1005a55a:	58c9      	ldr	r1, [r1, r3]
1005a55c:	231b      	movs	r3, #27
1005a55e:	8053      	strh	r3, [r2, #2]
1005a560:	1808      	adds	r0, r1, r0
1005a562:	4621      	mov	r1, r4
1005a564:	3190      	adds	r1, #144	@ 0x90
1005a566:	6048      	str	r0, [r1, #4]
1005a568:	20b4      	movs	r0, #180	@ 0xb4
1005a56a:	5223      	strh	r3, [r4, r0]
1005a56c:	4809      	ldr	r0, [pc, #36]	@ (1005a594 <__arm_cp.9_2>)
1005a56e:	490a      	ldr	r1, [pc, #40]	@ (1005a598 <__arm_cp.9_3>)
1005a570:	6050      	str	r0, [r2, #4]
1005a572:	6091      	str	r1, [r2, #8]
1005a574:	2029      	movs	r0, #41	@ 0x29
1005a576:	00c0      	lsls	r0, r0, #3
1005a578:	8190      	strh	r0, [r2, #12]
1005a57a:	4620      	mov	r0, r4
1005a57c:	f001 fcd7 	bl	1005bf2e <llc_subrate_reset_params>
1005a580:	3480      	adds	r4, #128	@ 0x80
1005a582:	4620      	mov	r0, r4
1005a584:	f008 fce8 	bl	10062f58 <ACL_list_init>
1005a588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a58a:	46c0      	nop			@ (mov r8, r8)

1005a58c <__arm_cp.9_0>:
1005a58c:	20002468 	.word	0x20002468

1005a590 <__arm_cp.9_1>:
1005a590:	0000ffff 	.word	0x0000ffff

1005a594 <__arm_cp.9_2>:
1005a594:	0148001b 	.word	0x0148001b

1005a598 <__arm_cp.9_3>:
1005a598:	001b0148 	.word	0x001b0148

1005a59c <llc_conn_mem_allocate>:
1005a59c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a59e:	b085      	sub	sp, #20
1005a5a0:	2b01      	cmp	r3, #1
1005a5a2:	d000      	beq.n	1005a5a6 <llc_conn_mem_allocate+0xa>
1005a5a4:	e082      	b.n	1005a6ac <llc_conn_mem_allocate+0x110>
1005a5a6:	ab02      	add	r3, sp, #8
1005a5a8:	c307      	stmia	r3!, {r0, r1, r2}
1005a5aa:	4841      	ldr	r0, [pc, #260]	@ (1005a6b0 <__arm_cp.10_0>)
1005a5ac:	7fc1      	ldrb	r1, [r0, #31]
1005a5ae:	9101      	str	r1, [sp, #4]
1005a5b0:	7ac4      	ldrb	r4, [r0, #11]
1005a5b2:	9400      	str	r4, [sp, #0]
1005a5b4:	2601      	movs	r6, #1
1005a5b6:	2124      	movs	r1, #36	@ 0x24
1005a5b8:	4a3e      	ldr	r2, [pc, #248]	@ (1005a6b4 <__arm_cp.10_1>)
1005a5ba:	4630      	mov	r0, r6
1005a5bc:	4790      	blx	r2
1005a5be:	493e      	ldr	r1, [pc, #248]	@ (1005a6b8 <__arm_cp.10_2>)
1005a5c0:	6809      	ldr	r1, [r1, #0]
1005a5c2:	279c      	movs	r7, #156	@ 0x9c
1005a5c4:	59c9      	ldr	r1, [r1, r7]
1005a5c6:	63c8      	str	r0, [r1, #60]	@ 0x3c
1005a5c8:	2538      	movs	r5, #56	@ 0x38
1005a5ca:	4630      	mov	r0, r6
1005a5cc:	4629      	mov	r1, r5
1005a5ce:	4a39      	ldr	r2, [pc, #228]	@ (1005a6b4 <__arm_cp.10_1>)
1005a5d0:	4790      	blx	r2
1005a5d2:	4939      	ldr	r1, [pc, #228]	@ (1005a6b8 <__arm_cp.10_2>)
1005a5d4:	6809      	ldr	r1, [r1, #0]
1005a5d6:	59c9      	ldr	r1, [r1, r7]
1005a5d8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a5da:	6008      	str	r0, [r1, #0]
1005a5dc:	204d      	movs	r0, #77	@ 0x4d
1005a5de:	0081      	lsls	r1, r0, #2
1005a5e0:	4620      	mov	r0, r4
1005a5e2:	4c34      	ldr	r4, [pc, #208]	@ (1005a6b4 <__arm_cp.10_1>)
1005a5e4:	47a0      	blx	r4
1005a5e6:	4934      	ldr	r1, [pc, #208]	@ (1005a6b8 <__arm_cp.10_2>)
1005a5e8:	6809      	ldr	r1, [r1, #0]
1005a5ea:	59c9      	ldr	r1, [r1, r7]
1005a5ec:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a5ee:	6048      	str	r0, [r1, #4]
1005a5f0:	9801      	ldr	r0, [sp, #4]
1005a5f2:	4086      	lsls	r6, r0
1005a5f4:	b2f0      	uxtb	r0, r6
1005a5f6:	2108      	movs	r1, #8
1005a5f8:	47a0      	blx	r4
1005a5fa:	492f      	ldr	r1, [pc, #188]	@ (1005a6b8 <__arm_cp.10_2>)
1005a5fc:	6809      	ldr	r1, [r1, #0]
1005a5fe:	59c9      	ldr	r1, [r1, r7]
1005a600:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a602:	6809      	ldr	r1, [r1, #0]
1005a604:	2228      	movs	r2, #40	@ 0x28
1005a606:	2300      	movs	r3, #0
1005a608:	548b      	strb	r3, [r1, r2]
1005a60a:	6248      	str	r0, [r1, #36]	@ 0x24
1005a60c:	3128      	adds	r1, #40	@ 0x28
1005a60e:	704e      	strb	r6, [r1, #1]
1005a610:	9c00      	ldr	r4, [sp, #0]
1005a612:	2013      	movs	r0, #19
1005a614:	2104      	movs	r1, #4
1005a616:	4e27      	ldr	r6, [pc, #156]	@ (1005a6b4 <__arm_cp.10_1>)
1005a618:	47b0      	blx	r6
1005a61a:	4927      	ldr	r1, [pc, #156]	@ (1005a6b8 <__arm_cp.10_2>)
1005a61c:	6809      	ldr	r1, [r1, #0]
1005a61e:	59c9      	ldr	r1, [r1, r7]
1005a620:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a622:	6108      	str	r0, [r1, #16]
1005a624:	4620      	mov	r0, r4
1005a626:	4629      	mov	r1, r5
1005a628:	47b0      	blx	r6
1005a62a:	4633      	mov	r3, r6
1005a62c:	4a22      	ldr	r2, [pc, #136]	@ (1005a6b8 <__arm_cp.10_2>)
1005a62e:	6811      	ldr	r1, [r2, #0]
1005a630:	59c9      	ldr	r1, [r1, r7]
1005a632:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a634:	6088      	str	r0, [r1, #8]
1005a636:	4626      	mov	r6, r4
1005a638:	4620      	mov	r0, r4
1005a63a:	4629      	mov	r1, r5
1005a63c:	4615      	mov	r5, r2
1005a63e:	4798      	blx	r3
1005a640:	6829      	ldr	r1, [r5, #0]
1005a642:	59c9      	ldr	r1, [r1, r7]
1005a644:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a646:	60c8      	str	r0, [r1, #12]
1005a648:	9802      	ldr	r0, [sp, #8]
1005a64a:	2801      	cmp	r0, #1
1005a64c:	d107      	bne.n	1005a65e <llc_conn_mem_allocate+0xc2>
1005a64e:	210e      	movs	r1, #14
1005a650:	4630      	mov	r0, r6
1005a652:	f006 fcb9 	bl	10060fc8 <csmem_mem_0_assign>
1005a656:	6829      	ldr	r1, [r5, #0]
1005a658:	59c9      	ldr	r1, [r1, r7]
1005a65a:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a65c:	6148      	str	r0, [r1, #20]
1005a65e:	9803      	ldr	r0, [sp, #12]
1005a660:	2801      	cmp	r0, #1
1005a662:	d107      	bne.n	1005a674 <llc_conn_mem_allocate+0xd8>
1005a664:	2108      	movs	r1, #8
1005a666:	4630      	mov	r0, r6
1005a668:	f006 fcae 	bl	10060fc8 <csmem_mem_0_assign>
1005a66c:	6829      	ldr	r1, [r5, #0]
1005a66e:	59c9      	ldr	r1, [r1, r7]
1005a670:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a672:	6188      	str	r0, [r1, #24]
1005a674:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005a676:	9804      	ldr	r0, [sp, #16]
1005a678:	2801      	cmp	r0, #1
1005a67a:	d10d      	bne.n	1005a698 <llc_conn_mem_allocate+0xfc>
1005a67c:	2120      	movs	r1, #32
1005a67e:	4630      	mov	r0, r6
1005a680:	f006 fca2 	bl	10060fc8 <csmem_mem_0_assign>
1005a684:	6829      	ldr	r1, [r5, #0]
1005a686:	59c9      	ldr	r1, [r1, r7]
1005a688:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a68a:	61c8      	str	r0, [r1, #28]
1005a68c:	2001      	movs	r0, #1
1005a68e:	2111      	movs	r1, #17
1005a690:	f006 fc9a 	bl	10060fc8 <csmem_mem_0_assign>
1005a694:	6829      	ldr	r1, [r5, #0]
1005a696:	6648      	str	r0, [r1, #100]	@ 0x64
1005a698:	2c01      	cmp	r4, #1
1005a69a:	d107      	bne.n	1005a6ac <llc_conn_mem_allocate+0x110>
1005a69c:	211c      	movs	r1, #28
1005a69e:	4630      	mov	r0, r6
1005a6a0:	f006 fc92 	bl	10060fc8 <csmem_mem_0_assign>
1005a6a4:	6829      	ldr	r1, [r5, #0]
1005a6a6:	59c9      	ldr	r1, [r1, r7]
1005a6a8:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a6aa:	6208      	str	r0, [r1, #32]
1005a6ac:	b005      	add	sp, #20
1005a6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005a6b0 <__arm_cp.10_0>:
1005a6b0:	2000247c 	.word	0x2000247c

1005a6b4 <__arm_cp.10_1>:
1005a6b4:	10060fc9 	.word	0x10060fc9

1005a6b8 <__arm_cp.10_2>:
1005a6b8:	20002468 	.word	0x20002468

1005a6bc <llc_conn_clr_instant_reached_passed>:
1005a6bc:	219a      	movs	r1, #154	@ 0x9a
1005a6be:	5a42      	ldrh	r2, [r0, r1]
1005a6c0:	2304      	movs	r3, #4
1005a6c2:	439a      	bics	r2, r3
1005a6c4:	5242      	strh	r2, [r0, r1]
1005a6c6:	5a42      	ldrh	r2, [r0, r1]
1005a6c8:	2302      	movs	r3, #2
1005a6ca:	439a      	bics	r2, r3
1005a6cc:	5242      	strh	r2, [r0, r1]
1005a6ce:	4770      	bx	lr

1005a6d0 <llc_conn_clr_rx_acl_blocked>:
1005a6d0:	2194      	movs	r1, #148	@ 0x94
1005a6d2:	5840      	ldr	r0, [r0, r1]
1005a6d4:	8801      	ldrh	r1, [r0, #0]
1005a6d6:	4a02      	ldr	r2, [pc, #8]	@ (1005a6e0 <__arm_cp.5_0>)
1005a6d8:	400a      	ands	r2, r1
1005a6da:	8002      	strh	r2, [r0, #0]
1005a6dc:	4770      	bx	lr
1005a6de:	46c0      	nop			@ (mov r8, r8)

1005a6e0 <__arm_cp.5_0>:
1005a6e0:	0000feff 	.word	0x0000feff

1005a6e4 <llc_conn_clr_rx_ctrl_pdu_full>:
1005a6e4:	2190      	movs	r1, #144	@ 0x90
1005a6e6:	5840      	ldr	r0, [r0, r1]
1005a6e8:	8801      	ldrh	r1, [r0, #0]
1005a6ea:	2201      	movs	r2, #1
1005a6ec:	4391      	bics	r1, r2
1005a6ee:	8001      	strh	r1, [r0, #0]
1005a6f0:	4770      	bx	lr

1005a6f2 <llc_conn_clr_tx_acl_blocked>:
1005a6f2:	2194      	movs	r1, #148	@ 0x94
1005a6f4:	5840      	ldr	r0, [r0, r1]
1005a6f6:	8801      	ldrh	r1, [r0, #0]
1005a6f8:	2280      	movs	r2, #128	@ 0x80
1005a6fa:	4391      	bics	r1, r2
1005a6fc:	8001      	strh	r1, [r0, #0]
1005a6fe:	4770      	bx	lr

1005a700 <llc_conn_copy_tx_data_packet>:
1005a700:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a702:	460c      	mov	r4, r1
1005a704:	2188      	movs	r1, #136	@ 0x88
1005a706:	5c41      	ldrb	r1, [r0, r1]
1005a708:	0649      	lsls	r1, r1, #25
1005a70a:	d40c      	bmi.n	1005a726 <llc_conn_copy_tx_data_packet+0x26>
1005a70c:	3088      	adds	r0, #136	@ 0x88
1005a70e:	8a21      	ldrh	r1, [r4, #16]
1005a710:	8862      	ldrh	r2, [r4, #2]
1005a712:	1a52      	subs	r2, r2, r1
1005a714:	b293      	uxth	r3, r2
1005a716:	8dc5      	ldrh	r5, [r0, #46]	@ 0x2e
1005a718:	42ab      	cmp	r3, r5
1005a71a:	d909      	bls.n	1005a730 <llc_conn_copy_tx_data_packet+0x30>
1005a71c:	7a20      	ldrb	r0, [r4, #8]
1005a71e:	22f7      	movs	r2, #247	@ 0xf7
1005a720:	4002      	ands	r2, r0
1005a722:	7222      	strb	r2, [r4, #8]
1005a724:	e001      	b.n	1005a72a <llc_conn_copy_tx_data_packet+0x2a>
1005a726:	8a21      	ldrh	r1, [r4, #16]
1005a728:	7b25      	ldrb	r5, [r4, #12]
1005a72a:	2010      	movs	r0, #16
1005a72c:	9001      	str	r0, [sp, #4]
1005a72e:	e005      	b.n	1005a73c <llc_conn_copy_tx_data_packet+0x3c>
1005a730:	69e0      	ldr	r0, [r4, #28]
1005a732:	1e43      	subs	r3, r0, #1
1005a734:	4198      	sbcs	r0, r3
1005a736:	0100      	lsls	r0, r0, #4
1005a738:	9001      	str	r0, [sp, #4]
1005a73a:	4615      	mov	r5, r2
1005a73c:	2900      	cmp	r1, #0
1005a73e:	d102      	bne.n	1005a746 <llc_conn_copy_tx_data_packet+0x46>
1005a740:	7a20      	ldrb	r0, [r4, #8]
1005a742:	0780      	lsls	r0, r0, #30
1005a744:	d401      	bmi.n	1005a74a <llc_conn_copy_tx_data_packet+0x4a>
1005a746:	2001      	movs	r0, #1
1005a748:	e000      	b.n	1005a74c <llc_conn_copy_tx_data_packet+0x4c>
1005a74a:	2002      	movs	r0, #2
1005a74c:	9002      	str	r0, [sp, #8]
1005a74e:	480e      	ldr	r0, [pc, #56]	@ (1005a788 <__arm_cp.8_0>)
1005a750:	6800      	ldr	r0, [r0, #0]
1005a752:	278c      	movs	r7, #140	@ 0x8c
1005a754:	59c0      	ldr	r0, [r0, r7]
1005a756:	1d00      	adds	r0, r0, #4
1005a758:	89e2      	ldrh	r2, [r4, #14]
1005a75a:	1851      	adds	r1, r2, r1
1005a75c:	261f      	movs	r6, #31
1005a75e:	400e      	ands	r6, r1
1005a760:	19a9      	adds	r1, r5, r6
1005a762:	b28a      	uxth	r2, r1
1005a764:	69a1      	ldr	r1, [r4, #24]
1005a766:	f006 fd90 	bl	1006128a <Mem_Buff_block_copy>
1005a76a:	6160      	str	r0, [r4, #20]
1005a76c:	7325      	strb	r5, [r4, #12]
1005a76e:	4b06      	ldr	r3, [pc, #24]	@ (1005a788 <__arm_cp.8_0>)
1005a770:	6818      	ldr	r0, [r3, #0]
1005a772:	59c0      	ldr	r0, [r0, r7]
1005a774:	1830      	adds	r0, r6, r0
1005a776:	9901      	ldr	r1, [sp, #4]
1005a778:	9a02      	ldr	r2, [sp, #8]
1005a77a:	4311      	orrs	r1, r2
1005a77c:	7081      	strb	r1, [r0, #2]
1005a77e:	6818      	ldr	r0, [r3, #0]
1005a780:	59c0      	ldr	r0, [r0, r7]
1005a782:	1830      	adds	r0, r6, r0
1005a784:	70c5      	strb	r5, [r0, #3]
1005a786:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005a788 <__arm_cp.8_0>:
1005a788:	20002468 	.word	0x20002468

1005a78c <llc_conn_enhanced_get_latency>:
1005a78c:	b570      	push	{r4, r5, r6, lr}
1005a78e:	4605      	mov	r5, r0
1005a790:	202c      	movs	r0, #44	@ 0x2c
1005a792:	5c28      	ldrb	r0, [r5, r0]
1005a794:	2401      	movs	r4, #1
1005a796:	2803      	cmp	r0, #3
1005a798:	d13f      	bne.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a79a:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a79c:	2800      	cmp	r0, #0
1005a79e:	d03c      	beq.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a7a0:	4628      	mov	r0, r5
1005a7a2:	f7f9 fab6 	bl	10053d12 <BLEPLAT_CNTR_PacketGetDataPtr>
1005a7a6:	4629      	mov	r1, r5
1005a7a8:	3128      	adds	r1, #40	@ 0x28
1005a7aa:	4288      	cmp	r0, r1
1005a7ac:	d135      	bne.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a7ae:	462e      	mov	r6, r5
1005a7b0:	362c      	adds	r6, #44	@ 0x2c
1005a7b2:	205c      	movs	r0, #92	@ 0x5c
1005a7b4:	5c30      	ldrb	r0, [r6, r0]
1005a7b6:	0600      	lsls	r0, r0, #24
1005a7b8:	0f80      	lsrs	r0, r0, #30
1005a7ba:	d12e      	bne.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a7bc:	20ff      	movs	r0, #255	@ 0xff
1005a7be:	3008      	adds	r0, #8
1005a7c0:	1828      	adds	r0, r5, r0
1005a7c2:	7800      	ldrb	r0, [r0, #0]
1005a7c4:	0780      	lsls	r0, r0, #30
1005a7c6:	d428      	bmi.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a7c8:	208f      	movs	r0, #143	@ 0x8f
1005a7ca:	0040      	lsls	r0, r0, #1
1005a7cc:	1828      	adds	r0, r5, r0
1005a7ce:	8800      	ldrh	r0, [r0, #0]
1005a7d0:	2800      	cmp	r0, #0
1005a7d2:	d122      	bne.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a7d4:	7930      	ldrb	r0, [r6, #4]
1005a7d6:	2401      	movs	r4, #1
1005a7d8:	4621      	mov	r1, r4
1005a7da:	f001 fbfc 	bl	1005bfd6 <LL_cpe_get_active_status>
1005a7de:	2800      	cmp	r0, #0
1005a7e0:	d105      	bne.n	1005a7ee <llc_conn_enhanced_get_latency+0x62>
1005a7e2:	7930      	ldrb	r0, [r6, #4]
1005a7e4:	2100      	movs	r1, #0
1005a7e6:	f001 fbf6 	bl	1005bfd6 <LL_cpe_get_active_status>
1005a7ea:	2800      	cmp	r0, #0
1005a7ec:	d013      	beq.n	1005a816 <llc_conn_enhanced_get_latency+0x8a>
1005a7ee:	4628      	mov	r0, r5
1005a7f0:	3098      	adds	r0, #152	@ 0x98
1005a7f2:	8841      	ldrh	r1, [r0, #2]
1005a7f4:	07c9      	lsls	r1, r1, #31
1005a7f6:	d010      	beq.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a7f8:	8af1      	ldrh	r1, [r6, #22]
1005a7fa:	8800      	ldrh	r0, [r0, #0]
1005a7fc:	1a40      	subs	r0, r0, r1
1005a7fe:	b281      	uxth	r1, r0
1005a800:	2902      	cmp	r1, #2
1005a802:	d30a      	bcc.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a804:	1e44      	subs	r4, r0, #1
1005a806:	b2a1      	uxth	r1, r4
1005a808:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a80a:	1c40      	adds	r0, r0, #1
1005a80c:	b282      	uxth	r2, r0
1005a80e:	4291      	cmp	r1, r2
1005a810:	d303      	bcc.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a812:	4604      	mov	r4, r0
1005a814:	e001      	b.n	1005a81a <llc_conn_enhanced_get_latency+0x8e>
1005a816:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a818:	1c44      	adds	r4, r0, #1
1005a81a:	b2a0      	uxth	r0, r4
1005a81c:	bd70      	pop	{r4, r5, r6, pc}
	...

1005a820 <llc_conn_get_conn_idx>:
1005a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a822:	4604      	mov	r4, r0
1005a824:	25ff      	movs	r5, #255	@ 0xff
1005a826:	480a      	ldr	r0, [pc, #40]	@ (1005a850 <__arm_cp.13_0>)
1005a828:	4284      	cmp	r4, r0
1005a82a:	d00f      	beq.n	1005a84c <llc_conn_get_conn_idx+0x2c>
1005a82c:	2600      	movs	r6, #0
1005a82e:	4f09      	ldr	r7, [pc, #36]	@ (1005a854 <__arm_cp.13_1>)
1005a830:	6838      	ldr	r0, [r7, #0]
1005a832:	2134      	movs	r1, #52	@ 0x34
1005a834:	5c41      	ldrb	r1, [r0, r1]
1005a836:	b2f0      	uxtb	r0, r6
1005a838:	4288      	cmp	r0, r1
1005a83a:	d207      	bcs.n	1005a84c <llc_conn_get_conn_idx+0x2c>
1005a83c:	f7ff fd76 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005a840:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005a842:	42a0      	cmp	r0, r4
1005a844:	d001      	beq.n	1005a84a <llc_conn_get_conn_idx+0x2a>
1005a846:	1c76      	adds	r6, r6, #1
1005a848:	e7f2      	b.n	1005a830 <llc_conn_get_conn_idx+0x10>
1005a84a:	4635      	mov	r5, r6
1005a84c:	b2e8      	uxtb	r0, r5
1005a84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a850 <__arm_cp.13_0>:
1005a850:	0000ffff 	.word	0x0000ffff

1005a854 <__arm_cp.13_1>:
1005a854:	20002414 	.word	0x20002414

1005a858 <llc_conn_get_ctrl_pdu_data_p>:
1005a858:	0089      	lsls	r1, r1, #2
1005a85a:	1840      	adds	r0, r0, r1
1005a85c:	2190      	movs	r1, #144	@ 0x90
1005a85e:	5840      	ldr	r0, [r0, r1]
1005a860:	1c80      	adds	r0, r0, #2
1005a862:	4770      	bx	lr

1005a864 <llc_conn_get_enc_on>:
1005a864:	2900      	cmp	r1, #0
1005a866:	d001      	beq.n	1005a86c <llc_conn_get_enc_on+0x8>
1005a868:	2102      	movs	r1, #2
1005a86a:	e000      	b.n	1005a86e <llc_conn_get_enc_on+0xa>
1005a86c:	2103      	movs	r1, #3
1005a86e:	2288      	movs	r2, #136	@ 0x88
1005a870:	5882      	ldr	r2, [r0, r2]
1005a872:	40ca      	lsrs	r2, r1
1005a874:	2001      	movs	r0, #1
1005a876:	4010      	ands	r0, r2
1005a878:	4770      	bx	lr

1005a87a <llc_conn_get_instant_passed>:
1005a87a:	219a      	movs	r1, #154	@ 0x9a
1005a87c:	5a40      	ldrh	r0, [r0, r1]
1005a87e:	0740      	lsls	r0, r0, #29
1005a880:	0fc0      	lsrs	r0, r0, #31
1005a882:	4770      	bx	lr

1005a884 <llc_conn_get_instant_reached>:
1005a884:	219a      	movs	r1, #154	@ 0x9a
1005a886:	5a40      	ldrh	r0, [r0, r1]
1005a888:	0780      	lsls	r0, r0, #30
1005a88a:	0fc0      	lsrs	r0, r0, #31
1005a88c:	4770      	bx	lr

1005a88e <llc_conn_get_rx_ctrl_pdu_full>:
1005a88e:	2190      	movs	r1, #144	@ 0x90
1005a890:	5840      	ldr	r0, [r0, r1]
1005a892:	8801      	ldrh	r1, [r0, #0]
1005a894:	2001      	movs	r0, #1
1005a896:	4008      	ands	r0, r1
1005a898:	4770      	bx	lr

1005a89a <llc_conn_get_rx_acl_blocked>:
1005a89a:	2194      	movs	r1, #148	@ 0x94
1005a89c:	5840      	ldr	r0, [r0, r1]
1005a89e:	8800      	ldrh	r0, [r0, #0]
1005a8a0:	05c0      	lsls	r0, r0, #23
1005a8a2:	0fc0      	lsrs	r0, r0, #31
1005a8a4:	4770      	bx	lr

1005a8a6 <llc_conn_get_tx_acl_blocked>:
1005a8a6:	2194      	movs	r1, #148	@ 0x94
1005a8a8:	5840      	ldr	r0, [r0, r1]
1005a8aa:	8800      	ldrh	r0, [r0, #0]
1005a8ac:	b2c0      	uxtb	r0, r0
1005a8ae:	09c0      	lsrs	r0, r0, #7
1005a8b0:	4770      	bx	lr

1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>:
1005a8b2:	2194      	movs	r1, #148	@ 0x94
1005a8b4:	5840      	ldr	r0, [r0, r1]
1005a8b6:	8801      	ldrh	r1, [r0, #0]
1005a8b8:	2003      	movs	r0, #3
1005a8ba:	4008      	ands	r0, r1
1005a8bc:	4770      	bx	lr
	...

1005a8c0 <llc_conn_guard_time_for_close_conn_event>:
1005a8c0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a8c2:	4607      	mov	r7, r0
1005a8c4:	2441      	movs	r4, #65	@ 0x41
1005a8c6:	5d00      	ldrb	r0, [r0, r4]
1005a8c8:	f7f9 fcb0 	bl	1005422c <BLEPLAT_CNTR_SmGetTxPhy>
1005a8cc:	4605      	mov	r5, r0
1005a8ce:	5d38      	ldrb	r0, [r7, r4]
1005a8d0:	f7f9 fc9b 	bl	1005420a <BLEPLAT_CNTR_SmGetRxPhy>
1005a8d4:	23b6      	movs	r3, #182	@ 0xb6
1005a8d6:	1e6c      	subs	r4, r5, #1
1005a8d8:	b2e1      	uxtb	r1, r4
1005a8da:	9702      	str	r7, [sp, #8]
1005a8dc:	37b6      	adds	r7, #182	@ 0xb6
1005a8de:	2570      	movs	r5, #112	@ 0x70
1005a8e0:	2603      	movs	r6, #3
1005a8e2:	2905      	cmp	r1, #5
1005a8e4:	4632      	mov	r2, r6
1005a8e6:	9501      	str	r5, [sp, #4]
1005a8e8:	4629      	mov	r1, r5
1005a8ea:	d805      	bhi.n	1005a8f8 <llc_conn_guard_time_for_close_conn_event+0x38>
1005a8ec:	b261      	sxtb	r1, r4
1005a8ee:	008a      	lsls	r2, r1, #2
1005a8f0:	4919      	ldr	r1, [pc, #100]	@ (1005a958 <__arm_cp.22_0>)
1005a8f2:	5889      	ldr	r1, [r1, r2]
1005a8f4:	4c19      	ldr	r4, [pc, #100]	@ (1005a95c <__arm_cp.22_1>)
1005a8f6:	58a2      	ldr	r2, [r4, r2]
1005a8f8:	9c02      	ldr	r4, [sp, #8]
1005a8fa:	5ae3      	ldrh	r3, [r4, r3]
1005a8fc:	887c      	ldrh	r4, [r7, #2]
1005a8fe:	1e40      	subs	r0, r0, #1
1005a900:	b2c5      	uxtb	r5, r0
1005a902:	2d05      	cmp	r5, #5
1005a904:	d806      	bhi.n	1005a914 <llc_conn_guard_time_for_close_conn_event+0x54>
1005a906:	b240      	sxtb	r0, r0
1005a908:	0080      	lsls	r0, r0, #2
1005a90a:	4d13      	ldr	r5, [pc, #76]	@ (1005a958 <__arm_cp.22_0>)
1005a90c:	582d      	ldr	r5, [r5, r0]
1005a90e:	9501      	str	r5, [sp, #4]
1005a910:	4d12      	ldr	r5, [pc, #72]	@ (1005a95c <__arm_cp.22_1>)
1005a912:	582e      	ldr	r6, [r5, r0]
1005a914:	4093      	lsls	r3, r2
1005a916:	1858      	adds	r0, r3, r1
1005a918:	0200      	lsls	r0, r0, #8
1005a91a:	2147      	movs	r1, #71	@ 0x47
1005a91c:	00cd      	lsls	r5, r1, #3
1005a91e:	1940      	adds	r0, r0, r5
1005a920:	490f      	ldr	r1, [pc, #60]	@ (1005a960 <__arm_cp.22_2>)
1005a922:	f7e5 fc8d 	bl	10040240 <__udivsi3>
1005a926:	9000      	str	r0, [sp, #0]
1005a928:	40b4      	lsls	r4, r6
1005a92a:	9801      	ldr	r0, [sp, #4]
1005a92c:	1820      	adds	r0, r4, r0
1005a92e:	0200      	lsls	r0, r0, #8
1005a930:	1940      	adds	r0, r0, r5
1005a932:	490b      	ldr	r1, [pc, #44]	@ (1005a960 <__arm_cp.22_2>)
1005a934:	f7e5 fc84 	bl	10040240 <__udivsi3>
1005a938:	4606      	mov	r6, r0
1005a93a:	88fc      	ldrh	r4, [r7, #6]
1005a93c:	f005 fec2 	bl	100606c4 <LL_sched_engine_return_actual_scheduler_margin>
1005a940:	9900      	ldr	r1, [sp, #0]
1005a942:	1808      	adds	r0, r1, r0
1005a944:	b2b1      	uxth	r1, r6
1005a946:	428c      	cmp	r4, r1
1005a948:	d800      	bhi.n	1005a94c <llc_conn_guard_time_for_close_conn_event+0x8c>
1005a94a:	4621      	mov	r1, r4
1005a94c:	1840      	adds	r0, r0, r1
1005a94e:	30cd      	adds	r0, #205	@ 0xcd
1005a950:	9902      	ldr	r1, [sp, #8]
1005a952:	6748      	str	r0, [r1, #116]	@ 0x74
1005a954:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a956:	46c0      	nop			@ (mov r8, r8)

1005a958 <__arm_cp.22_0>:
1005a958:	10069b78 	.word	0x10069b78

1005a95c <__arm_cp.22_1>:
1005a95c:	10069b60 	.word	0x10069b60

1005a960 <__arm_cp.22_2>:
1005a960:	00000271 	.word	0x00000271

1005a964 <llc_conn_list_add_address>:
1005a964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a966:	460a      	mov	r2, r1
1005a968:	4601      	mov	r1, r0
1005a96a:	4807      	ldr	r0, [pc, #28]	@ (1005a988 <__arm_cp.23_0>)
1005a96c:	6800      	ldr	r0, [r0, #0]
1005a96e:	239c      	movs	r3, #156	@ 0x9c
1005a970:	58c0      	ldr	r0, [r0, r3]
1005a972:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a974:	6800      	ldr	r0, [r0, #0]
1005a976:	ab02      	add	r3, sp, #8
1005a978:	9301      	str	r3, [sp, #4]
1005a97a:	ab03      	add	r3, sp, #12
1005a97c:	9300      	str	r3, [sp, #0]
1005a97e:	3024      	adds	r0, #36	@ 0x24
1005a980:	2301      	movs	r3, #1
1005a982:	f008 fb8b 	bl	1006309c <addr8_list_add>
1005a986:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005a988 <__arm_cp.23_0>:
1005a988:	20002468 	.word	0x20002468

1005a98c <llc_conn_list_reset>:
1005a98c:	b580      	push	{r7, lr}
1005a98e:	4805      	ldr	r0, [pc, #20]	@ (1005a9a4 <__arm_cp.24_0>)
1005a990:	6800      	ldr	r0, [r0, #0]
1005a992:	219c      	movs	r1, #156	@ 0x9c
1005a994:	5840      	ldr	r0, [r0, r1]
1005a996:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a998:	6800      	ldr	r0, [r0, #0]
1005a99a:	3024      	adds	r0, #36	@ 0x24
1005a99c:	f008 fbfd 	bl	1006319a <addr8_list_clear>
1005a9a0:	bd80      	pop	{r7, pc}
1005a9a2:	46c0      	nop			@ (mov r8, r8)

1005a9a4 <__arm_cp.24_0>:
1005a9a4:	20002468 	.word	0x20002468

1005a9a8 <llc_conn_list_remove_address>:
1005a9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a9aa:	460a      	mov	r2, r1
1005a9ac:	4601      	mov	r1, r0
1005a9ae:	4807      	ldr	r0, [pc, #28]	@ (1005a9cc <__arm_cp.25_0>)
1005a9b0:	6800      	ldr	r0, [r0, #0]
1005a9b2:	239c      	movs	r3, #156	@ 0x9c
1005a9b4:	58c0      	ldr	r0, [r0, r3]
1005a9b6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a9b8:	6800      	ldr	r0, [r0, #0]
1005a9ba:	ab02      	add	r3, sp, #8
1005a9bc:	9301      	str	r3, [sp, #4]
1005a9be:	ab03      	add	r3, sp, #12
1005a9c0:	9300      	str	r3, [sp, #0]
1005a9c2:	3024      	adds	r0, #36	@ 0x24
1005a9c4:	2301      	movs	r3, #1
1005a9c6:	f008 fbac 	bl	10063122 <addr8_list_remove_by_addr>
1005a9ca:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005a9cc <__arm_cp.25_0>:
1005a9cc:	20002468 	.word	0x20002468

1005a9d0 <llc_conn_list_search_address>:
1005a9d0:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005a9d2:	460c      	mov	r4, r1
1005a9d4:	4605      	mov	r5, r0
1005a9d6:	f7ff fc9f 	bl	1005a318 <llc_conn_get_cntxt_p>
1005a9da:	2136      	movs	r1, #54	@ 0x36
1005a9dc:	5c40      	ldrb	r0, [r0, r1]
1005a9de:	2800      	cmp	r0, #0
1005a9e0:	d001      	beq.n	1005a9e6 <llc_conn_list_search_address+0x16>
1005a9e2:	2000      	movs	r0, #0
1005a9e4:	e011      	b.n	1005aa0a <llc_conn_list_search_address+0x3a>
1005a9e6:	480a      	ldr	r0, [pc, #40]	@ (1005aa10 <__arm_cp.26_0>)
1005a9e8:	6800      	ldr	r0, [r0, #0]
1005a9ea:	219c      	movs	r1, #156	@ 0x9c
1005a9ec:	5840      	ldr	r0, [r0, r1]
1005a9ee:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a9f0:	6801      	ldr	r1, [r0, #0]
1005a9f2:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1005a9f4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1005a9f6:	aa03      	add	r2, sp, #12
1005a9f8:	2301      	movs	r3, #1
1005a9fa:	9300      	str	r3, [sp, #0]
1005a9fc:	9201      	str	r2, [sp, #4]
1005a9fe:	22fe      	movs	r2, #254	@ 0xfe
1005aa00:	4395      	bics	r5, r2
1005aa02:	462a      	mov	r2, r5
1005aa04:	4623      	mov	r3, r4
1005aa06:	f008 fae5 	bl	10062fd4 <addr8_list_search>
1005aa0a:	b004      	add	sp, #16
1005aa0c:	bdb0      	pop	{r4, r5, r7, pc}
1005aa0e:	46c0      	nop			@ (mov r8, r8)

1005aa10 <__arm_cp.26_0>:
1005aa10:	20002468 	.word	0x20002468

1005aa14 <llc_conn_push_adv_set_terminated_event>:
1005aa14:	b570      	push	{r4, r5, r6, lr}
1005aa16:	460d      	mov	r5, r1
1005aa18:	4604      	mov	r4, r0
1005aa1a:	481a      	ldr	r0, [pc, #104]	@ (1005aa84 <__arm_cp.27_0>)
1005aa1c:	6800      	ldr	r0, [r0, #0]
1005aa1e:	212c      	movs	r1, #44	@ 0x2c
1005aa20:	5c40      	ldrb	r0, [r0, r1]
1005aa22:	07c0      	lsls	r0, r0, #31
1005aa24:	0ec1      	lsrs	r1, r0, #27
1005aa26:	d101      	bne.n	1005aa2c <llc_conn_push_adv_set_terminated_event+0x18>
1005aa28:	2211      	movs	r2, #17
1005aa2a:	e00a      	b.n	1005aa42 <llc_conn_push_adv_set_terminated_event+0x2e>
1005aa2c:	4816      	ldr	r0, [pc, #88]	@ (1005aa88 <__arm_cp.27_1>)
1005aa2e:	6800      	ldr	r0, [r0, #0]
1005aa30:	223d      	movs	r2, #61	@ 0x3d
1005aa32:	5c82      	ldrb	r2, [r0, r2]
1005aa34:	0692      	lsls	r2, r2, #26
1005aa36:	d524      	bpl.n	1005aa82 <llc_conn_push_adv_set_terminated_event+0x6e>
1005aa38:	303d      	adds	r0, #61	@ 0x3d
1005aa3a:	7ac0      	ldrb	r0, [r0, #11]
1005aa3c:	0780      	lsls	r0, r0, #30
1005aa3e:	d520      	bpl.n	1005aa82 <llc_conn_push_adv_set_terminated_event+0x6e>
1005aa40:	221f      	movs	r2, #31
1005aa42:	204e      	movs	r0, #78	@ 0x4e
1005aa44:	43c0      	mvns	r0, r0
1005aa46:	4041      	eors	r1, r0
1005aa48:	4810      	ldr	r0, [pc, #64]	@ (1005aa8c <__arm_cp.27_2>)
1005aa4a:	6800      	ldr	r0, [r0, #0]
1005aa4c:	6940      	ldr	r0, [r0, #20]
1005aa4e:	b2ce      	uxtb	r6, r1
1005aa50:	2303      	movs	r3, #3
1005aa52:	4631      	mov	r1, r6
1005aa54:	f7fa fd44 	bl	100554e0 <aci_event_fifo_push_header>
1005aa58:	2800      	cmp	r0, #0
1005aa5a:	d012      	beq.n	1005aa82 <llc_conn_push_adv_set_terminated_event+0x6e>
1005aa5c:	4601      	mov	r1, r0
1005aa5e:	7284      	strb	r4, [r0, #10]
1005aa60:	2000      	movs	r0, #0
1005aa62:	7308      	strb	r0, [r1, #12]
1005aa64:	724d      	strb	r5, [r1, #9]
1005aa66:	7208      	strb	r0, [r1, #8]
1005aa68:	2012      	movs	r0, #18
1005aa6a:	71c8      	strb	r0, [r1, #7]
1005aa6c:	2006      	movs	r0, #6
1005aa6e:	7188      	strb	r0, [r1, #6]
1005aa70:	203e      	movs	r0, #62	@ 0x3e
1005aa72:	7148      	strb	r0, [r1, #5]
1005aa74:	2004      	movs	r0, #4
1005aa76:	7108      	strb	r0, [r1, #4]
1005aa78:	0a20      	lsrs	r0, r4, #8
1005aa7a:	72c8      	strb	r0, [r1, #11]
1005aa7c:	4630      	mov	r0, r6
1005aa7e:	f7fa fdcc 	bl	1005561a <aci_event_fifo_push>
1005aa82:	bd70      	pop	{r4, r5, r6, pc}

1005aa84 <__arm_cp.27_0>:
1005aa84:	20002414 	.word	0x20002414

1005aa88 <__arm_cp.27_1>:
1005aa88:	20002468 	.word	0x20002468

1005aa8c <__arm_cp.27_2>:
1005aa8c:	20002418 	.word	0x20002418

1005aa90 <llc_conn_push_connection_complete_event>:
1005aa90:	b5f0      	push	{r4, r5, r6, r7, lr}
1005aa92:	b08d      	sub	sp, #52	@ 0x34
1005aa94:	4604      	mov	r4, r0
1005aa96:	4895      	ldr	r0, [pc, #596]	@ (1005acec <__arm_cp.28_0>)
1005aa98:	6800      	ldr	r0, [r0, #0]
1005aa9a:	212c      	movs	r1, #44	@ 0x2c
1005aa9c:	5c40      	ldrb	r0, [r0, r1]
1005aa9e:	07c0      	lsls	r0, r0, #31
1005aaa0:	0ec5      	lsrs	r5, r0, #27
1005aaa2:	206f      	movs	r0, #111	@ 0x6f
1005aaa4:	43c6      	mvns	r6, r0
1005aaa6:	406e      	eors	r6, r5
1005aaa8:	f001 f9ba 	bl	1005be20 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005aaac:	4990      	ldr	r1, [pc, #576]	@ (1005acf0 <__arm_cp.28_1>)
1005aaae:	6809      	ldr	r1, [r1, #0]
1005aab0:	223d      	movs	r2, #61	@ 0x3d
1005aab2:	5c8b      	ldrb	r3, [r1, r2]
1005aab4:	2220      	movs	r2, #32
1005aab6:	4013      	ands	r3, r2
1005aab8:	313d      	adds	r1, #61	@ 0x3d
1005aaba:	2800      	cmp	r0, #0
1005aabc:	d066      	beq.n	1005ab8c <llc_conn_push_connection_complete_event+0xfc>
1005aabe:	2b00      	cmp	r3, #0
1005aac0:	d100      	bne.n	1005aac4 <llc_conn_push_connection_complete_event+0x34>
1005aac2:	e110      	b.n	1005ace6 <llc_conn_push_connection_complete_event+0x256>
1005aac4:	7b88      	ldrb	r0, [r1, #14]
1005aac6:	07c0      	lsls	r0, r0, #31
1005aac8:	d063      	beq.n	1005ab92 <llc_conn_push_connection_complete_event+0x102>
1005aaca:	2d00      	cmp	r5, #0
1005aacc:	d100      	bne.n	1005aad0 <llc_conn_push_connection_complete_event+0x40>
1005aace:	2212      	movs	r2, #18
1005aad0:	8aa0      	ldrh	r0, [r4, #20]
1005aad2:	900c      	str	r0, [sp, #48]	@ 0x30
1005aad4:	7da7      	ldrb	r7, [r4, #22]
1005aad6:	7de0      	ldrb	r0, [r4, #23]
1005aad8:	9008      	str	r0, [sp, #32]
1005aada:	8a60      	ldrh	r0, [r4, #18]
1005aadc:	900b      	str	r0, [sp, #44]	@ 0x2c
1005aade:	8a20      	ldrh	r0, [r4, #16]
1005aae0:	9009      	str	r0, [sp, #36]	@ 0x24
1005aae2:	89a0      	ldrh	r0, [r4, #12]
1005aae4:	900a      	str	r0, [sp, #40]	@ 0x28
1005aae6:	6820      	ldr	r0, [r4, #0]
1005aae8:	9005      	str	r0, [sp, #20]
1005aaea:	6860      	ldr	r0, [r4, #4]
1005aaec:	9007      	str	r0, [sp, #28]
1005aaee:	68a0      	ldr	r0, [r4, #8]
1005aaf0:	9006      	str	r0, [sp, #24]
1005aaf2:	7e20      	ldrb	r0, [r4, #24]
1005aaf4:	9003      	str	r0, [sp, #12]
1005aaf6:	7e60      	ldrb	r0, [r4, #25]
1005aaf8:	9004      	str	r0, [sp, #16]
1005aafa:	89e5      	ldrh	r5, [r4, #14]
1005aafc:	7ea0      	ldrb	r0, [r4, #26]
1005aafe:	9002      	str	r0, [sp, #8]
1005ab00:	487c      	ldr	r0, [pc, #496]	@ (1005acf4 <__arm_cp.28_2>)
1005ab02:	6800      	ldr	r0, [r0, #0]
1005ab04:	6900      	ldr	r0, [r0, #16]
1005ab06:	b2f1      	uxtb	r1, r6
1005ab08:	230a      	movs	r3, #10
1005ab0a:	f7fa fce9 	bl	100554e0 <aci_event_fifo_push_header>
1005ab0e:	2800      	cmp	r0, #0
1005ab10:	d100      	bne.n	1005ab14 <llc_conn_push_connection_complete_event+0x84>
1005ab12:	e0e8      	b.n	1005ace6 <llc_conn_push_connection_complete_event+0x256>
1005ab14:	4604      	mov	r4, r0
1005ab16:	9701      	str	r7, [sp, #4]
1005ab18:	4607      	mov	r7, r0
1005ab1a:	371f      	adds	r7, #31
1005ab1c:	7245      	strb	r5, [r0, #9]
1005ab1e:	9803      	ldr	r0, [sp, #12]
1005ab20:	7320      	strb	r0, [r4, #12]
1005ab22:	9804      	ldr	r0, [sp, #16]
1005ab24:	72e0      	strb	r0, [r4, #11]
1005ab26:	9802      	ldr	r0, [sp, #8]
1005ab28:	7220      	strb	r0, [r4, #8]
1005ab2a:	0a28      	lsrs	r0, r5, #8
1005ab2c:	72a0      	strb	r0, [r4, #10]
1005ab2e:	4620      	mov	r0, r4
1005ab30:	300d      	adds	r0, #13
1005ab32:	2506      	movs	r5, #6
1005ab34:	9905      	ldr	r1, [sp, #20]
1005ab36:	462a      	mov	r2, r5
1005ab38:	4b6f      	ldr	r3, [pc, #444]	@ (1005acf8 <__arm_cp.28_3>)
1005ab3a:	4798      	blx	r3
1005ab3c:	4620      	mov	r0, r4
1005ab3e:	3013      	adds	r0, #19
1005ab40:	9906      	ldr	r1, [sp, #24]
1005ab42:	462a      	mov	r2, r5
1005ab44:	4b6c      	ldr	r3, [pc, #432]	@ (1005acf8 <__arm_cp.28_3>)
1005ab46:	4798      	blx	r3
1005ab48:	4b6b      	ldr	r3, [pc, #428]	@ (1005acf8 <__arm_cp.28_3>)
1005ab4a:	4620      	mov	r0, r4
1005ab4c:	3019      	adds	r0, #25
1005ab4e:	9907      	ldr	r1, [sp, #28]
1005ab50:	462a      	mov	r2, r5
1005ab52:	4798      	blx	r3
1005ab54:	2021      	movs	r0, #33	@ 0x21
1005ab56:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005ab58:	5421      	strb	r1, [r4, r0]
1005ab5a:	2025      	movs	r0, #37	@ 0x25
1005ab5c:	9a08      	ldr	r2, [sp, #32]
1005ab5e:	5422      	strb	r2, [r4, r0]
1005ab60:	4620      	mov	r0, r4
1005ab62:	3021      	adds	r0, #33	@ 0x21
1005ab64:	0a09      	lsrs	r1, r1, #8
1005ab66:	7041      	strb	r1, [r0, #1]
1005ab68:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005ab6a:	0a08      	lsrs	r0, r1, #8
1005ab6c:	7078      	strb	r0, [r7, #1]
1005ab6e:	7039      	strb	r1, [r7, #0]
1005ab70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005ab72:	0a08      	lsrs	r0, r1, #8
1005ab74:	7178      	strb	r0, [r7, #5]
1005ab76:	7139      	strb	r1, [r7, #4]
1005ab78:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005ab7a:	0a08      	lsrs	r0, r1, #8
1005ab7c:	7278      	strb	r0, [r7, #9]
1005ab7e:	7239      	strb	r1, [r7, #8]
1005ab80:	9801      	ldr	r0, [sp, #4]
1005ab82:	71f8      	strb	r0, [r7, #7]
1005ab84:	1d20      	adds	r0, r4, #4
1005ab86:	2129      	movs	r1, #41	@ 0x29
1005ab88:	2222      	movs	r2, #34	@ 0x22
1005ab8a:	e0a2      	b.n	1005acd2 <llc_conn_push_connection_complete_event+0x242>
1005ab8c:	2b00      	cmp	r3, #0
1005ab8e:	d100      	bne.n	1005ab92 <llc_conn_push_connection_complete_event+0x102>
1005ab90:	e0a9      	b.n	1005ace6 <llc_conn_push_connection_complete_event+0x256>
1005ab92:	7a88      	ldrb	r0, [r1, #10]
1005ab94:	0780      	lsls	r0, r0, #30
1005ab96:	d445      	bmi.n	1005ac24 <llc_conn_push_connection_complete_event+0x194>
1005ab98:	7a48      	ldrb	r0, [r1, #9]
1005ab9a:	07c0      	lsls	r0, r0, #31
1005ab9c:	d100      	bne.n	1005aba0 <llc_conn_push_connection_complete_event+0x110>
1005ab9e:	e0a2      	b.n	1005ace6 <llc_conn_push_connection_complete_event+0x256>
1005aba0:	2008      	movs	r0, #8
1005aba2:	4305      	orrs	r5, r0
1005aba4:	7de0      	ldrb	r0, [r4, #23]
1005aba6:	900c      	str	r0, [sp, #48]	@ 0x30
1005aba8:	8a60      	ldrh	r0, [r4, #18]
1005abaa:	900b      	str	r0, [sp, #44]	@ 0x2c
1005abac:	8a20      	ldrh	r0, [r4, #16]
1005abae:	9009      	str	r0, [sp, #36]	@ 0x24
1005abb0:	89a0      	ldrh	r0, [r4, #12]
1005abb2:	900a      	str	r0, [sp, #40]	@ 0x28
1005abb4:	6820      	ldr	r0, [r4, #0]
1005abb6:	9008      	str	r0, [sp, #32]
1005abb8:	7e20      	ldrb	r0, [r4, #24]
1005abba:	9006      	str	r0, [sp, #24]
1005abbc:	7e60      	ldrb	r0, [r4, #25]
1005abbe:	9007      	str	r0, [sp, #28]
1005abc0:	89e7      	ldrh	r7, [r4, #14]
1005abc2:	7ea0      	ldrb	r0, [r4, #26]
1005abc4:	9005      	str	r0, [sp, #20]
1005abc6:	484b      	ldr	r0, [pc, #300]	@ (1005acf4 <__arm_cp.28_2>)
1005abc8:	6800      	ldr	r0, [r0, #0]
1005abca:	6900      	ldr	r0, [r0, #16]
1005abcc:	b2f1      	uxtb	r1, r6
1005abce:	2306      	movs	r3, #6
1005abd0:	462a      	mov	r2, r5
1005abd2:	f7fa fc85 	bl	100554e0 <aci_event_fifo_push_header>
1005abd6:	2800      	cmp	r0, #0
1005abd8:	d100      	bne.n	1005abdc <llc_conn_push_connection_complete_event+0x14c>
1005abda:	e084      	b.n	1005ace6 <llc_conn_push_connection_complete_event+0x256>
1005abdc:	4604      	mov	r4, r0
1005abde:	4605      	mov	r5, r0
1005abe0:	3513      	adds	r5, #19
1005abe2:	7247      	strb	r7, [r0, #9]
1005abe4:	9806      	ldr	r0, [sp, #24]
1005abe6:	7320      	strb	r0, [r4, #12]
1005abe8:	9807      	ldr	r0, [sp, #28]
1005abea:	72e0      	strb	r0, [r4, #11]
1005abec:	9805      	ldr	r0, [sp, #20]
1005abee:	7220      	strb	r0, [r4, #8]
1005abf0:	0a38      	lsrs	r0, r7, #8
1005abf2:	72a0      	strb	r0, [r4, #10]
1005abf4:	4620      	mov	r0, r4
1005abf6:	300d      	adds	r0, #13
1005abf8:	2206      	movs	r2, #6
1005abfa:	9908      	ldr	r1, [sp, #32]
1005abfc:	f7f7 ff24 	bl	10052a48 <BLEPLAT_MemCpy>
1005ac00:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005ac02:	0a08      	lsrs	r0, r1, #8
1005ac04:	75a0      	strb	r0, [r4, #22]
1005ac06:	7561      	strb	r1, [r4, #21]
1005ac08:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005ac0a:	0a08      	lsrs	r0, r1, #8
1005ac0c:	7068      	strb	r0, [r5, #1]
1005ac0e:	7029      	strb	r1, [r5, #0]
1005ac10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005ac12:	0a08      	lsrs	r0, r1, #8
1005ac14:	7168      	strb	r0, [r5, #5]
1005ac16:	7129      	strb	r1, [r5, #4]
1005ac18:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005ac1a:	7660      	strb	r0, [r4, #25]
1005ac1c:	1d20      	adds	r0, r4, #4
1005ac1e:	2101      	movs	r1, #1
1005ac20:	2213      	movs	r2, #19
1005ac22:	e056      	b.n	1005acd2 <llc_conn_push_connection_complete_event+0x242>
1005ac24:	2d00      	cmp	r5, #0
1005ac26:	d001      	beq.n	1005ac2c <llc_conn_push_connection_complete_event+0x19c>
1005ac28:	221c      	movs	r2, #28
1005ac2a:	e000      	b.n	1005ac2e <llc_conn_push_connection_complete_event+0x19e>
1005ac2c:	220d      	movs	r2, #13
1005ac2e:	7de0      	ldrb	r0, [r4, #23]
1005ac30:	900a      	str	r0, [sp, #40]	@ 0x28
1005ac32:	8a67      	ldrh	r7, [r4, #18]
1005ac34:	8a20      	ldrh	r0, [r4, #16]
1005ac36:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ac38:	89a0      	ldrh	r0, [r4, #12]
1005ac3a:	900c      	str	r0, [sp, #48]	@ 0x30
1005ac3c:	6820      	ldr	r0, [r4, #0]
1005ac3e:	9007      	str	r0, [sp, #28]
1005ac40:	6860      	ldr	r0, [r4, #4]
1005ac42:	9009      	str	r0, [sp, #36]	@ 0x24
1005ac44:	68a0      	ldr	r0, [r4, #8]
1005ac46:	9008      	str	r0, [sp, #32]
1005ac48:	7e20      	ldrb	r0, [r4, #24]
1005ac4a:	9005      	str	r0, [sp, #20]
1005ac4c:	7e60      	ldrb	r0, [r4, #25]
1005ac4e:	9006      	str	r0, [sp, #24]
1005ac50:	89e5      	ldrh	r5, [r4, #14]
1005ac52:	7ea0      	ldrb	r0, [r4, #26]
1005ac54:	9004      	str	r0, [sp, #16]
1005ac56:	4827      	ldr	r0, [pc, #156]	@ (1005acf4 <__arm_cp.28_2>)
1005ac58:	6800      	ldr	r0, [r0, #0]
1005ac5a:	6900      	ldr	r0, [r0, #16]
1005ac5c:	b2f1      	uxtb	r1, r6
1005ac5e:	2309      	movs	r3, #9
1005ac60:	f7fa fc3e 	bl	100554e0 <aci_event_fifo_push_header>
1005ac64:	2800      	cmp	r0, #0
1005ac66:	d03e      	beq.n	1005ace6 <llc_conn_push_connection_complete_event+0x256>
1005ac68:	4604      	mov	r4, r0
1005ac6a:	9703      	str	r7, [sp, #12]
1005ac6c:	4607      	mov	r7, r0
1005ac6e:	371f      	adds	r7, #31
1005ac70:	7245      	strb	r5, [r0, #9]
1005ac72:	9805      	ldr	r0, [sp, #20]
1005ac74:	7320      	strb	r0, [r4, #12]
1005ac76:	9806      	ldr	r0, [sp, #24]
1005ac78:	72e0      	strb	r0, [r4, #11]
1005ac7a:	9804      	ldr	r0, [sp, #16]
1005ac7c:	7220      	strb	r0, [r4, #8]
1005ac7e:	0a28      	lsrs	r0, r5, #8
1005ac80:	72a0      	strb	r0, [r4, #10]
1005ac82:	4620      	mov	r0, r4
1005ac84:	300d      	adds	r0, #13
1005ac86:	2506      	movs	r5, #6
1005ac88:	9907      	ldr	r1, [sp, #28]
1005ac8a:	462a      	mov	r2, r5
1005ac8c:	4b1a      	ldr	r3, [pc, #104]	@ (1005acf8 <__arm_cp.28_3>)
1005ac8e:	4798      	blx	r3
1005ac90:	4620      	mov	r0, r4
1005ac92:	3013      	adds	r0, #19
1005ac94:	9908      	ldr	r1, [sp, #32]
1005ac96:	462a      	mov	r2, r5
1005ac98:	4b17      	ldr	r3, [pc, #92]	@ (1005acf8 <__arm_cp.28_3>)
1005ac9a:	4798      	blx	r3
1005ac9c:	4b16      	ldr	r3, [pc, #88]	@ (1005acf8 <__arm_cp.28_3>)
1005ac9e:	4620      	mov	r0, r4
1005aca0:	3019      	adds	r0, #25
1005aca2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005aca4:	462a      	mov	r2, r5
1005aca6:	4798      	blx	r3
1005aca8:	2021      	movs	r0, #33	@ 0x21
1005acaa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005acac:	5422      	strb	r2, [r4, r0]
1005acae:	2025      	movs	r0, #37	@ 0x25
1005acb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005acb2:	5421      	strb	r1, [r4, r0]
1005acb4:	1d20      	adds	r0, r4, #4
1005acb6:	4621      	mov	r1, r4
1005acb8:	3121      	adds	r1, #33	@ 0x21
1005acba:	0a12      	lsrs	r2, r2, #8
1005acbc:	704a      	strb	r2, [r1, #1]
1005acbe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005acc0:	0a11      	lsrs	r1, r2, #8
1005acc2:	7079      	strb	r1, [r7, #1]
1005acc4:	703a      	strb	r2, [r7, #0]
1005acc6:	9a03      	ldr	r2, [sp, #12]
1005acc8:	0a11      	lsrs	r1, r2, #8
1005acca:	7179      	strb	r1, [r7, #5]
1005accc:	713a      	strb	r2, [r7, #4]
1005acce:	210a      	movs	r1, #10
1005acd0:	221f      	movs	r2, #31
1005acd2:	2304      	movs	r3, #4
1005acd4:	7123      	strb	r3, [r4, #4]
1005acd6:	233e      	movs	r3, #62	@ 0x3e
1005acd8:	7043      	strb	r3, [r0, #1]
1005acda:	71e1      	strb	r1, [r4, #7]
1005acdc:	71a2      	strb	r2, [r4, #6]
1005acde:	b2f0      	uxtb	r0, r6
1005ace0:	4621      	mov	r1, r4
1005ace2:	f7fa fc9a 	bl	1005561a <aci_event_fifo_push>
1005ace6:	b00d      	add	sp, #52	@ 0x34
1005ace8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005acea:	46c0      	nop			@ (mov r8, r8)

1005acec <__arm_cp.28_0>:
1005acec:	20002414 	.word	0x20002414

1005acf0 <__arm_cp.28_1>:
1005acf0:	20002468 	.word	0x20002468

1005acf4 <__arm_cp.28_2>:
1005acf4:	20002418 	.word	0x20002418

1005acf8 <__arm_cp.28_3>:
1005acf8:	10052a49 	.word	0x10052a49

1005acfc <llc_conn_push_csa_event>:
1005acfc:	b5b0      	push	{r4, r5, r7, lr}
1005acfe:	460d      	mov	r5, r1
1005ad00:	4604      	mov	r4, r0
1005ad02:	4812      	ldr	r0, [pc, #72]	@ (1005ad4c <__arm_cp.29_0>)
1005ad04:	6800      	ldr	r0, [r0, #0]
1005ad06:	213d      	movs	r1, #61	@ 0x3d
1005ad08:	5c41      	ldrb	r1, [r0, r1]
1005ad0a:	0689      	lsls	r1, r1, #26
1005ad0c:	d51c      	bpl.n	1005ad48 <llc_conn_push_csa_event+0x4c>
1005ad0e:	303d      	adds	r0, #61	@ 0x3d
1005ad10:	7ac0      	ldrb	r0, [r0, #11]
1005ad12:	0700      	lsls	r0, r0, #28
1005ad14:	d518      	bpl.n	1005ad48 <llc_conn_push_csa_event+0x4c>
1005ad16:	480e      	ldr	r0, [pc, #56]	@ (1005ad50 <__arm_cp.29_1>)
1005ad18:	6800      	ldr	r0, [r0, #0]
1005ad1a:	6940      	ldr	r0, [r0, #20]
1005ad1c:	21a1      	movs	r1, #161	@ 0xa1
1005ad1e:	222c      	movs	r2, #44	@ 0x2c
1005ad20:	2302      	movs	r3, #2
1005ad22:	f7fa fbdd 	bl	100554e0 <aci_event_fifo_push_header>
1005ad26:	2800      	cmp	r0, #0
1005ad28:	d00e      	beq.n	1005ad48 <llc_conn_push_csa_event+0x4c>
1005ad2a:	4601      	mov	r1, r0
1005ad2c:	7204      	strb	r4, [r0, #8]
1005ad2e:	7285      	strb	r5, [r0, #10]
1005ad30:	2014      	movs	r0, #20
1005ad32:	71c8      	strb	r0, [r1, #7]
1005ad34:	2004      	movs	r0, #4
1005ad36:	7188      	strb	r0, [r1, #6]
1005ad38:	223e      	movs	r2, #62	@ 0x3e
1005ad3a:	714a      	strb	r2, [r1, #5]
1005ad3c:	7108      	strb	r0, [r1, #4]
1005ad3e:	0a20      	lsrs	r0, r4, #8
1005ad40:	7248      	strb	r0, [r1, #9]
1005ad42:	20a1      	movs	r0, #161	@ 0xa1
1005ad44:	f7fa fc69 	bl	1005561a <aci_event_fifo_push>
1005ad48:	bdb0      	pop	{r4, r5, r7, pc}
1005ad4a:	46c0      	nop			@ (mov r8, r8)

1005ad4c <__arm_cp.29_0>:
1005ad4c:	20002468 	.word	0x20002468

1005ad50 <__arm_cp.29_1>:
1005ad50:	20002418 	.word	0x20002418

1005ad54 <llc_conn_set_chmap_params>:
1005ad54:	2398      	movs	r3, #152	@ 0x98
1005ad56:	52c2      	strh	r2, [r0, r3]
1005ad58:	3098      	adds	r0, #152	@ 0x98
1005ad5a:	6341      	str	r1, [r0, #52]	@ 0x34
1005ad5c:	8841      	ldrh	r1, [r0, #2]
1005ad5e:	2220      	movs	r2, #32
1005ad60:	430a      	orrs	r2, r1
1005ad62:	8042      	strh	r2, [r0, #2]
1005ad64:	4770      	bx	lr

1005ad66 <llc_conn_set_conn_update_params>:
1005ad66:	2398      	movs	r3, #152	@ 0x98
1005ad68:	52c2      	strh	r2, [r0, r3]
1005ad6a:	3098      	adds	r0, #152	@ 0x98
1005ad6c:	6301      	str	r1, [r0, #48]	@ 0x30
1005ad6e:	8841      	ldrh	r1, [r0, #2]
1005ad70:	2208      	movs	r2, #8
1005ad72:	430a      	orrs	r2, r1
1005ad74:	8042      	strh	r2, [r0, #2]
1005ad76:	4770      	bx	lr

1005ad78 <llc_conn_set_rx_acl_blocked>:
1005ad78:	2194      	movs	r1, #148	@ 0x94
1005ad7a:	5840      	ldr	r0, [r0, r1]
1005ad7c:	8801      	ldrh	r1, [r0, #0]
1005ad7e:	2201      	movs	r2, #1
1005ad80:	0212      	lsls	r2, r2, #8
1005ad82:	430a      	orrs	r2, r1
1005ad84:	8002      	strh	r2, [r0, #0]
1005ad86:	4770      	bx	lr

1005ad88 <llc_conn_set_start_enc>:
1005ad88:	2294      	movs	r2, #148	@ 0x94
1005ad8a:	5880      	ldr	r0, [r0, r2]
1005ad8c:	2900      	cmp	r1, #0
1005ad8e:	d007      	beq.n	1005ada0 <llc_conn_set_start_enc+0x18>
1005ad90:	2901      	cmp	r1, #1
1005ad92:	d003      	beq.n	1005ad9c <llc_conn_set_start_enc+0x14>
1005ad94:	8801      	ldrh	r1, [r0, #0]
1005ad96:	2210      	movs	r2, #16
1005ad98:	430a      	orrs	r2, r1
1005ad9a:	8002      	strh	r2, [r0, #0]
1005ad9c:	2108      	movs	r1, #8
1005ad9e:	e000      	b.n	1005ada2 <llc_conn_set_start_enc+0x1a>
1005ada0:	2110      	movs	r1, #16
1005ada2:	8802      	ldrh	r2, [r0, #0]
1005ada4:	430a      	orrs	r2, r1
1005ada6:	8002      	strh	r2, [r0, #0]
1005ada8:	4770      	bx	lr

1005adaa <llc_conn_set_stop_enc>:
1005adaa:	2294      	movs	r2, #148	@ 0x94
1005adac:	5880      	ldr	r0, [r0, r2]
1005adae:	2900      	cmp	r1, #0
1005adb0:	d007      	beq.n	1005adc2 <llc_conn_set_stop_enc+0x18>
1005adb2:	2901      	cmp	r1, #1
1005adb4:	d003      	beq.n	1005adbe <llc_conn_set_stop_enc+0x14>
1005adb6:	8801      	ldrh	r1, [r0, #0]
1005adb8:	2240      	movs	r2, #64	@ 0x40
1005adba:	430a      	orrs	r2, r1
1005adbc:	8002      	strh	r2, [r0, #0]
1005adbe:	2120      	movs	r1, #32
1005adc0:	e000      	b.n	1005adc4 <llc_conn_set_stop_enc+0x1a>
1005adc2:	2140      	movs	r1, #64	@ 0x40
1005adc4:	8802      	ldrh	r2, [r0, #0]
1005adc6:	430a      	orrs	r2, r1
1005adc8:	8002      	strh	r2, [r0, #0]
1005adca:	4770      	bx	lr

1005adcc <llc_conn_set_tx_acl_blocked>:
1005adcc:	2194      	movs	r1, #148	@ 0x94
1005adce:	5840      	ldr	r0, [r0, r1]
1005add0:	8801      	ldrh	r1, [r0, #0]
1005add2:	2280      	movs	r2, #128	@ 0x80
1005add4:	430a      	orrs	r2, r1
1005add6:	8002      	strh	r2, [r0, #0]
1005add8:	4770      	bx	lr

1005adda <llc_conn_set_tx_ctrl_pdu_has_instant>:
1005adda:	2194      	movs	r1, #148	@ 0x94
1005addc:	5840      	ldr	r0, [r0, r1]
1005adde:	8801      	ldrh	r1, [r0, #0]
1005ade0:	2204      	movs	r2, #4
1005ade2:	430a      	orrs	r2, r1
1005ade4:	8002      	strh	r2, [r0, #0]
1005ade6:	4770      	bx	lr

1005ade8 <llc_conn_set_tx_ctrl_pdu_state>:
1005ade8:	b580      	push	{r7, lr}
1005adea:	2294      	movs	r2, #148	@ 0x94
1005adec:	5880      	ldr	r0, [r0, r2]
1005adee:	8802      	ldrh	r2, [r0, #0]
1005adf0:	2303      	movs	r3, #3
1005adf2:	439a      	bics	r2, r3
1005adf4:	8002      	strh	r2, [r0, #0]
1005adf6:	4019      	ands	r1, r3
1005adf8:	8802      	ldrh	r2, [r0, #0]
1005adfa:	430a      	orrs	r2, r1
1005adfc:	8002      	strh	r2, [r0, #0]
1005adfe:	2015      	movs	r0, #21
1005ae00:	f007 feb8 	bl	10062b74 <tsk_notify_idx>
1005ae04:	f7f7 f839 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005ae08:	bd80      	pop	{r7, pc}

1005ae0a <llc_conn_calc_skip_ucfg_weak>:
1005ae0a:	4610      	mov	r0, r2
1005ae0c:	4770      	bx	lr

1005ae0e <llc_conn_multi_link_connection>:
1005ae0e:	b5b0      	push	{r4, r5, r7, lr}
1005ae10:	4604      	mov	r4, r0
1005ae12:	2536      	movs	r5, #54	@ 0x36
1005ae14:	f7ff fa80 	bl	1005a318 <llc_conn_get_cntxt_p>
1005ae18:	5544      	strb	r4, [r0, r5]
1005ae1a:	2000      	movs	r0, #0
1005ae1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005ae20 <llc_conn_check_connect_request_params>:
1005ae20:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ae22:	b087      	sub	sp, #28
1005ae24:	4604      	mov	r4, r0
1005ae26:	7e00      	ldrb	r0, [r0, #24]
1005ae28:	7e61      	ldrb	r1, [r4, #25]
1005ae2a:	0209      	lsls	r1, r1, #8
1005ae2c:	180e      	adds	r6, r1, r0
1005ae2e:	1e72      	subs	r2, r6, #1
1005ae30:	2a08      	cmp	r2, #8
1005ae32:	d300      	bcc.n	1005ae36 <llc_conn_check_connect_request_params+0x16>
1005ae34:	2208      	movs	r2, #8
1005ae36:	7ea0      	ldrb	r0, [r4, #26]
1005ae38:	9004      	str	r0, [sp, #16]
1005ae3a:	7ee0      	ldrb	r0, [r4, #27]
1005ae3c:	9003      	str	r0, [sp, #12]
1005ae3e:	7d60      	ldrb	r0, [r4, #21]
1005ae40:	2101      	movs	r1, #1
1005ae42:	4f27      	ldr	r7, [pc, #156]	@ (1005aee0 <__arm_cp.1_0>)
1005ae44:	9101      	str	r1, [sp, #4]
1005ae46:	47b8      	blx	r7
1005ae48:	4605      	mov	r5, r0
1005ae4a:	7da0      	ldrb	r0, [r4, #22]
1005ae4c:	7de1      	ldrb	r1, [r4, #23]
1005ae4e:	0209      	lsls	r1, r1, #8
1005ae50:	1808      	adds	r0, r1, r0
1005ae52:	2100      	movs	r1, #0
1005ae54:	9106      	str	r1, [sp, #24]
1005ae56:	4632      	mov	r2, r6
1005ae58:	47b8      	blx	r7
1005ae5a:	4633      	mov	r3, r6
1005ae5c:	9602      	str	r6, [sp, #8]
1005ae5e:	4606      	mov	r6, r0
1005ae60:	432e      	orrs	r6, r5
1005ae62:	2019      	movs	r0, #25
1005ae64:	01c2      	lsls	r2, r0, #7
1005ae66:	2106      	movs	r1, #6
1005ae68:	4618      	mov	r0, r3
1005ae6a:	9205      	str	r2, [sp, #20]
1005ae6c:	47b8      	blx	r7
1005ae6e:	463b      	mov	r3, r7
1005ae70:	4605      	mov	r5, r0
1005ae72:	4335      	orrs	r5, r6
1005ae74:	9803      	ldr	r0, [sp, #12]
1005ae76:	0200      	lsls	r0, r0, #8
1005ae78:	9904      	ldr	r1, [sp, #16]
1005ae7a:	1847      	adds	r7, r0, r1
1005ae7c:	22ff      	movs	r2, #255	@ 0xff
1005ae7e:	32f4      	adds	r2, #244	@ 0xf4
1005ae80:	4638      	mov	r0, r7
1005ae82:	9906      	ldr	r1, [sp, #24]
1005ae84:	4798      	blx	r3
1005ae86:	4606      	mov	r6, r0
1005ae88:	432e      	orrs	r6, r5
1005ae8a:	1c78      	adds	r0, r7, #1
1005ae8c:	9902      	ldr	r1, [sp, #8]
1005ae8e:	4348      	muls	r0, r1
1005ae90:	0880      	lsrs	r0, r0, #2
1005ae92:	b281      	uxth	r1, r0
1005ae94:	290a      	cmp	r1, #10
1005ae96:	d800      	bhi.n	1005ae9a <llc_conn_check_connect_request_params+0x7a>
1005ae98:	210a      	movs	r1, #10
1005ae9a:	7f20      	ldrb	r0, [r4, #28]
1005ae9c:	7f62      	ldrb	r2, [r4, #29]
1005ae9e:	0212      	lsls	r2, r2, #8
1005aea0:	1810      	adds	r0, r2, r0
1005aea2:	9a05      	ldr	r2, [sp, #20]
1005aea4:	4d0e      	ldr	r5, [pc, #56]	@ (1005aee0 <__arm_cp.1_0>)
1005aea6:	47a8      	blx	r5
1005aea8:	4306      	orrs	r6, r0
1005aeaa:	2023      	movs	r0, #35	@ 0x23
1005aeac:	5c21      	ldrb	r1, [r4, r0]
1005aeae:	201f      	movs	r0, #31
1005aeb0:	4008      	ands	r0, r1
1005aeb2:	2105      	movs	r1, #5
1005aeb4:	2210      	movs	r2, #16
1005aeb6:	47a8      	blx	r5
1005aeb8:	4330      	orrs	r0, r6
1005aeba:	d001      	beq.n	1005aec0 <llc_conn_check_connect_request_params+0xa0>
1005aebc:	9806      	ldr	r0, [sp, #24]
1005aebe:	e00c      	b.n	1005aeda <llc_conn_check_connect_request_params+0xba>
1005aec0:	4620      	mov	r0, r4
1005aec2:	3022      	adds	r0, #34	@ 0x22
1005aec4:	7800      	ldrb	r0, [r0, #0]
1005aec6:	06c0      	lsls	r0, r0, #27
1005aec8:	d106      	bne.n	1005aed8 <llc_conn_check_connect_request_params+0xb8>
1005aeca:	201e      	movs	r0, #30
1005aecc:	2822      	cmp	r0, #34	@ 0x22
1005aece:	d0f5      	beq.n	1005aebc <llc_conn_check_connect_request_params+0x9c>
1005aed0:	5c21      	ldrb	r1, [r4, r0]
1005aed2:	1c40      	adds	r0, r0, #1
1005aed4:	2900      	cmp	r1, #0
1005aed6:	d0f9      	beq.n	1005aecc <llc_conn_check_connect_request_params+0xac>
1005aed8:	9801      	ldr	r0, [sp, #4]
1005aeda:	b007      	add	sp, #28
1005aedc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005aede:	46c0      	nop			@ (mov r8, r8)

1005aee0 <__arm_cp.1_0>:
1005aee0:	10060251 	.word	0x10060251

1005aee4 <llc_conn_check_ctrl_proc_rsp_timer>:
1005aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005aee6:	460d      	mov	r5, r1
1005aee8:	4604      	mov	r4, r0
1005aeea:	2030      	movs	r0, #48	@ 0x30
1005aeec:	5c20      	ldrb	r0, [r4, r0]
1005aeee:	2101      	movs	r1, #1
1005aef0:	f001 f871 	bl	1005bfd6 <LL_cpe_get_active_status>
1005aef4:	4627      	mov	r7, r4
1005aef6:	3730      	adds	r7, #48	@ 0x30
1005aef8:	2801      	cmp	r0, #1
1005aefa:	d10e      	bne.n	1005af1a <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005aefc:	7838      	ldrb	r0, [r7, #0]
1005aefe:	2101      	movs	r1, #1
1005af00:	f001 fe8a 	bl	1005cc18 <LL_cpe_conn_exception_opcode_from_sm>
1005af04:	2800      	cmp	r0, #0
1005af06:	d108      	bne.n	1005af1a <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005af08:	6f20      	ldr	r0, [r4, #112]	@ 0x70
1005af0a:	1e41      	subs	r1, r0, #1
1005af0c:	d41d      	bmi.n	1005af4a <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005af0e:	217d      	movs	r1, #125	@ 0x7d
1005af10:	0449      	lsls	r1, r1, #17
1005af12:	4288      	cmp	r0, r1
1005af14:	d800      	bhi.n	1005af18 <llc_conn_check_ctrl_proc_rsp_timer+0x34>
1005af16:	1b41      	subs	r1, r0, r5
1005af18:	6721      	str	r1, [r4, #112]	@ 0x70
1005af1a:	7838      	ldrb	r0, [r7, #0]
1005af1c:	2600      	movs	r6, #0
1005af1e:	4631      	mov	r1, r6
1005af20:	f001 f859 	bl	1005bfd6 <LL_cpe_get_active_status>
1005af24:	2801      	cmp	r0, #1
1005af26:	d111      	bne.n	1005af4c <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005af28:	7838      	ldrb	r0, [r7, #0]
1005af2a:	2600      	movs	r6, #0
1005af2c:	4631      	mov	r1, r6
1005af2e:	f001 fe73 	bl	1005cc18 <LL_cpe_conn_exception_opcode_from_sm>
1005af32:	2800      	cmp	r0, #0
1005af34:	d10a      	bne.n	1005af4c <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005af36:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
1005af38:	1e41      	subs	r1, r0, #1
1005af3a:	d406      	bmi.n	1005af4a <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005af3c:	217d      	movs	r1, #125	@ 0x7d
1005af3e:	0449      	lsls	r1, r1, #17
1005af40:	4288      	cmp	r0, r1
1005af42:	d800      	bhi.n	1005af46 <llc_conn_check_ctrl_proc_rsp_timer+0x62>
1005af44:	1b41      	subs	r1, r0, r5
1005af46:	66e1      	str	r1, [r4, #108]	@ 0x6c
1005af48:	e000      	b.n	1005af4c <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005af4a:	2622      	movs	r6, #34	@ 0x22
1005af4c:	4630      	mov	r0, r6
1005af4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005af50 <llc_conn_check_instant_and_set_params>:
1005af50:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005af52:	4604      	mov	r4, r0
1005af54:	209a      	movs	r0, #154	@ 0x9a
1005af56:	5a20      	ldrh	r0, [r4, r0]
1005af58:	07c2      	lsls	r2, r0, #31
1005af5a:	4625      	mov	r5, r4
1005af5c:	352c      	adds	r5, #44	@ 0x2c
1005af5e:	2a00      	cmp	r2, #0
1005af60:	d100      	bne.n	1005af64 <llc_conn_check_instant_and_set_params+0x14>
1005af62:	e081      	b.n	1005b068 <llc_conn_check_instant_and_set_params+0x118>
1005af64:	4626      	mov	r6, r4
1005af66:	3698      	adds	r6, #152	@ 0x98
1005af68:	8832      	ldrh	r2, [r6, #0]
1005af6a:	1a51      	subs	r1, r2, r1
1005af6c:	040b      	lsls	r3, r1, #16
1005af6e:	d004      	beq.n	1005af7a <llc_conn_check_instant_and_set_params+0x2a>
1005af70:	b208      	sxth	r0, r1
1005af72:	2800      	cmp	r0, #0
1005af74:	d578      	bpl.n	1005b068 <llc_conn_check_instant_and_set_params+0x118>
1005af76:	2028      	movs	r0, #40	@ 0x28
1005af78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005af7a:	0541      	lsls	r1, r0, #21
1005af7c:	d40f      	bmi.n	1005af9e <llc_conn_check_instant_and_set_params+0x4e>
1005af7e:	0701      	lsls	r1, r0, #28
1005af80:	d416      	bmi.n	1005afb0 <llc_conn_check_instant_and_set_params+0x60>
1005af82:	0680      	lsls	r0, r0, #26
1005af84:	d438      	bmi.n	1005aff8 <llc_conn_check_instant_and_set_params+0xa8>
1005af86:	7928      	ldrb	r0, [r5, #4]
1005af88:	f7f4 f923 	bl	1004f1d2 <LL_phy_upd_pending_ucfg>
1005af8c:	2800      	cmp	r0, #0
1005af8e:	d060      	beq.n	1005b052 <llc_conn_check_instant_and_set_params+0x102>
1005af90:	7928      	ldrb	r0, [r5, #4]
1005af92:	2101      	movs	r1, #1
1005af94:	2200      	movs	r2, #0
1005af96:	4613      	mov	r3, r2
1005af98:	f003 f9e2 	bl	1005e360 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
1005af9c:	e059      	b.n	1005b052 <llc_conn_check_instant_and_set_params+0x102>
1005af9e:	7928      	ldrb	r0, [r5, #4]
1005afa0:	4611      	mov	r1, r2
1005afa2:	f7ff f9b7 	bl	1005a314 <llc_cig_cmn_start_cis_ucfg_weak>
1005afa6:	8870      	ldrh	r0, [r6, #2]
1005afa8:	4932      	ldr	r1, [pc, #200]	@ (1005b074 <__arm_cp.3_0>)
1005afaa:	4001      	ands	r1, r0
1005afac:	8071      	strh	r1, [r6, #2]
1005afae:	e050      	b.n	1005b052 <llc_conn_check_instant_and_set_params+0x102>
1005afb0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005afb2:	6b37      	ldr	r7, [r6, #48]	@ 0x30
1005afb4:	6879      	ldr	r1, [r7, #4]
1005afb6:	1840      	adds	r0, r0, r1
1005afb8:	6460      	str	r0, [r4, #68]	@ 0x44
1005afba:	68b9      	ldr	r1, [r7, #8]
1005afbc:	683a      	ldr	r2, [r7, #0]
1005afbe:	7828      	ldrb	r0, [r5, #0]
1005afc0:	2802      	cmp	r0, #2
1005afc2:	9102      	str	r1, [sp, #8]
1005afc4:	9201      	str	r2, [sp, #4]
1005afc6:	d129      	bne.n	1005b01c <llc_conn_check_instant_and_set_params+0xcc>
1005afc8:	7d68      	ldrb	r0, [r5, #21]
1005afca:	f7f9 f92f 	bl	1005422c <BLEPLAT_CNTR_SmGetTxPhy>
1005afce:	2804      	cmp	r0, #4
1005afd0:	d001      	beq.n	1005afd6 <llc_conn_check_instant_and_set_params+0x86>
1005afd2:	2806      	cmp	r0, #6
1005afd4:	d100      	bne.n	1005afd8 <llc_conn_check_instant_and_set_params+0x88>
1005afd6:	2002      	movs	r0, #2
1005afd8:	9b02      	ldr	r3, [sp, #8]
1005afda:	6979      	ldr	r1, [r7, #20]
1005afdc:	4299      	cmp	r1, r3
1005afde:	460a      	mov	r2, r1
1005afe0:	d300      	bcc.n	1005afe4 <llc_conn_check_instant_and_set_params+0x94>
1005afe2:	461a      	mov	r2, r3
1005afe4:	6522      	str	r2, [r4, #80]	@ 0x50
1005afe6:	0080      	lsls	r0, r0, #2
1005afe8:	1820      	adds	r0, r4, r0
1005afea:	6581      	str	r1, [r0, #88]	@ 0x58
1005afec:	9801      	ldr	r0, [sp, #4]
1005afee:	0840      	lsrs	r0, r0, #1
1005aff0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1005aff2:	1808      	adds	r0, r1, r0
1005aff4:	6460      	str	r0, [r4, #68]	@ 0x44
1005aff6:	e01b      	b.n	1005b030 <llc_conn_check_instant_and_set_params+0xe0>
1005aff8:	2083      	movs	r0, #131	@ 0x83
1005affa:	0040      	lsls	r0, r0, #1
1005affc:	1827      	adds	r7, r4, r0
1005affe:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005b000:	7d68      	ldrb	r0, [r5, #21]
1005b002:	f7f9 f969 	bl	100542d8 <BLEPLAT_CNTR_SmSetChannelMap>
1005b006:	7838      	ldrb	r0, [r7, #0]
1005b008:	2801      	cmp	r0, #1
1005b00a:	d104      	bne.n	1005b016 <llc_conn_check_instant_and_set_params+0xc6>
1005b00c:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005b00e:	34e0      	adds	r4, #224	@ 0xe0
1005b010:	4620      	mov	r0, r4
1005b012:	f000 fdcf 	bl	1005bbb4 <llc_mngm_csa2_update_remapping_table>
1005b016:	8870      	ldrh	r0, [r6, #2]
1005b018:	2120      	movs	r1, #32
1005b01a:	e018      	b.n	1005b04e <llc_conn_check_instant_and_set_params+0xfe>
1005b01c:	f7ff f97c 	bl	1005a318 <llc_conn_get_cntxt_p>
1005b020:	9b02      	ldr	r3, [sp, #8]
1005b022:	9901      	ldr	r1, [sp, #4]
1005b024:	6361      	str	r1, [r4, #52]	@ 0x34
1005b026:	6840      	ldr	r0, [r0, #4]
1005b028:	4298      	cmp	r0, r3
1005b02a:	d300      	bcc.n	1005b02e <llc_conn_check_instant_and_set_params+0xde>
1005b02c:	4618      	mov	r0, r3
1005b02e:	6520      	str	r0, [r4, #80]	@ 0x50
1005b030:	68f8      	ldr	r0, [r7, #12]
1005b032:	8720      	strh	r0, [r4, #56]	@ 0x38
1005b034:	6938      	ldr	r0, [r7, #16]
1005b036:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005b038:	180a      	adds	r2, r1, r0
1005b03a:	6662      	str	r2, [r4, #100]	@ 0x64
1005b03c:	66a0      	str	r0, [r4, #104]	@ 0x68
1005b03e:	4299      	cmp	r1, r3
1005b040:	d003      	beq.n	1005b04a <llc_conn_check_instant_and_set_params+0xfa>
1005b042:	64e3      	str	r3, [r4, #76]	@ 0x4c
1005b044:	4620      	mov	r0, r4
1005b046:	f000 ff72 	bl	1005bf2e <llc_subrate_reset_params>
1005b04a:	8870      	ldrh	r0, [r6, #2]
1005b04c:	2108      	movs	r1, #8
1005b04e:	4388      	bics	r0, r1
1005b050:	8070      	strh	r0, [r6, #2]
1005b052:	8870      	ldrh	r0, [r6, #2]
1005b054:	2102      	movs	r1, #2
1005b056:	4301      	orrs	r1, r0
1005b058:	2001      	movs	r0, #1
1005b05a:	4381      	bics	r1, r0
1005b05c:	8071      	strh	r1, [r6, #2]
1005b05e:	2015      	movs	r0, #21
1005b060:	f007 fd88 	bl	10062b74 <tsk_notify_idx>
1005b064:	f7f6 ff09 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005b068:	7928      	ldrb	r0, [r5, #4]
1005b06a:	f7f4 f8da 	bl	1004f222 <LL_phy_upd_evt_pending_check_isr_ucfg>
1005b06e:	2000      	movs	r0, #0
1005b070:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005b072:	46c0      	nop			@ (mov r8, r8)

1005b074 <__arm_cp.3_0>:
1005b074:	0000fbff 	.word	0x0000fbff

1005b078 <llc_conn_check_supervision_timer>:
1005b078:	6e42      	ldr	r2, [r0, #100]	@ 0x64
1005b07a:	1a51      	subs	r1, r2, r1
1005b07c:	6641      	str	r1, [r0, #100]	@ 0x64
1005b07e:	1e49      	subs	r1, r1, #1
1005b080:	d401      	bmi.n	1005b086 <llc_conn_check_supervision_timer+0xe>
1005b082:	2000      	movs	r0, #0
1005b084:	4770      	bx	lr
1005b086:	2188      	movs	r1, #136	@ 0x88
1005b088:	5c40      	ldrb	r0, [r0, r1]
1005b08a:	0680      	lsls	r0, r0, #26
1005b08c:	d501      	bpl.n	1005b092 <llc_conn_check_supervision_timer+0x1a>
1005b08e:	2008      	movs	r0, #8
1005b090:	4770      	bx	lr
1005b092:	203e      	movs	r0, #62	@ 0x3e
1005b094:	4770      	bx	lr

1005b096 <llc_conn_release_conn_idx>:
1005b096:	b580      	push	{r7, lr}
1005b098:	f7ff f948 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005b09c:	212c      	movs	r1, #44	@ 0x2c
1005b09e:	2200      	movs	r2, #0
1005b0a0:	5442      	strb	r2, [r0, r1]
1005b0a2:	bd80      	pop	{r7, pc}

1005b0a4 <llc_conn_disconnect_link>:
1005b0a4:	b5b0      	push	{r4, r5, r7, lr}
1005b0a6:	460c      	mov	r4, r1
1005b0a8:	4601      	mov	r1, r0
1005b0aa:	0a02      	lsrs	r2, r0, #8
1005b0ac:	2012      	movs	r0, #18
1005b0ae:	2a0e      	cmp	r2, #14
1005b0b0:	d81c      	bhi.n	1005b0ec <llc_conn_disconnect_link+0x48>
1005b0b2:	2c1a      	cmp	r4, #26
1005b0b4:	d81a      	bhi.n	1005b0ec <llc_conn_disconnect_link+0x48>
1005b0b6:	2201      	movs	r2, #1
1005b0b8:	40a2      	lsls	r2, r4
1005b0ba:	4b0d      	ldr	r3, [pc, #52]	@ (1005b0f0 <__arm_cp.9_0>)
1005b0bc:	421a      	tst	r2, r3
1005b0be:	d015      	beq.n	1005b0ec <llc_conn_disconnect_link+0x48>
1005b0c0:	4608      	mov	r0, r1
1005b0c2:	f7ff f941 	bl	1005a348 <llc_conn_get_cntxt_per_p_from_handle>
1005b0c6:	2800      	cmp	r0, #0
1005b0c8:	d008      	beq.n	1005b0dc <llc_conn_disconnect_link+0x38>
1005b0ca:	4605      	mov	r5, r0
1005b0cc:	2030      	movs	r0, #48	@ 0x30
1005b0ce:	5c28      	ldrb	r0, [r5, r0]
1005b0d0:	f001 fd9b 	bl	1005cc0a <LL_cpe_get_tx_terminate_in_progress>
1005b0d4:	2801      	cmp	r0, #1
1005b0d6:	d103      	bne.n	1005b0e0 <llc_conn_disconnect_link+0x3c>
1005b0d8:	203a      	movs	r0, #58	@ 0x3a
1005b0da:	bdb0      	pop	{r4, r5, r7, pc}
1005b0dc:	2002      	movs	r0, #2
1005b0de:	bdb0      	pop	{r4, r5, r7, pc}
1005b0e0:	3530      	adds	r5, #48	@ 0x30
1005b0e2:	7828      	ldrb	r0, [r5, #0]
1005b0e4:	4621      	mov	r1, r4
1005b0e6:	f001 fd83 	bl	1005cbf0 <LL_cpe_set_disconnect>
1005b0ea:	2000      	movs	r0, #0
1005b0ec:	bdb0      	pop	{r4, r5, r7, pc}
1005b0ee:	46c0      	nop			@ (mov r8, r8)

1005b0f0 <__arm_cp.9_0>:
1005b0f0:	04080020 	.word	0x04080020

1005b0f4 <llc_conn_disconnect_link_from_cpf>:
1005b0f4:	b510      	push	{r4, lr}
1005b0f6:	4604      	mov	r4, r0
1005b0f8:	202d      	movs	r0, #45	@ 0x2d
1005b0fa:	5421      	strb	r1, [r4, r0]
1005b0fc:	342d      	adds	r4, #45	@ 0x2d
1005b0fe:	7d20      	ldrb	r0, [r4, #20]
1005b100:	f005 fd72 	bl	10060be8 <LL_sched_delete_taskslot>
1005b104:	7d20      	ldrb	r0, [r4, #20]
1005b106:	f005 fdc1 	bl	10060c8c <LL_sched_check_and_wait_sched>
1005b10a:	bd10      	pop	{r4, pc}

1005b10c <llc_conn_go_to_connect>:
1005b10c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b10e:	b0ad      	sub	sp, #180	@ 0xb4
1005b110:	4605      	mov	r5, r0
1005b112:	7ac0      	ldrb	r0, [r0, #11]
1005b114:	f7ff f90a 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005b118:	4606      	mov	r6, r0
1005b11a:	f7ff f8fd 	bl	1005a318 <llc_conn_get_cntxt_p>
1005b11e:	901f      	str	r0, [sp, #124]	@ 0x7c
1005b120:	682c      	ldr	r4, [r5, #0]
1005b122:	2022      	movs	r0, #34	@ 0x22
1005b124:	5c21      	ldrb	r1, [r4, r0]
1005b126:	221f      	movs	r2, #31
1005b128:	9217      	str	r2, [sp, #92]	@ 0x5c
1005b12a:	4011      	ands	r1, r2
1005b12c:	5421      	strb	r1, [r4, r0]
1005b12e:	7d60      	ldrb	r0, [r4, #21]
1005b130:	9010      	str	r0, [sp, #64]	@ 0x40
1005b132:	7ba0      	ldrb	r0, [r4, #14]
1005b134:	9020      	str	r0, [sp, #128]	@ 0x80
1005b136:	7be0      	ldrb	r0, [r4, #15]
1005b138:	900c      	str	r0, [sp, #48]	@ 0x30
1005b13a:	7c20      	ldrb	r0, [r4, #16]
1005b13c:	9018      	str	r0, [sp, #96]	@ 0x60
1005b13e:	7c60      	ldrb	r0, [r4, #17]
1005b140:	901a      	str	r0, [sp, #104]	@ 0x68
1005b142:	7ca0      	ldrb	r0, [r4, #18]
1005b144:	901c      	str	r0, [sp, #112]	@ 0x70
1005b146:	7ce0      	ldrb	r0, [r4, #19]
1005b148:	9013      	str	r0, [sp, #76]	@ 0x4c
1005b14a:	7d20      	ldrb	r0, [r4, #20]
1005b14c:	9016      	str	r0, [sp, #88]	@ 0x58
1005b14e:	7da0      	ldrb	r0, [r4, #22]
1005b150:	9008      	str	r0, [sp, #32]
1005b152:	7de0      	ldrb	r0, [r4, #23]
1005b154:	900e      	str	r0, [sp, #56]	@ 0x38
1005b156:	7e20      	ldrb	r0, [r4, #24]
1005b158:	9015      	str	r0, [sp, #84]	@ 0x54
1005b15a:	7e60      	ldrb	r0, [r4, #25]
1005b15c:	9009      	str	r0, [sp, #36]	@ 0x24
1005b15e:	7ea0      	ldrb	r0, [r4, #26]
1005b160:	9011      	str	r0, [sp, #68]	@ 0x44
1005b162:	7ee0      	ldrb	r0, [r4, #27]
1005b164:	900a      	str	r0, [sp, #40]	@ 0x28
1005b166:	7f20      	ldrb	r0, [r4, #28]
1005b168:	9014      	str	r0, [sp, #80]	@ 0x50
1005b16a:	7f60      	ldrb	r0, [r4, #29]
1005b16c:	900f      	str	r0, [sp, #60]	@ 0x3c
1005b16e:	7820      	ldrb	r0, [r4, #0]
1005b170:	901d      	str	r0, [sp, #116]	@ 0x74
1005b172:	4620      	mov	r0, r4
1005b174:	3022      	adds	r0, #34	@ 0x22
1005b176:	7840      	ldrb	r0, [r0, #1]
1005b178:	9019      	str	r0, [sp, #100]	@ 0x64
1005b17a:	7ba8      	ldrb	r0, [r5, #14]
1005b17c:	f7f9 f856 	bl	1005422c <BLEPLAT_CNTR_SmGetTxPhy>
1005b180:	9022      	str	r0, [sp, #136]	@ 0x88
1005b182:	f004 ff77 	bl	10060074 <llc_get_channel_sel_algo2_enabled>
1005b186:	900b      	str	r0, [sp, #44]	@ 0x2c
1005b188:	2094      	movs	r0, #148	@ 0x94
1005b18a:	5830      	ldr	r0, [r6, r0]
1005b18c:	2300      	movs	r3, #0
1005b18e:	6003      	str	r3, [r0, #0]
1005b190:	2090      	movs	r0, #144	@ 0x90
1005b192:	5830      	ldr	r0, [r6, r0]
1005b194:	6003      	str	r3, [r0, #0]
1005b196:	20a8      	movs	r0, #168	@ 0xa8
1005b198:	5233      	strh	r3, [r6, r0]
1005b19a:	2042      	movs	r0, #66	@ 0x42
1005b19c:	5233      	strh	r3, [r6, r0]
1005b19e:	202d      	movs	r0, #45	@ 0x2d
1005b1a0:	5433      	strb	r3, [r6, r0]
1005b1a2:	2045      	movs	r0, #69	@ 0x45
1005b1a4:	0080      	lsls	r0, r0, #2
1005b1a6:	5033      	str	r3, [r6, r0]
1005b1a8:	2111      	movs	r1, #17
1005b1aa:	0109      	lsls	r1, r1, #4
1005b1ac:	5473      	strb	r3, [r6, r1]
1005b1ae:	2121      	movs	r1, #33	@ 0x21
1005b1b0:	00c9      	lsls	r1, r1, #3
1005b1b2:	227f      	movs	r2, #127	@ 0x7f
1005b1b4:	5472      	strb	r2, [r6, r1]
1005b1b6:	212f      	movs	r1, #47	@ 0x2f
1005b1b8:	2207      	movs	r2, #7
1005b1ba:	5472      	strb	r2, [r6, r1]
1005b1bc:	2188      	movs	r1, #136	@ 0x88
1005b1be:	5073      	str	r3, [r6, r1]
1005b1c0:	218c      	movs	r1, #140	@ 0x8c
1005b1c2:	5073      	str	r3, [r6, r1]
1005b1c4:	4631      	mov	r1, r6
1005b1c6:	31a8      	adds	r1, #168	@ 0xa8
1005b1c8:	810b      	strh	r3, [r1, #8]
1005b1ca:	9121      	str	r1, [sp, #132]	@ 0x84
1005b1cc:	728b      	strb	r3, [r1, #10]
1005b1ce:	1830      	adds	r0, r6, r0
1005b1d0:	931e      	str	r3, [sp, #120]	@ 0x78
1005b1d2:	900d      	str	r0, [sp, #52]	@ 0x34
1005b1d4:	6043      	str	r3, [r0, #4]
1005b1d6:	2701      	movs	r7, #1
1005b1d8:	8537      	strh	r7, [r6, #40]	@ 0x28
1005b1da:	9523      	str	r5, [sp, #140]	@ 0x8c
1005b1dc:	7ba8      	ldrb	r0, [r5, #14]
1005b1de:	2141      	movs	r1, #65	@ 0x41
1005b1e0:	5470      	strb	r0, [r6, r1]
1005b1e2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1005b1e4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005b1e6:	4002      	ands	r2, r0
1005b1e8:	7ae8      	ldrb	r0, [r5, #11]
1005b1ea:	2131      	movs	r1, #49	@ 0x31
1005b1ec:	921b      	str	r2, [sp, #108]	@ 0x6c
1005b1ee:	5472      	strb	r2, [r6, r1]
1005b1f0:	2130      	movs	r1, #48	@ 0x30
1005b1f2:	9112      	str	r1, [sp, #72]	@ 0x48
1005b1f4:	5470      	strb	r0, [r6, r1]
1005b1f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005b1f8:	0200      	lsls	r0, r0, #8
1005b1fa:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005b1fc:	1840      	adds	r0, r0, r1
1005b1fe:	9015      	str	r0, [sp, #84]	@ 0x54
1005b200:	b280      	uxth	r0, r0
1005b202:	0241      	lsls	r1, r0, #9
1005b204:	64f1      	str	r1, [r6, #76]	@ 0x4c
1005b206:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005b208:	0209      	lsls	r1, r1, #8
1005b20a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1005b20c:	1889      	adds	r1, r1, r2
1005b20e:	9114      	str	r1, [sp, #80]	@ 0x50
1005b210:	b289      	uxth	r1, r1
1005b212:	0309      	lsls	r1, r1, #12
1005b214:	2203      	movs	r2, #3
1005b216:	920f      	str	r2, [sp, #60]	@ 0x3c
1005b218:	0292      	lsls	r2, r2, #10
1005b21a:	4342      	muls	r2, r0
1005b21c:	6672      	str	r2, [r6, #100]	@ 0x64
1005b21e:	66b1      	str	r1, [r6, #104]	@ 0x68
1005b220:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005b222:	0200      	lsls	r0, r0, #8
1005b224:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005b226:	1840      	adds	r0, r0, r1
1005b228:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005b22a:	0409      	lsls	r1, r1, #16
1005b22c:	1840      	adds	r0, r0, r1
1005b22e:	9016      	str	r0, [sp, #88]	@ 0x58
1005b230:	6570      	str	r0, [r6, #84]	@ 0x54
1005b232:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b234:	0200      	lsls	r0, r0, #8
1005b236:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005b238:	1840      	adds	r0, r0, r1
1005b23a:	9011      	str	r0, [sp, #68]	@ 0x44
1005b23c:	8730      	strh	r0, [r6, #56]	@ 0x38
1005b23e:	25ff      	movs	r5, #255	@ 0xff
1005b240:	950a      	str	r5, [sp, #40]	@ 0x28
1005b242:	3512      	adds	r5, #18
1005b244:	f005 fa08 	bl	10060658 <llc_get_next_free_conn_handle>
1005b248:	971c      	str	r7, [sp, #112]	@ 0x70
1005b24a:	5577      	strb	r7, [r6, r5]
1005b24c:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b24e:	8770      	strh	r0, [r6, #58]	@ 0x3a
1005b250:	207d      	movs	r0, #125	@ 0x7d
1005b252:	0440      	lsls	r0, r0, #17
1005b254:	66f0      	str	r0, [r6, #108]	@ 0x6c
1005b256:	6730      	str	r0, [r6, #112]	@ 0x70
1005b258:	2083      	movs	r0, #131	@ 0x83
1005b25a:	0040      	lsls	r0, r0, #1
1005b25c:	1833      	adds	r3, r6, r0
1005b25e:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005b260:	0200      	lsls	r0, r0, #8
1005b262:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005b264:	1840      	adds	r0, r0, r1
1005b266:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005b268:	0409      	lsls	r1, r1, #16
1005b26a:	1840      	adds	r0, r0, r1
1005b26c:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005b26e:	0609      	lsls	r1, r1, #24
1005b270:	1840      	adds	r0, r0, r1
1005b272:	901a      	str	r0, [sp, #104]	@ 0x68
1005b274:	4632      	mov	r2, r6
1005b276:	322c      	adds	r2, #44	@ 0x2c
1005b278:	341e      	adds	r4, #30
1005b27a:	9418      	str	r4, [sp, #96]	@ 0x60
1005b27c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005b27e:	2801      	cmp	r0, #1
1005b280:	9220      	str	r2, [sp, #128]	@ 0x80
1005b282:	9313      	str	r3, [sp, #76]	@ 0x4c
1005b284:	d106      	bne.n	1005b294 <llc_conn_go_to_connect+0x188>
1005b286:	7c38      	ldrb	r0, [r7, #16]
1005b288:	2801      	cmp	r0, #1
1005b28a:	d103      	bne.n	1005b294 <llc_conn_go_to_connect+0x188>
1005b28c:	2020      	movs	r0, #32
1005b28e:	991d      	ldr	r1, [sp, #116]	@ 0x74
1005b290:	4008      	ands	r0, r1
1005b292:	d104      	bne.n	1005b29e <llc_conn_go_to_connect+0x192>
1005b294:	7b38      	ldrb	r0, [r7, #12]
1005b296:	21fe      	movs	r1, #254	@ 0xfe
1005b298:	4001      	ands	r1, r0
1005b29a:	2902      	cmp	r1, #2
1005b29c:	d11b      	bne.n	1005b2d6 <llc_conn_go_to_connect+0x1ca>
1005b29e:	2001      	movs	r0, #1
1005b2a0:	7018      	strb	r0, [r3, #0]
1005b2a2:	7bb8      	ldrb	r0, [r7, #14]
1005b2a4:	9c18      	ldr	r4, [sp, #96]	@ 0x60
1005b2a6:	4621      	mov	r1, r4
1005b2a8:	f7f9 f816 	bl	100542d8 <BLEPLAT_CNTR_SmSetChannelMap>
1005b2ac:	4635      	mov	r5, r6
1005b2ae:	35e0      	adds	r5, #224	@ 0xe0
1005b2b0:	4628      	mov	r0, r5
1005b2b2:	4621      	mov	r1, r4
1005b2b4:	f000 fc7e 	bl	1005bbb4 <llc_mngm_csa2_update_remapping_table>
1005b2b8:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005b2ba:	7d40      	ldrb	r0, [r0, #21]
1005b2bc:	2200      	movs	r2, #0
1005b2be:	9200      	str	r2, [sp, #0]
1005b2c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005b2c2:	9101      	str	r1, [sp, #4]
1005b2c4:	9202      	str	r2, [sp, #8]
1005b2c6:	4629      	mov	r1, r5
1005b2c8:	921b      	str	r2, [sp, #108]	@ 0x6c
1005b2ca:	4613      	mov	r3, r2
1005b2cc:	f000 fc8d 	bl	1005bbea <llc_mngm_csa2_select_channel_for_task>
1005b2d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005b2d2:	901e      	str	r0, [sp, #120]	@ 0x78
1005b2d4:	e001      	b.n	1005b2da <llc_conn_go_to_connect+0x1ce>
1005b2d6:	981e      	ldr	r0, [sp, #120]	@ 0x78
1005b2d8:	7018      	strb	r0, [r3, #0]
1005b2da:	209f      	movs	r0, #159	@ 0x9f
1005b2dc:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005b2de:	7788      	strb	r0, [r1, #30]
1005b2e0:	48f8      	ldr	r0, [pc, #992]	@ (1005b6c4 <__arm_cp.11_0>)
1005b2e2:	8388      	strh	r0, [r1, #28]
1005b2e4:	48f8      	ldr	r0, [pc, #992]	@ (1005b6c8 <__arm_cp.11_1>)
1005b2e6:	8348      	strh	r0, [r1, #26]
1005b2e8:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005b2ea:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005b2ec:	4388      	bics	r0, r1
1005b2ee:	6610      	str	r0, [r2, #96]	@ 0x60
1005b2f0:	7af8      	ldrb	r0, [r7, #11]
1005b2f2:	f7f3 ff86 	bl	1004f202 <LL_phy_update_init_per_st_data_ucfg>
1005b2f6:	2029      	movs	r0, #41	@ 0x29
1005b2f8:	00c5      	lsls	r5, r0, #3
1005b2fa:	20a9      	movs	r0, #169	@ 0xa9
1005b2fc:	0107      	lsls	r7, r0, #4
1005b2fe:	f7fe fb3f 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1005b302:	2801      	cmp	r0, #1
1005b304:	d118      	bne.n	1005b338 <llc_conn_go_to_connect+0x22c>
1005b306:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005b308:	8980      	ldrh	r0, [r0, #12]
1005b30a:	281b      	cmp	r0, #27
1005b30c:	d10f      	bne.n	1005b32e <llc_conn_go_to_connect+0x222>
1005b30e:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b310:	2804      	cmp	r0, #4
1005b312:	d108      	bne.n	1005b326 <llc_conn_go_to_connect+0x21a>
1005b314:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005b316:	8a40      	ldrh	r0, [r0, #18]
1005b318:	42b8      	cmp	r0, r7
1005b31a:	d108      	bne.n	1005b32e <llc_conn_go_to_connect+0x222>
1005b31c:	201b      	movs	r0, #27
1005b31e:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b320:	8208      	strh	r0, [r1, #16]
1005b322:	8188      	strh	r0, [r1, #12]
1005b324:	e010      	b.n	1005b348 <llc_conn_go_to_connect+0x23c>
1005b326:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005b328:	8a00      	ldrh	r0, [r0, #16]
1005b32a:	42a8      	cmp	r0, r5
1005b32c:	d004      	beq.n	1005b338 <llc_conn_go_to_connect+0x22c>
1005b32e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005b330:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005b332:	2104      	movs	r1, #4
1005b334:	4301      	orrs	r1, r0
1005b336:	6611      	str	r1, [r2, #96]	@ 0x60
1005b338:	201b      	movs	r0, #27
1005b33a:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b33c:	8208      	strh	r0, [r1, #16]
1005b33e:	8188      	strh	r0, [r1, #12]
1005b340:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b342:	2804      	cmp	r0, #4
1005b344:	d000      	beq.n	1005b348 <llc_conn_go_to_connect+0x23c>
1005b346:	462f      	mov	r7, r5
1005b348:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005b34a:	0200      	lsls	r0, r0, #8
1005b34c:	900e      	str	r0, [sp, #56]	@ 0x38
1005b34e:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b350:	828f      	strh	r7, [r1, #20]
1005b352:	824f      	strh	r7, [r1, #18]
1005b354:	830f      	strh	r7, [r1, #24]
1005b356:	201b      	movs	r0, #27
1005b358:	82c8      	strh	r0, [r1, #22]
1005b35a:	81c8      	strh	r0, [r1, #14]
1005b35c:	83cf      	strh	r7, [r1, #30]
1005b35e:	838f      	strh	r7, [r1, #28]
1005b360:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
1005b362:	8b68      	ldrh	r0, [r5, #26]
1005b364:	8348      	strh	r0, [r1, #26]
1005b366:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b368:	7af8      	ldrb	r0, [r7, #11]
1005b36a:	f002 f8cf 	bl	1005d50c <llc_conn_init_cte_ctxt_ucfg_weak>
1005b36e:	7af8      	ldrb	r0, [r7, #11]
1005b370:	f002 ffe4 	bl	1005e33c <llc_conn_init_pcl_ctxt_ucfg_weak>
1005b374:	7af8      	ldrb	r0, [r7, #11]
1005b376:	f001 fe87 	bl	1005d088 <LLC_conn_init_chc_ctxt_ucfg_weak>
1005b37a:	4628      	mov	r0, r5
1005b37c:	4631      	mov	r1, r6
1005b37e:	f000 fdcb 	bl	1005bf18 <llc_subrate_init_acceptable_per>
1005b382:	7af8      	ldrb	r0, [r7, #11]
1005b384:	f002 ffde 	bl	1005e344 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>
1005b388:	7af8      	ldrb	r0, [r7, #11]
1005b38a:	f000 fd4b 	bl	1005be24 <llc_past_init_ucfg_weak>
1005b38e:	4630      	mov	r0, r6
1005b390:	f002 fe44 	bl	1005e01c <LLC_init_le_ping_params>
1005b394:	7af8      	ldrb	r0, [r7, #11]
1005b396:	f001 fc5b 	bl	1005cc50 <llc_cpe_init_sm_ctxt>
1005b39a:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b39c:	f7f9 f937 	bl	1005460e <BLEPLAT_CNTR_DemodDelaySt>
1005b3a0:	7b39      	ldrb	r1, [r7, #12]
1005b3a2:	4aca      	ldr	r2, [pc, #808]	@ (1005b6cc <__arm_cp.11_2>)
1005b3a4:	6812      	ldr	r2, [r2, #0]
1005b3a6:	6817      	ldr	r7, [r2, #0]
1005b3a8:	2903      	cmp	r1, #3
1005b3aa:	d004      	beq.n	1005b3b6 <llc_conn_go_to_connect+0x2aa>
1005b3ac:	2902      	cmp	r1, #2
1005b3ae:	d10b      	bne.n	1005b3c8 <llc_conn_go_to_connect+0x2bc>
1005b3b0:	1a38      	subs	r0, r7, r0
1005b3b2:	383e      	subs	r0, #62	@ 0x3e
1005b3b4:	e012      	b.n	1005b3dc <llc_conn_go_to_connect+0x2d0>
1005b3b6:	210e      	movs	r1, #14
1005b3b8:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005b3ba:	4628      	mov	r0, r5
1005b3bc:	f004 ff26 	bl	1006020c <LL_link_calc_packetlength>
1005b3c0:	1a38      	subs	r0, r7, r0
1005b3c2:	383e      	subs	r0, #62	@ 0x3e
1005b3c4:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b3c6:	e00b      	b.n	1005b3e0 <llc_conn_go_to_connect+0x2d4>
1005b3c8:	9923      	ldr	r1, [sp, #140]	@ 0x8c
1005b3ca:	7b49      	ldrb	r1, [r1, #13]
1005b3cc:	1a38      	subs	r0, r7, r0
1005b3ce:	2900      	cmp	r1, #0
1005b3d0:	d001      	beq.n	1005b3d6 <llc_conn_go_to_connect+0x2ca>
1005b3d2:	3090      	adds	r0, #144	@ 0x90
1005b3d4:	e002      	b.n	1005b3dc <llc_conn_go_to_connect+0x2d0>
1005b3d6:	2181      	movs	r1, #129	@ 0x81
1005b3d8:	0049      	lsls	r1, r1, #1
1005b3da:	1840      	adds	r0, r0, r1
1005b3dc:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b3de:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005b3e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005b3e2:	9908      	ldr	r1, [sp, #32]
1005b3e4:	065a      	lsls	r2, r3, #25
1005b3e6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005b3e8:	1861      	adds	r1, r4, r1
1005b3ea:	2d04      	cmp	r5, #4
1005b3ec:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
1005b3ee:	d007      	beq.n	1005b400 <llc_conn_go_to_connect+0x2f4>
1005b3f0:	7b3d      	ldrb	r5, [r7, #12]
1005b3f2:	23fe      	movs	r3, #254	@ 0xfe
1005b3f4:	402b      	ands	r3, r5
1005b3f6:	2b02      	cmp	r3, #2
1005b3f8:	d100      	bne.n	1005b3fc <llc_conn_go_to_connect+0x2f0>
1005b3fa:	931c      	str	r3, [sp, #112]	@ 0x70
1005b3fc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005b3fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005b400:	09db      	lsrs	r3, r3, #7
1005b402:	930e      	str	r3, [sp, #56]	@ 0x38
1005b404:	0fd2      	lsrs	r2, r2, #31
1005b406:	920f      	str	r2, [sp, #60]	@ 0x3c
1005b408:	1861      	adds	r1, r4, r1
1005b40a:	024d      	lsls	r5, r1, #9
1005b40c:	1829      	adds	r1, r5, r0
1005b40e:	683c      	ldr	r4, [r7, #0]
1005b410:	7b78      	ldrb	r0, [r7, #13]
1005b412:	2800      	cmp	r0, #0
1005b414:	d02a      	beq.n	1005b46c <llc_conn_go_to_connect+0x360>
1005b416:	911d      	str	r1, [sp, #116]	@ 0x74
1005b418:	9819      	ldr	r0, [sp, #100]	@ 0x64
1005b41a:	0947      	lsrs	r7, r0, #5
1005b41c:	f004 ff12 	bl	10060244 <LL_link_get_own_sca_ppm>
1005b420:	9019      	str	r0, [sp, #100]	@ 0x64
1005b422:	971c      	str	r7, [sp, #112]	@ 0x70
1005b424:	4638      	mov	r0, r7
1005b426:	f000 fd8f 	bl	1005bf48 <llc_convert_sca_to_ppm>
1005b42a:	2103      	movs	r1, #3
1005b42c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005b42e:	7011      	strb	r1, [r2, #0]
1005b430:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005b432:	0249      	lsls	r1, r1, #9
1005b434:	6371      	str	r1, [r6, #52]	@ 0x34
1005b436:	9919      	ldr	r1, [sp, #100]	@ 0x64
1005b438:	1840      	adds	r0, r0, r1
1005b43a:	8570      	strh	r0, [r6, #42]	@ 0x2a
1005b43c:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
1005b43e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005b440:	6852      	ldr	r2, [r2, #4]
1005b442:	4291      	cmp	r1, r2
1005b444:	d300      	bcc.n	1005b448 <llc_conn_go_to_connect+0x33c>
1005b446:	4611      	mov	r1, r2
1005b448:	6531      	str	r1, [r6, #80]	@ 0x50
1005b44a:	b280      	uxth	r0, r0
1005b44c:	4629      	mov	r1, r5
1005b44e:	f004 fed3 	bl	100601f8 <LL_link_calculate_window_widening_from_ppm>
1005b452:	300d      	adds	r0, #13
1005b454:	0041      	lsls	r1, r0, #1
1005b456:	6b72      	ldr	r2, [r6, #52]	@ 0x34
1005b458:	188a      	adds	r2, r1, r2
1005b45a:	1ca4      	adds	r4, r4, #2
1005b45c:	941f      	str	r4, [sp, #124]	@ 0x7c
1005b45e:	2102      	movs	r1, #2
1005b460:	9110      	str	r1, [sp, #64]	@ 0x40
1005b462:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
1005b464:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b466:	4b99      	ldr	r3, [pc, #612]	@ (1005b6cc <__arm_cp.11_2>)
1005b468:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
1005b46a:	e01b      	b.n	1005b4a4 <llc_conn_go_to_connect+0x398>
1005b46c:	460d      	mov	r5, r1
1005b46e:	2102      	movs	r1, #2
1005b470:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005b472:	7001      	strb	r1, [r0, #0]
1005b474:	2000      	movs	r0, #0
1005b476:	8570      	strh	r0, [r6, #42]	@ 0x2a
1005b478:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1005b47a:	2a04      	cmp	r2, #4
1005b47c:	d000      	beq.n	1005b480 <llc_conn_go_to_connect+0x374>
1005b47e:	4611      	mov	r1, r2
1005b480:	0089      	lsls	r1, r1, #2
1005b482:	1871      	adds	r1, r6, r1
1005b484:	6d89      	ldr	r1, [r1, #88]	@ 0x58
1005b486:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
1005b488:	428a      	cmp	r2, r1
1005b48a:	4b90      	ldr	r3, [pc, #576]	@ (1005b6cc <__arm_cp.11_2>)
1005b48c:	d300      	bcc.n	1005b490 <llc_conn_go_to_connect+0x384>
1005b48e:	460a      	mov	r2, r1
1005b490:	6532      	str	r2, [r6, #80]	@ 0x50
1005b492:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005b494:	0209      	lsls	r1, r1, #8
1005b496:	186d      	adds	r5, r5, r1
1005b498:	3408      	adds	r4, #8
1005b49a:	941f      	str	r4, [sp, #124]	@ 0x7c
1005b49c:	2185      	movs	r1, #133	@ 0x85
1005b49e:	9110      	str	r1, [sp, #64]	@ 0x40
1005b4a0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005b4a2:	901c      	str	r0, [sp, #112]	@ 0x70
1005b4a4:	6475      	str	r5, [r6, #68]	@ 0x44
1005b4a6:	64b0      	str	r0, [r6, #72]	@ 0x48
1005b4a8:	a824      	add	r0, sp, #144	@ 0x90
1005b4aa:	2100      	movs	r1, #0
1005b4ac:	8081      	strh	r1, [r0, #4]
1005b4ae:	911d      	str	r1, [sp, #116]	@ 0x74
1005b4b0:	9124      	str	r1, [sp, #144]	@ 0x90
1005b4b2:	6818      	ldr	r0, [r3, #0]
1005b4b4:	213d      	movs	r1, #61	@ 0x3d
1005b4b6:	5c41      	ldrb	r1, [r0, r1]
1005b4b8:	0689      	lsls	r1, r1, #26
1005b4ba:	9219      	str	r2, [sp, #100]	@ 0x64
1005b4bc:	d506      	bpl.n	1005b4cc <llc_conn_go_to_connect+0x3c0>
1005b4be:	303d      	adds	r0, #61	@ 0x3d
1005b4c0:	7b81      	ldrb	r1, [r0, #14]
1005b4c2:	07c9      	lsls	r1, r1, #31
1005b4c4:	d105      	bne.n	1005b4d2 <llc_conn_go_to_connect+0x3c6>
1005b4c6:	7a80      	ldrb	r0, [r0, #10]
1005b4c8:	0780      	lsls	r0, r0, #30
1005b4ca:	d402      	bmi.n	1005b4d2 <llc_conn_go_to_connect+0x3c6>
1005b4cc:	4627      	mov	r7, r4
1005b4ce:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
1005b4d0:	e036      	b.n	1005b540 <llc_conn_go_to_connect+0x434>
1005b4d2:	6878      	ldr	r0, [r7, #4]
1005b4d4:	6801      	ldr	r1, [r0, #0]
1005b4d6:	23fe      	movs	r3, #254	@ 0xfe
1005b4d8:	400b      	ands	r3, r1
1005b4da:	aa24      	add	r2, sp, #144	@ 0x90
1005b4dc:	2b02      	cmp	r3, #2
1005b4de:	d000      	beq.n	1005b4e2 <llc_conn_go_to_connect+0x3d6>
1005b4e0:	921f      	str	r2, [sp, #124]	@ 0x7c
1005b4e2:	b2cd      	uxtb	r5, r1
1005b4e4:	7b79      	ldrb	r1, [r7, #13]
1005b4e6:	2900      	cmp	r1, #0
1005b4e8:	d00c      	beq.n	1005b504 <llc_conn_go_to_connect+0x3f8>
1005b4ea:	a924      	add	r1, sp, #144	@ 0x90
1005b4ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005b4ee:	2a00      	cmp	r2, #0
1005b4f0:	d016      	beq.n	1005b520 <llc_conn_go_to_connect+0x414>
1005b4f2:	6839      	ldr	r1, [r7, #0]
1005b4f4:	7b4a      	ldrb	r2, [r1, #13]
1005b4f6:	23c0      	movs	r3, #192	@ 0xc0
1005b4f8:	4013      	ands	r3, r2
1005b4fa:	aa24      	add	r2, sp, #144	@ 0x90
1005b4fc:	2b40      	cmp	r3, #64	@ 0x40
1005b4fe:	d00e      	beq.n	1005b51e <llc_conn_go_to_connect+0x412>
1005b500:	4611      	mov	r1, r2
1005b502:	e00d      	b.n	1005b520 <llc_conn_go_to_connect+0x414>
1005b504:	a924      	add	r1, sp, #144	@ 0x90
1005b506:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005b508:	2a00      	cmp	r2, #0
1005b50a:	d009      	beq.n	1005b520 <llc_conn_go_to_connect+0x414>
1005b50c:	683a      	ldr	r2, [r7, #0]
1005b50e:	79d1      	ldrb	r1, [r2, #7]
1005b510:	23c0      	movs	r3, #192	@ 0xc0
1005b512:	400b      	ands	r3, r1
1005b514:	a924      	add	r1, sp, #144	@ 0x90
1005b516:	2b40      	cmp	r3, #64	@ 0x40
1005b518:	d102      	bne.n	1005b520 <llc_conn_go_to_connect+0x414>
1005b51a:	1c91      	adds	r1, r2, #2
1005b51c:	e000      	b.n	1005b520 <llc_conn_go_to_connect+0x414>
1005b51e:	3108      	adds	r1, #8
1005b520:	7aba      	ldrb	r2, [r7, #10]
1005b522:	ab26      	add	r3, sp, #152	@ 0x98
1005b524:	759a      	strb	r2, [r3, #22]
1005b526:	893a      	ldrh	r2, [r7, #8]
1005b528:	829a      	strh	r2, [r3, #20]
1005b52a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005b52c:	9227      	str	r2, [sp, #156]	@ 0x9c
1005b52e:	9128      	str	r1, [sp, #160]	@ 0xa0
1005b530:	2dfe      	cmp	r5, #254	@ 0xfe
1005b532:	d003      	beq.n	1005b53c <llc_conn_go_to_connect+0x430>
1005b534:	2103      	movs	r1, #3
1005b536:	400d      	ands	r5, r1
1005b538:	462f      	mov	r7, r5
1005b53a:	e000      	b.n	1005b53e <llc_conn_go_to_connect+0x432>
1005b53c:	2701      	movs	r7, #1
1005b53e:	1c44      	adds	r4, r0, #1
1005b540:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b542:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
1005b544:	630d      	str	r5, [r1, #48]	@ 0x30
1005b546:	2001      	movs	r0, #1
1005b548:	4038      	ands	r0, r7
1005b54a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1005b54c:	5488      	strb	r0, [r1, r2]
1005b54e:	634d      	str	r5, [r1, #52]	@ 0x34
1005b550:	4608      	mov	r0, r1
1005b552:	3030      	adds	r0, #48	@ 0x30
1005b554:	1c40      	adds	r0, r0, #1
1005b556:	2206      	movs	r2, #6
1005b558:	4621      	mov	r1, r4
1005b55a:	f7f7 fa75 	bl	10052a48 <BLEPLAT_MemCpy>
1005b55e:	a826      	add	r0, sp, #152	@ 0x98
1005b560:	7685      	strb	r5, [r0, #26]
1005b562:	7607      	strb	r7, [r0, #24]
1005b564:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005b566:	75c1      	strb	r1, [r0, #23]
1005b568:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005b56a:	8241      	strh	r1, [r0, #18]
1005b56c:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005b56e:	8201      	strh	r1, [r0, #16]
1005b570:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005b572:	8181      	strh	r1, [r0, #12]
1005b574:	8f71      	ldrh	r1, [r6, #58]	@ 0x3a
1005b576:	81c1      	strh	r1, [r0, #14]
1005b578:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b57a:	7b79      	ldrb	r1, [r7, #13]
1005b57c:	7641      	strb	r1, [r0, #25]
1005b57e:	9426      	str	r4, [sp, #152]	@ 0x98
1005b580:	f7ff fa86 	bl	1005aa90 <llc_conn_push_connection_complete_event>
1005b584:	7bf8      	ldrb	r0, [r7, #15]
1005b586:	2800      	cmp	r0, #0
1005b588:	d003      	beq.n	1005b592 <llc_conn_go_to_connect+0x486>
1005b58a:	7ab9      	ldrb	r1, [r7, #10]
1005b58c:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005b58e:	f7ff fa41 	bl	1005aa14 <llc_conn_push_adv_set_terminated_event>
1005b592:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005b594:	7801      	ldrb	r1, [r0, #0]
1005b596:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005b598:	f7ff fbb0 	bl	1005acfc <llc_conn_push_csa_event>
1005b59c:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b59e:	6b08      	ldr	r0, [r1, #48]	@ 0x30
1005b5a0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1005b5a2:	f7ff f9df 	bl	1005a964 <llc_conn_list_add_address>
1005b5a6:	7b7c      	ldrb	r4, [r7, #13]
1005b5a8:	7bbf      	ldrb	r7, [r7, #14]
1005b5aa:	4638      	mov	r0, r7
1005b5ac:	f7f8 fe4f 	bl	1005424e <BLEPLAT_CNTR_SmGetTxPwr>
1005b5b0:	9021      	str	r0, [sp, #132]	@ 0x84
1005b5b2:	4638      	mov	r0, r7
1005b5b4:	f7f8 fe60 	bl	10054278 <BLEPLAT_CNTR_SmInitTo0>
1005b5b8:	4638      	mov	r0, r7
1005b5ba:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005b5bc:	4629      	mov	r1, r5
1005b5be:	f7f8 ffd8 	bl	10054572 <BLEPLAT_CNTR_SmSetTxPhy>
1005b5c2:	4638      	mov	r0, r7
1005b5c4:	4629      	mov	r1, r5
1005b5c6:	f7f8 ff68 	bl	1005449a <BLEPLAT_CNTR_SmSetRxPhy>
1005b5ca:	4638      	mov	r0, r7
1005b5cc:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005b5ce:	f7f8 fe83 	bl	100542d8 <BLEPLAT_CNTR_SmSetChannelMap>
1005b5d2:	4638      	mov	r0, r7
1005b5d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005b5d6:	f7f8 fe6d 	bl	100542b4 <BLEPLAT_CNTR_SmSetAccessAddr>
1005b5da:	4638      	mov	r0, r7
1005b5dc:	991e      	ldr	r1, [sp, #120]	@ 0x78
1005b5de:	f7f8 fff2 	bl	100545c6 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b5e2:	4638      	mov	r0, r7
1005b5e4:	991b      	ldr	r1, [sp, #108]	@ 0x6c
1005b5e6:	f7f8 fecf 	bl	10054388 <BLEPLAT_CNTR_SmSetHopIncr>
1005b5ea:	4638      	mov	r0, r7
1005b5ec:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005b5ee:	f7f8 fea4 	bl	1005433a <BLEPLAT_CNTR_SmSetCrcInit>
1005b5f2:	4638      	mov	r0, r7
1005b5f4:	4631      	mov	r1, r6
1005b5f6:	f7f8 ffaa 	bl	1005454e <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005b5fa:	4635      	mov	r5, r6
1005b5fc:	3514      	adds	r5, #20
1005b5fe:	4638      	mov	r0, r7
1005b600:	4629      	mov	r1, r5
1005b602:	f7f8 ff38 	bl	10054476 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005b606:	4638      	mov	r0, r7
1005b608:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b60a:	f7f8 ffc7 	bl	1005459c <BLEPLAT_CNTR_SmSetTxPwr>
1005b60e:	f7fe f95b 	bl	100598c8 <cte_csr_ucfg_weak>
1005b612:	2800      	cmp	r0, #0
1005b614:	d102      	bne.n	1005b61c <llc_conn_go_to_connect+0x510>
1005b616:	4638      	mov	r0, r7
1005b618:	f7f8 fcd2 	bl	10053fc0 <BLEPLAT_CNTR_SmCteOff>
1005b61c:	4638      	mov	r0, r7
1005b61e:	2c00      	cmp	r4, #0
1005b620:	d002      	beq.n	1005b628 <llc_conn_go_to_connect+0x51c>
1005b622:	f7f8 ff19 	bl	10054458 <BLEPLAT_CNTR_SmSetRxMode>
1005b626:	e001      	b.n	1005b62c <llc_conn_go_to_connect+0x520>
1005b628:	f7f8 ff82 	bl	10054530 <BLEPLAT_CNTR_SmSetTxMode>
1005b62c:	4634      	mov	r4, r6
1005b62e:	3428      	adds	r4, #40	@ 0x28
1005b630:	f7fe f9a6 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1005b634:	2801      	cmp	r0, #1
1005b636:	d101      	bne.n	1005b63c <llc_conn_go_to_connect+0x530>
1005b638:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b63a:	e00c      	b.n	1005b656 <llc_conn_go_to_connect+0x54a>
1005b63c:	f000 fbee 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005b640:	2801      	cmp	r0, #1
1005b642:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b644:	d007      	beq.n	1005b656 <llc_conn_go_to_connect+0x54a>
1005b646:	f000 fbdf 	bl	1005be08 <cis_csr_ucfg_weak>
1005b64a:	2801      	cmp	r0, #1
1005b64c:	d001      	beq.n	1005b652 <llc_conn_go_to_connect+0x546>
1005b64e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005b650:	e001      	b.n	1005b656 <llc_conn_go_to_connect+0x54a>
1005b652:	981d      	ldr	r0, [sp, #116]	@ 0x74
1005b654:	43c0      	mvns	r0, r0
1005b656:	b2c1      	uxtb	r1, r0
1005b658:	4638      	mov	r0, r7
1005b65a:	f7f8 fe80 	bl	1005435e <BLEPLAT_CNTR_SmSetDataLength>
1005b65e:	4630      	mov	r0, r6
1005b660:	4621      	mov	r1, r4
1005b662:	463a      	mov	r2, r7
1005b664:	f000 fa3c 	bl	1005bae0 <llc_conn_set_blue_packets>
1005b668:	2100      	movs	r1, #0
1005b66a:	4628      	mov	r0, r5
1005b66c:	463a      	mov	r2, r7
1005b66e:	f000 fa37 	bl	1005bae0 <llc_conn_set_blue_packets>
1005b672:	4630      	mov	r0, r6
1005b674:	f7f8 fc83 	bl	10053f7e <BLEPLAT_CNTR_PacketSetTxReady>
1005b678:	4628      	mov	r0, r5
1005b67a:	f7f8 fc3e 	bl	10053efa <BLEPLAT_CNTR_PacketSetRxReady>
1005b67e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
1005b680:	7b81      	ldrb	r1, [r0, #14]
1005b682:	9122      	str	r1, [sp, #136]	@ 0x88
1005b684:	7c40      	ldrb	r0, [r0, #17]
1005b686:	4634      	mov	r4, r6
1005b688:	3444      	adds	r4, #68	@ 0x44
1005b68a:	cc1c      	ldmia	r4, {r2, r3, r4}
1005b68c:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005b68e:	788d      	ldrb	r5, [r1, #2]
1005b690:	78cf      	ldrb	r7, [r1, #3]
1005b692:	490f      	ldr	r1, [pc, #60]	@ (1005b6d0 <__arm_cp.11_3>)
1005b694:	9107      	str	r1, [sp, #28]
1005b696:	490f      	ldr	r1, [pc, #60]	@ (1005b6d4 <__arm_cp.11_4>)
1005b698:	9106      	str	r1, [sp, #24]
1005b69a:	490f      	ldr	r1, [pc, #60]	@ (1005b6d8 <__arm_cp.11_5>)
1005b69c:	9105      	str	r1, [sp, #20]
1005b69e:	490f      	ldr	r1, [pc, #60]	@ (1005b6dc <__arm_cp.11_6>)
1005b6a0:	9104      	str	r1, [sp, #16]
1005b6a2:	9703      	str	r7, [sp, #12]
1005b6a4:	9502      	str	r5, [sp, #8]
1005b6a6:	1ad1      	subs	r1, r2, r3
1005b6a8:	9101      	str	r1, [sp, #4]
1005b6aa:	9400      	str	r4, [sp, #0]
1005b6ac:	2800      	cmp	r0, #0
1005b6ae:	d001      	beq.n	1005b6b4 <llc_conn_go_to_connect+0x5a8>
1005b6b0:	4c0c      	ldr	r4, [pc, #48]	@ (1005b6e4 <__arm_cp.11_8>)
1005b6b2:	e000      	b.n	1005b6b6 <llc_conn_go_to_connect+0x5aa>
1005b6b4:	4c0a      	ldr	r4, [pc, #40]	@ (1005b6e0 <__arm_cp.11_7>)
1005b6b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1005b6b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005b6ba:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b6bc:	4631      	mov	r1, r6
1005b6be:	47a0      	blx	r4
1005b6c0:	b02d      	add	sp, #180	@ 0xb4
1005b6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b6c4 <__arm_cp.11_0>:
1005b6c4:	000004ff 	.word	0x000004ff

1005b6c8 <__arm_cp.11_1>:
1005b6c8:	0000f7fb 	.word	0x0000f7fb

1005b6cc <__arm_cp.11_2>:
1005b6cc:	20002468 	.word	0x20002468

1005b6d0 <__arm_cp.11_3>:
1005b6d0:	10065703 	.word	0x10065703

1005b6d4 <__arm_cp.11_4>:
1005b6d4:	10065891 	.word	0x10065891

1005b6d8 <__arm_cp.11_5>:
1005b6d8:	1006573b 	.word	0x1006573b

1005b6dc <__arm_cp.11_6>:
1005b6dc:	100657c5 	.word	0x100657c5

1005b6e0 <__arm_cp.11_7>:
1005b6e0:	10060bb1 	.word	0x10060bb1

1005b6e4 <__arm_cp.11_8>:
1005b6e4:	1006074d 	.word	0x1006074d

1005b6e8 <llc_conn_peripheral_roll_back_params>:
1005b6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b6ea:	b089      	sub	sp, #36	@ 0x24
1005b6ec:	4604      	mov	r4, r0
1005b6ee:	2091      	movs	r0, #145	@ 0x91
1005b6f0:	0040      	lsls	r0, r0, #1
1005b6f2:	5a25      	ldrh	r5, [r4, r0]
1005b6f4:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
1005b6f6:	26ff      	movs	r6, #255	@ 0xff
1005b6f8:	3608      	adds	r6, #8
1005b6fa:	f7f7 fa70 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
1005b6fe:	5da1      	ldrb	r1, [r4, r6]
1005b700:	22fe      	movs	r2, #254	@ 0xfe
1005b702:	400a      	ands	r2, r1
1005b704:	55a2      	strb	r2, [r4, r6]
1005b706:	2135      	movs	r1, #53	@ 0x35
1005b708:	0109      	lsls	r1, r1, #4
1005b70a:	1846      	adds	r6, r0, r1
1005b70c:	437d      	muls	r5, r7
1005b70e:	0068      	lsls	r0, r5, #1
1005b710:	1830      	adds	r0, r6, r0
1005b712:	f3ef 8110 	mrs	r1, PRIMASK
1005b716:	b672      	cpsid	i
1005b718:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1005b71a:	43c9      	mvns	r1, r1
1005b71c:	1840      	adds	r0, r0, r1
1005b71e:	d400      	bmi.n	1005b722 <llc_conn_peripheral_roll_back_params+0x3a>
1005b720:	e089      	b.n	1005b836 <llc_conn_peripheral_roll_back_params+0x14e>
1005b722:	2083      	movs	r0, #131	@ 0x83
1005b724:	0040      	lsls	r0, r0, #1
1005b726:	1820      	adds	r0, r4, r0
1005b728:	9008      	str	r0, [sp, #32]
1005b72a:	4630      	mov	r0, r6
1005b72c:	f005 f84a 	bl	100607c4 <LL_sched_is_scheduler_call_pending>
1005b730:	2800      	cmp	r0, #0
1005b732:	d004      	beq.n	1005b73e <llc_conn_peripheral_roll_back_params+0x56>
1005b734:	4941      	ldr	r1, [pc, #260]	@ (1005b83c <__arm_cp.14_0>)
1005b736:	6809      	ldr	r1, [r1, #0]
1005b738:	7bc9      	ldrb	r1, [r1, #15]
1005b73a:	2903      	cmp	r1, #3
1005b73c:	d171      	bne.n	1005b822 <llc_conn_peripheral_roll_back_params+0x13a>
1005b73e:	9706      	str	r7, [sp, #24]
1005b740:	9004      	str	r0, [sp, #16]
1005b742:	4620      	mov	r0, r4
1005b744:	3031      	adds	r0, #49	@ 0x31
1005b746:	9007      	str	r0, [sp, #28]
1005b748:	4620      	mov	r0, r4
1005b74a:	3042      	adds	r0, #66	@ 0x42
1005b74c:	9005      	str	r0, [sp, #20]
1005b74e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b750:	1b80      	subs	r0, r0, r6
1005b752:	2700      	movs	r7, #0
1005b754:	2108      	movs	r1, #8
1005b756:	b24a      	sxtb	r2, r1
1005b758:	2a00      	cmp	r2, #0
1005b75a:	d40c      	bmi.n	1005b776 <llc_conn_peripheral_roll_back_params+0x8e>
1005b75c:	b2cb      	uxtb	r3, r1
1005b75e:	462a      	mov	r2, r5
1005b760:	409a      	lsls	r2, r3
1005b762:	4290      	cmp	r0, r2
1005b764:	d302      	bcc.n	1005b76c <llc_conn_peripheral_roll_back_params+0x84>
1005b766:	2601      	movs	r6, #1
1005b768:	409e      	lsls	r6, r3
1005b76a:	19bf      	adds	r7, r7, r6
1005b76c:	1a82      	subs	r2, r0, r2
1005b76e:	d300      	bcc.n	1005b772 <llc_conn_peripheral_roll_back_params+0x8a>
1005b770:	4610      	mov	r0, r2
1005b772:	1e49      	subs	r1, r1, #1
1005b774:	e7ef      	b.n	1005b756 <llc_conn_peripheral_roll_back_params+0x6e>
1005b776:	9908      	ldr	r1, [sp, #32]
1005b778:	8b88      	ldrh	r0, [r1, #28]
1005b77a:	4347      	muls	r7, r0
1005b77c:	9a05      	ldr	r2, [sp, #20]
1005b77e:	8810      	ldrh	r0, [r2, #0]
1005b780:	1bc0      	subs	r0, r0, r7
1005b782:	8010      	strh	r0, [r2, #0]
1005b784:	b2be      	uxth	r6, r7
1005b786:	9d07      	ldr	r5, [sp, #28]
1005b788:	7c28      	ldrb	r0, [r5, #16]
1005b78a:	7809      	ldrb	r1, [r1, #0]
1005b78c:	2901      	cmp	r1, #1
1005b78e:	d10f      	bne.n	1005b7b0 <llc_conn_peripheral_roll_back_params+0xc8>
1005b790:	4617      	mov	r7, r2
1005b792:	f7f8 fc66 	bl	10054062 <BLEPLAT_CNTR_SmGetAccessAddr>
1005b796:	883f      	ldrh	r7, [r7, #0]
1005b798:	7c2a      	ldrb	r2, [r5, #16]
1005b79a:	2300      	movs	r3, #0
1005b79c:	9300      	str	r3, [sp, #0]
1005b79e:	9001      	str	r0, [sp, #4]
1005b7a0:	9302      	str	r3, [sp, #8]
1005b7a2:	4621      	mov	r1, r4
1005b7a4:	31e0      	adds	r1, #224	@ 0xe0
1005b7a6:	4610      	mov	r0, r2
1005b7a8:	463a      	mov	r2, r7
1005b7aa:	f000 fa1e 	bl	1005bbea <llc_mngm_csa2_select_channel_for_task>
1005b7ae:	e010      	b.n	1005b7d2 <llc_conn_peripheral_roll_back_params+0xea>
1005b7b0:	f7f8 fcce 	bl	10054150 <BLEPLAT_CNTR_SmGetHopIncr>
1005b7b4:	2125      	movs	r1, #37	@ 0x25
1005b7b6:	1a08      	subs	r0, r1, r0
1005b7b8:	9008      	str	r0, [sp, #32]
1005b7ba:	4347      	muls	r7, r0
1005b7bc:	7828      	ldrb	r0, [r5, #0]
1005b7be:	1838      	adds	r0, r7, r0
1005b7c0:	b280      	uxth	r0, r0
1005b7c2:	f000 f9e7 	bl	1005bb94 <llc_mngm_mod_37>
1005b7c6:	7028      	strb	r0, [r5, #0]
1005b7c8:	9908      	ldr	r1, [sp, #32]
1005b7ca:	1808      	adds	r0, r1, r0
1005b7cc:	b280      	uxth	r0, r0
1005b7ce:	f000 f9e1 	bl	1005bb94 <llc_mngm_mod_37>
1005b7d2:	4601      	mov	r1, r0
1005b7d4:	462f      	mov	r7, r5
1005b7d6:	7c28      	ldrb	r0, [r5, #16]
1005b7d8:	f7f8 fef5 	bl	100545c6 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b7dc:	9806      	ldr	r0, [sp, #24]
1005b7de:	4346      	muls	r6, r0
1005b7e0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b7e2:	1b80      	subs	r0, r0, r6
1005b7e4:	6460      	str	r0, [r4, #68]	@ 0x44
1005b7e6:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005b7e8:	4631      	mov	r1, r6
1005b7ea:	f004 fd05 	bl	100601f8 <LL_link_calculate_window_widening_from_ppm>
1005b7ee:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
1005b7f0:	4282      	cmp	r2, r0
1005b7f2:	d904      	bls.n	1005b7fe <llc_conn_peripheral_roll_back_params+0x116>
1005b7f4:	1a12      	subs	r2, r2, r0
1005b7f6:	2a0d      	cmp	r2, #13
1005b7f8:	d800      	bhi.n	1005b7fc <llc_conn_peripheral_roll_back_params+0x114>
1005b7fa:	220d      	movs	r2, #13
1005b7fc:	64a2      	str	r2, [r4, #72]	@ 0x48
1005b7fe:	9d04      	ldr	r5, [sp, #16]
1005b800:	6e60      	ldr	r0, [r4, #100]	@ 0x64
1005b802:	1980      	adds	r0, r0, r6
1005b804:	6660      	str	r0, [r4, #100]	@ 0x64
1005b806:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005b808:	0051      	lsls	r1, r2, #1
1005b80a:	1809      	adds	r1, r1, r0
1005b80c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b80e:	1a82      	subs	r2, r0, r2
1005b810:	7c38      	ldrb	r0, [r7, #16]
1005b812:	f004 ff7f 	bl	10060714 <LL_sched_set_taskslot_length_anchor>
1005b816:	2d00      	cmp	r5, #0
1005b818:	d10d      	bne.n	1005b836 <llc_conn_peripheral_roll_back_params+0x14e>
1005b81a:	7c38      	ldrb	r0, [r7, #16]
1005b81c:	f004 fff4 	bl	10060808 <LL_sched_engine>
1005b820:	e009      	b.n	1005b836 <llc_conn_peripheral_roll_back_params+0x14e>
1005b822:	9a08      	ldr	r2, [sp, #32]
1005b824:	7850      	ldrb	r0, [r2, #1]
1005b826:	2101      	movs	r1, #1
1005b828:	4301      	orrs	r1, r0
1005b82a:	7051      	strb	r1, [r2, #1]
1005b82c:	2013      	movs	r0, #19
1005b82e:	f007 f9a1 	bl	10062b74 <tsk_notify_idx>
1005b832:	f7f6 fb22 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005b836:	b662      	cpsie	i
1005b838:	b009      	add	sp, #36	@ 0x24
1005b83a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b83c <__arm_cp.14_0>:
1005b83c:	2000246c 	.word	0x2000246c

1005b840 <llc_conn_reserve_conn_idx>:
1005b840:	b510      	push	{r4, lr}
1005b842:	2400      	movs	r4, #0
1005b844:	4620      	mov	r0, r4
1005b846:	f7fe fd71 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005b84a:	490a      	ldr	r1, [pc, #40]	@ (1005b874 <__arm_cp.15_0>)
1005b84c:	6809      	ldr	r1, [r1, #0]
1005b84e:	2234      	movs	r2, #52	@ 0x34
1005b850:	5c89      	ldrb	r1, [r1, r2]
1005b852:	302c      	adds	r0, #44	@ 0x2c
1005b854:	42a1      	cmp	r1, r4
1005b856:	d007      	beq.n	1005b868 <llc_conn_reserve_conn_idx+0x28>
1005b858:	7802      	ldrb	r2, [r0, #0]
1005b85a:	2a00      	cmp	r2, #0
1005b85c:	d006      	beq.n	1005b86c <llc_conn_reserve_conn_idx+0x2c>
1005b85e:	224d      	movs	r2, #77	@ 0x4d
1005b860:	0092      	lsls	r2, r2, #2
1005b862:	1880      	adds	r0, r0, r2
1005b864:	1c64      	adds	r4, r4, #1
1005b866:	e7f5      	b.n	1005b854 <llc_conn_reserve_conn_idx+0x14>
1005b868:	24ff      	movs	r4, #255	@ 0xff
1005b86a:	e001      	b.n	1005b870 <llc_conn_reserve_conn_idx+0x30>
1005b86c:	2101      	movs	r1, #1
1005b86e:	7001      	strb	r1, [r0, #0]
1005b870:	b2e0      	uxtb	r0, r4
1005b872:	bd10      	pop	{r4, pc}

1005b874 <__arm_cp.15_0>:
1005b874:	20002414 	.word	0x20002414

1005b878 <llc_conn_send_acl_data>:
1005b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b87a:	4606      	mov	r6, r0
1005b87c:	8800      	ldrh	r0, [r0, #0]
1005b87e:	f7fe fd63 	bl	1005a348 <llc_conn_get_cntxt_per_p_from_handle>
1005b882:	2800      	cmp	r0, #0
1005b884:	d012      	beq.n	1005b8ac <llc_conn_send_acl_data+0x34>
1005b886:	4604      	mov	r4, r0
1005b888:	4607      	mov	r7, r0
1005b88a:	372c      	adds	r7, #44	@ 0x2c
1005b88c:	f3ef 8010 	mrs	r0, PRIMASK
1005b890:	b672      	cpsid	i
1005b892:	463d      	mov	r5, r7
1005b894:	3554      	adds	r5, #84	@ 0x54
1005b896:	4628      	mov	r0, r5
1005b898:	4631      	mov	r1, r6
1005b89a:	f007 fb61 	bl	10062f60 <ACL_list_insert_tail>
1005b89e:	7838      	ldrb	r0, [r7, #0]
1005b8a0:	2803      	cmp	r0, #3
1005b8a2:	d105      	bne.n	1005b8b0 <llc_conn_send_acl_data+0x38>
1005b8a4:	4620      	mov	r0, r4
1005b8a6:	f7ff ff1f 	bl	1005b6e8 <llc_conn_peripheral_roll_back_params>
1005b8aa:	e01a      	b.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b8ac:	2002      	movs	r0, #2
1005b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b8b0:	7d78      	ldrb	r0, [r7, #21]
1005b8b2:	4e28      	ldr	r6, [pc, #160]	@ (1005b954 <__arm_cp.16_0>)
1005b8b4:	6831      	ldr	r1, [r6, #0]
1005b8b6:	7b49      	ldrb	r1, [r1, #13]
1005b8b8:	4288      	cmp	r0, r1
1005b8ba:	d112      	bne.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b8bc:	f7f7 f98f 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
1005b8c0:	6831      	ldr	r1, [r6, #0]
1005b8c2:	6809      	ldr	r1, [r1, #0]
1005b8c4:	43c9      	mvns	r1, r1
1005b8c6:	1840      	adds	r0, r0, r1
1005b8c8:	2101      	movs	r1, #1
1005b8ca:	0289      	lsls	r1, r1, #10
1005b8cc:	1840      	adds	r0, r0, r1
1005b8ce:	d508      	bpl.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b8d0:	205c      	movs	r0, #92	@ 0x5c
1005b8d2:	5c38      	ldrb	r0, [r7, r0]
1005b8d4:	0640      	lsls	r0, r0, #25
1005b8d6:	d404      	bmi.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b8d8:	4620      	mov	r0, r4
1005b8da:	f7fe ffe4 	bl	1005a8a6 <llc_conn_get_tx_acl_blocked>
1005b8de:	2800      	cmp	r0, #0
1005b8e0:	d002      	beq.n	1005b8e8 <llc_conn_send_acl_data+0x70>
1005b8e2:	b662      	cpsie	i
1005b8e4:	2084      	movs	r0, #132	@ 0x84
1005b8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b8e8:	4620      	mov	r0, r4
1005b8ea:	f7f8 fa12 	bl	10053d12 <BLEPLAT_CNTR_PacketGetDataPtr>
1005b8ee:	4606      	mov	r6, r0
1005b8f0:	4620      	mov	r0, r4
1005b8f2:	3028      	adds	r0, #40	@ 0x28
1005b8f4:	4286      	cmp	r6, r0
1005b8f6:	d00a      	beq.n	1005b90e <llc_conn_send_acl_data+0x96>
1005b8f8:	2101      	movs	r1, #1
1005b8fa:	4620      	mov	r0, r4
1005b8fc:	f7fe ffac 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005b900:	4286      	cmp	r6, r0
1005b902:	d0ee      	beq.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b904:	7830      	ldrb	r0, [r6, #0]
1005b906:	2110      	movs	r1, #16
1005b908:	4301      	orrs	r1, r0
1005b90a:	7031      	strb	r1, [r6, #0]
1005b90c:	e7e9      	b.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b90e:	4812      	ldr	r0, [pc, #72]	@ (1005b958 <__arm_cp.16_1>)
1005b910:	6800      	ldr	r0, [r0, #0]
1005b912:	218c      	movs	r1, #140	@ 0x8c
1005b914:	5840      	ldr	r0, [r0, r1]
1005b916:	682e      	ldr	r6, [r5, #0]
1005b918:	8a31      	ldrh	r1, [r6, #16]
1005b91a:	89f2      	ldrh	r2, [r6, #14]
1005b91c:	1851      	adds	r1, r2, r1
1005b91e:	221f      	movs	r2, #31
1005b920:	400a      	ands	r2, r1
1005b922:	1817      	adds	r7, r2, r0
1005b924:	1cbd      	adds	r5, r7, #2
1005b926:	4620      	mov	r0, r4
1005b928:	4629      	mov	r1, r5
1005b92a:	f7f8 fa34 	bl	10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>
1005b92e:	4620      	mov	r0, r4
1005b930:	4631      	mov	r1, r6
1005b932:	f7fe fee5 	bl	1005a700 <llc_conn_copy_tx_data_packet>
1005b936:	67e6      	str	r6, [r4, #124]	@ 0x7c
1005b938:	78f8      	ldrb	r0, [r7, #3]
1005b93a:	2800      	cmp	r0, #0
1005b93c:	d0d1      	beq.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b93e:	2101      	movs	r1, #1
1005b940:	4620      	mov	r0, r4
1005b942:	f7fe ff8f 	bl	1005a864 <llc_conn_get_enc_on>
1005b946:	2801      	cmp	r0, #1
1005b948:	d1cb      	bne.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b94a:	7868      	ldrb	r0, [r5, #1]
1005b94c:	1d00      	adds	r0, r0, #4
1005b94e:	7068      	strb	r0, [r5, #1]
1005b950:	e7c7      	b.n	1005b8e2 <llc_conn_send_acl_data+0x6a>
1005b952:	46c0      	nop			@ (mov r8, r8)

1005b954 <__arm_cp.16_0>:
1005b954:	2000246c 	.word	0x2000246c

1005b958 <__arm_cp.16_1>:
1005b958:	20002468 	.word	0x20002468

1005b95c <llc_conn_set_taskslot_params>:
1005b95c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b95e:	b085      	sub	sp, #20
1005b960:	460f      	mov	r7, r1
1005b962:	4604      	mov	r4, r0
1005b964:	2041      	movs	r0, #65	@ 0x41
1005b966:	5c20      	ldrb	r0, [r4, r0]
1005b968:	2183      	movs	r1, #131	@ 0x83
1005b96a:	0049      	lsls	r1, r1, #1
1005b96c:	5c61      	ldrb	r1, [r4, r1]
1005b96e:	4625      	mov	r5, r4
1005b970:	352c      	adds	r5, #44	@ 0x2c
1005b972:	2901      	cmp	r1, #1
1005b974:	d10d      	bne.n	1005b992 <llc_conn_set_taskslot_params+0x36>
1005b976:	f7f8 fb74 	bl	10054062 <BLEPLAT_CNTR_SmGetAccessAddr>
1005b97a:	8aea      	ldrh	r2, [r5, #22]
1005b97c:	7d6e      	ldrb	r6, [r5, #21]
1005b97e:	2300      	movs	r3, #0
1005b980:	9300      	str	r3, [sp, #0]
1005b982:	9001      	str	r0, [sp, #4]
1005b984:	9302      	str	r3, [sp, #8]
1005b986:	4621      	mov	r1, r4
1005b988:	31e0      	adds	r1, #224	@ 0xe0
1005b98a:	4630      	mov	r0, r6
1005b98c:	f000 f92d 	bl	1005bbea <llc_mngm_csa2_select_channel_for_task>
1005b990:	e010      	b.n	1005b9b4 <llc_conn_set_taskslot_params+0x58>
1005b992:	4616      	mov	r6, r2
1005b994:	f7f8 fbdc 	bl	10054150 <BLEPLAT_CNTR_SmGetHopIncr>
1005b998:	9704      	str	r7, [sp, #16]
1005b99a:	4607      	mov	r7, r0
1005b99c:	4346      	muls	r6, r0
1005b99e:	7968      	ldrb	r0, [r5, #5]
1005b9a0:	1836      	adds	r6, r6, r0
1005b9a2:	b2b0      	uxth	r0, r6
1005b9a4:	f000 f8f6 	bl	1005bb94 <llc_mngm_mod_37>
1005b9a8:	7168      	strb	r0, [r5, #5]
1005b9aa:	1bf0      	subs	r0, r6, r7
1005b9ac:	9f04      	ldr	r7, [sp, #16]
1005b9ae:	b280      	uxth	r0, r0
1005b9b0:	f000 f8f0 	bl	1005bb94 <llc_mngm_mod_37>
1005b9b4:	4601      	mov	r1, r0
1005b9b6:	7d68      	ldrb	r0, [r5, #21]
1005b9b8:	f7f8 fe05 	bl	100545c6 <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b9bc:	7828      	ldrb	r0, [r5, #0]
1005b9be:	2802      	cmp	r0, #2
1005b9c0:	d10c      	bne.n	1005b9dc <llc_conn_set_taskslot_params+0x80>
1005b9c2:	4620      	mov	r0, r4
1005b9c4:	f7f8 fa8c 	bl	10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>
1005b9c8:	4620      	mov	r0, r4
1005b9ca:	f7f8 f9f3 	bl	10053db4 <BLEPLAT_CNTR_PacketSetIncChan>
1005b9ce:	7d68      	ldrb	r0, [r5, #21]
1005b9d0:	f7f8 fdae 	bl	10054530 <BLEPLAT_CNTR_SmSetTxMode>
1005b9d4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
1005b9d6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
1005b9d8:	7d68      	ldrb	r0, [r5, #21]
1005b9da:	e02d      	b.n	1005ba38 <llc_conn_set_taskslot_params+0xdc>
1005b9dc:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
1005b9de:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005b9e0:	4639      	mov	r1, r7
1005b9e2:	f004 fc09 	bl	100601f8 <LL_link_calculate_window_widening_from_ppm>
1005b9e6:	1980      	adds	r0, r0, r6
1005b9e8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005b9ea:	2900      	cmp	r1, #0
1005b9ec:	d100      	bne.n	1005b9f0 <llc_conn_set_taskslot_params+0x94>
1005b9ee:	300d      	adds	r0, #13
1005b9f0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005b9f2:	0849      	lsrs	r1, r1, #1
1005b9f4:	393e      	subs	r1, #62	@ 0x3e
1005b9f6:	4288      	cmp	r0, r1
1005b9f8:	d901      	bls.n	1005b9fe <llc_conn_set_taskslot_params+0xa2>
1005b9fa:	2008      	movs	r0, #8
1005b9fc:	e022      	b.n	1005ba44 <llc_conn_set_taskslot_params+0xe8>
1005b9fe:	64a0      	str	r0, [r4, #72]	@ 0x48
1005ba00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1005ba02:	0040      	lsls	r0, r0, #1
1005ba04:	2900      	cmp	r1, #0
1005ba06:	d001      	beq.n	1005ba0c <llc_conn_set_taskslot_params+0xb0>
1005ba08:	180f      	adds	r7, r1, r0
1005ba0a:	e005      	b.n	1005ba18 <llc_conn_set_taskslot_params+0xbc>
1005ba0c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
1005ba0e:	1808      	adds	r0, r1, r0
1005ba10:	6d27      	ldr	r7, [r4, #80]	@ 0x50
1005ba12:	42b8      	cmp	r0, r7
1005ba14:	d800      	bhi.n	1005ba18 <llc_conn_set_taskslot_params+0xbc>
1005ba16:	4607      	mov	r7, r0
1005ba18:	4626      	mov	r6, r4
1005ba1a:	3614      	adds	r6, #20
1005ba1c:	4630      	mov	r0, r6
1005ba1e:	f7f8 fa5f 	bl	10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>
1005ba22:	4630      	mov	r0, r6
1005ba24:	f7f8 f9c6 	bl	10053db4 <BLEPLAT_CNTR_PacketSetIncChan>
1005ba28:	7d68      	ldrb	r0, [r5, #21]
1005ba2a:	f7f8 fd15 	bl	10054458 <BLEPLAT_CNTR_SmSetRxMode>
1005ba2e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005ba30:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005ba32:	1a42      	subs	r2, r0, r1
1005ba34:	7d68      	ldrb	r0, [r5, #21]
1005ba36:	4639      	mov	r1, r7
1005ba38:	f004 fe6c 	bl	10060714 <LL_sched_set_taskslot_length_anchor>
1005ba3c:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
1005ba3e:	1c40      	adds	r0, r0, #1
1005ba40:	8660      	strh	r0, [r4, #50]	@ 0x32
1005ba42:	2000      	movs	r0, #0
1005ba44:	b005      	add	sp, #20
1005ba46:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ba48 <llc_conn_update_receive_window>:
1005ba48:	b570      	push	{r4, r5, r6, lr}
1005ba4a:	4604      	mov	r4, r0
1005ba4c:	4606      	mov	r6, r0
1005ba4e:	362c      	adds	r6, #44	@ 0x2c
1005ba50:	4605      	mov	r5, r0
1005ba52:	35d0      	adds	r5, #208	@ 0xd0
1005ba54:	f7f3 fa8e 	bl	1004ef74 <phy_upd_csr_ucfg>
1005ba58:	2801      	cmp	r0, #1
1005ba5a:	d10b      	bne.n	1005ba74 <llc_conn_update_receive_window+0x2c>
1005ba5c:	7930      	ldrb	r0, [r6, #4]
1005ba5e:	210e      	movs	r1, #14
1005ba60:	4341      	muls	r1, r0
1005ba62:	480e      	ldr	r0, [pc, #56]	@ (1005ba9c <__arm_cp.18_0>)
1005ba64:	6800      	ldr	r0, [r0, #0]
1005ba66:	229c      	movs	r2, #156	@ 0x9c
1005ba68:	5880      	ldr	r0, [r0, r2]
1005ba6a:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005ba6c:	6940      	ldr	r0, [r0, #20]
1005ba6e:	1840      	adds	r0, r0, r1
1005ba70:	79c0      	ldrb	r0, [r0, #7]
1005ba72:	e000      	b.n	1005ba76 <llc_conn_update_receive_window+0x2e>
1005ba74:	2001      	movs	r0, #1
1005ba76:	f7f8 fdca 	bl	1005460e <BLEPLAT_CNTR_DemodDelaySt>
1005ba7a:	4909      	ldr	r1, [pc, #36]	@ (1005baa0 <__arm_cp.18_1>)
1005ba7c:	4348      	muls	r0, r1
1005ba7e:	0a00      	lsrs	r0, r0, #8
1005ba80:	3010      	adds	r0, #16
1005ba82:	6028      	str	r0, [r5, #0]
1005ba84:	7832      	ldrb	r2, [r6, #0]
1005ba86:	2a03      	cmp	r2, #3
1005ba88:	d107      	bne.n	1005ba9a <llc_conn_update_receive_window+0x52>
1005ba8a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
1005ba8c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
1005ba8e:	005b      	lsls	r3, r3, #1
1005ba90:	189a      	adds	r2, r3, r2
1005ba92:	4351      	muls	r1, r2
1005ba94:	0a09      	lsrs	r1, r1, #8
1005ba96:	1808      	adds	r0, r1, r0
1005ba98:	6028      	str	r0, [r5, #0]
1005ba9a:	bd70      	pop	{r4, r5, r6, pc}

1005ba9c <__arm_cp.18_0>:
1005ba9c:	20002468 	.word	0x20002468

1005baa0 <__arm_cp.18_1>:
1005baa0:	00000271 	.word	0x00000271

1005baa4 <llc_conn_peripheral_roll_back_params_tsk>:
1005baa4:	b570      	push	{r4, r5, r6, lr}
1005baa6:	2400      	movs	r4, #0
1005baa8:	4620      	mov	r0, r4
1005baaa:	f7fe fc3f 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005baae:	4605      	mov	r5, r0
1005bab0:	4e0a      	ldr	r6, [pc, #40]	@ (1005badc <__arm_cp.20_0>)
1005bab2:	6830      	ldr	r0, [r6, #0]
1005bab4:	2134      	movs	r1, #52	@ 0x34
1005bab6:	5c41      	ldrb	r1, [r0, r1]
1005bab8:	428c      	cmp	r4, r1
1005baba:	d20d      	bcs.n	1005bad8 <llc_conn_peripheral_roll_back_params_tsk+0x34>
1005babc:	21ff      	movs	r1, #255	@ 0xff
1005babe:	3108      	adds	r1, #8
1005bac0:	5c69      	ldrb	r1, [r5, r1]
1005bac2:	07c9      	lsls	r1, r1, #31
1005bac4:	d003      	beq.n	1005bace <llc_conn_peripheral_roll_back_params_tsk+0x2a>
1005bac6:	4628      	mov	r0, r5
1005bac8:	f7ff fe0e 	bl	1005b6e8 <llc_conn_peripheral_roll_back_params>
1005bacc:	6830      	ldr	r0, [r6, #0]
1005bace:	214d      	movs	r1, #77	@ 0x4d
1005bad0:	0089      	lsls	r1, r1, #2
1005bad2:	186d      	adds	r5, r5, r1
1005bad4:	1c64      	adds	r4, r4, #1
1005bad6:	e7ed      	b.n	1005bab4 <llc_conn_peripheral_roll_back_params_tsk+0x10>
1005bad8:	bd70      	pop	{r4, r5, r6, pc}
1005bada:	46c0      	nop			@ (mov r8, r8)

1005badc <__arm_cp.20_0>:
1005badc:	20002414 	.word	0x20002414

1005bae0 <llc_conn_set_blue_packets>:
1005bae0:	b570      	push	{r4, r5, r6, lr}
1005bae2:	4616      	mov	r6, r2
1005bae4:	460d      	mov	r5, r1
1005bae6:	4604      	mov	r4, r0
1005bae8:	f7f8 f920 	bl	10053d2c <BLEPLAT_CNTR_PacketInitTo0>
1005baec:	4620      	mov	r0, r4
1005baee:	f7f8 f938 	bl	10053d62 <BLEPLAT_CNTR_PacketSetCrcinitSel>
1005baf2:	4620      	mov	r0, r4
1005baf4:	f7f8 f976 	bl	10053de4 <BLEPLAT_CNTR_PacketSetIntDone>
1005baf8:	4620      	mov	r0, r4
1005bafa:	4621      	mov	r1, r4
1005bafc:	f7f8 f9b0 	bl	10053e60 <BLEPLAT_CNTR_PacketSetNextPtr>
1005bb00:	4620      	mov	r0, r4
1005bb02:	f7f8 f9e1 	bl	10053ec8 <BLEPLAT_CNTR_PacketSetNsEn>
1005bb06:	4620      	mov	r0, r4
1005bb08:	4631      	mov	r1, r6
1005bb0a:	f7f8 f9c5 	bl	10053e98 <BLEPLAT_CNTR_PacketSetNextSlot>
1005bb0e:	4620      	mov	r0, r4
1005bb10:	f7f8 fa0f 	bl	10053f32 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005bb14:	4620      	mov	r0, r4
1005bb16:	f7f8 f9e3 	bl	10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>
1005bb1a:	4620      	mov	r0, r4
1005bb1c:	f7f8 f94a 	bl	10053db4 <BLEPLAT_CNTR_PacketSetIncChan>
1005bb20:	4620      	mov	r0, r4
1005bb22:	f7f8 f990 	bl	10053e46 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005bb26:	2d00      	cmp	r5, #0
1005bb28:	d00d      	beq.n	1005bb46 <llc_conn_set_blue_packets+0x66>
1005bb2a:	2094      	movs	r0, #148	@ 0x94
1005bb2c:	2100      	movs	r1, #0
1005bb2e:	460a      	mov	r2, r1
1005bb30:	f7f7 ff8a 	bl	10053a48 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005bb34:	4601      	mov	r1, r0
1005bb36:	4620      	mov	r0, r4
1005bb38:	f7f8 f9ec 	bl	10053f14 <BLEPLAT_CNTR_PacketSetTimeout>
1005bb3c:	4620      	mov	r0, r4
1005bb3e:	4629      	mov	r1, r5
1005bb40:	f7f8 f929 	bl	10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>
1005bb44:	bd70      	pop	{r4, r5, r6, pc}
1005bb46:	4812      	ldr	r0, [pc, #72]	@ (1005bb90 <__arm_cp.21_0>)
1005bb48:	6800      	ldr	r0, [r0, #0]
1005bb4a:	2190      	movs	r1, #144	@ 0x90
1005bb4c:	5845      	ldr	r5, [r0, r1]
1005bb4e:	2096      	movs	r0, #150	@ 0x96
1005bb50:	2101      	movs	r1, #1
1005bb52:	2200      	movs	r2, #0
1005bb54:	f7f7 ff78 	bl	10053a48 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005bb58:	4601      	mov	r1, r0
1005bb5a:	4620      	mov	r0, r4
1005bb5c:	f7f8 f9da 	bl	10053f14 <BLEPLAT_CNTR_PacketSetTimeout>
1005bb60:	4620      	mov	r0, r4
1005bb62:	f7f8 f94b 	bl	10053dfc <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005bb66:	4620      	mov	r0, r4
1005bb68:	f7f8 f960 	bl	10053e2c <BLEPLAT_CNTR_PacketSetIntTxOk>
1005bb6c:	4620      	mov	r0, r4
1005bb6e:	f7f8 f951 	bl	10053e14 <BLEPLAT_CNTR_PacketSetIntTimeout>
1005bb72:	4620      	mov	r0, r4
1005bb74:	f7f8 f92a 	bl	10053dcc <BLEPLAT_CNTR_PacketSetIntCrcErr>
1005bb78:	1ca9      	adds	r1, r5, #2
1005bb7a:	4620      	mov	r0, r4
1005bb7c:	f7f8 f90b 	bl	10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>
1005bb80:	4620      	mov	r0, r4
1005bb82:	f7f8 f994 	bl	10053eae <BLEPLAT_CNTR_PacketSetNextTxMode>
1005bb86:	4620      	mov	r0, r4
1005bb88:	f7f8 f9ec 	bl	10053f64 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005bb8c:	bd70      	pop	{r4, r5, r6, pc}
1005bb8e:	46c0      	nop			@ (mov r8, r8)

1005bb90 <__arm_cp.21_0>:
1005bb90:	20002468 	.word	0x20002468

1005bb94 <llc_mngm_mod_37>:
1005bb94:	4906      	ldr	r1, [pc, #24]	@ (1005bbb0 <__arm_cp.0_0>)
1005bb96:	4341      	muls	r1, r0
1005bb98:	0c09      	lsrs	r1, r1, #16
1005bb9a:	2224      	movs	r2, #36	@ 0x24
1005bb9c:	43d2      	mvns	r2, r2
1005bb9e:	434a      	muls	r2, r1
1005bba0:	1810      	adds	r0, r2, r0
1005bba2:	b281      	uxth	r1, r0
1005bba4:	2924      	cmp	r1, #36	@ 0x24
1005bba6:	d900      	bls.n	1005bbaa <llc_mngm_mod_37+0x16>
1005bba8:	3825      	subs	r0, #37	@ 0x25
1005bbaa:	b2c0      	uxtb	r0, r0
1005bbac:	4770      	bx	lr
1005bbae:	46c0      	nop			@ (mov r8, r8)

1005bbb0 <__arm_cp.0_0>:
1005bbb0:	000006eb 	.word	0x000006eb

1005bbb4 <llc_mngm_csa2_update_remapping_table>:
1005bbb4:	b570      	push	{r4, r5, r6, lr}
1005bbb6:	460d      	mov	r5, r1
1005bbb8:	4604      	mov	r4, r0
1005bbba:	1c40      	adds	r0, r0, #1
1005bbbc:	2600      	movs	r6, #0
1005bbbe:	2225      	movs	r2, #37	@ 0x25
1005bbc0:	4631      	mov	r1, r6
1005bbc2:	f7f6 ff51 	bl	10052a68 <BLEPLAT_MemSet>
1005bbc6:	4630      	mov	r0, r6
1005bbc8:	2e25      	cmp	r6, #37	@ 0x25
1005bbca:	d20c      	bcs.n	1005bbe6 <llc_mngm_csa2_update_remapping_table+0x32>
1005bbcc:	2107      	movs	r1, #7
1005bbce:	4031      	ands	r1, r6
1005bbd0:	08f2      	lsrs	r2, r6, #3
1005bbd2:	5caa      	ldrb	r2, [r5, r2]
1005bbd4:	40ca      	lsrs	r2, r1
1005bbd6:	07d1      	lsls	r1, r2, #31
1005bbd8:	d003      	beq.n	1005bbe2 <llc_mngm_csa2_update_remapping_table+0x2e>
1005bbda:	b2c1      	uxtb	r1, r0
1005bbdc:	1861      	adds	r1, r4, r1
1005bbde:	704e      	strb	r6, [r1, #1]
1005bbe0:	1c40      	adds	r0, r0, #1
1005bbe2:	1c76      	adds	r6, r6, #1
1005bbe4:	e7f0      	b.n	1005bbc8 <llc_mngm_csa2_update_remapping_table+0x14>
1005bbe6:	7020      	strb	r0, [r4, #0]
1005bbe8:	bd70      	pop	{r4, r5, r6, pc}

1005bbea <llc_mngm_csa2_select_channel_for_task>:
1005bbea:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bbec:	b08b      	sub	sp, #44	@ 0x2c
1005bbee:	9305      	str	r3, [sp, #20]
1005bbf0:	4617      	mov	r7, r2
1005bbf2:	460d      	mov	r5, r1
1005bbf4:	a909      	add	r1, sp, #36	@ 0x24
1005bbf6:	f7f8 fa44 	bl	10054082 <BLEPLAT_CNTR_SmGetChannelMap>
1005bbfa:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005bbfc:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005bbfe:	9006      	str	r0, [sp, #24]
1005bc00:	2800      	cmp	r0, #0
1005bc02:	d018      	beq.n	1005bc36 <llc_mngm_csa2_select_channel_for_task+0x4c>
1005bc04:	9504      	str	r5, [sp, #16]
1005bc06:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005bc08:	2500      	movs	r5, #0
1005bc0a:	9806      	ldr	r0, [sp, #24]
1005bc0c:	42a8      	cmp	r0, r5
1005bc0e:	d010      	beq.n	1005bc32 <llc_mngm_csa2_select_channel_for_task+0x48>
1005bc10:	9804      	ldr	r0, [sp, #16]
1005bc12:	9003      	str	r0, [sp, #12]
1005bc14:	a809      	add	r0, sp, #36	@ 0x24
1005bc16:	9002      	str	r0, [sp, #8]
1005bc18:	a808      	add	r0, sp, #32
1005bc1a:	9001      	str	r0, [sp, #4]
1005bc1c:	a807      	add	r0, sp, #28
1005bc1e:	9000      	str	r0, [sp, #0]
1005bc20:	b2eb      	uxtb	r3, r5
1005bc22:	4620      	mov	r0, r4
1005bc24:	4639      	mov	r1, r7
1005bc26:	9a05      	ldr	r2, [sp, #20]
1005bc28:	f000 f812 	bl	1005bc50 <llc_mngm_csa2_select_channel>
1005bc2c:	5570      	strb	r0, [r6, r5]
1005bc2e:	1c6d      	adds	r5, r5, #1
1005bc30:	e7eb      	b.n	1005bc0a <llc_mngm_csa2_select_channel_for_task+0x20>
1005bc32:	7830      	ldrb	r0, [r6, #0]
1005bc34:	e00a      	b.n	1005bc4c <llc_mngm_csa2_select_channel_for_task+0x62>
1005bc36:	9503      	str	r5, [sp, #12]
1005bc38:	a809      	add	r0, sp, #36	@ 0x24
1005bc3a:	9002      	str	r0, [sp, #8]
1005bc3c:	2200      	movs	r2, #0
1005bc3e:	9201      	str	r2, [sp, #4]
1005bc40:	9200      	str	r2, [sp, #0]
1005bc42:	4620      	mov	r0, r4
1005bc44:	4639      	mov	r1, r7
1005bc46:	4613      	mov	r3, r2
1005bc48:	f000 f802 	bl	1005bc50 <llc_mngm_csa2_select_channel>
1005bc4c:	b00b      	add	sp, #44	@ 0x2c
1005bc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005bc50 <llc_mngm_csa2_select_channel>:
1005bc50:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bc52:	b089      	sub	sp, #36	@ 0x24
1005bc54:	4615      	mov	r5, r2
1005bc56:	aa08      	add	r2, sp, #32
1005bc58:	2600      	movs	r6, #0
1005bc5a:	7016      	strb	r6, [r2, #0]
1005bc5c:	2d00      	cmp	r5, #0
1005bc5e:	9306      	str	r3, [sp, #24]
1005bc60:	461a      	mov	r2, r3
1005bc62:	d100      	bne.n	1005bc66 <llc_mngm_csa2_select_channel+0x16>
1005bc64:	462a      	mov	r2, r5
1005bc66:	0c07      	lsrs	r7, r0, #16
1005bc68:	4047      	eors	r7, r0
1005bc6a:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005bc6c:	9007      	str	r0, [sp, #28]
1005bc6e:	2d00      	cmp	r5, #0
1005bc70:	d104      	bne.n	1005bc7c <llc_mngm_csa2_select_channel+0x2c>
1005bc72:	2300      	movs	r3, #0
1005bc74:	9806      	ldr	r0, [sp, #24]
1005bc76:	2801      	cmp	r0, #1
1005bc78:	461c      	mov	r4, r3
1005bc7a:	d838      	bhi.n	1005bcee <llc_mngm_csa2_select_channel+0x9e>
1005bc7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005bc7e:	9005      	str	r0, [sp, #20]
1005bc80:	4079      	eors	r1, r7
1005bc82:	4051      	eors	r1, r2
1005bc84:	460c      	mov	r4, r1
1005bc86:	2e02      	cmp	r6, #2
1005bc88:	d807      	bhi.n	1005bc9a <llc_mngm_csa2_select_channel+0x4a>
1005bc8a:	b2a0      	uxth	r0, r4
1005bc8c:	f000 f842 	bl	1005bd14 <llc_mngm_csa2_permutation>
1005bc90:	2111      	movs	r1, #17
1005bc92:	4341      	muls	r1, r0
1005bc94:	19cc      	adds	r4, r1, r7
1005bc96:	1c76      	adds	r6, r6, #1
1005bc98:	e7f5      	b.n	1005bc86 <llc_mngm_csa2_select_channel+0x36>
1005bc9a:	4620      	mov	r0, r4
1005bc9c:	4078      	eors	r0, r7
1005bc9e:	b286      	uxth	r6, r0
1005bca0:	4630      	mov	r0, r6
1005bca2:	f7ff ff77 	bl	1005bb94 <llc_mngm_mod_37>
1005bca6:	2824      	cmp	r0, #36	@ 0x24
1005bca8:	d815      	bhi.n	1005bcd6 <llc_mngm_csa2_select_channel+0x86>
1005bcaa:	08c1      	lsrs	r1, r0, #3
1005bcac:	9a05      	ldr	r2, [sp, #20]
1005bcae:	5c52      	ldrb	r2, [r2, r1]
1005bcb0:	00c9      	lsls	r1, r1, #3
1005bcb2:	1a41      	subs	r1, r0, r1
1005bcb4:	b2c9      	uxtb	r1, r1
1005bcb6:	40ca      	lsrs	r2, r1
1005bcb8:	07d1      	lsls	r1, r2, #31
1005bcba:	d00c      	beq.n	1005bcd6 <llc_mngm_csa2_select_channel+0x86>
1005bcbc:	a908      	add	r1, sp, #32
1005bcbe:	7008      	strb	r0, [r1, #0]
1005bcc0:	9a07      	ldr	r2, [sp, #28]
1005bcc2:	1c51      	adds	r1, r2, #1
1005bcc4:	7812      	ldrb	r2, [r2, #0]
1005bcc6:	2300      	movs	r3, #0
1005bcc8:	429a      	cmp	r2, r3
1005bcca:	d00d      	beq.n	1005bce8 <llc_mngm_csa2_select_channel+0x98>
1005bccc:	5cce      	ldrb	r6, [r1, r3]
1005bcce:	4286      	cmp	r6, r0
1005bcd0:	d00b      	beq.n	1005bcea <llc_mngm_csa2_select_channel+0x9a>
1005bcd2:	1c5b      	adds	r3, r3, #1
1005bcd4:	e7f8      	b.n	1005bcc8 <llc_mngm_csa2_select_channel+0x78>
1005bcd6:	9907      	ldr	r1, [sp, #28]
1005bcd8:	7808      	ldrb	r0, [r1, #0]
1005bcda:	4346      	muls	r6, r0
1005bcdc:	0c33      	lsrs	r3, r6, #16
1005bcde:	18c8      	adds	r0, r1, r3
1005bce0:	7840      	ldrb	r0, [r0, #1]
1005bce2:	a908      	add	r1, sp, #32
1005bce4:	7008      	strb	r0, [r1, #0]
1005bce6:	e000      	b.n	1005bcea <llc_mngm_csa2_select_channel+0x9a>
1005bce8:	2325      	movs	r3, #37	@ 0x25
1005bcea:	2d00      	cmp	r5, #0
1005bcec:	d10e      	bne.n	1005bd0c <llc_mngm_csa2_select_channel+0xbc>
1005bcee:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005bcf0:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005bcf2:	ad08      	add	r5, sp, #32
1005bcf4:	b2ba      	uxth	r2, r7
1005bcf6:	9000      	str	r0, [sp, #0]
1005bcf8:	9201      	str	r2, [sp, #4]
1005bcfa:	9807      	ldr	r0, [sp, #28]
1005bcfc:	9002      	str	r0, [sp, #8]
1005bcfe:	9503      	str	r5, [sp, #12]
1005bd00:	b2a2      	uxth	r2, r4
1005bd02:	b2db      	uxtb	r3, r3
1005bd04:	9806      	ldr	r0, [sp, #24]
1005bd06:	f000 f803 	bl	1005bd10 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>
1005bd0a:	7828      	ldrb	r0, [r5, #0]
1005bd0c:	b009      	add	sp, #36	@ 0x24
1005bd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005bd10 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>:
1005bd10:	4770      	bx	lr
	...

1005bd14 <llc_mngm_csa2_permutation>:
1005bd14:	0041      	lsls	r1, r0, #1
1005bd16:	4a0a      	ldr	r2, [pc, #40]	@ (1005bd40 <__arm_cp.7_0>)
1005bd18:	400a      	ands	r2, r1
1005bd1a:	0840      	lsrs	r0, r0, #1
1005bd1c:	4909      	ldr	r1, [pc, #36]	@ (1005bd44 <__arm_cp.7_1>)
1005bd1e:	4001      	ands	r1, r0
1005bd20:	1888      	adds	r0, r1, r2
1005bd22:	0081      	lsls	r1, r0, #2
1005bd24:	4a08      	ldr	r2, [pc, #32]	@ (1005bd48 <__arm_cp.7_2>)
1005bd26:	400a      	ands	r2, r1
1005bd28:	0880      	lsrs	r0, r0, #2
1005bd2a:	4908      	ldr	r1, [pc, #32]	@ (1005bd4c <__arm_cp.7_3>)
1005bd2c:	4001      	ands	r1, r0
1005bd2e:	1888      	adds	r0, r1, r2
1005bd30:	0101      	lsls	r1, r0, #4
1005bd32:	4a07      	ldr	r2, [pc, #28]	@ (1005bd50 <__arm_cp.7_4>)
1005bd34:	400a      	ands	r2, r1
1005bd36:	0900      	lsrs	r0, r0, #4
1005bd38:	4906      	ldr	r1, [pc, #24]	@ (1005bd54 <__arm_cp.7_5>)
1005bd3a:	4001      	ands	r1, r0
1005bd3c:	1888      	adds	r0, r1, r2
1005bd3e:	4770      	bx	lr

1005bd40 <__arm_cp.7_0>:
1005bd40:	0001aaaa 	.word	0x0001aaaa

1005bd44 <__arm_cp.7_1>:
1005bd44:	00005555 	.word	0x00005555

1005bd48 <__arm_cp.7_2>:
1005bd48:	0007cccc 	.word	0x0007cccc

1005bd4c <__arm_cp.7_3>:
1005bd4c:	00003333 	.word	0x00003333

1005bd50 <__arm_cp.7_4>:
1005bd50:	0000f0f0 	.word	0x0000f0f0

1005bd54 <__arm_cp.7_5>:
1005bd54:	00000f0f 	.word	0x00000f0f

1005bd58 <llc_wl_clear_filter_accept_list>:
1005bd58:	b5b0      	push	{r4, r5, r7, lr}
1005bd5a:	2401      	movs	r4, #1
1005bd5c:	4620      	mov	r0, r4
1005bd5e:	f003 f9f7 	bl	1005f150 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005bd62:	4605      	mov	r5, r0
1005bd64:	4620      	mov	r0, r4
1005bd66:	f000 f8b4 	bl	1005bed2 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005bd6a:	4328      	orrs	r0, r5
1005bd6c:	d10a      	bne.n	1005bd84 <llc_wl_clear_filter_accept_list+0x2c>
1005bd6e:	4806      	ldr	r0, [pc, #24]	@ (1005bd88 <__arm_cp.1_0>)
1005bd70:	6800      	ldr	r0, [r0, #0]
1005bd72:	219c      	movs	r1, #156	@ 0x9c
1005bd74:	5840      	ldr	r0, [r0, r1]
1005bd76:	300c      	adds	r0, #12
1005bd78:	f007 fa0f 	bl	1006319a <addr8_list_clear>
1005bd7c:	f000 f85a 	bl	1005be34 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>
1005bd80:	2000      	movs	r0, #0
1005bd82:	bdb0      	pop	{r4, r5, r7, pc}
1005bd84:	200c      	movs	r0, #12
1005bd86:	bdb0      	pop	{r4, r5, r7, pc}

1005bd88 <__arm_cp.1_0>:
1005bd88:	20002468 	.word	0x20002468

1005bd8c <llc_wl_add_device_to_filter_accept_list>:
1005bd8c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005bd8e:	b087      	sub	sp, #28
1005bd90:	460c      	mov	r4, r1
1005bd92:	4605      	mov	r5, r0
1005bd94:	9106      	str	r1, [sp, #24]
1005bd96:	9005      	str	r0, [sp, #20]
1005bd98:	2601      	movs	r6, #1
1005bd9a:	4630      	mov	r0, r6
1005bd9c:	f003 f9d8 	bl	1005f150 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005bda0:	4607      	mov	r7, r0
1005bda2:	4630      	mov	r0, r6
1005bda4:	f000 f895 	bl	1005bed2 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005bda8:	4338      	orrs	r0, r7
1005bdaa:	d11d      	bne.n	1005bde8 <llc_wl_add_device_to_filter_accept_list+0x5c>
1005bdac:	b2e8      	uxtb	r0, r5
1005bdae:	28ff      	cmp	r0, #255	@ 0xff
1005bdb0:	d105      	bne.n	1005bdbe <llc_wl_add_device_to_filter_accept_list+0x32>
1005bdb2:	9005      	str	r0, [sp, #20]
1005bdb4:	21ff      	movs	r1, #255	@ 0xff
1005bdb6:	0609      	lsls	r1, r1, #24
1005bdb8:	400c      	ands	r4, r1
1005bdba:	9406      	str	r4, [sp, #24]
1005bdbc:	4605      	mov	r5, r0
1005bdbe:	4810      	ldr	r0, [pc, #64]	@ (1005be00 <__arm_cp.2_0>)
1005bdc0:	6800      	ldr	r0, [r0, #0]
1005bdc2:	219c      	movs	r1, #156	@ 0x9c
1005bdc4:	5840      	ldr	r0, [r0, r1]
1005bdc6:	a903      	add	r1, sp, #12
1005bdc8:	9101      	str	r1, [sp, #4]
1005bdca:	a904      	add	r1, sp, #16
1005bdcc:	9100      	str	r1, [sp, #0]
1005bdce:	300c      	adds	r0, #12
1005bdd0:	2301      	movs	r3, #1
1005bdd2:	4629      	mov	r1, r5
1005bdd4:	4622      	mov	r2, r4
1005bdd6:	f007 f961 	bl	1006309c <addr8_list_add>
1005bdda:	2800      	cmp	r0, #0
1005bddc:	d006      	beq.n	1005bdec <llc_wl_add_device_to_filter_accept_list+0x60>
1005bdde:	a805      	add	r0, sp, #20
1005bde0:	2101      	movs	r1, #1
1005bde2:	f000 f826 	bl	1005be32 <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>
1005bde6:	e005      	b.n	1005bdf4 <llc_wl_add_device_to_filter_accept_list+0x68>
1005bde8:	200c      	movs	r0, #12
1005bdea:	e006      	b.n	1005bdfa <llc_wl_add_device_to_filter_accept_list+0x6e>
1005bdec:	a803      	add	r0, sp, #12
1005bdee:	7800      	ldrb	r0, [r0, #0]
1005bdf0:	2800      	cmp	r0, #0
1005bdf2:	d001      	beq.n	1005bdf8 <llc_wl_add_device_to_filter_accept_list+0x6c>
1005bdf4:	2000      	movs	r0, #0
1005bdf6:	e000      	b.n	1005bdfa <llc_wl_add_device_to_filter_accept_list+0x6e>
1005bdf8:	2007      	movs	r0, #7
1005bdfa:	b007      	add	sp, #28
1005bdfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005bdfe:	46c0      	nop			@ (mov r8, r8)

1005be00 <__arm_cp.2_0>:
1005be00:	20002468 	.word	0x20002468

1005be04 <bis_csr_ucfg_weak>:
1005be04:	2000      	movs	r0, #0
1005be06:	4770      	bx	lr

1005be08 <cis_csr_ucfg_weak>:
1005be08:	2000      	movs	r0, #0
1005be0a:	4770      	bx	lr

1005be0c <llc_isoal_mem_alloc_ucfg_weak>:
1005be0c:	4770      	bx	lr

1005be0e <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1005be0e:	2000      	movs	r0, #0
1005be10:	4770      	bx	lr

1005be12 <iso_terminate_event_int_cb_ucfg_weak>:
1005be12:	2000      	movs	r0, #0
1005be14:	4770      	bx	lr

1005be16 <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1005be16:	2000      	movs	r0, #0
1005be18:	4770      	bx	lr

1005be1a <llc_iso_cmn_mem_alloc_ucfg_weak>:
1005be1a:	4770      	bx	lr

1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1005be1c:	2000      	movs	r0, #0
1005be1e:	4770      	bx	lr

1005be20 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1005be20:	2000      	movs	r0, #0
1005be22:	4770      	bx	lr

1005be24 <llc_past_init_ucfg_weak>:
1005be24:	4770      	bx	lr

1005be26 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1005be26:	4770      	bx	lr

1005be28 <llc_priv_init_ucfg_weak>:
1005be28:	4770      	bx	lr

1005be2a <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1005be2a:	4770      	bx	lr

1005be2c <llc_priv_offline_rpa_resolution_ucfg_weak>:
1005be2c:	4770      	bx	lr

1005be2e <llc_priv_controller_privacy_csr_ucfg_weak>:
1005be2e:	2000      	movs	r0, #0
1005be30:	4770      	bx	lr

1005be32 <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>:
1005be32:	4770      	bx	lr

1005be34 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>:
1005be34:	4770      	bx	lr

1005be36 <llc_priv_start_privacy_timer_ucfg_weak>:
1005be36:	4770      	bx	lr

1005be38 <llc_priv_stop_privacy_timer_ucfg_weak>:
1005be38:	4770      	bx	lr

1005be3a <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1005be3a:	4770      	bx	lr

1005be3c <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>:
1005be3c:	4770      	bx	lr
	...

1005be40 <llc_pscan_get_cntxt_per_p>:
1005be40:	218c      	movs	r1, #140	@ 0x8c
1005be42:	4341      	muls	r1, r0
1005be44:	4804      	ldr	r0, [pc, #16]	@ (1005be58 <__arm_cp.1_0>)
1005be46:	6800      	ldr	r0, [r0, #0]
1005be48:	229c      	movs	r2, #156	@ 0x9c
1005be4a:	5880      	ldr	r0, [r0, r2]
1005be4c:	6840      	ldr	r0, [r0, #4]
1005be4e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1005be50:	6800      	ldr	r0, [r0, #0]
1005be52:	6800      	ldr	r0, [r0, #0]
1005be54:	1840      	adds	r0, r0, r1
1005be56:	4770      	bx	lr

1005be58 <__arm_cp.1_0>:
1005be58:	20002468 	.word	0x20002468

1005be5c <llc_pscan_init_ucfg_weak>:
1005be5c:	4770      	bx	lr

1005be5e <llc_pscan_mem_allocate_ucfg_weak>:
1005be5e:	4770      	bx	lr

1005be60 <llc_pscan_wr_init_ucfg_weak>:
1005be60:	4770      	bx	lr
	...

1005be64 <llc_pscan_wr_mem_allocate_ucfg_weak>:
1005be64:	b510      	push	{r4, lr}
1005be66:	2801      	cmp	r0, #1
1005be68:	d110      	bne.n	1005be8c <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005be6a:	2901      	cmp	r1, #1
1005be6c:	d10e      	bne.n	1005be8c <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005be6e:	2a01      	cmp	r2, #1
1005be70:	d10c      	bne.n	1005be8c <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005be72:	2400      	movs	r4, #0
1005be74:	4620      	mov	r0, r4
1005be76:	f7ff ffe3 	bl	1005be40 <llc_pscan_get_cntxt_per_p>
1005be7a:	3014      	adds	r0, #20
1005be7c:	4904      	ldr	r1, [pc, #16]	@ (1005be90 <__arm_cp.5_0>)
1005be7e:	7f89      	ldrb	r1, [r1, #30]
1005be80:	2900      	cmp	r1, #0
1005be82:	d003      	beq.n	1005be8c <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005be84:	6004      	str	r4, [r0, #0]
1005be86:	308c      	adds	r0, #140	@ 0x8c
1005be88:	1e49      	subs	r1, r1, #1
1005be8a:	e7f9      	b.n	1005be80 <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1005be8c:	bd10      	pop	{r4, pc}
1005be8e:	46c0      	nop			@ (mov r8, r8)

1005be90 <__arm_cp.5_0>:
1005be90:	2000247c 	.word	0x2000247c

1005be94 <llc_pscan_wr_check_pawr_active_ucfg_weak>:
1005be94:	2000      	movs	r0, #0
1005be96:	4770      	bx	lr

1005be98 <llc_scan_get_cntxt_p>:
1005be98:	4802      	ldr	r0, [pc, #8]	@ (1005bea4 <__arm_cp.0_0>)
1005be9a:	6800      	ldr	r0, [r0, #0]
1005be9c:	219c      	movs	r1, #156	@ 0x9c
1005be9e:	5840      	ldr	r0, [r0, r1]
1005bea0:	6840      	ldr	r0, [r0, #4]
1005bea2:	4770      	bx	lr

1005bea4 <__arm_cp.0_0>:
1005bea4:	20002468 	.word	0x20002468

1005bea8 <llc_scan_init_ucfg_weak>:
1005bea8:	4770      	bx	lr

1005beaa <llc_scan_mem_allocate_ucfg_weak>:
1005beaa:	4770      	bx	lr

1005beac <llc_scan_set_scan_channel_bitmap>:
1005beac:	b510      	push	{r4, lr}
1005beae:	4604      	mov	r4, r0
1005beb0:	f7fd fd6c 	bl	1005998c <scan_csr_ucfg_weak>
1005beb4:	2801      	cmp	r0, #1
1005beb6:	d108      	bne.n	1005beca <llc_scan_set_scan_channel_bitmap+0x1e>
1005beb8:	1e60      	subs	r0, r4, #1
1005beba:	2806      	cmp	r0, #6
1005bebc:	d807      	bhi.n	1005bece <llc_scan_set_scan_channel_bitmap+0x22>
1005bebe:	f7ff ffeb 	bl	1005be98 <llc_scan_get_cntxt_p>
1005bec2:	21ef      	movs	r1, #239	@ 0xef
1005bec4:	5444      	strb	r4, [r0, r1]
1005bec6:	2000      	movs	r0, #0
1005bec8:	bd10      	pop	{r4, pc}
1005beca:	2011      	movs	r0, #17
1005becc:	bd10      	pop	{r4, pc}
1005bece:	2012      	movs	r0, #18
1005bed0:	bd10      	pop	{r4, pc}

1005bed2 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>:
1005bed2:	b5b0      	push	{r4, r5, r7, lr}
1005bed4:	4605      	mov	r5, r0
1005bed6:	2400      	movs	r4, #0
1005bed8:	f7fd fd58 	bl	1005998c <scan_csr_ucfg_weak>
1005bedc:	2801      	cmp	r0, #1
1005bede:	d10d      	bne.n	1005befc <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005bee0:	f7ff ffda 	bl	1005be98 <llc_scan_get_cntxt_p>
1005bee4:	21eb      	movs	r1, #235	@ 0xeb
1005bee6:	5c41      	ldrb	r1, [r0, r1]
1005bee8:	07c9      	lsls	r1, r1, #31
1005beea:	d007      	beq.n	1005befc <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005beec:	2d00      	cmp	r5, #0
1005beee:	d004      	beq.n	1005befa <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x28>
1005bef0:	30ea      	adds	r0, #234	@ 0xea
1005bef2:	7800      	ldrb	r0, [r0, #0]
1005bef4:	2401      	movs	r4, #1
1005bef6:	4004      	ands	r4, r0
1005bef8:	e000      	b.n	1005befc <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005befa:	2401      	movs	r4, #1
1005befc:	4620      	mov	r0, r4
1005befe:	bdb0      	pop	{r4, r5, r7, pc}

1005bf00 <llc_scan_stop_ucfg_weak>:
1005bf00:	2000      	movs	r0, #0
1005bf02:	4770      	bx	lr

1005bf04 <llc_subrate_init_acceptable>:
1005bf04:	2100      	movs	r1, #0
1005bf06:	4a03      	ldr	r2, [pc, #12]	@ (1005bf14 <__arm_cp.4_0>)
1005bf08:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005bf0a:	6302      	str	r2, [r0, #48]	@ 0x30
1005bf0c:	2119      	movs	r1, #25
1005bf0e:	01c9      	lsls	r1, r1, #7
1005bf10:	8681      	strh	r1, [r0, #52]	@ 0x34
1005bf12:	4770      	bx	lr

1005bf14 <__arm_cp.4_0>:
1005bf14:	00010001 	.word	0x00010001

1005bf18 <llc_subrate_init_acceptable_per>:
1005bf18:	b580      	push	{r7, lr}
1005bf1a:	4603      	mov	r3, r0
1005bf1c:	2049      	movs	r0, #73	@ 0x49
1005bf1e:	0080      	lsls	r0, r0, #2
1005bf20:	1808      	adds	r0, r1, r0
1005bf22:	332c      	adds	r3, #44	@ 0x2c
1005bf24:	220a      	movs	r2, #10
1005bf26:	4619      	mov	r1, r3
1005bf28:	f7f6 fd8e 	bl	10052a48 <BLEPLAT_MemCpy>
1005bf2c:	bd80      	pop	{r7, pc}

1005bf2e <llc_subrate_reset_params>:
1005bf2e:	2147      	movs	r1, #71	@ 0x47
1005bf30:	0089      	lsls	r1, r1, #2
1005bf32:	2200      	movs	r2, #0
1005bf34:	5042      	str	r2, [r0, r1]
1005bf36:	1840      	adds	r0, r0, r1
1005bf38:	2101      	movs	r1, #1
1005bf3a:	0409      	lsls	r1, r1, #16
1005bf3c:	6041      	str	r1, [r0, #4]
1005bf3e:	4770      	bx	lr

1005bf40 <llc_subrate_new_sr_base_event_ucfg_weak>:
1005bf40:	4770      	bx	lr

1005bf42 <llc_subrate_update_cont_counter_ucfg_weak>:
1005bf42:	4770      	bx	lr

1005bf44 <llc_subrate_offline_processing_ucfg_weak>:
1005bf44:	2000      	movs	r0, #0
1005bf46:	4770      	bx	lr

1005bf48 <llc_convert_sca_to_ppm>:
1005bf48:	0740      	lsls	r0, r0, #29
1005bf4a:	0f00      	lsrs	r0, r0, #28
1005bf4c:	4901      	ldr	r1, [pc, #4]	@ (1005bf54 <__arm_cp.1_0>)
1005bf4e:	5a08      	ldrh	r0, [r1, r0]
1005bf50:	4770      	bx	lr
1005bf52:	46c0      	nop			@ (mov r8, r8)

1005bf54 <__arm_cp.1_0>:
1005bf54:	10069b90 	.word	0x10069b90

1005bf58 <llc_convert_hci_phy_enum_to_hw_phy>:
1005bf58:	1e80      	subs	r0, r0, #2
1005bf5a:	b2c0      	uxtb	r0, r0
1005bf5c:	2803      	cmp	r0, #3
1005bf5e:	d301      	bcc.n	1005bf64 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1005bf60:	2000      	movs	r0, #0
1005bf62:	e002      	b.n	1005bf6a <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1005bf64:	00c1      	lsls	r1, r0, #3
1005bf66:	4802      	ldr	r0, [pc, #8]	@ (1005bf70 <__arm_cp.4_0>)
1005bf68:	40c8      	lsrs	r0, r1
1005bf6a:	b2c0      	uxtb	r0, r0
1005bf6c:	4770      	bx	lr
1005bf6e:	46c0      	nop			@ (mov r8, r8)

1005bf70 <__arm_cp.4_0>:
1005bf70:	00060401 	.word	0x00060401

1005bf74 <ll_cpe_get_cpid_from_opcode>:
1005bf74:	282a      	cmp	r0, #42	@ 0x2a
1005bf76:	d804      	bhi.n	1005bf82 <ll_cpe_get_cpid_from_opcode+0xe>
1005bf78:	2103      	movs	r1, #3
1005bf7a:	4341      	muls	r1, r0
1005bf7c:	4802      	ldr	r0, [pc, #8]	@ (1005bf88 <__arm_cp.0_0>)
1005bf7e:	5c40      	ldrb	r0, [r0, r1]
1005bf80:	4770      	bx	lr
1005bf82:	2016      	movs	r0, #22
1005bf84:	4770      	bx	lr
1005bf86:	46c0      	nop			@ (mov r8, r8)

1005bf88 <__arm_cp.0_0>:
1005bf88:	10069ba0 	.word	0x10069ba0

1005bf8c <ll_cpe_set_unknown_rsp_pending>:
1005bf8c:	b5b0      	push	{r4, r5, r7, lr}
1005bf8e:	4604      	mov	r4, r0
1005bf90:	f7fe f9cc 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005bf94:	2100      	movs	r1, #0
1005bf96:	f7fe fc5f 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005bf9a:	4605      	mov	r5, r0
1005bf9c:	4620      	mov	r0, r4
1005bf9e:	f000 f80d 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005bfa2:	8801      	ldrh	r1, [r0, #0]
1005bfa4:	4a04      	ldr	r2, [pc, #16]	@ (1005bfb8 <__arm_cp.1_0>)
1005bfa6:	400a      	ands	r2, r1
1005bfa8:	8869      	ldrh	r1, [r5, #2]
1005bfaa:	0609      	lsls	r1, r1, #24
1005bfac:	0cc9      	lsrs	r1, r1, #19
1005bfae:	1889      	adds	r1, r1, r2
1005bfb0:	3110      	adds	r1, #16
1005bfb2:	8001      	strh	r1, [r0, #0]
1005bfb4:	bdb0      	pop	{r4, r5, r7, pc}
1005bfb6:	46c0      	nop			@ (mov r8, r8)

1005bfb8 <__arm_cp.1_0>:
1005bfb8:	0000e00f 	.word	0x0000e00f

1005bfbc <LL_cpe_get_ctrl_flds_common_p>:
1005bfbc:	b580      	push	{r7, lr}
1005bfbe:	f7fe f9b5 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005bfc2:	30b0      	adds	r0, #176	@ 0xb0
1005bfc4:	bd80      	pop	{r7, pc}

1005bfc6 <LL_cpe_register_cpf>:
1005bfc6:	b5b0      	push	{r4, r5, r7, lr}
1005bfc8:	460c      	mov	r4, r1
1005bfca:	0085      	lsls	r5, r0, #2
1005bfcc:	f7fe f9a4 	bl	1005a318 <llc_conn_get_cntxt_p>
1005bfd0:	6880      	ldr	r0, [r0, #8]
1005bfd2:	5144      	str	r4, [r0, r5]
1005bfd4:	bdb0      	pop	{r4, r5, r7, pc}

1005bfd6 <LL_cpe_get_active_status>:
1005bfd6:	b580      	push	{r7, lr}
1005bfd8:	f000 f804 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bfdc:	7801      	ldrb	r1, [r0, #0]
1005bfde:	2001      	movs	r0, #1
1005bfe0:	4008      	ands	r0, r1
1005bfe2:	bd80      	pop	{r7, pc}

1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>:
1005bfe4:	b510      	push	{r4, lr}
1005bfe6:	460c      	mov	r4, r1
1005bfe8:	f7fe f9a0 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005bfec:	1900      	adds	r0, r0, r4
1005bfee:	30a8      	adds	r0, #168	@ 0xa8
1005bff0:	bd10      	pop	{r4, pc}

1005bff2 <LL_cpe_set_active>:
1005bff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bff4:	461c      	mov	r4, r3
1005bff6:	4615      	mov	r5, r2
1005bff8:	460e      	mov	r6, r1
1005bffa:	4607      	mov	r7, r0
1005bffc:	f7fe f996 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c000:	1980      	adds	r0, r0, r6
1005c002:	21ac      	movs	r1, #172	@ 0xac
1005c004:	5445      	strb	r5, [r0, r1]
1005c006:	4638      	mov	r0, r7
1005c008:	4631      	mov	r1, r6
1005c00a:	f7ff ffeb 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c00e:	7801      	ldrb	r1, [r0, #0]
1005c010:	22de      	movs	r2, #222	@ 0xde
1005c012:	400a      	ands	r2, r1
1005c014:	07e1      	lsls	r1, r4, #31
1005c016:	0e89      	lsrs	r1, r1, #26
1005c018:	1889      	adds	r1, r1, r2
1005c01a:	1c49      	adds	r1, r1, #1
1005c01c:	7001      	strb	r1, [r0, #0]
1005c01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c020 <LL_cpe_clr_active>:
1005c020:	b570      	push	{r4, r5, r6, lr}
1005c022:	4616      	mov	r6, r2
1005c024:	460d      	mov	r5, r1
1005c026:	4604      	mov	r4, r0
1005c028:	f000 f814 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005c02c:	42b0      	cmp	r0, r6
1005c02e:	d110      	bne.n	1005c052 <LL_cpe_clr_active+0x32>
1005c030:	4620      	mov	r0, r4
1005c032:	4629      	mov	r1, r5
1005c034:	f7ff ffd6 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c038:	2100      	movs	r1, #0
1005c03a:	7001      	strb	r1, [r0, #0]
1005c03c:	2d01      	cmp	r5, #1
1005c03e:	d001      	beq.n	1005c044 <LL_cpe_clr_active+0x24>
1005c040:	256c      	movs	r5, #108	@ 0x6c
1005c042:	e000      	b.n	1005c046 <LL_cpe_clr_active+0x26>
1005c044:	2570      	movs	r5, #112	@ 0x70
1005c046:	4620      	mov	r0, r4
1005c048:	f7fe f970 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c04c:	217d      	movs	r1, #125	@ 0x7d
1005c04e:	0449      	lsls	r1, r1, #17
1005c050:	5141      	str	r1, [r0, r5]
1005c052:	bd70      	pop	{r4, r5, r6, pc}

1005c054 <ll_cpe_get_cpid_from_sm>:
1005c054:	b510      	push	{r4, lr}
1005c056:	460c      	mov	r4, r1
1005c058:	f7fe f968 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c05c:	1900      	adds	r0, r0, r4
1005c05e:	21ac      	movs	r1, #172	@ 0xac
1005c060:	5c40      	ldrb	r0, [r0, r1]
1005c062:	bd10      	pop	{r4, pc}

1005c064 <LL_cpe_set_blocked>:
1005c064:	b510      	push	{r4, lr}
1005c066:	4614      	mov	r4, r2
1005c068:	f7ff ffbc 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c06c:	2c02      	cmp	r4, #2
1005c06e:	d805      	bhi.n	1005c07c <LL_cpe_set_blocked+0x18>
1005c070:	00e1      	lsls	r1, r4, #3
1005c072:	4a03      	ldr	r2, [pc, #12]	@ (1005c080 <__arm_cp.9_0>)
1005c074:	40ca      	lsrs	r2, r1
1005c076:	7801      	ldrb	r1, [r0, #0]
1005c078:	4311      	orrs	r1, r2
1005c07a:	7001      	strb	r1, [r0, #0]
1005c07c:	bd10      	pop	{r4, pc}
1005c07e:	46c0      	nop			@ (mov r8, r8)

1005c080 <__arm_cp.9_0>:
1005c080:	00080402 	.word	0x00080402

1005c084 <LL_cpe_set_prepare_tx_pdu>:
1005c084:	b580      	push	{r7, lr}
1005c086:	f7ff ffad 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c08a:	7801      	ldrb	r1, [r0, #0]
1005c08c:	2210      	movs	r2, #16
1005c08e:	430a      	orrs	r2, r1
1005c090:	7002      	strb	r2, [r0, #0]
1005c092:	2015      	movs	r0, #21
1005c094:	f006 fd6e 	bl	10062b74 <tsk_notify_idx>
1005c098:	f7f5 feef 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005c09c:	bd80      	pop	{r7, pc}

1005c09e <LL_cpe_get_cntxt>:
1005c09e:	b510      	push	{r4, lr}
1005c0a0:	460c      	mov	r4, r1
1005c0a2:	f7fe f943 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c0a6:	00a1      	lsls	r1, r4, #2
1005c0a8:	1840      	adds	r0, r0, r1
1005c0aa:	21a0      	movs	r1, #160	@ 0xa0
1005c0ac:	5840      	ldr	r0, [r0, r1]
1005c0ae:	bd10      	pop	{r4, pc}

1005c0b0 <LL_cpe_set_tx_with_instant>:
1005c0b0:	b5b0      	push	{r4, r5, r7, lr}
1005c0b2:	4604      	mov	r4, r0
1005c0b4:	f7ff ff96 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c0b8:	4605      	mov	r5, r0
1005c0ba:	4620      	mov	r0, r4
1005c0bc:	f7fe f936 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c0c0:	7829      	ldrb	r1, [r5, #0]
1005c0c2:	2240      	movs	r2, #64	@ 0x40
1005c0c4:	430a      	orrs	r2, r1
1005c0c6:	702a      	strb	r2, [r5, #0]
1005c0c8:	f7fe fe87 	bl	1005adda <llc_conn_set_tx_ctrl_pdu_has_instant>
1005c0cc:	bdb0      	pop	{r4, r5, r7, pc}

1005c0ce <LL_cpe_set_rx_with_instant>:
1005c0ce:	b5b0      	push	{r4, r5, r7, lr}
1005c0d0:	4604      	mov	r4, r0
1005c0d2:	f7ff ff87 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c0d6:	4605      	mov	r5, r0
1005c0d8:	4620      	mov	r0, r4
1005c0da:	f7fe f927 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c0de:	7829      	ldrb	r1, [r5, #0]
1005c0e0:	2240      	movs	r2, #64	@ 0x40
1005c0e2:	430a      	orrs	r2, r1
1005c0e4:	702a      	strb	r2, [r5, #0]
1005c0e6:	219a      	movs	r1, #154	@ 0x9a
1005c0e8:	5a42      	ldrh	r2, [r0, r1]
1005c0ea:	2301      	movs	r3, #1
1005c0ec:	4313      	orrs	r3, r2
1005c0ee:	5243      	strh	r3, [r0, r1]
1005c0f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005c0f4 <LL_cpe_engine>:
1005c0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c0f6:	b08d      	sub	sp, #52	@ 0x34
1005c0f8:	4604      	mov	r4, r0
1005c0fa:	a80c      	add	r0, sp, #48	@ 0x30
1005c0fc:	2700      	movs	r7, #0
1005c0fe:	8007      	strh	r7, [r0, #0]
1005c100:	4620      	mov	r0, r4
1005c102:	f7fe f913 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c106:	21ff      	movs	r1, #255	@ 0xff
1005c108:	3112      	adds	r1, #18
1005c10a:	900b      	str	r0, [sp, #44]	@ 0x2c
1005c10c:	5c40      	ldrb	r0, [r0, r1]
1005c10e:	2800      	cmp	r0, #0
1005c110:	9406      	str	r4, [sp, #24]
1005c112:	d100      	bne.n	1005c116 <LL_cpe_engine+0x22>
1005c114:	e083      	b.n	1005c21e <LL_cpe_engine+0x12a>
1005c116:	4620      	mov	r0, r4
1005c118:	f000 fbc2 	bl	1005c8a0 <ll_cpe_set_active>
1005c11c:	4620      	mov	r0, r4
1005c11e:	f7ff ff4d 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005c122:	4606      	mov	r6, r0
1005c124:	4620      	mov	r0, r4
1005c126:	f7fe f901 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c12a:	4604      	mov	r4, r0
1005c12c:	8835      	ldrh	r5, [r6, #0]
1005c12e:	f7fe fbc0 	bl	1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>
1005c132:	0729      	lsls	r1, r5, #28
1005c134:	d509      	bpl.n	1005c14a <LL_cpe_engine+0x56>
1005c136:	2803      	cmp	r0, #3
1005c138:	d107      	bne.n	1005c14a <LL_cpe_engine+0x56>
1005c13a:	2100      	movs	r1, #0
1005c13c:	4620      	mov	r0, r4
1005c13e:	f7fe fe53 	bl	1005ade8 <llc_conn_set_tx_ctrl_pdu_state>
1005c142:	8830      	ldrh	r0, [r6, #0]
1005c144:	2108      	movs	r1, #8
1005c146:	4388      	bics	r0, r1
1005c148:	8030      	strh	r0, [r6, #0]
1005c14a:	9806      	ldr	r0, [sp, #24]
1005c14c:	f000 fbb0 	bl	1005c8b0 <ll_cpe_check_rx_pdu_can_be_processed>
1005c150:	2800      	cmp	r0, #0
1005c152:	d100      	bne.n	1005c156 <LL_cpe_engine+0x62>
1005c154:	e12e      	b.n	1005c3b4 <LL_cpe_engine+0x2c0>
1005c156:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c158:	4606      	mov	r6, r0
1005c15a:	362c      	adds	r6, #44	@ 0x2c
1005c15c:	4639      	mov	r1, r7
1005c15e:	f7fe fb7b 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005c162:	7885      	ldrb	r5, [r0, #2]
1005c164:	9005      	str	r0, [sp, #20]
1005c166:	7840      	ldrb	r0, [r0, #1]
1005c168:	9008      	str	r0, [sp, #32]
1005c16a:	2101      	movs	r1, #1
1005c16c:	9c06      	ldr	r4, [sp, #24]
1005c16e:	4620      	mov	r0, r4
1005c170:	9104      	str	r1, [sp, #16]
1005c172:	463a      	mov	r2, r7
1005c174:	f000 fbad 	bl	1005c8d2 <ll_cpe_get_blocked_status>
1005c178:	9009      	str	r0, [sp, #36]	@ 0x24
1005c17a:	4620      	mov	r0, r4
1005c17c:	4639      	mov	r1, r7
1005c17e:	463a      	mov	r2, r7
1005c180:	f000 fba7 	bl	1005c8d2 <ll_cpe_get_blocked_status>
1005c184:	4603      	mov	r3, r0
1005c186:	9607      	str	r6, [sp, #28]
1005c188:	7830      	ldrb	r0, [r6, #0]
1005c18a:	1e84      	subs	r4, r0, #2
1005c18c:	1e61      	subs	r1, r4, #1
1005c18e:	4620      	mov	r0, r4
1005c190:	4188      	sbcs	r0, r1
1005c192:	950a      	str	r5, [sp, #40]	@ 0x28
1005c194:	2d2a      	cmp	r5, #42	@ 0x2a
1005c196:	d900      	bls.n	1005c19a <LL_cpe_engine+0xa6>
1005c198:	e068      	b.n	1005c26c <LL_cpe_engine+0x178>
1005c19a:	2103      	movs	r1, #3
1005c19c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005c19e:	4351      	muls	r1, r2
1005c1a0:	4aa1      	ldr	r2, [pc, #644]	@ (1005c428 <__arm_cp.14_7>)
1005c1a2:	1851      	adds	r1, r2, r1
1005c1a4:	7849      	ldrb	r1, [r1, #1]
1005c1a6:	9a08      	ldr	r2, [sp, #32]
1005c1a8:	4291      	cmp	r1, r2
1005c1aa:	d000      	beq.n	1005c1ae <LL_cpe_engine+0xba>
1005c1ac:	e05e      	b.n	1005c26c <LL_cpe_engine+0x178>
1005c1ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005c1b0:	292a      	cmp	r1, #42	@ 0x2a
1005c1b2:	d900      	bls.n	1005c1b6 <LL_cpe_engine+0xc2>
1005c1b4:	e05a      	b.n	1005c26c <LL_cpe_engine+0x178>
1005c1b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005c1b8:	0049      	lsls	r1, r1, #1
1005c1ba:	46c0      	nop			@ (mov r8, r8)
1005c1bc:	4479      	add	r1, pc
1005c1be:	8889      	ldrh	r1, [r1, #4]
1005c1c0:	0049      	lsls	r1, r1, #1
1005c1c2:	448f      	add	pc, r1
1005c1c4:	00540054 	.word	0x00540054
1005c1c8:	0054002a 	.word	0x0054002a
1005c1cc:	030e030e 	.word	0x030e030e
1005c1d0:	002a002a 	.word	0x002a002a
1005c1d4:	002a0054 	.word	0x002a0054
1005c1d8:	002a0054 	.word	0x002a0054
1005c1dc:	002a002a 	.word	0x002a002a
1005c1e0:	0053030e 	.word	0x0053030e
1005c1e4:	002a0053 	.word	0x002a0053
1005c1e8:	002a002a 	.word	0x002a002a
1005c1ec:	03150315 	.word	0x03150315
1005c1f0:	03600321 	.word	0x03600321
1005c1f4:	00530325 	.word	0x00530325
1005c1f8:	03190319 	.word	0x03190319
1005c1fc:	002a0329 	.word	0x002a0329
1005c200:	031d002a 	.word	0x031d002a
1005c204:	031d032d 	.word	0x031d032d
1005c208:	03110333 	.word	0x03110333
1005c20c:	03110311 	.word	0x03110311
1005c210:	033d0337 	.word	0x033d0337
1005c214:	034c0341 	.word	0x034c0341
1005c218:	0352      	.short	0x0352
1005c21a:	9804      	ldr	r0, [sp, #16]
1005c21c:	e027      	b.n	1005c26e <LL_cpe_engine+0x17a>
1005c21e:	4620      	mov	r0, r4
1005c220:	f7fe f884 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c224:	4605      	mov	r5, r0
1005c226:	202d      	movs	r0, #45	@ 0x2d
1005c228:	5c28      	ldrb	r0, [r5, r0]
1005c22a:	2800      	cmp	r0, #0
1005c22c:	d100      	bne.n	1005c230 <LL_cpe_engine+0x13c>
1005c22e:	e09b      	b.n	1005c368 <LL_cpe_engine+0x274>
1005c230:	900a      	str	r0, [sp, #40]	@ 0x28
1005c232:	462f      	mov	r7, r5
1005c234:	372c      	adds	r7, #44	@ 0x2c
1005c236:	462e      	mov	r6, r5
1005c238:	36d8      	adds	r6, #216	@ 0xd8
1005c23a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1005c23c:	463c      	mov	r4, r7
1005c23e:	3454      	adds	r4, #84	@ 0x54
1005c240:	7d79      	ldrb	r1, [r7, #21]
1005c242:	910b      	str	r1, [sp, #44]	@ 0x2c
1005c244:	2800      	cmp	r0, #0
1005c246:	d001      	beq.n	1005c24c <LL_cpe_engine+0x158>
1005c248:	f7f8 fee2 	bl	10055010 <Acl_Tx_Cmpl_Pkt_Handler>
1005c24c:	4620      	mov	r0, r4
1005c24e:	f006 fe83 	bl	10062f58 <ACL_list_init>
1005c252:	ce03      	ldmia	r6!, {r0, r1}
1005c254:	f7fe fba8 	bl	1005a9a8 <llc_conn_list_remove_address>
1005c258:	4874      	ldr	r0, [pc, #464]	@ (1005c42c <__arm_cp.14_8>)
1005c25a:	6800      	ldr	r0, [r0, #0]
1005c25c:	212c      	movs	r1, #44	@ 0x2c
1005c25e:	5c40      	ldrb	r0, [r0, r1]
1005c260:	07c0      	lsls	r0, r0, #31
1005c262:	0ec1      	lsrs	r1, r0, #27
1005c264:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
1005c266:	d148      	bne.n	1005c2fa <LL_cpe_engine+0x206>
1005c268:	2205      	movs	r2, #5
1005c26a:	e04d      	b.n	1005c308 <LL_cpe_engine+0x214>
1005c26c:	4638      	mov	r0, r7
1005c26e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005c270:	4319      	orrs	r1, r3
1005c272:	d000      	beq.n	1005c276 <LL_cpe_engine+0x182>
1005c274:	e09e      	b.n	1005c3b4 <LL_cpe_engine+0x2c0>
1005c276:	2800      	cmp	r0, #0
1005c278:	d07d      	beq.n	1005c376 <LL_cpe_engine+0x282>
1005c27a:	9805      	ldr	r0, [sp, #20]
1005c27c:	78c6      	ldrb	r6, [r0, #3]
1005c27e:	2401      	movs	r4, #1
1005c280:	9f06      	ldr	r7, [sp, #24]
1005c282:	4638      	mov	r0, r7
1005c284:	4621      	mov	r1, r4
1005c286:	f000 fb3d 	bl	1005c904 <ll_cpe_get_expected_opcode>
1005c28a:	9005      	str	r0, [sp, #20]
1005c28c:	4638      	mov	r0, r7
1005c28e:	4621      	mov	r1, r4
1005c290:	f000 fb40 	bl	1005c914 <ll_cpe_get_state>
1005c294:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1005c296:	9004      	str	r0, [sp, #16]
1005c298:	4628      	mov	r0, r5
1005c29a:	9603      	str	r6, [sp, #12]
1005c29c:	4631      	mov	r1, r6
1005c29e:	463a      	mov	r2, r7
1005c2a0:	9409      	str	r4, [sp, #36]	@ 0x24
1005c2a2:	4623      	mov	r3, r4
1005c2a4:	f000 fb3e 	bl	1005c924 <LL_cpe_rxctrlpdu_checkreject>
1005c2a8:	1e41      	subs	r1, r0, #1
1005c2aa:	4188      	sbcs	r0, r1
1005c2ac:	9905      	ldr	r1, [sp, #20]
1005c2ae:	1b49      	subs	r1, r1, r5
1005c2b0:	424a      	negs	r2, r1
1005c2b2:	414a      	adcs	r2, r1
1005c2b4:	4302      	orrs	r2, r0
1005c2b6:	9804      	ldr	r0, [sp, #16]
1005c2b8:	1f00      	subs	r0, r0, #4
1005c2ba:	4245      	negs	r5, r0
1005c2bc:	4145      	adcs	r5, r0
1005c2be:	4015      	ands	r5, r2
1005c2c0:	2400      	movs	r4, #0
1005c2c2:	4638      	mov	r0, r7
1005c2c4:	4621      	mov	r1, r4
1005c2c6:	f000 fb1d 	bl	1005c904 <ll_cpe_get_expected_opcode>
1005c2ca:	4606      	mov	r6, r0
1005c2cc:	9807      	ldr	r0, [sp, #28]
1005c2ce:	7800      	ldrb	r0, [r0, #0]
1005c2d0:	9007      	str	r0, [sp, #28]
1005c2d2:	4638      	mov	r0, r7
1005c2d4:	4621      	mov	r1, r4
1005c2d6:	f000 fb1d 	bl	1005c914 <ll_cpe_get_state>
1005c2da:	4607      	mov	r7, r0
1005c2dc:	2801      	cmp	r0, #1
1005c2de:	d14e      	bne.n	1005c37e <LL_cpe_engine+0x28a>
1005c2e0:	9807      	ldr	r0, [sp, #28]
1005c2e2:	1e81      	subs	r1, r0, #2
1005c2e4:	1e48      	subs	r0, r1, #1
1005c2e6:	4181      	sbcs	r1, r0
1005c2e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005c2ea:	4604      	mov	r4, r0
1005c2ec:	9a08      	ldr	r2, [sp, #32]
1005c2ee:	f000 fb41 	bl	1005c974 <valid_first_opcode>
1005c2f2:	2800      	cmp	r0, #0
1005c2f4:	d044      	beq.n	1005c380 <LL_cpe_engine+0x28c>
1005c2f6:	2501      	movs	r5, #1
1005c2f8:	e042      	b.n	1005c380 <LL_cpe_engine+0x28c>
1005c2fa:	484d      	ldr	r0, [pc, #308]	@ (1005c430 <__arm_cp.14_9>)
1005c2fc:	6800      	ldr	r0, [r0, #0]
1005c2fe:	2236      	movs	r2, #54	@ 0x36
1005c300:	5c80      	ldrb	r0, [r0, r2]
1005c302:	06c0      	lsls	r0, r0, #27
1005c304:	d51d      	bpl.n	1005c342 <LL_cpe_engine+0x24e>
1005c306:	2215      	movs	r2, #21
1005c308:	206f      	movs	r0, #111	@ 0x6f
1005c30a:	43c0      	mvns	r0, r0
1005c30c:	4041      	eors	r1, r0
1005c30e:	4849      	ldr	r0, [pc, #292]	@ (1005c434 <__arm_cp.14_10>)
1005c310:	6800      	ldr	r0, [r0, #0]
1005c312:	6900      	ldr	r0, [r0, #16]
1005c314:	b2ce      	uxtb	r6, r1
1005c316:	2302      	movs	r3, #2
1005c318:	4631      	mov	r1, r6
1005c31a:	f7f9 f8e1 	bl	100554e0 <aci_event_fifo_push_header>
1005c31e:	2800      	cmp	r0, #0
1005c320:	d00f      	beq.n	1005c342 <LL_cpe_engine+0x24e>
1005c322:	4601      	mov	r1, r0
1005c324:	7204      	strb	r4, [r0, #8]
1005c326:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005c328:	7288      	strb	r0, [r1, #10]
1005c32a:	2000      	movs	r0, #0
1005c32c:	71c8      	strb	r0, [r1, #7]
1005c32e:	2004      	movs	r0, #4
1005c330:	7188      	strb	r0, [r1, #6]
1005c332:	2205      	movs	r2, #5
1005c334:	714a      	strb	r2, [r1, #5]
1005c336:	7108      	strb	r0, [r1, #4]
1005c338:	0a20      	lsrs	r0, r4, #8
1005c33a:	7248      	strb	r0, [r1, #9]
1005c33c:	4630      	mov	r0, r6
1005c33e:	f7f9 f96c 	bl	1005561a <aci_event_fifo_push>
1005c342:	4628      	mov	r0, r5
1005c344:	f001 ffa4 	bl	1005e290 <LLC_authenticated_payload_timeout_reset>
1005c348:	9c06      	ldr	r4, [sp, #24]
1005c34a:	4620      	mov	r0, r4
1005c34c:	f000 fc18 	bl	1005cb80 <ll_cpe_reset_state_machines>
1005c350:	4620      	mov	r0, r4
1005c352:	f7fe f8bb 	bl	1005a4cc <llc_conn_per_init>
1005c356:	4620      	mov	r0, r4
1005c358:	f7ff fd9c 	bl	1005be94 <llc_pscan_wr_check_pawr_active_ucfg_weak>
1005c35c:	2800      	cmp	r0, #0
1005c35e:	d003      	beq.n	1005c368 <LL_cpe_engine+0x274>
1005c360:	2001      	movs	r0, #1
1005c362:	7038      	strb	r0, [r7, #0]
1005c364:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c366:	7578      	strb	r0, [r7, #21]
1005c368:	a80c      	add	r0, sp, #48	@ 0x30
1005c36a:	7841      	ldrb	r1, [r0, #1]
1005c36c:	2902      	cmp	r1, #2
1005c36e:	d000      	beq.n	1005c372 <LL_cpe_engine+0x27e>
1005c370:	e232      	b.n	1005c7d8 <__arm_cp.14_10+0x3a4>
1005c372:	2001      	movs	r0, #1
1005c374:	e233      	b.n	1005c7de <__arm_cp.14_10+0x3aa>
1005c376:	9806      	ldr	r0, [sp, #24]
1005c378:	f7ff fe08 	bl	1005bf8c <ll_cpe_set_unknown_rsp_pending>
1005c37c:	e017      	b.n	1005c3ae <LL_cpe_engine+0x2ba>
1005c37e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005c380:	9903      	ldr	r1, [sp, #12]
1005c382:	2204      	movs	r2, #4
1005c384:	407a      	eors	r2, r7
1005c386:	4620      	mov	r0, r4
1005c388:	4066      	eors	r6, r4
1005c38a:	4316      	orrs	r6, r2
1005c38c:	4274      	negs	r4, r6
1005c38e:	4174      	adcs	r4, r6
1005c390:	2f04      	cmp	r7, #4
1005c392:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005c394:	d000      	beq.n	1005c398 <LL_cpe_engine+0x2a4>
1005c396:	4626      	mov	r6, r4
1005c398:	2300      	movs	r3, #0
1005c39a:	9a06      	ldr	r2, [sp, #24]
1005c39c:	f000 fac2 	bl	1005c924 <LL_cpe_rxctrlpdu_checkreject>
1005c3a0:	2800      	cmp	r0, #0
1005c3a2:	d100      	bne.n	1005c3a6 <LL_cpe_engine+0x2b2>
1005c3a4:	4626      	mov	r6, r4
1005c3a6:	2e01      	cmp	r6, #1
1005c3a8:	d004      	beq.n	1005c3b4 <LL_cpe_engine+0x2c0>
1005c3aa:	2d00      	cmp	r5, #0
1005c3ac:	d102      	bne.n	1005c3b4 <LL_cpe_engine+0x2c0>
1005c3ae:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c3b0:	f7fe f998 	bl	1005a6e4 <llc_conn_clr_rx_ctrl_pdu_full>
1005c3b4:	2000      	movs	r0, #0
1005c3b6:	9005      	str	r0, [sp, #20]
1005c3b8:	43c0      	mvns	r0, r0
1005c3ba:	9f06      	ldr	r7, [sp, #24]
1005c3bc:	2801      	cmp	r0, #1
1005c3be:	d100      	bne.n	1005c3c2 <LL_cpe_engine+0x2ce>
1005c3c0:	e1ff      	b.n	1005c7c2 <__arm_cp.14_10+0x38e>
1005c3c2:	900a      	str	r0, [sp, #40]	@ 0x28
1005c3c4:	1c40      	adds	r0, r0, #1
1005c3c6:	900b      	str	r0, [sp, #44]	@ 0x2c
1005c3c8:	4638      	mov	r0, r7
1005c3ca:	f000 fc5a 	bl	1005cc82 <ll_cpe_get_active>
1005c3ce:	2800      	cmp	r0, #0
1005c3d0:	d017      	beq.n	1005c402 <LL_cpe_engine+0x30e>
1005c3d2:	4638      	mov	r0, r7
1005c3d4:	f7ff fdf2 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005c3d8:	4605      	mov	r5, r0
1005c3da:	8800      	ldrh	r0, [r0, #0]
1005c3dc:	0780      	lsls	r0, r0, #30
1005c3de:	d500      	bpl.n	1005c3e2 <LL_cpe_engine+0x2ee>
1005c3e0:	e1ed      	b.n	1005c7be <__arm_cp.14_10+0x38a>
1005c3e2:	4638      	mov	r0, r7
1005c3e4:	f7fd ffa2 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c3e8:	24b2      	movs	r4, #178	@ 0xb2
1005c3ea:	5d06      	ldrb	r6, [r0, r4]
1005c3ec:	2e00      	cmp	r6, #0
1005c3ee:	d008      	beq.n	1005c402 <LL_cpe_engine+0x30e>
1005c3f0:	4638      	mov	r0, r7
1005c3f2:	f7fd ff9b 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c3f6:	9009      	str	r0, [sp, #36]	@ 0x24
1005c3f8:	f7fe fa5b 	bl	1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>
1005c3fc:	2800      	cmp	r0, #0
1005c3fe:	d100      	bne.n	1005c402 <LL_cpe_engine+0x30e>
1005c400:	e0e1      	b.n	1005c5c6 <__arm_cp.14_10+0x192>
1005c402:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c404:	b2c6      	uxtb	r6, r0
1005c406:	4638      	mov	r0, r7
1005c408:	4631      	mov	r1, r6
1005c40a:	f000 fa83 	bl	1005c914 <ll_cpe_get_state>
1005c40e:	4605      	mov	r5, r0
1005c410:	2805      	cmp	r0, #5
1005c412:	9608      	str	r6, [sp, #32]
1005c414:	9009      	str	r0, [sp, #36]	@ 0x24
1005c416:	d816      	bhi.n	1005c446 <__arm_cp.14_10+0x12>
1005c418:	447d      	add	r5, pc
1005c41a:	792d      	ldrb	r5, [r5, #4]
1005c41c:	006d      	lsls	r5, r5, #1
1005c41e:	44af      	add	pc, r5
1005c420:	6544140b 	.word	0x6544140b
1005c424:	46c0b799 	.word	0x46c0b799

1005c428 <__arm_cp.14_7>:
1005c428:	10069ba0 	.word	0x10069ba0

1005c42c <__arm_cp.14_8>:
1005c42c:	20002414 	.word	0x20002414

1005c430 <__arm_cp.14_9>:
1005c430:	20002468 	.word	0x20002468

1005c434 <__arm_cp.14_10>:
1005c434:	20002418 	.word	0x20002418
1005c438:	4638      	mov	r0, r7
1005c43a:	f000 fc22 	bl	1005cc82 <ll_cpe_get_active>
1005c43e:	4604      	mov	r4, r0
1005c440:	1e40      	subs	r0, r0, #1
1005c442:	4184      	sbcs	r4, r0
1005c444:	e180      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c446:	462c      	mov	r4, r5
1005c448:	e17e      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c44a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005c44c:	2800      	cmp	r0, #0
1005c44e:	d100      	bne.n	1005c452 <__arm_cp.14_10+0x1e>
1005c450:	e0df      	b.n	1005c612 <__arm_cp.14_10+0x1de>
1005c452:	4638      	mov	r0, r7
1005c454:	f000 fa2c 	bl	1005c8b0 <ll_cpe_check_rx_pdu_can_be_processed>
1005c458:	2800      	cmp	r0, #0
1005c45a:	d100      	bne.n	1005c45e <__arm_cp.14_10+0x2a>
1005c45c:	e0d7      	b.n	1005c60e <__arm_cp.14_10+0x1da>
1005c45e:	2501      	movs	r5, #1
1005c460:	4638      	mov	r0, r7
1005c462:	4629      	mov	r1, r5
1005c464:	f000 fa56 	bl	1005c914 <ll_cpe_get_state>
1005c468:	4604      	mov	r4, r0
1005c46a:	4638      	mov	r0, r7
1005c46c:	f000 fc10 	bl	1005cc90 <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005c470:	2c04      	cmp	r4, #4
1005c472:	d103      	bne.n	1005c47c <__arm_cp.14_10+0x48>
1005c474:	462c      	mov	r4, r5
1005c476:	2800      	cmp	r0, #0
1005c478:	d100      	bne.n	1005c47c <__arm_cp.14_10+0x48>
1005c47a:	e165      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c47c:	2100      	movs	r1, #0
1005c47e:	2401      	movs	r4, #1
1005c480:	4638      	mov	r0, r7
1005c482:	4622      	mov	r2, r4
1005c484:	f000 fc0c 	bl	1005cca0 <ll_cpe_process_rx_pdu>
1005c488:	2800      	cmp	r0, #0
1005c48a:	d100      	bne.n	1005c48e <__arm_cp.14_10+0x5a>
1005c48c:	e153      	b.n	1005c736 <__arm_cp.14_10+0x302>
1005c48e:	2100      	movs	r1, #0
1005c490:	4638      	mov	r0, r7
1005c492:	f7ff fda0 	bl	1005bfd6 <LL_cpe_get_active_status>
1005c496:	2800      	cmp	r0, #0
1005c498:	d100      	bne.n	1005c49c <__arm_cp.14_10+0x68>
1005c49a:	e152      	b.n	1005c742 <__arm_cp.14_10+0x30e>
1005c49c:	2100      	movs	r1, #0
1005c49e:	4638      	mov	r0, r7
1005c4a0:	f000 fcf4 	bl	1005ce8c <ll_cpe_get_instant_active>
1005c4a4:	2800      	cmp	r0, #0
1005c4a6:	d171      	bne.n	1005c58c <__arm_cp.14_10+0x158>
1005c4a8:	e143      	b.n	1005c732 <__arm_cp.14_10+0x2fe>
1005c4aa:	4638      	mov	r0, r7
1005c4ac:	f7fd ff3e 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c4b0:	4604      	mov	r4, r0
1005c4b2:	4638      	mov	r0, r7
1005c4b4:	4631      	mov	r1, r6
1005c4b6:	f7ff fd95 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c4ba:	7800      	ldrb	r0, [r0, #0]
1005c4bc:	06c7      	lsls	r7, r0, #27
1005c4be:	9407      	str	r4, [sp, #28]
1005c4c0:	4620      	mov	r0, r4
1005c4c2:	f7fe f9f6 	bl	1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>
1005c4c6:	2402      	movs	r4, #2
1005c4c8:	2f00      	cmp	r7, #0
1005c4ca:	d400      	bmi.n	1005c4ce <__arm_cp.14_10+0x9a>
1005c4cc:	e09d      	b.n	1005c60a <__arm_cp.14_10+0x1d6>
1005c4ce:	2800      	cmp	r0, #0
1005c4d0:	d000      	beq.n	1005c4d4 <__arm_cp.14_10+0xa0>
1005c4d2:	e09a      	b.n	1005c60a <__arm_cp.14_10+0x1d6>
1005c4d4:	2701      	movs	r7, #1
1005c4d6:	9d06      	ldr	r5, [sp, #24]
1005c4d8:	4628      	mov	r0, r5
1005c4da:	4631      	mov	r1, r6
1005c4dc:	463a      	mov	r2, r7
1005c4de:	f000 f9f8 	bl	1005c8d2 <ll_cpe_get_blocked_status>
1005c4e2:	2800      	cmp	r0, #0
1005c4e4:	d100      	bne.n	1005c4e8 <__arm_cp.14_10+0xb4>
1005c4e6:	e0b6      	b.n	1005c656 <__arm_cp.14_10+0x222>
1005c4e8:	462f      	mov	r7, r5
1005c4ea:	e12d      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c4ec:	4638      	mov	r0, r7
1005c4ee:	f7fd ff1d 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c4f2:	4605      	mov	r5, r0
1005c4f4:	f7fe f9dd 	bl	1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>
1005c4f8:	2803      	cmp	r0, #3
1005c4fa:	d000      	beq.n	1005c4fe <__arm_cp.14_10+0xca>
1005c4fc:	e0ed      	b.n	1005c6da <__arm_cp.14_10+0x2a6>
1005c4fe:	4638      	mov	r0, r7
1005c500:	4631      	mov	r1, r6
1005c502:	f7ff fda7 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005c506:	f000 fcff 	bl	1005cf08 <LL_cpe_get_cpf>
1005c50a:	4604      	mov	r4, r0
1005c50c:	2600      	movs	r6, #0
1005c50e:	4638      	mov	r0, r7
1005c510:	9908      	ldr	r1, [sp, #32]
1005c512:	4632      	mov	r2, r6
1005c514:	4633      	mov	r3, r6
1005c516:	47a0      	blx	r4
1005c518:	4602      	mov	r2, r0
1005c51a:	4638      	mov	r0, r7
1005c51c:	9908      	ldr	r1, [sp, #32]
1005c51e:	f000 fd00 	bl	1005cf22 <ll_cpe_set_expected_opcode>
1005c522:	4628      	mov	r0, r5
1005c524:	4631      	mov	r1, r6
1005c526:	9c08      	ldr	r4, [sp, #32]
1005c528:	f7fe fc5e 	bl	1005ade8 <llc_conn_set_tx_ctrl_pdu_state>
1005c52c:	4638      	mov	r0, r7
1005c52e:	4621      	mov	r1, r4
1005c530:	f7ff fd51 	bl	1005bfd6 <LL_cpe_get_active_status>
1005c534:	2800      	cmp	r0, #0
1005c536:	d06a      	beq.n	1005c60e <__arm_cp.14_10+0x1da>
1005c538:	4638      	mov	r0, r7
1005c53a:	4621      	mov	r1, r4
1005c53c:	f000 fca6 	bl	1005ce8c <ll_cpe_get_instant_active>
1005c540:	2800      	cmp	r0, #0
1005c542:	d160      	bne.n	1005c606 <__arm_cp.14_10+0x1d2>
1005c544:	4638      	mov	r0, r7
1005c546:	4621      	mov	r1, r4
1005c548:	f000 f9dc 	bl	1005c904 <ll_cpe_get_expected_opcode>
1005c54c:	28ff      	cmp	r0, #255	@ 0xff
1005c54e:	d068      	beq.n	1005c622 <__arm_cp.14_10+0x1ee>
1005c550:	2404      	movs	r4, #4
1005c552:	e0f9      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c554:	4638      	mov	r0, r7
1005c556:	f000 f9ab 	bl	1005c8b0 <ll_cpe_check_rx_pdu_can_be_processed>
1005c55a:	2404      	movs	r4, #4
1005c55c:	2800      	cmp	r0, #0
1005c55e:	d100      	bne.n	1005c562 <__arm_cp.14_10+0x12e>
1005c560:	e0f2      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c562:	2203      	movs	r2, #3
1005c564:	4638      	mov	r0, r7
1005c566:	4631      	mov	r1, r6
1005c568:	f000 fb9a 	bl	1005cca0 <ll_cpe_process_rx_pdu>
1005c56c:	2800      	cmp	r0, #0
1005c56e:	d05a      	beq.n	1005c626 <__arm_cp.14_10+0x1f2>
1005c570:	4638      	mov	r0, r7
1005c572:	4631      	mov	r1, r6
1005c574:	f7ff fd2f 	bl	1005bfd6 <LL_cpe_get_active_status>
1005c578:	2800      	cmp	r0, #0
1005c57a:	d100      	bne.n	1005c57e <__arm_cp.14_10+0x14a>
1005c57c:	e0bb      	b.n	1005c6f6 <__arm_cp.14_10+0x2c2>
1005c57e:	4638      	mov	r0, r7
1005c580:	4631      	mov	r1, r6
1005c582:	f000 fc83 	bl	1005ce8c <ll_cpe_get_instant_active>
1005c586:	2800      	cmp	r0, #0
1005c588:	d100      	bne.n	1005c58c <__arm_cp.14_10+0x158>
1005c58a:	e0b6      	b.n	1005c6fa <__arm_cp.14_10+0x2c6>
1005c58c:	2405      	movs	r4, #5
1005c58e:	e0d8      	b.n	1005c742 <__arm_cp.14_10+0x30e>
1005c590:	4638      	mov	r0, r7
1005c592:	f7fd fecb 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c596:	4604      	mov	r4, r0
1005c598:	f7fe f974 	bl	1005a884 <llc_conn_get_instant_reached>
1005c59c:	2801      	cmp	r0, #1
1005c59e:	d132      	bne.n	1005c606 <__arm_cp.14_10+0x1d2>
1005c5a0:	4638      	mov	r0, r7
1005c5a2:	4631      	mov	r1, r6
1005c5a4:	f7ff fd56 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005c5a8:	f000 fcae 	bl	1005cf08 <LL_cpe_get_cpf>
1005c5ac:	2800      	cmp	r0, #0
1005c5ae:	9407      	str	r4, [sp, #28]
1005c5b0:	d100      	bne.n	1005c5b4 <__arm_cp.14_10+0x180>
1005c5b2:	e094      	b.n	1005c6de <__arm_cp.14_10+0x2aa>
1005c5b4:	4605      	mov	r5, r0
1005c5b6:	4620      	mov	r0, r4
1005c5b8:	f7fe f95f 	bl	1005a87a <llc_conn_get_instant_passed>
1005c5bc:	2801      	cmp	r0, #1
1005c5be:	d100      	bne.n	1005c5c2 <__arm_cp.14_10+0x18e>
1005c5c0:	e08f      	b.n	1005c6e2 <__arm_cp.14_10+0x2ae>
1005c5c2:	2207      	movs	r2, #7
1005c5c4:	e08e      	b.n	1005c6e4 <__arm_cp.14_10+0x2b0>
1005c5c6:	2101      	movs	r1, #1
1005c5c8:	910a      	str	r1, [sp, #40]	@ 0x28
1005c5ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c5cc:	f7fe f944 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005c5d0:	49b2      	ldr	r1, [pc, #712]	@ (1005c89c <__arm_cp.14_1>)
1005c5d2:	8001      	strh	r1, [r0, #0]
1005c5d4:	0671      	lsls	r1, r6, #25
1005c5d6:	0c49      	lsrs	r1, r1, #17
1005c5d8:	1c89      	adds	r1, r1, #2
1005c5da:	8041      	strh	r1, [r0, #2]
1005c5dc:	8828      	ldrh	r0, [r5, #0]
1005c5de:	2102      	movs	r1, #2
1005c5e0:	4301      	orrs	r1, r0
1005c5e2:	8029      	strh	r1, [r5, #0]
1005c5e4:	4638      	mov	r0, r7
1005c5e6:	f7fd fea1 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c5ea:	9d05      	ldr	r5, [sp, #20]
1005c5ec:	5505      	strb	r5, [r0, r4]
1005c5ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c5f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005c5f2:	4621      	mov	r1, r4
1005c5f4:	f7fe fbf8 	bl	1005ade8 <llc_conn_set_tx_ctrl_pdu_state>
1005c5f8:	2204      	movs	r2, #4
1005c5fa:	4638      	mov	r0, r7
1005c5fc:	4621      	mov	r1, r4
1005c5fe:	462b      	mov	r3, r5
1005c600:	f7ff fcf7 	bl	1005bff2 <LL_cpe_set_active>
1005c604:	e0db      	b.n	1005c7be <__arm_cp.14_10+0x38a>
1005c606:	2405      	movs	r4, #5
1005c608:	e09e      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c60a:	9f06      	ldr	r7, [sp, #24]
1005c60c:	e09c      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c60e:	2401      	movs	r4, #1
1005c610:	e09a      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c612:	2401      	movs	r4, #1
1005c614:	4638      	mov	r0, r7
1005c616:	4621      	mov	r1, r4
1005c618:	f7ff fcdd 	bl	1005bfd6 <LL_cpe_get_active_status>
1005c61c:	2800      	cmp	r0, #0
1005c61e:	d100      	bne.n	1005c622 <__arm_cp.14_10+0x1ee>
1005c620:	e092      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c622:	2402      	movs	r4, #2
1005c624:	e090      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c626:	4626      	mov	r6, r4
1005c628:	4638      	mov	r0, r7
1005c62a:	f000 fb31 	bl	1005cc90 <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005c62e:	4604      	mov	r4, r0
1005c630:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c632:	4241      	negs	r1, r0
1005c634:	4141      	adcs	r1, r0
1005c636:	4638      	mov	r0, r7
1005c638:	f000 f96c 	bl	1005c914 <ll_cpe_get_state>
1005c63c:	2c00      	cmp	r4, #0
1005c63e:	d064      	beq.n	1005c70a <__arm_cp.14_10+0x2d6>
1005c640:	4638      	mov	r0, r7
1005c642:	f7fd fe73 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c646:	2100      	movs	r1, #0
1005c648:	f7fe f906 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005c64c:	4638      	mov	r0, r7
1005c64e:	f000 fc24 	bl	1005ce9a <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005c652:	4634      	mov	r4, r6
1005c654:	e078      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c656:	9704      	str	r7, [sp, #16]
1005c658:	22ff      	movs	r2, #255	@ 0xff
1005c65a:	4628      	mov	r0, r5
1005c65c:	4631      	mov	r1, r6
1005c65e:	f000 fc24 	bl	1005ceaa <ll_cpe_check_instant_blocked>
1005c662:	2800      	cmp	r0, #0
1005c664:	462f      	mov	r7, r5
1005c666:	d16f      	bne.n	1005c748 <__arm_cp.14_10+0x314>
1005c668:	4638      	mov	r0, r7
1005c66a:	4631      	mov	r1, r6
1005c66c:	f7ff fcf2 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005c670:	f000 fc4a 	bl	1005cf08 <LL_cpe_get_cpf>
1005c674:	4604      	mov	r4, r0
1005c676:	9807      	ldr	r0, [sp, #28]
1005c678:	9d04      	ldr	r5, [sp, #16]
1005c67a:	4629      	mov	r1, r5
1005c67c:	f7fe f8ec 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005c680:	4603      	mov	r3, r0
1005c682:	2206      	movs	r2, #6
1005c684:	4638      	mov	r0, r7
1005c686:	4631      	mov	r1, r6
1005c688:	9303      	str	r3, [sp, #12]
1005c68a:	47a0      	blx	r4
1005c68c:	4638      	mov	r0, r7
1005c68e:	4631      	mov	r1, r6
1005c690:	f7ff fca1 	bl	1005bfd6 <LL_cpe_get_active_status>
1005c694:	2800      	cmp	r0, #0
1005c696:	462c      	mov	r4, r5
1005c698:	d056      	beq.n	1005c748 <__arm_cp.14_10+0x314>
1005c69a:	4638      	mov	r0, r7
1005c69c:	4631      	mov	r1, r6
1005c69e:	f7ff fca1 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c6a2:	7801      	ldrb	r1, [r0, #0]
1005c6a4:	22ef      	movs	r2, #239	@ 0xef
1005c6a6:	400a      	ands	r2, r1
1005c6a8:	7002      	strb	r2, [r0, #0]
1005c6aa:	22ff      	movs	r2, #255	@ 0xff
1005c6ac:	4638      	mov	r0, r7
1005c6ae:	4631      	mov	r1, r6
1005c6b0:	f000 fc37 	bl	1005cf22 <ll_cpe_set_expected_opcode>
1005c6b4:	2401      	movs	r4, #1
1005c6b6:	9807      	ldr	r0, [sp, #28]
1005c6b8:	4621      	mov	r1, r4
1005c6ba:	f7fe fb95 	bl	1005ade8 <llc_conn_set_tx_ctrl_pdu_state>
1005c6be:	9a03      	ldr	r2, [sp, #12]
1005c6c0:	7850      	ldrb	r0, [r2, #1]
1005c6c2:	2108      	movs	r1, #8
1005c6c4:	1c80      	adds	r0, r0, #2
1005c6c6:	b2c0      	uxtb	r0, r0
1005c6c8:	9100      	str	r1, [sp, #0]
1005c6ca:	9001      	str	r0, [sp, #4]
1005c6cc:	9202      	str	r2, [sp, #8]
1005c6ce:	2000      	movs	r0, #0
1005c6d0:	4621      	mov	r1, r4
1005c6d2:	4622      	mov	r2, r4
1005c6d4:	4623      	mov	r3, r4
1005c6d6:	f7f8 fefe 	bl	100554d6 <log_notify_stu_ucfg_weak>
1005c6da:	2403      	movs	r4, #3
1005c6dc:	e034      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c6de:	2405      	movs	r4, #5
1005c6e0:	e005      	b.n	1005c6ee <__arm_cp.14_10+0x2ba>
1005c6e2:	2208      	movs	r2, #8
1005c6e4:	2300      	movs	r3, #0
1005c6e6:	4638      	mov	r0, r7
1005c6e8:	4631      	mov	r1, r6
1005c6ea:	47a8      	blx	r5
1005c6ec:	2401      	movs	r4, #1
1005c6ee:	9807      	ldr	r0, [sp, #28]
1005c6f0:	f7fd ffe4 	bl	1005a6bc <llc_conn_clr_instant_reached_passed>
1005c6f4:	e028      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c6f6:	2401      	movs	r4, #1
1005c6f8:	e023      	b.n	1005c742 <__arm_cp.14_10+0x30e>
1005c6fa:	4638      	mov	r0, r7
1005c6fc:	4631      	mov	r1, r6
1005c6fe:	f000 f901 	bl	1005c904 <ll_cpe_get_expected_opcode>
1005c702:	28ff      	cmp	r0, #255	@ 0xff
1005c704:	d015      	beq.n	1005c732 <__arm_cp.14_10+0x2fe>
1005c706:	2404      	movs	r4, #4
1005c708:	e01b      	b.n	1005c742 <__arm_cp.14_10+0x30e>
1005c70a:	2804      	cmp	r0, #4
1005c70c:	d004      	beq.n	1005c718 <__arm_cp.14_10+0x2e4>
1005c70e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005c710:	2900      	cmp	r1, #0
1005c712:	d095      	beq.n	1005c640 <__arm_cp.14_10+0x20c>
1005c714:	2801      	cmp	r0, #1
1005c716:	d193      	bne.n	1005c640 <__arm_cp.14_10+0x20c>
1005c718:	4638      	mov	r0, r7
1005c71a:	f7ff fc4f 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005c71e:	8801      	ldrh	r1, [r0, #0]
1005c720:	2404      	movs	r4, #4
1005c722:	4321      	orrs	r1, r4
1005c724:	8001      	strh	r1, [r0, #0]
1005c726:	2015      	movs	r0, #21
1005c728:	f006 fa24 	bl	10062b74 <tsk_notify_idx>
1005c72c:	f7f5 fba5 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005c730:	e00a      	b.n	1005c748 <__arm_cp.14_10+0x314>
1005c732:	2402      	movs	r4, #2
1005c734:	e005      	b.n	1005c742 <__arm_cp.14_10+0x30e>
1005c736:	4638      	mov	r0, r7
1005c738:	f7fd fdf8 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c73c:	2100      	movs	r1, #0
1005c73e:	f7fe f88b 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005c742:	4638      	mov	r0, r7
1005c744:	f000 fba9 	bl	1005ce9a <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005c748:	4638      	mov	r0, r7
1005c74a:	f7ff fc37 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005c74e:	4606      	mov	r6, r0
1005c750:	8800      	ldrh	r0, [r0, #0]
1005c752:	06c0      	lsls	r0, r0, #27
1005c754:	d527      	bpl.n	1005c7a6 <__arm_cp.14_10+0x372>
1005c756:	4638      	mov	r0, r7
1005c758:	f7fd fde8 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c75c:	4605      	mov	r5, r0
1005c75e:	f7fe f8a8 	bl	1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>
1005c762:	9407      	str	r4, [sp, #28]
1005c764:	4604      	mov	r4, r0
1005c766:	2100      	movs	r1, #0
1005c768:	2201      	movs	r2, #1
1005c76a:	4638      	mov	r0, r7
1005c76c:	f000 f8b1 	bl	1005c8d2 <ll_cpe_get_blocked_status>
1005c770:	4320      	orrs	r0, r4
1005c772:	9c07      	ldr	r4, [sp, #28]
1005c774:	d117      	bne.n	1005c7a6 <__arm_cp.14_10+0x372>
1005c776:	8837      	ldrh	r7, [r6, #0]
1005c778:	2401      	movs	r4, #1
1005c77a:	4628      	mov	r0, r5
1005c77c:	4621      	mov	r1, r4
1005c77e:	f7fe f86b 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005c782:	4946      	ldr	r1, [pc, #280]	@ (1005c89c <__arm_cp.14_1>)
1005c784:	8001      	strh	r1, [r0, #0]
1005c786:	0979      	lsrs	r1, r7, #5
1005c788:	9f06      	ldr	r7, [sp, #24]
1005c78a:	0209      	lsls	r1, r1, #8
1005c78c:	1dc9      	adds	r1, r1, #7
1005c78e:	8041      	strh	r1, [r0, #2]
1005c790:	8830      	ldrh	r0, [r6, #0]
1005c792:	2108      	movs	r1, #8
1005c794:	4301      	orrs	r1, r0
1005c796:	2010      	movs	r0, #16
1005c798:	4381      	bics	r1, r0
1005c79a:	8031      	strh	r1, [r6, #0]
1005c79c:	4628      	mov	r0, r5
1005c79e:	4621      	mov	r1, r4
1005c7a0:	9c07      	ldr	r4, [sp, #28]
1005c7a2:	f7fe fb21 	bl	1005ade8 <llc_conn_set_tx_ctrl_pdu_state>
1005c7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c7a8:	42a0      	cmp	r0, r4
1005c7aa:	d004      	beq.n	1005c7b6 <__arm_cp.14_10+0x382>
1005c7ac:	4638      	mov	r0, r7
1005c7ae:	9908      	ldr	r1, [sp, #32]
1005c7b0:	4622      	mov	r2, r4
1005c7b2:	f000 fa5d 	bl	1005cc70 <ll_cpe_set_state>
1005c7b6:	a80c      	add	r0, sp, #48	@ 0x30
1005c7b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005c7ba:	1840      	adds	r0, r0, r1
1005c7bc:	7044      	strb	r4, [r0, #1]
1005c7be:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c7c0:	e5fc      	b.n	1005c3bc <LL_cpe_engine+0x2c8>
1005c7c2:	a80c      	add	r0, sp, #48	@ 0x30
1005c7c4:	7802      	ldrb	r2, [r0, #0]
1005c7c6:	2001      	movs	r0, #1
1005c7c8:	2a02      	cmp	r2, #2
1005c7ca:	d008      	beq.n	1005c7de <__arm_cp.14_10+0x3aa>
1005c7cc:	a90c      	add	r1, sp, #48	@ 0x30
1005c7ce:	7849      	ldrb	r1, [r1, #1]
1005c7d0:	2902      	cmp	r1, #2
1005c7d2:	d004      	beq.n	1005c7de <__arm_cp.14_10+0x3aa>
1005c7d4:	2a03      	cmp	r2, #3
1005c7d6:	d002      	beq.n	1005c7de <__arm_cp.14_10+0x3aa>
1005c7d8:	1ec9      	subs	r1, r1, #3
1005c7da:	4248      	negs	r0, r1
1005c7dc:	4148      	adcs	r0, r1
1005c7de:	b00d      	add	sp, #52	@ 0x34
1005c7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005c7e2:	4260      	negs	r0, r4
1005c7e4:	4160      	adcs	r0, r4
1005c7e6:	e542      	b.n	1005c26e <LL_cpe_engine+0x17a>
1005c7e8:	461c      	mov	r4, r3
1005c7ea:	f7fd f8cb 	bl	10059984 <pcl_csr_ucfg_weak>
1005c7ee:	e046      	b.n	1005c87e <__arm_cp.14_10+0x44a>
1005c7f0:	461c      	mov	r4, r3
1005c7f2:	f7fd f8c5 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1005c7f6:	e042      	b.n	1005c87e <__arm_cp.14_10+0x44a>
1005c7f8:	461c      	mov	r4, r3
1005c7fa:	f7fd f865 	bl	100598c8 <cte_csr_ucfg_weak>
1005c7fe:	e03e      	b.n	1005c87e <__arm_cp.14_10+0x44a>
1005c800:	461d      	mov	r5, r3
1005c802:	f7ff fb01 	bl	1005be08 <cis_csr_ucfg_weak>
1005c806:	e022      	b.n	1005c84e <__arm_cp.14_10+0x41a>
1005c808:	461c      	mov	r4, r3
1005c80a:	f7f2 fbb3 	bl	1004ef74 <phy_upd_csr_ucfg>
1005c80e:	e036      	b.n	1005c87e <__arm_cp.14_10+0x44a>
1005c810:	461d      	mov	r5, r3
1005c812:	f7f2 fbaf 	bl	1004ef74 <phy_upd_csr_ucfg>
1005c816:	e01a      	b.n	1005c84e <__arm_cp.14_10+0x41a>
1005c818:	461c      	mov	r4, r3
1005c81a:	f7ff faff 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005c81e:	e027      	b.n	1005c870 <__arm_cp.14_10+0x43c>
1005c820:	4265      	negs	r5, r4
1005c822:	4165      	adcs	r5, r4
1005c824:	461c      	mov	r4, r3
1005c826:	f7ff faef 	bl	1005be08 <cis_csr_ucfg_weak>
1005c82a:	e031      	b.n	1005c890 <__arm_cp.14_10+0x45c>
1005c82c:	461c      	mov	r4, r3
1005c82e:	f7ff faeb 	bl	1005be08 <cis_csr_ucfg_weak>
1005c832:	e024      	b.n	1005c87e <__arm_cp.14_10+0x44a>
1005c834:	4265      	negs	r5, r4
1005c836:	4165      	adcs	r5, r4
1005c838:	461c      	mov	r4, r3
1005c83a:	f7fd f8ab 	bl	10059994 <subrate_csr_ucfg_weak>
1005c83e:	e027      	b.n	1005c890 <__arm_cp.14_10+0x45c>
1005c840:	461d      	mov	r5, r3
1005c842:	f7fd f8a7 	bl	10059994 <subrate_csr_ucfg_weak>
1005c846:	e002      	b.n	1005c84e <__arm_cp.14_10+0x41a>
1005c848:	461d      	mov	r5, r3
1005c84a:	f7fc ff48 	bl	100596de <chc_csr_ucfg_weak>
1005c84e:	462b      	mov	r3, r5
1005c850:	1e41      	subs	r1, r0, #1
1005c852:	4188      	sbcs	r0, r1
1005c854:	1e61      	subs	r1, r4, #1
1005c856:	418c      	sbcs	r4, r1
1005c858:	4004      	ands	r4, r0
1005c85a:	4620      	mov	r0, r4
1005c85c:	e507      	b.n	1005c26e <LL_cpe_engine+0x17a>
1005c85e:	4265      	negs	r5, r4
1005c860:	4165      	adcs	r5, r4
1005c862:	461c      	mov	r4, r3
1005c864:	f7fc ff3b 	bl	100596de <chc_csr_ucfg_weak>
1005c868:	e012      	b.n	1005c890 <__arm_cp.14_10+0x45c>
1005c86a:	461c      	mov	r4, r3
1005c86c:	f7ff fad8 	bl	1005be20 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005c870:	4623      	mov	r3, r4
1005c872:	2800      	cmp	r0, #0
1005c874:	4638      	mov	r0, r7
1005c876:	d100      	bne.n	1005c87a <__arm_cp.14_10+0x446>
1005c878:	e4f9      	b.n	1005c26e <LL_cpe_engine+0x17a>
1005c87a:	f7fd f887 	bl	1005998c <scan_csr_ucfg_weak>
1005c87e:	4623      	mov	r3, r4
1005c880:	1e41      	subs	r1, r0, #1
1005c882:	4188      	sbcs	r0, r1
1005c884:	e4f3      	b.n	1005c26e <LL_cpe_engine+0x17a>
1005c886:	4265      	negs	r5, r4
1005c888:	4165      	adcs	r5, r4
1005c88a:	461c      	mov	r4, r3
1005c88c:	f7f2 fb72 	bl	1004ef74 <phy_upd_csr_ucfg>
1005c890:	4623      	mov	r3, r4
1005c892:	1e41      	subs	r1, r0, #1
1005c894:	4188      	sbcs	r0, r1
1005c896:	4028      	ands	r0, r5
1005c898:	e4e9      	b.n	1005c26e <LL_cpe_engine+0x17a>
1005c89a:	46c0      	nop			@ (mov r8, r8)

1005c89c <__arm_cp.14_1>:
1005c89c:	00000203 	.word	0x00000203

1005c8a0 <ll_cpe_set_active>:
1005c8a0:	b580      	push	{r7, lr}
1005c8a2:	f7ff fb8b 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005c8a6:	8801      	ldrh	r1, [r0, #0]
1005c8a8:	2201      	movs	r2, #1
1005c8aa:	430a      	orrs	r2, r1
1005c8ac:	8002      	strh	r2, [r0, #0]
1005c8ae:	bd80      	pop	{r7, pc}

1005c8b0 <ll_cpe_check_rx_pdu_can_be_processed>:
1005c8b0:	b510      	push	{r4, lr}
1005c8b2:	f7fd fd3b 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c8b6:	4604      	mov	r4, r0
1005c8b8:	f7fd ffe9 	bl	1005a88e <llc_conn_get_rx_ctrl_pdu_full>
1005c8bc:	2800      	cmp	r0, #0
1005c8be:	d006      	beq.n	1005c8ce <ll_cpe_check_rx_pdu_can_be_processed+0x1e>
1005c8c0:	4620      	mov	r0, r4
1005c8c2:	f7fd fff6 	bl	1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>
1005c8c6:	1ec0      	subs	r0, r0, #3
1005c8c8:	1e41      	subs	r1, r0, #1
1005c8ca:	4188      	sbcs	r0, r1
1005c8cc:	bd10      	pop	{r4, pc}
1005c8ce:	2000      	movs	r0, #0
1005c8d0:	bd10      	pop	{r4, pc}

1005c8d2 <ll_cpe_get_blocked_status>:
1005c8d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c8d4:	4614      	mov	r4, r2
1005c8d6:	4607      	mov	r7, r0
1005c8d8:	424e      	negs	r6, r1
1005c8da:	414e      	adcs	r6, r1
1005c8dc:	4631      	mov	r1, r6
1005c8de:	f7ff fb7a 	bl	1005bfd6 <LL_cpe_get_active_status>
1005c8e2:	2500      	movs	r5, #0
1005c8e4:	2800      	cmp	r0, #0
1005c8e6:	d00b      	beq.n	1005c900 <ll_cpe_get_blocked_status+0x2e>
1005c8e8:	4638      	mov	r0, r7
1005c8ea:	4631      	mov	r1, r6
1005c8ec:	f7ff fb7a 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c8f0:	2c02      	cmp	r4, #2
1005c8f2:	d805      	bhi.n	1005c900 <ll_cpe_get_blocked_status+0x2e>
1005c8f4:	7800      	ldrb	r0, [r0, #0]
1005c8f6:	1c61      	adds	r1, r4, #1
1005c8f8:	b2c9      	uxtb	r1, r1
1005c8fa:	40c8      	lsrs	r0, r1
1005c8fc:	2501      	movs	r5, #1
1005c8fe:	4005      	ands	r5, r0
1005c900:	4628      	mov	r0, r5
1005c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c904 <ll_cpe_get_expected_opcode>:
1005c904:	b510      	push	{r4, lr}
1005c906:	460c      	mov	r4, r1
1005c908:	f7fd fd10 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c90c:	1900      	adds	r0, r0, r4
1005c90e:	21ae      	movs	r1, #174	@ 0xae
1005c910:	5c40      	ldrb	r0, [r0, r1]
1005c912:	bd10      	pop	{r4, pc}

1005c914 <ll_cpe_get_state>:
1005c914:	b510      	push	{r4, lr}
1005c916:	460c      	mov	r4, r1
1005c918:	f7fd fd08 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005c91c:	1900      	adds	r0, r0, r4
1005c91e:	21aa      	movs	r1, #170	@ 0xaa
1005c920:	5c40      	ldrb	r0, [r0, r1]
1005c922:	bd10      	pop	{r4, pc}

1005c924 <LL_cpe_rxctrlpdu_checkreject>:
1005c924:	b5b0      	push	{r4, r5, r7, lr}
1005c926:	460c      	mov	r4, r1
1005c928:	4605      	mov	r5, r0
1005c92a:	4610      	mov	r0, r2
1005c92c:	4619      	mov	r1, r3
1005c92e:	f7ff fb91 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005c932:	4601      	mov	r1, r0
1005c934:	2001      	movs	r0, #1
1005c936:	2d0d      	cmp	r5, #13
1005c938:	d102      	bne.n	1005c940 <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005c93a:	2901      	cmp	r1, #1
1005c93c:	d100      	bne.n	1005c940 <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005c93e:	bdb0      	pop	{r4, r5, r7, pc}
1005c940:	2200      	movs	r2, #0
1005c942:	2d11      	cmp	r5, #17
1005c944:	d001      	beq.n	1005c94a <LL_cpe_rxctrlpdu_checkreject+0x26>
1005c946:	2d07      	cmp	r5, #7
1005c948:	d110      	bne.n	1005c96c <LL_cpe_rxctrlpdu_checkreject+0x48>
1005c94a:	2c2a      	cmp	r4, #42	@ 0x2a
1005c94c:	d804      	bhi.n	1005c958 <LL_cpe_rxctrlpdu_checkreject+0x34>
1005c94e:	2303      	movs	r3, #3
1005c950:	4363      	muls	r3, r4
1005c952:	4d07      	ldr	r5, [pc, #28]	@ (1005c970 <__arm_cp.20_0>)
1005c954:	5ceb      	ldrb	r3, [r5, r3]
1005c956:	e000      	b.n	1005c95a <LL_cpe_rxctrlpdu_checkreject+0x36>
1005c958:	2316      	movs	r3, #22
1005c95a:	4299      	cmp	r1, r3
1005c95c:	d106      	bne.n	1005c96c <LL_cpe_rxctrlpdu_checkreject+0x48>
1005c95e:	2103      	movs	r1, #3
1005c960:	4361      	muls	r1, r4
1005c962:	4b03      	ldr	r3, [pc, #12]	@ (1005c970 <__arm_cp.20_0>)
1005c964:	1859      	adds	r1, r3, r1
1005c966:	7889      	ldrb	r1, [r1, #2]
1005c968:	2900      	cmp	r1, #0
1005c96a:	d1e8      	bne.n	1005c93e <LL_cpe_rxctrlpdu_checkreject+0x1a>
1005c96c:	4610      	mov	r0, r2
1005c96e:	bdb0      	pop	{r4, r5, r7, pc}

1005c970 <__arm_cp.20_0>:
1005c970:	10069ba0 	.word	0x10069ba0

1005c974 <valid_first_opcode>:
1005c974:	b5b0      	push	{r4, r5, r7, lr}
1005c976:	2300      	movs	r3, #0
1005c978:	282a      	cmp	r0, #42	@ 0x2a
1005c97a:	d863      	bhi.n	1005ca44 <valid_first_opcode+0xd0>
1005c97c:	2403      	movs	r4, #3
1005c97e:	4344      	muls	r4, r0
1005c980:	4d34      	ldr	r5, [pc, #208]	@ (1005ca54 <__arm_cp.21_0>)
1005c982:	192c      	adds	r4, r5, r4
1005c984:	7864      	ldrb	r4, [r4, #1]
1005c986:	4294      	cmp	r4, r2
1005c988:	d15c      	bne.n	1005ca44 <valid_first_opcode+0xd0>
1005c98a:	282a      	cmp	r0, #42	@ 0x2a
1005c98c:	d85a      	bhi.n	1005ca44 <valid_first_opcode+0xd0>
1005c98e:	0080      	lsls	r0, r0, #2
1005c990:	a201      	add	r2, pc, #4	@ (adr r2, 1005c998 <valid_first_opcode+0x24>)
1005c992:	5810      	ldr	r0, [r2, r0]
1005c994:	4687      	mov	pc, r0
1005c996:	46c0      	nop			@ (mov r8, r8)
1005c998:	1005ca47 	.word	0x1005ca47
1005c99c:	1005ca47 	.word	0x1005ca47
1005c9a0:	1005ca45 	.word	0x1005ca45
1005c9a4:	1005ca47 	.word	0x1005ca47
1005c9a8:	1005ca45 	.word	0x1005ca45
1005c9ac:	1005ca45 	.word	0x1005ca45
1005c9b0:	1005ca45 	.word	0x1005ca45
1005c9b4:	1005ca45 	.word	0x1005ca45
1005c9b8:	1005ca47 	.word	0x1005ca47
1005c9bc:	1005ca45 	.word	0x1005ca45
1005c9c0:	1005ca47 	.word	0x1005ca47
1005c9c4:	1005ca45 	.word	0x1005ca45
1005c9c8:	1005ca4b 	.word	0x1005ca4b
1005c9cc:	1005ca45 	.word	0x1005ca45
1005c9d0:	1005ca4f 	.word	0x1005ca4f
1005c9d4:	1005ca45 	.word	0x1005ca45
1005c9d8:	1005ca45 	.word	0x1005ca45
1005c9dc:	1005ca45 	.word	0x1005ca45
1005c9e0:	1005ca4b 	.word	0x1005ca4b
1005c9e4:	1005ca45 	.word	0x1005ca45
1005c9e8:	1005ca4b 	.word	0x1005ca4b
1005c9ec:	1005ca45 	.word	0x1005ca45
1005c9f0:	1005ca4b 	.word	0x1005ca4b
1005c9f4:	1005ca45 	.word	0x1005ca45
1005c9f8:	1005ca45 	.word	0x1005ca45
1005c9fc:	1005ca45 	.word	0x1005ca45
1005ca00:	1005ca4b 	.word	0x1005ca4b
1005ca04:	1005ca45 	.word	0x1005ca45
1005ca08:	1005ca4b 	.word	0x1005ca4b
1005ca0c:	1005ca4b 	.word	0x1005ca4b
1005ca10:	1005ca45 	.word	0x1005ca45
1005ca14:	1005ca47 	.word	0x1005ca47
1005ca18:	1005ca45 	.word	0x1005ca45
1005ca1c:	1005ca45 	.word	0x1005ca45
1005ca20:	1005ca4b 	.word	0x1005ca4b
1005ca24:	1005ca4b 	.word	0x1005ca4b
1005ca28:	1005ca45 	.word	0x1005ca45
1005ca2c:	1005ca4b 	.word	0x1005ca4b
1005ca30:	1005ca4b 	.word	0x1005ca4b
1005ca34:	1005ca4b 	.word	0x1005ca4b
1005ca38:	1005ca4b 	.word	0x1005ca4b
1005ca3c:	1005ca4b 	.word	0x1005ca4b
1005ca40:	1005ca4b 	.word	0x1005ca4b
1005ca44:	4619      	mov	r1, r3
1005ca46:	4608      	mov	r0, r1
1005ca48:	bdb0      	pop	{r4, r5, r7, pc}
1005ca4a:	2101      	movs	r1, #1
1005ca4c:	e7fb      	b.n	1005ca46 <valid_first_opcode+0xd2>
1005ca4e:	4248      	negs	r0, r1
1005ca50:	4141      	adcs	r1, r0
1005ca52:	e7f8      	b.n	1005ca46 <valid_first_opcode+0xd2>

1005ca54 <__arm_cp.21_0>:
1005ca54:	10069ba0 	.word	0x10069ba0

1005ca58 <LL_cpe_init_phy_update>:
1005ca58:	b580      	push	{r7, lr}
1005ca5a:	2007      	movs	r0, #7
1005ca5c:	4901      	ldr	r1, [pc, #4]	@ (1005ca64 <__arm_cp.23_0>)
1005ca5e:	f7ff fab2 	bl	1005bfc6 <LL_cpe_register_cpf>
1005ca62:	bd80      	pop	{r7, pc}

1005ca64 <__arm_cp.23_0>:
1005ca64:	1005e471 	.word	0x1005e471

1005ca68 <LL_cpe_init_conn_update>:
1005ca68:	b580      	push	{r7, lr}
1005ca6a:	2000      	movs	r0, #0
1005ca6c:	4901      	ldr	r1, [pc, #4]	@ (1005ca74 <__arm_cp.28_0>)
1005ca6e:	f7ff faaa 	bl	1005bfc6 <LL_cpe_register_cpf>
1005ca72:	bd80      	pop	{r7, pc}

1005ca74 <__arm_cp.28_0>:
1005ca74:	1005d095 	.word	0x1005d095

1005ca78 <LL_cpe_init_chmap_update>:
1005ca78:	b580      	push	{r7, lr}
1005ca7a:	2002      	movs	r0, #2
1005ca7c:	4901      	ldr	r1, [pc, #4]	@ (1005ca84 <__arm_cp.29_0>)
1005ca7e:	f7ff faa2 	bl	1005bfc6 <LL_cpe_register_cpf>
1005ca82:	bd80      	pop	{r7, pc}

1005ca84 <__arm_cp.29_0>:
1005ca84:	1005cf85 	.word	0x1005cf85

1005ca88 <LL_cpe_init_length_update_ucfg_weak>:
1005ca88:	b580      	push	{r7, lr}
1005ca8a:	2006      	movs	r0, #6
1005ca8c:	2100      	movs	r1, #0
1005ca8e:	f7ff fa9a 	bl	1005bfc6 <LL_cpe_register_cpf>
1005ca92:	bd80      	pop	{r7, pc}

1005ca94 <LL_cpe_init_cte_ucfg_weak>:
1005ca94:	b580      	push	{r7, lr}
1005ca96:	200a      	movs	r0, #10
1005ca98:	2100      	movs	r1, #0
1005ca9a:	f7ff fa94 	bl	1005bfc6 <LL_cpe_register_cpf>
1005ca9e:	bd80      	pop	{r7, pc}

1005caa0 <LL_cpe_init_past_ucfg_weak>:
1005caa0:	b580      	push	{r7, lr}
1005caa2:	2009      	movs	r0, #9
1005caa4:	2100      	movs	r1, #0
1005caa6:	f7ff fa8e 	bl	1005bfc6 <LL_cpe_register_cpf>
1005caaa:	bd80      	pop	{r7, pc}

1005caac <LL_cpe_init_pcl_ucfg_weak>:
1005caac:	b580      	push	{r7, lr}
1005caae:	200b      	movs	r0, #11
1005cab0:	2100      	movs	r1, #0
1005cab2:	f7ff fa88 	bl	1005bfc6 <LL_cpe_register_cpf>
1005cab6:	bd80      	pop	{r7, pc}

1005cab8 <LL_cpe_init_chc_enable_ucfg_weak>:
1005cab8:	b580      	push	{r7, lr}
1005caba:	200c      	movs	r0, #12
1005cabc:	2100      	movs	r1, #0
1005cabe:	f7ff fa82 	bl	1005bfc6 <LL_cpe_register_cpf>
1005cac2:	bd80      	pop	{r7, pc}

1005cac4 <LL_cpe_init_chc_reporting_ucfg_weak>:
1005cac4:	b580      	push	{r7, lr}
1005cac6:	200d      	movs	r0, #13
1005cac8:	2100      	movs	r1, #0
1005caca:	f7ff fa7c 	bl	1005bfc6 <LL_cpe_register_cpf>
1005cace:	bd80      	pop	{r7, pc}

1005cad0 <LL_cpe_init_subrate_ucfg_weak>:
1005cad0:	b580      	push	{r7, lr}
1005cad2:	2011      	movs	r0, #17
1005cad4:	2100      	movs	r1, #0
1005cad6:	f7ff fa76 	bl	1005bfc6 <LL_cpe_register_cpf>
1005cada:	bd80      	pop	{r7, pc}

1005cadc <LL_cpe_init_sca_upd_ucfg_weak>:
1005cadc:	b580      	push	{r7, lr}
1005cade:	2012      	movs	r0, #18
1005cae0:	2100      	movs	r1, #0
1005cae2:	f7ff fa70 	bl	1005bfc6 <LL_cpe_register_cpf>
1005cae6:	bd80      	pop	{r7, pc}

1005cae8 <LL_cpe_init_cis_ucfg_weak>:
1005cae8:	b510      	push	{r4, lr}
1005caea:	200e      	movs	r0, #14
1005caec:	2400      	movs	r4, #0
1005caee:	4621      	mov	r1, r4
1005caf0:	f7ff fa69 	bl	1005bfc6 <LL_cpe_register_cpf>
1005caf4:	2010      	movs	r0, #16
1005caf6:	4621      	mov	r1, r4
1005caf8:	f7ff fa65 	bl	1005bfc6 <LL_cpe_register_cpf>
1005cafc:	bd10      	pop	{r4, pc}
	...

1005cb00 <LL_cpe_init>:
1005cb00:	b5b0      	push	{r4, r5, r7, lr}
1005cb02:	2001      	movs	r0, #1
1005cb04:	4918      	ldr	r1, [pc, #96]	@ (1005cb68 <__arm_cp.47_0>)
1005cb06:	4c19      	ldr	r4, [pc, #100]	@ (1005cb6c <__arm_cp.47_1>)
1005cb08:	47a0      	blx	r4
1005cb0a:	2003      	movs	r0, #3
1005cb0c:	4918      	ldr	r1, [pc, #96]	@ (1005cb70 <__arm_cp.47_2>)
1005cb0e:	47a0      	blx	r4
1005cb10:	2005      	movs	r0, #5
1005cb12:	4918      	ldr	r1, [pc, #96]	@ (1005cb74 <__arm_cp.47_3>)
1005cb14:	47a0      	blx	r4
1005cb16:	2008      	movs	r0, #8
1005cb18:	4917      	ldr	r1, [pc, #92]	@ (1005cb78 <__arm_cp.47_4>)
1005cb1a:	47a0      	blx	r4
1005cb1c:	f7f2 fb1d 	bl	1004f15a <LL_cpe_init_conn_update_ucfg>
1005cb20:	f7f2 fb22 	bl	1004f168 <LL_cpe_init_chmap_update_ucfg>
1005cb24:	f7ff ffb0 	bl	1005ca88 <LL_cpe_init_length_update_ucfg_weak>
1005cb28:	f7f2 fb10 	bl	1004f14c <LL_cpe_init_phy_update_ucfg>
1005cb2c:	f7ff ffb8 	bl	1005caa0 <LL_cpe_init_past_ucfg_weak>
1005cb30:	f7ff ffb0 	bl	1005ca94 <LL_cpe_init_cte_ucfg_weak>
1005cb34:	f7ff ffba 	bl	1005caac <LL_cpe_init_pcl_ucfg_weak>
1005cb38:	f7ff ffbe 	bl	1005cab8 <LL_cpe_init_chc_enable_ucfg_weak>
1005cb3c:	f7ff ffc2 	bl	1005cac4 <LL_cpe_init_chc_reporting_ucfg_weak>
1005cb40:	f7ff ffd2 	bl	1005cae8 <LL_cpe_init_cis_ucfg_weak>
1005cb44:	f7ff ffc4 	bl	1005cad0 <LL_cpe_init_subrate_ucfg_weak>
1005cb48:	f7ff ffc8 	bl	1005cadc <LL_cpe_init_sca_upd_ucfg_weak>
1005cb4c:	2400      	movs	r4, #0
1005cb4e:	4d0b      	ldr	r5, [pc, #44]	@ (1005cb7c <__arm_cp.47_5>)
1005cb50:	6828      	ldr	r0, [r5, #0]
1005cb52:	2134      	movs	r1, #52	@ 0x34
1005cb54:	5c41      	ldrb	r1, [r0, r1]
1005cb56:	b2e0      	uxtb	r0, r4
1005cb58:	4288      	cmp	r0, r1
1005cb5a:	d203      	bcs.n	1005cb64 <LL_cpe_init+0x64>
1005cb5c:	f000 f810 	bl	1005cb80 <ll_cpe_reset_state_machines>
1005cb60:	1c64      	adds	r4, r4, #1
1005cb62:	e7f5      	b.n	1005cb50 <LL_cpe_init+0x50>
1005cb64:	bdb0      	pop	{r4, r5, r7, pc}
1005cb66:	46c0      	nop			@ (mov r8, r8)

1005cb68 <__arm_cp.47_0>:
1005cb68:	1005d519 	.word	0x1005d519

1005cb6c <__arm_cp.47_1>:
1005cb6c:	1005bfc7 	.word	0x1005bfc7

1005cb70 <__arm_cp.47_2>:
1005cb70:	1005dd05 	.word	0x1005dd05

1005cb74 <__arm_cp.47_3>:
1005cb74:	1005ed39 	.word	0x1005ed39

1005cb78 <__arm_cp.47_4>:
1005cb78:	1005e2c5 	.word	0x1005e2c5

1005cb7c <__arm_cp.47_5>:
1005cb7c:	20002414 	.word	0x20002414

1005cb80 <ll_cpe_reset_state_machines>:
1005cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005cb82:	2638      	movs	r6, #56	@ 0x38
1005cb84:	4346      	muls	r6, r0
1005cb86:	9000      	str	r0, [sp, #0]
1005cb88:	f7fd fbd0 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005cb8c:	4605      	mov	r5, r0
1005cb8e:	4816      	ldr	r0, [pc, #88]	@ (1005cbe8 <__arm_cp.48_0>)
1005cb90:	6800      	ldr	r0, [r0, #0]
1005cb92:	219c      	movs	r1, #156	@ 0x9c
1005cb94:	5842      	ldr	r2, [r0, r1]
1005cb96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
1005cb98:	6892      	ldr	r2, [r2, #8]
1005cb9a:	1992      	adds	r2, r2, r6
1005cb9c:	23a0      	movs	r3, #160	@ 0xa0
1005cb9e:	50ea      	str	r2, [r5, r3]
1005cba0:	5840      	ldr	r0, [r0, r1]
1005cba2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005cba4:	68c0      	ldr	r0, [r0, #12]
1005cba6:	1980      	adds	r0, r0, r6
1005cba8:	462e      	mov	r6, r5
1005cbaa:	36a0      	adds	r6, #160	@ 0xa0
1005cbac:	6070      	str	r0, [r6, #4]
1005cbae:	27ae      	movs	r7, #174	@ 0xae
1005cbb0:	2fb0      	cmp	r7, #176	@ 0xb0
1005cbb2:	d00f      	beq.n	1005cbd4 <ll_cpe_reset_state_machines+0x54>
1005cbb4:	4638      	mov	r0, r7
1005cbb6:	38ae      	subs	r0, #174	@ 0xae
1005cbb8:	19e9      	adds	r1, r5, r7
1005cbba:	1f09      	subs	r1, r1, #4
1005cbbc:	2400      	movs	r4, #0
1005cbbe:	700c      	strb	r4, [r1, #0]
1005cbc0:	b2c1      	uxtb	r1, r0
1005cbc2:	9800      	ldr	r0, [sp, #0]
1005cbc4:	f7ff fa0e 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005cbc8:	7004      	strb	r4, [r0, #0]
1005cbca:	20ff      	movs	r0, #255	@ 0xff
1005cbcc:	55e8      	strb	r0, [r5, r7]
1005cbce:	74f4      	strb	r4, [r6, #19]
1005cbd0:	1c7f      	adds	r7, r7, #1
1005cbd2:	e7ed      	b.n	1005cbb0 <ll_cpe_reset_state_machines+0x30>
1005cbd4:	2400      	movs	r4, #0
1005cbd6:	74b4      	strb	r4, [r6, #18]
1005cbd8:	9800      	ldr	r0, [sp, #0]
1005cbda:	f7ff f9ef 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005cbde:	8004      	strh	r4, [r0, #0]
1005cbe0:	4802      	ldr	r0, [pc, #8]	@ (1005cbec <__arm_cp.48_1>)
1005cbe2:	8768      	strh	r0, [r5, #58]	@ 0x3a
1005cbe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005cbe6:	46c0      	nop			@ (mov r8, r8)

1005cbe8 <__arm_cp.48_0>:
1005cbe8:	20002468 	.word	0x20002468

1005cbec <__arm_cp.48_1>:
1005cbec:	0000ffff 	.word	0x0000ffff

1005cbf0 <LL_cpe_set_disconnect>:
1005cbf0:	b510      	push	{r4, lr}
1005cbf2:	2480      	movs	r4, #128	@ 0x80
1005cbf4:	430c      	orrs	r4, r1
1005cbf6:	f7fd fb99 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005cbfa:	21b2      	movs	r1, #178	@ 0xb2
1005cbfc:	5444      	strb	r4, [r0, r1]
1005cbfe:	2015      	movs	r0, #21
1005cc00:	f005 ffb8 	bl	10062b74 <tsk_notify_idx>
1005cc04:	f7f5 f939 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005cc08:	bd10      	pop	{r4, pc}

1005cc0a <LL_cpe_get_tx_terminate_in_progress>:
1005cc0a:	b580      	push	{r7, lr}
1005cc0c:	f7ff f9d6 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005cc10:	7800      	ldrb	r0, [r0, #0]
1005cc12:	0780      	lsls	r0, r0, #30
1005cc14:	0fc0      	lsrs	r0, r0, #31
1005cc16:	bd80      	pop	{r7, pc}

1005cc18 <LL_cpe_conn_exception_opcode_from_sm>:
1005cc18:	b580      	push	{r7, lr}
1005cc1a:	f7ff fa1b 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005cc1e:	21fd      	movs	r1, #253	@ 0xfd
1005cc20:	4008      	ands	r0, r1
1005cc22:	4241      	negs	r1, r0
1005cc24:	4148      	adcs	r0, r1
1005cc26:	bd80      	pop	{r7, pc}

1005cc28 <LL_cpe_conn_get_proc_id_from_sm>:
1005cc28:	b580      	push	{r7, lr}
1005cc2a:	f7ff fa13 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005cc2e:	bd80      	pop	{r7, pc}

1005cc30 <llc_cpe_calc_instant>:
1005cc30:	b580      	push	{r7, lr}
1005cc32:	f7fd fb7b 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005cc36:	2142      	movs	r1, #66	@ 0x42
1005cc38:	5a41      	ldrh	r1, [r0, r1]
1005cc3a:	2291      	movs	r2, #145	@ 0x91
1005cc3c:	0052      	lsls	r2, r2, #1
1005cc3e:	5a82      	ldrh	r2, [r0, r2]
1005cc40:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005cc42:	1c40      	adds	r0, r0, #1
1005cc44:	4350      	muls	r0, r2
1005cc46:	2206      	movs	r2, #6
1005cc48:	4342      	muls	r2, r0
1005cc4a:	1850      	adds	r0, r2, r1
1005cc4c:	b280      	uxth	r0, r0
1005cc4e:	bd80      	pop	{r7, pc}

1005cc50 <llc_cpe_init_sm_ctxt>:
1005cc50:	b5b0      	push	{r4, r5, r7, lr}
1005cc52:	4604      	mov	r4, r0
1005cc54:	f7ff fe24 	bl	1005c8a0 <ll_cpe_set_active>
1005cc58:	4620      	mov	r0, r4
1005cc5a:	f7fd fb67 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005cc5e:	21aa      	movs	r1, #170	@ 0xaa
1005cc60:	2501      	movs	r5, #1
1005cc62:	5445      	strb	r5, [r0, r1]
1005cc64:	4620      	mov	r0, r4
1005cc66:	f7fd fb61 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005cc6a:	21ab      	movs	r1, #171	@ 0xab
1005cc6c:	5445      	strb	r5, [r0, r1]
1005cc6e:	bdb0      	pop	{r4, r5, r7, pc}

1005cc70 <ll_cpe_set_state>:
1005cc70:	b5b0      	push	{r4, r5, r7, lr}
1005cc72:	4614      	mov	r4, r2
1005cc74:	460d      	mov	r5, r1
1005cc76:	f7fd fb59 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005cc7a:	1940      	adds	r0, r0, r5
1005cc7c:	21aa      	movs	r1, #170	@ 0xaa
1005cc7e:	5444      	strb	r4, [r0, r1]
1005cc80:	bdb0      	pop	{r4, r5, r7, pc}

1005cc82 <ll_cpe_get_active>:
1005cc82:	b580      	push	{r7, lr}
1005cc84:	f7ff f99a 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005cc88:	8801      	ldrh	r1, [r0, #0]
1005cc8a:	2001      	movs	r0, #1
1005cc8c:	4008      	ands	r0, r1
1005cc8e:	bd80      	pop	{r7, pc}

1005cc90 <ll_cpe_get_rx_pdu_discarded_by_one_sm>:
1005cc90:	b580      	push	{r7, lr}
1005cc92:	f7ff f993 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005cc96:	7800      	ldrb	r0, [r0, #0]
1005cc98:	0740      	lsls	r0, r0, #29
1005cc9a:	0fc0      	lsrs	r0, r0, #31
1005cc9c:	bd80      	pop	{r7, pc}
	...

1005cca0 <ll_cpe_process_rx_pdu>:
1005cca0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cca2:	b08f      	sub	sp, #60	@ 0x3c
1005cca4:	9206      	str	r2, [sp, #24]
1005cca6:	460d      	mov	r5, r1
1005cca8:	4606      	mov	r6, r0
1005ccaa:	f7fd fb3f 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005ccae:	212c      	movs	r1, #44	@ 0x2c
1005ccb0:	5c41      	ldrb	r1, [r0, r1]
1005ccb2:	1ec9      	subs	r1, r1, #3
1005ccb4:	424a      	negs	r2, r1
1005ccb6:	414a      	adcs	r2, r1
1005ccb8:	9205      	str	r2, [sp, #20]
1005ccba:	2400      	movs	r4, #0
1005ccbc:	900a      	str	r0, [sp, #40]	@ 0x28
1005ccbe:	4621      	mov	r1, r4
1005ccc0:	f7fd fdca 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1005ccc4:	7841      	ldrb	r1, [r0, #1]
1005ccc6:	9104      	str	r1, [sp, #16]
1005ccc8:	9009      	str	r0, [sp, #36]	@ 0x24
1005ccca:	8847      	ldrh	r7, [r0, #2]
1005cccc:	4630      	mov	r0, r6
1005ccce:	4629      	mov	r1, r5
1005ccd0:	f7ff fe18 	bl	1005c904 <ll_cpe_get_expected_opcode>
1005ccd4:	9003      	str	r0, [sp, #12]
1005ccd6:	4630      	mov	r0, r6
1005ccd8:	4629      	mov	r1, r5
1005ccda:	9407      	str	r4, [sp, #28]
1005ccdc:	4622      	mov	r2, r4
1005ccde:	f7ff fdf8 	bl	1005c8d2 <ll_cpe_get_blocked_status>
1005cce2:	900b      	str	r0, [sp, #44]	@ 0x2c
1005cce4:	b2fa      	uxtb	r2, r7
1005cce6:	4630      	mov	r0, r6
1005cce8:	4629      	mov	r1, r5
1005ccea:	920e      	str	r2, [sp, #56]	@ 0x38
1005ccec:	f000 f8dd 	bl	1005ceaa <ll_cpe_check_instant_blocked>
1005ccf0:	900c      	str	r0, [sp, #48]	@ 0x30
1005ccf2:	426c      	negs	r4, r5
1005ccf4:	9508      	str	r5, [sp, #32]
1005ccf6:	416c      	adcs	r4, r5
1005ccf8:	4630      	mov	r0, r6
1005ccfa:	4621      	mov	r1, r4
1005ccfc:	f7ff fe0a 	bl	1005c914 <ll_cpe_get_state>
1005cd00:	4605      	mov	r5, r0
1005cd02:	960d      	str	r6, [sp, #52]	@ 0x34
1005cd04:	4630      	mov	r0, r6
1005cd06:	4621      	mov	r1, r4
1005cd08:	f7ff fdfc 	bl	1005c904 <ll_cpe_get_expected_opcode>
1005cd0c:	463a      	mov	r2, r7
1005cd0e:	1ff9      	subs	r1, r7, #7
1005cd10:	b2cb      	uxtb	r3, r1
1005cd12:	2b0b      	cmp	r3, #11
1005cd14:	d302      	bcc.n	1005cd1c <ll_cpe_process_rx_pdu+0x7c>
1005cd16:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005cd18:	9f07      	ldr	r7, [sp, #28]
1005cd1a:	e001      	b.n	1005cd20 <ll_cpe_process_rx_pdu+0x80>
1005cd1c:	2701      	movs	r7, #1
1005cd1e:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005cd20:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005cd22:	2e01      	cmp	r6, #1
1005cd24:	d103      	bne.n	1005cd2e <ll_cpe_process_rx_pdu+0x8e>
1005cd26:	2d04      	cmp	r5, #4
1005cd28:	d147      	bne.n	1005cdba <ll_cpe_process_rx_pdu+0x11a>
1005cd2a:	4288      	cmp	r0, r1
1005cd2c:	d145      	bne.n	1005cdba <ll_cpe_process_rx_pdu+0x11a>
1005cd2e:	4955      	ldr	r1, [pc, #340]	@ (1005ce84 <__arm_cp.58_0>)
1005cd30:	40d9      	lsrs	r1, r3
1005cd32:	400f      	ands	r7, r1
1005cd34:	0a16      	lsrs	r6, r2, #8
1005cd36:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005cd38:	2901      	cmp	r1, #1
1005cd3a:	d11d      	bne.n	1005cd78 <ll_cpe_process_rx_pdu+0xd8>
1005cd3c:	900c      	str	r0, [sp, #48]	@ 0x30
1005cd3e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005cd40:	4631      	mov	r1, r6
1005cd42:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005cd44:	4632      	mov	r2, r6
1005cd46:	4623      	mov	r3, r4
1005cd48:	f7ff fdec 	bl	1005c924 <LL_cpe_rxctrlpdu_checkreject>
1005cd4c:	2d04      	cmp	r5, #4
1005cd4e:	d10c      	bne.n	1005cd6a <ll_cpe_process_rx_pdu+0xca>
1005cd50:	2101      	movs	r1, #1
1005cd52:	404f      	eors	r7, r1
1005cd54:	d101      	bne.n	1005cd5a <ll_cpe_process_rx_pdu+0xba>
1005cd56:	2800      	cmp	r0, #0
1005cd58:	d007      	beq.n	1005cd6a <ll_cpe_process_rx_pdu+0xca>
1005cd5a:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005cd5c:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005cd5e:	1a40      	subs	r0, r0, r1
1005cd60:	1e41      	subs	r1, r0, #1
1005cd62:	4188      	sbcs	r0, r1
1005cd64:	4007      	ands	r7, r0
1005cd66:	2f01      	cmp	r7, #1
1005cd68:	d16e      	bne.n	1005ce48 <ll_cpe_process_rx_pdu+0x1a8>
1005cd6a:	4630      	mov	r0, r6
1005cd6c:	4621      	mov	r1, r4
1005cd6e:	f7ff f971 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005cd72:	4605      	mov	r5, r0
1005cd74:	2605      	movs	r6, #5
1005cd76:	e026      	b.n	1005cdc6 <ll_cpe_process_rx_pdu+0x126>
1005cd78:	2400      	movs	r4, #0
1005cd7a:	9806      	ldr	r0, [sp, #24]
1005cd7c:	2803      	cmp	r0, #3
1005cd7e:	d049      	beq.n	1005ce14 <ll_cpe_process_rx_pdu+0x174>
1005cd80:	2801      	cmp	r0, #1
1005cd82:	d144      	bne.n	1005ce0e <ll_cpe_process_rx_pdu+0x16e>
1005cd84:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1005cd86:	4630      	mov	r0, r6
1005cd88:	9905      	ldr	r1, [sp, #20]
1005cd8a:	9a04      	ldr	r2, [sp, #16]
1005cd8c:	f7ff fdf2 	bl	1005c974 <valid_first_opcode>
1005cd90:	2801      	cmp	r0, #1
1005cd92:	d13c      	bne.n	1005ce0e <ll_cpe_process_rx_pdu+0x16e>
1005cd94:	2401      	movs	r4, #1
1005cd96:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005cd98:	4628      	mov	r0, r5
1005cd9a:	4621      	mov	r1, r4
1005cd9c:	f7ff f91b 	bl	1005bfd6 <LL_cpe_get_active_status>
1005cda0:	4607      	mov	r7, r0
1005cda2:	4628      	mov	r0, r5
1005cda4:	4621      	mov	r1, r4
1005cda6:	f000 f897 	bl	1005ced8 <ll_cpe_get_instant_supported>
1005cdaa:	4605      	mov	r5, r0
1005cdac:	4630      	mov	r0, r6
1005cdae:	f000 f89b 	bl	1005cee8 <LL_cpe_is_opcode_supporting_instant>
1005cdb2:	2801      	cmp	r0, #1
1005cdb4:	d04a      	beq.n	1005ce4c <ll_cpe_process_rx_pdu+0x1ac>
1005cdb6:	4622      	mov	r2, r4
1005cdb8:	e049      	b.n	1005ce4e <ll_cpe_process_rx_pdu+0x1ae>
1005cdba:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005cdbc:	4621      	mov	r1, r4
1005cdbe:	f7ff f949 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005cdc2:	4605      	mov	r5, r0
1005cdc4:	2604      	movs	r6, #4
1005cdc6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005cdc8:	7878      	ldrb	r0, [r7, #1]
1005cdca:	2110      	movs	r1, #16
1005cdcc:	1c80      	adds	r0, r0, #2
1005cdce:	b2c0      	uxtb	r0, r0
1005cdd0:	9100      	str	r1, [sp, #0]
1005cdd2:	9001      	str	r0, [sp, #4]
1005cdd4:	9702      	str	r7, [sp, #8]
1005cdd6:	2401      	movs	r4, #1
1005cdd8:	2000      	movs	r0, #0
1005cdda:	4621      	mov	r1, r4
1005cddc:	4622      	mov	r2, r4
1005cdde:	4603      	mov	r3, r0
1005cde0:	f7f8 fb79 	bl	100554d6 <log_notify_stu_ucfg_weak>
1005cde4:	4628      	mov	r0, r5
1005cde6:	f000 f88f 	bl	1005cf08 <LL_cpe_get_cpf>
1005cdea:	2800      	cmp	r0, #0
1005cdec:	d00c      	beq.n	1005ce08 <ll_cpe_process_rx_pdu+0x168>
1005cdee:	4605      	mov	r5, r0
1005cdf0:	4632      	mov	r2, r6
1005cdf2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005cdf4:	4630      	mov	r0, r6
1005cdf6:	463b      	mov	r3, r7
1005cdf8:	9f08      	ldr	r7, [sp, #32]
1005cdfa:	4639      	mov	r1, r7
1005cdfc:	47a8      	blx	r5
1005cdfe:	4602      	mov	r2, r0
1005ce00:	4630      	mov	r0, r6
1005ce02:	4639      	mov	r1, r7
1005ce04:	f000 f88d 	bl	1005cf22 <ll_cpe_set_expected_opcode>
1005ce08:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005ce0a:	f7fd fc6b 	bl	1005a6e4 <llc_conn_clr_rx_ctrl_pdu_full>
1005ce0e:	4620      	mov	r0, r4
1005ce10:	b00f      	add	sp, #60	@ 0x3c
1005ce12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005ce14:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005ce16:	9d08      	ldr	r5, [sp, #32]
1005ce18:	4629      	mov	r1, r5
1005ce1a:	f7ff f91b 	bl	1005c054 <ll_cpe_get_cpid_from_sm>
1005ce1e:	900c      	str	r0, [sp, #48]	@ 0x30
1005ce20:	2f00      	cmp	r7, #0
1005ce22:	d009      	beq.n	1005ce38 <ll_cpe_process_rx_pdu+0x198>
1005ce24:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005ce26:	4631      	mov	r1, r6
1005ce28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005ce2a:	462b      	mov	r3, r5
1005ce2c:	f7ff fd7a 	bl	1005c924 <LL_cpe_rxctrlpdu_checkreject>
1005ce30:	4604      	mov	r4, r0
1005ce32:	2801      	cmp	r0, #1
1005ce34:	d004      	beq.n	1005ce40 <ll_cpe_process_rx_pdu+0x1a0>
1005ce36:	e7ea      	b.n	1005ce0e <ll_cpe_process_rx_pdu+0x16e>
1005ce38:	9803      	ldr	r0, [sp, #12]
1005ce3a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005ce3c:	4288      	cmp	r0, r1
1005ce3e:	d113      	bne.n	1005ce68 <ll_cpe_process_rx_pdu+0x1c8>
1005ce40:	2603      	movs	r6, #3
1005ce42:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005ce44:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005ce46:	e7bf      	b.n	1005cdc8 <ll_cpe_process_rx_pdu+0x128>
1005ce48:	2400      	movs	r4, #0
1005ce4a:	e7e0      	b.n	1005ce0e <ll_cpe_process_rx_pdu+0x16e>
1005ce4c:	2202      	movs	r2, #2
1005ce4e:	4067      	eors	r7, r4
1005ce50:	4065      	eors	r5, r4
1005ce52:	433d      	orrs	r5, r7
1005ce54:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005ce56:	d000      	beq.n	1005ce5a <ll_cpe_process_rx_pdu+0x1ba>
1005ce58:	4622      	mov	r2, r4
1005ce5a:	2e2a      	cmp	r6, #42	@ 0x2a
1005ce5c:	d80e      	bhi.n	1005ce7c <ll_cpe_process_rx_pdu+0x1dc>
1005ce5e:	2003      	movs	r0, #3
1005ce60:	4370      	muls	r0, r6
1005ce62:	4909      	ldr	r1, [pc, #36]	@ (1005ce88 <__arm_cp.58_1>)
1005ce64:	5c0d      	ldrb	r5, [r1, r0]
1005ce66:	e00a      	b.n	1005ce7e <ll_cpe_process_rx_pdu+0x1de>
1005ce68:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005ce6a:	f7fd fd16 	bl	1005a89a <llc_conn_get_rx_acl_blocked>
1005ce6e:	2801      	cmp	r0, #1
1005ce70:	d1cd      	bne.n	1005ce0e <ll_cpe_process_rx_pdu+0x16e>
1005ce72:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005ce74:	2801      	cmp	r0, #1
1005ce76:	d1ca      	bne.n	1005ce0e <ll_cpe_process_rx_pdu+0x16e>
1005ce78:	2501      	movs	r5, #1
1005ce7a:	e77b      	b.n	1005cd74 <ll_cpe_process_rx_pdu+0xd4>
1005ce7c:	2516      	movs	r5, #22
1005ce7e:	4616      	mov	r6, r2
1005ce80:	e7a2      	b.n	1005cdc8 <ll_cpe_process_rx_pdu+0x128>
1005ce82:	46c0      	nop			@ (mov r8, r8)

1005ce84 <__arm_cp.58_0>:
1005ce84:	00000441 	.word	0x00000441

1005ce88 <__arm_cp.58_1>:
1005ce88:	10069ba0 	.word	0x10069ba0

1005ce8c <ll_cpe_get_instant_active>:
1005ce8c:	b580      	push	{r7, lr}
1005ce8e:	f7ff f8a9 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005ce92:	7800      	ldrb	r0, [r0, #0]
1005ce94:	0640      	lsls	r0, r0, #25
1005ce96:	0fc0      	lsrs	r0, r0, #31
1005ce98:	bd80      	pop	{r7, pc}

1005ce9a <ll_cpe_clr_rx_pdu_discarded_by_one_sm>:
1005ce9a:	b580      	push	{r7, lr}
1005ce9c:	f7ff f88e 	bl	1005bfbc <LL_cpe_get_ctrl_flds_common_p>
1005cea0:	8801      	ldrh	r1, [r0, #0]
1005cea2:	2204      	movs	r2, #4
1005cea4:	4391      	bics	r1, r2
1005cea6:	8001      	strh	r1, [r0, #0]
1005cea8:	bd80      	pop	{r7, pc}

1005ceaa <ll_cpe_check_instant_blocked>:
1005ceaa:	b5b0      	push	{r4, r5, r7, lr}
1005ceac:	460c      	mov	r4, r1
1005ceae:	4605      	mov	r5, r0
1005ceb0:	2aff      	cmp	r2, #255	@ 0xff
1005ceb2:	d003      	beq.n	1005cebc <ll_cpe_check_instant_blocked+0x12>
1005ceb4:	4610      	mov	r0, r2
1005ceb6:	f000 f817 	bl	1005cee8 <LL_cpe_is_opcode_supporting_instant>
1005ceba:	e003      	b.n	1005cec4 <ll_cpe_check_instant_blocked+0x1a>
1005cebc:	4628      	mov	r0, r5
1005cebe:	4621      	mov	r1, r4
1005cec0:	f000 f80a 	bl	1005ced8 <ll_cpe_get_instant_supported>
1005cec4:	2800      	cmp	r0, #0
1005cec6:	d005      	beq.n	1005ced4 <ll_cpe_check_instant_blocked+0x2a>
1005cec8:	2202      	movs	r2, #2
1005ceca:	4628      	mov	r0, r5
1005cecc:	4621      	mov	r1, r4
1005cece:	f7ff fd00 	bl	1005c8d2 <ll_cpe_get_blocked_status>
1005ced2:	bdb0      	pop	{r4, r5, r7, pc}
1005ced4:	2000      	movs	r0, #0
1005ced6:	bdb0      	pop	{r4, r5, r7, pc}

1005ced8 <ll_cpe_get_instant_supported>:
1005ced8:	b580      	push	{r7, lr}
1005ceda:	f7ff f883 	bl	1005bfe4 <ll_cpe_get_ctrl_flds_per_sm_p>
1005cede:	7800      	ldrb	r0, [r0, #0]
1005cee0:	0680      	lsls	r0, r0, #26
1005cee2:	0fc0      	lsrs	r0, r0, #31
1005cee4:	bd80      	pop	{r7, pc}
	...

1005cee8 <LL_cpe_is_opcode_supporting_instant>:
1005cee8:	b510      	push	{r4, lr}
1005ceea:	4601      	mov	r1, r0
1005ceec:	2000      	movs	r0, #0
1005ceee:	a205      	add	r2, pc, #20	@ (adr r2, 1005cf04 <LL_cpe_is_opcode_supporting_instant+0x1c>)
1005cef0:	4603      	mov	r3, r0
1005cef2:	2b04      	cmp	r3, #4
1005cef4:	d004      	beq.n	1005cf00 <LL_cpe_is_opcode_supporting_instant+0x18>
1005cef6:	5cd4      	ldrb	r4, [r2, r3]
1005cef8:	1c5b      	adds	r3, r3, #1
1005cefa:	428c      	cmp	r4, r1
1005cefc:	d1f9      	bne.n	1005cef2 <LL_cpe_is_opcode_supporting_instant+0xa>
1005cefe:	2001      	movs	r0, #1
1005cf00:	bd10      	pop	{r4, pc}
1005cf02:	46c0      	nop			@ (mov r8, r8)
1005cf04:	1f160001 	.word	0x1f160001

1005cf08 <LL_cpe_get_cpf>:
1005cf08:	b510      	push	{r4, lr}
1005cf0a:	4601      	mov	r1, r0
1005cf0c:	3914      	subs	r1, #20
1005cf0e:	2903      	cmp	r1, #3
1005cf10:	d201      	bcs.n	1005cf16 <LL_cpe_get_cpf+0xe>
1005cf12:	2000      	movs	r0, #0
1005cf14:	bd10      	pop	{r4, pc}
1005cf16:	0084      	lsls	r4, r0, #2
1005cf18:	f7fd f9fe 	bl	1005a318 <llc_conn_get_cntxt_p>
1005cf1c:	6880      	ldr	r0, [r0, #8]
1005cf1e:	5900      	ldr	r0, [r0, r4]
1005cf20:	bd10      	pop	{r4, pc}

1005cf22 <ll_cpe_set_expected_opcode>:
1005cf22:	b5b0      	push	{r4, r5, r7, lr}
1005cf24:	4614      	mov	r4, r2
1005cf26:	460d      	mov	r5, r1
1005cf28:	f7fd fa00 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005cf2c:	1940      	adds	r0, r0, r5
1005cf2e:	21ae      	movs	r1, #174	@ 0xae
1005cf30:	5444      	strb	r4, [r0, r1]
1005cf32:	bdb0      	pop	{r4, r5, r7, pc}

1005cf34 <LL_channel_map_update_param_check>:
1005cf34:	b5b0      	push	{r4, r5, r7, lr}
1005cf36:	4601      	mov	r1, r0
1005cf38:	7900      	ldrb	r0, [r0, #4]
1005cf3a:	281f      	cmp	r0, #31
1005cf3c:	d811      	bhi.n	1005cf62 <LL_channel_map_update_param_check+0x2e>
1005cf3e:	2000      	movs	r0, #0
1005cf40:	4602      	mov	r2, r0
1005cf42:	4603      	mov	r3, r0
1005cf44:	2a25      	cmp	r2, #37	@ 0x25
1005cf46:	d00f      	beq.n	1005cf68 <LL_channel_map_update_param_check+0x34>
1005cf48:	2407      	movs	r4, #7
1005cf4a:	4014      	ands	r4, r2
1005cf4c:	08d5      	lsrs	r5, r2, #3
1005cf4e:	5d4d      	ldrb	r5, [r1, r5]
1005cf50:	40e5      	lsrs	r5, r4
1005cf52:	07ec      	lsls	r4, r5, #31
1005cf54:	d003      	beq.n	1005cf5e <LL_channel_map_update_param_check+0x2a>
1005cf56:	1c5b      	adds	r3, r3, #1
1005cf58:	b2dc      	uxtb	r4, r3
1005cf5a:	2c02      	cmp	r4, #2
1005cf5c:	d003      	beq.n	1005cf66 <LL_channel_map_update_param_check+0x32>
1005cf5e:	1c52      	adds	r2, r2, #1
1005cf60:	e7f0      	b.n	1005cf44 <LL_channel_map_update_param_check+0x10>
1005cf62:	2000      	movs	r0, #0
1005cf64:	bdb0      	pop	{r4, r5, r7, pc}
1005cf66:	2001      	movs	r0, #1
1005cf68:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005cf6c <LLC_channel_map_copy_to_cpf_context_ucfg_weak>:
1005cf6c:	b580      	push	{r7, lr}
1005cf6e:	4904      	ldr	r1, [pc, #16]	@ (1005cf80 <__arm_cp.1_0>)
1005cf70:	6809      	ldr	r1, [r1, #0]
1005cf72:	229c      	movs	r2, #156	@ 0x9c
1005cf74:	5889      	ldr	r1, [r1, r2]
1005cf76:	3148      	adds	r1, #72	@ 0x48
1005cf78:	2205      	movs	r2, #5
1005cf7a:	f7f5 fd65 	bl	10052a48 <BLEPLAT_MemCpy>
1005cf7e:	bd80      	pop	{r7, pc}

1005cf80 <__arm_cp.1_0>:
1005cf80:	20002468 	.word	0x20002468

1005cf84 <LL_channel_map_update>:
1005cf84:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cf86:	b085      	sub	sp, #20
1005cf88:	461e      	mov	r6, r3
1005cf8a:	4617      	mov	r7, r2
1005cf8c:	4605      	mov	r5, r0
1005cf8e:	9103      	str	r1, [sp, #12]
1005cf90:	f7ff f885 	bl	1005c09e <LL_cpe_get_cntxt>
1005cf94:	4604      	mov	r4, r0
1005cf96:	4628      	mov	r0, r5
1005cf98:	f7fd f9c8 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005cf9c:	4602      	mov	r2, r0
1005cf9e:	1e78      	subs	r0, r7, #1
1005cfa0:	2806      	cmp	r0, #6
1005cfa2:	d86c      	bhi.n	1005d07e <LL_channel_map_update+0xfa>
1005cfa4:	4478      	add	r0, pc
1005cfa6:	7900      	ldrb	r0, [r0, #4]
1005cfa8:	0040      	lsls	r0, r0, #1
1005cfaa:	4487      	add	pc, r0
1005cfac:	30680303 	.word	0x30680303
1005cfb0:	005a3568 	.word	0x005a3568
1005cfb4:	202c      	movs	r0, #44	@ 0x2c
1005cfb6:	5c10      	ldrb	r0, [r2, r0]
1005cfb8:	2803      	cmp	r0, #3
1005cfba:	d160      	bne.n	1005d07e <LL_channel_map_update+0xfa>
1005cfbc:	9202      	str	r2, [sp, #8]
1005cfbe:	1cf0      	adds	r0, r6, #3
1005cfc0:	4607      	mov	r7, r0
1005cfc2:	f7ff ffb7 	bl	1005cf34 <LL_channel_map_update_param_check>
1005cfc6:	2801      	cmp	r0, #1
1005cfc8:	d151      	bne.n	1005d06e <LL_channel_map_update+0xea>
1005cfca:	7a30      	ldrb	r0, [r6, #8]
1005cfcc:	9001      	str	r0, [sp, #4]
1005cfce:	7a76      	ldrb	r6, [r6, #9]
1005cfd0:	2205      	movs	r2, #5
1005cfd2:	4638      	mov	r0, r7
1005cfd4:	4621      	mov	r1, r4
1005cfd6:	f005 ff55 	bl	10062e84 <char_copy>
1005cfda:	0230      	lsls	r0, r6, #8
1005cfdc:	9901      	ldr	r1, [sp, #4]
1005cfde:	1840      	adds	r0, r0, r1
1005cfe0:	b282      	uxth	r2, r0
1005cfe2:	9802      	ldr	r0, [sp, #8]
1005cfe4:	4621      	mov	r1, r4
1005cfe6:	f7fd feb5 	bl	1005ad54 <llc_conn_set_chmap_params>
1005cfea:	2600      	movs	r6, #0
1005cfec:	2702      	movs	r7, #2
1005cfee:	4628      	mov	r0, r5
1005cff0:	4631      	mov	r1, r6
1005cff2:	463a      	mov	r2, r7
1005cff4:	f7ff f836 	bl	1005c064 <LL_cpe_set_blocked>
1005cff8:	2301      	movs	r3, #1
1005cffa:	4628      	mov	r0, r5
1005cffc:	4631      	mov	r1, r6
1005cffe:	463a      	mov	r2, r7
1005d000:	f7fe fff7 	bl	1005bff2 <LL_cpe_set_active>
1005d004:	4628      	mov	r0, r5
1005d006:	9903      	ldr	r1, [sp, #12]
1005d008:	f7ff f861 	bl	1005c0ce <LL_cpe_set_rx_with_instant>
1005d00c:	e037      	b.n	1005d07e <LL_channel_map_update+0xfa>
1005d00e:	78b0      	ldrb	r0, [r6, #2]
1005d010:	2801      	cmp	r0, #1
1005d012:	d030      	beq.n	1005d076 <LL_channel_map_update+0xf2>
1005d014:	212a      	movs	r1, #42	@ 0x2a
1005d016:	e02f      	b.n	1005d078 <LL_channel_map_update+0xf4>
1005d018:	4628      	mov	r0, r5
1005d01a:	9202      	str	r2, [sp, #8]
1005d01c:	f7ff fe08 	bl	1005cc30 <llc_cpe_calc_instant>
1005d020:	af04      	add	r7, sp, #16
1005d022:	8038      	strh	r0, [r7, #0]
1005d024:	4620      	mov	r0, r4
1005d026:	4629      	mov	r1, r5
1005d028:	f7ff ffa0 	bl	1005cf6c <LLC_channel_map_copy_to_cpf_context_ucfg_weak>
1005d02c:	2001      	movs	r0, #1
1005d02e:	70b0      	strb	r0, [r6, #2]
1005d030:	2008      	movs	r0, #8
1005d032:	7070      	strb	r0, [r6, #1]
1005d034:	2003      	movs	r0, #3
1005d036:	7030      	strb	r0, [r6, #0]
1005d038:	1cf1      	adds	r1, r6, #3
1005d03a:	2205      	movs	r2, #5
1005d03c:	4620      	mov	r0, r4
1005d03e:	f005 ff21 	bl	10062e84 <char_copy>
1005d042:	3608      	adds	r6, #8
1005d044:	2202      	movs	r2, #2
1005d046:	4638      	mov	r0, r7
1005d048:	4631      	mov	r1, r6
1005d04a:	f005 ff1b 	bl	10062e84 <char_copy>
1005d04e:	883a      	ldrh	r2, [r7, #0]
1005d050:	9802      	ldr	r0, [sp, #8]
1005d052:	4621      	mov	r1, r4
1005d054:	f7fd fe7e 	bl	1005ad54 <llc_conn_set_chmap_params>
1005d058:	4628      	mov	r0, r5
1005d05a:	9903      	ldr	r1, [sp, #12]
1005d05c:	f7ff f828 	bl	1005c0b0 <LL_cpe_set_tx_with_instant>
1005d060:	e00d      	b.n	1005d07e <LL_channel_map_update+0xfa>
1005d062:	2202      	movs	r2, #2
1005d064:	4628      	mov	r0, r5
1005d066:	9903      	ldr	r1, [sp, #12]
1005d068:	f7fe ffda 	bl	1005c020 <LL_cpe_clr_active>
1005d06c:	e007      	b.n	1005d07e <LL_channel_map_update+0xfa>
1005d06e:	4628      	mov	r0, r5
1005d070:	f7fe ff8c 	bl	1005bf8c <ll_cpe_set_unknown_rsp_pending>
1005d074:	e003      	b.n	1005d07e <LL_channel_map_update+0xfa>
1005d076:	2123      	movs	r1, #35	@ 0x23
1005d078:	4610      	mov	r0, r2
1005d07a:	f7fe f83b 	bl	1005b0f4 <llc_conn_disconnect_link_from_cpf>
1005d07e:	20ff      	movs	r0, #255	@ 0xff
1005d080:	b005      	add	sp, #20
1005d082:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005d084 <LLC_channel_map_update_offline_processing_ucfg_weak>:
1005d084:	2000      	movs	r0, #0
1005d086:	4770      	bx	lr

1005d088 <LLC_conn_init_chc_ctxt_ucfg_weak>:
1005d088:	4770      	bx	lr

1005d08a <LLC_chc_ll_cntxt_init_ucfg_weak>:
1005d08a:	4770      	bx	lr

1005d08c <LLC_chc_reporting_offline_processing_ucfg_weak>:
1005d08c:	2000      	movs	r0, #0
1005d08e:	4770      	bx	lr

1005d090 <LL_cpf_cis_processing_ucfg_weak>:
1005d090:	4770      	bx	lr
	...

1005d094 <LL_cpf_conn_upd>:
1005d094:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d096:	b091      	sub	sp, #68	@ 0x44
1005d098:	461e      	mov	r6, r3
1005d09a:	4614      	mov	r4, r2
1005d09c:	4605      	mov	r5, r0
1005d09e:	910c      	str	r1, [sp, #48]	@ 0x30
1005d0a0:	f7fe fffd 	bl	1005c09e <LL_cpe_get_cntxt>
1005d0a4:	4607      	mov	r7, r0
1005d0a6:	4628      	mov	r0, r5
1005d0a8:	f7fd f940 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005d0ac:	4603      	mov	r3, r0
1005d0ae:	1e60      	subs	r0, r4, #1
1005d0b0:	2807      	cmp	r0, #7
1005d0b2:	d900      	bls.n	1005d0b6 <LL_cpf_conn_upd+0x22>
1005d0b4:	e0ce      	b.n	1005d254 <LL_cpf_conn_upd+0x1c0>
1005d0b6:	46c0      	nop			@ (mov r8, r8)
1005d0b8:	4478      	add	r0, pc
1005d0ba:	7900      	ldrb	r0, [r0, #4]
1005d0bc:	0040      	lsls	r0, r0, #1
1005d0be:	4487      	add	pc, r0
1005d0c0:	22c90303 	.word	0x22c90303
1005d0c4:	c47c2fc9 	.word	0xc47c2fc9
1005d0c8:	4618      	mov	r0, r3
1005d0ca:	302c      	adds	r0, #44	@ 0x2c
1005d0cc:	7800      	ldrb	r0, [r0, #0]
1005d0ce:	2803      	cmp	r0, #3
1005d0d0:	d000      	beq.n	1005d0d4 <LL_cpf_conn_upd+0x40>
1005d0d2:	e0bf      	b.n	1005d254 <LL_cpf_conn_upd+0x1c0>
1005d0d4:	2091      	movs	r0, #145	@ 0x91
1005d0d6:	0040      	lsls	r0, r0, #1
1005d0d8:	930b      	str	r3, [sp, #44]	@ 0x2c
1005d0da:	1819      	adds	r1, r3, r0
1005d0dc:	8973      	ldrh	r3, [r6, #10]
1005d0de:	8932      	ldrh	r2, [r6, #8]
1005d0e0:	88f0      	ldrh	r0, [r6, #6]
1005d0e2:	880c      	ldrh	r4, [r1, #0]
1005d0e4:	2100      	movs	r1, #0
1005d0e6:	9100      	str	r1, [sp, #0]
1005d0e8:	9101      	str	r1, [sp, #4]
1005d0ea:	9402      	str	r4, [sp, #8]
1005d0ec:	900a      	str	r0, [sp, #40]	@ 0x28
1005d0ee:	4601      	mov	r1, r0
1005d0f0:	9209      	str	r2, [sp, #36]	@ 0x24
1005d0f2:	461c      	mov	r4, r3
1005d0f4:	f000 f906 	bl	1005d304 <llc_conn_upd_params_check>
1005d0f8:	2800      	cmp	r0, #0
1005d0fa:	d100      	bne.n	1005d0fe <LL_cpf_conn_upd+0x6a>
1005d0fc:	e0ad      	b.n	1005d25a <LL_cpf_conn_upd+0x1c6>
1005d0fe:	4628      	mov	r0, r5
1005d100:	f7fe ff44 	bl	1005bf8c <ll_cpe_set_unknown_rsp_pending>
1005d104:	e0a6      	b.n	1005d254 <LL_cpf_conn_upd+0x1c0>
1005d106:	78b0      	ldrb	r0, [r6, #2]
1005d108:	2123      	movs	r1, #35	@ 0x23
1005d10a:	280f      	cmp	r0, #15
1005d10c:	460a      	mov	r2, r1
1005d10e:	d000      	beq.n	1005d112 <LL_cpf_conn_upd+0x7e>
1005d110:	222a      	movs	r2, #42	@ 0x2a
1005d112:	2800      	cmp	r0, #0
1005d114:	d000      	beq.n	1005d118 <LL_cpf_conn_upd+0x84>
1005d116:	4611      	mov	r1, r2
1005d118:	4618      	mov	r0, r3
1005d11a:	f7fd ffeb 	bl	1005b0f4 <llc_conn_disconnect_link_from_cpf>
1005d11e:	e099      	b.n	1005d254 <LL_cpf_conn_upd+0x1c0>
1005d120:	930b      	str	r3, [sp, #44]	@ 0x2c
1005d122:	1cb0      	adds	r0, r6, #2
1005d124:	9008      	str	r0, [sp, #32]
1005d126:	f7fd f8f7 	bl	1005a318 <llc_conn_get_cntxt_p>
1005d12a:	9009      	str	r0, [sp, #36]	@ 0x24
1005d12c:	4628      	mov	r0, r5
1005d12e:	f7ff fd7f 	bl	1005cc30 <llc_cpe_calc_instant>
1005d132:	4604      	mov	r4, r0
1005d134:	2028      	movs	r0, #40	@ 0x28
1005d136:	2101      	movs	r1, #1
1005d138:	9107      	str	r1, [sp, #28]
1005d13a:	5439      	strb	r1, [r7, r0]
1005d13c:	8b38      	ldrh	r0, [r7, #24]
1005d13e:	8b79      	ldrh	r1, [r7, #26]
1005d140:	1808      	adds	r0, r1, r0
1005d142:	0840      	lsrs	r0, r0, #1
1005d144:	9010      	str	r0, [sp, #64]	@ 0x40
1005d146:	8bb8      	ldrh	r0, [r7, #28]
1005d148:	9006      	str	r0, [sp, #24]
1005d14a:	8bf8      	ldrh	r0, [r7, #30]
1005d14c:	9005      	str	r0, [sp, #20]
1005d14e:	a80d      	add	r0, sp, #52	@ 0x34
1005d150:	7105      	strb	r5, [r0, #4]
1005d152:	a910      	add	r1, sp, #64	@ 0x40
1005d154:	910f      	str	r1, [sp, #60]	@ 0x3c
1005d156:	970d      	str	r7, [sp, #52]	@ 0x34
1005d158:	f7f2 f814 	bl	1004f184 <LL_conn_upd_max_tx_time_coded_ucfg>
1005d15c:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005d15e:	8338      	strh	r0, [r7, #24]
1005d160:	940a      	str	r4, [sp, #40]	@ 0x28
1005d162:	0421      	lsls	r1, r4, #16
1005d164:	9a05      	ldr	r2, [sp, #20]
1005d166:	1889      	adds	r1, r1, r2
1005d168:	9104      	str	r1, [sp, #16]
1005d16a:	9c06      	ldr	r4, [sp, #24]
1005d16c:	0423      	lsls	r3, r4, #16
1005d16e:	4303      	orrs	r3, r0
1005d170:	9808      	ldr	r0, [sp, #32]
1005d172:	4962      	ldr	r1, [pc, #392]	@ (1005d2fc <__arm_cp.0_2>)
1005d174:	c00a      	stmia	r0!, {r1, r3}
1005d176:	9904      	ldr	r1, [sp, #16]
1005d178:	6001      	str	r1, [r0, #0]
1005d17a:	4861      	ldr	r0, [pc, #388]	@ (1005d300 <__arm_cp.0_3>)
1005d17c:	8030      	strh	r0, [r6, #0]
1005d17e:	2003      	movs	r0, #3
1005d180:	0240      	lsls	r0, r0, #9
1005d182:	0311      	lsls	r1, r2, #12
1005d184:	60fc      	str	r4, [r7, #12]
1005d186:	6139      	str	r1, [r7, #16]
1005d188:	9907      	ldr	r1, [sp, #28]
1005d18a:	0249      	lsls	r1, r1, #9
1005d18c:	c703      	stmia	r7!, {r0, r1}
1005d18e:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d190:	6800      	ldr	r0, [r0, #0]
1005d192:	8b79      	ldrh	r1, [r7, #26]
1005d194:	0209      	lsls	r1, r1, #8
1005d196:	3f08      	subs	r7, #8
1005d198:	4288      	cmp	r0, r1
1005d19a:	d300      	bcc.n	1005d19e <LL_cpf_conn_upd+0x10a>
1005d19c:	4608      	mov	r0, r1
1005d19e:	6178      	str	r0, [r7, #20]
1005d1a0:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005d1a2:	0240      	lsls	r0, r0, #9
1005d1a4:	60b8      	str	r0, [r7, #8]
1005d1a6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d1a8:	4639      	mov	r1, r7
1005d1aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005d1ac:	f7fd fddb 	bl	1005ad66 <llc_conn_set_conn_update_params>
1005d1b0:	4628      	mov	r0, r5
1005d1b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005d1b4:	f7fe ff7c 	bl	1005c0b0 <LL_cpe_set_tx_with_instant>
1005d1b8:	e04c      	b.n	1005d254 <LL_cpf_conn_upd+0x1c0>
1005d1ba:	2028      	movs	r0, #40	@ 0x28
1005d1bc:	5c38      	ldrb	r0, [r7, r0]
1005d1be:	2801      	cmp	r0, #1
1005d1c0:	d143      	bne.n	1005d24a <LL_cpf_conn_upd+0x1b6>
1005d1c2:	461c      	mov	r4, r3
1005d1c4:	a80d      	add	r0, sp, #52	@ 0x34
1005d1c6:	7105      	strb	r5, [r0, #4]
1005d1c8:	970d      	str	r7, [sp, #52]	@ 0x34
1005d1ca:	f7f1 ffe7 	bl	1004f19c <LL_conn_upd_data_length_change_event_ucfg>
1005d1ce:	4849      	ldr	r0, [pc, #292]	@ (1005d2f4 <__arm_cp.0_0>)
1005d1d0:	6800      	ldr	r0, [r0, #0]
1005d1d2:	213d      	movs	r1, #61	@ 0x3d
1005d1d4:	5c41      	ldrb	r1, [r0, r1]
1005d1d6:	0689      	lsls	r1, r1, #26
1005d1d8:	d532      	bpl.n	1005d240 <LL_cpf_conn_upd+0x1ac>
1005d1da:	303d      	adds	r0, #61	@ 0x3d
1005d1dc:	7a40      	ldrb	r0, [r0, #9]
1005d1de:	0740      	lsls	r0, r0, #29
1005d1e0:	d52e      	bpl.n	1005d240 <LL_cpf_conn_upd+0x1ac>
1005d1e2:	8bf8      	ldrh	r0, [r7, #30]
1005d1e4:	900a      	str	r0, [sp, #40]	@ 0x28
1005d1e6:	8bb8      	ldrh	r0, [r7, #28]
1005d1e8:	9009      	str	r0, [sp, #36]	@ 0x24
1005d1ea:	8b3f      	ldrh	r7, [r7, #24]
1005d1ec:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
1005d1ee:	4842      	ldr	r0, [pc, #264]	@ (1005d2f8 <__arm_cp.0_1>)
1005d1f0:	6800      	ldr	r0, [r0, #0]
1005d1f2:	6900      	ldr	r0, [r0, #16]
1005d1f4:	2180      	movs	r1, #128	@ 0x80
1005d1f6:	2224      	movs	r2, #36	@ 0x24
1005d1f8:	2604      	movs	r6, #4
1005d1fa:	4633      	mov	r3, r6
1005d1fc:	f7f8 f970 	bl	100554e0 <aci_event_fifo_push_header>
1005d200:	2800      	cmp	r0, #0
1005d202:	d01d      	beq.n	1005d240 <LL_cpf_conn_upd+0x1ac>
1005d204:	4601      	mov	r1, r0
1005d206:	300b      	adds	r0, #11
1005d208:	724c      	strb	r4, [r1, #9]
1005d20a:	7007      	strb	r7, [r0, #0]
1005d20c:	970b      	str	r7, [sp, #44]	@ 0x2c
1005d20e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005d210:	734f      	strb	r7, [r1, #13]
1005d212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005d214:	7103      	strb	r3, [r0, #4]
1005d216:	2200      	movs	r2, #0
1005d218:	720a      	strb	r2, [r1, #8]
1005d21a:	2203      	movs	r2, #3
1005d21c:	71ca      	strb	r2, [r1, #7]
1005d21e:	220a      	movs	r2, #10
1005d220:	718a      	strb	r2, [r1, #6]
1005d222:	223e      	movs	r2, #62	@ 0x3e
1005d224:	714a      	strb	r2, [r1, #5]
1005d226:	710e      	strb	r6, [r1, #4]
1005d228:	0a22      	lsrs	r2, r4, #8
1005d22a:	728a      	strb	r2, [r1, #10]
1005d22c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005d22e:	0a12      	lsrs	r2, r2, #8
1005d230:	7042      	strb	r2, [r0, #1]
1005d232:	0a3a      	lsrs	r2, r7, #8
1005d234:	738a      	strb	r2, [r1, #14]
1005d236:	0a1a      	lsrs	r2, r3, #8
1005d238:	7142      	strb	r2, [r0, #5]
1005d23a:	2080      	movs	r0, #128	@ 0x80
1005d23c:	f7f8 f9ed 	bl	1005561a <aci_event_fifo_push>
1005d240:	2100      	movs	r1, #0
1005d242:	4628      	mov	r0, r5
1005d244:	460a      	mov	r2, r1
1005d246:	f000 fec0 	bl	1005dfca <LLC_update_le_ping_params>
1005d24a:	2200      	movs	r2, #0
1005d24c:	4628      	mov	r0, r5
1005d24e:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005d250:	f7fe fee6 	bl	1005c020 <LL_cpe_clr_active>
1005d254:	20ff      	movs	r0, #255	@ 0xff
1005d256:	b011      	add	sp, #68	@ 0x44
1005d258:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d25a:	78f0      	ldrb	r0, [r6, #3]
1005d25c:	2800      	cmp	r0, #0
1005d25e:	d100      	bne.n	1005d262 <LL_cpf_conn_upd+0x1ce>
1005d260:	e74d      	b.n	1005d0fe <LL_cpf_conn_upd+0x6a>
1005d262:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005d264:	1e49      	subs	r1, r1, #1
1005d266:	2908      	cmp	r1, #8
1005d268:	d300      	bcc.n	1005d26c <LL_cpf_conn_upd+0x1d8>
1005d26a:	2108      	movs	r1, #8
1005d26c:	4281      	cmp	r1, r0
1005d26e:	d200      	bcs.n	1005d272 <LL_cpf_conn_upd+0x1de>
1005d270:	e745      	b.n	1005d0fe <LL_cpf_conn_upd+0x6a>
1005d272:	88b2      	ldrh	r2, [r6, #4]
1005d274:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005d276:	428a      	cmp	r2, r1
1005d278:	d900      	bls.n	1005d27c <LL_cpf_conn_upd+0x1e8>
1005d27a:	e740      	b.n	1005d0fe <LL_cpf_conn_upd+0x6a>
1005d27c:	83fc      	strh	r4, [r7, #30]
1005d27e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d280:	83b9      	strh	r1, [r7, #28]
1005d282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005d284:	833b      	strh	r3, [r7, #24]
1005d286:	837b      	strh	r3, [r7, #26]
1005d288:	0324      	lsls	r4, r4, #12
1005d28a:	025b      	lsls	r3, r3, #9
1005d28c:	0252      	lsls	r2, r2, #9
1005d28e:	0240      	lsls	r0, r0, #9
1005d290:	c70d      	stmia	r7!, {r0, r2, r3}
1005d292:	6039      	str	r1, [r7, #0]
1005d294:	607c      	str	r4, [r7, #4]
1005d296:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005d298:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
1005d29a:	2001      	movs	r0, #1
1005d29c:	3f0c      	subs	r7, #12
1005d29e:	429a      	cmp	r2, r3
1005d2a0:	d107      	bne.n	1005d2b2 <LL_cpf_conn_upd+0x21e>
1005d2a2:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
1005d2a4:	4294      	cmp	r4, r2
1005d2a6:	d104      	bne.n	1005d2b2 <LL_cpf_conn_upd+0x21e>
1005d2a8:	8f08      	ldrh	r0, [r1, #56]	@ 0x38
1005d2aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d2ac:	1a08      	subs	r0, r1, r0
1005d2ae:	1e41      	subs	r1, r0, #1
1005d2b0:	4188      	sbcs	r0, r1
1005d2b2:	2128      	movs	r1, #40	@ 0x28
1005d2b4:	5478      	strb	r0, [r7, r1]
1005d2b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005d2b8:	9010      	str	r0, [sp, #64]	@ 0x40
1005d2ba:	a80d      	add	r0, sp, #52	@ 0x34
1005d2bc:	7105      	strb	r5, [r0, #4]
1005d2be:	a910      	add	r1, sp, #64	@ 0x40
1005d2c0:	910f      	str	r1, [sp, #60]	@ 0x3c
1005d2c2:	970d      	str	r7, [sp, #52]	@ 0x34
1005d2c4:	f7f1 ff5e 	bl	1004f184 <LL_conn_upd_max_tx_time_coded_ucfg>
1005d2c8:	2202      	movs	r2, #2
1005d2ca:	4628      	mov	r0, r5
1005d2cc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005d2ce:	4621      	mov	r1, r4
1005d2d0:	f7fe fec8 	bl	1005c064 <LL_cpe_set_blocked>
1005d2d4:	2200      	movs	r2, #0
1005d2d6:	2301      	movs	r3, #1
1005d2d8:	4628      	mov	r0, r5
1005d2da:	4621      	mov	r1, r4
1005d2dc:	f7fe fe89 	bl	1005bff2 <LL_cpe_set_active>
1005d2e0:	89b2      	ldrh	r2, [r6, #12]
1005d2e2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005d2e4:	4639      	mov	r1, r7
1005d2e6:	f7fd fd3e 	bl	1005ad66 <llc_conn_set_conn_update_params>
1005d2ea:	4628      	mov	r0, r5
1005d2ec:	4621      	mov	r1, r4
1005d2ee:	f7fe feee 	bl	1005c0ce <LL_cpe_set_rx_with_instant>
1005d2f2:	e7af      	b.n	1005d254 <LL_cpf_conn_upd+0x1c0>

1005d2f4 <__arm_cp.0_0>:
1005d2f4:	20002468 	.word	0x20002468

1005d2f8 <__arm_cp.0_1>:
1005d2f8:	20002418 	.word	0x20002418

1005d2fc <__arm_cp.0_2>:
1005d2fc:	00010300 	.word	0x00010300

1005d300 <__arm_cp.0_3>:
1005d300:	00000c03 	.word	0x00000c03

1005d304 <llc_conn_upd_params_check>:
1005d304:	b570      	push	{r4, r5, r6, lr}
1005d306:	4604      	mov	r4, r0
1005d308:	2012      	movs	r0, #18
1005d30a:	2c06      	cmp	r4, #6
1005d30c:	d31c      	bcc.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d30e:	2519      	movs	r5, #25
1005d310:	01ed      	lsls	r5, r5, #7
1005d312:	42ac      	cmp	r4, r5
1005d314:	d818      	bhi.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d316:	2906      	cmp	r1, #6
1005d318:	d316      	bcc.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d31a:	42a9      	cmp	r1, r5
1005d31c:	d814      	bhi.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d31e:	42a1      	cmp	r1, r4
1005d320:	d312      	bcc.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d322:	0894      	lsrs	r4, r2, #2
1005d324:	2c7c      	cmp	r4, #124	@ 0x7c
1005d326:	d80f      	bhi.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d328:	9c05      	ldr	r4, [sp, #20]
1005d32a:	9e04      	ldr	r6, [sp, #16]
1005d32c:	42b4      	cmp	r4, r6
1005d32e:	d30b      	bcc.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d330:	2b0a      	cmp	r3, #10
1005d332:	d309      	bcc.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d334:	42ab      	cmp	r3, r5
1005d336:	d807      	bhi.n	1005d348 <llc_conn_upd_params_check+0x44>
1005d338:	9806      	ldr	r0, [sp, #24]
1005d33a:	1c52      	adds	r2, r2, #1
1005d33c:	434a      	muls	r2, r1
1005d33e:	4342      	muls	r2, r0
1005d340:	0890      	lsrs	r0, r2, #2
1005d342:	4283      	cmp	r3, r0
1005d344:	d801      	bhi.n	1005d34a <llc_conn_upd_params_check+0x46>
1005d346:	2012      	movs	r0, #18
1005d348:	bd70      	pop	{r4, r5, r6, pc}
1005d34a:	2000      	movs	r0, #0
1005d34c:	bd70      	pop	{r4, r5, r6, pc}
	...

1005d350 <LL_conn_upd_max_tx_time_coded>:
1005d350:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d352:	4606      	mov	r6, r0
1005d354:	6887      	ldr	r7, [r0, #8]
1005d356:	7904      	ldrb	r4, [r0, #4]
1005d358:	4620      	mov	r0, r4
1005d35a:	f7fc ffe7 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005d35e:	4605      	mov	r5, r0
1005d360:	4620      	mov	r0, r4
1005d362:	f7fd f817 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005d366:	2800      	cmp	r0, #0
1005d368:	d044      	beq.n	1005d3f4 <LL_conn_upd_max_tx_time_coded+0xa4>
1005d36a:	7980      	ldrb	r0, [r0, #6]
1005d36c:	2804      	cmp	r0, #4
1005d36e:	d141      	bne.n	1005d3f4 <LL_conn_upd_max_tx_time_coded+0xa4>
1005d370:	0278      	lsls	r0, r7, #9
1005d372:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1005d374:	4281      	cmp	r1, r0
1005d376:	d03d      	beq.n	1005d3f4 <LL_conn_upd_max_tx_time_coded+0xa4>
1005d378:	4628      	mov	r0, r5
1005d37a:	302c      	adds	r0, #44	@ 0x2c
1005d37c:	9502      	str	r5, [sp, #8]
1005d37e:	35b6      	adds	r5, #182	@ 0xb6
1005d380:	6839      	ldr	r1, [r7, #0]
1005d382:	223d      	movs	r2, #61	@ 0x3d
1005d384:	0112      	lsls	r2, r2, #4
1005d386:	886b      	ldrh	r3, [r5, #2]
1005d388:	019b      	lsls	r3, r3, #6
1005d38a:	189a      	adds	r2, r3, r2
1005d38c:	88eb      	ldrh	r3, [r5, #6]
1005d38e:	429a      	cmp	r2, r3
1005d390:	d800      	bhi.n	1005d394 <LL_conn_upd_max_tx_time_coded+0x44>
1005d392:	4613      	mov	r3, r2
1005d394:	4a18      	ldr	r2, [pc, #96]	@ (1005d3f8 <__arm_cp.3_0>)
1005d396:	434a      	muls	r2, r1
1005d398:	4611      	mov	r1, r2
1005d39a:	6836      	ldr	r6, [r6, #0]
1005d39c:	7800      	ldrb	r0, [r0, #0]
1005d39e:	2802      	cmp	r0, #2
1005d3a0:	d10b      	bne.n	1005d3ba <LL_conn_upd_max_tx_time_coded+0x6a>
1005d3a2:	4816      	ldr	r0, [pc, #88]	@ (1005d3fc <__arm_cp.3_1>)
1005d3a4:	1818      	adds	r0, r3, r0
1005d3a6:	4281      	cmp	r1, r0
1005d3a8:	d207      	bcs.n	1005d3ba <LL_conn_upd_max_tx_time_coded+0x6a>
1005d3aa:	9101      	str	r1, [sp, #4]
1005d3ac:	4912      	ldr	r1, [pc, #72]	@ (1005d3f8 <__arm_cp.3_0>)
1005d3ae:	9300      	str	r3, [sp, #0]
1005d3b0:	f7e2 ff46 	bl	10040240 <__udivsi3>
1005d3b4:	9b00      	ldr	r3, [sp, #0]
1005d3b6:	9901      	ldr	r1, [sp, #4]
1005d3b8:	6038      	str	r0, [r7, #0]
1005d3ba:	8828      	ldrh	r0, [r5, #0]
1005d3bc:	84f0      	strh	r0, [r6, #38]	@ 0x26
1005d3be:	204b      	movs	r0, #75	@ 0x4b
1005d3c0:	0080      	lsls	r0, r0, #2
1005d3c2:	1818      	adds	r0, r3, r0
1005d3c4:	1a09      	subs	r1, r1, r0
1005d3c6:	d200      	bcs.n	1005d3ca <LL_conn_upd_max_tx_time_coded+0x7a>
1005d3c8:	2100      	movs	r1, #0
1005d3ca:	8968      	ldrh	r0, [r5, #10]
1005d3cc:	8a2a      	ldrh	r2, [r5, #16]
1005d3ce:	4290      	cmp	r0, r2
1005d3d0:	d300      	bcc.n	1005d3d4 <LL_conn_upd_max_tx_time_coded+0x84>
1005d3d2:	4610      	mov	r0, r2
1005d3d4:	4281      	cmp	r1, r0
1005d3d6:	9b02      	ldr	r3, [sp, #8]
1005d3d8:	d800      	bhi.n	1005d3dc <LL_conn_upd_max_tx_time_coded+0x8c>
1005d3da:	4608      	mov	r0, r1
1005d3dc:	b282      	uxth	r2, r0
1005d3de:	21a9      	movs	r1, #169	@ 0xa9
1005d3e0:	0109      	lsls	r1, r1, #4
1005d3e2:	428a      	cmp	r2, r1
1005d3e4:	d800      	bhi.n	1005d3e8 <LL_conn_upd_max_tx_time_coded+0x98>
1005d3e6:	4608      	mov	r0, r1
1005d3e8:	84b0      	strh	r0, [r6, #36]	@ 0x24
1005d3ea:	2101      	movs	r1, #1
1005d3ec:	4620      	mov	r0, r4
1005d3ee:	4632      	mov	r2, r6
1005d3f0:	f000 f806 	bl	1005d400 <LL_adjust_max_tx_data_frag_coded>
1005d3f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d3f6:	46c0      	nop			@ (mov r8, r8)

1005d3f8 <__arm_cp.3_0>:
1005d3f8:	000004e2 	.word	0x000004e2

1005d3fc <__arm_cp.3_1>:
1005d3fc:	00000bbc 	.word	0x00000bbc

1005d400 <LL_adjust_max_tx_data_frag_coded>:
1005d400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d402:	461c      	mov	r4, r3
1005d404:	4615      	mov	r5, r2
1005d406:	460e      	mov	r6, r1
1005d408:	461f      	mov	r7, r3
1005d40a:	37b4      	adds	r7, #180	@ 0xb4
1005d40c:	f7fc ffc2 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005d410:	2800      	cmp	r0, #0
1005d412:	d002      	beq.n	1005d41a <LL_adjust_max_tx_data_frag_coded+0x1a>
1005d414:	8800      	ldrh	r0, [r0, #0]
1005d416:	2802      	cmp	r0, #2
1005d418:	d001      	beq.n	1005d41e <LL_adjust_max_tx_data_frag_coded+0x1e>
1005d41a:	2001      	movs	r0, #1
1005d41c:	e000      	b.n	1005d420 <LL_adjust_max_tx_data_frag_coded+0x20>
1005d41e:	2003      	movs	r0, #3
1005d420:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
1005d422:	4a0b      	ldr	r2, [pc, #44]	@ (1005d450 <__arm_cp.4_0>)
1005d424:	1889      	adds	r1, r1, r2
1005d426:	40c1      	lsrs	r1, r0
1005d428:	480a      	ldr	r0, [pc, #40]	@ (1005d454 <__arm_cp.4_1>)
1005d42a:	1808      	adds	r0, r1, r0
1005d42c:	08c0      	lsrs	r0, r0, #3
1005d42e:	b281      	uxth	r1, r0
1005d430:	8838      	ldrh	r0, [r7, #0]
1005d432:	4288      	cmp	r0, r1
1005d434:	d300      	bcc.n	1005d438 <LL_adjust_max_tx_data_frag_coded+0x38>
1005d436:	4608      	mov	r0, r1
1005d438:	2e00      	cmp	r6, #0
1005d43a:	d002      	beq.n	1005d442 <LL_adjust_max_tx_data_frag_coded+0x42>
1005d43c:	8ce9      	ldrh	r1, [r5, #38]	@ 0x26
1005d43e:	4281      	cmp	r1, r0
1005d440:	d300      	bcc.n	1005d444 <LL_adjust_max_tx_data_frag_coded+0x44>
1005d442:	4601      	mov	r1, r0
1005d444:	8079      	strh	r1, [r7, #2]
1005d446:	4620      	mov	r0, r4
1005d448:	f7fd fa3a 	bl	1005a8c0 <llc_conn_guard_time_for_close_conn_event>
1005d44c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d44e:	46c0      	nop			@ (mov r8, r8)

1005d450 <__arm_cp.4_0>:
1005d450:	fffffe88 	.word	0xfffffe88

1005d454 <__arm_cp.4_1>:
1005d454:	0007ffb5 	.word	0x0007ffb5

1005d458 <LL_conn_upd_data_length_change_event>:
1005d458:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d45a:	6805      	ldr	r5, [r0, #0]
1005d45c:	7906      	ldrb	r6, [r0, #4]
1005d45e:	4630      	mov	r0, r6
1005d460:	f7fc ff64 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005d464:	4607      	mov	r7, r0
1005d466:	4630      	mov	r0, r6
1005d468:	f7fc ff94 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005d46c:	2800      	cmp	r0, #0
1005d46e:	d047      	beq.n	1005d500 <LL_conn_upd_data_length_change_event+0xa8>
1005d470:	7980      	ldrb	r0, [r0, #6]
1005d472:	2804      	cmp	r0, #4
1005d474:	d144      	bne.n	1005d500 <LL_conn_upd_data_length_change_event+0xa8>
1005d476:	463c      	mov	r4, r7
1005d478:	34b4      	adds	r4, #180	@ 0xb4
1005d47a:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
1005d47c:	88e1      	ldrh	r1, [r4, #6]
1005d47e:	4281      	cmp	r1, r0
1005d480:	d03e      	beq.n	1005d500 <LL_conn_upd_data_length_change_event+0xa8>
1005d482:	80e0      	strh	r0, [r4, #6]
1005d484:	2100      	movs	r1, #0
1005d486:	4630      	mov	r0, r6
1005d488:	462a      	mov	r2, r5
1005d48a:	463b      	mov	r3, r7
1005d48c:	f7ff ffb8 	bl	1005d400 <LL_adjust_max_tx_data_frag_coded>
1005d490:	481c      	ldr	r0, [pc, #112]	@ (1005d504 <__arm_cp.6_0>)
1005d492:	6800      	ldr	r0, [r0, #0]
1005d494:	213d      	movs	r1, #61	@ 0x3d
1005d496:	5c41      	ldrb	r1, [r0, r1]
1005d498:	0689      	lsls	r1, r1, #26
1005d49a:	d531      	bpl.n	1005d500 <LL_conn_upd_data_length_change_event+0xa8>
1005d49c:	303d      	adds	r0, #61	@ 0x3d
1005d49e:	7a40      	ldrb	r0, [r0, #9]
1005d4a0:	0640      	lsls	r0, r0, #25
1005d4a2:	d52d      	bpl.n	1005d500 <LL_conn_upd_data_length_change_event+0xa8>
1005d4a4:	8926      	ldrh	r6, [r4, #8]
1005d4a6:	88a5      	ldrh	r5, [r4, #4]
1005d4a8:	88e0      	ldrh	r0, [r4, #6]
1005d4aa:	9001      	str	r0, [sp, #4]
1005d4ac:	8820      	ldrh	r0, [r4, #0]
1005d4ae:	9002      	str	r0, [sp, #8]
1005d4b0:	8f7f      	ldrh	r7, [r7, #58]	@ 0x3a
1005d4b2:	4815      	ldr	r0, [pc, #84]	@ (1005d508 <__arm_cp.6_1>)
1005d4b4:	6800      	ldr	r0, [r0, #0]
1005d4b6:	6900      	ldr	r0, [r0, #16]
1005d4b8:	2180      	movs	r1, #128	@ 0x80
1005d4ba:	2226      	movs	r2, #38	@ 0x26
1005d4bc:	2404      	movs	r4, #4
1005d4be:	4623      	mov	r3, r4
1005d4c0:	f7f8 f80e 	bl	100554e0 <aci_event_fifo_push_header>
1005d4c4:	2800      	cmp	r0, #0
1005d4c6:	d01b      	beq.n	1005d500 <LL_conn_upd_data_length_change_event+0xa8>
1005d4c8:	4601      	mov	r1, r0
1005d4ca:	7406      	strb	r6, [r0, #16]
1005d4cc:	7385      	strb	r5, [r0, #14]
1005d4ce:	9b01      	ldr	r3, [sp, #4]
1005d4d0:	7303      	strb	r3, [r0, #12]
1005d4d2:	9a02      	ldr	r2, [sp, #8]
1005d4d4:	7282      	strb	r2, [r0, #10]
1005d4d6:	7207      	strb	r7, [r0, #8]
1005d4d8:	2007      	movs	r0, #7
1005d4da:	71c8      	strb	r0, [r1, #7]
1005d4dc:	200b      	movs	r0, #11
1005d4de:	7188      	strb	r0, [r1, #6]
1005d4e0:	203e      	movs	r0, #62	@ 0x3e
1005d4e2:	7148      	strb	r0, [r1, #5]
1005d4e4:	710c      	strb	r4, [r1, #4]
1005d4e6:	0a30      	lsrs	r0, r6, #8
1005d4e8:	7448      	strb	r0, [r1, #17]
1005d4ea:	0a28      	lsrs	r0, r5, #8
1005d4ec:	73c8      	strb	r0, [r1, #15]
1005d4ee:	0a18      	lsrs	r0, r3, #8
1005d4f0:	7348      	strb	r0, [r1, #13]
1005d4f2:	0a10      	lsrs	r0, r2, #8
1005d4f4:	72c8      	strb	r0, [r1, #11]
1005d4f6:	0a38      	lsrs	r0, r7, #8
1005d4f8:	7248      	strb	r0, [r1, #9]
1005d4fa:	2080      	movs	r0, #128	@ 0x80
1005d4fc:	f7f8 f88d 	bl	1005561a <aci_event_fifo_push>
1005d500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d502:	46c0      	nop			@ (mov r8, r8)

1005d504 <__arm_cp.6_0>:
1005d504:	20002468 	.word	0x20002468

1005d508 <__arm_cp.6_1>:
1005d508:	20002418 	.word	0x20002418

1005d50c <llc_conn_init_cte_ctxt_ucfg_weak>:
1005d50c:	4770      	bx	lr

1005d50e <LLC_cte_request_procedure_ucfg_weak>:
1005d50e:	2000      	movs	r0, #0
1005d510:	4770      	bx	lr

1005d512 <LLC_connection_cte_response_pause_resume_ucfg_weak>:
1005d512:	4770      	bx	lr

1005d514 <LLC_connection_cte_response_disable_ucfg_weak>:
1005d514:	4770      	bx	lr

1005d516 <llc_cte_process_rx_cte_ucfg_weak>:
1005d516:	4770      	bx	lr

1005d518 <LL_encryption>:
1005d518:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d51a:	b08d      	sub	sp, #52	@ 0x34
1005d51c:	9309      	str	r3, [sp, #36]	@ 0x24
1005d51e:	4617      	mov	r7, r2
1005d520:	460d      	mov	r5, r1
1005d522:	4606      	mov	r6, r0
1005d524:	f7fe fdbb 	bl	1005c09e <LL_cpe_get_cntxt>
1005d528:	4604      	mov	r4, r0
1005d52a:	9608      	str	r6, [sp, #32]
1005d52c:	4630      	mov	r0, r6
1005d52e:	f7fc fefd 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005d532:	4603      	mov	r3, r0
1005d534:	2f05      	cmp	r7, #5
1005d536:	d107      	bne.n	1005d548 <LL_encryption+0x30>
1005d538:	213d      	movs	r1, #61	@ 0x3d
1005d53a:	4618      	mov	r0, r3
1005d53c:	f7fd fdda 	bl	1005b0f4 <llc_conn_disconnect_link_from_cpf>
1005d540:	27ff      	movs	r7, #255	@ 0xff
1005d542:	4638      	mov	r0, r7
1005d544:	b00d      	add	sp, #52	@ 0x34
1005d546:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d548:	9407      	str	r4, [sp, #28]
1005d54a:	4622      	mov	r2, r4
1005d54c:	3228      	adds	r2, #40	@ 0x28
1005d54e:	461e      	mov	r6, r3
1005d550:	362c      	adds	r6, #44	@ 0x2c
1005d552:	7830      	ldrb	r0, [r6, #0]
1005d554:	2802      	cmp	r0, #2
1005d556:	d129      	bne.n	1005d5ac <LL_encryption+0x94>
1005d558:	7810      	ldrb	r0, [r2, #0]
1005d55a:	1e40      	subs	r0, r0, #1
1005d55c:	27ff      	movs	r7, #255	@ 0xff
1005d55e:	280b      	cmp	r0, #11
1005d560:	d8ef      	bhi.n	1005d542 <LL_encryption+0x2a>
1005d562:	0040      	lsls	r0, r0, #1
1005d564:	4478      	add	r0, pc
1005d566:	8880      	ldrh	r0, [r0, #4]
1005d568:	0040      	lsls	r0, r0, #1
1005d56a:	4487      	add	pc, r0
1005d56c:	00a4000b 	.word	0x00a4000b
1005d570:	00c200a7 	.word	0x00c200a7
1005d574:	00d000cc 	.word	0x00d000cc
1005d578:	01370133 	.word	0x01370133
1005d57c:	016f015f 	.word	0x016f015f
1005d580:	0181017e 	.word	0x0181017e
1005d584:	200a      	movs	r0, #10
1005d586:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d588:	7088      	strb	r0, [r1, #2]
1005d58a:	27ff      	movs	r7, #255	@ 0xff
1005d58c:	4638      	mov	r0, r7
1005d58e:	3004      	adds	r0, #4
1005d590:	8008      	strh	r0, [r1, #0]
1005d592:	2101      	movs	r1, #1
1005d594:	9808      	ldr	r0, [sp, #32]
1005d596:	4615      	mov	r5, r2
1005d598:	460a      	mov	r2, r1
1005d59a:	461c      	mov	r4, r3
1005d59c:	f7fe fd62 	bl	1005c064 <LL_cpe_set_blocked>
1005d5a0:	4620      	mov	r0, r4
1005d5a2:	f7fd fc13 	bl	1005adcc <llc_conn_set_tx_acl_blocked>
1005d5a6:	2002      	movs	r0, #2
1005d5a8:	7028      	strb	r0, [r5, #0]
1005d5aa:	e7ca      	b.n	1005d542 <LL_encryption+0x2a>
1005d5ac:	2f01      	cmp	r7, #1
1005d5ae:	d12e      	bne.n	1005d60e <LL_encryption+0xf6>
1005d5b0:	2000      	movs	r0, #0
1005d5b2:	7050      	strb	r0, [r2, #1]
1005d5b4:	9206      	str	r2, [sp, #24]
1005d5b6:	2500      	movs	r5, #0
1005d5b8:	461e      	mov	r6, r3
1005d5ba:	4618      	mov	r0, r3
1005d5bc:	4629      	mov	r1, r5
1005d5be:	f7fd f951 	bl	1005a864 <llc_conn_get_enc_on>
1005d5c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d5c4:	7889      	ldrb	r1, [r1, #2]
1005d5c6:	2903      	cmp	r1, #3
1005d5c8:	d157      	bne.n	1005d67a <LL_encryption+0x162>
1005d5ca:	2800      	cmp	r0, #0
1005d5cc:	4633      	mov	r3, r6
1005d5ce:	9f07      	ldr	r7, [sp, #28]
1005d5d0:	d1b2      	bne.n	1005d538 <LL_encryption+0x20>
1005d5d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d5d4:	1ce0      	adds	r0, r4, #3
1005d5d6:	4639      	mov	r1, r7
1005d5d8:	3130      	adds	r1, #48	@ 0x30
1005d5da:	2208      	movs	r2, #8
1005d5dc:	9205      	str	r2, [sp, #20]
1005d5de:	4b19      	ldr	r3, [pc, #100]	@ (1005d644 <LL_encryption+0x12c>)
1005d5e0:	4798      	blx	r3
1005d5e2:	4620      	mov	r0, r4
1005d5e4:	300b      	adds	r0, #11
1005d5e6:	4639      	mov	r1, r7
1005d5e8:	312e      	adds	r1, #46	@ 0x2e
1005d5ea:	2202      	movs	r2, #2
1005d5ec:	4b15      	ldr	r3, [pc, #84]	@ (1005d644 <LL_encryption+0x12c>)
1005d5ee:	4798      	blx	r3
1005d5f0:	4620      	mov	r0, r4
1005d5f2:	300d      	adds	r0, #13
1005d5f4:	4639      	mov	r1, r7
1005d5f6:	9a05      	ldr	r2, [sp, #20]
1005d5f8:	4b12      	ldr	r3, [pc, #72]	@ (1005d644 <LL_encryption+0x12c>)
1005d5fa:	4798      	blx	r3
1005d5fc:	3415      	adds	r4, #21
1005d5fe:	3720      	adds	r7, #32
1005d600:	2204      	movs	r2, #4
1005d602:	4620      	mov	r0, r4
1005d604:	4639      	mov	r1, r7
1005d606:	4b0f      	ldr	r3, [pc, #60]	@ (1005d644 <LL_encryption+0x12c>)
1005d608:	4798      	blx	r3
1005d60a:	2005      	movs	r0, #5
1005d60c:	e03b      	b.n	1005d686 <LL_encryption+0x16e>
1005d60e:	7850      	ldrb	r0, [r2, #1]
1005d610:	27ff      	movs	r7, #255	@ 0xff
1005d612:	280d      	cmp	r0, #13
1005d614:	d895      	bhi.n	1005d542 <LL_encryption+0x2a>
1005d616:	9705      	str	r7, [sp, #20]
1005d618:	2111      	movs	r1, #17
1005d61a:	0109      	lsls	r1, r1, #4
1005d61c:	185f      	adds	r7, r3, r1
1005d61e:	0040      	lsls	r0, r0, #1
1005d620:	4478      	add	r0, pc
1005d622:	8880      	ldrh	r0, [r0, #4]
1005d624:	0040      	lsls	r0, r0, #1
1005d626:	4487      	add	pc, r0
1005d628:	0010000f 	.word	0x0010000f
1005d62c:	016d0165 	.word	0x016d0165
1005d630:	019b0176 	.word	0x019b0176
1005d634:	022001d6 	.word	0x022001d6
1005d638:	024001e9 	.word	0x024001e9
1005d63c:	01fe01ed 	.word	0x01fe01ed
1005d640:	02340214 	.word	0x02340214
1005d644:	10062e85 	.word	0x10062e85
1005d648:	e7b4      	b.n	1005d5b4 <LL_encryption+0x9c>
1005d64a:	200b      	movs	r0, #11
1005d64c:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d64e:	7088      	strb	r0, [r1, #2]
1005d650:	2002      	movs	r0, #2
1005d652:	7050      	strb	r0, [r2, #1]
1005d654:	27ff      	movs	r7, #255	@ 0xff
1005d656:	4638      	mov	r0, r7
1005d658:	3004      	adds	r0, #4
1005d65a:	8008      	strh	r0, [r1, #0]
1005d65c:	2400      	movs	r4, #0
1005d65e:	2201      	movs	r2, #1
1005d660:	9808      	ldr	r0, [sp, #32]
1005d662:	4621      	mov	r1, r4
1005d664:	461d      	mov	r5, r3
1005d666:	f7fe fcfd 	bl	1005c064 <LL_cpe_set_blocked>
1005d66a:	4628      	mov	r0, r5
1005d66c:	f7fd fbae 	bl	1005adcc <llc_conn_set_tx_acl_blocked>
1005d670:	4628      	mov	r0, r5
1005d672:	4621      	mov	r1, r4
1005d674:	f7fd fb99 	bl	1005adaa <llc_conn_set_stop_enc>
1005d678:	e763      	b.n	1005d542 <LL_encryption+0x2a>
1005d67a:	2801      	cmp	r0, #1
1005d67c:	4633      	mov	r3, r6
1005d67e:	d000      	beq.n	1005d682 <LL_encryption+0x16a>
1005d680:	e75a      	b.n	1005d538 <LL_encryption+0x20>
1005d682:	2501      	movs	r5, #1
1005d684:	4628      	mov	r0, r5
1005d686:	9f06      	ldr	r7, [sp, #24]
1005d688:	7078      	strb	r0, [r7, #1]
1005d68a:	713d      	strb	r5, [r7, #4]
1005d68c:	2400      	movs	r4, #0
1005d68e:	9d08      	ldr	r5, [sp, #32]
1005d690:	4628      	mov	r0, r5
1005d692:	4621      	mov	r1, r4
1005d694:	4622      	mov	r2, r4
1005d696:	f7fe fce5 	bl	1005c064 <LL_cpe_set_blocked>
1005d69a:	4630      	mov	r0, r6
1005d69c:	f7fd fb6c 	bl	1005ad78 <llc_conn_set_rx_acl_blocked>
1005d6a0:	4628      	mov	r0, r5
1005d6a2:	4621      	mov	r1, r4
1005d6a4:	f7fe fcee 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005d6a8:	2201      	movs	r2, #1
1005d6aa:	4628      	mov	r0, r5
1005d6ac:	4621      	mov	r1, r4
1005d6ae:	4623      	mov	r3, r4
1005d6b0:	f7fe fc9f 	bl	1005bff2 <LL_cpe_set_active>
1005d6b4:	e744      	b.n	1005d540 <LL_encryption+0x28>
1005d6b6:	2003      	movs	r0, #3
1005d6b8:	7010      	strb	r0, [r2, #0]
1005d6ba:	e121      	b.n	1005d900 <LL_encryption+0x3e8>
1005d6bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d6be:	7880      	ldrb	r0, [r0, #2]
1005d6c0:	280b      	cmp	r0, #11
1005d6c2:	d000      	beq.n	1005d6c6 <LL_encryption+0x1ae>
1005d6c4:	e738      	b.n	1005d538 <LL_encryption+0x20>
1005d6c6:	2004      	movs	r0, #4
1005d6c8:	7010      	strb	r0, [r2, #0]
1005d6ca:	2102      	movs	r1, #2
1005d6cc:	4618      	mov	r0, r3
1005d6ce:	461d      	mov	r5, r3
1005d6d0:	f7fd fb6b 	bl	1005adaa <llc_conn_set_stop_enc>
1005d6d4:	2401      	movs	r4, #1
1005d6d6:	9e08      	ldr	r6, [sp, #32]
1005d6d8:	4630      	mov	r0, r6
1005d6da:	4621      	mov	r1, r4
1005d6dc:	f7fe fcd2 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005d6e0:	2200      	movs	r2, #0
1005d6e2:	4630      	mov	r0, r6
1005d6e4:	4621      	mov	r1, r4
1005d6e6:	f7fe fcbd 	bl	1005c064 <LL_cpe_set_blocked>
1005d6ea:	4628      	mov	r0, r5
1005d6ec:	f7fd fb44 	bl	1005ad78 <llc_conn_set_rx_acl_blocked>
1005d6f0:	e727      	b.n	1005d542 <LL_encryption+0x2a>
1005d6f2:	200b      	movs	r0, #11
1005d6f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d6f6:	7088      	strb	r0, [r1, #2]
1005d6f8:	2005      	movs	r0, #5
1005d6fa:	7010      	strb	r0, [r2, #0]
1005d6fc:	27ff      	movs	r7, #255	@ 0xff
1005d6fe:	4638      	mov	r0, r7
1005d700:	3004      	adds	r0, #4
1005d702:	8008      	strh	r0, [r1, #0]
1005d704:	e71d      	b.n	1005d542 <LL_encryption+0x2a>
1005d706:	2006      	movs	r0, #6
1005d708:	7010      	strb	r0, [r2, #0]
1005d70a:	2101      	movs	r1, #1
1005d70c:	e1d6      	b.n	1005dabc <LL_encryption+0x5a4>
1005d70e:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d710:	1ca0      	adds	r0, r4, #2
1005d712:	9001      	str	r0, [sp, #4]
1005d714:	9705      	str	r7, [sp, #20]
1005d716:	2700      	movs	r7, #0
1005d718:	4dfd      	ldr	r5, [pc, #1012]	@ (1005db10 <LL_encryption+0x5f8>)
1005d71a:	4638      	mov	r0, r7
1005d71c:	9304      	str	r3, [sp, #16]
1005d71e:	4616      	mov	r6, r2
1005d720:	47a8      	blx	r5
1005d722:	9002      	str	r0, [sp, #8]
1005d724:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d726:	4638      	mov	r0, r7
1005d728:	47a8      	blx	r5
1005d72a:	900c      	str	r0, [sp, #48]	@ 0x30
1005d72c:	4638      	mov	r0, r7
1005d72e:	9f05      	ldr	r7, [sp, #20]
1005d730:	47a8      	blx	r5
1005d732:	9003      	str	r0, [sp, #12]
1005d734:	49fc      	ldr	r1, [pc, #1008]	@ (1005db28 <__arm_cp.0_10>)
1005d736:	8021      	strh	r1, [r4, #0]
1005d738:	900a      	str	r0, [sp, #40]	@ 0x28
1005d73a:	4635      	mov	r5, r6
1005d73c:	7a30      	ldrb	r0, [r6, #8]
1005d73e:	0200      	lsls	r0, r0, #8
1005d740:	7a71      	ldrb	r1, [r6, #9]
1005d742:	0409      	lsls	r1, r1, #16
1005d744:	1840      	adds	r0, r0, r1
1005d746:	7ab1      	ldrb	r1, [r6, #10]
1005d748:	9606      	str	r6, [sp, #24]
1005d74a:	0609      	lsls	r1, r1, #24
1005d74c:	1840      	adds	r0, r0, r1
1005d74e:	1cc0      	adds	r0, r0, #3
1005d750:	9c01      	ldr	r4, [sp, #4]
1005d752:	6020      	str	r0, [r4, #0]
1005d754:	9e07      	ldr	r6, [sp, #28]
1005d756:	4630      	mov	r0, r6
1005d758:	3033      	adds	r0, #51	@ 0x33
1005d75a:	f000 fa25 	bl	1005dba8 <le4ByteToInt32>
1005d75e:	6060      	str	r0, [r4, #4]
1005d760:	9802      	ldr	r0, [sp, #8]
1005d762:	0600      	lsls	r0, r0, #24
1005d764:	8df1      	ldrh	r1, [r6, #46]	@ 0x2e
1005d766:	0209      	lsls	r1, r1, #8
1005d768:	1808      	adds	r0, r1, r0
1005d76a:	7be9      	ldrb	r1, [r5, #15]
1005d76c:	1840      	adds	r0, r0, r1
1005d76e:	60a0      	str	r0, [r4, #8]
1005d770:	4625      	mov	r5, r4
1005d772:	ac0b      	add	r4, sp, #44	@ 0x2c
1005d774:	1c60      	adds	r0, r4, #1
1005d776:	f000 fa17 	bl	1005dba8 <le4ByteToInt32>
1005d77a:	60e8      	str	r0, [r5, #12]
1005d77c:	9803      	ldr	r0, [sp, #12]
1005d77e:	0600      	lsls	r0, r0, #24
1005d780:	7961      	ldrb	r1, [r4, #5]
1005d782:	1840      	adds	r0, r0, r1
1005d784:	79a1      	ldrb	r1, [r4, #6]
1005d786:	0209      	lsls	r1, r1, #8
1005d788:	1840      	adds	r0, r0, r1
1005d78a:	79e1      	ldrb	r1, [r4, #7]
1005d78c:	0409      	lsls	r1, r1, #16
1005d78e:	1840      	adds	r0, r0, r1
1005d790:	6128      	str	r0, [r5, #16]
1005d792:	462a      	mov	r2, r5
1005d794:	ad0a      	add	r5, sp, #40	@ 0x28
1005d796:	7868      	ldrb	r0, [r5, #1]
1005d798:	78a9      	ldrb	r1, [r5, #2]
1005d79a:	0209      	lsls	r1, r1, #8
1005d79c:	1808      	adds	r0, r1, r0
1005d79e:	78e9      	ldrb	r1, [r5, #3]
1005d7a0:	0409      	lsls	r1, r1, #16
1005d7a2:	1840      	adds	r0, r0, r1
1005d7a4:	6150      	str	r0, [r2, #20]
1005d7a6:	2208      	movs	r2, #8
1005d7a8:	4620      	mov	r0, r4
1005d7aa:	4631      	mov	r1, r6
1005d7ac:	f005 fb6a 	bl	10062e84 <char_copy>
1005d7b0:	3620      	adds	r6, #32
1005d7b2:	2204      	movs	r2, #4
1005d7b4:	4628      	mov	r0, r5
1005d7b6:	4631      	mov	r1, r6
1005d7b8:	f005 fb64 	bl	10062e84 <char_copy>
1005d7bc:	2007      	movs	r0, #7
1005d7be:	9906      	ldr	r1, [sp, #24]
1005d7c0:	7008      	strb	r0, [r1, #0]
1005d7c2:	2101      	movs	r1, #1
1005d7c4:	9808      	ldr	r0, [sp, #32]
1005d7c6:	460a      	mov	r2, r1
1005d7c8:	f7fe fc4c 	bl	1005c064 <LL_cpe_set_blocked>
1005d7cc:	9804      	ldr	r0, [sp, #16]
1005d7ce:	f7fd fafd 	bl	1005adcc <llc_conn_set_tx_acl_blocked>
1005d7d2:	e6b6      	b.n	1005d542 <LL_encryption+0x2a>
1005d7d4:	2008      	movs	r0, #8
1005d7d6:	7010      	strb	r0, [r2, #0]
1005d7d8:	2704      	movs	r7, #4
1005d7da:	e6b2      	b.n	1005d542 <LL_encryption+0x2a>
1005d7dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d7de:	7880      	ldrb	r0, [r0, #2]
1005d7e0:	2811      	cmp	r0, #17
1005d7e2:	d061      	beq.n	1005d8a8 <LL_encryption+0x390>
1005d7e4:	2807      	cmp	r0, #7
1005d7e6:	d05f      	beq.n	1005d8a8 <LL_encryption+0x390>
1005d7e8:	280d      	cmp	r0, #13
1005d7ea:	d05d      	beq.n	1005d8a8 <LL_encryption+0x390>
1005d7ec:	2804      	cmp	r0, #4
1005d7ee:	9c07      	ldr	r4, [sp, #28]
1005d7f0:	d000      	beq.n	1005d7f4 <LL_encryption+0x2dc>
1005d7f2:	e6a1      	b.n	1005d538 <LL_encryption+0x20>
1005d7f4:	2009      	movs	r0, #9
1005d7f6:	7010      	strb	r0, [r2, #0]
1005d7f8:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005d7fa:	1cf8      	adds	r0, r7, #3
1005d7fc:	4621      	mov	r1, r4
1005d7fe:	3108      	adds	r1, #8
1005d800:	2208      	movs	r2, #8
1005d802:	461d      	mov	r5, r3
1005d804:	f005 fb3e 	bl	10062e84 <char_copy>
1005d808:	370b      	adds	r7, #11
1005d80a:	4621      	mov	r1, r4
1005d80c:	3124      	adds	r1, #36	@ 0x24
1005d80e:	2204      	movs	r2, #4
1005d810:	4638      	mov	r0, r7
1005d812:	f005 fb37 	bl	10062e84 <char_copy>
1005d816:	6734      	str	r4, [r6, #112]	@ 0x70
1005d818:	2101      	movs	r1, #1
1005d81a:	2200      	movs	r2, #0
1005d81c:	9808      	ldr	r0, [sp, #32]
1005d81e:	f7fe fc21 	bl	1005c064 <LL_cpe_set_blocked>
1005d822:	4628      	mov	r0, r5
1005d824:	f7fd faa8 	bl	1005ad78 <llc_conn_set_rx_acl_blocked>
1005d828:	2705      	movs	r7, #5
1005d82a:	e68a      	b.n	1005d542 <LL_encryption+0x2a>
1005d82c:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d82e:	7880      	ldrb	r0, [r0, #2]
1005d830:	2811      	cmp	r0, #17
1005d832:	d046      	beq.n	1005d8c2 <LL_encryption+0x3aa>
1005d834:	280d      	cmp	r0, #13
1005d836:	d044      	beq.n	1005d8c2 <LL_encryption+0x3aa>
1005d838:	2805      	cmp	r0, #5
1005d83a:	d000      	beq.n	1005d83e <LL_encryption+0x326>
1005d83c:	e67c      	b.n	1005d538 <LL_encryption+0x20>
1005d83e:	4614      	mov	r4, r2
1005d840:	2101      	movs	r1, #1
1005d842:	9808      	ldr	r0, [sp, #32]
1005d844:	f7fe fc1e 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005d848:	200a      	movs	r0, #10
1005d84a:	e00c      	b.n	1005d866 <LL_encryption+0x34e>
1005d84c:	2006      	movs	r0, #6
1005d84e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d850:	7088      	strb	r0, [r1, #2]
1005d852:	27ff      	movs	r7, #255	@ 0xff
1005d854:	4638      	mov	r0, r7
1005d856:	3004      	adds	r0, #4
1005d858:	8008      	strh	r0, [r1, #0]
1005d85a:	2102      	movs	r1, #2
1005d85c:	4618      	mov	r0, r3
1005d85e:	4614      	mov	r4, r2
1005d860:	f7fd fa92 	bl	1005ad88 <llc_conn_set_start_enc>
1005d864:	200b      	movs	r0, #11
1005d866:	7020      	strb	r0, [r4, #0]
1005d868:	e66b      	b.n	1005d542 <LL_encryption+0x2a>
1005d86a:	200c      	movs	r0, #12
1005d86c:	7010      	strb	r0, [r2, #0]
1005d86e:	e0c7      	b.n	1005da00 <LL_encryption+0x4e8>
1005d870:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d872:	7880      	ldrb	r0, [r0, #2]
1005d874:	2806      	cmp	r0, #6
1005d876:	d000      	beq.n	1005d87a <LL_encryption+0x362>
1005d878:	e65e      	b.n	1005d538 <LL_encryption+0x20>
1005d87a:	2000      	movs	r0, #0
1005d87c:	4615      	mov	r5, r2
1005d87e:	7010      	strb	r0, [r2, #0]
1005d880:	48c4      	ldr	r0, [pc, #784]	@ (1005db94 <__arm_cp.0_0>)
1005d882:	6800      	ldr	r0, [r0, #0]
1005d884:	212c      	movs	r1, #44	@ 0x2c
1005d886:	5c40      	ldrb	r0, [r0, r1]
1005d888:	07c0      	lsls	r0, r0, #31
1005d88a:	0ec1      	lsrs	r1, r0, #27
1005d88c:	206f      	movs	r0, #111	@ 0x6f
1005d88e:	43c0      	mvns	r0, r0
1005d890:	4048      	eors	r0, r1
1005d892:	461c      	mov	r4, r3
1005d894:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d896:	7929      	ldrb	r1, [r5, #4]
1005d898:	b2c0      	uxtb	r0, r0
1005d89a:	2901      	cmp	r1, #1
1005d89c:	d000      	beq.n	1005d8a0 <LL_encryption+0x388>
1005d89e:	e111      	b.n	1005dac4 <LL_encryption+0x5ac>
1005d8a0:	4611      	mov	r1, r2
1005d8a2:	f000 f9bf 	bl	1005dc24 <hci_encryption_key_refresh_complete_event_push>
1005d8a6:	e111      	b.n	1005dacc <LL_encryption+0x5b4>
1005d8a8:	48ba      	ldr	r0, [pc, #744]	@ (1005db94 <__arm_cp.0_0>)
1005d8aa:	6800      	ldr	r0, [r0, #0]
1005d8ac:	212c      	movs	r1, #44	@ 0x2c
1005d8ae:	5c40      	ldrb	r0, [r0, r1]
1005d8b0:	0100      	lsls	r0, r0, #4
1005d8b2:	43c0      	mvns	r0, r0
1005d8b4:	2180      	movs	r1, #128	@ 0x80
1005d8b6:	4301      	orrs	r1, r0
1005d8b8:	2090      	movs	r0, #144	@ 0x90
1005d8ba:	4008      	ands	r0, r1
1005d8bc:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d8be:	211a      	movs	r1, #26
1005d8c0:	e00b      	b.n	1005d8da <LL_encryption+0x3c2>
1005d8c2:	48b4      	ldr	r0, [pc, #720]	@ (1005db94 <__arm_cp.0_0>)
1005d8c4:	6800      	ldr	r0, [r0, #0]
1005d8c6:	212c      	movs	r1, #44	@ 0x2c
1005d8c8:	5c40      	ldrb	r0, [r0, r1]
1005d8ca:	0100      	lsls	r0, r0, #4
1005d8cc:	43c0      	mvns	r0, r0
1005d8ce:	2180      	movs	r1, #128	@ 0x80
1005d8d0:	4301      	orrs	r1, r0
1005d8d2:	2090      	movs	r0, #144	@ 0x90
1005d8d4:	4008      	ands	r0, r1
1005d8d6:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d8d8:	2106      	movs	r1, #6
1005d8da:	461c      	mov	r4, r3
1005d8dc:	2300      	movs	r3, #0
1005d8de:	f000 f96f 	bl	1005dbc0 <hci_encryption_change_event_push>
1005d8e2:	4620      	mov	r0, r4
1005d8e4:	f7fc ff05 	bl	1005a6f2 <llc_conn_clr_tx_acl_blocked>
1005d8e8:	4620      	mov	r0, r4
1005d8ea:	f7fc fef1 	bl	1005a6d0 <llc_conn_clr_rx_acl_blocked>
1005d8ee:	2101      	movs	r1, #1
1005d8f0:	9808      	ldr	r0, [sp, #32]
1005d8f2:	e0f4      	b.n	1005dade <LL_encryption+0x5c6>
1005d8f4:	2003      	movs	r0, #3
1005d8f6:	7050      	strb	r0, [r2, #1]
1005d8f8:	2101      	movs	r1, #1
1005d8fa:	4618      	mov	r0, r3
1005d8fc:	f7fd fa55 	bl	1005adaa <llc_conn_set_stop_enc>
1005d900:	270b      	movs	r7, #11
1005d902:	e61e      	b.n	1005d542 <LL_encryption+0x2a>
1005d904:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d906:	7880      	ldrb	r0, [r0, #2]
1005d908:	280b      	cmp	r0, #11
1005d90a:	d000      	beq.n	1005d90e <LL_encryption+0x3f6>
1005d90c:	e614      	b.n	1005d538 <LL_encryption+0x20>
1005d90e:	2004      	movs	r0, #4
1005d910:	7050      	strb	r0, [r2, #1]
1005d912:	2703      	movs	r7, #3
1005d914:	e615      	b.n	1005d542 <LL_encryption+0x2a>
1005d916:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d918:	7880      	ldrb	r0, [r0, #2]
1005d91a:	2803      	cmp	r0, #3
1005d91c:	9f05      	ldr	r7, [sp, #20]
1005d91e:	9e07      	ldr	r6, [sp, #28]
1005d920:	d000      	beq.n	1005d924 <LL_encryption+0x40c>
1005d922:	e609      	b.n	1005d538 <LL_encryption+0x20>
1005d924:	2005      	movs	r0, #5
1005d926:	7050      	strb	r0, [r2, #1]
1005d928:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d92a:	1ce0      	adds	r0, r4, #3
1005d92c:	4631      	mov	r1, r6
1005d92e:	3130      	adds	r1, #48	@ 0x30
1005d930:	2508      	movs	r5, #8
1005d932:	462a      	mov	r2, r5
1005d934:	4b9b      	ldr	r3, [pc, #620]	@ (1005dba4 <__arm_cp.0_4>)
1005d936:	4798      	blx	r3
1005d938:	4620      	mov	r0, r4
1005d93a:	300b      	adds	r0, #11
1005d93c:	4631      	mov	r1, r6
1005d93e:	312e      	adds	r1, #46	@ 0x2e
1005d940:	2202      	movs	r2, #2
1005d942:	4b98      	ldr	r3, [pc, #608]	@ (1005dba4 <__arm_cp.0_4>)
1005d944:	4798      	blx	r3
1005d946:	4620      	mov	r0, r4
1005d948:	300d      	adds	r0, #13
1005d94a:	4631      	mov	r1, r6
1005d94c:	462a      	mov	r2, r5
1005d94e:	4d95      	ldr	r5, [pc, #596]	@ (1005dba4 <__arm_cp.0_4>)
1005d950:	47a8      	blx	r5
1005d952:	3415      	adds	r4, #21
1005d954:	3620      	adds	r6, #32
1005d956:	2204      	movs	r2, #4
1005d958:	4620      	mov	r0, r4
1005d95a:	4631      	mov	r1, r6
1005d95c:	47a8      	blx	r5
1005d95e:	e0ac      	b.n	1005daba <LL_encryption+0x5a2>
1005d960:	2400      	movs	r4, #0
1005d962:	9403      	str	r4, [sp, #12]
1005d964:	4d8e      	ldr	r5, [pc, #568]	@ (1005dba0 <__arm_cp.0_3>)
1005d966:	4620      	mov	r0, r4
1005d968:	9304      	str	r3, [sp, #16]
1005d96a:	9206      	str	r2, [sp, #24]
1005d96c:	47a8      	blx	r5
1005d96e:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d970:	4620      	mov	r0, r4
1005d972:	47a8      	blx	r5
1005d974:	900c      	str	r0, [sp, #48]	@ 0x30
1005d976:	4620      	mov	r0, r4
1005d978:	47a8      	blx	r5
1005d97a:	2604      	movs	r6, #4
1005d97c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d97e:	70a6      	strb	r6, [r4, #2]
1005d980:	210d      	movs	r1, #13
1005d982:	7061      	strb	r1, [r4, #1]
1005d984:	2103      	movs	r1, #3
1005d986:	7021      	strb	r1, [r4, #0]
1005d988:	900a      	str	r0, [sp, #40]	@ 0x28
1005d98a:	1ce1      	adds	r1, r4, #3
1005d98c:	ad0b      	add	r5, sp, #44	@ 0x2c
1005d98e:	2208      	movs	r2, #8
1005d990:	9202      	str	r2, [sp, #8]
1005d992:	4b84      	ldr	r3, [pc, #528]	@ (1005dba4 <__arm_cp.0_4>)
1005d994:	4628      	mov	r0, r5
1005d996:	4798      	blx	r3
1005d998:	340b      	adds	r4, #11
1005d99a:	af0a      	add	r7, sp, #40	@ 0x28
1005d99c:	4638      	mov	r0, r7
1005d99e:	4621      	mov	r1, r4
1005d9a0:	4632      	mov	r2, r6
1005d9a2:	4b80      	ldr	r3, [pc, #512]	@ (1005dba4 <__arm_cp.0_4>)
1005d9a4:	4798      	blx	r3
1005d9a6:	9c07      	ldr	r4, [sp, #28]
1005d9a8:	4621      	mov	r1, r4
1005d9aa:	3108      	adds	r1, #8
1005d9ac:	4628      	mov	r0, r5
1005d9ae:	9a02      	ldr	r2, [sp, #8]
1005d9b0:	4d7c      	ldr	r5, [pc, #496]	@ (1005dba4 <__arm_cp.0_4>)
1005d9b2:	47a8      	blx	r5
1005d9b4:	3424      	adds	r4, #36	@ 0x24
1005d9b6:	4638      	mov	r0, r7
1005d9b8:	4621      	mov	r1, r4
1005d9ba:	4632      	mov	r2, r6
1005d9bc:	47a8      	blx	r5
1005d9be:	2006      	movs	r0, #6
1005d9c0:	9906      	ldr	r1, [sp, #24]
1005d9c2:	7048      	strb	r0, [r1, #1]
1005d9c4:	2201      	movs	r2, #1
1005d9c6:	9808      	ldr	r0, [sp, #32]
1005d9c8:	9903      	ldr	r1, [sp, #12]
1005d9ca:	f7fe fb4b 	bl	1005c064 <LL_cpe_set_blocked>
1005d9ce:	9804      	ldr	r0, [sp, #16]
1005d9d0:	f7fd f9fc 	bl	1005adcc <llc_conn_set_tx_acl_blocked>
1005d9d4:	e0db      	b.n	1005db8e <__arm_cp.0_10+0x66>
1005d9d6:	4870      	ldr	r0, [pc, #448]	@ (1005db98 <__arm_cp.0_1>)
1005d9d8:	6800      	ldr	r0, [r0, #0]
1005d9da:	213d      	movs	r1, #61	@ 0x3d
1005d9dc:	5c41      	ldrb	r1, [r0, r1]
1005d9de:	0689      	lsls	r1, r1, #26
1005d9e0:	d504      	bpl.n	1005d9ec <LL_encryption+0x4d4>
1005d9e2:	303d      	adds	r0, #61	@ 0x3d
1005d9e4:	7a40      	ldrb	r0, [r0, #9]
1005d9e6:	06c0      	lsls	r0, r0, #27
1005d9e8:	d500      	bpl.n	1005d9ec <LL_encryption+0x4d4>
1005d9ea:	e093      	b.n	1005db14 <LL_encryption+0x5fc>
1005d9ec:	2100      	movs	r1, #0
1005d9ee:	9808      	ldr	r0, [sp, #32]
1005d9f0:	4614      	mov	r4, r2
1005d9f2:	f7fe fb47 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005d9f6:	4620      	mov	r0, r4
1005d9f8:	270d      	movs	r7, #13
1005d9fa:	e0c7      	b.n	1005db8c <__arm_cp.0_10+0x64>
1005d9fc:	2009      	movs	r0, #9
1005d9fe:	7050      	strb	r0, [r2, #1]
1005da00:	2706      	movs	r7, #6
1005da02:	e59e      	b.n	1005d542 <LL_encryption+0x2a>
1005da04:	2006      	movs	r0, #6
1005da06:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005da08:	7088      	strb	r0, [r1, #2]
1005da0a:	200b      	movs	r0, #11
1005da0c:	7050      	strb	r0, [r2, #1]
1005da0e:	25ff      	movs	r5, #255	@ 0xff
1005da10:	4628      	mov	r0, r5
1005da12:	3004      	adds	r0, #4
1005da14:	8008      	strh	r0, [r1, #0]
1005da16:	2401      	movs	r4, #1
1005da18:	4618      	mov	r0, r3
1005da1a:	4621      	mov	r1, r4
1005da1c:	f7fd f9b4 	bl	1005ad88 <llc_conn_set_start_enc>
1005da20:	703c      	strb	r4, [r7, #0]
1005da22:	462f      	mov	r7, r5
1005da24:	e58d      	b.n	1005d542 <LL_encryption+0x2a>
1005da26:	2400      	movs	r4, #0
1005da28:	7054      	strb	r4, [r2, #1]
1005da2a:	485a      	ldr	r0, [pc, #360]	@ (1005db94 <__arm_cp.0_0>)
1005da2c:	6800      	ldr	r0, [r0, #0]
1005da2e:	212c      	movs	r1, #44	@ 0x2c
1005da30:	5c40      	ldrb	r0, [r0, r1]
1005da32:	07c0      	lsls	r0, r0, #31
1005da34:	0ec1      	lsrs	r1, r0, #27
1005da36:	206f      	movs	r0, #111	@ 0x6f
1005da38:	43c0      	mvns	r0, r0
1005da3a:	4048      	eors	r0, r1
1005da3c:	4611      	mov	r1, r2
1005da3e:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005da40:	7909      	ldrb	r1, [r1, #4]
1005da42:	b2c0      	uxtb	r0, r0
1005da44:	2901      	cmp	r1, #1
1005da46:	d14e      	bne.n	1005dae6 <LL_encryption+0x5ce>
1005da48:	4611      	mov	r1, r2
1005da4a:	461e      	mov	r6, r3
1005da4c:	f000 f8ea 	bl	1005dc24 <hci_encryption_key_refresh_complete_event_push>
1005da50:	e04e      	b.n	1005daf0 <LL_encryption+0x5d8>
1005da52:	4618      	mov	r0, r3
1005da54:	4615      	mov	r5, r2
1005da56:	f7fc fe4c 	bl	1005a6f2 <llc_conn_clr_tx_acl_blocked>
1005da5a:	2400      	movs	r4, #0
1005da5c:	2201      	movs	r2, #1
1005da5e:	9808      	ldr	r0, [sp, #32]
1005da60:	4621      	mov	r1, r4
1005da62:	f7fe fadd 	bl	1005c020 <LL_cpe_clr_active>
1005da66:	706c      	strb	r4, [r5, #1]
1005da68:	e091      	b.n	1005db8e <__arm_cp.0_10+0x66>
1005da6a:	78d0      	ldrb	r0, [r2, #3]
1005da6c:	2801      	cmp	r0, #1
1005da6e:	d110      	bne.n	1005da92 <LL_encryption+0x57a>
1005da70:	2005      	movs	r0, #5
1005da72:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005da74:	7088      	strb	r0, [r1, #2]
1005da76:	9807      	ldr	r0, [sp, #28]
1005da78:	6730      	str	r0, [r6, #112]	@ 0x70
1005da7a:	27ff      	movs	r7, #255	@ 0xff
1005da7c:	4638      	mov	r0, r7
1005da7e:	3004      	adds	r0, #4
1005da80:	8008      	strh	r0, [r1, #0]
1005da82:	2100      	movs	r1, #0
1005da84:	4618      	mov	r0, r3
1005da86:	4614      	mov	r4, r2
1005da88:	f7fd f97e 	bl	1005ad88 <llc_conn_set_start_enc>
1005da8c:	2008      	movs	r0, #8
1005da8e:	7060      	strb	r0, [r4, #1]
1005da90:	e557      	b.n	1005d542 <LL_encryption+0x2a>
1005da92:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005da94:	4619      	mov	r1, r3
1005da96:	461c      	mov	r4, r3
1005da98:	4615      	mov	r5, r2
1005da9a:	f000 f8f5 	bl	1005dc88 <llc_enc_prepare_reject>
1005da9e:	200c      	movs	r0, #12
1005daa0:	7068      	strb	r0, [r5, #1]
1005daa2:	4620      	mov	r0, r4
1005daa4:	f7fc fe14 	bl	1005a6d0 <llc_conn_clr_rx_acl_blocked>
1005daa8:	e071      	b.n	1005db8e <__arm_cp.0_10+0x66>
1005daaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005daac:	7880      	ldrb	r0, [r0, #2]
1005daae:	2806      	cmp	r0, #6
1005dab0:	9f05      	ldr	r7, [sp, #20]
1005dab2:	d000      	beq.n	1005dab6 <LL_encryption+0x59e>
1005dab4:	e540      	b.n	1005d538 <LL_encryption+0x20>
1005dab6:	200a      	movs	r0, #10
1005dab8:	7050      	strb	r0, [r2, #1]
1005daba:	2100      	movs	r1, #0
1005dabc:	9808      	ldr	r0, [sp, #32]
1005dabe:	f7fe fae1 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005dac2:	e53e      	b.n	1005d542 <LL_encryption+0x2a>
1005dac4:	2100      	movs	r1, #0
1005dac6:	2301      	movs	r3, #1
1005dac8:	f000 f87a 	bl	1005dbc0 <hci_encryption_change_event_push>
1005dacc:	9d08      	ldr	r5, [sp, #32]
1005dace:	4620      	mov	r0, r4
1005dad0:	f7fc fe0f 	bl	1005a6f2 <llc_conn_clr_tx_acl_blocked>
1005dad4:	4620      	mov	r0, r4
1005dad6:	f7fc fdfb 	bl	1005a6d0 <llc_conn_clr_rx_acl_blocked>
1005dada:	2101      	movs	r1, #1
1005dadc:	4628      	mov	r0, r5
1005dade:	460a      	mov	r2, r1
1005dae0:	f7fe fa9e 	bl	1005c020 <LL_cpe_clr_active>
1005dae4:	e52d      	b.n	1005d542 <LL_encryption+0x2a>
1005dae6:	2100      	movs	r1, #0
1005dae8:	461e      	mov	r6, r3
1005daea:	2301      	movs	r3, #1
1005daec:	f000 f868 	bl	1005dbc0 <hci_encryption_change_event_push>
1005daf0:	4630      	mov	r0, r6
1005daf2:	9e08      	ldr	r6, [sp, #32]
1005daf4:	703c      	strb	r4, [r7, #0]
1005daf6:	4604      	mov	r4, r0
1005daf8:	f7fc fdfb 	bl	1005a6f2 <llc_conn_clr_tx_acl_blocked>
1005dafc:	4620      	mov	r0, r4
1005dafe:	f7fc fde7 	bl	1005a6d0 <llc_conn_clr_rx_acl_blocked>
1005db02:	2201      	movs	r2, #1
1005db04:	4630      	mov	r0, r6
1005db06:	4629      	mov	r1, r5
1005db08:	f7fe fa8a 	bl	1005c020 <LL_cpe_clr_active>
1005db0c:	e03f      	b.n	1005db8e <__arm_cp.0_10+0x66>
1005db0e:	46c0      	nop			@ (mov r8, r8)
1005db10:	100631b7 	.word	0x100631b7
1005db14:	481f      	ldr	r0, [pc, #124]	@ (1005db94 <__arm_cp.0_0>)
1005db16:	6800      	ldr	r0, [r0, #0]
1005db18:	212c      	movs	r1, #44	@ 0x2c
1005db1a:	5c40      	ldrb	r0, [r0, r1]
1005db1c:	07c0      	lsls	r0, r0, #31
1005db1e:	0ec0      	lsrs	r0, r0, #27
1005db20:	9206      	str	r2, [sp, #24]
1005db22:	d003      	beq.n	1005db2c <__arm_cp.0_10+0x4>
1005db24:	2219      	movs	r2, #25
1005db26:	e002      	b.n	1005db2e <__arm_cp.0_10+0x6>

1005db28 <__arm_cp.0_10>:
1005db28:	00001703 	.word	0x00001703
1005db2c:	220a      	movs	r2, #10
1005db2e:	9d07      	ldr	r5, [sp, #28]
1005db30:	216f      	movs	r1, #111	@ 0x6f
1005db32:	43c9      	mvns	r1, r1
1005db34:	4048      	eors	r0, r1
1005db36:	b2c1      	uxtb	r1, r0
1005db38:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1005db3a:	9007      	str	r0, [sp, #28]
1005db3c:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
1005db3e:	4817      	ldr	r0, [pc, #92]	@ (1005db9c <__arm_cp.0_2>)
1005db40:	6800      	ldr	r0, [r0, #0]
1005db42:	6900      	ldr	r0, [r0, #16]
1005db44:	2304      	movs	r3, #4
1005db46:	9109      	str	r1, [sp, #36]	@ 0x24
1005db48:	9308      	str	r3, [sp, #32]
1005db4a:	f7f7 fcc9 	bl	100554e0 <aci_event_fifo_push_header>
1005db4e:	2707      	movs	r7, #7
1005db50:	2800      	cmp	r0, #0
1005db52:	d01a      	beq.n	1005db8a <__arm_cp.0_10+0x62>
1005db54:	4606      	mov	r6, r0
1005db56:	7204      	strb	r4, [r0, #8]
1005db58:	0a20      	lsrs	r0, r4, #8
1005db5a:	7270      	strb	r0, [r6, #9]
1005db5c:	4630      	mov	r0, r6
1005db5e:	300a      	adds	r0, #10
1005db60:	3530      	adds	r5, #48	@ 0x30
1005db62:	2208      	movs	r2, #8
1005db64:	4629      	mov	r1, r5
1005db66:	f7f4 ff6f 	bl	10052a48 <BLEPLAT_MemCpy>
1005db6a:	9907      	ldr	r1, [sp, #28]
1005db6c:	0a08      	lsrs	r0, r1, #8
1005db6e:	74f0      	strb	r0, [r6, #19]
1005db70:	74b1      	strb	r1, [r6, #18]
1005db72:	2005      	movs	r0, #5
1005db74:	71f0      	strb	r0, [r6, #7]
1005db76:	200d      	movs	r0, #13
1005db78:	71b0      	strb	r0, [r6, #6]
1005db7a:	203e      	movs	r0, #62	@ 0x3e
1005db7c:	7170      	strb	r0, [r6, #5]
1005db7e:	9808      	ldr	r0, [sp, #32]
1005db80:	7130      	strb	r0, [r6, #4]
1005db82:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005db84:	4631      	mov	r1, r6
1005db86:	f7f7 fd48 	bl	1005561a <aci_event_fifo_push>
1005db8a:	9806      	ldr	r0, [sp, #24]
1005db8c:	7047      	strb	r7, [r0, #1]
1005db8e:	9f05      	ldr	r7, [sp, #20]
1005db90:	e4d7      	b.n	1005d542 <LL_encryption+0x2a>
1005db92:	46c0      	nop			@ (mov r8, r8)

1005db94 <__arm_cp.0_0>:
1005db94:	20002414 	.word	0x20002414

1005db98 <__arm_cp.0_1>:
1005db98:	20002468 	.word	0x20002468

1005db9c <__arm_cp.0_2>:
1005db9c:	20002418 	.word	0x20002418

1005dba0 <__arm_cp.0_3>:
1005dba0:	100631b7 	.word	0x100631b7

1005dba4 <__arm_cp.0_4>:
1005dba4:	10062e85 	.word	0x10062e85

1005dba8 <le4ByteToInt32>:
1005dba8:	7801      	ldrb	r1, [r0, #0]
1005dbaa:	7842      	ldrb	r2, [r0, #1]
1005dbac:	0212      	lsls	r2, r2, #8
1005dbae:	1851      	adds	r1, r2, r1
1005dbb0:	7882      	ldrb	r2, [r0, #2]
1005dbb2:	0412      	lsls	r2, r2, #16
1005dbb4:	1889      	adds	r1, r1, r2
1005dbb6:	78c0      	ldrb	r0, [r0, #3]
1005dbb8:	0600      	lsls	r0, r0, #24
1005dbba:	1808      	adds	r0, r1, r0
1005dbbc:	4770      	bx	lr
	...

1005dbc0 <hci_encryption_change_event_push>:
1005dbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005dbc2:	461e      	mov	r6, r3
1005dbc4:	4615      	mov	r5, r2
1005dbc6:	460f      	mov	r7, r1
1005dbc8:	4604      	mov	r4, r0
1005dbca:	06c0      	lsls	r0, r0, #27
1005dbcc:	d406      	bmi.n	1005dbdc <hci_encryption_change_event_push+0x1c>
1005dbce:	4813      	ldr	r0, [pc, #76]	@ (1005dc1c <__arm_cp.2_0>)
1005dbd0:	6800      	ldr	r0, [r0, #0]
1005dbd2:	2136      	movs	r1, #54	@ 0x36
1005dbd4:	5640      	ldrsb	r0, [r0, r1]
1005dbd6:	2800      	cmp	r0, #0
1005dbd8:	d404      	bmi.n	1005dbe4 <hci_encryption_change_event_push+0x24>
1005dbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005dbdc:	20bf      	movs	r0, #191	@ 0xbf
1005dbde:	4004      	ands	r4, r0
1005dbe0:	2206      	movs	r2, #6
1005dbe2:	e000      	b.n	1005dbe6 <hci_encryption_change_event_push+0x26>
1005dbe4:	2216      	movs	r2, #22
1005dbe6:	480e      	ldr	r0, [pc, #56]	@ (1005dc20 <__arm_cp.2_1>)
1005dbe8:	6800      	ldr	r0, [r0, #0]
1005dbea:	0761      	lsls	r1, r4, #29
1005dbec:	0ec9      	lsrs	r1, r1, #27
1005dbee:	1840      	adds	r0, r0, r1
1005dbf0:	6900      	ldr	r0, [r0, #16]
1005dbf2:	2302      	movs	r3, #2
1005dbf4:	4621      	mov	r1, r4
1005dbf6:	f7f7 fc73 	bl	100554e0 <aci_event_fifo_push_header>
1005dbfa:	2800      	cmp	r0, #0
1005dbfc:	d0ed      	beq.n	1005dbda <hci_encryption_change_event_push+0x1a>
1005dbfe:	4601      	mov	r1, r0
1005dc00:	7205      	strb	r5, [r0, #8]
1005dc02:	7286      	strb	r6, [r0, #10]
1005dc04:	71c7      	strb	r7, [r0, #7]
1005dc06:	2004      	movs	r0, #4
1005dc08:	7188      	strb	r0, [r1, #6]
1005dc0a:	2208      	movs	r2, #8
1005dc0c:	714a      	strb	r2, [r1, #5]
1005dc0e:	7108      	strb	r0, [r1, #4]
1005dc10:	0a28      	lsrs	r0, r5, #8
1005dc12:	7248      	strb	r0, [r1, #9]
1005dc14:	4620      	mov	r0, r4
1005dc16:	f7f7 fd00 	bl	1005561a <aci_event_fifo_push>
1005dc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005dc1c <__arm_cp.2_0>:
1005dc1c:	20002468 	.word	0x20002468

1005dc20 <__arm_cp.2_1>:
1005dc20:	20002418 	.word	0x20002418

1005dc24 <hci_encryption_key_refresh_complete_event_push>:
1005dc24:	b5b0      	push	{r4, r5, r7, lr}
1005dc26:	460d      	mov	r5, r1
1005dc28:	4604      	mov	r4, r0
1005dc2a:	06c0      	lsls	r0, r0, #27
1005dc2c:	d406      	bmi.n	1005dc3c <hci_encryption_key_refresh_complete_event_push+0x18>
1005dc2e:	4814      	ldr	r0, [pc, #80]	@ (1005dc80 <__arm_cp.3_0>)
1005dc30:	6800      	ldr	r0, [r0, #0]
1005dc32:	213b      	movs	r1, #59	@ 0x3b
1005dc34:	5640      	ldrsb	r0, [r0, r1]
1005dc36:	2800      	cmp	r0, #0
1005dc38:	d404      	bmi.n	1005dc44 <hci_encryption_key_refresh_complete_event_push+0x20>
1005dc3a:	bdb0      	pop	{r4, r5, r7, pc}
1005dc3c:	20bf      	movs	r0, #191	@ 0xbf
1005dc3e:	4004      	ands	r4, r0
1005dc40:	2207      	movs	r2, #7
1005dc42:	e000      	b.n	1005dc46 <hci_encryption_key_refresh_complete_event_push+0x22>
1005dc44:	2217      	movs	r2, #23
1005dc46:	480f      	ldr	r0, [pc, #60]	@ (1005dc84 <__arm_cp.3_1>)
1005dc48:	6800      	ldr	r0, [r0, #0]
1005dc4a:	0761      	lsls	r1, r4, #29
1005dc4c:	0ec9      	lsrs	r1, r1, #27
1005dc4e:	1840      	adds	r0, r0, r1
1005dc50:	6900      	ldr	r0, [r0, #16]
1005dc52:	2302      	movs	r3, #2
1005dc54:	4621      	mov	r1, r4
1005dc56:	f7f7 fc43 	bl	100554e0 <aci_event_fifo_push_header>
1005dc5a:	2800      	cmp	r0, #0
1005dc5c:	d0ed      	beq.n	1005dc3a <hci_encryption_key_refresh_complete_event_push+0x16>
1005dc5e:	4601      	mov	r1, r0
1005dc60:	7205      	strb	r5, [r0, #8]
1005dc62:	2000      	movs	r0, #0
1005dc64:	71c8      	strb	r0, [r1, #7]
1005dc66:	2003      	movs	r0, #3
1005dc68:	7188      	strb	r0, [r1, #6]
1005dc6a:	2030      	movs	r0, #48	@ 0x30
1005dc6c:	7148      	strb	r0, [r1, #5]
1005dc6e:	2004      	movs	r0, #4
1005dc70:	7108      	strb	r0, [r1, #4]
1005dc72:	0a28      	lsrs	r0, r5, #8
1005dc74:	7248      	strb	r0, [r1, #9]
1005dc76:	4620      	mov	r0, r4
1005dc78:	f7f7 fccf 	bl	1005561a <aci_event_fifo_push>
1005dc7c:	bdb0      	pop	{r4, r5, r7, pc}
1005dc7e:	46c0      	nop			@ (mov r8, r8)

1005dc80 <__arm_cp.3_0>:
1005dc80:	20002468 	.word	0x20002468

1005dc84 <__arm_cp.3_1>:
1005dc84:	20002418 	.word	0x20002418

1005dc88 <llc_enc_prepare_reject>:
1005dc88:	2203      	movs	r2, #3
1005dc8a:	7002      	strb	r2, [r0, #0]
1005dc8c:	2397      	movs	r3, #151	@ 0x97
1005dc8e:	005b      	lsls	r3, r3, #1
1005dc90:	5cc9      	ldrb	r1, [r1, r3]
1005dc92:	0749      	lsls	r1, r1, #29
1005dc94:	d403      	bmi.n	1005dc9e <llc_enc_prepare_reject+0x16>
1005dc96:	2306      	movs	r3, #6
1005dc98:	210d      	movs	r1, #13
1005dc9a:	2202      	movs	r2, #2
1005dc9c:	e003      	b.n	1005dca6 <llc_enc_prepare_reject+0x1e>
1005dc9e:	2106      	movs	r1, #6
1005dca0:	7101      	strb	r1, [r0, #4]
1005dca2:	2111      	movs	r1, #17
1005dca4:	4613      	mov	r3, r2
1005dca6:	70c3      	strb	r3, [r0, #3]
1005dca8:	7081      	strb	r1, [r0, #2]
1005dcaa:	7042      	strb	r2, [r0, #1]
1005dcac:	4770      	bx	lr

1005dcae <LL_Get_LTK>:
1005dcae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005dcb0:	4614      	mov	r4, r2
1005dcb2:	4606      	mov	r6, r0
1005dcb4:	4608      	mov	r0, r1
1005dcb6:	f7fc fb47 	bl	1005a348 <llc_conn_get_cntxt_per_p_from_handle>
1005dcba:	2130      	movs	r1, #48	@ 0x30
1005dcbc:	5641      	ldrsb	r1, [r0, r1]
1005dcbe:	2900      	cmp	r1, #0
1005dcc0:	d405      	bmi.n	1005dcce <LL_Get_LTK+0x20>
1005dcc2:	302c      	adds	r0, #44	@ 0x2c
1005dcc4:	7800      	ldrb	r0, [r0, #0]
1005dcc6:	2802      	cmp	r0, #2
1005dcc8:	d103      	bne.n	1005dcd2 <LL_Get_LTK+0x24>
1005dcca:	2512      	movs	r5, #18
1005dccc:	e018      	b.n	1005dd00 <LL_Get_LTK+0x52>
1005dcce:	2502      	movs	r5, #2
1005dcd0:	e016      	b.n	1005dd00 <LL_Get_LTK+0x52>
1005dcd2:	b2cf      	uxtb	r7, r1
1005dcd4:	2500      	movs	r5, #0
1005dcd6:	4638      	mov	r0, r7
1005dcd8:	4629      	mov	r1, r5
1005dcda:	f7fe f9d3 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005dcde:	4638      	mov	r0, r7
1005dce0:	4629      	mov	r1, r5
1005dce2:	f7fe f9dc 	bl	1005c09e <LL_cpe_get_cntxt>
1005dce6:	4601      	mov	r1, r0
1005dce8:	302b      	adds	r0, #43	@ 0x2b
1005dcea:	2e00      	cmp	r6, #0
1005dcec:	d001      	beq.n	1005dcf2 <LL_Get_LTK+0x44>
1005dcee:	7005      	strb	r5, [r0, #0]
1005dcf0:	e006      	b.n	1005dd00 <LL_Get_LTK+0x52>
1005dcf2:	2201      	movs	r2, #1
1005dcf4:	7002      	strb	r2, [r0, #0]
1005dcf6:	3110      	adds	r1, #16
1005dcf8:	2210      	movs	r2, #16
1005dcfa:	4620      	mov	r0, r4
1005dcfc:	f005 f8c2 	bl	10062e84 <char_copy>
1005dd00:	4628      	mov	r0, r5
1005dd02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005dd04 <LL_feature_exchange>:
1005dd04:	b5f0      	push	{r4, r5, r6, r7, lr}
1005dd06:	b085      	sub	sp, #20
1005dd08:	461c      	mov	r4, r3
1005dd0a:	4615      	mov	r5, r2
1005dd0c:	460e      	mov	r6, r1
1005dd0e:	4607      	mov	r7, r0
1005dd10:	f7fe f9c5 	bl	1005c09e <LL_cpe_get_cntxt>
1005dd14:	9003      	str	r0, [sp, #12]
1005dd16:	9702      	str	r7, [sp, #8]
1005dd18:	4638      	mov	r0, r7
1005dd1a:	f7fc fb07 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005dd1e:	4607      	mov	r7, r0
1005dd20:	20ff      	movs	r0, #255	@ 0xff
1005dd22:	2d06      	cmp	r5, #6
1005dd24:	d900      	bls.n	1005dd28 <LL_feature_exchange+0x24>
1005dd26:	e099      	b.n	1005de5c <LL_feature_exchange+0x158>
1005dd28:	9604      	str	r6, [sp, #16]
1005dd2a:	2197      	movs	r1, #151	@ 0x97
1005dd2c:	0049      	lsls	r1, r1, #1
1005dd2e:	187b      	adds	r3, r7, r1
1005dd30:	463e      	mov	r6, r7
1005dd32:	362c      	adds	r6, #44	@ 0x2c
1005dd34:	447d      	add	r5, pc
1005dd36:	792d      	ldrb	r5, [r5, #4]
1005dd38:	006d      	lsls	r5, r5, #1
1005dd3a:	44af      	add	pc, r5
1005dd3c:	298f0803 	.word	0x298f0803
1005dd40:	004a8f8f 	.word	0x004a8f8f
1005dd44:	9904      	ldr	r1, [sp, #16]
1005dd46:	2901      	cmp	r1, #1
1005dd48:	d160      	bne.n	1005de0c <LL_feature_exchange+0x108>
1005dd4a:	2009      	movs	r0, #9
1005dd4c:	e086      	b.n	1005de5c <LL_feature_exchange+0x158>
1005dd4e:	78a1      	ldrb	r1, [r4, #2]
1005dd50:	290e      	cmp	r1, #14
1005dd52:	d002      	beq.n	1005dd5a <LL_feature_exchange+0x56>
1005dd54:	2908      	cmp	r1, #8
1005dd56:	d000      	beq.n	1005dd5a <LL_feature_exchange+0x56>
1005dd58:	e080      	b.n	1005de5c <LL_feature_exchange+0x158>
1005dd5a:	1ce4      	adds	r4, r4, #3
1005dd5c:	9903      	ldr	r1, [sp, #12]
1005dd5e:	3108      	adds	r1, #8
1005dd60:	4605      	mov	r5, r0
1005dd62:	2208      	movs	r2, #8
1005dd64:	4620      	mov	r0, r4
1005dd66:	461e      	mov	r6, r3
1005dd68:	f005 f88c 	bl	10062e84 <char_copy>
1005dd6c:	2205      	movs	r2, #5
1005dd6e:	4630      	mov	r0, r6
1005dd70:	4621      	mov	r1, r4
1005dd72:	f7f4 fe69 	bl	10052a48 <BLEPLAT_MemCpy>
1005dd76:	9e02      	ldr	r6, [sp, #8]
1005dd78:	4630      	mov	r0, r6
1005dd7a:	9c04      	ldr	r4, [sp, #16]
1005dd7c:	4621      	mov	r1, r4
1005dd7e:	f7fe f981 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005dd82:	2203      	movs	r2, #3
1005dd84:	2300      	movs	r3, #0
1005dd86:	4630      	mov	r0, r6
1005dd88:	4621      	mov	r1, r4
1005dd8a:	f7fe f932 	bl	1005bff2 <LL_cpe_set_active>
1005dd8e:	e01e      	b.n	1005ddce <LL_feature_exchange+0xca>
1005dd90:	78a1      	ldrb	r1, [r4, #2]
1005dd92:	2907      	cmp	r1, #7
1005dd94:	d046      	beq.n	1005de24 <LL_feature_exchange+0x120>
1005dd96:	2909      	cmp	r1, #9
1005dd98:	d160      	bne.n	1005de5c <LL_feature_exchange+0x158>
1005dd9a:	4605      	mov	r5, r0
1005dd9c:	1ce4      	adds	r4, r4, #3
1005dd9e:	2205      	movs	r2, #5
1005dda0:	4618      	mov	r0, r3
1005dda2:	4621      	mov	r1, r4
1005dda4:	f7f4 fe50 	bl	10052a48 <BLEPLAT_MemCpy>
1005dda8:	9803      	ldr	r0, [sp, #12]
1005ddaa:	7c40      	ldrb	r0, [r0, #17]
1005ddac:	2800      	cmp	r0, #0
1005ddae:	d005      	beq.n	1005ddbc <LL_feature_exchange+0xb8>
1005ddb0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005ddb2:	2080      	movs	r0, #128	@ 0x80
1005ddb4:	2100      	movs	r1, #0
1005ddb6:	4623      	mov	r3, r4
1005ddb8:	f006 fa74 	bl	100642a4 <hci_le_read_remote_features_complete_event_push_noinline>
1005ddbc:	6e30      	ldr	r0, [r6, #96]	@ 0x60
1005ddbe:	2110      	movs	r1, #16
1005ddc0:	4301      	orrs	r1, r0
1005ddc2:	6631      	str	r1, [r6, #96]	@ 0x60
1005ddc4:	2203      	movs	r2, #3
1005ddc6:	9802      	ldr	r0, [sp, #8]
1005ddc8:	9904      	ldr	r1, [sp, #16]
1005ddca:	f7fe f929 	bl	1005c020 <LL_cpe_clr_active>
1005ddce:	4628      	mov	r0, r5
1005ddd0:	e044      	b.n	1005de5c <LL_feature_exchange+0x158>
1005ddd2:	9002      	str	r0, [sp, #8]
1005ddd4:	2009      	movs	r0, #9
1005ddd6:	9001      	str	r0, [sp, #4]
1005ddd8:	7060      	strb	r0, [r4, #1]
1005ddda:	2003      	movs	r0, #3
1005dddc:	7020      	strb	r0, [r4, #0]
1005ddde:	1ce7      	adds	r7, r4, #3
1005dde0:	4638      	mov	r0, r7
1005dde2:	f000 f83d 	bl	1005de60 <LL_Get_Supported_Features>
1005dde6:	79a0      	ldrb	r0, [r4, #6]
1005dde8:	21f7      	movs	r1, #247	@ 0xf7
1005ddea:	4001      	ands	r1, r0
1005ddec:	71a1      	strb	r1, [r4, #6]
1005ddee:	2508      	movs	r5, #8
1005ddf0:	4638      	mov	r0, r7
1005ddf2:	9f03      	ldr	r7, [sp, #12]
1005ddf4:	4639      	mov	r1, r7
1005ddf6:	462a      	mov	r2, r5
1005ddf8:	f005 f844 	bl	10062e84 <char_copy>
1005ddfc:	9804      	ldr	r0, [sp, #16]
1005ddfe:	2801      	cmp	r0, #1
1005de00:	d108      	bne.n	1005de14 <LL_feature_exchange+0x110>
1005de02:	7830      	ldrb	r0, [r6, #0]
1005de04:	2802      	cmp	r0, #2
1005de06:	d126      	bne.n	1005de56 <LL_feature_exchange+0x152>
1005de08:	70a5      	strb	r5, [r4, #2]
1005de0a:	e026      	b.n	1005de5a <LL_feature_exchange+0x156>
1005de0c:	4604      	mov	r4, r0
1005de0e:	2203      	movs	r2, #3
1005de10:	9802      	ldr	r0, [sp, #8]
1005de12:	e01c      	b.n	1005de4e <LL_feature_exchange+0x14a>
1005de14:	9801      	ldr	r0, [sp, #4]
1005de16:	70a0      	strb	r0, [r4, #2]
1005de18:	78e0      	ldrb	r0, [r4, #3]
1005de1a:	7a39      	ldrb	r1, [r7, #8]
1005de1c:	4001      	ands	r1, r0
1005de1e:	70e1      	strb	r1, [r4, #3]
1005de20:	7439      	strb	r1, [r7, #16]
1005de22:	e01a      	b.n	1005de5a <LL_feature_exchange+0x156>
1005de24:	7831      	ldrb	r1, [r6, #0]
1005de26:	2903      	cmp	r1, #3
1005de28:	d118      	bne.n	1005de5c <LL_feature_exchange+0x158>
1005de2a:	4604      	mov	r4, r0
1005de2c:	7818      	ldrb	r0, [r3, #0]
1005de2e:	21f7      	movs	r1, #247	@ 0xf7
1005de30:	4001      	ands	r1, r0
1005de32:	7019      	strb	r1, [r3, #0]
1005de34:	9b03      	ldr	r3, [sp, #12]
1005de36:	7c58      	ldrb	r0, [r3, #17]
1005de38:	2800      	cmp	r0, #0
1005de3a:	d005      	beq.n	1005de48 <LL_feature_exchange+0x144>
1005de3c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005de3e:	3308      	adds	r3, #8
1005de40:	2080      	movs	r0, #128	@ 0x80
1005de42:	211a      	movs	r1, #26
1005de44:	f006 fa2e 	bl	100642a4 <hci_le_read_remote_features_complete_event_push_noinline>
1005de48:	2203      	movs	r2, #3
1005de4a:	9802      	ldr	r0, [sp, #8]
1005de4c:	9904      	ldr	r1, [sp, #16]
1005de4e:	f7fe f8e7 	bl	1005c020 <LL_cpe_clr_active>
1005de52:	4620      	mov	r0, r4
1005de54:	e002      	b.n	1005de5c <LL_feature_exchange+0x158>
1005de56:	200e      	movs	r0, #14
1005de58:	70a0      	strb	r0, [r4, #2]
1005de5a:	9802      	ldr	r0, [sp, #8]
1005de5c:	b005      	add	sp, #20
1005de5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005de60 <LL_Get_Supported_Features>:
1005de60:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005de62:	9000      	str	r0, [sp, #0]
1005de64:	f7fb fd8c 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1005de68:	4605      	mov	r5, r0
1005de6a:	f7fd ffe0 	bl	1005be2e <llc_priv_controller_privacy_csr_ucfg_weak>
1005de6e:	b2c0      	uxtb	r0, r0
1005de70:	21c0      	movs	r1, #192	@ 0xc0
1005de72:	4341      	muls	r1, r0
1005de74:	0628      	lsls	r0, r5, #24
1005de76:	0cc5      	lsrs	r5, r0, #19
1005de78:	430d      	orrs	r5, r1
1005de7a:	2009      	movs	r0, #9
1005de7c:	0206      	lsls	r6, r0, #8
1005de7e:	f7f1 f879 	bl	1004ef74 <phy_upd_csr_ucfg>
1005de82:	b2c7      	uxtb	r7, r0
1005de84:	4377      	muls	r7, r6
1005de86:	432f      	orrs	r7, r5
1005de88:	f002 f906 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
1005de8c:	0305      	lsls	r5, r0, #12
1005de8e:	433d      	orrs	r5, r7
1005de90:	4e2c      	ldr	r6, [pc, #176]	@ (1005df44 <__arm_cp.1_0>)
1005de92:	47b0      	blx	r6
1005de94:	b2c0      	uxtb	r0, r0
1005de96:	4f2c      	ldr	r7, [pc, #176]	@ (1005df48 <__arm_cp.1_1>)
1005de98:	4347      	muls	r7, r0
1005de9a:	432f      	orrs	r7, r5
1005de9c:	200d      	movs	r0, #13
1005de9e:	0685      	lsls	r5, r0, #26
1005dea0:	f7fd ffb2 	bl	1005be08 <cis_csr_ucfg_weak>
1005dea4:	b2c4      	uxtb	r4, r0
1005dea6:	436c      	muls	r4, r5
1005dea8:	433c      	orrs	r4, r7
1005deaa:	2073      	movs	r0, #115	@ 0x73
1005deac:	0445      	lsls	r5, r0, #17
1005deae:	f7fb fd0b 	bl	100598c8 <cte_csr_ucfg_weak>
1005deb2:	b2c7      	uxtb	r7, r0
1005deb4:	436f      	muls	r7, r5
1005deb6:	4327      	orrs	r7, r4
1005deb8:	f7fb fd06 	bl	100598c8 <cte_csr_ucfg_weak>
1005debc:	4605      	mov	r5, r0
1005debe:	47b0      	blx	r6
1005dec0:	4028      	ands	r0, r5
1005dec2:	b2c0      	uxtb	r0, r0
1005dec4:	2503      	movs	r5, #3
1005dec6:	04ec      	lsls	r4, r5, #19
1005dec8:	4344      	muls	r4, r0
1005deca:	433c      	orrs	r4, r7
1005decc:	f7fd ff9a 	bl	1005be04 <bis_csr_ucfg_weak>
1005ded0:	0780      	lsls	r0, r0, #30
1005ded2:	4247      	negs	r7, r0
1005ded4:	4327      	orrs	r7, r4
1005ded6:	f002 f8cd 	bl	10060074 <llc_get_channel_sel_algo2_enabled>
1005deda:	0380      	lsls	r0, r0, #14
1005dedc:	4338      	orrs	r0, r7
1005dede:	491b      	ldr	r1, [pc, #108]	@ (1005df4c <__arm_cp.1_2>)
1005dee0:	4301      	orrs	r1, r0
1005dee2:	9101      	str	r1, [sp, #4]
1005dee4:	f7fb fd4e 	bl	10059984 <pcl_csr_ucfg_weak>
1005dee8:	b2c0      	uxtb	r0, r0
1005deea:	240e      	movs	r4, #14
1005deec:	4344      	muls	r4, r0
1005deee:	f7fb fbf6 	bl	100596de <chc_csr_ucfg_weak>
1005def2:	0600      	lsls	r0, r0, #24
1005def4:	0c47      	lsrs	r7, r0, #17
1005def6:	4327      	orrs	r7, r4
1005def8:	47b0      	blx	r6
1005defa:	21f9      	movs	r1, #249	@ 0xf9
1005defc:	0109      	lsls	r1, r1, #4
1005defe:	0104      	lsls	r4, r0, #4
1005df00:	400c      	ands	r4, r1
1005df02:	433c      	orrs	r4, r7
1005df04:	022e      	lsls	r6, r5, #8
1005df06:	f002 f8c7 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
1005df0a:	4605      	mov	r5, r0
1005df0c:	4375      	muls	r5, r6
1005df0e:	4325      	orrs	r5, r4
1005df10:	2001      	movs	r0, #1
1005df12:	02c4      	lsls	r4, r0, #11
1005df14:	f7fb fd3a 	bl	1005998c <scan_csr_ucfg_weak>
1005df18:	0600      	lsls	r0, r0, #24
1005df1a:	0b00      	lsrs	r0, r0, #12
1005df1c:	1904      	adds	r4, r0, r4
1005df1e:	f7fd ff7f 	bl	1005be20 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005df22:	b2c0      	uxtb	r0, r0
1005df24:	4360      	muls	r0, r4
1005df26:	4328      	orrs	r0, r5
1005df28:	2161      	movs	r1, #97	@ 0x61
1005df2a:	4301      	orrs	r1, r0
1005df2c:	4808      	ldr	r0, [pc, #32]	@ (1005df50 <__arm_cp.1_3>)
1005df2e:	6800      	ldr	r0, [r0, #0]
1005df30:	6a00      	ldr	r0, [r0, #32]
1005df32:	4008      	ands	r0, r1
1005df34:	9002      	str	r0, [sp, #8]
1005df36:	a901      	add	r1, sp, #4
1005df38:	2208      	movs	r2, #8
1005df3a:	9800      	ldr	r0, [sp, #0]
1005df3c:	f7f4 fd84 	bl	10052a48 <BLEPLAT_MemCpy>
1005df40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005df42:	46c0      	nop			@ (mov r8, r8)

1005df44 <__arm_cp.1_0>:
1005df44:	1005be1d 	.word	0x1005be1d

1005df48 <__arm_cp.1_1>:
1005df48:	03002000 	.word	0x03002000

1005df4c <__arm_cp.1_2>:
1005df4c:	0800001d 	.word	0x0800001d

1005df50 <__arm_cp.1_3>:
1005df50:	20002468 	.word	0x20002468

1005df54 <LL_Read_Remote_Used_Features>:
1005df54:	b570      	push	{r4, r5, r6, lr}
1005df56:	4604      	mov	r4, r0
1005df58:	4608      	mov	r0, r1
1005df5a:	f7fc f9f5 	bl	1005a348 <llc_conn_get_cntxt_per_p_from_handle>
1005df5e:	2800      	cmp	r0, #0
1005df60:	d01c      	beq.n	1005df9c <LL_Read_Remote_Used_Features+0x48>
1005df62:	4606      	mov	r6, r0
1005df64:	362c      	adds	r6, #44	@ 0x2c
1005df66:	7831      	ldrb	r1, [r6, #0]
1005df68:	2903      	cmp	r1, #3
1005df6a:	d107      	bne.n	1005df7c <LL_Read_Remote_Used_Features+0x28>
1005df6c:	2197      	movs	r1, #151	@ 0x97
1005df6e:	0049      	lsls	r1, r1, #1
1005df70:	1840      	adds	r0, r0, r1
1005df72:	7800      	ldrb	r0, [r0, #0]
1005df74:	0700      	lsls	r0, r0, #28
1005df76:	d401      	bmi.n	1005df7c <LL_Read_Remote_Used_Features+0x28>
1005df78:	241a      	movs	r4, #26
1005df7a:	e024      	b.n	1005dfc6 <LL_Read_Remote_Used_Features+0x72>
1005df7c:	7930      	ldrb	r0, [r6, #4]
1005df7e:	2101      	movs	r1, #1
1005df80:	f7fe f829 	bl	1005bfd6 <LL_cpe_get_active_status>
1005df84:	2800      	cmp	r0, #0
1005df86:	d00d      	beq.n	1005dfa4 <LL_Read_Remote_Used_Features+0x50>
1005df88:	2c00      	cmp	r4, #0
1005df8a:	d109      	bne.n	1005dfa0 <LL_Read_Remote_Used_Features+0x4c>
1005df8c:	7930      	ldrb	r0, [r6, #4]
1005df8e:	2101      	movs	r1, #1
1005df90:	f7fe fe4a 	bl	1005cc28 <LL_cpe_conn_get_proc_id_from_sm>
1005df94:	2803      	cmp	r0, #3
1005df96:	d103      	bne.n	1005dfa0 <LL_Read_Remote_Used_Features+0x4c>
1005df98:	2400      	movs	r4, #0
1005df9a:	e014      	b.n	1005dfc6 <LL_Read_Remote_Used_Features+0x72>
1005df9c:	2402      	movs	r4, #2
1005df9e:	e012      	b.n	1005dfc6 <LL_Read_Remote_Used_Features+0x72>
1005dfa0:	243a      	movs	r4, #58	@ 0x3a
1005dfa2:	e010      	b.n	1005dfc6 <LL_Read_Remote_Used_Features+0x72>
1005dfa4:	7930      	ldrb	r0, [r6, #4]
1005dfa6:	2501      	movs	r5, #1
1005dfa8:	4629      	mov	r1, r5
1005dfaa:	f7fe f878 	bl	1005c09e <LL_cpe_get_cntxt>
1005dfae:	7444      	strb	r4, [r0, #17]
1005dfb0:	7930      	ldrb	r0, [r6, #4]
1005dfb2:	4629      	mov	r1, r5
1005dfb4:	f7fe f866 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005dfb8:	7930      	ldrb	r0, [r6, #4]
1005dfba:	2203      	movs	r2, #3
1005dfbc:	2400      	movs	r4, #0
1005dfbe:	4629      	mov	r1, r5
1005dfc0:	4623      	mov	r3, r4
1005dfc2:	f7fe f816 	bl	1005bff2 <LL_cpe_set_active>
1005dfc6:	4620      	mov	r0, r4
1005dfc8:	bd70      	pop	{r4, r5, r6, pc}

1005dfca <LLC_update_le_ping_params>:
1005dfca:	b5b0      	push	{r4, r5, r7, lr}
1005dfcc:	4615      	mov	r5, r2
1005dfce:	460c      	mov	r4, r1
1005dfd0:	f7fc f9ac 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005dfd4:	2185      	movs	r1, #133	@ 0x85
1005dfd6:	0049      	lsls	r1, r1, #1
1005dfd8:	5a43      	ldrh	r3, [r0, r1]
1005dfda:	2d00      	cmp	r5, #0
1005dfdc:	461a      	mov	r2, r3
1005dfde:	d000      	beq.n	1005dfe2 <LLC_update_le_ping_params+0x18>
1005dfe0:	4622      	mov	r2, r4
1005dfe2:	1841      	adds	r1, r0, r1
1005dfe4:	8b0c      	ldrh	r4, [r1, #24]
1005dfe6:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
1005dfe8:	4365      	muls	r5, r4
1005dfea:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005dfec:	300a      	adds	r0, #10
1005dfee:	4368      	muls	r0, r5
1005dff0:	0b00      	lsrs	r0, r0, #12
1005dff2:	b284      	uxth	r4, r0
1005dff4:	1d64      	adds	r4, r4, #5
1005dff6:	4294      	cmp	r4, r2
1005dff8:	d300      	bcc.n	1005dffc <LLC_update_le_ping_params+0x32>
1005dffa:	4622      	mov	r2, r4
1005dffc:	b294      	uxth	r4, r2
1005dffe:	42a3      	cmp	r3, r4
1005e000:	d00b      	beq.n	1005e01a <LLC_update_le_ping_params+0x50>
1005e002:	8048      	strh	r0, [r1, #2]
1005e004:	800a      	strh	r2, [r1, #0]
1005e006:	7908      	ldrb	r0, [r1, #4]
1005e008:	2801      	cmp	r0, #1
1005e00a:	d006      	beq.n	1005e01a <LLC_update_le_ping_params+0x50>
1005e00c:	2002      	movs	r0, #2
1005e00e:	7108      	strb	r0, [r1, #4]
1005e010:	2012      	movs	r0, #18
1005e012:	f004 fdaf 	bl	10062b74 <tsk_notify_idx>
1005e016:	f7f3 ff30 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005e01a:	bdb0      	pop	{r4, r5, r7, pc}

1005e01c <LLC_init_le_ping_params>:
1005e01c:	b5b0      	push	{r4, r5, r7, lr}
1005e01e:	2185      	movs	r1, #133	@ 0x85
1005e020:	004a      	lsls	r2, r1, #1
1005e022:	1881      	adds	r1, r0, r2
1005e024:	8b0b      	ldrh	r3, [r1, #24]
1005e026:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
1005e028:	435c      	muls	r4, r3
1005e02a:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
1005e02c:	330a      	adds	r3, #10
1005e02e:	4363      	muls	r3, r4
1005e030:	0b1b      	lsrs	r3, r3, #12
1005e032:	b29c      	uxth	r4, r3
1005e034:	4d07      	ldr	r5, [pc, #28]	@ (1005e054 <__arm_cp.3_0>)
1005e036:	42ac      	cmp	r4, r5
1005e038:	d800      	bhi.n	1005e03c <LLC_init_le_ping_params+0x20>
1005e03a:	462c      	mov	r4, r5
1005e03c:	1d64      	adds	r4, r4, #5
1005e03e:	5284      	strh	r4, [r0, r2]
1005e040:	2001      	movs	r0, #1
1005e042:	7108      	strb	r0, [r1, #4]
1005e044:	804b      	strh	r3, [r1, #2]
1005e046:	2012      	movs	r0, #18
1005e048:	f004 fd94 	bl	10062b74 <tsk_notify_idx>
1005e04c:	f7f3 ff15 	bl	10051e7a <BLE_STACK_ProcessRequest>
1005e050:	bdb0      	pop	{r4, r5, r7, pc}
1005e052:	46c0      	nop			@ (mov r8, r8)

1005e054 <__arm_cp.3_0>:
1005e054:	00000bb3 	.word	0x00000bb3

1005e058 <LLC_authenticated_payload_timeout_processing>:
1005e058:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e05a:	b089      	sub	sp, #36	@ 0x24
1005e05c:	2400      	movs	r4, #0
1005e05e:	4620      	mov	r0, r4
1005e060:	f7fc f964 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e064:	9000      	str	r0, [sp, #0]
1005e066:	2001      	movs	r0, #1
1005e068:	9008      	str	r0, [sp, #32]
1005e06a:	4843      	ldr	r0, [pc, #268]	@ (1005e178 <__arm_cp.5_0>)
1005e06c:	6800      	ldr	r0, [r0, #0]
1005e06e:	2134      	movs	r1, #52	@ 0x34
1005e070:	5c40      	ldrb	r0, [r0, r1]
1005e072:	4284      	cmp	r4, r0
1005e074:	d300      	bcc.n	1005e078 <LLC_authenticated_payload_timeout_processing+0x20>
1005e076:	e07d      	b.n	1005e174 <LLC_authenticated_payload_timeout_processing+0x11c>
1005e078:	204d      	movs	r0, #77	@ 0x4d
1005e07a:	0080      	lsls	r0, r0, #2
1005e07c:	9405      	str	r4, [sp, #20]
1005e07e:	4360      	muls	r0, r4
1005e080:	9900      	ldr	r1, [sp, #0]
1005e082:	180c      	adds	r4, r1, r0
1005e084:	202c      	movs	r0, #44	@ 0x2c
1005e086:	5c20      	ldrb	r0, [r4, r0]
1005e088:	21fe      	movs	r1, #254	@ 0xfe
1005e08a:	4001      	ands	r1, r0
1005e08c:	2902      	cmp	r1, #2
1005e08e:	d16e      	bne.n	1005e16e <LLC_authenticated_payload_timeout_processing+0x116>
1005e090:	2101      	movs	r1, #1
1005e092:	9e00      	ldr	r6, [sp, #0]
1005e094:	4630      	mov	r0, r6
1005e096:	9107      	str	r1, [sp, #28]
1005e098:	f7fc fbe4 	bl	1005a864 <llc_conn_get_enc_on>
1005e09c:	4605      	mov	r5, r0
1005e09e:	2100      	movs	r1, #0
1005e0a0:	4630      	mov	r0, r6
1005e0a2:	9101      	str	r1, [sp, #4]
1005e0a4:	f7fc fbde 	bl	1005a864 <llc_conn_get_enc_on>
1005e0a8:	1e41      	subs	r1, r0, #1
1005e0aa:	4188      	sbcs	r0, r1
1005e0ac:	2d00      	cmp	r5, #0
1005e0ae:	9908      	ldr	r1, [sp, #32]
1005e0b0:	9104      	str	r1, [sp, #16]
1005e0b2:	d100      	bne.n	1005e0b6 <LLC_authenticated_payload_timeout_processing+0x5e>
1005e0b4:	9004      	str	r0, [sp, #16]
1005e0b6:	2043      	movs	r0, #67	@ 0x43
1005e0b8:	0080      	lsls	r0, r0, #2
1005e0ba:	1820      	adds	r0, r4, r0
1005e0bc:	9003      	str	r0, [sp, #12]
1005e0be:	2085      	movs	r0, #133	@ 0x85
1005e0c0:	0040      	lsls	r0, r0, #1
1005e0c2:	1820      	adds	r0, r4, r0
1005e0c4:	9002      	str	r0, [sp, #8]
1005e0c6:	2087      	movs	r0, #135	@ 0x87
1005e0c8:	0040      	lsls	r0, r0, #1
1005e0ca:	1823      	adds	r3, r4, r0
1005e0cc:	9f08      	ldr	r7, [sp, #32]
1005e0ce:	9306      	str	r3, [sp, #24]
1005e0d0:	781c      	ldrb	r4, [r3, #0]
1005e0d2:	26f0      	movs	r6, #240	@ 0xf0
1005e0d4:	4026      	ands	r6, r4
1005e0d6:	250f      	movs	r5, #15
1005e0d8:	4025      	ands	r5, r4
1005e0da:	2d03      	cmp	r5, #3
1005e0dc:	d01f      	beq.n	1005e11e <LLC_authenticated_payload_timeout_processing+0xc6>
1005e0de:	2d02      	cmp	r5, #2
1005e0e0:	d00b      	beq.n	1005e0fa <LLC_authenticated_payload_timeout_processing+0xa2>
1005e0e2:	2d01      	cmp	r5, #1
1005e0e4:	d12b      	bne.n	1005e13e <LLC_authenticated_payload_timeout_processing+0xe6>
1005e0e6:	9804      	ldr	r0, [sp, #16]
1005e0e8:	2800      	cmp	r0, #0
1005e0ea:	d02c      	beq.n	1005e146 <LLC_authenticated_payload_timeout_processing+0xee>
1005e0ec:	2012      	movs	r0, #18
1005e0ee:	2101      	movs	r1, #1
1005e0f0:	f004 fd52 	bl	10062b98 <tsk_wait_resource_idx>
1005e0f4:	9b06      	ldr	r3, [sp, #24]
1005e0f6:	2502      	movs	r5, #2
1005e0f8:	e025      	b.n	1005e146 <LLC_authenticated_payload_timeout_processing+0xee>
1005e0fa:	9803      	ldr	r0, [sp, #12]
1005e0fc:	8800      	ldrh	r0, [r0, #0]
1005e0fe:	9902      	ldr	r1, [sp, #8]
1005e100:	8809      	ldrh	r1, [r1, #0]
1005e102:	1a08      	subs	r0, r1, r0
1005e104:	230a      	movs	r3, #10
1005e106:	4343      	muls	r3, r0
1005e108:	481c      	ldr	r0, [pc, #112]	@ (1005e17c <__arm_cp.5_1>)
1005e10a:	6800      	ldr	r0, [r0, #0]
1005e10c:	9905      	ldr	r1, [sp, #20]
1005e10e:	b2c9      	uxtb	r1, r1
1005e110:	30b0      	adds	r0, #176	@ 0xb0
1005e112:	2201      	movs	r2, #1
1005e114:	f004 fdd7 	bl	10062cc6 <CST_start>
1005e118:	9b06      	ldr	r3, [sp, #24]
1005e11a:	2503      	movs	r5, #3
1005e11c:	e013      	b.n	1005e146 <LLC_authenticated_payload_timeout_processing+0xee>
1005e11e:	06a0      	lsls	r0, r4, #26
1005e120:	d511      	bpl.n	1005e146 <LLC_authenticated_payload_timeout_processing+0xee>
1005e122:	9804      	ldr	r0, [sp, #16]
1005e124:	2800      	cmp	r0, #0
1005e126:	d00c      	beq.n	1005e142 <LLC_authenticated_payload_timeout_processing+0xea>
1005e128:	9805      	ldr	r0, [sp, #20]
1005e12a:	b2c0      	uxtb	r0, r0
1005e12c:	f000 f828 	bl	1005e180 <LLC_authenticated_payload_timeout_start_le_ping>
1005e130:	2800      	cmp	r0, #0
1005e132:	d001      	beq.n	1005e138 <LLC_authenticated_payload_timeout_processing+0xe0>
1005e134:	26d0      	movs	r6, #208	@ 0xd0
1005e136:	4026      	ands	r6, r4
1005e138:	9808      	ldr	r0, [sp, #32]
1005e13a:	9b06      	ldr	r3, [sp, #24]
1005e13c:	e004      	b.n	1005e148 <LLC_authenticated_payload_timeout_processing+0xf0>
1005e13e:	9801      	ldr	r0, [sp, #4]
1005e140:	e002      	b.n	1005e148 <LLC_authenticated_payload_timeout_processing+0xf0>
1005e142:	26d0      	movs	r6, #208	@ 0xd0
1005e144:	4026      	ands	r6, r4
1005e146:	9808      	ldr	r0, [sp, #32]
1005e148:	f3ef 8110 	mrs	r1, PRIMASK
1005e14c:	b672      	cpsid	i
1005e14e:	7819      	ldrb	r1, [r3, #0]
1005e150:	428c      	cmp	r4, r1
1005e152:	d103      	bne.n	1005e15c <LLC_authenticated_payload_timeout_processing+0x104>
1005e154:	432e      	orrs	r6, r5
1005e156:	701e      	strb	r6, [r3, #0]
1005e158:	2100      	movs	r1, #0
1005e15a:	e002      	b.n	1005e162 <LLC_authenticated_payload_timeout_processing+0x10a>
1005e15c:	9907      	ldr	r1, [sp, #28]
1005e15e:	400f      	ands	r7, r1
1005e160:	4639      	mov	r1, r7
1005e162:	1e4a      	subs	r2, r1, #1
1005e164:	4191      	sbcs	r1, r2
1005e166:	b662      	cpsie	i
1005e168:	2700      	movs	r7, #0
1005e16a:	4208      	tst	r0, r1
1005e16c:	d1b0      	bne.n	1005e0d0 <LLC_authenticated_payload_timeout_processing+0x78>
1005e16e:	9c05      	ldr	r4, [sp, #20]
1005e170:	1c64      	adds	r4, r4, #1
1005e172:	e77a      	b.n	1005e06a <LLC_authenticated_payload_timeout_processing+0x12>
1005e174:	b009      	add	sp, #36	@ 0x24
1005e176:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e178 <__arm_cp.5_0>:
1005e178:	20002414 	.word	0x20002414

1005e17c <__arm_cp.5_1>:
1005e17c:	20002468 	.word	0x20002468

1005e180 <LLC_authenticated_payload_timeout_start_le_ping>:
1005e180:	b570      	push	{r4, r5, r6, lr}
1005e182:	4605      	mov	r5, r0
1005e184:	2101      	movs	r1, #1
1005e186:	f7fd ff26 	bl	1005bfd6 <LL_cpe_get_active_status>
1005e18a:	4604      	mov	r4, r0
1005e18c:	2801      	cmp	r0, #1
1005e18e:	d104      	bne.n	1005e19a <LLC_authenticated_payload_timeout_start_le_ping+0x1a>
1005e190:	2012      	movs	r0, #18
1005e192:	2101      	movs	r1, #1
1005e194:	f004 fd00 	bl	10062b98 <tsk_wait_resource_idx>
1005e198:	e00a      	b.n	1005e1b0 <LLC_authenticated_payload_timeout_start_le_ping+0x30>
1005e19a:	2601      	movs	r6, #1
1005e19c:	4628      	mov	r0, r5
1005e19e:	4631      	mov	r1, r6
1005e1a0:	f7fd ff70 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005e1a4:	2208      	movs	r2, #8
1005e1a6:	2300      	movs	r3, #0
1005e1a8:	4628      	mov	r0, r5
1005e1aa:	4631      	mov	r1, r6
1005e1ac:	f7fd ff21 	bl	1005bff2 <LL_cpe_set_active>
1005e1b0:	4260      	negs	r0, r4
1005e1b2:	4160      	adcs	r0, r4
1005e1b4:	bd70      	pop	{r4, r5, r6, pc}
	...

1005e1b8 <LLC_authenticated_payload_timeout_cb>:
1005e1b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e1ba:	4604      	mov	r4, r0
1005e1bc:	f7fc f8b6 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e1c0:	4605      	mov	r5, r0
1005e1c2:	202c      	movs	r0, #44	@ 0x2c
1005e1c4:	5c28      	ldrb	r0, [r5, r0]
1005e1c6:	21fe      	movs	r1, #254	@ 0xfe
1005e1c8:	4001      	ands	r1, r0
1005e1ca:	2902      	cmp	r1, #2
1005e1cc:	d15b      	bne.n	1005e286 <LLC_authenticated_payload_timeout_cb+0xce>
1005e1ce:	9402      	str	r4, [sp, #8]
1005e1d0:	2085      	movs	r0, #133	@ 0x85
1005e1d2:	0040      	lsls	r0, r0, #1
1005e1d4:	182f      	adds	r7, r5, r0
1005e1d6:	793a      	ldrb	r2, [r7, #4]
1005e1d8:	06d0      	lsls	r0, r2, #27
1005e1da:	d419      	bmi.n	1005e210 <LLC_authenticated_payload_timeout_cb+0x58>
1005e1dc:	24f0      	movs	r4, #240	@ 0xf0
1005e1de:	9201      	str	r2, [sp, #4]
1005e1e0:	4014      	ands	r4, r2
1005e1e2:	2101      	movs	r1, #1
1005e1e4:	4628      	mov	r0, r5
1005e1e6:	f7fc fb3d 	bl	1005a864 <llc_conn_get_enc_on>
1005e1ea:	4606      	mov	r6, r0
1005e1ec:	2100      	movs	r1, #0
1005e1ee:	4628      	mov	r0, r5
1005e1f0:	f7fc fb38 	bl	1005a864 <llc_conn_get_enc_on>
1005e1f4:	4330      	orrs	r0, r6
1005e1f6:	d006      	beq.n	1005e206 <LLC_authenticated_payload_timeout_cb+0x4e>
1005e1f8:	9802      	ldr	r0, [sp, #8]
1005e1fa:	f7ff ffc1 	bl	1005e180 <LLC_authenticated_payload_timeout_start_le_ping>
1005e1fe:	2801      	cmp	r0, #1
1005e200:	d001      	beq.n	1005e206 <LLC_authenticated_payload_timeout_cb+0x4e>
1005e202:	2020      	movs	r0, #32
1005e204:	4304      	orrs	r4, r0
1005e206:	9a01      	ldr	r2, [sp, #4]
1005e208:	2610      	movs	r6, #16
1005e20a:	4326      	orrs	r6, r4
1005e20c:	8878      	ldrh	r0, [r7, #2]
1005e20e:	e027      	b.n	1005e260 <LLC_authenticated_payload_timeout_cb+0xa8>
1005e210:	26c0      	movs	r6, #192	@ 0xc0
1005e212:	481d      	ldr	r0, [pc, #116]	@ (1005e288 <__arm_cp.7_0>)
1005e214:	6800      	ldr	r0, [r0, #0]
1005e216:	2140      	movs	r1, #64	@ 0x40
1005e218:	5640      	ldrsb	r0, [r0, r1]
1005e21a:	2800      	cmp	r0, #0
1005e21c:	d51c      	bpl.n	1005e258 <LLC_authenticated_payload_timeout_cb+0xa0>
1005e21e:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005e220:	9001      	str	r0, [sp, #4]
1005e222:	481a      	ldr	r0, [pc, #104]	@ (1005e28c <__arm_cp.7_1>)
1005e224:	6800      	ldr	r0, [r0, #0]
1005e226:	6980      	ldr	r0, [r0, #24]
1005e228:	2142      	movs	r1, #66	@ 0x42
1005e22a:	4614      	mov	r4, r2
1005e22c:	2223      	movs	r2, #35	@ 0x23
1005e22e:	2502      	movs	r5, #2
1005e230:	462b      	mov	r3, r5
1005e232:	f7f7 f955 	bl	100554e0 <aci_event_fifo_push_header>
1005e236:	4622      	mov	r2, r4
1005e238:	2800      	cmp	r0, #0
1005e23a:	d00d      	beq.n	1005e258 <LLC_authenticated_payload_timeout_cb+0xa0>
1005e23c:	4601      	mov	r1, r0
1005e23e:	9a01      	ldr	r2, [sp, #4]
1005e240:	71c2      	strb	r2, [r0, #7]
1005e242:	7185      	strb	r5, [r0, #6]
1005e244:	2057      	movs	r0, #87	@ 0x57
1005e246:	7148      	strb	r0, [r1, #5]
1005e248:	2004      	movs	r0, #4
1005e24a:	7108      	strb	r0, [r1, #4]
1005e24c:	0a10      	lsrs	r0, r2, #8
1005e24e:	7208      	strb	r0, [r1, #8]
1005e250:	2042      	movs	r0, #66	@ 0x42
1005e252:	f7f7 f9e2 	bl	1005561a <aci_event_fifo_push>
1005e256:	4622      	mov	r2, r4
1005e258:	4016      	ands	r6, r2
1005e25a:	8878      	ldrh	r0, [r7, #2]
1005e25c:	8839      	ldrh	r1, [r7, #0]
1005e25e:	1a08      	subs	r0, r1, r0
1005e260:	230a      	movs	r3, #10
1005e262:	4343      	muls	r3, r0
1005e264:	f3ef 8010 	mrs	r0, PRIMASK
1005e268:	b672      	cpsid	i
1005e26a:	7938      	ldrb	r0, [r7, #4]
1005e26c:	4282      	cmp	r2, r0
1005e26e:	9902      	ldr	r1, [sp, #8]
1005e270:	d102      	bne.n	1005e278 <LLC_authenticated_payload_timeout_cb+0xc0>
1005e272:	2003      	movs	r0, #3
1005e274:	4306      	orrs	r6, r0
1005e276:	713e      	strb	r6, [r7, #4]
1005e278:	b662      	cpsie	i
1005e27a:	4803      	ldr	r0, [pc, #12]	@ (1005e288 <__arm_cp.7_0>)
1005e27c:	6800      	ldr	r0, [r0, #0]
1005e27e:	30b0      	adds	r0, #176	@ 0xb0
1005e280:	2201      	movs	r2, #1
1005e282:	f004 fd20 	bl	10062cc6 <CST_start>
1005e286:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005e288 <__arm_cp.7_0>:
1005e288:	20002468 	.word	0x20002468

1005e28c <__arm_cp.7_1>:
1005e28c:	20002418 	.word	0x20002418

1005e290 <LLC_authenticated_payload_timeout_reset>:
1005e290:	b510      	push	{r4, lr}
1005e292:	4604      	mov	r4, r0
1005e294:	2087      	movs	r0, #135	@ 0x87
1005e296:	0040      	lsls	r0, r0, #1
1005e298:	5c20      	ldrb	r0, [r4, r0]
1005e29a:	2801      	cmp	r0, #1
1005e29c:	d00e      	beq.n	1005e2bc <LLC_authenticated_payload_timeout_reset+0x2c>
1005e29e:	4620      	mov	r0, r4
1005e2a0:	3030      	adds	r0, #48	@ 0x30
1005e2a2:	7801      	ldrb	r1, [r0, #0]
1005e2a4:	4806      	ldr	r0, [pc, #24]	@ (1005e2c0 <__arm_cp.8_0>)
1005e2a6:	6800      	ldr	r0, [r0, #0]
1005e2a8:	30b0      	adds	r0, #176	@ 0xb0
1005e2aa:	f004 fcd6 	bl	10062c5a <CST_stop>
1005e2ae:	2085      	movs	r0, #133	@ 0x85
1005e2b0:	0040      	lsls	r0, r0, #1
1005e2b2:	2100      	movs	r1, #0
1005e2b4:	5221      	strh	r1, [r4, r0]
1005e2b6:	1820      	adds	r0, r4, r0
1005e2b8:	8041      	strh	r1, [r0, #2]
1005e2ba:	7101      	strb	r1, [r0, #4]
1005e2bc:	bd10      	pop	{r4, pc}
1005e2be:	46c0      	nop			@ (mov r8, r8)

1005e2c0 <__arm_cp.8_0>:
1005e2c0:	20002468 	.word	0x20002468

1005e2c4 <LLC_le_ping>:
1005e2c4:	b570      	push	{r4, r5, r6, lr}
1005e2c6:	24ff      	movs	r4, #255	@ 0xff
1005e2c8:	2a06      	cmp	r2, #6
1005e2ca:	d835      	bhi.n	1005e338 <LLC_le_ping+0x74>
1005e2cc:	4605      	mov	r5, r0
1005e2ce:	0090      	lsls	r0, r2, #2
1005e2d0:	a201      	add	r2, pc, #4	@ (adr r2, 1005e2d8 <LLC_le_ping+0x14>)
1005e2d2:	5810      	ldr	r0, [r2, r0]
1005e2d4:	4687      	mov	pc, r0
1005e2d6:	46c0      	nop			@ (mov r8, r8)
1005e2d8:	1005e2f5 	.word	0x1005e2f5
1005e2dc:	1005e2fd 	.word	0x1005e2fd
1005e2e0:	1005e339 	.word	0x1005e339
1005e2e4:	1005e315 	.word	0x1005e315
1005e2e8:	1005e339 	.word	0x1005e339
1005e2ec:	1005e339 	.word	0x1005e339
1005e2f0:	1005e319 	.word	0x1005e319
1005e2f4:	2901      	cmp	r1, #1
1005e2f6:	d117      	bne.n	1005e328 <LLC_le_ping+0x64>
1005e2f8:	2413      	movs	r4, #19
1005e2fa:	e01d      	b.n	1005e338 <LLC_le_ping+0x74>
1005e2fc:	2600      	movs	r6, #0
1005e2fe:	4628      	mov	r0, r5
1005e300:	4631      	mov	r1, r6
1005e302:	f7fd febf 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005e306:	2208      	movs	r2, #8
1005e308:	4628      	mov	r0, r5
1005e30a:	4631      	mov	r1, r6
1005e30c:	4633      	mov	r3, r6
1005e30e:	f7fd fe70 	bl	1005bff2 <LL_cpe_set_active>
1005e312:	e011      	b.n	1005e338 <LLC_le_ping+0x74>
1005e314:	2101      	movs	r1, #1
1005e316:	e008      	b.n	1005e32a <LLC_le_ping+0x66>
1005e318:	2001      	movs	r0, #1
1005e31a:	7058      	strb	r0, [r3, #1]
1005e31c:	2003      	movs	r0, #3
1005e31e:	7018      	strb	r0, [r3, #0]
1005e320:	2901      	cmp	r1, #1
1005e322:	d007      	beq.n	1005e334 <LLC_le_ping+0x70>
1005e324:	2013      	movs	r0, #19
1005e326:	e006      	b.n	1005e336 <LLC_le_ping+0x72>
1005e328:	2100      	movs	r1, #0
1005e32a:	2208      	movs	r2, #8
1005e32c:	4628      	mov	r0, r5
1005e32e:	f7fd fe77 	bl	1005c020 <LL_cpe_clr_active>
1005e332:	e001      	b.n	1005e338 <LLC_le_ping+0x74>
1005e334:	2012      	movs	r0, #18
1005e336:	7098      	strb	r0, [r3, #2]
1005e338:	4620      	mov	r0, r4
1005e33a:	bd70      	pop	{r4, r5, r6, pc}

1005e33c <llc_conn_init_pcl_ctxt_ucfg_weak>:
1005e33c:	4770      	bx	lr

1005e33e <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1005e33e:	4770      	bx	lr

1005e340 <LLC_pcl_incr_rx_packets_ucfg_weak>:
1005e340:	4770      	bx	lr

1005e342 <LLC_pcl_update_avg_rssi_ucfg_weak>:
1005e342:	4770      	bx	lr

1005e344 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>:
1005e344:	b580      	push	{r7, lr}
1005e346:	f7fb fff1 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e34a:	2141      	movs	r1, #65	@ 0x41
1005e34c:	5c40      	ldrb	r0, [r0, r1]
1005e34e:	4903      	ldr	r1, [pc, #12]	@ (1005e35c <__arm_cp.22_0>)
1005e350:	6809      	ldr	r1, [r1, #0]
1005e352:	7a49      	ldrb	r1, [r1, #9]
1005e354:	f7f6 f922 	bl	1005459c <BLEPLAT_CNTR_SmSetTxPwr>
1005e358:	bd80      	pop	{r7, pc}
1005e35a:	46c0      	nop			@ (mov r8, r8)

1005e35c <__arm_cp.22_0>:
1005e35c:	20002468 	.word	0x20002468

1005e360 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1005e360:	4770      	bx	lr

1005e362 <LLC_pcl_offline_processing_ucfg_weak>:
1005e362:	2000      	movs	r0, #0
1005e364:	4770      	bx	lr
	...

1005e368 <LL_phy_update_init>:
1005e368:	b580      	push	{r7, lr}
1005e36a:	f7fb ffd5 	bl	1005a318 <llc_conn_get_cntxt_p>
1005e36e:	4902      	ldr	r1, [pc, #8]	@ (1005e378 <__arm_cp.3_0>)
1005e370:	6201      	str	r1, [r0, #32]
1005e372:	2000      	movs	r0, #0
1005e374:	bd80      	pop	{r7, pc}
1005e376:	46c0      	nop			@ (mov r8, r8)

1005e378 <__arm_cp.3_0>:
1005e378:	07070002 	.word	0x07070002

1005e37c <LL_phy_update_init_per_st_data>:
1005e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e37e:	4605      	mov	r5, r0
1005e380:	f7fc f808 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005e384:	2800      	cmp	r0, #0
1005e386:	d027      	beq.n	1005e3d8 <LL_phy_update_init_per_st_data+0x5c>
1005e388:	4604      	mov	r4, r0
1005e38a:	f7fb ffc5 	bl	1005a318 <llc_conn_get_cntxt_p>
1005e38e:	4606      	mov	r6, r0
1005e390:	4628      	mov	r0, r5
1005e392:	f7fb ffcb 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e396:	4605      	mov	r5, r0
1005e398:	2100      	movs	r1, #0
1005e39a:	220e      	movs	r2, #14
1005e39c:	4620      	mov	r0, r4
1005e39e:	f7f4 fb63 	bl	10052a68 <BLEPLAT_MemSet>
1005e3a2:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
1005e3a4:	8060      	strh	r0, [r4, #2]
1005e3a6:	8c30      	ldrh	r0, [r6, #32]
1005e3a8:	8020      	strh	r0, [r4, #0]
1005e3aa:	2741      	movs	r7, #65	@ 0x41
1005e3ac:	9500      	str	r5, [sp, #0]
1005e3ae:	5de8      	ldrb	r0, [r5, r7]
1005e3b0:	f7f5 ff3c 	bl	1005422c <BLEPLAT_CNTR_SmGetTxPhy>
1005e3b4:	2501      	movs	r5, #1
1005e3b6:	2804      	cmp	r0, #4
1005e3b8:	d101      	bne.n	1005e3be <LL_phy_update_init_per_st_data+0x42>
1005e3ba:	4606      	mov	r6, r0
1005e3bc:	e001      	b.n	1005e3c2 <LL_phy_update_init_per_st_data+0x46>
1005e3be:	462e      	mov	r6, r5
1005e3c0:	4086      	lsls	r6, r0
1005e3c2:	9800      	ldr	r0, [sp, #0]
1005e3c4:	5dc0      	ldrb	r0, [r0, r7]
1005e3c6:	f7f5 ff20 	bl	1005420a <BLEPLAT_CNTR_SmGetRxPhy>
1005e3ca:	71a6      	strb	r6, [r4, #6]
1005e3cc:	2804      	cmp	r0, #4
1005e3ce:	d101      	bne.n	1005e3d4 <LL_phy_update_init_per_st_data+0x58>
1005e3d0:	4605      	mov	r5, r0
1005e3d2:	e000      	b.n	1005e3d6 <LL_phy_update_init_per_st_data+0x5a>
1005e3d4:	4085      	lsls	r5, r0
1005e3d6:	71e5      	strb	r5, [r4, #7]
1005e3d8:	2000      	movs	r0, #0
1005e3da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e3dc <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>:
1005e3dc:	6800      	ldr	r0, [r0, #0]
1005e3de:	21a9      	movs	r1, #169	@ 0xa9
1005e3e0:	0109      	lsls	r1, r1, #4
1005e3e2:	8181      	strh	r1, [r0, #12]
1005e3e4:	2229      	movs	r2, #41	@ 0x29
1005e3e6:	00d2      	lsls	r2, r2, #3
1005e3e8:	80c2      	strh	r2, [r0, #6]
1005e3ea:	8141      	strh	r1, [r0, #10]
1005e3ec:	8101      	strh	r1, [r0, #8]
1005e3ee:	8082      	strh	r2, [r0, #4]
1005e3f0:	4770      	bx	lr

1005e3f2 <LL_phy_upd_pending>:
1005e3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e3f4:	4605      	mov	r5, r0
1005e3f6:	f7fb ff99 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e3fa:	4604      	mov	r4, r0
1005e3fc:	4628      	mov	r0, r5
1005e3fe:	f7fb ffc9 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005e402:	219a      	movs	r1, #154	@ 0x9a
1005e404:	5a66      	ldrh	r6, [r4, r1]
1005e406:	b271      	sxtb	r1, r6
1005e408:	2900      	cmp	r1, #0
1005e40a:	d52e      	bpl.n	1005e46a <LL_phy_upd_pending+0x78>
1005e40c:	4627      	mov	r7, r4
1005e40e:	372c      	adds	r7, #44	@ 0x2c
1005e410:	7839      	ldrb	r1, [r7, #0]
1005e412:	2902      	cmp	r1, #2
1005e414:	d106      	bne.n	1005e424 <LL_phy_upd_pending+0x32>
1005e416:	7a01      	ldrb	r1, [r0, #8]
1005e418:	2900      	cmp	r1, #0
1005e41a:	d100      	bne.n	1005e41e <LL_phy_upd_pending+0x2c>
1005e41c:	7981      	ldrb	r1, [r0, #6]
1005e41e:	7181      	strb	r1, [r0, #6]
1005e420:	7a45      	ldrb	r5, [r0, #9]
1005e422:	e005      	b.n	1005e430 <LL_phy_upd_pending+0x3e>
1005e424:	7a41      	ldrb	r1, [r0, #9]
1005e426:	2900      	cmp	r1, #0
1005e428:	d100      	bne.n	1005e42c <LL_phy_upd_pending+0x3a>
1005e42a:	7981      	ldrb	r1, [r0, #6]
1005e42c:	7181      	strb	r1, [r0, #6]
1005e42e:	7a05      	ldrb	r5, [r0, #8]
1005e430:	2d00      	cmp	r5, #0
1005e432:	d100      	bne.n	1005e436 <LL_phy_upd_pending+0x44>
1005e434:	79c5      	ldrb	r5, [r0, #7]
1005e436:	71c5      	strb	r5, [r0, #7]
1005e438:	2904      	cmp	r1, #4
1005e43a:	d104      	bne.n	1005e446 <LL_phy_upd_pending+0x54>
1005e43c:	8800      	ldrh	r0, [r0, #0]
1005e43e:	2801      	cmp	r0, #1
1005e440:	d003      	beq.n	1005e44a <LL_phy_upd_pending+0x58>
1005e442:	2104      	movs	r1, #4
1005e444:	e002      	b.n	1005e44c <LL_phy_upd_pending+0x5a>
1005e446:	0849      	lsrs	r1, r1, #1
1005e448:	e000      	b.n	1005e44c <LL_phy_upd_pending+0x5a>
1005e44a:	2106      	movs	r1, #6
1005e44c:	349a      	adds	r4, #154	@ 0x9a
1005e44e:	7d78      	ldrb	r0, [r7, #21]
1005e450:	f7f6 f88f 	bl	10054572 <BLEPLAT_CNTR_SmSetTxPhy>
1005e454:	2d04      	cmp	r5, #4
1005e456:	d000      	beq.n	1005e45a <LL_phy_upd_pending+0x68>
1005e458:	086d      	lsrs	r5, r5, #1
1005e45a:	7d78      	ldrb	r0, [r7, #21]
1005e45c:	4629      	mov	r1, r5
1005e45e:	f7f6 f81c 	bl	1005449a <BLEPLAT_CNTR_SmSetRxPhy>
1005e462:	8820      	ldrh	r0, [r4, #0]
1005e464:	2180      	movs	r1, #128	@ 0x80
1005e466:	4388      	bics	r0, r1
1005e468:	8020      	strh	r0, [r4, #0]
1005e46a:	b2f0      	uxtb	r0, r6
1005e46c:	09c0      	lsrs	r0, r0, #7
1005e46e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e470 <LL_phy_update>:
1005e470:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e472:	b087      	sub	sp, #28
1005e474:	461e      	mov	r6, r3
1005e476:	4617      	mov	r7, r2
1005e478:	460d      	mov	r5, r1
1005e47a:	4604      	mov	r4, r0
1005e47c:	f7fd fe0f 	bl	1005c09e <LL_cpe_get_cntxt>
1005e480:	9003      	str	r0, [sp, #12]
1005e482:	9404      	str	r4, [sp, #16]
1005e484:	4620      	mov	r0, r4
1005e486:	f7fb ff51 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e48a:	23ff      	movs	r3, #255	@ 0xff
1005e48c:	2f07      	cmp	r7, #7
1005e48e:	d900      	bls.n	1005e492 <LL_phy_update+0x22>
1005e490:	e18d      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e492:	9502      	str	r5, [sp, #8]
1005e494:	4605      	mov	r5, r0
1005e496:	352c      	adds	r5, #44	@ 0x2c
1005e498:	4604      	mov	r4, r0
1005e49a:	3498      	adds	r4, #152	@ 0x98
1005e49c:	007f      	lsls	r7, r7, #1
1005e49e:	46c0      	nop			@ (mov r8, r8)
1005e4a0:	447f      	add	r7, pc
1005e4a2:	88bf      	ldrh	r7, [r7, #4]
1005e4a4:	007f      	lsls	r7, r7, #1
1005e4a6:	44bf      	add	pc, r7
1005e4a8:	001c0007 	.word	0x001c0007
1005e4ac:	004d0041 	.word	0x004d0041
1005e4b0:	01820067 	.word	0x01820067
1005e4b4:	006e0026 	.word	0x006e0026
1005e4b8:	7828      	ldrb	r0, [r5, #0]
1005e4ba:	9902      	ldr	r1, [sp, #8]
1005e4bc:	2901      	cmp	r1, #1
1005e4be:	d000      	beq.n	1005e4c2 <LL_phy_update+0x52>
1005e4c0:	e0b5      	b.n	1005e62e <LL_phy_update+0x1be>
1005e4c2:	2802      	cmp	r0, #2
1005e4c4:	d000      	beq.n	1005e4c8 <LL_phy_update+0x58>
1005e4c6:	e103      	b.n	1005e6d0 <LL_phy_update+0x260>
1005e4c8:	9e03      	ldr	r6, [sp, #12]
1005e4ca:	7c30      	ldrb	r0, [r6, #16]
1005e4cc:	2803      	cmp	r0, #3
1005e4ce:	d100      	bne.n	1005e4d2 <LL_phy_update+0x62>
1005e4d0:	e158      	b.n	1005e784 <LL_phy_update+0x314>
1005e4d2:	2801      	cmp	r0, #1
1005e4d4:	d000      	beq.n	1005e4d8 <LL_phy_update+0x68>
1005e4d6:	e16a      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e4d8:	2002      	movs	r0, #2
1005e4da:	9903      	ldr	r1, [sp, #12]
1005e4dc:	7408      	strb	r0, [r1, #16]
1005e4de:	2317      	movs	r3, #23
1005e4e0:	e165      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e4e2:	78f0      	ldrb	r0, [r6, #3]
1005e4e4:	a905      	add	r1, sp, #20
1005e4e6:	7088      	strb	r0, [r1, #2]
1005e4e8:	7930      	ldrb	r0, [r6, #4]
1005e4ea:	70c8      	strb	r0, [r1, #3]
1005e4ec:	9804      	ldr	r0, [sp, #16]
1005e4ee:	461c      	mov	r4, r3
1005e4f0:	f000 fac8 	bl	1005ea84 <LL_process_phy_req_rcpt>
1005e4f4:	e15a      	b.n	1005e7ac <LL_phy_update+0x33c>
1005e4f6:	7828      	ldrb	r0, [r5, #0]
1005e4f8:	9902      	ldr	r1, [sp, #8]
1005e4fa:	2901      	cmp	r1, #1
1005e4fc:	d171      	bne.n	1005e5e2 <LL_phy_update+0x172>
1005e4fe:	2802      	cmp	r0, #2
1005e500:	9903      	ldr	r1, [sp, #12]
1005e502:	d000      	beq.n	1005e506 <LL_phy_update+0x96>
1005e504:	e0ce      	b.n	1005e6a4 <LL_phy_update+0x234>
1005e506:	7c08      	ldrb	r0, [r1, #16]
1005e508:	2802      	cmp	r0, #2
1005e50a:	d100      	bne.n	1005e50e <LL_phy_update+0x9e>
1005e50c:	e152      	b.n	1005e7b4 <LL_phy_update+0x344>
1005e50e:	2800      	cmp	r0, #0
1005e510:	d000      	beq.n	1005e514 <LL_phy_update+0xa4>
1005e512:	e14c      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e514:	2016      	movs	r0, #22
1005e516:	70b0      	strb	r0, [r6, #2]
1005e518:	2003      	movs	r0, #3
1005e51a:	7070      	strb	r0, [r6, #1]
1005e51c:	7030      	strb	r0, [r6, #0]
1005e51e:	7cc8      	ldrb	r0, [r1, #19]
1005e520:	70f0      	strb	r0, [r6, #3]
1005e522:	7d08      	ldrb	r0, [r1, #20]
1005e524:	7130      	strb	r0, [r6, #4]
1005e526:	2001      	movs	r0, #1
1005e528:	7408      	strb	r0, [r1, #16]
1005e52a:	e140      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e52c:	78f1      	ldrb	r1, [r6, #3]
1005e52e:	a805      	add	r0, sp, #20
1005e530:	7081      	strb	r1, [r0, #2]
1005e532:	7931      	ldrb	r1, [r6, #4]
1005e534:	70c1      	strb	r1, [r0, #3]
1005e536:	7d65      	ldrb	r5, [r4, #21]
1005e538:	461e      	mov	r6, r3
1005e53a:	2d07      	cmp	r5, #7
1005e53c:	d100      	bne.n	1005e540 <LL_phy_update+0xd0>
1005e53e:	e090      	b.n	1005e662 <LL_phy_update+0x1f2>
1005e540:	2102      	movs	r1, #2
1005e542:	e08f      	b.n	1005e664 <LL_phy_update+0x1f4>
1005e544:	78b0      	ldrb	r0, [r6, #2]
1005e546:	2807      	cmp	r0, #7
1005e548:	d100      	bne.n	1005e54c <LL_phy_update+0xdc>
1005e54a:	e0d2      	b.n	1005e6f2 <LL_phy_update+0x282>
1005e54c:	2811      	cmp	r0, #17
1005e54e:	9f04      	ldr	r7, [sp, #16]
1005e550:	d100      	bne.n	1005e554 <LL_phy_update+0xe4>
1005e552:	e0e7      	b.n	1005e724 <LL_phy_update+0x2b4>
1005e554:	2818      	cmp	r0, #24
1005e556:	d100      	bne.n	1005e55a <LL_phy_update+0xea>
1005e558:	e0fa      	b.n	1005e750 <LL_phy_update+0x2e0>
1005e55a:	2817      	cmp	r0, #23
1005e55c:	d000      	beq.n	1005e560 <LL_phy_update+0xf0>
1005e55e:	e126      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e560:	a905      	add	r1, sp, #20
1005e562:	2000      	movs	r0, #0
1005e564:	7108      	strb	r0, [r1, #4]
1005e566:	78f0      	ldrb	r0, [r6, #3]
1005e568:	7088      	strb	r0, [r1, #2]
1005e56a:	7930      	ldrb	r0, [r6, #4]
1005e56c:	70c8      	strb	r0, [r1, #3]
1005e56e:	4638      	mov	r0, r7
1005e570:	461c      	mov	r4, r3
1005e572:	f000 f9cf 	bl	1005e914 <LL_compute_phy_upd_ind>
1005e576:	e119      	b.n	1005e7ac <LL_phy_update+0x33c>
1005e578:	78b1      	ldrb	r1, [r6, #2]
1005e57a:	461c      	mov	r4, r3
1005e57c:	2916      	cmp	r1, #22
1005e57e:	d100      	bne.n	1005e582 <LL_phy_update+0x112>
1005e580:	e085      	b.n	1005e68e <LL_phy_update+0x21e>
1005e582:	212a      	movs	r1, #42	@ 0x2a
1005e584:	e084      	b.n	1005e690 <LL_phy_update+0x220>
1005e586:	9301      	str	r3, [sp, #4]
1005e588:	9f04      	ldr	r7, [sp, #16]
1005e58a:	4638      	mov	r0, r7
1005e58c:	9e03      	ldr	r6, [sp, #12]
1005e58e:	4631      	mov	r1, r6
1005e590:	f000 f9a3 	bl	1005e8da <LL_reset_max_tx_data_frag>
1005e594:	7d69      	ldrb	r1, [r5, #21]
1005e596:	4638      	mov	r0, r7
1005e598:	f7fe ffbc 	bl	1005d514 <LLC_connection_cte_response_disable_ucfg_weak>
1005e59c:	8871      	ldrh	r1, [r6, #2]
1005e59e:	8830      	ldrh	r0, [r6, #0]
1005e5a0:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
1005e5a2:	4290      	cmp	r0, r2
1005e5a4:	d102      	bne.n	1005e5ac <LL_phy_update+0x13c>
1005e5a6:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
1005e5a8:	4291      	cmp	r1, r2
1005e5aa:	d00a      	beq.n	1005e5c2 <LL_phy_update+0x152>
1005e5ac:	84a1      	strh	r1, [r4, #36]	@ 0x24
1005e5ae:	8460      	strh	r0, [r4, #34]	@ 0x22
1005e5b0:	f3ef 8010 	mrs	r0, PRIMASK
1005e5b4:	b672      	cpsid	i
1005e5b6:	2001      	movs	r0, #1
1005e5b8:	0240      	lsls	r0, r0, #9
1005e5ba:	8861      	ldrh	r1, [r4, #2]
1005e5bc:	4301      	orrs	r1, r0
1005e5be:	8061      	strh	r1, [r4, #2]
1005e5c0:	b662      	cpsie	i
1005e5c2:	f3ef 8010 	mrs	r0, PRIMASK
1005e5c6:	b672      	cpsid	i
1005e5c8:	2001      	movs	r0, #1
1005e5ca:	0200      	lsls	r0, r0, #8
1005e5cc:	8861      	ldrh	r1, [r4, #2]
1005e5ce:	4301      	orrs	r1, r0
1005e5d0:	8061      	strh	r1, [r4, #2]
1005e5d2:	b662      	cpsie	i
1005e5d4:	2207      	movs	r2, #7
1005e5d6:	4638      	mov	r0, r7
1005e5d8:	9902      	ldr	r1, [sp, #8]
1005e5da:	f7fd fd21 	bl	1005c020 <LL_cpe_clr_active>
1005e5de:	9b01      	ldr	r3, [sp, #4]
1005e5e0:	e0e5      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e5e2:	2802      	cmp	r0, #2
1005e5e4:	9903      	ldr	r1, [sp, #12]
1005e5e6:	d166      	bne.n	1005e6b6 <LL_phy_update+0x246>
1005e5e8:	7c08      	ldrb	r0, [r1, #16]
1005e5ea:	2805      	cmp	r0, #5
1005e5ec:	d100      	bne.n	1005e5f0 <LL_phy_update+0x180>
1005e5ee:	e100      	b.n	1005e7f2 <LL_phy_update+0x382>
1005e5f0:	2800      	cmp	r0, #0
1005e5f2:	d000      	beq.n	1005e5f6 <LL_phy_update+0x186>
1005e5f4:	e0db      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e5f6:	9301      	str	r3, [sp, #4]
1005e5f8:	9f04      	ldr	r7, [sp, #16]
1005e5fa:	4638      	mov	r0, r7
1005e5fc:	f7fb feca 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005e600:	2118      	movs	r1, #24
1005e602:	70b1      	strb	r1, [r6, #2]
1005e604:	2105      	movs	r1, #5
1005e606:	7071      	strb	r1, [r6, #1]
1005e608:	2503      	movs	r5, #3
1005e60a:	7035      	strb	r5, [r6, #0]
1005e60c:	7a01      	ldrb	r1, [r0, #8]
1005e60e:	70f1      	strb	r1, [r6, #3]
1005e610:	7a40      	ldrb	r0, [r0, #9]
1005e612:	7130      	strb	r0, [r6, #4]
1005e614:	1d71      	adds	r1, r6, #5
1005e616:	2202      	movs	r2, #2
1005e618:	4620      	mov	r0, r4
1005e61a:	f004 fc33 	bl	10062e84 <char_copy>
1005e61e:	9803      	ldr	r0, [sp, #12]
1005e620:	7405      	strb	r5, [r0, #16]
1005e622:	8820      	ldrh	r0, [r4, #0]
1005e624:	2800      	cmp	r0, #0
1005e626:	d0da      	beq.n	1005e5de <LL_phy_update+0x16e>
1005e628:	4638      	mov	r0, r7
1005e62a:	9902      	ldr	r1, [sp, #8]
1005e62c:	e0de      	b.n	1005e7ec <LL_phy_update+0x37c>
1005e62e:	2802      	cmp	r0, #2
1005e630:	d14a      	bne.n	1005e6c8 <LL_phy_update+0x258>
1005e632:	9e03      	ldr	r6, [sp, #12]
1005e634:	7c30      	ldrb	r0, [r6, #16]
1005e636:	2803      	cmp	r0, #3
1005e638:	d000      	beq.n	1005e63c <LL_phy_update+0x1cc>
1005e63a:	e09f      	b.n	1005e77c <LL_phy_update+0x30c>
1005e63c:	461c      	mov	r4, r3
1005e63e:	7c70      	ldrb	r0, [r6, #17]
1005e640:	a905      	add	r1, sp, #20
1005e642:	7108      	strb	r0, [r1, #4]
1005e644:	9d04      	ldr	r5, [sp, #16]
1005e646:	4628      	mov	r0, r5
1005e648:	4632      	mov	r2, r6
1005e64a:	f000 f8f0 	bl	1005e82e <LL_process_phy_upd_ind>
1005e64e:	2800      	cmp	r0, #0
1005e650:	d100      	bne.n	1005e654 <LL_phy_update+0x1e4>
1005e652:	e0ab      	b.n	1005e7ac <LL_phy_update+0x33c>
1005e654:	4628      	mov	r0, r5
1005e656:	4631      	mov	r1, r6
1005e658:	f000 f93f 	bl	1005e8da <LL_reset_max_tx_data_frag>
1005e65c:	2207      	movs	r2, #7
1005e65e:	4628      	mov	r0, r5
1005e660:	e074      	b.n	1005e74c <LL_phy_update+0x2dc>
1005e662:	2101      	movs	r1, #1
1005e664:	9f04      	ldr	r7, [sp, #16]
1005e666:	7181      	strb	r1, [r0, #6]
1005e668:	2100      	movs	r1, #0
1005e66a:	4638      	mov	r0, r7
1005e66c:	f7fd fd17 	bl	1005c09e <LL_cpe_get_cntxt>
1005e670:	4604      	mov	r4, r0
1005e672:	4638      	mov	r0, r7
1005e674:	f7fb fe5a 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e678:	212c      	movs	r1, #44	@ 0x2c
1005e67a:	5c40      	ldrb	r0, [r0, r1]
1005e67c:	2802      	cmp	r0, #2
1005e67e:	d10a      	bne.n	1005e696 <LL_phy_update+0x226>
1005e680:	20ff      	movs	r0, #255	@ 0xff
1005e682:	3006      	adds	r0, #6
1005e684:	8220      	strh	r0, [r4, #16]
1005e686:	2d07      	cmp	r5, #7
1005e688:	d024      	beq.n	1005e6d4 <LL_phy_update+0x264>
1005e68a:	202a      	movs	r0, #42	@ 0x2a
1005e68c:	e023      	b.n	1005e6d6 <LL_phy_update+0x266>
1005e68e:	2123      	movs	r1, #35	@ 0x23
1005e690:	f7fc fd30 	bl	1005b0f4 <llc_conn_disconnect_link_from_cpf>
1005e694:	e08a      	b.n	1005e7ac <LL_phy_update+0x33c>
1005e696:	2d07      	cmp	r5, #7
1005e698:	d129      	bne.n	1005e6ee <LL_phy_update+0x27e>
1005e69a:	a905      	add	r1, sp, #20
1005e69c:	4638      	mov	r0, r7
1005e69e:	f000 f9f1 	bl	1005ea84 <LL_process_phy_req_rcpt>
1005e6a2:	e024      	b.n	1005e6ee <LL_phy_update+0x27e>
1005e6a4:	2016      	movs	r0, #22
1005e6a6:	70b0      	strb	r0, [r6, #2]
1005e6a8:	2003      	movs	r0, #3
1005e6aa:	7070      	strb	r0, [r6, #1]
1005e6ac:	7030      	strb	r0, [r6, #0]
1005e6ae:	7cc8      	ldrb	r0, [r1, #19]
1005e6b0:	70f0      	strb	r0, [r6, #3]
1005e6b2:	7d08      	ldrb	r0, [r1, #20]
1005e6b4:	e0a5      	b.n	1005e802 <LL_phy_update+0x392>
1005e6b6:	2017      	movs	r0, #23
1005e6b8:	70b0      	strb	r0, [r6, #2]
1005e6ba:	2003      	movs	r0, #3
1005e6bc:	7070      	strb	r0, [r6, #1]
1005e6be:	7030      	strb	r0, [r6, #0]
1005e6c0:	7d48      	ldrb	r0, [r1, #21]
1005e6c2:	70f0      	strb	r0, [r6, #3]
1005e6c4:	7d88      	ldrb	r0, [r1, #22]
1005e6c6:	e09c      	b.n	1005e802 <LL_phy_update+0x392>
1005e6c8:	2202      	movs	r2, #2
1005e6ca:	9804      	ldr	r0, [sp, #16]
1005e6cc:	f7fd fcca 	bl	1005c064 <LL_cpe_set_blocked>
1005e6d0:	2318      	movs	r3, #24
1005e6d2:	e06c      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e6d4:	2023      	movs	r0, #35	@ 0x23
1005e6d6:	74a0      	strb	r0, [r4, #18]
1005e6d8:	2400      	movs	r4, #0
1005e6da:	4638      	mov	r0, r7
1005e6dc:	4621      	mov	r1, r4
1005e6de:	f7fd fcd1 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005e6e2:	2207      	movs	r2, #7
1005e6e4:	2301      	movs	r3, #1
1005e6e6:	4638      	mov	r0, r7
1005e6e8:	4621      	mov	r1, r4
1005e6ea:	f7fd fc82 	bl	1005bff2 <LL_cpe_set_active>
1005e6ee:	4633      	mov	r3, r6
1005e6f0:	e05d      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e6f2:	461c      	mov	r4, r3
1005e6f4:	a905      	add	r1, sp, #20
1005e6f6:	2007      	movs	r0, #7
1005e6f8:	7088      	strb	r0, [r1, #2]
1005e6fa:	2000      	movs	r0, #0
1005e6fc:	7048      	strb	r0, [r1, #1]
1005e6fe:	78f0      	ldrb	r0, [r6, #3]
1005e700:	7008      	strb	r0, [r1, #0]
1005e702:	9f03      	ldr	r7, [sp, #12]
1005e704:	7c78      	ldrb	r0, [r7, #17]
1005e706:	70c8      	strb	r0, [r1, #3]
1005e708:	9e04      	ldr	r6, [sp, #16]
1005e70a:	4630      	mov	r0, r6
1005e70c:	f000 f992 	bl	1005ea34 <LL_process_unknown_rsp_reject_ind_rcpt>
1005e710:	7828      	ldrb	r0, [r5, #0]
1005e712:	2803      	cmp	r0, #3
1005e714:	d103      	bne.n	1005e71e <LL_phy_update+0x2ae>
1005e716:	4630      	mov	r0, r6
1005e718:	4639      	mov	r1, r7
1005e71a:	f000 f8de 	bl	1005e8da <LL_reset_max_tx_data_frag>
1005e71e:	2207      	movs	r2, #7
1005e720:	4630      	mov	r0, r6
1005e722:	e013      	b.n	1005e74c <LL_phy_update+0x2dc>
1005e724:	a905      	add	r1, sp, #20
1005e726:	2011      	movs	r0, #17
1005e728:	7088      	strb	r0, [r1, #2]
1005e72a:	78f0      	ldrb	r0, [r6, #3]
1005e72c:	7008      	strb	r0, [r1, #0]
1005e72e:	7930      	ldrb	r0, [r6, #4]
1005e730:	7048      	strb	r0, [r1, #1]
1005e732:	9d03      	ldr	r5, [sp, #12]
1005e734:	7c68      	ldrb	r0, [r5, #17]
1005e736:	70c8      	strb	r0, [r1, #3]
1005e738:	4638      	mov	r0, r7
1005e73a:	461c      	mov	r4, r3
1005e73c:	f000 f97a 	bl	1005ea34 <LL_process_unknown_rsp_reject_ind_rcpt>
1005e740:	4638      	mov	r0, r7
1005e742:	4629      	mov	r1, r5
1005e744:	f000 f8c9 	bl	1005e8da <LL_reset_max_tx_data_frag>
1005e748:	2207      	movs	r2, #7
1005e74a:	4638      	mov	r0, r7
1005e74c:	9902      	ldr	r1, [sp, #8]
1005e74e:	e02b      	b.n	1005e7a8 <LL_phy_update+0x338>
1005e750:	9301      	str	r3, [sp, #4]
1005e752:	1cf0      	adds	r0, r6, #3
1005e754:	ae05      	add	r6, sp, #20
1005e756:	2205      	movs	r2, #5
1005e758:	4631      	mov	r1, r6
1005e75a:	f004 fb93 	bl	10062e84 <char_copy>
1005e75e:	9d03      	ldr	r5, [sp, #12]
1005e760:	7c68      	ldrb	r0, [r5, #17]
1005e762:	7130      	strb	r0, [r6, #4]
1005e764:	4638      	mov	r0, r7
1005e766:	4631      	mov	r1, r6
1005e768:	462a      	mov	r2, r5
1005e76a:	f000 f860 	bl	1005e82e <LL_process_phy_upd_ind>
1005e76e:	2800      	cmp	r0, #0
1005e770:	d049      	beq.n	1005e806 <LL_phy_update+0x396>
1005e772:	4638      	mov	r0, r7
1005e774:	4629      	mov	r1, r5
1005e776:	f000 f8b0 	bl	1005e8da <LL_reset_max_tx_data_frag>
1005e77a:	e72b      	b.n	1005e5d4 <LL_phy_update+0x164>
1005e77c:	2207      	movs	r2, #7
1005e77e:	9804      	ldr	r0, [sp, #16]
1005e780:	461c      	mov	r4, r3
1005e782:	e011      	b.n	1005e7a8 <LL_phy_update+0x338>
1005e784:	461c      	mov	r4, r3
1005e786:	7c70      	ldrb	r0, [r6, #17]
1005e788:	a905      	add	r1, sp, #20
1005e78a:	7108      	strb	r0, [r1, #4]
1005e78c:	9d04      	ldr	r5, [sp, #16]
1005e78e:	4628      	mov	r0, r5
1005e790:	4632      	mov	r2, r6
1005e792:	f000 f84c 	bl	1005e82e <LL_process_phy_upd_ind>
1005e796:	2800      	cmp	r0, #0
1005e798:	d046      	beq.n	1005e828 <LL_phy_update+0x3b8>
1005e79a:	4628      	mov	r0, r5
1005e79c:	4631      	mov	r1, r6
1005e79e:	f000 f89c 	bl	1005e8da <LL_reset_max_tx_data_frag>
1005e7a2:	2101      	movs	r1, #1
1005e7a4:	2207      	movs	r2, #7
1005e7a6:	4628      	mov	r0, r5
1005e7a8:	f7fd fc3a 	bl	1005c020 <LL_cpe_clr_active>
1005e7ac:	4623      	mov	r3, r4
1005e7ae:	4618      	mov	r0, r3
1005e7b0:	b007      	add	sp, #28
1005e7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e7b4:	9301      	str	r3, [sp, #4]
1005e7b6:	9f04      	ldr	r7, [sp, #16]
1005e7b8:	4638      	mov	r0, r7
1005e7ba:	f7fb fdeb 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005e7be:	2118      	movs	r1, #24
1005e7c0:	70b1      	strb	r1, [r6, #2]
1005e7c2:	2105      	movs	r1, #5
1005e7c4:	7071      	strb	r1, [r6, #1]
1005e7c6:	2503      	movs	r5, #3
1005e7c8:	7035      	strb	r5, [r6, #0]
1005e7ca:	7a01      	ldrb	r1, [r0, #8]
1005e7cc:	70f1      	strb	r1, [r6, #3]
1005e7ce:	7a40      	ldrb	r0, [r0, #9]
1005e7d0:	7130      	strb	r0, [r6, #4]
1005e7d2:	1d71      	adds	r1, r6, #5
1005e7d4:	2202      	movs	r2, #2
1005e7d6:	4620      	mov	r0, r4
1005e7d8:	f004 fb54 	bl	10062e84 <char_copy>
1005e7dc:	9803      	ldr	r0, [sp, #12]
1005e7de:	7405      	strb	r5, [r0, #16]
1005e7e0:	8820      	ldrh	r0, [r4, #0]
1005e7e2:	2800      	cmp	r0, #0
1005e7e4:	d100      	bne.n	1005e7e8 <LL_phy_update+0x378>
1005e7e6:	e6fa      	b.n	1005e5de <LL_phy_update+0x16e>
1005e7e8:	2101      	movs	r1, #1
1005e7ea:	4638      	mov	r0, r7
1005e7ec:	f7fd fc60 	bl	1005c0b0 <LL_cpe_set_tx_with_instant>
1005e7f0:	e015      	b.n	1005e81e <LL_phy_update+0x3ae>
1005e7f2:	2016      	movs	r0, #22
1005e7f4:	70f0      	strb	r0, [r6, #3]
1005e7f6:	2011      	movs	r0, #17
1005e7f8:	70b0      	strb	r0, [r6, #2]
1005e7fa:	2003      	movs	r0, #3
1005e7fc:	7070      	strb	r0, [r6, #1]
1005e7fe:	7030      	strb	r0, [r6, #0]
1005e800:	7c88      	ldrb	r0, [r1, #18]
1005e802:	7130      	strb	r0, [r6, #4]
1005e804:	e7d3      	b.n	1005e7ae <LL_phy_update+0x33e>
1005e806:	9d02      	ldr	r5, [sp, #8]
1005e808:	2d01      	cmp	r5, #1
1005e80a:	d104      	bne.n	1005e816 <LL_phy_update+0x3a6>
1005e80c:	2101      	movs	r1, #1
1005e80e:	2202      	movs	r2, #2
1005e810:	4638      	mov	r0, r7
1005e812:	f7fd fc27 	bl	1005c064 <LL_cpe_set_blocked>
1005e816:	4638      	mov	r0, r7
1005e818:	4629      	mov	r1, r5
1005e81a:	f7fd fc58 	bl	1005c0ce <LL_cpe_set_rx_with_instant>
1005e81e:	8860      	ldrh	r0, [r4, #2]
1005e820:	2180      	movs	r1, #128	@ 0x80
1005e822:	4301      	orrs	r1, r0
1005e824:	8061      	strh	r1, [r4, #2]
1005e826:	e6da      	b.n	1005e5de <LL_phy_update+0x16e>
1005e828:	2004      	movs	r0, #4
1005e82a:	7430      	strb	r0, [r6, #16]
1005e82c:	e7be      	b.n	1005e7ac <LL_phy_update+0x33c>

1005e82e <LL_process_phy_upd_ind>:
1005e82e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e830:	9201      	str	r2, [sp, #4]
1005e832:	460c      	mov	r4, r1
1005e834:	4606      	mov	r6, r0
1005e836:	f7fb fd79 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e83a:	4607      	mov	r7, r0
1005e83c:	4630      	mov	r0, r6
1005e83e:	f7fb fda9 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005e842:	4605      	mov	r5, r0
1005e844:	202c      	movs	r0, #44	@ 0x2c
1005e846:	9702      	str	r7, [sp, #8]
1005e848:	5c39      	ldrb	r1, [r7, r0]
1005e84a:	2903      	cmp	r1, #3
1005e84c:	d111      	bne.n	1005e872 <LL_process_phy_upd_ind+0x44>
1005e84e:	7827      	ldrb	r7, [r4, #0]
1005e850:	2001      	movs	r0, #1
1005e852:	2f04      	cmp	r7, #4
1005e854:	d82e      	bhi.n	1005e8b4 <LL_process_phy_upd_ind+0x86>
1005e856:	2f03      	cmp	r7, #3
1005e858:	d02c      	beq.n	1005e8b4 <LL_process_phy_upd_ind+0x86>
1005e85a:	7862      	ldrb	r2, [r4, #1]
1005e85c:	2a04      	cmp	r2, #4
1005e85e:	d829      	bhi.n	1005e8b4 <LL_process_phy_upd_ind+0x86>
1005e860:	2a03      	cmp	r2, #3
1005e862:	d027      	beq.n	1005e8b4 <LL_process_phy_upd_ind+0x86>
1005e864:	9b02      	ldr	r3, [sp, #8]
1005e866:	3398      	adds	r3, #152	@ 0x98
1005e868:	726a      	strb	r2, [r5, #9]
1005e86a:	722f      	strb	r7, [r5, #8]
1005e86c:	8862      	ldrh	r2, [r4, #2]
1005e86e:	801a      	strh	r2, [r3, #0]
1005e870:	e000      	b.n	1005e874 <LL_process_phy_upd_ind+0x46>
1005e872:	7a2f      	ldrb	r7, [r5, #8]
1005e874:	2f00      	cmp	r7, #0
1005e876:	d102      	bne.n	1005e87e <LL_process_phy_upd_ind+0x50>
1005e878:	7a6a      	ldrb	r2, [r5, #9]
1005e87a:	2a00      	cmp	r2, #0
1005e87c:	d016      	beq.n	1005e8ac <LL_process_phy_upd_ind+0x7e>
1005e87e:	2000      	movs	r0, #0
1005e880:	2903      	cmp	r1, #3
1005e882:	d117      	bne.n	1005e8b4 <LL_process_phy_upd_ind+0x86>
1005e884:	7a69      	ldrb	r1, [r5, #9]
1005e886:	2900      	cmp	r1, #0
1005e888:	d014      	beq.n	1005e8b4 <LL_process_phy_upd_ind+0x86>
1005e88a:	79ea      	ldrb	r2, [r5, #7]
1005e88c:	9b01      	ldr	r3, [sp, #4]
1005e88e:	9300      	str	r3, [sp, #0]
1005e890:	403a      	ands	r2, r7
1005e892:	0752      	lsls	r2, r2, #29
1005e894:	0fd2      	lsrs	r2, r2, #31
1005e896:	4604      	mov	r4, r0
1005e898:	2301      	movs	r3, #1
1005e89a:	4630      	mov	r0, r6
1005e89c:	f000 fa04 	bl	1005eca8 <LL_adjust_max_tx_data_frag>
1005e8a0:	7a69      	ldrb	r1, [r5, #9]
1005e8a2:	4630      	mov	r0, r6
1005e8a4:	f7fe fe35 	bl	1005d512 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005e8a8:	4620      	mov	r0, r4
1005e8aa:	e003      	b.n	1005e8b4 <LL_process_phy_upd_ind+0x86>
1005e8ac:	7921      	ldrb	r1, [r4, #4]
1005e8ae:	2001      	movs	r0, #1
1005e8b0:	2900      	cmp	r1, #0
1005e8b2:	d000      	beq.n	1005e8b6 <LL_process_phy_upd_ind+0x88>
1005e8b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e8b6:	4604      	mov	r4, r0
1005e8b8:	79e9      	ldrb	r1, [r5, #7]
1005e8ba:	2003      	movs	r0, #3
1005e8bc:	074a      	lsls	r2, r1, #29
1005e8be:	d500      	bpl.n	1005e8c2 <LL_process_phy_upd_ind+0x94>
1005e8c0:	4601      	mov	r1, r0
1005e8c2:	9a02      	ldr	r2, [sp, #8]
1005e8c4:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005e8c6:	79ab      	ldrb	r3, [r5, #6]
1005e8c8:	9100      	str	r1, [sp, #0]
1005e8ca:	0759      	lsls	r1, r3, #29
1005e8cc:	d500      	bpl.n	1005e8d0 <LL_process_phy_upd_ind+0xa2>
1005e8ce:	4603      	mov	r3, r0
1005e8d0:	2080      	movs	r0, #128	@ 0x80
1005e8d2:	2100      	movs	r1, #0
1005e8d4:	f000 f9b2 	bl	1005ec3c <hci_le_phy_update_complete_event_push>
1005e8d8:	e7e6      	b.n	1005e8a8 <LL_process_phy_upd_ind+0x7a>

1005e8da <LL_reset_max_tx_data_frag>:
1005e8da:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005e8dc:	460d      	mov	r5, r1
1005e8de:	4604      	mov	r4, r0
1005e8e0:	f7fb fd58 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005e8e4:	2800      	cmp	r0, #0
1005e8e6:	d007      	beq.n	1005e8f8 <LL_reset_max_tx_data_frag+0x1e>
1005e8e8:	7981      	ldrb	r1, [r0, #6]
1005e8ea:	79c0      	ldrb	r0, [r0, #7]
1005e8ec:	2804      	cmp	r0, #4
1005e8ee:	d107      	bne.n	1005e900 <LL_reset_max_tx_data_frag+0x26>
1005e8f0:	4628      	mov	r0, r5
1005e8f2:	300c      	adds	r0, #12
1005e8f4:	2201      	movs	r2, #1
1005e8f6:	e005      	b.n	1005e904 <LL_reset_max_tx_data_frag+0x2a>
1005e8f8:	1da8      	adds	r0, r5, #6
1005e8fa:	2200      	movs	r2, #0
1005e8fc:	2101      	movs	r1, #1
1005e8fe:	e001      	b.n	1005e904 <LL_reset_max_tx_data_frag+0x2a>
1005e900:	1da8      	adds	r0, r5, #6
1005e902:	2200      	movs	r2, #0
1005e904:	8800      	ldrh	r0, [r0, #0]
1005e906:	8068      	strh	r0, [r5, #2]
1005e908:	9500      	str	r5, [sp, #0]
1005e90a:	2300      	movs	r3, #0
1005e90c:	4620      	mov	r0, r4
1005e90e:	f000 f9cb 	bl	1005eca8 <LL_adjust_max_tx_data_frag>
1005e912:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005e914 <LL_compute_phy_upd_ind>:
1005e914:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e916:	460d      	mov	r5, r1
1005e918:	4604      	mov	r4, r0
1005e91a:	f7fb fd3b 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005e91e:	4606      	mov	r6, r0
1005e920:	7928      	ldrb	r0, [r5, #4]
1005e922:	2801      	cmp	r0, #1
1005e924:	9002      	str	r0, [sp, #8]
1005e926:	d114      	bne.n	1005e952 <LL_compute_phy_upd_ind+0x3e>
1005e928:	2500      	movs	r5, #0
1005e92a:	4620      	mov	r0, r4
1005e92c:	4629      	mov	r1, r5
1005e92e:	f7fd fbb6 	bl	1005c09e <LL_cpe_get_cntxt>
1005e932:	4607      	mov	r7, r0
1005e934:	7d02      	ldrb	r2, [r0, #20]
1005e936:	7cc3      	ldrb	r3, [r0, #19]
1005e938:	4293      	cmp	r3, r2
1005e93a:	9501      	str	r5, [sp, #4]
1005e93c:	d105      	bne.n	1005e94a <LL_compute_phy_upd_ind+0x36>
1005e93e:	2b03      	cmp	r3, #3
1005e940:	d302      	bcc.n	1005e948 <LL_compute_phy_upd_ind+0x34>
1005e942:	2b04      	cmp	r3, #4
1005e944:	9d01      	ldr	r5, [sp, #4]
1005e946:	d100      	bne.n	1005e94a <LL_compute_phy_upd_ind+0x36>
1005e948:	2501      	movs	r5, #1
1005e94a:	78f0      	ldrb	r0, [r6, #3]
1005e94c:	4018      	ands	r0, r3
1005e94e:	78b3      	ldrb	r3, [r6, #2]
1005e950:	e014      	b.n	1005e97c <LL_compute_phy_upd_ind+0x68>
1005e952:	2101      	movs	r1, #1
1005e954:	4620      	mov	r0, r4
1005e956:	9101      	str	r1, [sp, #4]
1005e958:	f7fd fba1 	bl	1005c09e <LL_cpe_get_cntxt>
1005e95c:	4607      	mov	r7, r0
1005e95e:	78ab      	ldrb	r3, [r5, #2]
1005e960:	7543      	strb	r3, [r0, #21]
1005e962:	78ea      	ldrb	r2, [r5, #3]
1005e964:	7582      	strb	r2, [r0, #22]
1005e966:	2500      	movs	r5, #0
1005e968:	4293      	cmp	r3, r2
1005e96a:	d104      	bne.n	1005e976 <LL_compute_phy_upd_ind+0x62>
1005e96c:	2b03      	cmp	r3, #3
1005e96e:	d301      	bcc.n	1005e974 <LL_compute_phy_upd_ind+0x60>
1005e970:	2b04      	cmp	r3, #4
1005e972:	d100      	bne.n	1005e976 <LL_compute_phy_upd_ind+0x62>
1005e974:	2501      	movs	r5, #1
1005e976:	7d38      	ldrb	r0, [r7, #20]
1005e978:	4018      	ands	r0, r3
1005e97a:	7cfb      	ldrb	r3, [r7, #19]
1005e97c:	4013      	ands	r3, r2
1005e97e:	2d00      	cmp	r5, #0
1005e980:	d002      	beq.n	1005e988 <LL_compute_phy_upd_ind+0x74>
1005e982:	4283      	cmp	r3, r0
1005e984:	4603      	mov	r3, r0
1005e986:	d107      	bne.n	1005e998 <LL_compute_phy_upd_ind+0x84>
1005e988:	2100      	movs	r1, #0
1005e98a:	2b00      	cmp	r3, #0
1005e98c:	460a      	mov	r2, r1
1005e98e:	d00a      	beq.n	1005e9a6 <LL_compute_phy_upd_ind+0x92>
1005e990:	07da      	lsls	r2, r3, #31
1005e992:	d004      	beq.n	1005e99e <LL_compute_phy_upd_ind+0x8a>
1005e994:	2201      	movs	r2, #1
1005e996:	e003      	b.n	1005e9a0 <LL_compute_phy_upd_ind+0x8c>
1005e998:	2200      	movs	r2, #0
1005e99a:	4611      	mov	r1, r2
1005e99c:	e00d      	b.n	1005e9ba <LL_compute_phy_upd_ind+0xa6>
1005e99e:	2204      	movs	r2, #4
1005e9a0:	079b      	lsls	r3, r3, #30
1005e9a2:	d500      	bpl.n	1005e9a6 <LL_compute_phy_upd_ind+0x92>
1005e9a4:	2202      	movs	r2, #2
1005e9a6:	2800      	cmp	r0, #0
1005e9a8:	d007      	beq.n	1005e9ba <LL_compute_phy_upd_ind+0xa6>
1005e9aa:	07c1      	lsls	r1, r0, #31
1005e9ac:	d001      	beq.n	1005e9b2 <LL_compute_phy_upd_ind+0x9e>
1005e9ae:	2101      	movs	r1, #1
1005e9b0:	e000      	b.n	1005e9b4 <LL_compute_phy_upd_ind+0xa0>
1005e9b2:	2104      	movs	r1, #4
1005e9b4:	0780      	lsls	r0, r0, #30
1005e9b6:	d500      	bpl.n	1005e9ba <LL_compute_phy_upd_ind+0xa6>
1005e9b8:	2102      	movs	r1, #2
1005e9ba:	79b3      	ldrb	r3, [r6, #6]
1005e9bc:	2000      	movs	r0, #0
1005e9be:	429a      	cmp	r2, r3
1005e9c0:	4603      	mov	r3, r0
1005e9c2:	d000      	beq.n	1005e9c6 <LL_compute_phy_upd_ind+0xb2>
1005e9c4:	4613      	mov	r3, r2
1005e9c6:	7233      	strb	r3, [r6, #8]
1005e9c8:	79f2      	ldrb	r2, [r6, #7]
1005e9ca:	4291      	cmp	r1, r2
1005e9cc:	d000      	beq.n	1005e9d0 <LL_compute_phy_upd_ind+0xbc>
1005e9ce:	4608      	mov	r0, r1
1005e9d0:	7270      	strb	r0, [r6, #9]
1005e9d2:	4620      	mov	r0, r4
1005e9d4:	f7fb fcaa 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005e9d8:	4605      	mov	r5, r0
1005e9da:	7a70      	ldrb	r0, [r6, #9]
1005e9dc:	2800      	cmp	r0, #0
1005e9de:	d102      	bne.n	1005e9e6 <LL_compute_phy_upd_ind+0xd2>
1005e9e0:	7a30      	ldrb	r0, [r6, #8]
1005e9e2:	2800      	cmp	r0, #0
1005e9e4:	d015      	beq.n	1005ea12 <LL_compute_phy_upd_ind+0xfe>
1005e9e6:	4620      	mov	r0, r4
1005e9e8:	f7fe f922 	bl	1005cc30 <llc_cpe_calc_instant>
1005e9ec:	2198      	movs	r1, #152	@ 0x98
1005e9ee:	5268      	strh	r0, [r5, r1]
1005e9f0:	7a31      	ldrb	r1, [r6, #8]
1005e9f2:	2900      	cmp	r1, #0
1005e9f4:	d010      	beq.n	1005ea18 <LL_compute_phy_upd_ind+0x104>
1005e9f6:	79f0      	ldrb	r0, [r6, #7]
1005e9f8:	9700      	str	r7, [sp, #0]
1005e9fa:	4008      	ands	r0, r1
1005e9fc:	0740      	lsls	r0, r0, #29
1005e9fe:	0fc2      	lsrs	r2, r0, #31
1005ea00:	2301      	movs	r3, #1
1005ea02:	4620      	mov	r0, r4
1005ea04:	f000 f950 	bl	1005eca8 <LL_adjust_max_tx_data_frag>
1005ea08:	7a31      	ldrb	r1, [r6, #8]
1005ea0a:	4620      	mov	r0, r4
1005ea0c:	f7fe fd81 	bl	1005d512 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005ea10:	e002      	b.n	1005ea18 <LL_compute_phy_upd_ind+0x104>
1005ea12:	2098      	movs	r0, #152	@ 0x98
1005ea14:	2100      	movs	r1, #0
1005ea16:	5229      	strh	r1, [r5, r0]
1005ea18:	9802      	ldr	r0, [sp, #8]
1005ea1a:	2801      	cmp	r0, #1
1005ea1c:	d009      	beq.n	1005ea32 <LL_compute_phy_upd_ind+0x11e>
1005ea1e:	4620      	mov	r0, r4
1005ea20:	9d01      	ldr	r5, [sp, #4]
1005ea22:	4629      	mov	r1, r5
1005ea24:	f7fd fb2e 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005ea28:	2202      	movs	r2, #2
1005ea2a:	4620      	mov	r0, r4
1005ea2c:	4629      	mov	r1, r5
1005ea2e:	f7fd fb19 	bl	1005c064 <LL_cpe_set_blocked>
1005ea32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005ea34 <LL_process_unknown_rsp_reject_ind_rcpt>:
1005ea34:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005ea36:	460d      	mov	r5, r1
1005ea38:	4606      	mov	r6, r0
1005ea3a:	f7fb fcab 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005ea3e:	4604      	mov	r4, r0
1005ea40:	4630      	mov	r0, r6
1005ea42:	f7fb fc73 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005ea46:	78a9      	ldrb	r1, [r5, #2]
1005ea48:	2907      	cmp	r1, #7
1005ea4a:	d107      	bne.n	1005ea5c <LL_process_unknown_rsp_reject_ind_rcpt+0x28>
1005ea4c:	21ff      	movs	r1, #255	@ 0xff
1005ea4e:	3130      	adds	r1, #48	@ 0x30
1005ea50:	5c42      	ldrb	r2, [r0, r1]
1005ea52:	23f6      	movs	r3, #246	@ 0xf6
1005ea54:	4013      	ands	r3, r2
1005ea56:	5443      	strb	r3, [r0, r1]
1005ea58:	211a      	movs	r1, #26
1005ea5a:	e000      	b.n	1005ea5e <LL_process_unknown_rsp_reject_ind_rcpt+0x2a>
1005ea5c:	7869      	ldrb	r1, [r5, #1]
1005ea5e:	78ea      	ldrb	r2, [r5, #3]
1005ea60:	2a00      	cmp	r2, #0
1005ea62:	d000      	beq.n	1005ea66 <LL_process_unknown_rsp_reject_ind_rcpt+0x32>
1005ea64:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005ea66:	79e6      	ldrb	r6, [r4, #7]
1005ea68:	2503      	movs	r5, #3
1005ea6a:	0772      	lsls	r2, r6, #29
1005ea6c:	d500      	bpl.n	1005ea70 <LL_process_unknown_rsp_reject_ind_rcpt+0x3c>
1005ea6e:	462e      	mov	r6, r5
1005ea70:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
1005ea72:	79a3      	ldrb	r3, [r4, #6]
1005ea74:	9600      	str	r6, [sp, #0]
1005ea76:	0758      	lsls	r0, r3, #29
1005ea78:	d500      	bpl.n	1005ea7c <LL_process_unknown_rsp_reject_ind_rcpt+0x48>
1005ea7a:	462b      	mov	r3, r5
1005ea7c:	2080      	movs	r0, #128	@ 0x80
1005ea7e:	f000 f8dd 	bl	1005ec3c <hci_le_phy_update_complete_event_push>
1005ea82:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005ea84 <LL_process_phy_req_rcpt>:
1005ea84:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ea86:	b085      	sub	sp, #20
1005ea88:	460f      	mov	r7, r1
1005ea8a:	4604      	mov	r4, r0
1005ea8c:	f7fb fc4e 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005ea90:	4605      	mov	r5, r0
1005ea92:	2100      	movs	r1, #0
1005ea94:	4620      	mov	r0, r4
1005ea96:	9102      	str	r1, [sp, #8]
1005ea98:	f7fd fb01 	bl	1005c09e <LL_cpe_get_cntxt>
1005ea9c:	4606      	mov	r6, r0
1005ea9e:	2001      	movs	r0, #1
1005eaa0:	9001      	str	r0, [sp, #4]
1005eaa2:	7470      	strb	r0, [r6, #17]
1005eaa4:	78b8      	ldrb	r0, [r7, #2]
1005eaa6:	74f0      	strb	r0, [r6, #19]
1005eaa8:	78f8      	ldrb	r0, [r7, #3]
1005eaaa:	7530      	strb	r0, [r6, #20]
1005eaac:	20b6      	movs	r0, #182	@ 0xb6
1005eaae:	5a28      	ldrh	r0, [r5, r0]
1005eab0:	81f0      	strh	r0, [r6, #14]
1005eab2:	a803      	add	r0, sp, #12
1005eab4:	7104      	strb	r4, [r0, #4]
1005eab6:	9603      	str	r6, [sp, #12]
1005eab8:	f7ff fc90 	bl	1005e3dc <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>
1005eabc:	202c      	movs	r0, #44	@ 0x2c
1005eabe:	5c28      	ldrb	r0, [r5, r0]
1005eac0:	352c      	adds	r5, #44	@ 0x2c
1005eac2:	2802      	cmp	r0, #2
1005eac4:	d108      	bne.n	1005ead8 <LL_process_phy_req_rcpt+0x54>
1005eac6:	7c70      	ldrb	r0, [r6, #17]
1005eac8:	7138      	strb	r0, [r7, #4]
1005eaca:	4620      	mov	r0, r4
1005eacc:	4639      	mov	r1, r7
1005eace:	f7ff ff21 	bl	1005e914 <LL_compute_phy_upd_ind>
1005ead2:	9802      	ldr	r0, [sp, #8]
1005ead4:	7430      	strb	r0, [r6, #16]
1005ead6:	e025      	b.n	1005eb24 <LL_process_phy_req_rcpt+0xa0>
1005ead8:	4620      	mov	r0, r4
1005eada:	f7fb fc5b 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005eade:	7881      	ldrb	r1, [r0, #2]
1005eae0:	7571      	strb	r1, [r6, #21]
1005eae2:	78c7      	ldrb	r7, [r0, #3]
1005eae4:	75b7      	strb	r7, [r6, #22]
1005eae6:	7d33      	ldrb	r3, [r6, #20]
1005eae8:	400b      	ands	r3, r1
1005eaea:	b2db      	uxtb	r3, r3
1005eaec:	2b00      	cmp	r3, #0
1005eaee:	d019      	beq.n	1005eb24 <LL_process_phy_req_rcpt+0xa0>
1005eaf0:	7981      	ldrb	r1, [r0, #6]
1005eaf2:	428b      	cmp	r3, r1
1005eaf4:	d016      	beq.n	1005eb24 <LL_process_phy_req_rcpt+0xa0>
1005eaf6:	07d9      	lsls	r1, r3, #31
1005eaf8:	d002      	beq.n	1005eb00 <LL_process_phy_req_rcpt+0x7c>
1005eafa:	9a01      	ldr	r2, [sp, #4]
1005eafc:	4611      	mov	r1, r2
1005eafe:	e001      	b.n	1005eb04 <LL_process_phy_req_rcpt+0x80>
1005eb00:	2102      	movs	r1, #2
1005eb02:	9a01      	ldr	r2, [sp, #4]
1005eb04:	075b      	lsls	r3, r3, #29
1005eb06:	d500      	bpl.n	1005eb0a <LL_process_phy_req_rcpt+0x86>
1005eb08:	2104      	movs	r1, #4
1005eb0a:	7cf3      	ldrb	r3, [r6, #19]
1005eb0c:	401f      	ands	r7, r3
1005eb0e:	077b      	lsls	r3, r7, #29
1005eb10:	d403      	bmi.n	1005eb1a <LL_process_phy_req_rcpt+0x96>
1005eb12:	79c0      	ldrb	r0, [r0, #7]
1005eb14:	1f00      	subs	r0, r0, #4
1005eb16:	4242      	negs	r2, r0
1005eb18:	4142      	adcs	r2, r0
1005eb1a:	9600      	str	r6, [sp, #0]
1005eb1c:	2301      	movs	r3, #1
1005eb1e:	4620      	mov	r0, r4
1005eb20:	f000 f8c2 	bl	1005eca8 <LL_adjust_max_tx_data_frag>
1005eb24:	2600      	movs	r6, #0
1005eb26:	4620      	mov	r0, r4
1005eb28:	4631      	mov	r1, r6
1005eb2a:	f7fd faab 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005eb2e:	2207      	movs	r2, #7
1005eb30:	2301      	movs	r3, #1
1005eb32:	4620      	mov	r0, r4
1005eb34:	4631      	mov	r1, r6
1005eb36:	f7fd fa5c 	bl	1005bff2 <LL_cpe_set_active>
1005eb3a:	7828      	ldrb	r0, [r5, #0]
1005eb3c:	2802      	cmp	r0, #2
1005eb3e:	d104      	bne.n	1005eb4a <LL_process_phy_req_rcpt+0xc6>
1005eb40:	2100      	movs	r1, #0
1005eb42:	2202      	movs	r2, #2
1005eb44:	4620      	mov	r0, r4
1005eb46:	f7fd fa8d 	bl	1005c064 <LL_cpe_set_blocked>
1005eb4a:	b005      	add	sp, #20
1005eb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005eb50 <LL_phy_upd_evt_pending_check_isr>:
1005eb50:	b5f0      	push	{r4, r5, r6, r7, lr}
1005eb52:	b087      	sub	sp, #28
1005eb54:	4605      	mov	r5, r0
1005eb56:	f7fb fbe9 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005eb5a:	4604      	mov	r4, r0
1005eb5c:	4628      	mov	r0, r5
1005eb5e:	f7fb fc19 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005eb62:	4605      	mov	r5, r0
1005eb64:	209a      	movs	r0, #154	@ 0x9a
1005eb66:	5a26      	ldrh	r6, [r4, r0]
1005eb68:	05b0      	lsls	r0, r6, #22
1005eb6a:	4627      	mov	r7, r4
1005eb6c:	379a      	adds	r7, #154	@ 0x9a
1005eb6e:	2800      	cmp	r0, #0
1005eb70:	d545      	bpl.n	1005ebfe <LL_phy_upd_evt_pending_check_isr+0xae>
1005eb72:	482e      	ldr	r0, [pc, #184]	@ (1005ec2c <__arm_cp.15_0>)
1005eb74:	6800      	ldr	r0, [r0, #0]
1005eb76:	213d      	movs	r1, #61	@ 0x3d
1005eb78:	5c41      	ldrb	r1, [r0, r1]
1005eb7a:	0689      	lsls	r1, r1, #26
1005eb7c:	d53b      	bpl.n	1005ebf6 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005eb7e:	303d      	adds	r0, #61	@ 0x3d
1005eb80:	7a40      	ldrb	r0, [r0, #9]
1005eb82:	0640      	lsls	r0, r0, #25
1005eb84:	d537      	bpl.n	1005ebf6 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005eb86:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
1005eb88:	9002      	str	r0, [sp, #8]
1005eb8a:	8bf8      	ldrh	r0, [r7, #30]
1005eb8c:	9003      	str	r0, [sp, #12]
1005eb8e:	8c38      	ldrh	r0, [r7, #32]
1005eb90:	9004      	str	r0, [sp, #16]
1005eb92:	8b78      	ldrh	r0, [r7, #26]
1005eb94:	9005      	str	r0, [sp, #20]
1005eb96:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
1005eb98:	9006      	str	r0, [sp, #24]
1005eb9a:	4825      	ldr	r0, [pc, #148]	@ (1005ec30 <__arm_cp.15_1>)
1005eb9c:	6800      	ldr	r0, [r0, #0]
1005eb9e:	6900      	ldr	r0, [r0, #16]
1005eba0:	2180      	movs	r1, #128	@ 0x80
1005eba2:	2226      	movs	r2, #38	@ 0x26
1005eba4:	2304      	movs	r3, #4
1005eba6:	9301      	str	r3, [sp, #4]
1005eba8:	f7f6 fc9a 	bl	100554e0 <aci_event_fifo_push_header>
1005ebac:	2800      	cmp	r0, #0
1005ebae:	d022      	beq.n	1005ebf6 <LL_phy_upd_evt_pending_check_isr+0xa6>
1005ebb0:	4601      	mov	r1, r0
1005ebb2:	9a02      	ldr	r2, [sp, #8]
1005ebb4:	7402      	strb	r2, [r0, #16]
1005ebb6:	9b03      	ldr	r3, [sp, #12]
1005ebb8:	7383      	strb	r3, [r0, #14]
1005ebba:	9804      	ldr	r0, [sp, #16]
1005ebbc:	7308      	strb	r0, [r1, #12]
1005ebbe:	9805      	ldr	r0, [sp, #20]
1005ebc0:	7288      	strb	r0, [r1, #10]
1005ebc2:	9806      	ldr	r0, [sp, #24]
1005ebc4:	7208      	strb	r0, [r1, #8]
1005ebc6:	2007      	movs	r0, #7
1005ebc8:	71c8      	strb	r0, [r1, #7]
1005ebca:	200b      	movs	r0, #11
1005ebcc:	7188      	strb	r0, [r1, #6]
1005ebce:	203e      	movs	r0, #62	@ 0x3e
1005ebd0:	7148      	strb	r0, [r1, #5]
1005ebd2:	9801      	ldr	r0, [sp, #4]
1005ebd4:	7108      	strb	r0, [r1, #4]
1005ebd6:	0a10      	lsrs	r0, r2, #8
1005ebd8:	7448      	strb	r0, [r1, #17]
1005ebda:	0a18      	lsrs	r0, r3, #8
1005ebdc:	73c8      	strb	r0, [r1, #15]
1005ebde:	9804      	ldr	r0, [sp, #16]
1005ebe0:	0a00      	lsrs	r0, r0, #8
1005ebe2:	7348      	strb	r0, [r1, #13]
1005ebe4:	9805      	ldr	r0, [sp, #20]
1005ebe6:	0a00      	lsrs	r0, r0, #8
1005ebe8:	72c8      	strb	r0, [r1, #11]
1005ebea:	9806      	ldr	r0, [sp, #24]
1005ebec:	0a00      	lsrs	r0, r0, #8
1005ebee:	7248      	strb	r0, [r1, #9]
1005ebf0:	2080      	movs	r0, #128	@ 0x80
1005ebf2:	f7f6 fd12 	bl	1005561a <aci_event_fifo_push>
1005ebf6:	8838      	ldrh	r0, [r7, #0]
1005ebf8:	490e      	ldr	r1, [pc, #56]	@ (1005ec34 <__arm_cp.15_2>)
1005ebfa:	4001      	ands	r1, r0
1005ebfc:	8039      	strh	r1, [r7, #0]
1005ebfe:	05f0      	lsls	r0, r6, #23
1005ec00:	d512      	bpl.n	1005ec28 <LL_phy_upd_evt_pending_check_isr+0xd8>
1005ec02:	79e9      	ldrb	r1, [r5, #7]
1005ec04:	2003      	movs	r0, #3
1005ec06:	074a      	lsls	r2, r1, #29
1005ec08:	d500      	bpl.n	1005ec0c <LL_phy_upd_evt_pending_check_isr+0xbc>
1005ec0a:	4601      	mov	r1, r0
1005ec0c:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
1005ec0e:	79ab      	ldrb	r3, [r5, #6]
1005ec10:	9100      	str	r1, [sp, #0]
1005ec12:	0759      	lsls	r1, r3, #29
1005ec14:	d500      	bpl.n	1005ec18 <LL_phy_upd_evt_pending_check_isr+0xc8>
1005ec16:	4603      	mov	r3, r0
1005ec18:	2080      	movs	r0, #128	@ 0x80
1005ec1a:	2100      	movs	r1, #0
1005ec1c:	f000 f80e 	bl	1005ec3c <hci_le_phy_update_complete_event_push>
1005ec20:	8838      	ldrh	r0, [r7, #0]
1005ec22:	4905      	ldr	r1, [pc, #20]	@ (1005ec38 <__arm_cp.15_3>)
1005ec24:	4001      	ands	r1, r0
1005ec26:	8039      	strh	r1, [r7, #0]
1005ec28:	b007      	add	sp, #28
1005ec2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ec2c <__arm_cp.15_0>:
1005ec2c:	20002468 	.word	0x20002468

1005ec30 <__arm_cp.15_1>:
1005ec30:	20002418 	.word	0x20002418

1005ec34 <__arm_cp.15_2>:
1005ec34:	0000fdff 	.word	0x0000fdff

1005ec38 <__arm_cp.15_3>:
1005ec38:	0000feff 	.word	0x0000feff

1005ec3c <hci_le_phy_update_complete_event_push>:
1005ec3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ec3e:	4604      	mov	r4, r0
1005ec40:	06c0      	lsls	r0, r0, #27
1005ec42:	d42c      	bmi.n	1005ec9e <hci_le_phy_update_complete_event_push+0x62>
1005ec44:	460f      	mov	r7, r1
1005ec46:	4816      	ldr	r0, [pc, #88]	@ (1005eca0 <__arm_cp.16_0>)
1005ec48:	6800      	ldr	r0, [r0, #0]
1005ec4a:	213d      	movs	r1, #61	@ 0x3d
1005ec4c:	5c41      	ldrb	r1, [r0, r1]
1005ec4e:	0689      	lsls	r1, r1, #26
1005ec50:	d525      	bpl.n	1005ec9e <hci_le_phy_update_complete_event_push+0x62>
1005ec52:	303d      	adds	r0, #61	@ 0x3d
1005ec54:	7a80      	ldrb	r0, [r0, #10]
1005ec56:	0700      	lsls	r0, r0, #28
1005ec58:	d521      	bpl.n	1005ec9e <hci_le_phy_update_complete_event_push+0x62>
1005ec5a:	461e      	mov	r6, r3
1005ec5c:	4615      	mov	r5, r2
1005ec5e:	4811      	ldr	r0, [pc, #68]	@ (1005eca4 <__arm_cp.16_1>)
1005ec60:	6800      	ldr	r0, [r0, #0]
1005ec62:	0761      	lsls	r1, r4, #29
1005ec64:	0ec9      	lsrs	r1, r1, #27
1005ec66:	1840      	adds	r0, r0, r1
1005ec68:	6900      	ldr	r0, [r0, #16]
1005ec6a:	2227      	movs	r2, #39	@ 0x27
1005ec6c:	2303      	movs	r3, #3
1005ec6e:	4621      	mov	r1, r4
1005ec70:	f7f6 fc36 	bl	100554e0 <aci_event_fifo_push_header>
1005ec74:	2800      	cmp	r0, #0
1005ec76:	d012      	beq.n	1005ec9e <hci_le_phy_update_complete_event_push+0x62>
1005ec78:	4601      	mov	r1, r0
1005ec7a:	9806      	ldr	r0, [sp, #24]
1005ec7c:	724d      	strb	r5, [r1, #9]
1005ec7e:	7308      	strb	r0, [r1, #12]
1005ec80:	72ce      	strb	r6, [r1, #11]
1005ec82:	720f      	strb	r7, [r1, #8]
1005ec84:	200c      	movs	r0, #12
1005ec86:	71c8      	strb	r0, [r1, #7]
1005ec88:	2006      	movs	r0, #6
1005ec8a:	7188      	strb	r0, [r1, #6]
1005ec8c:	203e      	movs	r0, #62	@ 0x3e
1005ec8e:	7148      	strb	r0, [r1, #5]
1005ec90:	2004      	movs	r0, #4
1005ec92:	7108      	strb	r0, [r1, #4]
1005ec94:	0a28      	lsrs	r0, r5, #8
1005ec96:	7288      	strb	r0, [r1, #10]
1005ec98:	4620      	mov	r0, r4
1005ec9a:	f7f6 fcbe 	bl	1005561a <aci_event_fifo_push>
1005ec9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005eca0 <__arm_cp.16_0>:
1005eca0:	20002468 	.word	0x20002468

1005eca4 <__arm_cp.16_1>:
1005eca4:	20002418 	.word	0x20002418

1005eca8 <LL_adjust_max_tx_data_frag>:
1005eca8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ecaa:	9302      	str	r3, [sp, #8]
1005ecac:	9201      	str	r2, [sp, #4]
1005ecae:	460e      	mov	r6, r1
1005ecb0:	4605      	mov	r5, r0
1005ecb2:	f7fb fb3b 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005ecb6:	4604      	mov	r4, r0
1005ecb8:	4607      	mov	r7, r0
1005ecba:	34b4      	adds	r4, #180	@ 0xb4
1005ecbc:	4628      	mov	r0, r5
1005ecbe:	f7fb fb69 	bl	1005a394 <llc_conn_get_phy_upd_cntxt_per_p>
1005ecc2:	9908      	ldr	r1, [sp, #32]
1005ecc4:	2e04      	cmp	r6, #4
1005ecc6:	d106      	bne.n	1005ecd6 <LL_adjust_max_tx_data_frag+0x2e>
1005ecc8:	2800      	cmp	r0, #0
1005ecca:	d004      	beq.n	1005ecd6 <LL_adjust_max_tx_data_frag+0x2e>
1005eccc:	9a01      	ldr	r2, [sp, #4]
1005ecce:	2a00      	cmp	r2, #0
1005ecd0:	d00c      	beq.n	1005ecec <LL_adjust_max_tx_data_frag+0x44>
1005ecd2:	220a      	movs	r2, #10
1005ecd4:	e00b      	b.n	1005ecee <LL_adjust_max_tx_data_frag+0x46>
1005ecd6:	8888      	ldrh	r0, [r1, #4]
1005ecd8:	8008      	strh	r0, [r1, #0]
1005ecda:	2e01      	cmp	r6, #1
1005ecdc:	d102      	bne.n	1005ece4 <LL_adjust_max_tx_data_frag+0x3c>
1005ecde:	08c0      	lsrs	r0, r0, #3
1005ece0:	380e      	subs	r0, #14
1005ece2:	e001      	b.n	1005ece8 <LL_adjust_max_tx_data_frag+0x40>
1005ece4:	0880      	lsrs	r0, r0, #2
1005ece6:	380f      	subs	r0, #15
1005ece8:	9e02      	ldr	r6, [sp, #8]
1005ecea:	e00f      	b.n	1005ed0c <LL_adjust_max_tx_data_frag+0x64>
1005ecec:	2208      	movs	r2, #8
1005ecee:	9e02      	ldr	r6, [sp, #8]
1005ecf0:	5a8a      	ldrh	r2, [r1, r2]
1005ecf2:	800a      	strh	r2, [r1, #0]
1005ecf4:	8800      	ldrh	r0, [r0, #0]
1005ecf6:	2802      	cmp	r0, #2
1005ecf8:	d001      	beq.n	1005ecfe <LL_adjust_max_tx_data_frag+0x56>
1005ecfa:	2001      	movs	r0, #1
1005ecfc:	e000      	b.n	1005ed00 <LL_adjust_max_tx_data_frag+0x58>
1005ecfe:	2003      	movs	r0, #3
1005ed00:	4b0b      	ldr	r3, [pc, #44]	@ (1005ed30 <__arm_cp.20_0>)
1005ed02:	18d2      	adds	r2, r2, r3
1005ed04:	40c2      	lsrs	r2, r0
1005ed06:	480b      	ldr	r0, [pc, #44]	@ (1005ed34 <__arm_cp.20_1>)
1005ed08:	1810      	adds	r0, r2, r0
1005ed0a:	08c0      	lsrs	r0, r0, #3
1005ed0c:	b283      	uxth	r3, r0
1005ed0e:	8822      	ldrh	r2, [r4, #0]
1005ed10:	429a      	cmp	r2, r3
1005ed12:	d300      	bcc.n	1005ed16 <LL_adjust_max_tx_data_frag+0x6e>
1005ed14:	4602      	mov	r2, r0
1005ed16:	2e00      	cmp	r6, #0
1005ed18:	d003      	beq.n	1005ed22 <LL_adjust_max_tx_data_frag+0x7a>
1005ed1a:	b293      	uxth	r3, r2
1005ed1c:	89c8      	ldrh	r0, [r1, #14]
1005ed1e:	4298      	cmp	r0, r3
1005ed20:	d300      	bcc.n	1005ed24 <LL_adjust_max_tx_data_frag+0x7c>
1005ed22:	4610      	mov	r0, r2
1005ed24:	8060      	strh	r0, [r4, #2]
1005ed26:	4638      	mov	r0, r7
1005ed28:	f7fb fdca 	bl	1005a8c0 <llc_conn_guard_time_for_close_conn_event>
1005ed2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ed2e:	46c0      	nop			@ (mov r8, r8)

1005ed30 <__arm_cp.20_0>:
1005ed30:	fffffe88 	.word	0xfffffe88

1005ed34 <__arm_cp.20_1>:
1005ed34:	0007ffb5 	.word	0x0007ffb5

1005ed38 <LL_version_exchange>:
1005ed38:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ed3a:	b087      	sub	sp, #28
1005ed3c:	461f      	mov	r7, r3
1005ed3e:	4616      	mov	r6, r2
1005ed40:	460c      	mov	r4, r1
1005ed42:	4605      	mov	r5, r0
1005ed44:	f7fd f9ab 	bl	1005c09e <LL_cpe_get_cntxt>
1005ed48:	9004      	str	r0, [sp, #16]
1005ed4a:	4628      	mov	r0, r5
1005ed4c:	f7fb faee 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005ed50:	22ff      	movs	r2, #255	@ 0xff
1005ed52:	2e06      	cmp	r6, #6
1005ed54:	d900      	bls.n	1005ed58 <LL_version_exchange+0x20>
1005ed56:	e0b2      	b.n	1005eebe <LL_version_exchange+0x186>
1005ed58:	4603      	mov	r3, r0
1005ed5a:	46c0      	nop			@ (mov r8, r8)
1005ed5c:	447e      	add	r6, pc
1005ed5e:	7936      	ldrb	r6, [r6, #4]
1005ed60:	0076      	lsls	r6, r6, #1
1005ed62:	44b7      	add	pc, r6
1005ed64:	3aac0e03 	.word	0x3aac0e03
1005ed68:	0053acac 	.word	0x0053acac
1005ed6c:	2c01      	cmp	r4, #1
1005ed6e:	d15c      	bne.n	1005ee2a <LL_version_exchange+0xf2>
1005ed70:	208c      	movs	r0, #140	@ 0x8c
1005ed72:	5818      	ldr	r0, [r3, r0]
1005ed74:	0601      	lsls	r1, r0, #24
1005ed76:	338c      	adds	r3, #140	@ 0x8c
1005ed78:	2900      	cmp	r1, #0
1005ed7a:	9904      	ldr	r1, [sp, #16]
1005ed7c:	d460      	bmi.n	1005ee40 <LL_version_exchange+0x108>
1005ed7e:	220c      	movs	r2, #12
1005ed80:	e06c      	b.n	1005ee5c <LL_version_exchange+0x124>
1005ed82:	9302      	str	r3, [sp, #8]
1005ed84:	9203      	str	r2, [sp, #12]
1005ed86:	4628      	mov	r0, r5
1005ed88:	f000 f8d4 	bl	1005ef34 <LL_conn_get_version_exchange_cached>
1005ed8c:	2800      	cmp	r0, #0
1005ed8e:	d000      	beq.n	1005ed92 <LL_version_exchange+0x5a>
1005ed90:	e094      	b.n	1005eebc <LL_version_exchange+0x184>
1005ed92:	1cf8      	adds	r0, r7, #3
1005ed94:	2205      	movs	r2, #5
1005ed96:	9201      	str	r2, [sp, #4]
1005ed98:	9e04      	ldr	r6, [sp, #16]
1005ed9a:	4631      	mov	r1, r6
1005ed9c:	f004 f872 	bl	10062e84 <char_copy>
1005eda0:	9f02      	ldr	r7, [sp, #8]
1005eda2:	4639      	mov	r1, r7
1005eda4:	313c      	adds	r1, #60	@ 0x3c
1005eda6:	4630      	mov	r0, r6
1005eda8:	9a01      	ldr	r2, [sp, #4]
1005edaa:	f004 f86b 	bl	10062e84 <char_copy>
1005edae:	208c      	movs	r0, #140	@ 0x8c
1005edb0:	5838      	ldr	r0, [r7, r0]
1005edb2:	0642      	lsls	r2, r0, #25
1005edb4:	4639      	mov	r1, r7
1005edb6:	318c      	adds	r1, #140	@ 0x8c
1005edb8:	2a00      	cmp	r2, #0
1005edba:	d46e      	bmi.n	1005ee9a <LL_version_exchange+0x162>
1005edbc:	2201      	movs	r2, #1
1005edbe:	0212      	lsls	r2, r2, #8
1005edc0:	4310      	orrs	r0, r2
1005edc2:	6008      	str	r0, [r1, #0]
1005edc4:	4628      	mov	r0, r5
1005edc6:	4621      	mov	r1, r4
1005edc8:	f7fd f95c 	bl	1005c084 <LL_cpe_set_prepare_tx_pdu>
1005edcc:	2205      	movs	r2, #5
1005edce:	2300      	movs	r3, #0
1005edd0:	4628      	mov	r0, r5
1005edd2:	4621      	mov	r1, r4
1005edd4:	f7fd f90d 	bl	1005bff2 <LL_cpe_set_active>
1005edd8:	e070      	b.n	1005eebc <LL_version_exchange+0x184>
1005edda:	78b8      	ldrb	r0, [r7, #2]
1005eddc:	280c      	cmp	r0, #12
1005edde:	d16e      	bne.n	1005eebe <LL_version_exchange+0x186>
1005ede0:	1cf8      	adds	r0, r7, #3
1005ede2:	2605      	movs	r6, #5
1005ede4:	9f04      	ldr	r7, [sp, #16]
1005ede6:	4639      	mov	r1, r7
1005ede8:	9203      	str	r2, [sp, #12]
1005edea:	4632      	mov	r2, r6
1005edec:	9302      	str	r3, [sp, #8]
1005edee:	f004 f849 	bl	10062e84 <char_copy>
1005edf2:	4628      	mov	r0, r5
1005edf4:	4621      	mov	r1, r4
1005edf6:	4632      	mov	r2, r6
1005edf8:	f7fd f912 	bl	1005c020 <LL_cpe_clr_active>
1005edfc:	9802      	ldr	r0, [sp, #8]
1005edfe:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005ee00:	4639      	mov	r1, r7
1005ee02:	f000 f86f 	bl	1005eee4 <hci_read_remote_version_information_complete_event_push>
1005ee06:	4628      	mov	r0, r5
1005ee08:	4639      	mov	r1, r7
1005ee0a:	e055      	b.n	1005eeb8 <LL_version_exchange+0x180>
1005ee0c:	4616      	mov	r6, r2
1005ee0e:	a806      	add	r0, sp, #24
1005ee10:	2130      	movs	r1, #48	@ 0x30
1005ee12:	8001      	strh	r1, [r0, #0]
1005ee14:	2c01      	cmp	r4, #1
1005ee16:	d12a      	bne.n	1005ee6e <LL_version_exchange+0x136>
1005ee18:	208c      	movs	r0, #140	@ 0x8c
1005ee1a:	5818      	ldr	r0, [r3, r0]
1005ee1c:	05c1      	lsls	r1, r0, #23
1005ee1e:	d421      	bmi.n	1005ee64 <LL_version_exchange+0x12c>
1005ee20:	338c      	adds	r3, #140	@ 0x8c
1005ee22:	2140      	movs	r1, #64	@ 0x40
1005ee24:	4308      	orrs	r0, r1
1005ee26:	6018      	str	r0, [r3, #0]
1005ee28:	e021      	b.n	1005ee6e <LL_version_exchange+0x136>
1005ee2a:	4616      	mov	r6, r2
1005ee2c:	2205      	movs	r2, #5
1005ee2e:	4628      	mov	r0, r5
1005ee30:	4621      	mov	r1, r4
1005ee32:	f7fd f8f5 	bl	1005c020 <LL_cpe_clr_active>
1005ee36:	4628      	mov	r0, r5
1005ee38:	9904      	ldr	r1, [sp, #16]
1005ee3a:	f000 f843 	bl	1005eec4 <LL_conn_version_exchange_set_cached>
1005ee3e:	e02a      	b.n	1005ee96 <LL_version_exchange+0x15e>
1005ee40:	4628      	mov	r0, r5
1005ee42:	461c      	mov	r4, r3
1005ee44:	f000 f83e 	bl	1005eec4 <LL_conn_version_exchange_set_cached>
1005ee48:	2101      	movs	r1, #1
1005ee4a:	2205      	movs	r2, #5
1005ee4c:	4628      	mov	r0, r5
1005ee4e:	f7fd f8e7 	bl	1005c020 <LL_cpe_clr_active>
1005ee52:	4623      	mov	r3, r4
1005ee54:	6820      	ldr	r0, [r4, #0]
1005ee56:	2180      	movs	r1, #128	@ 0x80
1005ee58:	4388      	bics	r0, r1
1005ee5a:	22ff      	movs	r2, #255	@ 0xff
1005ee5c:	2140      	movs	r1, #64	@ 0x40
1005ee5e:	4388      	bics	r0, r1
1005ee60:	6018      	str	r0, [r3, #0]
1005ee62:	e02c      	b.n	1005eebe <LL_version_exchange+0x186>
1005ee64:	2101      	movs	r1, #1
1005ee66:	2205      	movs	r2, #5
1005ee68:	4628      	mov	r0, r5
1005ee6a:	f7fd f8d9 	bl	1005c020 <LL_cpe_clr_active>
1005ee6e:	200d      	movs	r0, #13
1005ee70:	70f8      	strb	r0, [r7, #3]
1005ee72:	200c      	movs	r0, #12
1005ee74:	70b8      	strb	r0, [r7, #2]
1005ee76:	2006      	movs	r0, #6
1005ee78:	7078      	strb	r0, [r7, #1]
1005ee7a:	2503      	movs	r5, #3
1005ee7c:	703d      	strb	r5, [r7, #0]
1005ee7e:	1d39      	adds	r1, r7, #4
1005ee80:	a806      	add	r0, sp, #24
1005ee82:	2402      	movs	r4, #2
1005ee84:	4622      	mov	r2, r4
1005ee86:	f003 fffd 	bl	10062e84 <char_copy>
1005ee8a:	a805      	add	r0, sp, #20
1005ee8c:	8005      	strh	r5, [r0, #0]
1005ee8e:	1db9      	adds	r1, r7, #6
1005ee90:	4622      	mov	r2, r4
1005ee92:	f003 fff7 	bl	10062e84 <char_copy>
1005ee96:	4632      	mov	r2, r6
1005ee98:	e011      	b.n	1005eebe <LL_version_exchange+0x186>
1005ee9a:	2280      	movs	r2, #128	@ 0x80
1005ee9c:	4310      	orrs	r0, r2
1005ee9e:	6008      	str	r0, [r1, #0]
1005eea0:	2205      	movs	r2, #5
1005eea2:	4628      	mov	r0, r5
1005eea4:	4621      	mov	r1, r4
1005eea6:	463c      	mov	r4, r7
1005eea8:	f7fd f8ba 	bl	1005c020 <LL_cpe_clr_active>
1005eeac:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
1005eeae:	4631      	mov	r1, r6
1005eeb0:	f000 f818 	bl	1005eee4 <hci_read_remote_version_information_complete_event_push>
1005eeb4:	4628      	mov	r0, r5
1005eeb6:	4631      	mov	r1, r6
1005eeb8:	f000 f804 	bl	1005eec4 <LL_conn_version_exchange_set_cached>
1005eebc:	9a03      	ldr	r2, [sp, #12]
1005eebe:	4610      	mov	r0, r2
1005eec0:	b007      	add	sp, #28
1005eec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005eec4 <LL_conn_version_exchange_set_cached>:
1005eec4:	b510      	push	{r4, lr}
1005eec6:	460c      	mov	r4, r1
1005eec8:	f7fb fa30 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005eecc:	4601      	mov	r1, r0
1005eece:	208c      	movs	r0, #140	@ 0x8c
1005eed0:	580a      	ldr	r2, [r1, r0]
1005eed2:	2308      	movs	r3, #8
1005eed4:	4313      	orrs	r3, r2
1005eed6:	500b      	str	r3, [r1, r0]
1005eed8:	313c      	adds	r1, #60	@ 0x3c
1005eeda:	2205      	movs	r2, #5
1005eedc:	4620      	mov	r0, r4
1005eede:	f003 ffd1 	bl	10062e84 <char_copy>
1005eee2:	bd10      	pop	{r4, pc}

1005eee4 <hci_read_remote_version_information_complete_event_push>:
1005eee4:	b570      	push	{r4, r5, r6, lr}
1005eee6:	460c      	mov	r4, r1
1005eee8:	4605      	mov	r5, r0
1005eeea:	4810      	ldr	r0, [pc, #64]	@ (1005ef2c <__arm_cp.2_0>)
1005eeec:	6800      	ldr	r0, [r0, #0]
1005eeee:	2137      	movs	r1, #55	@ 0x37
1005eef0:	5c40      	ldrb	r0, [r0, r1]
1005eef2:	0700      	lsls	r0, r0, #28
1005eef4:	d519      	bpl.n	1005ef2a <hci_read_remote_version_information_complete_event_push+0x46>
1005eef6:	480e      	ldr	r0, [pc, #56]	@ (1005ef30 <__arm_cp.2_1>)
1005eef8:	6800      	ldr	r0, [r0, #0]
1005eefa:	6980      	ldr	r0, [r0, #24]
1005eefc:	2102      	movs	r1, #2
1005eefe:	2221      	movs	r2, #33	@ 0x21
1005ef00:	2303      	movs	r3, #3
1005ef02:	f7f6 faed 	bl	100554e0 <aci_event_fifo_push_header>
1005ef06:	2800      	cmp	r0, #0
1005ef08:	d00f      	beq.n	1005ef2a <hci_read_remote_version_information_complete_event_push+0x46>
1005ef0a:	4606      	mov	r6, r0
1005ef0c:	1d00      	adds	r0, r0, #4
1005ef0e:	4629      	mov	r1, r5
1005ef10:	4622      	mov	r2, r4
1005ef12:	f7f6 fe07 	bl	10055b24 <hci_read_remote_version_information_complete_event_copy>
1005ef16:	2008      	movs	r0, #8
1005ef18:	71b0      	strb	r0, [r6, #6]
1005ef1a:	200c      	movs	r0, #12
1005ef1c:	7170      	strb	r0, [r6, #5]
1005ef1e:	2004      	movs	r0, #4
1005ef20:	7130      	strb	r0, [r6, #4]
1005ef22:	2002      	movs	r0, #2
1005ef24:	4631      	mov	r1, r6
1005ef26:	f7f6 fb78 	bl	1005561a <aci_event_fifo_push>
1005ef2a:	bd70      	pop	{r4, r5, r6, pc}

1005ef2c <__arm_cp.2_0>:
1005ef2c:	20002468 	.word	0x20002468

1005ef30 <__arm_cp.2_1>:
1005ef30:	20002418 	.word	0x20002418

1005ef34 <LL_conn_get_version_exchange_cached>:
1005ef34:	b580      	push	{r7, lr}
1005ef36:	f7fb f9f9 	bl	1005a32c <llc_conn_get_cntxt_per_p>
1005ef3a:	218c      	movs	r1, #140	@ 0x8c
1005ef3c:	5840      	ldr	r0, [r0, r1]
1005ef3e:	0700      	lsls	r0, r0, #28
1005ef40:	0fc0      	lsrs	r0, r0, #31
1005ef42:	bd80      	pop	{r7, pc}

1005ef44 <llc_cte_get_ctxt>:
1005ef44:	4802      	ldr	r0, [pc, #8]	@ (1005ef50 <__arm_cp.2_0>)
1005ef46:	6800      	ldr	r0, [r0, #0]
1005ef48:	219c      	movs	r1, #156	@ 0x9c
1005ef4a:	5840      	ldr	r0, [r0, r1]
1005ef4c:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1005ef4e:	4770      	bx	lr

1005ef50 <__arm_cp.2_0>:
1005ef50:	20002468 	.word	0x20002468

1005ef54 <llc_cte_init_ucfg_weak>:
1005ef54:	4770      	bx	lr

1005ef56 <llc_cte_mem_allocate_ucfg_weak>:
1005ef56:	4770      	bx	lr

1005ef58 <llc_cte_timer_error_ucfg_weak>:
1005ef58:	4770      	bx	lr

1005ef5a <llc_cte_timer_stop_ucfg_weak>:
1005ef5a:	2000      	movs	r0, #0
1005ef5c:	4770      	bx	lr
	...

1005ef60 <LL_dtm_init>:
1005ef60:	b5b0      	push	{r4, r5, r7, lr}
1005ef62:	480e      	ldr	r0, [pc, #56]	@ (1005ef9c <__arm_cp.0_0>)
1005ef64:	6800      	ldr	r0, [r0, #0]
1005ef66:	21ac      	movs	r1, #172	@ 0xac
1005ef68:	5844      	ldr	r4, [r0, r1]
1005ef6a:	20ff      	movs	r0, #255	@ 0xff
1005ef6c:	77a0      	strb	r0, [r4, #30]
1005ef6e:	2500      	movs	r5, #0
1005ef70:	77e5      	strb	r5, [r4, #31]
1005ef72:	f7fa fca9 	bl	100598c8 <cte_csr_ucfg_weak>
1005ef76:	2801      	cmp	r0, #1
1005ef78:	d10f      	bne.n	1005ef9a <LL_dtm_init+0x3a>
1005ef7a:	f7ff ffe3 	bl	1005ef44 <llc_cte_get_ctxt>
1005ef7e:	2224      	movs	r2, #36	@ 0x24
1005ef80:	4907      	ldr	r1, [pc, #28]	@ (1005efa0 <__arm_cp.0_1>)
1005ef82:	5c8a      	ldrb	r2, [r1, r2]
1005ef84:	2a00      	cmp	r2, #0
1005ef86:	462a      	mov	r2, r5
1005ef88:	d000      	beq.n	1005ef8c <LL_dtm_init+0x2c>
1005ef8a:	6802      	ldr	r2, [r0, #0]
1005ef8c:	62a2      	str	r2, [r4, #40]	@ 0x28
1005ef8e:	2223      	movs	r2, #35	@ 0x23
1005ef90:	5c89      	ldrb	r1, [r1, r2]
1005ef92:	2900      	cmp	r1, #0
1005ef94:	d000      	beq.n	1005ef98 <LL_dtm_init+0x38>
1005ef96:	6845      	ldr	r5, [r0, #4]
1005ef98:	62e5      	str	r5, [r4, #44]	@ 0x2c
1005ef9a:	bdb0      	pop	{r4, r5, r7, pc}

1005ef9c <__arm_cp.0_0>:
1005ef9c:	20002468 	.word	0x20002468

1005efa0 <__arm_cp.0_1>:
1005efa0:	2000247c 	.word	0x2000247c

1005efa4 <LL_eadv_switchbackupdata_data_struc>:
1005efa4:	b510      	push	{r4, lr}
1005efa6:	7c01      	ldrb	r1, [r0, #16]
1005efa8:	2902      	cmp	r1, #2
1005efaa:	d109      	bne.n	1005efc0 <LL_eadv_switchbackupdata_data_struc+0x1c>
1005efac:	2401      	movs	r4, #1
1005efae:	7404      	strb	r4, [r0, #16]
1005efb0:	6801      	ldr	r1, [r0, #0]
1005efb2:	6882      	ldr	r2, [r0, #8]
1005efb4:	68c3      	ldr	r3, [r0, #12]
1005efb6:	c00c      	stmia	r0!, {r2, r3}
1005efb8:	20a1      	movs	r0, #161	@ 0xa1
1005efba:	f005 fa0b 	bl	100643d4 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005efbe:	e000      	b.n	1005efc2 <LL_eadv_switchbackupdata_data_struc+0x1e>
1005efc0:	2400      	movs	r4, #0
1005efc2:	4620      	mov	r0, r4
1005efc4:	bd10      	pop	{r4, pc}

1005efc6 <LL_eadv_Blue_Tx>:
1005efc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005efc8:	461e      	mov	r6, r3
1005efca:	4617      	mov	r7, r2
1005efcc:	460d      	mov	r5, r1
1005efce:	4604      	mov	r4, r0
1005efd0:	f7f4 feac 	bl	10053d2c <BLEPLAT_CNTR_PacketInitTo0>
1005efd4:	4620      	mov	r0, r4
1005efd6:	f7f4 feb7 	bl	10053d48 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005efda:	4620      	mov	r0, r4
1005efdc:	f7f4 ff33 	bl	10053e46 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005efe0:	4620      	mov	r0, r4
1005efe2:	4621      	mov	r1, r4
1005efe4:	f7f4 ff3c 	bl	10053e60 <BLEPLAT_CNTR_PacketSetNextPtr>
1005efe8:	4620      	mov	r0, r4
1005efea:	4639      	mov	r1, r7
1005efec:	f7f4 fed3 	bl	10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>
1005eff0:	4620      	mov	r0, r4
1005eff2:	4631      	mov	r1, r6
1005eff4:	f7f4 ff8e 	bl	10053f14 <BLEPLAT_CNTR_PacketSetTimeout>
1005eff8:	9f06      	ldr	r7, [sp, #24]
1005effa:	2e00      	cmp	r6, #0
1005effc:	d002      	beq.n	1005f004 <LL_eadv_Blue_Tx+0x3e>
1005effe:	4620      	mov	r0, r4
1005f000:	f7f4 ff97 	bl	10053f32 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005f004:	4620      	mov	r0, r4
1005f006:	f7f4 fe6b 	bl	10053ce0 <BLEPLAT_CNTR_PacketClrIncChan>
1005f00a:	4620      	mov	r0, r4
1005f00c:	f7f4 feea 	bl	10053de4 <BLEPLAT_CNTR_PacketSetIntDone>
1005f010:	4620      	mov	r0, r4
1005f012:	f7f4 ffb4 	bl	10053f7e <BLEPLAT_CNTR_PacketSetTxReady>
1005f016:	4620      	mov	r0, r4
1005f018:	2f81      	cmp	r7, #129	@ 0x81
1005f01a:	d109      	bne.n	1005f030 <LL_eadv_Blue_Tx+0x6a>
1005f01c:	4629      	mov	r1, r5
1005f01e:	f7f4 ff3b 	bl	10053e98 <BLEPLAT_CNTR_PacketSetNextSlot>
1005f022:	4620      	mov	r0, r4
1005f024:	f7f4 ff5c 	bl	10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>
1005f028:	4620      	mov	r0, r4
1005f02a:	f7f4 ff8e 	bl	10053f4a <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1005f02e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f030:	f7f4 ff98 	bl	10053f64 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005f034:	4620      	mov	r0, r4
1005f036:	f7f4 ff22 	bl	10053e7e <BLEPLAT_CNTR_PacketSetNextRxMode>
1005f03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f03c <LL_eadv_Blue_Rx>:
1005f03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f03e:	461e      	mov	r6, r3
1005f040:	4617      	mov	r7, r2
1005f042:	460d      	mov	r5, r1
1005f044:	4604      	mov	r4, r0
1005f046:	f7f4 fe71 	bl	10053d2c <BLEPLAT_CNTR_PacketInitTo0>
1005f04a:	4620      	mov	r0, r4
1005f04c:	f7f4 fe7c 	bl	10053d48 <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005f050:	4620      	mov	r0, r4
1005f052:	f7f4 fef8 	bl	10053e46 <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005f056:	4620      	mov	r0, r4
1005f058:	4621      	mov	r1, r4
1005f05a:	f7f4 ff01 	bl	10053e60 <BLEPLAT_CNTR_PacketSetNextPtr>
1005f05e:	4620      	mov	r0, r4
1005f060:	4639      	mov	r1, r7
1005f062:	f7f4 fe98 	bl	10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>
1005f066:	4620      	mov	r0, r4
1005f068:	4631      	mov	r1, r6
1005f06a:	f7f4 ff53 	bl	10053f14 <BLEPLAT_CNTR_PacketSetTimeout>
1005f06e:	9f07      	ldr	r7, [sp, #28]
1005f070:	2e00      	cmp	r6, #0
1005f072:	d002      	beq.n	1005f07a <LL_eadv_Blue_Rx+0x3e>
1005f074:	4620      	mov	r0, r4
1005f076:	f7f4 ff5c 	bl	10053f32 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005f07a:	4620      	mov	r0, r4
1005f07c:	f7f4 ff17 	bl	10053eae <BLEPLAT_CNTR_PacketSetNextTxMode>
1005f080:	4620      	mov	r0, r4
1005f082:	f7f4 fe2d 	bl	10053ce0 <BLEPLAT_CNTR_PacketClrIncChan>
1005f086:	4620      	mov	r0, r4
1005f088:	f7f4 feac 	bl	10053de4 <BLEPLAT_CNTR_PacketSetIntDone>
1005f08c:	4620      	mov	r0, r4
1005f08e:	f7f4 ff69 	bl	10053f64 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005f092:	4620      	mov	r0, r4
1005f094:	f7f4 feb2 	bl	10053dfc <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005f098:	4620      	mov	r0, r4
1005f09a:	f7f4 ff2e 	bl	10053efa <BLEPLAT_CNTR_PacketSetRxReady>
1005f09e:	2f81      	cmp	r7, #129	@ 0x81
1005f0a0:	d107      	bne.n	1005f0b2 <LL_eadv_Blue_Rx+0x76>
1005f0a2:	4620      	mov	r0, r4
1005f0a4:	4629      	mov	r1, r5
1005f0a6:	f7f4 fef7 	bl	10053e98 <BLEPLAT_CNTR_PacketSetNextSlot>
1005f0aa:	4620      	mov	r0, r4
1005f0ac:	f7f4 fe24 	bl	10053cf8 <BLEPLAT_CNTR_PacketClrPllTrig>
1005f0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f0b2:	4620      	mov	r0, r4
1005f0b4:	f7f4 ff14 	bl	10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>
1005f0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005f0bc <LL_eadv_BLUE_SM>:
1005f0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f0be:	461d      	mov	r5, r3
1005f0c0:	4616      	mov	r6, r2
1005f0c2:	460f      	mov	r7, r1
1005f0c4:	4604      	mov	r4, r0
1005f0c6:	f7f5 f8d7 	bl	10054278 <BLEPLAT_CNTR_SmInitTo0>
1005f0ca:	4911      	ldr	r1, [pc, #68]	@ (1005f110 <__arm_cp.10_0>)
1005f0cc:	4620      	mov	r0, r4
1005f0ce:	f7f5 f8f1 	bl	100542b4 <BLEPLAT_CNTR_SmSetAccessAddr>
1005f0d2:	4910      	ldr	r1, [pc, #64]	@ (1005f114 <__arm_cp.10_1>)
1005f0d4:	4620      	mov	r0, r4
1005f0d6:	f7f5 f930 	bl	1005433a <BLEPLAT_CNTR_SmSetCrcInit>
1005f0da:	4620      	mov	r0, r4
1005f0dc:	4639      	mov	r1, r7
1005f0de:	f7f5 fa5d 	bl	1005459c <BLEPLAT_CNTR_SmSetTxPwr>
1005f0e2:	4620      	mov	r0, r4
1005f0e4:	4631      	mov	r1, r6
1005f0e6:	f7f5 fa32 	bl	1005454e <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005f0ea:	4620      	mov	r0, r4
1005f0ec:	4629      	mov	r1, r5
1005f0ee:	f7f5 f9c2 	bl	10054476 <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005f0f2:	9806      	ldr	r0, [sp, #24]
1005f0f4:	2881      	cmp	r0, #129	@ 0x81
1005f0f6:	d103      	bne.n	1005f100 <LL_eadv_BLUE_SM+0x44>
1005f0f8:	4620      	mov	r0, r4
1005f0fa:	f7f5 fa19 	bl	10054530 <BLEPLAT_CNTR_SmSetTxMode>
1005f0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f100:	4620      	mov	r0, r4
1005f102:	f7f5 f9a9 	bl	10054458 <BLEPLAT_CNTR_SmSetRxMode>
1005f106:	2101      	movs	r1, #1
1005f108:	4620      	mov	r0, r4
1005f10a:	f7f5 f93d 	bl	10054388 <BLEPLAT_CNTR_SmSetHopIncr>
1005f10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f110 <__arm_cp.10_0>:
1005f110:	8e89bed6 	.word	0x8e89bed6

1005f114 <__arm_cp.10_1>:
1005f114:	00555555 	.word	0x00555555

1005f118 <llc_get_advertising_set_index>:
1005f118:	b570      	push	{r4, r5, r6, lr}
1005f11a:	4604      	mov	r4, r0
1005f11c:	f001 fa94 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f120:	214d      	movs	r1, #77	@ 0x4d
1005f122:	5c41      	ldrb	r1, [r0, r1]
1005f124:	4d09      	ldr	r5, [pc, #36]	@ (1005f14c <__arm_cp.12_0>)
1005f126:	2200      	movs	r2, #0
1005f128:	23be      	movs	r3, #190	@ 0xbe
1005f12a:	4291      	cmp	r1, r2
1005f12c:	d00b      	beq.n	1005f146 <llc_get_advertising_set_index+0x2e>
1005f12e:	6806      	ldr	r6, [r0, #0]
1005f130:	5af6      	ldrh	r6, [r6, r3]
1005f132:	42a6      	cmp	r6, r4
1005f134:	4616      	mov	r6, r2
1005f136:	d000      	beq.n	1005f13a <llc_get_advertising_set_index+0x22>
1005f138:	462e      	mov	r6, r5
1005f13a:	2501      	movs	r5, #1
1005f13c:	022d      	lsls	r5, r5, #8
1005f13e:	195b      	adds	r3, r3, r5
1005f140:	1c52      	adds	r2, r2, #1
1005f142:	4635      	mov	r5, r6
1005f144:	e7f1      	b.n	1005f12a <llc_get_advertising_set_index+0x12>
1005f146:	b2a8      	uxth	r0, r5
1005f148:	bd70      	pop	{r4, r5, r6, pc}
1005f14a:	46c0      	nop			@ (mov r8, r8)

1005f14c <__arm_cp.12_0>:
1005f14c:	0000ffff 	.word	0x0000ffff

1005f150 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>:
1005f150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f152:	4604      	mov	r4, r0
1005f154:	f001 fa78 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f158:	4601      	mov	r1, r0
1005f15a:	204d      	movs	r0, #77	@ 0x4d
1005f15c:	5c08      	ldrb	r0, [r1, r0]
1005f15e:	0202      	lsls	r2, r0, #8
1005f160:	2000      	movs	r0, #0
1005f162:	4b0d      	ldr	r3, [pc, #52]	@ (1005f198 <__arm_cp.17_0>)
1005f164:	4605      	mov	r5, r0
1005f166:	42aa      	cmp	r2, r5
1005f168:	d013      	beq.n	1005f192 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x42>
1005f16a:	680e      	ldr	r6, [r1, #0]
1005f16c:	1976      	adds	r6, r6, r5
1005f16e:	27be      	movs	r7, #190	@ 0xbe
1005f170:	5bf7      	ldrh	r7, [r6, r7]
1005f172:	429f      	cmp	r7, r3
1005f174:	d003      	beq.n	1005f17e <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x2e>
1005f176:	27ce      	movs	r7, #206	@ 0xce
1005f178:	5df7      	ldrb	r7, [r6, r7]
1005f17a:	2f01      	cmp	r7, #1
1005f17c:	d003      	beq.n	1005f186 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x36>
1005f17e:	2601      	movs	r6, #1
1005f180:	0236      	lsls	r6, r6, #8
1005f182:	19ad      	adds	r5, r5, r6
1005f184:	e7ef      	b.n	1005f166 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x16>
1005f186:	2c00      	cmp	r4, #0
1005f188:	d004      	beq.n	1005f194 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x44>
1005f18a:	20c3      	movs	r0, #195	@ 0xc3
1005f18c:	5c30      	ldrb	r0, [r6, r0]
1005f18e:	1e41      	subs	r1, r0, #1
1005f190:	4188      	sbcs	r0, r1
1005f192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f194:	2001      	movs	r0, #1
1005f196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f198 <__arm_cp.17_0>:
1005f198:	0000ffff 	.word	0x0000ffff

1005f19c <llc_eadv_generate_new_rpa_for_one_adv_set>:
1005f19c:	b5b0      	push	{r4, r5, r7, lr}
1005f19e:	4604      	mov	r4, r0
1005f1a0:	20d6      	movs	r0, #214	@ 0xd6
1005f1a2:	5c20      	ldrb	r0, [r4, r0]
1005f1a4:	0780      	lsls	r0, r0, #30
1005f1a6:	d401      	bmi.n	1005f1ac <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1005f1a8:	2000      	movs	r0, #0
1005f1aa:	bdb0      	pop	{r4, r5, r7, pc}
1005f1ac:	4625      	mov	r5, r4
1005f1ae:	3584      	adds	r5, #132	@ 0x84
1005f1b0:	4628      	mov	r0, r5
1005f1b2:	f7fc fe42 	bl	1005be3a <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1005f1b6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005f1b8:	4628      	mov	r0, r5
1005f1ba:	f7fc fe36 	bl	1005be2a <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1005f1be:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1005f1c0:	3008      	adds	r0, #8
1005f1c2:	2100      	movs	r1, #0
1005f1c4:	f7fc fe2f 	bl	1005be26 <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1005f1c8:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005f1ca:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005f1cc:	6761      	str	r1, [r4, #116]	@ 0x74
1005f1ce:	67a0      	str	r0, [r4, #120]	@ 0x78
1005f1d0:	2001      	movs	r0, #1
1005f1d2:	bdb0      	pop	{r4, r5, r7, pc}

1005f1d4 <EADV_init>:
1005f1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f1d6:	b085      	sub	sp, #20
1005f1d8:	9204      	str	r2, [sp, #16]
1005f1da:	460e      	mov	r6, r1
1005f1dc:	4605      	mov	r5, r0
1005f1de:	244d      	movs	r4, #77	@ 0x4d
1005f1e0:	f001 fa32 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f1e4:	5505      	strb	r5, [r0, r4]
1005f1e6:	6006      	str	r6, [r0, #0]
1005f1e8:	9003      	str	r0, [sp, #12]
1005f1ea:	304d      	adds	r0, #77	@ 0x4d
1005f1ec:	2101      	movs	r1, #1
1005f1ee:	9002      	str	r0, [sp, #8]
1005f1f0:	7041      	strb	r1, [r0, #1]
1005f1f2:	9101      	str	r1, [sp, #4]
1005f1f4:	04cb      	lsls	r3, r1, #19
1005f1f6:	2600      	movs	r6, #0
1005f1f8:	277c      	movs	r7, #124	@ 0x7c
1005f1fa:	9a04      	ldr	r2, [sp, #16]
1005f1fc:	b2e8      	uxtb	r0, r5
1005f1fe:	4286      	cmp	r6, r0
1005f200:	d226      	bcs.n	1005f250 <EADV_init+0x7c>
1005f202:	9803      	ldr	r0, [sp, #12]
1005f204:	6800      	ldr	r0, [r0, #0]
1005f206:	51c3      	str	r3, [r0, r7]
1005f208:	19c5      	adds	r5, r0, r7
1005f20a:	2054      	movs	r0, #84	@ 0x54
1005f20c:	4911      	ldr	r1, [pc, #68]	@ (1005f254 <__arm_cp.19_0>)
1005f20e:	5229      	strh	r1, [r5, r0]
1005f210:	2452      	movs	r4, #82	@ 0x52
1005f212:	2000      	movs	r0, #0
1005f214:	5328      	strh	r0, [r5, r4]
1005f216:	2442      	movs	r4, #66	@ 0x42
1005f218:	5329      	strh	r1, [r5, r4]
1005f21a:	245e      	movs	r4, #94	@ 0x5e
1005f21c:	5528      	strb	r0, [r5, r4]
1005f21e:	245c      	movs	r4, #92	@ 0x5c
1005f220:	21ff      	movs	r1, #255	@ 0xff
1005f222:	5529      	strb	r1, [r5, r4]
1005f224:	215a      	movs	r1, #90	@ 0x5a
1005f226:	5468      	strb	r0, [r5, r1]
1005f228:	2146      	movs	r1, #70	@ 0x46
1005f22a:	2407      	movs	r4, #7
1005f22c:	526c      	strh	r4, [r5, r1]
1005f22e:	6128      	str	r0, [r5, #16]
1005f230:	6168      	str	r0, [r5, #20]
1005f232:	606b      	str	r3, [r5, #4]
1005f234:	9904      	ldr	r1, [sp, #16]
1005f236:	2900      	cmp	r1, #0
1005f238:	d002      	beq.n	1005f240 <EADV_init+0x6c>
1005f23a:	6550      	str	r0, [r2, #84]	@ 0x54
1005f23c:	3d2c      	subs	r5, #44	@ 0x2c
1005f23e:	602a      	str	r2, [r5, #0]
1005f240:	9801      	ldr	r0, [sp, #4]
1005f242:	0200      	lsls	r0, r0, #8
1005f244:	183f      	adds	r7, r7, r0
1005f246:	325c      	adds	r2, #92	@ 0x5c
1005f248:	9802      	ldr	r0, [sp, #8]
1005f24a:	7805      	ldrb	r5, [r0, #0]
1005f24c:	1c76      	adds	r6, r6, #1
1005f24e:	e7d5      	b.n	1005f1fc <EADV_init+0x28>
1005f250:	b005      	add	sp, #20
1005f252:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005f254 <__arm_cp.19_0>:
1005f254:	0000ffff 	.word	0x0000ffff

1005f258 <LL_LE_Set_Advertising_Parameters>:
1005f258:	b570      	push	{r4, r5, r6, lr}
1005f25a:	4604      	mov	r4, r0
1005f25c:	f001 f9f4 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f260:	4605      	mov	r5, r0
1005f262:	4e30      	ldr	r6, [pc, #192]	@ (1005f324 <__arm_cp.20_0>)
1005f264:	4630      	mov	r0, r6
1005f266:	f7ff ff57 	bl	1005f118 <llc_get_advertising_set_index>
1005f26a:	492f      	ldr	r1, [pc, #188]	@ (1005f328 <__arm_cp.20_1>)
1005f26c:	4288      	cmp	r0, r1
1005f26e:	d112      	bne.n	1005f296 <LL_LE_Set_Advertising_Parameters+0x3e>
1005f270:	f000 f860 	bl	1005f334 <LL_Context_ReturnFree>
1005f274:	28ff      	cmp	r0, #255	@ 0xff
1005f276:	d034      	beq.n	1005f2e2 <LL_LE_Set_Advertising_Parameters+0x8a>
1005f278:	0200      	lsls	r0, r0, #8
1005f27a:	6829      	ldr	r1, [r5, #0]
1005f27c:	1808      	adds	r0, r1, r0
1005f27e:	21be      	movs	r1, #190	@ 0xbe
1005f280:	5246      	strh	r6, [r0, r1]
1005f282:	214c      	movs	r1, #76	@ 0x4c
1005f284:	2200      	movs	r2, #0
1005f286:	5442      	strb	r2, [r0, r1]
1005f288:	2138      	movs	r1, #56	@ 0x38
1005f28a:	5442      	strb	r2, [r0, r1]
1005f28c:	63c2      	str	r2, [r0, #60]	@ 0x3c
1005f28e:	6402      	str	r2, [r0, #64]	@ 0x40
1005f290:	6282      	str	r2, [r0, #40]	@ 0x28
1005f292:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005f294:	e008      	b.n	1005f2a8 <LL_LE_Set_Advertising_Parameters+0x50>
1005f296:	0200      	lsls	r0, r0, #8
1005f298:	6829      	ldr	r1, [r5, #0]
1005f29a:	1808      	adds	r0, r1, r0
1005f29c:	21ce      	movs	r1, #206	@ 0xce
1005f29e:	5c41      	ldrb	r1, [r0, r1]
1005f2a0:	2901      	cmp	r1, #1
1005f2a2:	d101      	bne.n	1005f2a8 <LL_LE_Set_Advertising_Parameters+0x50>
1005f2a4:	250c      	movs	r5, #12
1005f2a6:	e03a      	b.n	1005f31e <LL_LE_Set_Advertising_Parameters+0xc6>
1005f2a8:	7961      	ldrb	r1, [r4, #5]
1005f2aa:	22c2      	movs	r2, #194	@ 0xc2
1005f2ac:	5481      	strb	r1, [r0, r2]
1005f2ae:	4606      	mov	r6, r0
1005f2b0:	36c2      	adds	r6, #194	@ 0xc2
1005f2b2:	2500      	movs	r5, #0
1005f2b4:	72f5      	strb	r5, [r6, #11]
1005f2b6:	2101      	movs	r1, #1
1005f2b8:	70f1      	strb	r1, [r6, #3]
1005f2ba:	79a1      	ldrb	r1, [r4, #6]
1005f2bc:	7071      	strb	r1, [r6, #1]
1005f2be:	8821      	ldrh	r1, [r4, #0]
1005f2c0:	0209      	lsls	r1, r1, #8
1005f2c2:	67c1      	str	r1, [r0, #124]	@ 0x7c
1005f2c4:	4601      	mov	r1, r0
1005f2c6:	3184      	adds	r1, #132	@ 0x84
1005f2c8:	7922      	ldrb	r2, [r4, #4]
1005f2ca:	2a04      	cmp	r2, #4
1005f2cc:	d815      	bhi.n	1005f2fa <LL_LE_Set_Advertising_Parameters+0xa2>
1005f2ce:	46c0      	nop			@ (mov r8, r8)
1005f2d0:	447a      	add	r2, pc
1005f2d2:	7912      	ldrb	r2, [r2, #4]
1005f2d4:	0052      	lsls	r2, r2, #1
1005f2d6:	4497      	add	pc, r2
1005f2d8:	0c0a0602 	.word	0x0c0a0602
1005f2dc:	000e      	.short	0x000e
1005f2de:	20f3      	movs	r0, #243	@ 0xf3
1005f2e0:	e00a      	b.n	1005f2f8 <LL_LE_Set_Advertising_Parameters+0xa0>
1005f2e2:	2507      	movs	r5, #7
1005f2e4:	e01b      	b.n	1005f31e <LL_LE_Set_Advertising_Parameters+0xc6>
1005f2e6:	4a11      	ldr	r2, [pc, #68]	@ (1005f32c <__arm_cp.20_2>)
1005f2e8:	67c2      	str	r2, [r0, #124]	@ 0x7c
1005f2ea:	20fd      	movs	r0, #253	@ 0xfd
1005f2ec:	e004      	b.n	1005f2f8 <LL_LE_Set_Advertising_Parameters+0xa0>
1005f2ee:	20f2      	movs	r0, #242	@ 0xf2
1005f2f0:	e002      	b.n	1005f2f8 <LL_LE_Set_Advertising_Parameters+0xa0>
1005f2f2:	20f0      	movs	r0, #240	@ 0xf0
1005f2f4:	e000      	b.n	1005f2f8 <LL_LE_Set_Advertising_Parameters+0xa0>
1005f2f6:	20f5      	movs	r0, #245	@ 0xf5
1005f2f8:	8688      	strh	r0, [r1, #52]	@ 0x34
1005f2fa:	7a20      	ldrb	r0, [r4, #8]
1005f2fc:	79e2      	ldrb	r2, [r4, #7]
1005f2fe:	600d      	str	r5, [r1, #0]
1005f300:	604d      	str	r5, [r1, #4]
1005f302:	7532      	strb	r2, [r6, #20]
1005f304:	7570      	strb	r0, [r6, #21]
1005f306:	7a20      	ldrb	r0, [r4, #8]
1005f308:	7008      	strb	r0, [r1, #0]
1005f30a:	1c48      	adds	r0, r1, #1
1005f30c:	3409      	adds	r4, #9
1005f30e:	2206      	movs	r2, #6
1005f310:	4621      	mov	r1, r4
1005f312:	f7f3 fb99 	bl	10052a48 <BLEPLAT_MemCpy>
1005f316:	4806      	ldr	r0, [pc, #24]	@ (1005f330 <__arm_cp.20_3>)
1005f318:	6800      	ldr	r0, [r0, #0]
1005f31a:	7a40      	ldrb	r0, [r0, #9]
1005f31c:	70b0      	strb	r0, [r6, #2]
1005f31e:	4628      	mov	r0, r5
1005f320:	bd70      	pop	{r4, r5, r6, pc}
1005f322:	46c0      	nop			@ (mov r8, r8)

1005f324 <__arm_cp.20_0>:
1005f324:	0000fffc 	.word	0x0000fffc

1005f328 <__arm_cp.20_1>:
1005f328:	0000ffff 	.word	0x0000ffff

1005f32c <__arm_cp.20_2>:
1005f32c:	000005dc 	.word	0x000005dc

1005f330 <__arm_cp.20_3>:
1005f330:	20002468 	.word	0x20002468

1005f334 <LL_Context_ReturnFree>:
1005f334:	b510      	push	{r4, lr}
1005f336:	f001 f987 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f33a:	214d      	movs	r1, #77	@ 0x4d
1005f33c:	5c42      	ldrb	r2, [r0, r1]
1005f33e:	2100      	movs	r1, #0
1005f340:	23be      	movs	r3, #190	@ 0xbe
1005f342:	428a      	cmp	r2, r1
1005f344:	d008      	beq.n	1005f358 <LL_Context_ReturnFree+0x24>
1005f346:	6804      	ldr	r4, [r0, #0]
1005f348:	5ae4      	ldrh	r4, [r4, r3]
1005f34a:	0b24      	lsrs	r4, r4, #12
1005f34c:	d105      	bne.n	1005f35a <LL_Context_ReturnFree+0x26>
1005f34e:	2401      	movs	r4, #1
1005f350:	0224      	lsls	r4, r4, #8
1005f352:	191b      	adds	r3, r3, r4
1005f354:	1c49      	adds	r1, r1, #1
1005f356:	e7f4      	b.n	1005f342 <LL_Context_ReturnFree+0xe>
1005f358:	21ff      	movs	r1, #255	@ 0xff
1005f35a:	b2c8      	uxtb	r0, r1
1005f35c:	bd10      	pop	{r4, pc}
	...

1005f360 <LL_LE_Set_Advertise_Enable>:
1005f360:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005f362:	4604      	mov	r4, r0
1005f364:	f000 f816 	bl	1005f394 <LL_LE_Set_Advertising_Parameters_Default>
1005f368:	2300      	movs	r3, #0
1005f36a:	9300      	str	r3, [sp, #0]
1005f36c:	2101      	movs	r1, #1
1005f36e:	4d07      	ldr	r5, [pc, #28]	@ (1005f38c <__arm_cp.22_0>)
1005f370:	4620      	mov	r0, r4
1005f372:	462a      	mov	r2, r5
1005f374:	f000 f82c 	bl	1005f3d0 <LL_Set_Extented_Advertising_Enable>
1005f378:	4604      	mov	r4, r0
1005f37a:	4805      	ldr	r0, [pc, #20]	@ (1005f390 <__arm_cp.22_1>)
1005f37c:	6801      	ldr	r1, [r0, #0]
1005f37e:	3156      	adds	r1, #86	@ 0x56
1005f380:	4628      	mov	r0, r5
1005f382:	f000 f98f 	bl	1005f6a4 <LL_Set_Extented_Advertising_Set_Random_Address>
1005f386:	4620      	mov	r0, r4
1005f388:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005f38a:	46c0      	nop			@ (mov r8, r8)

1005f38c <__arm_cp.22_0>:
1005f38c:	0000fffc 	.word	0x0000fffc

1005f390 <__arm_cp.22_1>:
1005f390:	20002468 	.word	0x20002468

1005f394 <LL_LE_Set_Advertising_Parameters_Default>:
1005f394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005f396:	480c      	ldr	r0, [pc, #48]	@ (1005f3c8 <__arm_cp.23_0>)
1005f398:	f7ff febe 	bl	1005f118 <llc_get_advertising_set_index>
1005f39c:	490b      	ldr	r1, [pc, #44]	@ (1005f3cc <__arm_cp.23_1>)
1005f39e:	4288      	cmp	r0, r1
1005f3a0:	d110      	bne.n	1005f3c4 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1005f3a2:	466c      	mov	r4, sp
1005f3a4:	2100      	movs	r1, #0
1005f3a6:	7221      	strb	r1, [r4, #8]
1005f3a8:	2001      	movs	r0, #1
1005f3aa:	02c0      	lsls	r0, r0, #11
1005f3ac:	8020      	strh	r0, [r4, #0]
1005f3ae:	2007      	movs	r0, #7
1005f3b0:	0200      	lsls	r0, r0, #8
1005f3b2:	9001      	str	r0, [sp, #4]
1005f3b4:	4620      	mov	r0, r4
1005f3b6:	3009      	adds	r0, #9
1005f3b8:	2206      	movs	r2, #6
1005f3ba:	f7f3 fb55 	bl	10052a68 <BLEPLAT_MemSet>
1005f3be:	4620      	mov	r0, r4
1005f3c0:	f7ff ff4a 	bl	1005f258 <LL_LE_Set_Advertising_Parameters>
1005f3c4:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1005f3c6:	46c0      	nop			@ (mov r8, r8)

1005f3c8 <__arm_cp.23_0>:
1005f3c8:	0000fffc 	.word	0x0000fffc

1005f3cc <__arm_cp.23_1>:
1005f3cc:	0000ffff 	.word	0x0000ffff

1005f3d0 <LL_Set_Extented_Advertising_Enable>:
1005f3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f3d2:	b08f      	sub	sp, #60	@ 0x3c
1005f3d4:	930e      	str	r3, [sp, #56]	@ 0x38
1005f3d6:	4617      	mov	r7, r2
1005f3d8:	460d      	mov	r5, r1
1005f3da:	4606      	mov	r6, r0
1005f3dc:	4305      	orrs	r5, r0
1005f3de:	f001 f933 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f3e2:	4604      	mov	r4, r0
1005f3e4:	2d00      	cmp	r5, #0
1005f3e6:	d007      	beq.n	1005f3f8 <LL_Set_Extented_Advertising_Enable+0x28>
1005f3e8:	4638      	mov	r0, r7
1005f3ea:	f7ff fe95 	bl	1005f118 <llc_get_advertising_set_index>
1005f3ee:	49a7      	ldr	r1, [pc, #668]	@ (1005f68c <__arm_cp.24_1>)
1005f3f0:	4288      	cmp	r0, r1
1005f3f2:	d118      	bne.n	1005f426 <LL_Set_Extented_Advertising_Enable+0x56>
1005f3f4:	2042      	movs	r0, #66	@ 0x42
1005f3f6:	e04a      	b.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f3f8:	4625      	mov	r5, r4
1005f3fa:	354d      	adds	r5, #77	@ 0x4d
1005f3fc:	2600      	movs	r6, #0
1005f3fe:	4637      	mov	r7, r6
1005f400:	960e      	str	r6, [sp, #56]	@ 0x38
1005f402:	7828      	ldrb	r0, [r5, #0]
1005f404:	4286      	cmp	r6, r0
1005f406:	d20c      	bcs.n	1005f422 <LL_Set_Extented_Advertising_Enable+0x52>
1005f408:	6820      	ldr	r0, [r4, #0]
1005f40a:	19c0      	adds	r0, r0, r7
1005f40c:	21ce      	movs	r1, #206	@ 0xce
1005f40e:	5c41      	ldrb	r1, [r0, r1]
1005f410:	2901      	cmp	r1, #1
1005f412:	d101      	bne.n	1005f418 <LL_Set_Extented_Advertising_Enable+0x48>
1005f414:	f000 f992 	bl	1005f73c <EADV_stop>
1005f418:	2001      	movs	r0, #1
1005f41a:	0200      	lsls	r0, r0, #8
1005f41c:	183f      	adds	r7, r7, r0
1005f41e:	1c76      	adds	r6, r6, #1
1005f420:	e7ef      	b.n	1005f402 <LL_Set_Extented_Advertising_Enable+0x32>
1005f422:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f424:	e033      	b.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f426:	0201      	lsls	r1, r0, #8
1005f428:	6822      	ldr	r2, [r4, #0]
1005f42a:	1854      	adds	r4, r2, r1
1005f42c:	21ce      	movs	r1, #206	@ 0xce
1005f42e:	5c61      	ldrb	r1, [r4, r1]
1005f430:	2e01      	cmp	r6, #1
1005f432:	d124      	bne.n	1005f47e <LL_Set_Extented_Advertising_Enable+0xae>
1005f434:	0200      	lsls	r0, r0, #8
1005f436:	1815      	adds	r5, r2, r0
1005f438:	20d6      	movs	r0, #214	@ 0xd6
1005f43a:	5c28      	ldrb	r0, [r5, r0]
1005f43c:	2701      	movs	r7, #1
1005f43e:	4038      	ands	r0, r7
1005f440:	2900      	cmp	r1, #0
1005f442:	d026      	beq.n	1005f492 <LL_Set_Extented_Advertising_Enable+0xc2>
1005f444:	2800      	cmp	r0, #0
1005f446:	d00a      	beq.n	1005f45e <LL_Set_Extented_Advertising_Enable+0x8e>
1005f448:	208c      	movs	r0, #140	@ 0x8c
1005f44a:	5828      	ldr	r0, [r5, r0]
1005f44c:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005f44e:	462a      	mov	r2, r5
1005f450:	328c      	adds	r2, #140	@ 0x8c
1005f452:	6852      	ldr	r2, [r2, #4]
1005f454:	c105      	stmia	r1!, {r0, r2}
1005f456:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005f458:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005f45a:	6769      	str	r1, [r5, #116]	@ 0x74
1005f45c:	67a8      	str	r0, [r5, #120]	@ 0x78
1005f45e:	2094      	movs	r0, #148	@ 0x94
1005f460:	5828      	ldr	r0, [r5, r0]
1005f462:	2600      	movs	r6, #0
1005f464:	2800      	cmp	r0, #0
1005f466:	d008      	beq.n	1005f47a <LL_Set_Extented_Advertising_Enable+0xaa>
1005f468:	3594      	adds	r5, #148	@ 0x94
1005f46a:	207d      	movs	r0, #125	@ 0x7d
1005f46c:	0144      	lsls	r4, r0, #5
1005f46e:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f470:	4344      	muls	r4, r0
1005f472:	f7f3 fbb4 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
1005f476:	1820      	adds	r0, r4, r0
1005f478:	6028      	str	r0, [r5, #0]
1005f47a:	4630      	mov	r0, r6
1005f47c:	e007      	b.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f47e:	2000      	movs	r0, #0
1005f480:	2901      	cmp	r1, #1
1005f482:	d104      	bne.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f484:	4605      	mov	r5, r0
1005f486:	4620      	mov	r0, r4
1005f488:	f000 f958 	bl	1005f73c <EADV_stop>
1005f48c:	4628      	mov	r0, r5
1005f48e:	b00f      	add	sp, #60	@ 0x3c
1005f490:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f492:	2800      	cmp	r0, #0
1005f494:	d007      	beq.n	1005f4a6 <LL_Set_Extented_Advertising_Enable+0xd6>
1005f496:	208c      	movs	r0, #140	@ 0x8c
1005f498:	5828      	ldr	r0, [r5, r0]
1005f49a:	2800      	cmp	r0, #0
1005f49c:	d103      	bne.n	1005f4a6 <LL_Set_Extented_Advertising_Enable+0xd6>
1005f49e:	2090      	movs	r0, #144	@ 0x90
1005f4a0:	5828      	ldr	r0, [r5, r0]
1005f4a2:	2800      	cmp	r0, #0
1005f4a4:	d006      	beq.n	1005f4b4 <LL_Set_Extented_Advertising_Enable+0xe4>
1005f4a6:	20b8      	movs	r0, #184	@ 0xb8
1005f4a8:	5a28      	ldrh	r0, [r5, r0]
1005f4aa:	07c1      	lsls	r1, r0, #31
1005f4ac:	d004      	beq.n	1005f4b8 <LL_Set_Extented_Advertising_Enable+0xe8>
1005f4ae:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1005f4b0:	29f5      	cmp	r1, #245	@ 0xf5
1005f4b2:	d901      	bls.n	1005f4b8 <LL_Set_Extented_Advertising_Enable+0xe8>
1005f4b4:	2012      	movs	r0, #18
1005f4b6:	e7ea      	b.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f4b8:	2312      	movs	r3, #18
1005f4ba:	4601      	mov	r1, r0
1005f4bc:	461a      	mov	r2, r3
1005f4be:	4019      	ands	r1, r3
1005f4c0:	2902      	cmp	r1, #2
1005f4c2:	d103      	bne.n	1005f4cc <LL_Set_Extented_Advertising_Enable+0xfc>
1005f4c4:	2142      	movs	r1, #66	@ 0x42
1005f4c6:	5a69      	ldrh	r1, [r5, r1]
1005f4c8:	2900      	cmp	r1, #0
1005f4ca:	d040      	beq.n	1005f54e <LL_Set_Extented_Advertising_Enable+0x17e>
1005f4cc:	0700      	lsls	r0, r0, #28
1005f4ce:	d50f      	bpl.n	1005f4f0 <LL_Set_Extented_Advertising_Enable+0x120>
1005f4d0:	486d      	ldr	r0, [pc, #436]	@ (1005f688 <__arm_cp.24_0>)
1005f4d2:	21be      	movs	r1, #190	@ 0xbe
1005f4d4:	5a69      	ldrh	r1, [r5, r1]
1005f4d6:	4281      	cmp	r1, r0
1005f4d8:	d001      	beq.n	1005f4de <LL_Set_Extented_Advertising_Enable+0x10e>
1005f4da:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f4dc:	e000      	b.n	1005f4e0 <LL_Set_Extented_Advertising_Enable+0x110>
1005f4de:	2080      	movs	r0, #128	@ 0x80
1005f4e0:	2880      	cmp	r0, #128	@ 0x80
1005f4e2:	d901      	bls.n	1005f4e8 <LL_Set_Extented_Advertising_Enable+0x118>
1005f4e4:	4610      	mov	r0, r2
1005f4e6:	e7d2      	b.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f4e8:	900e      	str	r0, [sp, #56]	@ 0x38
1005f4ea:	2800      	cmp	r0, #0
1005f4ec:	4610      	mov	r0, r2
1005f4ee:	d0ce      	beq.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f4f0:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005f4f2:	21ba      	movs	r1, #186	@ 0xba
1005f4f4:	5268      	strh	r0, [r5, r1]
1005f4f6:	267d      	movs	r6, #125	@ 0x7d
1005f4f8:	0171      	lsls	r1, r6, #5
1005f4fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f4fc:	4351      	muls	r1, r2
1005f4fe:	2294      	movs	r2, #148	@ 0x94
1005f500:	50a9      	str	r1, [r5, r2]
1005f502:	2800      	cmp	r0, #0
1005f504:	d001      	beq.n	1005f50a <LL_Set_Extented_Advertising_Enable+0x13a>
1005f506:	21cf      	movs	r1, #207	@ 0xcf
1005f508:	546f      	strb	r7, [r5, r1]
1005f50a:	21bc      	movs	r1, #188	@ 0xbc
1005f50c:	5268      	strh	r0, [r5, r1]
1005f50e:	4620      	mov	r0, r4
1005f510:	f7ef fea6 	bl	1004f260 <EADV_start_request_radio_tasks_ucfg>
1005f514:	2800      	cmp	r0, #0
1005f516:	d1ba      	bne.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f518:	4629      	mov	r1, r5
1005f51a:	31d6      	adds	r1, #214	@ 0xd6
1005f51c:	4628      	mov	r0, r5
1005f51e:	3064      	adds	r0, #100	@ 0x64
1005f520:	462a      	mov	r2, r5
1005f522:	3254      	adds	r2, #84	@ 0x54
1005f524:	676a      	str	r2, [r5, #116]	@ 0x74
1005f526:	67a8      	str	r0, [r5, #120]	@ 0x78
1005f528:	462b      	mov	r3, r5
1005f52a:	3378      	adds	r3, #120	@ 0x78
1005f52c:	7809      	ldrb	r1, [r1, #0]
1005f52e:	07c9      	lsls	r1, r1, #31
1005f530:	930d      	str	r3, [sp, #52]	@ 0x34
1005f532:	d10e      	bne.n	1005f552 <LL_Set_Extented_Advertising_Enable+0x182>
1005f534:	2100      	movs	r1, #0
1005f536:	6001      	str	r1, [r0, #0]
1005f538:	66a9      	str	r1, [r5, #104]	@ 0x68
1005f53a:	4855      	ldr	r0, [pc, #340]	@ (1005f690 <__arm_cp.24_2>)
1005f53c:	6801      	ldr	r1, [r0, #0]
1005f53e:	4620      	mov	r0, r4
1005f540:	3065      	adds	r0, #101	@ 0x65
1005f542:	2206      	movs	r2, #6
1005f544:	f7f3 fa80 	bl	10052a48 <BLEPLAT_MemCpy>
1005f548:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f54a:	6800      	ldr	r0, [r0, #0]
1005f54c:	e008      	b.n	1005f560 <LL_Set_Extented_Advertising_Enable+0x190>
1005f54e:	200c      	movs	r0, #12
1005f550:	e79d      	b.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f552:	218c      	movs	r1, #140	@ 0x8c
1005f554:	5869      	ldr	r1, [r5, r1]
1005f556:	462a      	mov	r2, r5
1005f558:	328c      	adds	r2, #140	@ 0x8c
1005f55a:	6852      	ldr	r2, [r2, #4]
1005f55c:	c006      	stmia	r0!, {r1, r2}
1005f55e:	3808      	subs	r0, #8
1005f560:	4629      	mov	r1, r5
1005f562:	3194      	adds	r1, #148	@ 0x94
1005f564:	910e      	str	r1, [sp, #56]	@ 0x38
1005f566:	2184      	movs	r1, #132	@ 0x84
1005f568:	5869      	ldr	r1, [r5, r1]
1005f56a:	462a      	mov	r2, r5
1005f56c:	3284      	adds	r2, #132	@ 0x84
1005f56e:	6852      	ldr	r2, [r2, #4]
1005f570:	6081      	str	r1, [r0, #8]
1005f572:	60c2      	str	r2, [r0, #12]
1005f574:	4620      	mov	r0, r4
1005f576:	f7ff fe11 	bl	1005f19c <llc_eadv_generate_new_rpa_for_one_adv_set>
1005f57a:	2800      	cmp	r0, #0
1005f57c:	960c      	str	r6, [sp, #48]	@ 0x30
1005f57e:	d002      	beq.n	1005f586 <LL_Set_Extented_Advertising_Enable+0x1b6>
1005f580:	f7fc fc59 	bl	1005be36 <llc_priv_start_privacy_timer_ucfg_weak>
1005f584:	e006      	b.n	1005f594 <LL_Set_Extented_Advertising_Enable+0x1c4>
1005f586:	4628      	mov	r0, r5
1005f588:	3074      	adds	r0, #116	@ 0x74
1005f58a:	6801      	ldr	r1, [r0, #0]
1005f58c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005f58e:	681a      	ldr	r2, [r3, #0]
1005f590:	6002      	str	r2, [r0, #0]
1005f592:	6019      	str	r1, [r3, #0]
1005f594:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005f596:	4626      	mov	r6, r4
1005f598:	36ce      	adds	r6, #206	@ 0xce
1005f59a:	4628      	mov	r0, r5
1005f59c:	30b8      	adds	r0, #184	@ 0xb8
1005f59e:	900d      	str	r0, [sp, #52]	@ 0x34
1005f5a0:	6808      	ldr	r0, [r1, #0]
1005f5a2:	2800      	cmp	r0, #0
1005f5a4:	d005      	beq.n	1005f5b2 <LL_Set_Extented_Advertising_Enable+0x1e2>
1005f5a6:	f7f3 fb1a 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
1005f5aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f5ac:	6811      	ldr	r1, [r2, #0]
1005f5ae:	1808      	adds	r0, r1, r0
1005f5b0:	6010      	str	r0, [r2, #0]
1005f5b2:	7037      	strb	r7, [r6, #0]
1005f5b4:	20c4      	movs	r0, #196	@ 0xc4
1005f5b6:	5c29      	ldrb	r1, [r5, r0]
1005f5b8:	27d0      	movs	r7, #208	@ 0xd0
1005f5ba:	5de8      	ldrb	r0, [r5, r7]
1005f5bc:	2281      	movs	r2, #129	@ 0x81
1005f5be:	920e      	str	r2, [sp, #56]	@ 0x38
1005f5c0:	9200      	str	r2, [sp, #0]
1005f5c2:	462e      	mov	r6, r5
1005f5c4:	3614      	adds	r6, #20
1005f5c6:	4622      	mov	r2, r4
1005f5c8:	4633      	mov	r3, r6
1005f5ca:	f7ff fd77 	bl	1005f0bc <LL_eadv_BLUE_SM>
1005f5ce:	5de8      	ldrb	r0, [r5, r7]
1005f5d0:	2125      	movs	r1, #37	@ 0x25
1005f5d2:	f7f4 fec4 	bl	1005435e <BLEPLAT_CNTR_SmSetDataLength>
1005f5d6:	462f      	mov	r7, r5
1005f5d8:	37d0      	adds	r7, #208	@ 0xd0
1005f5da:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f5dc:	8800      	ldrh	r0, [r0, #0]
1005f5de:	06c0      	lsls	r0, r0, #27
1005f5e0:	d403      	bmi.n	1005f5ea <LL_Set_Extented_Advertising_Enable+0x21a>
1005f5e2:	4620      	mov	r0, r4
1005f5e4:	f000 fd57 	bl	10060096 <LL_eadv_start_extended_ucfg_weak>
1005f5e8:	e042      	b.n	1005f670 <LL_Set_Extented_Advertising_Enable+0x2a0>
1005f5ea:	f7f3 faf8 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
1005f5ee:	219c      	movs	r1, #156	@ 0x9c
1005f5f0:	910b      	str	r1, [sp, #44]	@ 0x2c
1005f5f2:	5068      	str	r0, [r5, r1]
1005f5f4:	f001 f812 	bl	1006061c <LL_get_tx_common_buffer_p>
1005f5f8:	9009      	str	r0, [sp, #36]	@ 0x24
1005f5fa:	f001 f817 	bl	1006062c <LL_get_rx_common_buffer_p>
1005f5fe:	900a      	str	r0, [sp, #40]	@ 0x28
1005f600:	7838      	ldrb	r0, [r7, #0]
1005f602:	9008      	str	r0, [sp, #32]
1005f604:	2094      	movs	r0, #148	@ 0x94
1005f606:	2100      	movs	r1, #0
1005f608:	910d      	str	r1, [sp, #52]	@ 0x34
1005f60a:	460a      	mov	r2, r1
1005f60c:	f7f4 fa1c 	bl	10053a48 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005f610:	4603      	mov	r3, r0
1005f612:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f614:	9000      	str	r0, [sp, #0]
1005f616:	4620      	mov	r0, r4
1005f618:	9908      	ldr	r1, [sp, #32]
1005f61a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005f61c:	f7ff fcd3 	bl	1005efc6 <LL_eadv_Blue_Tx>
1005f620:	7838      	ldrb	r0, [r7, #0]
1005f622:	9009      	str	r0, [sp, #36]	@ 0x24
1005f624:	2096      	movs	r0, #150	@ 0x96
1005f626:	2101      	movs	r1, #1
1005f628:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005f62a:	f7f4 fa0d 	bl	10053a48 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005f62e:	4603      	mov	r3, r0
1005f630:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f632:	9000      	str	r0, [sp, #0]
1005f634:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f636:	9001      	str	r0, [sp, #4]
1005f638:	4630      	mov	r0, r6
1005f63a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005f63c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005f63e:	f7ff fcfd 	bl	1005f03c <LL_eadv_Blue_Rx>
1005f642:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1005f644:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005f646:	582a      	ldr	r2, [r5, r0]
1005f648:	7838      	ldrb	r0, [r7, #0]
1005f64a:	4b12      	ldr	r3, [pc, #72]	@ (1005f694 <__arm_cp.24_3>)
1005f64c:	9307      	str	r3, [sp, #28]
1005f64e:	4b12      	ldr	r3, [pc, #72]	@ (1005f698 <__arm_cp.24_4>)
1005f650:	9306      	str	r3, [sp, #24]
1005f652:	4b12      	ldr	r3, [pc, #72]	@ (1005f69c <__arm_cp.24_5>)
1005f654:	9305      	str	r3, [sp, #20]
1005f656:	4b12      	ldr	r3, [pc, #72]	@ (1005f6a0 <__arm_cp.24_6>)
1005f658:	9304      	str	r3, [sp, #16]
1005f65a:	2314      	movs	r3, #20
1005f65c:	9303      	str	r3, [sp, #12]
1005f65e:	231f      	movs	r3, #31
1005f660:	ae00      	add	r6, sp, #0
1005f662:	c60e      	stmia	r6!, {r1, r2, r3}
1005f664:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005f666:	00cb      	lsls	r3, r1, #3
1005f668:	4621      	mov	r1, r4
1005f66a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f66c:	f001 f86e 	bl	1006074c <LL_sched_enable_taskslot>
1005f670:	249c      	movs	r4, #156	@ 0x9c
1005f672:	5929      	ldr	r1, [r5, r4]
1005f674:	7838      	ldrb	r0, [r7, #0]
1005f676:	f001 f845 	bl	10060704 <LL_sched_set_anchor>
1005f67a:	5928      	ldr	r0, [r5, r4]
1005f67c:	7839      	ldrb	r1, [r7, #0]
1005f67e:	f001 faf5 	bl	10060c6c <LL_sched_check_and_call_sched>
1005f682:	2000      	movs	r0, #0
1005f684:	e703      	b.n	1005f48e <LL_Set_Extented_Advertising_Enable+0xbe>
1005f686:	46c0      	nop			@ (mov r8, r8)

1005f688 <__arm_cp.24_0>:
1005f688:	0000fffc 	.word	0x0000fffc

1005f68c <__arm_cp.24_1>:
1005f68c:	0000ffff 	.word	0x0000ffff

1005f690 <__arm_cp.24_2>:
1005f690:	20002414 	.word	0x20002414

1005f694 <__arm_cp.24_3>:
1005f694:	1005f8d9 	.word	0x1005f8d9

1005f698 <__arm_cp.24_4>:
1005f698:	1005fd61 	.word	0x1005fd61

1005f69c <__arm_cp.24_5>:
1005f69c:	1005fbd1 	.word	0x1005fbd1

1005f6a0 <__arm_cp.24_6>:
1005f6a0:	1005f8e1 	.word	0x1005f8e1

1005f6a4 <LL_Set_Extented_Advertising_Set_Random_Address>:
1005f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f6a6:	460c      	mov	r4, r1
1005f6a8:	4606      	mov	r6, r0
1005f6aa:	f7ff fd35 	bl	1005f118 <llc_get_advertising_set_index>
1005f6ae:	4605      	mov	r5, r0
1005f6b0:	4818      	ldr	r0, [pc, #96]	@ (1005f714 <__arm_cp.25_0>)
1005f6b2:	4285      	cmp	r5, r0
1005f6b4:	d02b      	beq.n	1005f70e <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1005f6b6:	9400      	str	r4, [sp, #0]
1005f6b8:	022c      	lsls	r4, r5, #8
1005f6ba:	f000 ffc5 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f6be:	6807      	ldr	r7, [r0, #0]
1005f6c0:	1938      	adds	r0, r7, r4
1005f6c2:	21be      	movs	r1, #190	@ 0xbe
1005f6c4:	5246      	strh	r6, [r0, r1]
1005f6c6:	21b8      	movs	r1, #184	@ 0xb8
1005f6c8:	5c40      	ldrb	r0, [r0, r1]
1005f6ca:	07c0      	lsls	r0, r0, #31
1005f6cc:	d007      	beq.n	1005f6de <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005f6ce:	0228      	lsls	r0, r5, #8
1005f6d0:	1838      	adds	r0, r7, r0
1005f6d2:	21ce      	movs	r1, #206	@ 0xce
1005f6d4:	5c40      	ldrb	r0, [r0, r1]
1005f6d6:	2801      	cmp	r0, #1
1005f6d8:	d101      	bne.n	1005f6de <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005f6da:	250c      	movs	r5, #12
1005f6dc:	e018      	b.n	1005f710 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005f6de:	480e      	ldr	r0, [pc, #56]	@ (1005f718 <__arm_cp.25_1>)
1005f6e0:	6800      	ldr	r0, [r0, #0]
1005f6e2:	3056      	adds	r0, #86	@ 0x56
1005f6e4:	2606      	movs	r6, #6
1005f6e6:	9c00      	ldr	r4, [sp, #0]
1005f6e8:	4621      	mov	r1, r4
1005f6ea:	4632      	mov	r2, r6
1005f6ec:	f7f3 f9ac 	bl	10052a48 <BLEPLAT_MemCpy>
1005f6f0:	0228      	lsls	r0, r5, #8
1005f6f2:	1838      	adds	r0, r7, r0
1005f6f4:	218c      	movs	r1, #140	@ 0x8c
1005f6f6:	2201      	movs	r2, #1
1005f6f8:	5042      	str	r2, [r0, r1]
1005f6fa:	4601      	mov	r1, r0
1005f6fc:	318c      	adds	r1, #140	@ 0x8c
1005f6fe:	2500      	movs	r5, #0
1005f700:	604d      	str	r5, [r1, #4]
1005f702:	308d      	adds	r0, #141	@ 0x8d
1005f704:	4621      	mov	r1, r4
1005f706:	4632      	mov	r2, r6
1005f708:	f7f3 f99e 	bl	10052a48 <BLEPLAT_MemCpy>
1005f70c:	e000      	b.n	1005f710 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005f70e:	2512      	movs	r5, #18
1005f710:	4628      	mov	r0, r5
1005f712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f714 <__arm_cp.25_0>:
1005f714:	0000ffff 	.word	0x0000ffff

1005f718 <__arm_cp.25_1>:
1005f718:	20002468 	.word	0x20002468

1005f71c <LL_eadv_update_did>:
1005f71c:	b510      	push	{r4, lr}
1005f71e:	4604      	mov	r4, r0
1005f720:	2000      	movs	r0, #0
1005f722:	f003 fd41 	bl	100631a8 <Hal_Get_Random_Number>
1005f726:	4904      	ldr	r1, [pc, #16]	@ (1005f738 <__arm_cp.27_0>)
1005f728:	4001      	ands	r1, r0
1005f72a:	8820      	ldrh	r0, [r4, #0]
1005f72c:	1a40      	subs	r0, r0, r1
1005f72e:	4242      	negs	r2, r0
1005f730:	4142      	adcs	r2, r0
1005f732:	404a      	eors	r2, r1
1005f734:	8022      	strh	r2, [r4, #0]
1005f736:	bd10      	pop	{r4, pc}

1005f738 <__arm_cp.27_0>:
1005f738:	00000fff 	.word	0x00000fff

1005f73c <EADV_stop>:
1005f73c:	b5b0      	push	{r4, r5, r7, lr}
1005f73e:	4604      	mov	r4, r0
1005f740:	f3ef 8010 	mrs	r0, PRIMASK
1005f744:	b672      	cpsid	i
1005f746:	4625      	mov	r5, r4
1005f748:	35ce      	adds	r5, #206	@ 0xce
1005f74a:	78a8      	ldrb	r0, [r5, #2]
1005f74c:	f000 ffec 	bl	10060728 <LL_sched_set_cancel_request>
1005f750:	20d1      	movs	r0, #209	@ 0xd1
1005f752:	5c20      	ldrb	r0, [r4, r0]
1005f754:	f000 ffe8 	bl	10060728 <LL_sched_set_cancel_request>
1005f758:	b662      	cpsie	i
1005f75a:	78a8      	ldrb	r0, [r5, #2]
1005f75c:	f001 fa96 	bl	10060c8c <LL_sched_check_and_wait_sched>
1005f760:	20ce      	movs	r0, #206	@ 0xce
1005f762:	2100      	movs	r1, #0
1005f764:	5221      	strh	r1, [r4, r0]
1005f766:	7aa8      	ldrb	r0, [r5, #10]
1005f768:	28ff      	cmp	r0, #255	@ 0xff
1005f76a:	d001      	beq.n	1005f770 <EADV_stop+0x34>
1005f76c:	f7fb fc93 	bl	1005b096 <llc_conn_release_conn_idx>
1005f770:	20ff      	movs	r0, #255	@ 0xff
1005f772:	72a8      	strb	r0, [r5, #10]
1005f774:	7a28      	ldrb	r0, [r5, #8]
1005f776:	0780      	lsls	r0, r0, #30
1005f778:	d501      	bpl.n	1005f77e <EADV_stop+0x42>
1005f77a:	f7fc fb5d 	bl	1005be38 <llc_priv_stop_privacy_timer_ucfg_weak>
1005f77e:	bdb0      	pop	{r4, r5, r7, pc}

1005f780 <LL_Set_Advertising_Set_Random_Address>:
1005f780:	b510      	push	{r4, lr}
1005f782:	4604      	mov	r4, r0
1005f784:	f7fa f902 	bl	1005998c <scan_csr_ucfg_weak>
1005f788:	2801      	cmp	r0, #1
1005f78a:	d105      	bne.n	1005f798 <LL_Set_Advertising_Set_Random_Address+0x18>
1005f78c:	f7fc fb84 	bl	1005be98 <llc_scan_get_cntxt_p>
1005f790:	21eb      	movs	r1, #235	@ 0xeb
1005f792:	5c40      	ldrb	r0, [r0, r1]
1005f794:	07c0      	lsls	r0, r0, #31
1005f796:	d106      	bne.n	1005f7a6 <LL_Set_Advertising_Set_Random_Address+0x26>
1005f798:	f7ff fdfc 	bl	1005f394 <LL_LE_Set_Advertising_Parameters_Default>
1005f79c:	4803      	ldr	r0, [pc, #12]	@ (1005f7ac <__arm_cp.29_0>)
1005f79e:	4621      	mov	r1, r4
1005f7a0:	f7ff ff80 	bl	1005f6a4 <LL_Set_Extented_Advertising_Set_Random_Address>
1005f7a4:	bd10      	pop	{r4, pc}
1005f7a6:	200c      	movs	r0, #12
1005f7a8:	bd10      	pop	{r4, pc}
1005f7aa:	46c0      	nop			@ (mov r8, r8)

1005f7ac <__arm_cp.29_0>:
1005f7ac:	0000fffc 	.word	0x0000fffc

1005f7b0 <ll_set_advertising_data_ptr>:
1005f7b0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f7b2:	9302      	str	r3, [sp, #8]
1005f7b4:	4614      	mov	r4, r2
1005f7b6:	460f      	mov	r7, r1
1005f7b8:	4605      	mov	r5, r0
1005f7ba:	f000 ff45 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f7be:	4606      	mov	r6, r0
1005f7c0:	4830      	ldr	r0, [pc, #192]	@ (1005f884 <__arm_cp.33_0>)
1005f7c2:	4285      	cmp	r5, r0
1005f7c4:	d101      	bne.n	1005f7ca <ll_set_advertising_data_ptr+0x1a>
1005f7c6:	201f      	movs	r0, #31
1005f7c8:	e007      	b.n	1005f7da <ll_set_advertising_data_ptr+0x2a>
1005f7ca:	2001      	movs	r0, #1
1005f7cc:	2102      	movs	r1, #2
1005f7ce:	f7f9 fff9 	bl	100597c4 <hci_get_set_legacy_ext_flag>
1005f7d2:	2800      	cmp	r0, #0
1005f7d4:	d000      	beq.n	1005f7d8 <ll_set_advertising_data_ptr+0x28>
1005f7d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f7d8:	482b      	ldr	r0, [pc, #172]	@ (1005f888 <__arm_cp.33_1>)
1005f7da:	2112      	movs	r1, #18
1005f7dc:	42a0      	cmp	r0, r4
1005f7de:	d201      	bcs.n	1005f7e4 <ll_set_advertising_data_ptr+0x34>
1005f7e0:	4608      	mov	r0, r1
1005f7e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f7e4:	9101      	str	r1, [sp, #4]
1005f7e6:	4628      	mov	r0, r5
1005f7e8:	f7ff fc96 	bl	1005f118 <llc_get_advertising_set_index>
1005f7ec:	0200      	lsls	r0, r0, #8
1005f7ee:	6831      	ldr	r1, [r6, #0]
1005f7f0:	180e      	adds	r6, r1, r0
1005f7f2:	4620      	mov	r0, r4
1005f7f4:	4631      	mov	r1, r6
1005f7f6:	f000 fc4c 	bl	10060092 <llc_eadv_max_supported_data_check_ucfg_weak>
1005f7fa:	2800      	cmp	r0, #0
1005f7fc:	d1eb      	bne.n	1005f7d6 <ll_set_advertising_data_ptr+0x26>
1005f7fe:	20ce      	movs	r0, #206	@ 0xce
1005f800:	5c31      	ldrb	r1, [r6, r0]
1005f802:	2038      	movs	r0, #56	@ 0x38
1005f804:	5c30      	ldrb	r0, [r6, r0]
1005f806:	2f04      	cmp	r7, #4
1005f808:	d112      	bne.n	1005f830 <ll_set_advertising_data_ptr+0x80>
1005f80a:	2900      	cmp	r1, #0
1005f80c:	d038      	beq.n	1005f880 <ll_set_advertising_data_ptr+0xd0>
1005f80e:	2800      	cmp	r0, #0
1005f810:	9a01      	ldr	r2, [sp, #4]
1005f812:	d01b      	beq.n	1005f84c <ll_set_advertising_data_ptr+0x9c>
1005f814:	481b      	ldr	r0, [pc, #108]	@ (1005f884 <__arm_cp.33_0>)
1005f816:	4285      	cmp	r5, r0
1005f818:	d118      	bne.n	1005f84c <ll_set_advertising_data_ptr+0x9c>
1005f81a:	8df0      	ldrh	r0, [r6, #46]	@ 0x2e
1005f81c:	2800      	cmp	r0, #0
1005f81e:	d015      	beq.n	1005f84c <ll_set_advertising_data_ptr+0x9c>
1005f820:	20b8      	movs	r0, #184	@ 0xb8
1005f822:	5a30      	ldrh	r0, [r6, r0]
1005f824:	2110      	movs	r1, #16
1005f826:	4001      	ands	r1, r0
1005f828:	4321      	orrs	r1, r4
1005f82a:	4610      	mov	r0, r2
1005f82c:	d1d3      	bne.n	1005f7d6 <ll_set_advertising_data_ptr+0x26>
1005f82e:	e00f      	b.n	1005f850 <ll_set_advertising_data_ptr+0xa0>
1005f830:	4635      	mov	r5, r6
1005f832:	3538      	adds	r5, #56	@ 0x38
1005f834:	2900      	cmp	r1, #0
1005f836:	d011      	beq.n	1005f85c <ll_set_advertising_data_ptr+0xac>
1005f838:	2f03      	cmp	r7, #3
1005f83a:	d109      	bne.n	1005f850 <ll_set_advertising_data_ptr+0xa0>
1005f83c:	2002      	movs	r0, #2
1005f83e:	7028      	strb	r0, [r5, #0]
1005f840:	86f4      	strh	r4, [r6, #54]	@ 0x36
1005f842:	2000      	movs	r0, #0
1005f844:	86b0      	strh	r0, [r6, #52]	@ 0x34
1005f846:	9902      	ldr	r1, [sp, #8]
1005f848:	6331      	str	r1, [r6, #48]	@ 0x30
1005f84a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f84c:	4610      	mov	r0, r2
1005f84e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f850:	36b6      	adds	r6, #182	@ 0xb6
1005f852:	4630      	mov	r0, r6
1005f854:	f7ff ff62 	bl	1005f71c <LL_eadv_update_did>
1005f858:	2000      	movs	r0, #0
1005f85a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f85c:	4637      	mov	r7, r6
1005f85e:	3728      	adds	r7, #40	@ 0x28
1005f860:	2800      	cmp	r0, #0
1005f862:	9a02      	ldr	r2, [sp, #8]
1005f864:	d005      	beq.n	1005f872 <ll_set_advertising_data_ptr+0xc2>
1005f866:	6839      	ldr	r1, [r7, #0]
1005f868:	20a1      	movs	r0, #161	@ 0xa1
1005f86a:	9a02      	ldr	r2, [sp, #8]
1005f86c:	f004 fdb2 	bl	100643d4 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005f870:	9a02      	ldr	r2, [sp, #8]
1005f872:	603a      	str	r2, [r7, #0]
1005f874:	2001      	movs	r0, #1
1005f876:	7028      	strb	r0, [r5, #0]
1005f878:	85f4      	strh	r4, [r6, #46]	@ 0x2e
1005f87a:	2000      	movs	r0, #0
1005f87c:	85b0      	strh	r0, [r6, #44]	@ 0x2c
1005f87e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f880:	9801      	ldr	r0, [sp, #4]
1005f882:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005f884 <__arm_cp.33_0>:
1005f884:	0000fffc 	.word	0x0000fffc

1005f888 <__arm_cp.33_1>:
1005f888:	00000672 	.word	0x00000672

1005f88c <ll_set_legacy_advertising_data_ptr>:
1005f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f88e:	460c      	mov	r4, r1
1005f890:	4605      	mov	r5, r0
1005f892:	f000 fed9 	bl	10060648 <llc_get_linkms_cntxt_p>
1005f896:	4607      	mov	r7, r0
1005f898:	f7ff fd7c 	bl	1005f394 <LL_LE_Set_Advertising_Parameters_Default>
1005f89c:	4e0c      	ldr	r6, [pc, #48]	@ (1005f8d0 <__arm_cp.36_0>)
1005f89e:	4630      	mov	r0, r6
1005f8a0:	f7ff fc3a 	bl	1005f118 <llc_get_advertising_set_index>
1005f8a4:	490b      	ldr	r1, [pc, #44]	@ (1005f8d4 <__arm_cp.36_1>)
1005f8a6:	4288      	cmp	r0, r1
1005f8a8:	d108      	bne.n	1005f8bc <ll_set_legacy_advertising_data_ptr+0x30>
1005f8aa:	f7ff fd43 	bl	1005f334 <LL_Context_ReturnFree>
1005f8ae:	28ff      	cmp	r0, #255	@ 0xff
1005f8b0:	d00b      	beq.n	1005f8ca <ll_set_legacy_advertising_data_ptr+0x3e>
1005f8b2:	0200      	lsls	r0, r0, #8
1005f8b4:	6839      	ldr	r1, [r7, #0]
1005f8b6:	1808      	adds	r0, r1, r0
1005f8b8:	21be      	movs	r1, #190	@ 0xbe
1005f8ba:	5246      	strh	r6, [r0, r1]
1005f8bc:	2103      	movs	r1, #3
1005f8be:	4630      	mov	r0, r6
1005f8c0:	462a      	mov	r2, r5
1005f8c2:	4623      	mov	r3, r4
1005f8c4:	f7ff ff74 	bl	1005f7b0 <ll_set_advertising_data_ptr>
1005f8c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f8ca:	2001      	movs	r0, #1
1005f8cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f8ce:	46c0      	nop			@ (mov r8, r8)

1005f8d0 <__arm_cp.36_0>:
1005f8d0:	0000fffc 	.word	0x0000fffc

1005f8d4 <__arm_cp.36_1>:
1005f8d4:	0000ffff 	.word	0x0000ffff

1005f8d8 <ADV_cancelslot>:
1005f8d8:	21d0      	movs	r1, #208	@ 0xd0
1005f8da:	22ff      	movs	r2, #255	@ 0xff
1005f8dc:	5442      	strb	r2, [r0, r1]
1005f8de:	4770      	bx	lr

1005f8e0 <ADV_skiproutine>:
1005f8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f8e2:	b08f      	sub	sp, #60	@ 0x3c
1005f8e4:	4607      	mov	r7, r0
1005f8e6:	20d0      	movs	r0, #208	@ 0xd0
1005f8e8:	5c38      	ldrb	r0, [r7, r0]
1005f8ea:	232c      	movs	r3, #44	@ 0x2c
1005f8ec:	4358      	muls	r0, r3
1005f8ee:	4a68      	ldr	r2, [pc, #416]	@ (1005fa90 <__arm_cp.40_0>)
1005f8f0:	6812      	ldr	r2, [r2, #0]
1005f8f2:	1810      	adds	r0, r2, r0
1005f8f4:	7d80      	ldrb	r0, [r0, #22]
1005f8f6:	463c      	mov	r4, r7
1005f8f8:	3494      	adds	r4, #148	@ 0x94
1005f8fa:	463a      	mov	r2, r7
1005f8fc:	32b4      	adds	r2, #180	@ 0xb4
1005f8fe:	9205      	str	r2, [sp, #20]
1005f900:	463e      	mov	r6, r7
1005f902:	36d6      	adds	r6, #214	@ 0xd6
1005f904:	2814      	cmp	r0, #20
1005f906:	9604      	str	r6, [sp, #16]
1005f908:	9302      	str	r3, [sp, #8]
1005f90a:	d10a      	bne.n	1005f922 <ADV_skiproutine+0x42>
1005f90c:	f7f3 f967 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
1005f910:	4605      	mov	r5, r0
1005f912:	f000 fed7 	bl	100606c4 <LL_sched_engine_return_actual_scheduler_margin>
1005f916:	9b05      	ldr	r3, [sp, #20]
1005f918:	1828      	adds	r0, r5, r0
1005f91a:	3032      	adds	r0, #50	@ 0x32
1005f91c:	60a0      	str	r0, [r4, #8]
1005f91e:	2501      	movs	r5, #1
1005f920:	e01b      	b.n	1005f95a <ADV_skiproutine+0x7a>
1005f922:	68a2      	ldr	r2, [r4, #8]
1005f924:	1856      	adds	r6, r2, r1
1005f926:	2500      	movs	r5, #0
1005f928:	4630      	mov	r0, r6
1005f92a:	4611      	mov	r1, r2
1005f92c:	f000 fec6 	bl	100606bc <LL_sched_time_t1_ge_t2>
1005f930:	2800      	cmp	r0, #0
1005f932:	d005      	beq.n	1005f940 <ADV_skiproutine+0x60>
1005f934:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1005f936:	68a1      	ldr	r1, [r4, #8]
1005f938:	180a      	adds	r2, r1, r0
1005f93a:	60a2      	str	r2, [r4, #8]
1005f93c:	1c6d      	adds	r5, r5, #1
1005f93e:	e7f3      	b.n	1005f928 <ADV_skiproutine+0x48>
1005f940:	9b05      	ldr	r3, [sp, #20]
1005f942:	8898      	ldrh	r0, [r3, #4]
1005f944:	0700      	lsls	r0, r0, #28
1005f946:	d408      	bmi.n	1005f95a <ADV_skiproutine+0x7a>
1005f948:	2001      	movs	r0, #1
1005f94a:	f003 fc34 	bl	100631b6 <Hal_Get_Random_Number32>
1005f94e:	9b05      	ldr	r3, [sp, #20]
1005f950:	4950      	ldr	r1, [pc, #320]	@ (1005fa94 <__arm_cp.40_1>)
1005f952:	4001      	ands	r1, r0
1005f954:	68a0      	ldr	r0, [r4, #8]
1005f956:	1840      	adds	r0, r0, r1
1005f958:	60a0      	str	r0, [r4, #8]
1005f95a:	8898      	ldrh	r0, [r3, #4]
1005f95c:	2103      	movs	r1, #3
1005f95e:	4001      	ands	r1, r0
1005f960:	1e48      	subs	r0, r1, #1
1005f962:	4181      	sbcs	r1, r0
1005f964:	0048      	lsls	r0, r1, #1
1005f966:	8018      	strh	r0, [r3, #0]
1005f968:	7b98      	ldrb	r0, [r3, #14]
1005f96a:	2201      	movs	r2, #1
1005f96c:	4601      	mov	r1, r0
1005f96e:	9201      	str	r2, [sp, #4]
1005f970:	4011      	ands	r1, r2
1005f972:	0782      	lsls	r2, r0, #30
1005f974:	0fd2      	lsrs	r2, r2, #31
1005f976:	1889      	adds	r1, r1, r2
1005f978:	0740      	lsls	r0, r0, #29
1005f97a:	0fc0      	lsrs	r0, r0, #31
1005f97c:	1808      	adds	r0, r1, r0
1005f97e:	1e40      	subs	r0, r0, #1
1005f980:	7798      	strb	r0, [r3, #30]
1005f982:	4638      	mov	r0, r7
1005f984:	461e      	mov	r6, r3
1005f986:	f000 f88b 	bl	1005faa0 <UTIL_u8GetNextAdvChannel>
1005f98a:	4601      	mov	r1, r0
1005f98c:	7f30      	ldrb	r0, [r6, #28]
1005f98e:	f7f4 fd10 	bl	100543b2 <BLEPLAT_CNTR_SmSetRemapChan>
1005f992:	7f30      	ldrb	r0, [r6, #28]
1005f994:	f7f4 fdcc 	bl	10054530 <BLEPLAT_CNTR_SmSetTxMode>
1005f998:	2000      	movs	r0, #0
1005f99a:	9003      	str	r0, [sp, #12]
1005f99c:	9904      	ldr	r1, [sp, #16]
1005f99e:	7148      	strb	r0, [r1, #5]
1005f9a0:	4638      	mov	r0, r7
1005f9a2:	3028      	adds	r0, #40	@ 0x28
1005f9a4:	f7ff fafe 	bl	1005efa4 <LL_eadv_switchbackupdata_data_struc>
1005f9a8:	4606      	mov	r6, r0
1005f9aa:	4638      	mov	r0, r7
1005f9ac:	303c      	adds	r0, #60	@ 0x3c
1005f9ae:	f7ff faf9 	bl	1005efa4 <LL_eadv_switchbackupdata_data_struc>
1005f9b2:	2e00      	cmp	r6, #0
1005f9b4:	9e04      	ldr	r6, [sp, #16]
1005f9b6:	d002      	beq.n	1005f9be <ADV_skiproutine+0xde>
1005f9b8:	7931      	ldrb	r1, [r6, #4]
1005f9ba:	07c9      	lsls	r1, r1, #31
1005f9bc:	d104      	bne.n	1005f9c8 <ADV_skiproutine+0xe8>
1005f9be:	2800      	cmp	r0, #0
1005f9c0:	d005      	beq.n	1005f9ce <ADV_skiproutine+0xee>
1005f9c2:	7930      	ldrb	r0, [r6, #4]
1005f9c4:	0780      	lsls	r0, r0, #30
1005f9c6:	d502      	bpl.n	1005f9ce <ADV_skiproutine+0xee>
1005f9c8:	4638      	mov	r0, r7
1005f9ca:	f7ff fbe7 	bl	1005f19c <llc_eadv_generate_new_rpa_for_one_adv_set>
1005f9ce:	68a1      	ldr	r1, [r4, #8]
1005f9d0:	6820      	ldr	r0, [r4, #0]
1005f9d2:	9b05      	ldr	r3, [sp, #20]
1005f9d4:	88da      	ldrh	r2, [r3, #6]
1005f9d6:	2a00      	cmp	r2, #0
1005f9d8:	d102      	bne.n	1005f9e0 <ADV_skiproutine+0x100>
1005f9da:	7eda      	ldrb	r2, [r3, #27]
1005f9dc:	2a01      	cmp	r2, #1
1005f9de:	d003      	beq.n	1005f9e8 <ADV_skiproutine+0x108>
1005f9e0:	4288      	cmp	r0, r1
1005f9e2:	da4c      	bge.n	1005fa7e <ADV_skiproutine+0x19e>
1005f9e4:	2800      	cmp	r0, #0
1005f9e6:	d04a      	beq.n	1005fa7e <ADV_skiproutine+0x19e>
1005f9e8:	7e98      	ldrb	r0, [r3, #26]
1005f9ea:	2800      	cmp	r0, #0
1005f9ec:	d047      	beq.n	1005fa7e <ADV_skiproutine+0x19e>
1005f9ee:	8898      	ldrh	r0, [r3, #4]
1005f9f0:	0700      	lsls	r0, r0, #28
1005f9f2:	d520      	bpl.n	1005fa36 <ADV_skiproutine+0x156>
1005f9f4:	a80d      	add	r0, sp, #52	@ 0x34
1005f9f6:	9000      	str	r0, [sp, #0]
1005f9f8:	9903      	ldr	r1, [sp, #12]
1005f9fa:	8081      	strh	r1, [r0, #4]
1005f9fc:	910d      	str	r1, [sp, #52]	@ 0x34
1005f9fe:	a806      	add	r0, sp, #24
1005fa00:	9a01      	ldr	r2, [sp, #4]
1005fa02:	7642      	strb	r2, [r0, #25]
1005fa04:	223c      	movs	r2, #60	@ 0x3c
1005fa06:	7682      	strb	r2, [r0, #26]
1005fa08:	22ff      	movs	r2, #255	@ 0xff
1005fa0a:	7582      	strb	r2, [r0, #22]
1005fa0c:	81c1      	strh	r1, [r0, #14]
1005fa0e:	4a22      	ldr	r2, [pc, #136]	@ (1005fa98 <__arm_cp.40_2>)
1005fa10:	8282      	strh	r2, [r0, #20]
1005fa12:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1005fa14:	7a13      	ldrb	r3, [r2, #8]
1005fa16:	7603      	strb	r3, [r0, #24]
1005fa18:	8181      	strh	r1, [r0, #12]
1005fa1a:	75c1      	strb	r1, [r0, #23]
1005fa1c:	9b00      	ldr	r3, [sp, #0]
1005fa1e:	9307      	str	r3, [sp, #28]
1005fa20:	3209      	adds	r2, #9
1005fa22:	9206      	str	r2, [sp, #24]
1005fa24:	910a      	str	r1, [sp, #40]	@ 0x28
1005fa26:	9308      	str	r3, [sp, #32]
1005fa28:	f7fb f832 	bl	1005aa90 <llc_conn_push_connection_complete_event>
1005fa2c:	7830      	ldrb	r0, [r6, #0]
1005fa2e:	0780      	lsls	r0, r0, #30
1005fa30:	d501      	bpl.n	1005fa36 <ADV_skiproutine+0x156>
1005fa32:	f7fc fa01 	bl	1005be38 <llc_priv_stop_privacy_timer_ucfg_weak>
1005fa36:	2002      	movs	r0, #2
1005fa38:	f7f9 fed2 	bl	100597e0 <hci_check_legacy_ext_flag>
1005fa3c:	2801      	cmp	r0, #1
1005fa3e:	d119      	bne.n	1005fa74 <ADV_skiproutine+0x194>
1005fa40:	9b05      	ldr	r3, [sp, #20]
1005fa42:	88da      	ldrh	r2, [r3, #6]
1005fa44:	2a00      	cmp	r2, #0
1005fa46:	d001      	beq.n	1005fa4c <ADV_skiproutine+0x16c>
1005fa48:	203c      	movs	r0, #60	@ 0x3c
1005fa4a:	e000      	b.n	1005fa4e <ADV_skiproutine+0x16e>
1005fa4c:	2043      	movs	r0, #67	@ 0x43
1005fa4e:	9001      	str	r0, [sp, #4]
1005fa50:	4812      	ldr	r0, [pc, #72]	@ (1005fa9c <__arm_cp.40_3>)
1005fa52:	6800      	ldr	r0, [r0, #0]
1005fa54:	9902      	ldr	r1, [sp, #8]
1005fa56:	5c40      	ldrb	r0, [r0, r1]
1005fa58:	0100      	lsls	r0, r0, #4
1005fa5a:	43c0      	mvns	r0, r0
1005fa5c:	4619      	mov	r1, r3
1005fa5e:	23a1      	movs	r3, #161	@ 0xa1
1005fa60:	4303      	orrs	r3, r0
1005fa62:	20b1      	movs	r0, #177	@ 0xb1
1005fa64:	4018      	ands	r0, r3
1005fa66:	7a0b      	ldrb	r3, [r1, #8]
1005fa68:	1a9a      	subs	r2, r3, r2
1005fa6a:	b2d3      	uxtb	r3, r2
1005fa6c:	7a8a      	ldrb	r2, [r1, #10]
1005fa6e:	9901      	ldr	r1, [sp, #4]
1005fa70:	f000 f85e 	bl	1005fb30 <hci_le_advertising_set_terminated_event_push>
1005fa74:	4638      	mov	r0, r7
1005fa76:	f000 f895 	bl	1005fba4 <EADV_stop_isr>
1005fa7a:	68a1      	ldr	r1, [r4, #8]
1005fa7c:	9b05      	ldr	r3, [sp, #20]
1005fa7e:	7f18      	ldrb	r0, [r3, #28]
1005fa80:	f000 fe40 	bl	10060704 <LL_sched_set_anchor>
1005fa84:	9803      	ldr	r0, [sp, #12]
1005fa86:	7170      	strb	r0, [r6, #5]
1005fa88:	4628      	mov	r0, r5
1005fa8a:	b00f      	add	sp, #60	@ 0x3c
1005fa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fa8e:	46c0      	nop			@ (mov r8, r8)

1005fa90 <__arm_cp.40_0>:
1005fa90:	20002470 	.word	0x20002470

1005fa94 <__arm_cp.40_1>:
1005fa94:	00000fff 	.word	0x00000fff

1005fa98 <__arm_cp.40_2>:
1005fa98:	0000ffff 	.word	0x0000ffff

1005fa9c <__arm_cp.40_3>:
1005fa9c:	20002414 	.word	0x20002414

1005faa0 <UTIL_u8GetNextAdvChannel>:
1005faa0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005faa2:	4604      	mov	r4, r0
1005faa4:	20c2      	movs	r0, #194	@ 0xc2
1005faa6:	5c27      	ldrb	r7, [r4, r0]
1005faa8:	2501      	movs	r5, #1
1005faaa:	403d      	ands	r5, r7
1005faac:	07ba      	lsls	r2, r7, #30
1005faae:	0fd0      	lsrs	r0, r2, #31
1005fab0:	1828      	adds	r0, r5, r0
1005fab2:	0779      	lsls	r1, r7, #29
1005fab4:	0fc9      	lsrs	r1, r1, #31
1005fab6:	1840      	adds	r0, r0, r1
1005fab8:	1e40      	subs	r0, r0, #1
1005faba:	b2c0      	uxtb	r0, r0
1005fabc:	34c2      	adds	r4, #194	@ 0xc2
1005fabe:	7c26      	ldrb	r6, [r4, #16]
1005fac0:	42b0      	cmp	r0, r6
1005fac2:	d10f      	bne.n	1005fae4 <UTIL_u8GetNextAdvChannel+0x44>
1005fac4:	9201      	str	r2, [sp, #4]
1005fac6:	2001      	movs	r0, #1
1005fac8:	9002      	str	r0, [sp, #8]
1005faca:	f003 fb6d 	bl	100631a8 <Hal_Get_Random_Number>
1005face:	2e01      	cmp	r6, #1
1005fad0:	d00a      	beq.n	1005fae8 <UTIL_u8GetNextAdvChannel+0x48>
1005fad2:	2e02      	cmp	r6, #2
1005fad4:	d10e      	bne.n	1005faf4 <UTIL_u8GetNextAdvChannel+0x54>
1005fad6:	b2c0      	uxtb	r0, r0
1005fad8:	2106      	movs	r1, #6
1005fada:	f7e0 fc37 	bl	1004034c <__aeabi_uidivmod>
1005fade:	a012      	add	r0, pc, #72	@ (adr r0, 1005fb28 <UTIL_u8GetNextAdvChannel+0x88>)
1005fae0:	5c40      	ldrb	r0, [r0, r1]
1005fae2:	e012      	b.n	1005fb0a <UTIL_u8GetNextAdvChannel+0x6a>
1005fae4:	7c60      	ldrb	r0, [r4, #17]
1005fae6:	e011      	b.n	1005fb0c <UTIL_u8GetNextAdvChannel+0x6c>
1005fae8:	9902      	ldr	r1, [sp, #8]
1005faea:	4008      	ands	r0, r1
1005faec:	2d00      	cmp	r5, #0
1005faee:	d104      	bne.n	1005fafa <UTIL_u8GetNextAdvChannel+0x5a>
1005faf0:	a10c      	add	r1, pc, #48	@ (adr r1, 1005fb24 <UTIL_u8GetNextAdvChannel+0x84>)
1005faf2:	e008      	b.n	1005fb06 <UTIL_u8GetNextAdvChannel+0x66>
1005faf4:	08b8      	lsrs	r0, r7, #2
1005faf6:	1a38      	subs	r0, r7, r0
1005faf8:	e007      	b.n	1005fb0a <UTIL_u8GetNextAdvChannel+0x6a>
1005fafa:	9901      	ldr	r1, [sp, #4]
1005fafc:	2900      	cmp	r1, #0
1005fafe:	d401      	bmi.n	1005fb04 <UTIL_u8GetNextAdvChannel+0x64>
1005fb00:	a107      	add	r1, pc, #28	@ (adr r1, 1005fb20 <UTIL_u8GetNextAdvChannel+0x80>)
1005fb02:	e000      	b.n	1005fb06 <UTIL_u8GetNextAdvChannel+0x66>
1005fb04:	a105      	add	r1, pc, #20	@ (adr r1, 1005fb1c <UTIL_u8GetNextAdvChannel+0x7c>)
1005fb06:	1808      	adds	r0, r1, r0
1005fb08:	7800      	ldrb	r0, [r0, #0]
1005fb0a:	7460      	strb	r0, [r4, #17]
1005fb0c:	0071      	lsls	r1, r6, #1
1005fb0e:	b2c2      	uxtb	r2, r0
1005fb10:	40ca      	lsrs	r2, r1
1005fb12:	2003      	movs	r0, #3
1005fb14:	4010      	ands	r0, r2
1005fb16:	3024      	adds	r0, #36	@ 0x24
1005fb18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005fb1a:	46c0      	nop			@ (mov r8, r8)
1005fb1c:	00000906 	.word	0x00000906
1005fb20:	00000d07 	.word	0x00000d07
1005fb24:	00000e0b 	.word	0x00000e0b
1005fb28:	2d271e1b 	.word	0x2d271e1b
1005fb2c:	00003936 	.word	0x00003936

1005fb30 <hci_le_advertising_set_terminated_event_push>:
1005fb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fb32:	461f      	mov	r7, r3
1005fb34:	4616      	mov	r6, r2
1005fb36:	460d      	mov	r5, r1
1005fb38:	4604      	mov	r4, r0
1005fb3a:	06c0      	lsls	r0, r0, #27
1005fb3c:	d40b      	bmi.n	1005fb56 <hci_le_advertising_set_terminated_event_push+0x26>
1005fb3e:	4817      	ldr	r0, [pc, #92]	@ (1005fb9c <__arm_cp.42_0>)
1005fb40:	6800      	ldr	r0, [r0, #0]
1005fb42:	213d      	movs	r1, #61	@ 0x3d
1005fb44:	5c41      	ldrb	r1, [r0, r1]
1005fb46:	0689      	lsls	r1, r1, #26
1005fb48:	d527      	bpl.n	1005fb9a <hci_le_advertising_set_terminated_event_push+0x6a>
1005fb4a:	303d      	adds	r0, #61	@ 0x3d
1005fb4c:	7ac0      	ldrb	r0, [r0, #11]
1005fb4e:	0780      	lsls	r0, r0, #30
1005fb50:	d523      	bpl.n	1005fb9a <hci_le_advertising_set_terminated_event_push+0x6a>
1005fb52:	221f      	movs	r2, #31
1005fb54:	e002      	b.n	1005fb5c <hci_le_advertising_set_terminated_event_push+0x2c>
1005fb56:	20bf      	movs	r0, #191	@ 0xbf
1005fb58:	4004      	ands	r4, r0
1005fb5a:	2211      	movs	r2, #17
1005fb5c:	4810      	ldr	r0, [pc, #64]	@ (1005fba0 <__arm_cp.42_1>)
1005fb5e:	6800      	ldr	r0, [r0, #0]
1005fb60:	0761      	lsls	r1, r4, #29
1005fb62:	0ec9      	lsrs	r1, r1, #27
1005fb64:	1840      	adds	r0, r0, r1
1005fb66:	6900      	ldr	r0, [r0, #16]
1005fb68:	2303      	movs	r3, #3
1005fb6a:	4621      	mov	r1, r4
1005fb6c:	f7f5 fcb8 	bl	100554e0 <aci_event_fifo_push_header>
1005fb70:	2800      	cmp	r0, #0
1005fb72:	d012      	beq.n	1005fb9a <hci_le_advertising_set_terminated_event_push+0x6a>
1005fb74:	4601      	mov	r1, r0
1005fb76:	200f      	movs	r0, #15
1005fb78:	72c8      	strb	r0, [r1, #11]
1005fb7a:	20ff      	movs	r0, #255	@ 0xff
1005fb7c:	7288      	strb	r0, [r1, #10]
1005fb7e:	730f      	strb	r7, [r1, #12]
1005fb80:	724e      	strb	r6, [r1, #9]
1005fb82:	720d      	strb	r5, [r1, #8]
1005fb84:	2012      	movs	r0, #18
1005fb86:	71c8      	strb	r0, [r1, #7]
1005fb88:	2006      	movs	r0, #6
1005fb8a:	7188      	strb	r0, [r1, #6]
1005fb8c:	203e      	movs	r0, #62	@ 0x3e
1005fb8e:	7148      	strb	r0, [r1, #5]
1005fb90:	2004      	movs	r0, #4
1005fb92:	7108      	strb	r0, [r1, #4]
1005fb94:	4620      	mov	r0, r4
1005fb96:	f7f5 fd40 	bl	1005561a <aci_event_fifo_push>
1005fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005fb9c <__arm_cp.42_0>:
1005fb9c:	20002468 	.word	0x20002468

1005fba0 <__arm_cp.42_1>:
1005fba0:	20002418 	.word	0x20002418

1005fba4 <EADV_stop_isr>:
1005fba4:	b5b0      	push	{r4, r5, r7, lr}
1005fba6:	4604      	mov	r4, r0
1005fba8:	20d1      	movs	r0, #209	@ 0xd1
1005fbaa:	5c20      	ldrb	r0, [r4, r0]
1005fbac:	f000 fdbc 	bl	10060728 <LL_sched_set_cancel_request>
1005fbb0:	4625      	mov	r5, r4
1005fbb2:	35ce      	adds	r5, #206	@ 0xce
1005fbb4:	78a8      	ldrb	r0, [r5, #2]
1005fbb6:	f000 fdb7 	bl	10060728 <LL_sched_set_cancel_request>
1005fbba:	20ce      	movs	r0, #206	@ 0xce
1005fbbc:	2100      	movs	r1, #0
1005fbbe:	5221      	strh	r1, [r4, r0]
1005fbc0:	7aa8      	ldrb	r0, [r5, #10]
1005fbc2:	28ff      	cmp	r0, #255	@ 0xff
1005fbc4:	d001      	beq.n	1005fbca <EADV_stop_isr+0x26>
1005fbc6:	f7fb fa66 	bl	1005b096 <llc_conn_release_conn_idx>
1005fbca:	20ff      	movs	r0, #255	@ 0xff
1005fbcc:	72a8      	strb	r0, [r5, #10]
1005fbce:	bdb0      	pop	{r4, r5, r7, pc}

1005fbd0 <ADV_createslot>:
1005fbd0:	b570      	push	{r4, r5, r6, lr}
1005fbd2:	4604      	mov	r4, r0
1005fbd4:	20c5      	movs	r0, #197	@ 0xc5
1005fbd6:	5c20      	ldrb	r0, [r4, r0]
1005fbd8:	f7fc f9be 	bl	1005bf58 <llc_convert_hci_phy_enum_to_hw_phy>
1005fbdc:	4605      	mov	r5, r0
1005fbde:	4626      	mov	r6, r4
1005fbe0:	36c5      	adds	r6, #197	@ 0xc5
1005fbe2:	7af0      	ldrb	r0, [r6, #11]
1005fbe4:	4629      	mov	r1, r5
1005fbe6:	f7f4 fcc4 	bl	10054572 <BLEPLAT_CNTR_SmSetTxPhy>
1005fbea:	7af0      	ldrb	r0, [r6, #11]
1005fbec:	4629      	mov	r1, r5
1005fbee:	f7f4 fc54 	bl	1005449a <BLEPLAT_CNTR_SmSetRxPhy>
1005fbf2:	f7f3 ffa0 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
1005fbf6:	f000 fd11 	bl	1006061c <LL_get_tx_common_buffer_p>
1005fbfa:	4602      	mov	r2, r0
1005fbfc:	7db0      	ldrb	r0, [r6, #22]
1005fbfe:	4621      	mov	r1, r4
1005fc00:	f000 f801 	bl	1005fc06 <EADV_vPrepareAdvOrRspLegacyPacket>
1005fc04:	bd70      	pop	{r4, r5, r6, pc}

1005fc06 <EADV_vPrepareAdvOrRspLegacyPacket>:
1005fc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fc08:	4614      	mov	r4, r2
1005fc0a:	460d      	mov	r5, r1
1005fc0c:	4606      	mov	r6, r0
1005fc0e:	460f      	mov	r7, r1
1005fc10:	37b8      	adds	r7, #184	@ 0xb8
1005fc12:	2004      	movs	r0, #4
1005fc14:	2e00      	cmp	r6, #0
1005fc16:	4601      	mov	r1, r0
1005fc18:	d10d      	bne.n	1005fc36 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005fc1a:	8839      	ldrh	r1, [r7, #0]
1005fc1c:	074a      	lsls	r2, r1, #29
1005fc1e:	d407      	bmi.n	1005fc30 <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1005fc20:	2203      	movs	r2, #3
1005fc22:	4011      	ands	r1, r2
1005fc24:	424a      	negs	r2, r1
1005fc26:	414a      	adcs	r2, r1
1005fc28:	2902      	cmp	r1, #2
1005fc2a:	d003      	beq.n	1005fc34 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1005fc2c:	0051      	lsls	r1, r2, #1
1005fc2e:	e002      	b.n	1005fc36 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005fc30:	2101      	movs	r1, #1
1005fc32:	e000      	b.n	1005fc36 <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005fc34:	2106      	movs	r1, #6
1005fc36:	7021      	strb	r1, [r4, #0]
1005fc38:	2e00      	cmp	r6, #0
1005fc3a:	d107      	bne.n	1005fc4c <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005fc3c:	8839      	ldrh	r1, [r7, #0]
1005fc3e:	4001      	ands	r1, r0
1005fc40:	d104      	bne.n	1005fc4c <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005fc42:	202e      	movs	r0, #46	@ 0x2e
1005fc44:	5c28      	ldrb	r0, [r5, r0]
1005fc46:	1d80      	adds	r0, r0, #6
1005fc48:	7060      	strb	r0, [r4, #1]
1005fc4a:	e00f      	b.n	1005fc6c <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1005fc4c:	2e00      	cmp	r6, #0
1005fc4e:	d004      	beq.n	1005fc5a <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1005fc50:	4628      	mov	r0, r5
1005fc52:	3042      	adds	r0, #66	@ 0x42
1005fc54:	7800      	ldrb	r0, [r0, #0]
1005fc56:	1d80      	adds	r0, r0, #6
1005fc58:	e000      	b.n	1005fc5c <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1005fc5a:	200c      	movs	r0, #12
1005fc5c:	7060      	strb	r0, [r4, #1]
1005fc5e:	4620      	mov	r0, r4
1005fc60:	3008      	adds	r0, #8
1005fc62:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005fc64:	3109      	adds	r1, #9
1005fc66:	2206      	movs	r2, #6
1005fc68:	f7f2 feee 	bl	10052a48 <BLEPLAT_MemCpy>
1005fc6c:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005fc6e:	1ca0      	adds	r0, r4, #2
1005fc70:	1c49      	adds	r1, r1, #1
1005fc72:	2206      	movs	r2, #6
1005fc74:	f7f2 fee8 	bl	10052a48 <BLEPLAT_MemCpy>
1005fc78:	7820      	ldrb	r0, [r4, #0]
1005fc7a:	212f      	movs	r1, #47	@ 0x2f
1005fc7c:	4001      	ands	r1, r0
1005fc7e:	7021      	strb	r1, [r4, #0]
1005fc80:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005fc82:	7800      	ldrb	r0, [r0, #0]
1005fc84:	07c0      	lsls	r0, r0, #31
1005fc86:	0e40      	lsrs	r0, r0, #25
1005fc88:	1840      	adds	r0, r0, r1
1005fc8a:	7020      	strb	r0, [r4, #0]
1005fc8c:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005fc8e:	7a09      	ldrb	r1, [r1, #8]
1005fc90:	01c9      	lsls	r1, r1, #7
1005fc92:	1808      	adds	r0, r1, r0
1005fc94:	7020      	strb	r0, [r4, #0]
1005fc96:	f000 f9ed 	bl	10060074 <llc_get_channel_sel_algo2_enabled>
1005fc9a:	7821      	ldrb	r1, [r4, #0]
1005fc9c:	0140      	lsls	r0, r0, #5
1005fc9e:	4308      	orrs	r0, r1
1005fca0:	7020      	strb	r0, [r4, #0]
1005fca2:	4271      	negs	r1, r6
1005fca4:	4171      	adcs	r1, r6
1005fca6:	8838      	ldrh	r0, [r7, #0]
1005fca8:	2204      	movs	r2, #4
1005fcaa:	4002      	ands	r2, r0
1005fcac:	0890      	lsrs	r0, r2, #2
1005fcae:	4008      	ands	r0, r1
1005fcb0:	d101      	bne.n	1005fcb6 <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1005fcb2:	2708      	movs	r7, #8
1005fcb4:	e000      	b.n	1005fcb8 <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1005fcb6:	270e      	movs	r7, #14
1005fcb8:	2800      	cmp	r0, #0
1005fcba:	d001      	beq.n	1005fcc0 <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1005fcbc:	200c      	movs	r0, #12
1005fcbe:	e011      	b.n	1005fce4 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1005fcc0:	2e00      	cmp	r6, #0
1005fcc2:	d001      	beq.n	1005fcc8 <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1005fcc4:	203c      	movs	r0, #60	@ 0x3c
1005fcc6:	e000      	b.n	1005fcca <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1005fcc8:	2028      	movs	r0, #40	@ 0x28
1005fcca:	5829      	ldr	r1, [r5, r0]
1005fccc:	2e00      	cmp	r6, #0
1005fcce:	d001      	beq.n	1005fcd4 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1005fcd0:	2042      	movs	r0, #66	@ 0x42
1005fcd2:	e000      	b.n	1005fcd6 <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1005fcd4:	202e      	movs	r0, #46	@ 0x2e
1005fcd6:	5a2d      	ldrh	r5, [r5, r0]
1005fcd8:	19e0      	adds	r0, r4, r7
1005fcda:	462a      	mov	r2, r5
1005fcdc:	f7f2 feb4 	bl	10052a48 <BLEPLAT_MemCpy>
1005fce0:	1978      	adds	r0, r7, r5
1005fce2:	1e80      	subs	r0, r0, #2
1005fce4:	7060      	strb	r0, [r4, #1]
1005fce6:	2000      	movs	r0, #0
1005fce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005fcec <ADV_ISR_connect_request_received>:
1005fcec:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fcee:	b085      	sub	sp, #20
1005fcf0:	4616      	mov	r6, r2
1005fcf2:	460d      	mov	r5, r1
1005fcf4:	4604      	mov	r4, r0
1005fcf6:	f7f3 ffff 	bl	10053cf8 <BLEPLAT_CNTR_PacketClrPllTrig>
1005fcfa:	f7f2 ffb1 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
1005fcfe:	2003      	movs	r0, #3
1005fd00:	43c0      	mvns	r0, r0
1005fd02:	1cc1      	adds	r1, r0, #3
1005fd04:	4668      	mov	r0, sp
1005fd06:	8101      	strh	r1, [r0, #8]
1005fd08:	2101      	movs	r1, #1
1005fd0a:	8201      	strh	r1, [r0, #16]
1005fd0c:	7341      	strb	r1, [r0, #13]
1005fd0e:	21be      	movs	r1, #190	@ 0xbe
1005fd10:	5a61      	ldrh	r1, [r4, r1]
1005fd12:	7281      	strb	r1, [r0, #10]
1005fd14:	4627      	mov	r7, r4
1005fd16:	37be      	adds	r7, #190	@ 0xbe
1005fd18:	7eba      	ldrb	r2, [r7, #26]
1005fd1a:	72c2      	strb	r2, [r0, #11]
1005fd1c:	7cba      	ldrb	r2, [r7, #18]
1005fd1e:	7382      	strb	r2, [r0, #14]
1005fd20:	4a0e      	ldr	r2, [pc, #56]	@ (1005fd5c <__arm_cp.47_0>)
1005fd22:	1a89      	subs	r1, r1, r2
1005fd24:	1e4a      	subs	r2, r1, #1
1005fd26:	4191      	sbcs	r1, r2
1005fd28:	73c1      	strb	r1, [r0, #15]
1005fd2a:	7301      	strb	r1, [r0, #12]
1005fd2c:	9601      	str	r6, [sp, #4]
1005fd2e:	9500      	str	r5, [sp, #0]
1005fd30:	f7fb f9ec 	bl	1005b10c <llc_conn_go_to_connect>
1005fd34:	4620      	mov	r0, r4
1005fd36:	3028      	adds	r0, #40	@ 0x28
1005fd38:	f7ff f934 	bl	1005efa4 <LL_eadv_switchbackupdata_data_struc>
1005fd3c:	343c      	adds	r4, #60	@ 0x3c
1005fd3e:	4620      	mov	r0, r4
1005fd40:	f7ff f930 	bl	1005efa4 <LL_eadv_switchbackupdata_data_struc>
1005fd44:	2000      	movs	r0, #0
1005fd46:	7438      	strb	r0, [r7, #16]
1005fd48:	7cb8      	ldrb	r0, [r7, #18]
1005fd4a:	f000 fd5d 	bl	10060808 <LL_sched_engine>
1005fd4e:	7e38      	ldrb	r0, [r7, #24]
1005fd50:	0780      	lsls	r0, r0, #30
1005fd52:	d501      	bpl.n	1005fd58 <ADV_ISR_connect_request_received+0x6c>
1005fd54:	f7fc f870 	bl	1005be38 <llc_priv_stop_privacy_timer_ucfg_weak>
1005fd58:	b005      	add	sp, #20
1005fd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fd5c <__arm_cp.47_0>:
1005fd5c:	0000fffc 	.word	0x0000fffc

1005fd60 <ADV_ISR>:
1005fd60:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fd62:	b08d      	sub	sp, #52	@ 0x34
1005fd64:	4605      	mov	r5, r0
1005fd66:	f000 fc61 	bl	1006062c <LL_get_rx_common_buffer_p>
1005fd6a:	9006      	str	r0, [sp, #24]
1005fd6c:	4c87      	ldr	r4, [pc, #540]	@ (1005ff8c <__arm_cp.48_0>)
1005fd6e:	6820      	ldr	r0, [r4, #0]
1005fd70:	f7f3 ff7b 	bl	10053c6a <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1005fd74:	4606      	mov	r6, r0
1005fd76:	6820      	ldr	r0, [r4, #0]
1005fd78:	f7f3 ff8e 	bl	10053c98 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005fd7c:	4607      	mov	r7, r0
1005fd7e:	20d0      	movs	r0, #208	@ 0xd0
1005fd80:	5c28      	ldrb	r0, [r5, r0]
1005fd82:	212c      	movs	r1, #44	@ 0x2c
1005fd84:	4341      	muls	r1, r0
1005fd86:	4a82      	ldr	r2, [pc, #520]	@ (1005ff90 <__arm_cp.48_1>)
1005fd88:	6812      	ldr	r2, [r2, #0]
1005fd8a:	1851      	adds	r1, r2, r1
1005fd8c:	7d89      	ldrb	r1, [r1, #22]
1005fd8e:	2914      	cmp	r1, #20
1005fd90:	d103      	bne.n	1005fd9a <ADV_ISR+0x3a>
1005fd92:	210a      	movs	r1, #10
1005fd94:	2203      	movs	r2, #3
1005fd96:	f000 fefd 	bl	10060b94 <LL_sched_set_priority>
1005fd9a:	462c      	mov	r4, r5
1005fd9c:	34b4      	adds	r4, #180	@ 0xb4
1005fd9e:	4628      	mov	r0, r5
1005fda0:	30db      	adds	r0, #219	@ 0xdb
1005fda2:	9004      	str	r0, [sp, #16]
1005fda4:	2e00      	cmp	r6, #0
1005fda6:	d038      	beq.n	1005fe1a <ADV_ISR+0xba>
1005fda8:	9505      	str	r5, [sp, #20]
1005fdaa:	2700      	movs	r7, #0
1005fdac:	970c      	str	r7, [sp, #48]	@ 0x30
1005fdae:	970b      	str	r7, [sp, #44]	@ 0x2c
1005fdb0:	9d06      	ldr	r5, [sp, #24]
1005fdb2:	7828      	ldrb	r0, [r5, #0]
1005fdb4:	09c0      	lsrs	r0, r0, #7
1005fdb6:	a90b      	add	r1, sp, #44	@ 0x2c
1005fdb8:	7008      	strb	r0, [r1, #0]
1005fdba:	4876      	ldr	r0, [pc, #472]	@ (1005ff94 <__arm_cp.48_2>)
1005fdbc:	6800      	ldr	r0, [r0, #0]
1005fdbe:	22d8      	movs	r2, #216	@ 0xd8
1005fdc0:	5c80      	ldrb	r0, [r0, r2]
1005fdc2:	9003      	str	r0, [sp, #12]
1005fdc4:	1c48      	adds	r0, r1, #1
1005fdc6:	4629      	mov	r1, r5
1005fdc8:	3108      	adds	r1, #8
1005fdca:	2606      	movs	r6, #6
1005fdcc:	4632      	mov	r2, r6
1005fdce:	f7f2 fe3b 	bl	10052a48 <BLEPLAT_MemCpy>
1005fdd2:	970a      	str	r7, [sp, #40]	@ 0x28
1005fdd4:	9709      	str	r7, [sp, #36]	@ 0x24
1005fdd6:	7828      	ldrb	r0, [r5, #0]
1005fdd8:	0640      	lsls	r0, r0, #25
1005fdda:	0fc0      	lsrs	r0, r0, #31
1005fddc:	a909      	add	r1, sp, #36	@ 0x24
1005fdde:	7008      	strb	r0, [r1, #0]
1005fde0:	1c48      	adds	r0, r1, #1
1005fde2:	1ca9      	adds	r1, r5, #2
1005fde4:	4632      	mov	r2, r6
1005fde6:	f7f2 fe2f 	bl	10052a48 <BLEPLAT_MemCpy>
1005fdea:	7828      	ldrb	r0, [r5, #0]
1005fdec:	260f      	movs	r6, #15
1005fdee:	4006      	ands	r6, r0
1005fdf0:	2e05      	cmp	r6, #5
1005fdf2:	d101      	bne.n	1005fdf8 <ADV_ISR+0x98>
1005fdf4:	f7f2 ff34 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
1005fdf8:	7be3      	ldrb	r3, [r4, #15]
1005fdfa:	7922      	ldrb	r2, [r4, #4]
1005fdfc:	9702      	str	r7, [sp, #8]
1005fdfe:	ad07      	add	r5, sp, #28
1005fe00:	9501      	str	r5, [sp, #4]
1005fe02:	9805      	ldr	r0, [sp, #20]
1005fe04:	3084      	adds	r0, #132	@ 0x84
1005fe06:	9000      	str	r0, [sp, #0]
1005fe08:	a809      	add	r0, sp, #36	@ 0x24
1005fe0a:	4631      	mov	r1, r6
1005fe0c:	f006 faee 	bl	100663ec <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1005fe10:	0841      	lsrs	r1, r0, #1
1005fe12:	297e      	cmp	r1, #126	@ 0x7e
1005fe14:	d807      	bhi.n	1005fe26 <ADV_ISR+0xc6>
1005fe16:	4601      	mov	r1, r0
1005fe18:	e006      	b.n	1005fe28 <ADV_ISR+0xc8>
1005fe1a:	2601      	movs	r6, #1
1005fe1c:	2f00      	cmp	r7, #0
1005fe1e:	d154      	bne.n	1005feca <ADV_ISR+0x16a>
1005fe20:	2700      	movs	r7, #0
1005fe22:	8027      	strh	r7, [r4, #0]
1005fe24:	e056      	b.n	1005fed4 <ADV_ISR+0x174>
1005fe26:	2101      	movs	r1, #1
1005fe28:	7029      	strb	r1, [r5, #0]
1005fe2a:	9d05      	ldr	r5, [sp, #20]
1005fe2c:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005fe2e:	680a      	ldr	r2, [r1, #0]
1005fe30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005fe32:	429a      	cmp	r2, r3
1005fe34:	d12d      	bne.n	1005fe92 <ADV_ISR+0x132>
1005fe36:	6849      	ldr	r1, [r1, #4]
1005fe38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005fe3a:	4291      	cmp	r1, r2
1005fe3c:	d129      	bne.n	1005fe92 <ADV_ISR+0x132>
1005fe3e:	4607      	mov	r7, r0
1005fe40:	3fff      	subs	r7, #255	@ 0xff
1005fe42:	1e79      	subs	r1, r7, #1
1005fe44:	418f      	sbcs	r7, r1
1005fe46:	2e03      	cmp	r6, #3
1005fe48:	d123      	bne.n	1005fe92 <ADV_ISR+0x132>
1005fe4a:	28ff      	cmp	r0, #255	@ 0xff
1005fe4c:	d021      	beq.n	1005fe92 <ADV_ISR+0x132>
1005fe4e:	88a0      	ldrh	r0, [r4, #4]
1005fe50:	2701      	movs	r7, #1
1005fe52:	0780      	lsls	r0, r0, #30
1005fe54:	d51d      	bpl.n	1005fe92 <ADV_ISR+0x132>
1005fe56:	9803      	ldr	r0, [sp, #12]
1005fe58:	2801      	cmp	r0, #1
1005fe5a:	d11a      	bne.n	1005fe92 <ADV_ISR+0x132>
1005fe5c:	4628      	mov	r0, r5
1005fe5e:	f7f3 ff4b 	bl	10053cf8 <BLEPLAT_CNTR_PacketClrPllTrig>
1005fe62:	7e60      	ldrb	r0, [r4, #25]
1005fe64:	2801      	cmp	r0, #1
1005fe66:	d109      	bne.n	1005fe7c <ADV_ISR+0x11c>
1005fe68:	8960      	ldrh	r0, [r4, #10]
1005fe6a:	494b      	ldr	r1, [pc, #300]	@ (1005ff98 <__arm_cp.48_3>)
1005fe6c:	4288      	cmp	r0, r1
1005fe6e:	d005      	beq.n	1005fe7c <ADV_ISR+0x11c>
1005fe70:	aa07      	add	r2, sp, #28
1005fe72:	7811      	ldrb	r1, [r2, #0]
1005fe74:	b2c0      	uxtb	r0, r0
1005fe76:	1c52      	adds	r2, r2, #1
1005fe78:	f000 f892 	bl	1005ffa0 <hci_le_scan_request_received_event_push>
1005fe7c:	7f20      	ldrb	r0, [r4, #28]
1005fe7e:	f7f4 fb57 	bl	10054530 <BLEPLAT_CNTR_SmSetTxMode>
1005fe82:	2001      	movs	r0, #1
1005fe84:	9904      	ldr	r1, [sp, #16]
1005fe86:	7008      	strb	r0, [r1, #0]
1005fe88:	4628      	mov	r0, r5
1005fe8a:	f7ff fea1 	bl	1005fbd0 <ADV_createslot>
1005fe8e:	2600      	movs	r6, #0
1005fe90:	e020      	b.n	1005fed4 <ADV_ISR+0x174>
1005fe92:	88a0      	ldrh	r0, [r4, #4]
1005fe94:	07c0      	lsls	r0, r0, #31
1005fe96:	d01a      	beq.n	1005fece <ADV_ISR+0x16e>
1005fe98:	2e05      	cmp	r6, #5
1005fe9a:	d118      	bne.n	1005fece <ADV_ISR+0x16e>
1005fe9c:	9806      	ldr	r0, [sp, #24]
1005fe9e:	f7fa ffbf 	bl	1005ae20 <llc_conn_check_connect_request_params>
1005fea2:	2801      	cmp	r0, #1
1005fea4:	d113      	bne.n	1005fece <ADV_ISR+0x16e>
1005fea6:	9908      	ldr	r1, [sp, #32]
1005fea8:	9807      	ldr	r0, [sp, #28]
1005feaa:	f7fa fd91 	bl	1005a9d0 <llc_conn_list_search_address>
1005feae:	4241      	negs	r1, r0
1005feb0:	4141      	adcs	r1, r0
1005feb2:	4039      	ands	r1, r7
1005feb4:	2901      	cmp	r1, #1
1005feb6:	d10a      	bne.n	1005fece <ADV_ISR+0x16e>
1005feb8:	9803      	ldr	r0, [sp, #12]
1005feba:	2801      	cmp	r0, #1
1005febc:	d107      	bne.n	1005fece <ADV_ISR+0x16e>
1005febe:	aa07      	add	r2, sp, #28
1005fec0:	4628      	mov	r0, r5
1005fec2:	9906      	ldr	r1, [sp, #24]
1005fec4:	f7ef f9bc 	bl	1004f240 <ADV_ISR_connect_request_received_ucfg>
1005fec8:	2601      	movs	r6, #1
1005feca:	2700      	movs	r7, #0
1005fecc:	e002      	b.n	1005fed4 <ADV_ISR+0x174>
1005fece:	2700      	movs	r7, #0
1005fed0:	8027      	strh	r7, [r4, #0]
1005fed2:	2601      	movs	r6, #1
1005fed4:	8821      	ldrh	r1, [r4, #0]
1005fed6:	7fa0      	ldrb	r0, [r4, #30]
1005fed8:	2800      	cmp	r0, #0
1005feda:	d022      	beq.n	1005ff22 <ADV_ISR+0x1c2>
1005fedc:	2900      	cmp	r1, #0
1005fede:	d122      	bne.n	1005ff26 <ADV_ISR+0x1c6>
1005fee0:	1e40      	subs	r0, r0, #1
1005fee2:	77a0      	strb	r0, [r4, #30]
1005fee4:	88a0      	ldrh	r0, [r4, #4]
1005fee6:	2103      	movs	r1, #3
1005fee8:	4001      	ands	r1, r0
1005feea:	1e48      	subs	r0, r1, #1
1005feec:	4181      	sbcs	r1, r0
1005feee:	0048      	lsls	r0, r1, #1
1005fef0:	8020      	strh	r0, [r4, #0]
1005fef2:	4628      	mov	r0, r5
1005fef4:	f7ff fdd4 	bl	1005faa0 <UTIL_u8GetNextAdvChannel>
1005fef8:	4601      	mov	r1, r0
1005fefa:	7f20      	ldrb	r0, [r4, #28]
1005fefc:	f7f4 fa59 	bl	100543b2 <BLEPLAT_CNTR_SmSetRemapChan>
1005ff00:	7f20      	ldrb	r0, [r4, #28]
1005ff02:	f7f4 fb15 	bl	10054530 <BLEPLAT_CNTR_SmSetTxMode>
1005ff06:	4628      	mov	r0, r5
1005ff08:	f7f3 ffea 	bl	10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>
1005ff0c:	f7f2 fea8 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
1005ff10:	2000      	movs	r0, #0
1005ff12:	9904      	ldr	r1, [sp, #16]
1005ff14:	7008      	strb	r0, [r1, #0]
1005ff16:	4628      	mov	r0, r5
1005ff18:	f7ff fe5a 	bl	1005fbd0 <ADV_createslot>
1005ff1c:	f7f2 feb8 	bl	10052c90 <BLEPLAT_SetRadioCloseTimeout>
1005ff20:	e02a      	b.n	1005ff78 <ADV_ISR+0x218>
1005ff22:	2900      	cmp	r1, #0
1005ff24:	d019      	beq.n	1005ff5a <ADV_ISR+0x1fa>
1005ff26:	4819      	ldr	r0, [pc, #100]	@ (1005ff8c <__arm_cp.48_0>)
1005ff28:	6800      	ldr	r0, [r0, #0]
1005ff2a:	f7f3 feb5 	bl	10053c98 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005ff2e:	2800      	cmp	r0, #0
1005ff30:	d022      	beq.n	1005ff78 <ADV_ISR+0x218>
1005ff32:	4628      	mov	r0, r5
1005ff34:	f7f3 ffd4 	bl	10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>
1005ff38:	7c60      	ldrb	r0, [r4, #17]
1005ff3a:	2801      	cmp	r0, #1
1005ff3c:	d001      	beq.n	1005ff42 <ADV_ISR+0x1e2>
1005ff3e:	4917      	ldr	r1, [pc, #92]	@ (1005ff9c <__arm_cp.48_4>)
1005ff40:	e000      	b.n	1005ff44 <ADV_ISR+0x1e4>
1005ff42:	2146      	movs	r1, #70	@ 0x46
1005ff44:	3514      	adds	r5, #20
1005ff46:	4628      	mov	r0, r5
1005ff48:	f7f4 f82b 	bl	10053fa2 <BLEPLAT_CNTR_SetRcvLen>
1005ff4c:	8820      	ldrh	r0, [r4, #0]
1005ff4e:	1e40      	subs	r0, r0, #1
1005ff50:	8020      	strh	r0, [r4, #0]
1005ff52:	f7f3 fdf0 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
1005ff56:	2600      	movs	r6, #0
1005ff58:	e00e      	b.n	1005ff78 <ADV_ISR+0x218>
1005ff5a:	f7f2 fe81 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
1005ff5e:	4628      	mov	r0, r5
1005ff60:	f7f3 ffbe 	bl	10053ee0 <BLEPLAT_CNTR_PacketSetPllTrig>
1005ff64:	88e0      	ldrh	r0, [r4, #6]
1005ff66:	1e40      	subs	r0, r0, #1
1005ff68:	80e0      	strh	r0, [r4, #6]
1005ff6a:	2100      	movs	r1, #0
1005ff6c:	4628      	mov	r0, r5
1005ff6e:	f7ff fcb7 	bl	1005f8e0 <ADV_skiproutine>
1005ff72:	7f20      	ldrb	r0, [r4, #28]
1005ff74:	f000 fc48 	bl	10060808 <LL_sched_engine>
1005ff78:	2f00      	cmp	r7, #0
1005ff7a:	d002      	beq.n	1005ff82 <ADV_ISR+0x222>
1005ff7c:	8820      	ldrh	r0, [r4, #0]
1005ff7e:	1e40      	subs	r0, r0, #1
1005ff80:	8020      	strh	r0, [r4, #0]
1005ff82:	f7f5 faa9 	bl	100554d8 <log_notify_us_flush_ucfg_weak>
1005ff86:	4630      	mov	r0, r6
1005ff88:	b00d      	add	sp, #52	@ 0x34
1005ff8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ff8c <__arm_cp.48_0>:
1005ff8c:	20002464 	.word	0x20002464

1005ff90 <__arm_cp.48_1>:
1005ff90:	20002470 	.word	0x20002470

1005ff94 <__arm_cp.48_2>:
1005ff94:	20002468 	.word	0x20002468

1005ff98 <__arm_cp.48_3>:
1005ff98:	0000fffc 	.word	0x0000fffc

1005ff9c <__arm_cp.48_4>:
1005ff9c:	000002ee 	.word	0x000002ee

1005ffa0 <hci_le_scan_request_received_event_push>:
1005ffa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ffa2:	460e      	mov	r6, r1
1005ffa4:	4605      	mov	r5, r0
1005ffa6:	4815      	ldr	r0, [pc, #84]	@ (1005fffc <__arm_cp.49_0>)
1005ffa8:	6800      	ldr	r0, [r0, #0]
1005ffaa:	213d      	movs	r1, #61	@ 0x3d
1005ffac:	5c41      	ldrb	r1, [r0, r1]
1005ffae:	0689      	lsls	r1, r1, #26
1005ffb0:	d522      	bpl.n	1005fff8 <hci_le_scan_request_received_event_push+0x58>
1005ffb2:	303d      	adds	r0, #61	@ 0x3d
1005ffb4:	7ac0      	ldrb	r0, [r0, #11]
1005ffb6:	0740      	lsls	r0, r0, #29
1005ffb8:	d51e      	bpl.n	1005fff8 <hci_le_scan_request_received_event_push+0x58>
1005ffba:	4614      	mov	r4, r2
1005ffbc:	4810      	ldr	r0, [pc, #64]	@ (10060000 <__arm_cp.49_1>)
1005ffbe:	6800      	ldr	r0, [r0, #0]
1005ffc0:	6940      	ldr	r0, [r0, #20]
1005ffc2:	21a1      	movs	r1, #161	@ 0xa1
1005ffc4:	222b      	movs	r2, #43	@ 0x2b
1005ffc6:	2303      	movs	r3, #3
1005ffc8:	f7f5 fa8a 	bl	100554e0 <aci_event_fifo_push_header>
1005ffcc:	2800      	cmp	r0, #0
1005ffce:	d013      	beq.n	1005fff8 <hci_le_scan_request_received_event_push+0x58>
1005ffd0:	4607      	mov	r7, r0
1005ffd2:	7246      	strb	r6, [r0, #9]
1005ffd4:	7205      	strb	r5, [r0, #8]
1005ffd6:	300a      	adds	r0, #10
1005ffd8:	2206      	movs	r2, #6
1005ffda:	4621      	mov	r1, r4
1005ffdc:	f7f2 fd34 	bl	10052a48 <BLEPLAT_MemCpy>
1005ffe0:	2013      	movs	r0, #19
1005ffe2:	71f8      	strb	r0, [r7, #7]
1005ffe4:	2009      	movs	r0, #9
1005ffe6:	71b8      	strb	r0, [r7, #6]
1005ffe8:	203e      	movs	r0, #62	@ 0x3e
1005ffea:	7178      	strb	r0, [r7, #5]
1005ffec:	2004      	movs	r0, #4
1005ffee:	7138      	strb	r0, [r7, #4]
1005fff0:	20a1      	movs	r0, #161	@ 0xa1
1005fff2:	4639      	mov	r1, r7
1005fff4:	f7f5 fb11 	bl	1005561a <aci_event_fifo_push>
1005fff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005fffa:	46c0      	nop			@ (mov r8, r8)

1005fffc <__arm_cp.49_0>:
1005fffc:	20002468 	.word	0x20002468

10060000 <__arm_cp.49_1>:
10060000:	20002418 	.word	0x20002418

10060004 <EADV_start_request_radio_tasks>:
10060004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060006:	4604      	mov	r4, r0
10060008:	20d8      	movs	r0, #216	@ 0xd8
1006000a:	21ff      	movs	r1, #255	@ 0xff
1006000c:	5421      	strb	r1, [r4, r0]
1006000e:	20b8      	movs	r0, #184	@ 0xb8
10060010:	5a25      	ldrh	r5, [r4, r0]
10060012:	2701      	movs	r7, #1
10060014:	402f      	ands	r7, r5
10060016:	4626      	mov	r6, r4
10060018:	36d8      	adds	r6, #216	@ 0xd8
1006001a:	2f00      	cmp	r7, #0
1006001c:	d004      	beq.n	10060028 <EADV_start_request_radio_tasks+0x24>
1006001e:	f7fb fc0f 	bl	1005b840 <llc_conn_reserve_conn_idx>
10060022:	7030      	strb	r0, [r6, #0]
10060024:	28ff      	cmp	r0, #255	@ 0xff
10060026:	d022      	beq.n	1006006e <EADV_start_request_radio_tasks+0x6a>
10060028:	34b8      	adds	r4, #184	@ 0xb8
1006002a:	f000 fdf1 	bl	10060c10 <LL_sched_reserve_taskslot>
1006002e:	7620      	strb	r0, [r4, #24]
10060030:	28ff      	cmp	r0, #255	@ 0xff
10060032:	d013      	beq.n	1006005c <EADV_start_request_radio_tasks+0x58>
10060034:	2100      	movs	r1, #0
10060036:	06e8      	lsls	r0, r5, #27
10060038:	d41a      	bmi.n	10060070 <EADV_start_request_radio_tasks+0x6c>
1006003a:	460d      	mov	r5, r1
1006003c:	f000 fde8 	bl	10060c10 <LL_sched_reserve_taskslot>
10060040:	4629      	mov	r1, r5
10060042:	7660      	strb	r0, [r4, #25]
10060044:	28ff      	cmp	r0, #255	@ 0xff
10060046:	d113      	bne.n	10060070 <EADV_start_request_radio_tasks+0x6c>
10060048:	2f00      	cmp	r7, #0
1006004a:	d002      	beq.n	10060052 <EADV_start_request_radio_tasks+0x4e>
1006004c:	7830      	ldrb	r0, [r6, #0]
1006004e:	f7fb f822 	bl	1005b096 <llc_conn_release_conn_idx>
10060052:	7e20      	ldrb	r0, [r4, #24]
10060054:	f000 fdfe 	bl	10060c54 <LL_sched_release_taskslot>
10060058:	2107      	movs	r1, #7
1006005a:	e009      	b.n	10060070 <EADV_start_request_radio_tasks+0x6c>
1006005c:	2107      	movs	r1, #7
1006005e:	2f00      	cmp	r7, #0
10060060:	d006      	beq.n	10060070 <EADV_start_request_radio_tasks+0x6c>
10060062:	7830      	ldrb	r0, [r6, #0]
10060064:	460c      	mov	r4, r1
10060066:	f7fb f816 	bl	1005b096 <llc_conn_release_conn_idx>
1006006a:	4621      	mov	r1, r4
1006006c:	e000      	b.n	10060070 <EADV_start_request_radio_tasks+0x6c>
1006006e:	210c      	movs	r1, #12
10060070:	4608      	mov	r0, r1
10060072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10060074 <llc_get_channel_sel_algo2_enabled>:
10060074:	b580      	push	{r7, lr}
10060076:	f000 fae7 	bl	10060648 <llc_get_linkms_cntxt_p>
1006007a:	214e      	movs	r1, #78	@ 0x4e
1006007c:	5c40      	ldrb	r0, [r0, r1]
1006007e:	bd80      	pop	{r7, pc}

10060080 <LL_force_chsel_1>:
10060080:	b510      	push	{r4, lr}
10060082:	4244      	negs	r4, r0
10060084:	4144      	adcs	r4, r0
10060086:	f000 fadf 	bl	10060648 <llc_get_linkms_cntxt_p>
1006008a:	214e      	movs	r1, #78	@ 0x4e
1006008c:	5444      	strb	r4, [r0, r1]
1006008e:	2000      	movs	r0, #0
10060090:	bd10      	pop	{r4, pc}

10060092 <llc_eadv_max_supported_data_check_ucfg_weak>:
10060092:	2000      	movs	r0, #0
10060094:	4770      	bx	lr

10060096 <LL_eadv_start_extended_ucfg_weak>:
10060096:	4770      	bx	lr

10060098 <ext_adv_scan_enabled_ucfg_weak>:
10060098:	2000      	movs	r0, #0
1006009a:	4770      	bx	lr

1006009c <BLE_STACK_EndOfRadioActivityCb>:
1006009c:	4770      	bx	lr
	...

100600a0 <BLE_STACK_RadioHandler>:
100600a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100600a2:	b083      	sub	sp, #12
100600a4:	4604      	mov	r4, r0
100600a6:	484c      	ldr	r0, [pc, #304]	@ (100601d8 <__arm_cp.1_0>)
100600a8:	6004      	str	r4, [r0, #0]
100600aa:	4620      	mov	r0, r4
100600ac:	f7f3 fdb9 	bl	10053c22 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
100600b0:	4605      	mov	r5, r0
100600b2:	4620      	mov	r0, r4
100600b4:	f7f3 fd85 	bl	10053bc2 <BLEPLAT_CNTR_IntGetIntStatusDone>
100600b8:	4606      	mov	r6, r0
100600ba:	4668      	mov	r0, sp
100600bc:	f7f2 fdd9 	bl	10052c72 <BLEPLAT_GetAnchorPoint>
100600c0:	9900      	ldr	r1, [sp, #0]
100600c2:	1a09      	subs	r1, r1, r0
100600c4:	0b4b      	lsrs	r3, r1, #13
100600c6:	4945      	ldr	r1, [pc, #276]	@ (100601dc <__arm_cp.1_1>)
100600c8:	680a      	ldr	r2, [r1, #0]
100600ca:	4611      	mov	r1, r2
100600cc:	31d8      	adds	r1, #216	@ 0xd8
100600ce:	2b00      	cmp	r3, #0
100600d0:	d102      	bne.n	100600d8 <BLE_STACK_RadioHandler+0x38>
100600d2:	6010      	str	r0, [r2, #0]
100600d4:	2001      	movs	r0, #1
100600d6:	e000      	b.n	100600da <BLE_STACK_RadioHandler+0x3a>
100600d8:	2000      	movs	r0, #0
100600da:	7008      	strb	r0, [r1, #0]
100600dc:	4840      	ldr	r0, [pc, #256]	@ (100601e0 <__arm_cp.1_2>)
100600de:	6800      	ldr	r0, [r0, #0]
100600e0:	7b44      	ldrb	r4, [r0, #13]
100600e2:	2100      	movs	r1, #0
100600e4:	2cff      	cmp	r4, #255	@ 0xff
100600e6:	d00a      	beq.n	100600fe <BLE_STACK_RadioHandler+0x5e>
100600e8:	202c      	movs	r0, #44	@ 0x2c
100600ea:	4360      	muls	r0, r4
100600ec:	4a3d      	ldr	r2, [pc, #244]	@ (100601e4 <__arm_cp.1_3>)
100600ee:	6812      	ldr	r2, [r2, #0]
100600f0:	1810      	adds	r0, r2, r0
100600f2:	7c82      	ldrb	r2, [r0, #18]
100600f4:	2a00      	cmp	r2, #0
100600f6:	d002      	beq.n	100600fe <BLE_STACK_RadioHandler+0x5e>
100600f8:	6a41      	ldr	r1, [r0, #36]	@ 0x24
100600fa:	68c0      	ldr	r0, [r0, #12]
100600fc:	e7ff      	b.n	100600fe <BLE_STACK_RadioHandler+0x5e>
100600fe:	2701      	movs	r7, #1
10060100:	2e00      	cmp	r6, #0
10060102:	d003      	beq.n	1006010c <BLE_STACK_RadioHandler+0x6c>
10060104:	2d00      	cmp	r5, #0
10060106:	d101      	bne.n	1006010c <BLE_STACK_RadioHandler+0x6c>
10060108:	2900      	cmp	r1, #0
1006010a:	e011      	b.n	10060130 <BLE_STACK_RadioHandler+0x90>
1006010c:	2d00      	cmp	r5, #0
1006010e:	d015      	beq.n	1006013c <BLE_STACK_RadioHandler+0x9c>
10060110:	4a35      	ldr	r2, [pc, #212]	@ (100601e8 <__arm_cp.1_4>)
10060112:	1a8b      	subs	r3, r1, r2
10060114:	425a      	negs	r2, r3
10060116:	415a      	adcs	r2, r3
10060118:	4b34      	ldr	r3, [pc, #208]	@ (100601ec <__arm_cp.1_5>)
1006011a:	1acd      	subs	r5, r1, r3
1006011c:	426b      	negs	r3, r5
1006011e:	416b      	adcs	r3, r5
10060120:	4d33      	ldr	r5, [pc, #204]	@ (100601f0 <__arm_cp.1_6>)
10060122:	1b4e      	subs	r6, r1, r5
10060124:	4275      	negs	r5, r6
10060126:	4175      	adcs	r5, r6
10060128:	2900      	cmp	r1, #0
1006012a:	d007      	beq.n	1006013c <BLE_STACK_RadioHandler+0x9c>
1006012c:	4313      	orrs	r3, r2
1006012e:	431d      	orrs	r5, r3
10060130:	4e2a      	ldr	r6, [pc, #168]	@ (100601dc <__arm_cp.1_1>)
10060132:	4d29      	ldr	r5, [pc, #164]	@ (100601d8 <__arm_cp.1_0>)
10060134:	d004      	beq.n	10060140 <BLE_STACK_RadioHandler+0xa0>
10060136:	4788      	blx	r1
10060138:	2700      	movs	r7, #0
1006013a:	e001      	b.n	10060140 <BLE_STACK_RadioHandler+0xa0>
1006013c:	4e27      	ldr	r6, [pc, #156]	@ (100601dc <__arm_cp.1_1>)
1006013e:	4d26      	ldr	r5, [pc, #152]	@ (100601d8 <__arm_cp.1_0>)
10060140:	6828      	ldr	r0, [r5, #0]
10060142:	f7f3 fd62 	bl	10053c0a <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
10060146:	2800      	cmp	r0, #0
10060148:	d001      	beq.n	1006014e <BLE_STACK_RadioHandler+0xae>
1006014a:	2504      	movs	r5, #4
1006014c:	e020      	b.n	10060190 <BLE_STACK_RadioHandler+0xf0>
1006014e:	6828      	ldr	r0, [r5, #0]
10060150:	f7f3 fd16 	bl	10053b80 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
10060154:	2800      	cmp	r0, #0
10060156:	d001      	beq.n	1006015c <BLE_STACK_RadioHandler+0xbc>
10060158:	2501      	movs	r5, #1
1006015a:	e019      	b.n	10060190 <BLE_STACK_RadioHandler+0xf0>
1006015c:	6828      	ldr	r0, [r5, #0]
1006015e:	f7f3 fd1b 	bl	10053b98 <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
10060162:	2800      	cmp	r0, #0
10060164:	d001      	beq.n	1006016a <BLE_STACK_RadioHandler+0xca>
10060166:	2502      	movs	r5, #2
10060168:	e012      	b.n	10060190 <BLE_STACK_RadioHandler+0xf0>
1006016a:	6828      	ldr	r0, [r5, #0]
1006016c:	f7f3 fd65 	bl	10053c3a <BLEPLAT_CNTR_IntGetIntStatusTxError1>
10060170:	4629      	mov	r1, r5
10060172:	2505      	movs	r5, #5
10060174:	2800      	cmp	r0, #0
10060176:	d10b      	bne.n	10060190 <BLE_STACK_RadioHandler+0xf0>
10060178:	6808      	ldr	r0, [r1, #0]
1006017a:	f7f3 fd6a 	bl	10053c52 <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1006017e:	2800      	cmp	r0, #0
10060180:	d106      	bne.n	10060190 <BLE_STACK_RadioHandler+0xf0>
10060182:	4815      	ldr	r0, [pc, #84]	@ (100601d8 <__arm_cp.1_0>)
10060184:	6800      	ldr	r0, [r0, #0]
10060186:	f7f3 fced 	bl	10053b64 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1006018a:	2800      	cmp	r0, #0
1006018c:	d020      	beq.n	100601d0 <BLE_STACK_RadioHandler+0x130>
1006018e:	2500      	movs	r5, #0
10060190:	2001      	movs	r0, #1
10060192:	40a8      	lsls	r0, r5
10060194:	4917      	ldr	r1, [pc, #92]	@ (100601f4 <__arm_cp.1_7>)
10060196:	6809      	ldr	r1, [r1, #0]
10060198:	680a      	ldr	r2, [r1, #0]
1006019a:	4302      	orrs	r2, r0
1006019c:	600a      	str	r2, [r1, #0]
1006019e:	2000      	movs	r0, #0
100601a0:	f002 fce8 	bl	10062b74 <tsk_notify_idx>
100601a4:	f7f1 fe69 	bl	10051e7a <BLE_STACK_ProcessRequest>
100601a8:	f7f2 fd5a 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
100601ac:	4620      	mov	r0, r4
100601ae:	f000 fb2b 	bl	10060808 <LL_sched_engine>
100601b2:	6834      	ldr	r4, [r6, #0]
100601b4:	7d60      	ldrb	r0, [r4, #21]
100601b6:	2801      	cmp	r0, #1
100601b8:	d108      	bne.n	100601cc <BLE_STACK_RadioHandler+0x12c>
100601ba:	7c21      	ldrb	r1, [r4, #16]
100601bc:	200f      	movs	r0, #15
100601be:	4008      	ands	r0, r1
100601c0:	68e2      	ldr	r2, [r4, #12]
100601c2:	0909      	lsrs	r1, r1, #4
100601c4:	f7ff ff6a 	bl	1006009c <BLE_STACK_EndOfRadioActivityCb>
100601c8:	2000      	movs	r0, #0
100601ca:	7560      	strb	r0, [r4, #21]
100601cc:	b003      	add	sp, #12
100601ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100601d0:	2f00      	cmp	r7, #0
100601d2:	d1e9      	bne.n	100601a8 <BLE_STACK_RadioHandler+0x108>
100601d4:	e7ed      	b.n	100601b2 <BLE_STACK_RadioHandler+0x112>
100601d6:	46c0      	nop			@ (mov r8, r8)

100601d8 <__arm_cp.1_0>:
100601d8:	20002464 	.word	0x20002464

100601dc <__arm_cp.1_1>:
100601dc:	20002468 	.word	0x20002468

100601e0 <__arm_cp.1_2>:
100601e0:	2000246c 	.word	0x2000246c

100601e4 <__arm_cp.1_3>:
100601e4:	20002470 	.word	0x20002470

100601e8 <__arm_cp.1_4>:
100601e8:	10066509 	.word	0x10066509

100601ec <__arm_cp.1_5>:
100601ec:	10066505 	.word	0x10066505

100601f0 <__arm_cp.1_6>:
100601f0:	1006650d 	.word	0x1006650d

100601f4 <__arm_cp.1_7>:
100601f4:	20002418 	.word	0x20002418

100601f8 <LL_link_calculate_window_widening_from_ppm>:
100601f8:	22ff      	movs	r2, #255	@ 0xff
100601fa:	320e      	adds	r2, #14
100601fc:	4342      	muls	r2, r0
100601fe:	0a10      	lsrs	r0, r2, #8
10060200:	0889      	lsrs	r1, r1, #2
10060202:	4341      	muls	r1, r0
10060204:	0c88      	lsrs	r0, r1, #18
10060206:	1c40      	adds	r0, r0, #1
10060208:	4770      	bx	lr
	...

1006020c <LL_link_calc_packetlength>:
1006020c:	2804      	cmp	r0, #4
1006020e:	d005      	beq.n	1006021c <LL_link_calc_packetlength+0x10>
10060210:	2801      	cmp	r0, #1
10060212:	d106      	bne.n	10060222 <LL_link_calc_packetlength+0x16>
10060214:	20ff      	movs	r0, #255	@ 0xff
10060216:	30a4      	adds	r0, #164	@ 0xa4
10060218:	4a07      	ldr	r2, [pc, #28]	@ (10060238 <__arm_cp.7_2>)
1006021a:	e004      	b.n	10060226 <LL_link_calc_packetlength+0x1a>
1006021c:	4a04      	ldr	r2, [pc, #16]	@ (10060230 <__arm_cp.7_0>)
1006021e:	4805      	ldr	r0, [pc, #20]	@ (10060234 <__arm_cp.7_1>)
10060220:	e001      	b.n	10060226 <LL_link_calc_packetlength+0x1a>
10060222:	4a06      	ldr	r2, [pc, #24]	@ (1006023c <__arm_cp.7_3>)
10060224:	4806      	ldr	r0, [pc, #24]	@ (10060240 <__arm_cp.7_4>)
10060226:	4341      	muls	r1, r0
10060228:	1888      	adds	r0, r1, r2
1006022a:	0a00      	lsrs	r0, r0, #8
1006022c:	4770      	bx	lr
1006022e:	46c0      	nop			@ (mov r8, r8)

10060230 <__arm_cp.7_0>:
10060230:	000126e9 	.word	0x000126e9

10060234 <__arm_cp.7_1>:
10060234:	00001a38 	.word	0x00001a38

10060238 <__arm_cp.7_2>:
10060238:	00001206 	.word	0x00001206

1006023c <__arm_cp.7_3>:
1006023c:	000020c6 	.word	0x000020c6

10060240 <__arm_cp.7_4>:
10060240:	00000347 	.word	0x00000347

10060244 <LL_link_get_own_sca_ppm>:
10060244:	4801      	ldr	r0, [pc, #4]	@ (1006024c <__arm_cp.8_0>)
10060246:	6800      	ldr	r0, [r0, #0]
10060248:	8b00      	ldrh	r0, [r0, #24]
1006024a:	4770      	bx	lr

1006024c <__arm_cp.8_0>:
1006024c:	20002468 	.word	0x20002468

10060250 <LL_link_is_arg_in_range>:
10060250:	4290      	cmp	r0, r2
10060252:	d801      	bhi.n	10060258 <LL_link_is_arg_in_range+0x8>
10060254:	4288      	cmp	r0, r1
10060256:	d201      	bcs.n	1006025c <LL_link_is_arg_in_range+0xc>
10060258:	2012      	movs	r0, #18
1006025a:	4770      	bx	lr
1006025c:	2000      	movs	r0, #0
1006025e:	4770      	bx	lr

10060260 <Data_Len_Update_Offline_Processing_ucfg_weak>:
10060260:	2000      	movs	r0, #0
10060262:	4770      	bx	lr

10060264 <ll_write_supported_data_ucfg_weak>:
10060264:	2012      	movs	r0, #18
10060266:	4770      	bx	lr

10060268 <llc_timers_callback_wrapper>:
10060268:	b580      	push	{r7, lr}
1006026a:	6940      	ldr	r0, [r0, #20]
1006026c:	4901      	ldr	r1, [pc, #4]	@ (10060274 <__arm_cp.4_0>)
1006026e:	f002 fdb8 	bl	10062de2 <cst_sharedCallback>
10060272:	bd80      	pop	{r7, pc}

10060274 <__arm_cp.4_0>:
10060274:	10060279 	.word	0x10060279

10060278 <llc_timers_callback>:
10060278:	b580      	push	{r7, lr}
1006027a:	4903      	ldr	r1, [pc, #12]	@ (10060288 <__arm_cp.5_0>)
1006027c:	7ac9      	ldrb	r1, [r1, #11]
1006027e:	4281      	cmp	r1, r0
10060280:	d901      	bls.n	10060286 <llc_timers_callback+0xe>
10060282:	f7fd ff99 	bl	1005e1b8 <LLC_authenticated_payload_timeout_cb>
10060286:	bd80      	pop	{r7, pc}

10060288 <__arm_cp.5_0>:
10060288:	2000247c 	.word	0x2000247c

1006028c <LL_init_ucfg_weak>:
1006028c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006028e:	b091      	sub	sp, #68	@ 0x44
10060290:	9306      	str	r3, [sp, #24]
10060292:	4614      	mov	r4, r2
10060294:	910d      	str	r1, [sp, #52]	@ 0x34
10060296:	900b      	str	r0, [sp, #44]	@ 0x2c
10060298:	48b8      	ldr	r0, [pc, #736]	@ (1006057c <__arm_cp.6_0>)
1006029a:	7ac1      	ldrb	r1, [r0, #11]
1006029c:	910c      	str	r1, [sp, #48]	@ 0x30
1006029e:	7f01      	ldrb	r1, [r0, #28]
100602a0:	9109      	str	r1, [sp, #36]	@ 0x24
100602a2:	7ec1      	ldrb	r1, [r0, #27]
100602a4:	910a      	str	r1, [sp, #40]	@ 0x28
100602a6:	7e81      	ldrb	r1, [r0, #26]
100602a8:	9108      	str	r1, [sp, #32]
100602aa:	7fc7      	ldrb	r7, [r0, #31]
100602ac:	2501      	movs	r5, #1
100602ae:	21e8      	movs	r1, #232	@ 0xe8
100602b0:	4628      	mov	r0, r5
100602b2:	f000 fe89 	bl	10060fc8 <csmem_mem_0_assign>
100602b6:	4eb2      	ldr	r6, [pc, #712]	@ (10060580 <__arm_cp.6_1>)
100602b8:	6030      	str	r0, [r6, #0]
100602ba:	2158      	movs	r1, #88	@ 0x58
100602bc:	4628      	mov	r0, r5
100602be:	f000 fe83 	bl	10060fc8 <csmem_mem_0_assign>
100602c2:	6831      	ldr	r1, [r6, #0]
100602c4:	229c      	movs	r2, #156	@ 0x9c
100602c6:	9207      	str	r2, [sp, #28]
100602c8:	5088      	str	r0, [r1, r2]
100602ca:	4638      	mov	r0, r7
100602cc:	f006 f8b6 	bl	1006643c <llc_wl_mem_allocate>
100602d0:	2107      	movs	r1, #7
100602d2:	4039      	ands	r1, r7
100602d4:	9806      	ldr	r0, [sp, #24]
100602d6:	f006 f8c5 	bl	10066464 <llc_priv_mem_allocate>
100602da:	981c      	ldr	r0, [sp, #112]	@ 0x70
100602dc:	9000      	str	r0, [sp, #0]
100602de:	ab19      	add	r3, sp, #100	@ 0x64
100602e0:	cb0e      	ldmia	r3, {r1, r2, r3}
100602e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
100602e4:	9106      	str	r1, [sp, #24]
100602e6:	930d      	str	r3, [sp, #52]	@ 0x34
100602e8:	f7fa f958 	bl	1005a59c <llc_conn_mem_allocate>
100602ec:	2c01      	cmp	r4, #1
100602ee:	d000      	beq.n	100602f2 <LL_init_ucfg_weak+0x66>
100602f0:	9508      	str	r5, [sp, #32]
100602f2:	2000      	movs	r0, #0
100602f4:	2c01      	cmp	r4, #1
100602f6:	d000      	beq.n	100602fa <LL_init_ucfg_weak+0x6e>
100602f8:	900a      	str	r0, [sp, #40]	@ 0x28
100602fa:	2c01      	cmp	r4, #1
100602fc:	4fa0      	ldr	r7, [pc, #640]	@ (10060580 <__arm_cp.6_1>)
100602fe:	d000      	beq.n	10060302 <LL_init_ucfg_weak+0x76>
10060300:	9009      	str	r0, [sp, #36]	@ 0x24
10060302:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
10060304:	980d      	ldr	r0, [sp, #52]	@ 0x34
10060306:	2801      	cmp	r0, #1
10060308:	9205      	str	r2, [sp, #20]
1006030a:	d118      	bne.n	1006033e <LL_init_ucfg_weak+0xb2>
1006030c:	2029      	movs	r0, #41	@ 0x29
1006030e:	499b      	ldr	r1, [pc, #620]	@ (1006057c <__arm_cp.6_0>)
10060310:	5c08      	ldrb	r0, [r1, r0]
10060312:	1e41      	subs	r1, r0, #1
10060314:	4188      	sbcs	r0, r1
10060316:	4310      	orrs	r0, r2
10060318:	d001      	beq.n	1006031e <LL_init_ucfg_weak+0x92>
1006031a:	2530      	movs	r5, #48	@ 0x30
1006031c:	e000      	b.n	10060320 <LL_init_ucfg_weak+0x94>
1006031e:	2520      	movs	r5, #32
10060320:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
10060322:	4630      	mov	r0, r6
10060324:	4629      	mov	r1, r5
10060326:	f000 fe4f 	bl	10060fc8 <csmem_mem_0_assign>
1006032a:	6839      	ldr	r1, [r7, #0]
1006032c:	2294      	movs	r2, #148	@ 0x94
1006032e:	5088      	str	r0, [r1, r2]
10060330:	4630      	mov	r0, r6
10060332:	4629      	mov	r1, r5
10060334:	f000 fe48 	bl	10060fc8 <csmem_mem_0_assign>
10060338:	6839      	ldr	r1, [r7, #0]
1006033a:	2298      	movs	r2, #152	@ 0x98
1006033c:	5088      	str	r0, [r1, r2]
1006033e:	262c      	movs	r6, #44	@ 0x2c
10060340:	980c      	ldr	r0, [sp, #48]	@ 0x30
10060342:	4631      	mov	r1, r6
10060344:	f000 fe40 	bl	10060fc8 <csmem_mem_0_assign>
10060348:	6839      	ldr	r1, [r7, #0]
1006034a:	22a4      	movs	r2, #164	@ 0xa4
1006034c:	5088      	str	r0, [r1, r2]
1006034e:	2041      	movs	r0, #65	@ 0x41
10060350:	0082      	lsls	r2, r0, #2
10060352:	2c01      	cmp	r4, #1
10060354:	9402      	str	r4, [sp, #8]
10060356:	d10a      	bne.n	1006036e <LL_init_ucfg_weak+0xe2>
10060358:	4611      	mov	r1, r2
1006035a:	3120      	adds	r1, #32
1006035c:	2001      	movs	r0, #1
1006035e:	4614      	mov	r4, r2
10060360:	f000 fe32 	bl	10060fc8 <csmem_mem_0_assign>
10060364:	6839      	ldr	r1, [r7, #0]
10060366:	228c      	movs	r2, #140	@ 0x8c
10060368:	5088      	str	r0, [r1, r2]
1006036a:	4621      	mov	r1, r4
1006036c:	e038      	b.n	100603e0 <LL_init_ucfg_weak+0x154>
1006036e:	2125      	movs	r1, #37	@ 0x25
10060370:	4882      	ldr	r0, [pc, #520]	@ (1006057c <__arm_cp.6_0>)
10060372:	910c      	str	r1, [sp, #48]	@ 0x30
10060374:	5c41      	ldrb	r1, [r0, r1]
10060376:	4610      	mov	r0, r2
10060378:	3020      	adds	r0, #32
1006037a:	2900      	cmp	r1, #0
1006037c:	9201      	str	r2, [sp, #4]
1006037e:	d001      	beq.n	10060384 <LL_init_ucfg_weak+0xf8>
10060380:	4601      	mov	r1, r0
10060382:	e000      	b.n	10060386 <LL_init_ucfg_weak+0xfa>
10060384:	2144      	movs	r1, #68	@ 0x44
10060386:	2726      	movs	r7, #38	@ 0x26
10060388:	4a7c      	ldr	r2, [pc, #496]	@ (1006057c <__arm_cp.6_0>)
1006038a:	5dd2      	ldrb	r2, [r2, r7]
1006038c:	2a00      	cmp	r2, #0
1006038e:	d000      	beq.n	10060392 <LL_init_ucfg_weak+0x106>
10060390:	4601      	mov	r1, r0
10060392:	2529      	movs	r5, #41	@ 0x29
10060394:	4a79      	ldr	r2, [pc, #484]	@ (1006057c <__arm_cp.6_0>)
10060396:	5d52      	ldrb	r2, [r2, r5]
10060398:	2a00      	cmp	r2, #0
1006039a:	d000      	beq.n	1006039e <LL_init_ucfg_weak+0x112>
1006039c:	4601      	mov	r1, r0
1006039e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
100603a0:	2a01      	cmp	r2, #1
100603a2:	d100      	bne.n	100603a6 <LL_init_ucfg_weak+0x11a>
100603a4:	4601      	mov	r1, r0
100603a6:	2001      	movs	r0, #1
100603a8:	f000 fe0e 	bl	10060fc8 <csmem_mem_0_assign>
100603ac:	4974      	ldr	r1, [pc, #464]	@ (10060580 <__arm_cp.6_1>)
100603ae:	6809      	ldr	r1, [r1, #0]
100603b0:	228c      	movs	r2, #140	@ 0x8c
100603b2:	5088      	str	r0, [r1, r2]
100603b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100603b6:	2801      	cmp	r0, #1
100603b8:	9c01      	ldr	r4, [sp, #4]
100603ba:	4621      	mov	r1, r4
100603bc:	d010      	beq.n	100603e0 <LL_init_ucfg_weak+0x154>
100603be:	486f      	ldr	r0, [pc, #444]	@ (1006057c <__arm_cp.6_0>)
100603c0:	5d40      	ldrb	r0, [r0, r5]
100603c2:	2800      	cmp	r0, #0
100603c4:	4621      	mov	r1, r4
100603c6:	d10b      	bne.n	100603e0 <LL_init_ucfg_weak+0x154>
100603c8:	486c      	ldr	r0, [pc, #432]	@ (1006057c <__arm_cp.6_0>)
100603ca:	5dc0      	ldrb	r0, [r0, r7]
100603cc:	2800      	cmp	r0, #0
100603ce:	4621      	mov	r1, r4
100603d0:	d106      	bne.n	100603e0 <LL_init_ucfg_weak+0x154>
100603d2:	486a      	ldr	r0, [pc, #424]	@ (1006057c <__arm_cp.6_0>)
100603d4:	990c      	ldr	r1, [sp, #48]	@ 0x30
100603d6:	5c40      	ldrb	r0, [r0, r1]
100603d8:	2800      	cmp	r0, #0
100603da:	d000      	beq.n	100603de <LL_init_ucfg_weak+0x152>
100603dc:	4626      	mov	r6, r4
100603de:	4631      	mov	r1, r6
100603e0:	9818      	ldr	r0, [sp, #96]	@ 0x60
100603e2:	900b      	str	r0, [sp, #44]	@ 0x2c
100603e4:	9816      	ldr	r0, [sp, #88]	@ 0x58
100603e6:	9003      	str	r0, [sp, #12]
100603e8:	2601      	movs	r6, #1
100603ea:	4d66      	ldr	r5, [pc, #408]	@ (10060584 <__arm_cp.6_2>)
100603ec:	4630      	mov	r0, r6
100603ee:	47a8      	blx	r5
100603f0:	4f63      	ldr	r7, [pc, #396]	@ (10060580 <__arm_cp.6_1>)
100603f2:	6839      	ldr	r1, [r7, #0]
100603f4:	2290      	movs	r2, #144	@ 0x90
100603f6:	5088      	str	r0, [r1, r2]
100603f8:	2110      	movs	r1, #16
100603fa:	4630      	mov	r0, r6
100603fc:	47a8      	blx	r5
100603fe:	6839      	ldr	r1, [r7, #0]
10060400:	22a0      	movs	r2, #160	@ 0xa0
10060402:	9204      	str	r2, [sp, #16]
10060404:	5088      	str	r0, [r1, r2]
10060406:	2104      	movs	r1, #4
10060408:	4630      	mov	r0, r6
1006040a:	47a8      	blx	r5
1006040c:	6839      	ldr	r1, [r7, #0]
1006040e:	22a8      	movs	r2, #168	@ 0xa8
10060410:	5088      	str	r0, [r1, r2]
10060412:	2134      	movs	r1, #52	@ 0x34
10060414:	960c      	str	r6, [sp, #48]	@ 0x30
10060416:	4630      	mov	r0, r6
10060418:	47a8      	blx	r5
1006041a:	6839      	ldr	r1, [r7, #0]
1006041c:	22ac      	movs	r2, #172	@ 0xac
1006041e:	5088      	str	r0, [r1, r2]
10060420:	9808      	ldr	r0, [sp, #32]
10060422:	b2c7      	uxtb	r7, r0
10060424:	1f21      	subs	r1, r4, #4
10060426:	4638      	mov	r0, r7
10060428:	47a8      	blx	r5
1006042a:	4605      	mov	r5, r0
1006042c:	9c02      	ldr	r4, [sp, #8]
1006042e:	2c01      	cmp	r4, #1
10060430:	d105      	bne.n	1006043e <LL_init_ucfg_weak+0x1b2>
10060432:	215c      	movs	r1, #92	@ 0x5c
10060434:	4638      	mov	r0, r7
10060436:	f000 fdc7 	bl	10060fc8 <csmem_mem_0_assign>
1006043a:	4602      	mov	r2, r0
1006043c:	e000      	b.n	10060440 <LL_init_ucfg_weak+0x1b4>
1006043e:	2200      	movs	r2, #0
10060440:	4638      	mov	r0, r7
10060442:	4629      	mov	r1, r5
10060444:	f7fe fec6 	bl	1005f1d4 <EADV_init>
10060448:	ab10      	add	r3, sp, #64	@ 0x40
1006044a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1006044c:	70d8      	strb	r0, [r3, #3]
1006044e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10060450:	7098      	strb	r0, [r3, #2]
10060452:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10060454:	705e      	strb	r6, [r3, #1]
10060456:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10060458:	7018      	strb	r0, [r3, #0]
1006045a:	4620      	mov	r0, r4
1006045c:	9d05      	ldr	r5, [sp, #20]
1006045e:	4629      	mov	r1, r5
10060460:	463a      	mov	r2, r7
10060462:	f005 fffb 	bl	1006645c <llc_padv_mem_allocate_ucfg_weak>
10060466:	9f03      	ldr	r7, [sp, #12]
10060468:	4638      	mov	r0, r7
1006046a:	4621      	mov	r1, r4
1006046c:	f7fb fd1d 	bl	1005beaa <llc_scan_mem_allocate_ucfg_weak>
10060470:	4638      	mov	r0, r7
10060472:	4621      	mov	r1, r4
10060474:	462a      	mov	r2, r5
10060476:	f7fb fcf2 	bl	1005be5e <llc_pscan_mem_allocate_ucfg_weak>
1006047a:	4638      	mov	r0, r7
1006047c:	4621      	mov	r1, r4
1006047e:	462a      	mov	r2, r5
10060480:	4633      	mov	r3, r6
10060482:	f005 ffed 	bl	10066460 <llc_past_mem_allocate_ucfg_weak>
10060486:	9600      	str	r6, [sp, #0]
10060488:	463e      	mov	r6, r7
1006048a:	4638      	mov	r0, r7
1006048c:	4621      	mov	r1, r4
1006048e:	462a      	mov	r2, r5
10060490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10060492:	f7fb fce7 	bl	1005be64 <llc_pscan_wr_mem_allocate_ucfg_weak>
10060496:	f7fb fcc0 	bl	1005be1a <llc_iso_cmn_mem_alloc_ucfg_weak>
1006049a:	2c01      	cmp	r4, #1
1006049c:	d107      	bne.n	100604ae <LL_init_ucfg_weak+0x222>
1006049e:	2d01      	cmp	r5, #1
100604a0:	d105      	bne.n	100604ae <LL_init_ucfg_weak+0x222>
100604a2:	f005 f92b 	bl	100656fc <llc_big_brc_mem_alloc_ucfg_weak>
100604a6:	2e01      	cmp	r6, #1
100604a8:	d101      	bne.n	100604ae <LL_init_ucfg_weak+0x222>
100604aa:	f005 f928 	bl	100656fe <llc_big_sync_mem_alloc_ucfg_weak>
100604ae:	980d      	ldr	r0, [sp, #52]	@ 0x34
100604b0:	2801      	cmp	r0, #1
100604b2:	4f33      	ldr	r7, [pc, #204]	@ (10060580 <__arm_cp.6_1>)
100604b4:	d101      	bne.n	100604ba <LL_init_ucfg_weak+0x22e>
100604b6:	f005 f923 	bl	10065700 <llc_cig_cmn_mem_alloc_ucfg_weak>
100604ba:	f7fb fca7 	bl	1005be0c <llc_isoal_mem_alloc_ucfg_weak>
100604be:	9806      	ldr	r0, [sp, #24]
100604c0:	4631      	mov	r1, r6
100604c2:	4622      	mov	r2, r4
100604c4:	462b      	mov	r3, r5
100604c6:	f7fe fd46 	bl	1005ef56 <llc_cte_mem_allocate_ucfg_weak>
100604ca:	4e2c      	ldr	r6, [pc, #176]	@ (1006057c <__arm_cp.6_0>)
100604cc:	7af0      	ldrb	r0, [r6, #11]
100604ce:	1c41      	adds	r1, r0, #1
100604d0:	4d2d      	ldr	r5, [pc, #180]	@ (10060588 <__arm_cp.6_3>)
100604d2:	4628      	mov	r0, r5
100604d4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100604d6:	f000 fd65 	bl	10060fa4 <csmem_mem_assign>
100604da:	6839      	ldr	r1, [r7, #0]
100604dc:	22d0      	movs	r2, #208	@ 0xd0
100604de:	5088      	str	r0, [r1, r2]
100604e0:	7af1      	ldrb	r1, [r6, #11]
100604e2:	2202      	movs	r2, #2
100604e4:	4628      	mov	r0, r5
100604e6:	f000 fd5d 	bl	10060fa4 <csmem_mem_assign>
100604ea:	6839      	ldr	r1, [r7, #0]
100604ec:	460a      	mov	r2, r1
100604ee:	32a0      	adds	r2, #160	@ 0xa0
100604f0:	6350      	str	r0, [r2, #52]	@ 0x34
100604f2:	9804      	ldr	r0, [sp, #16]
100604f4:	5808      	ldr	r0, [r1, r0]
100604f6:	6078      	str	r0, [r7, #4]
100604f8:	6850      	ldr	r0, [r2, #4]
100604fa:	60b8      	str	r0, [r7, #8]
100604fc:	4620      	mov	r0, r4
100604fe:	f7fb fcd3 	bl	1005bea8 <llc_scan_init_ucfg_weak>
10060502:	f7fb fcab 	bl	1005be5c <llc_pscan_init_ucfg_weak>
10060506:	f000 f8e3 	bl	100606d0 <LL_sched_init>
1006050a:	f7fe fd29 	bl	1005ef60 <LL_dtm_init>
1006050e:	f005 ffa6 	bl	1006645e <llc_padv_init_ucfg_weak>
10060512:	f7fe fd1f 	bl	1005ef54 <llc_cte_init_ucfg_weak>
10060516:	f7f9 f8e5 	bl	100596e4 <HCI_Init>
1006051a:	f7f2 fb41 	bl	10052ba0 <BLEPLAT_GetDefaultPALevel>
1006051e:	6839      	ldr	r1, [r7, #0]
10060520:	2400      	movs	r4, #0
10060522:	728c      	strb	r4, [r1, #10]
10060524:	7248      	strb	r0, [r1, #9]
10060526:	4620      	mov	r0, r4
10060528:	f7f2 fb42 	bl	10052bb0 <BLEPLAT_SetHighPower>
1006052c:	f7f4 fcbe 	bl	10054eac <ble_HAL_Init>
10060530:	6838      	ldr	r0, [r7, #0]
10060532:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10060534:	f7fd ff03 	bl	1005e33e <LLC_pcl_hal_cntxt_init_ucfg_weak>
10060538:	6838      	ldr	r0, [r7, #0]
1006053a:	9d07      	ldr	r5, [sp, #28]
1006053c:	5940      	ldr	r0, [r0, r5]
1006053e:	300c      	adds	r0, #12
10060540:	f002 fe2b 	bl	1006319a <addr8_list_clear>
10060544:	463e      	mov	r6, r7
10060546:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
10060548:	4638      	mov	r0, r7
1006054a:	f7fb fc6d 	bl	1005be28 <llc_priv_init_ucfg_weak>
1006054e:	6830      	ldr	r0, [r6, #0]
10060550:	5941      	ldr	r1, [r0, r5]
10060552:	2240      	movs	r2, #64	@ 0x40
10060554:	548c      	strb	r4, [r1, r2]
10060556:	4a09      	ldr	r2, [pc, #36]	@ (1006057c <__arm_cp.6_0>)
10060558:	8b12      	ldrh	r2, [r2, #24]
1006055a:	8302      	strh	r2, [r0, #24]
1006055c:	201f      	movs	r0, #31
1006055e:	900f      	str	r0, [sp, #60]	@ 0x3c
10060560:	43e0      	mvns	r0, r4
10060562:	900e      	str	r0, [sp, #56]	@ 0x38
10060564:	3148      	adds	r1, #72	@ 0x48
10060566:	a80e      	add	r0, sp, #56	@ 0x38
10060568:	2205      	movs	r2, #5
1006056a:	f002 fc8b 	bl	10062e84 <char_copy>
1006056e:	6830      	ldr	r0, [r6, #0]
10060570:	5940      	ldr	r0, [r0, r5]
10060572:	02f9      	lsls	r1, r7, #11
10060574:	2254      	movs	r2, #84	@ 0x54
10060576:	5281      	strh	r1, [r0, r2]
10060578:	b011      	add	sp, #68	@ 0x44
1006057a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006057c <__arm_cp.6_0>:
1006057c:	2000247c 	.word	0x2000247c

10060580 <__arm_cp.6_1>:
10060580:	20002468 	.word	0x20002468

10060584 <__arm_cp.6_2>:
10060584:	10060fc9 	.word	0x10060fc9

10060588 <__arm_cp.6_3>:
10060588:	20002478 	.word	0x20002478

1006058c <LL_init>:
1006058c:	b5b0      	push	{r4, r5, r7, lr}
1006058e:	b088      	sub	sp, #32
10060590:	9c12      	ldr	r4, [sp, #72]	@ 0x48
10060592:	9406      	str	r4, [sp, #24]
10060594:	9c11      	ldr	r4, [sp, #68]	@ 0x44
10060596:	9405      	str	r4, [sp, #20]
10060598:	9d10      	ldr	r5, [sp, #64]	@ 0x40
1006059a:	9504      	str	r5, [sp, #16]
1006059c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1006059e:	9503      	str	r5, [sp, #12]
100605a0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
100605a2:	9502      	str	r5, [sp, #8]
100605a4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100605a6:	9501      	str	r5, [sp, #4]
100605a8:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100605aa:	9500      	str	r5, [sp, #0]
100605ac:	f7ff fe6e 	bl	1006028c <LL_init_ucfg_weak>
100605b0:	2c01      	cmp	r4, #1
100605b2:	d112      	bne.n	100605da <LL_init+0x4e>
100605b4:	f7fb fc54 	bl	1005be60 <llc_pscan_wr_init_ucfg_weak>
100605b8:	f7f9 ff00 	bl	1005a3bc <llc_conn_init>
100605bc:	f7ee fddb 	bl	1004f176 <LL_cpe_init_ucfg>
100605c0:	4807      	ldr	r0, [pc, #28]	@ (100605e0 <__arm_cp.7_0>)
100605c2:	7ac1      	ldrb	r1, [r0, #11]
100605c4:	4807      	ldr	r0, [pc, #28]	@ (100605e4 <__arm_cp.7_1>)
100605c6:	6800      	ldr	r0, [r0, #0]
100605c8:	30b0      	adds	r0, #176	@ 0xb0
100605ca:	4a07      	ldr	r2, [pc, #28]	@ (100605e8 <__arm_cp.7_2>)
100605cc:	2305      	movs	r3, #5
100605ce:	f002 fb2f 	bl	10062c30 <CST_init>
100605d2:	f7f4 fcd9 	bl	10054f88 <Acl_Init>
100605d6:	f7fc fd58 	bl	1005d08a <LLC_chc_ll_cntxt_init_ucfg_weak>
100605da:	b008      	add	sp, #32
100605dc:	bdb0      	pop	{r4, r5, r7, pc}
100605de:	46c0      	nop			@ (mov r8, r8)

100605e0 <__arm_cp.7_0>:
100605e0:	2000247c 	.word	0x2000247c

100605e4 <__arm_cp.7_1>:
100605e4:	20002468 	.word	0x20002468

100605e8 <__arm_cp.7_2>:
100605e8:	10060269 	.word	0x10060269

100605ec <Is_Address_Initialized>:
100605ec:	2100      	movs	r1, #0
100605ee:	460a      	mov	r2, r1
100605f0:	2906      	cmp	r1, #6
100605f2:	d005      	beq.n	10060600 <Is_Address_Initialized+0x14>
100605f4:	5c43      	ldrb	r3, [r0, r1]
100605f6:	2b00      	cmp	r3, #0
100605f8:	d000      	beq.n	100605fc <Is_Address_Initialized+0x10>
100605fa:	2201      	movs	r2, #1
100605fc:	1c49      	adds	r1, r1, #1
100605fe:	e7f7      	b.n	100605f0 <Is_Address_Initialized+0x4>
10060600:	b2d0      	uxtb	r0, r2
10060602:	4770      	bx	lr

10060604 <get_rf_rx_path_compensation_db>:
10060604:	4804      	ldr	r0, [pc, #16]	@ (10060618 <__arm_cp.10_0>)
10060606:	6800      	ldr	r0, [r0, #0]
10060608:	215e      	movs	r1, #94	@ 0x5e
1006060a:	5e40      	ldrsh	r0, [r0, r1]
1006060c:	210d      	movs	r1, #13
1006060e:	4341      	muls	r1, r0
10060610:	3140      	adds	r1, #64	@ 0x40
10060612:	11c8      	asrs	r0, r1, #7
10060614:	4770      	bx	lr
10060616:	46c0      	nop			@ (mov r8, r8)

10060618 <__arm_cp.10_0>:
10060618:	20002468 	.word	0x20002468

1006061c <LL_get_tx_common_buffer_p>:
1006061c:	4802      	ldr	r0, [pc, #8]	@ (10060628 <__arm_cp.11_0>)
1006061e:	6800      	ldr	r0, [r0, #0]
10060620:	218c      	movs	r1, #140	@ 0x8c
10060622:	5840      	ldr	r0, [r0, r1]
10060624:	4770      	bx	lr
10060626:	46c0      	nop			@ (mov r8, r8)

10060628 <__arm_cp.11_0>:
10060628:	20002468 	.word	0x20002468

1006062c <LL_get_rx_common_buffer_p>:
1006062c:	4802      	ldr	r0, [pc, #8]	@ (10060638 <__arm_cp.12_0>)
1006062e:	6800      	ldr	r0, [r0, #0]
10060630:	2190      	movs	r1, #144	@ 0x90
10060632:	5840      	ldr	r0, [r0, r1]
10060634:	4770      	bx	lr
10060636:	46c0      	nop			@ (mov r8, r8)

10060638 <__arm_cp.12_0>:
10060638:	20002468 	.word	0x20002468

1006063c <LL_get_control_pdu_size>:
1006063c:	2800      	cmp	r0, #0
1006063e:	d001      	beq.n	10060644 <LL_get_control_pdu_size+0x8>
10060640:	2030      	movs	r0, #48	@ 0x30
10060642:	4770      	bx	lr
10060644:	2020      	movs	r0, #32
10060646:	4770      	bx	lr

10060648 <llc_get_linkms_cntxt_p>:
10060648:	4802      	ldr	r0, [pc, #8]	@ (10060654 <__arm_cp.15_0>)
1006064a:	6800      	ldr	r0, [r0, #0]
1006064c:	219c      	movs	r1, #156	@ 0x9c
1006064e:	5840      	ldr	r0, [r0, r1]
10060650:	4770      	bx	lr
10060652:	46c0      	nop			@ (mov r8, r8)

10060654 <__arm_cp.15_0>:
10060654:	20002468 	.word	0x20002468

10060658 <llc_get_next_free_conn_handle>:
10060658:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006065a:	4815      	ldr	r0, [pc, #84]	@ (100606b0 <__arm_cp.16_0>)
1006065c:	6800      	ldr	r0, [r0, #0]
1006065e:	219c      	movs	r1, #156	@ 0x9c
10060660:	9102      	str	r1, [sp, #8]
10060662:	5841      	ldr	r1, [r0, r1]
10060664:	2054      	movs	r0, #84	@ 0x54
10060666:	9001      	str	r0, [sp, #4]
10060668:	5a08      	ldrh	r0, [r1, r0]
1006066a:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
1006066c:	4c12      	ldr	r4, [pc, #72]	@ (100606b8 <__arm_cp.16_2>)
1006066e:	1c45      	adds	r5, r0, #1
10060670:	b2a9      	uxth	r1, r5
10060672:	0a09      	lsrs	r1, r1, #8
10060674:	290e      	cmp	r1, #14
10060676:	d901      	bls.n	1006067c <llc_get_next_free_conn_handle+0x24>
10060678:	490e      	ldr	r1, [pc, #56]	@ (100606b4 <__arm_cp.16_1>)
1006067a:	1845      	adds	r5, r0, r1
1006067c:	2f00      	cmp	r7, #0
1006067e:	d00f      	beq.n	100606a0 <llc_get_next_free_conn_handle+0x48>
10060680:	2600      	movs	r6, #0
10060682:	6820      	ldr	r0, [r4, #0]
10060684:	2134      	movs	r1, #52	@ 0x34
10060686:	5c41      	ldrb	r1, [r0, r1]
10060688:	b2f0      	uxtb	r0, r6
1006068a:	4288      	cmp	r0, r1
1006068c:	d208      	bcs.n	100606a0 <llc_get_next_free_conn_handle+0x48>
1006068e:	f7f9 fe4d 	bl	1005a32c <llc_conn_get_cntxt_per_p>
10060692:	1c76      	adds	r6, r6, #1
10060694:	b2a9      	uxth	r1, r5
10060696:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
10060698:	4281      	cmp	r1, r0
1006069a:	d1f2      	bne.n	10060682 <llc_get_next_free_conn_handle+0x2a>
1006069c:	4628      	mov	r0, r5
1006069e:	e7e6      	b.n	1006066e <llc_get_next_free_conn_handle+0x16>
100606a0:	4803      	ldr	r0, [pc, #12]	@ (100606b0 <__arm_cp.16_0>)
100606a2:	6800      	ldr	r0, [r0, #0]
100606a4:	9902      	ldr	r1, [sp, #8]
100606a6:	5840      	ldr	r0, [r0, r1]
100606a8:	9901      	ldr	r1, [sp, #4]
100606aa:	5245      	strh	r5, [r0, r1]
100606ac:	b2a8      	uxth	r0, r5
100606ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100606b0 <__arm_cp.16_0>:
100606b0:	20002468 	.word	0x20002468

100606b4 <__arm_cp.16_1>:
100606b4:	fffff102 	.word	0xfffff102

100606b8 <__arm_cp.16_2>:
100606b8:	20002414 	.word	0x20002414

100606bc <LL_sched_time_t1_ge_t2>:
100606bc:	43c0      	mvns	r0, r0
100606be:	1840      	adds	r0, r0, r1
100606c0:	0fc0      	lsrs	r0, r0, #31
100606c2:	4770      	bx	lr

100606c4 <LL_sched_engine_return_actual_scheduler_margin>:
100606c4:	4801      	ldr	r0, [pc, #4]	@ (100606cc <__arm_cp.2_0>)
100606c6:	6800      	ldr	r0, [r0, #0]
100606c8:	6880      	ldr	r0, [r0, #8]
100606ca:	4770      	bx	lr

100606cc <__arm_cp.2_0>:
100606cc:	2000246c 	.word	0x2000246c

100606d0 <LL_sched_init>:
100606d0:	4809      	ldr	r0, [pc, #36]	@ (100606f8 <__arm_cp.4_0>)
100606d2:	7ac0      	ldrb	r0, [r0, #11]
100606d4:	4909      	ldr	r1, [pc, #36]	@ (100606fc <__arm_cp.4_1>)
100606d6:	6809      	ldr	r1, [r1, #0]
100606d8:	3112      	adds	r1, #18
100606da:	2800      	cmp	r0, #0
100606dc:	d004      	beq.n	100606e8 <LL_sched_init+0x18>
100606de:	2200      	movs	r2, #0
100606e0:	800a      	strh	r2, [r1, #0]
100606e2:	312c      	adds	r1, #44	@ 0x2c
100606e4:	1e40      	subs	r0, r0, #1
100606e6:	e7f8      	b.n	100606da <LL_sched_init+0xa>
100606e8:	4805      	ldr	r0, [pc, #20]	@ (10060700 <__arm_cp.4_2>)
100606ea:	6800      	ldr	r0, [r0, #0]
100606ec:	2100      	movs	r1, #0
100606ee:	73c1      	strb	r1, [r0, #15]
100606f0:	21ff      	movs	r1, #255	@ 0xff
100606f2:	0209      	lsls	r1, r1, #8
100606f4:	8181      	strh	r1, [r0, #12]
100606f6:	4770      	bx	lr

100606f8 <__arm_cp.4_0>:
100606f8:	2000247c 	.word	0x2000247c

100606fc <__arm_cp.4_1>:
100606fc:	20002470 	.word	0x20002470

10060700 <__arm_cp.4_2>:
10060700:	2000246c 	.word	0x2000246c

10060704 <LL_sched_set_anchor>:
10060704:	222c      	movs	r2, #44	@ 0x2c
10060706:	4342      	muls	r2, r0
10060708:	4801      	ldr	r0, [pc, #4]	@ (10060710 <__arm_cp.5_0>)
1006070a:	6800      	ldr	r0, [r0, #0]
1006070c:	5081      	str	r1, [r0, r2]
1006070e:	4770      	bx	lr

10060710 <__arm_cp.5_0>:
10060710:	20002470 	.word	0x20002470

10060714 <LL_sched_set_taskslot_length_anchor>:
10060714:	232c      	movs	r3, #44	@ 0x2c
10060716:	4343      	muls	r3, r0
10060718:	4802      	ldr	r0, [pc, #8]	@ (10060724 <__arm_cp.6_0>)
1006071a:	6800      	ldr	r0, [r0, #0]
1006071c:	50c2      	str	r2, [r0, r3]
1006071e:	18c0      	adds	r0, r0, r3
10060720:	6041      	str	r1, [r0, #4]
10060722:	4770      	bx	lr

10060724 <__arm_cp.6_0>:
10060724:	20002470 	.word	0x20002470

10060728 <LL_sched_set_cancel_request>:
10060728:	28ff      	cmp	r0, #255	@ 0xff
1006072a:	d00b      	beq.n	10060744 <LL_sched_set_cancel_request+0x1c>
1006072c:	212c      	movs	r1, #44	@ 0x2c
1006072e:	4341      	muls	r1, r0
10060730:	4805      	ldr	r0, [pc, #20]	@ (10060748 <__arm_cp.9_0>)
10060732:	6800      	ldr	r0, [r0, #0]
10060734:	1840      	adds	r0, r0, r1
10060736:	7c81      	ldrb	r1, [r0, #18]
10060738:	2908      	cmp	r1, #8
1006073a:	d001      	beq.n	10060740 <LL_sched_set_cancel_request+0x18>
1006073c:	2110      	movs	r1, #16
1006073e:	e000      	b.n	10060742 <LL_sched_set_cancel_request+0x1a>
10060740:	2120      	movs	r1, #32
10060742:	7481      	strb	r1, [r0, #18]
10060744:	4770      	bx	lr
10060746:	46c0      	nop			@ (mov r8, r8)

10060748 <__arm_cp.9_0>:
10060748:	20002470 	.word	0x20002470

1006074c <LL_sched_enable_taskslot>:
1006074c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006074e:	b088      	sub	sp, #32
10060750:	9307      	str	r3, [sp, #28]
10060752:	272c      	movs	r7, #44	@ 0x2c
10060754:	4347      	muls	r7, r0
10060756:	481a      	ldr	r0, [pc, #104]	@ (100607c0 <__arm_cp.10_0>)
10060758:	6806      	ldr	r6, [r0, #0]
1006075a:	19f0      	adds	r0, r6, r7
1006075c:	7c84      	ldrb	r4, [r0, #18]
1006075e:	2c01      	cmp	r4, #1
10060760:	d12b      	bne.n	100607ba <LL_sched_enable_taskslot+0x6e>
10060762:	4603      	mov	r3, r0
10060764:	3312      	adds	r3, #18
10060766:	9d14      	ldr	r5, [sp, #80]	@ 0x50
10060768:	9506      	str	r5, [sp, #24]
1006076a:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
1006076c:	9505      	str	r5, [sp, #20]
1006076e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
10060770:	9503      	str	r5, [sp, #12]
10060772:	9d11      	ldr	r5, [sp, #68]	@ 0x44
10060774:	9502      	str	r5, [sp, #8]
10060776:	9104      	str	r1, [sp, #16]
10060778:	9910      	ldr	r1, [sp, #64]	@ 0x40
1006077a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1006077c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1006077e:	9400      	str	r4, [sp, #0]
10060780:	9201      	str	r2, [sp, #4]
10060782:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10060784:	9c07      	ldr	r4, [sp, #28]
10060786:	6044      	str	r4, [r0, #4]
10060788:	6082      	str	r2, [r0, #8]
1006078a:	9a00      	ldr	r2, [sp, #0]
1006078c:	51f2      	str	r2, [r6, r7]
1006078e:	221f      	movs	r2, #31
10060790:	4015      	ands	r5, r2
10060792:	7545      	strb	r5, [r0, #21]
10060794:	4011      	ands	r1, r2
10060796:	7581      	strb	r1, [r0, #22]
10060798:	2101      	movs	r1, #1
1006079a:	7501      	strb	r1, [r0, #20]
1006079c:	9a01      	ldr	r2, [sp, #4]
1006079e:	74c2      	strb	r2, [r0, #19]
100607a0:	8201      	strh	r1, [r0, #16]
100607a2:	9902      	ldr	r1, [sp, #8]
100607a4:	61c1      	str	r1, [r0, #28]
100607a6:	9903      	ldr	r1, [sp, #12]
100607a8:	6201      	str	r1, [r0, #32]
100607aa:	9905      	ldr	r1, [sp, #20]
100607ac:	6241      	str	r1, [r0, #36]	@ 0x24
100607ae:	9906      	ldr	r1, [sp, #24]
100607b0:	6281      	str	r1, [r0, #40]	@ 0x28
100607b2:	9904      	ldr	r1, [sp, #16]
100607b4:	60c1      	str	r1, [r0, #12]
100607b6:	2002      	movs	r0, #2
100607b8:	7018      	strb	r0, [r3, #0]
100607ba:	b008      	add	sp, #32
100607bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100607be:	46c0      	nop			@ (mov r8, r8)

100607c0 <__arm_cp.10_0>:
100607c0:	20002470 	.word	0x20002470

100607c4 <LL_sched_is_scheduler_call_pending>:
100607c4:	b580      	push	{r7, lr}
100607c6:	490a      	ldr	r1, [pc, #40]	@ (100607f0 <__arm_cp.11_0>)
100607c8:	6809      	ldr	r1, [r1, #0]
100607ca:	7b0a      	ldrb	r2, [r1, #12]
100607cc:	2a01      	cmp	r2, #1
100607ce:	d106      	bne.n	100607de <LL_sched_is_scheduler_call_pending+0x1a>
100607d0:	7bca      	ldrb	r2, [r1, #15]
100607d2:	2a03      	cmp	r2, #3
100607d4:	d105      	bne.n	100607e2 <LL_sched_is_scheduler_call_pending+0x1e>
100607d6:	2000      	movs	r0, #0
100607d8:	f7fb fb92 	bl	1005bf00 <llc_scan_stop_ucfg_weak>
100607dc:	bd80      	pop	{r7, pc}
100607de:	2000      	movs	r0, #0
100607e0:	bd80      	pop	{r7, pc}
100607e2:	6809      	ldr	r1, [r1, #0]
100607e4:	1a08      	subs	r0, r1, r0
100607e6:	4903      	ldr	r1, [pc, #12]	@ (100607f4 <__arm_cp.11_1>)
100607e8:	1840      	adds	r0, r0, r1
100607ea:	0fc0      	lsrs	r0, r0, #31
100607ec:	bd80      	pop	{r7, pc}
100607ee:	46c0      	nop			@ (mov r8, r8)

100607f0 <__arm_cp.11_0>:
100607f0:	2000246c 	.word	0x2000246c

100607f4 <__arm_cp.11_1>:
100607f4:	fffffe0b 	.word	0xfffffe0b

100607f8 <LL_sched_anchorstretch>:
100607f8:	4902      	ldr	r1, [pc, #8]	@ (10060804 <__arm_cp.12_0>)
100607fa:	6809      	ldr	r1, [r1, #0]
100607fc:	684a      	ldr	r2, [r1, #4]
100607fe:	6002      	str	r2, [r0, #0]
10060800:	7b88      	ldrb	r0, [r1, #14]
10060802:	4770      	bx	lr

10060804 <__arm_cp.12_0>:
10060804:	2000246c 	.word	0x2000246c

10060808 <LL_sched_engine>:
10060808:	b5f0      	push	{r4, r5, r6, r7, lr}
1006080a:	b0b3      	sub	sp, #204	@ 0xcc
1006080c:	4607      	mov	r7, r0
1006080e:	48dc      	ldr	r0, [pc, #880]	@ (10060b80 <__arm_cp.13_0>)
10060810:	6800      	ldr	r0, [r0, #0]
10060812:	900b      	str	r0, [sp, #44]	@ 0x2c
10060814:	2001      	movs	r0, #1
10060816:	9001      	str	r0, [sp, #4]
10060818:	9009      	str	r0, [sp, #36]	@ 0x24
1006081a:	2100      	movs	r1, #0
1006081c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006081e:	7381      	strb	r1, [r0, #14]
10060820:	48d8      	ldr	r0, [pc, #864]	@ (10060b84 <__arm_cp.13_1>)
10060822:	6803      	ldr	r3, [r0, #0]
10060824:	910a      	str	r1, [sp, #40]	@ 0x28
10060826:	7219      	strb	r1, [r3, #8]
10060828:	20ff      	movs	r0, #255	@ 0xff
1006082a:	9008      	str	r0, [sp, #32]
1006082c:	3002      	adds	r0, #2
1006082e:	8298      	strh	r0, [r3, #20]
10060830:	7c18      	ldrb	r0, [r3, #16]
10060832:	21f0      	movs	r1, #240	@ 0xf0
10060834:	4001      	ands	r1, r0
10060836:	090a      	lsrs	r2, r1, #4
10060838:	1888      	adds	r0, r1, r2
1006083a:	7418      	strb	r0, [r3, #16]
1006083c:	8a59      	ldrh	r1, [r3, #18]
1006083e:	40d1      	lsrs	r1, r2
10060840:	07c9      	lsls	r1, r1, #31
10060842:	49d1      	ldr	r1, [pc, #836]	@ (10060b88 <__arm_cp.13_2>)
10060844:	6809      	ldr	r1, [r1, #0]
10060846:	9107      	str	r1, [sp, #28]
10060848:	9305      	str	r3, [sp, #20]
1006084a:	d006      	beq.n	1006085a <LL_sched_engine+0x52>
1006084c:	2000      	movs	r0, #0
1006084e:	f002 f991 	bl	10062b74 <tsk_notify_idx>
10060852:	f7f1 fb12 	bl	10051e7a <BLE_STACK_ProcessRequest>
10060856:	9b05      	ldr	r3, [sp, #20]
10060858:	7c18      	ldrb	r0, [r3, #16]
1006085a:	210f      	movs	r1, #15
1006085c:	9102      	str	r1, [sp, #8]
1006085e:	4008      	ands	r0, r1
10060860:	7418      	strb	r0, [r3, #16]
10060862:	2196      	movs	r1, #150	@ 0x96
10060864:	9809      	ldr	r0, [sp, #36]	@ 0x24
10060866:	4341      	muls	r1, r0
10060868:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006086a:	9112      	str	r1, [sp, #72]	@ 0x48
1006086c:	6081      	str	r1, [r0, #8]
1006086e:	2001      	movs	r0, #1
10060870:	9004      	str	r0, [sp, #16]
10060872:	43c0      	mvns	r0, r0
10060874:	b279      	sxtb	r1, r7
10060876:	4281      	cmp	r1, r0
10060878:	dc10      	bgt.n	1006089c <LL_sched_engine+0x94>
1006087a:	207f      	movs	r0, #127	@ 0x7f
1006087c:	4007      	ands	r7, r0
1006087e:	252c      	movs	r5, #44	@ 0x2c
10060880:	437d      	muls	r5, r7
10060882:	9c07      	ldr	r4, [sp, #28]
10060884:	1960      	adds	r0, r4, r5
10060886:	900a      	str	r0, [sp, #40]	@ 0x28
10060888:	5966      	ldr	r6, [r4, r5]
1006088a:	f7f2 f9a8 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
1006088e:	1a30      	subs	r0, r6, r0
10060890:	49be      	ldr	r1, [pc, #760]	@ (10060b8c <__arm_cp.13_3>)
10060892:	1840      	adds	r0, r0, r1
10060894:	d500      	bpl.n	10060898 <LL_sched_engine+0x90>
10060896:	e0ef      	b.n	10060a78 <LL_sched_engine+0x270>
10060898:	4638      	mov	r0, r7
1006089a:	e004      	b.n	100608a6 <LL_sched_engine+0x9e>
1006089c:	b2f8      	uxtb	r0, r7
1006089e:	28ff      	cmp	r0, #255	@ 0xff
100608a0:	d00e      	beq.n	100608c0 <LL_sched_engine+0xb8>
100608a2:	2100      	movs	r1, #0
100608a4:	910a      	str	r1, [sp, #40]	@ 0x28
100608a6:	212c      	movs	r1, #44	@ 0x2c
100608a8:	4341      	muls	r1, r0
100608aa:	9807      	ldr	r0, [sp, #28]
100608ac:	1840      	adds	r0, r0, r1
100608ae:	2101      	movs	r1, #1
100608b0:	7501      	strb	r1, [r0, #20]
100608b2:	7c81      	ldrb	r1, [r0, #18]
100608b4:	2908      	cmp	r1, #8
100608b6:	d102      	bne.n	100608be <LL_sched_engine+0xb6>
100608b8:	3012      	adds	r0, #18
100608ba:	2104      	movs	r1, #4
100608bc:	7001      	strb	r1, [r0, #0]
100608be:	9708      	str	r7, [sp, #32]
100608c0:	f7f2 f98d 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
100608c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
100608c6:	180c      	adds	r4, r1, r0
100608c8:	48af      	ldr	r0, [pc, #700]	@ (10060b88 <__arm_cp.13_2>)
100608ca:	6807      	ldr	r7, [r0, #0]
100608cc:	3728      	adds	r7, #40	@ 0x28
100608ce:	2500      	movs	r5, #0
100608d0:	4628      	mov	r0, r5
100608d2:	49af      	ldr	r1, [pc, #700]	@ (10060b90 <__arm_cp.13_4>)
100608d4:	7aca      	ldrb	r2, [r1, #11]
100608d6:	4295      	cmp	r5, r2
100608d8:	d23a      	bcs.n	10060950 <LL_sched_engine+0x148>
100608da:	463e      	mov	r6, r7
100608dc:	3e16      	subs	r6, #22
100608de:	7831      	ldrb	r1, [r6, #0]
100608e0:	070a      	lsls	r2, r1, #28
100608e2:	0f52      	lsrs	r2, r2, #29
100608e4:	d01e      	beq.n	10060924 <LL_sched_engine+0x11c>
100608e6:	2104      	movs	r1, #4
100608e8:	7031      	strb	r1, [r6, #0]
100608ea:	4639      	mov	r1, r7
100608ec:	3928      	subs	r1, #40	@ 0x28
100608ee:	6809      	ldr	r1, [r1, #0]
100608f0:	43ca      	mvns	r2, r1
100608f2:	18a2      	adds	r2, r4, r2
100608f4:	d429      	bmi.n	1006094a <LL_sched_engine+0x142>
100608f6:	1a61      	subs	r1, r4, r1
100608f8:	4638      	mov	r0, r7
100608fa:	381c      	subs	r0, #28
100608fc:	6800      	ldr	r0, [r0, #0]
100608fe:	463a      	mov	r2, r7
10060900:	3a0c      	subs	r2, #12
10060902:	6812      	ldr	r2, [r2, #0]
10060904:	4790      	blx	r2
10060906:	4639      	mov	r1, r7
10060908:	3918      	subs	r1, #24
1006090a:	880a      	ldrh	r2, [r1, #0]
1006090c:	1812      	adds	r2, r2, r0
1006090e:	800a      	strh	r2, [r1, #0]
10060910:	4639      	mov	r1, r7
10060912:	3914      	subs	r1, #20
10060914:	780a      	ldrb	r2, [r1, #0]
10060916:	1880      	adds	r0, r0, r2
10060918:	287f      	cmp	r0, #127	@ 0x7f
1006091a:	d300      	bcc.n	1006091e <LL_sched_engine+0x116>
1006091c:	207f      	movs	r0, #127	@ 0x7f
1006091e:	7008      	strb	r0, [r1, #0]
10060920:	7831      	ldrb	r1, [r6, #0]
10060922:	2001      	movs	r0, #1
10060924:	0689      	lsls	r1, r1, #26
10060926:	0f89      	lsrs	r1, r1, #30
10060928:	d00f      	beq.n	1006094a <LL_sched_engine+0x142>
1006092a:	6839      	ldr	r1, [r7, #0]
1006092c:	2900      	cmp	r1, #0
1006092e:	d006      	beq.n	1006093e <LL_sched_engine+0x136>
10060930:	4638      	mov	r0, r7
10060932:	381c      	subs	r0, #28
10060934:	6800      	ldr	r0, [r0, #0]
10060936:	4788      	blx	r1
10060938:	7830      	ldrb	r0, [r6, #0]
1006093a:	2801      	cmp	r0, #1
1006093c:	d004      	beq.n	10060948 <LL_sched_engine+0x140>
1006093e:	2000      	movs	r0, #0
10060940:	7030      	strb	r0, [r6, #0]
10060942:	4639      	mov	r1, r7
10060944:	3915      	subs	r1, #21
10060946:	7008      	strb	r0, [r1, #0]
10060948:	2001      	movs	r0, #1
1006094a:	372c      	adds	r7, #44	@ 0x2c
1006094c:	1c6d      	adds	r5, r5, #1
1006094e:	e7c0      	b.n	100608d2 <LL_sched_engine+0xca>
10060950:	2800      	cmp	r0, #0
10060952:	d1b5      	bne.n	100608c0 <LL_sched_engine+0xb8>
10060954:	488c      	ldr	r0, [pc, #560]	@ (10060b88 <__arm_cp.13_2>)
10060956:	6800      	ldr	r0, [r0, #0]
10060958:	4603      	mov	r3, r0
1006095a:	3312      	adds	r3, #18
1006095c:	2400      	movs	r4, #0
1006095e:	4621      	mov	r1, r4
10060960:	42a2      	cmp	r2, r4
10060962:	d009      	beq.n	10060978 <LL_sched_engine+0x170>
10060964:	781d      	ldrb	r5, [r3, #0]
10060966:	2d04      	cmp	r5, #4
10060968:	d103      	bne.n	10060972 <LL_sched_engine+0x16a>
1006096a:	b2cd      	uxtb	r5, r1
1006096c:	ae13      	add	r6, sp, #76	@ 0x4c
1006096e:	5574      	strb	r4, [r6, r5]
10060970:	1c49      	adds	r1, r1, #1
10060972:	332c      	adds	r3, #44	@ 0x2c
10060974:	1c64      	adds	r4, r4, #1
10060976:	e7f3      	b.n	10060960 <LL_sched_engine+0x158>
10060978:	060a      	lsls	r2, r1, #24
1006097a:	d074      	beq.n	10060a66 <LL_sched_engine+0x25e>
1006097c:	b2ca      	uxtb	r2, r1
1006097e:	920e      	str	r2, [sp, #56]	@ 0x38
10060980:	2200      	movs	r2, #0
10060982:	9206      	str	r2, [sp, #24]
10060984:	460c      	mov	r4, r1
10060986:	9203      	str	r2, [sp, #12]
10060988:	4616      	mov	r6, r2
1006098a:	910d      	str	r1, [sp, #52]	@ 0x34
1006098c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1006098e:	4296      	cmp	r6, r2
10060990:	d06e      	beq.n	10060a70 <LL_sched_engine+0x268>
10060992:	9612      	str	r6, [sp, #72]	@ 0x48
10060994:	9410      	str	r4, [sp, #64]	@ 0x40
10060996:	b2e3      	uxtb	r3, r4
10060998:	2700      	movs	r7, #0
1006099a:	462c      	mov	r4, r5
1006099c:	463e      	mov	r6, r7
1006099e:	42bb      	cmp	r3, r7
100609a0:	d00d      	beq.n	100609be <LL_sched_engine+0x1b6>
100609a2:	aa13      	add	r2, sp, #76	@ 0x4c
100609a4:	5dd2      	ldrb	r2, [r2, r7]
100609a6:	252c      	movs	r5, #44	@ 0x2c
100609a8:	4355      	muls	r5, r2
100609aa:	5945      	ldr	r5, [r0, r5]
100609ac:	2f00      	cmp	r7, #0
100609ae:	d002      	beq.n	100609b6 <LL_sched_engine+0x1ae>
100609b0:	43f2      	mvns	r2, r6
100609b2:	18aa      	adds	r2, r5, r2
100609b4:	d501      	bpl.n	100609ba <LL_sched_engine+0x1b2>
100609b6:	463c      	mov	r4, r7
100609b8:	462e      	mov	r6, r5
100609ba:	1c7f      	adds	r7, r7, #1
100609bc:	e7ef      	b.n	1006099e <LL_sched_engine+0x196>
100609be:	9d12      	ldr	r5, [sp, #72]	@ 0x48
100609c0:	1b4a      	subs	r2, r1, r5
100609c2:	b2d2      	uxtb	r2, r2
100609c4:	1e51      	subs	r1, r2, #1
100609c6:	aa13      	add	r2, sp, #76	@ 0x4c
100609c8:	5c53      	ldrb	r3, [r2, r1]
100609ca:	b2e4      	uxtb	r4, r4
100609cc:	5d17      	ldrb	r7, [r2, r4]
100609ce:	5457      	strb	r7, [r2, r1]
100609d0:	5513      	strb	r3, [r2, r4]
100609d2:	910f      	str	r1, [sp, #60]	@ 0x3c
100609d4:	b2cb      	uxtb	r3, r1
100609d6:	5cd3      	ldrb	r3, [r2, r3]
100609d8:	2d00      	cmp	r5, #0
100609da:	d02e      	beq.n	10060a3a <LL_sched_engine+0x232>
100609dc:	461d      	mov	r5, r3
100609de:	9911      	ldr	r1, [sp, #68]	@ 0x44
100609e0:	b2ca      	uxtb	r2, r1
100609e2:	ac13      	add	r4, sp, #76	@ 0x4c
100609e4:	5ca4      	ldrb	r4, [r4, r2]
100609e6:	272c      	movs	r7, #44	@ 0x2c
100609e8:	437c      	muls	r4, r7
100609ea:	5902      	ldr	r2, [r0, r4]
100609ec:	1b91      	subs	r1, r2, r6
100609ee:	1904      	adds	r4, r0, r4
100609f0:	6863      	ldr	r3, [r4, #4]
100609f2:	18c9      	adds	r1, r1, r3
100609f4:	3195      	adds	r1, #149	@ 0x95
100609f6:	d44a      	bmi.n	10060a8e <LL_sched_engine+0x286>
100609f8:	43d1      	mvns	r1, r2
100609fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100609fc:	1851      	adds	r1, r2, r1
100609fe:	d449      	bmi.n	10060a94 <LL_sched_engine+0x28c>
10060a00:	436f      	muls	r7, r5
10060a02:	19c1      	adds	r1, r0, r7
10060a04:	7d8a      	ldrb	r2, [r1, #22]
10060a06:	7d0b      	ldrb	r3, [r1, #20]
10060a08:	4093      	lsls	r3, r2
10060a0a:	7d49      	ldrb	r1, [r1, #21]
10060a0c:	2601      	movs	r6, #1
10060a0e:	4632      	mov	r2, r6
10060a10:	408a      	lsls	r2, r1
10060a12:	429a      	cmp	r2, r3
10060a14:	d800      	bhi.n	10060a18 <LL_sched_engine+0x210>
10060a16:	4613      	mov	r3, r2
10060a18:	7da1      	ldrb	r1, [r4, #22]
10060a1a:	7d27      	ldrb	r7, [r4, #20]
10060a1c:	408f      	lsls	r7, r1
10060a1e:	7d61      	ldrb	r1, [r4, #21]
10060a20:	408e      	lsls	r6, r1
10060a22:	42be      	cmp	r6, r7
10060a24:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060a26:	d800      	bhi.n	10060a2a <LL_sched_engine+0x222>
10060a28:	4637      	mov	r7, r6
10060a2a:	429f      	cmp	r7, r3
10060a2c:	462b      	mov	r3, r5
10060a2e:	990d      	ldr	r1, [sp, #52]	@ 0x34
10060a30:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10060a32:	d300      	bcc.n	10060a36 <LL_sched_engine+0x22e>
10060a34:	9b11      	ldr	r3, [sp, #68]	@ 0x44
10060a36:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10060a38:	e011      	b.n	10060a5e <LL_sched_engine+0x256>
10060a3a:	990d      	ldr	r1, [sp, #52]	@ 0x34
10060a3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10060a3e:	2a01      	cmp	r2, #1
10060a40:	d101      	bne.n	10060a46 <LL_sched_engine+0x23e>
10060a42:	2202      	movs	r2, #2
10060a44:	9206      	str	r2, [sp, #24]
10060a46:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10060a48:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10060a4a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060a4c:	222c      	movs	r2, #44	@ 0x2c
10060a4e:	435a      	muls	r2, r3
10060a50:	5883      	ldr	r3, [r0, r2]
10060a52:	1882      	adds	r2, r0, r2
10060a54:	6852      	ldr	r2, [r2, #4]
10060a56:	189a      	adds	r2, r3, r2
10060a58:	3296      	adds	r2, #150	@ 0x96
10060a5a:	920c      	str	r2, [sp, #48]	@ 0x30
10060a5c:	462b      	mov	r3, r5
10060a5e:	1e64      	subs	r4, r4, #1
10060a60:	1c76      	adds	r6, r6, #1
10060a62:	9311      	str	r3, [sp, #68]	@ 0x44
10060a64:	e792      	b.n	1006098c <LL_sched_engine+0x184>
10060a66:	2000      	movs	r0, #0
10060a68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10060a6a:	6048      	str	r0, [r1, #4]
10060a6c:	7388      	strb	r0, [r1, #14]
10060a6e:	e02d      	b.n	10060acc <LL_sched_engine+0x2c4>
10060a70:	9a03      	ldr	r2, [sp, #12]
10060a72:	4616      	mov	r6, r2
10060a74:	9b06      	ldr	r3, [sp, #24]
10060a76:	e013      	b.n	10060aa0 <LL_sched_engine+0x298>
10060a78:	1960      	adds	r0, r4, r5
10060a7a:	7c80      	ldrb	r0, [r0, #18]
10060a7c:	2810      	cmp	r0, #16
10060a7e:	d100      	bne.n	10060a82 <LL_sched_engine+0x27a>
10060a80:	e70a      	b.n	10060898 <LL_sched_engine+0x90>
10060a82:	2820      	cmp	r0, #32
10060a84:	d100      	bne.n	10060a88 <LL_sched_engine+0x280>
10060a86:	e707      	b.n	10060898 <LL_sched_engine+0x90>
10060a88:	2400      	movs	r4, #0
10060a8a:	463d      	mov	r5, r7
10060a8c:	e021      	b.n	10060ad2 <LL_sched_engine+0x2ca>
10060a8e:	3e96      	subs	r6, #150	@ 0x96
10060a90:	9b04      	ldr	r3, [sp, #16]
10060a92:	e004      	b.n	10060a9e <LL_sched_engine+0x296>
10060a94:	980d      	ldr	r0, [sp, #52]	@ 0x34
10060a96:	1e40      	subs	r0, r0, #1
10060a98:	9011      	str	r0, [sp, #68]	@ 0x44
10060a9a:	2600      	movs	r6, #0
10060a9c:	4633      	mov	r3, r6
10060a9e:	9a03      	ldr	r2, [sp, #12]
10060aa0:	9811      	ldr	r0, [sp, #68]	@ 0x44
10060aa2:	b2c0      	uxtb	r0, r0
10060aa4:	a913      	add	r1, sp, #76	@ 0x4c
10060aa6:	5c0d      	ldrb	r5, [r1, r0]
10060aa8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10060aaa:	6042      	str	r2, [r0, #4]
10060aac:	7383      	strb	r3, [r0, #14]
10060aae:	2dff      	cmp	r5, #255	@ 0xff
10060ab0:	d00c      	beq.n	10060acc <LL_sched_engine+0x2c4>
10060ab2:	202c      	movs	r0, #44	@ 0x2c
10060ab4:	4368      	muls	r0, r5
10060ab6:	9907      	ldr	r1, [sp, #28]
10060ab8:	1809      	adds	r1, r1, r0
10060aba:	b2d8      	uxtb	r0, r3
10060abc:	2801      	cmp	r0, #1
10060abe:	910a      	str	r1, [sp, #40]	@ 0x28
10060ac0:	d105      	bne.n	10060ace <LL_sched_engine+0x2c6>
10060ac2:	6808      	ldr	r0, [r1, #0]
10060ac4:	1a30      	subs	r0, r6, r0
10060ac6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10060ac8:	6048      	str	r0, [r1, #4]
10060aca:	e000      	b.n	10060ace <LL_sched_engine+0x2c6>
10060acc:	25ff      	movs	r5, #255	@ 0xff
10060ace:	9c01      	ldr	r4, [sp, #4]
10060ad0:	9f08      	ldr	r7, [sp, #32]
10060ad2:	f7f3 f821 	bl	10053b18 <BLEPLAT_CNTR_ClearSemareq>
10060ad6:	482a      	ldr	r0, [pc, #168]	@ (10060b80 <__arm_cp.13_0>)
10060ad8:	6800      	ldr	r0, [r0, #0]
10060ada:	2dff      	cmp	r5, #255	@ 0xff
10060adc:	d02f      	beq.n	10060b3e <LL_sched_engine+0x336>
10060ade:	9711      	str	r7, [sp, #68]	@ 0x44
10060ae0:	9412      	str	r4, [sp, #72]	@ 0x48
10060ae2:	4604      	mov	r4, r0
10060ae4:	2008      	movs	r0, #8
10060ae6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
10060ae8:	74b8      	strb	r0, [r7, #18]
10060aea:	f7fe fa36 	bl	1005ef5a <llc_cte_timer_stop_ucfg_weak>
10060aee:	7365      	strb	r5, [r4, #13]
10060af0:	6a3a      	ldr	r2, [r7, #32]
10060af2:	68f8      	ldr	r0, [r7, #12]
10060af4:	6879      	ldr	r1, [r7, #4]
10060af6:	4790      	blx	r2
10060af8:	683e      	ldr	r6, [r7, #0]
10060afa:	940b      	str	r4, [sp, #44]	@ 0x2c
10060afc:	6026      	str	r6, [r4, #0]
10060afe:	4628      	mov	r0, r5
10060b00:	f7f3 f820 	bl	10053b44 <BLEPLAT_CNTR_GlobWriteSlot>
10060b04:	f7f3 f817 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
10060b08:	9812      	ldr	r0, [sp, #72]	@ 0x48
10060b0a:	2800      	cmp	r0, #0
10060b0c:	d023      	beq.n	10060b56 <LL_sched_engine+0x34e>
10060b0e:	7cf8      	ldrb	r0, [r7, #19]
10060b10:	09c1      	lsrs	r1, r0, #7
10060b12:	2201      	movs	r2, #1
10060b14:	4630      	mov	r0, r6
10060b16:	f7f2 f889 	bl	10052c2c <BLEPLAT_SetRadioTimerValue>
10060b1a:	2800      	cmp	r0, #0
10060b1c:	d01d      	beq.n	10060b5a <LL_sched_engine+0x352>
10060b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
10060b20:	0040      	lsls	r0, r0, #1
10060b22:	9009      	str	r0, [sp, #36]	@ 0x24
10060b24:	2810      	cmp	r0, #16
10060b26:	9f11      	ldr	r7, [sp, #68]	@ 0x44
10060b28:	d200      	bcs.n	10060b2c <LL_sched_engine+0x324>
10060b2a:	e676      	b.n	1006081a <LL_sched_engine+0x12>
10060b2c:	f7fe fa14 	bl	1005ef58 <llc_cte_timer_error_ucfg_weak>
10060b30:	20a1      	movs	r0, #161	@ 0xa1
10060b32:	2106      	movs	r1, #6
10060b34:	2200      	movs	r2, #0
10060b36:	4613      	mov	r3, r2
10060b38:	f003 fc12 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
10060b3c:	e009      	b.n	10060b52 <LL_sched_engine+0x34a>
10060b3e:	4604      	mov	r4, r0
10060b40:	f7f2 f88e 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
10060b44:	f7f2 fff0 	bl	10053b28 <BLEPLAT_CNTR_GlobDisableBlue>
10060b48:	2000      	movs	r0, #0
10060b4a:	73e0      	strb	r0, [r4, #15]
10060b4c:	20ff      	movs	r0, #255	@ 0xff
10060b4e:	0200      	lsls	r0, r0, #8
10060b50:	81a0      	strh	r0, [r4, #12]
10060b52:	9904      	ldr	r1, [sp, #16]
10060b54:	e00f      	b.n	10060b76 <LL_sched_engine+0x36e>
10060b56:	f7f2 f89b 	bl	10052c90 <BLEPLAT_SetRadioCloseTimeout>
10060b5a:	9b04      	ldr	r3, [sp, #16]
10060b5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10060b5e:	730b      	strb	r3, [r1, #12]
10060b60:	7cf8      	ldrb	r0, [r7, #19]
10060b62:	73c8      	strb	r0, [r1, #15]
10060b64:	9a05      	ldr	r2, [sp, #20]
10060b66:	60d6      	str	r6, [r2, #12]
10060b68:	7c11      	ldrb	r1, [r2, #16]
10060b6a:	9c02      	ldr	r4, [sp, #8]
10060b6c:	4021      	ands	r1, r4
10060b6e:	0100      	lsls	r0, r0, #4
10060b70:	1808      	adds	r0, r1, r0
10060b72:	4619      	mov	r1, r3
10060b74:	7410      	strb	r0, [r2, #16]
10060b76:	4803      	ldr	r0, [pc, #12]	@ (10060b84 <__arm_cp.13_1>)
10060b78:	6800      	ldr	r0, [r0, #0]
10060b7a:	7201      	strb	r1, [r0, #8]
10060b7c:	b033      	add	sp, #204	@ 0xcc
10060b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060b80 <__arm_cp.13_0>:
10060b80:	2000246c 	.word	0x2000246c

10060b84 <__arm_cp.13_1>:
10060b84:	20002468 	.word	0x20002468

10060b88 <__arm_cp.13_2>:
10060b88:	20002470 	.word	0x20002470

10060b8c <__arm_cp.13_3>:
10060b8c:	fffffed4 	.word	0xfffffed4

10060b90 <__arm_cp.13_4>:
10060b90:	2000247c 	.word	0x2000247c

10060b94 <LL_sched_set_priority>:
10060b94:	b510      	push	{r4, lr}
10060b96:	231f      	movs	r3, #31
10060b98:	401a      	ands	r2, r3
10060b9a:	242c      	movs	r4, #44	@ 0x2c
10060b9c:	4344      	muls	r4, r0
10060b9e:	4803      	ldr	r0, [pc, #12]	@ (10060bac <__arm_cp.14_0>)
10060ba0:	6800      	ldr	r0, [r0, #0]
10060ba2:	1900      	adds	r0, r0, r4
10060ba4:	7582      	strb	r2, [r0, #22]
10060ba6:	4019      	ands	r1, r3
10060ba8:	7541      	strb	r1, [r0, #21]
10060baa:	bd10      	pop	{r4, pc}

10060bac <__arm_cp.14_0>:
10060bac:	20002470 	.word	0x20002470

10060bb0 <LL_sched_set_params>:
10060bb0:	b5b0      	push	{r4, r5, r7, lr}
10060bb2:	242c      	movs	r4, #44	@ 0x2c
10060bb4:	4344      	muls	r4, r0
10060bb6:	480b      	ldr	r0, [pc, #44]	@ (10060be4 <__arm_cp.15_0>)
10060bb8:	6800      	ldr	r0, [r0, #0]
10060bba:	9d05      	ldr	r5, [sp, #20]
10060bbc:	5105      	str	r5, [r0, r4]
10060bbe:	1900      	adds	r0, r0, r4
10060bc0:	9c04      	ldr	r4, [sp, #16]
10060bc2:	6084      	str	r4, [r0, #8]
10060bc4:	60c1      	str	r1, [r0, #12]
10060bc6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10060bc8:	6281      	str	r1, [r0, #40]	@ 0x28
10060bca:	990a      	ldr	r1, [sp, #40]	@ 0x28
10060bcc:	6241      	str	r1, [r0, #36]	@ 0x24
10060bce:	9909      	ldr	r1, [sp, #36]	@ 0x24
10060bd0:	6201      	str	r1, [r0, #32]
10060bd2:	9908      	ldr	r1, [sp, #32]
10060bd4:	61c1      	str	r1, [r0, #28]
10060bd6:	9907      	ldr	r1, [sp, #28]
10060bd8:	7581      	strb	r1, [r0, #22]
10060bda:	9906      	ldr	r1, [sp, #24]
10060bdc:	7541      	strb	r1, [r0, #21]
10060bde:	74c2      	strb	r2, [r0, #19]
10060be0:	6043      	str	r3, [r0, #4]
10060be2:	bdb0      	pop	{r4, r5, r7, pc}

10060be4 <__arm_cp.15_0>:
10060be4:	20002470 	.word	0x20002470

10060be8 <LL_sched_delete_taskslot>:
10060be8:	212c      	movs	r1, #44	@ 0x2c
10060bea:	4341      	muls	r1, r0
10060bec:	4802      	ldr	r0, [pc, #8]	@ (10060bf8 <__arm_cp.19_0>)
10060bee:	6800      	ldr	r0, [r0, #0]
10060bf0:	1840      	adds	r0, r0, r1
10060bf2:	2110      	movs	r1, #16
10060bf4:	8241      	strh	r1, [r0, #18]
10060bf6:	4770      	bx	lr

10060bf8 <__arm_cp.19_0>:
10060bf8:	20002470 	.word	0x20002470

10060bfc <LL_sched_set_per_state>:
10060bfc:	222c      	movs	r2, #44	@ 0x2c
10060bfe:	4342      	muls	r2, r0
10060c00:	4802      	ldr	r0, [pc, #8]	@ (10060c0c <__arm_cp.21_0>)
10060c02:	6800      	ldr	r0, [r0, #0]
10060c04:	1880      	adds	r0, r0, r2
10060c06:	7481      	strb	r1, [r0, #18]
10060c08:	4770      	bx	lr
10060c0a:	46c0      	nop			@ (mov r8, r8)

10060c0c <__arm_cp.21_0>:
10060c0c:	20002470 	.word	0x20002470

10060c10 <LL_sched_reserve_taskslot>:
10060c10:	b510      	push	{r4, lr}
10060c12:	480e      	ldr	r0, [pc, #56]	@ (10060c4c <__arm_cp.22_0>)
10060c14:	6801      	ldr	r1, [r0, #0]
10060c16:	3128      	adds	r1, #40	@ 0x28
10060c18:	2000      	movs	r0, #0
10060c1a:	4a0d      	ldr	r2, [pc, #52]	@ (10060c50 <__arm_cp.22_1>)
10060c1c:	7ad3      	ldrb	r3, [r2, #11]
10060c1e:	4298      	cmp	r0, r3
10060c20:	d20b      	bcs.n	10060c3a <LL_sched_reserve_taskslot+0x2a>
10060c22:	f3ef 8310 	mrs	r3, PRIMASK
10060c26:	b672      	cpsid	i
10060c28:	460b      	mov	r3, r1
10060c2a:	3b16      	subs	r3, #22
10060c2c:	781c      	ldrb	r4, [r3, #0]
10060c2e:	2c00      	cmp	r4, #0
10060c30:	d005      	beq.n	10060c3e <LL_sched_reserve_taskslot+0x2e>
10060c32:	b662      	cpsie	i
10060c34:	312c      	adds	r1, #44	@ 0x2c
10060c36:	1c40      	adds	r0, r0, #1
10060c38:	e7f0      	b.n	10060c1c <LL_sched_reserve_taskslot+0xc>
10060c3a:	20ff      	movs	r0, #255	@ 0xff
10060c3c:	e004      	b.n	10060c48 <LL_sched_reserve_taskslot+0x38>
10060c3e:	2200      	movs	r2, #0
10060c40:	600a      	str	r2, [r1, #0]
10060c42:	2101      	movs	r1, #1
10060c44:	7019      	strb	r1, [r3, #0]
10060c46:	b662      	cpsie	i
10060c48:	b2c0      	uxtb	r0, r0
10060c4a:	bd10      	pop	{r4, pc}

10060c4c <__arm_cp.22_0>:
10060c4c:	20002470 	.word	0x20002470

10060c50 <__arm_cp.22_1>:
10060c50:	2000247c 	.word	0x2000247c

10060c54 <LL_sched_release_taskslot>:
10060c54:	28ff      	cmp	r0, #255	@ 0xff
10060c56:	d006      	beq.n	10060c66 <LL_sched_release_taskslot+0x12>
10060c58:	212c      	movs	r1, #44	@ 0x2c
10060c5a:	4341      	muls	r1, r0
10060c5c:	4802      	ldr	r0, [pc, #8]	@ (10060c68 <__arm_cp.23_0>)
10060c5e:	6800      	ldr	r0, [r0, #0]
10060c60:	1840      	adds	r0, r0, r1
10060c62:	2100      	movs	r1, #0
10060c64:	8241      	strh	r1, [r0, #18]
10060c66:	4770      	bx	lr

10060c68 <__arm_cp.23_0>:
10060c68:	20002470 	.word	0x20002470

10060c6c <LL_sched_check_and_call_sched>:
10060c6c:	b510      	push	{r4, lr}
10060c6e:	460c      	mov	r4, r1
10060c70:	f3ef 8110 	mrs	r1, PRIMASK
10060c74:	b672      	cpsid	i
10060c76:	f7ff fda5 	bl	100607c4 <LL_sched_is_scheduler_call_pending>
10060c7a:	b662      	cpsie	i
10060c7c:	2800      	cmp	r0, #0
10060c7e:	d000      	beq.n	10060c82 <LL_sched_check_and_call_sched+0x16>
10060c80:	bd10      	pop	{r4, pc}
10060c82:	4620      	mov	r0, r4
10060c84:	f7ff fdc0 	bl	10060808 <LL_sched_engine>
10060c88:	bd10      	pop	{r4, pc}
	...

10060c8c <LL_sched_check_and_wait_sched>:
10060c8c:	b5b0      	push	{r4, r5, r7, lr}
10060c8e:	4604      	mov	r4, r0
10060c90:	4813      	ldr	r0, [pc, #76]	@ (10060ce0 <__arm_cp.25_0>)
10060c92:	7ac0      	ldrb	r0, [r0, #11]
10060c94:	42a0      	cmp	r0, r4
10060c96:	d922      	bls.n	10060cde <LL_sched_check_and_wait_sched+0x52>
10060c98:	f3ef 8010 	mrs	r0, PRIMASK
10060c9c:	b672      	cpsid	i
10060c9e:	25ff      	movs	r5, #255	@ 0xff
10060ca0:	35ec      	adds	r5, #236	@ 0xec
10060ca2:	f7f1 ff9c 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
10060ca6:	1940      	adds	r0, r0, r5
10060ca8:	f7ff fd8c 	bl	100607c4 <LL_sched_is_scheduler_call_pending>
10060cac:	4a0d      	ldr	r2, [pc, #52]	@ (10060ce4 <__arm_cp.25_1>)
10060cae:	6813      	ldr	r3, [r2, #0]
10060cb0:	2100      	movs	r1, #0
10060cb2:	7219      	strb	r1, [r3, #8]
10060cb4:	b662      	cpsie	i
10060cb6:	2801      	cmp	r0, #1
10060cb8:	d10c      	bne.n	10060cd4 <LL_sched_check_and_wait_sched+0x48>
10060cba:	6810      	ldr	r0, [r2, #0]
10060cbc:	6041      	str	r1, [r0, #4]
10060cbe:	4a0a      	ldr	r2, [pc, #40]	@ (10060ce8 <__arm_cp.25_2>)
10060cc0:	6843      	ldr	r3, [r0, #4]
10060cc2:	4293      	cmp	r3, r2
10060cc4:	d80b      	bhi.n	10060cde <LL_sched_check_and_wait_sched+0x52>
10060cc6:	7a03      	ldrb	r3, [r0, #8]
10060cc8:	2b00      	cmp	r3, #0
10060cca:	d107      	bne.n	10060cdc <LL_sched_check_and_wait_sched+0x50>
10060ccc:	6843      	ldr	r3, [r0, #4]
10060cce:	1c5b      	adds	r3, r3, #1
10060cd0:	6043      	str	r3, [r0, #4]
10060cd2:	e7f5      	b.n	10060cc0 <LL_sched_check_and_wait_sched+0x34>
10060cd4:	4620      	mov	r0, r4
10060cd6:	f7ff fd97 	bl	10060808 <LL_sched_engine>
10060cda:	bdb0      	pop	{r4, r5, r7, pc}
10060cdc:	7201      	strb	r1, [r0, #8]
10060cde:	bdb0      	pop	{r4, r5, r7, pc}

10060ce0 <__arm_cp.25_0>:
10060ce0:	2000247c 	.word	0x2000247c

10060ce4 <__arm_cp.25_1>:
10060ce4:	20002468 	.word	0x20002468

10060ce8 <__arm_cp.25_2>:
10060ce8:	0004e1ff 	.word	0x0004e1ff

10060cec <MBM_init>:
10060cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060cee:	4c18      	ldr	r4, [pc, #96]	@ (10060d50 <__arm_cp.1_0>)
10060cf0:	2501      	movs	r5, #1
10060cf2:	2204      	movs	r2, #4
10060cf4:	4e17      	ldr	r6, [pc, #92]	@ (10060d54 <__arm_cp.1_1>)
10060cf6:	4620      	mov	r0, r4
10060cf8:	4629      	mov	r1, r5
10060cfa:	47b0      	blx	r6
10060cfc:	4f16      	ldr	r7, [pc, #88]	@ (10060d58 <__arm_cp.1_2>)
10060cfe:	6038      	str	r0, [r7, #0]
10060d00:	2210      	movs	r2, #16
10060d02:	4620      	mov	r0, r4
10060d04:	4629      	mov	r1, r5
10060d06:	47b0      	blx	r6
10060d08:	6839      	ldr	r1, [r7, #0]
10060d0a:	6008      	str	r0, [r1, #0]
10060d0c:	220c      	movs	r2, #12
10060d0e:	4620      	mov	r0, r4
10060d10:	4629      	mov	r1, r5
10060d12:	47b0      	blx	r6
10060d14:	6839      	ldr	r1, [r7, #0]
10060d16:	6809      	ldr	r1, [r1, #0]
10060d18:	60c8      	str	r0, [r1, #12]
10060d1a:	4d10      	ldr	r5, [pc, #64]	@ (10060d5c <__arm_cp.1_3>)
10060d1c:	89e9      	ldrh	r1, [r5, #14]
10060d1e:	2224      	movs	r2, #36	@ 0x24
10060d20:	4620      	mov	r0, r4
10060d22:	47b0      	blx	r6
10060d24:	4601      	mov	r1, r0
10060d26:	6838      	ldr	r0, [r7, #0]
10060d28:	6802      	ldr	r2, [r0, #0]
10060d2a:	68d0      	ldr	r0, [r2, #12]
10060d2c:	6081      	str	r1, [r0, #8]
10060d2e:	2100      	movs	r1, #0
10060d30:	2908      	cmp	r1, #8
10060d32:	d003      	beq.n	10060d3c <MBM_init+0x50>
10060d34:	2300      	movs	r3, #0
10060d36:	5253      	strh	r3, [r2, r1]
10060d38:	1c89      	adds	r1, r1, #2
10060d3a:	e7f9      	b.n	10060d30 <MBM_init+0x44>
10060d3c:	89e9      	ldrh	r1, [r5, #14]
10060d3e:	80d1      	strh	r1, [r2, #6]
10060d40:	2100      	movs	r1, #0
10060d42:	8111      	strh	r1, [r2, #8]
10060d44:	89e9      	ldrh	r1, [r5, #14]
10060d46:	8041      	strh	r1, [r0, #2]
10060d48:	f000 f948 	bl	10060fdc <Mem_Buff_init>
10060d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060d4e:	46c0      	nop			@ (mov r8, r8)

10060d50 <__arm_cp.1_0>:
10060d50:	20002478 	.word	0x20002478

10060d54 <__arm_cp.1_1>:
10060d54:	10060fa5 	.word	0x10060fa5

10060d58 <__arm_cp.1_2>:
10060d58:	20002474 	.word	0x20002474

10060d5c <__arm_cp.1_3>:
10060d5c:	2000247c 	.word	0x2000247c

10060d60 <MBM_get>:
10060d60:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10060d62:	4a1a      	ldr	r2, [pc, #104]	@ (10060dcc <__arm_cp.2_0>)
10060d64:	6812      	ldr	r2, [r2, #0]
10060d66:	6813      	ldr	r3, [r2, #0]
10060d68:	f3ef 8210 	mrs	r2, PRIMASK
10060d6c:	b672      	cpsid	i
10060d6e:	2206      	movs	r2, #6
10060d70:	5e9c      	ldrsh	r4, [r3, r2]
10060d72:	17e2      	asrs	r2, r4, #31
10060d74:	4627      	mov	r7, r4
10060d76:	4397      	bics	r7, r2
10060d78:	0040      	lsls	r0, r0, #1
10060d7a:	9000      	str	r0, [sp, #0]
10060d7c:	5e18      	ldrsh	r0, [r3, r0]
10060d7e:	4a14      	ldr	r2, [pc, #80]	@ (10060dd0 <__arm_cp.2_1>)
10060d80:	9102      	str	r1, [sp, #8]
10060d82:	1889      	adds	r1, r1, r2
10060d84:	0949      	lsrs	r1, r1, #5
10060d86:	1c4d      	adds	r5, r1, #1
10060d88:	2801      	cmp	r0, #1
10060d8a:	9501      	str	r5, [sp, #4]
10060d8c:	db05      	blt.n	10060d9a <MBM_get+0x3a>
10060d8e:	1b42      	subs	r2, r0, r5
10060d90:	4256      	negs	r6, r2
10060d92:	b212      	sxth	r2, r2
10060d94:	13d5      	asrs	r5, r2, #15
10060d96:	4035      	ands	r5, r6
10060d98:	183f      	adds	r7, r7, r0
10060d9a:	68d8      	ldr	r0, [r3, #12]
10060d9c:	2200      	movs	r2, #0
10060d9e:	5e86      	ldrsh	r6, [r0, r2]
10060da0:	b209      	sxth	r1, r1
10060da2:	428e      	cmp	r6, r1
10060da4:	dd0e      	ble.n	10060dc4 <MBM_get+0x64>
10060da6:	b23e      	sxth	r6, r7
10060da8:	428e      	cmp	r6, r1
10060daa:	dd0b      	ble.n	10060dc4 <MBM_get+0x64>
10060dac:	9900      	ldr	r1, [sp, #0]
10060dae:	1859      	adds	r1, r3, r1
10060db0:	1b62      	subs	r2, r4, r5
10060db2:	80da      	strh	r2, [r3, #6]
10060db4:	880a      	ldrh	r2, [r1, #0]
10060db6:	9b01      	ldr	r3, [sp, #4]
10060db8:	1ad2      	subs	r2, r2, r3
10060dba:	800a      	strh	r2, [r1, #0]
10060dbc:	9902      	ldr	r1, [sp, #8]
10060dbe:	f000 f943 	bl	10061048 <Mem_Buff_get>
10060dc2:	4602      	mov	r2, r0
10060dc4:	b662      	cpsie	i
10060dc6:	4610      	mov	r0, r2
10060dc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10060dca:	46c0      	nop			@ (mov r8, r8)

10060dcc <__arm_cp.2_0>:
10060dcc:	20002474 	.word	0x20002474

10060dd0 <__arm_cp.2_1>:
10060dd0:	001fffff 	.word	0x001fffff

10060dd4 <MBM_release>:
10060dd4:	b5b0      	push	{r4, r5, r7, lr}
10060dd6:	460d      	mov	r5, r1
10060dd8:	4604      	mov	r4, r0
10060dda:	f000 f95b 	bl	10061094 <Mem_Buff_get_chain_count>
10060dde:	4601      	mov	r1, r0
10060de0:	4628      	mov	r0, r5
10060de2:	f000 f80b 	bl	10060dfc <MBM_release_balance>
10060de6:	4804      	ldr	r0, [pc, #16]	@ (10060df8 <__arm_cp.3_0>)
10060de8:	6800      	ldr	r0, [r0, #0]
10060dea:	6800      	ldr	r0, [r0, #0]
10060dec:	68c0      	ldr	r0, [r0, #12]
10060dee:	4621      	mov	r1, r4
10060df0:	f000 f90f 	bl	10061012 <Mem_Buff_release>
10060df4:	bdb0      	pop	{r4, r5, r7, pc}
10060df6:	46c0      	nop			@ (mov r8, r8)

10060df8 <__arm_cp.3_0>:
10060df8:	20002474 	.word	0x20002474

10060dfc <MBM_release_balance>:
10060dfc:	b510      	push	{r4, lr}
10060dfe:	4a0b      	ldr	r2, [pc, #44]	@ (10060e2c <__arm_cp.4_0>)
10060e00:	6812      	ldr	r2, [r2, #0]
10060e02:	6812      	ldr	r2, [r2, #0]
10060e04:	f3ef 8310 	mrs	r3, PRIMASK
10060e08:	b672      	cpsid	i
10060e0a:	0043      	lsls	r3, r0, #1
10060e0c:	5ed0      	ldrsh	r0, [r2, r3]
10060e0e:	1844      	adds	r4, r0, r1
10060e10:	52d4      	strh	r4, [r2, r3]
10060e12:	b20b      	sxth	r3, r1
10060e14:	18c3      	adds	r3, r0, r3
10060e16:	2b01      	cmp	r3, #1
10060e18:	db02      	blt.n	10060e20 <MBM_release_balance+0x24>
10060e1a:	4243      	negs	r3, r0
10060e1c:	0bc1      	lsrs	r1, r0, #15
10060e1e:	4019      	ands	r1, r3
10060e20:	88d0      	ldrh	r0, [r2, #6]
10060e22:	1808      	adds	r0, r1, r0
10060e24:	80d0      	strh	r0, [r2, #6]
10060e26:	b662      	cpsie	i
10060e28:	bd10      	pop	{r4, pc}
10060e2a:	46c0      	nop			@ (mov r8, r8)

10060e2c <__arm_cp.4_0>:
10060e2c:	20002474 	.word	0x20002474

10060e30 <MBM_get_available_mem_buffers>:
10060e30:	4908      	ldr	r1, [pc, #32]	@ (10060e54 <__arm_cp.5_0>)
10060e32:	6809      	ldr	r1, [r1, #0]
10060e34:	680a      	ldr	r2, [r1, #0]
10060e36:	f3ef 8110 	mrs	r1, PRIMASK
10060e3a:	b672      	cpsid	i
10060e3c:	2106      	movs	r1, #6
10060e3e:	5e51      	ldrsh	r1, [r2, r1]
10060e40:	17cb      	asrs	r3, r1, #31
10060e42:	4399      	bics	r1, r3
10060e44:	0040      	lsls	r0, r0, #1
10060e46:	5e10      	ldrsh	r0, [r2, r0]
10060e48:	2800      	cmp	r0, #0
10060e4a:	dd00      	ble.n	10060e4e <MBM_get_available_mem_buffers+0x1e>
10060e4c:	1809      	adds	r1, r1, r0
10060e4e:	b288      	uxth	r0, r1
10060e50:	b662      	cpsie	i
10060e52:	4770      	bx	lr

10060e54 <__arm_cp.5_0>:
10060e54:	20002474 	.word	0x20002474

10060e58 <MBM_resize>:
10060e58:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10060e5a:	2481      	movs	r4, #129	@ 0x81
10060e5c:	2800      	cmp	r0, #0
10060e5e:	d032      	beq.n	10060ec6 <MBM_resize+0x6e>
10060e60:	4606      	mov	r6, r0
10060e62:	9102      	str	r1, [sp, #8]
10060e64:	9401      	str	r4, [sp, #4]
10060e66:	4819      	ldr	r0, [pc, #100]	@ (10060ecc <__arm_cp.6_0>)
10060e68:	6800      	ldr	r0, [r0, #0]
10060e6a:	6800      	ldr	r0, [r0, #0]
10060e6c:	9000      	str	r0, [sp, #0]
10060e6e:	1e50      	subs	r0, r2, #1
10060e70:	211f      	movs	r1, #31
10060e72:	4301      	orrs	r1, r0
10060e74:	1c4c      	adds	r4, r1, #1
10060e76:	b2a7      	uxth	r7, r4
10060e78:	4630      	mov	r0, r6
10060e7a:	f000 f913 	bl	100610a4 <Mem_Buff_get_chain_size>
10060e7e:	4605      	mov	r5, r0
10060e80:	4287      	cmp	r7, r0
10060e82:	d90c      	bls.n	10060e9e <MBM_resize+0x46>
10060e84:	1b60      	subs	r0, r4, r5
10060e86:	b281      	uxth	r1, r0
10060e88:	9802      	ldr	r0, [sp, #8]
10060e8a:	f7ff ff69 	bl	10060d60 <MBM_get>
10060e8e:	2800      	cmp	r0, #0
10060e90:	9c01      	ldr	r4, [sp, #4]
10060e92:	d018      	beq.n	10060ec6 <MBM_resize+0x6e>
10060e94:	4601      	mov	r1, r0
10060e96:	4630      	mov	r0, r6
10060e98:	f000 fa29 	bl	100612ee <Mem_Buff_append>
10060e9c:	e012      	b.n	10060ec4 <MBM_resize+0x6c>
10060e9e:	42af      	cmp	r7, r5
10060ea0:	d210      	bcs.n	10060ec4 <MBM_resize+0x6c>
10060ea2:	9800      	ldr	r0, [sp, #0]
10060ea4:	68c0      	ldr	r0, [r0, #12]
10060ea6:	4631      	mov	r1, r6
10060ea8:	463a      	mov	r2, r7
10060eaa:	f000 f907 	bl	100610bc <Mem_Buff_resize>
10060eae:	4604      	mov	r4, r0
10060eb0:	1e78      	subs	r0, r7, #1
10060eb2:	0940      	lsrs	r0, r0, #5
10060eb4:	1e69      	subs	r1, r5, #1
10060eb6:	0949      	lsrs	r1, r1, #5
10060eb8:	1a08      	subs	r0, r1, r0
10060eba:	b281      	uxth	r1, r0
10060ebc:	9802      	ldr	r0, [sp, #8]
10060ebe:	f7ff ff9d 	bl	10060dfc <MBM_release_balance>
10060ec2:	e000      	b.n	10060ec6 <MBM_resize+0x6e>
10060ec4:	2400      	movs	r4, #0
10060ec6:	4620      	mov	r0, r4
10060ec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10060eca:	46c0      	nop			@ (mov r8, r8)

10060ecc <__arm_cp.6_0>:
10060ecc:	20002474 	.word	0x20002474

10060ed0 <MBM_reserve>:
10060ed0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10060ed2:	460c      	mov	r4, r1
10060ed4:	4601      	mov	r1, r0
10060ed6:	481c      	ldr	r0, [pc, #112]	@ (10060f48 <__arm_cp.7_0>)
10060ed8:	6800      	ldr	r0, [r0, #0]
10060eda:	6805      	ldr	r5, [r0, #0]
10060edc:	8928      	ldrh	r0, [r5, #8]
10060ede:	68ea      	ldr	r2, [r5, #12]
10060ee0:	8852      	ldrh	r2, [r2, #2]
10060ee2:	1a13      	subs	r3, r2, r0
10060ee4:	42a3      	cmp	r3, r4
10060ee6:	da26      	bge.n	10060f36 <MBM_reserve+0x66>
10060ee8:	1aa1      	subs	r1, r4, r2
10060eea:	1808      	adds	r0, r1, r0
10060eec:	a901      	add	r1, sp, #4
10060eee:	8008      	strh	r0, [r1, #0]
10060ef0:	4816      	ldr	r0, [pc, #88]	@ (10060f4c <__arm_cp.7_1>)
10060ef2:	6800      	ldr	r0, [r0, #0]
10060ef4:	6980      	ldr	r0, [r0, #24]
10060ef6:	2142      	movs	r1, #66	@ 0x42
10060ef8:	2240      	movs	r2, #64	@ 0x40
10060efa:	2303      	movs	r3, #3
10060efc:	f7f4 faf0 	bl	100554e0 <aci_event_fifo_push_header>
10060f00:	2800      	cmp	r0, #0
10060f02:	d017      	beq.n	10060f34 <MBM_reserve+0x64>
10060f04:	4604      	mov	r4, r0
10060f06:	2202      	movs	r2, #2
10060f08:	72c2      	strb	r2, [r0, #11]
10060f0a:	2009      	movs	r0, #9
10060f0c:	72a0      	strb	r0, [r4, #10]
10060f0e:	4620      	mov	r0, r4
10060f10:	300c      	adds	r0, #12
10060f12:	a901      	add	r1, sp, #4
10060f14:	f7f1 fd98 	bl	10052a48 <BLEPLAT_MemCpy>
10060f18:	2000      	movs	r0, #0
10060f1a:	7260      	strb	r0, [r4, #9]
10060f1c:	2106      	movs	r1, #6
10060f1e:	7221      	strb	r1, [r4, #8]
10060f20:	71e0      	strb	r0, [r4, #7]
10060f22:	71a1      	strb	r1, [r4, #6]
10060f24:	20ff      	movs	r0, #255	@ 0xff
10060f26:	7160      	strb	r0, [r4, #5]
10060f28:	2082      	movs	r0, #130	@ 0x82
10060f2a:	7120      	strb	r0, [r4, #4]
10060f2c:	2042      	movs	r0, #66	@ 0x42
10060f2e:	4621      	mov	r1, r4
10060f30:	f7f4 fb73 	bl	1005561a <aci_event_fifo_push>
10060f34:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10060f36:	2003      	movs	r0, #3
10060f38:	4622      	mov	r2, r4
10060f3a:	f000 f809 	bl	10060f50 <MBM_move_class>
10060f3e:	8928      	ldrh	r0, [r5, #8]
10060f40:	1900      	adds	r0, r0, r4
10060f42:	8128      	strh	r0, [r5, #8]
10060f44:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10060f46:	46c0      	nop			@ (mov r8, r8)

10060f48 <__arm_cp.7_0>:
10060f48:	20002474 	.word	0x20002474

10060f4c <__arm_cp.7_1>:
10060f4c:	20002418 	.word	0x20002418

10060f50 <MBM_move_class>:
10060f50:	b510      	push	{r4, lr}
10060f52:	4b08      	ldr	r3, [pc, #32]	@ (10060f74 <__arm_cp.8_0>)
10060f54:	681b      	ldr	r3, [r3, #0]
10060f56:	681b      	ldr	r3, [r3, #0]
10060f58:	f3ef 8410 	mrs	r4, PRIMASK
10060f5c:	b672      	cpsid	i
10060f5e:	0040      	lsls	r0, r0, #1
10060f60:	5a1c      	ldrh	r4, [r3, r0]
10060f62:	1aa4      	subs	r4, r4, r2
10060f64:	521c      	strh	r4, [r3, r0]
10060f66:	0048      	lsls	r0, r1, #1
10060f68:	5a19      	ldrh	r1, [r3, r0]
10060f6a:	1889      	adds	r1, r1, r2
10060f6c:	5219      	strh	r1, [r3, r0]
10060f6e:	b662      	cpsie	i
10060f70:	bd10      	pop	{r4, pc}
10060f72:	46c0      	nop			@ (mov r8, r8)

10060f74 <__arm_cp.8_0>:
10060f74:	20002474 	.word	0x20002474

10060f78 <MBM_unreserve>:
10060f78:	b5b0      	push	{r4, r5, r7, lr}
10060f7a:	460c      	mov	r4, r1
10060f7c:	4905      	ldr	r1, [pc, #20]	@ (10060f94 <__arm_cp.9_0>)
10060f7e:	6809      	ldr	r1, [r1, #0]
10060f80:	680d      	ldr	r5, [r1, #0]
10060f82:	2103      	movs	r1, #3
10060f84:	4622      	mov	r2, r4
10060f86:	f7ff ffe3 	bl	10060f50 <MBM_move_class>
10060f8a:	8928      	ldrh	r0, [r5, #8]
10060f8c:	1b00      	subs	r0, r0, r4
10060f8e:	8128      	strh	r0, [r5, #8]
10060f90:	bdb0      	pop	{r4, r5, r7, pc}
10060f92:	46c0      	nop			@ (mov r8, r8)

10060f94 <__arm_cp.9_0>:
10060f94:	20002474 	.word	0x20002474

10060f98 <csmem_init>:
10060f98:	4801      	ldr	r0, [pc, #4]	@ (10060fa0 <__arm_cp.0_0>)
10060f9a:	6841      	ldr	r1, [r0, #4]
10060f9c:	6001      	str	r1, [r0, #0]
10060f9e:	4770      	bx	lr

10060fa0 <__arm_cp.0_0>:
10060fa0:	20002478 	.word	0x20002478

10060fa4 <csmem_mem_assign>:
10060fa4:	b570      	push	{r4, r5, r6, lr}
10060fa6:	4614      	mov	r4, r2
10060fa8:	4605      	mov	r5, r0
10060faa:	434c      	muls	r4, r1
10060fac:	6800      	ldr	r0, [r0, #0]
10060fae:	1e40      	subs	r0, r0, #1
10060fb0:	2103      	movs	r1, #3
10060fb2:	4301      	orrs	r1, r0
10060fb4:	1c4e      	adds	r6, r1, #1
10060fb6:	2100      	movs	r1, #0
10060fb8:	4630      	mov	r0, r6
10060fba:	4622      	mov	r2, r4
10060fbc:	f7f1 fd54 	bl	10052a68 <BLEPLAT_MemSet>
10060fc0:	1930      	adds	r0, r6, r4
10060fc2:	6028      	str	r0, [r5, #0]
10060fc4:	4630      	mov	r0, r6
10060fc6:	bd70      	pop	{r4, r5, r6, pc}

10060fc8 <csmem_mem_0_assign>:
10060fc8:	b580      	push	{r7, lr}
10060fca:	460a      	mov	r2, r1
10060fcc:	4601      	mov	r1, r0
10060fce:	4802      	ldr	r0, [pc, #8]	@ (10060fd8 <__arm_cp.3_0>)
10060fd0:	f7ff ffe8 	bl	10060fa4 <csmem_mem_assign>
10060fd4:	bd80      	pop	{r7, pc}
10060fd6:	46c0      	nop			@ (mov r8, r8)

10060fd8 <__arm_cp.3_0>:
10060fd8:	20002478 	.word	0x20002478

10060fdc <Mem_Buff_init>:
10060fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10060fde:	b081      	sub	sp, #4
10060fe0:	4605      	mov	r5, r0
10060fe2:	8840      	ldrh	r0, [r0, #2]
10060fe4:	2486      	movs	r4, #134	@ 0x86
10060fe6:	2800      	cmp	r0, #0
10060fe8:	d010      	beq.n	1006100c <Mem_Buff_init+0x30>
10060fea:	68ae      	ldr	r6, [r5, #8]
10060fec:	2e00      	cmp	r6, #0
10060fee:	d00d      	beq.n	1006100c <Mem_Buff_init+0x30>
10060ff0:	2400      	movs	r4, #0
10060ff2:	606c      	str	r4, [r5, #4]
10060ff4:	802c      	strh	r4, [r5, #0]
10060ff6:	4627      	mov	r7, r4
10060ff8:	6034      	str	r4, [r6, #0]
10060ffa:	4628      	mov	r0, r5
10060ffc:	4631      	mov	r1, r6
10060ffe:	f000 f808 	bl	10061012 <Mem_Buff_release>
10061002:	3624      	adds	r6, #36	@ 0x24
10061004:	1c7f      	adds	r7, r7, #1
10061006:	8868      	ldrh	r0, [r5, #2]
10061008:	4287      	cmp	r7, r0
1006100a:	d3f5      	bcc.n	10060ff8 <Mem_Buff_init+0x1c>
1006100c:	4620      	mov	r0, r4
1006100e:	b001      	add	sp, #4
10061010:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061012 <Mem_Buff_release>:
10061012:	b510      	push	{r4, lr}
10061014:	2900      	cmp	r1, #0
10061016:	d015      	beq.n	10061044 <Mem_Buff_release+0x32>
10061018:	2200      	movs	r2, #0
1006101a:	460c      	mov	r4, r1
1006101c:	4623      	mov	r3, r4
1006101e:	1c52      	adds	r2, r2, #1
10061020:	6824      	ldr	r4, [r4, #0]
10061022:	2c00      	cmp	r4, #0
10061024:	d1fa      	bne.n	1006101c <Mem_Buff_release+0xa>
10061026:	f3ef 8410 	mrs	r4, PRIMASK
1006102a:	b672      	cpsid	i
1006102c:	6844      	ldr	r4, [r0, #4]
1006102e:	6041      	str	r1, [r0, #4]
10061030:	601c      	str	r4, [r3, #0]
10061032:	8801      	ldrh	r1, [r0, #0]
10061034:	1889      	adds	r1, r1, r2
10061036:	8001      	strh	r1, [r0, #0]
10061038:	b662      	cpsie	i
1006103a:	2000      	movs	r0, #0
1006103c:	f001 fdc2 	bl	10062bc4 <tsk_signal_resource_idx>
10061040:	f7f0 ff1b 	bl	10051e7a <BLE_STACK_ProcessRequest>
10061044:	bd10      	pop	{r4, pc}
	...

10061048 <Mem_Buff_get>:
10061048:	b5f0      	push	{r4, r5, r6, r7, lr}
1006104a:	4a11      	ldr	r2, [pc, #68]	@ (10061090 <__arm_cp.2_0>)
1006104c:	1889      	adds	r1, r1, r2
1006104e:	0949      	lsrs	r1, r1, #5
10061050:	1c4a      	adds	r2, r1, #1
10061052:	b294      	uxth	r4, r2
10061054:	f3ef 8110 	mrs	r1, PRIMASK
10061058:	b672      	cpsid	i
1006105a:	2100      	movs	r1, #0
1006105c:	2c00      	cmp	r4, #0
1006105e:	d013      	beq.n	10061088 <Mem_Buff_get+0x40>
10061060:	8803      	ldrh	r3, [r0, #0]
10061062:	429c      	cmp	r4, r3
10061064:	d810      	bhi.n	10061088 <Mem_Buff_get+0x40>
10061066:	1e64      	subs	r4, r4, #1
10061068:	6841      	ldr	r1, [r0, #4]
1006106a:	460d      	mov	r5, r1
1006106c:	d006      	beq.n	1006107c <Mem_Buff_get+0x34>
1006106e:	2600      	movs	r6, #0
10061070:	460d      	mov	r5, r1
10061072:	682d      	ldr	r5, [r5, #0]
10061074:	1c76      	adds	r6, r6, #1
10061076:	b2b7      	uxth	r7, r6
10061078:	42bc      	cmp	r4, r7
1006107a:	d8fa      	bhi.n	10061072 <Mem_Buff_get+0x2a>
1006107c:	682c      	ldr	r4, [r5, #0]
1006107e:	6044      	str	r4, [r0, #4]
10061080:	2400      	movs	r4, #0
10061082:	602c      	str	r4, [r5, #0]
10061084:	1a9a      	subs	r2, r3, r2
10061086:	8002      	strh	r2, [r0, #0]
10061088:	b662      	cpsie	i
1006108a:	4608      	mov	r0, r1
1006108c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006108e:	46c0      	nop			@ (mov r8, r8)

10061090 <__arm_cp.2_0>:
10061090:	001fffff 	.word	0x001fffff

10061094 <Mem_Buff_get_chain_count>:
10061094:	2100      	movs	r1, #0
10061096:	2800      	cmp	r0, #0
10061098:	d002      	beq.n	100610a0 <Mem_Buff_get_chain_count+0xc>
1006109a:	6800      	ldr	r0, [r0, #0]
1006109c:	1c49      	adds	r1, r1, #1
1006109e:	e7fa      	b.n	10061096 <Mem_Buff_get_chain_count+0x2>
100610a0:	b288      	uxth	r0, r1
100610a2:	4770      	bx	lr

100610a4 <Mem_Buff_get_chain_size>:
100610a4:	2800      	cmp	r0, #0
100610a6:	d006      	beq.n	100610b6 <Mem_Buff_get_chain_size+0x12>
100610a8:	2100      	movs	r1, #0
100610aa:	6800      	ldr	r0, [r0, #0]
100610ac:	1c49      	adds	r1, r1, #1
100610ae:	2800      	cmp	r0, #0
100610b0:	d1fb      	bne.n	100610aa <Mem_Buff_get_chain_size+0x6>
100610b2:	0148      	lsls	r0, r1, #5
100610b4:	e000      	b.n	100610b8 <Mem_Buff_get_chain_size+0x14>
100610b6:	2000      	movs	r0, #0
100610b8:	b280      	uxth	r0, r0
100610ba:	4770      	bx	lr

100610bc <Mem_Buff_resize>:
100610bc:	b570      	push	{r4, r5, r6, lr}
100610be:	2400      	movs	r4, #0
100610c0:	2900      	cmp	r1, #0
100610c2:	d00a      	beq.n	100610da <Mem_Buff_resize+0x1e>
100610c4:	2600      	movs	r6, #0
100610c6:	460d      	mov	r5, r1
100610c8:	6809      	ldr	r1, [r1, #0]
100610ca:	4633      	mov	r3, r6
100610cc:	3320      	adds	r3, #32
100610ce:	b29e      	uxth	r6, r3
100610d0:	4296      	cmp	r6, r2
100610d2:	d20e      	bcs.n	100610f2 <Mem_Buff_resize+0x36>
100610d4:	2900      	cmp	r1, #0
100610d6:	d1f6      	bne.n	100610c6 <Mem_Buff_resize+0xa>
100610d8:	e001      	b.n	100610de <Mem_Buff_resize+0x22>
100610da:	4623      	mov	r3, r4
100610dc:	4625      	mov	r5, r4
100610de:	1ad1      	subs	r1, r2, r3
100610e0:	b289      	uxth	r1, r1
100610e2:	f7ff ffb1 	bl	10061048 <Mem_Buff_get>
100610e6:	6028      	str	r0, [r5, #0]
100610e8:	2800      	cmp	r0, #0
100610ea:	d10a      	bne.n	10061102 <Mem_Buff_resize+0x46>
100610ec:	2079      	movs	r0, #121	@ 0x79
100610ee:	43c4      	mvns	r4, r0
100610f0:	e007      	b.n	10061102 <Mem_Buff_resize+0x46>
100610f2:	2900      	cmp	r1, #0
100610f4:	d004      	beq.n	10061100 <Mem_Buff_resize+0x44>
100610f6:	f7ff ff8c 	bl	10061012 <Mem_Buff_release>
100610fa:	2400      	movs	r4, #0
100610fc:	602c      	str	r4, [r5, #0]
100610fe:	e000      	b.n	10061102 <Mem_Buff_resize+0x46>
10061100:	2400      	movs	r4, #0
10061102:	b2e0      	uxtb	r0, r4
10061104:	bd70      	pop	{r4, r5, r6, pc}

10061106 <Mem_Buff_get_buff_off>:
10061106:	2900      	cmp	r1, #0
10061108:	d008      	beq.n	1006111c <Mem_Buff_get_buff_off+0x16>
1006110a:	2800      	cmp	r0, #0
1006110c:	d009      	beq.n	10061122 <Mem_Buff_get_buff_off+0x1c>
1006110e:	b28b      	uxth	r3, r1
10061110:	2b20      	cmp	r3, #32
10061112:	d304      	bcc.n	1006111e <Mem_Buff_get_buff_off+0x18>
10061114:	6800      	ldr	r0, [r0, #0]
10061116:	3920      	subs	r1, #32
10061118:	040b      	lsls	r3, r1, #16
1006111a:	d1f6      	bne.n	1006110a <Mem_Buff_get_buff_off+0x4>
1006111c:	2100      	movs	r1, #0
1006111e:	8011      	strh	r1, [r2, #0]
10061120:	4770      	bx	lr
10061122:	2000      	movs	r0, #0
10061124:	4770      	bx	lr

10061126 <Mem_Buff_write>:
10061126:	b5f0      	push	{r4, r5, r6, r7, lr}
10061128:	b081      	sub	sp, #4
1006112a:	4606      	mov	r6, r0
1006112c:	0950      	lsrs	r0, r2, #5
1006112e:	0604      	lsls	r4, r0, #24
10061130:	d004      	beq.n	1006113c <Mem_Buff_write+0x16>
10061132:	2e00      	cmp	r6, #0
10061134:	d02d      	beq.n	10061192 <Mem_Buff_write+0x6c>
10061136:	6836      	ldr	r6, [r6, #0]
10061138:	1e40      	subs	r0, r0, #1
1006113a:	e7f8      	b.n	1006112e <Mem_Buff_write+0x8>
1006113c:	461c      	mov	r4, r3
1006113e:	1e5b      	subs	r3, r3, #1
10061140:	4620      	mov	r0, r4
10061142:	4198      	sbcs	r0, r3
10061144:	2c00      	cmp	r4, #0
10061146:	d01f      	beq.n	10061188 <Mem_Buff_write+0x62>
10061148:	2e00      	cmp	r6, #0
1006114a:	d01d      	beq.n	10061188 <Mem_Buff_write+0x62>
1006114c:	201f      	movs	r0, #31
1006114e:	4002      	ands	r2, r0
10061150:	2020      	movs	r0, #32
10061152:	1a85      	subs	r5, r0, r2
10061154:	b2a8      	uxth	r0, r5
10061156:	b2a3      	uxth	r3, r4
10061158:	4298      	cmp	r0, r3
1006115a:	d300      	bcc.n	1006115e <Mem_Buff_write+0x38>
1006115c:	4625      	mov	r5, r4
1006115e:	9500      	str	r5, [sp, #0]
10061160:	b2af      	uxth	r7, r5
10061162:	18b0      	adds	r0, r6, r2
10061164:	1d00      	adds	r0, r0, #4
10061166:	463a      	mov	r2, r7
10061168:	460d      	mov	r5, r1
1006116a:	f7f1 fc6d 	bl	10052a48 <BLEPLAT_MemCpy>
1006116e:	9800      	ldr	r0, [sp, #0]
10061170:	1a24      	subs	r4, r4, r0
10061172:	b2a1      	uxth	r1, r4
10061174:	1e4a      	subs	r2, r1, #1
10061176:	4608      	mov	r0, r1
10061178:	4190      	sbcs	r0, r2
1006117a:	2900      	cmp	r1, #0
1006117c:	d004      	beq.n	10061188 <Mem_Buff_write+0x62>
1006117e:	19e9      	adds	r1, r5, r7
10061180:	6836      	ldr	r6, [r6, #0]
10061182:	2200      	movs	r2, #0
10061184:	2e00      	cmp	r6, #0
10061186:	d1e3      	bne.n	10061150 <Mem_Buff_write+0x2a>
10061188:	2800      	cmp	r0, #0
1006118a:	d003      	beq.n	10061194 <Mem_Buff_write+0x6e>
1006118c:	207e      	movs	r0, #126	@ 0x7e
1006118e:	43c0      	mvns	r0, r0
10061190:	e000      	b.n	10061194 <Mem_Buff_write+0x6e>
10061192:	2081      	movs	r0, #129	@ 0x81
10061194:	b2c0      	uxtb	r0, r0
10061196:	b001      	add	sp, #4
10061198:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006119a <Mem_Buff_read>:
1006119a:	b5f0      	push	{r4, r5, r6, r7, lr}
1006119c:	b081      	sub	sp, #4
1006119e:	460d      	mov	r5, r1
100611a0:	4606      	mov	r6, r0
100611a2:	2a00      	cmp	r2, #0
100611a4:	d008      	beq.n	100611b8 <Mem_Buff_read+0x1e>
100611a6:	2e00      	cmp	r6, #0
100611a8:	d02a      	beq.n	10061200 <Mem_Buff_read+0x66>
100611aa:	b290      	uxth	r0, r2
100611ac:	2820      	cmp	r0, #32
100611ae:	d306      	bcc.n	100611be <Mem_Buff_read+0x24>
100611b0:	6836      	ldr	r6, [r6, #0]
100611b2:	3a20      	subs	r2, #32
100611b4:	0410      	lsls	r0, r2, #16
100611b6:	d1f6      	bne.n	100611a6 <Mem_Buff_read+0xc>
100611b8:	2e00      	cmp	r6, #0
100611ba:	d021      	beq.n	10061200 <Mem_Buff_read+0x66>
100611bc:	2200      	movs	r2, #0
100611be:	2b00      	cmp	r3, #0
100611c0:	d020      	beq.n	10061204 <Mem_Buff_read+0x6a>
100611c2:	2020      	movs	r0, #32
100611c4:	1a84      	subs	r4, r0, r2
100611c6:	b2a0      	uxth	r0, r4
100611c8:	b299      	uxth	r1, r3
100611ca:	4288      	cmp	r0, r1
100611cc:	d300      	bcc.n	100611d0 <Mem_Buff_read+0x36>
100611ce:	461c      	mov	r4, r3
100611d0:	b2a7      	uxth	r7, r4
100611d2:	b290      	uxth	r0, r2
100611d4:	1830      	adds	r0, r6, r0
100611d6:	1d01      	adds	r1, r0, #4
100611d8:	4628      	mov	r0, r5
100611da:	463a      	mov	r2, r7
100611dc:	9300      	str	r3, [sp, #0]
100611de:	f7f1 fc33 	bl	10052a48 <BLEPLAT_MemCpy>
100611e2:	9b00      	ldr	r3, [sp, #0]
100611e4:	1b1b      	subs	r3, r3, r4
100611e6:	0418      	lsls	r0, r3, #16
100611e8:	d004      	beq.n	100611f4 <Mem_Buff_read+0x5a>
100611ea:	19ed      	adds	r5, r5, r7
100611ec:	6836      	ldr	r6, [r6, #0]
100611ee:	2200      	movs	r2, #0
100611f0:	2e00      	cmp	r6, #0
100611f2:	d1e6      	bne.n	100611c2 <Mem_Buff_read+0x28>
100611f4:	b298      	uxth	r0, r3
100611f6:	2800      	cmp	r0, #0
100611f8:	d005      	beq.n	10061206 <Mem_Buff_read+0x6c>
100611fa:	207e      	movs	r0, #126	@ 0x7e
100611fc:	43c0      	mvns	r0, r0
100611fe:	e002      	b.n	10061206 <Mem_Buff_read+0x6c>
10061200:	2081      	movs	r0, #129	@ 0x81
10061202:	e000      	b.n	10061206 <Mem_Buff_read+0x6c>
10061204:	2000      	movs	r0, #0
10061206:	b2c0      	uxtb	r0, r0
10061208:	b001      	add	sp, #4
1006120a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006120c <Mem_Buff_cmp>:
1006120c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006120e:	b083      	sub	sp, #12
10061210:	9102      	str	r1, [sp, #8]
10061212:	4606      	mov	r6, r0
10061214:	2a00      	cmp	r2, #0
10061216:	d008      	beq.n	1006122a <Mem_Buff_cmp+0x1e>
10061218:	2e00      	cmp	r6, #0
1006121a:	d033      	beq.n	10061284 <Mem_Buff_cmp+0x78>
1006121c:	b290      	uxth	r0, r2
1006121e:	2820      	cmp	r0, #32
10061220:	d306      	bcc.n	10061230 <Mem_Buff_cmp+0x24>
10061222:	6836      	ldr	r6, [r6, #0]
10061224:	3a20      	subs	r2, #32
10061226:	0410      	lsls	r0, r2, #16
10061228:	d1f6      	bne.n	10061218 <Mem_Buff_cmp+0xc>
1006122a:	2e00      	cmp	r6, #0
1006122c:	d02a      	beq.n	10061284 <Mem_Buff_cmp+0x78>
1006122e:	2200      	movs	r2, #0
10061230:	2b00      	cmp	r3, #0
10061232:	9301      	str	r3, [sp, #4]
10061234:	d020      	beq.n	10061278 <Mem_Buff_cmp+0x6c>
10061236:	2700      	movs	r7, #0
10061238:	461d      	mov	r5, r3
1006123a:	b290      	uxth	r0, r2
1006123c:	281f      	cmp	r0, #31
1006123e:	d814      	bhi.n	1006126a <Mem_Buff_cmp+0x5e>
10061240:	2120      	movs	r1, #32
10061242:	1a8c      	subs	r4, r1, r2
10061244:	b2a1      	uxth	r1, r4
10061246:	b2aa      	uxth	r2, r5
10061248:	4291      	cmp	r1, r2
1006124a:	d300      	bcc.n	1006124e <Mem_Buff_cmp+0x42>
1006124c:	462c      	mov	r4, r5
1006124e:	b2a2      	uxth	r2, r4
10061250:	b2b9      	uxth	r1, r7
10061252:	9b02      	ldr	r3, [sp, #8]
10061254:	1859      	adds	r1, r3, r1
10061256:	1830      	adds	r0, r6, r0
10061258:	1d00      	adds	r0, r0, #4
1006125a:	f7f1 fc15 	bl	10052a88 <BLEPLAT_MemCmp>
1006125e:	2800      	cmp	r0, #0
10061260:	d10f      	bne.n	10061282 <Mem_Buff_cmp+0x76>
10061262:	1b2d      	subs	r5, r5, r4
10061264:	19e7      	adds	r7, r4, r7
10061266:	2200      	movs	r2, #0
10061268:	e000      	b.n	1006126c <Mem_Buff_cmp+0x60>
1006126a:	3a20      	subs	r2, #32
1006126c:	0428      	lsls	r0, r5, #16
1006126e:	d004      	beq.n	1006127a <Mem_Buff_cmp+0x6e>
10061270:	6836      	ldr	r6, [r6, #0]
10061272:	2e00      	cmp	r6, #0
10061274:	d1e1      	bne.n	1006123a <Mem_Buff_cmp+0x2e>
10061276:	e000      	b.n	1006127a <Mem_Buff_cmp+0x6e>
10061278:	2700      	movs	r7, #0
1006127a:	b2b8      	uxth	r0, r7
1006127c:	9b01      	ldr	r3, [sp, #4]
1006127e:	1a1b      	subs	r3, r3, r0
10061280:	e000      	b.n	10061284 <Mem_Buff_cmp+0x78>
10061282:	4603      	mov	r3, r0
10061284:	4618      	mov	r0, r3
10061286:	b003      	add	sp, #12
10061288:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006128a <Mem_Buff_block_copy>:
1006128a:	b510      	push	{r4, lr}
1006128c:	1e52      	subs	r2, r2, #1
1006128e:	231f      	movs	r3, #31
10061290:	4313      	orrs	r3, r2
10061292:	b29a      	uxth	r2, r3
10061294:	1c53      	adds	r3, r2, #1
10061296:	b29a      	uxth	r2, r3
10061298:	429a      	cmp	r2, r3
1006129a:	d001      	beq.n	100612a0 <Mem_Buff_block_copy+0x16>
1006129c:	2200      	movs	r2, #0
1006129e:	e00d      	b.n	100612bc <Mem_Buff_block_copy+0x32>
100612a0:	0953      	lsrs	r3, r2, #5
100612a2:	460a      	mov	r2, r1
100612a4:	2100      	movs	r1, #0
100612a6:	1854      	adds	r4, r2, r1
100612a8:	6864      	ldr	r4, [r4, #4]
100612aa:	5044      	str	r4, [r0, r1]
100612ac:	1d09      	adds	r1, r1, #4
100612ae:	2920      	cmp	r1, #32
100612b0:	d1f9      	bne.n	100612a6 <Mem_Buff_block_copy+0x1c>
100612b2:	6811      	ldr	r1, [r2, #0]
100612b4:	3020      	adds	r0, #32
100612b6:	1e5b      	subs	r3, r3, #1
100612b8:	041c      	lsls	r4, r3, #16
100612ba:	d1f2      	bne.n	100612a2 <Mem_Buff_block_copy+0x18>
100612bc:	4610      	mov	r0, r2
100612be:	bd10      	pop	{r4, pc}

100612c0 <Mem_Buff_block_write>:
100612c0:	b5b0      	push	{r4, r5, r7, lr}
100612c2:	1e52      	subs	r2, r2, #1
100612c4:	231f      	movs	r3, #31
100612c6:	4313      	orrs	r3, r2
100612c8:	b29a      	uxth	r2, r3
100612ca:	1c53      	adds	r3, r2, #1
100612cc:	b29a      	uxth	r2, r3
100612ce:	429a      	cmp	r2, r3
100612d0:	d10c      	bne.n	100612ec <Mem_Buff_block_write+0x2c>
100612d2:	0952      	lsrs	r2, r2, #5
100612d4:	1d03      	adds	r3, r0, #4
100612d6:	2400      	movs	r4, #0
100612d8:	590d      	ldr	r5, [r1, r4]
100612da:	511d      	str	r5, [r3, r4]
100612dc:	1d24      	adds	r4, r4, #4
100612de:	2c20      	cmp	r4, #32
100612e0:	d1fa      	bne.n	100612d8 <Mem_Buff_block_write+0x18>
100612e2:	6800      	ldr	r0, [r0, #0]
100612e4:	3120      	adds	r1, #32
100612e6:	1e52      	subs	r2, r2, #1
100612e8:	0413      	lsls	r3, r2, #16
100612ea:	d1f3      	bne.n	100612d4 <Mem_Buff_block_write+0x14>
100612ec:	bdb0      	pop	{r4, r5, r7, pc}

100612ee <Mem_Buff_append>:
100612ee:	4602      	mov	r2, r0
100612f0:	6800      	ldr	r0, [r0, #0]
100612f2:	2800      	cmp	r0, #0
100612f4:	d1fb      	bne.n	100612ee <Mem_Buff_append>
100612f6:	6011      	str	r1, [r2, #0]
100612f8:	4770      	bx	lr
	...

100612fc <BlueNRG_Stack_Initialize_RAM_check>:
100612fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100612fe:	b097      	sub	sp, #92	@ 0x5c
10061300:	4ce5      	ldr	r4, [pc, #916]	@ (10061698 <__arm_cp.0_4>)
10061302:	2067      	movs	r0, #103	@ 0x67
10061304:	43c5      	mvns	r5, r0
10061306:	f7ed fe3d 	bl	1004ef84 <conn_supp_csr_ucfg>
1006130a:	4ee4      	ldr	r6, [pc, #912]	@ (1006169c <__arm_cp.0_5>)
1006130c:	2801      	cmp	r0, #1
1006130e:	d002      	beq.n	10061316 <BlueNRG_Stack_Initialize_RAM_check+0x1a>
10061310:	7af0      	ldrb	r0, [r6, #11]
10061312:	2800      	cmp	r0, #0
10061314:	d010      	beq.n	10061338 <BlueNRG_Stack_Initialize_RAM_check+0x3c>
10061316:	4627      	mov	r7, r4
10061318:	462c      	mov	r4, r5
1006131a:	3438      	adds	r4, #56	@ 0x38
1006131c:	f7ed fe32 	bl	1004ef84 <conn_supp_csr_ucfg>
10061320:	7af1      	ldrb	r1, [r6, #11]
10061322:	4361      	muls	r1, r4
10061324:	4378      	muls	r0, r7
10061326:	1838      	adds	r0, r7, r0
10061328:	1844      	adds	r4, r0, r1
1006132a:	f7ed fe2b 	bl	1004ef84 <conn_supp_csr_ucfg>
1006132e:	7af1      	ldrb	r1, [r6, #11]
10061330:	4341      	muls	r1, r0
10061332:	48db      	ldr	r0, [pc, #876]	@ (100616a0 <__arm_cp.0_6>)
10061334:	4348      	muls	r0, r1
10061336:	1824      	adds	r4, r4, r0
10061338:	342e      	adds	r4, #46	@ 0x2e
1006133a:	f7ed fe23 	bl	1004ef84 <conn_supp_csr_ucfg>
1006133e:	2801      	cmp	r0, #1
10061340:	d10e      	bne.n	10061360 <BlueNRG_Stack_Initialize_RAM_check+0x64>
10061342:	4628      	mov	r0, r5
10061344:	3060      	adds	r0, #96	@ 0x60
10061346:	8931      	ldrh	r1, [r6, #8]
10061348:	4341      	muls	r1, r0
1006134a:	4628      	mov	r0, r5
1006134c:	3044      	adds	r0, #68	@ 0x44
1006134e:	7ab2      	ldrb	r2, [r6, #10]
10061350:	4342      	muls	r2, r0
10061352:	1850      	adds	r0, r2, r1
10061354:	4629      	mov	r1, r5
10061356:	3148      	adds	r1, #72	@ 0x48
10061358:	7b32      	ldrb	r2, [r6, #12]
1006135a:	434a      	muls	r2, r1
1006135c:	1880      	adds	r0, r0, r2
1006135e:	e000      	b.n	10061362 <BlueNRG_Stack_Initialize_RAM_check+0x66>
10061360:	2000      	movs	r0, #0
10061362:	9003      	str	r0, [sp, #12]
10061364:	89f0      	ldrh	r0, [r6, #14]
10061366:	900a      	str	r0, [sp, #40]	@ 0x28
10061368:	f7f8 fb0a 	bl	10059980 <data_length_extension_csr_ucfg_weak>
1006136c:	2801      	cmp	r0, #1
1006136e:	d001      	beq.n	10061374 <BlueNRG_Stack_Initialize_RAM_check+0x78>
10061370:	f7fe fe92 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
10061374:	f7ed fdfe 	bl	1004ef74 <phy_upd_csr_ucfg>
10061378:	2801      	cmp	r0, #1
1006137a:	9411      	str	r4, [sp, #68]	@ 0x44
1006137c:	d109      	bne.n	10061392 <BlueNRG_Stack_Initialize_RAM_check+0x96>
1006137e:	462c      	mov	r4, r5
10061380:	3438      	adds	r4, #56	@ 0x38
10061382:	f7ed fdff 	bl	1004ef84 <conn_supp_csr_ucfg>
10061386:	4360      	muls	r0, r4
10061388:	7af1      	ldrb	r1, [r6, #11]
1006138a:	4341      	muls	r1, r0
1006138c:	3908      	subs	r1, #8
1006138e:	9109      	str	r1, [sp, #36]	@ 0x24
10061390:	e001      	b.n	10061396 <BlueNRG_Stack_Initialize_RAM_check+0x9a>
10061392:	2000      	movs	r0, #0
10061394:	9009      	str	r0, [sp, #36]	@ 0x24
10061396:	48f2      	ldr	r0, [pc, #968]	@ (10061760 <__arm_cp.0_3>)
10061398:	304c      	adds	r0, #76	@ 0x4c
1006139a:	9013      	str	r0, [sp, #76]	@ 0x4c
1006139c:	f7fe fe7c 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
100613a0:	2801      	cmp	r0, #1
100613a2:	d015      	beq.n	100613d0 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
100613a4:	f7f8 faec 	bl	10059980 <data_length_extension_csr_ucfg_weak>
100613a8:	2801      	cmp	r0, #1
100613aa:	d011      	beq.n	100613d0 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
100613ac:	2029      	movs	r0, #41	@ 0x29
100613ae:	5c30      	ldrb	r0, [r6, r0]
100613b0:	2800      	cmp	r0, #0
100613b2:	d10d      	bne.n	100613d0 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
100613b4:	2025      	movs	r0, #37	@ 0x25
100613b6:	5c30      	ldrb	r0, [r6, r0]
100613b8:	2800      	cmp	r0, #0
100613ba:	d109      	bne.n	100613d0 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
100613bc:	2026      	movs	r0, #38	@ 0x26
100613be:	5c30      	ldrb	r0, [r6, r0]
100613c0:	2800      	cmp	r0, #0
100613c2:	d002      	beq.n	100613ca <BlueNRG_Stack_Initialize_RAM_check+0xce>
100613c4:	48e6      	ldr	r0, [pc, #920]	@ (10061760 <__arm_cp.0_3>)
100613c6:	304c      	adds	r0, #76	@ 0x4c
100613c8:	e001      	b.n	100613ce <BlueNRG_Stack_Initialize_RAM_check+0xd2>
100613ca:	4628      	mov	r0, r5
100613cc:	3024      	adds	r0, #36	@ 0x24
100613ce:	9013      	str	r0, [sp, #76]	@ 0x4c
100613d0:	48e3      	ldr	r0, [pc, #908]	@ (10061760 <__arm_cp.0_3>)
100613d2:	306c      	adds	r0, #108	@ 0x6c
100613d4:	9012      	str	r0, [sp, #72]	@ 0x48
100613d6:	f7fe fe5f 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
100613da:	2801      	cmp	r0, #1
100613dc:	d015      	beq.n	1006140a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
100613de:	f7f8 facf 	bl	10059980 <data_length_extension_csr_ucfg_weak>
100613e2:	2801      	cmp	r0, #1
100613e4:	d011      	beq.n	1006140a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
100613e6:	2029      	movs	r0, #41	@ 0x29
100613e8:	5c30      	ldrb	r0, [r6, r0]
100613ea:	2800      	cmp	r0, #0
100613ec:	d10d      	bne.n	1006140a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
100613ee:	2025      	movs	r0, #37	@ 0x25
100613f0:	5c30      	ldrb	r0, [r6, r0]
100613f2:	2800      	cmp	r0, #0
100613f4:	d109      	bne.n	1006140a <BlueNRG_Stack_Initialize_RAM_check+0x10e>
100613f6:	2026      	movs	r0, #38	@ 0x26
100613f8:	5c30      	ldrb	r0, [r6, r0]
100613fa:	2800      	cmp	r0, #0
100613fc:	d002      	beq.n	10061404 <BlueNRG_Stack_Initialize_RAM_check+0x108>
100613fe:	48d8      	ldr	r0, [pc, #864]	@ (10061760 <__arm_cp.0_3>)
10061400:	306c      	adds	r0, #108	@ 0x6c
10061402:	e001      	b.n	10061408 <BlueNRG_Stack_Initialize_RAM_check+0x10c>
10061404:	4628      	mov	r0, r5
10061406:	303c      	adds	r0, #60	@ 0x3c
10061408:	9012      	str	r0, [sp, #72]	@ 0x48
1006140a:	f7fe fe45 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
1006140e:	9010      	str	r0, [sp, #64]	@ 0x40
10061410:	7eb0      	ldrb	r0, [r6, #26]
10061412:	9000      	str	r0, [sp, #0]
10061414:	7ff0      	ldrb	r0, [r6, #31]
10061416:	900f      	str	r0, [sp, #60]	@ 0x3c
10061418:	f7ed fdb4 	bl	1004ef84 <conn_supp_csr_ucfg>
1006141c:	9007      	str	r0, [sp, #28]
1006141e:	7ff0      	ldrb	r0, [r6, #31]
10061420:	9001      	str	r0, [sp, #4]
10061422:	f7fa fd04 	bl	1005be2e <llc_priv_controller_privacy_csr_ucfg_weak>
10061426:	9008      	str	r0, [sp, #32]
10061428:	7ff0      	ldrb	r0, [r6, #31]
1006142a:	9002      	str	r0, [sp, #8]
1006142c:	f001 f965 	bl	100626fa <secure_connections_csr_ucfg_weak>
10061430:	2700      	movs	r7, #0
10061432:	f7f8 faab 	bl	1005998c <scan_csr_ucfg_weak>
10061436:	2801      	cmp	r0, #1
10061438:	4638      	mov	r0, r7
1006143a:	9515      	str	r5, [sp, #84]	@ 0x54
1006143c:	9716      	str	r7, [sp, #88]	@ 0x58
1006143e:	d14f      	bne.n	100614e0 <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
10061440:	7f70      	ldrb	r0, [r6, #29]
10061442:	280a      	cmp	r0, #10
10061444:	d300      	bcc.n	10061448 <BlueNRG_Stack_Initialize_RAM_check+0x14c>
10061446:	200a      	movs	r0, #10
10061448:	462c      	mov	r4, r5
1006144a:	3438      	adds	r4, #56	@ 0x38
1006144c:	4344      	muls	r4, r0
1006144e:	3cc0      	subs	r4, #192	@ 0xc0
10061450:	2500      	movs	r5, #0
10061452:	f7fa fce3 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10061456:	2801      	cmp	r0, #1
10061458:	462f      	mov	r7, r5
1006145a:	d120      	bne.n	1006149e <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
1006145c:	f7ed fd92 	bl	1004ef84 <conn_supp_csr_ucfg>
10061460:	2801      	cmp	r0, #1
10061462:	950e      	str	r5, [sp, #56]	@ 0x38
10061464:	d003      	beq.n	1006146e <BlueNRG_Stack_Initialize_RAM_check+0x172>
10061466:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10061468:	4618      	mov	r0, r3
1006146a:	3054      	adds	r0, #84	@ 0x54
1006146c:	e002      	b.n	10061474 <BlueNRG_Stack_Initialize_RAM_check+0x178>
1006146e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10061470:	4618      	mov	r0, r3
10061472:	3048      	adds	r0, #72	@ 0x48
10061474:	49ba      	ldr	r1, [pc, #744]	@ (10061760 <__arm_cp.0_3>)
10061476:	31e4      	adds	r1, #228	@ 0xe4
10061478:	7fb2      	ldrb	r2, [r6, #30]
1006147a:	434a      	muls	r2, r1
1006147c:	1810      	adds	r0, r2, r0
1006147e:	4635      	mov	r5, r6
10061480:	461e      	mov	r6, r3
10061482:	3660      	adds	r6, #96	@ 0x60
10061484:	7fe9      	ldrb	r1, [r5, #31]
10061486:	4632      	mov	r2, r6
10061488:	408a      	lsls	r2, r1
1006148a:	1887      	adds	r7, r0, r2
1006148c:	f7ed fd7a 	bl	1004ef84 <conn_supp_csr_ucfg>
10061490:	2801      	cmp	r0, #1
10061492:	d102      	bne.n	1006149a <BlueNRG_Stack_Initialize_RAM_check+0x19e>
10061494:	7ae8      	ldrb	r0, [r5, #11]
10061496:	4346      	muls	r6, r0
10061498:	19bf      	adds	r7, r7, r6
1006149a:	462e      	mov	r6, r5
1006149c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
1006149e:	19e0      	adds	r0, r4, r7
100614a0:	9014      	str	r0, [sp, #80]	@ 0x50
100614a2:	f7fa fcbd 	bl	1005be20 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100614a6:	4607      	mov	r7, r0
100614a8:	f7fa fcb8 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100614ac:	4604      	mov	r4, r0
100614ae:	403c      	ands	r4, r7
100614b0:	f7ed fd68 	bl	1004ef84 <conn_supp_csr_ucfg>
100614b4:	4020      	ands	r0, r4
100614b6:	2801      	cmp	r0, #1
100614b8:	d108      	bne.n	100614cc <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
100614ba:	7ef0      	ldrb	r0, [r6, #27]
100614bc:	1e40      	subs	r0, r0, #1
100614be:	2103      	movs	r1, #3
100614c0:	4301      	orrs	r1, r0
100614c2:	7fb0      	ldrb	r0, [r6, #30]
100614c4:	22b0      	movs	r2, #176	@ 0xb0
100614c6:	4342      	muls	r2, r0
100614c8:	43d0      	mvns	r0, r2
100614ca:	1a45      	subs	r5, r0, r1
100614cc:	9814      	ldr	r0, [sp, #80]	@ 0x50
100614ce:	1944      	adds	r4, r0, r5
100614d0:	f7fe fde2 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
100614d4:	4360      	muls	r0, r4
100614d6:	49a2      	ldr	r1, [pc, #648]	@ (10061760 <__arm_cp.0_3>)
100614d8:	1808      	adds	r0, r1, r0
100614da:	302c      	adds	r0, #44	@ 0x2c
100614dc:	9d15      	ldr	r5, [sp, #84]	@ 0x54
100614de:	9f16      	ldr	r7, [sp, #88]	@ 0x58
100614e0:	9006      	str	r0, [sp, #24]
100614e2:	f7ed fd4f 	bl	1004ef84 <conn_supp_csr_ucfg>
100614e6:	2801      	cmp	r0, #1
100614e8:	4639      	mov	r1, r7
100614ea:	d109      	bne.n	10061500 <BlueNRG_Stack_Initialize_RAM_check+0x204>
100614ec:	f7f8 fc14 	bl	10059d18 <l2c_cos_csr_ucfg_weak>
100614f0:	2801      	cmp	r0, #1
100614f2:	4639      	mov	r1, r7
100614f4:	d104      	bne.n	10061500 <BlueNRG_Stack_Initialize_RAM_check+0x204>
100614f6:	2022      	movs	r0, #34	@ 0x22
100614f8:	5c30      	ldrb	r0, [r6, r0]
100614fa:	4629      	mov	r1, r5
100614fc:	3114      	adds	r1, #20
100614fe:	4341      	muls	r1, r0
10061500:	9105      	str	r1, [sp, #20]
10061502:	f7fa fc8b 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10061506:	2801      	cmp	r0, #1
10061508:	4638      	mov	r0, r7
1006150a:	d121      	bne.n	10061550 <BlueNRG_Stack_Initialize_RAM_check+0x254>
1006150c:	4894      	ldr	r0, [pc, #592]	@ (10061760 <__arm_cp.0_3>)
1006150e:	30d4      	adds	r0, #212	@ 0xd4
10061510:	7eb1      	ldrb	r1, [r6, #26]
10061512:	4341      	muls	r1, r0
10061514:	4628      	mov	r0, r5
10061516:	3048      	adds	r0, #72	@ 0x48
10061518:	7af2      	ldrb	r2, [r6, #11]
1006151a:	4342      	muls	r2, r0
1006151c:	1854      	adds	r4, r2, r1
1006151e:	2700      	movs	r7, #0
10061520:	f7fa fc7e 	bl	1005be20 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10061524:	2801      	cmp	r0, #1
10061526:	d110      	bne.n	1006154a <BlueNRG_Stack_Initialize_RAM_check+0x24e>
10061528:	f7ed fd2c 	bl	1004ef84 <conn_supp_csr_ucfg>
1006152c:	2801      	cmp	r0, #1
1006152e:	d10c      	bne.n	1006154a <BlueNRG_Stack_Initialize_RAM_check+0x24e>
10061530:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10061532:	4610      	mov	r0, r2
10061534:	3058      	adds	r0, #88	@ 0x58
10061536:	7f31      	ldrb	r1, [r6, #28]
10061538:	4341      	muls	r1, r0
1006153a:	4610      	mov	r0, r2
1006153c:	3060      	adds	r0, #96	@ 0x60
1006153e:	7ef2      	ldrb	r2, [r6, #27]
10061540:	4342      	muls	r2, r0
10061542:	1850      	adds	r0, r2, r1
10061544:	3884      	subs	r0, #132	@ 0x84
10061546:	7eb7      	ldrb	r7, [r6, #26]
10061548:	4347      	muls	r7, r0
1006154a:	19e0      	adds	r0, r4, r7
1006154c:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1006154e:	9f16      	ldr	r7, [sp, #88]	@ 0x58
10061550:	900e      	str	r0, [sp, #56]	@ 0x38
10061552:	f7f8 f9b9 	bl	100598c8 <cte_csr_ucfg_weak>
10061556:	2801      	cmp	r0, #1
10061558:	4638      	mov	r0, r7
1006155a:	d133      	bne.n	100615c4 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
1006155c:	f7ed fd12 	bl	1004ef84 <conn_supp_csr_ucfg>
10061560:	2801      	cmp	r0, #1
10061562:	d002      	beq.n	1006156a <BlueNRG_Stack_Initialize_RAM_check+0x26e>
10061564:	462f      	mov	r7, r5
10061566:	375c      	adds	r7, #92	@ 0x5c
10061568:	e004      	b.n	10061574 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1006156a:	4628      	mov	r0, r5
1006156c:	3060      	adds	r0, #96	@ 0x60
1006156e:	7af7      	ldrb	r7, [r6, #11]
10061570:	4347      	muls	r7, r0
10061572:	3f0c      	subs	r7, #12
10061574:	2523      	movs	r5, #35	@ 0x23
10061576:	5d70      	ldrb	r0, [r6, r5]
10061578:	2400      	movs	r4, #0
1006157a:	2800      	cmp	r0, #0
1006157c:	4620      	mov	r0, r4
1006157e:	d005      	beq.n	1006158c <BlueNRG_Stack_Initialize_RAM_check+0x290>
10061580:	f7ed fd00 	bl	1004ef84 <conn_supp_csr_ucfg>
10061584:	5d70      	ldrb	r0, [r6, r5]
10061586:	4240      	negs	r0, r0
10061588:	2103      	movs	r1, #3
1006158a:	4388      	bics	r0, r1
1006158c:	19c0      	adds	r0, r0, r7
1006158e:	2724      	movs	r7, #36	@ 0x24
10061590:	5df1      	ldrb	r1, [r6, r7]
10061592:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10061594:	3264      	adds	r2, #100	@ 0x64
10061596:	434a      	muls	r2, r1
10061598:	1885      	adds	r5, r0, r2
1006159a:	f7f8 f9f7 	bl	1005998c <scan_csr_ucfg_weak>
1006159e:	2801      	cmp	r0, #1
100615a0:	d10d      	bne.n	100615be <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100615a2:	f7fe fd79 	bl	10060098 <ext_adv_scan_enabled_ucfg_weak>
100615a6:	2801      	cmp	r0, #1
100615a8:	d109      	bne.n	100615be <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100615aa:	f7fa fc37 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100615ae:	2801      	cmp	r0, #1
100615b0:	d105      	bne.n	100615be <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100615b2:	5df4      	ldrb	r4, [r6, r7]
100615b4:	2c00      	cmp	r4, #0
100615b6:	9815      	ldr	r0, [sp, #84]	@ 0x54
100615b8:	d001      	beq.n	100615be <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100615ba:	4604      	mov	r4, r0
100615bc:	3450      	adds	r4, #80	@ 0x50
100615be:	1928      	adds	r0, r5, r4
100615c0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
100615c2:	9f16      	ldr	r7, [sp, #88]	@ 0x58
100615c4:	900d      	str	r0, [sp, #52]	@ 0x34
100615c6:	f7ed fcdd 	bl	1004ef84 <conn_supp_csr_ucfg>
100615ca:	2801      	cmp	r0, #1
100615cc:	4639      	mov	r1, r7
100615ce:	d109      	bne.n	100615e4 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
100615d0:	f7f8 f9d8 	bl	10059984 <pcl_csr_ucfg_weak>
100615d4:	2801      	cmp	r0, #1
100615d6:	4639      	mov	r1, r7
100615d8:	d104      	bne.n	100615e4 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
100615da:	4628      	mov	r0, r5
100615dc:	3048      	adds	r0, #72	@ 0x48
100615de:	7af1      	ldrb	r1, [r6, #11]
100615e0:	4341      	muls	r1, r0
100615e2:	3914      	subs	r1, #20
100615e4:	910c      	str	r1, [sp, #48]	@ 0x30
100615e6:	f7ed fccd 	bl	1004ef84 <conn_supp_csr_ucfg>
100615ea:	2801      	cmp	r0, #1
100615ec:	463a      	mov	r2, r7
100615ee:	d108      	bne.n	10061602 <BlueNRG_Stack_Initialize_RAM_check+0x306>
100615f0:	f7f8 f875 	bl	100596de <chc_csr_ucfg_weak>
100615f4:	2801      	cmp	r0, #1
100615f6:	463a      	mov	r2, r7
100615f8:	d103      	bne.n	10061602 <BlueNRG_Stack_Initialize_RAM_check+0x306>
100615fa:	4628      	mov	r0, r5
100615fc:	304c      	adds	r0, #76	@ 0x4c
100615fe:	7af2      	ldrb	r2, [r6, #11]
10061600:	4342      	muls	r2, r0
10061602:	2026      	movs	r0, #38	@ 0x26
10061604:	5c31      	ldrb	r1, [r6, r0]
10061606:	2025      	movs	r0, #37	@ 0x25
10061608:	5c34      	ldrb	r4, [r6, r0]
1006160a:	1863      	adds	r3, r4, r1
1006160c:	2029      	movs	r0, #41	@ 0x29
1006160e:	5c30      	ldrb	r0, [r6, r0]
10061610:	9304      	str	r3, [sp, #16]
10061612:	2b00      	cmp	r3, #0
10061614:	9014      	str	r0, [sp, #80]	@ 0x50
10061616:	d010      	beq.n	1006163a <BlueNRG_Stack_Initialize_RAM_check+0x33e>
10061618:	2028      	movs	r0, #40	@ 0x28
1006161a:	5c33      	ldrb	r3, [r6, r0]
1006161c:	4628      	mov	r0, r5
1006161e:	3060      	adds	r0, #96	@ 0x60
10061620:	4358      	muls	r0, r3
10061622:	38f8      	subs	r0, #248	@ 0xf8
10061624:	4348      	muls	r0, r1
10061626:	2327      	movs	r3, #39	@ 0x27
10061628:	5cf3      	ldrb	r3, [r6, r3]
1006162a:	3554      	adds	r5, #84	@ 0x54
1006162c:	435d      	muls	r5, r3
1006162e:	4b4c      	ldr	r3, [pc, #304]	@ (10061760 <__arm_cp.0_3>)
10061630:	195b      	adds	r3, r3, r5
10061632:	3348      	adds	r3, #72	@ 0x48
10061634:	4363      	muls	r3, r4
10061636:	181f      	adds	r7, r3, r0
10061638:	9814      	ldr	r0, [sp, #80]	@ 0x50
1006163a:	2800      	cmp	r0, #0
1006163c:	9716      	str	r7, [sp, #88]	@ 0x58
1006163e:	920b      	str	r2, [sp, #44]	@ 0x2c
10061640:	d00d      	beq.n	1006165e <BlueNRG_Stack_Initialize_RAM_check+0x362>
10061642:	4602      	mov	r2, r0
10061644:	202a      	movs	r0, #42	@ 0x2a
10061646:	5c30      	ldrb	r0, [r6, r0]
10061648:	4d45      	ldr	r5, [pc, #276]	@ (10061760 <__arm_cp.0_3>)
1006164a:	462b      	mov	r3, r5
1006164c:	33b0      	adds	r3, #176	@ 0xb0
1006164e:	4343      	muls	r3, r0
10061650:	4637      	mov	r7, r6
10061652:	462e      	mov	r6, r5
10061654:	36c8      	adds	r6, #200	@ 0xc8
10061656:	4356      	muls	r6, r2
10061658:	18f3      	adds	r3, r6, r3
1006165a:	3b48      	subs	r3, #72	@ 0x48
1006165c:	e003      	b.n	10061666 <BlueNRG_Stack_Initialize_RAM_check+0x36a>
1006165e:	202a      	movs	r0, #42	@ 0x2a
10061660:	5c30      	ldrb	r0, [r6, r0]
10061662:	2300      	movs	r3, #0
10061664:	4637      	mov	r7, r6
10061666:	2628      	movs	r6, #40	@ 0x28
10061668:	5dbe      	ldrb	r6, [r7, r6]
1006166a:	4371      	muls	r1, r6
1006166c:	1809      	adds	r1, r1, r0
1006166e:	2627      	movs	r6, #39	@ 0x27
10061670:	463d      	mov	r5, r7
10061672:	5dbe      	ldrb	r6, [r7, r6]
10061674:	4374      	muls	r4, r6
10061676:	1824      	adds	r4, r4, r0
10061678:	1860      	adds	r0, r4, r1
1006167a:	d013      	beq.n	100616a4 <__arm_cp.0_6+0x4>
1006167c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
1006167e:	463e      	mov	r6, r7
10061680:	364c      	adds	r6, #76	@ 0x4c
10061682:	4366      	muls	r6, r4
10061684:	463c      	mov	r4, r7
10061686:	3434      	adds	r4, #52	@ 0x34
10061688:	434c      	muls	r4, r1
1006168a:	19a1      	adds	r1, r4, r6
1006168c:	463c      	mov	r4, r7
1006168e:	345c      	adds	r4, #92	@ 0x5c
10061690:	4344      	muls	r4, r0
10061692:	190c      	adds	r4, r1, r4
10061694:	3c14      	subs	r4, #20
10061696:	e007      	b.n	100616a8 <__arm_cp.0_6+0x8>

10061698 <__arm_cp.0_4>:
10061698:	fffffc00 	.word	0xfffffc00

1006169c <__arm_cp.0_5>:
1006169c:	2000247c 	.word	0x2000247c

100616a0 <__arm_cp.0_6>:
100616a0:	fffffd70 	.word	0xfffffd70
100616a4:	2400      	movs	r4, #0
100616a6:	9f15      	ldr	r7, [sp, #84]	@ 0x54
100616a8:	9903      	ldr	r1, [sp, #12]
100616aa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100616ac:	9811      	ldr	r0, [sp, #68]	@ 0x44
100616ae:	1808      	adds	r0, r1, r0
100616b0:	4639      	mov	r1, r7
100616b2:	3144      	adds	r1, #68	@ 0x44
100616b4:	4371      	muls	r1, r6
100616b6:	1840      	adds	r0, r0, r1
100616b8:	9909      	ldr	r1, [sp, #36]	@ 0x24
100616ba:	1840      	adds	r0, r0, r1
100616bc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
100616be:	1840      	adds	r0, r0, r1
100616c0:	9912      	ldr	r1, [sp, #72]	@ 0x48
100616c2:	1841      	adds	r1, r0, r1
100616c4:	4638      	mov	r0, r7
100616c6:	3060      	adds	r0, #96	@ 0x60
100616c8:	4606      	mov	r6, r0
100616ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
100616cc:	4096      	lsls	r6, r2
100616ce:	1989      	adds	r1, r1, r6
100616d0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
100616d2:	2a01      	cmp	r2, #1
100616d4:	d106      	bne.n	100616e4 <__arm_cp.0_6+0x44>
100616d6:	4e22      	ldr	r6, [pc, #136]	@ (10061760 <__arm_cp.0_3>)
100616d8:	9a00      	ldr	r2, [sp, #0]
100616da:	4356      	muls	r6, r2
100616dc:	1871      	adds	r1, r6, r1
100616de:	2645      	movs	r6, #69	@ 0x45
100616e0:	00b6      	lsls	r6, r6, #2
100616e2:	1989      	adds	r1, r1, r6
100616e4:	462e      	mov	r6, r5
100616e6:	9d07      	ldr	r5, [sp, #28]
100616e8:	9a05      	ldr	r2, [sp, #20]
100616ea:	2d01      	cmp	r5, #1
100616ec:	d102      	bne.n	100616f4 <__arm_cp.0_6+0x54>
100616ee:	9d01      	ldr	r5, [sp, #4]
100616f0:	40a8      	lsls	r0, r5
100616f2:	1809      	adds	r1, r1, r0
100616f4:	9808      	ldr	r0, [sp, #32]
100616f6:	2801      	cmp	r0, #1
100616f8:	d105      	bne.n	10061706 <__arm_cp.0_6+0x66>
100616fa:	4638      	mov	r0, r7
100616fc:	3018      	adds	r0, #24
100616fe:	9d02      	ldr	r5, [sp, #8]
10061700:	40a8      	lsls	r0, r5
10061702:	1841      	adds	r1, r0, r1
10061704:	3970      	subs	r1, #112	@ 0x70
10061706:	9806      	ldr	r0, [sp, #24]
10061708:	9d04      	ldr	r5, [sp, #16]
1006170a:	1808      	adds	r0, r1, r0
1006170c:	1880      	adds	r0, r0, r2
1006170e:	990e      	ldr	r1, [sp, #56]	@ 0x38
10061710:	1840      	adds	r0, r0, r1
10061712:	990d      	ldr	r1, [sp, #52]	@ 0x34
10061714:	1840      	adds	r0, r0, r1
10061716:	990c      	ldr	r1, [sp, #48]	@ 0x30
10061718:	1840      	adds	r0, r0, r1
1006171a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1006171c:	1840      	adds	r0, r0, r1
1006171e:	9914      	ldr	r1, [sp, #80]	@ 0x50
10061720:	42cd      	cmn	r5, r1
10061722:	d001      	beq.n	10061728 <__arm_cp.0_6+0x88>
10061724:	1838      	adds	r0, r7, r0
10061726:	3058      	adds	r0, #88	@ 0x58
10061728:	9916      	ldr	r1, [sp, #88]	@ 0x58
1006172a:	1840      	adds	r0, r0, r1
1006172c:	18c0      	adds	r0, r0, r3
1006172e:	1904      	adds	r4, r0, r4
10061730:	f7f3 fed3 	bl	100554da <log_csr_ucfg_weak>
10061734:	2801      	cmp	r0, #1
10061736:	d100      	bne.n	1006173a <__arm_cp.0_6+0x9a>
10061738:	19e4      	adds	r4, r4, r7
1006173a:	6870      	ldr	r0, [r6, #4]
1006173c:	1820      	adds	r0, r4, r0
1006173e:	2103      	movs	r1, #3
10061740:	43c9      	mvns	r1, r1
10061742:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
10061744:	1cd2      	adds	r2, r2, #3
10061746:	400a      	ands	r2, r1
10061748:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1006174a:	1cdb      	adds	r3, r3, #3
1006174c:	400b      	ands	r3, r1
1006174e:	189a      	adds	r2, r3, r2
10061750:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
10061752:	1cdb      	adds	r3, r3, #3
10061754:	400b      	ands	r3, r1
10061756:	18d1      	adds	r1, r2, r3
10061758:	1a40      	subs	r0, r0, r1
1006175a:	b017      	add	sp, #92	@ 0x5c
1006175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006175e:	46c0      	nop			@ (mov r8, r8)

10061760 <__arm_cp.0_3>:
10061760:	fffffe90 	.word	0xfffffe90

10061764 <sdb_sap_get_security_records_count>:
10061764:	b580      	push	{r7, lr}
10061766:	f001 f996 	bl	10062a96 <nvm_sec_db_get_record_count>
1006176a:	bd80      	pop	{r7, pc}

1006176c <sdb_sap_add_security_record>:
1006176c:	b5b0      	push	{r4, r5, r7, lr}
1006176e:	b094      	sub	sp, #80	@ 0x50
10061770:	4604      	mov	r4, r0
10061772:	7841      	ldrb	r1, [r0, #1]
10061774:	2501      	movs	r5, #1
10061776:	4029      	ands	r1, r5
10061778:	303e      	adds	r0, #62	@ 0x3e
1006177a:	466a      	mov	r2, sp
1006177c:	f000 f819 	bl	100617b2 <sdb_sap_read_security_record>
10061780:	2800      	cmp	r0, #0
10061782:	d10c      	bne.n	1006179e <sdb_sap_add_security_record+0x32>
10061784:	4669      	mov	r1, sp
10061786:	2250      	movs	r2, #80	@ 0x50
10061788:	4620      	mov	r0, r4
1006178a:	f7f1 f97d 	bl	10052a88 <BLEPLAT_MemCmp>
1006178e:	2800      	cmp	r0, #0
10061790:	d008      	beq.n	100617a4 <sdb_sap_add_security_record+0x38>
10061792:	4669      	mov	r1, sp
10061794:	7848      	ldrb	r0, [r1, #1]
10061796:	4028      	ands	r0, r5
10061798:	313e      	adds	r1, #62	@ 0x3e
1006179a:	f000 f83b 	bl	10061814 <sdb_remove_security_record_by_address>
1006179e:	7860      	ldrb	r0, [r4, #1]
100617a0:	2810      	cmp	r0, #16
100617a2:	d201      	bcs.n	100617a8 <sdb_sap_add_security_record+0x3c>
100617a4:	2000      	movs	r0, #0
100617a6:	e002      	b.n	100617ae <sdb_sap_add_security_record+0x42>
100617a8:	4620      	mov	r0, r4
100617aa:	f001 f969 	bl	10062a80 <nvm_sec_db_add_record>
100617ae:	b014      	add	sp, #80	@ 0x50
100617b0:	bdb0      	pop	{r4, r5, r7, pc}

100617b2 <sdb_sap_read_security_record>:
100617b2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100617b4:	4614      	mov	r4, r2
100617b6:	4606      	mov	r6, r0
100617b8:	2501      	movs	r5, #1
100617ba:	9102      	str	r1, [sp, #8]
100617bc:	2901      	cmp	r1, #1
100617be:	d105      	bne.n	100617cc <sdb_sap_read_security_record+0x1a>
100617c0:	7970      	ldrb	r0, [r6, #5]
100617c2:	21c0      	movs	r1, #192	@ 0xc0
100617c4:	4001      	ands	r1, r0
100617c6:	2940      	cmp	r1, #64	@ 0x40
100617c8:	d100      	bne.n	100617cc <sdb_sap_read_security_record+0x1a>
100617ca:	2500      	movs	r5, #0
100617cc:	f001 f940 	bl	10062a50 <nvm_sec_db_read_init>
100617d0:	4620      	mov	r0, r4
100617d2:	303e      	adds	r0, #62	@ 0x3e
100617d4:	9001      	str	r0, [sp, #4]
100617d6:	4627      	mov	r7, r4
100617d8:	371e      	adds	r7, #30
100617da:	4620      	mov	r0, r4
100617dc:	f001 f93e 	bl	10062a5c <nvm_sec_db_read_next_record>
100617e0:	2800      	cmp	r0, #0
100617e2:	d115      	bne.n	10061810 <sdb_sap_read_security_record+0x5e>
100617e4:	2d00      	cmp	r5, #0
100617e6:	d00b      	beq.n	10061800 <sdb_sap_read_security_record+0x4e>
100617e8:	7860      	ldrb	r0, [r4, #1]
100617ea:	2101      	movs	r1, #1
100617ec:	4001      	ands	r1, r0
100617ee:	9802      	ldr	r0, [sp, #8]
100617f0:	4281      	cmp	r1, r0
100617f2:	d1f2      	bne.n	100617da <sdb_sap_read_security_record+0x28>
100617f4:	2206      	movs	r2, #6
100617f6:	9801      	ldr	r0, [sp, #4]
100617f8:	4631      	mov	r1, r6
100617fa:	f7f1 f945 	bl	10052a88 <BLEPLAT_MemCmp>
100617fe:	e003      	b.n	10061808 <sdb_sap_read_security_record+0x56>
10061800:	4630      	mov	r0, r6
10061802:	4639      	mov	r1, r7
10061804:	f000 f980 	bl	10061b08 <smp_sap_crt_resolve_rpa>
10061808:	2800      	cmp	r0, #0
1006180a:	d1e6      	bne.n	100617da <sdb_sap_read_security_record+0x28>
1006180c:	2000      	movs	r0, #0
1006180e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10061810:	20b3      	movs	r0, #179	@ 0xb3
10061812:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061814 <sdb_remove_security_record_by_address>:
10061814:	b5f0      	push	{r4, r5, r6, r7, lr}
10061816:	b095      	sub	sp, #84	@ 0x54
10061818:	460c      	mov	r4, r1
1006181a:	4605      	mov	r5, r0
1006181c:	f001 f918 	bl	10062a50 <nvm_sec_db_read_init>
10061820:	ae01      	add	r6, sp, #4
10061822:	363e      	adds	r6, #62	@ 0x3e
10061824:	27b3      	movs	r7, #179	@ 0xb3
10061826:	a801      	add	r0, sp, #4
10061828:	f001 f918 	bl	10062a5c <nvm_sec_db_read_next_record>
1006182c:	2800      	cmp	r0, #0
1006182e:	d110      	bne.n	10061852 <sdb_remove_security_record_by_address+0x3e>
10061830:	2206      	movs	r2, #6
10061832:	4630      	mov	r0, r6
10061834:	4621      	mov	r1, r4
10061836:	f7f1 f927 	bl	10052a88 <BLEPLAT_MemCmp>
1006183a:	a901      	add	r1, sp, #4
1006183c:	7849      	ldrb	r1, [r1, #1]
1006183e:	2201      	movs	r2, #1
10061840:	400a      	ands	r2, r1
10061842:	42aa      	cmp	r2, r5
10061844:	d1ef      	bne.n	10061826 <sdb_remove_security_record_by_address+0x12>
10061846:	2800      	cmp	r0, #0
10061848:	d1ed      	bne.n	10061826 <sdb_remove_security_record_by_address+0x12>
1006184a:	f001 f937 	bl	10062abc <nvm_discard_current_record>
1006184e:	2700      	movs	r7, #0
10061850:	e7e9      	b.n	10061826 <sdb_remove_security_record_by_address+0x12>
10061852:	b2f8      	uxtb	r0, r7
10061854:	b015      	add	sp, #84	@ 0x54
10061856:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061858 <sdb_sap_read_security_record_sequential>:
10061858:	b5b0      	push	{r4, r5, r7, lr}
1006185a:	4604      	mov	r4, r0
1006185c:	4d07      	ldr	r5, [pc, #28]	@ (1006187c <__arm_cp.5_0>)
1006185e:	7828      	ldrb	r0, [r5, #0]
10061860:	2800      	cmp	r0, #0
10061862:	d103      	bne.n	1006186c <sdb_sap_read_security_record_sequential+0x14>
10061864:	f001 f8f4 	bl	10062a50 <nvm_sec_db_read_init>
10061868:	2001      	movs	r0, #1
1006186a:	7028      	strb	r0, [r5, #0]
1006186c:	4620      	mov	r0, r4
1006186e:	f001 f8f5 	bl	10062a5c <nvm_sec_db_read_next_record>
10061872:	2800      	cmp	r0, #0
10061874:	d001      	beq.n	1006187a <sdb_sap_read_security_record_sequential+0x22>
10061876:	2100      	movs	r1, #0
10061878:	7029      	strb	r1, [r5, #0]
1006187a:	bdb0      	pop	{r4, r5, r7, pc}

1006187c <__arm_cp.5_0>:
1006187c:	200024b0 	.word	0x200024b0

10061880 <sdb_sap_del_bonded_device>:
10061880:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10061882:	460d      	mov	r5, r1
10061884:	4604      	mov	r4, r0
10061886:	aa01      	add	r2, sp, #4
10061888:	4608      	mov	r0, r1
1006188a:	4621      	mov	r1, r4
1006188c:	f000 f87f 	bl	1006198e <sdb_gatt_search_record>
10061890:	2800      	cmp	r0, #0
10061892:	d101      	bne.n	10061898 <sdb_sap_del_bonded_device+0x18>
10061894:	f001 f912 	bl	10062abc <nvm_discard_current_record>
10061898:	4628      	mov	r0, r5
1006189a:	4621      	mov	r1, r4
1006189c:	f7ff ffba 	bl	10061814 <sdb_remove_security_record_by_address>
100618a0:	b004      	add	sp, #16
100618a2:	bdb0      	pop	{r4, r5, r7, pc}

100618a4 <sdb_sap_read_security_record_matching>:
100618a4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100618a6:	4614      	mov	r4, r2
100618a8:	9101      	str	r1, [sp, #4]
100618aa:	4606      	mov	r6, r0
100618ac:	f001 f8d0 	bl	10062a50 <nvm_sec_db_read_init>
100618b0:	4627      	mov	r7, r4
100618b2:	3744      	adds	r7, #68	@ 0x44
100618b4:	4620      	mov	r0, r4
100618b6:	f001 f8d1 	bl	10062a5c <nvm_sec_db_read_next_record>
100618ba:	2800      	cmp	r0, #0
100618bc:	d111      	bne.n	100618e2 <sdb_sap_read_security_record_matching+0x3e>
100618be:	7860      	ldrb	r0, [r4, #1]
100618c0:	06c0      	lsls	r0, r0, #27
100618c2:	d5f7      	bpl.n	100618b4 <sdb_sap_read_security_record_matching+0x10>
100618c4:	ad02      	add	r5, sp, #8
100618c6:	4638      	mov	r0, r7
100618c8:	9901      	ldr	r1, [sp, #4]
100618ca:	462a      	mov	r2, r5
100618cc:	f000 f87a 	bl	100619c4 <smp_sap_crt_generate_ediv>
100618d0:	2202      	movs	r2, #2
100618d2:	4628      	mov	r0, r5
100618d4:	4631      	mov	r1, r6
100618d6:	f7f1 f8d7 	bl	10052a88 <BLEPLAT_MemCmp>
100618da:	2800      	cmp	r0, #0
100618dc:	d1ea      	bne.n	100618b4 <sdb_sap_read_security_record_matching+0x10>
100618de:	2000      	movs	r0, #0
100618e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100618e2:	2081      	movs	r0, #129	@ 0x81
100618e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100618e6 <SDB_sap_write_peer_bonded_gatt_client_data>:
100618e6:	b5f0      	push	{r4, r5, r6, r7, lr}
100618e8:	b085      	sub	sp, #20
100618ea:	461e      	mov	r6, r3
100618ec:	4617      	mov	r7, r2
100618ee:	460d      	mov	r5, r1
100618f0:	4604      	mov	r4, r0
100618f2:	aa02      	add	r2, sp, #8
100618f4:	4608      	mov	r0, r1
100618f6:	4621      	mov	r1, r4
100618f8:	f000 f849 	bl	1006198e <sdb_gatt_search_record>
100618fc:	2800      	cmp	r0, #0
100618fe:	d10b      	bne.n	10061918 <SDB_sap_write_peer_bonded_gatt_client_data+0x32>
10061900:	9804      	ldr	r0, [sp, #16]
10061902:	42b8      	cmp	r0, r7
10061904:	d106      	bne.n	10061914 <SDB_sap_write_peer_bonded_gatt_client_data+0x2e>
10061906:	b2ba      	uxth	r2, r7
10061908:	200c      	movs	r0, #12
1006190a:	4631      	mov	r1, r6
1006190c:	f7f1 f84c 	bl	100529a8 <BLEPLAT_NvmCompare>
10061910:	2800      	cmp	r0, #0
10061912:	d016      	beq.n	10061942 <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
10061914:	f001 f8d2 	bl	10062abc <nvm_discard_current_record>
10061918:	9601      	str	r6, [sp, #4]
1006191a:	ae02      	add	r6, sp, #8
1006191c:	7035      	strb	r5, [r6, #0]
1006191e:	1c70      	adds	r0, r6, #1
10061920:	2206      	movs	r2, #6
10061922:	4621      	mov	r1, r4
10061924:	f7f1 f890 	bl	10052a48 <BLEPLAT_MemCpy>
10061928:	9704      	str	r7, [sp, #16]
1006192a:	4630      	mov	r0, r6
1006192c:	9901      	ldr	r1, [sp, #4]
1006192e:	f001 f882 	bl	10062a36 <nvm_gatt_db_update_record>
10061932:	2800      	cmp	r0, #0
10061934:	d005      	beq.n	10061942 <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
10061936:	4606      	mov	r6, r0
10061938:	4628      	mov	r0, r5
1006193a:	4621      	mov	r1, r4
1006193c:	f7ff ff6a 	bl	10061814 <sdb_remove_security_record_by_address>
10061940:	e000      	b.n	10061944 <SDB_sap_write_peer_bonded_gatt_client_data+0x5e>
10061942:	2600      	movs	r6, #0
10061944:	4630      	mov	r0, r6
10061946:	b005      	add	sp, #20
10061948:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006194a <SDB_sap_read_peer_bonded_gatt_client_data>:
1006194a:	b5b0      	push	{r4, r5, r7, lr}
1006194c:	b098      	sub	sp, #96	@ 0x60
1006194e:	461c      	mov	r4, r3
10061950:	4615      	mov	r5, r2
10061952:	aa01      	add	r2, sp, #4
10061954:	f7ff ff2d 	bl	100617b2 <sdb_sap_read_security_record>
10061958:	2800      	cmp	r0, #0
1006195a:	d116      	bne.n	1006198a <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
1006195c:	a901      	add	r1, sp, #4
1006195e:	784a      	ldrb	r2, [r1, #1]
10061960:	2001      	movs	r0, #1
10061962:	4010      	ands	r0, r2
10061964:	313e      	adds	r1, #62	@ 0x3e
10061966:	aa15      	add	r2, sp, #84	@ 0x54
10061968:	f000 f811 	bl	1006198e <sdb_gatt_search_record>
1006196c:	2800      	cmp	r0, #0
1006196e:	d001      	beq.n	10061974 <SDB_sap_read_peer_bonded_gatt_client_data+0x2a>
10061970:	20b3      	movs	r0, #179	@ 0xb3
10061972:	e00a      	b.n	1006198a <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10061974:	6829      	ldr	r1, [r5, #0]
10061976:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10061978:	4288      	cmp	r0, r1
1006197a:	d901      	bls.n	10061980 <SDB_sap_read_peer_bonded_gatt_client_data+0x36>
1006197c:	2087      	movs	r0, #135	@ 0x87
1006197e:	e004      	b.n	1006198a <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10061980:	6028      	str	r0, [r5, #0]
10061982:	b281      	uxth	r1, r0
10061984:	4620      	mov	r0, r4
10061986:	f001 f84b 	bl	10062a20 <nvm_gatt_db_read_full_current_record>
1006198a:	b018      	add	sp, #96	@ 0x60
1006198c:	bdb0      	pop	{r4, r5, r7, pc}

1006198e <sdb_gatt_search_record>:
1006198e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061990:	4614      	mov	r4, r2
10061992:	460d      	mov	r5, r1
10061994:	4606      	mov	r6, r0
10061996:	f001 f81d 	bl	100629d4 <nvm_gatt_db_read_init>
1006199a:	1c67      	adds	r7, r4, #1
1006199c:	4620      	mov	r0, r4
1006199e:	f001 f81f 	bl	100629e0 <nvm_gatt_db_read_next_record>
100619a2:	2800      	cmp	r0, #0
100619a4:	d10b      	bne.n	100619be <sdb_gatt_search_record+0x30>
100619a6:	2206      	movs	r2, #6
100619a8:	4628      	mov	r0, r5
100619aa:	4639      	mov	r1, r7
100619ac:	f7f1 f86c 	bl	10052a88 <BLEPLAT_MemCmp>
100619b0:	2800      	cmp	r0, #0
100619b2:	d1f3      	bne.n	1006199c <sdb_gatt_search_record+0xe>
100619b4:	7820      	ldrb	r0, [r4, #0]
100619b6:	42b0      	cmp	r0, r6
100619b8:	d1f0      	bne.n	1006199c <sdb_gatt_search_record+0xe>
100619ba:	2000      	movs	r0, #0
100619bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100619be:	20b3      	movs	r0, #179	@ 0xb3
100619c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100619c4 <smp_sap_crt_generate_ediv>:
100619c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100619c6:	b091      	sub	sp, #68	@ 0x44
100619c8:	9201      	str	r2, [sp, #4]
100619ca:	9100      	str	r1, [sp, #0]
100619cc:	4605      	mov	r5, r0
100619ce:	a908      	add	r1, sp, #32
100619d0:	2003      	movs	r0, #3
100619d2:	8008      	strh	r0, [r1, #0]
100619d4:	aa07      	add	r2, sp, #28
100619d6:	2400      	movs	r4, #0
100619d8:	8014      	strh	r4, [r2, #0]
100619da:	4814      	ldr	r0, [pc, #80]	@ (10061a2c <__arm_cp.0_0>)
100619dc:	6800      	ldr	r0, [r0, #0]
100619de:	3018      	adds	r0, #24
100619e0:	af03      	add	r7, sp, #12
100619e2:	463b      	mov	r3, r7
100619e4:	f000 f824 	bl	10061a30 <smp_crt_diversify>
100619e8:	ae0d      	add	r6, sp, #52	@ 0x34
100619ea:	2210      	movs	r2, #16
100619ec:	4630      	mov	r0, r6
100619ee:	4621      	mov	r1, r4
100619f0:	f7f1 f83a 	bl	10052a68 <BLEPLAT_MemSet>
100619f4:	2208      	movs	r2, #8
100619f6:	4630      	mov	r0, r6
100619f8:	9900      	ldr	r1, [sp, #0]
100619fa:	f7f1 f825 	bl	10052a48 <BLEPLAT_MemCpy>
100619fe:	ac09      	add	r4, sp, #36	@ 0x24
10061a00:	4638      	mov	r0, r7
10061a02:	4631      	mov	r1, r6
10061a04:	4622      	mov	r2, r4
10061a06:	f7f7 ff61 	bl	100598cc <hci_le_encrypt>
10061a0a:	ae02      	add	r6, sp, #8
10061a0c:	2202      	movs	r2, #2
10061a0e:	4630      	mov	r0, r6
10061a10:	4621      	mov	r1, r4
10061a12:	f7f1 f819 	bl	10052a48 <BLEPLAT_MemCpy>
10061a16:	7828      	ldrb	r0, [r5, #0]
10061a18:	9902      	ldr	r1, [sp, #8]
10061a1a:	4041      	eors	r1, r0
10061a1c:	9a01      	ldr	r2, [sp, #4]
10061a1e:	7011      	strb	r1, [r2, #0]
10061a20:	7870      	ldrb	r0, [r6, #1]
10061a22:	7869      	ldrb	r1, [r5, #1]
10061a24:	4041      	eors	r1, r0
10061a26:	7051      	strb	r1, [r2, #1]
10061a28:	b011      	add	sp, #68	@ 0x44
10061a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061a2c <__arm_cp.0_0>:
10061a2c:	20002414 	.word	0x20002414

10061a30 <smp_crt_diversify>:
10061a30:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10061a32:	780d      	ldrb	r5, [r1, #0]
10061a34:	466c      	mov	r4, sp
10061a36:	7025      	strb	r5, [r4, #0]
10061a38:	7849      	ldrb	r1, [r1, #1]
10061a3a:	7061      	strb	r1, [r4, #1]
10061a3c:	7811      	ldrb	r1, [r2, #0]
10061a3e:	70a1      	strb	r1, [r4, #2]
10061a40:	7851      	ldrb	r1, [r2, #1]
10061a42:	70e1      	strb	r1, [r4, #3]
10061a44:	2100      	movs	r1, #0
10061a46:	9103      	str	r1, [sp, #12]
10061a48:	9102      	str	r1, [sp, #8]
10061a4a:	9101      	str	r1, [sp, #4]
10061a4c:	4621      	mov	r1, r4
10061a4e:	461a      	mov	r2, r3
10061a50:	f7f7 ff3c 	bl	100598cc <hci_le_encrypt>
10061a54:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

10061a58 <smp_sap_crt_generate_local_irk>:
10061a58:	b5e0      	push	{r5, r6, r7, lr}
10061a5a:	4603      	mov	r3, r0
10061a5c:	a901      	add	r1, sp, #4
10061a5e:	2001      	movs	r0, #1
10061a60:	8008      	strh	r0, [r1, #0]
10061a62:	466a      	mov	r2, sp
10061a64:	2000      	movs	r0, #0
10061a66:	8010      	strh	r0, [r2, #0]
10061a68:	4802      	ldr	r0, [pc, #8]	@ (10061a74 <__arm_cp.2_0>)
10061a6a:	6800      	ldr	r0, [r0, #0]
10061a6c:	3018      	adds	r0, #24
10061a6e:	f7ff ffdf 	bl	10061a30 <smp_crt_diversify>
10061a72:	bd8c      	pop	{r2, r3, r7, pc}

10061a74 <__arm_cp.2_0>:
10061a74:	20002414 	.word	0x20002414

10061a78 <smp_sap_crt_generate_rpa>:
10061a78:	b5f0      	push	{r4, r5, r6, r7, lr}
10061a7a:	b087      	sub	sp, #28
10061a7c:	9000      	str	r0, [sp, #0]
10061a7e:	ae03      	add	r6, sp, #12
10061a80:	4630      	mov	r0, r6
10061a82:	f7ff ffe9 	bl	10061a58 <smp_sap_crt_generate_local_irk>
10061a86:	2700      	movs	r7, #0
10061a88:	4638      	mov	r0, r7
10061a8a:	f001 fb8d 	bl	100631a8 <Hal_Get_Random_Number>
10061a8e:	0a01      	lsrs	r1, r0, #8
10061a90:	ad02      	add	r5, sp, #8
10061a92:	7069      	strb	r1, [r5, #1]
10061a94:	243f      	movs	r4, #63	@ 0x3f
10061a96:	4004      	ands	r4, r0
10061a98:	3440      	adds	r4, #64	@ 0x40
10061a9a:	4638      	mov	r0, r7
10061a9c:	f001 fb84 	bl	100631a8 <Hal_Get_Random_Number>
10061aa0:	70ac      	strb	r4, [r5, #2]
10061aa2:	7028      	strb	r0, [r5, #0]
10061aa4:	af01      	add	r7, sp, #4
10061aa6:	4630      	mov	r0, r6
10061aa8:	4629      	mov	r1, r5
10061aaa:	463a      	mov	r2, r7
10061aac:	f000 f80e 	bl	10061acc <smp_crt_calculate_hash>
10061ab0:	2603      	movs	r6, #3
10061ab2:	9c00      	ldr	r4, [sp, #0]
10061ab4:	4620      	mov	r0, r4
10061ab6:	4639      	mov	r1, r7
10061ab8:	4632      	mov	r2, r6
10061aba:	f7f0 ffc5 	bl	10052a48 <BLEPLAT_MemCpy>
10061abe:	1ce0      	adds	r0, r4, #3
10061ac0:	4629      	mov	r1, r5
10061ac2:	4632      	mov	r2, r6
10061ac4:	f7f0 ffc0 	bl	10052a48 <BLEPLAT_MemCpy>
10061ac8:	b007      	add	sp, #28
10061aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061acc <smp_crt_calculate_hash>:
10061acc:	b5f0      	push	{r4, r5, r6, r7, lr}
10061ace:	b089      	sub	sp, #36	@ 0x24
10061ad0:	9200      	str	r2, [sp, #0]
10061ad2:	460f      	mov	r7, r1
10061ad4:	4605      	mov	r5, r0
10061ad6:	ae05      	add	r6, sp, #20
10061ad8:	2100      	movs	r1, #0
10061ada:	2210      	movs	r2, #16
10061adc:	4630      	mov	r0, r6
10061ade:	f7f0 ffc3 	bl	10052a68 <BLEPLAT_MemSet>
10061ae2:	2403      	movs	r4, #3
10061ae4:	4630      	mov	r0, r6
10061ae6:	4639      	mov	r1, r7
10061ae8:	4622      	mov	r2, r4
10061aea:	f7f0 ffad 	bl	10052a48 <BLEPLAT_MemCpy>
10061aee:	af01      	add	r7, sp, #4
10061af0:	4628      	mov	r0, r5
10061af2:	4631      	mov	r1, r6
10061af4:	463a      	mov	r2, r7
10061af6:	f7f7 fee9 	bl	100598cc <hci_le_encrypt>
10061afa:	9800      	ldr	r0, [sp, #0]
10061afc:	4639      	mov	r1, r7
10061afe:	4622      	mov	r2, r4
10061b00:	f7f0 ffa2 	bl	10052a48 <BLEPLAT_MemCpy>
10061b04:	b009      	add	sp, #36	@ 0x24
10061b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061b08 <smp_sap_crt_resolve_rpa>:
10061b08:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10061b0a:	460a      	mov	r2, r1
10061b0c:	4604      	mov	r4, r0
10061b0e:	1cc1      	adds	r1, r0, #3
10061b10:	ad01      	add	r5, sp, #4
10061b12:	4610      	mov	r0, r2
10061b14:	462a      	mov	r2, r5
10061b16:	f7ff ffd9 	bl	10061acc <smp_crt_calculate_hash>
10061b1a:	2203      	movs	r2, #3
10061b1c:	4628      	mov	r0, r5
10061b1e:	4621      	mov	r1, r4
10061b20:	f7f0 ffb2 	bl	10052a88 <BLEPLAT_MemCmp>
10061b24:	2800      	cmp	r0, #0
10061b26:	d000      	beq.n	10061b2a <smp_sap_crt_resolve_rpa+0x22>
10061b28:	2081      	movs	r0, #129	@ 0x81
10061b2a:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10061b2c <smp_crt_s1_generate_stk>:
10061b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10061b2e:	b085      	sub	sp, #20
10061b30:	9300      	str	r3, [sp, #0]
10061b32:	4617      	mov	r7, r2
10061b34:	4605      	mov	r5, r0
10061b36:	ae01      	add	r6, sp, #4
10061b38:	4630      	mov	r0, r6
10061b3a:	3008      	adds	r0, #8
10061b3c:	2408      	movs	r4, #8
10061b3e:	4622      	mov	r2, r4
10061b40:	f7f0 ff82 	bl	10052a48 <BLEPLAT_MemCpy>
10061b44:	4630      	mov	r0, r6
10061b46:	4639      	mov	r1, r7
10061b48:	4622      	mov	r2, r4
10061b4a:	f7f0 ff7d 	bl	10052a48 <BLEPLAT_MemCpy>
10061b4e:	4628      	mov	r0, r5
10061b50:	4631      	mov	r1, r6
10061b52:	9a00      	ldr	r2, [sp, #0]
10061b54:	f7f7 feba 	bl	100598cc <hci_le_encrypt>
10061b58:	b005      	add	sp, #20
10061b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061b5c <smp_crt_generate_csrk>:
10061b5c:	b5e0      	push	{r5, r6, r7, lr}
10061b5e:	460b      	mov	r3, r1
10061b60:	4601      	mov	r1, r0
10061b62:	aa01      	add	r2, sp, #4
10061b64:	2001      	movs	r0, #1
10061b66:	8010      	strh	r0, [r2, #0]
10061b68:	4802      	ldr	r0, [pc, #8]	@ (10061b74 <__arm_cp.7_0>)
10061b6a:	6800      	ldr	r0, [r0, #0]
10061b6c:	3008      	adds	r0, #8
10061b6e:	f7ff ff5f 	bl	10061a30 <smp_crt_diversify>
10061b72:	bd8c      	pop	{r2, r3, r7, pc}

10061b74 <__arm_cp.7_0>:
10061b74:	20002414 	.word	0x20002414

10061b78 <smp_crt_generate_cmac_tag>:
10061b78:	b5f0      	push	{r4, r5, r6, r7, lr}
10061b7a:	b095      	sub	sp, #84	@ 0x54
10061b7c:	9301      	str	r3, [sp, #4]
10061b7e:	4617      	mov	r7, r2
10061b80:	9103      	str	r1, [sp, #12]
10061b82:	2500      	movs	r5, #0
10061b84:	9514      	str	r5, [sp, #80]	@ 0x50
10061b86:	9513      	str	r5, [sp, #76]	@ 0x4c
10061b88:	9512      	str	r5, [sp, #72]	@ 0x48
10061b8a:	9511      	str	r5, [sp, #68]	@ 0x44
10061b8c:	a911      	add	r1, sp, #68	@ 0x44
10061b8e:	ac0d      	add	r4, sp, #52	@ 0x34
10061b90:	9004      	str	r0, [sp, #16]
10061b92:	4622      	mov	r2, r4
10061b94:	f7f7 fe9a 	bl	100598cc <hci_le_encrypt>
10061b98:	200f      	movs	r0, #15
10061b9a:	9002      	str	r0, [sp, #8]
10061b9c:	5626      	ldrsb	r6, [r4, r0]
10061b9e:	a909      	add	r1, sp, #36	@ 0x24
10061ba0:	4620      	mov	r0, r4
10061ba2:	f000 f885 	bl	10061cb0 <smp_crt_left_shift>
10061ba6:	2e00      	cmp	r6, #0
10061ba8:	d467      	bmi.n	10061c7a <smp_crt_generate_cmac_tag+0x102>
10061baa:	a809      	add	r0, sp, #36	@ 0x24
10061bac:	9902      	ldr	r1, [sp, #8]
10061bae:	5644      	ldrsb	r4, [r0, r1]
10061bb0:	a905      	add	r1, sp, #20
10061bb2:	f000 f87d 	bl	10061cb0 <smp_crt_left_shift>
10061bb6:	2c00      	cmp	r4, #0
10061bb8:	d46c      	bmi.n	10061c94 <smp_crt_generate_cmac_tag+0x11c>
10061bba:	a811      	add	r0, sp, #68	@ 0x44
10061bbc:	2400      	movs	r4, #0
10061bbe:	2210      	movs	r2, #16
10061bc0:	4621      	mov	r1, r4
10061bc2:	f7f0 ff51 	bl	10052a68 <BLEPLAT_MemSet>
10061bc6:	b2fd      	uxtb	r5, r7
10061bc8:	2d11      	cmp	r5, #17
10061bca:	d321      	bcc.n	10061c10 <smp_crt_generate_cmac_tag+0x98>
10061bcc:	1d20      	adds	r0, r4, #4
10061bce:	b281      	uxth	r1, r0
10061bd0:	2210      	movs	r2, #16
10061bd2:	ab0d      	add	r3, sp, #52	@ 0x34
10061bd4:	9803      	ldr	r0, [sp, #12]
10061bd6:	f7f3 faeb 	bl	100551b0 <ACL_pkt_read>
10061bda:	2000      	movs	r0, #0
10061bdc:	2810      	cmp	r0, #16
10061bde:	d007      	beq.n	10061bf0 <smp_crt_generate_cmac_tag+0x78>
10061be0:	a90d      	add	r1, sp, #52	@ 0x34
10061be2:	5c09      	ldrb	r1, [r1, r0]
10061be4:	aa11      	add	r2, sp, #68	@ 0x44
10061be6:	5c13      	ldrb	r3, [r2, r0]
10061be8:	404b      	eors	r3, r1
10061bea:	5413      	strb	r3, [r2, r0]
10061bec:	1c40      	adds	r0, r0, #1
10061bee:	e7f5      	b.n	10061bdc <smp_crt_generate_cmac_tag+0x64>
10061bf0:	ad11      	add	r5, sp, #68	@ 0x44
10061bf2:	ae0d      	add	r6, sp, #52	@ 0x34
10061bf4:	9804      	ldr	r0, [sp, #16]
10061bf6:	4629      	mov	r1, r5
10061bf8:	4632      	mov	r2, r6
10061bfa:	f7f7 fe67 	bl	100598cc <hci_le_encrypt>
10061bfe:	2210      	movs	r2, #16
10061c00:	4628      	mov	r0, r5
10061c02:	4631      	mov	r1, r6
10061c04:	f7f0 ff20 	bl	10052a48 <BLEPLAT_MemCpy>
10061c08:	3f10      	subs	r7, #16
10061c0a:	3410      	adds	r4, #16
10061c0c:	b2a4      	uxth	r4, r4
10061c0e:	e7da      	b.n	10061bc6 <smp_crt_generate_cmac_tag+0x4e>
10061c10:	2d10      	cmp	r5, #16
10061c12:	d108      	bne.n	10061c26 <smp_crt_generate_cmac_tag+0xae>
10061c14:	1d20      	adds	r0, r4, #4
10061c16:	b281      	uxth	r1, r0
10061c18:	2210      	movs	r2, #16
10061c1a:	ab0d      	add	r3, sp, #52	@ 0x34
10061c1c:	9803      	ldr	r0, [sp, #12]
10061c1e:	f7f3 fac7 	bl	100551b0 <ACL_pkt_read>
10061c22:	a809      	add	r0, sp, #36	@ 0x24
10061c24:	e014      	b.n	10061c50 <smp_crt_generate_cmac_tag+0xd8>
10061c26:	a80d      	add	r0, sp, #52	@ 0x34
10061c28:	2100      	movs	r1, #0
10061c2a:	2210      	movs	r2, #16
10061c2c:	f7f0 ff1c 	bl	10052a68 <BLEPLAT_MemSet>
10061c30:	0638      	lsls	r0, r7, #24
10061c32:	d008      	beq.n	10061c46 <smp_crt_generate_cmac_tag+0xce>
10061c34:	a80d      	add	r0, sp, #52	@ 0x34
10061c36:	1b43      	subs	r3, r0, r5
10061c38:	3310      	adds	r3, #16
10061c3a:	1d20      	adds	r0, r4, #4
10061c3c:	b281      	uxth	r1, r0
10061c3e:	9803      	ldr	r0, [sp, #12]
10061c40:	462a      	mov	r2, r5
10061c42:	f7f3 fab5 	bl	100551b0 <ACL_pkt_read>
10061c46:	a80d      	add	r0, sp, #52	@ 0x34
10061c48:	1b40      	subs	r0, r0, r5
10061c4a:	2180      	movs	r1, #128	@ 0x80
10061c4c:	73c1      	strb	r1, [r0, #15]
10061c4e:	a805      	add	r0, sp, #20
10061c50:	9a01      	ldr	r2, [sp, #4]
10061c52:	2100      	movs	r1, #0
10061c54:	2910      	cmp	r1, #16
10061c56:	d009      	beq.n	10061c6c <smp_crt_generate_cmac_tag+0xf4>
10061c58:	ab0d      	add	r3, sp, #52	@ 0x34
10061c5a:	5c5c      	ldrb	r4, [r3, r1]
10061c5c:	5c43      	ldrb	r3, [r0, r1]
10061c5e:	4063      	eors	r3, r4
10061c60:	ad11      	add	r5, sp, #68	@ 0x44
10061c62:	5c6c      	ldrb	r4, [r5, r1]
10061c64:	405c      	eors	r4, r3
10061c66:	546c      	strb	r4, [r5, r1]
10061c68:	1c49      	adds	r1, r1, #1
10061c6a:	e7f3      	b.n	10061c54 <smp_crt_generate_cmac_tag+0xdc>
10061c6c:	a911      	add	r1, sp, #68	@ 0x44
10061c6e:	9804      	ldr	r0, [sp, #16]
10061c70:	f7f7 fe2c 	bl	100598cc <hci_le_encrypt>
10061c74:	2000      	movs	r0, #0
10061c76:	b015      	add	sp, #84	@ 0x54
10061c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10061c7a:	a811      	add	r0, sp, #68	@ 0x44
10061c7c:	2187      	movs	r1, #135	@ 0x87
10061c7e:	7001      	strb	r1, [r0, #0]
10061c80:	2d0f      	cmp	r5, #15
10061c82:	d092      	beq.n	10061baa <smp_crt_generate_cmac_tag+0x32>
10061c84:	a809      	add	r0, sp, #36	@ 0x24
10061c86:	5d41      	ldrb	r1, [r0, r5]
10061c88:	aa11      	add	r2, sp, #68	@ 0x44
10061c8a:	5d52      	ldrb	r2, [r2, r5]
10061c8c:	404a      	eors	r2, r1
10061c8e:	5542      	strb	r2, [r0, r5]
10061c90:	1c6d      	adds	r5, r5, #1
10061c92:	e7f5      	b.n	10061c80 <smp_crt_generate_cmac_tag+0x108>
10061c94:	a811      	add	r0, sp, #68	@ 0x44
10061c96:	2187      	movs	r1, #135	@ 0x87
10061c98:	7001      	strb	r1, [r0, #0]
10061c9a:	2000      	movs	r0, #0
10061c9c:	280f      	cmp	r0, #15
10061c9e:	d08c      	beq.n	10061bba <smp_crt_generate_cmac_tag+0x42>
10061ca0:	a905      	add	r1, sp, #20
10061ca2:	5c0a      	ldrb	r2, [r1, r0]
10061ca4:	ab11      	add	r3, sp, #68	@ 0x44
10061ca6:	5c1b      	ldrb	r3, [r3, r0]
10061ca8:	4053      	eors	r3, r2
10061caa:	540b      	strb	r3, [r1, r0]
10061cac:	1c40      	adds	r0, r0, #1
10061cae:	e7f5      	b.n	10061c9c <smp_crt_generate_cmac_tag+0x124>

10061cb0 <smp_crt_left_shift>:
10061cb0:	b510      	push	{r4, lr}
10061cb2:	7802      	ldrb	r2, [r0, #0]
10061cb4:	0052      	lsls	r2, r2, #1
10061cb6:	700a      	strb	r2, [r1, #0]
10061cb8:	1c49      	adds	r1, r1, #1
10061cba:	2200      	movs	r2, #0
10061cbc:	2a0f      	cmp	r2, #15
10061cbe:	d00b      	beq.n	10061cd8 <smp_crt_left_shift+0x28>
10061cc0:	1883      	adds	r3, r0, r2
10061cc2:	785b      	ldrb	r3, [r3, #1]
10061cc4:	005b      	lsls	r3, r3, #1
10061cc6:	548b      	strb	r3, [r1, r2]
10061cc8:	5684      	ldrsb	r4, [r0, r2]
10061cca:	2c00      	cmp	r4, #0
10061ccc:	d502      	bpl.n	10061cd4 <smp_crt_left_shift+0x24>
10061cce:	2401      	movs	r4, #1
10061cd0:	4323      	orrs	r3, r4
10061cd2:	548b      	strb	r3, [r1, r2]
10061cd4:	1c52      	adds	r2, r2, #1
10061cd6:	e7f1      	b.n	10061cbc <smp_crt_left_shift+0xc>
10061cd8:	bd10      	pop	{r4, pc}

10061cda <smp_debug_trudy__set_config>:
10061cda:	200c      	movs	r0, #12
10061cdc:	4770      	bx	lr
	...

10061ce0 <smp_fsm_process_actions_wrt_state_tsk>:
10061ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061ce2:	2700      	movs	r7, #0
10061ce4:	4b6b      	ldr	r3, [pc, #428]	@ (10061e94 <__arm_cp.0_0>)
10061ce6:	4a6c      	ldr	r2, [pc, #432]	@ (10061e98 <__arm_cp.0_1>)
10061ce8:	463d      	mov	r5, r7
10061cea:	6818      	ldr	r0, [r3, #0]
10061cec:	2134      	movs	r1, #52	@ 0x34
10061cee:	5c40      	ldrb	r0, [r0, r1]
10061cf0:	4285      	cmp	r5, r0
10061cf2:	d300      	bcc.n	10061cf6 <smp_fsm_process_actions_wrt_state_tsk+0x16>
10061cf4:	e0cd      	b.n	10061e92 <smp_fsm_process_actions_wrt_state_tsk+0x1b2>
10061cf6:	6810      	ldr	r0, [r2, #0]
10061cf8:	21a4      	movs	r1, #164	@ 0xa4
10061cfa:	5840      	ldr	r0, [r0, r1]
10061cfc:	2800      	cmp	r0, #0
10061cfe:	d100      	bne.n	10061d02 <smp_fsm_process_actions_wrt_state_tsk+0x22>
10061d00:	e0b2      	b.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061d02:	19c4      	adds	r4, r0, r7
10061d04:	8920      	ldrh	r0, [r4, #8]
10061d06:	2800      	cmp	r0, #0
10061d08:	d100      	bne.n	10061d0c <smp_fsm_process_actions_wrt_state_tsk+0x2c>
10061d0a:	e0ad      	b.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061d0c:	7aa0      	ldrb	r0, [r4, #10]
10061d0e:	4601      	mov	r1, r0
10061d10:	39d1      	subs	r1, #209	@ 0xd1
10061d12:	2905      	cmp	r1, #5
10061d14:	d35d      	bcc.n	10061dd2 <smp_fsm_process_actions_wrt_state_tsk+0xf2>
10061d16:	2800      	cmp	r0, #0
10061d18:	d100      	bne.n	10061d1c <smp_fsm_process_actions_wrt_state_tsk+0x3c>
10061d1a:	e0a5      	b.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061d1c:	28fe      	cmp	r0, #254	@ 0xfe
10061d1e:	d100      	bne.n	10061d22 <smp_fsm_process_actions_wrt_state_tsk+0x42>
10061d20:	e08a      	b.n	10061e38 <smp_fsm_process_actions_wrt_state_tsk+0x158>
10061d22:	28a2      	cmp	r0, #162	@ 0xa2
10061d24:	d059      	beq.n	10061dda <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10061d26:	28aa      	cmp	r0, #170	@ 0xaa
10061d28:	d100      	bne.n	10061d2c <smp_fsm_process_actions_wrt_state_tsk+0x4c>
10061d2a:	e081      	b.n	10061e30 <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061d2c:	28b2      	cmp	r0, #178	@ 0xb2
10061d2e:	d054      	beq.n	10061dda <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10061d30:	28b4      	cmp	r0, #180	@ 0xb4
10061d32:	d100      	bne.n	10061d36 <smp_fsm_process_actions_wrt_state_tsk+0x56>
10061d34:	e08a      	b.n	10061e4c <smp_fsm_process_actions_wrt_state_tsk+0x16c>
10061d36:	28ba      	cmp	r0, #186	@ 0xba
10061d38:	d07a      	beq.n	10061e30 <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061d3a:	28bf      	cmp	r0, #191	@ 0xbf
10061d3c:	d100      	bne.n	10061d40 <smp_fsm_process_actions_wrt_state_tsk+0x60>
10061d3e:	e089      	b.n	10061e54 <smp_fsm_process_actions_wrt_state_tsk+0x174>
10061d40:	28f0      	cmp	r0, #240	@ 0xf0
10061d42:	d100      	bne.n	10061d46 <smp_fsm_process_actions_wrt_state_tsk+0x66>
10061d44:	e08b      	b.n	10061e5e <smp_fsm_process_actions_wrt_state_tsk+0x17e>
10061d46:	2810      	cmp	r0, #16
10061d48:	d000      	beq.n	10061d4c <smp_fsm_process_actions_wrt_state_tsk+0x6c>
10061d4a:	e090      	b.n	10061e6e <smp_fsm_process_actions_wrt_state_tsk+0x18e>
10061d4c:	2101      	movs	r1, #1
10061d4e:	4620      	mov	r0, r4
10061d50:	f004 fcb8 	bl	100666c4 <smp_dep_sdb_find_bonding_record_by_conn_addr>
10061d54:	2800      	cmp	r0, #0
10061d56:	d100      	bne.n	10061d5a <smp_fsm_process_actions_wrt_state_tsk+0x7a>
10061d58:	e096      	b.n	10061e88 <smp_fsm_process_actions_wrt_state_tsk+0x1a8>
10061d5a:	2600      	movs	r6, #0
10061d5c:	72a6      	strb	r6, [r4, #10]
10061d5e:	f7f4 fc5b 	bl	10056618 <GapIsPrivacySupported>
10061d62:	2800      	cmp	r0, #0
10061d64:	4b4b      	ldr	r3, [pc, #300]	@ (10061e94 <__arm_cp.0_0>)
10061d66:	4a4c      	ldr	r2, [pc, #304]	@ (10061e98 <__arm_cp.0_1>)
10061d68:	d07e      	beq.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061d6a:	2060      	movs	r0, #96	@ 0x60
10061d6c:	5c20      	ldrb	r0, [r4, r0]
10061d6e:	07c0      	lsls	r0, r0, #31
10061d70:	d07a      	beq.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061d72:	f004 fc18 	bl	100665a6 <smp_dep_sdb_get_bonding_records_count>
10061d76:	4a48      	ldr	r2, [pc, #288]	@ (10061e98 <__arm_cp.0_1>)
10061d78:	4b46      	ldr	r3, [pc, #280]	@ (10061e94 <__arm_cp.0_0>)
10061d7a:	2800      	cmp	r0, #0
10061d7c:	d074      	beq.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061d7e:	79e0      	ldrb	r0, [r4, #7]
10061d80:	21c0      	movs	r1, #192	@ 0xc0
10061d82:	4001      	ands	r1, r0
10061d84:	2940      	cmp	r1, #64	@ 0x40
10061d86:	d16f      	bne.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061d88:	4844      	ldr	r0, [pc, #272]	@ (10061e9c <__arm_cp.0_2>)
10061d8a:	6800      	ldr	r0, [r0, #0]
10061d8c:	214f      	movs	r1, #79	@ 0x4f
10061d8e:	5c40      	ldrb	r0, [r0, r1]
10061d90:	0700      	lsls	r0, r0, #28
10061d92:	d569      	bpl.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061d94:	8924      	ldrh	r4, [r4, #8]
10061d96:	4842      	ldr	r0, [pc, #264]	@ (10061ea0 <__arm_cp.0_3>)
10061d98:	6800      	ldr	r0, [r0, #0]
10061d9a:	6980      	ldr	r0, [r0, #24]
10061d9c:	2248      	movs	r2, #72	@ 0x48
10061d9e:	2102      	movs	r1, #2
10061da0:	460b      	mov	r3, r1
10061da2:	f7f3 fb9d 	bl	100554e0 <aci_event_fifo_push_header>
10061da6:	4a3c      	ldr	r2, [pc, #240]	@ (10061e98 <__arm_cp.0_1>)
10061da8:	4b3a      	ldr	r3, [pc, #232]	@ (10061e94 <__arm_cp.0_0>)
10061daa:	2800      	cmp	r0, #0
10061dac:	d05c      	beq.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061dae:	4601      	mov	r1, r0
10061db0:	2004      	movs	r0, #4
10061db2:	7248      	strb	r0, [r1, #9]
10061db4:	2208      	movs	r2, #8
10061db6:	720a      	strb	r2, [r1, #8]
10061db8:	71ce      	strb	r6, [r1, #7]
10061dba:	7188      	strb	r0, [r1, #6]
10061dbc:	728c      	strb	r4, [r1, #10]
10061dbe:	20ff      	movs	r0, #255	@ 0xff
10061dc0:	7148      	strb	r0, [r1, #5]
10061dc2:	2082      	movs	r0, #130	@ 0x82
10061dc4:	7108      	strb	r0, [r1, #4]
10061dc6:	0a20      	lsrs	r0, r4, #8
10061dc8:	72c8      	strb	r0, [r1, #11]
10061dca:	2002      	movs	r0, #2
10061dcc:	f7f3 fc25 	bl	1005561a <aci_event_fifo_push>
10061dd0:	e048      	b.n	10061e64 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061dd2:	4620      	mov	r0, r4
10061dd4:	f005 fa2c 	bl	10067230 <smp_pp3_keys_distribution_send>
10061dd8:	e044      	b.n	10061e64 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061dda:	7de0      	ldrb	r0, [r4, #23]
10061ddc:	2601      	movs	r6, #1
10061dde:	0700      	lsls	r0, r0, #28
10061de0:	4630      	mov	r0, r6
10061de2:	d513      	bpl.n	10061e0c <smp_fsm_process_actions_wrt_state_tsk+0x12c>
10061de4:	4620      	mov	r0, r4
10061de6:	f005 fd28 	bl	1006783a <smp_scp_public_key_prepare_and_exchange_ucfg_weak>
10061dea:	2800      	cmp	r0, #0
10061dec:	d006      	beq.n	10061dfc <smp_fsm_process_actions_wrt_state_tsk+0x11c>
10061dee:	2812      	cmp	r0, #18
10061df0:	d004      	beq.n	10061dfc <smp_fsm_process_actions_wrt_state_tsk+0x11c>
10061df2:	200e      	movs	r0, #14
10061df4:	f000 febe 	bl	10062b74 <tsk_notify_idx>
10061df8:	f7f0 f83f 	bl	10051e7a <BLE_STACK_ProcessRequest>
10061dfc:	7de0      	ldrb	r0, [r4, #23]
10061dfe:	2160      	movs	r1, #96	@ 0x60
10061e00:	4001      	ands	r1, r0
10061e02:	3960      	subs	r1, #96	@ 0x60
10061e04:	4248      	negs	r0, r1
10061e06:	4148      	adcs	r0, r1
10061e08:	4b22      	ldr	r3, [pc, #136]	@ (10061e94 <__arm_cp.0_0>)
10061e0a:	4a23      	ldr	r2, [pc, #140]	@ (10061e98 <__arm_cp.0_1>)
10061e0c:	7ce1      	ldrb	r1, [r4, #19]
10061e0e:	2902      	cmp	r1, #2
10061e10:	d104      	bne.n	10061e1c <smp_fsm_process_actions_wrt_state_tsk+0x13c>
10061e12:	7be1      	ldrb	r1, [r4, #15]
10061e14:	2210      	movs	r2, #16
10061e16:	400a      	ands	r2, r1
10061e18:	0916      	lsrs	r6, r2, #4
10061e1a:	4a1f      	ldr	r2, [pc, #124]	@ (10061e98 <__arm_cp.0_1>)
10061e1c:	2800      	cmp	r0, #0
10061e1e:	d023      	beq.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061e20:	2e00      	cmp	r6, #0
10061e22:	d021      	beq.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061e24:	2060      	movs	r0, #96	@ 0x60
10061e26:	5c20      	ldrb	r0, [r4, r0]
10061e28:	07c0      	lsls	r0, r0, #31
10061e2a:	d024      	beq.n	10061e76 <smp_fsm_process_actions_wrt_state_tsk+0x196>
10061e2c:	204b      	movs	r0, #75	@ 0x4b
10061e2e:	e023      	b.n	10061e78 <smp_fsm_process_actions_wrt_state_tsk+0x198>
10061e30:	4620      	mov	r0, r4
10061e32:	f000 f837 	bl	10061ea4 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>
10061e36:	e015      	b.n	10061e64 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061e38:	2060      	movs	r0, #96	@ 0x60
10061e3a:	5620      	ldrsb	r0, [r4, r0]
10061e3c:	2800      	cmp	r0, #0
10061e3e:	d513      	bpl.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061e40:	2100      	movs	r1, #0
10061e42:	2270      	movs	r2, #112	@ 0x70
10061e44:	4620      	mov	r0, r4
10061e46:	f7f0 fe0f 	bl	10052a68 <BLEPLAT_MemSet>
10061e4a:	e00b      	b.n	10061e64 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061e4c:	4620      	mov	r0, r4
10061e4e:	f005 f859 	bl	10066f04 <smp_pp2_per_auth_stage_1_start>
10061e52:	e007      	b.n	10061e64 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061e54:	2100      	movs	r1, #0
10061e56:	4620      	mov	r0, r4
10061e58:	f005 f9a1 	bl	1006719e <smp_pp3_keys_distribution_start>
10061e5c:	e002      	b.n	10061e64 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061e5e:	4620      	mov	r0, r4
10061e60:	f004 fcb2 	bl	100667c8 <smp_pp3_pairing_completed_successful>
10061e64:	4a0c      	ldr	r2, [pc, #48]	@ (10061e98 <__arm_cp.0_1>)
10061e66:	4b0b      	ldr	r3, [pc, #44]	@ (10061e94 <__arm_cp.0_0>)
10061e68:	3770      	adds	r7, #112	@ 0x70
10061e6a:	1c6d      	adds	r5, r5, #1
10061e6c:	e73d      	b.n	10061cea <smp_fsm_process_actions_wrt_state_tsk+0xa>
10061e6e:	4620      	mov	r0, r4
10061e70:	f000 f819 	bl	10061ea6 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>
10061e74:	e00a      	b.n	10061e8c <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10061e76:	205b      	movs	r0, #91	@ 0x5b
10061e78:	43c0      	mvns	r0, r0
10061e7a:	72a0      	strb	r0, [r4, #10]
10061e7c:	200e      	movs	r0, #14
10061e7e:	f000 fe79 	bl	10062b74 <tsk_notify_idx>
10061e82:	f7ef fffa 	bl	10051e7a <BLE_STACK_ProcessRequest>
10061e86:	e001      	b.n	10061e8c <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10061e88:	20f1      	movs	r0, #241	@ 0xf1
10061e8a:	72a0      	strb	r0, [r4, #10]
10061e8c:	4b01      	ldr	r3, [pc, #4]	@ (10061e94 <__arm_cp.0_0>)
10061e8e:	4a02      	ldr	r2, [pc, #8]	@ (10061e98 <__arm_cp.0_1>)
10061e90:	e7ea      	b.n	10061e68 <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061e94 <__arm_cp.0_0>:
10061e94:	20002414 	.word	0x20002414

10061e98 <__arm_cp.0_1>:
10061e98:	200024b4 	.word	0x200024b4

10061e9c <__arm_cp.0_2>:
10061e9c:	20002468 	.word	0x20002468

10061ea0 <__arm_cp.0_3>:
10061ea0:	20002418 	.word	0x20002418

10061ea4 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>:
10061ea4:	4770      	bx	lr

10061ea6 <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>:
10061ea6:	4770      	bx	lr

10061ea8 <smp_rxp_process_rxed_packets_tsk>:
10061ea8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061eaa:	4f60      	ldr	r7, [pc, #384]	@ (1006202c <__arm_cp.0_0>)
10061eac:	4c60      	ldr	r4, [pc, #384]	@ (10062030 <__arm_cp.0_1>)
10061eae:	6838      	ldr	r0, [r7, #0]
10061eb0:	6801      	ldr	r1, [r0, #0]
10061eb2:	2900      	cmp	r1, #0
10061eb4:	d100      	bne.n	10061eb8 <smp_rxp_process_rxed_packets_tsk+0x10>
10061eb6:	e0b8      	b.n	1006202a <smp_rxp_process_rxed_packets_tsk+0x182>
10061eb8:	f001 f878 	bl	10062fac <ACL_list_remove_head>
10061ebc:	4605      	mov	r5, r0
10061ebe:	8800      	ldrh	r0, [r0, #0]
10061ec0:	f005 fc4c 	bl	1006775c <smp_get_remote_device_list_item>
10061ec4:	2800      	cmp	r0, #0
10061ec6:	d0f2      	beq.n	10061eae <smp_rxp_process_rxed_packets_tsk+0x6>
10061ec8:	4606      	mov	r6, r0
10061eca:	6838      	ldr	r0, [r7, #0]
10061ecc:	21b0      	movs	r1, #176	@ 0xb0
10061ece:	5c40      	ldrb	r0, [r0, r1]
10061ed0:	2800      	cmp	r0, #0
10061ed2:	d00e      	beq.n	10061ef2 <smp_rxp_process_rxed_packets_tsk+0x4a>
10061ed4:	2108      	movs	r1, #8
10061ed6:	2200      	movs	r2, #0
10061ed8:	2301      	movs	r3, #1
10061eda:	4630      	mov	r0, r6
10061edc:	f004 fd2c 	bl	10066938 <smp_pp3_pairing_failed_send>
10061ee0:	2800      	cmp	r0, #0
10061ee2:	d00e      	beq.n	10061f02 <smp_rxp_process_rxed_packets_tsk+0x5a>
10061ee4:	28fd      	cmp	r0, #253	@ 0xfd
10061ee6:	d000      	beq.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061ee8:	e096      	b.n	10062018 <smp_rxp_process_rxed_packets_tsk+0x170>
10061eea:	4628      	mov	r0, r5
10061eec:	f7f3 f944 	bl	10055178 <ACL_pkt_release>
10061ef0:	e7dd      	b.n	10061eae <smp_rxp_process_rxed_packets_tsk+0x6>
10061ef2:	6868      	ldr	r0, [r5, #4]
10061ef4:	7a00      	ldrb	r0, [r0, #8]
10061ef6:	2805      	cmp	r0, #5
10061ef8:	d10c      	bne.n	10061f14 <smp_rxp_process_rxed_packets_tsk+0x6c>
10061efa:	4628      	mov	r0, r5
10061efc:	4631      	mov	r1, r6
10061efe:	f004 fcef 	bl	100668e0 <smp_pp3_pairing_failed_receive>
10061f02:	4628      	mov	r0, r5
10061f04:	f7f3 f938 	bl	10055178 <ACL_pkt_release>
10061f08:	200e      	movs	r0, #14
10061f0a:	f000 fe33 	bl	10062b74 <tsk_notify_idx>
10061f0e:	f7ef ffb4 	bl	10051e7a <BLE_STACK_ProcessRequest>
10061f12:	e7cc      	b.n	10061eae <smp_rxp_process_rxed_packets_tsk+0x6>
10061f14:	7ab1      	ldrb	r1, [r6, #10]
10061f16:	29f1      	cmp	r1, #241	@ 0xf1
10061f18:	d001      	beq.n	10061f1e <smp_rxp_process_rxed_packets_tsk+0x76>
10061f1a:	2900      	cmp	r1, #0
10061f1c:	d10a      	bne.n	10061f34 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061f1e:	2160      	movs	r1, #96	@ 0x60
10061f20:	5c72      	ldrb	r2, [r6, r1]
10061f22:	2101      	movs	r1, #1
10061f24:	4011      	ands	r1, r2
10061f26:	d101      	bne.n	10061f2c <smp_rxp_process_rxed_packets_tsk+0x84>
10061f28:	280b      	cmp	r0, #11
10061f2a:	d1de      	bne.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061f2c:	2900      	cmp	r1, #0
10061f2e:	d001      	beq.n	10061f34 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061f30:	2801      	cmp	r0, #1
10061f32:	d1da      	bne.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061f34:	7df0      	ldrb	r0, [r6, #23]
10061f36:	0700      	lsls	r0, r0, #28
10061f38:	d506      	bpl.n	10061f48 <smp_rxp_process_rxed_packets_tsk+0xa0>
10061f3a:	9602      	str	r6, [sp, #8]
10061f3c:	9501      	str	r5, [sp, #4]
10061f3e:	a801      	add	r0, sp, #4
10061f40:	f000 f894 	bl	1006206c <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>
10061f44:	28fc      	cmp	r0, #252	@ 0xfc
10061f46:	d1cb      	bne.n	10061ee0 <smp_rxp_process_rxed_packets_tsk+0x38>
10061f48:	2060      	movs	r0, #96	@ 0x60
10061f4a:	5c30      	ldrb	r0, [r6, r0]
10061f4c:	07c0      	lsls	r0, r0, #31
10061f4e:	d107      	bne.n	10061f60 <smp_rxp_process_rxed_packets_tsk+0xb8>
10061f50:	9602      	str	r6, [sp, #8]
10061f52:	9501      	str	r5, [sp, #4]
10061f54:	a801      	add	r0, sp, #4
10061f56:	f000 f88b 	bl	10062070 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>
10061f5a:	28fc      	cmp	r0, #252	@ 0xfc
10061f5c:	d1c0      	bne.n	10061ee0 <smp_rxp_process_rxed_packets_tsk+0x38>
10061f5e:	e022      	b.n	10061fa6 <smp_rxp_process_rxed_packets_tsk+0xfe>
10061f60:	6868      	ldr	r0, [r5, #4]
10061f62:	7a00      	ldrb	r0, [r0, #8]
10061f64:	2804      	cmp	r0, #4
10061f66:	d031      	beq.n	10061fcc <smp_rxp_process_rxed_packets_tsk+0x124>
10061f68:	2803      	cmp	r0, #3
10061f6a:	d037      	beq.n	10061fdc <smp_rxp_process_rxed_packets_tsk+0x134>
10061f6c:	2801      	cmp	r0, #1
10061f6e:	d11a      	bne.n	10061fa6 <smp_rxp_process_rxed_packets_tsk+0xfe>
10061f70:	7ab0      	ldrb	r0, [r6, #10]
10061f72:	2800      	cmp	r0, #0
10061f74:	d003      	beq.n	10061f7e <smp_rxp_process_rxed_packets_tsk+0xd6>
10061f76:	28fb      	cmp	r0, #251	@ 0xfb
10061f78:	d047      	beq.n	1006200a <smp_rxp_process_rxed_packets_tsk+0x162>
10061f7a:	28f1      	cmp	r0, #241	@ 0xf1
10061f7c:	d1b5      	bne.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061f7e:	8930      	ldrh	r0, [r6, #8]
10061f80:	f005 fbcc 	bl	1006771c <smp_get_remote_device_list_index>
10061f84:	4602      	mov	r2, r0
10061f86:	2000      	movs	r0, #0
10061f88:	4601      	mov	r1, r0
10061f8a:	4623      	mov	r3, r4
10061f8c:	f000 f88e 	bl	100620ac <smp_timer_reset>
10061f90:	7e30      	ldrb	r0, [r6, #24]
10061f92:	0781      	lsls	r1, r0, #30
10061f94:	d502      	bpl.n	10061f9c <smp_rxp_process_rxed_packets_tsk+0xf4>
10061f96:	2103      	movs	r1, #3
10061f98:	4308      	orrs	r0, r1
10061f9a:	7630      	strb	r0, [r6, #24]
10061f9c:	4628      	mov	r0, r5
10061f9e:	4631      	mov	r1, r6
10061fa0:	f004 fe9e 	bl	10066ce0 <smp_pp1_per_rxp_pairing_request>
10061fa4:	e7d9      	b.n	10061f5a <smp_rxp_process_rxed_packets_tsk+0xb2>
10061fa6:	4628      	mov	r0, r5
10061fa8:	4631      	mov	r1, r6
10061faa:	f005 fa0f 	bl	100673cc <smp_pp3_keys_distribution_receive>
10061fae:	28fc      	cmp	r0, #252	@ 0xfc
10061fb0:	d003      	beq.n	10061fba <smp_rxp_process_rxed_packets_tsk+0x112>
10061fb2:	2886      	cmp	r0, #134	@ 0x86
10061fb4:	d099      	beq.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061fb6:	2884      	cmp	r0, #132	@ 0x84
10061fb8:	d192      	bne.n	10061ee0 <smp_rxp_process_rxed_packets_tsk+0x38>
10061fba:	7df0      	ldrb	r0, [r6, #23]
10061fbc:	0700      	lsls	r0, r0, #28
10061fbe:	d594      	bpl.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061fc0:	9602      	str	r6, [sp, #8]
10061fc2:	9501      	str	r5, [sp, #4]
10061fc4:	a801      	add	r0, sp, #4
10061fc6:	f000 f84f 	bl	10062068 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>
10061fca:	e789      	b.n	10061ee0 <smp_rxp_process_rxed_packets_tsk+0x38>
10061fcc:	7ab0      	ldrb	r0, [r6, #10]
10061fce:	28b6      	cmp	r0, #182	@ 0xb6
10061fd0:	d18b      	bne.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061fd2:	4628      	mov	r0, r5
10061fd4:	4631      	mov	r1, r6
10061fd6:	f005 f84d 	bl	10067074 <smp_pp2_per_rx_process_pairing_random>
10061fda:	e7be      	b.n	10061f5a <smp_rxp_process_rxed_packets_tsk+0xb2>
10061fdc:	7ab0      	ldrb	r0, [r6, #10]
10061fde:	28b2      	cmp	r0, #178	@ 0xb2
10061fe0:	d009      	beq.n	10061ff6 <smp_rxp_process_rxed_packets_tsk+0x14e>
10061fe2:	28b4      	cmp	r0, #180	@ 0xb4
10061fe4:	d007      	beq.n	10061ff6 <smp_rxp_process_rxed_packets_tsk+0x14e>
10061fe6:	28b5      	cmp	r0, #181	@ 0xb5
10061fe8:	d000      	beq.n	10061fec <smp_rxp_process_rxed_packets_tsk+0x144>
10061fea:	e77e      	b.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061fec:	4628      	mov	r0, r5
10061fee:	4631      	mov	r1, r6
10061ff0:	f004 ff4a 	bl	10066e88 <smp_pp2_per_rx_process_pairing_confirm>
10061ff4:	e7b1      	b.n	10061f5a <smp_rxp_process_rxed_packets_tsk+0xb2>
10061ff6:	7cf0      	ldrb	r0, [r6, #19]
10061ff8:	2802      	cmp	r0, #2
10061ffa:	d000      	beq.n	10061ffe <smp_rxp_process_rxed_packets_tsk+0x156>
10061ffc:	e775      	b.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
10061ffe:	6838      	ldr	r0, [r7, #0]
10062000:	2140      	movs	r1, #64	@ 0x40
10062002:	5c41      	ldrb	r1, [r0, r1]
10062004:	2903      	cmp	r1, #3
10062006:	d108      	bne.n	1006201a <smp_rxp_process_rxed_packets_tsk+0x172>
10062008:	e76f      	b.n	10061eea <smp_rxp_process_rxed_packets_tsk+0x42>
1006200a:	2109      	movs	r1, #9
1006200c:	2200      	movs	r2, #0
1006200e:	2301      	movs	r3, #1
10062010:	4630      	mov	r0, r6
10062012:	f004 fc91 	bl	10066938 <smp_pp3_pairing_failed_send>
10062016:	e7a0      	b.n	10061f5a <smp_rxp_process_rxed_packets_tsk+0xb2>
10062018:	6838      	ldr	r0, [r7, #0]
1006201a:	4629      	mov	r1, r5
1006201c:	f000 ffa7 	bl	10062f6e <ACL_list_insert_head>
10062020:	200f      	movs	r0, #15
10062022:	f000 fda7 	bl	10062b74 <tsk_notify_idx>
10062026:	f7ef ff28 	bl	10051e7a <BLE_STACK_ProcessRequest>
1006202a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1006202c <__arm_cp.0_0>:
1006202c:	200024b4 	.word	0x200024b4

10062030 <__arm_cp.0_1>:
10062030:	00007530 	.word	0x00007530

10062034 <smp_rxp_flush_packet_queues>:
10062034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062036:	4d0a      	ldr	r5, [pc, #40]	@ (10062060 <__arm_cp.4_0>)
10062038:	4005      	ands	r5, r0
1006203a:	4e0a      	ldr	r6, [pc, #40]	@ (10062064 <__arm_cp.4_1>)
1006203c:	6830      	ldr	r0, [r6, #0]
1006203e:	6807      	ldr	r7, [r0, #0]
10062040:	2f00      	cmp	r7, #0
10062042:	d00c      	beq.n	1006205e <smp_rxp_flush_packet_queues+0x2a>
10062044:	463c      	mov	r4, r7
10062046:	69ff      	ldr	r7, [r7, #28]
10062048:	8820      	ldrh	r0, [r4, #0]
1006204a:	42a8      	cmp	r0, r5
1006204c:	d1f8      	bne.n	10062040 <smp_rxp_flush_packet_queues+0xc>
1006204e:	6830      	ldr	r0, [r6, #0]
10062050:	4621      	mov	r1, r4
10062052:	f000 ff95 	bl	10062f80 <ACL_list_remove>
10062056:	4620      	mov	r0, r4
10062058:	f7f3 f88e 	bl	10055178 <ACL_pkt_release>
1006205c:	e7f0      	b.n	10062040 <smp_rxp_flush_packet_queues+0xc>
1006205e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062060 <__arm_cp.4_0>:
10062060:	00000fff 	.word	0x00000fff

10062064 <__arm_cp.4_1>:
10062064:	200024b4 	.word	0x200024b4

10062068 <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>:
10062068:	201f      	movs	r0, #31
1006206a:	4770      	bx	lr

1006206c <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>:
1006206c:	201f      	movs	r0, #31
1006206e:	4770      	bx	lr

10062070 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>:
10062070:	201f      	movs	r0, #31
10062072:	4770      	bx	lr

10062074 <smp_timer_init>:
10062074:	b580      	push	{r7, lr}
10062076:	4806      	ldr	r0, [pc, #24]	@ (10062090 <__arm_cp.0_0>)
10062078:	7ac1      	ldrb	r1, [r0, #11]
1006207a:	4806      	ldr	r0, [pc, #24]	@ (10062094 <__arm_cp.0_1>)
1006207c:	6800      	ldr	r0, [r0, #0]
1006207e:	3008      	adds	r0, #8
10062080:	1cc9      	adds	r1, r1, #3
10062082:	b2c9      	uxtb	r1, r1
10062084:	4a04      	ldr	r2, [pc, #16]	@ (10062098 <__arm_cp.0_2>)
10062086:	2307      	movs	r3, #7
10062088:	f000 fdd2 	bl	10062c30 <CST_init>
1006208c:	bd80      	pop	{r7, pc}
1006208e:	46c0      	nop			@ (mov r8, r8)

10062090 <__arm_cp.0_0>:
10062090:	2000247c 	.word	0x2000247c

10062094 <__arm_cp.0_1>:
10062094:	200024b4 	.word	0x200024b4

10062098 <__arm_cp.0_2>:
10062098:	1006209d 	.word	0x1006209d

1006209c <smp_timers_cb_wrapper>:
1006209c:	b580      	push	{r7, lr}
1006209e:	6940      	ldr	r0, [r0, #20]
100620a0:	4901      	ldr	r1, [pc, #4]	@ (100620a8 <__arm_cp.1_0>)
100620a2:	f000 fe9e 	bl	10062de2 <cst_sharedCallback>
100620a6:	bd80      	pop	{r7, pc}

100620a8 <__arm_cp.1_0>:
100620a8:	10062145 	.word	0x10062145

100620ac <smp_timer_reset>:
100620ac:	b510      	push	{r4, lr}
100620ae:	2900      	cmp	r1, #0
100620b0:	d006      	beq.n	100620c0 <smp_timer_reset+0x14>
100620b2:	2486      	movs	r4, #134	@ 0x86
100620b4:	2901      	cmp	r1, #1
100620b6:	d11b      	bne.n	100620f0 <smp_timer_reset+0x44>
100620b8:	2a02      	cmp	r2, #2
100620ba:	d819      	bhi.n	100620f0 <smp_timer_reset+0x44>
100620bc:	2100      	movs	r1, #0
100620be:	e000      	b.n	100620c2 <smp_timer_reset+0x16>
100620c0:	2103      	movs	r1, #3
100620c2:	2801      	cmp	r0, #1
100620c4:	d00a      	beq.n	100620dc <smp_timer_reset+0x30>
100620c6:	2800      	cmp	r0, #0
100620c8:	d111      	bne.n	100620ee <smp_timer_reset+0x42>
100620ca:	1888      	adds	r0, r1, r2
100620cc:	b2c1      	uxtb	r1, r0
100620ce:	4809      	ldr	r0, [pc, #36]	@ (100620f4 <__arm_cp.2_0>)
100620d0:	6800      	ldr	r0, [r0, #0]
100620d2:	3008      	adds	r0, #8
100620d4:	2201      	movs	r2, #1
100620d6:	f000 fdf6 	bl	10062cc6 <CST_start>
100620da:	e006      	b.n	100620ea <smp_timer_reset+0x3e>
100620dc:	1888      	adds	r0, r1, r2
100620de:	b2c1      	uxtb	r1, r0
100620e0:	4804      	ldr	r0, [pc, #16]	@ (100620f4 <__arm_cp.2_0>)
100620e2:	6800      	ldr	r0, [r0, #0]
100620e4:	3008      	adds	r0, #8
100620e6:	f000 fdb8 	bl	10062c5a <CST_stop>
100620ea:	4604      	mov	r4, r0
100620ec:	e000      	b.n	100620f0 <smp_timer_reset+0x44>
100620ee:	2400      	movs	r4, #0
100620f0:	4620      	mov	r0, r4
100620f2:	bd10      	pop	{r4, pc}

100620f4 <__arm_cp.2_0>:
100620f4:	200024b4 	.word	0x200024b4

100620f8 <smp_timers_protocol_timeout_cb>:
100620f8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100620fa:	4605      	mov	r5, r0
100620fc:	2070      	movs	r0, #112	@ 0x70
100620fe:	9002      	str	r0, [sp, #8]
10062100:	4345      	muls	r5, r0
10062102:	480f      	ldr	r0, [pc, #60]	@ (10062140 <__arm_cp.3_0>)
10062104:	6800      	ldr	r0, [r0, #0]
10062106:	21a4      	movs	r1, #164	@ 0xa4
10062108:	9101      	str	r1, [sp, #4]
1006210a:	5840      	ldr	r0, [r0, r1]
1006210c:	1947      	adds	r7, r0, r5
1006210e:	8939      	ldrh	r1, [r7, #8]
10062110:	2002      	movs	r0, #2
10062112:	2401      	movs	r4, #1
10062114:	2600      	movs	r6, #0
10062116:	4622      	mov	r2, r4
10062118:	4633      	mov	r3, r6
1006211a:	f002 f995 	bl	10064448 <aci_gap_pairing_complete_event_push_noinline>
1006211e:	4638      	mov	r0, r7
10062120:	4621      	mov	r1, r4
10062122:	f004 fbb9 	bl	10066898 <smp_pp3_pairing_completed_update_stats>
10062126:	8938      	ldrh	r0, [r7, #8]
10062128:	f7ff ff84 	bl	10062034 <smp_rxp_flush_packet_queues>
1006212c:	4804      	ldr	r0, [pc, #16]	@ (10062140 <__arm_cp.3_0>)
1006212e:	6800      	ldr	r0, [r0, #0]
10062130:	9901      	ldr	r1, [sp, #4]
10062132:	5840      	ldr	r0, [r0, r1]
10062134:	1940      	adds	r0, r0, r5
10062136:	4631      	mov	r1, r6
10062138:	9a02      	ldr	r2, [sp, #8]
1006213a:	f7f0 fc95 	bl	10052a68 <BLEPLAT_MemSet>
1006213e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062140 <__arm_cp.3_0>:
10062140:	200024b4 	.word	0x200024b4

10062144 <smp_timers_cb>:
10062144:	b580      	push	{r7, lr}
10062146:	2802      	cmp	r0, #2
10062148:	d802      	bhi.n	10062150 <smp_timers_cb+0xc>
1006214a:	f005 fa57 	bl	100675fc <smp_cmn_repeated_attacks_timer_cb>
1006214e:	bd80      	pop	{r7, pc}
10062150:	4904      	ldr	r1, [pc, #16]	@ (10062164 <__arm_cp.4_0>)
10062152:	7ac9      	ldrb	r1, [r1, #11]
10062154:	1cc9      	adds	r1, r1, #3
10062156:	4281      	cmp	r1, r0
10062158:	d903      	bls.n	10062162 <smp_timers_cb+0x1e>
1006215a:	1ec0      	subs	r0, r0, #3
1006215c:	b2c0      	uxtb	r0, r0
1006215e:	f7ff ffcb 	bl	100620f8 <smp_timers_protocol_timeout_cb>
10062162:	bd80      	pop	{r7, pc}

10062164 <__arm_cp.4_0>:
10062164:	2000247c 	.word	0x2000247c

10062168 <smp_init>:
10062168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006216a:	2029      	movs	r0, #41	@ 0x29
1006216c:	00c1      	lsls	r1, r0, #3
1006216e:	2401      	movs	r4, #1
10062170:	4d20      	ldr	r5, [pc, #128]	@ (100621f4 <__arm_cp.0_0>)
10062172:	4620      	mov	r0, r4
10062174:	47a8      	blx	r5
10062176:	4e20      	ldr	r6, [pc, #128]	@ (100621f8 <__arm_cp.0_1>)
10062178:	6030      	str	r0, [r6, #0]
1006217a:	4f20      	ldr	r7, [pc, #128]	@ (100621fc <__arm_cp.0_2>)
1006217c:	7af8      	ldrb	r0, [r7, #11]
1006217e:	2170      	movs	r1, #112	@ 0x70
10062180:	47a8      	blx	r5
10062182:	6831      	ldr	r1, [r6, #0]
10062184:	22a4      	movs	r2, #164	@ 0xa4
10062186:	5088      	str	r0, [r1, r2]
10062188:	f005 f9c0 	bl	1006750c <smp_cmn_rejectlist_init>
1006218c:	2128      	movs	r1, #40	@ 0x28
1006218e:	4620      	mov	r0, r4
10062190:	47a8      	blx	r5
10062192:	6831      	ldr	r1, [r6, #0]
10062194:	22ac      	movs	r2, #172	@ 0xac
10062196:	5088      	str	r0, [r1, r2]
10062198:	7af8      	ldrb	r0, [r7, #11]
1006219a:	1cc0      	adds	r0, r0, #3
1006219c:	b2c0      	uxtb	r0, r0
1006219e:	1c41      	adds	r1, r0, #1
100621a0:	4d17      	ldr	r5, [pc, #92]	@ (10062200 <__arm_cp.0_3>)
100621a2:	4628      	mov	r0, r5
100621a4:	4622      	mov	r2, r4
100621a6:	f7fe fefd 	bl	10060fa4 <csmem_mem_assign>
100621aa:	6831      	ldr	r1, [r6, #0]
100621ac:	6288      	str	r0, [r1, #40]	@ 0x28
100621ae:	7af8      	ldrb	r0, [r7, #11]
100621b0:	1cc0      	adds	r0, r0, #3
100621b2:	b2c1      	uxtb	r1, r0
100621b4:	2202      	movs	r2, #2
100621b6:	4628      	mov	r0, r5
100621b8:	f7fe fef4 	bl	10060fa4 <csmem_mem_assign>
100621bc:	6831      	ldr	r1, [r6, #0]
100621be:	62c8      	str	r0, [r1, #44]	@ 0x2c
100621c0:	4608      	mov	r0, r1
100621c2:	f000 fec9 	bl	10062f58 <ACL_list_init>
100621c6:	f7ff ff55 	bl	10062074 <smp_timer_init>
100621ca:	6830      	ldr	r0, [r6, #0]
100621cc:	2142      	movs	r1, #66	@ 0x42
100621ce:	2500      	movs	r5, #0
100621d0:	5245      	strh	r5, [r0, r1]
100621d2:	2140      	movs	r1, #64	@ 0x40
100621d4:	2203      	movs	r2, #3
100621d6:	5442      	strb	r2, [r0, r1]
100621d8:	490a      	ldr	r1, [pc, #40]	@ (10062204 <__arm_cp.0_4>)
100621da:	6304      	str	r4, [r0, #48]	@ 0x30
100621dc:	6341      	str	r1, [r0, #52]	@ 0x34
100621de:	6385      	str	r5, [r0, #56]	@ 0x38
100621e0:	3044      	adds	r0, #68	@ 0x44
100621e2:	2110      	movs	r1, #16
100621e4:	462a      	mov	r2, r5
100621e6:	f000 ffec 	bl	100631c2 <HAL_Generate_Random_Bytes_To>
100621ea:	4628      	mov	r0, r5
100621ec:	f005 fb22 	bl	10067834 <smp_scp_init_ucfg_weak>
100621f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100621f2:	46c0      	nop			@ (mov r8, r8)

100621f4 <__arm_cp.0_0>:
100621f4:	10060fc9 	.word	0x10060fc9

100621f8 <__arm_cp.0_1>:
100621f8:	200024b4 	.word	0x200024b4

100621fc <__arm_cp.0_2>:
100621fc:	2000247c 	.word	0x2000247c

10062200 <__arm_cp.0_3>:
10062200:	20002478 	.word	0x20002478

10062204 <__arm_cp.0_4>:
10062204:	07071007 	.word	0x07071007

10062208 <smp_sap_aci_set_io_capabilities>:
10062208:	b510      	push	{r4, lr}
1006220a:	4604      	mov	r4, r0
1006220c:	f000 f80c 	bl	10062228 <smp_check_is_any_pairing_ongoing>
10062210:	2800      	cmp	r0, #0
10062212:	d001      	beq.n	10062218 <smp_sap_aci_set_io_capabilities+0x10>
10062214:	200c      	movs	r0, #12
10062216:	bd10      	pop	{r4, pc}
10062218:	4802      	ldr	r0, [pc, #8]	@ (10062224 <__arm_cp.2_0>)
1006221a:	6800      	ldr	r0, [r0, #0]
1006221c:	2140      	movs	r1, #64	@ 0x40
1006221e:	5444      	strb	r4, [r0, r1]
10062220:	2000      	movs	r0, #0
10062222:	bd10      	pop	{r4, pc}

10062224 <__arm_cp.2_0>:
10062224:	200024b4 	.word	0x200024b4

10062228 <smp_check_is_any_pairing_ongoing>:
10062228:	b570      	push	{r4, r5, r6, lr}
1006222a:	4810      	ldr	r0, [pc, #64]	@ (1006226c <__arm_cp.3_0>)
1006222c:	6800      	ldr	r0, [r0, #0]
1006222e:	2134      	movs	r1, #52	@ 0x34
10062230:	5c40      	ldrb	r0, [r0, r1]
10062232:	2170      	movs	r1, #112	@ 0x70
10062234:	4341      	muls	r1, r0
10062236:	480e      	ldr	r0, [pc, #56]	@ (10062270 <__arm_cp.3_1>)
10062238:	6802      	ldr	r2, [r0, #0]
1006223a:	32a4      	adds	r2, #164	@ 0xa4
1006223c:	2000      	movs	r0, #0
1006223e:	4603      	mov	r3, r0
10062240:	4299      	cmp	r1, r3
10062242:	d012      	beq.n	1006226a <smp_check_is_any_pairing_ongoing+0x42>
10062244:	6814      	ldr	r4, [r2, #0]
10062246:	18e5      	adds	r5, r4, r3
10062248:	7aac      	ldrb	r4, [r5, #10]
1006224a:	2660      	movs	r6, #96	@ 0x60
1006224c:	5dad      	ldrb	r5, [r5, r6]
1006224e:	07ed      	lsls	r5, r5, #31
10062250:	d104      	bne.n	1006225c <smp_check_is_any_pairing_ongoing+0x34>
10062252:	3460      	adds	r4, #96	@ 0x60
10062254:	b2e4      	uxtb	r4, r4
10062256:	2c51      	cmp	r4, #81	@ 0x51
10062258:	d204      	bcs.n	10062264 <smp_check_is_any_pairing_ongoing+0x3c>
1006225a:	e005      	b.n	10062268 <smp_check_is_any_pairing_ongoing+0x40>
1006225c:	3450      	adds	r4, #80	@ 0x50
1006225e:	b2e4      	uxtb	r4, r4
10062260:	2c41      	cmp	r4, #65	@ 0x41
10062262:	d301      	bcc.n	10062268 <smp_check_is_any_pairing_ongoing+0x40>
10062264:	3370      	adds	r3, #112	@ 0x70
10062266:	e7eb      	b.n	10062240 <smp_check_is_any_pairing_ongoing+0x18>
10062268:	2001      	movs	r0, #1
1006226a:	bd70      	pop	{r4, r5, r6, pc}

1006226c <__arm_cp.3_0>:
1006226c:	20002414 	.word	0x20002414

10062270 <__arm_cp.3_1>:
10062270:	200024b4 	.word	0x200024b4

10062274 <smp_sap_aci_set_authentication_req>:
10062274:	b510      	push	{r4, lr}
10062276:	4604      	mov	r4, r0
10062278:	f7ff ffd6 	bl	10062228 <smp_check_is_any_pairing_ongoing>
1006227c:	7861      	ldrb	r1, [r4, #1]
1006227e:	2901      	cmp	r1, #1
10062280:	d103      	bne.n	1006228a <smp_sap_aci_set_authentication_req+0x16>
10062282:	2800      	cmp	r0, #0
10062284:	d105      	bne.n	10062292 <smp_sap_aci_set_authentication_req+0x1e>
10062286:	4602      	mov	r2, r0
10062288:	e004      	b.n	10062294 <smp_sap_aci_set_authentication_req+0x20>
1006228a:	2800      	cmp	r0, #0
1006228c:	d00f      	beq.n	100622ae <smp_sap_aci_set_authentication_req+0x3a>
1006228e:	220c      	movs	r2, #12
10062290:	e016      	b.n	100622c0 <smp_sap_aci_set_authentication_req+0x4c>
10062292:	220c      	movs	r2, #12
10062294:	490b      	ldr	r1, [pc, #44]	@ (100622c4 <__arm_cp.4_0>)
10062296:	6809      	ldr	r1, [r1, #0]
10062298:	2340      	movs	r3, #64	@ 0x40
1006229a:	5ccb      	ldrb	r3, [r1, r3]
1006229c:	2b03      	cmp	r3, #3
1006229e:	d101      	bne.n	100622a4 <smp_sap_aci_set_authentication_req+0x30>
100622a0:	226e      	movs	r2, #110	@ 0x6e
100622a2:	43d2      	mvns	r2, r2
100622a4:	2b03      	cmp	r3, #3
100622a6:	d00b      	beq.n	100622c0 <smp_sap_aci_set_authentication_req+0x4c>
100622a8:	2800      	cmp	r0, #0
100622aa:	d002      	beq.n	100622b2 <smp_sap_aci_set_authentication_req+0x3e>
100622ac:	e008      	b.n	100622c0 <smp_sap_aci_set_authentication_req+0x4c>
100622ae:	4805      	ldr	r0, [pc, #20]	@ (100622c4 <__arm_cp.4_0>)
100622b0:	6801      	ldr	r1, [r0, #0]
100622b2:	3130      	adds	r1, #48	@ 0x30
100622b4:	2210      	movs	r2, #16
100622b6:	4608      	mov	r0, r1
100622b8:	4621      	mov	r1, r4
100622ba:	f7f0 fbc5 	bl	10052a48 <BLEPLAT_MemCpy>
100622be:	2200      	movs	r2, #0
100622c0:	b2d0      	uxtb	r0, r2
100622c2:	bd10      	pop	{r4, pc}

100622c4 <__arm_cp.4_0>:
100622c4:	200024b4 	.word	0x200024b4

100622c8 <smp_sap_aci_passkey_response>:
100622c8:	b510      	push	{r4, lr}
100622ca:	460c      	mov	r4, r1
100622cc:	f005 fa46 	bl	1006775c <smp_get_remote_device_list_item>
100622d0:	2800      	cmp	r0, #0
100622d2:	d010      	beq.n	100622f6 <smp_sap_aci_passkey_response+0x2e>
100622d4:	7cc1      	ldrb	r1, [r0, #19]
100622d6:	2902      	cmp	r1, #2
100622d8:	d10f      	bne.n	100622fa <smp_sap_aci_passkey_response+0x32>
100622da:	4909      	ldr	r1, [pc, #36]	@ (10062300 <__arm_cp.5_0>)
100622dc:	6809      	ldr	r1, [r1, #0]
100622de:	638c      	str	r4, [r1, #56]	@ 0x38
100622e0:	7bc1      	ldrb	r1, [r0, #15]
100622e2:	2210      	movs	r2, #16
100622e4:	430a      	orrs	r2, r1
100622e6:	73c2      	strb	r2, [r0, #15]
100622e8:	200e      	movs	r0, #14
100622ea:	f000 fc43 	bl	10062b74 <tsk_notify_idx>
100622ee:	f7ef fdc4 	bl	10051e7a <BLE_STACK_ProcessRequest>
100622f2:	2000      	movs	r0, #0
100622f4:	bd10      	pop	{r4, pc}
100622f6:	2002      	movs	r0, #2
100622f8:	bd10      	pop	{r4, pc}
100622fa:	200c      	movs	r0, #12
100622fc:	bd10      	pop	{r4, pc}
100622fe:	46c0      	nop			@ (mov r8, r8)

10062300 <__arm_cp.5_0>:
10062300:	200024b4 	.word	0x200024b4

10062304 <smp_sap_hci_le_connection_complete_evt_hndl>:
10062304:	b5f0      	push	{r4, r5, r6, r7, lr}
10062306:	b089      	sub	sp, #36	@ 0x24
10062308:	9304      	str	r3, [sp, #16]
1006230a:	4615      	mov	r5, r2
1006230c:	9105      	str	r1, [sp, #20]
1006230e:	4607      	mov	r7, r0
10062310:	ae06      	add	r6, sp, #24
10062312:	ac08      	add	r4, sp, #32
10062314:	4630      	mov	r0, r6
10062316:	4621      	mov	r1, r4
10062318:	f7f4 fa28 	bl	1005676c <GAP_get_current_address>
1006231c:	7822      	ldrb	r2, [r4, #0]
1006231e:	2000      	movs	r0, #0
10062320:	9500      	str	r5, [sp, #0]
10062322:	9904      	ldr	r1, [sp, #16]
10062324:	9101      	str	r1, [sp, #4]
10062326:	9002      	str	r0, [sp, #8]
10062328:	4638      	mov	r0, r7
1006232a:	9905      	ldr	r1, [sp, #20]
1006232c:	4633      	mov	r3, r6
1006232e:	f000 f803 	bl	10062338 <smp_connection_complete_handler>
10062332:	b009      	add	sp, #36	@ 0x24
10062334:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10062338 <smp_connection_complete_handler>:
10062338:	b5f0      	push	{r4, r5, r6, r7, lr}
1006233a:	b087      	sub	sp, #28
1006233c:	9302      	str	r3, [sp, #8]
1006233e:	9200      	str	r2, [sp, #0]
10062340:	9101      	str	r1, [sp, #4]
10062342:	493a      	ldr	r1, [pc, #232]	@ (1006242c <__arm_cp.1_0>)
10062344:	6809      	ldr	r1, [r1, #0]
10062346:	2334      	movs	r3, #52	@ 0x34
10062348:	5cca      	ldrb	r2, [r1, r3]
1006234a:	2770      	movs	r7, #112	@ 0x70
1006234c:	4357      	muls	r7, r2
1006234e:	2500      	movs	r5, #0
10062350:	43ec      	mvns	r4, r5
10062352:	4b37      	ldr	r3, [pc, #220]	@ (10062430 <__arm_cp.1_1>)
10062354:	681e      	ldr	r6, [r3, #0]
10062356:	36a4      	adds	r6, #164	@ 0xa4
10062358:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006235a:	9106      	str	r1, [sp, #24]
1006235c:	990e      	ldr	r1, [sp, #56]	@ 0x38
1006235e:	9103      	str	r1, [sp, #12]
10062360:	990d      	ldr	r1, [sp, #52]	@ 0x34
10062362:	9105      	str	r1, [sp, #20]
10062364:	9404      	str	r4, [sp, #16]
10062366:	42af      	cmp	r7, r5
10062368:	d05e      	beq.n	10062428 <smp_connection_complete_handler+0xf0>
1006236a:	6833      	ldr	r3, [r6, #0]
1006236c:	1959      	adds	r1, r3, r5
1006236e:	8909      	ldrh	r1, [r1, #8]
10062370:	3570      	adds	r5, #112	@ 0x70
10062372:	1c64      	adds	r4, r4, #1
10062374:	2900      	cmp	r1, #0
10062376:	d1f6      	bne.n	10062366 <smp_connection_complete_handler+0x2e>
10062378:	4294      	cmp	r4, r2
1006237a:	d255      	bcs.n	10062428 <smp_connection_complete_handler+0xf0>
1006237c:	195f      	adds	r7, r3, r5
1006237e:	4639      	mov	r1, r7
10062380:	3968      	subs	r1, #104	@ 0x68
10062382:	8008      	strh	r0, [r1, #0]
10062384:	4638      	mov	r0, r7
10062386:	3870      	subs	r0, #112	@ 0x70
10062388:	2105      	movs	r1, #5
1006238a:	7001      	strb	r1, [r0, #0]
1006238c:	4638      	mov	r0, r7
1006238e:	380f      	subs	r0, #15
10062390:	9900      	ldr	r1, [sp, #0]
10062392:	7001      	strb	r1, [r0, #0]
10062394:	4638      	mov	r0, r7
10062396:	3810      	subs	r0, #16
10062398:	9000      	str	r0, [sp, #0]
1006239a:	9901      	ldr	r1, [sp, #4]
1006239c:	7001      	strb	r1, [r0, #0]
1006239e:	4638      	mov	r0, r7
100623a0:	380e      	subs	r0, #14
100623a2:	2206      	movs	r2, #6
100623a4:	4b23      	ldr	r3, [pc, #140]	@ (10062434 <__arm_cp.1_2>)
100623a6:	9902      	ldr	r1, [sp, #8]
100623a8:	4616      	mov	r6, r2
100623aa:	4798      	blx	r3
100623ac:	20fe      	movs	r0, #254	@ 0xfe
100623ae:	9a06      	ldr	r2, [sp, #24]
100623b0:	4010      	ands	r0, r2
100623b2:	2101      	movs	r1, #1
100623b4:	400a      	ands	r2, r1
100623b6:	2802      	cmp	r0, #2
100623b8:	d000      	beq.n	100623bc <smp_connection_complete_handler+0x84>
100623ba:	4611      	mov	r1, r2
100623bc:	9206      	str	r2, [sp, #24]
100623be:	463c      	mov	r4, r7
100623c0:	3c6f      	subs	r4, #111	@ 0x6f
100623c2:	7021      	strb	r1, [r4, #0]
100623c4:	2802      	cmp	r0, #2
100623c6:	9805      	ldr	r0, [sp, #20]
100623c8:	9903      	ldr	r1, [sp, #12]
100623ca:	d000      	beq.n	100623ce <smp_connection_complete_handler+0x96>
100623cc:	4601      	mov	r1, r0
100623ce:	463d      	mov	r5, r7
100623d0:	3d6e      	subs	r5, #110	@ 0x6e
100623d2:	4628      	mov	r0, r5
100623d4:	4632      	mov	r2, r6
100623d6:	4b17      	ldr	r3, [pc, #92]	@ (10062434 <__arm_cp.1_2>)
100623d8:	4798      	blx	r3
100623da:	4638      	mov	r0, r7
100623dc:	3817      	subs	r0, #23
100623de:	9906      	ldr	r1, [sp, #24]
100623e0:	7001      	strb	r1, [r0, #0]
100623e2:	4638      	mov	r0, r7
100623e4:	3816      	subs	r0, #22
100623e6:	9905      	ldr	r1, [sp, #20]
100623e8:	4632      	mov	r2, r6
100623ea:	4b12      	ldr	r3, [pc, #72]	@ (10062434 <__arm_cp.1_2>)
100623ec:	4798      	blx	r3
100623ee:	4638      	mov	r0, r7
100623f0:	3858      	subs	r0, #88	@ 0x58
100623f2:	2100      	movs	r1, #0
100623f4:	2204      	movs	r2, #4
100623f6:	f7f0 fb37 	bl	10052a68 <BLEPLAT_MemSet>
100623fa:	1f38      	subs	r0, r7, #4
100623fc:	3f66      	subs	r7, #102	@ 0x66
100623fe:	2110      	movs	r1, #16
10062400:	7039      	strb	r1, [r7, #0]
10062402:	9904      	ldr	r1, [sp, #16]
10062404:	6001      	str	r1, [r0, #0]
10062406:	7820      	ldrb	r0, [r4, #0]
10062408:	4629      	mov	r1, r5
1006240a:	f005 f967 	bl	100676dc <smp_cmn_is_peer_rejectlisted>
1006240e:	2800      	cmp	r0, #0
10062410:	d005      	beq.n	1006241e <smp_connection_complete_handler+0xe6>
10062412:	9800      	ldr	r0, [sp, #0]
10062414:	7800      	ldrb	r0, [r0, #0]
10062416:	07c0      	lsls	r0, r0, #31
10062418:	d001      	beq.n	1006241e <smp_connection_complete_handler+0xe6>
1006241a:	20fb      	movs	r0, #251	@ 0xfb
1006241c:	7038      	strb	r0, [r7, #0]
1006241e:	200e      	movs	r0, #14
10062420:	f000 fba8 	bl	10062b74 <tsk_notify_idx>
10062424:	f7ef fd29 	bl	10051e7a <BLE_STACK_ProcessRequest>
10062428:	b007      	add	sp, #28
1006242a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006242c <__arm_cp.1_0>:
1006242c:	20002414 	.word	0x20002414

10062430 <__arm_cp.1_1>:
10062430:	200024b4 	.word	0x200024b4

10062434 <__arm_cp.1_2>:
10062434:	10052a49 	.word	0x10052a49

10062438 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>:
10062438:	b5f0      	push	{r4, r5, r6, r7, lr}
1006243a:	b089      	sub	sp, #36	@ 0x24
1006243c:	9304      	str	r3, [sp, #16]
1006243e:	4617      	mov	r7, r2
10062440:	9105      	str	r1, [sp, #20]
10062442:	4606      	mov	r6, r0
10062444:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10062446:	4620      	mov	r0, r4
10062448:	f7fe f8d0 	bl	100605ec <Is_Address_Initialized>
1006244c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1006244e:	2800      	cmp	r0, #0
10062450:	d008      	beq.n	10062464 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x2c>
10062452:	a807      	add	r0, sp, #28
10062454:	2206      	movs	r2, #6
10062456:	4621      	mov	r1, r4
10062458:	f7f0 faf6 	bl	10052a48 <BLEPLAT_MemCpy>
1006245c:	a806      	add	r0, sp, #24
1006245e:	2201      	movs	r2, #1
10062460:	7002      	strb	r2, [r0, #0]
10062462:	e005      	b.n	10062470 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x38>
10062464:	a807      	add	r0, sp, #28
10062466:	ac06      	add	r4, sp, #24
10062468:	4621      	mov	r1, r4
1006246a:	f7f4 f97f 	bl	1005676c <GAP_get_current_address>
1006246e:	7822      	ldrb	r2, [r4, #0]
10062470:	9700      	str	r7, [sp, #0]
10062472:	9804      	ldr	r0, [sp, #16]
10062474:	9001      	str	r0, [sp, #4]
10062476:	9502      	str	r5, [sp, #8]
10062478:	ab07      	add	r3, sp, #28
1006247a:	4630      	mov	r0, r6
1006247c:	9905      	ldr	r1, [sp, #20]
1006247e:	f7ff ff5b 	bl	10062338 <smp_connection_complete_handler>
10062482:	b009      	add	sp, #36	@ 0x24
10062484:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10062488 <smp_sap_hci_le_long_term_key_request_evt_hndl>:
10062488:	b5f0      	push	{r4, r5, r6, r7, lr}
1006248a:	b089      	sub	sp, #36	@ 0x24
1006248c:	4615      	mov	r5, r2
1006248e:	460e      	mov	r6, r1
10062490:	f005 f964 	bl	1006775c <smp_get_remote_device_list_item>
10062494:	2800      	cmp	r0, #0
10062496:	d070      	beq.n	1006257a <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
10062498:	4604      	mov	r4, r0
1006249a:	7a80      	ldrb	r0, [r0, #10]
1006249c:	28bc      	cmp	r0, #188	@ 0xbc
1006249e:	d106      	bne.n	100624ae <smp_sap_hci_le_long_term_key_request_evt_hndl+0x26>
100624a0:	8927      	ldrh	r7, [r4, #8]
100624a2:	a808      	add	r0, sp, #32
100624a4:	2100      	movs	r1, #0
100624a6:	8001      	strh	r1, [r0, #0]
100624a8:	4626      	mov	r6, r4
100624aa:	3628      	adds	r6, #40	@ 0x28
100624ac:	e056      	b.n	1006255c <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd4>
100624ae:	4627      	mov	r7, r4
100624b0:	3730      	adds	r7, #48	@ 0x30
100624b2:	7de1      	ldrb	r1, [r4, #23]
100624b4:	0709      	lsls	r1, r1, #28
100624b6:	d409      	bmi.n	100624cc <smp_sap_hci_le_long_term_key_request_evt_hndl+0x44>
100624b8:	4620      	mov	r0, r4
100624ba:	3028      	adds	r0, #40	@ 0x28
100624bc:	2208      	movs	r2, #8
100624be:	4631      	mov	r1, r6
100624c0:	f7f0 fac2 	bl	10052a48 <BLEPLAT_MemCpy>
100624c4:	703d      	strb	r5, [r7, #0]
100624c6:	0a28      	lsrs	r0, r5, #8
100624c8:	7078      	strb	r0, [r7, #1]
100624ca:	7aa0      	ldrb	r0, [r4, #10]
100624cc:	8921      	ldrh	r1, [r4, #8]
100624ce:	9102      	str	r1, [sp, #8]
100624d0:	a908      	add	r1, sp, #32
100624d2:	2200      	movs	r2, #0
100624d4:	800a      	strh	r2, [r1, #0]
100624d6:	4626      	mov	r6, r4
100624d8:	3628      	adds	r6, #40	@ 0x28
100624da:	28bc      	cmp	r0, #188	@ 0xbc
100624dc:	d03d      	beq.n	1006255a <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
100624de:	4625      	mov	r5, r4
100624e0:	351c      	adds	r5, #28
100624e2:	28f1      	cmp	r0, #241	@ 0xf1
100624e4:	d10f      	bne.n	10062506 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x7e>
100624e6:	7de0      	ldrb	r0, [r4, #23]
100624e8:	0700      	lsls	r0, r0, #28
100624ea:	d436      	bmi.n	1006255a <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
100624ec:	aa07      	add	r2, sp, #28
100624ee:	9201      	str	r2, [sp, #4]
100624f0:	4628      	mov	r0, r5
100624f2:	4631      	mov	r1, r6
100624f4:	f7ff fa66 	bl	100619c4 <smp_sap_crt_generate_ediv>
100624f8:	2202      	movs	r2, #2
100624fa:	9801      	ldr	r0, [sp, #4]
100624fc:	4639      	mov	r1, r7
100624fe:	f7f0 fac3 	bl	10052a88 <BLEPLAT_MemCmp>
10062502:	2800      	cmp	r0, #0
10062504:	d021      	beq.n	1006254a <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10062506:	4638      	mov	r0, r7
10062508:	4631      	mov	r1, r6
1006250a:	4622      	mov	r2, r4
1006250c:	f004 f949 	bl	100667a2 <smp_dep_sdb_find_matching_ltk_read_record>
10062510:	2800      	cmp	r0, #0
10062512:	d01a      	beq.n	1006254a <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10062514:	9d02      	ldr	r5, [sp, #8]
10062516:	4628      	mov	r0, r5
10062518:	f7f7 fa09 	bl	1005992e <hci_le_long_term_key_request_negative_reply_api>
1006251c:	7e20      	ldrb	r0, [r4, #24]
1006251e:	0780      	lsls	r0, r0, #30
10062520:	d00c      	beq.n	1006253c <smp_sap_hci_le_long_term_key_request_evt_hndl+0xb4>
10062522:	4628      	mov	r0, r5
10062524:	f005 f8fa 	bl	1006771c <smp_get_remote_device_list_index>
10062528:	4602      	mov	r2, r0
1006252a:	2001      	movs	r0, #1
1006252c:	2100      	movs	r1, #0
1006252e:	4b15      	ldr	r3, [pc, #84]	@ (10062584 <__arm_cp.3_1>)
10062530:	f7ff fdbc 	bl	100620ac <smp_timer_reset>
10062534:	7e20      	ldrb	r0, [r4, #24]
10062536:	21fc      	movs	r1, #252	@ 0xfc
10062538:	4001      	ands	r1, r0
1006253a:	7621      	strb	r1, [r4, #24]
1006253c:	2002      	movs	r0, #2
1006253e:	2203      	movs	r2, #3
10062540:	2300      	movs	r3, #0
10062542:	4629      	mov	r1, r5
10062544:	f001 ff80 	bl	10064448 <aci_gap_pairing_complete_event_push_noinline>
10062548:	e017      	b.n	1006257a <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
1006254a:	480d      	ldr	r0, [pc, #52]	@ (10062580 <__arm_cp.3_0>)
1006254c:	6800      	ldr	r0, [r0, #0]
1006254e:	3008      	adds	r0, #8
10062550:	aa08      	add	r2, sp, #32
10062552:	4629      	mov	r1, r5
10062554:	4633      	mov	r3, r6
10062556:	f7ff fa6b 	bl	10061a30 <smp_crt_diversify>
1006255a:	9f02      	ldr	r7, [sp, #8]
1006255c:	ad03      	add	r5, sp, #12
1006255e:	2100      	movs	r1, #0
10062560:	2210      	movs	r2, #16
10062562:	4628      	mov	r0, r5
10062564:	f7f0 fa80 	bl	10052a68 <BLEPLAT_MemSet>
10062568:	7c22      	ldrb	r2, [r4, #16]
1006256a:	4628      	mov	r0, r5
1006256c:	4631      	mov	r1, r6
1006256e:	f7f0 fa6b 	bl	10052a48 <BLEPLAT_MemCpy>
10062572:	4638      	mov	r0, r7
10062574:	4629      	mov	r1, r5
10062576:	f7f7 f9cb 	bl	10059910 <hci_le_long_term_key_request_reply_api>
1006257a:	b009      	add	sp, #36	@ 0x24
1006257c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006257e:	46c0      	nop			@ (mov r8, r8)

10062580 <__arm_cp.3_0>:
10062580:	20002414 	.word	0x20002414

10062584 <__arm_cp.3_1>:
10062584:	00007530 	.word	0x00007530

10062588 <smp_sap_hci_encryption_change_evt_hndl>:
10062588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006258a:	460e      	mov	r6, r1
1006258c:	4605      	mov	r5, r0
1006258e:	4610      	mov	r0, r2
10062590:	f005 f8e4 	bl	1006775c <smp_get_remote_device_list_item>
10062594:	2800      	cmp	r0, #0
10062596:	d056      	beq.n	10062646 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10062598:	4604      	mov	r4, r0
1006259a:	4607      	mov	r7, r0
1006259c:	2e00      	cmp	r6, #0
1006259e:	d00b      	beq.n	100625b8 <smp_sap_hci_encryption_change_evt_hndl+0x30>
100625a0:	2000      	movs	r0, #0
100625a2:	72b8      	strb	r0, [r7, #10]
100625a4:	3408      	adds	r4, #8
100625a6:	2201      	movs	r2, #1
100625a8:	2d06      	cmp	r5, #6
100625aa:	d132      	bne.n	10062612 <smp_sap_hci_encryption_change_evt_hndl+0x8a>
100625ac:	8939      	ldrh	r1, [r7, #8]
100625ae:	4615      	mov	r5, r2
100625b0:	2e06      	cmp	r6, #6
100625b2:	d00e      	beq.n	100625d2 <smp_sap_hci_encryption_change_evt_hndl+0x4a>
100625b4:	2205      	movs	r2, #5
100625b6:	e00d      	b.n	100625d4 <smp_sap_hci_encryption_change_evt_hndl+0x4c>
100625b8:	7af9      	ldrb	r1, [r7, #11]
100625ba:	2001      	movs	r0, #1
100625bc:	4308      	orrs	r0, r1
100625be:	72f8      	strb	r0, [r7, #11]
100625c0:	7cf9      	ldrb	r1, [r7, #19]
100625c2:	1e89      	subs	r1, r1, #2
100625c4:	2902      	cmp	r1, #2
100625c6:	d810      	bhi.n	100625ea <smp_sap_hci_encryption_change_evt_hndl+0x62>
100625c8:	7df9      	ldrb	r1, [r7, #23]
100625ca:	0709      	lsls	r1, r1, #28
100625cc:	d508      	bpl.n	100625e0 <smp_sap_hci_encryption_change_evt_hndl+0x58>
100625ce:	2104      	movs	r1, #4
100625d0:	e007      	b.n	100625e2 <smp_sap_hci_encryption_change_evt_hndl+0x5a>
100625d2:	2204      	movs	r2, #4
100625d4:	2002      	movs	r0, #2
100625d6:	2300      	movs	r3, #0
100625d8:	f001 ff36 	bl	10064448 <aci_gap_pairing_complete_event_push_noinline>
100625dc:	462a      	mov	r2, r5
100625de:	e018      	b.n	10062612 <smp_sap_hci_encryption_change_evt_hndl+0x8a>
100625e0:	2102      	movs	r1, #2
100625e2:	22f9      	movs	r2, #249	@ 0xf9
100625e4:	4010      	ands	r0, r2
100625e6:	1840      	adds	r0, r0, r1
100625e8:	72f8      	strb	r0, [r7, #11]
100625ea:	7ab8      	ldrb	r0, [r7, #10]
100625ec:	28ad      	cmp	r0, #173	@ 0xad
100625ee:	d005      	beq.n	100625fc <smp_sap_hci_encryption_change_evt_hndl+0x74>
100625f0:	28ae      	cmp	r0, #174	@ 0xae
100625f2:	d005      	beq.n	10062600 <smp_sap_hci_encryption_change_evt_hndl+0x78>
100625f4:	28bc      	cmp	r0, #188	@ 0xbc
100625f6:	d127      	bne.n	10062648 <smp_sap_hci_encryption_change_evt_hndl+0xc0>
100625f8:	20bf      	movs	r0, #191	@ 0xbf
100625fa:	e002      	b.n	10062602 <smp_sap_hci_encryption_change_evt_hndl+0x7a>
100625fc:	20af      	movs	r0, #175	@ 0xaf
100625fe:	e000      	b.n	10062602 <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10062600:	20f0      	movs	r0, #240	@ 0xf0
10062602:	72b8      	strb	r0, [r7, #10]
10062604:	3408      	adds	r4, #8
10062606:	200e      	movs	r0, #14
10062608:	f000 fab4 	bl	10062b74 <tsk_notify_idx>
1006260c:	f7ef fc35 	bl	10051e7a <BLE_STACK_ProcessRequest>
10062610:	2200      	movs	r2, #0
10062612:	2060      	movs	r0, #96	@ 0x60
10062614:	5c38      	ldrb	r0, [r7, r0]
10062616:	07c0      	lsls	r0, r0, #31
10062618:	d10b      	bne.n	10062632 <smp_sap_hci_encryption_change_evt_hndl+0xaa>
1006261a:	7eb8      	ldrb	r0, [r7, #26]
1006261c:	06c1      	lsls	r1, r0, #27
1006261e:	d505      	bpl.n	1006262c <smp_sap_hci_encryption_change_evt_hndl+0xa4>
10062620:	21ef      	movs	r1, #239	@ 0xef
10062622:	4001      	ands	r1, r0
10062624:	76b9      	strb	r1, [r7, #26]
10062626:	b241      	sxtb	r1, r0
10062628:	2900      	cmp	r1, #0
1006262a:	d418      	bmi.n	1006265e <smp_sap_hci_encryption_change_evt_hndl+0xd6>
1006262c:	2a00      	cmp	r2, #0
1006262e:	d119      	bne.n	10062664 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10062630:	e009      	b.n	10062646 <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10062632:	7e38      	ldrb	r0, [r7, #24]
10062634:	21fc      	movs	r1, #252	@ 0xfc
10062636:	4001      	ands	r1, r0
10062638:	7639      	strb	r1, [r7, #24]
1006263a:	2103      	movs	r1, #3
1006263c:	4001      	ands	r1, r0
1006263e:	1e48      	subs	r0, r1, #1
10062640:	4181      	sbcs	r1, r0
10062642:	430a      	orrs	r2, r1
10062644:	d10e      	bne.n	10062664 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10062646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062648:	2d06      	cmp	r5, #6
1006264a:	d1db      	bne.n	10062604 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
1006264c:	28f1      	cmp	r0, #241	@ 0xf1
1006264e:	d1d9      	bne.n	10062604 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10062650:	8939      	ldrh	r1, [r7, #8]
10062652:	2002      	movs	r0, #2
10062654:	2200      	movs	r2, #0
10062656:	4613      	mov	r3, r2
10062658:	f001 fef6 	bl	10064448 <aci_gap_pairing_complete_event_push_noinline>
1006265c:	e7d2      	b.n	10062604 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
1006265e:	216f      	movs	r1, #111	@ 0x6f
10062660:	4008      	ands	r0, r1
10062662:	76b8      	strb	r0, [r7, #26]
10062664:	8820      	ldrh	r0, [r4, #0]
10062666:	f005 f859 	bl	1006771c <smp_get_remote_device_list_index>
1006266a:	4602      	mov	r2, r0
1006266c:	2001      	movs	r0, #1
1006266e:	2100      	movs	r1, #0
10062670:	4b01      	ldr	r3, [pc, #4]	@ (10062678 <__arm_cp.4_0>)
10062672:	f7ff fd1b 	bl	100620ac <smp_timer_reset>
10062676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062678 <__arm_cp.4_0>:
10062678:	00007530 	.word	0x00007530

1006267c <smp_sap_hci_disconnection_complete_evt_hndl>:
1006267c:	b510      	push	{r4, lr}
1006267e:	f005 f86d 	bl	1006775c <smp_get_remote_device_list_item>
10062682:	2800      	cmp	r0, #0
10062684:	d025      	beq.n	100626d2 <smp_sap_hci_disconnection_complete_evt_hndl+0x56>
10062686:	4604      	mov	r4, r0
10062688:	8900      	ldrh	r0, [r0, #8]
1006268a:	f005 f847 	bl	1006771c <smp_get_remote_device_list_index>
1006268e:	4602      	mov	r2, r0
10062690:	2001      	movs	r0, #1
10062692:	2100      	movs	r1, #0
10062694:	4b0f      	ldr	r3, [pc, #60]	@ (100626d4 <__arm_cp.5_0>)
10062696:	f7ff fd09 	bl	100620ac <smp_timer_reset>
1006269a:	8920      	ldrh	r0, [r4, #8]
1006269c:	f7ff fcca 	bl	10062034 <smp_rxp_flush_packet_queues>
100626a0:	2060      	movs	r0, #96	@ 0x60
100626a2:	5c20      	ldrb	r0, [r4, r0]
100626a4:	07c0      	lsls	r0, r0, #31
100626a6:	7aa0      	ldrb	r0, [r4, #10]
100626a8:	d104      	bne.n	100626b4 <smp_sap_hci_disconnection_complete_evt_hndl+0x38>
100626aa:	3060      	adds	r0, #96	@ 0x60
100626ac:	b2c0      	uxtb	r0, r0
100626ae:	2851      	cmp	r0, #81	@ 0x51
100626b0:	d304      	bcc.n	100626bc <smp_sap_hci_disconnection_complete_evt_hndl+0x40>
100626b2:	e007      	b.n	100626c4 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
100626b4:	3050      	adds	r0, #80	@ 0x50
100626b6:	b2c0      	uxtb	r0, r0
100626b8:	2840      	cmp	r0, #64	@ 0x40
100626ba:	d803      	bhi.n	100626c4 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
100626bc:	2102      	movs	r1, #2
100626be:	4620      	mov	r0, r4
100626c0:	f004 f8ea 	bl	10066898 <smp_pp3_pairing_completed_update_stats>
100626c4:	20fe      	movs	r0, #254	@ 0xfe
100626c6:	72a0      	strb	r0, [r4, #10]
100626c8:	200e      	movs	r0, #14
100626ca:	f000 fa53 	bl	10062b74 <tsk_notify_idx>
100626ce:	f7ef fbd4 	bl	10051e7a <BLE_STACK_ProcessRequest>
100626d2:	bd10      	pop	{r4, pc}

100626d4 <__arm_cp.5_0>:
100626d4:	00007530 	.word	0x00007530

100626d8 <smp_sap_scp_force_debug_key_usage>:
100626d8:	b5b0      	push	{r4, r5, r7, lr}
100626da:	4605      	mov	r5, r0
100626dc:	2400      	movs	r4, #0
100626de:	4620      	mov	r0, r4
100626e0:	f005 f888 	bl	100677f4 <smp_scp_is_another_sc_pairing_ongoing>
100626e4:	2800      	cmp	r0, #0
100626e6:	d001      	beq.n	100626ec <smp_sap_scp_force_debug_key_usage+0x14>
100626e8:	240c      	movs	r4, #12
100626ea:	e004      	b.n	100626f6 <smp_sap_scp_force_debug_key_usage+0x1e>
100626ec:	2d01      	cmp	r5, #1
100626ee:	d102      	bne.n	100626f6 <smp_sap_scp_force_debug_key_usage+0x1e>
100626f0:	2001      	movs	r0, #1
100626f2:	f005 f89f 	bl	10067834 <smp_scp_init_ucfg_weak>
100626f6:	4620      	mov	r0, r4
100626f8:	bdb0      	pop	{r4, r5, r7, pc}

100626fa <secure_connections_csr_ucfg_weak>:
100626fa:	2000      	movs	r0, #0
100626fc:	4770      	bx	lr

100626fe <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>:
100626fe:	4770      	bx	lr

10062700 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>:
10062700:	4770      	bx	lr
	...

10062704 <smp_sap_l2c_acl_data_hndl>:
10062704:	b5b0      	push	{r4, r5, r7, lr}
10062706:	460c      	mov	r4, r1
10062708:	4605      	mov	r5, r0
1006270a:	8808      	ldrh	r0, [r1, #0]
1006270c:	f005 f826 	bl	1006775c <smp_get_remote_device_list_item>
10062710:	2800      	cmp	r0, #0
10062712:	d025      	beq.n	10062760 <smp_sap_l2c_acl_data_hndl+0x5c>
10062714:	2d00      	cmp	r5, #0
10062716:	d00f      	beq.n	10062738 <smp_sap_l2c_acl_data_hndl+0x34>
10062718:	2d01      	cmp	r5, #1
1006271a:	d121      	bne.n	10062760 <smp_sap_l2c_acl_data_hndl+0x5c>
1006271c:	8860      	ldrh	r0, [r4, #2]
1006271e:	2841      	cmp	r0, #65	@ 0x41
10062720:	d81e      	bhi.n	10062760 <smp_sap_l2c_acl_data_hndl+0x5c>
10062722:	4812      	ldr	r0, [pc, #72]	@ (1006276c <__arm_cp.0_0>)
10062724:	6800      	ldr	r0, [r0, #0]
10062726:	4621      	mov	r1, r4
10062728:	f000 fc1a 	bl	10062f60 <ACL_list_insert_tail>
1006272c:	200f      	movs	r0, #15
1006272e:	f000 fa21 	bl	10062b74 <tsk_notify_idx>
10062732:	f7ef fba2 	bl	10051e7a <BLE_STACK_ProcessRequest>
10062736:	e016      	b.n	10062766 <smp_sap_l2c_acl_data_hndl+0x62>
10062738:	6861      	ldr	r1, [r4, #4]
1006273a:	7a09      	ldrb	r1, [r1, #8]
1006273c:	290b      	cmp	r1, #11
1006273e:	d109      	bne.n	10062754 <smp_sap_l2c_acl_data_hndl+0x50>
10062740:	7e01      	ldrb	r1, [r0, #24]
10062742:	2203      	movs	r2, #3
10062744:	400a      	ands	r2, r1
10062746:	2a01      	cmp	r2, #1
10062748:	d10a      	bne.n	10062760 <smp_sap_l2c_acl_data_hndl+0x5c>
1006274a:	22fc      	movs	r2, #252	@ 0xfc
1006274c:	4011      	ands	r1, r2
1006274e:	1c89      	adds	r1, r1, #2
10062750:	7601      	strb	r1, [r0, #24]
10062752:	e005      	b.n	10062760 <smp_sap_l2c_acl_data_hndl+0x5c>
10062754:	1f8a      	subs	r2, r1, #6
10062756:	b2d2      	uxtb	r2, r2
10062758:	2a04      	cmp	r2, #4
1006275a:	d801      	bhi.n	10062760 <smp_sap_l2c_acl_data_hndl+0x5c>
1006275c:	f004 fe0c 	bl	10067378 <smp_pp3_keys_distribution_signaling_ack>
10062760:	4620      	mov	r0, r4
10062762:	f7f2 fd09 	bl	10055178 <ACL_pkt_release>
10062766:	2000      	movs	r0, #0
10062768:	bdb0      	pop	{r4, r5, r7, pc}
1006276a:	46c0      	nop			@ (mov r8, r8)

1006276c <__arm_cp.0_0>:
1006276c:	200024b4 	.word	0x200024b4

10062770 <smp_get_sec_level_for_mode1>:
10062770:	b510      	push	{r4, lr}
10062772:	7ac3      	ldrb	r3, [r0, #11]
10062774:	075c      	lsls	r4, r3, #29
10062776:	0fa2      	lsrs	r2, r4, #30
10062778:	d009      	beq.n	1006278e <smp_get_sec_level_for_mode1+0x1e>
1006277a:	2201      	movs	r2, #1
1006277c:	4013      	ands	r3, r2
1006277e:	425a      	negs	r2, r3
10062780:	415a      	adcs	r2, r3
10062782:	7c03      	ldrb	r3, [r0, #16]
10062784:	2003      	movs	r0, #3
10062786:	2b10      	cmp	r3, #16
10062788:	d009      	beq.n	1006279e <smp_get_sec_level_for_mode1+0x2e>
1006278a:	4603      	mov	r3, r0
1006278c:	e008      	b.n	100627a0 <smp_get_sec_level_for_mode1+0x30>
1006278e:	07da      	lsls	r2, r3, #31
10062790:	d10a      	bne.n	100627a8 <smp_get_sec_level_for_mode1+0x38>
10062792:	7a80      	ldrb	r0, [r0, #10]
10062794:	2201      	movs	r2, #1
10062796:	28f1      	cmp	r0, #241	@ 0xf1
10062798:	d009      	beq.n	100627ae <smp_get_sec_level_for_mode1+0x3e>
1006279a:	4613      	mov	r3, r2
1006279c:	e008      	b.n	100627b0 <smp_get_sec_level_for_mode1+0x40>
1006279e:	2304      	movs	r3, #4
100627a0:	2c00      	cmp	r4, #0
100627a2:	d405      	bmi.n	100627b0 <smp_get_sec_level_for_mode1+0x40>
100627a4:	4603      	mov	r3, r0
100627a6:	e003      	b.n	100627b0 <smp_get_sec_level_for_mode1+0x40>
100627a8:	2302      	movs	r3, #2
100627aa:	2200      	movs	r2, #0
100627ac:	e000      	b.n	100627b0 <smp_get_sec_level_for_mode1+0x40>
100627ae:	2302      	movs	r3, #2
100627b0:	2a00      	cmp	r2, #0
100627b2:	d101      	bne.n	100627b8 <smp_get_sec_level_for_mode1+0x48>
100627b4:	4618      	mov	r0, r3
100627b6:	e000      	b.n	100627ba <smp_get_sec_level_for_mode1+0x4a>
100627b8:	2001      	movs	r0, #1
100627ba:	2900      	cmp	r1, #0
100627bc:	d000      	beq.n	100627c0 <smp_get_sec_level_for_mode1+0x50>
100627be:	4618      	mov	r0, r3
100627c0:	bd10      	pop	{r4, pc}

100627c2 <smp_sap_get_security_level>:
100627c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100627c4:	461c      	mov	r4, r3
100627c6:	4616      	mov	r6, r2
100627c8:	460d      	mov	r5, r1
100627ca:	2100      	movs	r1, #0
100627cc:	7029      	strb	r1, [r5, #0]
100627ce:	7011      	strb	r1, [r2, #0]
100627d0:	7019      	strb	r1, [r3, #0]
100627d2:	f004 ffc3 	bl	1006775c <smp_get_remote_device_list_item>
100627d6:	2800      	cmp	r0, #0
100627d8:	d017      	beq.n	1006280a <smp_sap_get_security_level+0x48>
100627da:	4607      	mov	r7, r0
100627dc:	2101      	movs	r1, #1
100627de:	7029      	strb	r1, [r5, #0]
100627e0:	7a80      	ldrb	r0, [r0, #10]
100627e2:	28f1      	cmp	r0, #241	@ 0xf1
100627e4:	d110      	bne.n	10062808 <smp_sap_get_security_level+0x46>
100627e6:	9100      	str	r1, [sp, #0]
100627e8:	2100      	movs	r1, #0
100627ea:	4638      	mov	r0, r7
100627ec:	f7ff ffc0 	bl	10062770 <smp_get_sec_level_for_mode1>
100627f0:	7030      	strb	r0, [r6, #0]
100627f2:	2801      	cmp	r0, #1
100627f4:	d109      	bne.n	1006280a <smp_sap_get_security_level+0x48>
100627f6:	2002      	movs	r0, #2
100627f8:	7028      	strb	r0, [r5, #0]
100627fa:	7af9      	ldrb	r1, [r7, #11]
100627fc:	0749      	lsls	r1, r1, #29
100627fe:	0f89      	lsrs	r1, r1, #30
10062800:	d100      	bne.n	10062804 <smp_sap_get_security_level+0x42>
10062802:	9800      	ldr	r0, [sp, #0]
10062804:	7020      	strb	r0, [r4, #0]
10062806:	e000      	b.n	1006280a <smp_sap_get_security_level+0x48>
10062808:	7031      	strb	r1, [r6, #0]
1006280a:	2000      	movs	r0, #0
1006280c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006280e <smp_sap_get_remote_address_check_addr_type>:
1006280e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062810:	461c      	mov	r4, r3
10062812:	4615      	mov	r5, r2
10062814:	460f      	mov	r7, r1
10062816:	f004 ffa1 	bl	1006775c <smp_get_remote_device_list_item>
1006281a:	2800      	cmp	r0, #0
1006281c:	d016      	beq.n	1006284c <smp_sap_get_remote_address_check_addr_type+0x3e>
1006281e:	4606      	mov	r6, r0
10062820:	1c81      	adds	r1, r0, #2
10062822:	2206      	movs	r2, #6
10062824:	4628      	mov	r0, r5
10062826:	f7f0 f90f 	bl	10052a48 <BLEPLAT_MemCpy>
1006282a:	7870      	ldrb	r0, [r6, #1]
1006282c:	4669      	mov	r1, sp
1006282e:	7008      	strb	r0, [r1, #0]
10062830:	2f00      	cmp	r7, #0
10062832:	d01f      	beq.n	10062874 <smp_sap_get_remote_address_check_addr_type+0x66>
10062834:	2800      	cmp	r0, #0
10062836:	d01d      	beq.n	10062874 <smp_sap_get_remote_address_check_addr_type+0x66>
10062838:	2801      	cmp	r0, #1
1006283a:	d109      	bne.n	10062850 <smp_sap_get_remote_address_check_addr_type+0x42>
1006283c:	79f1      	ldrb	r1, [r6, #7]
1006283e:	098a      	lsrs	r2, r1, #6
10062840:	2001      	movs	r0, #1
10062842:	2a02      	cmp	r2, #2
10062844:	d816      	bhi.n	10062874 <smp_sap_get_remote_address_check_addr_type+0x66>
10062846:	2940      	cmp	r1, #64	@ 0x40
10062848:	d203      	bcs.n	10062852 <smp_sap_get_remote_address_check_addr_type+0x44>
1006284a:	e013      	b.n	10062874 <smp_sap_get_remote_address_check_addr_type+0x66>
1006284c:	2002      	movs	r0, #2
1006284e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062850:	79f1      	ldrb	r1, [r6, #7]
10062852:	20c0      	movs	r0, #192	@ 0xc0
10062854:	4008      	ands	r0, r1
10062856:	2840      	cmp	r0, #64	@ 0x40
10062858:	d108      	bne.n	1006286c <smp_sap_get_remote_address_check_addr_type+0x5e>
1006285a:	4669      	mov	r1, sp
1006285c:	4630      	mov	r0, r6
1006285e:	462a      	mov	r2, r5
10062860:	f003 ff88 	bl	10066774 <smp_dep_sdb_find_bonding_record_read_address>
10062864:	2800      	cmp	r0, #0
10062866:	d003      	beq.n	10062870 <smp_sap_get_remote_address_check_addr_type+0x62>
10062868:	2081      	movs	r0, #129	@ 0x81
1006286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006286c:	2086      	movs	r0, #134	@ 0x86
1006286e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062870:	4668      	mov	r0, sp
10062872:	7800      	ldrb	r0, [r0, #0]
10062874:	7020      	strb	r0, [r4, #0]
10062876:	2000      	movs	r0, #0
10062878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006287a <smp_sap_check_is_peer_device_bonded>:
1006287a:	b5b0      	push	{r4, r5, r7, lr}
1006287c:	f004 ff6e 	bl	1006775c <smp_get_remote_device_list_item>
10062880:	2800      	cmp	r0, #0
10062882:	d011      	beq.n	100628a8 <smp_sap_check_is_peer_device_bonded+0x2e>
10062884:	4604      	mov	r4, r0
10062886:	2500      	movs	r5, #0
10062888:	4629      	mov	r1, r5
1006288a:	f003 ff1b 	bl	100666c4 <smp_dep_sdb_find_bonding_record_by_conn_addr>
1006288e:	2800      	cmp	r0, #0
10062890:	d00b      	beq.n	100628aa <smp_sap_check_is_peer_device_bonded+0x30>
10062892:	7aa1      	ldrb	r1, [r4, #10]
10062894:	29f1      	cmp	r1, #241	@ 0xf1
10062896:	d105      	bne.n	100628a4 <smp_sap_check_is_peer_device_bonded+0x2a>
10062898:	7ba1      	ldrb	r1, [r4, #14]
1006289a:	07ca      	lsls	r2, r1, #31
1006289c:	d002      	beq.n	100628a4 <smp_sap_check_is_peer_device_bonded+0x2a>
1006289e:	0789      	lsls	r1, r1, #30
100628a0:	d500      	bpl.n	100628a4 <smp_sap_check_is_peer_device_bonded+0x2a>
100628a2:	2000      	movs	r0, #0
100628a4:	4605      	mov	r5, r0
100628a6:	e000      	b.n	100628aa <smp_sap_check_is_peer_device_bonded+0x30>
100628a8:	2502      	movs	r5, #2
100628aa:	4628      	mov	r0, r5
100628ac:	bdb0      	pop	{r4, r5, r7, pc}

100628ae <smp_sap_check_encryption_key_size>:
100628ae:	b510      	push	{r4, lr}
100628b0:	460c      	mov	r4, r1
100628b2:	f004 ff53 	bl	1006775c <smp_get_remote_device_list_item>
100628b6:	2800      	cmp	r0, #0
100628b8:	d005      	beq.n	100628c6 <smp_sap_check_encryption_key_size+0x18>
100628ba:	7a81      	ldrb	r1, [r0, #10]
100628bc:	29f1      	cmp	r1, #241	@ 0xf1
100628be:	d102      	bne.n	100628c6 <smp_sap_check_encryption_key_size+0x18>
100628c0:	7c00      	ldrb	r0, [r0, #16]
100628c2:	42a0      	cmp	r0, r4
100628c4:	d201      	bcs.n	100628ca <smp_sap_check_encryption_key_size+0x1c>
100628c6:	20b6      	movs	r0, #182	@ 0xb6
100628c8:	bd10      	pop	{r4, pc}
100628ca:	2000      	movs	r0, #0
100628cc:	bd10      	pop	{r4, pc}

100628ce <smp_sap_forget_device_upon_disconnection>:
100628ce:	b580      	push	{r7, lr}
100628d0:	f004 ff44 	bl	1006775c <smp_get_remote_device_list_item>
100628d4:	2800      	cmp	r0, #0
100628d6:	d006      	beq.n	100628e6 <smp_sap_forget_device_upon_disconnection+0x18>
100628d8:	2160      	movs	r1, #96	@ 0x60
100628da:	5c42      	ldrb	r2, [r0, r1]
100628dc:	2380      	movs	r3, #128	@ 0x80
100628de:	4313      	orrs	r3, r2
100628e0:	5443      	strb	r3, [r0, r1]
100628e2:	2000      	movs	r0, #0
100628e4:	bd80      	pop	{r7, pc}
100628e6:	2081      	movs	r0, #129	@ 0x81
100628e8:	bd80      	pop	{r7, pc}

100628ea <smp_sap_sm2_packet_data_signing_compute>:
100628ea:	b5f0      	push	{r4, r5, r6, r7, lr}
100628ec:	b089      	sub	sp, #36	@ 0x24
100628ee:	460e      	mov	r6, r1
100628f0:	f004 ff34 	bl	1006775c <smp_get_remote_device_list_item>
100628f4:	2800      	cmp	r0, #0
100628f6:	d025      	beq.n	10062944 <smp_sap_sm2_packet_data_signing_compute+0x5a>
100628f8:	4605      	mov	r5, r0
100628fa:	301c      	adds	r0, #28
100628fc:	a905      	add	r1, sp, #20
100628fe:	9100      	str	r1, [sp, #0]
10062900:	f7ff f92c 	bl	10061b5c <smp_crt_generate_csrk>
10062904:	8874      	ldrh	r4, [r6, #2]
10062906:	462b      	mov	r3, r5
10062908:	3368      	adds	r3, #104	@ 0x68
1006290a:	1d27      	adds	r7, r4, #4
1006290c:	b2b9      	uxth	r1, r7
1006290e:	2204      	movs	r2, #4
10062910:	4630      	mov	r0, r6
10062912:	f7f2 fc6f 	bl	100551f4 <ACL_pkt_write>
10062916:	b2fa      	uxtb	r2, r7
10062918:	af01      	add	r7, sp, #4
1006291a:	9800      	ldr	r0, [sp, #0]
1006291c:	4631      	mov	r1, r6
1006291e:	463b      	mov	r3, r7
10062920:	f7ff f92a 	bl	10061b78 <smp_crt_generate_cmac_tag>
10062924:	3708      	adds	r7, #8
10062926:	4620      	mov	r0, r4
10062928:	3008      	adds	r0, #8
1006292a:	b281      	uxth	r1, r0
1006292c:	2208      	movs	r2, #8
1006292e:	4630      	mov	r0, r6
10062930:	463b      	mov	r3, r7
10062932:	f7f2 fc5f 	bl	100551f4 <ACL_pkt_write>
10062936:	340c      	adds	r4, #12
10062938:	8074      	strh	r4, [r6, #2]
1006293a:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
1006293c:	1c40      	adds	r0, r0, #1
1006293e:	66a8      	str	r0, [r5, #104]	@ 0x68
10062940:	2000      	movs	r0, #0
10062942:	e000      	b.n	10062946 <smp_sap_sm2_packet_data_signing_compute+0x5c>
10062944:	2002      	movs	r0, #2
10062946:	b009      	add	sp, #36	@ 0x24
10062948:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006294a <smp_sap_sm2_packet_data_signing_validate>:
1006294a:	b5f0      	push	{r4, r5, r6, r7, lr}
1006294c:	b08d      	sub	sp, #52	@ 0x34
1006294e:	460d      	mov	r5, r1
10062950:	884f      	ldrh	r7, [r1, #2]
10062952:	f004 ff03 	bl	1006775c <smp_get_remote_device_list_item>
10062956:	2800      	cmp	r0, #0
10062958:	d005      	beq.n	10062966 <smp_sap_sm2_packet_data_signing_validate+0x1c>
1006295a:	4604      	mov	r4, r0
1006295c:	7c40      	ldrb	r0, [r0, #17]
1006295e:	0640      	lsls	r0, r0, #25
10062960:	d403      	bmi.n	1006296a <smp_sap_sm2_packet_data_signing_validate+0x20>
10062962:	20b1      	movs	r0, #177	@ 0xb1
10062964:	e034      	b.n	100629d0 <smp_sap_sm2_packet_data_signing_validate+0x86>
10062966:	2002      	movs	r0, #2
10062968:	e032      	b.n	100629d0 <smp_sap_sm2_packet_data_signing_validate+0x86>
1006296a:	4621      	mov	r1, r4
1006296c:	3148      	adds	r1, #72	@ 0x48
1006296e:	a805      	add	r0, sp, #20
10062970:	2210      	movs	r2, #16
10062972:	f7f0 f869 	bl	10052a48 <BLEPLAT_MemCpy>
10062976:	3f08      	subs	r7, #8
10062978:	b2b9      	uxth	r1, r7
1006297a:	220c      	movs	r2, #12
1006297c:	ae02      	add	r6, sp, #8
1006297e:	4628      	mov	r0, r5
10062980:	4633      	mov	r3, r6
10062982:	f7f2 fc15 	bl	100551b0 <ACL_pkt_read>
10062986:	7830      	ldrb	r0, [r6, #0]
10062988:	7871      	ldrb	r1, [r6, #1]
1006298a:	0209      	lsls	r1, r1, #8
1006298c:	1808      	adds	r0, r1, r0
1006298e:	78b1      	ldrb	r1, [r6, #2]
10062990:	0409      	lsls	r1, r1, #16
10062992:	1840      	adds	r0, r0, r1
10062994:	78f1      	ldrb	r1, [r6, #3]
10062996:	0609      	lsls	r1, r1, #24
10062998:	1841      	adds	r1, r0, r1
1006299a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
1006299c:	4281      	cmp	r1, r0
1006299e:	d801      	bhi.n	100629a4 <smp_sap_sm2_packet_data_signing_validate+0x5a>
100629a0:	1c40      	adds	r0, r0, #1
100629a2:	d110      	bne.n	100629c6 <smp_sap_sm2_packet_data_signing_validate+0x7c>
100629a4:	9101      	str	r1, [sp, #4]
100629a6:	b2fa      	uxtb	r2, r7
100629a8:	a805      	add	r0, sp, #20
100629aa:	ae09      	add	r6, sp, #36	@ 0x24
100629ac:	4629      	mov	r1, r5
100629ae:	4633      	mov	r3, r6
100629b0:	f7ff f8e2 	bl	10061b78 <smp_crt_generate_cmac_tag>
100629b4:	a802      	add	r0, sp, #8
100629b6:	1d00      	adds	r0, r0, #4
100629b8:	3608      	adds	r6, #8
100629ba:	2208      	movs	r2, #8
100629bc:	4631      	mov	r1, r6
100629be:	f7f0 f863 	bl	10052a88 <BLEPLAT_MemCmp>
100629c2:	2800      	cmp	r0, #0
100629c4:	d001      	beq.n	100629ca <smp_sap_sm2_packet_data_signing_validate+0x80>
100629c6:	2005      	movs	r0, #5
100629c8:	e002      	b.n	100629d0 <smp_sap_sm2_packet_data_signing_validate+0x86>
100629ca:	9801      	ldr	r0, [sp, #4]
100629cc:	66e0      	str	r0, [r4, #108]	@ 0x6c
100629ce:	2000      	movs	r0, #0
100629d0:	b00d      	add	sp, #52	@ 0x34
100629d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100629d4 <nvm_gatt_db_read_init>:
100629d4:	4801      	ldr	r0, [pc, #4]	@ (100629dc <__arm_cp.0_0>)
100629d6:	2100      	movs	r1, #0
100629d8:	7001      	strb	r1, [r0, #0]
100629da:	4770      	bx	lr

100629dc <__arm_cp.0_0>:
100629dc:	200024b8 	.word	0x200024b8

100629e0 <nvm_gatt_db_read_next_record>:
100629e0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100629e2:	4603      	mov	r3, r0
100629e4:	4d06      	ldr	r5, [pc, #24]	@ (10062a00 <__arm_cp.1_0>)
100629e6:	7828      	ldrb	r0, [r5, #0]
100629e8:	210c      	movs	r1, #12
100629ea:	9100      	str	r1, [sp, #0]
100629ec:	2401      	movs	r4, #1
100629ee:	2200      	movs	r2, #0
100629f0:	4621      	mov	r1, r4
100629f2:	f7ef ff61 	bl	100528b8 <BLEPLAT_NvmGet>
100629f6:	702c      	strb	r4, [r5, #0]
100629f8:	f000 f804 	bl	10062a04 <nvm_convert_bleplat_to_blestack_status>
100629fc:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100629fe:	46c0      	nop			@ (mov r8, r8)

10062a00 <__arm_cp.1_0>:
10062a00:	200024b8 	.word	0x200024b8

10062a04 <nvm_convert_bleplat_to_blestack_status>:
10062a04:	1cc0      	adds	r0, r0, #3
10062a06:	b2c0      	uxtb	r0, r0
10062a08:	2804      	cmp	r0, #4
10062a0a:	d302      	bcc.n	10062a12 <nvm_convert_bleplat_to_blestack_status+0xe>
10062a0c:	207e      	movs	r0, #126	@ 0x7e
10062a0e:	43c0      	mvns	r0, r0
10062a10:	e002      	b.n	10062a18 <nvm_convert_bleplat_to_blestack_status+0x14>
10062a12:	00c1      	lsls	r1, r0, #3
10062a14:	4801      	ldr	r0, [pc, #4]	@ (10062a1c <__arm_cp.2_0>)
10062a16:	40c8      	lsrs	r0, r1
10062a18:	b2c0      	uxtb	r0, r0
10062a1a:	4770      	bx	lr

10062a1c <__arm_cp.2_0>:
10062a1c:	00b4b7b3 	.word	0x00b4b7b3

10062a20 <nvm_gatt_db_read_full_current_record>:
10062a20:	b5e0      	push	{r5, r6, r7, lr}
10062a22:	4603      	mov	r3, r0
10062a24:	9100      	str	r1, [sp, #0]
10062a26:	2002      	movs	r0, #2
10062a28:	2101      	movs	r1, #1
10062a2a:	220c      	movs	r2, #12
10062a2c:	f7ef ff44 	bl	100528b8 <BLEPLAT_NvmGet>
10062a30:	f7ff ffe8 	bl	10062a04 <nvm_convert_bleplat_to_blestack_status>
10062a34:	bd8c      	pop	{r2, r3, r7, pc}

10062a36 <nvm_gatt_db_update_record>:
10062a36:	b5e0      	push	{r5, r6, r7, lr}
10062a38:	460b      	mov	r3, r1
10062a3a:	4601      	mov	r1, r0
10062a3c:	8900      	ldrh	r0, [r0, #8]
10062a3e:	9000      	str	r0, [sp, #0]
10062a40:	2001      	movs	r0, #1
10062a42:	220c      	movs	r2, #12
10062a44:	f7ef feea 	bl	1005281c <BLEPLAT_NvmAdd>
10062a48:	f7ff ffdc 	bl	10062a04 <nvm_convert_bleplat_to_blestack_status>
10062a4c:	bd8c      	pop	{r2, r3, r7, pc}
	...

10062a50 <nvm_sec_db_read_init>:
10062a50:	4801      	ldr	r0, [pc, #4]	@ (10062a58 <__arm_cp.5_0>)
10062a52:	2100      	movs	r1, #0
10062a54:	7001      	strb	r1, [r0, #0]
10062a56:	4770      	bx	lr

10062a58 <__arm_cp.5_0>:
10062a58:	200024b9 	.word	0x200024b9

10062a5c <nvm_sec_db_read_next_record>:
10062a5c:	b51c      	push	{r2, r3, r4, lr}
10062a5e:	4603      	mov	r3, r0
10062a60:	4c06      	ldr	r4, [pc, #24]	@ (10062a7c <__arm_cp.6_0>)
10062a62:	7820      	ldrb	r0, [r4, #0]
10062a64:	2150      	movs	r1, #80	@ 0x50
10062a66:	9100      	str	r1, [sp, #0]
10062a68:	2100      	movs	r1, #0
10062a6a:	460a      	mov	r2, r1
10062a6c:	f7ef ff24 	bl	100528b8 <BLEPLAT_NvmGet>
10062a70:	2101      	movs	r1, #1
10062a72:	7021      	strb	r1, [r4, #0]
10062a74:	f7ff ffc6 	bl	10062a04 <nvm_convert_bleplat_to_blestack_status>
10062a78:	bd1c      	pop	{r2, r3, r4, pc}
10062a7a:	46c0      	nop			@ (mov r8, r8)

10062a7c <__arm_cp.6_0>:
10062a7c:	200024b9 	.word	0x200024b9

10062a80 <nvm_sec_db_add_record>:
10062a80:	b5e0      	push	{r5, r6, r7, lr}
10062a82:	4601      	mov	r1, r0
10062a84:	2000      	movs	r0, #0
10062a86:	9000      	str	r0, [sp, #0]
10062a88:	2250      	movs	r2, #80	@ 0x50
10062a8a:	4603      	mov	r3, r0
10062a8c:	f7ef fec6 	bl	1005281c <BLEPLAT_NvmAdd>
10062a90:	f7ff ffb8 	bl	10062a04 <nvm_convert_bleplat_to_blestack_status>
10062a94:	bd8c      	pop	{r2, r3, r7, pc}

10062a96 <nvm_sec_db_get_record_count>:
10062a96:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10062a98:	2400      	movs	r4, #0
10062a9a:	4621      	mov	r1, r4
10062a9c:	4620      	mov	r0, r4
10062a9e:	460d      	mov	r5, r1
10062aa0:	9400      	str	r4, [sp, #0]
10062aa2:	b2c0      	uxtb	r0, r0
10062aa4:	4621      	mov	r1, r4
10062aa6:	4622      	mov	r2, r4
10062aa8:	4623      	mov	r3, r4
10062aaa:	f7ef ff05 	bl	100528b8 <BLEPLAT_NvmGet>
10062aae:	1cc2      	adds	r2, r0, #3
10062ab0:	1c69      	adds	r1, r5, #1
10062ab2:	2001      	movs	r0, #1
10062ab4:	2a00      	cmp	r2, #0
10062ab6:	d1f2      	bne.n	10062a9e <nvm_sec_db_get_record_count+0x8>
10062ab8:	b2e8      	uxtb	r0, r5
10062aba:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10062abc <nvm_discard_current_record>:
10062abc:	b580      	push	{r7, lr}
10062abe:	2002      	movs	r0, #2
10062ac0:	f7ef ff9c 	bl	100529fc <BLEPLAT_NvmDiscard>
10062ac4:	bd80      	pop	{r7, pc}

10062ac6 <nvm_dev_id_data_get_record>:
10062ac6:	b5e0      	push	{r5, r6, r7, lr}
10062ac8:	4603      	mov	r3, r0
10062aca:	2026      	movs	r0, #38	@ 0x26
10062acc:	9000      	str	r0, [sp, #0]
10062ace:	2102      	movs	r1, #2
10062ad0:	2000      	movs	r0, #0
10062ad2:	4602      	mov	r2, r0
10062ad4:	f7ef fef0 	bl	100528b8 <BLEPLAT_NvmGet>
10062ad8:	2800      	cmp	r0, #0
10062ada:	d000      	beq.n	10062ade <nvm_dev_id_data_get_record+0x18>
10062adc:	2081      	movs	r0, #129	@ 0x81
10062ade:	bd8c      	pop	{r2, r3, r7, pc}

10062ae0 <nvm_dev_id_data_add_record>:
10062ae0:	b5e0      	push	{r5, r6, r7, lr}
10062ae2:	4601      	mov	r1, r0
10062ae4:	2300      	movs	r3, #0
10062ae6:	9300      	str	r3, [sp, #0]
10062ae8:	2002      	movs	r0, #2
10062aea:	2226      	movs	r2, #38	@ 0x26
10062aec:	f7ef fe96 	bl	1005281c <BLEPLAT_NvmAdd>
10062af0:	2800      	cmp	r0, #0
10062af2:	d000      	beq.n	10062af6 <nvm_dev_id_data_add_record+0x16>
10062af4:	2081      	movs	r0, #129	@ 0x81
10062af6:	bd8c      	pop	{r2, r3, r7, pc}

10062af8 <tsk_init>:
10062af8:	4803      	ldr	r0, [pc, #12]	@ (10062b08 <__arm_cp.0_0>)
10062afa:	6800      	ldr	r0, [r0, #0]
10062afc:	2100      	movs	r1, #0
10062afe:	6081      	str	r1, [r0, #8]
10062b00:	60c1      	str	r1, [r0, #12]
10062b02:	6101      	str	r1, [r0, #16]
10062b04:	6001      	str	r1, [r0, #0]
10062b06:	4770      	bx	lr

10062b08 <__arm_cp.0_0>:
10062b08:	200024bc 	.word	0x200024bc

10062b0c <tsk_scheduler>:
10062b0c:	b570      	push	{r4, r5, r6, lr}
10062b0e:	4d17      	ldr	r5, [pc, #92]	@ (10062b6c <__arm_cp.1_0>)
10062b10:	6828      	ldr	r0, [r5, #0]
10062b12:	f3ef 8110 	mrs	r1, PRIMASK
10062b16:	b672      	cpsid	i
10062b18:	6801      	ldr	r1, [r0, #0]
10062b1a:	2600      	movs	r6, #0
10062b1c:	6006      	str	r6, [r0, #0]
10062b1e:	6842      	ldr	r2, [r0, #4]
10062b20:	430a      	orrs	r2, r1
10062b22:	6042      	str	r2, [r0, #4]
10062b24:	b662      	cpsie	i
10062b26:	682c      	ldr	r4, [r5, #0]
10062b28:	3410      	adds	r4, #16
10062b2a:	6820      	ldr	r0, [r4, #0]
10062b2c:	2800      	cmp	r0, #0
10062b2e:	d00f      	beq.n	10062b50 <tsk_scheduler+0x44>
10062b30:	4620      	mov	r0, r4
10062b32:	f000 f85b 	bl	10062bec <lsbit>
10062b36:	0080      	lsls	r0, r0, #2
10062b38:	6829      	ldr	r1, [r5, #0]
10062b3a:	1808      	adds	r0, r1, r0
10062b3c:	f3ef 8210 	mrs	r2, PRIMASK
10062b40:	b672      	cpsid	i
10062b42:	6882      	ldr	r2, [r0, #8]
10062b44:	6086      	str	r6, [r0, #8]
10062b46:	6848      	ldr	r0, [r1, #4]
10062b48:	4310      	orrs	r0, r2
10062b4a:	6048      	str	r0, [r1, #4]
10062b4c:	b662      	cpsie	i
10062b4e:	e7ec      	b.n	10062b2a <tsk_scheduler+0x1e>
10062b50:	6828      	ldr	r0, [r5, #0]
10062b52:	1d04      	adds	r4, r0, #4
10062b54:	4d06      	ldr	r5, [pc, #24]	@ (10062b70 <__arm_cp.1_1>)
10062b56:	6820      	ldr	r0, [r4, #0]
10062b58:	2800      	cmp	r0, #0
10062b5a:	d006      	beq.n	10062b6a <tsk_scheduler+0x5e>
10062b5c:	4620      	mov	r0, r4
10062b5e:	f000 f845 	bl	10062bec <lsbit>
10062b62:	0081      	lsls	r1, r0, #2
10062b64:	5869      	ldr	r1, [r5, r1]
10062b66:	4788      	blx	r1
10062b68:	e7f5      	b.n	10062b56 <tsk_scheduler+0x4a>
10062b6a:	bd70      	pop	{r4, r5, r6, pc}

10062b6c <__arm_cp.1_0>:
10062b6c:	200024bc 	.word	0x200024bc

10062b70 <__arm_cp.1_1>:
10062b70:	10069c24 	.word	0x10069c24

10062b74 <tsk_notify_idx>:
10062b74:	211f      	movs	r1, #31
10062b76:	4001      	ands	r1, r0
10062b78:	2201      	movs	r2, #1
10062b7a:	408a      	lsls	r2, r1
10062b7c:	f3ef 8110 	mrs	r1, PRIMASK
10062b80:	b672      	cpsid	i
10062b82:	4904      	ldr	r1, [pc, #16]	@ (10062b94 <__arm_cp.3_0>)
10062b84:	6809      	ldr	r1, [r1, #0]
10062b86:	0940      	lsrs	r0, r0, #5
10062b88:	0080      	lsls	r0, r0, #2
10062b8a:	580b      	ldr	r3, [r1, r0]
10062b8c:	4313      	orrs	r3, r2
10062b8e:	500b      	str	r3, [r1, r0]
10062b90:	b662      	cpsie	i
10062b92:	4770      	bx	lr

10062b94 <__arm_cp.3_0>:
10062b94:	200024bc 	.word	0x200024bc

10062b98 <tsk_wait_resource_idx>:
10062b98:	221f      	movs	r2, #31
10062b9a:	4002      	ands	r2, r0
10062b9c:	2301      	movs	r3, #1
10062b9e:	4093      	lsls	r3, r2
10062ba0:	f3ef 8210 	mrs	r2, PRIMASK
10062ba4:	b672      	cpsid	i
10062ba6:	0089      	lsls	r1, r1, #2
10062ba8:	4a05      	ldr	r2, [pc, #20]	@ (10062bc0 <__arm_cp.4_0>)
10062baa:	6812      	ldr	r2, [r2, #0]
10062bac:	1851      	adds	r1, r2, r1
10062bae:	0940      	lsrs	r0, r0, #5
10062bb0:	0080      	lsls	r0, r0, #2
10062bb2:	1808      	adds	r0, r1, r0
10062bb4:	6881      	ldr	r1, [r0, #8]
10062bb6:	4319      	orrs	r1, r3
10062bb8:	6081      	str	r1, [r0, #8]
10062bba:	b662      	cpsie	i
10062bbc:	4770      	bx	lr
10062bbe:	46c0      	nop			@ (mov r8, r8)

10062bc0 <__arm_cp.4_0>:
10062bc0:	200024bc 	.word	0x200024bc

10062bc4 <tsk_signal_resource_idx>:
10062bc4:	211f      	movs	r1, #31
10062bc6:	4001      	ands	r1, r0
10062bc8:	2201      	movs	r2, #1
10062bca:	408a      	lsls	r2, r1
10062bcc:	f3ef 8110 	mrs	r1, PRIMASK
10062bd0:	b672      	cpsid	i
10062bd2:	4905      	ldr	r1, [pc, #20]	@ (10062be8 <__arm_cp.5_0>)
10062bd4:	6809      	ldr	r1, [r1, #0]
10062bd6:	0940      	lsrs	r0, r0, #5
10062bd8:	0080      	lsls	r0, r0, #2
10062bda:	1808      	adds	r0, r1, r0
10062bdc:	6901      	ldr	r1, [r0, #16]
10062bde:	4311      	orrs	r1, r2
10062be0:	6101      	str	r1, [r0, #16]
10062be2:	b662      	cpsie	i
10062be4:	4770      	bx	lr
10062be6:	46c0      	nop			@ (mov r8, r8)

10062be8 <__arm_cp.5_0>:
10062be8:	200024bc 	.word	0x200024bc

10062bec <lsbit>:
10062bec:	f3ef 8110 	mrs	r1, PRIMASK
10062bf0:	b672      	cpsid	i
10062bf2:	6801      	ldr	r1, [r0, #0]
10062bf4:	424a      	negs	r2, r1
10062bf6:	400a      	ands	r2, r1
10062bf8:	4051      	eors	r1, r2
10062bfa:	6001      	str	r1, [r0, #0]
10062bfc:	4803      	ldr	r0, [pc, #12]	@ (10062c0c <__arm_cp.7_0>)
10062bfe:	4350      	muls	r0, r2
10062c00:	0ec0      	lsrs	r0, r0, #27
10062c02:	a103      	add	r1, pc, #12	@ (adr r1, 10062c10 <__arm_cp.7_0+0x4>)
10062c04:	5c08      	ldrb	r0, [r1, r0]
10062c06:	b662      	cpsie	i
10062c08:	4770      	bx	lr
10062c0a:	46c0      	nop			@ (mov r8, r8)

10062c0c <__arm_cp.7_0>:
10062c0c:	04653adf 	.word	0x04653adf
10062c10:	06020100 	.word	0x06020100
10062c14:	10070b03 	.word	0x10070b03
10062c18:	150c0e04 	.word	0x150c0e04
10062c1c:	1a111708 	.word	0x1a111708
10062c20:	0f0a051f 	.word	0x0f0a051f
10062c24:	1916140d 	.word	0x1916140d
10062c28:	1813091e 	.word	0x1813091e
10062c2c:	1b1c121d 	.word	0x1b1c121d

10062c30 <CST_init>:
10062c30:	b510      	push	{r4, lr}
10062c32:	2412      	movs	r4, #18
10062c34:	2800      	cmp	r0, #0
10062c36:	d00e      	beq.n	10062c56 <CST_init+0x26>
10062c38:	2a00      	cmp	r2, #0
10062c3a:	d00c      	beq.n	10062c56 <CST_init+0x26>
10062c3c:	2b0b      	cmp	r3, #11
10062c3e:	d80a      	bhi.n	10062c56 <CST_init+0x26>
10062c40:	7041      	strb	r1, [r0, #1]
10062c42:	7003      	strb	r3, [r0, #0]
10062c44:	6a03      	ldr	r3, [r0, #32]
10062c46:	5459      	strb	r1, [r3, r1]
10062c48:	1e49      	subs	r1, r1, #1
10062c4a:	1c4b      	adds	r3, r1, #1
10062c4c:	d3fa      	bcc.n	10062c44 <CST_init+0x14>
10062c4e:	6102      	str	r2, [r0, #16]
10062c50:	2400      	movs	r4, #0
10062c52:	7504      	strb	r4, [r0, #20]
10062c54:	61c0      	str	r0, [r0, #28]
10062c56:	4620      	mov	r0, r4
10062c58:	bd10      	pop	{r4, pc}

10062c5a <CST_stop>:
10062c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062c5c:	4605      	mov	r5, r0
10062c5e:	2012      	movs	r0, #18
10062c60:	2d00      	cmp	r5, #0
10062c62:	d01b      	beq.n	10062c9c <CST_stop+0x42>
10062c64:	460c      	mov	r4, r1
10062c66:	786a      	ldrb	r2, [r5, #1]
10062c68:	428a      	cmp	r2, r1
10062c6a:	d917      	bls.n	10062c9c <CST_stop+0x42>
10062c6c:	6a2b      	ldr	r3, [r5, #32]
10062c6e:	5d19      	ldrb	r1, [r3, r4]
10062c70:	42a1      	cmp	r1, r4
10062c72:	d101      	bne.n	10062c78 <CST_stop+0x1e>
10062c74:	2000      	movs	r0, #0
10062c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062c78:	4617      	mov	r7, r2
10062c7a:	463e      	mov	r6, r7
10062c7c:	5ddf      	ldrb	r7, [r3, r7]
10062c7e:	4297      	cmp	r7, r2
10062c80:	d001      	beq.n	10062c86 <CST_stop+0x2c>
10062c82:	42a7      	cmp	r7, r4
10062c84:	d1f9      	bne.n	10062c7a <CST_stop+0x20>
10062c86:	2000      	movs	r0, #0
10062c88:	4297      	cmp	r7, r2
10062c8a:	d005      	beq.n	10062c98 <CST_stop+0x3e>
10062c8c:	5599      	strb	r1, [r3, r6]
10062c8e:	4296      	cmp	r6, r2
10062c90:	d102      	bne.n	10062c98 <CST_stop+0x3e>
10062c92:	4628      	mov	r0, r5
10062c94:	f000 f803 	bl	10062c9e <Timer_TryStartFirstActive>
10062c98:	6a29      	ldr	r1, [r5, #32]
10062c9a:	550c      	strb	r4, [r1, r4]
10062c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062c9e <Timer_TryStartFirstActive>:
10062c9e:	b510      	push	{r4, lr}
10062ca0:	7842      	ldrb	r2, [r0, #1]
10062ca2:	428a      	cmp	r2, r1
10062ca4:	d107      	bne.n	10062cb6 <Timer_TryStartFirstActive+0x18>
10062ca6:	7d01      	ldrb	r1, [r0, #20]
10062ca8:	2400      	movs	r4, #0
10062caa:	2900      	cmp	r1, #0
10062cac:	d009      	beq.n	10062cc2 <Timer_TryStartFirstActive+0x24>
10062cae:	3008      	adds	r0, #8
10062cb0:	f7ef ffb0 	bl	10052c14 <BLEPLAT_StopTimer>
10062cb4:	e005      	b.n	10062cc2 <Timer_TryStartFirstActive+0x24>
10062cb6:	0049      	lsls	r1, r1, #1
10062cb8:	6a42      	ldr	r2, [r0, #36]	@ 0x24
10062cba:	5e51      	ldrsh	r1, [r2, r1]
10062cbc:	f000 f86a 	bl	10062d94 <Timer_StartFirstActive_sysT>
10062cc0:	4604      	mov	r4, r0
10062cc2:	4620      	mov	r0, r4
10062cc4:	bd10      	pop	{r4, pc}

10062cc6 <CST_start>:
10062cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
10062cc8:	b085      	sub	sp, #20
10062cca:	2612      	movs	r6, #18
10062ccc:	2800      	cmp	r0, #0
10062cce:	d05e      	beq.n	10062d8e <CST_start+0xc8>
10062cd0:	461f      	mov	r7, r3
10062cd2:	460d      	mov	r5, r1
10062cd4:	4604      	mov	r4, r0
10062cd6:	7843      	ldrb	r3, [r0, #1]
10062cd8:	428b      	cmp	r3, r1
10062cda:	d958      	bls.n	10062d8e <CST_start+0xc8>
10062cdc:	7820      	ldrb	r0, [r4, #0]
10062cde:	2105      	movs	r1, #5
10062ce0:	0309      	lsls	r1, r1, #12
10062ce2:	4081      	lsls	r1, r0
10062ce4:	428f      	cmp	r7, r1
10062ce6:	d852      	bhi.n	10062d8e <CST_start+0xc8>
10062ce8:	9204      	str	r2, [sp, #16]
10062cea:	9302      	str	r3, [sp, #8]
10062cec:	f7ef ff77 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
10062cf0:	4602      	mov	r2, r0
10062cf2:	7823      	ldrb	r3, [r4, #0]
10062cf4:	6a20      	ldr	r0, [r4, #32]
10062cf6:	5d40      	ldrb	r0, [r0, r5]
10062cf8:	42a8      	cmp	r0, r5
10062cfa:	d00c      	beq.n	10062d16 <CST_start+0x50>
10062cfc:	9804      	ldr	r0, [sp, #16]
10062cfe:	2800      	cmp	r0, #0
10062d00:	d045      	beq.n	10062d8e <CST_start+0xc8>
10062d02:	4620      	mov	r0, r4
10062d04:	9103      	str	r1, [sp, #12]
10062d06:	4629      	mov	r1, r5
10062d08:	9304      	str	r3, [sp, #16]
10062d0a:	4616      	mov	r6, r2
10062d0c:	f7ff ffa5 	bl	10062c5a <CST_stop>
10062d10:	9903      	ldr	r1, [sp, #12]
10062d12:	4632      	mov	r2, r6
10062d14:	9b04      	ldr	r3, [sp, #16]
10062d16:	2033      	movs	r0, #51	@ 0x33
10062d18:	4378      	muls	r0, r7
10062d1a:	460e      	mov	r6, r1
10062d1c:	0a01      	lsrs	r1, r0, #8
10062d1e:	1808      	adds	r0, r1, r0
10062d20:	0c01      	lsrs	r1, r0, #16
10062d22:	1808      	adds	r0, r1, r0
10062d24:	0771      	lsls	r1, r6, #29
10062d26:	08d2      	lsrs	r2, r2, #3
10062d28:	1851      	adds	r1, r2, r1
10062d2a:	1842      	adds	r2, r0, r1
10062d2c:	1d58      	adds	r0, r3, #5
10062d2e:	b2c0      	uxtb	r0, r0
10062d30:	40c2      	lsrs	r2, r0
10062d32:	9501      	str	r5, [sp, #4]
10062d34:	0068      	lsls	r0, r5, #1
10062d36:	6a61      	ldr	r1, [r4, #36]	@ 0x24
10062d38:	9204      	str	r2, [sp, #16]
10062d3a:	520a      	strh	r2, [r1, r0]
10062d3c:	f7ef ff4f 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
10062d40:	08c0      	lsrs	r0, r0, #3
10062d42:	9003      	str	r0, [sp, #12]
10062d44:	7862      	ldrb	r2, [r4, #1]
10062d46:	6a20      	ldr	r0, [r4, #32]
10062d48:	4617      	mov	r7, r2
10062d4a:	463b      	mov	r3, r7
10062d4c:	5dc7      	ldrb	r7, [r0, r7]
10062d4e:	4297      	cmp	r7, r2
10062d50:	d00d      	beq.n	10062d6e <CST_start+0xa8>
10062d52:	007d      	lsls	r5, r7, #1
10062d54:	6a66      	ldr	r6, [r4, #36]	@ 0x24
10062d56:	5b75      	ldrh	r5, [r6, r5]
10062d58:	7826      	ldrb	r6, [r4, #0]
10062d5a:	1d76      	adds	r6, r6, #5
10062d5c:	9903      	ldr	r1, [sp, #12]
10062d5e:	40f1      	lsrs	r1, r6
10062d60:	1a6d      	subs	r5, r5, r1
10062d62:	b22d      	sxth	r5, r5
10062d64:	9e04      	ldr	r6, [sp, #16]
10062d66:	1a71      	subs	r1, r6, r1
10062d68:	b209      	sxth	r1, r1
10062d6a:	428d      	cmp	r5, r1
10062d6c:	dded      	ble.n	10062d4a <CST_start+0x84>
10062d6e:	5cc1      	ldrb	r1, [r0, r3]
10062d70:	9a01      	ldr	r2, [sp, #4]
10062d72:	5481      	strb	r1, [r0, r2]
10062d74:	6a20      	ldr	r0, [r4, #32]
10062d76:	54c2      	strb	r2, [r0, r3]
10062d78:	9802      	ldr	r0, [sp, #8]
10062d7a:	4283      	cmp	r3, r0
10062d7c:	d106      	bne.n	10062d8c <CST_start+0xc6>
10062d7e:	9804      	ldr	r0, [sp, #16]
10062d80:	b201      	sxth	r1, r0
10062d82:	4620      	mov	r0, r4
10062d84:	f000 f806 	bl	10062d94 <Timer_StartFirstActive_sysT>
10062d88:	4606      	mov	r6, r0
10062d8a:	e000      	b.n	10062d8e <CST_start+0xc8>
10062d8c:	2600      	movs	r6, #0
10062d8e:	4630      	mov	r0, r6
10062d90:	b005      	add	sp, #20
10062d92:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062d94 <Timer_StartFirstActive_sysT>:
10062d94:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10062d96:	9101      	str	r1, [sp, #4]
10062d98:	4604      	mov	r4, r0
10062d9a:	4607      	mov	r7, r0
10062d9c:	3708      	adds	r7, #8
10062d9e:	f7ef ff1e 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
10062da2:	9002      	str	r0, [sp, #8]
10062da4:	460d      	mov	r5, r1
10062da6:	7826      	ldrb	r6, [r4, #0]
10062da8:	7d20      	ldrb	r0, [r4, #20]
10062daa:	2800      	cmp	r0, #0
10062dac:	d004      	beq.n	10062db8 <Timer_StartFirstActive_sysT+0x24>
10062dae:	4638      	mov	r0, r7
10062db0:	f7ef ff30 	bl	10052c14 <BLEPLAT_StopTimer>
10062db4:	7822      	ldrb	r2, [r4, #0]
10062db6:	e000      	b.n	10062dba <Timer_StartFirstActive_sysT+0x26>
10062db8:	4632      	mov	r2, r6
10062dba:	1d70      	adds	r0, r6, #5
10062dbc:	9c02      	ldr	r4, [sp, #8]
10062dbe:	08e1      	lsrs	r1, r4, #3
10062dc0:	40c1      	lsrs	r1, r0
10062dc2:	9801      	ldr	r0, [sp, #4]
10062dc4:	1a40      	subs	r0, r0, r1
10062dc6:	b200      	sxth	r0, r0
10062dc8:	1e40      	subs	r0, r0, #1
10062dca:	17c1      	asrs	r1, r0, #31
10062dcc:	3208      	adds	r2, #8
10062dce:	f7dd fbad 	bl	1004052c <__aeabi_llsl>
10062dd2:	1902      	adds	r2, r0, r4
10062dd4:	414d      	adcs	r5, r1
10062dd6:	4638      	mov	r0, r7
10062dd8:	462b      	mov	r3, r5
10062dda:	f7ef ff0a 	bl	10052bf2 <BLEPLAT_StartTimer>
10062dde:	b2c0      	uxtb	r0, r0
10062de0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062de2 <cst_sharedCallback>:
10062de2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10062de4:	9102      	str	r1, [sp, #8]
10062de6:	4605      	mov	r5, r0
10062de8:	7847      	ldrb	r7, [r0, #1]
10062dea:	6a00      	ldr	r0, [r0, #32]
10062dec:	5dc4      	ldrb	r4, [r0, r7]
10062dee:	f7ef fef6 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
10062df2:	08c0      	lsrs	r0, r0, #3
10062df4:	9001      	str	r0, [sp, #4]
10062df6:	4620      	mov	r0, r4
10062df8:	b2c2      	uxtb	r2, r0
10062dfa:	42ba      	cmp	r2, r7
10062dfc:	d00d      	beq.n	10062e1a <cst_sharedCallback+0x38>
10062dfe:	0053      	lsls	r3, r2, #1
10062e00:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
10062e02:	5af3      	ldrh	r3, [r6, r3]
10062e04:	782e      	ldrb	r6, [r5, #0]
10062e06:	1d76      	adds	r6, r6, #5
10062e08:	9901      	ldr	r1, [sp, #4]
10062e0a:	40f1      	lsrs	r1, r6
10062e0c:	1a59      	subs	r1, r3, r1
10062e0e:	b209      	sxth	r1, r1
10062e10:	2901      	cmp	r1, #1
10062e12:	dc03      	bgt.n	10062e1c <cst_sharedCallback+0x3a>
10062e14:	6a28      	ldr	r0, [r5, #32]
10062e16:	5c80      	ldrb	r0, [r0, r2]
10062e18:	e7ee      	b.n	10062df8 <cst_sharedCallback+0x16>
10062e1a:	4638      	mov	r0, r7
10062e1c:	6a29      	ldr	r1, [r5, #32]
10062e1e:	55c8      	strb	r0, [r1, r7]
10062e20:	b2c6      	uxtb	r6, r0
10062e22:	4628      	mov	r0, r5
10062e24:	4631      	mov	r1, r6
10062e26:	f7ff ff3a 	bl	10062c9e <Timer_TryStartFirstActive>
10062e2a:	b2e0      	uxtb	r0, r4
10062e2c:	42b0      	cmp	r0, r6
10062e2e:	d006      	beq.n	10062e3e <cst_sharedCallback+0x5c>
10062e30:	6a29      	ldr	r1, [r5, #32]
10062e32:	5c0f      	ldrb	r7, [r1, r0]
10062e34:	540c      	strb	r4, [r1, r0]
10062e36:	9902      	ldr	r1, [sp, #8]
10062e38:	4788      	blx	r1
10062e3a:	463c      	mov	r4, r7
10062e3c:	e7f5      	b.n	10062e2a <cst_sharedCallback+0x48>
10062e3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062e40 <copy_swap_buffer>:
10062e40:	b5f0      	push	{r4, r5, r6, r7, lr}
10062e42:	2a00      	cmp	r2, #0
10062e44:	d00b      	beq.n	10062e5e <copy_swap_buffer+0x1e>
10062e46:	2400      	movs	r4, #0
10062e48:	43e5      	mvns	r5, r4
10062e4a:	2b00      	cmp	r3, #0
10062e4c:	4626      	mov	r6, r4
10062e4e:	d000      	beq.n	10062e52 <copy_swap_buffer+0x12>
10062e50:	1956      	adds	r6, r2, r5
10062e52:	5d0f      	ldrb	r7, [r1, r4]
10062e54:	5587      	strb	r7, [r0, r6]
10062e56:	1e6d      	subs	r5, r5, #1
10062e58:	1c64      	adds	r4, r4, #1
10062e5a:	42a2      	cmp	r2, r4
10062e5c:	d1f5      	bne.n	10062e4a <copy_swap_buffer+0xa>
10062e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062e60 <is_Buffer_All_Set_To>:
10062e60:	b570      	push	{r4, r5, r6, lr}
10062e62:	4603      	mov	r3, r0
10062e64:	2001      	movs	r0, #1
10062e66:	2900      	cmp	r1, #0
10062e68:	d009      	beq.n	10062e7e <is_Buffer_All_Set_To+0x1e>
10062e6a:	2400      	movs	r4, #0
10062e6c:	4626      	mov	r6, r4
10062e6e:	4625      	mov	r5, r4
10062e70:	5d96      	ldrb	r6, [r2, r6]
10062e72:	429e      	cmp	r6, r3
10062e74:	d104      	bne.n	10062e80 <is_Buffer_All_Set_To+0x20>
10062e76:	1c6d      	adds	r5, r5, #1
10062e78:	b2ee      	uxtb	r6, r5
10062e7a:	428e      	cmp	r6, r1
10062e7c:	d3f8      	bcc.n	10062e70 <is_Buffer_All_Set_To+0x10>
10062e7e:	bd70      	pop	{r4, r5, r6, pc}
10062e80:	4620      	mov	r0, r4
10062e82:	bd70      	pop	{r4, r5, r6, pc}

10062e84 <char_copy>:
10062e84:	2a00      	cmp	r2, #0
10062e86:	d005      	beq.n	10062e94 <char_copy+0x10>
10062e88:	7803      	ldrb	r3, [r0, #0]
10062e8a:	700b      	strb	r3, [r1, #0]
10062e8c:	1e52      	subs	r2, r2, #1
10062e8e:	1c49      	adds	r1, r1, #1
10062e90:	1c40      	adds	r0, r0, #1
10062e92:	e7f7      	b.n	10062e84 <char_copy>
10062e94:	4770      	bx	lr

10062e96 <UUID_cmp>:
10062e96:	b580      	push	{r7, lr}
10062e98:	7c02      	ldrb	r2, [r0, #16]
10062e9a:	7c0b      	ldrb	r3, [r1, #16]
10062e9c:	429a      	cmp	r2, r3
10062e9e:	d106      	bne.n	10062eae <UUID_cmp+0x18>
10062ea0:	2a20      	cmp	r2, #32
10062ea2:	d007      	beq.n	10062eb4 <UUID_cmp+0x1e>
10062ea4:	2a10      	cmp	r2, #16
10062ea6:	d109      	bne.n	10062ebc <UUID_cmp+0x26>
10062ea8:	8989      	ldrh	r1, [r1, #12]
10062eaa:	8980      	ldrh	r0, [r0, #12]
10062eac:	e008      	b.n	10062ec0 <UUID_cmp+0x2a>
10062eae:	2000      	movs	r0, #0
10062eb0:	43c0      	mvns	r0, r0
10062eb2:	bd80      	pop	{r7, pc}
10062eb4:	2210      	movs	r2, #16
10062eb6:	f7ef fde7 	bl	10052a88 <BLEPLAT_MemCmp>
10062eba:	bd80      	pop	{r7, pc}
10062ebc:	68c9      	ldr	r1, [r1, #12]
10062ebe:	68c0      	ldr	r0, [r0, #12]
10062ec0:	1a40      	subs	r0, r0, r1
10062ec2:	bd80      	pop	{r7, pc}

10062ec4 <UUID_cmp_128bits>:
10062ec4:	b570      	push	{r4, r5, r6, lr}
10062ec6:	b08a      	sub	sp, #40	@ 0x28
10062ec8:	460c      	mov	r4, r1
10062eca:	4601      	mov	r1, r0
10062ecc:	ad05      	add	r5, sp, #20
10062ece:	2614      	movs	r6, #20
10062ed0:	4628      	mov	r0, r5
10062ed2:	4632      	mov	r2, r6
10062ed4:	f7ef fdb8 	bl	10052a48 <BLEPLAT_MemCpy>
10062ed8:	4668      	mov	r0, sp
10062eda:	4621      	mov	r1, r4
10062edc:	4632      	mov	r2, r6
10062ede:	f7ef fdb3 	bl	10052a48 <BLEPLAT_MemCpy>
10062ee2:	7c28      	ldrb	r0, [r5, #16]
10062ee4:	2880      	cmp	r0, #128	@ 0x80
10062ee6:	d007      	beq.n	10062ef8 <UUID_cmp_128bits+0x34>
10062ee8:	ac05      	add	r4, sp, #20
10062eea:	490d      	ldr	r1, [pc, #52]	@ (10062f20 <__arm_cp.1_0>)
10062eec:	220c      	movs	r2, #12
10062eee:	4620      	mov	r0, r4
10062ef0:	f7ef fdaa 	bl	10052a48 <BLEPLAT_MemCpy>
10062ef4:	2000      	movs	r0, #0
10062ef6:	81e0      	strh	r0, [r4, #14]
10062ef8:	4668      	mov	r0, sp
10062efa:	7c00      	ldrb	r0, [r0, #16]
10062efc:	2880      	cmp	r0, #128	@ 0x80
10062efe:	d007      	beq.n	10062f10 <UUID_cmp_128bits+0x4c>
10062f00:	466c      	mov	r4, sp
10062f02:	4907      	ldr	r1, [pc, #28]	@ (10062f20 <__arm_cp.1_0>)
10062f04:	220c      	movs	r2, #12
10062f06:	4620      	mov	r0, r4
10062f08:	f7ef fd9e 	bl	10052a48 <BLEPLAT_MemCpy>
10062f0c:	2000      	movs	r0, #0
10062f0e:	81e0      	strh	r0, [r4, #14]
10062f10:	a805      	add	r0, sp, #20
10062f12:	4669      	mov	r1, sp
10062f14:	2210      	movs	r2, #16
10062f16:	f7ef fdb7 	bl	10052a88 <BLEPLAT_MemCmp>
10062f1a:	b00a      	add	sp, #40	@ 0x28
10062f1c:	bd70      	pop	{r4, r5, r6, pc}
10062f1e:	46c0      	nop			@ (mov r8, r8)

10062f20 <__arm_cp.1_0>:
10062f20:	10069c7c 	.word	0x10069c7c

10062f24 <UUID_write_to_flat>:
10062f24:	b510      	push	{r4, lr}
10062f26:	460a      	mov	r2, r1
10062f28:	4601      	mov	r1, r0
10062f2a:	7c00      	ldrb	r0, [r0, #16]
10062f2c:	2820      	cmp	r0, #32
10062f2e:	d004      	beq.n	10062f3a <UUID_write_to_flat+0x16>
10062f30:	2810      	cmp	r0, #16
10062f32:	d105      	bne.n	10062f40 <UUID_write_to_flat+0x1c>
10062f34:	310c      	adds	r1, #12
10062f36:	2402      	movs	r4, #2
10062f38:	e003      	b.n	10062f42 <UUID_write_to_flat+0x1e>
10062f3a:	310c      	adds	r1, #12
10062f3c:	2404      	movs	r4, #4
10062f3e:	e000      	b.n	10062f42 <UUID_write_to_flat+0x1e>
10062f40:	2410      	movs	r4, #16
10062f42:	4610      	mov	r0, r2
10062f44:	4622      	mov	r2, r4
10062f46:	f7ef fd7f 	bl	10052a48 <BLEPLAT_MemCpy>
10062f4a:	4620      	mov	r0, r4
10062f4c:	bd10      	pop	{r4, pc}

10062f4e <UUID_get_value_p>:
10062f4e:	7c01      	ldrb	r1, [r0, #16]
10062f50:	2980      	cmp	r1, #128	@ 0x80
10062f52:	d000      	beq.n	10062f56 <UUID_get_value_p+0x8>
10062f54:	300c      	adds	r0, #12
10062f56:	4770      	bx	lr

10062f58 <ACL_list_init>:
10062f58:	2100      	movs	r1, #0
10062f5a:	6001      	str	r1, [r0, #0]
10062f5c:	6040      	str	r0, [r0, #4]
10062f5e:	4770      	bx	lr

10062f60 <ACL_list_insert_tail>:
10062f60:	2200      	movs	r2, #0
10062f62:	61ca      	str	r2, [r1, #28]
10062f64:	6842      	ldr	r2, [r0, #4]
10062f66:	6011      	str	r1, [r2, #0]
10062f68:	311c      	adds	r1, #28
10062f6a:	6041      	str	r1, [r0, #4]
10062f6c:	4770      	bx	lr

10062f6e <ACL_list_insert_head>:
10062f6e:	6802      	ldr	r2, [r0, #0]
10062f70:	61ca      	str	r2, [r1, #28]
10062f72:	2a00      	cmp	r2, #0
10062f74:	d102      	bne.n	10062f7c <ACL_list_insert_head+0xe>
10062f76:	460a      	mov	r2, r1
10062f78:	321c      	adds	r2, #28
10062f7a:	6042      	str	r2, [r0, #4]
10062f7c:	6001      	str	r1, [r0, #0]
10062f7e:	4770      	bx	lr

10062f80 <ACL_list_remove>:
10062f80:	6803      	ldr	r3, [r0, #0]
10062f82:	428b      	cmp	r3, r1
10062f84:	d009      	beq.n	10062f9a <ACL_list_remove+0x1a>
10062f86:	461a      	mov	r2, r3
10062f88:	69db      	ldr	r3, [r3, #28]
10062f8a:	428b      	cmp	r3, r1
10062f8c:	d1fb      	bne.n	10062f86 <ACL_list_remove+0x6>
10062f8e:	69cb      	ldr	r3, [r1, #28]
10062f90:	61d3      	str	r3, [r2, #28]
10062f92:	2b00      	cmp	r3, #0
10062f94:	d107      	bne.n	10062fa6 <ACL_list_remove+0x26>
10062f96:	321c      	adds	r2, #28
10062f98:	e004      	b.n	10062fa4 <ACL_list_remove+0x24>
10062f9a:	69ca      	ldr	r2, [r1, #28]
10062f9c:	6002      	str	r2, [r0, #0]
10062f9e:	2a00      	cmp	r2, #0
10062fa0:	d101      	bne.n	10062fa6 <ACL_list_remove+0x26>
10062fa2:	4602      	mov	r2, r0
10062fa4:	6042      	str	r2, [r0, #4]
10062fa6:	2000      	movs	r0, #0
10062fa8:	61c8      	str	r0, [r1, #28]
10062faa:	4770      	bx	lr

10062fac <ACL_list_remove_head>:
10062fac:	4601      	mov	r1, r0
10062fae:	6800      	ldr	r0, [r0, #0]
10062fb0:	69c2      	ldr	r2, [r0, #28]
10062fb2:	600a      	str	r2, [r1, #0]
10062fb4:	2a00      	cmp	r2, #0
10062fb6:	d100      	bne.n	10062fba <ACL_list_remove_head+0xe>
10062fb8:	6049      	str	r1, [r1, #4]
10062fba:	2100      	movs	r1, #0
10062fbc:	61c1      	str	r1, [r0, #28]
10062fbe:	4770      	bx	lr

10062fc0 <ACL_list_get_pckt_count>:
10062fc0:	2100      	movs	r1, #0
10062fc2:	6800      	ldr	r0, [r0, #0]
10062fc4:	2800      	cmp	r0, #0
10062fc6:	d002      	beq.n	10062fce <ACL_list_get_pckt_count+0xe>
10062fc8:	301c      	adds	r0, #28
10062fca:	1c49      	adds	r1, r1, #1
10062fcc:	e7f9      	b.n	10062fc2 <ACL_list_get_pckt_count+0x2>
10062fce:	b288      	uxth	r0, r1
10062fd0:	4770      	bx	lr
	...

10062fd4 <addr8_list_search>:
10062fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10062fd6:	b087      	sub	sp, #28
10062fd8:	4604      	mov	r4, r0
10062fda:	0608      	lsls	r0, r1, #24
10062fdc:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10062fde:	d052      	beq.n	10063086 <addr8_list_search+0xb2>
10062fe0:	9501      	str	r5, [sp, #4]
10062fe2:	20ff      	movs	r0, #255	@ 0xff
10062fe4:	4615      	mov	r5, r2
10062fe6:	4385      	bics	r5, r0
10062fe8:	2601      	movs	r6, #1
10062fea:	9305      	str	r3, [sp, #20]
10062fec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10062fee:	461f      	mov	r7, r3
10062ff0:	9600      	str	r6, [sp, #0]
10062ff2:	4037      	ands	r7, r6
10062ff4:	9703      	str	r7, [sp, #12]
10062ff6:	427e      	negs	r6, r7
10062ff8:	4016      	ands	r6, r2
10062ffa:	b2f2      	uxtb	r2, r6
10062ffc:	1952      	adds	r2, r2, r5
10062ffe:	9206      	str	r2, [sp, #24]
10063000:	4d25      	ldr	r5, [pc, #148]	@ (10063098 <__arm_cp.0_0>)
10063002:	9f05      	ldr	r7, [sp, #20]
10063004:	463a      	mov	r2, r7
10063006:	402a      	ands	r2, r5
10063008:	461e      	mov	r6, r3
1006300a:	079d      	lsls	r5, r3, #30
1006300c:	17ed      	asrs	r5, r5, #31
1006300e:	403d      	ands	r5, r7
10063010:	9004      	str	r0, [sp, #16]
10063012:	0603      	lsls	r3, r0, #24
10063014:	402b      	ands	r3, r5
10063016:	189b      	adds	r3, r3, r2
10063018:	2002      	movs	r0, #2
1006301a:	4030      	ands	r0, r6
1006301c:	9002      	str	r0, [sp, #8]
1006301e:	1e48      	subs	r0, r1, #1
10063020:	9005      	str	r0, [sp, #20]
10063022:	b2c8      	uxtb	r0, r1
10063024:	0841      	lsrs	r1, r0, #1
10063026:	2600      	movs	r6, #0
10063028:	b2c8      	uxtb	r0, r1
1006302a:	00c2      	lsls	r2, r0, #3
1006302c:	18a0      	adds	r0, r4, r2
1006302e:	6845      	ldr	r5, [r0, #4]
10063030:	9802      	ldr	r0, [sp, #8]
10063032:	2800      	cmp	r0, #0
10063034:	d101      	bne.n	1006303a <addr8_list_search+0x66>
10063036:	4818      	ldr	r0, [pc, #96]	@ (10063098 <__arm_cp.0_0>)
10063038:	4005      	ands	r5, r0
1006303a:	58a0      	ldr	r0, [r4, r2]
1006303c:	4602      	mov	r2, r0
1006303e:	9f04      	ldr	r7, [sp, #16]
10063040:	43ba      	bics	r2, r7
10063042:	9f03      	ldr	r7, [sp, #12]
10063044:	2f00      	cmp	r7, #0
10063046:	d101      	bne.n	1006304c <addr8_list_search+0x78>
10063048:	4638      	mov	r0, r7
1006304a:	e000      	b.n	1006304e <addr8_list_search+0x7a>
1006304c:	b2c0      	uxtb	r0, r0
1006304e:	1882      	adds	r2, r0, r2
10063050:	9806      	ldr	r0, [sp, #24]
10063052:	4290      	cmp	r0, r2
10063054:	d101      	bne.n	1006305a <addr8_list_search+0x86>
10063056:	42ab      	cmp	r3, r5
10063058:	d018      	beq.n	1006308c <addr8_list_search+0xb8>
1006305a:	42ab      	cmp	r3, r5
1006305c:	d803      	bhi.n	10063066 <addr8_list_search+0x92>
1006305e:	d104      	bne.n	1006306a <addr8_list_search+0x96>
10063060:	9806      	ldr	r0, [sp, #24]
10063062:	4290      	cmp	r0, r2
10063064:	d901      	bls.n	1006306a <addr8_list_search+0x96>
10063066:	1c4e      	adds	r6, r1, #1
10063068:	e001      	b.n	1006306e <addr8_list_search+0x9a>
1006306a:	1e48      	subs	r0, r1, #1
1006306c:	9005      	str	r0, [sp, #20]
1006306e:	9805      	ldr	r0, [sp, #20]
10063070:	1b80      	subs	r0, r0, r6
10063072:	b2c0      	uxtb	r0, r0
10063074:	1c40      	adds	r0, r0, #1
10063076:	b2c2      	uxtb	r2, r0
10063078:	0851      	lsrs	r1, r2, #1
1006307a:	1989      	adds	r1, r1, r6
1006307c:	4282      	cmp	r2, r0
1006307e:	d0d3      	beq.n	10063028 <addr8_list_search+0x54>
10063080:	2000      	movs	r0, #0
10063082:	9d01      	ldr	r5, [sp, #4]
10063084:	e004      	b.n	10063090 <addr8_list_search+0xbc>
10063086:	2100      	movs	r1, #0
10063088:	4608      	mov	r0, r1
1006308a:	e001      	b.n	10063090 <addr8_list_search+0xbc>
1006308c:	9d01      	ldr	r5, [sp, #4]
1006308e:	9800      	ldr	r0, [sp, #0]
10063090:	7029      	strb	r1, [r5, #0]
10063092:	b007      	add	sp, #28
10063094:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063096:	46c0      	nop			@ (mov r8, r8)

10063098 <__arm_cp.0_0>:
10063098:	00ffffff 	.word	0x00ffffff

1006309c <addr8_list_add>:
1006309c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006309e:	b089      	sub	sp, #36	@ 0x24
100630a0:	4615      	mov	r5, r2
100630a2:	460f      	mov	r7, r1
100630a4:	4604      	mov	r4, r0
100630a6:	7906      	ldrb	r6, [r0, #4]
100630a8:	6800      	ldr	r0, [r0, #0]
100630aa:	6861      	ldr	r1, [r4, #4]
100630ac:	aa08      	add	r2, sp, #32
100630ae:	9300      	str	r3, [sp, #0]
100630b0:	9201      	str	r2, [sp, #4]
100630b2:	463a      	mov	r2, r7
100630b4:	462b      	mov	r3, r5
100630b6:	f7ff ff8d 	bl	10062fd4 <addr8_list_search>
100630ba:	2100      	movs	r1, #0
100630bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
100630be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100630c0:	2800      	cmp	r0, #0
100630c2:	9207      	str	r2, [sp, #28]
100630c4:	d126      	bne.n	10063114 <addr8_list_add+0x78>
100630c6:	9706      	str	r7, [sp, #24]
100630c8:	7967      	ldrb	r7, [r4, #5]
100630ca:	42be      	cmp	r6, r7
100630cc:	d222      	bcs.n	10063114 <addr8_list_add+0x78>
100630ce:	9302      	str	r3, [sp, #8]
100630d0:	9003      	str	r0, [sp, #12]
100630d2:	9504      	str	r5, [sp, #16]
100630d4:	a908      	add	r1, sp, #32
100630d6:	7808      	ldrb	r0, [r1, #0]
100630d8:	9605      	str	r6, [sp, #20]
100630da:	4286      	cmp	r6, r0
100630dc:	d00d      	beq.n	100630fa <addr8_list_add+0x5e>
100630de:	9f05      	ldr	r7, [sp, #20]
100630e0:	6822      	ldr	r2, [r4, #0]
100630e2:	b2fd      	uxtb	r5, r7
100630e4:	00ed      	lsls	r5, r5, #3
100630e6:	1956      	adds	r6, r2, r5
100630e8:	4633      	mov	r3, r6
100630ea:	3b08      	subs	r3, #8
100630ec:	cb0a      	ldmia	r3, {r1, r3}
100630ee:	5151      	str	r1, [r2, r5]
100630f0:	6073      	str	r3, [r6, #4]
100630f2:	1e7f      	subs	r7, r7, #1
100630f4:	b2f9      	uxtb	r1, r7
100630f6:	4281      	cmp	r1, r0
100630f8:	d1f2      	bne.n	100630e0 <addr8_list_add+0x44>
100630fa:	6821      	ldr	r1, [r4, #0]
100630fc:	00c0      	lsls	r0, r0, #3
100630fe:	9a06      	ldr	r2, [sp, #24]
10063100:	500a      	str	r2, [r1, r0]
10063102:	1808      	adds	r0, r1, r0
10063104:	9904      	ldr	r1, [sp, #16]
10063106:	6041      	str	r1, [r0, #4]
10063108:	9805      	ldr	r0, [sp, #20]
1006310a:	1c40      	adds	r0, r0, #1
1006310c:	7120      	strb	r0, [r4, #4]
1006310e:	2101      	movs	r1, #1
10063110:	9803      	ldr	r0, [sp, #12]
10063112:	9b02      	ldr	r3, [sp, #8]
10063114:	9a08      	ldr	r2, [sp, #32]
10063116:	9c07      	ldr	r4, [sp, #28]
10063118:	7022      	strb	r2, [r4, #0]
1006311a:	7018      	strb	r0, [r3, #0]
1006311c:	4608      	mov	r0, r1
1006311e:	b009      	add	sp, #36	@ 0x24
10063120:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063122 <addr8_list_remove_by_addr>:
10063122:	b5f0      	push	{r4, r5, r6, r7, lr}
10063124:	b087      	sub	sp, #28
10063126:	460f      	mov	r7, r1
10063128:	4601      	mov	r1, r0
1006312a:	7900      	ldrb	r0, [r0, #4]
1006312c:	2600      	movs	r6, #0
1006312e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10063130:	2800      	cmp	r0, #0
10063132:	d02f      	beq.n	10063194 <addr8_list_remove_by_addr+0x72>
10063134:	9003      	str	r0, [sp, #12]
10063136:	6808      	ldr	r0, [r1, #0]
10063138:	9104      	str	r1, [sp, #16]
1006313a:	6849      	ldr	r1, [r1, #4]
1006313c:	9205      	str	r2, [sp, #20]
1006313e:	ad06      	add	r5, sp, #24
10063140:	9300      	str	r3, [sp, #0]
10063142:	9501      	str	r5, [sp, #4]
10063144:	463a      	mov	r2, r7
10063146:	9b05      	ldr	r3, [sp, #20]
10063148:	f7ff ff44 	bl	10062fd4 <addr8_list_search>
1006314c:	2800      	cmp	r0, #0
1006314e:	d021      	beq.n	10063194 <addr8_list_remove_by_addr+0x72>
10063150:	9002      	str	r0, [sp, #8]
10063152:	9405      	str	r4, [sp, #20]
10063154:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10063156:	9c04      	ldr	r4, [sp, #16]
10063158:	6823      	ldr	r3, [r4, #0]
1006315a:	a906      	add	r1, sp, #24
1006315c:	7809      	ldrb	r1, [r1, #0]
1006315e:	00cd      	lsls	r5, r1, #3
10063160:	195b      	adds	r3, r3, r5
10063162:	79db      	ldrb	r3, [r3, #7]
10063164:	7013      	strb	r3, [r2, #0]
10063166:	9803      	ldr	r0, [sp, #12]
10063168:	1e40      	subs	r0, r0, #1
1006316a:	9003      	str	r0, [sp, #12]
1006316c:	b2c0      	uxtb	r0, r0
1006316e:	4281      	cmp	r1, r0
10063170:	4623      	mov	r3, r4
10063172:	d00b      	beq.n	1006318c <addr8_list_remove_by_addr+0x6a>
10063174:	681d      	ldr	r5, [r3, #0]
10063176:	b2ce      	uxtb	r6, r1
10063178:	00f6      	lsls	r6, r6, #3
1006317a:	19af      	adds	r7, r5, r6
1006317c:	68ba      	ldr	r2, [r7, #8]
1006317e:	68fc      	ldr	r4, [r7, #12]
10063180:	51aa      	str	r2, [r5, r6]
10063182:	607c      	str	r4, [r7, #4]
10063184:	1c49      	adds	r1, r1, #1
10063186:	b2ca      	uxtb	r2, r1
10063188:	4282      	cmp	r2, r0
1006318a:	d1f3      	bne.n	10063174 <addr8_list_remove_by_addr+0x52>
1006318c:	9803      	ldr	r0, [sp, #12]
1006318e:	7118      	strb	r0, [r3, #4]
10063190:	9e02      	ldr	r6, [sp, #8]
10063192:	9c05      	ldr	r4, [sp, #20]
10063194:	7026      	strb	r6, [r4, #0]
10063196:	b007      	add	sp, #28
10063198:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006319a <addr8_list_clear>:
1006319a:	2100      	movs	r1, #0
1006319c:	7101      	strb	r1, [r0, #4]
1006319e:	4770      	bx	lr

100631a0 <BLEPLAT_aes128_encrypt>:
100631a0:	b580      	push	{r7, lr}
100631a2:	f7ef fc9e 	bl	10052ae2 <BLEPLAT_AesEcbEncrypt>
100631a6:	bd80      	pop	{r7, pc}

100631a8 <Hal_Get_Random_Number>:
100631a8:	b51c      	push	{r2, r3, r4, lr}
100631aa:	ac01      	add	r4, sp, #4
100631ac:	4620      	mov	r0, r4
100631ae:	f7ef fcd7 	bl	10052b60 <BLEPLAT_RngGetRandom16>
100631b2:	8820      	ldrh	r0, [r4, #0]
100631b4:	bd1c      	pop	{r2, r3, r4, pc}

100631b6 <Hal_Get_Random_Number32>:
100631b6:	b5e0      	push	{r5, r6, r7, lr}
100631b8:	a801      	add	r0, sp, #4
100631ba:	f7ef fcdd 	bl	10052b78 <BLEPLAT_RngGetRandom32>
100631be:	9801      	ldr	r0, [sp, #4]
100631c0:	bd8c      	pop	{r2, r3, r7, pc}

100631c2 <HAL_Generate_Random_Bytes_To>:
100631c2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100631c4:	460c      	mov	r4, r1
100631c6:	4605      	mov	r5, r0
100631c8:	2000      	movs	r0, #0
100631ca:	b2c6      	uxtb	r6, r0
100631cc:	42a6      	cmp	r6, r4
100631ce:	d20e      	bcs.n	100631ee <HAL_Generate_Random_Bytes_To+0x2c>
100631d0:	2000      	movs	r0, #0
100631d2:	f7ff ffe9 	bl	100631a8 <Hal_Get_Random_Number>
100631d6:	55a8      	strb	r0, [r5, r6]
100631d8:	a901      	add	r1, sp, #4
100631da:	7008      	strb	r0, [r1, #0]
100631dc:	0a00      	lsrs	r0, r0, #8
100631de:	4669      	mov	r1, sp
100631e0:	7008      	strb	r0, [r1, #0]
100631e2:	1c71      	adds	r1, r6, #1
100631e4:	42a1      	cmp	r1, r4
100631e6:	d200      	bcs.n	100631ea <HAL_Generate_Random_Bytes_To+0x28>
100631e8:	5468      	strb	r0, [r5, r1]
100631ea:	1cb0      	adds	r0, r6, #2
100631ec:	e7ed      	b.n	100631ca <HAL_Generate_Random_Bytes_To+0x8>
100631ee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100631f0 <IDD_Initialize_Device_IDs>:
100631f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100631f2:	b095      	sub	sp, #84	@ 0x54
100631f4:	4839      	ldr	r0, [pc, #228]	@ (100632dc <__arm_cp.0_0>)
100631f6:	6800      	ldr	r0, [r0, #0]
100631f8:	9000      	str	r0, [sp, #0]
100631fa:	a80b      	add	r0, sp, #44	@ 0x2c
100631fc:	f7ff fc63 	bl	10062ac6 <nvm_dev_id_data_get_record>
10063200:	2800      	cmp	r0, #0
10063202:	d031      	beq.n	10063268 <IDD_Initialize_Device_IDs+0x78>
10063204:	af01      	add	r7, sp, #4
10063206:	2406      	movs	r4, #6
10063208:	2500      	movs	r5, #0
1006320a:	4b35      	ldr	r3, [pc, #212]	@ (100632e0 <__arm_cp.0_1>)
1006320c:	4638      	mov	r0, r7
1006320e:	4621      	mov	r1, r4
10063210:	462a      	mov	r2, r5
10063212:	4798      	blx	r3
10063214:	7978      	ldrb	r0, [r7, #5]
10063216:	21c0      	movs	r1, #192	@ 0xc0
10063218:	4301      	orrs	r1, r0
1006321a:	7179      	strb	r1, [r7, #5]
1006321c:	ae0b      	add	r6, sp, #44	@ 0x2c
1006321e:	4630      	mov	r0, r6
10063220:	3020      	adds	r0, #32
10063222:	4b30      	ldr	r3, [pc, #192]	@ (100632e4 <__arm_cp.0_2>)
10063224:	4639      	mov	r1, r7
10063226:	4622      	mov	r2, r4
10063228:	4798      	blx	r3
1006322a:	ac07      	add	r4, sp, #28
1006322c:	2710      	movs	r7, #16
1006322e:	4620      	mov	r0, r4
10063230:	4639      	mov	r1, r7
10063232:	462a      	mov	r2, r5
10063234:	4b2a      	ldr	r3, [pc, #168]	@ (100632e0 <__arm_cp.0_1>)
10063236:	4798      	blx	r3
10063238:	4630      	mov	r0, r6
1006323a:	4621      	mov	r1, r4
1006323c:	463a      	mov	r2, r7
1006323e:	4b29      	ldr	r3, [pc, #164]	@ (100632e4 <__arm_cp.0_2>)
10063240:	4798      	blx	r3
10063242:	ac03      	add	r4, sp, #12
10063244:	4620      	mov	r0, r4
10063246:	4639      	mov	r1, r7
10063248:	462a      	mov	r2, r5
1006324a:	4b25      	ldr	r3, [pc, #148]	@ (100632e0 <__arm_cp.0_1>)
1006324c:	4798      	blx	r3
1006324e:	4630      	mov	r0, r6
10063250:	3010      	adds	r0, #16
10063252:	4621      	mov	r1, r4
10063254:	463a      	mov	r2, r7
10063256:	4b23      	ldr	r3, [pc, #140]	@ (100632e4 <__arm_cp.0_2>)
10063258:	4798      	blx	r3
1006325a:	4630      	mov	r0, r6
1006325c:	f7ff fc40 	bl	10062ae0 <nvm_dev_id_data_add_record>
10063260:	2800      	cmp	r0, #0
10063262:	d103      	bne.n	1006326c <IDD_Initialize_Device_IDs+0x7c>
10063264:	4605      	mov	r5, r0
10063266:	e003      	b.n	10063270 <IDD_Initialize_Device_IDs+0x80>
10063268:	2500      	movs	r5, #0
1006326a:	e001      	b.n	10063270 <IDD_Initialize_Device_IDs+0x80>
1006326c:	200e      	movs	r0, #14
1006326e:	43c5      	mvns	r5, r0
10063270:	4c1d      	ldr	r4, [pc, #116]	@ (100632e8 <__arm_cp.0_3>)
10063272:	6822      	ldr	r2, [r4, #0]
10063274:	322e      	adds	r2, #46	@ 0x2e
10063276:	2600      	movs	r6, #0
10063278:	2706      	movs	r7, #6
1006327a:	4630      	mov	r0, r6
1006327c:	4639      	mov	r1, r7
1006327e:	f7ff fdef 	bl	10062e60 <is_Buffer_All_Set_To>
10063282:	a90b      	add	r1, sp, #44	@ 0x2c
10063284:	2800      	cmp	r0, #0
10063286:	d001      	beq.n	1006328c <IDD_Initialize_Device_IDs+0x9c>
10063288:	3120      	adds	r1, #32
1006328a:	e001      	b.n	10063290 <IDD_Initialize_Device_IDs+0xa0>
1006328c:	6821      	ldr	r1, [r4, #0]
1006328e:	312e      	adds	r1, #46	@ 0x2e
10063290:	9800      	ldr	r0, [sp, #0]
10063292:	3060      	adds	r0, #96	@ 0x60
10063294:	463a      	mov	r2, r7
10063296:	f7ef fbd7 	bl	10052a48 <BLEPLAT_MemCpy>
1006329a:	6822      	ldr	r2, [r4, #0]
1006329c:	3208      	adds	r2, #8
1006329e:	2110      	movs	r1, #16
100632a0:	4630      	mov	r0, r6
100632a2:	f7ff fddd 	bl	10062e60 <is_Buffer_All_Set_To>
100632a6:	2800      	cmp	r0, #0
100632a8:	d005      	beq.n	100632b6 <IDD_Initialize_Device_IDs+0xc6>
100632aa:	6820      	ldr	r0, [r4, #0]
100632ac:	3008      	adds	r0, #8
100632ae:	a90b      	add	r1, sp, #44	@ 0x2c
100632b0:	2210      	movs	r2, #16
100632b2:	f7ef fbc9 	bl	10052a48 <BLEPLAT_MemCpy>
100632b6:	6822      	ldr	r2, [r4, #0]
100632b8:	3218      	adds	r2, #24
100632ba:	2000      	movs	r0, #0
100632bc:	2110      	movs	r1, #16
100632be:	f7ff fdcf 	bl	10062e60 <is_Buffer_All_Set_To>
100632c2:	2800      	cmp	r0, #0
100632c4:	d006      	beq.n	100632d4 <IDD_Initialize_Device_IDs+0xe4>
100632c6:	a90b      	add	r1, sp, #44	@ 0x2c
100632c8:	3110      	adds	r1, #16
100632ca:	6820      	ldr	r0, [r4, #0]
100632cc:	3018      	adds	r0, #24
100632ce:	2210      	movs	r2, #16
100632d0:	f7ef fbba 	bl	10052a48 <BLEPLAT_MemCpy>
100632d4:	b2e8      	uxtb	r0, r5
100632d6:	b015      	add	sp, #84	@ 0x54
100632d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100632da:	46c0      	nop			@ (mov r8, r8)

100632dc <__arm_cp.0_0>:
100632dc:	2000241c 	.word	0x2000241c

100632e0 <__arm_cp.0_1>:
100632e0:	100631c3 	.word	0x100631c3

100632e4 <__arm_cp.0_2>:
100632e4:	10052a49 	.word	0x10052a49

100632e8 <__arm_cp.0_3>:
100632e8:	20002414 	.word	0x20002414

100632ec <aci_gatt_clt_notification_event_notify>:
100632ec:	b5b0      	push	{r4, r5, r7, lr}
100632ee:	b0ff      	sub	sp, #508	@ 0x1fc
100632f0:	b083      	sub	sp, #12
100632f2:	461c      	mov	r4, r3
100632f4:	466d      	mov	r5, sp
100632f6:	732b      	strb	r3, [r5, #12]
100632f8:	72aa      	strb	r2, [r5, #10]
100632fa:	7229      	strb	r1, [r5, #8]
100632fc:	71a8      	strb	r0, [r5, #6]
100632fe:	0a1b      	lsrs	r3, r3, #8
10063300:	736b      	strb	r3, [r5, #13]
10063302:	0a12      	lsrs	r2, r2, #8
10063304:	72ea      	strb	r2, [r5, #11]
10063306:	0a09      	lsrs	r1, r1, #8
10063308:	7269      	strb	r1, [r5, #9]
1006330a:	0a00      	lsrs	r0, r0, #8
1006330c:	71e8      	strb	r0, [r5, #7]
1006330e:	4628      	mov	r0, r5
10063310:	300e      	adds	r0, #14
10063312:	9986      	ldr	r1, [sp, #536]	@ 0x218
10063314:	4622      	mov	r2, r4
10063316:	f7ef fb97 	bl	10052a48 <BLEPLAT_MemCpy>
1006331a:	4620      	mov	r0, r4
1006331c:	300a      	adds	r0, #10
1006331e:	70a8      	strb	r0, [r5, #2]
10063320:	0a00      	lsrs	r0, r0, #8
10063322:	70e8      	strb	r0, [r5, #3]
10063324:	200f      	movs	r0, #15
10063326:	7128      	strb	r0, [r5, #4]
10063328:	20ff      	movs	r0, #255	@ 0xff
1006332a:	7068      	strb	r0, [r5, #1]
1006332c:	2082      	movs	r0, #130	@ 0x82
1006332e:	7028      	strb	r0, [r5, #0]
10063330:	200c      	movs	r0, #12
10063332:	7168      	strb	r0, [r5, #5]
10063334:	340e      	adds	r4, #14
10063336:	b2a1      	uxth	r1, r4
10063338:	4628      	mov	r0, r5
1006333a:	f7eb fd53 	bl	1004ede4 <BLE_STACK_Event>
1006333e:	b07f      	add	sp, #508	@ 0x1fc
10063340:	b003      	add	sp, #12
10063342:	bdb0      	pop	{r4, r5, r7, pc}

10063344 <aci_gatt_clt_indication_event_cb>:
10063344:	b5b0      	push	{r4, r5, r7, lr}
10063346:	b0ff      	sub	sp, #508	@ 0x1fc
10063348:	b083      	sub	sp, #12
1006334a:	460c      	mov	r4, r1
1006334c:	4605      	mov	r5, r0
1006334e:	688b      	ldr	r3, [r1, #8]
10063350:	88ca      	ldrh	r2, [r1, #6]
10063352:	8889      	ldrh	r1, [r1, #4]
10063354:	4668      	mov	r0, sp
10063356:	1d80      	adds	r0, r0, #6
10063358:	f7f2 fd57 	bl	10055e0a <aci_gatt_clt_indication_event_copy>
1006335c:	0728      	lsls	r0, r5, #28
1006335e:	d502      	bpl.n	10063366 <aci_gatt_clt_indication_event_cb+0x22>
10063360:	68a0      	ldr	r0, [r4, #8]
10063362:	f7f1 ff09 	bl	10055178 <ACL_pkt_release>
10063366:	9903      	ldr	r1, [sp, #12]
10063368:	460a      	mov	r2, r1
1006336a:	320a      	adds	r2, #10
1006336c:	4668      	mov	r0, sp
1006336e:	7082      	strb	r2, [r0, #2]
10063370:	0a12      	lsrs	r2, r2, #8
10063372:	70c2      	strb	r2, [r0, #3]
10063374:	220e      	movs	r2, #14
10063376:	7102      	strb	r2, [r0, #4]
10063378:	4a05      	ldr	r2, [pc, #20]	@ (10063390 <__arm_cp.1_0>)
1006337a:	8002      	strh	r2, [r0, #0]
1006337c:	220c      	movs	r2, #12
1006337e:	7142      	strb	r2, [r0, #5]
10063380:	310e      	adds	r1, #14
10063382:	b289      	uxth	r1, r1
10063384:	f7eb fd2e 	bl	1004ede4 <BLE_STACK_Event>
10063388:	b07f      	add	sp, #508	@ 0x1fc
1006338a:	b003      	add	sp, #12
1006338c:	bdb0      	pop	{r4, r5, r7, pc}
1006338e:	46c0      	nop			@ (mov r8, r8)

10063390 <__arm_cp.1_0>:
10063390:	0000ff82 	.word	0x0000ff82

10063394 <aci_gatt_clt_notification_event_cb>:
10063394:	b5b0      	push	{r4, r5, r7, lr}
10063396:	b0ff      	sub	sp, #508	@ 0x1fc
10063398:	b085      	sub	sp, #20
1006339a:	460c      	mov	r4, r1
1006339c:	4605      	mov	r5, r0
1006339e:	688b      	ldr	r3, [r1, #8]
100633a0:	88ca      	ldrh	r2, [r1, #6]
100633a2:	8889      	ldrh	r1, [r1, #4]
100633a4:	a802      	add	r0, sp, #8
100633a6:	1d80      	adds	r0, r0, #6
100633a8:	f7f2 fd54 	bl	10055e54 <aci_gatt_clt_notification_event_copy>
100633ac:	0728      	lsls	r0, r5, #28
100633ae:	d502      	bpl.n	100633b6 <aci_gatt_clt_notification_event_cb+0x22>
100633b0:	68a0      	ldr	r0, [r4, #8]
100633b2:	f7f1 fee1 	bl	10055178 <ACL_pkt_release>
100633b6:	ac02      	add	r4, sp, #8
100633b8:	89a3      	ldrh	r3, [r4, #12]
100633ba:	8962      	ldrh	r2, [r4, #10]
100633bc:	8921      	ldrh	r1, [r4, #8]
100633be:	88e0      	ldrh	r0, [r4, #6]
100633c0:	340e      	adds	r4, #14
100633c2:	9400      	str	r4, [sp, #0]
100633c4:	f7ff ff92 	bl	100632ec <aci_gatt_clt_notification_event_notify>
100633c8:	b07f      	add	sp, #508	@ 0x1fc
100633ca:	b005      	add	sp, #20
100633cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

100633d0 <aci_gatt_srv_write_event_cb>:
100633d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100633d2:	b0ff      	sub	sp, #508	@ 0x1fc
100633d4:	b086      	sub	sp, #24
100633d6:	460c      	mov	r4, r1
100633d8:	4605      	mov	r5, r0
100633da:	7a0b      	ldrb	r3, [r1, #8]
100633dc:	88ca      	ldrh	r2, [r1, #6]
100633de:	8889      	ldrh	r1, [r1, #4]
100633e0:	8960      	ldrh	r0, [r4, #10]
100633e2:	89a6      	ldrh	r6, [r4, #12]
100633e4:	6927      	ldr	r7, [r4, #16]
100633e6:	9000      	str	r0, [sp, #0]
100633e8:	9601      	str	r6, [sp, #4]
100633ea:	9702      	str	r7, [sp, #8]
100633ec:	a803      	add	r0, sp, #12
100633ee:	1d80      	adds	r0, r0, #6
100633f0:	f7f2 fd79 	bl	10055ee6 <aci_gatt_srv_write_event_copy>
100633f4:	0728      	lsls	r0, r5, #28
100633f6:	d502      	bpl.n	100633fe <aci_gatt_srv_write_event_cb+0x2e>
100633f8:	6920      	ldr	r0, [r4, #16]
100633fa:	f7f1 febd 	bl	10055178 <ACL_pkt_release>
100633fe:	a803      	add	r0, sp, #12
10063400:	7b41      	ldrb	r1, [r0, #13]
10063402:	7b82      	ldrb	r2, [r0, #14]
10063404:	0212      	lsls	r2, r2, #8
10063406:	1851      	adds	r1, r2, r1
10063408:	460a      	mov	r2, r1
1006340a:	320b      	adds	r2, #11
1006340c:	7082      	strb	r2, [r0, #2]
1006340e:	0a12      	lsrs	r2, r2, #8
10063410:	70c2      	strb	r2, [r0, #3]
10063412:	221a      	movs	r2, #26
10063414:	7102      	strb	r2, [r0, #4]
10063416:	4a05      	ldr	r2, [pc, #20]	@ (1006342c <__arm_cp.3_0>)
10063418:	8002      	strh	r2, [r0, #0]
1006341a:	220c      	movs	r2, #12
1006341c:	7142      	strb	r2, [r0, #5]
1006341e:	310f      	adds	r1, #15
10063420:	b289      	uxth	r1, r1
10063422:	f7eb fcdf 	bl	1004ede4 <BLE_STACK_Event>
10063426:	b07f      	add	sp, #508	@ 0x1fc
10063428:	b006      	add	sp, #24
1006342a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006342c <__arm_cp.3_0>:
1006342c:	0000ff82 	.word	0x0000ff82

10063430 <aci_gatt_clt_multi_notification_int_event_cb>:
10063430:	b5f0      	push	{r4, r5, r6, r7, lr}
10063432:	b0ff      	sub	sp, #508	@ 0x1fc
10063434:	b08c      	sub	sp, #48	@ 0x30
10063436:	460c      	mov	r4, r1
10063438:	4605      	mov	r5, r0
1006343a:	688b      	ldr	r3, [r1, #8]
1006343c:	88ca      	ldrh	r2, [r1, #6]
1006343e:	8889      	ldrh	r1, [r1, #4]
10063440:	a807      	add	r0, sp, #28
10063442:	1d80      	adds	r0, r0, #6
10063444:	f7f2 fd87 	bl	10055f56 <aci_gatt_clt_multi_notification_int_event_copy>
10063448:	0728      	lsls	r0, r5, #28
1006344a:	d502      	bpl.n	10063452 <aci_gatt_clt_multi_notification_int_event_cb+0x22>
1006344c:	68a0      	ldr	r0, [r4, #8]
1006344e:	f7f1 fe93 	bl	10055178 <ACL_pkt_release>
10063452:	a807      	add	r0, sp, #28
10063454:	8941      	ldrh	r1, [r0, #10]
10063456:	9105      	str	r1, [sp, #20]
10063458:	8901      	ldrh	r1, [r0, #8]
1006345a:	9103      	str	r1, [sp, #12]
1006345c:	88c1      	ldrh	r1, [r0, #6]
1006345e:	9102      	str	r1, [sp, #8]
10063460:	300c      	adds	r0, #12
10063462:	9004      	str	r0, [sp, #16]
10063464:	2500      	movs	r5, #0
10063466:	9e04      	ldr	r6, [sp, #16]
10063468:	b2a8      	uxth	r0, r5
1006346a:	9905      	ldr	r1, [sp, #20]
1006346c:	4288      	cmp	r0, r1
1006346e:	d21c      	bcs.n	100634aa <aci_gatt_clt_multi_notification_int_event_cb+0x7a>
10063470:	1831      	adds	r1, r6, r0
10063472:	a88a      	add	r0, sp, #552	@ 0x228
10063474:	9006      	str	r0, [sp, #24]
10063476:	2402      	movs	r4, #2
10063478:	4622      	mov	r2, r4
1006347a:	f7ef fae5 	bl	10052a48 <BLEPLAT_MemCpy>
1006347e:	1ca8      	adds	r0, r5, #2
10063480:	b280      	uxth	r0, r0
10063482:	1831      	adds	r1, r6, r0
10063484:	af89      	add	r7, sp, #548	@ 0x224
10063486:	4638      	mov	r0, r7
10063488:	4622      	mov	r2, r4
1006348a:	f7ef fadd 	bl	10052a48 <BLEPLAT_MemCpy>
1006348e:	1d28      	adds	r0, r5, #4
10063490:	b284      	uxth	r4, r0
10063492:	1930      	adds	r0, r6, r4
10063494:	883b      	ldrh	r3, [r7, #0]
10063496:	9906      	ldr	r1, [sp, #24]
10063498:	880a      	ldrh	r2, [r1, #0]
1006349a:	9000      	str	r0, [sp, #0]
1006349c:	9802      	ldr	r0, [sp, #8]
1006349e:	9903      	ldr	r1, [sp, #12]
100634a0:	f7ff ff24 	bl	100632ec <aci_gatt_clt_notification_event_notify>
100634a4:	8838      	ldrh	r0, [r7, #0]
100634a6:	1825      	adds	r5, r4, r0
100634a8:	e7de      	b.n	10063468 <aci_gatt_clt_multi_notification_int_event_cb+0x38>
100634aa:	b07f      	add	sp, #508	@ 0x1fc
100634ac:	b00c      	add	sp, #48	@ 0x30
100634ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

100634b0 <aci_att_clt_find_info_resp_event_cb>:
100634b0:	b5b0      	push	{r4, r5, r7, lr}
100634b2:	b0ff      	sub	sp, #508	@ 0x1fc
100634b4:	b083      	sub	sp, #12
100634b6:	460c      	mov	r4, r1
100634b8:	4605      	mov	r5, r0
100634ba:	688b      	ldr	r3, [r1, #8]
100634bc:	88ca      	ldrh	r2, [r1, #6]
100634be:	8889      	ldrh	r1, [r1, #4]
100634c0:	4668      	mov	r0, sp
100634c2:	1d80      	adds	r0, r0, #6
100634c4:	f7f2 fbc0 	bl	10055c48 <aci_att_clt_find_info_resp_event_copy>
100634c8:	0728      	lsls	r0, r5, #28
100634ca:	d502      	bpl.n	100634d2 <aci_att_clt_find_info_resp_event_cb+0x22>
100634cc:	68a0      	ldr	r0, [r4, #8]
100634ce:	f7f1 fe53 	bl	10055178 <ACL_pkt_release>
100634d2:	4668      	mov	r0, sp
100634d4:	7ac1      	ldrb	r1, [r0, #11]
100634d6:	9a03      	ldr	r2, [sp, #12]
100634d8:	0212      	lsls	r2, r2, #8
100634da:	1851      	adds	r1, r2, r1
100634dc:	460a      	mov	r2, r1
100634de:	3209      	adds	r2, #9
100634e0:	7082      	strb	r2, [r0, #2]
100634e2:	0a12      	lsrs	r2, r2, #8
100634e4:	70c2      	strb	r2, [r0, #3]
100634e6:	2204      	movs	r2, #4
100634e8:	7102      	strb	r2, [r0, #4]
100634ea:	4a05      	ldr	r2, [pc, #20]	@ (10063500 <__arm_cp.5_0>)
100634ec:	8002      	strh	r2, [r0, #0]
100634ee:	220c      	movs	r2, #12
100634f0:	7142      	strb	r2, [r0, #5]
100634f2:	310d      	adds	r1, #13
100634f4:	b289      	uxth	r1, r1
100634f6:	f7eb fc75 	bl	1004ede4 <BLE_STACK_Event>
100634fa:	b07f      	add	sp, #508	@ 0x1fc
100634fc:	b003      	add	sp, #12
100634fe:	bdb0      	pop	{r4, r5, r7, pc}

10063500 <__arm_cp.5_0>:
10063500:	0000ff82 	.word	0x0000ff82

10063504 <aci_att_clt_find_by_type_value_resp_event_cb>:
10063504:	b5b0      	push	{r4, r5, r7, lr}
10063506:	b0ff      	sub	sp, #508	@ 0x1fc
10063508:	b083      	sub	sp, #12
1006350a:	460c      	mov	r4, r1
1006350c:	4605      	mov	r5, r0
1006350e:	688b      	ldr	r3, [r1, #8]
10063510:	88ca      	ldrh	r2, [r1, #6]
10063512:	8889      	ldrh	r1, [r1, #4]
10063514:	4668      	mov	r0, sp
10063516:	1d80      	adds	r0, r0, #6
10063518:	f7f2 fbb4 	bl	10055c84 <aci_att_clt_find_by_type_value_resp_event_copy>
1006351c:	0728      	lsls	r0, r5, #28
1006351e:	d502      	bpl.n	10063526 <aci_att_clt_find_by_type_value_resp_event_cb+0x22>
10063520:	68a0      	ldr	r0, [r4, #8]
10063522:	f7f1 fe29 	bl	10055178 <ACL_pkt_release>
10063526:	4668      	mov	r0, sp
10063528:	7a81      	ldrb	r1, [r0, #10]
1006352a:	0089      	lsls	r1, r1, #2
1006352c:	1dca      	adds	r2, r1, #7
1006352e:	7082      	strb	r2, [r0, #2]
10063530:	0a12      	lsrs	r2, r2, #8
10063532:	70c2      	strb	r2, [r0, #3]
10063534:	2205      	movs	r2, #5
10063536:	7102      	strb	r2, [r0, #4]
10063538:	4a04      	ldr	r2, [pc, #16]	@ (1006354c <__arm_cp.6_0>)
1006353a:	8002      	strh	r2, [r0, #0]
1006353c:	220c      	movs	r2, #12
1006353e:	7142      	strb	r2, [r0, #5]
10063540:	310b      	adds	r1, #11
10063542:	f7eb fc4f 	bl	1004ede4 <BLE_STACK_Event>
10063546:	b07f      	add	sp, #508	@ 0x1fc
10063548:	b003      	add	sp, #12
1006354a:	bdb0      	pop	{r4, r5, r7, pc}

1006354c <__arm_cp.6_0>:
1006354c:	0000ff82 	.word	0x0000ff82

10063550 <aci_att_clt_read_by_type_resp_event_cb>:
10063550:	b5b0      	push	{r4, r5, r7, lr}
10063552:	b0ff      	sub	sp, #508	@ 0x1fc
10063554:	b083      	sub	sp, #12
10063556:	460c      	mov	r4, r1
10063558:	4605      	mov	r5, r0
1006355a:	688b      	ldr	r3, [r1, #8]
1006355c:	88ca      	ldrh	r2, [r1, #6]
1006355e:	8889      	ldrh	r1, [r1, #4]
10063560:	4668      	mov	r0, sp
10063562:	1d80      	adds	r0, r0, #6
10063564:	f7f2 fba3 	bl	10055cae <aci_att_clt_read_by_type_resp_event_copy>
10063568:	0728      	lsls	r0, r5, #28
1006356a:	d502      	bpl.n	10063572 <aci_att_clt_read_by_type_resp_event_cb+0x22>
1006356c:	68a0      	ldr	r0, [r4, #8]
1006356e:	f7f1 fe03 	bl	10055178 <ACL_pkt_release>
10063572:	4668      	mov	r0, sp
10063574:	7ac1      	ldrb	r1, [r0, #11]
10063576:	9a03      	ldr	r2, [sp, #12]
10063578:	0212      	lsls	r2, r2, #8
1006357a:	1851      	adds	r1, r2, r1
1006357c:	460a      	mov	r2, r1
1006357e:	3209      	adds	r2, #9
10063580:	7082      	strb	r2, [r0, #2]
10063582:	0a12      	lsrs	r2, r2, #8
10063584:	70c2      	strb	r2, [r0, #3]
10063586:	2206      	movs	r2, #6
10063588:	7102      	strb	r2, [r0, #4]
1006358a:	4a05      	ldr	r2, [pc, #20]	@ (100635a0 <__arm_cp.7_0>)
1006358c:	8002      	strh	r2, [r0, #0]
1006358e:	220c      	movs	r2, #12
10063590:	7142      	strb	r2, [r0, #5]
10063592:	310d      	adds	r1, #13
10063594:	b289      	uxth	r1, r1
10063596:	f7eb fc25 	bl	1004ede4 <BLE_STACK_Event>
1006359a:	b07f      	add	sp, #508	@ 0x1fc
1006359c:	b003      	add	sp, #12
1006359e:	bdb0      	pop	{r4, r5, r7, pc}

100635a0 <__arm_cp.7_0>:
100635a0:	0000ff82 	.word	0x0000ff82

100635a4 <aci_att_clt_read_resp_event_cb>:
100635a4:	b5b0      	push	{r4, r5, r7, lr}
100635a6:	b0ff      	sub	sp, #508	@ 0x1fc
100635a8:	b083      	sub	sp, #12
100635aa:	460c      	mov	r4, r1
100635ac:	4605      	mov	r5, r0
100635ae:	688b      	ldr	r3, [r1, #8]
100635b0:	88ca      	ldrh	r2, [r1, #6]
100635b2:	8889      	ldrh	r1, [r1, #4]
100635b4:	4668      	mov	r0, sp
100635b6:	1d80      	adds	r0, r0, #6
100635b8:	f7f2 fb97 	bl	10055cea <aci_att_clt_read_resp_event_copy>
100635bc:	0728      	lsls	r0, r5, #28
100635be:	d502      	bpl.n	100635c6 <aci_att_clt_read_resp_event_cb+0x22>
100635c0:	68a0      	ldr	r0, [r4, #8]
100635c2:	f7f1 fdd9 	bl	10055178 <ACL_pkt_release>
100635c6:	4668      	mov	r0, sp
100635c8:	8941      	ldrh	r1, [r0, #10]
100635ca:	460a      	mov	r2, r1
100635cc:	3208      	adds	r2, #8
100635ce:	7082      	strb	r2, [r0, #2]
100635d0:	0a12      	lsrs	r2, r2, #8
100635d2:	70c2      	strb	r2, [r0, #3]
100635d4:	2207      	movs	r2, #7
100635d6:	7102      	strb	r2, [r0, #4]
100635d8:	4a05      	ldr	r2, [pc, #20]	@ (100635f0 <__arm_cp.8_0>)
100635da:	8002      	strh	r2, [r0, #0]
100635dc:	220c      	movs	r2, #12
100635de:	7142      	strb	r2, [r0, #5]
100635e0:	310c      	adds	r1, #12
100635e2:	b289      	uxth	r1, r1
100635e4:	f7eb fbfe 	bl	1004ede4 <BLE_STACK_Event>
100635e8:	b07f      	add	sp, #508	@ 0x1fc
100635ea:	b003      	add	sp, #12
100635ec:	bdb0      	pop	{r4, r5, r7, pc}
100635ee:	46c0      	nop			@ (mov r8, r8)

100635f0 <__arm_cp.8_0>:
100635f0:	0000ff82 	.word	0x0000ff82

100635f4 <aci_att_clt_read_blob_resp_event_cb>:
100635f4:	b5b0      	push	{r4, r5, r7, lr}
100635f6:	b0ff      	sub	sp, #508	@ 0x1fc
100635f8:	b083      	sub	sp, #12
100635fa:	460c      	mov	r4, r1
100635fc:	4605      	mov	r5, r0
100635fe:	688b      	ldr	r3, [r1, #8]
10063600:	88ca      	ldrh	r2, [r1, #6]
10063602:	8889      	ldrh	r1, [r1, #4]
10063604:	4668      	mov	r0, sp
10063606:	1d80      	adds	r0, r0, #6
10063608:	f7f2 fb85 	bl	10055d16 <aci_att_clt_read_blob_resp_event_copy>
1006360c:	0728      	lsls	r0, r5, #28
1006360e:	d502      	bpl.n	10063616 <aci_att_clt_read_blob_resp_event_cb+0x22>
10063610:	68a0      	ldr	r0, [r4, #8]
10063612:	f7f1 fdb1 	bl	10055178 <ACL_pkt_release>
10063616:	4668      	mov	r0, sp
10063618:	8941      	ldrh	r1, [r0, #10]
1006361a:	460a      	mov	r2, r1
1006361c:	3208      	adds	r2, #8
1006361e:	7082      	strb	r2, [r0, #2]
10063620:	0a12      	lsrs	r2, r2, #8
10063622:	70c2      	strb	r2, [r0, #3]
10063624:	2208      	movs	r2, #8
10063626:	7102      	strb	r2, [r0, #4]
10063628:	4a05      	ldr	r2, [pc, #20]	@ (10063640 <__arm_cp.9_0>)
1006362a:	8002      	strh	r2, [r0, #0]
1006362c:	220c      	movs	r2, #12
1006362e:	7142      	strb	r2, [r0, #5]
10063630:	310c      	adds	r1, #12
10063632:	b289      	uxth	r1, r1
10063634:	f7eb fbd6 	bl	1004ede4 <BLE_STACK_Event>
10063638:	b07f      	add	sp, #508	@ 0x1fc
1006363a:	b003      	add	sp, #12
1006363c:	bdb0      	pop	{r4, r5, r7, pc}
1006363e:	46c0      	nop			@ (mov r8, r8)

10063640 <__arm_cp.9_0>:
10063640:	0000ff82 	.word	0x0000ff82

10063644 <aci_att_clt_read_multiple_resp_event_cb>:
10063644:	b5b0      	push	{r4, r5, r7, lr}
10063646:	b0ff      	sub	sp, #508	@ 0x1fc
10063648:	b083      	sub	sp, #12
1006364a:	460c      	mov	r4, r1
1006364c:	4605      	mov	r5, r0
1006364e:	688b      	ldr	r3, [r1, #8]
10063650:	88ca      	ldrh	r2, [r1, #6]
10063652:	8889      	ldrh	r1, [r1, #4]
10063654:	4668      	mov	r0, sp
10063656:	1d80      	adds	r0, r0, #6
10063658:	f7f2 fb73 	bl	10055d42 <aci_att_clt_read_multiple_resp_event_copy>
1006365c:	0728      	lsls	r0, r5, #28
1006365e:	d502      	bpl.n	10063666 <aci_att_clt_read_multiple_resp_event_cb+0x22>
10063660:	68a0      	ldr	r0, [r4, #8]
10063662:	f7f1 fd89 	bl	10055178 <ACL_pkt_release>
10063666:	4668      	mov	r0, sp
10063668:	8941      	ldrh	r1, [r0, #10]
1006366a:	460a      	mov	r2, r1
1006366c:	3208      	adds	r2, #8
1006366e:	7082      	strb	r2, [r0, #2]
10063670:	0a12      	lsrs	r2, r2, #8
10063672:	70c2      	strb	r2, [r0, #3]
10063674:	2209      	movs	r2, #9
10063676:	7102      	strb	r2, [r0, #4]
10063678:	4a05      	ldr	r2, [pc, #20]	@ (10063690 <__arm_cp.10_0>)
1006367a:	8002      	strh	r2, [r0, #0]
1006367c:	220c      	movs	r2, #12
1006367e:	7142      	strb	r2, [r0, #5]
10063680:	310c      	adds	r1, #12
10063682:	b289      	uxth	r1, r1
10063684:	f7eb fbae 	bl	1004ede4 <BLE_STACK_Event>
10063688:	b07f      	add	sp, #508	@ 0x1fc
1006368a:	b003      	add	sp, #12
1006368c:	bdb0      	pop	{r4, r5, r7, pc}
1006368e:	46c0      	nop			@ (mov r8, r8)

10063690 <__arm_cp.10_0>:
10063690:	0000ff82 	.word	0x0000ff82

10063694 <aci_att_clt_read_by_group_type_resp_event_cb>:
10063694:	b5b0      	push	{r4, r5, r7, lr}
10063696:	b0ff      	sub	sp, #508	@ 0x1fc
10063698:	b083      	sub	sp, #12
1006369a:	460c      	mov	r4, r1
1006369c:	4605      	mov	r5, r0
1006369e:	688b      	ldr	r3, [r1, #8]
100636a0:	88ca      	ldrh	r2, [r1, #6]
100636a2:	8889      	ldrh	r1, [r1, #4]
100636a4:	4668      	mov	r0, sp
100636a6:	1d80      	adds	r0, r0, #6
100636a8:	f7f2 fb61 	bl	10055d6e <aci_att_clt_read_by_group_type_resp_event_copy>
100636ac:	0728      	lsls	r0, r5, #28
100636ae:	d502      	bpl.n	100636b6 <aci_att_clt_read_by_group_type_resp_event_cb+0x22>
100636b0:	68a0      	ldr	r0, [r4, #8]
100636b2:	f7f1 fd61 	bl	10055178 <ACL_pkt_release>
100636b6:	4668      	mov	r0, sp
100636b8:	7ac1      	ldrb	r1, [r0, #11]
100636ba:	9a03      	ldr	r2, [sp, #12]
100636bc:	0212      	lsls	r2, r2, #8
100636be:	1851      	adds	r1, r2, r1
100636c0:	460a      	mov	r2, r1
100636c2:	3209      	adds	r2, #9
100636c4:	7082      	strb	r2, [r0, #2]
100636c6:	0a12      	lsrs	r2, r2, #8
100636c8:	70c2      	strb	r2, [r0, #3]
100636ca:	220a      	movs	r2, #10
100636cc:	7102      	strb	r2, [r0, #4]
100636ce:	4a05      	ldr	r2, [pc, #20]	@ (100636e4 <__arm_cp.11_0>)
100636d0:	8002      	strh	r2, [r0, #0]
100636d2:	220c      	movs	r2, #12
100636d4:	7142      	strb	r2, [r0, #5]
100636d6:	310d      	adds	r1, #13
100636d8:	b289      	uxth	r1, r1
100636da:	f7eb fb83 	bl	1004ede4 <BLE_STACK_Event>
100636de:	b07f      	add	sp, #508	@ 0x1fc
100636e0:	b003      	add	sp, #12
100636e2:	bdb0      	pop	{r4, r5, r7, pc}

100636e4 <__arm_cp.11_0>:
100636e4:	0000ff82 	.word	0x0000ff82

100636e8 <aci_att_clt_prepare_write_resp_event_cb>:
100636e8:	b5b0      	push	{r4, r5, r7, lr}
100636ea:	b0ff      	sub	sp, #508	@ 0x1fc
100636ec:	b083      	sub	sp, #12
100636ee:	460c      	mov	r4, r1
100636f0:	4605      	mov	r5, r0
100636f2:	688b      	ldr	r3, [r1, #8]
100636f4:	88ca      	ldrh	r2, [r1, #6]
100636f6:	8889      	ldrh	r1, [r1, #4]
100636f8:	4668      	mov	r0, sp
100636fa:	1d80      	adds	r0, r0, #6
100636fc:	f7f2 fb55 	bl	10055daa <aci_att_clt_prepare_write_resp_event_copy>
10063700:	0728      	lsls	r0, r5, #28
10063702:	d502      	bpl.n	1006370a <aci_att_clt_prepare_write_resp_event_cb+0x22>
10063704:	68a0      	ldr	r0, [r4, #8]
10063706:	f7f1 fd37 	bl	10055178 <ACL_pkt_release>
1006370a:	4668      	mov	r0, sp
1006370c:	89c1      	ldrh	r1, [r0, #14]
1006370e:	460a      	mov	r2, r1
10063710:	320c      	adds	r2, #12
10063712:	7082      	strb	r2, [r0, #2]
10063714:	0a12      	lsrs	r2, r2, #8
10063716:	70c2      	strb	r2, [r0, #3]
10063718:	220c      	movs	r2, #12
1006371a:	7102      	strb	r2, [r0, #4]
1006371c:	4b04      	ldr	r3, [pc, #16]	@ (10063730 <__arm_cp.12_0>)
1006371e:	8003      	strh	r3, [r0, #0]
10063720:	7142      	strb	r2, [r0, #5]
10063722:	3110      	adds	r1, #16
10063724:	b289      	uxth	r1, r1
10063726:	f7eb fb5d 	bl	1004ede4 <BLE_STACK_Event>
1006372a:	b07f      	add	sp, #508	@ 0x1fc
1006372c:	b003      	add	sp, #12
1006372e:	bdb0      	pop	{r4, r5, r7, pc}

10063730 <__arm_cp.12_0>:
10063730:	0000ff82 	.word	0x0000ff82

10063734 <aci_att_srv_prepare_write_req_event_cb>:
10063734:	b5f0      	push	{r4, r5, r6, r7, lr}
10063736:	b0ff      	sub	sp, #508	@ 0x1fc
10063738:	b086      	sub	sp, #24
1006373a:	460c      	mov	r4, r1
1006373c:	4605      	mov	r5, r0
1006373e:	890b      	ldrh	r3, [r1, #8]
10063740:	88ca      	ldrh	r2, [r1, #6]
10063742:	8889      	ldrh	r1, [r1, #4]
10063744:	8960      	ldrh	r0, [r4, #10]
10063746:	89a6      	ldrh	r6, [r4, #12]
10063748:	6927      	ldr	r7, [r4, #16]
1006374a:	9000      	str	r0, [sp, #0]
1006374c:	9601      	str	r6, [sp, #4]
1006374e:	9702      	str	r7, [sp, #8]
10063750:	a803      	add	r0, sp, #12
10063752:	1d80      	adds	r0, r0, #6
10063754:	f7f2 fbe2 	bl	10055f1c <aci_att_srv_prepare_write_req_event_copy>
10063758:	0728      	lsls	r0, r5, #28
1006375a:	d502      	bpl.n	10063762 <aci_att_srv_prepare_write_req_event_cb+0x2e>
1006375c:	6920      	ldr	r0, [r4, #16]
1006375e:	f7f1 fd0b 	bl	10055178 <ACL_pkt_release>
10063762:	a803      	add	r0, sp, #12
10063764:	89c1      	ldrh	r1, [r0, #14]
10063766:	460a      	mov	r2, r1
10063768:	320c      	adds	r2, #12
1006376a:	7082      	strb	r2, [r0, #2]
1006376c:	0a12      	lsrs	r2, r2, #8
1006376e:	70c2      	strb	r2, [r0, #3]
10063770:	221b      	movs	r2, #27
10063772:	7102      	strb	r2, [r0, #4]
10063774:	4a05      	ldr	r2, [pc, #20]	@ (1006378c <__arm_cp.13_0>)
10063776:	8002      	strh	r2, [r0, #0]
10063778:	220c      	movs	r2, #12
1006377a:	7142      	strb	r2, [r0, #5]
1006377c:	3110      	adds	r1, #16
1006377e:	b289      	uxth	r1, r1
10063780:	f7eb fb30 	bl	1004ede4 <BLE_STACK_Event>
10063784:	b07f      	add	sp, #508	@ 0x1fc
10063786:	b006      	add	sp, #24
10063788:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006378a:	46c0      	nop			@ (mov r8, r8)

1006378c <__arm_cp.13_0>:
1006378c:	0000ff82 	.word	0x0000ff82

10063790 <aci_att_clt_read_multiple_var_len_resp_event_cb>:
10063790:	b5b0      	push	{r4, r5, r7, lr}
10063792:	b0ff      	sub	sp, #508	@ 0x1fc
10063794:	b083      	sub	sp, #12
10063796:	460c      	mov	r4, r1
10063798:	4605      	mov	r5, r0
1006379a:	688b      	ldr	r3, [r1, #8]
1006379c:	88ca      	ldrh	r2, [r1, #6]
1006379e:	8889      	ldrh	r1, [r1, #4]
100637a0:	4668      	mov	r0, sp
100637a2:	1d80      	adds	r0, r0, #6
100637a4:	f7f2 fbed 	bl	10055f82 <aci_att_clt_read_multiple_var_len_resp_event_copy>
100637a8:	0728      	lsls	r0, r5, #28
100637aa:	d502      	bpl.n	100637b2 <aci_att_clt_read_multiple_var_len_resp_event_cb+0x22>
100637ac:	68a0      	ldr	r0, [r4, #8]
100637ae:	f7f1 fce3 	bl	10055178 <ACL_pkt_release>
100637b2:	4668      	mov	r0, sp
100637b4:	8941      	ldrh	r1, [r0, #10]
100637b6:	460a      	mov	r2, r1
100637b8:	3208      	adds	r2, #8
100637ba:	7082      	strb	r2, [r0, #2]
100637bc:	0a12      	lsrs	r2, r2, #8
100637be:	70c2      	strb	r2, [r0, #3]
100637c0:	221e      	movs	r2, #30
100637c2:	7102      	strb	r2, [r0, #4]
100637c4:	4a05      	ldr	r2, [pc, #20]	@ (100637dc <__arm_cp.14_0>)
100637c6:	8002      	strh	r2, [r0, #0]
100637c8:	220c      	movs	r2, #12
100637ca:	7142      	strb	r2, [r0, #5]
100637cc:	310c      	adds	r1, #12
100637ce:	b289      	uxth	r1, r1
100637d0:	f7eb fb08 	bl	1004ede4 <BLE_STACK_Event>
100637d4:	b07f      	add	sp, #508	@ 0x1fc
100637d6:	b003      	add	sp, #12
100637d8:	bdb0      	pop	{r4, r5, r7, pc}
100637da:	46c0      	nop			@ (mov r8, r8)

100637dc <__arm_cp.14_0>:
100637dc:	0000ff82 	.word	0x0000ff82

100637e0 <aci_gatt_srv_attribute_modified_event_push_noinline>:
100637e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100637e2:	b085      	sub	sp, #20
100637e4:	4605      	mov	r5, r0
100637e6:	06c0      	lsls	r0, r0, #27
100637e8:	d445      	bmi.n	10063876 <aci_gatt_srv_attribute_modified_event_push_noinline+0x96>
100637ea:	4826      	ldr	r0, [pc, #152]	@ (10063884 <__arm_cp.15_0>)
100637ec:	6800      	ldr	r0, [r0, #0]
100637ee:	2450      	movs	r4, #80	@ 0x50
100637f0:	5d00      	ldrb	r0, [r0, r4]
100637f2:	2400      	movs	r4, #0
100637f4:	07c0      	lsls	r0, r0, #31
100637f6:	d03f      	beq.n	10063878 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
100637f8:	9302      	str	r3, [sp, #8]
100637fa:	9203      	str	r2, [sp, #12]
100637fc:	9104      	str	r1, [sp, #16]
100637fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10063800:	4821      	ldr	r0, [pc, #132]	@ (10063888 <__arm_cp.15_1>)
10063802:	6800      	ldr	r0, [r0, #0]
10063804:	0769      	lsls	r1, r5, #29
10063806:	0ec9      	lsrs	r1, r1, #27
10063808:	1840      	adds	r0, r0, r1
1006380a:	6900      	ldr	r0, [r0, #16]
1006380c:	1e71      	subs	r1, r6, #1
1006380e:	2203      	movs	r2, #3
10063810:	430a      	orrs	r2, r1
10063812:	3211      	adds	r2, #17
10063814:	0891      	lsrs	r1, r2, #2
10063816:	b28b      	uxth	r3, r1
10063818:	2256      	movs	r2, #86	@ 0x56
1006381a:	4629      	mov	r1, r5
1006381c:	f7f1 fe60 	bl	100554e0 <aci_event_fifo_push_header>
10063820:	2800      	cmp	r0, #0
10063822:	d02c      	beq.n	1006387e <aci_gatt_srv_attribute_modified_event_push_noinline+0x9e>
10063824:	4607      	mov	r7, r0
10063826:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10063828:	9001      	str	r0, [sp, #4]
1006382a:	743e      	strb	r6, [r7, #16]
1006382c:	9902      	ldr	r1, [sp, #8]
1006382e:	73b9      	strb	r1, [r7, #14]
10063830:	9b03      	ldr	r3, [sp, #12]
10063832:	733b      	strb	r3, [r7, #12]
10063834:	9a04      	ldr	r2, [sp, #16]
10063836:	72ba      	strb	r2, [r7, #10]
10063838:	0a30      	lsrs	r0, r6, #8
1006383a:	7478      	strb	r0, [r7, #17]
1006383c:	0a08      	lsrs	r0, r1, #8
1006383e:	73f8      	strb	r0, [r7, #15]
10063840:	0a18      	lsrs	r0, r3, #8
10063842:	7378      	strb	r0, [r7, #13]
10063844:	0a10      	lsrs	r0, r2, #8
10063846:	72f8      	strb	r0, [r7, #11]
10063848:	4638      	mov	r0, r7
1006384a:	3012      	adds	r0, #18
1006384c:	9901      	ldr	r1, [sp, #4]
1006384e:	4632      	mov	r2, r6
10063850:	f7ef f8fa 	bl	10052a48 <BLEPLAT_MemCpy>
10063854:	200c      	movs	r0, #12
10063856:	7278      	strb	r0, [r7, #9]
10063858:	2001      	movs	r0, #1
1006385a:	7238      	strb	r0, [r7, #8]
1006385c:	360a      	adds	r6, #10
1006385e:	0a30      	lsrs	r0, r6, #8
10063860:	71f8      	strb	r0, [r7, #7]
10063862:	71be      	strb	r6, [r7, #6]
10063864:	20ff      	movs	r0, #255	@ 0xff
10063866:	7178      	strb	r0, [r7, #5]
10063868:	2082      	movs	r0, #130	@ 0x82
1006386a:	7138      	strb	r0, [r7, #4]
1006386c:	4628      	mov	r0, r5
1006386e:	4639      	mov	r1, r7
10063870:	f7f1 fed3 	bl	1005561a <aci_event_fifo_push>
10063874:	e000      	b.n	10063878 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10063876:	2486      	movs	r4, #134	@ 0x86
10063878:	4620      	mov	r0, r4
1006387a:	b005      	add	sp, #20
1006387c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006387e:	2407      	movs	r4, #7
10063880:	e7fa      	b.n	10063878 <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10063882:	46c0      	nop			@ (mov r8, r8)

10063884 <__arm_cp.15_0>:
10063884:	20002468 	.word	0x20002468

10063888 <__arm_cp.15_1>:
10063888:	20002418 	.word	0x20002418

1006388c <aci_gatt_proc_timeout_event_push_noinline>:
1006388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006388e:	4604      	mov	r4, r0
10063890:	06c0      	lsls	r0, r0, #27
10063892:	d408      	bmi.n	100638a6 <aci_gatt_proc_timeout_event_push_noinline+0x1a>
10063894:	460d      	mov	r5, r1
10063896:	4819      	ldr	r0, [pc, #100]	@ (100638fc <__arm_cp.16_0>)
10063898:	6800      	ldr	r0, [r0, #0]
1006389a:	2150      	movs	r1, #80	@ 0x50
1006389c:	5c40      	ldrb	r0, [r0, r1]
1006389e:	0780      	lsls	r0, r0, #30
100638a0:	d403      	bmi.n	100638aa <aci_gatt_proc_timeout_event_push_noinline+0x1e>
100638a2:	2700      	movs	r7, #0
100638a4:	e027      	b.n	100638f6 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100638a6:	2786      	movs	r7, #134	@ 0x86
100638a8:	e025      	b.n	100638f6 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100638aa:	4616      	mov	r6, r2
100638ac:	4814      	ldr	r0, [pc, #80]	@ (10063900 <__arm_cp.16_1>)
100638ae:	6800      	ldr	r0, [r0, #0]
100638b0:	0761      	lsls	r1, r4, #29
100638b2:	0ec9      	lsrs	r1, r1, #27
100638b4:	1840      	adds	r0, r0, r1
100638b6:	6900      	ldr	r0, [r0, #16]
100638b8:	2257      	movs	r2, #87	@ 0x57
100638ba:	2303      	movs	r3, #3
100638bc:	4621      	mov	r1, r4
100638be:	f7f1 fe0f 	bl	100554e0 <aci_event_fifo_push_header>
100638c2:	2800      	cmp	r0, #0
100638c4:	d016      	beq.n	100638f4 <aci_gatt_proc_timeout_event_push_noinline+0x68>
100638c6:	4601      	mov	r1, r0
100638c8:	7306      	strb	r6, [r0, #12]
100638ca:	7285      	strb	r5, [r0, #10]
100638cc:	200c      	movs	r0, #12
100638ce:	7248      	strb	r0, [r1, #9]
100638d0:	2002      	movs	r0, #2
100638d2:	7208      	strb	r0, [r1, #8]
100638d4:	2700      	movs	r7, #0
100638d6:	71cf      	strb	r7, [r1, #7]
100638d8:	2006      	movs	r0, #6
100638da:	7188      	strb	r0, [r1, #6]
100638dc:	20ff      	movs	r0, #255	@ 0xff
100638de:	7148      	strb	r0, [r1, #5]
100638e0:	2082      	movs	r0, #130	@ 0x82
100638e2:	7108      	strb	r0, [r1, #4]
100638e4:	0a30      	lsrs	r0, r6, #8
100638e6:	7348      	strb	r0, [r1, #13]
100638e8:	0a28      	lsrs	r0, r5, #8
100638ea:	72c8      	strb	r0, [r1, #11]
100638ec:	4620      	mov	r0, r4
100638ee:	f7f1 fe94 	bl	1005561a <aci_event_fifo_push>
100638f2:	e000      	b.n	100638f6 <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100638f4:	2707      	movs	r7, #7
100638f6:	4638      	mov	r0, r7
100638f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100638fa:	46c0      	nop			@ (mov r8, r8)

100638fc <__arm_cp.16_0>:
100638fc:	20002468 	.word	0x20002468

10063900 <__arm_cp.16_1>:
10063900:	20002418 	.word	0x20002418

10063904 <aci_gatt_clt_indication_event_push_noinline>:
10063904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063906:	4605      	mov	r5, r0
10063908:	06c0      	lsls	r0, r0, #27
1006390a:	d421      	bmi.n	10063950 <aci_gatt_clt_indication_event_push_noinline+0x4c>
1006390c:	460e      	mov	r6, r1
1006390e:	4813      	ldr	r0, [pc, #76]	@ (1006395c <__arm_cp.17_0>)
10063910:	6800      	ldr	r0, [r0, #0]
10063912:	2151      	movs	r1, #81	@ 0x51
10063914:	5c40      	ldrb	r0, [r0, r1]
10063916:	2400      	movs	r4, #0
10063918:	0680      	lsls	r0, r0, #26
1006391a:	d51a      	bpl.n	10063952 <aci_gatt_clt_indication_event_push_noinline+0x4e>
1006391c:	4617      	mov	r7, r2
1006391e:	9300      	str	r3, [sp, #0]
10063920:	480f      	ldr	r0, [pc, #60]	@ (10063960 <__arm_cp.17_1>)
10063922:	6800      	ldr	r0, [r0, #0]
10063924:	0769      	lsls	r1, r5, #29
10063926:	0ec9      	lsrs	r1, r1, #27
10063928:	1840      	adds	r0, r0, r1
1006392a:	6900      	ldr	r0, [r0, #16]
1006392c:	220f      	movs	r2, #15
1006392e:	2303      	movs	r3, #3
10063930:	4629      	mov	r1, r5
10063932:	f7f1 fdd5 	bl	100554e0 <aci_event_fifo_push_header>
10063936:	2800      	cmp	r0, #0
10063938:	d00d      	beq.n	10063956 <aci_gatt_clt_indication_event_push_noinline+0x52>
1006393a:	4601      	mov	r1, r0
1006393c:	9800      	ldr	r0, [sp, #0]
1006393e:	60c8      	str	r0, [r1, #12]
10063940:	814f      	strh	r7, [r1, #10]
10063942:	810e      	strh	r6, [r1, #8]
10063944:	4807      	ldr	r0, [pc, #28]	@ (10063964 <__arm_cp.17_2>)
10063946:	6048      	str	r0, [r1, #4]
10063948:	4628      	mov	r0, r5
1006394a:	f7f1 fe66 	bl	1005561a <aci_event_fifo_push>
1006394e:	e000      	b.n	10063952 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10063950:	2486      	movs	r4, #134	@ 0x86
10063952:	4620      	mov	r0, r4
10063954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063956:	2407      	movs	r4, #7
10063958:	e7fb      	b.n	10063952 <aci_gatt_clt_indication_event_push_noinline+0x4e>
1006395a:	46c0      	nop			@ (mov r8, r8)

1006395c <__arm_cp.17_0>:
1006395c:	20002468 	.word	0x20002468

10063960 <__arm_cp.17_1>:
10063960:	20002418 	.word	0x20002418

10063964 <__arm_cp.17_2>:
10063964:	10063345 	.word	0x10063345

10063968 <aci_gatt_clt_notification_event_push_noinline>:
10063968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006396a:	4605      	mov	r5, r0
1006396c:	06c0      	lsls	r0, r0, #27
1006396e:	d421      	bmi.n	100639b4 <aci_gatt_clt_notification_event_push_noinline+0x4c>
10063970:	460e      	mov	r6, r1
10063972:	4813      	ldr	r0, [pc, #76]	@ (100639c0 <__arm_cp.18_0>)
10063974:	6800      	ldr	r0, [r0, #0]
10063976:	2151      	movs	r1, #81	@ 0x51
10063978:	5c40      	ldrb	r0, [r0, r1]
1006397a:	2400      	movs	r4, #0
1006397c:	0640      	lsls	r0, r0, #25
1006397e:	d51a      	bpl.n	100639b6 <aci_gatt_clt_notification_event_push_noinline+0x4e>
10063980:	4617      	mov	r7, r2
10063982:	9300      	str	r3, [sp, #0]
10063984:	480f      	ldr	r0, [pc, #60]	@ (100639c4 <__arm_cp.18_1>)
10063986:	6800      	ldr	r0, [r0, #0]
10063988:	0769      	lsls	r1, r5, #29
1006398a:	0ec9      	lsrs	r1, r1, #27
1006398c:	1840      	adds	r0, r0, r1
1006398e:	6900      	ldr	r0, [r0, #16]
10063990:	2210      	movs	r2, #16
10063992:	2303      	movs	r3, #3
10063994:	4629      	mov	r1, r5
10063996:	f7f1 fda3 	bl	100554e0 <aci_event_fifo_push_header>
1006399a:	2800      	cmp	r0, #0
1006399c:	d00d      	beq.n	100639ba <aci_gatt_clt_notification_event_push_noinline+0x52>
1006399e:	4601      	mov	r1, r0
100639a0:	9800      	ldr	r0, [sp, #0]
100639a2:	60c8      	str	r0, [r1, #12]
100639a4:	814f      	strh	r7, [r1, #10]
100639a6:	810e      	strh	r6, [r1, #8]
100639a8:	4807      	ldr	r0, [pc, #28]	@ (100639c8 <__arm_cp.18_2>)
100639aa:	6048      	str	r0, [r1, #4]
100639ac:	4628      	mov	r0, r5
100639ae:	f7f1 fe34 	bl	1005561a <aci_event_fifo_push>
100639b2:	e000      	b.n	100639b6 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100639b4:	2486      	movs	r4, #134	@ 0x86
100639b6:	4620      	mov	r0, r4
100639b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100639ba:	2407      	movs	r4, #7
100639bc:	e7fb      	b.n	100639b6 <aci_gatt_clt_notification_event_push_noinline+0x4e>
100639be:	46c0      	nop			@ (mov r8, r8)

100639c0 <__arm_cp.18_0>:
100639c0:	20002468 	.word	0x20002468

100639c4 <__arm_cp.18_1>:
100639c4:	20002418 	.word	0x20002418

100639c8 <__arm_cp.18_2>:
100639c8:	10063395 	.word	0x10063395

100639cc <aci_gatt_clt_error_resp_event_push_noinline>:
100639cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100639ce:	4604      	mov	r4, r0
100639d0:	06c0      	lsls	r0, r0, #27
100639d2:	d408      	bmi.n	100639e6 <aci_gatt_clt_error_resp_event_push_noinline+0x1a>
100639d4:	460d      	mov	r5, r1
100639d6:	481e      	ldr	r0, [pc, #120]	@ (10063a50 <__arm_cp.20_0>)
100639d8:	6800      	ldr	r0, [r0, #0]
100639da:	2151      	movs	r1, #81	@ 0x51
100639dc:	5640      	ldrsb	r0, [r0, r1]
100639de:	2800      	cmp	r0, #0
100639e0:	d404      	bmi.n	100639ec <aci_gatt_clt_error_resp_event_push_noinline+0x20>
100639e2:	2700      	movs	r7, #0
100639e4:	e000      	b.n	100639e8 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
100639e6:	2786      	movs	r7, #134	@ 0x86
100639e8:	4638      	mov	r0, r7
100639ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100639ec:	461f      	mov	r7, r3
100639ee:	4616      	mov	r6, r2
100639f0:	4818      	ldr	r0, [pc, #96]	@ (10063a54 <__arm_cp.20_1>)
100639f2:	6800      	ldr	r0, [r0, #0]
100639f4:	0761      	lsls	r1, r4, #29
100639f6:	0ec9      	lsrs	r1, r1, #27
100639f8:	1840      	adds	r0, r0, r1
100639fa:	6900      	ldr	r0, [r0, #16]
100639fc:	225b      	movs	r2, #91	@ 0x5b
100639fe:	2304      	movs	r3, #4
10063a00:	4621      	mov	r1, r4
10063a02:	f7f1 fd6d 	bl	100554e0 <aci_event_fifo_push_header>
10063a06:	2800      	cmp	r0, #0
10063a08:	d020      	beq.n	10063a4c <aci_gatt_clt_error_resp_event_push_noinline+0x80>
10063a0a:	4601      	mov	r1, r0
10063a0c:	9a07      	ldr	r2, [sp, #28]
10063a0e:	9806      	ldr	r0, [sp, #24]
10063a10:	9000      	str	r0, [sp, #0]
10063a12:	73c8      	strb	r0, [r1, #15]
10063a14:	730e      	strb	r6, [r1, #12]
10063a16:	728d      	strb	r5, [r1, #10]
10063a18:	230c      	movs	r3, #12
10063a1a:	724b      	strb	r3, [r1, #9]
10063a1c:	2311      	movs	r3, #17
10063a1e:	720b      	strb	r3, [r1, #8]
10063a20:	4638      	mov	r0, r7
10063a22:	2700      	movs	r7, #0
10063a24:	71cf      	strb	r7, [r1, #7]
10063a26:	230a      	movs	r3, #10
10063a28:	718b      	strb	r3, [r1, #6]
10063a2a:	744a      	strb	r2, [r1, #17]
10063a2c:	7388      	strb	r0, [r1, #14]
10063a2e:	22ff      	movs	r2, #255	@ 0xff
10063a30:	714a      	strb	r2, [r1, #5]
10063a32:	2282      	movs	r2, #130	@ 0x82
10063a34:	710a      	strb	r2, [r1, #4]
10063a36:	9800      	ldr	r0, [sp, #0]
10063a38:	0a00      	lsrs	r0, r0, #8
10063a3a:	7408      	strb	r0, [r1, #16]
10063a3c:	0a30      	lsrs	r0, r6, #8
10063a3e:	7348      	strb	r0, [r1, #13]
10063a40:	0a28      	lsrs	r0, r5, #8
10063a42:	72c8      	strb	r0, [r1, #11]
10063a44:	4620      	mov	r0, r4
10063a46:	f7f1 fde8 	bl	1005561a <aci_event_fifo_push>
10063a4a:	e7cd      	b.n	100639e8 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
10063a4c:	2707      	movs	r7, #7
10063a4e:	e7cb      	b.n	100639e8 <aci_gatt_clt_error_resp_event_push_noinline+0x1c>

10063a50 <__arm_cp.20_0>:
10063a50:	20002468 	.word	0x20002468

10063a54 <__arm_cp.20_1>:
10063a54:	20002418 	.word	0x20002418

10063a58 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>:
10063a58:	b5f0      	push	{r4, r5, r6, r7, lr}
10063a5a:	b087      	sub	sp, #28
10063a5c:	4605      	mov	r5, r0
10063a5e:	06c0      	lsls	r0, r0, #27
10063a60:	d443      	bmi.n	10063aea <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x92>
10063a62:	460e      	mov	r6, r1
10063a64:	4824      	ldr	r0, [pc, #144]	@ (10063af8 <__arm_cp.21_0>)
10063a66:	6800      	ldr	r0, [r0, #0]
10063a68:	2152      	movs	r1, #82	@ 0x52
10063a6a:	5c40      	ldrb	r0, [r0, r1]
10063a6c:	2400      	movs	r4, #0
10063a6e:	0780      	lsls	r0, r0, #30
10063a70:	d53c      	bpl.n	10063aec <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
10063a72:	9204      	str	r2, [sp, #16]
10063a74:	9305      	str	r3, [sp, #20]
10063a76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10063a78:	4820      	ldr	r0, [pc, #128]	@ (10063afc <__arm_cp.21_1>)
10063a7a:	6800      	ldr	r0, [r0, #0]
10063a7c:	0769      	lsls	r1, r5, #29
10063a7e:	0ec9      	lsrs	r1, r1, #27
10063a80:	1840      	adds	r0, r0, r1
10063a82:	6900      	ldr	r0, [r0, #16]
10063a84:	491e      	ldr	r1, [pc, #120]	@ (10063b00 <__arm_cp.21_2>)
10063a86:	9206      	str	r2, [sp, #24]
10063a88:	1851      	adds	r1, r2, r1
10063a8a:	2203      	movs	r2, #3
10063a8c:	430a      	orrs	r2, r1
10063a8e:	3211      	adds	r2, #17
10063a90:	0891      	lsrs	r1, r2, #2
10063a92:	b28b      	uxth	r3, r1
10063a94:	225c      	movs	r2, #92	@ 0x5c
10063a96:	4629      	mov	r1, r5
10063a98:	f7f1 fd22 	bl	100554e0 <aci_event_fifo_push_header>
10063a9c:	2800      	cmp	r0, #0
10063a9e:	d028      	beq.n	10063af2 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x9a>
10063aa0:	4607      	mov	r7, r0
10063aa2:	990d      	ldr	r1, [sp, #52]	@ 0x34
10063aa4:	9806      	ldr	r0, [sp, #24]
10063aa6:	9000      	str	r0, [sp, #0]
10063aa8:	9103      	str	r1, [sp, #12]
10063aaa:	9101      	str	r1, [sp, #4]
10063aac:	1d38      	adds	r0, r7, #4
10063aae:	4631      	mov	r1, r6
10063ab0:	9a04      	ldr	r2, [sp, #16]
10063ab2:	9b05      	ldr	r3, [sp, #20]
10063ab4:	f7f2 f9f3 	bl	10055e9e <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>
10063ab8:	0728      	lsls	r0, r5, #28
10063aba:	d504      	bpl.n	10063ac6 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x6e>
10063abc:	9803      	ldr	r0, [sp, #12]
10063abe:	f7f1 fb5b 	bl	10055178 <ACL_pkt_release>
10063ac2:	20f7      	movs	r0, #247	@ 0xf7
10063ac4:	4005      	ands	r5, r0
10063ac6:	200c      	movs	r0, #12
10063ac8:	7278      	strb	r0, [r7, #9]
10063aca:	2012      	movs	r0, #18
10063acc:	7238      	strb	r0, [r7, #8]
10063ace:	20ff      	movs	r0, #255	@ 0xff
10063ad0:	7178      	strb	r0, [r7, #5]
10063ad2:	2082      	movs	r0, #130	@ 0x82
10063ad4:	7138      	strb	r0, [r7, #4]
10063ad6:	9806      	ldr	r0, [sp, #24]
10063ad8:	1dc0      	adds	r0, r0, #7
10063ada:	71b8      	strb	r0, [r7, #6]
10063adc:	0a00      	lsrs	r0, r0, #8
10063ade:	71f8      	strb	r0, [r7, #7]
10063ae0:	4628      	mov	r0, r5
10063ae2:	4639      	mov	r1, r7
10063ae4:	f7f1 fd99 	bl	1005561a <aci_event_fifo_push>
10063ae8:	e000      	b.n	10063aec <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
10063aea:	2486      	movs	r4, #134	@ 0x86
10063aec:	4620      	mov	r0, r4
10063aee:	b007      	add	sp, #28
10063af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063af2:	2407      	movs	r4, #7
10063af4:	e7fa      	b.n	10063aec <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
10063af6:	46c0      	nop			@ (mov r8, r8)

10063af8 <__arm_cp.21_0>:
10063af8:	20002468 	.word	0x20002468

10063afc <__arm_cp.21_1>:
10063afc:	20002418 	.word	0x20002418

10063b00 <__arm_cp.21_2>:
10063b00:	0003fffd 	.word	0x0003fffd

10063b04 <aci_gatt_tx_pool_available_event_push_noinline>:
10063b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063b06:	4604      	mov	r4, r0
10063b08:	06c0      	lsls	r0, r0, #27
10063b0a:	d425      	bmi.n	10063b58 <aci_gatt_tx_pool_available_event_push_noinline+0x54>
10063b0c:	4616      	mov	r6, r2
10063b0e:	460d      	mov	r5, r1
10063b10:	4814      	ldr	r0, [pc, #80]	@ (10063b64 <__arm_cp.22_0>)
10063b12:	6800      	ldr	r0, [r0, #0]
10063b14:	0761      	lsls	r1, r4, #29
10063b16:	0ec9      	lsrs	r1, r1, #27
10063b18:	1840      	adds	r0, r0, r1
10063b1a:	6900      	ldr	r0, [r0, #16]
10063b1c:	225d      	movs	r2, #93	@ 0x5d
10063b1e:	2303      	movs	r3, #3
10063b20:	4621      	mov	r1, r4
10063b22:	f7f1 fcdd 	bl	100554e0 <aci_event_fifo_push_header>
10063b26:	2800      	cmp	r0, #0
10063b28:	d018      	beq.n	10063b5c <aci_gatt_tx_pool_available_event_push_noinline+0x58>
10063b2a:	4601      	mov	r1, r0
10063b2c:	7306      	strb	r6, [r0, #12]
10063b2e:	7285      	strb	r5, [r0, #10]
10063b30:	200c      	movs	r0, #12
10063b32:	7248      	strb	r0, [r1, #9]
10063b34:	2016      	movs	r0, #22
10063b36:	7208      	strb	r0, [r1, #8]
10063b38:	2700      	movs	r7, #0
10063b3a:	71cf      	strb	r7, [r1, #7]
10063b3c:	2006      	movs	r0, #6
10063b3e:	7188      	strb	r0, [r1, #6]
10063b40:	20ff      	movs	r0, #255	@ 0xff
10063b42:	7148      	strb	r0, [r1, #5]
10063b44:	2082      	movs	r0, #130	@ 0x82
10063b46:	7108      	strb	r0, [r1, #4]
10063b48:	0a30      	lsrs	r0, r6, #8
10063b4a:	7348      	strb	r0, [r1, #13]
10063b4c:	0a28      	lsrs	r0, r5, #8
10063b4e:	72c8      	strb	r0, [r1, #11]
10063b50:	4620      	mov	r0, r4
10063b52:	f7f1 fd62 	bl	1005561a <aci_event_fifo_push>
10063b56:	e002      	b.n	10063b5e <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10063b58:	2786      	movs	r7, #134	@ 0x86
10063b5a:	e000      	b.n	10063b5e <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10063b5c:	2707      	movs	r7, #7
10063b5e:	4638      	mov	r0, r7
10063b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b62:	46c0      	nop			@ (mov r8, r8)

10063b64 <__arm_cp.22_0>:
10063b64:	20002418 	.word	0x20002418

10063b68 <aci_gatt_srv_confirmation_event_push_noinline>:
10063b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063b6a:	4604      	mov	r4, r0
10063b6c:	06c0      	lsls	r0, r0, #27
10063b6e:	d425      	bmi.n	10063bbc <aci_gatt_srv_confirmation_event_push_noinline+0x54>
10063b70:	4616      	mov	r6, r2
10063b72:	460d      	mov	r5, r1
10063b74:	4814      	ldr	r0, [pc, #80]	@ (10063bc8 <__arm_cp.23_0>)
10063b76:	6800      	ldr	r0, [r0, #0]
10063b78:	0761      	lsls	r1, r4, #29
10063b7a:	0ec9      	lsrs	r1, r1, #27
10063b7c:	1840      	adds	r0, r0, r1
10063b7e:	6900      	ldr	r0, [r0, #16]
10063b80:	225e      	movs	r2, #94	@ 0x5e
10063b82:	2303      	movs	r3, #3
10063b84:	4621      	mov	r1, r4
10063b86:	f7f1 fcab 	bl	100554e0 <aci_event_fifo_push_header>
10063b8a:	2800      	cmp	r0, #0
10063b8c:	d018      	beq.n	10063bc0 <aci_gatt_srv_confirmation_event_push_noinline+0x58>
10063b8e:	4601      	mov	r1, r0
10063b90:	7306      	strb	r6, [r0, #12]
10063b92:	7285      	strb	r5, [r0, #10]
10063b94:	200c      	movs	r0, #12
10063b96:	7248      	strb	r0, [r1, #9]
10063b98:	2017      	movs	r0, #23
10063b9a:	7208      	strb	r0, [r1, #8]
10063b9c:	2700      	movs	r7, #0
10063b9e:	71cf      	strb	r7, [r1, #7]
10063ba0:	2006      	movs	r0, #6
10063ba2:	7188      	strb	r0, [r1, #6]
10063ba4:	20ff      	movs	r0, #255	@ 0xff
10063ba6:	7148      	strb	r0, [r1, #5]
10063ba8:	2082      	movs	r0, #130	@ 0x82
10063baa:	7108      	strb	r0, [r1, #4]
10063bac:	0a30      	lsrs	r0, r6, #8
10063bae:	7348      	strb	r0, [r1, #13]
10063bb0:	0a28      	lsrs	r0, r5, #8
10063bb2:	72c8      	strb	r0, [r1, #11]
10063bb4:	4620      	mov	r0, r4
10063bb6:	f7f1 fd30 	bl	1005561a <aci_event_fifo_push>
10063bba:	e002      	b.n	10063bc2 <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
10063bbc:	2786      	movs	r7, #134	@ 0x86
10063bbe:	e000      	b.n	10063bc2 <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
10063bc0:	2707      	movs	r7, #7
10063bc2:	4638      	mov	r0, r7
10063bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063bc6:	46c0      	nop			@ (mov r8, r8)

10063bc8 <__arm_cp.23_0>:
10063bc8:	20002418 	.word	0x20002418

10063bcc <aci_gatt_srv_read_event_push_noinline>:
10063bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063bce:	4604      	mov	r4, r0
10063bd0:	06c0      	lsls	r0, r0, #27
10063bd2:	d42e      	bmi.n	10063c32 <aci_gatt_srv_read_event_push_noinline+0x66>
10063bd4:	461f      	mov	r7, r3
10063bd6:	4616      	mov	r6, r2
10063bd8:	460d      	mov	r5, r1
10063bda:	4818      	ldr	r0, [pc, #96]	@ (10063c3c <__arm_cp.24_0>)
10063bdc:	6800      	ldr	r0, [r0, #0]
10063bde:	0761      	lsls	r1, r4, #29
10063be0:	0ec9      	lsrs	r1, r1, #27
10063be2:	1840      	adds	r0, r0, r1
10063be4:	6900      	ldr	r0, [r0, #16]
10063be6:	225f      	movs	r2, #95	@ 0x5f
10063be8:	2304      	movs	r3, #4
10063bea:	4621      	mov	r1, r4
10063bec:	f7f1 fc78 	bl	100554e0 <aci_event_fifo_push_header>
10063bf0:	2800      	cmp	r0, #0
10063bf2:	d020      	beq.n	10063c36 <aci_gatt_srv_read_event_push_noinline+0x6a>
10063bf4:	4601      	mov	r1, r0
10063bf6:	9806      	ldr	r0, [sp, #24]
10063bf8:	7408      	strb	r0, [r1, #16]
10063bfa:	738f      	strb	r7, [r1, #14]
10063bfc:	730e      	strb	r6, [r1, #12]
10063bfe:	728d      	strb	r5, [r1, #10]
10063c00:	220c      	movs	r2, #12
10063c02:	724a      	strb	r2, [r1, #9]
10063c04:	2219      	movs	r2, #25
10063c06:	720a      	strb	r2, [r1, #8]
10063c08:	462b      	mov	r3, r5
10063c0a:	2500      	movs	r5, #0
10063c0c:	71cd      	strb	r5, [r1, #7]
10063c0e:	220a      	movs	r2, #10
10063c10:	718a      	strb	r2, [r1, #6]
10063c12:	22ff      	movs	r2, #255	@ 0xff
10063c14:	714a      	strb	r2, [r1, #5]
10063c16:	2282      	movs	r2, #130	@ 0x82
10063c18:	710a      	strb	r2, [r1, #4]
10063c1a:	0a00      	lsrs	r0, r0, #8
10063c1c:	7448      	strb	r0, [r1, #17]
10063c1e:	0a38      	lsrs	r0, r7, #8
10063c20:	73c8      	strb	r0, [r1, #15]
10063c22:	0a30      	lsrs	r0, r6, #8
10063c24:	7348      	strb	r0, [r1, #13]
10063c26:	0a18      	lsrs	r0, r3, #8
10063c28:	72c8      	strb	r0, [r1, #11]
10063c2a:	4620      	mov	r0, r4
10063c2c:	f7f1 fcf5 	bl	1005561a <aci_event_fifo_push>
10063c30:	e002      	b.n	10063c38 <aci_gatt_srv_read_event_push_noinline+0x6c>
10063c32:	2586      	movs	r5, #134	@ 0x86
10063c34:	e000      	b.n	10063c38 <aci_gatt_srv_read_event_push_noinline+0x6c>
10063c36:	2507      	movs	r5, #7
10063c38:	4628      	mov	r0, r5
10063c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063c3c <__arm_cp.24_0>:
10063c3c:	20002418 	.word	0x20002418

10063c40 <aci_gatt_srv_write_event_push_noinline>:
10063c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063c42:	4604      	mov	r4, r0
10063c44:	06c0      	lsls	r0, r0, #27
10063c46:	d420      	bmi.n	10063c8a <aci_gatt_srv_write_event_push_noinline+0x4a>
10063c48:	461f      	mov	r7, r3
10063c4a:	4616      	mov	r6, r2
10063c4c:	460d      	mov	r5, r1
10063c4e:	4811      	ldr	r0, [pc, #68]	@ (10063c94 <__arm_cp.25_0>)
10063c50:	6800      	ldr	r0, [r0, #0]
10063c52:	0761      	lsls	r1, r4, #29
10063c54:	0ec9      	lsrs	r1, r1, #27
10063c56:	1840      	adds	r0, r0, r1
10063c58:	6900      	ldr	r0, [r0, #16]
10063c5a:	2211      	movs	r2, #17
10063c5c:	2305      	movs	r3, #5
10063c5e:	4621      	mov	r1, r4
10063c60:	f7f1 fc3e 	bl	100554e0 <aci_event_fifo_push_header>
10063c64:	2800      	cmp	r0, #0
10063c66:	d012      	beq.n	10063c8e <aci_gatt_srv_write_event_push_noinline+0x4e>
10063c68:	4601      	mov	r1, r0
10063c6a:	9808      	ldr	r0, [sp, #32]
10063c6c:	9a07      	ldr	r2, [sp, #28]
10063c6e:	9b06      	ldr	r3, [sp, #24]
10063c70:	6148      	str	r0, [r1, #20]
10063c72:	820a      	strh	r2, [r1, #16]
10063c74:	81cb      	strh	r3, [r1, #14]
10063c76:	730f      	strb	r7, [r1, #12]
10063c78:	814e      	strh	r6, [r1, #10]
10063c7a:	810d      	strh	r5, [r1, #8]
10063c7c:	4806      	ldr	r0, [pc, #24]	@ (10063c98 <__arm_cp.25_1>)
10063c7e:	6048      	str	r0, [r1, #4]
10063c80:	4620      	mov	r0, r4
10063c82:	f7f1 fcca 	bl	1005561a <aci_event_fifo_push>
10063c86:	2000      	movs	r0, #0
10063c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063c8a:	2086      	movs	r0, #134	@ 0x86
10063c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063c8e:	2007      	movs	r0, #7
10063c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063c92:	46c0      	nop			@ (mov r8, r8)

10063c94 <__arm_cp.25_0>:
10063c94:	20002418 	.word	0x20002418

10063c98 <__arm_cp.25_1>:
10063c98:	100633d1 	.word	0x100633d1

10063c9c <aci_gatt_clt_multi_notification_int_event_push_noinline>:
10063c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063c9e:	4605      	mov	r5, r0
10063ca0:	06c0      	lsls	r0, r0, #27
10063ca2:	d421      	bmi.n	10063ce8 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4c>
10063ca4:	460e      	mov	r6, r1
10063ca6:	4813      	ldr	r0, [pc, #76]	@ (10063cf4 <__arm_cp.26_0>)
10063ca8:	6800      	ldr	r0, [r0, #0]
10063caa:	2152      	movs	r1, #82	@ 0x52
10063cac:	5c40      	ldrb	r0, [r0, r1]
10063cae:	2400      	movs	r4, #0
10063cb0:	0700      	lsls	r0, r0, #28
10063cb2:	d51a      	bpl.n	10063cea <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10063cb4:	4617      	mov	r7, r2
10063cb6:	9300      	str	r3, [sp, #0]
10063cb8:	480f      	ldr	r0, [pc, #60]	@ (10063cf8 <__arm_cp.26_1>)
10063cba:	6800      	ldr	r0, [r0, #0]
10063cbc:	0769      	lsls	r1, r5, #29
10063cbe:	0ec9      	lsrs	r1, r1, #27
10063cc0:	1840      	adds	r0, r0, r1
10063cc2:	6900      	ldr	r0, [r0, #16]
10063cc4:	2214      	movs	r2, #20
10063cc6:	2303      	movs	r3, #3
10063cc8:	4629      	mov	r1, r5
10063cca:	f7f1 fc09 	bl	100554e0 <aci_event_fifo_push_header>
10063cce:	2800      	cmp	r0, #0
10063cd0:	d00d      	beq.n	10063cee <aci_gatt_clt_multi_notification_int_event_push_noinline+0x52>
10063cd2:	4601      	mov	r1, r0
10063cd4:	9800      	ldr	r0, [sp, #0]
10063cd6:	60c8      	str	r0, [r1, #12]
10063cd8:	814f      	strh	r7, [r1, #10]
10063cda:	810e      	strh	r6, [r1, #8]
10063cdc:	4807      	ldr	r0, [pc, #28]	@ (10063cfc <__arm_cp.26_2>)
10063cde:	6048      	str	r0, [r1, #4]
10063ce0:	4628      	mov	r0, r5
10063ce2:	f7f1 fc9a 	bl	1005561a <aci_event_fifo_push>
10063ce6:	e000      	b.n	10063cea <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10063ce8:	2486      	movs	r4, #134	@ 0x86
10063cea:	4620      	mov	r0, r4
10063cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063cee:	2407      	movs	r4, #7
10063cf0:	e7fb      	b.n	10063cea <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10063cf2:	46c0      	nop			@ (mov r8, r8)

10063cf4 <__arm_cp.26_0>:
10063cf4:	20002468 	.word	0x20002468

10063cf8 <__arm_cp.26_1>:
10063cf8:	20002418 	.word	0x20002418

10063cfc <__arm_cp.26_2>:
10063cfc:	10063431 	.word	0x10063431

10063d00 <aci_att_exchange_mtu_resp_event_push_noinline>:
10063d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063d02:	4604      	mov	r4, r0
10063d04:	06c0      	lsls	r0, r0, #27
10063d06:	d408      	bmi.n	10063d1a <aci_att_exchange_mtu_resp_event_push_noinline+0x1a>
10063d08:	460d      	mov	r5, r1
10063d0a:	4819      	ldr	r0, [pc, #100]	@ (10063d70 <__arm_cp.27_0>)
10063d0c:	6800      	ldr	r0, [r0, #0]
10063d0e:	2150      	movs	r1, #80	@ 0x50
10063d10:	5c40      	ldrb	r0, [r0, r1]
10063d12:	0740      	lsls	r0, r0, #29
10063d14:	d403      	bmi.n	10063d1e <aci_att_exchange_mtu_resp_event_push_noinline+0x1e>
10063d16:	2700      	movs	r7, #0
10063d18:	e027      	b.n	10063d6a <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063d1a:	2786      	movs	r7, #134	@ 0x86
10063d1c:	e025      	b.n	10063d6a <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063d1e:	4616      	mov	r6, r2
10063d20:	4814      	ldr	r0, [pc, #80]	@ (10063d74 <__arm_cp.27_1>)
10063d22:	6800      	ldr	r0, [r0, #0]
10063d24:	0761      	lsls	r1, r4, #29
10063d26:	0ec9      	lsrs	r1, r1, #27
10063d28:	1840      	adds	r0, r0, r1
10063d2a:	6900      	ldr	r0, [r0, #16]
10063d2c:	2258      	movs	r2, #88	@ 0x58
10063d2e:	2703      	movs	r7, #3
10063d30:	4621      	mov	r1, r4
10063d32:	463b      	mov	r3, r7
10063d34:	f7f1 fbd4 	bl	100554e0 <aci_event_fifo_push_header>
10063d38:	2800      	cmp	r0, #0
10063d3a:	d015      	beq.n	10063d68 <aci_att_exchange_mtu_resp_event_push_noinline+0x68>
10063d3c:	4601      	mov	r1, r0
10063d3e:	7306      	strb	r6, [r0, #12]
10063d40:	7285      	strb	r5, [r0, #10]
10063d42:	200c      	movs	r0, #12
10063d44:	7248      	strb	r0, [r1, #9]
10063d46:	720f      	strb	r7, [r1, #8]
10063d48:	2700      	movs	r7, #0
10063d4a:	71cf      	strb	r7, [r1, #7]
10063d4c:	2006      	movs	r0, #6
10063d4e:	7188      	strb	r0, [r1, #6]
10063d50:	20ff      	movs	r0, #255	@ 0xff
10063d52:	7148      	strb	r0, [r1, #5]
10063d54:	2082      	movs	r0, #130	@ 0x82
10063d56:	7108      	strb	r0, [r1, #4]
10063d58:	0a30      	lsrs	r0, r6, #8
10063d5a:	7348      	strb	r0, [r1, #13]
10063d5c:	0a28      	lsrs	r0, r5, #8
10063d5e:	72c8      	strb	r0, [r1, #11]
10063d60:	4620      	mov	r0, r4
10063d62:	f7f1 fc5a 	bl	1005561a <aci_event_fifo_push>
10063d66:	e000      	b.n	10063d6a <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063d68:	2707      	movs	r7, #7
10063d6a:	4638      	mov	r0, r7
10063d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063d6e:	46c0      	nop			@ (mov r8, r8)

10063d70 <__arm_cp.27_0>:
10063d70:	20002468 	.word	0x20002468

10063d74 <__arm_cp.27_1>:
10063d74:	20002418 	.word	0x20002418

10063d78 <aci_att_clt_find_info_resp_event_push_noinline>:
10063d78:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063d7a:	4604      	mov	r4, r0
10063d7c:	06c0      	lsls	r0, r0, #27
10063d7e:	d424      	bmi.n	10063dca <aci_att_clt_find_info_resp_event_push_noinline+0x52>
10063d80:	4616      	mov	r6, r2
10063d82:	4813      	ldr	r0, [pc, #76]	@ (10063dd0 <__arm_cp.28_0>)
10063d84:	6800      	ldr	r0, [r0, #0]
10063d86:	2250      	movs	r2, #80	@ 0x50
10063d88:	5c80      	ldrb	r0, [r0, r2]
10063d8a:	2500      	movs	r5, #0
10063d8c:	0700      	lsls	r0, r0, #28
10063d8e:	d51d      	bpl.n	10063dcc <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063d90:	461f      	mov	r7, r3
10063d92:	9101      	str	r1, [sp, #4]
10063d94:	9502      	str	r5, [sp, #8]
10063d96:	480f      	ldr	r0, [pc, #60]	@ (10063dd4 <__arm_cp.28_1>)
10063d98:	6800      	ldr	r0, [r0, #0]
10063d9a:	0761      	lsls	r1, r4, #29
10063d9c:	0ec9      	lsrs	r1, r1, #27
10063d9e:	1840      	adds	r0, r0, r1
10063da0:	6900      	ldr	r0, [r0, #16]
10063da2:	2507      	movs	r5, #7
10063da4:	2303      	movs	r3, #3
10063da6:	4621      	mov	r1, r4
10063da8:	462a      	mov	r2, r5
10063daa:	f7f1 fb99 	bl	100554e0 <aci_event_fifo_push_header>
10063dae:	2800      	cmp	r0, #0
10063db0:	d00c      	beq.n	10063dcc <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063db2:	4601      	mov	r1, r0
10063db4:	60c7      	str	r7, [r0, #12]
10063db6:	8146      	strh	r6, [r0, #10]
10063db8:	9801      	ldr	r0, [sp, #4]
10063dba:	8108      	strh	r0, [r1, #8]
10063dbc:	4806      	ldr	r0, [pc, #24]	@ (10063dd8 <__arm_cp.28_2>)
10063dbe:	6048      	str	r0, [r1, #4]
10063dc0:	4620      	mov	r0, r4
10063dc2:	f7f1 fc2a 	bl	1005561a <aci_event_fifo_push>
10063dc6:	9d02      	ldr	r5, [sp, #8]
10063dc8:	e000      	b.n	10063dcc <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063dca:	2586      	movs	r5, #134	@ 0x86
10063dcc:	4628      	mov	r0, r5
10063dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10063dd0 <__arm_cp.28_0>:
10063dd0:	20002468 	.word	0x20002468

10063dd4 <__arm_cp.28_1>:
10063dd4:	20002418 	.word	0x20002418

10063dd8 <__arm_cp.28_2>:
10063dd8:	100634b1 	.word	0x100634b1

10063ddc <aci_att_clt_find_by_type_value_resp_event_push_noinline>:
10063ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063dde:	4605      	mov	r5, r0
10063de0:	06c0      	lsls	r0, r0, #27
10063de2:	d421      	bmi.n	10063e28 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4c>
10063de4:	460e      	mov	r6, r1
10063de6:	4813      	ldr	r0, [pc, #76]	@ (10063e34 <__arm_cp.29_0>)
10063de8:	6800      	ldr	r0, [r0, #0]
10063dea:	2150      	movs	r1, #80	@ 0x50
10063dec:	5c40      	ldrb	r0, [r0, r1]
10063dee:	2400      	movs	r4, #0
10063df0:	06c0      	lsls	r0, r0, #27
10063df2:	d51a      	bpl.n	10063e2a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063df4:	4617      	mov	r7, r2
10063df6:	9300      	str	r3, [sp, #0]
10063df8:	480f      	ldr	r0, [pc, #60]	@ (10063e38 <__arm_cp.29_1>)
10063dfa:	6800      	ldr	r0, [r0, #0]
10063dfc:	0769      	lsls	r1, r5, #29
10063dfe:	0ec9      	lsrs	r1, r1, #27
10063e00:	1840      	adds	r0, r0, r1
10063e02:	6900      	ldr	r0, [r0, #16]
10063e04:	2208      	movs	r2, #8
10063e06:	2303      	movs	r3, #3
10063e08:	4629      	mov	r1, r5
10063e0a:	f7f1 fb69 	bl	100554e0 <aci_event_fifo_push_header>
10063e0e:	2800      	cmp	r0, #0
10063e10:	d00d      	beq.n	10063e2e <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x52>
10063e12:	4601      	mov	r1, r0
10063e14:	9800      	ldr	r0, [sp, #0]
10063e16:	60c8      	str	r0, [r1, #12]
10063e18:	814f      	strh	r7, [r1, #10]
10063e1a:	810e      	strh	r6, [r1, #8]
10063e1c:	4807      	ldr	r0, [pc, #28]	@ (10063e3c <__arm_cp.29_2>)
10063e1e:	6048      	str	r0, [r1, #4]
10063e20:	4628      	mov	r0, r5
10063e22:	f7f1 fbfa 	bl	1005561a <aci_event_fifo_push>
10063e26:	e000      	b.n	10063e2a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063e28:	2486      	movs	r4, #134	@ 0x86
10063e2a:	4620      	mov	r0, r4
10063e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063e2e:	2407      	movs	r4, #7
10063e30:	e7fb      	b.n	10063e2a <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063e32:	46c0      	nop			@ (mov r8, r8)

10063e34 <__arm_cp.29_0>:
10063e34:	20002468 	.word	0x20002468

10063e38 <__arm_cp.29_1>:
10063e38:	20002418 	.word	0x20002418

10063e3c <__arm_cp.29_2>:
10063e3c:	10063505 	.word	0x10063505

10063e40 <aci_att_clt_read_by_type_resp_event_push_noinline>:
10063e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063e42:	4605      	mov	r5, r0
10063e44:	06c0      	lsls	r0, r0, #27
10063e46:	d421      	bmi.n	10063e8c <aci_att_clt_read_by_type_resp_event_push_noinline+0x4c>
10063e48:	460e      	mov	r6, r1
10063e4a:	4813      	ldr	r0, [pc, #76]	@ (10063e98 <__arm_cp.30_0>)
10063e4c:	6800      	ldr	r0, [r0, #0]
10063e4e:	2150      	movs	r1, #80	@ 0x50
10063e50:	5c40      	ldrb	r0, [r0, r1]
10063e52:	2400      	movs	r4, #0
10063e54:	0680      	lsls	r0, r0, #26
10063e56:	d51a      	bpl.n	10063e8e <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063e58:	4617      	mov	r7, r2
10063e5a:	9300      	str	r3, [sp, #0]
10063e5c:	480f      	ldr	r0, [pc, #60]	@ (10063e9c <__arm_cp.30_1>)
10063e5e:	6800      	ldr	r0, [r0, #0]
10063e60:	0769      	lsls	r1, r5, #29
10063e62:	0ec9      	lsrs	r1, r1, #27
10063e64:	1840      	adds	r0, r0, r1
10063e66:	6900      	ldr	r0, [r0, #16]
10063e68:	2209      	movs	r2, #9
10063e6a:	2303      	movs	r3, #3
10063e6c:	4629      	mov	r1, r5
10063e6e:	f7f1 fb37 	bl	100554e0 <aci_event_fifo_push_header>
10063e72:	2800      	cmp	r0, #0
10063e74:	d00d      	beq.n	10063e92 <aci_att_clt_read_by_type_resp_event_push_noinline+0x52>
10063e76:	4601      	mov	r1, r0
10063e78:	9800      	ldr	r0, [sp, #0]
10063e7a:	60c8      	str	r0, [r1, #12]
10063e7c:	814f      	strh	r7, [r1, #10]
10063e7e:	810e      	strh	r6, [r1, #8]
10063e80:	4807      	ldr	r0, [pc, #28]	@ (10063ea0 <__arm_cp.30_2>)
10063e82:	6048      	str	r0, [r1, #4]
10063e84:	4628      	mov	r0, r5
10063e86:	f7f1 fbc8 	bl	1005561a <aci_event_fifo_push>
10063e8a:	e000      	b.n	10063e8e <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063e8c:	2486      	movs	r4, #134	@ 0x86
10063e8e:	4620      	mov	r0, r4
10063e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063e92:	2407      	movs	r4, #7
10063e94:	e7fb      	b.n	10063e8e <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063e96:	46c0      	nop			@ (mov r8, r8)

10063e98 <__arm_cp.30_0>:
10063e98:	20002468 	.word	0x20002468

10063e9c <__arm_cp.30_1>:
10063e9c:	20002418 	.word	0x20002418

10063ea0 <__arm_cp.30_2>:
10063ea0:	10063551 	.word	0x10063551

10063ea4 <aci_att_clt_read_resp_event_push_noinline>:
10063ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063ea6:	4605      	mov	r5, r0
10063ea8:	06c0      	lsls	r0, r0, #27
10063eaa:	d421      	bmi.n	10063ef0 <aci_att_clt_read_resp_event_push_noinline+0x4c>
10063eac:	460e      	mov	r6, r1
10063eae:	4813      	ldr	r0, [pc, #76]	@ (10063efc <__arm_cp.31_0>)
10063eb0:	6800      	ldr	r0, [r0, #0]
10063eb2:	2150      	movs	r1, #80	@ 0x50
10063eb4:	5c40      	ldrb	r0, [r0, r1]
10063eb6:	2400      	movs	r4, #0
10063eb8:	0640      	lsls	r0, r0, #25
10063eba:	d51a      	bpl.n	10063ef2 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063ebc:	4617      	mov	r7, r2
10063ebe:	9300      	str	r3, [sp, #0]
10063ec0:	480f      	ldr	r0, [pc, #60]	@ (10063f00 <__arm_cp.31_1>)
10063ec2:	6800      	ldr	r0, [r0, #0]
10063ec4:	0769      	lsls	r1, r5, #29
10063ec6:	0ec9      	lsrs	r1, r1, #27
10063ec8:	1840      	adds	r0, r0, r1
10063eca:	6900      	ldr	r0, [r0, #16]
10063ecc:	220a      	movs	r2, #10
10063ece:	2303      	movs	r3, #3
10063ed0:	4629      	mov	r1, r5
10063ed2:	f7f1 fb05 	bl	100554e0 <aci_event_fifo_push_header>
10063ed6:	2800      	cmp	r0, #0
10063ed8:	d00d      	beq.n	10063ef6 <aci_att_clt_read_resp_event_push_noinline+0x52>
10063eda:	4601      	mov	r1, r0
10063edc:	9800      	ldr	r0, [sp, #0]
10063ede:	60c8      	str	r0, [r1, #12]
10063ee0:	814f      	strh	r7, [r1, #10]
10063ee2:	810e      	strh	r6, [r1, #8]
10063ee4:	4807      	ldr	r0, [pc, #28]	@ (10063f04 <__arm_cp.31_2>)
10063ee6:	6048      	str	r0, [r1, #4]
10063ee8:	4628      	mov	r0, r5
10063eea:	f7f1 fb96 	bl	1005561a <aci_event_fifo_push>
10063eee:	e000      	b.n	10063ef2 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063ef0:	2486      	movs	r4, #134	@ 0x86
10063ef2:	4620      	mov	r0, r4
10063ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063ef6:	2407      	movs	r4, #7
10063ef8:	e7fb      	b.n	10063ef2 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063efa:	46c0      	nop			@ (mov r8, r8)

10063efc <__arm_cp.31_0>:
10063efc:	20002468 	.word	0x20002468

10063f00 <__arm_cp.31_1>:
10063f00:	20002418 	.word	0x20002418

10063f04 <__arm_cp.31_2>:
10063f04:	100635a5 	.word	0x100635a5

10063f08 <aci_att_clt_read_blob_resp_event_push_noinline>:
10063f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063f0a:	4605      	mov	r5, r0
10063f0c:	06c0      	lsls	r0, r0, #27
10063f0e:	d421      	bmi.n	10063f54 <aci_att_clt_read_blob_resp_event_push_noinline+0x4c>
10063f10:	460e      	mov	r6, r1
10063f12:	4813      	ldr	r0, [pc, #76]	@ (10063f60 <__arm_cp.32_0>)
10063f14:	6800      	ldr	r0, [r0, #0]
10063f16:	2150      	movs	r1, #80	@ 0x50
10063f18:	5640      	ldrsb	r0, [r0, r1]
10063f1a:	2400      	movs	r4, #0
10063f1c:	2800      	cmp	r0, #0
10063f1e:	d51a      	bpl.n	10063f56 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063f20:	4617      	mov	r7, r2
10063f22:	9300      	str	r3, [sp, #0]
10063f24:	480f      	ldr	r0, [pc, #60]	@ (10063f64 <__arm_cp.32_1>)
10063f26:	6800      	ldr	r0, [r0, #0]
10063f28:	0769      	lsls	r1, r5, #29
10063f2a:	0ec9      	lsrs	r1, r1, #27
10063f2c:	1840      	adds	r0, r0, r1
10063f2e:	6900      	ldr	r0, [r0, #16]
10063f30:	220b      	movs	r2, #11
10063f32:	2303      	movs	r3, #3
10063f34:	4629      	mov	r1, r5
10063f36:	f7f1 fad3 	bl	100554e0 <aci_event_fifo_push_header>
10063f3a:	2800      	cmp	r0, #0
10063f3c:	d00d      	beq.n	10063f5a <aci_att_clt_read_blob_resp_event_push_noinline+0x52>
10063f3e:	4601      	mov	r1, r0
10063f40:	9800      	ldr	r0, [sp, #0]
10063f42:	60c8      	str	r0, [r1, #12]
10063f44:	814f      	strh	r7, [r1, #10]
10063f46:	810e      	strh	r6, [r1, #8]
10063f48:	4807      	ldr	r0, [pc, #28]	@ (10063f68 <__arm_cp.32_2>)
10063f4a:	6048      	str	r0, [r1, #4]
10063f4c:	4628      	mov	r0, r5
10063f4e:	f7f1 fb64 	bl	1005561a <aci_event_fifo_push>
10063f52:	e000      	b.n	10063f56 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063f54:	2486      	movs	r4, #134	@ 0x86
10063f56:	4620      	mov	r0, r4
10063f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063f5a:	2407      	movs	r4, #7
10063f5c:	e7fb      	b.n	10063f56 <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063f5e:	46c0      	nop			@ (mov r8, r8)

10063f60 <__arm_cp.32_0>:
10063f60:	20002468 	.word	0x20002468

10063f64 <__arm_cp.32_1>:
10063f64:	20002418 	.word	0x20002418

10063f68 <__arm_cp.32_2>:
10063f68:	100635f5 	.word	0x100635f5

10063f6c <aci_att_clt_read_multiple_resp_event_push_noinline>:
10063f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063f6e:	4605      	mov	r5, r0
10063f70:	06c0      	lsls	r0, r0, #27
10063f72:	d421      	bmi.n	10063fb8 <aci_att_clt_read_multiple_resp_event_push_noinline+0x4c>
10063f74:	460e      	mov	r6, r1
10063f76:	4813      	ldr	r0, [pc, #76]	@ (10063fc4 <__arm_cp.33_0>)
10063f78:	6800      	ldr	r0, [r0, #0]
10063f7a:	2151      	movs	r1, #81	@ 0x51
10063f7c:	5c40      	ldrb	r0, [r0, r1]
10063f7e:	2400      	movs	r4, #0
10063f80:	07c0      	lsls	r0, r0, #31
10063f82:	d01a      	beq.n	10063fba <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063f84:	4617      	mov	r7, r2
10063f86:	9300      	str	r3, [sp, #0]
10063f88:	480f      	ldr	r0, [pc, #60]	@ (10063fc8 <__arm_cp.33_1>)
10063f8a:	6800      	ldr	r0, [r0, #0]
10063f8c:	0769      	lsls	r1, r5, #29
10063f8e:	0ec9      	lsrs	r1, r1, #27
10063f90:	1840      	adds	r0, r0, r1
10063f92:	6900      	ldr	r0, [r0, #16]
10063f94:	220c      	movs	r2, #12
10063f96:	2303      	movs	r3, #3
10063f98:	4629      	mov	r1, r5
10063f9a:	f7f1 faa1 	bl	100554e0 <aci_event_fifo_push_header>
10063f9e:	2800      	cmp	r0, #0
10063fa0:	d00d      	beq.n	10063fbe <aci_att_clt_read_multiple_resp_event_push_noinline+0x52>
10063fa2:	4601      	mov	r1, r0
10063fa4:	9800      	ldr	r0, [sp, #0]
10063fa6:	60c8      	str	r0, [r1, #12]
10063fa8:	814f      	strh	r7, [r1, #10]
10063faa:	810e      	strh	r6, [r1, #8]
10063fac:	4807      	ldr	r0, [pc, #28]	@ (10063fcc <__arm_cp.33_2>)
10063fae:	6048      	str	r0, [r1, #4]
10063fb0:	4628      	mov	r0, r5
10063fb2:	f7f1 fb32 	bl	1005561a <aci_event_fifo_push>
10063fb6:	e000      	b.n	10063fba <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063fb8:	2486      	movs	r4, #134	@ 0x86
10063fba:	4620      	mov	r0, r4
10063fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063fbe:	2407      	movs	r4, #7
10063fc0:	e7fb      	b.n	10063fba <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063fc2:	46c0      	nop			@ (mov r8, r8)

10063fc4 <__arm_cp.33_0>:
10063fc4:	20002468 	.word	0x20002468

10063fc8 <__arm_cp.33_1>:
10063fc8:	20002418 	.word	0x20002418

10063fcc <__arm_cp.33_2>:
10063fcc:	10063645 	.word	0x10063645

10063fd0 <aci_att_clt_read_by_group_type_resp_event_push_noinline>:
10063fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063fd2:	4605      	mov	r5, r0
10063fd4:	06c0      	lsls	r0, r0, #27
10063fd6:	d421      	bmi.n	1006401c <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4c>
10063fd8:	460e      	mov	r6, r1
10063fda:	4813      	ldr	r0, [pc, #76]	@ (10064028 <__arm_cp.34_0>)
10063fdc:	6800      	ldr	r0, [r0, #0]
10063fde:	2151      	movs	r1, #81	@ 0x51
10063fe0:	5c40      	ldrb	r0, [r0, r1]
10063fe2:	2400      	movs	r4, #0
10063fe4:	0780      	lsls	r0, r0, #30
10063fe6:	d51a      	bpl.n	1006401e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063fe8:	4617      	mov	r7, r2
10063fea:	9300      	str	r3, [sp, #0]
10063fec:	480f      	ldr	r0, [pc, #60]	@ (1006402c <__arm_cp.34_1>)
10063fee:	6800      	ldr	r0, [r0, #0]
10063ff0:	0769      	lsls	r1, r5, #29
10063ff2:	0ec9      	lsrs	r1, r1, #27
10063ff4:	1840      	adds	r0, r0, r1
10063ff6:	6900      	ldr	r0, [r0, #16]
10063ff8:	220d      	movs	r2, #13
10063ffa:	2303      	movs	r3, #3
10063ffc:	4629      	mov	r1, r5
10063ffe:	f7f1 fa6f 	bl	100554e0 <aci_event_fifo_push_header>
10064002:	2800      	cmp	r0, #0
10064004:	d00d      	beq.n	10064022 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x52>
10064006:	4601      	mov	r1, r0
10064008:	9800      	ldr	r0, [sp, #0]
1006400a:	60c8      	str	r0, [r1, #12]
1006400c:	814f      	strh	r7, [r1, #10]
1006400e:	810e      	strh	r6, [r1, #8]
10064010:	4807      	ldr	r0, [pc, #28]	@ (10064030 <__arm_cp.34_2>)
10064012:	6048      	str	r0, [r1, #4]
10064014:	4628      	mov	r0, r5
10064016:	f7f1 fb00 	bl	1005561a <aci_event_fifo_push>
1006401a:	e000      	b.n	1006401e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
1006401c:	2486      	movs	r4, #134	@ 0x86
1006401e:	4620      	mov	r0, r4
10064020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064022:	2407      	movs	r4, #7
10064024:	e7fb      	b.n	1006401e <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10064026:	46c0      	nop			@ (mov r8, r8)

10064028 <__arm_cp.34_0>:
10064028:	20002468 	.word	0x20002468

1006402c <__arm_cp.34_1>:
1006402c:	20002418 	.word	0x20002418

10064030 <__arm_cp.34_2>:
10064030:	10063695 	.word	0x10063695

10064034 <aci_att_clt_prepare_write_resp_event_push_noinline>:
10064034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064036:	4605      	mov	r5, r0
10064038:	06c0      	lsls	r0, r0, #27
1006403a:	d421      	bmi.n	10064080 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4c>
1006403c:	460e      	mov	r6, r1
1006403e:	4813      	ldr	r0, [pc, #76]	@ (1006408c <__arm_cp.35_0>)
10064040:	6800      	ldr	r0, [r0, #0]
10064042:	2151      	movs	r1, #81	@ 0x51
10064044:	5c40      	ldrb	r0, [r0, r1]
10064046:	2400      	movs	r4, #0
10064048:	0700      	lsls	r0, r0, #28
1006404a:	d51a      	bpl.n	10064082 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
1006404c:	4617      	mov	r7, r2
1006404e:	9300      	str	r3, [sp, #0]
10064050:	480f      	ldr	r0, [pc, #60]	@ (10064090 <__arm_cp.35_1>)
10064052:	6800      	ldr	r0, [r0, #0]
10064054:	0769      	lsls	r1, r5, #29
10064056:	0ec9      	lsrs	r1, r1, #27
10064058:	1840      	adds	r0, r0, r1
1006405a:	6900      	ldr	r0, [r0, #16]
1006405c:	220e      	movs	r2, #14
1006405e:	2303      	movs	r3, #3
10064060:	4629      	mov	r1, r5
10064062:	f7f1 fa3d 	bl	100554e0 <aci_event_fifo_push_header>
10064066:	2800      	cmp	r0, #0
10064068:	d00d      	beq.n	10064086 <aci_att_clt_prepare_write_resp_event_push_noinline+0x52>
1006406a:	4601      	mov	r1, r0
1006406c:	9800      	ldr	r0, [sp, #0]
1006406e:	60c8      	str	r0, [r1, #12]
10064070:	814f      	strh	r7, [r1, #10]
10064072:	810e      	strh	r6, [r1, #8]
10064074:	4807      	ldr	r0, [pc, #28]	@ (10064094 <__arm_cp.35_2>)
10064076:	6048      	str	r0, [r1, #4]
10064078:	4628      	mov	r0, r5
1006407a:	f7f1 face 	bl	1005561a <aci_event_fifo_push>
1006407e:	e000      	b.n	10064082 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10064080:	2486      	movs	r4, #134	@ 0x86
10064082:	4620      	mov	r0, r4
10064084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064086:	2407      	movs	r4, #7
10064088:	e7fb      	b.n	10064082 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
1006408a:	46c0      	nop			@ (mov r8, r8)

1006408c <__arm_cp.35_0>:
1006408c:	20002468 	.word	0x20002468

10064090 <__arm_cp.35_1>:
10064090:	20002418 	.word	0x20002418

10064094 <__arm_cp.35_2>:
10064094:	100636e9 	.word	0x100636e9

10064098 <aci_att_clt_exec_write_resp_event_push_noinline>:
10064098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006409a:	4604      	mov	r4, r0
1006409c:	06c0      	lsls	r0, r0, #27
1006409e:	d408      	bmi.n	100640b2 <aci_att_clt_exec_write_resp_event_push_noinline+0x1a>
100640a0:	460d      	mov	r5, r1
100640a2:	4819      	ldr	r0, [pc, #100]	@ (10064108 <__arm_cp.36_0>)
100640a4:	6800      	ldr	r0, [r0, #0]
100640a6:	2151      	movs	r1, #81	@ 0x51
100640a8:	5c40      	ldrb	r0, [r0, r1]
100640aa:	06c0      	lsls	r0, r0, #27
100640ac:	d403      	bmi.n	100640b6 <aci_att_clt_exec_write_resp_event_push_noinline+0x1e>
100640ae:	2700      	movs	r7, #0
100640b0:	e027      	b.n	10064102 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
100640b2:	2786      	movs	r7, #134	@ 0x86
100640b4:	e025      	b.n	10064102 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
100640b6:	4616      	mov	r6, r2
100640b8:	4814      	ldr	r0, [pc, #80]	@ (1006410c <__arm_cp.36_1>)
100640ba:	6800      	ldr	r0, [r0, #0]
100640bc:	0761      	lsls	r1, r4, #29
100640be:	0ec9      	lsrs	r1, r1, #27
100640c0:	1840      	adds	r0, r0, r1
100640c2:	6900      	ldr	r0, [r0, #16]
100640c4:	2259      	movs	r2, #89	@ 0x59
100640c6:	2303      	movs	r3, #3
100640c8:	4621      	mov	r1, r4
100640ca:	f7f1 fa09 	bl	100554e0 <aci_event_fifo_push_header>
100640ce:	2800      	cmp	r0, #0
100640d0:	d016      	beq.n	10064100 <aci_att_clt_exec_write_resp_event_push_noinline+0x68>
100640d2:	4601      	mov	r1, r0
100640d4:	7306      	strb	r6, [r0, #12]
100640d6:	7285      	strb	r5, [r0, #10]
100640d8:	200c      	movs	r0, #12
100640da:	7248      	strb	r0, [r1, #9]
100640dc:	200d      	movs	r0, #13
100640de:	7208      	strb	r0, [r1, #8]
100640e0:	2700      	movs	r7, #0
100640e2:	71cf      	strb	r7, [r1, #7]
100640e4:	2006      	movs	r0, #6
100640e6:	7188      	strb	r0, [r1, #6]
100640e8:	20ff      	movs	r0, #255	@ 0xff
100640ea:	7148      	strb	r0, [r1, #5]
100640ec:	2082      	movs	r0, #130	@ 0x82
100640ee:	7108      	strb	r0, [r1, #4]
100640f0:	0a30      	lsrs	r0, r6, #8
100640f2:	7348      	strb	r0, [r1, #13]
100640f4:	0a28      	lsrs	r0, r5, #8
100640f6:	72c8      	strb	r0, [r1, #11]
100640f8:	4620      	mov	r0, r4
100640fa:	f7f1 fa8e 	bl	1005561a <aci_event_fifo_push>
100640fe:	e000      	b.n	10064102 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10064100:	2707      	movs	r7, #7
10064102:	4638      	mov	r0, r7
10064104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064106:	46c0      	nop			@ (mov r8, r8)

10064108 <__arm_cp.36_0>:
10064108:	20002468 	.word	0x20002468

1006410c <__arm_cp.36_1>:
1006410c:	20002418 	.word	0x20002418

10064110 <aci_att_srv_prepare_write_req_event_push_noinline>:
10064110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064112:	4604      	mov	r4, r0
10064114:	06c0      	lsls	r0, r0, #27
10064116:	d420      	bmi.n	1006415a <aci_att_srv_prepare_write_req_event_push_noinline+0x4a>
10064118:	461f      	mov	r7, r3
1006411a:	4616      	mov	r6, r2
1006411c:	460d      	mov	r5, r1
1006411e:	4811      	ldr	r0, [pc, #68]	@ (10064164 <__arm_cp.37_0>)
10064120:	6800      	ldr	r0, [r0, #0]
10064122:	0761      	lsls	r1, r4, #29
10064124:	0ec9      	lsrs	r1, r1, #27
10064126:	1840      	adds	r0, r0, r1
10064128:	6900      	ldr	r0, [r0, #16]
1006412a:	2212      	movs	r2, #18
1006412c:	2305      	movs	r3, #5
1006412e:	4621      	mov	r1, r4
10064130:	f7f1 f9d6 	bl	100554e0 <aci_event_fifo_push_header>
10064134:	2800      	cmp	r0, #0
10064136:	d012      	beq.n	1006415e <aci_att_srv_prepare_write_req_event_push_noinline+0x4e>
10064138:	4601      	mov	r1, r0
1006413a:	9808      	ldr	r0, [sp, #32]
1006413c:	9a07      	ldr	r2, [sp, #28]
1006413e:	9b06      	ldr	r3, [sp, #24]
10064140:	6148      	str	r0, [r1, #20]
10064142:	820a      	strh	r2, [r1, #16]
10064144:	81cb      	strh	r3, [r1, #14]
10064146:	818f      	strh	r7, [r1, #12]
10064148:	814e      	strh	r6, [r1, #10]
1006414a:	810d      	strh	r5, [r1, #8]
1006414c:	4806      	ldr	r0, [pc, #24]	@ (10064168 <__arm_cp.37_1>)
1006414e:	6048      	str	r0, [r1, #4]
10064150:	4620      	mov	r0, r4
10064152:	f7f1 fa62 	bl	1005561a <aci_event_fifo_push>
10064156:	2000      	movs	r0, #0
10064158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006415a:	2086      	movs	r0, #134	@ 0x86
1006415c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006415e:	2007      	movs	r0, #7
10064160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064162:	46c0      	nop			@ (mov r8, r8)

10064164 <__arm_cp.37_0>:
10064164:	20002418 	.word	0x20002418

10064168 <__arm_cp.37_1>:
10064168:	10063735 	.word	0x10063735

1006416c <aci_att_srv_exec_write_req_event_push_noinline>:
1006416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006416e:	4604      	mov	r4, r0
10064170:	06c0      	lsls	r0, r0, #27
10064172:	d428      	bmi.n	100641c6 <aci_att_srv_exec_write_req_event_push_noinline+0x5a>
10064174:	461f      	mov	r7, r3
10064176:	4616      	mov	r6, r2
10064178:	460d      	mov	r5, r1
1006417a:	4815      	ldr	r0, [pc, #84]	@ (100641d0 <__arm_cp.38_0>)
1006417c:	6800      	ldr	r0, [r0, #0]
1006417e:	0761      	lsls	r1, r4, #29
10064180:	0ec9      	lsrs	r1, r1, #27
10064182:	1840      	adds	r0, r0, r1
10064184:	6900      	ldr	r0, [r0, #16]
10064186:	2260      	movs	r2, #96	@ 0x60
10064188:	2303      	movs	r3, #3
1006418a:	4621      	mov	r1, r4
1006418c:	f7f1 f9a8 	bl	100554e0 <aci_event_fifo_push_header>
10064190:	2800      	cmp	r0, #0
10064192:	d01a      	beq.n	100641ca <aci_att_srv_exec_write_req_event_push_noinline+0x5e>
10064194:	4601      	mov	r1, r0
10064196:	7306      	strb	r6, [r0, #12]
10064198:	7285      	strb	r5, [r0, #10]
1006419a:	200c      	movs	r0, #12
1006419c:	7248      	strb	r0, [r1, #9]
1006419e:	201c      	movs	r0, #28
100641a0:	7208      	strb	r0, [r1, #8]
100641a2:	463a      	mov	r2, r7
100641a4:	2700      	movs	r7, #0
100641a6:	71cf      	strb	r7, [r1, #7]
100641a8:	2007      	movs	r0, #7
100641aa:	7188      	strb	r0, [r1, #6]
100641ac:	738a      	strb	r2, [r1, #14]
100641ae:	20ff      	movs	r0, #255	@ 0xff
100641b0:	7148      	strb	r0, [r1, #5]
100641b2:	2082      	movs	r0, #130	@ 0x82
100641b4:	7108      	strb	r0, [r1, #4]
100641b6:	0a30      	lsrs	r0, r6, #8
100641b8:	7348      	strb	r0, [r1, #13]
100641ba:	0a28      	lsrs	r0, r5, #8
100641bc:	72c8      	strb	r0, [r1, #11]
100641be:	4620      	mov	r0, r4
100641c0:	f7f1 fa2b 	bl	1005561a <aci_event_fifo_push>
100641c4:	e002      	b.n	100641cc <aci_att_srv_exec_write_req_event_push_noinline+0x60>
100641c6:	2786      	movs	r7, #134	@ 0x86
100641c8:	e000      	b.n	100641cc <aci_att_srv_exec_write_req_event_push_noinline+0x60>
100641ca:	2707      	movs	r7, #7
100641cc:	4638      	mov	r0, r7
100641ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100641d0 <__arm_cp.38_0>:
100641d0:	20002418 	.word	0x20002418

100641d4 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>:
100641d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100641d6:	4605      	mov	r5, r0
100641d8:	06c0      	lsls	r0, r0, #27
100641da:	d421      	bmi.n	10064220 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4c>
100641dc:	460e      	mov	r6, r1
100641de:	4813      	ldr	r0, [pc, #76]	@ (1006422c <__arm_cp.39_0>)
100641e0:	6800      	ldr	r0, [r0, #0]
100641e2:	2152      	movs	r1, #82	@ 0x52
100641e4:	5c40      	ldrb	r0, [r0, r1]
100641e6:	2400      	movs	r4, #0
100641e8:	0740      	lsls	r0, r0, #29
100641ea:	d51a      	bpl.n	10064222 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
100641ec:	4617      	mov	r7, r2
100641ee:	9300      	str	r3, [sp, #0]
100641f0:	480f      	ldr	r0, [pc, #60]	@ (10064230 <__arm_cp.39_1>)
100641f2:	6800      	ldr	r0, [r0, #0]
100641f4:	0769      	lsls	r1, r5, #29
100641f6:	0ec9      	lsrs	r1, r1, #27
100641f8:	1840      	adds	r0, r0, r1
100641fa:	6900      	ldr	r0, [r0, #16]
100641fc:	2213      	movs	r2, #19
100641fe:	2303      	movs	r3, #3
10064200:	4629      	mov	r1, r5
10064202:	f7f1 f96d 	bl	100554e0 <aci_event_fifo_push_header>
10064206:	2800      	cmp	r0, #0
10064208:	d00d      	beq.n	10064226 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x52>
1006420a:	4601      	mov	r1, r0
1006420c:	9800      	ldr	r0, [sp, #0]
1006420e:	60c8      	str	r0, [r1, #12]
10064210:	814f      	strh	r7, [r1, #10]
10064212:	810e      	strh	r6, [r1, #8]
10064214:	4807      	ldr	r0, [pc, #28]	@ (10064234 <__arm_cp.39_2>)
10064216:	6048      	str	r0, [r1, #4]
10064218:	4628      	mov	r0, r5
1006421a:	f7f1 f9fe 	bl	1005561a <aci_event_fifo_push>
1006421e:	e000      	b.n	10064222 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10064220:	2486      	movs	r4, #134	@ 0x86
10064222:	4620      	mov	r0, r4
10064224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064226:	2407      	movs	r4, #7
10064228:	e7fb      	b.n	10064222 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
1006422a:	46c0      	nop			@ (mov r8, r8)

1006422c <__arm_cp.39_0>:
1006422c:	20002468 	.word	0x20002468

10064230 <__arm_cp.39_1>:
10064230:	20002418 	.word	0x20002418

10064234 <__arm_cp.39_2>:
10064234:	10063791 	.word	0x10063791

10064238 <hci_number_of_completed_packets_event_cb>:
10064238:	b51c      	push	{r2, r3, r4, lr}
1006423a:	8889      	ldrh	r1, [r1, #4]
1006423c:	466c      	mov	r4, sp
1006423e:	1ce0      	adds	r0, r4, #3
10064240:	f7f1 fc80 	bl	10055b44 <hci_number_of_completed_packets_event_copy>
10064244:	2005      	movs	r0, #5
10064246:	70a0      	strb	r0, [r4, #2]
10064248:	2013      	movs	r0, #19
1006424a:	7060      	strb	r0, [r4, #1]
1006424c:	2004      	movs	r0, #4
1006424e:	7020      	strb	r0, [r4, #0]
10064250:	2108      	movs	r1, #8
10064252:	4620      	mov	r0, r4
10064254:	f7ea fdc6 	bl	1004ede4 <BLE_STACK_Event>
10064258:	bd1c      	pop	{r2, r3, r4, pc}
	...

1006425c <hci_number_of_completed_packets_event_push_noinline>:
1006425c:	b5b0      	push	{r4, r5, r7, lr}
1006425e:	4604      	mov	r4, r0
10064260:	06c0      	lsls	r0, r0, #27
10064262:	d416      	bmi.n	10064292 <hci_number_of_completed_packets_event_push_noinline+0x36>
10064264:	460d      	mov	r5, r1
10064266:	480d      	ldr	r0, [pc, #52]	@ (1006429c <__arm_cp.22_0>)
10064268:	6800      	ldr	r0, [r0, #0]
1006426a:	0761      	lsls	r1, r4, #29
1006426c:	0ec9      	lsrs	r1, r1, #27
1006426e:	1840      	adds	r0, r0, r1
10064270:	6900      	ldr	r0, [r0, #16]
10064272:	2202      	movs	r2, #2
10064274:	4621      	mov	r1, r4
10064276:	4613      	mov	r3, r2
10064278:	f7f1 f932 	bl	100554e0 <aci_event_fifo_push_header>
1006427c:	2800      	cmp	r0, #0
1006427e:	d00a      	beq.n	10064296 <hci_number_of_completed_packets_event_push_noinline+0x3a>
10064280:	4601      	mov	r1, r0
10064282:	4807      	ldr	r0, [pc, #28]	@ (100642a0 <__arm_cp.22_1>)
10064284:	6048      	str	r0, [r1, #4]
10064286:	810d      	strh	r5, [r1, #8]
10064288:	4620      	mov	r0, r4
1006428a:	f7f1 f9c6 	bl	1005561a <aci_event_fifo_push>
1006428e:	2000      	movs	r0, #0
10064290:	bdb0      	pop	{r4, r5, r7, pc}
10064292:	2086      	movs	r0, #134	@ 0x86
10064294:	bdb0      	pop	{r4, r5, r7, pc}
10064296:	2007      	movs	r0, #7
10064298:	bdb0      	pop	{r4, r5, r7, pc}
1006429a:	46c0      	nop			@ (mov r8, r8)

1006429c <__arm_cp.22_0>:
1006429c:	20002418 	.word	0x20002418

100642a0 <__arm_cp.22_1>:
100642a0:	10064239 	.word	0x10064239

100642a4 <hci_le_read_remote_features_complete_event_push_noinline>:
100642a4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100642a6:	4605      	mov	r5, r0
100642a8:	06c0      	lsls	r0, r0, #27
100642aa:	d433      	bmi.n	10064314 <hci_le_read_remote_features_complete_event_push_noinline+0x70>
100642ac:	4617      	mov	r7, r2
100642ae:	481c      	ldr	r0, [pc, #112]	@ (10064320 <__arm_cp.26_0>)
100642b0:	6800      	ldr	r0, [r0, #0]
100642b2:	223d      	movs	r2, #61	@ 0x3d
100642b4:	5c82      	ldrb	r2, [r0, r2]
100642b6:	2400      	movs	r4, #0
100642b8:	0692      	lsls	r2, r2, #26
100642ba:	d52c      	bpl.n	10064316 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
100642bc:	303d      	adds	r0, #61	@ 0x3d
100642be:	7a40      	ldrb	r0, [r0, #9]
100642c0:	0700      	lsls	r0, r0, #28
100642c2:	d528      	bpl.n	10064316 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
100642c4:	9101      	str	r1, [sp, #4]
100642c6:	9302      	str	r3, [sp, #8]
100642c8:	4816      	ldr	r0, [pc, #88]	@ (10064324 <__arm_cp.26_1>)
100642ca:	6800      	ldr	r0, [r0, #0]
100642cc:	0769      	lsls	r1, r5, #29
100642ce:	0ec9      	lsrs	r1, r1, #27
100642d0:	1840      	adds	r0, r0, r1
100642d2:	6900      	ldr	r0, [r0, #16]
100642d4:	2225      	movs	r2, #37	@ 0x25
100642d6:	2304      	movs	r3, #4
100642d8:	4629      	mov	r1, r5
100642da:	9300      	str	r3, [sp, #0]
100642dc:	f7f1 f900 	bl	100554e0 <aci_event_fifo_push_header>
100642e0:	2800      	cmp	r0, #0
100642e2:	d01a      	beq.n	1006431a <hci_le_read_remote_features_complete_event_push_noinline+0x76>
100642e4:	4606      	mov	r6, r0
100642e6:	7247      	strb	r7, [r0, #9]
100642e8:	9801      	ldr	r0, [sp, #4]
100642ea:	7230      	strb	r0, [r6, #8]
100642ec:	0a38      	lsrs	r0, r7, #8
100642ee:	72b0      	strb	r0, [r6, #10]
100642f0:	4630      	mov	r0, r6
100642f2:	300b      	adds	r0, #11
100642f4:	2208      	movs	r2, #8
100642f6:	9902      	ldr	r1, [sp, #8]
100642f8:	f7ee fba6 	bl	10052a48 <BLEPLAT_MemCpy>
100642fc:	9900      	ldr	r1, [sp, #0]
100642fe:	71f1      	strb	r1, [r6, #7]
10064300:	200c      	movs	r0, #12
10064302:	71b0      	strb	r0, [r6, #6]
10064304:	203e      	movs	r0, #62	@ 0x3e
10064306:	7170      	strb	r0, [r6, #5]
10064308:	7131      	strb	r1, [r6, #4]
1006430a:	4628      	mov	r0, r5
1006430c:	4631      	mov	r1, r6
1006430e:	f7f1 f984 	bl	1005561a <aci_event_fifo_push>
10064312:	e000      	b.n	10064316 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10064314:	2486      	movs	r4, #134	@ 0x86
10064316:	4620      	mov	r0, r4
10064318:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006431a:	2407      	movs	r4, #7
1006431c:	e7fb      	b.n	10064316 <hci_le_read_remote_features_complete_event_push_noinline+0x72>
1006431e:	46c0      	nop			@ (mov r8, r8)

10064320 <__arm_cp.26_0>:
10064320:	20002468 	.word	0x20002468

10064324 <__arm_cp.26_1>:
10064324:	20002418 	.word	0x20002418

10064328 <aci_l2cap_proc_timeout_event_cb>:
10064328:	b510      	push	{r4, lr}
1006432a:	b0ff      	sub	sp, #508	@ 0x1fc
1006432c:	b083      	sub	sp, #12
1006432e:	8889      	ldrh	r1, [r1, #4]
10064330:	466c      	mov	r4, sp
10064332:	1da0      	adds	r0, r4, #6
10064334:	f7f1 fe52 	bl	10055fdc <aci_l2cap_proc_timeout_event_copy>
10064338:	7a21      	ldrb	r1, [r4, #8]
1006433a:	1d48      	adds	r0, r1, #5
1006433c:	70a0      	strb	r0, [r4, #2]
1006433e:	0a00      	lsrs	r0, r0, #8
10064340:	70e0      	strb	r0, [r4, #3]
10064342:	2001      	movs	r0, #1
10064344:	7120      	strb	r0, [r4, #4]
10064346:	20ff      	movs	r0, #255	@ 0xff
10064348:	7060      	strb	r0, [r4, #1]
1006434a:	2082      	movs	r0, #130	@ 0x82
1006434c:	7020      	strb	r0, [r4, #0]
1006434e:	2008      	movs	r0, #8
10064350:	7160      	strb	r0, [r4, #5]
10064352:	3109      	adds	r1, #9
10064354:	4620      	mov	r0, r4
10064356:	f7ea fd45 	bl	1004ede4 <BLE_STACK_Event>
1006435a:	b07f      	add	sp, #508	@ 0x1fc
1006435c:	b003      	add	sp, #12
1006435e:	bd10      	pop	{r4, pc}

10064360 <aci_hal_fw_error_event_push_noinline>:
10064360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064362:	4604      	mov	r4, r0
10064364:	06c0      	lsls	r0, r0, #27
10064366:	d42d      	bmi.n	100643c4 <aci_hal_fw_error_event_push_noinline+0x64>
10064368:	4615      	mov	r5, r2
1006436a:	460f      	mov	r7, r1
1006436c:	9300      	str	r3, [sp, #0]
1006436e:	4818      	ldr	r0, [pc, #96]	@ (100643d0 <__arm_cp.0_0>)
10064370:	6800      	ldr	r0, [r0, #0]
10064372:	0761      	lsls	r1, r4, #29
10064374:	0ec9      	lsrs	r1, r1, #27
10064376:	1840      	adds	r0, r0, r1
10064378:	6900      	ldr	r0, [r0, #16]
1006437a:	1e51      	subs	r1, r2, #1
1006437c:	2203      	movs	r2, #3
1006437e:	430a      	orrs	r2, r1
10064380:	3209      	adds	r2, #9
10064382:	0891      	lsrs	r1, r2, #2
10064384:	b28b      	uxth	r3, r1
10064386:	2240      	movs	r2, #64	@ 0x40
10064388:	4621      	mov	r1, r4
1006438a:	f7f1 f8a9 	bl	100554e0 <aci_event_fifo_push_header>
1006438e:	2800      	cmp	r0, #0
10064390:	d01a      	beq.n	100643c8 <aci_hal_fw_error_event_push_noinline+0x68>
10064392:	4606      	mov	r6, r0
10064394:	72c5      	strb	r5, [r0, #11]
10064396:	7287      	strb	r7, [r0, #10]
10064398:	300c      	adds	r0, #12
1006439a:	9900      	ldr	r1, [sp, #0]
1006439c:	462a      	mov	r2, r5
1006439e:	f7ee fb53 	bl	10052a48 <BLEPLAT_MemCpy>
100643a2:	2700      	movs	r7, #0
100643a4:	7277      	strb	r7, [r6, #9]
100643a6:	2006      	movs	r0, #6
100643a8:	7230      	strb	r0, [r6, #8]
100643aa:	1d28      	adds	r0, r5, #4
100643ac:	0a01      	lsrs	r1, r0, #8
100643ae:	71f1      	strb	r1, [r6, #7]
100643b0:	71b0      	strb	r0, [r6, #6]
100643b2:	20ff      	movs	r0, #255	@ 0xff
100643b4:	7170      	strb	r0, [r6, #5]
100643b6:	2082      	movs	r0, #130	@ 0x82
100643b8:	7130      	strb	r0, [r6, #4]
100643ba:	4620      	mov	r0, r4
100643bc:	4631      	mov	r1, r6
100643be:	f7f1 f92c 	bl	1005561a <aci_event_fifo_push>
100643c2:	e002      	b.n	100643ca <aci_hal_fw_error_event_push_noinline+0x6a>
100643c4:	2786      	movs	r7, #134	@ 0x86
100643c6:	e000      	b.n	100643ca <aci_hal_fw_error_event_push_noinline+0x6a>
100643c8:	2707      	movs	r7, #7
100643ca:	4638      	mov	r0, r7
100643cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100643ce:	46c0      	nop			@ (mov r8, r8)

100643d0 <__arm_cp.0_0>:
100643d0:	20002418 	.word	0x20002418

100643d4 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
100643d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100643d6:	4604      	mov	r4, r0
100643d8:	06c0      	lsls	r0, r0, #27
100643da:	d42d      	bmi.n	10064438 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
100643dc:	4616      	mov	r6, r2
100643de:	460d      	mov	r5, r1
100643e0:	4818      	ldr	r0, [pc, #96]	@ (10064444 <__arm_cp.1_0>)
100643e2:	6800      	ldr	r0, [r0, #0]
100643e4:	0761      	lsls	r1, r4, #29
100643e6:	0ec9      	lsrs	r1, r1, #27
100643e8:	1840      	adds	r0, r0, r1
100643ea:	6900      	ldr	r0, [r0, #16]
100643ec:	2241      	movs	r2, #65	@ 0x41
100643ee:	2304      	movs	r3, #4
100643f0:	4621      	mov	r1, r4
100643f2:	f7f1 f875 	bl	100554e0 <aci_event_fifo_push_header>
100643f6:	2800      	cmp	r0, #0
100643f8:	d020      	beq.n	1006443c <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
100643fa:	4601      	mov	r1, r0
100643fc:	300a      	adds	r0, #10
100643fe:	7106      	strb	r6, [r0, #4]
10064400:	7005      	strb	r5, [r0, #0]
10064402:	2700      	movs	r7, #0
10064404:	724f      	strb	r7, [r1, #9]
10064406:	2210      	movs	r2, #16
10064408:	720a      	strb	r2, [r1, #8]
1006440a:	71cf      	strb	r7, [r1, #7]
1006440c:	220a      	movs	r2, #10
1006440e:	718a      	strb	r2, [r1, #6]
10064410:	22ff      	movs	r2, #255	@ 0xff
10064412:	714a      	strb	r2, [r1, #5]
10064414:	2282      	movs	r2, #130	@ 0x82
10064416:	710a      	strb	r2, [r1, #4]
10064418:	0e32      	lsrs	r2, r6, #24
1006441a:	71c2      	strb	r2, [r0, #7]
1006441c:	0c32      	lsrs	r2, r6, #16
1006441e:	7182      	strb	r2, [r0, #6]
10064420:	0a32      	lsrs	r2, r6, #8
10064422:	7142      	strb	r2, [r0, #5]
10064424:	0e2a      	lsrs	r2, r5, #24
10064426:	70c2      	strb	r2, [r0, #3]
10064428:	0c2a      	lsrs	r2, r5, #16
1006442a:	7082      	strb	r2, [r0, #2]
1006442c:	0a2a      	lsrs	r2, r5, #8
1006442e:	7042      	strb	r2, [r0, #1]
10064430:	4620      	mov	r0, r4
10064432:	f7f1 f8f2 	bl	1005561a <aci_event_fifo_push>
10064436:	e002      	b.n	1006443e <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10064438:	2786      	movs	r7, #134	@ 0x86
1006443a:	e000      	b.n	1006443e <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1006443c:	2707      	movs	r7, #7
1006443e:	4638      	mov	r0, r7
10064440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064442:	46c0      	nop			@ (mov r8, r8)

10064444 <__arm_cp.1_0>:
10064444:	20002418 	.word	0x20002418

10064448 <aci_gap_pairing_complete_event_push_noinline>:
10064448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006444a:	4604      	mov	r4, r0
1006444c:	06c0      	lsls	r0, r0, #27
1006444e:	d408      	bmi.n	10064462 <aci_gap_pairing_complete_event_push_noinline+0x1a>
10064450:	460d      	mov	r5, r1
10064452:	4819      	ldr	r0, [pc, #100]	@ (100644b8 <__arm_cp.1_0>)
10064454:	6800      	ldr	r0, [r0, #0]
10064456:	214e      	movs	r1, #78	@ 0x4e
10064458:	5c40      	ldrb	r0, [r0, r1]
1006445a:	0780      	lsls	r0, r0, #30
1006445c:	d403      	bmi.n	10064466 <aci_gap_pairing_complete_event_push_noinline+0x1e>
1006445e:	2600      	movs	r6, #0
10064460:	e028      	b.n	100644b4 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10064462:	2686      	movs	r6, #134	@ 0x86
10064464:	e026      	b.n	100644b4 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10064466:	461f      	mov	r7, r3
10064468:	4616      	mov	r6, r2
1006446a:	4814      	ldr	r0, [pc, #80]	@ (100644bc <__arm_cp.1_1>)
1006446c:	6800      	ldr	r0, [r0, #0]
1006446e:	0761      	lsls	r1, r4, #29
10064470:	0ec9      	lsrs	r1, r1, #27
10064472:	1840      	adds	r0, r0, r1
10064474:	6900      	ldr	r0, [r0, #16]
10064476:	2245      	movs	r2, #69	@ 0x45
10064478:	2303      	movs	r3, #3
1006447a:	4621      	mov	r1, r4
1006447c:	f7f1 f830 	bl	100554e0 <aci_event_fifo_push_header>
10064480:	2800      	cmp	r0, #0
10064482:	d016      	beq.n	100644b2 <aci_gap_pairing_complete_event_push_noinline+0x6a>
10064484:	4601      	mov	r1, r0
10064486:	7285      	strb	r5, [r0, #10]
10064488:	2004      	movs	r0, #4
1006448a:	7248      	strb	r0, [r1, #9]
1006448c:	2001      	movs	r0, #1
1006448e:	7208      	strb	r0, [r1, #8]
10064490:	4632      	mov	r2, r6
10064492:	2600      	movs	r6, #0
10064494:	71ce      	strb	r6, [r1, #7]
10064496:	2006      	movs	r0, #6
10064498:	7188      	strb	r0, [r1, #6]
1006449a:	734f      	strb	r7, [r1, #13]
1006449c:	730a      	strb	r2, [r1, #12]
1006449e:	20ff      	movs	r0, #255	@ 0xff
100644a0:	7148      	strb	r0, [r1, #5]
100644a2:	2082      	movs	r0, #130	@ 0x82
100644a4:	7108      	strb	r0, [r1, #4]
100644a6:	0a28      	lsrs	r0, r5, #8
100644a8:	72c8      	strb	r0, [r1, #11]
100644aa:	4620      	mov	r0, r4
100644ac:	f7f1 f8b5 	bl	1005561a <aci_event_fifo_push>
100644b0:	e000      	b.n	100644b4 <aci_gap_pairing_complete_event_push_noinline+0x6c>
100644b2:	2607      	movs	r6, #7
100644b4:	4630      	mov	r0, r6
100644b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100644b8 <__arm_cp.1_0>:
100644b8:	20002468 	.word	0x20002468

100644bc <__arm_cp.1_1>:
100644bc:	20002418 	.word	0x20002418

100644c0 <GAT_att_clt_init>:
100644c0:	b580      	push	{r7, lr}
100644c2:	f000 fd35 	bl	10064f30 <GAT_clt_init>
100644c6:	bd80      	pop	{r7, pc}

100644c8 <GAT_att_clt_rcv>:
100644c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100644ca:	4604      	mov	r4, r0
100644cc:	8805      	ldrh	r5, [r0, #0]
100644ce:	f7f5 fb6a 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
100644d2:	4601      	mov	r1, r0
100644d4:	4628      	mov	r0, r5
100644d6:	f7f2 fcd9 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
100644da:	4605      	mov	r5, r0
100644dc:	4620      	mov	r0, r4
100644de:	f000 f8d7 	bl	10064690 <GAT_att_cmn_get_opcode>
100644e2:	281d      	cmp	r0, #29
100644e4:	d003      	beq.n	100644ee <GAT_att_clt_rcv+0x26>
100644e6:	2823      	cmp	r0, #35	@ 0x23
100644e8:	d001      	beq.n	100644ee <GAT_att_clt_rcv+0x26>
100644ea:	281b      	cmp	r0, #27
100644ec:	d10e      	bne.n	1006450c <GAT_att_clt_rcv+0x44>
100644ee:	8861      	ldrh	r1, [r4, #2]
100644f0:	88ea      	ldrh	r2, [r5, #6]
100644f2:	4291      	cmp	r1, r2
100644f4:	d805      	bhi.n	10064502 <GAT_att_clt_rcv+0x3a>
100644f6:	2903      	cmp	r1, #3
100644f8:	d303      	bcc.n	10064502 <GAT_att_clt_rcv+0x3a>
100644fa:	2823      	cmp	r0, #35	@ 0x23
100644fc:	d167      	bne.n	100645ce <GAT_att_clt_rcv+0x106>
100644fe:	2904      	cmp	r1, #4
10064500:	d865      	bhi.n	100645ce <GAT_att_clt_rcv+0x106>
10064502:	4620      	mov	r0, r4
10064504:	f7f0 fe38 	bl	10055178 <ACL_pkt_release>
10064508:	2000      	movs	r0, #0
1006450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006450c:	4620      	mov	r0, r4
1006450e:	f000 f8bf 	bl	10064690 <GAT_att_cmn_get_opcode>
10064512:	88a9      	ldrh	r1, [r5, #4]
10064514:	06ca      	lsls	r2, r1, #27
10064516:	d56e      	bpl.n	100645f6 <GAT_att_clt_rcv+0x12e>
10064518:	2801      	cmp	r0, #1
1006451a:	d002      	beq.n	10064522 <GAT_att_clt_rcv+0x5a>
1006451c:	78aa      	ldrb	r2, [r5, #2]
1006451e:	4290      	cmp	r0, r2
10064520:	d169      	bne.n	100645f6 <GAT_att_clt_rcv+0x12e>
10064522:	2010      	movs	r0, #16
10064524:	4381      	bics	r1, r0
10064526:	80a9      	strh	r1, [r5, #4]
10064528:	896a      	ldrh	r2, [r5, #10]
1006452a:	8929      	ldrh	r1, [r5, #8]
1006452c:	2603      	movs	r6, #3
1006452e:	4630      	mov	r0, r6
10064530:	f7f2 fd1e 	bl	10056f70 <GAT_att_cmn_stop_timer>
10064534:	8861      	ldrh	r1, [r4, #2]
10064536:	88e8      	ldrh	r0, [r5, #6]
10064538:	9100      	str	r1, [sp, #0]
1006453a:	4281      	cmp	r1, r0
1006453c:	d900      	bls.n	10064540 <GAT_att_clt_rcv+0x78>
1006453e:	e09a      	b.n	10064676 <GAT_att_clt_rcv+0x1ae>
10064540:	4620      	mov	r0, r4
10064542:	f000 f8a5 	bl	10064690 <GAT_att_cmn_get_opcode>
10064546:	1e42      	subs	r2, r0, #1
10064548:	2101      	movs	r1, #1
1006454a:	41ca      	rors	r2, r1
1006454c:	2300      	movs	r3, #0
1006454e:	2a10      	cmp	r2, #16
10064550:	d900      	bls.n	10064554 <GAT_att_clt_rcv+0x8c>
10064552:	e088      	b.n	10064666 <GAT_att_clt_rcv+0x19e>
10064554:	0092      	lsls	r2, r2, #2
10064556:	461f      	mov	r7, r3
10064558:	a301      	add	r3, pc, #4	@ (adr r3, 10064560 <GAT_att_clt_rcv+0x98>)
1006455a:	589a      	ldr	r2, [r3, r2]
1006455c:	463b      	mov	r3, r7
1006455e:	4697      	mov	pc, r2
10064560:	10064617 	.word	0x10064617
10064564:	1006461b 	.word	0x1006461b
10064568:	10064627 	.word	0x10064627
1006456c:	10064645 	.word	0x10064645
10064570:	100645a5 	.word	0x100645a5
10064574:	1006466d 	.word	0x1006466d
10064578:	1006466d 	.word	0x1006466d
1006457c:	1006466d 	.word	0x1006466d
10064580:	100645a5 	.word	0x100645a5
10064584:	10064613 	.word	0x10064613
10064588:	10064667 	.word	0x10064667
1006458c:	1006461f 	.word	0x1006461f
10064590:	10064613 	.word	0x10064613
10064594:	10064667 	.word	0x10064667
10064598:	10064667 	.word	0x10064667
1006459c:	10064667 	.word	0x10064667
100645a0:	1006466d 	.word	0x1006466d
100645a4:	2809      	cmp	r0, #9
100645a6:	d102      	bne.n	100645ae <GAT_att_clt_rcv+0xe6>
100645a8:	9900      	ldr	r1, [sp, #0]
100645aa:	2904      	cmp	r1, #4
100645ac:	d35b      	bcc.n	10064666 <GAT_att_clt_rcv+0x19e>
100645ae:	2811      	cmp	r0, #17
100645b0:	d102      	bne.n	100645b8 <GAT_att_clt_rcv+0xf0>
100645b2:	9800      	ldr	r0, [sp, #0]
100645b4:	2806      	cmp	r0, #6
100645b6:	d356      	bcc.n	10064666 <GAT_att_clt_rcv+0x19e>
100645b8:	89a0      	ldrh	r0, [r4, #12]
100645ba:	1c40      	adds	r0, r0, #1
100645bc:	b281      	uxth	r1, r0
100645be:	4620      	mov	r0, r4
100645c0:	f000 fa47 	bl	10064a52 <ACL_pkt_read_8b>
100645c4:	463b      	mov	r3, r7
100645c6:	2800      	cmp	r0, #0
100645c8:	d04d      	beq.n	10064666 <GAT_att_clt_rcv+0x19e>
100645ca:	4601      	mov	r1, r0
100645cc:	e043      	b.n	10064656 <GAT_att_clt_rcv+0x18e>
100645ce:	281d      	cmp	r0, #29
100645d0:	d10d      	bne.n	100645ee <GAT_att_clt_rcv+0x126>
100645d2:	88a8      	ldrh	r0, [r5, #4]
100645d4:	0680      	lsls	r0, r0, #26
100645d6:	d412      	bmi.n	100645fe <GAT_att_clt_rcv+0x136>
100645d8:	896a      	ldrh	r2, [r5, #10]
100645da:	8929      	ldrh	r1, [r5, #8]
100645dc:	2002      	movs	r0, #2
100645de:	f7f2 fd11 	bl	10057004 <GAT_att_cmn_start_timer>
100645e2:	2800      	cmp	r0, #0
100645e4:	d14c      	bne.n	10064680 <GAT_att_clt_rcv+0x1b8>
100645e6:	88a8      	ldrh	r0, [r5, #4]
100645e8:	2120      	movs	r1, #32
100645ea:	4301      	orrs	r1, r0
100645ec:	80a9      	strh	r1, [r5, #4]
100645ee:	4620      	mov	r0, r4
100645f0:	f000 ffb7 	bl	10065562 <GAT_clt_rcv_srv_initiated>
100645f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100645f6:	4620      	mov	r0, r4
100645f8:	f000 fab7 	bl	10064b6a <GAT_att_clt_unexpect_rx>
100645fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100645fe:	3508      	adds	r5, #8
10064600:	2042      	movs	r0, #66	@ 0x42
10064602:	2103      	movs	r1, #3
10064604:	2202      	movs	r2, #2
10064606:	462b      	mov	r3, r5
10064608:	f7ff feaa 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
1006460c:	2800      	cmp	r0, #0
1006460e:	d137      	bne.n	10064680 <GAT_att_clt_rcv+0x1b8>
10064610:	e777      	b.n	10064502 <GAT_att_clt_rcv+0x3a>
10064612:	460b      	mov	r3, r1
10064614:	e027      	b.n	10064666 <GAT_att_clt_rcv+0x19e>
10064616:	2305      	movs	r3, #5
10064618:	e025      	b.n	10064666 <GAT_att_clt_rcv+0x19e>
1006461a:	4633      	mov	r3, r6
1006461c:	e023      	b.n	10064666 <GAT_att_clt_rcv+0x19e>
1006461e:	9b00      	ldr	r3, [sp, #0]
10064620:	2b04      	cmp	r3, #4
10064622:	d91f      	bls.n	10064664 <GAT_att_clt_rcv+0x19c>
10064624:	e01f      	b.n	10064666 <GAT_att_clt_rcv+0x19e>
10064626:	9800      	ldr	r0, [sp, #0]
10064628:	2806      	cmp	r0, #6
1006462a:	d31c      	bcc.n	10064666 <GAT_att_clt_rcv+0x19e>
1006462c:	89a0      	ldrh	r0, [r4, #12]
1006462e:	1c40      	adds	r0, r0, #1
10064630:	b281      	uxth	r1, r0
10064632:	4620      	mov	r0, r4
10064634:	f000 fa0d 	bl	10064a52 <ACL_pkt_read_8b>
10064638:	2801      	cmp	r0, #1
1006463a:	d00b      	beq.n	10064654 <GAT_att_clt_rcv+0x18c>
1006463c:	2802      	cmp	r0, #2
1006463e:	d11a      	bne.n	10064676 <GAT_att_clt_rcv+0x1ae>
10064640:	2112      	movs	r1, #18
10064642:	e008      	b.n	10064656 <GAT_att_clt_rcv+0x18e>
10064644:	9800      	ldr	r0, [sp, #0]
10064646:	2802      	cmp	r0, #2
10064648:	d30d      	bcc.n	10064666 <GAT_att_clt_rcv+0x19e>
1006464a:	9b00      	ldr	r3, [sp, #0]
1006464c:	1e58      	subs	r0, r3, #1
1006464e:	0780      	lsls	r0, r0, #30
10064650:	d108      	bne.n	10064664 <GAT_att_clt_rcv+0x19c>
10064652:	e008      	b.n	10064666 <GAT_att_clt_rcv+0x19e>
10064654:	2104      	movs	r1, #4
10064656:	9e00      	ldr	r6, [sp, #0]
10064658:	1eb0      	subs	r0, r6, #2
1006465a:	f7db fe77 	bl	1004034c <__aeabi_uidivmod>
1006465e:	2900      	cmp	r1, #0
10064660:	4633      	mov	r3, r6
10064662:	d000      	beq.n	10064666 <GAT_att_clt_rcv+0x19e>
10064664:	2300      	movs	r3, #0
10064666:	9800      	ldr	r0, [sp, #0]
10064668:	4298      	cmp	r0, r3
1006466a:	d104      	bne.n	10064676 <GAT_att_clt_rcv+0x1ae>
1006466c:	4807      	ldr	r0, [pc, #28]	@ (1006468c <__arm_cp.1_0>)
1006466e:	6801      	ldr	r1, [r0, #0]
10064670:	4620      	mov	r0, r4
10064672:	4788      	blx	r1
10064674:	e002      	b.n	1006467c <GAT_att_clt_rcv+0x1b4>
10064676:	4620      	mov	r0, r4
10064678:	f000 ff5e 	bl	10065538 <GAT_clt_rcv_corrupted>
1006467c:	2884      	cmp	r0, #132	@ 0x84
1006467e:	d101      	bne.n	10064684 <GAT_att_clt_rcv+0x1bc>
10064680:	2084      	movs	r0, #132	@ 0x84
10064682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064684:	2000      	movs	r0, #0
10064686:	70a8      	strb	r0, [r5, #2]
10064688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006468a:	46c0      	nop			@ (mov r8, r8)

1006468c <__arm_cp.1_0>:
1006468c:	200028a4 	.word	0x200028a4

10064690 <GAT_att_cmn_get_opcode>:
10064690:	b580      	push	{r7, lr}
10064692:	8981      	ldrh	r1, [r0, #12]
10064694:	f000 f9dd 	bl	10064a52 <ACL_pkt_read_8b>
10064698:	bd80      	pop	{r7, pc}

1006469a <GAT_att_clt_connection>:
1006469a:	b580      	push	{r7, lr}
1006469c:	f000 fc70 	bl	10064f80 <GAT_clt_connection>
100646a0:	bd80      	pop	{r7, pc}

100646a2 <GAT_att_clt_bearer_close>:
100646a2:	b580      	push	{r7, lr}
100646a4:	f000 fc6e 	bl	10064f84 <GAT_clt_bearer_close>
100646a8:	bd80      	pop	{r7, pc}
	...

100646ac <GAT_att_clt_tx>:
100646ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100646ae:	4605      	mov	r5, r0
100646b0:	8881      	ldrh	r1, [r0, #4]
100646b2:	8840      	ldrh	r0, [r0, #2]
100646b4:	f7f2 fbea 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
100646b8:	2800      	cmp	r0, #0
100646ba:	d008      	beq.n	100646ce <GAT_att_clt_tx+0x22>
100646bc:	4604      	mov	r4, r0
100646be:	7829      	ldrb	r1, [r5, #0]
100646c0:	291e      	cmp	r1, #30
100646c2:	d106      	bne.n	100646d2 <GAT_att_clt_tx+0x26>
100646c4:	88a0      	ldrh	r0, [r4, #4]
100646c6:	0680      	lsls	r0, r0, #26
100646c8:	d439      	bmi.n	1006473e <GAT_att_clt_tx+0x92>
100646ca:	260c      	movs	r6, #12
100646cc:	e193      	b.n	100649f6 <GAT_att_clt_tx+0x34a>
100646ce:	2612      	movs	r6, #18
100646d0:	e191      	b.n	100649f6 <GAT_att_clt_tx+0x34a>
100646d2:	0648      	lsls	r0, r1, #25
100646d4:	d406      	bmi.n	100646e4 <GAT_att_clt_tx+0x38>
100646d6:	48ca      	ldr	r0, [pc, #808]	@ (10064a00 <__arm_cp.5_0>)
100646d8:	4aca      	ldr	r2, [pc, #808]	@ (10064a04 <__arm_cp.5_1>)
100646da:	6002      	str	r2, [r0, #0]
100646dc:	88a0      	ldrh	r0, [r4, #4]
100646de:	06c0      	lsls	r0, r0, #27
100646e0:	d500      	bpl.n	100646e4 <GAT_att_clt_tx+0x38>
100646e2:	e16d      	b.n	100649c0 <GAT_att_clt_tx+0x314>
100646e4:	88e0      	ldrh	r0, [r4, #6]
100646e6:	1e8a      	subs	r2, r1, #2
100646e8:	2686      	movs	r6, #134	@ 0x86
100646ea:	2a1e      	cmp	r2, #30
100646ec:	d900      	bls.n	100646f0 <GAT_att_clt_tx+0x44>
100646ee:	e091      	b.n	10064814 <GAT_att_clt_tx+0x168>
100646f0:	2703      	movs	r7, #3
100646f2:	0052      	lsls	r2, r2, #1
100646f4:	447a      	add	r2, pc
100646f6:	8892      	ldrh	r2, [r2, #4]
100646f8:	0052      	lsls	r2, r2, #1
100646fa:	4497      	add	pc, r2
100646fc:	017c0022 	.word	0x017c0022
10064700:	017c001e 	.word	0x017c001e
10064704:	017c009f 	.word	0x017c009f
10064708:	017c00a2 	.word	0x017c00a2
1006470c:	017c0022 	.word	0x017c0022
10064710:	017c001e 	.word	0x017c001e
10064714:	017c0094 	.word	0x017c0094
10064718:	017c012d 	.word	0x017c012d
1006471c:	017c0090 	.word	0x017c0090
10064720:	017c017c 	.word	0x017c017c
10064724:	017c00a9 	.word	0x017c00a9
10064728:	017c00ac 	.word	0x017c00ac
1006472c:	017c017c 	.word	0x017c017c
10064730:	017c017c 	.word	0x017c017c
10064734:	017c0021 	.word	0x017c0021
10064738:	0094      	.short	0x0094
1006473a:	2705      	movs	r7, #5
1006473c:	e001      	b.n	10064742 <GAT_att_clt_tx+0x96>
1006473e:	88e0      	ldrh	r0, [r4, #6]
10064740:	2701      	movs	r7, #1
10064742:	b2b9      	uxth	r1, r7
10064744:	4281      	cmp	r1, r0
10064746:	d300      	bcc.n	1006474a <GAT_att_clt_tx+0x9e>
10064748:	4607      	mov	r7, r0
1006474a:	9700      	str	r7, [sp, #0]
1006474c:	b2bf      	uxth	r7, r7
1006474e:	4620      	mov	r0, r4
10064750:	4639      	mov	r1, r7
10064752:	f7f2 fc99 	bl	10057088 <GAT_att_cmn_get_pckt>
10064756:	2800      	cmp	r0, #0
10064758:	d02f      	beq.n	100647ba <GAT_att_clt_tx+0x10e>
1006475a:	4606      	mov	r6, r0
1006475c:	782a      	ldrb	r2, [r5, #0]
1006475e:	8981      	ldrh	r1, [r0, #12]
10064760:	f000 f954 	bl	10064a0c <ACL_pkt_write_8b>
10064764:	7828      	ldrb	r0, [r5, #0]
10064766:	1e81      	subs	r1, r0, #2
10064768:	2916      	cmp	r1, #22
1006476a:	d82d      	bhi.n	100647c8 <GAT_att_clt_tx+0x11c>
1006476c:	0049      	lsls	r1, r1, #1
1006476e:	46c0      	nop			@ (mov r8, r8)
10064770:	4479      	add	r1, pc
10064772:	8889      	ldrh	r1, [r1, #4]
10064774:	0049      	lsls	r1, r1, #1
10064776:	448f      	add	pc, r1
10064778:	010d0016 	.word	0x010d0016
1006477c:	010d0070 	.word	0x010d0070
10064780:	010d0077 	.word	0x010d0077
10064784:	010d0093 	.word	0x010d0093
10064788:	010d00a1 	.word	0x010d00a1
1006478c:	010d00aa 	.word	0x010d00aa
10064790:	010d00ba 	.word	0x010d00ba
10064794:	010d00c0 	.word	0x010d00c0
10064798:	010d002f 	.word	0x010d002f
1006479c:	010d010d 	.word	0x010d010d
100647a0:	010d00ce 	.word	0x010d00ce
100647a4:	00e6      	.short	0x00e6
100647a6:	4898      	ldr	r0, [pc, #608]	@ (10064a08 <__arm_cp.5_2>)
100647a8:	8a02      	ldrh	r2, [r0, #16]
100647aa:	89b0      	ldrh	r0, [r6, #12]
100647ac:	1c40      	adds	r0, r0, #1
100647ae:	b281      	uxth	r1, r0
100647b0:	4630      	mov	r0, r6
100647b2:	f7f0 fd16 	bl	100551e2 <ACL_pkt_write_16b>
100647b6:	2003      	movs	r0, #3
100647b8:	e0eb      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
100647ba:	2008      	movs	r0, #8
100647bc:	f7fe f9da 	bl	10062b74 <tsk_notify_idx>
100647c0:	f7ed fb5b 	bl	10051e7a <BLE_STACK_ProcessRequest>
100647c4:	2688      	movs	r6, #136	@ 0x88
100647c6:	e116      	b.n	100649f6 <GAT_att_clt_tx+0x34a>
100647c8:	2820      	cmp	r0, #32
100647ca:	d100      	bne.n	100647ce <GAT_att_clt_tx+0x122>
100647cc:	e0ca      	b.n	10064964 <GAT_att_clt_tx+0x2b8>
100647ce:	2852      	cmp	r0, #82	@ 0x52
100647d0:	d002      	beq.n	100647d8 <GAT_att_clt_tx+0x12c>
100647d2:	28d2      	cmp	r0, #210	@ 0xd2
100647d4:	d000      	beq.n	100647d8 <GAT_att_clt_tx+0x12c>
100647d6:	e0dd      	b.n	10064994 <GAT_att_clt_tx+0x2e8>
100647d8:	892a      	ldrh	r2, [r5, #8]
100647da:	89b0      	ldrh	r0, [r6, #12]
100647dc:	1c40      	adds	r0, r0, #1
100647de:	b281      	uxth	r1, r0
100647e0:	4630      	mov	r0, r6
100647e2:	f7f0 fcfe 	bl	100551e2 <ACL_pkt_write_16b>
100647e6:	68eb      	ldr	r3, [r5, #12]
100647e8:	896a      	ldrh	r2, [r5, #10]
100647ea:	89b0      	ldrh	r0, [r6, #12]
100647ec:	1cc0      	adds	r0, r0, #3
100647ee:	b281      	uxth	r1, r0
100647f0:	4630      	mov	r0, r6
100647f2:	f7f0 fcff 	bl	100551f4 <ACL_pkt_write>
100647f6:	7828      	ldrb	r0, [r5, #0]
100647f8:	2812      	cmp	r0, #18
100647fa:	d100      	bne.n	100647fe <GAT_att_clt_tx+0x152>
100647fc:	e0b8      	b.n	10064970 <GAT_att_clt_tx+0x2c4>
100647fe:	28d2      	cmp	r0, #210	@ 0xd2
10064800:	d000      	beq.n	10064804 <GAT_att_clt_tx+0x158>
10064802:	e0c7      	b.n	10064994 <GAT_att_clt_tx+0x2e8>
10064804:	9800      	ldr	r0, [sp, #0]
10064806:	380c      	subs	r0, #12
10064808:	8070      	strh	r0, [r6, #2]
1006480a:	8920      	ldrh	r0, [r4, #8]
1006480c:	4631      	mov	r1, r6
1006480e:	f7fe f86c 	bl	100628ea <smp_sap_sm2_packet_data_signing_compute>
10064812:	e0bf      	b.n	10064994 <GAT_att_clt_tx+0x2e8>
10064814:	2952      	cmp	r1, #82	@ 0x52
10064816:	d002      	beq.n	1006481e <GAT_att_clt_tx+0x172>
10064818:	29d2      	cmp	r1, #210	@ 0xd2
1006481a:	d000      	beq.n	1006481e <GAT_att_clt_tx+0x172>
1006481c:	e0eb      	b.n	100649f6 <GAT_att_clt_tx+0x34a>
1006481e:	29d2      	cmp	r1, #210	@ 0xd2
10064820:	d008      	beq.n	10064834 <GAT_att_clt_tx+0x188>
10064822:	2103      	movs	r1, #3
10064824:	e007      	b.n	10064836 <GAT_att_clt_tx+0x18a>
10064826:	7a29      	ldrb	r1, [r5, #8]
10064828:	0049      	lsls	r1, r1, #1
1006482a:	1c4f      	adds	r7, r1, #1
1006482c:	4287      	cmp	r7, r0
1006482e:	d800      	bhi.n	10064832 <GAT_att_clt_tx+0x186>
10064830:	e787      	b.n	10064742 <GAT_att_clt_tx+0x96>
10064832:	e0e0      	b.n	100649f6 <GAT_att_clt_tx+0x34a>
10064834:	210f      	movs	r1, #15
10064836:	896a      	ldrh	r2, [r5, #10]
10064838:	1857      	adds	r7, r2, r1
1006483a:	e782      	b.n	10064742 <GAT_att_clt_tx+0x96>
1006483c:	89e9      	ldrh	r1, [r5, #14]
1006483e:	1dcf      	adds	r7, r1, #7
10064840:	e77f      	b.n	10064742 <GAT_att_clt_tx+0x96>
10064842:	68e9      	ldr	r1, [r5, #12]
10064844:	7c09      	ldrb	r1, [r1, #16]
10064846:	2980      	cmp	r1, #128	@ 0x80
10064848:	d000      	beq.n	1006484c <GAT_att_clt_tx+0x1a0>
1006484a:	e089      	b.n	10064960 <GAT_att_clt_tx+0x2b4>
1006484c:	2715      	movs	r7, #21
1006484e:	e778      	b.n	10064742 <GAT_att_clt_tx+0x96>
10064850:	89a9      	ldrh	r1, [r5, #12]
10064852:	1d4f      	adds	r7, r1, #5
10064854:	e775      	b.n	10064742 <GAT_att_clt_tx+0x96>
10064856:	2702      	movs	r7, #2
10064858:	e773      	b.n	10064742 <GAT_att_clt_tx+0x96>
1006485a:	896a      	ldrh	r2, [r5, #10]
1006485c:	8929      	ldrh	r1, [r5, #8]
1006485e:	4630      	mov	r0, r6
10064860:	f000 f9a2 	bl	10064ba8 <GAT_att_clt_fill_handle_range>
10064864:	2005      	movs	r0, #5
10064866:	e094      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
10064868:	896a      	ldrh	r2, [r5, #10]
1006486a:	8929      	ldrh	r1, [r5, #8]
1006486c:	4630      	mov	r0, r6
1006486e:	f000 f99b 	bl	10064ba8 <GAT_att_clt_fill_handle_range>
10064872:	89aa      	ldrh	r2, [r5, #12]
10064874:	89b0      	ldrh	r0, [r6, #12]
10064876:	1d40      	adds	r0, r0, #5
10064878:	b281      	uxth	r1, r0
1006487a:	4630      	mov	r0, r6
1006487c:	f7f0 fcb1 	bl	100551e2 <ACL_pkt_write_16b>
10064880:	89e8      	ldrh	r0, [r5, #14]
10064882:	1dc0      	adds	r0, r0, #7
10064884:	42b8      	cmp	r0, r7
10064886:	d800      	bhi.n	1006488a <GAT_att_clt_tx+0x1de>
10064888:	4607      	mov	r7, r0
1006488a:	1ff8      	subs	r0, r7, #7
1006488c:	b282      	uxth	r2, r0
1006488e:	692b      	ldr	r3, [r5, #16]
10064890:	89b0      	ldrh	r0, [r6, #12]
10064892:	1dc0      	adds	r0, r0, #7
10064894:	b281      	uxth	r1, r0
10064896:	4630      	mov	r0, r6
10064898:	f7f0 fcac 	bl	100551f4 <ACL_pkt_write>
1006489c:	2007      	movs	r0, #7
1006489e:	e078      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
100648a0:	896a      	ldrh	r2, [r5, #10]
100648a2:	8929      	ldrh	r1, [r5, #8]
100648a4:	4630      	mov	r0, r6
100648a6:	f000 f97f 	bl	10064ba8 <GAT_att_clt_fill_handle_range>
100648aa:	89b0      	ldrh	r0, [r6, #12]
100648ac:	1d40      	adds	r0, r0, #5
100648ae:	68eb      	ldr	r3, [r5, #12]
100648b0:	7c19      	ldrb	r1, [r3, #16]
100648b2:	2980      	cmp	r1, #128	@ 0x80
100648b4:	d15e      	bne.n	10064974 <GAT_att_clt_tx+0x2c8>
100648b6:	b281      	uxth	r1, r0
100648b8:	2210      	movs	r2, #16
100648ba:	e05e      	b.n	1006497a <GAT_att_clt_tx+0x2ce>
100648bc:	892a      	ldrh	r2, [r5, #8]
100648be:	89b0      	ldrh	r0, [r6, #12]
100648c0:	1c40      	adds	r0, r0, #1
100648c2:	b281      	uxth	r1, r0
100648c4:	4630      	mov	r0, r6
100648c6:	f7f0 fc8c 	bl	100551e2 <ACL_pkt_write_16b>
100648ca:	200b      	movs	r0, #11
100648cc:	e061      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
100648ce:	892a      	ldrh	r2, [r5, #8]
100648d0:	89b0      	ldrh	r0, [r6, #12]
100648d2:	1c40      	adds	r0, r0, #1
100648d4:	b281      	uxth	r1, r0
100648d6:	4630      	mov	r0, r6
100648d8:	f7f0 fc83 	bl	100551e2 <ACL_pkt_write_16b>
100648dc:	896a      	ldrh	r2, [r5, #10]
100648de:	89b0      	ldrh	r0, [r6, #12]
100648e0:	1cc0      	adds	r0, r0, #3
100648e2:	b281      	uxth	r1, r0
100648e4:	4630      	mov	r0, r6
100648e6:	f7f0 fc7c 	bl	100551e2 <ACL_pkt_write_16b>
100648ea:	200d      	movs	r0, #13
100648ec:	e051      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
100648ee:	4628      	mov	r0, r5
100648f0:	4631      	mov	r1, r6
100648f2:	f000 f94d 	bl	10064b90 <GAT_att_clt_fill_read_multi_req>
100648f6:	200f      	movs	r0, #15
100648f8:	e04b      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
100648fa:	896a      	ldrh	r2, [r5, #10]
100648fc:	8929      	ldrh	r1, [r5, #8]
100648fe:	4630      	mov	r0, r6
10064900:	f000 f952 	bl	10064ba8 <GAT_att_clt_fill_handle_range>
10064904:	89b0      	ldrh	r0, [r6, #12]
10064906:	1d40      	adds	r0, r0, #5
10064908:	68eb      	ldr	r3, [r5, #12]
1006490a:	7c19      	ldrb	r1, [r3, #16]
1006490c:	2980      	cmp	r1, #128	@ 0x80
1006490e:	d139      	bne.n	10064984 <GAT_att_clt_tx+0x2d8>
10064910:	b281      	uxth	r1, r0
10064912:	2210      	movs	r2, #16
10064914:	e039      	b.n	1006498a <GAT_att_clt_tx+0x2de>
10064916:	892a      	ldrh	r2, [r5, #8]
10064918:	89b0      	ldrh	r0, [r6, #12]
1006491a:	1c40      	adds	r0, r0, #1
1006491c:	b281      	uxth	r1, r0
1006491e:	4630      	mov	r0, r6
10064920:	f7f0 fc5f 	bl	100551e2 <ACL_pkt_write_16b>
10064924:	896a      	ldrh	r2, [r5, #10]
10064926:	89b0      	ldrh	r0, [r6, #12]
10064928:	1cc0      	adds	r0, r0, #3
1006492a:	b281      	uxth	r1, r0
1006492c:	4630      	mov	r0, r6
1006492e:	f7f0 fc58 	bl	100551e2 <ACL_pkt_write_16b>
10064932:	692b      	ldr	r3, [r5, #16]
10064934:	89aa      	ldrh	r2, [r5, #12]
10064936:	89b0      	ldrh	r0, [r6, #12]
10064938:	1d40      	adds	r0, r0, #5
1006493a:	b281      	uxth	r1, r0
1006493c:	4630      	mov	r0, r6
1006493e:	f7f0 fc59 	bl	100551f4 <ACL_pkt_write>
10064942:	2017      	movs	r0, #23
10064944:	e025      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
10064946:	7a2a      	ldrb	r2, [r5, #8]
10064948:	89b0      	ldrh	r0, [r6, #12]
1006494a:	1c40      	adds	r0, r0, #1
1006494c:	b281      	uxth	r1, r0
1006494e:	4630      	mov	r0, r6
10064950:	f000 f85c 	bl	10064a0c <ACL_pkt_write_8b>
10064954:	2019      	movs	r0, #25
10064956:	e01c      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
10064958:	68e9      	ldr	r1, [r5, #12]
1006495a:	7c09      	ldrb	r1, [r1, #16]
1006495c:	2980      	cmp	r1, #128	@ 0x80
1006495e:	d04c      	beq.n	100649fa <GAT_att_clt_tx+0x34e>
10064960:	2707      	movs	r7, #7
10064962:	e6ee      	b.n	10064742 <GAT_att_clt_tx+0x96>
10064964:	4628      	mov	r0, r5
10064966:	4631      	mov	r1, r6
10064968:	f000 f912 	bl	10064b90 <GAT_att_clt_fill_read_multi_req>
1006496c:	2021      	movs	r0, #33	@ 0x21
1006496e:	e010      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
10064970:	2013      	movs	r0, #19
10064972:	e00e      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
10064974:	b281      	uxth	r1, r0
10064976:	330c      	adds	r3, #12
10064978:	2202      	movs	r2, #2
1006497a:	4630      	mov	r0, r6
1006497c:	f7f0 fc3a 	bl	100551f4 <ACL_pkt_write>
10064980:	2009      	movs	r0, #9
10064982:	e006      	b.n	10064992 <GAT_att_clt_tx+0x2e6>
10064984:	b281      	uxth	r1, r0
10064986:	330c      	adds	r3, #12
10064988:	2202      	movs	r2, #2
1006498a:	4630      	mov	r0, r6
1006498c:	f7f0 fc32 	bl	100551f4 <ACL_pkt_write>
10064990:	2011      	movs	r0, #17
10064992:	70a0      	strb	r0, [r4, #2]
10064994:	9800      	ldr	r0, [sp, #0]
10064996:	8070      	strh	r0, [r6, #2]
10064998:	782a      	ldrb	r2, [r5, #0]
1006499a:	89b1      	ldrh	r1, [r6, #12]
1006499c:	4630      	mov	r0, r6
1006499e:	f000 f835 	bl	10064a0c <ACL_pkt_write_8b>
100649a2:	7828      	ldrb	r0, [r5, #0]
100649a4:	0641      	lsls	r1, r0, #25
100649a6:	d411      	bmi.n	100649cc <GAT_att_clt_tx+0x320>
100649a8:	281e      	cmp	r0, #30
100649aa:	d00f      	beq.n	100649cc <GAT_att_clt_tx+0x320>
100649ac:	8962      	ldrh	r2, [r4, #10]
100649ae:	8921      	ldrh	r1, [r4, #8]
100649b0:	2003      	movs	r0, #3
100649b2:	f7f2 fb27 	bl	10057004 <GAT_att_cmn_start_timer>
100649b6:	2800      	cmp	r0, #0
100649b8:	d004      	beq.n	100649c4 <GAT_att_clt_tx+0x318>
100649ba:	4630      	mov	r0, r6
100649bc:	f7f0 fbdc 	bl	10055178 <ACL_pkt_release>
100649c0:	2684      	movs	r6, #132	@ 0x84
100649c2:	e018      	b.n	100649f6 <GAT_att_clt_tx+0x34a>
100649c4:	88a0      	ldrh	r0, [r4, #4]
100649c6:	2110      	movs	r1, #16
100649c8:	4301      	orrs	r1, r0
100649ca:	80a1      	strh	r1, [r4, #4]
100649cc:	8960      	ldrh	r0, [r4, #10]
100649ce:	4631      	mov	r1, r6
100649d0:	f7f2 fade 	bl	10056f90 <GAT_att_cmn_send>
100649d4:	2800      	cmp	r0, #0
100649d6:	d001      	beq.n	100649dc <GAT_att_clt_tx+0x330>
100649d8:	2681      	movs	r6, #129	@ 0x81
100649da:	e00c      	b.n	100649f6 <GAT_att_clt_tx+0x34a>
100649dc:	7828      	ldrb	r0, [r5, #0]
100649de:	2600      	movs	r6, #0
100649e0:	281e      	cmp	r0, #30
100649e2:	d108      	bne.n	100649f6 <GAT_att_clt_tx+0x34a>
100649e4:	8962      	ldrh	r2, [r4, #10]
100649e6:	8921      	ldrh	r1, [r4, #8]
100649e8:	2002      	movs	r0, #2
100649ea:	f7f2 fac1 	bl	10056f70 <GAT_att_cmn_stop_timer>
100649ee:	88a0      	ldrh	r0, [r4, #4]
100649f0:	2120      	movs	r1, #32
100649f2:	4388      	bics	r0, r1
100649f4:	80a0      	strh	r0, [r4, #4]
100649f6:	4630      	mov	r0, r6
100649f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100649fa:	2711      	movs	r7, #17
100649fc:	e6a1      	b.n	10064742 <GAT_att_clt_tx+0x96>
100649fe:	46c0      	nop			@ (mov r8, r8)

10064a00 <__arm_cp.5_0>:
10064a00:	200028a4 	.word	0x200028a4

10064a04 <__arm_cp.5_1>:
10064a04:	10065005 	.word	0x10065005

10064a08 <__arm_cp.5_2>:
10064a08:	2000247c 	.word	0x2000247c

10064a0c <ACL_pkt_write_8b>:
10064a0c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064a0e:	4614      	mov	r4, r2
10064a10:	6840      	ldr	r0, [r0, #4]
10064a12:	2920      	cmp	r1, #32
10064a14:	d304      	bcc.n	10064a20 <ACL_pkt_write_8b+0x14>
10064a16:	ad01      	add	r5, sp, #4
10064a18:	462a      	mov	r2, r5
10064a1a:	f7fc fb74 	bl	10061106 <Mem_Buff_get_buff_off>
10064a1e:	8829      	ldrh	r1, [r5, #0]
10064a20:	1840      	adds	r0, r0, r1
10064a22:	7104      	strb	r4, [r0, #4]
10064a24:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064a26 <GAT_att_clt_read_grp_type_get_last_attr_h>:
10064a26:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064a28:	4604      	mov	r4, r0
10064a2a:	8980      	ldrh	r0, [r0, #12]
10064a2c:	1c40      	adds	r0, r0, #1
10064a2e:	b281      	uxth	r1, r0
10064a30:	4620      	mov	r0, r4
10064a32:	f000 f80e 	bl	10064a52 <ACL_pkt_read_8b>
10064a36:	8861      	ldrh	r1, [r4, #2]
10064a38:	1a08      	subs	r0, r1, r0
10064a3a:	89a1      	ldrh	r1, [r4, #12]
10064a3c:	1840      	adds	r0, r0, r1
10064a3e:	1c80      	adds	r0, r0, #2
10064a40:	b281      	uxth	r1, r0
10064a42:	2202      	movs	r2, #2
10064a44:	ad01      	add	r5, sp, #4
10064a46:	4620      	mov	r0, r4
10064a48:	462b      	mov	r3, r5
10064a4a:	f7f0 fbb1 	bl	100551b0 <ACL_pkt_read>
10064a4e:	8828      	ldrh	r0, [r5, #0]
10064a50:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064a52 <ACL_pkt_read_8b>:
10064a52:	b51c      	push	{r2, r3, r4, lr}
10064a54:	291f      	cmp	r1, #31
10064a56:	d803      	bhi.n	10064a60 <ACL_pkt_read_8b+0xe>
10064a58:	aa01      	add	r2, sp, #4
10064a5a:	8011      	strh	r1, [r2, #0]
10064a5c:	6840      	ldr	r0, [r0, #4]
10064a5e:	e005      	b.n	10064a6c <ACL_pkt_read_8b+0x1a>
10064a60:	6840      	ldr	r0, [r0, #4]
10064a62:	ac01      	add	r4, sp, #4
10064a64:	4622      	mov	r2, r4
10064a66:	f7fc fb4e 	bl	10061106 <Mem_Buff_get_buff_off>
10064a6a:	8821      	ldrh	r1, [r4, #0]
10064a6c:	1840      	adds	r0, r0, r1
10064a6e:	7900      	ldrb	r0, [r0, #4]
10064a70:	bd1c      	pop	{r2, r3, r4, pc}

10064a72 <GAT_att_clt_find_type_val_get_last_attr_h>:
10064a72:	b51c      	push	{r2, r3, r4, lr}
10064a74:	8981      	ldrh	r1, [r0, #12]
10064a76:	8842      	ldrh	r2, [r0, #2]
10064a78:	1851      	adds	r1, r2, r1
10064a7a:	1e89      	subs	r1, r1, #2
10064a7c:	b289      	uxth	r1, r1
10064a7e:	2202      	movs	r2, #2
10064a80:	ac01      	add	r4, sp, #4
10064a82:	4623      	mov	r3, r4
10064a84:	f7f0 fb94 	bl	100551b0 <ACL_pkt_read>
10064a88:	8820      	ldrh	r0, [r4, #0]
10064a8a:	bd1c      	pop	{r2, r3, r4, pc}

10064a8c <GAT_att_clt_parse_error_resp>:
10064a8c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064a8e:	460e      	mov	r6, r1
10064a90:	8841      	ldrh	r1, [r0, #2]
10064a92:	2905      	cmp	r1, #5
10064a94:	d112      	bne.n	10064abc <GAT_att_clt_parse_error_resp+0x30>
10064a96:	461c      	mov	r4, r3
10064a98:	4615      	mov	r5, r2
10064a9a:	8981      	ldrh	r1, [r0, #12]
10064a9c:	2205      	movs	r2, #5
10064a9e:	af01      	add	r7, sp, #4
10064aa0:	463b      	mov	r3, r7
10064aa2:	f7f0 fb85 	bl	100551b0 <ACL_pkt_read>
10064aa6:	7878      	ldrb	r0, [r7, #1]
10064aa8:	7030      	strb	r0, [r6, #0]
10064aaa:	78b8      	ldrb	r0, [r7, #2]
10064aac:	78f9      	ldrb	r1, [r7, #3]
10064aae:	0209      	lsls	r1, r1, #8
10064ab0:	1808      	adds	r0, r1, r0
10064ab2:	8028      	strh	r0, [r5, #0]
10064ab4:	9802      	ldr	r0, [sp, #8]
10064ab6:	7020      	strb	r0, [r4, #0]
10064ab8:	2000      	movs	r0, #0
10064aba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064abc:	2086      	movs	r0, #134	@ 0x86
10064abe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10064ac0 <GAT_att_clt_read_type_get_last_attr_h>:
10064ac0:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064ac2:	4604      	mov	r4, r0
10064ac4:	8980      	ldrh	r0, [r0, #12]
10064ac6:	1c40      	adds	r0, r0, #1
10064ac8:	b281      	uxth	r1, r0
10064aca:	4620      	mov	r0, r4
10064acc:	f7ff ffc1 	bl	10064a52 <ACL_pkt_read_8b>
10064ad0:	8861      	ldrh	r1, [r4, #2]
10064ad2:	1a08      	subs	r0, r1, r0
10064ad4:	89a1      	ldrh	r1, [r4, #12]
10064ad6:	1840      	adds	r0, r0, r1
10064ad8:	b281      	uxth	r1, r0
10064ada:	2202      	movs	r2, #2
10064adc:	ad01      	add	r5, sp, #4
10064ade:	4620      	mov	r0, r4
10064ae0:	462b      	mov	r3, r5
10064ae2:	f7f0 fb65 	bl	100551b0 <ACL_pkt_read>
10064ae6:	8828      	ldrh	r0, [r5, #0]
10064ae8:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064aea <GAT_att_clt_read_type_get_data>:
10064aea:	b570      	push	{r4, r5, r6, lr}
10064aec:	4614      	mov	r4, r2
10064aee:	460e      	mov	r6, r1
10064af0:	4605      	mov	r5, r0
10064af2:	8980      	ldrh	r0, [r0, #12]
10064af4:	1c40      	adds	r0, r0, #1
10064af6:	b281      	uxth	r1, r0
10064af8:	4628      	mov	r0, r5
10064afa:	f7ff ffaa 	bl	10064a52 <ACL_pkt_read_8b>
10064afe:	4602      	mov	r2, r0
10064b00:	4346      	muls	r6, r0
10064b02:	1cb0      	adds	r0, r6, #2
10064b04:	8869      	ldrh	r1, [r5, #2]
10064b06:	4288      	cmp	r0, r1
10064b08:	d208      	bcs.n	10064b1c <GAT_att_clt_read_type_get_data+0x32>
10064b0a:	89a9      	ldrh	r1, [r5, #12]
10064b0c:	1808      	adds	r0, r1, r0
10064b0e:	b281      	uxth	r1, r0
10064b10:	4628      	mov	r0, r5
10064b12:	4623      	mov	r3, r4
10064b14:	f7f0 fb4c 	bl	100551b0 <ACL_pkt_read>
10064b18:	2000      	movs	r0, #0
10064b1a:	bd70      	pop	{r4, r5, r6, pc}
10064b1c:	2086      	movs	r0, #134	@ 0x86
10064b1e:	bd70      	pop	{r4, r5, r6, pc}

10064b20 <GAT_att_clt_find_info_get_last_attr_h>:
10064b20:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064b22:	4604      	mov	r4, r0
10064b24:	8980      	ldrh	r0, [r0, #12]
10064b26:	1c40      	adds	r0, r0, #1
10064b28:	b281      	uxth	r1, r0
10064b2a:	4620      	mov	r0, r4
10064b2c:	f7ff ff91 	bl	10064a52 <ACL_pkt_read_8b>
10064b30:	2111      	movs	r1, #17
10064b32:	43c9      	mvns	r1, r1
10064b34:	2801      	cmp	r0, #1
10064b36:	d100      	bne.n	10064b3a <GAT_att_clt_find_info_get_last_attr_h+0x1a>
10064b38:	310e      	adds	r1, #14
10064b3a:	8860      	ldrh	r0, [r4, #2]
10064b3c:	1840      	adds	r0, r0, r1
10064b3e:	89a1      	ldrh	r1, [r4, #12]
10064b40:	1808      	adds	r0, r1, r0
10064b42:	b281      	uxth	r1, r0
10064b44:	2202      	movs	r2, #2
10064b46:	ad01      	add	r5, sp, #4
10064b48:	4620      	mov	r0, r4
10064b4a:	462b      	mov	r3, r5
10064b4c:	f7f0 fb30 	bl	100551b0 <ACL_pkt_read>
10064b50:	8828      	ldrh	r0, [r5, #0]
10064b52:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064b54 <GAT_att_clt_prep_wr_cmp_data>:
10064b54:	b580      	push	{r7, lr}
10064b56:	460b      	mov	r3, r1
10064b58:	8842      	ldrh	r2, [r0, #2]
10064b5a:	8981      	ldrh	r1, [r0, #12]
10064b5c:	1d49      	adds	r1, r1, #5
10064b5e:	b289      	uxth	r1, r1
10064b60:	1f52      	subs	r2, r2, #5
10064b62:	b292      	uxth	r2, r2
10064b64:	f7f0 fb1b 	bl	1005519e <ACL_pkt_cmp>
10064b68:	bd80      	pop	{r7, pc}

10064b6a <GAT_att_clt_unexpect_rx>:
10064b6a:	b51c      	push	{r2, r3, r4, lr}
10064b6c:	4604      	mov	r4, r0
10064b6e:	8800      	ldrh	r0, [r0, #0]
10064b70:	ab01      	add	r3, sp, #4
10064b72:	8018      	strh	r0, [r3, #0]
10064b74:	2042      	movs	r0, #66	@ 0x42
10064b76:	2102      	movs	r1, #2
10064b78:	460a      	mov	r2, r1
10064b7a:	f7ff fbf1 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
10064b7e:	2800      	cmp	r0, #0
10064b80:	d001      	beq.n	10064b86 <GAT_att_clt_unexpect_rx+0x1c>
10064b82:	2084      	movs	r0, #132	@ 0x84
10064b84:	bd1c      	pop	{r2, r3, r4, pc}
10064b86:	4620      	mov	r0, r4
10064b88:	f7f0 faf6 	bl	10055178 <ACL_pkt_release>
10064b8c:	2000      	movs	r0, #0
10064b8e:	bd1c      	pop	{r2, r3, r4, pc}

10064b90 <GAT_att_clt_fill_read_multi_req>:
10064b90:	b510      	push	{r4, lr}
10064b92:	460c      	mov	r4, r1
10064b94:	68c3      	ldr	r3, [r0, #12]
10064b96:	8989      	ldrh	r1, [r1, #12]
10064b98:	7a00      	ldrb	r0, [r0, #8]
10064b9a:	0042      	lsls	r2, r0, #1
10064b9c:	1c48      	adds	r0, r1, #1
10064b9e:	b281      	uxth	r1, r0
10064ba0:	4620      	mov	r0, r4
10064ba2:	f7f0 fb27 	bl	100551f4 <ACL_pkt_write>
10064ba6:	bd10      	pop	{r4, pc}

10064ba8 <GAT_att_clt_fill_handle_range>:
10064ba8:	b5b0      	push	{r4, r5, r7, lr}
10064baa:	4614      	mov	r4, r2
10064bac:	460a      	mov	r2, r1
10064bae:	4605      	mov	r5, r0
10064bb0:	8980      	ldrh	r0, [r0, #12]
10064bb2:	1c40      	adds	r0, r0, #1
10064bb4:	b281      	uxth	r1, r0
10064bb6:	4628      	mov	r0, r5
10064bb8:	f7f0 fb13 	bl	100551e2 <ACL_pkt_write_16b>
10064bbc:	89a8      	ldrh	r0, [r5, #12]
10064bbe:	1cc0      	adds	r0, r0, #3
10064bc0:	b281      	uxth	r1, r0
10064bc2:	4628      	mov	r0, r5
10064bc4:	4622      	mov	r2, r4
10064bc6:	f7f0 fb0c 	bl	100551e2 <ACL_pkt_write_16b>
10064bca:	bdb0      	pop	{r4, r5, r7, pc}

10064bcc <GAT_att_db_init>:
10064bcc:	b510      	push	{r4, lr}
10064bce:	4604      	mov	r4, r0
10064bd0:	2108      	movs	r1, #8
10064bd2:	f7fc f9f9 	bl	10060fc8 <csmem_mem_0_assign>
10064bd6:	4904      	ldr	r1, [pc, #16]	@ (10064be8 <__arm_cp.0_0>)
10064bd8:	6809      	ldr	r1, [r1, #0]
10064bda:	2260      	movs	r2, #96	@ 0x60
10064bdc:	2300      	movs	r3, #0
10064bde:	528b      	strh	r3, [r1, r2]
10064be0:	6648      	str	r0, [r1, #100]	@ 0x64
10064be2:	3160      	adds	r1, #96	@ 0x60
10064be4:	804c      	strh	r4, [r1, #2]
10064be6:	bd10      	pop	{r4, pc}

10064be8 <__arm_cp.0_0>:
10064be8:	20002420 	.word	0x20002420

10064bec <GAT_att_db_insert>:
10064bec:	b5f0      	push	{r4, r5, r6, r7, lr}
10064bee:	b085      	sub	sp, #20
10064bf0:	4617      	mov	r7, r2
10064bf2:	9004      	str	r0, [sp, #16]
10064bf4:	4d1c      	ldr	r5, [pc, #112]	@ (10064c68 <__arm_cp.1_0>)
10064bf6:	6828      	ldr	r0, [r5, #0]
10064bf8:	2460      	movs	r4, #96	@ 0x60
10064bfa:	5b06      	ldrh	r6, [r0, r4]
10064bfc:	4602      	mov	r2, r0
10064bfe:	3260      	adds	r2, #96	@ 0x60
10064c00:	8852      	ldrh	r2, [r2, #2]
10064c02:	4296      	cmp	r6, r2
10064c04:	d217      	bcs.n	10064c36 <GAT_att_db_insert+0x4a>
10064c06:	9402      	str	r4, [sp, #8]
10064c08:	9303      	str	r3, [sp, #12]
10064c0a:	2900      	cmp	r1, #0
10064c0c:	d017      	beq.n	10064c3e <GAT_att_db_insert+0x52>
10064c0e:	9701      	str	r7, [sp, #4]
10064c10:	4608      	mov	r0, r1
10064c12:	f000 f82b 	bl	10064c6c <GAT_att_db_get_att_idx>
10064c16:	1c44      	adds	r4, r0, #1
10064c18:	6828      	ldr	r0, [r5, #0]
10064c1a:	b2b1      	uxth	r1, r6
10064c1c:	b2a2      	uxth	r2, r4
10064c1e:	4291      	cmp	r1, r2
10064c20:	d30b      	bcc.n	10064c3a <GAT_att_db_insert+0x4e>
10064c22:	00c9      	lsls	r1, r1, #3
10064c24:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064c26:	1840      	adds	r0, r0, r1
10064c28:	4601      	mov	r1, r0
10064c2a:	3908      	subs	r1, #8
10064c2c:	2208      	movs	r2, #8
10064c2e:	f7ed ff0b 	bl	10052a48 <BLEPLAT_MemCpy>
10064c32:	1e76      	subs	r6, r6, #1
10064c34:	e7f0      	b.n	10064c18 <GAT_att_db_insert+0x2c>
10064c36:	2700      	movs	r7, #0
10064c38:	e012      	b.n	10064c60 <GAT_att_db_insert+0x74>
10064c3a:	9f01      	ldr	r7, [sp, #4]
10064c3c:	e000      	b.n	10064c40 <GAT_att_db_insert+0x54>
10064c3e:	4634      	mov	r4, r6
10064c40:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064c42:	b2a1      	uxth	r1, r4
10064c44:	00c9      	lsls	r1, r1, #3
10064c46:	9a04      	ldr	r2, [sp, #16]
10064c48:	5442      	strb	r2, [r0, r1]
10064c4a:	1840      	adds	r0, r0, r1
10064c4c:	9a03      	ldr	r2, [sp, #12]
10064c4e:	6042      	str	r2, [r0, #4]
10064c50:	6828      	ldr	r0, [r5, #0]
10064c52:	9b02      	ldr	r3, [sp, #8]
10064c54:	5ac2      	ldrh	r2, [r0, r3]
10064c56:	1c52      	adds	r2, r2, #1
10064c58:	52c2      	strh	r2, [r0, r3]
10064c5a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064c5c:	1840      	adds	r0, r0, r1
10064c5e:	8047      	strh	r7, [r0, #2]
10064c60:	4638      	mov	r0, r7
10064c62:	b005      	add	sp, #20
10064c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10064c66:	46c0      	nop			@ (mov r8, r8)

10064c68 <__arm_cp.1_0>:
10064c68:	20002420 	.word	0x20002420

10064c6c <GAT_att_db_get_att_idx>:
10064c6c:	4908      	ldr	r1, [pc, #32]	@ (10064c90 <__arm_cp.2_0>)
10064c6e:	680a      	ldr	r2, [r1, #0]
10064c70:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10064c72:	2362      	movs	r3, #98	@ 0x62
10064c74:	5ad2      	ldrh	r2, [r2, r3]
10064c76:	00d2      	lsls	r2, r2, #3
10064c78:	1852      	adds	r2, r2, r1
10064c7a:	3a08      	subs	r2, #8
10064c7c:	4282      	cmp	r2, r0
10064c7e:	d302      	bcc.n	10064c86 <GAT_att_db_get_att_idx+0x1a>
10064c80:	1a40      	subs	r0, r0, r1
10064c82:	08c0      	lsrs	r0, r0, #3
10064c84:	e001      	b.n	10064c8a <GAT_att_db_get_att_idx+0x1e>
10064c86:	2000      	movs	r0, #0
10064c88:	43c0      	mvns	r0, r0
10064c8a:	b280      	uxth	r0, r0
10064c8c:	4770      	bx	lr
10064c8e:	46c0      	nop			@ (mov r8, r8)

10064c90 <__arm_cp.2_0>:
10064c90:	20002420 	.word	0x20002420

10064c94 <GAT_att_db_find_by_handle>:
10064c94:	b580      	push	{r7, lr}
10064c96:	f000 f80f 	bl	10064cb8 <GAT_att_db_find_attr_idx_with_handle>
10064c9a:	4905      	ldr	r1, [pc, #20]	@ (10064cb0 <__arm_cp.3_0>)
10064c9c:	4288      	cmp	r0, r1
10064c9e:	d005      	beq.n	10064cac <GAT_att_db_find_by_handle+0x18>
10064ca0:	00c0      	lsls	r0, r0, #3
10064ca2:	4904      	ldr	r1, [pc, #16]	@ (10064cb4 <__arm_cp.3_1>)
10064ca4:	6809      	ldr	r1, [r1, #0]
10064ca6:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064ca8:	1808      	adds	r0, r1, r0
10064caa:	bd80      	pop	{r7, pc}
10064cac:	2000      	movs	r0, #0
10064cae:	bd80      	pop	{r7, pc}

10064cb0 <__arm_cp.3_0>:
10064cb0:	0000ffff 	.word	0x0000ffff

10064cb4 <__arm_cp.3_1>:
10064cb4:	20002420 	.word	0x20002420

10064cb8 <GAT_att_db_find_attr_idx_with_handle>:
10064cb8:	b510      	push	{r4, lr}
10064cba:	4604      	mov	r4, r0
10064cbc:	f000 f824 	bl	10064d08 <GAT_att_db_find_attr_idx_from_handle>
10064cc0:	4906      	ldr	r1, [pc, #24]	@ (10064cdc <__arm_cp.4_0>)
10064cc2:	4288      	cmp	r0, r1
10064cc4:	d007      	beq.n	10064cd6 <GAT_att_db_find_attr_idx_with_handle+0x1e>
10064cc6:	00c2      	lsls	r2, r0, #3
10064cc8:	4b05      	ldr	r3, [pc, #20]	@ (10064ce0 <__arm_cp.4_1>)
10064cca:	681b      	ldr	r3, [r3, #0]
10064ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
10064cce:	189a      	adds	r2, r3, r2
10064cd0:	8852      	ldrh	r2, [r2, #2]
10064cd2:	42a2      	cmp	r2, r4
10064cd4:	d000      	beq.n	10064cd8 <GAT_att_db_find_attr_idx_with_handle+0x20>
10064cd6:	4608      	mov	r0, r1
10064cd8:	bd10      	pop	{r4, pc}
10064cda:	46c0      	nop			@ (mov r8, r8)

10064cdc <__arm_cp.4_0>:
10064cdc:	0000ffff 	.word	0x0000ffff

10064ce0 <__arm_cp.4_1>:
10064ce0:	20002420 	.word	0x20002420

10064ce4 <GAT_att_db_find_from_handle>:
10064ce4:	b580      	push	{r7, lr}
10064ce6:	f000 f80f 	bl	10064d08 <GAT_att_db_find_attr_idx_from_handle>
10064cea:	4905      	ldr	r1, [pc, #20]	@ (10064d00 <__arm_cp.5_0>)
10064cec:	4288      	cmp	r0, r1
10064cee:	d005      	beq.n	10064cfc <GAT_att_db_find_from_handle+0x18>
10064cf0:	00c0      	lsls	r0, r0, #3
10064cf2:	4904      	ldr	r1, [pc, #16]	@ (10064d04 <__arm_cp.5_1>)
10064cf4:	6809      	ldr	r1, [r1, #0]
10064cf6:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064cf8:	1808      	adds	r0, r1, r0
10064cfa:	bd80      	pop	{r7, pc}
10064cfc:	2000      	movs	r0, #0
10064cfe:	bd80      	pop	{r7, pc}

10064d00 <__arm_cp.5_0>:
10064d00:	0000ffff 	.word	0x0000ffff

10064d04 <__arm_cp.5_1>:
10064d04:	20002420 	.word	0x20002420

10064d08 <GAT_att_db_find_attr_idx_from_handle>:
10064d08:	b570      	push	{r4, r5, r6, lr}
10064d0a:	4909      	ldr	r1, [pc, #36]	@ (10064d30 <__arm_cp.6_0>)
10064d0c:	680a      	ldr	r2, [r1, #0]
10064d0e:	2160      	movs	r1, #96	@ 0x60
10064d10:	5a53      	ldrh	r3, [r2, r1]
10064d12:	2100      	movs	r1, #0
10064d14:	2502      	movs	r5, #2
10064d16:	4c07      	ldr	r4, [pc, #28]	@ (10064d34 <__arm_cp.6_1>)
10064d18:	428b      	cmp	r3, r1
10064d1a:	d006      	beq.n	10064d2a <GAT_att_db_find_attr_idx_from_handle+0x22>
10064d1c:	6e56      	ldr	r6, [r2, #100]	@ 0x64
10064d1e:	5b76      	ldrh	r6, [r6, r5]
10064d20:	4286      	cmp	r6, r0
10064d22:	d203      	bcs.n	10064d2c <GAT_att_db_find_attr_idx_from_handle+0x24>
10064d24:	3508      	adds	r5, #8
10064d26:	1c49      	adds	r1, r1, #1
10064d28:	e7f6      	b.n	10064d18 <GAT_att_db_find_attr_idx_from_handle+0x10>
10064d2a:	4621      	mov	r1, r4
10064d2c:	b288      	uxth	r0, r1
10064d2e:	bd70      	pop	{r4, r5, r6, pc}

10064d30 <__arm_cp.6_0>:
10064d30:	20002420 	.word	0x20002420

10064d34 <__arm_cp.6_1>:
10064d34:	0000ffff 	.word	0x0000ffff

10064d38 <GAT_att_db_find_by_def>:
10064d38:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064d3a:	9302      	str	r3, [sp, #8]
10064d3c:	4615      	mov	r5, r2
10064d3e:	2200      	movs	r2, #0
10064d40:	4288      	cmp	r0, r1
10064d42:	d823      	bhi.n	10064d8c <GAT_att_db_find_by_def+0x54>
10064d44:	460c      	mov	r4, r1
10064d46:	4916      	ldr	r1, [pc, #88]	@ (10064da0 <__arm_cp.8_0>)
10064d48:	680f      	ldr	r7, [r1, #0]
10064d4a:	2160      	movs	r1, #96	@ 0x60
10064d4c:	5a79      	ldrh	r1, [r7, r1]
10064d4e:	2900      	cmp	r1, #0
10064d50:	d01c      	beq.n	10064d8c <GAT_att_db_find_by_def+0x54>
10064d52:	9200      	str	r2, [sp, #0]
10064d54:	9101      	str	r1, [sp, #4]
10064d56:	f7ff ffd7 	bl	10064d08 <GAT_att_db_find_attr_idx_from_handle>
10064d5a:	4606      	mov	r6, r0
10064d5c:	4620      	mov	r0, r4
10064d5e:	f7ff ffd3 	bl	10064d08 <GAT_att_db_find_attr_idx_from_handle>
10064d62:	9901      	ldr	r1, [sp, #4]
10064d64:	1e49      	subs	r1, r1, #1
10064d66:	4281      	cmp	r1, r0
10064d68:	d300      	bcc.n	10064d6c <GAT_att_db_find_by_def+0x34>
10064d6a:	4601      	mov	r1, r0
10064d6c:	b289      	uxth	r1, r1
10064d6e:	b2b2      	uxth	r2, r6
10064d70:	428a      	cmp	r2, r1
10064d72:	d80d      	bhi.n	10064d90 <GAT_att_db_find_by_def+0x58>
10064d74:	6e78      	ldr	r0, [r7, #100]	@ 0x64
10064d76:	00d3      	lsls	r3, r2, #3
10064d78:	5cc4      	ldrb	r4, [r0, r3]
10064d7a:	42ac      	cmp	r4, r5
10064d7c:	d104      	bne.n	10064d88 <GAT_att_db_find_by_def+0x50>
10064d7e:	18c0      	adds	r0, r0, r3
10064d80:	6843      	ldr	r3, [r0, #4]
10064d82:	9c02      	ldr	r4, [sp, #8]
10064d84:	42a3      	cmp	r3, r4
10064d86:	d005      	beq.n	10064d94 <GAT_att_db_find_by_def+0x5c>
10064d88:	1c76      	adds	r6, r6, #1
10064d8a:	e7f0      	b.n	10064d6e <GAT_att_db_find_by_def+0x36>
10064d8c:	4610      	mov	r0, r2
10064d8e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064d90:	9800      	ldr	r0, [sp, #0]
10064d92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064d94:	4903      	ldr	r1, [pc, #12]	@ (10064da4 <__arm_cp.8_1>)
10064d96:	428a      	cmp	r2, r1
10064d98:	d100      	bne.n	10064d9c <GAT_att_db_find_by_def+0x64>
10064d9a:	2000      	movs	r0, #0
10064d9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064d9e:	46c0      	nop			@ (mov r8, r8)

10064da0 <__arm_cp.8_0>:
10064da0:	20002420 	.word	0x20002420

10064da4 <__arm_cp.8_1>:
10064da4:	0000ffff 	.word	0x0000ffff

10064da8 <GAT_att_db_get_next>:
10064da8:	b580      	push	{r7, lr}
10064daa:	f7ff ff5f 	bl	10064c6c <GAT_att_db_get_att_idx>
10064dae:	4907      	ldr	r1, [pc, #28]	@ (10064dcc <__arm_cp.10_0>)
10064db0:	6809      	ldr	r1, [r1, #0]
10064db2:	2260      	movs	r2, #96	@ 0x60
10064db4:	5a8a      	ldrh	r2, [r1, r2]
10064db6:	1c40      	adds	r0, r0, #1
10064db8:	b280      	uxth	r0, r0
10064dba:	4290      	cmp	r0, r2
10064dbc:	d203      	bcs.n	10064dc6 <GAT_att_db_get_next+0x1e>
10064dbe:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064dc0:	00c0      	lsls	r0, r0, #3
10064dc2:	1808      	adds	r0, r1, r0
10064dc4:	bd80      	pop	{r7, pc}
10064dc6:	2000      	movs	r0, #0
10064dc8:	bd80      	pop	{r7, pc}
10064dca:	46c0      	nop			@ (mov r8, r8)

10064dcc <__arm_cp.10_0>:
10064dcc:	20002420 	.word	0x20002420

10064dd0 <GAT_att_db_get_last_group_handle>:
10064dd0:	b580      	push	{r7, lr}
10064dd2:	f000 f803 	bl	10064ddc <GAT_att_db_get_last_group_attribute>
10064dd6:	8840      	ldrh	r0, [r0, #2]
10064dd8:	bd80      	pop	{r7, pc}
	...

10064ddc <GAT_att_db_get_last_group_attribute>:
10064ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064dde:	7804      	ldrb	r4, [r0, #0]
10064de0:	2502      	movs	r5, #2
10064de2:	4621      	mov	r1, r4
10064de4:	4329      	orrs	r1, r5
10064de6:	2902      	cmp	r1, #2
10064de8:	d11e      	bne.n	10064e28 <GAT_att_db_get_last_group_attribute+0x4c>
10064dea:	f7ff ff3f 	bl	10064c6c <GAT_att_db_get_att_idx>
10064dee:	490f      	ldr	r1, [pc, #60]	@ (10064e2c <__arm_cp.12_0>)
10064df0:	6809      	ldr	r1, [r1, #0]
10064df2:	2260      	movs	r2, #96	@ 0x60
10064df4:	5a8b      	ldrh	r3, [r1, r2]
10064df6:	1c40      	adds	r0, r0, #1
10064df8:	b282      	uxth	r2, r0
10064dfa:	429a      	cmp	r2, r3
10064dfc:	d210      	bcs.n	10064e20 <GAT_att_db_get_last_group_attribute+0x44>
10064dfe:	2c00      	cmp	r4, #0
10064e00:	d008      	beq.n	10064e14 <GAT_att_db_get_last_group_attribute+0x38>
10064e02:	2c02      	cmp	r4, #2
10064e04:	d1f7      	bne.n	10064df6 <GAT_att_db_get_last_group_attribute+0x1a>
10064e06:	00d7      	lsls	r7, r2, #3
10064e08:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064e0a:	5df7      	ldrb	r7, [r6, r7]
10064e0c:	432f      	orrs	r7, r5
10064e0e:	2f02      	cmp	r7, #2
10064e10:	d1f1      	bne.n	10064df6 <GAT_att_db_get_last_group_attribute+0x1a>
10064e12:	e006      	b.n	10064e22 <GAT_att_db_get_last_group_attribute+0x46>
10064e14:	00d7      	lsls	r7, r2, #3
10064e16:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064e18:	5df7      	ldrb	r7, [r6, r7]
10064e1a:	2f00      	cmp	r7, #0
10064e1c:	d1eb      	bne.n	10064df6 <GAT_att_db_get_last_group_attribute+0x1a>
10064e1e:	e000      	b.n	10064e22 <GAT_att_db_get_last_group_attribute+0x46>
10064e20:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064e22:	00d0      	lsls	r0, r2, #3
10064e24:	1980      	adds	r0, r0, r6
10064e26:	3808      	subs	r0, #8
10064e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064e2a:	46c0      	nop			@ (mov r8, r8)

10064e2c <__arm_cp.12_0>:
10064e2c:	20002420 	.word	0x20002420

10064e30 <GAT_att_db_get_last_handle>:
10064e30:	4806      	ldr	r0, [pc, #24]	@ (10064e4c <__arm_cp.14_0>)
10064e32:	6800      	ldr	r0, [r0, #0]
10064e34:	2160      	movs	r1, #96	@ 0x60
10064e36:	5a41      	ldrh	r1, [r0, r1]
10064e38:	2900      	cmp	r1, #0
10064e3a:	d005      	beq.n	10064e48 <GAT_att_db_get_last_handle+0x18>
10064e3c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064e3e:	00c9      	lsls	r1, r1, #3
10064e40:	1808      	adds	r0, r1, r0
10064e42:	1f80      	subs	r0, r0, #6
10064e44:	8800      	ldrh	r0, [r0, #0]
10064e46:	4770      	bx	lr
10064e48:	2000      	movs	r0, #0
10064e4a:	4770      	bx	lr

10064e4c <__arm_cp.14_0>:
10064e4c:	20002420 	.word	0x20002420

10064e50 <GAT_att_db_rm_att_range>:
10064e50:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064e52:	460d      	mov	r5, r1
10064e54:	4604      	mov	r4, r0
10064e56:	f7ff ffeb 	bl	10064e30 <GAT_att_db_get_last_handle>
10064e5a:	2800      	cmp	r0, #0
10064e5c:	d034      	beq.n	10064ec8 <GAT_att_db_rm_att_range+0x78>
10064e5e:	42ac      	cmp	r4, r5
10064e60:	d832      	bhi.n	10064ec8 <GAT_att_db_rm_att_range+0x78>
10064e62:	4606      	mov	r6, r0
10064e64:	42a0      	cmp	r0, r4
10064e66:	d32f      	bcc.n	10064ec8 <GAT_att_db_rm_att_range+0x78>
10064e68:	4620      	mov	r0, r4
10064e6a:	f7ff ff25 	bl	10064cb8 <GAT_att_db_find_attr_idx_with_handle>
10064e6e:	4604      	mov	r4, r0
10064e70:	4816      	ldr	r0, [pc, #88]	@ (10064ecc <__arm_cp.16_0>)
10064e72:	4284      	cmp	r4, r0
10064e74:	d028      	beq.n	10064ec8 <GAT_att_db_rm_att_range+0x78>
10064e76:	42ae      	cmp	r6, r5
10064e78:	d300      	bcc.n	10064e7c <GAT_att_db_rm_att_range+0x2c>
10064e7a:	462e      	mov	r6, r5
10064e7c:	4630      	mov	r0, r6
10064e7e:	f7ff ff1b 	bl	10064cb8 <GAT_att_db_find_attr_idx_with_handle>
10064e82:	4913      	ldr	r1, [pc, #76]	@ (10064ed0 <__arm_cp.16_1>)
10064e84:	680f      	ldr	r7, [r1, #0]
10064e86:	2660      	movs	r6, #96	@ 0x60
10064e88:	5bb9      	ldrh	r1, [r7, r6]
10064e8a:	1e4a      	subs	r2, r1, #1
10064e8c:	4282      	cmp	r2, r0
10064e8e:	d917      	bls.n	10064ec0 <GAT_att_db_rm_att_range+0x70>
10064e90:	9001      	str	r0, [sp, #4]
10064e92:	4605      	mov	r5, r0
10064e94:	9402      	str	r4, [sp, #8]
10064e96:	b28b      	uxth	r3, r1
10064e98:	1c6d      	adds	r5, r5, #1
10064e9a:	b2aa      	uxth	r2, r5
10064e9c:	429a      	cmp	r2, r3
10064e9e:	d20d      	bcs.n	10064ebc <GAT_att_db_rm_att_range+0x6c>
10064ea0:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10064ea2:	b2a0      	uxth	r0, r4
10064ea4:	00c0      	lsls	r0, r0, #3
10064ea6:	1808      	adds	r0, r1, r0
10064ea8:	00d2      	lsls	r2, r2, #3
10064eaa:	1889      	adds	r1, r1, r2
10064eac:	2208      	movs	r2, #8
10064eae:	f7ed fdcb 	bl	10052a48 <BLEPLAT_MemCpy>
10064eb2:	4807      	ldr	r0, [pc, #28]	@ (10064ed0 <__arm_cp.16_1>)
10064eb4:	6807      	ldr	r7, [r0, #0]
10064eb6:	5bb9      	ldrh	r1, [r7, r6]
10064eb8:	1c64      	adds	r4, r4, #1
10064eba:	e7ec      	b.n	10064e96 <GAT_att_db_rm_att_range+0x46>
10064ebc:	9c02      	ldr	r4, [sp, #8]
10064ebe:	9801      	ldr	r0, [sp, #4]
10064ec0:	43c2      	mvns	r2, r0
10064ec2:	18a2      	adds	r2, r4, r2
10064ec4:	1851      	adds	r1, r2, r1
10064ec6:	53b9      	strh	r1, [r7, r6]
10064ec8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064eca:	46c0      	nop			@ (mov r8, r8)

10064ecc <__arm_cp.16_0>:
10064ecc:	0000ffff 	.word	0x0000ffff

10064ed0 <__arm_cp.16_1>:
10064ed0:	20002420 	.word	0x20002420

10064ed4 <GAT_att_db_find_last_attr_of_type>:
10064ed4:	b510      	push	{r4, lr}
10064ed6:	4909      	ldr	r1, [pc, #36]	@ (10064efc <__arm_cp.17_0>)
10064ed8:	680a      	ldr	r2, [r1, #0]
10064eda:	2160      	movs	r1, #96	@ 0x60
10064edc:	5a53      	ldrh	r3, [r2, r1]
10064ede:	0419      	lsls	r1, r3, #16
10064ee0:	d009      	beq.n	10064ef6 <GAT_att_db_find_last_attr_of_type+0x22>
10064ee2:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10064ee4:	b29c      	uxth	r4, r3
10064ee6:	00e4      	lsls	r4, r4, #3
10064ee8:	1861      	adds	r1, r4, r1
10064eea:	3908      	subs	r1, #8
10064eec:	780c      	ldrb	r4, [r1, #0]
10064eee:	1e5b      	subs	r3, r3, #1
10064ef0:	4284      	cmp	r4, r0
10064ef2:	d1f4      	bne.n	10064ede <GAT_att_db_find_last_attr_of_type+0xa>
10064ef4:	e000      	b.n	10064ef8 <GAT_att_db_find_last_attr_of_type+0x24>
10064ef6:	2100      	movs	r1, #0
10064ef8:	4608      	mov	r0, r1
10064efa:	bd10      	pop	{r4, pc}

10064efc <__arm_cp.17_0>:
10064efc:	20002420 	.word	0x20002420

10064f00 <GAT_att_db_reverse_find_attr_of_type>:
10064f00:	b510      	push	{r4, lr}
10064f02:	4604      	mov	r4, r0
10064f04:	4608      	mov	r0, r1
10064f06:	f7ff feff 	bl	10064d08 <GAT_att_db_find_attr_idx_from_handle>
10064f0a:	4908      	ldr	r1, [pc, #32]	@ (10064f2c <__arm_cp.18_0>)
10064f0c:	6809      	ldr	r1, [r1, #0]
10064f0e:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064f10:	b282      	uxth	r2, r0
10064f12:	00d2      	lsls	r2, r2, #3
10064f14:	5c8b      	ldrb	r3, [r1, r2]
10064f16:	42a3      	cmp	r3, r4
10064f18:	d005      	beq.n	10064f26 <GAT_att_db_reverse_find_attr_of_type+0x26>
10064f1a:	1e42      	subs	r2, r0, #1
10064f1c:	0400      	lsls	r0, r0, #16
10064f1e:	4610      	mov	r0, r2
10064f20:	d1f6      	bne.n	10064f10 <GAT_att_db_reverse_find_attr_of_type+0x10>
10064f22:	2000      	movs	r0, #0
10064f24:	bd10      	pop	{r4, pc}
10064f26:	1888      	adds	r0, r1, r2
10064f28:	bd10      	pop	{r4, pc}
10064f2a:	46c0      	nop			@ (mov r8, r8)

10064f2c <__arm_cp.18_0>:
10064f2c:	20002420 	.word	0x20002420

10064f30 <GAT_clt_init>:
10064f30:	b570      	push	{r4, r5, r6, lr}
10064f32:	4c11      	ldr	r4, [pc, #68]	@ (10064f78 <__arm_cp.0_0>)
10064f34:	7aa0      	ldrb	r0, [r4, #10]
10064f36:	2124      	movs	r1, #36	@ 0x24
10064f38:	f7fc f846 	bl	10060fc8 <csmem_mem_0_assign>
10064f3c:	490f      	ldr	r1, [pc, #60]	@ (10064f7c <__arm_cp.0_1>)
10064f3e:	680b      	ldr	r3, [r1, #0]
10064f40:	2200      	movs	r2, #0
10064f42:	461d      	mov	r5, r3
10064f44:	3550      	adds	r5, #80	@ 0x50
10064f46:	461e      	mov	r6, r3
10064f48:	3648      	adds	r6, #72	@ 0x48
10064f4a:	649a      	str	r2, [r3, #72]	@ 0x48
10064f4c:	64de      	str	r6, [r3, #76]	@ 0x4c
10064f4e:	651a      	str	r2, [r3, #80]	@ 0x50
10064f50:	655d      	str	r5, [r3, #84]	@ 0x54
10064f52:	7aa4      	ldrb	r4, [r4, #10]
10064f54:	2c00      	cmp	r4, #0
10064f56:	d00c      	beq.n	10064f72 <GAT_clt_init+0x42>
10064f58:	6202      	str	r2, [r0, #32]
10064f5a:	680b      	ldr	r3, [r1, #0]
10064f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10064f5e:	6018      	str	r0, [r3, #0]
10064f60:	2301      	movs	r3, #1
10064f62:	7003      	strb	r3, [r0, #0]
10064f64:	4605      	mov	r5, r0
10064f66:	3520      	adds	r5, #32
10064f68:	680b      	ldr	r3, [r1, #0]
10064f6a:	655d      	str	r5, [r3, #84]	@ 0x54
10064f6c:	3024      	adds	r0, #36	@ 0x24
10064f6e:	1e64      	subs	r4, r4, #1
10064f70:	e7f0      	b.n	10064f54 <GAT_clt_init+0x24>
10064f72:	659a      	str	r2, [r3, #88]	@ 0x58
10064f74:	bd70      	pop	{r4, r5, r6, pc}
10064f76:	46c0      	nop			@ (mov r8, r8)

10064f78 <__arm_cp.0_0>:
10064f78:	2000247c 	.word	0x2000247c

10064f7c <__arm_cp.0_1>:
10064f7c:	20002420 	.word	0x20002420

10064f80 <GAT_clt_connection>:
10064f80:	4770      	bx	lr
	...

10064f84 <GAT_clt_bearer_close>:
10064f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064f86:	460d      	mov	r5, r1
10064f88:	4604      	mov	r4, r0
10064f8a:	4e19      	ldr	r6, [pc, #100]	@ (10064ff0 <__arm_cp.2_0>)
10064f8c:	6837      	ldr	r7, [r6, #0]
10064f8e:	3748      	adds	r7, #72	@ 0x48
10064f90:	683f      	ldr	r7, [r7, #0]
10064f92:	2f00      	cmp	r7, #0
10064f94:	d010      	beq.n	10064fb8 <GAT_clt_bearer_close+0x34>
10064f96:	8878      	ldrh	r0, [r7, #2]
10064f98:	42a0      	cmp	r0, r4
10064f9a:	d10b      	bne.n	10064fb4 <GAT_clt_bearer_close+0x30>
10064f9c:	88b8      	ldrh	r0, [r7, #4]
10064f9e:	42a8      	cmp	r0, r5
10064fa0:	d108      	bne.n	10064fb4 <GAT_clt_bearer_close+0x30>
10064fa2:	7838      	ldrb	r0, [r7, #0]
10064fa4:	2118      	movs	r1, #24
10064fa6:	4301      	orrs	r1, r0
10064fa8:	7039      	strb	r1, [r7, #0]
10064faa:	200c      	movs	r0, #12
10064fac:	f7fd fde2 	bl	10062b74 <tsk_notify_idx>
10064fb0:	f7ec ff63 	bl	10051e7a <BLE_STACK_ProcessRequest>
10064fb4:	3720      	adds	r7, #32
10064fb6:	e7eb      	b.n	10064f90 <GAT_clt_bearer_close+0xc>
10064fb8:	2d04      	cmp	r5, #4
10064fba:	d117      	bne.n	10064fec <GAT_clt_bearer_close+0x68>
10064fbc:	6830      	ldr	r0, [r6, #0]
10064fbe:	6d81      	ldr	r1, [r0, #88]	@ 0x58
10064fc0:	460b      	mov	r3, r1
10064fc2:	2b00      	cmp	r3, #0
10064fc4:	d00b      	beq.n	10064fde <GAT_clt_bearer_close+0x5a>
10064fc6:	461a      	mov	r2, r3
10064fc8:	689d      	ldr	r5, [r3, #8]
10064fca:	2300      	movs	r3, #0
10064fcc:	2d00      	cmp	r5, #0
10064fce:	d0f8      	beq.n	10064fc2 <GAT_clt_bearer_close+0x3e>
10064fd0:	88ab      	ldrh	r3, [r5, #4]
10064fd2:	42a3      	cmp	r3, r4
10064fd4:	462b      	mov	r3, r5
10064fd6:	d1f4      	bne.n	10064fc2 <GAT_clt_bearer_close+0x3e>
10064fd8:	68ab      	ldr	r3, [r5, #8]
10064fda:	6093      	str	r3, [r2, #8]
10064fdc:	e7f1      	b.n	10064fc2 <GAT_clt_bearer_close+0x3e>
10064fde:	2900      	cmp	r1, #0
10064fe0:	d004      	beq.n	10064fec <GAT_clt_bearer_close+0x68>
10064fe2:	888a      	ldrh	r2, [r1, #4]
10064fe4:	42a2      	cmp	r2, r4
10064fe6:	d101      	bne.n	10064fec <GAT_clt_bearer_close+0x68>
10064fe8:	6889      	ldr	r1, [r1, #8]
10064fea:	6581      	str	r1, [r0, #88]	@ 0x58
10064fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064fee:	46c0      	nop			@ (mov r8, r8)

10064ff0 <__arm_cp.2_0>:
10064ff0:	20002420 	.word	0x20002420

10064ff4 <GAT_clt_proc_exec_tsk>:
10064ff4:	b580      	push	{r7, lr}
10064ff6:	4802      	ldr	r0, [pc, #8]	@ (10065000 <__arm_cp.3_0>)
10064ff8:	6800      	ldr	r0, [r0, #0]
10064ffa:	4780      	blx	r0
10064ffc:	bd80      	pop	{r7, pc}
10064ffe:	46c0      	nop			@ (mov r8, r8)

10065000 <__arm_cp.3_0>:
10065000:	200028a8 	.word	0x200028a8

10065004 <GAT_clt_rcv>:
10065004:	b5f0      	push	{r4, r5, r6, r7, lr}
10065006:	b095      	sub	sp, #84	@ 0x54
10065008:	4605      	mov	r5, r0
1006500a:	8804      	ldrh	r4, [r0, #0]
1006500c:	f7f4 fdcb 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10065010:	4601      	mov	r1, r0
10065012:	4620      	mov	r0, r4
10065014:	f000 fa6e 	bl	100654f4 <GAT_clt_get_proc_per_channel>
10065018:	2686      	movs	r6, #134	@ 0x86
1006501a:	2800      	cmp	r0, #0
1006501c:	d100      	bne.n	10065020 <GAT_clt_rcv+0x1c>
1006501e:	e208      	b.n	10065432 <GAT_clt_rcv+0x42e>
10065020:	4604      	mov	r4, r0
10065022:	882f      	ldrh	r7, [r5, #0]
10065024:	4628      	mov	r0, r5
10065026:	f7f4 fdbe 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
1006502a:	4601      	mov	r1, r0
1006502c:	4638      	mov	r0, r7
1006502e:	f7f1 ff2d 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
10065032:	9008      	str	r0, [sp, #32]
10065034:	7820      	ldrb	r0, [r4, #0]
10065036:	21fb      	movs	r1, #251	@ 0xfb
10065038:	4001      	ands	r1, r0
1006503a:	7021      	strb	r1, [r4, #0]
1006503c:	270c      	movs	r7, #12
1006503e:	4638      	mov	r0, r7
10065040:	f7fd fd98 	bl	10062b74 <tsk_notify_idx>
10065044:	f7ec ff19 	bl	10051e7a <BLE_STACK_ProcessRequest>
10065048:	4628      	mov	r0, r5
1006504a:	f000 fa65 	bl	10065518 <GAT_att_cmn_get_opcode>
1006504e:	2801      	cmp	r0, #1
10065050:	d107      	bne.n	10065062 <GAT_clt_rcv+0x5e>
10065052:	8860      	ldrh	r0, [r4, #2]
10065054:	f7f1 f804 	bl	10056060 <GAP_started_gatt_proc>
10065058:	2800      	cmp	r0, #0
1006505a:	d060      	beq.n	1006511e <GAT_clt_rcv+0x11a>
1006505c:	4620      	mov	r0, r4
1006505e:	f000 fa60 	bl	10065522 <GAT_clt_stop_proc>
10065062:	7820      	ldrb	r0, [r4, #0]
10065064:	2200      	movs	r2, #0
10065066:	0701      	lsls	r1, r0, #28
10065068:	d457      	bmi.n	1006511a <GAT_clt_rcv+0x116>
1006506a:	79a3      	ldrb	r3, [r4, #6]
1006506c:	1e59      	subs	r1, r3, #1
1006506e:	2911      	cmp	r1, #17
10065070:	d900      	bls.n	10065074 <GAT_clt_rcv+0x70>
10065072:	e1de      	b.n	10065432 <GAT_clt_rcv+0x42e>
10065074:	9207      	str	r2, [sp, #28]
10065076:	0049      	lsls	r1, r1, #1
10065078:	4479      	add	r1, pc
1006507a:	8889      	ldrh	r1, [r1, #4]
1006507c:	0049      	lsls	r1, r1, #1
1006507e:	448f      	add	pc, r1
10065080:	010200c5 	.word	0x010200c5
10065084:	0099010f 	.word	0x0099010f
10065088:	011f0099 	.word	0x011f0099
1006508c:	01750164 	.word	0x01750164
10065090:	01b9017c 	.word	0x01b9017c
10065094:	00a600a6 	.word	0x00a600a6
10065098:	001100b8 	.word	0x001100b8
1006509c:	001100b0 	.word	0x001100b0
100650a0:	00b00011 	.word	0x00b00011
100650a4:	06c0      	lsls	r0, r0, #27
100650a6:	d500      	bpl.n	100650aa <GAT_clt_rcv+0xa6>
100650a8:	e0a7      	b.n	100651fa <GAT_clt_rcv+0x1f6>
100650aa:	88a2      	ldrh	r2, [r4, #4]
100650ac:	8861      	ldrh	r1, [r4, #2]
100650ae:	200a      	movs	r0, #10
100650b0:	462b      	mov	r3, r5
100650b2:	f7fe ffbf 	bl	10064034 <aci_att_clt_prepare_write_resp_event_push_noinline>
100650b6:	2800      	cmp	r0, #0
100650b8:	d000      	beq.n	100650bc <GAT_clt_rcv+0xb8>
100650ba:	e1b4      	b.n	10065426 <GAT_clt_rcv+0x422>
100650bc:	79a0      	ldrb	r0, [r4, #6]
100650be:	2811      	cmp	r0, #17
100650c0:	d100      	bne.n	100650c4 <GAT_clt_rcv+0xc0>
100650c2:	e1b2      	b.n	1006542a <GAT_clt_rcv+0x426>
100650c4:	7a63      	ldrb	r3, [r4, #9]
100650c6:	6921      	ldr	r1, [r4, #16]
100650c8:	9108      	str	r1, [sp, #32]
100650ca:	2810      	cmp	r0, #16
100650cc:	d000      	beq.n	100650d0 <GAT_clt_rcv+0xcc>
100650ce:	e1d0      	b.n	10065472 <GAT_clt_rcv+0x46e>
100650d0:	9306      	str	r3, [sp, #24]
100650d2:	89a8      	ldrh	r0, [r5, #12]
100650d4:	1c40      	adds	r0, r0, #1
100650d6:	b281      	uxth	r1, r0
100650d8:	4628      	mov	r0, r5
100650da:	f7f0 f872 	bl	100551c2 <ACL_pkt_read_16b>
100650de:	9005      	str	r0, [sp, #20]
100650e0:	89a8      	ldrh	r0, [r5, #12]
100650e2:	1cc0      	adds	r0, r0, #3
100650e4:	b281      	uxth	r1, r0
100650e6:	4628      	mov	r0, r5
100650e8:	f7f0 f86b 	bl	100551c2 <ACL_pkt_read_16b>
100650ec:	2600      	movs	r6, #0
100650ee:	89a2      	ldrh	r2, [r4, #12]
100650f0:	8869      	ldrh	r1, [r5, #2]
100650f2:	1f49      	subs	r1, r1, #5
100650f4:	4291      	cmp	r1, r2
100650f6:	9004      	str	r0, [sp, #16]
100650f8:	d000      	beq.n	100650fc <GAT_clt_rcv+0xf8>
100650fa:	e1cf      	b.n	1006549c <GAT_clt_rcv+0x498>
100650fc:	4638      	mov	r0, r7
100650fe:	9906      	ldr	r1, [sp, #24]
10065100:	4348      	muls	r0, r1
10065102:	9a08      	ldr	r2, [sp, #32]
10065104:	1810      	adds	r0, r2, r0
10065106:	6880      	ldr	r0, [r0, #8]
10065108:	8961      	ldrh	r1, [r4, #10]
1006510a:	1841      	adds	r1, r0, r1
1006510c:	4628      	mov	r0, r5
1006510e:	4615      	mov	r5, r2
10065110:	f7ff fd20 	bl	10064b54 <GAT_att_clt_prep_wr_cmp_data>
10065114:	9b06      	ldr	r3, [sp, #24]
10065116:	9003      	str	r0, [sp, #12]
10065118:	e1c4      	b.n	100654a4 <GAT_clt_rcv+0x4a0>
1006511a:	4616      	mov	r6, r2
1006511c:	e189      	b.n	10065432 <GAT_clt_rcv+0x42e>
1006511e:	a909      	add	r1, sp, #36	@ 0x24
10065120:	aa0f      	add	r2, sp, #60	@ 0x3c
10065122:	ab0e      	add	r3, sp, #56	@ 0x38
10065124:	4628      	mov	r0, r5
10065126:	f7ff fcb1 	bl	10064a8c <GAT_att_clt_parse_error_resp>
1006512a:	2800      	cmp	r0, #0
1006512c:	d02b      	beq.n	10065186 <GAT_clt_rcv+0x182>
1006512e:	4628      	mov	r0, r5
10065130:	f7f0 f822 	bl	10055178 <ACL_pkt_release>
10065134:	a80e      	add	r0, sp, #56	@ 0x38
10065136:	7800      	ldrb	r0, [r0, #0]
10065138:	2812      	cmp	r0, #18
1006513a:	d108      	bne.n	1006514e <GAT_clt_rcv+0x14a>
1006513c:	8860      	ldrh	r0, [r4, #2]
1006513e:	2104      	movs	r1, #4
10065140:	f7f1 fea4 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
10065144:	8881      	ldrh	r1, [r0, #4]
10065146:	2201      	movs	r2, #1
10065148:	0252      	lsls	r2, r2, #9
1006514a:	430a      	orrs	r2, r1
1006514c:	8082      	strh	r2, [r0, #4]
1006514e:	79a0      	ldrb	r0, [r4, #6]
10065150:	2801      	cmp	r0, #1
10065152:	d104      	bne.n	1006515e <GAT_clt_rcv+0x15a>
10065154:	9b08      	ldr	r3, [sp, #32]
10065156:	8899      	ldrh	r1, [r3, #4]
10065158:	2204      	movs	r2, #4
1006515a:	4391      	bics	r1, r2
1006515c:	8099      	strh	r1, [r3, #4]
1006515e:	a90e      	add	r1, sp, #56	@ 0x38
10065160:	7809      	ldrb	r1, [r1, #0]
10065162:	290a      	cmp	r1, #10
10065164:	d008      	beq.n	10065178 <GAT_clt_rcv+0x174>
10065166:	2907      	cmp	r1, #7
10065168:	d102      	bne.n	10065170 <GAT_clt_rcv+0x16c>
1006516a:	280a      	cmp	r0, #10
1006516c:	d100      	bne.n	10065170 <GAT_clt_rcv+0x16c>
1006516e:	e775      	b.n	1006505c <GAT_clt_rcv+0x58>
10065170:	7821      	ldrb	r1, [r4, #0]
10065172:	2210      	movs	r2, #16
10065174:	430a      	orrs	r2, r1
10065176:	7022      	strb	r2, [r4, #0]
10065178:	280e      	cmp	r0, #14
1006517a:	d100      	bne.n	1006517e <GAT_clt_rcv+0x17a>
1006517c:	e771      	b.n	10065062 <GAT_clt_rcv+0x5e>
1006517e:	2810      	cmp	r0, #16
10065180:	d100      	bne.n	10065184 <GAT_clt_rcv+0x180>
10065182:	e76e      	b.n	10065062 <GAT_clt_rcv+0x5e>
10065184:	e76a      	b.n	1006505c <GAT_clt_rcv+0x58>
10065186:	a809      	add	r0, sp, #36	@ 0x24
10065188:	7800      	ldrb	r0, [r0, #0]
1006518a:	9007      	str	r0, [sp, #28]
1006518c:	88a3      	ldrh	r3, [r4, #4]
1006518e:	8862      	ldrh	r2, [r4, #2]
10065190:	a80f      	add	r0, sp, #60	@ 0x3c
10065192:	8800      	ldrh	r0, [r0, #0]
10065194:	4621      	mov	r1, r4
10065196:	ac0e      	add	r4, sp, #56	@ 0x38
10065198:	7824      	ldrb	r4, [r4, #0]
1006519a:	9000      	str	r0, [sp, #0]
1006519c:	9401      	str	r4, [sp, #4]
1006519e:	460c      	mov	r4, r1
100651a0:	2002      	movs	r0, #2
100651a2:	4611      	mov	r1, r2
100651a4:	461a      	mov	r2, r3
100651a6:	9b07      	ldr	r3, [sp, #28]
100651a8:	f7fe fc10 	bl	100639cc <aci_gatt_clt_error_resp_event_push_noinline>
100651ac:	2800      	cmp	r0, #0
100651ae:	d0be      	beq.n	1006512e <GAT_clt_rcv+0x12a>
100651b0:	4606      	mov	r6, r0
100651b2:	e13e      	b.n	10065432 <GAT_clt_rcv+0x42e>
100651b4:	88a2      	ldrh	r2, [r4, #4]
100651b6:	8861      	ldrh	r1, [r4, #2]
100651b8:	200a      	movs	r0, #10
100651ba:	462b      	mov	r3, r5
100651bc:	f7fe fe40 	bl	10063e40 <aci_att_clt_read_by_type_resp_event_push_noinline>
100651c0:	2800      	cmp	r0, #0
100651c2:	d000      	beq.n	100651c6 <GAT_clt_rcv+0x1c2>
100651c4:	e12f      	b.n	10065426 <GAT_clt_rcv+0x422>
100651c6:	4628      	mov	r0, r5
100651c8:	f7ff fc7a 	bl	10064ac0 <GAT_att_clt_read_type_get_last_attr_h>
100651cc:	e0c8      	b.n	10065360 <GAT_clt_rcv+0x35c>
100651ce:	88a2      	ldrh	r2, [r4, #4]
100651d0:	8861      	ldrh	r1, [r4, #2]
100651d2:	200a      	movs	r0, #10
100651d4:	2b0b      	cmp	r3, #11
100651d6:	d000      	beq.n	100651da <GAT_clt_rcv+0x1d6>
100651d8:	e120      	b.n	1006541c <GAT_clt_rcv+0x418>
100651da:	462b      	mov	r3, r5
100651dc:	f7fe fec6 	bl	10063f6c <aci_att_clt_read_multiple_resp_event_push_noinline>
100651e0:	e11f      	b.n	10065422 <GAT_clt_rcv+0x41e>
100651e2:	88a2      	ldrh	r2, [r4, #4]
100651e4:	8861      	ldrh	r1, [r4, #2]
100651e6:	2002      	movs	r0, #2
100651e8:	f7fe ff56 	bl	10064098 <aci_att_clt_exec_write_resp_event_push_noinline>
100651ec:	2800      	cmp	r0, #0
100651ee:	d000      	beq.n	100651f2 <GAT_clt_rcv+0x1ee>
100651f0:	e119      	b.n	10065426 <GAT_clt_rcv+0x422>
100651f2:	4628      	mov	r0, r5
100651f4:	f7ef ffc0 	bl	10055178 <ACL_pkt_release>
100651f8:	e117      	b.n	1006542a <GAT_clt_rcv+0x426>
100651fa:	8960      	ldrh	r0, [r4, #10]
100651fc:	2800      	cmp	r0, #0
100651fe:	d100      	bne.n	10065202 <GAT_clt_rcv+0x1fe>
10065200:	e113      	b.n	1006542a <GAT_clt_rcv+0x426>
10065202:	2600      	movs	r6, #0
10065204:	7226      	strb	r6, [r4, #8]
10065206:	200f      	movs	r0, #15
10065208:	71a0      	strb	r0, [r4, #6]
1006520a:	e112      	b.n	10065432 <GAT_clt_rcv+0x42e>
1006520c:	89a8      	ldrh	r0, [r5, #12]
1006520e:	1c40      	adds	r0, r0, #1
10065210:	b281      	uxth	r1, r0
10065212:	4628      	mov	r0, r5
10065214:	f7ef ffd5 	bl	100551c2 <ACL_pkt_read_16b>
10065218:	4606      	mov	r6, r0
1006521a:	2817      	cmp	r0, #23
1006521c:	d800      	bhi.n	10065220 <GAT_clt_rcv+0x21c>
1006521e:	2617      	movs	r6, #23
10065220:	48b3      	ldr	r0, [pc, #716]	@ (100654f0 <__arm_cp.4_3>)
10065222:	8a00      	ldrh	r0, [r0, #16]
10065224:	4286      	cmp	r6, r0
10065226:	9f08      	ldr	r7, [sp, #32]
10065228:	d300      	bcc.n	1006522c <GAT_clt_rcv+0x228>
1006522a:	4606      	mov	r6, r0
1006522c:	88b8      	ldrh	r0, [r7, #4]
1006522e:	0700      	lsls	r0, r0, #28
10065230:	d514      	bpl.n	1006525c <GAT_clt_rcv+0x258>
10065232:	88f8      	ldrh	r0, [r7, #6]
10065234:	42b0      	cmp	r0, r6
10065236:	d011      	beq.n	1006525c <GAT_clt_rcv+0x258>
10065238:	463b      	mov	r3, r7
1006523a:	3308      	adds	r3, #8
1006523c:	2042      	movs	r0, #66	@ 0x42
1006523e:	2103      	movs	r1, #3
10065240:	2202      	movs	r2, #2
10065242:	f7ff f88d 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
10065246:	2800      	cmp	r0, #0
10065248:	d000      	beq.n	1006524c <GAT_clt_rcv+0x248>
1006524a:	e0ec      	b.n	10065426 <GAT_clt_rcv+0x422>
1006524c:	7820      	ldrb	r0, [r4, #0]
1006524e:	2110      	movs	r1, #16
10065250:	4301      	orrs	r1, r0
10065252:	7021      	strb	r1, [r4, #0]
10065254:	88b8      	ldrh	r0, [r7, #4]
10065256:	2108      	movs	r1, #8
10065258:	4388      	bics	r0, r1
1006525a:	80b8      	strh	r0, [r7, #4]
1006525c:	7820      	ldrb	r0, [r4, #0]
1006525e:	06c0      	lsls	r0, r0, #27
10065260:	d500      	bpl.n	10065264 <GAT_clt_rcv+0x260>
10065262:	88fe      	ldrh	r6, [r7, #6]
10065264:	8861      	ldrh	r1, [r4, #2]
10065266:	2002      	movs	r0, #2
10065268:	4632      	mov	r2, r6
1006526a:	f7fe fd49 	bl	10063d00 <aci_att_exchange_mtu_resp_event_push_noinline>
1006526e:	2800      	cmp	r0, #0
10065270:	d000      	beq.n	10065274 <GAT_clt_rcv+0x270>
10065272:	e0d8      	b.n	10065426 <GAT_clt_rcv+0x422>
10065274:	80fe      	strh	r6, [r7, #6]
10065276:	88b8      	ldrh	r0, [r7, #4]
10065278:	2108      	movs	r1, #8
1006527a:	4301      	orrs	r1, r0
1006527c:	2004      	movs	r0, #4
1006527e:	4381      	bics	r1, r0
10065280:	80b9      	strh	r1, [r7, #4]
10065282:	4620      	mov	r0, r4
10065284:	e0dc      	b.n	10065440 <GAT_clt_rcv+0x43c>
10065286:	88a2      	ldrh	r2, [r4, #4]
10065288:	8861      	ldrh	r1, [r4, #2]
1006528a:	200a      	movs	r0, #10
1006528c:	462b      	mov	r3, r5
1006528e:	f7fe fe9f 	bl	10063fd0 <aci_att_clt_read_by_group_type_resp_event_push_noinline>
10065292:	2800      	cmp	r0, #0
10065294:	d000      	beq.n	10065298 <GAT_clt_rcv+0x294>
10065296:	e0c6      	b.n	10065426 <GAT_clt_rcv+0x422>
10065298:	4628      	mov	r0, r5
1006529a:	f7ff fbc4 	bl	10064a26 <GAT_att_clt_read_grp_type_get_last_attr_h>
1006529e:	e00b      	b.n	100652b8 <GAT_clt_rcv+0x2b4>
100652a0:	88a2      	ldrh	r2, [r4, #4]
100652a2:	8861      	ldrh	r1, [r4, #2]
100652a4:	200a      	movs	r0, #10
100652a6:	462b      	mov	r3, r5
100652a8:	f7fe fd98 	bl	10063ddc <aci_att_clt_find_by_type_value_resp_event_push_noinline>
100652ac:	2800      	cmp	r0, #0
100652ae:	d000      	beq.n	100652b2 <GAT_clt_rcv+0x2ae>
100652b0:	e0b9      	b.n	10065426 <GAT_clt_rcv+0x422>
100652b2:	4628      	mov	r0, r5
100652b4:	f7ff fbdd 	bl	10064a72 <GAT_att_clt_find_type_val_get_last_attr_h>
100652b8:	498c      	ldr	r1, [pc, #560]	@ (100654ec <__arm_cp.4_2>)
100652ba:	4288      	cmp	r0, r1
100652bc:	d153      	bne.n	10065366 <GAT_clt_rcv+0x362>
100652be:	e0b4      	b.n	1006542a <GAT_clt_rcv+0x426>
100652c0:	4628      	mov	r0, r5
100652c2:	f000 fa08 	bl	100656d6 <GAT_att_clt_read_type_get_len>
100652c6:	9008      	str	r0, [sp, #32]
100652c8:	8960      	ldrh	r0, [r4, #10]
100652ca:	a90e      	add	r1, sp, #56	@ 0x38
100652cc:	8008      	strh	r0, [r1, #0]
100652ce:	4620      	mov	r0, r4
100652d0:	300c      	adds	r0, #12
100652d2:	9007      	str	r0, [sp, #28]
100652d4:	a809      	add	r0, sp, #36	@ 0x24
100652d6:	300c      	adds	r0, #12
100652d8:	9005      	str	r0, [sp, #20]
100652da:	a80f      	add	r0, sp, #60	@ 0x3c
100652dc:	1d40      	adds	r0, r0, #5
100652de:	9006      	str	r0, [sp, #24]
100652e0:	2600      	movs	r6, #0
100652e2:	b2f7      	uxtb	r7, r6
100652e4:	aa0f      	add	r2, sp, #60	@ 0x3c
100652e6:	4628      	mov	r0, r5
100652e8:	4639      	mov	r1, r7
100652ea:	f7ff fbfe 	bl	10064aea <GAT_att_clt_read_type_get_data>
100652ee:	2800      	cmp	r0, #0
100652f0:	d000      	beq.n	100652f4 <GAT_clt_rcv+0x2f0>
100652f2:	e0a1      	b.n	10065438 <GAT_clt_rcv+0x434>
100652f4:	9808      	ldr	r0, [sp, #32]
100652f6:	2807      	cmp	r0, #7
100652f8:	d105      	bne.n	10065306 <GAT_clt_rcv+0x302>
100652fa:	a809      	add	r0, sp, #36	@ 0x24
100652fc:	2110      	movs	r1, #16
100652fe:	7401      	strb	r1, [r0, #16]
10065300:	2202      	movs	r2, #2
10065302:	9805      	ldr	r0, [sp, #20]
10065304:	e003      	b.n	1006530e <GAT_clt_rcv+0x30a>
10065306:	a809      	add	r0, sp, #36	@ 0x24
10065308:	2180      	movs	r1, #128	@ 0x80
1006530a:	7401      	strb	r1, [r0, #16]
1006530c:	2210      	movs	r2, #16
1006530e:	9906      	ldr	r1, [sp, #24]
10065310:	f7ed fb9a 	bl	10052a48 <BLEPLAT_MemCpy>
10065314:	a80e      	add	r0, sp, #56	@ 0x38
10065316:	a90f      	add	r1, sp, #60	@ 0x3c
10065318:	2202      	movs	r2, #2
1006531a:	f7ed fb95 	bl	10052a48 <BLEPLAT_MemCpy>
1006531e:	a809      	add	r0, sp, #36	@ 0x24
10065320:	9907      	ldr	r1, [sp, #28]
10065322:	f7fd fdcf 	bl	10062ec4 <UUID_cmp_128bits>
10065326:	2800      	cmp	r0, #0
10065328:	d10d      	bne.n	10065346 <GAT_clt_rcv+0x342>
1006532a:	88a2      	ldrh	r2, [r4, #4]
1006532c:	8861      	ldrh	r1, [r4, #2]
1006532e:	9808      	ldr	r0, [sp, #32]
10065330:	9000      	str	r0, [sp, #0]
10065332:	9501      	str	r5, [sp, #4]
10065334:	4347      	muls	r7, r0
10065336:	1cb8      	adds	r0, r7, #2
10065338:	b283      	uxth	r3, r0
1006533a:	2002      	movs	r0, #2
1006533c:	f7fe fb8c 	bl	10063a58 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10065340:	2800      	cmp	r0, #0
10065342:	d000      	beq.n	10065346 <GAT_clt_rcv+0x342>
10065344:	e082      	b.n	1006544c <GAT_clt_rcv+0x448>
10065346:	1c76      	adds	r6, r6, #1
10065348:	e7cb      	b.n	100652e2 <GAT_clt_rcv+0x2de>
1006534a:	88a2      	ldrh	r2, [r4, #4]
1006534c:	8861      	ldrh	r1, [r4, #2]
1006534e:	200a      	movs	r0, #10
10065350:	462b      	mov	r3, r5
10065352:	f7fe fd11 	bl	10063d78 <aci_att_clt_find_info_resp_event_push_noinline>
10065356:	2800      	cmp	r0, #0
10065358:	d165      	bne.n	10065426 <GAT_clt_rcv+0x422>
1006535a:	4628      	mov	r0, r5
1006535c:	f7ff fbe0 	bl	10064b20 <GAT_att_clt_find_info_get_last_attr_h>
10065360:	8961      	ldrh	r1, [r4, #10]
10065362:	4288      	cmp	r0, r1
10065364:	d261      	bcs.n	1006542a <GAT_clt_rcv+0x426>
10065366:	1c40      	adds	r0, r0, #1
10065368:	8120      	strh	r0, [r4, #8]
1006536a:	e061      	b.n	10065430 <GAT_clt_rcv+0x42c>
1006536c:	88a2      	ldrh	r2, [r4, #4]
1006536e:	8861      	ldrh	r1, [r4, #2]
10065370:	200a      	movs	r0, #10
10065372:	462b      	mov	r3, r5
10065374:	f7fe fd96 	bl	10063ea4 <aci_att_clt_read_resp_event_push_noinline>
10065378:	e053      	b.n	10065422 <GAT_clt_rcv+0x41e>
1006537a:	4628      	mov	r0, r5
1006537c:	f000 f9ab 	bl	100656d6 <GAT_att_clt_read_type_get_len>
10065380:	4606      	mov	r6, r0
10065382:	9406      	str	r4, [sp, #24]
10065384:	8860      	ldrh	r0, [r4, #2]
10065386:	f7f0 fe6b 	bl	10056060 <GAP_started_gatt_proc>
1006538a:	9008      	str	r0, [sp, #32]
1006538c:	2402      	movs	r4, #2
1006538e:	8868      	ldrh	r0, [r5, #2]
10065390:	b2a3      	uxth	r3, r4
10065392:	4283      	cmp	r3, r0
10065394:	d253      	bcs.n	1006543e <GAT_clt_rcv+0x43a>
10065396:	9808      	ldr	r0, [sp, #32]
10065398:	2801      	cmp	r0, #1
1006539a:	d10e      	bne.n	100653ba <GAT_clt_rcv+0x3b6>
1006539c:	89a8      	ldrh	r0, [r5, #12]
1006539e:	1900      	adds	r0, r0, r4
100653a0:	b281      	uxth	r1, r0
100653a2:	af0f      	add	r7, sp, #60	@ 0x3c
100653a4:	4628      	mov	r0, r5
100653a6:	4632      	mov	r2, r6
100653a8:	463b      	mov	r3, r7
100653aa:	f7ef ff01 	bl	100551b0 <ACL_pkt_read>
100653ae:	205c      	movs	r0, #92	@ 0x5c
100653b0:	4631      	mov	r1, r6
100653b2:	463a      	mov	r2, r7
100653b4:	f7f0 fff0 	bl	10056398 <GAP_internal_evt_handler>
100653b8:	e01a      	b.n	100653f0 <GAT_clt_rcv+0x3ec>
100653ba:	9f06      	ldr	r7, [sp, #24]
100653bc:	88ba      	ldrh	r2, [r7, #4]
100653be:	8879      	ldrh	r1, [r7, #2]
100653c0:	9600      	str	r6, [sp, #0]
100653c2:	9501      	str	r5, [sp, #4]
100653c4:	2002      	movs	r0, #2
100653c6:	f7fe fb47 	bl	10063a58 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
100653ca:	2800      	cmp	r0, #0
100653cc:	d12b      	bne.n	10065426 <GAT_clt_rcv+0x422>
100653ce:	7f38      	ldrb	r0, [r7, #28]
100653d0:	2810      	cmp	r0, #16
100653d2:	d10d      	bne.n	100653f0 <GAT_clt_rcv+0x3ec>
100653d4:	9806      	ldr	r0, [sp, #24]
100653d6:	8b00      	ldrh	r0, [r0, #24]
100653d8:	4942      	ldr	r1, [pc, #264]	@ (100654e4 <__arm_cp.4_0>)
100653da:	4288      	cmp	r0, r1
100653dc:	d108      	bne.n	100653f0 <GAT_clt_rcv+0x3ec>
100653de:	9806      	ldr	r0, [sp, #24]
100653e0:	8840      	ldrh	r0, [r0, #2]
100653e2:	2104      	movs	r1, #4
100653e4:	f7f1 fd52 	bl	10056e8c <GAT_att_cmn_get_channel_descr_p>
100653e8:	8881      	ldrh	r1, [r0, #4]
100653ea:	4a3f      	ldr	r2, [pc, #252]	@ (100654e8 <__arm_cp.4_1>)
100653ec:	4011      	ands	r1, r2
100653ee:	8081      	strh	r1, [r0, #4]
100653f0:	19a4      	adds	r4, r4, r6
100653f2:	e7cc      	b.n	1006538e <GAT_clt_rcv+0x38a>
100653f4:	88a2      	ldrh	r2, [r4, #4]
100653f6:	8861      	ldrh	r1, [r4, #2]
100653f8:	200a      	movs	r0, #10
100653fa:	462b      	mov	r3, r5
100653fc:	f7fe fd84 	bl	10063f08 <aci_att_clt_read_blob_resp_event_push_noinline>
10065400:	2800      	cmp	r0, #0
10065402:	d110      	bne.n	10065426 <GAT_clt_rcv+0x422>
10065404:	9808      	ldr	r0, [sp, #32]
10065406:	88c0      	ldrh	r0, [r0, #6]
10065408:	1e41      	subs	r1, r0, #1
1006540a:	8868      	ldrh	r0, [r5, #2]
1006540c:	1e40      	subs	r0, r0, #1
1006540e:	b282      	uxth	r2, r0
10065410:	4291      	cmp	r1, r2
10065412:	d80a      	bhi.n	1006542a <GAT_clt_rcv+0x426>
10065414:	8961      	ldrh	r1, [r4, #10]
10065416:	1808      	adds	r0, r1, r0
10065418:	8160      	strh	r0, [r4, #10]
1006541a:	e009      	b.n	10065430 <GAT_clt_rcv+0x42c>
1006541c:	462b      	mov	r3, r5
1006541e:	f7fe fed9 	bl	100641d4 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>
10065422:	2800      	cmp	r0, #0
10065424:	d001      	beq.n	1006542a <GAT_clt_rcv+0x426>
10065426:	2684      	movs	r6, #132	@ 0x84
10065428:	e003      	b.n	10065432 <GAT_clt_rcv+0x42e>
1006542a:	4620      	mov	r0, r4
1006542c:	f000 f879 	bl	10065522 <GAT_clt_stop_proc>
10065430:	9e07      	ldr	r6, [sp, #28]
10065432:	4630      	mov	r0, r6
10065434:	b015      	add	sp, #84	@ 0x54
10065436:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065438:	a80e      	add	r0, sp, #56	@ 0x38
1006543a:	8800      	ldrh	r0, [r0, #0]
1006543c:	e00a      	b.n	10065454 <GAT_clt_rcv+0x450>
1006543e:	9806      	ldr	r0, [sp, #24]
10065440:	f000 f86f 	bl	10065522 <GAT_clt_stop_proc>
10065444:	4628      	mov	r0, r5
10065446:	f7ef fe97 	bl	10055178 <ACL_pkt_release>
1006544a:	e7f1      	b.n	10065430 <GAT_clt_rcv+0x42c>
1006544c:	980e      	ldr	r0, [sp, #56]	@ 0x38
1006544e:	1e40      	subs	r0, r0, #1
10065450:	a90e      	add	r1, sp, #56	@ 0x38
10065452:	8008      	strh	r0, [r1, #0]
10065454:	8961      	ldrh	r1, [r4, #10]
10065456:	b282      	uxth	r2, r0
10065458:	428a      	cmp	r2, r1
1006545a:	d202      	bcs.n	10065462 <GAT_clt_rcv+0x45e>
1006545c:	1c40      	adds	r0, r0, #1
1006545e:	8120      	strh	r0, [r4, #8]
10065460:	e002      	b.n	10065468 <GAT_clt_rcv+0x464>
10065462:	4620      	mov	r0, r4
10065464:	f000 f85d 	bl	10065522 <GAT_clt_stop_proc>
10065468:	4628      	mov	r0, r5
1006546a:	f7ef fe85 	bl	10055178 <ACL_pkt_release>
1006546e:	2600      	movs	r6, #0
10065470:	e7df      	b.n	10065432 <GAT_clt_rcv+0x42e>
10065472:	8961      	ldrh	r1, [r4, #10]
10065474:	9a08      	ldr	r2, [sp, #32]
10065476:	89a0      	ldrh	r0, [r4, #12]
10065478:	1840      	adds	r0, r0, r1
1006547a:	8160      	strh	r0, [r4, #10]
1006547c:	b280      	uxth	r0, r0
1006547e:	435f      	muls	r7, r3
10065480:	19d1      	adds	r1, r2, r7
10065482:	8889      	ldrh	r1, [r1, #4]
10065484:	4288      	cmp	r0, r1
10065486:	d1d3      	bne.n	10065430 <GAT_clt_rcv+0x42c>
10065488:	7a20      	ldrb	r0, [r4, #8]
1006548a:	1e40      	subs	r0, r0, #1
1006548c:	4298      	cmp	r0, r3
1006548e:	d924      	bls.n	100654da <GAT_clt_rcv+0x4d6>
10065490:	2600      	movs	r6, #0
10065492:	8166      	strh	r6, [r4, #10]
10065494:	7a60      	ldrb	r0, [r4, #9]
10065496:	1c40      	adds	r0, r0, #1
10065498:	7260      	strb	r0, [r4, #9]
1006549a:	e7ca      	b.n	10065432 <GAT_clt_rcv+0x42e>
1006549c:	43f0      	mvns	r0, r6
1006549e:	9003      	str	r0, [sp, #12]
100654a0:	9b06      	ldr	r3, [sp, #24]
100654a2:	9d08      	ldr	r5, [sp, #32]
100654a4:	4639      	mov	r1, r7
100654a6:	4359      	muls	r1, r3
100654a8:	5a6a      	ldrh	r2, [r5, r1]
100654aa:	4628      	mov	r0, r5
100654ac:	9d05      	ldr	r5, [sp, #20]
100654ae:	4295      	cmp	r5, r2
100654b0:	d10b      	bne.n	100654ca <GAT_clt_rcv+0x4c6>
100654b2:	4602      	mov	r2, r0
100654b4:	1841      	adds	r1, r0, r1
100654b6:	884a      	ldrh	r2, [r1, #2]
100654b8:	8961      	ldrh	r1, [r4, #10]
100654ba:	188a      	adds	r2, r1, r2
100654bc:	9d04      	ldr	r5, [sp, #16]
100654be:	42aa      	cmp	r2, r5
100654c0:	d103      	bne.n	100654ca <GAT_clt_rcv+0x4c6>
100654c2:	4602      	mov	r2, r0
100654c4:	9803      	ldr	r0, [sp, #12]
100654c6:	2800      	cmp	r0, #0
100654c8:	d0d5      	beq.n	10065476 <GAT_clt_rcv+0x472>
100654ca:	7226      	strb	r6, [r4, #8]
100654cc:	200f      	movs	r0, #15
100654ce:	71a0      	strb	r0, [r4, #6]
100654d0:	7820      	ldrb	r0, [r4, #0]
100654d2:	2110      	movs	r1, #16
100654d4:	4301      	orrs	r1, r0
100654d6:	7021      	strb	r1, [r4, #0]
100654d8:	e7ab      	b.n	10065432 <GAT_clt_rcv+0x42e>
100654da:	2001      	movs	r0, #1
100654dc:	7220      	strb	r0, [r4, #8]
100654de:	200f      	movs	r0, #15
100654e0:	71a0      	strb	r0, [r4, #6]
100654e2:	e7a5      	b.n	10065430 <GAT_clt_rcv+0x42c>

100654e4 <__arm_cp.4_0>:
100654e4:	00002b2a 	.word	0x00002b2a

100654e8 <__arm_cp.4_1>:
100654e8:	0000fdff 	.word	0x0000fdff

100654ec <__arm_cp.4_2>:
100654ec:	0000ffff 	.word	0x0000ffff

100654f0 <__arm_cp.4_3>:
100654f0:	2000247c 	.word	0x2000247c

100654f4 <GAT_clt_get_proc_per_channel>:
100654f4:	4a07      	ldr	r2, [pc, #28]	@ (10065514 <__arm_cp.5_0>)
100654f6:	6812      	ldr	r2, [r2, #0]
100654f8:	3248      	adds	r2, #72	@ 0x48
100654fa:	6812      	ldr	r2, [r2, #0]
100654fc:	2a00      	cmp	r2, #0
100654fe:	d007      	beq.n	10065510 <GAT_clt_get_proc_per_channel+0x1c>
10065500:	8853      	ldrh	r3, [r2, #2]
10065502:	4283      	cmp	r3, r0
10065504:	d102      	bne.n	1006550c <GAT_clt_get_proc_per_channel+0x18>
10065506:	8893      	ldrh	r3, [r2, #4]
10065508:	428b      	cmp	r3, r1
1006550a:	d001      	beq.n	10065510 <GAT_clt_get_proc_per_channel+0x1c>
1006550c:	3220      	adds	r2, #32
1006550e:	e7f4      	b.n	100654fa <GAT_clt_get_proc_per_channel+0x6>
10065510:	4610      	mov	r0, r2
10065512:	4770      	bx	lr

10065514 <__arm_cp.5_0>:
10065514:	20002420 	.word	0x20002420

10065518 <GAT_att_cmn_get_opcode>:
10065518:	b580      	push	{r7, lr}
1006551a:	8981      	ldrh	r1, [r0, #12]
1006551c:	f000 f8cb 	bl	100656b6 <ACL_pkt_read_8b>
10065520:	bd80      	pop	{r7, pc}

10065522 <GAT_clt_stop_proc>:
10065522:	b580      	push	{r7, lr}
10065524:	7801      	ldrb	r1, [r0, #0]
10065526:	2208      	movs	r2, #8
10065528:	430a      	orrs	r2, r1
1006552a:	7002      	strb	r2, [r0, #0]
1006552c:	200c      	movs	r0, #12
1006552e:	f7fd fb21 	bl	10062b74 <tsk_notify_idx>
10065532:	f7ec fca2 	bl	10051e7a <BLE_STACK_ProcessRequest>
10065536:	bd80      	pop	{r7, pc}

10065538 <GAT_clt_rcv_corrupted>:
10065538:	b510      	push	{r4, lr}
1006553a:	8804      	ldrh	r4, [r0, #0]
1006553c:	f7f4 fb33 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10065540:	4601      	mov	r1, r0
10065542:	4620      	mov	r0, r4
10065544:	f7ff ffd6 	bl	100654f4 <GAT_clt_get_proc_per_channel>
10065548:	2800      	cmp	r0, #0
1006554a:	d008      	beq.n	1006555e <GAT_clt_rcv_corrupted+0x26>
1006554c:	7801      	ldrb	r1, [r0, #0]
1006554e:	2218      	movs	r2, #24
10065550:	430a      	orrs	r2, r1
10065552:	7002      	strb	r2, [r0, #0]
10065554:	200c      	movs	r0, #12
10065556:	f7fd fb0d 	bl	10062b74 <tsk_notify_idx>
1006555a:	f7ec fc8e 	bl	10051e7a <BLE_STACK_ProcessRequest>
1006555e:	2000      	movs	r0, #0
10065560:	bd10      	pop	{r4, pc}

10065562 <GAT_clt_rcv_srv_initiated>:
10065562:	b5f0      	push	{r4, r5, r6, r7, lr}
10065564:	b085      	sub	sp, #20
10065566:	4604      	mov	r4, r0
10065568:	8805      	ldrh	r5, [r0, #0]
1006556a:	8980      	ldrh	r0, [r0, #12]
1006556c:	1c46      	adds	r6, r0, #1
1006556e:	4620      	mov	r0, r4
10065570:	f7ff ffd2 	bl	10065518 <GAT_att_cmn_get_opcode>
10065574:	2823      	cmp	r0, #35	@ 0x23
10065576:	d010      	beq.n	1006559a <GAT_clt_rcv_srv_initiated+0x38>
10065578:	b2b1      	uxth	r1, r6
1006557a:	281b      	cmp	r0, #27
1006557c:	d122      	bne.n	100655c4 <GAT_clt_rcv_srv_initiated+0x62>
1006557e:	4620      	mov	r0, r4
10065580:	f7ef fe1f 	bl	100551c2 <ACL_pkt_read_16b>
10065584:	4601      	mov	r1, r0
10065586:	4628      	mov	r0, r5
10065588:	f000 f85c 	bl	10065644 <GAT_clt_check_security>
1006558c:	2800      	cmp	r0, #0
1006558e:	d03d      	beq.n	1006560c <GAT_clt_rcv_srv_initiated+0xaa>
10065590:	4620      	mov	r0, r4
10065592:	f7ef fdf1 	bl	10055178 <ACL_pkt_release>
10065596:	2500      	movs	r5, #0
10065598:	e050      	b.n	1006563c <GAT_clt_rcv_srv_initiated+0xda>
1006559a:	8867      	ldrh	r7, [r4, #2]
1006559c:	b2b1      	uxth	r1, r6
1006559e:	4620      	mov	r0, r4
100655a0:	42b9      	cmp	r1, r7
100655a2:	d22a      	bcs.n	100655fa <GAT_clt_rcv_srv_initiated+0x98>
100655a4:	f7ef fe0d 	bl	100551c2 <ACL_pkt_read_16b>
100655a8:	4601      	mov	r1, r0
100655aa:	4628      	mov	r0, r5
100655ac:	f000 f84a 	bl	10065644 <GAT_clt_check_security>
100655b0:	2800      	cmp	r0, #0
100655b2:	d1ed      	bne.n	10065590 <GAT_clt_rcv_srv_initiated+0x2e>
100655b4:	1cb0      	adds	r0, r6, #2
100655b6:	b281      	uxth	r1, r0
100655b8:	4620      	mov	r0, r4
100655ba:	f7ef fe02 	bl	100551c2 <ACL_pkt_read_16b>
100655be:	1830      	adds	r0, r6, r0
100655c0:	1d06      	adds	r6, r0, #4
100655c2:	e7eb      	b.n	1006559c <GAT_clt_rcv_srv_initiated+0x3a>
100655c4:	4620      	mov	r0, r4
100655c6:	f7ef fdfc 	bl	100551c2 <ACL_pkt_read_16b>
100655ca:	4601      	mov	r1, r0
100655cc:	4628      	mov	r0, r5
100655ce:	f000 f839 	bl	10065644 <GAT_clt_check_security>
100655d2:	2800      	cmp	r0, #0
100655d4:	d024      	beq.n	10065620 <GAT_clt_rcv_srv_initiated+0xbe>
100655d6:	466e      	mov	r6, sp
100655d8:	8075      	strh	r5, [r6, #2]
100655da:	4620      	mov	r0, r4
100655dc:	f7f4 fae3 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
100655e0:	80b0      	strh	r0, [r6, #4]
100655e2:	201e      	movs	r0, #30
100655e4:	7030      	strb	r0, [r6, #0]
100655e6:	4630      	mov	r0, r6
100655e8:	f7ff f860 	bl	100646ac <GAT_att_clt_tx>
100655ec:	4605      	mov	r5, r0
100655ee:	2800      	cmp	r0, #0
100655f0:	d120      	bne.n	10065634 <GAT_clt_rcv_srv_initiated+0xd2>
100655f2:	4620      	mov	r0, r4
100655f4:	f7ef fdc0 	bl	10055178 <ACL_pkt_release>
100655f8:	e01c      	b.n	10065634 <GAT_clt_rcv_srv_initiated+0xd2>
100655fa:	f7f4 fad4 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
100655fe:	4602      	mov	r2, r0
10065600:	200a      	movs	r0, #10
10065602:	4629      	mov	r1, r5
10065604:	4623      	mov	r3, r4
10065606:	f7fe fb49 	bl	10063c9c <aci_gatt_clt_multi_notification_int_event_push_noinline>
1006560a:	e012      	b.n	10065632 <GAT_clt_rcv_srv_initiated+0xd0>
1006560c:	4620      	mov	r0, r4
1006560e:	f7f4 faca 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10065612:	4602      	mov	r2, r0
10065614:	200a      	movs	r0, #10
10065616:	4629      	mov	r1, r5
10065618:	4623      	mov	r3, r4
1006561a:	f7fe f9a5 	bl	10063968 <aci_gatt_clt_notification_event_push_noinline>
1006561e:	e008      	b.n	10065632 <GAT_clt_rcv_srv_initiated+0xd0>
10065620:	4620      	mov	r0, r4
10065622:	f7f4 fac0 	bl	10059ba6 <L2C_get_cid_from_basic_packet_header>
10065626:	4602      	mov	r2, r0
10065628:	200a      	movs	r0, #10
1006562a:	4629      	mov	r1, r5
1006562c:	4623      	mov	r3, r4
1006562e:	f7fe f969 	bl	10063904 <aci_gatt_clt_indication_event_push_noinline>
10065632:	4605      	mov	r5, r0
10065634:	2d00      	cmp	r5, #0
10065636:	d001      	beq.n	1006563c <GAT_clt_rcv_srv_initiated+0xda>
10065638:	207b      	movs	r0, #123	@ 0x7b
1006563a:	43c5      	mvns	r5, r0
1006563c:	b2e8      	uxtb	r0, r5
1006563e:	b005      	add	sp, #20
10065640:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10065644 <GAT_clt_check_security>:
10065644:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10065646:	4604      	mov	r4, r0
10065648:	f000 f822 	bl	10065690 <GAT_clt_find_sec_level_entry_p>
1006564c:	4605      	mov	r5, r0
1006564e:	2800      	cmp	r0, #0
10065650:	d106      	bne.n	10065660 <GAT_clt_check_security+0x1c>
10065652:	480e      	ldr	r0, [pc, #56]	@ (1006568c <__arm_cp.13_0>)
10065654:	4601      	mov	r1, r0
10065656:	f000 f81b 	bl	10065690 <GAT_clt_find_sec_level_entry_p>
1006565a:	4605      	mov	r5, r0
1006565c:	2800      	cmp	r0, #0
1006565e:	d002      	beq.n	10065666 <GAT_clt_check_security+0x22>
10065660:	7828      	ldrb	r0, [r5, #0]
10065662:	2802      	cmp	r0, #2
10065664:	d201      	bcs.n	1006566a <GAT_clt_check_security+0x26>
10065666:	2000      	movs	r0, #0
10065668:	e00d      	b.n	10065686 <GAT_clt_check_security+0x42>
1006566a:	a903      	add	r1, sp, #12
1006566c:	aa02      	add	r2, sp, #8
1006566e:	ab01      	add	r3, sp, #4
10065670:	4620      	mov	r0, r4
10065672:	f7fd f8a6 	bl	100627c2 <smp_sap_get_security_level>
10065676:	2800      	cmp	r0, #0
10065678:	d104      	bne.n	10065684 <GAT_clt_check_security+0x40>
1006567a:	7828      	ldrb	r0, [r5, #0]
1006567c:	a902      	add	r1, sp, #8
1006567e:	7809      	ldrb	r1, [r1, #0]
10065680:	4281      	cmp	r1, r0
10065682:	d2f0      	bcs.n	10065666 <GAT_clt_check_security+0x22>
10065684:	20c0      	movs	r0, #192	@ 0xc0
10065686:	b004      	add	sp, #16
10065688:	bdb0      	pop	{r4, r5, r7, pc}
1006568a:	46c0      	nop			@ (mov r8, r8)

1006568c <__arm_cp.13_0>:
1006568c:	0000ffff 	.word	0x0000ffff

10065690 <GAT_clt_find_sec_level_entry_p>:
10065690:	4a07      	ldr	r2, [pc, #28]	@ (100656b0 <__arm_cp.15_0>)
10065692:	6812      	ldr	r2, [r2, #0]
10065694:	3258      	adds	r2, #88	@ 0x58
10065696:	6812      	ldr	r2, [r2, #0]
10065698:	2a00      	cmp	r2, #0
1006569a:	d007      	beq.n	100656ac <GAT_clt_find_sec_level_entry_p+0x1c>
1006569c:	8893      	ldrh	r3, [r2, #4]
1006569e:	4283      	cmp	r3, r0
100656a0:	d102      	bne.n	100656a8 <GAT_clt_find_sec_level_entry_p+0x18>
100656a2:	8853      	ldrh	r3, [r2, #2]
100656a4:	428b      	cmp	r3, r1
100656a6:	d001      	beq.n	100656ac <GAT_clt_find_sec_level_entry_p+0x1c>
100656a8:	3208      	adds	r2, #8
100656aa:	e7f4      	b.n	10065696 <GAT_clt_find_sec_level_entry_p+0x6>
100656ac:	4610      	mov	r0, r2
100656ae:	4770      	bx	lr

100656b0 <__arm_cp.15_0>:
100656b0:	20002420 	.word	0x20002420

100656b4 <GAT_clt_exec_empty>:
100656b4:	4770      	bx	lr

100656b6 <ACL_pkt_read_8b>:
100656b6:	b51c      	push	{r2, r3, r4, lr}
100656b8:	291f      	cmp	r1, #31
100656ba:	d803      	bhi.n	100656c4 <ACL_pkt_read_8b+0xe>
100656bc:	aa01      	add	r2, sp, #4
100656be:	8011      	strh	r1, [r2, #0]
100656c0:	6840      	ldr	r0, [r0, #4]
100656c2:	e005      	b.n	100656d0 <ACL_pkt_read_8b+0x1a>
100656c4:	6840      	ldr	r0, [r0, #4]
100656c6:	ac01      	add	r4, sp, #4
100656c8:	4622      	mov	r2, r4
100656ca:	f7fb fd1c 	bl	10061106 <Mem_Buff_get_buff_off>
100656ce:	8821      	ldrh	r1, [r4, #0]
100656d0:	1840      	adds	r0, r0, r1
100656d2:	7900      	ldrb	r0, [r0, #4]
100656d4:	bd1c      	pop	{r2, r3, r4, pc}

100656d6 <GAT_att_clt_read_type_get_len>:
100656d6:	b580      	push	{r7, lr}
100656d8:	8981      	ldrh	r1, [r0, #12]
100656da:	1c49      	adds	r1, r1, #1
100656dc:	b289      	uxth	r1, r1
100656de:	f7ff ffea 	bl	100656b6 <ACL_pkt_read_8b>
100656e2:	bd80      	pop	{r7, pc}

100656e4 <L2C_cos_process_cfc_mode_command_ucfg_weak>:
100656e4:	2000      	movs	r0, #0
100656e6:	4770      	bx	lr

100656e8 <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>:
100656e8:	2000      	movs	r0, #0
100656ea:	4770      	bx	lr

100656ec <l2c_cos_hndl_incoming_le_frame_ucfg_weak>:
100656ec:	b580      	push	{r7, lr}
100656ee:	6841      	ldr	r1, [r0, #4]
100656f0:	7800      	ldrb	r0, [r0, #0]
100656f2:	f7f4 fa53 	bl	10059b9c <l2c_release_unexpected_acl_packet>
100656f6:	2000      	movs	r0, #0
100656f8:	bd80      	pop	{r7, pc}

100656fa <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
100656fa:	4770      	bx	lr

100656fc <llc_big_brc_mem_alloc_ucfg_weak>:
100656fc:	4770      	bx	lr

100656fe <llc_big_sync_mem_alloc_ucfg_weak>:
100656fe:	4770      	bx	lr

10065700 <llc_cig_cmn_mem_alloc_ucfg_weak>:
10065700:	4770      	bx	lr

10065702 <llc_conn_cancel_slot>:
10065702:	b570      	push	{r4, r5, r6, lr}
10065704:	4604      	mov	r4, r0
10065706:	2030      	movs	r0, #48	@ 0x30
10065708:	5c25      	ldrb	r5, [r4, r0]
1006570a:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
1006570c:	f7f4 fe03 	bl	1005a316 <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>
10065710:	20ff      	movs	r0, #255	@ 0xff
10065712:	3012      	adds	r0, #18
10065714:	1826      	adds	r6, r4, r0
10065716:	4628      	mov	r0, r5
10065718:	f7f6 fbbc 	bl	1005be94 <llc_pscan_wr_check_pawr_active_ucfg_weak>
1006571c:	2800      	cmp	r0, #0
1006571e:	d004      	beq.n	1006572a <llc_conn_cancel_slot+0x28>
10065720:	3430      	adds	r4, #48	@ 0x30
10065722:	7c60      	ldrb	r0, [r4, #17]
10065724:	2101      	movs	r1, #1
10065726:	f7fb fa69 	bl	10060bfc <LL_sched_set_per_state>
1006572a:	2000      	movs	r0, #0
1006572c:	7030      	strb	r0, [r6, #0]
1006572e:	2015      	movs	r0, #21
10065730:	f7fd fa20 	bl	10062b74 <tsk_notify_idx>
10065734:	f7ec fba1 	bl	10051e7a <BLE_STACK_ProcessRequest>
10065738:	bd70      	pop	{r4, r5, r6, pc}

1006573a <llc_conn_program_slot>:
1006573a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1006573c:	4604      	mov	r4, r0
1006573e:	f7ee fae8 	bl	10053d12 <BLEPLAT_CNTR_PacketGetDataPtr>
10065742:	4605      	mov	r5, r0
10065744:	2101      	movs	r1, #1
10065746:	4620      	mov	r0, r4
10065748:	f7f5 f886 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1006574c:	4626      	mov	r6, r4
1006574e:	362c      	adds	r6, #44	@ 0x2c
10065750:	4621      	mov	r1, r4
10065752:	3128      	adds	r1, #40	@ 0x28
10065754:	428d      	cmp	r5, r1
10065756:	d010      	beq.n	1006577a <llc_conn_program_slot+0x40>
10065758:	4285      	cmp	r5, r0
1006575a:	d00e      	beq.n	1006577a <llc_conn_program_slot+0x40>
1006575c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
1006575e:	4620      	mov	r0, r4
10065760:	f7f4 ffce 	bl	1005a700 <llc_conn_copy_tx_data_packet>
10065764:	2101      	movs	r1, #1
10065766:	4620      	mov	r0, r4
10065768:	f7f5 f87c 	bl	1005a864 <llc_conn_get_enc_on>
1006576c:	2801      	cmp	r0, #1
1006576e:	d104      	bne.n	1006577a <llc_conn_program_slot+0x40>
10065770:	7868      	ldrb	r0, [r5, #1]
10065772:	2800      	cmp	r0, #0
10065774:	d001      	beq.n	1006577a <llc_conn_program_slot+0x40>
10065776:	1d00      	adds	r0, r0, #4
10065778:	7068      	strb	r0, [r5, #1]
1006577a:	4625      	mov	r5, r4
1006577c:	35d0      	adds	r5, #208	@ 0xd0
1006577e:	7830      	ldrb	r0, [r6, #0]
10065780:	2803      	cmp	r0, #3
10065782:	d113      	bne.n	100657ac <llc_conn_program_slot+0x72>
10065784:	a801      	add	r0, sp, #4
10065786:	f7fb f837 	bl	100607f8 <LL_sched_anchorstretch>
1006578a:	2801      	cmp	r0, #1
1006578c:	d006      	beq.n	1006579c <llc_conn_program_slot+0x62>
1006578e:	2800      	cmp	r0, #0
10065790:	d10a      	bne.n	100657a8 <llc_conn_program_slot+0x6e>
10065792:	6f60      	ldr	r0, [r4, #116]	@ 0x74
10065794:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
10065796:	0049      	lsls	r1, r1, #1
10065798:	1808      	adds	r0, r1, r0
1006579a:	e006      	b.n	100657aa <llc_conn_program_slot+0x70>
1006579c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
1006579e:	9801      	ldr	r0, [sp, #4]
100657a0:	4288      	cmp	r0, r1
100657a2:	d302      	bcc.n	100657aa <llc_conn_program_slot+0x70>
100657a4:	4608      	mov	r0, r1
100657a6:	e000      	b.n	100657aa <llc_conn_program_slot+0x70>
100657a8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
100657aa:	6068      	str	r0, [r5, #4]
100657ac:	4620      	mov	r0, r4
100657ae:	f7f5 f887 	bl	1005a8c0 <llc_conn_guard_time_for_close_conn_event>
100657b2:	4620      	mov	r0, r4
100657b4:	f7f6 f948 	bl	1005ba48 <llc_conn_update_receive_window>
100657b8:	6829      	ldr	r1, [r5, #0]
100657ba:	3414      	adds	r4, #20
100657bc:	4620      	mov	r0, r4
100657be:	f7ee fbf0 	bl	10053fa2 <BLEPLAT_CNTR_SetRcvLen>
100657c2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100657c4 <llc_conn_skip_slot>:
100657c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100657c6:	b089      	sub	sp, #36	@ 0x24
100657c8:	2242      	movs	r2, #66	@ 0x42
100657ca:	5a85      	ldrh	r5, [r0, r2]
100657cc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
100657ce:	9201      	str	r2, [sp, #4]
100657d0:	1851      	adds	r1, r2, r1
100657d2:	9106      	str	r1, [sp, #24]
100657d4:	2191      	movs	r1, #145	@ 0x91
100657d6:	0049      	lsls	r1, r1, #1
100657d8:	1841      	adds	r1, r0, r1
100657da:	9102      	str	r1, [sp, #8]
100657dc:	4601      	mov	r1, r0
100657de:	3142      	adds	r1, #66	@ 0x42
100657e0:	9105      	str	r1, [sp, #20]
100657e2:	4601      	mov	r1, r0
100657e4:	312d      	adds	r1, #45	@ 0x2d
100657e6:	9103      	str	r1, [sp, #12]
100657e8:	9007      	str	r0, [sp, #28]
100657ea:	309a      	adds	r0, #154	@ 0x9a
100657ec:	9004      	str	r0, [sp, #16]
100657ee:	2000      	movs	r0, #0
100657f0:	9008      	str	r0, [sp, #32]
100657f2:	b2a9      	uxth	r1, r5
100657f4:	2201      	movs	r2, #1
100657f6:	9e07      	ldr	r6, [sp, #28]
100657f8:	4630      	mov	r0, r6
100657fa:	f7f5 fb06 	bl	1005ae0a <llc_conn_calc_skip_ucfg_weak>
100657fe:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
10065800:	4341      	muls	r1, r0
10065802:	6c72      	ldr	r2, [r6, #68]	@ 0x44
10065804:	1854      	adds	r4, r2, r1
10065806:	6474      	str	r4, [r6, #68]	@ 0x44
10065808:	9908      	ldr	r1, [sp, #32]
1006580a:	1841      	adds	r1, r0, r1
1006580c:	9108      	str	r1, [sp, #32]
1006580e:	182d      	adds	r5, r5, r0
10065810:	b2af      	uxth	r7, r5
10065812:	4630      	mov	r0, r6
10065814:	4639      	mov	r1, r7
10065816:	f7f5 fb9b 	bl	1005af50 <llc_conn_check_instant_and_set_params>
1006581a:	4606      	mov	r6, r0
1006581c:	2800      	cmp	r0, #0
1006581e:	d102      	bne.n	10065826 <llc_conn_skip_slot+0x62>
10065820:	9806      	ldr	r0, [sp, #24]
10065822:	1a20      	subs	r0, r4, r0
10065824:	d4e5      	bmi.n	100657f2 <llc_conn_skip_slot+0x2e>
10065826:	9c05      	ldr	r4, [sp, #20]
10065828:	8820      	ldrh	r0, [r4, #0]
1006582a:	42b8      	cmp	r0, r7
1006582c:	d907      	bls.n	1006583e <llc_conn_skip_slot+0x7a>
1006582e:	2009      	movs	r0, #9
10065830:	0140      	lsls	r0, r0, #5
10065832:	9907      	ldr	r1, [sp, #28]
10065834:	1809      	adds	r1, r1, r0
10065836:	9802      	ldr	r0, [sp, #8]
10065838:	8800      	ldrh	r0, [r0, #0]
1006583a:	f7f6 fb81 	bl	1005bf40 <llc_subrate_new_sr_base_event_ucfg_weak>
1006583e:	8025      	strh	r5, [r4, #0]
10065840:	2e00      	cmp	r6, #0
10065842:	9d08      	ldr	r5, [sp, #32]
10065844:	d118      	bne.n	10065878 <llc_conn_skip_slot+0xb4>
10065846:	9807      	ldr	r0, [sp, #28]
10065848:	6c41      	ldr	r1, [r0, #68]	@ 0x44
1006584a:	9a01      	ldr	r2, [sp, #4]
1006584c:	1a8f      	subs	r7, r1, r2
1006584e:	4639      	mov	r1, r7
10065850:	f7f5 fc12 	bl	1005b078 <llc_conn_check_supervision_timer>
10065854:	4606      	mov	r6, r0
10065856:	2800      	cmp	r0, #0
10065858:	d10e      	bne.n	10065878 <llc_conn_skip_slot+0xb4>
1006585a:	9807      	ldr	r0, [sp, #28]
1006585c:	4639      	mov	r1, r7
1006585e:	f7f5 fb41 	bl	1005aee4 <llc_conn_check_ctrl_proc_rsp_timer>
10065862:	4606      	mov	r6, r0
10065864:	2800      	cmp	r0, #0
10065866:	d107      	bne.n	10065878 <llc_conn_skip_slot+0xb4>
10065868:	9807      	ldr	r0, [sp, #28]
1006586a:	4639      	mov	r1, r7
1006586c:	462a      	mov	r2, r5
1006586e:	f7f6 f875 	bl	1005b95c <llc_conn_set_taskslot_params>
10065872:	4606      	mov	r6, r0
10065874:	2800      	cmp	r0, #0
10065876:	d007      	beq.n	10065888 <llc_conn_skip_slot+0xc4>
10065878:	9c03      	ldr	r4, [sp, #12]
1006587a:	7d20      	ldrb	r0, [r4, #20]
1006587c:	f7fb f9b4 	bl	10060be8 <LL_sched_delete_taskslot>
10065880:	7026      	strb	r6, [r4, #0]
10065882:	2000      	movs	r0, #0
10065884:	9904      	ldr	r1, [sp, #16]
10065886:	8008      	strh	r0, [r1, #0]
10065888:	4628      	mov	r0, r5
1006588a:	b009      	add	sp, #36	@ 0x24
1006588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10065890 <llc_conn_isr>:
10065890:	b5f0      	push	{r4, r5, r6, r7, lr}
10065892:	b099      	sub	sp, #100	@ 0x64
10065894:	4607      	mov	r7, r0
10065896:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
10065898:	1c40      	adds	r0, r0, #1
1006589a:	8678      	strh	r0, [r7, #50]	@ 0x32
1006589c:	2041      	movs	r0, #65	@ 0x41
1006589e:	5c3d      	ldrb	r5, [r7, r0]
100658a0:	202d      	movs	r0, #45	@ 0x2d
100658a2:	5c38      	ldrb	r0, [r7, r0]
100658a4:	2800      	cmp	r0, #0
100658a6:	d008      	beq.n	100658ba <llc_conn_isr+0x2a>
100658a8:	f7ed f9da 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
100658ac:	4628      	mov	r0, r5
100658ae:	f7fb f99b 	bl	10060be8 <LL_sched_delete_taskslot>
100658b2:	4628      	mov	r0, r5
100658b4:	f7fa ffa8 	bl	10060808 <LL_sched_engine>
100658b8:	e2a5      	b.n	10065e06 <__arm_cp.0_5+0x182>
100658ba:	2021      	movs	r0, #33	@ 0x21
100658bc:	00c0      	lsls	r0, r0, #3
100658be:	183e      	adds	r6, r7, r0
100658c0:	4638      	mov	r0, r7
100658c2:	302c      	adds	r0, #44	@ 0x2c
100658c4:	900d      	str	r0, [sp, #52]	@ 0x34
100658c6:	463c      	mov	r4, r7
100658c8:	3480      	adds	r4, #128	@ 0x80
100658ca:	4638      	mov	r0, r7
100658cc:	30d0      	adds	r0, #208	@ 0xd0
100658ce:	9007      	str	r0, [sp, #28]
100658d0:	48ea      	ldr	r0, [pc, #936]	@ (10065c7c <__arm_cp.0_3>)
100658d2:	6800      	ldr	r0, [r0, #0]
100658d4:	f7ee f9e0 	bl	10053c98 <BLEPLAT_CNTR_IntGetIntStatusTxDone>
100658d8:	9009      	str	r0, [sp, #36]	@ 0x24
100658da:	2800      	cmp	r0, #0
100658dc:	940b      	str	r4, [sp, #44]	@ 0x2c
100658de:	960a      	str	r6, [sp, #40]	@ 0x28
100658e0:	9508      	str	r5, [sp, #32]
100658e2:	d040      	beq.n	10065966 <llc_conn_isr+0xd6>
100658e4:	463e      	mov	r6, r7
100658e6:	3614      	adds	r6, #20
100658e8:	4630      	mov	r0, r6
100658ea:	f7ee fa05 	bl	10053cf8 <BLEPLAT_CNTR_PacketClrPllTrig>
100658ee:	4630      	mov	r0, r6
100658f0:	f7ee f9f6 	bl	10053ce0 <BLEPLAT_CNTR_PacketClrIncChan>
100658f4:	4620      	mov	r0, r4
100658f6:	3008      	adds	r0, #8
100658f8:	900c      	str	r0, [sp, #48]	@ 0x30
100658fa:	7a20      	ldrb	r0, [r4, #8]
100658fc:	0780      	lsls	r0, r0, #30
100658fe:	d445      	bmi.n	1006598c <llc_conn_isr+0xfc>
10065900:	4638      	mov	r0, r7
10065902:	f7ee fa06 	bl	10053d12 <BLEPLAT_CNTR_PacketGetDataPtr>
10065906:	4605      	mov	r5, r0
10065908:	463c      	mov	r4, r7
1006590a:	3428      	adds	r4, #40	@ 0x28
1006590c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006590e:	7800      	ldrb	r0, [r0, #0]
10065910:	2100      	movs	r1, #0
10065912:	9106      	str	r1, [sp, #24]
10065914:	2803      	cmp	r0, #3
10065916:	d000      	beq.n	1006591a <llc_conn_isr+0x8a>
10065918:	e0a6      	b.n	10065a68 <llc_conn_isr+0x1d8>
1006591a:	4630      	mov	r0, r6
1006591c:	f7ee f9f9 	bl	10053d12 <BLEPLAT_CNTR_PacketGetDataPtr>
10065920:	4603      	mov	r3, r0
10065922:	42a5      	cmp	r5, r4
10065924:	d015      	beq.n	10065952 <llc_conn_isr+0xc2>
10065926:	7829      	ldrb	r1, [r5, #0]
10065928:	2003      	movs	r0, #3
1006592a:	460a      	mov	r2, r1
1006592c:	4002      	ands	r2, r0
1006592e:	2a03      	cmp	r2, #3
10065930:	d10a      	bne.n	10065948 <llc_conn_isr+0xb8>
10065932:	0689      	lsls	r1, r1, #26
10065934:	d400      	bmi.n	10065938 <llc_conn_isr+0xa8>
10065936:	2002      	movs	r0, #2
10065938:	5c28      	ldrb	r0, [r5, r0]
1006593a:	2806      	cmp	r0, #6
1006593c:	d104      	bne.n	10065948 <llc_conn_isr+0xb8>
1006593e:	4638      	mov	r0, r7
10065940:	9305      	str	r3, [sp, #20]
10065942:	f7f4 fec5 	bl	1005a6d0 <llc_conn_clr_rx_acl_blocked>
10065946:	9b05      	ldr	r3, [sp, #20]
10065948:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1006594a:	6810      	ldr	r0, [r2, #0]
1006594c:	2140      	movs	r1, #64	@ 0x40
1006594e:	4301      	orrs	r1, r0
10065950:	6011      	str	r1, [r2, #0]
10065952:	7818      	ldrb	r0, [r3, #0]
10065954:	7829      	ldrb	r1, [r5, #0]
10065956:	4301      	orrs	r1, r0
10065958:	06c8      	lsls	r0, r1, #27
1006595a:	d474      	bmi.n	10065a46 <llc_conn_isr+0x1b6>
1006595c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1006595e:	7800      	ldrb	r0, [r0, #0]
10065960:	06c0      	lsls	r0, r0, #27
10065962:	d57d      	bpl.n	10065a60 <llc_conn_isr+0x1d0>
10065964:	e080      	b.n	10065a68 <llc_conn_isr+0x1d8>
10065966:	4638      	mov	r0, r7
10065968:	f7ee f9c6 	bl	10053cf8 <BLEPLAT_CNTR_PacketClrPllTrig>
1006596c:	4638      	mov	r0, r7
1006596e:	f7ee f9b7 	bl	10053ce0 <BLEPLAT_CNTR_PacketClrIncChan>
10065972:	a80e      	add	r0, sp, #56	@ 0x38
10065974:	2600      	movs	r6, #0
10065976:	7786      	strb	r6, [r0, #30]
10065978:	7606      	strb	r6, [r0, #24]
1006597a:	7746      	strb	r6, [r0, #29]
1006597c:	4cbf      	ldr	r4, [pc, #764]	@ (10065c7c <__arm_cp.0_3>)
1006597e:	6820      	ldr	r0, [r4, #0]
10065980:	f7ee f97e 	bl	10053c80 <BLEPLAT_CNTR_IntGetIntStatusTimeout>
10065984:	2800      	cmp	r0, #0
10065986:	d010      	beq.n	100659aa <llc_conn_isr+0x11a>
10065988:	2501      	movs	r5, #1
1006598a:	e014      	b.n	100659b6 <llc_conn_isr+0x126>
1006598c:	463d      	mov	r5, r7
1006598e:	35a8      	adds	r5, #168	@ 0xa8
10065990:	f7ed f966 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
10065994:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10065996:	7d70      	ldrb	r0, [r6, #21]
10065998:	f7fb f926 	bl	10060be8 <LL_sched_delete_taskslot>
1006599c:	2000      	movs	r0, #0
1006599e:	8028      	strh	r0, [r5, #0]
100659a0:	2113      	movs	r1, #19
100659a2:	7071      	strb	r1, [r6, #1]
100659a4:	8360      	strh	r0, [r4, #26]
100659a6:	4634      	mov	r4, r6
100659a8:	e1e5      	b.n	10065d76 <__arm_cp.0_5+0xf2>
100659aa:	6820      	ldr	r0, [r4, #0]
100659ac:	f7ee f921 	bl	10053bf2 <BLEPLAT_CNTR_IntGetIntStatusLenErr>
100659b0:	4605      	mov	r5, r0
100659b2:	1e40      	subs	r0, r0, #1
100659b4:	4185      	sbcs	r5, r0
100659b6:	a80e      	add	r0, sp, #56	@ 0x38
100659b8:	76c5      	strb	r5, [r0, #27]
100659ba:	6820      	ldr	r0, [r4, #0]
100659bc:	f7ee f977 	bl	10053cae <BLEPLAT_CNTR_IntGetIntStatusTxOk>
100659c0:	9006      	str	r0, [sp, #24]
100659c2:	900f      	str	r0, [sp, #60]	@ 0x3c
100659c4:	2d00      	cmp	r5, #0
100659c6:	d01f      	beq.n	10065a08 <llc_conn_isr+0x178>
100659c8:	f7ed f94a 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
100659cc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
100659ce:	68e8      	ldr	r0, [r5, #12]
100659d0:	2800      	cmp	r0, #0
100659d2:	d002      	beq.n	100659da <llc_conn_isr+0x14a>
100659d4:	88c1      	ldrh	r1, [r0, #6]
100659d6:	1c49      	adds	r1, r1, #1
100659d8:	80c1      	strh	r1, [r0, #6]
100659da:	6928      	ldr	r0, [r5, #16]
100659dc:	2800      	cmp	r0, #0
100659de:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100659e0:	9e06      	ldr	r6, [sp, #24]
100659e2:	d00a      	beq.n	100659fa <llc_conn_isr+0x16a>
100659e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
100659e6:	7d40      	ldrb	r0, [r0, #21]
100659e8:	f7ee fbd4 	bl	10054194 <BLEPLAT_CNTR_SmGetRemapChan>
100659ec:	0040      	lsls	r0, r0, #1
100659ee:	6929      	ldr	r1, [r5, #16]
100659f0:	1808      	adds	r0, r1, r0
100659f2:	2194      	movs	r1, #148	@ 0x94
100659f4:	5a42      	ldrh	r2, [r0, r1]
100659f6:	1c52      	adds	r2, r2, #1
100659f8:	5242      	strh	r2, [r0, r1]
100659fa:	a80e      	add	r0, sp, #56	@ 0x38
100659fc:	2501      	movs	r5, #1
100659fe:	7605      	strb	r5, [r0, #24]
10065a00:	68a0      	ldr	r0, [r4, #8]
10065a02:	3408      	adds	r4, #8
10065a04:	2300      	movs	r3, #0
10065a06:	e0b9      	b.n	10065b7c <llc_conn_isr+0x2ec>
10065a08:	6820      	ldr	r0, [r4, #0]
10065a0a:	f7ee f92e 	bl	10053c6a <BLEPLAT_CNTR_IntGetIntStatusRxOk>
10065a0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10065a10:	7a11      	ldrb	r1, [r2, #8]
10065a12:	094b      	lsrs	r3, r1, #5
10065a14:	2501      	movs	r5, #1
10065a16:	4629      	mov	r1, r5
10065a18:	4399      	bics	r1, r3
10065a1a:	ab0e      	add	r3, sp, #56	@ 0x38
10065a1c:	7699      	strb	r1, [r3, #26]
10065a1e:	9005      	str	r0, [sp, #20]
10065a20:	900e      	str	r0, [sp, #56]	@ 0x38
10065a22:	6820      	ldr	r0, [r4, #0]
10065a24:	4614      	mov	r4, r2
10065a26:	3408      	adds	r4, #8
10065a28:	f7ee f8bf 	bl	10053baa <BLEPLAT_CNTR_IntGetIntStatusCrcErr>
10065a2c:	2800      	cmp	r0, #0
10065a2e:	d06e      	beq.n	10065b0e <llc_conn_isr+0x27e>
10065a30:	7820      	ldrb	r0, [r4, #0]
10065a32:	06c0      	lsls	r0, r0, #27
10065a34:	9704      	str	r7, [sp, #16]
10065a36:	d479      	bmi.n	10065b2c <llc_conn_isr+0x29c>
10065a38:	f7ee f87d 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
10065a3c:	6820      	ldr	r0, [r4, #0]
10065a3e:	2110      	movs	r1, #16
10065a40:	4301      	orrs	r1, r0
10065a42:	6021      	str	r1, [r4, #0]
10065a44:	e076      	b.n	10065b34 <llc_conn_isr+0x2a4>
10065a46:	9807      	ldr	r0, [sp, #28]
10065a48:	6840      	ldr	r0, [r0, #4]
10065a4a:	9005      	str	r0, [sp, #20]
10065a4c:	f7ed f8c7 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
10065a50:	6c79      	ldr	r1, [r7, #68]	@ 0x44
10065a52:	1a08      	subs	r0, r1, r0
10065a54:	9905      	ldr	r1, [sp, #20]
10065a56:	1840      	adds	r0, r0, r1
10065a58:	d402      	bmi.n	10065a60 <llc_conn_isr+0x1d0>
10065a5a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10065a5c:	4288      	cmp	r0, r1
10065a5e:	d203      	bcs.n	10065a68 <llc_conn_isr+0x1d8>
10065a60:	f7ed f8fe 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
10065a64:	2001      	movs	r0, #1
10065a66:	9006      	str	r0, [sp, #24]
10065a68:	4638      	mov	r0, r7
10065a6a:	f7f4 ff22 	bl	1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>
10065a6e:	2802      	cmp	r0, #2
10065a70:	d13d      	bne.n	10065aee <llc_conn_isr+0x25e>
10065a72:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065a74:	6940      	ldr	r0, [r0, #20]
10065a76:	6800      	ldr	r0, [r0, #0]
10065a78:	06c1      	lsls	r1, r0, #27
10065a7a:	d415      	bmi.n	10065aa8 <llc_conn_isr+0x218>
10065a7c:	0640      	lsls	r0, r0, #25
10065a7e:	d536      	bpl.n	10065aee <llc_conn_isr+0x25e>
10065a80:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065a82:	7d40      	ldrb	r0, [r0, #21]
10065a84:	f7ee fac5 	bl	10054012 <BLEPLAT_CNTR_SmEncOff>
10065a88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10065a8a:	6958      	ldr	r0, [r3, #20]
10065a8c:	6801      	ldr	r1, [r0, #0]
10065a8e:	2240      	movs	r2, #64	@ 0x40
10065a90:	4391      	bics	r1, r2
10065a92:	6001      	str	r1, [r0, #0]
10065a94:	6898      	ldr	r0, [r3, #8]
10065a96:	2108      	movs	r1, #8
10065a98:	4388      	bics	r0, r1
10065a9a:	6098      	str	r0, [r3, #8]
10065a9c:	2012      	movs	r0, #18
10065a9e:	f7fd f869 	bl	10062b74 <tsk_notify_idx>
10065aa2:	f7ec f9ea 	bl	10051e7a <BLE_STACK_ProcessRequest>
10065aa6:	e022      	b.n	10065aee <llc_conn_isr+0x25e>
10065aa8:	9505      	str	r5, [sp, #20]
10065aaa:	2000      	movs	r0, #0
10065aac:	900f      	str	r0, [sp, #60]	@ 0x3c
10065aae:	900e      	str	r0, [sp, #56]	@ 0x38
10065ab0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10065ab2:	7d68      	ldrb	r0, [r5, #21]
10065ab4:	f7ee fac1 	bl	1005403a <BLEPLAT_CNTR_SmEncOn>
10065ab8:	7d68      	ldrb	r0, [r5, #21]
10065aba:	a90e      	add	r1, sp, #56	@ 0x38
10065abc:	f7ee fc8e 	bl	100543dc <BLEPLAT_CNTR_SmSetRxCount>
10065ac0:	7828      	ldrb	r0, [r5, #0]
10065ac2:	2803      	cmp	r0, #3
10065ac4:	d103      	bne.n	10065ace <llc_conn_isr+0x23e>
10065ac6:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065ac8:	7d40      	ldrb	r0, [r0, #21]
10065aca:	f7ee fcaa 	bl	10054422 <BLEPLAT_CNTR_SmSetRxCountDirectionBit>
10065ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10065ad0:	6958      	ldr	r0, [r3, #20]
10065ad2:	6801      	ldr	r1, [r0, #0]
10065ad4:	2210      	movs	r2, #16
10065ad6:	4391      	bics	r1, r2
10065ad8:	6001      	str	r1, [r0, #0]
10065ada:	6898      	ldr	r0, [r3, #8]
10065adc:	2108      	movs	r1, #8
10065ade:	4301      	orrs	r1, r0
10065ae0:	6099      	str	r1, [r3, #8]
10065ae2:	2012      	movs	r0, #18
10065ae4:	f7fd f846 	bl	10062b74 <tsk_notify_idx>
10065ae8:	f7ec f9c7 	bl	10051e7a <BLE_STACK_ProcessRequest>
10065aec:	9d05      	ldr	r5, [sp, #20]
10065aee:	42a5      	cmp	r5, r4
10065af0:	990a      	ldr	r1, [sp, #40]	@ 0x28
10065af2:	d001      	beq.n	10065af8 <llc_conn_isr+0x268>
10065af4:	8a88      	ldrh	r0, [r1, #20]
10065af6:	82c8      	strh	r0, [r1, #22]
10065af8:	9806      	ldr	r0, [sp, #24]
10065afa:	2800      	cmp	r0, #0
10065afc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065afe:	d000      	beq.n	10065b02 <llc_conn_isr+0x272>
10065b00:	e136      	b.n	10065d70 <__arm_cp.0_5+0xec>
10065b02:	9807      	ldr	r0, [sp, #28]
10065b04:	6801      	ldr	r1, [r0, #0]
10065b06:	4630      	mov	r0, r6
10065b08:	f7ee fa4b 	bl	10053fa2 <BLEPLAT_CNTR_SetRcvLen>
10065b0c:	e135      	b.n	10065d7a <__arm_cp.0_5+0xf6>
10065b0e:	485b      	ldr	r0, [pc, #364]	@ (10065c7c <__arm_cp.0_3>)
10065b10:	6800      	ldr	r0, [r0, #0]
10065b12:	f7ee f862 	bl	10053bda <BLEPLAT_CNTR_IntGetIntStatusEncErr>
10065b16:	2800      	cmp	r0, #0
10065b18:	d026      	beq.n	10065b68 <llc_conn_isr+0x2d8>
10065b1a:	9805      	ldr	r0, [sp, #20]
10065b1c:	2800      	cmp	r0, #0
10065b1e:	d023      	beq.n	10065b68 <llc_conn_isr+0x2d8>
10065b20:	f7ed f89e 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
10065b24:	a80e      	add	r0, sp, #56	@ 0x38
10065b26:	233d      	movs	r3, #61	@ 0x3d
10065b28:	7783      	strb	r3, [r0, #30]
10065b2a:	e023      	b.n	10065b74 <llc_conn_isr+0x2e4>
10065b2c:	f7ed f898 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
10065b30:	a80e      	add	r0, sp, #56	@ 0x38
10065b32:	7605      	strb	r5, [r0, #24]
10065b34:	4637      	mov	r7, r6
10065b36:	980a      	ldr	r0, [sp, #40]	@ 0x28
10065b38:	68c0      	ldr	r0, [r0, #12]
10065b3a:	2800      	cmp	r0, #0
10065b3c:	d002      	beq.n	10065b44 <llc_conn_isr+0x2b4>
10065b3e:	8841      	ldrh	r1, [r0, #2]
10065b40:	1c49      	adds	r1, r1, #1
10065b42:	8041      	strh	r1, [r0, #2]
10065b44:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10065b46:	6930      	ldr	r0, [r6, #16]
10065b48:	2800      	cmp	r0, #0
10065b4a:	d00a      	beq.n	10065b62 <llc_conn_isr+0x2d2>
10065b4c:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065b4e:	7d40      	ldrb	r0, [r0, #21]
10065b50:	f7ee fb20 	bl	10054194 <BLEPLAT_CNTR_SmGetRemapChan>
10065b54:	0040      	lsls	r0, r0, #1
10065b56:	6931      	ldr	r1, [r6, #16]
10065b58:	1808      	adds	r0, r1, r0
10065b5a:	214a      	movs	r1, #74	@ 0x4a
10065b5c:	5a42      	ldrh	r2, [r0, r1]
10065b5e:	1c52      	adds	r2, r2, #1
10065b60:	5242      	strh	r2, [r0, r1]
10065b62:	463b      	mov	r3, r7
10065b64:	9f04      	ldr	r7, [sp, #16]
10065b66:	e005      	b.n	10065b74 <llc_conn_isr+0x2e4>
10065b68:	6820      	ldr	r0, [r4, #0]
10065b6a:	2110      	movs	r1, #16
10065b6c:	4388      	bics	r0, r1
10065b6e:	6020      	str	r0, [r4, #0]
10065b70:	2300      	movs	r3, #0
10065b72:	461d      	mov	r5, r3
10065b74:	9e06      	ldr	r6, [sp, #24]
10065b76:	6821      	ldr	r1, [r4, #0]
10065b78:	2020      	movs	r0, #32
10065b7a:	4308      	orrs	r0, r1
10065b7c:	4271      	negs	r1, r6
10065b7e:	4171      	adcs	r1, r6
10065b80:	0189      	lsls	r1, r1, #6
10065b82:	2240      	movs	r2, #64	@ 0x40
10065b84:	4390      	bics	r0, r2
10065b86:	1840      	adds	r0, r0, r1
10065b88:	940c      	str	r4, [sp, #48]	@ 0x30
10065b8a:	6020      	str	r0, [r4, #0]
10065b8c:	2d00      	cmp	r5, #0
10065b8e:	d025      	beq.n	10065bdc <llc_conn_isr+0x34c>
10065b90:	a80e      	add	r0, sp, #56	@ 0x38
10065b92:	7f80      	ldrb	r0, [r0, #30]
10065b94:	2800      	cmp	r0, #0
10065b96:	d169      	bne.n	10065c6c <llc_conn_isr+0x3dc>
10065b98:	a80e      	add	r0, sp, #56	@ 0x38
10065b9a:	7ec0      	ldrb	r0, [r0, #27]
10065b9c:	2800      	cmp	r0, #0
10065b9e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065ba0:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065ba2:	d000      	beq.n	10065ba6 <llc_conn_isr+0x316>
10065ba4:	e0dc      	b.n	10065d60 <__arm_cp.0_5+0xdc>
10065ba6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
10065ba8:	2800      	cmp	r0, #0
10065baa:	d100      	bne.n	10065bae <llc_conn_isr+0x31e>
10065bac:	e0b6      	b.n	10065d1c <__arm_cp.0_5+0x98>
10065bae:	4e34      	ldr	r6, [pc, #208]	@ (10065c80 <__arm_cp.0_3+0x4>)
10065bb0:	6830      	ldr	r0, [r6, #0]
10065bb2:	21d8      	movs	r1, #216	@ 0xd8
10065bb4:	5c41      	ldrb	r1, [r0, r1]
10065bb6:	2901      	cmp	r1, #1
10065bb8:	d14b      	bne.n	10065c52 <llc_conn_isr+0x3c2>
10065bba:	6805      	ldr	r5, [r0, #0]
10065bbc:	f7e9 f9da 	bl	1004ef74 <phy_upd_csr_ucfg>
10065bc0:	2801      	cmp	r0, #1
10065bc2:	d000      	beq.n	10065bc6 <llc_conn_isr+0x336>
10065bc4:	e094      	b.n	10065cf0 <__arm_cp.0_5+0x6c>
10065bc6:	7920      	ldrb	r0, [r4, #4]
10065bc8:	210e      	movs	r1, #14
10065bca:	4341      	muls	r1, r0
10065bcc:	6830      	ldr	r0, [r6, #0]
10065bce:	229c      	movs	r2, #156	@ 0x9c
10065bd0:	5880      	ldr	r0, [r0, r2]
10065bd2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
10065bd4:	6940      	ldr	r0, [r0, #20]
10065bd6:	1840      	adds	r0, r0, r1
10065bd8:	79c0      	ldrb	r0, [r0, #7]
10065bda:	e08a      	b.n	10065cf2 <__arm_cp.0_5+0x6e>
10065bdc:	461c      	mov	r4, r3
10065bde:	9202      	str	r2, [sp, #8]
10065be0:	4638      	mov	r0, r7
10065be2:	3014      	adds	r0, #20
10065be4:	f7ee f895 	bl	10053d12 <BLEPLAT_CNTR_PacketGetDataPtr>
10065be8:	4605      	mov	r5, r0
10065bea:	9011      	str	r0, [sp, #68]	@ 0x44
10065bec:	7801      	ldrb	r1, [r0, #0]
10065bee:	2003      	movs	r0, #3
10065bf0:	4001      	ands	r1, r0
10065bf2:	ae0e      	add	r6, sp, #56	@ 0x38
10065bf4:	9103      	str	r1, [sp, #12]
10065bf6:	7571      	strb	r1, [r6, #21]
10065bf8:	7829      	ldrb	r1, [r5, #0]
10065bfa:	0689      	lsls	r1, r1, #26
10065bfc:	d400      	bmi.n	10065c00 <llc_conn_isr+0x370>
10065bfe:	2002      	movs	r0, #2
10065c00:	5c28      	ldrb	r0, [r5, r0]
10065c02:	75f0      	strb	r0, [r6, #23]
10065c04:	f7f6 f9b6 	bl	1005bf74 <ll_cpe_get_cpid_from_opcode>
10065c08:	7530      	strb	r0, [r6, #20]
10065c0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
10065c0c:	6679      	str	r1, [r7, #100]	@ 0x64
10065c0e:	2301      	movs	r3, #1
10065c10:	9906      	ldr	r1, [sp, #24]
10065c12:	2900      	cmp	r1, #0
10065c14:	d009      	beq.n	10065c2a <llc_conn_isr+0x39a>
10065c16:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065c18:	6809      	ldr	r1, [r1, #0]
10065c1a:	4019      	ands	r1, r3
10065c1c:	d005      	beq.n	10065c2a <llc_conn_isr+0x39a>
10065c1e:	2616      	movs	r6, #22
10065c20:	f7ed f81e 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
10065c24:	a80e      	add	r0, sp, #56	@ 0x38
10065c26:	7786      	strb	r6, [r0, #30]
10065c28:	e020      	b.n	10065c6c <llc_conn_isr+0x3dc>
10065c2a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10065c2c:	6949      	ldr	r1, [r1, #20]
10065c2e:	7849      	ldrb	r1, [r1, #1]
10065c30:	07c9      	lsls	r1, r1, #31
10065c32:	9a05      	ldr	r2, [sp, #20]
10065c34:	d018      	beq.n	10065c68 <llc_conn_isr+0x3d8>
10065c36:	2a00      	cmp	r2, #0
10065c38:	d016      	beq.n	10065c68 <llc_conn_isr+0x3d8>
10065c3a:	9903      	ldr	r1, [sp, #12]
10065c3c:	2903      	cmp	r1, #3
10065c3e:	d10e      	bne.n	10065c5e <llc_conn_isr+0x3ce>
10065c40:	263d      	movs	r6, #61	@ 0x3d
10065c42:	2814      	cmp	r0, #20
10065c44:	d8ec      	bhi.n	10065c20 <llc_conn_isr+0x390>
10065c46:	4619      	mov	r1, r3
10065c48:	4081      	lsls	r1, r0
10065c4a:	480e      	ldr	r0, [pc, #56]	@ (10065c84 <__arm_cp.0_5>)
10065c4c:	4201      	tst	r1, r0
10065c4e:	d10b      	bne.n	10065c68 <llc_conn_isr+0x3d8>
10065c50:	e7e6      	b.n	10065c20 <llc_conn_isr+0x390>
10065c52:	f7ed f805 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
10065c56:	a80e      	add	r0, sp, #56	@ 0x38
10065c58:	2101      	movs	r1, #1
10065c5a:	7601      	strb	r1, [r0, #24]
10065c5c:	e05d      	b.n	10065d1a <__arm_cp.0_5+0x96>
10065c5e:	7868      	ldrb	r0, [r5, #1]
10065c60:	2800      	cmp	r0, #0
10065c62:	d001      	beq.n	10065c68 <llc_conn_isr+0x3d8>
10065c64:	263d      	movs	r6, #61	@ 0x3d
10065c66:	e7db      	b.n	10065c20 <llc_conn_isr+0x390>
10065c68:	2c00      	cmp	r4, #0
10065c6a:	d00d      	beq.n	10065c88 <__arm_cp.0_5+0x4>
10065c6c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065c6e:	7d60      	ldrb	r0, [r4, #21]
10065c70:	f7fa ffba 	bl	10060be8 <LL_sched_delete_taskslot>
10065c74:	a80e      	add	r0, sp, #56	@ 0x38
10065c76:	7f80      	ldrb	r0, [r0, #30]
10065c78:	7060      	strb	r0, [r4, #1]
10065c7a:	e07c      	b.n	10065d76 <__arm_cp.0_5+0xf2>

10065c7c <__arm_cp.0_3>:
10065c7c:	20002464 	.word	0x20002464
10065c80:	20002468 	.word	0x20002468

10065c84 <__arm_cp.0_5>:
10065c84:	00100012 	.word	0x00100012
10065c88:	9301      	str	r3, [sp, #4]
10065c8a:	4638      	mov	r0, r7
10065c8c:	4614      	mov	r4, r2
10065c8e:	f7ee f840 	bl	10053d12 <BLEPLAT_CNTR_PacketGetDataPtr>
10065c92:	4606      	mov	r6, r0
10065c94:	a80e      	add	r0, sp, #56	@ 0x38
10065c96:	2100      	movs	r1, #0
10065c98:	7701      	strb	r1, [r0, #28]
10065c9a:	7641      	strb	r1, [r0, #25]
10065c9c:	9612      	str	r6, [sp, #72]	@ 0x48
10065c9e:	9106      	str	r1, [sp, #24]
10065ca0:	9110      	str	r1, [sp, #64]	@ 0x40
10065ca2:	2c00      	cmp	r4, #0
10065ca4:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065ca6:	d100      	bne.n	10065caa <__arm_cp.0_5+0x26>
10065ca8:	e147      	b.n	10065f3a <__arm_cp.0_5+0x2b6>
10065caa:	7800      	ldrb	r0, [r0, #0]
10065cac:	2802      	cmp	r0, #2
10065cae:	d113      	bne.n	10065cd8 <__arm_cp.0_5+0x54>
10065cb0:	7828      	ldrb	r0, [r5, #0]
10065cb2:	7831      	ldrb	r1, [r6, #0]
10065cb4:	4301      	orrs	r1, r0
10065cb6:	06c8      	lsls	r0, r1, #27
10065cb8:	d509      	bpl.n	10065cce <__arm_cp.0_5+0x4a>
10065cba:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
10065cbc:	f7ec ff8f 	bl	10052bde <BLEPLAT_GetCurrentSysTime>
10065cc0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
10065cc2:	1a08      	subs	r0, r1, r0
10065cc4:	1900      	adds	r0, r0, r4
10065cc6:	d402      	bmi.n	10065cce <__arm_cp.0_5+0x4a>
10065cc8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10065cca:	4288      	cmp	r0, r1
10065ccc:	d204      	bcs.n	10065cd8 <__arm_cp.0_5+0x54>
10065cce:	f7ec ffc7 	bl	10052c60 <BLEPLAT_ClearRadioTimerValue>
10065cd2:	a80e      	add	r0, sp, #56	@ 0x38
10065cd4:	2101      	movs	r1, #1
10065cd6:	7601      	strb	r1, [r0, #24]
10065cd8:	786c      	ldrb	r4, [r5, #1]
10065cda:	2c00      	cmp	r4, #0
10065cdc:	d100      	bne.n	10065ce0 <__arm_cp.0_5+0x5c>
10065cde:	e12c      	b.n	10065f3a <__arm_cp.0_5+0x2b6>
10065ce0:	980c      	ldr	r0, [sp, #48]	@ 0x30
10065ce2:	6800      	ldr	r0, [r0, #0]
10065ce4:	2608      	movs	r6, #8
10065ce6:	4006      	ands	r6, r0
10065ce8:	d000      	beq.n	10065cec <__arm_cp.0_5+0x68>
10065cea:	e095      	b.n	10065e18 <__arm_cp.0_5+0x194>
10065cec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10065cee:	e0aa      	b.n	10065e46 <__arm_cp.0_5+0x1c2>
10065cf0:	2001      	movs	r0, #1
10065cf2:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
10065cf4:	f7ee fc8b 	bl	1005460e <BLEPLAT_CNTR_DemodDelaySt>
10065cf8:	1a28      	subs	r0, r5, r0
10065cfa:	6478      	str	r0, [r7, #68]	@ 0x44
10065cfc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
10065cfe:	1b89      	subs	r1, r1, r6
10065d00:	1808      	adds	r0, r1, r0
10065d02:	9a07      	ldr	r2, [sp, #28]
10065d04:	6851      	ldr	r1, [r2, #4]
10065d06:	4281      	cmp	r1, r0
10065d08:	d901      	bls.n	10065d0e <__arm_cp.0_5+0x8a>
10065d0a:	1a08      	subs	r0, r1, r0
10065d0c:	6050      	str	r0, [r2, #4]
10065d0e:	2000      	movs	r0, #0
10065d10:	64b8      	str	r0, [r7, #72]	@ 0x48
10065d12:	6378      	str	r0, [r7, #52]	@ 0x34
10065d14:	4638      	mov	r0, r7
10065d16:	f7f5 fe97 	bl	1005ba48 <llc_conn_update_receive_window>
10065d1a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065d1c:	a80e      	add	r0, sp, #56	@ 0x38
10065d1e:	7e80      	ldrb	r0, [r0, #26]
10065d20:	2801      	cmp	r0, #1
10065d22:	d102      	bne.n	10065d2a <__arm_cp.0_5+0xa6>
10065d24:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10065d26:	6678      	str	r0, [r7, #100]	@ 0x64
10065d28:	e004      	b.n	10065d34 <__arm_cp.0_5+0xb0>
10065d2a:	2011      	movs	r0, #17
10065d2c:	f7fc ff22 	bl	10062b74 <tsk_notify_idx>
10065d30:	f7ec f8a3 	bl	10051e7a <BLE_STACK_ProcessRequest>
10065d34:	980a      	ldr	r0, [sp, #40]	@ 0x28
10065d36:	68c0      	ldr	r0, [r0, #12]
10065d38:	2800      	cmp	r0, #0
10065d3a:	d002      	beq.n	10065d42 <__arm_cp.0_5+0xbe>
10065d3c:	8801      	ldrh	r1, [r0, #0]
10065d3e:	1c49      	adds	r1, r1, #1
10065d40:	8001      	strh	r1, [r0, #0]
10065d42:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10065d44:	6930      	ldr	r0, [r6, #16]
10065d46:	2800      	cmp	r0, #0
10065d48:	d007      	beq.n	10065d5a <__arm_cp.0_5+0xd6>
10065d4a:	7d60      	ldrb	r0, [r4, #21]
10065d4c:	f7ee fa22 	bl	10054194 <BLEPLAT_CNTR_SmGetRemapChan>
10065d50:	0040      	lsls	r0, r0, #1
10065d52:	6931      	ldr	r1, [r6, #16]
10065d54:	5a0a      	ldrh	r2, [r1, r0]
10065d56:	1c52      	adds	r2, r2, #1
10065d58:	520a      	strh	r2, [r1, r0]
10065d5a:	7920      	ldrb	r0, [r4, #4]
10065d5c:	f7f8 faf0 	bl	1005e340 <LLC_pcl_incr_rx_packets_ucfg_weak>
10065d60:	a80e      	add	r0, sp, #56	@ 0x38
10065d62:	7e00      	ldrb	r0, [r0, #24]
10065d64:	2801      	cmp	r0, #1
10065d66:	d108      	bne.n	10065d7a <__arm_cp.0_5+0xf6>
10065d68:	6828      	ldr	r0, [r5, #0]
10065d6a:	2110      	movs	r1, #16
10065d6c:	4388      	bics	r0, r1
10065d6e:	6028      	str	r0, [r5, #0]
10065d70:	4638      	mov	r0, r7
10065d72:	f000 fa82 	bl	1006627a <llc_conn_close_event>
10065d76:	2601      	movs	r6, #1
10065d78:	e000      	b.n	10065d7c <__arm_cp.0_5+0xf8>
10065d7a:	2600      	movs	r6, #0
10065d7c:	7d65      	ldrb	r5, [r4, #21]
10065d7e:	4628      	mov	r0, r5
10065d80:	f7ee f9f7 	bl	10054172 <BLEPLAT_CNTR_SmGetMode>
10065d84:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065d86:	6809      	ldr	r1, [r1, #0]
10065d88:	2800      	cmp	r0, #0
10065d8a:	d005      	beq.n	10065d98 <__arm_cp.0_5+0x114>
10065d8c:	0748      	lsls	r0, r1, #29
10065d8e:	d405      	bmi.n	10065d9c <__arm_cp.0_5+0x118>
10065d90:	4628      	mov	r0, r5
10065d92:	f7ee f93e 	bl	10054012 <BLEPLAT_CNTR_SmEncOff>
10065d96:	e004      	b.n	10065da2 <__arm_cp.0_5+0x11e>
10065d98:	0708      	lsls	r0, r1, #28
10065d9a:	d5f9      	bpl.n	10065d90 <__arm_cp.0_5+0x10c>
10065d9c:	4628      	mov	r0, r5
10065d9e:	f7ee f94c 	bl	1005403a <BLEPLAT_CNTR_SmEncOn>
10065da2:	2e00      	cmp	r6, #0
10065da4:	d01d      	beq.n	10065de2 <__arm_cp.0_5+0x15e>
10065da6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10065da8:	69e5      	ldr	r5, [r4, #28]
10065daa:	2d00      	cmp	r5, #0
10065dac:	d015      	beq.n	10065dda <__arm_cp.0_5+0x156>
10065dae:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10065db0:	7d70      	ldrb	r0, [r6, #21]
10065db2:	f7ee f9b9 	bl	10054128 <BLEPLAT_CNTR_SmGetEncKeyPtr>
10065db6:	4602      	mov	r2, r0
10065db8:	4629      	mov	r1, r5
10065dba:	3110      	adds	r1, #16
10065dbc:	2301      	movs	r3, #1
10065dbe:	4628      	mov	r0, r5
10065dc0:	f7fd f9ee 	bl	100631a0 <BLEPLAT_aes128_encrypt>
10065dc4:	7d70      	ldrb	r0, [r6, #21]
10065dc6:	f7ee f99b 	bl	10054100 <BLEPLAT_CNTR_SmGetEncIvPtr>
10065dca:	4601      	mov	r1, r0
10065dcc:	3520      	adds	r5, #32
10065dce:	2208      	movs	r2, #8
10065dd0:	4628      	mov	r0, r5
10065dd2:	f7fd f857 	bl	10062e84 <char_copy>
10065dd6:	2000      	movs	r0, #0
10065dd8:	61e0      	str	r0, [r4, #28]
10065dda:	9808      	ldr	r0, [sp, #32]
10065ddc:	f7fa fd14 	bl	10060808 <LL_sched_engine>
10065de0:	e001      	b.n	10065de6 <__arm_cp.0_5+0x162>
10065de2:	f7ed fea8 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
10065de6:	9809      	ldr	r0, [sp, #36]	@ 0x24
10065de8:	2800      	cmp	r0, #0
10065dea:	d10c      	bne.n	10065e06 <__arm_cp.0_5+0x182>
10065dec:	f7ec feef 	bl	10052bce <BLEPLAT_CalculateRSSI>
10065df0:	287f      	cmp	r0, #127	@ 0x7f
10065df2:	d005      	beq.n	10065e00 <__arm_cp.0_5+0x17c>
10065df4:	4605      	mov	r5, r0
10065df6:	f7fa fc05 	bl	10060604 <get_rf_rx_path_compensation_db>
10065dfa:	1828      	adds	r0, r5, r0
10065dfc:	990a      	ldr	r1, [sp, #40]	@ 0x28
10065dfe:	7008      	strb	r0, [r1, #0]
10065e00:	4638      	mov	r0, r7
10065e02:	f7f8 fa9e 	bl	1005e342 <LLC_pcl_update_avg_rssi_ucfg_weak>
10065e06:	2401      	movs	r4, #1
10065e08:	4620      	mov	r0, r4
10065e0a:	f7fc fedb 	bl	10062bc4 <tsk_signal_resource_idx>
10065e0e:	f7ec f834 	bl	10051e7a <BLE_STACK_ProcessRequest>
10065e12:	4620      	mov	r0, r4
10065e14:	b019      	add	sp, #100	@ 0x64
10065e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065e18:	f7f3 fdb2 	bl	10059980 <data_length_extension_csr_ucfg_weak>
10065e1c:	2801      	cmp	r0, #1
10065e1e:	d001      	beq.n	10065e24 <__arm_cp.0_5+0x1a0>
10065e20:	201c      	movs	r0, #28
10065e22:	e000      	b.n	10065e26 <__arm_cp.0_5+0x1a2>
10065e24:	20fc      	movs	r0, #252	@ 0xfc
10065e26:	4220      	tst	r0, r4
10065e28:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10065e2a:	d00c      	beq.n	10065e46 <__arm_cp.0_5+0x1c2>
10065e2c:	7868      	ldrb	r0, [r5, #1]
10065e2e:	1f00      	subs	r0, r0, #4
10065e30:	7068      	strb	r0, [r5, #1]
10065e32:	2002      	movs	r0, #2
10065e34:	71a0      	strb	r0, [r4, #6]
10065e36:	2012      	movs	r0, #18
10065e38:	f7fc fe9c 	bl	10062b74 <tsk_notify_idx>
10065e3c:	f7ec f81d 	bl	10051e7a <BLE_STACK_ProcessRequest>
10065e40:	a80e      	add	r0, sp, #56	@ 0x38
10065e42:	7d40      	ldrb	r0, [r0, #21]
10065e44:	9003      	str	r0, [sp, #12]
10065e46:	9803      	ldr	r0, [sp, #12]
10065e48:	2803      	cmp	r0, #3
10065e4a:	d110      	bne.n	10065e6e <__arm_cp.0_5+0x1ea>
10065e4c:	a80e      	add	r0, sp, #56	@ 0x38
10065e4e:	7dc5      	ldrb	r5, [r0, #23]
10065e50:	2d02      	cmp	r5, #2
10065e52:	d117      	bne.n	10065e84 <__arm_cp.0_5+0x200>
10065e54:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065e56:	7840      	ldrb	r0, [r0, #1]
10065e58:	2802      	cmp	r0, #2
10065e5a:	d113      	bne.n	10065e84 <__arm_cp.0_5+0x200>
10065e5c:	a80e      	add	r0, sp, #56	@ 0x38
10065e5e:	2101      	movs	r1, #1
10065e60:	7701      	strb	r1, [r0, #28]
10065e62:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065e64:	6828      	ldr	r0, [r5, #0]
10065e66:	2102      	movs	r1, #2
10065e68:	4301      	orrs	r1, r0
10065e6a:	6029      	str	r1, [r5, #0]
10065e6c:	e042      	b.n	10065ef4 <__arm_cp.0_5+0x270>
10065e6e:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065e70:	7800      	ldrb	r0, [r0, #0]
10065e72:	2803      	cmp	r0, #3
10065e74:	d117      	bne.n	10065ea6 <__arm_cp.0_5+0x222>
10065e76:	7a20      	ldrb	r0, [r4, #8]
10065e78:	2800      	cmp	r0, #0
10065e7a:	d014      	beq.n	10065ea6 <__arm_cp.0_5+0x222>
10065e7c:	2002      	movs	r0, #2
10065e7e:	9910      	ldr	r1, [sp, #64]	@ 0x40
10065e80:	4301      	orrs	r1, r0
10065e82:	e04a      	b.n	10065f1a <__arm_cp.0_5+0x296>
10065e84:	4638      	mov	r0, r7
10065e86:	f7f4 fd02 	bl	1005a88e <llc_conn_get_rx_ctrl_pdu_full>
10065e8a:	2800      	cmp	r0, #0
10065e8c:	d021      	beq.n	10065ed2 <__arm_cp.0_5+0x24e>
10065e8e:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065e90:	7d40      	ldrb	r0, [r0, #21]
10065e92:	f7ee fbad 	bl	100545f0 <BLEPLAT_CNTR_SmToggleNesn>
10065e96:	2e00      	cmp	r6, #0
10065e98:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065e9a:	d02b      	beq.n	10065ef4 <__arm_cp.0_5+0x270>
10065e9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065e9e:	7d40      	ldrb	r0, [r0, #21]
10065ea0:	f000 fa61 	bl	10066366 <llc_conn_decrement_enc_count_rx>
10065ea4:	e026      	b.n	10065ef4 <__arm_cp.0_5+0x270>
10065ea6:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065ea8:	7846      	ldrb	r6, [r0, #1]
10065eaa:	f7f3 fd69 	bl	10059980 <data_length_extension_csr_ucfg_weak>
10065eae:	2801      	cmp	r0, #1
10065eb0:	d001      	beq.n	10065eb6 <__arm_cp.0_5+0x232>
10065eb2:	251f      	movs	r5, #31
10065eb4:	e001      	b.n	10065eba <__arm_cp.0_5+0x236>
10065eb6:	9806      	ldr	r0, [sp, #24]
10065eb8:	43c5      	mvns	r5, r0
10065eba:	4035      	ands	r5, r6
10065ebc:	0628      	lsls	r0, r5, #24
10065ebe:	d01e      	beq.n	10065efe <__arm_cp.0_5+0x27a>
10065ec0:	9806      	ldr	r0, [sp, #24]
10065ec2:	67b8      	str	r0, [r7, #120]	@ 0x78
10065ec4:	f7ef f86c 	bl	10054fa0 <isr_Acl_Data_Indication_Queue_Full>
10065ec8:	2800      	cmp	r0, #0
10065eca:	d01b      	beq.n	10065f04 <__arm_cp.0_5+0x280>
10065ecc:	2002      	movs	r0, #2
10065ece:	9010      	str	r0, [sp, #64]	@ 0x40
10065ed0:	e026      	b.n	10065f20 <__arm_cp.0_5+0x29c>
10065ed2:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065ed4:	7800      	ldrb	r0, [r0, #0]
10065ed6:	2803      	cmp	r0, #3
10065ed8:	d108      	bne.n	10065eec <__arm_cp.0_5+0x268>
10065eda:	2d27      	cmp	r5, #39	@ 0x27
10065edc:	d106      	bne.n	10065eec <__arm_cp.0_5+0x268>
10065ede:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065ee0:	7840      	ldrb	r0, [r0, #1]
10065ee2:	280b      	cmp	r0, #11
10065ee4:	d102      	bne.n	10065eec <__arm_cp.0_5+0x268>
10065ee6:	a80e      	add	r0, sp, #56	@ 0x38
10065ee8:	2101      	movs	r1, #1
10065eea:	7741      	strb	r1, [r0, #29]
10065eec:	a80e      	add	r0, sp, #56	@ 0x38
10065eee:	2101      	movs	r1, #1
10065ef0:	7641      	strb	r1, [r0, #25]
10065ef2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065ef4:	6828      	ldr	r0, [r5, #0]
10065ef6:	2180      	movs	r1, #128	@ 0x80
10065ef8:	4301      	orrs	r1, r0
10065efa:	6029      	str	r1, [r5, #0]
10065efc:	e014      	b.n	10065f28 <__arm_cp.0_5+0x2a4>
10065efe:	9806      	ldr	r0, [sp, #24]
10065f00:	9010      	str	r0, [sp, #64]	@ 0x40
10065f02:	e011      	b.n	10065f28 <__arm_cp.0_5+0x2a4>
10065f04:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
10065f06:	b2ea      	uxtb	r2, r5
10065f08:	9801      	ldr	r0, [sp, #4]
10065f0a:	f7ef f913 	bl	10055134 <ACL_pkt_get>
10065f0e:	67b8      	str	r0, [r7, #120]	@ 0x78
10065f10:	2800      	cmp	r0, #0
10065f12:	d001      	beq.n	10065f18 <__arm_cp.0_5+0x294>
10065f14:	9901      	ldr	r1, [sp, #4]
10065f16:	e000      	b.n	10065f1a <__arm_cp.0_5+0x296>
10065f18:	2102      	movs	r1, #2
10065f1a:	9110      	str	r1, [sp, #64]	@ 0x40
10065f1c:	0788      	lsls	r0, r1, #30
10065f1e:	d503      	bpl.n	10065f28 <__arm_cp.0_5+0x2a4>
10065f20:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065f22:	7d40      	ldrb	r0, [r0, #21]
10065f24:	f7ee fb64 	bl	100545f0 <BLEPLAT_CNTR_SmToggleNesn>
10065f28:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065f2a:	7800      	ldrb	r0, [r0, #0]
10065f2c:	8aa1      	ldrh	r1, [r4, #20]
10065f2e:	82e1      	strh	r1, [r4, #22]
10065f30:	2120      	movs	r1, #32
10065f32:	4001      	ands	r1, r0
10065f34:	a80e      	add	r0, sp, #56	@ 0x38
10065f36:	7581      	strb	r1, [r0, #22]
10065f38:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10065f3a:	2101      	movs	r1, #1
10065f3c:	4638      	mov	r0, r7
10065f3e:	9105      	str	r1, [sp, #20]
10065f40:	f7f4 fc8a 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
10065f44:	4605      	mov	r5, r0
10065f46:	463b      	mov	r3, r7
10065f48:	3328      	adds	r3, #40	@ 0x28
10065f4a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065f4c:	6801      	ldr	r1, [r0, #0]
10065f4e:	2900      	cmp	r1, #0
10065f50:	d011      	beq.n	10065f76 <__arm_cp.0_5+0x2f2>
10065f52:	7a08      	ldrb	r0, [r1, #8]
10065f54:	0700      	lsls	r0, r0, #28
10065f56:	d50e      	bpl.n	10065f76 <__arm_cp.0_5+0x2f2>
10065f58:	69c8      	ldr	r0, [r1, #28]
10065f5a:	2800      	cmp	r0, #0
10065f5c:	d00b      	beq.n	10065f76 <__arm_cp.0_5+0x2f2>
10065f5e:	42ae      	cmp	r6, r5
10065f60:	d009      	beq.n	10065f76 <__arm_cp.0_5+0x2f2>
10065f62:	429e      	cmp	r6, r3
10065f64:	d007      	beq.n	10065f76 <__arm_cp.0_5+0x2f2>
10065f66:	460c      	mov	r4, r1
10065f68:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065f6a:	6808      	ldr	r0, [r1, #0]
10065f6c:	9a02      	ldr	r2, [sp, #8]
10065f6e:	4390      	bics	r0, r2
10065f70:	6008      	str	r0, [r1, #0]
10065f72:	4621      	mov	r1, r4
10065f74:	e003      	b.n	10065f7e <__arm_cp.0_5+0x2fa>
10065f76:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10065f78:	2800      	cmp	r0, #0
10065f7a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065f7c:	d017      	beq.n	10065fae <__arm_cp.0_5+0x32a>
10065f7e:	42ae      	cmp	r6, r5
10065f80:	9303      	str	r3, [sp, #12]
10065f82:	d018      	beq.n	10065fb6 <__arm_cp.0_5+0x332>
10065f84:	429e      	cmp	r6, r3
10065f86:	d025      	beq.n	10065fd4 <__arm_cp.0_5+0x350>
10065f88:	6948      	ldr	r0, [r1, #20]
10065f8a:	6188      	str	r0, [r1, #24]
10065f8c:	460e      	mov	r6, r1
10065f8e:	7b09      	ldrb	r1, [r1, #12]
10065f90:	9d06      	ldr	r5, [sp, #24]
10065f92:	7335      	strb	r5, [r6, #12]
10065f94:	8a32      	ldrh	r2, [r6, #16]
10065f96:	1851      	adds	r1, r2, r1
10065f98:	8231      	strh	r1, [r6, #16]
10065f9a:	b28a      	uxth	r2, r1
10065f9c:	8873      	ldrh	r3, [r6, #2]
10065f9e:	429a      	cmp	r2, r3
10065fa0:	d21a      	bcs.n	10065fd8 <__arm_cp.0_5+0x354>
10065fa2:	89f2      	ldrh	r2, [r6, #14]
10065fa4:	1851      	adds	r1, r2, r1
10065fa6:	06c9      	lsls	r1, r1, #27
10065fa8:	d019      	beq.n	10065fde <__arm_cp.0_5+0x35a>
10065faa:	4634      	mov	r4, r6
10065fac:	e01a      	b.n	10065fe4 <__arm_cp.0_5+0x360>
10065fae:	f7ed fdc2 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
10065fb2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065fb4:	e0e3      	b.n	1006617e <__arm_cp.0_5+0x4fa>
10065fb6:	460c      	mov	r4, r1
10065fb8:	2103      	movs	r1, #3
10065fba:	4638      	mov	r0, r7
10065fbc:	f7f4 ff14 	bl	1005ade8 <llc_conn_set_tx_ctrl_pdu_state>
10065fc0:	4638      	mov	r0, r7
10065fc2:	f7ed fe80 	bl	10053cc6 <BLEPLAT_CNTR_PacketClrCteSamplingEn>
10065fc6:	78a8      	ldrb	r0, [r5, #2]
10065fc8:	2827      	cmp	r0, #39	@ 0x27
10065fca:	d10e      	bne.n	10065fea <__arm_cp.0_5+0x366>
10065fcc:	a80e      	add	r0, sp, #56	@ 0x38
10065fce:	2101      	movs	r1, #1
10065fd0:	7741      	strb	r1, [r0, #29]
10065fd2:	e00a      	b.n	10065fea <__arm_cp.0_5+0x366>
10065fd4:	460c      	mov	r4, r1
10065fd6:	e008      	b.n	10065fea <__arm_cp.0_5+0x366>
10065fd8:	69f4      	ldr	r4, [r6, #28]
10065fda:	2504      	movs	r5, #4
10065fdc:	e002      	b.n	10065fe4 <__arm_cp.0_5+0x360>
10065fde:	6800      	ldr	r0, [r0, #0]
10065fe0:	4634      	mov	r4, r6
10065fe2:	61b0      	str	r0, [r6, #24]
10065fe4:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065fe6:	4328      	orrs	r0, r5
10065fe8:	9010      	str	r0, [sp, #64]	@ 0x40
10065fea:	4638      	mov	r0, r7
10065fec:	f7f4 fc5b 	bl	1005a8a6 <llc_conn_get_tx_acl_blocked>
10065ff0:	4605      	mov	r5, r0
10065ff2:	4638      	mov	r0, r7
10065ff4:	f7f4 fc5d 	bl	1005a8b2 <llc_conn_get_tx_ctrl_pdu_state>
10065ff8:	a90e      	add	r1, sp, #56	@ 0x38
10065ffa:	7f0e      	ldrb	r6, [r1, #28]
10065ffc:	2e00      	cmp	r6, #0
10065ffe:	d124      	bne.n	1006604a <__arm_cp.0_5+0x3c6>
10066000:	2801      	cmp	r0, #1
10066002:	d122      	bne.n	1006604a <__arm_cp.0_5+0x3c6>
10066004:	2101      	movs	r1, #1
10066006:	4638      	mov	r0, r7
10066008:	9106      	str	r1, [sp, #24]
1006600a:	f7f4 fc25 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
1006600e:	4606      	mov	r6, r0
10066010:	4638      	mov	r0, r7
10066012:	4631      	mov	r1, r6
10066014:	f7ed febf 	bl	10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>
10066018:	4632      	mov	r2, r6
1006601a:	7830      	ldrb	r0, [r6, #0]
1006601c:	0680      	lsls	r0, r0, #26
1006601e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066020:	d421      	bmi.n	10066066 <__arm_cp.0_5+0x3e2>
10066022:	7890      	ldrb	r0, [r2, #2]
10066024:	2827      	cmp	r0, #39	@ 0x27
10066026:	d04c      	beq.n	100660c2 <__arm_cp.0_5+0x43e>
10066028:	4615      	mov	r5, r2
1006602a:	2802      	cmp	r0, #2
1006602c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006602e:	d152      	bne.n	100660d6 <__arm_cp.0_5+0x452>
10066030:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066032:	6808      	ldr	r0, [r1, #0]
10066034:	9a06      	ldr	r2, [sp, #24]
10066036:	4310      	orrs	r0, r2
10066038:	6008      	str	r0, [r1, #0]
1006603a:	7d60      	ldrb	r0, [r4, #21]
1006603c:	211f      	movs	r1, #31
1006603e:	460a      	mov	r2, r1
10066040:	f7fa fda8 	bl	10060b94 <LL_sched_set_priority>
10066044:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10066046:	6738      	str	r0, [r7, #112]	@ 0x70
10066048:	e045      	b.n	100660d6 <__arm_cp.0_5+0x452>
1006604a:	f7ee ffb7 	bl	10054fbc <isr_Acl_Data_TX_Cmpl_Queue_Full>
1006604e:	2800      	cmp	r0, #0
10066050:	d018      	beq.n	10066084 <__arm_cp.0_5+0x400>
10066052:	f7ed fd70 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
10066056:	980e      	ldr	r0, [sp, #56]	@ 0x38
10066058:	2800      	cmp	r0, #0
1006605a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
1006605c:	d009      	beq.n	10066072 <__arm_cp.0_5+0x3ee>
1006605e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066060:	9903      	ldr	r1, [sp, #12]
10066062:	9805      	ldr	r0, [sp, #20]
10066064:	e008      	b.n	10066078 <__arm_cp.0_5+0x3f4>
10066066:	4615      	mov	r5, r2
10066068:	4638      	mov	r0, r7
1006606a:	f7ed fe87 	bl	10053d7c <BLEPLAT_CNTR_PacketSetCteSamplingEn>
1006606e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10066070:	e031      	b.n	100660d6 <__arm_cp.0_5+0x452>
10066072:	2011      	movs	r0, #17
10066074:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10066076:	9903      	ldr	r1, [sp, #12]
10066078:	8538      	strh	r0, [r7, #40]	@ 0x28
1006607a:	4638      	mov	r0, r7
1006607c:	460d      	mov	r5, r1
1006607e:	f7ed fe8a 	bl	10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>
10066082:	e071      	b.n	10066168 <__arm_cp.0_5+0x4e4>
10066084:	2c00      	cmp	r4, #0
10066086:	d0e4      	beq.n	10066052 <__arm_cp.0_5+0x3ce>
10066088:	2d01      	cmp	r5, #1
1006608a:	d0e2      	beq.n	10066052 <__arm_cp.0_5+0x3ce>
1006608c:	2e01      	cmp	r6, #1
1006608e:	d0e0      	beq.n	10066052 <__arm_cp.0_5+0x3ce>
10066090:	f7ed fd51 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
10066094:	4877      	ldr	r0, [pc, #476]	@ (10066274 <__arm_cp.0_2>)
10066096:	6800      	ldr	r0, [r0, #0]
10066098:	218c      	movs	r1, #140	@ 0x8c
1006609a:	5840      	ldr	r0, [r0, r1]
1006609c:	8a21      	ldrh	r1, [r4, #16]
1006609e:	89e2      	ldrh	r2, [r4, #14]
100660a0:	1851      	adds	r1, r2, r1
100660a2:	221f      	movs	r2, #31
100660a4:	400a      	ands	r2, r1
100660a6:	1810      	adds	r0, r2, r0
100660a8:	1c81      	adds	r1, r0, #2
100660aa:	4638      	mov	r0, r7
100660ac:	460d      	mov	r5, r1
100660ae:	f7ed fe72 	bl	10053d96 <BLEPLAT_CNTR_PacketSetDataPtr>
100660b2:	4638      	mov	r0, r7
100660b4:	4621      	mov	r1, r4
100660b6:	f7f4 fb23 	bl	1005a700 <llc_conn_copy_tx_data_packet>
100660ba:	67fc      	str	r4, [r7, #124]	@ 0x7c
100660bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
100660be:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100660c0:	e052      	b.n	10066168 <__arm_cp.0_5+0x4e4>
100660c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
100660c4:	7d88      	ldrb	r0, [r1, #22]
100660c6:	7150      	strb	r0, [r2, #5]
100660c8:	7dc8      	ldrb	r0, [r1, #23]
100660ca:	4615      	mov	r5, r2
100660cc:	7190      	strb	r0, [r2, #6]
100660ce:	2000      	movs	r0, #0
100660d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100660d2:	8290      	strh	r0, [r2, #20]
100660d4:	460c      	mov	r4, r1
100660d6:	6970      	ldr	r0, [r6, #20]
100660d8:	6800      	ldr	r0, [r0, #0]
100660da:	0701      	lsls	r1, r0, #28
100660dc:	d415      	bmi.n	1006610a <__arm_cp.0_5+0x486>
100660de:	0680      	lsls	r0, r0, #26
100660e0:	d510      	bpl.n	10066104 <__arm_cp.0_5+0x480>
100660e2:	7d60      	ldrb	r0, [r4, #21]
100660e4:	f7ed ff95 	bl	10054012 <BLEPLAT_CNTR_SmEncOff>
100660e8:	6970      	ldr	r0, [r6, #20]
100660ea:	6801      	ldr	r1, [r0, #0]
100660ec:	2220      	movs	r2, #32
100660ee:	4391      	bics	r1, r2
100660f0:	6001      	str	r1, [r0, #0]
100660f2:	68b0      	ldr	r0, [r6, #8]
100660f4:	2104      	movs	r1, #4
100660f6:	4388      	bics	r0, r1
100660f8:	60b0      	str	r0, [r6, #8]
100660fa:	2012      	movs	r0, #18
100660fc:	f7fc fd3a 	bl	10062b74 <tsk_notify_idx>
10066100:	f7eb febb 	bl	10051e7a <BLE_STACK_ProcessRequest>
10066104:	f7ed fd17 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
10066108:	e01f      	b.n	1006614a <__arm_cp.0_5+0x4c6>
1006610a:	2000      	movs	r0, #0
1006610c:	9017      	str	r0, [sp, #92]	@ 0x5c
1006610e:	9016      	str	r0, [sp, #88]	@ 0x58
10066110:	7d60      	ldrb	r0, [r4, #21]
10066112:	f7ed ff92 	bl	1005403a <BLEPLAT_CNTR_SmEncOn>
10066116:	7d60      	ldrb	r0, [r4, #21]
10066118:	a916      	add	r1, sp, #88	@ 0x58
1006611a:	f7ee f9d3 	bl	100544c4 <BLEPLAT_CNTR_SmSetTxCount>
1006611e:	7820      	ldrb	r0, [r4, #0]
10066120:	2802      	cmp	r0, #2
10066122:	d102      	bne.n	1006612a <__arm_cp.0_5+0x4a6>
10066124:	7d60      	ldrb	r0, [r4, #21]
10066126:	f7ee f9e9 	bl	100544fc <BLEPLAT_CNTR_SmSetTxCountDirectionBit>
1006612a:	f7ed fd04 	bl	10053b36 <BLEPLAT_CNTR_GlobEnableBlue>
1006612e:	6970      	ldr	r0, [r6, #20]
10066130:	6801      	ldr	r1, [r0, #0]
10066132:	2208      	movs	r2, #8
10066134:	4391      	bics	r1, r2
10066136:	6001      	str	r1, [r0, #0]
10066138:	68b0      	ldr	r0, [r6, #8]
1006613a:	2104      	movs	r1, #4
1006613c:	4301      	orrs	r1, r0
1006613e:	60b1      	str	r1, [r6, #8]
10066140:	2012      	movs	r0, #18
10066142:	f7fc fd17 	bl	10062b74 <tsk_notify_idx>
10066146:	f7eb fe98 	bl	10051e7a <BLE_STACK_ProcessRequest>
1006614a:	2102      	movs	r1, #2
1006614c:	4638      	mov	r0, r7
1006614e:	f7f4 fe4b 	bl	1005ade8 <llc_conn_set_tx_ctrl_pdu_state>
10066152:	6970      	ldr	r0, [r6, #20]
10066154:	6801      	ldr	r1, [r0, #0]
10066156:	074a      	lsls	r2, r1, #29
10066158:	d506      	bpl.n	10066168 <__arm_cp.0_5+0x4e4>
1006615a:	2204      	movs	r2, #4
1006615c:	4391      	bics	r1, r2
1006615e:	6001      	str	r1, [r0, #0]
10066160:	8b70      	ldrh	r0, [r6, #26]
10066162:	9906      	ldr	r1, [sp, #24]
10066164:	4308      	orrs	r0, r1
10066166:	8370      	strh	r0, [r6, #26]
10066168:	2101      	movs	r1, #1
1006616a:	4638      	mov	r0, r7
1006616c:	f7f4 fb7a 	bl	1005a864 <llc_conn_get_enc_on>
10066170:	2801      	cmp	r0, #1
10066172:	d104      	bne.n	1006617e <__arm_cp.0_5+0x4fa>
10066174:	7868      	ldrb	r0, [r5, #1]
10066176:	2800      	cmp	r0, #0
10066178:	d001      	beq.n	1006617e <__arm_cp.0_5+0x4fa>
1006617a:	1d00      	adds	r0, r0, #4
1006617c:	7068      	strb	r0, [r5, #1]
1006617e:	9810      	ldr	r0, [sp, #64]	@ 0x40
10066180:	0781      	lsls	r1, r0, #30
10066182:	d507      	bpl.n	10066194 <__arm_cp.0_5+0x510>
10066184:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066186:	7809      	ldrb	r1, [r1, #0]
10066188:	0709      	lsls	r1, r1, #28
1006618a:	d503      	bpl.n	10066194 <__arm_cp.0_5+0x510>
1006618c:	7d60      	ldrb	r0, [r4, #21]
1006618e:	f000 f8ea 	bl	10066366 <llc_conn_decrement_enc_count_rx>
10066192:	9810      	ldr	r0, [sp, #64]	@ 0x40
10066194:	0741      	lsls	r1, r0, #29
10066196:	d505      	bpl.n	100661a4 <__arm_cp.0_5+0x520>
10066198:	4630      	mov	r0, r6
1006619a:	f7fc ff07 	bl	10062fac <ACL_list_remove_head>
1006619e:	f7ee ff37 	bl	10055010 <Acl_Tx_Cmpl_Pkt_Handler>
100661a2:	9810      	ldr	r0, [sp, #64]	@ 0x40
100661a4:	07c0      	lsls	r0, r0, #31
100661a6:	d01e      	beq.n	100661e6 <__arm_cp.0_5+0x562>
100661a8:	9811      	ldr	r0, [sp, #68]	@ 0x44
100661aa:	7844      	ldrb	r4, [r0, #1]
100661ac:	2600      	movs	r6, #0
100661ae:	f7f3 fbe7 	bl	10059980 <data_length_extension_csr_ucfg_weak>
100661b2:	2801      	cmp	r0, #1
100661b4:	d001      	beq.n	100661ba <__arm_cp.0_5+0x536>
100661b6:	251f      	movs	r5, #31
100661b8:	e000      	b.n	100661bc <__arm_cp.0_5+0x538>
100661ba:	43f5      	mvns	r5, r6
100661bc:	4025      	ands	r5, r4
100661be:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
100661c0:	6840      	ldr	r0, [r0, #4]
100661c2:	9911      	ldr	r1, [sp, #68]	@ 0x44
100661c4:	1c89      	adds	r1, r1, #2
100661c6:	462a      	mov	r2, r5
100661c8:	f7fb f87a 	bl	100612c0 <Mem_Buff_block_write>
100661cc:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
100661ce:	61c6      	str	r6, [r0, #28]
100661d0:	8045      	strh	r5, [r0, #2]
100661d2:	9911      	ldr	r1, [sp, #68]	@ 0x44
100661d4:	7809      	ldrb	r1, [r1, #0]
100661d6:	2203      	movs	r2, #3
100661d8:	400a      	ands	r2, r1
100661da:	7a01      	ldrb	r1, [r0, #8]
100661dc:	4311      	orrs	r1, r2
100661de:	7201      	strb	r1, [r0, #8]
100661e0:	f7ee fefa 	bl	10054fd8 <Acl_Rcv_Pkt_Handler>
100661e4:	67be      	str	r6, [r7, #120]	@ 0x78
100661e6:	a80e      	add	r0, sp, #56	@ 0x38
100661e8:	7e40      	ldrb	r0, [r0, #25]
100661ea:	2801      	cmp	r0, #1
100661ec:	d131      	bne.n	10066252 <__arm_cp.0_5+0x5ce>
100661ee:	2100      	movs	r1, #0
100661f0:	4638      	mov	r0, r7
100661f2:	f7f4 fb31 	bl	1005a858 <llc_conn_get_ctrl_pdu_data_p>
100661f6:	4605      	mov	r5, r0
100661f8:	9811      	ldr	r0, [sp, #68]	@ 0x44
100661fa:	7801      	ldrb	r1, [r0, #0]
100661fc:	7840      	ldrb	r0, [r0, #1]
100661fe:	0200      	lsls	r0, r0, #8
10066200:	1840      	adds	r0, r0, r1
10066202:	8028      	strh	r0, [r5, #0]
10066204:	f7f5 fe0a 	bl	1005be1c <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10066208:	4606      	mov	r6, r0
1006620a:	f7f5 fdfd 	bl	1005be08 <cis_csr_ucfg_weak>
1006620e:	4330      	orrs	r0, r6
10066210:	b2c0      	uxtb	r0, r0
10066212:	f7fa fa13 	bl	1006063c <LL_get_control_pdu_size>
10066216:	a90e      	add	r1, sp, #56	@ 0x38
10066218:	7d89      	ldrb	r1, [r1, #22]
1006621a:	2920      	cmp	r1, #32
1006621c:	d001      	beq.n	10066222 <__arm_cp.0_5+0x59e>
1006621e:	2102      	movs	r1, #2
10066220:	e000      	b.n	10066224 <__arm_cp.0_5+0x5a0>
10066222:	2103      	movs	r1, #3
10066224:	9a11      	ldr	r2, [sp, #68]	@ 0x44
10066226:	1851      	adds	r1, r2, r1
10066228:	1f00      	subs	r0, r0, #4
1006622a:	b2c3      	uxtb	r3, r0
1006622c:	7852      	ldrb	r2, [r2, #1]
1006622e:	429a      	cmp	r2, r3
10066230:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10066232:	d300      	bcc.n	10066236 <__arm_cp.0_5+0x5b2>
10066234:	4602      	mov	r2, r0
10066236:	b2d2      	uxtb	r2, r2
10066238:	1ca8      	adds	r0, r5, #2
1006623a:	f7ec fc05 	bl	10052a48 <BLEPLAT_MemCpy>
1006623e:	6920      	ldr	r0, [r4, #16]
10066240:	6801      	ldr	r1, [r0, #0]
10066242:	2201      	movs	r2, #1
10066244:	430a      	orrs	r2, r1
10066246:	6002      	str	r2, [r0, #0]
10066248:	2015      	movs	r0, #21
1006624a:	f7fc fc93 	bl	10062b74 <tsk_notify_idx>
1006624e:	f7eb fe14 	bl	10051e7a <BLE_STACK_ProcessRequest>
10066252:	ad0e      	add	r5, sp, #56	@ 0x38
10066254:	4638      	mov	r0, r7
10066256:	4629      	mov	r1, r5
10066258:	f000 f80e 	bl	10066278 <llc_conn_check_subrate_and_set_params_ucfg_weak>
1006625c:	7da8      	ldrb	r0, [r5, #22]
1006625e:	2820      	cmp	r0, #32
10066260:	d000      	beq.n	10066264 <__arm_cp.0_5+0x5e0>
10066262:	e495      	b.n	10065b90 <llc_conn_isr+0x300>
10066264:	9811      	ldr	r0, [sp, #68]	@ 0x44
10066266:	7880      	ldrb	r0, [r0, #2]
10066268:	0981      	lsrs	r1, r0, #6
1006626a:	4638      	mov	r0, r7
1006626c:	f7f7 f953 	bl	1005d516 <llc_cte_process_rx_cte_ucfg_weak>
10066270:	e48e      	b.n	10065b90 <llc_conn_isr+0x300>
10066272:	46c0      	nop			@ (mov r8, r8)

10066274 <__arm_cp.0_2>:
10066274:	20002468 	.word	0x20002468

10066278 <llc_conn_check_subrate_and_set_params_ucfg_weak>:
10066278:	4770      	bx	lr

1006627a <llc_conn_close_event>:
1006627a:	b5f0      	push	{r4, r5, r6, r7, lr}
1006627c:	b085      	sub	sp, #20
1006627e:	4605      	mov	r5, r0
10066280:	2045      	movs	r0, #69	@ 0x45
10066282:	0080      	lsls	r0, r0, #2
10066284:	9003      	str	r0, [sp, #12]
10066286:	5828      	ldr	r0, [r5, r0]
10066288:	462e      	mov	r6, r5
1006628a:	3642      	adds	r6, #66	@ 0x42
1006628c:	2800      	cmp	r0, #0
1006628e:	d002      	beq.n	10066296 <llc_conn_close_event+0x1c>
10066290:	8881      	ldrh	r1, [r0, #4]
10066292:	1c49      	adds	r1, r1, #1
10066294:	8081      	strh	r1, [r0, #4]
10066296:	462c      	mov	r4, r5
10066298:	3480      	adds	r4, #128	@ 0x80
1006629a:	4628      	mov	r0, r5
1006629c:	f7f5 fe51 	bl	1005bf42 <llc_subrate_update_cont_counter_ucfg_weak>
100662a0:	6c68      	ldr	r0, [r5, #68]	@ 0x44
100662a2:	9002      	str	r0, [sp, #8]
100662a4:	8837      	ldrh	r7, [r6, #0]
100662a6:	4628      	mov	r0, r5
100662a8:	f7f4 fa70 	bl	1005a78c <llc_conn_enhanced_get_latency>
100662ac:	4602      	mov	r2, r0
100662ae:	4628      	mov	r0, r5
100662b0:	4639      	mov	r1, r7
100662b2:	f7f4 fdaa 	bl	1005ae0a <llc_conn_calc_skip_ucfg_weak>
100662b6:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
100662b8:	4342      	muls	r2, r0
100662ba:	6c69      	ldr	r1, [r5, #68]	@ 0x44
100662bc:	1889      	adds	r1, r1, r2
100662be:	6469      	str	r1, [r5, #68]	@ 0x44
100662c0:	9001      	str	r0, [sp, #4]
100662c2:	1838      	adds	r0, r7, r0
100662c4:	9004      	str	r0, [sp, #16]
100662c6:	b287      	uxth	r7, r0
100662c8:	8830      	ldrh	r0, [r6, #0]
100662ca:	42b8      	cmp	r0, r7
100662cc:	d907      	bls.n	100662de <llc_conn_close_event+0x64>
100662ce:	9803      	ldr	r0, [sp, #12]
100662d0:	1828      	adds	r0, r5, r0
100662d2:	2109      	movs	r1, #9
100662d4:	0149      	lsls	r1, r1, #5
100662d6:	1869      	adds	r1, r5, r1
100662d8:	89c0      	ldrh	r0, [r0, #14]
100662da:	f7f5 fe31 	bl	1005bf40 <llc_subrate_new_sr_base_event_ucfg_weak>
100662de:	68a0      	ldr	r0, [r4, #8]
100662e0:	2180      	movs	r1, #128	@ 0x80
100662e2:	4388      	bics	r0, r1
100662e4:	60a0      	str	r0, [r4, #8]
100662e6:	4628      	mov	r0, r5
100662e8:	4639      	mov	r1, r7
100662ea:	f7f4 fe31 	bl	1005af50 <llc_conn_check_instant_and_set_params>
100662ee:	4607      	mov	r7, r0
100662f0:	9804      	ldr	r0, [sp, #16]
100662f2:	8030      	strh	r0, [r6, #0]
100662f4:	2f00      	cmp	r7, #0
100662f6:	d118      	bne.n	1006632a <llc_conn_close_event+0xb0>
100662f8:	6c68      	ldr	r0, [r5, #68]	@ 0x44
100662fa:	9902      	ldr	r1, [sp, #8]
100662fc:	1a46      	subs	r6, r0, r1
100662fe:	4628      	mov	r0, r5
10066300:	4631      	mov	r1, r6
10066302:	f7f4 feb9 	bl	1005b078 <llc_conn_check_supervision_timer>
10066306:	4607      	mov	r7, r0
10066308:	2800      	cmp	r0, #0
1006630a:	d10e      	bne.n	1006632a <llc_conn_close_event+0xb0>
1006630c:	4628      	mov	r0, r5
1006630e:	4631      	mov	r1, r6
10066310:	f7f4 fde8 	bl	1005aee4 <llc_conn_check_ctrl_proc_rsp_timer>
10066314:	4607      	mov	r7, r0
10066316:	2800      	cmp	r0, #0
10066318:	d107      	bne.n	1006632a <llc_conn_close_event+0xb0>
1006631a:	4628      	mov	r0, r5
1006631c:	4631      	mov	r1, r6
1006631e:	9a01      	ldr	r2, [sp, #4]
10066320:	f7f5 fb1c 	bl	1005b95c <llc_conn_set_taskslot_params>
10066324:	4607      	mov	r7, r0
10066326:	2800      	cmp	r0, #0
10066328:	d006      	beq.n	10066338 <llc_conn_close_event+0xbe>
1006632a:	352d      	adds	r5, #45	@ 0x2d
1006632c:	7d28      	ldrb	r0, [r5, #20]
1006632e:	f7fa fc5b 	bl	10060be8 <LL_sched_delete_taskslot>
10066332:	702f      	strb	r7, [r5, #0]
10066334:	2000      	movs	r0, #0
10066336:	8360      	strh	r0, [r4, #26]
10066338:	6820      	ldr	r0, [r4, #0]
1006633a:	2800      	cmp	r0, #0
1006633c:	d001      	beq.n	10066342 <llc_conn_close_event+0xc8>
1006633e:	69c6      	ldr	r6, [r0, #28]
10066340:	e00d      	b.n	1006635e <llc_conn_close_event+0xe4>
10066342:	2600      	movs	r6, #0
10066344:	e00b      	b.n	1006635e <llc_conn_close_event+0xe4>
10066346:	4635      	mov	r5, r6
10066348:	69f6      	ldr	r6, [r6, #28]
1006634a:	7a28      	ldrb	r0, [r5, #8]
1006634c:	0700      	lsls	r0, r0, #28
1006634e:	d506      	bpl.n	1006635e <llc_conn_close_event+0xe4>
10066350:	4620      	mov	r0, r4
10066352:	4629      	mov	r1, r5
10066354:	f7fc fe14 	bl	10062f80 <ACL_list_remove>
10066358:	4628      	mov	r0, r5
1006635a:	f7ee ff0d 	bl	10055178 <ACL_pkt_release>
1006635e:	2e00      	cmp	r6, #0
10066360:	d1f1      	bne.n	10066346 <llc_conn_close_event+0xcc>
10066362:	b005      	add	sp, #20
10066364:	bdf0      	pop	{r4, r5, r6, r7, pc}

10066366 <llc_conn_decrement_enc_count_rx>:
10066366:	b51c      	push	{r2, r3, r4, lr}
10066368:	4604      	mov	r4, r0
1006636a:	4669      	mov	r1, sp
1006636c:	f7ed ff23 	bl	100541b6 <BLEPLAT_CNTR_SmGetRxCount>
10066370:	9800      	ldr	r0, [sp, #0]
10066372:	1e41      	subs	r1, r0, #1
10066374:	9100      	str	r1, [sp, #0]
10066376:	2800      	cmp	r0, #0
10066378:	d102      	bne.n	10066380 <llc_conn_decrement_enc_count_rx+0x1a>
1006637a:	9801      	ldr	r0, [sp, #4]
1006637c:	1e40      	subs	r0, r0, #1
1006637e:	9001      	str	r0, [sp, #4]
10066380:	4669      	mov	r1, sp
10066382:	4620      	mov	r0, r4
10066384:	f7ee f82a 	bl	100543dc <BLEPLAT_CNTR_SmSetRxCount>
10066388:	bd1c      	pop	{r2, r3, r4, pc}
	...

1006638c <llc_check_sreq_or_creq_tx_addr_res_off>:
1006638c:	b570      	push	{r4, r5, r6, lr}
1006638e:	b084      	sub	sp, #16
10066390:	4615      	mov	r5, r2
10066392:	460a      	mov	r2, r1
10066394:	4604      	mov	r4, r0
10066396:	2b00      	cmp	r3, #0
10066398:	d007      	beq.n	100663aa <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
1006639a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006639c:	4282      	cmp	r2, r0
1006639e:	d11f      	bne.n	100663e0 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
100663a0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100663a2:	4068      	eors	r0, r5
100663a4:	0200      	lsls	r0, r0, #8
100663a6:	d11b      	bne.n	100663e0 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
100663a8:	e01b      	b.n	100663e2 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100663aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
100663ac:	9908      	ldr	r1, [sp, #32]
100663ae:	2301      	movs	r3, #1
100663b0:	2900      	cmp	r1, #0
100663b2:	d002      	beq.n	100663ba <llc_check_sreq_or_creq_tx_addr_res_off+0x2e>
100663b4:	4606      	mov	r6, r0
100663b6:	401e      	ands	r6, r3
100663b8:	d104      	bne.n	100663c4 <llc_check_sreq_or_creq_tx_addr_res_off+0x38>
100663ba:	2900      	cmp	r1, #0
100663bc:	d111      	bne.n	100663e2 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100663be:	2102      	movs	r1, #2
100663c0:	4008      	ands	r0, r1
100663c2:	d00e      	beq.n	100663e2 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100663c4:	4808      	ldr	r0, [pc, #32]	@ (100663e8 <__arm_cp.1_0>)
100663c6:	6800      	ldr	r0, [r0, #0]
100663c8:	219c      	movs	r1, #156	@ 0x9c
100663ca:	5841      	ldr	r1, [r0, r1]
100663cc:	68c8      	ldr	r0, [r1, #12]
100663ce:	6909      	ldr	r1, [r1, #16]
100663d0:	ae03      	add	r6, sp, #12
100663d2:	9300      	str	r3, [sp, #0]
100663d4:	9601      	str	r6, [sp, #4]
100663d6:	462b      	mov	r3, r5
100663d8:	f7fc fdfc 	bl	10062fd4 <addr8_list_search>
100663dc:	2800      	cmp	r0, #0
100663de:	d100      	bne.n	100663e2 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100663e0:	24ff      	movs	r4, #255	@ 0xff
100663e2:	4620      	mov	r0, r4
100663e4:	b004      	add	sp, #16
100663e6:	bd70      	pop	{r4, r5, r6, pc}

100663e8 <__arm_cp.1_0>:
100663e8:	20002468 	.word	0x20002468

100663ec <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
100663ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100663ee:	b087      	sub	sp, #28
100663f0:	1ecd      	subs	r5, r1, #3
100663f2:	21ff      	movs	r1, #255	@ 0xff
100663f4:	24fd      	movs	r4, #253	@ 0xfd
100663f6:	4225      	tst	r5, r4
100663f8:	d11c      	bne.n	10066434 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
100663fa:	2a00      	cmp	r2, #0
100663fc:	d01a      	beq.n	10066434 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
100663fe:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10066400:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066402:	680c      	ldr	r4, [r1, #0]
10066404:	9405      	str	r4, [sp, #20]
10066406:	9306      	str	r3, [sp, #24]
10066408:	684b      	ldr	r3, [r1, #4]
1006640a:	c882      	ldmia	r0!, {r1, r7}
1006640c:	20ff      	movs	r0, #255	@ 0xff
1006640e:	0600      	lsls	r0, r0, #24
10066410:	463c      	mov	r4, r7
10066412:	4384      	bics	r4, r0
10066414:	c612      	stmia	r6!, {r1, r4}
10066416:	9303      	str	r3, [sp, #12]
10066418:	9805      	ldr	r0, [sp, #20]
1006641a:	9002      	str	r0, [sp, #8]
1006641c:	9806      	ldr	r0, [sp, #24]
1006641e:	9001      	str	r0, [sp, #4]
10066420:	4268      	negs	r0, r5
10066422:	4168      	adcs	r0, r5
10066424:	9000      	str	r0, [sp, #0]
10066426:	b2c8      	uxtb	r0, r1
10066428:	0752      	lsls	r2, r2, #29
1006642a:	0fd3      	lsrs	r3, r2, #31
1006642c:	463a      	mov	r2, r7
1006642e:	f7ff ffad 	bl	1006638c <llc_check_sreq_or_creq_tx_addr_res_off>
10066432:	4601      	mov	r1, r0
10066434:	4608      	mov	r0, r1
10066436:	b007      	add	sp, #28
10066438:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1006643c <llc_wl_mem_allocate>:
1006643c:	b510      	push	{r4, lr}
1006643e:	2401      	movs	r4, #1
10066440:	4084      	lsls	r4, r0
10066442:	2108      	movs	r1, #8
10066444:	4620      	mov	r0, r4
10066446:	f7fa fdbf 	bl	10060fc8 <csmem_mem_0_assign>
1006644a:	4903      	ldr	r1, [pc, #12]	@ (10066458 <__arm_cp.0_0>)
1006644c:	6809      	ldr	r1, [r1, #0]
1006644e:	229c      	movs	r2, #156	@ 0x9c
10066450:	5889      	ldr	r1, [r1, r2]
10066452:	744c      	strb	r4, [r1, #17]
10066454:	60c8      	str	r0, [r1, #12]
10066456:	bd10      	pop	{r4, pc}

10066458 <__arm_cp.0_0>:
10066458:	20002468 	.word	0x20002468

1006645c <llc_padv_mem_allocate_ucfg_weak>:
1006645c:	4770      	bx	lr

1006645e <llc_padv_init_ucfg_weak>:
1006645e:	4770      	bx	lr

10066460 <llc_past_mem_allocate_ucfg_weak>:
10066460:	4770      	bx	lr
	...

10066464 <llc_priv_mem_allocate>:
10066464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066466:	2800      	cmp	r0, #0
10066468:	d046      	beq.n	100664f8 <llc_priv_mem_allocate+0x94>
1006646a:	460e      	mov	r6, r1
1006646c:	2501      	movs	r5, #1
1006646e:	2168      	movs	r1, #104	@ 0x68
10066470:	4628      	mov	r0, r5
10066472:	f7fa fda9 	bl	10060fc8 <csmem_mem_0_assign>
10066476:	4f21      	ldr	r7, [pc, #132]	@ (100664fc <__arm_cp.0_0>)
10066478:	6839      	ldr	r1, [r7, #0]
1006647a:	249c      	movs	r4, #156	@ 0x9c
1006647c:	5909      	ldr	r1, [r1, r4]
1006647e:	6088      	str	r0, [r1, #8]
10066480:	40b5      	lsls	r5, r6
10066482:	b2ee      	uxtb	r6, r5
10066484:	2108      	movs	r1, #8
10066486:	4630      	mov	r0, r6
10066488:	f7fa fd9e 	bl	10060fc8 <csmem_mem_0_assign>
1006648c:	6839      	ldr	r1, [r7, #0]
1006648e:	5909      	ldr	r1, [r1, r4]
10066490:	6889      	ldr	r1, [r1, #8]
10066492:	724d      	strb	r5, [r1, #9]
10066494:	6048      	str	r0, [r1, #4]
10066496:	9600      	str	r6, [sp, #0]
10066498:	0075      	lsls	r5, r6, #1
1006649a:	2611      	movs	r6, #17
1006649c:	2e21      	cmp	r6, #33	@ 0x21
1006649e:	d00f      	beq.n	100664c0 <llc_priv_mem_allocate+0x5c>
100664a0:	2108      	movs	r1, #8
100664a2:	4628      	mov	r0, r5
100664a4:	f7fa fd90 	bl	10060fc8 <csmem_mem_0_assign>
100664a8:	6839      	ldr	r1, [r7, #0]
100664aa:	5909      	ldr	r1, [r1, r4]
100664ac:	6889      	ldr	r1, [r1, #8]
100664ae:	1989      	adds	r1, r1, r6
100664b0:	1f49      	subs	r1, r1, #5
100664b2:	6008      	str	r0, [r1, #0]
100664b4:	6838      	ldr	r0, [r7, #0]
100664b6:	5900      	ldr	r0, [r0, r4]
100664b8:	6880      	ldr	r0, [r0, #8]
100664ba:	5585      	strb	r5, [r0, r6]
100664bc:	3608      	adds	r6, #8
100664be:	e7ed      	b.n	1006649c <llc_priv_mem_allocate+0x38>
100664c0:	2128      	movs	r1, #40	@ 0x28
100664c2:	9800      	ldr	r0, [sp, #0]
100664c4:	f7fa fd80 	bl	10060fc8 <csmem_mem_0_assign>
100664c8:	6839      	ldr	r1, [r7, #0]
100664ca:	5909      	ldr	r1, [r1, r4]
100664cc:	6889      	ldr	r1, [r1, #8]
100664ce:	6008      	str	r0, [r1, #0]
100664d0:	480b      	ldr	r0, [pc, #44]	@ (10066500 <__arm_cp.0_1>)
100664d2:	2502      	movs	r5, #2
100664d4:	2601      	movs	r6, #1
100664d6:	4629      	mov	r1, r5
100664d8:	4632      	mov	r2, r6
100664da:	f7fa fd63 	bl	10060fa4 <csmem_mem_assign>
100664de:	6839      	ldr	r1, [r7, #0]
100664e0:	5909      	ldr	r1, [r1, r4]
100664e2:	6889      	ldr	r1, [r1, #8]
100664e4:	6488      	str	r0, [r1, #72]	@ 0x48
100664e6:	4806      	ldr	r0, [pc, #24]	@ (10066500 <__arm_cp.0_1>)
100664e8:	4631      	mov	r1, r6
100664ea:	462a      	mov	r2, r5
100664ec:	f7fa fd5a 	bl	10060fa4 <csmem_mem_assign>
100664f0:	6839      	ldr	r1, [r7, #0]
100664f2:	5909      	ldr	r1, [r1, r4]
100664f4:	6889      	ldr	r1, [r1, #8]
100664f6:	64c8      	str	r0, [r1, #76]	@ 0x4c
100664f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100664fa:	46c0      	nop			@ (mov r8, r8)

100664fc <__arm_cp.0_0>:
100664fc:	20002468 	.word	0x20002468

10066500 <__arm_cp.0_1>:
10066500:	20002478 	.word	0x20002478

10066504 <llc_pscan_isr_ucfg_weak>:
10066504:	2000      	movs	r0, #0
10066506:	4770      	bx	lr

10066508 <llc_scan_isr_uncoded_ucfg_weak>:
10066508:	2000      	movs	r0, #0
1006650a:	4770      	bx	lr

1006650c <llc_scan_isr_coded_ucfg_weak>:
1006650c:	2000      	movs	r0, #0
1006650e:	4770      	bx	lr

10066510 <smp_dep_gap_get_local_identity_address>:
10066510:	b580      	push	{r7, lr}
10066512:	4a0a      	ldr	r2, [pc, #40]	@ (1006653c <__arm_cp.0_0>)
10066514:	6812      	ldr	r2, [r2, #0]
10066516:	233d      	movs	r3, #61	@ 0x3d
10066518:	5cd2      	ldrb	r2, [r2, r3]
1006651a:	7002      	strb	r2, [r0, #0]
1006651c:	2a01      	cmp	r2, #1
1006651e:	d005      	beq.n	1006652c <smp_dep_gap_get_local_identity_address+0x1c>
10066520:	2a00      	cmp	r2, #0
10066522:	d108      	bne.n	10066536 <smp_dep_gap_get_local_identity_address+0x26>
10066524:	4608      	mov	r0, r1
10066526:	f7f0 f94f 	bl	100567c8 <GAP_get_public_address>
1006652a:	e002      	b.n	10066532 <smp_dep_gap_get_local_identity_address+0x22>
1006652c:	4608      	mov	r0, r1
1006652e:	f7f0 f955 	bl	100567dc <GAP_get_static_random_address>
10066532:	2000      	movs	r0, #0
10066534:	bd80      	pop	{r7, pc}
10066536:	2086      	movs	r0, #134	@ 0x86
10066538:	bd80      	pop	{r7, pc}
1006653a:	46c0      	nop			@ (mov r8, r8)

1006653c <__arm_cp.0_0>:
1006653c:	200024b4 	.word	0x200024b4

10066540 <smp_dep_l2c_send_acl_packet>:
10066540:	b570      	push	{r4, r5, r6, lr}
10066542:	460d      	mov	r5, r1
10066544:	4606      	mov	r6, r0
10066546:	2006      	movs	r0, #6
10066548:	f7f3 fc58 	bl	10059dfc <L2C_send_frame>
1006654c:	4604      	mov	r4, r0
1006654e:	2800      	cmp	r0, #0
10066550:	d003      	beq.n	1006655a <smp_dep_l2c_send_acl_packet+0x1a>
10066552:	4628      	mov	r0, r5
10066554:	f7ee fe10 	bl	10055178 <ACL_pkt_release>
10066558:	e008      	b.n	1006656c <smp_dep_l2c_send_acl_packet+0x2c>
1006655a:	8930      	ldrh	r0, [r6, #8]
1006655c:	f001 f8de 	bl	1006771c <smp_get_remote_device_list_index>
10066560:	4602      	mov	r2, r0
10066562:	2000      	movs	r0, #0
10066564:	4b02      	ldr	r3, [pc, #8]	@ (10066570 <__arm_cp.0_0>)
10066566:	4601      	mov	r1, r0
10066568:	f7fb fda0 	bl	100620ac <smp_timer_reset>
1006656c:	4620      	mov	r0, r4
1006656e:	bd70      	pop	{r4, r5, r6, pc}

10066570 <__arm_cp.0_0>:
10066570:	00007530 	.word	0x00007530

10066574 <smp_dep_l2c_send_acl_short_pdu>:
10066574:	b5b0      	push	{r4, r5, r7, lr}
10066576:	461c      	mov	r4, r3
10066578:	4615      	mov	r5, r2
1006657a:	2900      	cmp	r1, #0
1006657c:	d107      	bne.n	1006658e <smp_dep_l2c_send_acl_short_pdu+0x1a>
1006657e:	8901      	ldrh	r1, [r0, #8]
10066580:	2000      	movs	r0, #0
10066582:	2206      	movs	r2, #6
10066584:	f7ee fdd6 	bl	10055134 <ACL_pkt_get>
10066588:	4601      	mov	r1, r0
1006658a:	2800      	cmp	r0, #0
1006658c:	d009      	beq.n	100665a2 <smp_dep_l2c_send_acl_short_pdu+0x2e>
1006658e:	2002      	movs	r0, #2
10066590:	8048      	strh	r0, [r1, #2]
10066592:	6848      	ldr	r0, [r1, #4]
10066594:	7205      	strb	r5, [r0, #8]
10066596:	6848      	ldr	r0, [r1, #4]
10066598:	7244      	strb	r4, [r0, #9]
1006659a:	2006      	movs	r0, #6
1006659c:	f7f3 fc2e 	bl	10059dfc <L2C_send_frame>
100665a0:	bdb0      	pop	{r4, r5, r7, pc}
100665a2:	2088      	movs	r0, #136	@ 0x88
100665a4:	bdb0      	pop	{r4, r5, r7, pc}

100665a6 <smp_dep_sdb_get_bonding_records_count>:
100665a6:	b580      	push	{r7, lr}
100665a8:	f7fb f8dc 	bl	10061764 <sdb_sap_get_security_records_count>
100665ac:	bd80      	pop	{r7, pc}

100665ae <smp_dep_sdb_add_bonding_record>:
100665ae:	b5f0      	push	{r4, r5, r6, r7, lr}
100665b0:	b097      	sub	sp, #92	@ 0x5c
100665b2:	4604      	mov	r4, r0
100665b4:	ae03      	add	r6, sp, #12
100665b6:	2100      	movs	r1, #0
100665b8:	2250      	movs	r2, #80	@ 0x50
100665ba:	4630      	mov	r0, r6
100665bc:	f7ec fa54 	bl	10052a68 <BLEPLAT_MemSet>
100665c0:	2059      	movs	r0, #89	@ 0x59
100665c2:	5c20      	ldrb	r0, [r4, r0]
100665c4:	7871      	ldrb	r1, [r6, #1]
100665c6:	4301      	orrs	r1, r0
100665c8:	7071      	strb	r1, [r6, #1]
100665ca:	4630      	mov	r0, r6
100665cc:	303e      	adds	r0, #62	@ 0x3e
100665ce:	4621      	mov	r1, r4
100665d0:	315a      	adds	r1, #90	@ 0x5a
100665d2:	2506      	movs	r5, #6
100665d4:	462a      	mov	r2, r5
100665d6:	f7ec fa37 	bl	10052a48 <BLEPLAT_MemCpy>
100665da:	7c20      	ldrb	r0, [r4, #16]
100665dc:	70f0      	strb	r0, [r6, #3]
100665de:	7de0      	ldrb	r0, [r4, #23]
100665e0:	0701      	lsls	r1, r0, #28
100665e2:	d416      	bmi.n	10066612 <smp_dep_sdb_add_bonding_record+0x64>
100665e4:	2011      	movs	r0, #17
100665e6:	5620      	ldrsb	r0, [r4, r0]
100665e8:	2800      	cmp	r0, #0
100665ea:	d504      	bpl.n	100665f6 <smp_dep_sdb_add_bonding_record+0x48>
100665ec:	a803      	add	r0, sp, #12
100665ee:	7841      	ldrb	r1, [r0, #1]
100665f0:	2280      	movs	r2, #128	@ 0x80
100665f2:	430a      	orrs	r2, r1
100665f4:	7042      	strb	r2, [r0, #1]
100665f6:	ae03      	add	r6, sp, #12
100665f8:	1d30      	adds	r0, r6, #4
100665fa:	4621      	mov	r1, r4
100665fc:	311e      	adds	r1, #30
100665fe:	2202      	movs	r2, #2
10066600:	f7ec fa22 	bl	10052a48 <BLEPLAT_MemCpy>
10066604:	1db0      	adds	r0, r6, #6
10066606:	4621      	mov	r1, r4
10066608:	3120      	adds	r1, #32
1006660a:	2208      	movs	r2, #8
1006660c:	f7ec fa1c 	bl	10052a48 <BLEPLAT_MemCpy>
10066610:	e003      	b.n	1006661a <smp_dep_sdb_add_bonding_record+0x6c>
10066612:	21fe      	movs	r1, #254	@ 0xfe
10066614:	4008      	ands	r0, r1
10066616:	a903      	add	r1, sp, #12
10066618:	7088      	strb	r0, [r1, #2]
1006661a:	a803      	add	r0, sp, #12
1006661c:	300e      	adds	r0, #14
1006661e:	4621      	mov	r1, r4
10066620:	3128      	adds	r1, #40	@ 0x28
10066622:	2610      	movs	r6, #16
10066624:	4632      	mov	r2, r6
10066626:	f7ec fa0f 	bl	10052a48 <BLEPLAT_MemCpy>
1006662a:	7c60      	ldrb	r0, [r4, #17]
1006662c:	0681      	lsls	r1, r0, #26
1006662e:	d50c      	bpl.n	1006664a <smp_dep_sdb_add_bonding_record+0x9c>
10066630:	af03      	add	r7, sp, #12
10066632:	4638      	mov	r0, r7
10066634:	301e      	adds	r0, #30
10066636:	4621      	mov	r1, r4
10066638:	3138      	adds	r1, #56	@ 0x38
1006663a:	2210      	movs	r2, #16
1006663c:	f7ec fa04 	bl	10052a48 <BLEPLAT_MemCpy>
10066640:	7878      	ldrb	r0, [r7, #1]
10066642:	2120      	movs	r1, #32
10066644:	4301      	orrs	r1, r0
10066646:	7079      	strb	r1, [r7, #1]
10066648:	7c60      	ldrb	r0, [r4, #17]
1006664a:	0640      	lsls	r0, r0, #25
1006664c:	d50b      	bpl.n	10066666 <smp_dep_sdb_add_bonding_record+0xb8>
1006664e:	af03      	add	r7, sp, #12
10066650:	4638      	mov	r0, r7
10066652:	302e      	adds	r0, #46	@ 0x2e
10066654:	4621      	mov	r1, r4
10066656:	3148      	adds	r1, #72	@ 0x48
10066658:	2210      	movs	r2, #16
1006665a:	f7ec f9f5 	bl	10052a48 <BLEPLAT_MemCpy>
1006665e:	7878      	ldrb	r0, [r7, #1]
10066660:	2140      	movs	r1, #64	@ 0x40
10066662:	4301      	orrs	r1, r0
10066664:	7079      	strb	r1, [r7, #1]
10066666:	7ca0      	ldrb	r0, [r4, #18]
10066668:	2105      	movs	r1, #5
1006666a:	4208      	tst	r0, r1
1006666c:	d00a      	beq.n	10066684 <smp_dep_sdb_add_bonding_record+0xd6>
1006666e:	af03      	add	r7, sp, #12
10066670:	4638      	mov	r0, r7
10066672:	3044      	adds	r0, #68	@ 0x44
10066674:	4621      	mov	r1, r4
10066676:	311c      	adds	r1, #28
10066678:	2202      	movs	r2, #2
1006667a:	f7ec f9e5 	bl	10052a48 <BLEPLAT_MemCpy>
1006667e:	7878      	ldrb	r0, [r7, #1]
10066680:	4330      	orrs	r0, r6
10066682:	e001      	b.n	10066688 <smp_dep_sdb_add_bonding_record+0xda>
10066684:	a803      	add	r0, sp, #12
10066686:	7840      	ldrb	r0, [r0, #1]
10066688:	7ae1      	ldrb	r1, [r4, #11]
1006668a:	4029      	ands	r1, r5
1006668c:	4301      	orrs	r1, r0
1006668e:	a803      	add	r0, sp, #12
10066690:	7041      	strb	r1, [r0, #1]
10066692:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
10066694:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
10066696:	9115      	str	r1, [sp, #84]	@ 0x54
10066698:	9216      	str	r2, [sp, #88]	@ 0x58
1006669a:	f7fb f867 	bl	1006176c <sdb_sap_add_security_record>
1006669e:	4605      	mov	r5, r0
100666a0:	2800      	cmp	r0, #0
100666a2:	d00c      	beq.n	100666be <smp_dep_sdb_add_bonding_record+0x110>
100666a4:	1ca1      	adds	r1, r4, #2
100666a6:	ac01      	add	r4, sp, #4
100666a8:	2206      	movs	r2, #6
100666aa:	4620      	mov	r0, r4
100666ac:	f7ec f9cc 	bl	10052a48 <BLEPLAT_MemCpy>
100666b0:	71a5      	strb	r5, [r4, #6]
100666b2:	2042      	movs	r0, #66	@ 0x42
100666b4:	2105      	movs	r1, #5
100666b6:	2207      	movs	r2, #7
100666b8:	4623      	mov	r3, r4
100666ba:	f7fd fe51 	bl	10064360 <aci_hal_fw_error_event_push_noinline>
100666be:	4628      	mov	r0, r5
100666c0:	b017      	add	sp, #92	@ 0x5c
100666c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100666c4 <smp_dep_sdb_find_bonding_record_by_conn_addr>:
100666c4:	b570      	push	{r4, r5, r6, lr}
100666c6:	b094      	sub	sp, #80	@ 0x50
100666c8:	460e      	mov	r6, r1
100666ca:	4604      	mov	r4, r0
100666cc:	7841      	ldrb	r1, [r0, #1]
100666ce:	1c80      	adds	r0, r0, #2
100666d0:	466a      	mov	r2, sp
100666d2:	f7fb f86e 	bl	100617b2 <sdb_sap_read_security_record>
100666d6:	4605      	mov	r5, r0
100666d8:	2e00      	cmp	r6, #0
100666da:	d005      	beq.n	100666e8 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100666dc:	2d00      	cmp	r5, #0
100666de:	d103      	bne.n	100666e8 <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100666e0:	4668      	mov	r0, sp
100666e2:	4621      	mov	r1, r4
100666e4:	f000 f804 	bl	100666f0 <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100666e8:	4628      	mov	r0, r5
100666ea:	b014      	add	sp, #80	@ 0x50
100666ec:	bd70      	pop	{r4, r5, r6, pc}
	...

100666f0 <smp_dep_sdb_copy_bonding_record_data_to_remdev>:
100666f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100666f2:	460c      	mov	r4, r1
100666f4:	4605      	mov	r5, r0
100666f6:	2001      	movs	r0, #1
100666f8:	7388      	strb	r0, [r1, #14]
100666fa:	78e8      	ldrb	r0, [r5, #3]
100666fc:	7408      	strb	r0, [r1, #16]
100666fe:	4608      	mov	r0, r1
10066700:	301c      	adds	r0, #28
10066702:	4629      	mov	r1, r5
10066704:	3144      	adds	r1, #68	@ 0x44
10066706:	2602      	movs	r6, #2
10066708:	4f19      	ldr	r7, [pc, #100]	@ (10066770 <__arm_cp.3_0>)
1006670a:	4632      	mov	r2, r6
1006670c:	47b8      	blx	r7
1006670e:	4620      	mov	r0, r4
10066710:	301e      	adds	r0, #30
10066712:	1d29      	adds	r1, r5, #4
10066714:	4632      	mov	r2, r6
10066716:	47b8      	blx	r7
10066718:	4620      	mov	r0, r4
1006671a:	3020      	adds	r0, #32
1006671c:	1da9      	adds	r1, r5, #6
1006671e:	2208      	movs	r2, #8
10066720:	47b8      	blx	r7
10066722:	4620      	mov	r0, r4
10066724:	3028      	adds	r0, #40	@ 0x28
10066726:	4629      	mov	r1, r5
10066728:	310e      	adds	r1, #14
1006672a:	2610      	movs	r6, #16
1006672c:	4632      	mov	r2, r6
1006672e:	47b8      	blx	r7
10066730:	4620      	mov	r0, r4
10066732:	3038      	adds	r0, #56	@ 0x38
10066734:	4629      	mov	r1, r5
10066736:	311e      	adds	r1, #30
10066738:	4632      	mov	r2, r6
1006673a:	47b8      	blx	r7
1006673c:	4620      	mov	r0, r4
1006673e:	3048      	adds	r0, #72	@ 0x48
10066740:	4629      	mov	r1, r5
10066742:	312e      	adds	r1, #46	@ 0x2e
10066744:	4632      	mov	r2, r6
10066746:	47b8      	blx	r7
10066748:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
1006674a:	66a0      	str	r0, [r4, #104]	@ 0x68
1006674c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
1006674e:	66e0      	str	r0, [r4, #108]	@ 0x6c
10066750:	7868      	ldrb	r0, [r5, #1]
10066752:	2106      	movs	r1, #6
10066754:	4001      	ands	r1, r0
10066756:	72e1      	strb	r1, [r4, #11]
10066758:	21e0      	movs	r1, #224	@ 0xe0
1006675a:	4001      	ands	r1, r0
1006675c:	7c60      	ldrb	r0, [r4, #17]
1006675e:	4308      	orrs	r0, r1
10066760:	7460      	strb	r0, [r4, #17]
10066762:	78a8      	ldrb	r0, [r5, #2]
10066764:	0701      	lsls	r1, r0, #28
10066766:	d502      	bpl.n	1006676e <smp_dep_sdb_copy_bonding_record_data_to_remdev+0x7e>
10066768:	21fe      	movs	r1, #254	@ 0xfe
1006676a:	4008      	ands	r0, r1
1006676c:	75e0      	strb	r0, [r4, #23]
1006676e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066770 <__arm_cp.3_0>:
10066770:	10052a49 	.word	0x10052a49

10066774 <smp_dep_sdb_find_bonding_record_read_address>:
10066774:	b570      	push	{r4, r5, r6, lr}
10066776:	b094      	sub	sp, #80	@ 0x50
10066778:	4614      	mov	r4, r2
1006677a:	460e      	mov	r6, r1
1006677c:	7841      	ldrb	r1, [r0, #1]
1006677e:	1c80      	adds	r0, r0, #2
10066780:	466a      	mov	r2, sp
10066782:	f7fb f816 	bl	100617b2 <sdb_sap_read_security_record>
10066786:	4605      	mov	r5, r0
10066788:	2800      	cmp	r0, #0
1006678a:	d107      	bne.n	1006679c <smp_dep_sdb_find_bonding_record_read_address+0x28>
1006678c:	2000      	movs	r0, #0
1006678e:	7030      	strb	r0, [r6, #0]
10066790:	4669      	mov	r1, sp
10066792:	313e      	adds	r1, #62	@ 0x3e
10066794:	2206      	movs	r2, #6
10066796:	4620      	mov	r0, r4
10066798:	f7ec f956 	bl	10052a48 <BLEPLAT_MemCpy>
1006679c:	4628      	mov	r0, r5
1006679e:	b014      	add	sp, #80	@ 0x50
100667a0:	bd70      	pop	{r4, r5, r6, pc}

100667a2 <smp_dep_sdb_find_matching_ltk_read_record>:
100667a2:	b5b0      	push	{r4, r5, r7, lr}
100667a4:	b094      	sub	sp, #80	@ 0x50
100667a6:	4614      	mov	r4, r2
100667a8:	466a      	mov	r2, sp
100667aa:	f7fb f87b 	bl	100618a4 <sdb_sap_read_security_record_matching>
100667ae:	4605      	mov	r5, r0
100667b0:	2800      	cmp	r0, #0
100667b2:	d103      	bne.n	100667bc <smp_dep_sdb_find_matching_ltk_read_record+0x1a>
100667b4:	4668      	mov	r0, sp
100667b6:	4621      	mov	r1, r4
100667b8:	f7ff ff9a 	bl	100666f0 <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100667bc:	4628      	mov	r0, r5
100667be:	b014      	add	sp, #80	@ 0x50
100667c0:	bdb0      	pop	{r4, r5, r7, pc}

100667c2 <smp_start_encryption_ucfg_weak>:
100667c2:	201f      	movs	r0, #31
100667c4:	4770      	bx	lr
	...

100667c8 <smp_pp3_pairing_completed_successful>:
100667c8:	b570      	push	{r4, r5, r6, lr}
100667ca:	4604      	mov	r4, r0
100667cc:	7b80      	ldrb	r0, [r0, #14]
100667ce:	2103      	movs	r1, #3
100667d0:	4001      	ands	r1, r0
100667d2:	8925      	ldrh	r5, [r4, #8]
100667d4:	2903      	cmp	r1, #3
100667d6:	d10a      	bne.n	100667ee <smp_pp3_pairing_completed_successful+0x26>
100667d8:	4620      	mov	r0, r4
100667da:	f7ff fee8 	bl	100665ae <smp_dep_sdb_add_bonding_record>
100667de:	2800      	cmp	r0, #0
100667e0:	d005      	beq.n	100667ee <smp_pp3_pairing_completed_successful+0x26>
100667e2:	2108      	movs	r1, #8
100667e4:	2200      	movs	r2, #0
100667e6:	4620      	mov	r0, r4
100667e8:	f000 f826 	bl	10066838 <smp_pp3_pairing_process_abort>
100667ec:	bd70      	pop	{r4, r5, r6, pc}
100667ee:	4628      	mov	r0, r5
100667f0:	f000 ff94 	bl	1006771c <smp_get_remote_device_list_index>
100667f4:	4602      	mov	r2, r0
100667f6:	2001      	movs	r0, #1
100667f8:	2100      	movs	r1, #0
100667fa:	4b0e      	ldr	r3, [pc, #56]	@ (10066834 <__arm_cp.0_0>)
100667fc:	f7fb fc56 	bl	100620ac <smp_timer_reset>
10066800:	7ce0      	ldrb	r0, [r4, #19]
10066802:	2803      	cmp	r0, #3
10066804:	d102      	bne.n	1006680c <smp_pp3_pairing_completed_successful+0x44>
10066806:	2000      	movs	r0, #0
10066808:	f000 ffe6 	bl	100677d8 <smp_oob_clear_remote_data_entry>
1006680c:	4620      	mov	r0, r4
1006680e:	3018      	adds	r0, #24
10066810:	2600      	movs	r6, #0
10066812:	2204      	movs	r2, #4
10066814:	4631      	mov	r1, r6
10066816:	f7ec f927 	bl	10052a68 <BLEPLAT_MemSet>
1006681a:	4620      	mov	r0, r4
1006681c:	4631      	mov	r1, r6
1006681e:	f000 f83b 	bl	10066898 <smp_pp3_pairing_completed_update_stats>
10066822:	20f1      	movs	r0, #241	@ 0xf1
10066824:	72a0      	strb	r0, [r4, #10]
10066826:	2002      	movs	r0, #2
10066828:	4629      	mov	r1, r5
1006682a:	4632      	mov	r2, r6
1006682c:	4633      	mov	r3, r6
1006682e:	f7fd fe0b 	bl	10064448 <aci_gap_pairing_complete_event_push_noinline>
10066832:	bd70      	pop	{r4, r5, r6, pc}

10066834 <__arm_cp.0_0>:
10066834:	00007530 	.word	0x00007530

10066838 <smp_pp3_pairing_process_abort>:
10066838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006683a:	4616      	mov	r6, r2
1006683c:	460c      	mov	r4, r1
1006683e:	4605      	mov	r5, r0
10066840:	8900      	ldrh	r0, [r0, #8]
10066842:	f000 ff6b 	bl	1006771c <smp_get_remote_device_list_index>
10066846:	4602      	mov	r2, r0
10066848:	2001      	movs	r0, #1
1006684a:	2700      	movs	r7, #0
1006684c:	4b11      	ldr	r3, [pc, #68]	@ (10066894 <__arm_cp.1_0>)
1006684e:	4639      	mov	r1, r7
10066850:	f7fb fc2c 	bl	100620ac <smp_timer_reset>
10066854:	8928      	ldrh	r0, [r5, #8]
10066856:	f7fb fbed 	bl	10062034 <smp_rxp_flush_packet_queues>
1006685a:	2102      	movs	r1, #2
1006685c:	4628      	mov	r0, r5
1006685e:	f000 f81b 	bl	10066898 <smp_pp3_pairing_completed_update_stats>
10066862:	4628      	mov	r0, r5
10066864:	3018      	adds	r0, #24
10066866:	2204      	movs	r2, #4
10066868:	4639      	mov	r1, r7
1006686a:	f7ec f8fd 	bl	10052a68 <BLEPLAT_MemSet>
1006686e:	7be8      	ldrb	r0, [r5, #15]
10066870:	212f      	movs	r1, #47	@ 0x2f
10066872:	4001      	ands	r1, r0
10066874:	73e9      	strb	r1, [r5, #15]
10066876:	2e00      	cmp	r6, #0
10066878:	d004      	beq.n	10066884 <smp_pp3_pairing_process_abort+0x4c>
1006687a:	7868      	ldrb	r0, [r5, #1]
1006687c:	1ca9      	adds	r1, r5, #2
1006687e:	f000 fe51 	bl	10067524 <smp_cmn_repeated_attacks_protection_start>
10066882:	27fb      	movs	r7, #251	@ 0xfb
10066884:	72af      	strb	r7, [r5, #10]
10066886:	8929      	ldrh	r1, [r5, #8]
10066888:	2002      	movs	r0, #2
1006688a:	4602      	mov	r2, r0
1006688c:	4623      	mov	r3, r4
1006688e:	f7fd fddb 	bl	10064448 <aci_gap_pairing_complete_event_push_noinline>
10066892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066894 <__arm_cp.1_0>:
10066894:	00007530 	.word	0x00007530

10066898 <smp_pp3_pairing_completed_update_stats>:
10066898:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006689a:	2260      	movs	r2, #96	@ 0x60
1006689c:	5c82      	ldrb	r2, [r0, r2]
1006689e:	07d2      	lsls	r2, r2, #31
100668a0:	7a82      	ldrb	r2, [r0, #10]
100668a2:	d104      	bne.n	100668ae <smp_pp3_pairing_completed_update_stats+0x16>
100668a4:	3260      	adds	r2, #96	@ 0x60
100668a6:	b2d2      	uxtb	r2, r2
100668a8:	2a51      	cmp	r2, #81	@ 0x51
100668aa:	d304      	bcc.n	100668b6 <smp_pp3_pairing_completed_update_stats+0x1e>
100668ac:	e00f      	b.n	100668ce <smp_pp3_pairing_completed_update_stats+0x36>
100668ae:	3250      	adds	r2, #80	@ 0x50
100668b0:	b2d2      	uxtb	r2, r2
100668b2:	2a40      	cmp	r2, #64	@ 0x40
100668b4:	d80b      	bhi.n	100668ce <smp_pp3_pairing_completed_update_stats+0x36>
100668b6:	4a09      	ldr	r2, [pc, #36]	@ (100668dc <__arm_cp.2_0>)
100668b8:	6812      	ldr	r2, [r2, #0]
100668ba:	23b1      	movs	r3, #177	@ 0xb1
100668bc:	5cd3      	ldrb	r3, [r2, r3]
100668be:	2b00      	cmp	r3, #0
100668c0:	d005      	beq.n	100668ce <smp_pp3_pairing_completed_update_stats+0x36>
100668c2:	32b1      	adds	r2, #177	@ 0xb1
100668c4:	7d04      	ldrb	r4, [r0, #20]
100668c6:	2501      	movs	r5, #1
100668c8:	40a5      	lsls	r5, r4
100668ca:	43ab      	bics	r3, r5
100668cc:	7013      	strb	r3, [r2, #0]
100668ce:	466a      	mov	r2, sp
100668d0:	7111      	strb	r1, [r2, #4]
100668d2:	9000      	str	r0, [sp, #0]
100668d4:	4610      	mov	r0, r2
100668d6:	f000 ffb2 	bl	1006783e <smp_scp_stats_update_on_pairing_complete_ucfg_weak>
100668da:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100668dc <__arm_cp.2_0>:
100668dc:	200024b4 	.word	0x200024b4

100668e0 <smp_pp3_pairing_failed_receive>:
100668e0:	b5b0      	push	{r4, r5, r7, lr}
100668e2:	460c      	mov	r4, r1
100668e4:	2160      	movs	r1, #96	@ 0x60
100668e6:	5c61      	ldrb	r1, [r4, r1]
100668e8:	2201      	movs	r2, #1
100668ea:	400a      	ands	r2, r1
100668ec:	7aa3      	ldrb	r3, [r4, #10]
100668ee:	6840      	ldr	r0, [r0, #4]
100668f0:	7a41      	ldrb	r1, [r0, #9]
100668f2:	d102      	bne.n	100668fa <smp_pp3_pairing_failed_receive+0x1a>
100668f4:	2b9f      	cmp	r3, #159	@ 0x9f
100668f6:	d802      	bhi.n	100668fe <smp_pp3_pairing_failed_receive+0x1e>
100668f8:	bdb0      	pop	{r4, r5, r7, pc}
100668fa:	2bb0      	cmp	r3, #176	@ 0xb0
100668fc:	d314      	bcc.n	10066928 <smp_pp3_pairing_failed_receive+0x48>
100668fe:	2bf0      	cmp	r3, #240	@ 0xf0
10066900:	d915      	bls.n	1006692e <smp_pp3_pairing_failed_receive+0x4e>
10066902:	2bf1      	cmp	r3, #241	@ 0xf1
10066904:	d10e      	bne.n	10066924 <smp_pp3_pairing_failed_receive+0x44>
10066906:	290f      	cmp	r1, #15
10066908:	d10c      	bne.n	10066924 <smp_pp3_pairing_failed_receive+0x44>
1006690a:	4625      	mov	r5, r4
1006690c:	3559      	adds	r5, #89	@ 0x59
1006690e:	210f      	movs	r1, #15
10066910:	2201      	movs	r2, #1
10066912:	4620      	mov	r0, r4
10066914:	f7ff ff90 	bl	10066838 <smp_pp3_pairing_process_abort>
10066918:	7829      	ldrb	r1, [r5, #0]
1006691a:	345a      	adds	r4, #90	@ 0x5a
1006691c:	4620      	mov	r0, r4
1006691e:	f7fa ffaf 	bl	10061880 <sdb_sap_del_bonded_device>
10066922:	bdb0      	pop	{r4, r5, r7, pc}
10066924:	2a00      	cmp	r2, #0
10066926:	d0e7      	beq.n	100668f8 <smp_pp3_pairing_failed_receive+0x18>
10066928:	7e20      	ldrb	r0, [r4, #24]
1006692a:	0780      	lsls	r0, r0, #30
1006692c:	d0e4      	beq.n	100668f8 <smp_pp3_pairing_failed_receive+0x18>
1006692e:	2201      	movs	r2, #1
10066930:	4620      	mov	r0, r4
10066932:	f7ff ff81 	bl	10066838 <smp_pp3_pairing_process_abort>
10066936:	bdb0      	pop	{r4, r5, r7, pc}

10066938 <smp_pp3_pairing_failed_send>:
10066938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006693a:	461f      	mov	r7, r3
1006693c:	4613      	mov	r3, r2
1006693e:	460c      	mov	r4, r1
10066940:	4605      	mov	r5, r0
10066942:	2205      	movs	r2, #5
10066944:	4619      	mov	r1, r3
10066946:	4623      	mov	r3, r4
10066948:	f7ff fe14 	bl	10066574 <smp_dep_l2c_send_acl_short_pdu>
1006694c:	4606      	mov	r6, r0
1006694e:	2f00      	cmp	r7, #0
10066950:	d101      	bne.n	10066956 <smp_pp3_pairing_failed_send+0x1e>
10066952:	2e88      	cmp	r6, #136	@ 0x88
10066954:	d004      	beq.n	10066960 <smp_pp3_pairing_failed_send+0x28>
10066956:	2201      	movs	r2, #1
10066958:	4628      	mov	r0, r5
1006695a:	4621      	mov	r1, r4
1006695c:	f7ff ff6c 	bl	10066838 <smp_pp3_pairing_process_abort>
10066960:	4630      	mov	r0, r6
10066962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066964 <smp_pp1_get_next_free_pairing_idx>:
10066964:	b510      	push	{r4, lr}
10066966:	490b      	ldr	r1, [pc, #44]	@ (10066994 <__arm_cp.0_0>)
10066968:	680a      	ldr	r2, [r1, #0]
1006696a:	21b1      	movs	r1, #177	@ 0xb1
1006696c:	5c53      	ldrb	r3, [r2, r1]
1006696e:	32b1      	adds	r2, #177	@ 0xb1
10066970:	2100      	movs	r1, #0
10066972:	2903      	cmp	r1, #3
10066974:	d005      	beq.n	10066982 <smp_pp1_get_next_free_pairing_idx+0x1e>
10066976:	2401      	movs	r4, #1
10066978:	408c      	lsls	r4, r1
1006697a:	421c      	tst	r4, r3
1006697c:	d003      	beq.n	10066986 <smp_pp1_get_next_free_pairing_idx+0x22>
1006697e:	1c49      	adds	r1, r1, #1
10066980:	e7f7      	b.n	10066972 <smp_pp1_get_next_free_pairing_idx+0xe>
10066982:	2103      	movs	r1, #3
10066984:	e003      	b.n	1006698e <smp_pp1_get_next_free_pairing_idx+0x2a>
10066986:	2800      	cmp	r0, #0
10066988:	d001      	beq.n	1006698e <smp_pp1_get_next_free_pairing_idx+0x2a>
1006698a:	4323      	orrs	r3, r4
1006698c:	7013      	strb	r3, [r2, #0]
1006698e:	b2c8      	uxtb	r0, r1
10066990:	bd10      	pop	{r4, pc}
10066992:	46c0      	nop			@ (mov r8, r8)

10066994 <__arm_cp.0_0>:
10066994:	200024b4 	.word	0x200024b4

10066998 <smp_pp1_get_pairing_pdu_offset>:
10066998:	0100      	lsls	r0, r0, #4
1006699a:	2900      	cmp	r1, #0
1006699c:	d000      	beq.n	100669a0 <smp_pp1_get_pairing_pdu_offset+0x8>
1006699e:	3008      	adds	r0, #8
100669a0:	b2c0      	uxtb	r0, r0
100669a2:	4770      	bx	lr

100669a4 <smp_pp1_reqrsp_pdu_params_check>:
100669a4:	b51c      	push	{r2, r3, r4, lr}
100669a6:	2104      	movs	r1, #4
100669a8:	2207      	movs	r2, #7
100669aa:	466c      	mov	r4, sp
100669ac:	4623      	mov	r3, r4
100669ae:	f7ee fbff 	bl	100551b0 <ACL_pkt_read>
100669b2:	7862      	ldrb	r2, [r4, #1]
100669b4:	210a      	movs	r1, #10
100669b6:	2a04      	cmp	r2, #4
100669b8:	d813      	bhi.n	100669e2 <smp_pp1_reqrsp_pdu_params_check+0x3e>
100669ba:	466a      	mov	r2, sp
100669bc:	7892      	ldrb	r2, [r2, #2]
100669be:	2a01      	cmp	r2, #1
100669c0:	d80f      	bhi.n	100669e2 <smp_pp1_reqrsp_pdu_params_check+0x3e>
100669c2:	466a      	mov	r2, sp
100669c4:	78d2      	ldrb	r2, [r2, #3]
100669c6:	0792      	lsls	r2, r2, #30
100669c8:	d40b      	bmi.n	100669e2 <smp_pp1_reqrsp_pdu_params_check+0x3e>
100669ca:	4907      	ldr	r1, [pc, #28]	@ (100669e8 <__arm_cp.2_0>)
100669cc:	6809      	ldr	r1, [r1, #0]
100669ce:	2234      	movs	r2, #52	@ 0x34
100669d0:	5c8a      	ldrb	r2, [r1, r2]
100669d2:	4669      	mov	r1, sp
100669d4:	7909      	ldrb	r1, [r1, #4]
100669d6:	4291      	cmp	r1, r2
100669d8:	d302      	bcc.n	100669e0 <smp_pp1_reqrsp_pdu_params_check+0x3c>
100669da:	2911      	cmp	r1, #17
100669dc:	4601      	mov	r1, r0
100669de:	d300      	bcc.n	100669e2 <smp_pp1_reqrsp_pdu_params_check+0x3e>
100669e0:	2106      	movs	r1, #6
100669e2:	4608      	mov	r0, r1
100669e4:	bd1c      	pop	{r2, r3, r4, pc}
100669e6:	46c0      	nop			@ (mov r8, r8)

100669e8 <__arm_cp.2_0>:
100669e8:	200024b4 	.word	0x200024b4

100669ec <smp_pp1_reqrsp_pdu_copy_to_pairing_data>:
100669ec:	b580      	push	{r7, lr}
100669ee:	7d12      	ldrb	r2, [r2, #20]
100669f0:	0112      	lsls	r2, r2, #4
100669f2:	2900      	cmp	r1, #0
100669f4:	d000      	beq.n	100669f8 <smp_pp1_reqrsp_pdu_copy_to_pairing_data+0xc>
100669f6:	3208      	adds	r2, #8
100669f8:	b2d1      	uxtb	r1, r2
100669fa:	4a04      	ldr	r2, [pc, #16]	@ (10066a0c <__arm_cp.3_0>)
100669fc:	6812      	ldr	r2, [r2, #0]
100669fe:	1853      	adds	r3, r2, r1
10066a00:	33b4      	adds	r3, #180	@ 0xb4
10066a02:	2104      	movs	r1, #4
10066a04:	2207      	movs	r2, #7
10066a06:	f7ee fbd3 	bl	100551b0 <ACL_pkt_read>
10066a0a:	bd80      	pop	{r7, pc}

10066a0c <__arm_cp.3_0>:
10066a0c:	200024b4 	.word	0x200024b4

10066a10 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>:
10066a10:	b5f0      	push	{r4, r5, r6, r7, lr}
10066a12:	4924      	ldr	r1, [pc, #144]	@ (10066aa4 <__arm_cp.4_0>)
10066a14:	6809      	ldr	r1, [r1, #0]
10066a16:	7d02      	ldrb	r2, [r0, #20]
10066a18:	0112      	lsls	r2, r2, #4
10066a1a:	3208      	adds	r2, #8
10066a1c:	b2d2      	uxtb	r2, r2
10066a1e:	188b      	adds	r3, r1, r2
10066a20:	24b5      	movs	r4, #181	@ 0xb5
10066a22:	5d1c      	ldrb	r4, [r3, r4]
10066a24:	7304      	strb	r4, [r0, #12]
10066a26:	24b6      	movs	r4, #182	@ 0xb6
10066a28:	5d1b      	ldrb	r3, [r3, r4]
10066a2a:	2b01      	cmp	r3, #1
10066a2c:	d103      	bne.n	10066a36 <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x26>
10066a2e:	7b43      	ldrb	r3, [r0, #13]
10066a30:	2402      	movs	r4, #2
10066a32:	431c      	orrs	r4, r3
10066a34:	7344      	strb	r4, [r0, #13]
10066a36:	460b      	mov	r3, r1
10066a38:	3336      	adds	r3, #54	@ 0x36
10066a3a:	2503      	movs	r5, #3
10066a3c:	4315      	orrs	r5, r2
10066a3e:	460c      	mov	r4, r1
10066a40:	34b4      	adds	r4, #180	@ 0xb4
10066a42:	5d65      	ldrb	r5, [r4, r5]
10066a44:	2601      	movs	r6, #1
10066a46:	402e      	ands	r6, r5
10066a48:	7b87      	ldrb	r7, [r0, #14]
10066a4a:	4337      	orrs	r7, r6
10066a4c:	7387      	strb	r7, [r0, #14]
10066a4e:	2604      	movs	r6, #4
10066a50:	4035      	ands	r5, r6
10066a52:	7bc7      	ldrb	r7, [r0, #15]
10066a54:	432f      	orrs	r7, r5
10066a56:	73c7      	strb	r7, [r0, #15]
10066a58:	4316      	orrs	r6, r2
10066a5a:	5da5      	ldrb	r5, [r4, r6]
10066a5c:	7405      	strb	r5, [r0, #16]
10066a5e:	2505      	movs	r5, #5
10066a60:	4315      	orrs	r5, r2
10066a62:	5d64      	ldrb	r4, [r4, r5]
10066a64:	2560      	movs	r5, #96	@ 0x60
10066a66:	5d45      	ldrb	r5, [r0, r5]
10066a68:	07ed      	lsls	r5, r5, #31
10066a6a:	d10e      	bne.n	10066a8a <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x7a>
10066a6c:	781d      	ldrb	r5, [r3, #0]
10066a6e:	402c      	ands	r4, r5
10066a70:	2507      	movs	r5, #7
10066a72:	402c      	ands	r4, r5
10066a74:	7484      	strb	r4, [r0, #18]
10066a76:	2406      	movs	r4, #6
10066a78:	4322      	orrs	r2, r4
10066a7a:	1889      	adds	r1, r1, r2
10066a7c:	22b4      	movs	r2, #180	@ 0xb4
10066a7e:	5c89      	ldrb	r1, [r1, r2]
10066a80:	785a      	ldrb	r2, [r3, #1]
10066a82:	400a      	ands	r2, r1
10066a84:	402a      	ands	r2, r5
10066a86:	7442      	strb	r2, [r0, #17]
10066a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066a8a:	785d      	ldrb	r5, [r3, #1]
10066a8c:	4025      	ands	r5, r4
10066a8e:	7445      	strb	r5, [r0, #17]
10066a90:	2406      	movs	r4, #6
10066a92:	4322      	orrs	r2, r4
10066a94:	1889      	adds	r1, r1, r2
10066a96:	22b4      	movs	r2, #180	@ 0xb4
10066a98:	5c89      	ldrb	r1, [r1, r2]
10066a9a:	781a      	ldrb	r2, [r3, #0]
10066a9c:	400a      	ands	r2, r1
10066a9e:	7482      	strb	r2, [r0, #18]
10066aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066aa2:	46c0      	nop			@ (mov r8, r8)

10066aa4 <__arm_cp.4_0>:
10066aa4:	200024b4 	.word	0x200024b4

10066aa8 <smp_pp1_key_generation_method_selection>:
10066aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066aaa:	7b01      	ldrb	r1, [r0, #12]
10066aac:	7b42      	ldrb	r2, [r0, #13]
10066aae:	07d3      	lsls	r3, r2, #31
10066ab0:	d001      	beq.n	10066ab6 <smp_pp1_key_generation_method_selection+0xe>
10066ab2:	0793      	lsls	r3, r2, #30
10066ab4:	d405      	bmi.n	10066ac2 <smp_pp1_key_generation_method_selection+0x1a>
10066ab6:	7dc3      	ldrb	r3, [r0, #23]
10066ab8:	2408      	movs	r4, #8
10066aba:	401c      	ands	r4, r3
10066abc:	d003      	beq.n	10066ac6 <smp_pp1_key_generation_method_selection+0x1e>
10066abe:	0792      	lsls	r2, r2, #30
10066ac0:	d001      	beq.n	10066ac6 <smp_pp1_key_generation_method_selection+0x1e>
10066ac2:	2203      	movs	r2, #3
10066ac4:	e019      	b.n	10066afa <smp_pp1_key_generation_method_selection+0x52>
10066ac6:	7bc3      	ldrb	r3, [r0, #15]
10066ac8:	2205      	movs	r2, #5
10066aca:	4213      	tst	r3, r2
10066acc:	d014      	beq.n	10066af8 <smp_pp1_key_generation_method_selection+0x50>
10066ace:	4b42      	ldr	r3, [pc, #264]	@ (10066bd8 <__arm_cp.5_0>)
10066ad0:	681b      	ldr	r3, [r3, #0]
10066ad2:	2540      	movs	r5, #64	@ 0x40
10066ad4:	5d5d      	ldrb	r5, [r3, r5]
10066ad6:	434a      	muls	r2, r1
10066ad8:	4b40      	ldr	r3, [pc, #256]	@ (10066bdc <__arm_cp.5_1>)
10066ada:	189a      	adds	r2, r3, r2
10066adc:	5d52      	ldrb	r2, [r2, r5]
10066ade:	74c2      	strb	r2, [r0, #19]
10066ae0:	4603      	mov	r3, r0
10066ae2:	3313      	adds	r3, #19
10066ae4:	2a00      	cmp	r2, #0
10066ae6:	d10b      	bne.n	10066b00 <smp_pp1_key_generation_method_selection+0x58>
10066ae8:	2c00      	cmp	r4, #0
10066aea:	d13d      	bne.n	10066b68 <smp_pp1_key_generation_method_selection+0xc0>
10066aec:	2901      	cmp	r1, #1
10066aee:	d16f      	bne.n	10066bd0 <smp_pp1_key_generation_method_selection+0x128>
10066af0:	2d01      	cmp	r5, #1
10066af2:	d16d      	bne.n	10066bd0 <smp_pp1_key_generation_method_selection+0x128>
10066af4:	2201      	movs	r2, #1
10066af6:	e06c      	b.n	10066bd2 <smp_pp1_key_generation_method_selection+0x12a>
10066af8:	2201      	movs	r2, #1
10066afa:	74c2      	strb	r2, [r0, #19]
10066afc:	4603      	mov	r3, r0
10066afe:	3313      	adds	r3, #19
10066b00:	2460      	movs	r4, #96	@ 0x60
10066b02:	5d05      	ldrb	r5, [r0, r4]
10066b04:	2601      	movs	r6, #1
10066b06:	4035      	ands	r5, r6
10066b08:	d103      	bne.n	10066b12 <smp_pp1_key_generation_method_selection+0x6a>
10066b0a:	241a      	movs	r4, #26
10066b0c:	5704      	ldrsb	r4, [r0, r4]
10066b0e:	2c00      	cmp	r4, #0
10066b10:	d426      	bmi.n	10066b60 <smp_pp1_key_generation_method_selection+0xb8>
10066b12:	4604      	mov	r4, r0
10066b14:	340f      	adds	r4, #15
10066b16:	7824      	ldrb	r4, [r4, #0]
10066b18:	07e4      	lsls	r4, r4, #31
10066b1a:	d004      	beq.n	10066b26 <smp_pp1_key_generation_method_selection+0x7e>
10066b1c:	2a01      	cmp	r2, #1
10066b1e:	d102      	bne.n	10066b26 <smp_pp1_key_generation_method_selection+0x7e>
10066b20:	2403      	movs	r4, #3
10066b22:	701c      	strb	r4, [r3, #0]
10066b24:	e052      	b.n	10066bcc <smp_pp1_key_generation_method_selection+0x124>
10066b26:	7dc3      	ldrb	r3, [r0, #23]
10066b28:	071b      	lsls	r3, r3, #28
10066b2a:	d503      	bpl.n	10066b34 <smp_pp1_key_generation_method_selection+0x8c>
10066b2c:	2a02      	cmp	r2, #2
10066b2e:	d101      	bne.n	10066b34 <smp_pp1_key_generation_method_selection+0x8c>
10066b30:	2300      	movs	r3, #0
10066b32:	76c3      	strb	r3, [r0, #27]
10066b34:	2a02      	cmp	r2, #2
10066b36:	d111      	bne.n	10066b5c <smp_pp1_key_generation_method_selection+0xb4>
10066b38:	7bc2      	ldrb	r2, [r0, #15]
10066b3a:	23ef      	movs	r3, #239	@ 0xef
10066b3c:	4013      	ands	r3, r2
10066b3e:	73c3      	strb	r3, [r0, #15]
10066b40:	4a25      	ldr	r2, [pc, #148]	@ (10066bd8 <__arm_cp.5_0>)
10066b42:	6812      	ldr	r2, [r2, #0]
10066b44:	2340      	movs	r3, #64	@ 0x40
10066b46:	5cd2      	ldrb	r2, [r2, r3]
10066b48:	2400      	movs	r4, #0
10066b4a:	2a02      	cmp	r2, #2
10066b4c:	4627      	mov	r7, r4
10066b4e:	d318      	bcc.n	10066b82 <smp_pp1_key_generation_method_selection+0xda>
10066b50:	2a04      	cmp	r2, #4
10066b52:	d00b      	beq.n	10066b6c <smp_pp1_key_generation_method_selection+0xc4>
10066b54:	2a02      	cmp	r2, #2
10066b56:	d113      	bne.n	10066b80 <smp_pp1_key_generation_method_selection+0xd8>
10066b58:	4637      	mov	r7, r6
10066b5a:	e012      	b.n	10066b82 <smp_pp1_key_generation_method_selection+0xda>
10066b5c:	2400      	movs	r4, #0
10066b5e:	e035      	b.n	10066bcc <smp_pp1_key_generation_method_selection+0x124>
10066b60:	4c1d      	ldr	r4, [pc, #116]	@ (10066bd8 <__arm_cp.5_0>)
10066b62:	6824      	ldr	r4, [r4, #0]
10066b64:	3431      	adds	r4, #49	@ 0x31
10066b66:	e7d6      	b.n	10066b16 <smp_pp1_key_generation_method_selection+0x6e>
10066b68:	2204      	movs	r2, #4
10066b6a:	e032      	b.n	10066bd2 <smp_pp1_key_generation_method_selection+0x12a>
10066b6c:	2902      	cmp	r1, #2
10066b6e:	4637      	mov	r7, r6
10066b70:	d307      	bcc.n	10066b82 <smp_pp1_key_generation_method_selection+0xda>
10066b72:	2904      	cmp	r1, #4
10066b74:	462f      	mov	r7, r5
10066b76:	d004      	beq.n	10066b82 <smp_pp1_key_generation_method_selection+0xda>
10066b78:	2902      	cmp	r1, #2
10066b7a:	d101      	bne.n	10066b80 <smp_pp1_key_generation_method_selection+0xd8>
10066b7c:	4627      	mov	r7, r4
10066b7e:	e000      	b.n	10066b82 <smp_pp1_key_generation_method_selection+0xda>
10066b80:	27ff      	movs	r7, #255	@ 0xff
10066b82:	4917      	ldr	r1, [pc, #92]	@ (10066be0 <__arm_cp.5_2>)
10066b84:	6809      	ldr	r1, [r1, #0]
10066b86:	224e      	movs	r2, #78	@ 0x4e
10066b88:	5c89      	ldrb	r1, [r1, r2]
10066b8a:	0749      	lsls	r1, r1, #29
10066b8c:	d51e      	bpl.n	10066bcc <smp_pp1_key_generation_method_selection+0x124>
10066b8e:	8906      	ldrh	r6, [r0, #8]
10066b90:	4814      	ldr	r0, [pc, #80]	@ (10066be4 <__arm_cp.5_3>)
10066b92:	6800      	ldr	r0, [r0, #0]
10066b94:	6980      	ldr	r0, [r0, #24]
10066b96:	2502      	movs	r5, #2
10066b98:	2246      	movs	r2, #70	@ 0x46
10066b9a:	2303      	movs	r3, #3
10066b9c:	4629      	mov	r1, r5
10066b9e:	f7ee fc9f 	bl	100554e0 <aci_event_fifo_push_header>
10066ba2:	2800      	cmp	r0, #0
10066ba4:	d012      	beq.n	10066bcc <smp_pp1_key_generation_method_selection+0x124>
10066ba6:	4601      	mov	r1, r0
10066ba8:	7286      	strb	r6, [r0, #10]
10066baa:	2004      	movs	r0, #4
10066bac:	7248      	strb	r0, [r1, #9]
10066bae:	720d      	strb	r5, [r1, #8]
10066bb0:	2400      	movs	r4, #0
10066bb2:	71cc      	strb	r4, [r1, #7]
10066bb4:	2005      	movs	r0, #5
10066bb6:	7188      	strb	r0, [r1, #6]
10066bb8:	730f      	strb	r7, [r1, #12]
10066bba:	20ff      	movs	r0, #255	@ 0xff
10066bbc:	7148      	strb	r0, [r1, #5]
10066bbe:	2082      	movs	r0, #130	@ 0x82
10066bc0:	7108      	strb	r0, [r1, #4]
10066bc2:	0a30      	lsrs	r0, r6, #8
10066bc4:	72c8      	strb	r0, [r1, #11]
10066bc6:	4628      	mov	r0, r5
10066bc8:	f7ee fd27 	bl	1005561a <aci_event_fifo_push>
10066bcc:	4620      	mov	r0, r4
10066bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066bd0:	2202      	movs	r2, #2
10066bd2:	701a      	strb	r2, [r3, #0]
10066bd4:	e794      	b.n	10066b00 <smp_pp1_key_generation_method_selection+0x58>
10066bd6:	46c0      	nop			@ (mov r8, r8)

10066bd8 <__arm_cp.5_0>:
10066bd8:	200024b4 	.word	0x200024b4

10066bdc <__arm_cp.5_1>:
10066bdc:	10069c88 	.word	0x10069c88

10066be0 <__arm_cp.5_2>:
10066be0:	20002468 	.word	0x20002468

10066be4 <__arm_cp.5_3>:
10066be4:	20002418 	.word	0x20002418

10066be8 <smp_pp1_auth_req_field_generate_from_device_config>:
10066be8:	490b      	ldr	r1, [pc, #44]	@ (10066c18 <__arm_cp.6_0>)
10066bea:	6809      	ldr	r1, [r1, #0]
10066bec:	2230      	movs	r2, #48	@ 0x30
10066bee:	5c8a      	ldrb	r2, [r1, r2]
10066bf0:	2301      	movs	r3, #1
10066bf2:	4013      	ands	r3, r2
10066bf4:	3130      	adds	r1, #48	@ 0x30
10066bf6:	784a      	ldrb	r2, [r1, #1]
10066bf8:	07d2      	lsls	r2, r2, #31
10066bfa:	0f52      	lsrs	r2, r2, #29
10066bfc:	18d2      	adds	r2, r2, r3
10066bfe:	78cb      	ldrb	r3, [r1, #3]
10066c00:	07db      	lsls	r3, r3, #31
10066c02:	0edb      	lsrs	r3, r3, #27
10066c04:	18d2      	adds	r2, r2, r3
10066c06:	7889      	ldrb	r1, [r1, #2]
10066c08:	084b      	lsrs	r3, r1, #1
10066c0a:	430b      	orrs	r3, r1
10066c0c:	07d9      	lsls	r1, r3, #31
10066c0e:	0f09      	lsrs	r1, r1, #28
10066c10:	1851      	adds	r1, r2, r1
10066c12:	7001      	strb	r1, [r0, #0]
10066c14:	4770      	bx	lr
10066c16:	46c0      	nop			@ (mov r8, r8)

10066c18 <__arm_cp.6_0>:
10066c18:	200024b4 	.word	0x200024b4

10066c1c <smp_pp1_hndl_pairing_response_mode_through_event>:
10066c1c:	b570      	push	{r4, r5, r6, lr}
10066c1e:	4605      	mov	r5, r0
10066c20:	8900      	ldrh	r0, [r0, #8]
10066c22:	f7fb fe2a 	bl	1006287a <smp_sap_check_is_peer_device_bonded>
10066c26:	4246      	negs	r6, r0
10066c28:	4146      	adcs	r6, r0
10066c2a:	491b      	ldr	r1, [pc, #108]	@ (10066c98 <__arm_cp.8_0>)
10066c2c:	6809      	ldr	r1, [r1, #0]
10066c2e:	223c      	movs	r2, #60	@ 0x3c
10066c30:	5c89      	ldrb	r1, [r1, r2]
10066c32:	2902      	cmp	r1, #2
10066c34:	d004      	beq.n	10066c40 <smp_pp1_hndl_pairing_response_mode_through_event+0x24>
10066c36:	2400      	movs	r4, #0
10066c38:	2901      	cmp	r1, #1
10066c3a:	d12a      	bne.n	10066c92 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066c3c:	2800      	cmp	r0, #0
10066c3e:	d128      	bne.n	10066c92 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066c40:	2008      	movs	r0, #8
10066c42:	4301      	orrs	r1, r0
10066c44:	75a9      	strb	r1, [r5, #22]
10066c46:	4815      	ldr	r0, [pc, #84]	@ (10066c9c <__arm_cp.8_1>)
10066c48:	6800      	ldr	r0, [r0, #0]
10066c4a:	214e      	movs	r1, #78	@ 0x4e
10066c4c:	5c40      	ldrb	r0, [r0, r1]
10066c4e:	2401      	movs	r4, #1
10066c50:	0780      	lsls	r0, r0, #30
10066c52:	d51e      	bpl.n	10066c92 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066c54:	892d      	ldrh	r5, [r5, #8]
10066c56:	4812      	ldr	r0, [pc, #72]	@ (10066ca0 <__arm_cp.8_2>)
10066c58:	6800      	ldr	r0, [r0, #0]
10066c5a:	6980      	ldr	r0, [r0, #24]
10066c5c:	2102      	movs	r1, #2
10066c5e:	224b      	movs	r2, #75	@ 0x4b
10066c60:	2303      	movs	r3, #3
10066c62:	f7ee fc3d 	bl	100554e0 <aci_event_fifo_push_header>
10066c66:	2800      	cmp	r0, #0
10066c68:	d013      	beq.n	10066c92 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066c6a:	4601      	mov	r1, r0
10066c6c:	7285      	strb	r5, [r0, #10]
10066c6e:	2004      	movs	r0, #4
10066c70:	7248      	strb	r0, [r1, #9]
10066c72:	200b      	movs	r0, #11
10066c74:	7208      	strb	r0, [r1, #8]
10066c76:	2000      	movs	r0, #0
10066c78:	71c8      	strb	r0, [r1, #7]
10066c7a:	2005      	movs	r0, #5
10066c7c:	7188      	strb	r0, [r1, #6]
10066c7e:	730e      	strb	r6, [r1, #12]
10066c80:	20ff      	movs	r0, #255	@ 0xff
10066c82:	7148      	strb	r0, [r1, #5]
10066c84:	2082      	movs	r0, #130	@ 0x82
10066c86:	7108      	strb	r0, [r1, #4]
10066c88:	0a28      	lsrs	r0, r5, #8
10066c8a:	72c8      	strb	r0, [r1, #11]
10066c8c:	2002      	movs	r0, #2
10066c8e:	f7ee fcc4 	bl	1005561a <aci_event_fifo_push>
10066c92:	4620      	mov	r0, r4
10066c94:	bd70      	pop	{r4, r5, r6, pc}
10066c96:	46c0      	nop			@ (mov r8, r8)

10066c98 <__arm_cp.8_0>:
10066c98:	200024b4 	.word	0x200024b4

10066c9c <__arm_cp.8_1>:
10066c9c:	20002468 	.word	0x20002468

10066ca0 <__arm_cp.8_2>:
10066ca0:	20002418 	.word	0x20002418

10066ca4 <smp_pp1_pairing_packet_build>:
10066ca4:	b510      	push	{r4, lr}
10066ca6:	2407      	movs	r4, #7
10066ca8:	8044      	strh	r4, [r0, #2]
10066caa:	6844      	ldr	r4, [r0, #4]
10066cac:	7221      	strb	r1, [r4, #8]
10066cae:	490b      	ldr	r1, [pc, #44]	@ (10066cdc <__arm_cp.9_0>)
10066cb0:	6809      	ldr	r1, [r1, #0]
10066cb2:	2440      	movs	r4, #64	@ 0x40
10066cb4:	5d09      	ldrb	r1, [r1, r4]
10066cb6:	6844      	ldr	r4, [r0, #4]
10066cb8:	7261      	strb	r1, [r4, #9]
10066cba:	2101      	movs	r1, #1
10066cbc:	4011      	ands	r1, r2
10066cbe:	6842      	ldr	r2, [r0, #4]
10066cc0:	7291      	strb	r1, [r2, #10]
10066cc2:	6841      	ldr	r1, [r0, #4]
10066cc4:	72cb      	strb	r3, [r1, #11]
10066cc6:	6841      	ldr	r1, [r0, #4]
10066cc8:	9a02      	ldr	r2, [sp, #8]
10066cca:	730a      	strb	r2, [r1, #12]
10066ccc:	6841      	ldr	r1, [r0, #4]
10066cce:	9a03      	ldr	r2, [sp, #12]
10066cd0:	734a      	strb	r2, [r1, #13]
10066cd2:	6840      	ldr	r0, [r0, #4]
10066cd4:	9904      	ldr	r1, [sp, #16]
10066cd6:	7381      	strb	r1, [r0, #14]
10066cd8:	bd10      	pop	{r4, pc}
10066cda:	46c0      	nop			@ (mov r8, r8)

10066cdc <__arm_cp.9_0>:
10066cdc:	200024b4 	.word	0x200024b4

10066ce0 <smp_pp1_per_rxp_pairing_request>:
10066ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066ce2:	460c      	mov	r4, r1
10066ce4:	4607      	mov	r7, r0
10066ce6:	2501      	movs	r5, #1
10066ce8:	4628      	mov	r0, r5
10066cea:	f7ff fe3b 	bl	10066964 <smp_pp1_get_next_free_pairing_idx>
10066cee:	2802      	cmp	r0, #2
10066cf0:	d901      	bls.n	10066cf6 <smp_pp1_per_rxp_pairing_request+0x16>
10066cf2:	2038      	movs	r0, #56	@ 0x38
10066cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066cf6:	4606      	mov	r6, r0
10066cf8:	4638      	mov	r0, r7
10066cfa:	f7ff fe53 	bl	100669a4 <smp_pp1_reqrsp_pdu_params_check>
10066cfe:	2800      	cmp	r0, #0
10066d00:	d010      	beq.n	10066d24 <smp_pp1_per_rxp_pairing_request+0x44>
10066d02:	4601      	mov	r1, r0
10066d04:	4810      	ldr	r0, [pc, #64]	@ (10066d48 <__arm_cp.1_0>)
10066d06:	6800      	ldr	r0, [r0, #0]
10066d08:	22b1      	movs	r2, #177	@ 0xb1
10066d0a:	5c82      	ldrb	r2, [r0, r2]
10066d0c:	2a00      	cmp	r2, #0
10066d0e:	d003      	beq.n	10066d18 <smp_pp1_per_rxp_pairing_request+0x38>
10066d10:	30b1      	adds	r0, #177	@ 0xb1
10066d12:	40b5      	lsls	r5, r6
10066d14:	43aa      	bics	r2, r5
10066d16:	7002      	strb	r2, [r0, #0]
10066d18:	2200      	movs	r2, #0
10066d1a:	2301      	movs	r3, #1
10066d1c:	4620      	mov	r0, r4
10066d1e:	f7ff fe0b 	bl	10066938 <smp_pp3_pairing_failed_send>
10066d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066d24:	7526      	strb	r6, [r4, #20]
10066d26:	2101      	movs	r1, #1
10066d28:	4638      	mov	r0, r7
10066d2a:	4622      	mov	r2, r4
10066d2c:	f7ff fe5e 	bl	100669ec <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10066d30:	4620      	mov	r0, r4
10066d32:	f7ff ff73 	bl	10066c1c <smp_pp1_hndl_pairing_response_mode_through_event>
10066d36:	2800      	cmp	r0, #0
10066d38:	d001      	beq.n	10066d3e <smp_pp1_per_rxp_pairing_request+0x5e>
10066d3a:	2000      	movs	r0, #0
10066d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066d3e:	4620      	mov	r0, r4
10066d40:	f000 f804 	bl	10066d4c <smp_pp1_per_send_pairing_response>
10066d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066d46:	46c0      	nop			@ (mov r8, r8)

10066d48 <__arm_cp.1_0>:
10066d48:	200024b4 	.word	0x200024b4

10066d4c <smp_pp1_per_send_pairing_response>:
10066d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10066d4e:	b087      	sub	sp, #28
10066d50:	4604      	mov	r4, r0
10066d52:	a806      	add	r0, sp, #24
10066d54:	2600      	movs	r6, #0
10066d56:	7006      	strb	r6, [r0, #0]
10066d58:	8921      	ldrh	r1, [r4, #8]
10066d5a:	220b      	movs	r2, #11
10066d5c:	4630      	mov	r0, r6
10066d5e:	f7ee f9e9 	bl	10055134 <ACL_pkt_get>
10066d62:	2800      	cmp	r0, #0
10066d64:	d01b      	beq.n	10066d9e <smp_pp1_per_send_pairing_response+0x52>
10066d66:	9005      	str	r0, [sp, #20]
10066d68:	20b0      	movs	r0, #176	@ 0xb0
10066d6a:	72a0      	strb	r0, [r4, #10]
10066d6c:	75e6      	strb	r6, [r4, #23]
10066d6e:	7be0      	ldrb	r0, [r4, #15]
10066d70:	212f      	movs	r1, #47	@ 0x2f
10066d72:	4001      	ands	r1, r0
10066d74:	73e1      	strb	r1, [r4, #15]
10066d76:	4f43      	ldr	r7, [pc, #268]	@ (10066e84 <__arm_cp.2_0>)
10066d78:	683d      	ldr	r5, [r7, #0]
10066d7a:	7d20      	ldrb	r0, [r4, #20]
10066d7c:	2101      	movs	r1, #1
10066d7e:	9104      	str	r1, [sp, #16]
10066d80:	f7ff fe0a 	bl	10066998 <smp_pp1_get_pairing_pdu_offset>
10066d84:	1940      	adds	r0, r0, r5
10066d86:	21b7      	movs	r1, #183	@ 0xb7
10066d88:	5c45      	ldrb	r5, [r0, r1]
10066d8a:	6838      	ldr	r0, [r7, #0]
10066d8c:	2132      	movs	r1, #50	@ 0x32
10066d8e:	5c40      	ldrb	r0, [r0, r1]
10066d90:	2802      	cmp	r0, #2
10066d92:	d106      	bne.n	10066da2 <smp_pp1_per_send_pairing_response+0x56>
10066d94:	2008      	movs	r0, #8
10066d96:	4028      	ands	r0, r5
10066d98:	d103      	bne.n	10066da2 <smp_pp1_per_send_pairing_response+0x56>
10066d9a:	2103      	movs	r1, #3
10066d9c:	e051      	b.n	10066e42 <smp_pp1_per_send_pairing_response+0xf6>
10066d9e:	2688      	movs	r6, #136	@ 0x88
10066da0:	e061      	b.n	10066e66 <smp_pp1_per_send_pairing_response+0x11a>
10066da2:	7e20      	ldrb	r0, [r4, #24]
10066da4:	07c0      	lsls	r0, r0, #31
10066da6:	d105      	bne.n	10066db4 <smp_pp1_per_send_pairing_response+0x68>
10066da8:	af06      	add	r7, sp, #24
10066daa:	4638      	mov	r0, r7
10066dac:	f7ff ff1c 	bl	10066be8 <smp_pp1_auth_req_field_generate_from_device_config>
10066db0:	7838      	ldrb	r0, [r7, #0]
10066db2:	e002      	b.n	10066dba <smp_pp1_per_send_pairing_response+0x6e>
10066db4:	7d60      	ldrb	r0, [r4, #21]
10066db6:	a906      	add	r1, sp, #24
10066db8:	7008      	strb	r0, [r1, #0]
10066dba:	4005      	ands	r5, r0
10066dbc:	2018      	movs	r0, #24
10066dbe:	4028      	ands	r0, r5
10066dc0:	7de1      	ldrb	r1, [r4, #23]
10066dc2:	4301      	orrs	r1, r0
10066dc4:	75e1      	strb	r1, [r4, #23]
10066dc6:	0708      	lsls	r0, r1, #28
10066dc8:	d401      	bmi.n	10066dce <smp_pp1_per_send_pairing_response+0x82>
10066dca:	27b4      	movs	r7, #180	@ 0xb4
10066dcc:	e006      	b.n	10066ddc <smp_pp1_per_send_pairing_response+0x90>
10066dce:	4620      	mov	r0, r4
10066dd0:	f000 fd31 	bl	10067836 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>
10066dd4:	4601      	mov	r1, r0
10066dd6:	2800      	cmp	r0, #0
10066dd8:	d133      	bne.n	10066e42 <smp_pp1_per_send_pairing_response+0xf6>
10066dda:	27b2      	movs	r7, #178	@ 0xb2
10066ddc:	4620      	mov	r0, r4
10066dde:	f000 fcdf 	bl	100677a0 <smp_oob_check_is_remote_data_present>
10066de2:	9806      	ldr	r0, [sp, #24]
10066de4:	0741      	lsls	r1, r0, #29
10066de6:	0fc9      	lsrs	r1, r1, #31
10066de8:	73e1      	strb	r1, [r4, #15]
10066dea:	07c0      	lsls	r0, r0, #31
10066dec:	0f80      	lsrs	r0, r0, #30
10066dee:	73a0      	strb	r0, [r4, #14]
10066df0:	4620      	mov	r0, r4
10066df2:	f7ff fe0d 	bl	10066a10 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>
10066df6:	4620      	mov	r0, r4
10066df8:	f7ff fe56 	bl	10066aa8 <smp_pp1_key_generation_method_selection>
10066dfc:	4601      	mov	r1, r0
10066dfe:	2800      	cmp	r0, #0
10066e00:	d11f      	bne.n	10066e42 <smp_pp1_per_send_pairing_response+0xf6>
10066e02:	7ce0      	ldrb	r0, [r4, #19]
10066e04:	2802      	cmp	r0, #2
10066e06:	d104      	bne.n	10066e12 <smp_pp1_per_send_pairing_response+0xc6>
10066e08:	7be0      	ldrb	r0, [r4, #15]
10066e0a:	06c0      	lsls	r0, r0, #27
10066e0c:	d401      	bmi.n	10066e12 <smp_pp1_per_send_pairing_response+0xc6>
10066e0e:	204d      	movs	r0, #77	@ 0x4d
10066e10:	43c7      	mvns	r7, r0
10066e12:	481c      	ldr	r0, [pc, #112]	@ (10066e84 <__arm_cp.2_0>)
10066e14:	6800      	ldr	r0, [r0, #0]
10066e16:	2135      	movs	r1, #53	@ 0x35
10066e18:	5c40      	ldrb	r0, [r0, r1]
10066e1a:	a906      	add	r1, sp, #24
10066e1c:	780b      	ldrb	r3, [r1, #0]
10066e1e:	7b62      	ldrb	r2, [r4, #13]
10066e20:	7c61      	ldrb	r1, [r4, #17]
10066e22:	7ca5      	ldrb	r5, [r4, #18]
10066e24:	9000      	str	r0, [sp, #0]
10066e26:	9101      	str	r1, [sp, #4]
10066e28:	9502      	str	r5, [sp, #8]
10066e2a:	2102      	movs	r1, #2
10066e2c:	9d05      	ldr	r5, [sp, #20]
10066e2e:	4628      	mov	r0, r5
10066e30:	f7ff ff38 	bl	10066ca4 <smp_pp1_pairing_packet_build>
10066e34:	4620      	mov	r0, r4
10066e36:	4629      	mov	r1, r5
10066e38:	f7ff fb82 	bl	10066540 <smp_dep_l2c_send_acl_packet>
10066e3c:	4601      	mov	r1, r0
10066e3e:	2800      	cmp	r0, #0
10066e40:	d014      	beq.n	10066e6c <smp_pp1_per_send_pairing_response+0x120>
10066e42:	4810      	ldr	r0, [pc, #64]	@ (10066e84 <__arm_cp.2_0>)
10066e44:	6800      	ldr	r0, [r0, #0]
10066e46:	22b1      	movs	r2, #177	@ 0xb1
10066e48:	5c82      	ldrb	r2, [r0, r2]
10066e4a:	2a00      	cmp	r2, #0
10066e4c:	d005      	beq.n	10066e5a <smp_pp1_per_send_pairing_response+0x10e>
10066e4e:	30b1      	adds	r0, #177	@ 0xb1
10066e50:	7d23      	ldrb	r3, [r4, #20]
10066e52:	9d04      	ldr	r5, [sp, #16]
10066e54:	409d      	lsls	r5, r3
10066e56:	43aa      	bics	r2, r5
10066e58:	7002      	strb	r2, [r0, #0]
10066e5a:	2301      	movs	r3, #1
10066e5c:	4620      	mov	r0, r4
10066e5e:	9a05      	ldr	r2, [sp, #20]
10066e60:	f7ff fd6a 	bl	10066938 <smp_pp3_pairing_failed_send>
10066e64:	4606      	mov	r6, r0
10066e66:	4630      	mov	r0, r6
10066e68:	b007      	add	sp, #28
10066e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066e6c:	7ae0      	ldrb	r0, [r4, #11]
10066e6e:	21f8      	movs	r1, #248	@ 0xf8
10066e70:	4001      	ands	r1, r0
10066e72:	72e1      	strb	r1, [r4, #11]
10066e74:	9805      	ldr	r0, [sp, #20]
10066e76:	4631      	mov	r1, r6
10066e78:	4622      	mov	r2, r4
10066e7a:	f7ff fdb7 	bl	100669ec <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10066e7e:	72a7      	strb	r7, [r4, #10]
10066e80:	e7f1      	b.n	10066e66 <smp_pp1_per_send_pairing_response+0x11a>
10066e82:	46c0      	nop			@ (mov r8, r8)

10066e84 <__arm_cp.2_0>:
10066e84:	200024b4 	.word	0x200024b4

10066e88 <smp_pp2_per_rx_process_pairing_confirm>:
10066e88:	b5f0      	push	{r4, r5, r6, r7, lr}
10066e8a:	b089      	sub	sp, #36	@ 0x24
10066e8c:	460c      	mov	r4, r1
10066e8e:	4607      	mov	r7, r0
10066e90:	8909      	ldrh	r1, [r1, #8]
10066e92:	2500      	movs	r5, #0
10066e94:	2215      	movs	r2, #21
10066e96:	4628      	mov	r0, r5
10066e98:	f7ee f94c 	bl	10055134 <ACL_pkt_get>
10066e9c:	2800      	cmp	r0, #0
10066e9e:	d013      	beq.n	10066ec8 <smp_pp2_per_rx_process_pairing_confirm+0x40>
10066ea0:	4606      	mov	r6, r0
10066ea2:	2f00      	cmp	r7, #0
10066ea4:	d006      	beq.n	10066eb4 <smp_pp2_per_rx_process_pairing_confirm+0x2c>
10066ea6:	4623      	mov	r3, r4
10066ea8:	3328      	adds	r3, #40	@ 0x28
10066eaa:	2105      	movs	r1, #5
10066eac:	2210      	movs	r2, #16
10066eae:	4638      	mov	r0, r7
10066eb0:	f7ee f97e 	bl	100551b0 <ACL_pkt_read>
10066eb4:	7de0      	ldrb	r0, [r4, #23]
10066eb6:	0700      	lsls	r0, r0, #28
10066eb8:	d408      	bmi.n	10066ecc <smp_pp2_per_rx_process_pairing_confirm+0x44>
10066eba:	4621      	mov	r1, r4
10066ebc:	3148      	adds	r1, #72	@ 0x48
10066ebe:	aa05      	add	r2, sp, #20
10066ec0:	4620      	mov	r0, r4
10066ec2:	f000 f831 	bl	10066f28 <smp_pp2_per_lep_confirm_value_compute>
10066ec6:	e007      	b.n	10066ed8 <smp_pp2_per_rx_process_pairing_confirm+0x50>
10066ec8:	2088      	movs	r0, #136	@ 0x88
10066eca:	e019      	b.n	10066f00 <smp_pp2_per_rx_process_pairing_confirm+0x78>
10066ecc:	a805      	add	r0, sp, #20
10066ece:	9002      	str	r0, [sp, #8]
10066ed0:	9401      	str	r4, [sp, #4]
10066ed2:	a801      	add	r0, sp, #4
10066ed4:	f000 f961 	bl	1006719a <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>
10066ed8:	2011      	movs	r0, #17
10066eda:	8070      	strh	r0, [r6, #2]
10066edc:	6870      	ldr	r0, [r6, #4]
10066ede:	2103      	movs	r1, #3
10066ee0:	7201      	strb	r1, [r0, #8]
10066ee2:	2105      	movs	r1, #5
10066ee4:	2210      	movs	r2, #16
10066ee6:	ab05      	add	r3, sp, #20
10066ee8:	4630      	mov	r0, r6
10066eea:	f7ee f983 	bl	100551f4 <ACL_pkt_write>
10066eee:	4620      	mov	r0, r4
10066ef0:	4631      	mov	r1, r6
10066ef2:	f7ff fb25 	bl	10066540 <smp_dep_l2c_send_acl_packet>
10066ef6:	2800      	cmp	r0, #0
10066ef8:	d102      	bne.n	10066f00 <smp_pp2_per_rx_process_pairing_confirm+0x78>
10066efa:	20b6      	movs	r0, #182	@ 0xb6
10066efc:	72a0      	strb	r0, [r4, #10]
10066efe:	4628      	mov	r0, r5
10066f00:	b009      	add	sp, #36	@ 0x24
10066f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

10066f04 <smp_pp2_per_auth_stage_1_start>:
10066f04:	b510      	push	{r4, lr}
10066f06:	4604      	mov	r4, r0
10066f08:	3048      	adds	r0, #72	@ 0x48
10066f0a:	2110      	movs	r1, #16
10066f0c:	2200      	movs	r2, #0
10066f0e:	f7fc f958 	bl	100631c2 <HAL_Generate_Random_Bytes_To>
10066f12:	7de0      	ldrb	r0, [r4, #23]
10066f14:	0700      	lsls	r0, r0, #28
10066f16:	d402      	bmi.n	10066f1e <smp_pp2_per_auth_stage_1_start+0x1a>
10066f18:	20b5      	movs	r0, #181	@ 0xb5
10066f1a:	72a0      	strb	r0, [r4, #10]
10066f1c:	bd10      	pop	{r4, pc}
10066f1e:	4620      	mov	r0, r4
10066f20:	f000 f93a 	bl	10067198 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>
10066f24:	bd10      	pop	{r4, pc}
	...

10066f28 <smp_pp2_per_lep_confirm_value_compute>:
10066f28:	b5f0      	push	{r4, r5, r6, r7, lr}
10066f2a:	b09b      	sub	sp, #108	@ 0x6c
10066f2c:	4614      	mov	r4, r2
10066f2e:	9106      	str	r1, [sp, #24]
10066f30:	4607      	mov	r7, r0
10066f32:	ae0f      	add	r6, sp, #60	@ 0x3c
10066f34:	2500      	movs	r5, #0
10066f36:	222e      	movs	r2, #46	@ 0x2e
10066f38:	4630      	mov	r0, r6
10066f3a:	4629      	mov	r1, r5
10066f3c:	f7eb fd94 	bl	10052a68 <BLEPLAT_MemSet>
10066f40:	4630      	mov	r0, r6
10066f42:	3010      	adds	r0, #16
10066f44:	2210      	movs	r2, #16
10066f46:	9906      	ldr	r1, [sp, #24]
10066f48:	f7eb fd7e 	bl	10052a48 <BLEPLAT_MemCpy>
10066f4c:	3620      	adds	r6, #32
10066f4e:	7cf8      	ldrb	r0, [r7, #19]
10066f50:	2803      	cmp	r0, #3
10066f52:	d00d      	beq.n	10066f70 <smp_pp2_per_lep_confirm_value_compute+0x48>
10066f54:	2802      	cmp	r0, #2
10066f56:	d112      	bne.n	10066f7e <smp_pp2_per_lep_confirm_value_compute+0x56>
10066f58:	4844      	ldr	r0, [pc, #272]	@ (1006706c <__arm_cp.16_0>)
10066f5a:	6800      	ldr	r0, [r0, #0]
10066f5c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10066f5e:	a90f      	add	r1, sp, #60	@ 0x3c
10066f60:	7008      	strb	r0, [r1, #0]
10066f62:	0a02      	lsrs	r2, r0, #8
10066f64:	704a      	strb	r2, [r1, #1]
10066f66:	0c02      	lsrs	r2, r0, #16
10066f68:	708a      	strb	r2, [r1, #2]
10066f6a:	0e00      	lsrs	r0, r0, #24
10066f6c:	70c8      	strb	r0, [r1, #3]
10066f6e:	e006      	b.n	10066f7e <smp_pp2_per_lep_confirm_value_compute+0x56>
10066f70:	483e      	ldr	r0, [pc, #248]	@ (1006706c <__arm_cp.16_0>)
10066f72:	6801      	ldr	r1, [r0, #0]
10066f74:	3144      	adds	r1, #68	@ 0x44
10066f76:	a80f      	add	r0, sp, #60	@ 0x3c
10066f78:	2210      	movs	r2, #16
10066f7a:	f7eb fd65 	bl	10052a48 <BLEPLAT_MemCpy>
10066f7e:	7d38      	ldrb	r0, [r7, #20]
10066f80:	2101      	movs	r1, #1
10066f82:	9105      	str	r1, [sp, #20]
10066f84:	f7ff fd08 	bl	10066998 <smp_pp1_get_pairing_pdu_offset>
10066f88:	9002      	str	r0, [sp, #8]
10066f8a:	7d38      	ldrb	r0, [r7, #20]
10066f8c:	4629      	mov	r1, r5
10066f8e:	f7ff fd03 	bl	10066998 <smp_pp1_get_pairing_pdu_offset>
10066f92:	9001      	str	r0, [sp, #4]
10066f94:	2061      	movs	r0, #97	@ 0x61
10066f96:	5c38      	ldrb	r0, [r7, r0]
10066f98:	71f0      	strb	r0, [r6, #7]
10066f9a:	9606      	str	r6, [sp, #24]
10066f9c:	ae0f      	add	r6, sp, #60	@ 0x3c
10066f9e:	4630      	mov	r0, r6
10066fa0:	3028      	adds	r0, #40	@ 0x28
10066fa2:	4639      	mov	r1, r7
10066fa4:	3162      	adds	r1, #98	@ 0x62
10066fa6:	2206      	movs	r2, #6
10066fa8:	9200      	str	r2, [sp, #0]
10066faa:	4b31      	ldr	r3, [pc, #196]	@ (10067070 <__arm_cp.16_1>)
10066fac:	9004      	str	r0, [sp, #16]
10066fae:	4798      	blx	r3
10066fb0:	7878      	ldrb	r0, [r7, #1]
10066fb2:	9906      	ldr	r1, [sp, #24]
10066fb4:	7008      	strb	r0, [r1, #0]
10066fb6:	4630      	mov	r0, r6
10066fb8:	3021      	adds	r0, #33	@ 0x21
10066fba:	1cb9      	adds	r1, r7, #2
10066fbc:	9003      	str	r0, [sp, #12]
10066fbe:	9a00      	ldr	r2, [sp, #0]
10066fc0:	4b2b      	ldr	r3, [pc, #172]	@ (10067070 <__arm_cp.16_1>)
10066fc2:	4798      	blx	r3
10066fc4:	4829      	ldr	r0, [pc, #164]	@ (1006706c <__arm_cp.16_0>)
10066fc6:	6800      	ldr	r0, [r0, #0]
10066fc8:	9901      	ldr	r1, [sp, #4]
10066fca:	1841      	adds	r1, r0, r1
10066fcc:	31b4      	adds	r1, #180	@ 0xb4
10066fce:	af0b      	add	r7, sp, #44	@ 0x2c
10066fd0:	4638      	mov	r0, r7
10066fd2:	3009      	adds	r0, #9
10066fd4:	2207      	movs	r2, #7
10066fd6:	9201      	str	r2, [sp, #4]
10066fd8:	4b25      	ldr	r3, [pc, #148]	@ (10067070 <__arm_cp.16_1>)
10066fda:	4798      	blx	r3
10066fdc:	4823      	ldr	r0, [pc, #140]	@ (1006706c <__arm_cp.16_0>)
10066fde:	6800      	ldr	r0, [r0, #0]
10066fe0:	9902      	ldr	r1, [sp, #8]
10066fe2:	1841      	adds	r1, r0, r1
10066fe4:	31b4      	adds	r1, #180	@ 0xb4
10066fe6:	1cb8      	adds	r0, r7, #2
10066fe8:	9a01      	ldr	r2, [sp, #4]
10066fea:	4b21      	ldr	r3, [pc, #132]	@ (10067070 <__arm_cp.16_1>)
10066fec:	4798      	blx	r3
10066fee:	1c78      	adds	r0, r7, #1
10066ff0:	9906      	ldr	r1, [sp, #24]
10066ff2:	1dc9      	adds	r1, r1, #7
10066ff4:	9a05      	ldr	r2, [sp, #20]
10066ff6:	4b1e      	ldr	r3, [pc, #120]	@ (10067070 <__arm_cp.16_1>)
10066ff8:	4798      	blx	r3
10066ffa:	4b1d      	ldr	r3, [pc, #116]	@ (10067070 <__arm_cp.16_1>)
10066ffc:	4638      	mov	r0, r7
10066ffe:	9906      	ldr	r1, [sp, #24]
10067000:	9a05      	ldr	r2, [sp, #20]
10067002:	4798      	blx	r3
10067004:	3610      	adds	r6, #16
10067006:	2d10      	cmp	r5, #16
10067008:	d007      	beq.n	1006701a <smp_pp2_per_lep_confirm_value_compute+0xf2>
1006700a:	5d70      	ldrb	r0, [r6, r5]
1006700c:	a90b      	add	r1, sp, #44	@ 0x2c
1006700e:	5d49      	ldrb	r1, [r1, r5]
10067010:	4041      	eors	r1, r0
10067012:	a807      	add	r0, sp, #28
10067014:	5541      	strb	r1, [r0, r5]
10067016:	1c6d      	adds	r5, r5, #1
10067018:	e7f5      	b.n	10067006 <smp_pp2_per_lep_confirm_value_compute+0xde>
1006701a:	a80f      	add	r0, sp, #60	@ 0x3c
1006701c:	a907      	add	r1, sp, #28
1006701e:	4622      	mov	r2, r4
10067020:	f7f2 fc54 	bl	100598cc <hci_le_encrypt>
10067024:	ae0b      	add	r6, sp, #44	@ 0x2c
10067026:	2500      	movs	r5, #0
10067028:	2210      	movs	r2, #16
1006702a:	4630      	mov	r0, r6
1006702c:	4629      	mov	r1, r5
1006702e:	f7eb fd1b 	bl	10052a68 <BLEPLAT_MemSet>
10067032:	2706      	movs	r7, #6
10067034:	4630      	mov	r0, r6
10067036:	9904      	ldr	r1, [sp, #16]
10067038:	463a      	mov	r2, r7
1006703a:	f7eb fd05 	bl	10052a48 <BLEPLAT_MemCpy>
1006703e:	1db0      	adds	r0, r6, #6
10067040:	9903      	ldr	r1, [sp, #12]
10067042:	463a      	mov	r2, r7
10067044:	f7eb fd00 	bl	10052a48 <BLEPLAT_MemCpy>
10067048:	2d10      	cmp	r5, #16
1006704a:	d007      	beq.n	1006705c <smp_pp2_per_lep_confirm_value_compute+0x134>
1006704c:	5d60      	ldrb	r0, [r4, r5]
1006704e:	a90b      	add	r1, sp, #44	@ 0x2c
10067050:	5d49      	ldrb	r1, [r1, r5]
10067052:	4041      	eors	r1, r0
10067054:	a807      	add	r0, sp, #28
10067056:	5541      	strb	r1, [r0, r5]
10067058:	1c6d      	adds	r5, r5, #1
1006705a:	e7f5      	b.n	10067048 <smp_pp2_per_lep_confirm_value_compute+0x120>
1006705c:	a80f      	add	r0, sp, #60	@ 0x3c
1006705e:	a907      	add	r1, sp, #28
10067060:	4622      	mov	r2, r4
10067062:	f7f2 fc33 	bl	100598cc <hci_le_encrypt>
10067066:	b01b      	add	sp, #108	@ 0x6c
10067068:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006706a:	46c0      	nop			@ (mov r8, r8)

1006706c <__arm_cp.16_0>:
1006706c:	200024b4 	.word	0x200024b4

10067070 <__arm_cp.16_1>:
10067070:	10052a49 	.word	0x10052a49

10067074 <smp_pp2_per_rx_process_pairing_random>:
10067074:	b5f0      	push	{r4, r5, r6, r7, lr}
10067076:	b08b      	sub	sp, #44	@ 0x2c
10067078:	460d      	mov	r5, r1
1006707a:	4606      	mov	r6, r0
1006707c:	2400      	movs	r4, #0
1006707e:	9402      	str	r4, [sp, #8]
10067080:	8909      	ldrh	r1, [r1, #8]
10067082:	2215      	movs	r2, #21
10067084:	4620      	mov	r0, r4
10067086:	f7ee f855 	bl	10055134 <ACL_pkt_get>
1006708a:	2800      	cmp	r0, #0
1006708c:	d020      	beq.n	100670d0 <smp_pp2_per_rx_process_pairing_random+0x5c>
1006708e:	4607      	mov	r7, r0
10067090:	462b      	mov	r3, r5
10067092:	3338      	adds	r3, #56	@ 0x38
10067094:	2105      	movs	r1, #5
10067096:	2210      	movs	r2, #16
10067098:	4630      	mov	r0, r6
1006709a:	461e      	mov	r6, r3
1006709c:	f7ee f888 	bl	100551b0 <ACL_pkt_read>
100670a0:	7de8      	ldrb	r0, [r5, #23]
100670a2:	0700      	lsls	r0, r0, #28
100670a4:	d416      	bmi.n	100670d4 <smp_pp2_per_rx_process_pairing_random+0x60>
100670a6:	9400      	str	r4, [sp, #0]
100670a8:	4634      	mov	r4, r6
100670aa:	ae03      	add	r6, sp, #12
100670ac:	4628      	mov	r0, r5
100670ae:	4621      	mov	r1, r4
100670b0:	4632      	mov	r2, r6
100670b2:	f7ff ff39 	bl	10066f28 <smp_pp2_per_lep_confirm_value_compute>
100670b6:	4629      	mov	r1, r5
100670b8:	3128      	adds	r1, #40	@ 0x28
100670ba:	2210      	movs	r2, #16
100670bc:	4630      	mov	r0, r6
100670be:	4626      	mov	r6, r4
100670c0:	9c00      	ldr	r4, [sp, #0]
100670c2:	f7eb fce1 	bl	10052a88 <BLEPLAT_MemCmp>
100670c6:	a901      	add	r1, sp, #4
100670c8:	22bc      	movs	r2, #188	@ 0xbc
100670ca:	700a      	strb	r2, [r1, #0]
100670cc:	9002      	str	r0, [sp, #8]
100670ce:	e00c      	b.n	100670ea <smp_pp2_per_rx_process_pairing_random+0x76>
100670d0:	2488      	movs	r4, #136	@ 0x88
100670d2:	e05b      	b.n	1006718c <smp_pp2_per_rx_process_pairing_random+0x118>
100670d4:	a801      	add	r0, sp, #4
100670d6:	900a      	str	r0, [sp, #40]	@ 0x28
100670d8:	a802      	add	r0, sp, #8
100670da:	9009      	str	r0, [sp, #36]	@ 0x24
100670dc:	a803      	add	r0, sp, #12
100670de:	9008      	str	r0, [sp, #32]
100670e0:	9507      	str	r5, [sp, #28]
100670e2:	a807      	add	r0, sp, #28
100670e4:	f000 f85a 	bl	1006719c <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>
100670e8:	9802      	ldr	r0, [sp, #8]
100670ea:	2800      	cmp	r0, #0
100670ec:	d006      	beq.n	100670fc <smp_pp2_per_rx_process_pairing_random+0x88>
100670ee:	2104      	movs	r1, #4
100670f0:	2301      	movs	r3, #1
100670f2:	4628      	mov	r0, r5
100670f4:	463a      	mov	r2, r7
100670f6:	f7ff fc1f 	bl	10066938 <smp_pp3_pairing_failed_send>
100670fa:	e01b      	b.n	10067134 <smp_pp2_per_rx_process_pairing_random+0xc0>
100670fc:	2011      	movs	r0, #17
100670fe:	8078      	strh	r0, [r7, #2]
10067100:	6878      	ldr	r0, [r7, #4]
10067102:	2104      	movs	r1, #4
10067104:	7201      	strb	r1, [r0, #8]
10067106:	462b      	mov	r3, r5
10067108:	3348      	adds	r3, #72	@ 0x48
1006710a:	2105      	movs	r1, #5
1006710c:	2210      	movs	r2, #16
1006710e:	4638      	mov	r0, r7
10067110:	f7ee f870 	bl	100551f4 <ACL_pkt_write>
10067114:	4628      	mov	r0, r5
10067116:	4639      	mov	r1, r7
10067118:	f7ff fa12 	bl	10066540 <smp_dep_l2c_send_acl_packet>
1006711c:	2800      	cmp	r0, #0
1006711e:	d109      	bne.n	10067134 <smp_pp2_per_rx_process_pairing_random+0xc0>
10067120:	9801      	ldr	r0, [sp, #4]
10067122:	72a8      	strb	r0, [r5, #10]
10067124:	481b      	ldr	r0, [pc, #108]	@ (10067194 <__arm_cp.17_0>)
10067126:	6800      	ldr	r0, [r0, #0]
10067128:	2135      	movs	r1, #53	@ 0x35
1006712a:	5c40      	ldrb	r0, [r0, r1]
1006712c:	7c29      	ldrb	r1, [r5, #16]
1006712e:	4281      	cmp	r1, r0
10067130:	d900      	bls.n	10067134 <smp_pp2_per_rx_process_pairing_random+0xc0>
10067132:	7428      	strb	r0, [r5, #16]
10067134:	9802      	ldr	r0, [sp, #8]
10067136:	2800      	cmp	r0, #0
10067138:	d128      	bne.n	1006718c <smp_pp2_per_rx_process_pairing_random+0x118>
1006713a:	7de8      	ldrb	r0, [r5, #23]
1006713c:	0700      	lsls	r0, r0, #28
1006713e:	d425      	bmi.n	1006718c <smp_pp2_per_rx_process_pairing_random+0x118>
10067140:	a807      	add	r0, sp, #28
10067142:	2400      	movs	r4, #0
10067144:	2210      	movs	r2, #16
10067146:	4621      	mov	r1, r4
10067148:	f7eb fc8e 	bl	10052a68 <BLEPLAT_MemSet>
1006714c:	7ce8      	ldrb	r0, [r5, #19]
1006714e:	2803      	cmp	r0, #3
10067150:	d00d      	beq.n	1006716e <smp_pp2_per_rx_process_pairing_random+0xfa>
10067152:	2802      	cmp	r0, #2
10067154:	d112      	bne.n	1006717c <smp_pp2_per_rx_process_pairing_random+0x108>
10067156:	480f      	ldr	r0, [pc, #60]	@ (10067194 <__arm_cp.17_0>)
10067158:	6800      	ldr	r0, [r0, #0]
1006715a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1006715c:	a907      	add	r1, sp, #28
1006715e:	7008      	strb	r0, [r1, #0]
10067160:	0a02      	lsrs	r2, r0, #8
10067162:	704a      	strb	r2, [r1, #1]
10067164:	0c02      	lsrs	r2, r0, #16
10067166:	708a      	strb	r2, [r1, #2]
10067168:	0e00      	lsrs	r0, r0, #24
1006716a:	70c8      	strb	r0, [r1, #3]
1006716c:	e006      	b.n	1006717c <smp_pp2_per_rx_process_pairing_random+0x108>
1006716e:	4809      	ldr	r0, [pc, #36]	@ (10067194 <__arm_cp.17_0>)
10067170:	6801      	ldr	r1, [r0, #0]
10067172:	3144      	adds	r1, #68	@ 0x44
10067174:	a807      	add	r0, sp, #28
10067176:	2210      	movs	r2, #16
10067178:	f7eb fc66 	bl	10052a48 <BLEPLAT_MemCpy>
1006717c:	4629      	mov	r1, r5
1006717e:	3148      	adds	r1, #72	@ 0x48
10067180:	3528      	adds	r5, #40	@ 0x28
10067182:	a807      	add	r0, sp, #28
10067184:	4632      	mov	r2, r6
10067186:	462b      	mov	r3, r5
10067188:	f7fa fcd0 	bl	10061b2c <smp_crt_s1_generate_stk>
1006718c:	4620      	mov	r0, r4
1006718e:	b00b      	add	sp, #44	@ 0x2c
10067190:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067192:	46c0      	nop			@ (mov r8, r8)

10067194 <__arm_cp.17_0>:
10067194:	200024b4 	.word	0x200024b4

10067198 <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>:
10067198:	4770      	bx	lr

1006719a <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>:
1006719a:	4770      	bx	lr

1006719c <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>:
1006719c:	4770      	bx	lr

1006719e <smp_pp3_keys_distribution_start>:
1006719e:	b580      	push	{r7, lr}
100671a0:	2901      	cmp	r1, #1
100671a2:	d111      	bne.n	100671c8 <smp_pp3_keys_distribution_start+0x2a>
100671a4:	7c42      	ldrb	r2, [r0, #17]
100671a6:	0753      	lsls	r3, r2, #29
100671a8:	d005      	beq.n	100671b6 <smp_pp3_keys_distribution_start+0x18>
100671aa:	7dc3      	ldrb	r3, [r0, #23]
100671ac:	071b      	lsls	r3, r3, #28
100671ae:	d51d      	bpl.n	100671ec <smp_pp3_keys_distribution_start+0x4e>
100671b0:	2306      	movs	r3, #6
100671b2:	401a      	ands	r2, r3
100671b4:	d11a      	bne.n	100671ec <smp_pp3_keys_distribution_start+0x4e>
100671b6:	2260      	movs	r2, #96	@ 0x60
100671b8:	5c83      	ldrb	r3, [r0, r2]
100671ba:	2201      	movs	r2, #1
100671bc:	401a      	ands	r2, r3
100671be:	2900      	cmp	r1, #0
100671c0:	d006      	beq.n	100671d0 <smp_pp3_keys_distribution_start+0x32>
100671c2:	2a00      	cmp	r2, #0
100671c4:	d119      	bne.n	100671fa <smp_pp3_keys_distribution_start+0x5c>
100671c6:	e003      	b.n	100671d0 <smp_pp3_keys_distribution_start+0x32>
100671c8:	2900      	cmp	r1, #0
100671ca:	d000      	beq.n	100671ce <smp_pp3_keys_distribution_start+0x30>
100671cc:	bd80      	pop	{r7, pc}
100671ce:	2200      	movs	r2, #0
100671d0:	7c81      	ldrb	r1, [r0, #18]
100671d2:	07cb      	lsls	r3, r1, #31
100671d4:	d004      	beq.n	100671e0 <smp_pp3_keys_distribution_start+0x42>
100671d6:	7dc3      	ldrb	r3, [r0, #23]
100671d8:	071b      	lsls	r3, r3, #28
100671da:	d401      	bmi.n	100671e0 <smp_pp3_keys_distribution_start+0x42>
100671dc:	21d1      	movs	r1, #209	@ 0xd1
100671de:	e009      	b.n	100671f4 <smp_pp3_keys_distribution_start+0x56>
100671e0:	078b      	lsls	r3, r1, #30
100671e2:	d406      	bmi.n	100671f2 <smp_pp3_keys_distribution_start+0x54>
100671e4:	0749      	lsls	r1, r1, #29
100671e6:	d508      	bpl.n	100671fa <smp_pp3_keys_distribution_start+0x5c>
100671e8:	21d5      	movs	r1, #213	@ 0xd5
100671ea:	e003      	b.n	100671f4 <smp_pp3_keys_distribution_start+0x56>
100671ec:	21d0      	movs	r1, #208	@ 0xd0
100671ee:	7281      	strb	r1, [r0, #10]
100671f0:	bd80      	pop	{r7, pc}
100671f2:	21d3      	movs	r1, #211	@ 0xd3
100671f4:	7281      	strb	r1, [r0, #10]
100671f6:	2a00      	cmp	r2, #0
100671f8:	d002      	beq.n	10067200 <smp_pp3_keys_distribution_start+0x62>
100671fa:	f000 f804 	bl	10067206 <smp_pp3_keys_distribution_completed>
100671fe:	bd80      	pop	{r7, pc}
10067200:	f000 f816 	bl	10067230 <smp_pp3_keys_distribution_send>
10067204:	bd80      	pop	{r7, pc}

10067206 <smp_pp3_keys_distribution_completed>:
10067206:	b580      	push	{r7, lr}
10067208:	2160      	movs	r1, #96	@ 0x60
1006720a:	5c41      	ldrb	r1, [r0, r1]
1006720c:	07c9      	lsls	r1, r1, #31
1006720e:	d106      	bne.n	1006721e <smp_pp3_keys_distribution_completed+0x18>
10067210:	2111      	movs	r1, #17
10067212:	5641      	ldrsb	r1, [r0, r1]
10067214:	2900      	cmp	r1, #0
10067216:	d502      	bpl.n	1006721e <smp_pp3_keys_distribution_completed+0x18>
10067218:	7e81      	ldrb	r1, [r0, #26]
1006721a:	068a      	lsls	r2, r1, #26
1006721c:	d402      	bmi.n	10067224 <smp_pp3_keys_distribution_completed+0x1e>
1006721e:	f7ff fad3 	bl	100667c8 <smp_pp3_pairing_completed_successful>
10067222:	bd80      	pop	{r7, pc}
10067224:	2204      	movs	r2, #4
10067226:	4311      	orrs	r1, r2
10067228:	7681      	strb	r1, [r0, #26]
1006722a:	f7ff faca 	bl	100667c2 <smp_start_encryption_ucfg_weak>
1006722e:	bd80      	pop	{r7, pc}

10067230 <smp_pp3_keys_distribution_send>:
10067230:	b5f0      	push	{r4, r5, r6, r7, lr}
10067232:	b089      	sub	sp, #36	@ 0x24
10067234:	4604      	mov	r4, r0
10067236:	a808      	add	r0, sp, #32
10067238:	2600      	movs	r6, #0
1006723a:	8006      	strh	r6, [r0, #0]
1006723c:	8921      	ldrh	r1, [r4, #8]
1006723e:	2215      	movs	r2, #21
10067240:	4630      	mov	r0, r6
10067242:	f7ed ff77 	bl	10055134 <ACL_pkt_get>
10067246:	2800      	cmp	r0, #0
10067248:	d02d      	beq.n	100672a6 <smp_pp3_keys_distribution_send+0x76>
1006724a:	4605      	mov	r5, r0
1006724c:	2060      	movs	r0, #96	@ 0x60
1006724e:	5c20      	ldrb	r0, [r4, r0]
10067250:	06c0      	lsls	r0, r0, #27
10067252:	d40b      	bmi.n	1006726c <smp_pp3_keys_distribution_send+0x3c>
10067254:	4627      	mov	r7, r4
10067256:	3760      	adds	r7, #96	@ 0x60
10067258:	4620      	mov	r0, r4
1006725a:	301c      	adds	r0, #28
1006725c:	2102      	movs	r1, #2
1006725e:	2200      	movs	r2, #0
10067260:	f7fb ffaf 	bl	100631c2 <HAL_Generate_Random_Bytes_To>
10067264:	7838      	ldrb	r0, [r7, #0]
10067266:	2110      	movs	r1, #16
10067268:	4301      	orrs	r1, r0
1006726a:	7039      	strb	r1, [r7, #0]
1006726c:	7aa0      	ldrb	r0, [r4, #10]
1006726e:	38d1      	subs	r0, #209	@ 0xd1
10067270:	2804      	cmp	r0, #4
10067272:	d875      	bhi.n	10067360 <smp_pp3_keys_distribution_send+0x130>
10067274:	4478      	add	r0, pc
10067276:	7900      	ldrb	r0, [r0, #4]
10067278:	0040      	lsls	r0, r0, #1
1006727a:	4487      	add	pc, r0
1006727c:	4e381902 	.word	0x4e381902
10067280:	0060      	.short	0x0060
10067282:	483c      	ldr	r0, [pc, #240]	@ (10067374 <__arm_cp.2_0>)
10067284:	6800      	ldr	r0, [r0, #0]
10067286:	4621      	mov	r1, r4
10067288:	311c      	adds	r1, #28
1006728a:	3008      	adds	r0, #8
1006728c:	aa08      	add	r2, sp, #32
1006728e:	ae04      	add	r6, sp, #16
10067290:	4633      	mov	r3, r6
10067292:	f7fa fbcd 	bl	10061a30 <smp_crt_diversify>
10067296:	6868      	ldr	r0, [r5, #4]
10067298:	2106      	movs	r1, #6
1006729a:	7201      	strb	r1, [r0, #8]
1006729c:	2011      	movs	r0, #17
1006729e:	8068      	strh	r0, [r5, #2]
100672a0:	7c22      	ldrb	r2, [r4, #16]
100672a2:	2105      	movs	r1, #5
100672a4:	e058      	b.n	10067358 <smp_pp3_keys_distribution_send+0x128>
100672a6:	200e      	movs	r0, #14
100672a8:	2100      	movs	r1, #0
100672aa:	f7fb fc75 	bl	10062b98 <tsk_wait_resource_idx>
100672ae:	e05f      	b.n	10067370 <smp_pp3_keys_distribution_send+0x140>
100672b0:	ae04      	add	r6, sp, #16
100672b2:	2108      	movs	r1, #8
100672b4:	9102      	str	r1, [sp, #8]
100672b6:	2200      	movs	r2, #0
100672b8:	4630      	mov	r0, r6
100672ba:	9601      	str	r6, [sp, #4]
100672bc:	f7fb ff81 	bl	100631c2 <HAL_Generate_Random_Bytes_To>
100672c0:	4620      	mov	r0, r4
100672c2:	301c      	adds	r0, #28
100672c4:	af08      	add	r7, sp, #32
100672c6:	4631      	mov	r1, r6
100672c8:	463a      	mov	r2, r7
100672ca:	f7fa fb7b 	bl	100619c4 <smp_sap_crt_generate_ediv>
100672ce:	200b      	movs	r0, #11
100672d0:	8068      	strh	r0, [r5, #2]
100672d2:	6868      	ldr	r0, [r5, #4]
100672d4:	2607      	movs	r6, #7
100672d6:	7206      	strb	r6, [r0, #8]
100672d8:	2105      	movs	r1, #5
100672da:	2202      	movs	r2, #2
100672dc:	4628      	mov	r0, r5
100672de:	463b      	mov	r3, r7
100672e0:	f7ed ff88 	bl	100551f4 <ACL_pkt_write>
100672e4:	4628      	mov	r0, r5
100672e6:	4631      	mov	r1, r6
100672e8:	9a02      	ldr	r2, [sp, #8]
100672ea:	9b01      	ldr	r3, [sp, #4]
100672ec:	e036      	b.n	1006735c <smp_pp3_keys_distribution_send+0x12c>
100672ee:	2011      	movs	r0, #17
100672f0:	8068      	strh	r0, [r5, #2]
100672f2:	6868      	ldr	r0, [r5, #4]
100672f4:	2108      	movs	r1, #8
100672f6:	7201      	strb	r1, [r0, #8]
100672f8:	a804      	add	r0, sp, #16
100672fa:	2100      	movs	r1, #0
100672fc:	2210      	movs	r2, #16
100672fe:	f7eb fbb3 	bl	10052a68 <BLEPLAT_MemSet>
10067302:	f7ef f989 	bl	10056618 <GapIsPrivacySupported>
10067306:	2800      	cmp	r0, #0
10067308:	d002      	beq.n	10067310 <smp_pp3_keys_distribution_send+0xe0>
1006730a:	a804      	add	r0, sp, #16
1006730c:	f7fa fba4 	bl	10061a58 <smp_sap_crt_generate_local_irk>
10067310:	2105      	movs	r1, #5
10067312:	2210      	movs	r2, #16
10067314:	ab04      	add	r3, sp, #16
10067316:	4628      	mov	r0, r5
10067318:	e020      	b.n	1006735c <smp_pp3_keys_distribution_send+0x12c>
1006731a:	a803      	add	r0, sp, #12
1006731c:	7006      	strb	r6, [r0, #0]
1006731e:	ae04      	add	r6, sp, #16
10067320:	4631      	mov	r1, r6
10067322:	f7ff f8f5 	bl	10066510 <smp_dep_gap_get_local_identity_address>
10067326:	2008      	movs	r0, #8
10067328:	8068      	strh	r0, [r5, #2]
1006732a:	6868      	ldr	r0, [r5, #4]
1006732c:	2109      	movs	r1, #9
1006732e:	7201      	strb	r1, [r0, #8]
10067330:	6868      	ldr	r0, [r5, #4]
10067332:	9903      	ldr	r1, [sp, #12]
10067334:	7241      	strb	r1, [r0, #9]
10067336:	2106      	movs	r1, #6
10067338:	4628      	mov	r0, r5
1006733a:	460a      	mov	r2, r1
1006733c:	e00d      	b.n	1006735a <smp_pp3_keys_distribution_send+0x12a>
1006733e:	2011      	movs	r0, #17
10067340:	8068      	strh	r0, [r5, #2]
10067342:	6868      	ldr	r0, [r5, #4]
10067344:	210a      	movs	r1, #10
10067346:	7201      	strb	r1, [r0, #8]
10067348:	4620      	mov	r0, r4
1006734a:	301c      	adds	r0, #28
1006734c:	ae04      	add	r6, sp, #16
1006734e:	4631      	mov	r1, r6
10067350:	f7fa fc04 	bl	10061b5c <smp_crt_generate_csrk>
10067354:	2105      	movs	r1, #5
10067356:	2210      	movs	r2, #16
10067358:	4628      	mov	r0, r5
1006735a:	4633      	mov	r3, r6
1006735c:	f7ed ff4a 	bl	100551f4 <ACL_pkt_write>
10067360:	4620      	mov	r0, r4
10067362:	4629      	mov	r1, r5
10067364:	f7ff f8ec 	bl	10066540 <smp_dep_l2c_send_acl_packet>
10067368:	2800      	cmp	r0, #0
1006736a:	d101      	bne.n	10067370 <smp_pp3_keys_distribution_send+0x140>
1006736c:	20dd      	movs	r0, #221	@ 0xdd
1006736e:	72a0      	strb	r0, [r4, #10]
10067370:	b009      	add	sp, #36	@ 0x24
10067372:	bdf0      	pop	{r4, r5, r6, r7, pc}

10067374 <__arm_cp.2_0>:
10067374:	20002414 	.word	0x20002414

10067378 <smp_pp3_keys_distribution_signaling_ack>:
10067378:	b580      	push	{r7, lr}
1006737a:	7a82      	ldrb	r2, [r0, #10]
1006737c:	2add      	cmp	r2, #221	@ 0xdd
1006737e:	d123      	bne.n	100673c8 <smp_pp3_keys_distribution_signaling_ack+0x50>
10067380:	1f8a      	subs	r2, r1, #6
10067382:	2a04      	cmp	r2, #4
10067384:	d81e      	bhi.n	100673c4 <smp_pp3_keys_distribution_signaling_ack+0x4c>
10067386:	21d2      	movs	r1, #210	@ 0xd2
10067388:	447a      	add	r2, pc
1006738a:	7912      	ldrb	r2, [r2, #4]
1006738c:	0052      	lsls	r2, r2, #1
1006738e:	4497      	add	pc, r2
10067390:	07110218 	.word	0x07110218
10067394:	000a      	.short	0x000a
10067396:	7c81      	ldrb	r1, [r0, #18]
10067398:	078a      	lsls	r2, r1, #30
1006739a:	d502      	bpl.n	100673a2 <smp_pp3_keys_distribution_signaling_ack+0x2a>
1006739c:	21d3      	movs	r1, #211	@ 0xd3
1006739e:	e010      	b.n	100673c2 <smp_pp3_keys_distribution_signaling_ack+0x4a>
100673a0:	7c81      	ldrb	r1, [r0, #18]
100673a2:	0749      	lsls	r1, r1, #29
100673a4:	d40c      	bmi.n	100673c0 <smp_pp3_keys_distribution_signaling_ack+0x48>
100673a6:	2160      	movs	r1, #96	@ 0x60
100673a8:	5c41      	ldrb	r1, [r0, r1]
100673aa:	07c9      	lsls	r1, r1, #31
100673ac:	d104      	bne.n	100673b8 <smp_pp3_keys_distribution_signaling_ack+0x40>
100673ae:	f7ff ff2a 	bl	10067206 <smp_pp3_keys_distribution_completed>
100673b2:	bd80      	pop	{r7, pc}
100673b4:	21d4      	movs	r1, #212	@ 0xd4
100673b6:	e004      	b.n	100673c2 <smp_pp3_keys_distribution_signaling_ack+0x4a>
100673b8:	2101      	movs	r1, #1
100673ba:	f7ff fef0 	bl	1006719e <smp_pp3_keys_distribution_start>
100673be:	bd80      	pop	{r7, pc}
100673c0:	21d5      	movs	r1, #213	@ 0xd5
100673c2:	7281      	strb	r1, [r0, #10]
100673c4:	f7ff ff34 	bl	10067230 <smp_pp3_keys_distribution_send>
100673c8:	bd80      	pop	{r7, pc}
	...

100673cc <smp_pp3_keys_distribution_receive>:
100673cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100673ce:	b085      	sub	sp, #20
100673d0:	4607      	mov	r7, r0
100673d2:	6840      	ldr	r0, [r0, #4]
100673d4:	7a05      	ldrb	r5, [r0, #8]
100673d6:	1fa8      	subs	r0, r5, #6
100673d8:	2804      	cmp	r0, #4
100673da:	d823      	bhi.n	10067424 <smp_pp3_keys_distribution_receive+0x58>
100673dc:	460c      	mov	r4, r1
100673de:	7a88      	ldrb	r0, [r1, #10]
100673e0:	2686      	movs	r6, #134	@ 0x86
100673e2:	28d0      	cmp	r0, #208	@ 0xd0
100673e4:	d11f      	bne.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
100673e6:	4620      	mov	r0, r4
100673e8:	3059      	adds	r0, #89	@ 0x59
100673ea:	9001      	str	r0, [sp, #4]
100673ec:	8920      	ldrh	r0, [r4, #8]
100673ee:	f000 f995 	bl	1006771c <smp_get_remote_device_list_index>
100673f2:	4602      	mov	r2, r0
100673f4:	2000      	movs	r0, #0
100673f6:	4b44      	ldr	r3, [pc, #272]	@ (10067508 <__arm_cp.4_0>)
100673f8:	9002      	str	r0, [sp, #8]
100673fa:	4601      	mov	r1, r0
100673fc:	f7fa fe56 	bl	100620ac <smp_timer_reset>
10067400:	2d06      	cmp	r5, #6
10067402:	d005      	beq.n	10067410 <smp_pp3_keys_distribution_receive+0x44>
10067404:	2d09      	cmp	r5, #9
10067406:	d011      	beq.n	1006742c <smp_pp3_keys_distribution_receive+0x60>
10067408:	2d08      	cmp	r5, #8
1006740a:	d034      	beq.n	10067476 <smp_pp3_keys_distribution_receive+0xaa>
1006740c:	2d07      	cmp	r5, #7
1006740e:	d13d      	bne.n	1006748c <smp_pp3_keys_distribution_receive+0xc0>
10067410:	7de0      	ldrb	r0, [r4, #23]
10067412:	0700      	lsls	r0, r0, #28
10067414:	d407      	bmi.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
10067416:	7c60      	ldrb	r0, [r4, #17]
10067418:	07c0      	lsls	r0, r0, #31
1006741a:	d004      	beq.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
1006741c:	2d06      	cmp	r5, #6
1006741e:	d144      	bne.n	100674aa <smp_pp3_keys_distribution_receive+0xde>
10067420:	3428      	adds	r4, #40	@ 0x28
10067422:	e02c      	b.n	1006747e <smp_pp3_keys_distribution_receive+0xb2>
10067424:	2684      	movs	r6, #132	@ 0x84
10067426:	4630      	mov	r0, r6
10067428:	b005      	add	sp, #20
1006742a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006742c:	7c60      	ldrb	r0, [r4, #17]
1006742e:	0780      	lsls	r0, r0, #30
10067430:	d5f9      	bpl.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
10067432:	ab03      	add	r3, sp, #12
10067434:	2600      	movs	r6, #0
10067436:	809e      	strh	r6, [r3, #4]
10067438:	9603      	str	r6, [sp, #12]
1006743a:	2106      	movs	r1, #6
1006743c:	4638      	mov	r0, r7
1006743e:	460a      	mov	r2, r1
10067440:	f7ed fead 	bl	1005519e <ACL_pkt_cmp>
10067444:	2800      	cmp	r0, #0
10067446:	d045      	beq.n	100674d4 <smp_pp3_keys_distribution_receive+0x108>
10067448:	6878      	ldr	r0, [r7, #4]
1006744a:	7a40      	ldrb	r0, [r0, #9]
1006744c:	9d01      	ldr	r5, [sp, #4]
1006744e:	7028      	strb	r0, [r5, #0]
10067450:	4623      	mov	r3, r4
10067452:	335a      	adds	r3, #90	@ 0x5a
10067454:	2106      	movs	r1, #6
10067456:	4638      	mov	r0, r7
10067458:	460a      	mov	r2, r1
1006745a:	f7ed fea9 	bl	100551b0 <ACL_pkt_read>
1006745e:	7828      	ldrb	r0, [r5, #0]
10067460:	2801      	cmp	r0, #1
10067462:	d103      	bne.n	1006746c <smp_pp3_keys_distribution_receive+0xa0>
10067464:	79a8      	ldrb	r0, [r5, #6]
10067466:	0980      	lsrs	r0, r0, #6
10067468:	2803      	cmp	r0, #3
1006746a:	d345      	bcc.n	100674f8 <smp_pp3_keys_distribution_receive+0x12c>
1006746c:	7c61      	ldrb	r1, [r4, #17]
1006746e:	2020      	movs	r0, #32
10067470:	4308      	orrs	r0, r1
10067472:	7460      	strb	r0, [r4, #17]
10067474:	e02f      	b.n	100674d6 <smp_pp3_keys_distribution_receive+0x10a>
10067476:	7c60      	ldrb	r0, [r4, #17]
10067478:	0780      	lsls	r0, r0, #30
1006747a:	d5d4      	bpl.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
1006747c:	3438      	adds	r4, #56	@ 0x38
1006747e:	2105      	movs	r1, #5
10067480:	2210      	movs	r2, #16
10067482:	4638      	mov	r0, r7
10067484:	4623      	mov	r3, r4
10067486:	f7ed fe93 	bl	100551b0 <ACL_pkt_read>
1006748a:	e033      	b.n	100674f4 <smp_pp3_keys_distribution_receive+0x128>
1006748c:	7c60      	ldrb	r0, [r4, #17]
1006748e:	0740      	lsls	r0, r0, #29
10067490:	d5c9      	bpl.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
10067492:	4623      	mov	r3, r4
10067494:	3348      	adds	r3, #72	@ 0x48
10067496:	2105      	movs	r1, #5
10067498:	2210      	movs	r2, #16
1006749a:	4638      	mov	r0, r7
1006749c:	f7ed fe88 	bl	100551b0 <ACL_pkt_read>
100674a0:	7c60      	ldrb	r0, [r4, #17]
100674a2:	2140      	movs	r1, #64	@ 0x40
100674a4:	4301      	orrs	r1, r0
100674a6:	7461      	strb	r1, [r4, #17]
100674a8:	e017      	b.n	100674da <smp_pp3_keys_distribution_receive+0x10e>
100674aa:	6878      	ldr	r0, [r7, #4]
100674ac:	7a40      	ldrb	r0, [r0, #9]
100674ae:	77a0      	strb	r0, [r4, #30]
100674b0:	6878      	ldr	r0, [r7, #4]
100674b2:	7a80      	ldrb	r0, [r0, #10]
100674b4:	77e0      	strb	r0, [r4, #31]
100674b6:	4623      	mov	r3, r4
100674b8:	3320      	adds	r3, #32
100674ba:	2107      	movs	r1, #7
100674bc:	2208      	movs	r2, #8
100674be:	4638      	mov	r0, r7
100674c0:	f7ed fe76 	bl	100551b0 <ACL_pkt_read>
100674c4:	7c60      	ldrb	r0, [r4, #17]
100674c6:	2180      	movs	r1, #128	@ 0x80
100674c8:	4301      	orrs	r1, r0
100674ca:	7461      	strb	r1, [r4, #17]
100674cc:	0740      	lsls	r0, r0, #29
100674ce:	0f80      	lsrs	r0, r0, #30
100674d0:	d110      	bne.n	100674f4 <smp_pp3_keys_distribution_receive+0x128>
100674d2:	e002      	b.n	100674da <smp_pp3_keys_distribution_receive+0x10e>
100674d4:	7c60      	ldrb	r0, [r4, #17]
100674d6:	0740      	lsls	r0, r0, #29
100674d8:	d4a5      	bmi.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
100674da:	9801      	ldr	r0, [sp, #4]
100674dc:	79c0      	ldrb	r0, [r0, #7]
100674de:	07c0      	lsls	r0, r0, #31
100674e0:	d105      	bne.n	100674ee <smp_pp3_keys_distribution_receive+0x122>
100674e2:	2600      	movs	r6, #0
100674e4:	4620      	mov	r0, r4
100674e6:	4631      	mov	r1, r6
100674e8:	f7ff fe59 	bl	1006719e <smp_pp3_keys_distribution_start>
100674ec:	e79b      	b.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
100674ee:	4620      	mov	r0, r4
100674f0:	f7ff f96a 	bl	100667c8 <smp_pp3_pairing_completed_successful>
100674f4:	9e02      	ldr	r6, [sp, #8]
100674f6:	e796      	b.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>
100674f8:	2108      	movs	r1, #8
100674fa:	2200      	movs	r2, #0
100674fc:	2301      	movs	r3, #1
100674fe:	4620      	mov	r0, r4
10067500:	f7ff fa1a 	bl	10066938 <smp_pp3_pairing_failed_send>
10067504:	4606      	mov	r6, r0
10067506:	e78e      	b.n	10067426 <smp_pp3_keys_distribution_receive+0x5a>

10067508 <__arm_cp.4_0>:
10067508:	00007530 	.word	0x00007530

1006750c <smp_cmn_rejectlist_init>:
1006750c:	b580      	push	{r7, lr}
1006750e:	2003      	movs	r0, #3
10067510:	2108      	movs	r1, #8
10067512:	f7f9 fd59 	bl	10060fc8 <csmem_mem_0_assign>
10067516:	4902      	ldr	r1, [pc, #8]	@ (10067520 <__arm_cp.0_0>)
10067518:	6809      	ldr	r1, [r1, #0]
1006751a:	22a8      	movs	r2, #168	@ 0xa8
1006751c:	5088      	str	r0, [r1, r2]
1006751e:	bd80      	pop	{r7, pc}

10067520 <__arm_cp.0_0>:
10067520:	200024b4 	.word	0x200024b4

10067524 <smp_cmn_repeated_attacks_protection_start>:
10067524:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10067526:	9101      	str	r1, [sp, #4]
10067528:	2003      	movs	r0, #3
1006752a:	9002      	str	r0, [sp, #8]
1006752c:	2700      	movs	r7, #0
1006752e:	4a30      	ldr	r2, [pc, #192]	@ (100675f0 <__arm_cp.1_0>)
10067530:	463d      	mov	r5, r7
10067532:	4616      	mov	r6, r2
10067534:	6810      	ldr	r0, [r2, #0]
10067536:	24a8      	movs	r4, #168	@ 0xa8
10067538:	5900      	ldr	r0, [r0, r4]
1006753a:	19c0      	adds	r0, r0, r7
1006753c:	1c80      	adds	r0, r0, #2
1006753e:	2206      	movs	r2, #6
10067540:	9901      	ldr	r1, [sp, #4]
10067542:	f7eb faa1 	bl	10052a88 <BLEPLAT_MemCmp>
10067546:	2800      	cmp	r0, #0
10067548:	d031      	beq.n	100675ae <smp_cmn_repeated_attacks_protection_start+0x8a>
1006754a:	9802      	ldr	r0, [sp, #8]
1006754c:	2803      	cmp	r0, #3
1006754e:	4632      	mov	r2, r6
10067550:	d109      	bne.n	10067566 <smp_cmn_repeated_attacks_protection_start+0x42>
10067552:	6810      	ldr	r0, [r2, #0]
10067554:	5900      	ldr	r0, [r0, r4]
10067556:	5dc0      	ldrb	r0, [r0, r7]
10067558:	0680      	lsls	r0, r0, #26
1006755a:	0f80      	lsrs	r0, r0, #30
1006755c:	d001      	beq.n	10067562 <smp_cmn_repeated_attacks_protection_start+0x3e>
1006755e:	2003      	movs	r0, #3
10067560:	e000      	b.n	10067564 <smp_cmn_repeated_attacks_protection_start+0x40>
10067562:	b2e8      	uxtb	r0, r5
10067564:	9002      	str	r0, [sp, #8]
10067566:	3708      	adds	r7, #8
10067568:	1c6d      	adds	r5, r5, #1
1006756a:	2d03      	cmp	r5, #3
1006756c:	d1e1      	bne.n	10067532 <smp_cmn_repeated_attacks_protection_start+0xe>
1006756e:	6810      	ldr	r0, [r2, #0]
10067570:	2541      	movs	r5, #65	@ 0x41
10067572:	5d41      	ldrb	r1, [r0, r5]
10067574:	30a8      	adds	r0, #168	@ 0xa8
10067576:	2902      	cmp	r1, #2
10067578:	d836      	bhi.n	100675e8 <smp_cmn_repeated_attacks_protection_start+0xc4>
1006757a:	9902      	ldr	r1, [sp, #8]
1006757c:	00cf      	lsls	r7, r1, #3
1006757e:	6800      	ldr	r0, [r0, #0]
10067580:	19c0      	adds	r0, r0, r7
10067582:	1c80      	adds	r0, r0, #2
10067584:	4616      	mov	r6, r2
10067586:	2206      	movs	r2, #6
10067588:	9901      	ldr	r1, [sp, #4]
1006758a:	f7eb fa5d 	bl	10052a48 <BLEPLAT_MemCpy>
1006758e:	6830      	ldr	r0, [r6, #0]
10067590:	5900      	ldr	r0, [r0, r4]
10067592:	2110      	movs	r1, #16
10067594:	55c1      	strb	r1, [r0, r7]
10067596:	9802      	ldr	r0, [sp, #8]
10067598:	b2c2      	uxtb	r2, r0
1006759a:	2000      	movs	r0, #0
1006759c:	2101      	movs	r1, #1
1006759e:	4b15      	ldr	r3, [pc, #84]	@ (100675f4 <__arm_cp.1_1>)
100675a0:	f7fa fd84 	bl	100620ac <smp_timer_reset>
100675a4:	6830      	ldr	r0, [r6, #0]
100675a6:	5d41      	ldrb	r1, [r0, r5]
100675a8:	1c49      	adds	r1, r1, #1
100675aa:	5541      	strb	r1, [r0, r5]
100675ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100675ae:	6830      	ldr	r0, [r6, #0]
100675b0:	5900      	ldr	r0, [r0, r4]
100675b2:	5dc3      	ldrb	r3, [r0, r7]
100675b4:	21cf      	movs	r1, #207	@ 0xcf
100675b6:	4019      	ands	r1, r3
100675b8:	3110      	adds	r1, #16
100675ba:	2203      	movs	r2, #3
100675bc:	401a      	ands	r2, r3
100675be:	1c53      	adds	r3, r2, #1
100675c0:	2a03      	cmp	r2, #3
100675c2:	d002      	beq.n	100675ca <smp_cmn_repeated_attacks_protection_start+0xa6>
100675c4:	24dc      	movs	r4, #220	@ 0xdc
100675c6:	4021      	ands	r1, r4
100675c8:	4319      	orrs	r1, r3
100675ca:	55c1      	strb	r1, [r0, r7]
100675cc:	2a03      	cmp	r2, #3
100675ce:	d100      	bne.n	100675d2 <smp_cmn_repeated_attacks_protection_start+0xae>
100675d0:	4613      	mov	r3, r2
100675d2:	a009      	add	r0, pc, #36	@ (adr r0, 100675f8 <__arm_cp.1_1+0x4>)
100675d4:	5cc0      	ldrb	r0, [r0, r3]
100675d6:	217d      	movs	r1, #125	@ 0x7d
100675d8:	00cb      	lsls	r3, r1, #3
100675da:	4343      	muls	r3, r0
100675dc:	b2ea      	uxtb	r2, r5
100675de:	2000      	movs	r0, #0
100675e0:	2101      	movs	r1, #1
100675e2:	f7fa fd63 	bl	100620ac <smp_timer_reset>
100675e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100675e8:	2101      	movs	r1, #1
100675ea:	7201      	strb	r1, [r0, #8]
100675ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100675ee:	46c0      	nop			@ (mov r8, r8)

100675f0 <__arm_cp.1_0>:
100675f0:	200024b4 	.word	0x200024b4

100675f4 <__arm_cp.1_1>:
100675f4:	00000bb8 	.word	0x00000bb8
100675f8:	140a0503 	.word	0x140a0503

100675fc <smp_cmn_repeated_attacks_timer_cb>:
100675fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100675fe:	4e29      	ldr	r6, [pc, #164]	@ (100676a4 <__arm_cp.2_0>)
10067600:	6831      	ldr	r1, [r6, #0]
10067602:	25a8      	movs	r5, #168	@ 0xa8
10067604:	5949      	ldr	r1, [r1, r5]
10067606:	00c4      	lsls	r4, r0, #3
10067608:	5d0a      	ldrb	r2, [r1, r4]
1006760a:	06d3      	lsls	r3, r2, #27
1006760c:	d40e      	bmi.n	1006762c <smp_cmn_repeated_attacks_timer_cb+0x30>
1006760e:	0693      	lsls	r3, r2, #26
10067610:	d546      	bpl.n	100676a0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067612:	1909      	adds	r1, r1, r4
10067614:	0793      	lsls	r3, r2, #30
10067616:	d035      	beq.n	10067684 <smp_cmn_repeated_attacks_timer_cb+0x88>
10067618:	23fc      	movs	r3, #252	@ 0xfc
1006761a:	4013      	ands	r3, r2
1006761c:	1e52      	subs	r2, r2, #1
1006761e:	2403      	movs	r4, #3
10067620:	4014      	ands	r4, r2
10067622:	18e2      	adds	r2, r4, r3
10067624:	700a      	strb	r2, [r1, #0]
10067626:	f000 f841 	bl	100676ac <smp_cmn_rejectlist_start_probation_timer2>
1006762a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006762c:	f000 f83e 	bl	100676ac <smp_cmn_rejectlist_start_probation_timer2>
10067630:	6830      	ldr	r0, [r6, #0]
10067632:	5940      	ldr	r0, [r0, r5]
10067634:	1900      	adds	r0, r0, r4
10067636:	1c84      	adds	r4, r0, #2
10067638:	2065      	movs	r0, #101	@ 0x65
1006763a:	43c6      	mvns	r6, r0
1006763c:	4637      	mov	r7, r6
1006763e:	3765      	adds	r7, #101	@ 0x65
10067640:	4819      	ldr	r0, [pc, #100]	@ (100676a8 <__arm_cp.2_1>)
10067642:	6800      	ldr	r0, [r0, #0]
10067644:	2134      	movs	r1, #52	@ 0x34
10067646:	5c40      	ldrb	r0, [r0, r1]
10067648:	1c7f      	adds	r7, r7, #1
1006764a:	4287      	cmp	r7, r0
1006764c:	d228      	bcs.n	100676a0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
1006764e:	4815      	ldr	r0, [pc, #84]	@ (100676a4 <__arm_cp.2_0>)
10067650:	6800      	ldr	r0, [r0, #0]
10067652:	25a4      	movs	r5, #164	@ 0xa4
10067654:	5940      	ldr	r0, [r0, r5]
10067656:	1980      	adds	r0, r0, r6
10067658:	3670      	adds	r6, #112	@ 0x70
1006765a:	3068      	adds	r0, #104	@ 0x68
1006765c:	2206      	movs	r2, #6
1006765e:	4621      	mov	r1, r4
10067660:	f7eb fa12 	bl	10052a88 <BLEPLAT_MemCmp>
10067664:	2800      	cmp	r0, #0
10067666:	d1eb      	bne.n	10067640 <smp_cmn_repeated_attacks_timer_cb+0x44>
10067668:	480e      	ldr	r0, [pc, #56]	@ (100676a4 <__arm_cp.2_0>)
1006766a:	6800      	ldr	r0, [r0, #0]
1006766c:	5940      	ldr	r0, [r0, r5]
1006766e:	5d81      	ldrb	r1, [r0, r6]
10067670:	29fb      	cmp	r1, #251	@ 0xfb
10067672:	d115      	bne.n	100676a0 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067674:	2110      	movs	r1, #16
10067676:	5581      	strb	r1, [r0, r6]
10067678:	200e      	movs	r0, #14
1006767a:	f7fb fa7b 	bl	10062b74 <tsk_notify_idx>
1006767e:	f7ea fbfc 	bl	10051e7a <BLE_STACK_ProcessRequest>
10067682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067684:	4635      	mov	r5, r6
10067686:	2400      	movs	r4, #0
10067688:	2208      	movs	r2, #8
1006768a:	4608      	mov	r0, r1
1006768c:	4621      	mov	r1, r4
1006768e:	f7eb f9eb 	bl	10052a68 <BLEPLAT_MemSet>
10067692:	6830      	ldr	r0, [r6, #0]
10067694:	21b0      	movs	r1, #176	@ 0xb0
10067696:	5444      	strb	r4, [r0, r1]
10067698:	2141      	movs	r1, #65	@ 0x41
1006769a:	5c42      	ldrb	r2, [r0, r1]
1006769c:	1e52      	subs	r2, r2, #1
1006769e:	5442      	strb	r2, [r0, r1]
100676a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100676a2:	46c0      	nop			@ (mov r8, r8)

100676a4 <__arm_cp.2_0>:
100676a4:	200024b4 	.word	0x200024b4

100676a8 <__arm_cp.2_1>:
100676a8:	20002414 	.word	0x20002414

100676ac <smp_cmn_rejectlist_start_probation_timer2>:
100676ac:	b510      	push	{r4, lr}
100676ae:	4604      	mov	r4, r0
100676b0:	2000      	movs	r0, #0
100676b2:	2101      	movs	r1, #1
100676b4:	4b07      	ldr	r3, [pc, #28]	@ (100676d4 <__arm_cp.3_0>)
100676b6:	4622      	mov	r2, r4
100676b8:	f7fa fcf8 	bl	100620ac <smp_timer_reset>
100676bc:	4806      	ldr	r0, [pc, #24]	@ (100676d8 <__arm_cp.3_1>)
100676be:	6800      	ldr	r0, [r0, #0]
100676c0:	21a8      	movs	r1, #168	@ 0xa8
100676c2:	5840      	ldr	r0, [r0, r1]
100676c4:	00e1      	lsls	r1, r4, #3
100676c6:	5c42      	ldrb	r2, [r0, r1]
100676c8:	23cf      	movs	r3, #207	@ 0xcf
100676ca:	4013      	ands	r3, r2
100676cc:	3320      	adds	r3, #32
100676ce:	5443      	strb	r3, [r0, r1]
100676d0:	bd10      	pop	{r4, pc}
100676d2:	46c0      	nop			@ (mov r8, r8)

100676d4 <__arm_cp.3_0>:
100676d4:	00004e20 	.word	0x00004e20

100676d8 <__arm_cp.3_1>:
100676d8:	200024b4 	.word	0x200024b4

100676dc <smp_cmn_is_peer_rejectlisted>:
100676dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100676de:	460c      	mov	r4, r1
100676e0:	2007      	movs	r0, #7
100676e2:	43c0      	mvns	r0, r0
100676e4:	4e0c      	ldr	r6, [pc, #48]	@ (10067718 <__arm_cp.4_0>)
100676e6:	4605      	mov	r5, r0
100676e8:	3508      	adds	r5, #8
100676ea:	2d18      	cmp	r5, #24
100676ec:	d010      	beq.n	10067710 <smp_cmn_is_peer_rejectlisted+0x34>
100676ee:	6831      	ldr	r1, [r6, #0]
100676f0:	27a8      	movs	r7, #168	@ 0xa8
100676f2:	59c9      	ldr	r1, [r1, r7]
100676f4:	1808      	adds	r0, r1, r0
100676f6:	300a      	adds	r0, #10
100676f8:	2206      	movs	r2, #6
100676fa:	4621      	mov	r1, r4
100676fc:	f7eb f9c4 	bl	10052a88 <BLEPLAT_MemCmp>
10067700:	2800      	cmp	r0, #0
10067702:	4628      	mov	r0, r5
10067704:	d1f0      	bne.n	100676e8 <smp_cmn_is_peer_rejectlisted+0xc>
10067706:	6830      	ldr	r0, [r6, #0]
10067708:	59c0      	ldr	r0, [r0, r7]
1006770a:	5d40      	ldrb	r0, [r0, r5]
1006770c:	06c0      	lsls	r0, r0, #27
1006770e:	d401      	bmi.n	10067714 <smp_cmn_is_peer_rejectlisted+0x38>
10067710:	2000      	movs	r0, #0
10067712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067714:	2001      	movs	r0, #1
10067716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10067718 <__arm_cp.4_0>:
10067718:	200024b4 	.word	0x200024b4

1006771c <smp_get_remote_device_list_index>:
1006771c:	b5b0      	push	{r4, r5, r7, lr}
1006771e:	490d      	ldr	r1, [pc, #52]	@ (10067754 <__arm_cp.0_0>)
10067720:	6809      	ldr	r1, [r1, #0]
10067722:	2234      	movs	r2, #52	@ 0x34
10067724:	5c89      	ldrb	r1, [r1, r2]
10067726:	2800      	cmp	r0, #0
10067728:	d011      	beq.n	1006774e <smp_get_remote_device_list_index+0x32>
1006772a:	4a0b      	ldr	r2, [pc, #44]	@ (10067758 <__arm_cp.0_1>)
1006772c:	6812      	ldr	r2, [r2, #0]
1006772e:	32a4      	adds	r2, #164	@ 0xa4
10067730:	2300      	movs	r3, #0
10067732:	b2dc      	uxtb	r4, r3
10067734:	428c      	cmp	r4, r1
10067736:	d20a      	bcs.n	1006774e <smp_get_remote_device_list_index+0x32>
10067738:	2570      	movs	r5, #112	@ 0x70
1006773a:	4365      	muls	r5, r4
1006773c:	6814      	ldr	r4, [r2, #0]
1006773e:	1964      	adds	r4, r4, r5
10067740:	8924      	ldrh	r4, [r4, #8]
10067742:	4044      	eors	r4, r0
10067744:	0524      	lsls	r4, r4, #20
10067746:	d001      	beq.n	1006774c <smp_get_remote_device_list_index+0x30>
10067748:	1c5b      	adds	r3, r3, #1
1006774a:	e7f2      	b.n	10067732 <smp_get_remote_device_list_index+0x16>
1006774c:	4619      	mov	r1, r3
1006774e:	b2c8      	uxtb	r0, r1
10067750:	bdb0      	pop	{r4, r5, r7, pc}
10067752:	46c0      	nop			@ (mov r8, r8)

10067754 <__arm_cp.0_0>:
10067754:	20002414 	.word	0x20002414

10067758 <__arm_cp.0_1>:
10067758:	200024b4 	.word	0x200024b4

1006775c <smp_get_remote_device_list_item>:
1006775c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006775e:	4601      	mov	r1, r0
10067760:	2000      	movs	r0, #0
10067762:	2900      	cmp	r1, #0
10067764:	d017      	beq.n	10067796 <smp_get_remote_device_list_item+0x3a>
10067766:	4a0c      	ldr	r2, [pc, #48]	@ (10067798 <__arm_cp.1_0>)
10067768:	6812      	ldr	r2, [r2, #0]
1006776a:	2334      	movs	r3, #52	@ 0x34
1006776c:	5cd3      	ldrb	r3, [r2, r3]
1006776e:	2270      	movs	r2, #112	@ 0x70
10067770:	435a      	muls	r2, r3
10067772:	236f      	movs	r3, #111	@ 0x6f
10067774:	43dd      	mvns	r5, r3
10067776:	4b09      	ldr	r3, [pc, #36]	@ (1006779c <__arm_cp.1_1>)
10067778:	681b      	ldr	r3, [r3, #0]
1006777a:	33a4      	adds	r3, #164	@ 0xa4
1006777c:	462c      	mov	r4, r5
1006777e:	3470      	adds	r4, #112	@ 0x70
10067780:	42a2      	cmp	r2, r4
10067782:	d008      	beq.n	10067796 <smp_get_remote_device_list_item+0x3a>
10067784:	681e      	ldr	r6, [r3, #0]
10067786:	1975      	adds	r5, r6, r5
10067788:	2778      	movs	r7, #120	@ 0x78
1006778a:	5bed      	ldrh	r5, [r5, r7]
1006778c:	404d      	eors	r5, r1
1006778e:	052d      	lsls	r5, r5, #20
10067790:	4625      	mov	r5, r4
10067792:	d1f4      	bne.n	1006777e <smp_get_remote_device_list_item+0x22>
10067794:	1930      	adds	r0, r6, r4
10067796:	bdf0      	pop	{r4, r5, r6, r7, pc}

10067798 <__arm_cp.1_0>:
10067798:	20002414 	.word	0x20002414

1006779c <__arm_cp.1_1>:
1006779c:	200024b4 	.word	0x200024b4

100677a0 <smp_oob_check_is_remote_data_present>:
100677a0:	b5b0      	push	{r4, r5, r7, lr}
100677a2:	4604      	mov	r4, r0
100677a4:	480b      	ldr	r0, [pc, #44]	@ (100677d4 <__arm_cp.2_0>)
100677a6:	6800      	ldr	r0, [r0, #0]
100677a8:	21ac      	movs	r1, #172	@ 0xac
100677aa:	5840      	ldr	r0, [r0, r1]
100677ac:	7845      	ldrb	r5, [r0, #1]
100677ae:	1c80      	adds	r0, r0, #2
100677b0:	1ca1      	adds	r1, r4, #2
100677b2:	2206      	movs	r2, #6
100677b4:	f7eb f968 	bl	10052a88 <BLEPLAT_MemCmp>
100677b8:	4601      	mov	r1, r0
100677ba:	2000      	movs	r0, #0
100677bc:	2900      	cmp	r1, #0
100677be:	d000      	beq.n	100677c2 <smp_oob_check_is_remote_data_present+0x22>
100677c0:	bdb0      	pop	{r4, r5, r7, pc}
100677c2:	7861      	ldrb	r1, [r4, #1]
100677c4:	428d      	cmp	r5, r1
100677c6:	d1fb      	bne.n	100677c0 <smp_oob_check_is_remote_data_present+0x20>
100677c8:	7b61      	ldrb	r1, [r4, #13]
100677ca:	2001      	movs	r0, #1
100677cc:	4301      	orrs	r1, r0
100677ce:	7361      	strb	r1, [r4, #13]
100677d0:	bdb0      	pop	{r4, r5, r7, pc}
100677d2:	46c0      	nop			@ (mov r8, r8)

100677d4 <__arm_cp.2_0>:
100677d4:	200024b4 	.word	0x200024b4

100677d8 <smp_oob_clear_remote_data_entry>:
100677d8:	b580      	push	{r7, lr}
100677da:	2228      	movs	r2, #40	@ 0x28
100677dc:	4350      	muls	r0, r2
100677de:	4904      	ldr	r1, [pc, #16]	@ (100677f0 <__arm_cp.4_0>)
100677e0:	6809      	ldr	r1, [r1, #0]
100677e2:	23ac      	movs	r3, #172	@ 0xac
100677e4:	58c9      	ldr	r1, [r1, r3]
100677e6:	1808      	adds	r0, r1, r0
100677e8:	2100      	movs	r1, #0
100677ea:	f7eb f93d 	bl	10052a68 <BLEPLAT_MemSet>
100677ee:	bd80      	pop	{r7, pc}

100677f0 <__arm_cp.4_0>:
100677f0:	200024b4 	.word	0x200024b4

100677f4 <smp_scp_is_another_sc_pairing_ongoing>:
100677f4:	b570      	push	{r4, r5, r6, lr}
100677f6:	490d      	ldr	r1, [pc, #52]	@ (1006782c <__arm_cp.1_0>)
100677f8:	6809      	ldr	r1, [r1, #0]
100677fa:	2234      	movs	r2, #52	@ 0x34
100677fc:	5c89      	ldrb	r1, [r1, r2]
100677fe:	2270      	movs	r2, #112	@ 0x70
10067800:	434a      	muls	r2, r1
10067802:	490b      	ldr	r1, [pc, #44]	@ (10067830 <__arm_cp.1_1>)
10067804:	680b      	ldr	r3, [r1, #0]
10067806:	33a4      	adds	r3, #164	@ 0xa4
10067808:	2100      	movs	r1, #0
1006780a:	460c      	mov	r4, r1
1006780c:	42a2      	cmp	r2, r4
1006780e:	d00a      	beq.n	10067826 <smp_scp_is_another_sc_pairing_ongoing+0x32>
10067810:	681d      	ldr	r5, [r3, #0]
10067812:	192d      	adds	r5, r5, r4
10067814:	7dee      	ldrb	r6, [r5, #23]
10067816:	07f6      	lsls	r6, r6, #31
10067818:	d002      	beq.n	10067820 <smp_scp_is_another_sc_pairing_ongoing+0x2c>
1006781a:	892d      	ldrh	r5, [r5, #8]
1006781c:	4285      	cmp	r5, r0
1006781e:	d101      	bne.n	10067824 <smp_scp_is_another_sc_pairing_ongoing+0x30>
10067820:	3470      	adds	r4, #112	@ 0x70
10067822:	e7f3      	b.n	1006780c <smp_scp_is_another_sc_pairing_ongoing+0x18>
10067824:	2101      	movs	r1, #1
10067826:	4608      	mov	r0, r1
10067828:	bd70      	pop	{r4, r5, r6, pc}
1006782a:	46c0      	nop			@ (mov r8, r8)

1006782c <__arm_cp.1_0>:
1006782c:	20002414 	.word	0x20002414

10067830 <__arm_cp.1_1>:
10067830:	200024b4 	.word	0x200024b4

10067834 <smp_scp_init_ucfg_weak>:
10067834:	4770      	bx	lr

10067836 <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>:
10067836:	201f      	movs	r0, #31
10067838:	4770      	bx	lr

1006783a <smp_scp_public_key_prepare_and_exchange_ucfg_weak>:
1006783a:	201f      	movs	r0, #31
1006783c:	4770      	bx	lr

1006783e <smp_scp_stats_update_on_pairing_complete_ucfg_weak>:
1006783e:	4770      	bx	lr

10067840 <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
10067840:	4770      	bx	lr
	...

10067844 <malloc>:
10067844:	b510      	push	{r4, lr}
10067846:	4b03      	ldr	r3, [pc, #12]	@ (10067854 <malloc+0x10>)
10067848:	0001      	movs	r1, r0
1006784a:	6818      	ldr	r0, [r3, #0]
1006784c:	f000 f830 	bl	100678b0 <_malloc_r>
10067850:	bd10      	pop	{r4, pc}
10067852:	46c0      	nop			@ (mov r8, r8)
10067854:	200028b8 	.word	0x200028b8

10067858 <free>:
10067858:	b510      	push	{r4, lr}
1006785a:	4b03      	ldr	r3, [pc, #12]	@ (10067868 <free+0x10>)
1006785c:	0001      	movs	r1, r0
1006785e:	6818      	ldr	r0, [r3, #0]
10067860:	f000 fb74 	bl	10067f4c <_free_r>
10067864:	bd10      	pop	{r4, pc}
10067866:	46c0      	nop			@ (mov r8, r8)
10067868:	200028b8 	.word	0x200028b8

1006786c <sbrk_aligned>:
1006786c:	b570      	push	{r4, r5, r6, lr}
1006786e:	4e0f      	ldr	r6, [pc, #60]	@ (100678ac <sbrk_aligned+0x40>)
10067870:	000d      	movs	r5, r1
10067872:	6831      	ldr	r1, [r6, #0]
10067874:	0004      	movs	r4, r0
10067876:	2900      	cmp	r1, #0
10067878:	d102      	bne.n	10067880 <sbrk_aligned+0x14>
1006787a:	f000 fb2b 	bl	10067ed4 <_sbrk_r>
1006787e:	6030      	str	r0, [r6, #0]
10067880:	0029      	movs	r1, r5
10067882:	0020      	movs	r0, r4
10067884:	f000 fb26 	bl	10067ed4 <_sbrk_r>
10067888:	1c43      	adds	r3, r0, #1
1006788a:	d103      	bne.n	10067894 <sbrk_aligned+0x28>
1006788c:	2501      	movs	r5, #1
1006788e:	426d      	negs	r5, r5
10067890:	0028      	movs	r0, r5
10067892:	bd70      	pop	{r4, r5, r6, pc}
10067894:	2303      	movs	r3, #3
10067896:	1cc5      	adds	r5, r0, #3
10067898:	439d      	bics	r5, r3
1006789a:	42a8      	cmp	r0, r5
1006789c:	d0f8      	beq.n	10067890 <sbrk_aligned+0x24>
1006789e:	1a29      	subs	r1, r5, r0
100678a0:	0020      	movs	r0, r4
100678a2:	f000 fb17 	bl	10067ed4 <_sbrk_r>
100678a6:	3001      	adds	r0, #1
100678a8:	d1f2      	bne.n	10067890 <sbrk_aligned+0x24>
100678aa:	e7ef      	b.n	1006788c <sbrk_aligned+0x20>
100678ac:	200024c0 	.word	0x200024c0

100678b0 <_malloc_r>:
100678b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100678b2:	2203      	movs	r2, #3
100678b4:	1ccb      	adds	r3, r1, #3
100678b6:	4393      	bics	r3, r2
100678b8:	3308      	adds	r3, #8
100678ba:	0005      	movs	r5, r0
100678bc:	001f      	movs	r7, r3
100678be:	2b0c      	cmp	r3, #12
100678c0:	d234      	bcs.n	1006792c <_malloc_r+0x7c>
100678c2:	270c      	movs	r7, #12
100678c4:	42b9      	cmp	r1, r7
100678c6:	d833      	bhi.n	10067930 <_malloc_r+0x80>
100678c8:	0028      	movs	r0, r5
100678ca:	f000 f871 	bl	100679b0 <__malloc_lock>
100678ce:	4e37      	ldr	r6, [pc, #220]	@ (100679ac <_malloc_r+0xfc>)
100678d0:	6833      	ldr	r3, [r6, #0]
100678d2:	001c      	movs	r4, r3
100678d4:	2c00      	cmp	r4, #0
100678d6:	d12f      	bne.n	10067938 <_malloc_r+0x88>
100678d8:	0039      	movs	r1, r7
100678da:	0028      	movs	r0, r5
100678dc:	f7ff ffc6 	bl	1006786c <sbrk_aligned>
100678e0:	0004      	movs	r4, r0
100678e2:	1c43      	adds	r3, r0, #1
100678e4:	d15f      	bne.n	100679a6 <_malloc_r+0xf6>
100678e6:	6834      	ldr	r4, [r6, #0]
100678e8:	9400      	str	r4, [sp, #0]
100678ea:	9b00      	ldr	r3, [sp, #0]
100678ec:	2b00      	cmp	r3, #0
100678ee:	d14a      	bne.n	10067986 <_malloc_r+0xd6>
100678f0:	2c00      	cmp	r4, #0
100678f2:	d052      	beq.n	1006799a <_malloc_r+0xea>
100678f4:	6823      	ldr	r3, [r4, #0]
100678f6:	0028      	movs	r0, r5
100678f8:	18e3      	adds	r3, r4, r3
100678fa:	9900      	ldr	r1, [sp, #0]
100678fc:	9301      	str	r3, [sp, #4]
100678fe:	f000 fae9 	bl	10067ed4 <_sbrk_r>
10067902:	9b01      	ldr	r3, [sp, #4]
10067904:	4283      	cmp	r3, r0
10067906:	d148      	bne.n	1006799a <_malloc_r+0xea>
10067908:	6823      	ldr	r3, [r4, #0]
1006790a:	0028      	movs	r0, r5
1006790c:	1aff      	subs	r7, r7, r3
1006790e:	0039      	movs	r1, r7
10067910:	f7ff ffac 	bl	1006786c <sbrk_aligned>
10067914:	3001      	adds	r0, #1
10067916:	d040      	beq.n	1006799a <_malloc_r+0xea>
10067918:	6823      	ldr	r3, [r4, #0]
1006791a:	19db      	adds	r3, r3, r7
1006791c:	6023      	str	r3, [r4, #0]
1006791e:	6833      	ldr	r3, [r6, #0]
10067920:	685a      	ldr	r2, [r3, #4]
10067922:	2a00      	cmp	r2, #0
10067924:	d133      	bne.n	1006798e <_malloc_r+0xde>
10067926:	9b00      	ldr	r3, [sp, #0]
10067928:	6033      	str	r3, [r6, #0]
1006792a:	e019      	b.n	10067960 <_malloc_r+0xb0>
1006792c:	2b00      	cmp	r3, #0
1006792e:	dac9      	bge.n	100678c4 <_malloc_r+0x14>
10067930:	230c      	movs	r3, #12
10067932:	602b      	str	r3, [r5, #0]
10067934:	2000      	movs	r0, #0
10067936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067938:	6821      	ldr	r1, [r4, #0]
1006793a:	1bc9      	subs	r1, r1, r7
1006793c:	d420      	bmi.n	10067980 <_malloc_r+0xd0>
1006793e:	290b      	cmp	r1, #11
10067940:	d90a      	bls.n	10067958 <_malloc_r+0xa8>
10067942:	19e2      	adds	r2, r4, r7
10067944:	6027      	str	r7, [r4, #0]
10067946:	42a3      	cmp	r3, r4
10067948:	d104      	bne.n	10067954 <_malloc_r+0xa4>
1006794a:	6032      	str	r2, [r6, #0]
1006794c:	6863      	ldr	r3, [r4, #4]
1006794e:	6011      	str	r1, [r2, #0]
10067950:	6053      	str	r3, [r2, #4]
10067952:	e005      	b.n	10067960 <_malloc_r+0xb0>
10067954:	605a      	str	r2, [r3, #4]
10067956:	e7f9      	b.n	1006794c <_malloc_r+0x9c>
10067958:	6862      	ldr	r2, [r4, #4]
1006795a:	42a3      	cmp	r3, r4
1006795c:	d10e      	bne.n	1006797c <_malloc_r+0xcc>
1006795e:	6032      	str	r2, [r6, #0]
10067960:	0028      	movs	r0, r5
10067962:	f000 f82d 	bl	100679c0 <__malloc_unlock>
10067966:	0020      	movs	r0, r4
10067968:	2207      	movs	r2, #7
1006796a:	300b      	adds	r0, #11
1006796c:	1d23      	adds	r3, r4, #4
1006796e:	4390      	bics	r0, r2
10067970:	1ac2      	subs	r2, r0, r3
10067972:	4298      	cmp	r0, r3
10067974:	d0df      	beq.n	10067936 <_malloc_r+0x86>
10067976:	1a1b      	subs	r3, r3, r0
10067978:	50a3      	str	r3, [r4, r2]
1006797a:	e7dc      	b.n	10067936 <_malloc_r+0x86>
1006797c:	605a      	str	r2, [r3, #4]
1006797e:	e7ef      	b.n	10067960 <_malloc_r+0xb0>
10067980:	0023      	movs	r3, r4
10067982:	6864      	ldr	r4, [r4, #4]
10067984:	e7a6      	b.n	100678d4 <_malloc_r+0x24>
10067986:	9c00      	ldr	r4, [sp, #0]
10067988:	6863      	ldr	r3, [r4, #4]
1006798a:	9300      	str	r3, [sp, #0]
1006798c:	e7ad      	b.n	100678ea <_malloc_r+0x3a>
1006798e:	001a      	movs	r2, r3
10067990:	685b      	ldr	r3, [r3, #4]
10067992:	42a3      	cmp	r3, r4
10067994:	d1fb      	bne.n	1006798e <_malloc_r+0xde>
10067996:	2300      	movs	r3, #0
10067998:	e7da      	b.n	10067950 <_malloc_r+0xa0>
1006799a:	230c      	movs	r3, #12
1006799c:	0028      	movs	r0, r5
1006799e:	602b      	str	r3, [r5, #0]
100679a0:	f000 f80e 	bl	100679c0 <__malloc_unlock>
100679a4:	e7c6      	b.n	10067934 <_malloc_r+0x84>
100679a6:	6007      	str	r7, [r0, #0]
100679a8:	e7da      	b.n	10067960 <_malloc_r+0xb0>
100679aa:	46c0      	nop			@ (mov r8, r8)
100679ac:	200024c4 	.word	0x200024c4

100679b0 <__malloc_lock>:
100679b0:	b510      	push	{r4, lr}
100679b2:	4802      	ldr	r0, [pc, #8]	@ (100679bc <__malloc_lock+0xc>)
100679b4:	f000 fabb 	bl	10067f2e <__retarget_lock_acquire_recursive>
100679b8:	bd10      	pop	{r4, pc}
100679ba:	46c0      	nop			@ (mov r8, r8)
100679bc:	20002608 	.word	0x20002608

100679c0 <__malloc_unlock>:
100679c0:	b510      	push	{r4, lr}
100679c2:	4802      	ldr	r0, [pc, #8]	@ (100679cc <__malloc_unlock+0xc>)
100679c4:	f000 fab4 	bl	10067f30 <__retarget_lock_release_recursive>
100679c8:	bd10      	pop	{r4, pc}
100679ca:	46c0      	nop			@ (mov r8, r8)
100679cc:	20002608 	.word	0x20002608

100679d0 <std>:
100679d0:	2300      	movs	r3, #0
100679d2:	b510      	push	{r4, lr}
100679d4:	0004      	movs	r4, r0
100679d6:	6003      	str	r3, [r0, #0]
100679d8:	6043      	str	r3, [r0, #4]
100679da:	6083      	str	r3, [r0, #8]
100679dc:	8181      	strh	r1, [r0, #12]
100679de:	6643      	str	r3, [r0, #100]	@ 0x64
100679e0:	81c2      	strh	r2, [r0, #14]
100679e2:	6103      	str	r3, [r0, #16]
100679e4:	6143      	str	r3, [r0, #20]
100679e6:	6183      	str	r3, [r0, #24]
100679e8:	0019      	movs	r1, r3
100679ea:	2208      	movs	r2, #8
100679ec:	305c      	adds	r0, #92	@ 0x5c
100679ee:	f000 fa2f 	bl	10067e50 <memset>
100679f2:	4b0b      	ldr	r3, [pc, #44]	@ (10067a20 <std+0x50>)
100679f4:	6224      	str	r4, [r4, #32]
100679f6:	6263      	str	r3, [r4, #36]	@ 0x24
100679f8:	4b0a      	ldr	r3, [pc, #40]	@ (10067a24 <std+0x54>)
100679fa:	62a3      	str	r3, [r4, #40]	@ 0x28
100679fc:	4b0a      	ldr	r3, [pc, #40]	@ (10067a28 <std+0x58>)
100679fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
10067a00:	4b0a      	ldr	r3, [pc, #40]	@ (10067a2c <std+0x5c>)
10067a02:	6323      	str	r3, [r4, #48]	@ 0x30
10067a04:	4b0a      	ldr	r3, [pc, #40]	@ (10067a30 <std+0x60>)
10067a06:	429c      	cmp	r4, r3
10067a08:	d005      	beq.n	10067a16 <std+0x46>
10067a0a:	4b0a      	ldr	r3, [pc, #40]	@ (10067a34 <std+0x64>)
10067a0c:	429c      	cmp	r4, r3
10067a0e:	d002      	beq.n	10067a16 <std+0x46>
10067a10:	4b09      	ldr	r3, [pc, #36]	@ (10067a38 <std+0x68>)
10067a12:	429c      	cmp	r4, r3
10067a14:	d103      	bne.n	10067a1e <std+0x4e>
10067a16:	0020      	movs	r0, r4
10067a18:	3058      	adds	r0, #88	@ 0x58
10067a1a:	f000 fa87 	bl	10067f2c <__retarget_lock_init_recursive>
10067a1e:	bd10      	pop	{r4, pc}
10067a20:	10067c5d 	.word	0x10067c5d
10067a24:	10067c85 	.word	0x10067c85
10067a28:	10067cbd 	.word	0x10067cbd
10067a2c:	10067ce9 	.word	0x10067ce9
10067a30:	200024c8 	.word	0x200024c8
10067a34:	20002530 	.word	0x20002530
10067a38:	20002598 	.word	0x20002598

10067a3c <stdio_exit_handler>:
10067a3c:	b510      	push	{r4, lr}
10067a3e:	4a03      	ldr	r2, [pc, #12]	@ (10067a4c <stdio_exit_handler+0x10>)
10067a40:	4903      	ldr	r1, [pc, #12]	@ (10067a50 <stdio_exit_handler+0x14>)
10067a42:	4804      	ldr	r0, [pc, #16]	@ (10067a54 <stdio_exit_handler+0x18>)
10067a44:	f000 f86c 	bl	10067b20 <_fwalk_sglue>
10067a48:	bd10      	pop	{r4, pc}
10067a4a:	46c0      	nop			@ (mov r8, r8)
10067a4c:	200028ac 	.word	0x200028ac
10067a50:	100686a1 	.word	0x100686a1
10067a54:	200028bc 	.word	0x200028bc

10067a58 <cleanup_stdio>:
10067a58:	6841      	ldr	r1, [r0, #4]
10067a5a:	4b0b      	ldr	r3, [pc, #44]	@ (10067a88 <cleanup_stdio+0x30>)
10067a5c:	b510      	push	{r4, lr}
10067a5e:	0004      	movs	r4, r0
10067a60:	4299      	cmp	r1, r3
10067a62:	d001      	beq.n	10067a68 <cleanup_stdio+0x10>
10067a64:	f000 fe1c 	bl	100686a0 <_fflush_r>
10067a68:	68a1      	ldr	r1, [r4, #8]
10067a6a:	4b08      	ldr	r3, [pc, #32]	@ (10067a8c <cleanup_stdio+0x34>)
10067a6c:	4299      	cmp	r1, r3
10067a6e:	d002      	beq.n	10067a76 <cleanup_stdio+0x1e>
10067a70:	0020      	movs	r0, r4
10067a72:	f000 fe15 	bl	100686a0 <_fflush_r>
10067a76:	68e1      	ldr	r1, [r4, #12]
10067a78:	4b05      	ldr	r3, [pc, #20]	@ (10067a90 <cleanup_stdio+0x38>)
10067a7a:	4299      	cmp	r1, r3
10067a7c:	d002      	beq.n	10067a84 <cleanup_stdio+0x2c>
10067a7e:	0020      	movs	r0, r4
10067a80:	f000 fe0e 	bl	100686a0 <_fflush_r>
10067a84:	bd10      	pop	{r4, pc}
10067a86:	46c0      	nop			@ (mov r8, r8)
10067a88:	200024c8 	.word	0x200024c8
10067a8c:	20002530 	.word	0x20002530
10067a90:	20002598 	.word	0x20002598

10067a94 <global_stdio_init.part.0>:
10067a94:	b510      	push	{r4, lr}
10067a96:	4b09      	ldr	r3, [pc, #36]	@ (10067abc <global_stdio_init.part.0+0x28>)
10067a98:	4a09      	ldr	r2, [pc, #36]	@ (10067ac0 <global_stdio_init.part.0+0x2c>)
10067a9a:	2104      	movs	r1, #4
10067a9c:	601a      	str	r2, [r3, #0]
10067a9e:	4809      	ldr	r0, [pc, #36]	@ (10067ac4 <global_stdio_init.part.0+0x30>)
10067aa0:	2200      	movs	r2, #0
10067aa2:	f7ff ff95 	bl	100679d0 <std>
10067aa6:	2201      	movs	r2, #1
10067aa8:	2109      	movs	r1, #9
10067aaa:	4807      	ldr	r0, [pc, #28]	@ (10067ac8 <global_stdio_init.part.0+0x34>)
10067aac:	f7ff ff90 	bl	100679d0 <std>
10067ab0:	2202      	movs	r2, #2
10067ab2:	2112      	movs	r1, #18
10067ab4:	4805      	ldr	r0, [pc, #20]	@ (10067acc <global_stdio_init.part.0+0x38>)
10067ab6:	f7ff ff8b 	bl	100679d0 <std>
10067aba:	bd10      	pop	{r4, pc}
10067abc:	20002600 	.word	0x20002600
10067ac0:	10067a3d 	.word	0x10067a3d
10067ac4:	200024c8 	.word	0x200024c8
10067ac8:	20002530 	.word	0x20002530
10067acc:	20002598 	.word	0x20002598

10067ad0 <__sfp_lock_acquire>:
10067ad0:	b510      	push	{r4, lr}
10067ad2:	4802      	ldr	r0, [pc, #8]	@ (10067adc <__sfp_lock_acquire+0xc>)
10067ad4:	f000 fa2b 	bl	10067f2e <__retarget_lock_acquire_recursive>
10067ad8:	bd10      	pop	{r4, pc}
10067ada:	46c0      	nop			@ (mov r8, r8)
10067adc:	20002609 	.word	0x20002609

10067ae0 <__sfp_lock_release>:
10067ae0:	b510      	push	{r4, lr}
10067ae2:	4802      	ldr	r0, [pc, #8]	@ (10067aec <__sfp_lock_release+0xc>)
10067ae4:	f000 fa24 	bl	10067f30 <__retarget_lock_release_recursive>
10067ae8:	bd10      	pop	{r4, pc}
10067aea:	46c0      	nop			@ (mov r8, r8)
10067aec:	20002609 	.word	0x20002609

10067af0 <__sinit>:
10067af0:	b510      	push	{r4, lr}
10067af2:	0004      	movs	r4, r0
10067af4:	f7ff ffec 	bl	10067ad0 <__sfp_lock_acquire>
10067af8:	6a23      	ldr	r3, [r4, #32]
10067afa:	2b00      	cmp	r3, #0
10067afc:	d002      	beq.n	10067b04 <__sinit+0x14>
10067afe:	f7ff ffef 	bl	10067ae0 <__sfp_lock_release>
10067b02:	bd10      	pop	{r4, pc}
10067b04:	4b04      	ldr	r3, [pc, #16]	@ (10067b18 <__sinit+0x28>)
10067b06:	6223      	str	r3, [r4, #32]
10067b08:	4b04      	ldr	r3, [pc, #16]	@ (10067b1c <__sinit+0x2c>)
10067b0a:	681b      	ldr	r3, [r3, #0]
10067b0c:	2b00      	cmp	r3, #0
10067b0e:	d1f6      	bne.n	10067afe <__sinit+0xe>
10067b10:	f7ff ffc0 	bl	10067a94 <global_stdio_init.part.0>
10067b14:	e7f3      	b.n	10067afe <__sinit+0xe>
10067b16:	46c0      	nop			@ (mov r8, r8)
10067b18:	10067a59 	.word	0x10067a59
10067b1c:	20002600 	.word	0x20002600

10067b20 <_fwalk_sglue>:
10067b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10067b22:	0014      	movs	r4, r2
10067b24:	2600      	movs	r6, #0
10067b26:	9000      	str	r0, [sp, #0]
10067b28:	9101      	str	r1, [sp, #4]
10067b2a:	68a5      	ldr	r5, [r4, #8]
10067b2c:	6867      	ldr	r7, [r4, #4]
10067b2e:	3f01      	subs	r7, #1
10067b30:	d504      	bpl.n	10067b3c <_fwalk_sglue+0x1c>
10067b32:	6824      	ldr	r4, [r4, #0]
10067b34:	2c00      	cmp	r4, #0
10067b36:	d1f8      	bne.n	10067b2a <_fwalk_sglue+0xa>
10067b38:	0030      	movs	r0, r6
10067b3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067b3c:	89ab      	ldrh	r3, [r5, #12]
10067b3e:	2b01      	cmp	r3, #1
10067b40:	d908      	bls.n	10067b54 <_fwalk_sglue+0x34>
10067b42:	220e      	movs	r2, #14
10067b44:	5eab      	ldrsh	r3, [r5, r2]
10067b46:	3301      	adds	r3, #1
10067b48:	d004      	beq.n	10067b54 <_fwalk_sglue+0x34>
10067b4a:	0029      	movs	r1, r5
10067b4c:	9800      	ldr	r0, [sp, #0]
10067b4e:	9b01      	ldr	r3, [sp, #4]
10067b50:	4798      	blx	r3
10067b52:	4306      	orrs	r6, r0
10067b54:	3568      	adds	r5, #104	@ 0x68
10067b56:	e7ea      	b.n	10067b2e <_fwalk_sglue+0xe>

10067b58 <_puts_r>:
10067b58:	6a03      	ldr	r3, [r0, #32]
10067b5a:	b570      	push	{r4, r5, r6, lr}
10067b5c:	0005      	movs	r5, r0
10067b5e:	000e      	movs	r6, r1
10067b60:	6884      	ldr	r4, [r0, #8]
10067b62:	2b00      	cmp	r3, #0
10067b64:	d101      	bne.n	10067b6a <_puts_r+0x12>
10067b66:	f7ff ffc3 	bl	10067af0 <__sinit>
10067b6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067b6c:	07db      	lsls	r3, r3, #31
10067b6e:	d405      	bmi.n	10067b7c <_puts_r+0x24>
10067b70:	89a3      	ldrh	r3, [r4, #12]
10067b72:	059b      	lsls	r3, r3, #22
10067b74:	d402      	bmi.n	10067b7c <_puts_r+0x24>
10067b76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10067b78:	f000 f9d9 	bl	10067f2e <__retarget_lock_acquire_recursive>
10067b7c:	89a3      	ldrh	r3, [r4, #12]
10067b7e:	071b      	lsls	r3, r3, #28
10067b80:	d502      	bpl.n	10067b88 <_puts_r+0x30>
10067b82:	6923      	ldr	r3, [r4, #16]
10067b84:	2b00      	cmp	r3, #0
10067b86:	d11f      	bne.n	10067bc8 <_puts_r+0x70>
10067b88:	0021      	movs	r1, r4
10067b8a:	0028      	movs	r0, r5
10067b8c:	f000 f8f4 	bl	10067d78 <__swsetup_r>
10067b90:	2800      	cmp	r0, #0
10067b92:	d019      	beq.n	10067bc8 <_puts_r+0x70>
10067b94:	2501      	movs	r5, #1
10067b96:	426d      	negs	r5, r5
10067b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067b9a:	07db      	lsls	r3, r3, #31
10067b9c:	d405      	bmi.n	10067baa <_puts_r+0x52>
10067b9e:	89a3      	ldrh	r3, [r4, #12]
10067ba0:	059b      	lsls	r3, r3, #22
10067ba2:	d402      	bmi.n	10067baa <_puts_r+0x52>
10067ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10067ba6:	f000 f9c3 	bl	10067f30 <__retarget_lock_release_recursive>
10067baa:	0028      	movs	r0, r5
10067bac:	bd70      	pop	{r4, r5, r6, pc}
10067bae:	3601      	adds	r6, #1
10067bb0:	60a3      	str	r3, [r4, #8]
10067bb2:	2b00      	cmp	r3, #0
10067bb4:	da04      	bge.n	10067bc0 <_puts_r+0x68>
10067bb6:	69a2      	ldr	r2, [r4, #24]
10067bb8:	429a      	cmp	r2, r3
10067bba:	dc16      	bgt.n	10067bea <_puts_r+0x92>
10067bbc:	290a      	cmp	r1, #10
10067bbe:	d014      	beq.n	10067bea <_puts_r+0x92>
10067bc0:	6823      	ldr	r3, [r4, #0]
10067bc2:	1c5a      	adds	r2, r3, #1
10067bc4:	6022      	str	r2, [r4, #0]
10067bc6:	7019      	strb	r1, [r3, #0]
10067bc8:	68a3      	ldr	r3, [r4, #8]
10067bca:	7831      	ldrb	r1, [r6, #0]
10067bcc:	3b01      	subs	r3, #1
10067bce:	2900      	cmp	r1, #0
10067bd0:	d1ed      	bne.n	10067bae <_puts_r+0x56>
10067bd2:	60a3      	str	r3, [r4, #8]
10067bd4:	2b00      	cmp	r3, #0
10067bd6:	da0f      	bge.n	10067bf8 <_puts_r+0xa0>
10067bd8:	0022      	movs	r2, r4
10067bda:	0028      	movs	r0, r5
10067bdc:	310a      	adds	r1, #10
10067bde:	f000 f889 	bl	10067cf4 <__swbuf_r>
10067be2:	3001      	adds	r0, #1
10067be4:	d0d6      	beq.n	10067b94 <_puts_r+0x3c>
10067be6:	250a      	movs	r5, #10
10067be8:	e7d6      	b.n	10067b98 <_puts_r+0x40>
10067bea:	0022      	movs	r2, r4
10067bec:	0028      	movs	r0, r5
10067bee:	f000 f881 	bl	10067cf4 <__swbuf_r>
10067bf2:	3001      	adds	r0, #1
10067bf4:	d1e8      	bne.n	10067bc8 <_puts_r+0x70>
10067bf6:	e7cd      	b.n	10067b94 <_puts_r+0x3c>
10067bf8:	6823      	ldr	r3, [r4, #0]
10067bfa:	1c5a      	adds	r2, r3, #1
10067bfc:	6022      	str	r2, [r4, #0]
10067bfe:	220a      	movs	r2, #10
10067c00:	701a      	strb	r2, [r3, #0]
10067c02:	e7f0      	b.n	10067be6 <_puts_r+0x8e>

10067c04 <puts>:
10067c04:	b510      	push	{r4, lr}
10067c06:	4b03      	ldr	r3, [pc, #12]	@ (10067c14 <puts+0x10>)
10067c08:	0001      	movs	r1, r0
10067c0a:	6818      	ldr	r0, [r3, #0]
10067c0c:	f7ff ffa4 	bl	10067b58 <_puts_r>
10067c10:	bd10      	pop	{r4, pc}
10067c12:	46c0      	nop			@ (mov r8, r8)
10067c14:	200028b8 	.word	0x200028b8

10067c18 <siprintf>:
10067c18:	b40e      	push	{r1, r2, r3}
10067c1a:	b510      	push	{r4, lr}
10067c1c:	2400      	movs	r4, #0
10067c1e:	490c      	ldr	r1, [pc, #48]	@ (10067c50 <siprintf+0x38>)
10067c20:	b09d      	sub	sp, #116	@ 0x74
10067c22:	ab1f      	add	r3, sp, #124	@ 0x7c
10067c24:	9002      	str	r0, [sp, #8]
10067c26:	9006      	str	r0, [sp, #24]
10067c28:	9107      	str	r1, [sp, #28]
10067c2a:	9104      	str	r1, [sp, #16]
10067c2c:	4809      	ldr	r0, [pc, #36]	@ (10067c54 <siprintf+0x3c>)
10067c2e:	490a      	ldr	r1, [pc, #40]	@ (10067c58 <siprintf+0x40>)
10067c30:	cb04      	ldmia	r3!, {r2}
10067c32:	9105      	str	r1, [sp, #20]
10067c34:	6800      	ldr	r0, [r0, #0]
10067c36:	a902      	add	r1, sp, #8
10067c38:	9301      	str	r3, [sp, #4]
10067c3a:	941b      	str	r4, [sp, #108]	@ 0x6c
10067c3c:	f000 fa30 	bl	100680a0 <_svfiprintf_r>
10067c40:	9b02      	ldr	r3, [sp, #8]
10067c42:	701c      	strb	r4, [r3, #0]
10067c44:	b01d      	add	sp, #116	@ 0x74
10067c46:	bc10      	pop	{r4}
10067c48:	bc08      	pop	{r3}
10067c4a:	b003      	add	sp, #12
10067c4c:	4718      	bx	r3
10067c4e:	46c0      	nop			@ (mov r8, r8)
10067c50:	7fffffff 	.word	0x7fffffff
10067c54:	200028b8 	.word	0x200028b8
10067c58:	ffff0208 	.word	0xffff0208

10067c5c <__sread>:
10067c5c:	b570      	push	{r4, r5, r6, lr}
10067c5e:	000c      	movs	r4, r1
10067c60:	250e      	movs	r5, #14
10067c62:	5f49      	ldrsh	r1, [r1, r5]
10067c64:	f000 f922 	bl	10067eac <_read_r>
10067c68:	2800      	cmp	r0, #0
10067c6a:	db03      	blt.n	10067c74 <__sread+0x18>
10067c6c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
10067c6e:	181b      	adds	r3, r3, r0
10067c70:	6563      	str	r3, [r4, #84]	@ 0x54
10067c72:	bd70      	pop	{r4, r5, r6, pc}
10067c74:	89a3      	ldrh	r3, [r4, #12]
10067c76:	4a02      	ldr	r2, [pc, #8]	@ (10067c80 <__sread+0x24>)
10067c78:	4013      	ands	r3, r2
10067c7a:	81a3      	strh	r3, [r4, #12]
10067c7c:	e7f9      	b.n	10067c72 <__sread+0x16>
10067c7e:	46c0      	nop			@ (mov r8, r8)
10067c80:	ffffefff 	.word	0xffffefff

10067c84 <__swrite>:
10067c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067c86:	001f      	movs	r7, r3
10067c88:	898b      	ldrh	r3, [r1, #12]
10067c8a:	0005      	movs	r5, r0
10067c8c:	000c      	movs	r4, r1
10067c8e:	0016      	movs	r6, r2
10067c90:	05db      	lsls	r3, r3, #23
10067c92:	d505      	bpl.n	10067ca0 <__swrite+0x1c>
10067c94:	230e      	movs	r3, #14
10067c96:	5ec9      	ldrsh	r1, [r1, r3]
10067c98:	2200      	movs	r2, #0
10067c9a:	2302      	movs	r3, #2
10067c9c:	f000 f8f2 	bl	10067e84 <_lseek_r>
10067ca0:	89a3      	ldrh	r3, [r4, #12]
10067ca2:	4a05      	ldr	r2, [pc, #20]	@ (10067cb8 <__swrite+0x34>)
10067ca4:	0028      	movs	r0, r5
10067ca6:	4013      	ands	r3, r2
10067ca8:	81a3      	strh	r3, [r4, #12]
10067caa:	0032      	movs	r2, r6
10067cac:	230e      	movs	r3, #14
10067cae:	5ee1      	ldrsh	r1, [r4, r3]
10067cb0:	003b      	movs	r3, r7
10067cb2:	f000 f921 	bl	10067ef8 <_write_r>
10067cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067cb8:	ffffefff 	.word	0xffffefff

10067cbc <__sseek>:
10067cbc:	b570      	push	{r4, r5, r6, lr}
10067cbe:	000c      	movs	r4, r1
10067cc0:	250e      	movs	r5, #14
10067cc2:	5f49      	ldrsh	r1, [r1, r5]
10067cc4:	f000 f8de 	bl	10067e84 <_lseek_r>
10067cc8:	89a3      	ldrh	r3, [r4, #12]
10067cca:	1c42      	adds	r2, r0, #1
10067ccc:	d103      	bne.n	10067cd6 <__sseek+0x1a>
10067cce:	4a05      	ldr	r2, [pc, #20]	@ (10067ce4 <__sseek+0x28>)
10067cd0:	4013      	ands	r3, r2
10067cd2:	81a3      	strh	r3, [r4, #12]
10067cd4:	bd70      	pop	{r4, r5, r6, pc}
10067cd6:	2280      	movs	r2, #128	@ 0x80
10067cd8:	0152      	lsls	r2, r2, #5
10067cda:	4313      	orrs	r3, r2
10067cdc:	81a3      	strh	r3, [r4, #12]
10067cde:	6560      	str	r0, [r4, #84]	@ 0x54
10067ce0:	e7f8      	b.n	10067cd4 <__sseek+0x18>
10067ce2:	46c0      	nop			@ (mov r8, r8)
10067ce4:	ffffefff 	.word	0xffffefff

10067ce8 <__sclose>:
10067ce8:	b510      	push	{r4, lr}
10067cea:	230e      	movs	r3, #14
10067cec:	5ec9      	ldrsh	r1, [r1, r3]
10067cee:	f000 f8b7 	bl	10067e60 <_close_r>
10067cf2:	bd10      	pop	{r4, pc}

10067cf4 <__swbuf_r>:
10067cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067cf6:	0006      	movs	r6, r0
10067cf8:	000d      	movs	r5, r1
10067cfa:	0014      	movs	r4, r2
10067cfc:	2800      	cmp	r0, #0
10067cfe:	d004      	beq.n	10067d0a <__swbuf_r+0x16>
10067d00:	6a03      	ldr	r3, [r0, #32]
10067d02:	2b00      	cmp	r3, #0
10067d04:	d101      	bne.n	10067d0a <__swbuf_r+0x16>
10067d06:	f7ff fef3 	bl	10067af0 <__sinit>
10067d0a:	69a3      	ldr	r3, [r4, #24]
10067d0c:	60a3      	str	r3, [r4, #8]
10067d0e:	89a3      	ldrh	r3, [r4, #12]
10067d10:	071b      	lsls	r3, r3, #28
10067d12:	d502      	bpl.n	10067d1a <__swbuf_r+0x26>
10067d14:	6923      	ldr	r3, [r4, #16]
10067d16:	2b00      	cmp	r3, #0
10067d18:	d109      	bne.n	10067d2e <__swbuf_r+0x3a>
10067d1a:	0021      	movs	r1, r4
10067d1c:	0030      	movs	r0, r6
10067d1e:	f000 f82b 	bl	10067d78 <__swsetup_r>
10067d22:	2800      	cmp	r0, #0
10067d24:	d003      	beq.n	10067d2e <__swbuf_r+0x3a>
10067d26:	2501      	movs	r5, #1
10067d28:	426d      	negs	r5, r5
10067d2a:	0028      	movs	r0, r5
10067d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067d2e:	6923      	ldr	r3, [r4, #16]
10067d30:	6820      	ldr	r0, [r4, #0]
10067d32:	b2ef      	uxtb	r7, r5
10067d34:	1ac0      	subs	r0, r0, r3
10067d36:	6963      	ldr	r3, [r4, #20]
10067d38:	b2ed      	uxtb	r5, r5
10067d3a:	4283      	cmp	r3, r0
10067d3c:	dc05      	bgt.n	10067d4a <__swbuf_r+0x56>
10067d3e:	0021      	movs	r1, r4
10067d40:	0030      	movs	r0, r6
10067d42:	f000 fcad 	bl	100686a0 <_fflush_r>
10067d46:	2800      	cmp	r0, #0
10067d48:	d1ed      	bne.n	10067d26 <__swbuf_r+0x32>
10067d4a:	68a3      	ldr	r3, [r4, #8]
10067d4c:	3001      	adds	r0, #1
10067d4e:	3b01      	subs	r3, #1
10067d50:	60a3      	str	r3, [r4, #8]
10067d52:	6823      	ldr	r3, [r4, #0]
10067d54:	1c5a      	adds	r2, r3, #1
10067d56:	6022      	str	r2, [r4, #0]
10067d58:	701f      	strb	r7, [r3, #0]
10067d5a:	6963      	ldr	r3, [r4, #20]
10067d5c:	4283      	cmp	r3, r0
10067d5e:	d004      	beq.n	10067d6a <__swbuf_r+0x76>
10067d60:	89a3      	ldrh	r3, [r4, #12]
10067d62:	07db      	lsls	r3, r3, #31
10067d64:	d5e1      	bpl.n	10067d2a <__swbuf_r+0x36>
10067d66:	2d0a      	cmp	r5, #10
10067d68:	d1df      	bne.n	10067d2a <__swbuf_r+0x36>
10067d6a:	0021      	movs	r1, r4
10067d6c:	0030      	movs	r0, r6
10067d6e:	f000 fc97 	bl	100686a0 <_fflush_r>
10067d72:	2800      	cmp	r0, #0
10067d74:	d0d9      	beq.n	10067d2a <__swbuf_r+0x36>
10067d76:	e7d6      	b.n	10067d26 <__swbuf_r+0x32>

10067d78 <__swsetup_r>:
10067d78:	4b2d      	ldr	r3, [pc, #180]	@ (10067e30 <__swsetup_r+0xb8>)
10067d7a:	b570      	push	{r4, r5, r6, lr}
10067d7c:	0005      	movs	r5, r0
10067d7e:	6818      	ldr	r0, [r3, #0]
10067d80:	000c      	movs	r4, r1
10067d82:	2800      	cmp	r0, #0
10067d84:	d004      	beq.n	10067d90 <__swsetup_r+0x18>
10067d86:	6a03      	ldr	r3, [r0, #32]
10067d88:	2b00      	cmp	r3, #0
10067d8a:	d101      	bne.n	10067d90 <__swsetup_r+0x18>
10067d8c:	f7ff feb0 	bl	10067af0 <__sinit>
10067d90:	220c      	movs	r2, #12
10067d92:	5ea3      	ldrsh	r3, [r4, r2]
10067d94:	071a      	lsls	r2, r3, #28
10067d96:	d423      	bmi.n	10067de0 <__swsetup_r+0x68>
10067d98:	06da      	lsls	r2, r3, #27
10067d9a:	d407      	bmi.n	10067dac <__swsetup_r+0x34>
10067d9c:	2209      	movs	r2, #9
10067d9e:	602a      	str	r2, [r5, #0]
10067da0:	2240      	movs	r2, #64	@ 0x40
10067da2:	2001      	movs	r0, #1
10067da4:	4313      	orrs	r3, r2
10067da6:	81a3      	strh	r3, [r4, #12]
10067da8:	4240      	negs	r0, r0
10067daa:	e03a      	b.n	10067e22 <__swsetup_r+0xaa>
10067dac:	075b      	lsls	r3, r3, #29
10067dae:	d513      	bpl.n	10067dd8 <__swsetup_r+0x60>
10067db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10067db2:	2900      	cmp	r1, #0
10067db4:	d008      	beq.n	10067dc8 <__swsetup_r+0x50>
10067db6:	0023      	movs	r3, r4
10067db8:	3344      	adds	r3, #68	@ 0x44
10067dba:	4299      	cmp	r1, r3
10067dbc:	d002      	beq.n	10067dc4 <__swsetup_r+0x4c>
10067dbe:	0028      	movs	r0, r5
10067dc0:	f000 f8c4 	bl	10067f4c <_free_r>
10067dc4:	2300      	movs	r3, #0
10067dc6:	6363      	str	r3, [r4, #52]	@ 0x34
10067dc8:	2224      	movs	r2, #36	@ 0x24
10067dca:	89a3      	ldrh	r3, [r4, #12]
10067dcc:	4393      	bics	r3, r2
10067dce:	81a3      	strh	r3, [r4, #12]
10067dd0:	2300      	movs	r3, #0
10067dd2:	6063      	str	r3, [r4, #4]
10067dd4:	6923      	ldr	r3, [r4, #16]
10067dd6:	6023      	str	r3, [r4, #0]
10067dd8:	2308      	movs	r3, #8
10067dda:	89a2      	ldrh	r2, [r4, #12]
10067ddc:	4313      	orrs	r3, r2
10067dde:	81a3      	strh	r3, [r4, #12]
10067de0:	6923      	ldr	r3, [r4, #16]
10067de2:	2b00      	cmp	r3, #0
10067de4:	d10b      	bne.n	10067dfe <__swsetup_r+0x86>
10067de6:	21a0      	movs	r1, #160	@ 0xa0
10067de8:	2280      	movs	r2, #128	@ 0x80
10067dea:	89a3      	ldrh	r3, [r4, #12]
10067dec:	0089      	lsls	r1, r1, #2
10067dee:	0092      	lsls	r2, r2, #2
10067df0:	400b      	ands	r3, r1
10067df2:	4293      	cmp	r3, r2
10067df4:	d003      	beq.n	10067dfe <__swsetup_r+0x86>
10067df6:	0021      	movs	r1, r4
10067df8:	0028      	movs	r0, r5
10067dfa:	f000 fca7 	bl	1006874c <__smakebuf_r>
10067dfe:	220c      	movs	r2, #12
10067e00:	5ea3      	ldrsh	r3, [r4, r2]
10067e02:	2101      	movs	r1, #1
10067e04:	001a      	movs	r2, r3
10067e06:	400a      	ands	r2, r1
10067e08:	420b      	tst	r3, r1
10067e0a:	d00b      	beq.n	10067e24 <__swsetup_r+0xac>
10067e0c:	2200      	movs	r2, #0
10067e0e:	60a2      	str	r2, [r4, #8]
10067e10:	6962      	ldr	r2, [r4, #20]
10067e12:	4252      	negs	r2, r2
10067e14:	61a2      	str	r2, [r4, #24]
10067e16:	2000      	movs	r0, #0
10067e18:	6922      	ldr	r2, [r4, #16]
10067e1a:	4282      	cmp	r2, r0
10067e1c:	d101      	bne.n	10067e22 <__swsetup_r+0xaa>
10067e1e:	061a      	lsls	r2, r3, #24
10067e20:	d4be      	bmi.n	10067da0 <__swsetup_r+0x28>
10067e22:	bd70      	pop	{r4, r5, r6, pc}
10067e24:	0799      	lsls	r1, r3, #30
10067e26:	d400      	bmi.n	10067e2a <__swsetup_r+0xb2>
10067e28:	6962      	ldr	r2, [r4, #20]
10067e2a:	60a2      	str	r2, [r4, #8]
10067e2c:	e7f3      	b.n	10067e16 <__swsetup_r+0x9e>
10067e2e:	46c0      	nop			@ (mov r8, r8)
10067e30:	200028b8 	.word	0x200028b8

10067e34 <memcmp>:
10067e34:	b530      	push	{r4, r5, lr}
10067e36:	2400      	movs	r4, #0
10067e38:	3901      	subs	r1, #1
10067e3a:	42a2      	cmp	r2, r4
10067e3c:	d101      	bne.n	10067e42 <memcmp+0xe>
10067e3e:	2000      	movs	r0, #0
10067e40:	e005      	b.n	10067e4e <memcmp+0x1a>
10067e42:	5d03      	ldrb	r3, [r0, r4]
10067e44:	3401      	adds	r4, #1
10067e46:	5d0d      	ldrb	r5, [r1, r4]
10067e48:	42ab      	cmp	r3, r5
10067e4a:	d0f6      	beq.n	10067e3a <memcmp+0x6>
10067e4c:	1b58      	subs	r0, r3, r5
10067e4e:	bd30      	pop	{r4, r5, pc}

10067e50 <memset>:
10067e50:	0003      	movs	r3, r0
10067e52:	1882      	adds	r2, r0, r2
10067e54:	4293      	cmp	r3, r2
10067e56:	d100      	bne.n	10067e5a <memset+0xa>
10067e58:	4770      	bx	lr
10067e5a:	7019      	strb	r1, [r3, #0]
10067e5c:	3301      	adds	r3, #1
10067e5e:	e7f9      	b.n	10067e54 <memset+0x4>

10067e60 <_close_r>:
10067e60:	2300      	movs	r3, #0
10067e62:	b570      	push	{r4, r5, r6, lr}
10067e64:	4d06      	ldr	r5, [pc, #24]	@ (10067e80 <_close_r+0x20>)
10067e66:	0004      	movs	r4, r0
10067e68:	0008      	movs	r0, r1
10067e6a:	602b      	str	r3, [r5, #0]
10067e6c:	f7df fbd1 	bl	10047612 <_close>
10067e70:	1c43      	adds	r3, r0, #1
10067e72:	d103      	bne.n	10067e7c <_close_r+0x1c>
10067e74:	682b      	ldr	r3, [r5, #0]
10067e76:	2b00      	cmp	r3, #0
10067e78:	d000      	beq.n	10067e7c <_close_r+0x1c>
10067e7a:	6023      	str	r3, [r4, #0]
10067e7c:	bd70      	pop	{r4, r5, r6, pc}
10067e7e:	46c0      	nop			@ (mov r8, r8)
10067e80:	20002604 	.word	0x20002604

10067e84 <_lseek_r>:
10067e84:	b570      	push	{r4, r5, r6, lr}
10067e86:	0004      	movs	r4, r0
10067e88:	0008      	movs	r0, r1
10067e8a:	0011      	movs	r1, r2
10067e8c:	001a      	movs	r2, r3
10067e8e:	2300      	movs	r3, #0
10067e90:	4d05      	ldr	r5, [pc, #20]	@ (10067ea8 <_lseek_r+0x24>)
10067e92:	602b      	str	r3, [r5, #0]
10067e94:	f7df fbde 	bl	10047654 <_lseek>
10067e98:	1c43      	adds	r3, r0, #1
10067e9a:	d103      	bne.n	10067ea4 <_lseek_r+0x20>
10067e9c:	682b      	ldr	r3, [r5, #0]
10067e9e:	2b00      	cmp	r3, #0
10067ea0:	d000      	beq.n	10067ea4 <_lseek_r+0x20>
10067ea2:	6023      	str	r3, [r4, #0]
10067ea4:	bd70      	pop	{r4, r5, r6, pc}
10067ea6:	46c0      	nop			@ (mov r8, r8)
10067ea8:	20002604 	.word	0x20002604

10067eac <_read_r>:
10067eac:	b570      	push	{r4, r5, r6, lr}
10067eae:	0004      	movs	r4, r0
10067eb0:	0008      	movs	r0, r1
10067eb2:	0011      	movs	r1, r2
10067eb4:	001a      	movs	r2, r3
10067eb6:	2300      	movs	r3, #0
10067eb8:	4d05      	ldr	r5, [pc, #20]	@ (10067ed0 <_read_r+0x24>)
10067eba:	602b      	str	r3, [r5, #0]
10067ebc:	f7df fb70 	bl	100475a0 <_read>
10067ec0:	1c43      	adds	r3, r0, #1
10067ec2:	d103      	bne.n	10067ecc <_read_r+0x20>
10067ec4:	682b      	ldr	r3, [r5, #0]
10067ec6:	2b00      	cmp	r3, #0
10067ec8:	d000      	beq.n	10067ecc <_read_r+0x20>
10067eca:	6023      	str	r3, [r4, #0]
10067ecc:	bd70      	pop	{r4, r5, r6, pc}
10067ece:	46c0      	nop			@ (mov r8, r8)
10067ed0:	20002604 	.word	0x20002604

10067ed4 <_sbrk_r>:
10067ed4:	2300      	movs	r3, #0
10067ed6:	b570      	push	{r4, r5, r6, lr}
10067ed8:	4d06      	ldr	r5, [pc, #24]	@ (10067ef4 <_sbrk_r+0x20>)
10067eda:	0004      	movs	r4, r0
10067edc:	0008      	movs	r0, r1
10067ede:	602b      	str	r3, [r5, #0]
10067ee0:	f7df fbc4 	bl	1004766c <_sbrk>
10067ee4:	1c43      	adds	r3, r0, #1
10067ee6:	d103      	bne.n	10067ef0 <_sbrk_r+0x1c>
10067ee8:	682b      	ldr	r3, [r5, #0]
10067eea:	2b00      	cmp	r3, #0
10067eec:	d000      	beq.n	10067ef0 <_sbrk_r+0x1c>
10067eee:	6023      	str	r3, [r4, #0]
10067ef0:	bd70      	pop	{r4, r5, r6, pc}
10067ef2:	46c0      	nop			@ (mov r8, r8)
10067ef4:	20002604 	.word	0x20002604

10067ef8 <_write_r>:
10067ef8:	b570      	push	{r4, r5, r6, lr}
10067efa:	0004      	movs	r4, r0
10067efc:	0008      	movs	r0, r1
10067efe:	0011      	movs	r1, r2
10067f00:	001a      	movs	r2, r3
10067f02:	2300      	movs	r3, #0
10067f04:	4d05      	ldr	r5, [pc, #20]	@ (10067f1c <_write_r+0x24>)
10067f06:	602b      	str	r3, [r5, #0]
10067f08:	f7df fb67 	bl	100475da <_write>
10067f0c:	1c43      	adds	r3, r0, #1
10067f0e:	d103      	bne.n	10067f18 <_write_r+0x20>
10067f10:	682b      	ldr	r3, [r5, #0]
10067f12:	2b00      	cmp	r3, #0
10067f14:	d000      	beq.n	10067f18 <_write_r+0x20>
10067f16:	6023      	str	r3, [r4, #0]
10067f18:	bd70      	pop	{r4, r5, r6, pc}
10067f1a:	46c0      	nop			@ (mov r8, r8)
10067f1c:	20002604 	.word	0x20002604

10067f20 <__errno>:
10067f20:	4b01      	ldr	r3, [pc, #4]	@ (10067f28 <__errno+0x8>)
10067f22:	6818      	ldr	r0, [r3, #0]
10067f24:	4770      	bx	lr
10067f26:	46c0      	nop			@ (mov r8, r8)
10067f28:	200028b8 	.word	0x200028b8

10067f2c <__retarget_lock_init_recursive>:
10067f2c:	4770      	bx	lr

10067f2e <__retarget_lock_acquire_recursive>:
10067f2e:	4770      	bx	lr

10067f30 <__retarget_lock_release_recursive>:
10067f30:	4770      	bx	lr

10067f32 <__aeabi_memcpy>:
10067f32:	b510      	push	{r4, lr}
10067f34:	f000 f801 	bl	10067f3a <memcpy>
10067f38:	bd10      	pop	{r4, pc}

10067f3a <memcpy>:
10067f3a:	2300      	movs	r3, #0
10067f3c:	b510      	push	{r4, lr}
10067f3e:	429a      	cmp	r2, r3
10067f40:	d100      	bne.n	10067f44 <memcpy+0xa>
10067f42:	bd10      	pop	{r4, pc}
10067f44:	5ccc      	ldrb	r4, [r1, r3]
10067f46:	54c4      	strb	r4, [r0, r3]
10067f48:	3301      	adds	r3, #1
10067f4a:	e7f8      	b.n	10067f3e <memcpy+0x4>

10067f4c <_free_r>:
10067f4c:	b570      	push	{r4, r5, r6, lr}
10067f4e:	0005      	movs	r5, r0
10067f50:	1e0c      	subs	r4, r1, #0
10067f52:	d010      	beq.n	10067f76 <_free_r+0x2a>
10067f54:	3c04      	subs	r4, #4
10067f56:	6823      	ldr	r3, [r4, #0]
10067f58:	2b00      	cmp	r3, #0
10067f5a:	da00      	bge.n	10067f5e <_free_r+0x12>
10067f5c:	18e4      	adds	r4, r4, r3
10067f5e:	0028      	movs	r0, r5
10067f60:	f7ff fd26 	bl	100679b0 <__malloc_lock>
10067f64:	4a1d      	ldr	r2, [pc, #116]	@ (10067fdc <_free_r+0x90>)
10067f66:	6813      	ldr	r3, [r2, #0]
10067f68:	2b00      	cmp	r3, #0
10067f6a:	d105      	bne.n	10067f78 <_free_r+0x2c>
10067f6c:	6063      	str	r3, [r4, #4]
10067f6e:	6014      	str	r4, [r2, #0]
10067f70:	0028      	movs	r0, r5
10067f72:	f7ff fd25 	bl	100679c0 <__malloc_unlock>
10067f76:	bd70      	pop	{r4, r5, r6, pc}
10067f78:	42a3      	cmp	r3, r4
10067f7a:	d908      	bls.n	10067f8e <_free_r+0x42>
10067f7c:	6820      	ldr	r0, [r4, #0]
10067f7e:	1821      	adds	r1, r4, r0
10067f80:	428b      	cmp	r3, r1
10067f82:	d1f3      	bne.n	10067f6c <_free_r+0x20>
10067f84:	6819      	ldr	r1, [r3, #0]
10067f86:	685b      	ldr	r3, [r3, #4]
10067f88:	1809      	adds	r1, r1, r0
10067f8a:	6021      	str	r1, [r4, #0]
10067f8c:	e7ee      	b.n	10067f6c <_free_r+0x20>
10067f8e:	001a      	movs	r2, r3
10067f90:	685b      	ldr	r3, [r3, #4]
10067f92:	2b00      	cmp	r3, #0
10067f94:	d001      	beq.n	10067f9a <_free_r+0x4e>
10067f96:	42a3      	cmp	r3, r4
10067f98:	d9f9      	bls.n	10067f8e <_free_r+0x42>
10067f9a:	6811      	ldr	r1, [r2, #0]
10067f9c:	1850      	adds	r0, r2, r1
10067f9e:	42a0      	cmp	r0, r4
10067fa0:	d10b      	bne.n	10067fba <_free_r+0x6e>
10067fa2:	6820      	ldr	r0, [r4, #0]
10067fa4:	1809      	adds	r1, r1, r0
10067fa6:	1850      	adds	r0, r2, r1
10067fa8:	6011      	str	r1, [r2, #0]
10067faa:	4283      	cmp	r3, r0
10067fac:	d1e0      	bne.n	10067f70 <_free_r+0x24>
10067fae:	6818      	ldr	r0, [r3, #0]
10067fb0:	685b      	ldr	r3, [r3, #4]
10067fb2:	1841      	adds	r1, r0, r1
10067fb4:	6011      	str	r1, [r2, #0]
10067fb6:	6053      	str	r3, [r2, #4]
10067fb8:	e7da      	b.n	10067f70 <_free_r+0x24>
10067fba:	42a0      	cmp	r0, r4
10067fbc:	d902      	bls.n	10067fc4 <_free_r+0x78>
10067fbe:	230c      	movs	r3, #12
10067fc0:	602b      	str	r3, [r5, #0]
10067fc2:	e7d5      	b.n	10067f70 <_free_r+0x24>
10067fc4:	6820      	ldr	r0, [r4, #0]
10067fc6:	1821      	adds	r1, r4, r0
10067fc8:	428b      	cmp	r3, r1
10067fca:	d103      	bne.n	10067fd4 <_free_r+0x88>
10067fcc:	6819      	ldr	r1, [r3, #0]
10067fce:	685b      	ldr	r3, [r3, #4]
10067fd0:	1809      	adds	r1, r1, r0
10067fd2:	6021      	str	r1, [r4, #0]
10067fd4:	6063      	str	r3, [r4, #4]
10067fd6:	6054      	str	r4, [r2, #4]
10067fd8:	e7ca      	b.n	10067f70 <_free_r+0x24>
10067fda:	46c0      	nop			@ (mov r8, r8)
10067fdc:	200024c4 	.word	0x200024c4

10067fe0 <__ssputs_r>:
10067fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
10067fe2:	688e      	ldr	r6, [r1, #8]
10067fe4:	b085      	sub	sp, #20
10067fe6:	001f      	movs	r7, r3
10067fe8:	000c      	movs	r4, r1
10067fea:	680b      	ldr	r3, [r1, #0]
10067fec:	9002      	str	r0, [sp, #8]
10067fee:	9203      	str	r2, [sp, #12]
10067ff0:	42be      	cmp	r6, r7
10067ff2:	d830      	bhi.n	10068056 <__ssputs_r+0x76>
10067ff4:	210c      	movs	r1, #12
10067ff6:	5e62      	ldrsh	r2, [r4, r1]
10067ff8:	2190      	movs	r1, #144	@ 0x90
10067ffa:	00c9      	lsls	r1, r1, #3
10067ffc:	420a      	tst	r2, r1
10067ffe:	d028      	beq.n	10068052 <__ssputs_r+0x72>
10068000:	2003      	movs	r0, #3
10068002:	6921      	ldr	r1, [r4, #16]
10068004:	1a5b      	subs	r3, r3, r1
10068006:	9301      	str	r3, [sp, #4]
10068008:	6963      	ldr	r3, [r4, #20]
1006800a:	4343      	muls	r3, r0
1006800c:	9801      	ldr	r0, [sp, #4]
1006800e:	0fdd      	lsrs	r5, r3, #31
10068010:	18ed      	adds	r5, r5, r3
10068012:	1c7b      	adds	r3, r7, #1
10068014:	181b      	adds	r3, r3, r0
10068016:	106d      	asrs	r5, r5, #1
10068018:	42ab      	cmp	r3, r5
1006801a:	d900      	bls.n	1006801e <__ssputs_r+0x3e>
1006801c:	001d      	movs	r5, r3
1006801e:	0552      	lsls	r2, r2, #21
10068020:	d528      	bpl.n	10068074 <__ssputs_r+0x94>
10068022:	0029      	movs	r1, r5
10068024:	9802      	ldr	r0, [sp, #8]
10068026:	f7ff fc43 	bl	100678b0 <_malloc_r>
1006802a:	1e06      	subs	r6, r0, #0
1006802c:	d02c      	beq.n	10068088 <__ssputs_r+0xa8>
1006802e:	9a01      	ldr	r2, [sp, #4]
10068030:	6921      	ldr	r1, [r4, #16]
10068032:	f7ff ff82 	bl	10067f3a <memcpy>
10068036:	89a2      	ldrh	r2, [r4, #12]
10068038:	4b18      	ldr	r3, [pc, #96]	@ (1006809c <__ssputs_r+0xbc>)
1006803a:	401a      	ands	r2, r3
1006803c:	2380      	movs	r3, #128	@ 0x80
1006803e:	4313      	orrs	r3, r2
10068040:	81a3      	strh	r3, [r4, #12]
10068042:	9b01      	ldr	r3, [sp, #4]
10068044:	6126      	str	r6, [r4, #16]
10068046:	18f6      	adds	r6, r6, r3
10068048:	6026      	str	r6, [r4, #0]
1006804a:	003e      	movs	r6, r7
1006804c:	6165      	str	r5, [r4, #20]
1006804e:	1aed      	subs	r5, r5, r3
10068050:	60a5      	str	r5, [r4, #8]
10068052:	42be      	cmp	r6, r7
10068054:	d900      	bls.n	10068058 <__ssputs_r+0x78>
10068056:	003e      	movs	r6, r7
10068058:	0032      	movs	r2, r6
1006805a:	9903      	ldr	r1, [sp, #12]
1006805c:	6820      	ldr	r0, [r4, #0]
1006805e:	f000 fbb6 	bl	100687ce <memmove>
10068062:	2000      	movs	r0, #0
10068064:	68a3      	ldr	r3, [r4, #8]
10068066:	1b9b      	subs	r3, r3, r6
10068068:	60a3      	str	r3, [r4, #8]
1006806a:	6823      	ldr	r3, [r4, #0]
1006806c:	199b      	adds	r3, r3, r6
1006806e:	6023      	str	r3, [r4, #0]
10068070:	b005      	add	sp, #20
10068072:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068074:	002a      	movs	r2, r5
10068076:	9802      	ldr	r0, [sp, #8]
10068078:	f000 fbeb 	bl	10068852 <_realloc_r>
1006807c:	1e06      	subs	r6, r0, #0
1006807e:	d1e0      	bne.n	10068042 <__ssputs_r+0x62>
10068080:	6921      	ldr	r1, [r4, #16]
10068082:	9802      	ldr	r0, [sp, #8]
10068084:	f7ff ff62 	bl	10067f4c <_free_r>
10068088:	230c      	movs	r3, #12
1006808a:	2001      	movs	r0, #1
1006808c:	9a02      	ldr	r2, [sp, #8]
1006808e:	4240      	negs	r0, r0
10068090:	6013      	str	r3, [r2, #0]
10068092:	89a2      	ldrh	r2, [r4, #12]
10068094:	3334      	adds	r3, #52	@ 0x34
10068096:	4313      	orrs	r3, r2
10068098:	81a3      	strh	r3, [r4, #12]
1006809a:	e7e9      	b.n	10068070 <__ssputs_r+0x90>
1006809c:	fffffb7f 	.word	0xfffffb7f

100680a0 <_svfiprintf_r>:
100680a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100680a2:	b0a1      	sub	sp, #132	@ 0x84
100680a4:	9003      	str	r0, [sp, #12]
100680a6:	001d      	movs	r5, r3
100680a8:	898b      	ldrh	r3, [r1, #12]
100680aa:	000f      	movs	r7, r1
100680ac:	0016      	movs	r6, r2
100680ae:	061b      	lsls	r3, r3, #24
100680b0:	d511      	bpl.n	100680d6 <_svfiprintf_r+0x36>
100680b2:	690b      	ldr	r3, [r1, #16]
100680b4:	2b00      	cmp	r3, #0
100680b6:	d10e      	bne.n	100680d6 <_svfiprintf_r+0x36>
100680b8:	2140      	movs	r1, #64	@ 0x40
100680ba:	f7ff fbf9 	bl	100678b0 <_malloc_r>
100680be:	6038      	str	r0, [r7, #0]
100680c0:	6138      	str	r0, [r7, #16]
100680c2:	2800      	cmp	r0, #0
100680c4:	d105      	bne.n	100680d2 <_svfiprintf_r+0x32>
100680c6:	230c      	movs	r3, #12
100680c8:	9a03      	ldr	r2, [sp, #12]
100680ca:	6013      	str	r3, [r2, #0]
100680cc:	2001      	movs	r0, #1
100680ce:	4240      	negs	r0, r0
100680d0:	e0cf      	b.n	10068272 <_svfiprintf_r+0x1d2>
100680d2:	2340      	movs	r3, #64	@ 0x40
100680d4:	617b      	str	r3, [r7, #20]
100680d6:	2300      	movs	r3, #0
100680d8:	ac08      	add	r4, sp, #32
100680da:	6163      	str	r3, [r4, #20]
100680dc:	3320      	adds	r3, #32
100680de:	7663      	strb	r3, [r4, #25]
100680e0:	3310      	adds	r3, #16
100680e2:	76a3      	strb	r3, [r4, #26]
100680e4:	9507      	str	r5, [sp, #28]
100680e6:	0035      	movs	r5, r6
100680e8:	782b      	ldrb	r3, [r5, #0]
100680ea:	2b00      	cmp	r3, #0
100680ec:	d001      	beq.n	100680f2 <_svfiprintf_r+0x52>
100680ee:	2b25      	cmp	r3, #37	@ 0x25
100680f0:	d148      	bne.n	10068184 <_svfiprintf_r+0xe4>
100680f2:	1bab      	subs	r3, r5, r6
100680f4:	9305      	str	r3, [sp, #20]
100680f6:	42b5      	cmp	r5, r6
100680f8:	d00b      	beq.n	10068112 <_svfiprintf_r+0x72>
100680fa:	0032      	movs	r2, r6
100680fc:	0039      	movs	r1, r7
100680fe:	9803      	ldr	r0, [sp, #12]
10068100:	f7ff ff6e 	bl	10067fe0 <__ssputs_r>
10068104:	3001      	adds	r0, #1
10068106:	d100      	bne.n	1006810a <_svfiprintf_r+0x6a>
10068108:	e0ae      	b.n	10068268 <_svfiprintf_r+0x1c8>
1006810a:	6963      	ldr	r3, [r4, #20]
1006810c:	9a05      	ldr	r2, [sp, #20]
1006810e:	189b      	adds	r3, r3, r2
10068110:	6163      	str	r3, [r4, #20]
10068112:	782b      	ldrb	r3, [r5, #0]
10068114:	2b00      	cmp	r3, #0
10068116:	d100      	bne.n	1006811a <_svfiprintf_r+0x7a>
10068118:	e0a6      	b.n	10068268 <_svfiprintf_r+0x1c8>
1006811a:	2201      	movs	r2, #1
1006811c:	2300      	movs	r3, #0
1006811e:	4252      	negs	r2, r2
10068120:	6062      	str	r2, [r4, #4]
10068122:	a904      	add	r1, sp, #16
10068124:	3254      	adds	r2, #84	@ 0x54
10068126:	1852      	adds	r2, r2, r1
10068128:	1c6e      	adds	r6, r5, #1
1006812a:	6023      	str	r3, [r4, #0]
1006812c:	60e3      	str	r3, [r4, #12]
1006812e:	60a3      	str	r3, [r4, #8]
10068130:	7013      	strb	r3, [r2, #0]
10068132:	65a3      	str	r3, [r4, #88]	@ 0x58
10068134:	4b54      	ldr	r3, [pc, #336]	@ (10068288 <_svfiprintf_r+0x1e8>)
10068136:	2205      	movs	r2, #5
10068138:	0018      	movs	r0, r3
1006813a:	7831      	ldrb	r1, [r6, #0]
1006813c:	9305      	str	r3, [sp, #20]
1006813e:	f000 fb7d 	bl	1006883c <memchr>
10068142:	1c75      	adds	r5, r6, #1
10068144:	2800      	cmp	r0, #0
10068146:	d11f      	bne.n	10068188 <_svfiprintf_r+0xe8>
10068148:	6822      	ldr	r2, [r4, #0]
1006814a:	06d3      	lsls	r3, r2, #27
1006814c:	d504      	bpl.n	10068158 <_svfiprintf_r+0xb8>
1006814e:	2353      	movs	r3, #83	@ 0x53
10068150:	a904      	add	r1, sp, #16
10068152:	185b      	adds	r3, r3, r1
10068154:	2120      	movs	r1, #32
10068156:	7019      	strb	r1, [r3, #0]
10068158:	0713      	lsls	r3, r2, #28
1006815a:	d504      	bpl.n	10068166 <_svfiprintf_r+0xc6>
1006815c:	2353      	movs	r3, #83	@ 0x53
1006815e:	a904      	add	r1, sp, #16
10068160:	185b      	adds	r3, r3, r1
10068162:	212b      	movs	r1, #43	@ 0x2b
10068164:	7019      	strb	r1, [r3, #0]
10068166:	7833      	ldrb	r3, [r6, #0]
10068168:	2b2a      	cmp	r3, #42	@ 0x2a
1006816a:	d016      	beq.n	1006819a <_svfiprintf_r+0xfa>
1006816c:	0035      	movs	r5, r6
1006816e:	2100      	movs	r1, #0
10068170:	200a      	movs	r0, #10
10068172:	68e3      	ldr	r3, [r4, #12]
10068174:	782a      	ldrb	r2, [r5, #0]
10068176:	1c6e      	adds	r6, r5, #1
10068178:	3a30      	subs	r2, #48	@ 0x30
1006817a:	2a09      	cmp	r2, #9
1006817c:	d950      	bls.n	10068220 <_svfiprintf_r+0x180>
1006817e:	2900      	cmp	r1, #0
10068180:	d111      	bne.n	100681a6 <_svfiprintf_r+0x106>
10068182:	e017      	b.n	100681b4 <_svfiprintf_r+0x114>
10068184:	3501      	adds	r5, #1
10068186:	e7af      	b.n	100680e8 <_svfiprintf_r+0x48>
10068188:	9b05      	ldr	r3, [sp, #20]
1006818a:	6822      	ldr	r2, [r4, #0]
1006818c:	1ac0      	subs	r0, r0, r3
1006818e:	2301      	movs	r3, #1
10068190:	4083      	lsls	r3, r0
10068192:	4313      	orrs	r3, r2
10068194:	002e      	movs	r6, r5
10068196:	6023      	str	r3, [r4, #0]
10068198:	e7cc      	b.n	10068134 <_svfiprintf_r+0x94>
1006819a:	9b07      	ldr	r3, [sp, #28]
1006819c:	1d19      	adds	r1, r3, #4
1006819e:	681b      	ldr	r3, [r3, #0]
100681a0:	9107      	str	r1, [sp, #28]
100681a2:	2b00      	cmp	r3, #0
100681a4:	db01      	blt.n	100681aa <_svfiprintf_r+0x10a>
100681a6:	930b      	str	r3, [sp, #44]	@ 0x2c
100681a8:	e004      	b.n	100681b4 <_svfiprintf_r+0x114>
100681aa:	425b      	negs	r3, r3
100681ac:	60e3      	str	r3, [r4, #12]
100681ae:	2302      	movs	r3, #2
100681b0:	4313      	orrs	r3, r2
100681b2:	6023      	str	r3, [r4, #0]
100681b4:	782b      	ldrb	r3, [r5, #0]
100681b6:	2b2e      	cmp	r3, #46	@ 0x2e
100681b8:	d10c      	bne.n	100681d4 <_svfiprintf_r+0x134>
100681ba:	786b      	ldrb	r3, [r5, #1]
100681bc:	2b2a      	cmp	r3, #42	@ 0x2a
100681be:	d134      	bne.n	1006822a <_svfiprintf_r+0x18a>
100681c0:	9b07      	ldr	r3, [sp, #28]
100681c2:	3502      	adds	r5, #2
100681c4:	1d1a      	adds	r2, r3, #4
100681c6:	681b      	ldr	r3, [r3, #0]
100681c8:	9207      	str	r2, [sp, #28]
100681ca:	2b00      	cmp	r3, #0
100681cc:	da01      	bge.n	100681d2 <_svfiprintf_r+0x132>
100681ce:	2301      	movs	r3, #1
100681d0:	425b      	negs	r3, r3
100681d2:	9309      	str	r3, [sp, #36]	@ 0x24
100681d4:	4e2d      	ldr	r6, [pc, #180]	@ (1006828c <_svfiprintf_r+0x1ec>)
100681d6:	2203      	movs	r2, #3
100681d8:	0030      	movs	r0, r6
100681da:	7829      	ldrb	r1, [r5, #0]
100681dc:	f000 fb2e 	bl	1006883c <memchr>
100681e0:	2800      	cmp	r0, #0
100681e2:	d006      	beq.n	100681f2 <_svfiprintf_r+0x152>
100681e4:	2340      	movs	r3, #64	@ 0x40
100681e6:	1b80      	subs	r0, r0, r6
100681e8:	4083      	lsls	r3, r0
100681ea:	6822      	ldr	r2, [r4, #0]
100681ec:	3501      	adds	r5, #1
100681ee:	4313      	orrs	r3, r2
100681f0:	6023      	str	r3, [r4, #0]
100681f2:	7829      	ldrb	r1, [r5, #0]
100681f4:	2206      	movs	r2, #6
100681f6:	4826      	ldr	r0, [pc, #152]	@ (10068290 <_svfiprintf_r+0x1f0>)
100681f8:	1c6e      	adds	r6, r5, #1
100681fa:	7621      	strb	r1, [r4, #24]
100681fc:	f000 fb1e 	bl	1006883c <memchr>
10068200:	2800      	cmp	r0, #0
10068202:	d038      	beq.n	10068276 <_svfiprintf_r+0x1d6>
10068204:	4b23      	ldr	r3, [pc, #140]	@ (10068294 <_svfiprintf_r+0x1f4>)
10068206:	2b00      	cmp	r3, #0
10068208:	d122      	bne.n	10068250 <_svfiprintf_r+0x1b0>
1006820a:	2207      	movs	r2, #7
1006820c:	9b07      	ldr	r3, [sp, #28]
1006820e:	3307      	adds	r3, #7
10068210:	4393      	bics	r3, r2
10068212:	3308      	adds	r3, #8
10068214:	9307      	str	r3, [sp, #28]
10068216:	6963      	ldr	r3, [r4, #20]
10068218:	9a04      	ldr	r2, [sp, #16]
1006821a:	189b      	adds	r3, r3, r2
1006821c:	6163      	str	r3, [r4, #20]
1006821e:	e762      	b.n	100680e6 <_svfiprintf_r+0x46>
10068220:	4343      	muls	r3, r0
10068222:	0035      	movs	r5, r6
10068224:	2101      	movs	r1, #1
10068226:	189b      	adds	r3, r3, r2
10068228:	e7a4      	b.n	10068174 <_svfiprintf_r+0xd4>
1006822a:	2300      	movs	r3, #0
1006822c:	200a      	movs	r0, #10
1006822e:	0019      	movs	r1, r3
10068230:	3501      	adds	r5, #1
10068232:	6063      	str	r3, [r4, #4]
10068234:	782a      	ldrb	r2, [r5, #0]
10068236:	1c6e      	adds	r6, r5, #1
10068238:	3a30      	subs	r2, #48	@ 0x30
1006823a:	2a09      	cmp	r2, #9
1006823c:	d903      	bls.n	10068246 <_svfiprintf_r+0x1a6>
1006823e:	2b00      	cmp	r3, #0
10068240:	d0c8      	beq.n	100681d4 <_svfiprintf_r+0x134>
10068242:	9109      	str	r1, [sp, #36]	@ 0x24
10068244:	e7c6      	b.n	100681d4 <_svfiprintf_r+0x134>
10068246:	4341      	muls	r1, r0
10068248:	0035      	movs	r5, r6
1006824a:	2301      	movs	r3, #1
1006824c:	1889      	adds	r1, r1, r2
1006824e:	e7f1      	b.n	10068234 <_svfiprintf_r+0x194>
10068250:	aa07      	add	r2, sp, #28
10068252:	9200      	str	r2, [sp, #0]
10068254:	0021      	movs	r1, r4
10068256:	003a      	movs	r2, r7
10068258:	4b0f      	ldr	r3, [pc, #60]	@ (10068298 <_svfiprintf_r+0x1f8>)
1006825a:	9803      	ldr	r0, [sp, #12]
1006825c:	e000      	b.n	10068260 <_svfiprintf_r+0x1c0>
1006825e:	bf00      	nop
10068260:	9004      	str	r0, [sp, #16]
10068262:	9b04      	ldr	r3, [sp, #16]
10068264:	3301      	adds	r3, #1
10068266:	d1d6      	bne.n	10068216 <_svfiprintf_r+0x176>
10068268:	89bb      	ldrh	r3, [r7, #12]
1006826a:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006826c:	065b      	lsls	r3, r3, #25
1006826e:	d500      	bpl.n	10068272 <_svfiprintf_r+0x1d2>
10068270:	e72c      	b.n	100680cc <_svfiprintf_r+0x2c>
10068272:	b021      	add	sp, #132	@ 0x84
10068274:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068276:	aa07      	add	r2, sp, #28
10068278:	9200      	str	r2, [sp, #0]
1006827a:	0021      	movs	r1, r4
1006827c:	003a      	movs	r2, r7
1006827e:	4b06      	ldr	r3, [pc, #24]	@ (10068298 <_svfiprintf_r+0x1f8>)
10068280:	9803      	ldr	r0, [sp, #12]
10068282:	f000 f87b 	bl	1006837c <_printf_i>
10068286:	e7eb      	b.n	10068260 <_svfiprintf_r+0x1c0>
10068288:	10069ca1 	.word	0x10069ca1
1006828c:	10069ca7 	.word	0x10069ca7
10068290:	10069cab 	.word	0x10069cab
10068294:	00000000 	.word	0x00000000
10068298:	10067fe1 	.word	0x10067fe1

1006829c <_printf_common>:
1006829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1006829e:	0016      	movs	r6, r2
100682a0:	9301      	str	r3, [sp, #4]
100682a2:	688a      	ldr	r2, [r1, #8]
100682a4:	690b      	ldr	r3, [r1, #16]
100682a6:	000c      	movs	r4, r1
100682a8:	9000      	str	r0, [sp, #0]
100682aa:	4293      	cmp	r3, r2
100682ac:	da00      	bge.n	100682b0 <_printf_common+0x14>
100682ae:	0013      	movs	r3, r2
100682b0:	0022      	movs	r2, r4
100682b2:	6033      	str	r3, [r6, #0]
100682b4:	3243      	adds	r2, #67	@ 0x43
100682b6:	7812      	ldrb	r2, [r2, #0]
100682b8:	2a00      	cmp	r2, #0
100682ba:	d001      	beq.n	100682c0 <_printf_common+0x24>
100682bc:	3301      	adds	r3, #1
100682be:	6033      	str	r3, [r6, #0]
100682c0:	6823      	ldr	r3, [r4, #0]
100682c2:	069b      	lsls	r3, r3, #26
100682c4:	d502      	bpl.n	100682cc <_printf_common+0x30>
100682c6:	6833      	ldr	r3, [r6, #0]
100682c8:	3302      	adds	r3, #2
100682ca:	6033      	str	r3, [r6, #0]
100682cc:	6822      	ldr	r2, [r4, #0]
100682ce:	2306      	movs	r3, #6
100682d0:	0015      	movs	r5, r2
100682d2:	401d      	ands	r5, r3
100682d4:	421a      	tst	r2, r3
100682d6:	d027      	beq.n	10068328 <_printf_common+0x8c>
100682d8:	0023      	movs	r3, r4
100682da:	3343      	adds	r3, #67	@ 0x43
100682dc:	781b      	ldrb	r3, [r3, #0]
100682de:	1e5a      	subs	r2, r3, #1
100682e0:	4193      	sbcs	r3, r2
100682e2:	6822      	ldr	r2, [r4, #0]
100682e4:	0692      	lsls	r2, r2, #26
100682e6:	d430      	bmi.n	1006834a <_printf_common+0xae>
100682e8:	0022      	movs	r2, r4
100682ea:	9901      	ldr	r1, [sp, #4]
100682ec:	9800      	ldr	r0, [sp, #0]
100682ee:	9d08      	ldr	r5, [sp, #32]
100682f0:	3243      	adds	r2, #67	@ 0x43
100682f2:	47a8      	blx	r5
100682f4:	3001      	adds	r0, #1
100682f6:	d025      	beq.n	10068344 <_printf_common+0xa8>
100682f8:	2206      	movs	r2, #6
100682fa:	6823      	ldr	r3, [r4, #0]
100682fc:	2500      	movs	r5, #0
100682fe:	4013      	ands	r3, r2
10068300:	2b04      	cmp	r3, #4
10068302:	d105      	bne.n	10068310 <_printf_common+0x74>
10068304:	6833      	ldr	r3, [r6, #0]
10068306:	68e5      	ldr	r5, [r4, #12]
10068308:	1aed      	subs	r5, r5, r3
1006830a:	43eb      	mvns	r3, r5
1006830c:	17db      	asrs	r3, r3, #31
1006830e:	401d      	ands	r5, r3
10068310:	68a3      	ldr	r3, [r4, #8]
10068312:	6922      	ldr	r2, [r4, #16]
10068314:	4293      	cmp	r3, r2
10068316:	dd01      	ble.n	1006831c <_printf_common+0x80>
10068318:	1a9b      	subs	r3, r3, r2
1006831a:	18ed      	adds	r5, r5, r3
1006831c:	2600      	movs	r6, #0
1006831e:	42b5      	cmp	r5, r6
10068320:	d120      	bne.n	10068364 <_printf_common+0xc8>
10068322:	2000      	movs	r0, #0
10068324:	e010      	b.n	10068348 <_printf_common+0xac>
10068326:	3501      	adds	r5, #1
10068328:	68e3      	ldr	r3, [r4, #12]
1006832a:	6832      	ldr	r2, [r6, #0]
1006832c:	1a9b      	subs	r3, r3, r2
1006832e:	42ab      	cmp	r3, r5
10068330:	ddd2      	ble.n	100682d8 <_printf_common+0x3c>
10068332:	0022      	movs	r2, r4
10068334:	2301      	movs	r3, #1
10068336:	9901      	ldr	r1, [sp, #4]
10068338:	9800      	ldr	r0, [sp, #0]
1006833a:	9f08      	ldr	r7, [sp, #32]
1006833c:	3219      	adds	r2, #25
1006833e:	47b8      	blx	r7
10068340:	3001      	adds	r0, #1
10068342:	d1f0      	bne.n	10068326 <_printf_common+0x8a>
10068344:	2001      	movs	r0, #1
10068346:	4240      	negs	r0, r0
10068348:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006834a:	2030      	movs	r0, #48	@ 0x30
1006834c:	18e1      	adds	r1, r4, r3
1006834e:	3143      	adds	r1, #67	@ 0x43
10068350:	7008      	strb	r0, [r1, #0]
10068352:	0021      	movs	r1, r4
10068354:	1c5a      	adds	r2, r3, #1
10068356:	3145      	adds	r1, #69	@ 0x45
10068358:	7809      	ldrb	r1, [r1, #0]
1006835a:	18a2      	adds	r2, r4, r2
1006835c:	3243      	adds	r2, #67	@ 0x43
1006835e:	3302      	adds	r3, #2
10068360:	7011      	strb	r1, [r2, #0]
10068362:	e7c1      	b.n	100682e8 <_printf_common+0x4c>
10068364:	0022      	movs	r2, r4
10068366:	2301      	movs	r3, #1
10068368:	9901      	ldr	r1, [sp, #4]
1006836a:	9800      	ldr	r0, [sp, #0]
1006836c:	9f08      	ldr	r7, [sp, #32]
1006836e:	321a      	adds	r2, #26
10068370:	47b8      	blx	r7
10068372:	3001      	adds	r0, #1
10068374:	d0e6      	beq.n	10068344 <_printf_common+0xa8>
10068376:	3601      	adds	r6, #1
10068378:	e7d1      	b.n	1006831e <_printf_common+0x82>
	...

1006837c <_printf_i>:
1006837c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006837e:	b08b      	sub	sp, #44	@ 0x2c
10068380:	9206      	str	r2, [sp, #24]
10068382:	000a      	movs	r2, r1
10068384:	3243      	adds	r2, #67	@ 0x43
10068386:	9307      	str	r3, [sp, #28]
10068388:	9005      	str	r0, [sp, #20]
1006838a:	9203      	str	r2, [sp, #12]
1006838c:	7e0a      	ldrb	r2, [r1, #24]
1006838e:	000c      	movs	r4, r1
10068390:	9b10      	ldr	r3, [sp, #64]	@ 0x40
10068392:	2a78      	cmp	r2, #120	@ 0x78
10068394:	d809      	bhi.n	100683aa <_printf_i+0x2e>
10068396:	2a62      	cmp	r2, #98	@ 0x62
10068398:	d80b      	bhi.n	100683b2 <_printf_i+0x36>
1006839a:	2a00      	cmp	r2, #0
1006839c:	d100      	bne.n	100683a0 <_printf_i+0x24>
1006839e:	e0ba      	b.n	10068516 <_printf_i+0x19a>
100683a0:	497a      	ldr	r1, [pc, #488]	@ (1006858c <_printf_i+0x210>)
100683a2:	9104      	str	r1, [sp, #16]
100683a4:	2a58      	cmp	r2, #88	@ 0x58
100683a6:	d100      	bne.n	100683aa <_printf_i+0x2e>
100683a8:	e08e      	b.n	100684c8 <_printf_i+0x14c>
100683aa:	0025      	movs	r5, r4
100683ac:	3542      	adds	r5, #66	@ 0x42
100683ae:	702a      	strb	r2, [r5, #0]
100683b0:	e022      	b.n	100683f8 <_printf_i+0x7c>
100683b2:	0010      	movs	r0, r2
100683b4:	3863      	subs	r0, #99	@ 0x63
100683b6:	2815      	cmp	r0, #21
100683b8:	d8f7      	bhi.n	100683aa <_printf_i+0x2e>
100683ba:	f7d7 ff37 	bl	1004022c <__gnu_thumb1_case_shi>
100683be:	0016      	.short	0x0016
100683c0:	fff6001f 	.word	0xfff6001f
100683c4:	fff6fff6 	.word	0xfff6fff6
100683c8:	001ffff6 	.word	0x001ffff6
100683cc:	fff6fff6 	.word	0xfff6fff6
100683d0:	fff6fff6 	.word	0xfff6fff6
100683d4:	0036009f 	.word	0x0036009f
100683d8:	fff6007e 	.word	0xfff6007e
100683dc:	00b0fff6 	.word	0x00b0fff6
100683e0:	0036fff6 	.word	0x0036fff6
100683e4:	fff6fff6 	.word	0xfff6fff6
100683e8:	0082      	.short	0x0082
100683ea:	0025      	movs	r5, r4
100683ec:	681a      	ldr	r2, [r3, #0]
100683ee:	3542      	adds	r5, #66	@ 0x42
100683f0:	1d11      	adds	r1, r2, #4
100683f2:	6019      	str	r1, [r3, #0]
100683f4:	6813      	ldr	r3, [r2, #0]
100683f6:	702b      	strb	r3, [r5, #0]
100683f8:	2301      	movs	r3, #1
100683fa:	e09e      	b.n	1006853a <_printf_i+0x1be>
100683fc:	6818      	ldr	r0, [r3, #0]
100683fe:	6809      	ldr	r1, [r1, #0]
10068400:	1d02      	adds	r2, r0, #4
10068402:	060d      	lsls	r5, r1, #24
10068404:	d50b      	bpl.n	1006841e <_printf_i+0xa2>
10068406:	6806      	ldr	r6, [r0, #0]
10068408:	601a      	str	r2, [r3, #0]
1006840a:	2e00      	cmp	r6, #0
1006840c:	da03      	bge.n	10068416 <_printf_i+0x9a>
1006840e:	232d      	movs	r3, #45	@ 0x2d
10068410:	9a03      	ldr	r2, [sp, #12]
10068412:	4276      	negs	r6, r6
10068414:	7013      	strb	r3, [r2, #0]
10068416:	4b5d      	ldr	r3, [pc, #372]	@ (1006858c <_printf_i+0x210>)
10068418:	270a      	movs	r7, #10
1006841a:	9304      	str	r3, [sp, #16]
1006841c:	e018      	b.n	10068450 <_printf_i+0xd4>
1006841e:	6806      	ldr	r6, [r0, #0]
10068420:	601a      	str	r2, [r3, #0]
10068422:	0649      	lsls	r1, r1, #25
10068424:	d5f1      	bpl.n	1006840a <_printf_i+0x8e>
10068426:	b236      	sxth	r6, r6
10068428:	e7ef      	b.n	1006840a <_printf_i+0x8e>
1006842a:	6808      	ldr	r0, [r1, #0]
1006842c:	6819      	ldr	r1, [r3, #0]
1006842e:	c940      	ldmia	r1!, {r6}
10068430:	0605      	lsls	r5, r0, #24
10068432:	d402      	bmi.n	1006843a <_printf_i+0xbe>
10068434:	0640      	lsls	r0, r0, #25
10068436:	d500      	bpl.n	1006843a <_printf_i+0xbe>
10068438:	b2b6      	uxth	r6, r6
1006843a:	6019      	str	r1, [r3, #0]
1006843c:	4b53      	ldr	r3, [pc, #332]	@ (1006858c <_printf_i+0x210>)
1006843e:	270a      	movs	r7, #10
10068440:	9304      	str	r3, [sp, #16]
10068442:	2a6f      	cmp	r2, #111	@ 0x6f
10068444:	d100      	bne.n	10068448 <_printf_i+0xcc>
10068446:	3f02      	subs	r7, #2
10068448:	0023      	movs	r3, r4
1006844a:	2200      	movs	r2, #0
1006844c:	3343      	adds	r3, #67	@ 0x43
1006844e:	701a      	strb	r2, [r3, #0]
10068450:	6863      	ldr	r3, [r4, #4]
10068452:	60a3      	str	r3, [r4, #8]
10068454:	2b00      	cmp	r3, #0
10068456:	db06      	blt.n	10068466 <_printf_i+0xea>
10068458:	2104      	movs	r1, #4
1006845a:	6822      	ldr	r2, [r4, #0]
1006845c:	9d03      	ldr	r5, [sp, #12]
1006845e:	438a      	bics	r2, r1
10068460:	6022      	str	r2, [r4, #0]
10068462:	4333      	orrs	r3, r6
10068464:	d00c      	beq.n	10068480 <_printf_i+0x104>
10068466:	9d03      	ldr	r5, [sp, #12]
10068468:	0030      	movs	r0, r6
1006846a:	0039      	movs	r1, r7
1006846c:	f7d7 ff6e 	bl	1004034c <__aeabi_uidivmod>
10068470:	9b04      	ldr	r3, [sp, #16]
10068472:	3d01      	subs	r5, #1
10068474:	5c5b      	ldrb	r3, [r3, r1]
10068476:	702b      	strb	r3, [r5, #0]
10068478:	0033      	movs	r3, r6
1006847a:	0006      	movs	r6, r0
1006847c:	429f      	cmp	r7, r3
1006847e:	d9f3      	bls.n	10068468 <_printf_i+0xec>
10068480:	2f08      	cmp	r7, #8
10068482:	d109      	bne.n	10068498 <_printf_i+0x11c>
10068484:	6823      	ldr	r3, [r4, #0]
10068486:	07db      	lsls	r3, r3, #31
10068488:	d506      	bpl.n	10068498 <_printf_i+0x11c>
1006848a:	6862      	ldr	r2, [r4, #4]
1006848c:	6923      	ldr	r3, [r4, #16]
1006848e:	429a      	cmp	r2, r3
10068490:	dc02      	bgt.n	10068498 <_printf_i+0x11c>
10068492:	2330      	movs	r3, #48	@ 0x30
10068494:	3d01      	subs	r5, #1
10068496:	702b      	strb	r3, [r5, #0]
10068498:	9b03      	ldr	r3, [sp, #12]
1006849a:	1b5b      	subs	r3, r3, r5
1006849c:	6123      	str	r3, [r4, #16]
1006849e:	9b07      	ldr	r3, [sp, #28]
100684a0:	0021      	movs	r1, r4
100684a2:	9300      	str	r3, [sp, #0]
100684a4:	9805      	ldr	r0, [sp, #20]
100684a6:	9b06      	ldr	r3, [sp, #24]
100684a8:	aa09      	add	r2, sp, #36	@ 0x24
100684aa:	f7ff fef7 	bl	1006829c <_printf_common>
100684ae:	3001      	adds	r0, #1
100684b0:	d148      	bne.n	10068544 <_printf_i+0x1c8>
100684b2:	2001      	movs	r0, #1
100684b4:	4240      	negs	r0, r0
100684b6:	b00b      	add	sp, #44	@ 0x2c
100684b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100684ba:	2220      	movs	r2, #32
100684bc:	6809      	ldr	r1, [r1, #0]
100684be:	430a      	orrs	r2, r1
100684c0:	6022      	str	r2, [r4, #0]
100684c2:	2278      	movs	r2, #120	@ 0x78
100684c4:	4932      	ldr	r1, [pc, #200]	@ (10068590 <_printf_i+0x214>)
100684c6:	9104      	str	r1, [sp, #16]
100684c8:	0021      	movs	r1, r4
100684ca:	3145      	adds	r1, #69	@ 0x45
100684cc:	700a      	strb	r2, [r1, #0]
100684ce:	6819      	ldr	r1, [r3, #0]
100684d0:	6822      	ldr	r2, [r4, #0]
100684d2:	c940      	ldmia	r1!, {r6}
100684d4:	0610      	lsls	r0, r2, #24
100684d6:	d402      	bmi.n	100684de <_printf_i+0x162>
100684d8:	0650      	lsls	r0, r2, #25
100684da:	d500      	bpl.n	100684de <_printf_i+0x162>
100684dc:	b2b6      	uxth	r6, r6
100684de:	6019      	str	r1, [r3, #0]
100684e0:	07d3      	lsls	r3, r2, #31
100684e2:	d502      	bpl.n	100684ea <_printf_i+0x16e>
100684e4:	2320      	movs	r3, #32
100684e6:	4313      	orrs	r3, r2
100684e8:	6023      	str	r3, [r4, #0]
100684ea:	2e00      	cmp	r6, #0
100684ec:	d001      	beq.n	100684f2 <_printf_i+0x176>
100684ee:	2710      	movs	r7, #16
100684f0:	e7aa      	b.n	10068448 <_printf_i+0xcc>
100684f2:	2220      	movs	r2, #32
100684f4:	6823      	ldr	r3, [r4, #0]
100684f6:	4393      	bics	r3, r2
100684f8:	6023      	str	r3, [r4, #0]
100684fa:	e7f8      	b.n	100684ee <_printf_i+0x172>
100684fc:	681a      	ldr	r2, [r3, #0]
100684fe:	680d      	ldr	r5, [r1, #0]
10068500:	1d10      	adds	r0, r2, #4
10068502:	6949      	ldr	r1, [r1, #20]
10068504:	6018      	str	r0, [r3, #0]
10068506:	6813      	ldr	r3, [r2, #0]
10068508:	062e      	lsls	r6, r5, #24
1006850a:	d501      	bpl.n	10068510 <_printf_i+0x194>
1006850c:	6019      	str	r1, [r3, #0]
1006850e:	e002      	b.n	10068516 <_printf_i+0x19a>
10068510:	066d      	lsls	r5, r5, #25
10068512:	d5fb      	bpl.n	1006850c <_printf_i+0x190>
10068514:	8019      	strh	r1, [r3, #0]
10068516:	2300      	movs	r3, #0
10068518:	9d03      	ldr	r5, [sp, #12]
1006851a:	6123      	str	r3, [r4, #16]
1006851c:	e7bf      	b.n	1006849e <_printf_i+0x122>
1006851e:	681a      	ldr	r2, [r3, #0]
10068520:	1d11      	adds	r1, r2, #4
10068522:	6019      	str	r1, [r3, #0]
10068524:	6815      	ldr	r5, [r2, #0]
10068526:	2100      	movs	r1, #0
10068528:	0028      	movs	r0, r5
1006852a:	6862      	ldr	r2, [r4, #4]
1006852c:	f000 f986 	bl	1006883c <memchr>
10068530:	2800      	cmp	r0, #0
10068532:	d001      	beq.n	10068538 <_printf_i+0x1bc>
10068534:	1b40      	subs	r0, r0, r5
10068536:	6060      	str	r0, [r4, #4]
10068538:	6863      	ldr	r3, [r4, #4]
1006853a:	6123      	str	r3, [r4, #16]
1006853c:	2300      	movs	r3, #0
1006853e:	9a03      	ldr	r2, [sp, #12]
10068540:	7013      	strb	r3, [r2, #0]
10068542:	e7ac      	b.n	1006849e <_printf_i+0x122>
10068544:	002a      	movs	r2, r5
10068546:	6923      	ldr	r3, [r4, #16]
10068548:	9906      	ldr	r1, [sp, #24]
1006854a:	9805      	ldr	r0, [sp, #20]
1006854c:	9d07      	ldr	r5, [sp, #28]
1006854e:	47a8      	blx	r5
10068550:	3001      	adds	r0, #1
10068552:	d0ae      	beq.n	100684b2 <_printf_i+0x136>
10068554:	6823      	ldr	r3, [r4, #0]
10068556:	079b      	lsls	r3, r3, #30
10068558:	d415      	bmi.n	10068586 <_printf_i+0x20a>
1006855a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1006855c:	68e0      	ldr	r0, [r4, #12]
1006855e:	4298      	cmp	r0, r3
10068560:	daa9      	bge.n	100684b6 <_printf_i+0x13a>
10068562:	0018      	movs	r0, r3
10068564:	e7a7      	b.n	100684b6 <_printf_i+0x13a>
10068566:	0022      	movs	r2, r4
10068568:	2301      	movs	r3, #1
1006856a:	9906      	ldr	r1, [sp, #24]
1006856c:	9805      	ldr	r0, [sp, #20]
1006856e:	9e07      	ldr	r6, [sp, #28]
10068570:	3219      	adds	r2, #25
10068572:	47b0      	blx	r6
10068574:	3001      	adds	r0, #1
10068576:	d09c      	beq.n	100684b2 <_printf_i+0x136>
10068578:	3501      	adds	r5, #1
1006857a:	68e3      	ldr	r3, [r4, #12]
1006857c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1006857e:	1a9b      	subs	r3, r3, r2
10068580:	42ab      	cmp	r3, r5
10068582:	dcf0      	bgt.n	10068566 <_printf_i+0x1ea>
10068584:	e7e9      	b.n	1006855a <_printf_i+0x1de>
10068586:	2500      	movs	r5, #0
10068588:	e7f7      	b.n	1006857a <_printf_i+0x1fe>
1006858a:	46c0      	nop			@ (mov r8, r8)
1006858c:	10069cb2 	.word	0x10069cb2
10068590:	10069cc3 	.word	0x10069cc3

10068594 <__sflush_r>:
10068594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068596:	220c      	movs	r2, #12
10068598:	5e8b      	ldrsh	r3, [r1, r2]
1006859a:	0005      	movs	r5, r0
1006859c:	000c      	movs	r4, r1
1006859e:	071a      	lsls	r2, r3, #28
100685a0:	d456      	bmi.n	10068650 <__sflush_r+0xbc>
100685a2:	684a      	ldr	r2, [r1, #4]
100685a4:	2a00      	cmp	r2, #0
100685a6:	dc02      	bgt.n	100685ae <__sflush_r+0x1a>
100685a8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
100685aa:	2a00      	cmp	r2, #0
100685ac:	dd4e      	ble.n	1006864c <__sflush_r+0xb8>
100685ae:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100685b0:	2f00      	cmp	r7, #0
100685b2:	d04b      	beq.n	1006864c <__sflush_r+0xb8>
100685b4:	2200      	movs	r2, #0
100685b6:	2080      	movs	r0, #128	@ 0x80
100685b8:	682e      	ldr	r6, [r5, #0]
100685ba:	602a      	str	r2, [r5, #0]
100685bc:	001a      	movs	r2, r3
100685be:	0140      	lsls	r0, r0, #5
100685c0:	6a21      	ldr	r1, [r4, #32]
100685c2:	4002      	ands	r2, r0
100685c4:	4203      	tst	r3, r0
100685c6:	d033      	beq.n	10068630 <__sflush_r+0x9c>
100685c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
100685ca:	89a3      	ldrh	r3, [r4, #12]
100685cc:	075b      	lsls	r3, r3, #29
100685ce:	d506      	bpl.n	100685de <__sflush_r+0x4a>
100685d0:	6863      	ldr	r3, [r4, #4]
100685d2:	1ad2      	subs	r2, r2, r3
100685d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
100685d6:	2b00      	cmp	r3, #0
100685d8:	d001      	beq.n	100685de <__sflush_r+0x4a>
100685da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
100685dc:	1ad2      	subs	r2, r2, r3
100685de:	2300      	movs	r3, #0
100685e0:	0028      	movs	r0, r5
100685e2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100685e4:	6a21      	ldr	r1, [r4, #32]
100685e6:	47b8      	blx	r7
100685e8:	89a2      	ldrh	r2, [r4, #12]
100685ea:	1c43      	adds	r3, r0, #1
100685ec:	d106      	bne.n	100685fc <__sflush_r+0x68>
100685ee:	6829      	ldr	r1, [r5, #0]
100685f0:	291d      	cmp	r1, #29
100685f2:	d846      	bhi.n	10068682 <__sflush_r+0xee>
100685f4:	4b29      	ldr	r3, [pc, #164]	@ (1006869c <__sflush_r+0x108>)
100685f6:	40cb      	lsrs	r3, r1
100685f8:	07db      	lsls	r3, r3, #31
100685fa:	d542      	bpl.n	10068682 <__sflush_r+0xee>
100685fc:	2300      	movs	r3, #0
100685fe:	6063      	str	r3, [r4, #4]
10068600:	6923      	ldr	r3, [r4, #16]
10068602:	6023      	str	r3, [r4, #0]
10068604:	04d2      	lsls	r2, r2, #19
10068606:	d505      	bpl.n	10068614 <__sflush_r+0x80>
10068608:	1c43      	adds	r3, r0, #1
1006860a:	d102      	bne.n	10068612 <__sflush_r+0x7e>
1006860c:	682b      	ldr	r3, [r5, #0]
1006860e:	2b00      	cmp	r3, #0
10068610:	d100      	bne.n	10068614 <__sflush_r+0x80>
10068612:	6560      	str	r0, [r4, #84]	@ 0x54
10068614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10068616:	602e      	str	r6, [r5, #0]
10068618:	2900      	cmp	r1, #0
1006861a:	d017      	beq.n	1006864c <__sflush_r+0xb8>
1006861c:	0023      	movs	r3, r4
1006861e:	3344      	adds	r3, #68	@ 0x44
10068620:	4299      	cmp	r1, r3
10068622:	d002      	beq.n	1006862a <__sflush_r+0x96>
10068624:	0028      	movs	r0, r5
10068626:	f7ff fc91 	bl	10067f4c <_free_r>
1006862a:	2300      	movs	r3, #0
1006862c:	6363      	str	r3, [r4, #52]	@ 0x34
1006862e:	e00d      	b.n	1006864c <__sflush_r+0xb8>
10068630:	2301      	movs	r3, #1
10068632:	0028      	movs	r0, r5
10068634:	47b8      	blx	r7
10068636:	0002      	movs	r2, r0
10068638:	1c43      	adds	r3, r0, #1
1006863a:	d1c6      	bne.n	100685ca <__sflush_r+0x36>
1006863c:	682b      	ldr	r3, [r5, #0]
1006863e:	2b00      	cmp	r3, #0
10068640:	d0c3      	beq.n	100685ca <__sflush_r+0x36>
10068642:	2b1d      	cmp	r3, #29
10068644:	d001      	beq.n	1006864a <__sflush_r+0xb6>
10068646:	2b16      	cmp	r3, #22
10068648:	d11a      	bne.n	10068680 <__sflush_r+0xec>
1006864a:	602e      	str	r6, [r5, #0]
1006864c:	2000      	movs	r0, #0
1006864e:	e01e      	b.n	1006868e <__sflush_r+0xfa>
10068650:	690e      	ldr	r6, [r1, #16]
10068652:	2e00      	cmp	r6, #0
10068654:	d0fa      	beq.n	1006864c <__sflush_r+0xb8>
10068656:	680f      	ldr	r7, [r1, #0]
10068658:	600e      	str	r6, [r1, #0]
1006865a:	1bba      	subs	r2, r7, r6
1006865c:	9201      	str	r2, [sp, #4]
1006865e:	2200      	movs	r2, #0
10068660:	079b      	lsls	r3, r3, #30
10068662:	d100      	bne.n	10068666 <__sflush_r+0xd2>
10068664:	694a      	ldr	r2, [r1, #20]
10068666:	60a2      	str	r2, [r4, #8]
10068668:	9b01      	ldr	r3, [sp, #4]
1006866a:	2b00      	cmp	r3, #0
1006866c:	ddee      	ble.n	1006864c <__sflush_r+0xb8>
1006866e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
10068670:	0032      	movs	r2, r6
10068672:	001f      	movs	r7, r3
10068674:	0028      	movs	r0, r5
10068676:	9b01      	ldr	r3, [sp, #4]
10068678:	6a21      	ldr	r1, [r4, #32]
1006867a:	47b8      	blx	r7
1006867c:	2800      	cmp	r0, #0
1006867e:	dc07      	bgt.n	10068690 <__sflush_r+0xfc>
10068680:	89a2      	ldrh	r2, [r4, #12]
10068682:	2340      	movs	r3, #64	@ 0x40
10068684:	2001      	movs	r0, #1
10068686:	4313      	orrs	r3, r2
10068688:	b21b      	sxth	r3, r3
1006868a:	81a3      	strh	r3, [r4, #12]
1006868c:	4240      	negs	r0, r0
1006868e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10068690:	9b01      	ldr	r3, [sp, #4]
10068692:	1836      	adds	r6, r6, r0
10068694:	1a1b      	subs	r3, r3, r0
10068696:	9301      	str	r3, [sp, #4]
10068698:	e7e6      	b.n	10068668 <__sflush_r+0xd4>
1006869a:	46c0      	nop			@ (mov r8, r8)
1006869c:	20400001 	.word	0x20400001

100686a0 <_fflush_r>:
100686a0:	690b      	ldr	r3, [r1, #16]
100686a2:	b570      	push	{r4, r5, r6, lr}
100686a4:	0005      	movs	r5, r0
100686a6:	000c      	movs	r4, r1
100686a8:	2b00      	cmp	r3, #0
100686aa:	d102      	bne.n	100686b2 <_fflush_r+0x12>
100686ac:	2500      	movs	r5, #0
100686ae:	0028      	movs	r0, r5
100686b0:	bd70      	pop	{r4, r5, r6, pc}
100686b2:	2800      	cmp	r0, #0
100686b4:	d004      	beq.n	100686c0 <_fflush_r+0x20>
100686b6:	6a03      	ldr	r3, [r0, #32]
100686b8:	2b00      	cmp	r3, #0
100686ba:	d101      	bne.n	100686c0 <_fflush_r+0x20>
100686bc:	f7ff fa18 	bl	10067af0 <__sinit>
100686c0:	220c      	movs	r2, #12
100686c2:	5ea3      	ldrsh	r3, [r4, r2]
100686c4:	2b00      	cmp	r3, #0
100686c6:	d0f1      	beq.n	100686ac <_fflush_r+0xc>
100686c8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100686ca:	07d2      	lsls	r2, r2, #31
100686cc:	d404      	bmi.n	100686d8 <_fflush_r+0x38>
100686ce:	059b      	lsls	r3, r3, #22
100686d0:	d402      	bmi.n	100686d8 <_fflush_r+0x38>
100686d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100686d4:	f7ff fc2b 	bl	10067f2e <__retarget_lock_acquire_recursive>
100686d8:	0028      	movs	r0, r5
100686da:	0021      	movs	r1, r4
100686dc:	f7ff ff5a 	bl	10068594 <__sflush_r>
100686e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100686e2:	0005      	movs	r5, r0
100686e4:	07db      	lsls	r3, r3, #31
100686e6:	d4e2      	bmi.n	100686ae <_fflush_r+0xe>
100686e8:	89a3      	ldrh	r3, [r4, #12]
100686ea:	059b      	lsls	r3, r3, #22
100686ec:	d4df      	bmi.n	100686ae <_fflush_r+0xe>
100686ee:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100686f0:	f7ff fc1e 	bl	10067f30 <__retarget_lock_release_recursive>
100686f4:	e7db      	b.n	100686ae <_fflush_r+0xe>
	...

100686f8 <__swhatbuf_r>:
100686f8:	b570      	push	{r4, r5, r6, lr}
100686fa:	000e      	movs	r6, r1
100686fc:	001d      	movs	r5, r3
100686fe:	230e      	movs	r3, #14
10068700:	5ec9      	ldrsh	r1, [r1, r3]
10068702:	0014      	movs	r4, r2
10068704:	b096      	sub	sp, #88	@ 0x58
10068706:	2900      	cmp	r1, #0
10068708:	da0c      	bge.n	10068724 <__swhatbuf_r+0x2c>
1006870a:	89b2      	ldrh	r2, [r6, #12]
1006870c:	2380      	movs	r3, #128	@ 0x80
1006870e:	0011      	movs	r1, r2
10068710:	4019      	ands	r1, r3
10068712:	421a      	tst	r2, r3
10068714:	d114      	bne.n	10068740 <__swhatbuf_r+0x48>
10068716:	2380      	movs	r3, #128	@ 0x80
10068718:	00db      	lsls	r3, r3, #3
1006871a:	2000      	movs	r0, #0
1006871c:	6029      	str	r1, [r5, #0]
1006871e:	6023      	str	r3, [r4, #0]
10068720:	b016      	add	sp, #88	@ 0x58
10068722:	bd70      	pop	{r4, r5, r6, pc}
10068724:	466a      	mov	r2, sp
10068726:	f000 f865 	bl	100687f4 <_fstat_r>
1006872a:	2800      	cmp	r0, #0
1006872c:	dbed      	blt.n	1006870a <__swhatbuf_r+0x12>
1006872e:	23f0      	movs	r3, #240	@ 0xf0
10068730:	9901      	ldr	r1, [sp, #4]
10068732:	021b      	lsls	r3, r3, #8
10068734:	4019      	ands	r1, r3
10068736:	4b04      	ldr	r3, [pc, #16]	@ (10068748 <__swhatbuf_r+0x50>)
10068738:	18c9      	adds	r1, r1, r3
1006873a:	424b      	negs	r3, r1
1006873c:	4159      	adcs	r1, r3
1006873e:	e7ea      	b.n	10068716 <__swhatbuf_r+0x1e>
10068740:	2100      	movs	r1, #0
10068742:	2340      	movs	r3, #64	@ 0x40
10068744:	e7e9      	b.n	1006871a <__swhatbuf_r+0x22>
10068746:	46c0      	nop			@ (mov r8, r8)
10068748:	ffffe000 	.word	0xffffe000

1006874c <__smakebuf_r>:
1006874c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006874e:	2602      	movs	r6, #2
10068750:	898b      	ldrh	r3, [r1, #12]
10068752:	0005      	movs	r5, r0
10068754:	000c      	movs	r4, r1
10068756:	b085      	sub	sp, #20
10068758:	4233      	tst	r3, r6
1006875a:	d007      	beq.n	1006876c <__smakebuf_r+0x20>
1006875c:	0023      	movs	r3, r4
1006875e:	3347      	adds	r3, #71	@ 0x47
10068760:	6023      	str	r3, [r4, #0]
10068762:	6123      	str	r3, [r4, #16]
10068764:	2301      	movs	r3, #1
10068766:	6163      	str	r3, [r4, #20]
10068768:	b005      	add	sp, #20
1006876a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006876c:	ab03      	add	r3, sp, #12
1006876e:	aa02      	add	r2, sp, #8
10068770:	f7ff ffc2 	bl	100686f8 <__swhatbuf_r>
10068774:	9f02      	ldr	r7, [sp, #8]
10068776:	9001      	str	r0, [sp, #4]
10068778:	0039      	movs	r1, r7
1006877a:	0028      	movs	r0, r5
1006877c:	f7ff f898 	bl	100678b0 <_malloc_r>
10068780:	2800      	cmp	r0, #0
10068782:	d108      	bne.n	10068796 <__smakebuf_r+0x4a>
10068784:	220c      	movs	r2, #12
10068786:	5ea3      	ldrsh	r3, [r4, r2]
10068788:	059a      	lsls	r2, r3, #22
1006878a:	d4ed      	bmi.n	10068768 <__smakebuf_r+0x1c>
1006878c:	2203      	movs	r2, #3
1006878e:	4393      	bics	r3, r2
10068790:	431e      	orrs	r6, r3
10068792:	81a6      	strh	r6, [r4, #12]
10068794:	e7e2      	b.n	1006875c <__smakebuf_r+0x10>
10068796:	2380      	movs	r3, #128	@ 0x80
10068798:	89a2      	ldrh	r2, [r4, #12]
1006879a:	6020      	str	r0, [r4, #0]
1006879c:	4313      	orrs	r3, r2
1006879e:	81a3      	strh	r3, [r4, #12]
100687a0:	9b03      	ldr	r3, [sp, #12]
100687a2:	6120      	str	r0, [r4, #16]
100687a4:	6167      	str	r7, [r4, #20]
100687a6:	2b00      	cmp	r3, #0
100687a8:	d00c      	beq.n	100687c4 <__smakebuf_r+0x78>
100687aa:	0028      	movs	r0, r5
100687ac:	230e      	movs	r3, #14
100687ae:	5ee1      	ldrsh	r1, [r4, r3]
100687b0:	f000 f832 	bl	10068818 <_isatty_r>
100687b4:	2800      	cmp	r0, #0
100687b6:	d005      	beq.n	100687c4 <__smakebuf_r+0x78>
100687b8:	2303      	movs	r3, #3
100687ba:	89a2      	ldrh	r2, [r4, #12]
100687bc:	439a      	bics	r2, r3
100687be:	3b02      	subs	r3, #2
100687c0:	4313      	orrs	r3, r2
100687c2:	81a3      	strh	r3, [r4, #12]
100687c4:	89a3      	ldrh	r3, [r4, #12]
100687c6:	9a01      	ldr	r2, [sp, #4]
100687c8:	4313      	orrs	r3, r2
100687ca:	81a3      	strh	r3, [r4, #12]
100687cc:	e7cc      	b.n	10068768 <__smakebuf_r+0x1c>

100687ce <memmove>:
100687ce:	b510      	push	{r4, lr}
100687d0:	4288      	cmp	r0, r1
100687d2:	d902      	bls.n	100687da <memmove+0xc>
100687d4:	188b      	adds	r3, r1, r2
100687d6:	4298      	cmp	r0, r3
100687d8:	d308      	bcc.n	100687ec <memmove+0x1e>
100687da:	2300      	movs	r3, #0
100687dc:	429a      	cmp	r2, r3
100687de:	d007      	beq.n	100687f0 <memmove+0x22>
100687e0:	5ccc      	ldrb	r4, [r1, r3]
100687e2:	54c4      	strb	r4, [r0, r3]
100687e4:	3301      	adds	r3, #1
100687e6:	e7f9      	b.n	100687dc <memmove+0xe>
100687e8:	5c8b      	ldrb	r3, [r1, r2]
100687ea:	5483      	strb	r3, [r0, r2]
100687ec:	3a01      	subs	r2, #1
100687ee:	d2fb      	bcs.n	100687e8 <memmove+0x1a>
100687f0:	bd10      	pop	{r4, pc}
	...

100687f4 <_fstat_r>:
100687f4:	2300      	movs	r3, #0
100687f6:	b570      	push	{r4, r5, r6, lr}
100687f8:	4d06      	ldr	r5, [pc, #24]	@ (10068814 <_fstat_r+0x20>)
100687fa:	0004      	movs	r4, r0
100687fc:	0008      	movs	r0, r1
100687fe:	0011      	movs	r1, r2
10068800:	602b      	str	r3, [r5, #0]
10068802:	f7de ff10 	bl	10047626 <_fstat>
10068806:	1c43      	adds	r3, r0, #1
10068808:	d103      	bne.n	10068812 <_fstat_r+0x1e>
1006880a:	682b      	ldr	r3, [r5, #0]
1006880c:	2b00      	cmp	r3, #0
1006880e:	d000      	beq.n	10068812 <_fstat_r+0x1e>
10068810:	6023      	str	r3, [r4, #0]
10068812:	bd70      	pop	{r4, r5, r6, pc}
10068814:	20002604 	.word	0x20002604

10068818 <_isatty_r>:
10068818:	2300      	movs	r3, #0
1006881a:	b570      	push	{r4, r5, r6, lr}
1006881c:	4d06      	ldr	r5, [pc, #24]	@ (10068838 <_isatty_r+0x20>)
1006881e:	0004      	movs	r4, r0
10068820:	0008      	movs	r0, r1
10068822:	602b      	str	r3, [r5, #0]
10068824:	f7de ff0d 	bl	10047642 <_isatty>
10068828:	1c43      	adds	r3, r0, #1
1006882a:	d103      	bne.n	10068834 <_isatty_r+0x1c>
1006882c:	682b      	ldr	r3, [r5, #0]
1006882e:	2b00      	cmp	r3, #0
10068830:	d000      	beq.n	10068834 <_isatty_r+0x1c>
10068832:	6023      	str	r3, [r4, #0]
10068834:	bd70      	pop	{r4, r5, r6, pc}
10068836:	46c0      	nop			@ (mov r8, r8)
10068838:	20002604 	.word	0x20002604

1006883c <memchr>:
1006883c:	b2c9      	uxtb	r1, r1
1006883e:	1882      	adds	r2, r0, r2
10068840:	4290      	cmp	r0, r2
10068842:	d101      	bne.n	10068848 <memchr+0xc>
10068844:	2000      	movs	r0, #0
10068846:	4770      	bx	lr
10068848:	7803      	ldrb	r3, [r0, #0]
1006884a:	428b      	cmp	r3, r1
1006884c:	d0fb      	beq.n	10068846 <memchr+0xa>
1006884e:	3001      	adds	r0, #1
10068850:	e7f6      	b.n	10068840 <memchr+0x4>

10068852 <_realloc_r>:
10068852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068854:	0006      	movs	r6, r0
10068856:	000c      	movs	r4, r1
10068858:	0015      	movs	r5, r2
1006885a:	2900      	cmp	r1, #0
1006885c:	d105      	bne.n	1006886a <_realloc_r+0x18>
1006885e:	0011      	movs	r1, r2
10068860:	f7ff f826 	bl	100678b0 <_malloc_r>
10068864:	0004      	movs	r4, r0
10068866:	0020      	movs	r0, r4
10068868:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006886a:	2a00      	cmp	r2, #0
1006886c:	d103      	bne.n	10068876 <_realloc_r+0x24>
1006886e:	f7ff fb6d 	bl	10067f4c <_free_r>
10068872:	002c      	movs	r4, r5
10068874:	e7f7      	b.n	10068866 <_realloc_r+0x14>
10068876:	f000 f81c 	bl	100688b2 <_malloc_usable_size_r>
1006887a:	0007      	movs	r7, r0
1006887c:	4285      	cmp	r5, r0
1006887e:	d802      	bhi.n	10068886 <_realloc_r+0x34>
10068880:	0843      	lsrs	r3, r0, #1
10068882:	42ab      	cmp	r3, r5
10068884:	d3ef      	bcc.n	10068866 <_realloc_r+0x14>
10068886:	0029      	movs	r1, r5
10068888:	0030      	movs	r0, r6
1006888a:	f7ff f811 	bl	100678b0 <_malloc_r>
1006888e:	9001      	str	r0, [sp, #4]
10068890:	2800      	cmp	r0, #0
10068892:	d101      	bne.n	10068898 <_realloc_r+0x46>
10068894:	9c01      	ldr	r4, [sp, #4]
10068896:	e7e6      	b.n	10068866 <_realloc_r+0x14>
10068898:	002a      	movs	r2, r5
1006889a:	42bd      	cmp	r5, r7
1006889c:	d900      	bls.n	100688a0 <_realloc_r+0x4e>
1006889e:	003a      	movs	r2, r7
100688a0:	0021      	movs	r1, r4
100688a2:	9801      	ldr	r0, [sp, #4]
100688a4:	f7ff fb49 	bl	10067f3a <memcpy>
100688a8:	0021      	movs	r1, r4
100688aa:	0030      	movs	r0, r6
100688ac:	f7ff fb4e 	bl	10067f4c <_free_r>
100688b0:	e7f0      	b.n	10068894 <_realloc_r+0x42>

100688b2 <_malloc_usable_size_r>:
100688b2:	1f0b      	subs	r3, r1, #4
100688b4:	681b      	ldr	r3, [r3, #0]
100688b6:	1f18      	subs	r0, r3, #4
100688b8:	2b00      	cmp	r3, #0
100688ba:	da01      	bge.n	100688c0 <_malloc_usable_size_r+0xe>
100688bc:	580b      	ldr	r3, [r1, r0]
100688be:	18c0      	adds	r0, r0, r3
100688c0:	4770      	bx	lr
	...

100688c4 <AES_CMAC_Encrypt_Append>:
100688c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100688c6:	2500      	movs	r5, #0
100688c8:	b08a      	sub	sp, #40	@ 0x28
100688ca:	460e      	mov	r6, r1
100688cc:	4604      	mov	r4, r0
100688ce:	2800      	cmp	r0, #0
100688d0:	d004      	beq.n	100688dc <AES_CMAC_Encrypt_Append+0x18>
100688d2:	2e00      	cmp	r6, #0
100688d4:	d106      	bne.n	100688e4 <AES_CMAC_Encrypt_Append+0x20>
100688d6:	980c      	ldr	r0, [sp, #48]	@ 0x30
100688d8:	2800      	cmp	r0, #0
100688da:	dd03      	ble.n	100688e4 <AES_CMAC_Encrypt_Append+0x20>
100688dc:	2061      	movs	r0, #97	@ 0x61
100688de:	0140      	lsls	r0, r0, #5
100688e0:	b00d      	add	sp, #52	@ 0x34
100688e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100688e4:	980c      	ldr	r0, [sp, #48]	@ 0x30
100688e6:	2800      	cmp	r0, #0
100688e8:	db04      	blt.n	100688f4 <AES_CMAC_Encrypt_Append+0x30>
100688ea:	2810      	cmp	r0, #16
100688ec:	da04      	bge.n	100688f8 <AES_CMAC_Encrypt_Append+0x34>
100688ee:	7920      	ldrb	r0, [r4, #4]
100688f0:	0680      	lsls	r0, r0, #26
100688f2:	d401      	bmi.n	100688f8 <AES_CMAC_Encrypt_Append+0x34>
100688f4:	488c      	ldr	r0, [pc, #560]	@ (10068b28 <AES_CMAC_Encrypt_Append+0x264>)
100688f6:	e7f3      	b.n	100688e0 <AES_CMAC_Encrypt_Append+0x1c>
100688f8:	7920      	ldrb	r0, [r4, #4]
100688fa:	0741      	lsls	r1, r0, #29
100688fc:	d401      	bmi.n	10068902 <AES_CMAC_Encrypt_Append+0x3e>
100688fe:	0781      	lsls	r1, r0, #30
10068900:	d502      	bpl.n	10068908 <AES_CMAC_Encrypt_Append+0x44>
10068902:	4889      	ldr	r0, [pc, #548]	@ (10068b28 <AES_CMAC_Encrypt_Append+0x264>)
10068904:	1c40      	adds	r0, r0, #1
10068906:	e7eb      	b.n	100688e0 <AES_CMAC_Encrypt_Append+0x1c>
10068908:	2140      	movs	r1, #64	@ 0x40
1006890a:	4308      	orrs	r0, r1
1006890c:	7120      	strb	r0, [r4, #4]
1006890e:	4620      	mov	r0, r4
10068910:	3014      	adds	r0, #20
10068912:	9008      	str	r0, [sp, #32]
10068914:	e01c      	b.n	10068950 <AES_CMAC_Encrypt_Append+0x8c>
10068916:	2000      	movs	r0, #0
10068918:	0081      	lsls	r1, r0, #2
1006891a:	194a      	adds	r2, r1, r5
1006891c:	1992      	adds	r2, r2, r6
1006891e:	7853      	ldrb	r3, [r2, #1]
10068920:	7817      	ldrb	r7, [r2, #0]
10068922:	021b      	lsls	r3, r3, #8
10068924:	433b      	orrs	r3, r7
10068926:	7897      	ldrb	r7, [r2, #2]
10068928:	ba5b      	rev16	r3, r3
1006892a:	041b      	lsls	r3, r3, #16
1006892c:	023f      	lsls	r7, r7, #8
1006892e:	78d2      	ldrb	r2, [r2, #3]
10068930:	433b      	orrs	r3, r7
10068932:	4313      	orrs	r3, r2
10068934:	190a      	adds	r2, r1, r4
10068936:	6952      	ldr	r2, [r2, #20]
10068938:	1c40      	adds	r0, r0, #1
1006893a:	4053      	eors	r3, r2
1006893c:	aa04      	add	r2, sp, #16
1006893e:	5053      	str	r3, [r2, r1]
10068940:	2804      	cmp	r0, #4
10068942:	dbe9      	blt.n	10068918 <AES_CMAC_Encrypt_Append+0x54>
10068944:	68a2      	ldr	r2, [r4, #8]
10068946:	a804      	add	r0, sp, #16
10068948:	9908      	ldr	r1, [sp, #32]
1006894a:	f7e6 fe3d 	bl	1004f5c8 <AES_128_HW_enc>
1006894e:	9d00      	ldr	r5, [sp, #0]
10068950:	990c      	ldr	r1, [sp, #48]	@ 0x30
10068952:	4628      	mov	r0, r5
10068954:	3010      	adds	r0, #16
10068956:	9000      	str	r0, [sp, #0]
10068958:	4288      	cmp	r0, r1
1006895a:	dbdc      	blt.n	10068916 <AES_CMAC_Encrypt_Append+0x52>
1006895c:	7920      	ldrb	r0, [r4, #4]
1006895e:	0680      	lsls	r0, r0, #26
10068960:	d41e      	bmi.n	100689a0 <AES_CMAC_Encrypt_Append+0xdc>
10068962:	2900      	cmp	r1, #0
10068964:	dd1c      	ble.n	100689a0 <AES_CMAC_Encrypt_Append+0xdc>
10068966:	2000      	movs	r0, #0
10068968:	0081      	lsls	r1, r0, #2
1006896a:	194a      	adds	r2, r1, r5
1006896c:	1992      	adds	r2, r2, r6
1006896e:	7853      	ldrb	r3, [r2, #1]
10068970:	7817      	ldrb	r7, [r2, #0]
10068972:	021b      	lsls	r3, r3, #8
10068974:	433b      	orrs	r3, r7
10068976:	7897      	ldrb	r7, [r2, #2]
10068978:	ba5b      	rev16	r3, r3
1006897a:	041b      	lsls	r3, r3, #16
1006897c:	023f      	lsls	r7, r7, #8
1006897e:	78d2      	ldrb	r2, [r2, #3]
10068980:	433b      	orrs	r3, r7
10068982:	4313      	orrs	r3, r2
10068984:	190a      	adds	r2, r1, r4
10068986:	6952      	ldr	r2, [r2, #20]
10068988:	1c40      	adds	r0, r0, #1
1006898a:	4053      	eors	r3, r2
1006898c:	aa04      	add	r2, sp, #16
1006898e:	5053      	str	r3, [r2, r1]
10068990:	2804      	cmp	r0, #4
10068992:	dbe9      	blt.n	10068968 <AES_CMAC_Encrypt_Append+0xa4>
10068994:	68a2      	ldr	r2, [r4, #8]
10068996:	a804      	add	r0, sp, #16
10068998:	9908      	ldr	r1, [sp, #32]
1006899a:	f7e6 fe15 	bl	1004f5c8 <AES_128_HW_enc>
1006899e:	e0c0      	b.n	10068b22 <AES_CMAC_Encrypt_Append+0x25e>
100689a0:	2000      	movs	r0, #0
100689a2:	9000      	str	r0, [sp, #0]
100689a4:	9001      	str	r0, [sp, #4]
100689a6:	9002      	str	r0, [sp, #8]
100689a8:	9003      	str	r0, [sp, #12]
100689aa:	4669      	mov	r1, sp
100689ac:	4608      	mov	r0, r1
100689ae:	68a2      	ldr	r2, [r4, #8]
100689b0:	f7e6 fe0a 	bl	1004f5c8 <AES_128_HW_enc>
100689b4:	9900      	ldr	r1, [sp, #0]
100689b6:	2287      	movs	r2, #135	@ 0x87
100689b8:	0fc8      	lsrs	r0, r1, #31
100689ba:	4350      	muls	r0, r2
100689bc:	9a01      	ldr	r2, [sp, #4]
100689be:	0049      	lsls	r1, r1, #1
100689c0:	0fd2      	lsrs	r2, r2, #31
100689c2:	4311      	orrs	r1, r2
100689c4:	9100      	str	r1, [sp, #0]
100689c6:	9901      	ldr	r1, [sp, #4]
100689c8:	9a02      	ldr	r2, [sp, #8]
100689ca:	0049      	lsls	r1, r1, #1
100689cc:	0fd2      	lsrs	r2, r2, #31
100689ce:	4311      	orrs	r1, r2
100689d0:	9101      	str	r1, [sp, #4]
100689d2:	9902      	ldr	r1, [sp, #8]
100689d4:	9a03      	ldr	r2, [sp, #12]
100689d6:	0049      	lsls	r1, r1, #1
100689d8:	0fd2      	lsrs	r2, r2, #31
100689da:	4311      	orrs	r1, r2
100689dc:	9102      	str	r1, [sp, #8]
100689de:	9903      	ldr	r1, [sp, #12]
100689e0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100689e2:	0049      	lsls	r1, r1, #1
100689e4:	4041      	eors	r1, r0
100689e6:	4628      	mov	r0, r5
100689e8:	3010      	adds	r0, #16
100689ea:	9103      	str	r1, [sp, #12]
100689ec:	4290      	cmp	r0, r2
100689ee:	d11a      	bne.n	10068a26 <AES_CMAC_Encrypt_Append+0x162>
100689f0:	2000      	movs	r0, #0
100689f2:	0081      	lsls	r1, r0, #2
100689f4:	194a      	adds	r2, r1, r5
100689f6:	1993      	adds	r3, r2, r6
100689f8:	785a      	ldrb	r2, [r3, #1]
100689fa:	781f      	ldrb	r7, [r3, #0]
100689fc:	0212      	lsls	r2, r2, #8
100689fe:	433a      	orrs	r2, r7
10068a00:	789f      	ldrb	r7, [r3, #2]
10068a02:	ba52      	rev16	r2, r2
10068a04:	0412      	lsls	r2, r2, #16
10068a06:	023f      	lsls	r7, r7, #8
10068a08:	433a      	orrs	r2, r7
10068a0a:	78db      	ldrb	r3, [r3, #3]
10068a0c:	466f      	mov	r7, sp
10068a0e:	431a      	orrs	r2, r3
10068a10:	190b      	adds	r3, r1, r4
10068a12:	695b      	ldr	r3, [r3, #20]
10068a14:	587f      	ldr	r7, [r7, r1]
10068a16:	1c40      	adds	r0, r0, #1
10068a18:	407b      	eors	r3, r7
10068a1a:	405a      	eors	r2, r3
10068a1c:	ab04      	add	r3, sp, #16
10068a1e:	505a      	str	r2, [r3, r1]
10068a20:	2804      	cmp	r0, #4
10068a22:	dbe6      	blt.n	100689f2 <AES_CMAC_Encrypt_Append+0x12e>
10068a24:	e074      	b.n	10068b10 <AES_CMAC_Encrypt_Append+0x24c>
10068a26:	9a00      	ldr	r2, [sp, #0]
10068a28:	2387      	movs	r3, #135	@ 0x87
10068a2a:	0fd0      	lsrs	r0, r2, #31
10068a2c:	4358      	muls	r0, r3
10068a2e:	9b01      	ldr	r3, [sp, #4]
10068a30:	0052      	lsls	r2, r2, #1
10068a32:	0fdb      	lsrs	r3, r3, #31
10068a34:	431a      	orrs	r2, r3
10068a36:	9200      	str	r2, [sp, #0]
10068a38:	9a01      	ldr	r2, [sp, #4]
10068a3a:	9b02      	ldr	r3, [sp, #8]
10068a3c:	0052      	lsls	r2, r2, #1
10068a3e:	0fdb      	lsrs	r3, r3, #31
10068a40:	431a      	orrs	r2, r3
10068a42:	9201      	str	r2, [sp, #4]
10068a44:	9a02      	ldr	r2, [sp, #8]
10068a46:	0fcb      	lsrs	r3, r1, #31
10068a48:	0052      	lsls	r2, r2, #1
10068a4a:	431a      	orrs	r2, r3
10068a4c:	9202      	str	r2, [sp, #8]
10068a4e:	004a      	lsls	r2, r1, #1
10068a50:	4042      	eors	r2, r0
10068a52:	9203      	str	r2, [sp, #12]
10068a54:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10068a56:	2000      	movs	r0, #0
10068a58:	1b53      	subs	r3, r2, r5
10068a5a:	17da      	asrs	r2, r3, #31
10068a5c:	469c      	mov	ip, r3
10068a5e:	0f92      	lsrs	r2, r2, #30
10068a60:	4462      	add	r2, ip
10068a62:	1092      	asrs	r2, r2, #2
10068a64:	4696      	mov	lr, r2
10068a66:	e016      	b.n	10068a96 <AES_CMAC_Encrypt_Append+0x1d2>
10068a68:	0081      	lsls	r1, r0, #2
10068a6a:	194a      	adds	r2, r1, r5
10068a6c:	1993      	adds	r3, r2, r6
10068a6e:	785a      	ldrb	r2, [r3, #1]
10068a70:	781f      	ldrb	r7, [r3, #0]
10068a72:	0212      	lsls	r2, r2, #8
10068a74:	433a      	orrs	r2, r7
10068a76:	789f      	ldrb	r7, [r3, #2]
10068a78:	ba52      	rev16	r2, r2
10068a7a:	0412      	lsls	r2, r2, #16
10068a7c:	023f      	lsls	r7, r7, #8
10068a7e:	433a      	orrs	r2, r7
10068a80:	78db      	ldrb	r3, [r3, #3]
10068a82:	466f      	mov	r7, sp
10068a84:	431a      	orrs	r2, r3
10068a86:	190b      	adds	r3, r1, r4
10068a88:	695b      	ldr	r3, [r3, #20]
10068a8a:	587f      	ldr	r7, [r7, r1]
10068a8c:	407b      	eors	r3, r7
10068a8e:	405a      	eors	r2, r3
10068a90:	ab04      	add	r3, sp, #16
10068a92:	505a      	str	r2, [r3, r1]
10068a94:	1c40      	adds	r0, r0, #1
10068a96:	4586      	cmp	lr, r0
10068a98:	dce6      	bgt.n	10068a68 <AES_CMAC_Encrypt_Append+0x1a4>
10068a9a:	0081      	lsls	r1, r0, #2
10068a9c:	190a      	adds	r2, r1, r4
10068a9e:	466b      	mov	r3, sp
10068aa0:	6952      	ldr	r2, [r2, #20]
10068aa2:	585b      	ldr	r3, [r3, r1]
10068aa4:	4667      	mov	r7, ip
10068aa6:	405a      	eors	r2, r3
10068aa8:	ab04      	add	r3, sp, #16
10068aaa:	505a      	str	r2, [r3, r1]
10068aac:	1a7f      	subs	r7, r7, r1
10068aae:	2200      	movs	r2, #0
10068ab0:	194b      	adds	r3, r1, r5
10068ab2:	46bc      	mov	ip, r7
10068ab4:	469e      	mov	lr, r3
10068ab6:	e00b      	b.n	10068ad0 <AES_CMAC_Encrypt_Append+0x20c>
10068ab8:	4673      	mov	r3, lr
10068aba:	189b      	adds	r3, r3, r2
10068abc:	5cf3      	ldrb	r3, [r6, r3]
10068abe:	00d7      	lsls	r7, r2, #3
10068ac0:	2518      	movs	r5, #24
10068ac2:	1bed      	subs	r5, r5, r7
10068ac4:	40ab      	lsls	r3, r5
10068ac6:	ad04      	add	r5, sp, #16
10068ac8:	586f      	ldr	r7, [r5, r1]
10068aca:	407b      	eors	r3, r7
10068acc:	506b      	str	r3, [r5, r1]
10068ace:	1c52      	adds	r2, r2, #1
10068ad0:	4594      	cmp	ip, r2
10068ad2:	dcf1      	bgt.n	10068ab8 <AES_CMAC_Encrypt_Append+0x1f4>
10068ad4:	2a00      	cmp	r2, #0
10068ad6:	d009      	beq.n	10068aec <AES_CMAC_Encrypt_Append+0x228>
10068ad8:	00d6      	lsls	r6, r2, #3
10068ada:	2218      	movs	r2, #24
10068adc:	ab04      	add	r3, sp, #16
10068ade:	1b96      	subs	r6, r2, r6
10068ae0:	585d      	ldr	r5, [r3, r1]
10068ae2:	2280      	movs	r2, #128	@ 0x80
10068ae4:	40b2      	lsls	r2, r6
10068ae6:	4055      	eors	r5, r2
10068ae8:	505d      	str	r5, [r3, r1]
10068aea:	e005      	b.n	10068af8 <AES_CMAC_Encrypt_Append+0x234>
10068aec:	aa04      	add	r2, sp, #16
10068aee:	5853      	ldr	r3, [r2, r1]
10068af0:	2501      	movs	r5, #1
10068af2:	07ed      	lsls	r5, r5, #31
10068af4:	406b      	eors	r3, r5
10068af6:	5053      	str	r3, [r2, r1]
10068af8:	ab04      	add	r3, sp, #16
10068afa:	466a      	mov	r2, sp
10068afc:	e005      	b.n	10068b0a <AES_CMAC_Encrypt_Append+0x246>
10068afe:	0081      	lsls	r1, r0, #2
10068b00:	190d      	adds	r5, r1, r4
10068b02:	696d      	ldr	r5, [r5, #20]
10068b04:	5856      	ldr	r6, [r2, r1]
10068b06:	4075      	eors	r5, r6
10068b08:	505d      	str	r5, [r3, r1]
10068b0a:	1c40      	adds	r0, r0, #1
10068b0c:	2804      	cmp	r0, #4
10068b0e:	dbf6      	blt.n	10068afe <AES_CMAC_Encrypt_Append+0x23a>
10068b10:	68a2      	ldr	r2, [r4, #8]
10068b12:	4618      	mov	r0, r3
10068b14:	9908      	ldr	r1, [sp, #32]
10068b16:	f7e6 fd57 	bl	1004f5c8 <AES_128_HW_enc>
10068b1a:	7920      	ldrb	r0, [r4, #4]
10068b1c:	2104      	movs	r1, #4
10068b1e:	4308      	orrs	r0, r1
10068b20:	7120      	strb	r0, [r4, #4]
10068b22:	2000      	movs	r0, #0
10068b24:	e6dc      	b.n	100688e0 <AES_CMAC_Encrypt_Append+0x1c>
10068b26:	0000      	.short	0x0000
10068b28:	00000c1d 	.word	0x00000c1d

10068b2c <AES_CMAC_Encrypt_Finish>:
10068b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10068b2e:	4616      	mov	r6, r2
10068b30:	460f      	mov	r7, r1
10068b32:	0004      	movs	r4, r0
10068b34:	d009      	beq.n	10068b4a <AES_CMAC_Encrypt_Finish+0x1e>
10068b36:	2e00      	cmp	r6, #0
10068b38:	d007      	beq.n	10068b4a <AES_CMAC_Encrypt_Finish+0x1e>
10068b3a:	4625      	mov	r5, r4
10068b3c:	3580      	adds	r5, #128	@ 0x80
10068b3e:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
10068b40:	1e40      	subs	r0, r0, #1
10068b42:	2810      	cmp	r0, #16
10068b44:	d304      	bcc.n	10068b50 <AES_CMAC_Encrypt_Finish+0x24>
10068b46:	4813      	ldr	r0, [pc, #76]	@ (10068b94 <AES_CMAC_Encrypt_Finish+0x68>)
10068b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10068b4a:	2061      	movs	r0, #97	@ 0x61
10068b4c:	0140      	lsls	r0, r0, #5
10068b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10068b50:	7920      	ldrb	r0, [r4, #4]
10068b52:	0640      	lsls	r0, r0, #25
10068b54:	d404      	bmi.n	10068b60 <AES_CMAC_Encrypt_Finish+0x34>
10068b56:	2200      	movs	r2, #0
10068b58:	4611      	mov	r1, r2
10068b5a:	4620      	mov	r0, r4
10068b5c:	f7ff feb2 	bl	100688c4 <AES_CMAC_Encrypt_Append>
10068b60:	7920      	ldrb	r0, [r4, #4]
10068b62:	2102      	movs	r1, #2
10068b64:	4308      	orrs	r0, r1
10068b66:	7120      	strb	r0, [r4, #4]
10068b68:	2000      	movs	r0, #0
10068b6a:	2118      	movs	r1, #24
10068b6c:	e00c      	b.n	10068b88 <AES_CMAC_Encrypt_Finish+0x5c>
10068b6e:	17c2      	asrs	r2, r0, #31
10068b70:	0f92      	lsrs	r2, r2, #30
10068b72:	1812      	adds	r2, r2, r0
10068b74:	0892      	lsrs	r2, r2, #2
10068b76:	0092      	lsls	r2, r2, #2
10068b78:	1912      	adds	r2, r2, r4
10068b7a:	0783      	lsls	r3, r0, #30
10068b7c:	6952      	ldr	r2, [r2, #20]
10068b7e:	0edb      	lsrs	r3, r3, #27
10068b80:	1acb      	subs	r3, r1, r3
10068b82:	40da      	lsrs	r2, r3
10068b84:	543a      	strb	r2, [r7, r0]
10068b86:	1c40      	adds	r0, r0, #1
10068b88:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
10068b8a:	4282      	cmp	r2, r0
10068b8c:	dcef      	bgt.n	10068b6e <AES_CMAC_Encrypt_Finish+0x42>
10068b8e:	2000      	movs	r0, #0
10068b90:	6032      	str	r2, [r6, #0]
10068b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10068b94:	00000c1f 	.word	0x00000c1f

10068b98 <AES_CMAC_Encrypt_Init>:
10068b98:	b510      	push	{r4, lr}
10068b9a:	0004      	movs	r4, r0
10068b9c:	d007      	beq.n	10068bae <AES_CMAC_Encrypt_Init+0x16>
10068b9e:	2302      	movs	r3, #2
10068ba0:	2200      	movs	r2, #0
10068ba2:	68a1      	ldr	r1, [r4, #8]
10068ba4:	f000 f81a 	bl	10068bdc <AESstdInitEnc>
10068ba8:	0001      	movs	r1, r0
10068baa:	d003      	beq.n	10068bb4 <AES_CMAC_Encrypt_Init+0x1c>
10068bac:	e00c      	b.n	10068bc8 <AES_CMAC_Encrypt_Init+0x30>
10068bae:	2061      	movs	r0, #97	@ 0x61
10068bb0:	0140      	lsls	r0, r0, #5
10068bb2:	bd10      	pop	{r4, pc}
10068bb4:	2000      	movs	r0, #0
10068bb6:	2210      	movs	r2, #16
10068bb8:	6122      	str	r2, [r4, #16]
10068bba:	4602      	mov	r2, r0
10068bbc:	0083      	lsls	r3, r0, #2
10068bbe:	191b      	adds	r3, r3, r4
10068bc0:	1c40      	adds	r0, r0, #1
10068bc2:	615a      	str	r2, [r3, #20]
10068bc4:	2804      	cmp	r0, #4
10068bc6:	dbf9      	blt.n	10068bbc <AES_CMAC_Encrypt_Init+0x24>
10068bc8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10068bca:	2810      	cmp	r0, #16
10068bcc:	d001      	beq.n	10068bd2 <AES_CMAC_Encrypt_Init+0x3a>
10068bce:	4802      	ldr	r0, [pc, #8]	@ (10068bd8 <AES_CMAC_Encrypt_Init+0x40>)
10068bd0:	bd10      	pop	{r4, pc}
10068bd2:	4608      	mov	r0, r1
10068bd4:	bd10      	pop	{r4, pc}
10068bd6:	0000      	.short	0x0000
10068bd8:	00000c1d 	.word	0x00000c1d

10068bdc <AESstdInitEnc>:
10068bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
10068bde:	2800      	cmp	r0, #0
10068be0:	d007      	beq.n	10068bf2 <AESstdInitEnc+0x16>
10068be2:	2900      	cmp	r1, #0
10068be4:	d005      	beq.n	10068bf2 <AESstdInitEnc+0x16>
10068be6:	075b      	lsls	r3, r3, #29
10068be8:	0f9c      	lsrs	r4, r3, #30
10068bea:	2a00      	cmp	r2, #0
10068bec:	d104      	bne.n	10068bf8 <AESstdInitEnc+0x1c>
10068bee:	2c01      	cmp	r4, #1
10068bf0:	d002      	beq.n	10068bf8 <AESstdInitEnc+0x1c>
10068bf2:	2061      	movs	r0, #97	@ 0x61
10068bf4:	0140      	lsls	r0, r0, #5
10068bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068bf8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
10068bfa:	2b10      	cmp	r3, #16
10068bfc:	d003      	beq.n	10068c06 <AESstdInitEnc+0x2a>
10068bfe:	2b18      	cmp	r3, #24
10068c00:	d001      	beq.n	10068c06 <AESstdInitEnc+0x2a>
10068c02:	2b20      	cmp	r3, #32
10068c04:	d105      	bne.n	10068c12 <AESstdInitEnc+0x36>
10068c06:	2c01      	cmp	r4, #1
10068c08:	d005      	beq.n	10068c16 <AESstdInitEnc+0x3a>
10068c0a:	6905      	ldr	r5, [r0, #16]
10068c0c:	1e6d      	subs	r5, r5, #1
10068c0e:	2d10      	cmp	r5, #16
10068c10:	d301      	bcc.n	10068c16 <AESstdInitEnc+0x3a>
10068c12:	481a      	ldr	r0, [pc, #104]	@ (10068c7c <AESstdInitEnc+0xa0>)
10068c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068c16:	2b10      	cmp	r3, #16
10068c18:	d002      	beq.n	10068c20 <AESstdInitEnc+0x44>
10068c1a:	4818      	ldr	r0, [pc, #96]	@ (10068c7c <AESstdInitEnc+0xa0>)
10068c1c:	1e80      	subs	r0, r0, #2
10068c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068c20:	60c2      	str	r2, [r0, #12]
10068c22:	7903      	ldrb	r3, [r0, #4]
10068c24:	25f9      	movs	r5, #249	@ 0xf9
10068c26:	402b      	ands	r3, r5
10068c28:	7103      	strb	r3, [r0, #4]
10068c2a:	2c01      	cmp	r4, #1
10068c2c:	d020      	beq.n	10068c70 <AESstdInitEnc+0x94>
10068c2e:	2300      	movs	r3, #0
10068c30:	461c      	mov	r4, r3
10068c32:	009d      	lsls	r5, r3, #2
10068c34:	182d      	adds	r5, r5, r0
10068c36:	1c5b      	adds	r3, r3, #1
10068c38:	616c      	str	r4, [r5, #20]
10068c3a:	2b04      	cmp	r3, #4
10068c3c:	dbf9      	blt.n	10068c32 <AESstdInitEnc+0x56>
10068c3e:	2300      	movs	r3, #0
10068c40:	e013      	b.n	10068c6a <AESstdInitEnc+0x8e>
10068c42:	17dc      	asrs	r4, r3, #31
10068c44:	0fa4      	lsrs	r4, r4, #30
10068c46:	18e4      	adds	r4, r4, r3
10068c48:	08a4      	lsrs	r4, r4, #2
10068c4a:	00a4      	lsls	r4, r4, #2
10068c4c:	1825      	adds	r5, r4, r0
10068c4e:	462e      	mov	r6, r5
10068c50:	3614      	adds	r6, #20
10068c52:	46b4      	mov	ip, r6
10068c54:	1b1c      	subs	r4, r3, r4
10068c56:	5cd6      	ldrb	r6, [r2, r3]
10068c58:	00e4      	lsls	r4, r4, #3
10068c5a:	2718      	movs	r7, #24
10068c5c:	696d      	ldr	r5, [r5, #20]
10068c5e:	1b3c      	subs	r4, r7, r4
10068c60:	40a6      	lsls	r6, r4
10068c62:	4335      	orrs	r5, r6
10068c64:	4666      	mov	r6, ip
10068c66:	1c5b      	adds	r3, r3, #1
10068c68:	6035      	str	r5, [r6, #0]
10068c6a:	6904      	ldr	r4, [r0, #16]
10068c6c:	429c      	cmp	r4, r3
10068c6e:	dce8      	bgt.n	10068c42 <AESstdInitEnc+0x66>
10068c70:	7902      	ldrb	r2, [r0, #4]
10068c72:	07d2      	lsls	r2, r2, #31
10068c74:	d100      	bne.n	10068c78 <AESstdInitEnc+0x9c>
10068c76:	6081      	str	r1, [r0, #8]
10068c78:	2000      	movs	r0, #0
10068c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068c7c:	00000c1f 	.word	0x00000c1f

Disassembly of section .init:

10068c80 <_init>:
10068c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10068c82:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10068c84 <_fini>:
10068c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10068c86:	46c0      	nop			@ (mov r8, r8)
