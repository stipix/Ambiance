
WildlifeSource.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .intvec       000000c0  10040000  10040000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000288d4  100400c0  100400c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init         00000004  10068994  10068994  00029994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .fini         00000004  10068998  10068998  00029998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000fb0  1006899c  1006899c  0002999c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  1006994c  1006994c  0002a94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000248  20002c74  10069954  0002ac74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ram_preamble 0000002c  20000004  20000004  0002b004  2**2
                  ALLOC
  8 .ram_preamble_2 00000028  20000034  20000034  0002b004  2**2
                  ALLOC
  9 .bss.blueRAM  000000d4  200000c0  200000c0  0002b004  2**2
                  ALLOC
 10 .bss          00002ae0  20000194  20000194  0002b004  2**2
                  ALLOC
 11 .noinit       0000223c  20002ebc  10069b9c  0002aebc  2**2
                  ALLOC
 12 .ota_region_end 00000000  10069b9c  10069b9c  0002aebc  2**0
                  CONTENTS
 13 .heap         00000000  200050f8  200050f8  0002aebc  2**0
                  CONTENTS
 14 .stack        00000c00  20005400  20005400  0002b400  2**0
                  ALLOC
 15 .rom_info     00000000  10000000  10000000  0002aebc  2**0
                  CONTENTS
 16 .ARM.attributes 0000002c  00000000  00000000  0002aebc  2**0
                  CONTENTS, READONLY
 17 .debug_info   00032bf2  00000000  00000000  0002aee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00008b68  00000000  00000000  0005dada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003918  00000000  00000000  00066648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002b22a  00000000  00000000  00069f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00044f7c  00000000  00000000  0009518a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d9ed8  00000000  00000000  000da106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      0000023b  00000000  00000000  001b3fde  2**0
                  CONTENTS, READONLY
 24 .arm_vfe_header 00000004  00000000  00000000  001b421c  2**2
                  CONTENTS, READONLY
 25 .debug_rnglists 00002b20  00000000  00000000  001b4220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_frame  0000de24  00000000  00000000  001b6d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 000000f4  00000000  00000000  001c4b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

100400c0 <blue_unit_conversion>:
                __CODE__
                __THUMB__
                __EXPORT__ blue_unit_conversion

EXPORT_FUNC(blue_unit_conversion)
                  PUSH    {r4, lr}
100400c0:	b510      	push	{r4, lr}
                  CMP     r0, r2
100400c2:	4290      	cmp	r0, r2
                  BLS     mul32
100400c4:	d916      	bls.n	100400f4 <mul32>
                  UXTH    r2, r1
100400c6:	b28a      	uxth	r2, r1
                  LSRS    r3, r0, #16
100400c8:	0c03      	lsrs	r3, r0, #16
                  LSRS    r1, r1, #16
100400ca:	0c09      	lsrs	r1, r1, #16
                  MOV     r4, r1
100400cc:	460c      	mov	r4, r1
                  MULS    r1, r3, r1
100400ce:	4359      	muls	r1, r3
                  UXTH    r0, r0
100400d0:	b280      	uxth	r0, r0
                  MULS    r3, r2, r3
100400d2:	4353      	muls	r3, r2
                  MULS    r4, r0, r4
100400d4:	4344      	muls	r4, r0
                  MULS    r0, r2, r0
100400d6:	4350      	muls	r0, r2
                  ADDS    r3, r3, r4
100400d8:	191b      	adds	r3, r3, r4
                  LSLS    r2, r3, #16
100400da:	041a      	lsls	r2, r3, #16
                  LSRS    r3, r3, #16
100400dc:	0c1b      	lsrs	r3, r3, #16
                  ADDS    r0, r2, r0
100400de:	1810      	adds	r0, r2, r0
                  ADCS    r1, r3
100400e0:	4159      	adcs	r1, r3

                  MOVS    r2, #128
100400e2:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400e4:	0352      	lsls	r2, r2, #13
                  MOVS    r3, #0
100400e6:	2300      	movs	r3, #0
                  ADDS    r2, r2, r0
100400e8:	1812      	adds	r2, r2, r0
                  ADCS    r3, r1
100400ea:	414b      	adcs	r3, r1
                  LSRS    r2, r2, #21
100400ec:	0d52      	lsrs	r2, r2, #21
                  LSLS    r0, r3, #11
100400ee:	02d8      	lsls	r0, r3, #11
                  ORRS    r0, r2
100400f0:	4310      	orrs	r0, r2

                  POP {r4, pc}
100400f2:	bd10      	pop	{r4, pc}

100400f4 <mul32>:

                  ENDFUNC

EXPORT_FUNC(mul32)
                  MULS    r0, r1, r0
100400f4:	4348      	muls	r0, r1
                  MOVS    r2, #128
100400f6:	2280      	movs	r2, #128	@ 0x80
                  LSLS    r2, r2, #13
100400f8:	0352      	lsls	r2, r2, #13
                  ADDS    r2, r2, r0
100400fa:	1812      	adds	r2, r2, r0
                  LSRS    r2, r2, #21
100400fc:	0d52      	lsrs	r2, r2, #21
                  MOV     r0, r2
100400fe:	4610      	mov	r0, r2

                  POP {r4, pc}
10040100:	bd10      	pop	{r4, pc}
10040102:	46c0      	nop			@ (mov r8, r8)

10040104 <Osal_MemCpy>:
                __CODE__
                __THUMB__
                __EXPORT__ Osal_MemCpy

EXPORT_FUNC(Osal_MemCpy)
                LSLS	R3, R1, #30
10040104:	078b      	lsls	r3, r1, #30
                BEQ	    memcpy_1
10040106:	d007      	beq.n	10040118 <memcpy_1>

10040108 <memcpy_byte>:
LABEL(memcpy_byte) /* Copy bytes until src is aligned */
                SUBS	R2, R2, #1
10040108:	3a01      	subs	r2, #1
                BCC	    memcpy_exit
1004010a:	d322      	bcc.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004010c:	780b      	ldrb	r3, [r1, #0]
      	        ADDS	R1, R1, #1
1004010e:	3101      	adds	r1, #1
      	        STRB	R3, [R0]
10040110:	7003      	strb	r3, [r0, #0]
                ADDS	R0, R0, #1
10040112:	3001      	adds	r0, #1
                LSLS	R3, R1, #30
10040114:	078b      	lsls	r3, r1, #30
                BNE	    memcpy_byte
10040116:	d1f7      	bne.n	10040108 <memcpy_byte>

10040118 <memcpy_1>:
LABEL(memcpy_1)
                LSLS	R3, R0, #30
10040118:	0783      	lsls	r3, r0, #30
                BEQ	    memcpy4
1004011a:	d030      	beq.n	1004017e <memcpy4>
                CMN	    R3, R3
1004011c:	42db      	cmn	r3, r3
                BEQ	    memcpy_7
1004011e:	d019      	beq.n	10040154 <memcpy_7>
                SUBS	R0, R0, #1
10040120:	3801      	subs	r0, #1
                SUBS	R2, R2, #4
10040122:	3a04      	subs	r2, #4
                BCC	    memcpy_3
10040124:	d308      	bcc.n	10040138 <memcpy_3>

10040126 <memcpy_2>:
LABEL(memcpy_2)  /* Load one word from src and write one byte, one half-word and another byte to dst */
                LDM	    R1!, {R3}
10040126:	c908      	ldmia	r1!, {r3}
                STRB	R3, [R0, #1]
10040128:	7043      	strb	r3, [r0, #1]
                LSRS	R3, R3, #8
1004012a:	0a1b      	lsrs	r3, r3, #8
                STRH	R3, [R0, #2]
1004012c:	8043      	strh	r3, [r0, #2]
                LSRS	R3, R3, #16
1004012e:	0c1b      	lsrs	r3, r3, #16
                STRB	R3, [R0, #4]
10040130:	7103      	strb	r3, [r0, #4]
                ADDS	R0, R0, #4
10040132:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040134:	3a04      	subs	r2, #4
                BCS	    memcpy_2
10040136:	d2f6      	bcs.n	10040126 <memcpy_2>

10040138 <memcpy_3>:
LABEL(memcpy_3)
                LSLS	R2, R2, #31
10040138:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_5
1004013a:	d307      	bcc.n	1004014c <memcpy_5>
                LDRH	R3, [R1]
1004013c:	880b      	ldrh	r3, [r1, #0]
                STRB	R3, [R0, #1]
1004013e:	7043      	strb	r3, [r0, #1]
                BEQ	    memcpy_4
10040140:	d001      	beq.n	10040146 <memcpy_4>
                LDRB	R2, [R1, #2]
10040142:	788a      	ldrb	r2, [r1, #2]
                STRB	R2, [R0, #3]
10040144:	70c2      	strb	r2, [r0, #3]

10040146 <memcpy_4>:
LABEL(memcpy_4)
                LSRS	R3, R3, #8
10040146:	0a1b      	lsrs	r3, r3, #8
                STRB	R3, [R0, #2]
10040148:	7083      	strb	r3, [r0, #2]
                BX	    LR
1004014a:	4770      	bx	lr

1004014c <memcpy_5>:
LABEL(memcpy_5)
                BEQ	    memcpy_exit
1004014c:	d001      	beq.n	10040152 <memcpy_exit>
                LDRB	R3, [R1]
1004014e:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0, #1]
10040150:	7043      	strb	r3, [r0, #1]

10040152 <memcpy_exit>:
LABEL(memcpy_exit)
                BX	    LR
10040152:	4770      	bx	lr

10040154 <memcpy_7>:
LABEL(memcpy_7)
                SUBS	R2, R2, #4
10040154:	3a04      	subs	r2, #4
                BCC	    memcpy_9
10040156:	d306      	bcc.n	10040166 <memcpy_9>

10040158 <memcpy_8>:
LABEL(memcpy_8)  /* Load one word from src and write half-words to dst */
                LDM	    R1!, {R3}
10040158:	c908      	ldmia	r1!, {r3}
                STRH	R3, [R0]
1004015a:	8003      	strh	r3, [r0, #0]
                LSRS	R3, R3, #16
1004015c:	0c1b      	lsrs	r3, r3, #16
                STRH	R3, [R0, #2]
1004015e:	8043      	strh	r3, [r0, #2]
                ADDS	R0, R0, #4
10040160:	3004      	adds	r0, #4
                SUBS	R2, R2, #4
10040162:	3a04      	subs	r2, #4
                BCS	    memcpy_8
10040164:	d2f8      	bcs.n	10040158 <memcpy_8>

10040166 <memcpy_9>:
LABEL(memcpy_9)
                LSLS	R2, R2, #31
10040166:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy_10
10040168:	d305      	bcc.n	10040176 <memcpy_10>
                LDRH	R3, [R1]
1004016a:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
1004016c:	8003      	strh	r3, [r0, #0]
                BEQ	    memcpy_11
1004016e:	d005      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1, #2]
10040170:	788b      	ldrb	r3, [r1, #2]
                STRB	R3, [R0, #2]
10040172:	7083      	strb	r3, [r0, #2]
                BX	    LR
10040174:	4770      	bx	lr

10040176 <memcpy_10>:
LABEL(memcpy_10)
                BEQ	    memcpy_11
10040176:	d001      	beq.n	1004017c <memcpy_11>
                LDRB	R3, [R1]
10040178:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
1004017a:	7003      	strb	r3, [r0, #0]

1004017c <memcpy_11>:
LABEL(memcpy_11)
                BX	    LR
1004017c:	4770      	bx	lr

1004017e <memcpy4>:

LABEL(memcpy4)
                PUSH	{R4-R6}
1004017e:	b470      	push	{r4, r5, r6}
                SUBS	R2, #16
10040180:	3a10      	subs	r2, #16
                BCC	    memcpy4_2words
10040182:	d303      	bcc.n	1004018c <memcpy4_2words>

10040184 <memcpy4_4words>:
LABEL(memcpy4_4words)
                LDM 	R1!, {R3-R6}
10040184:	c978      	ldmia	r1!, {r3, r4, r5, r6}
                STM	    R0!, {R3-R6}
10040186:	c078      	stmia	r0!, {r3, r4, r5, r6}
                SUBS	R2, #16
10040188:	3a10      	subs	r2, #16
                BCS	    memcpy4_4words
1004018a:	d2fb      	bcs.n	10040184 <memcpy4_4words>

1004018c <memcpy4_2words>:
LABEL(memcpy4_2words)
                LSLS	R3, R2, #29
1004018c:	0753      	lsls	r3, r2, #29
                BCC	    memcpy4_word
1004018e:	d301      	bcc.n	10040194 <memcpy4_word>
                LDM	    R1!, {R3, R4}
10040190:	c918      	ldmia	r1!, {r3, r4}
                STM	    R0!, {R3, R4}
10040192:	c018      	stmia	r0!, {r3, r4}

10040194 <memcpy4_word>:
LABEL(memcpy4_word)
                BPL 	memcpy4_halfword
10040194:	d501      	bpl.n	1004019a <memcpy4_halfword>
                LDM	    R1!, {R3}
10040196:	c908      	ldmia	r1!, {r3}
                STM	    R0!, {R3}
10040198:	c008      	stmia	r0!, {r3}

1004019a <memcpy4_halfword>:
LABEL(memcpy4_halfword)
                LSLS	R2, R2, #31
1004019a:	07d2      	lsls	r2, r2, #31
                BCC	    memcpy4_byte
1004019c:	d304      	bcc.n	100401a8 <memcpy4_byte>
                LDRH	R3, [R1]
1004019e:	880b      	ldrh	r3, [r1, #0]
                STRH	R3, [R0]
100401a0:	8003      	strh	r3, [r0, #0]
                ADDS	R0, R0, #2
100401a2:	3002      	adds	r0, #2
                ADDS	R1, R1, #2
100401a4:	3102      	adds	r1, #2
                CMP	    R2, #0
100401a6:	2a00      	cmp	r2, #0

100401a8 <memcpy4_byte>:
LABEL(memcpy4_byte)
                BPL	    memcpy4_exit
100401a8:	d501      	bpl.n	100401ae <memcpy4_exit>
                LDRB	R3, [R1]
100401aa:	780b      	ldrb	r3, [r1, #0]
                STRB	R3, [R0]
100401ac:	7003      	strb	r3, [r0, #0]

100401ae <memcpy4_exit>:
LABEL(memcpy4_exit)
                POP	    {R4-R6}
100401ae:	bc70      	pop	{r4, r5, r6}
                BX	    LR
100401b0:	4770      	bx	lr
100401b2:	46c0      	nop			@ (mov r8, r8)

100401b4 <CPUcontextSave>:
                __THUMB__
                __EXPORT__ CPUcontextSave
                __EXPORT__ CPUcontextRestore
                __IMPORT__ RAM_VR
EXPORT_FUNC(CPUcontextSave)
                MRS    R2, CONTROL             /* load the CONTROL register into R2 */
100401b4:	f3ef 8214 	mrs	r2, CONTROL
                MRS    R1, PSP                 /* load the process stack pointer into R1 */
100401b8:	f3ef 8109 	mrs	r1, PSP
                LDR    R0, =0
100401bc:	4815      	ldr	r0, [pc, #84]	@ (10040214 <CPUcontextRestore+0x2c>)
                MSR    CONTROL, R0             /* Switch to Main Stack Pointer */
100401be:	f380 8814 	msr	CONTROL, r0
                ISB
100401c2:	f3bf 8f6f 	isb	sy

                PUSH   { r4 - r7, lr }         /* store R4-R7 and LR (5 words) onto the stack */
100401c6:	b5f0      	push	{r4, r5, r6, r7, lr}
                MOV    R3, R8                  /* mov thread {r8 - r12} to {r3 - r7} */
100401c8:	4643      	mov	r3, r8
                MOV    R4, R9
100401ca:	464c      	mov	r4, r9
                MOV    R5, R10
100401cc:	4655      	mov	r5, sl
                MOV    R6, R11
100401ce:	465e      	mov	r6, fp
                MOV    R7, R12
100401d0:	4667      	mov	r7, ip
                PUSH   {R3-R7}                 /* store R8-R12 (5 words) onto the stack */
100401d2:	b4f8      	push	{r3, r4, r5, r6, r7}

                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
100401d4:	4c10      	ldr	r4, [pc, #64]	@ (10040218 <CPUcontextRestore+0x30>)
                MRS    R3, MSP                 /* load the stack pointer into R3 */
100401d6:	f3ef 8308 	mrs	r3, MSP
                STR    R3, [R4,#4]             /* store the MSP into RAM_VR.SavedMSP (second word of the structure) */
100401da:	6063      	str	r3, [r4, #4]

                PUSH  { r1, r2 }               /*  store PSP, CONTROL */
100401dc:	b406      	push	{r1, r2}

                DSB
100401de:	f3bf 8f4f 	dsb	sy
                WFI                            /* all saved, trigger deep sleep */
100401e2:	bf30      	wfi

                NOP                            /* NOP instructions added if an interrupt (NOT WAKEUP SOURCE) is raised */
100401e4:	46c0      	nop			@ (mov r8, r8)
                NOP                            /* the device gates/stop the CPU clock 2 system clock cycles after this WFI */
100401e6:	46c0      	nop			@ (mov r8, r8)

100401e8 <CPUcontextRestore>:
EXPORT_FUNC(CPUcontextRestore)
                /* Even if we fall through the WFI instruction, we will immediately
                 * execute a context restore and end up where we left off with no
                 * ill effects.  Normally at this point the core will either be
                 * powered off or reset (depending on the deep sleep level). */
                LDR    R4, =RAM_VR              /* load address of RAM_VR into R4 */
100401e8:	4c0b      	ldr	r4, [pc, #44]	@ (10040218 <CPUcontextRestore+0x30>)
                LDR    R4, [R4,#4]              /* load the MSP from RAM_VR.SavedMSP (second word of the structure) */
100401ea:	6864      	ldr	r4, [r4, #4]
                MSR    MSP, R4                  /* restore the MSP from R4 */
100401ec:	f384 8808 	msr	MSP, r4

                SUB    SP, #0x8
100401f0:	b082      	sub	sp, #8
                POP    { R0, R1 }               /* load PSP from the stack in R0, and  load CONTROL register from the stack in R1 */
100401f2:	bc03      	pop	{r0, r1}

                POP    { R3-R7 }                /* load R8-R12 (5 words) from the stack */
100401f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
                MOV    R8, R3                   /* mov {r3 - r7} to {r8 - r12} */
100401f6:	4698      	mov	r8, r3
                MOV    R9, R4
100401f8:	46a1      	mov	r9, r4
                MOV    R10, R5
100401fa:	46aa      	mov	sl, r5
                MOV    R11, R6
100401fc:	46b3      	mov	fp, r6
                MOV    R12, R7
100401fe:	46bc      	mov	ip, r7
                POP    { R4 - R7 }              /* load R4-R7 (4 words) from the stack */
10040200:	bcf0      	pop	{r4, r5, r6, r7}
                POP    { R2 }                   /* load LR from the stack */
10040202:	bc04      	pop	{r2}

                MSR   PSP, R0                   /* restore PSP from R0 */
10040204:	f380 8809 	msr	PSP, r0
                MSR   CONTROL , R1              /* restore CONTROL register from R1 */
10040208:	f381 8814 	msr	CONTROL, r1
                ISB
1004020c:	f3bf 8f6f 	isb	sy

                BX  R2                          /*load PC (1 words) from the stack */
10040210:	4710      	bx	r2
10040212:	46c0      	nop			@ (mov r8, r8)
                LDR    R0, =0
10040214:	00000000 	.word	0x00000000
                LDR    R4, =RAM_VR             /* load address of struct RAM_VR into R4 */
10040218:	20000004 	.word	0x20000004

1004021c <strlen>:
1004021c:	2300      	movs	r3, #0
1004021e:	5cc2      	ldrb	r2, [r0, r3]
10040220:	3301      	adds	r3, #1
10040222:	2a00      	cmp	r2, #0
10040224:	d1fb      	bne.n	1004021e <strlen+0x2>
10040226:	1e58      	subs	r0, r3, #1
10040228:	4770      	bx	lr
	...

1004022c <__gnu_thumb1_case_shi>:
1004022c:	b403      	push	{r0, r1}
1004022e:	4671      	mov	r1, lr
10040230:	0849      	lsrs	r1, r1, #1
10040232:	0040      	lsls	r0, r0, #1
10040234:	0049      	lsls	r1, r1, #1
10040236:	5e09      	ldrsh	r1, [r1, r0]
10040238:	0049      	lsls	r1, r1, #1
1004023a:	448e      	add	lr, r1
1004023c:	bc03      	pop	{r0, r1}
1004023e:	4770      	bx	lr

10040240 <__udivsi3>:
10040240:	2200      	movs	r2, #0
10040242:	0843      	lsrs	r3, r0, #1
10040244:	428b      	cmp	r3, r1
10040246:	d374      	bcc.n	10040332 <__udivsi3+0xf2>
10040248:	0903      	lsrs	r3, r0, #4
1004024a:	428b      	cmp	r3, r1
1004024c:	d35f      	bcc.n	1004030e <__udivsi3+0xce>
1004024e:	0a03      	lsrs	r3, r0, #8
10040250:	428b      	cmp	r3, r1
10040252:	d344      	bcc.n	100402de <__udivsi3+0x9e>
10040254:	0b03      	lsrs	r3, r0, #12
10040256:	428b      	cmp	r3, r1
10040258:	d328      	bcc.n	100402ac <__udivsi3+0x6c>
1004025a:	0c03      	lsrs	r3, r0, #16
1004025c:	428b      	cmp	r3, r1
1004025e:	d30d      	bcc.n	1004027c <__udivsi3+0x3c>
10040260:	22ff      	movs	r2, #255	@ 0xff
10040262:	0209      	lsls	r1, r1, #8
10040264:	ba12      	rev	r2, r2
10040266:	0c03      	lsrs	r3, r0, #16
10040268:	428b      	cmp	r3, r1
1004026a:	d302      	bcc.n	10040272 <__udivsi3+0x32>
1004026c:	1212      	asrs	r2, r2, #8
1004026e:	0209      	lsls	r1, r1, #8
10040270:	d065      	beq.n	1004033e <__udivsi3+0xfe>
10040272:	0b03      	lsrs	r3, r0, #12
10040274:	428b      	cmp	r3, r1
10040276:	d319      	bcc.n	100402ac <__udivsi3+0x6c>
10040278:	e000      	b.n	1004027c <__udivsi3+0x3c>
1004027a:	0a09      	lsrs	r1, r1, #8
1004027c:	0bc3      	lsrs	r3, r0, #15
1004027e:	428b      	cmp	r3, r1
10040280:	d301      	bcc.n	10040286 <__udivsi3+0x46>
10040282:	03cb      	lsls	r3, r1, #15
10040284:	1ac0      	subs	r0, r0, r3
10040286:	4152      	adcs	r2, r2
10040288:	0b83      	lsrs	r3, r0, #14
1004028a:	428b      	cmp	r3, r1
1004028c:	d301      	bcc.n	10040292 <__udivsi3+0x52>
1004028e:	038b      	lsls	r3, r1, #14
10040290:	1ac0      	subs	r0, r0, r3
10040292:	4152      	adcs	r2, r2
10040294:	0b43      	lsrs	r3, r0, #13
10040296:	428b      	cmp	r3, r1
10040298:	d301      	bcc.n	1004029e <__udivsi3+0x5e>
1004029a:	034b      	lsls	r3, r1, #13
1004029c:	1ac0      	subs	r0, r0, r3
1004029e:	4152      	adcs	r2, r2
100402a0:	0b03      	lsrs	r3, r0, #12
100402a2:	428b      	cmp	r3, r1
100402a4:	d301      	bcc.n	100402aa <__udivsi3+0x6a>
100402a6:	030b      	lsls	r3, r1, #12
100402a8:	1ac0      	subs	r0, r0, r3
100402aa:	4152      	adcs	r2, r2
100402ac:	0ac3      	lsrs	r3, r0, #11
100402ae:	428b      	cmp	r3, r1
100402b0:	d301      	bcc.n	100402b6 <__udivsi3+0x76>
100402b2:	02cb      	lsls	r3, r1, #11
100402b4:	1ac0      	subs	r0, r0, r3
100402b6:	4152      	adcs	r2, r2
100402b8:	0a83      	lsrs	r3, r0, #10
100402ba:	428b      	cmp	r3, r1
100402bc:	d301      	bcc.n	100402c2 <__udivsi3+0x82>
100402be:	028b      	lsls	r3, r1, #10
100402c0:	1ac0      	subs	r0, r0, r3
100402c2:	4152      	adcs	r2, r2
100402c4:	0a43      	lsrs	r3, r0, #9
100402c6:	428b      	cmp	r3, r1
100402c8:	d301      	bcc.n	100402ce <__udivsi3+0x8e>
100402ca:	024b      	lsls	r3, r1, #9
100402cc:	1ac0      	subs	r0, r0, r3
100402ce:	4152      	adcs	r2, r2
100402d0:	0a03      	lsrs	r3, r0, #8
100402d2:	428b      	cmp	r3, r1
100402d4:	d301      	bcc.n	100402da <__udivsi3+0x9a>
100402d6:	020b      	lsls	r3, r1, #8
100402d8:	1ac0      	subs	r0, r0, r3
100402da:	4152      	adcs	r2, r2
100402dc:	d2cd      	bcs.n	1004027a <__udivsi3+0x3a>
100402de:	09c3      	lsrs	r3, r0, #7
100402e0:	428b      	cmp	r3, r1
100402e2:	d301      	bcc.n	100402e8 <__udivsi3+0xa8>
100402e4:	01cb      	lsls	r3, r1, #7
100402e6:	1ac0      	subs	r0, r0, r3
100402e8:	4152      	adcs	r2, r2
100402ea:	0983      	lsrs	r3, r0, #6
100402ec:	428b      	cmp	r3, r1
100402ee:	d301      	bcc.n	100402f4 <__udivsi3+0xb4>
100402f0:	018b      	lsls	r3, r1, #6
100402f2:	1ac0      	subs	r0, r0, r3
100402f4:	4152      	adcs	r2, r2
100402f6:	0943      	lsrs	r3, r0, #5
100402f8:	428b      	cmp	r3, r1
100402fa:	d301      	bcc.n	10040300 <__udivsi3+0xc0>
100402fc:	014b      	lsls	r3, r1, #5
100402fe:	1ac0      	subs	r0, r0, r3
10040300:	4152      	adcs	r2, r2
10040302:	0903      	lsrs	r3, r0, #4
10040304:	428b      	cmp	r3, r1
10040306:	d301      	bcc.n	1004030c <__udivsi3+0xcc>
10040308:	010b      	lsls	r3, r1, #4
1004030a:	1ac0      	subs	r0, r0, r3
1004030c:	4152      	adcs	r2, r2
1004030e:	08c3      	lsrs	r3, r0, #3
10040310:	428b      	cmp	r3, r1
10040312:	d301      	bcc.n	10040318 <__udivsi3+0xd8>
10040314:	00cb      	lsls	r3, r1, #3
10040316:	1ac0      	subs	r0, r0, r3
10040318:	4152      	adcs	r2, r2
1004031a:	0883      	lsrs	r3, r0, #2
1004031c:	428b      	cmp	r3, r1
1004031e:	d301      	bcc.n	10040324 <__udivsi3+0xe4>
10040320:	008b      	lsls	r3, r1, #2
10040322:	1ac0      	subs	r0, r0, r3
10040324:	4152      	adcs	r2, r2
10040326:	0843      	lsrs	r3, r0, #1
10040328:	428b      	cmp	r3, r1
1004032a:	d301      	bcc.n	10040330 <__udivsi3+0xf0>
1004032c:	004b      	lsls	r3, r1, #1
1004032e:	1ac0      	subs	r0, r0, r3
10040330:	4152      	adcs	r2, r2
10040332:	1a41      	subs	r1, r0, r1
10040334:	d200      	bcs.n	10040338 <__udivsi3+0xf8>
10040336:	4601      	mov	r1, r0
10040338:	4152      	adcs	r2, r2
1004033a:	4610      	mov	r0, r2
1004033c:	4770      	bx	lr
1004033e:	e7ff      	b.n	10040340 <__udivsi3+0x100>
10040340:	b501      	push	{r0, lr}
10040342:	2000      	movs	r0, #0
10040344:	f000 f8f0 	bl	10040528 <__aeabi_idiv0>
10040348:	bd02      	pop	{r1, pc}
1004034a:	46c0      	nop			@ (mov r8, r8)

1004034c <__aeabi_uidivmod>:
1004034c:	2900      	cmp	r1, #0
1004034e:	d0f7      	beq.n	10040340 <__udivsi3+0x100>
10040350:	e776      	b.n	10040240 <__udivsi3>
10040352:	4770      	bx	lr

10040354 <__divsi3>:
10040354:	4603      	mov	r3, r0
10040356:	430b      	orrs	r3, r1
10040358:	d47f      	bmi.n	1004045a <__divsi3+0x106>
1004035a:	2200      	movs	r2, #0
1004035c:	0843      	lsrs	r3, r0, #1
1004035e:	428b      	cmp	r3, r1
10040360:	d374      	bcc.n	1004044c <__divsi3+0xf8>
10040362:	0903      	lsrs	r3, r0, #4
10040364:	428b      	cmp	r3, r1
10040366:	d35f      	bcc.n	10040428 <__divsi3+0xd4>
10040368:	0a03      	lsrs	r3, r0, #8
1004036a:	428b      	cmp	r3, r1
1004036c:	d344      	bcc.n	100403f8 <__divsi3+0xa4>
1004036e:	0b03      	lsrs	r3, r0, #12
10040370:	428b      	cmp	r3, r1
10040372:	d328      	bcc.n	100403c6 <__divsi3+0x72>
10040374:	0c03      	lsrs	r3, r0, #16
10040376:	428b      	cmp	r3, r1
10040378:	d30d      	bcc.n	10040396 <__divsi3+0x42>
1004037a:	22ff      	movs	r2, #255	@ 0xff
1004037c:	0209      	lsls	r1, r1, #8
1004037e:	ba12      	rev	r2, r2
10040380:	0c03      	lsrs	r3, r0, #16
10040382:	428b      	cmp	r3, r1
10040384:	d302      	bcc.n	1004038c <__divsi3+0x38>
10040386:	1212      	asrs	r2, r2, #8
10040388:	0209      	lsls	r1, r1, #8
1004038a:	d065      	beq.n	10040458 <__divsi3+0x104>
1004038c:	0b03      	lsrs	r3, r0, #12
1004038e:	428b      	cmp	r3, r1
10040390:	d319      	bcc.n	100403c6 <__divsi3+0x72>
10040392:	e000      	b.n	10040396 <__divsi3+0x42>
10040394:	0a09      	lsrs	r1, r1, #8
10040396:	0bc3      	lsrs	r3, r0, #15
10040398:	428b      	cmp	r3, r1
1004039a:	d301      	bcc.n	100403a0 <__divsi3+0x4c>
1004039c:	03cb      	lsls	r3, r1, #15
1004039e:	1ac0      	subs	r0, r0, r3
100403a0:	4152      	adcs	r2, r2
100403a2:	0b83      	lsrs	r3, r0, #14
100403a4:	428b      	cmp	r3, r1
100403a6:	d301      	bcc.n	100403ac <__divsi3+0x58>
100403a8:	038b      	lsls	r3, r1, #14
100403aa:	1ac0      	subs	r0, r0, r3
100403ac:	4152      	adcs	r2, r2
100403ae:	0b43      	lsrs	r3, r0, #13
100403b0:	428b      	cmp	r3, r1
100403b2:	d301      	bcc.n	100403b8 <__divsi3+0x64>
100403b4:	034b      	lsls	r3, r1, #13
100403b6:	1ac0      	subs	r0, r0, r3
100403b8:	4152      	adcs	r2, r2
100403ba:	0b03      	lsrs	r3, r0, #12
100403bc:	428b      	cmp	r3, r1
100403be:	d301      	bcc.n	100403c4 <__divsi3+0x70>
100403c0:	030b      	lsls	r3, r1, #12
100403c2:	1ac0      	subs	r0, r0, r3
100403c4:	4152      	adcs	r2, r2
100403c6:	0ac3      	lsrs	r3, r0, #11
100403c8:	428b      	cmp	r3, r1
100403ca:	d301      	bcc.n	100403d0 <__divsi3+0x7c>
100403cc:	02cb      	lsls	r3, r1, #11
100403ce:	1ac0      	subs	r0, r0, r3
100403d0:	4152      	adcs	r2, r2
100403d2:	0a83      	lsrs	r3, r0, #10
100403d4:	428b      	cmp	r3, r1
100403d6:	d301      	bcc.n	100403dc <__divsi3+0x88>
100403d8:	028b      	lsls	r3, r1, #10
100403da:	1ac0      	subs	r0, r0, r3
100403dc:	4152      	adcs	r2, r2
100403de:	0a43      	lsrs	r3, r0, #9
100403e0:	428b      	cmp	r3, r1
100403e2:	d301      	bcc.n	100403e8 <__divsi3+0x94>
100403e4:	024b      	lsls	r3, r1, #9
100403e6:	1ac0      	subs	r0, r0, r3
100403e8:	4152      	adcs	r2, r2
100403ea:	0a03      	lsrs	r3, r0, #8
100403ec:	428b      	cmp	r3, r1
100403ee:	d301      	bcc.n	100403f4 <__divsi3+0xa0>
100403f0:	020b      	lsls	r3, r1, #8
100403f2:	1ac0      	subs	r0, r0, r3
100403f4:	4152      	adcs	r2, r2
100403f6:	d2cd      	bcs.n	10040394 <__divsi3+0x40>
100403f8:	09c3      	lsrs	r3, r0, #7
100403fa:	428b      	cmp	r3, r1
100403fc:	d301      	bcc.n	10040402 <__divsi3+0xae>
100403fe:	01cb      	lsls	r3, r1, #7
10040400:	1ac0      	subs	r0, r0, r3
10040402:	4152      	adcs	r2, r2
10040404:	0983      	lsrs	r3, r0, #6
10040406:	428b      	cmp	r3, r1
10040408:	d301      	bcc.n	1004040e <__divsi3+0xba>
1004040a:	018b      	lsls	r3, r1, #6
1004040c:	1ac0      	subs	r0, r0, r3
1004040e:	4152      	adcs	r2, r2
10040410:	0943      	lsrs	r3, r0, #5
10040412:	428b      	cmp	r3, r1
10040414:	d301      	bcc.n	1004041a <__divsi3+0xc6>
10040416:	014b      	lsls	r3, r1, #5
10040418:	1ac0      	subs	r0, r0, r3
1004041a:	4152      	adcs	r2, r2
1004041c:	0903      	lsrs	r3, r0, #4
1004041e:	428b      	cmp	r3, r1
10040420:	d301      	bcc.n	10040426 <__divsi3+0xd2>
10040422:	010b      	lsls	r3, r1, #4
10040424:	1ac0      	subs	r0, r0, r3
10040426:	4152      	adcs	r2, r2
10040428:	08c3      	lsrs	r3, r0, #3
1004042a:	428b      	cmp	r3, r1
1004042c:	d301      	bcc.n	10040432 <__divsi3+0xde>
1004042e:	00cb      	lsls	r3, r1, #3
10040430:	1ac0      	subs	r0, r0, r3
10040432:	4152      	adcs	r2, r2
10040434:	0883      	lsrs	r3, r0, #2
10040436:	428b      	cmp	r3, r1
10040438:	d301      	bcc.n	1004043e <__divsi3+0xea>
1004043a:	008b      	lsls	r3, r1, #2
1004043c:	1ac0      	subs	r0, r0, r3
1004043e:	4152      	adcs	r2, r2
10040440:	0843      	lsrs	r3, r0, #1
10040442:	428b      	cmp	r3, r1
10040444:	d301      	bcc.n	1004044a <__divsi3+0xf6>
10040446:	004b      	lsls	r3, r1, #1
10040448:	1ac0      	subs	r0, r0, r3
1004044a:	4152      	adcs	r2, r2
1004044c:	1a41      	subs	r1, r0, r1
1004044e:	d200      	bcs.n	10040452 <__divsi3+0xfe>
10040450:	4601      	mov	r1, r0
10040452:	4152      	adcs	r2, r2
10040454:	4610      	mov	r0, r2
10040456:	4770      	bx	lr
10040458:	e05d      	b.n	10040516 <__divsi3+0x1c2>
1004045a:	0fca      	lsrs	r2, r1, #31
1004045c:	d000      	beq.n	10040460 <__divsi3+0x10c>
1004045e:	4249      	negs	r1, r1
10040460:	1003      	asrs	r3, r0, #32
10040462:	d300      	bcc.n	10040466 <__divsi3+0x112>
10040464:	4240      	negs	r0, r0
10040466:	4053      	eors	r3, r2
10040468:	2200      	movs	r2, #0
1004046a:	469c      	mov	ip, r3
1004046c:	0903      	lsrs	r3, r0, #4
1004046e:	428b      	cmp	r3, r1
10040470:	d32d      	bcc.n	100404ce <__divsi3+0x17a>
10040472:	0a03      	lsrs	r3, r0, #8
10040474:	428b      	cmp	r3, r1
10040476:	d312      	bcc.n	1004049e <__divsi3+0x14a>
10040478:	22fc      	movs	r2, #252	@ 0xfc
1004047a:	0189      	lsls	r1, r1, #6
1004047c:	ba12      	rev	r2, r2
1004047e:	0a03      	lsrs	r3, r0, #8
10040480:	428b      	cmp	r3, r1
10040482:	d30c      	bcc.n	1004049e <__divsi3+0x14a>
10040484:	0189      	lsls	r1, r1, #6
10040486:	1192      	asrs	r2, r2, #6
10040488:	428b      	cmp	r3, r1
1004048a:	d308      	bcc.n	1004049e <__divsi3+0x14a>
1004048c:	0189      	lsls	r1, r1, #6
1004048e:	1192      	asrs	r2, r2, #6
10040490:	428b      	cmp	r3, r1
10040492:	d304      	bcc.n	1004049e <__divsi3+0x14a>
10040494:	0189      	lsls	r1, r1, #6
10040496:	d03a      	beq.n	1004050e <__divsi3+0x1ba>
10040498:	1192      	asrs	r2, r2, #6
1004049a:	e000      	b.n	1004049e <__divsi3+0x14a>
1004049c:	0989      	lsrs	r1, r1, #6
1004049e:	09c3      	lsrs	r3, r0, #7
100404a0:	428b      	cmp	r3, r1
100404a2:	d301      	bcc.n	100404a8 <__divsi3+0x154>
100404a4:	01cb      	lsls	r3, r1, #7
100404a6:	1ac0      	subs	r0, r0, r3
100404a8:	4152      	adcs	r2, r2
100404aa:	0983      	lsrs	r3, r0, #6
100404ac:	428b      	cmp	r3, r1
100404ae:	d301      	bcc.n	100404b4 <__divsi3+0x160>
100404b0:	018b      	lsls	r3, r1, #6
100404b2:	1ac0      	subs	r0, r0, r3
100404b4:	4152      	adcs	r2, r2
100404b6:	0943      	lsrs	r3, r0, #5
100404b8:	428b      	cmp	r3, r1
100404ba:	d301      	bcc.n	100404c0 <__divsi3+0x16c>
100404bc:	014b      	lsls	r3, r1, #5
100404be:	1ac0      	subs	r0, r0, r3
100404c0:	4152      	adcs	r2, r2
100404c2:	0903      	lsrs	r3, r0, #4
100404c4:	428b      	cmp	r3, r1
100404c6:	d301      	bcc.n	100404cc <__divsi3+0x178>
100404c8:	010b      	lsls	r3, r1, #4
100404ca:	1ac0      	subs	r0, r0, r3
100404cc:	4152      	adcs	r2, r2
100404ce:	08c3      	lsrs	r3, r0, #3
100404d0:	428b      	cmp	r3, r1
100404d2:	d301      	bcc.n	100404d8 <__divsi3+0x184>
100404d4:	00cb      	lsls	r3, r1, #3
100404d6:	1ac0      	subs	r0, r0, r3
100404d8:	4152      	adcs	r2, r2
100404da:	0883      	lsrs	r3, r0, #2
100404dc:	428b      	cmp	r3, r1
100404de:	d301      	bcc.n	100404e4 <__divsi3+0x190>
100404e0:	008b      	lsls	r3, r1, #2
100404e2:	1ac0      	subs	r0, r0, r3
100404e4:	4152      	adcs	r2, r2
100404e6:	d2d9      	bcs.n	1004049c <__divsi3+0x148>
100404e8:	0843      	lsrs	r3, r0, #1
100404ea:	428b      	cmp	r3, r1
100404ec:	d301      	bcc.n	100404f2 <__divsi3+0x19e>
100404ee:	004b      	lsls	r3, r1, #1
100404f0:	1ac0      	subs	r0, r0, r3
100404f2:	4152      	adcs	r2, r2
100404f4:	1a41      	subs	r1, r0, r1
100404f6:	d200      	bcs.n	100404fa <__divsi3+0x1a6>
100404f8:	4601      	mov	r1, r0
100404fa:	4663      	mov	r3, ip
100404fc:	4152      	adcs	r2, r2
100404fe:	105b      	asrs	r3, r3, #1
10040500:	4610      	mov	r0, r2
10040502:	d301      	bcc.n	10040508 <__divsi3+0x1b4>
10040504:	4240      	negs	r0, r0
10040506:	2b00      	cmp	r3, #0
10040508:	d500      	bpl.n	1004050c <__divsi3+0x1b8>
1004050a:	4249      	negs	r1, r1
1004050c:	4770      	bx	lr
1004050e:	4663      	mov	r3, ip
10040510:	105b      	asrs	r3, r3, #1
10040512:	d300      	bcc.n	10040516 <__divsi3+0x1c2>
10040514:	4240      	negs	r0, r0
10040516:	b501      	push	{r0, lr}
10040518:	2000      	movs	r0, #0
1004051a:	f000 f805 	bl	10040528 <__aeabi_idiv0>
1004051e:	bd02      	pop	{r1, pc}

10040520 <__aeabi_idivmod>:
10040520:	2900      	cmp	r1, #0
10040522:	d0f8      	beq.n	10040516 <__divsi3+0x1c2>
10040524:	e716      	b.n	10040354 <__divsi3>
10040526:	4770      	bx	lr

10040528 <__aeabi_idiv0>:
10040528:	4770      	bx	lr
1004052a:	46c0      	nop			@ (mov r8, r8)

1004052c <__aeabi_llsl>:
1004052c:	4091      	lsls	r1, r2
1004052e:	0003      	movs	r3, r0
10040530:	4090      	lsls	r0, r2
10040532:	469c      	mov	ip, r3
10040534:	3a20      	subs	r2, #32
10040536:	4093      	lsls	r3, r2
10040538:	4319      	orrs	r1, r3
1004053a:	4252      	negs	r2, r2
1004053c:	4663      	mov	r3, ip
1004053e:	40d3      	lsrs	r3, r2
10040540:	4319      	orrs	r1, r3
10040542:	4770      	bx	lr

10040544 <__aeabi_cfrcmple>:
10040544:	4684      	mov	ip, r0
10040546:	0008      	movs	r0, r1
10040548:	4661      	mov	r1, ip
1004054a:	e7ff      	b.n	1004054c <__aeabi_cfcmpeq>

1004054c <__aeabi_cfcmpeq>:
1004054c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1004054e:	f000 f9f3 	bl	10040938 <__lesf2>
10040552:	2800      	cmp	r0, #0
10040554:	d401      	bmi.n	1004055a <__aeabi_cfcmpeq+0xe>
10040556:	2100      	movs	r1, #0
10040558:	42c8      	cmn	r0, r1
1004055a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1004055c <__aeabi_fcmpeq>:
1004055c:	b510      	push	{r4, lr}
1004055e:	f000 f97b 	bl	10040858 <__eqsf2>
10040562:	4240      	negs	r0, r0
10040564:	3001      	adds	r0, #1
10040566:	bd10      	pop	{r4, pc}

10040568 <__aeabi_fcmplt>:
10040568:	b510      	push	{r4, lr}
1004056a:	f000 f9e5 	bl	10040938 <__lesf2>
1004056e:	2800      	cmp	r0, #0
10040570:	db01      	blt.n	10040576 <__aeabi_fcmplt+0xe>
10040572:	2000      	movs	r0, #0
10040574:	bd10      	pop	{r4, pc}
10040576:	2001      	movs	r0, #1
10040578:	bd10      	pop	{r4, pc}
1004057a:	46c0      	nop			@ (mov r8, r8)

1004057c <__aeabi_fcmple>:
1004057c:	b510      	push	{r4, lr}
1004057e:	f000 f9db 	bl	10040938 <__lesf2>
10040582:	2800      	cmp	r0, #0
10040584:	dd01      	ble.n	1004058a <__aeabi_fcmple+0xe>
10040586:	2000      	movs	r0, #0
10040588:	bd10      	pop	{r4, pc}
1004058a:	2001      	movs	r0, #1
1004058c:	bd10      	pop	{r4, pc}
1004058e:	46c0      	nop			@ (mov r8, r8)

10040590 <__aeabi_fcmpgt>:
10040590:	b510      	push	{r4, lr}
10040592:	f000 f989 	bl	100408a8 <__gesf2>
10040596:	2800      	cmp	r0, #0
10040598:	dc01      	bgt.n	1004059e <__aeabi_fcmpgt+0xe>
1004059a:	2000      	movs	r0, #0
1004059c:	bd10      	pop	{r4, pc}
1004059e:	2001      	movs	r0, #1
100405a0:	bd10      	pop	{r4, pc}
100405a2:	46c0      	nop			@ (mov r8, r8)

100405a4 <__aeabi_fcmpge>:
100405a4:	b510      	push	{r4, lr}
100405a6:	f000 f97f 	bl	100408a8 <__gesf2>
100405aa:	2800      	cmp	r0, #0
100405ac:	da01      	bge.n	100405b2 <__aeabi_fcmpge+0xe>
100405ae:	2000      	movs	r0, #0
100405b0:	bd10      	pop	{r4, pc}
100405b2:	2001      	movs	r0, #1
100405b4:	bd10      	pop	{r4, pc}
100405b6:	46c0      	nop			@ (mov r8, r8)

100405b8 <__clzsi2>:
100405b8:	211c      	movs	r1, #28
100405ba:	2301      	movs	r3, #1
100405bc:	041b      	lsls	r3, r3, #16
100405be:	4298      	cmp	r0, r3
100405c0:	d301      	bcc.n	100405c6 <__clzsi2+0xe>
100405c2:	0c00      	lsrs	r0, r0, #16
100405c4:	3910      	subs	r1, #16
100405c6:	0a1b      	lsrs	r3, r3, #8
100405c8:	4298      	cmp	r0, r3
100405ca:	d301      	bcc.n	100405d0 <__clzsi2+0x18>
100405cc:	0a00      	lsrs	r0, r0, #8
100405ce:	3908      	subs	r1, #8
100405d0:	091b      	lsrs	r3, r3, #4
100405d2:	4298      	cmp	r0, r3
100405d4:	d301      	bcc.n	100405da <__clzsi2+0x22>
100405d6:	0900      	lsrs	r0, r0, #4
100405d8:	3904      	subs	r1, #4
100405da:	a202      	add	r2, pc, #8	@ (adr r2, 100405e4 <__clzsi2+0x2c>)
100405dc:	5c10      	ldrb	r0, [r2, r0]
100405de:	1840      	adds	r0, r0, r1
100405e0:	4770      	bx	lr
100405e2:	46c0      	nop			@ (mov r8, r8)
100405e4:	02020304 	.word	0x02020304
100405e8:	01010101 	.word	0x01010101
	...

100405f4 <__aeabi_uldivmod>:
100405f4:	2b00      	cmp	r3, #0
100405f6:	d111      	bne.n	1004061c <__aeabi_uldivmod+0x28>
100405f8:	2a00      	cmp	r2, #0
100405fa:	d10f      	bne.n	1004061c <__aeabi_uldivmod+0x28>
100405fc:	2900      	cmp	r1, #0
100405fe:	d100      	bne.n	10040602 <__aeabi_uldivmod+0xe>
10040600:	2800      	cmp	r0, #0
10040602:	d002      	beq.n	1004060a <__aeabi_uldivmod+0x16>
10040604:	2100      	movs	r1, #0
10040606:	43c9      	mvns	r1, r1
10040608:	0008      	movs	r0, r1
1004060a:	b407      	push	{r0, r1, r2}
1004060c:	4802      	ldr	r0, [pc, #8]	@ (10040618 <__aeabi_uldivmod+0x24>)
1004060e:	a102      	add	r1, pc, #8	@ (adr r1, 10040618 <__aeabi_uldivmod+0x24>)
10040610:	1840      	adds	r0, r0, r1
10040612:	9002      	str	r0, [sp, #8]
10040614:	bd03      	pop	{r0, r1, pc}
10040616:	46c0      	nop			@ (mov r8, r8)
10040618:	ffffff11 	.word	0xffffff11
1004061c:	b403      	push	{r0, r1}
1004061e:	4668      	mov	r0, sp
10040620:	b501      	push	{r0, lr}
10040622:	9802      	ldr	r0, [sp, #8]
10040624:	f000 f84c 	bl	100406c0 <__udivmoddi4>
10040628:	9b01      	ldr	r3, [sp, #4]
1004062a:	469e      	mov	lr, r3
1004062c:	b002      	add	sp, #8
1004062e:	bc0c      	pop	{r2, r3}
10040630:	4770      	bx	lr
10040632:	46c0      	nop			@ (mov r8, r8)

10040634 <__aeabi_lmul>:
10040634:	b5f0      	push	{r4, r5, r6, r7, lr}
10040636:	46ce      	mov	lr, r9
10040638:	4699      	mov	r9, r3
1004063a:	0c03      	lsrs	r3, r0, #16
1004063c:	469c      	mov	ip, r3
1004063e:	0413      	lsls	r3, r2, #16
10040640:	4647      	mov	r7, r8
10040642:	0c1b      	lsrs	r3, r3, #16
10040644:	001d      	movs	r5, r3
10040646:	000e      	movs	r6, r1
10040648:	4661      	mov	r1, ip
1004064a:	0404      	lsls	r4, r0, #16
1004064c:	0c24      	lsrs	r4, r4, #16
1004064e:	b580      	push	{r7, lr}
10040650:	0007      	movs	r7, r0
10040652:	0c10      	lsrs	r0, r2, #16
10040654:	434b      	muls	r3, r1
10040656:	4365      	muls	r5, r4
10040658:	4341      	muls	r1, r0
1004065a:	4360      	muls	r0, r4
1004065c:	0c2c      	lsrs	r4, r5, #16
1004065e:	18c0      	adds	r0, r0, r3
10040660:	1824      	adds	r4, r4, r0
10040662:	468c      	mov	ip, r1
10040664:	42a3      	cmp	r3, r4
10040666:	d903      	bls.n	10040670 <__aeabi_lmul+0x3c>
10040668:	2380      	movs	r3, #128	@ 0x80
1004066a:	025b      	lsls	r3, r3, #9
1004066c:	4698      	mov	r8, r3
1004066e:	44c4      	add	ip, r8
10040670:	4649      	mov	r1, r9
10040672:	4379      	muls	r1, r7
10040674:	4356      	muls	r6, r2
10040676:	0c23      	lsrs	r3, r4, #16
10040678:	042d      	lsls	r5, r5, #16
1004067a:	0c2d      	lsrs	r5, r5, #16
1004067c:	1989      	adds	r1, r1, r6
1004067e:	4463      	add	r3, ip
10040680:	0424      	lsls	r4, r4, #16
10040682:	1960      	adds	r0, r4, r5
10040684:	18c9      	adds	r1, r1, r3
10040686:	bcc0      	pop	{r6, r7}
10040688:	46b9      	mov	r9, r7
1004068a:	46b0      	mov	r8, r6
1004068c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004068e:	46c0      	nop			@ (mov r8, r8)

10040690 <__aeabi_f2uiz>:
10040690:	219e      	movs	r1, #158	@ 0x9e
10040692:	b510      	push	{r4, lr}
10040694:	05c9      	lsls	r1, r1, #23
10040696:	1c04      	adds	r4, r0, #0
10040698:	f7ff ff84 	bl	100405a4 <__aeabi_fcmpge>
1004069c:	2800      	cmp	r0, #0
1004069e:	d103      	bne.n	100406a8 <__aeabi_f2uiz+0x18>
100406a0:	1c20      	adds	r0, r4, #0
100406a2:	f000 fd4f 	bl	10041144 <__aeabi_f2iz>
100406a6:	bd10      	pop	{r4, pc}
100406a8:	219e      	movs	r1, #158	@ 0x9e
100406aa:	1c20      	adds	r0, r4, #0
100406ac:	05c9      	lsls	r1, r1, #23
100406ae:	f000 fae5 	bl	10040c7c <__aeabi_fsub>
100406b2:	f000 fd47 	bl	10041144 <__aeabi_f2iz>
100406b6:	2380      	movs	r3, #128	@ 0x80
100406b8:	061b      	lsls	r3, r3, #24
100406ba:	469c      	mov	ip, r3
100406bc:	4460      	add	r0, ip
100406be:	e7f2      	b.n	100406a6 <__aeabi_f2uiz+0x16>

100406c0 <__udivmoddi4>:
100406c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100406c2:	4657      	mov	r7, sl
100406c4:	464e      	mov	r6, r9
100406c6:	4645      	mov	r5, r8
100406c8:	46de      	mov	lr, fp
100406ca:	b5e0      	push	{r5, r6, r7, lr}
100406cc:	0004      	movs	r4, r0
100406ce:	000d      	movs	r5, r1
100406d0:	4692      	mov	sl, r2
100406d2:	4699      	mov	r9, r3
100406d4:	b083      	sub	sp, #12
100406d6:	428b      	cmp	r3, r1
100406d8:	d830      	bhi.n	1004073c <__udivmoddi4+0x7c>
100406da:	d02d      	beq.n	10040738 <__udivmoddi4+0x78>
100406dc:	4649      	mov	r1, r9
100406de:	4650      	mov	r0, sl
100406e0:	f000 fde6 	bl	100412b0 <__clzdi2>
100406e4:	0029      	movs	r1, r5
100406e6:	0006      	movs	r6, r0
100406e8:	0020      	movs	r0, r4
100406ea:	f000 fde1 	bl	100412b0 <__clzdi2>
100406ee:	1a33      	subs	r3, r6, r0
100406f0:	4698      	mov	r8, r3
100406f2:	3b20      	subs	r3, #32
100406f4:	d434      	bmi.n	10040760 <__udivmoddi4+0xa0>
100406f6:	469b      	mov	fp, r3
100406f8:	4653      	mov	r3, sl
100406fa:	465a      	mov	r2, fp
100406fc:	4093      	lsls	r3, r2
100406fe:	4642      	mov	r2, r8
10040700:	001f      	movs	r7, r3
10040702:	4653      	mov	r3, sl
10040704:	4093      	lsls	r3, r2
10040706:	001e      	movs	r6, r3
10040708:	42af      	cmp	r7, r5
1004070a:	d83b      	bhi.n	10040784 <__udivmoddi4+0xc4>
1004070c:	42af      	cmp	r7, r5
1004070e:	d100      	bne.n	10040712 <__udivmoddi4+0x52>
10040710:	e079      	b.n	10040806 <__udivmoddi4+0x146>
10040712:	465b      	mov	r3, fp
10040714:	1ba4      	subs	r4, r4, r6
10040716:	41bd      	sbcs	r5, r7
10040718:	2b00      	cmp	r3, #0
1004071a:	da00      	bge.n	1004071e <__udivmoddi4+0x5e>
1004071c:	e076      	b.n	1004080c <__udivmoddi4+0x14c>
1004071e:	2200      	movs	r2, #0
10040720:	2300      	movs	r3, #0
10040722:	9200      	str	r2, [sp, #0]
10040724:	9301      	str	r3, [sp, #4]
10040726:	2301      	movs	r3, #1
10040728:	465a      	mov	r2, fp
1004072a:	4093      	lsls	r3, r2
1004072c:	9301      	str	r3, [sp, #4]
1004072e:	2301      	movs	r3, #1
10040730:	4642      	mov	r2, r8
10040732:	4093      	lsls	r3, r2
10040734:	9300      	str	r3, [sp, #0]
10040736:	e029      	b.n	1004078c <__udivmoddi4+0xcc>
10040738:	4282      	cmp	r2, r0
1004073a:	d9cf      	bls.n	100406dc <__udivmoddi4+0x1c>
1004073c:	2200      	movs	r2, #0
1004073e:	2300      	movs	r3, #0
10040740:	9200      	str	r2, [sp, #0]
10040742:	9301      	str	r3, [sp, #4]
10040744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10040746:	2b00      	cmp	r3, #0
10040748:	d001      	beq.n	1004074e <__udivmoddi4+0x8e>
1004074a:	601c      	str	r4, [r3, #0]
1004074c:	605d      	str	r5, [r3, #4]
1004074e:	9800      	ldr	r0, [sp, #0]
10040750:	9901      	ldr	r1, [sp, #4]
10040752:	b003      	add	sp, #12
10040754:	bcf0      	pop	{r4, r5, r6, r7}
10040756:	46bb      	mov	fp, r7
10040758:	46b2      	mov	sl, r6
1004075a:	46a9      	mov	r9, r5
1004075c:	46a0      	mov	r8, r4
1004075e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040760:	4642      	mov	r2, r8
10040762:	469b      	mov	fp, r3
10040764:	2320      	movs	r3, #32
10040766:	1a9b      	subs	r3, r3, r2
10040768:	4652      	mov	r2, sl
1004076a:	40da      	lsrs	r2, r3
1004076c:	4641      	mov	r1, r8
1004076e:	0013      	movs	r3, r2
10040770:	464a      	mov	r2, r9
10040772:	408a      	lsls	r2, r1
10040774:	0017      	movs	r7, r2
10040776:	4642      	mov	r2, r8
10040778:	431f      	orrs	r7, r3
1004077a:	4653      	mov	r3, sl
1004077c:	4093      	lsls	r3, r2
1004077e:	001e      	movs	r6, r3
10040780:	42af      	cmp	r7, r5
10040782:	d9c3      	bls.n	1004070c <__udivmoddi4+0x4c>
10040784:	2200      	movs	r2, #0
10040786:	2300      	movs	r3, #0
10040788:	9200      	str	r2, [sp, #0]
1004078a:	9301      	str	r3, [sp, #4]
1004078c:	4643      	mov	r3, r8
1004078e:	2b00      	cmp	r3, #0
10040790:	d0d8      	beq.n	10040744 <__udivmoddi4+0x84>
10040792:	07fb      	lsls	r3, r7, #31
10040794:	0872      	lsrs	r2, r6, #1
10040796:	431a      	orrs	r2, r3
10040798:	4646      	mov	r6, r8
1004079a:	087b      	lsrs	r3, r7, #1
1004079c:	e00e      	b.n	100407bc <__udivmoddi4+0xfc>
1004079e:	42ab      	cmp	r3, r5
100407a0:	d101      	bne.n	100407a6 <__udivmoddi4+0xe6>
100407a2:	42a2      	cmp	r2, r4
100407a4:	d80c      	bhi.n	100407c0 <__udivmoddi4+0x100>
100407a6:	1aa4      	subs	r4, r4, r2
100407a8:	419d      	sbcs	r5, r3
100407aa:	2001      	movs	r0, #1
100407ac:	1924      	adds	r4, r4, r4
100407ae:	416d      	adcs	r5, r5
100407b0:	2100      	movs	r1, #0
100407b2:	3e01      	subs	r6, #1
100407b4:	1824      	adds	r4, r4, r0
100407b6:	414d      	adcs	r5, r1
100407b8:	2e00      	cmp	r6, #0
100407ba:	d006      	beq.n	100407ca <__udivmoddi4+0x10a>
100407bc:	42ab      	cmp	r3, r5
100407be:	d9ee      	bls.n	1004079e <__udivmoddi4+0xde>
100407c0:	3e01      	subs	r6, #1
100407c2:	1924      	adds	r4, r4, r4
100407c4:	416d      	adcs	r5, r5
100407c6:	2e00      	cmp	r6, #0
100407c8:	d1f8      	bne.n	100407bc <__udivmoddi4+0xfc>
100407ca:	9800      	ldr	r0, [sp, #0]
100407cc:	9901      	ldr	r1, [sp, #4]
100407ce:	465b      	mov	r3, fp
100407d0:	1900      	adds	r0, r0, r4
100407d2:	4169      	adcs	r1, r5
100407d4:	2b00      	cmp	r3, #0
100407d6:	db24      	blt.n	10040822 <__udivmoddi4+0x162>
100407d8:	002b      	movs	r3, r5
100407da:	465a      	mov	r2, fp
100407dc:	4644      	mov	r4, r8
100407de:	40d3      	lsrs	r3, r2
100407e0:	002a      	movs	r2, r5
100407e2:	40e2      	lsrs	r2, r4
100407e4:	001c      	movs	r4, r3
100407e6:	465b      	mov	r3, fp
100407e8:	0015      	movs	r5, r2
100407ea:	2b00      	cmp	r3, #0
100407ec:	db2a      	blt.n	10040844 <__udivmoddi4+0x184>
100407ee:	0026      	movs	r6, r4
100407f0:	409e      	lsls	r6, r3
100407f2:	0033      	movs	r3, r6
100407f4:	0026      	movs	r6, r4
100407f6:	4647      	mov	r7, r8
100407f8:	40be      	lsls	r6, r7
100407fa:	0032      	movs	r2, r6
100407fc:	1a80      	subs	r0, r0, r2
100407fe:	4199      	sbcs	r1, r3
10040800:	9000      	str	r0, [sp, #0]
10040802:	9101      	str	r1, [sp, #4]
10040804:	e79e      	b.n	10040744 <__udivmoddi4+0x84>
10040806:	42a3      	cmp	r3, r4
10040808:	d8bc      	bhi.n	10040784 <__udivmoddi4+0xc4>
1004080a:	e782      	b.n	10040712 <__udivmoddi4+0x52>
1004080c:	4642      	mov	r2, r8
1004080e:	2320      	movs	r3, #32
10040810:	2100      	movs	r1, #0
10040812:	1a9b      	subs	r3, r3, r2
10040814:	2200      	movs	r2, #0
10040816:	9100      	str	r1, [sp, #0]
10040818:	9201      	str	r2, [sp, #4]
1004081a:	2201      	movs	r2, #1
1004081c:	40da      	lsrs	r2, r3
1004081e:	9201      	str	r2, [sp, #4]
10040820:	e785      	b.n	1004072e <__udivmoddi4+0x6e>
10040822:	4642      	mov	r2, r8
10040824:	2320      	movs	r3, #32
10040826:	1a9b      	subs	r3, r3, r2
10040828:	002a      	movs	r2, r5
1004082a:	4646      	mov	r6, r8
1004082c:	409a      	lsls	r2, r3
1004082e:	0023      	movs	r3, r4
10040830:	40f3      	lsrs	r3, r6
10040832:	4644      	mov	r4, r8
10040834:	4313      	orrs	r3, r2
10040836:	002a      	movs	r2, r5
10040838:	40e2      	lsrs	r2, r4
1004083a:	001c      	movs	r4, r3
1004083c:	465b      	mov	r3, fp
1004083e:	0015      	movs	r5, r2
10040840:	2b00      	cmp	r3, #0
10040842:	dad4      	bge.n	100407ee <__udivmoddi4+0x12e>
10040844:	4642      	mov	r2, r8
10040846:	002f      	movs	r7, r5
10040848:	2320      	movs	r3, #32
1004084a:	0026      	movs	r6, r4
1004084c:	4097      	lsls	r7, r2
1004084e:	1a9b      	subs	r3, r3, r2
10040850:	40de      	lsrs	r6, r3
10040852:	003b      	movs	r3, r7
10040854:	4333      	orrs	r3, r6
10040856:	e7cd      	b.n	100407f4 <__udivmoddi4+0x134>

10040858 <__eqsf2>:
10040858:	b570      	push	{r4, r5, r6, lr}
1004085a:	0042      	lsls	r2, r0, #1
1004085c:	024e      	lsls	r6, r1, #9
1004085e:	004c      	lsls	r4, r1, #1
10040860:	0245      	lsls	r5, r0, #9
10040862:	0a6d      	lsrs	r5, r5, #9
10040864:	0e12      	lsrs	r2, r2, #24
10040866:	0fc3      	lsrs	r3, r0, #31
10040868:	0a76      	lsrs	r6, r6, #9
1004086a:	0e24      	lsrs	r4, r4, #24
1004086c:	0fc9      	lsrs	r1, r1, #31
1004086e:	2aff      	cmp	r2, #255	@ 0xff
10040870:	d010      	beq.n	10040894 <__eqsf2+0x3c>
10040872:	2cff      	cmp	r4, #255	@ 0xff
10040874:	d00c      	beq.n	10040890 <__eqsf2+0x38>
10040876:	2001      	movs	r0, #1
10040878:	42a2      	cmp	r2, r4
1004087a:	d10a      	bne.n	10040892 <__eqsf2+0x3a>
1004087c:	42b5      	cmp	r5, r6
1004087e:	d108      	bne.n	10040892 <__eqsf2+0x3a>
10040880:	428b      	cmp	r3, r1
10040882:	d00f      	beq.n	100408a4 <__eqsf2+0x4c>
10040884:	2a00      	cmp	r2, #0
10040886:	d104      	bne.n	10040892 <__eqsf2+0x3a>
10040888:	0028      	movs	r0, r5
1004088a:	1e43      	subs	r3, r0, #1
1004088c:	4198      	sbcs	r0, r3
1004088e:	e000      	b.n	10040892 <__eqsf2+0x3a>
10040890:	2001      	movs	r0, #1
10040892:	bd70      	pop	{r4, r5, r6, pc}
10040894:	2001      	movs	r0, #1
10040896:	2cff      	cmp	r4, #255	@ 0xff
10040898:	d1fb      	bne.n	10040892 <__eqsf2+0x3a>
1004089a:	4335      	orrs	r5, r6
1004089c:	d1f9      	bne.n	10040892 <__eqsf2+0x3a>
1004089e:	404b      	eors	r3, r1
100408a0:	0018      	movs	r0, r3
100408a2:	e7f6      	b.n	10040892 <__eqsf2+0x3a>
100408a4:	2000      	movs	r0, #0
100408a6:	e7f4      	b.n	10040892 <__eqsf2+0x3a>

100408a8 <__gesf2>:
100408a8:	b530      	push	{r4, r5, lr}
100408aa:	0042      	lsls	r2, r0, #1
100408ac:	0244      	lsls	r4, r0, #9
100408ae:	024d      	lsls	r5, r1, #9
100408b0:	0fc3      	lsrs	r3, r0, #31
100408b2:	0048      	lsls	r0, r1, #1
100408b4:	0a64      	lsrs	r4, r4, #9
100408b6:	0e12      	lsrs	r2, r2, #24
100408b8:	0a6d      	lsrs	r5, r5, #9
100408ba:	0e00      	lsrs	r0, r0, #24
100408bc:	0fc9      	lsrs	r1, r1, #31
100408be:	2aff      	cmp	r2, #255	@ 0xff
100408c0:	d018      	beq.n	100408f4 <__gesf2+0x4c>
100408c2:	28ff      	cmp	r0, #255	@ 0xff
100408c4:	d00a      	beq.n	100408dc <__gesf2+0x34>
100408c6:	2a00      	cmp	r2, #0
100408c8:	d11e      	bne.n	10040908 <__gesf2+0x60>
100408ca:	2800      	cmp	r0, #0
100408cc:	d10a      	bne.n	100408e4 <__gesf2+0x3c>
100408ce:	2d00      	cmp	r5, #0
100408d0:	d029      	beq.n	10040926 <__gesf2+0x7e>
100408d2:	2c00      	cmp	r4, #0
100408d4:	d12d      	bne.n	10040932 <__gesf2+0x8a>
100408d6:	0048      	lsls	r0, r1, #1
100408d8:	3801      	subs	r0, #1
100408da:	bd30      	pop	{r4, r5, pc}
100408dc:	2d00      	cmp	r5, #0
100408de:	d125      	bne.n	1004092c <__gesf2+0x84>
100408e0:	2a00      	cmp	r2, #0
100408e2:	d101      	bne.n	100408e8 <__gesf2+0x40>
100408e4:	2c00      	cmp	r4, #0
100408e6:	d0f6      	beq.n	100408d6 <__gesf2+0x2e>
100408e8:	428b      	cmp	r3, r1
100408ea:	d019      	beq.n	10040920 <__gesf2+0x78>
100408ec:	2001      	movs	r0, #1
100408ee:	425b      	negs	r3, r3
100408f0:	4318      	orrs	r0, r3
100408f2:	e7f2      	b.n	100408da <__gesf2+0x32>
100408f4:	2c00      	cmp	r4, #0
100408f6:	d119      	bne.n	1004092c <__gesf2+0x84>
100408f8:	28ff      	cmp	r0, #255	@ 0xff
100408fa:	d1f7      	bne.n	100408ec <__gesf2+0x44>
100408fc:	2d00      	cmp	r5, #0
100408fe:	d115      	bne.n	1004092c <__gesf2+0x84>
10040900:	2000      	movs	r0, #0
10040902:	428b      	cmp	r3, r1
10040904:	d1f2      	bne.n	100408ec <__gesf2+0x44>
10040906:	e7e8      	b.n	100408da <__gesf2+0x32>
10040908:	2800      	cmp	r0, #0
1004090a:	d0ef      	beq.n	100408ec <__gesf2+0x44>
1004090c:	428b      	cmp	r3, r1
1004090e:	d1ed      	bne.n	100408ec <__gesf2+0x44>
10040910:	4282      	cmp	r2, r0
10040912:	dceb      	bgt.n	100408ec <__gesf2+0x44>
10040914:	db04      	blt.n	10040920 <__gesf2+0x78>
10040916:	42ac      	cmp	r4, r5
10040918:	d8e8      	bhi.n	100408ec <__gesf2+0x44>
1004091a:	2000      	movs	r0, #0
1004091c:	42ac      	cmp	r4, r5
1004091e:	d2dc      	bcs.n	100408da <__gesf2+0x32>
10040920:	0058      	lsls	r0, r3, #1
10040922:	3801      	subs	r0, #1
10040924:	e7d9      	b.n	100408da <__gesf2+0x32>
10040926:	2c00      	cmp	r4, #0
10040928:	d0d7      	beq.n	100408da <__gesf2+0x32>
1004092a:	e7df      	b.n	100408ec <__gesf2+0x44>
1004092c:	2002      	movs	r0, #2
1004092e:	4240      	negs	r0, r0
10040930:	e7d3      	b.n	100408da <__gesf2+0x32>
10040932:	428b      	cmp	r3, r1
10040934:	d1da      	bne.n	100408ec <__gesf2+0x44>
10040936:	e7ee      	b.n	10040916 <__gesf2+0x6e>

10040938 <__lesf2>:
10040938:	b530      	push	{r4, r5, lr}
1004093a:	0042      	lsls	r2, r0, #1
1004093c:	0244      	lsls	r4, r0, #9
1004093e:	024d      	lsls	r5, r1, #9
10040940:	0fc3      	lsrs	r3, r0, #31
10040942:	0048      	lsls	r0, r1, #1
10040944:	0a64      	lsrs	r4, r4, #9
10040946:	0e12      	lsrs	r2, r2, #24
10040948:	0a6d      	lsrs	r5, r5, #9
1004094a:	0e00      	lsrs	r0, r0, #24
1004094c:	0fc9      	lsrs	r1, r1, #31
1004094e:	2aff      	cmp	r2, #255	@ 0xff
10040950:	d017      	beq.n	10040982 <__lesf2+0x4a>
10040952:	28ff      	cmp	r0, #255	@ 0xff
10040954:	d00a      	beq.n	1004096c <__lesf2+0x34>
10040956:	2a00      	cmp	r2, #0
10040958:	d11b      	bne.n	10040992 <__lesf2+0x5a>
1004095a:	2800      	cmp	r0, #0
1004095c:	d10a      	bne.n	10040974 <__lesf2+0x3c>
1004095e:	2d00      	cmp	r5, #0
10040960:	d01d      	beq.n	1004099e <__lesf2+0x66>
10040962:	2c00      	cmp	r4, #0
10040964:	d12d      	bne.n	100409c2 <__lesf2+0x8a>
10040966:	0048      	lsls	r0, r1, #1
10040968:	3801      	subs	r0, #1
1004096a:	e011      	b.n	10040990 <__lesf2+0x58>
1004096c:	2d00      	cmp	r5, #0
1004096e:	d10e      	bne.n	1004098e <__lesf2+0x56>
10040970:	2a00      	cmp	r2, #0
10040972:	d101      	bne.n	10040978 <__lesf2+0x40>
10040974:	2c00      	cmp	r4, #0
10040976:	d0f6      	beq.n	10040966 <__lesf2+0x2e>
10040978:	428b      	cmp	r3, r1
1004097a:	d10c      	bne.n	10040996 <__lesf2+0x5e>
1004097c:	0058      	lsls	r0, r3, #1
1004097e:	3801      	subs	r0, #1
10040980:	e006      	b.n	10040990 <__lesf2+0x58>
10040982:	2c00      	cmp	r4, #0
10040984:	d103      	bne.n	1004098e <__lesf2+0x56>
10040986:	28ff      	cmp	r0, #255	@ 0xff
10040988:	d105      	bne.n	10040996 <__lesf2+0x5e>
1004098a:	2d00      	cmp	r5, #0
1004098c:	d015      	beq.n	100409ba <__lesf2+0x82>
1004098e:	2002      	movs	r0, #2
10040990:	bd30      	pop	{r4, r5, pc}
10040992:	2800      	cmp	r0, #0
10040994:	d106      	bne.n	100409a4 <__lesf2+0x6c>
10040996:	2001      	movs	r0, #1
10040998:	425b      	negs	r3, r3
1004099a:	4318      	orrs	r0, r3
1004099c:	e7f8      	b.n	10040990 <__lesf2+0x58>
1004099e:	2c00      	cmp	r4, #0
100409a0:	d0f6      	beq.n	10040990 <__lesf2+0x58>
100409a2:	e7f8      	b.n	10040996 <__lesf2+0x5e>
100409a4:	428b      	cmp	r3, r1
100409a6:	d1f6      	bne.n	10040996 <__lesf2+0x5e>
100409a8:	4282      	cmp	r2, r0
100409aa:	dcf4      	bgt.n	10040996 <__lesf2+0x5e>
100409ac:	dbe6      	blt.n	1004097c <__lesf2+0x44>
100409ae:	42ac      	cmp	r4, r5
100409b0:	d8f1      	bhi.n	10040996 <__lesf2+0x5e>
100409b2:	2000      	movs	r0, #0
100409b4:	42ac      	cmp	r4, r5
100409b6:	d2eb      	bcs.n	10040990 <__lesf2+0x58>
100409b8:	e7e0      	b.n	1004097c <__lesf2+0x44>
100409ba:	2000      	movs	r0, #0
100409bc:	428b      	cmp	r3, r1
100409be:	d1ea      	bne.n	10040996 <__lesf2+0x5e>
100409c0:	e7e6      	b.n	10040990 <__lesf2+0x58>
100409c2:	428b      	cmp	r3, r1
100409c4:	d1e7      	bne.n	10040996 <__lesf2+0x5e>
100409c6:	e7f2      	b.n	100409ae <__lesf2+0x76>

100409c8 <__aeabi_fmul>:
100409c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100409ca:	464f      	mov	r7, r9
100409cc:	4646      	mov	r6, r8
100409ce:	46d6      	mov	lr, sl
100409d0:	0044      	lsls	r4, r0, #1
100409d2:	b5c0      	push	{r6, r7, lr}
100409d4:	0246      	lsls	r6, r0, #9
100409d6:	1c0f      	adds	r7, r1, #0
100409d8:	0a76      	lsrs	r6, r6, #9
100409da:	0e24      	lsrs	r4, r4, #24
100409dc:	0fc5      	lsrs	r5, r0, #31
100409de:	2c00      	cmp	r4, #0
100409e0:	d100      	bne.n	100409e4 <__aeabi_fmul+0x1c>
100409e2:	e0da      	b.n	10040b9a <__aeabi_fmul+0x1d2>
100409e4:	2cff      	cmp	r4, #255	@ 0xff
100409e6:	d074      	beq.n	10040ad2 <__aeabi_fmul+0x10a>
100409e8:	2380      	movs	r3, #128	@ 0x80
100409ea:	00f6      	lsls	r6, r6, #3
100409ec:	04db      	lsls	r3, r3, #19
100409ee:	431e      	orrs	r6, r3
100409f0:	2300      	movs	r3, #0
100409f2:	4699      	mov	r9, r3
100409f4:	469a      	mov	sl, r3
100409f6:	3c7f      	subs	r4, #127	@ 0x7f
100409f8:	027b      	lsls	r3, r7, #9
100409fa:	0a5b      	lsrs	r3, r3, #9
100409fc:	4698      	mov	r8, r3
100409fe:	007b      	lsls	r3, r7, #1
10040a00:	0e1b      	lsrs	r3, r3, #24
10040a02:	0fff      	lsrs	r7, r7, #31
10040a04:	2b00      	cmp	r3, #0
10040a06:	d074      	beq.n	10040af2 <__aeabi_fmul+0x12a>
10040a08:	2bff      	cmp	r3, #255	@ 0xff
10040a0a:	d100      	bne.n	10040a0e <__aeabi_fmul+0x46>
10040a0c:	e08e      	b.n	10040b2c <__aeabi_fmul+0x164>
10040a0e:	4642      	mov	r2, r8
10040a10:	2180      	movs	r1, #128	@ 0x80
10040a12:	00d2      	lsls	r2, r2, #3
10040a14:	04c9      	lsls	r1, r1, #19
10040a16:	4311      	orrs	r1, r2
10040a18:	3b7f      	subs	r3, #127	@ 0x7f
10040a1a:	002a      	movs	r2, r5
10040a1c:	18e4      	adds	r4, r4, r3
10040a1e:	464b      	mov	r3, r9
10040a20:	407a      	eors	r2, r7
10040a22:	4688      	mov	r8, r1
10040a24:	b2d2      	uxtb	r2, r2
10040a26:	2b0a      	cmp	r3, #10
10040a28:	dc75      	bgt.n	10040b16 <__aeabi_fmul+0x14e>
10040a2a:	464b      	mov	r3, r9
10040a2c:	2000      	movs	r0, #0
10040a2e:	2b02      	cmp	r3, #2
10040a30:	dd0f      	ble.n	10040a52 <__aeabi_fmul+0x8a>
10040a32:	4649      	mov	r1, r9
10040a34:	2301      	movs	r3, #1
10040a36:	408b      	lsls	r3, r1
10040a38:	21a6      	movs	r1, #166	@ 0xa6
10040a3a:	00c9      	lsls	r1, r1, #3
10040a3c:	420b      	tst	r3, r1
10040a3e:	d169      	bne.n	10040b14 <__aeabi_fmul+0x14c>
10040a40:	2190      	movs	r1, #144	@ 0x90
10040a42:	0089      	lsls	r1, r1, #2
10040a44:	420b      	tst	r3, r1
10040a46:	d000      	beq.n	10040a4a <__aeabi_fmul+0x82>
10040a48:	e100      	b.n	10040c4c <__aeabi_fmul+0x284>
10040a4a:	2188      	movs	r1, #136	@ 0x88
10040a4c:	4219      	tst	r1, r3
10040a4e:	d000      	beq.n	10040a52 <__aeabi_fmul+0x8a>
10040a50:	e0f5      	b.n	10040c3e <__aeabi_fmul+0x276>
10040a52:	4641      	mov	r1, r8
10040a54:	0409      	lsls	r1, r1, #16
10040a56:	0c09      	lsrs	r1, r1, #16
10040a58:	4643      	mov	r3, r8
10040a5a:	0008      	movs	r0, r1
10040a5c:	0c35      	lsrs	r5, r6, #16
10040a5e:	0436      	lsls	r6, r6, #16
10040a60:	0c1b      	lsrs	r3, r3, #16
10040a62:	0c36      	lsrs	r6, r6, #16
10040a64:	4370      	muls	r0, r6
10040a66:	4369      	muls	r1, r5
10040a68:	435e      	muls	r6, r3
10040a6a:	435d      	muls	r5, r3
10040a6c:	1876      	adds	r6, r6, r1
10040a6e:	0c03      	lsrs	r3, r0, #16
10040a70:	199b      	adds	r3, r3, r6
10040a72:	4299      	cmp	r1, r3
10040a74:	d903      	bls.n	10040a7e <__aeabi_fmul+0xb6>
10040a76:	2180      	movs	r1, #128	@ 0x80
10040a78:	0249      	lsls	r1, r1, #9
10040a7a:	468c      	mov	ip, r1
10040a7c:	4465      	add	r5, ip
10040a7e:	0400      	lsls	r0, r0, #16
10040a80:	0419      	lsls	r1, r3, #16
10040a82:	0c00      	lsrs	r0, r0, #16
10040a84:	1809      	adds	r1, r1, r0
10040a86:	018e      	lsls	r6, r1, #6
10040a88:	1e70      	subs	r0, r6, #1
10040a8a:	4186      	sbcs	r6, r0
10040a8c:	0c1b      	lsrs	r3, r3, #16
10040a8e:	0e89      	lsrs	r1, r1, #26
10040a90:	195b      	adds	r3, r3, r5
10040a92:	430e      	orrs	r6, r1
10040a94:	019b      	lsls	r3, r3, #6
10040a96:	431e      	orrs	r6, r3
10040a98:	011b      	lsls	r3, r3, #4
10040a9a:	d46c      	bmi.n	10040b76 <__aeabi_fmul+0x1ae>
10040a9c:	0023      	movs	r3, r4
10040a9e:	337f      	adds	r3, #127	@ 0x7f
10040aa0:	2b00      	cmp	r3, #0
10040aa2:	dc00      	bgt.n	10040aa6 <__aeabi_fmul+0xde>
10040aa4:	e0b1      	b.n	10040c0a <__aeabi_fmul+0x242>
10040aa6:	0015      	movs	r5, r2
10040aa8:	0771      	lsls	r1, r6, #29
10040aaa:	d00b      	beq.n	10040ac4 <__aeabi_fmul+0xfc>
10040aac:	200f      	movs	r0, #15
10040aae:	0021      	movs	r1, r4
10040ab0:	4030      	ands	r0, r6
10040ab2:	2804      	cmp	r0, #4
10040ab4:	d006      	beq.n	10040ac4 <__aeabi_fmul+0xfc>
10040ab6:	3604      	adds	r6, #4
10040ab8:	0132      	lsls	r2, r6, #4
10040aba:	d503      	bpl.n	10040ac4 <__aeabi_fmul+0xfc>
10040abc:	4b6e      	ldr	r3, [pc, #440]	@ (10040c78 <__aeabi_fmul+0x2b0>)
10040abe:	401e      	ands	r6, r3
10040ac0:	000b      	movs	r3, r1
10040ac2:	3380      	adds	r3, #128	@ 0x80
10040ac4:	2bfe      	cmp	r3, #254	@ 0xfe
10040ac6:	dd00      	ble.n	10040aca <__aeabi_fmul+0x102>
10040ac8:	e0bd      	b.n	10040c46 <__aeabi_fmul+0x27e>
10040aca:	01b2      	lsls	r2, r6, #6
10040acc:	0a52      	lsrs	r2, r2, #9
10040ace:	b2db      	uxtb	r3, r3
10040ad0:	e048      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040ad2:	2e00      	cmp	r6, #0
10040ad4:	d000      	beq.n	10040ad8 <__aeabi_fmul+0x110>
10040ad6:	e092      	b.n	10040bfe <__aeabi_fmul+0x236>
10040ad8:	2308      	movs	r3, #8
10040ada:	4699      	mov	r9, r3
10040adc:	3b06      	subs	r3, #6
10040ade:	469a      	mov	sl, r3
10040ae0:	027b      	lsls	r3, r7, #9
10040ae2:	0a5b      	lsrs	r3, r3, #9
10040ae4:	4698      	mov	r8, r3
10040ae6:	007b      	lsls	r3, r7, #1
10040ae8:	24ff      	movs	r4, #255	@ 0xff
10040aea:	0e1b      	lsrs	r3, r3, #24
10040aec:	0fff      	lsrs	r7, r7, #31
10040aee:	2b00      	cmp	r3, #0
10040af0:	d18a      	bne.n	10040a08 <__aeabi_fmul+0x40>
10040af2:	4642      	mov	r2, r8
10040af4:	2a00      	cmp	r2, #0
10040af6:	d164      	bne.n	10040bc2 <__aeabi_fmul+0x1fa>
10040af8:	4649      	mov	r1, r9
10040afa:	3201      	adds	r2, #1
10040afc:	4311      	orrs	r1, r2
10040afe:	4689      	mov	r9, r1
10040b00:	290a      	cmp	r1, #10
10040b02:	dc08      	bgt.n	10040b16 <__aeabi_fmul+0x14e>
10040b04:	407d      	eors	r5, r7
10040b06:	2001      	movs	r0, #1
10040b08:	b2ea      	uxtb	r2, r5
10040b0a:	2902      	cmp	r1, #2
10040b0c:	dc91      	bgt.n	10040a32 <__aeabi_fmul+0x6a>
10040b0e:	0015      	movs	r5, r2
10040b10:	2200      	movs	r2, #0
10040b12:	e027      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040b14:	0015      	movs	r5, r2
10040b16:	4653      	mov	r3, sl
10040b18:	2b02      	cmp	r3, #2
10040b1a:	d100      	bne.n	10040b1e <__aeabi_fmul+0x156>
10040b1c:	e093      	b.n	10040c46 <__aeabi_fmul+0x27e>
10040b1e:	2b03      	cmp	r3, #3
10040b20:	d01a      	beq.n	10040b58 <__aeabi_fmul+0x190>
10040b22:	2b01      	cmp	r3, #1
10040b24:	d12c      	bne.n	10040b80 <__aeabi_fmul+0x1b8>
10040b26:	2300      	movs	r3, #0
10040b28:	2200      	movs	r2, #0
10040b2a:	e01b      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040b2c:	4643      	mov	r3, r8
10040b2e:	34ff      	adds	r4, #255	@ 0xff
10040b30:	2b00      	cmp	r3, #0
10040b32:	d055      	beq.n	10040be0 <__aeabi_fmul+0x218>
10040b34:	2103      	movs	r1, #3
10040b36:	464b      	mov	r3, r9
10040b38:	430b      	orrs	r3, r1
10040b3a:	0019      	movs	r1, r3
10040b3c:	2b0a      	cmp	r3, #10
10040b3e:	dc00      	bgt.n	10040b42 <__aeabi_fmul+0x17a>
10040b40:	e092      	b.n	10040c68 <__aeabi_fmul+0x2a0>
10040b42:	2b0f      	cmp	r3, #15
10040b44:	d000      	beq.n	10040b48 <__aeabi_fmul+0x180>
10040b46:	e08c      	b.n	10040c62 <__aeabi_fmul+0x29a>
10040b48:	2280      	movs	r2, #128	@ 0x80
10040b4a:	03d2      	lsls	r2, r2, #15
10040b4c:	4216      	tst	r6, r2
10040b4e:	d003      	beq.n	10040b58 <__aeabi_fmul+0x190>
10040b50:	4643      	mov	r3, r8
10040b52:	4213      	tst	r3, r2
10040b54:	d100      	bne.n	10040b58 <__aeabi_fmul+0x190>
10040b56:	e07d      	b.n	10040c54 <__aeabi_fmul+0x28c>
10040b58:	2280      	movs	r2, #128	@ 0x80
10040b5a:	03d2      	lsls	r2, r2, #15
10040b5c:	4332      	orrs	r2, r6
10040b5e:	0252      	lsls	r2, r2, #9
10040b60:	0a52      	lsrs	r2, r2, #9
10040b62:	23ff      	movs	r3, #255	@ 0xff
10040b64:	05d8      	lsls	r0, r3, #23
10040b66:	07ed      	lsls	r5, r5, #31
10040b68:	4310      	orrs	r0, r2
10040b6a:	4328      	orrs	r0, r5
10040b6c:	bce0      	pop	{r5, r6, r7}
10040b6e:	46ba      	mov	sl, r7
10040b70:	46b1      	mov	r9, r6
10040b72:	46a8      	mov	r8, r5
10040b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10040b76:	2301      	movs	r3, #1
10040b78:	0015      	movs	r5, r2
10040b7a:	0871      	lsrs	r1, r6, #1
10040b7c:	401e      	ands	r6, r3
10040b7e:	430e      	orrs	r6, r1
10040b80:	0023      	movs	r3, r4
10040b82:	3380      	adds	r3, #128	@ 0x80
10040b84:	1c61      	adds	r1, r4, #1
10040b86:	2b00      	cmp	r3, #0
10040b88:	dd41      	ble.n	10040c0e <__aeabi_fmul+0x246>
10040b8a:	0772      	lsls	r2, r6, #29
10040b8c:	d094      	beq.n	10040ab8 <__aeabi_fmul+0xf0>
10040b8e:	220f      	movs	r2, #15
10040b90:	4032      	ands	r2, r6
10040b92:	2a04      	cmp	r2, #4
10040b94:	d000      	beq.n	10040b98 <__aeabi_fmul+0x1d0>
10040b96:	e78e      	b.n	10040ab6 <__aeabi_fmul+0xee>
10040b98:	e78e      	b.n	10040ab8 <__aeabi_fmul+0xf0>
10040b9a:	2e00      	cmp	r6, #0
10040b9c:	d105      	bne.n	10040baa <__aeabi_fmul+0x1e2>
10040b9e:	2304      	movs	r3, #4
10040ba0:	4699      	mov	r9, r3
10040ba2:	3b03      	subs	r3, #3
10040ba4:	2400      	movs	r4, #0
10040ba6:	469a      	mov	sl, r3
10040ba8:	e726      	b.n	100409f8 <__aeabi_fmul+0x30>
10040baa:	0030      	movs	r0, r6
10040bac:	f7ff fd04 	bl	100405b8 <__clzsi2>
10040bb0:	2476      	movs	r4, #118	@ 0x76
10040bb2:	1f43      	subs	r3, r0, #5
10040bb4:	409e      	lsls	r6, r3
10040bb6:	2300      	movs	r3, #0
10040bb8:	4264      	negs	r4, r4
10040bba:	4699      	mov	r9, r3
10040bbc:	469a      	mov	sl, r3
10040bbe:	1a24      	subs	r4, r4, r0
10040bc0:	e71a      	b.n	100409f8 <__aeabi_fmul+0x30>
10040bc2:	4640      	mov	r0, r8
10040bc4:	f7ff fcf8 	bl	100405b8 <__clzsi2>
10040bc8:	464b      	mov	r3, r9
10040bca:	1a24      	subs	r4, r4, r0
10040bcc:	3c76      	subs	r4, #118	@ 0x76
10040bce:	2b0a      	cmp	r3, #10
10040bd0:	dca1      	bgt.n	10040b16 <__aeabi_fmul+0x14e>
10040bd2:	4643      	mov	r3, r8
10040bd4:	3805      	subs	r0, #5
10040bd6:	4083      	lsls	r3, r0
10040bd8:	407d      	eors	r5, r7
10040bda:	4698      	mov	r8, r3
10040bdc:	b2ea      	uxtb	r2, r5
10040bde:	e724      	b.n	10040a2a <__aeabi_fmul+0x62>
10040be0:	464a      	mov	r2, r9
10040be2:	3302      	adds	r3, #2
10040be4:	4313      	orrs	r3, r2
10040be6:	002a      	movs	r2, r5
10040be8:	407a      	eors	r2, r7
10040bea:	b2d2      	uxtb	r2, r2
10040bec:	2b0a      	cmp	r3, #10
10040bee:	dc92      	bgt.n	10040b16 <__aeabi_fmul+0x14e>
10040bf0:	4649      	mov	r1, r9
10040bf2:	0015      	movs	r5, r2
10040bf4:	2900      	cmp	r1, #0
10040bf6:	d026      	beq.n	10040c46 <__aeabi_fmul+0x27e>
10040bf8:	4699      	mov	r9, r3
10040bfa:	2002      	movs	r0, #2
10040bfc:	e719      	b.n	10040a32 <__aeabi_fmul+0x6a>
10040bfe:	230c      	movs	r3, #12
10040c00:	4699      	mov	r9, r3
10040c02:	3b09      	subs	r3, #9
10040c04:	24ff      	movs	r4, #255	@ 0xff
10040c06:	469a      	mov	sl, r3
10040c08:	e6f6      	b.n	100409f8 <__aeabi_fmul+0x30>
10040c0a:	0015      	movs	r5, r2
10040c0c:	0021      	movs	r1, r4
10040c0e:	2201      	movs	r2, #1
10040c10:	1ad3      	subs	r3, r2, r3
10040c12:	2b1b      	cmp	r3, #27
10040c14:	dd00      	ble.n	10040c18 <__aeabi_fmul+0x250>
10040c16:	e786      	b.n	10040b26 <__aeabi_fmul+0x15e>
10040c18:	319e      	adds	r1, #158	@ 0x9e
10040c1a:	0032      	movs	r2, r6
10040c1c:	408e      	lsls	r6, r1
10040c1e:	40da      	lsrs	r2, r3
10040c20:	1e73      	subs	r3, r6, #1
10040c22:	419e      	sbcs	r6, r3
10040c24:	4332      	orrs	r2, r6
10040c26:	0753      	lsls	r3, r2, #29
10040c28:	d004      	beq.n	10040c34 <__aeabi_fmul+0x26c>
10040c2a:	230f      	movs	r3, #15
10040c2c:	4013      	ands	r3, r2
10040c2e:	2b04      	cmp	r3, #4
10040c30:	d000      	beq.n	10040c34 <__aeabi_fmul+0x26c>
10040c32:	3204      	adds	r2, #4
10040c34:	0153      	lsls	r3, r2, #5
10040c36:	d510      	bpl.n	10040c5a <__aeabi_fmul+0x292>
10040c38:	2301      	movs	r3, #1
10040c3a:	2200      	movs	r2, #0
10040c3c:	e792      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040c3e:	003d      	movs	r5, r7
10040c40:	4646      	mov	r6, r8
10040c42:	4682      	mov	sl, r0
10040c44:	e767      	b.n	10040b16 <__aeabi_fmul+0x14e>
10040c46:	23ff      	movs	r3, #255	@ 0xff
10040c48:	2200      	movs	r2, #0
10040c4a:	e78b      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040c4c:	2280      	movs	r2, #128	@ 0x80
10040c4e:	2500      	movs	r5, #0
10040c50:	03d2      	lsls	r2, r2, #15
10040c52:	e786      	b.n	10040b62 <__aeabi_fmul+0x19a>
10040c54:	003d      	movs	r5, r7
10040c56:	431a      	orrs	r2, r3
10040c58:	e783      	b.n	10040b62 <__aeabi_fmul+0x19a>
10040c5a:	0192      	lsls	r2, r2, #6
10040c5c:	2300      	movs	r3, #0
10040c5e:	0a52      	lsrs	r2, r2, #9
10040c60:	e780      	b.n	10040b64 <__aeabi_fmul+0x19c>
10040c62:	003d      	movs	r5, r7
10040c64:	4646      	mov	r6, r8
10040c66:	e777      	b.n	10040b58 <__aeabi_fmul+0x190>
10040c68:	002a      	movs	r2, r5
10040c6a:	2301      	movs	r3, #1
10040c6c:	407a      	eors	r2, r7
10040c6e:	408b      	lsls	r3, r1
10040c70:	2003      	movs	r0, #3
10040c72:	b2d2      	uxtb	r2, r2
10040c74:	e6e9      	b.n	10040a4a <__aeabi_fmul+0x82>
10040c76:	46c0      	nop			@ (mov r8, r8)
10040c78:	f7ffffff 	.word	0xf7ffffff

10040c7c <__aeabi_fsub>:
10040c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10040c7e:	4647      	mov	r7, r8
10040c80:	46ce      	mov	lr, r9
10040c82:	0243      	lsls	r3, r0, #9
10040c84:	b580      	push	{r7, lr}
10040c86:	0a5f      	lsrs	r7, r3, #9
10040c88:	099b      	lsrs	r3, r3, #6
10040c8a:	0045      	lsls	r5, r0, #1
10040c8c:	004a      	lsls	r2, r1, #1
10040c8e:	469c      	mov	ip, r3
10040c90:	024b      	lsls	r3, r1, #9
10040c92:	0fc4      	lsrs	r4, r0, #31
10040c94:	0fce      	lsrs	r6, r1, #31
10040c96:	0e2d      	lsrs	r5, r5, #24
10040c98:	0a58      	lsrs	r0, r3, #9
10040c9a:	0e12      	lsrs	r2, r2, #24
10040c9c:	0999      	lsrs	r1, r3, #6
10040c9e:	2aff      	cmp	r2, #255	@ 0xff
10040ca0:	d06b      	beq.n	10040d7a <__aeabi_fsub+0xfe>
10040ca2:	2301      	movs	r3, #1
10040ca4:	405e      	eors	r6, r3
10040ca6:	1aab      	subs	r3, r5, r2
10040ca8:	42b4      	cmp	r4, r6
10040caa:	d04b      	beq.n	10040d44 <__aeabi_fsub+0xc8>
10040cac:	2b00      	cmp	r3, #0
10040cae:	dc00      	bgt.n	10040cb2 <__aeabi_fsub+0x36>
10040cb0:	e0ff      	b.n	10040eb2 <__aeabi_fsub+0x236>
10040cb2:	2a00      	cmp	r2, #0
10040cb4:	d100      	bne.n	10040cb8 <__aeabi_fsub+0x3c>
10040cb6:	e088      	b.n	10040dca <__aeabi_fsub+0x14e>
10040cb8:	2dff      	cmp	r5, #255	@ 0xff
10040cba:	d100      	bne.n	10040cbe <__aeabi_fsub+0x42>
10040cbc:	e0ef      	b.n	10040e9e <__aeabi_fsub+0x222>
10040cbe:	2280      	movs	r2, #128	@ 0x80
10040cc0:	04d2      	lsls	r2, r2, #19
10040cc2:	4311      	orrs	r1, r2
10040cc4:	2001      	movs	r0, #1
10040cc6:	2b1b      	cmp	r3, #27
10040cc8:	dc08      	bgt.n	10040cdc <__aeabi_fsub+0x60>
10040cca:	0008      	movs	r0, r1
10040ccc:	2220      	movs	r2, #32
10040cce:	40d8      	lsrs	r0, r3
10040cd0:	1ad3      	subs	r3, r2, r3
10040cd2:	4099      	lsls	r1, r3
10040cd4:	000b      	movs	r3, r1
10040cd6:	1e5a      	subs	r2, r3, #1
10040cd8:	4193      	sbcs	r3, r2
10040cda:	4318      	orrs	r0, r3
10040cdc:	4663      	mov	r3, ip
10040cde:	1a1b      	subs	r3, r3, r0
10040ce0:	469c      	mov	ip, r3
10040ce2:	4663      	mov	r3, ip
10040ce4:	015b      	lsls	r3, r3, #5
10040ce6:	d400      	bmi.n	10040cea <__aeabi_fsub+0x6e>
10040ce8:	e0cd      	b.n	10040e86 <__aeabi_fsub+0x20a>
10040cea:	4663      	mov	r3, ip
10040cec:	019f      	lsls	r7, r3, #6
10040cee:	09bf      	lsrs	r7, r7, #6
10040cf0:	0038      	movs	r0, r7
10040cf2:	f7ff fc61 	bl	100405b8 <__clzsi2>
10040cf6:	003b      	movs	r3, r7
10040cf8:	3805      	subs	r0, #5
10040cfa:	4083      	lsls	r3, r0
10040cfc:	4285      	cmp	r5, r0
10040cfe:	dc00      	bgt.n	10040d02 <__aeabi_fsub+0x86>
10040d00:	e0a2      	b.n	10040e48 <__aeabi_fsub+0x1cc>
10040d02:	4ab7      	ldr	r2, [pc, #732]	@ (10040fe0 <__aeabi_fsub+0x364>)
10040d04:	1a2d      	subs	r5, r5, r0
10040d06:	401a      	ands	r2, r3
10040d08:	4694      	mov	ip, r2
10040d0a:	075a      	lsls	r2, r3, #29
10040d0c:	d100      	bne.n	10040d10 <__aeabi_fsub+0x94>
10040d0e:	e0c3      	b.n	10040e98 <__aeabi_fsub+0x21c>
10040d10:	220f      	movs	r2, #15
10040d12:	4013      	ands	r3, r2
10040d14:	2b04      	cmp	r3, #4
10040d16:	d100      	bne.n	10040d1a <__aeabi_fsub+0x9e>
10040d18:	e0be      	b.n	10040e98 <__aeabi_fsub+0x21c>
10040d1a:	2304      	movs	r3, #4
10040d1c:	4698      	mov	r8, r3
10040d1e:	44c4      	add	ip, r8
10040d20:	4663      	mov	r3, ip
10040d22:	015b      	lsls	r3, r3, #5
10040d24:	d400      	bmi.n	10040d28 <__aeabi_fsub+0xac>
10040d26:	e0b7      	b.n	10040e98 <__aeabi_fsub+0x21c>
10040d28:	1c68      	adds	r0, r5, #1
10040d2a:	2dfe      	cmp	r5, #254	@ 0xfe
10040d2c:	d000      	beq.n	10040d30 <__aeabi_fsub+0xb4>
10040d2e:	e0a5      	b.n	10040e7c <__aeabi_fsub+0x200>
10040d30:	20ff      	movs	r0, #255	@ 0xff
10040d32:	2200      	movs	r2, #0
10040d34:	05c0      	lsls	r0, r0, #23
10040d36:	4310      	orrs	r0, r2
10040d38:	07e4      	lsls	r4, r4, #31
10040d3a:	4320      	orrs	r0, r4
10040d3c:	bcc0      	pop	{r6, r7}
10040d3e:	46b9      	mov	r9, r7
10040d40:	46b0      	mov	r8, r6
10040d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10040d44:	2b00      	cmp	r3, #0
10040d46:	dc00      	bgt.n	10040d4a <__aeabi_fsub+0xce>
10040d48:	e1eb      	b.n	10041122 <__aeabi_fsub+0x4a6>
10040d4a:	2a00      	cmp	r2, #0
10040d4c:	d046      	beq.n	10040ddc <__aeabi_fsub+0x160>
10040d4e:	2dff      	cmp	r5, #255	@ 0xff
10040d50:	d100      	bne.n	10040d54 <__aeabi_fsub+0xd8>
10040d52:	e0a4      	b.n	10040e9e <__aeabi_fsub+0x222>
10040d54:	2280      	movs	r2, #128	@ 0x80
10040d56:	04d2      	lsls	r2, r2, #19
10040d58:	4311      	orrs	r1, r2
10040d5a:	2b1b      	cmp	r3, #27
10040d5c:	dc00      	bgt.n	10040d60 <__aeabi_fsub+0xe4>
10040d5e:	e0fb      	b.n	10040f58 <__aeabi_fsub+0x2dc>
10040d60:	2305      	movs	r3, #5
10040d62:	4698      	mov	r8, r3
10040d64:	002b      	movs	r3, r5
10040d66:	44c4      	add	ip, r8
10040d68:	4662      	mov	r2, ip
10040d6a:	08d7      	lsrs	r7, r2, #3
10040d6c:	2bff      	cmp	r3, #255	@ 0xff
10040d6e:	d100      	bne.n	10040d72 <__aeabi_fsub+0xf6>
10040d70:	e095      	b.n	10040e9e <__aeabi_fsub+0x222>
10040d72:	027a      	lsls	r2, r7, #9
10040d74:	0a52      	lsrs	r2, r2, #9
10040d76:	b2d8      	uxtb	r0, r3
10040d78:	e7dc      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040d7a:	002b      	movs	r3, r5
10040d7c:	3bff      	subs	r3, #255	@ 0xff
10040d7e:	4699      	mov	r9, r3
10040d80:	2900      	cmp	r1, #0
10040d82:	d118      	bne.n	10040db6 <__aeabi_fsub+0x13a>
10040d84:	2301      	movs	r3, #1
10040d86:	405e      	eors	r6, r3
10040d88:	42b4      	cmp	r4, r6
10040d8a:	d100      	bne.n	10040d8e <__aeabi_fsub+0x112>
10040d8c:	e0ca      	b.n	10040f24 <__aeabi_fsub+0x2a8>
10040d8e:	464b      	mov	r3, r9
10040d90:	2b00      	cmp	r3, #0
10040d92:	d02d      	beq.n	10040df0 <__aeabi_fsub+0x174>
10040d94:	2d00      	cmp	r5, #0
10040d96:	d000      	beq.n	10040d9a <__aeabi_fsub+0x11e>
10040d98:	e13c      	b.n	10041014 <__aeabi_fsub+0x398>
10040d9a:	23ff      	movs	r3, #255	@ 0xff
10040d9c:	4664      	mov	r4, ip
10040d9e:	2c00      	cmp	r4, #0
10040da0:	d100      	bne.n	10040da4 <__aeabi_fsub+0x128>
10040da2:	e15f      	b.n	10041064 <__aeabi_fsub+0x3e8>
10040da4:	1e5d      	subs	r5, r3, #1
10040da6:	2b01      	cmp	r3, #1
10040da8:	d100      	bne.n	10040dac <__aeabi_fsub+0x130>
10040daa:	e174      	b.n	10041096 <__aeabi_fsub+0x41a>
10040dac:	0034      	movs	r4, r6
10040dae:	2bff      	cmp	r3, #255	@ 0xff
10040db0:	d074      	beq.n	10040e9c <__aeabi_fsub+0x220>
10040db2:	002b      	movs	r3, r5
10040db4:	e103      	b.n	10040fbe <__aeabi_fsub+0x342>
10040db6:	42b4      	cmp	r4, r6
10040db8:	d100      	bne.n	10040dbc <__aeabi_fsub+0x140>
10040dba:	e09c      	b.n	10040ef6 <__aeabi_fsub+0x27a>
10040dbc:	2b00      	cmp	r3, #0
10040dbe:	d017      	beq.n	10040df0 <__aeabi_fsub+0x174>
10040dc0:	2d00      	cmp	r5, #0
10040dc2:	d0ea      	beq.n	10040d9a <__aeabi_fsub+0x11e>
10040dc4:	0007      	movs	r7, r0
10040dc6:	0034      	movs	r4, r6
10040dc8:	e06c      	b.n	10040ea4 <__aeabi_fsub+0x228>
10040dca:	2900      	cmp	r1, #0
10040dcc:	d0cc      	beq.n	10040d68 <__aeabi_fsub+0xec>
10040dce:	1e5a      	subs	r2, r3, #1
10040dd0:	2b01      	cmp	r3, #1
10040dd2:	d02b      	beq.n	10040e2c <__aeabi_fsub+0x1b0>
10040dd4:	2bff      	cmp	r3, #255	@ 0xff
10040dd6:	d062      	beq.n	10040e9e <__aeabi_fsub+0x222>
10040dd8:	0013      	movs	r3, r2
10040dda:	e773      	b.n	10040cc4 <__aeabi_fsub+0x48>
10040ddc:	2900      	cmp	r1, #0
10040dde:	d0c3      	beq.n	10040d68 <__aeabi_fsub+0xec>
10040de0:	1e5a      	subs	r2, r3, #1
10040de2:	2b01      	cmp	r3, #1
10040de4:	d100      	bne.n	10040de8 <__aeabi_fsub+0x16c>
10040de6:	e11e      	b.n	10041026 <__aeabi_fsub+0x3aa>
10040de8:	2bff      	cmp	r3, #255	@ 0xff
10040dea:	d058      	beq.n	10040e9e <__aeabi_fsub+0x222>
10040dec:	0013      	movs	r3, r2
10040dee:	e7b4      	b.n	10040d5a <__aeabi_fsub+0xde>
10040df0:	22fe      	movs	r2, #254	@ 0xfe
10040df2:	1c6b      	adds	r3, r5, #1
10040df4:	421a      	tst	r2, r3
10040df6:	d10d      	bne.n	10040e14 <__aeabi_fsub+0x198>
10040df8:	2d00      	cmp	r5, #0
10040dfa:	d060      	beq.n	10040ebe <__aeabi_fsub+0x242>
10040dfc:	4663      	mov	r3, ip
10040dfe:	2b00      	cmp	r3, #0
10040e00:	d000      	beq.n	10040e04 <__aeabi_fsub+0x188>
10040e02:	e120      	b.n	10041046 <__aeabi_fsub+0x3ca>
10040e04:	2900      	cmp	r1, #0
10040e06:	d000      	beq.n	10040e0a <__aeabi_fsub+0x18e>
10040e08:	e128      	b.n	1004105c <__aeabi_fsub+0x3e0>
10040e0a:	2280      	movs	r2, #128	@ 0x80
10040e0c:	2400      	movs	r4, #0
10040e0e:	20ff      	movs	r0, #255	@ 0xff
10040e10:	03d2      	lsls	r2, r2, #15
10040e12:	e78f      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040e14:	4663      	mov	r3, ip
10040e16:	1a5f      	subs	r7, r3, r1
10040e18:	017b      	lsls	r3, r7, #5
10040e1a:	d500      	bpl.n	10040e1e <__aeabi_fsub+0x1a2>
10040e1c:	e0fe      	b.n	1004101c <__aeabi_fsub+0x3a0>
10040e1e:	2f00      	cmp	r7, #0
10040e20:	d000      	beq.n	10040e24 <__aeabi_fsub+0x1a8>
10040e22:	e765      	b.n	10040cf0 <__aeabi_fsub+0x74>
10040e24:	2400      	movs	r4, #0
10040e26:	2000      	movs	r0, #0
10040e28:	2200      	movs	r2, #0
10040e2a:	e783      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040e2c:	4663      	mov	r3, ip
10040e2e:	1a59      	subs	r1, r3, r1
10040e30:	014b      	lsls	r3, r1, #5
10040e32:	d400      	bmi.n	10040e36 <__aeabi_fsub+0x1ba>
10040e34:	e119      	b.n	1004106a <__aeabi_fsub+0x3ee>
10040e36:	018f      	lsls	r7, r1, #6
10040e38:	09bf      	lsrs	r7, r7, #6
10040e3a:	0038      	movs	r0, r7
10040e3c:	f7ff fbbc 	bl	100405b8 <__clzsi2>
10040e40:	003b      	movs	r3, r7
10040e42:	3805      	subs	r0, #5
10040e44:	4083      	lsls	r3, r0
10040e46:	2501      	movs	r5, #1
10040e48:	2220      	movs	r2, #32
10040e4a:	1b40      	subs	r0, r0, r5
10040e4c:	3001      	adds	r0, #1
10040e4e:	1a12      	subs	r2, r2, r0
10040e50:	0019      	movs	r1, r3
10040e52:	4093      	lsls	r3, r2
10040e54:	40c1      	lsrs	r1, r0
10040e56:	1e5a      	subs	r2, r3, #1
10040e58:	4193      	sbcs	r3, r2
10040e5a:	4319      	orrs	r1, r3
10040e5c:	468c      	mov	ip, r1
10040e5e:	1e0b      	subs	r3, r1, #0
10040e60:	d0e1      	beq.n	10040e26 <__aeabi_fsub+0x1aa>
10040e62:	075b      	lsls	r3, r3, #29
10040e64:	d100      	bne.n	10040e68 <__aeabi_fsub+0x1ec>
10040e66:	e152      	b.n	1004110e <__aeabi_fsub+0x492>
10040e68:	230f      	movs	r3, #15
10040e6a:	2500      	movs	r5, #0
10040e6c:	400b      	ands	r3, r1
10040e6e:	2b04      	cmp	r3, #4
10040e70:	d000      	beq.n	10040e74 <__aeabi_fsub+0x1f8>
10040e72:	e752      	b.n	10040d1a <__aeabi_fsub+0x9e>
10040e74:	2001      	movs	r0, #1
10040e76:	014a      	lsls	r2, r1, #5
10040e78:	d400      	bmi.n	10040e7c <__aeabi_fsub+0x200>
10040e7a:	e092      	b.n	10040fa2 <__aeabi_fsub+0x326>
10040e7c:	b2c0      	uxtb	r0, r0
10040e7e:	4663      	mov	r3, ip
10040e80:	019a      	lsls	r2, r3, #6
10040e82:	0a52      	lsrs	r2, r2, #9
10040e84:	e756      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040e86:	4663      	mov	r3, ip
10040e88:	075b      	lsls	r3, r3, #29
10040e8a:	d005      	beq.n	10040e98 <__aeabi_fsub+0x21c>
10040e8c:	230f      	movs	r3, #15
10040e8e:	4662      	mov	r2, ip
10040e90:	4013      	ands	r3, r2
10040e92:	2b04      	cmp	r3, #4
10040e94:	d000      	beq.n	10040e98 <__aeabi_fsub+0x21c>
10040e96:	e740      	b.n	10040d1a <__aeabi_fsub+0x9e>
10040e98:	002b      	movs	r3, r5
10040e9a:	e765      	b.n	10040d68 <__aeabi_fsub+0xec>
10040e9c:	0007      	movs	r7, r0
10040e9e:	2f00      	cmp	r7, #0
10040ea0:	d100      	bne.n	10040ea4 <__aeabi_fsub+0x228>
10040ea2:	e745      	b.n	10040d30 <__aeabi_fsub+0xb4>
10040ea4:	2280      	movs	r2, #128	@ 0x80
10040ea6:	03d2      	lsls	r2, r2, #15
10040ea8:	433a      	orrs	r2, r7
10040eaa:	0252      	lsls	r2, r2, #9
10040eac:	20ff      	movs	r0, #255	@ 0xff
10040eae:	0a52      	lsrs	r2, r2, #9
10040eb0:	e740      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040eb2:	2b00      	cmp	r3, #0
10040eb4:	d179      	bne.n	10040faa <__aeabi_fsub+0x32e>
10040eb6:	22fe      	movs	r2, #254	@ 0xfe
10040eb8:	1c6b      	adds	r3, r5, #1
10040eba:	421a      	tst	r2, r3
10040ebc:	d1aa      	bne.n	10040e14 <__aeabi_fsub+0x198>
10040ebe:	4663      	mov	r3, ip
10040ec0:	2b00      	cmp	r3, #0
10040ec2:	d100      	bne.n	10040ec6 <__aeabi_fsub+0x24a>
10040ec4:	e0f5      	b.n	100410b2 <__aeabi_fsub+0x436>
10040ec6:	2900      	cmp	r1, #0
10040ec8:	d100      	bne.n	10040ecc <__aeabi_fsub+0x250>
10040eca:	e0d1      	b.n	10041070 <__aeabi_fsub+0x3f4>
10040ecc:	1a5f      	subs	r7, r3, r1
10040ece:	2380      	movs	r3, #128	@ 0x80
10040ed0:	04db      	lsls	r3, r3, #19
10040ed2:	421f      	tst	r7, r3
10040ed4:	d100      	bne.n	10040ed8 <__aeabi_fsub+0x25c>
10040ed6:	e10e      	b.n	100410f6 <__aeabi_fsub+0x47a>
10040ed8:	4662      	mov	r2, ip
10040eda:	2401      	movs	r4, #1
10040edc:	1a8a      	subs	r2, r1, r2
10040ede:	4694      	mov	ip, r2
10040ee0:	2000      	movs	r0, #0
10040ee2:	4034      	ands	r4, r6
10040ee4:	2a00      	cmp	r2, #0
10040ee6:	d100      	bne.n	10040eea <__aeabi_fsub+0x26e>
10040ee8:	e724      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040eea:	2001      	movs	r0, #1
10040eec:	421a      	tst	r2, r3
10040eee:	d1c6      	bne.n	10040e7e <__aeabi_fsub+0x202>
10040ef0:	2300      	movs	r3, #0
10040ef2:	08d7      	lsrs	r7, r2, #3
10040ef4:	e73d      	b.n	10040d72 <__aeabi_fsub+0xf6>
10040ef6:	2b00      	cmp	r3, #0
10040ef8:	d017      	beq.n	10040f2a <__aeabi_fsub+0x2ae>
10040efa:	2d00      	cmp	r5, #0
10040efc:	d000      	beq.n	10040f00 <__aeabi_fsub+0x284>
10040efe:	e0af      	b.n	10041060 <__aeabi_fsub+0x3e4>
10040f00:	23ff      	movs	r3, #255	@ 0xff
10040f02:	4665      	mov	r5, ip
10040f04:	2d00      	cmp	r5, #0
10040f06:	d100      	bne.n	10040f0a <__aeabi_fsub+0x28e>
10040f08:	e0ad      	b.n	10041066 <__aeabi_fsub+0x3ea>
10040f0a:	1e5e      	subs	r6, r3, #1
10040f0c:	2b01      	cmp	r3, #1
10040f0e:	d100      	bne.n	10040f12 <__aeabi_fsub+0x296>
10040f10:	e089      	b.n	10041026 <__aeabi_fsub+0x3aa>
10040f12:	2bff      	cmp	r3, #255	@ 0xff
10040f14:	d0c2      	beq.n	10040e9c <__aeabi_fsub+0x220>
10040f16:	2e1b      	cmp	r6, #27
10040f18:	dc00      	bgt.n	10040f1c <__aeabi_fsub+0x2a0>
10040f1a:	e0ab      	b.n	10041074 <__aeabi_fsub+0x3f8>
10040f1c:	1d4b      	adds	r3, r1, #5
10040f1e:	469c      	mov	ip, r3
10040f20:	0013      	movs	r3, r2
10040f22:	e721      	b.n	10040d68 <__aeabi_fsub+0xec>
10040f24:	464b      	mov	r3, r9
10040f26:	2b00      	cmp	r3, #0
10040f28:	d170      	bne.n	1004100c <__aeabi_fsub+0x390>
10040f2a:	22fe      	movs	r2, #254	@ 0xfe
10040f2c:	1c6b      	adds	r3, r5, #1
10040f2e:	421a      	tst	r2, r3
10040f30:	d15e      	bne.n	10040ff0 <__aeabi_fsub+0x374>
10040f32:	2d00      	cmp	r5, #0
10040f34:	d000      	beq.n	10040f38 <__aeabi_fsub+0x2bc>
10040f36:	e0c3      	b.n	100410c0 <__aeabi_fsub+0x444>
10040f38:	4663      	mov	r3, ip
10040f3a:	2b00      	cmp	r3, #0
10040f3c:	d100      	bne.n	10040f40 <__aeabi_fsub+0x2c4>
10040f3e:	e0d0      	b.n	100410e2 <__aeabi_fsub+0x466>
10040f40:	2900      	cmp	r1, #0
10040f42:	d100      	bne.n	10040f46 <__aeabi_fsub+0x2ca>
10040f44:	e094      	b.n	10041070 <__aeabi_fsub+0x3f4>
10040f46:	000a      	movs	r2, r1
10040f48:	4462      	add	r2, ip
10040f4a:	0153      	lsls	r3, r2, #5
10040f4c:	d400      	bmi.n	10040f50 <__aeabi_fsub+0x2d4>
10040f4e:	e0d8      	b.n	10041102 <__aeabi_fsub+0x486>
10040f50:	0192      	lsls	r2, r2, #6
10040f52:	2001      	movs	r0, #1
10040f54:	0a52      	lsrs	r2, r2, #9
10040f56:	e6ed      	b.n	10040d34 <__aeabi_fsub+0xb8>
10040f58:	0008      	movs	r0, r1
10040f5a:	2220      	movs	r2, #32
10040f5c:	40d8      	lsrs	r0, r3
10040f5e:	1ad3      	subs	r3, r2, r3
10040f60:	4099      	lsls	r1, r3
10040f62:	000b      	movs	r3, r1
10040f64:	1e5a      	subs	r2, r3, #1
10040f66:	4193      	sbcs	r3, r2
10040f68:	4303      	orrs	r3, r0
10040f6a:	449c      	add	ip, r3
10040f6c:	4663      	mov	r3, ip
10040f6e:	015b      	lsls	r3, r3, #5
10040f70:	d589      	bpl.n	10040e86 <__aeabi_fsub+0x20a>
10040f72:	3501      	adds	r5, #1
10040f74:	2dff      	cmp	r5, #255	@ 0xff
10040f76:	d100      	bne.n	10040f7a <__aeabi_fsub+0x2fe>
10040f78:	e6da      	b.n	10040d30 <__aeabi_fsub+0xb4>
10040f7a:	4662      	mov	r2, ip
10040f7c:	2301      	movs	r3, #1
10040f7e:	4919      	ldr	r1, [pc, #100]	@ (10040fe4 <__aeabi_fsub+0x368>)
10040f80:	4013      	ands	r3, r2
10040f82:	0852      	lsrs	r2, r2, #1
10040f84:	400a      	ands	r2, r1
10040f86:	431a      	orrs	r2, r3
10040f88:	0013      	movs	r3, r2
10040f8a:	4694      	mov	ip, r2
10040f8c:	075b      	lsls	r3, r3, #29
10040f8e:	d004      	beq.n	10040f9a <__aeabi_fsub+0x31e>
10040f90:	230f      	movs	r3, #15
10040f92:	4013      	ands	r3, r2
10040f94:	2b04      	cmp	r3, #4
10040f96:	d000      	beq.n	10040f9a <__aeabi_fsub+0x31e>
10040f98:	e6bf      	b.n	10040d1a <__aeabi_fsub+0x9e>
10040f9a:	4663      	mov	r3, ip
10040f9c:	015b      	lsls	r3, r3, #5
10040f9e:	d500      	bpl.n	10040fa2 <__aeabi_fsub+0x326>
10040fa0:	e6c2      	b.n	10040d28 <__aeabi_fsub+0xac>
10040fa2:	4663      	mov	r3, ip
10040fa4:	08df      	lsrs	r7, r3, #3
10040fa6:	002b      	movs	r3, r5
10040fa8:	e6e3      	b.n	10040d72 <__aeabi_fsub+0xf6>
10040faa:	1b53      	subs	r3, r2, r5
10040fac:	2d00      	cmp	r5, #0
10040fae:	d100      	bne.n	10040fb2 <__aeabi_fsub+0x336>
10040fb0:	e6f4      	b.n	10040d9c <__aeabi_fsub+0x120>
10040fb2:	2080      	movs	r0, #128	@ 0x80
10040fb4:	4664      	mov	r4, ip
10040fb6:	04c0      	lsls	r0, r0, #19
10040fb8:	4304      	orrs	r4, r0
10040fba:	46a4      	mov	ip, r4
10040fbc:	0034      	movs	r4, r6
10040fbe:	2001      	movs	r0, #1
10040fc0:	2b1b      	cmp	r3, #27
10040fc2:	dc09      	bgt.n	10040fd8 <__aeabi_fsub+0x35c>
10040fc4:	2520      	movs	r5, #32
10040fc6:	4660      	mov	r0, ip
10040fc8:	40d8      	lsrs	r0, r3
10040fca:	1aeb      	subs	r3, r5, r3
10040fcc:	4665      	mov	r5, ip
10040fce:	409d      	lsls	r5, r3
10040fd0:	002b      	movs	r3, r5
10040fd2:	1e5d      	subs	r5, r3, #1
10040fd4:	41ab      	sbcs	r3, r5
10040fd6:	4318      	orrs	r0, r3
10040fd8:	1a0b      	subs	r3, r1, r0
10040fda:	469c      	mov	ip, r3
10040fdc:	0015      	movs	r5, r2
10040fde:	e680      	b.n	10040ce2 <__aeabi_fsub+0x66>
10040fe0:	fbffffff 	.word	0xfbffffff
10040fe4:	7dffffff 	.word	0x7dffffff
10040fe8:	22fe      	movs	r2, #254	@ 0xfe
10040fea:	1c6b      	adds	r3, r5, #1
10040fec:	4213      	tst	r3, r2
10040fee:	d0a3      	beq.n	10040f38 <__aeabi_fsub+0x2bc>
10040ff0:	2bff      	cmp	r3, #255	@ 0xff
10040ff2:	d100      	bne.n	10040ff6 <__aeabi_fsub+0x37a>
10040ff4:	e69c      	b.n	10040d30 <__aeabi_fsub+0xb4>
10040ff6:	4461      	add	r1, ip
10040ff8:	0849      	lsrs	r1, r1, #1
10040ffa:	074a      	lsls	r2, r1, #29
10040ffc:	d049      	beq.n	10041092 <__aeabi_fsub+0x416>
10040ffe:	220f      	movs	r2, #15
10041000:	400a      	ands	r2, r1
10041002:	2a04      	cmp	r2, #4
10041004:	d045      	beq.n	10041092 <__aeabi_fsub+0x416>
10041006:	1d0a      	adds	r2, r1, #4
10041008:	4694      	mov	ip, r2
1004100a:	e6ad      	b.n	10040d68 <__aeabi_fsub+0xec>
1004100c:	2d00      	cmp	r5, #0
1004100e:	d100      	bne.n	10041012 <__aeabi_fsub+0x396>
10041010:	e776      	b.n	10040f00 <__aeabi_fsub+0x284>
10041012:	e68d      	b.n	10040d30 <__aeabi_fsub+0xb4>
10041014:	0034      	movs	r4, r6
10041016:	20ff      	movs	r0, #255	@ 0xff
10041018:	2200      	movs	r2, #0
1004101a:	e68b      	b.n	10040d34 <__aeabi_fsub+0xb8>
1004101c:	4663      	mov	r3, ip
1004101e:	2401      	movs	r4, #1
10041020:	1acf      	subs	r7, r1, r3
10041022:	4034      	ands	r4, r6
10041024:	e664      	b.n	10040cf0 <__aeabi_fsub+0x74>
10041026:	4461      	add	r1, ip
10041028:	014b      	lsls	r3, r1, #5
1004102a:	d56d      	bpl.n	10041108 <__aeabi_fsub+0x48c>
1004102c:	0848      	lsrs	r0, r1, #1
1004102e:	4944      	ldr	r1, [pc, #272]	@ (10041140 <__aeabi_fsub+0x4c4>)
10041030:	4001      	ands	r1, r0
10041032:	0743      	lsls	r3, r0, #29
10041034:	d02c      	beq.n	10041090 <__aeabi_fsub+0x414>
10041036:	230f      	movs	r3, #15
10041038:	4003      	ands	r3, r0
1004103a:	2b04      	cmp	r3, #4
1004103c:	d028      	beq.n	10041090 <__aeabi_fsub+0x414>
1004103e:	1d0b      	adds	r3, r1, #4
10041040:	469c      	mov	ip, r3
10041042:	2302      	movs	r3, #2
10041044:	e690      	b.n	10040d68 <__aeabi_fsub+0xec>
10041046:	2900      	cmp	r1, #0
10041048:	d100      	bne.n	1004104c <__aeabi_fsub+0x3d0>
1004104a:	e72b      	b.n	10040ea4 <__aeabi_fsub+0x228>
1004104c:	2380      	movs	r3, #128	@ 0x80
1004104e:	03db      	lsls	r3, r3, #15
10041050:	429f      	cmp	r7, r3
10041052:	d200      	bcs.n	10041056 <__aeabi_fsub+0x3da>
10041054:	e726      	b.n	10040ea4 <__aeabi_fsub+0x228>
10041056:	4298      	cmp	r0, r3
10041058:	d300      	bcc.n	1004105c <__aeabi_fsub+0x3e0>
1004105a:	e723      	b.n	10040ea4 <__aeabi_fsub+0x228>
1004105c:	2401      	movs	r4, #1
1004105e:	4034      	ands	r4, r6
10041060:	0007      	movs	r7, r0
10041062:	e71f      	b.n	10040ea4 <__aeabi_fsub+0x228>
10041064:	0034      	movs	r4, r6
10041066:	468c      	mov	ip, r1
10041068:	e67e      	b.n	10040d68 <__aeabi_fsub+0xec>
1004106a:	2301      	movs	r3, #1
1004106c:	08cf      	lsrs	r7, r1, #3
1004106e:	e680      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041070:	2300      	movs	r3, #0
10041072:	e67e      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041074:	2020      	movs	r0, #32
10041076:	4665      	mov	r5, ip
10041078:	1b80      	subs	r0, r0, r6
1004107a:	4085      	lsls	r5, r0
1004107c:	4663      	mov	r3, ip
1004107e:	0028      	movs	r0, r5
10041080:	40f3      	lsrs	r3, r6
10041082:	1e45      	subs	r5, r0, #1
10041084:	41a8      	sbcs	r0, r5
10041086:	4303      	orrs	r3, r0
10041088:	469c      	mov	ip, r3
1004108a:	0015      	movs	r5, r2
1004108c:	448c      	add	ip, r1
1004108e:	e76d      	b.n	10040f6c <__aeabi_fsub+0x2f0>
10041090:	2302      	movs	r3, #2
10041092:	08cf      	lsrs	r7, r1, #3
10041094:	e66d      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041096:	1b0f      	subs	r7, r1, r4
10041098:	017b      	lsls	r3, r7, #5
1004109a:	d528      	bpl.n	100410ee <__aeabi_fsub+0x472>
1004109c:	01bf      	lsls	r7, r7, #6
1004109e:	09bf      	lsrs	r7, r7, #6
100410a0:	0038      	movs	r0, r7
100410a2:	f7ff fa89 	bl	100405b8 <__clzsi2>
100410a6:	003b      	movs	r3, r7
100410a8:	3805      	subs	r0, #5
100410aa:	4083      	lsls	r3, r0
100410ac:	0034      	movs	r4, r6
100410ae:	2501      	movs	r5, #1
100410b0:	e6ca      	b.n	10040e48 <__aeabi_fsub+0x1cc>
100410b2:	2900      	cmp	r1, #0
100410b4:	d100      	bne.n	100410b8 <__aeabi_fsub+0x43c>
100410b6:	e6b5      	b.n	10040e24 <__aeabi_fsub+0x1a8>
100410b8:	2401      	movs	r4, #1
100410ba:	0007      	movs	r7, r0
100410bc:	4034      	ands	r4, r6
100410be:	e658      	b.n	10040d72 <__aeabi_fsub+0xf6>
100410c0:	4663      	mov	r3, ip
100410c2:	2b00      	cmp	r3, #0
100410c4:	d100      	bne.n	100410c8 <__aeabi_fsub+0x44c>
100410c6:	e6e9      	b.n	10040e9c <__aeabi_fsub+0x220>
100410c8:	2900      	cmp	r1, #0
100410ca:	d100      	bne.n	100410ce <__aeabi_fsub+0x452>
100410cc:	e6ea      	b.n	10040ea4 <__aeabi_fsub+0x228>
100410ce:	2380      	movs	r3, #128	@ 0x80
100410d0:	03db      	lsls	r3, r3, #15
100410d2:	429f      	cmp	r7, r3
100410d4:	d200      	bcs.n	100410d8 <__aeabi_fsub+0x45c>
100410d6:	e6e5      	b.n	10040ea4 <__aeabi_fsub+0x228>
100410d8:	4298      	cmp	r0, r3
100410da:	d300      	bcc.n	100410de <__aeabi_fsub+0x462>
100410dc:	e6e2      	b.n	10040ea4 <__aeabi_fsub+0x228>
100410de:	0007      	movs	r7, r0
100410e0:	e6e0      	b.n	10040ea4 <__aeabi_fsub+0x228>
100410e2:	2900      	cmp	r1, #0
100410e4:	d100      	bne.n	100410e8 <__aeabi_fsub+0x46c>
100410e6:	e69e      	b.n	10040e26 <__aeabi_fsub+0x1aa>
100410e8:	2300      	movs	r3, #0
100410ea:	08cf      	lsrs	r7, r1, #3
100410ec:	e641      	b.n	10040d72 <__aeabi_fsub+0xf6>
100410ee:	0034      	movs	r4, r6
100410f0:	2301      	movs	r3, #1
100410f2:	08ff      	lsrs	r7, r7, #3
100410f4:	e63d      	b.n	10040d72 <__aeabi_fsub+0xf6>
100410f6:	2f00      	cmp	r7, #0
100410f8:	d100      	bne.n	100410fc <__aeabi_fsub+0x480>
100410fa:	e693      	b.n	10040e24 <__aeabi_fsub+0x1a8>
100410fc:	2300      	movs	r3, #0
100410fe:	08ff      	lsrs	r7, r7, #3
10041100:	e637      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041102:	2300      	movs	r3, #0
10041104:	08d7      	lsrs	r7, r2, #3
10041106:	e634      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041108:	2301      	movs	r3, #1
1004110a:	08cf      	lsrs	r7, r1, #3
1004110c:	e631      	b.n	10040d72 <__aeabi_fsub+0xf6>
1004110e:	2280      	movs	r2, #128	@ 0x80
10041110:	000b      	movs	r3, r1
10041112:	04d2      	lsls	r2, r2, #19
10041114:	2001      	movs	r0, #1
10041116:	4013      	ands	r3, r2
10041118:	4211      	tst	r1, r2
1004111a:	d000      	beq.n	1004111e <__aeabi_fsub+0x4a2>
1004111c:	e6ae      	b.n	10040e7c <__aeabi_fsub+0x200>
1004111e:	08cf      	lsrs	r7, r1, #3
10041120:	e627      	b.n	10040d72 <__aeabi_fsub+0xf6>
10041122:	2b00      	cmp	r3, #0
10041124:	d100      	bne.n	10041128 <__aeabi_fsub+0x4ac>
10041126:	e75f      	b.n	10040fe8 <__aeabi_fsub+0x36c>
10041128:	1b56      	subs	r6, r2, r5
1004112a:	2d00      	cmp	r5, #0
1004112c:	d101      	bne.n	10041132 <__aeabi_fsub+0x4b6>
1004112e:	0033      	movs	r3, r6
10041130:	e6e7      	b.n	10040f02 <__aeabi_fsub+0x286>
10041132:	2380      	movs	r3, #128	@ 0x80
10041134:	4660      	mov	r0, ip
10041136:	04db      	lsls	r3, r3, #19
10041138:	4318      	orrs	r0, r3
1004113a:	4684      	mov	ip, r0
1004113c:	e6eb      	b.n	10040f16 <__aeabi_fsub+0x29a>
1004113e:	46c0      	nop			@ (mov r8, r8)
10041140:	7dffffff 	.word	0x7dffffff

10041144 <__aeabi_f2iz>:
10041144:	0241      	lsls	r1, r0, #9
10041146:	0042      	lsls	r2, r0, #1
10041148:	0fc3      	lsrs	r3, r0, #31
1004114a:	0a49      	lsrs	r1, r1, #9
1004114c:	2000      	movs	r0, #0
1004114e:	0e12      	lsrs	r2, r2, #24
10041150:	2a7e      	cmp	r2, #126	@ 0x7e
10041152:	dd03      	ble.n	1004115c <__aeabi_f2iz+0x18>
10041154:	2a9d      	cmp	r2, #157	@ 0x9d
10041156:	dd02      	ble.n	1004115e <__aeabi_f2iz+0x1a>
10041158:	4a09      	ldr	r2, [pc, #36]	@ (10041180 <__aeabi_f2iz+0x3c>)
1004115a:	1898      	adds	r0, r3, r2
1004115c:	4770      	bx	lr
1004115e:	2080      	movs	r0, #128	@ 0x80
10041160:	0400      	lsls	r0, r0, #16
10041162:	4301      	orrs	r1, r0
10041164:	2a95      	cmp	r2, #149	@ 0x95
10041166:	dc07      	bgt.n	10041178 <__aeabi_f2iz+0x34>
10041168:	2096      	movs	r0, #150	@ 0x96
1004116a:	1a82      	subs	r2, r0, r2
1004116c:	40d1      	lsrs	r1, r2
1004116e:	4248      	negs	r0, r1
10041170:	2b00      	cmp	r3, #0
10041172:	d1f3      	bne.n	1004115c <__aeabi_f2iz+0x18>
10041174:	0008      	movs	r0, r1
10041176:	e7f1      	b.n	1004115c <__aeabi_f2iz+0x18>
10041178:	3a96      	subs	r2, #150	@ 0x96
1004117a:	4091      	lsls	r1, r2
1004117c:	e7f7      	b.n	1004116e <__aeabi_f2iz+0x2a>
1004117e:	46c0      	nop			@ (mov r8, r8)
10041180:	7fffffff 	.word	0x7fffffff

10041184 <__aeabi_i2f>:
10041184:	b570      	push	{r4, r5, r6, lr}
10041186:	2800      	cmp	r0, #0
10041188:	d012      	beq.n	100411b0 <__aeabi_i2f+0x2c>
1004118a:	17c3      	asrs	r3, r0, #31
1004118c:	18c5      	adds	r5, r0, r3
1004118e:	405d      	eors	r5, r3
10041190:	0fc4      	lsrs	r4, r0, #31
10041192:	0028      	movs	r0, r5
10041194:	f7ff fa10 	bl	100405b8 <__clzsi2>
10041198:	239e      	movs	r3, #158	@ 0x9e
1004119a:	1a1b      	subs	r3, r3, r0
1004119c:	2b96      	cmp	r3, #150	@ 0x96
1004119e:	dc0f      	bgt.n	100411c0 <__aeabi_i2f+0x3c>
100411a0:	2808      	cmp	r0, #8
100411a2:	d038      	beq.n	10041216 <__aeabi_i2f+0x92>
100411a4:	3808      	subs	r0, #8
100411a6:	4085      	lsls	r5, r0
100411a8:	026d      	lsls	r5, r5, #9
100411aa:	0a6d      	lsrs	r5, r5, #9
100411ac:	b2d8      	uxtb	r0, r3
100411ae:	e002      	b.n	100411b6 <__aeabi_i2f+0x32>
100411b0:	2400      	movs	r4, #0
100411b2:	2000      	movs	r0, #0
100411b4:	2500      	movs	r5, #0
100411b6:	05c0      	lsls	r0, r0, #23
100411b8:	4328      	orrs	r0, r5
100411ba:	07e4      	lsls	r4, r4, #31
100411bc:	4320      	orrs	r0, r4
100411be:	bd70      	pop	{r4, r5, r6, pc}
100411c0:	2b99      	cmp	r3, #153	@ 0x99
100411c2:	dc14      	bgt.n	100411ee <__aeabi_i2f+0x6a>
100411c4:	1f42      	subs	r2, r0, #5
100411c6:	4095      	lsls	r5, r2
100411c8:	002a      	movs	r2, r5
100411ca:	4915      	ldr	r1, [pc, #84]	@ (10041220 <__aeabi_i2f+0x9c>)
100411cc:	4011      	ands	r1, r2
100411ce:	0755      	lsls	r5, r2, #29
100411d0:	d01c      	beq.n	1004120c <__aeabi_i2f+0x88>
100411d2:	250f      	movs	r5, #15
100411d4:	402a      	ands	r2, r5
100411d6:	2a04      	cmp	r2, #4
100411d8:	d018      	beq.n	1004120c <__aeabi_i2f+0x88>
100411da:	3104      	adds	r1, #4
100411dc:	08ca      	lsrs	r2, r1, #3
100411de:	0149      	lsls	r1, r1, #5
100411e0:	d515      	bpl.n	1004120e <__aeabi_i2f+0x8a>
100411e2:	239f      	movs	r3, #159	@ 0x9f
100411e4:	0252      	lsls	r2, r2, #9
100411e6:	1a18      	subs	r0, r3, r0
100411e8:	0a55      	lsrs	r5, r2, #9
100411ea:	b2c0      	uxtb	r0, r0
100411ec:	e7e3      	b.n	100411b6 <__aeabi_i2f+0x32>
100411ee:	2205      	movs	r2, #5
100411f0:	0029      	movs	r1, r5
100411f2:	1a12      	subs	r2, r2, r0
100411f4:	40d1      	lsrs	r1, r2
100411f6:	0002      	movs	r2, r0
100411f8:	321b      	adds	r2, #27
100411fa:	4095      	lsls	r5, r2
100411fc:	002a      	movs	r2, r5
100411fe:	1e55      	subs	r5, r2, #1
10041200:	41aa      	sbcs	r2, r5
10041202:	430a      	orrs	r2, r1
10041204:	4906      	ldr	r1, [pc, #24]	@ (10041220 <__aeabi_i2f+0x9c>)
10041206:	4011      	ands	r1, r2
10041208:	0755      	lsls	r5, r2, #29
1004120a:	d1e2      	bne.n	100411d2 <__aeabi_i2f+0x4e>
1004120c:	08ca      	lsrs	r2, r1, #3
1004120e:	0252      	lsls	r2, r2, #9
10041210:	0a55      	lsrs	r5, r2, #9
10041212:	b2d8      	uxtb	r0, r3
10041214:	e7cf      	b.n	100411b6 <__aeabi_i2f+0x32>
10041216:	026d      	lsls	r5, r5, #9
10041218:	0a6d      	lsrs	r5, r5, #9
1004121a:	308e      	adds	r0, #142	@ 0x8e
1004121c:	e7cb      	b.n	100411b6 <__aeabi_i2f+0x32>
1004121e:	46c0      	nop			@ (mov r8, r8)
10041220:	fbffffff 	.word	0xfbffffff

10041224 <__aeabi_ui2f>:
10041224:	b510      	push	{r4, lr}
10041226:	1e04      	subs	r4, r0, #0
10041228:	d00d      	beq.n	10041246 <__aeabi_ui2f+0x22>
1004122a:	f7ff f9c5 	bl	100405b8 <__clzsi2>
1004122e:	239e      	movs	r3, #158	@ 0x9e
10041230:	1a1b      	subs	r3, r3, r0
10041232:	2b96      	cmp	r3, #150	@ 0x96
10041234:	dc0c      	bgt.n	10041250 <__aeabi_ui2f+0x2c>
10041236:	2808      	cmp	r0, #8
10041238:	d034      	beq.n	100412a4 <__aeabi_ui2f+0x80>
1004123a:	3808      	subs	r0, #8
1004123c:	4084      	lsls	r4, r0
1004123e:	0264      	lsls	r4, r4, #9
10041240:	0a64      	lsrs	r4, r4, #9
10041242:	b2d8      	uxtb	r0, r3
10041244:	e001      	b.n	1004124a <__aeabi_ui2f+0x26>
10041246:	2000      	movs	r0, #0
10041248:	2400      	movs	r4, #0
1004124a:	05c0      	lsls	r0, r0, #23
1004124c:	4320      	orrs	r0, r4
1004124e:	bd10      	pop	{r4, pc}
10041250:	2b99      	cmp	r3, #153	@ 0x99
10041252:	dc13      	bgt.n	1004127c <__aeabi_ui2f+0x58>
10041254:	1f42      	subs	r2, r0, #5
10041256:	4094      	lsls	r4, r2
10041258:	4a14      	ldr	r2, [pc, #80]	@ (100412ac <__aeabi_ui2f+0x88>)
1004125a:	4022      	ands	r2, r4
1004125c:	0761      	lsls	r1, r4, #29
1004125e:	d01c      	beq.n	1004129a <__aeabi_ui2f+0x76>
10041260:	210f      	movs	r1, #15
10041262:	4021      	ands	r1, r4
10041264:	2904      	cmp	r1, #4
10041266:	d018      	beq.n	1004129a <__aeabi_ui2f+0x76>
10041268:	3204      	adds	r2, #4
1004126a:	08d4      	lsrs	r4, r2, #3
1004126c:	0152      	lsls	r2, r2, #5
1004126e:	d515      	bpl.n	1004129c <__aeabi_ui2f+0x78>
10041270:	239f      	movs	r3, #159	@ 0x9f
10041272:	0264      	lsls	r4, r4, #9
10041274:	1a18      	subs	r0, r3, r0
10041276:	0a64      	lsrs	r4, r4, #9
10041278:	b2c0      	uxtb	r0, r0
1004127a:	e7e6      	b.n	1004124a <__aeabi_ui2f+0x26>
1004127c:	0002      	movs	r2, r0
1004127e:	0021      	movs	r1, r4
10041280:	321b      	adds	r2, #27
10041282:	4091      	lsls	r1, r2
10041284:	000a      	movs	r2, r1
10041286:	1e51      	subs	r1, r2, #1
10041288:	418a      	sbcs	r2, r1
1004128a:	2105      	movs	r1, #5
1004128c:	1a09      	subs	r1, r1, r0
1004128e:	40cc      	lsrs	r4, r1
10041290:	4314      	orrs	r4, r2
10041292:	4a06      	ldr	r2, [pc, #24]	@ (100412ac <__aeabi_ui2f+0x88>)
10041294:	4022      	ands	r2, r4
10041296:	0761      	lsls	r1, r4, #29
10041298:	d1e2      	bne.n	10041260 <__aeabi_ui2f+0x3c>
1004129a:	08d4      	lsrs	r4, r2, #3
1004129c:	0264      	lsls	r4, r4, #9
1004129e:	0a64      	lsrs	r4, r4, #9
100412a0:	b2d8      	uxtb	r0, r3
100412a2:	e7d2      	b.n	1004124a <__aeabi_ui2f+0x26>
100412a4:	0264      	lsls	r4, r4, #9
100412a6:	0a64      	lsrs	r4, r4, #9
100412a8:	308e      	adds	r0, #142	@ 0x8e
100412aa:	e7ce      	b.n	1004124a <__aeabi_ui2f+0x26>
100412ac:	fbffffff 	.word	0xfbffffff

100412b0 <__clzdi2>:
100412b0:	b510      	push	{r4, lr}
100412b2:	2900      	cmp	r1, #0
100412b4:	d103      	bne.n	100412be <__clzdi2+0xe>
100412b6:	f7ff f97f 	bl	100405b8 <__clzsi2>
100412ba:	3020      	adds	r0, #32
100412bc:	e002      	b.n	100412c4 <__clzdi2+0x14>
100412be:	0008      	movs	r0, r1
100412c0:	f7ff f97a 	bl	100405b8 <__clzsi2>
100412c4:	bd10      	pop	{r4, pc}
100412c6:	46c0      	nop			@ (mov r8, r8)

100412c8 <BLUETOOTH_BufferInit>:
 * @function: BLUETOOTH_BufferInit()
 * @brief: initialize the the bluetooth tx buffer for virtual USART communication
 * @param: none
 * @return: none
 */
void BLUETOOTH_BufferInit(){
100412c8:	b580      	push	{r7, lr}
100412ca:	af00      	add	r7, sp, #0
	buffer.head = 0;
100412cc:	4a07      	ldr	r2, [pc, #28]	@ (100412ec <BLUETOOTH_BufferInit+0x24>)
100412ce:	2380      	movs	r3, #128	@ 0x80
100412d0:	009b      	lsls	r3, r3, #2
100412d2:	2100      	movs	r1, #0
100412d4:	54d1      	strb	r1, [r2, r3]
	buffer.tail = 0;
100412d6:	4b05      	ldr	r3, [pc, #20]	@ (100412ec <BLUETOOTH_BufferInit+0x24>)
100412d8:	4a05      	ldr	r2, [pc, #20]	@ (100412f0 <BLUETOOTH_BufferInit+0x28>)
100412da:	2100      	movs	r1, #0
100412dc:	5499      	strb	r1, [r3, r2]
	buffer.full = 0;
100412de:	4b03      	ldr	r3, [pc, #12]	@ (100412ec <BLUETOOTH_BufferInit+0x24>)
100412e0:	4a04      	ldr	r2, [pc, #16]	@ (100412f4 <BLUETOOTH_BufferInit+0x2c>)
100412e2:	2100      	movs	r1, #0
100412e4:	5499      	strb	r1, [r3, r2]
}
100412e6:	46c0      	nop			@ (mov r8, r8)
100412e8:	46bd      	mov	sp, r7
100412ea:	bd80      	pop	{r7, pc}
100412ec:	20000194 	.word	0x20000194
100412f0:	00000201 	.word	0x00000201
100412f4:	00000202 	.word	0x00000202

100412f8 <BLUETOOTH_WriteBuffer>:
 * @function: BLUETOOTH_WriteBuffer(uint8_t input)
 * @brief: places one character into the buffer for the external PC to read
 * @param: input: character to be placed in buffer
 * @return: none
 */
uint8_t BLUETOOTH_WriteBuffer(uint8_t input){
100412f8:	b580      	push	{r7, lr}
100412fa:	b082      	sub	sp, #8
100412fc:	af00      	add	r7, sp, #0
100412fe:	0002      	movs	r2, r0
10041300:	1dfb      	adds	r3, r7, #7
10041302:	701a      	strb	r2, [r3, #0]
	if(!buffer.full){
10041304:	4b1f      	ldr	r3, [pc, #124]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
10041306:	4a20      	ldr	r2, [pc, #128]	@ (10041388 <BLUETOOTH_WriteBuffer+0x90>)
10041308:	5c9b      	ldrb	r3, [r3, r2]
1004130a:	2b00      	cmp	r3, #0
1004130c:	d134      	bne.n	10041378 <BLUETOOTH_WriteBuffer+0x80>
		buffer.data[buffer.head] = input;
1004130e:	4a1d      	ldr	r2, [pc, #116]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
10041310:	2380      	movs	r3, #128	@ 0x80
10041312:	009b      	lsls	r3, r3, #2
10041314:	5cd3      	ldrb	r3, [r2, r3]
10041316:	0019      	movs	r1, r3
10041318:	4b1a      	ldr	r3, [pc, #104]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
1004131a:	1dfa      	adds	r2, r7, #7
1004131c:	7812      	ldrb	r2, [r2, #0]
1004131e:	545a      	strb	r2, [r3, r1]
		buffer.head++;
10041320:	4a18      	ldr	r2, [pc, #96]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
10041322:	2380      	movs	r3, #128	@ 0x80
10041324:	009b      	lsls	r3, r3, #2
10041326:	5cd3      	ldrb	r3, [r2, r3]
10041328:	3301      	adds	r3, #1
1004132a:	b2d9      	uxtb	r1, r3
1004132c:	4a15      	ldr	r2, [pc, #84]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
1004132e:	2380      	movs	r3, #128	@ 0x80
10041330:	009b      	lsls	r3, r3, #2
10041332:	54d1      	strb	r1, [r2, r3]
		buffer.head %= BTBUFFERSIZE;
10041334:	4a13      	ldr	r2, [pc, #76]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
10041336:	2380      	movs	r3, #128	@ 0x80
10041338:	009b      	lsls	r3, r3, #2
1004133a:	5cd1      	ldrb	r1, [r2, r3]
1004133c:	4a11      	ldr	r2, [pc, #68]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
1004133e:	2380      	movs	r3, #128	@ 0x80
10041340:	009b      	lsls	r3, r3, #2
10041342:	54d1      	strb	r1, [r2, r3]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
10041344:	4a0f      	ldr	r2, [pc, #60]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
10041346:	2380      	movs	r3, #128	@ 0x80
10041348:	009b      	lsls	r3, r3, #2
1004134a:	5cd3      	ldrb	r3, [r2, r3]
1004134c:	3301      	adds	r3, #1
1004134e:	4a0f      	ldr	r2, [pc, #60]	@ (1004138c <BLUETOOTH_WriteBuffer+0x94>)
10041350:	4013      	ands	r3, r2
10041352:	d503      	bpl.n	1004135c <BLUETOOTH_WriteBuffer+0x64>
10041354:	3b01      	subs	r3, #1
10041356:	4a0e      	ldr	r2, [pc, #56]	@ (10041390 <BLUETOOTH_WriteBuffer+0x98>)
10041358:	4313      	orrs	r3, r2
1004135a:	3301      	adds	r3, #1
1004135c:	0019      	movs	r1, r3
1004135e:	4b09      	ldr	r3, [pc, #36]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
10041360:	4a0c      	ldr	r2, [pc, #48]	@ (10041394 <BLUETOOTH_WriteBuffer+0x9c>)
10041362:	5c9b      	ldrb	r3, [r3, r2]
10041364:	1acb      	subs	r3, r1, r3
10041366:	425a      	negs	r2, r3
10041368:	4153      	adcs	r3, r2
1004136a:	b2db      	uxtb	r3, r3
1004136c:	0019      	movs	r1, r3
1004136e:	4b05      	ldr	r3, [pc, #20]	@ (10041384 <BLUETOOTH_WriteBuffer+0x8c>)
10041370:	4a05      	ldr	r2, [pc, #20]	@ (10041388 <BLUETOOTH_WriteBuffer+0x90>)
10041372:	5499      	strb	r1, [r3, r2]

		return 1;
10041374:	2301      	movs	r3, #1
10041376:	e000      	b.n	1004137a <BLUETOOTH_WriteBuffer+0x82>
	} else {
		return 0;
10041378:	2300      	movs	r3, #0
	}
}
1004137a:	0018      	movs	r0, r3
1004137c:	46bd      	mov	sp, r7
1004137e:	b002      	add	sp, #8
10041380:	bd80      	pop	{r7, pc}
10041382:	46c0      	nop			@ (mov r8, r8)
10041384:	20000194 	.word	0x20000194
10041388:	00000202 	.word	0x00000202
1004138c:	800001ff 	.word	0x800001ff
10041390:	fffffe00 	.word	0xfffffe00
10041394:	00000201 	.word	0x00000201

10041398 <BLUETOOTH_ReadBuffer>:
 * @function: BLUETOOTH_ReadBuffer(uint8_t input)
 * @brief: returns a character from the buffer and removes it from the buffer
 * @param: none
 * @return: -1 if buffer empty, uint8_t character data if the buffer has data to return
 */
int16_t BLUETOOTH_ReadBuffer(){
10041398:	b580      	push	{r7, lr}
1004139a:	b082      	sub	sp, #8
1004139c:	af00      	add	r7, sp, #0
	int16_t ret = -1;
1004139e:	1dbb      	adds	r3, r7, #6
100413a0:	2201      	movs	r2, #1
100413a2:	4252      	negs	r2, r2
100413a4:	801a      	strh	r2, [r3, #0]
	if(buffer.head != buffer.tail || buffer.full){
100413a6:	4a21      	ldr	r2, [pc, #132]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413a8:	2380      	movs	r3, #128	@ 0x80
100413aa:	009b      	lsls	r3, r3, #2
100413ac:	5cd2      	ldrb	r2, [r2, r3]
100413ae:	4b1f      	ldr	r3, [pc, #124]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413b0:	491f      	ldr	r1, [pc, #124]	@ (10041430 <BLUETOOTH_ReadBuffer+0x98>)
100413b2:	5c5b      	ldrb	r3, [r3, r1]
100413b4:	429a      	cmp	r2, r3
100413b6:	d104      	bne.n	100413c2 <BLUETOOTH_ReadBuffer+0x2a>
100413b8:	4b1c      	ldr	r3, [pc, #112]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413ba:	4a1e      	ldr	r2, [pc, #120]	@ (10041434 <BLUETOOTH_ReadBuffer+0x9c>)
100413bc:	5c9b      	ldrb	r3, [r3, r2]
100413be:	2b00      	cmp	r3, #0
100413c0:	d02d      	beq.n	1004141e <BLUETOOTH_ReadBuffer+0x86>

		ret = buffer.data[buffer.tail];
100413c2:	4b1a      	ldr	r3, [pc, #104]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413c4:	4a1a      	ldr	r2, [pc, #104]	@ (10041430 <BLUETOOTH_ReadBuffer+0x98>)
100413c6:	5c9b      	ldrb	r3, [r3, r2]
100413c8:	001a      	movs	r2, r3
100413ca:	4b18      	ldr	r3, [pc, #96]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413cc:	5c9a      	ldrb	r2, [r3, r2]
100413ce:	1dbb      	adds	r3, r7, #6
100413d0:	801a      	strh	r2, [r3, #0]
		buffer.tail++;
100413d2:	4b16      	ldr	r3, [pc, #88]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413d4:	4a16      	ldr	r2, [pc, #88]	@ (10041430 <BLUETOOTH_ReadBuffer+0x98>)
100413d6:	5c9b      	ldrb	r3, [r3, r2]
100413d8:	3301      	adds	r3, #1
100413da:	b2d9      	uxtb	r1, r3
100413dc:	4b13      	ldr	r3, [pc, #76]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413de:	4a14      	ldr	r2, [pc, #80]	@ (10041430 <BLUETOOTH_ReadBuffer+0x98>)
100413e0:	5499      	strb	r1, [r3, r2]
		buffer.tail %= BTBUFFERSIZE;
100413e2:	4b12      	ldr	r3, [pc, #72]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413e4:	4a12      	ldr	r2, [pc, #72]	@ (10041430 <BLUETOOTH_ReadBuffer+0x98>)
100413e6:	5c99      	ldrb	r1, [r3, r2]
100413e8:	4b10      	ldr	r3, [pc, #64]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413ea:	4a11      	ldr	r2, [pc, #68]	@ (10041430 <BLUETOOTH_ReadBuffer+0x98>)
100413ec:	5499      	strb	r1, [r3, r2]
		buffer.full = ((buffer.head+1)%BTBUFFERSIZE == buffer.tail);
100413ee:	4a0f      	ldr	r2, [pc, #60]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
100413f0:	2380      	movs	r3, #128	@ 0x80
100413f2:	009b      	lsls	r3, r3, #2
100413f4:	5cd3      	ldrb	r3, [r2, r3]
100413f6:	3301      	adds	r3, #1
100413f8:	4a0f      	ldr	r2, [pc, #60]	@ (10041438 <BLUETOOTH_ReadBuffer+0xa0>)
100413fa:	4013      	ands	r3, r2
100413fc:	d503      	bpl.n	10041406 <BLUETOOTH_ReadBuffer+0x6e>
100413fe:	3b01      	subs	r3, #1
10041400:	4a0e      	ldr	r2, [pc, #56]	@ (1004143c <BLUETOOTH_ReadBuffer+0xa4>)
10041402:	4313      	orrs	r3, r2
10041404:	3301      	adds	r3, #1
10041406:	0019      	movs	r1, r3
10041408:	4b08      	ldr	r3, [pc, #32]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
1004140a:	4a09      	ldr	r2, [pc, #36]	@ (10041430 <BLUETOOTH_ReadBuffer+0x98>)
1004140c:	5c9b      	ldrb	r3, [r3, r2]
1004140e:	1acb      	subs	r3, r1, r3
10041410:	425a      	negs	r2, r3
10041412:	4153      	adcs	r3, r2
10041414:	b2db      	uxtb	r3, r3
10041416:	0019      	movs	r1, r3
10041418:	4b04      	ldr	r3, [pc, #16]	@ (1004142c <BLUETOOTH_ReadBuffer+0x94>)
1004141a:	4a06      	ldr	r2, [pc, #24]	@ (10041434 <BLUETOOTH_ReadBuffer+0x9c>)
1004141c:	5499      	strb	r1, [r3, r2]
	}
	return ret;
1004141e:	1dbb      	adds	r3, r7, #6
10041420:	2200      	movs	r2, #0
10041422:	5e9b      	ldrsh	r3, [r3, r2]
}
10041424:	0018      	movs	r0, r3
10041426:	46bd      	mov	sp, r7
10041428:	b002      	add	sp, #8
1004142a:	bd80      	pop	{r7, pc}
1004142c:	20000194 	.word	0x20000194
10041430:	00000201 	.word	0x00000201
10041434:	00000202 	.word	0x00000202
10041438:	800001ff 	.word	0x800001ff
1004143c:	fffffe00 	.word	0xfffffe00

10041440 <BLUETOOTH_BufferEmpty>:
 * @function: BLUETOOTH_BufferEmpty()
 * @brief: returns if the buffer is empty or if the Bluetooth is disconnected
 * @param: none
 * @return: 0 if disconnected, 1 if connected and empty, 2 if connected and not empty
 */
uint8_t BLUETOOTH_BufferEmpty(){
10041440:	b580      	push	{r7, lr}
10041442:	af00      	add	r7, sp, #0
	return (buffer.head == buffer.tail && !buffer.full);
10041444:	4a0a      	ldr	r2, [pc, #40]	@ (10041470 <BLUETOOTH_BufferEmpty+0x30>)
10041446:	2380      	movs	r3, #128	@ 0x80
10041448:	009b      	lsls	r3, r3, #2
1004144a:	5cd2      	ldrb	r2, [r2, r3]
1004144c:	4b08      	ldr	r3, [pc, #32]	@ (10041470 <BLUETOOTH_BufferEmpty+0x30>)
1004144e:	4909      	ldr	r1, [pc, #36]	@ (10041474 <BLUETOOTH_BufferEmpty+0x34>)
10041450:	5c5b      	ldrb	r3, [r3, r1]
10041452:	429a      	cmp	r2, r3
10041454:	d106      	bne.n	10041464 <BLUETOOTH_BufferEmpty+0x24>
10041456:	4b06      	ldr	r3, [pc, #24]	@ (10041470 <BLUETOOTH_BufferEmpty+0x30>)
10041458:	4a07      	ldr	r2, [pc, #28]	@ (10041478 <BLUETOOTH_BufferEmpty+0x38>)
1004145a:	5c9b      	ldrb	r3, [r3, r2]
1004145c:	2b00      	cmp	r3, #0
1004145e:	d101      	bne.n	10041464 <BLUETOOTH_BufferEmpty+0x24>
10041460:	2301      	movs	r3, #1
10041462:	e000      	b.n	10041466 <BLUETOOTH_BufferEmpty+0x26>
10041464:	2300      	movs	r3, #0
10041466:	b2db      	uxtb	r3, r3
}
10041468:	0018      	movs	r0, r3
1004146a:	46bd      	mov	sp, r7
1004146c:	bd80      	pop	{r7, pc}
1004146e:	46c0      	nop			@ (mov r8, r8)
10041470:	20000194 	.word	0x20000194
10041474:	00000201 	.word	0x00000201
10041478:	00000202 	.word	0x00000202

1004147c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
int SystemClock_Config(void)
{
1004147c:	b590      	push	{r4, r7, lr}
1004147e:	b089      	sub	sp, #36	@ 0x24
10041480:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10041482:	2408      	movs	r4, #8
10041484:	193b      	adds	r3, r7, r4
10041486:	0018      	movs	r0, r3
10041488:	2318      	movs	r3, #24
1004148a:	001a      	movs	r2, r3
1004148c:	2100      	movs	r1, #0
1004148e:	f026 fb69 	bl	10067b64 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10041492:	003b      	movs	r3, r7
10041494:	0018      	movs	r0, r3
10041496:	2308      	movs	r3, #8
10041498:	001a      	movs	r2, r3
1004149a:	2100      	movs	r1, #0
1004149c:	f026 fb62 	bl	10067b64 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
100414a0:	193b      	adds	r3, r7, r4
100414a2:	2205      	movs	r2, #5
100414a4:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
100414a6:	193b      	adds	r3, r7, r4
100414a8:	2280      	movs	r2, #128	@ 0x80
100414aa:	0252      	lsls	r2, r2, #9
100414ac:	605a      	str	r2, [r3, #4]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
100414ae:	193b      	adds	r3, r7, r4
100414b0:	2204      	movs	r2, #4
100414b2:	611a      	str	r2, [r3, #16]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
100414b4:	193b      	adds	r3, r7, r4
100414b6:	0018      	movs	r0, r3
100414b8:	f00a ff6a 	bl	1004c390 <HAL_RCC_OscConfig>
100414bc:	1e03      	subs	r3, r0, #0
100414be:	d001      	beq.n	100414c4 <SystemClock_Config+0x48>
	{
		return INIT_ERROR;
100414c0:	2300      	movs	r3, #0
100414c2:	e00f      	b.n	100414e4 <SystemClock_Config+0x68>
	}

	/** Configure the SYSCLKSource and SYSCLKDivider
	*/
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_RC64MPLL;
100414c4:	003b      	movs	r3, r7
100414c6:	2200      	movs	r2, #0
100414c8:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_RC64MPLL_DIV1;
100414ca:	003b      	movs	r3, r7
100414cc:	2200      	movs	r2, #0
100414ce:	605a      	str	r2, [r3, #4]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_WAIT_STATES_1) != HAL_OK)
100414d0:	003b      	movs	r3, r7
100414d2:	2110      	movs	r1, #16
100414d4:	0018      	movs	r0, r3
100414d6:	f00b f8a5 	bl	1004c624 <HAL_RCC_ClockConfig>
100414da:	1e03      	subs	r3, r0, #0
100414dc:	d001      	beq.n	100414e2 <SystemClock_Config+0x66>
	{
		return INIT_ERROR;
100414de:	2300      	movs	r3, #0
100414e0:	e000      	b.n	100414e4 <SystemClock_Config+0x68>
	}
	return INIT_OK;
100414e2:	2301      	movs	r3, #1
}
100414e4:	0018      	movs	r0, r3
100414e6:	46bd      	mov	sp, r7
100414e8:	b009      	add	sp, #36	@ 0x24
100414ea:	bd90      	pop	{r4, r7, pc}

100414ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
int PeriphCommonClock_Config(void)
{
100414ec:	b580      	push	{r7, lr}
100414ee:	b086      	sub	sp, #24
100414f0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100414f2:	003b      	movs	r3, r7
100414f4:	0018      	movs	r0, r3
100414f6:	2318      	movs	r3, #24
100414f8:	001a      	movs	r2, r3
100414fa:	2100      	movs	r1, #0
100414fc:	f026 fb32 	bl	10067b64 <memset>

	/** Initializes the peripherals clock
	*/
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
10041500:	003b      	movs	r3, r7
10041502:	2202      	movs	r2, #2
10041504:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLK_DIV4;
10041506:	003b      	movs	r3, r7
10041508:	2280      	movs	r2, #128	@ 0x80
1004150a:	0152      	lsls	r2, r2, #5
1004150c:	615a      	str	r2, [r3, #20]

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
1004150e:	003b      	movs	r3, r7
10041510:	0018      	movs	r0, r3
10041512:	f00b fa1d 	bl	1004c950 <HAL_RCCEx_PeriphCLKConfig>
10041516:	1e03      	subs	r3, r0, #0
10041518:	d001      	beq.n	1004151e <PeriphCommonClock_Config+0x32>
	{
		return INIT_ERROR;
1004151a:	2300      	movs	r3, #0
1004151c:	e000      	b.n	10041520 <PeriphCommonClock_Config+0x34>
	}
	return INIT_OK;
1004151e:	2301      	movs	r3, #1
}
10041520:	0018      	movs	r0, r3
10041522:	46bd      	mov	sp, r7
10041524:	b006      	add	sp, #24
10041526:	bd80      	pop	{r7, pc}

10041528 <BOARD_Init>:
 * @function: BOARD_Init()
 * @brief: initialize the board's timers
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int BOARD_Init(void){
10041528:	b580      	push	{r7, lr}
1004152a:	b082      	sub	sp, #8
1004152c:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
1004152e:	4b0f      	ldr	r3, [pc, #60]	@ (1004156c <BOARD_Init+0x44>)
10041530:	781b      	ldrb	r3, [r3, #0]
10041532:	2b00      	cmp	r3, #0
10041534:	d001      	beq.n	1004153a <BOARD_Init+0x12>
10041536:	2301      	movs	r3, #1
10041538:	e013      	b.n	10041562 <BOARD_Init+0x3a>
	HAL_Init();
1004153a:	f005 fd4d 	bl	10046fd8 <HAL_Init>
	int errorFlag = INIT_OK;
1004153e:	2301      	movs	r3, #1
10041540:	607b      	str	r3, [r7, #4]
	if(PeriphCommonClock_Config() == INIT_ERROR){
10041542:	f7ff ffd3 	bl	100414ec <PeriphCommonClock_Config>
10041546:	1e03      	subs	r3, r0, #0
10041548:	d101      	bne.n	1004154e <BOARD_Init+0x26>
		errorFlag = INIT_ERROR;
1004154a:	2300      	movs	r3, #0
1004154c:	607b      	str	r3, [r7, #4]
	}
	if(SystemClock_Config() == INIT_ERROR){
1004154e:	f7ff ff95 	bl	1004147c <SystemClock_Config>
10041552:	1e03      	subs	r3, r0, #0
10041554:	d101      	bne.n	1004155a <BOARD_Init+0x32>
		errorFlag = INIT_ERROR;
10041556:	2300      	movs	r3, #0
10041558:	607b      	str	r3, [r7, #4]
	}
	initialized = 1;
1004155a:	4b04      	ldr	r3, [pc, #16]	@ (1004156c <BOARD_Init+0x44>)
1004155c:	2201      	movs	r2, #1
1004155e:	701a      	strb	r2, [r3, #0]
	return errorFlag;
10041560:	687b      	ldr	r3, [r7, #4]
}
10041562:	0018      	movs	r0, r3
10041564:	46bd      	mov	sp, r7
10041566:	b002      	add	sp, #8
10041568:	bd80      	pop	{r7, pc}
1004156a:	46c0      	nop			@ (mov r8, r8)
1004156c:	20000397 	.word	0x20000397

10041570 <BOARD_CrashHandler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void BOARD_CrashHandler(void)
{
10041570:	b580      	push	{r7, lr}
10041572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10041574:	b672      	cpsid	i
}
10041576:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1){
10041578:	46c0      	nop			@ (mov r8, r8)
1004157a:	e7fd      	b.n	10041578 <BOARD_CrashHandler+0x8>

1004157c <Error_Handler>:
 * @brief: disables all interrupts and enters an infinite loop
 * @param: none
 * @return: none
 */
void Error_Handler(void)
{
1004157c:	b580      	push	{r7, lr}
1004157e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
10041580:	b672      	cpsid	i
}
10041582:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1);
10041584:	46c0      	nop			@ (mov r8, r8)
10041586:	e7fd      	b.n	10041584 <Error_Handler+0x8>

10041588 <DrawMain>:
static uint8_t monthselect;
static uint8_t dayselect;
static uint8_t Stimeselect;
static uint8_t Etimeselect;
//----------------------------------------Private Functions--------------------------------------
void DrawMain(){
10041588:	b580      	push	{r7, lr}
1004158a:	b0ae      	sub	sp, #184	@ 0xb8
1004158c:	af02      	add	r7, sp, #8
	sprintf(maintext, "Main menu\n"
					  "B1:play track\n"
			   	   	  "B2:append schedule\n"
	   	   	  	  	  "B3:Set Date/time\n"
					  "B4:more options\n"
					  "Volume: %c%.3d%c", LEFT_ARROW_ON, FLASH_GetVolume(), RIGHT_ARROW_ON);
1004158e:	f002 fac3 	bl	10043b18 <FLASH_GetVolume>
10041592:	0003      	movs	r3, r0
	sprintf(maintext, "Main menu\n"
10041594:	001a      	movs	r2, r3
10041596:	490a      	ldr	r1, [pc, #40]	@ (100415c0 <DrawMain+0x38>)
10041598:	0038      	movs	r0, r7
1004159a:	2308      	movs	r3, #8
1004159c:	9300      	str	r3, [sp, #0]
1004159e:	0013      	movs	r3, r2
100415a0:	2206      	movs	r2, #6
100415a2:	f026 f9c3 	bl	1006792c <siprintf>
	OledClear(OLED_COLOR_BLACK);
100415a6:	2000      	movs	r0, #0
100415a8:	f003 fd24 	bl	10044ff4 <OledClear>
	OledDrawString(maintext);
100415ac:	003b      	movs	r3, r7
100415ae:	0018      	movs	r0, r3
100415b0:	f003 fcd6 	bl	10044f60 <OledDrawString>
	OledUpdate();
100415b4:	f003 fd54 	bl	10045060 <OledUpdate>
}
100415b8:	46c0      	nop			@ (mov r8, r8)
100415ba:	46bd      	mov	sp, r7
100415bc:	b02c      	add	sp, #176	@ 0xb0
100415be:	bd80      	pop	{r7, pc}
100415c0:	1006899c 	.word	0x1006899c

100415c4 <DrawFolder>:

void DrawFolder(uint8_t cursor, uint8_t folder, uint8_t track){
100415c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100415c6:	b09d      	sub	sp, #116	@ 0x74
100415c8:	af04      	add	r7, sp, #16
100415ca:	0004      	movs	r4, r0
100415cc:	0008      	movs	r0, r1
100415ce:	0011      	movs	r1, r2
100415d0:	1dfb      	adds	r3, r7, #7
100415d2:	1c22      	adds	r2, r4, #0
100415d4:	701a      	strb	r2, [r3, #0]
100415d6:	1dbb      	adds	r3, r7, #6
100415d8:	1c02      	adds	r2, r0, #0
100415da:	701a      	strb	r2, [r3, #0]
100415dc:	1d7b      	adds	r3, r7, #5
100415de:	1c0a      	adds	r2, r1, #0
100415e0:	701a      	strb	r2, [r3, #0]

	char folderselectstring[88];
	sprintf(folderselectstring, "Select Folder\n"
100415e2:	1dfb      	adds	r3, r7, #7
100415e4:	781b      	ldrb	r3, [r3, #0]
100415e6:	2b00      	cmp	r3, #0
100415e8:	d101      	bne.n	100415ee <DrawFolder+0x2a>
100415ea:	2102      	movs	r1, #2
100415ec:	e000      	b.n	100415f0 <DrawFolder+0x2c>
100415ee:	2101      	movs	r1, #1
100415f0:	1dfb      	adds	r3, r7, #7
100415f2:	781b      	ldrb	r3, [r3, #0]
100415f4:	2b00      	cmp	r3, #0
100415f6:	d001      	beq.n	100415fc <DrawFolder+0x38>
100415f8:	2002      	movs	r0, #2
100415fa:	e000      	b.n	100415fe <DrawFolder+0x3a>
100415fc:	2001      	movs	r0, #1
100415fe:	1dbb      	adds	r3, r7, #6
10041600:	781c      	ldrb	r4, [r3, #0]
10041602:	1d7b      	adds	r3, r7, #5
10041604:	781d      	ldrb	r5, [r3, #0]
10041606:	1dfb      	adds	r3, r7, #7
10041608:	781b      	ldrb	r3, [r3, #0]
1004160a:	2b00      	cmp	r3, #0
1004160c:	d101      	bne.n	10041612 <DrawFolder+0x4e>
1004160e:	2304      	movs	r3, #4
10041610:	e000      	b.n	10041614 <DrawFolder+0x50>
10041612:	2303      	movs	r3, #3
10041614:	1dfa      	adds	r2, r7, #7
10041616:	7812      	ldrb	r2, [r2, #0]
10041618:	2a00      	cmp	r2, #0
1004161a:	d001      	beq.n	10041620 <DrawFolder+0x5c>
1004161c:	2204      	movs	r2, #4
1004161e:	e000      	b.n	10041622 <DrawFolder+0x5e>
10041620:	2203      	movs	r2, #3
10041622:	4e0e      	ldr	r6, [pc, #56]	@ (1004165c <DrawFolder+0x98>)
10041624:	46b4      	mov	ip, r6
10041626:	2608      	movs	r6, #8
10041628:	19be      	adds	r6, r7, r6
1004162a:	9203      	str	r2, [sp, #12]
1004162c:	9302      	str	r3, [sp, #8]
1004162e:	9501      	str	r5, [sp, #4]
10041630:	9400      	str	r4, [sp, #0]
10041632:	0003      	movs	r3, r0
10041634:	000a      	movs	r2, r1
10041636:	4661      	mov	r1, ip
10041638:	0030      	movs	r0, r6
1004163a:	f026 f977 	bl	1006792c <siprintf>
			                    "Folder: %d Track: %d\n"
			                    "        %c        %c\n",
								!cursor?UP_ARROW_ON:UP_ARROW_OFF, cursor?UP_ARROW_ON:UP_ARROW_OFF,
								folder, track,
								!cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF, cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
1004163e:	2000      	movs	r0, #0
10041640:	f003 fcd8 	bl	10044ff4 <OledClear>
	OledDrawString(folderselectstring);
10041644:	2608      	movs	r6, #8
10041646:	19bb      	adds	r3, r7, r6
10041648:	0018      	movs	r0, r3
1004164a:	f003 fc89 	bl	10044f60 <OledDrawString>
	OledUpdate();
1004164e:	f003 fd07 	bl	10045060 <OledUpdate>
}
10041652:	46c0      	nop			@ (mov r8, r8)
10041654:	46bd      	mov	sp, r7
10041656:	b019      	add	sp, #100	@ 0x64
10041658:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004165a:	46c0      	nop			@ (mov r8, r8)
1004165c:	100689fc 	.word	0x100689fc

10041660 <DrawOptions>:

void DrawOptions(uint8_t cursor, uint8_t dutycycle){
10041660:	b5f0      	push	{r4, r5, r6, r7, lr}
10041662:	46c6      	mov	lr, r8
10041664:	b500      	push	{lr}
10041666:	b09e      	sub	sp, #120	@ 0x78
10041668:	af06      	add	r7, sp, #24
1004166a:	0002      	movs	r2, r0
1004166c:	1dfb      	adds	r3, r7, #7
1004166e:	701a      	strb	r2, [r3, #0]
10041670:	1dbb      	adds	r3, r7, #6
10041672:	1c0a      	adds	r2, r1, #0
10041674:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
	sprintf(folderselectstring, "Options\n"
10041676:	1dfb      	adds	r3, r7, #7
10041678:	781b      	ldrb	r3, [r3, #0]
1004167a:	2b00      	cmp	r3, #0
1004167c:	d101      	bne.n	10041682 <DrawOptions+0x22>
1004167e:	2506      	movs	r5, #6
10041680:	e000      	b.n	10041684 <DrawOptions+0x24>
10041682:	2505      	movs	r5, #5
10041684:	1dbb      	adds	r3, r7, #6
10041686:	781b      	ldrb	r3, [r3, #0]
10041688:	4698      	mov	r8, r3
1004168a:	1dfb      	adds	r3, r7, #7
1004168c:	781b      	ldrb	r3, [r3, #0]
1004168e:	2b00      	cmp	r3, #0
10041690:	d101      	bne.n	10041696 <DrawOptions+0x36>
10041692:	2308      	movs	r3, #8
10041694:	e000      	b.n	10041698 <DrawOptions+0x38>
10041696:	2307      	movs	r3, #7
10041698:	1dfa      	adds	r2, r7, #7
1004169a:	7812      	ldrb	r2, [r2, #0]
1004169c:	2a01      	cmp	r2, #1
1004169e:	d101      	bne.n	100416a4 <DrawOptions+0x44>
100416a0:	2206      	movs	r2, #6
100416a2:	e000      	b.n	100416a6 <DrawOptions+0x46>
100416a4:	2205      	movs	r2, #5
100416a6:	1df9      	adds	r1, r7, #7
100416a8:	7809      	ldrb	r1, [r1, #0]
100416aa:	2901      	cmp	r1, #1
100416ac:	d101      	bne.n	100416b2 <DrawOptions+0x52>
100416ae:	2108      	movs	r1, #8
100416b0:	e000      	b.n	100416b4 <DrawOptions+0x54>
100416b2:	2107      	movs	r1, #7
100416b4:	1df8      	adds	r0, r7, #7
100416b6:	7800      	ldrb	r0, [r0, #0]
100416b8:	2802      	cmp	r0, #2
100416ba:	d101      	bne.n	100416c0 <DrawOptions+0x60>
100416bc:	2008      	movs	r0, #8
100416be:	e000      	b.n	100416c2 <DrawOptions+0x62>
100416c0:	2007      	movs	r0, #7
100416c2:	1dfc      	adds	r4, r7, #7
100416c4:	7824      	ldrb	r4, [r4, #0]
100416c6:	2c02      	cmp	r4, #2
100416c8:	d101      	bne.n	100416ce <DrawOptions+0x6e>
100416ca:	2406      	movs	r4, #6
100416cc:	e000      	b.n	100416d0 <DrawOptions+0x70>
100416ce:	2405      	movs	r4, #5
100416d0:	4e0f      	ldr	r6, [pc, #60]	@ (10041710 <DrawOptions+0xb0>)
100416d2:	46b4      	mov	ip, r6
100416d4:	2608      	movs	r6, #8
100416d6:	19be      	adds	r6, r7, r6
100416d8:	9404      	str	r4, [sp, #16]
100416da:	9003      	str	r0, [sp, #12]
100416dc:	9102      	str	r1, [sp, #8]
100416de:	9201      	str	r2, [sp, #4]
100416e0:	9300      	str	r3, [sp, #0]
100416e2:	4643      	mov	r3, r8
100416e4:	002a      	movs	r2, r5
100416e6:	4661      	mov	r1, ip
100416e8:	0030      	movs	r0, r6
100416ea:	f026 f91f 	bl	1006792c <siprintf>
								" Song:%c%c\n"
								"%cClear Schedule%c",
								0==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF, dutycycle,0==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								1==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF,           1==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF,
								2==cursor?RIGHT_ARROW_ON:RIGHT_ARROW_OFF, 		  2==cursor?LEFT_ARROW_ON:LEFT_ARROW_OFF);
	OledClear(OLED_COLOR_BLACK);
100416ee:	2000      	movs	r0, #0
100416f0:	f003 fc80 	bl	10044ff4 <OledClear>
	OledDrawString(folderselectstring);
100416f4:	2608      	movs	r6, #8
100416f6:	19bb      	adds	r3, r7, r6
100416f8:	0018      	movs	r0, r3
100416fa:	f003 fc31 	bl	10044f60 <OledDrawString>
	OledUpdate();
100416fe:	f003 fcaf 	bl	10045060 <OledUpdate>

}
10041702:	46c0      	nop			@ (mov r8, r8)
10041704:	46bd      	mov	sp, r7
10041706:	b018      	add	sp, #96	@ 0x60
10041708:	bc80      	pop	{r7}
1004170a:	46b8      	mov	r8, r7
1004170c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004170e:	46c0      	nop			@ (mov r8, r8)
10041710:	10068a4c 	.word	0x10068a4c

10041714 <DrawSetTime>:

void DrawSetTime(uint8_t cursor, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute){
10041714:	b5f0      	push	{r4, r5, r6, r7, lr}
10041716:	46de      	mov	lr, fp
10041718:	4657      	mov	r7, sl
1004171a:	464e      	mov	r6, r9
1004171c:	4645      	mov	r5, r8
1004171e:	b5e0      	push	{r5, r6, r7, lr}
10041720:	b0a5      	sub	sp, #148	@ 0x94
10041722:	af0a      	add	r7, sp, #40	@ 0x28
10041724:	0005      	movs	r5, r0
10041726:	000c      	movs	r4, r1
10041728:	0010      	movs	r0, r2
1004172a:	0019      	movs	r1, r3
1004172c:	260f      	movs	r6, #15
1004172e:	19bb      	adds	r3, r7, r6
10041730:	1c2a      	adds	r2, r5, #0
10041732:	701a      	strb	r2, [r3, #0]
10041734:	230e      	movs	r3, #14
10041736:	18fb      	adds	r3, r7, r3
10041738:	1c22      	adds	r2, r4, #0
1004173a:	701a      	strb	r2, [r3, #0]
1004173c:	230d      	movs	r3, #13
1004173e:	18fb      	adds	r3, r7, r3
10041740:	1c02      	adds	r2, r0, #0
10041742:	701a      	strb	r2, [r3, #0]
10041744:	230c      	movs	r3, #12
10041746:	18fb      	adds	r3, r7, r3
10041748:	1c0a      	adds	r2, r1, #0
1004174a:	701a      	strb	r2, [r3, #0]
	char folderselectstring[88];
#define TOPCHAR cursor?UP_ARROW_ON:UP_ARROW_OFF
#define BOTCHAR cursor?DOWN_ARROW_ON:DOWN_ARROW_OFF
	sprintf(folderselectstring, "Set Date/Time\n"
1004174c:	19bb      	adds	r3, r7, r6
1004174e:	781b      	ldrb	r3, [r3, #0]
10041750:	2b00      	cmp	r3, #0
10041752:	d102      	bne.n	1004175a <DrawSetTime+0x46>
10041754:	2302      	movs	r3, #2
10041756:	469c      	mov	ip, r3
10041758:	e001      	b.n	1004175e <DrawSetTime+0x4a>
1004175a:	2301      	movs	r3, #1
1004175c:	469c      	mov	ip, r3
1004175e:	230f      	movs	r3, #15
10041760:	18fb      	adds	r3, r7, r3
10041762:	781b      	ldrb	r3, [r3, #0]
10041764:	2b01      	cmp	r3, #1
10041766:	d102      	bne.n	1004176e <DrawSetTime+0x5a>
10041768:	2302      	movs	r3, #2
1004176a:	4698      	mov	r8, r3
1004176c:	e001      	b.n	10041772 <DrawSetTime+0x5e>
1004176e:	2301      	movs	r3, #1
10041770:	4698      	mov	r8, r3
10041772:	230f      	movs	r3, #15
10041774:	18fb      	adds	r3, r7, r3
10041776:	781b      	ldrb	r3, [r3, #0]
10041778:	2b02      	cmp	r3, #2
1004177a:	d101      	bne.n	10041780 <DrawSetTime+0x6c>
1004177c:	2202      	movs	r2, #2
1004177e:	e000      	b.n	10041782 <DrawSetTime+0x6e>
10041780:	2201      	movs	r2, #1
10041782:	230f      	movs	r3, #15
10041784:	18fb      	adds	r3, r7, r3
10041786:	781b      	ldrb	r3, [r3, #0]
10041788:	2b03      	cmp	r3, #3
1004178a:	d101      	bne.n	10041790 <DrawSetTime+0x7c>
1004178c:	2102      	movs	r1, #2
1004178e:	e000      	b.n	10041792 <DrawSetTime+0x7e>
10041790:	2101      	movs	r1, #1
10041792:	230e      	movs	r3, #14
10041794:	18fb      	adds	r3, r7, r3
10041796:	781b      	ldrb	r3, [r3, #0]
10041798:	4699      	mov	r9, r3
1004179a:	230d      	movs	r3, #13
1004179c:	18fb      	adds	r3, r7, r3
1004179e:	781b      	ldrb	r3, [r3, #0]
100417a0:	469a      	mov	sl, r3
100417a2:	230c      	movs	r3, #12
100417a4:	18fb      	adds	r3, r7, r3
100417a6:	781b      	ldrb	r3, [r3, #0]
100417a8:	469b      	mov	fp, r3
100417aa:	2388      	movs	r3, #136	@ 0x88
100417ac:	2008      	movs	r0, #8
100417ae:	181b      	adds	r3, r3, r0
100417b0:	19db      	adds	r3, r3, r7
100417b2:	781b      	ldrb	r3, [r3, #0]
100417b4:	60bb      	str	r3, [r7, #8]
100417b6:	230f      	movs	r3, #15
100417b8:	18fb      	adds	r3, r7, r3
100417ba:	781b      	ldrb	r3, [r3, #0]
100417bc:	2b00      	cmp	r3, #0
100417be:	d101      	bne.n	100417c4 <DrawSetTime+0xb0>
100417c0:	2404      	movs	r4, #4
100417c2:	e000      	b.n	100417c6 <DrawSetTime+0xb2>
100417c4:	2403      	movs	r4, #3
100417c6:	230f      	movs	r3, #15
100417c8:	18fb      	adds	r3, r7, r3
100417ca:	781b      	ldrb	r3, [r3, #0]
100417cc:	2b01      	cmp	r3, #1
100417ce:	d101      	bne.n	100417d4 <DrawSetTime+0xc0>
100417d0:	2504      	movs	r5, #4
100417d2:	e000      	b.n	100417d6 <DrawSetTime+0xc2>
100417d4:	2503      	movs	r5, #3
100417d6:	230f      	movs	r3, #15
100417d8:	18fb      	adds	r3, r7, r3
100417da:	781b      	ldrb	r3, [r3, #0]
100417dc:	2b02      	cmp	r3, #2
100417de:	d101      	bne.n	100417e4 <DrawSetTime+0xd0>
100417e0:	2604      	movs	r6, #4
100417e2:	e000      	b.n	100417e6 <DrawSetTime+0xd2>
100417e4:	2603      	movs	r6, #3
100417e6:	230f      	movs	r3, #15
100417e8:	18fb      	adds	r3, r7, r3
100417ea:	781b      	ldrb	r3, [r3, #0]
100417ec:	2b03      	cmp	r3, #3
100417ee:	d102      	bne.n	100417f6 <DrawSetTime+0xe2>
100417f0:	2304      	movs	r3, #4
100417f2:	603b      	str	r3, [r7, #0]
100417f4:	e001      	b.n	100417fa <DrawSetTime+0xe6>
100417f6:	2303      	movs	r3, #3
100417f8:	603b      	str	r3, [r7, #0]
100417fa:	4817      	ldr	r0, [pc, #92]	@ (10041858 <DrawSetTime+0x144>)
100417fc:	6078      	str	r0, [r7, #4]
100417fe:	2008      	movs	r0, #8
10041800:	2308      	movs	r3, #8
10041802:	18c0      	adds	r0, r0, r3
10041804:	19c0      	adds	r0, r0, r7
10041806:	683b      	ldr	r3, [r7, #0]
10041808:	9309      	str	r3, [sp, #36]	@ 0x24
1004180a:	9608      	str	r6, [sp, #32]
1004180c:	9507      	str	r5, [sp, #28]
1004180e:	9406      	str	r4, [sp, #24]
10041810:	68bb      	ldr	r3, [r7, #8]
10041812:	9305      	str	r3, [sp, #20]
10041814:	465b      	mov	r3, fp
10041816:	9304      	str	r3, [sp, #16]
10041818:	4653      	mov	r3, sl
1004181a:	9303      	str	r3, [sp, #12]
1004181c:	464b      	mov	r3, r9
1004181e:	9302      	str	r3, [sp, #8]
10041820:	9101      	str	r1, [sp, #4]
10041822:	9200      	str	r2, [sp, #0]
10041824:	4643      	mov	r3, r8
10041826:	4662      	mov	r2, ip
10041828:	6879      	ldr	r1, [r7, #4]
1004182a:	f026 f87f 	bl	1006792c <siprintf>
								"%.2d/%.2d %.2d:%.2d\n"
								" %c  %c  %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR,
								month, day, hour, minute,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
1004182e:	2000      	movs	r0, #0
10041830:	f003 fbe0 	bl	10044ff4 <OledClear>
	OledDrawString(folderselectstring);
10041834:	2008      	movs	r0, #8
10041836:	2308      	movs	r3, #8
10041838:	18c3      	adds	r3, r0, r3
1004183a:	19db      	adds	r3, r3, r7
1004183c:	0018      	movs	r0, r3
1004183e:	f003 fb8f 	bl	10044f60 <OledDrawString>
	OledUpdate();
10041842:	f003 fc0d 	bl	10045060 <OledUpdate>

}
10041846:	46c0      	nop			@ (mov r8, r8)
10041848:	46bd      	mov	sp, r7
1004184a:	b01b      	add	sp, #108	@ 0x6c
1004184c:	bcf0      	pop	{r4, r5, r6, r7}
1004184e:	46bb      	mov	fp, r7
10041850:	46b2      	mov	sl, r6
10041852:	46a9      	mov	r9, r5
10041854:	46a0      	mov	r8, r4
10041856:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041858:	10068a88 	.word	0x10068a88

1004185c <DrawSchedule>:

void DrawSchedule(uint8_t cursor, uint8_t month, uint8_t day, uint8_t start, uint8_t end){
1004185c:	b5f0      	push	{r4, r5, r6, r7, lr}
1004185e:	46de      	mov	lr, fp
10041860:	4657      	mov	r7, sl
10041862:	464e      	mov	r6, r9
10041864:	4645      	mov	r5, r8
10041866:	b5e0      	push	{r5, r6, r7, lr}
10041868:	b0b3      	sub	sp, #204	@ 0xcc
1004186a:	af10      	add	r7, sp, #64	@ 0x40
1004186c:	0005      	movs	r5, r0
1004186e:	000c      	movs	r4, r1
10041870:	0010      	movs	r0, r2
10041872:	0019      	movs	r1, r3
10041874:	2627      	movs	r6, #39	@ 0x27
10041876:	19bb      	adds	r3, r7, r6
10041878:	1c2a      	adds	r2, r5, #0
1004187a:	701a      	strb	r2, [r3, #0]
1004187c:	2326      	movs	r3, #38	@ 0x26
1004187e:	18fb      	adds	r3, r7, r3
10041880:	1c22      	adds	r2, r4, #0
10041882:	701a      	strb	r2, [r3, #0]
10041884:	2325      	movs	r3, #37	@ 0x25
10041886:	18fb      	adds	r3, r7, r3
10041888:	1c02      	adds	r2, r0, #0
1004188a:	701a      	strb	r2, [r3, #0]
1004188c:	2024      	movs	r0, #36	@ 0x24
1004188e:	183b      	adds	r3, r7, r0
10041890:	1c0a      	adds	r2, r1, #0
10041892:	701a      	strb	r2, [r3, #0]
	char folderselectstring[92];
	uint8_t hour1 = (start&0b11111000)>>3;
10041894:	2367      	movs	r3, #103	@ 0x67
10041896:	2120      	movs	r1, #32
10041898:	185b      	adds	r3, r3, r1
1004189a:	19db      	adds	r3, r3, r7
1004189c:	183a      	adds	r2, r7, r0
1004189e:	7812      	ldrb	r2, [r2, #0]
100418a0:	08d2      	lsrs	r2, r2, #3
100418a2:	701a      	strb	r2, [r3, #0]
	uint8_t minute1 = ((start & 0b011)*15);
100418a4:	183b      	adds	r3, r7, r0
100418a6:	781b      	ldrb	r3, [r3, #0]
100418a8:	2203      	movs	r2, #3
100418aa:	4013      	ands	r3, r2
100418ac:	b2da      	uxtb	r2, r3
100418ae:	2366      	movs	r3, #102	@ 0x66
100418b0:	0008      	movs	r0, r1
100418b2:	185b      	adds	r3, r3, r1
100418b4:	19db      	adds	r3, r3, r7
100418b6:	1c11      	adds	r1, r2, #0
100418b8:	0109      	lsls	r1, r1, #4
100418ba:	1a8a      	subs	r2, r1, r2
100418bc:	701a      	strb	r2, [r3, #0]
	uint8_t hour2 = (end&0b11111000)>>3;
100418be:	2365      	movs	r3, #101	@ 0x65
100418c0:	181b      	adds	r3, r3, r0
100418c2:	19da      	adds	r2, r3, r7
100418c4:	2190      	movs	r1, #144	@ 0x90
100418c6:	180b      	adds	r3, r1, r0
100418c8:	19db      	adds	r3, r3, r7
100418ca:	781b      	ldrb	r3, [r3, #0]
100418cc:	08db      	lsrs	r3, r3, #3
100418ce:	7013      	strb	r3, [r2, #0]
	uint8_t minute2 = ((end & 0b011)*15);
100418d0:	180b      	adds	r3, r1, r0
100418d2:	19db      	adds	r3, r3, r7
100418d4:	781b      	ldrb	r3, [r3, #0]
100418d6:	2203      	movs	r2, #3
100418d8:	4013      	ands	r3, r2
100418da:	b2da      	uxtb	r2, r3
100418dc:	2364      	movs	r3, #100	@ 0x64
100418de:	181b      	adds	r3, r3, r0
100418e0:	19db      	adds	r3, r3, r7
100418e2:	1c11      	adds	r1, r2, #0
100418e4:	0109      	lsls	r1, r1, #4
100418e6:	1a8a      	subs	r2, r1, r2
100418e8:	701a      	strb	r2, [r3, #0]
	sprintf(folderselectstring, "Schedule time to play\n"
100418ea:	19bb      	adds	r3, r7, r6
100418ec:	781b      	ldrb	r3, [r3, #0]
100418ee:	2b00      	cmp	r3, #0
100418f0:	d102      	bne.n	100418f8 <DrawSchedule+0x9c>
100418f2:	2302      	movs	r3, #2
100418f4:	623b      	str	r3, [r7, #32]
100418f6:	e001      	b.n	100418fc <DrawSchedule+0xa0>
100418f8:	2301      	movs	r3, #1
100418fa:	623b      	str	r3, [r7, #32]
100418fc:	2327      	movs	r3, #39	@ 0x27
100418fe:	18fb      	adds	r3, r7, r3
10041900:	781b      	ldrb	r3, [r3, #0]
10041902:	2b01      	cmp	r3, #1
10041904:	d102      	bne.n	1004190c <DrawSchedule+0xb0>
10041906:	2302      	movs	r3, #2
10041908:	61fb      	str	r3, [r7, #28]
1004190a:	e001      	b.n	10041910 <DrawSchedule+0xb4>
1004190c:	2301      	movs	r3, #1
1004190e:	61fb      	str	r3, [r7, #28]
10041910:	2327      	movs	r3, #39	@ 0x27
10041912:	18fb      	adds	r3, r7, r3
10041914:	781b      	ldrb	r3, [r3, #0]
10041916:	2b02      	cmp	r3, #2
10041918:	d102      	bne.n	10041920 <DrawSchedule+0xc4>
1004191a:	2302      	movs	r3, #2
1004191c:	4698      	mov	r8, r3
1004191e:	e001      	b.n	10041924 <DrawSchedule+0xc8>
10041920:	2301      	movs	r3, #1
10041922:	4698      	mov	r8, r3
10041924:	2327      	movs	r3, #39	@ 0x27
10041926:	18fb      	adds	r3, r7, r3
10041928:	781b      	ldrb	r3, [r3, #0]
1004192a:	2b03      	cmp	r3, #3
1004192c:	d102      	bne.n	10041934 <DrawSchedule+0xd8>
1004192e:	2302      	movs	r3, #2
10041930:	4699      	mov	r9, r3
10041932:	e001      	b.n	10041938 <DrawSchedule+0xdc>
10041934:	2301      	movs	r3, #1
10041936:	4699      	mov	r9, r3
10041938:	2327      	movs	r3, #39	@ 0x27
1004193a:	18fb      	adds	r3, r7, r3
1004193c:	781b      	ldrb	r3, [r3, #0]
1004193e:	2b04      	cmp	r3, #4
10041940:	d102      	bne.n	10041948 <DrawSchedule+0xec>
10041942:	2302      	movs	r3, #2
10041944:	469a      	mov	sl, r3
10041946:	e001      	b.n	1004194c <DrawSchedule+0xf0>
10041948:	2301      	movs	r3, #1
1004194a:	469a      	mov	sl, r3
1004194c:	2327      	movs	r3, #39	@ 0x27
1004194e:	18fb      	adds	r3, r7, r3
10041950:	781b      	ldrb	r3, [r3, #0]
10041952:	2b05      	cmp	r3, #5
10041954:	d102      	bne.n	1004195c <DrawSchedule+0x100>
10041956:	2302      	movs	r3, #2
10041958:	469b      	mov	fp, r3
1004195a:	e001      	b.n	10041960 <DrawSchedule+0x104>
1004195c:	2301      	movs	r3, #1
1004195e:	469b      	mov	fp, r3
10041960:	2326      	movs	r3, #38	@ 0x26
10041962:	18fb      	adds	r3, r7, r3
10041964:	781b      	ldrb	r3, [r3, #0]
10041966:	61bb      	str	r3, [r7, #24]
10041968:	2325      	movs	r3, #37	@ 0x25
1004196a:	18fb      	adds	r3, r7, r3
1004196c:	781b      	ldrb	r3, [r3, #0]
1004196e:	617b      	str	r3, [r7, #20]
10041970:	2367      	movs	r3, #103	@ 0x67
10041972:	2220      	movs	r2, #32
10041974:	189b      	adds	r3, r3, r2
10041976:	19db      	adds	r3, r3, r7
10041978:	781b      	ldrb	r3, [r3, #0]
1004197a:	613b      	str	r3, [r7, #16]
1004197c:	2366      	movs	r3, #102	@ 0x66
1004197e:	189b      	adds	r3, r3, r2
10041980:	19db      	adds	r3, r3, r7
10041982:	781b      	ldrb	r3, [r3, #0]
10041984:	60fb      	str	r3, [r7, #12]
10041986:	2365      	movs	r3, #101	@ 0x65
10041988:	189b      	adds	r3, r3, r2
1004198a:	19db      	adds	r3, r3, r7
1004198c:	781b      	ldrb	r3, [r3, #0]
1004198e:	60bb      	str	r3, [r7, #8]
10041990:	2364      	movs	r3, #100	@ 0x64
10041992:	189b      	adds	r3, r3, r2
10041994:	19db      	adds	r3, r3, r7
10041996:	781b      	ldrb	r3, [r3, #0]
10041998:	607b      	str	r3, [r7, #4]
1004199a:	2327      	movs	r3, #39	@ 0x27
1004199c:	18fb      	adds	r3, r7, r3
1004199e:	781b      	ldrb	r3, [r3, #0]
100419a0:	2b00      	cmp	r3, #0
100419a2:	d102      	bne.n	100419aa <DrawSchedule+0x14e>
100419a4:	2304      	movs	r3, #4
100419a6:	469c      	mov	ip, r3
100419a8:	e001      	b.n	100419ae <DrawSchedule+0x152>
100419aa:	2303      	movs	r3, #3
100419ac:	469c      	mov	ip, r3
100419ae:	2327      	movs	r3, #39	@ 0x27
100419b0:	18fb      	adds	r3, r7, r3
100419b2:	781b      	ldrb	r3, [r3, #0]
100419b4:	2b01      	cmp	r3, #1
100419b6:	d101      	bne.n	100419bc <DrawSchedule+0x160>
100419b8:	2604      	movs	r6, #4
100419ba:	e000      	b.n	100419be <DrawSchedule+0x162>
100419bc:	2603      	movs	r6, #3
100419be:	2327      	movs	r3, #39	@ 0x27
100419c0:	18fb      	adds	r3, r7, r3
100419c2:	781b      	ldrb	r3, [r3, #0]
100419c4:	2b02      	cmp	r3, #2
100419c6:	d101      	bne.n	100419cc <DrawSchedule+0x170>
100419c8:	2504      	movs	r5, #4
100419ca:	e000      	b.n	100419ce <DrawSchedule+0x172>
100419cc:	2503      	movs	r5, #3
100419ce:	2327      	movs	r3, #39	@ 0x27
100419d0:	18fb      	adds	r3, r7, r3
100419d2:	781b      	ldrb	r3, [r3, #0]
100419d4:	2b03      	cmp	r3, #3
100419d6:	d101      	bne.n	100419dc <DrawSchedule+0x180>
100419d8:	2404      	movs	r4, #4
100419da:	e000      	b.n	100419de <DrawSchedule+0x182>
100419dc:	2403      	movs	r4, #3
100419de:	2327      	movs	r3, #39	@ 0x27
100419e0:	18fb      	adds	r3, r7, r3
100419e2:	781b      	ldrb	r3, [r3, #0]
100419e4:	2b04      	cmp	r3, #4
100419e6:	d101      	bne.n	100419ec <DrawSchedule+0x190>
100419e8:	2204      	movs	r2, #4
100419ea:	e000      	b.n	100419ee <DrawSchedule+0x192>
100419ec:	2203      	movs	r2, #3
100419ee:	2327      	movs	r3, #39	@ 0x27
100419f0:	18fb      	adds	r3, r7, r3
100419f2:	781b      	ldrb	r3, [r3, #0]
100419f4:	2b05      	cmp	r3, #5
100419f6:	d101      	bne.n	100419fc <DrawSchedule+0x1a0>
100419f8:	2304      	movs	r3, #4
100419fa:	e000      	b.n	100419fe <DrawSchedule+0x1a2>
100419fc:	2303      	movs	r3, #3
100419fe:	491d      	ldr	r1, [pc, #116]	@ (10041a74 <DrawSchedule+0x218>)
10041a00:	6039      	str	r1, [r7, #0]
10041a02:	2008      	movs	r0, #8
10041a04:	2120      	movs	r1, #32
10041a06:	1840      	adds	r0, r0, r1
10041a08:	19c0      	adds	r0, r0, r7
10041a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
10041a0c:	920e      	str	r2, [sp, #56]	@ 0x38
10041a0e:	940d      	str	r4, [sp, #52]	@ 0x34
10041a10:	950c      	str	r5, [sp, #48]	@ 0x30
10041a12:	960b      	str	r6, [sp, #44]	@ 0x2c
10041a14:	4663      	mov	r3, ip
10041a16:	930a      	str	r3, [sp, #40]	@ 0x28
10041a18:	687b      	ldr	r3, [r7, #4]
10041a1a:	9309      	str	r3, [sp, #36]	@ 0x24
10041a1c:	68bb      	ldr	r3, [r7, #8]
10041a1e:	9308      	str	r3, [sp, #32]
10041a20:	68fb      	ldr	r3, [r7, #12]
10041a22:	9307      	str	r3, [sp, #28]
10041a24:	693b      	ldr	r3, [r7, #16]
10041a26:	9306      	str	r3, [sp, #24]
10041a28:	697b      	ldr	r3, [r7, #20]
10041a2a:	9305      	str	r3, [sp, #20]
10041a2c:	69bb      	ldr	r3, [r7, #24]
10041a2e:	9304      	str	r3, [sp, #16]
10041a30:	465b      	mov	r3, fp
10041a32:	9303      	str	r3, [sp, #12]
10041a34:	4653      	mov	r3, sl
10041a36:	9302      	str	r3, [sp, #8]
10041a38:	464b      	mov	r3, r9
10041a3a:	9301      	str	r3, [sp, #4]
10041a3c:	4643      	mov	r3, r8
10041a3e:	9300      	str	r3, [sp, #0]
10041a40:	69fb      	ldr	r3, [r7, #28]
10041a42:	6a3a      	ldr	r2, [r7, #32]
10041a44:	6839      	ldr	r1, [r7, #0]
10041a46:	f025 ff71 	bl	1006792c <siprintf>
								"%.2d/%.2d S:%.2d:%.2d E:%.2d:%.2d\n"
								" %c  %c    %c  %c    %c  %c\n",
								0==TOPCHAR, 1 ==TOPCHAR, 2 ==TOPCHAR, 3==TOPCHAR, 4==TOPCHAR, 5==TOPCHAR,
								month, day , hour1, minute1, hour2, minute2,
								0==BOTCHAR, 1 ==BOTCHAR, 2 ==BOTCHAR, 3==BOTCHAR, 4==BOTCHAR, 5==BOTCHAR);
	OledClear(OLED_COLOR_BLACK);
10041a4a:	2000      	movs	r0, #0
10041a4c:	f003 fad2 	bl	10044ff4 <OledClear>
	OledDrawString(folderselectstring);
10041a50:	2008      	movs	r0, #8
10041a52:	2320      	movs	r3, #32
10041a54:	18c3      	adds	r3, r0, r3
10041a56:	19db      	adds	r3, r3, r7
10041a58:	0018      	movs	r0, r3
10041a5a:	f003 fa81 	bl	10044f60 <OledDrawString>
	OledUpdate();
10041a5e:	f003 faff 	bl	10045060 <OledUpdate>

}
10041a62:	46c0      	nop			@ (mov r8, r8)
10041a64:	46bd      	mov	sp, r7
10041a66:	b023      	add	sp, #140	@ 0x8c
10041a68:	bcf0      	pop	{r4, r5, r6, r7}
10041a6a:	46bb      	mov	fp, r7
10041a6c:	46b2      	mov	sl, r6
10041a6e:	46a9      	mov	r9, r5
10041a70:	46a0      	mov	r8, r4
10041a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
10041a74:	10068acc 	.word	0x10068acc

10041a78 <ButtonsMenuSM_Event_Init>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t ButtonsMenuSM_Event_Init(FIFO Queue){
10041a78:	b580      	push	{r7, lr}
10041a7a:	b082      	sub	sp, #8
10041a7c:	af00      	add	r7, sp, #0
10041a7e:	6078      	str	r0, [r7, #4]
    ButtonsMenuSMqueue = Queue;
10041a80:	4b0d      	ldr	r3, [pc, #52]	@ (10041ab8 <ButtonsMenuSM_Event_Init+0x40>)
10041a82:	687a      	ldr	r2, [r7, #4]
10041a84:	601a      	str	r2, [r3, #0]
    BMState = main;
10041a86:	4b0d      	ldr	r3, [pc, #52]	@ (10041abc <ButtonsMenuSM_Event_Init+0x44>)
10041a88:	2200      	movs	r2, #0
10041a8a:	701a      	strb	r2, [r3, #0]
    displayoff = 1;
10041a8c:	4b0c      	ldr	r3, [pc, #48]	@ (10041ac0 <ButtonsMenuSM_Event_Init+0x48>)
10041a8e:	2201      	movs	r2, #1
10041a90:	701a      	strb	r2, [r3, #0]
    GPIO_Init();
10041a92:	f002 fa69 	bl	10043f68 <GPIO_Init>
    I2C_Init();
10041a96:	f002 fc71 	bl	1004437c <I2C_Init>
	TIMERS_Init();
10041a9a:	f003 fe39 	bl	10045710 <TIMERS_Init>
	OledInit();
10041a9e:	f003 f973 	bl	10044d88 <OledInit>
	BSP_LED_Init(LED_BLUE);
10041aa2:	2000      	movs	r0, #0
10041aa4:	f005 f88e 	bl	10046bc4 <BSP_LED_Init>
	BSP_LED_Init(LED_RED);
10041aa8:	2002      	movs	r0, #2
10041aaa:	f005 f88b 	bl	10046bc4 <BSP_LED_Init>
    return INIT_OK;
10041aae:	2301      	movs	r3, #1
}
10041ab0:	0018      	movs	r0, r3
10041ab2:	46bd      	mov	sp, r7
10041ab4:	b002      	add	sp, #8
10041ab6:	bd80      	pop	{r7, pc}
10041ab8:	20000398 	.word	0x20000398
10041abc:	2000039c 	.word	0x2000039c
10041ac0:	2000039d 	.word	0x2000039d

10041ac4 <ButtonsMenuSM_Event_Post>:
 * @Function: ButtonsMenuSM_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void ButtonsMenuSM_Event_Post(Event_t event){
10041ac4:	b580      	push	{r7, lr}
10041ac6:	b082      	sub	sp, #8
10041ac8:	af00      	add	r7, sp, #0
10041aca:	1d3b      	adds	r3, r7, #4
10041acc:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(ButtonsMenuSMqueue, event);
10041ace:	4b05      	ldr	r3, [pc, #20]	@ (10041ae4 <ButtonsMenuSM_Event_Post+0x20>)
10041ad0:	681a      	ldr	r2, [r3, #0]
10041ad2:	1d3b      	adds	r3, r7, #4
10041ad4:	6819      	ldr	r1, [r3, #0]
10041ad6:	0010      	movs	r0, r2
10041ad8:	f001 fec7 	bl	1004386a <FIFO_Enqueue>
}
10041adc:	46c0      	nop			@ (mov r8, r8)
10041ade:	46bd      	mov	sp, r7
10041ae0:	b002      	add	sp, #8
10041ae2:	bd80      	pop	{r7, pc}
10041ae4:	20000398 	.word	0x20000398

10041ae8 <ButtonsMenuSM_Event_Updater>:
 * @Function: ButtonsMenuSM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t ButtonsMenuSM_Event_Updater(void){
10041ae8:	b5b0      	push	{r4, r5, r7, lr}
10041aea:	b084      	sub	sp, #16
10041aec:	af00      	add	r7, sp, #0
    static uint32_t debounce = 0;
    static uint8_t lastbuttons = 0xFF;
    static uint32_t timer = 0;
    static uint8_t timeractive = 0;

    Event_t event = (Event_t){EVENT_NONE, 0};
10041aee:	1d3b      	adds	r3, r7, #4
10041af0:	2200      	movs	r2, #0
10041af2:	701a      	strb	r2, [r3, #0]
10041af4:	1d3b      	adds	r3, r7, #4
10041af6:	2200      	movs	r2, #0
10041af8:	805a      	strh	r2, [r3, #2]

    uint8_t currbuttons = GPIO_ReadButtons();
10041afa:	250f      	movs	r5, #15
10041afc:	197c      	adds	r4, r7, r5
10041afe:	f002 fa75 	bl	10043fec <GPIO_ReadButtons>
10041b02:	0003      	movs	r3, r0
10041b04:	7023      	strb	r3, [r4, #0]

    if(currbuttons != lastbuttons && (debounce + DEBOUNCETIME < TIMERS_GetMilliSeconds())){
10041b06:	4b34      	ldr	r3, [pc, #208]	@ (10041bd8 <ButtonsMenuSM_Event_Updater+0xf0>)
10041b08:	781b      	ldrb	r3, [r3, #0]
10041b0a:	197a      	adds	r2, r7, r5
10041b0c:	7812      	ldrb	r2, [r2, #0]
10041b0e:	429a      	cmp	r2, r3
10041b10:	d02f      	beq.n	10041b72 <ButtonsMenuSM_Event_Updater+0x8a>
10041b12:	4b32      	ldr	r3, [pc, #200]	@ (10041bdc <ButtonsMenuSM_Event_Updater+0xf4>)
10041b14:	681b      	ldr	r3, [r3, #0]
10041b16:	3332      	adds	r3, #50	@ 0x32
10041b18:	001c      	movs	r4, r3
10041b1a:	f003 fe45 	bl	100457a8 <TIMERS_GetMilliSeconds>
10041b1e:	0003      	movs	r3, r0
10041b20:	429c      	cmp	r4, r3
10041b22:	d226      	bcs.n	10041b72 <ButtonsMenuSM_Event_Updater+0x8a>
    	event.status = EVENT_BUTTONS;
10041b24:	1d3b      	adds	r3, r7, #4
10041b26:	2204      	movs	r2, #4
10041b28:	701a      	strb	r2, [r3, #0]
    	event.data = (((uint16_t)currbuttons ^ (uint16_t)lastbuttons) << 8) + (uint16_t)currbuttons;
10041b2a:	4b2b      	ldr	r3, [pc, #172]	@ (10041bd8 <ButtonsMenuSM_Event_Updater+0xf0>)
10041b2c:	781a      	ldrb	r2, [r3, #0]
10041b2e:	197b      	adds	r3, r7, r5
10041b30:	781b      	ldrb	r3, [r3, #0]
10041b32:	4053      	eors	r3, r2
10041b34:	b2db      	uxtb	r3, r3
10041b36:	021b      	lsls	r3, r3, #8
10041b38:	b29a      	uxth	r2, r3
10041b3a:	197b      	adds	r3, r7, r5
10041b3c:	781b      	ldrb	r3, [r3, #0]
10041b3e:	b29b      	uxth	r3, r3
10041b40:	18d3      	adds	r3, r2, r3
10041b42:	b29a      	uxth	r2, r3
10041b44:	1d3b      	adds	r3, r7, #4
10041b46:	805a      	strh	r2, [r3, #2]
    	lastbuttons = currbuttons;
10041b48:	4b23      	ldr	r3, [pc, #140]	@ (10041bd8 <ButtonsMenuSM_Event_Updater+0xf0>)
10041b4a:	197a      	adds	r2, r7, r5
10041b4c:	7812      	ldrb	r2, [r2, #0]
10041b4e:	701a      	strb	r2, [r3, #0]
    	debounce = TIMERS_GetMilliSeconds();
10041b50:	f003 fe2a 	bl	100457a8 <TIMERS_GetMilliSeconds>
10041b54:	0002      	movs	r2, r0
10041b56:	4b21      	ldr	r3, [pc, #132]	@ (10041bdc <ButtonsMenuSM_Event_Updater+0xf4>)
10041b58:	601a      	str	r2, [r3, #0]
    	timer = TIMERS_GetMilliSeconds();//delay the sleep timer
10041b5a:	f003 fe25 	bl	100457a8 <TIMERS_GetMilliSeconds>
10041b5e:	0002      	movs	r2, r0
10041b60:	4b1f      	ldr	r3, [pc, #124]	@ (10041be0 <ButtonsMenuSM_Event_Updater+0xf8>)
10041b62:	601a      	str	r2, [r3, #0]
    	timeractive = 1;
10041b64:	4b1f      	ldr	r3, [pc, #124]	@ (10041be4 <ButtonsMenuSM_Event_Updater+0xfc>)
10041b66:	2201      	movs	r2, #1
10041b68:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
10041b6a:	1d3b      	adds	r3, r7, #4
10041b6c:	6818      	ldr	r0, [r3, #0]
10041b6e:	f7ff ffa9 	bl	10041ac4 <ButtonsMenuSM_Event_Post>
    }
    if(timeractive & (timer+SLEEPTIMER < TIMERS_GetMilliSeconds())){
10041b72:	4b1c      	ldr	r3, [pc, #112]	@ (10041be4 <ButtonsMenuSM_Event_Updater+0xfc>)
10041b74:	781b      	ldrb	r3, [r3, #0]
10041b76:	001d      	movs	r5, r3
10041b78:	4b19      	ldr	r3, [pc, #100]	@ (10041be0 <ButtonsMenuSM_Event_Updater+0xf8>)
10041b7a:	681b      	ldr	r3, [r3, #0]
10041b7c:	4a1a      	ldr	r2, [pc, #104]	@ (10041be8 <ButtonsMenuSM_Event_Updater+0x100>)
10041b7e:	189c      	adds	r4, r3, r2
10041b80:	f003 fe12 	bl	100457a8 <TIMERS_GetMilliSeconds>
10041b84:	0003      	movs	r3, r0
10041b86:	429c      	cmp	r4, r3
10041b88:	419b      	sbcs	r3, r3
10041b8a:	425b      	negs	r3, r3
10041b8c:	b2db      	uxtb	r3, r3
10041b8e:	402b      	ands	r3, r5
10041b90:	d00c      	beq.n	10041bac <ButtonsMenuSM_Event_Updater+0xc4>
    	event.status = EVENT_TIMEOUT;
10041b92:	1d3b      	adds	r3, r7, #4
10041b94:	2209      	movs	r2, #9
10041b96:	701a      	strb	r2, [r3, #0]
    	event.data = 0;
10041b98:	1d3b      	adds	r3, r7, #4
10041b9a:	2200      	movs	r2, #0
10041b9c:	805a      	strh	r2, [r3, #2]
    	timeractive = 0;// disable sleep timer until next button press
10041b9e:	4b11      	ldr	r3, [pc, #68]	@ (10041be4 <ButtonsMenuSM_Event_Updater+0xfc>)
10041ba0:	2200      	movs	r2, #0
10041ba2:	701a      	strb	r2, [r3, #0]
    	ButtonsMenuSM_Event_Post(event);
10041ba4:	1d3b      	adds	r3, r7, #4
10041ba6:	6818      	ldr	r0, [r3, #0]
10041ba8:	f7ff ff8c 	bl	10041ac4 <ButtonsMenuSM_Event_Post>

    }
    return event;
10041bac:	2108      	movs	r1, #8
10041bae:	187b      	adds	r3, r7, r1
10041bb0:	1d3a      	adds	r2, r7, #4
10041bb2:	6812      	ldr	r2, [r2, #0]
10041bb4:	601a      	str	r2, [r3, #0]
10041bb6:	187a      	adds	r2, r7, r1
10041bb8:	2300      	movs	r3, #0
10041bba:	8811      	ldrh	r1, [r2, #0]
10041bbc:	0409      	lsls	r1, r1, #16
10041bbe:	0c09      	lsrs	r1, r1, #16
10041bc0:	0c1b      	lsrs	r3, r3, #16
10041bc2:	041b      	lsls	r3, r3, #16
10041bc4:	430b      	orrs	r3, r1
10041bc6:	8852      	ldrh	r2, [r2, #2]
10041bc8:	0412      	lsls	r2, r2, #16
10041bca:	041b      	lsls	r3, r3, #16
10041bcc:	0c1b      	lsrs	r3, r3, #16
10041bce:	4313      	orrs	r3, r2
}
10041bd0:	0018      	movs	r0, r3
10041bd2:	46bd      	mov	sp, r7
10041bd4:	b004      	add	sp, #16
10041bd6:	bdb0      	pop	{r4, r5, r7, pc}
10041bd8:	20002c74 	.word	0x20002c74
10041bdc:	200003a8 	.word	0x200003a8
10041be0:	200003ac 	.word	0x200003ac
10041be4:	200003b0 	.word	0x200003b0
10041be8:	00007530 	.word	0x00007530

10041bec <ButtonsMenuSM_Event_Handler>:
 * @Function: ButtonsMenuSM_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t ButtonsMenuSM_Event_Handler(Event_t event){
10041bec:	b590      	push	{r4, r7, lr}
10041bee:	b08d      	sub	sp, #52	@ 0x34
10041bf0:	af02      	add	r7, sp, #8
10041bf2:	1d3b      	adds	r3, r7, #4
10041bf4:	6018      	str	r0, [r3, #0]
	uint8_t transition = 0;
10041bf6:	2327      	movs	r3, #39	@ 0x27
10041bf8:	18fb      	adds	r3, r7, r3
10041bfa:	2200      	movs	r2, #0
10041bfc:	701a      	strb	r2, [r3, #0]
	ButtonsMenuStates_t nextstate = BMState;
10041bfe:	2326      	movs	r3, #38	@ 0x26
10041c00:	18fb      	adds	r3, r7, r3
10041c02:	4ac4      	ldr	r2, [pc, #784]	@ (10041f14 <ButtonsMenuSM_Event_Handler+0x328>)
10041c04:	7812      	ldrb	r2, [r2, #0]
10041c06:	701a      	strb	r2, [r3, #0]
	if(event.status == EVENT_TIMEOUT){
10041c08:	1d3b      	adds	r3, r7, #4
10041c0a:	781b      	ldrb	r3, [r3, #0]
10041c0c:	b25b      	sxtb	r3, r3
10041c0e:	2b09      	cmp	r3, #9
10041c10:	d104      	bne.n	10041c1c <ButtonsMenuSM_Event_Handler+0x30>
		displayoff = 1;
10041c12:	4bc1      	ldr	r3, [pc, #772]	@ (10041f18 <ButtonsMenuSM_Event_Handler+0x32c>)
10041c14:	2201      	movs	r2, #1
10041c16:	701a      	strb	r2, [r3, #0]
		OledOff();
10041c18:	f003 fa1b 	bl	10045052 <OledOff>
	}
	if(displayoff){
10041c1c:	4bbe      	ldr	r3, [pc, #760]	@ (10041f18 <ButtonsMenuSM_Event_Handler+0x32c>)
10041c1e:	781b      	ldrb	r3, [r3, #0]
10041c20:	2b00      	cmp	r3, #0
10041c22:	d015      	beq.n	10041c50 <ButtonsMenuSM_Event_Handler+0x64>
		if(event.status == EVENT_BUTTONS){
10041c24:	1d3b      	adds	r3, r7, #4
10041c26:	781b      	ldrb	r3, [r3, #0]
10041c28:	b25b      	sxtb	r3, r3
10041c2a:	2b04      	cmp	r3, #4
10041c2c:	d001      	beq.n	10041c32 <ButtonsMenuSM_Event_Handler+0x46>
10041c2e:	f001 f96a 	bl	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
			displayoff = 0;
10041c32:	4bb9      	ldr	r3, [pc, #740]	@ (10041f18 <ButtonsMenuSM_Event_Handler+0x32c>)
10041c34:	2200      	movs	r2, #0
10041c36:	701a      	strb	r2, [r3, #0]
			nextstate = main;
10041c38:	2326      	movs	r3, #38	@ 0x26
10041c3a:	18fb      	adds	r3, r7, r3
10041c3c:	2200      	movs	r2, #0
10041c3e:	701a      	strb	r2, [r3, #0]
			transition = 1;
10041c40:	2327      	movs	r3, #39	@ 0x27
10041c42:	18fb      	adds	r3, r7, r3
10041c44:	2201      	movs	r2, #1
10041c46:	701a      	strb	r2, [r3, #0]
			OledOn();
10041c48:	f003 f9fc 	bl	10045044 <OledOn>
10041c4c:	f001 f95b 	bl	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
		}
	} else {

		switch (BMState){
10041c50:	4bb0      	ldr	r3, [pc, #704]	@ (10041f14 <ButtonsMenuSM_Event_Handler+0x328>)
10041c52:	781b      	ldrb	r3, [r3, #0]
10041c54:	2b05      	cmp	r3, #5
10041c56:	d901      	bls.n	10041c5c <ButtonsMenuSM_Event_Handler+0x70>
10041c58:	f001 f948 	bl	10042eec <ButtonsMenuSM_Event_Handler+0x1300>
10041c5c:	009a      	lsls	r2, r3, #2
10041c5e:	4baf      	ldr	r3, [pc, #700]	@ (10041f1c <ButtonsMenuSM_Event_Handler+0x330>)
10041c60:	18d3      	adds	r3, r2, r3
10041c62:	681b      	ldr	r3, [r3, #0]
10041c64:	469f      	mov	pc, r3
		case main:
			if(event.status == EVENT_ENTRY){
10041c66:	1d3b      	adds	r3, r7, #4
10041c68:	781b      	ldrb	r3, [r3, #0]
10041c6a:	b25b      	sxtb	r3, r3
10041c6c:	2b02      	cmp	r3, #2
10041c6e:	d101      	bne.n	10041c74 <ButtonsMenuSM_Event_Handler+0x88>
				DrawMain();
10041c70:	f7ff fc8a 	bl	10041588 <DrawMain>
			}
			if(event.status == EVENT_BUTTONS){
10041c74:	1d3b      	adds	r3, r7, #4
10041c76:	781b      	ldrb	r3, [r3, #0]
10041c78:	b25b      	sxtb	r3, r3
10041c7a:	2b04      	cmp	r3, #4
10041c7c:	d001      	beq.n	10041c82 <ButtonsMenuSM_Event_Handler+0x96>
10041c7e:	f001 f937 	bl	10042ef0 <ButtonsMenuSM_Event_Handler+0x1304>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10041c82:	1d3b      	adds	r3, r7, #4
10041c84:	885b      	ldrh	r3, [r3, #2]
10041c86:	001a      	movs	r2, r3
10041c88:	2380      	movs	r3, #128	@ 0x80
10041c8a:	005b      	lsls	r3, r3, #1
10041c8c:	4013      	ands	r3, r2
10041c8e:	d014      	beq.n	10041cba <ButtonsMenuSM_Event_Handler+0xce>
10041c90:	1d3b      	adds	r3, r7, #4
10041c92:	885b      	ldrh	r3, [r3, #2]
10041c94:	001a      	movs	r2, r3
10041c96:	2301      	movs	r3, #1
10041c98:	4013      	ands	r3, r2
10041c9a:	d10e      	bne.n	10041cba <ButtonsMenuSM_Event_Handler+0xce>
					//discountprintf("moving to folder control");
					nextstate = folderControl;
10041c9c:	2326      	movs	r3, #38	@ 0x26
10041c9e:	18fb      	adds	r3, r7, r3
10041ca0:	2201      	movs	r2, #1
10041ca2:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041ca4:	2327      	movs	r3, #39	@ 0x27
10041ca6:	18fb      	adds	r3, r7, r3
10041ca8:	2201      	movs	r2, #1
10041caa:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
10041cac:	4b9c      	ldr	r3, [pc, #624]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041cae:	2200      	movs	r2, #0
10041cb0:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
10041cb2:	4b9c      	ldr	r3, [pc, #624]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041cb4:	2200      	movs	r2, #0
10041cb6:	701a      	strb	r2, [r3, #0]
10041cb8:	e0a0      	b.n	10041dfc <ButtonsMenuSM_Event_Handler+0x210>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10041cba:	1d3b      	adds	r3, r7, #4
10041cbc:	885b      	ldrh	r3, [r3, #2]
10041cbe:	001a      	movs	r2, r3
10041cc0:	2380      	movs	r3, #128	@ 0x80
10041cc2:	009b      	lsls	r3, r3, #2
10041cc4:	4013      	ands	r3, r2
10041cc6:	d020      	beq.n	10041d0a <ButtonsMenuSM_Event_Handler+0x11e>
10041cc8:	1d3b      	adds	r3, r7, #4
10041cca:	885b      	ldrh	r3, [r3, #2]
10041ccc:	001a      	movs	r2, r3
10041cce:	2302      	movs	r3, #2
10041cd0:	4013      	ands	r3, r2
10041cd2:	d11a      	bne.n	10041d0a <ButtonsMenuSM_Event_Handler+0x11e>
					//discountprintf("moving to schedule day");
					nextstate = scheduleTime;
10041cd4:	2326      	movs	r3, #38	@ 0x26
10041cd6:	18fb      	adds	r3, r7, r3
10041cd8:	2202      	movs	r2, #2
10041cda:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041cdc:	2327      	movs	r3, #39	@ 0x27
10041cde:	18fb      	adds	r3, r7, r3
10041ce0:	2201      	movs	r2, #1
10041ce2:	701a      	strb	r2, [r3, #0]
					monthselect = 0;
10041ce4:	4b90      	ldr	r3, [pc, #576]	@ (10041f28 <ButtonsMenuSM_Event_Handler+0x33c>)
10041ce6:	2200      	movs	r2, #0
10041ce8:	701a      	strb	r2, [r3, #0]
					dayselect = 0;
10041cea:	4b90      	ldr	r3, [pc, #576]	@ (10041f2c <ButtonsMenuSM_Event_Handler+0x340>)
10041cec:	2200      	movs	r2, #0
10041cee:	701a      	strb	r2, [r3, #0]
					Stimeselect = 0;
10041cf0:	4b8f      	ldr	r3, [pc, #572]	@ (10041f30 <ButtonsMenuSM_Event_Handler+0x344>)
10041cf2:	2200      	movs	r2, #0
10041cf4:	701a      	strb	r2, [r3, #0]
					Etimeselect = 0;
10041cf6:	4b8f      	ldr	r3, [pc, #572]	@ (10041f34 <ButtonsMenuSM_Event_Handler+0x348>)
10041cf8:	2200      	movs	r2, #0
10041cfa:	701a      	strb	r2, [r3, #0]
					folderselect = 0;
10041cfc:	4b88      	ldr	r3, [pc, #544]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041cfe:	2200      	movs	r2, #0
10041d00:	701a      	strb	r2, [r3, #0]
					trackselect = 0;
10041d02:	4b88      	ldr	r3, [pc, #544]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041d04:	2200      	movs	r2, #0
10041d06:	701a      	strb	r2, [r3, #0]
10041d08:	e078      	b.n	10041dfc <ButtonsMenuSM_Event_Handler+0x210>

				}else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10041d0a:	1d3b      	adds	r3, r7, #4
10041d0c:	885b      	ldrh	r3, [r3, #2]
10041d0e:	001a      	movs	r2, r3
10041d10:	2380      	movs	r3, #128	@ 0x80
10041d12:	00db      	lsls	r3, r3, #3
10041d14:	4013      	ands	r3, r2
10041d16:	d00e      	beq.n	10041d36 <ButtonsMenuSM_Event_Handler+0x14a>
10041d18:	1d3b      	adds	r3, r7, #4
10041d1a:	885b      	ldrh	r3, [r3, #2]
10041d1c:	001a      	movs	r2, r3
10041d1e:	2304      	movs	r3, #4
10041d20:	4013      	ands	r3, r2
10041d22:	d108      	bne.n	10041d36 <ButtonsMenuSM_Event_Handler+0x14a>
					//discountprintf("incrementing volume");
					nextstate = setTime;
10041d24:	2326      	movs	r3, #38	@ 0x26
10041d26:	18fb      	adds	r3, r7, r3
10041d28:	2204      	movs	r2, #4
10041d2a:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041d2c:	2327      	movs	r3, #39	@ 0x27
10041d2e:	18fb      	adds	r3, r7, r3
10041d30:	2201      	movs	r2, #1
10041d32:	701a      	strb	r2, [r3, #0]
10041d34:	e062      	b.n	10041dfc <ButtonsMenuSM_Event_Handler+0x210>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10041d36:	1d3b      	adds	r3, r7, #4
10041d38:	885b      	ldrh	r3, [r3, #2]
10041d3a:	001a      	movs	r2, r3
10041d3c:	2380      	movs	r3, #128	@ 0x80
10041d3e:	011b      	lsls	r3, r3, #4
10041d40:	4013      	ands	r3, r2
10041d42:	d00e      	beq.n	10041d62 <ButtonsMenuSM_Event_Handler+0x176>
10041d44:	1d3b      	adds	r3, r7, #4
10041d46:	885b      	ldrh	r3, [r3, #2]
10041d48:	001a      	movs	r2, r3
10041d4a:	2308      	movs	r3, #8
10041d4c:	4013      	ands	r3, r2
10041d4e:	d108      	bne.n	10041d62 <ButtonsMenuSM_Event_Handler+0x176>
					//discountprintf("moving to options");
					nextstate = options;
10041d50:	2326      	movs	r3, #38	@ 0x26
10041d52:	18fb      	adds	r3, r7, r3
10041d54:	2205      	movs	r2, #5
10041d56:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041d58:	2327      	movs	r3, #39	@ 0x27
10041d5a:	18fb      	adds	r3, r7, r3
10041d5c:	2201      	movs	r2, #1
10041d5e:	701a      	strb	r2, [r3, #0]
10041d60:	e04c      	b.n	10041dfc <ButtonsMenuSM_Event_Handler+0x210>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10041d62:	1d3b      	adds	r3, r7, #4
10041d64:	885b      	ldrh	r3, [r3, #2]
10041d66:	001a      	movs	r2, r3
10041d68:	2380      	movs	r3, #128	@ 0x80
10041d6a:	015b      	lsls	r3, r3, #5
10041d6c:	4013      	ands	r3, r2
10041d6e:	d01a      	beq.n	10041da6 <ButtonsMenuSM_Event_Handler+0x1ba>
10041d70:	1d3b      	adds	r3, r7, #4
10041d72:	885b      	ldrh	r3, [r3, #2]
10041d74:	001a      	movs	r2, r3
10041d76:	2310      	movs	r3, #16
10041d78:	4013      	ands	r3, r2
10041d7a:	d114      	bne.n	10041da6 <ButtonsMenuSM_Event_Handler+0x1ba>
					//discountprintf("decrementing volume");
					uint8_t vol = FLASH_GetVolume()-1;
10041d7c:	f001 fecc 	bl	10043b18 <FLASH_GetVolume>
10041d80:	0003      	movs	r3, r0
10041d82:	001a      	movs	r2, r3
10041d84:	2421      	movs	r4, #33	@ 0x21
10041d86:	193b      	adds	r3, r7, r4
10041d88:	3a01      	subs	r2, #1
10041d8a:	701a      	strb	r2, [r3, #0]
					if(vol >= 0){
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
10041d8c:	f001 feda 	bl	10043b44 <FLASH_GetDutyCycle>
10041d90:	0003      	movs	r3, r0
10041d92:	001a      	movs	r2, r3
10041d94:	193b      	adds	r3, r7, r4
10041d96:	781b      	ldrb	r3, [r3, #0]
10041d98:	0011      	movs	r1, r2
10041d9a:	0018      	movs	r0, r3
10041d9c:	f001 fe7a 	bl	10043a94 <FLASH_SetDCVol>
					}
					DrawMain();
10041da0:	f7ff fbf2 	bl	10041588 <DrawMain>
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10041da4:	e02a      	b.n	10041dfc <ButtonsMenuSM_Event_Handler+0x210>

				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10041da6:	1d3b      	adds	r3, r7, #4
10041da8:	885b      	ldrh	r3, [r3, #2]
10041daa:	001a      	movs	r2, r3
10041dac:	2380      	movs	r3, #128	@ 0x80
10041dae:	019b      	lsls	r3, r3, #6
10041db0:	4013      	ands	r3, r2
10041db2:	d101      	bne.n	10041db8 <ButtonsMenuSM_Event_Handler+0x1cc>
10041db4:	f001 f89c 	bl	10042ef0 <ButtonsMenuSM_Event_Handler+0x1304>
10041db8:	1d3b      	adds	r3, r7, #4
10041dba:	885b      	ldrh	r3, [r3, #2]
10041dbc:	001a      	movs	r2, r3
10041dbe:	2320      	movs	r3, #32
10041dc0:	4013      	ands	r3, r2
10041dc2:	d001      	beq.n	10041dc8 <ButtonsMenuSM_Event_Handler+0x1dc>
10041dc4:	f001 f894 	bl	10042ef0 <ButtonsMenuSM_Event_Handler+0x1304>
					//discountprintf("moving to set Time");
					uint8_t vol = FLASH_GetVolume()+1;
10041dc8:	f001 fea6 	bl	10043b18 <FLASH_GetVolume>
10041dcc:	0003      	movs	r3, r0
10041dce:	001a      	movs	r2, r3
10041dd0:	2420      	movs	r4, #32
10041dd2:	193b      	adds	r3, r7, r4
10041dd4:	3201      	adds	r2, #1
10041dd6:	701a      	strb	r2, [r3, #0]
					if(vol <= 100){
10041dd8:	193b      	adds	r3, r7, r4
10041dda:	781b      	ldrb	r3, [r3, #0]
10041ddc:	2b64      	cmp	r3, #100	@ 0x64
10041dde:	d809      	bhi.n	10041df4 <ButtonsMenuSM_Event_Handler+0x208>
						FLASH_SetDCVol(vol, FLASH_GetDutyCycle());
10041de0:	f001 feb0 	bl	10043b44 <FLASH_GetDutyCycle>
10041de4:	0003      	movs	r3, r0
10041de6:	001a      	movs	r2, r3
10041de8:	193b      	adds	r3, r7, r4
10041dea:	781b      	ldrb	r3, [r3, #0]
10041dec:	0011      	movs	r1, r2
10041dee:	0018      	movs	r0, r3
10041df0:	f001 fe50 	bl	10043a94 <FLASH_SetDCVol>
					}
					DrawMain();
10041df4:	f7ff fbc8 	bl	10041588 <DrawMain>

				}

			}
			break;
10041df8:	f001 f87a 	bl	10042ef0 <ButtonsMenuSM_Event_Handler+0x1304>
10041dfc:	f001 f878 	bl	10042ef0 <ButtonsMenuSM_Event_Handler+0x1304>
		case folderControl:
			if(event.status == EVENT_ENTRY){
10041e00:	1d3b      	adds	r3, r7, #4
10041e02:	781b      	ldrb	r3, [r3, #0]
10041e04:	b25b      	sxtb	r3, r3
10041e06:	2b02      	cmp	r3, #2
10041e08:	d10b      	bne.n	10041e22 <ButtonsMenuSM_Event_Handler+0x236>
				cursorpos = 0;
10041e0a:	4b4b      	ldr	r3, [pc, #300]	@ (10041f38 <ButtonsMenuSM_Event_Handler+0x34c>)
10041e0c:	2200      	movs	r2, #0
10041e0e:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
10041e10:	4b49      	ldr	r3, [pc, #292]	@ (10041f38 <ButtonsMenuSM_Event_Handler+0x34c>)
10041e12:	7818      	ldrb	r0, [r3, #0]
10041e14:	4b42      	ldr	r3, [pc, #264]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041e16:	7819      	ldrb	r1, [r3, #0]
10041e18:	4b42      	ldr	r3, [pc, #264]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041e1a:	781b      	ldrb	r3, [r3, #0]
10041e1c:	001a      	movs	r2, r3
10041e1e:	f7ff fbd1 	bl	100415c4 <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
10041e22:	1d3b      	adds	r3, r7, #4
10041e24:	781b      	ldrb	r3, [r3, #0]
10041e26:	b25b      	sxtb	r3, r3
10041e28:	2b04      	cmp	r3, #4
10041e2a:	d001      	beq.n	10041e30 <ButtonsMenuSM_Event_Handler+0x244>
10041e2c:	f001 f862 	bl	10042ef4 <ButtonsMenuSM_Event_Handler+0x1308>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10041e30:	1d3b      	adds	r3, r7, #4
10041e32:	885b      	ldrh	r3, [r3, #2]
10041e34:	001a      	movs	r2, r3
10041e36:	2380      	movs	r3, #128	@ 0x80
10041e38:	005b      	lsls	r3, r3, #1
10041e3a:	4013      	ands	r3, r2
10041e3c:	d00e      	beq.n	10041e5c <ButtonsMenuSM_Event_Handler+0x270>
10041e3e:	1d3b      	adds	r3, r7, #4
10041e40:	885b      	ldrh	r3, [r3, #2]
10041e42:	001a      	movs	r2, r3
10041e44:	2301      	movs	r3, #1
10041e46:	4013      	ands	r3, r2
10041e48:	d108      	bne.n	10041e5c <ButtonsMenuSM_Event_Handler+0x270>
					//discountprintf("moving to main, back");
					nextstate = main;
10041e4a:	2326      	movs	r3, #38	@ 0x26
10041e4c:	18fb      	adds	r3, r7, r3
10041e4e:	2200      	movs	r2, #0
10041e50:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041e52:	2327      	movs	r3, #39	@ 0x27
10041e54:	18fb      	adds	r3, r7, r3
10041e56:	2201      	movs	r2, #1
10041e58:	701a      	strb	r2, [r3, #0]
10041e5a:	e0e3      	b.n	10042024 <ButtonsMenuSM_Event_Handler+0x438>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10041e5c:	1d3b      	adds	r3, r7, #4
10041e5e:	885b      	ldrh	r3, [r3, #2]
10041e60:	001a      	movs	r2, r3
10041e62:	2380      	movs	r3, #128	@ 0x80
10041e64:	009b      	lsls	r3, r3, #2
10041e66:	4013      	ands	r3, r2
10041e68:	d024      	beq.n	10041eb4 <ButtonsMenuSM_Event_Handler+0x2c8>
10041e6a:	1d3b      	adds	r3, r7, #4
10041e6c:	885b      	ldrh	r3, [r3, #2]
10041e6e:	001a      	movs	r2, r3
10041e70:	2302      	movs	r3, #2
10041e72:	4013      	ands	r3, r2
10041e74:	d11e      	bne.n	10041eb4 <ButtonsMenuSM_Event_Handler+0x2c8>
					MP3_Event_Post(((Event_t){EVENT_PLAY, ((folderselect+1)<<8) + (trackselect+1)}));
10041e76:	211c      	movs	r1, #28
10041e78:	187b      	adds	r3, r7, r1
10041e7a:	220b      	movs	r2, #11
10041e7c:	701a      	strb	r2, [r3, #0]
10041e7e:	4b28      	ldr	r3, [pc, #160]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041e80:	781b      	ldrb	r3, [r3, #0]
10041e82:	3301      	adds	r3, #1
10041e84:	b29b      	uxth	r3, r3
10041e86:	021b      	lsls	r3, r3, #8
10041e88:	b29b      	uxth	r3, r3
10041e8a:	4a26      	ldr	r2, [pc, #152]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041e8c:	7812      	ldrb	r2, [r2, #0]
10041e8e:	189b      	adds	r3, r3, r2
10041e90:	b29b      	uxth	r3, r3
10041e92:	3301      	adds	r3, #1
10041e94:	b29a      	uxth	r2, r3
10041e96:	187b      	adds	r3, r7, r1
10041e98:	805a      	strh	r2, [r3, #2]
10041e9a:	187b      	adds	r3, r7, r1
10041e9c:	6818      	ldr	r0, [r3, #0]
10041e9e:	f002 fd95 	bl	100449cc <MP3_Event_Post>
					//discountprintf("moving to main, select");
					nextstate = main;
10041ea2:	2326      	movs	r3, #38	@ 0x26
10041ea4:	18fb      	adds	r3, r7, r3
10041ea6:	2200      	movs	r2, #0
10041ea8:	701a      	strb	r2, [r3, #0]
					transition = 1;
10041eaa:	2327      	movs	r3, #39	@ 0x27
10041eac:	18fb      	adds	r3, r7, r3
10041eae:	2201      	movs	r2, #1
10041eb0:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10041eb2:	e0b7      	b.n	10042024 <ButtonsMenuSM_Event_Handler+0x438>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10041eb4:	1d3b      	adds	r3, r7, #4
10041eb6:	885b      	ldrh	r3, [r3, #2]
10041eb8:	001a      	movs	r2, r3
10041eba:	2380      	movs	r3, #128	@ 0x80
10041ebc:	00db      	lsls	r3, r3, #3
10041ebe:	4013      	ands	r3, r2
10041ec0:	d03c      	beq.n	10041f3c <ButtonsMenuSM_Event_Handler+0x350>
10041ec2:	1d3b      	adds	r3, r7, #4
10041ec4:	885b      	ldrh	r3, [r3, #2]
10041ec6:	001a      	movs	r2, r3
10041ec8:	2304      	movs	r3, #4
10041eca:	4013      	ands	r3, r2
10041ecc:	d136      	bne.n	10041f3c <ButtonsMenuSM_Event_Handler+0x350>
					if(!cursorpos){
10041ece:	4b1a      	ldr	r3, [pc, #104]	@ (10041f38 <ButtonsMenuSM_Event_Handler+0x34c>)
10041ed0:	781b      	ldrb	r3, [r3, #0]
10041ed2:	2b00      	cmp	r3, #0
10041ed4:	d10a      	bne.n	10041eec <ButtonsMenuSM_Event_Handler+0x300>
						folderselect--;
10041ed6:	4b12      	ldr	r3, [pc, #72]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041ed8:	781b      	ldrb	r3, [r3, #0]
10041eda:	3b01      	subs	r3, #1
10041edc:	b2da      	uxtb	r2, r3
10041ede:	4b10      	ldr	r3, [pc, #64]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041ee0:	701a      	strb	r2, [r3, #0]
						folderselect %= 256;
10041ee2:	4b0f      	ldr	r3, [pc, #60]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041ee4:	781a      	ldrb	r2, [r3, #0]
10041ee6:	4b0e      	ldr	r3, [pc, #56]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041ee8:	701a      	strb	r2, [r3, #0]
10041eea:	e009      	b.n	10041f00 <ButtonsMenuSM_Event_Handler+0x314>
					} else {
						trackselect--;
10041eec:	4b0d      	ldr	r3, [pc, #52]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041eee:	781b      	ldrb	r3, [r3, #0]
10041ef0:	3b01      	subs	r3, #1
10041ef2:	b2da      	uxtb	r2, r3
10041ef4:	4b0b      	ldr	r3, [pc, #44]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041ef6:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10041ef8:	4b0a      	ldr	r3, [pc, #40]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041efa:	781a      	ldrb	r2, [r3, #0]
10041efc:	4b09      	ldr	r3, [pc, #36]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041efe:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10041f00:	4b0d      	ldr	r3, [pc, #52]	@ (10041f38 <ButtonsMenuSM_Event_Handler+0x34c>)
10041f02:	7818      	ldrb	r0, [r3, #0]
10041f04:	4b06      	ldr	r3, [pc, #24]	@ (10041f20 <ButtonsMenuSM_Event_Handler+0x334>)
10041f06:	7819      	ldrb	r1, [r3, #0]
10041f08:	4b06      	ldr	r3, [pc, #24]	@ (10041f24 <ButtonsMenuSM_Event_Handler+0x338>)
10041f0a:	781b      	ldrb	r3, [r3, #0]
10041f0c:	001a      	movs	r2, r3
10041f0e:	f7ff fb59 	bl	100415c4 <DrawFolder>
10041f12:	e087      	b.n	10042024 <ButtonsMenuSM_Event_Handler+0x438>
10041f14:	2000039c 	.word	0x2000039c
10041f18:	2000039d 	.word	0x2000039d
10041f1c:	1006930c 	.word	0x1006930c
10041f20:	2000039f 	.word	0x2000039f
10041f24:	200003a0 	.word	0x200003a0
10041f28:	200003a1 	.word	0x200003a1
10041f2c:	200003a2 	.word	0x200003a2
10041f30:	200003a3 	.word	0x200003a3
10041f34:	200003a4 	.word	0x200003a4
10041f38:	2000039e 	.word	0x2000039e

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10041f3c:	1d3b      	adds	r3, r7, #4
10041f3e:	885b      	ldrh	r3, [r3, #2]
10041f40:	001a      	movs	r2, r3
10041f42:	2380      	movs	r3, #128	@ 0x80
10041f44:	011b      	lsls	r3, r3, #4
10041f46:	4013      	ands	r3, r2
10041f48:	d029      	beq.n	10041f9e <ButtonsMenuSM_Event_Handler+0x3b2>
10041f4a:	1d3b      	adds	r3, r7, #4
10041f4c:	885b      	ldrh	r3, [r3, #2]
10041f4e:	001a      	movs	r2, r3
10041f50:	2308      	movs	r3, #8
10041f52:	4013      	ands	r3, r2
10041f54:	d123      	bne.n	10041f9e <ButtonsMenuSM_Event_Handler+0x3b2>
					if(!cursorpos){
10041f56:	4bce      	ldr	r3, [pc, #824]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
10041f58:	781b      	ldrb	r3, [r3, #0]
10041f5a:	2b00      	cmp	r3, #0
10041f5c:	d10a      	bne.n	10041f74 <ButtonsMenuSM_Event_Handler+0x388>
						folderselect++;
10041f5e:	4bcd      	ldr	r3, [pc, #820]	@ (10042294 <ButtonsMenuSM_Event_Handler+0x6a8>)
10041f60:	781b      	ldrb	r3, [r3, #0]
10041f62:	3301      	adds	r3, #1
10041f64:	b2da      	uxtb	r2, r3
10041f66:	4bcb      	ldr	r3, [pc, #812]	@ (10042294 <ButtonsMenuSM_Event_Handler+0x6a8>)
10041f68:	701a      	strb	r2, [r3, #0]
						folderselect %= 256;
10041f6a:	4bca      	ldr	r3, [pc, #808]	@ (10042294 <ButtonsMenuSM_Event_Handler+0x6a8>)
10041f6c:	781a      	ldrb	r2, [r3, #0]
10041f6e:	4bc9      	ldr	r3, [pc, #804]	@ (10042294 <ButtonsMenuSM_Event_Handler+0x6a8>)
10041f70:	701a      	strb	r2, [r3, #0]
10041f72:	e009      	b.n	10041f88 <ButtonsMenuSM_Event_Handler+0x39c>
					} else {
						trackselect++;
10041f74:	4bc8      	ldr	r3, [pc, #800]	@ (10042298 <ButtonsMenuSM_Event_Handler+0x6ac>)
10041f76:	781b      	ldrb	r3, [r3, #0]
10041f78:	3301      	adds	r3, #1
10041f7a:	b2da      	uxtb	r2, r3
10041f7c:	4bc6      	ldr	r3, [pc, #792]	@ (10042298 <ButtonsMenuSM_Event_Handler+0x6ac>)
10041f7e:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10041f80:	4bc5      	ldr	r3, [pc, #788]	@ (10042298 <ButtonsMenuSM_Event_Handler+0x6ac>)
10041f82:	781a      	ldrb	r2, [r3, #0]
10041f84:	4bc4      	ldr	r3, [pc, #784]	@ (10042298 <ButtonsMenuSM_Event_Handler+0x6ac>)
10041f86:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10041f88:	4bc1      	ldr	r3, [pc, #772]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
10041f8a:	7818      	ldrb	r0, [r3, #0]
10041f8c:	4bc1      	ldr	r3, [pc, #772]	@ (10042294 <ButtonsMenuSM_Event_Handler+0x6a8>)
10041f8e:	7819      	ldrb	r1, [r3, #0]
10041f90:	4bc1      	ldr	r3, [pc, #772]	@ (10042298 <ButtonsMenuSM_Event_Handler+0x6ac>)
10041f92:	781b      	ldrb	r3, [r3, #0]
10041f94:	001a      	movs	r2, r3
10041f96:	f7ff fb15 	bl	100415c4 <DrawFolder>
					break;
10041f9a:	f000 ffb4 	bl	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10041f9e:	1d3b      	adds	r3, r7, #4
10041fa0:	885b      	ldrh	r3, [r3, #2]
10041fa2:	001a      	movs	r2, r3
10041fa4:	2380      	movs	r3, #128	@ 0x80
10041fa6:	015b      	lsls	r3, r3, #5
10041fa8:	4013      	ands	r3, r2
10041faa:	d017      	beq.n	10041fdc <ButtonsMenuSM_Event_Handler+0x3f0>
10041fac:	1d3b      	adds	r3, r7, #4
10041fae:	885b      	ldrh	r3, [r3, #2]
10041fb0:	001a      	movs	r2, r3
10041fb2:	2310      	movs	r3, #16
10041fb4:	4013      	ands	r3, r2
10041fb6:	d111      	bne.n	10041fdc <ButtonsMenuSM_Event_Handler+0x3f0>
					cursorpos = !cursorpos;
10041fb8:	4bb5      	ldr	r3, [pc, #724]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
10041fba:	781b      	ldrb	r3, [r3, #0]
10041fbc:	425a      	negs	r2, r3
10041fbe:	4153      	adcs	r3, r2
10041fc0:	b2db      	uxtb	r3, r3
10041fc2:	001a      	movs	r2, r3
10041fc4:	4bb2      	ldr	r3, [pc, #712]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
10041fc6:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10041fc8:	4bb1      	ldr	r3, [pc, #708]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
10041fca:	7818      	ldrb	r0, [r3, #0]
10041fcc:	4bb1      	ldr	r3, [pc, #708]	@ (10042294 <ButtonsMenuSM_Event_Handler+0x6a8>)
10041fce:	7819      	ldrb	r1, [r3, #0]
10041fd0:	4bb1      	ldr	r3, [pc, #708]	@ (10042298 <ButtonsMenuSM_Event_Handler+0x6ac>)
10041fd2:	781b      	ldrb	r3, [r3, #0]
10041fd4:	001a      	movs	r2, r3
10041fd6:	f7ff faf5 	bl	100415c4 <DrawFolder>
10041fda:	e023      	b.n	10042024 <ButtonsMenuSM_Event_Handler+0x438>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10041fdc:	1d3b      	adds	r3, r7, #4
10041fde:	885b      	ldrh	r3, [r3, #2]
10041fe0:	001a      	movs	r2, r3
10041fe2:	2380      	movs	r3, #128	@ 0x80
10041fe4:	019b      	lsls	r3, r3, #6
10041fe6:	4013      	ands	r3, r2
10041fe8:	d101      	bne.n	10041fee <ButtonsMenuSM_Event_Handler+0x402>
10041fea:	f000 ff83 	bl	10042ef4 <ButtonsMenuSM_Event_Handler+0x1308>
10041fee:	1d3b      	adds	r3, r7, #4
10041ff0:	885b      	ldrh	r3, [r3, #2]
10041ff2:	001a      	movs	r2, r3
10041ff4:	2320      	movs	r3, #32
10041ff6:	4013      	ands	r3, r2
10041ff8:	d001      	beq.n	10041ffe <ButtonsMenuSM_Event_Handler+0x412>
10041ffa:	f000 ff7b 	bl	10042ef4 <ButtonsMenuSM_Event_Handler+0x1308>
					cursorpos = !cursorpos;
10041ffe:	4ba4      	ldr	r3, [pc, #656]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
10042000:	781b      	ldrb	r3, [r3, #0]
10042002:	425a      	negs	r2, r3
10042004:	4153      	adcs	r3, r2
10042006:	b2db      	uxtb	r3, r3
10042008:	001a      	movs	r2, r3
1004200a:	4ba1      	ldr	r3, [pc, #644]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
1004200c:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
1004200e:	4ba0      	ldr	r3, [pc, #640]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
10042010:	7818      	ldrb	r0, [r3, #0]
10042012:	4ba0      	ldr	r3, [pc, #640]	@ (10042294 <ButtonsMenuSM_Event_Handler+0x6a8>)
10042014:	7819      	ldrb	r1, [r3, #0]
10042016:	4ba0      	ldr	r3, [pc, #640]	@ (10042298 <ButtonsMenuSM_Event_Handler+0x6ac>)
10042018:	781b      	ldrb	r3, [r3, #0]
1004201a:	001a      	movs	r2, r3
1004201c:	f7ff fad2 	bl	100415c4 <DrawFolder>
				}
			}
			break;
10042020:	f000 ff68 	bl	10042ef4 <ButtonsMenuSM_Event_Handler+0x1308>
10042024:	f000 ff66 	bl	10042ef4 <ButtonsMenuSM_Event_Handler+0x1308>
		case scheduleTime:
			if(event.status == EVENT_ENTRY){
10042028:	1d3b      	adds	r3, r7, #4
1004202a:	781b      	ldrb	r3, [r3, #0]
1004202c:	b25b      	sxtb	r3, r3
1004202e:	2b02      	cmp	r3, #2
10042030:	d112      	bne.n	10042058 <ButtonsMenuSM_Event_Handler+0x46c>
				cursorpos = 0;
10042032:	4b97      	ldr	r3, [pc, #604]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
10042034:	2200      	movs	r2, #0
10042036:	701a      	strb	r2, [r3, #0]
				DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042038:	4b95      	ldr	r3, [pc, #596]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
1004203a:	7818      	ldrb	r0, [r3, #0]
1004203c:	4b97      	ldr	r3, [pc, #604]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
1004203e:	7819      	ldrb	r1, [r3, #0]
10042040:	4b97      	ldr	r3, [pc, #604]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042042:	781b      	ldrb	r3, [r3, #0]
10042044:	3301      	adds	r3, #1
10042046:	b2da      	uxtb	r2, r3
10042048:	4b96      	ldr	r3, [pc, #600]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004204a:	781c      	ldrb	r4, [r3, #0]
1004204c:	4b96      	ldr	r3, [pc, #600]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004204e:	781b      	ldrb	r3, [r3, #0]
10042050:	9300      	str	r3, [sp, #0]
10042052:	0023      	movs	r3, r4
10042054:	f7ff fc02 	bl	1004185c <DrawSchedule>
			}
			if(event.status == EVENT_BUTTONS){
10042058:	1d3b      	adds	r3, r7, #4
1004205a:	781b      	ldrb	r3, [r3, #0]
1004205c:	b25b      	sxtb	r3, r3
1004205e:	2b04      	cmp	r3, #4
10042060:	d001      	beq.n	10042066 <ButtonsMenuSM_Event_Handler+0x47a>
10042062:	f000 ff49 	bl	10042ef8 <ButtonsMenuSM_Event_Handler+0x130c>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042066:	1d3b      	adds	r3, r7, #4
10042068:	885b      	ldrh	r3, [r3, #2]
1004206a:	001a      	movs	r2, r3
1004206c:	2380      	movs	r3, #128	@ 0x80
1004206e:	005b      	lsls	r3, r3, #1
10042070:	4013      	ands	r3, r2
10042072:	d00e      	beq.n	10042092 <ButtonsMenuSM_Event_Handler+0x4a6>
10042074:	1d3b      	adds	r3, r7, #4
10042076:	885b      	ldrh	r3, [r3, #2]
10042078:	001a      	movs	r2, r3
1004207a:	2301      	movs	r3, #1
1004207c:	4013      	ands	r3, r2
1004207e:	d108      	bne.n	10042092 <ButtonsMenuSM_Event_Handler+0x4a6>
					nextstate = main;
10042080:	2326      	movs	r3, #38	@ 0x26
10042082:	18fb      	adds	r3, r7, r3
10042084:	2200      	movs	r2, #0
10042086:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042088:	2327      	movs	r3, #39	@ 0x27
1004208a:	18fb      	adds	r3, r7, r3
1004208c:	2201      	movs	r2, #1
1004208e:	701a      	strb	r2, [r3, #0]
10042090:	e1e6      	b.n	10042460 <ButtonsMenuSM_Event_Handler+0x874>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042092:	1d3b      	adds	r3, r7, #4
10042094:	885b      	ldrh	r3, [r3, #2]
10042096:	001a      	movs	r2, r3
10042098:	2380      	movs	r3, #128	@ 0x80
1004209a:	009b      	lsls	r3, r3, #2
1004209c:	4013      	ands	r3, r2
1004209e:	d00e      	beq.n	100420be <ButtonsMenuSM_Event_Handler+0x4d2>
100420a0:	1d3b      	adds	r3, r7, #4
100420a2:	885b      	ldrh	r3, [r3, #2]
100420a4:	001a      	movs	r2, r3
100420a6:	2302      	movs	r3, #2
100420a8:	4013      	ands	r3, r2
100420aa:	d108      	bne.n	100420be <ButtonsMenuSM_Event_Handler+0x4d2>
					nextstate = scheduleFolder;
100420ac:	2326      	movs	r3, #38	@ 0x26
100420ae:	18fb      	adds	r3, r7, r3
100420b0:	2203      	movs	r2, #3
100420b2:	701a      	strb	r2, [r3, #0]
					transition = 1;
100420b4:	2327      	movs	r3, #39	@ 0x27
100420b6:	18fb      	adds	r3, r7, r3
100420b8:	2201      	movs	r2, #1
100420ba:	701a      	strb	r2, [r3, #0]
100420bc:	e1d0      	b.n	10042460 <ButtonsMenuSM_Event_Handler+0x874>
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
100420be:	1d3b      	adds	r3, r7, #4
100420c0:	885b      	ldrh	r3, [r3, #2]
100420c2:	001a      	movs	r2, r3
100420c4:	2380      	movs	r3, #128	@ 0x80
100420c6:	00db      	lsls	r3, r3, #3
100420c8:	4013      	ands	r3, r2
100420ca:	d100      	bne.n	100420ce <ButtonsMenuSM_Event_Handler+0x4e2>
100420cc:	e0a5      	b.n	1004221a <ButtonsMenuSM_Event_Handler+0x62e>
100420ce:	1d3b      	adds	r3, r7, #4
100420d0:	885b      	ldrh	r3, [r3, #2]
100420d2:	001a      	movs	r2, r3
100420d4:	2304      	movs	r3, #4
100420d6:	4013      	ands	r3, r2
100420d8:	d000      	beq.n	100420dc <ButtonsMenuSM_Event_Handler+0x4f0>
100420da:	e09e      	b.n	1004221a <ButtonsMenuSM_Event_Handler+0x62e>
					switch(cursorpos){
100420dc:	4b6c      	ldr	r3, [pc, #432]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
100420de:	781b      	ldrb	r3, [r3, #0]
100420e0:	2b05      	cmp	r3, #5
100420e2:	d900      	bls.n	100420e6 <ButtonsMenuSM_Event_Handler+0x4fa>
100420e4:	e083      	b.n	100421ee <ButtonsMenuSM_Event_Handler+0x602>
100420e6:	009a      	lsls	r2, r3, #2
100420e8:	4b70      	ldr	r3, [pc, #448]	@ (100422ac <ButtonsMenuSM_Event_Handler+0x6c0>)
100420ea:	18d3      	adds	r3, r2, r3
100420ec:	681b      	ldr	r3, [r3, #0]
100420ee:	469f      	mov	pc, r3
					case 0:
						monthselect--;
100420f0:	4b6a      	ldr	r3, [pc, #424]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
100420f2:	781b      	ldrb	r3, [r3, #0]
100420f4:	3b01      	subs	r3, #1
100420f6:	b2da      	uxtb	r2, r3
100420f8:	4b68      	ldr	r3, [pc, #416]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
100420fa:	701a      	strb	r2, [r3, #0]
						if (monthselect == 255){
100420fc:	4b67      	ldr	r3, [pc, #412]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
100420fe:	781b      	ldrb	r3, [r3, #0]
10042100:	2bff      	cmp	r3, #255	@ 0xff
10042102:	d000      	beq.n	10042106 <ButtonsMenuSM_Event_Handler+0x51a>
10042104:	e075      	b.n	100421f2 <ButtonsMenuSM_Event_Handler+0x606>
							monthselect = 12;
10042106:	4b65      	ldr	r3, [pc, #404]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
10042108:	220c      	movs	r2, #12
1004210a:	701a      	strb	r2, [r3, #0]
						}
						break;
1004210c:	e071      	b.n	100421f2 <ButtonsMenuSM_Event_Handler+0x606>
					case 1:
						dayselect--;
1004210e:	4b64      	ldr	r3, [pc, #400]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042110:	781b      	ldrb	r3, [r3, #0]
10042112:	3b01      	subs	r3, #1
10042114:	b2da      	uxtb	r2, r3
10042116:	4b62      	ldr	r3, [pc, #392]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042118:	701a      	strb	r2, [r3, #0]
						if (dayselect == 255){
1004211a:	4b61      	ldr	r3, [pc, #388]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
1004211c:	781b      	ldrb	r3, [r3, #0]
1004211e:	2bff      	cmp	r3, #255	@ 0xff
10042120:	d169      	bne.n	100421f6 <ButtonsMenuSM_Event_Handler+0x60a>
							dayselect = 30;
10042122:	4b5f      	ldr	r3, [pc, #380]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042124:	221e      	movs	r2, #30
10042126:	701a      	strb	r2, [r3, #0]
						}
						break;
10042128:	e065      	b.n	100421f6 <ButtonsMenuSM_Event_Handler+0x60a>
					case 2:
						if((Stimeselect&0b11111000) == 0){
1004212a:	4b5e      	ldr	r3, [pc, #376]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004212c:	781b      	ldrb	r3, [r3, #0]
1004212e:	001a      	movs	r2, r3
10042130:	23f8      	movs	r3, #248	@ 0xf8
10042132:	4013      	ands	r3, r2
10042134:	d10d      	bne.n	10042152 <ButtonsMenuSM_Event_Handler+0x566>
							Stimeselect = 0b10111000 | (Stimeselect&0b11);//23:XX
10042136:	4b5b      	ldr	r3, [pc, #364]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042138:	781b      	ldrb	r3, [r3, #0]
1004213a:	b25b      	sxtb	r3, r3
1004213c:	2203      	movs	r2, #3
1004213e:	4013      	ands	r3, r2
10042140:	b25b      	sxtb	r3, r3
10042142:	2248      	movs	r2, #72	@ 0x48
10042144:	4252      	negs	r2, r2
10042146:	4313      	orrs	r3, r2
10042148:	b25b      	sxtb	r3, r3
1004214a:	b2da      	uxtb	r2, r3
1004214c:	4b55      	ldr	r3, [pc, #340]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004214e:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect -= 0b00001000;
						}
						break;
10042150:	e052      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
							Stimeselect -= 0b00001000;
10042152:	4b54      	ldr	r3, [pc, #336]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042154:	781b      	ldrb	r3, [r3, #0]
10042156:	3b08      	subs	r3, #8
10042158:	b2da      	uxtb	r2, r3
1004215a:	4b52      	ldr	r3, [pc, #328]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004215c:	701a      	strb	r2, [r3, #0]
						break;
1004215e:	e04b      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
					case 3:
						if(Stimeselect == 0){
10042160:	4b50      	ldr	r3, [pc, #320]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042162:	781b      	ldrb	r3, [r3, #0]
10042164:	2b00      	cmp	r3, #0
10042166:	d103      	bne.n	10042170 <ButtonsMenuSM_Event_Handler+0x584>
							Stimeselect = 0b10111011;//23:45
10042168:	4b4e      	ldr	r3, [pc, #312]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004216a:	22bb      	movs	r2, #187	@ 0xbb
1004216c:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect--;
							Stimeselect &= 0b11111011;
						}
						break;
1004216e:	e043      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
							Stimeselect--;
10042170:	4b4c      	ldr	r3, [pc, #304]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042172:	781b      	ldrb	r3, [r3, #0]
10042174:	3b01      	subs	r3, #1
10042176:	b2da      	uxtb	r2, r3
10042178:	4b4a      	ldr	r3, [pc, #296]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004217a:	701a      	strb	r2, [r3, #0]
							Stimeselect &= 0b11111011;
1004217c:	4b49      	ldr	r3, [pc, #292]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004217e:	781b      	ldrb	r3, [r3, #0]
10042180:	2204      	movs	r2, #4
10042182:	4393      	bics	r3, r2
10042184:	b2da      	uxtb	r2, r3
10042186:	4b47      	ldr	r3, [pc, #284]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
10042188:	701a      	strb	r2, [r3, #0]
						break;
1004218a:	e035      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
					case 4:
						if((Etimeselect&0b11111000) == 0){
1004218c:	4b46      	ldr	r3, [pc, #280]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004218e:	781b      	ldrb	r3, [r3, #0]
10042190:	001a      	movs	r2, r3
10042192:	23f8      	movs	r3, #248	@ 0xf8
10042194:	4013      	ands	r3, r2
10042196:	d10d      	bne.n	100421b4 <ButtonsMenuSM_Event_Handler+0x5c8>
							Etimeselect = 0b10111000 | (Etimeselect&0b11);//23:XX
10042198:	4b43      	ldr	r3, [pc, #268]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004219a:	781b      	ldrb	r3, [r3, #0]
1004219c:	b25b      	sxtb	r3, r3
1004219e:	2203      	movs	r2, #3
100421a0:	4013      	ands	r3, r2
100421a2:	b25b      	sxtb	r3, r3
100421a4:	2248      	movs	r2, #72	@ 0x48
100421a6:	4252      	negs	r2, r2
100421a8:	4313      	orrs	r3, r2
100421aa:	b25b      	sxtb	r3, r3
100421ac:	b2da      	uxtb	r2, r3
100421ae:	4b3e      	ldr	r3, [pc, #248]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421b0:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect -= 0b00001000;
						}break;
100421b2:	e021      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
							Etimeselect -= 0b00001000;
100421b4:	4b3c      	ldr	r3, [pc, #240]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421b6:	781b      	ldrb	r3, [r3, #0]
100421b8:	3b08      	subs	r3, #8
100421ba:	b2da      	uxtb	r2, r3
100421bc:	4b3a      	ldr	r3, [pc, #232]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421be:	701a      	strb	r2, [r3, #0]
						}break;
100421c0:	e01a      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
					case 5:
						if(Etimeselect == 0){
100421c2:	4b39      	ldr	r3, [pc, #228]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421c4:	781b      	ldrb	r3, [r3, #0]
100421c6:	2b00      	cmp	r3, #0
100421c8:	d103      	bne.n	100421d2 <ButtonsMenuSM_Event_Handler+0x5e6>
							Etimeselect = 0b10111011;//23:45
100421ca:	4b37      	ldr	r3, [pc, #220]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421cc:	22bb      	movs	r2, #187	@ 0xbb
100421ce:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect--;
							Etimeselect &= 0b11111011;
						}
						break;
100421d0:	e012      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
							Etimeselect--;
100421d2:	4b35      	ldr	r3, [pc, #212]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421d4:	781b      	ldrb	r3, [r3, #0]
100421d6:	3b01      	subs	r3, #1
100421d8:	b2da      	uxtb	r2, r3
100421da:	4b33      	ldr	r3, [pc, #204]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421dc:	701a      	strb	r2, [r3, #0]
							Etimeselect &= 0b11111011;
100421de:	4b32      	ldr	r3, [pc, #200]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421e0:	781b      	ldrb	r3, [r3, #0]
100421e2:	2204      	movs	r2, #4
100421e4:	4393      	bics	r3, r2
100421e6:	b2da      	uxtb	r2, r3
100421e8:	4b2f      	ldr	r3, [pc, #188]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
100421ea:	701a      	strb	r2, [r3, #0]
						break;
100421ec:	e004      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
					default:
						break;
100421ee:	46c0      	nop			@ (mov r8, r8)
100421f0:	e002      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
						break;
100421f2:	46c0      	nop			@ (mov r8, r8)
100421f4:	e000      	b.n	100421f8 <ButtonsMenuSM_Event_Handler+0x60c>
						break;
100421f6:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
100421f8:	4b25      	ldr	r3, [pc, #148]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
100421fa:	7818      	ldrb	r0, [r3, #0]
100421fc:	4b27      	ldr	r3, [pc, #156]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
100421fe:	7819      	ldrb	r1, [r3, #0]
10042200:	4b27      	ldr	r3, [pc, #156]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042202:	781b      	ldrb	r3, [r3, #0]
10042204:	3301      	adds	r3, #1
10042206:	b2da      	uxtb	r2, r3
10042208:	4b26      	ldr	r3, [pc, #152]	@ (100422a4 <ButtonsMenuSM_Event_Handler+0x6b8>)
1004220a:	781c      	ldrb	r4, [r3, #0]
1004220c:	4b26      	ldr	r3, [pc, #152]	@ (100422a8 <ButtonsMenuSM_Event_Handler+0x6bc>)
1004220e:	781b      	ldrb	r3, [r3, #0]
10042210:	9300      	str	r3, [sp, #0]
10042212:	0023      	movs	r3, r4
10042214:	f7ff fb22 	bl	1004185c <DrawSchedule>
10042218:	e122      	b.n	10042460 <ButtonsMenuSM_Event_Handler+0x874>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
1004221a:	1d3b      	adds	r3, r7, #4
1004221c:	885b      	ldrh	r3, [r3, #2]
1004221e:	001a      	movs	r2, r3
10042220:	2380      	movs	r3, #128	@ 0x80
10042222:	011b      	lsls	r3, r3, #4
10042224:	4013      	ands	r3, r2
10042226:	d100      	bne.n	1004222a <ButtonsMenuSM_Event_Handler+0x63e>
10042228:	e0bc      	b.n	100423a4 <ButtonsMenuSM_Event_Handler+0x7b8>
1004222a:	1d3b      	adds	r3, r7, #4
1004222c:	885b      	ldrh	r3, [r3, #2]
1004222e:	001a      	movs	r2, r3
10042230:	2308      	movs	r3, #8
10042232:	4013      	ands	r3, r2
10042234:	d000      	beq.n	10042238 <ButtonsMenuSM_Event_Handler+0x64c>
10042236:	e0b5      	b.n	100423a4 <ButtonsMenuSM_Event_Handler+0x7b8>
					switch(cursorpos){
10042238:	4b15      	ldr	r3, [pc, #84]	@ (10042290 <ButtonsMenuSM_Event_Handler+0x6a4>)
1004223a:	781b      	ldrb	r3, [r3, #0]
1004223c:	2b05      	cmp	r3, #5
1004223e:	d900      	bls.n	10042242 <ButtonsMenuSM_Event_Handler+0x656>
10042240:	e09a      	b.n	10042378 <ButtonsMenuSM_Event_Handler+0x78c>
10042242:	009a      	lsls	r2, r3, #2
10042244:	4b1a      	ldr	r3, [pc, #104]	@ (100422b0 <ButtonsMenuSM_Event_Handler+0x6c4>)
10042246:	18d3      	adds	r3, r2, r3
10042248:	681b      	ldr	r3, [r3, #0]
1004224a:	469f      	mov	pc, r3
					case 0:
						monthselect++;
1004224c:	4b13      	ldr	r3, [pc, #76]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
1004224e:	781b      	ldrb	r3, [r3, #0]
10042250:	3301      	adds	r3, #1
10042252:	b2da      	uxtb	r2, r3
10042254:	4b11      	ldr	r3, [pc, #68]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
10042256:	701a      	strb	r2, [r3, #0]
						monthselect %= 13;
10042258:	4b10      	ldr	r3, [pc, #64]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
1004225a:	781b      	ldrb	r3, [r3, #0]
1004225c:	210d      	movs	r1, #13
1004225e:	0018      	movs	r0, r3
10042260:	f7fe f874 	bl	1004034c <__aeabi_uidivmod>
10042264:	000b      	movs	r3, r1
10042266:	b2da      	uxtb	r2, r3
10042268:	4b0c      	ldr	r3, [pc, #48]	@ (1004229c <ButtonsMenuSM_Event_Handler+0x6b0>)
1004226a:	701a      	strb	r2, [r3, #0]
						break;
1004226c:	e089      	b.n	10042382 <ButtonsMenuSM_Event_Handler+0x796>
					case 1:
						dayselect++;
1004226e:	4b0c      	ldr	r3, [pc, #48]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042270:	781b      	ldrb	r3, [r3, #0]
10042272:	3301      	adds	r3, #1
10042274:	b2da      	uxtb	r2, r3
10042276:	4b0a      	ldr	r3, [pc, #40]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
10042278:	701a      	strb	r2, [r3, #0]
						dayselect%=31;
1004227a:	4b09      	ldr	r3, [pc, #36]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
1004227c:	781b      	ldrb	r3, [r3, #0]
1004227e:	211f      	movs	r1, #31
10042280:	0018      	movs	r0, r3
10042282:	f7fe f863 	bl	1004034c <__aeabi_uidivmod>
10042286:	000b      	movs	r3, r1
10042288:	b2da      	uxtb	r2, r3
1004228a:	4b05      	ldr	r3, [pc, #20]	@ (100422a0 <ButtonsMenuSM_Event_Handler+0x6b4>)
1004228c:	701a      	strb	r2, [r3, #0]
						break;
1004228e:	e078      	b.n	10042382 <ButtonsMenuSM_Event_Handler+0x796>
10042290:	2000039e 	.word	0x2000039e
10042294:	2000039f 	.word	0x2000039f
10042298:	200003a0 	.word	0x200003a0
1004229c:	200003a1 	.word	0x200003a1
100422a0:	200003a2 	.word	0x200003a2
100422a4:	200003a3 	.word	0x200003a3
100422a8:	200003a4 	.word	0x200003a4
100422ac:	10069324 	.word	0x10069324
100422b0:	1006933c 	.word	0x1006933c
					case 2:
						if((Stimeselect&0b11111000) == 0b10111000){
100422b4:	4bcf      	ldr	r3, [pc, #828]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422b6:	781b      	ldrb	r3, [r3, #0]
100422b8:	001a      	movs	r2, r3
100422ba:	23f8      	movs	r3, #248	@ 0xf8
100422bc:	4013      	ands	r3, r2
100422be:	2bb8      	cmp	r3, #184	@ 0xb8
100422c0:	d107      	bne.n	100422d2 <ButtonsMenuSM_Event_Handler+0x6e6>
							Stimeselect &= 0b00000011;
100422c2:	4bcc      	ldr	r3, [pc, #816]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422c4:	781b      	ldrb	r3, [r3, #0]
100422c6:	2203      	movs	r2, #3
100422c8:	4013      	ands	r3, r2
100422ca:	b2da      	uxtb	r2, r3
100422cc:	4bc9      	ldr	r3, [pc, #804]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422ce:	701a      	strb	r2, [r3, #0]
						} else {
							Stimeselect += 0b00001000;
						}
						break;
100422d0:	e057      	b.n	10042382 <ButtonsMenuSM_Event_Handler+0x796>
							Stimeselect += 0b00001000;
100422d2:	4bc8      	ldr	r3, [pc, #800]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422d4:	781b      	ldrb	r3, [r3, #0]
100422d6:	3308      	adds	r3, #8
100422d8:	b2da      	uxtb	r2, r3
100422da:	4bc6      	ldr	r3, [pc, #792]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422dc:	701a      	strb	r2, [r3, #0]
						break;
100422de:	e050      	b.n	10042382 <ButtonsMenuSM_Event_Handler+0x796>
					case 3:
						if(Stimeselect == 0b10111011){//23:45
100422e0:	4bc4      	ldr	r3, [pc, #784]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422e2:	781b      	ldrb	r3, [r3, #0]
100422e4:	2bbb      	cmp	r3, #187	@ 0xbb
100422e6:	d103      	bne.n	100422f0 <ButtonsMenuSM_Event_Handler+0x704>
							Stimeselect = 0;//0:00
100422e8:	4bc2      	ldr	r3, [pc, #776]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422ea:	2200      	movs	r2, #0
100422ec:	701a      	strb	r2, [r3, #0]
							Stimeselect++;
							if(Stimeselect & 0b00000100){
								Stimeselect += 0b00000100;
							}
						}
						break;
100422ee:	e045      	b.n	1004237c <ButtonsMenuSM_Event_Handler+0x790>
							Stimeselect++;
100422f0:	4bc0      	ldr	r3, [pc, #768]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422f2:	781b      	ldrb	r3, [r3, #0]
100422f4:	3301      	adds	r3, #1
100422f6:	b2da      	uxtb	r2, r3
100422f8:	4bbe      	ldr	r3, [pc, #760]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422fa:	701a      	strb	r2, [r3, #0]
							if(Stimeselect & 0b00000100){
100422fc:	4bbd      	ldr	r3, [pc, #756]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100422fe:	781b      	ldrb	r3, [r3, #0]
10042300:	001a      	movs	r2, r3
10042302:	2304      	movs	r3, #4
10042304:	4013      	ands	r3, r2
10042306:	d039      	beq.n	1004237c <ButtonsMenuSM_Event_Handler+0x790>
								Stimeselect += 0b00000100;
10042308:	4bba      	ldr	r3, [pc, #744]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
1004230a:	781b      	ldrb	r3, [r3, #0]
1004230c:	3304      	adds	r3, #4
1004230e:	b2da      	uxtb	r2, r3
10042310:	4bb8      	ldr	r3, [pc, #736]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
10042312:	701a      	strb	r2, [r3, #0]
						break;
10042314:	e032      	b.n	1004237c <ButtonsMenuSM_Event_Handler+0x790>
					case 4:
						if((Etimeselect&0b11111000) == 0b10111000){
10042316:	4bb8      	ldr	r3, [pc, #736]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042318:	781b      	ldrb	r3, [r3, #0]
1004231a:	001a      	movs	r2, r3
1004231c:	23f8      	movs	r3, #248	@ 0xf8
1004231e:	4013      	ands	r3, r2
10042320:	2bb8      	cmp	r3, #184	@ 0xb8
10042322:	d107      	bne.n	10042334 <ButtonsMenuSM_Event_Handler+0x748>
							Etimeselect &= 0b00000011;
10042324:	4bb4      	ldr	r3, [pc, #720]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042326:	781b      	ldrb	r3, [r3, #0]
10042328:	2203      	movs	r2, #3
1004232a:	4013      	ands	r3, r2
1004232c:	b2da      	uxtb	r2, r3
1004232e:	4bb2      	ldr	r3, [pc, #712]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042330:	701a      	strb	r2, [r3, #0]
						} else {
							Etimeselect += 0b00001000;
						}
						break;
10042332:	e026      	b.n	10042382 <ButtonsMenuSM_Event_Handler+0x796>
							Etimeselect += 0b00001000;
10042334:	4bb0      	ldr	r3, [pc, #704]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042336:	781b      	ldrb	r3, [r3, #0]
10042338:	3308      	adds	r3, #8
1004233a:	b2da      	uxtb	r2, r3
1004233c:	4bae      	ldr	r3, [pc, #696]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
1004233e:	701a      	strb	r2, [r3, #0]
						break;
10042340:	e01f      	b.n	10042382 <ButtonsMenuSM_Event_Handler+0x796>
					case 5:
						if(Etimeselect == 0b10111011){//23:45
10042342:	4bad      	ldr	r3, [pc, #692]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042344:	781b      	ldrb	r3, [r3, #0]
10042346:	2bbb      	cmp	r3, #187	@ 0xbb
10042348:	d103      	bne.n	10042352 <ButtonsMenuSM_Event_Handler+0x766>
							Etimeselect = 0;//0:00
1004234a:	4bab      	ldr	r3, [pc, #684]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
1004234c:	2200      	movs	r2, #0
1004234e:	701a      	strb	r2, [r3, #0]
							Etimeselect++;
							if(Etimeselect & 0b00000100){
								Etimeselect += 0b00000100;
							}
						}
						break;
10042350:	e016      	b.n	10042380 <ButtonsMenuSM_Event_Handler+0x794>
							Etimeselect++;
10042352:	4ba9      	ldr	r3, [pc, #676]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042354:	781b      	ldrb	r3, [r3, #0]
10042356:	3301      	adds	r3, #1
10042358:	b2da      	uxtb	r2, r3
1004235a:	4ba7      	ldr	r3, [pc, #668]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
1004235c:	701a      	strb	r2, [r3, #0]
							if(Etimeselect & 0b00000100){
1004235e:	4ba6      	ldr	r3, [pc, #664]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042360:	781b      	ldrb	r3, [r3, #0]
10042362:	001a      	movs	r2, r3
10042364:	2304      	movs	r3, #4
10042366:	4013      	ands	r3, r2
10042368:	d00a      	beq.n	10042380 <ButtonsMenuSM_Event_Handler+0x794>
								Etimeselect += 0b00000100;
1004236a:	4ba3      	ldr	r3, [pc, #652]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
1004236c:	781b      	ldrb	r3, [r3, #0]
1004236e:	3304      	adds	r3, #4
10042370:	b2da      	uxtb	r2, r3
10042372:	4ba1      	ldr	r3, [pc, #644]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042374:	701a      	strb	r2, [r3, #0]
						break;
10042376:	e003      	b.n	10042380 <ButtonsMenuSM_Event_Handler+0x794>
					default:
						break;
10042378:	46c0      	nop			@ (mov r8, r8)
1004237a:	e002      	b.n	10042382 <ButtonsMenuSM_Event_Handler+0x796>
						break;
1004237c:	46c0      	nop			@ (mov r8, r8)
1004237e:	e000      	b.n	10042382 <ButtonsMenuSM_Event_Handler+0x796>
						break;
10042380:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
10042382:	4b9e      	ldr	r3, [pc, #632]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
10042384:	7818      	ldrb	r0, [r3, #0]
10042386:	4b9e      	ldr	r3, [pc, #632]	@ (10042600 <ButtonsMenuSM_Event_Handler+0xa14>)
10042388:	7819      	ldrb	r1, [r3, #0]
1004238a:	4b9e      	ldr	r3, [pc, #632]	@ (10042604 <ButtonsMenuSM_Event_Handler+0xa18>)
1004238c:	781b      	ldrb	r3, [r3, #0]
1004238e:	3301      	adds	r3, #1
10042390:	b2da      	uxtb	r2, r3
10042392:	4b98      	ldr	r3, [pc, #608]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
10042394:	781c      	ldrb	r4, [r3, #0]
10042396:	4b98      	ldr	r3, [pc, #608]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042398:	781b      	ldrb	r3, [r3, #0]
1004239a:	9300      	str	r3, [sp, #0]
1004239c:	0023      	movs	r3, r4
1004239e:	f7ff fa5d 	bl	1004185c <DrawSchedule>
100423a2:	e05d      	b.n	10042460 <ButtonsMenuSM_Event_Handler+0x874>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
100423a4:	1d3b      	adds	r3, r7, #4
100423a6:	885b      	ldrh	r3, [r3, #2]
100423a8:	001a      	movs	r2, r3
100423aa:	2380      	movs	r3, #128	@ 0x80
100423ac:	015b      	lsls	r3, r3, #5
100423ae:	4013      	ands	r3, r2
100423b0:	d023      	beq.n	100423fa <ButtonsMenuSM_Event_Handler+0x80e>
100423b2:	1d3b      	adds	r3, r7, #4
100423b4:	885b      	ldrh	r3, [r3, #2]
100423b6:	001a      	movs	r2, r3
100423b8:	2310      	movs	r3, #16
100423ba:	4013      	ands	r3, r2
100423bc:	d11d      	bne.n	100423fa <ButtonsMenuSM_Event_Handler+0x80e>
					cursorpos--;
100423be:	4b8f      	ldr	r3, [pc, #572]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
100423c0:	781b      	ldrb	r3, [r3, #0]
100423c2:	3b01      	subs	r3, #1
100423c4:	b2da      	uxtb	r2, r3
100423c6:	4b8d      	ldr	r3, [pc, #564]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
100423c8:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
100423ca:	4b8c      	ldr	r3, [pc, #560]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
100423cc:	781b      	ldrb	r3, [r3, #0]
100423ce:	2bff      	cmp	r3, #255	@ 0xff
100423d0:	d102      	bne.n	100423d8 <ButtonsMenuSM_Event_Handler+0x7ec>
						cursorpos = 5;
100423d2:	4b8a      	ldr	r3, [pc, #552]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
100423d4:	2205      	movs	r2, #5
100423d6:	701a      	strb	r2, [r3, #0]
					}
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
100423d8:	4b88      	ldr	r3, [pc, #544]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
100423da:	7818      	ldrb	r0, [r3, #0]
100423dc:	4b88      	ldr	r3, [pc, #544]	@ (10042600 <ButtonsMenuSM_Event_Handler+0xa14>)
100423de:	7819      	ldrb	r1, [r3, #0]
100423e0:	4b88      	ldr	r3, [pc, #544]	@ (10042604 <ButtonsMenuSM_Event_Handler+0xa18>)
100423e2:	781b      	ldrb	r3, [r3, #0]
100423e4:	3301      	adds	r3, #1
100423e6:	b2da      	uxtb	r2, r3
100423e8:	4b82      	ldr	r3, [pc, #520]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100423ea:	781c      	ldrb	r4, [r3, #0]
100423ec:	4b82      	ldr	r3, [pc, #520]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
100423ee:	781b      	ldrb	r3, [r3, #0]
100423f0:	9300      	str	r3, [sp, #0]
100423f2:	0023      	movs	r3, r4
100423f4:	f7ff fa32 	bl	1004185c <DrawSchedule>
100423f8:	e032      	b.n	10042460 <ButtonsMenuSM_Event_Handler+0x874>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
100423fa:	1d3b      	adds	r3, r7, #4
100423fc:	885b      	ldrh	r3, [r3, #2]
100423fe:	001a      	movs	r2, r3
10042400:	2380      	movs	r3, #128	@ 0x80
10042402:	019b      	lsls	r3, r3, #6
10042404:	4013      	ands	r3, r2
10042406:	d101      	bne.n	1004240c <ButtonsMenuSM_Event_Handler+0x820>
10042408:	f000 fd76 	bl	10042ef8 <ButtonsMenuSM_Event_Handler+0x130c>
1004240c:	1d3b      	adds	r3, r7, #4
1004240e:	885b      	ldrh	r3, [r3, #2]
10042410:	001a      	movs	r2, r3
10042412:	2320      	movs	r3, #32
10042414:	4013      	ands	r3, r2
10042416:	d001      	beq.n	1004241c <ButtonsMenuSM_Event_Handler+0x830>
10042418:	f000 fd6e 	bl	10042ef8 <ButtonsMenuSM_Event_Handler+0x130c>
					cursorpos++;
1004241c:	4b77      	ldr	r3, [pc, #476]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
1004241e:	781b      	ldrb	r3, [r3, #0]
10042420:	3301      	adds	r3, #1
10042422:	b2da      	uxtb	r2, r3
10042424:	4b75      	ldr	r3, [pc, #468]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
10042426:	701a      	strb	r2, [r3, #0]
					cursorpos %= 6;
10042428:	4b74      	ldr	r3, [pc, #464]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
1004242a:	781b      	ldrb	r3, [r3, #0]
1004242c:	2106      	movs	r1, #6
1004242e:	0018      	movs	r0, r3
10042430:	f7fd ff8c 	bl	1004034c <__aeabi_uidivmod>
10042434:	000b      	movs	r3, r1
10042436:	b2da      	uxtb	r2, r3
10042438:	4b70      	ldr	r3, [pc, #448]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
1004243a:	701a      	strb	r2, [r3, #0]
					DrawSchedule(cursorpos, monthselect, dayselect+1, Stimeselect, Etimeselect);
1004243c:	4b6f      	ldr	r3, [pc, #444]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
1004243e:	7818      	ldrb	r0, [r3, #0]
10042440:	4b6f      	ldr	r3, [pc, #444]	@ (10042600 <ButtonsMenuSM_Event_Handler+0xa14>)
10042442:	7819      	ldrb	r1, [r3, #0]
10042444:	4b6f      	ldr	r3, [pc, #444]	@ (10042604 <ButtonsMenuSM_Event_Handler+0xa18>)
10042446:	781b      	ldrb	r3, [r3, #0]
10042448:	3301      	adds	r3, #1
1004244a:	b2da      	uxtb	r2, r3
1004244c:	4b69      	ldr	r3, [pc, #420]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
1004244e:	781c      	ldrb	r4, [r3, #0]
10042450:	4b69      	ldr	r3, [pc, #420]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
10042452:	781b      	ldrb	r3, [r3, #0]
10042454:	9300      	str	r3, [sp, #0]
10042456:	0023      	movs	r3, r4
10042458:	f7ff fa00 	bl	1004185c <DrawSchedule>
				}
			}
			break;
1004245c:	f000 fd4c 	bl	10042ef8 <ButtonsMenuSM_Event_Handler+0x130c>
10042460:	f000 fd4a 	bl	10042ef8 <ButtonsMenuSM_Event_Handler+0x130c>
		case scheduleFolder:
			if(event.status == EVENT_ENTRY){
10042464:	1d3b      	adds	r3, r7, #4
10042466:	781b      	ldrb	r3, [r3, #0]
10042468:	b25b      	sxtb	r3, r3
1004246a:	2b02      	cmp	r3, #2
1004246c:	d10b      	bne.n	10042486 <ButtonsMenuSM_Event_Handler+0x89a>
				cursorpos = 0;
1004246e:	4b63      	ldr	r3, [pc, #396]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
10042470:	2200      	movs	r2, #0
10042472:	701a      	strb	r2, [r3, #0]
				DrawFolder(cursorpos, folderselect, trackselect);
10042474:	4b61      	ldr	r3, [pc, #388]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
10042476:	7818      	ldrb	r0, [r3, #0]
10042478:	4b63      	ldr	r3, [pc, #396]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
1004247a:	7819      	ldrb	r1, [r3, #0]
1004247c:	4b63      	ldr	r3, [pc, #396]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
1004247e:	781b      	ldrb	r3, [r3, #0]
10042480:	001a      	movs	r2, r3
10042482:	f7ff f89f 	bl	100415c4 <DrawFolder>
			}
			if(event.status == EVENT_BUTTONS){
10042486:	1d3b      	adds	r3, r7, #4
10042488:	781b      	ldrb	r3, [r3, #0]
1004248a:	b25b      	sxtb	r3, r3
1004248c:	2b04      	cmp	r3, #4
1004248e:	d001      	beq.n	10042494 <ButtonsMenuSM_Event_Handler+0x8a8>
10042490:	f000 fd34 	bl	10042efc <ButtonsMenuSM_Event_Handler+0x1310>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042494:	1d3b      	adds	r3, r7, #4
10042496:	885b      	ldrh	r3, [r3, #2]
10042498:	001a      	movs	r2, r3
1004249a:	2380      	movs	r3, #128	@ 0x80
1004249c:	005b      	lsls	r3, r3, #1
1004249e:	4013      	ands	r3, r2
100424a0:	d00e      	beq.n	100424c0 <ButtonsMenuSM_Event_Handler+0x8d4>
100424a2:	1d3b      	adds	r3, r7, #4
100424a4:	885b      	ldrh	r3, [r3, #2]
100424a6:	001a      	movs	r2, r3
100424a8:	2301      	movs	r3, #1
100424aa:	4013      	ands	r3, r2
100424ac:	d108      	bne.n	100424c0 <ButtonsMenuSM_Event_Handler+0x8d4>
					//discountprintf("moving to schedule stop");
					nextstate = scheduleTime;
100424ae:	2326      	movs	r3, #38	@ 0x26
100424b0:	18fb      	adds	r3, r7, r3
100424b2:	2202      	movs	r2, #2
100424b4:	701a      	strb	r2, [r3, #0]
					transition = 1;
100424b6:	2327      	movs	r3, #39	@ 0x27
100424b8:	18fb      	adds	r3, r7, r3
100424ba:	2201      	movs	r2, #1
100424bc:	701a      	strb	r2, [r3, #0]
100424be:	e0ea      	b.n	10042696 <ButtonsMenuSM_Event_Handler+0xaaa>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
100424c0:	1d3b      	adds	r3, r7, #4
100424c2:	885b      	ldrh	r3, [r3, #2]
100424c4:	001a      	movs	r2, r3
100424c6:	2380      	movs	r3, #128	@ 0x80
100424c8:	009b      	lsls	r3, r3, #2
100424ca:	4013      	ands	r3, r2
100424cc:	d032      	beq.n	10042534 <ButtonsMenuSM_Event_Handler+0x948>
100424ce:	1d3b      	adds	r3, r7, #4
100424d0:	885b      	ldrh	r3, [r3, #2]
100424d2:	001a      	movs	r2, r3
100424d4:	2302      	movs	r3, #2
100424d6:	4013      	ands	r3, r2
100424d8:	d12c      	bne.n	10042534 <ButtonsMenuSM_Event_Handler+0x948>
					//discountprintf("moving to main");
					scheduleEvent sevent;
					sevent.month = monthselect;
100424da:	4b49      	ldr	r3, [pc, #292]	@ (10042600 <ButtonsMenuSM_Event_Handler+0xa14>)
100424dc:	781a      	ldrb	r2, [r3, #0]
100424de:	2114      	movs	r1, #20
100424e0:	187b      	adds	r3, r7, r1
100424e2:	701a      	strb	r2, [r3, #0]
					sevent.day = dayselect+1;
100424e4:	4b47      	ldr	r3, [pc, #284]	@ (10042604 <ButtonsMenuSM_Event_Handler+0xa18>)
100424e6:	781b      	ldrb	r3, [r3, #0]
100424e8:	3301      	adds	r3, #1
100424ea:	b2da      	uxtb	r2, r3
100424ec:	187b      	adds	r3, r7, r1
100424ee:	705a      	strb	r2, [r3, #1]
					sevent.start = Stimeselect;
100424f0:	4b40      	ldr	r3, [pc, #256]	@ (100425f4 <ButtonsMenuSM_Event_Handler+0xa08>)
100424f2:	781a      	ldrb	r2, [r3, #0]
100424f4:	187b      	adds	r3, r7, r1
100424f6:	709a      	strb	r2, [r3, #2]
					sevent.stop = Etimeselect;
100424f8:	4b3f      	ldr	r3, [pc, #252]	@ (100425f8 <ButtonsMenuSM_Event_Handler+0xa0c>)
100424fa:	781a      	ldrb	r2, [r3, #0]
100424fc:	187b      	adds	r3, r7, r1
100424fe:	70da      	strb	r2, [r3, #3]
					sevent.track = trackselect+1;
10042500:	4b42      	ldr	r3, [pc, #264]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
10042502:	781b      	ldrb	r3, [r3, #0]
10042504:	3301      	adds	r3, #1
10042506:	b2da      	uxtb	r2, r3
10042508:	187b      	adds	r3, r7, r1
1004250a:	715a      	strb	r2, [r3, #5]
					sevent.folder = folderselect+1;
1004250c:	4b3e      	ldr	r3, [pc, #248]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
1004250e:	781b      	ldrb	r3, [r3, #0]
10042510:	3301      	adds	r3, #1
10042512:	b2da      	uxtb	r2, r3
10042514:	187b      	adds	r3, r7, r1
10042516:	711a      	strb	r2, [r3, #4]
					FLASH_AppendSchedule(sevent);
10042518:	187b      	adds	r3, r7, r1
1004251a:	6818      	ldr	r0, [r3, #0]
1004251c:	6859      	ldr	r1, [r3, #4]
1004251e:	f001 fc01 	bl	10043d24 <FLASH_AppendSchedule>
					nextstate = main;
10042522:	2326      	movs	r3, #38	@ 0x26
10042524:	18fb      	adds	r3, r7, r3
10042526:	2200      	movs	r2, #0
10042528:	701a      	strb	r2, [r3, #0]
					transition = 1;
1004252a:	2327      	movs	r3, #39	@ 0x27
1004252c:	18fb      	adds	r3, r7, r3
1004252e:	2201      	movs	r2, #1
10042530:	701a      	strb	r2, [r3, #0]
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042532:	e0b0      	b.n	10042696 <ButtonsMenuSM_Event_Handler+0xaaa>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042534:	1d3b      	adds	r3, r7, #4
10042536:	885b      	ldrh	r3, [r3, #2]
10042538:	001a      	movs	r2, r3
1004253a:	2380      	movs	r3, #128	@ 0x80
1004253c:	00db      	lsls	r3, r3, #3
1004253e:	4013      	ands	r3, r2
10042540:	d028      	beq.n	10042594 <ButtonsMenuSM_Event_Handler+0x9a8>
10042542:	1d3b      	adds	r3, r7, #4
10042544:	885b      	ldrh	r3, [r3, #2]
10042546:	001a      	movs	r2, r3
10042548:	2304      	movs	r3, #4
1004254a:	4013      	ands	r3, r2
1004254c:	d122      	bne.n	10042594 <ButtonsMenuSM_Event_Handler+0x9a8>
					if(!cursorpos){
1004254e:	4b2b      	ldr	r3, [pc, #172]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
10042550:	781b      	ldrb	r3, [r3, #0]
10042552:	2b00      	cmp	r3, #0
10042554:	d10a      	bne.n	1004256c <ButtonsMenuSM_Event_Handler+0x980>
						folderselect--;
10042556:	4b2c      	ldr	r3, [pc, #176]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042558:	781b      	ldrb	r3, [r3, #0]
1004255a:	3b01      	subs	r3, #1
1004255c:	b2da      	uxtb	r2, r3
1004255e:	4b2a      	ldr	r3, [pc, #168]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042560:	701a      	strb	r2, [r3, #0]
						folderselect %= 256;
10042562:	4b29      	ldr	r3, [pc, #164]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042564:	781a      	ldrb	r2, [r3, #0]
10042566:	4b28      	ldr	r3, [pc, #160]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042568:	701a      	strb	r2, [r3, #0]
1004256a:	e009      	b.n	10042580 <ButtonsMenuSM_Event_Handler+0x994>
					} else {
						trackselect--;
1004256c:	4b27      	ldr	r3, [pc, #156]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
1004256e:	781b      	ldrb	r3, [r3, #0]
10042570:	3b01      	subs	r3, #1
10042572:	b2da      	uxtb	r2, r3
10042574:	4b25      	ldr	r3, [pc, #148]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
10042576:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
10042578:	4b24      	ldr	r3, [pc, #144]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
1004257a:	781a      	ldrb	r2, [r3, #0]
1004257c:	4b23      	ldr	r3, [pc, #140]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
1004257e:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
10042580:	4b1e      	ldr	r3, [pc, #120]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
10042582:	7818      	ldrb	r0, [r3, #0]
10042584:	4b20      	ldr	r3, [pc, #128]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
10042586:	7819      	ldrb	r1, [r3, #0]
10042588:	4b20      	ldr	r3, [pc, #128]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
1004258a:	781b      	ldrb	r3, [r3, #0]
1004258c:	001a      	movs	r2, r3
1004258e:	f7ff f819 	bl	100415c4 <DrawFolder>
10042592:	e080      	b.n	10042696 <ButtonsMenuSM_Event_Handler+0xaaa>

				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042594:	1d3b      	adds	r3, r7, #4
10042596:	885b      	ldrh	r3, [r3, #2]
10042598:	001a      	movs	r2, r3
1004259a:	2380      	movs	r3, #128	@ 0x80
1004259c:	011b      	lsls	r3, r3, #4
1004259e:	4013      	ands	r3, r2
100425a0:	d036      	beq.n	10042610 <ButtonsMenuSM_Event_Handler+0xa24>
100425a2:	1d3b      	adds	r3, r7, #4
100425a4:	885b      	ldrh	r3, [r3, #2]
100425a6:	001a      	movs	r2, r3
100425a8:	2308      	movs	r3, #8
100425aa:	4013      	ands	r3, r2
100425ac:	d130      	bne.n	10042610 <ButtonsMenuSM_Event_Handler+0xa24>
					if(!cursorpos){
100425ae:	4b13      	ldr	r3, [pc, #76]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
100425b0:	781b      	ldrb	r3, [r3, #0]
100425b2:	2b00      	cmp	r3, #0
100425b4:	d10a      	bne.n	100425cc <ButtonsMenuSM_Event_Handler+0x9e0>
						folderselect++;
100425b6:	4b14      	ldr	r3, [pc, #80]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
100425b8:	781b      	ldrb	r3, [r3, #0]
100425ba:	3301      	adds	r3, #1
100425bc:	b2da      	uxtb	r2, r3
100425be:	4b12      	ldr	r3, [pc, #72]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
100425c0:	701a      	strb	r2, [r3, #0]
						folderselect %= 256;
100425c2:	4b11      	ldr	r3, [pc, #68]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
100425c4:	781a      	ldrb	r2, [r3, #0]
100425c6:	4b10      	ldr	r3, [pc, #64]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
100425c8:	701a      	strb	r2, [r3, #0]
100425ca:	e009      	b.n	100425e0 <ButtonsMenuSM_Event_Handler+0x9f4>
					} else {
						trackselect++;
100425cc:	4b0f      	ldr	r3, [pc, #60]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
100425ce:	781b      	ldrb	r3, [r3, #0]
100425d0:	3301      	adds	r3, #1
100425d2:	b2da      	uxtb	r2, r3
100425d4:	4b0d      	ldr	r3, [pc, #52]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
100425d6:	701a      	strb	r2, [r3, #0]
						trackselect %= 256;
100425d8:	4b0c      	ldr	r3, [pc, #48]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
100425da:	781a      	ldrb	r2, [r3, #0]
100425dc:	4b0b      	ldr	r3, [pc, #44]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
100425de:	701a      	strb	r2, [r3, #0]
					}
					DrawFolder(cursorpos, folderselect, trackselect);
100425e0:	4b06      	ldr	r3, [pc, #24]	@ (100425fc <ButtonsMenuSM_Event_Handler+0xa10>)
100425e2:	7818      	ldrb	r0, [r3, #0]
100425e4:	4b08      	ldr	r3, [pc, #32]	@ (10042608 <ButtonsMenuSM_Event_Handler+0xa1c>)
100425e6:	7819      	ldrb	r1, [r3, #0]
100425e8:	4b08      	ldr	r3, [pc, #32]	@ (1004260c <ButtonsMenuSM_Event_Handler+0xa20>)
100425ea:	781b      	ldrb	r3, [r3, #0]
100425ec:	001a      	movs	r2, r3
100425ee:	f7fe ffe9 	bl	100415c4 <DrawFolder>
100425f2:	e050      	b.n	10042696 <ButtonsMenuSM_Event_Handler+0xaaa>
100425f4:	200003a3 	.word	0x200003a3
100425f8:	200003a4 	.word	0x200003a4
100425fc:	2000039e 	.word	0x2000039e
10042600:	200003a1 	.word	0x200003a1
10042604:	200003a2 	.word	0x200003a2
10042608:	2000039f 	.word	0x2000039f
1004260c:	200003a0 	.word	0x200003a0
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042610:	1d3b      	adds	r3, r7, #4
10042612:	885b      	ldrh	r3, [r3, #2]
10042614:	001a      	movs	r2, r3
10042616:	2380      	movs	r3, #128	@ 0x80
10042618:	015b      	lsls	r3, r3, #5
1004261a:	4013      	ands	r3, r2
1004261c:	d017      	beq.n	1004264e <ButtonsMenuSM_Event_Handler+0xa62>
1004261e:	1d3b      	adds	r3, r7, #4
10042620:	885b      	ldrh	r3, [r3, #2]
10042622:	001a      	movs	r2, r3
10042624:	2310      	movs	r3, #16
10042626:	4013      	ands	r3, r2
10042628:	d111      	bne.n	1004264e <ButtonsMenuSM_Event_Handler+0xa62>
					cursorpos = !cursorpos;
1004262a:	4bdc      	ldr	r3, [pc, #880]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
1004262c:	781b      	ldrb	r3, [r3, #0]
1004262e:	425a      	negs	r2, r3
10042630:	4153      	adcs	r3, r2
10042632:	b2db      	uxtb	r3, r3
10042634:	001a      	movs	r2, r3
10042636:	4bd9      	ldr	r3, [pc, #868]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
10042638:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
1004263a:	4bd8      	ldr	r3, [pc, #864]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
1004263c:	7818      	ldrb	r0, [r3, #0]
1004263e:	4bd8      	ldr	r3, [pc, #864]	@ (100429a0 <ButtonsMenuSM_Event_Handler+0xdb4>)
10042640:	7819      	ldrb	r1, [r3, #0]
10042642:	4bd8      	ldr	r3, [pc, #864]	@ (100429a4 <ButtonsMenuSM_Event_Handler+0xdb8>)
10042644:	781b      	ldrb	r3, [r3, #0]
10042646:	001a      	movs	r2, r3
10042648:	f7fe ffbc 	bl	100415c4 <DrawFolder>
1004264c:	e023      	b.n	10042696 <ButtonsMenuSM_Event_Handler+0xaaa>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
1004264e:	1d3b      	adds	r3, r7, #4
10042650:	885b      	ldrh	r3, [r3, #2]
10042652:	001a      	movs	r2, r3
10042654:	2380      	movs	r3, #128	@ 0x80
10042656:	019b      	lsls	r3, r3, #6
10042658:	4013      	ands	r3, r2
1004265a:	d101      	bne.n	10042660 <ButtonsMenuSM_Event_Handler+0xa74>
1004265c:	f000 fc4e 	bl	10042efc <ButtonsMenuSM_Event_Handler+0x1310>
10042660:	1d3b      	adds	r3, r7, #4
10042662:	885b      	ldrh	r3, [r3, #2]
10042664:	001a      	movs	r2, r3
10042666:	2320      	movs	r3, #32
10042668:	4013      	ands	r3, r2
1004266a:	d001      	beq.n	10042670 <ButtonsMenuSM_Event_Handler+0xa84>
1004266c:	f000 fc46 	bl	10042efc <ButtonsMenuSM_Event_Handler+0x1310>
					cursorpos = !cursorpos;
10042670:	4bca      	ldr	r3, [pc, #808]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
10042672:	781b      	ldrb	r3, [r3, #0]
10042674:	425a      	negs	r2, r3
10042676:	4153      	adcs	r3, r2
10042678:	b2db      	uxtb	r3, r3
1004267a:	001a      	movs	r2, r3
1004267c:	4bc7      	ldr	r3, [pc, #796]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
1004267e:	701a      	strb	r2, [r3, #0]
					DrawFolder(cursorpos, folderselect, trackselect);
10042680:	4bc6      	ldr	r3, [pc, #792]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
10042682:	7818      	ldrb	r0, [r3, #0]
10042684:	4bc6      	ldr	r3, [pc, #792]	@ (100429a0 <ButtonsMenuSM_Event_Handler+0xdb4>)
10042686:	7819      	ldrb	r1, [r3, #0]
10042688:	4bc6      	ldr	r3, [pc, #792]	@ (100429a4 <ButtonsMenuSM_Event_Handler+0xdb8>)
1004268a:	781b      	ldrb	r3, [r3, #0]
1004268c:	001a      	movs	r2, r3
1004268e:	f7fe ff99 	bl	100415c4 <DrawFolder>
				}
			}
			break;
10042692:	f000 fc33 	bl	10042efc <ButtonsMenuSM_Event_Handler+0x1310>
10042696:	f000 fc31 	bl	10042efc <ButtonsMenuSM_Event_Handler+0x1310>
		case setTime:
			static int8_t minute;
			static int8_t hour;
			static int8_t day;
			static int8_t month;
			if(event.status == EVENT_ENTRY){
1004269a:	1d3b      	adds	r3, r7, #4
1004269c:	781b      	ldrb	r3, [r3, #0]
1004269e:	b25b      	sxtb	r3, r3
100426a0:	2b02      	cmp	r3, #2
100426a2:	d128      	bne.n	100426f6 <ButtonsMenuSM_Event_Handler+0xb0a>
				cursorpos = 0;
100426a4:	4bbd      	ldr	r3, [pc, #756]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
100426a6:	2200      	movs	r2, #0
100426a8:	701a      	strb	r2, [r3, #0]
				minute = 0;
100426aa:	4bbf      	ldr	r3, [pc, #764]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
100426ac:	2200      	movs	r2, #0
100426ae:	701a      	strb	r2, [r3, #0]
				hour = 0;
100426b0:	4bbe      	ldr	r3, [pc, #760]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
100426b2:	2200      	movs	r2, #0
100426b4:	701a      	strb	r2, [r3, #0]
				day = 0;
100426b6:	4bbe      	ldr	r3, [pc, #760]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
100426b8:	2200      	movs	r2, #0
100426ba:	701a      	strb	r2, [r3, #0]
				month = 0;
100426bc:	4bbd      	ldr	r3, [pc, #756]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
100426be:	2200      	movs	r2, #0
100426c0:	701a      	strb	r2, [r3, #0]
				DrawSetTime(cursorpos, month+1, day+1, hour, minute);
100426c2:	4bb6      	ldr	r3, [pc, #728]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
100426c4:	7818      	ldrb	r0, [r3, #0]
100426c6:	4bbb      	ldr	r3, [pc, #748]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
100426c8:	781b      	ldrb	r3, [r3, #0]
100426ca:	b25b      	sxtb	r3, r3
100426cc:	b2db      	uxtb	r3, r3
100426ce:	3301      	adds	r3, #1
100426d0:	b2d9      	uxtb	r1, r3
100426d2:	4bb7      	ldr	r3, [pc, #732]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
100426d4:	781b      	ldrb	r3, [r3, #0]
100426d6:	b25b      	sxtb	r3, r3
100426d8:	b2db      	uxtb	r3, r3
100426da:	3301      	adds	r3, #1
100426dc:	b2da      	uxtb	r2, r3
100426de:	4bb3      	ldr	r3, [pc, #716]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
100426e0:	781b      	ldrb	r3, [r3, #0]
100426e2:	b25b      	sxtb	r3, r3
100426e4:	b2dc      	uxtb	r4, r3
100426e6:	4bb0      	ldr	r3, [pc, #704]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
100426e8:	781b      	ldrb	r3, [r3, #0]
100426ea:	b25b      	sxtb	r3, r3
100426ec:	b2db      	uxtb	r3, r3
100426ee:	9300      	str	r3, [sp, #0]
100426f0:	0023      	movs	r3, r4
100426f2:	f7ff f80f 	bl	10041714 <DrawSetTime>
			}
			if(event.status == EVENT_BUTTONS){
100426f6:	1d3b      	adds	r3, r7, #4
100426f8:	781b      	ldrb	r3, [r3, #0]
100426fa:	b25b      	sxtb	r3, r3
100426fc:	2b04      	cmp	r3, #4
100426fe:	d001      	beq.n	10042704 <ButtonsMenuSM_Event_Handler+0xb18>
10042700:	f000 fbfe 	bl	10042f00 <ButtonsMenuSM_Event_Handler+0x1314>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042704:	1d3b      	adds	r3, r7, #4
10042706:	885b      	ldrh	r3, [r3, #2]
10042708:	001a      	movs	r2, r3
1004270a:	2380      	movs	r3, #128	@ 0x80
1004270c:	005b      	lsls	r3, r3, #1
1004270e:	4013      	ands	r3, r2
10042710:	d00e      	beq.n	10042730 <ButtonsMenuSM_Event_Handler+0xb44>
10042712:	1d3b      	adds	r3, r7, #4
10042714:	885b      	ldrh	r3, [r3, #2]
10042716:	001a      	movs	r2, r3
10042718:	2301      	movs	r3, #1
1004271a:	4013      	ands	r3, r2
1004271c:	d108      	bne.n	10042730 <ButtonsMenuSM_Event_Handler+0xb44>
					//discountprintf("moving to main, back");
					nextstate = main;
1004271e:	2326      	movs	r3, #38	@ 0x26
10042720:	18fb      	adds	r3, r7, r3
10042722:	2200      	movs	r2, #0
10042724:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042726:	2327      	movs	r3, #39	@ 0x27
10042728:	18fb      	adds	r3, r7, r3
1004272a:	2201      	movs	r2, #1
1004272c:	701a      	strb	r2, [r3, #0]
1004272e:	e253      	b.n	10042bd8 <ButtonsMenuSM_Event_Handler+0xfec>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042730:	1d3b      	adds	r3, r7, #4
10042732:	885b      	ldrh	r3, [r3, #2]
10042734:	001a      	movs	r2, r3
10042736:	2380      	movs	r3, #128	@ 0x80
10042738:	009b      	lsls	r3, r3, #2
1004273a:	4013      	ands	r3, r2
1004273c:	d100      	bne.n	10042740 <ButtonsMenuSM_Event_Handler+0xb54>
1004273e:	e094      	b.n	1004286a <ButtonsMenuSM_Event_Handler+0xc7e>
10042740:	1d3b      	adds	r3, r7, #4
10042742:	885b      	ldrh	r3, [r3, #2]
10042744:	001a      	movs	r2, r3
10042746:	2302      	movs	r3, #2
10042748:	4013      	ands	r3, r2
1004274a:	d000      	beq.n	1004274e <ButtonsMenuSM_Event_Handler+0xb62>
1004274c:	e08d      	b.n	1004286a <ButtonsMenuSM_Event_Handler+0xc7e>
					//discountprintf("moving to main, select");
					month++;
1004274e:	4b99      	ldr	r3, [pc, #612]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
10042750:	781b      	ldrb	r3, [r3, #0]
10042752:	b25b      	sxtb	r3, r3
10042754:	b2db      	uxtb	r3, r3
10042756:	3301      	adds	r3, #1
10042758:	b2db      	uxtb	r3, r3
1004275a:	b25a      	sxtb	r2, r3
1004275c:	4b95      	ldr	r3, [pc, #596]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
1004275e:	701a      	strb	r2, [r3, #0]
					I2C_Transmit(RTCADDRESS, RTCSECADDR, 0);
10042760:	2200      	movs	r2, #0
10042762:	2100      	movs	r1, #0
10042764:	206f      	movs	r0, #111	@ 0x6f
10042766:	f001 fe93 	bl	10044490 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMINADDR, ((minute/10)<<4)|minute%10);
1004276a:	4b8f      	ldr	r3, [pc, #572]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
1004276c:	781b      	ldrb	r3, [r3, #0]
1004276e:	b25b      	sxtb	r3, r3
10042770:	210a      	movs	r1, #10
10042772:	0018      	movs	r0, r3
10042774:	f7fd fdee 	bl	10040354 <__divsi3>
10042778:	0003      	movs	r3, r0
1004277a:	b25b      	sxtb	r3, r3
1004277c:	011b      	lsls	r3, r3, #4
1004277e:	b25c      	sxtb	r4, r3
10042780:	4b89      	ldr	r3, [pc, #548]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
10042782:	781b      	ldrb	r3, [r3, #0]
10042784:	b25b      	sxtb	r3, r3
10042786:	210a      	movs	r1, #10
10042788:	0018      	movs	r0, r3
1004278a:	f7fd fec9 	bl	10040520 <__aeabi_idivmod>
1004278e:	000b      	movs	r3, r1
10042790:	b25b      	sxtb	r3, r3
10042792:	4323      	orrs	r3, r4
10042794:	b25b      	sxtb	r3, r3
10042796:	b2db      	uxtb	r3, r3
10042798:	001a      	movs	r2, r3
1004279a:	2101      	movs	r1, #1
1004279c:	206f      	movs	r0, #111	@ 0x6f
1004279e:	f001 fe77 	bl	10044490 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCHOURADDR, 0b01000000|((hour/10)<<4)|hour%10);
100427a2:	4b82      	ldr	r3, [pc, #520]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
100427a4:	781b      	ldrb	r3, [r3, #0]
100427a6:	b25b      	sxtb	r3, r3
100427a8:	210a      	movs	r1, #10
100427aa:	0018      	movs	r0, r3
100427ac:	f7fd fdd2 	bl	10040354 <__divsi3>
100427b0:	0003      	movs	r3, r0
100427b2:	b25b      	sxtb	r3, r3
100427b4:	011b      	lsls	r3, r3, #4
100427b6:	b25b      	sxtb	r3, r3
100427b8:	2240      	movs	r2, #64	@ 0x40
100427ba:	4313      	orrs	r3, r2
100427bc:	b25c      	sxtb	r4, r3
100427be:	4b7b      	ldr	r3, [pc, #492]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
100427c0:	781b      	ldrb	r3, [r3, #0]
100427c2:	b25b      	sxtb	r3, r3
100427c4:	210a      	movs	r1, #10
100427c6:	0018      	movs	r0, r3
100427c8:	f7fd feaa 	bl	10040520 <__aeabi_idivmod>
100427cc:	000b      	movs	r3, r1
100427ce:	b25b      	sxtb	r3, r3
100427d0:	4323      	orrs	r3, r4
100427d2:	b25b      	sxtb	r3, r3
100427d4:	b2db      	uxtb	r3, r3
100427d6:	001a      	movs	r2, r3
100427d8:	2102      	movs	r1, #2
100427da:	206f      	movs	r0, #111	@ 0x6f
100427dc:	f001 fe58 	bl	10044490 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCDAYADDR, (((day+1)/10)<<4)|(day+1)%10);
100427e0:	4b73      	ldr	r3, [pc, #460]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
100427e2:	781b      	ldrb	r3, [r3, #0]
100427e4:	b25b      	sxtb	r3, r3
100427e6:	3301      	adds	r3, #1
100427e8:	210a      	movs	r1, #10
100427ea:	0018      	movs	r0, r3
100427ec:	f7fd fdb2 	bl	10040354 <__divsi3>
100427f0:	0003      	movs	r3, r0
100427f2:	b25b      	sxtb	r3, r3
100427f4:	011b      	lsls	r3, r3, #4
100427f6:	b25c      	sxtb	r4, r3
100427f8:	4b6d      	ldr	r3, [pc, #436]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
100427fa:	781b      	ldrb	r3, [r3, #0]
100427fc:	b25b      	sxtb	r3, r3
100427fe:	3301      	adds	r3, #1
10042800:	210a      	movs	r1, #10
10042802:	0018      	movs	r0, r3
10042804:	f7fd fe8c 	bl	10040520 <__aeabi_idivmod>
10042808:	000b      	movs	r3, r1
1004280a:	b25b      	sxtb	r3, r3
1004280c:	4323      	orrs	r3, r4
1004280e:	b25b      	sxtb	r3, r3
10042810:	b2db      	uxtb	r3, r3
10042812:	001a      	movs	r2, r3
10042814:	2103      	movs	r1, #3
10042816:	206f      	movs	r0, #111	@ 0x6f
10042818:	f001 fe3a 	bl	10044490 <I2C_Transmit>
					I2C_Transmit(RTCADDRESS, RTCMNTHADDR, (((month+1)/10)<<4)|(month+1)%10);
1004281c:	4b65      	ldr	r3, [pc, #404]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
1004281e:	781b      	ldrb	r3, [r3, #0]
10042820:	b25b      	sxtb	r3, r3
10042822:	3301      	adds	r3, #1
10042824:	210a      	movs	r1, #10
10042826:	0018      	movs	r0, r3
10042828:	f7fd fd94 	bl	10040354 <__divsi3>
1004282c:	0003      	movs	r3, r0
1004282e:	b25b      	sxtb	r3, r3
10042830:	011b      	lsls	r3, r3, #4
10042832:	b25c      	sxtb	r4, r3
10042834:	4b5f      	ldr	r3, [pc, #380]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
10042836:	781b      	ldrb	r3, [r3, #0]
10042838:	b25b      	sxtb	r3, r3
1004283a:	3301      	adds	r3, #1
1004283c:	210a      	movs	r1, #10
1004283e:	0018      	movs	r0, r3
10042840:	f7fd fe6e 	bl	10040520 <__aeabi_idivmod>
10042844:	000b      	movs	r3, r1
10042846:	b25b      	sxtb	r3, r3
10042848:	4323      	orrs	r3, r4
1004284a:	b25b      	sxtb	r3, r3
1004284c:	b2db      	uxtb	r3, r3
1004284e:	001a      	movs	r2, r3
10042850:	2104      	movs	r1, #4
10042852:	206f      	movs	r0, #111	@ 0x6f
10042854:	f001 fe1c 	bl	10044490 <I2C_Transmit>
					nextstate = main;
10042858:	2326      	movs	r3, #38	@ 0x26
1004285a:	18fb      	adds	r3, r7, r3
1004285c:	2200      	movs	r2, #0
1004285e:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042860:	2327      	movs	r3, #39	@ 0x27
10042862:	18fb      	adds	r3, r7, r3
10042864:	2201      	movs	r2, #1
10042866:	701a      	strb	r2, [r3, #0]
10042868:	e1b6      	b.n	10042bd8 <ButtonsMenuSM_Event_Handler+0xfec>

				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
1004286a:	1d3b      	adds	r3, r7, #4
1004286c:	885b      	ldrh	r3, [r3, #2]
1004286e:	001a      	movs	r2, r3
10042870:	2380      	movs	r3, #128	@ 0x80
10042872:	00db      	lsls	r3, r3, #3
10042874:	4013      	ands	r3, r2
10042876:	d100      	bne.n	1004287a <ButtonsMenuSM_Event_Handler+0xc8e>
10042878:	e09e      	b.n	100429b8 <ButtonsMenuSM_Event_Handler+0xdcc>
1004287a:	1d3b      	adds	r3, r7, #4
1004287c:	885b      	ldrh	r3, [r3, #2]
1004287e:	001a      	movs	r2, r3
10042880:	2304      	movs	r3, #4
10042882:	4013      	ands	r3, r2
10042884:	d000      	beq.n	10042888 <ButtonsMenuSM_Event_Handler+0xc9c>
10042886:	e097      	b.n	100429b8 <ButtonsMenuSM_Event_Handler+0xdcc>
					switch(cursorpos){
10042888:	4b44      	ldr	r3, [pc, #272]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
1004288a:	781b      	ldrb	r3, [r3, #0]
1004288c:	2b03      	cmp	r3, #3
1004288e:	d03f      	beq.n	10042910 <ButtonsMenuSM_Event_Handler+0xd24>
10042890:	dd00      	ble.n	10042894 <ButtonsMenuSM_Event_Handler+0xca8>
10042892:	e067      	b.n	10042964 <ButtonsMenuSM_Event_Handler+0xd78>
10042894:	2b02      	cmp	r3, #2
10042896:	d029      	beq.n	100428ec <ButtonsMenuSM_Event_Handler+0xd00>
10042898:	dc64      	bgt.n	10042964 <ButtonsMenuSM_Event_Handler+0xd78>
1004289a:	2b00      	cmp	r3, #0
1004289c:	d002      	beq.n	100428a4 <ButtonsMenuSM_Event_Handler+0xcb8>
1004289e:	2b01      	cmp	r3, #1
100428a0:	d012      	beq.n	100428c8 <ButtonsMenuSM_Event_Handler+0xcdc>
100428a2:	e05f      	b.n	10042964 <ButtonsMenuSM_Event_Handler+0xd78>
					case 0:
						month--;
100428a4:	4b43      	ldr	r3, [pc, #268]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
100428a6:	781b      	ldrb	r3, [r3, #0]
100428a8:	b25b      	sxtb	r3, r3
100428aa:	b2db      	uxtb	r3, r3
100428ac:	3b01      	subs	r3, #1
100428ae:	b2db      	uxtb	r3, r3
100428b0:	b25a      	sxtb	r2, r3
100428b2:	4b40      	ldr	r3, [pc, #256]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
100428b4:	701a      	strb	r2, [r3, #0]
						if(month < 0){
100428b6:	4b3f      	ldr	r3, [pc, #252]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
100428b8:	781b      	ldrb	r3, [r3, #0]
100428ba:	b25b      	sxtb	r3, r3
100428bc:	2b00      	cmp	r3, #0
100428be:	da4a      	bge.n	10042956 <ButtonsMenuSM_Event_Handler+0xd6a>
							month = 11;
100428c0:	4b3c      	ldr	r3, [pc, #240]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
100428c2:	220b      	movs	r2, #11
100428c4:	701a      	strb	r2, [r3, #0]
						}
						break;
100428c6:	e046      	b.n	10042956 <ButtonsMenuSM_Event_Handler+0xd6a>
					case 1:
						day--;
100428c8:	4b39      	ldr	r3, [pc, #228]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
100428ca:	781b      	ldrb	r3, [r3, #0]
100428cc:	b25b      	sxtb	r3, r3
100428ce:	b2db      	uxtb	r3, r3
100428d0:	3b01      	subs	r3, #1
100428d2:	b2db      	uxtb	r3, r3
100428d4:	b25a      	sxtb	r2, r3
100428d6:	4b36      	ldr	r3, [pc, #216]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
100428d8:	701a      	strb	r2, [r3, #0]
						if(day < 0){
100428da:	4b35      	ldr	r3, [pc, #212]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
100428dc:	781b      	ldrb	r3, [r3, #0]
100428de:	b25b      	sxtb	r3, r3
100428e0:	2b00      	cmp	r3, #0
100428e2:	da3a      	bge.n	1004295a <ButtonsMenuSM_Event_Handler+0xd6e>
							day = 30;
100428e4:	4b32      	ldr	r3, [pc, #200]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
100428e6:	221e      	movs	r2, #30
100428e8:	701a      	strb	r2, [r3, #0]
						}
						break;
100428ea:	e036      	b.n	1004295a <ButtonsMenuSM_Event_Handler+0xd6e>
					case 2:
						hour--;
100428ec:	4b2f      	ldr	r3, [pc, #188]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
100428ee:	781b      	ldrb	r3, [r3, #0]
100428f0:	b25b      	sxtb	r3, r3
100428f2:	b2db      	uxtb	r3, r3
100428f4:	3b01      	subs	r3, #1
100428f6:	b2db      	uxtb	r3, r3
100428f8:	b25a      	sxtb	r2, r3
100428fa:	4b2c      	ldr	r3, [pc, #176]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
100428fc:	701a      	strb	r2, [r3, #0]
						if(hour < 0){
100428fe:	4b2b      	ldr	r3, [pc, #172]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
10042900:	781b      	ldrb	r3, [r3, #0]
10042902:	b25b      	sxtb	r3, r3
10042904:	2b00      	cmp	r3, #0
10042906:	da2a      	bge.n	1004295e <ButtonsMenuSM_Event_Handler+0xd72>
							hour = 23;
10042908:	4b28      	ldr	r3, [pc, #160]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
1004290a:	2217      	movs	r2, #23
1004290c:	701a      	strb	r2, [r3, #0]
						}
						break;
1004290e:	e026      	b.n	1004295e <ButtonsMenuSM_Event_Handler+0xd72>
					case 3:
						minute--;
10042910:	4b25      	ldr	r3, [pc, #148]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
10042912:	781b      	ldrb	r3, [r3, #0]
10042914:	b25b      	sxtb	r3, r3
10042916:	b2db      	uxtb	r3, r3
10042918:	3b01      	subs	r3, #1
1004291a:	b2db      	uxtb	r3, r3
1004291c:	b25a      	sxtb	r2, r3
1004291e:	4b22      	ldr	r3, [pc, #136]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
10042920:	701a      	strb	r2, [r3, #0]
						if(minute < 0){
10042922:	4b21      	ldr	r3, [pc, #132]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
10042924:	781b      	ldrb	r3, [r3, #0]
10042926:	b25b      	sxtb	r3, r3
10042928:	2b00      	cmp	r3, #0
1004292a:	da1a      	bge.n	10042962 <ButtonsMenuSM_Event_Handler+0xd76>
							minute = 59;
1004292c:	4b1e      	ldr	r3, [pc, #120]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
1004292e:	223b      	movs	r2, #59	@ 0x3b
10042930:	701a      	strb	r2, [r3, #0]
							hour--;
10042932:	4b1e      	ldr	r3, [pc, #120]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
10042934:	781b      	ldrb	r3, [r3, #0]
10042936:	b25b      	sxtb	r3, r3
10042938:	b2db      	uxtb	r3, r3
1004293a:	3b01      	subs	r3, #1
1004293c:	b2db      	uxtb	r3, r3
1004293e:	b25a      	sxtb	r2, r3
10042940:	4b1a      	ldr	r3, [pc, #104]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
10042942:	701a      	strb	r2, [r3, #0]
							if(hour < 0){
10042944:	4b19      	ldr	r3, [pc, #100]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
10042946:	781b      	ldrb	r3, [r3, #0]
10042948:	b25b      	sxtb	r3, r3
1004294a:	2b00      	cmp	r3, #0
1004294c:	da09      	bge.n	10042962 <ButtonsMenuSM_Event_Handler+0xd76>
								hour = 23;
1004294e:	4b17      	ldr	r3, [pc, #92]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
10042950:	2217      	movs	r2, #23
10042952:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
10042954:	e005      	b.n	10042962 <ButtonsMenuSM_Event_Handler+0xd76>
						break;
10042956:	46c0      	nop			@ (mov r8, r8)
10042958:	e004      	b.n	10042964 <ButtonsMenuSM_Event_Handler+0xd78>
						break;
1004295a:	46c0      	nop			@ (mov r8, r8)
1004295c:	e002      	b.n	10042964 <ButtonsMenuSM_Event_Handler+0xd78>
						break;
1004295e:	46c0      	nop			@ (mov r8, r8)
10042960:	e000      	b.n	10042964 <ButtonsMenuSM_Event_Handler+0xd78>
						break;
10042962:	46c0      	nop			@ (mov r8, r8)
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10042964:	4b0d      	ldr	r3, [pc, #52]	@ (1004299c <ButtonsMenuSM_Event_Handler+0xdb0>)
10042966:	7818      	ldrb	r0, [r3, #0]
10042968:	4b12      	ldr	r3, [pc, #72]	@ (100429b4 <ButtonsMenuSM_Event_Handler+0xdc8>)
1004296a:	781b      	ldrb	r3, [r3, #0]
1004296c:	b25b      	sxtb	r3, r3
1004296e:	b2db      	uxtb	r3, r3
10042970:	3301      	adds	r3, #1
10042972:	b2d9      	uxtb	r1, r3
10042974:	4b0e      	ldr	r3, [pc, #56]	@ (100429b0 <ButtonsMenuSM_Event_Handler+0xdc4>)
10042976:	781b      	ldrb	r3, [r3, #0]
10042978:	b25b      	sxtb	r3, r3
1004297a:	b2db      	uxtb	r3, r3
1004297c:	3301      	adds	r3, #1
1004297e:	b2da      	uxtb	r2, r3
10042980:	4b0a      	ldr	r3, [pc, #40]	@ (100429ac <ButtonsMenuSM_Event_Handler+0xdc0>)
10042982:	781b      	ldrb	r3, [r3, #0]
10042984:	b25b      	sxtb	r3, r3
10042986:	b2dc      	uxtb	r4, r3
10042988:	4b07      	ldr	r3, [pc, #28]	@ (100429a8 <ButtonsMenuSM_Event_Handler+0xdbc>)
1004298a:	781b      	ldrb	r3, [r3, #0]
1004298c:	b25b      	sxtb	r3, r3
1004298e:	b2db      	uxtb	r3, r3
10042990:	9300      	str	r3, [sp, #0]
10042992:	0023      	movs	r3, r4
10042994:	f7fe febe 	bl	10041714 <DrawSetTime>
					break;
10042998:	e2b5      	b.n	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
1004299a:	46c0      	nop			@ (mov r8, r8)
1004299c:	2000039e 	.word	0x2000039e
100429a0:	2000039f 	.word	0x2000039f
100429a4:	200003a0 	.word	0x200003a0
100429a8:	200003b1 	.word	0x200003b1
100429ac:	200003b2 	.word	0x200003b2
100429b0:	200003b3 	.word	0x200003b3
100429b4:	200003b4 	.word	0x200003b4
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
100429b8:	1d3b      	adds	r3, r7, #4
100429ba:	885b      	ldrh	r3, [r3, #2]
100429bc:	001a      	movs	r2, r3
100429be:	2380      	movs	r3, #128	@ 0x80
100429c0:	011b      	lsls	r3, r3, #4
100429c2:	4013      	ands	r3, r2
100429c4:	d100      	bne.n	100429c8 <ButtonsMenuSM_Event_Handler+0xddc>
100429c6:	e09b      	b.n	10042b00 <ButtonsMenuSM_Event_Handler+0xf14>
100429c8:	1d3b      	adds	r3, r7, #4
100429ca:	885b      	ldrh	r3, [r3, #2]
100429cc:	001a      	movs	r2, r3
100429ce:	2308      	movs	r3, #8
100429d0:	4013      	ands	r3, r2
100429d2:	d000      	beq.n	100429d6 <ButtonsMenuSM_Event_Handler+0xdea>
100429d4:	e094      	b.n	10042b00 <ButtonsMenuSM_Event_Handler+0xf14>
					switch(cursorpos){
100429d6:	4bcb      	ldr	r3, [pc, #812]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
100429d8:	781b      	ldrb	r3, [r3, #0]
100429da:	2b03      	cmp	r3, #3
100429dc:	d048      	beq.n	10042a70 <ButtonsMenuSM_Event_Handler+0xe84>
100429de:	dd00      	ble.n	100429e2 <ButtonsMenuSM_Event_Handler+0xdf6>
100429e0:	e073      	b.n	10042aca <ButtonsMenuSM_Event_Handler+0xede>
100429e2:	2b02      	cmp	r3, #2
100429e4:	d02f      	beq.n	10042a46 <ButtonsMenuSM_Event_Handler+0xe5a>
100429e6:	dc70      	bgt.n	10042aca <ButtonsMenuSM_Event_Handler+0xede>
100429e8:	2b00      	cmp	r3, #0
100429ea:	d002      	beq.n	100429f2 <ButtonsMenuSM_Event_Handler+0xe06>
100429ec:	2b01      	cmp	r3, #1
100429ee:	d015      	beq.n	10042a1c <ButtonsMenuSM_Event_Handler+0xe30>
100429f0:	e06b      	b.n	10042aca <ButtonsMenuSM_Event_Handler+0xede>
					case 0:
						month++;
100429f2:	4bc5      	ldr	r3, [pc, #788]	@ (10042d08 <ButtonsMenuSM_Event_Handler+0x111c>)
100429f4:	781b      	ldrb	r3, [r3, #0]
100429f6:	b25b      	sxtb	r3, r3
100429f8:	b2db      	uxtb	r3, r3
100429fa:	3301      	adds	r3, #1
100429fc:	b2db      	uxtb	r3, r3
100429fe:	b25a      	sxtb	r2, r3
10042a00:	4bc1      	ldr	r3, [pc, #772]	@ (10042d08 <ButtonsMenuSM_Event_Handler+0x111c>)
10042a02:	701a      	strb	r2, [r3, #0]
						month %= 12;
10042a04:	4bc0      	ldr	r3, [pc, #768]	@ (10042d08 <ButtonsMenuSM_Event_Handler+0x111c>)
10042a06:	781b      	ldrb	r3, [r3, #0]
10042a08:	b25b      	sxtb	r3, r3
10042a0a:	210c      	movs	r1, #12
10042a0c:	0018      	movs	r0, r3
10042a0e:	f7fd fd87 	bl	10040520 <__aeabi_idivmod>
10042a12:	000b      	movs	r3, r1
10042a14:	b25a      	sxtb	r2, r3
10042a16:	4bbc      	ldr	r3, [pc, #752]	@ (10042d08 <ButtonsMenuSM_Event_Handler+0x111c>)
10042a18:	701a      	strb	r2, [r3, #0]
						break;
10042a1a:	e056      	b.n	10042aca <ButtonsMenuSM_Event_Handler+0xede>
					case 1:
						day++;
10042a1c:	4bbb      	ldr	r3, [pc, #748]	@ (10042d0c <ButtonsMenuSM_Event_Handler+0x1120>)
10042a1e:	781b      	ldrb	r3, [r3, #0]
10042a20:	b25b      	sxtb	r3, r3
10042a22:	b2db      	uxtb	r3, r3
10042a24:	3301      	adds	r3, #1
10042a26:	b2db      	uxtb	r3, r3
10042a28:	b25a      	sxtb	r2, r3
10042a2a:	4bb8      	ldr	r3, [pc, #736]	@ (10042d0c <ButtonsMenuSM_Event_Handler+0x1120>)
10042a2c:	701a      	strb	r2, [r3, #0]
						day%= 31;
10042a2e:	4bb7      	ldr	r3, [pc, #732]	@ (10042d0c <ButtonsMenuSM_Event_Handler+0x1120>)
10042a30:	781b      	ldrb	r3, [r3, #0]
10042a32:	b25b      	sxtb	r3, r3
10042a34:	211f      	movs	r1, #31
10042a36:	0018      	movs	r0, r3
10042a38:	f7fd fd72 	bl	10040520 <__aeabi_idivmod>
10042a3c:	000b      	movs	r3, r1
10042a3e:	b25a      	sxtb	r2, r3
10042a40:	4bb2      	ldr	r3, [pc, #712]	@ (10042d0c <ButtonsMenuSM_Event_Handler+0x1120>)
10042a42:	701a      	strb	r2, [r3, #0]
						break;
10042a44:	e041      	b.n	10042aca <ButtonsMenuSM_Event_Handler+0xede>
					case 2:
						hour++;
10042a46:	4bb2      	ldr	r3, [pc, #712]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042a48:	781b      	ldrb	r3, [r3, #0]
10042a4a:	b25b      	sxtb	r3, r3
10042a4c:	b2db      	uxtb	r3, r3
10042a4e:	3301      	adds	r3, #1
10042a50:	b2db      	uxtb	r3, r3
10042a52:	b25a      	sxtb	r2, r3
10042a54:	4bae      	ldr	r3, [pc, #696]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042a56:	701a      	strb	r2, [r3, #0]
						hour %= 24;
10042a58:	4bad      	ldr	r3, [pc, #692]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042a5a:	781b      	ldrb	r3, [r3, #0]
10042a5c:	b25b      	sxtb	r3, r3
10042a5e:	2118      	movs	r1, #24
10042a60:	0018      	movs	r0, r3
10042a62:	f7fd fd5d 	bl	10040520 <__aeabi_idivmod>
10042a66:	000b      	movs	r3, r1
10042a68:	b25a      	sxtb	r2, r3
10042a6a:	4ba9      	ldr	r3, [pc, #676]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042a6c:	701a      	strb	r2, [r3, #0]
						break;
10042a6e:	e02c      	b.n	10042aca <ButtonsMenuSM_Event_Handler+0xede>
					case 3:
						minute++;
10042a70:	4ba8      	ldr	r3, [pc, #672]	@ (10042d14 <ButtonsMenuSM_Event_Handler+0x1128>)
10042a72:	781b      	ldrb	r3, [r3, #0]
10042a74:	b25b      	sxtb	r3, r3
10042a76:	b2db      	uxtb	r3, r3
10042a78:	3301      	adds	r3, #1
10042a7a:	b2db      	uxtb	r3, r3
10042a7c:	b25a      	sxtb	r2, r3
10042a7e:	4ba5      	ldr	r3, [pc, #660]	@ (10042d14 <ButtonsMenuSM_Event_Handler+0x1128>)
10042a80:	701a      	strb	r2, [r3, #0]
						minute%=60;
10042a82:	4ba4      	ldr	r3, [pc, #656]	@ (10042d14 <ButtonsMenuSM_Event_Handler+0x1128>)
10042a84:	781b      	ldrb	r3, [r3, #0]
10042a86:	b25b      	sxtb	r3, r3
10042a88:	213c      	movs	r1, #60	@ 0x3c
10042a8a:	0018      	movs	r0, r3
10042a8c:	f7fd fd48 	bl	10040520 <__aeabi_idivmod>
10042a90:	000b      	movs	r3, r1
10042a92:	b25a      	sxtb	r2, r3
10042a94:	4b9f      	ldr	r3, [pc, #636]	@ (10042d14 <ButtonsMenuSM_Event_Handler+0x1128>)
10042a96:	701a      	strb	r2, [r3, #0]
						if(minute == 0){
10042a98:	4b9e      	ldr	r3, [pc, #632]	@ (10042d14 <ButtonsMenuSM_Event_Handler+0x1128>)
10042a9a:	781b      	ldrb	r3, [r3, #0]
10042a9c:	b25b      	sxtb	r3, r3
10042a9e:	2b00      	cmp	r3, #0
10042aa0:	d113      	bne.n	10042aca <ButtonsMenuSM_Event_Handler+0xede>
							hour++;
10042aa2:	4b9b      	ldr	r3, [pc, #620]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042aa4:	781b      	ldrb	r3, [r3, #0]
10042aa6:	b25b      	sxtb	r3, r3
10042aa8:	b2db      	uxtb	r3, r3
10042aaa:	3301      	adds	r3, #1
10042aac:	b2db      	uxtb	r3, r3
10042aae:	b25a      	sxtb	r2, r3
10042ab0:	4b97      	ldr	r3, [pc, #604]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042ab2:	701a      	strb	r2, [r3, #0]
							hour %= 24;
10042ab4:	4b96      	ldr	r3, [pc, #600]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042ab6:	781b      	ldrb	r3, [r3, #0]
10042ab8:	b25b      	sxtb	r3, r3
10042aba:	2118      	movs	r1, #24
10042abc:	0018      	movs	r0, r3
10042abe:	f7fd fd2f 	bl	10040520 <__aeabi_idivmod>
10042ac2:	000b      	movs	r3, r1
10042ac4:	b25a      	sxtb	r2, r3
10042ac6:	4b92      	ldr	r3, [pc, #584]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042ac8:	701a      	strb	r2, [r3, #0]
						}
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10042aca:	4b8e      	ldr	r3, [pc, #568]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042acc:	7818      	ldrb	r0, [r3, #0]
10042ace:	4b8e      	ldr	r3, [pc, #568]	@ (10042d08 <ButtonsMenuSM_Event_Handler+0x111c>)
10042ad0:	781b      	ldrb	r3, [r3, #0]
10042ad2:	b25b      	sxtb	r3, r3
10042ad4:	b2db      	uxtb	r3, r3
10042ad6:	3301      	adds	r3, #1
10042ad8:	b2d9      	uxtb	r1, r3
10042ada:	4b8c      	ldr	r3, [pc, #560]	@ (10042d0c <ButtonsMenuSM_Event_Handler+0x1120>)
10042adc:	781b      	ldrb	r3, [r3, #0]
10042ade:	b25b      	sxtb	r3, r3
10042ae0:	b2db      	uxtb	r3, r3
10042ae2:	3301      	adds	r3, #1
10042ae4:	b2da      	uxtb	r2, r3
10042ae6:	4b8a      	ldr	r3, [pc, #552]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042ae8:	781b      	ldrb	r3, [r3, #0]
10042aea:	b25b      	sxtb	r3, r3
10042aec:	b2dc      	uxtb	r4, r3
10042aee:	4b89      	ldr	r3, [pc, #548]	@ (10042d14 <ButtonsMenuSM_Event_Handler+0x1128>)
10042af0:	781b      	ldrb	r3, [r3, #0]
10042af2:	b25b      	sxtb	r3, r3
10042af4:	b2db      	uxtb	r3, r3
10042af6:	9300      	str	r3, [sp, #0]
10042af8:	0023      	movs	r3, r4
10042afa:	f7fe fe0b 	bl	10041714 <DrawSetTime>
10042afe:	e06b      	b.n	10042bd8 <ButtonsMenuSM_Event_Handler+0xfec>
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042b00:	1d3b      	adds	r3, r7, #4
10042b02:	885b      	ldrh	r3, [r3, #2]
10042b04:	001a      	movs	r2, r3
10042b06:	2380      	movs	r3, #128	@ 0x80
10042b08:	015b      	lsls	r3, r3, #5
10042b0a:	4013      	ands	r3, r2
10042b0c:	d02d      	beq.n	10042b6a <ButtonsMenuSM_Event_Handler+0xf7e>
10042b0e:	1d3b      	adds	r3, r7, #4
10042b10:	885b      	ldrh	r3, [r3, #2]
10042b12:	001a      	movs	r2, r3
10042b14:	2310      	movs	r3, #16
10042b16:	4013      	ands	r3, r2
10042b18:	d127      	bne.n	10042b6a <ButtonsMenuSM_Event_Handler+0xf7e>
					cursorpos--;
10042b1a:	4b7a      	ldr	r3, [pc, #488]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042b1c:	781b      	ldrb	r3, [r3, #0]
10042b1e:	3b01      	subs	r3, #1
10042b20:	b2da      	uxtb	r2, r3
10042b22:	4b78      	ldr	r3, [pc, #480]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042b24:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10042b26:	4b77      	ldr	r3, [pc, #476]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042b28:	781b      	ldrb	r3, [r3, #0]
10042b2a:	2bff      	cmp	r3, #255	@ 0xff
10042b2c:	d102      	bne.n	10042b34 <ButtonsMenuSM_Event_Handler+0xf48>
						cursorpos = 3;
10042b2e:	4b75      	ldr	r3, [pc, #468]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042b30:	2203      	movs	r2, #3
10042b32:	701a      	strb	r2, [r3, #0]
					}
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10042b34:	4b73      	ldr	r3, [pc, #460]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042b36:	7818      	ldrb	r0, [r3, #0]
10042b38:	4b73      	ldr	r3, [pc, #460]	@ (10042d08 <ButtonsMenuSM_Event_Handler+0x111c>)
10042b3a:	781b      	ldrb	r3, [r3, #0]
10042b3c:	b25b      	sxtb	r3, r3
10042b3e:	b2db      	uxtb	r3, r3
10042b40:	3301      	adds	r3, #1
10042b42:	b2d9      	uxtb	r1, r3
10042b44:	4b71      	ldr	r3, [pc, #452]	@ (10042d0c <ButtonsMenuSM_Event_Handler+0x1120>)
10042b46:	781b      	ldrb	r3, [r3, #0]
10042b48:	b25b      	sxtb	r3, r3
10042b4a:	b2db      	uxtb	r3, r3
10042b4c:	3301      	adds	r3, #1
10042b4e:	b2da      	uxtb	r2, r3
10042b50:	4b6f      	ldr	r3, [pc, #444]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042b52:	781b      	ldrb	r3, [r3, #0]
10042b54:	b25b      	sxtb	r3, r3
10042b56:	b2dc      	uxtb	r4, r3
10042b58:	4b6e      	ldr	r3, [pc, #440]	@ (10042d14 <ButtonsMenuSM_Event_Handler+0x1128>)
10042b5a:	781b      	ldrb	r3, [r3, #0]
10042b5c:	b25b      	sxtb	r3, r3
10042b5e:	b2db      	uxtb	r3, r3
10042b60:	9300      	str	r3, [sp, #0]
10042b62:	0023      	movs	r3, r4
10042b64:	f7fe fdd6 	bl	10041714 <DrawSetTime>
10042b68:	e036      	b.n	10042bd8 <ButtonsMenuSM_Event_Handler+0xfec>
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10042b6a:	1d3b      	adds	r3, r7, #4
10042b6c:	885b      	ldrh	r3, [r3, #2]
10042b6e:	001a      	movs	r2, r3
10042b70:	2380      	movs	r3, #128	@ 0x80
10042b72:	019b      	lsls	r3, r3, #6
10042b74:	4013      	ands	r3, r2
10042b76:	d100      	bne.n	10042b7a <ButtonsMenuSM_Event_Handler+0xf8e>
10042b78:	e1c2      	b.n	10042f00 <ButtonsMenuSM_Event_Handler+0x1314>
10042b7a:	1d3b      	adds	r3, r7, #4
10042b7c:	885b      	ldrh	r3, [r3, #2]
10042b7e:	001a      	movs	r2, r3
10042b80:	2320      	movs	r3, #32
10042b82:	4013      	ands	r3, r2
10042b84:	d000      	beq.n	10042b88 <ButtonsMenuSM_Event_Handler+0xf9c>
10042b86:	e1bb      	b.n	10042f00 <ButtonsMenuSM_Event_Handler+0x1314>
					cursorpos++;
10042b88:	4b5e      	ldr	r3, [pc, #376]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042b8a:	781b      	ldrb	r3, [r3, #0]
10042b8c:	3301      	adds	r3, #1
10042b8e:	b2da      	uxtb	r2, r3
10042b90:	4b5c      	ldr	r3, [pc, #368]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042b92:	701a      	strb	r2, [r3, #0]
					cursorpos %= 4;
10042b94:	4b5b      	ldr	r3, [pc, #364]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042b96:	781b      	ldrb	r3, [r3, #0]
10042b98:	2203      	movs	r2, #3
10042b9a:	4013      	ands	r3, r2
10042b9c:	b2da      	uxtb	r2, r3
10042b9e:	4b59      	ldr	r3, [pc, #356]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042ba0:	701a      	strb	r2, [r3, #0]
					DrawSetTime(cursorpos, month+1, day+1, hour, minute);
10042ba2:	4b58      	ldr	r3, [pc, #352]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042ba4:	7818      	ldrb	r0, [r3, #0]
10042ba6:	4b58      	ldr	r3, [pc, #352]	@ (10042d08 <ButtonsMenuSM_Event_Handler+0x111c>)
10042ba8:	781b      	ldrb	r3, [r3, #0]
10042baa:	b25b      	sxtb	r3, r3
10042bac:	b2db      	uxtb	r3, r3
10042bae:	3301      	adds	r3, #1
10042bb0:	b2d9      	uxtb	r1, r3
10042bb2:	4b56      	ldr	r3, [pc, #344]	@ (10042d0c <ButtonsMenuSM_Event_Handler+0x1120>)
10042bb4:	781b      	ldrb	r3, [r3, #0]
10042bb6:	b25b      	sxtb	r3, r3
10042bb8:	b2db      	uxtb	r3, r3
10042bba:	3301      	adds	r3, #1
10042bbc:	b2da      	uxtb	r2, r3
10042bbe:	4b54      	ldr	r3, [pc, #336]	@ (10042d10 <ButtonsMenuSM_Event_Handler+0x1124>)
10042bc0:	781b      	ldrb	r3, [r3, #0]
10042bc2:	b25b      	sxtb	r3, r3
10042bc4:	b2dc      	uxtb	r4, r3
10042bc6:	4b53      	ldr	r3, [pc, #332]	@ (10042d14 <ButtonsMenuSM_Event_Handler+0x1128>)
10042bc8:	781b      	ldrb	r3, [r3, #0]
10042bca:	b25b      	sxtb	r3, r3
10042bcc:	b2db      	uxtb	r3, r3
10042bce:	9300      	str	r3, [sp, #0]
10042bd0:	0023      	movs	r3, r4
10042bd2:	f7fe fd9f 	bl	10041714 <DrawSetTime>
				}
			}
			break;
10042bd6:	e193      	b.n	10042f00 <ButtonsMenuSM_Event_Handler+0x1314>
10042bd8:	e192      	b.n	10042f00 <ButtonsMenuSM_Event_Handler+0x1314>
		case options:
			if(event.status == EVENT_ENTRY){
10042bda:	1d3b      	adds	r3, r7, #4
10042bdc:	781b      	ldrb	r3, [r3, #0]
10042bde:	b25b      	sxtb	r3, r3
10042be0:	2b02      	cmp	r3, #2
10042be2:	d10b      	bne.n	10042bfc <ButtonsMenuSM_Event_Handler+0x1010>
				cursorpos = 0;
10042be4:	4b47      	ldr	r3, [pc, #284]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042be6:	2200      	movs	r2, #0
10042be8:	701a      	strb	r2, [r3, #0]

				DrawOptions(cursorpos, FLASH_GetDutyCycle());
10042bea:	4b46      	ldr	r3, [pc, #280]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042bec:	781c      	ldrb	r4, [r3, #0]
10042bee:	f000 ffa9 	bl	10043b44 <FLASH_GetDutyCycle>
10042bf2:	0003      	movs	r3, r0
10042bf4:	0019      	movs	r1, r3
10042bf6:	0020      	movs	r0, r4
10042bf8:	f7fe fd32 	bl	10041660 <DrawOptions>
			}
			if(event.status == EVENT_BUTTONS){
10042bfc:	1d3b      	adds	r3, r7, #4
10042bfe:	781b      	ldrb	r3, [r3, #0]
10042c00:	b25b      	sxtb	r3, r3
10042c02:	2b04      	cmp	r3, #4
10042c04:	d000      	beq.n	10042c08 <ButtonsMenuSM_Event_Handler+0x101c>
10042c06:	e17d      	b.n	10042f04 <ButtonsMenuSM_Event_Handler+0x1318>
				if(event.data & B1XORMASK && !(event.data & B1MASK)){
10042c08:	1d3b      	adds	r3, r7, #4
10042c0a:	885b      	ldrh	r3, [r3, #2]
10042c0c:	001a      	movs	r2, r3
10042c0e:	2380      	movs	r3, #128	@ 0x80
10042c10:	005b      	lsls	r3, r3, #1
10042c12:	4013      	ands	r3, r2
10042c14:	d00e      	beq.n	10042c34 <ButtonsMenuSM_Event_Handler+0x1048>
10042c16:	1d3b      	adds	r3, r7, #4
10042c18:	885b      	ldrh	r3, [r3, #2]
10042c1a:	001a      	movs	r2, r3
10042c1c:	2301      	movs	r3, #1
10042c1e:	4013      	ands	r3, r2
10042c20:	d108      	bne.n	10042c34 <ButtonsMenuSM_Event_Handler+0x1048>
					//discountprintf("moving to main");
					nextstate = main;
10042c22:	2326      	movs	r3, #38	@ 0x26
10042c24:	18fb      	adds	r3, r7, r3
10042c26:	2200      	movs	r2, #0
10042c28:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042c2a:	2327      	movs	r3, #39	@ 0x27
10042c2c:	18fb      	adds	r3, r7, r3
10042c2e:	2201      	movs	r2, #1
10042c30:	701a      	strb	r2, [r3, #0]
10042c32:	e15a      	b.n	10042eea <ButtonsMenuSM_Event_Handler+0x12fe>
				} else
				if(event.data & B2XORMASK && !(event.data & B2MASK)){
10042c34:	1d3b      	adds	r3, r7, #4
10042c36:	885b      	ldrh	r3, [r3, #2]
10042c38:	001a      	movs	r2, r3
10042c3a:	2380      	movs	r3, #128	@ 0x80
10042c3c:	009b      	lsls	r3, r3, #2
10042c3e:	4013      	ands	r3, r2
10042c40:	d014      	beq.n	10042c6c <ButtonsMenuSM_Event_Handler+0x1080>
10042c42:	1d3b      	adds	r3, r7, #4
10042c44:	885b      	ldrh	r3, [r3, #2]
10042c46:	001a      	movs	r2, r3
10042c48:	2302      	movs	r3, #2
10042c4a:	4013      	ands	r3, r2
10042c4c:	d10e      	bne.n	10042c6c <ButtonsMenuSM_Event_Handler+0x1080>
					//discountprintf("moving to main");
					if(cursorpos == 2){
10042c4e:	4b2d      	ldr	r3, [pc, #180]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042c50:	781b      	ldrb	r3, [r3, #0]
10042c52:	2b02      	cmp	r3, #2
10042c54:	d101      	bne.n	10042c5a <ButtonsMenuSM_Event_Handler+0x106e>
						FLASH_ClearSchedule();
10042c56:	f001 f94b 	bl	10043ef0 <FLASH_ClearSchedule>
					}
					nextstate = main;
10042c5a:	2326      	movs	r3, #38	@ 0x26
10042c5c:	18fb      	adds	r3, r7, r3
10042c5e:	2200      	movs	r2, #0
10042c60:	701a      	strb	r2, [r3, #0]
					transition = 1;
10042c62:	2327      	movs	r3, #39	@ 0x27
10042c64:	18fb      	adds	r3, r7, r3
10042c66:	2201      	movs	r2, #1
10042c68:	701a      	strb	r2, [r3, #0]
10042c6a:	e13e      	b.n	10042eea <ButtonsMenuSM_Event_Handler+0x12fe>
				} else
				if(event.data & B3XORMASK && !(event.data & B3MASK)){
10042c6c:	1d3b      	adds	r3, r7, #4
10042c6e:	885b      	ldrh	r3, [r3, #2]
10042c70:	001a      	movs	r2, r3
10042c72:	2380      	movs	r3, #128	@ 0x80
10042c74:	00db      	lsls	r3, r3, #3
10042c76:	4013      	ands	r3, r2
10042c78:	d01f      	beq.n	10042cba <ButtonsMenuSM_Event_Handler+0x10ce>
10042c7a:	1d3b      	adds	r3, r7, #4
10042c7c:	885b      	ldrh	r3, [r3, #2]
10042c7e:	001a      	movs	r2, r3
10042c80:	2304      	movs	r3, #4
10042c82:	4013      	ands	r3, r2
10042c84:	d119      	bne.n	10042cba <ButtonsMenuSM_Event_Handler+0x10ce>
					cursorpos++;
10042c86:	4b1f      	ldr	r3, [pc, #124]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042c88:	781b      	ldrb	r3, [r3, #0]
10042c8a:	3301      	adds	r3, #1
10042c8c:	b2da      	uxtb	r2, r3
10042c8e:	4b1d      	ldr	r3, [pc, #116]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042c90:	701a      	strb	r2, [r3, #0]
					cursorpos %= 3;
10042c92:	4b1c      	ldr	r3, [pc, #112]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042c94:	781b      	ldrb	r3, [r3, #0]
10042c96:	2103      	movs	r1, #3
10042c98:	0018      	movs	r0, r3
10042c9a:	f7fd fb57 	bl	1004034c <__aeabi_uidivmod>
10042c9e:	000b      	movs	r3, r1
10042ca0:	b2da      	uxtb	r2, r3
10042ca2:	4b18      	ldr	r3, [pc, #96]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042ca4:	701a      	strb	r2, [r3, #0]
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
10042ca6:	4b17      	ldr	r3, [pc, #92]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042ca8:	781c      	ldrb	r4, [r3, #0]
10042caa:	f000 ff4b 	bl	10043b44 <FLASH_GetDutyCycle>
10042cae:	0003      	movs	r3, r0
10042cb0:	0019      	movs	r1, r3
10042cb2:	0020      	movs	r0, r4
10042cb4:	f7fe fcd4 	bl	10041660 <DrawOptions>
10042cb8:	e117      	b.n	10042eea <ButtonsMenuSM_Event_Handler+0x12fe>
				} else
				if(event.data & B4XORMASK && !(event.data & B4MASK)){
10042cba:	1d3b      	adds	r3, r7, #4
10042cbc:	885b      	ldrh	r3, [r3, #2]
10042cbe:	001a      	movs	r2, r3
10042cc0:	2380      	movs	r3, #128	@ 0x80
10042cc2:	011b      	lsls	r3, r3, #4
10042cc4:	4013      	ands	r3, r2
10042cc6:	d027      	beq.n	10042d18 <ButtonsMenuSM_Event_Handler+0x112c>
10042cc8:	1d3b      	adds	r3, r7, #4
10042cca:	885b      	ldrh	r3, [r3, #2]
10042ccc:	001a      	movs	r2, r3
10042cce:	2308      	movs	r3, #8
10042cd0:	4013      	ands	r3, r2
10042cd2:	d121      	bne.n	10042d18 <ButtonsMenuSM_Event_Handler+0x112c>
					cursorpos--;
10042cd4:	4b0b      	ldr	r3, [pc, #44]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042cd6:	781b      	ldrb	r3, [r3, #0]
10042cd8:	3b01      	subs	r3, #1
10042cda:	b2da      	uxtb	r2, r3
10042cdc:	4b09      	ldr	r3, [pc, #36]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042cde:	701a      	strb	r2, [r3, #0]
					if(cursorpos == 255){
10042ce0:	4b08      	ldr	r3, [pc, #32]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042ce2:	781b      	ldrb	r3, [r3, #0]
10042ce4:	2bff      	cmp	r3, #255	@ 0xff
10042ce6:	d102      	bne.n	10042cee <ButtonsMenuSM_Event_Handler+0x1102>
						cursorpos = 2;
10042ce8:	4b06      	ldr	r3, [pc, #24]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042cea:	2202      	movs	r2, #2
10042cec:	701a      	strb	r2, [r3, #0]
					}
					DrawOptions(cursorpos, FLASH_GetDutyCycle());
10042cee:	4b05      	ldr	r3, [pc, #20]	@ (10042d04 <ButtonsMenuSM_Event_Handler+0x1118>)
10042cf0:	781c      	ldrb	r4, [r3, #0]
10042cf2:	f000 ff27 	bl	10043b44 <FLASH_GetDutyCycle>
10042cf6:	0003      	movs	r3, r0
10042cf8:	0019      	movs	r1, r3
10042cfa:	0020      	movs	r0, r4
10042cfc:	f7fe fcb0 	bl	10041660 <DrawOptions>
					break;
10042d00:	e101      	b.n	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
10042d02:	46c0      	nop			@ (mov r8, r8)
10042d04:	2000039e 	.word	0x2000039e
10042d08:	200003b4 	.word	0x200003b4
10042d0c:	200003b3 	.word	0x200003b3
10042d10:	200003b2 	.word	0x200003b2
10042d14:	200003b1 	.word	0x200003b1
				} else
				if(event.data & B5XORMASK && !(event.data & B5MASK)){
10042d18:	1d3b      	adds	r3, r7, #4
10042d1a:	885b      	ldrh	r3, [r3, #2]
10042d1c:	001a      	movs	r2, r3
10042d1e:	2380      	movs	r3, #128	@ 0x80
10042d20:	015b      	lsls	r3, r3, #5
10042d22:	4013      	ands	r3, r2
10042d24:	d06c      	beq.n	10042e00 <ButtonsMenuSM_Event_Handler+0x1214>
10042d26:	1d3b      	adds	r3, r7, #4
10042d28:	885b      	ldrh	r3, [r3, #2]
10042d2a:	001a      	movs	r2, r3
10042d2c:	2310      	movs	r3, #16
10042d2e:	4013      	ands	r3, r2
10042d30:	d166      	bne.n	10042e00 <ButtonsMenuSM_Event_Handler+0x1214>
					switch(cursorpos){
10042d32:	4b87      	ldr	r3, [pc, #540]	@ (10042f50 <ButtonsMenuSM_Event_Handler+0x1364>)
10042d34:	781b      	ldrb	r3, [r3, #0]
10042d36:	2b00      	cmp	r3, #0
10042d38:	d002      	beq.n	10042d40 <ButtonsMenuSM_Event_Handler+0x1154>
10042d3a:	2b01      	cmp	r3, #1
10042d3c:	d02e      	beq.n	10042d9c <ButtonsMenuSM_Event_Handler+0x11b0>
						LPUART_WriteTx(0x00);
						LPUART_WriteTx(accumulation);//checksum
						LPUART_WriteTx(0xEF);//start flag
						break;
					default:
						break;
10042d3e:	e05e      	b.n	10042dfe <ButtonsMenuSM_Event_Handler+0x1212>
						int8_t dc = FLASH_GetDutyCycle()-1;
10042d40:	f000 ff00 	bl	10043b44 <FLASH_GetDutyCycle>
10042d44:	0003      	movs	r3, r0
10042d46:	3b01      	subs	r3, #1
10042d48:	b2da      	uxtb	r2, r3
10042d4a:	2424      	movs	r4, #36	@ 0x24
10042d4c:	193b      	adds	r3, r7, r4
10042d4e:	701a      	strb	r2, [r3, #0]
						if(dc < 0){
10042d50:	193b      	adds	r3, r7, r4
10042d52:	781b      	ldrb	r3, [r3, #0]
10042d54:	2b7f      	cmp	r3, #127	@ 0x7f
10042d56:	d90d      	bls.n	10042d74 <ButtonsMenuSM_Event_Handler+0x1188>
							dc = 0;
10042d58:	193b      	adds	r3, r7, r4
10042d5a:	2200      	movs	r2, #0
10042d5c:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10042d5e:	f000 fedb 	bl	10043b18 <FLASH_GetVolume>
10042d62:	0003      	movs	r3, r0
10042d64:	001a      	movs	r2, r3
10042d66:	193b      	adds	r3, r7, r4
10042d68:	781b      	ldrb	r3, [r3, #0]
10042d6a:	0019      	movs	r1, r3
10042d6c:	0010      	movs	r0, r2
10042d6e:	f000 fe91 	bl	10043a94 <FLASH_SetDCVol>
						break;
10042d72:	e044      	b.n	10042dfe <ButtonsMenuSM_Event_Handler+0x1212>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10042d74:	f000 fed0 	bl	10043b18 <FLASH_GetVolume>
10042d78:	0003      	movs	r3, r0
10042d7a:	001a      	movs	r2, r3
10042d7c:	2424      	movs	r4, #36	@ 0x24
10042d7e:	193b      	adds	r3, r7, r4
10042d80:	781b      	ldrb	r3, [r3, #0]
10042d82:	0019      	movs	r1, r3
10042d84:	0010      	movs	r0, r2
10042d86:	f000 fe85 	bl	10043a94 <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
10042d8a:	4b71      	ldr	r3, [pc, #452]	@ (10042f50 <ButtonsMenuSM_Event_Handler+0x1364>)
10042d8c:	781a      	ldrb	r2, [r3, #0]
10042d8e:	193b      	adds	r3, r7, r4
10042d90:	781b      	ldrb	r3, [r3, #0]
10042d92:	0019      	movs	r1, r3
10042d94:	0010      	movs	r0, r2
10042d96:	f7fe fc63 	bl	10041660 <DrawOptions>
						break;
10042d9a:	e030      	b.n	10042dfe <ButtonsMenuSM_Event_Handler+0x1212>
						uint8_t accumulation = 0;
10042d9c:	2425      	movs	r4, #37	@ 0x25
10042d9e:	193b      	adds	r3, r7, r4
10042da0:	2200      	movs	r2, #0
10042da2:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x7E);//start flag
10042da4:	207e      	movs	r0, #126	@ 0x7e
10042da6:	f002 ff2b 	bl	10045c00 <LPUART_WriteTx>
						accumulation += 0xFF;
10042daa:	193b      	adds	r3, r7, r4
10042dac:	193a      	adds	r2, r7, r4
10042dae:	7812      	ldrb	r2, [r2, #0]
10042db0:	3a01      	subs	r2, #1
10042db2:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0xFF);//Version?
10042db4:	20ff      	movs	r0, #255	@ 0xff
10042db6:	f002 ff23 	bl	10045c00 <LPUART_WriteTx>
						accumulation += 0x06;
10042dba:	193b      	adds	r3, r7, r4
10042dbc:	193a      	adds	r2, r7, r4
10042dbe:	7812      	ldrb	r2, [r2, #0]
10042dc0:	3206      	adds	r2, #6
10042dc2:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x06);//length
10042dc4:	2006      	movs	r0, #6
10042dc6:	f002 ff1b 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(0x02);//Previous track command
10042dca:	2002      	movs	r0, #2
10042dcc:	f002 ff18 	bl	10045c00 <LPUART_WriteTx>
						accumulation += 0x02;
10042dd0:	193b      	adds	r3, r7, r4
10042dd2:	193a      	adds	r2, r7, r4
10042dd4:	7812      	ldrb	r2, [r2, #0]
10042dd6:	3202      	adds	r2, #2
10042dd8:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x00);
10042dda:	2000      	movs	r0, #0
10042ddc:	f002 ff10 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10042de0:	2000      	movs	r0, #0
10042de2:	f002 ff0d 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10042de6:	2000      	movs	r0, #0
10042de8:	f002 ff0a 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(accumulation);//checksum
10042dec:	193b      	adds	r3, r7, r4
10042dee:	781b      	ldrb	r3, [r3, #0]
10042df0:	0018      	movs	r0, r3
10042df2:	f002 ff05 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(0xEF);//start flag
10042df6:	20ef      	movs	r0, #239	@ 0xef
10042df8:	f002 ff02 	bl	10045c00 <LPUART_WriteTx>
						break;
10042dfc:	46c0      	nop			@ (mov r8, r8)
					switch(cursorpos){
10042dfe:	e074      	b.n	10042eea <ButtonsMenuSM_Event_Handler+0x12fe>
					}
				} else
				if(event.data & B6XORMASK && !(event.data & B6MASK)){
10042e00:	1d3b      	adds	r3, r7, #4
10042e02:	885b      	ldrh	r3, [r3, #2]
10042e04:	001a      	movs	r2, r3
10042e06:	2380      	movs	r3, #128	@ 0x80
10042e08:	019b      	lsls	r3, r3, #6
10042e0a:	4013      	ands	r3, r2
10042e0c:	d100      	bne.n	10042e10 <ButtonsMenuSM_Event_Handler+0x1224>
10042e0e:	e079      	b.n	10042f04 <ButtonsMenuSM_Event_Handler+0x1318>
10042e10:	1d3b      	adds	r3, r7, #4
10042e12:	885b      	ldrh	r3, [r3, #2]
10042e14:	001a      	movs	r2, r3
10042e16:	2320      	movs	r3, #32
10042e18:	4013      	ands	r3, r2
10042e1a:	d000      	beq.n	10042e1e <ButtonsMenuSM_Event_Handler+0x1232>
10042e1c:	e072      	b.n	10042f04 <ButtonsMenuSM_Event_Handler+0x1318>
					switch(cursorpos){
10042e1e:	4b4c      	ldr	r3, [pc, #304]	@ (10042f50 <ButtonsMenuSM_Event_Handler+0x1364>)
10042e20:	781b      	ldrb	r3, [r3, #0]
10042e22:	2b00      	cmp	r3, #0
10042e24:	d002      	beq.n	10042e2c <ButtonsMenuSM_Event_Handler+0x1240>
10042e26:	2b01      	cmp	r3, #1
10042e28:	d02e      	beq.n	10042e88 <ButtonsMenuSM_Event_Handler+0x129c>
						LPUART_WriteTx(0x00);
						LPUART_WriteTx(accumulation);//checksum
						LPUART_WriteTx(0xEF);//start flag
						break;
					default:
						break;
10042e2a:	e05e      	b.n	10042eea <ButtonsMenuSM_Event_Handler+0x12fe>
						uint8_t dc = FLASH_GetDutyCycle()+1;
10042e2c:	f000 fe8a 	bl	10043b44 <FLASH_GetDutyCycle>
10042e30:	0003      	movs	r3, r0
10042e32:	001a      	movs	r2, r3
10042e34:	2422      	movs	r4, #34	@ 0x22
10042e36:	193b      	adds	r3, r7, r4
10042e38:	3201      	adds	r2, #1
10042e3a:	701a      	strb	r2, [r3, #0]
						if(dc > 100){
10042e3c:	193b      	adds	r3, r7, r4
10042e3e:	781b      	ldrb	r3, [r3, #0]
10042e40:	2b64      	cmp	r3, #100	@ 0x64
10042e42:	d90d      	bls.n	10042e60 <ButtonsMenuSM_Event_Handler+0x1274>
							dc = 100;
10042e44:	193b      	adds	r3, r7, r4
10042e46:	2264      	movs	r2, #100	@ 0x64
10042e48:	701a      	strb	r2, [r3, #0]
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10042e4a:	f000 fe65 	bl	10043b18 <FLASH_GetVolume>
10042e4e:	0003      	movs	r3, r0
10042e50:	001a      	movs	r2, r3
10042e52:	193b      	adds	r3, r7, r4
10042e54:	781b      	ldrb	r3, [r3, #0]
10042e56:	0019      	movs	r1, r3
10042e58:	0010      	movs	r0, r2
10042e5a:	f000 fe1b 	bl	10043a94 <FLASH_SetDCVol>
						break;
10042e5e:	e044      	b.n	10042eea <ButtonsMenuSM_Event_Handler+0x12fe>
							FLASH_SetDCVol(FLASH_GetVolume(), dc);
10042e60:	f000 fe5a 	bl	10043b18 <FLASH_GetVolume>
10042e64:	0003      	movs	r3, r0
10042e66:	001a      	movs	r2, r3
10042e68:	2422      	movs	r4, #34	@ 0x22
10042e6a:	193b      	adds	r3, r7, r4
10042e6c:	781b      	ldrb	r3, [r3, #0]
10042e6e:	0019      	movs	r1, r3
10042e70:	0010      	movs	r0, r2
10042e72:	f000 fe0f 	bl	10043a94 <FLASH_SetDCVol>
							DrawOptions(cursorpos, dc);
10042e76:	4b36      	ldr	r3, [pc, #216]	@ (10042f50 <ButtonsMenuSM_Event_Handler+0x1364>)
10042e78:	781a      	ldrb	r2, [r3, #0]
10042e7a:	193b      	adds	r3, r7, r4
10042e7c:	781b      	ldrb	r3, [r3, #0]
10042e7e:	0019      	movs	r1, r3
10042e80:	0010      	movs	r0, r2
10042e82:	f7fe fbed 	bl	10041660 <DrawOptions>
						break;
10042e86:	e030      	b.n	10042eea <ButtonsMenuSM_Event_Handler+0x12fe>
						uint8_t accumulation = 0;
10042e88:	2423      	movs	r4, #35	@ 0x23
10042e8a:	193b      	adds	r3, r7, r4
10042e8c:	2200      	movs	r2, #0
10042e8e:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x7E);//start flag
10042e90:	207e      	movs	r0, #126	@ 0x7e
10042e92:	f002 feb5 	bl	10045c00 <LPUART_WriteTx>
						accumulation += 0xFF;
10042e96:	193b      	adds	r3, r7, r4
10042e98:	193a      	adds	r2, r7, r4
10042e9a:	7812      	ldrb	r2, [r2, #0]
10042e9c:	3a01      	subs	r2, #1
10042e9e:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0xFF);//Version?
10042ea0:	20ff      	movs	r0, #255	@ 0xff
10042ea2:	f002 fead 	bl	10045c00 <LPUART_WriteTx>
						accumulation += 0x06;
10042ea6:	193b      	adds	r3, r7, r4
10042ea8:	193a      	adds	r2, r7, r4
10042eaa:	7812      	ldrb	r2, [r2, #0]
10042eac:	3206      	adds	r2, #6
10042eae:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x06);//length
10042eb0:	2006      	movs	r0, #6
10042eb2:	f002 fea5 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(0x01);//Previous track command
10042eb6:	2001      	movs	r0, #1
10042eb8:	f002 fea2 	bl	10045c00 <LPUART_WriteTx>
						accumulation += 0x01;
10042ebc:	193b      	adds	r3, r7, r4
10042ebe:	193a      	adds	r2, r7, r4
10042ec0:	7812      	ldrb	r2, [r2, #0]
10042ec2:	3201      	adds	r2, #1
10042ec4:	701a      	strb	r2, [r3, #0]
						LPUART_WriteTx(0x00);
10042ec6:	2000      	movs	r0, #0
10042ec8:	f002 fe9a 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10042ecc:	2000      	movs	r0, #0
10042ece:	f002 fe97 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(0x00);
10042ed2:	2000      	movs	r0, #0
10042ed4:	f002 fe94 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(accumulation);//checksum
10042ed8:	193b      	adds	r3, r7, r4
10042eda:	781b      	ldrb	r3, [r3, #0]
10042edc:	0018      	movs	r0, r3
10042ede:	f002 fe8f 	bl	10045c00 <LPUART_WriteTx>
						LPUART_WriteTx(0xEF);//start flag
10042ee2:	20ef      	movs	r0, #239	@ 0xef
10042ee4:	f002 fe8c 	bl	10045c00 <LPUART_WriteTx>
						break;
10042ee8:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			break;
10042eea:	e00b      	b.n	10042f04 <ButtonsMenuSM_Event_Handler+0x1318>
		default:
			break;
10042eec:	46c0      	nop			@ (mov r8, r8)
10042eee:	e00a      	b.n	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
			break;
10042ef0:	46c0      	nop			@ (mov r8, r8)
10042ef2:	e008      	b.n	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
			break;
10042ef4:	46c0      	nop			@ (mov r8, r8)
10042ef6:	e006      	b.n	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
			break;
10042ef8:	46c0      	nop			@ (mov r8, r8)
10042efa:	e004      	b.n	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
			break;
10042efc:	46c0      	nop			@ (mov r8, r8)
10042efe:	e002      	b.n	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
			break;
10042f00:	46c0      	nop			@ (mov r8, r8)
10042f02:	e000      	b.n	10042f06 <ButtonsMenuSM_Event_Handler+0x131a>
			break;
10042f04:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if(transition){
10042f06:	2327      	movs	r3, #39	@ 0x27
10042f08:	18fb      	adds	r3, r7, r3
10042f0a:	781b      	ldrb	r3, [r3, #0]
10042f0c:	2b00      	cmp	r3, #0
10042f0e:	d01a      	beq.n	10042f46 <ButtonsMenuSM_Event_Handler+0x135a>
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_EXIT});
10042f10:	2110      	movs	r1, #16
10042f12:	187b      	adds	r3, r7, r1
10042f14:	2200      	movs	r2, #0
10042f16:	601a      	str	r2, [r3, #0]
10042f18:	187b      	adds	r3, r7, r1
10042f1a:	2203      	movs	r2, #3
10042f1c:	701a      	strb	r2, [r3, #0]
10042f1e:	187b      	adds	r3, r7, r1
10042f20:	6818      	ldr	r0, [r3, #0]
10042f22:	f7fe fe63 	bl	10041bec <ButtonsMenuSM_Event_Handler>
		BMState = nextstate;
10042f26:	4b0b      	ldr	r3, [pc, #44]	@ (10042f54 <ButtonsMenuSM_Event_Handler+0x1368>)
10042f28:	2226      	movs	r2, #38	@ 0x26
10042f2a:	18ba      	adds	r2, r7, r2
10042f2c:	7812      	ldrb	r2, [r2, #0]
10042f2e:	701a      	strb	r2, [r3, #0]
		ButtonsMenuSM_Event_Handler((Event_t){EVENT_ENTRY});
10042f30:	210c      	movs	r1, #12
10042f32:	187b      	adds	r3, r7, r1
10042f34:	2200      	movs	r2, #0
10042f36:	601a      	str	r2, [r3, #0]
10042f38:	187b      	adds	r3, r7, r1
10042f3a:	2202      	movs	r2, #2
10042f3c:	701a      	strb	r2, [r3, #0]
10042f3e:	187b      	adds	r3, r7, r1
10042f40:	6818      	ldr	r0, [r3, #0]
10042f42:	f7fe fe53 	bl	10041bec <ButtonsMenuSM_Event_Handler>
	}
    return 1;
10042f46:	2301      	movs	r3, #1
}
10042f48:	0018      	movs	r0, r3
10042f4a:	46bd      	mov	sp, r7
10042f4c:	b00b      	add	sp, #44	@ 0x2c
10042f4e:	bd90      	pop	{r4, r7, pc}
10042f50:	2000039e 	.word	0x2000039e
10042f54:	2000039c 	.word	0x2000039c

10042f58 <COMM_Event_Init>:
 * @Function: EVENT_COMM_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t COMM_Event_Init(FIFO Queue){
10042f58:	b580      	push	{r7, lr}
10042f5a:	b084      	sub	sp, #16
10042f5c:	af00      	add	r7, sp, #0
10042f5e:	6078      	str	r0, [r7, #4]
	commSM = init;
10042f60:	4b0c      	ldr	r3, [pc, #48]	@ (10042f94 <COMM_Event_Init+0x3c>)
10042f62:	2200      	movs	r2, #0
10042f64:	701a      	strb	r2, [r3, #0]
	COMMqueue = Queue;
10042f66:	4b0c      	ldr	r3, [pc, #48]	@ (10042f98 <COMM_Event_Init+0x40>)
10042f68:	687a      	ldr	r2, [r7, #4]
10042f6a:	601a      	str	r2, [r3, #0]
	UARTs_Init();
10042f6c:	f002 fd64 	bl	10045a38 <UARTs_Init>
	FLASH_Init();
10042f70:	f000 fd10 	bl	10043994 <FLASH_Init>
	COMM_Event_Post((Event_t){EVENT_INIT, 0});
10042f74:	210c      	movs	r1, #12
10042f76:	187b      	adds	r3, r7, r1
10042f78:	2201      	movs	r2, #1
10042f7a:	701a      	strb	r2, [r3, #0]
10042f7c:	187b      	adds	r3, r7, r1
10042f7e:	2200      	movs	r2, #0
10042f80:	805a      	strh	r2, [r3, #2]
10042f82:	187b      	adds	r3, r7, r1
10042f84:	6818      	ldr	r0, [r3, #0]
10042f86:	f000 f809 	bl	10042f9c <COMM_Event_Post>
	return INIT_OK;
10042f8a:	2301      	movs	r3, #1
}
10042f8c:	0018      	movs	r0, r3
10042f8e:	46bd      	mov	sp, r7
10042f90:	b004      	add	sp, #16
10042f92:	bd80      	pop	{r7, pc}
10042f94:	200003b5 	.word	0x200003b5
10042f98:	200003b8 	.word	0x200003b8

10042f9c <COMM_Event_Post>:

void COMM_Event_Post(Event_t event){
10042f9c:	b580      	push	{r7, lr}
10042f9e:	b082      	sub	sp, #8
10042fa0:	af00      	add	r7, sp, #0
10042fa2:	1d3b      	adds	r3, r7, #4
10042fa4:	6018      	str	r0, [r3, #0]
	FIFO_Enqueue(COMMqueue, event);
10042fa6:	4b05      	ldr	r3, [pc, #20]	@ (10042fbc <COMM_Event_Post+0x20>)
10042fa8:	681a      	ldr	r2, [r3, #0]
10042faa:	1d3b      	adds	r3, r7, #4
10042fac:	6819      	ldr	r1, [r3, #0]
10042fae:	0010      	movs	r0, r2
10042fb0:	f000 fc5b 	bl	1004386a <FIFO_Enqueue>
}
10042fb4:	46c0      	nop			@ (mov r8, r8)
10042fb6:	46bd      	mov	sp, r7
10042fb8:	b002      	add	sp, #8
10042fba:	bd80      	pop	{r7, pc}
10042fbc:	200003b8 	.word	0x200003b8

10042fc0 <COMM_Event_Updater>:
 * @Function: EVENT_COMM_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the 
 * @param: none
 * @return: An event 
 */
Event_t COMM_Event_Updater(void){
10042fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
10042fc2:	b087      	sub	sp, #28
10042fc4:	af00      	add	r7, sp, #0
	uint8_t event = 0;
10042fc6:	2317      	movs	r3, #23
10042fc8:	18fb      	adds	r3, r7, r3
10042fca:	2200      	movs	r2, #0
10042fcc:	701a      	strb	r2, [r3, #0]
    Event_t out = (Event_t){EVENT_NONE, 0};
10042fce:	250c      	movs	r5, #12
10042fd0:	197b      	adds	r3, r7, r5
10042fd2:	2200      	movs	r2, #0
10042fd4:	701a      	strb	r2, [r3, #0]
10042fd6:	197b      	adds	r3, r7, r5
10042fd8:	2200      	movs	r2, #0
10042fda:	805a      	strh	r2, [r3, #2]
    char input = USART_ReadRx();
10042fdc:	2616      	movs	r6, #22
10042fde:	19bc      	adds	r4, r7, r6
10042fe0:	f002 fe58 	bl	10045c94 <USART_ReadRx>
10042fe4:	0003      	movs	r3, r0
10042fe6:	7023      	strb	r3, [r4, #0]
    if(input != UARTFAILED){
10042fe8:	0031      	movs	r1, r6
10042fea:	187b      	adds	r3, r7, r1
10042fec:	781b      	ldrb	r3, [r3, #0]
10042fee:	2b25      	cmp	r3, #37	@ 0x25
10042ff0:	d00b      	beq.n	1004300a <COMM_Event_Updater+0x4a>
    	event = 1;
10042ff2:	2317      	movs	r3, #23
10042ff4:	18fb      	adds	r3, r7, r3
10042ff6:	2201      	movs	r2, #1
10042ff8:	701a      	strb	r2, [r3, #0]
    	out.status = EVENT_USART;
10042ffa:	197b      	adds	r3, r7, r5
10042ffc:	2206      	movs	r2, #6
10042ffe:	701a      	strb	r2, [r3, #0]
    	out.data = (uint16_t)input;
10043000:	187b      	adds	r3, r7, r1
10043002:	781b      	ldrb	r3, [r3, #0]
10043004:	b29a      	uxth	r2, r3
10043006:	197b      	adds	r3, r7, r5
10043008:	805a      	strh	r2, [r3, #2]
    }
    if(sendinglogs == 1){
1004300a:	4b1f      	ldr	r3, [pc, #124]	@ (10043088 <COMM_Event_Updater+0xc8>)
1004300c:	781b      	ldrb	r3, [r3, #0]
1004300e:	2b01      	cmp	r3, #1
10043010:	d115      	bne.n	1004303e <COMM_Event_Updater+0x7e>
    	if(USART_TxEmpty() || BLUETOOTH_BufferEmpty() == 1){
10043012:	f002 feeb 	bl	10045dec <USART_TxEmpty>
10043016:	1e03      	subs	r3, r0, #0
10043018:	d104      	bne.n	10043024 <COMM_Event_Updater+0x64>
1004301a:	f7fe fa11 	bl	10041440 <BLUETOOTH_BufferEmpty>
1004301e:	0003      	movs	r3, r0
10043020:	2b01      	cmp	r3, #1
10043022:	d10c      	bne.n	1004303e <COMM_Event_Updater+0x7e>
    		FIFO_Enqueue(COMMqueue, (Event_t){EVENT_USART_READY, 0});
10043024:	4b19      	ldr	r3, [pc, #100]	@ (1004308c <COMM_Event_Updater+0xcc>)
10043026:	681a      	ldr	r2, [r3, #0]
10043028:	1d3b      	adds	r3, r7, #4
1004302a:	2107      	movs	r1, #7
1004302c:	7019      	strb	r1, [r3, #0]
1004302e:	1d3b      	adds	r3, r7, #4
10043030:	2100      	movs	r1, #0
10043032:	8059      	strh	r1, [r3, #2]
10043034:	1d3b      	adds	r3, r7, #4
10043036:	6819      	ldr	r1, [r3, #0]
10043038:	0010      	movs	r0, r2
1004303a:	f000 fc16 	bl	1004386a <FIFO_Enqueue>
    	}
    }
	if(event){FIFO_Enqueue(COMMqueue, out);}
1004303e:	2317      	movs	r3, #23
10043040:	18fb      	adds	r3, r7, r3
10043042:	781b      	ldrb	r3, [r3, #0]
10043044:	2b00      	cmp	r3, #0
10043046:	d007      	beq.n	10043058 <COMM_Event_Updater+0x98>
10043048:	4b10      	ldr	r3, [pc, #64]	@ (1004308c <COMM_Event_Updater+0xcc>)
1004304a:	681a      	ldr	r2, [r3, #0]
1004304c:	230c      	movs	r3, #12
1004304e:	18fb      	adds	r3, r7, r3
10043050:	6819      	ldr	r1, [r3, #0]
10043052:	0010      	movs	r0, r2
10043054:	f000 fc09 	bl	1004386a <FIFO_Enqueue>
    return out;
10043058:	2110      	movs	r1, #16
1004305a:	187b      	adds	r3, r7, r1
1004305c:	220c      	movs	r2, #12
1004305e:	18ba      	adds	r2, r7, r2
10043060:	6812      	ldr	r2, [r2, #0]
10043062:	601a      	str	r2, [r3, #0]
10043064:	187a      	adds	r2, r7, r1
10043066:	2300      	movs	r3, #0
10043068:	8811      	ldrh	r1, [r2, #0]
1004306a:	0409      	lsls	r1, r1, #16
1004306c:	0c09      	lsrs	r1, r1, #16
1004306e:	0c1b      	lsrs	r3, r3, #16
10043070:	041b      	lsls	r3, r3, #16
10043072:	430b      	orrs	r3, r1
10043074:	8852      	ldrh	r2, [r2, #2]
10043076:	0412      	lsls	r2, r2, #16
10043078:	041b      	lsls	r3, r3, #16
1004307a:	0c1b      	lsrs	r3, r3, #16
1004307c:	4313      	orrs	r3, r2
}
1004307e:	0018      	movs	r0, r3
10043080:	46bd      	mov	sp, r7
10043082:	b007      	add	sp, #28
10043084:	bdf0      	pop	{r4, r5, r6, r7, pc}
10043086:	46c0      	nop			@ (mov r8, r8)
10043088:	200003bc 	.word	0x200003bc
1004308c:	200003b8 	.word	0x200003b8

10043090 <COMM_Event_Handler>:
 * @Function: EVENT_COMM_Event_Handler
 * @Brief: 
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t COMM_Event_Handler(Event_t event){
10043090:	b5b0      	push	{r4, r5, r7, lr}
10043092:	b09e      	sub	sp, #120	@ 0x78
10043094:	af00      	add	r7, sp, #0
10043096:	1d3b      	adds	r3, r7, #4
10043098:	6018      	str	r0, [r3, #0]
	bool transition = 0;
1004309a:	2377      	movs	r3, #119	@ 0x77
1004309c:	18fb      	adds	r3, r7, r3
1004309e:	2200      	movs	r2, #0
100430a0:	701a      	strb	r2, [r3, #0]

	static uint8_t folder;
	COMMSTATES_t next = commSM;
100430a2:	2376      	movs	r3, #118	@ 0x76
100430a4:	18fb      	adds	r3, r7, r3
100430a6:	4ae1      	ldr	r2, [pc, #900]	@ (1004342c <COMM_Event_Handler+0x39c>)
100430a8:	7812      	ldrb	r2, [r2, #0]
100430aa:	701a      	strb	r2, [r3, #0]
	char text[50];
	switch(commSM){
100430ac:	4bdf      	ldr	r3, [pc, #892]	@ (1004342c <COMM_Event_Handler+0x39c>)
100430ae:	781b      	ldrb	r3, [r3, #0]
100430b0:	2b0f      	cmp	r3, #15
100430b2:	d900      	bls.n	100430b6 <COMM_Event_Handler+0x26>
100430b4:	e339      	b.n	1004372a <COMM_Event_Handler+0x69a>
100430b6:	009a      	lsls	r2, r3, #2
100430b8:	4bdd      	ldr	r3, [pc, #884]	@ (10043430 <COMM_Event_Handler+0x3a0>)
100430ba:	18d3      	adds	r3, r2, r3
100430bc:	681b      	ldr	r3, [r3, #0]
100430be:	469f      	mov	pc, r3
	case init:
		if(event.status == EVENT_INIT){
100430c0:	1d3b      	adds	r3, r7, #4
100430c2:	781b      	ldrb	r3, [r3, #0]
100430c4:	b25b      	sxtb	r3, r3
100430c6:	2b01      	cmp	r3, #1
100430c8:	d000      	beq.n	100430cc <COMM_Event_Handler+0x3c>
100430ca:	e330      	b.n	1004372e <COMM_Event_Handler+0x69e>
			next = idle;
100430cc:	2376      	movs	r3, #118	@ 0x76
100430ce:	18fb      	adds	r3, r7, r3
100430d0:	2201      	movs	r2, #1
100430d2:	701a      	strb	r2, [r3, #0]
			transition = true;
100430d4:	2377      	movs	r3, #119	@ 0x77
100430d6:	18fb      	adds	r3, r7, r3
100430d8:	2201      	movs	r2, #1
100430da:	701a      	strb	r2, [r3, #0]
		}
		break;
100430dc:	e327      	b.n	1004372e <COMM_Event_Handler+0x69e>
	case idle:
		if(event.status == EVENT_ENTRY){
100430de:	1d3b      	adds	r3, r7, #4
100430e0:	781b      	ldrb	r3, [r3, #0]
100430e2:	b25b      	sxtb	r3, r3
100430e4:	2b02      	cmp	r3, #2
100430e6:	d102      	bne.n	100430ee <COMM_Event_Handler+0x5e>
			sendinglogs = 0;
100430e8:	4bd2      	ldr	r3, [pc, #840]	@ (10043434 <COMM_Event_Handler+0x3a4>)
100430ea:	2200      	movs	r2, #0
100430ec:	701a      	strb	r2, [r3, #0]
		}
		if(event.status == EVENT_USART){
100430ee:	1d3b      	adds	r3, r7, #4
100430f0:	781b      	ldrb	r3, [r3, #0]
100430f2:	b25b      	sxtb	r3, r3
100430f4:	2b06      	cmp	r3, #6
100430f6:	d000      	beq.n	100430fa <COMM_Event_Handler+0x6a>
100430f8:	e31b      	b.n	10043732 <COMM_Event_Handler+0x6a2>
			switch (event.data){
100430fa:	1d3b      	adds	r3, r7, #4
100430fc:	885b      	ldrh	r3, [r3, #2]
100430fe:	2b05      	cmp	r3, #5
10043100:	d845      	bhi.n	1004318e <COMM_Event_Handler+0xfe>
10043102:	009a      	lsls	r2, r3, #2
10043104:	4bcc      	ldr	r3, [pc, #816]	@ (10043438 <COMM_Event_Handler+0x3a8>)
10043106:	18d3      	adds	r3, r2, r3
10043108:	681b      	ldr	r3, [r3, #0]
1004310a:	469f      	mov	pc, r3
			case VOLUMECONTROL:
				discountprintf("received volume control");
1004310c:	4bcb      	ldr	r3, [pc, #812]	@ (1004343c <COMM_Event_Handler+0x3ac>)
1004310e:	0018      	movs	r0, r3
10043110:	f000 fb6a 	bl	100437e8 <discountprintf>
				next = volumecontrol;
10043114:	2376      	movs	r3, #118	@ 0x76
10043116:	18fb      	adds	r3, r7, r3
10043118:	2202      	movs	r2, #2
1004311a:	701a      	strb	r2, [r3, #0]
				transition = true;
1004311c:	2377      	movs	r3, #119	@ 0x77
1004311e:	18fb      	adds	r3, r7, r3
10043120:	2201      	movs	r2, #1
10043122:	701a      	strb	r2, [r3, #0]
				break;
10043124:	e034      	b.n	10043190 <COMM_Event_Handler+0x100>
			case FOLDERCONTROL:
				discountprintf("received folder control");
10043126:	4bc6      	ldr	r3, [pc, #792]	@ (10043440 <COMM_Event_Handler+0x3b0>)
10043128:	0018      	movs	r0, r3
1004312a:	f000 fb5d 	bl	100437e8 <discountprintf>
				next = foldercontrol;
1004312e:	2376      	movs	r3, #118	@ 0x76
10043130:	18fb      	adds	r3, r7, r3
10043132:	2203      	movs	r2, #3
10043134:	701a      	strb	r2, [r3, #0]
				transition = true;
10043136:	2377      	movs	r3, #119	@ 0x77
10043138:	18fb      	adds	r3, r7, r3
1004313a:	2201      	movs	r2, #1
1004313c:	701a      	strb	r2, [r3, #0]
				break;
1004313e:	e027      	b.n	10043190 <COMM_Event_Handler+0x100>
			case LOGSREQUEST:
				discountprintf("received logs request");
10043140:	4bc0      	ldr	r3, [pc, #768]	@ (10043444 <COMM_Event_Handler+0x3b4>)
10043142:	0018      	movs	r0, r3
10043144:	f000 fb50 	bl	100437e8 <discountprintf>
				next = logsrequest;
10043148:	2376      	movs	r3, #118	@ 0x76
1004314a:	18fb      	adds	r3, r7, r3
1004314c:	2205      	movs	r2, #5
1004314e:	701a      	strb	r2, [r3, #0]
				transition = true;
10043150:	2377      	movs	r3, #119	@ 0x77
10043152:	18fb      	adds	r3, r7, r3
10043154:	2201      	movs	r2, #1
10043156:	701a      	strb	r2, [r3, #0]
				break;
10043158:	e01a      	b.n	10043190 <COMM_Event_Handler+0x100>
			case DCCONTROL:
				discountprintf("received DC control");
1004315a:	4bbb      	ldr	r3, [pc, #748]	@ (10043448 <COMM_Event_Handler+0x3b8>)
1004315c:	0018      	movs	r0, r3
1004315e:	f000 fb43 	bl	100437e8 <discountprintf>
				next = dccontrol;
10043162:	2376      	movs	r3, #118	@ 0x76
10043164:	18fb      	adds	r3, r7, r3
10043166:	2207      	movs	r2, #7
10043168:	701a      	strb	r2, [r3, #0]
				transition = true;
1004316a:	2377      	movs	r3, #119	@ 0x77
1004316c:	18fb      	adds	r3, r7, r3
1004316e:	2201      	movs	r2, #1
10043170:	701a      	strb	r2, [r3, #0]
				break;
10043172:	e00d      	b.n	10043190 <COMM_Event_Handler+0x100>
			case SCHEDULECONTROL:
				discountprintf("received schedule control");
10043174:	4bb5      	ldr	r3, [pc, #724]	@ (1004344c <COMM_Event_Handler+0x3bc>)
10043176:	0018      	movs	r0, r3
10043178:	f000 fb36 	bl	100437e8 <discountprintf>
				next = schedulecontrol;
1004317c:	2376      	movs	r3, #118	@ 0x76
1004317e:	18fb      	adds	r3, r7, r3
10043180:	2208      	movs	r2, #8
10043182:	701a      	strb	r2, [r3, #0]
				transition = true;
10043184:	2377      	movs	r3, #119	@ 0x77
10043186:	18fb      	adds	r3, r7, r3
10043188:	2201      	movs	r2, #1
1004318a:	701a      	strb	r2, [r3, #0]
				break;
1004318c:	e000      	b.n	10043190 <COMM_Event_Handler+0x100>
			default:
				break;
1004318e:	46c0      	nop			@ (mov r8, r8)
			}
		}
		break;
10043190:	e2cf      	b.n	10043732 <COMM_Event_Handler+0x6a2>
	case volumecontrol:
		if(event.status == EVENT_USART){
10043192:	1d3b      	adds	r3, r7, #4
10043194:	781b      	ldrb	r3, [r3, #0]
10043196:	b25b      	sxtb	r3, r3
10043198:	2b06      	cmp	r3, #6
1004319a:	d000      	beq.n	1004319e <COMM_Event_Handler+0x10e>
1004319c:	e2cb      	b.n	10043736 <COMM_Event_Handler+0x6a6>
			FLASH_SetDCVol((uint8_t)event.data, FLASH_GetDutyCycle());
1004319e:	1d3b      	adds	r3, r7, #4
100431a0:	885b      	ldrh	r3, [r3, #2]
100431a2:	b2dc      	uxtb	r4, r3
100431a4:	f000 fcce 	bl	10043b44 <FLASH_GetDutyCycle>
100431a8:	0003      	movs	r3, r0
100431aa:	0019      	movs	r1, r3
100431ac:	0020      	movs	r0, r4
100431ae:	f000 fc71 	bl	10043a94 <FLASH_SetDCVol>
			sprintf(text, "Storing volume %d", FLASH_GetVolume());
100431b2:	f000 fcb1 	bl	10043b18 <FLASH_GetVolume>
100431b6:	0003      	movs	r3, r0
100431b8:	001a      	movs	r2, r3
100431ba:	49a5      	ldr	r1, [pc, #660]	@ (10043450 <COMM_Event_Handler+0x3c0>)
100431bc:	2434      	movs	r4, #52	@ 0x34
100431be:	193b      	adds	r3, r7, r4
100431c0:	0018      	movs	r0, r3
100431c2:	f024 fbb3 	bl	1006792c <siprintf>
			discountprintf(text);
100431c6:	193b      	adds	r3, r7, r4
100431c8:	0018      	movs	r0, r3
100431ca:	f000 fb0d 	bl	100437e8 <discountprintf>
			next = idle;
100431ce:	2376      	movs	r3, #118	@ 0x76
100431d0:	18fb      	adds	r3, r7, r3
100431d2:	2201      	movs	r2, #1
100431d4:	701a      	strb	r2, [r3, #0]
			transition = true;
100431d6:	2377      	movs	r3, #119	@ 0x77
100431d8:	18fb      	adds	r3, r7, r3
100431da:	2201      	movs	r2, #1
100431dc:	701a      	strb	r2, [r3, #0]
		}
		break;
100431de:	e2aa      	b.n	10043736 <COMM_Event_Handler+0x6a6>
	case foldercontrol:
		if(event.status == EVENT_USART){
100431e0:	1d3b      	adds	r3, r7, #4
100431e2:	781b      	ldrb	r3, [r3, #0]
100431e4:	b25b      	sxtb	r3, r3
100431e6:	2b06      	cmp	r3, #6
100431e8:	d000      	beq.n	100431ec <COMM_Event_Handler+0x15c>
100431ea:	e2a6      	b.n	1004373a <COMM_Event_Handler+0x6aa>
			folder = event.data;
100431ec:	1d3b      	adds	r3, r7, #4
100431ee:	885b      	ldrh	r3, [r3, #2]
100431f0:	b2da      	uxtb	r2, r3
100431f2:	4b98      	ldr	r3, [pc, #608]	@ (10043454 <COMM_Event_Handler+0x3c4>)
100431f4:	701a      	strb	r2, [r3, #0]
			discountprintf("Storing folder selector");
100431f6:	4b98      	ldr	r3, [pc, #608]	@ (10043458 <COMM_Event_Handler+0x3c8>)
100431f8:	0018      	movs	r0, r3
100431fa:	f000 faf5 	bl	100437e8 <discountprintf>
			next = folderselected;
100431fe:	2376      	movs	r3, #118	@ 0x76
10043200:	18fb      	adds	r3, r7, r3
10043202:	2204      	movs	r2, #4
10043204:	701a      	strb	r2, [r3, #0]
			transition = true;
10043206:	2377      	movs	r3, #119	@ 0x77
10043208:	18fb      	adds	r3, r7, r3
1004320a:	2201      	movs	r2, #1
1004320c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004320e:	e294      	b.n	1004373a <COMM_Event_Handler+0x6aa>
	case folderselected:
		if(event.status == EVENT_USART){
10043210:	1d3b      	adds	r3, r7, #4
10043212:	781b      	ldrb	r3, [r3, #0]
10043214:	b25b      	sxtb	r3, r3
10043216:	2b06      	cmp	r3, #6
10043218:	d000      	beq.n	1004321c <COMM_Event_Handler+0x18c>
1004321a:	e290      	b.n	1004373e <COMM_Event_Handler+0x6ae>
			//post to mp3 controller with the new data
			Event_t play = (Event_t){EVENT_PLAY, (folder<<8) + (event.data)};
1004321c:	2130      	movs	r1, #48	@ 0x30
1004321e:	187b      	adds	r3, r7, r1
10043220:	220b      	movs	r2, #11
10043222:	701a      	strb	r2, [r3, #0]
10043224:	4b8b      	ldr	r3, [pc, #556]	@ (10043454 <COMM_Event_Handler+0x3c4>)
10043226:	781b      	ldrb	r3, [r3, #0]
10043228:	021b      	lsls	r3, r3, #8
1004322a:	b29a      	uxth	r2, r3
1004322c:	1d3b      	adds	r3, r7, #4
1004322e:	885b      	ldrh	r3, [r3, #2]
10043230:	18d3      	adds	r3, r2, r3
10043232:	b29a      	uxth	r2, r3
10043234:	187b      	adds	r3, r7, r1
10043236:	805a      	strh	r2, [r3, #2]
			MP3_Event_Post(play);
10043238:	187b      	adds	r3, r7, r1
1004323a:	6818      	ldr	r0, [r3, #0]
1004323c:	f001 fbc6 	bl	100449cc <MP3_Event_Post>
			discountprintf("Sending track selector");
10043240:	4b86      	ldr	r3, [pc, #536]	@ (1004345c <COMM_Event_Handler+0x3cc>)
10043242:	0018      	movs	r0, r3
10043244:	f000 fad0 	bl	100437e8 <discountprintf>
			next = idle;
10043248:	2376      	movs	r3, #118	@ 0x76
1004324a:	18fb      	adds	r3, r7, r3
1004324c:	2201      	movs	r2, #1
1004324e:	701a      	strb	r2, [r3, #0]
			transition = true;
10043250:	2377      	movs	r3, #119	@ 0x77
10043252:	18fb      	adds	r3, r7, r3
10043254:	2201      	movs	r2, #1
10043256:	701a      	strb	r2, [r3, #0]
		}
		break;
10043258:	e271      	b.n	1004373e <COMM_Event_Handler+0x6ae>
	case logsrequest:
		static uint32_t sent;
		if(event.status == EVENT_ENTRY){
1004325a:	1d3b      	adds	r3, r7, #4
1004325c:	781b      	ldrb	r3, [r3, #0]
1004325e:	b25b      	sxtb	r3, r3
10043260:	2b02      	cmp	r3, #2
10043262:	d000      	beq.n	10043266 <COMM_Event_Handler+0x1d6>
10043264:	e26d      	b.n	10043742 <COMM_Event_Handler+0x6b2>
			sendinglogs = 1;
10043266:	4b73      	ldr	r3, [pc, #460]	@ (10043434 <COMM_Event_Handler+0x3a4>)
10043268:	2201      	movs	r2, #1
1004326a:	701a      	strb	r2, [r3, #0]
			sent = 0;
1004326c:	4b7c      	ldr	r3, [pc, #496]	@ (10043460 <COMM_Event_Handler+0x3d0>)
1004326e:	2200      	movs	r2, #0
10043270:	601a      	str	r2, [r3, #0]
			uint16_t size = FLASH_GetLogsSize();
10043272:	2568      	movs	r5, #104	@ 0x68
10043274:	197c      	adds	r4, r7, r5
10043276:	f000 fcd1 	bl	10043c1c <FLASH_GetLogsSize>
1004327a:	0003      	movs	r3, r0
1004327c:	8023      	strh	r3, [r4, #0]
			//uint16_t size = 32;
			USART_WriteTx((uint8_t)(size>>8));
1004327e:	002c      	movs	r4, r5
10043280:	193b      	adds	r3, r7, r4
10043282:	881b      	ldrh	r3, [r3, #0]
10043284:	0a1b      	lsrs	r3, r3, #8
10043286:	b29b      	uxth	r3, r3
10043288:	b2db      	uxtb	r3, r3
1004328a:	0018      	movs	r0, r3
1004328c:	f002 fd44 	bl	10045d18 <USART_WriteTx>
			USART_WriteTx((uint8_t)(size));
10043290:	193b      	adds	r3, r7, r4
10043292:	881b      	ldrh	r3, [r3, #0]
10043294:	b2db      	uxtb	r3, r3
10043296:	0018      	movs	r0, r3
10043298:	f002 fd3e 	bl	10045d18 <USART_WriteTx>
			next = logsdata;
1004329c:	2376      	movs	r3, #118	@ 0x76
1004329e:	18fb      	adds	r3, r7, r3
100432a0:	2206      	movs	r2, #6
100432a2:	701a      	strb	r2, [r3, #0]
			transition = true;
100432a4:	2377      	movs	r3, #119	@ 0x77
100432a6:	18fb      	adds	r3, r7, r3
100432a8:	2201      	movs	r2, #1
100432aa:	701a      	strb	r2, [r3, #0]
		}
		break;
100432ac:	e249      	b.n	10043742 <COMM_Event_Handler+0x6b2>
	case logsdata:
		if(event.status == EVENT_USART_READY){
100432ae:	1d3b      	adds	r3, r7, #4
100432b0:	781b      	ldrb	r3, [r3, #0]
100432b2:	b25b      	sxtb	r3, r3
100432b4:	2b07      	cmp	r3, #7
100432b6:	d000      	beq.n	100432ba <COMM_Event_Handler+0x22a>
100432b8:	e245      	b.n	10043746 <COMM_Event_Handler+0x6b6>
			//get logs size
			uint16_t size  = 32;
100432ba:	216a      	movs	r1, #106	@ 0x6a
100432bc:	187b      	adds	r3, r7, r1
100432be:	2220      	movs	r2, #32
100432c0:	801a      	strh	r2, [r3, #0]
			//uint16_t size = FLASH_GetLogsSize();
			if(size - sent > (uint16_t)(USARTBUFFERSIZE/6)){
100432c2:	187b      	adds	r3, r7, r1
100432c4:	881a      	ldrh	r2, [r3, #0]
100432c6:	4b66      	ldr	r3, [pc, #408]	@ (10043460 <COMM_Event_Handler+0x3d0>)
100432c8:	681b      	ldr	r3, [r3, #0]
100432ca:	1ad3      	subs	r3, r2, r3
100432cc:	2b55      	cmp	r3, #85	@ 0x55
100432ce:	d934      	bls.n	1004333a <COMM_Event_Handler+0x2aa>
				//send next part of logs here, use sent to index the
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
100432d0:	2300      	movs	r3, #0
100432d2:	673b      	str	r3, [r7, #112]	@ 0x70
100432d4:	e02d      	b.n	10043332 <COMM_Event_Handler+0x2a2>
					//scheduleEvent levent = FLASH_ReadLogs(sent);
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
100432d6:	2024      	movs	r0, #36	@ 0x24
100432d8:	183b      	adds	r3, r7, r0
100432da:	4a62      	ldr	r2, [pc, #392]	@ (10043464 <COMM_Event_Handler+0x3d4>)
100432dc:	6811      	ldr	r1, [r2, #0]
100432de:	6019      	str	r1, [r3, #0]
100432e0:	8892      	ldrh	r2, [r2, #4]
100432e2:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
100432e4:	0004      	movs	r4, r0
100432e6:	193b      	adds	r3, r7, r4
100432e8:	781b      	ldrb	r3, [r3, #0]
100432ea:	0018      	movs	r0, r3
100432ec:	f002 fd14 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.day);
100432f0:	193b      	adds	r3, r7, r4
100432f2:	785b      	ldrb	r3, [r3, #1]
100432f4:	0018      	movs	r0, r3
100432f6:	f002 fd0f 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.start);
100432fa:	193b      	adds	r3, r7, r4
100432fc:	789b      	ldrb	r3, [r3, #2]
100432fe:	0018      	movs	r0, r3
10043300:	f002 fd0a 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.stop);
10043304:	193b      	adds	r3, r7, r4
10043306:	78db      	ldrb	r3, [r3, #3]
10043308:	0018      	movs	r0, r3
1004330a:	f002 fd05 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.folder);
1004330e:	193b      	adds	r3, r7, r4
10043310:	791b      	ldrb	r3, [r3, #4]
10043312:	0018      	movs	r0, r3
10043314:	f002 fd00 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.track);
10043318:	193b      	adds	r3, r7, r4
1004331a:	795b      	ldrb	r3, [r3, #5]
1004331c:	0018      	movs	r0, r3
1004331e:	f002 fcfb 	bl	10045d18 <USART_WriteTx>
					sent++;
10043322:	4b4f      	ldr	r3, [pc, #316]	@ (10043460 <COMM_Event_Handler+0x3d0>)
10043324:	681b      	ldr	r3, [r3, #0]
10043326:	1c5a      	adds	r2, r3, #1
10043328:	4b4d      	ldr	r3, [pc, #308]	@ (10043460 <COMM_Event_Handler+0x3d0>)
1004332a:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < (uint16_t)(USARTBUFFERSIZE/6); i++){
1004332c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
1004332e:	3301      	adds	r3, #1
10043330:	673b      	str	r3, [r7, #112]	@ 0x70
10043332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
10043334:	2b54      	cmp	r3, #84	@ 0x54
10043336:	ddce      	ble.n	100432d6 <COMM_Event_Handler+0x246>
				next = idle;
				transition = true;
				discountprintf("data sent");
			}
		}
		break;
10043338:	e205      	b.n	10043746 <COMM_Event_Handler+0x6b6>
				for(int i = 0; i < size - sent; i++){
1004333a:	2300      	movs	r3, #0
1004333c:	66fb      	str	r3, [r7, #108]	@ 0x6c
1004333e:	e02d      	b.n	1004339c <COMM_Event_Handler+0x30c>
					scheduleEvent levent = {1, 1, 0b1001001, 0b1001010, 1, 1};
10043340:	201c      	movs	r0, #28
10043342:	183b      	adds	r3, r7, r0
10043344:	4a47      	ldr	r2, [pc, #284]	@ (10043464 <COMM_Event_Handler+0x3d4>)
10043346:	6811      	ldr	r1, [r2, #0]
10043348:	6019      	str	r1, [r3, #0]
1004334a:	8892      	ldrh	r2, [r2, #4]
1004334c:	809a      	strh	r2, [r3, #4]
					USART_WriteTx(levent.month);
1004334e:	0004      	movs	r4, r0
10043350:	193b      	adds	r3, r7, r4
10043352:	781b      	ldrb	r3, [r3, #0]
10043354:	0018      	movs	r0, r3
10043356:	f002 fcdf 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.day);
1004335a:	193b      	adds	r3, r7, r4
1004335c:	785b      	ldrb	r3, [r3, #1]
1004335e:	0018      	movs	r0, r3
10043360:	f002 fcda 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.start);
10043364:	193b      	adds	r3, r7, r4
10043366:	789b      	ldrb	r3, [r3, #2]
10043368:	0018      	movs	r0, r3
1004336a:	f002 fcd5 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.stop);
1004336e:	193b      	adds	r3, r7, r4
10043370:	78db      	ldrb	r3, [r3, #3]
10043372:	0018      	movs	r0, r3
10043374:	f002 fcd0 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.folder);
10043378:	193b      	adds	r3, r7, r4
1004337a:	791b      	ldrb	r3, [r3, #4]
1004337c:	0018      	movs	r0, r3
1004337e:	f002 fccb 	bl	10045d18 <USART_WriteTx>
					USART_WriteTx(levent.track);
10043382:	193b      	adds	r3, r7, r4
10043384:	795b      	ldrb	r3, [r3, #5]
10043386:	0018      	movs	r0, r3
10043388:	f002 fcc6 	bl	10045d18 <USART_WriteTx>
					sent++;
1004338c:	4b34      	ldr	r3, [pc, #208]	@ (10043460 <COMM_Event_Handler+0x3d0>)
1004338e:	681b      	ldr	r3, [r3, #0]
10043390:	1c5a      	adds	r2, r3, #1
10043392:	4b33      	ldr	r3, [pc, #204]	@ (10043460 <COMM_Event_Handler+0x3d0>)
10043394:	601a      	str	r2, [r3, #0]
				for(int i = 0; i < size - sent; i++){
10043396:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
10043398:	3301      	adds	r3, #1
1004339a:	66fb      	str	r3, [r7, #108]	@ 0x6c
1004339c:	236a      	movs	r3, #106	@ 0x6a
1004339e:	18fb      	adds	r3, r7, r3
100433a0:	881a      	ldrh	r2, [r3, #0]
100433a2:	4b2f      	ldr	r3, [pc, #188]	@ (10043460 <COMM_Event_Handler+0x3d0>)
100433a4:	681b      	ldr	r3, [r3, #0]
100433a6:	1ad2      	subs	r2, r2, r3
100433a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
100433aa:	429a      	cmp	r2, r3
100433ac:	d8c8      	bhi.n	10043340 <COMM_Event_Handler+0x2b0>
				USART_WriteTx(LOGSDONE);
100433ae:	2003      	movs	r0, #3
100433b0:	f002 fcb2 	bl	10045d18 <USART_WriteTx>
				sent = 0;
100433b4:	4b2a      	ldr	r3, [pc, #168]	@ (10043460 <COMM_Event_Handler+0x3d0>)
100433b6:	2200      	movs	r2, #0
100433b8:	601a      	str	r2, [r3, #0]
				sendinglogs = 0;
100433ba:	4b1e      	ldr	r3, [pc, #120]	@ (10043434 <COMM_Event_Handler+0x3a4>)
100433bc:	2200      	movs	r2, #0
100433be:	701a      	strb	r2, [r3, #0]
				next = idle;
100433c0:	2376      	movs	r3, #118	@ 0x76
100433c2:	18fb      	adds	r3, r7, r3
100433c4:	2201      	movs	r2, #1
100433c6:	701a      	strb	r2, [r3, #0]
				transition = true;
100433c8:	2377      	movs	r3, #119	@ 0x77
100433ca:	18fb      	adds	r3, r7, r3
100433cc:	2201      	movs	r2, #1
100433ce:	701a      	strb	r2, [r3, #0]
				discountprintf("data sent");
100433d0:	4b25      	ldr	r3, [pc, #148]	@ (10043468 <COMM_Event_Handler+0x3d8>)
100433d2:	0018      	movs	r0, r3
100433d4:	f000 fa08 	bl	100437e8 <discountprintf>
		break;
100433d8:	e1b5      	b.n	10043746 <COMM_Event_Handler+0x6b6>
	case dccontrol:
		if(event.status == EVENT_USART){
100433da:	1d3b      	adds	r3, r7, #4
100433dc:	781b      	ldrb	r3, [r3, #0]
100433de:	b25b      	sxtb	r3, r3
100433e0:	2b06      	cmp	r3, #6
100433e2:	d000      	beq.n	100433e6 <COMM_Event_Handler+0x356>
100433e4:	e1b1      	b.n	1004374a <COMM_Event_Handler+0x6ba>
			FLASH_SetDCVol(FLASH_GetVolume(), (uint8_t)event.data);
100433e6:	f000 fb97 	bl	10043b18 <FLASH_GetVolume>
100433ea:	0003      	movs	r3, r0
100433ec:	001a      	movs	r2, r3
100433ee:	1d3b      	adds	r3, r7, #4
100433f0:	885b      	ldrh	r3, [r3, #2]
100433f2:	b2db      	uxtb	r3, r3
100433f4:	0019      	movs	r1, r3
100433f6:	0010      	movs	r0, r2
100433f8:	f000 fb4c 	bl	10043a94 <FLASH_SetDCVol>
			sprintf(text, "Storing volume %d", FLASH_GetDutyCycle());
100433fc:	f000 fba2 	bl	10043b44 <FLASH_GetDutyCycle>
10043400:	0003      	movs	r3, r0
10043402:	001a      	movs	r2, r3
10043404:	4912      	ldr	r1, [pc, #72]	@ (10043450 <COMM_Event_Handler+0x3c0>)
10043406:	2434      	movs	r4, #52	@ 0x34
10043408:	193b      	adds	r3, r7, r4
1004340a:	0018      	movs	r0, r3
1004340c:	f024 fa8e 	bl	1006792c <siprintf>
			discountprintf(text);
10043410:	193b      	adds	r3, r7, r4
10043412:	0018      	movs	r0, r3
10043414:	f000 f9e8 	bl	100437e8 <discountprintf>

			next = idle;
10043418:	2376      	movs	r3, #118	@ 0x76
1004341a:	18fb      	adds	r3, r7, r3
1004341c:	2201      	movs	r2, #1
1004341e:	701a      	strb	r2, [r3, #0]
			transition = true;
10043420:	2377      	movs	r3, #119	@ 0x77
10043422:	18fb      	adds	r3, r7, r3
10043424:	2201      	movs	r2, #1
10043426:	701a      	strb	r2, [r3, #0]
		}
		break;
10043428:	e18f      	b.n	1004374a <COMM_Event_Handler+0x6ba>
1004342a:	46c0      	nop			@ (mov r8, r8)
1004342c:	200003b5 	.word	0x200003b5
10043430:	10069354 	.word	0x10069354
10043434:	200003bc 	.word	0x200003bc
10043438:	10069394 	.word	0x10069394
1004343c:	10068b40 	.word	0x10068b40
10043440:	10068b58 	.word	0x10068b58
10043444:	10068b70 	.word	0x10068b70
10043448:	10068b88 	.word	0x10068b88
1004344c:	10068b9c 	.word	0x10068b9c
10043450:	10068bb8 	.word	0x10068bb8
10043454:	200003bd 	.word	0x200003bd
10043458:	10068bcc 	.word	0x10068bcc
1004345c:	10068be4 	.word	0x10068be4
10043460:	200003c0 	.word	0x200003c0
10043464:	10068c9c 	.word	0x10068c9c
10043468:	10068bfc 	.word	0x10068bfc
	case schedulecontrol:
		static uint8_t numevents;
		static scheduleEvent sevent;
		if(event.status == EVENT_ENTRY){
1004346c:	1d3b      	adds	r3, r7, #4
1004346e:	781b      	ldrb	r3, [r3, #0]
10043470:	b25b      	sxtb	r3, r3
10043472:	2b02      	cmp	r3, #2
10043474:	d000      	beq.n	10043478 <COMM_Event_Handler+0x3e8>
10043476:	e16a      	b.n	1004374e <COMM_Event_Handler+0x6be>
			discountprintf("receiving schedule");
10043478:	4bcf      	ldr	r3, [pc, #828]	@ (100437b8 <COMM_Event_Handler+0x728>)
1004347a:	0018      	movs	r0, r3
1004347c:	f000 f9b4 	bl	100437e8 <discountprintf>
			sevent = (scheduleEvent){0,0,0,0,0,0};
10043480:	4bce      	ldr	r3, [pc, #824]	@ (100437bc <COMM_Event_Handler+0x72c>)
10043482:	0018      	movs	r0, r3
10043484:	2306      	movs	r3, #6
10043486:	001a      	movs	r2, r3
10043488:	2100      	movs	r1, #0
1004348a:	f024 fb6b 	bl	10067b64 <memset>
			FLASH_ClearSchedule();
1004348e:	f000 fd2f 	bl	10043ef0 <FLASH_ClearSchedule>
			next = schedulemonth;
10043492:	2376      	movs	r3, #118	@ 0x76
10043494:	18fb      	adds	r3, r7, r3
10043496:	2209      	movs	r2, #9
10043498:	701a      	strb	r2, [r3, #0]
			transition = true;
1004349a:	2377      	movs	r3, #119	@ 0x77
1004349c:	18fb      	adds	r3, r7, r3
1004349e:	2201      	movs	r2, #1
100434a0:	701a      	strb	r2, [r3, #0]
			numevents = 0;
100434a2:	4bc7      	ldr	r3, [pc, #796]	@ (100437c0 <COMM_Event_Handler+0x730>)
100434a4:	2200      	movs	r2, #0
100434a6:	701a      	strb	r2, [r3, #0]
		}
		break;
100434a8:	e151      	b.n	1004374e <COMM_Event_Handler+0x6be>
	case schedulemonth:
		if(event.status == EVENT_USART){
100434aa:	1d3b      	adds	r3, r7, #4
100434ac:	781b      	ldrb	r3, [r3, #0]
100434ae:	b25b      	sxtb	r3, r3
100434b0:	2b06      	cmp	r3, #6
100434b2:	d000      	beq.n	100434b6 <COMM_Event_Handler+0x426>
100434b4:	e14d      	b.n	10043752 <COMM_Event_Handler+0x6c2>
			if(event.data == SCHEDULEEND){
100434b6:	1d3b      	adds	r3, r7, #4
100434b8:	885b      	ldrh	r3, [r3, #2]
100434ba:	2b0d      	cmp	r3, #13
100434bc:	d11a      	bne.n	100434f4 <COMM_Event_Handler+0x464>
				discountprintf("schedule complete");
100434be:	4bc1      	ldr	r3, [pc, #772]	@ (100437c4 <COMM_Event_Handler+0x734>)
100434c0:	0018      	movs	r0, r3
100434c2:	f000 f991 	bl	100437e8 <discountprintf>
				next = idle;
100434c6:	2376      	movs	r3, #118	@ 0x76
100434c8:	18fb      	adds	r3, r7, r3
100434ca:	2201      	movs	r2, #1
100434cc:	701a      	strb	r2, [r3, #0]
				transition = true;
100434ce:	2377      	movs	r3, #119	@ 0x77
100434d0:	18fb      	adds	r3, r7, r3
100434d2:	2201      	movs	r2, #1
100434d4:	701a      	strb	r2, [r3, #0]
				if(!(sevent.month == 0 && sevent.day == 0)){
100434d6:	4bb9      	ldr	r3, [pc, #740]	@ (100437bc <COMM_Event_Handler+0x72c>)
100434d8:	781b      	ldrb	r3, [r3, #0]
100434da:	2b00      	cmp	r3, #0
100434dc:	d104      	bne.n	100434e8 <COMM_Event_Handler+0x458>
100434de:	4bb7      	ldr	r3, [pc, #732]	@ (100437bc <COMM_Event_Handler+0x72c>)
100434e0:	785b      	ldrb	r3, [r3, #1]
100434e2:	2b00      	cmp	r3, #0
100434e4:	d100      	bne.n	100434e8 <COMM_Event_Handler+0x458>
100434e6:	e134      	b.n	10043752 <COMM_Event_Handler+0x6c2>
					FLASH_AppendSchedule(sevent);
100434e8:	4bb4      	ldr	r3, [pc, #720]	@ (100437bc <COMM_Event_Handler+0x72c>)
100434ea:	6818      	ldr	r0, [r3, #0]
100434ec:	6859      	ldr	r1, [r3, #4]
100434ee:	f000 fc19 	bl	10043d24 <FLASH_AppendSchedule>
				//store month here
				next = scheduleday;
				transition = true;
			}
		}
		break;
100434f2:	e12e      	b.n	10043752 <COMM_Event_Handler+0x6c2>
			} else if(numevents > MAXSCHEDULEEVENTS){
100434f4:	4bb2      	ldr	r3, [pc, #712]	@ (100437c0 <COMM_Event_Handler+0x730>)
100434f6:	781b      	ldrb	r3, [r3, #0]
100434f8:	2bb4      	cmp	r3, #180	@ 0xb4
100434fa:	d91c      	bls.n	10043536 <COMM_Event_Handler+0x4a6>
				discountprintf("schedule forced to complete");
100434fc:	4bb2      	ldr	r3, [pc, #712]	@ (100437c8 <COMM_Event_Handler+0x738>)
100434fe:	0018      	movs	r0, r3
10043500:	f000 f972 	bl	100437e8 <discountprintf>
				if(!(sevent.month == 0 && sevent.day == 0)){
10043504:	4bad      	ldr	r3, [pc, #692]	@ (100437bc <COMM_Event_Handler+0x72c>)
10043506:	781b      	ldrb	r3, [r3, #0]
10043508:	2b00      	cmp	r3, #0
1004350a:	d103      	bne.n	10043514 <COMM_Event_Handler+0x484>
1004350c:	4bab      	ldr	r3, [pc, #684]	@ (100437bc <COMM_Event_Handler+0x72c>)
1004350e:	785b      	ldrb	r3, [r3, #1]
10043510:	2b00      	cmp	r3, #0
10043512:	d004      	beq.n	1004351e <COMM_Event_Handler+0x48e>
					FLASH_AppendSchedule(sevent);
10043514:	4ba9      	ldr	r3, [pc, #676]	@ (100437bc <COMM_Event_Handler+0x72c>)
10043516:	6818      	ldr	r0, [r3, #0]
10043518:	6859      	ldr	r1, [r3, #4]
1004351a:	f000 fc03 	bl	10043d24 <FLASH_AppendSchedule>
				next = scheduleend;
1004351e:	2376      	movs	r3, #118	@ 0x76
10043520:	18fb      	adds	r3, r7, r3
10043522:	220f      	movs	r2, #15
10043524:	701a      	strb	r2, [r3, #0]
				transition = true;
10043526:	2377      	movs	r3, #119	@ 0x77
10043528:	18fb      	adds	r3, r7, r3
1004352a:	2201      	movs	r2, #1
1004352c:	701a      	strb	r2, [r3, #0]
				USART_WriteTx(SCHEDULEEND);//please stop sending me the schedule
1004352e:	200d      	movs	r0, #13
10043530:	f002 fbf2 	bl	10045d18 <USART_WriteTx>
		break;
10043534:	e10d      	b.n	10043752 <COMM_Event_Handler+0x6c2>
				if(!(sevent.month == 0 && sevent.day == 0)){
10043536:	4ba1      	ldr	r3, [pc, #644]	@ (100437bc <COMM_Event_Handler+0x72c>)
10043538:	781b      	ldrb	r3, [r3, #0]
1004353a:	2b00      	cmp	r3, #0
1004353c:	d103      	bne.n	10043546 <COMM_Event_Handler+0x4b6>
1004353e:	4b9f      	ldr	r3, [pc, #636]	@ (100437bc <COMM_Event_Handler+0x72c>)
10043540:	785b      	ldrb	r3, [r3, #1]
10043542:	2b00      	cmp	r3, #0
10043544:	d004      	beq.n	10043550 <COMM_Event_Handler+0x4c0>
					FLASH_AppendSchedule(sevent);
10043546:	4b9d      	ldr	r3, [pc, #628]	@ (100437bc <COMM_Event_Handler+0x72c>)
10043548:	6818      	ldr	r0, [r3, #0]
1004354a:	6859      	ldr	r1, [r3, #4]
1004354c:	f000 fbea 	bl	10043d24 <FLASH_AppendSchedule>
				sevent.month = event.data;
10043550:	1d3b      	adds	r3, r7, #4
10043552:	885b      	ldrh	r3, [r3, #2]
10043554:	b2da      	uxtb	r2, r3
10043556:	4b99      	ldr	r3, [pc, #612]	@ (100437bc <COMM_Event_Handler+0x72c>)
10043558:	701a      	strb	r2, [r3, #0]
				sprintf(text, "Month: %d", event.data);
1004355a:	1d3b      	adds	r3, r7, #4
1004355c:	885b      	ldrh	r3, [r3, #2]
1004355e:	001a      	movs	r2, r3
10043560:	499a      	ldr	r1, [pc, #616]	@ (100437cc <COMM_Event_Handler+0x73c>)
10043562:	2434      	movs	r4, #52	@ 0x34
10043564:	193b      	adds	r3, r7, r4
10043566:	0018      	movs	r0, r3
10043568:	f024 f9e0 	bl	1006792c <siprintf>
				discountprintf(text);
1004356c:	193b      	adds	r3, r7, r4
1004356e:	0018      	movs	r0, r3
10043570:	f000 f93a 	bl	100437e8 <discountprintf>
				next = scheduleday;
10043574:	2376      	movs	r3, #118	@ 0x76
10043576:	18fb      	adds	r3, r7, r3
10043578:	220a      	movs	r2, #10
1004357a:	701a      	strb	r2, [r3, #0]
				transition = true;
1004357c:	2377      	movs	r3, #119	@ 0x77
1004357e:	18fb      	adds	r3, r7, r3
10043580:	2201      	movs	r2, #1
10043582:	701a      	strb	r2, [r3, #0]
		break;
10043584:	e0e5      	b.n	10043752 <COMM_Event_Handler+0x6c2>
	case scheduleday:
		if(event.status == EVENT_USART){
10043586:	1d3b      	adds	r3, r7, #4
10043588:	781b      	ldrb	r3, [r3, #0]
1004358a:	b25b      	sxtb	r3, r3
1004358c:	2b06      	cmp	r3, #6
1004358e:	d000      	beq.n	10043592 <COMM_Event_Handler+0x502>
10043590:	e0e1      	b.n	10043756 <COMM_Event_Handler+0x6c6>
			sevent.day = event.data;
10043592:	1d3b      	adds	r3, r7, #4
10043594:	885b      	ldrh	r3, [r3, #2]
10043596:	b2da      	uxtb	r2, r3
10043598:	4b88      	ldr	r3, [pc, #544]	@ (100437bc <COMM_Event_Handler+0x72c>)
1004359a:	705a      	strb	r2, [r3, #1]
			sprintf(text, "Day: %d", event.data);
1004359c:	1d3b      	adds	r3, r7, #4
1004359e:	885b      	ldrh	r3, [r3, #2]
100435a0:	001a      	movs	r2, r3
100435a2:	498b      	ldr	r1, [pc, #556]	@ (100437d0 <COMM_Event_Handler+0x740>)
100435a4:	2434      	movs	r4, #52	@ 0x34
100435a6:	193b      	adds	r3, r7, r4
100435a8:	0018      	movs	r0, r3
100435aa:	f024 f9bf 	bl	1006792c <siprintf>
			discountprintf(text);
100435ae:	193b      	adds	r3, r7, r4
100435b0:	0018      	movs	r0, r3
100435b2:	f000 f919 	bl	100437e8 <discountprintf>
			next = schedulestart;
100435b6:	2376      	movs	r3, #118	@ 0x76
100435b8:	18fb      	adds	r3, r7, r3
100435ba:	220b      	movs	r2, #11
100435bc:	701a      	strb	r2, [r3, #0]
			transition = true;
100435be:	2377      	movs	r3, #119	@ 0x77
100435c0:	18fb      	adds	r3, r7, r3
100435c2:	2201      	movs	r2, #1
100435c4:	701a      	strb	r2, [r3, #0]
		}
		break;
100435c6:	e0c6      	b.n	10043756 <COMM_Event_Handler+0x6c6>
	case schedulestart:
		if(event.status == EVENT_USART){
100435c8:	1d3b      	adds	r3, r7, #4
100435ca:	781b      	ldrb	r3, [r3, #0]
100435cc:	b25b      	sxtb	r3, r3
100435ce:	2b06      	cmp	r3, #6
100435d0:	d000      	beq.n	100435d4 <COMM_Event_Handler+0x544>
100435d2:	e0c2      	b.n	1004375a <COMM_Event_Handler+0x6ca>
			sevent.start =  event.data;
100435d4:	1d3b      	adds	r3, r7, #4
100435d6:	885b      	ldrh	r3, [r3, #2]
100435d8:	b2da      	uxtb	r2, r3
100435da:	4b78      	ldr	r3, [pc, #480]	@ (100437bc <COMM_Event_Handler+0x72c>)
100435dc:	709a      	strb	r2, [r3, #2]
			sprintf(text, "start time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
100435de:	1d3b      	adds	r3, r7, #4
100435e0:	885b      	ldrh	r3, [r3, #2]
100435e2:	10db      	asrs	r3, r3, #3
100435e4:	221f      	movs	r2, #31
100435e6:	4013      	ands	r3, r2
100435e8:	001c      	movs	r4, r3
100435ea:	1d3b      	adds	r3, r7, #4
100435ec:	885b      	ldrh	r3, [r3, #2]
100435ee:	001a      	movs	r2, r3
100435f0:	2303      	movs	r3, #3
100435f2:	401a      	ands	r2, r3
100435f4:	0013      	movs	r3, r2
100435f6:	011b      	lsls	r3, r3, #4
100435f8:	1a9b      	subs	r3, r3, r2
100435fa:	4976      	ldr	r1, [pc, #472]	@ (100437d4 <COMM_Event_Handler+0x744>)
100435fc:	2534      	movs	r5, #52	@ 0x34
100435fe:	1978      	adds	r0, r7, r5
10043600:	0022      	movs	r2, r4
10043602:	f024 f993 	bl	1006792c <siprintf>
			discountprintf(text);
10043606:	197b      	adds	r3, r7, r5
10043608:	0018      	movs	r0, r3
1004360a:	f000 f8ed 	bl	100437e8 <discountprintf>
			next = schedulestop;
1004360e:	2376      	movs	r3, #118	@ 0x76
10043610:	18fb      	adds	r3, r7, r3
10043612:	220c      	movs	r2, #12
10043614:	701a      	strb	r2, [r3, #0]
			transition = true;
10043616:	2377      	movs	r3, #119	@ 0x77
10043618:	18fb      	adds	r3, r7, r3
1004361a:	2201      	movs	r2, #1
1004361c:	701a      	strb	r2, [r3, #0]
		}
		break;
1004361e:	e09c      	b.n	1004375a <COMM_Event_Handler+0x6ca>
	case schedulestop:
		if(event.status == EVENT_USART){
10043620:	1d3b      	adds	r3, r7, #4
10043622:	781b      	ldrb	r3, [r3, #0]
10043624:	b25b      	sxtb	r3, r3
10043626:	2b06      	cmp	r3, #6
10043628:	d000      	beq.n	1004362c <COMM_Event_Handler+0x59c>
1004362a:	e098      	b.n	1004375e <COMM_Event_Handler+0x6ce>
			sevent.stop = event.data;
1004362c:	1d3b      	adds	r3, r7, #4
1004362e:	885b      	ldrh	r3, [r3, #2]
10043630:	b2da      	uxtb	r2, r3
10043632:	4b62      	ldr	r3, [pc, #392]	@ (100437bc <COMM_Event_Handler+0x72c>)
10043634:	70da      	strb	r2, [r3, #3]
			sprintf(text, "end time: %d:%d", (event.data&0b11111000)>>3, (event.data & 0b011)*15);
10043636:	1d3b      	adds	r3, r7, #4
10043638:	885b      	ldrh	r3, [r3, #2]
1004363a:	10db      	asrs	r3, r3, #3
1004363c:	221f      	movs	r2, #31
1004363e:	4013      	ands	r3, r2
10043640:	001c      	movs	r4, r3
10043642:	1d3b      	adds	r3, r7, #4
10043644:	885b      	ldrh	r3, [r3, #2]
10043646:	001a      	movs	r2, r3
10043648:	2303      	movs	r3, #3
1004364a:	401a      	ands	r2, r3
1004364c:	0013      	movs	r3, r2
1004364e:	011b      	lsls	r3, r3, #4
10043650:	1a9b      	subs	r3, r3, r2
10043652:	4961      	ldr	r1, [pc, #388]	@ (100437d8 <COMM_Event_Handler+0x748>)
10043654:	2534      	movs	r5, #52	@ 0x34
10043656:	1978      	adds	r0, r7, r5
10043658:	0022      	movs	r2, r4
1004365a:	f024 f967 	bl	1006792c <siprintf>
			discountprintf(text);
1004365e:	197b      	adds	r3, r7, r5
10043660:	0018      	movs	r0, r3
10043662:	f000 f8c1 	bl	100437e8 <discountprintf>
			next = schedulefolder;
10043666:	2376      	movs	r3, #118	@ 0x76
10043668:	18fb      	adds	r3, r7, r3
1004366a:	220d      	movs	r2, #13
1004366c:	701a      	strb	r2, [r3, #0]
			transition = true;
1004366e:	2377      	movs	r3, #119	@ 0x77
10043670:	18fb      	adds	r3, r7, r3
10043672:	2201      	movs	r2, #1
10043674:	701a      	strb	r2, [r3, #0]
		}
		break;
10043676:	e072      	b.n	1004375e <COMM_Event_Handler+0x6ce>
	case schedulefolder:
		if(event.status == EVENT_USART){
10043678:	1d3b      	adds	r3, r7, #4
1004367a:	781b      	ldrb	r3, [r3, #0]
1004367c:	b25b      	sxtb	r3, r3
1004367e:	2b06      	cmp	r3, #6
10043680:	d000      	beq.n	10043684 <COMM_Event_Handler+0x5f4>
10043682:	e06e      	b.n	10043762 <COMM_Event_Handler+0x6d2>
			sevent.folder = event.data;
10043684:	1d3b      	adds	r3, r7, #4
10043686:	885b      	ldrh	r3, [r3, #2]
10043688:	b2da      	uxtb	r2, r3
1004368a:	4b4c      	ldr	r3, [pc, #304]	@ (100437bc <COMM_Event_Handler+0x72c>)
1004368c:	711a      	strb	r2, [r3, #4]
			sprintf(text, "folder#: %d", event.data);
1004368e:	1d3b      	adds	r3, r7, #4
10043690:	885b      	ldrh	r3, [r3, #2]
10043692:	001a      	movs	r2, r3
10043694:	4951      	ldr	r1, [pc, #324]	@ (100437dc <COMM_Event_Handler+0x74c>)
10043696:	2434      	movs	r4, #52	@ 0x34
10043698:	193b      	adds	r3, r7, r4
1004369a:	0018      	movs	r0, r3
1004369c:	f024 f946 	bl	1006792c <siprintf>
			discountprintf(text);
100436a0:	193b      	adds	r3, r7, r4
100436a2:	0018      	movs	r0, r3
100436a4:	f000 f8a0 	bl	100437e8 <discountprintf>
			next = scheduletrack;
100436a8:	2376      	movs	r3, #118	@ 0x76
100436aa:	18fb      	adds	r3, r7, r3
100436ac:	220e      	movs	r2, #14
100436ae:	701a      	strb	r2, [r3, #0]
			transition = true;
100436b0:	2377      	movs	r3, #119	@ 0x77
100436b2:	18fb      	adds	r3, r7, r3
100436b4:	2201      	movs	r2, #1
100436b6:	701a      	strb	r2, [r3, #0]
		}
		break;
100436b8:	e053      	b.n	10043762 <COMM_Event_Handler+0x6d2>
	case scheduletrack:
		if(event.status == EVENT_USART){
100436ba:	1d3b      	adds	r3, r7, #4
100436bc:	781b      	ldrb	r3, [r3, #0]
100436be:	b25b      	sxtb	r3, r3
100436c0:	2b06      	cmp	r3, #6
100436c2:	d150      	bne.n	10043766 <COMM_Event_Handler+0x6d6>
			sevent.track = event.data;
100436c4:	1d3b      	adds	r3, r7, #4
100436c6:	885b      	ldrh	r3, [r3, #2]
100436c8:	b2da      	uxtb	r2, r3
100436ca:	4b3c      	ldr	r3, [pc, #240]	@ (100437bc <COMM_Event_Handler+0x72c>)
100436cc:	715a      	strb	r2, [r3, #5]
			sprintf(text, "track#: %d", event.data);
100436ce:	1d3b      	adds	r3, r7, #4
100436d0:	885b      	ldrh	r3, [r3, #2]
100436d2:	001a      	movs	r2, r3
100436d4:	4942      	ldr	r1, [pc, #264]	@ (100437e0 <COMM_Event_Handler+0x750>)
100436d6:	2434      	movs	r4, #52	@ 0x34
100436d8:	193b      	adds	r3, r7, r4
100436da:	0018      	movs	r0, r3
100436dc:	f024 f926 	bl	1006792c <siprintf>
			discountprintf(text);
100436e0:	193b      	adds	r3, r7, r4
100436e2:	0018      	movs	r0, r3
100436e4:	f000 f880 	bl	100437e8 <discountprintf>
			//record end time here
			next = schedulemonth;
100436e8:	2376      	movs	r3, #118	@ 0x76
100436ea:	18fb      	adds	r3, r7, r3
100436ec:	2209      	movs	r2, #9
100436ee:	701a      	strb	r2, [r3, #0]
			transition = true;
100436f0:	2377      	movs	r3, #119	@ 0x77
100436f2:	18fb      	adds	r3, r7, r3
100436f4:	2201      	movs	r2, #1
100436f6:	701a      	strb	r2, [r3, #0]
			numevents++;
100436f8:	4b31      	ldr	r3, [pc, #196]	@ (100437c0 <COMM_Event_Handler+0x730>)
100436fa:	781b      	ldrb	r3, [r3, #0]
100436fc:	3301      	adds	r3, #1
100436fe:	b2da      	uxtb	r2, r3
10043700:	4b2f      	ldr	r3, [pc, #188]	@ (100437c0 <COMM_Event_Handler+0x730>)
10043702:	701a      	strb	r2, [r3, #0]
		}
		break;
10043704:	e02f      	b.n	10043766 <COMM_Event_Handler+0x6d6>
	case scheduleend:
		if(event.status == EVENT_USART){
10043706:	1d3b      	adds	r3, r7, #4
10043708:	781b      	ldrb	r3, [r3, #0]
1004370a:	b25b      	sxtb	r3, r3
1004370c:	2b06      	cmp	r3, #6
1004370e:	d12c      	bne.n	1004376a <COMM_Event_Handler+0x6da>
			if(event.data == SCHEDULEEND){
10043710:	1d3b      	adds	r3, r7, #4
10043712:	885b      	ldrh	r3, [r3, #2]
10043714:	2b0d      	cmp	r3, #13
10043716:	d128      	bne.n	1004376a <COMM_Event_Handler+0x6da>
				next = idle;
10043718:	2376      	movs	r3, #118	@ 0x76
1004371a:	18fb      	adds	r3, r7, r3
1004371c:	2201      	movs	r2, #1
1004371e:	701a      	strb	r2, [r3, #0]
				transition = true;
10043720:	2377      	movs	r3, #119	@ 0x77
10043722:	18fb      	adds	r3, r7, r3
10043724:	2201      	movs	r2, #1
10043726:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
10043728:	e01f      	b.n	1004376a <COMM_Event_Handler+0x6da>
	default:
		break;
1004372a:	46c0      	nop			@ (mov r8, r8)
1004372c:	e01e      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
1004372e:	46c0      	nop			@ (mov r8, r8)
10043730:	e01c      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
10043732:	46c0      	nop			@ (mov r8, r8)
10043734:	e01a      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
10043736:	46c0      	nop			@ (mov r8, r8)
10043738:	e018      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
1004373a:	46c0      	nop			@ (mov r8, r8)
1004373c:	e016      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
1004373e:	46c0      	nop			@ (mov r8, r8)
10043740:	e014      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
10043742:	46c0      	nop			@ (mov r8, r8)
10043744:	e012      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
10043746:	46c0      	nop			@ (mov r8, r8)
10043748:	e010      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
1004374a:	46c0      	nop			@ (mov r8, r8)
1004374c:	e00e      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
1004374e:	46c0      	nop			@ (mov r8, r8)
10043750:	e00c      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
10043752:	46c0      	nop			@ (mov r8, r8)
10043754:	e00a      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
10043756:	46c0      	nop			@ (mov r8, r8)
10043758:	e008      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
1004375a:	46c0      	nop			@ (mov r8, r8)
1004375c:	e006      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
1004375e:	46c0      	nop			@ (mov r8, r8)
10043760:	e004      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
10043762:	46c0      	nop			@ (mov r8, r8)
10043764:	e002      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
10043766:	46c0      	nop			@ (mov r8, r8)
10043768:	e000      	b.n	1004376c <COMM_Event_Handler+0x6dc>
		break;
1004376a:	46c0      	nop			@ (mov r8, r8)
	}
	if(transition){
1004376c:	2377      	movs	r3, #119	@ 0x77
1004376e:	18fb      	adds	r3, r7, r3
10043770:	781b      	ldrb	r3, [r3, #0]
10043772:	2b00      	cmp	r3, #0
10043774:	d01a      	beq.n	100437ac <COMM_Event_Handler+0x71c>
		COMM_Event_Handler((Event_t){EVENT_EXIT});
10043776:	2110      	movs	r1, #16
10043778:	187b      	adds	r3, r7, r1
1004377a:	2200      	movs	r2, #0
1004377c:	601a      	str	r2, [r3, #0]
1004377e:	187b      	adds	r3, r7, r1
10043780:	2203      	movs	r2, #3
10043782:	701a      	strb	r2, [r3, #0]
10043784:	187b      	adds	r3, r7, r1
10043786:	6818      	ldr	r0, [r3, #0]
10043788:	f7ff fc82 	bl	10043090 <COMM_Event_Handler>
		commSM = next;
1004378c:	4b15      	ldr	r3, [pc, #84]	@ (100437e4 <COMM_Event_Handler+0x754>)
1004378e:	2276      	movs	r2, #118	@ 0x76
10043790:	18ba      	adds	r2, r7, r2
10043792:	7812      	ldrb	r2, [r2, #0]
10043794:	701a      	strb	r2, [r3, #0]
		COMM_Event_Handler((Event_t){EVENT_ENTRY});
10043796:	210c      	movs	r1, #12
10043798:	187b      	adds	r3, r7, r1
1004379a:	2200      	movs	r2, #0
1004379c:	601a      	str	r2, [r3, #0]
1004379e:	187b      	adds	r3, r7, r1
100437a0:	2202      	movs	r2, #2
100437a2:	701a      	strb	r2, [r3, #0]
100437a4:	187b      	adds	r3, r7, r1
100437a6:	6818      	ldr	r0, [r3, #0]
100437a8:	f7ff fc72 	bl	10043090 <COMM_Event_Handler>
	}
	return 1;
100437ac:	2301      	movs	r3, #1
}
100437ae:	0018      	movs	r0, r3
100437b0:	46bd      	mov	sp, r7
100437b2:	b01e      	add	sp, #120	@ 0x78
100437b4:	bdb0      	pop	{r4, r5, r7, pc}
100437b6:	46c0      	nop			@ (mov r8, r8)
100437b8:	10068c08 	.word	0x10068c08
100437bc:	200003c4 	.word	0x200003c4
100437c0:	200003ca 	.word	0x200003ca
100437c4:	10068c1c 	.word	0x10068c1c
100437c8:	10068c30 	.word	0x10068c30
100437cc:	10068c4c 	.word	0x10068c4c
100437d0:	10068c58 	.word	0x10068c58
100437d4:	10068c60 	.word	0x10068c60
100437d8:	10068c74 	.word	0x10068c74
100437dc:	10068c84 	.word	0x10068c84
100437e0:	10068c90 	.word	0x10068c90
100437e4:	200003b5 	.word	0x200003b5

100437e8 <discountprintf>:
#include "DiscountIO.h"

#define DEBUGPRINT   	0x0E
#define DEBUGPRINTEND  	'\n'

int	discountprintf (const char * text){
100437e8:	b580      	push	{r7, lr}
100437ea:	b084      	sub	sp, #16
100437ec:	af00      	add	r7, sp, #0
100437ee:	6078      	str	r0, [r7, #4]
	int length = strlen(text);
100437f0:	687b      	ldr	r3, [r7, #4]
100437f2:	0018      	movs	r0, r3
100437f4:	f7fc fd12 	bl	1004021c <strlen>
100437f8:	0003      	movs	r3, r0
100437fa:	60bb      	str	r3, [r7, #8]
	USART_WriteTx(DEBUGPRINT);
100437fc:	200e      	movs	r0, #14
100437fe:	f002 fa8b 	bl	10045d18 <USART_WriteTx>
	for(int i = 0; i < length; i++){
10043802:	2300      	movs	r3, #0
10043804:	60fb      	str	r3, [r7, #12]
10043806:	e009      	b.n	1004381c <discountprintf+0x34>
		USART_WriteTx(text[i]);
10043808:	68fb      	ldr	r3, [r7, #12]
1004380a:	687a      	ldr	r2, [r7, #4]
1004380c:	18d3      	adds	r3, r2, r3
1004380e:	781b      	ldrb	r3, [r3, #0]
10043810:	0018      	movs	r0, r3
10043812:	f002 fa81 	bl	10045d18 <USART_WriteTx>
	for(int i = 0; i < length; i++){
10043816:	68fb      	ldr	r3, [r7, #12]
10043818:	3301      	adds	r3, #1
1004381a:	60fb      	str	r3, [r7, #12]
1004381c:	68fa      	ldr	r2, [r7, #12]
1004381e:	68bb      	ldr	r3, [r7, #8]
10043820:	429a      	cmp	r2, r3
10043822:	dbf1      	blt.n	10043808 <discountprintf+0x20>
	}
	USART_WriteTx(DEBUGPRINTEND);
10043824:	200a      	movs	r0, #10
10043826:	f002 fa77 	bl	10045d18 <USART_WriteTx>
	return 1;
1004382a:	2301      	movs	r3, #1
}
1004382c:	0018      	movs	r0, r3
1004382e:	46bd      	mov	sp, r7
10043830:	b004      	add	sp, #16
10043832:	bd80      	pop	{r7, pc}

10043834 <FIFO_Create>:

//----------------------------------------Private Functions--------------------------------------


//----------------------------------------Public Functions---------------------------------------
FIFO FIFO_Create(void){
10043834:	b580      	push	{r7, lr}
10043836:	b082      	sub	sp, #8
10043838:	af00      	add	r7, sp, #0
	FIFO new = malloc(sizeof(struct _FIFO));
1004383a:	200c      	movs	r0, #12
1004383c:	f023 fe8c 	bl	10067558 <malloc>
10043840:	0003      	movs	r3, r0
10043842:	607b      	str	r3, [r7, #4]
	if(new == NULL){
10043844:	687b      	ldr	r3, [r7, #4]
10043846:	2b00      	cmp	r3, #0
10043848:	d101      	bne.n	1004384e <FIFO_Create+0x1a>
		return NULL;
1004384a:	2300      	movs	r3, #0
1004384c:	e009      	b.n	10043862 <FIFO_Create+0x2e>
	}
	new->first = NULL;
1004384e:	687b      	ldr	r3, [r7, #4]
10043850:	2200      	movs	r2, #0
10043852:	601a      	str	r2, [r3, #0]
	new->last = NULL;
10043854:	687b      	ldr	r3, [r7, #4]
10043856:	2200      	movs	r2, #0
10043858:	605a      	str	r2, [r3, #4]
	new->size = 0;
1004385a:	687b      	ldr	r3, [r7, #4]
1004385c:	2200      	movs	r2, #0
1004385e:	811a      	strh	r2, [r3, #8]
	return new;
10043860:	687b      	ldr	r3, [r7, #4]
}
10043862:	0018      	movs	r0, r3
10043864:	46bd      	mov	sp, r7
10043866:	b002      	add	sp, #8
10043868:	bd80      	pop	{r7, pc}

1004386a <FIFO_Enqueue>:
	}
	free(doomed);
	return 1;
}

uint8_t FIFO_Enqueue(FIFO list, Event_t event){
1004386a:	b580      	push	{r7, lr}
1004386c:	b084      	sub	sp, #16
1004386e:	af00      	add	r7, sp, #0
10043870:	6078      	str	r0, [r7, #4]
10043872:	003b      	movs	r3, r7
10043874:	6019      	str	r1, [r3, #0]
	if(list == NULL){
10043876:	687b      	ldr	r3, [r7, #4]
10043878:	2b00      	cmp	r3, #0
1004387a:	d101      	bne.n	10043880 <FIFO_Enqueue+0x16>
		return 0;
1004387c:	2300      	movs	r3, #0
1004387e:	e026      	b.n	100438ce <FIFO_Enqueue+0x64>
	}
	node* new = malloc(sizeof(node));
10043880:	2008      	movs	r0, #8
10043882:	f023 fe69 	bl	10067558 <malloc>
10043886:	0003      	movs	r3, r0
10043888:	60fb      	str	r3, [r7, #12]
	if(new == NULL){
1004388a:	68fb      	ldr	r3, [r7, #12]
1004388c:	2b00      	cmp	r3, #0
1004388e:	d101      	bne.n	10043894 <FIFO_Enqueue+0x2a>
		return 0;
10043890:	2300      	movs	r3, #0
10043892:	e01c      	b.n	100438ce <FIFO_Enqueue+0x64>
	}
	new->event = event;
10043894:	68fb      	ldr	r3, [r7, #12]
10043896:	003a      	movs	r2, r7
10043898:	6812      	ldr	r2, [r2, #0]
1004389a:	601a      	str	r2, [r3, #0]
	new->next = NULL;
1004389c:	68fb      	ldr	r3, [r7, #12]
1004389e:	2200      	movs	r2, #0
100438a0:	605a      	str	r2, [r3, #4]
	if(list->last != NULL){//predefined list
100438a2:	687b      	ldr	r3, [r7, #4]
100438a4:	685b      	ldr	r3, [r3, #4]
100438a6:	2b00      	cmp	r3, #0
100438a8:	d004      	beq.n	100438b4 <FIFO_Enqueue+0x4a>
		list->last->next = new;
100438aa:	687b      	ldr	r3, [r7, #4]
100438ac:	685b      	ldr	r3, [r3, #4]
100438ae:	68fa      	ldr	r2, [r7, #12]
100438b0:	605a      	str	r2, [r3, #4]
100438b2:	e002      	b.n	100438ba <FIFO_Enqueue+0x50>
	}else{//new list
		list->first = new;
100438b4:	687b      	ldr	r3, [r7, #4]
100438b6:	68fa      	ldr	r2, [r7, #12]
100438b8:	601a      	str	r2, [r3, #0]
	}
	list->last = new;
100438ba:	687b      	ldr	r3, [r7, #4]
100438bc:	68fa      	ldr	r2, [r7, #12]
100438be:	605a      	str	r2, [r3, #4]
	list->size++;
100438c0:	687b      	ldr	r3, [r7, #4]
100438c2:	891b      	ldrh	r3, [r3, #8]
100438c4:	3301      	adds	r3, #1
100438c6:	b29a      	uxth	r2, r3
100438c8:	687b      	ldr	r3, [r7, #4]
100438ca:	811a      	strh	r2, [r3, #8]
	return 1;
100438cc:	2301      	movs	r3, #1
}
100438ce:	0018      	movs	r0, r3
100438d0:	46bd      	mov	sp, r7
100438d2:	b004      	add	sp, #16
100438d4:	bd80      	pop	{r7, pc}

100438d6 <FIFO_Dequeue>:

Event_t FIFO_Dequeue(FIFO list){
100438d6:	b590      	push	{r4, r7, lr}
100438d8:	b089      	sub	sp, #36	@ 0x24
100438da:	af00      	add	r7, sp, #0
100438dc:	6078      	str	r0, [r7, #4]
	if(list == NULL){
100438de:	687b      	ldr	r3, [r7, #4]
100438e0:	2b00      	cmp	r3, #0
100438e2:	d107      	bne.n	100438f4 <FIFO_Dequeue+0x1e>
		return (Event_t){EVENT_ERROR, 0};
100438e4:	2118      	movs	r1, #24
100438e6:	187b      	adds	r3, r7, r1
100438e8:	22ff      	movs	r2, #255	@ 0xff
100438ea:	701a      	strb	r2, [r3, #0]
100438ec:	187b      	adds	r3, r7, r1
100438ee:	2200      	movs	r2, #0
100438f0:	805a      	strh	r2, [r3, #2]
100438f2:	e030      	b.n	10043956 <FIFO_Dequeue+0x80>
	}
	if(list->first == NULL){
100438f4:	687b      	ldr	r3, [r7, #4]
100438f6:	681b      	ldr	r3, [r3, #0]
100438f8:	2b00      	cmp	r3, #0
100438fa:	d10a      	bne.n	10043912 <FIFO_Dequeue+0x3c>
		list->last = NULL;// It is preferable to have a memory leak, rather than crash the system
100438fc:	687b      	ldr	r3, [r7, #4]
100438fe:	2200      	movs	r2, #0
10043900:	605a      	str	r2, [r3, #4]
		return (Event_t){EVENT_NONE, 0};
10043902:	2118      	movs	r1, #24
10043904:	187b      	adds	r3, r7, r1
10043906:	2200      	movs	r2, #0
10043908:	701a      	strb	r2, [r3, #0]
1004390a:	187b      	adds	r3, r7, r1
1004390c:	2200      	movs	r2, #0
1004390e:	805a      	strh	r2, [r3, #2]
10043910:	e021      	b.n	10043956 <FIFO_Dequeue+0x80>
	}
	node* doomed = list->first;
10043912:	687b      	ldr	r3, [r7, #4]
10043914:	681b      	ldr	r3, [r3, #0]
10043916:	61fb      	str	r3, [r7, #28]
	list->first = doomed->next;
10043918:	69fb      	ldr	r3, [r7, #28]
1004391a:	685a      	ldr	r2, [r3, #4]
1004391c:	687b      	ldr	r3, [r7, #4]
1004391e:	601a      	str	r2, [r3, #0]
	if(list->first == NULL){
10043920:	687b      	ldr	r3, [r7, #4]
10043922:	681b      	ldr	r3, [r3, #0]
10043924:	2b00      	cmp	r3, #0
10043926:	d102      	bne.n	1004392e <FIFO_Dequeue+0x58>
		list->last = NULL;
10043928:	687b      	ldr	r3, [r7, #4]
1004392a:	2200      	movs	r2, #0
1004392c:	605a      	str	r2, [r3, #4]
	}
	Event_t out = doomed->event;
1004392e:	2414      	movs	r4, #20
10043930:	193b      	adds	r3, r7, r4
10043932:	69fa      	ldr	r2, [r7, #28]
10043934:	6812      	ldr	r2, [r2, #0]
10043936:	601a      	str	r2, [r3, #0]
	free(doomed);
10043938:	69fb      	ldr	r3, [r7, #28]
1004393a:	0018      	movs	r0, r3
1004393c:	f023 fe16 	bl	1006756c <free>
	list->size--;
10043940:	687b      	ldr	r3, [r7, #4]
10043942:	891b      	ldrh	r3, [r3, #8]
10043944:	3b01      	subs	r3, #1
10043946:	b29a      	uxth	r2, r3
10043948:	687b      	ldr	r3, [r7, #4]
1004394a:	811a      	strh	r2, [r3, #8]
	return out;
1004394c:	2318      	movs	r3, #24
1004394e:	18fb      	adds	r3, r7, r3
10043950:	193a      	adds	r2, r7, r4
10043952:	6812      	ldr	r2, [r2, #0]
10043954:	601a      	str	r2, [r3, #0]

}
10043956:	2318      	movs	r3, #24
10043958:	18fa      	adds	r2, r7, r3
1004395a:	2300      	movs	r3, #0
1004395c:	8811      	ldrh	r1, [r2, #0]
1004395e:	0409      	lsls	r1, r1, #16
10043960:	0c09      	lsrs	r1, r1, #16
10043962:	0c1b      	lsrs	r3, r3, #16
10043964:	041b      	lsls	r3, r3, #16
10043966:	430b      	orrs	r3, r1
10043968:	8852      	ldrh	r2, [r2, #2]
1004396a:	0412      	lsls	r2, r2, #16
1004396c:	041b      	lsls	r3, r3, #16
1004396e:	0c1b      	lsrs	r3, r3, #16
10043970:	4313      	orrs	r3, r2
10043972:	0018      	movs	r0, r3
10043974:	46bd      	mov	sp, r7
10043976:	b009      	add	sp, #36	@ 0x24
10043978:	bd90      	pop	{r4, r7, pc}

1004397a <FIFO_GetSize>:

bool FIFO_GetSize(FIFO list){
1004397a:	b580      	push	{r7, lr}
1004397c:	b082      	sub	sp, #8
1004397e:	af00      	add	r7, sp, #0
10043980:	6078      	str	r0, [r7, #4]
	return list->size;
10043982:	687b      	ldr	r3, [r7, #4]
10043984:	891b      	ldrh	r3, [r3, #8]
10043986:	1e5a      	subs	r2, r3, #1
10043988:	4193      	sbcs	r3, r2
1004398a:	b2db      	uxtb	r3, r3
}
1004398c:	0018      	movs	r0, r3
1004398e:	46bd      	mov	sp, r7
10043990:	b002      	add	sp, #8
10043992:	bd80      	pop	{r7, pc}

10043994 <FLASH_Init>:
 * @function: FLASH_Init()
 * @brief: initialize the flash access library
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint8_t FLASH_Init(){
10043994:	b580      	push	{r7, lr}
10043996:	b082      	sub	sp, #8
10043998:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
1004399a:	4b38      	ldr	r3, [pc, #224]	@ (10043a7c <FLASH_Init+0xe8>)
1004399c:	781b      	ldrb	r3, [r3, #0]
1004399e:	2b00      	cmp	r3, #0
100439a0:	d001      	beq.n	100439a6 <FLASH_Init+0x12>
100439a2:	2301      	movs	r3, #1
100439a4:	e066      	b.n	10043a74 <FLASH_Init+0xe0>
	
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
100439a6:	4b36      	ldr	r3, [pc, #216]	@ (10043a80 <FLASH_Init+0xec>)
100439a8:	691a      	ldr	r2, [r3, #16]
100439aa:	4b35      	ldr	r3, [pc, #212]	@ (10043a80 <FLASH_Init+0xec>)
100439ac:	210c      	movs	r1, #12
100439ae:	430a      	orrs	r2, r1
100439b0:	611a      	str	r2, [r3, #16]
	//find size of schedule
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
100439b2:	2300      	movs	r3, #0
100439b4:	607b      	str	r3, [r7, #4]
100439b6:	e011      	b.n	100439dc <FLASH_Init+0x48>
		if ((uint8_t)(*(uint8_t*)(SCHEDULEADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
100439b8:	687b      	ldr	r3, [r7, #4]
100439ba:	4a32      	ldr	r2, [pc, #200]	@ (10043a84 <FLASH_Init+0xf0>)
100439bc:	4694      	mov	ip, r2
100439be:	4463      	add	r3, ip
100439c0:	00db      	lsls	r3, r3, #3
100439c2:	781b      	ldrb	r3, [r3, #0]
100439c4:	2bff      	cmp	r3, #255	@ 0xff
100439c6:	d106      	bne.n	100439d6 <FLASH_Init+0x42>
			ScheduleSize = i-1;
100439c8:	687b      	ldr	r3, [r7, #4]
100439ca:	b29b      	uxth	r3, r3
100439cc:	3b01      	subs	r3, #1
100439ce:	b29a      	uxth	r2, r3
100439d0:	4b2d      	ldr	r3, [pc, #180]	@ (10043a88 <FLASH_Init+0xf4>)
100439d2:	801a      	strh	r2, [r3, #0]
			break;
100439d4:	e005      	b.n	100439e2 <FLASH_Init+0x4e>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
100439d6:	687b      	ldr	r3, [r7, #4]
100439d8:	3301      	adds	r3, #1
100439da:	607b      	str	r3, [r7, #4]
100439dc:	687b      	ldr	r3, [r7, #4]
100439de:	2bff      	cmp	r3, #255	@ 0xff
100439e0:	ddea      	ble.n	100439b8 <FLASH_Init+0x24>
		}
	}
	//find size of logs
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
100439e2:	2300      	movs	r3, #0
100439e4:	603b      	str	r3, [r7, #0]
100439e6:	e011      	b.n	10043a0c <FLASH_Init+0x78>
		if ((uint8_t)(*(uint8_t*)(LOGSADDRESS+(i*SCHEDULEEVENTSIZE))) == FLASHEMPTY ){
100439e8:	683b      	ldr	r3, [r7, #0]
100439ea:	4a28      	ldr	r2, [pc, #160]	@ (10043a8c <FLASH_Init+0xf8>)
100439ec:	4694      	mov	ip, r2
100439ee:	4463      	add	r3, ip
100439f0:	00db      	lsls	r3, r3, #3
100439f2:	781b      	ldrb	r3, [r3, #0]
100439f4:	2bff      	cmp	r3, #255	@ 0xff
100439f6:	d106      	bne.n	10043a06 <FLASH_Init+0x72>
			LogsSize = i-1;
100439f8:	683b      	ldr	r3, [r7, #0]
100439fa:	b29b      	uxth	r3, r3
100439fc:	3b01      	subs	r3, #1
100439fe:	b29a      	uxth	r2, r3
10043a00:	4b23      	ldr	r3, [pc, #140]	@ (10043a90 <FLASH_Init+0xfc>)
10043a02:	801a      	strh	r2, [r3, #0]
			break;
10043a04:	e005      	b.n	10043a12 <FLASH_Init+0x7e>
	for(int i = 0; i < FLASHPAGESIZE/SCHEDULEEVENTSIZE; i++){
10043a06:	683b      	ldr	r3, [r7, #0]
10043a08:	3301      	adds	r3, #1
10043a0a:	603b      	str	r3, [r7, #0]
10043a0c:	683b      	ldr	r3, [r7, #0]
10043a0e:	2bff      	cmp	r3, #255	@ 0xff
10043a10:	ddea      	ble.n	100439e8 <FLASH_Init+0x54>
		}
	}
	initialized = 1;
10043a12:	4b1a      	ldr	r3, [pc, #104]	@ (10043a7c <FLASH_Init+0xe8>)
10043a14:	2201      	movs	r2, #1
10043a16:	701a      	strb	r2, [r3, #0]
	//load default values into the duty cycle and volume if they are not initialized
	if(FLASH_GetVolume() == FLASHEMPTY ||FLASH_GetDutyCycle() == FLASHEMPTY){
10043a18:	f000 f87e 	bl	10043b18 <FLASH_GetVolume>
10043a1c:	0003      	movs	r3, r0
10043a1e:	2bff      	cmp	r3, #255	@ 0xff
10043a20:	d004      	beq.n	10043a2c <FLASH_Init+0x98>
10043a22:	f000 f88f 	bl	10043b44 <FLASH_GetDutyCycle>
10043a26:	0003      	movs	r3, r0
10043a28:	2bff      	cmp	r3, #255	@ 0xff
10043a2a:	d122      	bne.n	10043a72 <FLASH_Init+0xde>
		if(FLASH_GetVolume() == FLASHEMPTY && FLASH_GetDutyCycle() == FLASHEMPTY){
10043a2c:	f000 f874 	bl	10043b18 <FLASH_GetVolume>
10043a30:	0003      	movs	r3, r0
10043a32:	2bff      	cmp	r3, #255	@ 0xff
10043a34:	d109      	bne.n	10043a4a <FLASH_Init+0xb6>
10043a36:	f000 f885 	bl	10043b44 <FLASH_GetDutyCycle>
10043a3a:	0003      	movs	r3, r0
10043a3c:	2bff      	cmp	r3, #255	@ 0xff
10043a3e:	d104      	bne.n	10043a4a <FLASH_Init+0xb6>
			FLASH_SetDCVol(50, 40);
10043a40:	2128      	movs	r1, #40	@ 0x28
10043a42:	2032      	movs	r0, #50	@ 0x32
10043a44:	f000 f826 	bl	10043a94 <FLASH_SetDCVol>
10043a48:	e013      	b.n	10043a72 <FLASH_Init+0xde>
		}else {
			if(FLASH_GetVolume() == FLASHEMPTY){
10043a4a:	f000 f865 	bl	10043b18 <FLASH_GetVolume>
10043a4e:	0003      	movs	r3, r0
10043a50:	2bff      	cmp	r3, #255	@ 0xff
10043a52:	d107      	bne.n	10043a64 <FLASH_Init+0xd0>
				FLASH_SetDCVol(50, FLASH_GetDutyCycle());
10043a54:	f000 f876 	bl	10043b44 <FLASH_GetDutyCycle>
10043a58:	0003      	movs	r3, r0
10043a5a:	0019      	movs	r1, r3
10043a5c:	2032      	movs	r0, #50	@ 0x32
10043a5e:	f000 f819 	bl	10043a94 <FLASH_SetDCVol>
10043a62:	e006      	b.n	10043a72 <FLASH_Init+0xde>
			}else {
				FLASH_SetDCVol(FLASH_GetVolume(), 40);
10043a64:	f000 f858 	bl	10043b18 <FLASH_GetVolume>
10043a68:	0003      	movs	r3, r0
10043a6a:	2128      	movs	r1, #40	@ 0x28
10043a6c:	0018      	movs	r0, r3
10043a6e:	f000 f811 	bl	10043a94 <FLASH_SetDCVol>
			}
		}
	}
	return INIT_OK;
10043a72:	2301      	movs	r3, #1
}
10043a74:	0018      	movs	r0, r3
10043a76:	46bd      	mov	sp, r7
10043a78:	b002      	add	sp, #8
10043a7a:	bd80      	pop	{r7, pc}
10043a7c:	200003d0 	.word	0x200003d0
10043a80:	40001000 	.word	0x40001000
10043a84:	0200de00 	.word	0x0200de00
10043a88:	200003cc 	.word	0x200003cc
10043a8c:	0200dd00 	.word	0x0200dd00
10043a90:	200003ce 	.word	0x200003ce

10043a94 <FLASH_SetDCVol>:
 * @function: FLASH_SetVolume();
 * @brief: edits the volume and duty cycle stored in memory
 * @param: none
 * @return: success status
 */
uint8_t FLASH_SetDCVol(uint8_t volume, uint8_t DC){
10043a94:	b5b0      	push	{r4, r5, r7, lr}
10043a96:	b088      	sub	sp, #32
10043a98:	af00      	add	r7, sp, #0
10043a9a:	0002      	movs	r2, r0
10043a9c:	1dfb      	adds	r3, r7, #7
10043a9e:	701a      	strb	r2, [r3, #0]
10043aa0:	1dbb      	adds	r3, r7, #6
10043aa2:	1c0a      	adds	r2, r1, #0
10043aa4:	701a      	strb	r2, [r3, #0]
	if(!initialized){return 0;}
10043aa6:	4b1a      	ldr	r3, [pc, #104]	@ (10043b10 <FLASH_SetDCVol+0x7c>)
10043aa8:	781b      	ldrb	r3, [r3, #0]
10043aaa:	2b00      	cmp	r3, #0
10043aac:	d101      	bne.n	10043ab2 <FLASH_SetDCVol+0x1e>
10043aae:	2300      	movs	r3, #0
10043ab0:	e02a      	b.n	10043b08 <FLASH_SetDCVol+0x74>
	FLASH_EraseInitTypeDef erase;
	erase.Page = DCVOLPAGE;
10043ab2:	210c      	movs	r1, #12
10043ab4:	187b      	adds	r3, r7, r1
10043ab6:	225c      	movs	r2, #92	@ 0x5c
10043ab8:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10043aba:	187b      	adds	r3, r7, r1
10043abc:	2201      	movs	r2, #1
10043abe:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
10043ac0:	187b      	adds	r3, r7, r1
10043ac2:	2200      	movs	r2, #0
10043ac4:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_FLASHEx_Erase(&erase, &faultypage);
10043ac6:	2308      	movs	r3, #8
10043ac8:	18fa      	adds	r2, r7, r3
10043aca:	187b      	adds	r3, r7, r1
10043acc:	0011      	movs	r1, r2
10043ace:	0018      	movs	r0, r3
10043ad0:	f003 fd76 	bl	100475c0 <HAL_FLASHEx_Erase>
	FLASH_GetVolume();
10043ad4:	f000 f820 	bl	10043b18 <FLASH_GetVolume>
	FLASH_GetDutyCycle();
10043ad8:	f000 f834 	bl	10043b44 <FLASH_GetDutyCycle>
	uint32_t data = ((uint32_t)(DC)<<8)+(uint32_t)(volume);
10043adc:	1dbb      	adds	r3, r7, #6
10043ade:	781b      	ldrb	r3, [r3, #0]
10043ae0:	021a      	lsls	r2, r3, #8
10043ae2:	1dfb      	adds	r3, r7, #7
10043ae4:	781b      	ldrb	r3, [r3, #0]
10043ae6:	18d3      	adds	r3, r2, r3
10043ae8:	61fb      	str	r3, [r7, #28]
	HAL_StatusTypeDef status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, VOLUMEADDRESS, data);
10043aea:	251b      	movs	r5, #27
10043aec:	197c      	adds	r4, r7, r5
10043aee:	69fb      	ldr	r3, [r7, #28]
10043af0:	4908      	ldr	r1, [pc, #32]	@ (10043b14 <FLASH_SetDCVol+0x80>)
10043af2:	001a      	movs	r2, r3
10043af4:	2000      	movs	r0, #0
10043af6:	f003 fc89 	bl	1004740c <HAL_FLASH_Program>
10043afa:	0003      	movs	r3, r0
10043afc:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
10043afe:	197b      	adds	r3, r7, r5
10043b00:	781b      	ldrb	r3, [r3, #0]
10043b02:	425a      	negs	r2, r3
10043b04:	4153      	adcs	r3, r2
10043b06:	b2db      	uxtb	r3, r3
}
10043b08:	0018      	movs	r0, r3
10043b0a:	46bd      	mov	sp, r7
10043b0c:	b008      	add	sp, #32
10043b0e:	bdb0      	pop	{r4, r5, r7, pc}
10043b10:	200003d0 	.word	0x200003d0
10043b14:	1006e000 	.word	0x1006e000

10043b18 <FLASH_GetVolume>:
 * @function: FLASH_GetVolume();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: volume
 */
uint8_t FLASH_GetVolume(){
10043b18:	b580      	push	{r7, lr}
10043b1a:	b082      	sub	sp, #8
10043b1c:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10043b1e:	4b07      	ldr	r3, [pc, #28]	@ (10043b3c <FLASH_GetVolume+0x24>)
10043b20:	781b      	ldrb	r3, [r3, #0]
10043b22:	2b00      	cmp	r3, #0
10043b24:	d101      	bne.n	10043b2a <FLASH_GetVolume+0x12>
10043b26:	2300      	movs	r3, #0
10043b28:	e003      	b.n	10043b32 <FLASH_GetVolume+0x1a>
	uint8_t* adr = (uint8_t*)VOLUMEADDRESS;
10043b2a:	4b05      	ldr	r3, [pc, #20]	@ (10043b40 <FLASH_GetVolume+0x28>)
10043b2c:	607b      	str	r3, [r7, #4]
	return *adr;
10043b2e:	687b      	ldr	r3, [r7, #4]
10043b30:	781b      	ldrb	r3, [r3, #0]
}
10043b32:	0018      	movs	r0, r3
10043b34:	46bd      	mov	sp, r7
10043b36:	b002      	add	sp, #8
10043b38:	bd80      	pop	{r7, pc}
10043b3a:	46c0      	nop			@ (mov r8, r8)
10043b3c:	200003d0 	.word	0x200003d0
10043b40:	1006e000 	.word	0x1006e000

10043b44 <FLASH_GetDutyCycle>:
 * @function: FLASH_GetDutyCycle();
 * @brief: read the volume stored in memory
 * @param: none
 * @return: Duty Cycle
 */
uint8_t FLASH_GetDutyCycle(){
10043b44:	b580      	push	{r7, lr}
10043b46:	b082      	sub	sp, #8
10043b48:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10043b4a:	4b07      	ldr	r3, [pc, #28]	@ (10043b68 <FLASH_GetDutyCycle+0x24>)
10043b4c:	781b      	ldrb	r3, [r3, #0]
10043b4e:	2b00      	cmp	r3, #0
10043b50:	d101      	bne.n	10043b56 <FLASH_GetDutyCycle+0x12>
10043b52:	2300      	movs	r3, #0
10043b54:	e003      	b.n	10043b5e <FLASH_GetDutyCycle+0x1a>
	uint8_t* adr = (uint8_t*)DCADDRESS;
10043b56:	4b05      	ldr	r3, [pc, #20]	@ (10043b6c <FLASH_GetDutyCycle+0x28>)
10043b58:	607b      	str	r3, [r7, #4]
	return *adr;
10043b5a:	687b      	ldr	r3, [r7, #4]
10043b5c:	781b      	ldrb	r3, [r3, #0]
}
10043b5e:	0018      	movs	r0, r3
10043b60:	46bd      	mov	sp, r7
10043b62:	b002      	add	sp, #8
10043b64:	bd80      	pop	{r7, pc}
10043b66:	46c0      	nop			@ (mov r8, r8)
10043b68:	200003d0 	.word	0x200003d0
10043b6c:	1006e001 	.word	0x1006e001

10043b70 <FLASH_AppendLogs>:
 * @function: FLASH_AppendLogs();
 * @brief: Adds a new event entry to the logs
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendLogs(scheduleEvent event){
10043b70:	b580      	push	{r7, lr}
10043b72:	b084      	sub	sp, #16
10043b74:	af00      	add	r7, sp, #0
10043b76:	003b      	movs	r3, r7
10043b78:	6018      	str	r0, [r3, #0]
10043b7a:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
10043b7c:	4b24      	ldr	r3, [pc, #144]	@ (10043c10 <FLASH_AppendLogs+0xa0>)
10043b7e:	781b      	ldrb	r3, [r3, #0]
10043b80:	2b00      	cmp	r3, #0
10043b82:	d101      	bne.n	10043b88 <FLASH_AppendLogs+0x18>
10043b84:	2300      	movs	r3, #0
10043b86:	e03f      	b.n	10043c08 <FLASH_AppendLogs+0x98>
	LogsSize++;
10043b88:	4b22      	ldr	r3, [pc, #136]	@ (10043c14 <FLASH_AppendLogs+0xa4>)
10043b8a:	881b      	ldrh	r3, [r3, #0]
10043b8c:	3301      	adds	r3, #1
10043b8e:	b29a      	uxth	r2, r3
10043b90:	4b20      	ldr	r3, [pc, #128]	@ (10043c14 <FLASH_AppendLogs+0xa4>)
10043b92:	801a      	strh	r2, [r3, #0]
	uint32_t Data1 = (event.month)|(event.day<<8)|(event.start<<16)|(event.stop<<24);
10043b94:	003b      	movs	r3, r7
10043b96:	781b      	ldrb	r3, [r3, #0]
10043b98:	001a      	movs	r2, r3
10043b9a:	003b      	movs	r3, r7
10043b9c:	785b      	ldrb	r3, [r3, #1]
10043b9e:	021b      	lsls	r3, r3, #8
10043ba0:	431a      	orrs	r2, r3
10043ba2:	003b      	movs	r3, r7
10043ba4:	789b      	ldrb	r3, [r3, #2]
10043ba6:	041b      	lsls	r3, r3, #16
10043ba8:	431a      	orrs	r2, r3
10043baa:	003b      	movs	r3, r7
10043bac:	78db      	ldrb	r3, [r3, #3]
10043bae:	061b      	lsls	r3, r3, #24
10043bb0:	4313      	orrs	r3, r2
10043bb2:	60fb      	str	r3, [r7, #12]
	uint32_t Data2 = (event.folder)|(event.track<<8);
10043bb4:	003b      	movs	r3, r7
10043bb6:	791b      	ldrb	r3, [r3, #4]
10043bb8:	001a      	movs	r2, r3
10043bba:	003b      	movs	r3, r7
10043bbc:	795b      	ldrb	r3, [r3, #5]
10043bbe:	021b      	lsls	r3, r3, #8
10043bc0:	4313      	orrs	r3, r2
10043bc2:	60bb      	str	r3, [r7, #8]
	//this isn't blocking code officer I swear! (this is blocking code, to be improved later)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
10043bc4:	4b13      	ldr	r3, [pc, #76]	@ (10043c14 <FLASH_AppendLogs+0xa4>)
10043bc6:	881b      	ldrh	r3, [r3, #0]
10043bc8:	4a13      	ldr	r2, [pc, #76]	@ (10043c18 <FLASH_AppendLogs+0xa8>)
10043bca:	4694      	mov	ip, r2
10043bcc:	4463      	add	r3, ip
10043bce:	00db      	lsls	r3, r3, #3
10043bd0:	0019      	movs	r1, r3
10043bd2:	68fb      	ldr	r3, [r7, #12]
10043bd4:	001a      	movs	r2, r3
10043bd6:	2000      	movs	r0, #0
10043bd8:	f003 fc18 	bl	1004740c <HAL_FLASH_Program>
10043bdc:	1e03      	subs	r3, r0, #0
10043bde:	d001      	beq.n	10043be4 <FLASH_AppendLogs+0x74>
		return 0;
10043be0:	2300      	movs	r3, #0
10043be2:	e011      	b.n	10043c08 <FLASH_AppendLogs+0x98>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, LOGSADDRESS+LogsSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
10043be4:	4b0b      	ldr	r3, [pc, #44]	@ (10043c14 <FLASH_AppendLogs+0xa4>)
10043be6:	881b      	ldrh	r3, [r3, #0]
10043be8:	4a0b      	ldr	r2, [pc, #44]	@ (10043c18 <FLASH_AppendLogs+0xa8>)
10043bea:	4694      	mov	ip, r2
10043bec:	4463      	add	r3, ip
10043bee:	00db      	lsls	r3, r3, #3
10043bf0:	3304      	adds	r3, #4
10043bf2:	0019      	movs	r1, r3
10043bf4:	68bb      	ldr	r3, [r7, #8]
10043bf6:	001a      	movs	r2, r3
10043bf8:	2000      	movs	r0, #0
10043bfa:	f003 fc07 	bl	1004740c <HAL_FLASH_Program>
10043bfe:	1e03      	subs	r3, r0, #0
10043c00:	d001      	beq.n	10043c06 <FLASH_AppendLogs+0x96>
		return 0;
10043c02:	2300      	movs	r3, #0
10043c04:	e000      	b.n	10043c08 <FLASH_AppendLogs+0x98>
	}
	return 1;
10043c06:	2301      	movs	r3, #1
}
10043c08:	0018      	movs	r0, r3
10043c0a:	46bd      	mov	sp, r7
10043c0c:	b004      	add	sp, #16
10043c0e:	bd80      	pop	{r7, pc}
10043c10:	200003d0 	.word	0x200003d0
10043c14:	200003ce 	.word	0x200003ce
10043c18:	0200dd00 	.word	0x0200dd00

10043c1c <FLASH_GetLogsSize>:
 * @function: FLASH_GetLogsSize();
 * @brief: returns the size of the logs
 * @param: none
 * @return: Logs size
 */
uint16_t FLASH_GetLogsSize(){
10043c1c:	b580      	push	{r7, lr}
10043c1e:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10043c20:	4b05      	ldr	r3, [pc, #20]	@ (10043c38 <FLASH_GetLogsSize+0x1c>)
10043c22:	781b      	ldrb	r3, [r3, #0]
10043c24:	2b00      	cmp	r3, #0
10043c26:	d101      	bne.n	10043c2c <FLASH_GetLogsSize+0x10>
10043c28:	2300      	movs	r3, #0
10043c2a:	e001      	b.n	10043c30 <FLASH_GetLogsSize+0x14>
	return LogsSize;
10043c2c:	4b03      	ldr	r3, [pc, #12]	@ (10043c3c <FLASH_GetLogsSize+0x20>)
10043c2e:	881b      	ldrh	r3, [r3, #0]
}
10043c30:	0018      	movs	r0, r3
10043c32:	46bd      	mov	sp, r7
10043c34:	bd80      	pop	{r7, pc}
10043c36:	46c0      	nop			@ (mov r8, r8)
10043c38:	200003d0 	.word	0x200003d0
10043c3c:	200003ce 	.word	0x200003ce

10043c40 <FLASH_ReadLogs>:
 * @function: FLASH_ReadLogs();
 * @brief: allows reading the logs that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index, null if invalid index
 */
scheduleEvent FLASH_ReadLogs(uint16_t index){
10043c40:	b590      	push	{r4, r7, lr}
10043c42:	b087      	sub	sp, #28
10043c44:	af00      	add	r7, sp, #0
10043c46:	6078      	str	r0, [r7, #4]
10043c48:	000a      	movs	r2, r1
10043c4a:	1cbb      	adds	r3, r7, #2
10043c4c:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10043c4e:	2410      	movs	r4, #16
10043c50:	193b      	adds	r3, r7, r4
10043c52:	0018      	movs	r0, r3
10043c54:	2306      	movs	r3, #6
10043c56:	001a      	movs	r2, r3
10043c58:	2100      	movs	r1, #0
10043c5a:	f023 ff83 	bl	10067b64 <memset>
	if(!initialized){return event;}
10043c5e:	4b2e      	ldr	r3, [pc, #184]	@ (10043d18 <FLASH_ReadLogs+0xd8>)
10043c60:	781b      	ldrb	r3, [r3, #0]
10043c62:	2b00      	cmp	r3, #0
10043c64:	d108      	bne.n	10043c78 <FLASH_ReadLogs+0x38>
10043c66:	687a      	ldr	r2, [r7, #4]
10043c68:	193b      	adds	r3, r7, r4
10043c6a:	0010      	movs	r0, r2
10043c6c:	0019      	movs	r1, r3
10043c6e:	2306      	movs	r3, #6
10043c70:	001a      	movs	r2, r3
10043c72:	f023 ffec 	bl	10067c4e <memcpy>
10043c76:	e04a      	b.n	10043d0e <FLASH_ReadLogs+0xce>
	if(index >= 0 && index <= LogsSize){
10043c78:	4b28      	ldr	r3, [pc, #160]	@ (10043d1c <FLASH_ReadLogs+0xdc>)
10043c7a:	881b      	ldrh	r3, [r3, #0]
10043c7c:	1cba      	adds	r2, r7, #2
10043c7e:	8812      	ldrh	r2, [r2, #0]
10043c80:	429a      	cmp	r2, r3
10043c82:	d83b      	bhi.n	10043cfc <FLASH_ReadLogs+0xbc>
		event.month = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE));
10043c84:	1cbb      	adds	r3, r7, #2
10043c86:	881b      	ldrh	r3, [r3, #0]
10043c88:	4a25      	ldr	r2, [pc, #148]	@ (10043d20 <FLASH_ReadLogs+0xe0>)
10043c8a:	4694      	mov	ip, r2
10043c8c:	4463      	add	r3, ip
10043c8e:	00db      	lsls	r3, r3, #3
10043c90:	781a      	ldrb	r2, [r3, #0]
10043c92:	2110      	movs	r1, #16
10043c94:	187b      	adds	r3, r7, r1
10043c96:	701a      	strb	r2, [r3, #0]
		event.day = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+1));
10043c98:	1cbb      	adds	r3, r7, #2
10043c9a:	881b      	ldrh	r3, [r3, #0]
10043c9c:	4a20      	ldr	r2, [pc, #128]	@ (10043d20 <FLASH_ReadLogs+0xe0>)
10043c9e:	4694      	mov	ip, r2
10043ca0:	4463      	add	r3, ip
10043ca2:	00db      	lsls	r3, r3, #3
10043ca4:	3301      	adds	r3, #1
10043ca6:	781a      	ldrb	r2, [r3, #0]
10043ca8:	187b      	adds	r3, r7, r1
10043caa:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+2));
10043cac:	1cbb      	adds	r3, r7, #2
10043cae:	881b      	ldrh	r3, [r3, #0]
10043cb0:	4a1b      	ldr	r2, [pc, #108]	@ (10043d20 <FLASH_ReadLogs+0xe0>)
10043cb2:	4694      	mov	ip, r2
10043cb4:	4463      	add	r3, ip
10043cb6:	00db      	lsls	r3, r3, #3
10043cb8:	3302      	adds	r3, #2
10043cba:	781a      	ldrb	r2, [r3, #0]
10043cbc:	187b      	adds	r3, r7, r1
10043cbe:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+3));
10043cc0:	1cbb      	adds	r3, r7, #2
10043cc2:	881b      	ldrh	r3, [r3, #0]
10043cc4:	4a16      	ldr	r2, [pc, #88]	@ (10043d20 <FLASH_ReadLogs+0xe0>)
10043cc6:	4694      	mov	ip, r2
10043cc8:	4463      	add	r3, ip
10043cca:	00db      	lsls	r3, r3, #3
10043ccc:	3303      	adds	r3, #3
10043cce:	781a      	ldrb	r2, [r3, #0]
10043cd0:	187b      	adds	r3, r7, r1
10043cd2:	70da      	strb	r2, [r3, #3]
		event.folder = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+4));
10043cd4:	1cbb      	adds	r3, r7, #2
10043cd6:	881b      	ldrh	r3, [r3, #0]
10043cd8:	4a11      	ldr	r2, [pc, #68]	@ (10043d20 <FLASH_ReadLogs+0xe0>)
10043cda:	4694      	mov	ip, r2
10043cdc:	4463      	add	r3, ip
10043cde:	00db      	lsls	r3, r3, #3
10043ce0:	3304      	adds	r3, #4
10043ce2:	781a      	ldrb	r2, [r3, #0]
10043ce4:	187b      	adds	r3, r7, r1
10043ce6:	711a      	strb	r2, [r3, #4]
		event.track = *((uint8_t*)(LOGSADDRESS+index*SCHEDULEEVENTSIZE+5));
10043ce8:	1cbb      	adds	r3, r7, #2
10043cea:	881b      	ldrh	r3, [r3, #0]
10043cec:	4a0c      	ldr	r2, [pc, #48]	@ (10043d20 <FLASH_ReadLogs+0xe0>)
10043cee:	4694      	mov	ip, r2
10043cf0:	4463      	add	r3, ip
10043cf2:	00db      	lsls	r3, r3, #3
10043cf4:	3305      	adds	r3, #5
10043cf6:	781a      	ldrb	r2, [r3, #0]
10043cf8:	187b      	adds	r3, r7, r1
10043cfa:	715a      	strb	r2, [r3, #5]

	}
	return event;
10043cfc:	687a      	ldr	r2, [r7, #4]
10043cfe:	2310      	movs	r3, #16
10043d00:	18fb      	adds	r3, r7, r3
10043d02:	0010      	movs	r0, r2
10043d04:	0019      	movs	r1, r3
10043d06:	2306      	movs	r3, #6
10043d08:	001a      	movs	r2, r3
10043d0a:	f023 ffa0 	bl	10067c4e <memcpy>
}
10043d0e:	6878      	ldr	r0, [r7, #4]
10043d10:	46bd      	mov	sp, r7
10043d12:	b007      	add	sp, #28
10043d14:	bd90      	pop	{r4, r7, pc}
10043d16:	46c0      	nop			@ (mov r8, r8)
10043d18:	200003d0 	.word	0x200003d0
10043d1c:	200003ce 	.word	0x200003ce
10043d20:	0200dd00 	.word	0x0200dd00

10043d24 <FLASH_AppendSchedule>:
 * @function: FLASH_AppendSchedule();
 * @brief: Adds a new event entry to the schedule
 * @param: none
 * @return: success status
 */
uint8_t FLASH_AppendSchedule(scheduleEvent event){
10043d24:	b580      	push	{r7, lr}
10043d26:	b086      	sub	sp, #24
10043d28:	af00      	add	r7, sp, #0
10043d2a:	2308      	movs	r3, #8
10043d2c:	18fb      	adds	r3, r7, r3
10043d2e:	6018      	str	r0, [r3, #0]
10043d30:	6059      	str	r1, [r3, #4]
	if(!initialized){return 0;}
10043d32:	4b2a      	ldr	r3, [pc, #168]	@ (10043ddc <FLASH_AppendSchedule+0xb8>)
10043d34:	781b      	ldrb	r3, [r3, #0]
10043d36:	2b00      	cmp	r3, #0
10043d38:	d101      	bne.n	10043d3e <FLASH_AppendSchedule+0x1a>
10043d3a:	2300      	movs	r3, #0
10043d3c:	e049      	b.n	10043dd2 <FLASH_AppendSchedule+0xae>
	uint32_t Data1 = (event.month)|(event.day<<8)|(event.start<<16)|(event.stop<<24);
10043d3e:	2108      	movs	r1, #8
10043d40:	187b      	adds	r3, r7, r1
10043d42:	781b      	ldrb	r3, [r3, #0]
10043d44:	001a      	movs	r2, r3
10043d46:	187b      	adds	r3, r7, r1
10043d48:	785b      	ldrb	r3, [r3, #1]
10043d4a:	021b      	lsls	r3, r3, #8
10043d4c:	431a      	orrs	r2, r3
10043d4e:	187b      	adds	r3, r7, r1
10043d50:	789b      	ldrb	r3, [r3, #2]
10043d52:	041b      	lsls	r3, r3, #16
10043d54:	431a      	orrs	r2, r3
10043d56:	187b      	adds	r3, r7, r1
10043d58:	78db      	ldrb	r3, [r3, #3]
10043d5a:	061b      	lsls	r3, r3, #24
10043d5c:	4313      	orrs	r3, r2
10043d5e:	617b      	str	r3, [r7, #20]
	uint32_t Data2 = (event.folder)|(event.track<<8);
10043d60:	187b      	adds	r3, r7, r1
10043d62:	791b      	ldrb	r3, [r3, #4]
10043d64:	001a      	movs	r2, r3
10043d66:	187b      	adds	r3, r7, r1
10043d68:	795b      	ldrb	r3, [r3, #5]
10043d6a:	021b      	lsls	r3, r3, #8
10043d6c:	4313      	orrs	r3, r2
10043d6e:	613b      	str	r3, [r7, #16]
	//this isn't blocking code officer I swear! (this is blocking code)
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE, Data1) != HAL_OK ){
10043d70:	4b1b      	ldr	r3, [pc, #108]	@ (10043de0 <FLASH_AppendSchedule+0xbc>)
10043d72:	881b      	ldrh	r3, [r3, #0]
10043d74:	4a1b      	ldr	r2, [pc, #108]	@ (10043de4 <FLASH_AppendSchedule+0xc0>)
10043d76:	4694      	mov	ip, r2
10043d78:	4463      	add	r3, ip
10043d7a:	00db      	lsls	r3, r3, #3
10043d7c:	0019      	movs	r1, r3
10043d7e:	697b      	ldr	r3, [r7, #20]
10043d80:	001a      	movs	r2, r3
10043d82:	2000      	movs	r0, #0
10043d84:	f003 fb42 	bl	1004740c <HAL_FLASH_Program>
10043d88:	1e03      	subs	r3, r0, #0
10043d8a:	d001      	beq.n	10043d90 <FLASH_AppendSchedule+0x6c>
		return 0;
10043d8c:	2300      	movs	r3, #0
10043d8e:	e020      	b.n	10043dd2 <FLASH_AppendSchedule+0xae>
	}
	if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, SCHEDULEADDRESS+ScheduleSize*SCHEDULEEVENTSIZE+4, Data2) != HAL_OK ){
10043d90:	4b13      	ldr	r3, [pc, #76]	@ (10043de0 <FLASH_AppendSchedule+0xbc>)
10043d92:	881b      	ldrh	r3, [r3, #0]
10043d94:	4a13      	ldr	r2, [pc, #76]	@ (10043de4 <FLASH_AppendSchedule+0xc0>)
10043d96:	4694      	mov	ip, r2
10043d98:	4463      	add	r3, ip
10043d9a:	00db      	lsls	r3, r3, #3
10043d9c:	3304      	adds	r3, #4
10043d9e:	0019      	movs	r1, r3
10043da0:	693b      	ldr	r3, [r7, #16]
10043da2:	001a      	movs	r2, r3
10043da4:	2000      	movs	r0, #0
10043da6:	f003 fb31 	bl	1004740c <HAL_FLASH_Program>
10043daa:	1e03      	subs	r3, r0, #0
10043dac:	d001      	beq.n	10043db2 <FLASH_AppendSchedule+0x8e>
		return 0;
10043dae:	2300      	movs	r3, #0
10043db0:	e00f      	b.n	10043dd2 <FLASH_AppendSchedule+0xae>
	}
	ScheduleSize++;
10043db2:	4b0b      	ldr	r3, [pc, #44]	@ (10043de0 <FLASH_AppendSchedule+0xbc>)
10043db4:	881b      	ldrh	r3, [r3, #0]
10043db6:	3301      	adds	r3, #1
10043db8:	b29a      	uxth	r2, r3
10043dba:	4b09      	ldr	r3, [pc, #36]	@ (10043de0 <FLASH_AppendSchedule+0xbc>)
10043dbc:	801a      	strh	r2, [r3, #0]
	FLASH_ReadSchedule(ScheduleSize-1);
10043dbe:	4b08      	ldr	r3, [pc, #32]	@ (10043de0 <FLASH_AppendSchedule+0xbc>)
10043dc0:	881b      	ldrh	r3, [r3, #0]
10043dc2:	3b01      	subs	r3, #1
10043dc4:	b29a      	uxth	r2, r3
10043dc6:	003b      	movs	r3, r7
10043dc8:	0011      	movs	r1, r2
10043dca:	0018      	movs	r0, r3
10043dcc:	f000 f81e 	bl	10043e0c <FLASH_ReadSchedule>
	return 1;
10043dd0:	2301      	movs	r3, #1
}
10043dd2:	0018      	movs	r0, r3
10043dd4:	46bd      	mov	sp, r7
10043dd6:	b006      	add	sp, #24
10043dd8:	bd80      	pop	{r7, pc}
10043dda:	46c0      	nop			@ (mov r8, r8)
10043ddc:	200003d0 	.word	0x200003d0
10043de0:	200003cc 	.word	0x200003cc
10043de4:	0200de00 	.word	0x0200de00

10043de8 <FLASH_GetScheduleSize>:
 * @function: FLASH_GetScheduleSize();
 * @brief: returns the size of the schedule
 * @param: none
 * @return: Schedule size
 */
uint16_t FLASH_GetScheduleSize(){
10043de8:	b580      	push	{r7, lr}
10043dea:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
10043dec:	4b05      	ldr	r3, [pc, #20]	@ (10043e04 <FLASH_GetScheduleSize+0x1c>)
10043dee:	781b      	ldrb	r3, [r3, #0]
10043df0:	2b00      	cmp	r3, #0
10043df2:	d101      	bne.n	10043df8 <FLASH_GetScheduleSize+0x10>
10043df4:	2300      	movs	r3, #0
10043df6:	e001      	b.n	10043dfc <FLASH_GetScheduleSize+0x14>
	return ScheduleSize;
10043df8:	4b03      	ldr	r3, [pc, #12]	@ (10043e08 <FLASH_GetScheduleSize+0x20>)
10043dfa:	881b      	ldrh	r3, [r3, #0]
}
10043dfc:	0018      	movs	r0, r3
10043dfe:	46bd      	mov	sp, r7
10043e00:	bd80      	pop	{r7, pc}
10043e02:	46c0      	nop			@ (mov r8, r8)
10043e04:	200003d0 	.word	0x200003d0
10043e08:	200003cc 	.word	0x200003cc

10043e0c <FLASH_ReadSchedule>:
 * @function: FLASH_ReadSchedule();
 * @brief: allows reading the schedule that have been stored in flash memory
 * @param: index to read at
 * @return: an schedule event struct at index
 */
scheduleEvent FLASH_ReadSchedule(uint16_t index){
10043e0c:	b590      	push	{r4, r7, lr}
10043e0e:	b087      	sub	sp, #28
10043e10:	af00      	add	r7, sp, #0
10043e12:	6078      	str	r0, [r7, #4]
10043e14:	000a      	movs	r2, r1
10043e16:	1cbb      	adds	r3, r7, #2
10043e18:	801a      	strh	r2, [r3, #0]
	scheduleEvent event = (scheduleEvent){0, 0, 0, 0, 0, 0};
10043e1a:	2410      	movs	r4, #16
10043e1c:	193b      	adds	r3, r7, r4
10043e1e:	0018      	movs	r0, r3
10043e20:	2306      	movs	r3, #6
10043e22:	001a      	movs	r2, r3
10043e24:	2100      	movs	r1, #0
10043e26:	f023 fe9d 	bl	10067b64 <memset>
	if(!initialized){return event;}
10043e2a:	4b2e      	ldr	r3, [pc, #184]	@ (10043ee4 <FLASH_ReadSchedule+0xd8>)
10043e2c:	781b      	ldrb	r3, [r3, #0]
10043e2e:	2b00      	cmp	r3, #0
10043e30:	d108      	bne.n	10043e44 <FLASH_ReadSchedule+0x38>
10043e32:	687a      	ldr	r2, [r7, #4]
10043e34:	193b      	adds	r3, r7, r4
10043e36:	0010      	movs	r0, r2
10043e38:	0019      	movs	r1, r3
10043e3a:	2306      	movs	r3, #6
10043e3c:	001a      	movs	r2, r3
10043e3e:	f023 ff06 	bl	10067c4e <memcpy>
10043e42:	e04a      	b.n	10043eda <FLASH_ReadSchedule+0xce>
	if(index >= 0 && index < ScheduleSize){
10043e44:	4b28      	ldr	r3, [pc, #160]	@ (10043ee8 <FLASH_ReadSchedule+0xdc>)
10043e46:	881b      	ldrh	r3, [r3, #0]
10043e48:	1cba      	adds	r2, r7, #2
10043e4a:	8812      	ldrh	r2, [r2, #0]
10043e4c:	429a      	cmp	r2, r3
10043e4e:	d23b      	bcs.n	10043ec8 <FLASH_ReadSchedule+0xbc>
		event.month = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE));
10043e50:	1cbb      	adds	r3, r7, #2
10043e52:	881b      	ldrh	r3, [r3, #0]
10043e54:	4a25      	ldr	r2, [pc, #148]	@ (10043eec <FLASH_ReadSchedule+0xe0>)
10043e56:	4694      	mov	ip, r2
10043e58:	4463      	add	r3, ip
10043e5a:	00db      	lsls	r3, r3, #3
10043e5c:	781a      	ldrb	r2, [r3, #0]
10043e5e:	2110      	movs	r1, #16
10043e60:	187b      	adds	r3, r7, r1
10043e62:	701a      	strb	r2, [r3, #0]
		event.day = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+1));
10043e64:	1cbb      	adds	r3, r7, #2
10043e66:	881b      	ldrh	r3, [r3, #0]
10043e68:	4a20      	ldr	r2, [pc, #128]	@ (10043eec <FLASH_ReadSchedule+0xe0>)
10043e6a:	4694      	mov	ip, r2
10043e6c:	4463      	add	r3, ip
10043e6e:	00db      	lsls	r3, r3, #3
10043e70:	3301      	adds	r3, #1
10043e72:	781a      	ldrb	r2, [r3, #0]
10043e74:	187b      	adds	r3, r7, r1
10043e76:	705a      	strb	r2, [r3, #1]
		event.start = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+2));
10043e78:	1cbb      	adds	r3, r7, #2
10043e7a:	881b      	ldrh	r3, [r3, #0]
10043e7c:	4a1b      	ldr	r2, [pc, #108]	@ (10043eec <FLASH_ReadSchedule+0xe0>)
10043e7e:	4694      	mov	ip, r2
10043e80:	4463      	add	r3, ip
10043e82:	00db      	lsls	r3, r3, #3
10043e84:	3302      	adds	r3, #2
10043e86:	781a      	ldrb	r2, [r3, #0]
10043e88:	187b      	adds	r3, r7, r1
10043e8a:	709a      	strb	r2, [r3, #2]
		event.stop = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+3));
10043e8c:	1cbb      	adds	r3, r7, #2
10043e8e:	881b      	ldrh	r3, [r3, #0]
10043e90:	4a16      	ldr	r2, [pc, #88]	@ (10043eec <FLASH_ReadSchedule+0xe0>)
10043e92:	4694      	mov	ip, r2
10043e94:	4463      	add	r3, ip
10043e96:	00db      	lsls	r3, r3, #3
10043e98:	3303      	adds	r3, #3
10043e9a:	781a      	ldrb	r2, [r3, #0]
10043e9c:	187b      	adds	r3, r7, r1
10043e9e:	70da      	strb	r2, [r3, #3]
		event.folder = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+4));
10043ea0:	1cbb      	adds	r3, r7, #2
10043ea2:	881b      	ldrh	r3, [r3, #0]
10043ea4:	4a11      	ldr	r2, [pc, #68]	@ (10043eec <FLASH_ReadSchedule+0xe0>)
10043ea6:	4694      	mov	ip, r2
10043ea8:	4463      	add	r3, ip
10043eaa:	00db      	lsls	r3, r3, #3
10043eac:	3304      	adds	r3, #4
10043eae:	781a      	ldrb	r2, [r3, #0]
10043eb0:	187b      	adds	r3, r7, r1
10043eb2:	711a      	strb	r2, [r3, #4]
		event.track = *((uint8_t*)(SCHEDULEADDRESS+index*SCHEDULEEVENTSIZE+5));
10043eb4:	1cbb      	adds	r3, r7, #2
10043eb6:	881b      	ldrh	r3, [r3, #0]
10043eb8:	4a0c      	ldr	r2, [pc, #48]	@ (10043eec <FLASH_ReadSchedule+0xe0>)
10043eba:	4694      	mov	ip, r2
10043ebc:	4463      	add	r3, ip
10043ebe:	00db      	lsls	r3, r3, #3
10043ec0:	3305      	adds	r3, #5
10043ec2:	781a      	ldrb	r2, [r3, #0]
10043ec4:	187b      	adds	r3, r7, r1
10043ec6:	715a      	strb	r2, [r3, #5]

	}
	return event;
10043ec8:	687a      	ldr	r2, [r7, #4]
10043eca:	2310      	movs	r3, #16
10043ecc:	18fb      	adds	r3, r7, r3
10043ece:	0010      	movs	r0, r2
10043ed0:	0019      	movs	r1, r3
10043ed2:	2306      	movs	r3, #6
10043ed4:	001a      	movs	r2, r3
10043ed6:	f023 feba 	bl	10067c4e <memcpy>
}
10043eda:	6878      	ldr	r0, [r7, #4]
10043edc:	46bd      	mov	sp, r7
10043ede:	b007      	add	sp, #28
10043ee0:	bd90      	pop	{r4, r7, pc}
10043ee2:	46c0      	nop			@ (mov r8, r8)
10043ee4:	200003d0 	.word	0x200003d0
10043ee8:	200003cc 	.word	0x200003cc
10043eec:	0200de00 	.word	0x0200de00

10043ef0 <FLASH_ClearSchedule>:
 * @function: FLASH_ClearSchedule();
 * @brief: Clears all Schedule entries
 * @param: none
 * @return: success status
 */
uint8_t FLASH_ClearSchedule(){
10043ef0:	b5b0      	push	{r4, r5, r7, lr}
10043ef2:	b086      	sub	sp, #24
10043ef4:	af00      	add	r7, sp, #0
	ScheduleSize = 0;
10043ef6:	4b10      	ldr	r3, [pc, #64]	@ (10043f38 <FLASH_ClearSchedule+0x48>)
10043ef8:	2200      	movs	r2, #0
10043efa:	801a      	strh	r2, [r3, #0]
	FLASH_EraseInitTypeDef erase;
	erase.Page = SCHEDULEPAGE;
10043efc:	2108      	movs	r1, #8
10043efe:	187b      	adds	r3, r7, r1
10043f00:	225e      	movs	r2, #94	@ 0x5e
10043f02:	605a      	str	r2, [r3, #4]
	erase.NbPages = 1;
10043f04:	187b      	adds	r3, r7, r1
10043f06:	2201      	movs	r2, #1
10043f08:	609a      	str	r2, [r3, #8]
	erase.TypeErase = FLASH_TYPEERASE_PAGES;
10043f0a:	187b      	adds	r3, r7, r1
10043f0c:	2200      	movs	r2, #0
10043f0e:	601a      	str	r2, [r3, #0]
	uint32_t faultypage;
	HAL_StatusTypeDef status = HAL_FLASHEx_Erase(&erase, &faultypage);
10043f10:	2517      	movs	r5, #23
10043f12:	197c      	adds	r4, r7, r5
10043f14:	1d3a      	adds	r2, r7, #4
10043f16:	187b      	adds	r3, r7, r1
10043f18:	0011      	movs	r1, r2
10043f1a:	0018      	movs	r0, r3
10043f1c:	f003 fb50 	bl	100475c0 <HAL_FLASHEx_Erase>
10043f20:	0003      	movs	r3, r0
10043f22:	7023      	strb	r3, [r4, #0]
	return status == HAL_OK;
10043f24:	197b      	adds	r3, r7, r5
10043f26:	781b      	ldrb	r3, [r3, #0]
10043f28:	425a      	negs	r2, r3
10043f2a:	4153      	adcs	r3, r2
10043f2c:	b2db      	uxtb	r3, r3
}
10043f2e:	0018      	movs	r0, r3
10043f30:	46bd      	mov	sp, r7
10043f32:	b006      	add	sp, #24
10043f34:	bdb0      	pop	{r4, r5, r7, pc}
10043f36:	46c0      	nop			@ (mov r8, r8)
10043f38:	200003cc 	.word	0x200003cc

10043f3c <LL_AHB1_GRP1_EnableClock>:
  * @arg LL_AHB1_GRP1_PERIPH_RNG
  * @retval None
  * @note   LL_AHB1_GRP1_PERIPH_PKA
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
10043f3c:	b580      	push	{r7, lr}
10043f3e:	b084      	sub	sp, #16
10043f40:	af00      	add	r7, sp, #0
10043f42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
10043f44:	4b07      	ldr	r3, [pc, #28]	@ (10043f64 <LL_AHB1_GRP1_EnableClock+0x28>)
10043f46:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10043f48:	4b06      	ldr	r3, [pc, #24]	@ (10043f64 <LL_AHB1_GRP1_EnableClock+0x28>)
10043f4a:	687a      	ldr	r2, [r7, #4]
10043f4c:	430a      	orrs	r2, r1
10043f4e:	651a      	str	r2, [r3, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10043f50:	4b04      	ldr	r3, [pc, #16]	@ (10043f64 <LL_AHB1_GRP1_EnableClock+0x28>)
10043f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10043f54:	687a      	ldr	r2, [r7, #4]
10043f56:	4013      	ands	r3, r2
10043f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10043f5a:	68fb      	ldr	r3, [r7, #12]
}
10043f5c:	46c0      	nop			@ (mov r8, r8)
10043f5e:	46bd      	mov	sp, r7
10043f60:	b004      	add	sp, #16
10043f62:	bd80      	pop	{r7, pc}
10043f64:	48400000 	.word	0x48400000

10043f68 <GPIO_Init>:
 * @function: GPIO_Init()
 * @brief: initialized GPIO pins to receive 6 external buttons
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int GPIO_Init(){
10043f68:	b580      	push	{r7, lr}
10043f6a:	b086      	sub	sp, #24
10043f6c:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10043f6e:	4b1d      	ldr	r3, [pc, #116]	@ (10043fe4 <GPIO_Init+0x7c>)
10043f70:	781b      	ldrb	r3, [r3, #0]
10043f72:	2b00      	cmp	r3, #0
10043f74:	d001      	beq.n	10043f7a <GPIO_Init+0x12>
10043f76:	2301      	movs	r3, #1
10043f78:	e030      	b.n	10043fdc <GPIO_Init+0x74>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
10043f7a:	1d3b      	adds	r3, r7, #4
10043f7c:	0018      	movs	r0, r3
10043f7e:	2314      	movs	r3, #20
10043f80:	001a      	movs	r2, r3
10043f82:	2100      	movs	r1, #0
10043f84:	f023 fdee 	bl	10067b64 <memset>

	//GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
10043f88:	2008      	movs	r0, #8
10043f8a:	f7ff ffd7 	bl	10043f3c <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
10043f8e:	2004      	movs	r0, #4
10043f90:	f7ff ffd4 	bl	10043f3c <LL_AHB1_GRP1_EnableClock>


	//Configure GPIO pins on port A
	GPIO_InitStruct.Pin = BUTTON_1_PIN | BUTTON_5_PIN | BUTTON_6_PIN ;
10043f94:	1d3b      	adds	r3, r7, #4
10043f96:	22b0      	movs	r2, #176	@ 0xb0
10043f98:	0112      	lsls	r2, r2, #4
10043f9a:	601a      	str	r2, [r3, #0]
//	GPIO_InitStruct.Pin |= BUTTON_2_PIN | BUTTON_3_PIN;//on a separate line to easily disable to allow the debugger to run
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10043f9c:	1d3b      	adds	r3, r7, #4
10043f9e:	2200      	movs	r2, #0
10043fa0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10043fa2:	1d3b      	adds	r3, r7, #4
10043fa4:	2200      	movs	r2, #0
10043fa6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10043fa8:	1d3a      	adds	r2, r7, #4
10043faa:	2390      	movs	r3, #144	@ 0x90
10043fac:	05db      	lsls	r3, r3, #23
10043fae:	0011      	movs	r1, r2
10043fb0:	0018      	movs	r0, r3
10043fb2:	f003 fb85 	bl	100476c0 <HAL_GPIO_Init>

	//Configure GPIO pins : PB15 PB13
	GPIO_InitStruct.Pin = BUTTON_4_PIN;
10043fb6:	1d3b      	adds	r3, r7, #4
10043fb8:	2210      	movs	r2, #16
10043fba:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
10043fbc:	1d3b      	adds	r3, r7, #4
10043fbe:	2200      	movs	r2, #0
10043fc0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
10043fc2:	1d3b      	adds	r3, r7, #4
10043fc4:	2200      	movs	r2, #0
10043fc6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10043fc8:	1d3b      	adds	r3, r7, #4
10043fca:	4a07      	ldr	r2, [pc, #28]	@ (10043fe8 <GPIO_Init+0x80>)
10043fcc:	0019      	movs	r1, r3
10043fce:	0010      	movs	r0, r2
10043fd0:	f003 fb76 	bl	100476c0 <HAL_GPIO_Init>

	initialized = 1;
10043fd4:	4b03      	ldr	r3, [pc, #12]	@ (10043fe4 <GPIO_Init+0x7c>)
10043fd6:	2201      	movs	r2, #1
10043fd8:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
10043fda:	2301      	movs	r3, #1
}
10043fdc:	0018      	movs	r0, r3
10043fde:	46bd      	mov	sp, r7
10043fe0:	b006      	add	sp, #24
10043fe2:	bd80      	pop	{r7, pc}
10043fe4:	200003d1 	.word	0x200003d1
10043fe8:	48100000 	.word	0x48100000

10043fec <GPIO_ReadButtons>:
 * @Function: GPIO_ReadButtons
 * @Brief: Allows an easy way to read the external button states
 * @param: none
 * @return: An 8 bit integer where the LSB is button 0, and the 6th bit is button 5
 */
uint8_t GPIO_ReadButtons(void){
10043fec:	b5b0      	push	{r4, r5, r7, lr}
10043fee:	af00      	add	r7, sp, #0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
10043ff0:	2380      	movs	r3, #128	@ 0x80
10043ff2:	011a      	lsls	r2, r3, #4
10043ff4:	2390      	movs	r3, #144	@ 0x90
10043ff6:	05db      	lsls	r3, r3, #23
10043ff8:	0011      	movs	r1, r2
10043ffa:	0018      	movs	r0, r3
10043ffc:	f003 fde8 	bl	10047bd0 <HAL_GPIO_ReadPin>
10044000:	0003      	movs	r3, r0
10044002:	b25b      	sxtb	r3, r3
10044004:	015b      	lsls	r3, r3, #5
10044006:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
10044008:	2380      	movs	r3, #128	@ 0x80
1004400a:	009a      	lsls	r2, r3, #2
1004400c:	2390      	movs	r3, #144	@ 0x90
1004400e:	05db      	lsls	r3, r3, #23
10044010:	0011      	movs	r1, r2
10044012:	0018      	movs	r0, r3
10044014:	f003 fddc 	bl	10047bd0 <HAL_GPIO_ReadPin>
10044018:	0003      	movs	r3, r0
	return ((HAL_GPIO_ReadPin(BUTTON_6) << 5) |
1004401a:	b25b      	sxtb	r3, r3
1004401c:	011b      	lsls	r3, r3, #4
1004401e:	b25b      	sxtb	r3, r3
10044020:	4323      	orrs	r3, r4
10044022:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
10044024:	4b19      	ldr	r3, [pc, #100]	@ (1004408c <GPIO_ReadButtons+0xa0>)
10044026:	2110      	movs	r1, #16
10044028:	0018      	movs	r0, r3
1004402a:	f003 fdd1 	bl	10047bd0 <HAL_GPIO_ReadPin>
1004402e:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_5) << 4) |
10044030:	b25b      	sxtb	r3, r3
10044032:	00db      	lsls	r3, r3, #3
10044034:	b25b      	sxtb	r3, r3
10044036:	4323      	orrs	r3, r4
10044038:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
1004403a:	2390      	movs	r3, #144	@ 0x90
1004403c:	05db      	lsls	r3, r3, #23
1004403e:	2108      	movs	r1, #8
10044040:	0018      	movs	r0, r3
10044042:	f003 fdc5 	bl	10047bd0 <HAL_GPIO_ReadPin>
10044046:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_4) << 3) |
10044048:	b25b      	sxtb	r3, r3
1004404a:	009b      	lsls	r3, r3, #2
1004404c:	b25b      	sxtb	r3, r3
1004404e:	4323      	orrs	r3, r4
10044050:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
10044052:	2390      	movs	r3, #144	@ 0x90
10044054:	05db      	lsls	r3, r3, #23
10044056:	2104      	movs	r1, #4
10044058:	0018      	movs	r0, r3
1004405a:	f003 fdb9 	bl	10047bd0 <HAL_GPIO_ReadPin>
1004405e:	0003      	movs	r3, r0
			(HAL_GPIO_ReadPin(BUTTON_3) << 2) |
10044060:	b25b      	sxtb	r3, r3
10044062:	18db      	adds	r3, r3, r3
10044064:	b25b      	sxtb	r3, r3
10044066:	4323      	orrs	r3, r4
10044068:	b25c      	sxtb	r4, r3
			(HAL_GPIO_ReadPin(BUTTON_1) << 0));
1004406a:	2380      	movs	r3, #128	@ 0x80
1004406c:	005a      	lsls	r2, r3, #1
1004406e:	2390      	movs	r3, #144	@ 0x90
10044070:	05db      	lsls	r3, r3, #23
10044072:	0011      	movs	r1, r2
10044074:	0018      	movs	r0, r3
10044076:	f003 fdab 	bl	10047bd0 <HAL_GPIO_ReadPin>
1004407a:	0003      	movs	r3, r0
1004407c:	b25b      	sxtb	r3, r3
			(HAL_GPIO_ReadPin(BUTTON_2) << 1) |
1004407e:	4323      	orrs	r3, r4
10044080:	b25b      	sxtb	r3, r3
10044082:	b2db      	uxtb	r3, r3
}
10044084:	0018      	movs	r0, r3
10044086:	46bd      	mov	sp, r7
10044088:	bdb0      	pop	{r4, r5, r7, pc}
1004408a:	46c0      	nop			@ (mov r8, r8)
1004408c:	48100000 	.word	0x48100000

10044090 <I2CUARTtoI2C>:
 * @brief: if control is with USART, swaps control from the USART to I2C
 * @brief: If the module does swap the pin, a delay is added to insure the pin is initialized before leaving
 * @param: delay - a boolean value that indicates if the function should delay because the pin is used immediately after
 * @return: Init Status, whether the operation failed or succeeded
 */
void I2CUARTtoI2C(uint8_t delay){
10044090:	b590      	push	{r4, r7, lr}
10044092:	b085      	sub	sp, #20
10044094:	af00      	add	r7, sp, #0
10044096:	0002      	movs	r2, r0
10044098:	1dfb      	adds	r3, r7, #7
1004409a:	701a      	strb	r2, [r3, #0]
	if(PORTAPIN1.Alternate != GPIO_AF0_I2C1){
1004409c:	4b19      	ldr	r3, [pc, #100]	@ (10044104 <I2CUARTtoI2C+0x74>)
1004409e:	691b      	ldr	r3, [r3, #16]
100440a0:	2b00      	cmp	r3, #0
100440a2:	d02b      	beq.n	100440fc <I2CUARTtoI2C+0x6c>

		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
100440a4:	2390      	movs	r3, #144	@ 0x90
100440a6:	05db      	lsls	r3, r3, #23
100440a8:	2102      	movs	r1, #2
100440aa:	0018      	movs	r0, r3
100440ac:	f003 fcad 	bl	10047a0a <HAL_GPIO_DeInit>

		PORTAPIN1.Mode = GPIO_MODE_AF_OD;
100440b0:	4b14      	ldr	r3, [pc, #80]	@ (10044104 <I2CUARTtoI2C+0x74>)
100440b2:	2212      	movs	r2, #18
100440b4:	605a      	str	r2, [r3, #4]
		PORTAPIN1.Alternate = GPIO_AF0_I2C1;
100440b6:	4b13      	ldr	r3, [pc, #76]	@ (10044104 <I2CUARTtoI2C+0x74>)
100440b8:	2200      	movs	r2, #0
100440ba:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &PORTAPIN1);
100440bc:	4a11      	ldr	r2, [pc, #68]	@ (10044104 <I2CUARTtoI2C+0x74>)
100440be:	2390      	movs	r3, #144	@ 0x90
100440c0:	05db      	lsls	r3, r3, #23
100440c2:	0011      	movs	r1, r2
100440c4:	0018      	movs	r0, r3
100440c6:	f003 fafb 	bl	100476c0 <HAL_GPIO_Init>

		HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
100440ca:	2101      	movs	r1, #1
100440cc:	2000      	movs	r0, #0
100440ce:	f005 fdcf 	bl	10049c70 <HAL_PWREx_DisableGPIOPullUp>

		HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
100440d2:	2101      	movs	r1, #1
100440d4:	2000      	movs	r0, #0
100440d6:	f005 fdf9 	bl	10049ccc <HAL_PWREx_DisableGPIOPullDown>
		if(delay){
100440da:	1dfb      	adds	r3, r7, #7
100440dc:	781b      	ldrb	r3, [r3, #0]
100440de:	2b00      	cmp	r3, #0
100440e0:	d00c      	beq.n	100440fc <I2CUARTtoI2C+0x6c>
			uint32_t start = TIMERS_GetMilliSeconds();
100440e2:	f001 fb61 	bl	100457a8 <TIMERS_GetMilliSeconds>
100440e6:	0003      	movs	r3, r0
100440e8:	60fb      	str	r3, [r7, #12]
			while(start+20 > TIMERS_GetMilliSeconds());
100440ea:	46c0      	nop			@ (mov r8, r8)
100440ec:	68fb      	ldr	r3, [r7, #12]
100440ee:	3314      	adds	r3, #20
100440f0:	001c      	movs	r4, r3
100440f2:	f001 fb59 	bl	100457a8 <TIMERS_GetMilliSeconds>
100440f6:	0003      	movs	r3, r0
100440f8:	429c      	cmp	r4, r3
100440fa:	d8f7      	bhi.n	100440ec <I2CUARTtoI2C+0x5c>
		}
	}
}
100440fc:	46c0      	nop			@ (mov r8, r8)
100440fe:	46bd      	mov	sp, r7
10044100:	b005      	add	sp, #20
10044102:	bd90      	pop	{r4, r7, pc}
10044104:	20002c78 	.word	0x20002c78

10044108 <I2CUARTtoUSART>:
 * @brief: if control is with I2C, swaps control from the I2C to the USART
 * @brief: If the module does swap the pin, a delay is added to insure the pin is initialized before leaving
 * @param: delay - a boolean value that indicates if the function should delay because the pin is used immediately after
 * @return: Init Status, whether the operation failed or succeeded
 */
void I2CUARTtoUSART(uint8_t delay){
10044108:	b590      	push	{r4, r7, lr}
1004410a:	b085      	sub	sp, #20
1004410c:	af00      	add	r7, sp, #0
1004410e:	0002      	movs	r2, r0
10044110:	1dfb      	adds	r3, r7, #7
10044112:	701a      	strb	r2, [r3, #0]

	if(PORTAPIN1.Alternate != GPIO_AF2_USART1){
10044114:	4b17      	ldr	r3, [pc, #92]	@ (10044174 <I2CUARTtoUSART+0x6c>)
10044116:	691b      	ldr	r3, [r3, #16]
10044118:	2b02      	cmp	r3, #2
1004411a:	d026      	beq.n	1004416a <I2CUARTtoUSART+0x62>
		HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
1004411c:	2390      	movs	r3, #144	@ 0x90
1004411e:	05db      	lsls	r3, r3, #23
10044120:	2102      	movs	r1, #2
10044122:	0018      	movs	r0, r3
10044124:	f003 fc71 	bl	10047a0a <HAL_GPIO_DeInit>

		PORTAPIN1.Mode = GPIO_MODE_AF_PP;
10044128:	4b12      	ldr	r3, [pc, #72]	@ (10044174 <I2CUARTtoUSART+0x6c>)
1004412a:	2202      	movs	r2, #2
1004412c:	605a      	str	r2, [r3, #4]
		PORTAPIN1.Alternate = GPIO_AF2_USART1;
1004412e:	4b11      	ldr	r3, [pc, #68]	@ (10044174 <I2CUARTtoUSART+0x6c>)
10044130:	2202      	movs	r2, #2
10044132:	611a      	str	r2, [r3, #16]
		HAL_GPIO_Init(GPIOA, &PORTAPIN1);
10044134:	4a0f      	ldr	r2, [pc, #60]	@ (10044174 <I2CUARTtoUSART+0x6c>)
10044136:	2390      	movs	r3, #144	@ 0x90
10044138:	05db      	lsls	r3, r3, #23
1004413a:	0011      	movs	r1, r2
1004413c:	0018      	movs	r0, r3
1004413e:	f003 fabf 	bl	100476c0 <HAL_GPIO_Init>
    	BSP_LED_Off(LED_BLUE);
10044142:	2000      	movs	r0, #0
10044144:	f002 fdd2 	bl	10046cec <BSP_LED_Off>
		if(delay){
10044148:	1dfb      	adds	r3, r7, #7
1004414a:	781b      	ldrb	r3, [r3, #0]
1004414c:	2b00      	cmp	r3, #0
1004414e:	d00c      	beq.n	1004416a <I2CUARTtoUSART+0x62>
			uint32_t start = TIMERS_GetMilliSeconds();
10044150:	f001 fb2a 	bl	100457a8 <TIMERS_GetMilliSeconds>
10044154:	0003      	movs	r3, r0
10044156:	60fb      	str	r3, [r7, #12]
			while(start+12 > TIMERS_GetMilliSeconds());
10044158:	46c0      	nop			@ (mov r8, r8)
1004415a:	68fb      	ldr	r3, [r7, #12]
1004415c:	330c      	adds	r3, #12
1004415e:	001c      	movs	r4, r3
10044160:	f001 fb22 	bl	100457a8 <TIMERS_GetMilliSeconds>
10044164:	0003      	movs	r3, r0
10044166:	429c      	cmp	r4, r3
10044168:	d8f7      	bhi.n	1004415a <I2CUARTtoUSART+0x52>
		}
	}

}
1004416a:	46c0      	nop			@ (mov r8, r8)
1004416c:	46bd      	mov	sp, r7
1004416e:	b005      	add	sp, #20
10044170:	bd90      	pop	{r4, r7, pc}
10044172:	46c0      	nop			@ (mov r8, r8)
10044174:	20002c78 	.word	0x20002c78

10044178 <HAL_I2C_MemTxCpltCallback>:
 * @Function: HAL_I2C_MemTxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory transmit operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
10044178:	b590      	push	{r4, r7, lr}
1004417a:	b085      	sub	sp, #20
1004417c:	af02      	add	r7, sp, #8
1004417e:	6078      	str	r0, [r7, #4]
	//here is where to implement something to do with the transmitted data

//	BSP_LED_Toggle(LED_RED);
	//if there is more in the buffer
	if(TxReq.tail != TxReq.head){
10044180:	4b24      	ldr	r3, [pc, #144]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
10044182:	4a25      	ldr	r2, [pc, #148]	@ (10044218 <HAL_I2C_MemTxCpltCallback+0xa0>)
10044184:	5a9a      	ldrh	r2, [r3, r2]
10044186:	4923      	ldr	r1, [pc, #140]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
10044188:	23c0      	movs	r3, #192	@ 0xc0
1004418a:	015b      	lsls	r3, r3, #5
1004418c:	5acb      	ldrh	r3, [r1, r3]
1004418e:	429a      	cmp	r2, r3
10044190:	d03c      	beq.n	1004420c <HAL_I2C_MemTxCpltCallback+0x94>
		I2CUARTtoI2C(1);
10044192:	2001      	movs	r0, #1
10044194:	f7ff ff7c 	bl	10044090 <I2CUARTtoI2C>
		HAL_I2C_Mem_Write_IT(&hi2c1,
							 TxReq.data[TxReq.tail].targetadr<<1,
10044198:	4b1e      	ldr	r3, [pc, #120]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
1004419a:	4a1f      	ldr	r2, [pc, #124]	@ (10044218 <HAL_I2C_MemTxCpltCallback+0xa0>)
1004419c:	5a9b      	ldrh	r3, [r3, r2]
1004419e:	0019      	movs	r1, r3
100441a0:	4a1c      	ldr	r2, [pc, #112]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
100441a2:	000b      	movs	r3, r1
100441a4:	005b      	lsls	r3, r3, #1
100441a6:	185b      	adds	r3, r3, r1
100441a8:	5c9b      	ldrb	r3, [r3, r2]
		HAL_I2C_Mem_Write_IT(&hi2c1,
100441aa:	18db      	adds	r3, r3, r3
100441ac:	b299      	uxth	r1, r3
							 TxReq.data[TxReq.tail].registeradr,
100441ae:	4b19      	ldr	r3, [pc, #100]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
100441b0:	4a19      	ldr	r2, [pc, #100]	@ (10044218 <HAL_I2C_MemTxCpltCallback+0xa0>)
100441b2:	5a9b      	ldrh	r3, [r3, r2]
100441b4:	0018      	movs	r0, r3
100441b6:	4a17      	ldr	r2, [pc, #92]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
100441b8:	0003      	movs	r3, r0
100441ba:	005b      	lsls	r3, r3, #1
100441bc:	181b      	adds	r3, r3, r0
100441be:	18d3      	adds	r3, r2, r3
100441c0:	3301      	adds	r3, #1
100441c2:	781b      	ldrb	r3, [r3, #0]
		HAL_I2C_Mem_Write_IT(&hi2c1,
100441c4:	001c      	movs	r4, r3
							 I2C_MEMADD_SIZE_8BIT,
							 &(TxReq.data[TxReq.tail].data),
100441c6:	4b13      	ldr	r3, [pc, #76]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
100441c8:	4a13      	ldr	r2, [pc, #76]	@ (10044218 <HAL_I2C_MemTxCpltCallback+0xa0>)
100441ca:	5a9b      	ldrh	r3, [r3, r2]
100441cc:	001a      	movs	r2, r3
		HAL_I2C_Mem_Write_IT(&hi2c1,
100441ce:	0013      	movs	r3, r2
100441d0:	005b      	lsls	r3, r3, #1
100441d2:	189b      	adds	r3, r3, r2
100441d4:	4a0f      	ldr	r2, [pc, #60]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
100441d6:	189b      	adds	r3, r3, r2
100441d8:	3302      	adds	r3, #2
100441da:	4810      	ldr	r0, [pc, #64]	@ (1004421c <HAL_I2C_MemTxCpltCallback+0xa4>)
100441dc:	2201      	movs	r2, #1
100441de:	9201      	str	r2, [sp, #4]
100441e0:	9300      	str	r3, [sp, #0]
100441e2:	2301      	movs	r3, #1
100441e4:	0022      	movs	r2, r4
100441e6:	f003 fe1d 	bl	10047e24 <HAL_I2C_Mem_Write_IT>
							 1);
		TxReq.tail++;
100441ea:	4b0a      	ldr	r3, [pc, #40]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
100441ec:	4a0a      	ldr	r2, [pc, #40]	@ (10044218 <HAL_I2C_MemTxCpltCallback+0xa0>)
100441ee:	5a9b      	ldrh	r3, [r3, r2]
100441f0:	3301      	adds	r3, #1
100441f2:	b299      	uxth	r1, r3
100441f4:	4b07      	ldr	r3, [pc, #28]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
100441f6:	4a08      	ldr	r2, [pc, #32]	@ (10044218 <HAL_I2C_MemTxCpltCallback+0xa0>)
100441f8:	5299      	strh	r1, [r3, r2]
		TxReq.tail %= TXCIRCBUFFERSIZE;
100441fa:	4b06      	ldr	r3, [pc, #24]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
100441fc:	4a06      	ldr	r2, [pc, #24]	@ (10044218 <HAL_I2C_MemTxCpltCallback+0xa0>)
100441fe:	5a9b      	ldrh	r3, [r3, r2]
10044200:	055b      	lsls	r3, r3, #21
10044202:	0d5b      	lsrs	r3, r3, #21
10044204:	b299      	uxth	r1, r3
10044206:	4b03      	ldr	r3, [pc, #12]	@ (10044214 <HAL_I2C_MemTxCpltCallback+0x9c>)
10044208:	4a03      	ldr	r2, [pc, #12]	@ (10044218 <HAL_I2C_MemTxCpltCallback+0xa0>)
1004420a:	5299      	strh	r1, [r3, r2]
//		if(TxReq.full){
//			TxReq.full = false;
//		}
	}
}
1004420c:	46c0      	nop			@ (mov r8, r8)
1004420e:	46bd      	mov	sp, r7
10044210:	b003      	add	sp, #12
10044212:	bd90      	pop	{r4, r7, pc}
10044214:	200004f0 	.word	0x200004f0
10044218:	00001802 	.word	0x00001802
1004421c:	200003d4 	.word	0x200003d4

10044220 <HAL_I2C_MemRxCpltCallback>:
 * @Function: HAL_I2C_MemRxCpltCallback
 * @Brief: Overwrites a weak HAL function. Called at the end of an i2c memory receive operation
 * @param: hi2c: I2C module that is in use
 * @return: none
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
10044220:	b590      	push	{r4, r7, lr}
10044222:	b087      	sub	sp, #28
10044224:	af02      	add	r7, sp, #8
10044226:	6078      	str	r0, [r7, #4]

	//use the received data construct and event to post
	Event_t ret = {EVENT_I2C, RxReq.data[RxReq.tail].registeradr << 8 &RxReq.data[RxReq.tail].data};
10044228:	240c      	movs	r4, #12
1004422a:	193b      	adds	r3, r7, r4
1004422c:	2205      	movs	r2, #5
1004422e:	701a      	strb	r2, [r3, #0]
10044230:	4b44      	ldr	r3, [pc, #272]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044232:	22c2      	movs	r2, #194	@ 0xc2
10044234:	5a9b      	ldrh	r3, [r3, r2]
10044236:	0019      	movs	r1, r3
10044238:	4a42      	ldr	r2, [pc, #264]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
1004423a:	000b      	movs	r3, r1
1004423c:	005b      	lsls	r3, r3, #1
1004423e:	185b      	adds	r3, r3, r1
10044240:	009b      	lsls	r3, r3, #2
10044242:	18d3      	adds	r3, r2, r3
10044244:	3301      	adds	r3, #1
10044246:	781b      	ldrb	r3, [r3, #0]
10044248:	b21b      	sxth	r3, r3
1004424a:	021b      	lsls	r3, r3, #8
1004424c:	b21a      	sxth	r2, r3
1004424e:	4b3d      	ldr	r3, [pc, #244]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044250:	21c2      	movs	r1, #194	@ 0xc2
10044252:	5a5b      	ldrh	r3, [r3, r1]
10044254:	0018      	movs	r0, r3
10044256:	493b      	ldr	r1, [pc, #236]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044258:	0003      	movs	r3, r0
1004425a:	005b      	lsls	r3, r3, #1
1004425c:	181b      	adds	r3, r3, r0
1004425e:	009b      	lsls	r3, r3, #2
10044260:	18cb      	adds	r3, r1, r3
10044262:	3308      	adds	r3, #8
10044264:	781b      	ldrb	r3, [r3, #0]
10044266:	b21b      	sxth	r3, r3
10044268:	4013      	ands	r3, r2
1004426a:	b21b      	sxth	r3, r3
1004426c:	b29a      	uxth	r2, r3
1004426e:	193b      	adds	r3, r7, r4
10044270:	805a      	strh	r2, [r3, #2]
	//post the event to the function given
	RxReq.data[RxReq.tail].PostTo(ret);
10044272:	4b34      	ldr	r3, [pc, #208]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044274:	22c2      	movs	r2, #194	@ 0xc2
10044276:	5a9b      	ldrh	r3, [r3, r2]
10044278:	0019      	movs	r1, r3
1004427a:	4a32      	ldr	r2, [pc, #200]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
1004427c:	000b      	movs	r3, r1
1004427e:	005b      	lsls	r3, r3, #1
10044280:	185b      	adds	r3, r3, r1
10044282:	009b      	lsls	r3, r3, #2
10044284:	18d3      	adds	r3, r2, r3
10044286:	3304      	adds	r3, #4
10044288:	681a      	ldr	r2, [r3, #0]
1004428a:	193b      	adds	r3, r7, r4
1004428c:	6818      	ldr	r0, [r3, #0]
1004428e:	4790      	blx	r2
	//decrement the circular buffer
	if(RxReq.tail == RxReq.head){
10044290:	4b2c      	ldr	r3, [pc, #176]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044292:	22c2      	movs	r2, #194	@ 0xc2
10044294:	5a9a      	ldrh	r2, [r3, r2]
10044296:	4b2b      	ldr	r3, [pc, #172]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044298:	21c0      	movs	r1, #192	@ 0xc0
1004429a:	5a5b      	ldrh	r3, [r3, r1]
1004429c:	429a      	cmp	r2, r3
1004429e:	d103      	bne.n	100442a8 <HAL_I2C_MemRxCpltCallback+0x88>
		RxReq.full = false;
100442a0:	4b28      	ldr	r3, [pc, #160]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442a2:	22c4      	movs	r2, #196	@ 0xc4
100442a4:	2100      	movs	r1, #0
100442a6:	5499      	strb	r1, [r3, r2]
	}
	RxReq.tail++;
100442a8:	4b26      	ldr	r3, [pc, #152]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442aa:	22c2      	movs	r2, #194	@ 0xc2
100442ac:	5a9b      	ldrh	r3, [r3, r2]
100442ae:	3301      	adds	r3, #1
100442b0:	b299      	uxth	r1, r3
100442b2:	4b24      	ldr	r3, [pc, #144]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442b4:	22c2      	movs	r2, #194	@ 0xc2
100442b6:	5299      	strh	r1, [r3, r2]
	RxReq.tail %= RXCIRCBUFFERSIZE;
100442b8:	4b22      	ldr	r3, [pc, #136]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442ba:	22c2      	movs	r2, #194	@ 0xc2
100442bc:	5a9b      	ldrh	r3, [r3, r2]
100442be:	220f      	movs	r2, #15
100442c0:	4013      	ands	r3, r2
100442c2:	b299      	uxth	r1, r3
100442c4:	4b1f      	ldr	r3, [pc, #124]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442c6:	22c2      	movs	r2, #194	@ 0xc2
100442c8:	5299      	strh	r1, [r3, r2]
	if(RxReq.head != RxReq.tail){//if the buffer is not empty (cannot be full as we just pulled from the buffer)
100442ca:	4b1e      	ldr	r3, [pc, #120]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442cc:	22c0      	movs	r2, #192	@ 0xc0
100442ce:	5a9a      	ldrh	r2, [r3, r2]
100442d0:	4b1c      	ldr	r3, [pc, #112]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442d2:	21c2      	movs	r1, #194	@ 0xc2
100442d4:	5a5b      	ldrh	r3, [r3, r1]
100442d6:	429a      	cmp	r2, r3
100442d8:	d02f      	beq.n	1004433a <HAL_I2C_MemRxCpltCallback+0x11a>
		I2CUARTtoI2C(1);
100442da:	2001      	movs	r0, #1
100442dc:	f7ff fed8 	bl	10044090 <I2CUARTtoI2C>
		HAL_I2C_Mem_Read_IT(&hi2c1,
							RxReq.data[RxReq.head].targetadr<<1,
100442e0:	4b18      	ldr	r3, [pc, #96]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442e2:	22c0      	movs	r2, #192	@ 0xc0
100442e4:	5a9b      	ldrh	r3, [r3, r2]
100442e6:	0019      	movs	r1, r3
100442e8:	4a16      	ldr	r2, [pc, #88]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442ea:	000b      	movs	r3, r1
100442ec:	005b      	lsls	r3, r3, #1
100442ee:	185b      	adds	r3, r3, r1
100442f0:	009b      	lsls	r3, r3, #2
100442f2:	5c9b      	ldrb	r3, [r3, r2]
		HAL_I2C_Mem_Read_IT(&hi2c1,
100442f4:	18db      	adds	r3, r3, r3
100442f6:	b299      	uxth	r1, r3
							RxReq.data[RxReq.head].registeradr,
100442f8:	4b12      	ldr	r3, [pc, #72]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
100442fa:	22c0      	movs	r2, #192	@ 0xc0
100442fc:	5a9b      	ldrh	r3, [r3, r2]
100442fe:	0018      	movs	r0, r3
10044300:	4a10      	ldr	r2, [pc, #64]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044302:	0003      	movs	r3, r0
10044304:	005b      	lsls	r3, r3, #1
10044306:	181b      	adds	r3, r3, r0
10044308:	009b      	lsls	r3, r3, #2
1004430a:	18d3      	adds	r3, r2, r3
1004430c:	3301      	adds	r3, #1
1004430e:	781b      	ldrb	r3, [r3, #0]
		HAL_I2C_Mem_Read_IT(&hi2c1,
10044310:	001c      	movs	r4, r3
							I2C_MEMADD_SIZE_8BIT,
							&(RxReq.data[RxReq.head].data),
10044312:	4b0c      	ldr	r3, [pc, #48]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044314:	22c0      	movs	r2, #192	@ 0xc0
10044316:	5a9b      	ldrh	r3, [r3, r2]
10044318:	001a      	movs	r2, r3
		HAL_I2C_Mem_Read_IT(&hi2c1,
1004431a:	0013      	movs	r3, r2
1004431c:	005b      	lsls	r3, r3, #1
1004431e:	189b      	adds	r3, r3, r2
10044320:	009b      	lsls	r3, r3, #2
10044322:	3308      	adds	r3, #8
10044324:	001a      	movs	r2, r3
10044326:	4b07      	ldr	r3, [pc, #28]	@ (10044344 <HAL_I2C_MemRxCpltCallback+0x124>)
10044328:	18d3      	adds	r3, r2, r3
1004432a:	4807      	ldr	r0, [pc, #28]	@ (10044348 <HAL_I2C_MemRxCpltCallback+0x128>)
1004432c:	2201      	movs	r2, #1
1004432e:	9201      	str	r2, [sp, #4]
10044330:	9300      	str	r3, [sp, #0]
10044332:	2301      	movs	r3, #1
10044334:	0022      	movs	r2, r4
10044336:	f003 fe17 	bl	10047f68 <HAL_I2C_Mem_Read_IT>
							1);
	}
}
1004433a:	46c0      	nop			@ (mov r8, r8)
1004433c:	46bd      	mov	sp, r7
1004433e:	b005      	add	sp, #20
10044340:	bd90      	pop	{r4, r7, pc}
10044342:	46c0      	nop			@ (mov r8, r8)
10044344:	20000428 	.word	0x20000428
10044348:	200003d4 	.word	0x200003d4

1004434c <I2C1_IRQHandler>:
 * @Brief: Overwrites a weak HAL function. handles I2C1 interrupts
 * @param: none
 * @return: none
 */
void I2C1_IRQHandler(void)
{
1004434c:	b580      	push	{r7, lr}
1004434e:	af00      	add	r7, sp, #0
	if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
10044350:	4b09      	ldr	r3, [pc, #36]	@ (10044378 <I2C1_IRQHandler+0x2c>)
10044352:	681b      	ldr	r3, [r3, #0]
10044354:	699a      	ldr	r2, [r3, #24]
10044356:	23e0      	movs	r3, #224	@ 0xe0
10044358:	00db      	lsls	r3, r3, #3
1004435a:	4013      	ands	r3, r2
1004435c:	d004      	beq.n	10044368 <I2C1_IRQHandler+0x1c>
	{
		HAL_I2C_ER_IRQHandler(&hi2c1);//error handler
1004435e:	4b06      	ldr	r3, [pc, #24]	@ (10044378 <I2C1_IRQHandler+0x2c>)
10044360:	0018      	movs	r0, r3
10044362:	f003 feb9 	bl	100480d8 <HAL_I2C_ER_IRQHandler>
	}
	else
	{
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
	}
}
10044366:	e003      	b.n	10044370 <I2C1_IRQHandler+0x24>
		HAL_I2C_EV_IRQHandler(&hi2c1);//event handler
10044368:	4b03      	ldr	r3, [pc, #12]	@ (10044378 <I2C1_IRQHandler+0x2c>)
1004436a:	0018      	movs	r0, r3
1004436c:	f003 fe9a 	bl	100480a4 <HAL_I2C_EV_IRQHandler>
}
10044370:	46c0      	nop			@ (mov r8, r8)
10044372:	46bd      	mov	sp, r7
10044374:	bd80      	pop	{r7, pc}
10044376:	46c0      	nop			@ (mov r8, r8)
10044378:	200003d4 	.word	0x200003d4

1004437c <I2C_Init>:
 * @function: I2C_Init()
 * @brief: initialize the I2C peripheral to receive and transmit
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int I2C_Init(void){
1004437c:	b590      	push	{r4, r7, lr}
1004437e:	b083      	sub	sp, #12
10044380:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10044382:	4b3c      	ldr	r3, [pc, #240]	@ (10044474 <I2C_Init+0xf8>)
10044384:	781b      	ldrb	r3, [r3, #0]
10044386:	2b00      	cmp	r3, #0
10044388:	d001      	beq.n	1004438e <I2C_Init+0x12>
1004438a:	2301      	movs	r3, #1
1004438c:	e06e      	b.n	1004446c <I2C_Init+0xf0>
	TIMERS_Init();
1004438e:	f001 f9bf 	bl	10045710 <TIMERS_Init>
	hi2c1.Instance = I2C1;
10044392:	4b39      	ldr	r3, [pc, #228]	@ (10044478 <I2C_Init+0xfc>)
10044394:	2282      	movs	r2, #130	@ 0x82
10044396:	05d2      	lsls	r2, r2, #23
10044398:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00303D5B;
1004439a:	4b37      	ldr	r3, [pc, #220]	@ (10044478 <I2C_Init+0xfc>)
1004439c:	4a37      	ldr	r2, [pc, #220]	@ (1004447c <I2C_Init+0x100>)
1004439e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
100443a0:	4b35      	ldr	r3, [pc, #212]	@ (10044478 <I2C_Init+0xfc>)
100443a2:	2200      	movs	r2, #0
100443a4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
100443a6:	4b34      	ldr	r3, [pc, #208]	@ (10044478 <I2C_Init+0xfc>)
100443a8:	2201      	movs	r2, #1
100443aa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
100443ac:	4b32      	ldr	r3, [pc, #200]	@ (10044478 <I2C_Init+0xfc>)
100443ae:	2200      	movs	r2, #0
100443b0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
100443b2:	4b31      	ldr	r3, [pc, #196]	@ (10044478 <I2C_Init+0xfc>)
100443b4:	2200      	movs	r2, #0
100443b6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
100443b8:	4b2f      	ldr	r3, [pc, #188]	@ (10044478 <I2C_Init+0xfc>)
100443ba:	2200      	movs	r2, #0
100443bc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
100443be:	4b2e      	ldr	r3, [pc, #184]	@ (10044478 <I2C_Init+0xfc>)
100443c0:	2200      	movs	r2, #0
100443c2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
100443c4:	4b2c      	ldr	r3, [pc, #176]	@ (10044478 <I2C_Init+0xfc>)
100443c6:	2200      	movs	r2, #0
100443c8:	621a      	str	r2, [r3, #32]
	HAL_StatusTypeDef ret = HAL_I2C_Init(&hi2c1);
100443ca:	1dfc      	adds	r4, r7, #7
100443cc:	4b2a      	ldr	r3, [pc, #168]	@ (10044478 <I2C_Init+0xfc>)
100443ce:	0018      	movs	r0, r3
100443d0:	f003 fc82 	bl	10047cd8 <HAL_I2C_Init>
100443d4:	0003      	movs	r3, r0
100443d6:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
100443d8:	1dfb      	adds	r3, r7, #7
100443da:	781b      	ldrb	r3, [r3, #0]
100443dc:	2b00      	cmp	r3, #0
100443de:	d001      	beq.n	100443e4 <I2C_Init+0x68>
	{
		return INIT_ERROR;
100443e0:	2300      	movs	r3, #0
100443e2:	e043      	b.n	1004446c <I2C_Init+0xf0>
	}
	// Configure Analog filter
	ret = HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE);
100443e4:	1dfc      	adds	r4, r7, #7
100443e6:	4b24      	ldr	r3, [pc, #144]	@ (10044478 <I2C_Init+0xfc>)
100443e8:	2100      	movs	r1, #0
100443ea:	0018      	movs	r0, r3
100443ec:	f005 fb4c 	bl	10049a88 <HAL_I2CEx_ConfigAnalogFilter>
100443f0:	0003      	movs	r3, r0
100443f2:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
100443f4:	1dfb      	adds	r3, r7, #7
100443f6:	781b      	ldrb	r3, [r3, #0]
100443f8:	2b00      	cmp	r3, #0
100443fa:	d001      	beq.n	10044400 <I2C_Init+0x84>
	{
		return INIT_ERROR;
100443fc:	2300      	movs	r3, #0
100443fe:	e035      	b.n	1004446c <I2C_Init+0xf0>
	}

	// Configure Digital filter
	ret = HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0);
10044400:	1dfc      	adds	r4, r7, #7
10044402:	4b1d      	ldr	r3, [pc, #116]	@ (10044478 <I2C_Init+0xfc>)
10044404:	2100      	movs	r1, #0
10044406:	0018      	movs	r0, r3
10044408:	f005 fb8a 	bl	10049b20 <HAL_I2CEx_ConfigDigitalFilter>
1004440c:	0003      	movs	r3, r0
1004440e:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK)
10044410:	1dfb      	adds	r3, r7, #7
10044412:	781b      	ldrb	r3, [r3, #0]
10044414:	2b00      	cmp	r3, #0
10044416:	d001      	beq.n	1004441c <I2C_Init+0xa0>
	{
		return INIT_ERROR;
10044418:	2300      	movs	r3, #0
1004441a:	e027      	b.n	1004446c <I2C_Init+0xf0>
	}
	//set up circular buffers
	RxReq.full = false;
1004441c:	4b18      	ldr	r3, [pc, #96]	@ (10044480 <I2C_Init+0x104>)
1004441e:	22c4      	movs	r2, #196	@ 0xc4
10044420:	2100      	movs	r1, #0
10044422:	5499      	strb	r1, [r3, r2]
	RxReq.tail = 0;
10044424:	4b16      	ldr	r3, [pc, #88]	@ (10044480 <I2C_Init+0x104>)
10044426:	22c2      	movs	r2, #194	@ 0xc2
10044428:	2100      	movs	r1, #0
1004442a:	5299      	strh	r1, [r3, r2]
	RxReq.head = 0;
1004442c:	4b14      	ldr	r3, [pc, #80]	@ (10044480 <I2C_Init+0x104>)
1004442e:	22c0      	movs	r2, #192	@ 0xc0
10044430:	2100      	movs	r1, #0
10044432:	5299      	strh	r1, [r3, r2]

	TxReq.full = false;
10044434:	4b13      	ldr	r3, [pc, #76]	@ (10044484 <I2C_Init+0x108>)
10044436:	4a14      	ldr	r2, [pc, #80]	@ (10044488 <I2C_Init+0x10c>)
10044438:	2100      	movs	r1, #0
1004443a:	5499      	strb	r1, [r3, r2]
	TxReq.tail = 0;
1004443c:	4b11      	ldr	r3, [pc, #68]	@ (10044484 <I2C_Init+0x108>)
1004443e:	4a13      	ldr	r2, [pc, #76]	@ (1004448c <I2C_Init+0x110>)
10044440:	2100      	movs	r1, #0
10044442:	5299      	strh	r1, [r3, r2]
	TxReq.head = 0;
10044444:	4a0f      	ldr	r2, [pc, #60]	@ (10044484 <I2C_Init+0x108>)
10044446:	23c0      	movs	r3, #192	@ 0xc0
10044448:	015b      	lsls	r3, r3, #5
1004444a:	2100      	movs	r1, #0
1004444c:	52d1      	strh	r1, [r2, r3]
	initialized = 1;
1004444e:	4b09      	ldr	r3, [pc, #36]	@ (10044474 <I2C_Init+0xf8>)
10044450:	2201      	movs	r2, #1
10044452:	701a      	strb	r2, [r3, #0]
	I2CUARTtoI2C(1);
10044454:	2001      	movs	r0, #1
10044456:	f7ff fe1b 	bl	10044090 <I2CUARTtoI2C>
	//enables interrupts
	//hi2c1.Instance->CR1 = hi2c1.Instance->CR1 | I2C_CR1_RXIE_Msk | I2C_CR1_TXIE_Msk;
	HAL_NVIC_SetPriority(I2C1_IRQn, 2, 0);
1004445a:	2200      	movs	r2, #0
1004445c:	2102      	movs	r1, #2
1004445e:	2003      	movs	r0, #3
10044460:	f002 ff10 	bl	10047284 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2C1_IRQn);
10044464:	2003      	movs	r0, #3
10044466:	f002 ff22 	bl	100472ae <HAL_NVIC_EnableIRQ>
//	__HAL_I2C_ENABLE_IT(&hi2c1, I2C_IT_RXI);
//	__HAL_I2C_ENABLE_IT(&hi2c1, I2C_IT_TXI);
	return INIT_OK;
1004446a:	2301      	movs	r3, #1
}
1004446c:	0018      	movs	r0, r3
1004446e:	46bd      	mov	sp, r7
10044470:	b003      	add	sp, #12
10044472:	bd90      	pop	{r4, r7, pc}
10044474:	20001cf6 	.word	0x20001cf6
10044478:	200003d4 	.word	0x200003d4
1004447c:	00303d5b 	.word	0x00303d5b
10044480:	20000428 	.word	0x20000428
10044484:	200004f0 	.word	0x200004f0
10044488:	00001804 	.word	0x00001804
1004448c:	00001802 	.word	0x00001802

10044490 <I2C_Transmit>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to write to
 * 		   uint8_t data: to to be transmitted
 * @return: a flag if the data has been transmitted
 */
HAL_StatusTypeDef I2C_Transmit(uint8_t targetadr, uint8_t registeradr, uint8_t data){
10044490:	b5b0      	push	{r4, r5, r7, lr}
10044492:	b086      	sub	sp, #24
10044494:	af02      	add	r7, sp, #8
10044496:	0004      	movs	r4, r0
10044498:	0008      	movs	r0, r1
1004449a:	0011      	movs	r1, r2
1004449c:	1dfb      	adds	r3, r7, #7
1004449e:	1c22      	adds	r2, r4, #0
100444a0:	701a      	strb	r2, [r3, #0]
100444a2:	1dbb      	adds	r3, r7, #6
100444a4:	1c02      	adds	r2, r0, #0
100444a6:	701a      	strb	r2, [r3, #0]
100444a8:	1d7b      	adds	r3, r7, #5
100444aa:	1c0a      	adds	r2, r1, #0
100444ac:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
100444ae:	4b73      	ldr	r3, [pc, #460]	@ (1004467c <I2C_Transmit+0x1ec>)
100444b0:	781b      	ldrb	r3, [r3, #0]
100444b2:	2b00      	cmp	r3, #0
100444b4:	d101      	bne.n	100444ba <I2C_Transmit+0x2a>
100444b6:	2301      	movs	r3, #1
100444b8:	e0db      	b.n	10044672 <I2C_Transmit+0x1e2>
	HAL_StatusTypeDef status = HAL_OK;
100444ba:	230f      	movs	r3, #15
100444bc:	18fb      	adds	r3, r7, r3
100444be:	2200      	movs	r2, #0
100444c0:	701a      	strb	r2, [r3, #0]
	//will not attempt to receive if the buffer is full
	static uint16_t count =0;
	if(finalcount == 0){
100444c2:	4b6f      	ldr	r3, [pc, #444]	@ (10044680 <I2C_Transmit+0x1f0>)
100444c4:	881b      	ldrh	r3, [r3, #0]
100444c6:	2b00      	cmp	r3, #0
100444c8:	d105      	bne.n	100444d6 <I2C_Transmit+0x46>
		count++;
100444ca:	4b6e      	ldr	r3, [pc, #440]	@ (10044684 <I2C_Transmit+0x1f4>)
100444cc:	881b      	ldrh	r3, [r3, #0]
100444ce:	3301      	adds	r3, #1
100444d0:	b29a      	uxth	r2, r3
100444d2:	4b6c      	ldr	r3, [pc, #432]	@ (10044684 <I2C_Transmit+0x1f4>)
100444d4:	801a      	strh	r2, [r3, #0]
	}
	if(TxReq.tail == (TxReq.head+1)%TXCIRCBUFFERSIZE){
100444d6:	4b6c      	ldr	r3, [pc, #432]	@ (10044688 <I2C_Transmit+0x1f8>)
100444d8:	4a6c      	ldr	r2, [pc, #432]	@ (1004468c <I2C_Transmit+0x1fc>)
100444da:	5a9b      	ldrh	r3, [r3, r2]
100444dc:	0019      	movs	r1, r3
100444de:	4a6a      	ldr	r2, [pc, #424]	@ (10044688 <I2C_Transmit+0x1f8>)
100444e0:	23c0      	movs	r3, #192	@ 0xc0
100444e2:	015b      	lsls	r3, r3, #5
100444e4:	5ad3      	ldrh	r3, [r2, r3]
100444e6:	3301      	adds	r3, #1
100444e8:	4a69      	ldr	r2, [pc, #420]	@ (10044690 <I2C_Transmit+0x200>)
100444ea:	4013      	ands	r3, r2
100444ec:	d503      	bpl.n	100444f6 <I2C_Transmit+0x66>
100444ee:	3b01      	subs	r3, #1
100444f0:	4a68      	ldr	r2, [pc, #416]	@ (10044694 <I2C_Transmit+0x204>)
100444f2:	4313      	orrs	r3, r2
100444f4:	3301      	adds	r3, #1
100444f6:	4299      	cmp	r1, r3
100444f8:	d106      	bne.n	10044508 <I2C_Transmit+0x78>
		finalcount = count;
100444fa:	4b62      	ldr	r3, [pc, #392]	@ (10044684 <I2C_Transmit+0x1f4>)
100444fc:	881a      	ldrh	r2, [r3, #0]
100444fe:	4b60      	ldr	r3, [pc, #384]	@ (10044680 <I2C_Transmit+0x1f0>)
10044500:	801a      	strh	r2, [r3, #0]
		BSP_LED_On(LED_RED);
10044502:	2002      	movs	r0, #2
10044504:	f002 fbd4 	bl	10046cb0 <BSP_LED_On>
	}
	uint32_t start = TIMERS_GetMilliSeconds();
10044508:	f001 f94e 	bl	100457a8 <TIMERS_GetMilliSeconds>
1004450c:	0003      	movs	r3, r0
1004450e:	60bb      	str	r3, [r7, #8]
	while(TxReq.tail == (TxReq.head+1)%TXCIRCBUFFERSIZE && ((start + I2CBUFFERTIMEOUT) > TIMERS_GetMilliSeconds()));
10044510:	46c0      	nop			@ (mov r8, r8)
10044512:	4b5d      	ldr	r3, [pc, #372]	@ (10044688 <I2C_Transmit+0x1f8>)
10044514:	4a5d      	ldr	r2, [pc, #372]	@ (1004468c <I2C_Transmit+0x1fc>)
10044516:	5a9b      	ldrh	r3, [r3, r2]
10044518:	0019      	movs	r1, r3
1004451a:	4a5b      	ldr	r2, [pc, #364]	@ (10044688 <I2C_Transmit+0x1f8>)
1004451c:	23c0      	movs	r3, #192	@ 0xc0
1004451e:	015b      	lsls	r3, r3, #5
10044520:	5ad3      	ldrh	r3, [r2, r3]
10044522:	3301      	adds	r3, #1
10044524:	4a5a      	ldr	r2, [pc, #360]	@ (10044690 <I2C_Transmit+0x200>)
10044526:	4013      	ands	r3, r2
10044528:	d503      	bpl.n	10044532 <I2C_Transmit+0xa2>
1004452a:	3b01      	subs	r3, #1
1004452c:	4a59      	ldr	r2, [pc, #356]	@ (10044694 <I2C_Transmit+0x204>)
1004452e:	4313      	orrs	r3, r2
10044530:	3301      	adds	r3, #1
10044532:	4299      	cmp	r1, r3
10044534:	d108      	bne.n	10044548 <I2C_Transmit+0xb8>
10044536:	68bb      	ldr	r3, [r7, #8]
10044538:	22fa      	movs	r2, #250	@ 0xfa
1004453a:	0092      	lsls	r2, r2, #2
1004453c:	189c      	adds	r4, r3, r2
1004453e:	f001 f933 	bl	100457a8 <TIMERS_GetMilliSeconds>
10044542:	0003      	movs	r3, r0
10044544:	429c      	cmp	r4, r3
10044546:	d8e4      	bhi.n	10044512 <I2C_Transmit+0x82>
	if(TxReq.tail == (TxReq.head+1)%TXCIRCBUFFERSIZE){
10044548:	4b4f      	ldr	r3, [pc, #316]	@ (10044688 <I2C_Transmit+0x1f8>)
1004454a:	4a50      	ldr	r2, [pc, #320]	@ (1004468c <I2C_Transmit+0x1fc>)
1004454c:	5a9b      	ldrh	r3, [r3, r2]
1004454e:	0019      	movs	r1, r3
10044550:	4a4d      	ldr	r2, [pc, #308]	@ (10044688 <I2C_Transmit+0x1f8>)
10044552:	23c0      	movs	r3, #192	@ 0xc0
10044554:	015b      	lsls	r3, r3, #5
10044556:	5ad3      	ldrh	r3, [r2, r3]
10044558:	3301      	adds	r3, #1
1004455a:	4a4d      	ldr	r2, [pc, #308]	@ (10044690 <I2C_Transmit+0x200>)
1004455c:	4013      	ands	r3, r2
1004455e:	d503      	bpl.n	10044568 <I2C_Transmit+0xd8>
10044560:	3b01      	subs	r3, #1
10044562:	4a4c      	ldr	r2, [pc, #304]	@ (10044694 <I2C_Transmit+0x204>)
10044564:	4313      	orrs	r3, r2
10044566:	3301      	adds	r3, #1
10044568:	4299      	cmp	r1, r3
1004456a:	d101      	bne.n	10044570 <I2C_Transmit+0xe0>
		return HAL_ERROR;
1004456c:	2301      	movs	r3, #1
1004456e:	e080      	b.n	10044672 <I2C_Transmit+0x1e2>
		BSP_LED_On(LED_RED);
	}

	//place the transmit request into the buffer
	static MemWrite_t Post;
	Post.targetadr = targetadr;
10044570:	4b49      	ldr	r3, [pc, #292]	@ (10044698 <I2C_Transmit+0x208>)
10044572:	1dfa      	adds	r2, r7, #7
10044574:	7812      	ldrb	r2, [r2, #0]
10044576:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
10044578:	4b47      	ldr	r3, [pc, #284]	@ (10044698 <I2C_Transmit+0x208>)
1004457a:	1dba      	adds	r2, r7, #6
1004457c:	7812      	ldrb	r2, [r2, #0]
1004457e:	705a      	strb	r2, [r3, #1]
//	Post.PostTo = 0;//null pointer, no function is posted to after the transmit is complete
	Post.data = data;
10044580:	4b45      	ldr	r3, [pc, #276]	@ (10044698 <I2C_Transmit+0x208>)
10044582:	1d7a      	adds	r2, r7, #5
10044584:	7812      	ldrb	r2, [r2, #0]
10044586:	709a      	strb	r2, [r3, #2]

	if(TxReq.tail == TxReq.head && hi2c1.State == HAL_I2C_STATE_READY){
10044588:	4b3f      	ldr	r3, [pc, #252]	@ (10044688 <I2C_Transmit+0x1f8>)
1004458a:	4a40      	ldr	r2, [pc, #256]	@ (1004468c <I2C_Transmit+0x1fc>)
1004458c:	5a9a      	ldrh	r2, [r3, r2]
1004458e:	493e      	ldr	r1, [pc, #248]	@ (10044688 <I2C_Transmit+0x1f8>)
10044590:	23c0      	movs	r3, #192	@ 0xc0
10044592:	015b      	lsls	r3, r3, #5
10044594:	5acb      	ldrh	r3, [r1, r3]
10044596:	429a      	cmp	r2, r3
10044598:	d144      	bne.n	10044624 <I2C_Transmit+0x194>
1004459a:	4b40      	ldr	r3, [pc, #256]	@ (1004469c <I2C_Transmit+0x20c>)
1004459c:	2241      	movs	r2, #65	@ 0x41
1004459e:	5c9b      	ldrb	r3, [r3, r2]
100445a0:	b2db      	uxtb	r3, r3
100445a2:	2b20      	cmp	r3, #32
100445a4:	d13e      	bne.n	10044624 <I2C_Transmit+0x194>
		I2CUARTtoI2C(1);
100445a6:	2001      	movs	r0, #1
100445a8:	f7ff fd72 	bl	10044090 <I2CUARTtoI2C>
		status = HAL_I2C_Mem_Write_IT(&hi2c1,
									 Post.targetadr<<1,
100445ac:	4b3a      	ldr	r3, [pc, #232]	@ (10044698 <I2C_Transmit+0x208>)
100445ae:	781b      	ldrb	r3, [r3, #0]
		status = HAL_I2C_Mem_Write_IT(&hi2c1,
100445b0:	18db      	adds	r3, r3, r3
100445b2:	b299      	uxth	r1, r3
									 Post.registeradr,
100445b4:	4b38      	ldr	r3, [pc, #224]	@ (10044698 <I2C_Transmit+0x208>)
100445b6:	785b      	ldrb	r3, [r3, #1]
		status = HAL_I2C_Mem_Write_IT(&hi2c1,
100445b8:	001a      	movs	r2, r3
100445ba:	250f      	movs	r5, #15
100445bc:	197c      	adds	r4, r7, r5
100445be:	4837      	ldr	r0, [pc, #220]	@ (1004469c <I2C_Transmit+0x20c>)
100445c0:	2301      	movs	r3, #1
100445c2:	9301      	str	r3, [sp, #4]
100445c4:	4b36      	ldr	r3, [pc, #216]	@ (100446a0 <I2C_Transmit+0x210>)
100445c6:	9300      	str	r3, [sp, #0]
100445c8:	2301      	movs	r3, #1
100445ca:	f003 fc2b 	bl	10047e24 <HAL_I2C_Mem_Write_IT>
100445ce:	0003      	movs	r3, r0
100445d0:	7023      	strb	r3, [r4, #0]
									 I2C_MEMADD_SIZE_8BIT,
									 &(Post.data),
									 1);
		if(status == HAL_BUSY){
100445d2:	197b      	adds	r3, r7, r5
100445d4:	781b      	ldrb	r3, [r3, #0]
100445d6:	2b02      	cmp	r3, #2
100445d8:	d148      	bne.n	1004466c <I2C_Transmit+0x1dc>
			TxReq.data[TxReq.head] = Post;
100445da:	4a2b      	ldr	r2, [pc, #172]	@ (10044688 <I2C_Transmit+0x1f8>)
100445dc:	23c0      	movs	r3, #192	@ 0xc0
100445de:	015b      	lsls	r3, r3, #5
100445e0:	5ad3      	ldrh	r3, [r2, r3]
100445e2:	0019      	movs	r1, r3
100445e4:	4a28      	ldr	r2, [pc, #160]	@ (10044688 <I2C_Transmit+0x1f8>)
100445e6:	000b      	movs	r3, r1
100445e8:	005b      	lsls	r3, r3, #1
100445ea:	185b      	adds	r3, r3, r1
100445ec:	492a      	ldr	r1, [pc, #168]	@ (10044698 <I2C_Transmit+0x208>)
100445ee:	18d3      	adds	r3, r2, r3
100445f0:	2203      	movs	r2, #3
100445f2:	0018      	movs	r0, r3
100445f4:	f023 fb2b 	bl	10067c4e <memcpy>
			TxReq.head++;
100445f8:	4a23      	ldr	r2, [pc, #140]	@ (10044688 <I2C_Transmit+0x1f8>)
100445fa:	23c0      	movs	r3, #192	@ 0xc0
100445fc:	015b      	lsls	r3, r3, #5
100445fe:	5ad3      	ldrh	r3, [r2, r3]
10044600:	3301      	adds	r3, #1
10044602:	b299      	uxth	r1, r3
10044604:	4a20      	ldr	r2, [pc, #128]	@ (10044688 <I2C_Transmit+0x1f8>)
10044606:	23c0      	movs	r3, #192	@ 0xc0
10044608:	015b      	lsls	r3, r3, #5
1004460a:	52d1      	strh	r1, [r2, r3]
			TxReq.head %= TXCIRCBUFFERSIZE;
1004460c:	4a1e      	ldr	r2, [pc, #120]	@ (10044688 <I2C_Transmit+0x1f8>)
1004460e:	23c0      	movs	r3, #192	@ 0xc0
10044610:	015b      	lsls	r3, r3, #5
10044612:	5ad3      	ldrh	r3, [r2, r3]
10044614:	055b      	lsls	r3, r3, #21
10044616:	0d5b      	lsrs	r3, r3, #21
10044618:	b299      	uxth	r1, r3
1004461a:	4a1b      	ldr	r2, [pc, #108]	@ (10044688 <I2C_Transmit+0x1f8>)
1004461c:	23c0      	movs	r3, #192	@ 0xc0
1004461e:	015b      	lsls	r3, r3, #5
10044620:	52d1      	strh	r1, [r2, r3]
		if(status == HAL_BUSY){
10044622:	e023      	b.n	1004466c <I2C_Transmit+0x1dc>
		}
	} else {
		TxReq.data[TxReq.head] = Post;
10044624:	4a18      	ldr	r2, [pc, #96]	@ (10044688 <I2C_Transmit+0x1f8>)
10044626:	23c0      	movs	r3, #192	@ 0xc0
10044628:	015b      	lsls	r3, r3, #5
1004462a:	5ad3      	ldrh	r3, [r2, r3]
1004462c:	0019      	movs	r1, r3
1004462e:	4a16      	ldr	r2, [pc, #88]	@ (10044688 <I2C_Transmit+0x1f8>)
10044630:	000b      	movs	r3, r1
10044632:	005b      	lsls	r3, r3, #1
10044634:	185b      	adds	r3, r3, r1
10044636:	4918      	ldr	r1, [pc, #96]	@ (10044698 <I2C_Transmit+0x208>)
10044638:	18d3      	adds	r3, r2, r3
1004463a:	2203      	movs	r2, #3
1004463c:	0018      	movs	r0, r3
1004463e:	f023 fb06 	bl	10067c4e <memcpy>
		TxReq.head++;
10044642:	4a11      	ldr	r2, [pc, #68]	@ (10044688 <I2C_Transmit+0x1f8>)
10044644:	23c0      	movs	r3, #192	@ 0xc0
10044646:	015b      	lsls	r3, r3, #5
10044648:	5ad3      	ldrh	r3, [r2, r3]
1004464a:	3301      	adds	r3, #1
1004464c:	b299      	uxth	r1, r3
1004464e:	4a0e      	ldr	r2, [pc, #56]	@ (10044688 <I2C_Transmit+0x1f8>)
10044650:	23c0      	movs	r3, #192	@ 0xc0
10044652:	015b      	lsls	r3, r3, #5
10044654:	52d1      	strh	r1, [r2, r3]
		TxReq.head %= TXCIRCBUFFERSIZE;
10044656:	4a0c      	ldr	r2, [pc, #48]	@ (10044688 <I2C_Transmit+0x1f8>)
10044658:	23c0      	movs	r3, #192	@ 0xc0
1004465a:	015b      	lsls	r3, r3, #5
1004465c:	5ad3      	ldrh	r3, [r2, r3]
1004465e:	055b      	lsls	r3, r3, #21
10044660:	0d5b      	lsrs	r3, r3, #21
10044662:	b299      	uxth	r1, r3
10044664:	4a08      	ldr	r2, [pc, #32]	@ (10044688 <I2C_Transmit+0x1f8>)
10044666:	23c0      	movs	r3, #192	@ 0xc0
10044668:	015b      	lsls	r3, r3, #5
1004466a:	52d1      	strh	r1, [r2, r3]
//		if(TxReq.tail == TxReq.head){
//			TxReq.full = true;
//		}
	}
	return status;
1004466c:	230f      	movs	r3, #15
1004466e:	18fb      	adds	r3, r7, r3
10044670:	781b      	ldrb	r3, [r3, #0]
}
10044672:	0018      	movs	r0, r3
10044674:	46bd      	mov	sp, r7
10044676:	b004      	add	sp, #16
10044678:	bdb0      	pop	{r4, r5, r7, pc}
1004467a:	46c0      	nop			@ (mov r8, r8)
1004467c:	20001cf6 	.word	0x20001cf6
10044680:	20001cf8 	.word	0x20001cf8
10044684:	20001cfa 	.word	0x20001cfa
10044688:	200004f0 	.word	0x200004f0
1004468c:	00001802 	.word	0x00001802
10044690:	800007ff 	.word	0x800007ff
10044694:	fffff800 	.word	0xfffff800
10044698:	20001cfc 	.word	0x20001cfc
1004469c:	200003d4 	.word	0x200003d4
100446a0:	20001cfe 	.word	0x20001cfe

100446a4 <I2C_Recieve>:
 * @param: uint8_t targetadr: Address of the device to communicate
 * 		   uint8_t registeradr: Address of the register to read from
 * 		   void (*PostTo)(Event_t): which service to post to when the data is received
 * @return: -1 if error, 1 if success
 */
HAL_StatusTypeDef I2C_Recieve(uint8_t targetadr, uint8_t registeradr,void (*PostTo)(Event_t)){
100446a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100446a6:	b087      	sub	sp, #28
100446a8:	af02      	add	r7, sp, #8
100446aa:	603a      	str	r2, [r7, #0]
100446ac:	1dfb      	adds	r3, r7, #7
100446ae:	1c02      	adds	r2, r0, #0
100446b0:	701a      	strb	r2, [r3, #0]
100446b2:	1dbb      	adds	r3, r7, #6
100446b4:	1c0a      	adds	r2, r1, #0
100446b6:	701a      	strb	r2, [r3, #0]
	if(!initialized){return HAL_ERROR;}
100446b8:	4b54      	ldr	r3, [pc, #336]	@ (1004480c <I2C_Recieve+0x168>)
100446ba:	781b      	ldrb	r3, [r3, #0]
100446bc:	2b00      	cmp	r3, #0
100446be:	d101      	bne.n	100446c4 <I2C_Recieve+0x20>
100446c0:	2301      	movs	r3, #1
100446c2:	e09f      	b.n	10044804 <I2C_Recieve+0x160>
	HAL_StatusTypeDef status = HAL_OK;
100446c4:	230f      	movs	r3, #15
100446c6:	18fb      	adds	r3, r7, r3
100446c8:	2200      	movs	r2, #0
100446ca:	701a      	strb	r2, [r3, #0]
	//will not attempt to receive if the buffer is full
	if(RxReq.full){
100446cc:	4b50      	ldr	r3, [pc, #320]	@ (10044810 <I2C_Recieve+0x16c>)
100446ce:	22c4      	movs	r2, #196	@ 0xc4
100446d0:	5c9b      	ldrb	r3, [r3, r2]
100446d2:	2b00      	cmp	r3, #0
100446d4:	d001      	beq.n	100446da <I2C_Recieve+0x36>
		return HAL_ERROR;
100446d6:	2301      	movs	r3, #1
100446d8:	e094      	b.n	10044804 <I2C_Recieve+0x160>
	}

	//place the receive request into the buffer
	static MemReq_t Post;
	Post.targetadr = targetadr;
100446da:	4b4e      	ldr	r3, [pc, #312]	@ (10044814 <I2C_Recieve+0x170>)
100446dc:	1dfa      	adds	r2, r7, #7
100446de:	7812      	ldrb	r2, [r2, #0]
100446e0:	701a      	strb	r2, [r3, #0]
	Post.registeradr = registeradr;
100446e2:	4b4c      	ldr	r3, [pc, #304]	@ (10044814 <I2C_Recieve+0x170>)
100446e4:	1dba      	adds	r2, r7, #6
100446e6:	7812      	ldrb	r2, [r2, #0]
100446e8:	705a      	strb	r2, [r3, #1]
	Post.PostTo = PostTo;
100446ea:	4b4a      	ldr	r3, [pc, #296]	@ (10044814 <I2C_Recieve+0x170>)
100446ec:	683a      	ldr	r2, [r7, #0]
100446ee:	605a      	str	r2, [r3, #4]
	uint8_t first = TxReq.tail == TxReq.head;
100446f0:	4b49      	ldr	r3, [pc, #292]	@ (10044818 <I2C_Recieve+0x174>)
100446f2:	4a4a      	ldr	r2, [pc, #296]	@ (1004481c <I2C_Recieve+0x178>)
100446f4:	5a9a      	ldrh	r2, [r3, r2]
100446f6:	4948      	ldr	r1, [pc, #288]	@ (10044818 <I2C_Recieve+0x174>)
100446f8:	23c0      	movs	r3, #192	@ 0xc0
100446fa:	015b      	lsls	r3, r3, #5
100446fc:	5acb      	ldrh	r3, [r1, r3]
100446fe:	1ad3      	subs	r3, r2, r3
10044700:	425a      	negs	r2, r3
10044702:	4153      	adcs	r3, r2
10044704:	b2da      	uxtb	r2, r3
10044706:	230e      	movs	r3, #14
10044708:	18fb      	adds	r3, r7, r3
1004470a:	701a      	strb	r2, [r3, #0]
	RxReq.data[RxReq.head] = Post;
1004470c:	4b40      	ldr	r3, [pc, #256]	@ (10044810 <I2C_Recieve+0x16c>)
1004470e:	22c0      	movs	r2, #192	@ 0xc0
10044710:	5a9b      	ldrh	r3, [r3, r2]
10044712:	0019      	movs	r1, r3
10044714:	4a3e      	ldr	r2, [pc, #248]	@ (10044810 <I2C_Recieve+0x16c>)
10044716:	000b      	movs	r3, r1
10044718:	005b      	lsls	r3, r3, #1
1004471a:	185b      	adds	r3, r3, r1
1004471c:	009b      	lsls	r3, r3, #2
1004471e:	493d      	ldr	r1, [pc, #244]	@ (10044814 <I2C_Recieve+0x170>)
10044720:	18d3      	adds	r3, r2, r3
10044722:	000a      	movs	r2, r1
10044724:	ca13      	ldmia	r2!, {r0, r1, r4}
10044726:	c313      	stmia	r3!, {r0, r1, r4}
	RxReq.head++;
10044728:	4b39      	ldr	r3, [pc, #228]	@ (10044810 <I2C_Recieve+0x16c>)
1004472a:	22c0      	movs	r2, #192	@ 0xc0
1004472c:	5a9b      	ldrh	r3, [r3, r2]
1004472e:	3301      	adds	r3, #1
10044730:	b299      	uxth	r1, r3
10044732:	4b37      	ldr	r3, [pc, #220]	@ (10044810 <I2C_Recieve+0x16c>)
10044734:	22c0      	movs	r2, #192	@ 0xc0
10044736:	5299      	strh	r1, [r3, r2]
	RxReq.head %= RXCIRCBUFFERSIZE;
10044738:	4b35      	ldr	r3, [pc, #212]	@ (10044810 <I2C_Recieve+0x16c>)
1004473a:	22c0      	movs	r2, #192	@ 0xc0
1004473c:	5a9b      	ldrh	r3, [r3, r2]
1004473e:	220f      	movs	r2, #15
10044740:	4013      	ands	r3, r2
10044742:	b299      	uxth	r1, r3
10044744:	4b32      	ldr	r3, [pc, #200]	@ (10044810 <I2C_Recieve+0x16c>)
10044746:	22c0      	movs	r2, #192	@ 0xc0
10044748:	5299      	strh	r1, [r3, r2]
	if(RxReq.tail == RxReq.head){
1004474a:	4b31      	ldr	r3, [pc, #196]	@ (10044810 <I2C_Recieve+0x16c>)
1004474c:	22c2      	movs	r2, #194	@ 0xc2
1004474e:	5a9a      	ldrh	r2, [r3, r2]
10044750:	4b2f      	ldr	r3, [pc, #188]	@ (10044810 <I2C_Recieve+0x16c>)
10044752:	21c0      	movs	r1, #192	@ 0xc0
10044754:	5a5b      	ldrh	r3, [r3, r1]
10044756:	429a      	cmp	r2, r3
10044758:	d103      	bne.n	10044762 <I2C_Recieve+0xbe>
		RxReq.full = true;
1004475a:	4b2d      	ldr	r3, [pc, #180]	@ (10044810 <I2C_Recieve+0x16c>)
1004475c:	22c4      	movs	r2, #196	@ 0xc4
1004475e:	2101      	movs	r1, #1
10044760:	5499      	strb	r1, [r3, r2]
	}
	if(first){//if the buffer was empty
10044762:	230e      	movs	r3, #14
10044764:	18fb      	adds	r3, r7, r3
10044766:	781b      	ldrb	r3, [r3, #0]
10044768:	2b00      	cmp	r3, #0
1004476a:	d048      	beq.n	100447fe <I2C_Recieve+0x15a>
		I2CUARTtoI2C(1);
1004476c:	2001      	movs	r0, #1
1004476e:	f7ff fc8f 	bl	10044090 <I2CUARTtoI2C>
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
							RxReq.data[RxReq.head].targetadr<<1,
10044772:	4b27      	ldr	r3, [pc, #156]	@ (10044810 <I2C_Recieve+0x16c>)
10044774:	22c0      	movs	r2, #192	@ 0xc0
10044776:	5a9b      	ldrh	r3, [r3, r2]
10044778:	0019      	movs	r1, r3
1004477a:	4a25      	ldr	r2, [pc, #148]	@ (10044810 <I2C_Recieve+0x16c>)
1004477c:	000b      	movs	r3, r1
1004477e:	005b      	lsls	r3, r3, #1
10044780:	185b      	adds	r3, r3, r1
10044782:	009b      	lsls	r3, r3, #2
10044784:	5c9b      	ldrb	r3, [r3, r2]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
10044786:	18db      	adds	r3, r3, r3
10044788:	b299      	uxth	r1, r3
							RxReq.data[RxReq.head].registeradr,
1004478a:	4b21      	ldr	r3, [pc, #132]	@ (10044810 <I2C_Recieve+0x16c>)
1004478c:	22c0      	movs	r2, #192	@ 0xc0
1004478e:	5a9b      	ldrh	r3, [r3, r2]
10044790:	0018      	movs	r0, r3
10044792:	4a1f      	ldr	r2, [pc, #124]	@ (10044810 <I2C_Recieve+0x16c>)
10044794:	0003      	movs	r3, r0
10044796:	005b      	lsls	r3, r3, #1
10044798:	181b      	adds	r3, r3, r0
1004479a:	009b      	lsls	r3, r3, #2
1004479c:	18d3      	adds	r3, r2, r3
1004479e:	3301      	adds	r3, #1
100447a0:	781b      	ldrb	r3, [r3, #0]
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
100447a2:	001d      	movs	r5, r3
							I2C_MEMADD_SIZE_8BIT,
							&(RxReq.data[RxReq.head].data),
100447a4:	4b1a      	ldr	r3, [pc, #104]	@ (10044810 <I2C_Recieve+0x16c>)
100447a6:	22c0      	movs	r2, #192	@ 0xc0
100447a8:	5a9b      	ldrh	r3, [r3, r2]
100447aa:	001a      	movs	r2, r3
		status = HAL_I2C_Mem_Read_IT(&hi2c1,
100447ac:	0013      	movs	r3, r2
100447ae:	005b      	lsls	r3, r3, #1
100447b0:	189b      	adds	r3, r3, r2
100447b2:	009b      	lsls	r3, r3, #2
100447b4:	3308      	adds	r3, #8
100447b6:	001a      	movs	r2, r3
100447b8:	4b15      	ldr	r3, [pc, #84]	@ (10044810 <I2C_Recieve+0x16c>)
100447ba:	18d3      	adds	r3, r2, r3
100447bc:	260f      	movs	r6, #15
100447be:	19bc      	adds	r4, r7, r6
100447c0:	4817      	ldr	r0, [pc, #92]	@ (10044820 <I2C_Recieve+0x17c>)
100447c2:	2201      	movs	r2, #1
100447c4:	9201      	str	r2, [sp, #4]
100447c6:	9300      	str	r3, [sp, #0]
100447c8:	2301      	movs	r3, #1
100447ca:	002a      	movs	r2, r5
100447cc:	f003 fbcc 	bl	10047f68 <HAL_I2C_Mem_Read_IT>
100447d0:	0003      	movs	r3, r0
100447d2:	7023      	strb	r3, [r4, #0]
							1);
		if(status != HAL_OK){
100447d4:	19bb      	adds	r3, r7, r6
100447d6:	781b      	ldrb	r3, [r3, #0]
100447d8:	2b00      	cmp	r3, #0
100447da:	d010      	beq.n	100447fe <I2C_Recieve+0x15a>
			RxReq.head--;
100447dc:	4b0c      	ldr	r3, [pc, #48]	@ (10044810 <I2C_Recieve+0x16c>)
100447de:	22c0      	movs	r2, #192	@ 0xc0
100447e0:	5a9b      	ldrh	r3, [r3, r2]
100447e2:	3b01      	subs	r3, #1
100447e4:	b299      	uxth	r1, r3
100447e6:	4b0a      	ldr	r3, [pc, #40]	@ (10044810 <I2C_Recieve+0x16c>)
100447e8:	22c0      	movs	r2, #192	@ 0xc0
100447ea:	5299      	strh	r1, [r3, r2]
			RxReq.head %= RXCIRCBUFFERSIZE;
100447ec:	4b08      	ldr	r3, [pc, #32]	@ (10044810 <I2C_Recieve+0x16c>)
100447ee:	22c0      	movs	r2, #192	@ 0xc0
100447f0:	5a9b      	ldrh	r3, [r3, r2]
100447f2:	220f      	movs	r2, #15
100447f4:	4013      	ands	r3, r2
100447f6:	b299      	uxth	r1, r3
100447f8:	4b05      	ldr	r3, [pc, #20]	@ (10044810 <I2C_Recieve+0x16c>)
100447fa:	22c0      	movs	r2, #192	@ 0xc0
100447fc:	5299      	strh	r1, [r3, r2]
		}
	}
	return status;
100447fe:	230f      	movs	r3, #15
10044800:	18fb      	adds	r3, r7, r3
10044802:	781b      	ldrb	r3, [r3, #0]

}
10044804:	0018      	movs	r0, r3
10044806:	46bd      	mov	sp, r7
10044808:	b005      	add	sp, #20
1004480a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004480c:	20001cf6 	.word	0x20001cf6
10044810:	20000428 	.word	0x20000428
10044814:	20001d00 	.word	0x20001d00
10044818:	200004f0 	.word	0x200004f0
1004481c:	00001802 	.word	0x00001802
10044820:	200003d4 	.word	0x200003d4

10044824 <I2C_WriteReg>:
unsigned char I2C_WriteReg(
    unsigned char I2CAddress,
    unsigned char deviceRegisterAddress,
    uint8_t data
)
{
10044824:	b5b0      	push	{r4, r5, r7, lr}
10044826:	b084      	sub	sp, #16
10044828:	af00      	add	r7, sp, #0
1004482a:	0004      	movs	r4, r0
1004482c:	0008      	movs	r0, r1
1004482e:	0011      	movs	r1, r2
10044830:	1dfb      	adds	r3, r7, #7
10044832:	1c22      	adds	r2, r4, #0
10044834:	701a      	strb	r2, [r3, #0]
10044836:	1dbb      	adds	r3, r7, #6
10044838:	1c02      	adds	r2, r0, #0
1004483a:	701a      	strb	r2, [r3, #0]
1004483c:	1d7b      	adds	r3, r7, #5
1004483e:	1c0a      	adds	r2, r1, #0
10044840:	701a      	strb	r2, [r3, #0]
//        I2C_MEMADD_SIZE_8BIT,
//        &data,
//        1,
//        HAL_MAX_DELAY
//    );
    ret = I2C_Transmit(I2CAddress, deviceRegisterAddress, data);
10044842:	250f      	movs	r5, #15
10044844:	197c      	adds	r4, r7, r5
10044846:	1d7b      	adds	r3, r7, #5
10044848:	781a      	ldrb	r2, [r3, #0]
1004484a:	1dbb      	adds	r3, r7, #6
1004484c:	7819      	ldrb	r1, [r3, #0]
1004484e:	1dfb      	adds	r3, r7, #7
10044850:	781b      	ldrb	r3, [r3, #0]
10044852:	0018      	movs	r0, r3
10044854:	f7ff fe1c 	bl	10044490 <I2C_Transmit>
10044858:	0003      	movs	r3, r0
1004485a:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK)
1004485c:	197b      	adds	r3, r7, r5
1004485e:	781b      	ldrb	r3, [r3, #0]
10044860:	2b00      	cmp	r3, #0
10044862:	d001      	beq.n	10044868 <I2C_WriteReg+0x44>
    {
        return ERROR;
10044864:	2301      	movs	r3, #1
10044866:	e000      	b.n	1004486a <I2C_WriteReg+0x46>
    }

    return SUCCESS;
10044868:	2300      	movs	r3, #0
}
1004486a:	0018      	movs	r0, r3
1004486c:	46bd      	mov	sp, r7
1004486e:	b004      	add	sp, #16
10044870:	bdb0      	pop	{r4, r5, r7, pc}

10044872 <MP3_SendData>:
static float volume;
static uint32_t starttime;
static uint32_t inittime;
static uint8_t initialized;
//----------------------------------------Private Functions--------------------------------------
void MP3_SendData(char string[4]){
10044872:	b590      	push	{r4, r7, lr}
10044874:	b085      	sub	sp, #20
10044876:	af00      	add	r7, sp, #0
10044878:	6078      	str	r0, [r7, #4]
	uint16_t accumulation = 0;
1004487a:	240e      	movs	r4, #14
1004487c:	193b      	adds	r3, r7, r4
1004487e:	2200      	movs	r2, #0
10044880:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x7E);//start flag
10044882:	207e      	movs	r0, #126	@ 0x7e
10044884:	f001 f9bc 	bl	10045c00 <LPUART_WriteTx>
	accumulation += 0xFF;
10044888:	193b      	adds	r3, r7, r4
1004488a:	193a      	adds	r2, r7, r4
1004488c:	8812      	ldrh	r2, [r2, #0]
1004488e:	32ff      	adds	r2, #255	@ 0xff
10044890:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0xFF);//Version?
10044892:	20ff      	movs	r0, #255	@ 0xff
10044894:	f001 f9b4 	bl	10045c00 <LPUART_WriteTx>
	accumulation += 0x06;
10044898:	193b      	adds	r3, r7, r4
1004489a:	193a      	adds	r2, r7, r4
1004489c:	8812      	ldrh	r2, [r2, #0]
1004489e:	3206      	adds	r2, #6
100448a0:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(0x06);//length
100448a2:	2006      	movs	r0, #6
100448a4:	f001 f9ac 	bl	10045c00 <LPUART_WriteTx>

	for(int i = 0; i < 4; i++){
100448a8:	2300      	movs	r3, #0
100448aa:	60bb      	str	r3, [r7, #8]
100448ac:	e014      	b.n	100448d8 <MP3_SendData+0x66>
		accumulation += string[i];
100448ae:	68bb      	ldr	r3, [r7, #8]
100448b0:	687a      	ldr	r2, [r7, #4]
100448b2:	18d3      	adds	r3, r2, r3
100448b4:	781b      	ldrb	r3, [r3, #0]
100448b6:	0019      	movs	r1, r3
100448b8:	220e      	movs	r2, #14
100448ba:	18bb      	adds	r3, r7, r2
100448bc:	18ba      	adds	r2, r7, r2
100448be:	8812      	ldrh	r2, [r2, #0]
100448c0:	188a      	adds	r2, r1, r2
100448c2:	801a      	strh	r2, [r3, #0]
		LPUART_WriteTx(string[i]);//command and data
100448c4:	68bb      	ldr	r3, [r7, #8]
100448c6:	687a      	ldr	r2, [r7, #4]
100448c8:	18d3      	adds	r3, r2, r3
100448ca:	781b      	ldrb	r3, [r3, #0]
100448cc:	0018      	movs	r0, r3
100448ce:	f001 f997 	bl	10045c00 <LPUART_WriteTx>
	for(int i = 0; i < 4; i++){
100448d2:	68bb      	ldr	r3, [r7, #8]
100448d4:	3301      	adds	r3, #1
100448d6:	60bb      	str	r3, [r7, #8]
100448d8:	68bb      	ldr	r3, [r7, #8]
100448da:	2b03      	cmp	r3, #3
100448dc:	dde7      	ble.n	100448ae <MP3_SendData+0x3c>
	}
	accumulation = -accumulation;//??required for it to work
100448de:	240e      	movs	r4, #14
100448e0:	193b      	adds	r3, r7, r4
100448e2:	193a      	adds	r2, r7, r4
100448e4:	8812      	ldrh	r2, [r2, #0]
100448e6:	4252      	negs	r2, r2
100448e8:	801a      	strh	r2, [r3, #0]
	LPUART_WriteTx(accumulation>>8);//checksum
100448ea:	193b      	adds	r3, r7, r4
100448ec:	881b      	ldrh	r3, [r3, #0]
100448ee:	0a1b      	lsrs	r3, r3, #8
100448f0:	b29b      	uxth	r3, r3
100448f2:	b2db      	uxtb	r3, r3
100448f4:	0018      	movs	r0, r3
100448f6:	f001 f983 	bl	10045c00 <LPUART_WriteTx>
	LPUART_WriteTx(accumulation&0xFF);//checksum
100448fa:	193b      	adds	r3, r7, r4
100448fc:	881b      	ldrh	r3, [r3, #0]
100448fe:	b2db      	uxtb	r3, r3
10044900:	0018      	movs	r0, r3
10044902:	f001 f97d 	bl	10045c00 <LPUART_WriteTx>
	LPUART_WriteTx(0xEF);//start flag
10044906:	20ef      	movs	r0, #239	@ 0xef
10044908:	f001 f97a 	bl	10045c00 <LPUART_WriteTx>

}
1004490c:	46c0      	nop			@ (mov r8, r8)
1004490e:	46bd      	mov	sp, r7
10044910:	b005      	add	sp, #20
10044912:	bd90      	pop	{r4, r7, pc}

10044914 <MP3_Event_Init>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t MP3_Event_Init(FIFO Queue){
10044914:	b580      	push	{r7, lr}
10044916:	b084      	sub	sp, #16
10044918:	af00      	add	r7, sp, #0
1004491a:	6078      	str	r0, [r7, #4]
	//somehow need to be sent 3 seconds after the mp3 turns on
    MP3queue = Queue;
1004491c:	4b23      	ldr	r3, [pc, #140]	@ (100449ac <MP3_Event_Init+0x98>)
1004491e:	687a      	ldr	r2, [r7, #4]
10044920:	601a      	str	r2, [r3, #0]
    TIMERS_Init();
10044922:	f000 fef5 	bl	10045710 <TIMERS_Init>
    play = 1;
10044926:	4b22      	ldr	r3, [pc, #136]	@ (100449b0 <MP3_Event_Init+0x9c>)
10044928:	2201      	movs	r2, #1
1004492a:	701a      	strb	r2, [r3, #0]
    DC = FLASH_GetDutyCycle()/100;
1004492c:	f7ff f90a 	bl	10043b44 <FLASH_GetDutyCycle>
10044930:	0003      	movs	r3, r0
10044932:	2164      	movs	r1, #100	@ 0x64
10044934:	0018      	movs	r0, r3
10044936:	f7fb fc83 	bl	10040240 <__udivsi3>
1004493a:	0003      	movs	r3, r0
1004493c:	b2db      	uxtb	r3, r3
1004493e:	0018      	movs	r0, r3
10044940:	f7fc fc20 	bl	10041184 <__aeabi_i2f>
10044944:	1c02      	adds	r2, r0, #0
10044946:	4b1b      	ldr	r3, [pc, #108]	@ (100449b4 <MP3_Event_Init+0xa0>)
10044948:	601a      	str	r2, [r3, #0]
    volume = FLASH_GetVolume()/100;
1004494a:	f7ff f8e5 	bl	10043b18 <FLASH_GetVolume>
1004494e:	0003      	movs	r3, r0
10044950:	2164      	movs	r1, #100	@ 0x64
10044952:	0018      	movs	r0, r3
10044954:	f7fb fc74 	bl	10040240 <__udivsi3>
10044958:	0003      	movs	r3, r0
1004495a:	b2db      	uxtb	r3, r3
1004495c:	0018      	movs	r0, r3
1004495e:	f7fc fc11 	bl	10041184 <__aeabi_i2f>
10044962:	1c02      	adds	r2, r0, #0
10044964:	4b14      	ldr	r3, [pc, #80]	@ (100449b8 <MP3_Event_Init+0xa4>)
10044966:	601a      	str	r2, [r3, #0]
    starttime = TIMERS_GetMilliSeconds();
10044968:	f000 ff1e 	bl	100457a8 <TIMERS_GetMilliSeconds>
1004496c:	0002      	movs	r2, r0
1004496e:	4b13      	ldr	r3, [pc, #76]	@ (100449bc <MP3_Event_Init+0xa8>)
10044970:	601a      	str	r2, [r3, #0]
    inittime = TIMERS_GetMilliSeconds();
10044972:	f000 ff19 	bl	100457a8 <TIMERS_GetMilliSeconds>
10044976:	0002      	movs	r2, r0
10044978:	4b11      	ldr	r3, [pc, #68]	@ (100449c0 <MP3_Event_Init+0xac>)
1004497a:	601a      	str	r2, [r3, #0]
    initialized = 0;
1004497c:	4b11      	ldr	r3, [pc, #68]	@ (100449c4 <MP3_Event_Init+0xb0>)
1004497e:	2200      	movs	r2, #0
10044980:	701a      	strb	r2, [r3, #0]
	{
	char send[4] = {0x0C, 0x00, 0x00, 0x00};//reset module
10044982:	210c      	movs	r1, #12
10044984:	187b      	adds	r3, r7, r1
10044986:	220c      	movs	r2, #12
10044988:	601a      	str	r2, [r3, #0]
	MP3_SendData(send);
1004498a:	187b      	adds	r3, r7, r1
1004498c:	0018      	movs	r0, r3
1004498e:	f7ff ff70 	bl	10044872 <MP3_SendData>
	}
	{
	char send[4] = {0x08, 0x00, 0x00, 0x01};//set source to the TF/microSD card
10044992:	2108      	movs	r1, #8
10044994:	187b      	adds	r3, r7, r1
10044996:	4a0c      	ldr	r2, [pc, #48]	@ (100449c8 <MP3_Event_Init+0xb4>)
10044998:	601a      	str	r2, [r3, #0]
	MP3_SendData(send);
1004499a:	187b      	adds	r3, r7, r1
1004499c:	0018      	movs	r0, r3
1004499e:	f7ff ff68 	bl	10044872 <MP3_SendData>
	}
    return INIT_OK;
100449a2:	2301      	movs	r3, #1
}
100449a4:	0018      	movs	r0, r3
100449a6:	46bd      	mov	sp, r7
100449a8:	b004      	add	sp, #16
100449aa:	bd80      	pop	{r7, pc}
100449ac:	20001d0c 	.word	0x20001d0c
100449b0:	20001d10 	.word	0x20001d10
100449b4:	20001d14 	.word	0x20001d14
100449b8:	20001d18 	.word	0x20001d18
100449bc:	20001d1c 	.word	0x20001d1c
100449c0:	20001d20 	.word	0x20001d20
100449c4:	20001d24 	.word	0x20001d24
100449c8:	01000008 	.word	0x01000008

100449cc <MP3_Event_Post>:
 * @Function: MP3_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void MP3_Event_Post(Event_t event){
100449cc:	b580      	push	{r7, lr}
100449ce:	b082      	sub	sp, #8
100449d0:	af00      	add	r7, sp, #0
100449d2:	1d3b      	adds	r3, r7, #4
100449d4:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(MP3queue, event);
100449d6:	4b05      	ldr	r3, [pc, #20]	@ (100449ec <MP3_Event_Post+0x20>)
100449d8:	681a      	ldr	r2, [r3, #0]
100449da:	1d3b      	adds	r3, r7, #4
100449dc:	6819      	ldr	r1, [r3, #0]
100449de:	0010      	movs	r0, r2
100449e0:	f7fe ff43 	bl	1004386a <FIFO_Enqueue>
}
100449e4:	46c0      	nop			@ (mov r8, r8)
100449e6:	46bd      	mov	sp, r7
100449e8:	b002      	add	sp, #8
100449ea:	bd80      	pop	{r7, pc}
100449ec:	20001d0c 	.word	0x20001d0c

100449f0 <MP3_Event_Updater>:
 * @Function: MP3_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t MP3_Event_Updater(void){
100449f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100449f2:	b087      	sub	sp, #28
100449f4:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
100449f6:	2508      	movs	r5, #8
100449f8:	197b      	adds	r3, r7, r5
100449fa:	2200      	movs	r2, #0
100449fc:	701a      	strb	r2, [r3, #0]
100449fe:	197b      	adds	r3, r7, r5
10044a00:	2200      	movs	r2, #0
10044a02:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
10044a04:	f000 fed0 	bl	100457a8 <TIMERS_GetMilliSeconds>
10044a08:	0003      	movs	r3, r0
10044a0a:	617b      	str	r3, [r7, #20]
    char rx = LPUART_ReadRx();
10044a0c:	2613      	movs	r6, #19
10044a0e:	19bc      	adds	r4, r7, r6
10044a10:	f001 f8ca 	bl	10045ba8 <LPUART_ReadRx>
10044a14:	0003      	movs	r3, r0
10044a16:	7023      	strb	r3, [r4, #0]
	if(rx != UARTFAILED){
10044a18:	0031      	movs	r1, r6
10044a1a:	187b      	adds	r3, r7, r1
10044a1c:	781b      	ldrb	r3, [r3, #0]
10044a1e:	2b25      	cmp	r3, #37	@ 0x25
10044a20:	d00b      	beq.n	10044a3a <MP3_Event_Updater+0x4a>
		event.status = EVENT_LPUART;
10044a22:	197b      	adds	r3, r7, r5
10044a24:	2208      	movs	r2, #8
10044a26:	701a      	strb	r2, [r3, #0]
		event.data = rx;
10044a28:	187b      	adds	r3, r7, r1
10044a2a:	781b      	ldrb	r3, [r3, #0]
10044a2c:	b29a      	uxth	r2, r3
10044a2e:	197b      	adds	r3, r7, r5
10044a30:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10044a32:	197b      	adds	r3, r7, r5
10044a34:	6818      	ldr	r0, [r3, #0]
10044a36:	f7ff ffc9 	bl	100449cc <MP3_Event_Post>
	}
    if (play){
10044a3a:	4b6b      	ldr	r3, [pc, #428]	@ (10044be8 <MP3_Event_Updater+0x1f8>)
10044a3c:	781b      	ldrb	r3, [r3, #0]
10044a3e:	2b00      	cmp	r3, #0
10044a40:	d023      	beq.n	10044a8a <MP3_Event_Updater+0x9a>
		if((timer-starttime) >= CYCLELENGTH*DC){//if the speaker is playing, and time is up
10044a42:	4b6a      	ldr	r3, [pc, #424]	@ (10044bec <MP3_Event_Updater+0x1fc>)
10044a44:	681b      	ldr	r3, [r3, #0]
10044a46:	697a      	ldr	r2, [r7, #20]
10044a48:	1ad3      	subs	r3, r2, r3
10044a4a:	0018      	movs	r0, r3
10044a4c:	f7fc fbea 	bl	10041224 <__aeabi_ui2f>
10044a50:	1c04      	adds	r4, r0, #0
10044a52:	4b67      	ldr	r3, [pc, #412]	@ (10044bf0 <MP3_Event_Updater+0x200>)
10044a54:	681b      	ldr	r3, [r3, #0]
10044a56:	4967      	ldr	r1, [pc, #412]	@ (10044bf4 <MP3_Event_Updater+0x204>)
10044a58:	1c18      	adds	r0, r3, #0
10044a5a:	f7fb ffb5 	bl	100409c8 <__aeabi_fmul>
10044a5e:	1c03      	adds	r3, r0, #0
10044a60:	1c19      	adds	r1, r3, #0
10044a62:	1c20      	adds	r0, r4, #0
10044a64:	f7fb fd9e 	bl	100405a4 <__aeabi_fcmpge>
10044a68:	1e03      	subs	r3, r0, #0
10044a6a:	d03f      	beq.n	10044aec <MP3_Event_Updater+0xfc>
			event.status = EVENT_TIMEOUT;
10044a6c:	2108      	movs	r1, #8
10044a6e:	187b      	adds	r3, r7, r1
10044a70:	2209      	movs	r2, #9
10044a72:	701a      	strb	r2, [r3, #0]
			event.data = 0;//next state of play
10044a74:	187b      	adds	r3, r7, r1
10044a76:	2200      	movs	r2, #0
10044a78:	805a      	strh	r2, [r3, #2]
			starttime = timer;
10044a7a:	4b5c      	ldr	r3, [pc, #368]	@ (10044bec <MP3_Event_Updater+0x1fc>)
10044a7c:	697a      	ldr	r2, [r7, #20]
10044a7e:	601a      	str	r2, [r3, #0]
			MP3_Event_Post(event);
10044a80:	187b      	adds	r3, r7, r1
10044a82:	6818      	ldr	r0, [r3, #0]
10044a84:	f7ff ffa2 	bl	100449cc <MP3_Event_Post>
10044a88:	e030      	b.n	10044aec <MP3_Event_Updater+0xfc>
		}
    } else {
		if(DC != 0 && ((timer-starttime) >= CYCLELENGTH*(1-DC))){// if the speaker is playing and time is up, DC = 0 don't play
10044a8a:	4b59      	ldr	r3, [pc, #356]	@ (10044bf0 <MP3_Event_Updater+0x200>)
10044a8c:	681b      	ldr	r3, [r3, #0]
10044a8e:	2100      	movs	r1, #0
10044a90:	1c18      	adds	r0, r3, #0
10044a92:	f7fb fd63 	bl	1004055c <__aeabi_fcmpeq>
10044a96:	1e03      	subs	r3, r0, #0
10044a98:	d128      	bne.n	10044aec <MP3_Event_Updater+0xfc>
10044a9a:	4b54      	ldr	r3, [pc, #336]	@ (10044bec <MP3_Event_Updater+0x1fc>)
10044a9c:	681b      	ldr	r3, [r3, #0]
10044a9e:	697a      	ldr	r2, [r7, #20]
10044aa0:	1ad3      	subs	r3, r2, r3
10044aa2:	0018      	movs	r0, r3
10044aa4:	f7fc fbbe 	bl	10041224 <__aeabi_ui2f>
10044aa8:	1c04      	adds	r4, r0, #0
10044aaa:	4b51      	ldr	r3, [pc, #324]	@ (10044bf0 <MP3_Event_Updater+0x200>)
10044aac:	681b      	ldr	r3, [r3, #0]
10044aae:	1c19      	adds	r1, r3, #0
10044ab0:	20fe      	movs	r0, #254	@ 0xfe
10044ab2:	0580      	lsls	r0, r0, #22
10044ab4:	f7fc f8e2 	bl	10040c7c <__aeabi_fsub>
10044ab8:	1c03      	adds	r3, r0, #0
10044aba:	494e      	ldr	r1, [pc, #312]	@ (10044bf4 <MP3_Event_Updater+0x204>)
10044abc:	1c18      	adds	r0, r3, #0
10044abe:	f7fb ff83 	bl	100409c8 <__aeabi_fmul>
10044ac2:	1c03      	adds	r3, r0, #0
10044ac4:	1c19      	adds	r1, r3, #0
10044ac6:	1c20      	adds	r0, r4, #0
10044ac8:	f7fb fd6c 	bl	100405a4 <__aeabi_fcmpge>
10044acc:	1e03      	subs	r3, r0, #0
10044ace:	d00d      	beq.n	10044aec <MP3_Event_Updater+0xfc>
			event.status = EVENT_TIMEOUT;
10044ad0:	2108      	movs	r1, #8
10044ad2:	187b      	adds	r3, r7, r1
10044ad4:	2209      	movs	r2, #9
10044ad6:	701a      	strb	r2, [r3, #0]
			event.data = 1;//next state of play
10044ad8:	187b      	adds	r3, r7, r1
10044ada:	2201      	movs	r2, #1
10044adc:	805a      	strh	r2, [r3, #2]
			starttime = timer;
10044ade:	4b43      	ldr	r3, [pc, #268]	@ (10044bec <MP3_Event_Updater+0x1fc>)
10044ae0:	697a      	ldr	r2, [r7, #20]
10044ae2:	601a      	str	r2, [r3, #0]
			MP3_Event_Post(event);
10044ae4:	187b      	adds	r3, r7, r1
10044ae6:	6818      	ldr	r0, [r3, #0]
10044ae8:	f7ff ff70 	bl	100449cc <MP3_Event_Post>
		}
    }
    if(((timer-inittime) >= 3000) && !initialized){//if the speaker is playing, and time is up
10044aec:	4b42      	ldr	r3, [pc, #264]	@ (10044bf8 <MP3_Event_Updater+0x208>)
10044aee:	681b      	ldr	r3, [r3, #0]
10044af0:	697a      	ldr	r2, [r7, #20]
10044af2:	1ad3      	subs	r3, r2, r3
10044af4:	4a41      	ldr	r2, [pc, #260]	@ (10044bfc <MP3_Event_Updater+0x20c>)
10044af6:	4293      	cmp	r3, r2
10044af8:	d90e      	bls.n	10044b18 <MP3_Event_Updater+0x128>
10044afa:	4b41      	ldr	r3, [pc, #260]	@ (10044c00 <MP3_Event_Updater+0x210>)
10044afc:	781b      	ldrb	r3, [r3, #0]
10044afe:	2b00      	cmp	r3, #0
10044b00:	d10a      	bne.n	10044b18 <MP3_Event_Updater+0x128>
		event.status = EVENT_INIT;
10044b02:	2108      	movs	r1, #8
10044b04:	187b      	adds	r3, r7, r1
10044b06:	2201      	movs	r2, #1
10044b08:	701a      	strb	r2, [r3, #0]
		event.data = 0;
10044b0a:	187b      	adds	r3, r7, r1
10044b0c:	2200      	movs	r2, #0
10044b0e:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10044b10:	187b      	adds	r3, r7, r1
10044b12:	6818      	ldr	r0, [r3, #0]
10044b14:	f7ff ff5a 	bl	100449cc <MP3_Event_Post>
	}
    if(volume != FLASH_GetVolume()/100 || DC != FLASH_GetDutyCycle()/100){
10044b18:	f7fe fffe 	bl	10043b18 <FLASH_GetVolume>
10044b1c:	0003      	movs	r3, r0
10044b1e:	2164      	movs	r1, #100	@ 0x64
10044b20:	0018      	movs	r0, r3
10044b22:	f7fb fb8d 	bl	10040240 <__udivsi3>
10044b26:	0003      	movs	r3, r0
10044b28:	b2db      	uxtb	r3, r3
10044b2a:	0018      	movs	r0, r3
10044b2c:	f7fc fb2a 	bl	10041184 <__aeabi_i2f>
10044b30:	1c02      	adds	r2, r0, #0
10044b32:	4b34      	ldr	r3, [pc, #208]	@ (10044c04 <MP3_Event_Updater+0x214>)
10044b34:	681b      	ldr	r3, [r3, #0]
10044b36:	1c19      	adds	r1, r3, #0
10044b38:	1c10      	adds	r0, r2, #0
10044b3a:	f7fb fd0f 	bl	1004055c <__aeabi_fcmpeq>
10044b3e:	1e03      	subs	r3, r0, #0
10044b40:	d014      	beq.n	10044b6c <MP3_Event_Updater+0x17c>
10044b42:	f7fe ffff 	bl	10043b44 <FLASH_GetDutyCycle>
10044b46:	0003      	movs	r3, r0
10044b48:	2164      	movs	r1, #100	@ 0x64
10044b4a:	0018      	movs	r0, r3
10044b4c:	f7fb fb78 	bl	10040240 <__udivsi3>
10044b50:	0003      	movs	r3, r0
10044b52:	b2db      	uxtb	r3, r3
10044b54:	0018      	movs	r0, r3
10044b56:	f7fc fb15 	bl	10041184 <__aeabi_i2f>
10044b5a:	1c02      	adds	r2, r0, #0
10044b5c:	4b24      	ldr	r3, [pc, #144]	@ (10044bf0 <MP3_Event_Updater+0x200>)
10044b5e:	681b      	ldr	r3, [r3, #0]
10044b60:	1c19      	adds	r1, r3, #0
10044b62:	1c10      	adds	r0, r2, #0
10044b64:	f7fb fcfa 	bl	1004055c <__aeabi_fcmpeq>
10044b68:	1e03      	subs	r3, r0, #0
10044b6a:	d125      	bne.n	10044bb8 <MP3_Event_Updater+0x1c8>
    	event.status = EVENT_SETTINGS;
10044b6c:	2308      	movs	r3, #8
10044b6e:	18fb      	adds	r3, r7, r3
10044b70:	220a      	movs	r2, #10
10044b72:	701a      	strb	r2, [r3, #0]
    	event.data = (volume == FLASH_GetVolume()/100);
10044b74:	f7fe ffd0 	bl	10043b18 <FLASH_GetVolume>
10044b78:	0003      	movs	r3, r0
10044b7a:	2164      	movs	r1, #100	@ 0x64
10044b7c:	0018      	movs	r0, r3
10044b7e:	f7fb fb5f 	bl	10040240 <__udivsi3>
10044b82:	0003      	movs	r3, r0
10044b84:	b2db      	uxtb	r3, r3
10044b86:	0018      	movs	r0, r3
10044b88:	f7fc fafc 	bl	10041184 <__aeabi_i2f>
10044b8c:	1c02      	adds	r2, r0, #0
10044b8e:	4b1d      	ldr	r3, [pc, #116]	@ (10044c04 <MP3_Event_Updater+0x214>)
10044b90:	681b      	ldr	r3, [r3, #0]
10044b92:	2101      	movs	r1, #1
10044b94:	1c0c      	adds	r4, r1, #0
10044b96:	1c19      	adds	r1, r3, #0
10044b98:	1c10      	adds	r0, r2, #0
10044b9a:	f7fb fcdf 	bl	1004055c <__aeabi_fcmpeq>
10044b9e:	1e03      	subs	r3, r0, #0
10044ba0:	d101      	bne.n	10044ba6 <MP3_Event_Updater+0x1b6>
10044ba2:	2300      	movs	r3, #0
10044ba4:	1c1c      	adds	r4, r3, #0
10044ba6:	b2e3      	uxtb	r3, r4
10044ba8:	001a      	movs	r2, r3
10044baa:	2108      	movs	r1, #8
10044bac:	187b      	adds	r3, r7, r1
10044bae:	805a      	strh	r2, [r3, #2]
		MP3_Event_Post(event);
10044bb0:	187b      	adds	r3, r7, r1
10044bb2:	6818      	ldr	r0, [r3, #0]
10044bb4:	f7ff ff0a 	bl	100449cc <MP3_Event_Post>
    }
    return event;
10044bb8:	210c      	movs	r1, #12
10044bba:	187b      	adds	r3, r7, r1
10044bbc:	2208      	movs	r2, #8
10044bbe:	18ba      	adds	r2, r7, r2
10044bc0:	6812      	ldr	r2, [r2, #0]
10044bc2:	601a      	str	r2, [r3, #0]
10044bc4:	187a      	adds	r2, r7, r1
10044bc6:	2300      	movs	r3, #0
10044bc8:	8811      	ldrh	r1, [r2, #0]
10044bca:	0409      	lsls	r1, r1, #16
10044bcc:	0c09      	lsrs	r1, r1, #16
10044bce:	0c1b      	lsrs	r3, r3, #16
10044bd0:	041b      	lsls	r3, r3, #16
10044bd2:	430b      	orrs	r3, r1
10044bd4:	8852      	ldrh	r2, [r2, #2]
10044bd6:	0412      	lsls	r2, r2, #16
10044bd8:	041b      	lsls	r3, r3, #16
10044bda:	0c1b      	lsrs	r3, r3, #16
10044bdc:	4313      	orrs	r3, r2
}
10044bde:	0018      	movs	r0, r3
10044be0:	46bd      	mov	sp, r7
10044be2:	b007      	add	sp, #28
10044be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10044be6:	46c0      	nop			@ (mov r8, r8)
10044be8:	20001d10 	.word	0x20001d10
10044bec:	20001d1c 	.word	0x20001d1c
10044bf0:	20001d14 	.word	0x20001d14
10044bf4:	49127c00 	.word	0x49127c00
10044bf8:	20001d20 	.word	0x20001d20
10044bfc:	00000bb7 	.word	0x00000bb7
10044c00:	20001d24 	.word	0x20001d24
10044c04:	20001d18 	.word	0x20001d18

10044c08 <MP3_Event_Handler>:
 * @Function: MP3_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t MP3_Event_Handler(Event_t event){
10044c08:	b590      	push	{r4, r7, lr}
10044c0a:	b08b      	sub	sp, #44	@ 0x2c
10044c0c:	af00      	add	r7, sp, #0
10044c0e:	1d3b      	adds	r3, r7, #4
10044c10:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_INIT){
10044c12:	1d3b      	adds	r3, r7, #4
10044c14:	781b      	ldrb	r3, [r3, #0]
10044c16:	b25b      	sxtb	r3, r3
10044c18:	2b01      	cmp	r3, #1
10044c1a:	d10a      	bne.n	10044c32 <MP3_Event_Handler+0x2a>
		//7E FF 06 08 00 00 01 xx EF //repeat folder
		char send[4] = {0x08, 0x00, 0x00, 0x01};
10044c1c:	2124      	movs	r1, #36	@ 0x24
10044c1e:	187b      	adds	r3, r7, r1
10044c20:	4a53      	ldr	r2, [pc, #332]	@ (10044d70 <MP3_Event_Handler+0x168>)
10044c22:	601a      	str	r2, [r3, #0]
		MP3_SendData(send);
10044c24:	187b      	adds	r3, r7, r1
10044c26:	0018      	movs	r0, r3
10044c28:	f7ff fe23 	bl	10044872 <MP3_SendData>
		initialized = 1;
10044c2c:	4b51      	ldr	r3, [pc, #324]	@ (10044d74 <MP3_Event_Handler+0x16c>)
10044c2e:	2201      	movs	r2, #1
10044c30:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
10044c32:	1d3b      	adds	r3, r7, #4
10044c34:	781b      	ldrb	r3, [r3, #0]
10044c36:	b25b      	sxtb	r3, r3
10044c38:	2b09      	cmp	r3, #9
10044c3a:	d119      	bne.n	10044c70 <MP3_Event_Handler+0x68>
		//send either play or stop to the mp3 player
		play = event.data;
10044c3c:	1d3b      	adds	r3, r7, #4
10044c3e:	885b      	ldrh	r3, [r3, #2]
10044c40:	b2da      	uxtb	r2, r3
10044c42:	4b4d      	ldr	r3, [pc, #308]	@ (10044d78 <MP3_Event_Handler+0x170>)
10044c44:	701a      	strb	r2, [r3, #0]
		if(play){
10044c46:	4b4c      	ldr	r3, [pc, #304]	@ (10044d78 <MP3_Event_Handler+0x170>)
10044c48:	781b      	ldrb	r3, [r3, #0]
10044c4a:	2b00      	cmp	r3, #0
10044c4c:	d008      	beq.n	10044c60 <MP3_Event_Handler+0x58>
			char send[4] = {0x0D, 0x00, 0x00, 0x00};
10044c4e:	2120      	movs	r1, #32
10044c50:	187b      	adds	r3, r7, r1
10044c52:	220d      	movs	r2, #13
10044c54:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10044c56:	187b      	adds	r3, r7, r1
10044c58:	0018      	movs	r0, r3
10044c5a:	f7ff fe0a 	bl	10044872 <MP3_SendData>
10044c5e:	e007      	b.n	10044c70 <MP3_Event_Handler+0x68>
		}else {

			char send[4] = {0x0E, 0x00, 0x00, 0x00};
10044c60:	211c      	movs	r1, #28
10044c62:	187b      	adds	r3, r7, r1
10044c64:	220e      	movs	r2, #14
10044c66:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10044c68:	187b      	adds	r3, r7, r1
10044c6a:	0018      	movs	r0, r3
10044c6c:	f7ff fe01 	bl	10044872 <MP3_SendData>
		}

	}if(event.status == EVENT_PLAY){
10044c70:	1d3b      	adds	r3, r7, #4
10044c72:	781b      	ldrb	r3, [r3, #0]
10044c74:	b25b      	sxtb	r3, r3
10044c76:	2b0b      	cmp	r3, #11
10044c78:	d132      	bne.n	10044ce0 <MP3_Event_Handler+0xd8>

		Scheduler_Event_Post(event);
10044c7a:	1d3b      	adds	r3, r7, #4
10044c7c:	6818      	ldr	r0, [r3, #0]
10044c7e:	f000 fbf9 	bl	10045474 <Scheduler_Event_Post>
		if(event.data == 0){//0 is not a valid folder or track number
10044c82:	1d3b      	adds	r3, r7, #4
10044c84:	885b      	ldrh	r3, [r3, #2]
10044c86:	2b00      	cmp	r3, #0
10044c88:	d10b      	bne.n	10044ca2 <MP3_Event_Handler+0x9a>
			DC = 0;// immediately cause a timeout to stop the speaker
10044c8a:	4b3c      	ldr	r3, [pc, #240]	@ (10044d7c <MP3_Event_Handler+0x174>)
10044c8c:	2200      	movs	r2, #0
10044c8e:	601a      	str	r2, [r3, #0]
			char send[4] = {0x0A, 0x00, 0x00, 0x00};//enter low power mode
10044c90:	2118      	movs	r1, #24
10044c92:	187b      	adds	r3, r7, r1
10044c94:	220a      	movs	r2, #10
10044c96:	601a      	str	r2, [r3, #0]
			MP3_SendData(send);
10044c98:	187b      	adds	r3, r7, r1
10044c9a:	0018      	movs	r0, r3
10044c9c:	f7ff fde9 	bl	10044872 <MP3_SendData>
10044ca0:	e01e      	b.n	10044ce0 <MP3_Event_Handler+0xd8>
		} else {

			char send1[4] = {0x0B, 0x00, 0x00, 0x00};//exit low power mode?
10044ca2:	2114      	movs	r1, #20
10044ca4:	187b      	adds	r3, r7, r1
10044ca6:	220b      	movs	r2, #11
10044ca8:	601a      	str	r2, [r3, #0]
			MP3_SendData(send1);
10044caa:	187b      	adds	r3, r7, r1
10044cac:	0018      	movs	r0, r3
10044cae:	f7ff fde0 	bl	10044872 <MP3_SendData>
			//7E FF 06 0F 00 FOLDER# TRACK# xx EF

			char send2[4] = {0x0F, 0x00, event.data>>8, event.data&0xFF};
10044cb2:	2110      	movs	r1, #16
10044cb4:	187b      	adds	r3, r7, r1
10044cb6:	220f      	movs	r2, #15
10044cb8:	701a      	strb	r2, [r3, #0]
10044cba:	187b      	adds	r3, r7, r1
10044cbc:	2200      	movs	r2, #0
10044cbe:	705a      	strb	r2, [r3, #1]
10044cc0:	1d3b      	adds	r3, r7, #4
10044cc2:	885b      	ldrh	r3, [r3, #2]
10044cc4:	0a1b      	lsrs	r3, r3, #8
10044cc6:	b29b      	uxth	r3, r3
10044cc8:	b2da      	uxtb	r2, r3
10044cca:	187b      	adds	r3, r7, r1
10044ccc:	709a      	strb	r2, [r3, #2]
10044cce:	1d3b      	adds	r3, r7, #4
10044cd0:	885b      	ldrh	r3, [r3, #2]
10044cd2:	b2da      	uxtb	r2, r3
10044cd4:	187b      	adds	r3, r7, r1
10044cd6:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send2);
10044cd8:	187b      	adds	r3, r7, r1
10044cda:	0018      	movs	r0, r3
10044cdc:	f7ff fdc9 	bl	10044872 <MP3_SendData>
		}


	}if(event.status == EVENT_SETTINGS){
10044ce0:	1d3b      	adds	r3, r7, #4
10044ce2:	781b      	ldrb	r3, [r3, #0]
10044ce4:	b25b      	sxtb	r3, r3
10044ce6:	2b0a      	cmp	r3, #10
10044ce8:	d13d      	bne.n	10044d66 <MP3_Event_Handler+0x15e>
		DC = FLASH_GetDutyCycle()/100;
10044cea:	f7fe ff2b 	bl	10043b44 <FLASH_GetDutyCycle>
10044cee:	0003      	movs	r3, r0
10044cf0:	2164      	movs	r1, #100	@ 0x64
10044cf2:	0018      	movs	r0, r3
10044cf4:	f7fb faa4 	bl	10040240 <__udivsi3>
10044cf8:	0003      	movs	r3, r0
10044cfa:	b2db      	uxtb	r3, r3
10044cfc:	0018      	movs	r0, r3
10044cfe:	f7fc fa41 	bl	10041184 <__aeabi_i2f>
10044d02:	1c02      	adds	r2, r0, #0
10044d04:	4b1d      	ldr	r3, [pc, #116]	@ (10044d7c <MP3_Event_Handler+0x174>)
10044d06:	601a      	str	r2, [r3, #0]
		volume = FLASH_GetVolume()/100;
10044d08:	f7fe ff06 	bl	10043b18 <FLASH_GetVolume>
10044d0c:	0003      	movs	r3, r0
10044d0e:	2164      	movs	r1, #100	@ 0x64
10044d10:	0018      	movs	r0, r3
10044d12:	f7fb fa95 	bl	10040240 <__udivsi3>
10044d16:	0003      	movs	r3, r0
10044d18:	b2db      	uxtb	r3, r3
10044d1a:	0018      	movs	r0, r3
10044d1c:	f7fc fa32 	bl	10041184 <__aeabi_i2f>
10044d20:	1c02      	adds	r2, r0, #0
10044d22:	4b17      	ldr	r3, [pc, #92]	@ (10044d80 <MP3_Event_Handler+0x178>)
10044d24:	601a      	str	r2, [r3, #0]
		if(!event.data){//volume == FLASH_GetVolume()/100
10044d26:	1d3b      	adds	r3, r7, #4
10044d28:	885b      	ldrh	r3, [r3, #2]
10044d2a:	2b00      	cmp	r3, #0
10044d2c:	d11b      	bne.n	10044d66 <MP3_Event_Handler+0x15e>
			//send new volume to the mp3 player
			char send[4] = {0x06, 0x00, 0x00, (uint8_t)(volume*30)};
10044d2e:	240c      	movs	r4, #12
10044d30:	193b      	adds	r3, r7, r4
10044d32:	2206      	movs	r2, #6
10044d34:	701a      	strb	r2, [r3, #0]
10044d36:	193b      	adds	r3, r7, r4
10044d38:	2200      	movs	r2, #0
10044d3a:	705a      	strb	r2, [r3, #1]
10044d3c:	193b      	adds	r3, r7, r4
10044d3e:	2200      	movs	r2, #0
10044d40:	709a      	strb	r2, [r3, #2]
10044d42:	4b0f      	ldr	r3, [pc, #60]	@ (10044d80 <MP3_Event_Handler+0x178>)
10044d44:	681b      	ldr	r3, [r3, #0]
10044d46:	490f      	ldr	r1, [pc, #60]	@ (10044d84 <MP3_Event_Handler+0x17c>)
10044d48:	1c18      	adds	r0, r3, #0
10044d4a:	f7fb fe3d 	bl	100409c8 <__aeabi_fmul>
10044d4e:	1c03      	adds	r3, r0, #0
10044d50:	1c18      	adds	r0, r3, #0
10044d52:	f7fb fc9d 	bl	10040690 <__aeabi_f2uiz>
10044d56:	0003      	movs	r3, r0
10044d58:	b2da      	uxtb	r2, r3
10044d5a:	193b      	adds	r3, r7, r4
10044d5c:	70da      	strb	r2, [r3, #3]
			MP3_SendData(send);
10044d5e:	193b      	adds	r3, r7, r4
10044d60:	0018      	movs	r0, r3
10044d62:	f7ff fd86 	bl	10044872 <MP3_SendData>
		}
	}if (event.status == EVENT_LPUART){
		//don't do anything for now, may parse errors and moving to next track later
	}
    return 1;
10044d66:	2301      	movs	r3, #1
}
10044d68:	0018      	movs	r0, r3
10044d6a:	46bd      	mov	sp, r7
10044d6c:	b00b      	add	sp, #44	@ 0x2c
10044d6e:	bd90      	pop	{r4, r7, pc}
10044d70:	01000008 	.word	0x01000008
10044d74:	20001d24 	.word	0x20001d24
10044d78:	20001d10 	.word	0x20001d10
10044d7c:	20001d14 	.word	0x20001d14
10044d80:	20001d18 	.word	0x20001d18
10044d84:	41f00000 	.word	0x41f00000

10044d88 <OledInit>:
#include <OledDriver.h>
#include <Oled.h>
#include <Ascii.h>

void OledInit(void)
{
10044d88:	b580      	push	{r7, lr}
10044d8a:	af00      	add	r7, sp, #0
    // First initialize the STM32 to be able to talk over I2C to the OLED.
    OledHostInit();
10044d8c:	f000 f96f 	bl	1004506e <OledHostInit>
    HAL_Delay(10);
10044d90:	200a      	movs	r0, #10
10044d92:	f002 f9a7 	bl	100470e4 <HAL_Delay>

    // Now send initialization commands to the OLED.
    OledDriverInitDisplay();
10044d96:	f000 f975 	bl	10045084 <OledDriverInitDisplay>
    HAL_Delay(200);//allow time for OLED screen to initialize
10044d9a:	20c8      	movs	r0, #200	@ 0xc8
10044d9c:	f002 f9a2 	bl	100470e4 <HAL_Delay>

    // Clear the frame buffer by filling it with black pixels.
    OledClear(OLED_COLOR_BLACK);
10044da0:	2000      	movs	r0, #0
10044da2:	f000 f927 	bl	10044ff4 <OledClear>

    // Finally update the screen, triggering a write of all black pixels to the screen.
    OledUpdate();
10044da6:	f000 f95b 	bl	10045060 <OledUpdate>
}
10044daa:	46c0      	nop			@ (mov r8, r8)
10044dac:	46bd      	mov	sp, r7
10044dae:	bd80      	pop	{r7, pc}

10044db0 <OledDrawChar>:
    // Now return the desired bit.
    return (rgbOledBmp[index] >> shift) & 0x01;
}

uint8_t OledDrawChar(int x, int y, char c)
{
10044db0:	b580      	push	{r7, lr}
10044db2:	b092      	sub	sp, #72	@ 0x48
10044db4:	af00      	add	r7, sp, #0
10044db6:	60f8      	str	r0, [r7, #12]
10044db8:	60b9      	str	r1, [r7, #8]
10044dba:	1dfb      	adds	r3, r7, #7
10044dbc:	701a      	strb	r2, [r3, #0]
    if (x <= OLED_DRIVER_PIXEL_COLUMNS - ASCII_FONT_WIDTH && y <= OLED_DRIVER_PIXEL_ROWS - ASCII_FONT_HEIGHT) {
10044dbe:	68fb      	ldr	r3, [r7, #12]
10044dc0:	2b7a      	cmp	r3, #122	@ 0x7a
10044dc2:	dd00      	ble.n	10044dc6 <OledDrawChar+0x16>
10044dc4:	e0c0      	b.n	10044f48 <OledDrawChar+0x198>
10044dc6:	68bb      	ldr	r3, [r7, #8]
10044dc8:	2b38      	cmp	r3, #56	@ 0x38
10044dca:	dd00      	ble.n	10044dce <OledDrawChar+0x1e>
10044dcc:	e0bc      	b.n	10044f48 <OledDrawChar+0x198>
        // We need to convert our signed char into an unsigned value to index into the ascii[] array.
        int charIndex = (int) (unsigned char) c;
10044dce:	1dfb      	adds	r3, r7, #7
10044dd0:	781b      	ldrb	r3, [r3, #0]
10044dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        // Now first determine the columns and rows of the OLED bits that need to be modified
        int rowMin, rowMax, colMin, colMax;
        rowMin = y / ASCII_FONT_HEIGHT;
10044dd4:	68bb      	ldr	r3, [r7, #8]
10044dd6:	2b00      	cmp	r3, #0
10044dd8:	da00      	bge.n	10044ddc <OledDrawChar+0x2c>
10044dda:	3307      	adds	r3, #7
10044ddc:	10db      	asrs	r3, r3, #3
10044dde:	63bb      	str	r3, [r7, #56]	@ 0x38
        int rowY = y % ASCII_FONT_HEIGHT;
10044de0:	68bb      	ldr	r3, [r7, #8]
10044de2:	4a5c      	ldr	r2, [pc, #368]	@ (10044f54 <OledDrawChar+0x1a4>)
10044de4:	4013      	ands	r3, r2
10044de6:	d504      	bpl.n	10044df2 <OledDrawChar+0x42>
10044de8:	3b01      	subs	r3, #1
10044dea:	2208      	movs	r2, #8
10044dec:	4252      	negs	r2, r2
10044dee:	4313      	orrs	r3, r2
10044df0:	3301      	adds	r3, #1
10044df2:	637b      	str	r3, [r7, #52]	@ 0x34
        rowMax = (y + ASCII_FONT_HEIGHT) / OLED_DRIVER_BUFFER_LINE_HEIGHT;
10044df4:	68bb      	ldr	r3, [r7, #8]
10044df6:	3308      	adds	r3, #8
10044df8:	2b00      	cmp	r3, #0
10044dfa:	da00      	bge.n	10044dfe <OledDrawChar+0x4e>
10044dfc:	3307      	adds	r3, #7
10044dfe:	10db      	asrs	r3, r3, #3
10044e00:	633b      	str	r3, [r7, #48]	@ 0x30
        colMin = x;
10044e02:	68fb      	ldr	r3, [r7, #12]
10044e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        colMax = x + ASCII_FONT_WIDTH;
10044e06:	68fb      	ldr	r3, [r7, #12]
10044e08:	3306      	adds	r3, #6
10044e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
        {
            // Generate a positive mask for where in the column the new symbol will be drawn.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) << rowY;
10044e0c:	22ff      	movs	r2, #255	@ 0xff
10044e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044e10:	409a      	lsls	r2, r3
10044e12:	0013      	movs	r3, r2
10044e14:	627b      	str	r3, [r7, #36]	@ 0x24
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
10044e16:	2300      	movs	r3, #0
10044e18:	647b      	str	r3, [r7, #68]	@ 0x44
10044e1a:	e03a      	b.n	10044e92 <OledDrawChar+0xe2>
                int oledCol = colMin + j;
10044e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10044e1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044e20:	18d3      	adds	r3, r2, r3
10044e22:	617b      	str	r3, [r7, #20]
                uint8_t newCharCol = rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] & ~colMask;
10044e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044e26:	01da      	lsls	r2, r3, #7
10044e28:	697b      	ldr	r3, [r7, #20]
10044e2a:	18d3      	adds	r3, r2, r3
10044e2c:	4a4a      	ldr	r2, [pc, #296]	@ (10044f58 <OledDrawChar+0x1a8>)
10044e2e:	5cd3      	ldrb	r3, [r2, r3]
10044e30:	b25b      	sxtb	r3, r3
10044e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10044e34:	b252      	sxtb	r2, r2
10044e36:	43d2      	mvns	r2, r2
10044e38:	b252      	sxtb	r2, r2
10044e3a:	4013      	ands	r3, r2
10044e3c:	b25a      	sxtb	r2, r3
10044e3e:	2013      	movs	r0, #19
10044e40:	183b      	adds	r3, r7, r0
10044e42:	701a      	strb	r2, [r3, #0]
                // Make sure we always grab from the top part of the character.
                newCharCol |= (ascii[charIndex][j] & (colMask >> rowY)) << rowY;
10044e44:	4945      	ldr	r1, [pc, #276]	@ (10044f5c <OledDrawChar+0x1ac>)
10044e46:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10044e48:	0013      	movs	r3, r2
10044e4a:	005b      	lsls	r3, r3, #1
10044e4c:	189b      	adds	r3, r3, r2
10044e4e:	005b      	lsls	r3, r3, #1
10044e50:	18ca      	adds	r2, r1, r3
10044e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044e54:	18d3      	adds	r3, r2, r3
10044e56:	781b      	ldrb	r3, [r3, #0]
10044e58:	0019      	movs	r1, r3
10044e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10044e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044e5e:	411a      	asrs	r2, r3
10044e60:	0013      	movs	r3, r2
10044e62:	400b      	ands	r3, r1
10044e64:	001a      	movs	r2, r3
10044e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044e68:	409a      	lsls	r2, r3
10044e6a:	0013      	movs	r3, r2
10044e6c:	b25a      	sxtb	r2, r3
10044e6e:	183b      	adds	r3, r7, r0
10044e70:	781b      	ldrb	r3, [r3, #0]
10044e72:	b25b      	sxtb	r3, r3
10044e74:	4313      	orrs	r3, r2
10044e76:	b25a      	sxtb	r2, r3
10044e78:	183b      	adds	r3, r7, r0
10044e7a:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMin * OLED_DRIVER_PIXEL_COLUMNS + oledCol] = newCharCol;
10044e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044e7e:	01da      	lsls	r2, r3, #7
10044e80:	697b      	ldr	r3, [r7, #20]
10044e82:	18d3      	adds	r3, r2, r3
10044e84:	4a34      	ldr	r2, [pc, #208]	@ (10044f58 <OledDrawChar+0x1a8>)
10044e86:	1839      	adds	r1, r7, r0
10044e88:	7809      	ldrb	r1, [r1, #0]
10044e8a:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
10044e8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10044e8e:	3301      	adds	r3, #1
10044e90:	647b      	str	r3, [r7, #68]	@ 0x44
10044e92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10044e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044e96:	1ad3      	subs	r3, r2, r3
10044e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
10044e9a:	429a      	cmp	r2, r3
10044e9c:	dbbe      	blt.n	10044e1c <OledDrawChar+0x6c>
            }
        }
        if (rowMax > rowMin) {
10044e9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10044ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10044ea2:	429a      	cmp	r2, r3
10044ea4:	dd50      	ble.n	10044f48 <OledDrawChar+0x198>
            // Generate a positive mask for where in the column the new symbol will be drawn.
            // Since we need the lower portion of the symbol, we recalculate its height.
            int colMask = ((1 << ASCII_FONT_HEIGHT) - 1) >> (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
10044ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044ea8:	2208      	movs	r2, #8
10044eaa:	1ad3      	subs	r3, r2, r3
10044eac:	22ff      	movs	r2, #255	@ 0xff
10044eae:	411a      	asrs	r2, r3
10044eb0:	0013      	movs	r3, r2
10044eb2:	623b      	str	r3, [r7, #32]
            int j;
            for (j = 0; j < colMax - colMin; ++j) {
10044eb4:	2300      	movs	r3, #0
10044eb6:	643b      	str	r3, [r7, #64]	@ 0x40
10044eb8:	e040      	b.n	10044f3c <OledDrawChar+0x18c>
                int oledCol = colMin + j;
10044eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10044ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10044ebe:	18d3      	adds	r3, r2, r3
10044ec0:	61fb      	str	r3, [r7, #28]
                uint8_t newCharCol = rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] & ~colMask;
10044ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10044ec4:	01db      	lsls	r3, r3, #7
10044ec6:	1d5a      	adds	r2, r3, #5
10044ec8:	69fb      	ldr	r3, [r7, #28]
10044eca:	1ad3      	subs	r3, r2, r3
10044ecc:	4a22      	ldr	r2, [pc, #136]	@ (10044f58 <OledDrawChar+0x1a8>)
10044ece:	5cd3      	ldrb	r3, [r2, r3]
10044ed0:	b25b      	sxtb	r3, r3
10044ed2:	6a3a      	ldr	r2, [r7, #32]
10044ed4:	b252      	sxtb	r2, r2
10044ed6:	43d2      	mvns	r2, r2
10044ed8:	b252      	sxtb	r2, r2
10044eda:	4013      	ands	r3, r2
10044edc:	b25a      	sxtb	r2, r3
10044ede:	201b      	movs	r0, #27
10044ee0:	183b      	adds	r3, r7, r0
10044ee2:	701a      	strb	r2, [r3, #0]
                // Make sure we grab the proper part of the character from the font.
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
10044ee4:	491d      	ldr	r1, [pc, #116]	@ (10044f5c <OledDrawChar+0x1ac>)
10044ee6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10044ee8:	0013      	movs	r3, r2
10044eea:	005b      	lsls	r3, r3, #1
10044eec:	189b      	adds	r3, r3, r2
10044eee:	005b      	lsls	r3, r3, #1
10044ef0:	18ca      	adds	r2, r1, r3
10044ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10044ef4:	18d3      	adds	r3, r2, r3
10044ef6:	781b      	ldrb	r3, [r3, #0]
10044ef8:	0019      	movs	r1, r3
10044efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044efc:	2208      	movs	r2, #8
10044efe:	1ad3      	subs	r3, r2, r3
10044f00:	6a3a      	ldr	r2, [r7, #32]
10044f02:	409a      	lsls	r2, r3
10044f04:	0013      	movs	r3, r2
10044f06:	400b      	ands	r3, r1
10044f08:	001a      	movs	r2, r3
                        (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY);
10044f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10044f0c:	2108      	movs	r1, #8
10044f0e:	1acb      	subs	r3, r1, r3
                newCharCol |= (ascii[charIndex][j] & (colMask << (OLED_DRIVER_BUFFER_LINE_HEIGHT - rowY))) >>
10044f10:	411a      	asrs	r2, r3
10044f12:	0013      	movs	r3, r2
10044f14:	b25a      	sxtb	r2, r3
10044f16:	183b      	adds	r3, r7, r0
10044f18:	781b      	ldrb	r3, [r3, #0]
10044f1a:	b25b      	sxtb	r3, r3
10044f1c:	4313      	orrs	r3, r2
10044f1e:	b25a      	sxtb	r2, r3
10044f20:	183b      	adds	r3, r7, r0
10044f22:	701a      	strb	r2, [r3, #0]
                rgbOledBmp[rowMax * OLED_DRIVER_PIXEL_COLUMNS + ASCII_FONT_WIDTH - 1 - oledCol] = newCharCol;
10044f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10044f26:	01db      	lsls	r3, r3, #7
10044f28:	1d5a      	adds	r2, r3, #5
10044f2a:	69fb      	ldr	r3, [r7, #28]
10044f2c:	1ad3      	subs	r3, r2, r3
10044f2e:	4a0a      	ldr	r2, [pc, #40]	@ (10044f58 <OledDrawChar+0x1a8>)
10044f30:	1839      	adds	r1, r7, r0
10044f32:	7809      	ldrb	r1, [r1, #0]
10044f34:	54d1      	strb	r1, [r2, r3]
            for (j = 0; j < colMax - colMin; ++j) {
10044f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10044f38:	3301      	adds	r3, #1
10044f3a:	643b      	str	r3, [r7, #64]	@ 0x40
10044f3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10044f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10044f40:	1ad3      	subs	r3, r2, r3
10044f42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
10044f44:	429a      	cmp	r2, r3
10044f46:	dbb8      	blt.n	10044eba <OledDrawChar+0x10a>
            }
        }
    }

    return FALSE;
10044f48:	2300      	movs	r3, #0
}
10044f4a:	0018      	movs	r0, r3
10044f4c:	46bd      	mov	sp, r7
10044f4e:	b012      	add	sp, #72	@ 0x48
10044f50:	bd80      	pop	{r7, pc}
10044f52:	46c0      	nop			@ (mov r8, r8)
10044f54:	80000007 	.word	0x80000007
10044f58:	20001d28 	.word	0x20001d28
10044f5c:	10068d0c 	.word	0x10068d0c

10044f60 <OledDrawString>:

void OledDrawString(const char *string)
{
10044f60:	b580      	push	{r7, lr}
10044f62:	b086      	sub	sp, #24
10044f64:	af00      	add	r7, sp, #0
10044f66:	6078      	str	r0, [r7, #4]
    if (string == NULL) {
10044f68:	687b      	ldr	r3, [r7, #4]
10044f6a:	2b00      	cmp	r3, #0
10044f6c:	d03c      	beq.n	10044fe8 <OledDrawString+0x88>
        return;
    }

    // Track the current line number we're in on the OLED. Valid values are [0, OLED_NUM_LINES).
    int line = 0;
10044f6e:	2300      	movs	r3, #0
10044f70:	617b      	str	r3, [r7, #20]

    // Track the current character we're writing to the OLED. Valid values are
    // [0, OLED_CHARS_PER_LINE).
    int column = 0;
10044f72:	2300      	movs	r3, #0
10044f74:	613b      	str	r3, [r7, #16]

    // Run through all characters. The maximum length can be the number of lines times the number
    // of characters per line + three newlines.
    int i;
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
10044f76:	2300      	movs	r3, #0
10044f78:	60fb      	str	r3, [r7, #12]
10044f7a:	e02b      	b.n	10044fd4 <OledDrawString+0x74>
        // Move the cursor to the next line if a newline character is encountered. This allows for
        // early line ending.
        if (string[i] == '\n') {
10044f7c:	68fb      	ldr	r3, [r7, #12]
10044f7e:	687a      	ldr	r2, [r7, #4]
10044f80:	18d3      	adds	r3, r2, r3
10044f82:	781b      	ldrb	r3, [r3, #0]
10044f84:	2b0a      	cmp	r3, #10
10044f86:	d105      	bne.n	10044f94 <OledDrawString+0x34>
            ++line;
10044f88:	697b      	ldr	r3, [r7, #20]
10044f8a:	3301      	adds	r3, #1
10044f8c:	617b      	str	r3, [r7, #20]
            column = 0;
10044f8e:	2300      	movs	r3, #0
10044f90:	613b      	str	r3, [r7, #16]
            continue;
10044f92:	e01c      	b.n	10044fce <OledDrawString+0x6e>
        } else {
            // Reset to the start of the next line if we've hit the character limit of this line
            // without seeing a newline.
            if (column == OLED_CHARS_PER_LINE) {
10044f94:	693b      	ldr	r3, [r7, #16]
10044f96:	2b15      	cmp	r3, #21
10044f98:	d104      	bne.n	10044fa4 <OledDrawString+0x44>
                ++line;
10044f9a:	697b      	ldr	r3, [r7, #20]
10044f9c:	3301      	adds	r3, #1
10044f9e:	617b      	str	r3, [r7, #20]
                column = 0;
10044fa0:	2300      	movs	r3, #0
10044fa2:	613b      	str	r3, [r7, #16]
            }

            // Now if we're < OLED_NUM_LINES and < OLED_CHARS_PER_LINE we can proceed. The second
            // check is implicitly handled by the above if-statement that forces a newline after
            // encountering a full line of characters.
            if (line == OLED_NUM_LINES) {
10044fa4:	697b      	ldr	r3, [r7, #20]
10044fa6:	2b08      	cmp	r3, #8
10044fa8:	d020      	beq.n	10044fec <OledDrawString+0x8c>
                break;
            }

            // Finally at this point, we can write characters to the OLED.
            OledDrawChar(column * ASCII_FONT_WIDTH, line * ASCII_FONT_HEIGHT, string[i]);
10044faa:	693a      	ldr	r2, [r7, #16]
10044fac:	0013      	movs	r3, r2
10044fae:	005b      	lsls	r3, r3, #1
10044fb0:	189b      	adds	r3, r3, r2
10044fb2:	005b      	lsls	r3, r3, #1
10044fb4:	0018      	movs	r0, r3
10044fb6:	697b      	ldr	r3, [r7, #20]
10044fb8:	00d9      	lsls	r1, r3, #3
10044fba:	68fb      	ldr	r3, [r7, #12]
10044fbc:	687a      	ldr	r2, [r7, #4]
10044fbe:	18d3      	adds	r3, r2, r3
10044fc0:	781b      	ldrb	r3, [r3, #0]
10044fc2:	001a      	movs	r2, r3
10044fc4:	f7ff fef4 	bl	10044db0 <OledDrawChar>
            ++column;
10044fc8:	693b      	ldr	r3, [r7, #16]
10044fca:	3301      	adds	r3, #1
10044fcc:	613b      	str	r3, [r7, #16]
    for (i = 0; string[i] != '\0' && i < (OLED_NUM_LINES * OLED_CHARS_PER_LINE + 3); ++i) {
10044fce:	68fb      	ldr	r3, [r7, #12]
10044fd0:	3301      	adds	r3, #1
10044fd2:	60fb      	str	r3, [r7, #12]
10044fd4:	68fb      	ldr	r3, [r7, #12]
10044fd6:	687a      	ldr	r2, [r7, #4]
10044fd8:	18d3      	adds	r3, r2, r3
10044fda:	781b      	ldrb	r3, [r3, #0]
10044fdc:	2b00      	cmp	r3, #0
10044fde:	d006      	beq.n	10044fee <OledDrawString+0x8e>
10044fe0:	68fb      	ldr	r3, [r7, #12]
10044fe2:	2baa      	cmp	r3, #170	@ 0xaa
10044fe4:	ddca      	ble.n	10044f7c <OledDrawString+0x1c>
10044fe6:	e002      	b.n	10044fee <OledDrawString+0x8e>
        return;
10044fe8:	46c0      	nop			@ (mov r8, r8)
10044fea:	e000      	b.n	10044fee <OledDrawString+0x8e>
                break;
10044fec:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
10044fee:	46bd      	mov	sp, r7
10044ff0:	b006      	add	sp, #24
10044ff2:	bd80      	pop	{r7, pc}

10044ff4 <OledClear>:

void OledClear(OledColor p)
{
10044ff4:	b580      	push	{r7, lr}
10044ff6:	b084      	sub	sp, #16
10044ff8:	af00      	add	r7, sp, #0
10044ffa:	0002      	movs	r2, r0
10044ffc:	1dfb      	adds	r3, r7, #7
10044ffe:	701a      	strb	r2, [r3, #0]
    int i;
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
10045000:	2300      	movs	r3, #0
10045002:	60fb      	str	r3, [r7, #12]
10045004:	e011      	b.n	1004502a <OledClear+0x36>
        if (p == OLED_COLOR_WHITE) {
10045006:	1dfb      	adds	r3, r7, #7
10045008:	781b      	ldrb	r3, [r3, #0]
1004500a:	2b01      	cmp	r3, #1
1004500c:	d105      	bne.n	1004501a <OledClear+0x26>
            rgbOledBmp[i] = 0xFF;
1004500e:	4a0c      	ldr	r2, [pc, #48]	@ (10045040 <OledClear+0x4c>)
10045010:	68fb      	ldr	r3, [r7, #12]
10045012:	18d3      	adds	r3, r2, r3
10045014:	22ff      	movs	r2, #255	@ 0xff
10045016:	701a      	strb	r2, [r3, #0]
10045018:	e004      	b.n	10045024 <OledClear+0x30>
        } else {
            rgbOledBmp[i] = 0;
1004501a:	4a09      	ldr	r2, [pc, #36]	@ (10045040 <OledClear+0x4c>)
1004501c:	68fb      	ldr	r3, [r7, #12]
1004501e:	18d3      	adds	r3, r2, r3
10045020:	2200      	movs	r2, #0
10045022:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < OLED_DRIVER_BUFFER_SIZE; i++) {
10045024:	68fb      	ldr	r3, [r7, #12]
10045026:	3301      	adds	r3, #1
10045028:	60fb      	str	r3, [r7, #12]
1004502a:	68fa      	ldr	r2, [r7, #12]
1004502c:	2380      	movs	r3, #128	@ 0x80
1004502e:	00db      	lsls	r3, r3, #3
10045030:	429a      	cmp	r2, r3
10045032:	dbe8      	blt.n	10045006 <OledClear+0x12>
        }
    }
}
10045034:	46c0      	nop			@ (mov r8, r8)
10045036:	46c0      	nop			@ (mov r8, r8)
10045038:	46bd      	mov	sp, r7
1004503a:	b004      	add	sp, #16
1004503c:	bd80      	pop	{r7, pc}
1004503e:	46c0      	nop			@ (mov r8, r8)
10045040:	20001d28 	.word	0x20001d28

10045044 <OledOn>:
{
    OledDriverSetDisplayNormal();
}

void OledOn(void)
{
10045044:	b580      	push	{r7, lr}
10045046:	af00      	add	r7, sp, #0
    OledDriverInitDisplay();
10045048:	f000 f81c 	bl	10045084 <OledDriverInitDisplay>
}
1004504c:	46c0      	nop			@ (mov r8, r8)
1004504e:	46bd      	mov	sp, r7
10045050:	bd80      	pop	{r7, pc}

10045052 <OledOff>:

void OledOff(void)
{
10045052:	b580      	push	{r7, lr}
10045054:	af00      	add	r7, sp, #0
    OledDriverDisableDisplay();
10045056:	f000 f872 	bl	1004513e <OledDriverDisableDisplay>
}
1004505a:	46c0      	nop			@ (mov r8, r8)
1004505c:	46bd      	mov	sp, r7
1004505e:	bd80      	pop	{r7, pc}

10045060 <OledUpdate>:

void OledUpdate(void)
{
10045060:	b580      	push	{r7, lr}
10045062:	af00      	add	r7, sp, #0
    OledDriverUpdateDisplay();
10045064:	f000 f876 	bl	10045154 <OledDriverUpdateDisplay>
}
10045068:	46c0      	nop			@ (mov r8, r8)
1004506a:	46bd      	mov	sp, r7
1004506c:	bd80      	pop	{r7, pc}

1004506e <OledHostInit>:
/**
 * Initialize the STM32 to communicate with the OLED display through the SSD1306
 * display controller using an instance of I2C.
 */
void OledHostInit(void)
{
1004506e:	b580      	push	{r7, lr}
10045070:	af00      	add	r7, sp, #0
    BOARD_Init(); // init board and printf functionality
10045072:	f7fc fa59 	bl	10041528 <BOARD_Init>
    TIMERS_Init(); // init timer module for delay functions
10045076:	f000 fb4b 	bl	10045710 <TIMERS_Init>
    I2C_Init();   // init I2C module
1004507a:	f7ff f97f 	bl	1004437c <I2C_Init>
}
1004507e:	46c0      	nop			@ (mov r8, r8)
10045080:	46bd      	mov	sp, r7
10045082:	bd80      	pop	{r7, pc}

10045084 <OledDriverInitDisplay>:

/**
 * Initialize the OLED display and send init/config sequence
 */
void OledDriverInitDisplay(void)
{
10045084:	b580      	push	{r7, lr}
10045086:	af00      	add	r7, sp, #0
    // Turn off the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
10045088:	22ae      	movs	r2, #174	@ 0xae
1004508a:	2180      	movs	r1, #128	@ 0x80
1004508c:	203c      	movs	r0, #60	@ 0x3c
1004508e:	f7ff fbc9 	bl	10044824 <I2C_WriteReg>
    DelayMs(10);
10045092:	200a      	movs	r0, #10
10045094:	f000 f8a0 	bl	100451d8 <DelayMs>
//
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_OSC_FREQ);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_OSC_FREQ);
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_MULTIPLEX_RATIO);
10045098:	22a8      	movs	r2, #168	@ 0xa8
1004509a:	2180      	movs	r1, #128	@ 0x80
1004509c:	203c      	movs	r0, #60	@ 0x3c
1004509e:	f7ff fbc1 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x3F);
100450a2:	223f      	movs	r2, #63	@ 0x3f
100450a4:	2180      	movs	r1, #128	@ 0x80
100450a6:	203c      	movs	r0, #60	@ 0x3c
100450a8:	f7ff fbbc 	bl	10044824 <I2C_WriteReg>
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xD3);//Display OFFSET
100450ac:	22d3      	movs	r2, #211	@ 0xd3
100450ae:	2180      	movs	r1, #128	@ 0x80
100450b0:	203c      	movs	r0, #60	@ 0x3c
100450b2:	f7ff fbb7 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x08);
100450b6:	2208      	movs	r2, #8
100450b8:	2180      	movs	r1, #128	@ 0x80
100450ba:	203c      	movs	r0, #60	@ 0x3c
100450bc:	f7ff fbb2 	bl	10044824 <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);//Set display start line
100450c0:	2240      	movs	r2, #64	@ 0x40
100450c2:	2180      	movs	r1, #128	@ 0x80
100450c4:	203c      	movs	r0, #60	@ 0x3c
100450c6:	f7ff fbad 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA1);//Set segment re-map
100450ca:	22a1      	movs	r2, #161	@ 0xa1
100450cc:	2180      	movs	r1, #128	@ 0x80
100450ce:	203c      	movs	r0, #60	@ 0x3c
100450d0:	f7ff fba8 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xC0);//Set COM output Scan direction
100450d4:	22c0      	movs	r2, #192	@ 0xc0
100450d6:	2180      	movs	r1, #128	@ 0x80
100450d8:	203c      	movs	r0, #60	@ 0x3c
100450da:	f7ff fba3 	bl	10044824 <I2C_WriteReg>

    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDA);//Set COM hardware config
100450de:	22da      	movs	r2, #218	@ 0xda
100450e0:	2180      	movs	r1, #128	@ 0x80
100450e2:	203c      	movs	r0, #60	@ 0x3c
100450e4:	f7ff fb9e 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x12);
100450e8:	2212      	movs	r2, #18
100450ea:	2180      	movs	r1, #128	@ 0x80
100450ec:	203c      	movs	r0, #60	@ 0x3c
100450ee:	f7ff fb99 	bl	10044824 <I2C_WriteReg>
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xDB);//Set VCOMH deselect level
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0x40);
//
//
//
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA4);//Set entire display on/off
100450f2:	22a4      	movs	r2, #164	@ 0xa4
100450f4:	2180      	movs	r1, #128	@ 0x80
100450f6:	203c      	movs	r0, #60	@ 0x3c
100450f8:	f7ff fb94 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xA6);//Set normal/inverted display
100450fc:	22a6      	movs	r2, #166	@ 0xa6
100450fe:	2180      	movs	r1, #128	@ 0x80
10045100:	203c      	movs	r0, #60	@ 0x3c
10045102:	f7ff fb8f 	bl	10044824 <I2C_WriteReg>


    // Enable the charge pump and
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_CHARGE_PUMP);
10045106:	228d      	movs	r2, #141	@ 0x8d
10045108:	2180      	movs	r1, #128	@ 0x80
1004510a:	203c      	movs	r0, #60	@ 0x3c
1004510c:	f7ff fb8a 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_ENABLE_CHARGE_PUMP);
10045110:	2214      	movs	r2, #20
10045112:	2180      	movs	r1, #128	@ 0x80
10045114:	203c      	movs	r0, #60	@ 0x3c
10045116:	f7ff fb85 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_PRECHARGE_PERIOD);
1004511a:	22d9      	movs	r2, #217	@ 0xd9
1004511c:	2180      	movs	r1, #128	@ 0x80
1004511e:	203c      	movs	r0, #60	@ 0x3c
10045120:	f7ff fb80 	bl	10044824 <I2C_WriteReg>
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_MAXIMUM_PRECHARGE);
10045124:	22f1      	movs	r2, #241	@ 0xf1
10045126:	2180      	movs	r1, #128	@ 0x80
10045128:	203c      	movs	r0, #60	@ 0x3c
1004512a:	f7ff fb7b 	bl	10044824 <I2C_WriteReg>
//    // Set sequential COM configuration with non-interleaved memory.
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_COM_PINS_CONFIG);
//    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_SETTING_SEQUENTIAL_COM_NON_INTERLEAVED);

    // And turn on the display.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_ON);
1004512e:	22af      	movs	r2, #175	@ 0xaf
10045130:	2180      	movs	r1, #128	@ 0x80
10045132:	203c      	movs	r0, #60	@ 0x3c
10045134:	f7ff fb76 	bl	10044824 <I2C_WriteReg>
}
10045138:	46c0      	nop			@ (mov r8, r8)
1004513a:	46bd      	mov	sp, r7
1004513c:	bd80      	pop	{r7, pc}

1004513e <OledDriverDisableDisplay>:

/**
 * Disable the Oled display before power-off.
 */
void OledDriverDisableDisplay(void)
{
1004513e:	b580      	push	{r7, lr}
10045140:	af00      	add	r7, sp, #0
    // Send the display off command.
    I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_DISPLAY_OFF);
10045142:	22ae      	movs	r2, #174	@ 0xae
10045144:	2180      	movs	r1, #128	@ 0x80
10045146:	203c      	movs	r0, #60	@ 0x3c
10045148:	f7ff fb6c 	bl	10044824 <I2C_WriteReg>
}
1004514c:	46c0      	nop			@ (mov r8, r8)
1004514e:	46bd      	mov	sp, r7
10045150:	bd80      	pop	{r7, pc}
	...

10045154 <OledDriverUpdateDisplay>:

/**
 * Update the display with the contents of rgb0ledBmp.
 */
void OledDriverUpdateDisplay(void)
{
10045154:	b580      	push	{r7, lr}
10045156:	b084      	sub	sp, #16
10045158:	af00      	add	r7, sp, #0
    uint8_t *pb = &(rgbOledBmp[OLED_DRIVER_BUFFER_SIZE-1]);
1004515a:	4b1e      	ldr	r3, [pc, #120]	@ (100451d4 <OledDriverUpdateDisplay+0x80>)
1004515c:	60fb      	str	r3, [r7, #12]
    int page;
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
1004515e:	2300      	movs	r3, #0
10045160:	60bb      	str	r3, [r7, #8]
10045162:	e02f      	b.n	100451c4 <OledDriverUpdateDisplay+0x70>

        // Set the desired page.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, 0xB0 | (OLED_DRIVER_PAGES- page));//select page start address
10045164:	68bb      	ldr	r3, [r7, #8]
10045166:	b2db      	uxtb	r3, r3
10045168:	2208      	movs	r2, #8
1004516a:	1ad3      	subs	r3, r2, r3
1004516c:	b2db      	uxtb	r3, r3
1004516e:	b25b      	sxtb	r3, r3
10045170:	2250      	movs	r2, #80	@ 0x50
10045172:	4252      	negs	r2, r2
10045174:	4313      	orrs	r3, r2
10045176:	b25b      	sxtb	r3, r3
10045178:	b2db      	uxtb	r3, r3
1004517a:	001a      	movs	r2, r3
1004517c:	2180      	movs	r1, #128	@ 0x80
1004517e:	203c      	movs	r0, #60	@ 0x3c
10045180:	f7ff fb50 	bl	10044824 <I2C_WriteReg>
//        I2C_WriteReg(OLED_ADDRESS, COMMAND, page);

        // Set the starting column back to the origin.
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_LOWER_COLUMN_0);
10045184:	2200      	movs	r2, #0
10045186:	2180      	movs	r1, #128	@ 0x80
10045188:	203c      	movs	r0, #60	@ 0x3c
1004518a:	f7ff fb4b 	bl	10044824 <I2C_WriteReg>
        I2C_WriteReg(OLED_ADDRESS, COMMAND, OLED_COMMAND_SET_DISPLAY_UPPER_COLUMN_0);
1004518e:	2210      	movs	r2, #16
10045190:	2180      	movs	r1, #128	@ 0x80
10045192:	203c      	movs	r0, #60	@ 0x3c
10045194:	f7ff fb46 	bl	10044824 <I2C_WriteReg>

        // Write this entire column to the OLED.
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
10045198:	2300      	movs	r3, #0
1004519a:	607b      	str	r3, [r7, #4]
1004519c:	e00c      	b.n	100451b8 <OledDriverUpdateDisplay+0x64>
            I2C_WriteReg(OLED_ADDRESS, DATA, *pb);
1004519e:	68fb      	ldr	r3, [r7, #12]
100451a0:	781b      	ldrb	r3, [r3, #0]
100451a2:	001a      	movs	r2, r3
100451a4:	21c0      	movs	r1, #192	@ 0xc0
100451a6:	203c      	movs	r0, #60	@ 0x3c
100451a8:	f7ff fb3c 	bl	10044824 <I2C_WriteReg>
            pb--;
100451ac:	68fb      	ldr	r3, [r7, #12]
100451ae:	3b01      	subs	r3, #1
100451b0:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < OLED_DRIVER_PIXEL_COLUMNS; i++) {
100451b2:	687b      	ldr	r3, [r7, #4]
100451b4:	3301      	adds	r3, #1
100451b6:	607b      	str	r3, [r7, #4]
100451b8:	687b      	ldr	r3, [r7, #4]
100451ba:	2b7f      	cmp	r3, #127	@ 0x7f
100451bc:	ddef      	ble.n	1004519e <OledDriverUpdateDisplay+0x4a>
    for (page = 0; page < OLED_DRIVER_PAGES; page++) {
100451be:	68bb      	ldr	r3, [r7, #8]
100451c0:	3301      	adds	r3, #1
100451c2:	60bb      	str	r3, [r7, #8]
100451c4:	68bb      	ldr	r3, [r7, #8]
100451c6:	2b07      	cmp	r3, #7
100451c8:	ddcc      	ble.n	10045164 <OledDriverUpdateDisplay+0x10>
        }
    }
}
100451ca:	46c0      	nop			@ (mov r8, r8)
100451cc:	46c0      	nop			@ (mov r8, r8)
100451ce:	46bd      	mov	sp, r7
100451d0:	b004      	add	sp, #16
100451d2:	bd80      	pop	{r7, pc}
100451d4:	20002127 	.word	0x20002127

100451d8 <DelayMs>:

/**
 * Block the processor for the desired number of milliseconds.
 * @param ms The number of milliseconds to block for.
 */
void DelayMs(uint32_t ms) {
100451d8:	b580      	push	{r7, lr}
100451da:	b084      	sub	sp, #16
100451dc:	af00      	add	r7, sp, #0
100451de:	6078      	str	r0, [r7, #4]
    uint32_t curr_ms = TIMERS_GetMilliSeconds();
100451e0:	f000 fae2 	bl	100457a8 <TIMERS_GetMilliSeconds>
100451e4:	0003      	movs	r3, r0
100451e6:	60fb      	str	r3, [r7, #12]
    while ((TIMERS_GetMilliSeconds() - curr_ms) < ms);
100451e8:	46c0      	nop			@ (mov r8, r8)
100451ea:	f000 fadd 	bl	100457a8 <TIMERS_GetMilliSeconds>
100451ee:	0002      	movs	r2, r0
100451f0:	68fb      	ldr	r3, [r7, #12]
100451f2:	1ad3      	subs	r3, r2, r3
100451f4:	687a      	ldr	r2, [r7, #4]
100451f6:	429a      	cmp	r2, r3
100451f8:	d8f7      	bhi.n	100451ea <DelayMs+0x12>
}
100451fa:	46c0      	nop			@ (mov r8, r8)
100451fc:	46c0      	nop			@ (mov r8, r8)
100451fe:	46bd      	mov	sp, r7
10045200:	b004      	add	sp, #16
10045202:	bd80      	pop	{r7, pc}

10045204 <CompareTime>:
static uint8_t minute;

static uint8_t logging;//logging
static uint8_t playdata;
//----------------------------------------Private Functions--------------------------------------
void CompareTime(){
10045204:	b5f0      	push	{r4, r5, r6, r7, lr}
10045206:	b08d      	sub	sp, #52	@ 0x34
10045208:	af00      	add	r7, sp, #0
	if(month == NULLDATE || day == NULLDATE || hour == NULLDATE || minute == NULLDATE){
1004520a:	4b86      	ldr	r3, [pc, #536]	@ (10045424 <CompareTime+0x220>)
1004520c:	781b      	ldrb	r3, [r3, #0]
1004520e:	2bff      	cmp	r3, #255	@ 0xff
10045210:	d100      	bne.n	10045214 <CompareTime+0x10>
10045212:	e103      	b.n	1004541c <CompareTime+0x218>
10045214:	4b84      	ldr	r3, [pc, #528]	@ (10045428 <CompareTime+0x224>)
10045216:	781b      	ldrb	r3, [r3, #0]
10045218:	2bff      	cmp	r3, #255	@ 0xff
1004521a:	d100      	bne.n	1004521e <CompareTime+0x1a>
1004521c:	e0fe      	b.n	1004541c <CompareTime+0x218>
1004521e:	4b83      	ldr	r3, [pc, #524]	@ (1004542c <CompareTime+0x228>)
10045220:	781b      	ldrb	r3, [r3, #0]
10045222:	2bff      	cmp	r3, #255	@ 0xff
10045224:	d100      	bne.n	10045228 <CompareTime+0x24>
10045226:	e0f9      	b.n	1004541c <CompareTime+0x218>
10045228:	4b81      	ldr	r3, [pc, #516]	@ (10045430 <CompareTime+0x22c>)
1004522a:	781b      	ldrb	r3, [r3, #0]
1004522c:	2bff      	cmp	r3, #255	@ 0xff
1004522e:	d100      	bne.n	10045232 <CompareTime+0x2e>
10045230:	e0f4      	b.n	1004541c <CompareTime+0x218>
		return;
	}
	discountprintf("Date received");
10045232:	4b80      	ldr	r3, [pc, #512]	@ (10045434 <CompareTime+0x230>)
10045234:	0018      	movs	r0, r3
10045236:	f7fe fad7 	bl	100437e8 <discountprintf>
	if(logging){
1004523a:	4b7f      	ldr	r3, [pc, #508]	@ (10045438 <CompareTime+0x234>)
1004523c:	781b      	ldrb	r3, [r3, #0]
1004523e:	2b00      	cmp	r3, #0
10045240:	d067      	beq.n	10045312 <CompareTime+0x10e>
		scheduleEvent event;

		event.month = month;
10045242:	4b78      	ldr	r3, [pc, #480]	@ (10045424 <CompareTime+0x220>)
10045244:	781a      	ldrb	r2, [r3, #0]
10045246:	2524      	movs	r5, #36	@ 0x24
10045248:	197b      	adds	r3, r7, r5
1004524a:	701a      	strb	r2, [r3, #0]
		event.day = day;
1004524c:	4b76      	ldr	r3, [pc, #472]	@ (10045428 <CompareTime+0x224>)
1004524e:	781a      	ldrb	r2, [r3, #0]
10045250:	197b      	adds	r3, r7, r5
10045252:	705a      	strb	r2, [r3, #1]
		if(playdata){
10045254:	4b79      	ldr	r3, [pc, #484]	@ (1004543c <CompareTime+0x238>)
10045256:	781b      	ldrb	r3, [r3, #0]
10045258:	2b00      	cmp	r3, #0
1004525a:	d01d      	beq.n	10045298 <CompareTime+0x94>
			event.start = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
1004525c:	4b73      	ldr	r3, [pc, #460]	@ (1004542c <CompareTime+0x228>)
1004525e:	781b      	ldrb	r3, [r3, #0]
10045260:	b25b      	sxtb	r3, r3
10045262:	00db      	lsls	r3, r3, #3
10045264:	b25c      	sxtb	r4, r3
10045266:	4b72      	ldr	r3, [pc, #456]	@ (10045430 <CompareTime+0x22c>)
10045268:	781b      	ldrb	r3, [r3, #0]
1004526a:	210f      	movs	r1, #15
1004526c:	0018      	movs	r0, r3
1004526e:	f7fa ffe7 	bl	10040240 <__udivsi3>
10045272:	0003      	movs	r3, r0
10045274:	b2db      	uxtb	r3, r3
10045276:	b25b      	sxtb	r3, r3
10045278:	4023      	ands	r3, r4
1004527a:	b25b      	sxtb	r3, r3
1004527c:	b2da      	uxtb	r2, r3
1004527e:	197b      	adds	r3, r7, r5
10045280:	709a      	strb	r2, [r3, #2]
			event.stop = 0;
10045282:	197b      	adds	r3, r7, r5
10045284:	2200      	movs	r2, #0
10045286:	70da      	strb	r2, [r3, #3]
			event.folder = (playdata>>8)&0xFF;
10045288:	197b      	adds	r3, r7, r5
1004528a:	2200      	movs	r2, #0
1004528c:	711a      	strb	r2, [r3, #4]
			event.track = playdata&0xFF;
1004528e:	4b6b      	ldr	r3, [pc, #428]	@ (1004543c <CompareTime+0x238>)
10045290:	781a      	ldrb	r2, [r3, #0]
10045292:	197b      	adds	r3, r7, r5
10045294:	715a      	strb	r2, [r3, #5]
10045296:	e029      	b.n	100452ec <CompareTime+0xe8>
		} else {
			scheduleEvent prevevent = FLASH_ReadLogs(FLASH_GetLogsSize()-1);
10045298:	f7fe fcc0 	bl	10043c1c <FLASH_GetLogsSize>
1004529c:	0003      	movs	r3, r0
1004529e:	3b01      	subs	r3, #1
100452a0:	b29a      	uxth	r2, r3
100452a2:	261c      	movs	r6, #28
100452a4:	19bb      	adds	r3, r7, r6
100452a6:	0011      	movs	r1, r2
100452a8:	0018      	movs	r0, r3
100452aa:	f7fe fcc9 	bl	10043c40 <FLASH_ReadLogs>
			event.start = 0;
100452ae:	2524      	movs	r5, #36	@ 0x24
100452b0:	197b      	adds	r3, r7, r5
100452b2:	2200      	movs	r2, #0
100452b4:	709a      	strb	r2, [r3, #2]
			event.stop = ((hour & 0b11111) << 3) & ((uint8_t)(minute/15));
100452b6:	4b5d      	ldr	r3, [pc, #372]	@ (1004542c <CompareTime+0x228>)
100452b8:	781b      	ldrb	r3, [r3, #0]
100452ba:	b25b      	sxtb	r3, r3
100452bc:	00db      	lsls	r3, r3, #3
100452be:	b25c      	sxtb	r4, r3
100452c0:	4b5b      	ldr	r3, [pc, #364]	@ (10045430 <CompareTime+0x22c>)
100452c2:	781b      	ldrb	r3, [r3, #0]
100452c4:	210f      	movs	r1, #15
100452c6:	0018      	movs	r0, r3
100452c8:	f7fa ffba 	bl	10040240 <__udivsi3>
100452cc:	0003      	movs	r3, r0
100452ce:	b2db      	uxtb	r3, r3
100452d0:	b25b      	sxtb	r3, r3
100452d2:	4023      	ands	r3, r4
100452d4:	b25b      	sxtb	r3, r3
100452d6:	b2da      	uxtb	r2, r3
100452d8:	197b      	adds	r3, r7, r5
100452da:	70da      	strb	r2, [r3, #3]
			event.folder = prevevent.folder;
100452dc:	19bb      	adds	r3, r7, r6
100452de:	791a      	ldrb	r2, [r3, #4]
100452e0:	197b      	adds	r3, r7, r5
100452e2:	711a      	strb	r2, [r3, #4]
			event.track = prevevent.track;
100452e4:	19bb      	adds	r3, r7, r6
100452e6:	795a      	ldrb	r2, [r3, #5]
100452e8:	197b      	adds	r3, r7, r5
100452ea:	715a      	strb	r2, [r3, #5]
		}
		FLASH_AppendLogs(event);
100452ec:	2324      	movs	r3, #36	@ 0x24
100452ee:	18fb      	adds	r3, r7, r3
100452f0:	6818      	ldr	r0, [r3, #0]
100452f2:	6859      	ldr	r1, [r3, #4]
100452f4:	f7fe fc3c 	bl	10043b70 <FLASH_AppendLogs>
		month = NULLDATE;
100452f8:	4b4a      	ldr	r3, [pc, #296]	@ (10045424 <CompareTime+0x220>)
100452fa:	22ff      	movs	r2, #255	@ 0xff
100452fc:	701a      	strb	r2, [r3, #0]
		day = NULLDATE;
100452fe:	4b4a      	ldr	r3, [pc, #296]	@ (10045428 <CompareTime+0x224>)
10045300:	22ff      	movs	r2, #255	@ 0xff
10045302:	701a      	strb	r2, [r3, #0]
		hour = NULLDATE;
10045304:	4b49      	ldr	r3, [pc, #292]	@ (1004542c <CompareTime+0x228>)
10045306:	22ff      	movs	r2, #255	@ 0xff
10045308:	701a      	strb	r2, [r3, #0]
		minute = NULLDATE;
1004530a:	4b49      	ldr	r3, [pc, #292]	@ (10045430 <CompareTime+0x22c>)
1004530c:	22ff      	movs	r2, #255	@ 0xff
1004530e:	701a      	strb	r2, [r3, #0]
10045310:	e085      	b.n	1004541e <CompareTime+0x21a>
	} else {
		scheduleEvent event;
		for(int i = 0; i < FLASH_GetScheduleSize(); i++){
10045312:	2300      	movs	r3, #0
10045314:	62fb      	str	r3, [r7, #44]	@ 0x2c
10045316:	e078      	b.n	1004540a <CompareTime+0x206>
			event = FLASH_ReadSchedule(i);
10045318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004531a:	b29a      	uxth	r2, r3
1004531c:	2414      	movs	r4, #20
1004531e:	193b      	adds	r3, r7, r4
10045320:	0011      	movs	r1, r2
10045322:	0018      	movs	r0, r3
10045324:	f7fe fd72 	bl	10043e0c <FLASH_ReadSchedule>
			if(event.month == month && event.day == day){
10045328:	0021      	movs	r1, r4
1004532a:	187b      	adds	r3, r7, r1
1004532c:	781a      	ldrb	r2, [r3, #0]
1004532e:	4b3d      	ldr	r3, [pc, #244]	@ (10045424 <CompareTime+0x220>)
10045330:	781b      	ldrb	r3, [r3, #0]
10045332:	429a      	cmp	r2, r3
10045334:	d166      	bne.n	10045404 <CompareTime+0x200>
10045336:	187b      	adds	r3, r7, r1
10045338:	785a      	ldrb	r2, [r3, #1]
1004533a:	4b3b      	ldr	r3, [pc, #236]	@ (10045428 <CompareTime+0x224>)
1004533c:	781b      	ldrb	r3, [r3, #0]
1004533e:	429a      	cmp	r2, r3
10045340:	d160      	bne.n	10045404 <CompareTime+0x200>
				if((event.start&0b11111000)>>3 == hour && (event.start & 0b011)*15 == minute){
10045342:	187b      	adds	r3, r7, r1
10045344:	789b      	ldrb	r3, [r3, #2]
10045346:	08db      	lsrs	r3, r3, #3
10045348:	b2da      	uxtb	r2, r3
1004534a:	4b38      	ldr	r3, [pc, #224]	@ (1004542c <CompareTime+0x228>)
1004534c:	781b      	ldrb	r3, [r3, #0]
1004534e:	429a      	cmp	r2, r3
10045350:	d129      	bne.n	100453a6 <CompareTime+0x1a2>
10045352:	187b      	adds	r3, r7, r1
10045354:	789b      	ldrb	r3, [r3, #2]
10045356:	001a      	movs	r2, r3
10045358:	2303      	movs	r3, #3
1004535a:	401a      	ands	r2, r3
1004535c:	0013      	movs	r3, r2
1004535e:	011b      	lsls	r3, r3, #4
10045360:	1a9b      	subs	r3, r3, r2
10045362:	4a33      	ldr	r2, [pc, #204]	@ (10045430 <CompareTime+0x22c>)
10045364:	7812      	ldrb	r2, [r2, #0]
10045366:	4293      	cmp	r3, r2
10045368:	d11d      	bne.n	100453a6 <CompareTime+0x1a2>
					Event_t play = (Event_t){EVENT_PLAY, (event.folder<<8) + event.track};
1004536a:	2010      	movs	r0, #16
1004536c:	183b      	adds	r3, r7, r0
1004536e:	220b      	movs	r2, #11
10045370:	701a      	strb	r2, [r3, #0]
10045372:	187b      	adds	r3, r7, r1
10045374:	791b      	ldrb	r3, [r3, #4]
10045376:	021b      	lsls	r3, r3, #8
10045378:	b29b      	uxth	r3, r3
1004537a:	187a      	adds	r2, r7, r1
1004537c:	7952      	ldrb	r2, [r2, #5]
1004537e:	189b      	adds	r3, r3, r2
10045380:	b29a      	uxth	r2, r3
10045382:	183b      	adds	r3, r7, r0
10045384:	805a      	strh	r2, [r3, #2]
					MP3_Event_Post(play);
10045386:	183b      	adds	r3, r7, r0
10045388:	6818      	ldr	r0, [r3, #0]
1004538a:	f7ff fb1f 	bl	100449cc <MP3_Event_Post>
					month = NULLDATE;
1004538e:	4b25      	ldr	r3, [pc, #148]	@ (10045424 <CompareTime+0x220>)
10045390:	22ff      	movs	r2, #255	@ 0xff
10045392:	701a      	strb	r2, [r3, #0]
					day = NULLDATE;
10045394:	4b24      	ldr	r3, [pc, #144]	@ (10045428 <CompareTime+0x224>)
10045396:	22ff      	movs	r2, #255	@ 0xff
10045398:	701a      	strb	r2, [r3, #0]
					hour = NULLDATE;
1004539a:	4b24      	ldr	r3, [pc, #144]	@ (1004542c <CompareTime+0x228>)
1004539c:	22ff      	movs	r2, #255	@ 0xff
1004539e:	701a      	strb	r2, [r3, #0]
					minute = NULLDATE;
100453a0:	4b23      	ldr	r3, [pc, #140]	@ (10045430 <CompareTime+0x22c>)
100453a2:	22ff      	movs	r2, #255	@ 0xff
100453a4:	701a      	strb	r2, [r3, #0]
				}
				if((event.stop&0b11111000)>>3 == hour && (event.stop & 0b011)*15 == minute){
100453a6:	2114      	movs	r1, #20
100453a8:	187b      	adds	r3, r7, r1
100453aa:	78db      	ldrb	r3, [r3, #3]
100453ac:	08db      	lsrs	r3, r3, #3
100453ae:	b2da      	uxtb	r2, r3
100453b0:	4b1e      	ldr	r3, [pc, #120]	@ (1004542c <CompareTime+0x228>)
100453b2:	781b      	ldrb	r3, [r3, #0]
100453b4:	429a      	cmp	r2, r3
100453b6:	d125      	bne.n	10045404 <CompareTime+0x200>
100453b8:	187b      	adds	r3, r7, r1
100453ba:	78db      	ldrb	r3, [r3, #3]
100453bc:	001a      	movs	r2, r3
100453be:	2303      	movs	r3, #3
100453c0:	401a      	ands	r2, r3
100453c2:	0013      	movs	r3, r2
100453c4:	011b      	lsls	r3, r3, #4
100453c6:	1a9b      	subs	r3, r3, r2
100453c8:	4a19      	ldr	r2, [pc, #100]	@ (10045430 <CompareTime+0x22c>)
100453ca:	7812      	ldrb	r2, [r2, #0]
100453cc:	4293      	cmp	r3, r2
100453ce:	d119      	bne.n	10045404 <CompareTime+0x200>
					Event_t play = (Event_t){EVENT_PLAY, 0};
100453d0:	2008      	movs	r0, #8
100453d2:	183b      	adds	r3, r7, r0
100453d4:	220b      	movs	r2, #11
100453d6:	701a      	strb	r2, [r3, #0]
100453d8:	183b      	adds	r3, r7, r0
100453da:	2200      	movs	r2, #0
100453dc:	805a      	strh	r2, [r3, #2]
					event.start = 0;
100453de:	187b      	adds	r3, r7, r1
100453e0:	2200      	movs	r2, #0
100453e2:	709a      	strb	r2, [r3, #2]
					MP3_Event_Post(play);
100453e4:	183b      	adds	r3, r7, r0
100453e6:	6818      	ldr	r0, [r3, #0]
100453e8:	f7ff faf0 	bl	100449cc <MP3_Event_Post>
					month = NULLDATE;
100453ec:	4b0d      	ldr	r3, [pc, #52]	@ (10045424 <CompareTime+0x220>)
100453ee:	22ff      	movs	r2, #255	@ 0xff
100453f0:	701a      	strb	r2, [r3, #0]
					day = NULLDATE;
100453f2:	4b0d      	ldr	r3, [pc, #52]	@ (10045428 <CompareTime+0x224>)
100453f4:	22ff      	movs	r2, #255	@ 0xff
100453f6:	701a      	strb	r2, [r3, #0]
					hour = NULLDATE;
100453f8:	4b0c      	ldr	r3, [pc, #48]	@ (1004542c <CompareTime+0x228>)
100453fa:	22ff      	movs	r2, #255	@ 0xff
100453fc:	701a      	strb	r2, [r3, #0]
					minute = NULLDATE;
100453fe:	4b0c      	ldr	r3, [pc, #48]	@ (10045430 <CompareTime+0x22c>)
10045400:	22ff      	movs	r2, #255	@ 0xff
10045402:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < FLASH_GetScheduleSize(); i++){
10045404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10045406:	3301      	adds	r3, #1
10045408:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004540a:	f7fe fced 	bl	10043de8 <FLASH_GetScheduleSize>
1004540e:	0003      	movs	r3, r0
10045410:	001a      	movs	r2, r3
10045412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10045414:	4293      	cmp	r3, r2
10045416:	da00      	bge.n	1004541a <CompareTime+0x216>
10045418:	e77e      	b.n	10045318 <CompareTime+0x114>
1004541a:	e000      	b.n	1004541e <CompareTime+0x21a>
		return;
1004541c:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}
}
1004541e:	46bd      	mov	sp, r7
10045420:	b00d      	add	sp, #52	@ 0x34
10045422:	bdf0      	pop	{r4, r5, r6, r7, pc}
10045424:	20002130 	.word	0x20002130
10045428:	20002131 	.word	0x20002131
1004542c:	20002132 	.word	0x20002132
10045430:	20002133 	.word	0x20002133
10045434:	10068ca4 	.word	0x10068ca4
10045438:	20002134 	.word	0x20002134
1004543c:	20002135 	.word	0x20002135

10045440 <Scheduler_Event_Init>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the initialization function for the events and serviced routine
 * @param: none
 * @return: An 8 bit integer flag reflecting The initialization status
 */
uint8_t Scheduler_Event_Init(FIFO Queue){
10045440:	b580      	push	{r7, lr}
10045442:	b082      	sub	sp, #8
10045444:	af00      	add	r7, sp, #0
10045446:	6078      	str	r0, [r7, #4]
    Schedulerqueue = Queue;
10045448:	4b08      	ldr	r3, [pc, #32]	@ (1004546c <Scheduler_Event_Init+0x2c>)
1004544a:	687a      	ldr	r2, [r7, #4]
1004544c:	601a      	str	r2, [r3, #0]
    I2C_Init();
1004544e:	f7fe ff95 	bl	1004437c <I2C_Init>
    TIMERS_Init();
10045452:	f000 f95d 	bl	10045710 <TIMERS_Init>
    starttime = TIMERS_GetMilliSeconds();
10045456:	f000 f9a7 	bl	100457a8 <TIMERS_GetMilliSeconds>
1004545a:	0002      	movs	r2, r0
1004545c:	4b04      	ldr	r3, [pc, #16]	@ (10045470 <Scheduler_Event_Init+0x30>)
1004545e:	601a      	str	r2, [r3, #0]
    return INIT_OK;
10045460:	2301      	movs	r3, #1
}
10045462:	0018      	movs	r0, r3
10045464:	46bd      	mov	sp, r7
10045466:	b002      	add	sp, #8
10045468:	bd80      	pop	{r7, pc}
1004546a:	46c0      	nop			@ (mov r8, r8)
1004546c:	20002128 	.word	0x20002128
10045470:	2000212c 	.word	0x2000212c

10045474 <Scheduler_Event_Post>:
 * @Function: Scheduler_Event_Init
 * @Brief: Provides the ability for state machines to interact
 * @param: event to be posted
 * @return: none
 */
void Scheduler_Event_Post(Event_t event){
10045474:	b580      	push	{r7, lr}
10045476:	b082      	sub	sp, #8
10045478:	af00      	add	r7, sp, #0
1004547a:	1d3b      	adds	r3, r7, #4
1004547c:	6018      	str	r0, [r3, #0]
    FIFO_Enqueue(Schedulerqueue, event);
1004547e:	4b05      	ldr	r3, [pc, #20]	@ (10045494 <Scheduler_Event_Post+0x20>)
10045480:	681a      	ldr	r2, [r3, #0]
10045482:	1d3b      	adds	r3, r7, #4
10045484:	6819      	ldr	r1, [r3, #0]
10045486:	0010      	movs	r0, r2
10045488:	f7fe f9ef 	bl	1004386a <FIFO_Enqueue>
}
1004548c:	46c0      	nop			@ (mov r8, r8)
1004548e:	46bd      	mov	sp, r7
10045490:	b002      	add	sp, #8
10045492:	bd80      	pop	{r7, pc}
10045494:	20002128 	.word	0x20002128

10045498 <Scheduler_Event_Updater>:
 * @Function: Scheduler_Event_Updater
 * @Brief: Provides the event checker that checks and posts the changes in the
 * @param: none
 * @return: An event
 */
Event_t Scheduler_Event_Updater(void){
10045498:	b580      	push	{r7, lr}
1004549a:	b084      	sub	sp, #16
1004549c:	af00      	add	r7, sp, #0
    Event_t event = (Event_t){EVENT_NONE, 0};
1004549e:	1d3b      	adds	r3, r7, #4
100454a0:	2200      	movs	r2, #0
100454a2:	701a      	strb	r2, [r3, #0]
100454a4:	1d3b      	adds	r3, r7, #4
100454a6:	2200      	movs	r2, #0
100454a8:	805a      	strh	r2, [r3, #2]
    uint32_t timer = TIMERS_GetMilliSeconds();
100454aa:	f000 f97d 	bl	100457a8 <TIMERS_GetMilliSeconds>
100454ae:	0003      	movs	r3, r0
100454b0:	60fb      	str	r3, [r7, #12]
	if((timer-starttime) >= REFRESHRATE){
100454b2:	4b15      	ldr	r3, [pc, #84]	@ (10045508 <Scheduler_Event_Updater+0x70>)
100454b4:	681b      	ldr	r3, [r3, #0]
100454b6:	68fa      	ldr	r2, [r7, #12]
100454b8:	1ad3      	subs	r3, r2, r3
100454ba:	4a14      	ldr	r2, [pc, #80]	@ (1004550c <Scheduler_Event_Updater+0x74>)
100454bc:	4293      	cmp	r3, r2
100454be:	d90c      	bls.n	100454da <Scheduler_Event_Updater+0x42>
		event.status = EVENT_TIMEOUT;
100454c0:	1d3b      	adds	r3, r7, #4
100454c2:	2209      	movs	r2, #9
100454c4:	701a      	strb	r2, [r3, #0]
		event.data = 0;
100454c6:	1d3b      	adds	r3, r7, #4
100454c8:	2200      	movs	r2, #0
100454ca:	805a      	strh	r2, [r3, #2]
		starttime = timer;
100454cc:	4b0e      	ldr	r3, [pc, #56]	@ (10045508 <Scheduler_Event_Updater+0x70>)
100454ce:	68fa      	ldr	r2, [r7, #12]
100454d0:	601a      	str	r2, [r3, #0]
		Scheduler_Event_Post(event);
100454d2:	1d3b      	adds	r3, r7, #4
100454d4:	6818      	ldr	r0, [r3, #0]
100454d6:	f7ff ffcd 	bl	10045474 <Scheduler_Event_Post>
	}
    return event;
100454da:	2108      	movs	r1, #8
100454dc:	187b      	adds	r3, r7, r1
100454de:	1d3a      	adds	r2, r7, #4
100454e0:	6812      	ldr	r2, [r2, #0]
100454e2:	601a      	str	r2, [r3, #0]
100454e4:	187a      	adds	r2, r7, r1
100454e6:	2300      	movs	r3, #0
100454e8:	8811      	ldrh	r1, [r2, #0]
100454ea:	0409      	lsls	r1, r1, #16
100454ec:	0c09      	lsrs	r1, r1, #16
100454ee:	0c1b      	lsrs	r3, r3, #16
100454f0:	041b      	lsls	r3, r3, #16
100454f2:	430b      	orrs	r3, r1
100454f4:	8852      	ldrh	r2, [r2, #2]
100454f6:	0412      	lsls	r2, r2, #16
100454f8:	041b      	lsls	r3, r3, #16
100454fa:	0c1b      	lsrs	r3, r3, #16
100454fc:	4313      	orrs	r3, r2
}
100454fe:	0018      	movs	r0, r3
10045500:	46bd      	mov	sp, r7
10045502:	b004      	add	sp, #16
10045504:	bd80      	pop	{r7, pc}
10045506:	46c0      	nop			@ (mov r8, r8)
10045508:	2000212c 	.word	0x2000212c
1004550c:	0000ea5f 	.word	0x0000ea5f

10045510 <Scheduler_Event_Handler>:
 * @Function: Scheduler_Event_Handler
 * @Brief:
 * @param: Event_t event, incoming event for the handler to handle
 * @return: An 8 byte integer success flag, returns 0 if the program should crash
 */
uint8_t Scheduler_Event_Handler(Event_t event){
10045510:	b580      	push	{r7, lr}
10045512:	b082      	sub	sp, #8
10045514:	af00      	add	r7, sp, #0
10045516:	1d3b      	adds	r3, r7, #4
10045518:	6018      	str	r0, [r3, #0]
	if(event.status == EVENT_PLAY){
1004551a:	1d3b      	adds	r3, r7, #4
1004551c:	781b      	ldrb	r3, [r3, #0]
1004551e:	b25b      	sxtb	r3, r3
10045520:	2b0b      	cmp	r3, #11
10045522:	d11f      	bne.n	10045564 <Scheduler_Event_Handler+0x54>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, Scheduler_Event_Post);
10045524:	4b73      	ldr	r3, [pc, #460]	@ (100456f4 <Scheduler_Event_Handler+0x1e4>)
10045526:	001a      	movs	r2, r3
10045528:	2104      	movs	r1, #4
1004552a:	206f      	movs	r0, #111	@ 0x6f
1004552c:	f7ff f8ba 	bl	100446a4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, Scheduler_Event_Post);
10045530:	4b70      	ldr	r3, [pc, #448]	@ (100456f4 <Scheduler_Event_Handler+0x1e4>)
10045532:	001a      	movs	r2, r3
10045534:	2103      	movs	r1, #3
10045536:	206f      	movs	r0, #111	@ 0x6f
10045538:	f7ff f8b4 	bl	100446a4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, Scheduler_Event_Post);
1004553c:	4b6d      	ldr	r3, [pc, #436]	@ (100456f4 <Scheduler_Event_Handler+0x1e4>)
1004553e:	001a      	movs	r2, r3
10045540:	2102      	movs	r1, #2
10045542:	206f      	movs	r0, #111	@ 0x6f
10045544:	f7ff f8ae 	bl	100446a4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, Scheduler_Event_Post);
10045548:	4b6a      	ldr	r3, [pc, #424]	@ (100456f4 <Scheduler_Event_Handler+0x1e4>)
1004554a:	001a      	movs	r2, r3
1004554c:	2101      	movs	r1, #1
1004554e:	206f      	movs	r0, #111	@ 0x6f
10045550:	f7ff f8a8 	bl	100446a4 <I2C_Recieve>
		logging = 1;
10045554:	4b68      	ldr	r3, [pc, #416]	@ (100456f8 <Scheduler_Event_Handler+0x1e8>)
10045556:	2201      	movs	r2, #1
10045558:	701a      	strb	r2, [r3, #0]
		playdata = event.data;
1004555a:	1d3b      	adds	r3, r7, #4
1004555c:	885b      	ldrh	r3, [r3, #2]
1004555e:	b2da      	uxtb	r2, r3
10045560:	4b66      	ldr	r3, [pc, #408]	@ (100456fc <Scheduler_Event_Handler+0x1ec>)
10045562:	701a      	strb	r2, [r3, #0]
	}
	if(event.status == EVENT_TIMEOUT){
10045564:	1d3b      	adds	r3, r7, #4
10045566:	781b      	ldrb	r3, [r3, #0]
10045568:	b25b      	sxtb	r3, r3
1004556a:	2b09      	cmp	r3, #9
1004556c:	d117      	bne.n	1004559e <Scheduler_Event_Handler+0x8e>
		I2C_Recieve(RTCADDRESS, RTCMNTHADDR, Scheduler_Event_Post);
1004556e:	4b61      	ldr	r3, [pc, #388]	@ (100456f4 <Scheduler_Event_Handler+0x1e4>)
10045570:	001a      	movs	r2, r3
10045572:	2104      	movs	r1, #4
10045574:	206f      	movs	r0, #111	@ 0x6f
10045576:	f7ff f895 	bl	100446a4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCDAYADDR, Scheduler_Event_Post);
1004557a:	4b5e      	ldr	r3, [pc, #376]	@ (100456f4 <Scheduler_Event_Handler+0x1e4>)
1004557c:	001a      	movs	r2, r3
1004557e:	2103      	movs	r1, #3
10045580:	206f      	movs	r0, #111	@ 0x6f
10045582:	f7ff f88f 	bl	100446a4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCHOURADDR, Scheduler_Event_Post);
10045586:	4b5b      	ldr	r3, [pc, #364]	@ (100456f4 <Scheduler_Event_Handler+0x1e4>)
10045588:	001a      	movs	r2, r3
1004558a:	2102      	movs	r1, #2
1004558c:	206f      	movs	r0, #111	@ 0x6f
1004558e:	f7ff f889 	bl	100446a4 <I2C_Recieve>
		I2C_Recieve(RTCADDRESS, RTCMINADDR, Scheduler_Event_Post);
10045592:	4b58      	ldr	r3, [pc, #352]	@ (100456f4 <Scheduler_Event_Handler+0x1e4>)
10045594:	001a      	movs	r2, r3
10045596:	2101      	movs	r1, #1
10045598:	206f      	movs	r0, #111	@ 0x6f
1004559a:	f7ff f883 	bl	100446a4 <I2C_Recieve>
	}
	if(event.status == EVENT_I2C){
1004559e:	1d3b      	adds	r3, r7, #4
100455a0:	781b      	ldrb	r3, [r3, #0]
100455a2:	b25b      	sxtb	r3, r3
100455a4:	2b05      	cmp	r3, #5
100455a6:	d000      	beq.n	100455aa <Scheduler_Event_Handler+0x9a>
100455a8:	e09e      	b.n	100456e8 <Scheduler_Event_Handler+0x1d8>
		switch (event.data>>8){
100455aa:	1d3b      	adds	r3, r7, #4
100455ac:	885b      	ldrh	r3, [r3, #2]
100455ae:	0a1b      	lsrs	r3, r3, #8
100455b0:	b29b      	uxth	r3, r3
100455b2:	2b04      	cmp	r3, #4
100455b4:	d00b      	beq.n	100455ce <Scheduler_Event_Handler+0xbe>
100455b6:	dd00      	ble.n	100455ba <Scheduler_Event_Handler+0xaa>
100455b8:	e096      	b.n	100456e8 <Scheduler_Event_Handler+0x1d8>
100455ba:	2b03      	cmp	r3, #3
100455bc:	d020      	beq.n	10045600 <Scheduler_Event_Handler+0xf0>
100455be:	dd00      	ble.n	100455c2 <Scheduler_Event_Handler+0xb2>
100455c0:	e092      	b.n	100456e8 <Scheduler_Event_Handler+0x1d8>
100455c2:	2b01      	cmp	r3, #1
100455c4:	d100      	bne.n	100455c8 <Scheduler_Event_Handler+0xb8>
100455c6:	e076      	b.n	100456b6 <Scheduler_Event_Handler+0x1a6>
100455c8:	2b02      	cmp	r3, #2
100455ca:	d032      	beq.n	10045632 <Scheduler_Event_Handler+0x122>
100455cc:	e08c      	b.n	100456e8 <Scheduler_Event_Handler+0x1d8>
		case RTCMNTHADDR:
			month = ((event.data & 0x10)>>4)*10 + (event.data & 0x0F);
100455ce:	1d3b      	adds	r3, r7, #4
100455d0:	885b      	ldrh	r3, [r3, #2]
100455d2:	111b      	asrs	r3, r3, #4
100455d4:	b2db      	uxtb	r3, r3
100455d6:	2201      	movs	r2, #1
100455d8:	4013      	ands	r3, r2
100455da:	b2db      	uxtb	r3, r3
100455dc:	1c1a      	adds	r2, r3, #0
100455de:	0092      	lsls	r2, r2, #2
100455e0:	18d3      	adds	r3, r2, r3
100455e2:	18db      	adds	r3, r3, r3
100455e4:	b2da      	uxtb	r2, r3
100455e6:	1d3b      	adds	r3, r7, #4
100455e8:	885b      	ldrh	r3, [r3, #2]
100455ea:	b2db      	uxtb	r3, r3
100455ec:	210f      	movs	r1, #15
100455ee:	400b      	ands	r3, r1
100455f0:	b2db      	uxtb	r3, r3
100455f2:	18d3      	adds	r3, r2, r3
100455f4:	b2da      	uxtb	r2, r3
100455f6:	4b42      	ldr	r3, [pc, #264]	@ (10045700 <Scheduler_Event_Handler+0x1f0>)
100455f8:	701a      	strb	r2, [r3, #0]
			CompareTime();
100455fa:	f7ff fe03 	bl	10045204 <CompareTime>
			break;
100455fe:	e073      	b.n	100456e8 <Scheduler_Event_Handler+0x1d8>
		case RTCDAYADDR:
			day = ((event.data & 0x30)>>4)*10 + (event.data & 0x0F);
10045600:	1d3b      	adds	r3, r7, #4
10045602:	885b      	ldrh	r3, [r3, #2]
10045604:	111b      	asrs	r3, r3, #4
10045606:	b2db      	uxtb	r3, r3
10045608:	2203      	movs	r2, #3
1004560a:	4013      	ands	r3, r2
1004560c:	b2db      	uxtb	r3, r3
1004560e:	1c1a      	adds	r2, r3, #0
10045610:	0092      	lsls	r2, r2, #2
10045612:	18d3      	adds	r3, r2, r3
10045614:	18db      	adds	r3, r3, r3
10045616:	b2da      	uxtb	r2, r3
10045618:	1d3b      	adds	r3, r7, #4
1004561a:	885b      	ldrh	r3, [r3, #2]
1004561c:	b2db      	uxtb	r3, r3
1004561e:	210f      	movs	r1, #15
10045620:	400b      	ands	r3, r1
10045622:	b2db      	uxtb	r3, r3
10045624:	18d3      	adds	r3, r2, r3
10045626:	b2da      	uxtb	r2, r3
10045628:	4b36      	ldr	r3, [pc, #216]	@ (10045704 <Scheduler_Event_Handler+0x1f4>)
1004562a:	701a      	strb	r2, [r3, #0]
			CompareTime();
1004562c:	f7ff fdea 	bl	10045204 <CompareTime>
			break;
10045630:	e05a      	b.n	100456e8 <Scheduler_Event_Handler+0x1d8>
		case RTCHOURADDR:
			if(event.data & 0x40){//AM/PM
10045632:	1d3b      	adds	r3, r7, #4
10045634:	885b      	ldrh	r3, [r3, #2]
10045636:	001a      	movs	r2, r3
10045638:	2340      	movs	r3, #64	@ 0x40
1004563a:	4013      	ands	r3, r2
1004563c:	d022      	beq.n	10045684 <Scheduler_Event_Handler+0x174>
				hour = 12*((event.data &0x20)>>5)+ 10*((event.data &0x10)>>4) + ((event.data &0x0F));
1004563e:	1d3b      	adds	r3, r7, #4
10045640:	885b      	ldrh	r3, [r3, #2]
10045642:	115b      	asrs	r3, r3, #5
10045644:	b2db      	uxtb	r3, r3
10045646:	2201      	movs	r2, #1
10045648:	4013      	ands	r3, r2
1004564a:	b2db      	uxtb	r3, r3
1004564c:	220c      	movs	r2, #12
1004564e:	4353      	muls	r3, r2
10045650:	b2da      	uxtb	r2, r3
10045652:	1d3b      	adds	r3, r7, #4
10045654:	885b      	ldrh	r3, [r3, #2]
10045656:	111b      	asrs	r3, r3, #4
10045658:	b2db      	uxtb	r3, r3
1004565a:	2101      	movs	r1, #1
1004565c:	400b      	ands	r3, r1
1004565e:	b2db      	uxtb	r3, r3
10045660:	1c19      	adds	r1, r3, #0
10045662:	0089      	lsls	r1, r1, #2
10045664:	18cb      	adds	r3, r1, r3
10045666:	18db      	adds	r3, r3, r3
10045668:	b2db      	uxtb	r3, r3
1004566a:	18d3      	adds	r3, r2, r3
1004566c:	b2da      	uxtb	r2, r3
1004566e:	1d3b      	adds	r3, r7, #4
10045670:	885b      	ldrh	r3, [r3, #2]
10045672:	b2db      	uxtb	r3, r3
10045674:	210f      	movs	r1, #15
10045676:	400b      	ands	r3, r1
10045678:	b2db      	uxtb	r3, r3
1004567a:	18d3      	adds	r3, r2, r3
1004567c:	b2da      	uxtb	r2, r3
1004567e:	4b22      	ldr	r3, [pc, #136]	@ (10045708 <Scheduler_Event_Handler+0x1f8>)
10045680:	701a      	strb	r2, [r3, #0]
10045682:	e015      	b.n	100456b0 <Scheduler_Event_Handler+0x1a0>
			}else {//24Hr
				hour = 10*((event.data &0x30)>>4) + ((event.data &0x0F));
10045684:	1d3b      	adds	r3, r7, #4
10045686:	885b      	ldrh	r3, [r3, #2]
10045688:	111b      	asrs	r3, r3, #4
1004568a:	b2db      	uxtb	r3, r3
1004568c:	2203      	movs	r2, #3
1004568e:	4013      	ands	r3, r2
10045690:	b2db      	uxtb	r3, r3
10045692:	1c1a      	adds	r2, r3, #0
10045694:	0092      	lsls	r2, r2, #2
10045696:	18d3      	adds	r3, r2, r3
10045698:	18db      	adds	r3, r3, r3
1004569a:	b2da      	uxtb	r2, r3
1004569c:	1d3b      	adds	r3, r7, #4
1004569e:	885b      	ldrh	r3, [r3, #2]
100456a0:	b2db      	uxtb	r3, r3
100456a2:	210f      	movs	r1, #15
100456a4:	400b      	ands	r3, r1
100456a6:	b2db      	uxtb	r3, r3
100456a8:	18d3      	adds	r3, r2, r3
100456aa:	b2da      	uxtb	r2, r3
100456ac:	4b16      	ldr	r3, [pc, #88]	@ (10045708 <Scheduler_Event_Handler+0x1f8>)
100456ae:	701a      	strb	r2, [r3, #0]
			}
			CompareTime();
100456b0:	f7ff fda8 	bl	10045204 <CompareTime>
			break;
100456b4:	e018      	b.n	100456e8 <Scheduler_Event_Handler+0x1d8>
		case RTCMINADDR:
			//MINTEN2 MINTEN1 MINTEN0 MINONE3 MINONE2 MINONE1 MINONE0
			minute = 10*((event.data & 0x30)>>4) +((event.data &0x0F));
100456b6:	1d3b      	adds	r3, r7, #4
100456b8:	885b      	ldrh	r3, [r3, #2]
100456ba:	111b      	asrs	r3, r3, #4
100456bc:	b2db      	uxtb	r3, r3
100456be:	2203      	movs	r2, #3
100456c0:	4013      	ands	r3, r2
100456c2:	b2db      	uxtb	r3, r3
100456c4:	1c1a      	adds	r2, r3, #0
100456c6:	0092      	lsls	r2, r2, #2
100456c8:	18d3      	adds	r3, r2, r3
100456ca:	18db      	adds	r3, r3, r3
100456cc:	b2da      	uxtb	r2, r3
100456ce:	1d3b      	adds	r3, r7, #4
100456d0:	885b      	ldrh	r3, [r3, #2]
100456d2:	b2db      	uxtb	r3, r3
100456d4:	210f      	movs	r1, #15
100456d6:	400b      	ands	r3, r1
100456d8:	b2db      	uxtb	r3, r3
100456da:	18d3      	adds	r3, r2, r3
100456dc:	b2da      	uxtb	r2, r3
100456de:	4b0b      	ldr	r3, [pc, #44]	@ (1004570c <Scheduler_Event_Handler+0x1fc>)
100456e0:	701a      	strb	r2, [r3, #0]
			CompareTime();
100456e2:	f7ff fd8f 	bl	10045204 <CompareTime>

			break;
100456e6:	46c0      	nop			@ (mov r8, r8)
		}
	}
    return 1;
100456e8:	2301      	movs	r3, #1
}
100456ea:	0018      	movs	r0, r3
100456ec:	46bd      	mov	sp, r7
100456ee:	b002      	add	sp, #8
100456f0:	bd80      	pop	{r7, pc}
100456f2:	46c0      	nop			@ (mov r8, r8)
100456f4:	10045475 	.word	0x10045475
100456f8:	20002134 	.word	0x20002134
100456fc:	20002135 	.word	0x20002135
10045700:	20002130 	.word	0x20002130
10045704:	20002131 	.word	0x20002131
10045708:	20002132 	.word	0x20002132
1004570c:	20002133 	.word	0x20002133

10045710 <TIMERS_Init>:
 * @function: TIMERS_Init()
 * @brief: initialize
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
uint32_t TIMERS_Init(){
10045710:	b580      	push	{r7, lr}
10045712:	b084      	sub	sp, #16
10045714:	af00      	add	r7, sp, #0
	if(initialized){return INIT_OK;}
10045716:	4b20      	ldr	r3, [pc, #128]	@ (10045798 <TIMERS_Init+0x88>)
10045718:	781b      	ldrb	r3, [r3, #0]
1004571a:	2b00      	cmp	r3, #0
1004571c:	d001      	beq.n	10045722 <TIMERS_Init+0x12>
1004571e:	2301      	movs	r3, #1
10045720:	e036      	b.n	10045790 <TIMERS_Init+0x80>
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
10045722:	003b      	movs	r3, r7
10045724:	0018      	movs	r0, r3
10045726:	2310      	movs	r3, #16
10045728:	001a      	movs	r2, r3
1004572a:	2100      	movs	r1, #0
1004572c:	f022 fa1a 	bl	10067b64 <memset>
	htim2.Instance = TIM2;
10045730:	4b1a      	ldr	r3, [pc, #104]	@ (1004579c <TIMERS_Init+0x8c>)
10045732:	4a1b      	ldr	r2, [pc, #108]	@ (100457a0 <TIMERS_Init+0x90>)
10045734:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32;
10045736:	4b19      	ldr	r3, [pc, #100]	@ (1004579c <TIMERS_Init+0x8c>)
10045738:	2220      	movs	r2, #32
1004573a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
1004573c:	4b17      	ldr	r3, [pc, #92]	@ (1004579c <TIMERS_Init+0x8c>)
1004573e:	2200      	movs	r2, #0
10045740:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 999;
10045742:	4b16      	ldr	r3, [pc, #88]	@ (1004579c <TIMERS_Init+0x8c>)
10045744:	4a17      	ldr	r2, [pc, #92]	@ (100457a4 <TIMERS_Init+0x94>)
10045746:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
10045748:	4b14      	ldr	r3, [pc, #80]	@ (1004579c <TIMERS_Init+0x8c>)
1004574a:	2200      	movs	r2, #0
1004574c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
1004574e:	4b13      	ldr	r3, [pc, #76]	@ (1004579c <TIMERS_Init+0x8c>)
10045750:	2200      	movs	r2, #0
10045752:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
10045754:	4b11      	ldr	r3, [pc, #68]	@ (1004579c <TIMERS_Init+0x8c>)
10045756:	0018      	movs	r0, r3
10045758:	f007 fa0d 	bl	1004cb76 <HAL_TIM_Base_Init>
1004575c:	1e03      	subs	r3, r0, #0
1004575e:	d001      	beq.n	10045764 <TIMERS_Init+0x54>
	{
		Error_Handler();
10045760:	f7fb ff0c 	bl	1004157c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
10045764:	003b      	movs	r3, r7
10045766:	2280      	movs	r2, #128	@ 0x80
10045768:	0152      	lsls	r2, r2, #5
1004576a:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
1004576c:	003a      	movs	r2, r7
1004576e:	4b0b      	ldr	r3, [pc, #44]	@ (1004579c <TIMERS_Init+0x8c>)
10045770:	0011      	movs	r1, r2
10045772:	0018      	movs	r0, r3
10045774:	f007 fb78 	bl	1004ce68 <HAL_TIM_ConfigClockSource>
10045778:	1e03      	subs	r3, r0, #0
1004577a:	d001      	beq.n	10045780 <TIMERS_Init+0x70>
	{
		Error_Handler();
1004577c:	f7fb fefe 	bl	1004157c <Error_Handler>
	}
    HAL_TIM_Base_Start_IT(&htim2); // start interrupt
10045780:	4b06      	ldr	r3, [pc, #24]	@ (1004579c <TIMERS_Init+0x8c>)
10045782:	0018      	movs	r0, r3
10045784:	f007 fa3c 	bl	1004cc00 <HAL_TIM_Base_Start_IT>
    initialized = 1;
10045788:	4b03      	ldr	r3, [pc, #12]	@ (10045798 <TIMERS_Init+0x88>)
1004578a:	2201      	movs	r2, #1
1004578c:	701a      	strb	r2, [r3, #0]
	return INIT_OK;
1004578e:	2301      	movs	r3, #1
}
10045790:	0018      	movs	r0, r3
10045792:	46bd      	mov	sp, r7
10045794:	b004      	add	sp, #16
10045796:	bd80      	pop	{r7, pc}
10045798:	20002178 	.word	0x20002178
1004579c:	20002138 	.word	0x20002138
100457a0:	40002000 	.word	0x40002000
100457a4:	000003e7 	.word	0x000003e7

100457a8 <TIMERS_GetMilliSeconds>:
 * @function: TIMERS_GetMilliSeconds()
 * @brief: accesses the free running timer's milliseconds
 * @param: none
 * @return: uint32_t FRT's milliseconds
 */
uint32_t TIMERS_GetMilliSeconds(){
100457a8:	b580      	push	{r7, lr}
100457aa:	af00      	add	r7, sp, #0
	if(!initialized){return 0;}
100457ac:	4b05      	ldr	r3, [pc, #20]	@ (100457c4 <TIMERS_GetMilliSeconds+0x1c>)
100457ae:	781b      	ldrb	r3, [r3, #0]
100457b0:	2b00      	cmp	r3, #0
100457b2:	d101      	bne.n	100457b8 <TIMERS_GetMilliSeconds+0x10>
100457b4:	2300      	movs	r3, #0
100457b6:	e001      	b.n	100457bc <TIMERS_GetMilliSeconds+0x14>
	return milliSeconds;
100457b8:	4b03      	ldr	r3, [pc, #12]	@ (100457c8 <TIMERS_GetMilliSeconds+0x20>)
100457ba:	681b      	ldr	r3, [r3, #0]
}
100457bc:	0018      	movs	r0, r3
100457be:	46bd      	mov	sp, r7
100457c0:	bd80      	pop	{r7, pc}
100457c2:	46c0      	nop			@ (mov r8, r8)
100457c4:	20002178 	.word	0x20002178
100457c8:	20002174 	.word	0x20002174

100457cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
100457cc:	b580      	push	{r7, lr}
100457ce:	af00      	add	r7, sp, #0

	milliSeconds++;
100457d0:	4b05      	ldr	r3, [pc, #20]	@ (100457e8 <TIM2_IRQHandler+0x1c>)
100457d2:	681b      	ldr	r3, [r3, #0]
100457d4:	1c5a      	adds	r2, r3, #1
100457d6:	4b04      	ldr	r3, [pc, #16]	@ (100457e8 <TIM2_IRQHandler+0x1c>)
100457d8:	601a      	str	r2, [r3, #0]
	HAL_TIM_IRQHandler(&htim2);
100457da:	4b04      	ldr	r3, [pc, #16]	@ (100457ec <TIM2_IRQHandler+0x20>)
100457dc:	0018      	movs	r0, r3
100457de:	f007 fa55 	bl	1004cc8c <HAL_TIM_IRQHandler>
}
100457e2:	46c0      	nop			@ (mov r8, r8)
100457e4:	46bd      	mov	sp, r7
100457e6:	bd80      	pop	{r7, pc}
100457e8:	20002174 	.word	0x20002174
100457ec:	20002138 	.word	0x20002138

100457f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
100457f0:	b580      	push	{r7, lr}
100457f2:	b082      	sub	sp, #8
100457f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

	if(hlpuart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
100457f6:	4b3a      	ldr	r3, [pc, #232]	@ (100458e0 <LPUART1_IRQHandler+0xf0>)
100457f8:	681b      	ldr	r3, [r3, #0]
100457fa:	69db      	ldr	r3, [r3, #28]
100457fc:	2220      	movs	r2, #32
100457fe:	4013      	ands	r3, r2
10045800:	d032      	beq.n	10045868 <LPUART1_IRQHandler+0x78>
		if(!LPUARTrx.full){
10045802:	4b38      	ldr	r3, [pc, #224]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
10045804:	2224      	movs	r2, #36	@ 0x24
10045806:	5c9b      	ldrb	r3, [r3, r2]
10045808:	2201      	movs	r2, #1
1004580a:	4053      	eors	r3, r2
1004580c:	b2db      	uxtb	r3, r3
1004580e:	2b00      	cmp	r3, #0
10045810:	d020      	beq.n	10045854 <LPUART1_IRQHandler+0x64>
			LPUARTrx.data[LPUARTrx.head] = hlpuart1.Instance->RDR;
10045812:	4b33      	ldr	r3, [pc, #204]	@ (100458e0 <LPUART1_IRQHandler+0xf0>)
10045814:	681b      	ldr	r3, [r3, #0]
10045816:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10045818:	4b32      	ldr	r3, [pc, #200]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
1004581a:	8c1b      	ldrh	r3, [r3, #32]
1004581c:	001a      	movs	r2, r3
1004581e:	b2c9      	uxtb	r1, r1
10045820:	4b30      	ldr	r3, [pc, #192]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
10045822:	5499      	strb	r1, [r3, r2]
			LPUARTrx.head++;
10045824:	4b2f      	ldr	r3, [pc, #188]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
10045826:	8c1b      	ldrh	r3, [r3, #32]
10045828:	3301      	adds	r3, #1
1004582a:	b29a      	uxth	r2, r3
1004582c:	4b2d      	ldr	r3, [pc, #180]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
1004582e:	841a      	strh	r2, [r3, #32]
			LPUARTrx.head %= LPUARTCIRCBUFFSIZE;
10045830:	4b2c      	ldr	r3, [pc, #176]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
10045832:	8c1b      	ldrh	r3, [r3, #32]
10045834:	221f      	movs	r2, #31
10045836:	4013      	ands	r3, r2
10045838:	b29a      	uxth	r2, r3
1004583a:	4b2a      	ldr	r3, [pc, #168]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
1004583c:	841a      	strh	r2, [r3, #32]
			if(LPUARTrx.tail == LPUARTrx.head){
1004583e:	4b29      	ldr	r3, [pc, #164]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
10045840:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
10045842:	4b28      	ldr	r3, [pc, #160]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
10045844:	8c1b      	ldrh	r3, [r3, #32]
10045846:	429a      	cmp	r2, r3
10045848:	d10e      	bne.n	10045868 <LPUART1_IRQHandler+0x78>
				LPUARTrx.full = true;
1004584a:	4b26      	ldr	r3, [pc, #152]	@ (100458e4 <LPUART1_IRQHandler+0xf4>)
1004584c:	2224      	movs	r2, #36	@ 0x24
1004584e:	2101      	movs	r1, #1
10045850:	5499      	strb	r1, [r3, r2]
10045852:	e009      	b.n	10045868 <LPUART1_IRQHandler+0x78>
			}
		} else {
			uint8_t discard = hlpuart1.Instance->RDR;
10045854:	4b22      	ldr	r3, [pc, #136]	@ (100458e0 <LPUART1_IRQHandler+0xf0>)
10045856:	681b      	ldr	r3, [r3, #0]
10045858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004585a:	1dfb      	adds	r3, r7, #7
1004585c:	701a      	strb	r2, [r3, #0]
			discard++;
1004585e:	1dfb      	adds	r3, r7, #7
10045860:	781a      	ldrb	r2, [r3, #0]
10045862:	1dfb      	adds	r3, r7, #7
10045864:	3201      	adds	r2, #1
10045866:	701a      	strb	r2, [r3, #0]
		}
	}
	if((hlpuart1.Instance->ISR & USART_ISR_TC_Msk)){
10045868:	4b1d      	ldr	r3, [pc, #116]	@ (100458e0 <LPUART1_IRQHandler+0xf0>)
1004586a:	681b      	ldr	r3, [r3, #0]
1004586c:	69db      	ldr	r3, [r3, #28]
1004586e:	2240      	movs	r2, #64	@ 0x40
10045870:	4013      	ands	r3, r2
10045872:	d02d      	beq.n	100458d0 <LPUART1_IRQHandler+0xe0>
		if(LPUARTtx.head != LPUARTtx.tail || LPUARTtx.full){
10045874:	4b1c      	ldr	r3, [pc, #112]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
10045876:	8c1a      	ldrh	r2, [r3, #32]
10045878:	4b1b      	ldr	r3, [pc, #108]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
1004587a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
1004587c:	429a      	cmp	r2, r3
1004587e:	d104      	bne.n	1004588a <LPUART1_IRQHandler+0x9a>
10045880:	4b19      	ldr	r3, [pc, #100]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
10045882:	2224      	movs	r2, #36	@ 0x24
10045884:	5c9b      	ldrb	r3, [r3, r2]
10045886:	2b00      	cmp	r3, #0
10045888:	d01e      	beq.n	100458c8 <LPUART1_IRQHandler+0xd8>
			hlpuart1.Instance->TDR = LPUARTtx.data[LPUARTtx.tail];
1004588a:	4b17      	ldr	r3, [pc, #92]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
1004588c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
1004588e:	001a      	movs	r2, r3
10045890:	4b15      	ldr	r3, [pc, #84]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
10045892:	5c9a      	ldrb	r2, [r3, r2]
10045894:	4b12      	ldr	r3, [pc, #72]	@ (100458e0 <LPUART1_IRQHandler+0xf0>)
10045896:	681b      	ldr	r3, [r3, #0]
10045898:	629a      	str	r2, [r3, #40]	@ 0x28
			LPUARTtx.tail++;
1004589a:	4b13      	ldr	r3, [pc, #76]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
1004589c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
1004589e:	3301      	adds	r3, #1
100458a0:	b29a      	uxth	r2, r3
100458a2:	4b11      	ldr	r3, [pc, #68]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
100458a4:	845a      	strh	r2, [r3, #34]	@ 0x22
			LPUARTtx.tail %= LPUARTCIRCBUFFSIZE;
100458a6:	4b10      	ldr	r3, [pc, #64]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
100458a8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
100458aa:	221f      	movs	r2, #31
100458ac:	4013      	ands	r3, r2
100458ae:	b29a      	uxth	r2, r3
100458b0:	4b0d      	ldr	r3, [pc, #52]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
100458b2:	845a      	strh	r2, [r3, #34]	@ 0x22
			if(LPUARTtx.full){
100458b4:	4b0c      	ldr	r3, [pc, #48]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
100458b6:	2224      	movs	r2, #36	@ 0x24
100458b8:	5c9b      	ldrb	r3, [r3, r2]
100458ba:	2b00      	cmp	r3, #0
100458bc:	d008      	beq.n	100458d0 <LPUART1_IRQHandler+0xe0>
				LPUARTtx.full = false;
100458be:	4b0a      	ldr	r3, [pc, #40]	@ (100458e8 <LPUART1_IRQHandler+0xf8>)
100458c0:	2224      	movs	r2, #36	@ 0x24
100458c2:	2100      	movs	r1, #0
100458c4:	5499      	strb	r1, [r3, r2]
			if(LPUARTtx.full){
100458c6:	e003      	b.n	100458d0 <LPUART1_IRQHandler+0xe0>
			}

		} else {
			__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_CLEAR_TCF);
100458c8:	4b05      	ldr	r3, [pc, #20]	@ (100458e0 <LPUART1_IRQHandler+0xf0>)
100458ca:	681b      	ldr	r3, [r3, #0]
100458cc:	2240      	movs	r2, #64	@ 0x40
100458ce:	621a      	str	r2, [r3, #32]
		}
	}
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
100458d0:	4b03      	ldr	r3, [pc, #12]	@ (100458e0 <LPUART1_IRQHandler+0xf0>)
100458d2:	0018      	movs	r0, r3
100458d4:	f007 fdca 	bl	1004d46c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
100458d8:	46c0      	nop			@ (mov r8, r8)
100458da:	46bd      	mov	sp, r7
100458dc:	b002      	add	sp, #8
100458de:	bd80      	pop	{r7, pc}
100458e0:	2000217c 	.word	0x2000217c
100458e4:	200026f0 	.word	0x200026f0
100458e8:	200026c8 	.word	0x200026c8

100458ec <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
100458ec:	b580      	push	{r7, lr}
100458ee:	b082      	sub	sp, #8
100458f0:	af00      	add	r7, sp, #0

	if(husart1.Instance->ISR & USART_ISR_RXNE_RXFNE_Msk){
100458f2:	4b4b      	ldr	r3, [pc, #300]	@ (10045a20 <USART1_IRQHandler+0x134>)
100458f4:	681b      	ldr	r3, [r3, #0]
100458f6:	69db      	ldr	r3, [r3, #28]
100458f8:	2220      	movs	r2, #32
100458fa:	4013      	ands	r3, r2
100458fc:	d03d      	beq.n	1004597a <USART1_IRQHandler+0x8e>
		if(!USARTrx.full){
100458fe:	4b49      	ldr	r3, [pc, #292]	@ (10045a24 <USART1_IRQHandler+0x138>)
10045900:	4a49      	ldr	r2, [pc, #292]	@ (10045a28 <USART1_IRQHandler+0x13c>)
10045902:	5c9b      	ldrb	r3, [r3, r2]
10045904:	2201      	movs	r2, #1
10045906:	4053      	eors	r3, r2
10045908:	b2db      	uxtb	r3, r3
1004590a:	2b00      	cmp	r3, #0
1004590c:	d02b      	beq.n	10045966 <USART1_IRQHandler+0x7a>
			USARTrx.data[USARTrx.head] = husart1.Instance->RDR;
1004590e:	4b44      	ldr	r3, [pc, #272]	@ (10045a20 <USART1_IRQHandler+0x134>)
10045910:	681b      	ldr	r3, [r3, #0]
10045912:	6a59      	ldr	r1, [r3, #36]	@ 0x24
10045914:	4b43      	ldr	r3, [pc, #268]	@ (10045a24 <USART1_IRQHandler+0x138>)
10045916:	4a45      	ldr	r2, [pc, #276]	@ (10045a2c <USART1_IRQHandler+0x140>)
10045918:	5a9b      	ldrh	r3, [r3, r2]
1004591a:	001a      	movs	r2, r3
1004591c:	b2c9      	uxtb	r1, r1
1004591e:	4b41      	ldr	r3, [pc, #260]	@ (10045a24 <USART1_IRQHandler+0x138>)
10045920:	5499      	strb	r1, [r3, r2]
			USARTrx.head++;
10045922:	4b40      	ldr	r3, [pc, #256]	@ (10045a24 <USART1_IRQHandler+0x138>)
10045924:	4a41      	ldr	r2, [pc, #260]	@ (10045a2c <USART1_IRQHandler+0x140>)
10045926:	5a9b      	ldrh	r3, [r3, r2]
10045928:	3301      	adds	r3, #1
1004592a:	b299      	uxth	r1, r3
1004592c:	4b3d      	ldr	r3, [pc, #244]	@ (10045a24 <USART1_IRQHandler+0x138>)
1004592e:	4a3f      	ldr	r2, [pc, #252]	@ (10045a2c <USART1_IRQHandler+0x140>)
10045930:	5299      	strh	r1, [r3, r2]
			USARTrx.head %= UARTCIRCBUFFSIZE;
10045932:	4b3c      	ldr	r3, [pc, #240]	@ (10045a24 <USART1_IRQHandler+0x138>)
10045934:	4a3d      	ldr	r2, [pc, #244]	@ (10045a2c <USART1_IRQHandler+0x140>)
10045936:	5a9b      	ldrh	r3, [r3, r2]
10045938:	493d      	ldr	r1, [pc, #244]	@ (10045a30 <USART1_IRQHandler+0x144>)
1004593a:	0018      	movs	r0, r3
1004593c:	f7fa fd06 	bl	1004034c <__aeabi_uidivmod>
10045940:	000b      	movs	r3, r1
10045942:	b299      	uxth	r1, r3
10045944:	4b37      	ldr	r3, [pc, #220]	@ (10045a24 <USART1_IRQHandler+0x138>)
10045946:	4a39      	ldr	r2, [pc, #228]	@ (10045a2c <USART1_IRQHandler+0x140>)
10045948:	5299      	strh	r1, [r3, r2]
			if(USARTrx.tail == USARTrx.head){
1004594a:	4a36      	ldr	r2, [pc, #216]	@ (10045a24 <USART1_IRQHandler+0x138>)
1004594c:	2381      	movs	r3, #129	@ 0x81
1004594e:	009b      	lsls	r3, r3, #2
10045950:	5ad2      	ldrh	r2, [r2, r3]
10045952:	4b34      	ldr	r3, [pc, #208]	@ (10045a24 <USART1_IRQHandler+0x138>)
10045954:	4935      	ldr	r1, [pc, #212]	@ (10045a2c <USART1_IRQHandler+0x140>)
10045956:	5a5b      	ldrh	r3, [r3, r1]
10045958:	429a      	cmp	r2, r3
1004595a:	d10e      	bne.n	1004597a <USART1_IRQHandler+0x8e>
				USARTrx.full = true;
1004595c:	4b31      	ldr	r3, [pc, #196]	@ (10045a24 <USART1_IRQHandler+0x138>)
1004595e:	4a32      	ldr	r2, [pc, #200]	@ (10045a28 <USART1_IRQHandler+0x13c>)
10045960:	2101      	movs	r1, #1
10045962:	5499      	strb	r1, [r3, r2]
10045964:	e009      	b.n	1004597a <USART1_IRQHandler+0x8e>
			}
		} else {
			uint8_t discard = husart1.Instance->RDR;
10045966:	4b2e      	ldr	r3, [pc, #184]	@ (10045a20 <USART1_IRQHandler+0x134>)
10045968:	681b      	ldr	r3, [r3, #0]
1004596a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004596c:	1dfb      	adds	r3, r7, #7
1004596e:	701a      	strb	r2, [r3, #0]
			discard++;
10045970:	1dfb      	adds	r3, r7, #7
10045972:	781a      	ldrb	r2, [r3, #0]
10045974:	1dfb      	adds	r3, r7, #7
10045976:	3201      	adds	r2, #1
10045978:	701a      	strb	r2, [r3, #0]
		}
	}
	if((husart1.Instance->ISR & USART_ISR_TC_Msk)){
1004597a:	4b29      	ldr	r3, [pc, #164]	@ (10045a20 <USART1_IRQHandler+0x134>)
1004597c:	681b      	ldr	r3, [r3, #0]
1004597e:	69db      	ldr	r3, [r3, #28]
10045980:	2240      	movs	r2, #64	@ 0x40
10045982:	4013      	ands	r3, r2
10045984:	d043      	beq.n	10045a0e <USART1_IRQHandler+0x122>
		if(USARTtx.head != USARTtx.tail || USARTtx.full){
10045986:	4b2b      	ldr	r3, [pc, #172]	@ (10045a34 <USART1_IRQHandler+0x148>)
10045988:	4a28      	ldr	r2, [pc, #160]	@ (10045a2c <USART1_IRQHandler+0x140>)
1004598a:	5a9a      	ldrh	r2, [r3, r2]
1004598c:	4929      	ldr	r1, [pc, #164]	@ (10045a34 <USART1_IRQHandler+0x148>)
1004598e:	2381      	movs	r3, #129	@ 0x81
10045990:	009b      	lsls	r3, r3, #2
10045992:	5acb      	ldrh	r3, [r1, r3]
10045994:	429a      	cmp	r2, r3
10045996:	d104      	bne.n	100459a2 <USART1_IRQHandler+0xb6>
10045998:	4b26      	ldr	r3, [pc, #152]	@ (10045a34 <USART1_IRQHandler+0x148>)
1004599a:	4a23      	ldr	r2, [pc, #140]	@ (10045a28 <USART1_IRQHandler+0x13c>)
1004599c:	5c9b      	ldrb	r3, [r3, r2]
1004599e:	2b00      	cmp	r3, #0
100459a0:	d02e      	beq.n	10045a00 <USART1_IRQHandler+0x114>
			I2CUARTtoUSART(1);//delays because a transmission follows immediately, should be rare as it was already initialized before the interrupt
100459a2:	2001      	movs	r0, #1
100459a4:	f7fe fbb0 	bl	10044108 <I2CUARTtoUSART>
			husart1.Instance->TDR = USARTtx.data[USARTtx.tail];
100459a8:	4a22      	ldr	r2, [pc, #136]	@ (10045a34 <USART1_IRQHandler+0x148>)
100459aa:	2381      	movs	r3, #129	@ 0x81
100459ac:	009b      	lsls	r3, r3, #2
100459ae:	5ad3      	ldrh	r3, [r2, r3]
100459b0:	001a      	movs	r2, r3
100459b2:	4b20      	ldr	r3, [pc, #128]	@ (10045a34 <USART1_IRQHandler+0x148>)
100459b4:	5c9a      	ldrb	r2, [r3, r2]
100459b6:	4b1a      	ldr	r3, [pc, #104]	@ (10045a20 <USART1_IRQHandler+0x134>)
100459b8:	681b      	ldr	r3, [r3, #0]
100459ba:	629a      	str	r2, [r3, #40]	@ 0x28
			USARTtx.tail++;
100459bc:	4a1d      	ldr	r2, [pc, #116]	@ (10045a34 <USART1_IRQHandler+0x148>)
100459be:	2381      	movs	r3, #129	@ 0x81
100459c0:	009b      	lsls	r3, r3, #2
100459c2:	5ad3      	ldrh	r3, [r2, r3]
100459c4:	3301      	adds	r3, #1
100459c6:	b299      	uxth	r1, r3
100459c8:	4a1a      	ldr	r2, [pc, #104]	@ (10045a34 <USART1_IRQHandler+0x148>)
100459ca:	2381      	movs	r3, #129	@ 0x81
100459cc:	009b      	lsls	r3, r3, #2
100459ce:	52d1      	strh	r1, [r2, r3]
			USARTtx.tail %= UARTCIRCBUFFSIZE;
100459d0:	4a18      	ldr	r2, [pc, #96]	@ (10045a34 <USART1_IRQHandler+0x148>)
100459d2:	2381      	movs	r3, #129	@ 0x81
100459d4:	009b      	lsls	r3, r3, #2
100459d6:	5ad3      	ldrh	r3, [r2, r3]
100459d8:	4915      	ldr	r1, [pc, #84]	@ (10045a30 <USART1_IRQHandler+0x144>)
100459da:	0018      	movs	r0, r3
100459dc:	f7fa fcb6 	bl	1004034c <__aeabi_uidivmod>
100459e0:	000b      	movs	r3, r1
100459e2:	b299      	uxth	r1, r3
100459e4:	4a13      	ldr	r2, [pc, #76]	@ (10045a34 <USART1_IRQHandler+0x148>)
100459e6:	2381      	movs	r3, #129	@ 0x81
100459e8:	009b      	lsls	r3, r3, #2
100459ea:	52d1      	strh	r1, [r2, r3]
			if(USARTtx.full){
100459ec:	4b11      	ldr	r3, [pc, #68]	@ (10045a34 <USART1_IRQHandler+0x148>)
100459ee:	4a0e      	ldr	r2, [pc, #56]	@ (10045a28 <USART1_IRQHandler+0x13c>)
100459f0:	5c9b      	ldrb	r3, [r3, r2]
100459f2:	2b00      	cmp	r3, #0
100459f4:	d00b      	beq.n	10045a0e <USART1_IRQHandler+0x122>
				USARTtx.full = false;
100459f6:	4b0f      	ldr	r3, [pc, #60]	@ (10045a34 <USART1_IRQHandler+0x148>)
100459f8:	4a0b      	ldr	r2, [pc, #44]	@ (10045a28 <USART1_IRQHandler+0x13c>)
100459fa:	2100      	movs	r1, #0
100459fc:	5499      	strb	r1, [r3, r2]
			if(USARTtx.full){
100459fe:	e006      	b.n	10045a0e <USART1_IRQHandler+0x122>
			}

		} else {
			I2CUARTtoI2C(1);//after transmission is complete default to I2C, no delay
10045a00:	2001      	movs	r0, #1
10045a02:	f7fe fb45 	bl	10044090 <I2CUARTtoI2C>
			__HAL_USART_CLEAR_FLAG(&husart1, UART_CLEAR_TCF);
10045a06:	4b06      	ldr	r3, [pc, #24]	@ (10045a20 <USART1_IRQHandler+0x134>)
10045a08:	681b      	ldr	r3, [r3, #0]
10045a0a:	2240      	movs	r2, #64	@ 0x40
10045a0c:	621a      	str	r2, [r3, #32]
		}
	}
	HAL_USART_IRQHandler(&husart1);
10045a0e:	4b04      	ldr	r3, [pc, #16]	@ (10045a20 <USART1_IRQHandler+0x134>)
10045a10:	0018      	movs	r0, r3
10045a12:	f008 fe2f 	bl	1004e674 <HAL_USART_IRQHandler>

}
10045a16:	46c0      	nop			@ (mov r8, r8)
10045a18:	46bd      	mov	sp, r7
10045a1a:	b002      	add	sp, #8
10045a1c:	bd80      	pop	{r7, pc}
10045a1e:	46c0      	nop			@ (mov r8, r8)
10045a20:	20002248 	.word	0x20002248
10045a24:	200024c0 	.word	0x200024c0
10045a28:	00000206 	.word	0x00000206
10045a2c:	00000202 	.word	0x00000202
10045a30:	00000201 	.word	0x00000201
10045a34:	200022b8 	.word	0x200022b8

10045a38 <UARTs_Init>:
 * @function: UARTs_Init()
 * @brief: initialize the lpuart module
 * @param: none
 * @return: Init Status, whether the operation failed or succeeded
 */
int UARTs_Init(void){
10045a38:	b580      	push	{r7, lr}
10045a3a:	af00      	add	r7, sp, #0

	if(initialized == 1){ return 0;}
10045a3c:	4b50      	ldr	r3, [pc, #320]	@ (10045b80 <UARTs_Init+0x148>)
10045a3e:	781b      	ldrb	r3, [r3, #0]
10045a40:	2b01      	cmp	r3, #1
10045a42:	d101      	bne.n	10045a48 <UARTs_Init+0x10>
10045a44:	2300      	movs	r3, #0
10045a46:	e097      	b.n	10045b78 <UARTs_Init+0x140>
	TIMERS_Init();
10045a48:	f7ff fe62 	bl	10045710 <TIMERS_Init>
	initialized = 1;
10045a4c:	4b4c      	ldr	r3, [pc, #304]	@ (10045b80 <UARTs_Init+0x148>)
10045a4e:	2201      	movs	r2, #1
10045a50:	701a      	strb	r2, [r3, #0]
	hlpuart1.Instance = LPUART1;
10045a52:	4b4c      	ldr	r3, [pc, #304]	@ (10045b84 <UARTs_Init+0x14c>)
10045a54:	4a4c      	ldr	r2, [pc, #304]	@ (10045b88 <UARTs_Init+0x150>)
10045a56:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 9600;
10045a58:	4b4a      	ldr	r3, [pc, #296]	@ (10045b84 <UARTs_Init+0x14c>)
10045a5a:	2296      	movs	r2, #150	@ 0x96
10045a5c:	0192      	lsls	r2, r2, #6
10045a5e:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
10045a60:	4b48      	ldr	r3, [pc, #288]	@ (10045b84 <UARTs_Init+0x14c>)
10045a62:	2200      	movs	r2, #0
10045a64:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
10045a66:	4b47      	ldr	r3, [pc, #284]	@ (10045b84 <UARTs_Init+0x14c>)
10045a68:	2200      	movs	r2, #0
10045a6a:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
10045a6c:	4b45      	ldr	r3, [pc, #276]	@ (10045b84 <UARTs_Init+0x14c>)
10045a6e:	2200      	movs	r2, #0
10045a70:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
10045a72:	4b44      	ldr	r3, [pc, #272]	@ (10045b84 <UARTs_Init+0x14c>)
10045a74:	220c      	movs	r2, #12
10045a76:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
10045a78:	4b42      	ldr	r3, [pc, #264]	@ (10045b84 <UARTs_Init+0x14c>)
10045a7a:	2200      	movs	r2, #0
10045a7c:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10045a7e:	4b41      	ldr	r3, [pc, #260]	@ (10045b84 <UARTs_Init+0x14c>)
10045a80:	2200      	movs	r2, #0
10045a82:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
10045a84:	4b3f      	ldr	r3, [pc, #252]	@ (10045b84 <UARTs_Init+0x14c>)
10045a86:	2200      	movs	r2, #0
10045a88:	625a      	str	r2, [r3, #36]	@ 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
10045a8a:	4b3e      	ldr	r3, [pc, #248]	@ (10045b84 <UARTs_Init+0x14c>)
10045a8c:	2200      	movs	r2, #0
10045a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
10045a90:	4b3c      	ldr	r3, [pc, #240]	@ (10045b84 <UARTs_Init+0x14c>)
10045a92:	2200      	movs	r2, #0
10045a94:	665a      	str	r2, [r3, #100]	@ 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK)
10045a96:	4b3b      	ldr	r3, [pc, #236]	@ (10045b84 <UARTs_Init+0x14c>)
10045a98:	0018      	movs	r0, r3
10045a9a:	f007 fbcf 	bl	1004d23c <HAL_UART_Init>
10045a9e:	1e03      	subs	r3, r0, #0
10045aa0:	d001      	beq.n	10045aa6 <UARTs_Init+0x6e>
	{
		Error_Handler();
10045aa2:	f7fb fd6b 	bl	1004157c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10045aa6:	4b37      	ldr	r3, [pc, #220]	@ (10045b84 <UARTs_Init+0x14c>)
10045aa8:	2100      	movs	r1, #0
10045aaa:	0018      	movs	r0, r3
10045aac:	f008 fd02 	bl	1004e4b4 <HAL_UARTEx_SetTxFifoThreshold>
10045ab0:	1e03      	subs	r3, r0, #0
10045ab2:	d001      	beq.n	10045ab8 <UARTs_Init+0x80>
	{
		Error_Handler();
10045ab4:	f7fb fd62 	bl	1004157c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10045ab8:	4b32      	ldr	r3, [pc, #200]	@ (10045b84 <UARTs_Init+0x14c>)
10045aba:	2100      	movs	r1, #0
10045abc:	0018      	movs	r0, r3
10045abe:	f008 fd39 	bl	1004e534 <HAL_UARTEx_SetRxFifoThreshold>
10045ac2:	1e03      	subs	r3, r0, #0
10045ac4:	d001      	beq.n	10045aca <UARTs_Init+0x92>
	{
		Error_Handler();
10045ac6:	f7fb fd59 	bl	1004157c <Error_Handler>
	}

	HAL_NVIC_SetPriority(LPUART1_IRQn, 3, 1);
10045aca:	2201      	movs	r2, #1
10045acc:	2103      	movs	r1, #3
10045ace:	2009      	movs	r0, #9
10045ad0:	f001 fbd8 	bl	10047284 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10045ad4:	2009      	movs	r0, #9
10045ad6:	f001 fbea 	bl	100472ae <HAL_NVIC_EnableIRQ>
	hlpuart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
10045ada:	4b2a      	ldr	r3, [pc, #168]	@ (10045b84 <UARTs_Init+0x14c>)
10045adc:	681b      	ldr	r3, [r3, #0]
10045ade:	681a      	ldr	r2, [r3, #0]
10045ae0:	4b28      	ldr	r3, [pc, #160]	@ (10045b84 <UARTs_Init+0x14c>)
10045ae2:	681b      	ldr	r3, [r3, #0]
10045ae4:	2160      	movs	r1, #96	@ 0x60
10045ae6:	430a      	orrs	r2, r1
10045ae8:	601a      	str	r2, [r3, #0]
	husart1.Instance = USART1;
10045aea:	4b28      	ldr	r3, [pc, #160]	@ (10045b8c <UARTs_Init+0x154>)
10045aec:	4a28      	ldr	r2, [pc, #160]	@ (10045b90 <UARTs_Init+0x158>)
10045aee:	601a      	str	r2, [r3, #0]
//	if (HAL_USART_Init(&husart1) != HAL_OK)
//	{
//	return INIT_ERROR;
//	}

	BspCOMInit.BaudRate   = 9600;
10045af0:	4b28      	ldr	r3, [pc, #160]	@ (10045b94 <UARTs_Init+0x15c>)
10045af2:	2296      	movs	r2, #150	@ 0x96
10045af4:	0192      	lsls	r2, r2, #6
10045af6:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
10045af8:	4b26      	ldr	r3, [pc, #152]	@ (10045b94 <UARTs_Init+0x15c>)
10045afa:	2200      	movs	r2, #0
10045afc:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits   = COM_STOPBITS_1;
10045afe:	4b25      	ldr	r3, [pc, #148]	@ (10045b94 <UARTs_Init+0x15c>)
10045b00:	2200      	movs	r2, #0
10045b02:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity     = COM_PARITY_NONE;
10045b04:	4b23      	ldr	r3, [pc, #140]	@ (10045b94 <UARTs_Init+0x15c>)
10045b06:	2200      	movs	r2, #0
10045b08:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
10045b0a:	4b22      	ldr	r3, [pc, #136]	@ (10045b94 <UARTs_Init+0x15c>)
10045b0c:	2200      	movs	r2, #0
10045b0e:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
10045b10:	4b20      	ldr	r3, [pc, #128]	@ (10045b94 <UARTs_Init+0x15c>)
10045b12:	0019      	movs	r1, r3
10045b14:	2000      	movs	r0, #0
10045b16:	f001 f919 	bl	10046d4c <BSP_COM_Init>
10045b1a:	1e03      	subs	r3, r0, #0
10045b1c:	d001      	beq.n	10045b22 <UARTs_Init+0xea>
	{
		Error_Handler();
10045b1e:	f7fb fd2d 	bl	1004157c <Error_Handler>
//	}
//	if (HAL_USARTEx_DisableFifoMode(&husart1) != HAL_OK)
//	{
//		Error_Handler();
//	}
	HAL_NVIC_SetPriority(USART1_IRQn, 3, 1);
10045b22:	2201      	movs	r2, #1
10045b24:	2103      	movs	r1, #3
10045b26:	2008      	movs	r0, #8
10045b28:	f001 fbac 	bl	10047284 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
10045b2c:	2008      	movs	r0, #8
10045b2e:	f001 fbbe 	bl	100472ae <HAL_NVIC_EnableIRQ>
	husart1.Instance->CR1 |= (USART_CR1_RXNEIE_RXFNEIE_Msk | USART_CR1_TCIE_Msk);
10045b32:	4b16      	ldr	r3, [pc, #88]	@ (10045b8c <UARTs_Init+0x154>)
10045b34:	681b      	ldr	r3, [r3, #0]
10045b36:	681a      	ldr	r2, [r3, #0]
10045b38:	4b14      	ldr	r3, [pc, #80]	@ (10045b8c <UARTs_Init+0x154>)
10045b3a:	681b      	ldr	r3, [r3, #0]
10045b3c:	2160      	movs	r1, #96	@ 0x60
10045b3e:	430a      	orrs	r2, r1
10045b40:	601a      	str	r2, [r3, #0]

	USARTtx.tail = 0;
10045b42:	4a15      	ldr	r2, [pc, #84]	@ (10045b98 <UARTs_Init+0x160>)
10045b44:	2381      	movs	r3, #129	@ 0x81
10045b46:	009b      	lsls	r3, r3, #2
10045b48:	2100      	movs	r1, #0
10045b4a:	52d1      	strh	r1, [r2, r3]
	USARTtx.head = 0;
10045b4c:	4b12      	ldr	r3, [pc, #72]	@ (10045b98 <UARTs_Init+0x160>)
10045b4e:	4a13      	ldr	r2, [pc, #76]	@ (10045b9c <UARTs_Init+0x164>)
10045b50:	2100      	movs	r1, #0
10045b52:	5299      	strh	r1, [r3, r2]
	USARTtx.full = false;
10045b54:	4b10      	ldr	r3, [pc, #64]	@ (10045b98 <UARTs_Init+0x160>)
10045b56:	4a12      	ldr	r2, [pc, #72]	@ (10045ba0 <UARTs_Init+0x168>)
10045b58:	2100      	movs	r1, #0
10045b5a:	5499      	strb	r1, [r3, r2]

	USARTrx.tail = 0;
10045b5c:	4a11      	ldr	r2, [pc, #68]	@ (10045ba4 <UARTs_Init+0x16c>)
10045b5e:	2381      	movs	r3, #129	@ 0x81
10045b60:	009b      	lsls	r3, r3, #2
10045b62:	2100      	movs	r1, #0
10045b64:	52d1      	strh	r1, [r2, r3]
	USARTrx.head = 0;
10045b66:	4b0f      	ldr	r3, [pc, #60]	@ (10045ba4 <UARTs_Init+0x16c>)
10045b68:	4a0c      	ldr	r2, [pc, #48]	@ (10045b9c <UARTs_Init+0x164>)
10045b6a:	2100      	movs	r1, #0
10045b6c:	5299      	strh	r1, [r3, r2]
	USARTrx.full = false;
10045b6e:	4b0d      	ldr	r3, [pc, #52]	@ (10045ba4 <UARTs_Init+0x16c>)
10045b70:	4a0b      	ldr	r2, [pc, #44]	@ (10045ba0 <UARTs_Init+0x168>)
10045b72:	2100      	movs	r1, #0
10045b74:	5499      	strb	r1, [r3, r2]

//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_TXE);
//	__HAL_USART_ENABLE_IT(&husart1, UART_IT_RXNE);
	return 0;//not INIT_OK to have compatibility with the BLE trace function calls
10045b76:	2300      	movs	r3, #0
}
10045b78:	0018      	movs	r0, r3
10045b7a:	46bd      	mov	sp, r7
10045b7c:	bd80      	pop	{r7, pc}
10045b7e:	46c0      	nop			@ (mov r8, r8)
10045b80:	20002716 	.word	0x20002716
10045b84:	2000217c 	.word	0x2000217c
10045b88:	41005000 	.word	0x41005000
10045b8c:	20002248 	.word	0x20002248
10045b90:	41004000 	.word	0x41004000
10045b94:	200022a8 	.word	0x200022a8
10045b98:	200022b8 	.word	0x200022b8
10045b9c:	00000202 	.word	0x00000202
10045ba0:	00000206 	.word	0x00000206
10045ba4:	200024c0 	.word	0x200024c0

10045ba8 <LPUART_ReadRx>:
 * @function: UART_ReadRx()
 * @brief: reads one received byte from the lpuart
 * @param: none
 * @return: the character received, is 0x00 if no character to read
 */
char LPUART_ReadRx(void){
10045ba8:	b580      	push	{r7, lr}
10045baa:	b082      	sub	sp, #8
10045bac:	af00      	add	r7, sp, #0
	if(LPUARTrx.head != LPUARTrx.tail || LPUARTrx.full){
10045bae:	4b13      	ldr	r3, [pc, #76]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045bb0:	8c1a      	ldrh	r2, [r3, #32]
10045bb2:	4b12      	ldr	r3, [pc, #72]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045bb4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045bb6:	429a      	cmp	r2, r3
10045bb8:	d104      	bne.n	10045bc4 <LPUART_ReadRx+0x1c>
10045bba:	4b10      	ldr	r3, [pc, #64]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045bbc:	2224      	movs	r2, #36	@ 0x24
10045bbe:	5c9b      	ldrb	r3, [r3, r2]
10045bc0:	2b00      	cmp	r3, #0
10045bc2:	d016      	beq.n	10045bf2 <LPUART_ReadRx+0x4a>
		char data = LPUARTrx.data[LPUARTrx.tail];
10045bc4:	4b0d      	ldr	r3, [pc, #52]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045bc6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045bc8:	0019      	movs	r1, r3
10045bca:	1dfb      	adds	r3, r7, #7
10045bcc:	4a0b      	ldr	r2, [pc, #44]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045bce:	5c52      	ldrb	r2, [r2, r1]
10045bd0:	701a      	strb	r2, [r3, #0]
		LPUARTrx.tail++;
10045bd2:	4b0a      	ldr	r3, [pc, #40]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045bd4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045bd6:	3301      	adds	r3, #1
10045bd8:	b29a      	uxth	r2, r3
10045bda:	4b08      	ldr	r3, [pc, #32]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045bdc:	845a      	strh	r2, [r3, #34]	@ 0x22
		LPUARTrx.tail %= LPUARTCIRCBUFFSIZE;
10045bde:	4b07      	ldr	r3, [pc, #28]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045be0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045be2:	221f      	movs	r2, #31
10045be4:	4013      	ands	r3, r2
10045be6:	b29a      	uxth	r2, r3
10045be8:	4b04      	ldr	r3, [pc, #16]	@ (10045bfc <LPUART_ReadRx+0x54>)
10045bea:	845a      	strh	r2, [r3, #34]	@ 0x22
		return data;
10045bec:	1dfb      	adds	r3, r7, #7
10045bee:	781b      	ldrb	r3, [r3, #0]
10045bf0:	e000      	b.n	10045bf4 <LPUART_ReadRx+0x4c>
	} else {
		return UARTFAILED;
10045bf2:	2325      	movs	r3, #37	@ 0x25
	}

}
10045bf4:	0018      	movs	r0, r3
10045bf6:	46bd      	mov	sp, r7
10045bf8:	b002      	add	sp, #8
10045bfa:	bd80      	pop	{r7, pc}
10045bfc:	200026f0 	.word	0x200026f0

10045c00 <LPUART_WriteTx>:
 * @function: UART_WriteTx()
 * @brief: sends one byte through the lpuart
 * @param: none
 * @return: none
 */
char LPUART_WriteTx(char input){
10045c00:	b580      	push	{r7, lr}
10045c02:	b082      	sub	sp, #8
10045c04:	af00      	add	r7, sp, #0
10045c06:	0002      	movs	r2, r0
10045c08:	1dfb      	adds	r3, r7, #7
10045c0a:	701a      	strb	r2, [r3, #0]
	if(!LPUARTtx.full){
10045c0c:	4b1f      	ldr	r3, [pc, #124]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c0e:	2224      	movs	r2, #36	@ 0x24
10045c10:	5c9b      	ldrb	r3, [r3, r2]
10045c12:	2201      	movs	r2, #1
10045c14:	4053      	eors	r3, r2
10045c16:	b2db      	uxtb	r3, r3
10045c18:	2b00      	cmp	r3, #0
10045c1a:	d031      	beq.n	10045c80 <LPUART_WriteTx+0x80>
		if(LPUARTtx.head == LPUARTtx.tail && (hlpuart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
10045c1c:	4b1b      	ldr	r3, [pc, #108]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c1e:	8c1a      	ldrh	r2, [r3, #32]
10045c20:	4b1a      	ldr	r3, [pc, #104]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c22:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045c24:	429a      	cmp	r2, r3
10045c26:	d10b      	bne.n	10045c40 <LPUART_WriteTx+0x40>
10045c28:	4b19      	ldr	r3, [pc, #100]	@ (10045c90 <LPUART_WriteTx+0x90>)
10045c2a:	681b      	ldr	r3, [r3, #0]
10045c2c:	69db      	ldr	r3, [r3, #28]
10045c2e:	2280      	movs	r2, #128	@ 0x80
10045c30:	4013      	ands	r3, r2
10045c32:	d005      	beq.n	10045c40 <LPUART_WriteTx+0x40>
			hlpuart1.Instance->TDR = input;
10045c34:	4b16      	ldr	r3, [pc, #88]	@ (10045c90 <LPUART_WriteTx+0x90>)
10045c36:	681b      	ldr	r3, [r3, #0]
10045c38:	1dfa      	adds	r2, r7, #7
10045c3a:	7812      	ldrb	r2, [r2, #0]
10045c3c:	629a      	str	r2, [r3, #40]	@ 0x28
10045c3e:	e01d      	b.n	10045c7c <LPUART_WriteTx+0x7c>
		} else {
			LPUARTtx.data[LPUARTtx.head] = input;
10045c40:	4b12      	ldr	r3, [pc, #72]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c42:	8c1b      	ldrh	r3, [r3, #32]
10045c44:	0019      	movs	r1, r3
10045c46:	4b11      	ldr	r3, [pc, #68]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c48:	1dfa      	adds	r2, r7, #7
10045c4a:	7812      	ldrb	r2, [r2, #0]
10045c4c:	545a      	strb	r2, [r3, r1]
			LPUARTtx.head++;
10045c4e:	4b0f      	ldr	r3, [pc, #60]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c50:	8c1b      	ldrh	r3, [r3, #32]
10045c52:	3301      	adds	r3, #1
10045c54:	b29a      	uxth	r2, r3
10045c56:	4b0d      	ldr	r3, [pc, #52]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c58:	841a      	strh	r2, [r3, #32]
			LPUARTtx.head %= LPUARTCIRCBUFFSIZE;
10045c5a:	4b0c      	ldr	r3, [pc, #48]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c5c:	8c1b      	ldrh	r3, [r3, #32]
10045c5e:	221f      	movs	r2, #31
10045c60:	4013      	ands	r3, r2
10045c62:	b29a      	uxth	r2, r3
10045c64:	4b09      	ldr	r3, [pc, #36]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c66:	841a      	strh	r2, [r3, #32]
			if(LPUARTtx.head == LPUARTtx.tail){
10045c68:	4b08      	ldr	r3, [pc, #32]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c6a:	8c1a      	ldrh	r2, [r3, #32]
10045c6c:	4b07      	ldr	r3, [pc, #28]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
10045c70:	429a      	cmp	r2, r3
10045c72:	d103      	bne.n	10045c7c <LPUART_WriteTx+0x7c>
				LPUARTtx.full = true;
10045c74:	4b05      	ldr	r3, [pc, #20]	@ (10045c8c <LPUART_WriteTx+0x8c>)
10045c76:	2224      	movs	r2, #36	@ 0x24
10045c78:	2101      	movs	r1, #1
10045c7a:	5499      	strb	r1, [r3, r2]
			}
		}
		return UARTSUCCESS;
10045c7c:	2300      	movs	r3, #0
10045c7e:	e000      	b.n	10045c82 <LPUART_WriteTx+0x82>
	} else {
		return UARTFAILED;
10045c80:	2325      	movs	r3, #37	@ 0x25
	}
}
10045c82:	0018      	movs	r0, r3
10045c84:	46bd      	mov	sp, r7
10045c86:	b002      	add	sp, #8
10045c88:	bd80      	pop	{r7, pc}
10045c8a:	46c0      	nop			@ (mov r8, r8)
10045c8c:	200026c8 	.word	0x200026c8
10045c90:	2000217c 	.word	0x2000217c

10045c94 <USART_ReadRx>:
 * @function: USART_ReadRx()
 * @brief: reads one received byte from the usart
 * @param: none
 * @return: the character received, 0x25 (NAK) if no character to read
 */
char USART_ReadRx(void){
10045c94:	b580      	push	{r7, lr}
10045c96:	b082      	sub	sp, #8
10045c98:	af00      	add	r7, sp, #0
	if(USARTrx.head != USARTrx.tail || USARTrx.full){
10045c9a:	4b1b      	ldr	r3, [pc, #108]	@ (10045d08 <USART_ReadRx+0x74>)
10045c9c:	4a1b      	ldr	r2, [pc, #108]	@ (10045d0c <USART_ReadRx+0x78>)
10045c9e:	5a9a      	ldrh	r2, [r3, r2]
10045ca0:	4919      	ldr	r1, [pc, #100]	@ (10045d08 <USART_ReadRx+0x74>)
10045ca2:	2381      	movs	r3, #129	@ 0x81
10045ca4:	009b      	lsls	r3, r3, #2
10045ca6:	5acb      	ldrh	r3, [r1, r3]
10045ca8:	429a      	cmp	r2, r3
10045caa:	d104      	bne.n	10045cb6 <USART_ReadRx+0x22>
10045cac:	4b16      	ldr	r3, [pc, #88]	@ (10045d08 <USART_ReadRx+0x74>)
10045cae:	4a18      	ldr	r2, [pc, #96]	@ (10045d10 <USART_ReadRx+0x7c>)
10045cb0:	5c9b      	ldrb	r3, [r3, r2]
10045cb2:	2b00      	cmp	r3, #0
10045cb4:	d023      	beq.n	10045cfe <USART_ReadRx+0x6a>
		char data = USARTrx.data[USARTrx.tail];
10045cb6:	4a14      	ldr	r2, [pc, #80]	@ (10045d08 <USART_ReadRx+0x74>)
10045cb8:	2381      	movs	r3, #129	@ 0x81
10045cba:	009b      	lsls	r3, r3, #2
10045cbc:	5ad3      	ldrh	r3, [r2, r3]
10045cbe:	0019      	movs	r1, r3
10045cc0:	1dfb      	adds	r3, r7, #7
10045cc2:	4a11      	ldr	r2, [pc, #68]	@ (10045d08 <USART_ReadRx+0x74>)
10045cc4:	5c52      	ldrb	r2, [r2, r1]
10045cc6:	701a      	strb	r2, [r3, #0]
		USARTrx.tail++;
10045cc8:	4a0f      	ldr	r2, [pc, #60]	@ (10045d08 <USART_ReadRx+0x74>)
10045cca:	2381      	movs	r3, #129	@ 0x81
10045ccc:	009b      	lsls	r3, r3, #2
10045cce:	5ad3      	ldrh	r3, [r2, r3]
10045cd0:	3301      	adds	r3, #1
10045cd2:	b299      	uxth	r1, r3
10045cd4:	4a0c      	ldr	r2, [pc, #48]	@ (10045d08 <USART_ReadRx+0x74>)
10045cd6:	2381      	movs	r3, #129	@ 0x81
10045cd8:	009b      	lsls	r3, r3, #2
10045cda:	52d1      	strh	r1, [r2, r3]
		USARTrx.tail %= UARTCIRCBUFFSIZE;
10045cdc:	4a0a      	ldr	r2, [pc, #40]	@ (10045d08 <USART_ReadRx+0x74>)
10045cde:	2381      	movs	r3, #129	@ 0x81
10045ce0:	009b      	lsls	r3, r3, #2
10045ce2:	5ad3      	ldrh	r3, [r2, r3]
10045ce4:	490b      	ldr	r1, [pc, #44]	@ (10045d14 <USART_ReadRx+0x80>)
10045ce6:	0018      	movs	r0, r3
10045ce8:	f7fa fb30 	bl	1004034c <__aeabi_uidivmod>
10045cec:	000b      	movs	r3, r1
10045cee:	b299      	uxth	r1, r3
10045cf0:	4a05      	ldr	r2, [pc, #20]	@ (10045d08 <USART_ReadRx+0x74>)
10045cf2:	2381      	movs	r3, #129	@ 0x81
10045cf4:	009b      	lsls	r3, r3, #2
10045cf6:	52d1      	strh	r1, [r2, r3]
		return data;
10045cf8:	1dfb      	adds	r3, r7, #7
10045cfa:	781b      	ldrb	r3, [r3, #0]
10045cfc:	e000      	b.n	10045d00 <USART_ReadRx+0x6c>
	} else {
		return UARTFAILED;
10045cfe:	2325      	movs	r3, #37	@ 0x25
	}
}
10045d00:	0018      	movs	r0, r3
10045d02:	46bd      	mov	sp, r7
10045d04:	b002      	add	sp, #8
10045d06:	bd80      	pop	{r7, pc}
10045d08:	200024c0 	.word	0x200024c0
10045d0c:	00000202 	.word	0x00000202
10045d10:	00000206 	.word	0x00000206
10045d14:	00000201 	.word	0x00000201

10045d18 <USART_WriteTx>:
 * @function: USART_WriteTx()
 * @brief: sends one byte through the usart
 * @param: input, character to be sent
 * @return: status, 0x00 if success,  0x25 (NAK) if failed,
 */
char USART_WriteTx(char input){
10045d18:	b580      	push	{r7, lr}
10045d1a:	b082      	sub	sp, #8
10045d1c:	af00      	add	r7, sp, #0
10045d1e:	0002      	movs	r2, r0
10045d20:	1dfb      	adds	r3, r7, #7
10045d22:	701a      	strb	r2, [r3, #0]
	if (APP_BLE_Get_Server_Connection_Status() == APP_BLE_CONNECTED_SERVER){
10045d24:	f00c f900 	bl	10051f28 <APP_BLE_Get_Server_Connection_Status>
10045d28:	0003      	movs	r3, r0
10045d2a:	2b02      	cmp	r3, #2
10045d2c:	d104      	bne.n	10045d38 <USART_WriteTx+0x20>
		BLUETOOTH_WriteBuffer(input);
10045d2e:	1dfb      	adds	r3, r7, #7
10045d30:	781b      	ldrb	r3, [r3, #0]
10045d32:	0018      	movs	r0, r3
10045d34:	f7fb fae0 	bl	100412f8 <BLUETOOTH_WriteBuffer>
	}
	if(!USARTtx.full){
10045d38:	4b27      	ldr	r3, [pc, #156]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045d3a:	4a28      	ldr	r2, [pc, #160]	@ (10045ddc <USART_WriteTx+0xc4>)
10045d3c:	5c9b      	ldrb	r3, [r3, r2]
10045d3e:	2201      	movs	r2, #1
10045d40:	4053      	eors	r3, r2
10045d42:	b2db      	uxtb	r3, r3
10045d44:	2b00      	cmp	r3, #0
10045d46:	d042      	beq.n	10045dce <USART_WriteTx+0xb6>
		if(USARTtx.head == USARTtx.tail && (husart1.Instance->ISR & USART_ISR_TXE_TXFNF_Msk)){
10045d48:	4b23      	ldr	r3, [pc, #140]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045d4a:	4a25      	ldr	r2, [pc, #148]	@ (10045de0 <USART_WriteTx+0xc8>)
10045d4c:	5a9a      	ldrh	r2, [r3, r2]
10045d4e:	4922      	ldr	r1, [pc, #136]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045d50:	2381      	movs	r3, #129	@ 0x81
10045d52:	009b      	lsls	r3, r3, #2
10045d54:	5acb      	ldrh	r3, [r1, r3]
10045d56:	429a      	cmp	r2, r3
10045d58:	d10e      	bne.n	10045d78 <USART_WriteTx+0x60>
10045d5a:	4b22      	ldr	r3, [pc, #136]	@ (10045de4 <USART_WriteTx+0xcc>)
10045d5c:	681b      	ldr	r3, [r3, #0]
10045d5e:	69db      	ldr	r3, [r3, #28]
10045d60:	2280      	movs	r2, #128	@ 0x80
10045d62:	4013      	ands	r3, r2
10045d64:	d008      	beq.n	10045d78 <USART_WriteTx+0x60>
			I2CUARTtoUSART(1);//delay to have pin ready for transmission by next line
10045d66:	2001      	movs	r0, #1
10045d68:	f7fe f9ce 	bl	10044108 <I2CUARTtoUSART>
			husart1.Instance->TDR = input;
10045d6c:	4b1d      	ldr	r3, [pc, #116]	@ (10045de4 <USART_WriteTx+0xcc>)
10045d6e:	681b      	ldr	r3, [r3, #0]
10045d70:	1dfa      	adds	r2, r7, #7
10045d72:	7812      	ldrb	r2, [r2, #0]
10045d74:	629a      	str	r2, [r3, #40]	@ 0x28
10045d76:	e028      	b.n	10045dca <USART_WriteTx+0xb2>
		} else {
			USARTtx.data[USARTtx.head] = input;
10045d78:	4b17      	ldr	r3, [pc, #92]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045d7a:	4a19      	ldr	r2, [pc, #100]	@ (10045de0 <USART_WriteTx+0xc8>)
10045d7c:	5a9b      	ldrh	r3, [r3, r2]
10045d7e:	0019      	movs	r1, r3
10045d80:	4b15      	ldr	r3, [pc, #84]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045d82:	1dfa      	adds	r2, r7, #7
10045d84:	7812      	ldrb	r2, [r2, #0]
10045d86:	545a      	strb	r2, [r3, r1]
			USARTtx.head++;
10045d88:	4b13      	ldr	r3, [pc, #76]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045d8a:	4a15      	ldr	r2, [pc, #84]	@ (10045de0 <USART_WriteTx+0xc8>)
10045d8c:	5a9b      	ldrh	r3, [r3, r2]
10045d8e:	3301      	adds	r3, #1
10045d90:	b299      	uxth	r1, r3
10045d92:	4b11      	ldr	r3, [pc, #68]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045d94:	4a12      	ldr	r2, [pc, #72]	@ (10045de0 <USART_WriteTx+0xc8>)
10045d96:	5299      	strh	r1, [r3, r2]
			USARTtx.head %= UARTCIRCBUFFSIZE;
10045d98:	4b0f      	ldr	r3, [pc, #60]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045d9a:	4a11      	ldr	r2, [pc, #68]	@ (10045de0 <USART_WriteTx+0xc8>)
10045d9c:	5a9b      	ldrh	r3, [r3, r2]
10045d9e:	4912      	ldr	r1, [pc, #72]	@ (10045de8 <USART_WriteTx+0xd0>)
10045da0:	0018      	movs	r0, r3
10045da2:	f7fa fad3 	bl	1004034c <__aeabi_uidivmod>
10045da6:	000b      	movs	r3, r1
10045da8:	b299      	uxth	r1, r3
10045daa:	4b0b      	ldr	r3, [pc, #44]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045dac:	4a0c      	ldr	r2, [pc, #48]	@ (10045de0 <USART_WriteTx+0xc8>)
10045dae:	5299      	strh	r1, [r3, r2]
			if(USARTtx.head == USARTtx.tail){
10045db0:	4b09      	ldr	r3, [pc, #36]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045db2:	4a0b      	ldr	r2, [pc, #44]	@ (10045de0 <USART_WriteTx+0xc8>)
10045db4:	5a9a      	ldrh	r2, [r3, r2]
10045db6:	4908      	ldr	r1, [pc, #32]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045db8:	2381      	movs	r3, #129	@ 0x81
10045dba:	009b      	lsls	r3, r3, #2
10045dbc:	5acb      	ldrh	r3, [r1, r3]
10045dbe:	429a      	cmp	r2, r3
10045dc0:	d103      	bne.n	10045dca <USART_WriteTx+0xb2>
				USARTtx.full = true;
10045dc2:	4b05      	ldr	r3, [pc, #20]	@ (10045dd8 <USART_WriteTx+0xc0>)
10045dc4:	4a05      	ldr	r2, [pc, #20]	@ (10045ddc <USART_WriteTx+0xc4>)
10045dc6:	2101      	movs	r1, #1
10045dc8:	5499      	strb	r1, [r3, r2]
			}
		}
		return UARTSUCCESS;
10045dca:	2300      	movs	r3, #0
10045dcc:	e000      	b.n	10045dd0 <USART_WriteTx+0xb8>
	} else {
		return UARTFAILED;
10045dce:	2325      	movs	r3, #37	@ 0x25
	}
}
10045dd0:	0018      	movs	r0, r3
10045dd2:	46bd      	mov	sp, r7
10045dd4:	b002      	add	sp, #8
10045dd6:	bd80      	pop	{r7, pc}
10045dd8:	200022b8 	.word	0x200022b8
10045ddc:	00000206 	.word	0x00000206
10045de0:	00000202 	.word	0x00000202
10045de4:	20002248 	.word	0x20002248
10045de8:	00000201 	.word	0x00000201

10045dec <USART_TxEmpty>:
 * @function: USART_TxEmpty()
 * @brief: returns if the Tx  buffer is empty
 * @param: none
 * @return: status, 0x00 if not empty,  0x01 if empty,
 */
uint8_t USART_TxEmpty(void){
10045dec:	b580      	push	{r7, lr}
10045dee:	af00      	add	r7, sp, #0
	return (USARTtx.head == USARTtx.tail) && !USARTtx.full;
10045df0:	4b0b      	ldr	r3, [pc, #44]	@ (10045e20 <USART_TxEmpty+0x34>)
10045df2:	4a0c      	ldr	r2, [pc, #48]	@ (10045e24 <USART_TxEmpty+0x38>)
10045df4:	5a9a      	ldrh	r2, [r3, r2]
10045df6:	490a      	ldr	r1, [pc, #40]	@ (10045e20 <USART_TxEmpty+0x34>)
10045df8:	2381      	movs	r3, #129	@ 0x81
10045dfa:	009b      	lsls	r3, r3, #2
10045dfc:	5acb      	ldrh	r3, [r1, r3]
10045dfe:	429a      	cmp	r2, r3
10045e00:	d109      	bne.n	10045e16 <USART_TxEmpty+0x2a>
10045e02:	4b07      	ldr	r3, [pc, #28]	@ (10045e20 <USART_TxEmpty+0x34>)
10045e04:	4a08      	ldr	r2, [pc, #32]	@ (10045e28 <USART_TxEmpty+0x3c>)
10045e06:	5c9b      	ldrb	r3, [r3, r2]
10045e08:	2201      	movs	r2, #1
10045e0a:	4053      	eors	r3, r2
10045e0c:	b2db      	uxtb	r3, r3
10045e0e:	2b00      	cmp	r3, #0
10045e10:	d001      	beq.n	10045e16 <USART_TxEmpty+0x2a>
10045e12:	2301      	movs	r3, #1
10045e14:	e000      	b.n	10045e18 <USART_TxEmpty+0x2c>
10045e16:	2300      	movs	r3, #0
10045e18:	b2db      	uxtb	r3, r3
}
10045e1a:	0018      	movs	r0, r3
10045e1c:	46bd      	mov	sp, r7
10045e1e:	bd80      	pop	{r7, pc}
10045e20:	200022b8 	.word	0x200022b8
10045e24:	00000202 	.word	0x00000202
10045e28:	00000206 	.word	0x00000206

10045e2c <MX_APPE_Init>:
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/

uint32_t MX_APPE_Init(void *p_param)
{
10045e2c:	b580      	push	{r7, lr}
10045e2e:	b082      	sub	sp, #8
10045e30:	af00      	add	r7, sp, #0
10045e32:	6078      	str	r0, [r7, #4]

  UNUSED(p_param);

  APP_DEBUG_SIGNAL_SET(APP_APPE_INIT);
10045e34:	2000      	movs	r0, #0
10045e36:	f00e fa85 	bl	10054344 <APP_DEBUG_SIGNAL_SET>

  /* USER CODE BEGIN APPE_Init_1 */

  /* USER CODE END APPE_Init_1 */

  if (HW_RNG_Init() != HW_RNG_SUCCESS)
10045e3a:	f009 fc9b 	bl	1004f774 <HW_RNG_Init>
10045e3e:	1e03      	subs	r3, r0, #0
10045e40:	d001      	beq.n	10045e46 <MX_APPE_Init+0x1a>
  {
    Error_Handler();
10045e42:	f7fb fb9b 	bl	1004157c <Error_Handler>
  }

  /* Init the AES block */
  HW_AES_Init();
10045e46:	f009 fb39 	bl	1004f4bc <HW_AES_Init>
  HW_PKA_Init();
10045e4a:	f009 fc2b 	bl	1004f6a4 <HW_PKA_Init>
  APP_BLE_Init();
10045e4e:	f00b fea5 	bl	10051b9c <APP_BLE_Init>
  UTIL_LPM_Init();
#endif /* CFG_LPM_SUPPORTED */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  APP_DEBUG_SIGNAL_RESET(APP_APPE_INIT);
10045e52:	2000      	movs	r0, #0
10045e54:	f00e fa80 	bl	10054358 <APP_DEBUG_SIGNAL_RESET>
  return BLE_STATUS_SUCCESS;
10045e58:	2300      	movs	r3, #0
}
10045e5a:	0018      	movs	r0, r3
10045e5c:	46bd      	mov	sp, r7
10045e5e:	b002      	add	sp, #8
10045e60:	bd80      	pop	{r7, pc}

10045e62 <MX_APPE_Process>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void MX_APPE_Process(void)
{
10045e62:	b580      	push	{r7, lr}
10045e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
10045e66:	2301      	movs	r3, #1
10045e68:	425b      	negs	r3, r3
10045e6a:	0018      	movs	r0, r3
10045e6c:	f00e fa84 	bl	10054378 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
10045e70:	46c0      	nop			@ (mov r8, r8)
10045e72:	46bd      	mov	sp, r7
10045e74:	bd80      	pop	{r7, pc}

10045e76 <UTIL_SEQ_PreIdle>:
void UTIL_SEQ_PreIdle( void )
{
10045e76:	b580      	push	{r7, lr}
10045e78:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  /* USER CODE BEGIN UTIL_SEQ_PREIDLE */

  /* USER CODE END UTIL_SEQ_PREIDLE */
#endif /* CFG_LPM_SUPPORTED */
  return;
10045e7a:	46c0      	nop			@ (mov r8, r8)
}
10045e7c:	46bd      	mov	sp, r7
10045e7e:	bd80      	pop	{r7, pc}

10045e80 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
10045e80:	b580      	push	{r7, lr}
10045e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_IDLE_END */

  /* USER CODE END UTIL_SEQ_IDLE_END */
  }
#endif /* CFG_LPM_SUPPORTED */
}
10045e84:	46c0      	nop			@ (mov r8, r8)
10045e86:	46bd      	mov	sp, r7
10045e88:	bd80      	pop	{r7, pc}

10045e8a <LL_RADIO_TIMER_GetAbsoluteTime>:
  * @brief  Get the Absolute Time of the wakeup timer (Granularity unit is 16 x slow clock period).
  * @param  WAKEUPx Radio Timer instance
  * @retval Absolute Time of Wakeup Timer
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP_TypeDef *WAKEUPx)
{
10045e8a:	b580      	push	{r7, lr}
10045e8c:	b082      	sub	sp, #8
10045e8e:	af00      	add	r7, sp, #0
10045e90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
10045e92:	687b      	ldr	r3, [r7, #4]
10045e94:	691b      	ldr	r3, [r3, #16]
}
10045e96:	0018      	movs	r0, r3
10045e98:	46bd      	mov	sp, r7
10045e9a:	b002      	add	sp, #8
10045e9c:	bd80      	pop	{r7, pc}
	...

10045ea0 <LL_APB2_GRP1_EnableClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
10045ea0:	b580      	push	{r7, lr}
10045ea2:	b084      	sub	sp, #16
10045ea4:	af00      	add	r7, sp, #0
10045ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
10045ea8:	4b07      	ldr	r3, [pc, #28]	@ (10045ec8 <LL_APB2_GRP1_EnableClock+0x28>)
10045eaa:	6e19      	ldr	r1, [r3, #96]	@ 0x60
10045eac:	4b06      	ldr	r3, [pc, #24]	@ (10045ec8 <LL_APB2_GRP1_EnableClock+0x28>)
10045eae:	687a      	ldr	r2, [r7, #4]
10045eb0:	430a      	orrs	r2, r1
10045eb2:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
10045eb4:	4b04      	ldr	r3, [pc, #16]	@ (10045ec8 <LL_APB2_GRP1_EnableClock+0x28>)
10045eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10045eb8:	687a      	ldr	r2, [r7, #4]
10045eba:	4013      	ands	r3, r2
10045ebc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10045ebe:	68fb      	ldr	r3, [r7, #12]
}
10045ec0:	46c0      	nop			@ (mov r8, r8)
10045ec2:	46bd      	mov	sp, r7
10045ec4:	b004      	add	sp, #16
10045ec6:	bd80      	pop	{r7, pc}
10045ec8:	48400000 	.word	0x48400000

10045ecc <LL_APB2_GRP1_IsEnabledClock>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval uint32_t
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE uint32_t LL_APB2_GRP1_IsEnabledClock(uint32_t Periphs)
{
10045ecc:	b580      	push	{r7, lr}
10045ece:	b082      	sub	sp, #8
10045ed0:	af00      	add	r7, sp, #0
10045ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
10045ed4:	4b06      	ldr	r3, [pc, #24]	@ (10045ef0 <LL_APB2_GRP1_IsEnabledClock+0x24>)
10045ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10045ed8:	687a      	ldr	r2, [r7, #4]
10045eda:	4013      	ands	r3, r2
10045edc:	687a      	ldr	r2, [r7, #4]
10045ede:	429a      	cmp	r2, r3
10045ee0:	d101      	bne.n	10045ee6 <LL_APB2_GRP1_IsEnabledClock+0x1a>
10045ee2:	2301      	movs	r3, #1
10045ee4:	e000      	b.n	10045ee8 <LL_APB2_GRP1_IsEnabledClock+0x1c>
10045ee6:	2300      	movs	r3, #0
}
10045ee8:	0018      	movs	r0, r3
10045eea:	46bd      	mov	sp, r7
10045eec:	b002      	add	sp, #8
10045eee:	bd80      	pop	{r7, pc}
10045ef0:	48400000 	.word	0x48400000

10045ef4 <LL_APB2_GRP1_ForceReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
10045ef4:	b580      	push	{r7, lr}
10045ef6:	b082      	sub	sp, #8
10045ef8:	af00      	add	r7, sp, #0
10045efa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10045efc:	4b04      	ldr	r3, [pc, #16]	@ (10045f10 <LL_APB2_GRP1_ForceReset+0x1c>)
10045efe:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10045f00:	4b03      	ldr	r3, [pc, #12]	@ (10045f10 <LL_APB2_GRP1_ForceReset+0x1c>)
10045f02:	687a      	ldr	r2, [r7, #4]
10045f04:	430a      	orrs	r2, r1
10045f06:	641a      	str	r2, [r3, #64]	@ 0x40
}
10045f08:	46c0      	nop			@ (mov r8, r8)
10045f0a:	46bd      	mov	sp, r7
10045f0c:	b002      	add	sp, #8
10045f0e:	bd80      	pop	{r7, pc}
10045f10:	48400000 	.word	0x48400000

10045f14 <LL_APB2_GRP1_ReleaseReset>:
  * @arg LL_APB2_GRP1_PERIPH_MRBLE
  * @retval None
  * @note   LL_APB2_GRP1_PERIPH_MRBLE
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
10045f14:	b580      	push	{r7, lr}
10045f16:	b082      	sub	sp, #8
10045f18:	af00      	add	r7, sp, #0
10045f1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10045f1c:	4b05      	ldr	r3, [pc, #20]	@ (10045f34 <LL_APB2_GRP1_ReleaseReset+0x20>)
10045f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10045f20:	687b      	ldr	r3, [r7, #4]
10045f22:	43d9      	mvns	r1, r3
10045f24:	4b03      	ldr	r3, [pc, #12]	@ (10045f34 <LL_APB2_GRP1_ReleaseReset+0x20>)
10045f26:	400a      	ands	r2, r1
10045f28:	641a      	str	r2, [r3, #64]	@ 0x40
}
10045f2a:	46c0      	nop			@ (mov r8, r8)
10045f2c:	46bd      	mov	sp, r7
10045f2e:	b002      	add	sp, #8
10045f30:	bd80      	pop	{r7, pc}
10045f32:	46c0      	nop			@ (mov r8, r8)
10045f34:	48400000 	.word	0x48400000

10045f38 <main>:
 * @author Caitlin Bonesio
 *
 */
#include "FLASH.h"
int main(void)
{
10045f38:	b580      	push	{r7, lr}
10045f3a:	b086      	sub	sp, #24
10045f3c:	af00      	add	r7, sp, #0

	//MCU Configuration--------------------------------------------------------
	if( BOARD_Init() != INIT_OK){
10045f3e:	f7fb faf3 	bl	10041528 <BOARD_Init>
10045f42:	0003      	movs	r3, r0
10045f44:	2b01      	cmp	r3, #1
10045f46:	d001      	beq.n	10045f4c <main+0x14>
		BOARD_CrashHandler();
10045f48:	f7fb fb12 	bl	10041570 <BOARD_CrashHandler>
	}

	MX_RADIO_Init();
10045f4c:	f000 f89a 	bl	10046084 <MX_RADIO_Init>
	MX_RADIO_TIMER_Init();
10045f50:	f000 f8b6 	bl	100460c0 <MX_RADIO_TIMER_Init>
	MX_RNG_Init();
10045f54:	f000 f8ea 	bl	1004612c <MX_RNG_Init>
	MX_PKA_Init();
10045f58:	f000 f880 	bl	1004605c <MX_PKA_Init>
	//Initialize BLE middleware
	MX_APPE_Init(NULL);
10045f5c:	2000      	movs	r0, #0
10045f5e:	f7ff ff65 	bl	10045e2c <MX_APPE_Init>


	BLUETOOTH_BufferInit();
10045f62:	f7fb f9b1 	bl	100412c8 <BLUETOOTH_BufferInit>
	// Initialize all configured peripherals
	UARTs_Init();
10045f66:	f7ff fd67 	bl	10045a38 <UARTs_Init>
	//Initialize all modules
	for(int i = 0; i < EVENTLISTSIZE; i++){
10045f6a:	2300      	movs	r3, #0
10045f6c:	617b      	str	r3, [r7, #20]
10045f6e:	e013      	b.n	10045f98 <main+0x60>
		EventQueues[i] = FIFO_Create();
10045f70:	f7fd fc60 	bl	10043834 <FIFO_Create>
10045f74:	0001      	movs	r1, r0
10045f76:	4b35      	ldr	r3, [pc, #212]	@ (1004604c <main+0x114>)
10045f78:	697a      	ldr	r2, [r7, #20]
10045f7a:	0092      	lsls	r2, r2, #2
10045f7c:	50d1      	str	r1, [r2, r3]
		if ((*InitList[i])(EventQueues[i]) == EVENT_ERROR){
10045f7e:	4b34      	ldr	r3, [pc, #208]	@ (10046050 <main+0x118>)
10045f80:	697a      	ldr	r2, [r7, #20]
10045f82:	0092      	lsls	r2, r2, #2
10045f84:	58d3      	ldr	r3, [r2, r3]
10045f86:	4a31      	ldr	r2, [pc, #196]	@ (1004604c <main+0x114>)
10045f88:	6979      	ldr	r1, [r7, #20]
10045f8a:	0089      	lsls	r1, r1, #2
10045f8c:	588a      	ldr	r2, [r1, r2]
10045f8e:	0010      	movs	r0, r2
10045f90:	4798      	blx	r3
	for(int i = 0; i < EVENTLISTSIZE; i++){
10045f92:	697b      	ldr	r3, [r7, #20]
10045f94:	3301      	adds	r3, #1
10045f96:	617b      	str	r3, [r7, #20]
10045f98:	697b      	ldr	r3, [r7, #20]
10045f9a:	2b03      	cmp	r3, #3
10045f9c:	dde8      	ble.n	10045f70 <main+0x38>
			return 0;//We've crashed
		}
	}
	while(1){
		//run all module event checkers
		for(int i = 0; i < EVENTLISTSIZE; i++){
10045f9e:	2300      	movs	r3, #0
10045fa0:	613b      	str	r3, [r7, #16]
10045fa2:	e012      	b.n	10045fca <main+0x92>
			//collect updates from the updaters
			if (((*UpdateList[i])()).status == EVENT_ERROR){
10045fa4:	4b2b      	ldr	r3, [pc, #172]	@ (10046054 <main+0x11c>)
10045fa6:	693a      	ldr	r2, [r7, #16]
10045fa8:	0092      	lsls	r2, r2, #2
10045faa:	58d3      	ldr	r3, [r2, r3]
10045fac:	4798      	blx	r3
10045fae:	0003      	movs	r3, r0
10045fb0:	001a      	movs	r2, r3
10045fb2:	1d3b      	adds	r3, r7, #4
10045fb4:	601a      	str	r2, [r3, #0]
10045fb6:	1d3b      	adds	r3, r7, #4
10045fb8:	781b      	ldrb	r3, [r3, #0]
10045fba:	b25b      	sxtb	r3, r3
10045fbc:	3301      	adds	r3, #1
10045fbe:	d101      	bne.n	10045fc4 <main+0x8c>
				BOARD_CrashHandler();//We've crashed
10045fc0:	f7fb fad6 	bl	10041570 <BOARD_CrashHandler>
		for(int i = 0; i < EVENTLISTSIZE; i++){
10045fc4:	693b      	ldr	r3, [r7, #16]
10045fc6:	3301      	adds	r3, #1
10045fc8:	613b      	str	r3, [r7, #16]
10045fca:	693b      	ldr	r3, [r7, #16]
10045fcc:	2b03      	cmp	r3, #3
10045fce:	dde9      	ble.n	10045fa4 <main+0x6c>
			}
		}
		uint8_t done = 0;
10045fd0:	230f      	movs	r3, #15
10045fd2:	18fb      	adds	r3, r7, r3
10045fd4:	2200      	movs	r2, #0
10045fd6:	701a      	strb	r2, [r3, #0]
		while(!done){
10045fd8:	e030      	b.n	1004603c <main+0x104>
			//run all module event handlers
			done = 1;//assume we're done
10045fda:	230f      	movs	r3, #15
10045fdc:	18fb      	adds	r3, r7, r3
10045fde:	2201      	movs	r2, #1
10045fe0:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < EVENTLISTSIZE; i++){
10045fe2:	2300      	movs	r3, #0
10045fe4:	60bb      	str	r3, [r7, #8]
10045fe6:	e026      	b.n	10046036 <main+0xfe>
				Event_t event = FIFO_Dequeue(EventQueues[i]);
10045fe8:	4b18      	ldr	r3, [pc, #96]	@ (1004604c <main+0x114>)
10045fea:	68ba      	ldr	r2, [r7, #8]
10045fec:	0092      	lsls	r2, r2, #2
10045fee:	58d3      	ldr	r3, [r2, r3]
10045ff0:	0018      	movs	r0, r3
10045ff2:	f7fd fc70 	bl	100438d6 <FIFO_Dequeue>
10045ff6:	0003      	movs	r3, r0
10045ff8:	001a      	movs	r2, r3
10045ffa:	003b      	movs	r3, r7
10045ffc:	601a      	str	r2, [r3, #0]
				if(FIFO_GetSize(EventQueues[i]) != 0){
10045ffe:	4b13      	ldr	r3, [pc, #76]	@ (1004604c <main+0x114>)
10046000:	68ba      	ldr	r2, [r7, #8]
10046002:	0092      	lsls	r2, r2, #2
10046004:	58d3      	ldr	r3, [r2, r3]
10046006:	0018      	movs	r0, r3
10046008:	f7fd fcb7 	bl	1004397a <FIFO_GetSize>
1004600c:	1e03      	subs	r3, r0, #0
1004600e:	d003      	beq.n	10046018 <main+0xe0>
					done = 0;//if any queue is not empty, we are not done
10046010:	230f      	movs	r3, #15
10046012:	18fb      	adds	r3, r7, r3
10046014:	2200      	movs	r2, #0
10046016:	701a      	strb	r2, [r3, #0]
				}
				if(event.status != EVENT_NONE){//If there is an update
10046018:	003b      	movs	r3, r7
1004601a:	781b      	ldrb	r3, [r3, #0]
1004601c:	b25b      	sxtb	r3, r3
1004601e:	2b00      	cmp	r3, #0
10046020:	d006      	beq.n	10046030 <main+0xf8>
					if ((*HandlerList[i])(event) == EVENT_ERROR){//pass the updates to the handlers
10046022:	4b0d      	ldr	r3, [pc, #52]	@ (10046058 <main+0x120>)
10046024:	68ba      	ldr	r2, [r7, #8]
10046026:	0092      	lsls	r2, r2, #2
10046028:	58d2      	ldr	r2, [r2, r3]
1004602a:	003b      	movs	r3, r7
1004602c:	6818      	ldr	r0, [r3, #0]
1004602e:	4790      	blx	r2
			for(int i = 0; i < EVENTLISTSIZE; i++){
10046030:	68bb      	ldr	r3, [r7, #8]
10046032:	3301      	adds	r3, #1
10046034:	60bb      	str	r3, [r7, #8]
10046036:	68bb      	ldr	r3, [r7, #8]
10046038:	2b03      	cmp	r3, #3
1004603a:	ddd5      	ble.n	10045fe8 <main+0xb0>
		while(!done){
1004603c:	230f      	movs	r3, #15
1004603e:	18fb      	adds	r3, r7, r3
10046040:	781b      	ldrb	r3, [r3, #0]
10046042:	2b00      	cmp	r3, #0
10046044:	d0c9      	beq.n	10045fda <main+0xa2>
					}
				}
			}
		}
		//Run Bluetooth Middleware
	    MX_APPE_Process();
10046046:	f7ff ff0c 	bl	10045e62 <MX_APPE_Process>
	while(1){
1004604a:	e7a8      	b.n	10045f9e <main+0x66>
1004604c:	20002718 	.word	0x20002718
10046050:	20002c8c 	.word	0x20002c8c
10046054:	20002c9c 	.word	0x20002c9c
10046058:	20002cac 	.word	0x20002cac

1004605c <MX_PKA_Init>:




static void MX_PKA_Init(void)
{
1004605c:	b580      	push	{r7, lr}
1004605e:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
10046060:	4b06      	ldr	r3, [pc, #24]	@ (1004607c <MX_PKA_Init+0x20>)
10046062:	4a07      	ldr	r2, [pc, #28]	@ (10046080 <MX_PKA_Init+0x24>)
10046064:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
10046066:	4b05      	ldr	r3, [pc, #20]	@ (1004607c <MX_PKA_Init+0x20>)
10046068:	0018      	movs	r0, r3
1004606a:	f003 fda5 	bl	10049bb8 <HAL_PKA_Init>
1004606e:	1e03      	subs	r3, r0, #0
10046070:	d001      	beq.n	10046076 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
10046072:	f7fb fa83 	bl	1004157c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
10046076:	46c0      	nop			@ (mov r8, r8)
10046078:	46bd      	mov	sp, r7
1004607a:	bd80      	pop	{r7, pc}
1004607c:	20002728 	.word	0x20002728
10046080:	48300000 	.word	0x48300000

10046084 <MX_RADIO_Init>:
  * @brief RADIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_Init(void)
{
10046084:	b580      	push	{r7, lr}
10046086:	b082      	sub	sp, #8
10046088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_Init 0 */
//
  /* USER CODE END RADIO_Init 0 */

  RADIO_HandleTypeDef hradio = {0};
1004608a:	2300      	movs	r3, #0
1004608c:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN RADIO_Init 1 */
//
  /* USER CODE END RADIO_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
1004608e:	2001      	movs	r0, #1
10046090:	f7ff ff1c 	bl	10045ecc <LL_APB2_GRP1_IsEnabledClock>
10046094:	1e03      	subs	r3, r0, #0
10046096:	d108      	bne.n	100460aa <MX_RADIO_Init+0x26>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
10046098:	2001      	movs	r0, #1
1004609a:	f7ff ff2b 	bl	10045ef4 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
1004609e:	2001      	movs	r0, #1
100460a0:	f7ff ff38 	bl	10045f14 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
100460a4:	2001      	movs	r0, #1
100460a6:	f7ff fefb 	bl	10045ea0 <LL_APB2_GRP1_EnableClock>
  }
  hradio.Instance = RADIO;
100460aa:	23c0      	movs	r3, #192	@ 0xc0
100460ac:	05db      	lsls	r3, r3, #23
100460ae:	607b      	str	r3, [r7, #4]
  HAL_RADIO_Init(&hradio);
100460b0:	1d3b      	adds	r3, r7, #4
100460b2:	0018      	movs	r0, r3
100460b4:	f003 ffde 	bl	1004a074 <HAL_RADIO_Init>
  /* USER CODE BEGIN RADIO_Init 2 */
//
  /* USER CODE END RADIO_Init 2 */

}
100460b8:	46c0      	nop			@ (mov r8, r8)
100460ba:	46bd      	mov	sp, r7
100460bc:	b002      	add	sp, #8
100460be:	bd80      	pop	{r7, pc}

100460c0 <MX_RADIO_TIMER_Init>:
  * @brief RADIO_TIMER Initialization Function
  * @param None
  * @retval None
  */
static void MX_RADIO_TIMER_Init(void)
{
100460c0:	b580      	push	{r7, lr}
100460c2:	b082      	sub	sp, #8
100460c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RADIO_TIMER_Init 0 */
//
  /* USER CODE END RADIO_TIMER_Init 0 */

  RADIO_TIMER_InitTypeDef RADIO_TIMER_InitStruct = {0};
100460c6:	003b      	movs	r3, r7
100460c8:	0018      	movs	r0, r3
100460ca:	2308      	movs	r3, #8
100460cc:	001a      	movs	r2, r3
100460ce:	2100      	movs	r1, #0
100460d0:	f021 fd48 	bl	10067b64 <memset>

  /* USER CODE BEGIN RADIO_TIMER_Init 1 */
//
  /* USER CODE END RADIO_TIMER_Init 1 */

  if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
100460d4:	2001      	movs	r0, #1
100460d6:	f7ff fef9 	bl	10045ecc <LL_APB2_GRP1_IsEnabledClock>
100460da:	1e03      	subs	r3, r0, #0
100460dc:	d108      	bne.n	100460f0 <MX_RADIO_TIMER_Init+0x30>
  {
    /* Radio Peripheral reset */
    __HAL_RCC_RADIO_FORCE_RESET();
100460de:	2001      	movs	r0, #1
100460e0:	f7ff ff08 	bl	10045ef4 <LL_APB2_GRP1_ForceReset>
    __HAL_RCC_RADIO_RELEASE_RESET();
100460e4:	2001      	movs	r0, #1
100460e6:	f7ff ff15 	bl	10045f14 <LL_APB2_GRP1_ReleaseReset>

    /* Enable Radio peripheral clock */
    __HAL_RCC_RADIO_CLK_ENABLE();
100460ea:	2001      	movs	r0, #1
100460ec:	f7ff fed8 	bl	10045ea0 <LL_APB2_GRP1_EnableClock>
  }
  /* Wait to be sure that the Radio Timer is active */
  while(LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP) < 0x10);
100460f0:	46c0      	nop			@ (mov r8, r8)
100460f2:	4b0c      	ldr	r3, [pc, #48]	@ (10046124 <MX_RADIO_TIMER_Init+0x64>)
100460f4:	0018      	movs	r0, r3
100460f6:	f7ff fec8 	bl	10045e8a <LL_RADIO_TIMER_GetAbsoluteTime>
100460fa:	0003      	movs	r3, r0
100460fc:	2b0f      	cmp	r3, #15
100460fe:	d9f8      	bls.n	100460f2 <MX_RADIO_TIMER_Init+0x32>
  RADIO_TIMER_InitStruct.XTAL_StartupTime = 320;
10046100:	003b      	movs	r3, r7
10046102:	22a0      	movs	r2, #160	@ 0xa0
10046104:	0052      	lsls	r2, r2, #1
10046106:	801a      	strh	r2, [r3, #0]
  RADIO_TIMER_InitStruct.enableInitialCalibration = TRUE;
10046108:	003b      	movs	r3, r7
1004610a:	2201      	movs	r2, #1
1004610c:	709a      	strb	r2, [r3, #2]
  RADIO_TIMER_InitStruct.periodicCalibrationInterval = 10000;
1004610e:	003b      	movs	r3, r7
10046110:	4a05      	ldr	r2, [pc, #20]	@ (10046128 <MX_RADIO_TIMER_Init+0x68>)
10046112:	605a      	str	r2, [r3, #4]
  HAL_RADIO_TIMER_Init(&RADIO_TIMER_InitStruct);
10046114:	003b      	movs	r3, r7
10046116:	0018      	movs	r0, r3
10046118:	f004 fcd2 	bl	1004aac0 <HAL_RADIO_TIMER_Init>
  /* USER CODE BEGIN RADIO_TIMER_Init 2 */
//
  /* USER CODE END RADIO_TIMER_Init 2 */

}
1004611c:	46c0      	nop			@ (mov r8, r8)
1004611e:	46bd      	mov	sp, r7
10046120:	b002      	add	sp, #8
10046122:	bd80      	pop	{r7, pc}
10046124:	60001800 	.word	0x60001800
10046128:	00002710 	.word	0x00002710

1004612c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
1004612c:	b580      	push	{r7, lr}
1004612e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
10046130:	4b06      	ldr	r3, [pc, #24]	@ (1004614c <MX_RNG_Init+0x20>)
10046132:	4a07      	ldr	r2, [pc, #28]	@ (10046150 <MX_RNG_Init+0x24>)
10046134:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
10046136:	4b05      	ldr	r3, [pc, #20]	@ (1004614c <MX_RNG_Init+0x20>)
10046138:	0018      	movs	r0, r3
1004613a:	f006 fce1 	bl	1004cb00 <HAL_RNG_Init>
1004613e:	1e03      	subs	r3, r0, #0
10046140:	d001      	beq.n	10046146 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
10046142:	f7fb fa1b 	bl	1004157c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
10046146:	46c0      	nop			@ (mov r8, r8)
10046148:	46bd      	mov	sp, r7
1004614a:	bd80      	pop	{r7, pc}
1004614c:	20002734 	.word	0x20002734
10046150:	48600000 	.word	0x48600000

10046154 <LL_AHB1_GRP1_EnableClock>:
{
10046154:	b580      	push	{r7, lr}
10046156:	b084      	sub	sp, #16
10046158:	af00      	add	r7, sp, #0
1004615a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004615c:	4b07      	ldr	r3, [pc, #28]	@ (1004617c <LL_AHB1_GRP1_EnableClock+0x28>)
1004615e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10046160:	4b06      	ldr	r3, [pc, #24]	@ (1004617c <LL_AHB1_GRP1_EnableClock+0x28>)
10046162:	687a      	ldr	r2, [r7, #4]
10046164:	430a      	orrs	r2, r1
10046166:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10046168:	4b04      	ldr	r3, [pc, #16]	@ (1004617c <LL_AHB1_GRP1_EnableClock+0x28>)
1004616a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004616c:	687a      	ldr	r2, [r7, #4]
1004616e:	4013      	ands	r3, r2
10046170:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046172:	68fb      	ldr	r3, [r7, #12]
}
10046174:	46c0      	nop			@ (mov r8, r8)
10046176:	46bd      	mov	sp, r7
10046178:	b004      	add	sp, #16
1004617a:	bd80      	pop	{r7, pc}
1004617c:	48400000 	.word	0x48400000

10046180 <LL_APB0_GRP1_EnableClock>:
{
10046180:	b580      	push	{r7, lr}
10046182:	b084      	sub	sp, #16
10046184:	af00      	add	r7, sp, #0
10046186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
10046188:	4b07      	ldr	r3, [pc, #28]	@ (100461a8 <LL_APB0_GRP1_EnableClock+0x28>)
1004618a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
1004618c:	4b06      	ldr	r3, [pc, #24]	@ (100461a8 <LL_APB0_GRP1_EnableClock+0x28>)
1004618e:	687a      	ldr	r2, [r7, #4]
10046190:	430a      	orrs	r2, r1
10046192:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
10046194:	4b04      	ldr	r3, [pc, #16]	@ (100461a8 <LL_APB0_GRP1_EnableClock+0x28>)
10046196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10046198:	687a      	ldr	r2, [r7, #4]
1004619a:	4013      	ands	r3, r2
1004619c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004619e:	68fb      	ldr	r3, [r7, #12]
}
100461a0:	46c0      	nop			@ (mov r8, r8)
100461a2:	46bd      	mov	sp, r7
100461a4:	b004      	add	sp, #16
100461a6:	bd80      	pop	{r7, pc}
100461a8:	48400000 	.word	0x48400000

100461ac <LL_APB1_GRP1_EnableClock>:
{
100461ac:	b580      	push	{r7, lr}
100461ae:	b084      	sub	sp, #16
100461b0:	af00      	add	r7, sp, #0
100461b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
100461b4:	4b07      	ldr	r3, [pc, #28]	@ (100461d4 <LL_APB1_GRP1_EnableClock+0x28>)
100461b6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
100461b8:	4b06      	ldr	r3, [pc, #24]	@ (100461d4 <LL_APB1_GRP1_EnableClock+0x28>)
100461ba:	687a      	ldr	r2, [r7, #4]
100461bc:	430a      	orrs	r2, r1
100461be:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
100461c0:	4b04      	ldr	r3, [pc, #16]	@ (100461d4 <LL_APB1_GRP1_EnableClock+0x28>)
100461c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
100461c4:	687a      	ldr	r2, [r7, #4]
100461c6:	4013      	ands	r3, r2
100461c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100461ca:	68fb      	ldr	r3, [r7, #12]
}
100461cc:	46c0      	nop			@ (mov r8, r8)
100461ce:	46bd      	mov	sp, r7
100461d0:	b004      	add	sp, #16
100461d2:	bd80      	pop	{r7, pc}
100461d4:	48400000 	.word	0x48400000

100461d8 <LL_APB2_GRP1_EnableClock>:
{
100461d8:	b580      	push	{r7, lr}
100461da:	b084      	sub	sp, #16
100461dc:	af00      	add	r7, sp, #0
100461de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
100461e0:	4b07      	ldr	r3, [pc, #28]	@ (10046200 <LL_APB2_GRP1_EnableClock+0x28>)
100461e2:	6e19      	ldr	r1, [r3, #96]	@ 0x60
100461e4:	4b06      	ldr	r3, [pc, #24]	@ (10046200 <LL_APB2_GRP1_EnableClock+0x28>)
100461e6:	687a      	ldr	r2, [r7, #4]
100461e8:	430a      	orrs	r2, r1
100461ea:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
100461ec:	4b04      	ldr	r3, [pc, #16]	@ (10046200 <LL_APB2_GRP1_EnableClock+0x28>)
100461ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
100461f0:	687a      	ldr	r2, [r7, #4]
100461f2:	4013      	ands	r3, r2
100461f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100461f6:	68fb      	ldr	r3, [r7, #12]
}
100461f8:	46c0      	nop			@ (mov r8, r8)
100461fa:	46bd      	mov	sp, r7
100461fc:	b004      	add	sp, #16
100461fe:	bd80      	pop	{r7, pc}
10046200:	48400000 	.word	0x48400000

10046204 <LL_APB2_GRP1_IsEnabledClock>:
{
10046204:	b580      	push	{r7, lr}
10046206:	b082      	sub	sp, #8
10046208:	af00      	add	r7, sp, #0
1004620a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004620c:	4b06      	ldr	r3, [pc, #24]	@ (10046228 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004620e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
10046210:	687a      	ldr	r2, [r7, #4]
10046212:	4013      	ands	r3, r2
10046214:	687a      	ldr	r2, [r7, #4]
10046216:	429a      	cmp	r2, r3
10046218:	d101      	bne.n	1004621e <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004621a:	2301      	movs	r3, #1
1004621c:	e000      	b.n	10046220 <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004621e:	2300      	movs	r3, #0
}
10046220:	0018      	movs	r0, r3
10046222:	46bd      	mov	sp, r7
10046224:	b002      	add	sp, #8
10046226:	bd80      	pop	{r7, pc}
10046228:	48400000 	.word	0x48400000

1004622c <LL_APB2_GRP1_ForceReset>:
{
1004622c:	b580      	push	{r7, lr}
1004622e:	b082      	sub	sp, #8
10046230:	af00      	add	r7, sp, #0
10046232:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
10046234:	4b04      	ldr	r3, [pc, #16]	@ (10046248 <LL_APB2_GRP1_ForceReset+0x1c>)
10046236:	6c19      	ldr	r1, [r3, #64]	@ 0x40
10046238:	4b03      	ldr	r3, [pc, #12]	@ (10046248 <LL_APB2_GRP1_ForceReset+0x1c>)
1004623a:	687a      	ldr	r2, [r7, #4]
1004623c:	430a      	orrs	r2, r1
1004623e:	641a      	str	r2, [r3, #64]	@ 0x40
}
10046240:	46c0      	nop			@ (mov r8, r8)
10046242:	46bd      	mov	sp, r7
10046244:	b002      	add	sp, #8
10046246:	bd80      	pop	{r7, pc}
10046248:	48400000 	.word	0x48400000

1004624c <LL_APB2_GRP1_ReleaseReset>:
{
1004624c:	b580      	push	{r7, lr}
1004624e:	b082      	sub	sp, #8
10046250:	af00      	add	r7, sp, #0
10046252:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
10046254:	4b05      	ldr	r3, [pc, #20]	@ (1004626c <LL_APB2_GRP1_ReleaseReset+0x20>)
10046256:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
10046258:	687b      	ldr	r3, [r7, #4]
1004625a:	43d9      	mvns	r1, r3
1004625c:	4b03      	ldr	r3, [pc, #12]	@ (1004626c <LL_APB2_GRP1_ReleaseReset+0x20>)
1004625e:	400a      	ands	r2, r1
10046260:	641a      	str	r2, [r3, #64]	@ 0x40
}
10046262:	46c0      	nop			@ (mov r8, r8)
10046264:	46bd      	mov	sp, r7
10046266:	b002      	add	sp, #8
10046268:	bd80      	pop	{r7, pc}
1004626a:	46c0      	nop			@ (mov r8, r8)
1004626c:	48400000 	.word	0x48400000

10046270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10046270:	b580      	push	{r7, lr}
10046272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */
//
  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
10046274:	2380      	movs	r3, #128	@ 0x80
10046276:	005b      	lsls	r3, r3, #1
10046278:	0018      	movs	r0, r3
1004627a:	f7ff ff81 	bl	10046180 <LL_APB0_GRP1_EnableClock>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
//
  /* USER CODE END MspInit 1 */
}
1004627e:	46c0      	nop			@ (mov r8, r8)
10046280:	46bd      	mov	sp, r7
10046282:	bd80      	pop	{r7, pc}

10046284 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
10046284:	b590      	push	{r4, r7, lr}
10046286:	b089      	sub	sp, #36	@ 0x24
10046288:	af00      	add	r7, sp, #0
1004628a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
1004628c:	240c      	movs	r4, #12
1004628e:	193b      	adds	r3, r7, r4
10046290:	0018      	movs	r0, r3
10046292:	2314      	movs	r3, #20
10046294:	001a      	movs	r2, r3
10046296:	2100      	movs	r1, #0
10046298:	f021 fc64 	bl	10067b64 <memset>
  if(hi2c->Instance==I2C1)
1004629c:	687b      	ldr	r3, [r7, #4]
1004629e:	681a      	ldr	r2, [r3, #0]
100462a0:	2382      	movs	r3, #130	@ 0x82
100462a2:	05db      	lsls	r3, r3, #23
100462a4:	429a      	cmp	r2, r3
100462a6:	d147      	bne.n	10046338 <HAL_I2C_MspInit+0xb4>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
100462a8:	2004      	movs	r0, #4
100462aa:	f7ff ff53 	bl	10046154 <LL_AHB1_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
100462ae:	2008      	movs	r0, #8
100462b0:	f7ff ff50 	bl	10046154 <LL_AHB1_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PA1     ------> I2C1_SDA
    PA0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
100462b4:	193b      	adds	r3, r7, r4
100462b6:	2202      	movs	r2, #2
100462b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
100462ba:	193b      	adds	r3, r7, r4
100462bc:	2212      	movs	r2, #18
100462be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100462c0:	193b      	adds	r3, r7, r4
100462c2:	2200      	movs	r2, #0
100462c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100462c6:	193b      	adds	r3, r7, r4
100462c8:	2200      	movs	r2, #0
100462ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
100462cc:	193b      	adds	r3, r7, r4
100462ce:	2200      	movs	r2, #0
100462d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100462d2:	193a      	adds	r2, r7, r4
100462d4:	2390      	movs	r3, #144	@ 0x90
100462d6:	05db      	lsls	r3, r3, #23
100462d8:	0011      	movs	r1, r2
100462da:	0018      	movs	r0, r3
100462dc:	f001 f9f0 	bl	100476c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
100462e0:	0021      	movs	r1, r4
100462e2:	187b      	adds	r3, r7, r1
100462e4:	2201      	movs	r2, #1
100462e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
100462e8:	187b      	adds	r3, r7, r1
100462ea:	2212      	movs	r2, #18
100462ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100462ee:	187b      	adds	r3, r7, r1
100462f0:	2200      	movs	r2, #0
100462f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100462f4:	187b      	adds	r3, r7, r1
100462f6:	2200      	movs	r2, #0
100462f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
100462fa:	187b      	adds	r3, r7, r1
100462fc:	2200      	movs	r2, #0
100462fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10046300:	187a      	adds	r2, r7, r1
10046302:	2390      	movs	r3, #144	@ 0x90
10046304:	05db      	lsls	r3, r3, #23
10046306:	0011      	movs	r1, r2
10046308:	0018      	movs	r0, r3
1004630a:	f001 f9d9 	bl	100476c0 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_1);
1004630e:	2102      	movs	r1, #2
10046310:	2000      	movs	r0, #0
10046312:	f003 fcad 	bl	10049c70 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_A, PWR_GPIO_BIT_0);
10046316:	2101      	movs	r1, #1
10046318:	2000      	movs	r0, #0
1004631a:	f003 fca9 	bl	10049c70 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
1004631e:	2102      	movs	r1, #2
10046320:	2000      	movs	r0, #0
10046322:	f003 fcd3 	bl	10049ccc <HAL_PWREx_DisableGPIOPullDown>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_0);
10046326:	2101      	movs	r1, #1
10046328:	2000      	movs	r0, #0
1004632a:	f003 fccf 	bl	10049ccc <HAL_PWREx_DisableGPIOPullDown>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
1004632e:	2380      	movs	r3, #128	@ 0x80
10046330:	039b      	lsls	r3, r3, #14
10046332:	0018      	movs	r0, r3
10046334:	f7ff ff3a 	bl	100461ac <LL_APB1_GRP1_EnableClock>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
10046338:	46c0      	nop			@ (mov r8, r8)
1004633a:	46bd      	mov	sp, r7
1004633c:	b009      	add	sp, #36	@ 0x24
1004633e:	bd90      	pop	{r4, r7, pc}

10046340 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
10046340:	b590      	push	{r4, r7, lr}
10046342:	b08f      	sub	sp, #60	@ 0x3c
10046344:	af00      	add	r7, sp, #0
10046346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
10046348:	2324      	movs	r3, #36	@ 0x24
1004634a:	18fb      	adds	r3, r7, r3
1004634c:	0018      	movs	r0, r3
1004634e:	2314      	movs	r3, #20
10046350:	001a      	movs	r2, r3
10046352:	2100      	movs	r1, #0
10046354:	f021 fc06 	bl	10067b64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
10046358:	240c      	movs	r4, #12
1004635a:	193b      	adds	r3, r7, r4
1004635c:	0018      	movs	r0, r3
1004635e:	2318      	movs	r3, #24
10046360:	001a      	movs	r2, r3
10046362:	2100      	movs	r1, #0
10046364:	f021 fbfe 	bl	10067b64 <memset>
  if(huart->Instance==LPUART1)
10046368:	687b      	ldr	r3, [r7, #4]
1004636a:	681b      	ldr	r3, [r3, #0]
1004636c:	4a46      	ldr	r2, [pc, #280]	@ (10046488 <HAL_UART_MspInit+0x148>)
1004636e:	4293      	cmp	r3, r2
10046370:	d000      	beq.n	10046374 <HAL_UART_MspInit+0x34>
10046372:	e084      	b.n	1004647e <HAL_UART_MspInit+0x13e>
//
    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
10046374:	193b      	adds	r3, r7, r4
10046376:	2210      	movs	r2, #16
10046378:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.LPUART1ClockSelection = RCC_LPUART1_CLKSOURCE_16M;
1004637a:	193b      	adds	r3, r7, r4
1004637c:	2200      	movs	r2, #0
1004637e:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
10046380:	193b      	adds	r3, r7, r4
10046382:	0018      	movs	r0, r3
10046384:	f006 fae4 	bl	1004c950 <HAL_RCCEx_PeriphCLKConfig>
10046388:	1e03      	subs	r3, r0, #0
1004638a:	d001      	beq.n	10046390 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
1004638c:	f7fb f8f6 	bl	1004157c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
10046390:	2380      	movs	r3, #128	@ 0x80
10046392:	005b      	lsls	r3, r3, #1
10046394:	0018      	movs	r0, r3
10046396:	f7ff ff09 	bl	100461ac <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
1004639a:	2008      	movs	r0, #8
1004639c:	f7ff feda 	bl	10046154 <LL_AHB1_GRP1_EnableClock>
    PB7     ------> LPUART1_RX


    */

    GPIO_InitStruct.Pin = GPIO_PIN_3;
100463a0:	2424      	movs	r4, #36	@ 0x24
100463a2:	193b      	adds	r3, r7, r4
100463a4:	2208      	movs	r2, #8
100463a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100463a8:	193b      	adds	r3, r7, r4
100463aa:	2202      	movs	r2, #2
100463ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100463ae:	193b      	adds	r3, r7, r4
100463b0:	2200      	movs	r2, #0
100463b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100463b4:	193b      	adds	r3, r7, r4
100463b6:	2200      	movs	r2, #0
100463b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPUART1;
100463ba:	193b      	adds	r3, r7, r4
100463bc:	2201      	movs	r2, #1
100463be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100463c0:	193b      	adds	r3, r7, r4
100463c2:	4a32      	ldr	r2, [pc, #200]	@ (1004648c <HAL_UART_MspInit+0x14c>)
100463c4:	0019      	movs	r1, r3
100463c6:	0010      	movs	r0, r2
100463c8:	f001 f97a 	bl	100476c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
100463cc:	193b      	adds	r3, r7, r4
100463ce:	2280      	movs	r2, #128	@ 0x80
100463d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100463d2:	193b      	adds	r3, r7, r4
100463d4:	2202      	movs	r2, #2
100463d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100463d8:	193b      	adds	r3, r7, r4
100463da:	2200      	movs	r2, #0
100463dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100463de:	193b      	adds	r3, r7, r4
100463e0:	2200      	movs	r2, #0
100463e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART1;
100463e4:	193b      	adds	r3, r7, r4
100463e6:	2203      	movs	r2, #3
100463e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
100463ea:	193b      	adds	r3, r7, r4
100463ec:	4a27      	ldr	r2, [pc, #156]	@ (1004648c <HAL_UART_MspInit+0x14c>)
100463ee:	0019      	movs	r1, r3
100463f0:	0010      	movs	r0, r2
100463f2:	f001 f965 	bl	100476c0 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
100463f6:	2188      	movs	r1, #136	@ 0x88
100463f8:	2001      	movs	r0, #1
100463fa:	f003 fc39 	bl	10049c70 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_B, PWR_GPIO_BIT_3|PWR_GPIO_BIT_7);
100463fe:	2188      	movs	r1, #136	@ 0x88
10046400:	2001      	movs	r0, #1
10046402:	f003 fc63 	bl	10049ccc <HAL_PWREx_DisableGPIOPullDown>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 0);
10046406:	2200      	movs	r2, #0
10046408:	2101      	movs	r1, #1
1004640a:	2009      	movs	r0, #9
1004640c:	f000 ff3a 	bl	10047284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
10046410:	2009      	movs	r0, #9
10046412:	f000 ff4c 	bl	100472ae <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPUART1_MspInit 1 */
    //    PB0     ------> USART_RX
    //    PA1     ------> USART_TX
    GPIO_InitStruct.Pin = GPIO_PIN_0;
10046416:	193b      	adds	r3, r7, r4
10046418:	2201      	movs	r2, #1
1004641a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
1004641c:	193b      	adds	r3, r7, r4
1004641e:	2202      	movs	r2, #2
10046420:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
10046422:	193b      	adds	r3, r7, r4
10046424:	2200      	movs	r2, #0
10046426:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10046428:	193b      	adds	r3, r7, r4
1004642a:	2200      	movs	r2, #0
1004642c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
1004642e:	193b      	adds	r3, r7, r4
10046430:	2200      	movs	r2, #0
10046432:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
10046434:	193b      	adds	r3, r7, r4
10046436:	4a15      	ldr	r2, [pc, #84]	@ (1004648c <HAL_UART_MspInit+0x14c>)
10046438:	0019      	movs	r1, r3
1004643a:	0010      	movs	r0, r2
1004643c:	f001 f940 	bl	100476c0 <HAL_GPIO_Init>

    //default to PA1 being in I2C control
    GPIO_InitStruct.Pin = GPIO_PIN_1;
10046440:	0021      	movs	r1, r4
10046442:	187b      	adds	r3, r7, r1
10046444:	2202      	movs	r2, #2
10046446:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
10046448:	187b      	adds	r3, r7, r1
1004644a:	2212      	movs	r2, #18
1004644c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
1004644e:	187b      	adds	r3, r7, r1
10046450:	2200      	movs	r2, #0
10046452:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
10046454:	187b      	adds	r3, r7, r1
10046456:	2200      	movs	r2, #0
10046458:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_I2C1;
1004645a:	187b      	adds	r3, r7, r1
1004645c:	2200      	movs	r2, #0
1004645e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
10046460:	187a      	adds	r2, r7, r1
10046462:	2390      	movs	r3, #144	@ 0x90
10046464:	05db      	lsls	r3, r3, #23
10046466:	0011      	movs	r1, r2
10046468:	0018      	movs	r0, r3
1004646a:	f001 f929 	bl	100476c0 <HAL_GPIO_Init>

    HAL_PWREx_DisableGPIOPullUp(PWR_GPIO_B, PWR_GPIO_BIT_0);
1004646e:	2101      	movs	r1, #1
10046470:	2001      	movs	r0, #1
10046472:	f003 fbfd 	bl	10049c70 <HAL_PWREx_DisableGPIOPullUp>

    HAL_PWREx_DisableGPIOPullDown(PWR_GPIO_A, PWR_GPIO_BIT_1);
10046476:	2102      	movs	r1, #2
10046478:	2000      	movs	r0, #0
1004647a:	f003 fc27 	bl	10049ccc <HAL_PWREx_DisableGPIOPullDown>
//
    /* USER CODE END LPUART1_MspInit 1 */

  }

}
1004647e:	46c0      	nop			@ (mov r8, r8)
10046480:	46bd      	mov	sp, r7
10046482:	b00f      	add	sp, #60	@ 0x3c
10046484:	bd90      	pop	{r4, r7, pc}
10046486:	46c0      	nop			@ (mov r8, r8)
10046488:	41005000 	.word	0x41005000
1004648c:	48100000 	.word	0x48100000

10046490 <HAL_PKA_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpka: PKA handle pointer
  * @retval None
  */
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
10046490:	b580      	push	{r7, lr}
10046492:	b082      	sub	sp, #8
10046494:	af00      	add	r7, sp, #0
10046496:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
10046498:	687b      	ldr	r3, [r7, #4]
1004649a:	681b      	ldr	r3, [r3, #0]
1004649c:	4a05      	ldr	r2, [pc, #20]	@ (100464b4 <HAL_PKA_MspInit+0x24>)
1004649e:	4293      	cmp	r3, r2
100464a0:	d104      	bne.n	100464ac <HAL_PKA_MspInit+0x1c>
  {
    /* USER CODE BEGIN PKA_MspInit 0 */

    /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
100464a2:	2380      	movs	r3, #128	@ 0x80
100464a4:	025b      	lsls	r3, r3, #9
100464a6:	0018      	movs	r0, r3
100464a8:	f7ff fe54 	bl	10046154 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END PKA_MspInit 1 */

  }

}
100464ac:	46c0      	nop			@ (mov r8, r8)
100464ae:	46bd      	mov	sp, r7
100464b0:	b002      	add	sp, #8
100464b2:	bd80      	pop	{r7, pc}
100464b4:	48300000 	.word	0x48300000

100464b8 <HAL_RADIO_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hradio: RADIO handle pointer
  * @retval None
  */
void HAL_RADIO_MspInit(RADIO_HandleTypeDef* hradio)
{
100464b8:	b590      	push	{r4, r7, lr}
100464ba:	b089      	sub	sp, #36	@ 0x24
100464bc:	af00      	add	r7, sp, #0
100464be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
100464c0:	2408      	movs	r4, #8
100464c2:	193b      	adds	r3, r7, r4
100464c4:	0018      	movs	r0, r3
100464c6:	2318      	movs	r3, #24
100464c8:	001a      	movs	r2, r3
100464ca:	2100      	movs	r1, #0
100464cc:	f021 fb4a 	bl	10067b64 <memset>
  if(hradio->Instance==RADIO)
100464d0:	687b      	ldr	r3, [r7, #4]
100464d2:	681a      	ldr	r2, [r3, #0]
100464d4:	23c0      	movs	r3, #192	@ 0xc0
100464d6:	05db      	lsls	r3, r3, #23
100464d8:	429a      	cmp	r2, r3
100464da:	d12d      	bne.n	10046538 <HAL_RADIO_MspInit+0x80>

    /* USER CODE END RADIO_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RF;
100464dc:	193b      	adds	r3, r7, r4
100464de:	2201      	movs	r2, #1
100464e0:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.RFClockSelection = RCC_RF_CLK_16M;
100464e2:	193b      	adds	r3, r7, r4
100464e4:	2204      	movs	r2, #4
100464e6:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
100464e8:	193b      	adds	r3, r7, r4
100464ea:	0018      	movs	r0, r3
100464ec:	f006 fa30 	bl	1004c950 <HAL_RCCEx_PeriphCLKConfig>
100464f0:	1e03      	subs	r3, r0, #0
100464f2:	d001      	beq.n	100464f8 <HAL_RADIO_MspInit+0x40>
    {
      Error_Handler();
100464f4:	f7fb f842 	bl	1004157c <Error_Handler>
    }

    /* Peripheral clock enable */
    if (__HAL_RCC_RADIO_IS_CLK_DISABLED())
100464f8:	2001      	movs	r0, #1
100464fa:	f7ff fe83 	bl	10046204 <LL_APB2_GRP1_IsEnabledClock>
100464fe:	1e03      	subs	r3, r0, #0
10046500:	d108      	bne.n	10046514 <HAL_RADIO_MspInit+0x5c>
    {
      /* Radio reset */
      __HAL_RCC_RADIO_FORCE_RESET();
10046502:	2001      	movs	r0, #1
10046504:	f7ff fe92 	bl	1004622c <LL_APB2_GRP1_ForceReset>
      __HAL_RCC_RADIO_RELEASE_RESET();
10046508:	2001      	movs	r0, #1
1004650a:	f7ff fe9f 	bl	1004624c <LL_APB2_GRP1_ReleaseReset>

      /* Enable Radio peripheral clock */
      __HAL_RCC_RADIO_CLK_ENABLE();
1004650e:	2001      	movs	r0, #1
10046510:	f7ff fe62 	bl	100461d8 <LL_APB2_GRP1_EnableClock>
    }

    /**RADIO GPIO Configuration
    RF1     ------> RADIO_RF1
    */
    RT_DEBUG_GPIO_Init();
10046514:	f00d ff2a 	bl	1005436c <RT_DEBUG_GPIO_Init>

    /* RADIO interrupt Init */
    HAL_NVIC_SetPriority(RADIO_TXRX_IRQn, 0, 0);
10046518:	2200      	movs	r2, #0
1004651a:	2100      	movs	r1, #0
1004651c:	2012      	movs	r0, #18
1004651e:	f000 feb1 	bl	10047284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_IRQn);
10046522:	2012      	movs	r0, #18
10046524:	f000 fec3 	bl	100472ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RADIO_TXRX_SEQ_IRQn, 0, 0);
10046528:	2200      	movs	r2, #0
1004652a:	2100      	movs	r1, #0
1004652c:	2019      	movs	r0, #25
1004652e:	f000 fea9 	bl	10047284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10046532:	2019      	movs	r0, #25
10046534:	f000 febb 	bl	100472ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END RADIO_MspInit 1 */

  }

}
10046538:	46c0      	nop			@ (mov r8, r8)
1004653a:	46bd      	mov	sp, r7
1004653c:	b009      	add	sp, #36	@ 0x24
1004653e:	bd90      	pop	{r4, r7, pc}

10046540 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
10046540:	b580      	push	{r7, lr}
10046542:	b082      	sub	sp, #8
10046544:	af00      	add	r7, sp, #0
10046546:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
10046548:	687b      	ldr	r3, [r7, #4]
1004654a:	681b      	ldr	r3, [r3, #0]
1004654c:	4a05      	ldr	r2, [pc, #20]	@ (10046564 <HAL_RNG_MspInit+0x24>)
1004654e:	4293      	cmp	r3, r2
10046550:	d104      	bne.n	1004655c <HAL_RNG_MspInit+0x1c>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
10046552:	2380      	movs	r3, #128	@ 0x80
10046554:	02db      	lsls	r3, r3, #11
10046556:	0018      	movs	r0, r3
10046558:	f7ff fdfc 	bl	10046154 <LL_AHB1_GRP1_EnableClock>

    /* USER CODE END RNG_MspInit 1 */

  }

}
1004655c:	46c0      	nop			@ (mov r8, r8)
1004655e:	46bd      	mov	sp, r7
10046560:	b002      	add	sp, #8
10046562:	bd80      	pop	{r7, pc}
10046564:	48600000 	.word	0x48600000

10046568 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
10046568:	b580      	push	{r7, lr}
1004656a:	b082      	sub	sp, #8
1004656c:	af00      	add	r7, sp, #0
1004656e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
10046570:	687b      	ldr	r3, [r7, #4]
10046572:	681b      	ldr	r3, [r3, #0]
10046574:	4a08      	ldr	r2, [pc, #32]	@ (10046598 <HAL_TIM_Base_MspInit+0x30>)
10046576:	4293      	cmp	r3, r2
10046578:	d10a      	bne.n	10046590 <HAL_TIM_Base_MspInit+0x28>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
1004657a:	2001      	movs	r0, #1
1004657c:	f7ff fe00 	bl	10046180 <LL_APB0_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
10046580:	2200      	movs	r2, #0
10046582:	2101      	movs	r1, #1
10046584:	200a      	movs	r0, #10
10046586:	f000 fe7d 	bl	10047284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
1004658a:	200a      	movs	r0, #10
1004658c:	f000 fe8f 	bl	100472ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
10046590:	46c0      	nop			@ (mov r8, r8)
10046592:	46bd      	mov	sp, r7
10046594:	b002      	add	sp, #8
10046596:	bd80      	pop	{r7, pc}
10046598:	40002000 	.word	0x40002000

1004659c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
1004659c:	b580      	push	{r7, lr}
1004659e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
100465a0:	46c0      	nop			@ (mov r8, r8)
100465a2:	e7fd      	b.n	100465a0 <NMI_Handler+0x4>

100465a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
100465a4:	b580      	push	{r7, lr}
100465a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
100465a8:	46c0      	nop			@ (mov r8, r8)
100465aa:	e7fd      	b.n	100465a8 <HardFault_Handler+0x4>

100465ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100465ac:	b580      	push	{r7, lr}
100465ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100465b0:	46c0      	nop			@ (mov r8, r8)
100465b2:	46bd      	mov	sp, r7
100465b4:	bd80      	pop	{r7, pc}

100465b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100465b6:	b580      	push	{r7, lr}
100465b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100465ba:	46c0      	nop			@ (mov r8, r8)
100465bc:	46bd      	mov	sp, r7
100465be:	bd80      	pop	{r7, pc}

100465c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100465c0:	b580      	push	{r7, lr}
100465c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100465c4:	f000 fd68 	bl	10047098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100465c8:	46c0      	nop			@ (mov r8, r8)
100465ca:	46bd      	mov	sp, r7
100465cc:	bd80      	pop	{r7, pc}

100465ce <GPIOA_IRQHandler>:

/**
  * @brief This function handles GPIOA interrupt.
  */
void GPIOA_IRQHandler(void)
{
100465ce:	b580      	push	{r7, lr}
100465d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOA_IRQn 0 */

  /* USER CODE END GPIOA_IRQn 0 */
  BSP_PB_IRQHandler(GPIOA,B1_PIN);
100465d2:	2390      	movs	r3, #144	@ 0x90
100465d4:	05db      	lsls	r3, r3, #23
100465d6:	2101      	movs	r1, #1
100465d8:	0018      	movs	r0, r3
100465da:	f000 fba5 	bl	10046d28 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOA_IRQn 1 */

  /* USER CODE END GPIOA_IRQn 1 */
}
100465de:	46c0      	nop			@ (mov r8, r8)
100465e0:	46bd      	mov	sp, r7
100465e2:	bd80      	pop	{r7, pc}

100465e4 <GPIOB_IRQHandler>:

/**
  * @brief This function handles GPIOB interrupt.
  */
void GPIOB_IRQHandler(void)
{
100465e4:	b580      	push	{r7, lr}
100465e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPIOB_IRQn 0 */

  /* USER CODE END GPIOB_IRQn 0 */
  BSP_PB_IRQHandler(GPIOB,B3_PIN);
100465e8:	2380      	movs	r3, #128	@ 0x80
100465ea:	01db      	lsls	r3, r3, #7
100465ec:	4a06      	ldr	r2, [pc, #24]	@ (10046608 <GPIOB_IRQHandler+0x24>)
100465ee:	0019      	movs	r1, r3
100465f0:	0010      	movs	r0, r2
100465f2:	f000 fb99 	bl	10046d28 <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(GPIOB,B2_PIN);
100465f6:	4b04      	ldr	r3, [pc, #16]	@ (10046608 <GPIOB_IRQHandler+0x24>)
100465f8:	2120      	movs	r1, #32
100465fa:	0018      	movs	r0, r3
100465fc:	f000 fb94 	bl	10046d28 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN GPIOB_IRQn 1 */

  /* USER CODE END GPIOB_IRQn 1 */
}
10046600:	46c0      	nop			@ (mov r8, r8)
10046602:	46bd      	mov	sp, r7
10046604:	bd80      	pop	{r7, pc}
10046606:	46c0      	nop			@ (mov r8, r8)
10046608:	48100000 	.word	0x48100000

1004660c <RADIO_TIMER_CPU_WKUP_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_CPU_WKUP global interrupt.
  */
void RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004660c:	b580      	push	{r7, lr}
1004660e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 0 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 0 */
  HAL_RADIO_TIMER_CPU_WKUP_IRQHandler();
10046610:	f005 fcc8 	bl	1004bfa4 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_CPU_WKUP_IRQn 1 */

  /* USER CODE END RADIO_TIMER_CPU_WKUP_IRQn 1 */
}
10046614:	46c0      	nop			@ (mov r8, r8)
10046616:	46bd      	mov	sp, r7
10046618:	bd80      	pop	{r7, pc}

1004661a <RADIO_TIMER_ERROR_IRQHandler>:

/**
  * @brief This function handles RADIO_TIMER_ERROR global interrupt.
  */
void RADIO_TIMER_ERROR_IRQHandler(void)
{
1004661a:	b580      	push	{r7, lr}
1004661c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 0 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 0 */
  HAL_RADIO_TIMER_ERROR_IRQHandler();
1004661e:	f005 fcca 	bl	1004bfb6 <HAL_RADIO_TIMER_ERROR_IRQHandler>
  /* USER CODE BEGIN RADIO_TIMER_ERROR_IRQn 1 */

  /* USER CODE END RADIO_TIMER_ERROR_IRQn 1 */
}
10046622:	46c0      	nop			@ (mov r8, r8)
10046624:	46bd      	mov	sp, r7
10046626:	bd80      	pop	{r7, pc}

10046628 <RADIO_TXRX_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX global interrupt.
  */
void RADIO_TXRX_IRQHandler(void)
{
10046628:	b580      	push	{r7, lr}
1004662a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_IRQn 0 */

  /* USER CODE END RADIO_TXRX_IRQn 0 */
  HAL_RADIO_TXRX_IRQHandler();
1004662c:	f004 f8ba 	bl	1004a7a4 <HAL_RADIO_TXRX_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_IRQn 1 */

  /* USER CODE END RADIO_TXRX_IRQn 1 */
}
10046630:	46c0      	nop			@ (mov r8, r8)
10046632:	46bd      	mov	sp, r7
10046634:	bd80      	pop	{r7, pc}

10046636 <RADIO_TXRX_SEQ_IRQHandler>:

/**
  * @brief This function handles RADIO_TXRX_SEQ global interrupt.
  */
void RADIO_TXRX_SEQ_IRQHandler(void)
{
10046636:	b580      	push	{r7, lr}
10046638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 0 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 0 */
  HAL_RADIO_TXRX_SEQ_IRQHandler();
1004663a:	f004 f8d4 	bl	1004a7e6 <HAL_RADIO_TXRX_SEQ_IRQHandler>
  /* USER CODE BEGIN RADIO_TXRX_SEQ_IRQn 1 */

  /* USER CODE END RADIO_TXRX_SEQ_IRQn 1 */
}
1004663e:	46c0      	nop			@ (mov r8, r8)
10046640:	46bd      	mov	sp, r7
10046642:	bd80      	pop	{r7, pc}

10046644 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10046644:	b580      	push	{r7, lr}
10046646:	b086      	sub	sp, #24
10046648:	af00      	add	r7, sp, #0
1004664a:	60f8      	str	r0, [r7, #12]
1004664c:	60b9      	str	r1, [r7, #8]
1004664e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10046650:	2300      	movs	r3, #0
10046652:	617b      	str	r3, [r7, #20]
10046654:	e00a      	b.n	1004666c <_read+0x28>
  {
    *ptr++ = __io_getchar();
10046656:	e000      	b.n	1004665a <_read+0x16>
10046658:	bf00      	nop
1004665a:	0001      	movs	r1, r0
1004665c:	68bb      	ldr	r3, [r7, #8]
1004665e:	1c5a      	adds	r2, r3, #1
10046660:	60ba      	str	r2, [r7, #8]
10046662:	b2ca      	uxtb	r2, r1
10046664:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10046666:	697b      	ldr	r3, [r7, #20]
10046668:	3301      	adds	r3, #1
1004666a:	617b      	str	r3, [r7, #20]
1004666c:	697a      	ldr	r2, [r7, #20]
1004666e:	687b      	ldr	r3, [r7, #4]
10046670:	429a      	cmp	r2, r3
10046672:	dbf0      	blt.n	10046656 <_read+0x12>
  }

  return len;
10046674:	687b      	ldr	r3, [r7, #4]
}
10046676:	0018      	movs	r0, r3
10046678:	46bd      	mov	sp, r7
1004667a:	b006      	add	sp, #24
1004667c:	bd80      	pop	{r7, pc}

1004667e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
1004667e:	b580      	push	{r7, lr}
10046680:	b086      	sub	sp, #24
10046682:	af00      	add	r7, sp, #0
10046684:	60f8      	str	r0, [r7, #12]
10046686:	60b9      	str	r1, [r7, #8]
10046688:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004668a:	2300      	movs	r3, #0
1004668c:	617b      	str	r3, [r7, #20]
1004668e:	e009      	b.n	100466a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
10046690:	68bb      	ldr	r3, [r7, #8]
10046692:	1c5a      	adds	r2, r3, #1
10046694:	60ba      	str	r2, [r7, #8]
10046696:	781b      	ldrb	r3, [r3, #0]
10046698:	0018      	movs	r0, r3
1004669a:	e000      	b.n	1004669e <_write+0x20>
1004669c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
1004669e:	697b      	ldr	r3, [r7, #20]
100466a0:	3301      	adds	r3, #1
100466a2:	617b      	str	r3, [r7, #20]
100466a4:	697a      	ldr	r2, [r7, #20]
100466a6:	687b      	ldr	r3, [r7, #4]
100466a8:	429a      	cmp	r2, r3
100466aa:	dbf1      	blt.n	10046690 <_write+0x12>
  }
  return len;
100466ac:	687b      	ldr	r3, [r7, #4]
}
100466ae:	0018      	movs	r0, r3
100466b0:	46bd      	mov	sp, r7
100466b2:	b006      	add	sp, #24
100466b4:	bd80      	pop	{r7, pc}

100466b6 <_close>:

int _close(int file)
{
100466b6:	b580      	push	{r7, lr}
100466b8:	b082      	sub	sp, #8
100466ba:	af00      	add	r7, sp, #0
100466bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
100466be:	2301      	movs	r3, #1
100466c0:	425b      	negs	r3, r3
}
100466c2:	0018      	movs	r0, r3
100466c4:	46bd      	mov	sp, r7
100466c6:	b002      	add	sp, #8
100466c8:	bd80      	pop	{r7, pc}

100466ca <_fstat>:


int _fstat(int file, struct stat *st)
{
100466ca:	b580      	push	{r7, lr}
100466cc:	b082      	sub	sp, #8
100466ce:	af00      	add	r7, sp, #0
100466d0:	6078      	str	r0, [r7, #4]
100466d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100466d4:	683b      	ldr	r3, [r7, #0]
100466d6:	2280      	movs	r2, #128	@ 0x80
100466d8:	0192      	lsls	r2, r2, #6
100466da:	605a      	str	r2, [r3, #4]
  return 0;
100466dc:	2300      	movs	r3, #0
}
100466de:	0018      	movs	r0, r3
100466e0:	46bd      	mov	sp, r7
100466e2:	b002      	add	sp, #8
100466e4:	bd80      	pop	{r7, pc}

100466e6 <_isatty>:

int _isatty(int file)
{
100466e6:	b580      	push	{r7, lr}
100466e8:	b082      	sub	sp, #8
100466ea:	af00      	add	r7, sp, #0
100466ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100466ee:	2301      	movs	r3, #1
}
100466f0:	0018      	movs	r0, r3
100466f2:	46bd      	mov	sp, r7
100466f4:	b002      	add	sp, #8
100466f6:	bd80      	pop	{r7, pc}

100466f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
100466f8:	b580      	push	{r7, lr}
100466fa:	b084      	sub	sp, #16
100466fc:	af00      	add	r7, sp, #0
100466fe:	60f8      	str	r0, [r7, #12]
10046700:	60b9      	str	r1, [r7, #8]
10046702:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10046704:	2300      	movs	r3, #0
}
10046706:	0018      	movs	r0, r3
10046708:	46bd      	mov	sp, r7
1004670a:	b004      	add	sp, #16
1004670c:	bd80      	pop	{r7, pc}
	...

10046710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10046710:	b580      	push	{r7, lr}
10046712:	b086      	sub	sp, #24
10046714:	af00      	add	r7, sp, #0
10046716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10046718:	4a14      	ldr	r2, [pc, #80]	@ (1004676c <_sbrk+0x5c>)
1004671a:	4b15      	ldr	r3, [pc, #84]	@ (10046770 <_sbrk+0x60>)
1004671c:	1ad3      	subs	r3, r2, r3
1004671e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10046720:	697b      	ldr	r3, [r7, #20]
10046722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10046724:	4b13      	ldr	r3, [pc, #76]	@ (10046774 <_sbrk+0x64>)
10046726:	681b      	ldr	r3, [r3, #0]
10046728:	2b00      	cmp	r3, #0
1004672a:	d102      	bne.n	10046732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
1004672c:	4b11      	ldr	r3, [pc, #68]	@ (10046774 <_sbrk+0x64>)
1004672e:	4a12      	ldr	r2, [pc, #72]	@ (10046778 <_sbrk+0x68>)
10046730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10046732:	4b10      	ldr	r3, [pc, #64]	@ (10046774 <_sbrk+0x64>)
10046734:	681a      	ldr	r2, [r3, #0]
10046736:	687b      	ldr	r3, [r7, #4]
10046738:	18d3      	adds	r3, r2, r3
1004673a:	693a      	ldr	r2, [r7, #16]
1004673c:	429a      	cmp	r2, r3
1004673e:	d207      	bcs.n	10046750 <_sbrk+0x40>
  {
    errno = ENOMEM;
10046740:	f021 fa78 	bl	10067c34 <__errno>
10046744:	0003      	movs	r3, r0
10046746:	220c      	movs	r2, #12
10046748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
1004674a:	2301      	movs	r3, #1
1004674c:	425b      	negs	r3, r3
1004674e:	e009      	b.n	10046764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10046750:	4b08      	ldr	r3, [pc, #32]	@ (10046774 <_sbrk+0x64>)
10046752:	681b      	ldr	r3, [r3, #0]
10046754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10046756:	4b07      	ldr	r3, [pc, #28]	@ (10046774 <_sbrk+0x64>)
10046758:	681a      	ldr	r2, [r3, #0]
1004675a:	687b      	ldr	r3, [r7, #4]
1004675c:	18d2      	adds	r2, r2, r3
1004675e:	4b05      	ldr	r3, [pc, #20]	@ (10046774 <_sbrk+0x64>)
10046760:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
10046762:	68fb      	ldr	r3, [r7, #12]
}
10046764:	0018      	movs	r0, r3
10046766:	46bd      	mov	sp, r7
10046768:	b006      	add	sp, #24
1004676a:	bd80      	pop	{r7, pc}
1004676c:	20006000 	.word	0x20006000
10046770:	00000c00 	.word	0x00000c00
10046774:	20002748 	.word	0x20002748
10046778:	200050f8 	.word	0x200050f8

1004677c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
1004677c:	b590      	push	{r4, r7, lr}
1004677e:	b083      	sub	sp, #12
10046780:	af00      	add	r7, sp, #0
10046782:	0002      	movs	r2, r0
10046784:	6039      	str	r1, [r7, #0]
10046786:	1dfb      	adds	r3, r7, #7
10046788:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004678a:	1dfb      	adds	r3, r7, #7
1004678c:	781b      	ldrb	r3, [r3, #0]
1004678e:	2b7f      	cmp	r3, #127	@ 0x7f
10046790:	d828      	bhi.n	100467e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10046792:	4a2f      	ldr	r2, [pc, #188]	@ (10046850 <__NVIC_SetPriority+0xd4>)
10046794:	1dfb      	adds	r3, r7, #7
10046796:	781b      	ldrb	r3, [r3, #0]
10046798:	b25b      	sxtb	r3, r3
1004679a:	089b      	lsrs	r3, r3, #2
1004679c:	33c0      	adds	r3, #192	@ 0xc0
1004679e:	009b      	lsls	r3, r3, #2
100467a0:	589b      	ldr	r3, [r3, r2]
100467a2:	1dfa      	adds	r2, r7, #7
100467a4:	7812      	ldrb	r2, [r2, #0]
100467a6:	0011      	movs	r1, r2
100467a8:	2203      	movs	r2, #3
100467aa:	400a      	ands	r2, r1
100467ac:	00d2      	lsls	r2, r2, #3
100467ae:	21ff      	movs	r1, #255	@ 0xff
100467b0:	4091      	lsls	r1, r2
100467b2:	000a      	movs	r2, r1
100467b4:	43d2      	mvns	r2, r2
100467b6:	401a      	ands	r2, r3
100467b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100467ba:	683b      	ldr	r3, [r7, #0]
100467bc:	019b      	lsls	r3, r3, #6
100467be:	22ff      	movs	r2, #255	@ 0xff
100467c0:	401a      	ands	r2, r3
100467c2:	1dfb      	adds	r3, r7, #7
100467c4:	781b      	ldrb	r3, [r3, #0]
100467c6:	0018      	movs	r0, r3
100467c8:	2303      	movs	r3, #3
100467ca:	4003      	ands	r3, r0
100467cc:	00db      	lsls	r3, r3, #3
100467ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100467d0:	481f      	ldr	r0, [pc, #124]	@ (10046850 <__NVIC_SetPriority+0xd4>)
100467d2:	1dfb      	adds	r3, r7, #7
100467d4:	781b      	ldrb	r3, [r3, #0]
100467d6:	b25b      	sxtb	r3, r3
100467d8:	089b      	lsrs	r3, r3, #2
100467da:	430a      	orrs	r2, r1
100467dc:	33c0      	adds	r3, #192	@ 0xc0
100467de:	009b      	lsls	r3, r3, #2
100467e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
100467e2:	e031      	b.n	10046848 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100467e4:	4a1b      	ldr	r2, [pc, #108]	@ (10046854 <__NVIC_SetPriority+0xd8>)
100467e6:	1dfb      	adds	r3, r7, #7
100467e8:	781b      	ldrb	r3, [r3, #0]
100467ea:	0019      	movs	r1, r3
100467ec:	230f      	movs	r3, #15
100467ee:	400b      	ands	r3, r1
100467f0:	3b08      	subs	r3, #8
100467f2:	089b      	lsrs	r3, r3, #2
100467f4:	3306      	adds	r3, #6
100467f6:	009b      	lsls	r3, r3, #2
100467f8:	18d3      	adds	r3, r2, r3
100467fa:	3304      	adds	r3, #4
100467fc:	681b      	ldr	r3, [r3, #0]
100467fe:	1dfa      	adds	r2, r7, #7
10046800:	7812      	ldrb	r2, [r2, #0]
10046802:	0011      	movs	r1, r2
10046804:	2203      	movs	r2, #3
10046806:	400a      	ands	r2, r1
10046808:	00d2      	lsls	r2, r2, #3
1004680a:	21ff      	movs	r1, #255	@ 0xff
1004680c:	4091      	lsls	r1, r2
1004680e:	000a      	movs	r2, r1
10046810:	43d2      	mvns	r2, r2
10046812:	401a      	ands	r2, r3
10046814:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10046816:	683b      	ldr	r3, [r7, #0]
10046818:	019b      	lsls	r3, r3, #6
1004681a:	22ff      	movs	r2, #255	@ 0xff
1004681c:	401a      	ands	r2, r3
1004681e:	1dfb      	adds	r3, r7, #7
10046820:	781b      	ldrb	r3, [r3, #0]
10046822:	0018      	movs	r0, r3
10046824:	2303      	movs	r3, #3
10046826:	4003      	ands	r3, r0
10046828:	00db      	lsls	r3, r3, #3
1004682a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
1004682c:	4809      	ldr	r0, [pc, #36]	@ (10046854 <__NVIC_SetPriority+0xd8>)
1004682e:	1dfb      	adds	r3, r7, #7
10046830:	781b      	ldrb	r3, [r3, #0]
10046832:	001c      	movs	r4, r3
10046834:	230f      	movs	r3, #15
10046836:	4023      	ands	r3, r4
10046838:	3b08      	subs	r3, #8
1004683a:	089b      	lsrs	r3, r3, #2
1004683c:	430a      	orrs	r2, r1
1004683e:	3306      	adds	r3, #6
10046840:	009b      	lsls	r3, r3, #2
10046842:	18c3      	adds	r3, r0, r3
10046844:	3304      	adds	r3, #4
10046846:	601a      	str	r2, [r3, #0]
}
10046848:	46c0      	nop			@ (mov r8, r8)
1004684a:	46bd      	mov	sp, r7
1004684c:	b003      	add	sp, #12
1004684e:	bd90      	pop	{r4, r7, pc}
10046850:	e000e100 	.word	0xe000e100
10046854:	e000ed00 	.word	0xe000ed00

10046858 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
10046858:	b580      	push	{r7, lr}
1004685a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
1004685c:	f3bf 8f4f 	dsb	sy
}
10046860:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10046862:	4b04      	ldr	r3, [pc, #16]	@ (10046874 <__NVIC_SystemReset+0x1c>)
10046864:	4a04      	ldr	r2, [pc, #16]	@ (10046878 <__NVIC_SystemReset+0x20>)
10046866:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10046868:	f3bf 8f4f 	dsb	sy
}
1004686c:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
1004686e:	46c0      	nop			@ (mov r8, r8)
10046870:	e7fd      	b.n	1004686e <__NVIC_SystemReset+0x16>
10046872:	46c0      	nop			@ (mov r8, r8)
10046874:	e000ed00 	.word	0xe000ed00
10046878:	05fa0004 	.word	0x05fa0004

1004687c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
1004687c:	b590      	push	{r4, r7, lr}
1004687e:	b087      	sub	sp, #28
10046880:	af00      	add	r7, sp, #0
  uint32_t lsiBw;
#endif
  uint8_t i;
  
  /* If the reset reason is a wakeup from power save restore the context */
  if ((RCC->CSR == 0) && ((PWR->SR1 != 0)||(PWR->SR3 != 0))) {
10046882:	4a5e      	ldr	r2, [pc, #376]	@ (100469fc <SystemInit+0x180>)
10046884:	2394      	movs	r3, #148	@ 0x94
10046886:	58d3      	ldr	r3, [r2, r3]
10046888:	2b00      	cmp	r3, #0
1004688a:	d10e      	bne.n	100468aa <SystemInit+0x2e>
1004688c:	4b5c      	ldr	r3, [pc, #368]	@ (10046a00 <SystemInit+0x184>)
1004688e:	691b      	ldr	r3, [r3, #16]
10046890:	2b00      	cmp	r3, #0
10046892:	d103      	bne.n	1004689c <SystemInit+0x20>
10046894:	4b5a      	ldr	r3, [pc, #360]	@ (10046a00 <SystemInit+0x184>)
10046896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10046898:	2b00      	cmp	r3, #0
1004689a:	d006      	beq.n	100468aa <SystemInit+0x2e>
    RAM_VR.WakeupFromSleepFlag = 1; /* A wakeup from power save occurred */
1004689c:	4b59      	ldr	r3, [pc, #356]	@ (10046a04 <SystemInit+0x188>)
1004689e:	2201      	movs	r2, #1
100468a0:	609a      	str	r2, [r3, #8]
    CPUcontextRestore();            /* Restore the context */
100468a2:	f7f9 fca1 	bl	100401e8 <CPUcontextRestore>
    /* if the context restore worked properly, we should never return here */
    while(1) { 
      NVIC_SystemReset(); 
100468a6:	f7ff ffd7 	bl	10046858 <__NVIC_SystemReset>

  /* Configure the Vector Table location */
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#else
  SCB->VTOR = (uint32_t) (__vector_table);
100468aa:	4b57      	ldr	r3, [pc, #348]	@ (10046a08 <SystemInit+0x18c>)
100468ac:	4a57      	ldr	r2, [pc, #348]	@ (10046a0c <SystemInit+0x190>)
100468ae:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

  /* Store in RAM the AppBase information */
  RAM_VR.AppBase = (uint32_t) SCB->VTOR;
100468b0:	4b55      	ldr	r3, [pc, #340]	@ (10046a08 <SystemInit+0x18c>)
100468b2:	689a      	ldr	r2, [r3, #8]
100468b4:	4b53      	ldr	r3, [pc, #332]	@ (10046a04 <SystemInit+0x188>)
100468b6:	611a      	str	r2, [r3, #16]

  /* Enable all the RAM banks in retention during power save */
#if defined(PWR_CR2_RAMRET1)
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET1);
100468b8:	4b51      	ldr	r3, [pc, #324]	@ (10046a00 <SystemInit+0x184>)
100468ba:	685a      	ldr	r2, [r3, #4]
100468bc:	4b50      	ldr	r3, [pc, #320]	@ (10046a00 <SystemInit+0x184>)
100468be:	2120      	movs	r1, #32
100468c0:	430a      	orrs	r2, r1
100468c2:	605a      	str	r2, [r3, #4]
  SET_BIT(PWR->CR2, PWR_CR2_RAMRET3);
#endif /* PWR_CR2_RAMRET3 */

  /* Disable the GPIO retention in power save configuration */
#if defined(PWR_CR2_GPIORET)
  CLEAR_BIT(PWR->CR2, PWR_CR2_GPIORET);
100468c4:	4b4e      	ldr	r3, [pc, #312]	@ (10046a00 <SystemInit+0x184>)
100468c6:	685a      	ldr	r2, [r3, #4]
100468c8:	4b4d      	ldr	r3, [pc, #308]	@ (10046a00 <SystemInit+0x184>)
100468ca:	4951      	ldr	r1, [pc, #324]	@ (10046a10 <SystemInit+0x194>)
100468cc:	400a      	ands	r2, r1
100468ce:	605a      	str	r2, [r3, #4]
#endif /* PWR_CR2_GPIORET */
   
  /* SMPS setup */
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_BYPAPSS))
  {
    while(READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) != PWR_SR2_SMPSRDY); // Wait until SMPS is ready
100468d0:	46c0      	nop			@ (mov r8, r8)
100468d2:	4b4b      	ldr	r3, [pc, #300]	@ (10046a00 <SystemInit+0x184>)
100468d4:	695b      	ldr	r3, [r3, #20]
100468d6:	2204      	movs	r2, #4
100468d8:	4013      	ands	r3, r2
100468da:	2b04      	cmp	r3, #4
100468dc:	d1f9      	bne.n	100468d2 <SystemInit+0x56>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSBOMSEL, (CFG_HW_SMPS_BOM<<PWR_CR5_SMPSBOMSEL_Pos)); // Configure the SMPS BOM
100468de:	4b48      	ldr	r3, [pc, #288]	@ (10046a00 <SystemInit+0x184>)
100468e0:	69db      	ldr	r3, [r3, #28]
100468e2:	2230      	movs	r2, #48	@ 0x30
100468e4:	4393      	bics	r3, r2
100468e6:	001a      	movs	r2, r3
100468e8:	4b45      	ldr	r3, [pc, #276]	@ (10046a00 <SystemInit+0x184>)
100468ea:	2120      	movs	r1, #32
100468ec:	430a      	orrs	r2, r1
100468ee:	61da      	str	r2, [r3, #28]
  }
  if ((CFG_HW_SMPS == SMPS_ON) || (CFG_HW_SMPS == SMPS_OFF))
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_NOSMPS, (CFG_HW_SMPS<<PWR_CR5_NOSMPS_Pos)); // SMPS ON/OFF Configuration
100468f0:	4b43      	ldr	r3, [pc, #268]	@ (10046a00 <SystemInit+0x184>)
100468f2:	69da      	ldr	r2, [r3, #28]
100468f4:	4b42      	ldr	r3, [pc, #264]	@ (10046a00 <SystemInit+0x184>)
100468f6:	4947      	ldr	r1, [pc, #284]	@ (10046a14 <SystemInit+0x198>)
100468f8:	400a      	ands	r2, r1
100468fa:	61da      	str	r2, [r3, #28]
  }
  else
  {
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, (1<<PWR_CR5_SMPSFBYP_Pos)); // SMPS BYPASS Configuration
  }
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLPOPEN, (CFG_HW_SMPS_LOW_POWER<<PWR_CR5_SMPSLPOPEN_Pos)); // SMPS configuration during power save
100468fc:	4b40      	ldr	r3, [pc, #256]	@ (10046a00 <SystemInit+0x184>)
100468fe:	69da      	ldr	r2, [r3, #28]
10046900:	4b3f      	ldr	r3, [pc, #252]	@ (10046a00 <SystemInit+0x184>)
10046902:	2180      	movs	r1, #128	@ 0x80
10046904:	0049      	lsls	r1, r1, #1
10046906:	430a      	orrs	r2, r1
10046908:	61da      	str	r2, [r3, #28]
  
  /* If Trimming values from engineering in flash locations are not present load default values */
  if (*(volatile uint32_t*)VALIDITY_LOCATION != VALIDITY_TAG)
1004690a:	4b43      	ldr	r3, [pc, #268]	@ (10046a18 <SystemInit+0x19c>)
1004690c:	681b      	ldr	r3, [r3, #0]
1004690e:	4a43      	ldr	r2, [pc, #268]	@ (10046a1c <SystemInit+0x1a0>)
10046910:	4293      	cmp	r3, r2
10046912:	d055      	beq.n	100469c0 <SystemInit+0x144>

    /* Set Low Speed Internal oscillator LPMU trimming value. */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_LSI_LPMU, ((lsiLpmu << PWR_ENGTRIM_TRIM_LSI_LPMU_Pos) & PWR_ENGTRIM_TRIM_LSI_LPMU));
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMLSILPMUEN);
#else
    hsiCalib       = 0x1F;
10046914:	231f      	movs	r3, #31
10046916:	613b      	str	r3, [r7, #16]
    lsiBw          = 8;
10046918:	2308      	movs	r3, #8
1004691a:	60fb      	str	r3, [r7, #12]
    mainRegulator  = 0x0A;
1004691c:	230a      	movs	r3, #10
1004691e:	60bb      	str	r3, [r7, #8]
    smpsOutVoltage = 0x03;
10046920:	2303      	movs	r3, #3
10046922:	607b      	str	r3, [r7, #4]

    /* Low speed internal RC trimming value set by software */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSISWBW, lsiBw << RCC_CSSWCR_LSISWBW_Pos);
10046924:	4b35      	ldr	r3, [pc, #212]	@ (100469fc <SystemInit+0x180>)
10046926:	68db      	ldr	r3, [r3, #12]
10046928:	221e      	movs	r2, #30
1004692a:	4393      	bics	r3, r2
1004692c:	0019      	movs	r1, r3
1004692e:	68fb      	ldr	r3, [r7, #12]
10046930:	005a      	lsls	r2, r3, #1
10046932:	4b32      	ldr	r3, [pc, #200]	@ (100469fc <SystemInit+0x180>)
10046934:	430a      	orrs	r2, r1
10046936:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_LSISWTRIMEN);
10046938:	4b30      	ldr	r3, [pc, #192]	@ (100469fc <SystemInit+0x180>)
1004693a:	68da      	ldr	r2, [r3, #12]
1004693c:	4b2f      	ldr	r3, [pc, #188]	@ (100469fc <SystemInit+0x180>)
1004693e:	2101      	movs	r1, #1
10046940:	430a      	orrs	r2, r1
10046942:	60da      	str	r2, [r3, #12]
#endif
    
    /* Set HSI Calibration Trimming value */
    MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_HSITRIMSW, hsiCalib << RCC_CSSWCR_HSITRIMSW_Pos);
10046944:	4b2d      	ldr	r3, [pc, #180]	@ (100469fc <SystemInit+0x180>)
10046946:	68db      	ldr	r3, [r3, #12]
10046948:	4a35      	ldr	r2, [pc, #212]	@ (10046a20 <SystemInit+0x1a4>)
1004694a:	4013      	ands	r3, r2
1004694c:	0019      	movs	r1, r3
1004694e:	693b      	ldr	r3, [r7, #16]
10046950:	061a      	lsls	r2, r3, #24
10046952:	4b2a      	ldr	r3, [pc, #168]	@ (100469fc <SystemInit+0x180>)
10046954:	430a      	orrs	r2, r1
10046956:	60da      	str	r2, [r3, #12]
    SET_BIT(RCC->CSSWCR, RCC_CSSWCR_HSISWTRIMEN);
10046958:	4b28      	ldr	r3, [pc, #160]	@ (100469fc <SystemInit+0x180>)
1004695a:	68da      	ldr	r2, [r3, #12]
1004695c:	4b27      	ldr	r3, [pc, #156]	@ (100469fc <SystemInit+0x180>)
1004695e:	2180      	movs	r1, #128	@ 0x80
10046960:	0409      	lsls	r1, r1, #16
10046962:	430a      	orrs	r2, r1
10046964:	60da      	str	r2, [r3, #12]
              
    /* Set Main Regulator voltage Trimming value */ 
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_TRIM_MR, ((mainRegulator << PWR_ENGTRIM_TRIM_MR_Pos) & PWR_ENGTRIM_TRIM_MR));
10046966:	4a26      	ldr	r2, [pc, #152]	@ (10046a00 <SystemInit+0x184>)
10046968:	2394      	movs	r3, #148	@ 0x94
1004696a:	58d3      	ldr	r3, [r2, r3]
1004696c:	4a2d      	ldr	r2, [pc, #180]	@ (10046a24 <SystemInit+0x1a8>)
1004696e:	401a      	ands	r2, r3
10046970:	68bb      	ldr	r3, [r7, #8]
10046972:	0199      	lsls	r1, r3, #6
10046974:	23f0      	movs	r3, #240	@ 0xf0
10046976:	009b      	lsls	r3, r3, #2
10046978:	400b      	ands	r3, r1
1004697a:	4921      	ldr	r1, [pc, #132]	@ (10046a00 <SystemInit+0x184>)
1004697c:	4313      	orrs	r3, r2
1004697e:	2294      	movs	r2, #148	@ 0x94
10046980:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_TRIMMREN);
10046982:	4a1f      	ldr	r2, [pc, #124]	@ (10046a00 <SystemInit+0x184>)
10046984:	2394      	movs	r3, #148	@ 0x94
10046986:	58d3      	ldr	r3, [r2, r3]
10046988:	491d      	ldr	r1, [pc, #116]	@ (10046a00 <SystemInit+0x184>)
1004698a:	2220      	movs	r2, #32
1004698c:	4313      	orrs	r3, r2
1004698e:	2294      	movs	r2, #148	@ 0x94
10046990:	508b      	str	r3, [r1, r2]

    /* Set SMPS output voltage Trimming value */
    MODIFY_REG(PWR->ENGTRIM, PWR_ENGTRIM_SMPS_TRIM, ((smpsOutVoltage << PWR_ENGTRIM_SMPS_TRIM_Pos) & PWR_ENGTRIM_SMPS_TRIM));
10046992:	4a1b      	ldr	r2, [pc, #108]	@ (10046a00 <SystemInit+0x184>)
10046994:	2394      	movs	r3, #148	@ 0x94
10046996:	58d3      	ldr	r3, [r2, r3]
10046998:	4a23      	ldr	r2, [pc, #140]	@ (10046a28 <SystemInit+0x1ac>)
1004699a:	401a      	ands	r2, r3
1004699c:	687b      	ldr	r3, [r7, #4]
1004699e:	02d9      	lsls	r1, r3, #11
100469a0:	23e0      	movs	r3, #224	@ 0xe0
100469a2:	019b      	lsls	r3, r3, #6
100469a4:	400b      	ands	r3, r1
100469a6:	4916      	ldr	r1, [pc, #88]	@ (10046a00 <SystemInit+0x184>)
100469a8:	4313      	orrs	r3, r2
100469aa:	2294      	movs	r2, #148	@ 0x94
100469ac:	508b      	str	r3, [r1, r2]
    SET_BIT(PWR->ENGTRIM, PWR_ENGTRIM_SMPSTRIMEN);    
100469ae:	4a14      	ldr	r2, [pc, #80]	@ (10046a00 <SystemInit+0x184>)
100469b0:	2394      	movs	r3, #148	@ 0x94
100469b2:	58d3      	ldr	r3, [r2, r3]
100469b4:	4912      	ldr	r1, [pc, #72]	@ (10046a00 <SystemInit+0x184>)
100469b6:	2280      	movs	r2, #128	@ 0x80
100469b8:	00d2      	lsls	r2, r2, #3
100469ba:	4313      	orrs	r3, r2
100469bc:	2294      	movs	r2, #148	@ 0x94
100469be:	508b      	str	r3, [r1, r2]
  }

  /* Set all the interrupt with low priprity */
  for (i=0; i<32; i++)
100469c0:	2317      	movs	r3, #23
100469c2:	18fb      	adds	r3, r7, r3
100469c4:	2200      	movs	r2, #0
100469c6:	701a      	strb	r2, [r3, #0]
100469c8:	e00d      	b.n	100469e6 <SystemInit+0x16a>
  {
    NVIC_SetPriority((IRQn_Type)i, IRQ_LOW_PRIORITY);
100469ca:	2417      	movs	r4, #23
100469cc:	193b      	adds	r3, r7, r4
100469ce:	781b      	ldrb	r3, [r3, #0]
100469d0:	b25b      	sxtb	r3, r3
100469d2:	2103      	movs	r1, #3
100469d4:	0018      	movs	r0, r3
100469d6:	f7ff fed1 	bl	1004677c <__NVIC_SetPriority>
  for (i=0; i<32; i++)
100469da:	0021      	movs	r1, r4
100469dc:	187b      	adds	r3, r7, r1
100469de:	781a      	ldrb	r2, [r3, #0]
100469e0:	187b      	adds	r3, r7, r1
100469e2:	3201      	adds	r2, #1
100469e4:	701a      	strb	r2, [r3, #0]
100469e6:	2317      	movs	r3, #23
100469e8:	18fb      	adds	r3, r7, r3
100469ea:	781b      	ldrb	r3, [r3, #0]
100469ec:	2b1f      	cmp	r3, #31
100469ee:	d9ec      	bls.n	100469ca <SystemInit+0x14e>
  __ASM volatile ("cpsie i" : : : "memory");
100469f0:	b662      	cpsie	i
}
100469f2:	46c0      	nop			@ (mov r8, r8)
  }
  
  /* Enable all the irqs */
  __enable_irq();
}
100469f4:	46c0      	nop			@ (mov r8, r8)
100469f6:	46bd      	mov	sp, r7
100469f8:	b007      	add	sp, #28
100469fa:	bd90      	pop	{r4, r7, pc}
100469fc:	48400000 	.word	0x48400000
10046a00:	48500000 	.word	0x48500000
10046a04:	20000004 	.word	0x20000004
10046a08:	e000ed00 	.word	0xe000ed00
10046a0c:	10040000 	.word	0x10040000
10046a10:	fffffeff 	.word	0xfffffeff
10046a14:	fffffbff 	.word	0xfffffbff
10046a18:	10001ef8 	.word	0x10001ef8
10046a1c:	fcbceccc 	.word	0xfcbceccc
10046a20:	c0ffffff 	.word	0xc0ffffff
10046a24:	fffffc3f 	.word	0xfffffc3f
10046a28:	ffffc7ff 	.word	0xffffc7ff

10046a2c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
10046a2c:	b580      	push	{r7, lr}
10046a2e:	b082      	sub	sp, #8
10046a30:	af00      	add	r7, sp, #0
  uint8_t directHSE_enabled;
  uint8_t divPrescaler;

  /* Get SYSCLK source HSE or HSI+PLL64MHz */
  directHSE_enabled = (RCC->CFGR & RCC_CFGR_HSESEL) >> RCC_CFGR_HSESEL_Pos;
10046a32:	4b13      	ldr	r3, [pc, #76]	@ (10046a80 <SystemCoreClockUpdate+0x54>)
10046a34:	689b      	ldr	r3, [r3, #8]
10046a36:	085b      	lsrs	r3, r3, #1
10046a38:	b2da      	uxtb	r2, r3
10046a3a:	1dfb      	adds	r3, r7, #7
10046a3c:	2101      	movs	r1, #1
10046a3e:	400a      	ands	r2, r1
10046a40:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB06) || defined(STM32WB07)
  /* Get the clock divider */
    divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV) >> RCC_CFGR_CLKSYSDIV_Pos;
#else
  /* Get the clock divider */
  divPrescaler = (RCC->CFGR & RCC_CFGR_CLKSYSDIV_STATUS) >> RCC_CFGR_CLKSYSDIV_STATUS_Pos;
10046a42:	4b0f      	ldr	r3, [pc, #60]	@ (10046a80 <SystemCoreClockUpdate+0x54>)
10046a44:	689b      	ldr	r3, [r3, #8]
10046a46:	0a1b      	lsrs	r3, r3, #8
10046a48:	b2da      	uxtb	r2, r3
10046a4a:	1dbb      	adds	r3, r7, #6
10046a4c:	2107      	movs	r1, #7
10046a4e:	400a      	ands	r2, r1
10046a50:	701a      	strb	r2, [r3, #0]
#endif

  if (directHSE_enabled)
10046a52:	1dfb      	adds	r3, r7, #7
10046a54:	781b      	ldrb	r3, [r3, #0]
10046a56:	2b00      	cmp	r3, #0
10046a58:	d007      	beq.n	10046a6a <SystemCoreClockUpdate+0x3e>
  {
    SystemCoreClock = HSE_VALUE >> (divPrescaler - 1U);
10046a5a:	1dbb      	adds	r3, r7, #6
10046a5c:	781b      	ldrb	r3, [r3, #0]
10046a5e:	3b01      	subs	r3, #1
10046a60:	4a08      	ldr	r2, [pc, #32]	@ (10046a84 <SystemCoreClockUpdate+0x58>)
10046a62:	40da      	lsrs	r2, r3
10046a64:	4b08      	ldr	r3, [pc, #32]	@ (10046a88 <SystemCoreClockUpdate+0x5c>)
10046a66:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SystemCoreClock = HSI_VALUE >> divPrescaler;
  }  
}
10046a68:	e005      	b.n	10046a76 <SystemCoreClockUpdate+0x4a>
    SystemCoreClock = HSI_VALUE >> divPrescaler;
10046a6a:	1dbb      	adds	r3, r7, #6
10046a6c:	781b      	ldrb	r3, [r3, #0]
10046a6e:	4a07      	ldr	r2, [pc, #28]	@ (10046a8c <SystemCoreClockUpdate+0x60>)
10046a70:	40da      	lsrs	r2, r3
10046a72:	4b05      	ldr	r3, [pc, #20]	@ (10046a88 <SystemCoreClockUpdate+0x5c>)
10046a74:	601a      	str	r2, [r3, #0]
}
10046a76:	46c0      	nop			@ (mov r8, r8)
10046a78:	46bd      	mov	sp, r7
10046a7a:	b002      	add	sp, #8
10046a7c:	bd80      	pop	{r7, pc}
10046a7e:	46c0      	nop			@ (mov r8, r8)
10046a80:	48400000 	.word	0x48400000
10046a84:	01e84800 	.word	0x01e84800
10046a88:	20002cbc 	.word	0x20002cbc
10046a8c:	03d09000 	.word	0x03d09000

10046a90 <Reset_Handler>:

	.section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
10046a90:	4810      	ldr	r0, [pc, #64]	@ (10046ad4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
10046a92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
10046a94:	f7ff fef2 	bl	1004687c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
10046a98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10046a9a:	e003      	b.n	10046aa4 <LoopCopyDataInit>

10046a9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
10046a9c:	4b0e      	ldr	r3, [pc, #56]	@ (10046ad8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10046a9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10046aa0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10046aa2:	3104      	adds	r1, #4

10046aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
10046aa4:	480d      	ldr	r0, [pc, #52]	@ (10046adc <LoopForever+0xa>)
  ldr  r3, =_edata
10046aa6:	4b0e      	ldr	r3, [pc, #56]	@ (10046ae0 <LoopForever+0xe>)
  adds  r2, r0, r1
10046aa8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10046aaa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10046aac:	d3f6      	bcc.n	10046a9c <CopyDataInit>
  ldr  r2, =_sbss
10046aae:	4a0d      	ldr	r2, [pc, #52]	@ (10046ae4 <LoopForever+0x12>)
  b  LoopFillZerobss
10046ab0:	e002      	b.n	10046ab8 <LoopFillZerobss>

10046ab2 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
10046ab2:	2300      	movs	r3, #0
  str  r3, [r2]
10046ab4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10046ab6:	3204      	adds	r2, #4

10046ab8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
10046ab8:	4b0b      	ldr	r3, [pc, #44]	@ (10046ae8 <LoopForever+0x16>)
  cmp  r2, r3
10046aba:	429a      	cmp	r2, r3
  bcc  FillZerobss
10046abc:	d3f9      	bcc.n	10046ab2 <FillZerobss>
  ldr  r2, =_sbssblue
10046abe:	4a0b      	ldr	r2, [pc, #44]	@ (10046aec <LoopForever+0x1a>)
  b  LoopFillZeroBlueRam
10046ac0:	e002      	b.n	10046ac8 <LoopFillZeroBlueRam>

10046ac2 <FillZerobssram>:


FillZerobssram:
  movs  r3, #0
10046ac2:	2300      	movs	r3, #0
  str  r3, [r2]
10046ac4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
10046ac6:	3204      	adds	r2, #4

10046ac8 <LoopFillZeroBlueRam>:

LoopFillZeroBlueRam:
  ldr  r3, = _ebssblue
10046ac8:	4b09      	ldr	r3, [pc, #36]	@ (10046af0 <LoopForever+0x1e>)
  cmp  r2, r3
10046aca:	429a      	cmp	r2, r3
  bcc  FillZerobssram
10046acc:	d3f9      	bcc.n	10046ac2 <FillZerobssram>

/* Call the application's entry point.*/
  bl  main
10046ace:	f7ff fa33 	bl	10045f38 <main>

10046ad2 <LoopForever>:

LoopForever:
    b LoopForever
10046ad2:	e7fe      	b.n	10046ad2 <LoopForever>
   ldr   r0, =_estack
10046ad4:	20006000 	.word	0x20006000
  ldr  r3, =_sidata
10046ad8:	10069954 	.word	0x10069954
  ldr  r0, =_sdata
10046adc:	20002c74 	.word	0x20002c74
  ldr  r3, =_edata
10046ae0:	20002ebc 	.word	0x20002ebc
  ldr  r2, =_sbss
10046ae4:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
10046ae8:	20002c74 	.word	0x20002c74
  ldr  r2, =_sbssblue
10046aec:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebssblue
10046af0:	20000194 	.word	0x20000194

10046af4 <ADC_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
10046af4:	e7fe      	b.n	10046af4 <ADC_IRQHandler>
	...

10046af8 <LL_PWR_IsEnabledPUPDCfg>:
  * @brief  Check if pull-up and pull-down configuration is enabled
  * @rmtoll CR1          APC           LL_PWR_IsEnabledPUPDCfg
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledPUPDCfg(void)
{
10046af8:	b580      	push	{r7, lr}
10046afa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_APC) == (PWR_CR1_APC)) ? 1UL : 0UL);
10046afc:	4b05      	ldr	r3, [pc, #20]	@ (10046b14 <LL_PWR_IsEnabledPUPDCfg+0x1c>)
10046afe:	681b      	ldr	r3, [r3, #0]
10046b00:	2210      	movs	r2, #16
10046b02:	4013      	ands	r3, r2
10046b04:	2b10      	cmp	r3, #16
10046b06:	d101      	bne.n	10046b0c <LL_PWR_IsEnabledPUPDCfg+0x14>
10046b08:	2301      	movs	r3, #1
10046b0a:	e000      	b.n	10046b0e <LL_PWR_IsEnabledPUPDCfg+0x16>
10046b0c:	2300      	movs	r3, #0
}
10046b0e:	0018      	movs	r0, r3
10046b10:	46bd      	mov	sp, r7
10046b12:	bd80      	pop	{r7, pc}
10046b14:	48500000 	.word	0x48500000

10046b18 <LL_PWR_EnableGPIOPullUp>:
  *         @arg @ref LL_PWR_GPIO_BIT_14
  *         @arg @ref LL_PWR_GPIO_BIT_15
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10046b18:	b580      	push	{r7, lr}
10046b1a:	b082      	sub	sp, #8
10046b1c:	af00      	add	r7, sp, #0
10046b1e:	6078      	str	r0, [r7, #4]
10046b20:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(*((__IO uint32_t *)(GPIO + 4UL)), GPIONumber);
10046b22:	687b      	ldr	r3, [r7, #4]
10046b24:	3304      	adds	r3, #4
10046b26:	681a      	ldr	r2, [r3, #0]
10046b28:	683b      	ldr	r3, [r7, #0]
10046b2a:	43d9      	mvns	r1, r3
10046b2c:	687b      	ldr	r3, [r7, #4]
10046b2e:	3304      	adds	r3, #4
10046b30:	400a      	ands	r2, r1
10046b32:	601a      	str	r2, [r3, #0]
  SET_BIT(*((__IO uint32_t *)GPIO), GPIONumber);
10046b34:	687b      	ldr	r3, [r7, #4]
10046b36:	6819      	ldr	r1, [r3, #0]
10046b38:	687b      	ldr	r3, [r7, #4]
10046b3a:	683a      	ldr	r2, [r7, #0]
10046b3c:	430a      	orrs	r2, r1
10046b3e:	601a      	str	r2, [r3, #0]
}
10046b40:	46c0      	nop			@ (mov r8, r8)
10046b42:	46bd      	mov	sp, r7
10046b44:	b002      	add	sp, #8
10046b46:	bd80      	pop	{r7, pc}

10046b48 <LL_AHB1_GRP1_EnableClock>:
{
10046b48:	b580      	push	{r7, lr}
10046b4a:	b084      	sub	sp, #16
10046b4c:	af00      	add	r7, sp, #0
10046b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
10046b50:	4b07      	ldr	r3, [pc, #28]	@ (10046b70 <LL_AHB1_GRP1_EnableClock+0x28>)
10046b52:	6d19      	ldr	r1, [r3, #80]	@ 0x50
10046b54:	4b06      	ldr	r3, [pc, #24]	@ (10046b70 <LL_AHB1_GRP1_EnableClock+0x28>)
10046b56:	687a      	ldr	r2, [r7, #4]
10046b58:	430a      	orrs	r2, r1
10046b5a:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
10046b5c:	4b04      	ldr	r3, [pc, #16]	@ (10046b70 <LL_AHB1_GRP1_EnableClock+0x28>)
10046b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
10046b60:	687a      	ldr	r2, [r7, #4]
10046b62:	4013      	ands	r3, r2
10046b64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046b66:	68fb      	ldr	r3, [r7, #12]
}
10046b68:	46c0      	nop			@ (mov r8, r8)
10046b6a:	46bd      	mov	sp, r7
10046b6c:	b004      	add	sp, #16
10046b6e:	bd80      	pop	{r7, pc}
10046b70:	48400000 	.word	0x48400000

10046b74 <LL_APB1_GRP1_EnableClock>:
{
10046b74:	b580      	push	{r7, lr}
10046b76:	b084      	sub	sp, #16
10046b78:	af00      	add	r7, sp, #0
10046b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
10046b7c:	4b07      	ldr	r3, [pc, #28]	@ (10046b9c <LL_APB1_GRP1_EnableClock+0x28>)
10046b7e:	6d99      	ldr	r1, [r3, #88]	@ 0x58
10046b80:	4b06      	ldr	r3, [pc, #24]	@ (10046b9c <LL_APB1_GRP1_EnableClock+0x28>)
10046b82:	687a      	ldr	r2, [r7, #4]
10046b84:	430a      	orrs	r2, r1
10046b86:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
10046b88:	4b04      	ldr	r3, [pc, #16]	@ (10046b9c <LL_APB1_GRP1_EnableClock+0x28>)
10046b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
10046b8c:	687a      	ldr	r2, [r7, #4]
10046b8e:	4013      	ands	r3, r2
10046b90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
10046b92:	68fb      	ldr	r3, [r7, #12]
}
10046b94:	46c0      	nop			@ (mov r8, r8)
10046b96:	46bd      	mov	sp, r7
10046b98:	b004      	add	sp, #16
10046b9a:	bd80      	pop	{r7, pc}
10046b9c:	48400000 	.word	0x48400000

10046ba0 <LL_APB1_GRP1_DisableClock>:
{
10046ba0:	b580      	push	{r7, lr}
10046ba2:	b082      	sub	sp, #8
10046ba4:	af00      	add	r7, sp, #0
10046ba6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR, Periphs);
10046ba8:	4b05      	ldr	r3, [pc, #20]	@ (10046bc0 <LL_APB1_GRP1_DisableClock+0x20>)
10046baa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
10046bac:	687b      	ldr	r3, [r7, #4]
10046bae:	43d9      	mvns	r1, r3
10046bb0:	4b03      	ldr	r3, [pc, #12]	@ (10046bc0 <LL_APB1_GRP1_DisableClock+0x20>)
10046bb2:	400a      	ands	r2, r1
10046bb4:	659a      	str	r2, [r3, #88]	@ 0x58
}
10046bb6:	46c0      	nop			@ (mov r8, r8)
10046bb8:	46bd      	mov	sp, r7
10046bba:	b002      	add	sp, #8
10046bbc:	bd80      	pop	{r7, pc}
10046bbe:	46c0      	nop			@ (mov r8, r8)
10046bc0:	48400000 	.word	0x48400000

10046bc4 <BSP_LED_Init>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10046bc4:	b590      	push	{r4, r7, lr}
10046bc6:	b089      	sub	sp, #36	@ 0x24
10046bc8:	af00      	add	r7, sp, #0
10046bca:	0002      	movs	r2, r0
10046bcc:	1dfb      	adds	r3, r7, #7
10046bce:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef GPIO_Init;

  /* Enable the GPIO_LED Clock */
  if (Led == LD1)
10046bd0:	1dfb      	adds	r3, r7, #7
10046bd2:	781b      	ldrb	r3, [r3, #0]
10046bd4:	2b00      	cmp	r3, #0
10046bd6:	d103      	bne.n	10046be0 <BSP_LED_Init+0x1c>
  {
    LD1_GPIO_CLK_ENABLE();
10046bd8:	2008      	movs	r0, #8
10046bda:	f7ff ffb5 	bl	10046b48 <LL_AHB1_GRP1_EnableClock>
10046bde:	e00a      	b.n	10046bf6 <BSP_LED_Init+0x32>
  }
  else if (Led == LD2)
10046be0:	1dfb      	adds	r3, r7, #7
10046be2:	781b      	ldrb	r3, [r3, #0]
10046be4:	2b01      	cmp	r3, #1
10046be6:	d103      	bne.n	10046bf0 <BSP_LED_Init+0x2c>
  {
    LD2_GPIO_CLK_ENABLE();
10046be8:	2008      	movs	r0, #8
10046bea:	f7ff ffad 	bl	10046b48 <LL_AHB1_GRP1_EnableClock>
10046bee:	e002      	b.n	10046bf6 <BSP_LED_Init+0x32>
  }
  else /* Led = LD3 */
  {
    LD3_GPIO_CLK_ENABLE();
10046bf0:	2008      	movs	r0, #8
10046bf2:	f7ff ffa9 	bl	10046b48 <LL_AHB1_GRP1_EnableClock>
  }

  /* configure the GPIO_LED pin */
  GPIO_Init.Pin   = LED_PIN[Led];
10046bf6:	1dfb      	adds	r3, r7, #7
10046bf8:	781a      	ldrb	r2, [r3, #0]
10046bfa:	4b28      	ldr	r3, [pc, #160]	@ (10046c9c <BSP_LED_Init+0xd8>)
10046bfc:	0052      	lsls	r2, r2, #1
10046bfe:	5ad3      	ldrh	r3, [r2, r3]
10046c00:	001a      	movs	r2, r3
10046c02:	240c      	movs	r4, #12
10046c04:	193b      	adds	r3, r7, r4
10046c06:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
10046c08:	193b      	adds	r3, r7, r4
10046c0a:	2201      	movs	r2, #1
10046c0c:	605a      	str	r2, [r3, #4]
  GPIO_Init.Pull  = GPIO_PULLUP;
10046c0e:	193b      	adds	r3, r7, r4
10046c10:	2201      	movs	r2, #1
10046c12:	609a      	str	r2, [r3, #8]
  GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
10046c14:	193b      	adds	r3, r7, r4
10046c16:	2202      	movs	r2, #2
10046c18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
10046c1a:	1dfb      	adds	r3, r7, #7
10046c1c:	781a      	ldrb	r2, [r3, #0]
10046c1e:	4b20      	ldr	r3, [pc, #128]	@ (10046ca0 <BSP_LED_Init+0xdc>)
10046c20:	0092      	lsls	r2, r2, #2
10046c22:	58d3      	ldr	r3, [r2, r3]
10046c24:	193a      	adds	r2, r7, r4
10046c26:	0011      	movs	r1, r2
10046c28:	0018      	movs	r0, r3
10046c2a:	f000 fd49 	bl	100476c0 <HAL_GPIO_Init>

  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10046c2e:	f7ff ff63 	bl	10046af8 <LL_PWR_IsEnabledPUPDCfg>
10046c32:	1e03      	subs	r3, r0, #0
10046c34:	d01f      	beq.n	10046c76 <BSP_LED_Init+0xb2>
  {
    if (LED_PORT[Led] == GPIOA)
10046c36:	1dfb      	adds	r3, r7, #7
10046c38:	781a      	ldrb	r2, [r3, #0]
10046c3a:	4b19      	ldr	r3, [pc, #100]	@ (10046ca0 <BSP_LED_Init+0xdc>)
10046c3c:	0092      	lsls	r2, r2, #2
10046c3e:	58d2      	ldr	r2, [r2, r3]
10046c40:	2390      	movs	r3, #144	@ 0x90
10046c42:	05db      	lsls	r3, r3, #23
10046c44:	429a      	cmp	r2, r3
10046c46:	d106      	bne.n	10046c56 <BSP_LED_Init+0x92>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10046c48:	193b      	adds	r3, r7, r4
10046c4a:	681b      	ldr	r3, [r3, #0]
10046c4c:	4a15      	ldr	r2, [pc, #84]	@ (10046ca4 <BSP_LED_Init+0xe0>)
10046c4e:	0019      	movs	r1, r3
10046c50:	0010      	movs	r0, r2
10046c52:	f7ff ff61 	bl	10046b18 <LL_PWR_EnableGPIOPullUp>
    }
     if (LED_PORT[Led] == GPIOB)
10046c56:	1dfb      	adds	r3, r7, #7
10046c58:	781a      	ldrb	r2, [r3, #0]
10046c5a:	4b11      	ldr	r3, [pc, #68]	@ (10046ca0 <BSP_LED_Init+0xdc>)
10046c5c:	0092      	lsls	r2, r2, #2
10046c5e:	58d3      	ldr	r3, [r2, r3]
10046c60:	4a11      	ldr	r2, [pc, #68]	@ (10046ca8 <BSP_LED_Init+0xe4>)
10046c62:	4293      	cmp	r3, r2
10046c64:	d107      	bne.n	10046c76 <BSP_LED_Init+0xb2>
    {
      LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_B, GPIO_Init.Pin);
10046c66:	230c      	movs	r3, #12
10046c68:	18fb      	adds	r3, r7, r3
10046c6a:	681b      	ldr	r3, [r3, #0]
10046c6c:	4a0f      	ldr	r2, [pc, #60]	@ (10046cac <BSP_LED_Init+0xe8>)
10046c6e:	0019      	movs	r1, r3
10046c70:	0010      	movs	r0, r2
10046c72:	f7ff ff51 	bl	10046b18 <LL_PWR_EnableGPIOPullUp>
    }
  }

  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10046c76:	1dfb      	adds	r3, r7, #7
10046c78:	781a      	ldrb	r2, [r3, #0]
10046c7a:	4b09      	ldr	r3, [pc, #36]	@ (10046ca0 <BSP_LED_Init+0xdc>)
10046c7c:	0092      	lsls	r2, r2, #2
10046c7e:	58d0      	ldr	r0, [r2, r3]
10046c80:	1dfb      	adds	r3, r7, #7
10046c82:	781a      	ldrb	r2, [r3, #0]
10046c84:	4b05      	ldr	r3, [pc, #20]	@ (10046c9c <BSP_LED_Init+0xd8>)
10046c86:	0052      	lsls	r2, r2, #1
10046c88:	5ad3      	ldrh	r3, [r2, r3]
10046c8a:	2201      	movs	r2, #1
10046c8c:	0019      	movs	r1, r3
10046c8e:	f000 ffbc 	bl	10047c0a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10046c92:	2300      	movs	r3, #0
}
10046c94:	0018      	movs	r0, r3
10046c96:	46bd      	mov	sp, r7
10046c98:	b009      	add	sp, #36	@ 0x24
10046c9a:	bd90      	pop	{r4, r7, pc}
10046c9c:	20002cc0 	.word	0x20002cc0
10046ca0:	20002cc8 	.word	0x20002cc8
10046ca4:	48500020 	.word	0x48500020
10046ca8:	48100000 	.word	0x48100000
10046cac:	48500028 	.word	0x48500028

10046cb0 <BSP_LED_On>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10046cb0:	b580      	push	{r7, lr}
10046cb2:	b082      	sub	sp, #8
10046cb4:	af00      	add	r7, sp, #0
10046cb6:	0002      	movs	r2, r0
10046cb8:	1dfb      	adds	r3, r7, #7
10046cba:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
10046cbc:	1dfb      	adds	r3, r7, #7
10046cbe:	781a      	ldrb	r2, [r3, #0]
10046cc0:	4b08      	ldr	r3, [pc, #32]	@ (10046ce4 <BSP_LED_On+0x34>)
10046cc2:	0092      	lsls	r2, r2, #2
10046cc4:	58d0      	ldr	r0, [r2, r3]
10046cc6:	1dfb      	adds	r3, r7, #7
10046cc8:	781a      	ldrb	r2, [r3, #0]
10046cca:	4b07      	ldr	r3, [pc, #28]	@ (10046ce8 <BSP_LED_On+0x38>)
10046ccc:	0052      	lsls	r2, r2, #1
10046cce:	5ad3      	ldrh	r3, [r2, r3]
10046cd0:	2200      	movs	r2, #0
10046cd2:	0019      	movs	r1, r3
10046cd4:	f000 ff99 	bl	10047c0a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10046cd8:	2300      	movs	r3, #0
}
10046cda:	0018      	movs	r0, r3
10046cdc:	46bd      	mov	sp, r7
10046cde:	b002      	add	sp, #8
10046ce0:	bd80      	pop	{r7, pc}
10046ce2:	46c0      	nop			@ (mov r8, r8)
10046ce4:	20002cc8 	.word	0x20002cc8
10046ce8:	20002cc0 	.word	0x20002cc0

10046cec <BSP_LED_Off>:
  *     @arg  LD2
  *     @arg  LD3
  * @retval BSP error code.
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
10046cec:	b580      	push	{r7, lr}
10046cee:	b082      	sub	sp, #8
10046cf0:	af00      	add	r7, sp, #0
10046cf2:	0002      	movs	r2, r0
10046cf4:	1dfb      	adds	r3, r7, #7
10046cf6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10046cf8:	1dfb      	adds	r3, r7, #7
10046cfa:	781a      	ldrb	r2, [r3, #0]
10046cfc:	4b08      	ldr	r3, [pc, #32]	@ (10046d20 <BSP_LED_Off+0x34>)
10046cfe:	0092      	lsls	r2, r2, #2
10046d00:	58d0      	ldr	r0, [r2, r3]
10046d02:	1dfb      	adds	r3, r7, #7
10046d04:	781a      	ldrb	r2, [r3, #0]
10046d06:	4b07      	ldr	r3, [pc, #28]	@ (10046d24 <BSP_LED_Off+0x38>)
10046d08:	0052      	lsls	r2, r2, #1
10046d0a:	5ad3      	ldrh	r3, [r2, r3]
10046d0c:	2201      	movs	r2, #1
10046d0e:	0019      	movs	r1, r3
10046d10:	f000 ff7b 	bl	10047c0a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
10046d14:	2300      	movs	r3, #0
}
10046d16:	0018      	movs	r0, r3
10046d18:	46bd      	mov	sp, r7
10046d1a:	b002      	add	sp, #8
10046d1c:	bd80      	pop	{r7, pc}
10046d1e:	46c0      	nop			@ (mov r8, r8)
10046d20:	20002cc8 	.word	0x20002cc8
10046d24:	20002cc0 	.word	0x20002cc0

10046d28 <BSP_PB_IRQHandler>:
  * @param  GPIO_Pin Contains the pin state of GPIO when the interrupt occurred
  * @retval None.
  */

void BSP_PB_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10046d28:	b580      	push	{r7, lr}
10046d2a:	b082      	sub	sp, #8
10046d2c:	af00      	add	r7, sp, #0
10046d2e:	6078      	str	r0, [r7, #4]
10046d30:	000a      	movs	r2, r1
10046d32:	1cbb      	adds	r3, r7, #2
10046d34:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_EXTI_IRQHandler( GPIOx, GPIO_Pin);
10046d36:	1cbb      	adds	r3, r7, #2
10046d38:	881a      	ldrh	r2, [r3, #0]
10046d3a:	687b      	ldr	r3, [r7, #4]
10046d3c:	0011      	movs	r1, r2
10046d3e:	0018      	movs	r0, r3
10046d40:	f000 ff80 	bl	10047c44 <HAL_GPIO_EXTI_IRQHandler>
}
10046d44:	46c0      	nop			@ (mov r8, r8)
10046d46:	46bd      	mov	sp, r7
10046d48:	b002      	add	sp, #8
10046d4a:	bd80      	pop	{r7, pc}

10046d4c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a COM_InitTypeDef structure that contains the
  *                  configuration information for the specified COM peripheral.
  * @retval BSP error code.
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
10046d4c:	b580      	push	{r7, lr}
10046d4e:	b084      	sub	sp, #16
10046d50:	af00      	add	r7, sp, #0
10046d52:	0002      	movs	r2, r0
10046d54:	6039      	str	r1, [r7, #0]
10046d56:	1dfb      	adds	r3, r7, #7
10046d58:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
10046d5a:	2300      	movs	r3, #0
10046d5c:	60fb      	str	r3, [r7, #12]

  if (COM_Init == NULL)
10046d5e:	683b      	ldr	r3, [r7, #0]
10046d60:	2b00      	cmp	r3, #0
10046d62:	d103      	bne.n	10046d6c <BSP_COM_Init+0x20>
  {
    status = BSP_ERROR_WRONG_PARAM;
10046d64:	2302      	movs	r3, #2
10046d66:	425b      	negs	r3, r3
10046d68:	60fb      	str	r3, [r7, #12]
10046d6a:	e05a      	b.n	10046e22 <BSP_COM_Init+0xd6>
  }
  else
  {
    /* Initialize COM instance */
    hcom_uart[COM].Instance = COM_UART[COM];
10046d6c:	1dfb      	adds	r3, r7, #7
10046d6e:	7819      	ldrb	r1, [r3, #0]
10046d70:	1dfb      	adds	r3, r7, #7
10046d72:	781a      	ldrb	r2, [r3, #0]
10046d74:	4b2d      	ldr	r3, [pc, #180]	@ (10046e2c <BSP_COM_Init+0xe0>)
10046d76:	0089      	lsls	r1, r1, #2
10046d78:	58c9      	ldr	r1, [r1, r3]
10046d7a:	4b2d      	ldr	r3, [pc, #180]	@ (10046e30 <BSP_COM_Init+0xe4>)
10046d7c:	20cc      	movs	r0, #204	@ 0xcc
10046d7e:	4342      	muls	r2, r0
10046d80:	50d1      	str	r1, [r2, r3]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    UART_MspInit(&hcom_uart[COM]);
#else
    if (IsComMspCbValid[COM] == 0U)
10046d82:	1dfb      	adds	r3, r7, #7
10046d84:	781a      	ldrb	r2, [r3, #0]
10046d86:	4b2b      	ldr	r3, [pc, #172]	@ (10046e34 <BSP_COM_Init+0xe8>)
10046d88:	0092      	lsls	r2, r2, #2
10046d8a:	58d3      	ldr	r3, [r2, r3]
10046d8c:	2b00      	cmp	r3, #0
10046d8e:	d109      	bne.n	10046da4 <BSP_COM_Init+0x58>
    {
      /* Register the MSP callbacks */
      if (BSP_COM_RegisterDefaultMspCallbacks(COM) != BSP_ERROR_NONE)
10046d90:	1dfb      	adds	r3, r7, #7
10046d92:	781b      	ldrb	r3, [r3, #0]
10046d94:	0018      	movs	r0, r3
10046d96:	f000 f84f 	bl	10046e38 <BSP_COM_RegisterDefaultMspCallbacks>
10046d9a:	1e03      	subs	r3, r0, #0
10046d9c:	d002      	beq.n	10046da4 <BSP_COM_Init+0x58>
      {
        status = BSP_ERROR_MSP_FAILURE;
10046d9e:	230a      	movs	r3, #10
10046da0:	425b      	negs	r3, r3
10046da2:	60fb      	str	r3, [r7, #12]
      }
    }
#endif

    if (status == BSP_ERROR_NONE)
10046da4:	68fb      	ldr	r3, [r7, #12]
10046da6:	2b00      	cmp	r3, #0
10046da8:	d10f      	bne.n	10046dca <BSP_COM_Init+0x7e>
    {
      if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
10046daa:	1dfb      	adds	r3, r7, #7
10046dac:	781b      	ldrb	r3, [r3, #0]
10046dae:	22cc      	movs	r2, #204	@ 0xcc
10046db0:	435a      	muls	r2, r3
10046db2:	4b1f      	ldr	r3, [pc, #124]	@ (10046e30 <BSP_COM_Init+0xe4>)
10046db4:	18d3      	adds	r3, r2, r3
10046db6:	683a      	ldr	r2, [r7, #0]
10046db8:	0011      	movs	r1, r2
10046dba:	0018      	movs	r0, r3
10046dbc:	f000 f87a 	bl	10046eb4 <MX_USART1_Init>
10046dc0:	1e03      	subs	r3, r0, #0
10046dc2:	d002      	beq.n	10046dca <BSP_COM_Init+0x7e>
      {
        status = BSP_ERROR_PERIPH_FAILURE;
10046dc4:	2304      	movs	r3, #4
10046dc6:	425b      	negs	r3, r3
10046dc8:	60fb      	str	r3, [r7, #12]
      }
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&hcom_uart[COM], UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
10046dca:	1dfb      	adds	r3, r7, #7
10046dcc:	781b      	ldrb	r3, [r3, #0]
10046dce:	22cc      	movs	r2, #204	@ 0xcc
10046dd0:	435a      	muls	r2, r3
10046dd2:	4b17      	ldr	r3, [pc, #92]	@ (10046e30 <BSP_COM_Init+0xe4>)
10046dd4:	18d3      	adds	r3, r2, r3
10046dd6:	2100      	movs	r1, #0
10046dd8:	0018      	movs	r0, r3
10046dda:	f007 fb6b 	bl	1004e4b4 <HAL_UARTEx_SetTxFifoThreshold>
10046dde:	1e03      	subs	r3, r0, #0
10046de0:	d002      	beq.n	10046de8 <BSP_COM_Init+0x9c>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
10046de2:	2304      	movs	r3, #4
10046de4:	425b      	negs	r3, r3
10046de6:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&hcom_uart[COM], UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
10046de8:	1dfb      	adds	r3, r7, #7
10046dea:	781b      	ldrb	r3, [r3, #0]
10046dec:	22cc      	movs	r2, #204	@ 0xcc
10046dee:	435a      	muls	r2, r3
10046df0:	4b0f      	ldr	r3, [pc, #60]	@ (10046e30 <BSP_COM_Init+0xe4>)
10046df2:	18d3      	adds	r3, r2, r3
10046df4:	2100      	movs	r1, #0
10046df6:	0018      	movs	r0, r3
10046df8:	f007 fb9c 	bl	1004e534 <HAL_UARTEx_SetRxFifoThreshold>
10046dfc:	1e03      	subs	r3, r0, #0
10046dfe:	d002      	beq.n	10046e06 <BSP_COM_Init+0xba>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
10046e00:	2304      	movs	r3, #4
10046e02:	425b      	negs	r3, r3
10046e04:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_UARTEx_EnableFifoMode(&hcom_uart[COM]) != HAL_OK)
10046e06:	1dfb      	adds	r3, r7, #7
10046e08:	781b      	ldrb	r3, [r3, #0]
10046e0a:	22cc      	movs	r2, #204	@ 0xcc
10046e0c:	435a      	muls	r2, r3
10046e0e:	4b08      	ldr	r3, [pc, #32]	@ (10046e30 <BSP_COM_Init+0xe4>)
10046e10:	18d3      	adds	r3, r2, r3
10046e12:	0018      	movs	r0, r3
10046e14:	f007 fb11 	bl	1004e43a <HAL_UARTEx_EnableFifoMode>
10046e18:	1e03      	subs	r3, r0, #0
10046e1a:	d002      	beq.n	10046e22 <BSP_COM_Init+0xd6>
    {
      status = BSP_ERROR_PERIPH_FAILURE;
10046e1c:	2304      	movs	r3, #4
10046e1e:	425b      	negs	r3, r3
10046e20:	60fb      	str	r3, [r7, #12]
    }
  }

  return status;
10046e22:	68fb      	ldr	r3, [r7, #12]
}
10046e24:	0018      	movs	r0, r3
10046e26:	46bd      	mov	sp, r7
10046e28:	b004      	add	sp, #16
10046e2a:	bd80      	pop	{r7, pc}
10046e2c:	20002cd4 	.word	0x20002cd4
10046e30:	2000274c 	.word	0x2000274c
10046e34:	20002818 	.word	0x20002818

10046e38 <BSP_COM_RegisterDefaultMspCallbacks>:
  * @param  COM COM port.
  *          This parameter can be COM1.
  * @retval BSP status.
  */
int32_t BSP_COM_RegisterDefaultMspCallbacks(COM_TypeDef COM)
{
10046e38:	b580      	push	{r7, lr}
10046e3a:	b084      	sub	sp, #16
10046e3c:	af00      	add	r7, sp, #0
10046e3e:	0002      	movs	r2, r0
10046e40:	1dfb      	adds	r3, r7, #7
10046e42:	701a      	strb	r2, [r3, #0]
  int32_t status = BSP_ERROR_NONE;
10046e44:	2300      	movs	r3, #0
10046e46:	60fb      	str	r3, [r7, #12]

  /* Register MspInit/MspDeInit callbacks */
  if (HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPINIT_CB_ID, UART_MspInit) != HAL_OK)
10046e48:	1dfb      	adds	r3, r7, #7
10046e4a:	781b      	ldrb	r3, [r3, #0]
10046e4c:	22cc      	movs	r2, #204	@ 0xcc
10046e4e:	435a      	muls	r2, r3
10046e50:	4b14      	ldr	r3, [pc, #80]	@ (10046ea4 <BSP_COM_RegisterDefaultMspCallbacks+0x6c>)
10046e52:	18d3      	adds	r3, r2, r3
10046e54:	4a14      	ldr	r2, [pc, #80]	@ (10046ea8 <BSP_COM_RegisterDefaultMspCallbacks+0x70>)
10046e56:	210b      	movs	r1, #11
10046e58:	0018      	movs	r0, r3
10046e5a:	f006 fa57 	bl	1004d30c <HAL_UART_RegisterCallback>
10046e5e:	1e03      	subs	r3, r0, #0
10046e60:	d003      	beq.n	10046e6a <BSP_COM_RegisterDefaultMspCallbacks+0x32>
  {
    status = BSP_ERROR_PERIPH_FAILURE;
10046e62:	2304      	movs	r3, #4
10046e64:	425b      	negs	r3, r3
10046e66:	60fb      	str	r3, [r7, #12]
10046e68:	e016      	b.n	10046e98 <BSP_COM_RegisterDefaultMspCallbacks+0x60>
  }
  else if (HAL_UART_RegisterCallback(&hcom_uart[COM], HAL_UART_MSPDEINIT_CB_ID, UART_MspDeInit) != HAL_OK)
10046e6a:	1dfb      	adds	r3, r7, #7
10046e6c:	781b      	ldrb	r3, [r3, #0]
10046e6e:	22cc      	movs	r2, #204	@ 0xcc
10046e70:	435a      	muls	r2, r3
10046e72:	4b0c      	ldr	r3, [pc, #48]	@ (10046ea4 <BSP_COM_RegisterDefaultMspCallbacks+0x6c>)
10046e74:	18d3      	adds	r3, r2, r3
10046e76:	4a0d      	ldr	r2, [pc, #52]	@ (10046eac <BSP_COM_RegisterDefaultMspCallbacks+0x74>)
10046e78:	210c      	movs	r1, #12
10046e7a:	0018      	movs	r0, r3
10046e7c:	f006 fa46 	bl	1004d30c <HAL_UART_RegisterCallback>
10046e80:	1e03      	subs	r3, r0, #0
10046e82:	d003      	beq.n	10046e8c <BSP_COM_RegisterDefaultMspCallbacks+0x54>
  {
    status = BSP_ERROR_PERIPH_FAILURE;
10046e84:	2304      	movs	r3, #4
10046e86:	425b      	negs	r3, r3
10046e88:	60fb      	str	r3, [r7, #12]
10046e8a:	e005      	b.n	10046e98 <BSP_COM_RegisterDefaultMspCallbacks+0x60>
  }
  else
  {
    IsComMspCbValid[COM] = 1U;
10046e8c:	1dfb      	adds	r3, r7, #7
10046e8e:	781a      	ldrb	r2, [r3, #0]
10046e90:	4b07      	ldr	r3, [pc, #28]	@ (10046eb0 <BSP_COM_RegisterDefaultMspCallbacks+0x78>)
10046e92:	0092      	lsls	r2, r2, #2
10046e94:	2101      	movs	r1, #1
10046e96:	50d1      	str	r1, [r2, r3]
  }
  /* Return BSP status */
  return status;
10046e98:	68fb      	ldr	r3, [r7, #12]
}
10046e9a:	0018      	movs	r0, r3
10046e9c:	46bd      	mov	sp, r7
10046e9e:	b004      	add	sp, #16
10046ea0:	bd80      	pop	{r7, pc}
10046ea2:	46c0      	nop			@ (mov r8, r8)
10046ea4:	2000274c 	.word	0x2000274c
10046ea8:	10046f19 	.word	0x10046f19
10046eac:	10046fa5 	.word	0x10046fa5
10046eb0:	20002818 	.word	0x20002818

10046eb4 <MX_USART1_Init>:
  * @param  huart UART handle.
  * @param  MXInit UART initialization structure.
  * @retval HAL status.
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef* huart, MX_UART_InitTypeDef *MXInit)
{
10046eb4:	b580      	push	{r7, lr}
10046eb6:	b082      	sub	sp, #8
10046eb8:	af00      	add	r7, sp, #0
10046eba:	6078      	str	r0, [r7, #4]
10046ebc:	6039      	str	r1, [r7, #0]
  /* UART configuration */
  huart->Init.BaudRate       = MXInit->BaudRate;
10046ebe:	683b      	ldr	r3, [r7, #0]
10046ec0:	681a      	ldr	r2, [r3, #0]
10046ec2:	687b      	ldr	r3, [r7, #4]
10046ec4:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength     = (uint32_t) MXInit->WordLength;
10046ec6:	683b      	ldr	r3, [r7, #0]
10046ec8:	685a      	ldr	r2, [r3, #4]
10046eca:	687b      	ldr	r3, [r7, #4]
10046ecc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits       = (uint32_t) MXInit->StopBits;
10046ece:	683b      	ldr	r3, [r7, #0]
10046ed0:	891b      	ldrh	r3, [r3, #8]
10046ed2:	001a      	movs	r2, r3
10046ed4:	687b      	ldr	r3, [r7, #4]
10046ed6:	60da      	str	r2, [r3, #12]
  huart->Init.Parity         = (uint32_t) MXInit->Parity;
10046ed8:	683b      	ldr	r3, [r7, #0]
10046eda:	895b      	ldrh	r3, [r3, #10]
10046edc:	001a      	movs	r2, r3
10046ede:	687b      	ldr	r3, [r7, #4]
10046ee0:	611a      	str	r2, [r3, #16]
  huart->Init.Mode           = UART_MODE_TX_RX;
10046ee2:	687b      	ldr	r3, [r7, #4]
10046ee4:	220c      	movs	r2, #12
10046ee6:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl      = (uint32_t) MXInit->HwFlowCtl;
10046ee8:	683b      	ldr	r3, [r7, #0]
10046eea:	899b      	ldrh	r3, [r3, #12]
10046eec:	001a      	movs	r2, r3
10046eee:	687b      	ldr	r3, [r7, #4]
10046ef0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling   = UART_OVERSAMPLING_8;
10046ef2:	687b      	ldr	r3, [r7, #4]
10046ef4:	2280      	movs	r2, #128	@ 0x80
10046ef6:	0212      	lsls	r2, r2, #8
10046ef8:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
10046efa:	687b      	ldr	r3, [r7, #4]
10046efc:	2200      	movs	r2, #0
10046efe:	621a      	str	r2, [r3, #32]
  huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
10046f00:	687b      	ldr	r3, [r7, #4]
10046f02:	2200      	movs	r2, #0
10046f04:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_UART_Init(huart);
10046f06:	687b      	ldr	r3, [r7, #4]
10046f08:	0018      	movs	r0, r3
10046f0a:	f006 f997 	bl	1004d23c <HAL_UART_Init>
10046f0e:	0003      	movs	r3, r0
}
10046f10:	0018      	movs	r0, r3
10046f12:	46bd      	mov	sp, r7
10046f14:	b002      	add	sp, #8
10046f16:	bd80      	pop	{r7, pc}

10046f18 <UART_MspInit>:
  * @brief  Initialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspInit(UART_HandleTypeDef *huart)
{
10046f18:	b590      	push	{r4, r7, lr}
10046f1a:	b089      	sub	sp, #36	@ 0x24
10046f1c:	af00      	add	r7, sp, #0
10046f1e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable COM and GPIO clocks */
  COM1_TX_GPIO_CLK_ENABLE();
10046f20:	2004      	movs	r0, #4
10046f22:	f7ff fe11 	bl	10046b48 <LL_AHB1_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
10046f26:	2008      	movs	r0, #8
10046f28:	f7ff fe0e 	bl	10046b48 <LL_AHB1_GRP1_EnableClock>
  COM1_CLK_ENABLE();
10046f2c:	2380      	movs	r3, #128	@ 0x80
10046f2e:	00db      	lsls	r3, r3, #3
10046f30:	0018      	movs	r0, r3
10046f32:	f7ff fe1f 	bl	10046b74 <LL_APB1_GRP1_EnableClock>

  /* Configure COM Tx as alternate function */
  GPIO_Init.Pin       = COM1_TX_PIN;
10046f36:	240c      	movs	r4, #12
10046f38:	193b      	adds	r3, r7, r4
10046f3a:	2202      	movs	r2, #2
10046f3c:	601a      	str	r2, [r3, #0]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
10046f3e:	193b      	adds	r3, r7, r4
10046f40:	2202      	movs	r2, #2
10046f42:	605a      	str	r2, [r3, #4]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;
10046f44:	193b      	adds	r3, r7, r4
10046f46:	2202      	movs	r2, #2
10046f48:	60da      	str	r2, [r3, #12]
  GPIO_Init.Pull      = GPIO_PULLUP;
10046f4a:	193b      	adds	r3, r7, r4
10046f4c:	2201      	movs	r2, #1
10046f4e:	609a      	str	r2, [r3, #8]
  GPIO_Init.Alternate = COM1_TX_AF;
10046f50:	193b      	adds	r3, r7, r4
10046f52:	2202      	movs	r2, #2
10046f54:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &GPIO_Init);
10046f56:	193a      	adds	r2, r7, r4
10046f58:	2390      	movs	r3, #144	@ 0x90
10046f5a:	05db      	lsls	r3, r3, #23
10046f5c:	0011      	movs	r1, r2
10046f5e:	0018      	movs	r0, r3
10046f60:	f000 fbae 	bl	100476c0 <HAL_GPIO_Init>
  if( LL_PWR_IsEnabledPUPDCfg() != 0)
10046f64:	f7ff fdc8 	bl	10046af8 <LL_PWR_IsEnabledPUPDCfg>
10046f68:	1e03      	subs	r3, r0, #0
10046f6a:	d006      	beq.n	10046f7a <UART_MspInit+0x62>
  {
    LL_PWR_EnableGPIOPullUp( LL_PWR_GPIO_A, GPIO_Init.Pin);
10046f6c:	193b      	adds	r3, r7, r4
10046f6e:	681b      	ldr	r3, [r3, #0]
10046f70:	4a0a      	ldr	r2, [pc, #40]	@ (10046f9c <UART_MspInit+0x84>)
10046f72:	0019      	movs	r1, r3
10046f74:	0010      	movs	r0, r2
10046f76:	f7ff fdcf 	bl	10046b18 <LL_PWR_EnableGPIOPullUp>
  }
  /* Configure COM Rx as alternate function */
  GPIO_Init.Pin       = COM1_RX_PIN;
10046f7a:	210c      	movs	r1, #12
10046f7c:	187b      	adds	r3, r7, r1
10046f7e:	2201      	movs	r2, #1
10046f80:	601a      	str	r2, [r3, #0]
  GPIO_Init.Alternate = COM1_RX_AF;
10046f82:	187b      	adds	r3, r7, r1
10046f84:	2200      	movs	r2, #0
10046f86:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &GPIO_Init);
10046f88:	187b      	adds	r3, r7, r1
10046f8a:	4a05      	ldr	r2, [pc, #20]	@ (10046fa0 <UART_MspInit+0x88>)
10046f8c:	0019      	movs	r1, r3
10046f8e:	0010      	movs	r0, r2
10046f90:	f000 fb96 	bl	100476c0 <HAL_GPIO_Init>
}
10046f94:	46c0      	nop			@ (mov r8, r8)
10046f96:	46bd      	mov	sp, r7
10046f98:	b009      	add	sp, #36	@ 0x24
10046f9a:	bd90      	pop	{r4, r7, pc}
10046f9c:	48500020 	.word	0x48500020
10046fa0:	48100000 	.word	0x48100000

10046fa4 <UART_MspDeInit>:
  * @brief  Deinitialize UART MSP.
  * @param  huart UART handle.
  * @retval None.
  */
static void UART_MspDeInit(UART_HandleTypeDef *huart)
{
10046fa4:	b580      	push	{r7, lr}
10046fa6:	b082      	sub	sp, #8
10046fa8:	af00      	add	r7, sp, #0
10046faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Disable GPIOs and COM clock */
  HAL_GPIO_DeInit(COM1_TX_GPIO_PORT, COM1_TX_PIN);
10046fac:	2390      	movs	r3, #144	@ 0x90
10046fae:	05db      	lsls	r3, r3, #23
10046fb0:	2102      	movs	r1, #2
10046fb2:	0018      	movs	r0, r3
10046fb4:	f000 fd29 	bl	10047a0a <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(COM1_RX_GPIO_PORT, COM1_RX_PIN);
10046fb8:	4b06      	ldr	r3, [pc, #24]	@ (10046fd4 <UART_MspDeInit+0x30>)
10046fba:	2101      	movs	r1, #1
10046fbc:	0018      	movs	r0, r3
10046fbe:	f000 fd24 	bl	10047a0a <HAL_GPIO_DeInit>
  COM1_CLK_DISABLE();
10046fc2:	2380      	movs	r3, #128	@ 0x80
10046fc4:	00db      	lsls	r3, r3, #3
10046fc6:	0018      	movs	r0, r3
10046fc8:	f7ff fdea 	bl	10046ba0 <LL_APB1_GRP1_DisableClock>
}
10046fcc:	46c0      	nop			@ (mov r8, r8)
10046fce:	46bd      	mov	sp, r7
10046fd0:	b002      	add	sp, #8
10046fd2:	bd80      	pop	{r7, pc}
10046fd4:	48100000 	.word	0x48100000

10046fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10046fd8:	b580      	push	{r7, lr}
10046fda:	b082      	sub	sp, #8
10046fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
10046fde:	1dfb      	adds	r3, r7, #7
10046fe0:	2200      	movs	r2, #0
10046fe2:	701a      	strb	r2, [r3, #0]

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10046fe4:	2003      	movs	r0, #3
10046fe6:	f000 f80f 	bl	10047008 <HAL_InitTick>
10046fea:	1e03      	subs	r3, r0, #0
10046fec:	d003      	beq.n	10046ff6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
10046fee:	1dfb      	adds	r3, r7, #7
10046ff0:	2201      	movs	r2, #1
10046ff2:	701a      	strb	r2, [r3, #0]
10046ff4:	e001      	b.n	10046ffa <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
10046ff6:	f7ff f93b 	bl	10046270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
10046ffa:	1dfb      	adds	r3, r7, #7
10046ffc:	781b      	ldrb	r3, [r3, #0]
}
10046ffe:	0018      	movs	r0, r3
10047000:	46bd      	mov	sp, r7
10047002:	b002      	add	sp, #8
10047004:	bd80      	pop	{r7, pc}
	...

10047008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10047008:	b590      	push	{r4, r7, lr}
1004700a:	b085      	sub	sp, #20
1004700c:	af00      	add	r7, sp, #0
1004700e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
10047010:	230f      	movs	r3, #15
10047012:	18fb      	adds	r3, r7, r3
10047014:	2200      	movs	r2, #0
10047016:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
10047018:	4b1d      	ldr	r3, [pc, #116]	@ (10047090 <HAL_InitTick+0x88>)
1004701a:	781b      	ldrb	r3, [r3, #0]
1004701c:	2b00      	cmp	r3, #0
1004701e:	d02c      	beq.n	1004707a <HAL_InitTick+0x72>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / (1000U / uwTickFreq)) == 0U)
10047020:	f005 fbac 	bl	1004c77c <HAL_RCC_GetSysClockFreq>
10047024:	0004      	movs	r4, r0
10047026:	4b1a      	ldr	r3, [pc, #104]	@ (10047090 <HAL_InitTick+0x88>)
10047028:	781b      	ldrb	r3, [r3, #0]
1004702a:	0019      	movs	r1, r3
1004702c:	23fa      	movs	r3, #250	@ 0xfa
1004702e:	0098      	lsls	r0, r3, #2
10047030:	f7f9 f906 	bl	10040240 <__udivsi3>
10047034:	0003      	movs	r3, r0
10047036:	0019      	movs	r1, r3
10047038:	0020      	movs	r0, r4
1004703a:	f7f9 f901 	bl	10040240 <__udivsi3>
1004703e:	0003      	movs	r3, r0
10047040:	0018      	movs	r0, r3
10047042:	f000 f944 	bl	100472ce <HAL_SYSTICK_Config>
10047046:	1e03      	subs	r3, r0, #0
10047048:	d112      	bne.n	10047070 <HAL_InitTick+0x68>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
1004704a:	687b      	ldr	r3, [r7, #4]
1004704c:	2b03      	cmp	r3, #3
1004704e:	d80a      	bhi.n	10047066 <HAL_InitTick+0x5e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
10047050:	6879      	ldr	r1, [r7, #4]
10047052:	2301      	movs	r3, #1
10047054:	425b      	negs	r3, r3
10047056:	2200      	movs	r2, #0
10047058:	0018      	movs	r0, r3
1004705a:	f000 f913 	bl	10047284 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
1004705e:	4b0d      	ldr	r3, [pc, #52]	@ (10047094 <HAL_InitTick+0x8c>)
10047060:	687a      	ldr	r2, [r7, #4]
10047062:	601a      	str	r2, [r3, #0]
10047064:	e00d      	b.n	10047082 <HAL_InitTick+0x7a>
      }
      else
      {
        status = HAL_ERROR;
10047066:	230f      	movs	r3, #15
10047068:	18fb      	adds	r3, r7, r3
1004706a:	2201      	movs	r2, #1
1004706c:	701a      	strb	r2, [r3, #0]
1004706e:	e008      	b.n	10047082 <HAL_InitTick+0x7a>
      }
    }
    else
    {
      status = HAL_ERROR;
10047070:	230f      	movs	r3, #15
10047072:	18fb      	adds	r3, r7, r3
10047074:	2201      	movs	r2, #1
10047076:	701a      	strb	r2, [r3, #0]
10047078:	e003      	b.n	10047082 <HAL_InitTick+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
1004707a:	230f      	movs	r3, #15
1004707c:	18fb      	adds	r3, r7, r3
1004707e:	2201      	movs	r2, #1
10047080:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
10047082:	230f      	movs	r3, #15
10047084:	18fb      	adds	r3, r7, r3
10047086:	781b      	ldrb	r3, [r3, #0]
}
10047088:	0018      	movs	r0, r3
1004708a:	46bd      	mov	sp, r7
1004708c:	b005      	add	sp, #20
1004708e:	bd90      	pop	{r4, r7, pc}
10047090:	20002cdc 	.word	0x20002cdc
10047094:	20002cd8 	.word	0x20002cd8

10047098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10047098:	b580      	push	{r7, lr}
1004709a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
1004709c:	4b05      	ldr	r3, [pc, #20]	@ (100470b4 <HAL_IncTick+0x1c>)
1004709e:	781b      	ldrb	r3, [r3, #0]
100470a0:	001a      	movs	r2, r3
100470a2:	4b05      	ldr	r3, [pc, #20]	@ (100470b8 <HAL_IncTick+0x20>)
100470a4:	681b      	ldr	r3, [r3, #0]
100470a6:	18d2      	adds	r2, r2, r3
100470a8:	4b03      	ldr	r3, [pc, #12]	@ (100470b8 <HAL_IncTick+0x20>)
100470aa:	601a      	str	r2, [r3, #0]
}
100470ac:	46c0      	nop			@ (mov r8, r8)
100470ae:	46bd      	mov	sp, r7
100470b0:	bd80      	pop	{r7, pc}
100470b2:	46c0      	nop			@ (mov r8, r8)
100470b4:	20002cdc 	.word	0x20002cdc
100470b8:	2000281c 	.word	0x2000281c

100470bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
100470bc:	b580      	push	{r7, lr}
100470be:	af00      	add	r7, sp, #0
  return uwTick;
100470c0:	4b02      	ldr	r3, [pc, #8]	@ (100470cc <HAL_GetTick+0x10>)
100470c2:	681b      	ldr	r3, [r3, #0]
}
100470c4:	0018      	movs	r0, r3
100470c6:	46bd      	mov	sp, r7
100470c8:	bd80      	pop	{r7, pc}
100470ca:	46c0      	nop			@ (mov r8, r8)
100470cc:	2000281c 	.word	0x2000281c

100470d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
100470d0:	b580      	push	{r7, lr}
100470d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
100470d4:	4b02      	ldr	r3, [pc, #8]	@ (100470e0 <HAL_GetTickPrio+0x10>)
100470d6:	681b      	ldr	r3, [r3, #0]
}
100470d8:	0018      	movs	r0, r3
100470da:	46bd      	mov	sp, r7
100470dc:	bd80      	pop	{r7, pc}
100470de:	46c0      	nop			@ (mov r8, r8)
100470e0:	20002cd8 	.word	0x20002cd8

100470e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
100470e4:	b580      	push	{r7, lr}
100470e6:	b084      	sub	sp, #16
100470e8:	af00      	add	r7, sp, #0
100470ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
100470ec:	f7ff ffe6 	bl	100470bc <HAL_GetTick>
100470f0:	0003      	movs	r3, r0
100470f2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
100470f4:	687b      	ldr	r3, [r7, #4]
100470f6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
100470f8:	68fb      	ldr	r3, [r7, #12]
100470fa:	3301      	adds	r3, #1
100470fc:	d005      	beq.n	1004710a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
100470fe:	4b0a      	ldr	r3, [pc, #40]	@ (10047128 <HAL_Delay+0x44>)
10047100:	781b      	ldrb	r3, [r3, #0]
10047102:	001a      	movs	r2, r3
10047104:	68fb      	ldr	r3, [r7, #12]
10047106:	189b      	adds	r3, r3, r2
10047108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
1004710a:	46c0      	nop			@ (mov r8, r8)
1004710c:	f7ff ffd6 	bl	100470bc <HAL_GetTick>
10047110:	0002      	movs	r2, r0
10047112:	68bb      	ldr	r3, [r7, #8]
10047114:	1ad3      	subs	r3, r2, r3
10047116:	68fa      	ldr	r2, [r7, #12]
10047118:	429a      	cmp	r2, r3
1004711a:	d8f7      	bhi.n	1004710c <HAL_Delay+0x28>
  {
  }
}
1004711c:	46c0      	nop			@ (mov r8, r8)
1004711e:	46c0      	nop			@ (mov r8, r8)
10047120:	46bd      	mov	sp, r7
10047122:	b004      	add	sp, #16
10047124:	bd80      	pop	{r7, pc}
10047126:	46c0      	nop			@ (mov r8, r8)
10047128:	20002cdc 	.word	0x20002cdc

1004712c <__NVIC_EnableIRQ>:
{
1004712c:	b580      	push	{r7, lr}
1004712e:	b082      	sub	sp, #8
10047130:	af00      	add	r7, sp, #0
10047132:	0002      	movs	r2, r0
10047134:	1dfb      	adds	r3, r7, #7
10047136:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10047138:	1dfb      	adds	r3, r7, #7
1004713a:	781b      	ldrb	r3, [r3, #0]
1004713c:	2b7f      	cmp	r3, #127	@ 0x7f
1004713e:	d809      	bhi.n	10047154 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10047140:	1dfb      	adds	r3, r7, #7
10047142:	781b      	ldrb	r3, [r3, #0]
10047144:	001a      	movs	r2, r3
10047146:	231f      	movs	r3, #31
10047148:	401a      	ands	r2, r3
1004714a:	4b04      	ldr	r3, [pc, #16]	@ (1004715c <__NVIC_EnableIRQ+0x30>)
1004714c:	2101      	movs	r1, #1
1004714e:	4091      	lsls	r1, r2
10047150:	000a      	movs	r2, r1
10047152:	601a      	str	r2, [r3, #0]
}
10047154:	46c0      	nop			@ (mov r8, r8)
10047156:	46bd      	mov	sp, r7
10047158:	b002      	add	sp, #8
1004715a:	bd80      	pop	{r7, pc}
1004715c:	e000e100 	.word	0xe000e100

10047160 <__NVIC_SetPriority>:
{
10047160:	b590      	push	{r4, r7, lr}
10047162:	b083      	sub	sp, #12
10047164:	af00      	add	r7, sp, #0
10047166:	0002      	movs	r2, r0
10047168:	6039      	str	r1, [r7, #0]
1004716a:	1dfb      	adds	r3, r7, #7
1004716c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004716e:	1dfb      	adds	r3, r7, #7
10047170:	781b      	ldrb	r3, [r3, #0]
10047172:	2b7f      	cmp	r3, #127	@ 0x7f
10047174:	d828      	bhi.n	100471c8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047176:	4a2f      	ldr	r2, [pc, #188]	@ (10047234 <__NVIC_SetPriority+0xd4>)
10047178:	1dfb      	adds	r3, r7, #7
1004717a:	781b      	ldrb	r3, [r3, #0]
1004717c:	b25b      	sxtb	r3, r3
1004717e:	089b      	lsrs	r3, r3, #2
10047180:	33c0      	adds	r3, #192	@ 0xc0
10047182:	009b      	lsls	r3, r3, #2
10047184:	589b      	ldr	r3, [r3, r2]
10047186:	1dfa      	adds	r2, r7, #7
10047188:	7812      	ldrb	r2, [r2, #0]
1004718a:	0011      	movs	r1, r2
1004718c:	2203      	movs	r2, #3
1004718e:	400a      	ands	r2, r1
10047190:	00d2      	lsls	r2, r2, #3
10047192:	21ff      	movs	r1, #255	@ 0xff
10047194:	4091      	lsls	r1, r2
10047196:	000a      	movs	r2, r1
10047198:	43d2      	mvns	r2, r2
1004719a:	401a      	ands	r2, r3
1004719c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
1004719e:	683b      	ldr	r3, [r7, #0]
100471a0:	019b      	lsls	r3, r3, #6
100471a2:	22ff      	movs	r2, #255	@ 0xff
100471a4:	401a      	ands	r2, r3
100471a6:	1dfb      	adds	r3, r7, #7
100471a8:	781b      	ldrb	r3, [r3, #0]
100471aa:	0018      	movs	r0, r3
100471ac:	2303      	movs	r3, #3
100471ae:	4003      	ands	r3, r0
100471b0:	00db      	lsls	r3, r3, #3
100471b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100471b4:	481f      	ldr	r0, [pc, #124]	@ (10047234 <__NVIC_SetPriority+0xd4>)
100471b6:	1dfb      	adds	r3, r7, #7
100471b8:	781b      	ldrb	r3, [r3, #0]
100471ba:	b25b      	sxtb	r3, r3
100471bc:	089b      	lsrs	r3, r3, #2
100471be:	430a      	orrs	r2, r1
100471c0:	33c0      	adds	r3, #192	@ 0xc0
100471c2:	009b      	lsls	r3, r3, #2
100471c4:	501a      	str	r2, [r3, r0]
}
100471c6:	e031      	b.n	1004722c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
100471c8:	4a1b      	ldr	r2, [pc, #108]	@ (10047238 <__NVIC_SetPriority+0xd8>)
100471ca:	1dfb      	adds	r3, r7, #7
100471cc:	781b      	ldrb	r3, [r3, #0]
100471ce:	0019      	movs	r1, r3
100471d0:	230f      	movs	r3, #15
100471d2:	400b      	ands	r3, r1
100471d4:	3b08      	subs	r3, #8
100471d6:	089b      	lsrs	r3, r3, #2
100471d8:	3306      	adds	r3, #6
100471da:	009b      	lsls	r3, r3, #2
100471dc:	18d3      	adds	r3, r2, r3
100471de:	3304      	adds	r3, #4
100471e0:	681b      	ldr	r3, [r3, #0]
100471e2:	1dfa      	adds	r2, r7, #7
100471e4:	7812      	ldrb	r2, [r2, #0]
100471e6:	0011      	movs	r1, r2
100471e8:	2203      	movs	r2, #3
100471ea:	400a      	ands	r2, r1
100471ec:	00d2      	lsls	r2, r2, #3
100471ee:	21ff      	movs	r1, #255	@ 0xff
100471f0:	4091      	lsls	r1, r2
100471f2:	000a      	movs	r2, r1
100471f4:	43d2      	mvns	r2, r2
100471f6:	401a      	ands	r2, r3
100471f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
100471fa:	683b      	ldr	r3, [r7, #0]
100471fc:	019b      	lsls	r3, r3, #6
100471fe:	22ff      	movs	r2, #255	@ 0xff
10047200:	401a      	ands	r2, r3
10047202:	1dfb      	adds	r3, r7, #7
10047204:	781b      	ldrb	r3, [r3, #0]
10047206:	0018      	movs	r0, r3
10047208:	2303      	movs	r3, #3
1004720a:	4003      	ands	r3, r0
1004720c:	00db      	lsls	r3, r3, #3
1004720e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10047210:	4809      	ldr	r0, [pc, #36]	@ (10047238 <__NVIC_SetPriority+0xd8>)
10047212:	1dfb      	adds	r3, r7, #7
10047214:	781b      	ldrb	r3, [r3, #0]
10047216:	001c      	movs	r4, r3
10047218:	230f      	movs	r3, #15
1004721a:	4023      	ands	r3, r4
1004721c:	3b08      	subs	r3, #8
1004721e:	089b      	lsrs	r3, r3, #2
10047220:	430a      	orrs	r2, r1
10047222:	3306      	adds	r3, #6
10047224:	009b      	lsls	r3, r3, #2
10047226:	18c3      	adds	r3, r0, r3
10047228:	3304      	adds	r3, #4
1004722a:	601a      	str	r2, [r3, #0]
}
1004722c:	46c0      	nop			@ (mov r8, r8)
1004722e:	46bd      	mov	sp, r7
10047230:	b003      	add	sp, #12
10047232:	bd90      	pop	{r4, r7, pc}
10047234:	e000e100 	.word	0xe000e100
10047238:	e000ed00 	.word	0xe000ed00

1004723c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
1004723c:	b580      	push	{r7, lr}
1004723e:	b082      	sub	sp, #8
10047240:	af00      	add	r7, sp, #0
10047242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10047244:	687b      	ldr	r3, [r7, #4]
10047246:	1e5a      	subs	r2, r3, #1
10047248:	2380      	movs	r3, #128	@ 0x80
1004724a:	045b      	lsls	r3, r3, #17
1004724c:	429a      	cmp	r2, r3
1004724e:	d301      	bcc.n	10047254 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
10047250:	2301      	movs	r3, #1
10047252:	e010      	b.n	10047276 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10047254:	4b0a      	ldr	r3, [pc, #40]	@ (10047280 <SysTick_Config+0x44>)
10047256:	687a      	ldr	r2, [r7, #4]
10047258:	3a01      	subs	r2, #1
1004725a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
1004725c:	2301      	movs	r3, #1
1004725e:	425b      	negs	r3, r3
10047260:	2103      	movs	r1, #3
10047262:	0018      	movs	r0, r3
10047264:	f7ff ff7c 	bl	10047160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10047268:	4b05      	ldr	r3, [pc, #20]	@ (10047280 <SysTick_Config+0x44>)
1004726a:	2200      	movs	r2, #0
1004726c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1004726e:	4b04      	ldr	r3, [pc, #16]	@ (10047280 <SysTick_Config+0x44>)
10047270:	2207      	movs	r2, #7
10047272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10047274:	2300      	movs	r3, #0
}
10047276:	0018      	movs	r0, r3
10047278:	46bd      	mov	sp, r7
1004727a:	b002      	add	sp, #8
1004727c:	bd80      	pop	{r7, pc}
1004727e:	46c0      	nop			@ (mov r8, r8)
10047280:	e000e010 	.word	0xe000e010

10047284 <HAL_NVIC_SetPriority>:
  *         with stm32wb0x devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10047284:	b580      	push	{r7, lr}
10047286:	b084      	sub	sp, #16
10047288:	af00      	add	r7, sp, #0
1004728a:	60b9      	str	r1, [r7, #8]
1004728c:	607a      	str	r2, [r7, #4]
1004728e:	210f      	movs	r1, #15
10047290:	187b      	adds	r3, r7, r1
10047292:	1c02      	adds	r2, r0, #0
10047294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
10047296:	68ba      	ldr	r2, [r7, #8]
10047298:	187b      	adds	r3, r7, r1
1004729a:	781b      	ldrb	r3, [r3, #0]
1004729c:	b25b      	sxtb	r3, r3
1004729e:	0011      	movs	r1, r2
100472a0:	0018      	movs	r0, r3
100472a2:	f7ff ff5d 	bl	10047160 <__NVIC_SetPriority>
}
100472a6:	46c0      	nop			@ (mov r8, r8)
100472a8:	46bd      	mov	sp, r7
100472aa:	b004      	add	sp, #16
100472ac:	bd80      	pop	{r7, pc}

100472ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file)
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
100472ae:	b580      	push	{r7, lr}
100472b0:	b082      	sub	sp, #8
100472b2:	af00      	add	r7, sp, #0
100472b4:	0002      	movs	r2, r0
100472b6:	1dfb      	adds	r3, r7, #7
100472b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
100472ba:	1dfb      	adds	r3, r7, #7
100472bc:	781b      	ldrb	r3, [r3, #0]
100472be:	b25b      	sxtb	r3, r3
100472c0:	0018      	movs	r0, r3
100472c2:	f7ff ff33 	bl	1004712c <__NVIC_EnableIRQ>
}
100472c6:	46c0      	nop			@ (mov r8, r8)
100472c8:	46bd      	mov	sp, r7
100472ca:	b002      	add	sp, #8
100472cc:	bd80      	pop	{r7, pc}

100472ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
100472ce:	b580      	push	{r7, lr}
100472d0:	b082      	sub	sp, #8
100472d2:	af00      	add	r7, sp, #0
100472d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
100472d6:	687b      	ldr	r3, [r7, #4]
100472d8:	0018      	movs	r0, r3
100472da:	f7ff ffaf 	bl	1004723c <SysTick_Config>
100472de:	0003      	movs	r3, r0
}
100472e0:	0018      	movs	r0, r3
100472e2:	46bd      	mov	sp, r7
100472e4:	b002      	add	sp, #8
100472e6:	bd80      	pop	{r7, pc}

100472e8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
100472e8:	b580      	push	{r7, lr}
100472ea:	b082      	sub	sp, #8
100472ec:	af00      	add	r7, sp, #0
100472ee:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
100472f0:	687b      	ldr	r3, [r7, #4]
100472f2:	2b00      	cmp	r3, #0
100472f4:	d101      	bne.n	100472fa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
100472f6:	2301      	movs	r3, #1
100472f8:	e031      	b.n	1004735e <HAL_DMA_Abort+0x76>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
100472fa:	687b      	ldr	r3, [r7, #4]
100472fc:	2225      	movs	r2, #37	@ 0x25
100472fe:	5c9b      	ldrb	r3, [r3, r2]
10047300:	b2db      	uxtb	r3, r3
10047302:	2b02      	cmp	r3, #2
10047304:	d008      	beq.n	10047318 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
10047306:	687b      	ldr	r3, [r7, #4]
10047308:	2204      	movs	r2, #4
1004730a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
1004730c:	687b      	ldr	r3, [r7, #4]
1004730e:	2224      	movs	r2, #36	@ 0x24
10047310:	2100      	movs	r1, #0
10047312:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
10047314:	2301      	movs	r3, #1
10047316:	e022      	b.n	1004735e <HAL_DMA_Abort+0x76>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10047318:	687b      	ldr	r3, [r7, #4]
1004731a:	681b      	ldr	r3, [r3, #0]
1004731c:	681a      	ldr	r2, [r3, #0]
1004731e:	687b      	ldr	r3, [r7, #4]
10047320:	681b      	ldr	r3, [r3, #0]
10047322:	210e      	movs	r1, #14
10047324:	438a      	bics	r2, r1
10047326:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
10047328:	687b      	ldr	r3, [r7, #4]
1004732a:	681b      	ldr	r3, [r3, #0]
1004732c:	681a      	ldr	r2, [r3, #0]
1004732e:	687b      	ldr	r3, [r7, #4]
10047330:	681b      	ldr	r3, [r3, #0]
10047332:	2101      	movs	r1, #1
10047334:	438a      	bics	r2, r1
10047336:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
10047338:	687b      	ldr	r3, [r7, #4]
1004733a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004733c:	223c      	movs	r2, #60	@ 0x3c
1004733e:	401a      	ands	r2, r3
10047340:	687b      	ldr	r3, [r7, #4]
10047342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
10047344:	2101      	movs	r1, #1
10047346:	4091      	lsls	r1, r2
10047348:	000a      	movs	r2, r1
1004734a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
1004734c:	687b      	ldr	r3, [r7, #4]
1004734e:	2225      	movs	r2, #37	@ 0x25
10047350:	2101      	movs	r1, #1
10047352:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
10047354:	687b      	ldr	r3, [r7, #4]
10047356:	2224      	movs	r2, #36	@ 0x24
10047358:	2100      	movs	r1, #0
1004735a:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
1004735c:	2300      	movs	r3, #0
}
1004735e:	0018      	movs	r0, r3
10047360:	46bd      	mov	sp, r7
10047362:	b002      	add	sp, #8
10047364:	bd80      	pop	{r7, pc}

10047366 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
10047366:	b580      	push	{r7, lr}
10047368:	b084      	sub	sp, #16
1004736a:	af00      	add	r7, sp, #0
1004736c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
1004736e:	210f      	movs	r1, #15
10047370:	187b      	adds	r3, r7, r1
10047372:	2200      	movs	r2, #0
10047374:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
10047376:	687b      	ldr	r3, [r7, #4]
10047378:	2225      	movs	r2, #37	@ 0x25
1004737a:	5c9b      	ldrb	r3, [r3, r2]
1004737c:	b2db      	uxtb	r3, r3
1004737e:	2b02      	cmp	r3, #2
10047380:	d006      	beq.n	10047390 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
10047382:	687b      	ldr	r3, [r7, #4]
10047384:	2204      	movs	r2, #4
10047386:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
10047388:	187b      	adds	r3, r7, r1
1004738a:	2201      	movs	r2, #1
1004738c:	701a      	strb	r2, [r3, #0]
1004738e:	e02a      	b.n	100473e6 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
10047390:	687b      	ldr	r3, [r7, #4]
10047392:	681b      	ldr	r3, [r3, #0]
10047394:	681a      	ldr	r2, [r3, #0]
10047396:	687b      	ldr	r3, [r7, #4]
10047398:	681b      	ldr	r3, [r3, #0]
1004739a:	210e      	movs	r1, #14
1004739c:	438a      	bics	r2, r1
1004739e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
100473a0:	687b      	ldr	r3, [r7, #4]
100473a2:	681b      	ldr	r3, [r3, #0]
100473a4:	681a      	ldr	r2, [r3, #0]
100473a6:	687b      	ldr	r3, [r7, #4]
100473a8:	681b      	ldr	r3, [r3, #0]
100473aa:	2101      	movs	r1, #1
100473ac:	438a      	bics	r2, r1
100473ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x3cU));
100473b0:	687b      	ldr	r3, [r7, #4]
100473b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100473b4:	223c      	movs	r2, #60	@ 0x3c
100473b6:	401a      	ands	r2, r3
100473b8:	687b      	ldr	r3, [r7, #4]
100473ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
100473bc:	2101      	movs	r1, #1
100473be:	4091      	lsls	r1, r2
100473c0:	000a      	movs	r2, r1
100473c2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
100473c4:	687b      	ldr	r3, [r7, #4]
100473c6:	2225      	movs	r2, #37	@ 0x25
100473c8:	2101      	movs	r1, #1
100473ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
100473cc:	687b      	ldr	r3, [r7, #4]
100473ce:	2224      	movs	r2, #36	@ 0x24
100473d0:	2100      	movs	r1, #0
100473d2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
100473d4:	687b      	ldr	r3, [r7, #4]
100473d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100473d8:	2b00      	cmp	r3, #0
100473da:	d004      	beq.n	100473e6 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
100473dc:	687b      	ldr	r3, [r7, #4]
100473de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100473e0:	687a      	ldr	r2, [r7, #4]
100473e2:	0010      	movs	r0, r2
100473e4:	4798      	blx	r3
    }
  }
  return status;
100473e6:	230f      	movs	r3, #15
100473e8:	18fb      	adds	r3, r7, r3
100473ea:	781b      	ldrb	r3, [r3, #0]
}
100473ec:	0018      	movs	r0, r3
100473ee:	46bd      	mov	sp, r7
100473f0:	b004      	add	sp, #16
100473f2:	bd80      	pop	{r7, pc}

100473f4 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
100473f4:	b580      	push	{r7, lr}
100473f6:	b082      	sub	sp, #8
100473f8:	af00      	add	r7, sp, #0
100473fa:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
100473fc:	687b      	ldr	r3, [r7, #4]
100473fe:	2225      	movs	r2, #37	@ 0x25
10047400:	5c9b      	ldrb	r3, [r3, r2]
10047402:	b2db      	uxtb	r3, r3
}
10047404:	0018      	movs	r0, r3
10047406:	46bd      	mov	sp, r7
10047408:	b002      	add	sp, #8
1004740a:	bd80      	pop	{r7, pc}

1004740c <HAL_FLASH_Program>:
  *                are stored the data for the burst program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
1004740c:	b5b0      	push	{r4, r5, r7, lr}
1004740e:	b086      	sub	sp, #24
10047410:	af00      	add	r7, sp, #0
10047412:	60f8      	str	r0, [r7, #12]
10047414:	60b9      	str	r1, [r7, #8]
10047416:	607a      	str	r2, [r7, #4]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_32BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
10047418:	4b1d      	ldr	r3, [pc, #116]	@ (10047490 <HAL_FLASH_Program+0x84>)
1004741a:	781b      	ldrb	r3, [r3, #0]
1004741c:	2b01      	cmp	r3, #1
1004741e:	d101      	bne.n	10047424 <HAL_FLASH_Program+0x18>
10047420:	2302      	movs	r3, #2
10047422:	e031      	b.n	10047488 <HAL_FLASH_Program+0x7c>
10047424:	4b1a      	ldr	r3, [pc, #104]	@ (10047490 <HAL_FLASH_Program+0x84>)
10047426:	2201      	movs	r2, #1
10047428:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
1004742a:	4b19      	ldr	r3, [pc, #100]	@ (10047490 <HAL_FLASH_Program+0x84>)
1004742c:	2200      	movs	r2, #0
1004742e:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
10047430:	2517      	movs	r5, #23
10047432:	197c      	adds	r4, r7, r5
10047434:	23fa      	movs	r3, #250	@ 0xfa
10047436:	009b      	lsls	r3, r3, #2
10047438:	0018      	movs	r0, r3
1004743a:	f000 f82b 	bl	10047494 <FLASH_WaitForLastOperation>
1004743e:	0003      	movs	r3, r0
10047440:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
10047442:	197b      	adds	r3, r7, r5
10047444:	781b      	ldrb	r3, [r3, #0]
10047446:	2b00      	cmp	r3, #0
10047448:	d118      	bne.n	1004747c <HAL_FLASH_Program+0x70>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
1004744a:	68fb      	ldr	r3, [r7, #12]
1004744c:	2b00      	cmp	r3, #0
1004744e:	d106      	bne.n	1004745e <HAL_FLASH_Program+0x52>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program a word (32-bit) at a specified address */
      FLASH_Program_Word(Address, Data);
10047450:	687a      	ldr	r2, [r7, #4]
10047452:	68bb      	ldr	r3, [r7, #8]
10047454:	0011      	movs	r1, r2
10047456:	0018      	movs	r0, r3
10047458:	f000 f856 	bl	10047508 <FLASH_Program_Word>
1004745c:	e005      	b.n	1004746a <HAL_FLASH_Program+0x5e>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program 4 word starting from a specified address */
      FLASH_Program_Burst(Address, Data);
1004745e:	687a      	ldr	r2, [r7, #4]
10047460:	68bb      	ldr	r3, [r7, #8]
10047462:	0011      	movs	r1, r2
10047464:	0018      	movs	r0, r3
10047466:	f000 f871 	bl	1004754c <FLASH_Program_Burst>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004746a:	2317      	movs	r3, #23
1004746c:	18fc      	adds	r4, r7, r3
1004746e:	23fa      	movs	r3, #250	@ 0xfa
10047470:	009b      	lsls	r3, r3, #2
10047472:	0018      	movs	r0, r3
10047474:	f000 f80e 	bl	10047494 <FLASH_WaitForLastOperation>
10047478:	0003      	movs	r3, r0
1004747a:	7023      	strb	r3, [r4, #0]

  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
1004747c:	4b04      	ldr	r3, [pc, #16]	@ (10047490 <HAL_FLASH_Program+0x84>)
1004747e:	2200      	movs	r2, #0
10047480:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
10047482:	2317      	movs	r3, #23
10047484:	18fb      	adds	r3, r7, r3
10047486:	781b      	ldrb	r3, [r3, #0]
}
10047488:	0018      	movs	r0, r3
1004748a:	46bd      	mov	sp, r7
1004748c:	b006      	add	sp, #24
1004748e:	bdb0      	pop	{r4, r5, r7, pc}
10047490:	20002820 	.word	0x20002820

10047494 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
10047494:	b580      	push	{r7, lr}
10047496:	b084      	sub	sp, #16
10047498:	af00      	add	r7, sp, #0
1004749a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
1004749c:	f7ff fe0e 	bl	100470bc <HAL_GetTick>
100474a0:	0003      	movs	r3, r0
100474a2:	60fb      	str	r3, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on CMDDONE flag to be set.
     If the FLASH operation fails, an error flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
100474a4:	e00c      	b.n	100474c0 <FLASH_WaitForLastOperation+0x2c>
  {
    if (Timeout != HAL_MAX_DELAY)
100474a6:	687b      	ldr	r3, [r7, #4]
100474a8:	3301      	adds	r3, #1
100474aa:	d009      	beq.n	100474c0 <FLASH_WaitForLastOperation+0x2c>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
100474ac:	f7ff fe06 	bl	100470bc <HAL_GetTick>
100474b0:	0002      	movs	r2, r0
100474b2:	68fb      	ldr	r3, [r7, #12]
100474b4:	1ad3      	subs	r3, r2, r3
100474b6:	687a      	ldr	r2, [r7, #4]
100474b8:	429a      	cmp	r2, r3
100474ba:	d801      	bhi.n	100474c0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
100474bc:	2303      	movs	r3, #3
100474be:	e01b      	b.n	100474f8 <FLASH_WaitForLastOperation+0x64>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CMDDONE) != SET)
100474c0:	4b0f      	ldr	r3, [pc, #60]	@ (10047500 <FLASH_WaitForLastOperation+0x6c>)
100474c2:	691b      	ldr	r3, [r3, #16]
100474c4:	2201      	movs	r2, #1
100474c6:	4013      	ands	r3, r2
100474c8:	2b01      	cmp	r3, #1
100474ca:	d1ec      	bne.n	100474a6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }

  /* Check flash errors */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS))
100474cc:	4b0c      	ldr	r3, [pc, #48]	@ (10047500 <FLASH_WaitForLastOperation+0x6c>)
100474ce:	691b      	ldr	r3, [r3, #16]
100474d0:	220c      	movs	r2, #12
100474d2:	4013      	ands	r3, r2
100474d4:	2b0c      	cmp	r3, #12
100474d6:	d10e      	bne.n	100474f6 <FLASH_WaitForLastOperation+0x62>
  {
    /* Save the error code */
    pFlash.ErrorCode |= FLASH->IRQSTAT;
100474d8:	4b09      	ldr	r3, [pc, #36]	@ (10047500 <FLASH_WaitForLastOperation+0x6c>)
100474da:	689a      	ldr	r2, [r3, #8]
100474dc:	4b09      	ldr	r3, [pc, #36]	@ (10047504 <FLASH_WaitForLastOperation+0x70>)
100474de:	685b      	ldr	r3, [r3, #4]
100474e0:	431a      	orrs	r2, r3
100474e2:	4b08      	ldr	r3, [pc, #32]	@ (10047504 <FLASH_WaitForLastOperation+0x70>)
100474e4:	605a      	str	r2, [r3, #4]

    /* Clear error flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
100474e6:	4b06      	ldr	r3, [pc, #24]	@ (10047500 <FLASH_WaitForLastOperation+0x6c>)
100474e8:	691a      	ldr	r2, [r3, #16]
100474ea:	4b05      	ldr	r3, [pc, #20]	@ (10047500 <FLASH_WaitForLastOperation+0x6c>)
100474ec:	210c      	movs	r1, #12
100474ee:	430a      	orrs	r2, r1
100474f0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
100474f2:	2301      	movs	r3, #1
100474f4:	e000      	b.n	100474f8 <FLASH_WaitForLastOperation+0x64>
  }

  return HAL_OK;
100474f6:	2300      	movs	r3, #0
}
100474f8:	0018      	movs	r0, r3
100474fa:	46bd      	mov	sp, r7
100474fc:	b004      	add	sp, #16
100474fe:	bd80      	pop	{r7, pc}
10047500:	40001000 	.word	0x40001000
10047504:	20002820 	.word	0x20002820

10047508 <FLASH_Program_Word>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
10047508:	b580      	push	{r7, lr}
1004750a:	b082      	sub	sp, #8
1004750c:	af00      	add	r7, sp, #0
1004750e:	6078      	str	r0, [r7, #4]
10047510:	6039      	str	r1, [r7, #0]
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10047512:	4b0c      	ldr	r3, [pc, #48]	@ (10047544 <FLASH_Program_Word+0x3c>)
10047514:	691a      	ldr	r2, [r3, #16]
10047516:	4b0b      	ldr	r3, [pc, #44]	@ (10047544 <FLASH_Program_Word+0x3c>)
10047518:	210f      	movs	r1, #15
1004751a:	430a      	orrs	r2, r1
1004751c:	611a      	str	r2, [r3, #16]

  /* Load the word address */

  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
1004751e:	687b      	ldr	r3, [r7, #4]
10047520:	4a09      	ldr	r2, [pc, #36]	@ (10047548 <FLASH_Program_Word+0x40>)
10047522:	4694      	mov	ip, r2
10047524:	4463      	add	r3, ip
10047526:	089a      	lsrs	r2, r3, #2
10047528:	4b06      	ldr	r3, [pc, #24]	@ (10047544 <FLASH_Program_Word+0x3c>)
1004752a:	0412      	lsls	r2, r2, #16
1004752c:	0c12      	lsrs	r2, r2, #16
1004752e:	619a      	str	r2, [r3, #24]

  /* Load the data to program */
  FLASH->DATA0 = Data;
10047530:	4b04      	ldr	r3, [pc, #16]	@ (10047544 <FLASH_Program_Word+0x3c>)
10047532:	683a      	ldr	r2, [r7, #0]
10047534:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Load the WRITE command */
  FLASH->COMMAND = FLASH_CMD_WRITE;
10047536:	4b03      	ldr	r3, [pc, #12]	@ (10047544 <FLASH_Program_Word+0x3c>)
10047538:	2233      	movs	r2, #51	@ 0x33
1004753a:	601a      	str	r2, [r3, #0]
}
1004753c:	46c0      	nop			@ (mov r8, r8)
1004753e:	46bd      	mov	sp, r7
10047540:	b002      	add	sp, #8
10047542:	bd80      	pop	{r7, pc}
10047544:	40001000 	.word	0x40001000
10047548:	effc0000 	.word	0xeffc0000

1004754c <FLASH_Program_Burst>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Burst(uint32_t Address, uint32_t DataAddress)
{
1004754c:	b580      	push	{r7, lr}
1004754e:	b084      	sub	sp, #16
10047550:	af00      	add	r7, sp, #0
10047552:	6078      	str	r0, [r7, #4]
10047554:	6039      	str	r1, [r7, #0]
  uint32_t *src_addr  = (uint32_t *)DataAddress;
10047556:	683b      	ldr	r3, [r7, #0]
10047558:	60fb      	str	r3, [r7, #12]

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
1004755a:	4b17      	ldr	r3, [pc, #92]	@ (100475b8 <FLASH_Program_Burst+0x6c>)
1004755c:	691a      	ldr	r2, [r3, #16]
1004755e:	4b16      	ldr	r3, [pc, #88]	@ (100475b8 <FLASH_Program_Burst+0x6c>)
10047560:	210f      	movs	r1, #15
10047562:	430a      	orrs	r2, r1
10047564:	611a      	str	r2, [r3, #16]

  /* Load the word address */
  FLASH->ADDRESS = (((Address - FLASH_START_ADDR) >> 2) & FLASH_SIZE_MASK);
10047566:	687b      	ldr	r3, [r7, #4]
10047568:	4a14      	ldr	r2, [pc, #80]	@ (100475bc <FLASH_Program_Burst+0x70>)
1004756a:	4694      	mov	ip, r2
1004756c:	4463      	add	r3, ip
1004756e:	089a      	lsrs	r2, r3, #2
10047570:	4b11      	ldr	r3, [pc, #68]	@ (100475b8 <FLASH_Program_Burst+0x6c>)
10047572:	0412      	lsls	r2, r2, #16
10047574:	0c12      	lsrs	r2, r2, #16
10047576:	619a      	str	r2, [r3, #24]
  FLASH->DATA0 = *src_addr;
10047578:	4a0f      	ldr	r2, [pc, #60]	@ (100475b8 <FLASH_Program_Burst+0x6c>)
1004757a:	68fb      	ldr	r3, [r7, #12]
1004757c:	681b      	ldr	r3, [r3, #0]
1004757e:	6413      	str	r3, [r2, #64]	@ 0x40
  src_addr = src_addr + 1;
10047580:	68fb      	ldr	r3, [r7, #12]
10047582:	3304      	adds	r3, #4
10047584:	60fb      	str	r3, [r7, #12]
  FLASH->DATA1 = *src_addr;
10047586:	4a0c      	ldr	r2, [pc, #48]	@ (100475b8 <FLASH_Program_Burst+0x6c>)
10047588:	68fb      	ldr	r3, [r7, #12]
1004758a:	681b      	ldr	r3, [r3, #0]
1004758c:	6453      	str	r3, [r2, #68]	@ 0x44
  src_addr = src_addr + 1;
1004758e:	68fb      	ldr	r3, [r7, #12]
10047590:	3304      	adds	r3, #4
10047592:	60fb      	str	r3, [r7, #12]
  FLASH->DATA2 = *src_addr;
10047594:	4a08      	ldr	r2, [pc, #32]	@ (100475b8 <FLASH_Program_Burst+0x6c>)
10047596:	68fb      	ldr	r3, [r7, #12]
10047598:	681b      	ldr	r3, [r3, #0]
1004759a:	6493      	str	r3, [r2, #72]	@ 0x48
  src_addr = src_addr + 1;
1004759c:	68fb      	ldr	r3, [r7, #12]
1004759e:	3304      	adds	r3, #4
100475a0:	60fb      	str	r3, [r7, #12]
  FLASH->DATA3 = *src_addr;
100475a2:	4a05      	ldr	r2, [pc, #20]	@ (100475b8 <FLASH_Program_Burst+0x6c>)
100475a4:	68fb      	ldr	r3, [r7, #12]
100475a6:	681b      	ldr	r3, [r3, #0]
100475a8:	64d3      	str	r3, [r2, #76]	@ 0x4c

  /* Load the BURST WRITE command */
  FLASH->COMMAND = FLASH_CMD_BURSTWRITE;
100475aa:	4b03      	ldr	r3, [pc, #12]	@ (100475b8 <FLASH_Program_Burst+0x6c>)
100475ac:	22cc      	movs	r2, #204	@ 0xcc
100475ae:	601a      	str	r2, [r3, #0]
}
100475b0:	46c0      	nop			@ (mov r8, r8)
100475b2:	46bd      	mov	sp, r7
100475b4:	b004      	add	sp, #16
100475b6:	bd80      	pop	{r7, pc}
100475b8:	40001000 	.word	0x40001000
100475bc:	effc0000 	.word	0xeffc0000

100475c0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
100475c0:	b5b0      	push	{r4, r5, r7, lr}
100475c2:	b084      	sub	sp, #16
100475c4:	af00      	add	r7, sp, #0
100475c6:	6078      	str	r0, [r7, #4]
100475c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPE_ERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
100475ca:	4b27      	ldr	r3, [pc, #156]	@ (10047668 <HAL_FLASHEx_Erase+0xa8>)
100475cc:	781b      	ldrb	r3, [r3, #0]
100475ce:	2b01      	cmp	r3, #1
100475d0:	d101      	bne.n	100475d6 <HAL_FLASHEx_Erase+0x16>
100475d2:	2302      	movs	r3, #2
100475d4:	e043      	b.n	1004765e <HAL_FLASHEx_Erase+0x9e>
100475d6:	4b24      	ldr	r3, [pc, #144]	@ (10047668 <HAL_FLASHEx_Erase+0xa8>)
100475d8:	2201      	movs	r2, #1
100475da:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
100475dc:	4b22      	ldr	r3, [pc, #136]	@ (10047668 <HAL_FLASHEx_Erase+0xa8>)
100475de:	2200      	movs	r2, #0
100475e0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
100475e2:	687b      	ldr	r3, [r7, #4]
100475e4:	681b      	ldr	r3, [r3, #0]
100475e6:	2bff      	cmp	r3, #255	@ 0xff
100475e8:	d10b      	bne.n	10047602 <HAL_FLASHEx_Erase+0x42>
  {
    /* Mass erase to be done */
    FLASH_MassErase();
100475ea:	f000 f83f 	bl	1004766c <FLASH_MassErase>

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
100475ee:	230f      	movs	r3, #15
100475f0:	18fc      	adds	r4, r7, r3
100475f2:	23fa      	movs	r3, #250	@ 0xfa
100475f4:	009b      	lsls	r3, r3, #2
100475f6:	0018      	movs	r0, r3
100475f8:	f7ff ff4c 	bl	10047494 <FLASH_WaitForLastOperation>
100475fc:	0003      	movs	r3, r0
100475fe:	7023      	strb	r3, [r4, #0]
10047600:	e027      	b.n	10047652 <HAL_FLASHEx_Erase+0x92>
  }
  else
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
10047602:	683b      	ldr	r3, [r7, #0]
10047604:	2201      	movs	r2, #1
10047606:	4252      	negs	r2, r2
10047608:	601a      	str	r2, [r3, #0]

    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
1004760a:	687b      	ldr	r3, [r7, #4]
1004760c:	685b      	ldr	r3, [r3, #4]
1004760e:	60bb      	str	r3, [r7, #8]
10047610:	e017      	b.n	10047642 <HAL_FLASHEx_Erase+0x82>
    {
      /* Start erase page */
      FLASH_PageErase(index);
10047612:	68bb      	ldr	r3, [r7, #8]
10047614:	0018      	movs	r0, r3
10047616:	f000 f839 	bl	1004768c <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
1004761a:	250f      	movs	r5, #15
1004761c:	197c      	adds	r4, r7, r5
1004761e:	23fa      	movs	r3, #250	@ 0xfa
10047620:	009b      	lsls	r3, r3, #2
10047622:	0018      	movs	r0, r3
10047624:	f7ff ff36 	bl	10047494 <FLASH_WaitForLastOperation>
10047628:	0003      	movs	r3, r0
1004762a:	7023      	strb	r3, [r4, #0]

      if (status != HAL_OK)
1004762c:	197b      	adds	r3, r7, r5
1004762e:	781b      	ldrb	r3, [r3, #0]
10047630:	2b00      	cmp	r3, #0
10047632:	d003      	beq.n	1004763c <HAL_FLASHEx_Erase+0x7c>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = index;
10047634:	683b      	ldr	r3, [r7, #0]
10047636:	68ba      	ldr	r2, [r7, #8]
10047638:	601a      	str	r2, [r3, #0]
        break;
1004763a:	e00a      	b.n	10047652 <HAL_FLASHEx_Erase+0x92>
    for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
1004763c:	68bb      	ldr	r3, [r7, #8]
1004763e:	3301      	adds	r3, #1
10047640:	60bb      	str	r3, [r7, #8]
10047642:	687b      	ldr	r3, [r7, #4]
10047644:	685a      	ldr	r2, [r3, #4]
10047646:	687b      	ldr	r3, [r7, #4]
10047648:	689b      	ldr	r3, [r3, #8]
1004764a:	18d3      	adds	r3, r2, r3
1004764c:	68ba      	ldr	r2, [r7, #8]
1004764e:	429a      	cmp	r2, r3
10047650:	d3df      	bcc.n	10047612 <HAL_FLASHEx_Erase+0x52>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
10047652:	4b05      	ldr	r3, [pc, #20]	@ (10047668 <HAL_FLASHEx_Erase+0xa8>)
10047654:	2200      	movs	r2, #0
10047656:	701a      	strb	r2, [r3, #0]

  return status;
10047658:	230f      	movs	r3, #15
1004765a:	18fb      	adds	r3, r7, r3
1004765c:	781b      	ldrb	r3, [r3, #0]
}
1004765e:	0018      	movs	r0, r3
10047660:	46bd      	mov	sp, r7
10047662:	b004      	add	sp, #16
10047664:	bdb0      	pop	{r4, r5, r7, pc}
10047666:	46c0      	nop			@ (mov r8, r8)
10047668:	20002820 	.word	0x20002820

1004766c <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
1004766c:	b580      	push	{r7, lr}
1004766e:	af00      	add	r7, sp, #0
  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10047670:	4b05      	ldr	r3, [pc, #20]	@ (10047688 <FLASH_MassErase+0x1c>)
10047672:	691a      	ldr	r2, [r3, #16]
10047674:	4b04      	ldr	r3, [pc, #16]	@ (10047688 <FLASH_MassErase+0x1c>)
10047676:	210f      	movs	r1, #15
10047678:	430a      	orrs	r2, r1
1004767a:	611a      	str	r2, [r3, #16]

  /* MASSERASE command */
  FLASH->COMMAND = FLASH_CMD_MASSERASE;
1004767c:	4b02      	ldr	r3, [pc, #8]	@ (10047688 <FLASH_MassErase+0x1c>)
1004767e:	2222      	movs	r2, #34	@ 0x22
10047680:	601a      	str	r2, [r3, #0]
}
10047682:	46c0      	nop			@ (mov r8, r8)
10047684:	46bd      	mov	sp, r7
10047686:	bd80      	pop	{r7, pc}
10047688:	40001000 	.word	0x40001000

1004768c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
1004768c:	b580      	push	{r7, lr}
1004768e:	b082      	sub	sp, #8
10047690:	af00      	add	r7, sp, #0
10047692:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Clear All Flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_CMDDONE | FLASH_FLAG_CMDSTART | FLASH_FLAG_CMDERR | FLASH_FLAG_ILLCMD);
10047694:	4b09      	ldr	r3, [pc, #36]	@ (100476bc <FLASH_PageErase+0x30>)
10047696:	691a      	ldr	r2, [r3, #16]
10047698:	4b08      	ldr	r3, [pc, #32]	@ (100476bc <FLASH_PageErase+0x30>)
1004769a:	210f      	movs	r1, #15
1004769c:	430a      	orrs	r2, r1
1004769e:	611a      	str	r2, [r3, #16]

  FLASH->ADDRESS = (((Page * FLASH_PAGE_SIZE) >> 2) & FLASH_SIZE_MASK);
100476a0:	687b      	ldr	r3, [r7, #4]
100476a2:	02db      	lsls	r3, r3, #11
100476a4:	089a      	lsrs	r2, r3, #2
100476a6:	4b05      	ldr	r3, [pc, #20]	@ (100476bc <FLASH_PageErase+0x30>)
100476a8:	0412      	lsls	r2, r2, #16
100476aa:	0c12      	lsrs	r2, r2, #16
100476ac:	619a      	str	r2, [r3, #24]

  /* Write the ERASE command */
  FLASH->COMMAND = FLASH_CMD_ERASE_PAGES;
100476ae:	4b03      	ldr	r3, [pc, #12]	@ (100476bc <FLASH_PageErase+0x30>)
100476b0:	2211      	movs	r2, #17
100476b2:	601a      	str	r2, [r3, #0]
}
100476b4:	46c0      	nop			@ (mov r8, r8)
100476b6:	46bd      	mov	sp, r7
100476b8:	b002      	add	sp, #8
100476ba:	bd80      	pop	{r7, pc}
100476bc:	40001000 	.word	0x40001000

100476c0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100476c0:	b580      	push	{r7, lr}
100476c2:	b086      	sub	sp, #24
100476c4:	af00      	add	r7, sp, #0
100476c6:	6078      	str	r0, [r7, #4]
100476c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
100476ca:	2300      	movs	r3, #0
100476cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100476ce:	e190      	b.n	100479f2 <HAL_GPIO_Init+0x332>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
100476d0:	683b      	ldr	r3, [r7, #0]
100476d2:	681b      	ldr	r3, [r3, #0]
100476d4:	2101      	movs	r1, #1
100476d6:	697a      	ldr	r2, [r7, #20]
100476d8:	4091      	lsls	r1, r2
100476da:	000a      	movs	r2, r1
100476dc:	4013      	ands	r3, r2
100476de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
100476e0:	68fb      	ldr	r3, [r7, #12]
100476e2:	2b00      	cmp	r3, #0
100476e4:	d100      	bne.n	100476e8 <HAL_GPIO_Init+0x28>
100476e6:	e181      	b.n	100479ec <HAL_GPIO_Init+0x32c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
100476e8:	683b      	ldr	r3, [r7, #0]
100476ea:	685b      	ldr	r3, [r3, #4]
100476ec:	2203      	movs	r2, #3
100476ee:	4013      	ands	r3, r2
100476f0:	2b01      	cmp	r3, #1
100476f2:	d005      	beq.n	10047700 <HAL_GPIO_Init+0x40>
100476f4:	683b      	ldr	r3, [r7, #0]
100476f6:	685b      	ldr	r3, [r3, #4]
100476f8:	2203      	movs	r2, #3
100476fa:	4013      	ands	r3, r2
100476fc:	2b02      	cmp	r3, #2
100476fe:	d130      	bne.n	10047762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10047700:	687b      	ldr	r3, [r7, #4]
10047702:	689b      	ldr	r3, [r3, #8]
10047704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10047706:	697b      	ldr	r3, [r7, #20]
10047708:	005b      	lsls	r3, r3, #1
1004770a:	2203      	movs	r2, #3
1004770c:	409a      	lsls	r2, r3
1004770e:	0013      	movs	r3, r2
10047710:	43da      	mvns	r2, r3
10047712:	693b      	ldr	r3, [r7, #16]
10047714:	4013      	ands	r3, r2
10047716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
10047718:	683b      	ldr	r3, [r7, #0]
1004771a:	68da      	ldr	r2, [r3, #12]
1004771c:	697b      	ldr	r3, [r7, #20]
1004771e:	005b      	lsls	r3, r3, #1
10047720:	409a      	lsls	r2, r3
10047722:	0013      	movs	r3, r2
10047724:	693a      	ldr	r2, [r7, #16]
10047726:	4313      	orrs	r3, r2
10047728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
1004772a:	687b      	ldr	r3, [r7, #4]
1004772c:	693a      	ldr	r2, [r7, #16]
1004772e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10047730:	687b      	ldr	r3, [r7, #4]
10047732:	685b      	ldr	r3, [r3, #4]
10047734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10047736:	2201      	movs	r2, #1
10047738:	697b      	ldr	r3, [r7, #20]
1004773a:	409a      	lsls	r2, r3
1004773c:	0013      	movs	r3, r2
1004773e:	43da      	mvns	r2, r3
10047740:	693b      	ldr	r3, [r7, #16]
10047742:	4013      	ands	r3, r2
10047744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
10047746:	683b      	ldr	r3, [r7, #0]
10047748:	685b      	ldr	r3, [r3, #4]
1004774a:	091b      	lsrs	r3, r3, #4
1004774c:	2201      	movs	r2, #1
1004774e:	401a      	ands	r2, r3
10047750:	697b      	ldr	r3, [r7, #20]
10047752:	409a      	lsls	r2, r3
10047754:	0013      	movs	r3, r2
10047756:	693a      	ldr	r2, [r7, #16]
10047758:	4313      	orrs	r3, r2
1004775a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
1004775c:	687b      	ldr	r3, [r7, #4]
1004775e:	693a      	ldr	r2, [r7, #16]
10047760:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
10047762:	683b      	ldr	r3, [r7, #0]
10047764:	685b      	ldr	r3, [r3, #4]
10047766:	2203      	movs	r2, #3
10047768:	4013      	ands	r3, r2
1004776a:	2b03      	cmp	r3, #3
1004776c:	d017      	beq.n	1004779e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
1004776e:	687b      	ldr	r3, [r7, #4]
10047770:	68db      	ldr	r3, [r3, #12]
10047772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
10047774:	697b      	ldr	r3, [r7, #20]
10047776:	005b      	lsls	r3, r3, #1
10047778:	2203      	movs	r2, #3
1004777a:	409a      	lsls	r2, r3
1004777c:	0013      	movs	r3, r2
1004777e:	43da      	mvns	r2, r3
10047780:	693b      	ldr	r3, [r7, #16]
10047782:	4013      	ands	r3, r2
10047784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
10047786:	683b      	ldr	r3, [r7, #0]
10047788:	689a      	ldr	r2, [r3, #8]
1004778a:	697b      	ldr	r3, [r7, #20]
1004778c:	005b      	lsls	r3, r3, #1
1004778e:	409a      	lsls	r2, r3
10047790:	0013      	movs	r3, r2
10047792:	693a      	ldr	r2, [r7, #16]
10047794:	4313      	orrs	r3, r2
10047796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
10047798:	687b      	ldr	r3, [r7, #4]
1004779a:	693a      	ldr	r2, [r7, #16]
1004779c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
1004779e:	683b      	ldr	r3, [r7, #0]
100477a0:	685b      	ldr	r3, [r3, #4]
100477a2:	2203      	movs	r2, #3
100477a4:	4013      	ands	r3, r2
100477a6:	2b02      	cmp	r3, #2
100477a8:	d123      	bne.n	100477f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
100477aa:	697b      	ldr	r3, [r7, #20]
100477ac:	08da      	lsrs	r2, r3, #3
100477ae:	687b      	ldr	r3, [r7, #4]
100477b0:	3208      	adds	r2, #8
100477b2:	0092      	lsls	r2, r2, #2
100477b4:	58d3      	ldr	r3, [r2, r3]
100477b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
100477b8:	697b      	ldr	r3, [r7, #20]
100477ba:	2207      	movs	r2, #7
100477bc:	4013      	ands	r3, r2
100477be:	009b      	lsls	r3, r3, #2
100477c0:	220f      	movs	r2, #15
100477c2:	409a      	lsls	r2, r3
100477c4:	0013      	movs	r3, r2
100477c6:	43da      	mvns	r2, r3
100477c8:	693b      	ldr	r3, [r7, #16]
100477ca:	4013      	ands	r3, r2
100477cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
100477ce:	683b      	ldr	r3, [r7, #0]
100477d0:	691a      	ldr	r2, [r3, #16]
100477d2:	697b      	ldr	r3, [r7, #20]
100477d4:	2107      	movs	r1, #7
100477d6:	400b      	ands	r3, r1
100477d8:	009b      	lsls	r3, r3, #2
100477da:	409a      	lsls	r2, r3
100477dc:	0013      	movs	r3, r2
100477de:	693a      	ldr	r2, [r7, #16]
100477e0:	4313      	orrs	r3, r2
100477e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
100477e4:	697b      	ldr	r3, [r7, #20]
100477e6:	08da      	lsrs	r2, r3, #3
100477e8:	687b      	ldr	r3, [r7, #4]
100477ea:	3208      	adds	r2, #8
100477ec:	0092      	lsls	r2, r2, #2
100477ee:	6939      	ldr	r1, [r7, #16]
100477f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
100477f2:	687b      	ldr	r3, [r7, #4]
100477f4:	681b      	ldr	r3, [r3, #0]
100477f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
100477f8:	697b      	ldr	r3, [r7, #20]
100477fa:	005b      	lsls	r3, r3, #1
100477fc:	2203      	movs	r2, #3
100477fe:	409a      	lsls	r2, r3
10047800:	0013      	movs	r3, r2
10047802:	43da      	mvns	r2, r3
10047804:	693b      	ldr	r3, [r7, #16]
10047806:	4013      	ands	r3, r2
10047808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
1004780a:	683b      	ldr	r3, [r7, #0]
1004780c:	685b      	ldr	r3, [r3, #4]
1004780e:	2203      	movs	r2, #3
10047810:	401a      	ands	r2, r3
10047812:	697b      	ldr	r3, [r7, #20]
10047814:	005b      	lsls	r3, r3, #1
10047816:	409a      	lsls	r2, r3
10047818:	0013      	movs	r3, r2
1004781a:	693a      	ldr	r2, [r7, #16]
1004781c:	4313      	orrs	r3, r2
1004781e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
10047820:	687b      	ldr	r3, [r7, #4]
10047822:	693a      	ldr	r2, [r7, #16]
10047824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
10047826:	683b      	ldr	r3, [r7, #0]
10047828:	685a      	ldr	r2, [r3, #4]
1004782a:	23c0      	movs	r3, #192	@ 0xc0
1004782c:	029b      	lsls	r3, r3, #10
1004782e:	4013      	ands	r3, r2
10047830:	d100      	bne.n	10047834 <HAL_GPIO_Init+0x174>
10047832:	e0db      	b.n	100479ec <HAL_GPIO_Init+0x32c>
      {

        /* Edge/Level line configuration */
        if ((GPIO_Init->Mode & DETECTION_TYPE) != 0x00u)
10047834:	683b      	ldr	r3, [r7, #0]
10047836:	685a      	ldr	r2, [r3, #4]
10047838:	2380      	movs	r3, #128	@ 0x80
1004783a:	02db      	lsls	r3, r3, #11
1004783c:	4013      	ands	r3, r2
1004783e:	d030      	beq.n	100478a2 <HAL_GPIO_Init+0x1e2>
        {
          temp = SYSCFG->IO_DTR;
10047840:	2380      	movs	r3, #128	@ 0x80
10047842:	05db      	lsls	r3, r3, #23
10047844:	68db      	ldr	r3, [r3, #12]
10047846:	613b      	str	r3, [r7, #16]
          if (GPIOx == GPIOA)
10047848:	687a      	ldr	r2, [r7, #4]
1004784a:	2390      	movs	r3, #144	@ 0x90
1004784c:	05db      	lsls	r3, r3, #23
1004784e:	429a      	cmp	r2, r3
10047850:	d111      	bne.n	10047876 <HAL_GPIO_Init+0x1b6>
          {
            temp &= ~(1 << position);
10047852:	2201      	movs	r2, #1
10047854:	697b      	ldr	r3, [r7, #20]
10047856:	409a      	lsls	r2, r3
10047858:	0013      	movs	r3, r2
1004785a:	43db      	mvns	r3, r3
1004785c:	001a      	movs	r2, r3
1004785e:	693b      	ldr	r3, [r7, #16]
10047860:	4013      	ands	r3, r2
10047862:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10047864:	2201      	movs	r2, #1
10047866:	697b      	ldr	r3, [r7, #20]
10047868:	409a      	lsls	r2, r3
1004786a:	0013      	movs	r3, r2
1004786c:	001a      	movs	r2, r3
1004786e:	693b      	ldr	r3, [r7, #16]
10047870:	4313      	orrs	r3, r2
10047872:	613b      	str	r3, [r7, #16]
10047874:	e011      	b.n	1004789a <HAL_GPIO_Init+0x1da>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10047876:	2201      	movs	r2, #1
10047878:	697b      	ldr	r3, [r7, #20]
1004787a:	409a      	lsls	r2, r3
1004787c:	0013      	movs	r3, r2
1004787e:	041b      	lsls	r3, r3, #16
10047880:	43db      	mvns	r3, r3
10047882:	001a      	movs	r2, r3
10047884:	693b      	ldr	r3, [r7, #16]
10047886:	4013      	ands	r3, r2
10047888:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
1004788a:	2201      	movs	r2, #1
1004788c:	697b      	ldr	r3, [r7, #20]
1004788e:	409a      	lsls	r2, r3
10047890:	0013      	movs	r3, r2
10047892:	041b      	lsls	r3, r3, #16
10047894:	693a      	ldr	r2, [r7, #16]
10047896:	4313      	orrs	r3, r2
10047898:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_DTR = temp;
1004789a:	2380      	movs	r3, #128	@ 0x80
1004789c:	05db      	lsls	r3, r3, #23
1004789e:	693a      	ldr	r2, [r7, #16]
100478a0:	60da      	str	r2, [r3, #12]
        }

		/* Edge selection configuration */
		if ((GPIO_Init->Mode & EDGE_SELECTION) != 0x00u)
100478a2:	683b      	ldr	r3, [r7, #0]
100478a4:	685a      	ldr	r2, [r3, #4]
100478a6:	2380      	movs	r3, #128	@ 0x80
100478a8:	035b      	lsls	r3, r3, #13
100478aa:	4013      	ands	r3, r2
100478ac:	d030      	beq.n	10047910 <HAL_GPIO_Init+0x250>
        {
          temp = SYSCFG->IO_IBER;
100478ae:	2380      	movs	r3, #128	@ 0x80
100478b0:	05db      	lsls	r3, r3, #23
100478b2:	691b      	ldr	r3, [r3, #16]
100478b4:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
100478b6:	687a      	ldr	r2, [r7, #4]
100478b8:	2390      	movs	r3, #144	@ 0x90
100478ba:	05db      	lsls	r3, r3, #23
100478bc:	429a      	cmp	r2, r3
100478be:	d111      	bne.n	100478e4 <HAL_GPIO_Init+0x224>
          {
            temp &= ~(1 << position);
100478c0:	2201      	movs	r2, #1
100478c2:	697b      	ldr	r3, [r7, #20]
100478c4:	409a      	lsls	r2, r3
100478c6:	0013      	movs	r3, r2
100478c8:	43db      	mvns	r3, r3
100478ca:	001a      	movs	r2, r3
100478cc:	693b      	ldr	r3, [r7, #16]
100478ce:	4013      	ands	r3, r2
100478d0:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100478d2:	2201      	movs	r2, #1
100478d4:	697b      	ldr	r3, [r7, #20]
100478d6:	409a      	lsls	r2, r3
100478d8:	0013      	movs	r3, r2
100478da:	001a      	movs	r2, r3
100478dc:	693b      	ldr	r3, [r7, #16]
100478de:	4313      	orrs	r3, r2
100478e0:	613b      	str	r3, [r7, #16]
100478e2:	e011      	b.n	10047908 <HAL_GPIO_Init+0x248>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100478e4:	2201      	movs	r2, #1
100478e6:	697b      	ldr	r3, [r7, #20]
100478e8:	409a      	lsls	r2, r3
100478ea:	0013      	movs	r3, r2
100478ec:	041b      	lsls	r3, r3, #16
100478ee:	43db      	mvns	r3, r3
100478f0:	001a      	movs	r2, r3
100478f2:	693b      	ldr	r3, [r7, #16]
100478f4:	4013      	ands	r3, r2
100478f6:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100478f8:	2201      	movs	r2, #1
100478fa:	697b      	ldr	r3, [r7, #20]
100478fc:	409a      	lsls	r2, r3
100478fe:	0013      	movs	r3, r2
10047900:	041b      	lsls	r3, r3, #16
10047902:	693a      	ldr	r2, [r7, #16]
10047904:	4313      	orrs	r3, r2
10047906:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IBER= temp;
10047908:	2380      	movs	r3, #128	@ 0x80
1004790a:	05db      	lsls	r3, r3, #23
1004790c:	693a      	ldr	r2, [r7, #16]
1004790e:	611a      	str	r2, [r3, #16]
        }

        /* Trigger mode configuration */
		if ((GPIO_Init->Mode & TRIGGER_MODE) != 0x00u)
10047910:	683b      	ldr	r3, [r7, #0]
10047912:	685a      	ldr	r2, [r3, #4]
10047914:	2380      	movs	r3, #128	@ 0x80
10047916:	03db      	lsls	r3, r3, #15
10047918:	4013      	ands	r3, r2
1004791a:	d030      	beq.n	1004797e <HAL_GPIO_Init+0x2be>
        {
          temp = SYSCFG->IO_IEVR;
1004791c:	2380      	movs	r3, #128	@ 0x80
1004791e:	05db      	lsls	r3, r3, #23
10047920:	695b      	ldr	r3, [r3, #20]
10047922:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10047924:	687a      	ldr	r2, [r7, #4]
10047926:	2390      	movs	r3, #144	@ 0x90
10047928:	05db      	lsls	r3, r3, #23
1004792a:	429a      	cmp	r2, r3
1004792c:	d111      	bne.n	10047952 <HAL_GPIO_Init+0x292>
          {
            temp &= ~(1 << position);
1004792e:	2201      	movs	r2, #1
10047930:	697b      	ldr	r3, [r7, #20]
10047932:	409a      	lsls	r2, r3
10047934:	0013      	movs	r3, r2
10047936:	43db      	mvns	r3, r3
10047938:	001a      	movs	r2, r3
1004793a:	693b      	ldr	r3, [r7, #16]
1004793c:	4013      	ands	r3, r2
1004793e:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
10047940:	2201      	movs	r2, #1
10047942:	697b      	ldr	r3, [r7, #20]
10047944:	409a      	lsls	r2, r3
10047946:	0013      	movs	r3, r2
10047948:	001a      	movs	r2, r3
1004794a:	693b      	ldr	r3, [r7, #16]
1004794c:	4313      	orrs	r3, r2
1004794e:	613b      	str	r3, [r7, #16]
10047950:	e011      	b.n	10047976 <HAL_GPIO_Init+0x2b6>
          }
          else
          {
            temp &= ~((1 << position) << 16);
10047952:	2201      	movs	r2, #1
10047954:	697b      	ldr	r3, [r7, #20]
10047956:	409a      	lsls	r2, r3
10047958:	0013      	movs	r3, r2
1004795a:	041b      	lsls	r3, r3, #16
1004795c:	43db      	mvns	r3, r3
1004795e:	001a      	movs	r2, r3
10047960:	693b      	ldr	r3, [r7, #16]
10047962:	4013      	ands	r3, r2
10047964:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
10047966:	2201      	movs	r2, #1
10047968:	697b      	ldr	r3, [r7, #20]
1004796a:	409a      	lsls	r2, r3
1004796c:	0013      	movs	r3, r2
1004796e:	041b      	lsls	r3, r3, #16
10047970:	693a      	ldr	r2, [r7, #16]
10047972:	4313      	orrs	r3, r2
10047974:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IEVR= temp;
10047976:	2380      	movs	r3, #128	@ 0x80
10047978:	05db      	lsls	r3, r3, #23
1004797a:	693a      	ldr	r2, [r7, #16]
1004797c:	615a      	str	r2, [r3, #20]
        }

        /* Enable the specified EXTI interrupt line */
        if ((GPIO_Init->Mode & EXTI_IT) == EXTI_IT)
1004797e:	683b      	ldr	r3, [r7, #0]
10047980:	685a      	ldr	r2, [r3, #4]
10047982:	2380      	movs	r3, #128	@ 0x80
10047984:	025b      	lsls	r3, r3, #9
10047986:	4013      	ands	r3, r2
10047988:	d030      	beq.n	100479ec <HAL_GPIO_Init+0x32c>
        {
          temp = SYSCFG->IO_IER;
1004798a:	2380      	movs	r3, #128	@ 0x80
1004798c:	05db      	lsls	r3, r3, #23
1004798e:	699b      	ldr	r3, [r3, #24]
10047990:	613b      	str	r3, [r7, #16]

          if (GPIOx == GPIOA)
10047992:	687a      	ldr	r2, [r7, #4]
10047994:	2390      	movs	r3, #144	@ 0x90
10047996:	05db      	lsls	r3, r3, #23
10047998:	429a      	cmp	r2, r3
1004799a:	d111      	bne.n	100479c0 <HAL_GPIO_Init+0x300>
          {
            temp &= ~(1 << position);
1004799c:	2201      	movs	r2, #1
1004799e:	697b      	ldr	r3, [r7, #20]
100479a0:	409a      	lsls	r2, r3
100479a2:	0013      	movs	r3, r2
100479a4:	43db      	mvns	r3, r3
100479a6:	001a      	movs	r2, r3
100479a8:	693b      	ldr	r3, [r7, #16]
100479aa:	4013      	ands	r3, r2
100479ac:	613b      	str	r3, [r7, #16]
            temp |= (1 << position);
100479ae:	2201      	movs	r2, #1
100479b0:	697b      	ldr	r3, [r7, #20]
100479b2:	409a      	lsls	r2, r3
100479b4:	0013      	movs	r3, r2
100479b6:	001a      	movs	r2, r3
100479b8:	693b      	ldr	r3, [r7, #16]
100479ba:	4313      	orrs	r3, r2
100479bc:	613b      	str	r3, [r7, #16]
100479be:	e011      	b.n	100479e4 <HAL_GPIO_Init+0x324>
          }
          else
          {
            temp &= ~((1 << position) << 16);
100479c0:	2201      	movs	r2, #1
100479c2:	697b      	ldr	r3, [r7, #20]
100479c4:	409a      	lsls	r2, r3
100479c6:	0013      	movs	r3, r2
100479c8:	041b      	lsls	r3, r3, #16
100479ca:	43db      	mvns	r3, r3
100479cc:	001a      	movs	r2, r3
100479ce:	693b      	ldr	r3, [r7, #16]
100479d0:	4013      	ands	r3, r2
100479d2:	613b      	str	r3, [r7, #16]
            temp |= ((1 << position) << 16);
100479d4:	2201      	movs	r2, #1
100479d6:	697b      	ldr	r3, [r7, #20]
100479d8:	409a      	lsls	r2, r3
100479da:	0013      	movs	r3, r2
100479dc:	041b      	lsls	r3, r3, #16
100479de:	693a      	ldr	r2, [r7, #16]
100479e0:	4313      	orrs	r3, r2
100479e2:	613b      	str	r3, [r7, #16]
          }
          SYSCFG->IO_IER= temp;
100479e4:	2380      	movs	r3, #128	@ 0x80
100479e6:	05db      	lsls	r3, r3, #23
100479e8:	693a      	ldr	r2, [r7, #16]
100479ea:	619a      	str	r2, [r3, #24]
        }
      }
    }

    position++;
100479ec:	697b      	ldr	r3, [r7, #20]
100479ee:	3301      	adds	r3, #1
100479f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
100479f2:	683b      	ldr	r3, [r7, #0]
100479f4:	681a      	ldr	r2, [r3, #0]
100479f6:	697b      	ldr	r3, [r7, #20]
100479f8:	40da      	lsrs	r2, r3
100479fa:	1e13      	subs	r3, r2, #0
100479fc:	d000      	beq.n	10047a00 <HAL_GPIO_Init+0x340>
100479fe:	e667      	b.n	100476d0 <HAL_GPIO_Init+0x10>
  }
}
10047a00:	46c0      	nop			@ (mov r8, r8)
10047a02:	46c0      	nop			@ (mov r8, r8)
10047a04:	46bd      	mov	sp, r7
10047a06:	b006      	add	sp, #24
10047a08:	bd80      	pop	{r7, pc}

10047a0a <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
10047a0a:	b580      	push	{r7, lr}
10047a0c:	b086      	sub	sp, #24
10047a0e:	af00      	add	r7, sp, #0
10047a10:	6078      	str	r0, [r7, #4]
10047a12:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
10047a14:	2300      	movs	r3, #0
10047a16:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
10047a18:	e0cf      	b.n	10047bba <HAL_GPIO_DeInit+0x1b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
10047a1a:	2201      	movs	r2, #1
10047a1c:	697b      	ldr	r3, [r7, #20]
10047a1e:	409a      	lsls	r2, r3
10047a20:	683b      	ldr	r3, [r7, #0]
10047a22:	4013      	ands	r3, r2
10047a24:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
10047a26:	68fb      	ldr	r3, [r7, #12]
10047a28:	2b00      	cmp	r3, #0
10047a2a:	d100      	bne.n	10047a2e <HAL_GPIO_DeInit+0x24>
10047a2c:	e0c2      	b.n	10047bb4 <HAL_GPIO_DeInit+0x1aa>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      /* Disable the specified EXTI interrupt line */
      tmp = SYSCFG->IO_IER;
10047a2e:	2380      	movs	r3, #128	@ 0x80
10047a30:	05db      	lsls	r3, r3, #23
10047a32:	699b      	ldr	r3, [r3, #24]
10047a34:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10047a36:	687a      	ldr	r2, [r7, #4]
10047a38:	2390      	movs	r3, #144	@ 0x90
10047a3a:	05db      	lsls	r3, r3, #23
10047a3c:	429a      	cmp	r2, r3
10047a3e:	d109      	bne.n	10047a54 <HAL_GPIO_DeInit+0x4a>
      {
        tmp &= ~(1<<position);
10047a40:	2201      	movs	r2, #1
10047a42:	697b      	ldr	r3, [r7, #20]
10047a44:	409a      	lsls	r2, r3
10047a46:	0013      	movs	r3, r2
10047a48:	43db      	mvns	r3, r3
10047a4a:	001a      	movs	r2, r3
10047a4c:	693b      	ldr	r3, [r7, #16]
10047a4e:	4013      	ands	r3, r2
10047a50:	613b      	str	r3, [r7, #16]
10047a52:	e009      	b.n	10047a68 <HAL_GPIO_DeInit+0x5e>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10047a54:	2201      	movs	r2, #1
10047a56:	697b      	ldr	r3, [r7, #20]
10047a58:	409a      	lsls	r2, r3
10047a5a:	0013      	movs	r3, r2
10047a5c:	041b      	lsls	r3, r3, #16
10047a5e:	43db      	mvns	r3, r3
10047a60:	001a      	movs	r2, r3
10047a62:	693b      	ldr	r3, [r7, #16]
10047a64:	4013      	ands	r3, r2
10047a66:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IER = tmp;
10047a68:	2380      	movs	r3, #128	@ 0x80
10047a6a:	05db      	lsls	r3, r3, #23
10047a6c:	693a      	ldr	r2, [r7, #16]
10047a6e:	619a      	str	r2, [r3, #24]

      /* Clear EXTI line configuration */
      tmp = SYSCFG->IO_DTR;
10047a70:	2380      	movs	r3, #128	@ 0x80
10047a72:	05db      	lsls	r3, r3, #23
10047a74:	68db      	ldr	r3, [r3, #12]
10047a76:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10047a78:	687a      	ldr	r2, [r7, #4]
10047a7a:	2390      	movs	r3, #144	@ 0x90
10047a7c:	05db      	lsls	r3, r3, #23
10047a7e:	429a      	cmp	r2, r3
10047a80:	d109      	bne.n	10047a96 <HAL_GPIO_DeInit+0x8c>
      {
        tmp &= ~(1<<position);
10047a82:	2201      	movs	r2, #1
10047a84:	697b      	ldr	r3, [r7, #20]
10047a86:	409a      	lsls	r2, r3
10047a88:	0013      	movs	r3, r2
10047a8a:	43db      	mvns	r3, r3
10047a8c:	001a      	movs	r2, r3
10047a8e:	693b      	ldr	r3, [r7, #16]
10047a90:	4013      	ands	r3, r2
10047a92:	613b      	str	r3, [r7, #16]
10047a94:	e009      	b.n	10047aaa <HAL_GPIO_DeInit+0xa0>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10047a96:	2201      	movs	r2, #1
10047a98:	697b      	ldr	r3, [r7, #20]
10047a9a:	409a      	lsls	r2, r3
10047a9c:	0013      	movs	r3, r2
10047a9e:	041b      	lsls	r3, r3, #16
10047aa0:	43db      	mvns	r3, r3
10047aa2:	001a      	movs	r2, r3
10047aa4:	693b      	ldr	r3, [r7, #16]
10047aa6:	4013      	ands	r3, r2
10047aa8:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_DTR = tmp;
10047aaa:	2380      	movs	r3, #128	@ 0x80
10047aac:	05db      	lsls	r3, r3, #23
10047aae:	693a      	ldr	r2, [r7, #16]
10047ab0:	60da      	str	r2, [r3, #12]

      tmp = SYSCFG->IO_IBER;
10047ab2:	2380      	movs	r3, #128	@ 0x80
10047ab4:	05db      	lsls	r3, r3, #23
10047ab6:	691b      	ldr	r3, [r3, #16]
10047ab8:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10047aba:	687a      	ldr	r2, [r7, #4]
10047abc:	2390      	movs	r3, #144	@ 0x90
10047abe:	05db      	lsls	r3, r3, #23
10047ac0:	429a      	cmp	r2, r3
10047ac2:	d109      	bne.n	10047ad8 <HAL_GPIO_DeInit+0xce>
      {
        tmp &= ~(1<<position);
10047ac4:	2201      	movs	r2, #1
10047ac6:	697b      	ldr	r3, [r7, #20]
10047ac8:	409a      	lsls	r2, r3
10047aca:	0013      	movs	r3, r2
10047acc:	43db      	mvns	r3, r3
10047ace:	001a      	movs	r2, r3
10047ad0:	693b      	ldr	r3, [r7, #16]
10047ad2:	4013      	ands	r3, r2
10047ad4:	613b      	str	r3, [r7, #16]
10047ad6:	e009      	b.n	10047aec <HAL_GPIO_DeInit+0xe2>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10047ad8:	2201      	movs	r2, #1
10047ada:	697b      	ldr	r3, [r7, #20]
10047adc:	409a      	lsls	r2, r3
10047ade:	0013      	movs	r3, r2
10047ae0:	041b      	lsls	r3, r3, #16
10047ae2:	43db      	mvns	r3, r3
10047ae4:	001a      	movs	r2, r3
10047ae6:	693b      	ldr	r3, [r7, #16]
10047ae8:	4013      	ands	r3, r2
10047aea:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IBER = tmp;
10047aec:	2380      	movs	r3, #128	@ 0x80
10047aee:	05db      	lsls	r3, r3, #23
10047af0:	693a      	ldr	r2, [r7, #16]
10047af2:	611a      	str	r2, [r3, #16]

      /* Clear trigger mode configuration */
      tmp = SYSCFG->IO_IEVR;
10047af4:	2380      	movs	r3, #128	@ 0x80
10047af6:	05db      	lsls	r3, r3, #23
10047af8:	695b      	ldr	r3, [r3, #20]
10047afa:	613b      	str	r3, [r7, #16]
      if(GPIOx == GPIOA)
10047afc:	687a      	ldr	r2, [r7, #4]
10047afe:	2390      	movs	r3, #144	@ 0x90
10047b00:	05db      	lsls	r3, r3, #23
10047b02:	429a      	cmp	r2, r3
10047b04:	d109      	bne.n	10047b1a <HAL_GPIO_DeInit+0x110>
      {
        tmp &= ~(1<<position);
10047b06:	2201      	movs	r2, #1
10047b08:	697b      	ldr	r3, [r7, #20]
10047b0a:	409a      	lsls	r2, r3
10047b0c:	0013      	movs	r3, r2
10047b0e:	43db      	mvns	r3, r3
10047b10:	001a      	movs	r2, r3
10047b12:	693b      	ldr	r3, [r7, #16]
10047b14:	4013      	ands	r3, r2
10047b16:	613b      	str	r3, [r7, #16]
10047b18:	e009      	b.n	10047b2e <HAL_GPIO_DeInit+0x124>
      }
      else
      {
        tmp &= ~((1<<position) << 16);
10047b1a:	2201      	movs	r2, #1
10047b1c:	697b      	ldr	r3, [r7, #20]
10047b1e:	409a      	lsls	r2, r3
10047b20:	0013      	movs	r3, r2
10047b22:	041b      	lsls	r3, r3, #16
10047b24:	43db      	mvns	r3, r3
10047b26:	001a      	movs	r2, r3
10047b28:	693b      	ldr	r3, [r7, #16]
10047b2a:	4013      	ands	r3, r2
10047b2c:	613b      	str	r3, [r7, #16]
      }
      SYSCFG->IO_IEVR = tmp;
10047b2e:	2380      	movs	r3, #128	@ 0x80
10047b30:	05db      	lsls	r3, r3, #23
10047b32:	693a      	ldr	r2, [r7, #16]
10047b34:	615a      	str	r2, [r3, #20]

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
10047b36:	687b      	ldr	r3, [r7, #4]
10047b38:	681a      	ldr	r2, [r3, #0]
10047b3a:	697b      	ldr	r3, [r7, #20]
10047b3c:	005b      	lsls	r3, r3, #1
10047b3e:	2103      	movs	r1, #3
10047b40:	4099      	lsls	r1, r3
10047b42:	000b      	movs	r3, r1
10047b44:	431a      	orrs	r2, r3
10047b46:	687b      	ldr	r3, [r7, #4]
10047b48:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
10047b4a:	697b      	ldr	r3, [r7, #20]
10047b4c:	08da      	lsrs	r2, r3, #3
10047b4e:	687b      	ldr	r3, [r7, #4]
10047b50:	3208      	adds	r2, #8
10047b52:	0092      	lsls	r2, r2, #2
10047b54:	58d3      	ldr	r3, [r2, r3]
10047b56:	697a      	ldr	r2, [r7, #20]
10047b58:	2107      	movs	r1, #7
10047b5a:	400a      	ands	r2, r1
10047b5c:	0092      	lsls	r2, r2, #2
10047b5e:	210f      	movs	r1, #15
10047b60:	4091      	lsls	r1, r2
10047b62:	000a      	movs	r2, r1
10047b64:	43d1      	mvns	r1, r2
10047b66:	697a      	ldr	r2, [r7, #20]
10047b68:	08d2      	lsrs	r2, r2, #3
10047b6a:	4019      	ands	r1, r3
10047b6c:	687b      	ldr	r3, [r7, #4]
10047b6e:	3208      	adds	r2, #8
10047b70:	0092      	lsls	r2, r2, #2
10047b72:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
10047b74:	687b      	ldr	r3, [r7, #4]
10047b76:	68db      	ldr	r3, [r3, #12]
10047b78:	697a      	ldr	r2, [r7, #20]
10047b7a:	0052      	lsls	r2, r2, #1
10047b7c:	2103      	movs	r1, #3
10047b7e:	4091      	lsls	r1, r2
10047b80:	000a      	movs	r2, r1
10047b82:	43d2      	mvns	r2, r2
10047b84:	401a      	ands	r2, r3
10047b86:	687b      	ldr	r3, [r7, #4]
10047b88:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
10047b8a:	687b      	ldr	r3, [r7, #4]
10047b8c:	685b      	ldr	r3, [r3, #4]
10047b8e:	2101      	movs	r1, #1
10047b90:	697a      	ldr	r2, [r7, #20]
10047b92:	4091      	lsls	r1, r2
10047b94:	000a      	movs	r2, r1
10047b96:	43d2      	mvns	r2, r2
10047b98:	401a      	ands	r2, r3
10047b9a:	687b      	ldr	r3, [r7, #4]
10047b9c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
10047b9e:	687b      	ldr	r3, [r7, #4]
10047ba0:	689b      	ldr	r3, [r3, #8]
10047ba2:	697a      	ldr	r2, [r7, #20]
10047ba4:	0052      	lsls	r2, r2, #1
10047ba6:	2103      	movs	r1, #3
10047ba8:	4091      	lsls	r1, r2
10047baa:	000a      	movs	r2, r1
10047bac:	43d2      	mvns	r2, r2
10047bae:	401a      	ands	r2, r3
10047bb0:	687b      	ldr	r3, [r7, #4]
10047bb2:	609a      	str	r2, [r3, #8]
    }

    position++;
10047bb4:	697b      	ldr	r3, [r7, #20]
10047bb6:	3301      	adds	r3, #1
10047bb8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
10047bba:	683a      	ldr	r2, [r7, #0]
10047bbc:	697b      	ldr	r3, [r7, #20]
10047bbe:	40da      	lsrs	r2, r3
10047bc0:	1e13      	subs	r3, r2, #0
10047bc2:	d000      	beq.n	10047bc6 <HAL_GPIO_DeInit+0x1bc>
10047bc4:	e729      	b.n	10047a1a <HAL_GPIO_DeInit+0x10>
  }
}
10047bc6:	46c0      	nop			@ (mov r8, r8)
10047bc8:	46c0      	nop			@ (mov r8, r8)
10047bca:	46bd      	mov	sp, r7
10047bcc:	b006      	add	sp, #24
10047bce:	bd80      	pop	{r7, pc}

10047bd0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
10047bd0:	b580      	push	{r7, lr}
10047bd2:	b084      	sub	sp, #16
10047bd4:	af00      	add	r7, sp, #0
10047bd6:	6078      	str	r0, [r7, #4]
10047bd8:	000a      	movs	r2, r1
10047bda:	1cbb      	adds	r3, r7, #2
10047bdc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
10047bde:	687b      	ldr	r3, [r7, #4]
10047be0:	691b      	ldr	r3, [r3, #16]
10047be2:	1cba      	adds	r2, r7, #2
10047be4:	8812      	ldrh	r2, [r2, #0]
10047be6:	4013      	ands	r3, r2
10047be8:	d004      	beq.n	10047bf4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
10047bea:	230f      	movs	r3, #15
10047bec:	18fb      	adds	r3, r7, r3
10047bee:	2201      	movs	r2, #1
10047bf0:	701a      	strb	r2, [r3, #0]
10047bf2:	e003      	b.n	10047bfc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
10047bf4:	230f      	movs	r3, #15
10047bf6:	18fb      	adds	r3, r7, r3
10047bf8:	2200      	movs	r2, #0
10047bfa:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
10047bfc:	230f      	movs	r3, #15
10047bfe:	18fb      	adds	r3, r7, r3
10047c00:	781b      	ldrb	r3, [r3, #0]
}
10047c02:	0018      	movs	r0, r3
10047c04:	46bd      	mov	sp, r7
10047c06:	b004      	add	sp, #16
10047c08:	bd80      	pop	{r7, pc}

10047c0a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10047c0a:	b580      	push	{r7, lr}
10047c0c:	b082      	sub	sp, #8
10047c0e:	af00      	add	r7, sp, #0
10047c10:	6078      	str	r0, [r7, #4]
10047c12:	0008      	movs	r0, r1
10047c14:	0011      	movs	r1, r2
10047c16:	1cbb      	adds	r3, r7, #2
10047c18:	1c02      	adds	r2, r0, #0
10047c1a:	801a      	strh	r2, [r3, #0]
10047c1c:	1c7b      	adds	r3, r7, #1
10047c1e:	1c0a      	adds	r2, r1, #0
10047c20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10047c22:	1c7b      	adds	r3, r7, #1
10047c24:	781b      	ldrb	r3, [r3, #0]
10047c26:	2b00      	cmp	r3, #0
10047c28:	d004      	beq.n	10047c34 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10047c2a:	1cbb      	adds	r3, r7, #2
10047c2c:	881a      	ldrh	r2, [r3, #0]
10047c2e:	687b      	ldr	r3, [r7, #4]
10047c30:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
10047c32:	e003      	b.n	10047c3c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10047c34:	1cbb      	adds	r3, r7, #2
10047c36:	881a      	ldrh	r2, [r3, #0]
10047c38:	687b      	ldr	r3, [r7, #4]
10047c3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
10047c3c:	46c0      	nop			@ (mov r8, r8)
10047c3e:	46bd      	mov	sp, r7
10047c40:	b002      	add	sp, #8
10047c42:	bd80      	pop	{r7, pc}

10047c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10047c44:	b580      	push	{r7, lr}
10047c46:	b082      	sub	sp, #8
10047c48:	af00      	add	r7, sp, #0
10047c4a:	6078      	str	r0, [r7, #4]
10047c4c:	000a      	movs	r2, r1
10047c4e:	1cbb      	adds	r3, r7, #2
10047c50:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIOx, GPIO_Pin) != 0x00u)
10047c52:	687a      	ldr	r2, [r7, #4]
10047c54:	2390      	movs	r3, #144	@ 0x90
10047c56:	05db      	lsls	r3, r3, #23
10047c58:	429a      	cmp	r2, r3
10047c5a:	d109      	bne.n	10047c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>
10047c5c:	2380      	movs	r3, #128	@ 0x80
10047c5e:	05db      	lsls	r3, r3, #23
10047c60:	69db      	ldr	r3, [r3, #28]
10047c62:	1cba      	adds	r2, r7, #2
10047c64:	8812      	ldrh	r2, [r2, #0]
10047c66:	4013      	ands	r3, r2
10047c68:	1e5a      	subs	r2, r3, #1
10047c6a:	4193      	sbcs	r3, r2
10047c6c:	b2db      	uxtb	r3, r3
10047c6e:	e009      	b.n	10047c84 <HAL_GPIO_EXTI_IRQHandler+0x40>
10047c70:	2380      	movs	r3, #128	@ 0x80
10047c72:	05db      	lsls	r3, r3, #23
10047c74:	69db      	ldr	r3, [r3, #28]
10047c76:	1cba      	adds	r2, r7, #2
10047c78:	8812      	ldrh	r2, [r2, #0]
10047c7a:	0412      	lsls	r2, r2, #16
10047c7c:	4013      	ands	r3, r2
10047c7e:	1e5a      	subs	r2, r3, #1
10047c80:	4193      	sbcs	r3, r2
10047c82:	b2db      	uxtb	r3, r3
10047c84:	2b00      	cmp	r3, #0
10047c86:	d017      	beq.n	10047cb8 <HAL_GPIO_EXTI_IRQHandler+0x74>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIOx, GPIO_Pin);
10047c88:	687a      	ldr	r2, [r7, #4]
10047c8a:	2390      	movs	r3, #144	@ 0x90
10047c8c:	05db      	lsls	r3, r3, #23
10047c8e:	429a      	cmp	r2, r3
10047c90:	d105      	bne.n	10047c9e <HAL_GPIO_EXTI_IRQHandler+0x5a>
10047c92:	2380      	movs	r3, #128	@ 0x80
10047c94:	05db      	lsls	r3, r3, #23
10047c96:	1cba      	adds	r2, r7, #2
10047c98:	8812      	ldrh	r2, [r2, #0]
10047c9a:	61da      	str	r2, [r3, #28]
10047c9c:	e005      	b.n	10047caa <HAL_GPIO_EXTI_IRQHandler+0x66>
10047c9e:	1cbb      	adds	r3, r7, #2
10047ca0:	881a      	ldrh	r2, [r3, #0]
10047ca2:	2380      	movs	r3, #128	@ 0x80
10047ca4:	05db      	lsls	r3, r3, #23
10047ca6:	0412      	lsls	r2, r2, #16
10047ca8:	61da      	str	r2, [r3, #28]
    HAL_GPIO_EXTI_Callback(GPIOx, GPIO_Pin);
10047caa:	1cbb      	adds	r3, r7, #2
10047cac:	881a      	ldrh	r2, [r3, #0]
10047cae:	687b      	ldr	r3, [r7, #4]
10047cb0:	0011      	movs	r1, r2
10047cb2:	0018      	movs	r0, r3
10047cb4:	f000 f804 	bl	10047cc0 <HAL_GPIO_EXTI_Callback>
  }
}
10047cb8:	46c0      	nop			@ (mov r8, r8)
10047cba:	46bd      	mov	sp, r7
10047cbc:	b002      	add	sp, #8
10047cbe:	bd80      	pop	{r7, pc}

10047cc0 <HAL_GPIO_EXTI_Callback>:
  * @param GPIOx where x can be (A..B) to select the GPIO peripheral
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10047cc0:	b580      	push	{r7, lr}
10047cc2:	b082      	sub	sp, #8
10047cc4:	af00      	add	r7, sp, #0
10047cc6:	6078      	str	r0, [r7, #4]
10047cc8:	000a      	movs	r2, r1
10047cca:	1cbb      	adds	r3, r7, #2
10047ccc:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
10047cce:	46c0      	nop			@ (mov r8, r8)
10047cd0:	46bd      	mov	sp, r7
10047cd2:	b002      	add	sp, #8
10047cd4:	bd80      	pop	{r7, pc}
	...

10047cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
10047cd8:	b580      	push	{r7, lr}
10047cda:	b082      	sub	sp, #8
10047cdc:	af00      	add	r7, sp, #0
10047cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
10047ce0:	687b      	ldr	r3, [r7, #4]
10047ce2:	2b00      	cmp	r3, #0
10047ce4:	d101      	bne.n	10047cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
10047ce6:	2301      	movs	r3, #1
10047ce8:	e08f      	b.n	10047e0a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
10047cea:	687b      	ldr	r3, [r7, #4]
10047cec:	2241      	movs	r2, #65	@ 0x41
10047cee:	5c9b      	ldrb	r3, [r3, r2]
10047cf0:	b2db      	uxtb	r3, r3
10047cf2:	2b00      	cmp	r3, #0
10047cf4:	d107      	bne.n	10047d06 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
10047cf6:	687b      	ldr	r3, [r7, #4]
10047cf8:	2240      	movs	r2, #64	@ 0x40
10047cfa:	2100      	movs	r1, #0
10047cfc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
10047cfe:	687b      	ldr	r3, [r7, #4]
10047d00:	0018      	movs	r0, r3
10047d02:	f7fe fabf 	bl	10046284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
10047d06:	687b      	ldr	r3, [r7, #4]
10047d08:	2241      	movs	r2, #65	@ 0x41
10047d0a:	2124      	movs	r1, #36	@ 0x24
10047d0c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
10047d0e:	687b      	ldr	r3, [r7, #4]
10047d10:	681b      	ldr	r3, [r3, #0]
10047d12:	681a      	ldr	r2, [r3, #0]
10047d14:	687b      	ldr	r3, [r7, #4]
10047d16:	681b      	ldr	r3, [r3, #0]
10047d18:	2101      	movs	r1, #1
10047d1a:	438a      	bics	r2, r1
10047d1c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
10047d1e:	687b      	ldr	r3, [r7, #4]
10047d20:	685a      	ldr	r2, [r3, #4]
10047d22:	687b      	ldr	r3, [r7, #4]
10047d24:	681b      	ldr	r3, [r3, #0]
10047d26:	493b      	ldr	r1, [pc, #236]	@ (10047e14 <HAL_I2C_Init+0x13c>)
10047d28:	400a      	ands	r2, r1
10047d2a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
10047d2c:	687b      	ldr	r3, [r7, #4]
10047d2e:	681b      	ldr	r3, [r3, #0]
10047d30:	689a      	ldr	r2, [r3, #8]
10047d32:	687b      	ldr	r3, [r7, #4]
10047d34:	681b      	ldr	r3, [r3, #0]
10047d36:	4938      	ldr	r1, [pc, #224]	@ (10047e18 <HAL_I2C_Init+0x140>)
10047d38:	400a      	ands	r2, r1
10047d3a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
10047d3c:	687b      	ldr	r3, [r7, #4]
10047d3e:	68db      	ldr	r3, [r3, #12]
10047d40:	2b01      	cmp	r3, #1
10047d42:	d108      	bne.n	10047d56 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
10047d44:	687b      	ldr	r3, [r7, #4]
10047d46:	689a      	ldr	r2, [r3, #8]
10047d48:	687b      	ldr	r3, [r7, #4]
10047d4a:	681b      	ldr	r3, [r3, #0]
10047d4c:	2180      	movs	r1, #128	@ 0x80
10047d4e:	0209      	lsls	r1, r1, #8
10047d50:	430a      	orrs	r2, r1
10047d52:	609a      	str	r2, [r3, #8]
10047d54:	e007      	b.n	10047d66 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
10047d56:	687b      	ldr	r3, [r7, #4]
10047d58:	689a      	ldr	r2, [r3, #8]
10047d5a:	687b      	ldr	r3, [r7, #4]
10047d5c:	681b      	ldr	r3, [r3, #0]
10047d5e:	2184      	movs	r1, #132	@ 0x84
10047d60:	0209      	lsls	r1, r1, #8
10047d62:	430a      	orrs	r2, r1
10047d64:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10047d66:	687b      	ldr	r3, [r7, #4]
10047d68:	68db      	ldr	r3, [r3, #12]
10047d6a:	2b02      	cmp	r3, #2
10047d6c:	d109      	bne.n	10047d82 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10047d6e:	687b      	ldr	r3, [r7, #4]
10047d70:	681b      	ldr	r3, [r3, #0]
10047d72:	685a      	ldr	r2, [r3, #4]
10047d74:	687b      	ldr	r3, [r7, #4]
10047d76:	681b      	ldr	r3, [r3, #0]
10047d78:	2180      	movs	r1, #128	@ 0x80
10047d7a:	0109      	lsls	r1, r1, #4
10047d7c:	430a      	orrs	r2, r1
10047d7e:	605a      	str	r2, [r3, #4]
10047d80:	e007      	b.n	10047d92 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
10047d82:	687b      	ldr	r3, [r7, #4]
10047d84:	681b      	ldr	r3, [r3, #0]
10047d86:	685a      	ldr	r2, [r3, #4]
10047d88:	687b      	ldr	r3, [r7, #4]
10047d8a:	681b      	ldr	r3, [r3, #0]
10047d8c:	4923      	ldr	r1, [pc, #140]	@ (10047e1c <HAL_I2C_Init+0x144>)
10047d8e:	400a      	ands	r2, r1
10047d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
10047d92:	687b      	ldr	r3, [r7, #4]
10047d94:	681b      	ldr	r3, [r3, #0]
10047d96:	685a      	ldr	r2, [r3, #4]
10047d98:	687b      	ldr	r3, [r7, #4]
10047d9a:	681b      	ldr	r3, [r3, #0]
10047d9c:	4920      	ldr	r1, [pc, #128]	@ (10047e20 <HAL_I2C_Init+0x148>)
10047d9e:	430a      	orrs	r2, r1
10047da0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
10047da2:	687b      	ldr	r3, [r7, #4]
10047da4:	681b      	ldr	r3, [r3, #0]
10047da6:	68da      	ldr	r2, [r3, #12]
10047da8:	687b      	ldr	r3, [r7, #4]
10047daa:	681b      	ldr	r3, [r3, #0]
10047dac:	491a      	ldr	r1, [pc, #104]	@ (10047e18 <HAL_I2C_Init+0x140>)
10047dae:	400a      	ands	r2, r1
10047db0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10047db2:	687b      	ldr	r3, [r7, #4]
10047db4:	691a      	ldr	r2, [r3, #16]
10047db6:	687b      	ldr	r3, [r7, #4]
10047db8:	695b      	ldr	r3, [r3, #20]
10047dba:	431a      	orrs	r2, r3
10047dbc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
10047dbe:	687b      	ldr	r3, [r7, #4]
10047dc0:	699b      	ldr	r3, [r3, #24]
10047dc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
10047dc4:	687b      	ldr	r3, [r7, #4]
10047dc6:	681b      	ldr	r3, [r3, #0]
10047dc8:	430a      	orrs	r2, r1
10047dca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
10047dcc:	687b      	ldr	r3, [r7, #4]
10047dce:	69d9      	ldr	r1, [r3, #28]
10047dd0:	687b      	ldr	r3, [r7, #4]
10047dd2:	6a1a      	ldr	r2, [r3, #32]
10047dd4:	687b      	ldr	r3, [r7, #4]
10047dd6:	681b      	ldr	r3, [r3, #0]
10047dd8:	430a      	orrs	r2, r1
10047dda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
10047ddc:	687b      	ldr	r3, [r7, #4]
10047dde:	681b      	ldr	r3, [r3, #0]
10047de0:	681a      	ldr	r2, [r3, #0]
10047de2:	687b      	ldr	r3, [r7, #4]
10047de4:	681b      	ldr	r3, [r3, #0]
10047de6:	2101      	movs	r1, #1
10047de8:	430a      	orrs	r2, r1
10047dea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
10047dec:	687b      	ldr	r3, [r7, #4]
10047dee:	2200      	movs	r2, #0
10047df0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
10047df2:	687b      	ldr	r3, [r7, #4]
10047df4:	2241      	movs	r2, #65	@ 0x41
10047df6:	2120      	movs	r1, #32
10047df8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
10047dfa:	687b      	ldr	r3, [r7, #4]
10047dfc:	2200      	movs	r2, #0
10047dfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
10047e00:	687b      	ldr	r3, [r7, #4]
10047e02:	2242      	movs	r2, #66	@ 0x42
10047e04:	2100      	movs	r1, #0
10047e06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10047e08:	2300      	movs	r3, #0
}
10047e0a:	0018      	movs	r0, r3
10047e0c:	46bd      	mov	sp, r7
10047e0e:	b002      	add	sp, #8
10047e10:	bd80      	pop	{r7, pc}
10047e12:	46c0      	nop			@ (mov r8, r8)
10047e14:	f0ffffff 	.word	0xf0ffffff
10047e18:	ffff7fff 	.word	0xffff7fff
10047e1c:	fffff7ff 	.word	0xfffff7ff
10047e20:	02008000 	.word	0x02008000

10047e24 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10047e24:	b590      	push	{r4, r7, lr}
10047e26:	b087      	sub	sp, #28
10047e28:	af02      	add	r7, sp, #8
10047e2a:	60f8      	str	r0, [r7, #12]
10047e2c:	000c      	movs	r4, r1
10047e2e:	0010      	movs	r0, r2
10047e30:	0019      	movs	r1, r3
10047e32:	230a      	movs	r3, #10
10047e34:	18fb      	adds	r3, r7, r3
10047e36:	1c22      	adds	r2, r4, #0
10047e38:	801a      	strh	r2, [r3, #0]
10047e3a:	2308      	movs	r3, #8
10047e3c:	18fb      	adds	r3, r7, r3
10047e3e:	1c02      	adds	r2, r0, #0
10047e40:	801a      	strh	r2, [r3, #0]
10047e42:	1dbb      	adds	r3, r7, #6
10047e44:	1c0a      	adds	r2, r1, #0
10047e46:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10047e48:	68fb      	ldr	r3, [r7, #12]
10047e4a:	2241      	movs	r2, #65	@ 0x41
10047e4c:	5c9b      	ldrb	r3, [r3, r2]
10047e4e:	b2db      	uxtb	r3, r3
10047e50:	2b20      	cmp	r3, #32
10047e52:	d000      	beq.n	10047e56 <HAL_I2C_Mem_Write_IT+0x32>
10047e54:	e07d      	b.n	10047f52 <HAL_I2C_Mem_Write_IT+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
10047e56:	6a3b      	ldr	r3, [r7, #32]
10047e58:	2b00      	cmp	r3, #0
10047e5a:	d004      	beq.n	10047e66 <HAL_I2C_Mem_Write_IT+0x42>
10047e5c:	2324      	movs	r3, #36	@ 0x24
10047e5e:	18fb      	adds	r3, r7, r3
10047e60:	881b      	ldrh	r3, [r3, #0]
10047e62:	2b00      	cmp	r3, #0
10047e64:	d105      	bne.n	10047e72 <HAL_I2C_Mem_Write_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10047e66:	68fb      	ldr	r3, [r7, #12]
10047e68:	2280      	movs	r2, #128	@ 0x80
10047e6a:	0092      	lsls	r2, r2, #2
10047e6c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10047e6e:	2301      	movs	r3, #1
10047e70:	e070      	b.n	10047f54 <HAL_I2C_Mem_Write_IT+0x130>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
10047e72:	68fb      	ldr	r3, [r7, #12]
10047e74:	681b      	ldr	r3, [r3, #0]
10047e76:	699a      	ldr	r2, [r3, #24]
10047e78:	2380      	movs	r3, #128	@ 0x80
10047e7a:	021b      	lsls	r3, r3, #8
10047e7c:	401a      	ands	r2, r3
10047e7e:	2380      	movs	r3, #128	@ 0x80
10047e80:	021b      	lsls	r3, r3, #8
10047e82:	429a      	cmp	r2, r3
10047e84:	d101      	bne.n	10047e8a <HAL_I2C_Mem_Write_IT+0x66>
    {
      return HAL_BUSY;
10047e86:	2302      	movs	r3, #2
10047e88:	e064      	b.n	10047f54 <HAL_I2C_Mem_Write_IT+0x130>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10047e8a:	68fb      	ldr	r3, [r7, #12]
10047e8c:	2240      	movs	r2, #64	@ 0x40
10047e8e:	5c9b      	ldrb	r3, [r3, r2]
10047e90:	2b01      	cmp	r3, #1
10047e92:	d101      	bne.n	10047e98 <HAL_I2C_Mem_Write_IT+0x74>
10047e94:	2302      	movs	r3, #2
10047e96:	e05d      	b.n	10047f54 <HAL_I2C_Mem_Write_IT+0x130>
10047e98:	68fb      	ldr	r3, [r7, #12]
10047e9a:	2240      	movs	r2, #64	@ 0x40
10047e9c:	2101      	movs	r1, #1
10047e9e:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
10047ea0:	68fb      	ldr	r3, [r7, #12]
10047ea2:	2241      	movs	r2, #65	@ 0x41
10047ea4:	2121      	movs	r1, #33	@ 0x21
10047ea6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10047ea8:	68fb      	ldr	r3, [r7, #12]
10047eaa:	2242      	movs	r2, #66	@ 0x42
10047eac:	2140      	movs	r1, #64	@ 0x40
10047eae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10047eb0:	68fb      	ldr	r3, [r7, #12]
10047eb2:	2200      	movs	r2, #0
10047eb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
10047eb6:	68fb      	ldr	r3, [r7, #12]
10047eb8:	2200      	movs	r2, #0
10047eba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
10047ebc:	68fb      	ldr	r3, [r7, #12]
10047ebe:	6a3a      	ldr	r2, [r7, #32]
10047ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10047ec2:	68fb      	ldr	r3, [r7, #12]
10047ec4:	2224      	movs	r2, #36	@ 0x24
10047ec6:	18ba      	adds	r2, r7, r2
10047ec8:	8812      	ldrh	r2, [r2, #0]
10047eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10047ecc:	68fb      	ldr	r3, [r7, #12]
10047ece:	4a23      	ldr	r2, [pc, #140]	@ (10047f5c <HAL_I2C_Mem_Write_IT+0x138>)
10047ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10047ed2:	68fb      	ldr	r3, [r7, #12]
10047ed4:	4a22      	ldr	r2, [pc, #136]	@ (10047f60 <HAL_I2C_Mem_Write_IT+0x13c>)
10047ed6:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
10047ed8:	230a      	movs	r3, #10
10047eda:	18fb      	adds	r3, r7, r3
10047edc:	881a      	ldrh	r2, [r3, #0]
10047ede:	68fb      	ldr	r3, [r7, #12]
10047ee0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10047ee2:	1dbb      	adds	r3, r7, #6
10047ee4:	881b      	ldrh	r3, [r3, #0]
10047ee6:	2b01      	cmp	r3, #1
10047ee8:	d10b      	bne.n	10047f02 <HAL_I2C_Mem_Write_IT+0xde>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10047eea:	2308      	movs	r3, #8
10047eec:	18fb      	adds	r3, r7, r3
10047eee:	881b      	ldrh	r3, [r3, #0]
10047ef0:	b2da      	uxtb	r2, r3
10047ef2:	68fb      	ldr	r3, [r7, #12]
10047ef4:	681b      	ldr	r3, [r3, #0]
10047ef6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10047ef8:	68fb      	ldr	r3, [r7, #12]
10047efa:	2201      	movs	r2, #1
10047efc:	4252      	negs	r2, r2
10047efe:	651a      	str	r2, [r3, #80]	@ 0x50
10047f00:	e00e      	b.n	10047f20 <HAL_I2C_Mem_Write_IT+0xfc>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10047f02:	2108      	movs	r1, #8
10047f04:	187b      	adds	r3, r7, r1
10047f06:	881b      	ldrh	r3, [r3, #0]
10047f08:	0a1b      	lsrs	r3, r3, #8
10047f0a:	b29b      	uxth	r3, r3
10047f0c:	b2da      	uxtb	r2, r3
10047f0e:	68fb      	ldr	r3, [r7, #12]
10047f10:	681b      	ldr	r3, [r3, #0]
10047f12:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
10047f14:	187b      	adds	r3, r7, r1
10047f16:	881b      	ldrh	r3, [r3, #0]
10047f18:	b2db      	uxtb	r3, r3
10047f1a:	001a      	movs	r2, r3
10047f1c:	68fb      	ldr	r3, [r7, #12]
10047f1e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
10047f20:	1dbb      	adds	r3, r7, #6
10047f22:	881b      	ldrh	r3, [r3, #0]
10047f24:	b2da      	uxtb	r2, r3
10047f26:	2380      	movs	r3, #128	@ 0x80
10047f28:	045c      	lsls	r4, r3, #17
10047f2a:	230a      	movs	r3, #10
10047f2c:	18fb      	adds	r3, r7, r3
10047f2e:	8819      	ldrh	r1, [r3, #0]
10047f30:	68f8      	ldr	r0, [r7, #12]
10047f32:	4b0c      	ldr	r3, [pc, #48]	@ (10047f64 <HAL_I2C_Mem_Write_IT+0x140>)
10047f34:	9300      	str	r3, [sp, #0]
10047f36:	0023      	movs	r3, r4
10047f38:	f001 fc7e 	bl	10049838 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10047f3c:	68fb      	ldr	r3, [r7, #12]
10047f3e:	2240      	movs	r2, #64	@ 0x40
10047f40:	2100      	movs	r1, #0
10047f42:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
10047f44:	68fb      	ldr	r3, [r7, #12]
10047f46:	2101      	movs	r1, #1
10047f48:	0018      	movs	r0, r3
10047f4a:	f001 fcaf 	bl	100498ac <I2C_Enable_IRQ>

    return HAL_OK;
10047f4e:	2300      	movs	r3, #0
10047f50:	e000      	b.n	10047f54 <HAL_I2C_Mem_Write_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
10047f52:	2302      	movs	r3, #2
  }
}
10047f54:	0018      	movs	r0, r3
10047f56:	46bd      	mov	sp, r7
10047f58:	b005      	add	sp, #20
10047f5a:	bd90      	pop	{r4, r7, pc}
10047f5c:	ffff0000 	.word	0xffff0000
10047f60:	1004822d 	.word	0x1004822d
10047f64:	80002000 	.word	0x80002000

10047f68 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
10047f68:	b590      	push	{r4, r7, lr}
10047f6a:	b087      	sub	sp, #28
10047f6c:	af02      	add	r7, sp, #8
10047f6e:	60f8      	str	r0, [r7, #12]
10047f70:	000c      	movs	r4, r1
10047f72:	0010      	movs	r0, r2
10047f74:	0019      	movs	r1, r3
10047f76:	230a      	movs	r3, #10
10047f78:	18fb      	adds	r3, r7, r3
10047f7a:	1c22      	adds	r2, r4, #0
10047f7c:	801a      	strh	r2, [r3, #0]
10047f7e:	2308      	movs	r3, #8
10047f80:	18fb      	adds	r3, r7, r3
10047f82:	1c02      	adds	r2, r0, #0
10047f84:	801a      	strh	r2, [r3, #0]
10047f86:	1dbb      	adds	r3, r7, #6
10047f88:	1c0a      	adds	r2, r1, #0
10047f8a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
10047f8c:	68fb      	ldr	r3, [r7, #12]
10047f8e:	2241      	movs	r2, #65	@ 0x41
10047f90:	5c9b      	ldrb	r3, [r3, r2]
10047f92:	b2db      	uxtb	r3, r3
10047f94:	2b20      	cmp	r3, #32
10047f96:	d000      	beq.n	10047f9a <HAL_I2C_Mem_Read_IT+0x32>
10047f98:	e078      	b.n	1004808c <HAL_I2C_Mem_Read_IT+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10047f9a:	6a3b      	ldr	r3, [r7, #32]
10047f9c:	2b00      	cmp	r3, #0
10047f9e:	d004      	beq.n	10047faa <HAL_I2C_Mem_Read_IT+0x42>
10047fa0:	2324      	movs	r3, #36	@ 0x24
10047fa2:	18fb      	adds	r3, r7, r3
10047fa4:	881b      	ldrh	r3, [r3, #0]
10047fa6:	2b00      	cmp	r3, #0
10047fa8:	d105      	bne.n	10047fb6 <HAL_I2C_Mem_Read_IT+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
10047faa:	68fb      	ldr	r3, [r7, #12]
10047fac:	2280      	movs	r2, #128	@ 0x80
10047fae:	0092      	lsls	r2, r2, #2
10047fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
10047fb2:	2301      	movs	r3, #1
10047fb4:	e06b      	b.n	1004808e <HAL_I2C_Mem_Read_IT+0x126>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
10047fb6:	68fb      	ldr	r3, [r7, #12]
10047fb8:	681b      	ldr	r3, [r3, #0]
10047fba:	699a      	ldr	r2, [r3, #24]
10047fbc:	2380      	movs	r3, #128	@ 0x80
10047fbe:	021b      	lsls	r3, r3, #8
10047fc0:	401a      	ands	r2, r3
10047fc2:	2380      	movs	r3, #128	@ 0x80
10047fc4:	021b      	lsls	r3, r3, #8
10047fc6:	429a      	cmp	r2, r3
10047fc8:	d101      	bne.n	10047fce <HAL_I2C_Mem_Read_IT+0x66>
    {
      return HAL_BUSY;
10047fca:	2302      	movs	r3, #2
10047fcc:	e05f      	b.n	1004808e <HAL_I2C_Mem_Read_IT+0x126>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
10047fce:	68fb      	ldr	r3, [r7, #12]
10047fd0:	2240      	movs	r2, #64	@ 0x40
10047fd2:	5c9b      	ldrb	r3, [r3, r2]
10047fd4:	2b01      	cmp	r3, #1
10047fd6:	d101      	bne.n	10047fdc <HAL_I2C_Mem_Read_IT+0x74>
10047fd8:	2302      	movs	r3, #2
10047fda:	e058      	b.n	1004808e <HAL_I2C_Mem_Read_IT+0x126>
10047fdc:	68fb      	ldr	r3, [r7, #12]
10047fde:	2240      	movs	r2, #64	@ 0x40
10047fe0:	2101      	movs	r1, #1
10047fe2:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
10047fe4:	68fb      	ldr	r3, [r7, #12]
10047fe6:	2241      	movs	r2, #65	@ 0x41
10047fe8:	2122      	movs	r1, #34	@ 0x22
10047fea:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
10047fec:	68fb      	ldr	r3, [r7, #12]
10047fee:	2242      	movs	r2, #66	@ 0x42
10047ff0:	2140      	movs	r1, #64	@ 0x40
10047ff2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
10047ff4:	68fb      	ldr	r3, [r7, #12]
10047ff6:	2200      	movs	r2, #0
10047ff8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
10047ffa:	68fb      	ldr	r3, [r7, #12]
10047ffc:	6a3a      	ldr	r2, [r7, #32]
10047ffe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
10048000:	68fb      	ldr	r3, [r7, #12]
10048002:	2224      	movs	r2, #36	@ 0x24
10048004:	18ba      	adds	r2, r7, r2
10048006:	8812      	ldrh	r2, [r2, #0]
10048008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
1004800a:	68fb      	ldr	r3, [r7, #12]
1004800c:	4a22      	ldr	r2, [pc, #136]	@ (10048098 <HAL_I2C_Mem_Read_IT+0x130>)
1004800e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
10048010:	68fb      	ldr	r3, [r7, #12]
10048012:	4a22      	ldr	r2, [pc, #136]	@ (1004809c <HAL_I2C_Mem_Read_IT+0x134>)
10048014:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
10048016:	230a      	movs	r3, #10
10048018:	18fb      	adds	r3, r7, r3
1004801a:	881a      	ldrh	r2, [r3, #0]
1004801c:	68fb      	ldr	r3, [r7, #12]
1004801e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
10048020:	1dbb      	adds	r3, r7, #6
10048022:	881b      	ldrh	r3, [r3, #0]
10048024:	2b01      	cmp	r3, #1
10048026:	d10b      	bne.n	10048040 <HAL_I2C_Mem_Read_IT+0xd8>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
10048028:	2308      	movs	r3, #8
1004802a:	18fb      	adds	r3, r7, r3
1004802c:	881b      	ldrh	r3, [r3, #0]
1004802e:	b2da      	uxtb	r2, r3
10048030:	68fb      	ldr	r3, [r7, #12]
10048032:	681b      	ldr	r3, [r3, #0]
10048034:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
10048036:	68fb      	ldr	r3, [r7, #12]
10048038:	2201      	movs	r2, #1
1004803a:	4252      	negs	r2, r2
1004803c:	651a      	str	r2, [r3, #80]	@ 0x50
1004803e:	e00e      	b.n	1004805e <HAL_I2C_Mem_Read_IT+0xf6>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
10048040:	2108      	movs	r1, #8
10048042:	187b      	adds	r3, r7, r1
10048044:	881b      	ldrh	r3, [r3, #0]
10048046:	0a1b      	lsrs	r3, r3, #8
10048048:	b29b      	uxth	r3, r3
1004804a:	b2da      	uxtb	r2, r3
1004804c:	68fb      	ldr	r3, [r7, #12]
1004804e:	681b      	ldr	r3, [r3, #0]
10048050:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
10048052:	187b      	adds	r3, r7, r1
10048054:	881b      	ldrh	r3, [r3, #0]
10048056:	b2db      	uxtb	r3, r3
10048058:	001a      	movs	r2, r3
1004805a:	68fb      	ldr	r3, [r7, #12]
1004805c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
1004805e:	1dbb      	adds	r3, r7, #6
10048060:	881b      	ldrh	r3, [r3, #0]
10048062:	b2da      	uxtb	r2, r3
10048064:	230a      	movs	r3, #10
10048066:	18fb      	adds	r3, r7, r3
10048068:	8819      	ldrh	r1, [r3, #0]
1004806a:	68f8      	ldr	r0, [r7, #12]
1004806c:	4b0c      	ldr	r3, [pc, #48]	@ (100480a0 <HAL_I2C_Mem_Read_IT+0x138>)
1004806e:	9300      	str	r3, [sp, #0]
10048070:	2300      	movs	r3, #0
10048072:	f001 fbe1 	bl	10049838 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048076:	68fb      	ldr	r3, [r7, #12]
10048078:	2240      	movs	r2, #64	@ 0x40
1004807a:	2100      	movs	r1, #0
1004807c:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
1004807e:	68fb      	ldr	r3, [r7, #12]
10048080:	2101      	movs	r1, #1
10048082:	0018      	movs	r0, r3
10048084:	f001 fc12 	bl	100498ac <I2C_Enable_IRQ>

    return HAL_OK;
10048088:	2300      	movs	r3, #0
1004808a:	e000      	b.n	1004808e <HAL_I2C_Mem_Read_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
1004808c:	2302      	movs	r3, #2
  }
}
1004808e:	0018      	movs	r0, r3
10048090:	46bd      	mov	sp, r7
10048092:	b005      	add	sp, #20
10048094:	bd90      	pop	{r4, r7, pc}
10048096:	46c0      	nop			@ (mov r8, r8)
10048098:	ffff0000 	.word	0xffff0000
1004809c:	1004822d 	.word	0x1004822d
100480a0:	80002000 	.word	0x80002000

100480a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
100480a4:	b580      	push	{r7, lr}
100480a6:	b084      	sub	sp, #16
100480a8:	af00      	add	r7, sp, #0
100480aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
100480ac:	687b      	ldr	r3, [r7, #4]
100480ae:	681b      	ldr	r3, [r3, #0]
100480b0:	699b      	ldr	r3, [r3, #24]
100480b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
100480b4:	687b      	ldr	r3, [r7, #4]
100480b6:	681b      	ldr	r3, [r3, #0]
100480b8:	681b      	ldr	r3, [r3, #0]
100480ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
100480bc:	687b      	ldr	r3, [r7, #4]
100480be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100480c0:	2b00      	cmp	r3, #0
100480c2:	d005      	beq.n	100480d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
100480c4:	687b      	ldr	r3, [r7, #4]
100480c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
100480c8:	68ba      	ldr	r2, [r7, #8]
100480ca:	68f9      	ldr	r1, [r7, #12]
100480cc:	6878      	ldr	r0, [r7, #4]
100480ce:	4798      	blx	r3
  }
}
100480d0:	46c0      	nop			@ (mov r8, r8)
100480d2:	46bd      	mov	sp, r7
100480d4:	b004      	add	sp, #16
100480d6:	bd80      	pop	{r7, pc}

100480d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
100480d8:	b580      	push	{r7, lr}
100480da:	b086      	sub	sp, #24
100480dc:	af00      	add	r7, sp, #0
100480de:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
100480e0:	687b      	ldr	r3, [r7, #4]
100480e2:	681b      	ldr	r3, [r3, #0]
100480e4:	699b      	ldr	r3, [r3, #24]
100480e6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
100480e8:	687b      	ldr	r3, [r7, #4]
100480ea:	681b      	ldr	r3, [r3, #0]
100480ec:	681b      	ldr	r3, [r3, #0]
100480ee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
100480f0:	697b      	ldr	r3, [r7, #20]
100480f2:	0a1b      	lsrs	r3, r3, #8
100480f4:	001a      	movs	r2, r3
100480f6:	2301      	movs	r3, #1
100480f8:	4013      	ands	r3, r2
100480fa:	d010      	beq.n	1004811e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
100480fc:	693b      	ldr	r3, [r7, #16]
100480fe:	09db      	lsrs	r3, r3, #7
10048100:	001a      	movs	r2, r3
10048102:	2301      	movs	r3, #1
10048104:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
10048106:	d00a      	beq.n	1004811e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
10048108:	687b      	ldr	r3, [r7, #4]
1004810a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004810c:	2201      	movs	r2, #1
1004810e:	431a      	orrs	r2, r3
10048110:	687b      	ldr	r3, [r7, #4]
10048112:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
10048114:	687b      	ldr	r3, [r7, #4]
10048116:	681b      	ldr	r3, [r3, #0]
10048118:	2280      	movs	r2, #128	@ 0x80
1004811a:	0052      	lsls	r2, r2, #1
1004811c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
1004811e:	697b      	ldr	r3, [r7, #20]
10048120:	0a9b      	lsrs	r3, r3, #10
10048122:	001a      	movs	r2, r3
10048124:	2301      	movs	r3, #1
10048126:	4013      	ands	r3, r2
10048128:	d010      	beq.n	1004814c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
1004812a:	693b      	ldr	r3, [r7, #16]
1004812c:	09db      	lsrs	r3, r3, #7
1004812e:	001a      	movs	r2, r3
10048130:	2301      	movs	r3, #1
10048132:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
10048134:	d00a      	beq.n	1004814c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
10048136:	687b      	ldr	r3, [r7, #4]
10048138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004813a:	2208      	movs	r2, #8
1004813c:	431a      	orrs	r2, r3
1004813e:	687b      	ldr	r3, [r7, #4]
10048140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
10048142:	687b      	ldr	r3, [r7, #4]
10048144:	681b      	ldr	r3, [r3, #0]
10048146:	2280      	movs	r2, #128	@ 0x80
10048148:	00d2      	lsls	r2, r2, #3
1004814a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
1004814c:	697b      	ldr	r3, [r7, #20]
1004814e:	0a5b      	lsrs	r3, r3, #9
10048150:	001a      	movs	r2, r3
10048152:	2301      	movs	r3, #1
10048154:	4013      	ands	r3, r2
10048156:	d010      	beq.n	1004817a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
10048158:	693b      	ldr	r3, [r7, #16]
1004815a:	09db      	lsrs	r3, r3, #7
1004815c:	001a      	movs	r2, r3
1004815e:	2301      	movs	r3, #1
10048160:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
10048162:	d00a      	beq.n	1004817a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
10048164:	687b      	ldr	r3, [r7, #4]
10048166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048168:	2202      	movs	r2, #2
1004816a:	431a      	orrs	r2, r3
1004816c:	687b      	ldr	r3, [r7, #4]
1004816e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
10048170:	687b      	ldr	r3, [r7, #4]
10048172:	681b      	ldr	r3, [r3, #0]
10048174:	2280      	movs	r2, #128	@ 0x80
10048176:	0092      	lsls	r2, r2, #2
10048178:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
1004817a:	687b      	ldr	r3, [r7, #4]
1004817c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004817e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
10048180:	68fb      	ldr	r3, [r7, #12]
10048182:	220b      	movs	r2, #11
10048184:	4013      	ands	r3, r2
10048186:	d005      	beq.n	10048194 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
10048188:	68fa      	ldr	r2, [r7, #12]
1004818a:	687b      	ldr	r3, [r7, #4]
1004818c:	0011      	movs	r1, r2
1004818e:	0018      	movs	r0, r3
10048190:	f001 f9e6 	bl	10049560 <I2C_ITError>
  }
}
10048194:	46c0      	nop			@ (mov r8, r8)
10048196:	46bd      	mov	sp, r7
10048198:	b006      	add	sp, #24
1004819a:	bd80      	pop	{r7, pc}

1004819c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
1004819c:	b580      	push	{r7, lr}
1004819e:	b082      	sub	sp, #8
100481a0:	af00      	add	r7, sp, #0
100481a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
100481a4:	46c0      	nop			@ (mov r8, r8)
100481a6:	46bd      	mov	sp, r7
100481a8:	b002      	add	sp, #8
100481aa:	bd80      	pop	{r7, pc}

100481ac <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100481ac:	b580      	push	{r7, lr}
100481ae:	b082      	sub	sp, #8
100481b0:	af00      	add	r7, sp, #0
100481b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
100481b4:	46c0      	nop			@ (mov r8, r8)
100481b6:	46bd      	mov	sp, r7
100481b8:	b002      	add	sp, #8
100481ba:	bd80      	pop	{r7, pc}

100481bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100481bc:	b580      	push	{r7, lr}
100481be:	b082      	sub	sp, #8
100481c0:	af00      	add	r7, sp, #0
100481c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
100481c4:	46c0      	nop			@ (mov r8, r8)
100481c6:	46bd      	mov	sp, r7
100481c8:	b002      	add	sp, #8
100481ca:	bd80      	pop	{r7, pc}

100481cc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
100481cc:	b580      	push	{r7, lr}
100481ce:	b082      	sub	sp, #8
100481d0:	af00      	add	r7, sp, #0
100481d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
100481d4:	46c0      	nop			@ (mov r8, r8)
100481d6:	46bd      	mov	sp, r7
100481d8:	b002      	add	sp, #8
100481da:	bd80      	pop	{r7, pc}

100481dc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
100481dc:	b580      	push	{r7, lr}
100481de:	b082      	sub	sp, #8
100481e0:	af00      	add	r7, sp, #0
100481e2:	6078      	str	r0, [r7, #4]
100481e4:	0008      	movs	r0, r1
100481e6:	0011      	movs	r1, r2
100481e8:	1cfb      	adds	r3, r7, #3
100481ea:	1c02      	adds	r2, r0, #0
100481ec:	701a      	strb	r2, [r3, #0]
100481ee:	003b      	movs	r3, r7
100481f0:	1c0a      	adds	r2, r1, #0
100481f2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
100481f4:	46c0      	nop			@ (mov r8, r8)
100481f6:	46bd      	mov	sp, r7
100481f8:	b002      	add	sp, #8
100481fa:	bd80      	pop	{r7, pc}

100481fc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
100481fc:	b580      	push	{r7, lr}
100481fe:	b082      	sub	sp, #8
10048200:	af00      	add	r7, sp, #0
10048202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
10048204:	46c0      	nop			@ (mov r8, r8)
10048206:	46bd      	mov	sp, r7
10048208:	b002      	add	sp, #8
1004820a:	bd80      	pop	{r7, pc}

1004820c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
1004820c:	b580      	push	{r7, lr}
1004820e:	b082      	sub	sp, #8
10048210:	af00      	add	r7, sp, #0
10048212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
10048214:	46c0      	nop			@ (mov r8, r8)
10048216:	46bd      	mov	sp, r7
10048218:	b002      	add	sp, #8
1004821a:	bd80      	pop	{r7, pc}

1004821c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
1004821c:	b580      	push	{r7, lr}
1004821e:	b082      	sub	sp, #8
10048220:	af00      	add	r7, sp, #0
10048222:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
10048224:	46c0      	nop			@ (mov r8, r8)
10048226:	46bd      	mov	sp, r7
10048228:	b002      	add	sp, #8
1004822a:	bd80      	pop	{r7, pc}

1004822c <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
1004822c:	b590      	push	{r4, r7, lr}
1004822e:	b089      	sub	sp, #36	@ 0x24
10048230:	af02      	add	r7, sp, #8
10048232:	60f8      	str	r0, [r7, #12]
10048234:	60b9      	str	r1, [r7, #8]
10048236:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
10048238:	4b97      	ldr	r3, [pc, #604]	@ (10048498 <I2C_Mem_ISR_IT+0x26c>)
1004823a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
1004823c:	68bb      	ldr	r3, [r7, #8]
1004823e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
10048240:	68fb      	ldr	r3, [r7, #12]
10048242:	2240      	movs	r2, #64	@ 0x40
10048244:	5c9b      	ldrb	r3, [r3, r2]
10048246:	2b01      	cmp	r3, #1
10048248:	d101      	bne.n	1004824e <I2C_Mem_ISR_IT+0x22>
1004824a:	2302      	movs	r3, #2
1004824c:	e11f      	b.n	1004848e <I2C_Mem_ISR_IT+0x262>
1004824e:	68fb      	ldr	r3, [r7, #12]
10048250:	2240      	movs	r2, #64	@ 0x40
10048252:	2101      	movs	r1, #1
10048254:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10048256:	693b      	ldr	r3, [r7, #16]
10048258:	091b      	lsrs	r3, r3, #4
1004825a:	001a      	movs	r2, r3
1004825c:	2301      	movs	r3, #1
1004825e:	4013      	ands	r3, r2
10048260:	d014      	beq.n	1004828c <I2C_Mem_ISR_IT+0x60>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10048262:	687b      	ldr	r3, [r7, #4]
10048264:	091b      	lsrs	r3, r3, #4
10048266:	001a      	movs	r2, r3
10048268:	2301      	movs	r3, #1
1004826a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004826c:	d00e      	beq.n	1004828c <I2C_Mem_ISR_IT+0x60>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004826e:	68fb      	ldr	r3, [r7, #12]
10048270:	681b      	ldr	r3, [r3, #0]
10048272:	2210      	movs	r2, #16
10048274:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048276:	68fb      	ldr	r3, [r7, #12]
10048278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004827a:	2204      	movs	r2, #4
1004827c:	431a      	orrs	r2, r3
1004827e:	68fb      	ldr	r3, [r7, #12]
10048280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10048282:	68fb      	ldr	r3, [r7, #12]
10048284:	0018      	movs	r0, r3
10048286:	f001 fa96 	bl	100497b6 <I2C_Flush_TXDR>
1004828a:	e0e9      	b.n	10048460 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
1004828c:	693b      	ldr	r3, [r7, #16]
1004828e:	089b      	lsrs	r3, r3, #2
10048290:	001a      	movs	r2, r3
10048292:	2301      	movs	r3, #1
10048294:	4013      	ands	r3, r2
10048296:	d023      	beq.n	100482e0 <I2C_Mem_ISR_IT+0xb4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
10048298:	687b      	ldr	r3, [r7, #4]
1004829a:	089b      	lsrs	r3, r3, #2
1004829c:	001a      	movs	r2, r3
1004829e:	2301      	movs	r3, #1
100482a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100482a2:	d01d      	beq.n	100482e0 <I2C_Mem_ISR_IT+0xb4>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
100482a4:	693b      	ldr	r3, [r7, #16]
100482a6:	2204      	movs	r2, #4
100482a8:	4393      	bics	r3, r2
100482aa:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100482ac:	68fb      	ldr	r3, [r7, #12]
100482ae:	681b      	ldr	r3, [r3, #0]
100482b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100482b2:	68fb      	ldr	r3, [r7, #12]
100482b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100482b6:	b2d2      	uxtb	r2, r2
100482b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100482ba:	68fb      	ldr	r3, [r7, #12]
100482bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100482be:	1c5a      	adds	r2, r3, #1
100482c0:	68fb      	ldr	r3, [r7, #12]
100482c2:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
100482c4:	68fb      	ldr	r3, [r7, #12]
100482c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100482c8:	3b01      	subs	r3, #1
100482ca:	b29a      	uxth	r2, r3
100482cc:	68fb      	ldr	r3, [r7, #12]
100482ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
100482d0:	68fb      	ldr	r3, [r7, #12]
100482d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100482d4:	b29b      	uxth	r3, r3
100482d6:	3b01      	subs	r3, #1
100482d8:	b29a      	uxth	r2, r3
100482da:	68fb      	ldr	r3, [r7, #12]
100482dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
100482de:	e0bf      	b.n	10048460 <I2C_Mem_ISR_IT+0x234>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
100482e0:	693b      	ldr	r3, [r7, #16]
100482e2:	085b      	lsrs	r3, r3, #1
100482e4:	001a      	movs	r2, r3
100482e6:	2301      	movs	r3, #1
100482e8:	4013      	ands	r3, r2
100482ea:	d02c      	beq.n	10048346 <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
100482ec:	687b      	ldr	r3, [r7, #4]
100482ee:	085b      	lsrs	r3, r3, #1
100482f0:	001a      	movs	r2, r3
100482f2:	2301      	movs	r3, #1
100482f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
100482f6:	d026      	beq.n	10048346 <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
100482f8:	68fb      	ldr	r3, [r7, #12]
100482fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
100482fc:	3301      	adds	r3, #1
100482fe:	d118      	bne.n	10048332 <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10048300:	68fb      	ldr	r3, [r7, #12]
10048302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048304:	781a      	ldrb	r2, [r3, #0]
10048306:	68fb      	ldr	r3, [r7, #12]
10048308:	681b      	ldr	r3, [r3, #0]
1004830a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
1004830c:	68fb      	ldr	r3, [r7, #12]
1004830e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048310:	1c5a      	adds	r2, r3, #1
10048312:	68fb      	ldr	r3, [r7, #12]
10048314:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
10048316:	68fb      	ldr	r3, [r7, #12]
10048318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004831a:	3b01      	subs	r3, #1
1004831c:	b29a      	uxth	r2, r3
1004831e:	68fb      	ldr	r3, [r7, #12]
10048320:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10048322:	68fb      	ldr	r3, [r7, #12]
10048324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048326:	b29b      	uxth	r3, r3
10048328:	3b01      	subs	r3, #1
1004832a:	b29a      	uxth	r2, r3
1004832c:	68fb      	ldr	r3, [r7, #12]
1004832e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10048330:	e096      	b.n	10048460 <I2C_Mem_ISR_IT+0x234>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
10048332:	68fb      	ldr	r3, [r7, #12]
10048334:	681b      	ldr	r3, [r3, #0]
10048336:	68fa      	ldr	r2, [r7, #12]
10048338:	6d12      	ldr	r2, [r2, #80]	@ 0x50
1004833a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
1004833c:	68fb      	ldr	r3, [r7, #12]
1004833e:	2201      	movs	r2, #1
10048340:	4252      	negs	r2, r2
10048342:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
10048344:	e08c      	b.n	10048460 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
10048346:	693b      	ldr	r3, [r7, #16]
10048348:	09db      	lsrs	r3, r3, #7
1004834a:	001a      	movs	r2, r3
1004834c:	2301      	movs	r3, #1
1004834e:	4013      	ands	r3, r2
10048350:	d03e      	beq.n	100483d0 <I2C_Mem_ISR_IT+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048352:	687b      	ldr	r3, [r7, #4]
10048354:	099b      	lsrs	r3, r3, #6
10048356:	001a      	movs	r2, r3
10048358:	2301      	movs	r3, #1
1004835a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
1004835c:	d038      	beq.n	100483d0 <I2C_Mem_ISR_IT+0x1a4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
1004835e:	68fb      	ldr	r3, [r7, #12]
10048360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048362:	b29b      	uxth	r3, r3
10048364:	2b00      	cmp	r3, #0
10048366:	d02c      	beq.n	100483c2 <I2C_Mem_ISR_IT+0x196>
10048368:	68fb      	ldr	r3, [r7, #12]
1004836a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004836c:	2b00      	cmp	r3, #0
1004836e:	d128      	bne.n	100483c2 <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048370:	68fb      	ldr	r3, [r7, #12]
10048372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048374:	b29b      	uxth	r3, r3
10048376:	2bff      	cmp	r3, #255	@ 0xff
10048378:	d910      	bls.n	1004839c <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
1004837a:	68fb      	ldr	r3, [r7, #12]
1004837c:	22ff      	movs	r2, #255	@ 0xff
1004837e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048380:	68fb      	ldr	r3, [r7, #12]
10048382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048384:	b299      	uxth	r1, r3
10048386:	68fb      	ldr	r3, [r7, #12]
10048388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004838a:	b2da      	uxtb	r2, r3
1004838c:	2380      	movs	r3, #128	@ 0x80
1004838e:	045b      	lsls	r3, r3, #17
10048390:	68f8      	ldr	r0, [r7, #12]
10048392:	2400      	movs	r4, #0
10048394:	9400      	str	r4, [sp, #0]
10048396:	f001 fa4f 	bl	10049838 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
1004839a:	e018      	b.n	100483ce <I2C_Mem_ISR_IT+0x1a2>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
1004839c:	68fb      	ldr	r3, [r7, #12]
1004839e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100483a0:	b29a      	uxth	r2, r3
100483a2:	68fb      	ldr	r3, [r7, #12]
100483a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100483a6:	68fb      	ldr	r3, [r7, #12]
100483a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100483aa:	b299      	uxth	r1, r3
100483ac:	68fb      	ldr	r3, [r7, #12]
100483ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100483b0:	b2da      	uxtb	r2, r3
100483b2:	2380      	movs	r3, #128	@ 0x80
100483b4:	049b      	lsls	r3, r3, #18
100483b6:	68f8      	ldr	r0, [r7, #12]
100483b8:	2400      	movs	r4, #0
100483ba:	9400      	str	r4, [sp, #0]
100483bc:	f001 fa3c 	bl	10049838 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100483c0:	e005      	b.n	100483ce <I2C_Mem_ISR_IT+0x1a2>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
100483c2:	68fb      	ldr	r3, [r7, #12]
100483c4:	2140      	movs	r1, #64	@ 0x40
100483c6:	0018      	movs	r0, r3
100483c8:	f001 f8ca 	bl	10049560 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
100483cc:	e048      	b.n	10048460 <I2C_Mem_ISR_IT+0x234>
100483ce:	e047      	b.n	10048460 <I2C_Mem_ISR_IT+0x234>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
100483d0:	693b      	ldr	r3, [r7, #16]
100483d2:	099b      	lsrs	r3, r3, #6
100483d4:	001a      	movs	r2, r3
100483d6:	2301      	movs	r3, #1
100483d8:	4013      	ands	r3, r2
100483da:	d041      	beq.n	10048460 <I2C_Mem_ISR_IT+0x234>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
100483dc:	687b      	ldr	r3, [r7, #4]
100483de:	099b      	lsrs	r3, r3, #6
100483e0:	001a      	movs	r2, r3
100483e2:	2301      	movs	r3, #1
100483e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
100483e6:	d03b      	beq.n	10048460 <I2C_Mem_ISR_IT+0x234>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
100483e8:	68fb      	ldr	r3, [r7, #12]
100483ea:	2101      	movs	r1, #1
100483ec:	0018      	movs	r0, r3
100483ee:	f001 fae7 	bl	100499c0 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
100483f2:	68fb      	ldr	r3, [r7, #12]
100483f4:	2102      	movs	r1, #2
100483f6:	0018      	movs	r0, r3
100483f8:	f001 fa58 	bl	100498ac <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100483fc:	68fb      	ldr	r3, [r7, #12]
100483fe:	2241      	movs	r2, #65	@ 0x41
10048400:	5c9b      	ldrb	r3, [r3, r2]
10048402:	b2db      	uxtb	r3, r3
10048404:	2b22      	cmp	r3, #34	@ 0x22
10048406:	d101      	bne.n	1004840c <I2C_Mem_ISR_IT+0x1e0>
    {
      direction = I2C_GENERATE_START_READ;
10048408:	4b24      	ldr	r3, [pc, #144]	@ (1004849c <I2C_Mem_ISR_IT+0x270>)
1004840a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
1004840c:	68fb      	ldr	r3, [r7, #12]
1004840e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048410:	b29b      	uxth	r3, r3
10048412:	2bff      	cmp	r3, #255	@ 0xff
10048414:	d911      	bls.n	1004843a <I2C_Mem_ISR_IT+0x20e>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10048416:	68fb      	ldr	r3, [r7, #12]
10048418:	22ff      	movs	r2, #255	@ 0xff
1004841a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
1004841c:	68fb      	ldr	r3, [r7, #12]
1004841e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048420:	b299      	uxth	r1, r3
10048422:	68fb      	ldr	r3, [r7, #12]
10048424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048426:	b2da      	uxtb	r2, r3
10048428:	2380      	movs	r3, #128	@ 0x80
1004842a:	045c      	lsls	r4, r3, #17
1004842c:	68f8      	ldr	r0, [r7, #12]
1004842e:	697b      	ldr	r3, [r7, #20]
10048430:	9300      	str	r3, [sp, #0]
10048432:	0023      	movs	r3, r4
10048434:	f001 fa00 	bl	10049838 <I2C_TransferConfig>
10048438:	e012      	b.n	10048460 <I2C_Mem_ISR_IT+0x234>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
1004843a:	68fb      	ldr	r3, [r7, #12]
1004843c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004843e:	b29a      	uxth	r2, r3
10048440:	68fb      	ldr	r3, [r7, #12]
10048442:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048444:	68fb      	ldr	r3, [r7, #12]
10048446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048448:	b299      	uxth	r1, r3
1004844a:	68fb      	ldr	r3, [r7, #12]
1004844c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
1004844e:	b2da      	uxtb	r2, r3
10048450:	2380      	movs	r3, #128	@ 0x80
10048452:	049c      	lsls	r4, r3, #18
10048454:	68f8      	ldr	r0, [r7, #12]
10048456:	697b      	ldr	r3, [r7, #20]
10048458:	9300      	str	r3, [sp, #0]
1004845a:	0023      	movs	r3, r4
1004845c:	f001 f9ec 	bl	10049838 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10048460:	693b      	ldr	r3, [r7, #16]
10048462:	095b      	lsrs	r3, r3, #5
10048464:	001a      	movs	r2, r3
10048466:	2301      	movs	r3, #1
10048468:	4013      	ands	r3, r2
1004846a:	d00b      	beq.n	10048484 <I2C_Mem_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
1004846c:	687b      	ldr	r3, [r7, #4]
1004846e:	095b      	lsrs	r3, r3, #5
10048470:	001a      	movs	r2, r3
10048472:	2301      	movs	r3, #1
10048474:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
10048476:	d005      	beq.n	10048484 <I2C_Mem_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
10048478:	693a      	ldr	r2, [r7, #16]
1004847a:	68fb      	ldr	r3, [r7, #12]
1004847c:	0011      	movs	r1, r2
1004847e:	0018      	movs	r0, r3
10048480:	f000 fdb2 	bl	10048fe8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10048484:	68fb      	ldr	r3, [r7, #12]
10048486:	2240      	movs	r2, #64	@ 0x40
10048488:	2100      	movs	r1, #0
1004848a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004848c:	2300      	movs	r3, #0
}
1004848e:	0018      	movs	r0, r3
10048490:	46bd      	mov	sp, r7
10048492:	b007      	add	sp, #28
10048494:	bd90      	pop	{r4, r7, pc}
10048496:	46c0      	nop			@ (mov r8, r8)
10048498:	80002000 	.word	0x80002000
1004849c:	80002400 	.word	0x80002400

100484a0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
100484a0:	b580      	push	{r7, lr}
100484a2:	b086      	sub	sp, #24
100484a4:	af00      	add	r7, sp, #0
100484a6:	60f8      	str	r0, [r7, #12]
100484a8:	60b9      	str	r1, [r7, #8]
100484aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
100484ac:	68fb      	ldr	r3, [r7, #12]
100484ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100484b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
100484b2:	68bb      	ldr	r3, [r7, #8]
100484b4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
100484b6:	68fb      	ldr	r3, [r7, #12]
100484b8:	2240      	movs	r2, #64	@ 0x40
100484ba:	5c9b      	ldrb	r3, [r3, r2]
100484bc:	2b01      	cmp	r3, #1
100484be:	d101      	bne.n	100484c4 <I2C_Slave_ISR_IT+0x24>
100484c0:	2302      	movs	r3, #2
100484c2:	e0fb      	b.n	100486bc <I2C_Slave_ISR_IT+0x21c>
100484c4:	68fb      	ldr	r3, [r7, #12]
100484c6:	2240      	movs	r2, #64	@ 0x40
100484c8:	2101      	movs	r1, #1
100484ca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100484cc:	693b      	ldr	r3, [r7, #16]
100484ce:	095b      	lsrs	r3, r3, #5
100484d0:	001a      	movs	r2, r3
100484d2:	2301      	movs	r3, #1
100484d4:	4013      	ands	r3, r2
100484d6:	d00c      	beq.n	100484f2 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100484d8:	687b      	ldr	r3, [r7, #4]
100484da:	095b      	lsrs	r3, r3, #5
100484dc:	001a      	movs	r2, r3
100484de:	2301      	movs	r3, #1
100484e0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
100484e2:	d006      	beq.n	100484f2 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
100484e4:	693a      	ldr	r2, [r7, #16]
100484e6:	68fb      	ldr	r3, [r7, #12]
100484e8:	0011      	movs	r1, r2
100484ea:	0018      	movs	r0, r3
100484ec:	f000 fe4e 	bl	1004918c <I2C_ITSlaveCplt>
100484f0:	e0df      	b.n	100486b2 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
100484f2:	693b      	ldr	r3, [r7, #16]
100484f4:	091b      	lsrs	r3, r3, #4
100484f6:	001a      	movs	r2, r3
100484f8:	2301      	movs	r3, #1
100484fa:	4013      	ands	r3, r2
100484fc:	d054      	beq.n	100485a8 <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100484fe:	687b      	ldr	r3, [r7, #4]
10048500:	091b      	lsrs	r3, r3, #4
10048502:	001a      	movs	r2, r3
10048504:	2301      	movs	r3, #1
10048506:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10048508:	d04e      	beq.n	100485a8 <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
1004850a:	68fb      	ldr	r3, [r7, #12]
1004850c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004850e:	b29b      	uxth	r3, r3
10048510:	2b00      	cmp	r3, #0
10048512:	d12d      	bne.n	10048570 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10048514:	68fb      	ldr	r3, [r7, #12]
10048516:	2241      	movs	r2, #65	@ 0x41
10048518:	5c9b      	ldrb	r3, [r3, r2]
1004851a:	b2db      	uxtb	r3, r3
1004851c:	2b28      	cmp	r3, #40	@ 0x28
1004851e:	d10b      	bne.n	10048538 <I2C_Slave_ISR_IT+0x98>
10048520:	697a      	ldr	r2, [r7, #20]
10048522:	2380      	movs	r3, #128	@ 0x80
10048524:	049b      	lsls	r3, r3, #18
10048526:	429a      	cmp	r2, r3
10048528:	d106      	bne.n	10048538 <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
1004852a:	693a      	ldr	r2, [r7, #16]
1004852c:	68fb      	ldr	r3, [r7, #12]
1004852e:	0011      	movs	r1, r2
10048530:	0018      	movs	r0, r3
10048532:	f000 ffbb 	bl	100494ac <I2C_ITListenCplt>
10048536:	e036      	b.n	100485a6 <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10048538:	68fb      	ldr	r3, [r7, #12]
1004853a:	2241      	movs	r2, #65	@ 0x41
1004853c:	5c9b      	ldrb	r3, [r3, r2]
1004853e:	b2db      	uxtb	r3, r3
10048540:	2b29      	cmp	r3, #41	@ 0x29
10048542:	d110      	bne.n	10048566 <I2C_Slave_ISR_IT+0xc6>
10048544:	697b      	ldr	r3, [r7, #20]
10048546:	4a5f      	ldr	r2, [pc, #380]	@ (100486c4 <I2C_Slave_ISR_IT+0x224>)
10048548:	4293      	cmp	r3, r2
1004854a:	d00c      	beq.n	10048566 <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004854c:	68fb      	ldr	r3, [r7, #12]
1004854e:	681b      	ldr	r3, [r3, #0]
10048550:	2210      	movs	r2, #16
10048552:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10048554:	68fb      	ldr	r3, [r7, #12]
10048556:	0018      	movs	r0, r3
10048558:	f001 f92d 	bl	100497b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
1004855c:	68fb      	ldr	r3, [r7, #12]
1004855e:	0018      	movs	r0, r3
10048560:	f000 fcdc 	bl	10048f1c <I2C_ITSlaveSeqCplt>
10048564:	e01f      	b.n	100485a6 <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048566:	68fb      	ldr	r3, [r7, #12]
10048568:	681b      	ldr	r3, [r3, #0]
1004856a:	2210      	movs	r2, #16
1004856c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
1004856e:	e09d      	b.n	100486ac <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048570:	68fb      	ldr	r3, [r7, #12]
10048572:	681b      	ldr	r3, [r3, #0]
10048574:	2210      	movs	r2, #16
10048576:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048578:	68fb      	ldr	r3, [r7, #12]
1004857a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004857c:	2204      	movs	r2, #4
1004857e:	431a      	orrs	r2, r3
10048580:	68fb      	ldr	r3, [r7, #12]
10048582:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10048584:	697b      	ldr	r3, [r7, #20]
10048586:	2b00      	cmp	r3, #0
10048588:	d005      	beq.n	10048596 <I2C_Slave_ISR_IT+0xf6>
1004858a:	697a      	ldr	r2, [r7, #20]
1004858c:	2380      	movs	r3, #128	@ 0x80
1004858e:	045b      	lsls	r3, r3, #17
10048590:	429a      	cmp	r2, r3
10048592:	d000      	beq.n	10048596 <I2C_Slave_ISR_IT+0xf6>
10048594:	e08a      	b.n	100486ac <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
10048596:	68fb      	ldr	r3, [r7, #12]
10048598:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004859a:	68fb      	ldr	r3, [r7, #12]
1004859c:	0011      	movs	r1, r2
1004859e:	0018      	movs	r0, r3
100485a0:	f000 ffde 	bl	10049560 <I2C_ITError>
    if (hi2c->XferCount == 0U)
100485a4:	e082      	b.n	100486ac <I2C_Slave_ISR_IT+0x20c>
100485a6:	e081      	b.n	100486ac <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100485a8:	693b      	ldr	r3, [r7, #16]
100485aa:	089b      	lsrs	r3, r3, #2
100485ac:	001a      	movs	r2, r3
100485ae:	2301      	movs	r3, #1
100485b0:	4013      	ands	r3, r2
100485b2:	d031      	beq.n	10048618 <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
100485b4:	687b      	ldr	r3, [r7, #4]
100485b6:	089b      	lsrs	r3, r3, #2
100485b8:	001a      	movs	r2, r3
100485ba:	2301      	movs	r3, #1
100485bc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
100485be:	d02b      	beq.n	10048618 <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
100485c0:	68fb      	ldr	r3, [r7, #12]
100485c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100485c4:	b29b      	uxth	r3, r3
100485c6:	2b00      	cmp	r3, #0
100485c8:	d018      	beq.n	100485fc <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100485ca:	68fb      	ldr	r3, [r7, #12]
100485cc:	681b      	ldr	r3, [r3, #0]
100485ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100485d0:	68fb      	ldr	r3, [r7, #12]
100485d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100485d4:	b2d2      	uxtb	r2, r2
100485d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
100485d8:	68fb      	ldr	r3, [r7, #12]
100485da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100485dc:	1c5a      	adds	r2, r3, #1
100485de:	68fb      	ldr	r3, [r7, #12]
100485e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
100485e2:	68fb      	ldr	r3, [r7, #12]
100485e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100485e6:	3b01      	subs	r3, #1
100485e8:	b29a      	uxth	r2, r3
100485ea:	68fb      	ldr	r3, [r7, #12]
100485ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100485ee:	68fb      	ldr	r3, [r7, #12]
100485f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100485f2:	b29b      	uxth	r3, r3
100485f4:	3b01      	subs	r3, #1
100485f6:	b29a      	uxth	r2, r3
100485f8:	68fb      	ldr	r3, [r7, #12]
100485fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
100485fc:	68fb      	ldr	r3, [r7, #12]
100485fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048600:	b29b      	uxth	r3, r3
10048602:	2b00      	cmp	r3, #0
10048604:	d154      	bne.n	100486b0 <I2C_Slave_ISR_IT+0x210>
10048606:	697b      	ldr	r3, [r7, #20]
10048608:	4a2e      	ldr	r2, [pc, #184]	@ (100486c4 <I2C_Slave_ISR_IT+0x224>)
1004860a:	4293      	cmp	r3, r2
1004860c:	d050      	beq.n	100486b0 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
1004860e:	68fb      	ldr	r3, [r7, #12]
10048610:	0018      	movs	r0, r3
10048612:	f000 fc83 	bl	10048f1c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
10048616:	e04b      	b.n	100486b0 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
10048618:	693b      	ldr	r3, [r7, #16]
1004861a:	08db      	lsrs	r3, r3, #3
1004861c:	001a      	movs	r2, r3
1004861e:	2301      	movs	r3, #1
10048620:	4013      	ands	r3, r2
10048622:	d00c      	beq.n	1004863e <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10048624:	687b      	ldr	r3, [r7, #4]
10048626:	08db      	lsrs	r3, r3, #3
10048628:	001a      	movs	r2, r3
1004862a:	2301      	movs	r3, #1
1004862c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
1004862e:	d006      	beq.n	1004863e <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
10048630:	693a      	ldr	r2, [r7, #16]
10048632:	68fb      	ldr	r3, [r7, #12]
10048634:	0011      	movs	r1, r2
10048636:	0018      	movs	r0, r3
10048638:	f000 fb8a 	bl	10048d50 <I2C_ITAddrCplt>
1004863c:	e039      	b.n	100486b2 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
1004863e:	693b      	ldr	r3, [r7, #16]
10048640:	085b      	lsrs	r3, r3, #1
10048642:	001a      	movs	r2, r3
10048644:	2301      	movs	r3, #1
10048646:	4013      	ands	r3, r2
10048648:	d033      	beq.n	100486b2 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
1004864a:	687b      	ldr	r3, [r7, #4]
1004864c:	085b      	lsrs	r3, r3, #1
1004864e:	001a      	movs	r2, r3
10048650:	2301      	movs	r3, #1
10048652:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
10048654:	d02d      	beq.n	100486b2 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
10048656:	68fb      	ldr	r3, [r7, #12]
10048658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004865a:	b29b      	uxth	r3, r3
1004865c:	2b00      	cmp	r3, #0
1004865e:	d018      	beq.n	10048692 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
10048660:	68fb      	ldr	r3, [r7, #12]
10048662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048664:	781a      	ldrb	r2, [r3, #0]
10048666:	68fb      	ldr	r3, [r7, #12]
10048668:	681b      	ldr	r3, [r3, #0]
1004866a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
1004866c:	68fb      	ldr	r3, [r7, #12]
1004866e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10048670:	1c5a      	adds	r2, r3, #1
10048672:	68fb      	ldr	r3, [r7, #12]
10048674:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
10048676:	68fb      	ldr	r3, [r7, #12]
10048678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004867a:	b29b      	uxth	r3, r3
1004867c:	3b01      	subs	r3, #1
1004867e:	b29a      	uxth	r2, r3
10048680:	68fb      	ldr	r3, [r7, #12]
10048682:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
10048684:	68fb      	ldr	r3, [r7, #12]
10048686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048688:	3b01      	subs	r3, #1
1004868a:	b29a      	uxth	r2, r3
1004868c:	68fb      	ldr	r3, [r7, #12]
1004868e:	851a      	strh	r2, [r3, #40]	@ 0x28
10048690:	e00f      	b.n	100486b2 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
10048692:	697a      	ldr	r2, [r7, #20]
10048694:	2380      	movs	r3, #128	@ 0x80
10048696:	045b      	lsls	r3, r3, #17
10048698:	429a      	cmp	r2, r3
1004869a:	d002      	beq.n	100486a2 <I2C_Slave_ISR_IT+0x202>
1004869c:	697b      	ldr	r3, [r7, #20]
1004869e:	2b00      	cmp	r3, #0
100486a0:	d107      	bne.n	100486b2 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
100486a2:	68fb      	ldr	r3, [r7, #12]
100486a4:	0018      	movs	r0, r3
100486a6:	f000 fc39 	bl	10048f1c <I2C_ITSlaveSeqCplt>
100486aa:	e002      	b.n	100486b2 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
100486ac:	46c0      	nop			@ (mov r8, r8)
100486ae:	e000      	b.n	100486b2 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
100486b0:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
100486b2:	68fb      	ldr	r3, [r7, #12]
100486b4:	2240      	movs	r2, #64	@ 0x40
100486b6:	2100      	movs	r1, #0
100486b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100486ba:	2300      	movs	r3, #0
}
100486bc:	0018      	movs	r0, r3
100486be:	46bd      	mov	sp, r7
100486c0:	b006      	add	sp, #24
100486c2:	bd80      	pop	{r7, pc}
100486c4:	ffff0000 	.word	0xffff0000

100486c8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
100486c8:	b590      	push	{r4, r7, lr}
100486ca:	b089      	sub	sp, #36	@ 0x24
100486cc:	af02      	add	r7, sp, #8
100486ce:	60f8      	str	r0, [r7, #12]
100486d0:	60b9      	str	r1, [r7, #8]
100486d2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
100486d4:	68fb      	ldr	r3, [r7, #12]
100486d6:	2240      	movs	r2, #64	@ 0x40
100486d8:	5c9b      	ldrb	r3, [r3, r2]
100486da:	2b01      	cmp	r3, #1
100486dc:	d101      	bne.n	100486e2 <I2C_Master_ISR_DMA+0x1a>
100486de:	2302      	movs	r3, #2
100486e0:	e0f7      	b.n	100488d2 <I2C_Master_ISR_DMA+0x20a>
100486e2:	68fb      	ldr	r3, [r7, #12]
100486e4:	2240      	movs	r2, #64	@ 0x40
100486e6:	2101      	movs	r1, #1
100486e8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
100486ea:	68bb      	ldr	r3, [r7, #8]
100486ec:	091b      	lsrs	r3, r3, #4
100486ee:	001a      	movs	r2, r3
100486f0:	2301      	movs	r3, #1
100486f2:	4013      	ands	r3, r2
100486f4:	d019      	beq.n	1004872a <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
100486f6:	687b      	ldr	r3, [r7, #4]
100486f8:	091b      	lsrs	r3, r3, #4
100486fa:	001a      	movs	r2, r3
100486fc:	2301      	movs	r3, #1
100486fe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10048700:	d013      	beq.n	1004872a <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048702:	68fb      	ldr	r3, [r7, #12]
10048704:	681b      	ldr	r3, [r3, #0]
10048706:	2210      	movs	r2, #16
10048708:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004870a:	68fb      	ldr	r3, [r7, #12]
1004870c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004870e:	2204      	movs	r2, #4
10048710:	431a      	orrs	r2, r3
10048712:	68fb      	ldr	r3, [r7, #12]
10048714:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
10048716:	68fb      	ldr	r3, [r7, #12]
10048718:	2120      	movs	r1, #32
1004871a:	0018      	movs	r0, r3
1004871c:	f001 f8c6 	bl	100498ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
10048720:	68fb      	ldr	r3, [r7, #12]
10048722:	0018      	movs	r0, r3
10048724:	f001 f847 	bl	100497b6 <I2C_Flush_TXDR>
10048728:	e0ce      	b.n	100488c8 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
1004872a:	68bb      	ldr	r3, [r7, #8]
1004872c:	09db      	lsrs	r3, r3, #7
1004872e:	001a      	movs	r2, r3
10048730:	2301      	movs	r3, #1
10048732:	4013      	ands	r3, r2
10048734:	d100      	bne.n	10048738 <I2C_Master_ISR_DMA+0x70>
10048736:	e07e      	b.n	10048836 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048738:	687b      	ldr	r3, [r7, #4]
1004873a:	099b      	lsrs	r3, r3, #6
1004873c:	001a      	movs	r2, r3
1004873e:	2301      	movs	r3, #1
10048740:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10048742:	d100      	bne.n	10048746 <I2C_Master_ISR_DMA+0x7e>
10048744:	e077      	b.n	10048836 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
10048746:	68fb      	ldr	r3, [r7, #12]
10048748:	681b      	ldr	r3, [r3, #0]
1004874a:	681a      	ldr	r2, [r3, #0]
1004874c:	68fb      	ldr	r3, [r7, #12]
1004874e:	681b      	ldr	r3, [r3, #0]
10048750:	2140      	movs	r1, #64	@ 0x40
10048752:	438a      	bics	r2, r1
10048754:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
10048756:	68fb      	ldr	r3, [r7, #12]
10048758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004875a:	b29b      	uxth	r3, r3
1004875c:	2b00      	cmp	r3, #0
1004875e:	d055      	beq.n	1004880c <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
10048760:	68fb      	ldr	r3, [r7, #12]
10048762:	681b      	ldr	r3, [r3, #0]
10048764:	685b      	ldr	r3, [r3, #4]
10048766:	b29a      	uxth	r2, r3
10048768:	2312      	movs	r3, #18
1004876a:	18fb      	adds	r3, r7, r3
1004876c:	0592      	lsls	r2, r2, #22
1004876e:	0d92      	lsrs	r2, r2, #22
10048770:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048772:	68fb      	ldr	r3, [r7, #12]
10048774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048776:	b29b      	uxth	r3, r3
10048778:	2bff      	cmp	r3, #255	@ 0xff
1004877a:	d906      	bls.n	1004878a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
1004877c:	68fb      	ldr	r3, [r7, #12]
1004877e:	22ff      	movs	r2, #255	@ 0xff
10048780:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
10048782:	2380      	movs	r3, #128	@ 0x80
10048784:	045b      	lsls	r3, r3, #17
10048786:	617b      	str	r3, [r7, #20]
10048788:	e010      	b.n	100487ac <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
1004878a:	68fb      	ldr	r3, [r7, #12]
1004878c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
1004878e:	b29a      	uxth	r2, r3
10048790:	68fb      	ldr	r3, [r7, #12]
10048792:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10048794:	68fb      	ldr	r3, [r7, #12]
10048796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048798:	4a50      	ldr	r2, [pc, #320]	@ (100488dc <I2C_Master_ISR_DMA+0x214>)
1004879a:	4293      	cmp	r3, r2
1004879c:	d003      	beq.n	100487a6 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
1004879e:	68fb      	ldr	r3, [r7, #12]
100487a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100487a2:	617b      	str	r3, [r7, #20]
100487a4:	e002      	b.n	100487ac <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
100487a6:	2380      	movs	r3, #128	@ 0x80
100487a8:	049b      	lsls	r3, r3, #18
100487aa:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
100487ac:	68fb      	ldr	r3, [r7, #12]
100487ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100487b0:	b2da      	uxtb	r2, r3
100487b2:	697c      	ldr	r4, [r7, #20]
100487b4:	2312      	movs	r3, #18
100487b6:	18fb      	adds	r3, r7, r3
100487b8:	8819      	ldrh	r1, [r3, #0]
100487ba:	68f8      	ldr	r0, [r7, #12]
100487bc:	2300      	movs	r3, #0
100487be:	9300      	str	r3, [sp, #0]
100487c0:	0023      	movs	r3, r4
100487c2:	f001 f839 	bl	10049838 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
100487c6:	68fb      	ldr	r3, [r7, #12]
100487c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100487ca:	b29a      	uxth	r2, r3
100487cc:	68fb      	ldr	r3, [r7, #12]
100487ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100487d0:	1ad3      	subs	r3, r2, r3
100487d2:	b29a      	uxth	r2, r3
100487d4:	68fb      	ldr	r3, [r7, #12]
100487d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
100487d8:	68fb      	ldr	r3, [r7, #12]
100487da:	2241      	movs	r2, #65	@ 0x41
100487dc:	5c9b      	ldrb	r3, [r3, r2]
100487de:	b2db      	uxtb	r3, r3
100487e0:	2b22      	cmp	r3, #34	@ 0x22
100487e2:	d109      	bne.n	100487f8 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
100487e4:	68fb      	ldr	r3, [r7, #12]
100487e6:	681b      	ldr	r3, [r3, #0]
100487e8:	681a      	ldr	r2, [r3, #0]
100487ea:	68fb      	ldr	r3, [r7, #12]
100487ec:	681b      	ldr	r3, [r3, #0]
100487ee:	2180      	movs	r1, #128	@ 0x80
100487f0:	0209      	lsls	r1, r1, #8
100487f2:	430a      	orrs	r2, r1
100487f4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
100487f6:	e067      	b.n	100488c8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
100487f8:	68fb      	ldr	r3, [r7, #12]
100487fa:	681b      	ldr	r3, [r3, #0]
100487fc:	681a      	ldr	r2, [r3, #0]
100487fe:	68fb      	ldr	r3, [r7, #12]
10048800:	681b      	ldr	r3, [r3, #0]
10048802:	2180      	movs	r1, #128	@ 0x80
10048804:	01c9      	lsls	r1, r1, #7
10048806:	430a      	orrs	r2, r1
10048808:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
1004880a:	e05d      	b.n	100488c8 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
1004880c:	68fb      	ldr	r3, [r7, #12]
1004880e:	681b      	ldr	r3, [r3, #0]
10048810:	685a      	ldr	r2, [r3, #4]
10048812:	2380      	movs	r3, #128	@ 0x80
10048814:	049b      	lsls	r3, r3, #18
10048816:	401a      	ands	r2, r3
10048818:	2380      	movs	r3, #128	@ 0x80
1004881a:	049b      	lsls	r3, r3, #18
1004881c:	429a      	cmp	r2, r3
1004881e:	d004      	beq.n	1004882a <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
10048820:	68fb      	ldr	r3, [r7, #12]
10048822:	0018      	movs	r0, r3
10048824:	f000 fb38 	bl	10048e98 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
10048828:	e04e      	b.n	100488c8 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
1004882a:	68fb      	ldr	r3, [r7, #12]
1004882c:	2140      	movs	r1, #64	@ 0x40
1004882e:	0018      	movs	r0, r3
10048830:	f000 fe96 	bl	10049560 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10048834:	e048      	b.n	100488c8 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10048836:	68bb      	ldr	r3, [r7, #8]
10048838:	099b      	lsrs	r3, r3, #6
1004883a:	001a      	movs	r2, r3
1004883c:	2301      	movs	r3, #1
1004883e:	4013      	ands	r3, r2
10048840:	d02e      	beq.n	100488a0 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048842:	687b      	ldr	r3, [r7, #4]
10048844:	099b      	lsrs	r3, r3, #6
10048846:	001a      	movs	r2, r3
10048848:	2301      	movs	r3, #1
1004884a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
1004884c:	d028      	beq.n	100488a0 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
1004884e:	68fb      	ldr	r3, [r7, #12]
10048850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048852:	b29b      	uxth	r3, r3
10048854:	2b00      	cmp	r3, #0
10048856:	d11d      	bne.n	10048894 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
10048858:	68fb      	ldr	r3, [r7, #12]
1004885a:	681b      	ldr	r3, [r3, #0]
1004885c:	685a      	ldr	r2, [r3, #4]
1004885e:	2380      	movs	r3, #128	@ 0x80
10048860:	049b      	lsls	r3, r3, #18
10048862:	401a      	ands	r2, r3
10048864:	2380      	movs	r3, #128	@ 0x80
10048866:	049b      	lsls	r3, r3, #18
10048868:	429a      	cmp	r2, r3
1004886a:	d02c      	beq.n	100488c6 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
1004886c:	68fb      	ldr	r3, [r7, #12]
1004886e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048870:	4a1a      	ldr	r2, [pc, #104]	@ (100488dc <I2C_Master_ISR_DMA+0x214>)
10048872:	4293      	cmp	r3, r2
10048874:	d109      	bne.n	1004888a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
10048876:	68fb      	ldr	r3, [r7, #12]
10048878:	681b      	ldr	r3, [r3, #0]
1004887a:	685a      	ldr	r2, [r3, #4]
1004887c:	68fb      	ldr	r3, [r7, #12]
1004887e:	681b      	ldr	r3, [r3, #0]
10048880:	2180      	movs	r1, #128	@ 0x80
10048882:	01c9      	lsls	r1, r1, #7
10048884:	430a      	orrs	r2, r1
10048886:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
10048888:	e01d      	b.n	100488c6 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
1004888a:	68fb      	ldr	r3, [r7, #12]
1004888c:	0018      	movs	r0, r3
1004888e:	f000 fb03 	bl	10048e98 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
10048892:	e018      	b.n	100488c6 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10048894:	68fb      	ldr	r3, [r7, #12]
10048896:	2140      	movs	r1, #64	@ 0x40
10048898:	0018      	movs	r0, r3
1004889a:	f000 fe61 	bl	10049560 <I2C_ITError>
    if (hi2c->XferCount == 0U)
1004889e:	e012      	b.n	100488c6 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
100488a0:	68bb      	ldr	r3, [r7, #8]
100488a2:	095b      	lsrs	r3, r3, #5
100488a4:	001a      	movs	r2, r3
100488a6:	2301      	movs	r3, #1
100488a8:	4013      	ands	r3, r2
100488aa:	d00d      	beq.n	100488c8 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
100488ac:	687b      	ldr	r3, [r7, #4]
100488ae:	095b      	lsrs	r3, r3, #5
100488b0:	001a      	movs	r2, r3
100488b2:	2301      	movs	r3, #1
100488b4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
100488b6:	d007      	beq.n	100488c8 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
100488b8:	68ba      	ldr	r2, [r7, #8]
100488ba:	68fb      	ldr	r3, [r7, #12]
100488bc:	0011      	movs	r1, r2
100488be:	0018      	movs	r0, r3
100488c0:	f000 fb92 	bl	10048fe8 <I2C_ITMasterCplt>
100488c4:	e000      	b.n	100488c8 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
100488c6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
100488c8:	68fb      	ldr	r3, [r7, #12]
100488ca:	2240      	movs	r2, #64	@ 0x40
100488cc:	2100      	movs	r1, #0
100488ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
100488d0:	2300      	movs	r3, #0
}
100488d2:	0018      	movs	r0, r3
100488d4:	46bd      	mov	sp, r7
100488d6:	b007      	add	sp, #28
100488d8:	bd90      	pop	{r4, r7, pc}
100488da:	46c0      	nop			@ (mov r8, r8)
100488dc:	ffff0000 	.word	0xffff0000

100488e0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
100488e0:	b590      	push	{r4, r7, lr}
100488e2:	b089      	sub	sp, #36	@ 0x24
100488e4:	af02      	add	r7, sp, #8
100488e6:	60f8      	str	r0, [r7, #12]
100488e8:	60b9      	str	r1, [r7, #8]
100488ea:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
100488ec:	4b9a      	ldr	r3, [pc, #616]	@ (10048b58 <I2C_Mem_ISR_DMA+0x278>)
100488ee:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
100488f0:	68fb      	ldr	r3, [r7, #12]
100488f2:	2240      	movs	r2, #64	@ 0x40
100488f4:	5c9b      	ldrb	r3, [r3, r2]
100488f6:	2b01      	cmp	r3, #1
100488f8:	d101      	bne.n	100488fe <I2C_Mem_ISR_DMA+0x1e>
100488fa:	2302      	movs	r3, #2
100488fc:	e127      	b.n	10048b4e <I2C_Mem_ISR_DMA+0x26e>
100488fe:	68fb      	ldr	r3, [r7, #12]
10048900:	2240      	movs	r2, #64	@ 0x40
10048902:	2101      	movs	r1, #1
10048904:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10048906:	68bb      	ldr	r3, [r7, #8]
10048908:	091b      	lsrs	r3, r3, #4
1004890a:	001a      	movs	r2, r3
1004890c:	2301      	movs	r3, #1
1004890e:	4013      	ands	r3, r2
10048910:	d019      	beq.n	10048946 <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10048912:	687b      	ldr	r3, [r7, #4]
10048914:	091b      	lsrs	r3, r3, #4
10048916:	001a      	movs	r2, r3
10048918:	2301      	movs	r3, #1
1004891a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
1004891c:	d013      	beq.n	10048946 <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004891e:	68fb      	ldr	r3, [r7, #12]
10048920:	681b      	ldr	r3, [r3, #0]
10048922:	2210      	movs	r2, #16
10048924:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048926:	68fb      	ldr	r3, [r7, #12]
10048928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004892a:	2204      	movs	r2, #4
1004892c:	431a      	orrs	r2, r3
1004892e:	68fb      	ldr	r3, [r7, #12]
10048930:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
10048932:	68fb      	ldr	r3, [r7, #12]
10048934:	2120      	movs	r1, #32
10048936:	0018      	movs	r0, r3
10048938:	f000 ffb8 	bl	100498ac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
1004893c:	68fb      	ldr	r3, [r7, #12]
1004893e:	0018      	movs	r0, r3
10048940:	f000 ff39 	bl	100497b6 <I2C_Flush_TXDR>
10048944:	e0fe      	b.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
10048946:	68bb      	ldr	r3, [r7, #8]
10048948:	085b      	lsrs	r3, r3, #1
1004894a:	001a      	movs	r2, r3
1004894c:	2301      	movs	r3, #1
1004894e:	4013      	ands	r3, r2
10048950:	d00f      	beq.n	10048972 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
10048952:	687b      	ldr	r3, [r7, #4]
10048954:	085b      	lsrs	r3, r3, #1
10048956:	001a      	movs	r2, r3
10048958:	2301      	movs	r3, #1
1004895a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
1004895c:	d009      	beq.n	10048972 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
1004895e:	68fb      	ldr	r3, [r7, #12]
10048960:	681b      	ldr	r3, [r3, #0]
10048962:	68fa      	ldr	r2, [r7, #12]
10048964:	6d12      	ldr	r2, [r2, #80]	@ 0x50
10048966:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
10048968:	68fb      	ldr	r3, [r7, #12]
1004896a:	2201      	movs	r2, #1
1004896c:	4252      	negs	r2, r2
1004896e:	651a      	str	r2, [r3, #80]	@ 0x50
10048970:	e0e8      	b.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10048972:	68bb      	ldr	r3, [r7, #8]
10048974:	09db      	lsrs	r3, r3, #7
10048976:	001a      	movs	r2, r3
10048978:	2301      	movs	r3, #1
1004897a:	4013      	ands	r3, r2
1004897c:	d065      	beq.n	10048a4a <I2C_Mem_ISR_DMA+0x16a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
1004897e:	687b      	ldr	r3, [r7, #4]
10048980:	099b      	lsrs	r3, r3, #6
10048982:	001a      	movs	r2, r3
10048984:	2301      	movs	r3, #1
10048986:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
10048988:	d05f      	beq.n	10048a4a <I2C_Mem_ISR_DMA+0x16a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004898a:	68fb      	ldr	r3, [r7, #12]
1004898c:	2101      	movs	r1, #1
1004898e:	0018      	movs	r0, r3
10048990:	f001 f816 	bl	100499c0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10048994:	68fb      	ldr	r3, [r7, #12]
10048996:	2110      	movs	r1, #16
10048998:	0018      	movs	r0, r3
1004899a:	f000 ff87 	bl	100498ac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
1004899e:	68fb      	ldr	r3, [r7, #12]
100489a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100489a2:	b29b      	uxth	r3, r3
100489a4:	2b00      	cmp	r3, #0
100489a6:	d04a      	beq.n	10048a3e <I2C_Mem_ISR_DMA+0x15e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
100489a8:	68fb      	ldr	r3, [r7, #12]
100489aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100489ac:	b29b      	uxth	r3, r3
100489ae:	2bff      	cmp	r3, #255	@ 0xff
100489b0:	d910      	bls.n	100489d4 <I2C_Mem_ISR_DMA+0xf4>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
100489b2:	68fb      	ldr	r3, [r7, #12]
100489b4:	22ff      	movs	r2, #255	@ 0xff
100489b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100489b8:	68fb      	ldr	r3, [r7, #12]
100489ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100489bc:	b299      	uxth	r1, r3
100489be:	68fb      	ldr	r3, [r7, #12]
100489c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100489c2:	b2da      	uxtb	r2, r3
100489c4:	2380      	movs	r3, #128	@ 0x80
100489c6:	045b      	lsls	r3, r3, #17
100489c8:	68f8      	ldr	r0, [r7, #12]
100489ca:	2400      	movs	r4, #0
100489cc:	9400      	str	r4, [sp, #0]
100489ce:	f000 ff33 	bl	10049838 <I2C_TransferConfig>
100489d2:	e011      	b.n	100489f8 <I2C_Mem_ISR_DMA+0x118>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
100489d4:	68fb      	ldr	r3, [r7, #12]
100489d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100489d8:	b29a      	uxth	r2, r3
100489da:	68fb      	ldr	r3, [r7, #12]
100489dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
100489de:	68fb      	ldr	r3, [r7, #12]
100489e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
100489e2:	b299      	uxth	r1, r3
100489e4:	68fb      	ldr	r3, [r7, #12]
100489e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100489e8:	b2da      	uxtb	r2, r3
100489ea:	2380      	movs	r3, #128	@ 0x80
100489ec:	049b      	lsls	r3, r3, #18
100489ee:	68f8      	ldr	r0, [r7, #12]
100489f0:	2400      	movs	r4, #0
100489f2:	9400      	str	r4, [sp, #0]
100489f4:	f000 ff20 	bl	10049838 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
100489f8:	68fb      	ldr	r3, [r7, #12]
100489fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100489fc:	b29a      	uxth	r2, r3
100489fe:	68fb      	ldr	r3, [r7, #12]
10048a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048a02:	1ad3      	subs	r3, r2, r3
10048a04:	b29a      	uxth	r2, r3
10048a06:	68fb      	ldr	r3, [r7, #12]
10048a08:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048a0a:	68fb      	ldr	r3, [r7, #12]
10048a0c:	2241      	movs	r2, #65	@ 0x41
10048a0e:	5c9b      	ldrb	r3, [r3, r2]
10048a10:	b2db      	uxtb	r3, r3
10048a12:	2b22      	cmp	r3, #34	@ 0x22
10048a14:	d109      	bne.n	10048a2a <I2C_Mem_ISR_DMA+0x14a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10048a16:	68fb      	ldr	r3, [r7, #12]
10048a18:	681b      	ldr	r3, [r3, #0]
10048a1a:	681a      	ldr	r2, [r3, #0]
10048a1c:	68fb      	ldr	r3, [r7, #12]
10048a1e:	681b      	ldr	r3, [r3, #0]
10048a20:	2180      	movs	r1, #128	@ 0x80
10048a22:	0209      	lsls	r1, r1, #8
10048a24:	430a      	orrs	r2, r1
10048a26:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10048a28:	e08c      	b.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10048a2a:	68fb      	ldr	r3, [r7, #12]
10048a2c:	681b      	ldr	r3, [r3, #0]
10048a2e:	681a      	ldr	r2, [r3, #0]
10048a30:	68fb      	ldr	r3, [r7, #12]
10048a32:	681b      	ldr	r3, [r3, #0]
10048a34:	2180      	movs	r1, #128	@ 0x80
10048a36:	01c9      	lsls	r1, r1, #7
10048a38:	430a      	orrs	r2, r1
10048a3a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
10048a3c:	e082      	b.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
10048a3e:	68fb      	ldr	r3, [r7, #12]
10048a40:	2140      	movs	r1, #64	@ 0x40
10048a42:	0018      	movs	r0, r3
10048a44:	f000 fd8c 	bl	10049560 <I2C_ITError>
    if (hi2c->XferCount != 0U)
10048a48:	e07c      	b.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10048a4a:	68bb      	ldr	r3, [r7, #8]
10048a4c:	099b      	lsrs	r3, r3, #6
10048a4e:	001a      	movs	r2, r3
10048a50:	2301      	movs	r3, #1
10048a52:	4013      	ands	r3, r2
10048a54:	d064      	beq.n	10048b20 <I2C_Mem_ISR_DMA+0x240>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
10048a56:	687b      	ldr	r3, [r7, #4]
10048a58:	099b      	lsrs	r3, r3, #6
10048a5a:	001a      	movs	r2, r3
10048a5c:	2301      	movs	r3, #1
10048a5e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
10048a60:	d05e      	beq.n	10048b20 <I2C_Mem_ISR_DMA+0x240>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10048a62:	68fb      	ldr	r3, [r7, #12]
10048a64:	2101      	movs	r1, #1
10048a66:	0018      	movs	r0, r3
10048a68:	f000 ffaa 	bl	100499c0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
10048a6c:	68fb      	ldr	r3, [r7, #12]
10048a6e:	2110      	movs	r1, #16
10048a70:	0018      	movs	r0, r3
10048a72:	f000 ff1b 	bl	100498ac <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048a76:	68fb      	ldr	r3, [r7, #12]
10048a78:	2241      	movs	r2, #65	@ 0x41
10048a7a:	5c9b      	ldrb	r3, [r3, r2]
10048a7c:	b2db      	uxtb	r3, r3
10048a7e:	2b22      	cmp	r3, #34	@ 0x22
10048a80:	d101      	bne.n	10048a86 <I2C_Mem_ISR_DMA+0x1a6>
    {
      direction = I2C_GENERATE_START_READ;
10048a82:	4b36      	ldr	r3, [pc, #216]	@ (10048b5c <I2C_Mem_ISR_DMA+0x27c>)
10048a84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
10048a86:	68fb      	ldr	r3, [r7, #12]
10048a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048a8a:	b29b      	uxth	r3, r3
10048a8c:	2bff      	cmp	r3, #255	@ 0xff
10048a8e:	d911      	bls.n	10048ab4 <I2C_Mem_ISR_DMA+0x1d4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
10048a90:	68fb      	ldr	r3, [r7, #12]
10048a92:	22ff      	movs	r2, #255	@ 0xff
10048a94:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048a96:	68fb      	ldr	r3, [r7, #12]
10048a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048a9a:	b299      	uxth	r1, r3
10048a9c:	68fb      	ldr	r3, [r7, #12]
10048a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048aa0:	b2da      	uxtb	r2, r3
10048aa2:	2380      	movs	r3, #128	@ 0x80
10048aa4:	045c      	lsls	r4, r3, #17
10048aa6:	68f8      	ldr	r0, [r7, #12]
10048aa8:	697b      	ldr	r3, [r7, #20]
10048aaa:	9300      	str	r3, [sp, #0]
10048aac:	0023      	movs	r3, r4
10048aae:	f000 fec3 	bl	10049838 <I2C_TransferConfig>
10048ab2:	e012      	b.n	10048ada <I2C_Mem_ISR_DMA+0x1fa>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
10048ab4:	68fb      	ldr	r3, [r7, #12]
10048ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048ab8:	b29a      	uxth	r2, r3
10048aba:	68fb      	ldr	r3, [r7, #12]
10048abc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
10048abe:	68fb      	ldr	r3, [r7, #12]
10048ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
10048ac2:	b299      	uxth	r1, r3
10048ac4:	68fb      	ldr	r3, [r7, #12]
10048ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048ac8:	b2da      	uxtb	r2, r3
10048aca:	2380      	movs	r3, #128	@ 0x80
10048acc:	049c      	lsls	r4, r3, #18
10048ace:	68f8      	ldr	r0, [r7, #12]
10048ad0:	697b      	ldr	r3, [r7, #20]
10048ad2:	9300      	str	r3, [sp, #0]
10048ad4:	0023      	movs	r3, r4
10048ad6:	f000 feaf 	bl	10049838 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
10048ada:	68fb      	ldr	r3, [r7, #12]
10048adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10048ade:	b29a      	uxth	r2, r3
10048ae0:	68fb      	ldr	r3, [r7, #12]
10048ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10048ae4:	1ad3      	subs	r3, r2, r3
10048ae6:	b29a      	uxth	r2, r3
10048ae8:	68fb      	ldr	r3, [r7, #12]
10048aea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048aec:	68fb      	ldr	r3, [r7, #12]
10048aee:	2241      	movs	r2, #65	@ 0x41
10048af0:	5c9b      	ldrb	r3, [r3, r2]
10048af2:	b2db      	uxtb	r3, r3
10048af4:	2b22      	cmp	r3, #34	@ 0x22
10048af6:	d109      	bne.n	10048b0c <I2C_Mem_ISR_DMA+0x22c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
10048af8:	68fb      	ldr	r3, [r7, #12]
10048afa:	681b      	ldr	r3, [r3, #0]
10048afc:	681a      	ldr	r2, [r3, #0]
10048afe:	68fb      	ldr	r3, [r7, #12]
10048b00:	681b      	ldr	r3, [r3, #0]
10048b02:	2180      	movs	r1, #128	@ 0x80
10048b04:	0209      	lsls	r1, r1, #8
10048b06:	430a      	orrs	r2, r1
10048b08:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048b0a:	e01b      	b.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
10048b0c:	68fb      	ldr	r3, [r7, #12]
10048b0e:	681b      	ldr	r3, [r3, #0]
10048b10:	681a      	ldr	r2, [r3, #0]
10048b12:	68fb      	ldr	r3, [r7, #12]
10048b14:	681b      	ldr	r3, [r3, #0]
10048b16:	2180      	movs	r1, #128	@ 0x80
10048b18:	01c9      	lsls	r1, r1, #7
10048b1a:	430a      	orrs	r2, r1
10048b1c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10048b1e:	e011      	b.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10048b20:	68bb      	ldr	r3, [r7, #8]
10048b22:	095b      	lsrs	r3, r3, #5
10048b24:	001a      	movs	r2, r3
10048b26:	2301      	movs	r3, #1
10048b28:	4013      	ands	r3, r2
10048b2a:	d00b      	beq.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10048b2c:	687b      	ldr	r3, [r7, #4]
10048b2e:	095b      	lsrs	r3, r3, #5
10048b30:	001a      	movs	r2, r3
10048b32:	2301      	movs	r3, #1
10048b34:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10048b36:	d005      	beq.n	10048b44 <I2C_Mem_ISR_DMA+0x264>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
10048b38:	68ba      	ldr	r2, [r7, #8]
10048b3a:	68fb      	ldr	r3, [r7, #12]
10048b3c:	0011      	movs	r1, r2
10048b3e:	0018      	movs	r0, r3
10048b40:	f000 fa52 	bl	10048fe8 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10048b44:	68fb      	ldr	r3, [r7, #12]
10048b46:	2240      	movs	r2, #64	@ 0x40
10048b48:	2100      	movs	r1, #0
10048b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048b4c:	2300      	movs	r3, #0
}
10048b4e:	0018      	movs	r0, r3
10048b50:	46bd      	mov	sp, r7
10048b52:	b007      	add	sp, #28
10048b54:	bd90      	pop	{r4, r7, pc}
10048b56:	46c0      	nop			@ (mov r8, r8)
10048b58:	80002000 	.word	0x80002000
10048b5c:	80002400 	.word	0x80002400

10048b60 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
10048b60:	b580      	push	{r7, lr}
10048b62:	b088      	sub	sp, #32
10048b64:	af00      	add	r7, sp, #0
10048b66:	60f8      	str	r0, [r7, #12]
10048b68:	60b9      	str	r1, [r7, #8]
10048b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
10048b6c:	68fb      	ldr	r3, [r7, #12]
10048b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10048b70:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
10048b72:	2300      	movs	r3, #0
10048b74:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
10048b76:	68fb      	ldr	r3, [r7, #12]
10048b78:	2240      	movs	r2, #64	@ 0x40
10048b7a:	5c9b      	ldrb	r3, [r3, r2]
10048b7c:	2b01      	cmp	r3, #1
10048b7e:	d101      	bne.n	10048b84 <I2C_Slave_ISR_DMA+0x24>
10048b80:	2302      	movs	r3, #2
10048b82:	e0de      	b.n	10048d42 <I2C_Slave_ISR_DMA+0x1e2>
10048b84:	68fb      	ldr	r3, [r7, #12]
10048b86:	2240      	movs	r2, #64	@ 0x40
10048b88:	2101      	movs	r1, #1
10048b8a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10048b8c:	68bb      	ldr	r3, [r7, #8]
10048b8e:	095b      	lsrs	r3, r3, #5
10048b90:	001a      	movs	r2, r3
10048b92:	2301      	movs	r3, #1
10048b94:	4013      	ands	r3, r2
10048b96:	d00c      	beq.n	10048bb2 <I2C_Slave_ISR_DMA+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
10048b98:	687b      	ldr	r3, [r7, #4]
10048b9a:	095b      	lsrs	r3, r3, #5
10048b9c:	001a      	movs	r2, r3
10048b9e:	2301      	movs	r3, #1
10048ba0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
10048ba2:	d006      	beq.n	10048bb2 <I2C_Slave_ISR_DMA+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
10048ba4:	68ba      	ldr	r2, [r7, #8]
10048ba6:	68fb      	ldr	r3, [r7, #12]
10048ba8:	0011      	movs	r1, r2
10048baa:	0018      	movs	r0, r3
10048bac:	f000 faee 	bl	1004918c <I2C_ITSlaveCplt>
10048bb0:	e0c2      	b.n	10048d38 <I2C_Slave_ISR_DMA+0x1d8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10048bb2:	68bb      	ldr	r3, [r7, #8]
10048bb4:	091b      	lsrs	r3, r3, #4
10048bb6:	001a      	movs	r2, r3
10048bb8:	2301      	movs	r3, #1
10048bba:	4013      	ands	r3, r2
10048bbc:	d100      	bne.n	10048bc0 <I2C_Slave_ISR_DMA+0x60>
10048bbe:	e0a9      	b.n	10048d14 <I2C_Slave_ISR_DMA+0x1b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
10048bc0:	687b      	ldr	r3, [r7, #4]
10048bc2:	091b      	lsrs	r3, r3, #4
10048bc4:	001a      	movs	r2, r3
10048bc6:	2301      	movs	r3, #1
10048bc8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
10048bca:	d100      	bne.n	10048bce <I2C_Slave_ISR_DMA+0x6e>
10048bcc:	e0a2      	b.n	10048d14 <I2C_Slave_ISR_DMA+0x1b4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10048bce:	687b      	ldr	r3, [r7, #4]
10048bd0:	0b9b      	lsrs	r3, r3, #14
10048bd2:	001a      	movs	r2, r3
10048bd4:	2301      	movs	r3, #1
10048bd6:	4013      	ands	r3, r2
10048bd8:	d106      	bne.n	10048be8 <I2C_Slave_ISR_DMA+0x88>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
10048bda:	687b      	ldr	r3, [r7, #4]
10048bdc:	0bdb      	lsrs	r3, r3, #15
10048bde:	001a      	movs	r2, r3
10048be0:	2301      	movs	r3, #1
10048be2:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10048be4:	d100      	bne.n	10048be8 <I2C_Slave_ISR_DMA+0x88>
10048be6:	e08e      	b.n	10048d06 <I2C_Slave_ISR_DMA+0x1a6>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
10048be8:	68fb      	ldr	r3, [r7, #12]
10048bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048bec:	2b00      	cmp	r3, #0
10048bee:	d00d      	beq.n	10048c0c <I2C_Slave_ISR_DMA+0xac>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
10048bf0:	687b      	ldr	r3, [r7, #4]
10048bf2:	0bdb      	lsrs	r3, r3, #15
10048bf4:	001a      	movs	r2, r3
10048bf6:	2301      	movs	r3, #1
10048bf8:	4013      	ands	r3, r2
10048bfa:	d007      	beq.n	10048c0c <I2C_Slave_ISR_DMA+0xac>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
10048bfc:	68fb      	ldr	r3, [r7, #12]
10048bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10048c00:	681b      	ldr	r3, [r3, #0]
10048c02:	685b      	ldr	r3, [r3, #4]
10048c04:	2b00      	cmp	r3, #0
10048c06:	d101      	bne.n	10048c0c <I2C_Slave_ISR_DMA+0xac>
          {
            treatdmanack = 1U;
10048c08:	2301      	movs	r3, #1
10048c0a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
10048c0c:	68fb      	ldr	r3, [r7, #12]
10048c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10048c10:	2b00      	cmp	r3, #0
10048c12:	d00d      	beq.n	10048c30 <I2C_Slave_ISR_DMA+0xd0>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
10048c14:	687b      	ldr	r3, [r7, #4]
10048c16:	0b9b      	lsrs	r3, r3, #14
10048c18:	001a      	movs	r2, r3
10048c1a:	2301      	movs	r3, #1
10048c1c:	4013      	ands	r3, r2
10048c1e:	d007      	beq.n	10048c30 <I2C_Slave_ISR_DMA+0xd0>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
10048c20:	68fb      	ldr	r3, [r7, #12]
10048c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10048c24:	681b      	ldr	r3, [r3, #0]
10048c26:	685b      	ldr	r3, [r3, #4]
10048c28:	2b00      	cmp	r3, #0
10048c2a:	d101      	bne.n	10048c30 <I2C_Slave_ISR_DMA+0xd0>
          {
            treatdmanack = 1U;
10048c2c:	2301      	movs	r3, #1
10048c2e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
10048c30:	69fb      	ldr	r3, [r7, #28]
10048c32:	2b01      	cmp	r3, #1
10048c34:	d12d      	bne.n	10048c92 <I2C_Slave_ISR_DMA+0x132>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10048c36:	68fb      	ldr	r3, [r7, #12]
10048c38:	2241      	movs	r2, #65	@ 0x41
10048c3a:	5c9b      	ldrb	r3, [r3, r2]
10048c3c:	b2db      	uxtb	r3, r3
10048c3e:	2b28      	cmp	r3, #40	@ 0x28
10048c40:	d10b      	bne.n	10048c5a <I2C_Slave_ISR_DMA+0xfa>
10048c42:	69ba      	ldr	r2, [r7, #24]
10048c44:	2380      	movs	r3, #128	@ 0x80
10048c46:	049b      	lsls	r3, r3, #18
10048c48:	429a      	cmp	r2, r3
10048c4a:	d106      	bne.n	10048c5a <I2C_Slave_ISR_DMA+0xfa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
10048c4c:	68ba      	ldr	r2, [r7, #8]
10048c4e:	68fb      	ldr	r3, [r7, #12]
10048c50:	0011      	movs	r1, r2
10048c52:	0018      	movs	r0, r3
10048c54:	f000 fc2a 	bl	100494ac <I2C_ITListenCplt>
10048c58:	e054      	b.n	10048d04 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
10048c5a:	68fb      	ldr	r3, [r7, #12]
10048c5c:	2241      	movs	r2, #65	@ 0x41
10048c5e:	5c9b      	ldrb	r3, [r3, r2]
10048c60:	b2db      	uxtb	r3, r3
10048c62:	2b29      	cmp	r3, #41	@ 0x29
10048c64:	d110      	bne.n	10048c88 <I2C_Slave_ISR_DMA+0x128>
10048c66:	69bb      	ldr	r3, [r7, #24]
10048c68:	4a38      	ldr	r2, [pc, #224]	@ (10048d4c <I2C_Slave_ISR_DMA+0x1ec>)
10048c6a:	4293      	cmp	r3, r2
10048c6c:	d00c      	beq.n	10048c88 <I2C_Slave_ISR_DMA+0x128>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048c6e:	68fb      	ldr	r3, [r7, #12]
10048c70:	681b      	ldr	r3, [r3, #0]
10048c72:	2210      	movs	r2, #16
10048c74:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
10048c76:	68fb      	ldr	r3, [r7, #12]
10048c78:	0018      	movs	r0, r3
10048c7a:	f000 fd9c 	bl	100497b6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
10048c7e:	68fb      	ldr	r3, [r7, #12]
10048c80:	0018      	movs	r0, r3
10048c82:	f000 f94b 	bl	10048f1c <I2C_ITSlaveSeqCplt>
10048c86:	e03d      	b.n	10048d04 <I2C_Slave_ISR_DMA+0x1a4>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048c88:	68fb      	ldr	r3, [r7, #12]
10048c8a:	681b      	ldr	r3, [r3, #0]
10048c8c:	2210      	movs	r2, #16
10048c8e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
10048c90:	e03e      	b.n	10048d10 <I2C_Slave_ISR_DMA+0x1b0>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048c92:	68fb      	ldr	r3, [r7, #12]
10048c94:	681b      	ldr	r3, [r3, #0]
10048c96:	2210      	movs	r2, #16
10048c98:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10048c9a:	68fb      	ldr	r3, [r7, #12]
10048c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10048c9e:	2204      	movs	r2, #4
10048ca0:	431a      	orrs	r2, r3
10048ca2:	68fb      	ldr	r3, [r7, #12]
10048ca4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
10048ca6:	2317      	movs	r3, #23
10048ca8:	18fb      	adds	r3, r7, r3
10048caa:	68fa      	ldr	r2, [r7, #12]
10048cac:	2141      	movs	r1, #65	@ 0x41
10048cae:	5c52      	ldrb	r2, [r2, r1]
10048cb0:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
10048cb2:	69bb      	ldr	r3, [r7, #24]
10048cb4:	2b00      	cmp	r3, #0
10048cb6:	d004      	beq.n	10048cc2 <I2C_Slave_ISR_DMA+0x162>
10048cb8:	69ba      	ldr	r2, [r7, #24]
10048cba:	2380      	movs	r3, #128	@ 0x80
10048cbc:	045b      	lsls	r3, r3, #17
10048cbe:	429a      	cmp	r2, r3
10048cc0:	d126      	bne.n	10048d10 <I2C_Slave_ISR_DMA+0x1b0>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
10048cc2:	2217      	movs	r2, #23
10048cc4:	18bb      	adds	r3, r7, r2
10048cc6:	781b      	ldrb	r3, [r3, #0]
10048cc8:	2b21      	cmp	r3, #33	@ 0x21
10048cca:	d003      	beq.n	10048cd4 <I2C_Slave_ISR_DMA+0x174>
10048ccc:	18bb      	adds	r3, r7, r2
10048cce:	781b      	ldrb	r3, [r3, #0]
10048cd0:	2b29      	cmp	r3, #41	@ 0x29
10048cd2:	d103      	bne.n	10048cdc <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10048cd4:	68fb      	ldr	r3, [r7, #12]
10048cd6:	2221      	movs	r2, #33	@ 0x21
10048cd8:	631a      	str	r2, [r3, #48]	@ 0x30
10048cda:	e00b      	b.n	10048cf4 <I2C_Slave_ISR_DMA+0x194>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
10048cdc:	2217      	movs	r2, #23
10048cde:	18bb      	adds	r3, r7, r2
10048ce0:	781b      	ldrb	r3, [r3, #0]
10048ce2:	2b22      	cmp	r3, #34	@ 0x22
10048ce4:	d003      	beq.n	10048cee <I2C_Slave_ISR_DMA+0x18e>
10048ce6:	18bb      	adds	r3, r7, r2
10048ce8:	781b      	ldrb	r3, [r3, #0]
10048cea:	2b2a      	cmp	r3, #42	@ 0x2a
10048cec:	d102      	bne.n	10048cf4 <I2C_Slave_ISR_DMA+0x194>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10048cee:	68fb      	ldr	r3, [r7, #12]
10048cf0:	2222      	movs	r2, #34	@ 0x22
10048cf2:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
10048cf4:	68fb      	ldr	r3, [r7, #12]
10048cf6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
10048cf8:	68fb      	ldr	r3, [r7, #12]
10048cfa:	0011      	movs	r1, r2
10048cfc:	0018      	movs	r0, r3
10048cfe:	f000 fc2f 	bl	10049560 <I2C_ITError>
      if (treatdmanack == 1U)
10048d02:	e005      	b.n	10048d10 <I2C_Slave_ISR_DMA+0x1b0>
10048d04:	e004      	b.n	10048d10 <I2C_Slave_ISR_DMA+0x1b0>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10048d06:	68fb      	ldr	r3, [r7, #12]
10048d08:	681b      	ldr	r3, [r3, #0]
10048d0a:	2210      	movs	r2, #16
10048d0c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10048d0e:	e013      	b.n	10048d38 <I2C_Slave_ISR_DMA+0x1d8>
      if (treatdmanack == 1U)
10048d10:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
10048d12:	e011      	b.n	10048d38 <I2C_Slave_ISR_DMA+0x1d8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10048d14:	68bb      	ldr	r3, [r7, #8]
10048d16:	08db      	lsrs	r3, r3, #3
10048d18:	001a      	movs	r2, r3
10048d1a:	2301      	movs	r3, #1
10048d1c:	4013      	ands	r3, r2
10048d1e:	d00b      	beq.n	10048d38 <I2C_Slave_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
10048d20:	687b      	ldr	r3, [r7, #4]
10048d22:	08db      	lsrs	r3, r3, #3
10048d24:	001a      	movs	r2, r3
10048d26:	2301      	movs	r3, #1
10048d28:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
10048d2a:	d005      	beq.n	10048d38 <I2C_Slave_ISR_DMA+0x1d8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
10048d2c:	68ba      	ldr	r2, [r7, #8]
10048d2e:	68fb      	ldr	r3, [r7, #12]
10048d30:	0011      	movs	r1, r2
10048d32:	0018      	movs	r0, r3
10048d34:	f000 f80c 	bl	10048d50 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
10048d38:	68fb      	ldr	r3, [r7, #12]
10048d3a:	2240      	movs	r2, #64	@ 0x40
10048d3c:	2100      	movs	r1, #0
10048d3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
10048d40:	2300      	movs	r3, #0
}
10048d42:	0018      	movs	r0, r3
10048d44:	46bd      	mov	sp, r7
10048d46:	b008      	add	sp, #32
10048d48:	bd80      	pop	{r7, pc}
10048d4a:	46c0      	nop			@ (mov r8, r8)
10048d4c:	ffff0000 	.word	0xffff0000

10048d50 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10048d50:	b5b0      	push	{r4, r5, r7, lr}
10048d52:	b084      	sub	sp, #16
10048d54:	af00      	add	r7, sp, #0
10048d56:	6078      	str	r0, [r7, #4]
10048d58:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
10048d5a:	687b      	ldr	r3, [r7, #4]
10048d5c:	2241      	movs	r2, #65	@ 0x41
10048d5e:	5c9b      	ldrb	r3, [r3, r2]
10048d60:	b2db      	uxtb	r3, r3
10048d62:	001a      	movs	r2, r3
10048d64:	2328      	movs	r3, #40	@ 0x28
10048d66:	4013      	ands	r3, r2
10048d68:	2b28      	cmp	r3, #40	@ 0x28
10048d6a:	d000      	beq.n	10048d6e <I2C_ITAddrCplt+0x1e>
10048d6c:	e088      	b.n	10048e80 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
10048d6e:	687b      	ldr	r3, [r7, #4]
10048d70:	681b      	ldr	r3, [r3, #0]
10048d72:	699b      	ldr	r3, [r3, #24]
10048d74:	0c1b      	lsrs	r3, r3, #16
10048d76:	b2da      	uxtb	r2, r3
10048d78:	250f      	movs	r5, #15
10048d7a:	197b      	adds	r3, r7, r5
10048d7c:	2101      	movs	r1, #1
10048d7e:	400a      	ands	r2, r1
10048d80:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
10048d82:	687b      	ldr	r3, [r7, #4]
10048d84:	681b      	ldr	r3, [r3, #0]
10048d86:	699b      	ldr	r3, [r3, #24]
10048d88:	0c1b      	lsrs	r3, r3, #16
10048d8a:	b29a      	uxth	r2, r3
10048d8c:	200c      	movs	r0, #12
10048d8e:	183b      	adds	r3, r7, r0
10048d90:	21fe      	movs	r1, #254	@ 0xfe
10048d92:	400a      	ands	r2, r1
10048d94:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
10048d96:	687b      	ldr	r3, [r7, #4]
10048d98:	681b      	ldr	r3, [r3, #0]
10048d9a:	689b      	ldr	r3, [r3, #8]
10048d9c:	b29a      	uxth	r2, r3
10048d9e:	240a      	movs	r4, #10
10048da0:	193b      	adds	r3, r7, r4
10048da2:	0592      	lsls	r2, r2, #22
10048da4:	0d92      	lsrs	r2, r2, #22
10048da6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
10048da8:	687b      	ldr	r3, [r7, #4]
10048daa:	681b      	ldr	r3, [r3, #0]
10048dac:	68db      	ldr	r3, [r3, #12]
10048dae:	b29a      	uxth	r2, r3
10048db0:	2308      	movs	r3, #8
10048db2:	18fb      	adds	r3, r7, r3
10048db4:	21fe      	movs	r1, #254	@ 0xfe
10048db6:	400a      	ands	r2, r1
10048db8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
10048dba:	687b      	ldr	r3, [r7, #4]
10048dbc:	68db      	ldr	r3, [r3, #12]
10048dbe:	2b02      	cmp	r3, #2
10048dc0:	d148      	bne.n	10048e54 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
10048dc2:	0021      	movs	r1, r4
10048dc4:	187b      	adds	r3, r7, r1
10048dc6:	881b      	ldrh	r3, [r3, #0]
10048dc8:	09db      	lsrs	r3, r3, #7
10048dca:	b29a      	uxth	r2, r3
10048dcc:	183b      	adds	r3, r7, r0
10048dce:	881b      	ldrh	r3, [r3, #0]
10048dd0:	4053      	eors	r3, r2
10048dd2:	b29b      	uxth	r3, r3
10048dd4:	001a      	movs	r2, r3
10048dd6:	2306      	movs	r3, #6
10048dd8:	4013      	ands	r3, r2
10048dda:	d120      	bne.n	10048e1e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
10048ddc:	183b      	adds	r3, r7, r0
10048dde:	187a      	adds	r2, r7, r1
10048de0:	8812      	ldrh	r2, [r2, #0]
10048de2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
10048de4:	687b      	ldr	r3, [r7, #4]
10048de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10048de8:	1c5a      	adds	r2, r3, #1
10048dea:	687b      	ldr	r3, [r7, #4]
10048dec:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
10048dee:	687b      	ldr	r3, [r7, #4]
10048df0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
10048df2:	2b02      	cmp	r3, #2
10048df4:	d14c      	bne.n	10048e90 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
10048df6:	687b      	ldr	r3, [r7, #4]
10048df8:	2200      	movs	r2, #0
10048dfa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10048dfc:	687b      	ldr	r3, [r7, #4]
10048dfe:	681b      	ldr	r3, [r3, #0]
10048e00:	2208      	movs	r2, #8
10048e02:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
10048e04:	687b      	ldr	r3, [r7, #4]
10048e06:	2240      	movs	r2, #64	@ 0x40
10048e08:	2100      	movs	r1, #0
10048e0a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10048e0c:	183b      	adds	r3, r7, r0
10048e0e:	881a      	ldrh	r2, [r3, #0]
10048e10:	197b      	adds	r3, r7, r5
10048e12:	7819      	ldrb	r1, [r3, #0]
10048e14:	687b      	ldr	r3, [r7, #4]
10048e16:	0018      	movs	r0, r3
10048e18:	f7ff f9e0 	bl	100481dc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
10048e1c:	e038      	b.n	10048e90 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
10048e1e:	240c      	movs	r4, #12
10048e20:	193b      	adds	r3, r7, r4
10048e22:	2208      	movs	r2, #8
10048e24:	18ba      	adds	r2, r7, r2
10048e26:	8812      	ldrh	r2, [r2, #0]
10048e28:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10048e2a:	2380      	movs	r3, #128	@ 0x80
10048e2c:	021a      	lsls	r2, r3, #8
10048e2e:	687b      	ldr	r3, [r7, #4]
10048e30:	0011      	movs	r1, r2
10048e32:	0018      	movs	r0, r3
10048e34:	f000 fdc4 	bl	100499c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
10048e38:	687b      	ldr	r3, [r7, #4]
10048e3a:	2240      	movs	r2, #64	@ 0x40
10048e3c:	2100      	movs	r1, #0
10048e3e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10048e40:	193b      	adds	r3, r7, r4
10048e42:	881a      	ldrh	r2, [r3, #0]
10048e44:	230f      	movs	r3, #15
10048e46:	18fb      	adds	r3, r7, r3
10048e48:	7819      	ldrb	r1, [r3, #0]
10048e4a:	687b      	ldr	r3, [r7, #4]
10048e4c:	0018      	movs	r0, r3
10048e4e:	f7ff f9c5 	bl	100481dc <HAL_I2C_AddrCallback>
}
10048e52:	e01d      	b.n	10048e90 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
10048e54:	2380      	movs	r3, #128	@ 0x80
10048e56:	021a      	lsls	r2, r3, #8
10048e58:	687b      	ldr	r3, [r7, #4]
10048e5a:	0011      	movs	r1, r2
10048e5c:	0018      	movs	r0, r3
10048e5e:	f000 fdaf 	bl	100499c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
10048e62:	687b      	ldr	r3, [r7, #4]
10048e64:	2240      	movs	r2, #64	@ 0x40
10048e66:	2100      	movs	r1, #0
10048e68:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
10048e6a:	230c      	movs	r3, #12
10048e6c:	18fb      	adds	r3, r7, r3
10048e6e:	881a      	ldrh	r2, [r3, #0]
10048e70:	230f      	movs	r3, #15
10048e72:	18fb      	adds	r3, r7, r3
10048e74:	7819      	ldrb	r1, [r3, #0]
10048e76:	687b      	ldr	r3, [r7, #4]
10048e78:	0018      	movs	r0, r3
10048e7a:	f7ff f9af 	bl	100481dc <HAL_I2C_AddrCallback>
}
10048e7e:	e007      	b.n	10048e90 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
10048e80:	687b      	ldr	r3, [r7, #4]
10048e82:	681b      	ldr	r3, [r3, #0]
10048e84:	2208      	movs	r2, #8
10048e86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
10048e88:	687b      	ldr	r3, [r7, #4]
10048e8a:	2240      	movs	r2, #64	@ 0x40
10048e8c:	2100      	movs	r1, #0
10048e8e:	5499      	strb	r1, [r3, r2]
}
10048e90:	46c0      	nop			@ (mov r8, r8)
10048e92:	46bd      	mov	sp, r7
10048e94:	b004      	add	sp, #16
10048e96:	bdb0      	pop	{r4, r5, r7, pc}

10048e98 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
10048e98:	b580      	push	{r7, lr}
10048e9a:	b082      	sub	sp, #8
10048e9c:	af00      	add	r7, sp, #0
10048e9e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10048ea0:	687b      	ldr	r3, [r7, #4]
10048ea2:	2242      	movs	r2, #66	@ 0x42
10048ea4:	2100      	movs	r1, #0
10048ea6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10048ea8:	687b      	ldr	r3, [r7, #4]
10048eaa:	2241      	movs	r2, #65	@ 0x41
10048eac:	5c9b      	ldrb	r3, [r3, r2]
10048eae:	b2db      	uxtb	r3, r3
10048eb0:	2b21      	cmp	r3, #33	@ 0x21
10048eb2:	d117      	bne.n	10048ee4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
10048eb4:	687b      	ldr	r3, [r7, #4]
10048eb6:	2241      	movs	r2, #65	@ 0x41
10048eb8:	2120      	movs	r1, #32
10048eba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10048ebc:	687b      	ldr	r3, [r7, #4]
10048ebe:	2211      	movs	r2, #17
10048ec0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
10048ec2:	687b      	ldr	r3, [r7, #4]
10048ec4:	2200      	movs	r2, #0
10048ec6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10048ec8:	687b      	ldr	r3, [r7, #4]
10048eca:	2101      	movs	r1, #1
10048ecc:	0018      	movs	r0, r3
10048ece:	f000 fd77 	bl	100499c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048ed2:	687b      	ldr	r3, [r7, #4]
10048ed4:	2240      	movs	r2, #64	@ 0x40
10048ed6:	2100      	movs	r1, #0
10048ed8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
10048eda:	687b      	ldr	r3, [r7, #4]
10048edc:	0018      	movs	r0, r3
10048ede:	f7ff f95d 	bl	1004819c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10048ee2:	e016      	b.n	10048f12 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
10048ee4:	687b      	ldr	r3, [r7, #4]
10048ee6:	2241      	movs	r2, #65	@ 0x41
10048ee8:	2120      	movs	r1, #32
10048eea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10048eec:	687b      	ldr	r3, [r7, #4]
10048eee:	2212      	movs	r2, #18
10048ef0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
10048ef2:	687b      	ldr	r3, [r7, #4]
10048ef4:	2200      	movs	r2, #0
10048ef6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10048ef8:	687b      	ldr	r3, [r7, #4]
10048efa:	2102      	movs	r1, #2
10048efc:	0018      	movs	r0, r3
10048efe:	f000 fd5f 	bl	100499c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
10048f02:	687b      	ldr	r3, [r7, #4]
10048f04:	2240      	movs	r2, #64	@ 0x40
10048f06:	2100      	movs	r1, #0
10048f08:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
10048f0a:	687b      	ldr	r3, [r7, #4]
10048f0c:	0018      	movs	r0, r3
10048f0e:	f7ff f94d 	bl	100481ac <HAL_I2C_MasterRxCpltCallback>
}
10048f12:	46c0      	nop			@ (mov r8, r8)
10048f14:	46bd      	mov	sp, r7
10048f16:	b002      	add	sp, #8
10048f18:	bd80      	pop	{r7, pc}
	...

10048f1c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
10048f1c:	b580      	push	{r7, lr}
10048f1e:	b084      	sub	sp, #16
10048f20:	af00      	add	r7, sp, #0
10048f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10048f24:	687b      	ldr	r3, [r7, #4]
10048f26:	681b      	ldr	r3, [r3, #0]
10048f28:	681b      	ldr	r3, [r3, #0]
10048f2a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
10048f2c:	687b      	ldr	r3, [r7, #4]
10048f2e:	2242      	movs	r2, #66	@ 0x42
10048f30:	2100      	movs	r1, #0
10048f32:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
10048f34:	68fb      	ldr	r3, [r7, #12]
10048f36:	0b9b      	lsrs	r3, r3, #14
10048f38:	001a      	movs	r2, r3
10048f3a:	2301      	movs	r3, #1
10048f3c:	4013      	ands	r3, r2
10048f3e:	d008      	beq.n	10048f52 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10048f40:	687b      	ldr	r3, [r7, #4]
10048f42:	681b      	ldr	r3, [r3, #0]
10048f44:	681a      	ldr	r2, [r3, #0]
10048f46:	687b      	ldr	r3, [r7, #4]
10048f48:	681b      	ldr	r3, [r3, #0]
10048f4a:	4925      	ldr	r1, [pc, #148]	@ (10048fe0 <I2C_ITSlaveSeqCplt+0xc4>)
10048f4c:	400a      	ands	r2, r1
10048f4e:	601a      	str	r2, [r3, #0]
10048f50:	e00d      	b.n	10048f6e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10048f52:	68fb      	ldr	r3, [r7, #12]
10048f54:	0bdb      	lsrs	r3, r3, #15
10048f56:	001a      	movs	r2, r3
10048f58:	2301      	movs	r3, #1
10048f5a:	4013      	ands	r3, r2
10048f5c:	d007      	beq.n	10048f6e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
10048f5e:	687b      	ldr	r3, [r7, #4]
10048f60:	681b      	ldr	r3, [r3, #0]
10048f62:	681a      	ldr	r2, [r3, #0]
10048f64:	687b      	ldr	r3, [r7, #4]
10048f66:	681b      	ldr	r3, [r3, #0]
10048f68:	491e      	ldr	r1, [pc, #120]	@ (10048fe4 <I2C_ITSlaveSeqCplt+0xc8>)
10048f6a:	400a      	ands	r2, r1
10048f6c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
10048f6e:	687b      	ldr	r3, [r7, #4]
10048f70:	2241      	movs	r2, #65	@ 0x41
10048f72:	5c9b      	ldrb	r3, [r3, r2]
10048f74:	b2db      	uxtb	r3, r3
10048f76:	2b29      	cmp	r3, #41	@ 0x29
10048f78:	d114      	bne.n	10048fa4 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10048f7a:	687b      	ldr	r3, [r7, #4]
10048f7c:	2241      	movs	r2, #65	@ 0x41
10048f7e:	2128      	movs	r1, #40	@ 0x28
10048f80:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
10048f82:	687b      	ldr	r3, [r7, #4]
10048f84:	2221      	movs	r2, #33	@ 0x21
10048f86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
10048f88:	687b      	ldr	r3, [r7, #4]
10048f8a:	2101      	movs	r1, #1
10048f8c:	0018      	movs	r0, r3
10048f8e:	f000 fd17 	bl	100499c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10048f92:	687b      	ldr	r3, [r7, #4]
10048f94:	2240      	movs	r2, #64	@ 0x40
10048f96:	2100      	movs	r1, #0
10048f98:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
10048f9a:	687b      	ldr	r3, [r7, #4]
10048f9c:	0018      	movs	r0, r3
10048f9e:	f7ff f90d 	bl	100481bc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
10048fa2:	e019      	b.n	10048fd8 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
10048fa4:	687b      	ldr	r3, [r7, #4]
10048fa6:	2241      	movs	r2, #65	@ 0x41
10048fa8:	5c9b      	ldrb	r3, [r3, r2]
10048faa:	b2db      	uxtb	r3, r3
10048fac:	2b2a      	cmp	r3, #42	@ 0x2a
10048fae:	d113      	bne.n	10048fd8 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
10048fb0:	687b      	ldr	r3, [r7, #4]
10048fb2:	2241      	movs	r2, #65	@ 0x41
10048fb4:	2128      	movs	r1, #40	@ 0x28
10048fb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
10048fb8:	687b      	ldr	r3, [r7, #4]
10048fba:	2222      	movs	r2, #34	@ 0x22
10048fbc:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10048fbe:	687b      	ldr	r3, [r7, #4]
10048fc0:	2102      	movs	r1, #2
10048fc2:	0018      	movs	r0, r3
10048fc4:	f000 fcfc 	bl	100499c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
10048fc8:	687b      	ldr	r3, [r7, #4]
10048fca:	2240      	movs	r2, #64	@ 0x40
10048fcc:	2100      	movs	r1, #0
10048fce:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
10048fd0:	687b      	ldr	r3, [r7, #4]
10048fd2:	0018      	movs	r0, r3
10048fd4:	f7ff f8fa 	bl	100481cc <HAL_I2C_SlaveRxCpltCallback>
}
10048fd8:	46c0      	nop			@ (mov r8, r8)
10048fda:	46bd      	mov	sp, r7
10048fdc:	b004      	add	sp, #16
10048fde:	bd80      	pop	{r7, pc}
10048fe0:	ffffbfff 	.word	0xffffbfff
10048fe4:	ffff7fff 	.word	0xffff7fff

10048fe8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
10048fe8:	b580      	push	{r7, lr}
10048fea:	b086      	sub	sp, #24
10048fec:	af00      	add	r7, sp, #0
10048fee:	6078      	str	r0, [r7, #4]
10048ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
10048ff2:	683b      	ldr	r3, [r7, #0]
10048ff4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10048ff6:	687b      	ldr	r3, [r7, #4]
10048ff8:	681b      	ldr	r3, [r3, #0]
10048ffa:	2220      	movs	r2, #32
10048ffc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
10048ffe:	687b      	ldr	r3, [r7, #4]
10049000:	2241      	movs	r2, #65	@ 0x41
10049002:	5c9b      	ldrb	r3, [r3, r2]
10049004:	b2db      	uxtb	r3, r3
10049006:	2b21      	cmp	r3, #33	@ 0x21
10049008:	d108      	bne.n	1004901c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
1004900a:	687b      	ldr	r3, [r7, #4]
1004900c:	2101      	movs	r1, #1
1004900e:	0018      	movs	r0, r3
10049010:	f000 fcd6 	bl	100499c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
10049014:	687b      	ldr	r3, [r7, #4]
10049016:	2211      	movs	r2, #17
10049018:	631a      	str	r2, [r3, #48]	@ 0x30
1004901a:	e00d      	b.n	10049038 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004901c:	687b      	ldr	r3, [r7, #4]
1004901e:	2241      	movs	r2, #65	@ 0x41
10049020:	5c9b      	ldrb	r3, [r3, r2]
10049022:	b2db      	uxtb	r3, r3
10049024:	2b22      	cmp	r3, #34	@ 0x22
10049026:	d107      	bne.n	10049038 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
10049028:	687b      	ldr	r3, [r7, #4]
1004902a:	2102      	movs	r1, #2
1004902c:	0018      	movs	r0, r3
1004902e:	f000 fcc7 	bl	100499c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
10049032:	687b      	ldr	r3, [r7, #4]
10049034:	2212      	movs	r2, #18
10049036:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10049038:	687b      	ldr	r3, [r7, #4]
1004903a:	681b      	ldr	r3, [r3, #0]
1004903c:	685a      	ldr	r2, [r3, #4]
1004903e:	687b      	ldr	r3, [r7, #4]
10049040:	681b      	ldr	r3, [r3, #0]
10049042:	4950      	ldr	r1, [pc, #320]	@ (10049184 <I2C_ITMasterCplt+0x19c>)
10049044:	400a      	ands	r2, r1
10049046:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
10049048:	687b      	ldr	r3, [r7, #4]
1004904a:	2200      	movs	r2, #0
1004904c:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
1004904e:	687b      	ldr	r3, [r7, #4]
10049050:	4a4d      	ldr	r2, [pc, #308]	@ (10049188 <I2C_ITMasterCplt+0x1a0>)
10049052:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
10049054:	697b      	ldr	r3, [r7, #20]
10049056:	091b      	lsrs	r3, r3, #4
10049058:	001a      	movs	r2, r3
1004905a:	2301      	movs	r3, #1
1004905c:	4013      	ands	r3, r2
1004905e:	d009      	beq.n	10049074 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049060:	687b      	ldr	r3, [r7, #4]
10049062:	681b      	ldr	r3, [r3, #0]
10049064:	2210      	movs	r2, #16
10049066:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049068:	687b      	ldr	r3, [r7, #4]
1004906a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004906c:	2204      	movs	r2, #4
1004906e:	431a      	orrs	r2, r3
10049070:	687b      	ldr	r3, [r7, #4]
10049072:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
10049074:	687b      	ldr	r3, [r7, #4]
10049076:	2241      	movs	r2, #65	@ 0x41
10049078:	5c9b      	ldrb	r3, [r3, r2]
1004907a:	b2db      	uxtb	r3, r3
1004907c:	2b60      	cmp	r3, #96	@ 0x60
1004907e:	d10b      	bne.n	10049098 <I2C_ITMasterCplt+0xb0>
10049080:	697b      	ldr	r3, [r7, #20]
10049082:	089b      	lsrs	r3, r3, #2
10049084:	001a      	movs	r2, r3
10049086:	2301      	movs	r3, #1
10049088:	4013      	ands	r3, r2
1004908a:	d005      	beq.n	10049098 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
1004908c:	687b      	ldr	r3, [r7, #4]
1004908e:	681b      	ldr	r3, [r3, #0]
10049090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
10049092:	b2db      	uxtb	r3, r3
10049094:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
10049096:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10049098:	687b      	ldr	r3, [r7, #4]
1004909a:	0018      	movs	r0, r3
1004909c:	f000 fb8b 	bl	100497b6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
100490a0:	687b      	ldr	r3, [r7, #4]
100490a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100490a4:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
100490a6:	687b      	ldr	r3, [r7, #4]
100490a8:	2241      	movs	r2, #65	@ 0x41
100490aa:	5c9b      	ldrb	r3, [r3, r2]
100490ac:	b2db      	uxtb	r3, r3
100490ae:	2b60      	cmp	r3, #96	@ 0x60
100490b0:	d002      	beq.n	100490b8 <I2C_ITMasterCplt+0xd0>
100490b2:	693b      	ldr	r3, [r7, #16]
100490b4:	2b00      	cmp	r3, #0
100490b6:	d007      	beq.n	100490c8 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
100490b8:	687b      	ldr	r3, [r7, #4]
100490ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100490bc:	687b      	ldr	r3, [r7, #4]
100490be:	0011      	movs	r1, r2
100490c0:	0018      	movs	r0, r3
100490c2:	f000 fa4d 	bl	10049560 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
100490c6:	e058      	b.n	1004917a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
100490c8:	687b      	ldr	r3, [r7, #4]
100490ca:	2241      	movs	r2, #65	@ 0x41
100490cc:	5c9b      	ldrb	r3, [r3, r2]
100490ce:	b2db      	uxtb	r3, r3
100490d0:	2b21      	cmp	r3, #33	@ 0x21
100490d2:	d126      	bne.n	10049122 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
100490d4:	687b      	ldr	r3, [r7, #4]
100490d6:	2241      	movs	r2, #65	@ 0x41
100490d8:	2120      	movs	r1, #32
100490da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
100490dc:	687b      	ldr	r3, [r7, #4]
100490de:	2200      	movs	r2, #0
100490e0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
100490e2:	687b      	ldr	r3, [r7, #4]
100490e4:	2242      	movs	r2, #66	@ 0x42
100490e6:	5c9b      	ldrb	r3, [r3, r2]
100490e8:	b2db      	uxtb	r3, r3
100490ea:	2b40      	cmp	r3, #64	@ 0x40
100490ec:	d10c      	bne.n	10049108 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
100490ee:	687b      	ldr	r3, [r7, #4]
100490f0:	2242      	movs	r2, #66	@ 0x42
100490f2:	2100      	movs	r1, #0
100490f4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
100490f6:	687b      	ldr	r3, [r7, #4]
100490f8:	2240      	movs	r2, #64	@ 0x40
100490fa:	2100      	movs	r1, #0
100490fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
100490fe:	687b      	ldr	r3, [r7, #4]
10049100:	0018      	movs	r0, r3
10049102:	f7fb f839 	bl	10044178 <HAL_I2C_MemTxCpltCallback>
}
10049106:	e038      	b.n	1004917a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049108:	687b      	ldr	r3, [r7, #4]
1004910a:	2242      	movs	r2, #66	@ 0x42
1004910c:	2100      	movs	r1, #0
1004910e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10049110:	687b      	ldr	r3, [r7, #4]
10049112:	2240      	movs	r2, #64	@ 0x40
10049114:	2100      	movs	r1, #0
10049116:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
10049118:	687b      	ldr	r3, [r7, #4]
1004911a:	0018      	movs	r0, r3
1004911c:	f7ff f83e 	bl	1004819c <HAL_I2C_MasterTxCpltCallback>
}
10049120:	e02b      	b.n	1004917a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
10049122:	687b      	ldr	r3, [r7, #4]
10049124:	2241      	movs	r2, #65	@ 0x41
10049126:	5c9b      	ldrb	r3, [r3, r2]
10049128:	b2db      	uxtb	r3, r3
1004912a:	2b22      	cmp	r3, #34	@ 0x22
1004912c:	d125      	bne.n	1004917a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
1004912e:	687b      	ldr	r3, [r7, #4]
10049130:	2241      	movs	r2, #65	@ 0x41
10049132:	2120      	movs	r1, #32
10049134:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049136:	687b      	ldr	r3, [r7, #4]
10049138:	2200      	movs	r2, #0
1004913a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
1004913c:	687b      	ldr	r3, [r7, #4]
1004913e:	2242      	movs	r2, #66	@ 0x42
10049140:	5c9b      	ldrb	r3, [r3, r2]
10049142:	b2db      	uxtb	r3, r3
10049144:	2b40      	cmp	r3, #64	@ 0x40
10049146:	d10c      	bne.n	10049162 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049148:	687b      	ldr	r3, [r7, #4]
1004914a:	2242      	movs	r2, #66	@ 0x42
1004914c:	2100      	movs	r1, #0
1004914e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
10049150:	687b      	ldr	r3, [r7, #4]
10049152:	2240      	movs	r2, #64	@ 0x40
10049154:	2100      	movs	r1, #0
10049156:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
10049158:	687b      	ldr	r3, [r7, #4]
1004915a:	0018      	movs	r0, r3
1004915c:	f7fb f860 	bl	10044220 <HAL_I2C_MemRxCpltCallback>
}
10049160:	e00b      	b.n	1004917a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
10049162:	687b      	ldr	r3, [r7, #4]
10049164:	2242      	movs	r2, #66	@ 0x42
10049166:	2100      	movs	r1, #0
10049168:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
1004916a:	687b      	ldr	r3, [r7, #4]
1004916c:	2240      	movs	r2, #64	@ 0x40
1004916e:	2100      	movs	r1, #0
10049170:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
10049172:	687b      	ldr	r3, [r7, #4]
10049174:	0018      	movs	r0, r3
10049176:	f7ff f819 	bl	100481ac <HAL_I2C_MasterRxCpltCallback>
}
1004917a:	46c0      	nop			@ (mov r8, r8)
1004917c:	46bd      	mov	sp, r7
1004917e:	b006      	add	sp, #24
10049180:	bd80      	pop	{r7, pc}
10049182:	46c0      	nop			@ (mov r8, r8)
10049184:	fe00e800 	.word	0xfe00e800
10049188:	ffff0000 	.word	0xffff0000

1004918c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
1004918c:	b580      	push	{r7, lr}
1004918e:	b086      	sub	sp, #24
10049190:	af00      	add	r7, sp, #0
10049192:	6078      	str	r0, [r7, #4]
10049194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
10049196:	687b      	ldr	r3, [r7, #4]
10049198:	681b      	ldr	r3, [r3, #0]
1004919a:	681b      	ldr	r3, [r3, #0]
1004919c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
1004919e:	683b      	ldr	r3, [r7, #0]
100491a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
100491a2:	687b      	ldr	r3, [r7, #4]
100491a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100491a6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
100491a8:	200b      	movs	r0, #11
100491aa:	183b      	adds	r3, r7, r0
100491ac:	687a      	ldr	r2, [r7, #4]
100491ae:	2141      	movs	r1, #65	@ 0x41
100491b0:	5c52      	ldrb	r2, [r2, r1]
100491b2:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
100491b4:	687b      	ldr	r3, [r7, #4]
100491b6:	681b      	ldr	r3, [r3, #0]
100491b8:	2220      	movs	r2, #32
100491ba:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
100491bc:	183b      	adds	r3, r7, r0
100491be:	781b      	ldrb	r3, [r3, #0]
100491c0:	2b21      	cmp	r3, #33	@ 0x21
100491c2:	d003      	beq.n	100491cc <I2C_ITSlaveCplt+0x40>
100491c4:	183b      	adds	r3, r7, r0
100491c6:	781b      	ldrb	r3, [r3, #0]
100491c8:	2b29      	cmp	r3, #41	@ 0x29
100491ca:	d109      	bne.n	100491e0 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
100491cc:	4ab0      	ldr	r2, [pc, #704]	@ (10049490 <I2C_ITSlaveCplt+0x304>)
100491ce:	687b      	ldr	r3, [r7, #4]
100491d0:	0011      	movs	r1, r2
100491d2:	0018      	movs	r0, r3
100491d4:	f000 fbf4 	bl	100499c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
100491d8:	687b      	ldr	r3, [r7, #4]
100491da:	2221      	movs	r2, #33	@ 0x21
100491dc:	631a      	str	r2, [r3, #48]	@ 0x30
100491de:	e020      	b.n	10049222 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
100491e0:	220b      	movs	r2, #11
100491e2:	18bb      	adds	r3, r7, r2
100491e4:	781b      	ldrb	r3, [r3, #0]
100491e6:	2b22      	cmp	r3, #34	@ 0x22
100491e8:	d003      	beq.n	100491f2 <I2C_ITSlaveCplt+0x66>
100491ea:	18bb      	adds	r3, r7, r2
100491ec:	781b      	ldrb	r3, [r3, #0]
100491ee:	2b2a      	cmp	r3, #42	@ 0x2a
100491f0:	d109      	bne.n	10049206 <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
100491f2:	4aa8      	ldr	r2, [pc, #672]	@ (10049494 <I2C_ITSlaveCplt+0x308>)
100491f4:	687b      	ldr	r3, [r7, #4]
100491f6:	0011      	movs	r1, r2
100491f8:	0018      	movs	r0, r3
100491fa:	f000 fbe1 	bl	100499c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
100491fe:	687b      	ldr	r3, [r7, #4]
10049200:	2222      	movs	r2, #34	@ 0x22
10049202:	631a      	str	r2, [r3, #48]	@ 0x30
10049204:	e00d      	b.n	10049222 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
10049206:	230b      	movs	r3, #11
10049208:	18fb      	adds	r3, r7, r3
1004920a:	781b      	ldrb	r3, [r3, #0]
1004920c:	2b28      	cmp	r3, #40	@ 0x28
1004920e:	d108      	bne.n	10049222 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
10049210:	4aa1      	ldr	r2, [pc, #644]	@ (10049498 <I2C_ITSlaveCplt+0x30c>)
10049212:	687b      	ldr	r3, [r7, #4]
10049214:	0011      	movs	r1, r2
10049216:	0018      	movs	r0, r3
10049218:	f000 fbd2 	bl	100499c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
1004921c:	687b      	ldr	r3, [r7, #4]
1004921e:	2200      	movs	r2, #0
10049220:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
10049222:	687b      	ldr	r3, [r7, #4]
10049224:	681b      	ldr	r3, [r3, #0]
10049226:	685a      	ldr	r2, [r3, #4]
10049228:	687b      	ldr	r3, [r7, #4]
1004922a:	681b      	ldr	r3, [r3, #0]
1004922c:	2180      	movs	r1, #128	@ 0x80
1004922e:	0209      	lsls	r1, r1, #8
10049230:	430a      	orrs	r2, r1
10049232:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
10049234:	687b      	ldr	r3, [r7, #4]
10049236:	681b      	ldr	r3, [r3, #0]
10049238:	685a      	ldr	r2, [r3, #4]
1004923a:	687b      	ldr	r3, [r7, #4]
1004923c:	681b      	ldr	r3, [r3, #0]
1004923e:	4997      	ldr	r1, [pc, #604]	@ (1004949c <I2C_ITSlaveCplt+0x310>)
10049240:	400a      	ands	r2, r1
10049242:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
10049244:	687b      	ldr	r3, [r7, #4]
10049246:	0018      	movs	r0, r3
10049248:	f000 fab5 	bl	100497b6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
1004924c:	693b      	ldr	r3, [r7, #16]
1004924e:	0b9b      	lsrs	r3, r3, #14
10049250:	001a      	movs	r2, r3
10049252:	2301      	movs	r3, #1
10049254:	4013      	ands	r3, r2
10049256:	d013      	beq.n	10049280 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
10049258:	687b      	ldr	r3, [r7, #4]
1004925a:	681b      	ldr	r3, [r3, #0]
1004925c:	681a      	ldr	r2, [r3, #0]
1004925e:	687b      	ldr	r3, [r7, #4]
10049260:	681b      	ldr	r3, [r3, #0]
10049262:	498f      	ldr	r1, [pc, #572]	@ (100494a0 <I2C_ITSlaveCplt+0x314>)
10049264:	400a      	ands	r2, r1
10049266:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
10049268:	687b      	ldr	r3, [r7, #4]
1004926a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004926c:	2b00      	cmp	r3, #0
1004926e:	d020      	beq.n	100492b2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
10049270:	687b      	ldr	r3, [r7, #4]
10049272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049274:	681b      	ldr	r3, [r3, #0]
10049276:	685b      	ldr	r3, [r3, #4]
10049278:	b29a      	uxth	r2, r3
1004927a:	687b      	ldr	r3, [r7, #4]
1004927c:	855a      	strh	r2, [r3, #42]	@ 0x2a
1004927e:	e018      	b.n	100492b2 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
10049280:	693b      	ldr	r3, [r7, #16]
10049282:	0bdb      	lsrs	r3, r3, #15
10049284:	001a      	movs	r2, r3
10049286:	2301      	movs	r3, #1
10049288:	4013      	ands	r3, r2
1004928a:	d012      	beq.n	100492b2 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
1004928c:	687b      	ldr	r3, [r7, #4]
1004928e:	681b      	ldr	r3, [r3, #0]
10049290:	681a      	ldr	r2, [r3, #0]
10049292:	687b      	ldr	r3, [r7, #4]
10049294:	681b      	ldr	r3, [r3, #0]
10049296:	4983      	ldr	r1, [pc, #524]	@ (100494a4 <I2C_ITSlaveCplt+0x318>)
10049298:	400a      	ands	r2, r1
1004929a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
1004929c:	687b      	ldr	r3, [r7, #4]
1004929e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100492a0:	2b00      	cmp	r3, #0
100492a2:	d006      	beq.n	100492b2 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
100492a4:	687b      	ldr	r3, [r7, #4]
100492a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100492a8:	681b      	ldr	r3, [r3, #0]
100492aa:	685b      	ldr	r3, [r3, #4]
100492ac:	b29a      	uxth	r2, r3
100492ae:	687b      	ldr	r3, [r7, #4]
100492b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
100492b2:	697b      	ldr	r3, [r7, #20]
100492b4:	089b      	lsrs	r3, r3, #2
100492b6:	001a      	movs	r2, r3
100492b8:	2301      	movs	r3, #1
100492ba:	4013      	ands	r3, r2
100492bc:	d020      	beq.n	10049300 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
100492be:	697b      	ldr	r3, [r7, #20]
100492c0:	2204      	movs	r2, #4
100492c2:	4393      	bics	r3, r2
100492c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100492c6:	687b      	ldr	r3, [r7, #4]
100492c8:	681b      	ldr	r3, [r3, #0]
100492ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100492cc:	687b      	ldr	r3, [r7, #4]
100492ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100492d0:	b2d2      	uxtb	r2, r2
100492d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100492d4:	687b      	ldr	r3, [r7, #4]
100492d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100492d8:	1c5a      	adds	r2, r3, #1
100492da:	687b      	ldr	r3, [r7, #4]
100492dc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
100492de:	687b      	ldr	r3, [r7, #4]
100492e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100492e2:	2b00      	cmp	r3, #0
100492e4:	d00c      	beq.n	10049300 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
100492e6:	687b      	ldr	r3, [r7, #4]
100492e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
100492ea:	3b01      	subs	r3, #1
100492ec:	b29a      	uxth	r2, r3
100492ee:	687b      	ldr	r3, [r7, #4]
100492f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
100492f2:	687b      	ldr	r3, [r7, #4]
100492f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
100492f6:	b29b      	uxth	r3, r3
100492f8:	3b01      	subs	r3, #1
100492fa:	b29a      	uxth	r2, r3
100492fc:	687b      	ldr	r3, [r7, #4]
100492fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
10049300:	687b      	ldr	r3, [r7, #4]
10049302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049304:	b29b      	uxth	r3, r3
10049306:	2b00      	cmp	r3, #0
10049308:	d005      	beq.n	10049316 <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004930a:	687b      	ldr	r3, [r7, #4]
1004930c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
1004930e:	2204      	movs	r2, #4
10049310:	431a      	orrs	r2, r3
10049312:	687b      	ldr	r3, [r7, #4]
10049314:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
10049316:	697b      	ldr	r3, [r7, #20]
10049318:	091b      	lsrs	r3, r3, #4
1004931a:	001a      	movs	r2, r3
1004931c:	2301      	movs	r3, #1
1004931e:	4013      	ands	r3, r2
10049320:	d051      	beq.n	100493c6 <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
10049322:	693b      	ldr	r3, [r7, #16]
10049324:	091b      	lsrs	r3, r3, #4
10049326:	001a      	movs	r2, r3
10049328:	2301      	movs	r3, #1
1004932a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
1004932c:	d04b      	beq.n	100493c6 <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
1004932e:	687b      	ldr	r3, [r7, #4]
10049330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049332:	b29b      	uxth	r3, r3
10049334:	2b00      	cmp	r3, #0
10049336:	d12d      	bne.n	10049394 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
10049338:	687b      	ldr	r3, [r7, #4]
1004933a:	2241      	movs	r2, #65	@ 0x41
1004933c:	5c9b      	ldrb	r3, [r3, r2]
1004933e:	b2db      	uxtb	r3, r3
10049340:	2b28      	cmp	r3, #40	@ 0x28
10049342:	d10b      	bne.n	1004935c <I2C_ITSlaveCplt+0x1d0>
10049344:	68fa      	ldr	r2, [r7, #12]
10049346:	2380      	movs	r3, #128	@ 0x80
10049348:	049b      	lsls	r3, r3, #18
1004934a:	429a      	cmp	r2, r3
1004934c:	d106      	bne.n	1004935c <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
1004934e:	697a      	ldr	r2, [r7, #20]
10049350:	687b      	ldr	r3, [r7, #4]
10049352:	0011      	movs	r1, r2
10049354:	0018      	movs	r0, r3
10049356:	f000 f8a9 	bl	100494ac <I2C_ITListenCplt>
1004935a:	e034      	b.n	100493c6 <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
1004935c:	687b      	ldr	r3, [r7, #4]
1004935e:	2241      	movs	r2, #65	@ 0x41
10049360:	5c9b      	ldrb	r3, [r3, r2]
10049362:	b2db      	uxtb	r3, r3
10049364:	2b29      	cmp	r3, #41	@ 0x29
10049366:	d110      	bne.n	1004938a <I2C_ITSlaveCplt+0x1fe>
10049368:	68fb      	ldr	r3, [r7, #12]
1004936a:	4a4f      	ldr	r2, [pc, #316]	@ (100494a8 <I2C_ITSlaveCplt+0x31c>)
1004936c:	4293      	cmp	r3, r2
1004936e:	d00c      	beq.n	1004938a <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049370:	687b      	ldr	r3, [r7, #4]
10049372:	681b      	ldr	r3, [r3, #0]
10049374:	2210      	movs	r2, #16
10049376:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
10049378:	687b      	ldr	r3, [r7, #4]
1004937a:	0018      	movs	r0, r3
1004937c:	f000 fa1b 	bl	100497b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
10049380:	687b      	ldr	r3, [r7, #4]
10049382:	0018      	movs	r0, r3
10049384:	f7ff fdca 	bl	10048f1c <I2C_ITSlaveSeqCplt>
10049388:	e01d      	b.n	100493c6 <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004938a:	687b      	ldr	r3, [r7, #4]
1004938c:	681b      	ldr	r3, [r3, #0]
1004938e:	2210      	movs	r2, #16
10049390:	61da      	str	r2, [r3, #28]
10049392:	e018      	b.n	100493c6 <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049394:	687b      	ldr	r3, [r7, #4]
10049396:	681b      	ldr	r3, [r3, #0]
10049398:	2210      	movs	r2, #16
1004939a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004939c:	687b      	ldr	r3, [r7, #4]
1004939e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100493a0:	2204      	movs	r2, #4
100493a2:	431a      	orrs	r2, r3
100493a4:	687b      	ldr	r3, [r7, #4]
100493a6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
100493a8:	68fb      	ldr	r3, [r7, #12]
100493aa:	2b00      	cmp	r3, #0
100493ac:	d004      	beq.n	100493b8 <I2C_ITSlaveCplt+0x22c>
100493ae:	68fa      	ldr	r2, [r7, #12]
100493b0:	2380      	movs	r3, #128	@ 0x80
100493b2:	045b      	lsls	r3, r3, #17
100493b4:	429a      	cmp	r2, r3
100493b6:	d106      	bne.n	100493c6 <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
100493b8:	687b      	ldr	r3, [r7, #4]
100493ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100493bc:	687b      	ldr	r3, [r7, #4]
100493be:	0011      	movs	r1, r2
100493c0:	0018      	movs	r0, r3
100493c2:	f000 f8cd 	bl	10049560 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
100493c6:	687b      	ldr	r3, [r7, #4]
100493c8:	2242      	movs	r2, #66	@ 0x42
100493ca:	2100      	movs	r1, #0
100493cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
100493ce:	687b      	ldr	r3, [r7, #4]
100493d0:	2200      	movs	r2, #0
100493d2:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
100493d4:	687b      	ldr	r3, [r7, #4]
100493d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
100493d8:	2b00      	cmp	r3, #0
100493da:	d013      	beq.n	10049404 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
100493dc:	687b      	ldr	r3, [r7, #4]
100493de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
100493e0:	687b      	ldr	r3, [r7, #4]
100493e2:	0011      	movs	r1, r2
100493e4:	0018      	movs	r0, r3
100493e6:	f000 f8bb 	bl	10049560 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
100493ea:	687b      	ldr	r3, [r7, #4]
100493ec:	2241      	movs	r2, #65	@ 0x41
100493ee:	5c9b      	ldrb	r3, [r3, r2]
100493f0:	b2db      	uxtb	r3, r3
100493f2:	2b28      	cmp	r3, #40	@ 0x28
100493f4:	d147      	bne.n	10049486 <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
100493f6:	697a      	ldr	r2, [r7, #20]
100493f8:	687b      	ldr	r3, [r7, #4]
100493fa:	0011      	movs	r1, r2
100493fc:	0018      	movs	r0, r3
100493fe:	f000 f855 	bl	100494ac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10049402:	e040      	b.n	10049486 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
10049404:	687b      	ldr	r3, [r7, #4]
10049406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10049408:	4a27      	ldr	r2, [pc, #156]	@ (100494a8 <I2C_ITSlaveCplt+0x31c>)
1004940a:	4293      	cmp	r3, r2
1004940c:	d016      	beq.n	1004943c <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
1004940e:	687b      	ldr	r3, [r7, #4]
10049410:	0018      	movs	r0, r3
10049412:	f7ff fd83 	bl	10048f1c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
10049416:	687b      	ldr	r3, [r7, #4]
10049418:	4a23      	ldr	r2, [pc, #140]	@ (100494a8 <I2C_ITSlaveCplt+0x31c>)
1004941a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
1004941c:	687b      	ldr	r3, [r7, #4]
1004941e:	2241      	movs	r2, #65	@ 0x41
10049420:	2120      	movs	r1, #32
10049422:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049424:	687b      	ldr	r3, [r7, #4]
10049426:	2200      	movs	r2, #0
10049428:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004942a:	687b      	ldr	r3, [r7, #4]
1004942c:	2240      	movs	r2, #64	@ 0x40
1004942e:	2100      	movs	r1, #0
10049430:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
10049432:	687b      	ldr	r3, [r7, #4]
10049434:	0018      	movs	r0, r3
10049436:	f7fe fee1 	bl	100481fc <HAL_I2C_ListenCpltCallback>
}
1004943a:	e024      	b.n	10049486 <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
1004943c:	687b      	ldr	r3, [r7, #4]
1004943e:	2241      	movs	r2, #65	@ 0x41
10049440:	5c9b      	ldrb	r3, [r3, r2]
10049442:	b2db      	uxtb	r3, r3
10049444:	2b22      	cmp	r3, #34	@ 0x22
10049446:	d10f      	bne.n	10049468 <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
10049448:	687b      	ldr	r3, [r7, #4]
1004944a:	2241      	movs	r2, #65	@ 0x41
1004944c:	2120      	movs	r1, #32
1004944e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049450:	687b      	ldr	r3, [r7, #4]
10049452:	2200      	movs	r2, #0
10049454:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10049456:	687b      	ldr	r3, [r7, #4]
10049458:	2240      	movs	r2, #64	@ 0x40
1004945a:	2100      	movs	r1, #0
1004945c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
1004945e:	687b      	ldr	r3, [r7, #4]
10049460:	0018      	movs	r0, r3
10049462:	f7fe feb3 	bl	100481cc <HAL_I2C_SlaveRxCpltCallback>
}
10049466:	e00e      	b.n	10049486 <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
10049468:	687b      	ldr	r3, [r7, #4]
1004946a:	2241      	movs	r2, #65	@ 0x41
1004946c:	2120      	movs	r1, #32
1004946e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049470:	687b      	ldr	r3, [r7, #4]
10049472:	2200      	movs	r2, #0
10049474:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
10049476:	687b      	ldr	r3, [r7, #4]
10049478:	2240      	movs	r2, #64	@ 0x40
1004947a:	2100      	movs	r1, #0
1004947c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
1004947e:	687b      	ldr	r3, [r7, #4]
10049480:	0018      	movs	r0, r3
10049482:	f7fe fe9b 	bl	100481bc <HAL_I2C_SlaveTxCpltCallback>
}
10049486:	46c0      	nop			@ (mov r8, r8)
10049488:	46bd      	mov	sp, r7
1004948a:	b006      	add	sp, #24
1004948c:	bd80      	pop	{r7, pc}
1004948e:	46c0      	nop			@ (mov r8, r8)
10049490:	00008001 	.word	0x00008001
10049494:	00008002 	.word	0x00008002
10049498:	00008003 	.word	0x00008003
1004949c:	fe00e800 	.word	0xfe00e800
100494a0:	ffffbfff 	.word	0xffffbfff
100494a4:	ffff7fff 	.word	0xffff7fff
100494a8:	ffff0000 	.word	0xffff0000

100494ac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
100494ac:	b580      	push	{r7, lr}
100494ae:	b082      	sub	sp, #8
100494b0:	af00      	add	r7, sp, #0
100494b2:	6078      	str	r0, [r7, #4]
100494b4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
100494b6:	687b      	ldr	r3, [r7, #4]
100494b8:	4a27      	ldr	r2, [pc, #156]	@ (10049558 <I2C_ITListenCplt+0xac>)
100494ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
100494bc:	687b      	ldr	r3, [r7, #4]
100494be:	2200      	movs	r2, #0
100494c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
100494c2:	687b      	ldr	r3, [r7, #4]
100494c4:	2241      	movs	r2, #65	@ 0x41
100494c6:	2120      	movs	r1, #32
100494c8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
100494ca:	687b      	ldr	r3, [r7, #4]
100494cc:	2242      	movs	r2, #66	@ 0x42
100494ce:	2100      	movs	r1, #0
100494d0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
100494d2:	687b      	ldr	r3, [r7, #4]
100494d4:	2200      	movs	r2, #0
100494d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
100494d8:	683b      	ldr	r3, [r7, #0]
100494da:	089b      	lsrs	r3, r3, #2
100494dc:	001a      	movs	r2, r3
100494de:	2301      	movs	r3, #1
100494e0:	4013      	ands	r3, r2
100494e2:	d022      	beq.n	1004952a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
100494e4:	687b      	ldr	r3, [r7, #4]
100494e6:	681b      	ldr	r3, [r3, #0]
100494e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
100494ea:	687b      	ldr	r3, [r7, #4]
100494ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100494ee:	b2d2      	uxtb	r2, r2
100494f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
100494f2:	687b      	ldr	r3, [r7, #4]
100494f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100494f6:	1c5a      	adds	r2, r3, #1
100494f8:	687b      	ldr	r3, [r7, #4]
100494fa:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
100494fc:	687b      	ldr	r3, [r7, #4]
100494fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049500:	2b00      	cmp	r3, #0
10049502:	d012      	beq.n	1004952a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
10049504:	687b      	ldr	r3, [r7, #4]
10049506:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
10049508:	3b01      	subs	r3, #1
1004950a:	b29a      	uxth	r2, r3
1004950c:	687b      	ldr	r3, [r7, #4]
1004950e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
10049510:	687b      	ldr	r3, [r7, #4]
10049512:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
10049514:	b29b      	uxth	r3, r3
10049516:	3b01      	subs	r3, #1
10049518:	b29a      	uxth	r2, r3
1004951a:	687b      	ldr	r3, [r7, #4]
1004951c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
1004951e:	687b      	ldr	r3, [r7, #4]
10049520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049522:	2204      	movs	r2, #4
10049524:	431a      	orrs	r2, r3
10049526:	687b      	ldr	r3, [r7, #4]
10049528:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
1004952a:	4a0c      	ldr	r2, [pc, #48]	@ (1004955c <I2C_ITListenCplt+0xb0>)
1004952c:	687b      	ldr	r3, [r7, #4]
1004952e:	0011      	movs	r1, r2
10049530:	0018      	movs	r0, r3
10049532:	f000 fa45 	bl	100499c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
10049536:	687b      	ldr	r3, [r7, #4]
10049538:	681b      	ldr	r3, [r3, #0]
1004953a:	2210      	movs	r2, #16
1004953c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
1004953e:	687b      	ldr	r3, [r7, #4]
10049540:	2240      	movs	r2, #64	@ 0x40
10049542:	2100      	movs	r1, #0
10049544:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
10049546:	687b      	ldr	r3, [r7, #4]
10049548:	0018      	movs	r0, r3
1004954a:	f7fe fe57 	bl	100481fc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
1004954e:	46c0      	nop			@ (mov r8, r8)
10049550:	46bd      	mov	sp, r7
10049552:	b002      	add	sp, #8
10049554:	bd80      	pop	{r7, pc}
10049556:	46c0      	nop			@ (mov r8, r8)
10049558:	ffff0000 	.word	0xffff0000
1004955c:	00008003 	.word	0x00008003

10049560 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
10049560:	b580      	push	{r7, lr}
10049562:	b084      	sub	sp, #16
10049564:	af00      	add	r7, sp, #0
10049566:	6078      	str	r0, [r7, #4]
10049568:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
1004956a:	200f      	movs	r0, #15
1004956c:	183b      	adds	r3, r7, r0
1004956e:	687a      	ldr	r2, [r7, #4]
10049570:	2141      	movs	r1, #65	@ 0x41
10049572:	5c52      	ldrb	r2, [r2, r1]
10049574:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
10049576:	687b      	ldr	r3, [r7, #4]
10049578:	2242      	movs	r2, #66	@ 0x42
1004957a:	2100      	movs	r1, #0
1004957c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
1004957e:	687b      	ldr	r3, [r7, #4]
10049580:	4a72      	ldr	r2, [pc, #456]	@ (1004974c <I2C_ITError+0x1ec>)
10049582:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
10049584:	687b      	ldr	r3, [r7, #4]
10049586:	2200      	movs	r2, #0
10049588:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
1004958a:	687b      	ldr	r3, [r7, #4]
1004958c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004958e:	683b      	ldr	r3, [r7, #0]
10049590:	431a      	orrs	r2, r3
10049592:	687b      	ldr	r3, [r7, #4]
10049594:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
10049596:	183b      	adds	r3, r7, r0
10049598:	781b      	ldrb	r3, [r3, #0]
1004959a:	2b28      	cmp	r3, #40	@ 0x28
1004959c:	d007      	beq.n	100495ae <I2C_ITError+0x4e>
1004959e:	183b      	adds	r3, r7, r0
100495a0:	781b      	ldrb	r3, [r3, #0]
100495a2:	2b29      	cmp	r3, #41	@ 0x29
100495a4:	d003      	beq.n	100495ae <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
100495a6:	183b      	adds	r3, r7, r0
100495a8:	781b      	ldrb	r3, [r3, #0]
100495aa:	2b2a      	cmp	r3, #42	@ 0x2a
100495ac:	d10c      	bne.n	100495c8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
100495ae:	687b      	ldr	r3, [r7, #4]
100495b0:	2103      	movs	r1, #3
100495b2:	0018      	movs	r0, r3
100495b4:	f000 fa04 	bl	100499c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
100495b8:	687b      	ldr	r3, [r7, #4]
100495ba:	2241      	movs	r2, #65	@ 0x41
100495bc:	2128      	movs	r1, #40	@ 0x28
100495be:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
100495c0:	687b      	ldr	r3, [r7, #4]
100495c2:	4a63      	ldr	r2, [pc, #396]	@ (10049750 <I2C_ITError+0x1f0>)
100495c4:	635a      	str	r2, [r3, #52]	@ 0x34
100495c6:	e032      	b.n	1004962e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
100495c8:	4a62      	ldr	r2, [pc, #392]	@ (10049754 <I2C_ITError+0x1f4>)
100495ca:	687b      	ldr	r3, [r7, #4]
100495cc:	0011      	movs	r1, r2
100495ce:	0018      	movs	r0, r3
100495d0:	f000 f9f6 	bl	100499c0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
100495d4:	687b      	ldr	r3, [r7, #4]
100495d6:	0018      	movs	r0, r3
100495d8:	f000 f8ed 	bl	100497b6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
100495dc:	687b      	ldr	r3, [r7, #4]
100495de:	2241      	movs	r2, #65	@ 0x41
100495e0:	5c9b      	ldrb	r3, [r3, r2]
100495e2:	b2db      	uxtb	r3, r3
100495e4:	2b60      	cmp	r3, #96	@ 0x60
100495e6:	d01f      	beq.n	10049628 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
100495e8:	687b      	ldr	r3, [r7, #4]
100495ea:	2241      	movs	r2, #65	@ 0x41
100495ec:	2120      	movs	r1, #32
100495ee:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
100495f0:	687b      	ldr	r3, [r7, #4]
100495f2:	681b      	ldr	r3, [r3, #0]
100495f4:	699b      	ldr	r3, [r3, #24]
100495f6:	2220      	movs	r2, #32
100495f8:	4013      	ands	r3, r2
100495fa:	2b20      	cmp	r3, #32
100495fc:	d114      	bne.n	10049628 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
100495fe:	687b      	ldr	r3, [r7, #4]
10049600:	681b      	ldr	r3, [r3, #0]
10049602:	699b      	ldr	r3, [r3, #24]
10049604:	2210      	movs	r2, #16
10049606:	4013      	ands	r3, r2
10049608:	2b10      	cmp	r3, #16
1004960a:	d109      	bne.n	10049620 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
1004960c:	687b      	ldr	r3, [r7, #4]
1004960e:	681b      	ldr	r3, [r3, #0]
10049610:	2210      	movs	r2, #16
10049612:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
10049614:	687b      	ldr	r3, [r7, #4]
10049616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
10049618:	2204      	movs	r2, #4
1004961a:	431a      	orrs	r2, r3
1004961c:	687b      	ldr	r3, [r7, #4]
1004961e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
10049620:	687b      	ldr	r3, [r7, #4]
10049622:	681b      	ldr	r3, [r3, #0]
10049624:	2220      	movs	r2, #32
10049626:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
10049628:	687b      	ldr	r3, [r7, #4]
1004962a:	2200      	movs	r2, #0
1004962c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
1004962e:	687b      	ldr	r3, [r7, #4]
10049630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10049632:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
10049634:	687b      	ldr	r3, [r7, #4]
10049636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049638:	2b00      	cmp	r3, #0
1004963a:	d03b      	beq.n	100496b4 <I2C_ITError+0x154>
1004963c:	68bb      	ldr	r3, [r7, #8]
1004963e:	2b11      	cmp	r3, #17
10049640:	d002      	beq.n	10049648 <I2C_ITError+0xe8>
10049642:	68bb      	ldr	r3, [r7, #8]
10049644:	2b21      	cmp	r3, #33	@ 0x21
10049646:	d135      	bne.n	100496b4 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
10049648:	687b      	ldr	r3, [r7, #4]
1004964a:	681b      	ldr	r3, [r3, #0]
1004964c:	681a      	ldr	r2, [r3, #0]
1004964e:	2380      	movs	r3, #128	@ 0x80
10049650:	01db      	lsls	r3, r3, #7
10049652:	401a      	ands	r2, r3
10049654:	2380      	movs	r3, #128	@ 0x80
10049656:	01db      	lsls	r3, r3, #7
10049658:	429a      	cmp	r2, r3
1004965a:	d107      	bne.n	1004966c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
1004965c:	687b      	ldr	r3, [r7, #4]
1004965e:	681b      	ldr	r3, [r3, #0]
10049660:	681a      	ldr	r2, [r3, #0]
10049662:	687b      	ldr	r3, [r7, #4]
10049664:	681b      	ldr	r3, [r3, #0]
10049666:	493c      	ldr	r1, [pc, #240]	@ (10049758 <I2C_ITError+0x1f8>)
10049668:	400a      	ands	r2, r1
1004966a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004966c:	687b      	ldr	r3, [r7, #4]
1004966e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049670:	0018      	movs	r0, r3
10049672:	f7fd febf 	bl	100473f4 <HAL_DMA_GetState>
10049676:	0003      	movs	r3, r0
10049678:	2b01      	cmp	r3, #1
1004967a:	d016      	beq.n	100496aa <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
1004967c:	687b      	ldr	r3, [r7, #4]
1004967e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049680:	4a36      	ldr	r2, [pc, #216]	@ (1004975c <I2C_ITError+0x1fc>)
10049682:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10049684:	687b      	ldr	r3, [r7, #4]
10049686:	2240      	movs	r2, #64	@ 0x40
10049688:	2100      	movs	r1, #0
1004968a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
1004968c:	687b      	ldr	r3, [r7, #4]
1004968e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049690:	0018      	movs	r0, r3
10049692:	f7fd fe68 	bl	10047366 <HAL_DMA_Abort_IT>
10049696:	1e03      	subs	r3, r0, #0
10049698:	d051      	beq.n	1004973e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
1004969a:	687b      	ldr	r3, [r7, #4]
1004969c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004969e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
100496a0:	687b      	ldr	r3, [r7, #4]
100496a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
100496a4:	0018      	movs	r0, r3
100496a6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100496a8:	e049      	b.n	1004973e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
100496aa:	687b      	ldr	r3, [r7, #4]
100496ac:	0018      	movs	r0, r3
100496ae:	f000 f859 	bl	10049764 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
100496b2:	e044      	b.n	1004973e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
100496b4:	687b      	ldr	r3, [r7, #4]
100496b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100496b8:	2b00      	cmp	r3, #0
100496ba:	d03b      	beq.n	10049734 <I2C_ITError+0x1d4>
100496bc:	68bb      	ldr	r3, [r7, #8]
100496be:	2b12      	cmp	r3, #18
100496c0:	d002      	beq.n	100496c8 <I2C_ITError+0x168>
100496c2:	68bb      	ldr	r3, [r7, #8]
100496c4:	2b22      	cmp	r3, #34	@ 0x22
100496c6:	d135      	bne.n	10049734 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
100496c8:	687b      	ldr	r3, [r7, #4]
100496ca:	681b      	ldr	r3, [r3, #0]
100496cc:	681a      	ldr	r2, [r3, #0]
100496ce:	2380      	movs	r3, #128	@ 0x80
100496d0:	021b      	lsls	r3, r3, #8
100496d2:	401a      	ands	r2, r3
100496d4:	2380      	movs	r3, #128	@ 0x80
100496d6:	021b      	lsls	r3, r3, #8
100496d8:	429a      	cmp	r2, r3
100496da:	d107      	bne.n	100496ec <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
100496dc:	687b      	ldr	r3, [r7, #4]
100496de:	681b      	ldr	r3, [r3, #0]
100496e0:	681a      	ldr	r2, [r3, #0]
100496e2:	687b      	ldr	r3, [r7, #4]
100496e4:	681b      	ldr	r3, [r3, #0]
100496e6:	491e      	ldr	r1, [pc, #120]	@ (10049760 <I2C_ITError+0x200>)
100496e8:	400a      	ands	r2, r1
100496ea:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
100496ec:	687b      	ldr	r3, [r7, #4]
100496ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
100496f0:	0018      	movs	r0, r3
100496f2:	f7fd fe7f 	bl	100473f4 <HAL_DMA_GetState>
100496f6:	0003      	movs	r3, r0
100496f8:	2b01      	cmp	r3, #1
100496fa:	d016      	beq.n	1004972a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
100496fc:	687b      	ldr	r3, [r7, #4]
100496fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049700:	4a16      	ldr	r2, [pc, #88]	@ (1004975c <I2C_ITError+0x1fc>)
10049702:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
10049704:	687b      	ldr	r3, [r7, #4]
10049706:	2240      	movs	r2, #64	@ 0x40
10049708:	2100      	movs	r1, #0
1004970a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
1004970c:	687b      	ldr	r3, [r7, #4]
1004970e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049710:	0018      	movs	r0, r3
10049712:	f7fd fe28 	bl	10047366 <HAL_DMA_Abort_IT>
10049716:	1e03      	subs	r3, r0, #0
10049718:	d013      	beq.n	10049742 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
1004971a:	687b      	ldr	r3, [r7, #4]
1004971c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004971e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
10049720:	687b      	ldr	r3, [r7, #4]
10049722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049724:	0018      	movs	r0, r3
10049726:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10049728:	e00b      	b.n	10049742 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
1004972a:	687b      	ldr	r3, [r7, #4]
1004972c:	0018      	movs	r0, r3
1004972e:	f000 f819 	bl	10049764 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10049732:	e006      	b.n	10049742 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
10049734:	687b      	ldr	r3, [r7, #4]
10049736:	0018      	movs	r0, r3
10049738:	f000 f814 	bl	10049764 <I2C_TreatErrorCallback>
  }
}
1004973c:	e002      	b.n	10049744 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
1004973e:	46c0      	nop			@ (mov r8, r8)
10049740:	e000      	b.n	10049744 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
10049742:	46c0      	nop			@ (mov r8, r8)
}
10049744:	46c0      	nop			@ (mov r8, r8)
10049746:	46bd      	mov	sp, r7
10049748:	b004      	add	sp, #16
1004974a:	bd80      	pop	{r7, pc}
1004974c:	ffff0000 	.word	0xffff0000
10049750:	100484a1 	.word	0x100484a1
10049754:	00008003 	.word	0x00008003
10049758:	ffffbfff 	.word	0xffffbfff
1004975c:	100497fb 	.word	0x100497fb
10049760:	ffff7fff 	.word	0xffff7fff

10049764 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
10049764:	b580      	push	{r7, lr}
10049766:	b082      	sub	sp, #8
10049768:	af00      	add	r7, sp, #0
1004976a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
1004976c:	687b      	ldr	r3, [r7, #4]
1004976e:	2241      	movs	r2, #65	@ 0x41
10049770:	5c9b      	ldrb	r3, [r3, r2]
10049772:	b2db      	uxtb	r3, r3
10049774:	2b60      	cmp	r3, #96	@ 0x60
10049776:	d10f      	bne.n	10049798 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
10049778:	687b      	ldr	r3, [r7, #4]
1004977a:	2241      	movs	r2, #65	@ 0x41
1004977c:	2120      	movs	r1, #32
1004977e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
10049780:	687b      	ldr	r3, [r7, #4]
10049782:	2200      	movs	r2, #0
10049784:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10049786:	687b      	ldr	r3, [r7, #4]
10049788:	2240      	movs	r2, #64	@ 0x40
1004978a:	2100      	movs	r1, #0
1004978c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
1004978e:	687b      	ldr	r3, [r7, #4]
10049790:	0018      	movs	r0, r3
10049792:	f7fe fd43 	bl	1004821c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
10049796:	e00a      	b.n	100497ae <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
10049798:	687b      	ldr	r3, [r7, #4]
1004979a:	2200      	movs	r2, #0
1004979c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
1004979e:	687b      	ldr	r3, [r7, #4]
100497a0:	2240      	movs	r2, #64	@ 0x40
100497a2:	2100      	movs	r1, #0
100497a4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
100497a6:	687b      	ldr	r3, [r7, #4]
100497a8:	0018      	movs	r0, r3
100497aa:	f7fe fd2f 	bl	1004820c <HAL_I2C_ErrorCallback>
}
100497ae:	46c0      	nop			@ (mov r8, r8)
100497b0:	46bd      	mov	sp, r7
100497b2:	b002      	add	sp, #8
100497b4:	bd80      	pop	{r7, pc}

100497b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
100497b6:	b580      	push	{r7, lr}
100497b8:	b082      	sub	sp, #8
100497ba:	af00      	add	r7, sp, #0
100497bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
100497be:	687b      	ldr	r3, [r7, #4]
100497c0:	681b      	ldr	r3, [r3, #0]
100497c2:	699b      	ldr	r3, [r3, #24]
100497c4:	2202      	movs	r2, #2
100497c6:	4013      	ands	r3, r2
100497c8:	2b02      	cmp	r3, #2
100497ca:	d103      	bne.n	100497d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
100497cc:	687b      	ldr	r3, [r7, #4]
100497ce:	681b      	ldr	r3, [r3, #0]
100497d0:	2200      	movs	r2, #0
100497d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
100497d4:	687b      	ldr	r3, [r7, #4]
100497d6:	681b      	ldr	r3, [r3, #0]
100497d8:	699b      	ldr	r3, [r3, #24]
100497da:	2201      	movs	r2, #1
100497dc:	4013      	ands	r3, r2
100497de:	2b01      	cmp	r3, #1
100497e0:	d007      	beq.n	100497f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
100497e2:	687b      	ldr	r3, [r7, #4]
100497e4:	681b      	ldr	r3, [r3, #0]
100497e6:	699a      	ldr	r2, [r3, #24]
100497e8:	687b      	ldr	r3, [r7, #4]
100497ea:	681b      	ldr	r3, [r3, #0]
100497ec:	2101      	movs	r1, #1
100497ee:	430a      	orrs	r2, r1
100497f0:	619a      	str	r2, [r3, #24]
  }
}
100497f2:	46c0      	nop			@ (mov r8, r8)
100497f4:	46bd      	mov	sp, r7
100497f6:	b002      	add	sp, #8
100497f8:	bd80      	pop	{r7, pc}

100497fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
100497fa:	b580      	push	{r7, lr}
100497fc:	b084      	sub	sp, #16
100497fe:	af00      	add	r7, sp, #0
10049800:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
10049802:	687b      	ldr	r3, [r7, #4]
10049804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10049806:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
10049808:	68fb      	ldr	r3, [r7, #12]
1004980a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004980c:	2b00      	cmp	r3, #0
1004980e:	d003      	beq.n	10049818 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
10049810:	68fb      	ldr	r3, [r7, #12]
10049812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
10049814:	2200      	movs	r2, #0
10049816:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
10049818:	68fb      	ldr	r3, [r7, #12]
1004981a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1004981c:	2b00      	cmp	r3, #0
1004981e:	d003      	beq.n	10049828 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
10049820:	68fb      	ldr	r3, [r7, #12]
10049822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10049824:	2200      	movs	r2, #0
10049826:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
10049828:	68fb      	ldr	r3, [r7, #12]
1004982a:	0018      	movs	r0, r3
1004982c:	f7ff ff9a 	bl	10049764 <I2C_TreatErrorCallback>
}
10049830:	46c0      	nop			@ (mov r8, r8)
10049832:	46bd      	mov	sp, r7
10049834:	b004      	add	sp, #16
10049836:	bd80      	pop	{r7, pc}

10049838 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
10049838:	b590      	push	{r4, r7, lr}
1004983a:	b087      	sub	sp, #28
1004983c:	af00      	add	r7, sp, #0
1004983e:	60f8      	str	r0, [r7, #12]
10049840:	0008      	movs	r0, r1
10049842:	0011      	movs	r1, r2
10049844:	607b      	str	r3, [r7, #4]
10049846:	240a      	movs	r4, #10
10049848:	193b      	adds	r3, r7, r4
1004984a:	1c02      	adds	r2, r0, #0
1004984c:	801a      	strh	r2, [r3, #0]
1004984e:	2009      	movs	r0, #9
10049850:	183b      	adds	r3, r7, r0
10049852:	1c0a      	adds	r2, r1, #0
10049854:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10049856:	193b      	adds	r3, r7, r4
10049858:	881b      	ldrh	r3, [r3, #0]
1004985a:	059b      	lsls	r3, r3, #22
1004985c:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
1004985e:	183b      	adds	r3, r7, r0
10049860:	781b      	ldrb	r3, [r3, #0]
10049862:	0419      	lsls	r1, r3, #16
10049864:	23ff      	movs	r3, #255	@ 0xff
10049866:	041b      	lsls	r3, r3, #16
10049868:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
1004986a:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
1004986c:	687b      	ldr	r3, [r7, #4]
1004986e:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
10049870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
10049872:	4313      	orrs	r3, r2
10049874:	005b      	lsls	r3, r3, #1
10049876:	085b      	lsrs	r3, r3, #1
10049878:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
1004987a:	68fb      	ldr	r3, [r7, #12]
1004987c:	681b      	ldr	r3, [r3, #0]
1004987e:	685b      	ldr	r3, [r3, #4]
10049880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
10049882:	0d51      	lsrs	r1, r2, #21
10049884:	2280      	movs	r2, #128	@ 0x80
10049886:	00d2      	lsls	r2, r2, #3
10049888:	400a      	ands	r2, r1
1004988a:	4907      	ldr	r1, [pc, #28]	@ (100498a8 <I2C_TransferConfig+0x70>)
1004988c:	430a      	orrs	r2, r1
1004988e:	43d2      	mvns	r2, r2
10049890:	401a      	ands	r2, r3
10049892:	0011      	movs	r1, r2
10049894:	68fb      	ldr	r3, [r7, #12]
10049896:	681b      	ldr	r3, [r3, #0]
10049898:	697a      	ldr	r2, [r7, #20]
1004989a:	430a      	orrs	r2, r1
1004989c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
1004989e:	46c0      	nop			@ (mov r8, r8)
100498a0:	46bd      	mov	sp, r7
100498a2:	b007      	add	sp, #28
100498a4:	bd90      	pop	{r4, r7, pc}
100498a6:	46c0      	nop			@ (mov r8, r8)
100498a8:	03ff63ff 	.word	0x03ff63ff

100498ac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
100498ac:	b580      	push	{r7, lr}
100498ae:	b084      	sub	sp, #16
100498b0:	af00      	add	r7, sp, #0
100498b2:	6078      	str	r0, [r7, #4]
100498b4:	000a      	movs	r2, r1
100498b6:	1cbb      	adds	r3, r7, #2
100498b8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
100498ba:	2300      	movs	r3, #0
100498bc:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
100498be:	687b      	ldr	r3, [r7, #4]
100498c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100498c2:	4b3c      	ldr	r3, [pc, #240]	@ (100499b4 <I2C_Enable_IRQ+0x108>)
100498c4:	429a      	cmp	r2, r3
100498c6:	d035      	beq.n	10049934 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
100498c8:	687b      	ldr	r3, [r7, #4]
100498ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
100498cc:	4b3a      	ldr	r3, [pc, #232]	@ (100499b8 <I2C_Enable_IRQ+0x10c>)
100498ce:	429a      	cmp	r2, r3
100498d0:	d030      	beq.n	10049934 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
100498d2:	687b      	ldr	r3, [r7, #4]
100498d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
100498d6:	4b39      	ldr	r3, [pc, #228]	@ (100499bc <I2C_Enable_IRQ+0x110>)
100498d8:	429a      	cmp	r2, r3
100498da:	d02b      	beq.n	10049934 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
100498dc:	1cbb      	adds	r3, r7, #2
100498de:	2200      	movs	r2, #0
100498e0:	5e9b      	ldrsh	r3, [r3, r2]
100498e2:	2b00      	cmp	r3, #0
100498e4:	da03      	bge.n	100498ee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100498e6:	68fb      	ldr	r3, [r7, #12]
100498e8:	22b8      	movs	r2, #184	@ 0xb8
100498ea:	4313      	orrs	r3, r2
100498ec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
100498ee:	1cbb      	adds	r3, r7, #2
100498f0:	881b      	ldrh	r3, [r3, #0]
100498f2:	2201      	movs	r2, #1
100498f4:	4013      	ands	r3, r2
100498f6:	d003      	beq.n	10049900 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
100498f8:	68fb      	ldr	r3, [r7, #12]
100498fa:	22f2      	movs	r2, #242	@ 0xf2
100498fc:	4313      	orrs	r3, r2
100498fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10049900:	1cbb      	adds	r3, r7, #2
10049902:	881b      	ldrh	r3, [r3, #0]
10049904:	2202      	movs	r2, #2
10049906:	4013      	ands	r3, r2
10049908:	d003      	beq.n	10049912 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
1004990a:	68fb      	ldr	r3, [r7, #12]
1004990c:	22f4      	movs	r2, #244	@ 0xf4
1004990e:	4313      	orrs	r3, r2
10049910:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
10049912:	1cbb      	adds	r3, r7, #2
10049914:	881b      	ldrh	r3, [r3, #0]
10049916:	2b10      	cmp	r3, #16
10049918:	d103      	bne.n	10049922 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
1004991a:	68fb      	ldr	r3, [r7, #12]
1004991c:	2290      	movs	r2, #144	@ 0x90
1004991e:	4313      	orrs	r3, r2
10049920:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
10049922:	1cbb      	adds	r3, r7, #2
10049924:	881b      	ldrh	r3, [r3, #0]
10049926:	2b20      	cmp	r3, #32
10049928:	d137      	bne.n	1004999a <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
1004992a:	68fb      	ldr	r3, [r7, #12]
1004992c:	2220      	movs	r2, #32
1004992e:	4313      	orrs	r3, r2
10049930:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
10049932:	e032      	b.n	1004999a <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10049934:	1cbb      	adds	r3, r7, #2
10049936:	2200      	movs	r2, #0
10049938:	5e9b      	ldrsh	r3, [r3, r2]
1004993a:	2b00      	cmp	r3, #0
1004993c:	da03      	bge.n	10049946 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
1004993e:	68fb      	ldr	r3, [r7, #12]
10049940:	22b8      	movs	r2, #184	@ 0xb8
10049942:	4313      	orrs	r3, r2
10049944:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
10049946:	1cbb      	adds	r3, r7, #2
10049948:	881b      	ldrh	r3, [r3, #0]
1004994a:	2201      	movs	r2, #1
1004994c:	4013      	ands	r3, r2
1004994e:	d003      	beq.n	10049958 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
10049950:	68fb      	ldr	r3, [r7, #12]
10049952:	22f2      	movs	r2, #242	@ 0xf2
10049954:	4313      	orrs	r3, r2
10049956:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
10049958:	1cbb      	adds	r3, r7, #2
1004995a:	881b      	ldrh	r3, [r3, #0]
1004995c:	2202      	movs	r2, #2
1004995e:	4013      	ands	r3, r2
10049960:	d003      	beq.n	1004996a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
10049962:	68fb      	ldr	r3, [r7, #12]
10049964:	22f4      	movs	r2, #244	@ 0xf4
10049966:	4313      	orrs	r3, r2
10049968:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
1004996a:	1cbb      	adds	r3, r7, #2
1004996c:	881b      	ldrh	r3, [r3, #0]
1004996e:	2b10      	cmp	r3, #16
10049970:	d103      	bne.n	1004997a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10049972:	68fb      	ldr	r3, [r7, #12]
10049974:	2290      	movs	r2, #144	@ 0x90
10049976:	4313      	orrs	r3, r2
10049978:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
1004997a:	1cbb      	adds	r3, r7, #2
1004997c:	881b      	ldrh	r3, [r3, #0]
1004997e:	2b20      	cmp	r3, #32
10049980:	d103      	bne.n	1004998a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
10049982:	68fb      	ldr	r3, [r7, #12]
10049984:	2260      	movs	r2, #96	@ 0x60
10049986:	4313      	orrs	r3, r2
10049988:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
1004998a:	1cbb      	adds	r3, r7, #2
1004998c:	881b      	ldrh	r3, [r3, #0]
1004998e:	2b40      	cmp	r3, #64	@ 0x40
10049990:	d103      	bne.n	1004999a <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
10049992:	68fb      	ldr	r3, [r7, #12]
10049994:	2240      	movs	r2, #64	@ 0x40
10049996:	4313      	orrs	r3, r2
10049998:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
1004999a:	687b      	ldr	r3, [r7, #4]
1004999c:	681b      	ldr	r3, [r3, #0]
1004999e:	6819      	ldr	r1, [r3, #0]
100499a0:	687b      	ldr	r3, [r7, #4]
100499a2:	681b      	ldr	r3, [r3, #0]
100499a4:	68fa      	ldr	r2, [r7, #12]
100499a6:	430a      	orrs	r2, r1
100499a8:	601a      	str	r2, [r3, #0]
}
100499aa:	46c0      	nop			@ (mov r8, r8)
100499ac:	46bd      	mov	sp, r7
100499ae:	b004      	add	sp, #16
100499b0:	bd80      	pop	{r7, pc}
100499b2:	46c0      	nop			@ (mov r8, r8)
100499b4:	100486c9 	.word	0x100486c9
100499b8:	10048b61 	.word	0x10048b61
100499bc:	100488e1 	.word	0x100488e1

100499c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
100499c0:	b580      	push	{r7, lr}
100499c2:	b084      	sub	sp, #16
100499c4:	af00      	add	r7, sp, #0
100499c6:	6078      	str	r0, [r7, #4]
100499c8:	000a      	movs	r2, r1
100499ca:	1cbb      	adds	r3, r7, #2
100499cc:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
100499ce:	2300      	movs	r3, #0
100499d0:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
100499d2:	1cbb      	adds	r3, r7, #2
100499d4:	881b      	ldrh	r3, [r3, #0]
100499d6:	2201      	movs	r2, #1
100499d8:	4013      	ands	r3, r2
100499da:	d010      	beq.n	100499fe <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
100499dc:	68fb      	ldr	r3, [r7, #12]
100499de:	2242      	movs	r2, #66	@ 0x42
100499e0:	4313      	orrs	r3, r2
100499e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
100499e4:	687b      	ldr	r3, [r7, #4]
100499e6:	2241      	movs	r2, #65	@ 0x41
100499e8:	5c9b      	ldrb	r3, [r3, r2]
100499ea:	b2db      	uxtb	r3, r3
100499ec:	001a      	movs	r2, r3
100499ee:	2328      	movs	r3, #40	@ 0x28
100499f0:	4013      	ands	r3, r2
100499f2:	2b28      	cmp	r3, #40	@ 0x28
100499f4:	d003      	beq.n	100499fe <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
100499f6:	68fb      	ldr	r3, [r7, #12]
100499f8:	22b0      	movs	r2, #176	@ 0xb0
100499fa:	4313      	orrs	r3, r2
100499fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
100499fe:	1cbb      	adds	r3, r7, #2
10049a00:	881b      	ldrh	r3, [r3, #0]
10049a02:	2202      	movs	r2, #2
10049a04:	4013      	ands	r3, r2
10049a06:	d010      	beq.n	10049a2a <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
10049a08:	68fb      	ldr	r3, [r7, #12]
10049a0a:	2244      	movs	r2, #68	@ 0x44
10049a0c:	4313      	orrs	r3, r2
10049a0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
10049a10:	687b      	ldr	r3, [r7, #4]
10049a12:	2241      	movs	r2, #65	@ 0x41
10049a14:	5c9b      	ldrb	r3, [r3, r2]
10049a16:	b2db      	uxtb	r3, r3
10049a18:	001a      	movs	r2, r3
10049a1a:	2328      	movs	r3, #40	@ 0x28
10049a1c:	4013      	ands	r3, r2
10049a1e:	2b28      	cmp	r3, #40	@ 0x28
10049a20:	d003      	beq.n	10049a2a <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10049a22:	68fb      	ldr	r3, [r7, #12]
10049a24:	22b0      	movs	r2, #176	@ 0xb0
10049a26:	4313      	orrs	r3, r2
10049a28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
10049a2a:	1cbb      	adds	r3, r7, #2
10049a2c:	2200      	movs	r2, #0
10049a2e:	5e9b      	ldrsh	r3, [r3, r2]
10049a30:	2b00      	cmp	r3, #0
10049a32:	da03      	bge.n	10049a3c <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
10049a34:	68fb      	ldr	r3, [r7, #12]
10049a36:	22b8      	movs	r2, #184	@ 0xb8
10049a38:	4313      	orrs	r3, r2
10049a3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
10049a3c:	1cbb      	adds	r3, r7, #2
10049a3e:	881b      	ldrh	r3, [r3, #0]
10049a40:	2b10      	cmp	r3, #16
10049a42:	d103      	bne.n	10049a4c <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
10049a44:	68fb      	ldr	r3, [r7, #12]
10049a46:	2290      	movs	r2, #144	@ 0x90
10049a48:	4313      	orrs	r3, r2
10049a4a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
10049a4c:	1cbb      	adds	r3, r7, #2
10049a4e:	881b      	ldrh	r3, [r3, #0]
10049a50:	2b20      	cmp	r3, #32
10049a52:	d103      	bne.n	10049a5c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
10049a54:	68fb      	ldr	r3, [r7, #12]
10049a56:	2220      	movs	r2, #32
10049a58:	4313      	orrs	r3, r2
10049a5a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
10049a5c:	1cbb      	adds	r3, r7, #2
10049a5e:	881b      	ldrh	r3, [r3, #0]
10049a60:	2b40      	cmp	r3, #64	@ 0x40
10049a62:	d103      	bne.n	10049a6c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
10049a64:	68fb      	ldr	r3, [r7, #12]
10049a66:	2240      	movs	r2, #64	@ 0x40
10049a68:	4313      	orrs	r3, r2
10049a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
10049a6c:	687b      	ldr	r3, [r7, #4]
10049a6e:	681b      	ldr	r3, [r3, #0]
10049a70:	681a      	ldr	r2, [r3, #0]
10049a72:	68fb      	ldr	r3, [r7, #12]
10049a74:	43d9      	mvns	r1, r3
10049a76:	687b      	ldr	r3, [r7, #4]
10049a78:	681b      	ldr	r3, [r3, #0]
10049a7a:	400a      	ands	r2, r1
10049a7c:	601a      	str	r2, [r3, #0]
}
10049a7e:	46c0      	nop			@ (mov r8, r8)
10049a80:	46bd      	mov	sp, r7
10049a82:	b004      	add	sp, #16
10049a84:	bd80      	pop	{r7, pc}
	...

10049a88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
10049a88:	b580      	push	{r7, lr}
10049a8a:	b082      	sub	sp, #8
10049a8c:	af00      	add	r7, sp, #0
10049a8e:	6078      	str	r0, [r7, #4]
10049a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10049a92:	687b      	ldr	r3, [r7, #4]
10049a94:	2241      	movs	r2, #65	@ 0x41
10049a96:	5c9b      	ldrb	r3, [r3, r2]
10049a98:	b2db      	uxtb	r3, r3
10049a9a:	2b20      	cmp	r3, #32
10049a9c:	d138      	bne.n	10049b10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10049a9e:	687b      	ldr	r3, [r7, #4]
10049aa0:	2240      	movs	r2, #64	@ 0x40
10049aa2:	5c9b      	ldrb	r3, [r3, r2]
10049aa4:	2b01      	cmp	r3, #1
10049aa6:	d101      	bne.n	10049aac <HAL_I2CEx_ConfigAnalogFilter+0x24>
10049aa8:	2302      	movs	r3, #2
10049aaa:	e032      	b.n	10049b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
10049aac:	687b      	ldr	r3, [r7, #4]
10049aae:	2240      	movs	r2, #64	@ 0x40
10049ab0:	2101      	movs	r1, #1
10049ab2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10049ab4:	687b      	ldr	r3, [r7, #4]
10049ab6:	2241      	movs	r2, #65	@ 0x41
10049ab8:	2124      	movs	r1, #36	@ 0x24
10049aba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10049abc:	687b      	ldr	r3, [r7, #4]
10049abe:	681b      	ldr	r3, [r3, #0]
10049ac0:	681a      	ldr	r2, [r3, #0]
10049ac2:	687b      	ldr	r3, [r7, #4]
10049ac4:	681b      	ldr	r3, [r3, #0]
10049ac6:	2101      	movs	r1, #1
10049ac8:	438a      	bics	r2, r1
10049aca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
10049acc:	687b      	ldr	r3, [r7, #4]
10049ace:	681b      	ldr	r3, [r3, #0]
10049ad0:	681a      	ldr	r2, [r3, #0]
10049ad2:	687b      	ldr	r3, [r7, #4]
10049ad4:	681b      	ldr	r3, [r3, #0]
10049ad6:	4911      	ldr	r1, [pc, #68]	@ (10049b1c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
10049ad8:	400a      	ands	r2, r1
10049ada:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
10049adc:	687b      	ldr	r3, [r7, #4]
10049ade:	681b      	ldr	r3, [r3, #0]
10049ae0:	6819      	ldr	r1, [r3, #0]
10049ae2:	687b      	ldr	r3, [r7, #4]
10049ae4:	681b      	ldr	r3, [r3, #0]
10049ae6:	683a      	ldr	r2, [r7, #0]
10049ae8:	430a      	orrs	r2, r1
10049aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10049aec:	687b      	ldr	r3, [r7, #4]
10049aee:	681b      	ldr	r3, [r3, #0]
10049af0:	681a      	ldr	r2, [r3, #0]
10049af2:	687b      	ldr	r3, [r7, #4]
10049af4:	681b      	ldr	r3, [r3, #0]
10049af6:	2101      	movs	r1, #1
10049af8:	430a      	orrs	r2, r1
10049afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10049afc:	687b      	ldr	r3, [r7, #4]
10049afe:	2241      	movs	r2, #65	@ 0x41
10049b00:	2120      	movs	r1, #32
10049b02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10049b04:	687b      	ldr	r3, [r7, #4]
10049b06:	2240      	movs	r2, #64	@ 0x40
10049b08:	2100      	movs	r1, #0
10049b0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10049b0c:	2300      	movs	r3, #0
10049b0e:	e000      	b.n	10049b12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
10049b10:	2302      	movs	r3, #2
  }
}
10049b12:	0018      	movs	r0, r3
10049b14:	46bd      	mov	sp, r7
10049b16:	b002      	add	sp, #8
10049b18:	bd80      	pop	{r7, pc}
10049b1a:	46c0      	nop			@ (mov r8, r8)
10049b1c:	ffffefff 	.word	0xffffefff

10049b20 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
10049b20:	b580      	push	{r7, lr}
10049b22:	b084      	sub	sp, #16
10049b24:	af00      	add	r7, sp, #0
10049b26:	6078      	str	r0, [r7, #4]
10049b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
10049b2a:	687b      	ldr	r3, [r7, #4]
10049b2c:	2241      	movs	r2, #65	@ 0x41
10049b2e:	5c9b      	ldrb	r3, [r3, r2]
10049b30:	b2db      	uxtb	r3, r3
10049b32:	2b20      	cmp	r3, #32
10049b34:	d139      	bne.n	10049baa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
10049b36:	687b      	ldr	r3, [r7, #4]
10049b38:	2240      	movs	r2, #64	@ 0x40
10049b3a:	5c9b      	ldrb	r3, [r3, r2]
10049b3c:	2b01      	cmp	r3, #1
10049b3e:	d101      	bne.n	10049b44 <HAL_I2CEx_ConfigDigitalFilter+0x24>
10049b40:	2302      	movs	r3, #2
10049b42:	e033      	b.n	10049bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
10049b44:	687b      	ldr	r3, [r7, #4]
10049b46:	2240      	movs	r2, #64	@ 0x40
10049b48:	2101      	movs	r1, #1
10049b4a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
10049b4c:	687b      	ldr	r3, [r7, #4]
10049b4e:	2241      	movs	r2, #65	@ 0x41
10049b50:	2124      	movs	r1, #36	@ 0x24
10049b52:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
10049b54:	687b      	ldr	r3, [r7, #4]
10049b56:	681b      	ldr	r3, [r3, #0]
10049b58:	681a      	ldr	r2, [r3, #0]
10049b5a:	687b      	ldr	r3, [r7, #4]
10049b5c:	681b      	ldr	r3, [r3, #0]
10049b5e:	2101      	movs	r1, #1
10049b60:	438a      	bics	r2, r1
10049b62:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
10049b64:	687b      	ldr	r3, [r7, #4]
10049b66:	681b      	ldr	r3, [r3, #0]
10049b68:	681b      	ldr	r3, [r3, #0]
10049b6a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
10049b6c:	68fb      	ldr	r3, [r7, #12]
10049b6e:	4a11      	ldr	r2, [pc, #68]	@ (10049bb4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
10049b70:	4013      	ands	r3, r2
10049b72:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
10049b74:	683b      	ldr	r3, [r7, #0]
10049b76:	021b      	lsls	r3, r3, #8
10049b78:	68fa      	ldr	r2, [r7, #12]
10049b7a:	4313      	orrs	r3, r2
10049b7c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
10049b7e:	687b      	ldr	r3, [r7, #4]
10049b80:	681b      	ldr	r3, [r3, #0]
10049b82:	68fa      	ldr	r2, [r7, #12]
10049b84:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
10049b86:	687b      	ldr	r3, [r7, #4]
10049b88:	681b      	ldr	r3, [r3, #0]
10049b8a:	681a      	ldr	r2, [r3, #0]
10049b8c:	687b      	ldr	r3, [r7, #4]
10049b8e:	681b      	ldr	r3, [r3, #0]
10049b90:	2101      	movs	r1, #1
10049b92:	430a      	orrs	r2, r1
10049b94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
10049b96:	687b      	ldr	r3, [r7, #4]
10049b98:	2241      	movs	r2, #65	@ 0x41
10049b9a:	2120      	movs	r1, #32
10049b9c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
10049b9e:	687b      	ldr	r3, [r7, #4]
10049ba0:	2240      	movs	r2, #64	@ 0x40
10049ba2:	2100      	movs	r1, #0
10049ba4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
10049ba6:	2300      	movs	r3, #0
10049ba8:	e000      	b.n	10049bac <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
10049baa:	2302      	movs	r3, #2
  }
}
10049bac:	0018      	movs	r0, r3
10049bae:	46bd      	mov	sp, r7
10049bb0:	b004      	add	sp, #16
10049bb2:	bd80      	pop	{r7, pc}
10049bb4:	fffff0ff 	.word	0xfffff0ff

10049bb8 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
10049bb8:	b580      	push	{r7, lr}
10049bba:	b084      	sub	sp, #16
10049bbc:	af00      	add	r7, sp, #0
10049bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
10049bc0:	230f      	movs	r3, #15
10049bc2:	18fb      	adds	r3, r7, r3
10049bc4:	2200      	movs	r2, #0
10049bc6:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB05)|| defined(STM32WB09)
  uint32_t tickstart;
#endif /* STM32WB05 || STM32WB09 */
  /* Check the PKA handle allocation */
  if (hpka != NULL)
10049bc8:	687b      	ldr	r3, [r7, #4]
10049bca:	2b00      	cmp	r3, #0
10049bcc:	d045      	beq.n	10049c5a <HAL_PKA_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
10049bce:	687b      	ldr	r3, [r7, #4]
10049bd0:	791b      	ldrb	r3, [r3, #4]
10049bd2:	b2db      	uxtb	r3, r3
10049bd4:	2b00      	cmp	r3, #0
10049bd6:	d103      	bne.n	10049be0 <HAL_PKA_Init+0x28>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
10049bd8:	687b      	ldr	r3, [r7, #4]
10049bda:	0018      	movs	r0, r3
10049bdc:	f7fc fc58 	bl	10046490 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }
#if defined (STM32WB05)|| defined(STM32WB09)
    /* Get current tick */
    tickstart = HAL_GetTick();
10049be0:	f7fd fa6c 	bl	100470bc <HAL_GetTick>
10049be4:	0003      	movs	r3, r0
10049be6:	60bb      	str	r3, [r7, #8]
#endif /* STM32WB05 || STM32WB09 */
    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
10049be8:	687b      	ldr	r3, [r7, #4]
10049bea:	2202      	movs	r2, #2
10049bec:	711a      	strb	r2, [r3, #4]
    SET_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
    CLEAR_BIT(hpka->Instance->CSR, PKA_CSR_SFT_RST);
#endif /* STM32WB06 || STM32WB07 */
#if defined (STM32WB05)|| defined(STM32WB09)

    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
10049bee:	e011      	b.n	10049c14 <HAL_PKA_Init+0x5c>
    {
      hpka->Instance->CR = PKA_CR_EN;
10049bf0:	687b      	ldr	r3, [r7, #4]
10049bf2:	681b      	ldr	r3, [r3, #0]
10049bf4:	2201      	movs	r2, #1
10049bf6:	601a      	str	r2, [r3, #0]

      /* Check the Timeout */
      if ((HAL_GetTick() - tickstart) > PKA_RAM_ERASE_TIMEOUT)
10049bf8:	f7fd fa60 	bl	100470bc <HAL_GetTick>
10049bfc:	0002      	movs	r2, r0
10049bfe:	68bb      	ldr	r3, [r7, #8]
10049c00:	1ad2      	subs	r2, r2, r3
10049c02:	23fa      	movs	r3, #250	@ 0xfa
10049c04:	009b      	lsls	r3, r3, #2
10049c06:	429a      	cmp	r2, r3
10049c08:	d904      	bls.n	10049c14 <HAL_PKA_Init+0x5c>
      {
        /* Set timeout status */
        err = HAL_TIMEOUT;
10049c0a:	230f      	movs	r3, #15
10049c0c:	18fb      	adds	r3, r7, r3
10049c0e:	2203      	movs	r2, #3
10049c10:	701a      	strb	r2, [r3, #0]
        break;
10049c12:	e006      	b.n	10049c22 <HAL_PKA_Init+0x6a>
    while ((hpka->Instance->CR & PKA_CR_EN) != PKA_CR_EN)
10049c14:	687b      	ldr	r3, [r7, #4]
10049c16:	681b      	ldr	r3, [r3, #0]
10049c18:	681b      	ldr	r3, [r3, #0]
10049c1a:	2201      	movs	r2, #1
10049c1c:	4013      	ands	r3, r2
10049c1e:	2b01      	cmp	r3, #1
10049c20:	d1e6      	bne.n	10049bf0 <HAL_PKA_Init+0x38>
      }
    }
    if (err == HAL_OK)
10049c22:	230f      	movs	r3, #15
10049c24:	18fb      	adds	r3, r7, r3
10049c26:	781b      	ldrb	r3, [r3, #0]
10049c28:	2b00      	cmp	r3, #0
10049c2a:	d10f      	bne.n	10049c4c <HAL_PKA_Init+0x94>
    {
      /* Reset any pending flag */
      SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
10049c2c:	687b      	ldr	r3, [r7, #4]
10049c2e:	681b      	ldr	r3, [r3, #0]
10049c30:	689a      	ldr	r2, [r3, #8]
10049c32:	687b      	ldr	r3, [r7, #4]
10049c34:	681b      	ldr	r3, [r3, #0]
10049c36:	21d0      	movs	r1, #208	@ 0xd0
10049c38:	0349      	lsls	r1, r1, #13
10049c3a:	430a      	orrs	r2, r1
10049c3c:	609a      	str	r2, [r3, #8]

      /* Initialize the error code */
      hpka->ErrorCode = HAL_PKA_ERROR_NONE;
10049c3e:	687b      	ldr	r3, [r7, #4]
10049c40:	2200      	movs	r2, #0
10049c42:	609a      	str	r2, [r3, #8]

      /* Set the state to ready */
      hpka->State = HAL_PKA_STATE_READY;
10049c44:	687b      	ldr	r3, [r7, #4]
10049c46:	2201      	movs	r2, #1
10049c48:	711a      	strb	r2, [r3, #4]
10049c4a:	e00a      	b.n	10049c62 <HAL_PKA_Init+0xaa>
    }
    else
    {
      /* Set the error code to timeout error */
      hpka->ErrorCode = HAL_PKA_ERROR_TIMEOUT;
10049c4c:	687b      	ldr	r3, [r7, #4]
10049c4e:	2204      	movs	r2, #4
10049c50:	609a      	str	r2, [r3, #8]

      /* Set the state to error */
      hpka->State = HAL_PKA_STATE_ERROR;
10049c52:	687b      	ldr	r3, [r7, #4]
10049c54:	2203      	movs	r2, #3
10049c56:	711a      	strb	r2, [r3, #4]
10049c58:	e003      	b.n	10049c62 <HAL_PKA_Init+0xaa>
#endif /* STM32WB06 || STM32WB07 */

  }
  else
  {
    err = HAL_ERROR;
10049c5a:	230f      	movs	r3, #15
10049c5c:	18fb      	adds	r3, r7, r3
10049c5e:	2201      	movs	r2, #1
10049c60:	701a      	strb	r2, [r3, #0]
  }

  return err;
10049c62:	230f      	movs	r3, #15
10049c64:	18fb      	adds	r3, r7, r3
10049c66:	781b      	ldrb	r3, [r3, #0]
}
10049c68:	0018      	movs	r0, r3
10049c6a:	46bd      	mov	sp, r7
10049c6c:	b004      	add	sp, #16
10049c6e:	bd80      	pop	{r7, pc}

10049c70 <HAL_PWREx_DisableGPIOPullUp>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullUp(uint32_t GPIO, uint32_t GPIONumber)
{
10049c70:	b580      	push	{r7, lr}
10049c72:	b084      	sub	sp, #16
10049c74:	af00      	add	r7, sp, #0
10049c76:	6078      	str	r0, [r7, #4]
10049c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10049c7a:	230f      	movs	r3, #15
10049c7c:	18fb      	adds	r3, r7, r3
10049c7e:	2200      	movs	r2, #0
10049c80:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
10049c82:	687b      	ldr	r3, [r7, #4]
10049c84:	2b00      	cmp	r3, #0
10049c86:	d003      	beq.n	10049c90 <HAL_PWREx_DisableGPIOPullUp+0x20>
10049c88:	687b      	ldr	r3, [r7, #4]
10049c8a:	2b01      	cmp	r3, #1
10049c8c:	d008      	beq.n	10049ca0 <HAL_PWREx_DisableGPIOPullUp+0x30>
10049c8e:	e00f      	b.n	10049cb0 <HAL_PWREx_DisableGPIOPullUp+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PUCRA, GPIONumber);
10049c90:	4b0d      	ldr	r3, [pc, #52]	@ (10049cc8 <HAL_PWREx_DisableGPIOPullUp+0x58>)
10049c92:	6a1a      	ldr	r2, [r3, #32]
10049c94:	683b      	ldr	r3, [r7, #0]
10049c96:	43d9      	mvns	r1, r3
10049c98:	4b0b      	ldr	r3, [pc, #44]	@ (10049cc8 <HAL_PWREx_DisableGPIOPullUp+0x58>)
10049c9a:	400a      	ands	r2, r1
10049c9c:	621a      	str	r2, [r3, #32]
      break;
10049c9e:	e00c      	b.n	10049cba <HAL_PWREx_DisableGPIOPullUp+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PUCRB, GPIONumber);
10049ca0:	4b09      	ldr	r3, [pc, #36]	@ (10049cc8 <HAL_PWREx_DisableGPIOPullUp+0x58>)
10049ca2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
10049ca4:	683b      	ldr	r3, [r7, #0]
10049ca6:	43d9      	mvns	r1, r3
10049ca8:	4b07      	ldr	r3, [pc, #28]	@ (10049cc8 <HAL_PWREx_DisableGPIOPullUp+0x58>)
10049caa:	400a      	ands	r2, r1
10049cac:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
10049cae:	e004      	b.n	10049cba <HAL_PWREx_DisableGPIOPullUp+0x4a>
    default:
      status = HAL_ERROR;
10049cb0:	230f      	movs	r3, #15
10049cb2:	18fb      	adds	r3, r7, r3
10049cb4:	2201      	movs	r2, #1
10049cb6:	701a      	strb	r2, [r3, #0]
      break;
10049cb8:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
10049cba:	230f      	movs	r3, #15
10049cbc:	18fb      	adds	r3, r7, r3
10049cbe:	781b      	ldrb	r3, [r3, #0]
}
10049cc0:	0018      	movs	r0, r3
10049cc2:	46bd      	mov	sp, r7
10049cc4:	b004      	add	sp, #16
10049cc6:	bd80      	pop	{r7, pc}
10049cc8:	48500000 	.word	0x48500000

10049ccc <HAL_PWREx_DisableGPIOPullDown>:
  *         or the logical OR of several of them to reset
  *         several bits for a given port in a single API call.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableGPIOPullDown(uint32_t GPIO, uint32_t GPIONumber)
{
10049ccc:	b580      	push	{r7, lr}
10049cce:	b084      	sub	sp, #16
10049cd0:	af00      	add	r7, sp, #0
10049cd2:	6078      	str	r0, [r7, #4]
10049cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10049cd6:	230f      	movs	r3, #15
10049cd8:	18fb      	adds	r3, r7, r3
10049cda:	2200      	movs	r2, #0
10049cdc:	701a      	strb	r2, [r3, #0]

  assert_param(IS_PWR_GPIO(GPIO));
  assert_param(IS_PWR_GPIO_BIT_NUMBER(GPIONumber));

  switch (GPIO)
10049cde:	687b      	ldr	r3, [r7, #4]
10049ce0:	2b00      	cmp	r3, #0
10049ce2:	d003      	beq.n	10049cec <HAL_PWREx_DisableGPIOPullDown+0x20>
10049ce4:	687b      	ldr	r3, [r7, #4]
10049ce6:	2b01      	cmp	r3, #1
10049ce8:	d008      	beq.n	10049cfc <HAL_PWREx_DisableGPIOPullDown+0x30>
10049cea:	e00f      	b.n	10049d0c <HAL_PWREx_DisableGPIOPullDown+0x40>
  {
    case PWR_GPIO_A:
      CLEAR_BIT(PWR->PDCRA, GPIONumber);
10049cec:	4b0d      	ldr	r3, [pc, #52]	@ (10049d24 <HAL_PWREx_DisableGPIOPullDown+0x58>)
10049cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
10049cf0:	683b      	ldr	r3, [r7, #0]
10049cf2:	43d9      	mvns	r1, r3
10049cf4:	4b0b      	ldr	r3, [pc, #44]	@ (10049d24 <HAL_PWREx_DisableGPIOPullDown+0x58>)
10049cf6:	400a      	ands	r2, r1
10049cf8:	625a      	str	r2, [r3, #36]	@ 0x24
      break;
10049cfa:	e00c      	b.n	10049d16 <HAL_PWREx_DisableGPIOPullDown+0x4a>
    case PWR_GPIO_B:
      CLEAR_BIT(PWR->PDCRB, GPIONumber);
10049cfc:	4b09      	ldr	r3, [pc, #36]	@ (10049d24 <HAL_PWREx_DisableGPIOPullDown+0x58>)
10049cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
10049d00:	683b      	ldr	r3, [r7, #0]
10049d02:	43d9      	mvns	r1, r3
10049d04:	4b07      	ldr	r3, [pc, #28]	@ (10049d24 <HAL_PWREx_DisableGPIOPullDown+0x58>)
10049d06:	400a      	ands	r2, r1
10049d08:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
10049d0a:	e004      	b.n	10049d16 <HAL_PWREx_DisableGPIOPullDown+0x4a>
    default:
      status = HAL_ERROR;
10049d0c:	230f      	movs	r3, #15
10049d0e:	18fb      	adds	r3, r7, r3
10049d10:	2201      	movs	r2, #1
10049d12:	701a      	strb	r2, [r3, #0]
      break;
10049d14:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
10049d16:	230f      	movs	r3, #15
10049d18:	18fb      	adds	r3, r7, r3
10049d1a:	781b      	ldrb	r3, [r3, #0]
}
10049d1c:	0018      	movs	r0, r3
10049d1e:	46bd      	mov	sp, r7
10049d20:	b004      	add	sp, #16
10049d22:	bd80      	pop	{r7, pc}
10049d24:	48500000 	.word	0x48500000

10049d28 <LL_RADIO_SetRadioConfigurationAddressPointer>:
  * @rmtoll WORD0          RADIOCONFIGPTR       LL_RADIO_SetRadioConfigurationAddressPointer
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRadioConfigurationAddressPointer(uint32_t value)
{
10049d28:	b580      	push	{r7, lr}
10049d2a:	b082      	sub	sp, #8
10049d2c:	af00      	add	r7, sp, #0
10049d2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD0, GLOBAL_WORD0_RADIOCONFIGPTR, value);
10049d30:	4b04      	ldr	r3, [pc, #16]	@ (10049d44 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10049d32:	681b      	ldr	r3, [r3, #0]
10049d34:	4b03      	ldr	r3, [pc, #12]	@ (10049d44 <LL_RADIO_SetRadioConfigurationAddressPointer+0x1c>)
10049d36:	687a      	ldr	r2, [r7, #4]
10049d38:	601a      	str	r2, [r3, #0]
}
10049d3a:	46c0      	nop			@ (mov r8, r8)
10049d3c:	46bd      	mov	sp, r7
10049d3e:	b002      	add	sp, #8
10049d40:	bd80      	pop	{r7, pc}
10049d42:	46c0      	nop			@ (mov r8, r8)
10049d44:	200000c0 	.word	0x200000c0

10049d48 <LL_RADIO_SetWakeupInitDelay>:
  * @rmtoll WORD1          WAKEUPINITDELAY       LL_RADIO_SetWakeupInitDelay
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetWakeupInitDelay(uint32_t value)
{
10049d48:	b580      	push	{r7, lr}
10049d4a:	b082      	sub	sp, #8
10049d4c:	af00      	add	r7, sp, #0
10049d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_WAKEUPINITDELAY, value);
10049d50:	4b07      	ldr	r3, [pc, #28]	@ (10049d70 <LL_RADIO_SetWakeupInitDelay+0x28>)
10049d52:	685b      	ldr	r3, [r3, #4]
10049d54:	4a07      	ldr	r2, [pc, #28]	@ (10049d74 <LL_RADIO_SetWakeupInitDelay+0x2c>)
10049d56:	4013      	ands	r3, r2
10049d58:	0019      	movs	r1, r3
10049d5a:	687b      	ldr	r3, [r7, #4]
10049d5c:	021b      	lsls	r3, r3, #8
10049d5e:	041b      	lsls	r3, r3, #16
10049d60:	0c1a      	lsrs	r2, r3, #16
10049d62:	4b03      	ldr	r3, [pc, #12]	@ (10049d70 <LL_RADIO_SetWakeupInitDelay+0x28>)
10049d64:	430a      	orrs	r2, r1
10049d66:	605a      	str	r2, [r3, #4]
}
10049d68:	46c0      	nop			@ (mov r8, r8)
10049d6a:	46bd      	mov	sp, r7
10049d6c:	b002      	add	sp, #8
10049d6e:	bd80      	pop	{r7, pc}
10049d70:	200000c0 	.word	0x200000c0
10049d74:	ffff00ff 	.word	0xffff00ff

10049d78 <LL_RADIO_SetTimer12InitDelayCal>:
  * @rmtoll WORD1          TIMER12INITDELAYCAL       LL_RADIO_SetTimer12InitDelayCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayCal(uint32_t value)
{
10049d78:	b580      	push	{r7, lr}
10049d7a:	b082      	sub	sp, #8
10049d7c:	af00      	add	r7, sp, #0
10049d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER12INITDELAYCAL, value);
10049d80:	4b08      	ldr	r3, [pc, #32]	@ (10049da4 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10049d82:	685b      	ldr	r3, [r3, #4]
10049d84:	4a08      	ldr	r2, [pc, #32]	@ (10049da8 <LL_RADIO_SetTimer12InitDelayCal+0x30>)
10049d86:	4013      	ands	r3, r2
10049d88:	0019      	movs	r1, r3
10049d8a:	687b      	ldr	r3, [r7, #4]
10049d8c:	041a      	lsls	r2, r3, #16
10049d8e:	23ff      	movs	r3, #255	@ 0xff
10049d90:	041b      	lsls	r3, r3, #16
10049d92:	401a      	ands	r2, r3
10049d94:	4b03      	ldr	r3, [pc, #12]	@ (10049da4 <LL_RADIO_SetTimer12InitDelayCal+0x2c>)
10049d96:	430a      	orrs	r2, r1
10049d98:	605a      	str	r2, [r3, #4]
}
10049d9a:	46c0      	nop			@ (mov r8, r8)
10049d9c:	46bd      	mov	sp, r7
10049d9e:	b002      	add	sp, #8
10049da0:	bd80      	pop	{r7, pc}
10049da2:	46c0      	nop			@ (mov r8, r8)
10049da4:	200000c0 	.word	0x200000c0
10049da8:	ff00ffff 	.word	0xff00ffff

10049dac <LL_RADIO_SetTimer12InitDelayNoCal>:
  * @rmtoll WORD1          TIMER2INITDELAYNOCAL       LL_RADIO_SetTimer12InitDelayNoCal
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer12InitDelayNoCal(uint32_t value)
{
10049dac:	b580      	push	{r7, lr}
10049dae:	b082      	sub	sp, #8
10049db0:	af00      	add	r7, sp, #0
10049db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_TIMER2INITDELAYNOCAL, value);
10049db4:	4b06      	ldr	r3, [pc, #24]	@ (10049dd0 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10049db6:	685b      	ldr	r3, [r3, #4]
10049db8:	021b      	lsls	r3, r3, #8
10049dba:	0a19      	lsrs	r1, r3, #8
10049dbc:	687b      	ldr	r3, [r7, #4]
10049dbe:	061a      	lsls	r2, r3, #24
10049dc0:	4b03      	ldr	r3, [pc, #12]	@ (10049dd0 <LL_RADIO_SetTimer12InitDelayNoCal+0x24>)
10049dc2:	430a      	orrs	r2, r1
10049dc4:	605a      	str	r2, [r3, #4]
}
10049dc6:	46c0      	nop			@ (mov r8, r8)
10049dc8:	46bd      	mov	sp, r7
10049dca:	b002      	add	sp, #8
10049dcc:	bd80      	pop	{r7, pc}
10049dce:	46c0      	nop			@ (mov r8, r8)
10049dd0:	200000c0 	.word	0x200000c0

10049dd4 <LL_RADIO_SetTransmitCalDelayChk>:
  * @rmtoll WORD2          TRANSMITCALDELAYCHK       LL_RADIO_SetTransmitCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitCalDelayChk(uint32_t value)
{
10049dd4:	b580      	push	{r7, lr}
10049dd6:	b082      	sub	sp, #8
10049dd8:	af00      	add	r7, sp, #0
10049dda:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITCALDELAYCHK, value);
10049ddc:	4b07      	ldr	r3, [pc, #28]	@ (10049dfc <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10049dde:	689b      	ldr	r3, [r3, #8]
10049de0:	22ff      	movs	r2, #255	@ 0xff
10049de2:	4393      	bics	r3, r2
10049de4:	0019      	movs	r1, r3
10049de6:	687b      	ldr	r3, [r7, #4]
10049de8:	22ff      	movs	r2, #255	@ 0xff
10049dea:	401a      	ands	r2, r3
10049dec:	4b03      	ldr	r3, [pc, #12]	@ (10049dfc <LL_RADIO_SetTransmitCalDelayChk+0x28>)
10049dee:	430a      	orrs	r2, r1
10049df0:	609a      	str	r2, [r3, #8]
}
10049df2:	46c0      	nop			@ (mov r8, r8)
10049df4:	46bd      	mov	sp, r7
10049df6:	b002      	add	sp, #8
10049df8:	bd80      	pop	{r7, pc}
10049dfa:	46c0      	nop			@ (mov r8, r8)
10049dfc:	200000c0 	.word	0x200000c0

10049e00 <LL_RADIO_SetTransmitNoCalDelayChk>:
  * @rmtoll WORD2          TRANSMITNOCALDELAYCHK       LL_RADIO_SetTransmitNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmitNoCalDelayChk(uint32_t value)
{
10049e00:	b580      	push	{r7, lr}
10049e02:	b082      	sub	sp, #8
10049e04:	af00      	add	r7, sp, #0
10049e06:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_TRANSMITNOCALDELAYCHK, value);
10049e08:	4b07      	ldr	r3, [pc, #28]	@ (10049e28 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10049e0a:	689b      	ldr	r3, [r3, #8]
10049e0c:	4a07      	ldr	r2, [pc, #28]	@ (10049e2c <LL_RADIO_SetTransmitNoCalDelayChk+0x2c>)
10049e0e:	4013      	ands	r3, r2
10049e10:	0019      	movs	r1, r3
10049e12:	687b      	ldr	r3, [r7, #4]
10049e14:	021b      	lsls	r3, r3, #8
10049e16:	041b      	lsls	r3, r3, #16
10049e18:	0c1a      	lsrs	r2, r3, #16
10049e1a:	4b03      	ldr	r3, [pc, #12]	@ (10049e28 <LL_RADIO_SetTransmitNoCalDelayChk+0x28>)
10049e1c:	430a      	orrs	r2, r1
10049e1e:	609a      	str	r2, [r3, #8]
}
10049e20:	46c0      	nop			@ (mov r8, r8)
10049e22:	46bd      	mov	sp, r7
10049e24:	b002      	add	sp, #8
10049e26:	bd80      	pop	{r7, pc}
10049e28:	200000c0 	.word	0x200000c0
10049e2c:	ffff00ff 	.word	0xffff00ff

10049e30 <LL_RADIO_SetReceivedCalDelayChk>:
  * @rmtoll WORD2          RECEIVECALDELAYCHK       LL_RADIO_SetReceivedCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedCalDelayChk(uint32_t value)
{
10049e30:	b580      	push	{r7, lr}
10049e32:	b082      	sub	sp, #8
10049e34:	af00      	add	r7, sp, #0
10049e36:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVECALDELAYCHK, value);
10049e38:	4b08      	ldr	r3, [pc, #32]	@ (10049e5c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10049e3a:	689b      	ldr	r3, [r3, #8]
10049e3c:	4a08      	ldr	r2, [pc, #32]	@ (10049e60 <LL_RADIO_SetReceivedCalDelayChk+0x30>)
10049e3e:	4013      	ands	r3, r2
10049e40:	0019      	movs	r1, r3
10049e42:	687b      	ldr	r3, [r7, #4]
10049e44:	041a      	lsls	r2, r3, #16
10049e46:	23ff      	movs	r3, #255	@ 0xff
10049e48:	041b      	lsls	r3, r3, #16
10049e4a:	401a      	ands	r2, r3
10049e4c:	4b03      	ldr	r3, [pc, #12]	@ (10049e5c <LL_RADIO_SetReceivedCalDelayChk+0x2c>)
10049e4e:	430a      	orrs	r2, r1
10049e50:	609a      	str	r2, [r3, #8]
}
10049e52:	46c0      	nop			@ (mov r8, r8)
10049e54:	46bd      	mov	sp, r7
10049e56:	b002      	add	sp, #8
10049e58:	bd80      	pop	{r7, pc}
10049e5a:	46c0      	nop			@ (mov r8, r8)
10049e5c:	200000c0 	.word	0x200000c0
10049e60:	ff00ffff 	.word	0xff00ffff

10049e64 <LL_RADIO_SetReceivedNoCalDelayChk>:
  * @rmtoll WORD2          RECEIVENOCALDELAYCHK       LL_RADIO_SetReceivedNoCalDelayChk
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceivedNoCalDelayChk(uint32_t value)
{
10049e64:	b580      	push	{r7, lr}
10049e66:	b082      	sub	sp, #8
10049e68:	af00      	add	r7, sp, #0
10049e6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD2, GLOBAL_WORD2_RECEIVENOCALDELAYCHK, value);
10049e6c:	4b06      	ldr	r3, [pc, #24]	@ (10049e88 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10049e6e:	689b      	ldr	r3, [r3, #8]
10049e70:	021b      	lsls	r3, r3, #8
10049e72:	0a19      	lsrs	r1, r3, #8
10049e74:	687b      	ldr	r3, [r7, #4]
10049e76:	061a      	lsls	r2, r3, #24
10049e78:	4b03      	ldr	r3, [pc, #12]	@ (10049e88 <LL_RADIO_SetReceivedNoCalDelayChk+0x24>)
10049e7a:	430a      	orrs	r2, r1
10049e7c:	609a      	str	r2, [r3, #8]
}
10049e7e:	46c0      	nop			@ (mov r8, r8)
10049e80:	46bd      	mov	sp, r7
10049e82:	b002      	add	sp, #8
10049e84:	bd80      	pop	{r7, pc}
10049e86:	46c0      	nop			@ (mov r8, r8)
10049e88:	200000c0 	.word	0x200000c0

10049e8c <LL_RADIO_SetConfigurationEndDuration>:
  * @rmtoll WORD3          CONFIGENDDURATION       LL_RADIO_SetConfigurationEndDuration
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetConfigurationEndDuration(uint32_t value)
{
10049e8c:	b580      	push	{r7, lr}
10049e8e:	b082      	sub	sp, #8
10049e90:	af00      	add	r7, sp, #0
10049e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_CONFIGENDDURATION, value);
10049e94:	4b07      	ldr	r3, [pc, #28]	@ (10049eb4 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10049e96:	68db      	ldr	r3, [r3, #12]
10049e98:	22ff      	movs	r2, #255	@ 0xff
10049e9a:	4393      	bics	r3, r2
10049e9c:	0019      	movs	r1, r3
10049e9e:	687b      	ldr	r3, [r7, #4]
10049ea0:	22ff      	movs	r2, #255	@ 0xff
10049ea2:	401a      	ands	r2, r3
10049ea4:	4b03      	ldr	r3, [pc, #12]	@ (10049eb4 <LL_RADIO_SetConfigurationEndDuration+0x28>)
10049ea6:	430a      	orrs	r2, r1
10049ea8:	60da      	str	r2, [r3, #12]
}
10049eaa:	46c0      	nop			@ (mov r8, r8)
10049eac:	46bd      	mov	sp, r7
10049eae:	b002      	add	sp, #8
10049eb0:	bd80      	pop	{r7, pc}
10049eb2:	46c0      	nop			@ (mov r8, r8)
10049eb4:	200000c0 	.word	0x200000c0

10049eb8 <LL_RADIO_SetTxDataReadyCheck>:
  * @rmtoll WORD3          TXDATAREADYCHECK       LL_RADIO_SetTxDataReadyCheck
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDataReadyCheck(uint32_t value)
{
10049eb8:	b580      	push	{r7, lr}
10049eba:	b082      	sub	sp, #8
10049ebc:	af00      	add	r7, sp, #0
10049ebe:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDATAREADYCHECK, value);
10049ec0:	4b07      	ldr	r3, [pc, #28]	@ (10049ee0 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10049ec2:	68db      	ldr	r3, [r3, #12]
10049ec4:	4a07      	ldr	r2, [pc, #28]	@ (10049ee4 <LL_RADIO_SetTxDataReadyCheck+0x2c>)
10049ec6:	4013      	ands	r3, r2
10049ec8:	0019      	movs	r1, r3
10049eca:	687b      	ldr	r3, [r7, #4]
10049ecc:	021b      	lsls	r3, r3, #8
10049ece:	041b      	lsls	r3, r3, #16
10049ed0:	0c1a      	lsrs	r2, r3, #16
10049ed2:	4b03      	ldr	r3, [pc, #12]	@ (10049ee0 <LL_RADIO_SetTxDataReadyCheck+0x28>)
10049ed4:	430a      	orrs	r2, r1
10049ed6:	60da      	str	r2, [r3, #12]
}
10049ed8:	46c0      	nop			@ (mov r8, r8)
10049eda:	46bd      	mov	sp, r7
10049edc:	b002      	add	sp, #8
10049ede:	bd80      	pop	{r7, pc}
10049ee0:	200000c0 	.word	0x200000c0
10049ee4:	ffff00ff 	.word	0xffff00ff

10049ee8 <LL_RADIO_SetTxDelayStart>:
  * @rmtoll WORD3          TXDELAYSTART       LL_RADIO_SetTxDelayStart
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayStart(uint32_t value)
{
10049ee8:	b580      	push	{r7, lr}
10049eea:	b082      	sub	sp, #8
10049eec:	af00      	add	r7, sp, #0
10049eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYSTART, value);
10049ef0:	4b08      	ldr	r3, [pc, #32]	@ (10049f14 <LL_RADIO_SetTxDelayStart+0x2c>)
10049ef2:	68db      	ldr	r3, [r3, #12]
10049ef4:	4a08      	ldr	r2, [pc, #32]	@ (10049f18 <LL_RADIO_SetTxDelayStart+0x30>)
10049ef6:	4013      	ands	r3, r2
10049ef8:	0019      	movs	r1, r3
10049efa:	687b      	ldr	r3, [r7, #4]
10049efc:	041a      	lsls	r2, r3, #16
10049efe:	23ff      	movs	r3, #255	@ 0xff
10049f00:	041b      	lsls	r3, r3, #16
10049f02:	401a      	ands	r2, r3
10049f04:	4b03      	ldr	r3, [pc, #12]	@ (10049f14 <LL_RADIO_SetTxDelayStart+0x2c>)
10049f06:	430a      	orrs	r2, r1
10049f08:	60da      	str	r2, [r3, #12]
}
10049f0a:	46c0      	nop			@ (mov r8, r8)
10049f0c:	46bd      	mov	sp, r7
10049f0e:	b002      	add	sp, #8
10049f10:	bd80      	pop	{r7, pc}
10049f12:	46c0      	nop			@ (mov r8, r8)
10049f14:	200000c0 	.word	0x200000c0
10049f18:	ff00ffff 	.word	0xff00ffff

10049f1c <LL_RADIO_SetTxDelayEnd>:
  * @rmtoll WORD3          TXDELAYEND       LL_RADIO_SetTxDelayEnd
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxDelayEnd(uint32_t value)
{
10049f1c:	b580      	push	{r7, lr}
10049f1e:	b082      	sub	sp, #8
10049f20:	af00      	add	r7, sp, #0
10049f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD3, GLOBAL_WORD3_TXDELAYEND, value);
10049f24:	4b08      	ldr	r3, [pc, #32]	@ (10049f48 <LL_RADIO_SetTxDelayEnd+0x2c>)
10049f26:	68db      	ldr	r3, [r3, #12]
10049f28:	4a08      	ldr	r2, [pc, #32]	@ (10049f4c <LL_RADIO_SetTxDelayEnd+0x30>)
10049f2a:	4013      	ands	r3, r2
10049f2c:	0019      	movs	r1, r3
10049f2e:	687b      	ldr	r3, [r7, #4]
10049f30:	061a      	lsls	r2, r3, #24
10049f32:	23fc      	movs	r3, #252	@ 0xfc
10049f34:	059b      	lsls	r3, r3, #22
10049f36:	401a      	ands	r2, r3
10049f38:	4b03      	ldr	r3, [pc, #12]	@ (10049f48 <LL_RADIO_SetTxDelayEnd+0x2c>)
10049f3a:	430a      	orrs	r2, r1
10049f3c:	60da      	str	r2, [r3, #12]
}
10049f3e:	46c0      	nop			@ (mov r8, r8)
10049f40:	46bd      	mov	sp, r7
10049f42:	b002      	add	sp, #8
10049f44:	bd80      	pop	{r7, pc}
10049f46:	46c0      	nop			@ (mov r8, r8)
10049f48:	200000c0 	.word	0x200000c0
10049f4c:	c0ffffff 	.word	0xc0ffffff

10049f50 <LL_RADIO_SetTransmissionReadyTimeout>:
  * @rmtoll WORD4          TXREADYTIMEOUT       LL_RADIO_SetTransmissionReadyTimeout
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionReadyTimeout(uint32_t value)
{
10049f50:	b580      	push	{r7, lr}
10049f52:	b082      	sub	sp, #8
10049f54:	af00      	add	r7, sp, #0
10049f56:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_TXREADYTIMEOUT, value);
10049f58:	4b07      	ldr	r3, [pc, #28]	@ (10049f78 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10049f5a:	691b      	ldr	r3, [r3, #16]
10049f5c:	22ff      	movs	r2, #255	@ 0xff
10049f5e:	4393      	bics	r3, r2
10049f60:	0019      	movs	r1, r3
10049f62:	687b      	ldr	r3, [r7, #4]
10049f64:	22ff      	movs	r2, #255	@ 0xff
10049f66:	401a      	ands	r2, r3
10049f68:	4b03      	ldr	r3, [pc, #12]	@ (10049f78 <LL_RADIO_SetTransmissionReadyTimeout+0x28>)
10049f6a:	430a      	orrs	r2, r1
10049f6c:	611a      	str	r2, [r3, #16]
}
10049f6e:	46c0      	nop			@ (mov r8, r8)
10049f70:	46bd      	mov	sp, r7
10049f72:	b002      	add	sp, #8
10049f74:	bd80      	pop	{r7, pc}
10049f76:	46c0      	nop			@ (mov r8, r8)
10049f78:	200000c0 	.word	0x200000c0

10049f7c <LL_RADIO_ChkFlagAutoclearEnable_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          CHKFLAGAUTOCLEARENA            LL_RADIO_ChkFlagAutoclearEnable_Enable
  * @retval uint32_t
  */
__STATIC_INLINE void LL_RADIO_ChkFlagAutoclearEnable_Enable(void)
{
10049f7c:	b580      	push	{r7, lr}
10049f7e:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_CHKFLAGAUTOCLEARENA);
10049f80:	4b04      	ldr	r3, [pc, #16]	@ (10049f94 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10049f82:	695a      	ldr	r2, [r3, #20]
10049f84:	4b03      	ldr	r3, [pc, #12]	@ (10049f94 <LL_RADIO_ChkFlagAutoclearEnable_Enable+0x18>)
10049f86:	2104      	movs	r1, #4
10049f88:	430a      	orrs	r2, r1
10049f8a:	615a      	str	r2, [r3, #20]
}
10049f8c:	46c0      	nop			@ (mov r8, r8)
10049f8e:	46bd      	mov	sp, r7
10049f90:	bd80      	pop	{r7, pc}
10049f92:	46c0      	nop			@ (mov r8, r8)
10049f94:	200000c0 	.word	0x200000c0

10049f98 <LL_RADIO_NoActiveLErrorInterrupt_Enable>:
  * @brief  Indicate if INTNOACTIVELERROR is enabled
  * @rmtoll WORD5          INTNOACTIVELERROR            LL_RADIO_NoActiveLErrorInterrupt_Enable
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE void LL_RADIO_NoActiveLErrorInterrupt_Enable(void)
{
10049f98:	b580      	push	{r7, lr}
10049f9a:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTNOACTIVELERROR);
10049f9c:	4b04      	ldr	r3, [pc, #16]	@ (10049fb0 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10049f9e:	695a      	ldr	r2, [r3, #20]
10049fa0:	4b03      	ldr	r3, [pc, #12]	@ (10049fb0 <LL_RADIO_NoActiveLErrorInterrupt_Enable+0x18>)
10049fa2:	2180      	movs	r1, #128	@ 0x80
10049fa4:	0409      	lsls	r1, r1, #16
10049fa6:	430a      	orrs	r2, r1
10049fa8:	615a      	str	r2, [r3, #20]
}
10049faa:	46c0      	nop			@ (mov r8, r8)
10049fac:	46bd      	mov	sp, r7
10049fae:	bd80      	pop	{r7, pc}
10049fb0:	200000c0 	.word	0x200000c0

10049fb4 <LL_RADIO_TxRxSkipInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTTXRXSKIP            LL_RADIO_TxRxSkipInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxRxSkipInterrupt_Enable(void)
{
10049fb4:	b580      	push	{r7, lr}
10049fb6:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTTXRXSKIP);
10049fb8:	4b04      	ldr	r3, [pc, #16]	@ (10049fcc <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10049fba:	695a      	ldr	r2, [r3, #20]
10049fbc:	4b03      	ldr	r3, [pc, #12]	@ (10049fcc <LL_RADIO_TxRxSkipInterrupt_Enable+0x18>)
10049fbe:	2180      	movs	r1, #128	@ 0x80
10049fc0:	0589      	lsls	r1, r1, #22
10049fc2:	430a      	orrs	r2, r1
10049fc4:	615a      	str	r2, [r3, #20]
}
10049fc6:	46c0      	nop			@ (mov r8, r8)
10049fc8:	46bd      	mov	sp, r7
10049fca:	bd80      	pop	{r7, pc}
10049fcc:	200000c0 	.word	0x200000c0

10049fd0 <LL_RADIO_Active2ErrorInterrupt_Enable>:
  * @brief  RADIO Enable
  * @rmtoll WORD5          INTACTIVE2ERR            LL_RADIO_Active2ErrorInterrupt_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Active2ErrorInterrupt_Enable(void)
{
10049fd0:	b580      	push	{r7, lr}
10049fd2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD5, GLOBAL_WORD5_INTACTIVE2ERR);
10049fd4:	4b04      	ldr	r3, [pc, #16]	@ (10049fe8 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10049fd6:	695a      	ldr	r2, [r3, #20]
10049fd8:	4b03      	ldr	r3, [pc, #12]	@ (10049fe8 <LL_RADIO_Active2ErrorInterrupt_Enable+0x18>)
10049fda:	2180      	movs	r1, #128	@ 0x80
10049fdc:	05c9      	lsls	r1, r1, #23
10049fde:	430a      	orrs	r2, r1
10049fe0:	615a      	str	r2, [r3, #20]
}
10049fe2:	46c0      	nop			@ (mov r8, r8)
10049fe4:	46bd      	mov	sp, r7
10049fe6:	bd80      	pop	{r7, pc}
10049fe8:	200000c0 	.word	0x200000c0

10049fec <LL_RADIO_SetDefaultAntennaID>:
  * @rmtoll WORD6          DEFAULTANTENNAID       LL_RADIO_SetDefaultAntennaID
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDefaultAntennaID(uint32_t value)
{
10049fec:	b580      	push	{r7, lr}
10049fee:	b082      	sub	sp, #8
10049ff0:	af00      	add	r7, sp, #0
10049ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD6, GLOBAL_WORD6_DEFAULTANTENNAID, value);
10049ff4:	4b07      	ldr	r3, [pc, #28]	@ (1004a014 <LL_RADIO_SetDefaultAntennaID+0x28>)
10049ff6:	699b      	ldr	r3, [r3, #24]
10049ff8:	227f      	movs	r2, #127	@ 0x7f
10049ffa:	4393      	bics	r3, r2
10049ffc:	0019      	movs	r1, r3
10049ffe:	687b      	ldr	r3, [r7, #4]
1004a000:	227f      	movs	r2, #127	@ 0x7f
1004a002:	401a      	ands	r2, r3
1004a004:	4b03      	ldr	r3, [pc, #12]	@ (1004a014 <LL_RADIO_SetDefaultAntennaID+0x28>)
1004a006:	430a      	orrs	r2, r1
1004a008:	619a      	str	r2, [r3, #24]
}
1004a00a:	46c0      	nop			@ (mov r8, r8)
1004a00c:	46bd      	mov	sp, r7
1004a00e:	b002      	add	sp, #8
1004a010:	bd80      	pop	{r7, pc}
1004a012:	46c0      	nop			@ (mov r8, r8)
1004a014:	200000c0 	.word	0x200000c0

1004a018 <LL_RADIO_TIMER_DisableTimer1>:
{
1004a018:	b580      	push	{r7, lr}
1004a01a:	b082      	sub	sp, #8
1004a01c:	af00      	add	r7, sp, #0
1004a01e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004a020:	687b      	ldr	r3, [r7, #4]
1004a022:	68db      	ldr	r3, [r3, #12]
1004a024:	2203      	movs	r2, #3
1004a026:	4393      	bics	r3, r2
1004a028:	001a      	movs	r2, r3
1004a02a:	687b      	ldr	r3, [r7, #4]
1004a02c:	60da      	str	r2, [r3, #12]
}
1004a02e:	46c0      	nop			@ (mov r8, r8)
1004a030:	46bd      	mov	sp, r7
1004a032:	b002      	add	sp, #8
1004a034:	bd80      	pop	{r7, pc}

1004a036 <LL_RADIO_TIMER_DisableTimer2>:
{
1004a036:	b580      	push	{r7, lr}
1004a038:	b082      	sub	sp, #8
1004a03a:	af00      	add	r7, sp, #0
1004a03c:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004a03e:	687b      	ldr	r3, [r7, #4]
1004a040:	68db      	ldr	r3, [r3, #12]
1004a042:	2203      	movs	r2, #3
1004a044:	4393      	bics	r3, r2
1004a046:	001a      	movs	r2, r3
1004a048:	687b      	ldr	r3, [r7, #4]
1004a04a:	60da      	str	r2, [r3, #12]
}
1004a04c:	46c0      	nop			@ (mov r8, r8)
1004a04e:	46bd      	mov	sp, r7
1004a050:	b002      	add	sp, #8
1004a052:	bd80      	pop	{r7, pc}

1004a054 <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004a054:	b580      	push	{r7, lr}
1004a056:	b082      	sub	sp, #8
1004a058:	af00      	add	r7, sp, #0
1004a05a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004a05c:	687b      	ldr	r3, [r7, #4]
1004a05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004a060:	4a03      	ldr	r2, [pc, #12]	@ (1004a070 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004a062:	401a      	ands	r2, r3
1004a064:	687b      	ldr	r3, [r7, #4]
1004a066:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004a068:	46c0      	nop			@ (mov r8, r8)
1004a06a:	46bd      	mov	sp, r7
1004a06c:	b002      	add	sp, #8
1004a06e:	bd80      	pop	{r7, pc}
1004a070:	bfffffff 	.word	0xbfffffff

1004a074 <HAL_RADIO_Init>:
/**
  * @brief  Initializes the radio.
  * @retval None
  */
void HAL_RADIO_Init(RADIO_HandleTypeDef *hradio)
{
1004a074:	b590      	push	{r4, r7, lr}
1004a076:	b08d      	sub	sp, #52	@ 0x34
1004a078:	af00      	add	r7, sp, #0
1004a07a:	6078      	str	r0, [r7, #4]
  uint32_t mr_ble_iptat;
  uint32_t mr_ble_vbg;
  uint32_t mr_ble_rxadc_delay_i;
  uint32_t mr_ble_rxadc_delay_q;
  uint8_t mr_ble_rxadc_delay_flag;
  uint8_t *hot_table_radio_config = (uint8_t *)&hot_table_radio_config_u32[4];
1004a07c:	4b14      	ldr	r3, [pc, #80]	@ (1004a0d0 <HAL_RADIO_Init+0x5c>)
1004a07e:	617b      	str	r3, [r7, #20]
  uint8_t index;

  /* Retrieve Trimming values from engineering flash locations */
  if (*(volatile uint32_t *)VALIDITY_LOCATION == VALIDITY_TAG)
1004a080:	4b14      	ldr	r3, [pc, #80]	@ (1004a0d4 <HAL_RADIO_Init+0x60>)
1004a082:	681b      	ldr	r3, [r3, #0]
1004a084:	4a14      	ldr	r2, [pc, #80]	@ (1004a0d8 <HAL_RADIO_Init+0x64>)
1004a086:	4293      	cmp	r3, r2
1004a088:	d12a      	bne.n	1004a0e0 <HAL_RADIO_Init+0x6c>
  {
    mr_ble_ibias            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IBIAS_TRIM_Msk) >> MR_BLE_IBIAS_TRIM_Pos;
1004a08a:	4b14      	ldr	r3, [pc, #80]	@ (1004a0dc <HAL_RADIO_Init+0x68>)
1004a08c:	681b      	ldr	r3, [r3, #0]
1004a08e:	0a1b      	lsrs	r3, r3, #8
1004a090:	220f      	movs	r2, #15
1004a092:	4013      	ands	r3, r2
1004a094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat            = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_IPTAT_TRIM_Msk) >> MR_BLE_IPTAT_TRIM_Pos;
1004a096:	4b11      	ldr	r3, [pc, #68]	@ (1004a0dc <HAL_RADIO_Init+0x68>)
1004a098:	681b      	ldr	r3, [r3, #0]
1004a09a:	0b1b      	lsrs	r3, r3, #12
1004a09c:	220f      	movs	r2, #15
1004a09e:	4013      	ands	r3, r2
1004a0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg              = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_VBG_TRIM_Msk) >> MR_BLE_VBG_TRIM_Pos;
1004a0a2:	4b0e      	ldr	r3, [pc, #56]	@ (1004a0dc <HAL_RADIO_Init+0x68>)
1004a0a4:	681b      	ldr	r3, [r3, #0]
1004a0a6:	0c1b      	lsrs	r3, r3, #16
1004a0a8:	220f      	movs	r2, #15
1004a0aa:	4013      	ands	r3, r2
1004a0ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_i    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_I_TRIM_Msk) >> MR_BLE_RXADC_DELAY_I_TRIM_Pos;
1004a0ae:	4b0b      	ldr	r3, [pc, #44]	@ (1004a0dc <HAL_RADIO_Init+0x68>)
1004a0b0:	681b      	ldr	r3, [r3, #0]
1004a0b2:	0d1b      	lsrs	r3, r3, #20
1004a0b4:	2207      	movs	r2, #7
1004a0b6:	4013      	ands	r3, r2
1004a0b8:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = ((*(volatile uint32_t *)MR_TRIMMING_LOCATION) & MR_BLE_RXADC_DELAY_Q_TRIM_Msk) >> MR_BLE_RXADC_DELAY_Q_TRIM_Pos;
1004a0ba:	4b08      	ldr	r3, [pc, #32]	@ (1004a0dc <HAL_RADIO_Init+0x68>)
1004a0bc:	681b      	ldr	r3, [r3, #0]
1004a0be:	0e1b      	lsrs	r3, r3, #24
1004a0c0:	2207      	movs	r2, #7
1004a0c2:	4013      	ands	r3, r2
1004a0c4:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004a0c6:	231b      	movs	r3, #27
1004a0c8:	18fb      	adds	r3, r7, r3
1004a0ca:	2201      	movs	r2, #1
1004a0cc:	701a      	strb	r2, [r3, #0]
1004a0ce:	e018      	b.n	1004a102 <HAL_RADIO_Init+0x8e>
1004a0d0:	20002848 	.word	0x20002848
1004a0d4:	10001ef8 	.word	0x10001ef8
1004a0d8:	fcbceccc 	.word	0xfcbceccc
1004a0dc:	10001ee8 	.word	0x10001ee8
  }
  else
  {
    mr_ble_ibias = 0x08;
1004a0e0:	2308      	movs	r3, #8
1004a0e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mr_ble_iptat = 0x07;
1004a0e4:	2307      	movs	r3, #7
1004a0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    mr_ble_vbg   = 0x08;
1004a0e8:	2308      	movs	r3, #8
1004a0ea:	627b      	str	r3, [r7, #36]	@ 0x24
    mr_ble_rxadc_delay_flag = FALSE;
1004a0ec:	211b      	movs	r1, #27
1004a0ee:	187b      	adds	r3, r7, r1
1004a0f0:	2200      	movs	r2, #0
1004a0f2:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
    mr_ble_rxadc_delay_i    = 3;
1004a0f4:	2303      	movs	r3, #3
1004a0f6:	623b      	str	r3, [r7, #32]
    mr_ble_rxadc_delay_q    = 3;
1004a0f8:	2303      	movs	r3, #3
1004a0fa:	61fb      	str	r3, [r7, #28]
    mr_ble_rxadc_delay_flag = TRUE;
1004a0fc:	187b      	adds	r3, r7, r1
1004a0fe:	2201      	movs	r2, #1
1004a100:	701a      	strb	r2, [r3, #0]
#endif /* STM32WB05 or STM32WB09 */
  }

  BLUEGLOB->BYTE4 = BLUE_IDLE_0;
1004a102:	4bfc      	ldr	r3, [pc, #1008]	@ (1004a4f4 <HAL_RADIO_Init+0x480>)
1004a104:	2200      	movs	r2, #0
1004a106:	711a      	strb	r2, [r3, #4]
  if (hradio != NULL)
1004a108:	687b      	ldr	r3, [r7, #4]
1004a10a:	2b00      	cmp	r3, #0
1004a10c:	d003      	beq.n	1004a116 <HAL_RADIO_Init+0xa2>
  {
    HAL_RADIO_MspInit(hradio);
1004a10e:	687b      	ldr	r3, [r7, #4]
1004a110:	0018      	movs	r0, r3
1004a112:	f7fc f9d1 	bl	100464b8 <HAL_RADIO_MspInit>
  }
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004a116:	23c0      	movs	r3, #192	@ 0xc0
1004a118:	05db      	lsls	r3, r3, #23
1004a11a:	0018      	movs	r0, r3
1004a11c:	f7ff ff7c 	bl	1004a018 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004a120:	23c0      	movs	r3, #192	@ 0xc0
1004a122:	05db      	lsls	r3, r3, #23
1004a124:	0018      	movs	r0, r3
1004a126:	f7ff ff86 	bl	1004a036 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004a12a:	4bf3      	ldr	r3, [pc, #972]	@ (1004a4f8 <HAL_RADIO_Init+0x484>)
1004a12c:	0018      	movs	r0, r3
1004a12e:	f7ff ff91 	bl	1004a054 <LL_RADIO_TIMER_DisableBLEWakeupTimer>

  /* Write Radio Trimming values in the registers: Cbias' VBG, Cbias' IPTAT, Cbias' IBIAS, RxAnaUsr Delay Trim I & Q */
  MODIFY_REG_FIELD(RRM->CBIAS1_ANA_ENG, RRM_CBIAS1_ANA_ENG_RFD_CBIAS_VBG_TRIM, mr_ble_vbg);
1004a132:	4af2      	ldr	r2, [pc, #968]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a134:	239e      	movs	r3, #158	@ 0x9e
1004a136:	009b      	lsls	r3, r3, #2
1004a138:	58d3      	ldr	r3, [r2, r3]
1004a13a:	220f      	movs	r2, #15
1004a13c:	4393      	bics	r3, r2
1004a13e:	001a      	movs	r2, r3
1004a140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004a142:	210f      	movs	r1, #15
1004a144:	400b      	ands	r3, r1
1004a146:	49ed      	ldr	r1, [pc, #948]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a148:	431a      	orrs	r2, r3
1004a14a:	239e      	movs	r3, #158	@ 0x9e
1004a14c:	009b      	lsls	r3, r3, #2
1004a14e:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IPTAT_TRIM, mr_ble_iptat);
1004a150:	4aea      	ldr	r2, [pc, #936]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a152:	239d      	movs	r3, #157	@ 0x9d
1004a154:	009b      	lsls	r3, r3, #2
1004a156:	58d3      	ldr	r3, [r2, r3]
1004a158:	22f0      	movs	r2, #240	@ 0xf0
1004a15a:	4393      	bics	r3, r2
1004a15c:	001a      	movs	r2, r3
1004a15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004a160:	011b      	lsls	r3, r3, #4
1004a162:	21ff      	movs	r1, #255	@ 0xff
1004a164:	400b      	ands	r3, r1
1004a166:	49e5      	ldr	r1, [pc, #916]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a168:	431a      	orrs	r2, r3
1004a16a:	239d      	movs	r3, #157	@ 0x9d
1004a16c:	009b      	lsls	r3, r3, #2
1004a16e:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->CBIAS0_ANA_ENG, RRM_CBIAS0_ANA_ENG_RFD_CBIAS_IBIAS_TRIM, mr_ble_ibias);
1004a170:	4ae2      	ldr	r2, [pc, #904]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a172:	239d      	movs	r3, #157	@ 0x9d
1004a174:	009b      	lsls	r3, r3, #2
1004a176:	58d3      	ldr	r3, [r2, r3]
1004a178:	220f      	movs	r2, #15
1004a17a:	4393      	bics	r3, r2
1004a17c:	001a      	movs	r2, r3
1004a17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004a180:	210f      	movs	r1, #15
1004a182:	400b      	ands	r3, r1
1004a184:	49dd      	ldr	r1, [pc, #884]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a186:	431a      	orrs	r2, r3
1004a188:	239d      	movs	r3, #157	@ 0x9d
1004a18a:	009b      	lsls	r3, r3, #2
1004a18c:	50ca      	str	r2, [r1, r3]
  if (mr_ble_rxadc_delay_flag)
1004a18e:	231b      	movs	r3, #27
1004a190:	18fb      	adds	r3, r7, r3
1004a192:	781b      	ldrb	r3, [r3, #0]
1004a194:	2b00      	cmp	r3, #0
1004a196:	d01e      	beq.n	1004a1d6 <HAL_RADIO_Init+0x162>
  {
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_I, mr_ble_rxadc_delay_i);
1004a198:	4ad8      	ldr	r2, [pc, #864]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a19a:	2392      	movs	r3, #146	@ 0x92
1004a19c:	009b      	lsls	r3, r3, #2
1004a19e:	58d3      	ldr	r3, [r2, r3]
1004a1a0:	2207      	movs	r2, #7
1004a1a2:	4393      	bics	r3, r2
1004a1a4:	001a      	movs	r2, r3
1004a1a6:	6a3b      	ldr	r3, [r7, #32]
1004a1a8:	2107      	movs	r1, #7
1004a1aa:	400b      	ands	r3, r1
1004a1ac:	49d3      	ldr	r1, [pc, #844]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a1ae:	431a      	orrs	r2, r3
1004a1b0:	2392      	movs	r3, #146	@ 0x92
1004a1b2:	009b      	lsls	r3, r3, #2
1004a1b4:	50ca      	str	r2, [r1, r3]
    MODIFY_REG_FIELD(RRM->RXADC_ANA_USR, RRM_RXADC_ANA_USR_RFD_RXADC_DELAYTRIM_Q, mr_ble_rxadc_delay_q);
1004a1b6:	4ad1      	ldr	r2, [pc, #836]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a1b8:	2392      	movs	r3, #146	@ 0x92
1004a1ba:	009b      	lsls	r3, r3, #2
1004a1bc:	58d3      	ldr	r3, [r2, r3]
1004a1be:	2238      	movs	r2, #56	@ 0x38
1004a1c0:	4393      	bics	r3, r2
1004a1c2:	001a      	movs	r2, r3
1004a1c4:	69fb      	ldr	r3, [r7, #28]
1004a1c6:	00db      	lsls	r3, r3, #3
1004a1c8:	2138      	movs	r1, #56	@ 0x38
1004a1ca:	400b      	ands	r3, r1
1004a1cc:	49cb      	ldr	r1, [pc, #812]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a1ce:	431a      	orrs	r2, r3
1004a1d0:	2392      	movs	r3, #146	@ 0x92
1004a1d2:	009b      	lsls	r3, r3, #2
1004a1d4:	50ca      	str	r2, [r1, r3]
  }

  /* Radio AFC configuration */
  MODIFY_REG(RRM->AFC1_DIG_ENG, RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER | RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE,
1004a1d6:	4ac9      	ldr	r2, [pc, #804]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a1d8:	23a4      	movs	r3, #164	@ 0xa4
1004a1da:	005b      	lsls	r3, r3, #1
1004a1dc:	58d3      	ldr	r3, [r2, r3]
1004a1de:	22ff      	movs	r2, #255	@ 0xff
1004a1e0:	4393      	bics	r3, r2
1004a1e2:	49c6      	ldr	r1, [pc, #792]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a1e4:	2255      	movs	r2, #85	@ 0x55
1004a1e6:	431a      	orrs	r2, r3
1004a1e8:	23a4      	movs	r3, #164	@ 0xa4
1004a1ea:	005b      	lsls	r3, r3, #1
1004a1ec:	50ca      	str	r2, [r1, r3]
             ((AFC_DELAY_BEFORE << RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_BEFORE_Msk) |
             ((AFC_DELAY_AFTER << RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Pos) & RRM_AFC1_DIG_ENG_AFC_DELAY_AFTER_Msk));
  MODIFY_REG(RRM->CR0_DIG_ENG, RRM_CR0_DIG_ENG_CR_GAIN_BEFORE | RRM_CR0_DIG_ENG_CR_GAIN_AFTER,
1004a1ee:	4ac3      	ldr	r2, [pc, #780]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a1f0:	23aa      	movs	r3, #170	@ 0xaa
1004a1f2:	005b      	lsls	r3, r3, #1
1004a1f4:	58d3      	ldr	r3, [r2, r3]
1004a1f6:	22ff      	movs	r2, #255	@ 0xff
1004a1f8:	4393      	bics	r3, r2
1004a1fa:	49c0      	ldr	r1, [pc, #768]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a1fc:	2266      	movs	r2, #102	@ 0x66
1004a1fe:	431a      	orrs	r2, r3
1004a200:	23aa      	movs	r3, #170	@ 0xaa
1004a202:	005b      	lsls	r3, r3, #1
1004a204:	50ca      	str	r2, [r1, r3]
             ((CR_GAIN_BEFORE << RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_BEFORE_Msk) |
             ((CR_GAIN_AFTER << RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Pos) & RRM_CR0_DIG_ENG_CR_GAIN_AFTER_Msk));
  MODIFY_REG(RRM->CR0_LR, RRM_CR0_LR_CR_LR_GAIN_BEFORE | RRM_CR0_LR_CR_LR_GAIN_AFTER,
1004a206:	4abd      	ldr	r2, [pc, #756]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a208:	23b4      	movs	r3, #180	@ 0xb4
1004a20a:	005b      	lsls	r3, r3, #1
1004a20c:	58d3      	ldr	r3, [r2, r3]
1004a20e:	22ff      	movs	r2, #255	@ 0xff
1004a210:	4393      	bics	r3, r2
1004a212:	49ba      	ldr	r1, [pc, #744]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a214:	2255      	movs	r2, #85	@ 0x55
1004a216:	431a      	orrs	r2, r3
1004a218:	23b4      	movs	r3, #180	@ 0xb4
1004a21a:	005b      	lsls	r3, r3, #1
1004a21c:	50ca      	str	r2, [r1, r3]
             ((CR_LR_GAIN_BEFORE << RRM_CR0_LR_CR_LR_GAIN_BEFORE_Pos) & RRM_CR0_LR_CR_LR_GAIN_BEFORE_Msk) |
             ((CR_LR_GAIN_AFTER << RRM_CR0_LR_CR_LR_GAIN_AFTER_Pos) & RRM_CR0_LR_CR_LR_GAIN_AFTER_Msk));

  /* Radio RSSI Threshold configuration */
  MODIFY_REG_FIELD(RRM->LR_RSSI_THR_DIG_ENG, RRM_LR_RSSI_THR_DIG_ENG_LR_RSSI_THR, LR_RSSI_THR);
1004a21e:	4ab7      	ldr	r2, [pc, #732]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a220:	23c4      	movs	r3, #196	@ 0xc4
1004a222:	005b      	lsls	r3, r3, #1
1004a224:	58d3      	ldr	r3, [r2, r3]
1004a226:	22ff      	movs	r2, #255	@ 0xff
1004a228:	4393      	bics	r3, r2
1004a22a:	49b4      	ldr	r1, [pc, #720]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a22c:	221d      	movs	r2, #29
1004a22e:	431a      	orrs	r2, r3
1004a230:	23c4      	movs	r3, #196	@ 0xc4
1004a232:	005b      	lsls	r3, r3, #1
1004a234:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_PD_THR_DIG_ENG, RRM_LR_PD_THR_DIG_ENG_LR_PD_THR, LR_PD_THR);
1004a236:	4ab1      	ldr	r2, [pc, #708]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a238:	23c2      	movs	r3, #194	@ 0xc2
1004a23a:	005b      	lsls	r3, r3, #1
1004a23c:	58d3      	ldr	r3, [r2, r3]
1004a23e:	22ff      	movs	r2, #255	@ 0xff
1004a240:	4393      	bics	r3, r2
1004a242:	49ae      	ldr	r1, [pc, #696]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a244:	2259      	movs	r2, #89	@ 0x59
1004a246:	431a      	orrs	r2, r3
1004a248:	23c2      	movs	r3, #194	@ 0xc2
1004a24a:	005b      	lsls	r3, r3, #1
1004a24c:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->LR_AAC_THR_DIG_ENG, RRM_LR_AAC_THR_DIG_ENG_LR_AAC_THR, LR_AAC_THR);
1004a24e:	4aab      	ldr	r2, [pc, #684]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a250:	23c6      	movs	r3, #198	@ 0xc6
1004a252:	005b      	lsls	r3, r3, #1
1004a254:	58d3      	ldr	r3, [r2, r3]
1004a256:	22ff      	movs	r2, #255	@ 0xff
1004a258:	4393      	bics	r3, r2
1004a25a:	49a8      	ldr	r1, [pc, #672]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a25c:	2232      	movs	r2, #50	@ 0x32
1004a25e:	431a      	orrs	r2, r3
1004a260:	23c6      	movs	r3, #198	@ 0xc6
1004a262:	005b      	lsls	r3, r3, #1
1004a264:	50ca      	str	r2, [r1, r3]

  /* Enable Viterbi */
  SET_BIT(RRM->VIT_CONF_DIG_ENG, RRM_VIT_CONF_DIG_ENG_VIT_CONF_0);
1004a266:	4aa5      	ldr	r2, [pc, #660]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a268:	23b6      	movs	r3, #182	@ 0xb6
1004a26a:	005b      	lsls	r3, r3, #1
1004a26c:	58d3      	ldr	r3, [r2, r3]
1004a26e:	49a3      	ldr	r1, [pc, #652]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a270:	2201      	movs	r2, #1
1004a272:	431a      	orrs	r2, r3
1004a274:	23b6      	movs	r3, #182	@ 0xb6
1004a276:	005b      	lsls	r3, r3, #1
1004a278:	50ca      	str	r2, [r1, r3]

#if defined(STM32WB05) || defined(STM32WB09)
  MODIFY_REG_FIELD(RRM->ANTSW_DIG0_USR, RRM_ANTSW0_DIG_USR_RX_TIME_TO_SAMPLE, RX_TIME_TO_SAMPLE);
1004a27a:	4aa0      	ldr	r2, [pc, #640]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a27c:	23d0      	movs	r3, #208	@ 0xd0
1004a27e:	009b      	lsls	r3, r3, #2
1004a280:	58d3      	ldr	r3, [r2, r3]
1004a282:	22ff      	movs	r2, #255	@ 0xff
1004a284:	4393      	bics	r3, r2
1004a286:	499d      	ldr	r1, [pc, #628]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a288:	221f      	movs	r2, #31
1004a28a:	431a      	orrs	r2, r3
1004a28c:	23d0      	movs	r3, #208	@ 0xd0
1004a28e:	009b      	lsls	r3, r3, #2
1004a290:	50ca      	str	r2, [r1, r3]
  MODIFY_REG_FIELD(RRM->ANTSW_DIG1_USR, RRM_ANTSW1_DIG_USR_RX_TIME_TO_SWITCH, RX_TIME_TO_SWITCH);
1004a292:	4a9a      	ldr	r2, [pc, #616]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a294:	23d1      	movs	r3, #209	@ 0xd1
1004a296:	009b      	lsls	r3, r3, #2
1004a298:	58d3      	ldr	r3, [r2, r3]
1004a29a:	22ff      	movs	r2, #255	@ 0xff
1004a29c:	4393      	bics	r3, r2
1004a29e:	4997      	ldr	r1, [pc, #604]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a2a0:	2209      	movs	r2, #9
1004a2a2:	431a      	orrs	r2, r3
1004a2a4:	23d1      	movs	r3, #209	@ 0xd1
1004a2a6:	009b      	lsls	r3, r3, #2
1004a2a8:	50ca      	str	r2, [r1, r3]
#endif /* STM32WB05 or STM32WB09 */

  /*Set InitDelay*/
  LL_RADIO_SetWakeupInitDelay(INITDELAY_WAKEUP);
1004a2aa:	2040      	movs	r0, #64	@ 0x40
1004a2ac:	f7ff fd4c 	bl	10049d48 <LL_RADIO_SetWakeupInitDelay>
  LL_RADIO_SetTimer12InitDelayCal(INITDELAY_TIMER12_CAL);
1004a2b0:	203f      	movs	r0, #63	@ 0x3f
1004a2b2:	f7ff fd61 	bl	10049d78 <LL_RADIO_SetTimer12InitDelayCal>
  LL_RADIO_SetTimer12InitDelayNoCal(INITDELAY_TIMER2_NOCAL);
1004a2b6:	2009      	movs	r0, #9
1004a2b8:	f7ff fd78 	bl	10049dac <LL_RADIO_SetTimer12InitDelayNoCal>

  /*Set Init_radio_delay*/
  LL_RADIO_SetReceivedCalDelayChk(DELAYCHK_RECEIVE_CAL);
1004a2bc:	205a      	movs	r0, #90	@ 0x5a
1004a2be:	f7ff fdb7 	bl	10049e30 <LL_RADIO_SetReceivedCalDelayChk>
  LL_RADIO_SetReceivedNoCalDelayChk(DELAYCHK_RECEIVE_NOCAL);
1004a2c2:	2032      	movs	r0, #50	@ 0x32
1004a2c4:	f7ff fdce 	bl	10049e64 <LL_RADIO_SetReceivedNoCalDelayChk>
  LL_RADIO_SetTransmitCalDelayChk(DELAYCHK_TRANSMIT_CAL);
1004a2c8:	205a      	movs	r0, #90	@ 0x5a
1004a2ca:	f7ff fd83 	bl	10049dd4 <LL_RADIO_SetTransmitCalDelayChk>
  LL_RADIO_SetTransmitNoCalDelayChk(DELAYCHK_TRANSMIT_NOCAL);
1004a2ce:	2032      	movs	r0, #50	@ 0x32
1004a2d0:	f7ff fd96 	bl	10049e00 <LL_RADIO_SetTransmitNoCalDelayChk>

  /* Initial and final TX delays: control the on-air start time of the TX packet
  *  and the length of the packet "tail" after last bit is transmitted
  */
  LL_RADIO_SetTxDelayStart(TXDELAY_START);
1004a2d4:	2010      	movs	r0, #16
1004a2d6:	f7ff fe07 	bl	10049ee8 <LL_RADIO_SetTxDelayStart>
  LL_RADIO_SetTxDelayEnd(TXDELAY_END);
1004a2da:	2010      	movs	r0, #16
1004a2dc:	f7ff fe1e 	bl	10049f1c <LL_RADIO_SetTxDelayEnd>

  /* Timeout for TX ready signal from the radio FSM after the 2nd init phase
  *  has expired
  */
  LL_RADIO_SetTransmissionReadyTimeout(TXREADY_TIMEOUT);
1004a2e0:	2004      	movs	r0, #4
1004a2e2:	f7ff fe35 	bl	10049f50 <LL_RADIO_SetTransmissionReadyTimeout>

  /* Timing for the various programming phases of the radio, modem and memory
  *  pointers.
  */
  LL_RADIO_SetConfigurationEndDuration(CONFIG_END_DURATION);
1004a2e6:	2014      	movs	r0, #20
1004a2e8:	f7ff fdd0 	bl	10049e8c <LL_RADIO_SetConfigurationEndDuration>
  LL_RADIO_SetTxDataReadyCheck(CHECK_TXDATAREADY);
1004a2ec:	2005      	movs	r0, #5
1004a2ee:	f7ff fde3 	bl	10049eb8 <LL_RADIO_SetTxDataReadyCheck>

  LL_RADIO_ChkFlagAutoclearEnable_Enable();
1004a2f2:	f7ff fe43 	bl	10049f7c <LL_RADIO_ChkFlagAutoclearEnable_Enable>
  LL_RADIO_NoActiveLErrorInterrupt_Enable();
1004a2f6:	f7ff fe4f 	bl	10049f98 <LL_RADIO_NoActiveLErrorInterrupt_Enable>
  LL_RADIO_TxRxSkipInterrupt_Enable();
1004a2fa:	f7ff fe5b 	bl	10049fb4 <LL_RADIO_TxRxSkipInterrupt_Enable>

#if defined(GLOBAL_WORD6_DEFAULTANTENNAID_Msk)
  LL_RADIO_SetDefaultAntennaID(0);
1004a2fe:	2000      	movs	r0, #0
1004a300:	f7ff fe74 	bl	10049fec <LL_RADIO_SetDefaultAntennaID>
  /* The commands in the hot table start at word 4
  * The words 0 to 2 are used to point to the command list
  * for the various trigger events, word 3 is a null command
  * (see function BLEPLAT_CNTR_SetRadioConfigData)
  */
  index = 0;
1004a304:	2013      	movs	r0, #19
1004a306:	183b      	adds	r3, r7, r0
1004a308:	2200      	movs	r2, #0
1004a30a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a30c:	183b      	adds	r3, r7, r0
1004a30e:	781b      	ldrb	r3, [r3, #0]
1004a310:	183a      	adds	r2, r7, r0
1004a312:	1c59      	adds	r1, r3, #1
1004a314:	7011      	strb	r1, [r2, #0]
1004a316:	001a      	movs	r2, r3
1004a318:	697b      	ldr	r3, [r7, #20]
1004a31a:	189b      	adds	r3, r3, r2
1004a31c:	2201      	movs	r2, #1
1004a31e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS1_ANA_ENG;
1004a320:	183b      	adds	r3, r7, r0
1004a322:	781b      	ldrb	r3, [r3, #0]
1004a324:	183a      	adds	r2, r7, r0
1004a326:	1c59      	adds	r1, r3, #1
1004a328:	7011      	strb	r1, [r2, #0]
1004a32a:	001a      	movs	r2, r3
1004a32c:	697b      	ldr	r3, [r7, #20]
1004a32e:	189b      	adds	r3, r3, r2
1004a330:	225e      	movs	r2, #94	@ 0x5e
1004a332:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS1_ANA_ENG;
1004a334:	4a71      	ldr	r2, [pc, #452]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a336:	239e      	movs	r3, #158	@ 0x9e
1004a338:	009b      	lsls	r3, r3, #2
1004a33a:	58d1      	ldr	r1, [r2, r3]
1004a33c:	183b      	adds	r3, r7, r0
1004a33e:	781b      	ldrb	r3, [r3, #0]
1004a340:	0004      	movs	r4, r0
1004a342:	183a      	adds	r2, r7, r0
1004a344:	1c58      	adds	r0, r3, #1
1004a346:	7010      	strb	r0, [r2, #0]
1004a348:	001a      	movs	r2, r3
1004a34a:	697b      	ldr	r3, [r7, #20]
1004a34c:	189b      	adds	r3, r3, r2
1004a34e:	b2ca      	uxtb	r2, r1
1004a350:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a352:	0020      	movs	r0, r4
1004a354:	183b      	adds	r3, r7, r0
1004a356:	781b      	ldrb	r3, [r3, #0]
1004a358:	183a      	adds	r2, r7, r0
1004a35a:	1c59      	adds	r1, r3, #1
1004a35c:	7011      	strb	r1, [r2, #0]
1004a35e:	001a      	movs	r2, r3
1004a360:	697b      	ldr	r3, [r7, #20]
1004a362:	189b      	adds	r3, r3, r2
1004a364:	2201      	movs	r2, #1
1004a366:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CBIAS0_ANA_ENG;
1004a368:	183b      	adds	r3, r7, r0
1004a36a:	781b      	ldrb	r3, [r3, #0]
1004a36c:	183a      	adds	r2, r7, r0
1004a36e:	1c59      	adds	r1, r3, #1
1004a370:	7011      	strb	r1, [r2, #0]
1004a372:	001a      	movs	r2, r3
1004a374:	697b      	ldr	r3, [r7, #20]
1004a376:	189b      	adds	r3, r3, r2
1004a378:	225d      	movs	r2, #93	@ 0x5d
1004a37a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CBIAS0_ANA_ENG;
1004a37c:	4a5f      	ldr	r2, [pc, #380]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a37e:	239d      	movs	r3, #157	@ 0x9d
1004a380:	009b      	lsls	r3, r3, #2
1004a382:	58d1      	ldr	r1, [r2, r3]
1004a384:	183b      	adds	r3, r7, r0
1004a386:	781b      	ldrb	r3, [r3, #0]
1004a388:	0004      	movs	r4, r0
1004a38a:	183a      	adds	r2, r7, r0
1004a38c:	1c58      	adds	r0, r3, #1
1004a38e:	7010      	strb	r0, [r2, #0]
1004a390:	001a      	movs	r2, r3
1004a392:	697b      	ldr	r3, [r7, #20]
1004a394:	189b      	adds	r3, r3, r2
1004a396:	b2ca      	uxtb	r2, r1
1004a398:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004a39a:	0020      	movs	r0, r4
1004a39c:	183b      	adds	r3, r7, r0
1004a39e:	781b      	ldrb	r3, [r3, #0]
1004a3a0:	183a      	adds	r2, r7, r0
1004a3a2:	1c59      	adds	r1, r3, #1
1004a3a4:	7011      	strb	r1, [r2, #0]
1004a3a6:	001a      	movs	r2, r3
1004a3a8:	697b      	ldr	r3, [r7, #20]
1004a3aa:	189b      	adds	r3, r3, r2
1004a3ac:	2201      	movs	r2, #1
1004a3ae:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_RXADC_ANA_USR;
1004a3b0:	183b      	adds	r3, r7, r0
1004a3b2:	781b      	ldrb	r3, [r3, #0]
1004a3b4:	183a      	adds	r2, r7, r0
1004a3b6:	1c59      	adds	r1, r3, #1
1004a3b8:	7011      	strb	r1, [r2, #0]
1004a3ba:	001a      	movs	r2, r3
1004a3bc:	697b      	ldr	r3, [r7, #20]
1004a3be:	189b      	adds	r3, r3, r2
1004a3c0:	2252      	movs	r2, #82	@ 0x52
1004a3c2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->RXADC_ANA_USR;
1004a3c4:	4a4d      	ldr	r2, [pc, #308]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a3c6:	2392      	movs	r3, #146	@ 0x92
1004a3c8:	009b      	lsls	r3, r3, #2
1004a3ca:	58d1      	ldr	r1, [r2, r3]
1004a3cc:	183b      	adds	r3, r7, r0
1004a3ce:	781b      	ldrb	r3, [r3, #0]
1004a3d0:	0004      	movs	r4, r0
1004a3d2:	183a      	adds	r2, r7, r0
1004a3d4:	1c58      	adds	r0, r3, #1
1004a3d6:	7010      	strb	r0, [r2, #0]
1004a3d8:	001a      	movs	r2, r3
1004a3da:	697b      	ldr	r3, [r7, #20]
1004a3dc:	189b      	adds	r3, r3, r2
1004a3de:	b2ca      	uxtb	r2, r1
1004a3e0:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config[index++] = 0x01;
1004a3e2:	0020      	movs	r0, r4
1004a3e4:	183b      	adds	r3, r7, r0
1004a3e6:	781b      	ldrb	r3, [r3, #0]
1004a3e8:	183a      	adds	r2, r7, r0
1004a3ea:	1c59      	adds	r1, r3, #1
1004a3ec:	7011      	strb	r1, [r2, #0]
1004a3ee:	001a      	movs	r2, r3
1004a3f0:	697b      	ldr	r3, [r7, #20]
1004a3f2:	189b      	adds	r3, r3, r2
1004a3f4:	2201      	movs	r2, #1
1004a3f6:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_AFC1_DIG_ENG;
1004a3f8:	183b      	adds	r3, r7, r0
1004a3fa:	781b      	ldrb	r3, [r3, #0]
1004a3fc:	183a      	adds	r2, r7, r0
1004a3fe:	1c59      	adds	r1, r3, #1
1004a400:	7011      	strb	r1, [r2, #0]
1004a402:	001a      	movs	r2, r3
1004a404:	697b      	ldr	r3, [r7, #20]
1004a406:	189b      	adds	r3, r3, r2
1004a408:	2212      	movs	r2, #18
1004a40a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->AFC1_DIG_ENG;
1004a40c:	4a3b      	ldr	r2, [pc, #236]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a40e:	23a4      	movs	r3, #164	@ 0xa4
1004a410:	005b      	lsls	r3, r3, #1
1004a412:	58d1      	ldr	r1, [r2, r3]
1004a414:	183b      	adds	r3, r7, r0
1004a416:	781b      	ldrb	r3, [r3, #0]
1004a418:	0004      	movs	r4, r0
1004a41a:	183a      	adds	r2, r7, r0
1004a41c:	1c58      	adds	r0, r3, #1
1004a41e:	7010      	strb	r0, [r2, #0]
1004a420:	001a      	movs	r2, r3
1004a422:	697b      	ldr	r3, [r7, #20]
1004a424:	189b      	adds	r3, r3, r2
1004a426:	b2ca      	uxtb	r2, r1
1004a428:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a42a:	0020      	movs	r0, r4
1004a42c:	183b      	adds	r3, r7, r0
1004a42e:	781b      	ldrb	r3, [r3, #0]
1004a430:	183a      	adds	r2, r7, r0
1004a432:	1c59      	adds	r1, r3, #1
1004a434:	7011      	strb	r1, [r2, #0]
1004a436:	001a      	movs	r2, r3
1004a438:	697b      	ldr	r3, [r7, #20]
1004a43a:	189b      	adds	r3, r3, r2
1004a43c:	2201      	movs	r2, #1
1004a43e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_DIG_ENG;
1004a440:	183b      	adds	r3, r7, r0
1004a442:	781b      	ldrb	r3, [r3, #0]
1004a444:	183a      	adds	r2, r7, r0
1004a446:	1c59      	adds	r1, r3, #1
1004a448:	7011      	strb	r1, [r2, #0]
1004a44a:	001a      	movs	r2, r3
1004a44c:	697b      	ldr	r3, [r7, #20]
1004a44e:	189b      	adds	r3, r3, r2
1004a450:	2215      	movs	r2, #21
1004a452:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_DIG_ENG;
1004a454:	4a29      	ldr	r2, [pc, #164]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a456:	23aa      	movs	r3, #170	@ 0xaa
1004a458:	005b      	lsls	r3, r3, #1
1004a45a:	58d1      	ldr	r1, [r2, r3]
1004a45c:	183b      	adds	r3, r7, r0
1004a45e:	781b      	ldrb	r3, [r3, #0]
1004a460:	0004      	movs	r4, r0
1004a462:	183a      	adds	r2, r7, r0
1004a464:	1c58      	adds	r0, r3, #1
1004a466:	7010      	strb	r0, [r2, #0]
1004a468:	001a      	movs	r2, r3
1004a46a:	697b      	ldr	r3, [r7, #20]
1004a46c:	189b      	adds	r3, r3, r2
1004a46e:	b2ca      	uxtb	r2, r1
1004a470:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a472:	0020      	movs	r0, r4
1004a474:	183b      	adds	r3, r7, r0
1004a476:	781b      	ldrb	r3, [r3, #0]
1004a478:	183a      	adds	r2, r7, r0
1004a47a:	1c59      	adds	r1, r3, #1
1004a47c:	7011      	strb	r1, [r2, #0]
1004a47e:	001a      	movs	r2, r3
1004a480:	697b      	ldr	r3, [r7, #20]
1004a482:	189b      	adds	r3, r3, r2
1004a484:	2201      	movs	r2, #1
1004a486:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_CR0_LR;
1004a488:	183b      	adds	r3, r7, r0
1004a48a:	781b      	ldrb	r3, [r3, #0]
1004a48c:	183a      	adds	r2, r7, r0
1004a48e:	1c59      	adds	r1, r3, #1
1004a490:	7011      	strb	r1, [r2, #0]
1004a492:	001a      	movs	r2, r3
1004a494:	697b      	ldr	r3, [r7, #20]
1004a496:	189b      	adds	r3, r3, r2
1004a498:	221a      	movs	r2, #26
1004a49a:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->CR0_LR;
1004a49c:	4a17      	ldr	r2, [pc, #92]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a49e:	23b4      	movs	r3, #180	@ 0xb4
1004a4a0:	005b      	lsls	r3, r3, #1
1004a4a2:	58d1      	ldr	r1, [r2, r3]
1004a4a4:	183b      	adds	r3, r7, r0
1004a4a6:	781b      	ldrb	r3, [r3, #0]
1004a4a8:	0004      	movs	r4, r0
1004a4aa:	183a      	adds	r2, r7, r0
1004a4ac:	1c58      	adds	r0, r3, #1
1004a4ae:	7010      	strb	r0, [r2, #0]
1004a4b0:	001a      	movs	r2, r3
1004a4b2:	697b      	ldr	r3, [r7, #20]
1004a4b4:	189b      	adds	r3, r3, r2
1004a4b6:	b2ca      	uxtb	r2, r1
1004a4b8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a4ba:	0020      	movs	r0, r4
1004a4bc:	183b      	adds	r3, r7, r0
1004a4be:	781b      	ldrb	r3, [r3, #0]
1004a4c0:	183a      	adds	r2, r7, r0
1004a4c2:	1c59      	adds	r1, r3, #1
1004a4c4:	7011      	strb	r1, [r2, #0]
1004a4c6:	001a      	movs	r2, r3
1004a4c8:	697b      	ldr	r3, [r7, #20]
1004a4ca:	189b      	adds	r3, r3, r2
1004a4cc:	2201      	movs	r2, #1
1004a4ce:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_RSSI_THR_DIG_ENG;
1004a4d0:	183b      	adds	r3, r7, r0
1004a4d2:	781b      	ldrb	r3, [r3, #0]
1004a4d4:	183a      	adds	r2, r7, r0
1004a4d6:	1c59      	adds	r1, r3, #1
1004a4d8:	7011      	strb	r1, [r2, #0]
1004a4da:	001a      	movs	r2, r3
1004a4dc:	697b      	ldr	r3, [r7, #20]
1004a4de:	189b      	adds	r3, r3, r2
1004a4e0:	2222      	movs	r2, #34	@ 0x22
1004a4e2:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_RSSI_THR_DIG_ENG;
1004a4e4:	4a05      	ldr	r2, [pc, #20]	@ (1004a4fc <HAL_RADIO_Init+0x488>)
1004a4e6:	23c4      	movs	r3, #196	@ 0xc4
1004a4e8:	005b      	lsls	r3, r3, #1
1004a4ea:	58d1      	ldr	r1, [r2, r3]
1004a4ec:	183b      	adds	r3, r7, r0
1004a4ee:	781b      	ldrb	r3, [r3, #0]
1004a4f0:	0004      	movs	r4, r0
1004a4f2:	e005      	b.n	1004a500 <HAL_RADIO_Init+0x48c>
1004a4f4:	200000c0 	.word	0x200000c0
1004a4f8:	60001800 	.word	0x60001800
1004a4fc:	60001400 	.word	0x60001400
1004a500:	183a      	adds	r2, r7, r0
1004a502:	1c58      	adds	r0, r3, #1
1004a504:	7010      	strb	r0, [r2, #0]
1004a506:	001a      	movs	r2, r3
1004a508:	697b      	ldr	r3, [r7, #20]
1004a50a:	189b      	adds	r3, r3, r2
1004a50c:	b2ca      	uxtb	r2, r1
1004a50e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a510:	0020      	movs	r0, r4
1004a512:	183b      	adds	r3, r7, r0
1004a514:	781b      	ldrb	r3, [r3, #0]
1004a516:	183a      	adds	r2, r7, r0
1004a518:	1c59      	adds	r1, r3, #1
1004a51a:	7011      	strb	r1, [r2, #0]
1004a51c:	001a      	movs	r2, r3
1004a51e:	697b      	ldr	r3, [r7, #20]
1004a520:	189b      	adds	r3, r3, r2
1004a522:	2201      	movs	r2, #1
1004a524:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_PD_THR_DIG_ENG;
1004a526:	183b      	adds	r3, r7, r0
1004a528:	781b      	ldrb	r3, [r3, #0]
1004a52a:	183a      	adds	r2, r7, r0
1004a52c:	1c59      	adds	r1, r3, #1
1004a52e:	7011      	strb	r1, [r2, #0]
1004a530:	001a      	movs	r2, r3
1004a532:	697b      	ldr	r3, [r7, #20]
1004a534:	189b      	adds	r3, r3, r2
1004a536:	2221      	movs	r2, #33	@ 0x21
1004a538:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_PD_THR_DIG_ENG;
1004a53a:	4a6d      	ldr	r2, [pc, #436]	@ (1004a6f0 <HAL_RADIO_Init+0x67c>)
1004a53c:	23c2      	movs	r3, #194	@ 0xc2
1004a53e:	005b      	lsls	r3, r3, #1
1004a540:	58d1      	ldr	r1, [r2, r3]
1004a542:	183b      	adds	r3, r7, r0
1004a544:	781b      	ldrb	r3, [r3, #0]
1004a546:	0004      	movs	r4, r0
1004a548:	183a      	adds	r2, r7, r0
1004a54a:	1c58      	adds	r0, r3, #1
1004a54c:	7010      	strb	r0, [r2, #0]
1004a54e:	001a      	movs	r2, r3
1004a550:	697b      	ldr	r3, [r7, #20]
1004a552:	189b      	adds	r3, r3, r2
1004a554:	b2ca      	uxtb	r2, r1
1004a556:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a558:	0020      	movs	r0, r4
1004a55a:	183b      	adds	r3, r7, r0
1004a55c:	781b      	ldrb	r3, [r3, #0]
1004a55e:	183a      	adds	r2, r7, r0
1004a560:	1c59      	adds	r1, r3, #1
1004a562:	7011      	strb	r1, [r2, #0]
1004a564:	001a      	movs	r2, r3
1004a566:	697b      	ldr	r3, [r7, #20]
1004a568:	189b      	adds	r3, r3, r2
1004a56a:	2201      	movs	r2, #1
1004a56c:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_LR_AAC_THR_DIG_ENG;
1004a56e:	183b      	adds	r3, r7, r0
1004a570:	781b      	ldrb	r3, [r3, #0]
1004a572:	183a      	adds	r2, r7, r0
1004a574:	1c59      	adds	r1, r3, #1
1004a576:	7011      	strb	r1, [r2, #0]
1004a578:	001a      	movs	r2, r3
1004a57a:	697b      	ldr	r3, [r7, #20]
1004a57c:	189b      	adds	r3, r3, r2
1004a57e:	2223      	movs	r2, #35	@ 0x23
1004a580:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->LR_AAC_THR_DIG_ENG;
1004a582:	4a5b      	ldr	r2, [pc, #364]	@ (1004a6f0 <HAL_RADIO_Init+0x67c>)
1004a584:	23c6      	movs	r3, #198	@ 0xc6
1004a586:	005b      	lsls	r3, r3, #1
1004a588:	58d1      	ldr	r1, [r2, r3]
1004a58a:	183b      	adds	r3, r7, r0
1004a58c:	781b      	ldrb	r3, [r3, #0]
1004a58e:	0004      	movs	r4, r0
1004a590:	183a      	adds	r2, r7, r0
1004a592:	1c58      	adds	r0, r3, #1
1004a594:	7010      	strb	r0, [r2, #0]
1004a596:	001a      	movs	r2, r3
1004a598:	697b      	ldr	r3, [r7, #20]
1004a59a:	189b      	adds	r3, r3, r2
1004a59c:	b2ca      	uxtb	r2, r1
1004a59e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a5a0:	0020      	movs	r0, r4
1004a5a2:	183b      	adds	r3, r7, r0
1004a5a4:	781b      	ldrb	r3, [r3, #0]
1004a5a6:	183a      	adds	r2, r7, r0
1004a5a8:	1c59      	adds	r1, r3, #1
1004a5aa:	7011      	strb	r1, [r2, #0]
1004a5ac:	001a      	movs	r2, r3
1004a5ae:	697b      	ldr	r3, [r7, #20]
1004a5b0:	189b      	adds	r3, r3, r2
1004a5b2:	2201      	movs	r2, #1
1004a5b4:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_VIT_CONF_DIG_ENG;
1004a5b6:	183b      	adds	r3, r7, r0
1004a5b8:	781b      	ldrb	r3, [r3, #0]
1004a5ba:	183a      	adds	r2, r7, r0
1004a5bc:	1c59      	adds	r1, r3, #1
1004a5be:	7011      	strb	r1, [r2, #0]
1004a5c0:	001a      	movs	r2, r3
1004a5c2:	697b      	ldr	r3, [r7, #20]
1004a5c4:	189b      	adds	r3, r3, r2
1004a5c6:	221b      	movs	r2, #27
1004a5c8:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->VIT_CONF_DIG_ENG;
1004a5ca:	4a49      	ldr	r2, [pc, #292]	@ (1004a6f0 <HAL_RADIO_Init+0x67c>)
1004a5cc:	23b6      	movs	r3, #182	@ 0xb6
1004a5ce:	005b      	lsls	r3, r3, #1
1004a5d0:	58d1      	ldr	r1, [r2, r3]
1004a5d2:	183b      	adds	r3, r7, r0
1004a5d4:	781b      	ldrb	r3, [r3, #0]
1004a5d6:	0004      	movs	r4, r0
1004a5d8:	183a      	adds	r2, r7, r0
1004a5da:	1c58      	adds	r0, r3, #1
1004a5dc:	7010      	strb	r0, [r2, #0]
1004a5de:	001a      	movs	r2, r3
1004a5e0:	697b      	ldr	r3, [r7, #20]
1004a5e2:	189b      	adds	r3, r3, r2
1004a5e4:	b2ca      	uxtb	r2, r1
1004a5e6:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  hot_table_radio_config[index++] = 0x01;
1004a5e8:	0020      	movs	r0, r4
1004a5ea:	183b      	adds	r3, r7, r0
1004a5ec:	781b      	ldrb	r3, [r3, #0]
1004a5ee:	183a      	adds	r2, r7, r0
1004a5f0:	1c59      	adds	r1, r3, #1
1004a5f2:	7011      	strb	r1, [r2, #0]
1004a5f4:	001a      	movs	r2, r3
1004a5f6:	697b      	ldr	r3, [r7, #20]
1004a5f8:	189b      	adds	r3, r3, r2
1004a5fa:	2201      	movs	r2, #1
1004a5fc:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG0_USR;
1004a5fe:	183b      	adds	r3, r7, r0
1004a600:	781b      	ldrb	r3, [r3, #0]
1004a602:	183a      	adds	r2, r7, r0
1004a604:	1c59      	adds	r1, r3, #1
1004a606:	7011      	strb	r1, [r2, #0]
1004a608:	001a      	movs	r2, r3
1004a60a:	697b      	ldr	r3, [r7, #20]
1004a60c:	189b      	adds	r3, r3, r2
1004a60e:	2290      	movs	r2, #144	@ 0x90
1004a610:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG0_USR;
1004a612:	4a37      	ldr	r2, [pc, #220]	@ (1004a6f0 <HAL_RADIO_Init+0x67c>)
1004a614:	23d0      	movs	r3, #208	@ 0xd0
1004a616:	009b      	lsls	r3, r3, #2
1004a618:	58d1      	ldr	r1, [r2, r3]
1004a61a:	183b      	adds	r3, r7, r0
1004a61c:	781b      	ldrb	r3, [r3, #0]
1004a61e:	0004      	movs	r4, r0
1004a620:	183a      	adds	r2, r7, r0
1004a622:	1c58      	adds	r0, r3, #1
1004a624:	7010      	strb	r0, [r2, #0]
1004a626:	001a      	movs	r2, r3
1004a628:	697b      	ldr	r3, [r7, #20]
1004a62a:	189b      	adds	r3, r3, r2
1004a62c:	b2ca      	uxtb	r2, r1
1004a62e:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = 0x01;
1004a630:	0020      	movs	r0, r4
1004a632:	183b      	adds	r3, r7, r0
1004a634:	781b      	ldrb	r3, [r3, #0]
1004a636:	183a      	adds	r2, r7, r0
1004a638:	1c59      	adds	r1, r3, #1
1004a63a:	7011      	strb	r1, [r2, #0]
1004a63c:	001a      	movs	r2, r3
1004a63e:	697b      	ldr	r3, [r7, #20]
1004a640:	189b      	adds	r3, r3, r2
1004a642:	2201      	movs	r2, #1
1004a644:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM_ANTSW_DIG1_USR;
1004a646:	183b      	adds	r3, r7, r0
1004a648:	781b      	ldrb	r3, [r3, #0]
1004a64a:	183a      	adds	r2, r7, r0
1004a64c:	1c59      	adds	r1, r3, #1
1004a64e:	7011      	strb	r1, [r2, #0]
1004a650:	001a      	movs	r2, r3
1004a652:	697b      	ldr	r3, [r7, #20]
1004a654:	189b      	adds	r3, r3, r2
1004a656:	2291      	movs	r2, #145	@ 0x91
1004a658:	701a      	strb	r2, [r3, #0]
  hot_table_radio_config[index++] = RRM->ANTSW_DIG1_USR;
1004a65a:	4a25      	ldr	r2, [pc, #148]	@ (1004a6f0 <HAL_RADIO_Init+0x67c>)
1004a65c:	23d1      	movs	r3, #209	@ 0xd1
1004a65e:	009b      	lsls	r3, r3, #2
1004a660:	58d1      	ldr	r1, [r2, r3]
1004a662:	183b      	adds	r3, r7, r0
1004a664:	781b      	ldrb	r3, [r3, #0]
1004a666:	0004      	movs	r4, r0
1004a668:	183a      	adds	r2, r7, r0
1004a66a:	1c58      	adds	r0, r3, #1
1004a66c:	7010      	strb	r0, [r2, #0]
1004a66e:	001a      	movs	r2, r3
1004a670:	697b      	ldr	r3, [r7, #20]
1004a672:	189b      	adds	r3, r3, r2
1004a674:	b2ca      	uxtb	r2, r1
1004a676:	701a      	strb	r2, [r3, #0]
#endif
  hot_table_radio_config[index++] = 0x00;
1004a678:	193b      	adds	r3, r7, r4
1004a67a:	781b      	ldrb	r3, [r3, #0]
1004a67c:	193a      	adds	r2, r7, r4
1004a67e:	1c59      	adds	r1, r3, #1
1004a680:	7011      	strb	r1, [r2, #0]
1004a682:	001a      	movs	r2, r3
1004a684:	697b      	ldr	r3, [r7, #20]
1004a686:	189b      	adds	r3, r3, r2
1004a688:	2200      	movs	r2, #0
1004a68a:	701a      	strb	r2, [r3, #0]

  hot_table_radio_config_u32[0] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 1 executed when Wakeup timer triggers */
1004a68c:	4a19      	ldr	r2, [pc, #100]	@ (1004a6f4 <HAL_RADIO_Init+0x680>)
1004a68e:	4b1a      	ldr	r3, [pc, #104]	@ (1004a6f8 <HAL_RADIO_Init+0x684>)
1004a690:	601a      	str	r2, [r3, #0]
  hot_table_radio_config_u32[1] = (uint32_t)(&hot_table_radio_config_u32[4]); /* Point to Port 0 command list 2 executed when Timer1 triggers       */
1004a692:	4a18      	ldr	r2, [pc, #96]	@ (1004a6f4 <HAL_RADIO_Init+0x680>)
1004a694:	4b18      	ldr	r3, [pc, #96]	@ (1004a6f8 <HAL_RADIO_Init+0x684>)
1004a696:	605a      	str	r2, [r3, #4]
  hot_table_radio_config_u32[2] = (uint32_t)(&hot_table_radio_config_u32[3]); /* Point to Port 0 command list 3 executed when Timer2 triggers       */
1004a698:	4a18      	ldr	r2, [pc, #96]	@ (1004a6fc <HAL_RADIO_Init+0x688>)
1004a69a:	4b17      	ldr	r3, [pc, #92]	@ (1004a6f8 <HAL_RADIO_Init+0x684>)
1004a69c:	609a      	str	r2, [r3, #8]
  hot_table_radio_config_u32[3] = 0x00000000;                /* Null command */
1004a69e:	4b16      	ldr	r3, [pc, #88]	@ (1004a6f8 <HAL_RADIO_Init+0x684>)
1004a6a0:	2200      	movs	r2, #0
1004a6a2:	60da      	str	r2, [r3, #12]

  LL_RADIO_SetRadioConfigurationAddressPointer(hot_table_radio_config_u32[0]);
1004a6a4:	4b14      	ldr	r3, [pc, #80]	@ (1004a6f8 <HAL_RADIO_Init+0x684>)
1004a6a6:	681b      	ldr	r3, [r3, #0]
1004a6a8:	0018      	movs	r0, r3
1004a6aa:	f7ff fb3d 	bl	10049d28 <LL_RADIO_SetRadioConfigurationAddressPointer>
  /* Reload radio config pointer */
  RRM->UDRA_CTRL0 = RRM_UDRA_CTRL0_RELOAD_RDCFGPTR;
1004a6ae:	4b10      	ldr	r3, [pc, #64]	@ (1004a6f0 <HAL_RADIO_Init+0x67c>)
1004a6b0:	2201      	movs	r2, #1
1004a6b2:	611a      	str	r2, [r3, #16]
  LL_RADIO_Active2ErrorInterrupt_Enable();
1004a6b4:	f7ff fc8c 	bl	10049fd0 <LL_RADIO_Active2ErrorInterrupt_Enable>
  globalParameters.back2backTime = BACK_TO_BACK_TIME;
  globalParameters.tone_start_stop_flag = 0;
#endif

  /*Clear all interrupts of the BLUE Controller*/
  uint32_t int_val_tmp = BLUE->INTERRUPT1REG;
1004a6b8:	23c0      	movs	r3, #192	@ 0xc0
1004a6ba:	05db      	lsls	r3, r3, #23
1004a6bc:	685b      	ldr	r3, [r3, #4]
1004a6be:	60fb      	str	r3, [r7, #12]
  BLUE->INTERRUPT1REG = int_val_tmp;
1004a6c0:	23c0      	movs	r3, #192	@ 0xc0
1004a6c2:	05db      	lsls	r3, r3, #23
1004a6c4:	68fa      	ldr	r2, [r7, #12]
1004a6c6:	605a      	str	r2, [r3, #4]

  /*BLE wake up IRQ Status clearing and enable*/
  WAKEUP->WAKEUP_BLE_IRQ_STATUS |= 1;
1004a6c8:	4b0d      	ldr	r3, [pc, #52]	@ (1004a700 <HAL_RADIO_Init+0x68c>)
1004a6ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004a6cc:	4b0c      	ldr	r3, [pc, #48]	@ (1004a700 <HAL_RADIO_Init+0x68c>)
1004a6ce:	2101      	movs	r1, #1
1004a6d0:	430a      	orrs	r2, r1
1004a6d2:	645a      	str	r2, [r3, #68]	@ 0x44
  WAKEUP->WAKEUP_BLE_IRQ_ENABLE |= 1;
1004a6d4:	4b0a      	ldr	r3, [pc, #40]	@ (1004a700 <HAL_RADIO_Init+0x68c>)
1004a6d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004a6d8:	4b09      	ldr	r3, [pc, #36]	@ (1004a700 <HAL_RADIO_Init+0x68c>)
1004a6da:	2101      	movs	r1, #1
1004a6dc:	430a      	orrs	r2, r1
1004a6de:	641a      	str	r2, [r3, #64]	@ 0x40
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  int_val_tmp = BLUE->INTERRUPT1REG;
1004a6e0:	23c0      	movs	r3, #192	@ 0xc0
1004a6e2:	05db      	lsls	r3, r3, #23
1004a6e4:	685b      	ldr	r3, [r3, #4]
1004a6e6:	60fb      	str	r3, [r7, #12]

  return;
1004a6e8:	46c0      	nop			@ (mov r8, r8)
}
1004a6ea:	46bd      	mov	sp, r7
1004a6ec:	b00d      	add	sp, #52	@ 0x34
1004a6ee:	bd90      	pop	{r4, r7, pc}
1004a6f0:	60001400 	.word	0x60001400
1004a6f4:	20002848 	.word	0x20002848
1004a6f8:	20002838 	.word	0x20002838
1004a6fc:	20002844 	.word	0x20002844
1004a700:	60001800 	.word	0x60001800

1004a704 <HAL_RADIO_ReadRSSI>:
/**
  * @brief  Read RSSI
  * @retval int8_t: RSSI in dBm
  */
int8_t HAL_RADIO_ReadRSSI(void)
{
1004a704:	b580      	push	{r7, lr}
1004a706:	b086      	sub	sp, #24
1004a708:	af00      	add	r7, sp, #0
  int32_t rssi_dbm;
  uint32_t rssi0 = RRM->RSSI0_DIG_OUT;
1004a70a:	4a24      	ldr	r2, [pc, #144]	@ (1004a79c <HAL_RADIO_ReadRSSI+0x98>)
1004a70c:	23a9      	movs	r3, #169	@ 0xa9
1004a70e:	009b      	lsls	r3, r3, #2
1004a710:	58d3      	ldr	r3, [r2, r3]
1004a712:	60fb      	str	r3, [r7, #12]
  uint32_t rssi1 = RRM->RSSI1_DIG_OUT;
1004a714:	4a21      	ldr	r2, [pc, #132]	@ (1004a79c <HAL_RADIO_ReadRSSI+0x98>)
1004a716:	23aa      	movs	r3, #170	@ 0xaa
1004a718:	009b      	lsls	r3, r3, #2
1004a71a:	58d3      	ldr	r3, [r2, r3]
1004a71c:	60bb      	str	r3, [r7, #8]

  uint32_t rssi_int16 = ((rssi1 & 0xFF) << 8) | (rssi0 & 0xFF);
1004a71e:	68bb      	ldr	r3, [r7, #8]
1004a720:	021b      	lsls	r3, r3, #8
1004a722:	041b      	lsls	r3, r3, #16
1004a724:	0c1a      	lsrs	r2, r3, #16
1004a726:	68fb      	ldr	r3, [r7, #12]
1004a728:	21ff      	movs	r1, #255	@ 0xff
1004a72a:	400b      	ands	r3, r1
1004a72c:	4313      	orrs	r3, r2
1004a72e:	613b      	str	r3, [r7, #16]
  uint32_t reg_agc = RRM->AGC_DIG_OUT;
1004a730:	4a1a      	ldr	r2, [pc, #104]	@ (1004a79c <HAL_RADIO_ReadRSSI+0x98>)
1004a732:	23ab      	movs	r3, #171	@ 0xab
1004a734:	009b      	lsls	r3, r3, #2
1004a736:	58d3      	ldr	r3, [r2, r3]
1004a738:	607b      	str	r3, [r7, #4]

  if ((rssi_int16 == 0U) || (reg_agc > 0xbU))
1004a73a:	693b      	ldr	r3, [r7, #16]
1004a73c:	2b00      	cmp	r3, #0
1004a73e:	d002      	beq.n	1004a746 <HAL_RADIO_ReadRSSI+0x42>
1004a740:	687b      	ldr	r3, [r7, #4]
1004a742:	2b0b      	cmp	r3, #11
1004a744:	d902      	bls.n	1004a74c <HAL_RADIO_ReadRSSI+0x48>
  {
    rssi_dbm = 127 ;
1004a746:	237f      	movs	r3, #127	@ 0x7f
1004a748:	617b      	str	r3, [r7, #20]
1004a74a:	e020      	b.n	1004a78e <HAL_RADIO_ReadRSSI+0x8a>
  }
  else
  {
    rssi_dbm = (int32_t)reg_agc * 6 - RSSI_OFFSET;//127 ;
1004a74c:	687a      	ldr	r2, [r7, #4]
1004a74e:	0013      	movs	r3, r2
1004a750:	005b      	lsls	r3, r3, #1
1004a752:	189b      	adds	r3, r3, r2
1004a754:	005b      	lsls	r3, r3, #1
1004a756:	3b77      	subs	r3, #119	@ 0x77
1004a758:	617b      	str	r3, [r7, #20]
    while (rssi_int16 > 30U)
1004a75a:	e005      	b.n	1004a768 <HAL_RADIO_ReadRSSI+0x64>
    {
      rssi_dbm = rssi_dbm + 6 ;
1004a75c:	697b      	ldr	r3, [r7, #20]
1004a75e:	3306      	adds	r3, #6
1004a760:	617b      	str	r3, [r7, #20]
      rssi_int16 = (rssi_int16 >> 1) ;
1004a762:	693b      	ldr	r3, [r7, #16]
1004a764:	085b      	lsrs	r3, r3, #1
1004a766:	613b      	str	r3, [r7, #16]
    while (rssi_int16 > 30U)
1004a768:	693b      	ldr	r3, [r7, #16]
1004a76a:	2b1e      	cmp	r3, #30
1004a76c:	d8f6      	bhi.n	1004a75c <HAL_RADIO_ReadRSSI+0x58>
    }
    rssi_dbm = rssi_dbm + (int32_t)(uint32_t)((417U * rssi_int16 + 18080U) >> 10);
1004a76e:	693a      	ldr	r2, [r7, #16]
1004a770:	0013      	movs	r3, r2
1004a772:	005b      	lsls	r3, r3, #1
1004a774:	189b      	adds	r3, r3, r2
1004a776:	009b      	lsls	r3, r3, #2
1004a778:	189b      	adds	r3, r3, r2
1004a77a:	015b      	lsls	r3, r3, #5
1004a77c:	189b      	adds	r3, r3, r2
1004a77e:	4a08      	ldr	r2, [pc, #32]	@ (1004a7a0 <HAL_RADIO_ReadRSSI+0x9c>)
1004a780:	4694      	mov	ip, r2
1004a782:	4463      	add	r3, ip
1004a784:	0a9b      	lsrs	r3, r3, #10
1004a786:	001a      	movs	r2, r3
1004a788:	697b      	ldr	r3, [r7, #20]
1004a78a:	189b      	adds	r3, r3, r2
1004a78c:	617b      	str	r3, [r7, #20]
  }
  return (int8_t)rssi_dbm;
1004a78e:	697b      	ldr	r3, [r7, #20]
1004a790:	b25b      	sxtb	r3, r3
}
1004a792:	0018      	movs	r0, r3
1004a794:	46bd      	mov	sp, r7
1004a796:	b006      	add	sp, #24
1004a798:	bd80      	pop	{r7, pc}
1004a79a:	46c0      	nop			@ (mov r8, r8)
1004a79c:	60001400 	.word	0x60001400
1004a7a0:	000046a0 	.word	0x000046a0

1004a7a4 <HAL_RADIO_TXRX_IRQHandler>:
__weak void HAL_RADIO_TxRxSeqCallback(void)
{
}

void HAL_RADIO_TXRX_IRQHandler(void)
{
1004a7a4:	b580      	push	{r7, lr}
1004a7a6:	b082      	sub	sp, #8
1004a7a8:	af00      	add	r7, sp, #0
  uint32_t blue_status = BLUE->STATUSREG;
1004a7aa:	23c0      	movs	r3, #192	@ 0xc0
1004a7ac:	05db      	lsls	r3, r3, #23
1004a7ae:	69db      	ldr	r3, [r3, #28]
1004a7b0:	607b      	str	r3, [r7, #4]
  uint32_t blue_interrupt = BLUE->INTERRUPT1REG;
1004a7b2:	23c0      	movs	r3, #192	@ 0xc0
1004a7b4:	05db      	lsls	r3, r3, #23
1004a7b6:	685b      	ldr	r3, [r3, #4]
1004a7b8:	603b      	str	r3, [r7, #0]

  /** clear all pending interrupts */
  BLUE->INTERRUPT1REG = blue_interrupt;
1004a7ba:	23c0      	movs	r3, #192	@ 0xc0
1004a7bc:	05db      	lsls	r3, r3, #23
1004a7be:	683a      	ldr	r2, [r7, #0]
1004a7c0:	605a      	str	r2, [r3, #4]

  HAL_RADIO_TIMER_EndOfRadioActivityIsr();
1004a7c2:	f000 fcd3 	bl	1004b16c <HAL_RADIO_TIMER_EndOfRadioActivityIsr>

#if (USE_RADIO_PROPRIETARY_DRIVER == 1)
  HAL_RADIO_ActionPacketIsr(blue_status | blue_interrupt);
#endif

  HAL_RADIO_TxRxCallback(blue_status | blue_interrupt);
1004a7c6:	687a      	ldr	r2, [r7, #4]
1004a7c8:	683b      	ldr	r3, [r7, #0]
1004a7ca:	4313      	orrs	r3, r2
1004a7cc:	0018      	movs	r0, r3
1004a7ce:	f007 f9ce 	bl	10051b6e <HAL_RADIO_TxRxCallback>

  HAL_RADIO_TIMER_RadioTimerIsr();
1004a7d2:	f000 fcc5 	bl	1004b160 <HAL_RADIO_TIMER_RadioTimerIsr>
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  blue_interrupt = BLUE->INTERRUPT1REG;
1004a7d6:	23c0      	movs	r3, #192	@ 0xc0
1004a7d8:	05db      	lsls	r3, r3, #23
1004a7da:	685b      	ldr	r3, [r3, #4]
1004a7dc:	603b      	str	r3, [r7, #0]
}
1004a7de:	46c0      	nop			@ (mov r8, r8)
1004a7e0:	46bd      	mov	sp, r7
1004a7e2:	b002      	add	sp, #8
1004a7e4:	bd80      	pop	{r7, pc}

1004a7e6 <HAL_RADIO_TXRX_SEQ_IRQHandler>:


void HAL_RADIO_TXRX_SEQ_IRQHandler(void)
{
1004a7e6:	b580      	push	{r7, lr}
1004a7e8:	af00      	add	r7, sp, #0
  HAL_RADIO_TxRxSeqCallback();
1004a7ea:	f006 ffe5 	bl	100517b8 <HAL_RADIO_TxRxSeqCallback>
}
1004a7ee:	46c0      	nop			@ (mov r8, r8)
1004a7f0:	46bd      	mov	sp, r7
1004a7f2:	bd80      	pop	{r7, pc}

1004a7f4 <__NVIC_EnableIRQ>:
{
1004a7f4:	b580      	push	{r7, lr}
1004a7f6:	b082      	sub	sp, #8
1004a7f8:	af00      	add	r7, sp, #0
1004a7fa:	0002      	movs	r2, r0
1004a7fc:	1dfb      	adds	r3, r7, #7
1004a7fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
1004a800:	1dfb      	adds	r3, r7, #7
1004a802:	781b      	ldrb	r3, [r3, #0]
1004a804:	2b7f      	cmp	r3, #127	@ 0x7f
1004a806:	d809      	bhi.n	1004a81c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1004a808:	1dfb      	adds	r3, r7, #7
1004a80a:	781b      	ldrb	r3, [r3, #0]
1004a80c:	001a      	movs	r2, r3
1004a80e:	231f      	movs	r3, #31
1004a810:	401a      	ands	r2, r3
1004a812:	4b04      	ldr	r3, [pc, #16]	@ (1004a824 <__NVIC_EnableIRQ+0x30>)
1004a814:	2101      	movs	r1, #1
1004a816:	4091      	lsls	r1, r2
1004a818:	000a      	movs	r2, r1
1004a81a:	601a      	str	r2, [r3, #0]
}
1004a81c:	46c0      	nop			@ (mov r8, r8)
1004a81e:	46bd      	mov	sp, r7
1004a820:	b002      	add	sp, #8
1004a822:	bd80      	pop	{r7, pc}
1004a824:	e000e100 	.word	0xe000e100

1004a828 <LL_RADIO_TIMER_EnableTimer1>:
{
1004a828:	b580      	push	{r7, lr}
1004a82a:	b082      	sub	sp, #8
1004a82c:	af00      	add	r7, sp, #0
1004a82e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, LL_RADIO_TIMER_1);
1004a830:	687b      	ldr	r3, [r7, #4]
1004a832:	68db      	ldr	r3, [r3, #12]
1004a834:	2203      	movs	r2, #3
1004a836:	4393      	bics	r3, r2
1004a838:	2202      	movs	r2, #2
1004a83a:	431a      	orrs	r2, r3
1004a83c:	687b      	ldr	r3, [r7, #4]
1004a83e:	60da      	str	r2, [r3, #12]
}
1004a840:	46c0      	nop			@ (mov r8, r8)
1004a842:	46bd      	mov	sp, r7
1004a844:	b002      	add	sp, #8
1004a846:	bd80      	pop	{r7, pc}

1004a848 <LL_RADIO_TIMER_DisableTimer1>:
{
1004a848:	b580      	push	{r7, lr}
1004a84a:	b082      	sub	sp, #8
1004a84c:	af00      	add	r7, sp, #0
1004a84e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004a850:	687b      	ldr	r3, [r7, #4]
1004a852:	68db      	ldr	r3, [r3, #12]
1004a854:	2203      	movs	r2, #3
1004a856:	4393      	bics	r3, r2
1004a858:	001a      	movs	r2, r3
1004a85a:	687b      	ldr	r3, [r7, #4]
1004a85c:	60da      	str	r2, [r3, #12]
}
1004a85e:	46c0      	nop			@ (mov r8, r8)
1004a860:	46bd      	mov	sp, r7
1004a862:	b002      	add	sp, #8
1004a864:	bd80      	pop	{r7, pc}

1004a866 <LL_RADIO_TIMER_DisableTimer2>:
{
1004a866:	b580      	push	{r7, lr}
1004a868:	b082      	sub	sp, #8
1004a86a:	af00      	add	r7, sp, #0
1004a86c:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEx->TIMEOUTDESTREG, BLUE_TIMEOUTDESTREG_DESTINATION, 0);
1004a86e:	687b      	ldr	r3, [r7, #4]
1004a870:	68db      	ldr	r3, [r3, #12]
1004a872:	2203      	movs	r2, #3
1004a874:	4393      	bics	r3, r2
1004a876:	001a      	movs	r2, r3
1004a878:	687b      	ldr	r3, [r7, #4]
1004a87a:	60da      	str	r2, [r3, #12]
}
1004a87c:	46c0      	nop			@ (mov r8, r8)
1004a87e:	46bd      	mov	sp, r7
1004a880:	b002      	add	sp, #8
1004a882:	bd80      	pop	{r7, pc}

1004a884 <LL_RADIO_TIMER_SetTimeout>:
{
1004a884:	b580      	push	{r7, lr}
1004a886:	b082      	sub	sp, #8
1004a888:	af00      	add	r7, sp, #0
1004a88a:	6078      	str	r0, [r7, #4]
1004a88c:	6039      	str	r1, [r7, #0]
  WRITE_REG(BLUEx->TIMEOUTREG, timeout);
1004a88e:	687b      	ldr	r3, [r7, #4]
1004a890:	683a      	ldr	r2, [r7, #0]
1004a892:	611a      	str	r2, [r3, #16]
}
1004a894:	46c0      	nop			@ (mov r8, r8)
1004a896:	46bd      	mov	sp, r7
1004a898:	b002      	add	sp, #8
1004a89a:	bd80      	pop	{r7, pc}

1004a89c <LL_RADIO_TIMER_EnableBLEWakeupTimer>:
{
1004a89c:	b580      	push	{r7, lr}
1004a89e:	b082      	sub	sp, #8
1004a8a0:	af00      	add	r7, sp, #0
1004a8a2:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004a8a4:	687b      	ldr	r3, [r7, #4]
1004a8a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004a8a8:	2280      	movs	r2, #128	@ 0x80
1004a8aa:	05d2      	lsls	r2, r2, #23
1004a8ac:	431a      	orrs	r2, r3
1004a8ae:	687b      	ldr	r3, [r7, #4]
1004a8b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004a8b2:	46c0      	nop			@ (mov r8, r8)
1004a8b4:	46bd      	mov	sp, r7
1004a8b6:	b002      	add	sp, #8
1004a8b8:	bd80      	pop	{r7, pc}
	...

1004a8bc <LL_RADIO_TIMER_DisableBLEWakeupTimer>:
{
1004a8bc:	b580      	push	{r7, lr}
1004a8be:	b082      	sub	sp, #8
1004a8c0:	af00      	add	r7, sp, #0
1004a8c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_BLE_WAKEUP_EN);
1004a8c4:	687b      	ldr	r3, [r7, #4]
1004a8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004a8c8:	4a03      	ldr	r2, [pc, #12]	@ (1004a8d8 <LL_RADIO_TIMER_DisableBLEWakeupTimer+0x1c>)
1004a8ca:	401a      	ands	r2, r3
1004a8cc:	687b      	ldr	r3, [r7, #4]
1004a8ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004a8d0:	46c0      	nop			@ (mov r8, r8)
1004a8d2:	46bd      	mov	sp, r7
1004a8d4:	b002      	add	sp, #8
1004a8d6:	bd80      	pop	{r7, pc}
1004a8d8:	bfffffff 	.word	0xbfffffff

1004a8dc <LL_RADIO_TIMER_EnableCPUWakeupTimer>:
{
1004a8dc:	b580      	push	{r7, lr}
1004a8de:	b082      	sub	sp, #8
1004a8e0:	af00      	add	r7, sp, #0
1004a8e2:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004a8e4:	687b      	ldr	r3, [r7, #4]
1004a8e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004a8e8:	2280      	movs	r2, #128	@ 0x80
1004a8ea:	05d2      	lsls	r2, r2, #23
1004a8ec:	431a      	orrs	r2, r3
1004a8ee:	687b      	ldr	r3, [r7, #4]
1004a8f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004a8f2:	46c0      	nop			@ (mov r8, r8)
1004a8f4:	46bd      	mov	sp, r7
1004a8f6:	b002      	add	sp, #8
1004a8f8:	bd80      	pop	{r7, pc}
	...

1004a8fc <LL_RADIO_TIMER_DisableCPUWakeupTimer>:
{
1004a8fc:	b580      	push	{r7, lr}
1004a8fe:	b082      	sub	sp, #8
1004a900:	af00      	add	r7, sp, #0
1004a902:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(WAKEUPx->CM0_SLEEP_REQUEST_MODE, WAKEUP_CM0_SLEEP_REQUEST_MODE_CPU_WAKEUP_EN);
1004a904:	687b      	ldr	r3, [r7, #4]
1004a906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1004a908:	4a03      	ldr	r2, [pc, #12]	@ (1004a918 <LL_RADIO_TIMER_DisableCPUWakeupTimer+0x1c>)
1004a90a:	401a      	ands	r2, r3
1004a90c:	687b      	ldr	r3, [r7, #4]
1004a90e:	631a      	str	r2, [r3, #48]	@ 0x30
}
1004a910:	46c0      	nop			@ (mov r8, r8)
1004a912:	46bd      	mov	sp, r7
1004a914:	b002      	add	sp, #8
1004a916:	bd80      	pop	{r7, pc}
1004a918:	bfffffff 	.word	0xbfffffff

1004a91c <LL_RADIO_TIMER_SetWakeupOffset>:
{
1004a91c:	b580      	push	{r7, lr}
1004a91e:	b082      	sub	sp, #8
1004a920:	af00      	add	r7, sp, #0
1004a922:	6078      	str	r0, [r7, #4]
1004a924:	000a      	movs	r2, r1
1004a926:	1cfb      	adds	r3, r7, #3
1004a928:	701a      	strb	r2, [r3, #0]
  WRITE_REG(WAKEUPx->WAKEUP_OFFSET[0], (Time & 0xFF));
1004a92a:	1cfb      	adds	r3, r7, #3
1004a92c:	781a      	ldrb	r2, [r3, #0]
1004a92e:	687b      	ldr	r3, [r7, #4]
1004a930:	609a      	str	r2, [r3, #8]
}
1004a932:	46c0      	nop			@ (mov r8, r8)
1004a934:	46bd      	mov	sp, r7
1004a936:	b002      	add	sp, #8
1004a938:	bd80      	pop	{r7, pc}

1004a93a <LL_RADIO_TIMER_SetBLEWakeupTime>:
{
1004a93a:	b580      	push	{r7, lr}
1004a93c:	b082      	sub	sp, #8
1004a93e:	af00      	add	r7, sp, #0
1004a940:	6078      	str	r0, [r7, #4]
1004a942:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->BLUE_WAKEUP_TIME, Time);
1004a944:	687b      	ldr	r3, [r7, #4]
1004a946:	683a      	ldr	r2, [r7, #0]
1004a948:	625a      	str	r2, [r3, #36]	@ 0x24
}
1004a94a:	46c0      	nop			@ (mov r8, r8)
1004a94c:	46bd      	mov	sp, r7
1004a94e:	b002      	add	sp, #8
1004a950:	bd80      	pop	{r7, pc}

1004a952 <LL_RADIO_TIMER_SetCPUWakeupTime>:
{
1004a952:	b580      	push	{r7, lr}
1004a954:	b082      	sub	sp, #8
1004a956:	af00      	add	r7, sp, #0
1004a958:	6078      	str	r0, [r7, #4]
1004a95a:	6039      	str	r1, [r7, #0]
  WRITE_REG(WAKEUPx->CM0_WAKEUP_TIME, Time);
1004a95c:	687b      	ldr	r3, [r7, #4]
1004a95e:	683a      	ldr	r2, [r7, #0]
1004a960:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004a962:	46c0      	nop			@ (mov r8, r8)
1004a964:	46bd      	mov	sp, r7
1004a966:	b002      	add	sp, #8
1004a968:	bd80      	pop	{r7, pc}

1004a96a <LL_RADIO_TIMER_GetAbsoluteTime>:
{
1004a96a:	b580      	push	{r7, lr}
1004a96c:	b082      	sub	sp, #8
1004a96e:	af00      	add	r7, sp, #0
1004a970:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(WAKEUPx->ABSOLUTE_TIME));
1004a972:	687b      	ldr	r3, [r7, #4]
1004a974:	691b      	ldr	r3, [r3, #16]
}
1004a976:	0018      	movs	r0, r3
1004a978:	46bd      	mov	sp, r7
1004a97a:	b002      	add	sp, #8
1004a97c:	bd80      	pop	{r7, pc}

1004a97e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>:
  * @rmtoll BLUE_SLEEP_REQUEST_MODE    SLEEP_EN   LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP_TypeDef *WAKEUPx)
{
1004a97e:	b580      	push	{r7, lr}
1004a980:	b082      	sub	sp, #8
1004a982:	af00      	add	r7, sp, #0
1004a984:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_EN);
1004a986:	687b      	ldr	r3, [r7, #4]
1004a988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004a98a:	2280      	movs	r2, #128	@ 0x80
1004a98c:	0592      	lsls	r2, r2, #22
1004a98e:	431a      	orrs	r2, r3
1004a990:	687b      	ldr	r3, [r7, #4]
1004a992:	629a      	str	r2, [r3, #40]	@ 0x28
}
1004a994:	46c0      	nop			@ (mov r8, r8)
1004a996:	46bd      	mov	sp, r7
1004a998:	b002      	add	sp, #8
1004a99a:	bd80      	pop	{r7, pc}

1004a99c <LL_RADIO_TIMER_SetSleepRequestMode>:
  * @param  WAKEUPx Radio Timer instance
  * @param  mode Sleep mode value in range 0-7
  * @retval None.
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP_TypeDef *WAKEUPx, uint8_t mode)
{
1004a99c:	b580      	push	{r7, lr}
1004a99e:	b082      	sub	sp, #8
1004a9a0:	af00      	add	r7, sp, #0
1004a9a2:	6078      	str	r0, [r7, #4]
1004a9a4:	000a      	movs	r2, r1
1004a9a6:	1cfb      	adds	r3, r7, #3
1004a9a8:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB09)
  return;
#else
  MODIFY_REG_FIELD(WAKEUP->BLUE_SLEEP_REQUEST_MODE, WAKEUP_BLUE_SLEEP_REQUEST_MODE_SLEEP_REQ_MODE, (mode & 0x7));
1004a9aa:	4b08      	ldr	r3, [pc, #32]	@ (1004a9cc <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004a9ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004a9ae:	2207      	movs	r2, #7
1004a9b0:	4393      	bics	r3, r2
1004a9b2:	0019      	movs	r1, r3
1004a9b4:	1cfb      	adds	r3, r7, #3
1004a9b6:	781b      	ldrb	r3, [r3, #0]
1004a9b8:	2207      	movs	r2, #7
1004a9ba:	401a      	ands	r2, r3
1004a9bc:	4b03      	ldr	r3, [pc, #12]	@ (1004a9cc <LL_RADIO_TIMER_SetSleepRequestMode+0x30>)
1004a9be:	430a      	orrs	r2, r1
1004a9c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif
}
1004a9c2:	46c0      	nop			@ (mov r8, r8)
1004a9c4:	46bd      	mov	sp, r7
1004a9c6:	b002      	add	sp, #8
1004a9c8:	bd80      	pop	{r7, pc}
1004a9ca:	46c0      	nop			@ (mov r8, r8)
1004a9cc:	60001800 	.word	0x60001800

1004a9d0 <LL_RADIO_TIMER_EnableCPUWakeupIT>:
  * @rmtoll WAKEUP_CM0_IRQ_ENABLE    WAKEUP_IT   LL_RADIO_TIMER_EnableCPUWakeupIT
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP_TypeDef *WAKEUPx)
{
1004a9d0:	b580      	push	{r7, lr}
1004a9d2:	b082      	sub	sp, #8
1004a9d4:	af00      	add	r7, sp, #0
1004a9d6:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_ENABLE, WAKEUP_WAKEUP_CM0_IRQ_ENABLE_WAKEUP_IT);
1004a9d8:	687b      	ldr	r3, [r7, #4]
1004a9da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004a9dc:	2201      	movs	r2, #1
1004a9de:	431a      	orrs	r2, r3
1004a9e0:	687b      	ldr	r3, [r7, #4]
1004a9e2:	649a      	str	r2, [r3, #72]	@ 0x48
}
1004a9e4:	46c0      	nop			@ (mov r8, r8)
1004a9e6:	46bd      	mov	sp, r7
1004a9e8:	b002      	add	sp, #8
1004a9ea:	bd80      	pop	{r7, pc}

1004a9ec <LL_RADIO_TIMER_ClearFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_ClearFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004a9ec:	b580      	push	{r7, lr}
1004a9ee:	b082      	sub	sp, #8
1004a9f0:	af00      	add	r7, sp, #0
1004a9f2:	6078      	str	r0, [r7, #4]
  SET_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT);
1004a9f4:	687b      	ldr	r3, [r7, #4]
1004a9f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004a9f8:	2201      	movs	r2, #1
1004a9fa:	431a      	orrs	r2, r3
1004a9fc:	687b      	ldr	r3, [r7, #4]
1004a9fe:	64da      	str	r2, [r3, #76]	@ 0x4c
}
1004aa00:	46c0      	nop			@ (mov r8, r8)
1004aa02:	46bd      	mov	sp, r7
1004aa04:	b002      	add	sp, #8
1004aa06:	bd80      	pop	{r7, pc}

1004aa08 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>:
  * @rmtoll WAKEUP_CM0_IRQ_STATUS   WAKEUP_IT   LL_RADIO_TIMER_IsActiveFlag_CPUWakeup
  * @param  WAKEUPx Radio Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP_TypeDef *WAKEUPx)
{
1004aa08:	b580      	push	{r7, lr}
1004aa0a:	b082      	sub	sp, #8
1004aa0c:	af00      	add	r7, sp, #0
1004aa0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(WAKEUPx->WAKEUP_CM0_IRQ_STATUS, WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT) == (WAKEUP_WAKEUP_CM0_IRQ_STATUS_WAKEUP_IT)) ? 1UL : 0UL);
1004aa10:	687b      	ldr	r3, [r7, #4]
1004aa12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004aa14:	2201      	movs	r2, #1
1004aa16:	4013      	ands	r3, r2
1004aa18:	2b01      	cmp	r3, #1
1004aa1a:	d101      	bne.n	1004aa20 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x18>
1004aa1c:	2301      	movs	r3, #1
1004aa1e:	e000      	b.n	1004aa22 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup+0x1a>
1004aa20:	2300      	movs	r3, #0
}
1004aa22:	0018      	movs	r0, r3
1004aa24:	46bd      	mov	sp, r7
1004aa26:	b002      	add	sp, #8
1004aa28:	bd80      	pop	{r7, pc}

1004aa2a <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>:
  * @param RADIO_CTRLx: Radio Control instance
  * @param  Count Slow clock is measured in a window of SLOW_COUNT+1 slow clock cycles
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL_TypeDef *RADIO_CTRLx, uint32_t Count)
{
1004aa2a:	b580      	push	{r7, lr}
1004aa2c:	b082      	sub	sp, #8
1004aa2e:	af00      	add	r7, sp, #0
1004aa30:	6078      	str	r0, [r7, #4]
1004aa32:	6039      	str	r1, [r7, #0]
  WRITE_REG(RADIO_CTRLx->CLK32COUNT_REG, Count);
1004aa34:	687b      	ldr	r3, [r7, #4]
1004aa36:	683a      	ldr	r2, [r7, #0]
1004aa38:	605a      	str	r2, [r3, #4]
}
1004aa3a:	46c0      	nop			@ (mov r8, r8)
1004aa3c:	46bd      	mov	sp, r7
1004aa3e:	b002      	add	sp, #8
1004aa40:	bd80      	pop	{r7, pc}

1004aa42 <LL_RADIO_TIMER_StartLSICalibration>:
  * @brief  Start the LSI calibration procedure.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004aa42:	b580      	push	{r7, lr}
1004aa44:	b082      	sub	sp, #8
1004aa46:	af00      	add	r7, sp, #0
1004aa48:	6078      	str	r0, [r7, #4]
  WRITE_REG(RADIO_CTRLx->CLK32PERIOD_REG, 0);
1004aa4a:	687b      	ldr	r3, [r7, #4]
1004aa4c:	2200      	movs	r2, #0
1004aa4e:	609a      	str	r2, [r3, #8]
}
1004aa50:	46c0      	nop			@ (mov r8, r8)
1004aa52:	46bd      	mov	sp, r7
1004aa54:	b002      	add	sp, #8
1004aa56:	bd80      	pop	{r7, pc}

1004aa58 <LL_RADIO_TIMER_GetLSIPeriod>:
  * @brief  Get the LSI clock Period calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock period calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004aa58:	b580      	push	{r7, lr}
1004aa5a:	b082      	sub	sp, #8
1004aa5c:	af00      	add	r7, sp, #0
1004aa5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32PERIOD_REG));
1004aa60:	687b      	ldr	r3, [r7, #4]
1004aa62:	689b      	ldr	r3, [r3, #8]
}
1004aa64:	0018      	movs	r0, r3
1004aa66:	46bd      	mov	sp, r7
1004aa68:	b002      	add	sp, #8
1004aa6a:	bd80      	pop	{r7, pc}

1004aa6c <LL_RADIO_TIMER_GetLSIFrequency>:
  * @brief  Get the LSI clock Frequency calibrated.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval The LSI clock frequency calibrated
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004aa6c:	b580      	push	{r7, lr}
1004aa6e:	b082      	sub	sp, #8
1004aa70:	af00      	add	r7, sp, #0
1004aa72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(RADIO_CTRLx->CLK32FREQUENCY_REG));
1004aa74:	687b      	ldr	r3, [r7, #4]
1004aa76:	68db      	ldr	r3, [r3, #12]
}
1004aa78:	0018      	movs	r0, r3
1004aa7a:	46bd      	mov	sp, r7
1004aa7c:	b002      	add	sp, #8
1004aa7e:	bd80      	pop	{r7, pc}

1004aa80 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>:
  * @brief  Clear the LSI calibration ended flag.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004aa80:	b580      	push	{r7, lr}
1004aa82:	b082      	sub	sp, #8
1004aa84:	af00      	add	r7, sp, #0
1004aa86:	6078      	str	r0, [r7, #4]
  SET_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ);
1004aa88:	687b      	ldr	r3, [r7, #4]
1004aa8a:	691b      	ldr	r3, [r3, #16]
1004aa8c:	2201      	movs	r2, #1
1004aa8e:	431a      	orrs	r2, r3
1004aa90:	687b      	ldr	r3, [r7, #4]
1004aa92:	611a      	str	r2, [r3, #16]
}
1004aa94:	46c0      	nop			@ (mov r8, r8)
1004aa96:	46bd      	mov	sp, r7
1004aa98:	b002      	add	sp, #8
1004aa9a:	bd80      	pop	{r7, pc}

1004aa9c <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>:
  * @brief  Check if the LSI calibration ended flag is set or not.
  * @param RADIO_CTRLx: Radio Control instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL_TypeDef *RADIO_CTRLx)
{
1004aa9c:	b580      	push	{r7, lr}
1004aa9e:	b082      	sub	sp, #8
1004aaa0:	af00      	add	r7, sp, #0
1004aaa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RADIO_CTRLx->RADIO_CONTROL_IRQ_STATUS, RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ) == (RADIO_CTRL_RADIO_CONTROL_IRQ_STATUS_SLOW_CLK_IRQ)) ? 1UL : 0UL);
1004aaa4:	687b      	ldr	r3, [r7, #4]
1004aaa6:	691b      	ldr	r3, [r3, #16]
1004aaa8:	2201      	movs	r2, #1
1004aaaa:	4013      	ands	r3, r2
1004aaac:	2b01      	cmp	r3, #1
1004aaae:	d101      	bne.n	1004aab4 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x18>
1004aab0:	2301      	movs	r3, #1
1004aab2:	e000      	b.n	1004aab6 <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded+0x1a>
1004aab4:	2300      	movs	r3, #0
}
1004aab6:	0018      	movs	r0, r3
1004aab8:	46bd      	mov	sp, r7
1004aaba:	b002      	add	sp, #8
1004aabc:	bd80      	pop	{r7, pc}
	...

1004aac0 <HAL_RADIO_TIMER_Init>:
  *         section of the application.
  * @param RADIO_TIMER_InitStruct Radio Timer Initialization parameters
  * @retval None
  */
void HAL_RADIO_TIMER_Init(RADIO_TIMER_InitTypeDef *RADIO_TIMER_InitStruct)
{
1004aac0:	b5f0      	push	{r4, r5, r6, r7, lr}
1004aac2:	b083      	sub	sp, #12
1004aac4:	af00      	add	r7, sp, #0
1004aac6:	6078      	str	r0, [r7, #4]
  /* Interrupt Configuration */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004aac8:	4b71      	ldr	r3, [pc, #452]	@ (1004ac90 <HAL_RADIO_TIMER_Init+0x1d0>)
1004aaca:	0018      	movs	r0, r3
1004aacc:	f7ff ff8e 	bl	1004a9ec <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  LL_RADIO_TIMER_EnableCPUWakeupIT(WAKEUP);
1004aad0:	4b6f      	ldr	r3, [pc, #444]	@ (1004ac90 <HAL_RADIO_TIMER_Init+0x1d0>)
1004aad2:	0018      	movs	r0, r3
1004aad4:	f7ff ff7c 	bl	1004a9d0 <LL_RADIO_TIMER_EnableCPUWakeupIT>
  NVIC_EnableIRQ(RADIO_TIMER_CPU_WKUP_IRQn);
1004aad8:	2017      	movs	r0, #23
1004aada:	f7ff fe8b 	bl	1004a7f4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_ERROR_IRQn);
1004aade:	2014      	movs	r0, #20
1004aae0:	f7ff fe88 	bl	1004a7f4 <__NVIC_EnableIRQ>
  NVIC_EnableIRQ(RADIO_TIMER_TXRX_WKUP_IRQn);
  RADIO_TIMER_Context.hostMargin = MAX(HOST_MARGIN, RADIO_TIMER_InitStruct->XTAL_StartupTime);
#endif

  /* Calibration Setting */
  RADIO_TIMER_Context.calibrationSettings.periodicCalibration = (RADIO_TIMER_InitStruct->periodicCalibrationInterval != 0);
1004aae4:	687b      	ldr	r3, [r7, #4]
1004aae6:	685b      	ldr	r3, [r3, #4]
1004aae8:	1e5a      	subs	r2, r3, #1
1004aaea:	4193      	sbcs	r3, r2
1004aaec:	b2db      	uxtb	r3, r3
1004aaee:	001a      	movs	r2, r3
1004aaf0:	4b68      	ldr	r3, [pc, #416]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004aaf2:	701a      	strb	r2, [r3, #0]
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration || RADIO_TIMER_InitStruct->enableInitialCalibration)
1004aaf4:	4b67      	ldr	r3, [pc, #412]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004aaf6:	781b      	ldrb	r3, [r3, #0]
1004aaf8:	2b00      	cmp	r3, #0
1004aafa:	d103      	bne.n	1004ab04 <HAL_RADIO_TIMER_Init+0x44>
1004aafc:	687b      	ldr	r3, [r7, #4]
1004aafe:	789b      	ldrb	r3, [r3, #2]
1004ab00:	2b00      	cmp	r3, #0
1004ab02:	d002      	beq.n	1004ab0a <HAL_RADIO_TIMER_Init+0x4a>
  {
    _calibrationProcedure();
1004ab04:	f000 fc0a 	bl	1004b31c <_calibrationProcedure>
1004ab08:	e010      	b.n	1004ab2c <HAL_RADIO_TIMER_Init+0x6c>
  }
  else
  {
    /* Assume fix frequency at 32.768 kHz */
    RADIO_TIMER_Context.calibrationData.last_period1 = 0x00190000;
1004ab0a:	4b62      	ldr	r3, [pc, #392]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab0c:	22c8      	movs	r2, #200	@ 0xc8
1004ab0e:	0352      	lsls	r2, r2, #13
1004ab10:	621a      	str	r2, [r3, #32]
    RADIO_TIMER_Context.calibrationData.period1 = 0x00190000 ;
1004ab12:	4b60      	ldr	r3, [pc, #384]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab14:	22c8      	movs	r2, #200	@ 0xc8
1004ab16:	0352      	lsls	r2, r2, #13
1004ab18:	61da      	str	r2, [r3, #28]
    RADIO_TIMER_Context.calibrationData.freq1 = 0x0028F5C2 ;
1004ab1a:	4b5e      	ldr	r3, [pc, #376]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab1c:	4a5e      	ldr	r2, [pc, #376]	@ (1004ac98 <HAL_RADIO_TIMER_Init+0x1d8>)
1004ab1e:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = 23437;
1004ab20:	4b5c      	ldr	r3, [pc, #368]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab22:	4a5e      	ldr	r2, [pc, #376]	@ (1004ac9c <HAL_RADIO_TIMER_Init+0x1dc>)
1004ab24:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.freq = 23456748;
1004ab26:	4b5b      	ldr	r3, [pc, #364]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab28:	4a5d      	ldr	r2, [pc, #372]	@ (1004aca0 <HAL_RADIO_TIMER_Init+0x1e0>)
1004ab2a:	615a      	str	r2, [r3, #20]
  }
  if (RADIO_TIMER_InitStruct->periodicCalibrationInterval == 0)
1004ab2c:	687b      	ldr	r3, [r7, #4]
1004ab2e:	685b      	ldr	r3, [r3, #4]
1004ab30:	2b00      	cmp	r3, #0
1004ab32:	d108      	bne.n	1004ab46 <HAL_RADIO_TIMER_Init+0x86>
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = HAL_RADIO_TIMER_MachineTimeToSysTime(0x50000000);
1004ab34:	23a0      	movs	r3, #160	@ 0xa0
1004ab36:	05db      	lsls	r3, r3, #23
1004ab38:	0018      	movs	r0, r3
1004ab3a:	f000 fb23 	bl	1004b184 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004ab3e:	0002      	movs	r2, r0
1004ab40:	4b54      	ldr	r3, [pc, #336]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab42:	605a      	str	r2, [r3, #4]
1004ab44:	e01d      	b.n	1004ab82 <HAL_RADIO_TIMER_Init+0xc2>

    
  }
  else
  {
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = (TIMER_SYSTICK_PER_10MS * RADIO_TIMER_InitStruct->periodicCalibrationInterval) / 10;
1004ab46:	687b      	ldr	r3, [r7, #4]
1004ab48:	685b      	ldr	r3, [r3, #4]
1004ab4a:	031b      	lsls	r3, r3, #12
1004ab4c:	210a      	movs	r1, #10
1004ab4e:	0018      	movs	r0, r3
1004ab50:	f7f5 fb76 	bl	10040240 <__udivsi3>
1004ab54:	0003      	movs	r3, r0
1004ab56:	001a      	movs	r2, r3
1004ab58:	4b4e      	ldr	r3, [pc, #312]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab5a:	605a      	str	r2, [r3, #4]
    RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval = MIN(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004ab5c:	4b4d      	ldr	r3, [pc, #308]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab5e:	685e      	ldr	r6, [r3, #4]
1004ab60:	4b50      	ldr	r3, [pc, #320]	@ (1004aca4 <HAL_RADIO_TIMER_Init+0x1e4>)
1004ab62:	0018      	movs	r0, r3
1004ab64:	f000 fb0e 	bl	1004b184 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004ab68:	0003      	movs	r3, r0
1004ab6a:	429e      	cmp	r6, r3
1004ab6c:	d202      	bcs.n	1004ab74 <HAL_RADIO_TIMER_Init+0xb4>
1004ab6e:	4b49      	ldr	r3, [pc, #292]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab70:	685a      	ldr	r2, [r3, #4]
1004ab72:	e004      	b.n	1004ab7e <HAL_RADIO_TIMER_Init+0xbe>
1004ab74:	4b4b      	ldr	r3, [pc, #300]	@ (1004aca4 <HAL_RADIO_TIMER_Init+0x1e4>)
1004ab76:	0018      	movs	r0, r3
1004ab78:	f000 fb04 	bl	1004b184 <HAL_RADIO_TIMER_MachineTimeToSysTime>
1004ab7c:	0002      	movs	r2, r0
1004ab7e:	4b45      	ldr	r3, [pc, #276]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab80:	605a      	str	r2, [r3, #4]
                                                                              HAL_RADIO_TIMER_MachineTimeToSysTime(TIMER_MAX_VALUE - TIMER_WRAPPING_MARGIN));
  }
  RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration = CALIBRATION_CHECK_DURATION;
1004ab82:	4b44      	ldr	r3, [pc, #272]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab84:	2264      	movs	r2, #100	@ 0x64
1004ab86:	609a      	str	r2, [r3, #8]
  RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004ab88:	4b42      	ldr	r3, [pc, #264]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab8a:	2200      	movs	r2, #0
1004ab8c:	731a      	strb	r2, [r3, #12]

  /* XTAL startup time configuration */
  RADIO_TIMER_Context.hs_startup_time = RADIO_TIMER_InitStruct->XTAL_StartupTime;
1004ab8e:	687b      	ldr	r3, [r7, #4]
1004ab90:	881b      	ldrh	r3, [r3, #0]
1004ab92:	001a      	movs	r2, r3
1004ab94:	4b3f      	ldr	r3, [pc, #252]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab96:	669a      	str	r2, [r3, #104]	@ 0x68
  _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, RADIO_TIMER_Context.calibrationData.freq1);
1004ab98:	4b3e      	ldr	r3, [pc, #248]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ab9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004ab9c:	b29a      	uxth	r2, r3
1004ab9e:	4b3d      	ldr	r3, [pc, #244]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004aba0:	699b      	ldr	r3, [r3, #24]
1004aba2:	0019      	movs	r1, r3
1004aba4:	0010      	movs	r0, r2
1004aba6:	f000 fd2d 	bl	1004b604 <_update_xtal_startup_time>

  /* Init Radio Timer Context */
  RADIO_TIMER_Context.last_setup_time = 0;
1004abaa:	4b3a      	ldr	r3, [pc, #232]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abac:	2284      	movs	r2, #132	@ 0x84
1004abae:	2100      	movs	r1, #0
1004abb0:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.cumulative_time = 0;
1004abb2:	4938      	ldr	r1, [pc, #224]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abb4:	2200      	movs	r2, #0
1004abb6:	2300      	movs	r3, #0
1004abb8:	670a      	str	r2, [r1, #112]	@ 0x70
1004abba:	674b      	str	r3, [r1, #116]	@ 0x74
  RADIO_TIMER_Context.last_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004abbc:	4b34      	ldr	r3, [pc, #208]	@ (1004ac90 <HAL_RADIO_TIMER_Init+0x1d0>)
1004abbe:	0018      	movs	r0, r3
1004abc0:	f7ff fed3 	bl	1004a96a <LL_RADIO_TIMER_GetAbsoluteTime>
1004abc4:	0002      	movs	r2, r0
1004abc6:	4b33      	ldr	r3, [pc, #204]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abc8:	2180      	movs	r1, #128	@ 0x80
1004abca:	505a      	str	r2, [r3, r1]
  RADIO_TIMER_Context.last_system_time = 0;
1004abcc:	4931      	ldr	r1, [pc, #196]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abce:	2200      	movs	r2, #0
1004abd0:	2300      	movs	r3, #0
1004abd2:	678a      	str	r2, [r1, #120]	@ 0x78
1004abd4:	67cb      	str	r3, [r1, #124]	@ 0x7c
  RADIO_TIMER_Context.calibrationData.last_calibration_time = 0;
1004abd6:	492f      	ldr	r1, [pc, #188]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abd8:	2200      	movs	r2, #0
1004abda:	2300      	movs	r3, #0
1004abdc:	628a      	str	r2, [r1, #40]	@ 0x28
1004abde:	62cb      	str	r3, [r1, #44]	@ 0x2c
  RADIO_TIMER_Context.calibrationData.calibration_data_available = 0;
1004abe0:	4b2c      	ldr	r3, [pc, #176]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abe2:	2234      	movs	r2, #52	@ 0x34
1004abe4:	2100      	movs	r1, #0
1004abe6:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004abe8:	4b2a      	ldr	r3, [pc, #168]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abea:	6858      	ldr	r0, [r3, #4]
                                                                     RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004abec:	4b29      	ldr	r3, [pc, #164]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abee:	699b      	ldr	r3, [r3, #24]
  RADIO_TIMER_Context.calibrationData.calibration_machine_interval = blue_unit_conversion(RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval,
1004abf0:	0019      	movs	r1, r3
1004abf2:	4b2d      	ldr	r3, [pc, #180]	@ (1004aca8 <HAL_RADIO_TIMER_Init+0x1e8>)
1004abf4:	001a      	movs	r2, r3
1004abf6:	f7f5 fa63 	bl	100400c0 <blue_unit_conversion>
1004abfa:	0002      	movs	r2, r0
1004abfc:	4b25      	ldr	r3, [pc, #148]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004abfe:	631a      	str	r2, [r3, #48]	@ 0x30
  RADIO_TIMER_Context.wakeup_calibration = RADIO_TIMER_Context.calibrationSettings.periodicCalibration;
1004ac00:	4b24      	ldr	r3, [pc, #144]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac02:	7819      	ldrb	r1, [r3, #0]
1004ac04:	4b23      	ldr	r3, [pc, #140]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac06:	2294      	movs	r2, #148	@ 0x94
1004ac08:	5499      	strb	r1, [r3, r2]

  /* Init the Virtual Timer queue */
  RADIO_TIMER_Context.rootNode = NULL;
1004ac0a:	4b22      	ldr	r3, [pc, #136]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac0c:	228c      	movs	r2, #140	@ 0x8c
1004ac0e:	2100      	movs	r1, #0
1004ac10:	5099      	str	r1, [r3, r2]
  RADIO_TIMER_Context.enableTimeBase = TRUE;
1004ac12:	4b20      	ldr	r3, [pc, #128]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac14:	2290      	movs	r2, #144	@ 0x90
1004ac16:	2101      	movs	r1, #1
1004ac18:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004ac1a:	4b1e      	ldr	r3, [pc, #120]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac1c:	2293      	movs	r2, #147	@ 0x93
1004ac1e:	2100      	movs	r1, #0
1004ac20:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.expired_count = 0;
1004ac22:	4b1c      	ldr	r3, [pc, #112]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac24:	2291      	movs	r2, #145	@ 0x91
1004ac26:	2100      	movs	r1, #0
1004ac28:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.served_count = 0;
1004ac2a:	4b1a      	ldr	r3, [pc, #104]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac2c:	2292      	movs	r2, #146	@ 0x92
1004ac2e:	2100      	movs	r1, #0
1004ac30:	5499      	strb	r1, [r3, r2]

  /* Init Radio Timer queue */
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004ac32:	4b18      	ldr	r3, [pc, #96]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac34:	2261      	movs	r2, #97	@ 0x61
1004ac36:	2100      	movs	r1, #0
1004ac38:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004ac3a:	4b16      	ldr	r3, [pc, #88]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac3c:	2262      	movs	r2, #98	@ 0x62
1004ac3e:	2100      	movs	r1, #0
1004ac40:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004ac42:	4b14      	ldr	r3, [pc, #80]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac44:	2263      	movs	r2, #99	@ 0x63
1004ac46:	2100      	movs	r1, #0
1004ac48:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = 0;
1004ac4a:	4912      	ldr	r1, [pc, #72]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac4c:	2200      	movs	r2, #0
1004ac4e:	2300      	movs	r3, #0
1004ac50:	658a      	str	r2, [r1, #88]	@ 0x58
1004ac52:	65cb      	str	r3, [r1, #92]	@ 0x5c

  /* Configure the Calibration callback and schedule the next calibration */
  RADIO_TIMER_Context.calibrationTimer.callback = _calibration_callback;
1004ac54:	4b0f      	ldr	r3, [pc, #60]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac56:	4a15      	ldr	r2, [pc, #84]	@ (1004acac <HAL_RADIO_TIMER_Init+0x1ec>)
1004ac58:	649a      	str	r2, [r3, #72]	@ 0x48
  RADIO_TIMER_Context.calibrationTimer.userData = NULL;
1004ac5a:	4b0e      	ldr	r3, [pc, #56]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac5c:	2200      	movs	r2, #0
1004ac5e:	655a      	str	r2, [r3, #84]	@ 0x54
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
               HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004ac60:	f000 faa6 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004ac64:	0002      	movs	r2, r0
1004ac66:	000b      	movs	r3, r1
1004ac68:	490a      	ldr	r1, [pc, #40]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac6a:	6849      	ldr	r1, [r1, #4]
1004ac6c:	000c      	movs	r4, r1
1004ac6e:	2100      	movs	r1, #0
1004ac70:	000d      	movs	r5, r1
  _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004ac72:	1912      	adds	r2, r2, r4
1004ac74:	416b      	adcs	r3, r5
1004ac76:	490e      	ldr	r1, [pc, #56]	@ (1004acb0 <HAL_RADIO_TIMER_Init+0x1f0>)
1004ac78:	0008      	movs	r0, r1
1004ac7a:	f000 fd1d 	bl	1004b6b8 <_start_timer>

  /* Tx & Rx delay configuration */
  _configureTxRxDelay(&RADIO_TIMER_Context, TRUE);
1004ac7e:	4b05      	ldr	r3, [pc, #20]	@ (1004ac94 <HAL_RADIO_TIMER_Init+0x1d4>)
1004ac80:	2101      	movs	r1, #1
1004ac82:	0018      	movs	r0, r3
1004ac84:	f000 fbfa 	bl	1004b47c <_configureTxRxDelay>
}
1004ac88:	46c0      	nop			@ (mov r8, r8)
1004ac8a:	46bd      	mov	sp, r7
1004ac8c:	b003      	add	sp, #12
1004ac8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ac90:	60001800 	.word	0x60001800
1004ac94:	20002870 	.word	0x20002870
1004ac98:	0028f5c2 	.word	0x0028f5c2
1004ac9c:	00005b8d 	.word	0x00005b8d
1004aca0:	0165ebec 	.word	0x0165ebec
1004aca4:	ffffefff 	.word	0xffffefff
1004aca8:	00000326 	.word	0x00000326
1004acac:	1004b661 	.word	0x1004b661
1004acb0:	200028b0 	.word	0x200028b0

1004acb4 <HAL_RADIO_TIMER_Tick>:
  * Check expired timers and execute user callback.
  * It must be placed inside the infinite loop.
  * @retval None
  */
void HAL_RADIO_TIMER_Tick(void)
{
1004acb4:	b5b0      	push	{r4, r5, r7, lr}
1004acb6:	b090      	sub	sp, #64	@ 0x40
1004acb8:	af00      	add	r7, sp, #0
  uint8_t expired = 0;
1004acba:	230f      	movs	r3, #15
1004acbc:	18fb      	adds	r3, r7, r3
1004acbe:	2200      	movs	r2, #0
1004acc0:	701a      	strb	r2, [r3, #0]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004acc2:	f3ef 8310 	mrs	r3, PRIMASK
1004acc6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004acc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  ATOMIC_SECTION_BEGIN();
1004acca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004accc:	b672      	cpsid	i
}
1004acce:	46c0      	nop			@ (mov r8, r8)
  if (RADIO_TIMER_Context.radioTimer.active)
1004acd0:	4b9e      	ldr	r3, [pc, #632]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004acd2:	2261      	movs	r2, #97	@ 0x61
1004acd4:	5c9b      	ldrb	r3, [r3, r2]
1004acd6:	2b00      	cmp	r3, #0
1004acd8:	d00f      	beq.n	1004acfa <HAL_RADIO_TIMER_Tick+0x46>
  {
    if (RADIO_TIMER_Context.radioTimer.expiryTime < HAL_RADIO_TIMER_GetCurrentSysTime())
1004acda:	4b9c      	ldr	r3, [pc, #624]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004acdc:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004acde:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
1004ace0:	f000 fa66 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004ace4:	0002      	movs	r2, r0
1004ace6:	000b      	movs	r3, r1
1004ace8:	42ab      	cmp	r3, r5
1004acea:	d802      	bhi.n	1004acf2 <HAL_RADIO_TIMER_Tick+0x3e>
1004acec:	d105      	bne.n	1004acfa <HAL_RADIO_TIMER_Tick+0x46>
1004acee:	42a2      	cmp	r2, r4
1004acf0:	d903      	bls.n	1004acfa <HAL_RADIO_TIMER_Tick+0x46>
    {
      RADIO_TIMER_Context.radioTimer.active = FALSE;
1004acf2:	4b96      	ldr	r3, [pc, #600]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004acf4:	2261      	movs	r2, #97	@ 0x61
1004acf6:	2100      	movs	r1, #0
1004acf8:	5499      	strb	r1, [r3, r2]
1004acfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004acfc:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004acfe:	6a3b      	ldr	r3, [r7, #32]
1004ad00:	f383 8810 	msr	PRIMASK, r3
}
1004ad04:	46c0      	nop			@ (mov r8, r8)
    }
  }
  ATOMIC_SECTION_END();

  /* Check for expired timers */
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004ad06:	e06e      	b.n	1004ade6 <HAL_RADIO_TIMER_Tick+0x132>
  {
    VTIMER_HandleType *expiredList, *curr;
    uint8_t to_be_served = DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count);
1004ad08:	4b90      	ldr	r3, [pc, #576]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ad0a:	2291      	movs	r2, #145	@ 0x91
1004ad0c:	5c99      	ldrb	r1, [r3, r2]
1004ad0e:	4b8f      	ldr	r3, [pc, #572]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ad10:	2292      	movs	r2, #146	@ 0x92
1004ad12:	5c9a      	ldrb	r2, [r3, r2]
1004ad14:	232b      	movs	r3, #43	@ 0x2b
1004ad16:	2008      	movs	r0, #8
1004ad18:	181b      	adds	r3, r3, r0
1004ad1a:	19db      	adds	r3, r3, r7
1004ad1c:	1a8a      	subs	r2, r1, r2
1004ad1e:	701a      	strb	r2, [r3, #0]

    RADIO_TIMER_Context.rootNode = _check_callbacks(RADIO_TIMER_Context.rootNode, &expiredList);
1004ad20:	4b8a      	ldr	r3, [pc, #552]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ad22:	228c      	movs	r2, #140	@ 0x8c
1004ad24:	589b      	ldr	r3, [r3, r2]
1004ad26:	183a      	adds	r2, r7, r0
1004ad28:	0011      	movs	r1, r2
1004ad2a:	0018      	movs	r0, r3
1004ad2c:	f000 fe9a 	bl	1004ba64 <_check_callbacks>
1004ad30:	0002      	movs	r2, r0
1004ad32:	4b86      	ldr	r3, [pc, #536]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ad34:	218c      	movs	r1, #140	@ 0x8c
1004ad36:	505a      	str	r2, [r3, r1]

    /* Call all the user callbacks */
    curr = expiredList;
1004ad38:	68bb      	ldr	r3, [r7, #8]
1004ad3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004ad3c:	e010      	b.n	1004ad60 <HAL_RADIO_TIMER_Tick+0xac>
    {
      /* Save next pointer, in case callback start the timer again */
      VTIMER_HandleType *next = curr->next;
1004ad3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ad40:	691b      	ldr	r3, [r3, #16]
1004ad42:	62bb      	str	r3, [r7, #40]	@ 0x28
      curr->active = FALSE;
1004ad44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ad46:	2200      	movs	r2, #0
1004ad48:	731a      	strb	r2, [r3, #12]
      if (curr->callback)
1004ad4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ad4c:	689b      	ldr	r3, [r3, #8]
1004ad4e:	2b00      	cmp	r3, #0
1004ad50:	d004      	beq.n	1004ad5c <HAL_RADIO_TIMER_Tick+0xa8>
      {
        curr->callback(curr); /* we are sure a callback is set?*/
1004ad52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ad54:	689b      	ldr	r3, [r3, #8]
1004ad56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004ad58:	0010      	movs	r0, r2
1004ad5a:	4798      	blx	r3
      }
      curr = next;
1004ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004ad5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (curr != NULL)
1004ad60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004ad62:	2b00      	cmp	r3, #0
1004ad64:	d1eb      	bne.n	1004ad3e <HAL_RADIO_TIMER_Tick+0x8a>
    }

    RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004ad66:	4b79      	ldr	r3, [pc, #484]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ad68:	228c      	movs	r2, #140	@ 0x8c
1004ad6a:	589b      	ldr	r3, [r3, r2]
1004ad6c:	240f      	movs	r4, #15
1004ad6e:	193a      	adds	r2, r7, r4
1004ad70:	0011      	movs	r1, r2
1004ad72:	0018      	movs	r0, r3
1004ad74:	f000 fd66 	bl	1004b844 <_update_user_timeout>
1004ad78:	0002      	movs	r2, r0
1004ad7a:	4b74      	ldr	r3, [pc, #464]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ad7c:	218c      	movs	r1, #140	@ 0x8c
1004ad7e:	505a      	str	r2, [r3, r1]
    if (expired == 1)
1004ad80:	193b      	adds	r3, r7, r4
1004ad82:	781b      	ldrb	r3, [r3, #0]
1004ad84:	2b01      	cmp	r3, #1
1004ad86:	d121      	bne.n	1004adcc <HAL_RADIO_TIMER_Tick+0x118>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ad88:	f3ef 8310 	mrs	r3, PRIMASK
1004ad8c:	61fb      	str	r3, [r7, #28]
  return(result);
1004ad8e:	69fb      	ldr	r3, [r7, #28]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004ad90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
1004ad92:	b672      	cpsid	i
}
1004ad94:	46c0      	nop			@ (mov r8, r8)
1004ad96:	4b6d      	ldr	r3, [pc, #436]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ad98:	2291      	movs	r2, #145	@ 0x91
1004ad9a:	5c9b      	ldrb	r3, [r3, r2]
1004ad9c:	3301      	adds	r3, #1
1004ad9e:	4a6b      	ldr	r2, [pc, #428]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ada0:	2192      	movs	r1, #146	@ 0x92
1004ada2:	5c52      	ldrb	r2, [r2, r1]
1004ada4:	4293      	cmp	r3, r2
1004ada6:	d103      	bne.n	1004adb0 <HAL_RADIO_TIMER_Tick+0xfc>
1004ada8:	4b68      	ldr	r3, [pc, #416]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004adaa:	2291      	movs	r2, #145	@ 0x91
1004adac:	5c9b      	ldrb	r3, [r3, r2]
1004adae:	e004      	b.n	1004adba <HAL_RADIO_TIMER_Tick+0x106>
1004adb0:	4b66      	ldr	r3, [pc, #408]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004adb2:	2291      	movs	r2, #145	@ 0x91
1004adb4:	5c9b      	ldrb	r3, [r3, r2]
1004adb6:	3301      	adds	r3, #1
1004adb8:	b2db      	uxtb	r3, r3
1004adba:	4a64      	ldr	r2, [pc, #400]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004adbc:	2191      	movs	r1, #145	@ 0x91
1004adbe:	5453      	strb	r3, [r2, r1]
1004adc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004adc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004adc4:	69bb      	ldr	r3, [r7, #24]
1004adc6:	f383 8810 	msr	PRIMASK, r3
}
1004adca:	46c0      	nop			@ (mov r8, r8)
    }
    RADIO_TIMER_Context.served_count += to_be_served;
1004adcc:	4b5f      	ldr	r3, [pc, #380]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004adce:	2292      	movs	r2, #146	@ 0x92
1004add0:	5c9a      	ldrb	r2, [r3, r2]
1004add2:	232b      	movs	r3, #43	@ 0x2b
1004add4:	2108      	movs	r1, #8
1004add6:	185b      	adds	r3, r3, r1
1004add8:	19db      	adds	r3, r3, r7
1004adda:	781b      	ldrb	r3, [r3, #0]
1004addc:	18d3      	adds	r3, r2, r3
1004adde:	b2d9      	uxtb	r1, r3
1004ade0:	4b5a      	ldr	r3, [pc, #360]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ade2:	2292      	movs	r2, #146	@ 0x92
1004ade4:	5499      	strb	r1, [r3, r2]
  while (DIFF8(RADIO_TIMER_Context.expired_count, RADIO_TIMER_Context.served_count))
1004ade6:	4b59      	ldr	r3, [pc, #356]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ade8:	2291      	movs	r2, #145	@ 0x91
1004adea:	5c9a      	ldrb	r2, [r3, r2]
1004adec:	4b57      	ldr	r3, [pc, #348]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004adee:	2192      	movs	r1, #146	@ 0x92
1004adf0:	5c5b      	ldrb	r3, [r3, r1]
1004adf2:	429a      	cmp	r2, r3
1004adf4:	d30a      	bcc.n	1004ae0c <HAL_RADIO_TIMER_Tick+0x158>
1004adf6:	4b55      	ldr	r3, [pc, #340]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004adf8:	2291      	movs	r2, #145	@ 0x91
1004adfa:	5c9a      	ldrb	r2, [r3, r2]
1004adfc:	4b53      	ldr	r3, [pc, #332]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004adfe:	2192      	movs	r1, #146	@ 0x92
1004ae00:	5c5b      	ldrb	r3, [r3, r1]
1004ae02:	1ad3      	subs	r3, r2, r3
1004ae04:	1e5a      	subs	r2, r3, #1
1004ae06:	4193      	sbcs	r3, r2
1004ae08:	b2db      	uxtb	r3, r3
1004ae0a:	e00c      	b.n	1004ae26 <HAL_RADIO_TIMER_Tick+0x172>
1004ae0c:	4b4f      	ldr	r3, [pc, #316]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae0e:	2291      	movs	r2, #145	@ 0x91
1004ae10:	5c9b      	ldrb	r3, [r3, r2]
1004ae12:	0019      	movs	r1, r3
1004ae14:	4b4d      	ldr	r3, [pc, #308]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae16:	2292      	movs	r2, #146	@ 0x92
1004ae18:	5c9b      	ldrb	r3, [r3, r2]
1004ae1a:	1acb      	subs	r3, r1, r3
1004ae1c:	3301      	adds	r3, #1
1004ae1e:	33ff      	adds	r3, #255	@ 0xff
1004ae20:	1e5a      	subs	r2, r3, #1
1004ae22:	4193      	sbcs	r3, r2
1004ae24:	b2db      	uxtb	r3, r3
1004ae26:	2b00      	cmp	r3, #0
1004ae28:	d000      	beq.n	1004ae2c <HAL_RADIO_TIMER_Tick+0x178>
1004ae2a:	e76d      	b.n	1004ad08 <HAL_RADIO_TIMER_Tick+0x54>
  }

  /* Check for periodic calibration */
  if (RADIO_TIMER_Context.calibrationSettings.calibration_in_progress)
1004ae2c:	4b47      	ldr	r3, [pc, #284]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae2e:	7b1b      	ldrb	r3, [r3, #12]
1004ae30:	2b00      	cmp	r3, #0
1004ae32:	d06a      	beq.n	1004af0a <HAL_RADIO_TIMER_Tick+0x256>
  {
    if (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL))
1004ae34:	4b46      	ldr	r3, [pc, #280]	@ (1004af50 <HAL_RADIO_TIMER_Tick+0x29c>)
1004ae36:	0018      	movs	r0, r3
1004ae38:	f7ff fe30 	bl	1004aa9c <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004ae3c:	1e03      	subs	r3, r0, #0
1004ae3e:	d100      	bne.n	1004ae42 <HAL_RADIO_TIMER_Tick+0x18e>
1004ae40:	e07f      	b.n	1004af42 <HAL_RADIO_TIMER_Tick+0x28e>
    {
      /* Calibration is completed */
      RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = FALSE;
1004ae42:	4b42      	ldr	r3, [pc, #264]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae44:	2200      	movs	r2, #0
1004ae46:	731a      	strb	r2, [r3, #12]
      if ((RADIO_TIMER_Context.wakeup_calibration == FALSE) && RADIO_TIMER_Context.stop_notimer_action)
1004ae48:	4b40      	ldr	r3, [pc, #256]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae4a:	2294      	movs	r2, #148	@ 0x94
1004ae4c:	5c9b      	ldrb	r3, [r3, r2]
1004ae4e:	2b00      	cmp	r3, #0
1004ae50:	d109      	bne.n	1004ae66 <HAL_RADIO_TIMER_Tick+0x1b2>
1004ae52:	4b3e      	ldr	r3, [pc, #248]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae54:	2293      	movs	r2, #147	@ 0x93
1004ae56:	5c9b      	ldrb	r3, [r3, r2]
1004ae58:	2b00      	cmp	r3, #0
1004ae5a:	d004      	beq.n	1004ae66 <HAL_RADIO_TIMER_Tick+0x1b2>
      {
        RADIO_TIMER_Context.stop_notimer_action = FALSE;
1004ae5c:	4b3b      	ldr	r3, [pc, #236]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae5e:	2293      	movs	r2, #147	@ 0x93
1004ae60:	2100      	movs	r1, #0
1004ae62:	5499      	strb	r1, [r3, r2]
1004ae64:	e034      	b.n	1004aed0 <HAL_RADIO_TIMER_Tick+0x21c>
      }
      else
      {
        /* Collect calibration data */
        _updateCalibrationData();
1004ae66:	f000 fe47 	bl	1004baf8 <_updateCalibrationData>
        RADIO_TIMER_Context.rootNode = _update_user_timeout(RADIO_TIMER_Context.rootNode, &expired);
1004ae6a:	4b38      	ldr	r3, [pc, #224]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae6c:	228c      	movs	r2, #140	@ 0x8c
1004ae6e:	589b      	ldr	r3, [r3, r2]
1004ae70:	240f      	movs	r4, #15
1004ae72:	193a      	adds	r2, r7, r4
1004ae74:	0011      	movs	r1, r2
1004ae76:	0018      	movs	r0, r3
1004ae78:	f000 fce4 	bl	1004b844 <_update_user_timeout>
1004ae7c:	0002      	movs	r2, r0
1004ae7e:	4b33      	ldr	r3, [pc, #204]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae80:	218c      	movs	r1, #140	@ 0x8c
1004ae82:	505a      	str	r2, [r3, r1]
        if (expired == 1)
1004ae84:	193b      	adds	r3, r7, r4
1004ae86:	781b      	ldrb	r3, [r3, #0]
1004ae88:	2b01      	cmp	r3, #1
1004ae8a:	d121      	bne.n	1004aed0 <HAL_RADIO_TIMER_Tick+0x21c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004ae8c:	f3ef 8310 	mrs	r3, PRIMASK
1004ae90:	617b      	str	r3, [r7, #20]
  return(result);
1004ae92:	697b      	ldr	r3, [r7, #20]
        {
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
1004ae94:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("cpsid i" : : : "memory");
1004ae96:	b672      	cpsid	i
}
1004ae98:	46c0      	nop			@ (mov r8, r8)
1004ae9a:	4b2c      	ldr	r3, [pc, #176]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004ae9c:	2291      	movs	r2, #145	@ 0x91
1004ae9e:	5c9b      	ldrb	r3, [r3, r2]
1004aea0:	3301      	adds	r3, #1
1004aea2:	4a2a      	ldr	r2, [pc, #168]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004aea4:	2192      	movs	r1, #146	@ 0x92
1004aea6:	5c52      	ldrb	r2, [r2, r1]
1004aea8:	4293      	cmp	r3, r2
1004aeaa:	d103      	bne.n	1004aeb4 <HAL_RADIO_TIMER_Tick+0x200>
1004aeac:	4b27      	ldr	r3, [pc, #156]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004aeae:	2291      	movs	r2, #145	@ 0x91
1004aeb0:	5c9b      	ldrb	r3, [r3, r2]
1004aeb2:	e004      	b.n	1004aebe <HAL_RADIO_TIMER_Tick+0x20a>
1004aeb4:	4b25      	ldr	r3, [pc, #148]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004aeb6:	2291      	movs	r2, #145	@ 0x91
1004aeb8:	5c9b      	ldrb	r3, [r3, r2]
1004aeba:	3301      	adds	r3, #1
1004aebc:	b2db      	uxtb	r3, r3
1004aebe:	4a23      	ldr	r2, [pc, #140]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004aec0:	2191      	movs	r1, #145	@ 0x91
1004aec2:	5453      	strb	r3, [r2, r1]
1004aec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004aec6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004aec8:	693b      	ldr	r3, [r7, #16]
1004aeca:	f383 8810 	msr	PRIMASK, r3
}
1004aece:	46c0      	nop			@ (mov r8, r8)
          /* A new root timer is already expired, mimic timer expire */
          INCREMENT_EXPIRE_COUNT;
        }
      }
#else
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &expired); //Start Radio Timer after calibration
1004aed0:	230f      	movs	r3, #15
1004aed2:	18fa      	adds	r2, r7, r3
1004aed4:	4b1f      	ldr	r3, [pc, #124]	@ (1004af54 <HAL_RADIO_TIMER_Tick+0x2a0>)
1004aed6:	0011      	movs	r1, r2
1004aed8:	0018      	movs	r0, r3
1004aeda:	f000 fec1 	bl	1004bc60 <_check_radio_activity>
#endif

      /* Schedule next calibration event */
      HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004aede:	4b1e      	ldr	r3, [pc, #120]	@ (1004af58 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004aee0:	0018      	movs	r0, r3
1004aee2:	f000 f991 	bl	1004b208 <HAL_RADIO_TIMER_StopVirtualTimer>
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
                   HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval);
1004aee6:	f000 f963 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004aeea:	0002      	movs	r2, r0
1004aeec:	000b      	movs	r3, r1
1004aeee:	4917      	ldr	r1, [pc, #92]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004aef0:	6849      	ldr	r1, [r1, #4]
1004aef2:	6039      	str	r1, [r7, #0]
1004aef4:	2100      	movs	r1, #0
1004aef6:	6079      	str	r1, [r7, #4]
      _start_timer(&RADIO_TIMER_Context.calibrationTimer,
1004aef8:	6838      	ldr	r0, [r7, #0]
1004aefa:	6879      	ldr	r1, [r7, #4]
1004aefc:	1812      	adds	r2, r2, r0
1004aefe:	414b      	adcs	r3, r1
1004af00:	4915      	ldr	r1, [pc, #84]	@ (1004af58 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004af02:	0008      	movs	r0, r1
1004af04:	f000 fbd8 	bl	1004b6b8 <_start_timer>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
      }
    }
  }
}
1004af08:	e01b      	b.n	1004af42 <HAL_RADIO_TIMER_Tick+0x28e>
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004af0a:	4b10      	ldr	r3, [pc, #64]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004af0c:	781b      	ldrb	r3, [r3, #0]
1004af0e:	2b00      	cmp	r3, #0
1004af10:	d017      	beq.n	1004af42 <HAL_RADIO_TIMER_Tick+0x28e>
      if (HAL_RADIO_TIMER_GetCurrentSysTime() > (RADIO_TIMER_Context.calibrationData.last_calibration_time +
1004af12:	f000 f94d 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004af16:	4b0d      	ldr	r3, [pc, #52]	@ (1004af4c <HAL_RADIO_TIMER_Tick+0x298>)
1004af18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004af1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004af1c:	24fa      	movs	r4, #250	@ 0xfa
1004af1e:	0364      	lsls	r4, r4, #13
1004af20:	2500      	movs	r5, #0
1004af22:	1912      	adds	r2, r2, r4
1004af24:	416b      	adcs	r3, r5
1004af26:	4299      	cmp	r1, r3
1004af28:	d803      	bhi.n	1004af32 <HAL_RADIO_TIMER_Tick+0x27e>
1004af2a:	d10a      	bne.n	1004af42 <HAL_RADIO_TIMER_Tick+0x28e>
1004af2c:	4290      	cmp	r0, r2
1004af2e:	d800      	bhi.n	1004af32 <HAL_RADIO_TIMER_Tick+0x27e>
}
1004af30:	e007      	b.n	1004af42 <HAL_RADIO_TIMER_Tick+0x28e>
        HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004af32:	4b09      	ldr	r3, [pc, #36]	@ (1004af58 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004af34:	0018      	movs	r0, r3
1004af36:	f000 f967 	bl	1004b208 <HAL_RADIO_TIMER_StopVirtualTimer>
        _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004af3a:	4b07      	ldr	r3, [pc, #28]	@ (1004af58 <HAL_RADIO_TIMER_Tick+0x2a4>)
1004af3c:	0018      	movs	r0, r3
1004af3e:	f000 fb8f 	bl	1004b660 <_calibration_callback>
}
1004af42:	46c0      	nop			@ (mov r8, r8)
1004af44:	46bd      	mov	sp, r7
1004af46:	b010      	add	sp, #64	@ 0x40
1004af48:	bdb0      	pop	{r4, r5, r7, pc}
1004af4a:	46c0      	nop			@ (mov r8, r8)
1004af4c:	20002870 	.word	0x20002870
1004af50:	60001000 	.word	0x60001000
1004af54:	200028c8 	.word	0x200028c8
1004af58:	200028b0 	.word	0x200028b0

1004af5c <HAL_RADIO_TIMER_GetAnchorPoint>:
  * @brief Get the last anchorPoint in system time unit.
  * @param current_system_time: Current System Time
  * @return TimerCapture register in system time unit.
  */
uint64_t HAL_RADIO_TIMER_GetAnchorPoint(uint64_t *current_system_time)
{
1004af5c:	b580      	push	{r7, lr}
1004af5e:	b082      	sub	sp, #8
1004af60:	af00      	add	r7, sp, #0
1004af62:	6078      	str	r0, [r7, #4]
  return TIMER_GetPastSysTime(BLUE->TIMERCAPTUREREG, current_system_time);
1004af64:	23c0      	movs	r3, #192	@ 0xc0
1004af66:	05db      	lsls	r3, r3, #23
1004af68:	695b      	ldr	r3, [r3, #20]
1004af6a:	687a      	ldr	r2, [r7, #4]
1004af6c:	0011      	movs	r1, r2
1004af6e:	0018      	movs	r0, r3
1004af70:	f000 ffe8 	bl	1004bf44 <TIMER_GetPastSysTime>
1004af74:	0002      	movs	r2, r0
1004af76:	000b      	movs	r3, r1
}
1004af78:	0010      	movs	r0, r2
1004af7a:	0019      	movs	r1, r3
1004af7c:	46bd      	mov	sp, r7
1004af7e:	b002      	add	sp, #8
1004af80:	bd80      	pop	{r7, pc}
	...

1004af84 <HAL_RADIO_TIMER_SetRadioTimerValue>:
  * @param  cal_req: Specify if PLL calibration is requested (1) or not (0).
  * @retval 0 if radio activity has been scheduled successfully.
  * @retval 1 if radio activity has been rejected (it is too close or in the past).
  */
uint32_t HAL_RADIO_TIMER_SetRadioTimerValue(uint32_t time, uint8_t event_type, uint8_t cal_req)
{
1004af84:	b5f0      	push	{r4, r5, r6, r7, lr}
1004af86:	b085      	sub	sp, #20
1004af88:	af00      	add	r7, sp, #0
1004af8a:	6078      	str	r0, [r7, #4]
1004af8c:	0008      	movs	r0, r1
1004af8e:	0011      	movs	r1, r2
1004af90:	1cfb      	adds	r3, r7, #3
1004af92:	1c02      	adds	r2, r0, #0
1004af94:	701a      	strb	r2, [r3, #0]
1004af96:	1cbb      	adds	r3, r7, #2
1004af98:	1c0a      	adds	r2, r1, #0
1004af9a:	701a      	strb	r2, [r3, #0]
  uint8_t retVal = 0;
1004af9c:	260f      	movs	r6, #15
1004af9e:	19bb      	adds	r3, r7, r6
1004afa0:	2200      	movs	r2, #0
1004afa2:	701a      	strb	r2, [r3, #0]
#if defined (STM32WB06) || defined (STM32WB07)
  uint64_t current_time;
#endif

  RADIO_TIMER_Context.radioTimer.event_type = event_type;
1004afa4:	1cfb      	adds	r3, r7, #3
1004afa6:	781b      	ldrb	r3, [r3, #0]
1004afa8:	1e5a      	subs	r2, r3, #1
1004afaa:	4193      	sbcs	r3, r2
1004afac:	b2d9      	uxtb	r1, r3
1004afae:	4b1b      	ldr	r3, [pc, #108]	@ (1004b01c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004afb0:	2264      	movs	r2, #100	@ 0x64
1004afb2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.cal_req = cal_req;
1004afb4:	1cbb      	adds	r3, r7, #2
1004afb6:	781b      	ldrb	r3, [r3, #0]
1004afb8:	1e5a      	subs	r2, r3, #1
1004afba:	4193      	sbcs	r3, r2
1004afbc:	b2d9      	uxtb	r1, r3
1004afbe:	4b17      	ldr	r3, [pc, #92]	@ (1004b01c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004afc0:	2260      	movs	r2, #96	@ 0x60
1004afc2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.expiryTime = RADIO_TIMER_Context.calibrationData.last_calibration_time + (uint32_t)(time - (uint32_t)RADIO_TIMER_Context.calibrationData.last_calibration_time);
1004afc4:	4b15      	ldr	r3, [pc, #84]	@ (1004b01c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004afc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004afca:	4914      	ldr	r1, [pc, #80]	@ (1004b01c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004afcc:	6a88      	ldr	r0, [r1, #40]	@ 0x28
1004afce:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
1004afd0:	6879      	ldr	r1, [r7, #4]
1004afd2:	1a09      	subs	r1, r1, r0
1004afd4:	000c      	movs	r4, r1
1004afd6:	2100      	movs	r1, #0
1004afd8:	000d      	movs	r5, r1
1004afda:	1912      	adds	r2, r2, r4
1004afdc:	416b      	adcs	r3, r5
1004afde:	490f      	ldr	r1, [pc, #60]	@ (1004b01c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004afe0:	658a      	str	r2, [r1, #88]	@ 0x58
1004afe2:	65cb      	str	r3, [r1, #92]	@ 0x5c
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004afe4:	4b0d      	ldr	r3, [pc, #52]	@ (1004b01c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004afe6:	2261      	movs	r2, #97	@ 0x61
1004afe8:	2100      	movs	r1, #0
1004afea:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004afec:	4b0b      	ldr	r3, [pc, #44]	@ (1004b01c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004afee:	2263      	movs	r2, #99	@ 0x63
1004aff0:	2100      	movs	r1, #0
1004aff2:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = TRUE;
1004aff4:	4b09      	ldr	r3, [pc, #36]	@ (1004b01c <HAL_RADIO_TIMER_SetRadioTimerValue+0x98>)
1004aff6:	2262      	movs	r2, #98	@ 0x62
1004aff8:	2101      	movs	r1, #1
1004affa:	5499      	strb	r1, [r3, r2]
      _set_controller_as_host();
      _check_host_activity();
    }
  }
#else
  _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &retVal);
1004affc:	19ba      	adds	r2, r7, r6
1004affe:	4b08      	ldr	r3, [pc, #32]	@ (1004b020 <HAL_RADIO_TIMER_SetRadioTimerValue+0x9c>)
1004b000:	0011      	movs	r1, r2
1004b002:	0018      	movs	r0, r3
1004b004:	f000 fe2c 	bl	1004bc60 <_check_radio_activity>
#endif

  _virtualTimeBaseEnable(ENABLE);
1004b008:	2001      	movs	r0, #1
1004b00a:	f000 fcd3 	bl	1004b9b4 <_virtualTimeBaseEnable>

  return retVal;
1004b00e:	19bb      	adds	r3, r7, r6
1004b010:	781b      	ldrb	r3, [r3, #0]
}
1004b012:	0018      	movs	r0, r3
1004b014:	46bd      	mov	sp, r7
1004b016:	b005      	add	sp, #20
1004b018:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004b01a:	46c0      	nop			@ (mov r8, r8)
1004b01c:	20002870 	.word	0x20002870
1004b020:	200028c8 	.word	0x200028c8

1004b024 <HAL_RADIO_TIMER_ClearRadioTimerValue>:
  * @retval 0 if the radio activity has been cleared successfully.
  * @retval 1 if it is too late to clear the last radio activity.
  * @retval 2 if it might not be possible to clear the last radio activity.
  */
uint32_t HAL_RADIO_TIMER_ClearRadioTimerValue(void)
{
1004b024:	b5b0      	push	{r4, r5, r7, lr}
1004b026:	b088      	sub	sp, #32
1004b028:	af00      	add	r7, sp, #0
  int64_t time_diff;
  uint8_t retVal;

  /* Disable Radio Timer1/2 and BLE Wakeup Timer */
  LL_RADIO_TIMER_DisableTimer1(BLUE);
1004b02a:	23c0      	movs	r3, #192	@ 0xc0
1004b02c:	05db      	lsls	r3, r3, #23
1004b02e:	0018      	movs	r0, r3
1004b030:	f7ff fc0a 	bl	1004a848 <LL_RADIO_TIMER_DisableTimer1>
  LL_RADIO_TIMER_DisableTimer2(BLUE);
1004b034:	23c0      	movs	r3, #192	@ 0xc0
1004b036:	05db      	lsls	r3, r3, #23
1004b038:	0018      	movs	r0, r3
1004b03a:	f7ff fc14 	bl	1004a866 <LL_RADIO_TIMER_DisableTimer2>
  LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004b03e:	4b31      	ldr	r3, [pc, #196]	@ (1004b104 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe0>)
1004b040:	0018      	movs	r0, r3
1004b042:	f7ff fc3b 	bl	1004a8bc <LL_RADIO_TIMER_DisableBLEWakeupTimer>
  RADIO_TIMER_Context.radioTimer.active = FALSE;
1004b046:	4b30      	ldr	r3, [pc, #192]	@ (1004b108 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b048:	2261      	movs	r2, #97	@ 0x61
1004b04a:	2100      	movs	r1, #0
1004b04c:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004b04e:	4b2e      	ldr	r3, [pc, #184]	@ (1004b108 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b050:	2262      	movs	r2, #98	@ 0x62
1004b052:	2100      	movs	r1, #0
1004b054:	5499      	strb	r1, [r3, r2]
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004b056:	4b2c      	ldr	r3, [pc, #176]	@ (1004b108 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b058:	2263      	movs	r2, #99	@ 0x63
1004b05a:	2100      	movs	r1, #0
1004b05c:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b05e:	f3ef 8310 	mrs	r3, PRIMASK
1004b062:	60bb      	str	r3, [r7, #8]
  return(result);
1004b064:	68bb      	ldr	r3, [r7, #8]

  /*The rfSetup is different if Timer1 or Wakeup timer is programmed*/
  ATOMIC_SECTION_BEGIN();
1004b066:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004b068:	b672      	cpsid	i
}
1004b06a:	46c0      	nop			@ (mov r8, r8)
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004b06c:	4b26      	ldr	r3, [pc, #152]	@ (1004b108 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b06e:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
1004b070:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
              - HAL_RADIO_TIMER_GetCurrentSysTime() \
1004b072:	f000 f89d 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b076:	0002      	movs	r2, r0
1004b078:	000b      	movs	r3, r1
1004b07a:	1aa4      	subs	r4, r4, r2
1004b07c:	419d      	sbcs	r5, r3
1004b07e:	0022      	movs	r2, r4
1004b080:	002b      	movs	r3, r5
              - RADIO_TIMER_Context.last_setup_time;
1004b082:	4921      	ldr	r1, [pc, #132]	@ (1004b108 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xe4>)
1004b084:	2084      	movs	r0, #132	@ 0x84
1004b086:	5c09      	ldrb	r1, [r1, r0]
1004b088:	6039      	str	r1, [r7, #0]
1004b08a:	2100      	movs	r1, #0
1004b08c:	6079      	str	r1, [r7, #4]
1004b08e:	6838      	ldr	r0, [r7, #0]
1004b090:	6879      	ldr	r1, [r7, #4]
1004b092:	1a12      	subs	r2, r2, r0
1004b094:	418b      	sbcs	r3, r1
  time_diff = RADIO_TIMER_Context.radioTimer.expiryTime \
1004b096:	613a      	str	r2, [r7, #16]
1004b098:	617b      	str	r3, [r7, #20]
1004b09a:	69bb      	ldr	r3, [r7, #24]
1004b09c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b09e:	68fb      	ldr	r3, [r7, #12]
1004b0a0:	f383 8810 	msr	PRIMASK, r3
}
1004b0a4:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
#endif

  if (time_diff <= 0)
1004b0a6:	697b      	ldr	r3, [r7, #20]
1004b0a8:	2b00      	cmp	r3, #0
1004b0aa:	dc0c      	bgt.n	1004b0c6 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
1004b0ac:	697b      	ldr	r3, [r7, #20]
1004b0ae:	2b00      	cmp	r3, #0
1004b0b0:	d102      	bne.n	1004b0b8 <HAL_RADIO_TIMER_ClearRadioTimerValue+0x94>
1004b0b2:	693b      	ldr	r3, [r7, #16]
1004b0b4:	2b00      	cmp	r3, #0
1004b0b6:	d106      	bne.n	1004b0c6 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xa2>
  {
    retVal = HAL_RADIO_TIMER_LATE;
1004b0b8:	2317      	movs	r3, #23
1004b0ba:	2208      	movs	r2, #8
1004b0bc:	189b      	adds	r3, r3, r2
1004b0be:	19db      	adds	r3, r3, r7
1004b0c0:	2201      	movs	r2, #1
1004b0c2:	701a      	strb	r2, [r3, #0]
1004b0c4:	e015      	b.n	1004b0f2 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else if (time_diff < CLEAR_MIN_THR)
1004b0c6:	697b      	ldr	r3, [r7, #20]
1004b0c8:	2b00      	cmp	r3, #0
1004b0ca:	dc0c      	bgt.n	1004b0e6 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
1004b0cc:	697b      	ldr	r3, [r7, #20]
1004b0ce:	2b00      	cmp	r3, #0
1004b0d0:	d102      	bne.n	1004b0d8 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xb4>
1004b0d2:	693b      	ldr	r3, [r7, #16]
1004b0d4:	2b0e      	cmp	r3, #14
1004b0d6:	d806      	bhi.n	1004b0e6 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xc2>
  {
    retVal = HAL_RADIO_TIMER_CRITICAL;
1004b0d8:	2317      	movs	r3, #23
1004b0da:	2208      	movs	r2, #8
1004b0dc:	189b      	adds	r3, r3, r2
1004b0de:	19db      	adds	r3, r3, r7
1004b0e0:	2202      	movs	r2, #2
1004b0e2:	701a      	strb	r2, [r3, #0]
1004b0e4:	e005      	b.n	1004b0f2 <HAL_RADIO_TIMER_ClearRadioTimerValue+0xce>
  }
  else
  {
    retVal = HAL_RADIO_TIMER_SUCCESS;
1004b0e6:	2317      	movs	r3, #23
1004b0e8:	2208      	movs	r2, #8
1004b0ea:	189b      	adds	r3, r3, r2
1004b0ec:	19db      	adds	r3, r3, r7
1004b0ee:	2200      	movs	r2, #0
1004b0f0:	701a      	strb	r2, [r3, #0]
  }

  return retVal;
1004b0f2:	2317      	movs	r3, #23
1004b0f4:	2208      	movs	r2, #8
1004b0f6:	189b      	adds	r3, r3, r2
1004b0f8:	19db      	adds	r3, r3, r7
1004b0fa:	781b      	ldrb	r3, [r3, #0]
}
1004b0fc:	0018      	movs	r0, r3
1004b0fe:	46bd      	mov	sp, r7
1004b100:	b008      	add	sp, #32
1004b102:	bdb0      	pop	{r4, r5, r7, pc}
1004b104:	60001800 	.word	0x60001800
1004b108:	20002870 	.word	0x20002870

1004b10c <HAL_RADIO_TIMER_SetRadioCloseTimeout>:
  *        The current time is sampled and increased by two.
  *        It means that the timer is going to trigger in a timer interval that goes
  *        from one to two machine time units.
  */
void HAL_RADIO_TIMER_SetRadioCloseTimeout(void)
{
1004b10c:	b580      	push	{r7, lr}
1004b10e:	b084      	sub	sp, #16
1004b110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b112:	f3ef 8310 	mrs	r3, PRIMASK
1004b116:	603b      	str	r3, [r7, #0]
  return(result);
1004b118:	683b      	ldr	r3, [r7, #0]
  uint32_t current_time;

  ATOMIC_SECTION_BEGIN();
1004b11a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
1004b11c:	b672      	cpsid	i
}
1004b11e:	46c0      	nop			@ (mov r8, r8)
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004b120:	4b0e      	ldr	r3, [pc, #56]	@ (1004b15c <HAL_RADIO_TIMER_SetRadioCloseTimeout+0x50>)
1004b122:	0018      	movs	r0, r3
1004b124:	f7ff fc21 	bl	1004a96a <LL_RADIO_TIMER_GetAbsoluteTime>
1004b128:	0003      	movs	r3, r0
1004b12a:	60bb      	str	r3, [r7, #8]
  LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + 2) & TIMER_MAX_VALUE));
1004b12c:	68bb      	ldr	r3, [r7, #8]
1004b12e:	1c9a      	adds	r2, r3, #2
1004b130:	23c0      	movs	r3, #192	@ 0xc0
1004b132:	05db      	lsls	r3, r3, #23
1004b134:	0011      	movs	r1, r2
1004b136:	0018      	movs	r0, r3
1004b138:	f7ff fba4 	bl	1004a884 <LL_RADIO_TIMER_SetTimeout>
  LL_RADIO_TIMER_EnableTimer1(BLUE);
1004b13c:	23c0      	movs	r3, #192	@ 0xc0
1004b13e:	05db      	lsls	r3, r3, #23
1004b140:	0018      	movs	r0, r3
1004b142:	f7ff fb71 	bl	1004a828 <LL_RADIO_TIMER_EnableTimer1>
1004b146:	68fb      	ldr	r3, [r7, #12]
1004b148:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b14a:	687b      	ldr	r3, [r7, #4]
1004b14c:	f383 8810 	msr	PRIMASK, r3
}
1004b150:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();
}
1004b152:	46c0      	nop			@ (mov r8, r8)
1004b154:	46bd      	mov	sp, r7
1004b156:	b004      	add	sp, #16
1004b158:	bd80      	pop	{r7, pc}
1004b15a:	46c0      	nop			@ (mov r8, r8)
1004b15c:	60001800 	.word	0x60001800

1004b160 <HAL_RADIO_TIMER_RadioTimerIsr>:
/**
  * @brief  Radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_RadioTimerIsr(void)
{
1004b160:	b580      	push	{r7, lr}
1004b162:	af00      	add	r7, sp, #0
  if (!(LL_RADIO_TIMER_IsEnabledTimer1(BLUE) || LL_RADIO_TIMER_IsEnabledTimer2(BLUE)))
  {
    _check_host_activity();
  }
#endif
}
1004b164:	46c0      	nop			@ (mov r8, r8)
1004b166:	46bd      	mov	sp, r7
1004b168:	bd80      	pop	{r7, pc}
	...

1004b16c <HAL_RADIO_TIMER_EndOfRadioActivityIsr>:
/**
  * @brief  Timer State machine semaphore to signal the radio activity finished.
  * @retval None
  */
void HAL_RADIO_TIMER_EndOfRadioActivityIsr(void)
{
1004b16c:	b580      	push	{r7, lr}
1004b16e:	af00      	add	r7, sp, #0
  RADIO_TIMER_Context.radioTimer.intTxRx_to_be_served = FALSE;
1004b170:	4b03      	ldr	r3, [pc, #12]	@ (1004b180 <HAL_RADIO_TIMER_EndOfRadioActivityIsr+0x14>)
1004b172:	2263      	movs	r2, #99	@ 0x63
1004b174:	2100      	movs	r1, #0
1004b176:	5499      	strb	r1, [r3, r2]
}
1004b178:	46c0      	nop			@ (mov r8, r8)
1004b17a:	46bd      	mov	sp, r7
1004b17c:	bd80      	pop	{r7, pc}
1004b17e:	46c0      	nop			@ (mov r8, r8)
1004b180:	20002870 	.word	0x20002870

1004b184 <HAL_RADIO_TIMER_MachineTimeToSysTime>:
  *          storing the system time. It should be called only in
  *          user context and not in interrupt context.
  * @return  STU value
  */
uint32_t HAL_RADIO_TIMER_MachineTimeToSysTime(uint32_t time)
{
1004b184:	b580      	push	{r7, lr}
1004b186:	b082      	sub	sp, #8
1004b188:	af00      	add	r7, sp, #0
1004b18a:	6078      	str	r0, [r7, #4]
  return blue_unit_conversion(time, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004b18c:	4b06      	ldr	r3, [pc, #24]	@ (1004b1a8 <HAL_RADIO_TIMER_MachineTimeToSysTime+0x24>)
1004b18e:	69db      	ldr	r3, [r3, #28]
1004b190:	0019      	movs	r1, r3
1004b192:	4a06      	ldr	r2, [pc, #24]	@ (1004b1ac <HAL_RADIO_TIMER_MachineTimeToSysTime+0x28>)
1004b194:	687b      	ldr	r3, [r7, #4]
1004b196:	0018      	movs	r0, r3
1004b198:	f7f4 ff92 	bl	100400c0 <blue_unit_conversion>
1004b19c:	0003      	movs	r3, r0
}
1004b19e:	0018      	movs	r0, r3
1004b1a0:	46bd      	mov	sp, r7
1004b1a2:	b002      	add	sp, #8
1004b1a4:	bd80      	pop	{r7, pc}
1004b1a6:	46c0      	nop			@ (mov r8, r8)
1004b1a8:	20002870 	.word	0x20002870
1004b1ac:	00000635 	.word	0x00000635

1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>:
  *         The returned value can be used as absolute time parameter where needed in the other
  *         HAL_RADIO_TIMER* APIs
  * @return absolute current time expressed in system time units.
  */
uint64_t HAL_RADIO_TIMER_GetCurrentSysTime(void)
{
1004b1b0:	b580      	push	{r7, lr}
1004b1b2:	b082      	sub	sp, #8
1004b1b4:	af00      	add	r7, sp, #0
  uint32_t current_machine_time;
  return _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004b1b6:	1d3a      	adds	r2, r7, #4
1004b1b8:	4b05      	ldr	r3, [pc, #20]	@ (1004b1d0 <HAL_RADIO_TIMER_GetCurrentSysTime+0x20>)
1004b1ba:	0011      	movs	r1, r2
1004b1bc:	0018      	movs	r0, r3
1004b1be:	f000 fad9 	bl	1004b774 <_get_system_time_and_machine>
1004b1c2:	0002      	movs	r2, r0
1004b1c4:	000b      	movs	r3, r1
}
1004b1c6:	0010      	movs	r0, r2
1004b1c8:	0019      	movs	r1, r3
1004b1ca:	46bd      	mov	sp, r7
1004b1cc:	b002      	add	sp, #8
1004b1ce:	bd80      	pop	{r7, pc}
1004b1d0:	20002870 	.word	0x20002870

1004b1d4 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>:
  * @param time: Absolute time expressed in STU.
  * @retval 0 if the timerHandle is valid.
  * @retval 1 if the timerHandle is not valid. It is already started.
  */
uint32_t HAL_RADIO_TIMER_StartVirtualTimerSysTime(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004b1d4:	b590      	push	{r4, r7, lr}
1004b1d6:	b087      	sub	sp, #28
1004b1d8:	af00      	add	r7, sp, #0
1004b1da:	60f8      	str	r0, [r7, #12]
1004b1dc:	603a      	str	r2, [r7, #0]
1004b1de:	607b      	str	r3, [r7, #4]
  uint8_t retVal;
  retVal = _start_timer(timerHandle, time);
1004b1e0:	683a      	ldr	r2, [r7, #0]
1004b1e2:	687b      	ldr	r3, [r7, #4]
1004b1e4:	68f9      	ldr	r1, [r7, #12]
1004b1e6:	0008      	movs	r0, r1
1004b1e8:	f000 fa66 	bl	1004b6b8 <_start_timer>
1004b1ec:	0002      	movs	r2, r0
1004b1ee:	2417      	movs	r4, #23
1004b1f0:	193b      	adds	r3, r7, r4
1004b1f2:	701a      	strb	r2, [r3, #0]
  _virtualTimeBaseEnable(ENABLE);
1004b1f4:	2001      	movs	r0, #1
1004b1f6:	f000 fbdd 	bl	1004b9b4 <_virtualTimeBaseEnable>

  return retVal;
1004b1fa:	193b      	adds	r3, r7, r4
1004b1fc:	781b      	ldrb	r3, [r3, #0]
}
1004b1fe:	0018      	movs	r0, r3
1004b200:	46bd      	mov	sp, r7
1004b202:	b007      	add	sp, #28
1004b204:	bd90      	pop	{r4, r7, pc}
	...

1004b208 <HAL_RADIO_TIMER_StopVirtualTimer>:
  * @brief  Stops the one-shot virtual timer specified if found
  * @param  timerHandle: The virtual timer
  * @retval None
  */
void HAL_RADIO_TIMER_StopVirtualTimer(VTIMER_HandleType *timerHandle)
{
1004b208:	b590      	push	{r4, r7, lr}
1004b20a:	b089      	sub	sp, #36	@ 0x24
1004b20c:	af00      	add	r7, sp, #0
1004b20e:	6078      	str	r0, [r7, #4]
  VTIMER_HandleType *rootNode = _remove_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle);
1004b210:	4b28      	ldr	r3, [pc, #160]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b212:	228c      	movs	r2, #140	@ 0x8c
1004b214:	589b      	ldr	r3, [r3, r2]
1004b216:	687a      	ldr	r2, [r7, #4]
1004b218:	0011      	movs	r1, r2
1004b21a:	0018      	movs	r0, r3
1004b21c:	f000 fbf6 	bl	1004ba0c <_remove_timer_in_queue>
1004b220:	0003      	movs	r3, r0
1004b222:	61fb      	str	r3, [r7, #28]
  uint8_t expired = 0;
1004b224:	210f      	movs	r1, #15
1004b226:	187b      	adds	r3, r7, r1
1004b228:	2200      	movs	r2, #0
1004b22a:	701a      	strb	r2, [r3, #0]
  timerHandle->active = FALSE;
1004b22c:	687b      	ldr	r3, [r7, #4]
1004b22e:	2200      	movs	r2, #0
1004b230:	731a      	strb	r2, [r3, #12]
  if (RADIO_TIMER_Context.rootNode != rootNode)
1004b232:	4b20      	ldr	r3, [pc, #128]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b234:	228c      	movs	r2, #140	@ 0x8c
1004b236:	589b      	ldr	r3, [r3, r2]
1004b238:	69fa      	ldr	r2, [r7, #28]
1004b23a:	429a      	cmp	r2, r3
1004b23c:	d031      	beq.n	1004b2a2 <HAL_RADIO_TIMER_StopVirtualTimer+0x9a>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(rootNode, &expired);
1004b23e:	000c      	movs	r4, r1
1004b240:	187a      	adds	r2, r7, r1
1004b242:	69fb      	ldr	r3, [r7, #28]
1004b244:	0011      	movs	r1, r2
1004b246:	0018      	movs	r0, r3
1004b248:	f000 fafc 	bl	1004b844 <_update_user_timeout>
1004b24c:	0002      	movs	r2, r0
1004b24e:	4b19      	ldr	r3, [pc, #100]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b250:	218c      	movs	r1, #140	@ 0x8c
1004b252:	505a      	str	r2, [r3, r1]
    if (expired)
1004b254:	193b      	adds	r3, r7, r4
1004b256:	781b      	ldrb	r3, [r3, #0]
1004b258:	2b00      	cmp	r3, #0
1004b25a:	d026      	beq.n	1004b2aa <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b25c:	f3ef 8310 	mrs	r3, PRIMASK
1004b260:	617b      	str	r3, [r7, #20]
  return(result);
1004b262:	697b      	ldr	r3, [r7, #20]
    {
      /* A new root timer is already expired, mimic timer expire */
      INCREMENT_EXPIRE_COUNT;
1004b264:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
1004b266:	b672      	cpsid	i
}
1004b268:	46c0      	nop			@ (mov r8, r8)
1004b26a:	4b12      	ldr	r3, [pc, #72]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b26c:	2291      	movs	r2, #145	@ 0x91
1004b26e:	5c9b      	ldrb	r3, [r3, r2]
1004b270:	3301      	adds	r3, #1
1004b272:	4a10      	ldr	r2, [pc, #64]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b274:	2192      	movs	r1, #146	@ 0x92
1004b276:	5c52      	ldrb	r2, [r2, r1]
1004b278:	4293      	cmp	r3, r2
1004b27a:	d103      	bne.n	1004b284 <HAL_RADIO_TIMER_StopVirtualTimer+0x7c>
1004b27c:	4b0d      	ldr	r3, [pc, #52]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b27e:	2291      	movs	r2, #145	@ 0x91
1004b280:	5c9b      	ldrb	r3, [r3, r2]
1004b282:	e004      	b.n	1004b28e <HAL_RADIO_TIMER_StopVirtualTimer+0x86>
1004b284:	4b0b      	ldr	r3, [pc, #44]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b286:	2291      	movs	r2, #145	@ 0x91
1004b288:	5c9b      	ldrb	r3, [r3, r2]
1004b28a:	3301      	adds	r3, #1
1004b28c:	b2db      	uxtb	r3, r3
1004b28e:	4a09      	ldr	r2, [pc, #36]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b290:	2191      	movs	r1, #145	@ 0x91
1004b292:	5453      	strb	r3, [r2, r1]
1004b294:	69bb      	ldr	r3, [r7, #24]
1004b296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b298:	693b      	ldr	r3, [r7, #16]
1004b29a:	f383 8810 	msr	PRIMASK, r3
}
1004b29e:	46c0      	nop			@ (mov r8, r8)
  }
  else
  {
    RADIO_TIMER_Context.rootNode = rootNode;
  }
}
1004b2a0:	e003      	b.n	1004b2aa <HAL_RADIO_TIMER_StopVirtualTimer+0xa2>
    RADIO_TIMER_Context.rootNode = rootNode;
1004b2a2:	4b04      	ldr	r3, [pc, #16]	@ (1004b2b4 <HAL_RADIO_TIMER_StopVirtualTimer+0xac>)
1004b2a4:	218c      	movs	r1, #140	@ 0x8c
1004b2a6:	69fa      	ldr	r2, [r7, #28]
1004b2a8:	505a      	str	r2, [r3, r1]
}
1004b2aa:	46c0      	nop			@ (mov r8, r8)
1004b2ac:	46bd      	mov	sp, r7
1004b2ae:	b009      	add	sp, #36	@ 0x24
1004b2b0:	bd90      	pop	{r4, r7, pc}
1004b2b2:	46c0      	nop			@ (mov r8, r8)
1004b2b4:	20002870 	.word	0x20002870

1004b2b8 <HAL_RADIO_TIMER_TimeoutCallback>:
/**
  * @brief  Virtual timer Timeout Callback. It signals that a host timeout occurred.
  * @retval None
  */
void HAL_RADIO_TIMER_TimeoutCallback(void)
{
1004b2b8:	b580      	push	{r7, lr}
1004b2ba:	b082      	sub	sp, #8
1004b2bc:	af00      	add	r7, sp, #0
  volatile uint32_t status = 0;
1004b2be:	2300      	movs	r3, #0
1004b2c0:	607b      	str	r3, [r7, #4]
  UNUSED(status);
1004b2c2:	687b      	ldr	r3, [r7, #4]
#if defined (STM32WB06) || defined (STM32WB07)
  RADIO_TIMER_Context.hostIsRadioPending = 0;
#endif

  /* Disable host timer */
  LL_RADIO_TIMER_DisableCPUWakeupTimer(WAKEUP);
1004b2c4:	4b13      	ldr	r3, [pc, #76]	@ (1004b314 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004b2c6:	0018      	movs	r0, r3
1004b2c8:	f7ff fb18 	bl	1004a8fc <LL_RADIO_TIMER_DisableCPUWakeupTimer>
  INCREMENT_EXPIRE_COUNT_ISR;
1004b2cc:	4b12      	ldr	r3, [pc, #72]	@ (1004b318 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004b2ce:	2291      	movs	r2, #145	@ 0x91
1004b2d0:	5c9b      	ldrb	r3, [r3, r2]
1004b2d2:	3301      	adds	r3, #1
1004b2d4:	4a10      	ldr	r2, [pc, #64]	@ (1004b318 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004b2d6:	2192      	movs	r1, #146	@ 0x92
1004b2d8:	5c52      	ldrb	r2, [r2, r1]
1004b2da:	4293      	cmp	r3, r2
1004b2dc:	d103      	bne.n	1004b2e6 <HAL_RADIO_TIMER_TimeoutCallback+0x2e>
1004b2de:	4b0e      	ldr	r3, [pc, #56]	@ (1004b318 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004b2e0:	2291      	movs	r2, #145	@ 0x91
1004b2e2:	5c9b      	ldrb	r3, [r3, r2]
1004b2e4:	e004      	b.n	1004b2f0 <HAL_RADIO_TIMER_TimeoutCallback+0x38>
1004b2e6:	4b0c      	ldr	r3, [pc, #48]	@ (1004b318 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004b2e8:	2291      	movs	r2, #145	@ 0x91
1004b2ea:	5c9b      	ldrb	r3, [r3, r2]
1004b2ec:	3301      	adds	r3, #1
1004b2ee:	b2db      	uxtb	r3, r3
1004b2f0:	4a09      	ldr	r2, [pc, #36]	@ (1004b318 <HAL_RADIO_TIMER_TimeoutCallback+0x60>)
1004b2f2:	2191      	movs	r1, #145	@ 0x91
1004b2f4:	5453      	strb	r3, [r2, r1]
  /* Clear the interrupt */
  LL_RADIO_TIMER_ClearFlag_CPUWakeup(WAKEUP);
1004b2f6:	4b07      	ldr	r3, [pc, #28]	@ (1004b314 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004b2f8:	0018      	movs	r0, r3
1004b2fa:	f7ff fb77 	bl	1004a9ec <LL_RADIO_TIMER_ClearFlag_CPUWakeup>
  status = LL_RADIO_TIMER_IsActiveFlag_CPUWakeup(WAKEUP);
1004b2fe:	4b05      	ldr	r3, [pc, #20]	@ (1004b314 <HAL_RADIO_TIMER_TimeoutCallback+0x5c>)
1004b300:	0018      	movs	r0, r3
1004b302:	f7ff fb81 	bl	1004aa08 <LL_RADIO_TIMER_IsActiveFlag_CPUWakeup>
1004b306:	0003      	movs	r3, r0
1004b308:	607b      	str	r3, [r7, #4]
}
1004b30a:	46c0      	nop			@ (mov r8, r8)
1004b30c:	46bd      	mov	sp, r7
1004b30e:	b002      	add	sp, #8
1004b310:	bd80      	pop	{r7, pc}
1004b312:	46c0      	nop			@ (mov r8, r8)
1004b314:	60001800 	.word	0x60001800
1004b318:	20002870 	.word	0x20002870

1004b31c <_calibrationProcedure>:
/** @defgroup RADIO_TIMER_Private_Functions  RADIO TIMER Private Functions
  * @{
  */

static void _calibrationProcedure(void)
{
1004b31c:	b580      	push	{r7, lr}
1004b31e:	af00      	add	r7, sp, #0
  /* Make sure any pending calibration is over */
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004b320:	46c0      	nop			@ (mov r8, r8)
1004b322:	4b0b      	ldr	r3, [pc, #44]	@ (1004b350 <_calibrationProcedure+0x34>)
1004b324:	0018      	movs	r0, r3
1004b326:	f7ff fbb9 	bl	1004aa9c <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004b32a:	1e03      	subs	r3, r0, #0
1004b32c:	d0f9      	beq.n	1004b322 <_calibrationProcedure+0x6>

  /* Set SLOW_COUNT to 23, that is calibrate over 24 clock periods, this number
  cannot be changed without changing all the integer maths function in the
  file  */
  LL_RADIO_TIMER_SetLSIWindowCalibrationLength(RADIO_CTRL, 23);
1004b32e:	4b08      	ldr	r3, [pc, #32]	@ (1004b350 <_calibrationProcedure+0x34>)
1004b330:	2117      	movs	r1, #23
1004b332:	0018      	movs	r0, r3
1004b334:	f7ff fb79 	bl	1004aa2a <LL_RADIO_TIMER_SetLSIWindowCalibrationLength>

  /* Start a calibration and take the correct freq */
  _timer_calibrate(&RADIO_TIMER_Context.calibrationData);
1004b338:	4b06      	ldr	r3, [pc, #24]	@ (1004b354 <_calibrationProcedure+0x38>)
1004b33a:	0018      	movs	r0, r3
1004b33c:	f000 f81e 	bl	1004b37c <_timer_calibrate>
  /* For first time set last to current */
  RADIO_TIMER_Context.calibrationData.last_period1 = RADIO_TIMER_Context.calibrationData.period1;
1004b340:	4b05      	ldr	r3, [pc, #20]	@ (1004b358 <_calibrationProcedure+0x3c>)
1004b342:	69da      	ldr	r2, [r3, #28]
1004b344:	4b04      	ldr	r3, [pc, #16]	@ (1004b358 <_calibrationProcedure+0x3c>)
1004b346:	621a      	str	r2, [r3, #32]

}
1004b348:	46c0      	nop			@ (mov r8, r8)
1004b34a:	46bd      	mov	sp, r7
1004b34c:	bd80      	pop	{r7, pc}
1004b34e:	46c0      	nop			@ (mov r8, r8)
1004b350:	60001000 	.word	0x60001000
1004b354:	20002880 	.word	0x20002880
1004b358:	20002870 	.word	0x20002870

1004b35c <_timer_start_calibration>:

static void _timer_start_calibration(void)
{
1004b35c:	b580      	push	{r7, lr}
1004b35e:	af00      	add	r7, sp, #0
  /* Clear any pending interrupt */
  LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded(RADIO_CTRL);
1004b360:	4b05      	ldr	r3, [pc, #20]	@ (1004b378 <_timer_start_calibration+0x1c>)
1004b362:	0018      	movs	r0, r3
1004b364:	f7ff fb8c 	bl	1004aa80 <LL_RADIO_TIMER_ClearFlag_LSICalibrationEnded>
  /* Start calibration */
  LL_RADIO_TIMER_StartLSICalibration(RADIO_CTRL);
1004b368:	4b03      	ldr	r3, [pc, #12]	@ (1004b378 <_timer_start_calibration+0x1c>)
1004b36a:	0018      	movs	r0, r3
1004b36c:	f7ff fb69 	bl	1004aa42 <LL_RADIO_TIMER_StartLSICalibration>
}
1004b370:	46c0      	nop			@ (mov r8, r8)
1004b372:	46bd      	mov	sp, r7
1004b374:	bd80      	pop	{r7, pc}
1004b376:	46c0      	nop			@ (mov r8, r8)
1004b378:	60001000 	.word	0x60001000

1004b37c <_timer_calibrate>:

static void _timer_calibrate(CalibrationDataTypeDef *calibrationData)
{
1004b37c:	b580      	push	{r7, lr}
1004b37e:	b082      	sub	sp, #8
1004b380:	af00      	add	r7, sp, #0
1004b382:	6078      	str	r0, [r7, #4]
  _timer_start_calibration();
1004b384:	f7ff ffea 	bl	1004b35c <_timer_start_calibration>
  while (LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded(RADIO_CTRL) == 0);
1004b388:	46c0      	nop			@ (mov r8, r8)
1004b38a:	4b07      	ldr	r3, [pc, #28]	@ (1004b3a8 <_timer_calibrate+0x2c>)
1004b38c:	0018      	movs	r0, r3
1004b38e:	f7ff fb85 	bl	1004aa9c <LL_RADIO_TIMER_IsActiveFlag_LSICalibrationEnded>
1004b392:	1e03      	subs	r3, r0, #0
1004b394:	d0f9      	beq.n	1004b38a <_timer_calibrate+0xe>
  _get_calibration_data(calibrationData);
1004b396:	687b      	ldr	r3, [r7, #4]
1004b398:	0018      	movs	r0, r3
1004b39a:	f000 f807 	bl	1004b3ac <_get_calibration_data>
}
1004b39e:	46c0      	nop			@ (mov r8, r8)
1004b3a0:	46bd      	mov	sp, r7
1004b3a2:	b002      	add	sp, #8
1004b3a4:	bd80      	pop	{r7, pc}
1004b3a6:	46c0      	nop			@ (mov r8, r8)
1004b3a8:	60001000 	.word	0x60001000

1004b3ac <_get_calibration_data>:

static void _get_calibration_data(CalibrationDataTypeDef *calibrationData)
{
1004b3ac:	b580      	push	{r7, lr}
1004b3ae:	b08a      	sub	sp, #40	@ 0x28
1004b3b0:	af00      	add	r7, sp, #0
1004b3b2:	6078      	str	r0, [r7, #4]
  int32_t b2;
  int32_t mult;
  int32_t a1;
  int32_t a2;

  period =  LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004b3b4:	4b2e      	ldr	r3, [pc, #184]	@ (1004b470 <_get_calibration_data+0xc4>)
1004b3b6:	0018      	movs	r0, r3
1004b3b8:	f7ff fb4e 	bl	1004aa58 <LL_RADIO_TIMER_GetLSIPeriod>
1004b3bc:	0003      	movs	r3, r0
1004b3be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004b3c0:	e005      	b.n	1004b3ce <_get_calibration_data+0x22>
  {
    period = LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL);
1004b3c2:	4b2b      	ldr	r3, [pc, #172]	@ (1004b470 <_get_calibration_data+0xc4>)
1004b3c4:	0018      	movs	r0, r3
1004b3c6:	f7ff fb47 	bl	1004aa58 <LL_RADIO_TIMER_GetLSIPeriod>
1004b3ca:	0003      	movs	r3, r0
1004b3cc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (period != LL_RADIO_TIMER_GetLSIPeriod(RADIO_CTRL) || period == 0)
1004b3ce:	4b28      	ldr	r3, [pc, #160]	@ (1004b470 <_get_calibration_data+0xc4>)
1004b3d0:	0018      	movs	r0, r3
1004b3d2:	f7ff fb41 	bl	1004aa58 <LL_RADIO_TIMER_GetLSIPeriod>
1004b3d6:	0002      	movs	r2, r0
1004b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b3da:	429a      	cmp	r2, r3
1004b3dc:	d1f1      	bne.n	1004b3c2 <_get_calibration_data+0x16>
1004b3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b3e0:	2b00      	cmp	r3, #0
1004b3e2:	d0ee      	beq.n	1004b3c2 <_get_calibration_data+0x16>
  }

  mul1 = 0x8BCF6 ;
1004b3e4:	4b23      	ldr	r3, [pc, #140]	@ (1004b474 <_get_calibration_data+0xc8>)
1004b3e6:	61fb      	str	r3, [r7, #28]
  b1 = period >> 8 ;
1004b3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b3ea:	121b      	asrs	r3, r3, #8
1004b3ec:	61bb      	str	r3, [r7, #24]
  b2 = period & 0xff ;
1004b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b3f0:	22ff      	movs	r2, #255	@ 0xff
1004b3f2:	4013      	ands	r3, r2
1004b3f4:	617b      	str	r3, [r7, #20]
  calibrationData->period1 = ((mul1 * b1) + ((b2 * mul1) >> 8) + 16) >> 5;
1004b3f6:	69fb      	ldr	r3, [r7, #28]
1004b3f8:	69ba      	ldr	r2, [r7, #24]
1004b3fa:	435a      	muls	r2, r3
1004b3fc:	697b      	ldr	r3, [r7, #20]
1004b3fe:	69f9      	ldr	r1, [r7, #28]
1004b400:	434b      	muls	r3, r1
1004b402:	121b      	asrs	r3, r3, #8
1004b404:	18d3      	adds	r3, r2, r3
1004b406:	3310      	adds	r3, #16
1004b408:	115a      	asrs	r2, r3, #5
1004b40a:	687b      	ldr	r3, [r7, #4]
1004b40c:	60da      	str	r2, [r3, #12]
  calibrationData->period = period;
1004b40e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004b410:	687b      	ldr	r3, [r7, #4]
1004b412:	601a      	str	r2, [r3, #0]

  mult = 0x753 ;
1004b414:	4b18      	ldr	r3, [pc, #96]	@ (1004b478 <_get_calibration_data+0xcc>)
1004b416:	613b      	str	r3, [r7, #16]
  freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004b418:	4b15      	ldr	r3, [pc, #84]	@ (1004b470 <_get_calibration_data+0xc4>)
1004b41a:	0018      	movs	r0, r3
1004b41c:	f7ff fb26 	bl	1004aa6c <LL_RADIO_TIMER_GetLSIFrequency>
1004b420:	0003      	movs	r3, r0
1004b422:	623b      	str	r3, [r7, #32]

  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004b424:	e005      	b.n	1004b432 <_get_calibration_data+0x86>
  {
    freq = LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL);
1004b426:	4b12      	ldr	r3, [pc, #72]	@ (1004b470 <_get_calibration_data+0xc4>)
1004b428:	0018      	movs	r0, r3
1004b42a:	f7ff fb1f 	bl	1004aa6c <LL_RADIO_TIMER_GetLSIFrequency>
1004b42e:	0003      	movs	r3, r0
1004b430:	623b      	str	r3, [r7, #32]
  while (freq != LL_RADIO_TIMER_GetLSIFrequency(RADIO_CTRL) || freq == 0)
1004b432:	4b0f      	ldr	r3, [pc, #60]	@ (1004b470 <_get_calibration_data+0xc4>)
1004b434:	0018      	movs	r0, r3
1004b436:	f7ff fb19 	bl	1004aa6c <LL_RADIO_TIMER_GetLSIFrequency>
1004b43a:	0002      	movs	r2, r0
1004b43c:	6a3b      	ldr	r3, [r7, #32]
1004b43e:	429a      	cmp	r2, r3
1004b440:	d1f1      	bne.n	1004b426 <_get_calibration_data+0x7a>
1004b442:	6a3b      	ldr	r3, [r7, #32]
1004b444:	2b00      	cmp	r3, #0
1004b446:	d0ee      	beq.n	1004b426 <_get_calibration_data+0x7a>
  }
  a1 = freq >> 6 ;
1004b448:	6a3b      	ldr	r3, [r7, #32]
1004b44a:	119b      	asrs	r3, r3, #6
1004b44c:	60fb      	str	r3, [r7, #12]
  a2 = a1 * mult ;
1004b44e:	68fb      	ldr	r3, [r7, #12]
1004b450:	693a      	ldr	r2, [r7, #16]
1004b452:	4353      	muls	r3, r2
1004b454:	60bb      	str	r3, [r7, #8]
  calibrationData->freq1 = (a2 + 128) >> 8 ;
1004b456:	68bb      	ldr	r3, [r7, #8]
1004b458:	3380      	adds	r3, #128	@ 0x80
1004b45a:	121a      	asrs	r2, r3, #8
1004b45c:	687b      	ldr	r3, [r7, #4]
1004b45e:	609a      	str	r2, [r3, #8]
  calibrationData->freq = freq;
1004b460:	6a3a      	ldr	r2, [r7, #32]
1004b462:	687b      	ldr	r3, [r7, #4]
1004b464:	605a      	str	r2, [r3, #4]
}
1004b466:	46c0      	nop			@ (mov r8, r8)
1004b468:	46bd      	mov	sp, r7
1004b46a:	b00a      	add	sp, #40	@ 0x28
1004b46c:	bd80      	pop	{r7, pc}
1004b46e:	46c0      	nop			@ (mov r8, r8)
1004b470:	60001000 	.word	0x60001000
1004b474:	0008bcf6 	.word	0x0008bcf6
1004b478:	00000753 	.word	0x00000753

1004b47c <_configureTxRxDelay>:

static void _configureTxRxDelay(RADIO_TIMER_ContextTypeDef *context, uint8_t calculate_st)
{
1004b47c:	b590      	push	{r4, r7, lr}
1004b47e:	b085      	sub	sp, #20
1004b480:	af00      	add	r7, sp, #0
1004b482:	6078      	str	r0, [r7, #4]
1004b484:	000a      	movs	r2, r1
1004b486:	1cfb      	adds	r3, r7, #3
1004b488:	701a      	strb	r2, [r3, #0]
  uint8_t tx_delay_start;

  tx_delay_start = (BLUEGLOB->TXDELAYSTART * 125 / 1000) + 1;
1004b48a:	4b38      	ldr	r3, [pc, #224]	@ (1004b56c <_configureTxRxDelay+0xf0>)
1004b48c:	7b9b      	ldrb	r3, [r3, #14]
1004b48e:	b2db      	uxtb	r3, r3
1004b490:	2b00      	cmp	r3, #0
1004b492:	da00      	bge.n	1004b496 <_configureTxRxDelay+0x1a>
1004b494:	3307      	adds	r3, #7
1004b496:	10db      	asrs	r3, r3, #3
1004b498:	b2da      	uxtb	r2, r3
1004b49a:	240f      	movs	r4, #15
1004b49c:	193b      	adds	r3, r7, r4
1004b49e:	3201      	adds	r2, #1
1004b4a0:	701a      	strb	r2, [r3, #0]

  BLUEGLOB->WAKEUPINITDELAY =  blue_unit_conversion(WAKEUP_INIT_DELAY, context->calibrationData.freq1, MULT64_THR_FREQ);
1004b4a2:	687b      	ldr	r3, [r7, #4]
1004b4a4:	699b      	ldr	r3, [r3, #24]
1004b4a6:	0019      	movs	r1, r3
1004b4a8:	4b31      	ldr	r3, [pc, #196]	@ (1004b570 <_configureTxRxDelay+0xf4>)
1004b4aa:	001a      	movs	r2, r3
1004b4ac:	201b      	movs	r0, #27
1004b4ae:	f7f4 fe07 	bl	100400c0 <blue_unit_conversion>
1004b4b2:	0002      	movs	r2, r0
1004b4b4:	4b2d      	ldr	r3, [pc, #180]	@ (1004b56c <_configureTxRxDelay+0xf0>)
1004b4b6:	b2d2      	uxtb	r2, r2
1004b4b8:	715a      	strb	r2, [r3, #5]
  context->TxRxDelay.tim12_delay_mt = _us_to_machinetime(BLUEGLOB->TIMER12INITDELAYCAL);
1004b4ba:	4b2c      	ldr	r3, [pc, #176]	@ (1004b56c <_configureTxRxDelay+0xf0>)
1004b4bc:	799b      	ldrb	r3, [r3, #6]
1004b4be:	b2db      	uxtb	r3, r3
1004b4c0:	0018      	movs	r0, r3
1004b4c2:	f000 f86d 	bl	1004b5a0 <_us_to_machinetime>
1004b4c6:	0003      	movs	r3, r0
1004b4c8:	b2d9      	uxtb	r1, r3
1004b4ca:	687b      	ldr	r3, [r7, #4]
1004b4cc:	223d      	movs	r2, #61	@ 0x3d
1004b4ce:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start);
1004b4d0:	4b26      	ldr	r3, [pc, #152]	@ (1004b56c <_configureTxRxDelay+0xf0>)
1004b4d2:	7a1b      	ldrb	r3, [r3, #8]
1004b4d4:	b2db      	uxtb	r3, r3
1004b4d6:	001a      	movs	r2, r3
1004b4d8:	193b      	adds	r3, r7, r4
1004b4da:	781b      	ldrb	r3, [r3, #0]
1004b4dc:	18d3      	adds	r3, r2, r3
1004b4de:	0018      	movs	r0, r3
1004b4e0:	f000 f85e 	bl	1004b5a0 <_us_to_machinetime>
1004b4e4:	0003      	movs	r3, r0
1004b4e6:	b2d9      	uxtb	r1, r3
1004b4e8:	687b      	ldr	r3, [r7, #4]
1004b4ea:	2238      	movs	r2, #56	@ 0x38
1004b4ec:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.tx_no_cal_delay = _us_to_machinetime(BLUEGLOB->TRANSMITNOCALDELAYCHK + tx_delay_start);
1004b4ee:	4b1f      	ldr	r3, [pc, #124]	@ (1004b56c <_configureTxRxDelay+0xf0>)
1004b4f0:	7a5b      	ldrb	r3, [r3, #9]
1004b4f2:	b2db      	uxtb	r3, r3
1004b4f4:	001a      	movs	r2, r3
1004b4f6:	193b      	adds	r3, r7, r4
1004b4f8:	781b      	ldrb	r3, [r3, #0]
1004b4fa:	18d3      	adds	r3, r2, r3
1004b4fc:	0018      	movs	r0, r3
1004b4fe:	f000 f84f 	bl	1004b5a0 <_us_to_machinetime>
1004b502:	0003      	movs	r3, r0
1004b504:	b2d9      	uxtb	r1, r3
1004b506:	687b      	ldr	r3, [r7, #4]
1004b508:	2239      	movs	r2, #57	@ 0x39
1004b50a:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVECALDELAYCHK);
1004b50c:	4b17      	ldr	r3, [pc, #92]	@ (1004b56c <_configureTxRxDelay+0xf0>)
1004b50e:	7a9b      	ldrb	r3, [r3, #10]
1004b510:	b2db      	uxtb	r3, r3
1004b512:	0018      	movs	r0, r3
1004b514:	f000 f844 	bl	1004b5a0 <_us_to_machinetime>
1004b518:	0003      	movs	r3, r0
1004b51a:	b2d9      	uxtb	r1, r3
1004b51c:	687b      	ldr	r3, [r7, #4]
1004b51e:	223a      	movs	r2, #58	@ 0x3a
1004b520:	5499      	strb	r1, [r3, r2]
  context->TxRxDelay.rx_no_cal_delay = _us_to_machinetime(BLUEGLOB->RECEIVENOCALDELAYCHK);
1004b522:	4b12      	ldr	r3, [pc, #72]	@ (1004b56c <_configureTxRxDelay+0xf0>)
1004b524:	7adb      	ldrb	r3, [r3, #11]
1004b526:	b2db      	uxtb	r3, r3
1004b528:	0018      	movs	r0, r3
1004b52a:	f000 f839 	bl	1004b5a0 <_us_to_machinetime>
1004b52e:	0003      	movs	r3, r0
1004b530:	b2d9      	uxtb	r1, r3
1004b532:	687b      	ldr	r3, [r7, #4]
1004b534:	223b      	movs	r2, #59	@ 0x3b
1004b536:	5499      	strb	r1, [r3, r2]

  if (calculate_st)
1004b538:	1cfb      	adds	r3, r7, #3
1004b53a:	781b      	ldrb	r3, [r3, #0]
1004b53c:	2b00      	cmp	r3, #0
1004b53e:	d010      	beq.n	1004b562 <_configureTxRxDelay+0xe6>
  {
    context->TxRxDelay.tx_cal_delay_st    = _us_to_systime(BLUEGLOB->TRANSMITCALDELAYCHK + tx_delay_start) + WAKEUP_INIT_DELAY;
1004b540:	4b0a      	ldr	r3, [pc, #40]	@ (1004b56c <_configureTxRxDelay+0xf0>)
1004b542:	7a1b      	ldrb	r3, [r3, #8]
1004b544:	b2db      	uxtb	r3, r3
1004b546:	001a      	movs	r2, r3
1004b548:	193b      	adds	r3, r7, r4
1004b54a:	781b      	ldrb	r3, [r3, #0]
1004b54c:	18d3      	adds	r3, r2, r3
1004b54e:	0018      	movs	r0, r3
1004b550:	f000 f810 	bl	1004b574 <_us_to_systime>
1004b554:	0003      	movs	r3, r0
1004b556:	b2db      	uxtb	r3, r3
1004b558:	331b      	adds	r3, #27
1004b55a:	b2d9      	uxtb	r1, r3
1004b55c:	687b      	ldr	r3, [r7, #4]
1004b55e:	223c      	movs	r2, #60	@ 0x3c
1004b560:	5499      	strb	r1, [r3, r2]
  }

}
1004b562:	46c0      	nop			@ (mov r8, r8)
1004b564:	46bd      	mov	sp, r7
1004b566:	b005      	add	sp, #20
1004b568:	bd90      	pop	{r4, r7, pc}
1004b56a:	46c0      	nop			@ (mov r8, r8)
1004b56c:	200000c0 	.word	0x200000c0
1004b570:	00000326 	.word	0x00000326

1004b574 <_us_to_systime>:

static uint32_t _us_to_systime(uint32_t time)
{
1004b574:	b580      	push	{r7, lr}
1004b576:	b084      	sub	sp, #16
1004b578:	af00      	add	r7, sp, #0
1004b57a:	6078      	str	r0, [r7, #4]
  uint32_t t1, t2;
  t1 = time * 0x68;
1004b57c:	687b      	ldr	r3, [r7, #4]
1004b57e:	2268      	movs	r2, #104	@ 0x68
1004b580:	4353      	muls	r3, r2
1004b582:	60fb      	str	r3, [r7, #12]
  t2 = time * 0xDB;
1004b584:	687b      	ldr	r3, [r7, #4]
1004b586:	22db      	movs	r2, #219	@ 0xdb
1004b588:	4353      	muls	r3, r2
1004b58a:	60bb      	str	r3, [r7, #8]
  return (t1 >> 8) + (t2 >> 16);
1004b58c:	68fb      	ldr	r3, [r7, #12]
1004b58e:	0a1a      	lsrs	r2, r3, #8
1004b590:	68bb      	ldr	r3, [r7, #8]
1004b592:	0c1b      	lsrs	r3, r3, #16
1004b594:	18d3      	adds	r3, r2, r3
}
1004b596:	0018      	movs	r0, r3
1004b598:	46bd      	mov	sp, r7
1004b59a:	b004      	add	sp, #16
1004b59c:	bd80      	pop	{r7, pc}
	...

1004b5a0 <_us_to_machinetime>:

static uint32_t _us_to_machinetime(uint32_t time)
{
1004b5a0:	b5b0      	push	{r4, r5, r7, lr}
1004b5a2:	b088      	sub	sp, #32
1004b5a4:	af00      	add	r7, sp, #0
1004b5a6:	60f8      	str	r0, [r7, #12]
  uint64_t tmp = (uint64_t)RADIO_TIMER_Context.calibrationData.freq * (uint64_t)time * (uint64_t)3U;
1004b5a8:	4915      	ldr	r1, [pc, #84]	@ (1004b600 <_us_to_machinetime+0x60>)
1004b5aa:	6949      	ldr	r1, [r1, #20]
1004b5ac:	6039      	str	r1, [r7, #0]
1004b5ae:	2100      	movs	r1, #0
1004b5b0:	6079      	str	r1, [r7, #4]
1004b5b2:	68f9      	ldr	r1, [r7, #12]
1004b5b4:	000a      	movs	r2, r1
1004b5b6:	2100      	movs	r1, #0
1004b5b8:	000b      	movs	r3, r1
1004b5ba:	6838      	ldr	r0, [r7, #0]
1004b5bc:	6879      	ldr	r1, [r7, #4]
1004b5be:	f7f5 f839 	bl	10040634 <__aeabi_lmul>
1004b5c2:	0002      	movs	r2, r0
1004b5c4:	000b      	movs	r3, r1
1004b5c6:	0010      	movs	r0, r2
1004b5c8:	0019      	movs	r1, r3
1004b5ca:	0002      	movs	r2, r0
1004b5cc:	000b      	movs	r3, r1
1004b5ce:	1892      	adds	r2, r2, r2
1004b5d0:	415b      	adcs	r3, r3
1004b5d2:	1812      	adds	r2, r2, r0
1004b5d4:	414b      	adcs	r3, r1
1004b5d6:	61ba      	str	r2, [r7, #24]
1004b5d8:	61fb      	str	r3, [r7, #28]
  uint32_t time_mt = ((tmp + (1 << 26)) >> 27) & TIMER_MAX_VALUE;
1004b5da:	69ba      	ldr	r2, [r7, #24]
1004b5dc:	69fb      	ldr	r3, [r7, #28]
1004b5de:	2080      	movs	r0, #128	@ 0x80
1004b5e0:	04c0      	lsls	r0, r0, #19
1004b5e2:	2100      	movs	r1, #0
1004b5e4:	1812      	adds	r2, r2, r0
1004b5e6:	414b      	adcs	r3, r1
1004b5e8:	0159      	lsls	r1, r3, #5
1004b5ea:	0ed4      	lsrs	r4, r2, #27
1004b5ec:	430c      	orrs	r4, r1
1004b5ee:	0edd      	lsrs	r5, r3, #27
1004b5f0:	0023      	movs	r3, r4
1004b5f2:	617b      	str	r3, [r7, #20]

  return time_mt;
1004b5f4:	697b      	ldr	r3, [r7, #20]
}
1004b5f6:	0018      	movs	r0, r3
1004b5f8:	46bd      	mov	sp, r7
1004b5fa:	b008      	add	sp, #32
1004b5fc:	bdb0      	pop	{r4, r5, r7, pc}
1004b5fe:	46c0      	nop			@ (mov r8, r8)
1004b600:	20002870 	.word	0x20002870

1004b604 <_update_xtal_startup_time>:

static void _update_xtal_startup_time(uint16_t hs_startup_time, int32_t freq1)
{
1004b604:	b580      	push	{r7, lr}
1004b606:	b084      	sub	sp, #16
1004b608:	af00      	add	r7, sp, #0
1004b60a:	0002      	movs	r2, r0
1004b60c:	6039      	str	r1, [r7, #0]
1004b60e:	1dbb      	adds	r3, r7, #6
1004b610:	801a      	strh	r2, [r3, #0]
  int32_t time1;

  time1 = blue_unit_conversion(hs_startup_time, freq1, MULT64_THR_FREQ);
1004b612:	1dbb      	adds	r3, r7, #6
1004b614:	881b      	ldrh	r3, [r3, #0]
1004b616:	6839      	ldr	r1, [r7, #0]
1004b618:	4a0e      	ldr	r2, [pc, #56]	@ (1004b654 <_update_xtal_startup_time+0x50>)
1004b61a:	0018      	movs	r0, r3
1004b61c:	f7f4 fd50 	bl	100400c0 <blue_unit_conversion>
1004b620:	0003      	movs	r3, r0
1004b622:	60fb      	str	r3, [r7, #12]
  if (time1 >= 4096)
1004b624:	68fa      	ldr	r2, [r7, #12]
1004b626:	2380      	movs	r3, #128	@ 0x80
1004b628:	015b      	lsls	r3, r3, #5
1004b62a:	429a      	cmp	r2, r3
1004b62c:	db01      	blt.n	1004b632 <_update_xtal_startup_time+0x2e>
  {
    time1 = 4095;
1004b62e:	4b0a      	ldr	r3, [pc, #40]	@ (1004b658 <_update_xtal_startup_time+0x54>)
1004b630:	60fb      	str	r3, [r7, #12]
  }
  if (time1 < 16)
1004b632:	68fb      	ldr	r3, [r7, #12]
1004b634:	2b0f      	cmp	r3, #15
1004b636:	dc01      	bgt.n	1004b63c <_update_xtal_startup_time+0x38>
  {
    time1 = 16;
1004b638:	2310      	movs	r3, #16
1004b63a:	60fb      	str	r3, [r7, #12]
  }
  LL_RADIO_TIMER_SetWakeupOffset(WAKEUP, (time1 >> 4));
1004b63c:	68fb      	ldr	r3, [r7, #12]
1004b63e:	111b      	asrs	r3, r3, #4
1004b640:	b2db      	uxtb	r3, r3
1004b642:	4a06      	ldr	r2, [pc, #24]	@ (1004b65c <_update_xtal_startup_time+0x58>)
1004b644:	0019      	movs	r1, r3
1004b646:	0010      	movs	r0, r2
1004b648:	f7ff f968 	bl	1004a91c <LL_RADIO_TIMER_SetWakeupOffset>
}
1004b64c:	46c0      	nop			@ (mov r8, r8)
1004b64e:	46bd      	mov	sp, r7
1004b650:	b004      	add	sp, #16
1004b652:	bd80      	pop	{r7, pc}
1004b654:	00000326 	.word	0x00000326
1004b658:	00000fff 	.word	0x00000fff
1004b65c:	60001800 	.word	0x60001800

1004b660 <_calibration_callback>:

static void _calibration_callback(void *handle)
{
1004b660:	b5b0      	push	{r4, r5, r7, lr}
1004b662:	b082      	sub	sp, #8
1004b664:	af00      	add	r7, sp, #0
1004b666:	6078      	str	r0, [r7, #4]
  if(RADIO_TIMER_Context.calibrationSettings.calibration_in_progress == FALSE)
1004b668:	4b11      	ldr	r3, [pc, #68]	@ (1004b6b0 <_calibration_callback+0x50>)
1004b66a:	7b1b      	ldrb	r3, [r3, #12]
1004b66c:	2201      	movs	r2, #1
1004b66e:	4053      	eors	r3, r2
1004b670:	b2db      	uxtb	r3, r3
1004b672:	2b00      	cmp	r3, #0
1004b674:	d008      	beq.n	1004b688 <_calibration_callback+0x28>
  {
    if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004b676:	4b0e      	ldr	r3, [pc, #56]	@ (1004b6b0 <_calibration_callback+0x50>)
1004b678:	781b      	ldrb	r3, [r3, #0]
1004b67a:	2b00      	cmp	r3, #0
1004b67c:	d001      	beq.n	1004b682 <_calibration_callback+0x22>
    {
      _timer_start_calibration();
1004b67e:	f7ff fe6d 	bl	1004b35c <_timer_start_calibration>
    }
    RADIO_TIMER_Context.calibrationSettings.calibration_in_progress = TRUE;
1004b682:	4b0b      	ldr	r3, [pc, #44]	@ (1004b6b0 <_calibration_callback+0x50>)
1004b684:	2201      	movs	r2, #1
1004b686:	731a      	strb	r2, [r3, #12]
  }
  _start_timer(&RADIO_TIMER_Context.calibrationTimer, HAL_RADIO_TIMER_GetCurrentSysTime() + RADIO_TIMER_Context.calibrationSettings.periodicCalibrationCheckDuration);
1004b688:	f7ff fd92 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b68c:	0002      	movs	r2, r0
1004b68e:	000b      	movs	r3, r1
1004b690:	4907      	ldr	r1, [pc, #28]	@ (1004b6b0 <_calibration_callback+0x50>)
1004b692:	6889      	ldr	r1, [r1, #8]
1004b694:	000c      	movs	r4, r1
1004b696:	2100      	movs	r1, #0
1004b698:	000d      	movs	r5, r1
1004b69a:	1912      	adds	r2, r2, r4
1004b69c:	416b      	adcs	r3, r5
1004b69e:	4905      	ldr	r1, [pc, #20]	@ (1004b6b4 <_calibration_callback+0x54>)
1004b6a0:	0008      	movs	r0, r1
1004b6a2:	f000 f809 	bl	1004b6b8 <_start_timer>
}
1004b6a6:	46c0      	nop			@ (mov r8, r8)
1004b6a8:	46bd      	mov	sp, r7
1004b6aa:	b002      	add	sp, #8
1004b6ac:	bdb0      	pop	{r4, r5, r7, pc}
1004b6ae:	46c0      	nop			@ (mov r8, r8)
1004b6b0:	20002870 	.word	0x20002870
1004b6b4:	200028b0 	.word	0x200028b0

1004b6b8 <_start_timer>:

static int32_t _start_timer(VTIMER_HandleType *timerHandle, uint64_t time)
{
1004b6b8:	b590      	push	{r4, r7, lr}
1004b6ba:	b089      	sub	sp, #36	@ 0x24
1004b6bc:	af00      	add	r7, sp, #0
1004b6be:	60f8      	str	r0, [r7, #12]
1004b6c0:	603a      	str	r2, [r7, #0]
1004b6c2:	607b      	str	r3, [r7, #4]
  uint8_t expired = 0;
1004b6c4:	2313      	movs	r3, #19
1004b6c6:	18fb      	adds	r3, r7, r3
1004b6c8:	2200      	movs	r2, #0
1004b6ca:	701a      	strb	r2, [r3, #0]

  /* The timer is already started*/
  if (timerHandle->active)
1004b6cc:	68fb      	ldr	r3, [r7, #12]
1004b6ce:	7b1b      	ldrb	r3, [r3, #12]
1004b6d0:	2b00      	cmp	r3, #0
1004b6d2:	d001      	beq.n	1004b6d8 <_start_timer+0x20>
  {
    return 1;
1004b6d4:	2301      	movs	r3, #1
1004b6d6:	e047      	b.n	1004b768 <_start_timer+0xb0>
  }
  timerHandle->expiryTime = time;
1004b6d8:	68f9      	ldr	r1, [r7, #12]
1004b6da:	683a      	ldr	r2, [r7, #0]
1004b6dc:	687b      	ldr	r3, [r7, #4]
1004b6de:	600a      	str	r2, [r1, #0]
1004b6e0:	604b      	str	r3, [r1, #4]
  timerHandle->active = TRUE;
1004b6e2:	68fb      	ldr	r3, [r7, #12]
1004b6e4:	2201      	movs	r2, #1
1004b6e6:	731a      	strb	r2, [r3, #12]
  if (_insert_timer_in_queue(RADIO_TIMER_Context.rootNode, timerHandle) == timerHandle)
1004b6e8:	4b21      	ldr	r3, [pc, #132]	@ (1004b770 <_start_timer+0xb8>)
1004b6ea:	228c      	movs	r2, #140	@ 0x8c
1004b6ec:	589b      	ldr	r3, [r3, r2]
1004b6ee:	68fa      	ldr	r2, [r7, #12]
1004b6f0:	0011      	movs	r1, r2
1004b6f2:	0018      	movs	r0, r3
1004b6f4:	f000 f92e 	bl	1004b954 <_insert_timer_in_queue>
1004b6f8:	0002      	movs	r2, r0
1004b6fa:	68fb      	ldr	r3, [r7, #12]
1004b6fc:	4293      	cmp	r3, r2
1004b6fe:	d130      	bne.n	1004b762 <_start_timer+0xaa>
  {
    RADIO_TIMER_Context.rootNode = _update_user_timeout(timerHandle, &expired);
1004b700:	2413      	movs	r4, #19
1004b702:	193a      	adds	r2, r7, r4
1004b704:	68fb      	ldr	r3, [r7, #12]
1004b706:	0011      	movs	r1, r2
1004b708:	0018      	movs	r0, r3
1004b70a:	f000 f89b 	bl	1004b844 <_update_user_timeout>
1004b70e:	0002      	movs	r2, r0
1004b710:	4b17      	ldr	r3, [pc, #92]	@ (1004b770 <_start_timer+0xb8>)
1004b712:	218c      	movs	r1, #140	@ 0x8c
1004b714:	505a      	str	r2, [r3, r1]
    if (expired)
1004b716:	193b      	adds	r3, r7, r4
1004b718:	781b      	ldrb	r3, [r3, #0]
1004b71a:	2b00      	cmp	r3, #0
1004b71c:	d021      	beq.n	1004b762 <_start_timer+0xaa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b71e:	f3ef 8310 	mrs	r3, PRIMASK
1004b722:	61bb      	str	r3, [r7, #24]
  return(result);
1004b724:	69bb      	ldr	r3, [r7, #24]
    {
      /* A new root timer is already expired, mimic timer expire that is normally signaled
       through the interrupt handler that increase the number of expired timers*/
      INCREMENT_EXPIRE_COUNT;
1004b726:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004b728:	b672      	cpsid	i
}
1004b72a:	46c0      	nop			@ (mov r8, r8)
1004b72c:	4b10      	ldr	r3, [pc, #64]	@ (1004b770 <_start_timer+0xb8>)
1004b72e:	2291      	movs	r2, #145	@ 0x91
1004b730:	5c9b      	ldrb	r3, [r3, r2]
1004b732:	3301      	adds	r3, #1
1004b734:	4a0e      	ldr	r2, [pc, #56]	@ (1004b770 <_start_timer+0xb8>)
1004b736:	2192      	movs	r1, #146	@ 0x92
1004b738:	5c52      	ldrb	r2, [r2, r1]
1004b73a:	4293      	cmp	r3, r2
1004b73c:	d103      	bne.n	1004b746 <_start_timer+0x8e>
1004b73e:	4b0c      	ldr	r3, [pc, #48]	@ (1004b770 <_start_timer+0xb8>)
1004b740:	2291      	movs	r2, #145	@ 0x91
1004b742:	5c9b      	ldrb	r3, [r3, r2]
1004b744:	e004      	b.n	1004b750 <_start_timer+0x98>
1004b746:	4b0a      	ldr	r3, [pc, #40]	@ (1004b770 <_start_timer+0xb8>)
1004b748:	2291      	movs	r2, #145	@ 0x91
1004b74a:	5c9b      	ldrb	r3, [r3, r2]
1004b74c:	3301      	adds	r3, #1
1004b74e:	b2db      	uxtb	r3, r3
1004b750:	4a07      	ldr	r2, [pc, #28]	@ (1004b770 <_start_timer+0xb8>)
1004b752:	2191      	movs	r1, #145	@ 0x91
1004b754:	5453      	strb	r3, [r2, r1]
1004b756:	69fb      	ldr	r3, [r7, #28]
1004b758:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b75a:	697b      	ldr	r3, [r7, #20]
1004b75c:	f383 8810 	msr	PRIMASK, r3
}
1004b760:	46c0      	nop			@ (mov r8, r8)
  {
    _check_host_activity();
  }
  #endif
  
  return expired;
1004b762:	2313      	movs	r3, #19
1004b764:	18fb      	adds	r3, r7, r3
1004b766:	781b      	ldrb	r3, [r3, #0]
}
1004b768:	0018      	movs	r0, r3
1004b76a:	46bd      	mov	sp, r7
1004b76c:	b009      	add	sp, #36	@ 0x24
1004b76e:	bd90      	pop	{r4, r7, pc}
1004b770:	20002870 	.word	0x20002870

1004b774 <_get_system_time_and_machine>:

static uint64_t _get_system_time_and_machine(RADIO_TIMER_ContextTypeDef *context, uint32_t *current_machine_time)
{
1004b774:	b5b0      	push	{r4, r5, r7, lr}
1004b776:	b08a      	sub	sp, #40	@ 0x28
1004b778:	af00      	add	r7, sp, #0
1004b77a:	60f8      	str	r0, [r7, #12]
1004b77c:	60b9      	str	r1, [r7, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b77e:	f3ef 8310 	mrs	r3, PRIMASK
1004b782:	617b      	str	r3, [r7, #20]
  return(result);
1004b784:	697b      	ldr	r3, [r7, #20]
  uint32_t difftime;
  uint64_t new_time;

  ATOMIC_SECTION_BEGIN();
1004b786:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004b788:	b672      	cpsid	i
}
1004b78a:	46c0      	nop			@ (mov r8, r8)
  new_time = context->cumulative_time;
1004b78c:	68fb      	ldr	r3, [r7, #12]
1004b78e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004b790:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004b792:	623a      	str	r2, [r7, #32]
1004b794:	627b      	str	r3, [r7, #36]	@ 0x24
  *current_machine_time =  LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004b796:	4b29      	ldr	r3, [pc, #164]	@ (1004b83c <_get_system_time_and_machine+0xc8>)
1004b798:	0018      	movs	r0, r3
1004b79a:	f7ff f8e6 	bl	1004a96a <LL_RADIO_TIMER_GetAbsoluteTime>
1004b79e:	0002      	movs	r2, r0
1004b7a0:	68bb      	ldr	r3, [r7, #8]
1004b7a2:	601a      	str	r2, [r3, #0]
  difftime = TIME_ABSDIFF(*current_machine_time, context->last_machine_time);
1004b7a4:	68bb      	ldr	r3, [r7, #8]
1004b7a6:	681a      	ldr	r2, [r3, #0]
1004b7a8:	68fb      	ldr	r3, [r7, #12]
1004b7aa:	2180      	movs	r1, #128	@ 0x80
1004b7ac:	585b      	ldr	r3, [r3, r1]
1004b7ae:	1ad3      	subs	r3, r2, r3
1004b7b0:	61bb      	str	r3, [r7, #24]
  new_time += blue_unit_conversion(difftime, context->calibrationData.period1, MULT64_THR_PERIOD);
1004b7b2:	68fb      	ldr	r3, [r7, #12]
1004b7b4:	69db      	ldr	r3, [r3, #28]
1004b7b6:	0019      	movs	r1, r3
1004b7b8:	4a21      	ldr	r2, [pc, #132]	@ (1004b840 <_get_system_time_and_machine+0xcc>)
1004b7ba:	69bb      	ldr	r3, [r7, #24]
1004b7bc:	0018      	movs	r0, r3
1004b7be:	f7f4 fc7f 	bl	100400c0 <blue_unit_conversion>
1004b7c2:	0003      	movs	r3, r0
1004b7c4:	603b      	str	r3, [r7, #0]
1004b7c6:	2300      	movs	r3, #0
1004b7c8:	607b      	str	r3, [r7, #4]
1004b7ca:	6a3a      	ldr	r2, [r7, #32]
1004b7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b7ce:	6838      	ldr	r0, [r7, #0]
1004b7d0:	6879      	ldr	r1, [r7, #4]
1004b7d2:	1812      	adds	r2, r2, r0
1004b7d4:	414b      	adcs	r3, r1
1004b7d6:	623a      	str	r2, [r7, #32]
1004b7d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (new_time < context->last_system_time)
1004b7da:	68fb      	ldr	r3, [r7, #12]
1004b7dc:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
1004b7de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
1004b7e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004b7e2:	4299      	cmp	r1, r3
1004b7e4:	d305      	bcc.n	1004b7f2 <_get_system_time_and_machine+0x7e>
1004b7e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004b7e8:	4299      	cmp	r1, r3
1004b7ea:	d115      	bne.n	1004b818 <_get_system_time_and_machine+0xa4>
1004b7ec:	6a39      	ldr	r1, [r7, #32]
1004b7ee:	4291      	cmp	r1, r2
1004b7f0:	d212      	bcs.n	1004b818 <_get_system_time_and_machine+0xa4>
  {
    new_time += blue_unit_conversion(TIMER_MAX_VALUE, context->calibrationData.period1, MULT64_THR_PERIOD);
1004b7f2:	68fb      	ldr	r3, [r7, #12]
1004b7f4:	69db      	ldr	r3, [r3, #28]
1004b7f6:	0019      	movs	r1, r3
1004b7f8:	4a11      	ldr	r2, [pc, #68]	@ (1004b840 <_get_system_time_and_machine+0xcc>)
1004b7fa:	2301      	movs	r3, #1
1004b7fc:	425b      	negs	r3, r3
1004b7fe:	0018      	movs	r0, r3
1004b800:	f7f4 fc5e 	bl	100400c0 <blue_unit_conversion>
1004b804:	0003      	movs	r3, r0
1004b806:	001c      	movs	r4, r3
1004b808:	2300      	movs	r3, #0
1004b80a:	001d      	movs	r5, r3
1004b80c:	6a3a      	ldr	r2, [r7, #32]
1004b80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b810:	1912      	adds	r2, r2, r4
1004b812:	416b      	adcs	r3, r5
1004b814:	623a      	str	r2, [r7, #32]
1004b816:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  context->last_system_time = new_time;
1004b818:	68f9      	ldr	r1, [r7, #12]
1004b81a:	6a3a      	ldr	r2, [r7, #32]
1004b81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b81e:	678a      	str	r2, [r1, #120]	@ 0x78
1004b820:	67cb      	str	r3, [r1, #124]	@ 0x7c
1004b822:	69fb      	ldr	r3, [r7, #28]
1004b824:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b826:	693b      	ldr	r3, [r7, #16]
1004b828:	f383 8810 	msr	PRIMASK, r3
}
1004b82c:	46c0      	nop			@ (mov r8, r8)
  ATOMIC_SECTION_END();

  return new_time;
1004b82e:	6a3a      	ldr	r2, [r7, #32]
1004b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004b832:	0010      	movs	r0, r2
1004b834:	0019      	movs	r1, r3
1004b836:	46bd      	mov	sp, r7
1004b838:	b00a      	add	sp, #40	@ 0x28
1004b83a:	bdb0      	pop	{r4, r5, r7, pc}
1004b83c:	60001800 	.word	0x60001800
1004b840:	00000635 	.word	0x00000635

1004b844 <_update_user_timeout>:

/* Set timeout and skip non active timers */
static VTIMER_HandleType *_update_user_timeout(VTIMER_HandleType *rootNode, uint8_t *expired)
{
1004b844:	b5b0      	push	{r4, r5, r7, lr}
1004b846:	b08a      	sub	sp, #40	@ 0x28
1004b848:	af00      	add	r7, sp, #0
1004b84a:	6078      	str	r0, [r7, #4]
1004b84c:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *curr = rootNode;
1004b84e:	687b      	ldr	r3, [r7, #4]
1004b850:	627b      	str	r3, [r7, #36]	@ 0x24
  VTIMER_HandleType *rootOrig = rootNode;
1004b852:	687b      	ldr	r3, [r7, #4]
1004b854:	623b      	str	r3, [r7, #32]
  int64_t delay;
  *expired = 0;
1004b856:	683b      	ldr	r3, [r7, #0]
1004b858:	2200      	movs	r2, #0
1004b85a:	701a      	strb	r2, [r3, #0]
  while (curr != NULL)
1004b85c:	e033      	b.n	1004b8c6 <_update_user_timeout+0x82>
  {
    if (curr->active)
1004b85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b860:	7b1b      	ldrb	r3, [r3, #12]
1004b862:	2b00      	cmp	r3, #0
1004b864:	d02c      	beq.n	1004b8c0 <_update_user_timeout+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004b866:	f3ef 8310 	mrs	r3, PRIMASK
1004b86a:	60fb      	str	r3, [r7, #12]
  return(result);
1004b86c:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_SECTION_BEGIN();
1004b86e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004b870:	b672      	cpsid	i
}
1004b872:	46c0      	nop			@ (mov r8, r8)
#if defined (STM32WB06) || defined (STM32WB07)
      uint8_t dummy;
      bool share = FALSE;
      _check_radio_activity(&RADIO_TIMER_Context.radioTimer, &dummy);
#endif
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b876:	681c      	ldr	r4, [r3, #0]
1004b878:	685d      	ldr	r5, [r3, #4]
1004b87a:	f7ff fc99 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004b87e:	0002      	movs	r2, r0
1004b880:	000b      	movs	r3, r1
1004b882:	1aa4      	subs	r4, r4, r2
1004b884:	419d      	sbcs	r5, r3
1004b886:	0022      	movs	r2, r4
1004b888:	002b      	movs	r3, r5
1004b88a:	613a      	str	r2, [r7, #16]
1004b88c:	617b      	str	r3, [r7, #20]
      if (delay > 0)
1004b88e:	697b      	ldr	r3, [r7, #20]
1004b890:	2b00      	cmp	r3, #0
1004b892:	dc05      	bgt.n	1004b8a0 <_update_user_timeout+0x5c>
1004b894:	697b      	ldr	r3, [r7, #20]
1004b896:	2b00      	cmp	r3, #0
1004b898:	d108      	bne.n	1004b8ac <_update_user_timeout+0x68>
1004b89a:	693b      	ldr	r3, [r7, #16]
1004b89c:	2b00      	cmp	r3, #0
1004b89e:	d005      	beq.n	1004b8ac <_update_user_timeout+0x68>
        {
          RADIO_TIMER_Context.radioTimer.pending |= RADIO_TIMER_Context.radioTimer.active;
          RADIO_TIMER_Context.radioTimer.active = FALSE;
        }
#else
        VTIMER_SetWakeupTime(delay, TRUE);
1004b8a0:	693b      	ldr	r3, [r7, #16]
1004b8a2:	2101      	movs	r1, #1
1004b8a4:	0018      	movs	r0, r3
1004b8a6:	f000 f81d 	bl	1004b8e4 <VTIMER_SetWakeupTime>
1004b8aa:	e002      	b.n	1004b8b2 <_update_user_timeout+0x6e>
#endif
      }
      else
      {
        *expired = 1;
1004b8ac:	683b      	ldr	r3, [r7, #0]
1004b8ae:	2201      	movs	r2, #1
1004b8b0:	701a      	strb	r2, [r3, #0]
1004b8b2:	69fb      	ldr	r3, [r7, #28]
1004b8b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004b8b6:	68bb      	ldr	r3, [r7, #8]
1004b8b8:	f383 8810 	msr	PRIMASK, r3
}
1004b8bc:	46c0      	nop			@ (mov r8, r8)
      }
      ATOMIC_SECTION_END();
      break;
1004b8be:	e005      	b.n	1004b8cc <_update_user_timeout+0x88>
    }
    curr = curr->next;
1004b8c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b8c2:	691b      	ldr	r3, [r3, #16]
1004b8c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (curr != NULL)
1004b8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004b8c8:	2b00      	cmp	r3, #0
1004b8ca:	d1c8      	bne.n	1004b85e <_update_user_timeout+0x1a>
  }
  if (*expired)
1004b8cc:	683b      	ldr	r3, [r7, #0]
1004b8ce:	781b      	ldrb	r3, [r3, #0]
1004b8d0:	2b00      	cmp	r3, #0
1004b8d2:	d001      	beq.n	1004b8d8 <_update_user_timeout+0x94>
  {
    return rootOrig;
1004b8d4:	6a3b      	ldr	r3, [r7, #32]
1004b8d6:	e000      	b.n	1004b8da <_update_user_timeout+0x96>
  }

  return curr;
1004b8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
1004b8da:	0018      	movs	r0, r3
1004b8dc:	46bd      	mov	sp, r7
1004b8de:	b00a      	add	sp, #40	@ 0x28
1004b8e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004b8e4 <VTIMER_SetWakeupTime>:

#if defined (STM32WB05) || defined (STM32WB09)
static uint32_t VTIMER_SetWakeupTime(uint32_t delay, bool allow_sleep)
{
1004b8e4:	b580      	push	{r7, lr}
1004b8e6:	b084      	sub	sp, #16
1004b8e8:	af00      	add	r7, sp, #0
1004b8ea:	6078      	str	r0, [r7, #4]
1004b8ec:	000a      	movs	r2, r1
1004b8ee:	1cfb      	adds	r3, r7, #3
1004b8f0:	701a      	strb	r2, [r3, #0]
  uint32_t current_time;
  delay = blue_unit_conversion(delay, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ) ;
1004b8f2:	4b15      	ldr	r3, [pc, #84]	@ (1004b948 <VTIMER_SetWakeupTime+0x64>)
1004b8f4:	699b      	ldr	r3, [r3, #24]
1004b8f6:	0019      	movs	r1, r3
1004b8f8:	4a14      	ldr	r2, [pc, #80]	@ (1004b94c <VTIMER_SetWakeupTime+0x68>)
1004b8fa:	687b      	ldr	r3, [r7, #4]
1004b8fc:	0018      	movs	r0, r3
1004b8fe:	f7f4 fbdf 	bl	100400c0 <blue_unit_conversion>
1004b902:	0003      	movs	r3, r0
1004b904:	607b      	str	r3, [r7, #4]
  /* If the delay is too small round to minimum 2 tick */
  delay = MAX(32, delay);
1004b906:	687b      	ldr	r3, [r7, #4]
1004b908:	2b20      	cmp	r3, #32
1004b90a:	d200      	bcs.n	1004b90e <VTIMER_SetWakeupTime+0x2a>
1004b90c:	2320      	movs	r3, #32
1004b90e:	607b      	str	r3, [r7, #4]
  current_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004b910:	4b0f      	ldr	r3, [pc, #60]	@ (1004b950 <VTIMER_SetWakeupTime+0x6c>)
1004b912:	0018      	movs	r0, r3
1004b914:	f7ff f829 	bl	1004a96a <LL_RADIO_TIMER_GetAbsoluteTime>
1004b918:	0003      	movs	r3, r0
1004b91a:	60fb      	str	r3, [r7, #12]
  /* 4 least significant bits are not taken into account. Then let's round the value */
  LL_RADIO_TIMER_SetCPUWakeupTime(WAKEUP, ((current_time + (delay + 8)) & TIMER_MAX_VALUE));
1004b91c:	687a      	ldr	r2, [r7, #4]
1004b91e:	68fb      	ldr	r3, [r7, #12]
1004b920:	18d3      	adds	r3, r2, r3
1004b922:	3308      	adds	r3, #8
1004b924:	4a0a      	ldr	r2, [pc, #40]	@ (1004b950 <VTIMER_SetWakeupTime+0x6c>)
1004b926:	0019      	movs	r1, r3
1004b928:	0010      	movs	r0, r2
1004b92a:	f7ff f812 	bl	1004a952 <LL_RADIO_TIMER_SetCPUWakeupTime>
  LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004b92e:	4b08      	ldr	r3, [pc, #32]	@ (1004b950 <VTIMER_SetWakeupTime+0x6c>)
1004b930:	0018      	movs	r0, r3
1004b932:	f7ff f824 	bl	1004a97e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
  LL_RADIO_TIMER_EnableCPUWakeupTimer(WAKEUP);
1004b936:	4b06      	ldr	r3, [pc, #24]	@ (1004b950 <VTIMER_SetWakeupTime+0x6c>)
1004b938:	0018      	movs	r0, r3
1004b93a:	f7fe ffcf 	bl	1004a8dc <LL_RADIO_TIMER_EnableCPUWakeupTimer>

  return current_time;
1004b93e:	68fb      	ldr	r3, [r7, #12]
}
1004b940:	0018      	movs	r0, r3
1004b942:	46bd      	mov	sp, r7
1004b944:	b004      	add	sp, #16
1004b946:	bd80      	pop	{r7, pc}
1004b948:	20002870 	.word	0x20002870
1004b94c:	00000326 	.word	0x00000326
1004b950:	60001800 	.word	0x60001800

1004b954 <_insert_timer_in_queue>:
#endif

static VTIMER_HandleType *_insert_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004b954:	b580      	push	{r7, lr}
1004b956:	b086      	sub	sp, #24
1004b958:	af00      	add	r7, sp, #0
1004b95a:	6078      	str	r0, [r7, #4]
1004b95c:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004b95e:	687b      	ldr	r3, [r7, #4]
1004b960:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004b962:	2300      	movs	r3, #0
1004b964:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004b966:	687b      	ldr	r3, [r7, #4]
1004b968:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004b96a:	e004      	b.n	1004b976 <_insert_timer_in_queue+0x22>
  {
    prev = current;
1004b96c:	697b      	ldr	r3, [r7, #20]
1004b96e:	613b      	str	r3, [r7, #16]
    current = current->next;
1004b970:	697b      	ldr	r3, [r7, #20]
1004b972:	691b      	ldr	r3, [r3, #16]
1004b974:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current->expiryTime < handle->expiryTime))
1004b976:	697b      	ldr	r3, [r7, #20]
1004b978:	2b00      	cmp	r3, #0
1004b97a:	d00a      	beq.n	1004b992 <_insert_timer_in_queue+0x3e>
1004b97c:	697b      	ldr	r3, [r7, #20]
1004b97e:	681a      	ldr	r2, [r3, #0]
1004b980:	685b      	ldr	r3, [r3, #4]
1004b982:	6839      	ldr	r1, [r7, #0]
1004b984:	6808      	ldr	r0, [r1, #0]
1004b986:	6849      	ldr	r1, [r1, #4]
1004b988:	4299      	cmp	r1, r3
1004b98a:	d8ef      	bhi.n	1004b96c <_insert_timer_in_queue+0x18>
1004b98c:	d101      	bne.n	1004b992 <_insert_timer_in_queue+0x3e>
1004b98e:	4290      	cmp	r0, r2
1004b990:	d8ec      	bhi.n	1004b96c <_insert_timer_in_queue+0x18>
  }

  handle->next = current;
1004b992:	683b      	ldr	r3, [r7, #0]
1004b994:	697a      	ldr	r2, [r7, #20]
1004b996:	611a      	str	r2, [r3, #16]

  if (prev == NULL)
1004b998:	693b      	ldr	r3, [r7, #16]
1004b99a:	2b00      	cmp	r3, #0
1004b99c:	d102      	bne.n	1004b9a4 <_insert_timer_in_queue+0x50>
  {
    /* We are the new root */
    returnValue = handle;
1004b99e:	683b      	ldr	r3, [r7, #0]
1004b9a0:	60fb      	str	r3, [r7, #12]
1004b9a2:	e002      	b.n	1004b9aa <_insert_timer_in_queue+0x56>
  }
  else
  {
    prev->next = handle;
1004b9a4:	693b      	ldr	r3, [r7, #16]
1004b9a6:	683a      	ldr	r2, [r7, #0]
1004b9a8:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004b9aa:	68fb      	ldr	r3, [r7, #12]
}
1004b9ac:	0018      	movs	r0, r3
1004b9ae:	46bd      	mov	sp, r7
1004b9b0:	b006      	add	sp, #24
1004b9b2:	bd80      	pop	{r7, pc}

1004b9b4 <_virtualTimeBaseEnable>:

static void _virtualTimeBaseEnable(FunctionalState state)
{
1004b9b4:	b580      	push	{r7, lr}
1004b9b6:	b082      	sub	sp, #8
1004b9b8:	af00      	add	r7, sp, #0
1004b9ba:	0002      	movs	r2, r0
1004b9bc:	1dfb      	adds	r3, r7, #7
1004b9be:	701a      	strb	r2, [r3, #0]
  if (state != DISABLE)
1004b9c0:	1dfb      	adds	r3, r7, #7
1004b9c2:	781b      	ldrb	r3, [r3, #0]
1004b9c4:	2b00      	cmp	r3, #0
1004b9c6:	d010      	beq.n	1004b9ea <_virtualTimeBaseEnable+0x36>
  {
    if (RADIO_TIMER_Context.enableTimeBase == FALSE)
1004b9c8:	4b0e      	ldr	r3, [pc, #56]	@ (1004ba04 <_virtualTimeBaseEnable+0x50>)
1004b9ca:	2290      	movs	r2, #144	@ 0x90
1004b9cc:	5c9b      	ldrb	r3, [r3, r2]
1004b9ce:	2201      	movs	r2, #1
1004b9d0:	4053      	eors	r3, r2
1004b9d2:	b2db      	uxtb	r3, r3
1004b9d4:	2b00      	cmp	r3, #0
1004b9d6:	d010      	beq.n	1004b9fa <_virtualTimeBaseEnable+0x46>
    {
      _calibration_callback(&RADIO_TIMER_Context.calibrationTimer);
1004b9d8:	4b0b      	ldr	r3, [pc, #44]	@ (1004ba08 <_virtualTimeBaseEnable+0x54>)
1004b9da:	0018      	movs	r0, r3
1004b9dc:	f7ff fe40 	bl	1004b660 <_calibration_callback>
      RADIO_TIMER_Context.enableTimeBase = TRUE;
1004b9e0:	4b08      	ldr	r3, [pc, #32]	@ (1004ba04 <_virtualTimeBaseEnable+0x50>)
1004b9e2:	2290      	movs	r2, #144	@ 0x90
1004b9e4:	2101      	movs	r1, #1
1004b9e6:	5499      	strb	r1, [r3, r2]
  else
  {
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
    RADIO_TIMER_Context.enableTimeBase = FALSE;
  }
}
1004b9e8:	e007      	b.n	1004b9fa <_virtualTimeBaseEnable+0x46>
    HAL_RADIO_TIMER_StopVirtualTimer(&RADIO_TIMER_Context.calibrationTimer);
1004b9ea:	4b07      	ldr	r3, [pc, #28]	@ (1004ba08 <_virtualTimeBaseEnable+0x54>)
1004b9ec:	0018      	movs	r0, r3
1004b9ee:	f7ff fc0b 	bl	1004b208 <HAL_RADIO_TIMER_StopVirtualTimer>
    RADIO_TIMER_Context.enableTimeBase = FALSE;
1004b9f2:	4b04      	ldr	r3, [pc, #16]	@ (1004ba04 <_virtualTimeBaseEnable+0x50>)
1004b9f4:	2290      	movs	r2, #144	@ 0x90
1004b9f6:	2100      	movs	r1, #0
1004b9f8:	5499      	strb	r1, [r3, r2]
}
1004b9fa:	46c0      	nop			@ (mov r8, r8)
1004b9fc:	46bd      	mov	sp, r7
1004b9fe:	b002      	add	sp, #8
1004ba00:	bd80      	pop	{r7, pc}
1004ba02:	46c0      	nop			@ (mov r8, r8)
1004ba04:	20002870 	.word	0x20002870
1004ba08:	200028b0 	.word	0x200028b0

1004ba0c <_remove_timer_in_queue>:

static VTIMER_HandleType *_remove_timer_in_queue(VTIMER_HandleType *rootNode, VTIMER_HandleType *handle)
{
1004ba0c:	b580      	push	{r7, lr}
1004ba0e:	b086      	sub	sp, #24
1004ba10:	af00      	add	r7, sp, #0
1004ba12:	6078      	str	r0, [r7, #4]
1004ba14:	6039      	str	r1, [r7, #0]
  VTIMER_HandleType *current = rootNode;
1004ba16:	687b      	ldr	r3, [r7, #4]
1004ba18:	617b      	str	r3, [r7, #20]
  VTIMER_HandleType *prev = NULL;
1004ba1a:	2300      	movs	r3, #0
1004ba1c:	613b      	str	r3, [r7, #16]
  VTIMER_HandleType *returnValue = rootNode;
1004ba1e:	687b      	ldr	r3, [r7, #4]
1004ba20:	60fb      	str	r3, [r7, #12]

  while ((current != NULL) && (current != handle))
1004ba22:	e004      	b.n	1004ba2e <_remove_timer_in_queue+0x22>
  {
    prev = current;
1004ba24:	697b      	ldr	r3, [r7, #20]
1004ba26:	613b      	str	r3, [r7, #16]
    current = current->next;
1004ba28:	697b      	ldr	r3, [r7, #20]
1004ba2a:	691b      	ldr	r3, [r3, #16]
1004ba2c:	617b      	str	r3, [r7, #20]
  while ((current != NULL) && (current != handle))
1004ba2e:	697b      	ldr	r3, [r7, #20]
1004ba30:	2b00      	cmp	r3, #0
1004ba32:	d003      	beq.n	1004ba3c <_remove_timer_in_queue+0x30>
1004ba34:	697a      	ldr	r2, [r7, #20]
1004ba36:	683b      	ldr	r3, [r7, #0]
1004ba38:	429a      	cmp	r2, r3
1004ba3a:	d1f3      	bne.n	1004ba24 <_remove_timer_in_queue+0x18>
  }

  if (current == NULL)
1004ba3c:	697b      	ldr	r3, [r7, #20]
1004ba3e:	2b00      	cmp	r3, #0
1004ba40:	d00b      	beq.n	1004ba5a <_remove_timer_in_queue+0x4e>
  {
    /* Not found */
  }
  else if (current == rootNode)
1004ba42:	697a      	ldr	r2, [r7, #20]
1004ba44:	687b      	ldr	r3, [r7, #4]
1004ba46:	429a      	cmp	r2, r3
1004ba48:	d103      	bne.n	1004ba52 <_remove_timer_in_queue+0x46>
  {
    /* New root node */
    returnValue = current->next;
1004ba4a:	697b      	ldr	r3, [r7, #20]
1004ba4c:	691b      	ldr	r3, [r3, #16]
1004ba4e:	60fb      	str	r3, [r7, #12]
1004ba50:	e003      	b.n	1004ba5a <_remove_timer_in_queue+0x4e>
  }
  else
  {
    prev->next = current->next;
1004ba52:	697b      	ldr	r3, [r7, #20]
1004ba54:	691a      	ldr	r2, [r3, #16]
1004ba56:	693b      	ldr	r3, [r7, #16]
1004ba58:	611a      	str	r2, [r3, #16]
  }

  return returnValue;
1004ba5a:	68fb      	ldr	r3, [r7, #12]
}
1004ba5c:	0018      	movs	r0, r3
1004ba5e:	46bd      	mov	sp, r7
1004ba60:	b006      	add	sp, #24
1004ba62:	bd80      	pop	{r7, pc}

1004ba64 <_check_callbacks>:

/* Check the number of expired timer from rootNode (ordered list of timers) and return the list of expired timers */
static VTIMER_HandleType *_check_callbacks(VTIMER_HandleType *rootNode, VTIMER_HandleType **expiredList)
{
1004ba64:	b5b0      	push	{r4, r5, r7, lr}
1004ba66:	b088      	sub	sp, #32
1004ba68:	af00      	add	r7, sp, #0
1004ba6a:	6078      	str	r0, [r7, #4]
1004ba6c:	6039      	str	r1, [r7, #0]

  VTIMER_HandleType *curr = rootNode;
1004ba6e:	687b      	ldr	r3, [r7, #4]
1004ba70:	61fb      	str	r3, [r7, #28]
  VTIMER_HandleType *prev = NULL;
1004ba72:	2300      	movs	r3, #0
1004ba74:	61bb      	str	r3, [r7, #24]
  VTIMER_HandleType *returnValue = rootNode;
1004ba76:	687b      	ldr	r3, [r7, #4]
1004ba78:	617b      	str	r3, [r7, #20]
  *expiredList = rootNode;
1004ba7a:	683b      	ldr	r3, [r7, #0]
1004ba7c:	687a      	ldr	r2, [r7, #4]
1004ba7e:	601a      	str	r2, [r3, #0]

  int64_t delay;
  uint32_t expiredCount = 0;
1004ba80:	2300      	movs	r3, #0
1004ba82:	613b      	str	r3, [r7, #16]

  while (curr != NULL)
1004ba84:	e021      	b.n	1004baca <_check_callbacks+0x66>
  {

    if (curr->active)
1004ba86:	69fb      	ldr	r3, [r7, #28]
1004ba88:	7b1b      	ldrb	r3, [r3, #12]
1004ba8a:	2b00      	cmp	r3, #0
1004ba8c:	d015      	beq.n	1004baba <_check_callbacks+0x56>
    {
      delay = curr->expiryTime - HAL_RADIO_TIMER_GetCurrentSysTime();
1004ba8e:	69fb      	ldr	r3, [r7, #28]
1004ba90:	681c      	ldr	r4, [r3, #0]
1004ba92:	685d      	ldr	r5, [r3, #4]
1004ba94:	f7ff fb8c 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004ba98:	0002      	movs	r2, r0
1004ba9a:	000b      	movs	r3, r1
1004ba9c:	1aa4      	subs	r4, r4, r2
1004ba9e:	419d      	sbcs	r5, r3
1004baa0:	0022      	movs	r2, r4
1004baa2:	002b      	movs	r3, r5
1004baa4:	60ba      	str	r2, [r7, #8]
1004baa6:	60fb      	str	r3, [r7, #12]

      if (delay > 5)   /*TBR*/
1004baa8:	68fb      	ldr	r3, [r7, #12]
1004baaa:	2b00      	cmp	r3, #0
1004baac:	dc11      	bgt.n	1004bad2 <_check_callbacks+0x6e>
1004baae:	68fb      	ldr	r3, [r7, #12]
1004bab0:	2b00      	cmp	r3, #0
1004bab2:	d102      	bne.n	1004baba <_check_callbacks+0x56>
1004bab4:	68bb      	ldr	r3, [r7, #8]
1004bab6:	2b05      	cmp	r3, #5
1004bab8:	d80b      	bhi.n	1004bad2 <_check_callbacks+0x6e>
        /* End of expired timers list*/
        break;
      }
    }

    prev = curr;
1004baba:	69fb      	ldr	r3, [r7, #28]
1004babc:	61bb      	str	r3, [r7, #24]
    curr = curr->next;
1004babe:	69fb      	ldr	r3, [r7, #28]
1004bac0:	691b      	ldr	r3, [r3, #16]
1004bac2:	61fb      	str	r3, [r7, #28]
    expiredCount++;
1004bac4:	693b      	ldr	r3, [r7, #16]
1004bac6:	3301      	adds	r3, #1
1004bac8:	613b      	str	r3, [r7, #16]
  while (curr != NULL)
1004baca:	69fb      	ldr	r3, [r7, #28]
1004bacc:	2b00      	cmp	r3, #0
1004bace:	d1da      	bne.n	1004ba86 <_check_callbacks+0x22>
1004bad0:	e000      	b.n	1004bad4 <_check_callbacks+0x70>
        break;
1004bad2:	46c0      	nop			@ (mov r8, r8)
  }

  if (expiredCount)
1004bad4:	693b      	ldr	r3, [r7, #16]
1004bad6:	2b00      	cmp	r3, #0
1004bad8:	d005      	beq.n	1004bae6 <_check_callbacks+0x82>
  {
    /* Some timers expired */
    prev->next = NULL;
1004bada:	69bb      	ldr	r3, [r7, #24]
1004badc:	2200      	movs	r2, #0
1004bade:	611a      	str	r2, [r3, #16]
    returnValue = curr;
1004bae0:	69fb      	ldr	r3, [r7, #28]
1004bae2:	617b      	str	r3, [r7, #20]
1004bae4:	e002      	b.n	1004baec <_check_callbacks+0x88>
  }
  else
  {
    /* No timer expired */
    *expiredList = NULL;
1004bae6:	683b      	ldr	r3, [r7, #0]
1004bae8:	2200      	movs	r2, #0
1004baea:	601a      	str	r2, [r3, #0]
  }

  return returnValue;
1004baec:	697b      	ldr	r3, [r7, #20]
}
1004baee:	0018      	movs	r0, r3
1004baf0:	46bd      	mov	sp, r7
1004baf2:	b008      	add	sp, #32
1004baf4:	bdb0      	pop	{r4, r5, r7, pc}
	...

1004baf8 <_updateCalibrationData>:

static void _updateCalibrationData(void)
{
1004baf8:	b580      	push	{r7, lr}
1004bafa:	b090      	sub	sp, #64	@ 0x40
1004bafc:	af00      	add	r7, sp, #0
  if (RADIO_TIMER_Context.calibrationSettings.periodicCalibration)
1004bafe:	4b28      	ldr	r3, [pc, #160]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb00:	781b      	ldrb	r3, [r3, #0]
1004bb02:	2b00      	cmp	r3, #0
1004bb04:	d037      	beq.n	1004bb76 <_updateCalibrationData+0x7e>
  {

    CalibrationDataTypeDef updatedCalibrationData;
    _get_calibration_data(&updatedCalibrationData);
1004bb06:	003b      	movs	r3, r7
1004bb08:	0018      	movs	r0, r3
1004bb0a:	f7ff fc4f 	bl	1004b3ac <_get_calibration_data>
    _update_xtal_startup_time(RADIO_TIMER_Context.hs_startup_time, updatedCalibrationData.freq1);
1004bb0e:	4b24      	ldr	r3, [pc, #144]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
1004bb12:	b29a      	uxth	r2, r3
1004bb14:	003b      	movs	r3, r7
1004bb16:	689b      	ldr	r3, [r3, #8]
1004bb18:	0019      	movs	r1, r3
1004bb1a:	0010      	movs	r0, r2
1004bb1c:	f7ff fd72 	bl	1004b604 <_update_xtal_startup_time>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bb20:	f3ef 8310 	mrs	r3, PRIMASK
1004bb24:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
1004bb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    
    ATOMIC_SECTION_BEGIN();
1004bb28:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("cpsid i" : : : "memory");
1004bb2a:	b672      	cpsid	i
}
1004bb2c:	46c0      	nop			@ (mov r8, r8)
    RADIO_TIMER_Context.calibrationData.calibration_data_available = 1;
1004bb2e:	4b1c      	ldr	r3, [pc, #112]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb30:	2234      	movs	r2, #52	@ 0x34
1004bb32:	2101      	movs	r1, #1
1004bb34:	5499      	strb	r1, [r3, r2]
    RADIO_TIMER_Context.calibrationData.freq = updatedCalibrationData.freq;
1004bb36:	003b      	movs	r3, r7
1004bb38:	685a      	ldr	r2, [r3, #4]
1004bb3a:	4b19      	ldr	r3, [pc, #100]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb3c:	615a      	str	r2, [r3, #20]
    RADIO_TIMER_Context.calibrationData.freq1 = updatedCalibrationData.freq1;
1004bb3e:	003b      	movs	r3, r7
1004bb40:	689a      	ldr	r2, [r3, #8]
1004bb42:	4b17      	ldr	r3, [pc, #92]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb44:	619a      	str	r2, [r3, #24]
    RADIO_TIMER_Context.calibrationData.period = updatedCalibrationData.period;
1004bb46:	003b      	movs	r3, r7
1004bb48:	681a      	ldr	r2, [r3, #0]
1004bb4a:	4b15      	ldr	r3, [pc, #84]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb4c:	611a      	str	r2, [r3, #16]
    RADIO_TIMER_Context.calibrationData.period1 = updatedCalibrationData.period1;
1004bb4e:	003b      	movs	r3, r7
1004bb50:	68da      	ldr	r2, [r3, #12]
1004bb52:	4b13      	ldr	r3, [pc, #76]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb54:	61da      	str	r2, [r3, #28]
    _update_system_time(&RADIO_TIMER_Context);
1004bb56:	4b12      	ldr	r3, [pc, #72]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb58:	0018      	movs	r0, r3
1004bb5a:	f000 f823 	bl	1004bba4 <_update_system_time>
1004bb5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004bb60:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bb62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004bb64:	f383 8810 	msr	PRIMASK, r3
}
1004bb68:	46c0      	nop			@ (mov r8, r8)
    ATOMIC_SECTION_END();

    _configureTxRxDelay(&RADIO_TIMER_Context, FALSE);
1004bb6a:	4b0d      	ldr	r3, [pc, #52]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb6c:	2100      	movs	r1, #0
1004bb6e:	0018      	movs	r0, r3
1004bb70:	f7ff fc84 	bl	1004b47c <_configureTxRxDelay>
  {
  ATOMIC_SECTION_BEGIN();
  _update_system_time(&RADIO_TIMER_Context);
  ATOMIC_SECTION_END();
  }
}
1004bb74:	e010      	b.n	1004bb98 <_updateCalibrationData+0xa0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bb76:	f3ef 8310 	mrs	r3, PRIMASK
1004bb7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
1004bb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  ATOMIC_SECTION_BEGIN();
1004bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
1004bb80:	b672      	cpsid	i
}
1004bb82:	46c0      	nop			@ (mov r8, r8)
  _update_system_time(&RADIO_TIMER_Context);
1004bb84:	4b06      	ldr	r3, [pc, #24]	@ (1004bba0 <_updateCalibrationData+0xa8>)
1004bb86:	0018      	movs	r0, r3
1004bb88:	f000 f80c 	bl	1004bba4 <_update_system_time>
1004bb8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004bb8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004bb92:	f383 8810 	msr	PRIMASK, r3
}
1004bb96:	46c0      	nop			@ (mov r8, r8)
}
1004bb98:	46c0      	nop			@ (mov r8, r8)
1004bb9a:	46bd      	mov	sp, r7
1004bb9c:	b010      	add	sp, #64	@ 0x40
1004bb9e:	bd80      	pop	{r7, pc}
1004bba0:	20002870 	.word	0x20002870

1004bba4 <_update_system_time>:

/* This function update the system time after a calibration.
 * If the user calls too often this function, you could have rounding issues in the integer maths.
 */
static void _update_system_time(RADIO_TIMER_ContextTypeDef *context)
{
1004bba4:	b5b0      	push	{r4, r5, r7, lr}
1004bba6:	b088      	sub	sp, #32
1004bba8:	af00      	add	r7, sp, #0
1004bbaa:	6178      	str	r0, [r7, #20]
  uint32_t current_machine_time;
  uint32_t period;

  current_machine_time = LL_RADIO_TIMER_GetAbsoluteTime(WAKEUP);
1004bbac:	4b2a      	ldr	r3, [pc, #168]	@ (1004bc58 <_update_system_time+0xb4>)
1004bbae:	0018      	movs	r0, r3
1004bbb0:	f7fe fedb 	bl	1004a96a <LL_RADIO_TIMER_GetAbsoluteTime>
1004bbb4:	0003      	movs	r3, r0
1004bbb6:	61fb      	str	r3, [r7, #28]
  period = context->calibrationData.last_period1;
1004bbb8:	697b      	ldr	r3, [r7, #20]
1004bbba:	6a1b      	ldr	r3, [r3, #32]
1004bbbc:	61bb      	str	r3, [r7, #24]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004bbbe:	697b      	ldr	r3, [r7, #20]
1004bbc0:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
1004bbc2:	6add      	ldr	r5, [r3, #44]	@ 0x2c
                             blue_unit_conversion(TIME_ABSDIFF(current_machine_time,
1004bbc4:	697b      	ldr	r3, [r7, #20]
1004bbc6:	2280      	movs	r2, #128	@ 0x80
1004bbc8:	589b      	ldr	r3, [r3, r2]
1004bbca:	69fa      	ldr	r2, [r7, #28]
1004bbcc:	1ad3      	subs	r3, r2, r3
1004bbce:	4a23      	ldr	r2, [pc, #140]	@ (1004bc5c <_update_system_time+0xb8>)
1004bbd0:	69b9      	ldr	r1, [r7, #24]
1004bbd2:	0018      	movs	r0, r3
1004bbd4:	f7f4 fa74 	bl	100400c0 <blue_unit_conversion>
1004bbd8:	0003      	movs	r3, r0
1004bbda:	60bb      	str	r3, [r7, #8]
1004bbdc:	2300      	movs	r3, #0
1004bbde:	60fb      	str	r3, [r7, #12]
  context->cumulative_time = context->calibrationData.last_calibration_time + \
1004bbe0:	68ba      	ldr	r2, [r7, #8]
1004bbe2:	68fb      	ldr	r3, [r7, #12]
1004bbe4:	1912      	adds	r2, r2, r4
1004bbe6:	416b      	adcs	r3, r5
1004bbe8:	6979      	ldr	r1, [r7, #20]
1004bbea:	670a      	str	r2, [r1, #112]	@ 0x70
1004bbec:	674b      	str	r3, [r1, #116]	@ 0x74
                                                               context->last_machine_time),
                                                  period, MULT64_THR_PERIOD);

  if ((context->calibrationSettings.periodicCalibration == 0)
1004bbee:	697b      	ldr	r3, [r7, #20]
1004bbf0:	781b      	ldrb	r3, [r3, #0]
1004bbf2:	2b00      	cmp	r3, #0
1004bbf4:	d11d      	bne.n	1004bc32 <_update_system_time+0x8e>
      && (TIME_ABSDIFF(current_machine_time,
1004bbf6:	697b      	ldr	r3, [r7, #20]
1004bbf8:	2280      	movs	r2, #128	@ 0x80
1004bbfa:	589b      	ldr	r3, [r3, r2]
1004bbfc:	69fa      	ldr	r2, [r7, #28]
1004bbfe:	1ad2      	subs	r2, r2, r3
                       context->last_machine_time) < context->calibrationData.calibration_machine_interval))
1004bc00:	697b      	ldr	r3, [r7, #20]
1004bc02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      && (TIME_ABSDIFF(current_machine_time,
1004bc04:	429a      	cmp	r2, r3
1004bc06:	d214      	bcs.n	1004bc32 <_update_system_time+0x8e>
  {
    context->cumulative_time += blue_unit_conversion(TIMER_MAX_VALUE, period, MULT64_THR_PERIOD);
1004bc08:	4a14      	ldr	r2, [pc, #80]	@ (1004bc5c <_update_system_time+0xb8>)
1004bc0a:	69b9      	ldr	r1, [r7, #24]
1004bc0c:	2301      	movs	r3, #1
1004bc0e:	425b      	negs	r3, r3
1004bc10:	0018      	movs	r0, r3
1004bc12:	f7f4 fa55 	bl	100400c0 <blue_unit_conversion>
1004bc16:	0001      	movs	r1, r0
1004bc18:	697b      	ldr	r3, [r7, #20]
1004bc1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004bc1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004bc1e:	6039      	str	r1, [r7, #0]
1004bc20:	2100      	movs	r1, #0
1004bc22:	6079      	str	r1, [r7, #4]
1004bc24:	6838      	ldr	r0, [r7, #0]
1004bc26:	6879      	ldr	r1, [r7, #4]
1004bc28:	1812      	adds	r2, r2, r0
1004bc2a:	414b      	adcs	r3, r1
1004bc2c:	6979      	ldr	r1, [r7, #20]
1004bc2e:	670a      	str	r2, [r1, #112]	@ 0x70
1004bc30:	674b      	str	r3, [r1, #116]	@ 0x74
  }
  context->last_machine_time = current_machine_time;
1004bc32:	697b      	ldr	r3, [r7, #20]
1004bc34:	2180      	movs	r1, #128	@ 0x80
1004bc36:	69fa      	ldr	r2, [r7, #28]
1004bc38:	505a      	str	r2, [r3, r1]
  context->calibrationData.last_calibration_time = context->cumulative_time;
1004bc3a:	697b      	ldr	r3, [r7, #20]
1004bc3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
1004bc3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004bc40:	6979      	ldr	r1, [r7, #20]
1004bc42:	628a      	str	r2, [r1, #40]	@ 0x28
1004bc44:	62cb      	str	r3, [r1, #44]	@ 0x2c
  context->calibrationData.last_period1 = context->calibrationData.period1;
1004bc46:	697b      	ldr	r3, [r7, #20]
1004bc48:	69da      	ldr	r2, [r3, #28]
1004bc4a:	697b      	ldr	r3, [r7, #20]
1004bc4c:	621a      	str	r2, [r3, #32]
}
1004bc4e:	46c0      	nop			@ (mov r8, r8)
1004bc50:	46bd      	mov	sp, r7
1004bc52:	b008      	add	sp, #32
1004bc54:	bdb0      	pop	{r4, r5, r7, pc}
1004bc56:	46c0      	nop			@ (mov r8, r8)
1004bc58:	60001800 	.word	0x60001800
1004bc5c:	00000635 	.word	0x00000635

1004bc60 <_check_radio_activity>:
   3) The radio event is after the next calibration event. Then the timer will be programmed with the latest values.
   The check on the next calibration event is made even though the calibration is disabled (max cal. interval)
   in order to avoid counter wrapping with timeouts far in the future.
*/
static void _check_radio_activity(RADIO_TIMER_RadioHandleTypeDef *timerHandle, uint8_t *expired)
{
1004bc60:	b5b0      	push	{r4, r5, r7, lr}
1004bc62:	b08a      	sub	sp, #40	@ 0x28
1004bc64:	af00      	add	r7, sp, #0
1004bc66:	6078      	str	r0, [r7, #4]
1004bc68:	6039      	str	r1, [r7, #0]
  uint64_t nextCalibrationEvent, currentTime;
  *expired = 0;
1004bc6a:	683b      	ldr	r3, [r7, #0]
1004bc6c:	2200      	movs	r2, #0
1004bc6e:	701a      	strb	r2, [r3, #0]
  if (timerHandle->pending)
1004bc70:	687b      	ldr	r3, [r7, #4]
1004bc72:	7a9b      	ldrb	r3, [r3, #10]
1004bc74:	2b00      	cmp	r3, #0
1004bc76:	d100      	bne.n	1004bc7a <_check_radio_activity+0x1a>
1004bc78:	e070      	b.n	1004bd5c <_check_radio_activity+0xfc>
  {
    
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004bc7a:	4b3a      	ldr	r3, [pc, #232]	@ (1004bd64 <_check_radio_activity+0x104>)
1004bc7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004bc7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                           RADIO_TIMER_Context.calibrationSettings.periodicCalibrationInterval;
1004bc80:	4938      	ldr	r1, [pc, #224]	@ (1004bd64 <_check_radio_activity+0x104>)
1004bc82:	6849      	ldr	r1, [r1, #4]
1004bc84:	000c      	movs	r4, r1
1004bc86:	2100      	movs	r1, #0
1004bc88:	000d      	movs	r5, r1
    nextCalibrationEvent = RADIO_TIMER_Context.calibrationData.last_calibration_time + \
1004bc8a:	1912      	adds	r2, r2, r4
1004bc8c:	416b      	adcs	r3, r5
1004bc8e:	623a      	str	r2, [r7, #32]
1004bc90:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004bc92:	f3ef 8310 	mrs	r3, PRIMASK
1004bc96:	60fb      	str	r3, [r7, #12]
  return(result);
1004bc98:	68fb      	ldr	r3, [r7, #12]

    ATOMIC_SECTION_BEGIN();
1004bc9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1004bc9c:	b672      	cpsid	i
}
1004bc9e:	46c0      	nop			@ (mov r8, r8)
    currentTime = HAL_RADIO_TIMER_GetCurrentSysTime();
1004bca0:	f7ff fa86 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
1004bca4:	0002      	movs	r2, r0
1004bca6:	000b      	movs	r3, r1
1004bca8:	613a      	str	r2, [r7, #16]
1004bcaa:	617b      	str	r3, [r7, #20]
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004bcac:	687b      	ldr	r3, [r7, #4]
1004bcae:	681a      	ldr	r2, [r3, #0]
1004bcb0:	685b      	ldr	r3, [r3, #4]
1004bcb2:	6a38      	ldr	r0, [r7, #32]
1004bcb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
1004bcb6:	24c8      	movs	r4, #200	@ 0xc8
1004bcb8:	02a4      	lsls	r4, r4, #10
1004bcba:	2500      	movs	r5, #0
1004bcbc:	1900      	adds	r0, r0, r4
1004bcbe:	4169      	adcs	r1, r5
1004bcc0:	4299      	cmp	r1, r3
1004bcc2:	d812      	bhi.n	1004bcea <_check_radio_activity+0x8a>
1004bcc4:	d101      	bne.n	1004bcca <_check_radio_activity+0x6a>
1004bcc6:	4290      	cmp	r0, r2
1004bcc8:	d80f      	bhi.n	1004bcea <_check_radio_activity+0x8a>
        (currentTime > (nextCalibrationEvent + CALIB_SAFE_THR)))
1004bcca:	6a3a      	ldr	r2, [r7, #32]
1004bccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004bcce:	20b9      	movs	r0, #185	@ 0xb9
1004bcd0:	0040      	lsls	r0, r0, #1
1004bcd2:	2100      	movs	r1, #0
1004bcd4:	1812      	adds	r2, r2, r0
1004bcd6:	414b      	adcs	r3, r1
    if ((timerHandle->expiryTime < (nextCalibrationEvent + RADIO_ACTIVITY_MARGIN)) || \
1004bcd8:	6979      	ldr	r1, [r7, #20]
1004bcda:	4299      	cmp	r1, r3
1004bcdc:	d805      	bhi.n	1004bcea <_check_radio_activity+0x8a>
1004bcde:	6979      	ldr	r1, [r7, #20]
1004bce0:	4299      	cmp	r1, r3
1004bce2:	d135      	bne.n	1004bd50 <_check_radio_activity+0xf0>
1004bce4:	6939      	ldr	r1, [r7, #16]
1004bce6:	4291      	cmp	r1, r2
1004bce8:	d932      	bls.n	1004bd50 <_check_radio_activity+0xf0>
    {
      if (timerHandle->expiryTime - TIMER1_INIT_DELAY > (currentTime + TIMER1_MARGIN))
1004bcea:	687b      	ldr	r3, [r7, #4]
1004bcec:	681a      	ldr	r2, [r3, #0]
1004bcee:	685b      	ldr	r3, [r3, #4]
1004bcf0:	204c      	movs	r0, #76	@ 0x4c
1004bcf2:	4240      	negs	r0, r0
1004bcf4:	17c1      	asrs	r1, r0, #31
1004bcf6:	1880      	adds	r0, r0, r2
1004bcf8:	4159      	adcs	r1, r3
1004bcfa:	693a      	ldr	r2, [r7, #16]
1004bcfc:	697b      	ldr	r3, [r7, #20]
1004bcfe:	240a      	movs	r4, #10
1004bd00:	2500      	movs	r5, #0
1004bd02:	1912      	adds	r2, r2, r4
1004bd04:	416b      	adcs	r3, r5
1004bd06:	4299      	cmp	r1, r3
1004bd08:	d802      	bhi.n	1004bd10 <_check_radio_activity+0xb0>
1004bd0a:	d11a      	bne.n	1004bd42 <_check_radio_activity+0xe2>
1004bd0c:	4290      	cmp	r0, r2
1004bd0e:	d918      	bls.n	1004bd42 <_check_radio_activity+0xe2>
      {
        *expired = TIMER_SetRadioTimerValue(timerHandle->expiryTime, timerHandle->event_type, timerHandle->cal_req);
1004bd10:	687b      	ldr	r3, [r7, #4]
1004bd12:	681a      	ldr	r2, [r3, #0]
1004bd14:	685b      	ldr	r3, [r3, #4]
1004bd16:	0010      	movs	r0, r2
1004bd18:	687b      	ldr	r3, [r7, #4]
1004bd1a:	7b19      	ldrb	r1, [r3, #12]
1004bd1c:	687b      	ldr	r3, [r7, #4]
1004bd1e:	7a1b      	ldrb	r3, [r3, #8]
1004bd20:	001a      	movs	r2, r3
1004bd22:	f000 f821 	bl	1004bd68 <TIMER_SetRadioTimerValue>
1004bd26:	0003      	movs	r3, r0
1004bd28:	001a      	movs	r2, r3
1004bd2a:	683b      	ldr	r3, [r7, #0]
1004bd2c:	701a      	strb	r2, [r3, #0]
        timerHandle->pending = FALSE; /* timer has been served. No more pending */
1004bd2e:	687b      	ldr	r3, [r7, #4]
1004bd30:	2200      	movs	r2, #0
1004bd32:	729a      	strb	r2, [r3, #10]
        timerHandle->active = TRUE; /* timer has been programmed and it becomes ACTIVE */
1004bd34:	687b      	ldr	r3, [r7, #4]
1004bd36:	2201      	movs	r2, #1
1004bd38:	725a      	strb	r2, [r3, #9]
        timerHandle->intTxRx_to_be_served = TRUE;
1004bd3a:	687b      	ldr	r3, [r7, #4]
1004bd3c:	2201      	movs	r2, #1
1004bd3e:	72da      	strb	r2, [r3, #11]
1004bd40:	e006      	b.n	1004bd50 <_check_radio_activity+0xf0>
      }
      else
      {
        
        RADIO_TIMER_Context.radioTimer.pending = FALSE;
1004bd42:	4b08      	ldr	r3, [pc, #32]	@ (1004bd64 <_check_radio_activity+0x104>)
1004bd44:	2262      	movs	r2, #98	@ 0x62
1004bd46:	2100      	movs	r1, #0
1004bd48:	5499      	strb	r1, [r3, r2]
        *expired = 1;
1004bd4a:	683b      	ldr	r3, [r7, #0]
1004bd4c:	2201      	movs	r2, #1
1004bd4e:	701a      	strb	r2, [r3, #0]
1004bd50:	69fb      	ldr	r3, [r7, #28]
1004bd52:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004bd54:	68bb      	ldr	r3, [r7, #8]
1004bd56:	f383 8810 	msr	PRIMASK, r3
}
1004bd5a:	46c0      	nop			@ (mov r8, r8)
      
    }
    ATOMIC_SECTION_END();
    
  }
}
1004bd5c:	46c0      	nop			@ (mov r8, r8)
1004bd5e:	46bd      	mov	sp, r7
1004bd60:	b00a      	add	sp, #40	@ 0x28
1004bd62:	bdb0      	pop	{r4, r5, r7, pc}
1004bd64:	20002870 	.word	0x20002870

1004bd68 <TIMER_SetRadioTimerValue>:
  * @warning The API must be called with interrupts disabled to avoid programming the timer with a value in the past
  * @retval  0 if a correct timeout has been programmed in the timeout register
  * @retval  1 if a correct timeout cannot be programmed
  */
static uint8_t TIMER_SetRadioTimerValue(uint32_t timeout, bool event_type, bool cal_req)
{
1004bd68:	b580      	push	{r7, lr}
1004bd6a:	b08a      	sub	sp, #40	@ 0x28
1004bd6c:	af00      	add	r7, sp, #0
1004bd6e:	6078      	str	r0, [r7, #4]
1004bd70:	0008      	movs	r0, r1
1004bd72:	0011      	movs	r1, r2
1004bd74:	1cfb      	adds	r3, r7, #3
1004bd76:	1c02      	adds	r2, r0, #0
1004bd78:	701a      	strb	r2, [r3, #0]
1004bd7a:	1cbb      	adds	r3, r7, #2
1004bd7c:	1c0a      	adds	r2, r1, #0
1004bd7e:	701a      	strb	r2, [r3, #0]
  uint32_t current_time, delay, radio_init_delay, device_delay, rel_timeout, rel_timeout_mt;
  uint8_t ret_val;

  /*choose the 2nd init duration. Check the event_type and cal. request*/
  if (event_type == TX)
1004bd80:	1cfb      	adds	r3, r7, #3
1004bd82:	781b      	ldrb	r3, [r3, #0]
1004bd84:	2b00      	cmp	r3, #0
1004bd86:	d015      	beq.n	1004bdb4 <TIMER_SetRadioTimerValue+0x4c>
  {
    if (cal_req)
1004bd88:	1cbb      	adds	r3, r7, #2
1004bd8a:	781b      	ldrb	r3, [r3, #0]
1004bd8c:	2b00      	cmp	r3, #0
1004bd8e:	d008      	beq.n	1004bda2 <TIMER_SetRadioTimerValue+0x3a>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay;
1004bd90:	4b67      	ldr	r3, [pc, #412]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bd92:	2238      	movs	r2, #56	@ 0x38
1004bd94:	5c9b      	ldrb	r3, [r3, r2]
1004bd96:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004bd98:	4b65      	ldr	r3, [pc, #404]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bd9a:	223c      	movs	r2, #60	@ 0x3c
1004bd9c:	5c9b      	ldrb	r3, [r3, r2]
1004bd9e:	61fb      	str	r3, [r7, #28]
1004bda0:	e01d      	b.n	1004bdde <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.tx_no_cal_delay;
1004bda2:	4b63      	ldr	r3, [pc, #396]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bda4:	2239      	movs	r2, #57	@ 0x39
1004bda6:	5c9b      	ldrb	r3, [r3, r2]
1004bda8:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004bdaa:	4b61      	ldr	r3, [pc, #388]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bdac:	223c      	movs	r2, #60	@ 0x3c
1004bdae:	5c9b      	ldrb	r3, [r3, r2]
1004bdb0:	61fb      	str	r3, [r7, #28]
1004bdb2:	e014      	b.n	1004bdde <TIMER_SetRadioTimerValue+0x76>
    }
  }
  else
  {
    if (cal_req)
1004bdb4:	1cbb      	adds	r3, r7, #2
1004bdb6:	781b      	ldrb	r3, [r3, #0]
1004bdb8:	2b00      	cmp	r3, #0
1004bdba:	d008      	beq.n	1004bdce <TIMER_SetRadioTimerValue+0x66>
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_cal_delay;
1004bdbc:	4b5c      	ldr	r3, [pc, #368]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bdbe:	223a      	movs	r2, #58	@ 0x3a
1004bdc0:	5c9b      	ldrb	r3, [r3, r2]
1004bdc2:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004bdc4:	4b5a      	ldr	r3, [pc, #360]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bdc6:	223c      	movs	r2, #60	@ 0x3c
1004bdc8:	5c9b      	ldrb	r3, [r3, r2]
1004bdca:	61fb      	str	r3, [r7, #28]
1004bdcc:	e007      	b.n	1004bdde <TIMER_SetRadioTimerValue+0x76>
    }
    else
    {
      radio_init_delay = RADIO_TIMER_Context.TxRxDelay.rx_no_cal_delay;
1004bdce:	4b58      	ldr	r3, [pc, #352]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bdd0:	223b      	movs	r2, #59	@ 0x3b
1004bdd2:	5c9b      	ldrb	r3, [r3, r2]
1004bdd4:	623b      	str	r3, [r7, #32]
      device_delay = RADIO_TIMER_Context.TxRxDelay.tx_cal_delay_st;
1004bdd6:	4b56      	ldr	r3, [pc, #344]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bdd8:	223c      	movs	r2, #60	@ 0x3c
1004bdda:	5c9b      	ldrb	r3, [r3, r2]
1004bddc:	61fb      	str	r3, [r7, #28]
    }
  }

  /* At this point, it is care of the upper layers to guarantee that the timeout represents an absolute time in the future */
  rel_timeout = timeout - (uint32_t)_get_system_time_and_machine(&RADIO_TIMER_Context, &current_time);
1004bdde:	230c      	movs	r3, #12
1004bde0:	18fa      	adds	r2, r7, r3
1004bde2:	4b53      	ldr	r3, [pc, #332]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bde4:	0011      	movs	r1, r2
1004bde6:	0018      	movs	r0, r3
1004bde8:	f7ff fcc4 	bl	1004b774 <_get_system_time_and_machine>
1004bdec:	0002      	movs	r2, r0
1004bdee:	000b      	movs	r3, r1
1004bdf0:	687b      	ldr	r3, [r7, #4]
1004bdf2:	1a9b      	subs	r3, r3, r2
1004bdf4:	617b      	str	r3, [r7, #20]

  rel_timeout_mt =  blue_unit_conversion(rel_timeout, RADIO_TIMER_Context.calibrationData.freq1, MULT64_THR_FREQ);
1004bdf6:	4b4e      	ldr	r3, [pc, #312]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bdf8:	699b      	ldr	r3, [r3, #24]
1004bdfa:	0019      	movs	r1, r3
1004bdfc:	4a4d      	ldr	r2, [pc, #308]	@ (1004bf34 <TIMER_SetRadioTimerValue+0x1cc>)
1004bdfe:	697b      	ldr	r3, [r7, #20]
1004be00:	0018      	movs	r0, r3
1004be02:	f7f4 f95d 	bl	100400c0 <blue_unit_conversion>
1004be06:	0003      	movs	r3, r0
1004be08:	613b      	str	r3, [r7, #16]

  /*Check if the timeout is beyond the wakeup time offset. Then program either the WakeUp timer or the Timer1*/
  if (rel_timeout > (device_delay + RADIO_TIMER_Context.hs_startup_time + MARGIN_EXT))
1004be0a:	4b49      	ldr	r3, [pc, #292]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004be0c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
1004be0e:	69fb      	ldr	r3, [r7, #28]
1004be10:	18d3      	adds	r3, r2, r3
1004be12:	33c8      	adds	r3, #200	@ 0xc8
1004be14:	697a      	ldr	r2, [r7, #20]
1004be16:	429a      	cmp	r2, r3
1004be18:	d92f      	bls.n	1004be7a <TIMER_SetRadioTimerValue+0x112>
  {
    /*The timeout is after the wakeup_time_offset, So it is ok to program the wakeup timer*/
    delay = rel_timeout_mt - BLUEGLOB->WAKEUPINITDELAY - radio_init_delay;
1004be1a:	4b47      	ldr	r3, [pc, #284]	@ (1004bf38 <TIMER_SetRadioTimerValue+0x1d0>)
1004be1c:	795b      	ldrb	r3, [r3, #5]
1004be1e:	b2db      	uxtb	r3, r3
1004be20:	001a      	movs	r2, r3
1004be22:	693b      	ldr	r3, [r7, #16]
1004be24:	1a9a      	subs	r2, r3, r2
1004be26:	6a3b      	ldr	r3, [r7, #32]
1004be28:	1ad3      	subs	r3, r2, r3
1004be2a:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetBLEWakeupTime(WAKEUP, ((current_time + delay) & TIMER_MAX_VALUE));
1004be2c:	68fa      	ldr	r2, [r7, #12]
1004be2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004be30:	18d3      	adds	r3, r2, r3
1004be32:	4a42      	ldr	r2, [pc, #264]	@ (1004bf3c <TIMER_SetRadioTimerValue+0x1d4>)
1004be34:	0019      	movs	r1, r3
1004be36:	0010      	movs	r0, r2
1004be38:	f7fe fd7f 	bl	1004a93a <LL_RADIO_TIMER_SetBLEWakeupTime>
    LL_RADIO_TIMER_SetSleepRequestMode(WAKEUP, 0);
1004be3c:	4b3f      	ldr	r3, [pc, #252]	@ (1004bf3c <TIMER_SetRadioTimerValue+0x1d4>)
1004be3e:	2100      	movs	r1, #0
1004be40:	0018      	movs	r0, r3
1004be42:	f7fe fdab 	bl	1004a99c <LL_RADIO_TIMER_SetSleepRequestMode>
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004be46:	23c0      	movs	r3, #192	@ 0xc0
1004be48:	05db      	lsls	r3, r3, #23
1004be4a:	0018      	movs	r0, r3
1004be4c:	f7fe fcfc 	bl	1004a848 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004be50:	23c0      	movs	r3, #192	@ 0xc0
1004be52:	05db      	lsls	r3, r3, #23
1004be54:	0018      	movs	r0, r3
1004be56:	f7fe fd06 	bl	1004a866 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_EnableBLEWakeupTimer(WAKEUP);
1004be5a:	4b38      	ldr	r3, [pc, #224]	@ (1004bf3c <TIMER_SetRadioTimerValue+0x1d4>)
1004be5c:	0018      	movs	r0, r3
1004be5e:	f7fe fd1d 	bl	1004a89c <LL_RADIO_TIMER_EnableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode(WAKEUP);
1004be62:	4b36      	ldr	r3, [pc, #216]	@ (1004bf3c <TIMER_SetRadioTimerValue+0x1d4>)
1004be64:	0018      	movs	r0, r3
1004be66:	f7fe fd8a 	bl	1004a97e <LL_RADIO_TIMER_EnableWakeupTimerLowPowerMode>
    radio_init_delay += BLUEGLOB->WAKEUPINITDELAY;
1004be6a:	4b33      	ldr	r3, [pc, #204]	@ (1004bf38 <TIMER_SetRadioTimerValue+0x1d0>)
1004be6c:	795b      	ldrb	r3, [r3, #5]
1004be6e:	b2db      	uxtb	r3, r3
1004be70:	001a      	movs	r2, r3
1004be72:	6a3b      	ldr	r3, [r7, #32]
1004be74:	189b      	adds	r3, r3, r2
1004be76:	623b      	str	r3, [r7, #32]
1004be78:	e021      	b.n	1004bebe <TIMER_SetRadioTimerValue+0x156>
  }
  else
  {
    delay = rel_timeout_mt - RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt - radio_init_delay;
1004be7a:	4b2d      	ldr	r3, [pc, #180]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004be7c:	223d      	movs	r2, #61	@ 0x3d
1004be7e:	5c9b      	ldrb	r3, [r3, r2]
1004be80:	001a      	movs	r2, r3
1004be82:	693b      	ldr	r3, [r7, #16]
1004be84:	1a9a      	subs	r2, r3, r2
1004be86:	6a3b      	ldr	r3, [r7, #32]
1004be88:	1ad3      	subs	r3, r2, r3
1004be8a:	627b      	str	r3, [r7, #36]	@ 0x24
    LL_RADIO_TIMER_SetTimeout(BLUE, ((current_time + delay) & TIMER_MAX_VALUE));
1004be8c:	68fa      	ldr	r2, [r7, #12]
1004be8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004be90:	18d2      	adds	r2, r2, r3
1004be92:	23c0      	movs	r3, #192	@ 0xc0
1004be94:	05db      	lsls	r3, r3, #23
1004be96:	0011      	movs	r1, r2
1004be98:	0018      	movs	r0, r3
1004be9a:	f7fe fcf3 	bl	1004a884 <LL_RADIO_TIMER_SetTimeout>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004be9e:	4b27      	ldr	r3, [pc, #156]	@ (1004bf3c <TIMER_SetRadioTimerValue+0x1d4>)
1004bea0:	0018      	movs	r0, r3
1004bea2:	f7fe fd0b 	bl	1004a8bc <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    LL_RADIO_TIMER_EnableTimer1(BLUE);
1004bea6:	23c0      	movs	r3, #192	@ 0xc0
1004bea8:	05db      	lsls	r3, r3, #23
1004beaa:	0018      	movs	r0, r3
1004beac:	f7fe fcbc 	bl	1004a828 <LL_RADIO_TIMER_EnableTimer1>
    radio_init_delay += RADIO_TIMER_Context.TxRxDelay.tim12_delay_mt;
1004beb0:	4b1f      	ldr	r3, [pc, #124]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004beb2:	223d      	movs	r2, #61	@ 0x3d
1004beb4:	5c9b      	ldrb	r3, [r3, r2]
1004beb6:	001a      	movs	r2, r3
1004beb8:	6a3b      	ldr	r3, [r7, #32]
1004beba:	189b      	adds	r3, r3, r2
1004bebc:	623b      	str	r3, [r7, #32]
  }

  RADIO_TIMER_Context.last_anchor_mt = (current_time + rel_timeout_mt) & TIMER_MAX_VALUE;
1004bebe:	68fa      	ldr	r2, [r7, #12]
1004bec0:	693b      	ldr	r3, [r7, #16]
1004bec2:	18d2      	adds	r2, r2, r3
1004bec4:	4b1a      	ldr	r3, [pc, #104]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bec6:	2188      	movs	r1, #136	@ 0x88
1004bec8:	505a      	str	r2, [r3, r1]
  BLUEGLOB->BYTE22 = 0xF0;
  BLUEGLOB->BYTE23 = 0xFF;
#endif

  /* Basic low level check with an extra margin of machine units */
  if ((delay + radio_init_delay) < (radio_init_delay + 5))
1004beca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
1004becc:	6a3b      	ldr	r3, [r7, #32]
1004bece:	18d2      	adds	r2, r2, r3
1004bed0:	6a3b      	ldr	r3, [r7, #32]
1004bed2:	3305      	adds	r3, #5
1004bed4:	429a      	cmp	r2, r3
1004bed6:	d212      	bcs.n	1004befe <TIMER_SetRadioTimerValue+0x196>
  {
    LL_RADIO_TIMER_DisableTimer1(BLUE);
1004bed8:	23c0      	movs	r3, #192	@ 0xc0
1004beda:	05db      	lsls	r3, r3, #23
1004bedc:	0018      	movs	r0, r3
1004bede:	f7fe fcb3 	bl	1004a848 <LL_RADIO_TIMER_DisableTimer1>
    LL_RADIO_TIMER_DisableTimer2(BLUE);
1004bee2:	23c0      	movs	r3, #192	@ 0xc0
1004bee4:	05db      	lsls	r3, r3, #23
1004bee6:	0018      	movs	r0, r3
1004bee8:	f7fe fcbd 	bl	1004a866 <LL_RADIO_TIMER_DisableTimer2>
    LL_RADIO_TIMER_DisableBLEWakeupTimer(WAKEUP);
1004beec:	4b13      	ldr	r3, [pc, #76]	@ (1004bf3c <TIMER_SetRadioTimerValue+0x1d4>)
1004beee:	0018      	movs	r0, r3
1004bef0:	f7fe fce4 	bl	1004a8bc <LL_RADIO_TIMER_DisableBLEWakeupTimer>
    ret_val =  1;
1004bef4:	231b      	movs	r3, #27
1004bef6:	18fb      	adds	r3, r7, r3
1004bef8:	2201      	movs	r2, #1
1004befa:	701a      	strb	r2, [r3, #0]
1004befc:	e010      	b.n	1004bf20 <TIMER_SetRadioTimerValue+0x1b8>
  }
  else
  {
    RADIO_TIMER_Context.last_setup_time = blue_unit_conversion(radio_init_delay, RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004befe:	4b0c      	ldr	r3, [pc, #48]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bf00:	69db      	ldr	r3, [r3, #28]
1004bf02:	0019      	movs	r1, r3
1004bf04:	4a0e      	ldr	r2, [pc, #56]	@ (1004bf40 <TIMER_SetRadioTimerValue+0x1d8>)
1004bf06:	6a3b      	ldr	r3, [r7, #32]
1004bf08:	0018      	movs	r0, r3
1004bf0a:	f7f4 f8d9 	bl	100400c0 <blue_unit_conversion>
1004bf0e:	0003      	movs	r3, r0
1004bf10:	b2d9      	uxtb	r1, r3
1004bf12:	4b07      	ldr	r3, [pc, #28]	@ (1004bf30 <TIMER_SetRadioTimerValue+0x1c8>)
1004bf14:	2284      	movs	r2, #132	@ 0x84
1004bf16:	5499      	strb	r1, [r3, r2]
    ret_val = 0;
1004bf18:	231b      	movs	r3, #27
1004bf1a:	18fb      	adds	r3, r7, r3
1004bf1c:	2200      	movs	r2, #0
1004bf1e:	701a      	strb	r2, [r3, #0]
  }

  return ret_val;
1004bf20:	231b      	movs	r3, #27
1004bf22:	18fb      	adds	r3, r7, r3
1004bf24:	781b      	ldrb	r3, [r3, #0]
}
1004bf26:	0018      	movs	r0, r3
1004bf28:	46bd      	mov	sp, r7
1004bf2a:	b00a      	add	sp, #40	@ 0x28
1004bf2c:	bd80      	pop	{r7, pc}
1004bf2e:	46c0      	nop			@ (mov r8, r8)
1004bf30:	20002870 	.word	0x20002870
1004bf34:	00000326 	.word	0x00000326
1004bf38:	200000c0 	.word	0x200000c0
1004bf3c:	60001800 	.word	0x60001800
1004bf40:	00000635 	.word	0x00000635

1004bf44 <TIMER_GetPastSysTime>:
  * @param   current_system_time: Current System time
  * @warning User should guarantee that call to this function are performed in a non-interruptible context.
  * @return  STU value
  */
static uint64_t TIMER_GetPastSysTime(uint32_t time, uint64_t *current_system_time)
{
1004bf44:	b5b0      	push	{r4, r5, r7, lr}
1004bf46:	b084      	sub	sp, #16
1004bf48:	af00      	add	r7, sp, #0
1004bf4a:	6078      	str	r0, [r7, #4]
1004bf4c:	6039      	str	r1, [r7, #0]
  uint32_t delta_systime, current_machine_time;

  *current_system_time = _get_system_time_and_machine(&RADIO_TIMER_Context, &current_machine_time);
1004bf4e:	2308      	movs	r3, #8
1004bf50:	18fa      	adds	r2, r7, r3
1004bf52:	4b12      	ldr	r3, [pc, #72]	@ (1004bf9c <TIMER_GetPastSysTime+0x58>)
1004bf54:	0011      	movs	r1, r2
1004bf56:	0018      	movs	r0, r3
1004bf58:	f7ff fc0c 	bl	1004b774 <_get_system_time_and_machine>
1004bf5c:	0002      	movs	r2, r0
1004bf5e:	000b      	movs	r3, r1
1004bf60:	6839      	ldr	r1, [r7, #0]
1004bf62:	600a      	str	r2, [r1, #0]
1004bf64:	604b      	str	r3, [r1, #4]
  delta_systime = blue_unit_conversion(TIME_DIFF(current_machine_time, time), RADIO_TIMER_Context.calibrationData.period1, MULT64_THR_PERIOD);
1004bf66:	68ba      	ldr	r2, [r7, #8]
1004bf68:	687b      	ldr	r3, [r7, #4]
1004bf6a:	1ad0      	subs	r0, r2, r3
1004bf6c:	4b0b      	ldr	r3, [pc, #44]	@ (1004bf9c <TIMER_GetPastSysTime+0x58>)
1004bf6e:	69db      	ldr	r3, [r3, #28]
1004bf70:	0019      	movs	r1, r3
1004bf72:	4b0b      	ldr	r3, [pc, #44]	@ (1004bfa0 <TIMER_GetPastSysTime+0x5c>)
1004bf74:	001a      	movs	r2, r3
1004bf76:	f7f4 f8a3 	bl	100400c0 <blue_unit_conversion>
1004bf7a:	0003      	movs	r3, r0
1004bf7c:	60fb      	str	r3, [r7, #12]

  return (*current_system_time - delta_systime);
1004bf7e:	683b      	ldr	r3, [r7, #0]
1004bf80:	681a      	ldr	r2, [r3, #0]
1004bf82:	685b      	ldr	r3, [r3, #4]
1004bf84:	68f9      	ldr	r1, [r7, #12]
1004bf86:	000c      	movs	r4, r1
1004bf88:	2100      	movs	r1, #0
1004bf8a:	000d      	movs	r5, r1
1004bf8c:	1b12      	subs	r2, r2, r4
1004bf8e:	41ab      	sbcs	r3, r5
}
1004bf90:	0010      	movs	r0, r2
1004bf92:	0019      	movs	r1, r3
1004bf94:	46bd      	mov	sp, r7
1004bf96:	b004      	add	sp, #16
1004bf98:	bdb0      	pop	{r4, r5, r7, pc}
1004bf9a:	46c0      	nop			@ (mov r8, r8)
1004bf9c:	20002870 	.word	0x20002870
1004bfa0:	00000635 	.word	0x00000635

1004bfa4 <HAL_RADIO_TIMER_CPU_WKUP_IRQHandler>:
__weak void HAL_RADIO_TIMER_TxRxWakeUpCallback(void)
{
}

void HAL_RADIO_TIMER_CPU_WKUP_IRQHandler(void)
{
1004bfa4:	b580      	push	{r7, lr}
1004bfa6:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_TimeoutCallback();
1004bfa8:	f7ff f986 	bl	1004b2b8 <HAL_RADIO_TIMER_TimeoutCallback>

  HAL_RADIO_TIMER_CpuWakeUpCallback();
1004bfac:	f005 fdd8 	bl	10051b60 <HAL_RADIO_TIMER_CpuWakeUpCallback>
}
1004bfb0:	46c0      	nop			@ (mov r8, r8)
1004bfb2:	46bd      	mov	sp, r7
1004bfb4:	bd80      	pop	{r7, pc}

1004bfb6 <HAL_RADIO_TIMER_ERROR_IRQHandler>:
  HAL_RADIO_TIMER_WakeUpCallback();
#endif
}

void HAL_RADIO_TIMER_ERROR_IRQHandler(void)
{
1004bfb6:	b580      	push	{r7, lr}
1004bfb8:	b082      	sub	sp, #8
1004bfba:	af00      	add	r7, sp, #0
  volatile uint32_t debug_cmd = 0;
1004bfbc:	2300      	movs	r3, #0
1004bfbe:	607b      	str	r3, [r7, #4]
  UNUSED(debug_cmd);
1004bfc0:	687b      	ldr	r3, [r7, #4]
  BLUE->DEBUGCMDREG |= 1;
1004bfc2:	23c0      	movs	r3, #192	@ 0xc0
1004bfc4:	05db      	lsls	r3, r3, #23
1004bfc6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
1004bfc8:	23c0      	movs	r3, #192	@ 0xc0
1004bfca:	05db      	lsls	r3, r3, #23
1004bfcc:	2101      	movs	r1, #1
1004bfce:	430a      	orrs	r2, r1
1004bfd0:	675a      	str	r2, [r3, #116]	@ 0x74
  /* If the device is configured with
     System clock = 64 MHz and BLE clock = 16 MHz
     a register read is necessary to end fine
     the clear interrupt register operation,
     due the AHB down converter latency */
  debug_cmd = BLUE->DEBUGCMDREG;
1004bfd2:	23c0      	movs	r3, #192	@ 0xc0
1004bfd4:	05db      	lsls	r3, r3, #23
1004bfd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004bfd8:	607b      	str	r3, [r7, #4]
}
1004bfda:	46c0      	nop			@ (mov r8, r8)
1004bfdc:	46bd      	mov	sp, r7
1004bfde:	b002      	add	sp, #8
1004bfe0:	bd80      	pop	{r7, pc}
	...

1004bfe4 <LL_PWR_SetNoPullB>:
  *         @arg @ref LL_PWR_GPIO_BIT_15
  *         (*) available only oon STM32WB06 and STM32WB07 devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetNoPullB(uint32_t GPIONumber)
{
1004bfe4:	b580      	push	{r7, lr}
1004bfe6:	b082      	sub	sp, #8
1004bfe8:	af00      	add	r7, sp, #0
1004bfea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(PWR->PUCRB, GPIONumber);
1004bfec:	4b08      	ldr	r3, [pc, #32]	@ (1004c010 <LL_PWR_SetNoPullB+0x2c>)
1004bfee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
1004bff0:	687b      	ldr	r3, [r7, #4]
1004bff2:	43d9      	mvns	r1, r3
1004bff4:	4b06      	ldr	r3, [pc, #24]	@ (1004c010 <LL_PWR_SetNoPullB+0x2c>)
1004bff6:	400a      	ands	r2, r1
1004bff8:	629a      	str	r2, [r3, #40]	@ 0x28
  CLEAR_BIT(PWR->PDCRB, GPIONumber);
1004bffa:	4b05      	ldr	r3, [pc, #20]	@ (1004c010 <LL_PWR_SetNoPullB+0x2c>)
1004bffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004bffe:	687b      	ldr	r3, [r7, #4]
1004c000:	43d9      	mvns	r1, r3
1004c002:	4b03      	ldr	r3, [pc, #12]	@ (1004c010 <LL_PWR_SetNoPullB+0x2c>)
1004c004:	400a      	ands	r2, r1
1004c006:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1004c008:	46c0      	nop			@ (mov r8, r8)
1004c00a:	46bd      	mov	sp, r7
1004c00c:	b002      	add	sp, #8
1004c00e:	bd80      	pop	{r7, pc}
1004c010:	48500000 	.word	0x48500000

1004c014 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
1004c014:	b580      	push	{r7, lr}
1004c016:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
1004c018:	4b04      	ldr	r3, [pc, #16]	@ (1004c02c <LL_RCC_HSE_Enable+0x18>)
1004c01a:	681a      	ldr	r2, [r3, #0]
1004c01c:	4b03      	ldr	r3, [pc, #12]	@ (1004c02c <LL_RCC_HSE_Enable+0x18>)
1004c01e:	2180      	movs	r1, #128	@ 0x80
1004c020:	0249      	lsls	r1, r1, #9
1004c022:	430a      	orrs	r2, r1
1004c024:	601a      	str	r2, [r3, #0]
}
1004c026:	46c0      	nop			@ (mov r8, r8)
1004c028:	46bd      	mov	sp, r7
1004c02a:	bd80      	pop	{r7, pc}
1004c02c:	48400000 	.word	0x48400000

1004c030 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
1004c030:	b580      	push	{r7, lr}
1004c032:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
1004c034:	4b04      	ldr	r3, [pc, #16]	@ (1004c048 <LL_RCC_HSE_Disable+0x18>)
1004c036:	681a      	ldr	r2, [r3, #0]
1004c038:	4b03      	ldr	r3, [pc, #12]	@ (1004c048 <LL_RCC_HSE_Disable+0x18>)
1004c03a:	4904      	ldr	r1, [pc, #16]	@ (1004c04c <LL_RCC_HSE_Disable+0x1c>)
1004c03c:	400a      	ands	r2, r1
1004c03e:	601a      	str	r2, [r3, #0]
}
1004c040:	46c0      	nop			@ (mov r8, r8)
1004c042:	46bd      	mov	sp, r7
1004c044:	bd80      	pop	{r7, pc}
1004c046:	46c0      	nop			@ (mov r8, r8)
1004c048:	48400000 	.word	0x48400000
1004c04c:	fffeffff 	.word	0xfffeffff

1004c050 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
1004c050:	b580      	push	{r7, lr}
1004c052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004c054:	4b07      	ldr	r3, [pc, #28]	@ (1004c074 <LL_RCC_HSE_IsReady+0x24>)
1004c056:	681a      	ldr	r2, [r3, #0]
1004c058:	2380      	movs	r3, #128	@ 0x80
1004c05a:	029b      	lsls	r3, r3, #10
1004c05c:	401a      	ands	r2, r3
1004c05e:	2380      	movs	r3, #128	@ 0x80
1004c060:	029b      	lsls	r3, r3, #10
1004c062:	429a      	cmp	r2, r3
1004c064:	d101      	bne.n	1004c06a <LL_RCC_HSE_IsReady+0x1a>
1004c066:	2301      	movs	r3, #1
1004c068:	e000      	b.n	1004c06c <LL_RCC_HSE_IsReady+0x1c>
1004c06a:	2300      	movs	r3, #0
}
1004c06c:	0018      	movs	r0, r3
1004c06e:	46bd      	mov	sp, r7
1004c070:	bd80      	pop	{r7, pc}
1004c072:	46c0      	nop			@ (mov r8, r8)
1004c074:	48400000 	.word	0x48400000

1004c078 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll RFSWHSECR        SWXOTUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
1004c078:	b580      	push	{r7, lr}
1004c07a:	b082      	sub	sp, #8
1004c07c:	af00      	add	r7, sp, #0
1004c07e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNE, Value << RCC_RFSWHSECR_SWXOTUNE_Pos);
1004c080:	4a0b      	ldr	r2, [pc, #44]	@ (1004c0b0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004c082:	2398      	movs	r3, #152	@ 0x98
1004c084:	58d3      	ldr	r3, [r2, r3]
1004c086:	4a0b      	ldr	r2, [pc, #44]	@ (1004c0b4 <LL_RCC_HSE_SetCapacitorTuning+0x3c>)
1004c088:	401a      	ands	r2, r3
1004c08a:	687b      	ldr	r3, [r7, #4]
1004c08c:	021b      	lsls	r3, r3, #8
1004c08e:	4908      	ldr	r1, [pc, #32]	@ (1004c0b0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004c090:	4313      	orrs	r3, r2
1004c092:	2298      	movs	r2, #152	@ 0x98
1004c094:	508b      	str	r3, [r1, r2]
  SET_BIT(RCC->RFSWHSECR, RCC_RFSWHSECR_SWXOTUNEEN);
1004c096:	4a06      	ldr	r2, [pc, #24]	@ (1004c0b0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004c098:	2398      	movs	r3, #152	@ 0x98
1004c09a:	58d3      	ldr	r3, [r2, r3]
1004c09c:	4904      	ldr	r1, [pc, #16]	@ (1004c0b0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
1004c09e:	2280      	movs	r2, #128	@ 0x80
1004c0a0:	4313      	orrs	r3, r2
1004c0a2:	2298      	movs	r2, #152	@ 0x98
1004c0a4:	508b      	str	r3, [r1, r2]
}
1004c0a6:	46c0      	nop			@ (mov r8, r8)
1004c0a8:	46bd      	mov	sp, r7
1004c0aa:	b002      	add	sp, #8
1004c0ac:	bd80      	pop	{r7, pc}
1004c0ae:	46c0      	nop			@ (mov r8, r8)
1004c0b0:	48400000 	.word	0x48400000
1004c0b4:	ffffc0ff 	.word	0xffffc0ff

1004c0b8 <LL_RCC_HSE_SetCurrentControl>:
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_5
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_6
  *         @arg @ref LL_RCC_HSE_CURRENTMAX_7
  */
__STATIC_INLINE void LL_RCC_HSE_SetCurrentControl(uint32_t CurrentMax)
{
1004c0b8:	b580      	push	{r7, lr}
1004c0ba:	b082      	sub	sp, #8
1004c0bc:	af00      	add	r7, sp, #0
1004c0be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->RFSWHSECR, RCC_RFSWHSECR_GMC, CurrentMax);
1004c0c0:	4a07      	ldr	r2, [pc, #28]	@ (1004c0e0 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004c0c2:	2398      	movs	r3, #152	@ 0x98
1004c0c4:	58d3      	ldr	r3, [r2, r3]
1004c0c6:	2270      	movs	r2, #112	@ 0x70
1004c0c8:	4393      	bics	r3, r2
1004c0ca:	001a      	movs	r2, r3
1004c0cc:	4904      	ldr	r1, [pc, #16]	@ (1004c0e0 <LL_RCC_HSE_SetCurrentControl+0x28>)
1004c0ce:	687b      	ldr	r3, [r7, #4]
1004c0d0:	4313      	orrs	r3, r2
1004c0d2:	2298      	movs	r2, #152	@ 0x98
1004c0d4:	508b      	str	r3, [r1, r2]
}
1004c0d6:	46c0      	nop			@ (mov r8, r8)
1004c0d8:	46bd      	mov	sp, r7
1004c0da:	b002      	add	sp, #8
1004c0dc:	bd80      	pop	{r7, pc}
1004c0de:	46c0      	nop			@ (mov r8, r8)
1004c0e0:	48400000 	.word	0x48400000

1004c0e4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
1004c0e4:	b580      	push	{r7, lr}
1004c0e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004c0e8:	4b07      	ldr	r3, [pc, #28]	@ (1004c108 <LL_RCC_HSI_Enable+0x24>)
1004c0ea:	689a      	ldr	r2, [r3, #8]
1004c0ec:	4b06      	ldr	r3, [pc, #24]	@ (1004c108 <LL_RCC_HSI_Enable+0x24>)
1004c0ee:	2104      	movs	r1, #4
1004c0f0:	438a      	bics	r2, r1
1004c0f2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004c0f4:	4b04      	ldr	r3, [pc, #16]	@ (1004c108 <LL_RCC_HSI_Enable+0x24>)
1004c0f6:	689a      	ldr	r2, [r3, #8]
1004c0f8:	4b03      	ldr	r3, [pc, #12]	@ (1004c108 <LL_RCC_HSI_Enable+0x24>)
1004c0fa:	2102      	movs	r1, #2
1004c0fc:	438a      	bics	r2, r1
1004c0fe:	609a      	str	r2, [r3, #8]
}
1004c100:	46c0      	nop			@ (mov r8, r8)
1004c102:	46bd      	mov	sp, r7
1004c104:	bd80      	pop	{r7, pc}
1004c106:	46c0      	nop			@ (mov r8, r8)
1004c108:	48400000 	.word	0x48400000

1004c10c <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI
  * @rmtoll CFGR           STOPHSI        LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
1004c10c:	b580      	push	{r7, lr}
1004c10e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004c110:	4b07      	ldr	r3, [pc, #28]	@ (1004c130 <LL_RCC_HSI_Disable+0x24>)
1004c112:	689a      	ldr	r2, [r3, #8]
1004c114:	4b06      	ldr	r3, [pc, #24]	@ (1004c130 <LL_RCC_HSI_Disable+0x24>)
1004c116:	2102      	movs	r1, #2
1004c118:	430a      	orrs	r2, r1
1004c11a:	609a      	str	r2, [r3, #8]
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004c11c:	4b04      	ldr	r3, [pc, #16]	@ (1004c130 <LL_RCC_HSI_Disable+0x24>)
1004c11e:	689a      	ldr	r2, [r3, #8]
1004c120:	4b03      	ldr	r3, [pc, #12]	@ (1004c130 <LL_RCC_HSI_Disable+0x24>)
1004c122:	2104      	movs	r1, #4
1004c124:	430a      	orrs	r2, r1
1004c126:	609a      	str	r2, [r3, #8]
}
1004c128:	46c0      	nop			@ (mov r8, r8)
1004c12a:	46bd      	mov	sp, r7
1004c12c:	bd80      	pop	{r7, pc}
1004c12e:	46c0      	nop			@ (mov r8, r8)
1004c130:	48400000 	.word	0x48400000

1004c134 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
1004c134:	b580      	push	{r7, lr}
1004c136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
1004c138:	4b07      	ldr	r3, [pc, #28]	@ (1004c158 <LL_RCC_HSI_IsReady+0x24>)
1004c13a:	681a      	ldr	r2, [r3, #0]
1004c13c:	2380      	movs	r3, #128	@ 0x80
1004c13e:	00db      	lsls	r3, r3, #3
1004c140:	401a      	ands	r2, r3
1004c142:	2380      	movs	r3, #128	@ 0x80
1004c144:	00db      	lsls	r3, r3, #3
1004c146:	429a      	cmp	r2, r3
1004c148:	d101      	bne.n	1004c14e <LL_RCC_HSI_IsReady+0x1a>
1004c14a:	2301      	movs	r3, #1
1004c14c:	e000      	b.n	1004c150 <LL_RCC_HSI_IsReady+0x1c>
1004c14e:	2300      	movs	r3, #0
}
1004c150:	0018      	movs	r0, r3
1004c152:	46bd      	mov	sp, r7
1004c154:	bd80      	pop	{r7, pc}
1004c156:	46c0      	nop			@ (mov r8, r8)
1004c158:	48400000 	.word	0x48400000

1004c15c <LL_RCC_DIRECT_HSE_Enable>:
  * @brief  Enable DIRECT_HSE mode
  * @rmtoll CFGR       HSESEL/STOPHSI         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DIRECT_HSE_Enable(void)
{
1004c15c:	b580      	push	{r7, lr}
1004c15e:	b082      	sub	sp, #8
1004c160:	af00      	add	r7, sp, #0
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);
1004c162:	46c0      	nop			@ (mov r8, r8)
1004c164:	4b0f      	ldr	r3, [pc, #60]	@ (1004c1a4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c166:	681a      	ldr	r2, [r3, #0]
1004c168:	2380      	movs	r3, #128	@ 0x80
1004c16a:	029b      	lsls	r3, r3, #10
1004c16c:	4013      	ands	r3, r2
1004c16e:	d0f9      	beq.n	1004c164 <LL_RCC_DIRECT_HSE_Enable+0x8>
  SET_BIT(RCC->CFGR, RCC_CFGR_HSESEL);
1004c170:	4b0c      	ldr	r3, [pc, #48]	@ (1004c1a4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c172:	689a      	ldr	r2, [r3, #8]
1004c174:	4b0b      	ldr	r3, [pc, #44]	@ (1004c1a4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c176:	2102      	movs	r1, #2
1004c178:	430a      	orrs	r2, r1
1004c17a:	609a      	str	r2, [r3, #8]
  for (volatile int i = 0; i < 6; i++)
1004c17c:	2300      	movs	r3, #0
1004c17e:	607b      	str	r3, [r7, #4]
1004c180:	e003      	b.n	1004c18a <LL_RCC_DIRECT_HSE_Enable+0x2e>
  {
    __asm("NOP");
1004c182:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004c184:	687b      	ldr	r3, [r7, #4]
1004c186:	3301      	adds	r3, #1
1004c188:	607b      	str	r3, [r7, #4]
1004c18a:	687b      	ldr	r3, [r7, #4]
1004c18c:	2b05      	cmp	r3, #5
1004c18e:	ddf8      	ble.n	1004c182 <LL_RCC_DIRECT_HSE_Enable+0x26>
  }
  SET_BIT(RCC->CFGR, RCC_CFGR_STOPHSI);
1004c190:	4b04      	ldr	r3, [pc, #16]	@ (1004c1a4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c192:	689a      	ldr	r2, [r3, #8]
1004c194:	4b03      	ldr	r3, [pc, #12]	@ (1004c1a4 <LL_RCC_DIRECT_HSE_Enable+0x48>)
1004c196:	2104      	movs	r1, #4
1004c198:	430a      	orrs	r2, r1
1004c19a:	609a      	str	r2, [r3, #8]
}
1004c19c:	46c0      	nop			@ (mov r8, r8)
1004c19e:	46bd      	mov	sp, r7
1004c1a0:	b002      	add	sp, #8
1004c1a2:	bd80      	pop	{r7, pc}
1004c1a4:	48400000 	.word	0x48400000

1004c1a8 <LL_RCC_LSCO_SetSource>:
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSCO_SetSource(uint32_t Source)
{
1004c1a8:	b580      	push	{r7, lr}
1004c1aa:	b082      	sub	sp, #8
1004c1ac:	af00      	add	r7, sp, #0
1004c1ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004c1b0:	4b06      	ldr	r3, [pc, #24]	@ (1004c1cc <LL_RCC_LSCO_SetSource+0x24>)
1004c1b2:	689b      	ldr	r3, [r3, #8]
1004c1b4:	4a06      	ldr	r2, [pc, #24]	@ (1004c1d0 <LL_RCC_LSCO_SetSource+0x28>)
1004c1b6:	4013      	ands	r3, r2
1004c1b8:	0019      	movs	r1, r3
1004c1ba:	4b04      	ldr	r3, [pc, #16]	@ (1004c1cc <LL_RCC_LSCO_SetSource+0x24>)
1004c1bc:	687a      	ldr	r2, [r7, #4]
1004c1be:	430a      	orrs	r2, r1
1004c1c0:	609a      	str	r2, [r3, #8]
}
1004c1c2:	46c0      	nop			@ (mov r8, r8)
1004c1c4:	46bd      	mov	sp, r7
1004c1c6:	b002      	add	sp, #8
1004c1c8:	bd80      	pop	{r7, pc}
1004c1ca:	46c0      	nop			@ (mov r8, r8)
1004c1cc:	48400000 	.word	0x48400000
1004c1d0:	fffe7fff 	.word	0xfffe7fff

1004c1d4 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
1004c1d4:	b580      	push	{r7, lr}
1004c1d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEON);
1004c1d8:	4b04      	ldr	r3, [pc, #16]	@ (1004c1ec <LL_RCC_LSE_Enable+0x18>)
1004c1da:	681a      	ldr	r2, [r3, #0]
1004c1dc:	4b03      	ldr	r3, [pc, #12]	@ (1004c1ec <LL_RCC_LSE_Enable+0x18>)
1004c1de:	2110      	movs	r1, #16
1004c1e0:	430a      	orrs	r2, r1
1004c1e2:	601a      	str	r2, [r3, #0]
}
1004c1e4:	46c0      	nop			@ (mov r8, r8)
1004c1e6:	46bd      	mov	sp, r7
1004c1e8:	bd80      	pop	{r7, pc}
1004c1ea:	46c0      	nop			@ (mov r8, r8)
1004c1ec:	48400000 	.word	0x48400000

1004c1f0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll CR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
1004c1f0:	b580      	push	{r7, lr}
1004c1f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEON);
1004c1f4:	4b04      	ldr	r3, [pc, #16]	@ (1004c208 <LL_RCC_LSE_Disable+0x18>)
1004c1f6:	681a      	ldr	r2, [r3, #0]
1004c1f8:	4b03      	ldr	r3, [pc, #12]	@ (1004c208 <LL_RCC_LSE_Disable+0x18>)
1004c1fa:	2110      	movs	r1, #16
1004c1fc:	438a      	bics	r2, r1
1004c1fe:	601a      	str	r2, [r3, #0]
}
1004c200:	46c0      	nop			@ (mov r8, r8)
1004c202:	46bd      	mov	sp, r7
1004c204:	bd80      	pop	{r7, pc}
1004c206:	46c0      	nop			@ (mov r8, r8)
1004c208:	48400000 	.word	0x48400000

1004c20c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll CR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
1004c20c:	b580      	push	{r7, lr}
1004c20e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSERDY) == (RCC_CR_LSERDY)) ? 1UL : 0UL);
1004c210:	4b05      	ldr	r3, [pc, #20]	@ (1004c228 <LL_RCC_LSE_IsReady+0x1c>)
1004c212:	681b      	ldr	r3, [r3, #0]
1004c214:	2220      	movs	r2, #32
1004c216:	4013      	ands	r3, r2
1004c218:	2b20      	cmp	r3, #32
1004c21a:	d101      	bne.n	1004c220 <LL_RCC_LSE_IsReady+0x14>
1004c21c:	2301      	movs	r3, #1
1004c21e:	e000      	b.n	1004c222 <LL_RCC_LSE_IsReady+0x16>
1004c220:	2300      	movs	r3, #0
}
1004c222:	0018      	movs	r0, r3
1004c224:	46bd      	mov	sp, r7
1004c226:	bd80      	pop	{r7, pc}
1004c228:	48400000 	.word	0x48400000

1004c22c <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
1004c22c:	b580      	push	{r7, lr}
1004c22e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSEBYP);
1004c230:	4b04      	ldr	r3, [pc, #16]	@ (1004c244 <LL_RCC_LSE_EnableBypass+0x18>)
1004c232:	681a      	ldr	r2, [r3, #0]
1004c234:	4b03      	ldr	r3, [pc, #12]	@ (1004c244 <LL_RCC_LSE_EnableBypass+0x18>)
1004c236:	2140      	movs	r1, #64	@ 0x40
1004c238:	430a      	orrs	r2, r1
1004c23a:	601a      	str	r2, [r3, #0]
}
1004c23c:	46c0      	nop			@ (mov r8, r8)
1004c23e:	46bd      	mov	sp, r7
1004c240:	bd80      	pop	{r7, pc}
1004c242:	46c0      	nop			@ (mov r8, r8)
1004c244:	48400000 	.word	0x48400000

1004c248 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
1004c248:	b580      	push	{r7, lr}
1004c24a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSEBYP);
1004c24c:	4b04      	ldr	r3, [pc, #16]	@ (1004c260 <LL_RCC_LSE_DisableBypass+0x18>)
1004c24e:	681a      	ldr	r2, [r3, #0]
1004c250:	4b03      	ldr	r3, [pc, #12]	@ (1004c260 <LL_RCC_LSE_DisableBypass+0x18>)
1004c252:	2140      	movs	r1, #64	@ 0x40
1004c254:	438a      	bics	r2, r1
1004c256:	601a      	str	r2, [r3, #0]
}
1004c258:	46c0      	nop			@ (mov r8, r8)
1004c25a:	46bd      	mov	sp, r7
1004c25c:	bd80      	pop	{r7, pc}
1004c25e:	46c0      	nop			@ (mov r8, r8)
1004c260:	48400000 	.word	0x48400000

1004c264 <LL_RCC_LSE_IsBypassEnabled>:
  * @brief  Check if LSE bypass configuration is enabled.
  * @rmtoll CR         LSEBYP        LL_RCC_LSE_IsBypassEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsBypassEnabled(void)
{
1004c264:	b580      	push	{r7, lr}
1004c266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSEBYP) == (RCC_CR_LSEBYP)) ? 1UL : 0UL);
1004c268:	4b05      	ldr	r3, [pc, #20]	@ (1004c280 <LL_RCC_LSE_IsBypassEnabled+0x1c>)
1004c26a:	681b      	ldr	r3, [r3, #0]
1004c26c:	2240      	movs	r2, #64	@ 0x40
1004c26e:	4013      	ands	r3, r2
1004c270:	2b40      	cmp	r3, #64	@ 0x40
1004c272:	d101      	bne.n	1004c278 <LL_RCC_LSE_IsBypassEnabled+0x14>
1004c274:	2301      	movs	r3, #1
1004c276:	e000      	b.n	1004c27a <LL_RCC_LSE_IsBypassEnabled+0x16>
1004c278:	2300      	movs	r3, #0
}
1004c27a:	0018      	movs	r0, r3
1004c27c:	46bd      	mov	sp, r7
1004c27e:	bd80      	pop	{r7, pc}
1004c280:	48400000 	.word	0x48400000

1004c284 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
1004c284:	b580      	push	{r7, lr}
1004c286:	b082      	sub	sp, #8
1004c288:	af00      	add	r7, sp, #0
1004c28a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSSWCR, RCC_CSSWCR_LSEDRV, LSEDrive);
1004c28c:	4b06      	ldr	r3, [pc, #24]	@ (1004c2a8 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004c28e:	68db      	ldr	r3, [r3, #12]
1004c290:	2260      	movs	r2, #96	@ 0x60
1004c292:	4393      	bics	r3, r2
1004c294:	0019      	movs	r1, r3
1004c296:	4b04      	ldr	r3, [pc, #16]	@ (1004c2a8 <LL_RCC_LSE_SetDriveCapability+0x24>)
1004c298:	687a      	ldr	r2, [r7, #4]
1004c29a:	430a      	orrs	r2, r1
1004c29c:	60da      	str	r2, [r3, #12]
}
1004c29e:	46c0      	nop			@ (mov r8, r8)
1004c2a0:	46bd      	mov	sp, r7
1004c2a2:	b002      	add	sp, #8
1004c2a4:	bd80      	pop	{r7, pc}
1004c2a6:	46c0      	nop			@ (mov r8, r8)
1004c2a8:	48400000 	.word	0x48400000

1004c2ac <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
1004c2ac:	b580      	push	{r7, lr}
1004c2ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_LSION);
1004c2b0:	4b04      	ldr	r3, [pc, #16]	@ (1004c2c4 <LL_RCC_LSI_Enable+0x18>)
1004c2b2:	681a      	ldr	r2, [r3, #0]
1004c2b4:	4b03      	ldr	r3, [pc, #12]	@ (1004c2c4 <LL_RCC_LSI_Enable+0x18>)
1004c2b6:	2104      	movs	r1, #4
1004c2b8:	430a      	orrs	r2, r1
1004c2ba:	601a      	str	r2, [r3, #0]
}
1004c2bc:	46c0      	nop			@ (mov r8, r8)
1004c2be:	46bd      	mov	sp, r7
1004c2c0:	bd80      	pop	{r7, pc}
1004c2c2:	46c0      	nop			@ (mov r8, r8)
1004c2c4:	48400000 	.word	0x48400000

1004c2c8 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
1004c2c8:	b580      	push	{r7, lr}
1004c2ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_LSION);
1004c2cc:	4b04      	ldr	r3, [pc, #16]	@ (1004c2e0 <LL_RCC_LSI_Disable+0x18>)
1004c2ce:	681a      	ldr	r2, [r3, #0]
1004c2d0:	4b03      	ldr	r3, [pc, #12]	@ (1004c2e0 <LL_RCC_LSI_Disable+0x18>)
1004c2d2:	2104      	movs	r1, #4
1004c2d4:	438a      	bics	r2, r1
1004c2d6:	601a      	str	r2, [r3, #0]
}
1004c2d8:	46c0      	nop			@ (mov r8, r8)
1004c2da:	46bd      	mov	sp, r7
1004c2dc:	bd80      	pop	{r7, pc}
1004c2de:	46c0      	nop			@ (mov r8, r8)
1004c2e0:	48400000 	.word	0x48400000

1004c2e4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
1004c2e4:	b580      	push	{r7, lr}
1004c2e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_LSIRDY) == (RCC_CR_LSIRDY)) ? 1UL : 0UL);
1004c2e8:	4b05      	ldr	r3, [pc, #20]	@ (1004c300 <LL_RCC_LSI_IsReady+0x1c>)
1004c2ea:	681b      	ldr	r3, [r3, #0]
1004c2ec:	2208      	movs	r2, #8
1004c2ee:	4013      	ands	r3, r2
1004c2f0:	2b08      	cmp	r3, #8
1004c2f2:	d101      	bne.n	1004c2f8 <LL_RCC_LSI_IsReady+0x14>
1004c2f4:	2301      	movs	r3, #1
1004c2f6:	e000      	b.n	1004c2fa <LL_RCC_LSI_IsReady+0x16>
1004c2f8:	2300      	movs	r3, #0
}
1004c2fa:	0018      	movs	r0, r3
1004c2fc:	46bd      	mov	sp, r7
1004c2fe:	bd80      	pop	{r7, pc}
1004c300:	48400000 	.word	0x48400000

1004c304 <LL_RCC_RC64MPLL_Enable>:
  * @brief  Enable RC64MPLL
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Enable(void)
{
1004c304:	b580      	push	{r7, lr}
1004c306:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004c308:	4b04      	ldr	r3, [pc, #16]	@ (1004c31c <LL_RCC_RC64MPLL_Enable+0x18>)
1004c30a:	681a      	ldr	r2, [r3, #0]
1004c30c:	4b03      	ldr	r3, [pc, #12]	@ (1004c31c <LL_RCC_RC64MPLL_Enable+0x18>)
1004c30e:	2180      	movs	r1, #128	@ 0x80
1004c310:	0189      	lsls	r1, r1, #6
1004c312:	430a      	orrs	r2, r1
1004c314:	601a      	str	r2, [r3, #0]
}
1004c316:	46c0      	nop			@ (mov r8, r8)
1004c318:	46bd      	mov	sp, r7
1004c31a:	bd80      	pop	{r7, pc}
1004c31c:	48400000 	.word	0x48400000

1004c320 <LL_RCC_RC64MPLL_Disable>:
  * @note Cannot be disabled if the RC64MPLL clock is used as the system clock
  * @rmtoll CR           HSIPLLON         LL_RCC_RC64MPLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_RC64MPLL_Disable(void)
{
1004c320:	b580      	push	{r7, lr}
1004c322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSIPLLON);
1004c324:	4b04      	ldr	r3, [pc, #16]	@ (1004c338 <LL_RCC_RC64MPLL_Disable+0x18>)
1004c326:	681a      	ldr	r2, [r3, #0]
1004c328:	4b03      	ldr	r3, [pc, #12]	@ (1004c338 <LL_RCC_RC64MPLL_Disable+0x18>)
1004c32a:	4904      	ldr	r1, [pc, #16]	@ (1004c33c <LL_RCC_RC64MPLL_Disable+0x1c>)
1004c32c:	400a      	ands	r2, r1
1004c32e:	601a      	str	r2, [r3, #0]
}
1004c330:	46c0      	nop			@ (mov r8, r8)
1004c332:	46bd      	mov	sp, r7
1004c334:	bd80      	pop	{r7, pc}
1004c336:	46c0      	nop			@ (mov r8, r8)
1004c338:	48400000 	.word	0x48400000
1004c33c:	ffffdfff 	.word	0xffffdfff

1004c340 <LL_RCC_RC64MPLL_IsReady>:
  * @brief  Check if RC64MPLL is Ready
  * @rmtoll CR           HSIPLLRDY        LL_RCC_RC64MPLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_RC64MPLL_IsReady(void)
{
1004c340:	b580      	push	{r7, lr}
1004c342:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004c344:	4b07      	ldr	r3, [pc, #28]	@ (1004c364 <LL_RCC_RC64MPLL_IsReady+0x24>)
1004c346:	681a      	ldr	r2, [r3, #0]
1004c348:	2380      	movs	r3, #128	@ 0x80
1004c34a:	01db      	lsls	r3, r3, #7
1004c34c:	401a      	ands	r2, r3
1004c34e:	2380      	movs	r3, #128	@ 0x80
1004c350:	01db      	lsls	r3, r3, #7
1004c352:	429a      	cmp	r2, r3
1004c354:	d101      	bne.n	1004c35a <LL_RCC_RC64MPLL_IsReady+0x1a>
1004c356:	2301      	movs	r3, #1
1004c358:	e000      	b.n	1004c35c <LL_RCC_RC64MPLL_IsReady+0x1c>
1004c35a:	2300      	movs	r3, #0
}
1004c35c:	0018      	movs	r0, r3
1004c35e:	46bd      	mov	sp, r7
1004c360:	bd80      	pop	{r7, pc}
1004c362:	46c0      	nop			@ (mov r8, r8)
1004c364:	48400000 	.word	0x48400000

1004c368 <LL_RCC_SetRC64MPLLPrescaler>:
  *         @arg @ref LL_RCC_RC64MPLL_DIV_32
  *         @arg @ref LL_RCC_RC64MPLL_DIV_64
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRC64MPLLPrescaler(uint32_t Prescaler)
{
1004c368:	b580      	push	{r7, lr}
1004c36a:	b082      	sub	sp, #8
1004c36c:	af00      	add	r7, sp, #0
1004c36e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSYSDIV, Prescaler);
1004c370:	4b06      	ldr	r3, [pc, #24]	@ (1004c38c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004c372:	689b      	ldr	r3, [r3, #8]
1004c374:	22e0      	movs	r2, #224	@ 0xe0
1004c376:	4393      	bics	r3, r2
1004c378:	0019      	movs	r1, r3
1004c37a:	4b04      	ldr	r3, [pc, #16]	@ (1004c38c <LL_RCC_SetRC64MPLLPrescaler+0x24>)
1004c37c:	687a      	ldr	r2, [r7, #4]
1004c37e:	430a      	orrs	r2, r1
1004c380:	609a      	str	r2, [r3, #8]
}
1004c382:	46c0      	nop			@ (mov r8, r8)
1004c384:	46bd      	mov	sp, r7
1004c386:	b002      	add	sp, #8
1004c388:	bd80      	pop	{r7, pc}
1004c38a:	46c0      	nop			@ (mov r8, r8)
1004c38c:	48400000 	.word	0x48400000

1004c390 <HAL_RCC_OscConfig>:
  * @param  RCC_OscInitStruct  pointer to a @ref RCC_OscInitTypeDef structure that
  *         contains the configuration information for the RCC Oscillators.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
1004c390:	b580      	push	{r7, lr}
1004c392:	b084      	sub	sp, #16
1004c394:	af00      	add	r7, sp, #0
1004c396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
1004c398:	687b      	ldr	r3, [r7, #4]
1004c39a:	2b00      	cmp	r3, #0
1004c39c:	d101      	bne.n	1004c3a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
1004c39e:	2301      	movs	r3, #1
1004c3a0:	e13c      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSI Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
1004c3a2:	687b      	ldr	r3, [r7, #4]
1004c3a4:	681b      	ldr	r3, [r3, #0]
1004c3a6:	2210      	movs	r2, #16
1004c3a8:	4013      	ands	r3, r2
1004c3aa:	d033      	beq.n	1004c414 <HAL_RCC_OscConfig+0x84>
  {
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
1004c3ac:	687b      	ldr	r3, [r7, #4]
1004c3ae:	689b      	ldr	r3, [r3, #8]
1004c3b0:	2b00      	cmp	r3, #0
1004c3b2:	d102      	bne.n	1004c3ba <HAL_RCC_OscConfig+0x2a>
1004c3b4:	f7ff fe96 	bl	1004c0e4 <LL_RCC_HSI_Enable>
1004c3b8:	e001      	b.n	1004c3be <HAL_RCC_OscConfig+0x2e>
1004c3ba:	f7ff fea7 	bl	1004c10c <LL_RCC_HSI_Disable>

    if(RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
1004c3be:	687b      	ldr	r3, [r7, #4]
1004c3c0:	689b      	ldr	r3, [r3, #8]
1004c3c2:	2b04      	cmp	r3, #4
1004c3c4:	d113      	bne.n	1004c3ee <HAL_RCC_OscConfig+0x5e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c3c6:	f7fa fe79 	bl	100470bc <HAL_GetTick>
1004c3ca:	0003      	movs	r3, r0
1004c3cc:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is disabled */
      while (LL_RCC_HSI_IsReady() == 1U)
1004c3ce:	e008      	b.n	1004c3e2 <HAL_RCC_OscConfig+0x52>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004c3d0:	f7fa fe74 	bl	100470bc <HAL_GetTick>
1004c3d4:	0002      	movs	r2, r0
1004c3d6:	68fb      	ldr	r3, [r7, #12]
1004c3d8:	1ad3      	subs	r3, r2, r3
1004c3da:	2b64      	cmp	r3, #100	@ 0x64
1004c3dc:	d901      	bls.n	1004c3e2 <HAL_RCC_OscConfig+0x52>
        {
          return HAL_TIMEOUT;
1004c3de:	2303      	movs	r3, #3
1004c3e0:	e11c      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() == 1U)
1004c3e2:	f7ff fea7 	bl	1004c134 <LL_RCC_HSI_IsReady>
1004c3e6:	0003      	movs	r3, r0
1004c3e8:	2b01      	cmp	r3, #1
1004c3ea:	d0f1      	beq.n	1004c3d0 <HAL_RCC_OscConfig+0x40>
1004c3ec:	e012      	b.n	1004c414 <HAL_RCC_OscConfig+0x84>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c3ee:	f7fa fe65 	bl	100470bc <HAL_GetTick>
1004c3f2:	0003      	movs	r3, r0
1004c3f4:	60fb      	str	r3, [r7, #12]

      /* Wait till HSI is enabled */
      while (LL_RCC_HSI_IsReady() != 1U)
1004c3f6:	e008      	b.n	1004c40a <HAL_RCC_OscConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004c3f8:	f7fa fe60 	bl	100470bc <HAL_GetTick>
1004c3fc:	0002      	movs	r2, r0
1004c3fe:	68fb      	ldr	r3, [r7, #12]
1004c400:	1ad3      	subs	r3, r2, r3
1004c402:	2b64      	cmp	r3, #100	@ 0x64
1004c404:	d901      	bls.n	1004c40a <HAL_RCC_OscConfig+0x7a>
        {
          return HAL_TIMEOUT;
1004c406:	2303      	movs	r3, #3
1004c408:	e108      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSI_IsReady() != 1U)
1004c40a:	f7ff fe93 	bl	1004c134 <LL_RCC_HSI_IsReady>
1004c40e:	0003      	movs	r3, r0
1004c410:	2b01      	cmp	r3, #1
1004c412:	d1f1      	bne.n	1004c3f8 <HAL_RCC_OscConfig+0x68>
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
1004c414:	687b      	ldr	r3, [r7, #4]
1004c416:	681b      	ldr	r3, [r3, #0]
1004c418:	2201      	movs	r2, #1
1004c41a:	4013      	ands	r3, r2
1004c41c:	d039      	beq.n	1004c492 <HAL_RCC_OscConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* Set HSE Capacitor Tuning */
    LL_RCC_HSE_SetCapacitorTuning(CFG_HW_RCC_HSE_CAPACITOR_TUNE);
1004c41e:	2020      	movs	r0, #32
1004c420:	f7ff fe2a 	bl	1004c078 <LL_RCC_HSE_SetCapacitorTuning>

    /* Set HSE Current Control */
    LL_RCC_HSE_SetCurrentControl(LL_RCC_HSE_CURRENTMAX_3);
1004c424:	2030      	movs	r0, #48	@ 0x30
1004c426:	f7ff fe47 	bl	1004c0b8 <LL_RCC_HSE_SetCurrentControl>

    /* Set the new HSE configuration ---------------------------------------*/
    __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
1004c42a:	687b      	ldr	r3, [r7, #4]
1004c42c:	685a      	ldr	r2, [r3, #4]
1004c42e:	2380      	movs	r3, #128	@ 0x80
1004c430:	025b      	lsls	r3, r3, #9
1004c432:	429a      	cmp	r2, r3
1004c434:	d102      	bne.n	1004c43c <HAL_RCC_OscConfig+0xac>
1004c436:	f7ff fded 	bl	1004c014 <LL_RCC_HSE_Enable>
1004c43a:	e001      	b.n	1004c440 <HAL_RCC_OscConfig+0xb0>
1004c43c:	f7ff fdf8 	bl	1004c030 <LL_RCC_HSE_Disable>

    /* Check the HSE State */
    if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
1004c440:	687b      	ldr	r3, [r7, #4]
1004c442:	685b      	ldr	r3, [r3, #4]
1004c444:	2b00      	cmp	r3, #0
1004c446:	d012      	beq.n	1004c46e <HAL_RCC_OscConfig+0xde>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c448:	f7fa fe38 	bl	100470bc <HAL_GetTick>
1004c44c:	0003      	movs	r3, r0
1004c44e:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is ready */
      while (LL_RCC_HSE_IsReady() == 0U)
1004c450:	e008      	b.n	1004c464 <HAL_RCC_OscConfig+0xd4>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004c452:	f7fa fe33 	bl	100470bc <HAL_GetTick>
1004c456:	0002      	movs	r2, r0
1004c458:	68fb      	ldr	r3, [r7, #12]
1004c45a:	1ad3      	subs	r3, r2, r3
1004c45c:	2b64      	cmp	r3, #100	@ 0x64
1004c45e:	d901      	bls.n	1004c464 <HAL_RCC_OscConfig+0xd4>
        {
          return HAL_TIMEOUT;
1004c460:	2303      	movs	r3, #3
1004c462:	e0db      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() == 0U)
1004c464:	f7ff fdf4 	bl	1004c050 <LL_RCC_HSE_IsReady>
1004c468:	1e03      	subs	r3, r0, #0
1004c46a:	d0f2      	beq.n	1004c452 <HAL_RCC_OscConfig+0xc2>
1004c46c:	e011      	b.n	1004c492 <HAL_RCC_OscConfig+0x102>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c46e:	f7fa fe25 	bl	100470bc <HAL_GetTick>
1004c472:	0003      	movs	r3, r0
1004c474:	60fb      	str	r3, [r7, #12]

      /* Wait till HSE is disabled */
      while (LL_RCC_HSE_IsReady() != 0U)
1004c476:	e008      	b.n	1004c48a <HAL_RCC_OscConfig+0xfa>
      {
        if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1004c478:	f7fa fe20 	bl	100470bc <HAL_GetTick>
1004c47c:	0002      	movs	r2, r0
1004c47e:	68fb      	ldr	r3, [r7, #12]
1004c480:	1ad3      	subs	r3, r2, r3
1004c482:	2b64      	cmp	r3, #100	@ 0x64
1004c484:	d901      	bls.n	1004c48a <HAL_RCC_OscConfig+0xfa>
        {
          return HAL_TIMEOUT;
1004c486:	2303      	movs	r3, #3
1004c488:	e0c8      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_HSE_IsReady() != 0U)
1004c48a:	f7ff fde1 	bl	1004c050 <LL_RCC_HSE_IsReady>
1004c48e:	1e03      	subs	r3, r0, #0
1004c490:	d1f2      	bne.n	1004c478 <HAL_RCC_OscConfig+0xe8>
      }
    }
  }

  /*--------------------------------- LSI Configuration -----------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
1004c492:	687b      	ldr	r3, [r7, #4]
1004c494:	681b      	ldr	r3, [r3, #0]
1004c496:	2204      	movs	r2, #4
1004c498:	4013      	ands	r3, r2
1004c49a:	d03a      	beq.n	1004c512 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
1004c49c:	687b      	ldr	r3, [r7, #4]
1004c49e:	691b      	ldr	r3, [r3, #16]
1004c4a0:	2b00      	cmp	r3, #0
1004c4a2:	d022      	beq.n	1004c4ea <HAL_RCC_OscConfig+0x15a>
    {
      /* Disable the LSI */
      __HAL_RCC_LSI_DISABLE();
1004c4a4:	f7ff ff10 	bl	1004c2c8 <LL_RCC_LSI_Disable>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U);
1004c4a8:	46c0      	nop			@ (mov r8, r8)
1004c4aa:	f7ff ff1b 	bl	1004c2e4 <LL_RCC_LSI_IsReady>
1004c4ae:	1e03      	subs	r3, r0, #0
1004c4b0:	d1fb      	bne.n	1004c4aa <HAL_RCC_OscConfig+0x11a>

      /* Disable the LSE */
      __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004c4b2:	f7ff fe9d 	bl	1004c1f0 <LL_RCC_LSE_Disable>

      /* Configure the Low Speed Clock to LSI */
      LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSI);
1004c4b6:	2380      	movs	r3, #128	@ 0x80
1004c4b8:	025b      	lsls	r3, r3, #9
1004c4ba:	0018      	movs	r0, r3
1004c4bc:	f7ff fe74 	bl	1004c1a8 <LL_RCC_LSCO_SetSource>

      /*  Enable the Internal Low Speed oscillator (LSI)  */
      __HAL_RCC_LSI_ENABLE();
1004c4c0:	f7ff fef4 	bl	1004c2ac <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c4c4:	f7fa fdfa 	bl	100470bc <HAL_GetTick>
1004c4c8:	0003      	movs	r3, r0
1004c4ca:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004c4cc:	e008      	b.n	1004c4e0 <HAL_RCC_OscConfig+0x150>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004c4ce:	f7fa fdf5 	bl	100470bc <HAL_GetTick>
1004c4d2:	0002      	movs	r2, r0
1004c4d4:	68fb      	ldr	r3, [r7, #12]
1004c4d6:	1ad3      	subs	r3, r2, r3
1004c4d8:	2b02      	cmp	r3, #2
1004c4da:	d901      	bls.n	1004c4e0 <HAL_RCC_OscConfig+0x150>
        {
          return HAL_TIMEOUT;
1004c4dc:	2303      	movs	r3, #3
1004c4de:	e09d      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() == 0U)
1004c4e0:	f7ff ff00 	bl	1004c2e4 <LL_RCC_LSI_IsReady>
1004c4e4:	1e03      	subs	r3, r0, #0
1004c4e6:	d0f2      	beq.n	1004c4ce <HAL_RCC_OscConfig+0x13e>
1004c4e8:	e013      	b.n	1004c512 <HAL_RCC_OscConfig+0x182>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
1004c4ea:	f7ff feed 	bl	1004c2c8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c4ee:	f7fa fde5 	bl	100470bc <HAL_GetTick>
1004c4f2:	0003      	movs	r3, r0
1004c4f4:	60fb      	str	r3, [r7, #12]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004c4f6:	e008      	b.n	1004c50a <HAL_RCC_OscConfig+0x17a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
1004c4f8:	f7fa fde0 	bl	100470bc <HAL_GetTick>
1004c4fc:	0002      	movs	r2, r0
1004c4fe:	68fb      	ldr	r3, [r7, #12]
1004c500:	1ad3      	subs	r3, r2, r3
1004c502:	2b02      	cmp	r3, #2
1004c504:	d901      	bls.n	1004c50a <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
1004c506:	2303      	movs	r3, #3
1004c508:	e088      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSI_READYFLAG() != 0U)
1004c50a:	f7ff feeb 	bl	1004c2e4 <LL_RCC_LSI_IsReady>
1004c50e:	1e03      	subs	r3, r0, #0
1004c510:	d1f2      	bne.n	1004c4f8 <HAL_RCC_OscConfig+0x168>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
1004c512:	687b      	ldr	r3, [r7, #4]
1004c514:	681b      	ldr	r3, [r3, #0]
1004c516:	2202      	movs	r2, #2
1004c518:	4013      	ands	r3, r2
1004c51a:	d047      	beq.n	1004c5ac <HAL_RCC_OscConfig+0x21c>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Disable LSI */
    __HAL_RCC_LSI_DISABLE();
1004c51c:	f7ff fed4 	bl	1004c2c8 <LL_RCC_LSI_Disable>

    /* Disable LSE */
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
1004c520:	f7ff fe66 	bl	1004c1f0 <LL_RCC_LSE_Disable>
    while (__HAL_RCC_GET_LSE_READYFLAG() != 0);
1004c524:	46c0      	nop			@ (mov r8, r8)
1004c526:	f7ff fe71 	bl	1004c20c <LL_RCC_LSE_IsReady>
1004c52a:	1e03      	subs	r3, r0, #0
1004c52c:	d1fb      	bne.n	1004c526 <HAL_RCC_OscConfig+0x196>

    /* Configure the PB12 and PB13 in NO PULL mode */
    LL_PWR_SetNoPullB(LL_PWR_GPIO_BIT_12 |
1004c52e:	23c0      	movs	r3, #192	@ 0xc0
1004c530:	019b      	lsls	r3, r3, #6
1004c532:	0018      	movs	r0, r3
1004c534:	f7ff fd56 	bl	1004bfe4 <LL_PWR_SetNoPullB>
                      LL_PWR_GPIO_BIT_13);

    /* Configure the Low Speed Clock to LSE */
    LL_RCC_LSCO_SetSource(LL_RCC_LSCO_CLKSOURCE_LSE);
1004c538:	2380      	movs	r3, #128	@ 0x80
1004c53a:	021b      	lsls	r3, r3, #8
1004c53c:	0018      	movs	r0, r3
1004c53e:	f7ff fe33 	bl	1004c1a8 <LL_RCC_LSCO_SetSource>

    /* Set LSE oscillator drive capability */
    __HAL_RCC_LSEDRIVE_CONFIG(LSE_DRIVE_LEVEL);
1004c542:	2020      	movs	r0, #32
1004c544:	f7ff fe9e 	bl	1004c284 <LL_RCC_LSE_SetDriveCapability>


    /* Set the new LSE state */
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
1004c548:	687b      	ldr	r3, [r7, #4]
1004c54a:	68db      	ldr	r3, [r3, #12]
1004c54c:	2b10      	cmp	r3, #16
1004c54e:	d102      	bne.n	1004c556 <HAL_RCC_OscConfig+0x1c6>
1004c550:	f7ff fe40 	bl	1004c1d4 <LL_RCC_LSE_Enable>
1004c554:	e001      	b.n	1004c55a <HAL_RCC_OscConfig+0x1ca>
1004c556:	f7ff fe4b 	bl	1004c1f0 <LL_RCC_LSE_Disable>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
1004c55a:	687b      	ldr	r3, [r7, #4]
1004c55c:	68db      	ldr	r3, [r3, #12]
1004c55e:	2b00      	cmp	r3, #0
1004c560:	d012      	beq.n	1004c588 <HAL_RCC_OscConfig+0x1f8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c562:	f7fa fdab 	bl	100470bc <HAL_GetTick>
1004c566:	0003      	movs	r3, r0
1004c568:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004c56a:	e008      	b.n	1004c57e <HAL_RCC_OscConfig+0x1ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004c56c:	f7fa fda6 	bl	100470bc <HAL_GetTick>
1004c570:	0002      	movs	r2, r0
1004c572:	68fb      	ldr	r3, [r7, #12]
1004c574:	1ad3      	subs	r3, r2, r3
1004c576:	2b64      	cmp	r3, #100	@ 0x64
1004c578:	d901      	bls.n	1004c57e <HAL_RCC_OscConfig+0x1ee>
        {
          return HAL_TIMEOUT;
1004c57a:	2303      	movs	r3, #3
1004c57c:	e04e      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() == 0U)
1004c57e:	f7ff fe45 	bl	1004c20c <LL_RCC_LSE_IsReady>
1004c582:	1e03      	subs	r3, r0, #0
1004c584:	d0f2      	beq.n	1004c56c <HAL_RCC_OscConfig+0x1dc>
1004c586:	e011      	b.n	1004c5ac <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c588:	f7fa fd98 	bl	100470bc <HAL_GetTick>
1004c58c:	0003      	movs	r3, r0
1004c58e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004c590:	e008      	b.n	1004c5a4 <HAL_RCC_OscConfig+0x214>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004c592:	f7fa fd93 	bl	100470bc <HAL_GetTick>
1004c596:	0002      	movs	r2, r0
1004c598:	68fb      	ldr	r3, [r7, #12]
1004c59a:	1ad3      	subs	r3, r2, r3
1004c59c:	2b64      	cmp	r3, #100	@ 0x64
1004c59e:	d901      	bls.n	1004c5a4 <HAL_RCC_OscConfig+0x214>
        {
          return HAL_TIMEOUT;
1004c5a0:	2303      	movs	r3, #3
1004c5a2:	e03b      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (__HAL_RCC_GET_LSE_READYFLAG() != 0U)
1004c5a4:	f7ff fe32 	bl	1004c20c <LL_RCC_LSE_IsReady>
1004c5a8:	1e03      	subs	r3, r0, #0
1004c5aa:	d1f2      	bne.n	1004c592 <HAL_RCC_OscConfig+0x202>
      }
    }
  }

  /*------------------------------ LSE Bypass Configuration ------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE_BYPASS) == RCC_OSCILLATORTYPE_LSE_BYPASS)
1004c5ac:	687b      	ldr	r3, [r7, #4]
1004c5ae:	681b      	ldr	r3, [r3, #0]
1004c5b0:	2208      	movs	r2, #8
1004c5b2:	4013      	ands	r3, r2
1004c5b4:	d031      	beq.n	1004c61a <HAL_RCC_OscConfig+0x28a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE_BYPASS(RCC_OscInitStruct->LSEBYPASSState));

    /* Set the new LSE Bypass configuration -----------------------------------------*/
    __HAL_RCC_LSE_BYPASS_CONFIG(RCC_OscInitStruct->LSEBYPASSState);
1004c5b6:	687b      	ldr	r3, [r7, #4]
1004c5b8:	695b      	ldr	r3, [r3, #20]
1004c5ba:	2b40      	cmp	r3, #64	@ 0x40
1004c5bc:	d102      	bne.n	1004c5c4 <HAL_RCC_OscConfig+0x234>
1004c5be:	f7ff fe35 	bl	1004c22c <LL_RCC_LSE_EnableBypass>
1004c5c2:	e001      	b.n	1004c5c8 <HAL_RCC_OscConfig+0x238>
1004c5c4:	f7ff fe40 	bl	1004c248 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE Bypass State */
    if (RCC_OscInitStruct->LSEBYPASSState != RCC_LSE_OFF)
1004c5c8:	687b      	ldr	r3, [r7, #4]
1004c5ca:	695b      	ldr	r3, [r3, #20]
1004c5cc:	2b00      	cmp	r3, #0
1004c5ce:	d012      	beq.n	1004c5f6 <HAL_RCC_OscConfig+0x266>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c5d0:	f7fa fd74 	bl	100470bc <HAL_GetTick>
1004c5d4:	0003      	movs	r3, r0
1004c5d6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004c5d8:	e008      	b.n	1004c5ec <HAL_RCC_OscConfig+0x25c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004c5da:	f7fa fd6f 	bl	100470bc <HAL_GetTick>
1004c5de:	0002      	movs	r2, r0
1004c5e0:	68fb      	ldr	r3, [r7, #12]
1004c5e2:	1ad3      	subs	r3, r2, r3
1004c5e4:	2b64      	cmp	r3, #100	@ 0x64
1004c5e6:	d901      	bls.n	1004c5ec <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
1004c5e8:	2303      	movs	r3, #3
1004c5ea:	e017      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() == 0U)
1004c5ec:	f7ff fe3a 	bl	1004c264 <LL_RCC_LSE_IsBypassEnabled>
1004c5f0:	1e03      	subs	r3, r0, #0
1004c5f2:	d0f2      	beq.n	1004c5da <HAL_RCC_OscConfig+0x24a>
1004c5f4:	e011      	b.n	1004c61a <HAL_RCC_OscConfig+0x28a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1004c5f6:	f7fa fd61 	bl	100470bc <HAL_GetTick>
1004c5fa:	0003      	movs	r3, r0
1004c5fc:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004c5fe:	e008      	b.n	1004c612 <HAL_RCC_OscConfig+0x282>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
1004c600:	f7fa fd5c 	bl	100470bc <HAL_GetTick>
1004c604:	0002      	movs	r2, r0
1004c606:	68fb      	ldr	r3, [r7, #12]
1004c608:	1ad3      	subs	r3, r2, r3
1004c60a:	2b64      	cmp	r3, #100	@ 0x64
1004c60c:	d901      	bls.n	1004c612 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
1004c60e:	2303      	movs	r3, #3
1004c610:	e004      	b.n	1004c61c <HAL_RCC_OscConfig+0x28c>
      while (LL_RCC_LSE_IsBypassEnabled() != 0U)
1004c612:	f7ff fe27 	bl	1004c264 <LL_RCC_LSE_IsBypassEnabled>
1004c616:	1e03      	subs	r3, r0, #0
1004c618:	d1f2      	bne.n	1004c600 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }

  return HAL_OK;
1004c61a:	2300      	movs	r3, #0
}
1004c61c:	0018      	movs	r0, r3
1004c61e:	46bd      	mov	sp, r7
1004c620:	b004      	add	sp, #16
1004c622:	bd80      	pop	{r7, pc}

1004c624 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
1004c624:	b580      	push	{r7, lr}
1004c626:	b084      	sub	sp, #16
1004c628:	af00      	add	r7, sp, #0
1004c62a:	6078      	str	r0, [r7, #4]
1004c62c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
1004c62e:	687b      	ldr	r3, [r7, #4]
1004c630:	2b00      	cmp	r3, #0
1004c632:	d101      	bne.n	1004c638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
1004c634:	2301      	movs	r3, #1
1004c636:	e098      	b.n	1004c76a <HAL_RCC_ClockConfig+0x146>

  /* Check the parameters */
  assert_param(IS_FLASH_WAIT_STATES(FLatency));

  /* Set FALSH_WAIT_STATES_1 */
  __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004c638:	4b4e      	ldr	r3, [pc, #312]	@ (1004c774 <HAL_RCC_ClockConfig+0x150>)
1004c63a:	685b      	ldr	r3, [r3, #4]
1004c63c:	2230      	movs	r2, #48	@ 0x30
1004c63e:	4393      	bics	r3, r2
1004c640:	0019      	movs	r1, r3
1004c642:	4b4c      	ldr	r3, [pc, #304]	@ (1004c774 <HAL_RCC_ClockConfig+0x150>)
1004c644:	683a      	ldr	r2, [r7, #0]
1004c646:	430a      	orrs	r2, r1
1004c648:	605a      	str	r2, [r3, #4]
  /*------------------------- SYSCLK Configuration ---------------------------*/
  assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
  assert_param(IS_RCC_SYSCLK_DIVIDER(RCC_ClkInitStruct->SYSCLKDivider));

  /* HSI is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
1004c64a:	687b      	ldr	r3, [r7, #4]
1004c64c:	681b      	ldr	r3, [r3, #0]
1004c64e:	2b02      	cmp	r3, #2
1004c650:	d10e      	bne.n	1004c670 <HAL_RCC_ClockConfig+0x4c>
  {
    LL_RCC_HSI_Enable();
1004c652:	f7ff fd47 	bl	1004c0e4 <LL_RCC_HSI_Enable>
    
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004c656:	f7ff fd6d 	bl	1004c134 <LL_RCC_HSI_IsReady>
1004c65a:	1e03      	subs	r3, r0, #0
1004c65c:	d101      	bne.n	1004c662 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
1004c65e:	2301      	movs	r3, #1
1004c660:	e083      	b.n	1004c76a <HAL_RCC_ClockConfig+0x146>
    }

    /* Disable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_DISABLE();
1004c662:	f7ff fe5d 	bl	1004c320 <LL_RCC_RC64MPLL_Disable>
    
    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004c666:	687b      	ldr	r3, [r7, #4]
1004c668:	685b      	ldr	r3, [r3, #4]
1004c66a:	0018      	movs	r0, r3
1004c66c:	f7ff fe7c 	bl	1004c368 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* RC64MPLL is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_RC64MPLL)
1004c670:	687b      	ldr	r3, [r7, #4]
1004c672:	681b      	ldr	r3, [r3, #0]
1004c674:	2b00      	cmp	r3, #0
1004c676:	d124      	bne.n	1004c6c2 <HAL_RCC_ClockConfig+0x9e>
  {
    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() == 0U)
1004c678:	f7ff fd5c 	bl	1004c134 <LL_RCC_HSI_IsReady>
1004c67c:	1e03      	subs	r3, r0, #0
1004c67e:	d101      	bne.n	1004c684 <HAL_RCC_ClockConfig+0x60>
    {
      return HAL_ERROR;
1004c680:	2301      	movs	r3, #1
1004c682:	e072      	b.n	1004c76a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004c684:	f7ff fce4 	bl	1004c050 <LL_RCC_HSE_IsReady>
1004c688:	1e03      	subs	r3, r0, #0
1004c68a:	d101      	bne.n	1004c690 <HAL_RCC_ClockConfig+0x6c>
    {
      return HAL_ERROR;
1004c68c:	2301      	movs	r3, #1
1004c68e:	e06c      	b.n	1004c76a <HAL_RCC_ClockConfig+0x146>
    }

    /* Enable the RC64MPLL*/
    __HAL_RCC_RC64MPLL_ENABLE();
1004c690:	f7ff fe38 	bl	1004c304 <LL_RCC_RC64MPLL_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004c694:	f7fa fd12 	bl	100470bc <HAL_GetTick>
1004c698:	0003      	movs	r3, r0
1004c69a:	60fb      	str	r3, [r7, #12]

    /* Wait till RC64MPLL is ready */
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004c69c:	e008      	b.n	1004c6b0 <HAL_RCC_ClockConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1004c69e:	f7fa fd0d 	bl	100470bc <HAL_GetTick>
1004c6a2:	0002      	movs	r2, r0
1004c6a4:	68fb      	ldr	r3, [r7, #12]
1004c6a6:	1ad3      	subs	r3, r2, r3
1004c6a8:	2b02      	cmp	r3, #2
1004c6aa:	d901      	bls.n	1004c6b0 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_TIMEOUT;
1004c6ac:	2303      	movs	r3, #3
1004c6ae:	e05c      	b.n	1004c76a <HAL_RCC_ClockConfig+0x146>
    while (LL_RCC_RC64MPLL_IsReady() == 0)
1004c6b0:	f7ff fe46 	bl	1004c340 <LL_RCC_RC64MPLL_IsReady>
1004c6b4:	1e03      	subs	r3, r0, #0
1004c6b6:	d0f2      	beq.n	1004c69e <HAL_RCC_ClockConfig+0x7a>
      }
    }

    /* Configure the RC64MPLL multiplication factor */
    __HAL_RCC_RC64MPLL_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004c6b8:	687b      	ldr	r3, [r7, #4]
1004c6ba:	685b      	ldr	r3, [r3, #4]
1004c6bc:	0018      	movs	r0, r3
1004c6be:	f7ff fe53 	bl	1004c368 <LL_RCC_SetRC64MPLLPrescaler>
  }

  /* DIRECT_HSE is selected as System Clock Source */
  if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004c6c2:	687b      	ldr	r3, [r7, #4]
1004c6c4:	681b      	ldr	r3, [r3, #0]
1004c6c6:	2b01      	cmp	r3, #1
1004c6c8:	d117      	bne.n	1004c6fa <HAL_RCC_ClockConfig+0xd6>
  {
    /* Enable the DIRECT_HSE configuration */
    LL_RCC_DIRECT_HSE_Enable();
1004c6ca:	f7ff fd47 	bl	1004c15c <LL_RCC_DIRECT_HSE_Enable>

    /* Check the HSI ready flag */
    if (LL_RCC_HSI_IsReady() != 0U)
1004c6ce:	f7ff fd31 	bl	1004c134 <LL_RCC_HSI_IsReady>
1004c6d2:	1e03      	subs	r3, r0, #0
1004c6d4:	d001      	beq.n	1004c6da <HAL_RCC_ClockConfig+0xb6>
    {
      return HAL_ERROR;
1004c6d6:	2301      	movs	r3, #1
1004c6d8:	e047      	b.n	1004c76a <HAL_RCC_ClockConfig+0x146>
    }

    /* Check the HSE ready flag */
    if (LL_RCC_HSE_IsReady() == 0U)
1004c6da:	f7ff fcb9 	bl	1004c050 <LL_RCC_HSE_IsReady>
1004c6de:	1e03      	subs	r3, r0, #0
1004c6e0:	d101      	bne.n	1004c6e6 <HAL_RCC_ClockConfig+0xc2>
    {
      return HAL_ERROR;
1004c6e2:	2301      	movs	r3, #1
1004c6e4:	e041      	b.n	1004c76a <HAL_RCC_ClockConfig+0x146>
    }

    /* Configure the DIRECT_HSE multiplication factor */
    __HAL_RCC_DIRECT_HSE_PRESC_CONFIG(RCC_ClkInitStruct->SYSCLKDivider);
1004c6e6:	4b24      	ldr	r3, [pc, #144]	@ (1004c778 <HAL_RCC_ClockConfig+0x154>)
1004c6e8:	689b      	ldr	r3, [r3, #8]
1004c6ea:	22e0      	movs	r2, #224	@ 0xe0
1004c6ec:	4393      	bics	r3, r2
1004c6ee:	0019      	movs	r1, r3
1004c6f0:	687b      	ldr	r3, [r7, #4]
1004c6f2:	685a      	ldr	r2, [r3, #4]
1004c6f4:	4b20      	ldr	r3, [pc, #128]	@ (1004c778 <HAL_RCC_ClockConfig+0x154>)
1004c6f6:	430a      	orrs	r2, r1
1004c6f8:	609a      	str	r2, [r3, #8]
  /*----------------------- FLASH Latency Configuration ------------------------*/
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the FLASH clock */

  /* Setup flash wait states because according the system clock frequency */
  if (FLatency != __HAL_FLASH_GET_WAIT_STATES())
1004c6fa:	4b1e      	ldr	r3, [pc, #120]	@ (1004c774 <HAL_RCC_ClockConfig+0x150>)
1004c6fc:	685b      	ldr	r3, [r3, #4]
1004c6fe:	2230      	movs	r2, #48	@ 0x30
1004c700:	4013      	ands	r3, r2
1004c702:	683a      	ldr	r2, [r7, #0]
1004c704:	429a      	cmp	r2, r3
1004c706:	d01d      	beq.n	1004c744 <HAL_RCC_ClockConfig+0x120>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_CONFIG register */
    __HAL_FLASH_SET_WAIT_STATES(FLatency);
1004c708:	4b1a      	ldr	r3, [pc, #104]	@ (1004c774 <HAL_RCC_ClockConfig+0x150>)
1004c70a:	685b      	ldr	r3, [r3, #4]
1004c70c:	2230      	movs	r2, #48	@ 0x30
1004c70e:	4393      	bics	r3, r2
1004c710:	0019      	movs	r1, r3
1004c712:	4b18      	ldr	r3, [pc, #96]	@ (1004c774 <HAL_RCC_ClockConfig+0x150>)
1004c714:	683a      	ldr	r2, [r7, #0]
1004c716:	430a      	orrs	r2, r1
1004c718:	605a      	str	r2, [r3, #4]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1004c71a:	f7fa fccf 	bl	100470bc <HAL_GetTick>
1004c71e:	0003      	movs	r3, r0
1004c720:	60fb      	str	r3, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_CONFIG register */
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004c722:	e008      	b.n	1004c736 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
1004c724:	f7fa fcca 	bl	100470bc <HAL_GetTick>
1004c728:	0002      	movs	r2, r0
1004c72a:	68fb      	ldr	r3, [r7, #12]
1004c72c:	1ad3      	subs	r3, r2, r3
1004c72e:	2b02      	cmp	r3, #2
1004c730:	d901      	bls.n	1004c736 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
1004c732:	2303      	movs	r3, #3
1004c734:	e019      	b.n	1004c76a <HAL_RCC_ClockConfig+0x146>
    while (__HAL_FLASH_GET_WAIT_STATES() != FLatency)
1004c736:	4b0f      	ldr	r3, [pc, #60]	@ (1004c774 <HAL_RCC_ClockConfig+0x150>)
1004c738:	685b      	ldr	r3, [r3, #4]
1004c73a:	2230      	movs	r2, #48	@ 0x30
1004c73c:	4013      	ands	r3, r2
1004c73e:	683a      	ldr	r2, [r7, #0]
1004c740:	429a      	cmp	r2, r3
1004c742:	d1ef      	bne.n	1004c724 <HAL_RCC_ClockConfig+0x100>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  for (volatile int i = 0; i < 6; i++)
1004c744:	2300      	movs	r3, #0
1004c746:	60bb      	str	r3, [r7, #8]
1004c748:	e003      	b.n	1004c752 <HAL_RCC_ClockConfig+0x12e>
  {
    __asm("NOP");
1004c74a:	46c0      	nop			@ (mov r8, r8)
  for (volatile int i = 0; i < 6; i++)
1004c74c:	68bb      	ldr	r3, [r7, #8]
1004c74e:	3301      	adds	r3, #1
1004c750:	60bb      	str	r3, [r7, #8]
1004c752:	68bb      	ldr	r3, [r7, #8]
1004c754:	2b05      	cmp	r3, #5
1004c756:	ddf8      	ble.n	1004c74a <HAL_RCC_ClockConfig+0x126>
  }
  SystemCoreClockUpdate();
1004c758:	f7fa f968 	bl	10046a2c <SystemCoreClockUpdate>

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
1004c75c:	f7fa fcb8 	bl	100470d0 <HAL_GetTickPrio>
1004c760:	0003      	movs	r3, r0
1004c762:	0018      	movs	r0, r3
1004c764:	f7fa fc50 	bl	10047008 <HAL_InitTick>
1004c768:	0003      	movs	r3, r0
}
1004c76a:	0018      	movs	r0, r3
1004c76c:	46bd      	mov	sp, r7
1004c76e:	b004      	add	sp, #16
1004c770:	bd80      	pop	{r7, pc}
1004c772:	46c0      	nop			@ (mov r8, r8)
1004c774:	40001000 	.word	0x40001000
1004c778:	48400000 	.word	0x48400000

1004c77c <HAL_RCC_GetSysClockFreq>:
  *         content of the SystemCoreClock CMSIS variable
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
1004c77c:	b580      	push	{r7, lr}
1004c77e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
1004c780:	4b02      	ldr	r3, [pc, #8]	@ (1004c78c <HAL_RCC_GetSysClockFreq+0x10>)
1004c782:	681b      	ldr	r3, [r3, #0]
}
1004c784:	0018      	movs	r0, r3
1004c786:	46bd      	mov	sp, r7
1004c788:	bd80      	pop	{r7, pc}
1004c78a:	46c0      	nop			@ (mov r8, r8)
1004c78c:	20002cbc 	.word	0x20002cbc

1004c790 <LL_RCC_HSE_IsReady>:
{
1004c790:	b580      	push	{r7, lr}
1004c792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
1004c794:	4b07      	ldr	r3, [pc, #28]	@ (1004c7b4 <LL_RCC_HSE_IsReady+0x24>)
1004c796:	681a      	ldr	r2, [r3, #0]
1004c798:	2380      	movs	r3, #128	@ 0x80
1004c79a:	029b      	lsls	r3, r3, #10
1004c79c:	401a      	ands	r2, r3
1004c79e:	2380      	movs	r3, #128	@ 0x80
1004c7a0:	029b      	lsls	r3, r3, #10
1004c7a2:	429a      	cmp	r2, r3
1004c7a4:	d101      	bne.n	1004c7aa <LL_RCC_HSE_IsReady+0x1a>
1004c7a6:	2301      	movs	r3, #1
1004c7a8:	e000      	b.n	1004c7ac <LL_RCC_HSE_IsReady+0x1c>
1004c7aa:	2300      	movs	r3, #0
}
1004c7ac:	0018      	movs	r0, r3
1004c7ae:	46bd      	mov	sp, r7
1004c7b0:	bd80      	pop	{r7, pc}
1004c7b2:	46c0      	nop			@ (mov r8, r8)
1004c7b4:	48400000 	.word	0x48400000

1004c7b8 <LL_RCC_DIRECT_HSE_IsEnabled>:
{
1004c7b8:	b580      	push	{r7, lr}
1004c7ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HSESEL_STATUS) == (RCC_CFGR_HSESEL_STATUS)) ? 1UL : 0UL);
1004c7bc:	4b05      	ldr	r3, [pc, #20]	@ (1004c7d4 <LL_RCC_DIRECT_HSE_IsEnabled+0x1c>)
1004c7be:	689b      	ldr	r3, [r3, #8]
1004c7c0:	2208      	movs	r2, #8
1004c7c2:	4013      	ands	r3, r2
1004c7c4:	2b08      	cmp	r3, #8
1004c7c6:	d101      	bne.n	1004c7cc <LL_RCC_DIRECT_HSE_IsEnabled+0x14>
1004c7c8:	2301      	movs	r3, #1
1004c7ca:	e000      	b.n	1004c7ce <LL_RCC_DIRECT_HSE_IsEnabled+0x16>
1004c7cc:	2300      	movs	r3, #0
}
1004c7ce:	0018      	movs	r0, r3
1004c7d0:	46bd      	mov	sp, r7
1004c7d2:	bd80      	pop	{r7, pc}
1004c7d4:	48400000 	.word	0x48400000

1004c7d8 <LL_RCC_LSCO_SetSource>:
{
1004c7d8:	b580      	push	{r7, lr}
1004c7da:	b082      	sub	sp, #8
1004c7dc:	af00      	add	r7, sp, #0
1004c7de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_CLKSLOWSEL, Source);
1004c7e0:	4b06      	ldr	r3, [pc, #24]	@ (1004c7fc <LL_RCC_LSCO_SetSource+0x24>)
1004c7e2:	689b      	ldr	r3, [r3, #8]
1004c7e4:	4a06      	ldr	r2, [pc, #24]	@ (1004c800 <LL_RCC_LSCO_SetSource+0x28>)
1004c7e6:	4013      	ands	r3, r2
1004c7e8:	0019      	movs	r1, r3
1004c7ea:	4b04      	ldr	r3, [pc, #16]	@ (1004c7fc <LL_RCC_LSCO_SetSource+0x24>)
1004c7ec:	687a      	ldr	r2, [r7, #4]
1004c7ee:	430a      	orrs	r2, r1
1004c7f0:	609a      	str	r2, [r3, #8]
}
1004c7f2:	46c0      	nop			@ (mov r8, r8)
1004c7f4:	46bd      	mov	sp, r7
1004c7f6:	b002      	add	sp, #8
1004c7f8:	bd80      	pop	{r7, pc}
1004c7fa:	46c0      	nop			@ (mov r8, r8)
1004c7fc:	48400000 	.word	0x48400000
1004c800:	fffe7fff 	.word	0xfffe7fff

1004c804 <LL_RCC_LSCO_GetSource>:
{
1004c804:	b580      	push	{r7, lr}
1004c806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_CLKSLOWSEL));
1004c808:	4b03      	ldr	r3, [pc, #12]	@ (1004c818 <LL_RCC_LSCO_GetSource+0x14>)
1004c80a:	689a      	ldr	r2, [r3, #8]
1004c80c:	23c0      	movs	r3, #192	@ 0xc0
1004c80e:	025b      	lsls	r3, r3, #9
1004c810:	4013      	ands	r3, r2
}
1004c812:	0018      	movs	r0, r3
1004c814:	46bd      	mov	sp, r7
1004c816:	bd80      	pop	{r7, pc}
1004c818:	48400000 	.word	0x48400000

1004c81c <LL_RCC_SetRFClock>:
{
1004c81c:	b580      	push	{r7, lr}
1004c81e:	b082      	sub	sp, #8
1004c820:	af00      	add	r7, sp, #0
1004c822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV, Source);
1004c824:	4b06      	ldr	r3, [pc, #24]	@ (1004c840 <LL_RCC_SetRFClock+0x24>)
1004c826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004c828:	2204      	movs	r2, #4
1004c82a:	4393      	bics	r3, r2
1004c82c:	0019      	movs	r1, r3
1004c82e:	4b04      	ldr	r3, [pc, #16]	@ (1004c840 <LL_RCC_SetRFClock+0x24>)
1004c830:	687a      	ldr	r2, [r7, #4]
1004c832:	430a      	orrs	r2, r1
1004c834:	661a      	str	r2, [r3, #96]	@ 0x60
}
1004c836:	46c0      	nop			@ (mov r8, r8)
1004c838:	46bd      	mov	sp, r7
1004c83a:	b002      	add	sp, #8
1004c83c:	bd80      	pop	{r7, pc}
1004c83e:	46c0      	nop			@ (mov r8, r8)
1004c840:	48400000 	.word	0x48400000

1004c844 <LL_RCC_GetRFClock>:
{
1004c844:	b580      	push	{r7, lr}
1004c846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->APB2ENR, RCC_APB2ENR_CLKBLEDIV));
1004c848:	4b03      	ldr	r3, [pc, #12]	@ (1004c858 <LL_RCC_GetRFClock+0x14>)
1004c84a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004c84c:	2204      	movs	r2, #4
1004c84e:	4013      	ands	r3, r2
}
1004c850:	0018      	movs	r0, r3
1004c852:	46bd      	mov	sp, r7
1004c854:	bd80      	pop	{r7, pc}
1004c856:	46c0      	nop			@ (mov r8, r8)
1004c858:	48400000 	.word	0x48400000

1004c85c <LL_RCC_SetSMPSPrescaler>:
{
1004c85c:	b580      	push	{r7, lr}
1004c85e:	b082      	sub	sp, #8
1004c860:	af00      	add	r7, sp, #0
1004c862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SMPSDIV, Prescaler);
1004c864:	4b06      	ldr	r3, [pc, #24]	@ (1004c880 <LL_RCC_SetSMPSPrescaler+0x24>)
1004c866:	689b      	ldr	r3, [r3, #8]
1004c868:	4a06      	ldr	r2, [pc, #24]	@ (1004c884 <LL_RCC_SetSMPSPrescaler+0x28>)
1004c86a:	4013      	ands	r3, r2
1004c86c:	0019      	movs	r1, r3
1004c86e:	4b04      	ldr	r3, [pc, #16]	@ (1004c880 <LL_RCC_SetSMPSPrescaler+0x24>)
1004c870:	687a      	ldr	r2, [r7, #4]
1004c872:	430a      	orrs	r2, r1
1004c874:	609a      	str	r2, [r3, #8]
}
1004c876:	46c0      	nop			@ (mov r8, r8)
1004c878:	46bd      	mov	sp, r7
1004c87a:	b002      	add	sp, #8
1004c87c:	bd80      	pop	{r7, pc}
1004c87e:	46c0      	nop			@ (mov r8, r8)
1004c880:	48400000 	.word	0x48400000
1004c884:	ffffefff 	.word	0xffffefff

1004c888 <LL_RCC_GetSMPSPrescaler>:
{
1004c888:	b580      	push	{r7, lr}
1004c88a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SMPSDIV));
1004c88c:	4b03      	ldr	r3, [pc, #12]	@ (1004c89c <LL_RCC_GetSMPSPrescaler+0x14>)
1004c88e:	689a      	ldr	r2, [r3, #8]
1004c890:	2380      	movs	r3, #128	@ 0x80
1004c892:	015b      	lsls	r3, r3, #5
1004c894:	4013      	ands	r3, r2
}
1004c896:	0018      	movs	r0, r3
1004c898:	46bd      	mov	sp, r7
1004c89a:	bd80      	pop	{r7, pc}
1004c89c:	48400000 	.word	0x48400000

1004c8a0 <LL_RCC_SetLPUARTClockSource>:
{
1004c8a0:	b580      	push	{r7, lr}
1004c8a2:	b082      	sub	sp, #8
1004c8a4:	af00      	add	r7, sp, #0
1004c8a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_LPUCLKSEL, Source);
1004c8a8:	4b06      	ldr	r3, [pc, #24]	@ (1004c8c4 <LL_RCC_SetLPUARTClockSource+0x24>)
1004c8aa:	689b      	ldr	r3, [r3, #8]
1004c8ac:	4a06      	ldr	r2, [pc, #24]	@ (1004c8c8 <LL_RCC_SetLPUARTClockSource+0x28>)
1004c8ae:	4013      	ands	r3, r2
1004c8b0:	0019      	movs	r1, r3
1004c8b2:	4b04      	ldr	r3, [pc, #16]	@ (1004c8c4 <LL_RCC_SetLPUARTClockSource+0x24>)
1004c8b4:	687a      	ldr	r2, [r7, #4]
1004c8b6:	430a      	orrs	r2, r1
1004c8b8:	609a      	str	r2, [r3, #8]
}
1004c8ba:	46c0      	nop			@ (mov r8, r8)
1004c8bc:	46bd      	mov	sp, r7
1004c8be:	b002      	add	sp, #8
1004c8c0:	bd80      	pop	{r7, pc}
1004c8c2:	46c0      	nop			@ (mov r8, r8)
1004c8c4:	48400000 	.word	0x48400000
1004c8c8:	ffffdfff 	.word	0xffffdfff

1004c8cc <LL_RCC_GetLPUARTClockSource>:
{
1004c8cc:	b580      	push	{r7, lr}
1004c8ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_LPUCLKSEL));
1004c8d0:	4b03      	ldr	r3, [pc, #12]	@ (1004c8e0 <LL_RCC_GetLPUARTClockSource+0x14>)
1004c8d2:	689a      	ldr	r2, [r3, #8]
1004c8d4:	2380      	movs	r3, #128	@ 0x80
1004c8d6:	019b      	lsls	r3, r3, #6
1004c8d8:	4013      	ands	r3, r2
}
1004c8da:	0018      	movs	r0, r3
1004c8dc:	46bd      	mov	sp, r7
1004c8de:	bd80      	pop	{r7, pc}
1004c8e0:	48400000 	.word	0x48400000

1004c8e4 <LL_RCC_SetSPI3I2SClockSource>:
{
1004c8e4:	b580      	push	{r7, lr}
1004c8e6:	b082      	sub	sp, #8
1004c8e8:	af00      	add	r7, sp, #0
1004c8ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL, Source);
1004c8ec:	4b06      	ldr	r3, [pc, #24]	@ (1004c908 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004c8ee:	689b      	ldr	r3, [r3, #8]
1004c8f0:	4a06      	ldr	r2, [pc, #24]	@ (1004c90c <LL_RCC_SetSPI3I2SClockSource+0x28>)
1004c8f2:	4013      	ands	r3, r2
1004c8f4:	0019      	movs	r1, r3
1004c8f6:	4b04      	ldr	r3, [pc, #16]	@ (1004c908 <LL_RCC_SetSPI3I2SClockSource+0x24>)
1004c8f8:	687a      	ldr	r2, [r7, #4]
1004c8fa:	430a      	orrs	r2, r1
1004c8fc:	609a      	str	r2, [r3, #8]
}
1004c8fe:	46c0      	nop			@ (mov r8, r8)
1004c900:	46bd      	mov	sp, r7
1004c902:	b002      	add	sp, #8
1004c904:	bd80      	pop	{r7, pc}
1004c906:	46c0      	nop			@ (mov r8, r8)
1004c908:	48400000 	.word	0x48400000
1004c90c:	ff3fffff 	.word	0xff3fffff

1004c910 <LL_RCC_GetSPI3I2SClockSource>:
{
1004c910:	b580      	push	{r7, lr}
1004c912:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SPI3I2SCLKSEL));
1004c914:	4b03      	ldr	r3, [pc, #12]	@ (1004c924 <LL_RCC_GetSPI3I2SClockSource+0x14>)
1004c916:	689a      	ldr	r2, [r3, #8]
1004c918:	23c0      	movs	r3, #192	@ 0xc0
1004c91a:	041b      	lsls	r3, r3, #16
1004c91c:	4013      	ands	r3, r2
}
1004c91e:	0018      	movs	r0, r3
1004c920:	46bd      	mov	sp, r7
1004c922:	bd80      	pop	{r7, pc}
1004c924:	48400000 	.word	0x48400000

1004c928 <LL_RCC_RC64MPLL_IsReady>:
{
1004c928:	b580      	push	{r7, lr}
1004c92a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIPLLRDY) == (RCC_CR_HSIPLLRDY)) ? 1UL : 0UL);
1004c92c:	4b07      	ldr	r3, [pc, #28]	@ (1004c94c <LL_RCC_RC64MPLL_IsReady+0x24>)
1004c92e:	681a      	ldr	r2, [r3, #0]
1004c930:	2380      	movs	r3, #128	@ 0x80
1004c932:	01db      	lsls	r3, r3, #7
1004c934:	401a      	ands	r2, r3
1004c936:	2380      	movs	r3, #128	@ 0x80
1004c938:	01db      	lsls	r3, r3, #7
1004c93a:	429a      	cmp	r2, r3
1004c93c:	d101      	bne.n	1004c942 <LL_RCC_RC64MPLL_IsReady+0x1a>
1004c93e:	2301      	movs	r3, #1
1004c940:	e000      	b.n	1004c944 <LL_RCC_RC64MPLL_IsReady+0x1c>
1004c942:	2300      	movs	r3, #0
}
1004c944:	0018      	movs	r0, r3
1004c946:	46bd      	mov	sp, r7
1004c948:	bd80      	pop	{r7, pc}
1004c94a:	46c0      	nop			@ (mov r8, r8)
1004c94c:	48400000 	.word	0x48400000

1004c950 <HAL_RCCEx_PeriphCLKConfig>:
  *  @note   (*) Peripherals are not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
1004c950:	b580      	push	{r7, lr}
1004c952:	b082      	sub	sp, #8
1004c954:	af00      	add	r7, sp, #0
1004c956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RF_BLE clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RF) == RCC_PERIPHCLK_RF))
1004c958:	687b      	ldr	r3, [r7, #4]
1004c95a:	681b      	ldr	r3, [r3, #0]
1004c95c:	2201      	movs	r2, #1
1004c95e:	4013      	ands	r3, r2
1004c960:	d004      	beq.n	1004c96c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  {
    assert_param(IS_RCC_RF_BLE_CLOCK_SOURCE(PeriphClkInit->RFClockSelection));
    __HAL_RCC_RF_CLK_SET_CONFIG(PeriphClkInit->RFClockSelection);
1004c962:	687b      	ldr	r3, [r7, #4]
1004c964:	691b      	ldr	r3, [r3, #16]
1004c966:	0018      	movs	r0, r3
1004c968:	f7ff ff58 	bl	1004c81c <LL_RCC_SetRFClock>
  }

  /*-------------------------- SMPS clock configuration -------------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS))
1004c96c:	687b      	ldr	r3, [r7, #4]
1004c96e:	681b      	ldr	r3, [r3, #0]
1004c970:	2202      	movs	r2, #2
1004c972:	4013      	ands	r3, r2
1004c974:	d004      	beq.n	1004c980 <HAL_RCCEx_PeriphCLKConfig+0x30>
  {
    assert_param(IS_RCC_SMPS_CLOCK_PRESC(PeriphClkInit->SmpsDivSelection));
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
1004c976:	687b      	ldr	r3, [r7, #4]
1004c978:	695b      	ldr	r3, [r3, #20]
1004c97a:	0018      	movs	r0, r3
1004c97c:	f7ff ff6e 	bl	1004c85c <LL_RCC_SetSMPSPrescaler>
    __HAL_RCC_SPI2I2S_CLK_CONFIG(PeriphClkInit->SPI2I2SClockSelection);
  }
#endif
#if defined(SPI3)
  /*-------------------------- SPI3_I2S clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3_I2S) == RCC_PERIPHCLK_SPI3_I2S))
1004c980:	687b      	ldr	r3, [r7, #4]
1004c982:	681b      	ldr	r3, [r3, #0]
1004c984:	2208      	movs	r2, #8
1004c986:	4013      	ands	r3, r2
1004c988:	d004      	beq.n	1004c994 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    assert_param(IS_RCC_SPI3I2S_CLOCK_SOURCE(PeriphClkInit->SPI3I2SClockSelection));
    __HAL_RCC_SPI3I2S_CLK_CONFIG(PeriphClkInit->SPI3I2SClockSelection);
1004c98a:	687b      	ldr	r3, [r7, #4]
1004c98c:	685b      	ldr	r3, [r3, #4]
1004c98e:	0018      	movs	r0, r3
1004c990:	f7ff ffa8 	bl	1004c8e4 <LL_RCC_SetSPI3I2SClockSource>
  }
#endif

#if defined(RCC_CFGR_LPUCLKSEL)
  /*-------------------------- LPUART1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1))
1004c994:	687b      	ldr	r3, [r7, #4]
1004c996:	681b      	ldr	r3, [r3, #0]
1004c998:	2210      	movs	r2, #16
1004c99a:	4013      	ands	r3, r2
1004c99c:	d004      	beq.n	1004c9a8 <HAL_RCCEx_PeriphCLKConfig+0x58>
  {
    assert_param(IS_RCC_LPUART1_CLOCK_SOURCE(PeriphClkInit->LPUART1ClockSelection));
    __HAL_RCC_LPUART1_CLK_CONFIG(PeriphClkInit->LPUART1ClockSelection);
1004c99e:	687b      	ldr	r3, [r7, #4]
1004c9a0:	68db      	ldr	r3, [r3, #12]
1004c9a2:	0018      	movs	r0, r3
1004c9a4:	f7ff ff7c 	bl	1004c8a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* RCC_CFGR_LPUCLKSEL */

  /*-------------------------- RTC WDG BLEWKUP clock source configuration ---------------------*/
  if ((((PeriphClkInit->RTCWDGBLEWKUPClockSelection) & RCC_PERIPHCLK_RTC_WDG_BLEWKUP) == RCC_PERIPHCLK_RTC_WDG_BLEWKUP))
1004c9a8:	687b      	ldr	r3, [r7, #4]
1004c9aa:	689b      	ldr	r3, [r3, #8]
1004c9ac:	2220      	movs	r2, #32
1004c9ae:	4013      	ands	r3, r2
1004c9b0:	d004      	beq.n	1004c9bc <HAL_RCCEx_PeriphCLKConfig+0x6c>
  {
    assert_param(IS_RCC_RTC_WDG_BLEWKUP_CLOCK_SOURCE(PeriphClkInit->RTCWDGBLEWKUPClockSelection));
    __HAL_RCC_RTC_WDG_BLEWKUP_CLK_CONFIG(PeriphClkInit->RTCWDGBLEWKUPClockSelection);
1004c9b2:	687b      	ldr	r3, [r7, #4]
1004c9b4:	689b      	ldr	r3, [r3, #8]
1004c9b6:	0018      	movs	r0, r3
1004c9b8:	f7ff ff0e 	bl	1004c7d8 <LL_RCC_LSCO_SetSource>
  }

  return HAL_OK;
1004c9bc:	2300      	movs	r3, #0
}
1004c9be:	0018      	movs	r0, r3
1004c9c0:	46bd      	mov	sp, r7
1004c9c2:	b002      	add	sp, #8
1004c9c4:	bd80      	pop	{r7, pc}
	...

1004c9c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_RTC_WDG_BLEWKUP   RTC, WDG and BLEWKUP peripheral clock
  * @retval Frequency in Hz
  * @note   (*) Peripherals are not available on all devices
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
1004c9c8:	b580      	push	{r7, lr}
1004c9ca:	b084      	sub	sp, #16
1004c9cc:	af00      	add	r7, sp, #0
1004c9ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  /* No if clausule is covered */
  frequency = 0;
1004c9d0:	2300      	movs	r3, #0
1004c9d2:	60fb      	str	r3, [r7, #12]

  switch (PeriphClk)
1004c9d4:	687b      	ldr	r3, [r7, #4]
1004c9d6:	2b20      	cmp	r3, #32
1004c9d8:	d900      	bls.n	1004c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x14>
1004c9da:	e07b      	b.n	1004cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
1004c9dc:	687b      	ldr	r3, [r7, #4]
1004c9de:	009a      	lsls	r2, r3, #2
1004c9e0:	4b40      	ldr	r3, [pc, #256]	@ (1004cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>)
1004c9e2:	18d3      	adds	r3, r2, r3
1004c9e4:	681b      	ldr	r3, [r3, #0]
1004c9e6:	469f      	mov	pc, r3
  {
    case RCC_PERIPHCLK_RF :
      switch (__HAL_RCC_RF_CLK_GET_CONFIG())
1004c9e8:	f7ff ff2c 	bl	1004c844 <LL_RCC_GetRFClock>
1004c9ec:	1e03      	subs	r3, r0, #0
1004c9ee:	d002      	beq.n	1004c9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
1004c9f0:	2b04      	cmp	r3, #4
1004c9f2:	d003      	beq.n	1004c9fc <HAL_RCCEx_GetPeriphCLKFreq+0x34>
        case RCC_RF_CLK_16M:
          frequency = HSE_VALUE / 2;
          break;
      }

      break;
1004c9f4:	e071      	b.n	1004cada <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE;
1004c9f6:	4b3c      	ldr	r3, [pc, #240]	@ (1004cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004c9f8:	60fb      	str	r3, [r7, #12]
          break;
1004c9fa:	e002      	b.n	1004ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
          frequency = HSE_VALUE / 2;
1004c9fc:	4b3b      	ldr	r3, [pc, #236]	@ (1004caec <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004c9fe:	60fb      	str	r3, [r7, #12]
          break;
1004ca00:	46c0      	nop			@ (mov r8, r8)
      break;
1004ca02:	e06a      	b.n	1004cada <HAL_RCCEx_GetPeriphCLKFreq+0x112>

    case RCC_PERIPHCLK_SMPS :
      switch (__HAL_RCC_GET_SMPS_DIV())
1004ca04:	f7ff ff40 	bl	1004c888 <LL_RCC_GetSMPSPrescaler>
1004ca08:	1e03      	subs	r3, r0, #0
1004ca0a:	d004      	beq.n	1004ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
1004ca0c:	2280      	movs	r2, #128	@ 0x80
1004ca0e:	0152      	lsls	r2, r2, #5
1004ca10:	4293      	cmp	r3, r2
1004ca12:	d003      	beq.n	1004ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x54>
          break;
        case RCC_SMPSCLK_DIV4:
          frequency = HSE_VALUE / 8;
          break;
      }
      break;
1004ca14:	e061      	b.n	1004cada <HAL_RCCEx_GetPeriphCLKFreq+0x112>
          frequency = HSE_VALUE / 4;
1004ca16:	4b36      	ldr	r3, [pc, #216]	@ (1004caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
1004ca18:	60fb      	str	r3, [r7, #12]
          break;
1004ca1a:	e002      	b.n	1004ca22 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          frequency = HSE_VALUE / 8;
1004ca1c:	4b35      	ldr	r3, [pc, #212]	@ (1004caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
1004ca1e:	60fb      	str	r3, [r7, #12]
          break;
1004ca20:	46c0      	nop			@ (mov r8, r8)
      break;
1004ca22:	e05a      	b.n	1004cada <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      }
      break;
#endif

    case RCC_PERIPHCLK_SPI3_I2S :
      if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_DIRECT_HSE)
1004ca24:	f7ff fec8 	bl	1004c7b8 <LL_RCC_DIRECT_HSE_IsEnabled>
1004ca28:	1e03      	subs	r3, r0, #0
1004ca2a:	d005      	beq.n	1004ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
      {
        if (__HAL_RCC_GET_HSE_READYFLAG() == 0)
1004ca2c:	f7ff feb0 	bl	1004c790 <LL_RCC_HSE_IsReady>
1004ca30:	1e03      	subs	r3, r0, #0
1004ca32:	d107      	bne.n	1004ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004ca34:	2300      	movs	r3, #0
1004ca36:	e051      	b.n	1004cadc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      else
      {
        if (__HAL_RCC_RC64MPLL_READYFLAG() == 0)
1004ca38:	f7ff ff76 	bl	1004c928 <LL_RCC_RC64MPLL_IsReady>
1004ca3c:	1e03      	subs	r3, r0, #0
1004ca3e:	d101      	bne.n	1004ca44 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        {
          return 0;
1004ca40:	2300      	movs	r3, #0
1004ca42:	e04b      	b.n	1004cadc <HAL_RCCEx_GetPeriphCLKFreq+0x114>
        }
      }
      spiFreqValue = __HAL_RCC_GET_SPI3I2S_CLK_CONFIG();
1004ca44:	f7ff ff64 	bl	1004c910 <LL_RCC_GetSPI3I2SClockSource>
1004ca48:	0003      	movs	r3, r0
1004ca4a:	60bb      	str	r3, [r7, #8]
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_16M)
1004ca4c:	68bb      	ldr	r3, [r7, #8]
1004ca4e:	2b00      	cmp	r3, #0
1004ca50:	d101      	bne.n	1004ca56 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
      {
        frequency = HSE_VALUE / 2;
1004ca52:	4b26      	ldr	r3, [pc, #152]	@ (1004caec <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004ca54:	60fb      	str	r3, [r7, #12]
      }

      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_32M)
1004ca56:	68ba      	ldr	r2, [r7, #8]
1004ca58:	2380      	movs	r3, #128	@ 0x80
1004ca5a:	03db      	lsls	r3, r3, #15
1004ca5c:	429a      	cmp	r2, r3
1004ca5e:	d101      	bne.n	1004ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      {
        frequency = HSE_VALUE;
1004ca60:	4b21      	ldr	r3, [pc, #132]	@ (1004cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>)
1004ca62:	60fb      	str	r3, [r7, #12]
      }
#if defined(RCC_SPI3I2S_CLKSOURCE_64M)
      if (spiFreqValue == RCC_SPI3I2S_CLKSOURCE_64M)
1004ca64:	68ba      	ldr	r2, [r7, #8]
1004ca66:	2380      	movs	r3, #128	@ 0x80
1004ca68:	041b      	lsls	r3, r3, #16
1004ca6a:	429a      	cmp	r2, r3
1004ca6c:	d134      	bne.n	1004cad8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
      {
        frequency = HSE_VALUE * 2;
1004ca6e:	4b22      	ldr	r3, [pc, #136]	@ (1004caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
1004ca70:	60fb      	str	r3, [r7, #12]
      }
#endif
      break;
1004ca72:	e031      	b.n	1004cad8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>

#if defined(RCC_CFGR_LPUCLKSEL)
    case RCC_PERIPHCLK_LPUART1 :
      switch (__HAL_RCC_GET_LPUART1_CLK_CONFIG())
1004ca74:	f7ff ff2a 	bl	1004c8cc <LL_RCC_GetLPUARTClockSource>
1004ca78:	0002      	movs	r2, r0
1004ca7a:	2380      	movs	r3, #128	@ 0x80
1004ca7c:	019b      	lsls	r3, r3, #6
1004ca7e:	429a      	cmp	r2, r3
1004ca80:	d103      	bne.n	1004ca8a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      {
        case RCC_LPUART1_CLKSOURCE_LSE:
          frequency = LSE_VALUE;
1004ca82:	2380      	movs	r3, #128	@ 0x80
1004ca84:	021b      	lsls	r3, r3, #8
1004ca86:	60fb      	str	r3, [r7, #12]
          break;
1004ca88:	e002      	b.n	1004ca90 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
        case RCC_LPUART1_CLKSOURCE_16M:
        default:
          frequency = HSE_VALUE / 2;
1004ca8a:	4b18      	ldr	r3, [pc, #96]	@ (1004caec <HAL_RCCEx_GetPeriphCLKFreq+0x124>)
1004ca8c:	60fb      	str	r3, [r7, #12]
          break;
1004ca8e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004ca90:	e023      	b.n	1004cada <HAL_RCCEx_GetPeriphCLKFreq+0x112>
#endif /* RCC_CFGR_LPUCLKSEL */

    case RCC_PERIPHCLK_RTC_WDG_BLEWKUP :
      switch (LL_RCC_LSCO_GetSource())
1004ca92:	f7ff feb7 	bl	1004c804 <LL_RCC_LSCO_GetSource>
1004ca96:	0003      	movs	r3, r0
1004ca98:	22c0      	movs	r2, #192	@ 0xc0
1004ca9a:	0252      	lsls	r2, r2, #9
1004ca9c:	4293      	cmp	r3, r2
1004ca9e:	d014      	beq.n	1004caca <HAL_RCCEx_GetPeriphCLKFreq+0x102>
1004caa0:	22c0      	movs	r2, #192	@ 0xc0
1004caa2:	0252      	lsls	r2, r2, #9
1004caa4:	4293      	cmp	r3, r2
1004caa6:	d813      	bhi.n	1004cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
1004caa8:	2280      	movs	r2, #128	@ 0x80
1004caaa:	0212      	lsls	r2, r2, #8
1004caac:	4293      	cmp	r3, r2
1004caae:	d004      	beq.n	1004caba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
1004cab0:	2280      	movs	r2, #128	@ 0x80
1004cab2:	0252      	lsls	r2, r2, #9
1004cab4:	4293      	cmp	r3, r2
1004cab6:	d004      	beq.n	1004cac2 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
          break;
        case LL_RCC_LSCO_CLKSOURCE_HSI64M_DIV2048:
          frequency = HSE_VALUE >> 10;
          break;
        default :
          break;
1004cab8:	e00a      	b.n	1004cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          frequency = LSE_VALUE;
1004caba:	2380      	movs	r3, #128	@ 0x80
1004cabc:	021b      	lsls	r3, r3, #8
1004cabe:	60fb      	str	r3, [r7, #12]
          break;
1004cac0:	e007      	b.n	1004cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = LSI_VALUE;
1004cac2:	23fa      	movs	r3, #250	@ 0xfa
1004cac4:	01db      	lsls	r3, r3, #7
1004cac6:	60fb      	str	r3, [r7, #12]
          break;
1004cac8:	e003      	b.n	1004cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          frequency = HSE_VALUE >> 10;
1004caca:	4b0c      	ldr	r3, [pc, #48]	@ (1004cafc <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
1004cacc:	60fb      	str	r3, [r7, #12]
          break;
1004cace:	e000      	b.n	1004cad2 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
          break;
1004cad0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
1004cad2:	e002      	b.n	1004cada <HAL_RCCEx_GetPeriphCLKFreq+0x112>
    default :
      break;
1004cad4:	46c0      	nop			@ (mov r8, r8)
1004cad6:	e000      	b.n	1004cada <HAL_RCCEx_GetPeriphCLKFreq+0x112>
      break;
1004cad8:	46c0      	nop			@ (mov r8, r8)
  }

  return (frequency);
1004cada:	68fb      	ldr	r3, [r7, #12]
}
1004cadc:	0018      	movs	r0, r3
1004cade:	46bd      	mov	sp, r7
1004cae0:	b004      	add	sp, #16
1004cae2:	bd80      	pop	{r7, pc}
1004cae4:	100693ac 	.word	0x100693ac
1004cae8:	01e84800 	.word	0x01e84800
1004caec:	00f42400 	.word	0x00f42400
1004caf0:	007a1200 	.word	0x007a1200
1004caf4:	003d0900 	.word	0x003d0900
1004caf8:	03d09000 	.word	0x03d09000
1004cafc:	00007a12 	.word	0x00007a12

1004cb00 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
1004cb00:	b580      	push	{r7, lr}
1004cb02:	b082      	sub	sp, #8
1004cb04:	af00      	add	r7, sp, #0
1004cb06:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
1004cb08:	687b      	ldr	r3, [r7, #4]
1004cb0a:	2b00      	cmp	r3, #0
1004cb0c:	d101      	bne.n	1004cb12 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
1004cb0e:	2301      	movs	r3, #1
1004cb10:	e02d      	b.n	1004cb6e <HAL_RNG_Init+0x6e>
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
#if defined (RNG_CR_TST_CLK)
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));
#endif /* RNG_CR_TST_CLK */

  if (hrng->State == HAL_RNG_STATE_RESET)
1004cb12:	687b      	ldr	r3, [r7, #4]
1004cb14:	7a5b      	ldrb	r3, [r3, #9]
1004cb16:	b2db      	uxtb	r3, r3
1004cb18:	2b00      	cmp	r3, #0
1004cb1a:	d106      	bne.n	1004cb2a <HAL_RNG_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
1004cb1c:	687b      	ldr	r3, [r7, #4]
1004cb1e:	2200      	movs	r2, #0
1004cb20:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
1004cb22:	687b      	ldr	r3, [r7, #4]
1004cb24:	0018      	movs	r0, r3
1004cb26:	f7f9 fd0b 	bl	10046540 <HAL_RNG_MspInit>
  }

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
1004cb2a:	687b      	ldr	r3, [r7, #4]
1004cb2c:	2202      	movs	r2, #2
1004cb2e:	725a      	strb	r2, [r3, #9]

  /* Reset the CR */
  hrng->Instance->CR = 0U;
1004cb30:	687b      	ldr	r3, [r7, #4]
1004cb32:	681b      	ldr	r3, [r3, #0]
1004cb34:	2200      	movs	r2, #0
1004cb36:	601a      	str	r2, [r3, #0]

#if defined (RNG_CR_TST_CLK)
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_TST_CLK, hrng->Init.ClockErrorDetection);
1004cb38:	687b      	ldr	r3, [r7, #4]
1004cb3a:	681b      	ldr	r3, [r3, #0]
1004cb3c:	681b      	ldr	r3, [r3, #0]
1004cb3e:	2208      	movs	r2, #8
1004cb40:	4393      	bics	r3, r2
1004cb42:	0019      	movs	r1, r3
1004cb44:	687b      	ldr	r3, [r7, #4]
1004cb46:	685a      	ldr	r2, [r3, #4]
1004cb48:	687b      	ldr	r3, [r7, #4]
1004cb4a:	681b      	ldr	r3, [r3, #0]
1004cb4c:	430a      	orrs	r2, r1
1004cb4e:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_TST_CLK */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
1004cb50:	687b      	ldr	r3, [r7, #4]
1004cb52:	681b      	ldr	r3, [r3, #0]
1004cb54:	681a      	ldr	r2, [r3, #0]
1004cb56:	687b      	ldr	r3, [r7, #4]
1004cb58:	681b      	ldr	r3, [r3, #0]
1004cb5a:	2104      	movs	r1, #4
1004cb5c:	438a      	bics	r2, r1
1004cb5e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
1004cb60:	687b      	ldr	r3, [r7, #4]
1004cb62:	2201      	movs	r2, #1
1004cb64:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
1004cb66:	687b      	ldr	r3, [r7, #4]
1004cb68:	2200      	movs	r2, #0
1004cb6a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
1004cb6c:	2300      	movs	r3, #0
}
1004cb6e:	0018      	movs	r0, r3
1004cb70:	46bd      	mov	sp, r7
1004cb72:	b002      	add	sp, #8
1004cb74:	bd80      	pop	{r7, pc}

1004cb76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
1004cb76:	b580      	push	{r7, lr}
1004cb78:	b082      	sub	sp, #8
1004cb7a:	af00      	add	r7, sp, #0
1004cb7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
1004cb7e:	687b      	ldr	r3, [r7, #4]
1004cb80:	2b00      	cmp	r3, #0
1004cb82:	d101      	bne.n	1004cb88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
1004cb84:	2301      	movs	r3, #1
1004cb86:	e036      	b.n	1004cbf6 <HAL_TIM_Base_Init+0x80>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
1004cb88:	687b      	ldr	r3, [r7, #4]
1004cb8a:	2235      	movs	r2, #53	@ 0x35
1004cb8c:	5c9b      	ldrb	r3, [r3, r2]
1004cb8e:	b2db      	uxtb	r3, r3
1004cb90:	2b00      	cmp	r3, #0
1004cb92:	d107      	bne.n	1004cba4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
1004cb94:	687b      	ldr	r3, [r7, #4]
1004cb96:	2234      	movs	r2, #52	@ 0x34
1004cb98:	2100      	movs	r1, #0
1004cb9a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
1004cb9c:	687b      	ldr	r3, [r7, #4]
1004cb9e:	0018      	movs	r0, r3
1004cba0:	f7f9 fce2 	bl	10046568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004cba4:	687b      	ldr	r3, [r7, #4]
1004cba6:	2235      	movs	r2, #53	@ 0x35
1004cba8:	2102      	movs	r1, #2
1004cbaa:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
1004cbac:	687b      	ldr	r3, [r7, #4]
1004cbae:	681a      	ldr	r2, [r3, #0]
1004cbb0:	687b      	ldr	r3, [r7, #4]
1004cbb2:	3304      	adds	r3, #4
1004cbb4:	0019      	movs	r1, r3
1004cbb6:	0010      	movs	r0, r2
1004cbb8:	f000 fa3a 	bl	1004d030 <TIM_Base_SetConfig>

#if defined(TIM_DMA_SUPPORT)
  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
1004cbbc:	687b      	ldr	r3, [r7, #4]
1004cbbe:	223b      	movs	r2, #59	@ 0x3b
1004cbc0:	2101      	movs	r1, #1
1004cbc2:	5499      	strb	r1, [r3, r2]
#endif /* TIM_DMA_SUPPORT */

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004cbc4:	687b      	ldr	r3, [r7, #4]
1004cbc6:	2236      	movs	r2, #54	@ 0x36
1004cbc8:	2101      	movs	r1, #1
1004cbca:	5499      	strb	r1, [r3, r2]
1004cbcc:	687b      	ldr	r3, [r7, #4]
1004cbce:	2237      	movs	r2, #55	@ 0x37
1004cbd0:	2101      	movs	r1, #1
1004cbd2:	5499      	strb	r1, [r3, r2]
1004cbd4:	687b      	ldr	r3, [r7, #4]
1004cbd6:	2238      	movs	r2, #56	@ 0x38
1004cbd8:	2101      	movs	r1, #1
1004cbda:	5499      	strb	r1, [r3, r2]
1004cbdc:	687b      	ldr	r3, [r7, #4]
1004cbde:	2239      	movs	r2, #57	@ 0x39
1004cbe0:	2101      	movs	r1, #1
1004cbe2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
1004cbe4:	687b      	ldr	r3, [r7, #4]
1004cbe6:	223a      	movs	r2, #58	@ 0x3a
1004cbe8:	2101      	movs	r1, #1
1004cbea:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
1004cbec:	687b      	ldr	r3, [r7, #4]
1004cbee:	2235      	movs	r2, #53	@ 0x35
1004cbf0:	2101      	movs	r1, #1
1004cbf2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004cbf4:	2300      	movs	r3, #0
}
1004cbf6:	0018      	movs	r0, r3
1004cbf8:	46bd      	mov	sp, r7
1004cbfa:	b002      	add	sp, #8
1004cbfc:	bd80      	pop	{r7, pc}
	...

1004cc00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
1004cc00:	b580      	push	{r7, lr}
1004cc02:	b084      	sub	sp, #16
1004cc04:	af00      	add	r7, sp, #0
1004cc06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
1004cc08:	687b      	ldr	r3, [r7, #4]
1004cc0a:	2235      	movs	r2, #53	@ 0x35
1004cc0c:	5c9b      	ldrb	r3, [r3, r2]
1004cc0e:	b2db      	uxtb	r3, r3
1004cc10:	2b01      	cmp	r3, #1
1004cc12:	d001      	beq.n	1004cc18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
1004cc14:	2301      	movs	r3, #1
1004cc16:	e030      	b.n	1004cc7a <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
1004cc18:	687b      	ldr	r3, [r7, #4]
1004cc1a:	2235      	movs	r2, #53	@ 0x35
1004cc1c:	2102      	movs	r1, #2
1004cc1e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
1004cc20:	687b      	ldr	r3, [r7, #4]
1004cc22:	681b      	ldr	r3, [r3, #0]
1004cc24:	68da      	ldr	r2, [r3, #12]
1004cc26:	687b      	ldr	r3, [r7, #4]
1004cc28:	681b      	ldr	r3, [r3, #0]
1004cc2a:	2101      	movs	r1, #1
1004cc2c:	430a      	orrs	r2, r1
1004cc2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
1004cc30:	687b      	ldr	r3, [r7, #4]
1004cc32:	681b      	ldr	r3, [r3, #0]
1004cc34:	4a13      	ldr	r2, [pc, #76]	@ (1004cc84 <HAL_TIM_Base_Start_IT+0x84>)
1004cc36:	4293      	cmp	r3, r2
1004cc38:	d116      	bne.n	1004cc68 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
1004cc3a:	687b      	ldr	r3, [r7, #4]
1004cc3c:	681b      	ldr	r3, [r3, #0]
1004cc3e:	689b      	ldr	r3, [r3, #8]
1004cc40:	4a11      	ldr	r2, [pc, #68]	@ (1004cc88 <HAL_TIM_Base_Start_IT+0x88>)
1004cc42:	4013      	ands	r3, r2
1004cc44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
1004cc46:	68fb      	ldr	r3, [r7, #12]
1004cc48:	2b06      	cmp	r3, #6
1004cc4a:	d015      	beq.n	1004cc78 <HAL_TIM_Base_Start_IT+0x78>
1004cc4c:	68fa      	ldr	r2, [r7, #12]
1004cc4e:	2380      	movs	r3, #128	@ 0x80
1004cc50:	025b      	lsls	r3, r3, #9
1004cc52:	429a      	cmp	r2, r3
1004cc54:	d010      	beq.n	1004cc78 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
1004cc56:	687b      	ldr	r3, [r7, #4]
1004cc58:	681b      	ldr	r3, [r3, #0]
1004cc5a:	681a      	ldr	r2, [r3, #0]
1004cc5c:	687b      	ldr	r3, [r7, #4]
1004cc5e:	681b      	ldr	r3, [r3, #0]
1004cc60:	2101      	movs	r1, #1
1004cc62:	430a      	orrs	r2, r1
1004cc64:	601a      	str	r2, [r3, #0]
1004cc66:	e007      	b.n	1004cc78 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
1004cc68:	687b      	ldr	r3, [r7, #4]
1004cc6a:	681b      	ldr	r3, [r3, #0]
1004cc6c:	681a      	ldr	r2, [r3, #0]
1004cc6e:	687b      	ldr	r3, [r7, #4]
1004cc70:	681b      	ldr	r3, [r3, #0]
1004cc72:	2101      	movs	r1, #1
1004cc74:	430a      	orrs	r2, r1
1004cc76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
1004cc78:	2300      	movs	r3, #0
}
1004cc7a:	0018      	movs	r0, r3
1004cc7c:	46bd      	mov	sp, r7
1004cc7e:	b004      	add	sp, #16
1004cc80:	bd80      	pop	{r7, pc}
1004cc82:	46c0      	nop			@ (mov r8, r8)
1004cc84:	40002000 	.word	0x40002000
1004cc88:	00010007 	.word	0x00010007

1004cc8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
1004cc8c:	b580      	push	{r7, lr}
1004cc8e:	b084      	sub	sp, #16
1004cc90:	af00      	add	r7, sp, #0
1004cc92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
1004cc94:	687b      	ldr	r3, [r7, #4]
1004cc96:	681b      	ldr	r3, [r3, #0]
1004cc98:	68db      	ldr	r3, [r3, #12]
1004cc9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
1004cc9c:	687b      	ldr	r3, [r7, #4]
1004cc9e:	681b      	ldr	r3, [r3, #0]
1004cca0:	691b      	ldr	r3, [r3, #16]
1004cca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
1004cca4:	68bb      	ldr	r3, [r7, #8]
1004cca6:	2202      	movs	r2, #2
1004cca8:	4013      	ands	r3, r2
1004ccaa:	d021      	beq.n	1004ccf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
1004ccac:	68fb      	ldr	r3, [r7, #12]
1004ccae:	2202      	movs	r2, #2
1004ccb0:	4013      	ands	r3, r2
1004ccb2:	d01d      	beq.n	1004ccf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
1004ccb4:	687b      	ldr	r3, [r7, #4]
1004ccb6:	681b      	ldr	r3, [r3, #0]
1004ccb8:	2203      	movs	r2, #3
1004ccba:	4252      	negs	r2, r2
1004ccbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
1004ccbe:	687b      	ldr	r3, [r7, #4]
1004ccc0:	2201      	movs	r2, #1
1004ccc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
1004ccc4:	687b      	ldr	r3, [r7, #4]
1004ccc6:	681b      	ldr	r3, [r3, #0]
1004ccc8:	699b      	ldr	r3, [r3, #24]
1004ccca:	2203      	movs	r2, #3
1004cccc:	4013      	ands	r3, r2
1004ccce:	d004      	beq.n	1004ccda <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
1004ccd0:	687b      	ldr	r3, [r7, #4]
1004ccd2:	0018      	movs	r0, r3
1004ccd4:	f000 f994 	bl	1004d000 <HAL_TIM_IC_CaptureCallback>
1004ccd8:	e007      	b.n	1004ccea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
1004ccda:	687b      	ldr	r3, [r7, #4]
1004ccdc:	0018      	movs	r0, r3
1004ccde:	f000 f987 	bl	1004cff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
1004cce2:	687b      	ldr	r3, [r7, #4]
1004cce4:	0018      	movs	r0, r3
1004cce6:	f000 f993 	bl	1004d010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004ccea:	687b      	ldr	r3, [r7, #4]
1004ccec:	2200      	movs	r2, #0
1004ccee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
1004ccf0:	68bb      	ldr	r3, [r7, #8]
1004ccf2:	2204      	movs	r2, #4
1004ccf4:	4013      	ands	r3, r2
1004ccf6:	d022      	beq.n	1004cd3e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
1004ccf8:	68fb      	ldr	r3, [r7, #12]
1004ccfa:	2204      	movs	r2, #4
1004ccfc:	4013      	ands	r3, r2
1004ccfe:	d01e      	beq.n	1004cd3e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
1004cd00:	687b      	ldr	r3, [r7, #4]
1004cd02:	681b      	ldr	r3, [r3, #0]
1004cd04:	2205      	movs	r2, #5
1004cd06:	4252      	negs	r2, r2
1004cd08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
1004cd0a:	687b      	ldr	r3, [r7, #4]
1004cd0c:	2202      	movs	r2, #2
1004cd0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
1004cd10:	687b      	ldr	r3, [r7, #4]
1004cd12:	681b      	ldr	r3, [r3, #0]
1004cd14:	699a      	ldr	r2, [r3, #24]
1004cd16:	23c0      	movs	r3, #192	@ 0xc0
1004cd18:	009b      	lsls	r3, r3, #2
1004cd1a:	4013      	ands	r3, r2
1004cd1c:	d004      	beq.n	1004cd28 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004cd1e:	687b      	ldr	r3, [r7, #4]
1004cd20:	0018      	movs	r0, r3
1004cd22:	f000 f96d 	bl	1004d000 <HAL_TIM_IC_CaptureCallback>
1004cd26:	e007      	b.n	1004cd38 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004cd28:	687b      	ldr	r3, [r7, #4]
1004cd2a:	0018      	movs	r0, r3
1004cd2c:	f000 f960 	bl	1004cff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004cd30:	687b      	ldr	r3, [r7, #4]
1004cd32:	0018      	movs	r0, r3
1004cd34:	f000 f96c 	bl	1004d010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004cd38:	687b      	ldr	r3, [r7, #4]
1004cd3a:	2200      	movs	r2, #0
1004cd3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
1004cd3e:	68bb      	ldr	r3, [r7, #8]
1004cd40:	2208      	movs	r2, #8
1004cd42:	4013      	ands	r3, r2
1004cd44:	d021      	beq.n	1004cd8a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
1004cd46:	68fb      	ldr	r3, [r7, #12]
1004cd48:	2208      	movs	r2, #8
1004cd4a:	4013      	ands	r3, r2
1004cd4c:	d01d      	beq.n	1004cd8a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
1004cd4e:	687b      	ldr	r3, [r7, #4]
1004cd50:	681b      	ldr	r3, [r3, #0]
1004cd52:	2209      	movs	r2, #9
1004cd54:	4252      	negs	r2, r2
1004cd56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
1004cd58:	687b      	ldr	r3, [r7, #4]
1004cd5a:	2204      	movs	r2, #4
1004cd5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
1004cd5e:	687b      	ldr	r3, [r7, #4]
1004cd60:	681b      	ldr	r3, [r3, #0]
1004cd62:	69db      	ldr	r3, [r3, #28]
1004cd64:	2203      	movs	r2, #3
1004cd66:	4013      	ands	r3, r2
1004cd68:	d004      	beq.n	1004cd74 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004cd6a:	687b      	ldr	r3, [r7, #4]
1004cd6c:	0018      	movs	r0, r3
1004cd6e:	f000 f947 	bl	1004d000 <HAL_TIM_IC_CaptureCallback>
1004cd72:	e007      	b.n	1004cd84 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004cd74:	687b      	ldr	r3, [r7, #4]
1004cd76:	0018      	movs	r0, r3
1004cd78:	f000 f93a 	bl	1004cff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004cd7c:	687b      	ldr	r3, [r7, #4]
1004cd7e:	0018      	movs	r0, r3
1004cd80:	f000 f946 	bl	1004d010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004cd84:	687b      	ldr	r3, [r7, #4]
1004cd86:	2200      	movs	r2, #0
1004cd88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
1004cd8a:	68bb      	ldr	r3, [r7, #8]
1004cd8c:	2210      	movs	r2, #16
1004cd8e:	4013      	ands	r3, r2
1004cd90:	d022      	beq.n	1004cdd8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
1004cd92:	68fb      	ldr	r3, [r7, #12]
1004cd94:	2210      	movs	r2, #16
1004cd96:	4013      	ands	r3, r2
1004cd98:	d01e      	beq.n	1004cdd8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
1004cd9a:	687b      	ldr	r3, [r7, #4]
1004cd9c:	681b      	ldr	r3, [r3, #0]
1004cd9e:	2211      	movs	r2, #17
1004cda0:	4252      	negs	r2, r2
1004cda2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
1004cda4:	687b      	ldr	r3, [r7, #4]
1004cda6:	2208      	movs	r2, #8
1004cda8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
1004cdaa:	687b      	ldr	r3, [r7, #4]
1004cdac:	681b      	ldr	r3, [r3, #0]
1004cdae:	69da      	ldr	r2, [r3, #28]
1004cdb0:	23c0      	movs	r3, #192	@ 0xc0
1004cdb2:	009b      	lsls	r3, r3, #2
1004cdb4:	4013      	ands	r3, r2
1004cdb6:	d004      	beq.n	1004cdc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
1004cdb8:	687b      	ldr	r3, [r7, #4]
1004cdba:	0018      	movs	r0, r3
1004cdbc:	f000 f920 	bl	1004d000 <HAL_TIM_IC_CaptureCallback>
1004cdc0:	e007      	b.n	1004cdd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
1004cdc2:	687b      	ldr	r3, [r7, #4]
1004cdc4:	0018      	movs	r0, r3
1004cdc6:	f000 f913 	bl	1004cff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
1004cdca:	687b      	ldr	r3, [r7, #4]
1004cdcc:	0018      	movs	r0, r3
1004cdce:	f000 f91f 	bl	1004d010 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
1004cdd2:	687b      	ldr	r3, [r7, #4]
1004cdd4:	2200      	movs	r2, #0
1004cdd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
1004cdd8:	68bb      	ldr	r3, [r7, #8]
1004cdda:	2201      	movs	r2, #1
1004cddc:	4013      	ands	r3, r2
1004cdde:	d00c      	beq.n	1004cdfa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
1004cde0:	68fb      	ldr	r3, [r7, #12]
1004cde2:	2201      	movs	r2, #1
1004cde4:	4013      	ands	r3, r2
1004cde6:	d008      	beq.n	1004cdfa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
1004cde8:	687b      	ldr	r3, [r7, #4]
1004cdea:	681b      	ldr	r3, [r3, #0]
1004cdec:	2202      	movs	r2, #2
1004cdee:	4252      	negs	r2, r2
1004cdf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
1004cdf2:	687b      	ldr	r3, [r7, #4]
1004cdf4:	0018      	movs	r0, r3
1004cdf6:	f000 f8f3 	bl	1004cfe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
1004cdfa:	68bb      	ldr	r3, [r7, #8]
1004cdfc:	2280      	movs	r2, #128	@ 0x80
1004cdfe:	4013      	ands	r3, r2
1004ce00:	d00c      	beq.n	1004ce1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
1004ce02:	68fb      	ldr	r3, [r7, #12]
1004ce04:	2280      	movs	r2, #128	@ 0x80
1004ce06:	4013      	ands	r3, r2
1004ce08:	d008      	beq.n	1004ce1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
1004ce0a:	687b      	ldr	r3, [r7, #4]
1004ce0c:	681b      	ldr	r3, [r3, #0]
1004ce0e:	2281      	movs	r2, #129	@ 0x81
1004ce10:	4252      	negs	r2, r2
1004ce12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
1004ce14:	687b      	ldr	r3, [r7, #4]
1004ce16:	0018      	movs	r0, r3
1004ce18:	f000 fa08 	bl	1004d22c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
1004ce1c:	68bb      	ldr	r3, [r7, #8]
1004ce1e:	2240      	movs	r2, #64	@ 0x40
1004ce20:	4013      	ands	r3, r2
1004ce22:	d00c      	beq.n	1004ce3e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
1004ce24:	68fb      	ldr	r3, [r7, #12]
1004ce26:	2240      	movs	r2, #64	@ 0x40
1004ce28:	4013      	ands	r3, r2
1004ce2a:	d008      	beq.n	1004ce3e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
1004ce2c:	687b      	ldr	r3, [r7, #4]
1004ce2e:	681b      	ldr	r3, [r3, #0]
1004ce30:	2241      	movs	r2, #65	@ 0x41
1004ce32:	4252      	negs	r2, r2
1004ce34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
1004ce36:	687b      	ldr	r3, [r7, #4]
1004ce38:	0018      	movs	r0, r3
1004ce3a:	f000 f8f1 	bl	1004d020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
1004ce3e:	68bb      	ldr	r3, [r7, #8]
1004ce40:	2220      	movs	r2, #32
1004ce42:	4013      	ands	r3, r2
1004ce44:	d00c      	beq.n	1004ce60 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
1004ce46:	68fb      	ldr	r3, [r7, #12]
1004ce48:	2220      	movs	r2, #32
1004ce4a:	4013      	ands	r3, r2
1004ce4c:	d008      	beq.n	1004ce60 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
1004ce4e:	687b      	ldr	r3, [r7, #4]
1004ce50:	681b      	ldr	r3, [r3, #0]
1004ce52:	2221      	movs	r2, #33	@ 0x21
1004ce54:	4252      	negs	r2, r2
1004ce56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
1004ce58:	687b      	ldr	r3, [r7, #4]
1004ce5a:	0018      	movs	r0, r3
1004ce5c:	f000 f9de 	bl	1004d21c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
1004ce60:	46c0      	nop			@ (mov r8, r8)
1004ce62:	46bd      	mov	sp, r7
1004ce64:	b004      	add	sp, #16
1004ce66:	bd80      	pop	{r7, pc}

1004ce68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
1004ce68:	b580      	push	{r7, lr}
1004ce6a:	b084      	sub	sp, #16
1004ce6c:	af00      	add	r7, sp, #0
1004ce6e:	6078      	str	r0, [r7, #4]
1004ce70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004ce72:	230f      	movs	r3, #15
1004ce74:	18fb      	adds	r3, r7, r3
1004ce76:	2200      	movs	r2, #0
1004ce78:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
1004ce7a:	687b      	ldr	r3, [r7, #4]
1004ce7c:	2234      	movs	r2, #52	@ 0x34
1004ce7e:	5c9b      	ldrb	r3, [r3, r2]
1004ce80:	2b01      	cmp	r3, #1
1004ce82:	d101      	bne.n	1004ce88 <HAL_TIM_ConfigClockSource+0x20>
1004ce84:	2302      	movs	r3, #2
1004ce86:	e0a2      	b.n	1004cfce <HAL_TIM_ConfigClockSource+0x166>
1004ce88:	687b      	ldr	r3, [r7, #4]
1004ce8a:	2234      	movs	r2, #52	@ 0x34
1004ce8c:	2101      	movs	r1, #1
1004ce8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
1004ce90:	687b      	ldr	r3, [r7, #4]
1004ce92:	2235      	movs	r2, #53	@ 0x35
1004ce94:	2102      	movs	r1, #2
1004ce96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
1004ce98:	687b      	ldr	r3, [r7, #4]
1004ce9a:	681b      	ldr	r3, [r3, #0]
1004ce9c:	689b      	ldr	r3, [r3, #8]
1004ce9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
1004cea0:	68bb      	ldr	r3, [r7, #8]
1004cea2:	4a4d      	ldr	r2, [pc, #308]	@ (1004cfd8 <HAL_TIM_ConfigClockSource+0x170>)
1004cea4:	4013      	ands	r3, r2
1004cea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004cea8:	68bb      	ldr	r3, [r7, #8]
1004ceaa:	4a4c      	ldr	r2, [pc, #304]	@ (1004cfdc <HAL_TIM_ConfigClockSource+0x174>)
1004ceac:	4013      	ands	r3, r2
1004ceae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
1004ceb0:	687b      	ldr	r3, [r7, #4]
1004ceb2:	681b      	ldr	r3, [r3, #0]
1004ceb4:	68ba      	ldr	r2, [r7, #8]
1004ceb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
1004ceb8:	683b      	ldr	r3, [r7, #0]
1004ceba:	681b      	ldr	r3, [r3, #0]
1004cebc:	2280      	movs	r2, #128	@ 0x80
1004cebe:	0192      	lsls	r2, r2, #6
1004cec0:	4293      	cmp	r3, r2
1004cec2:	d02f      	beq.n	1004cf24 <HAL_TIM_ConfigClockSource+0xbc>
1004cec4:	2280      	movs	r2, #128	@ 0x80
1004cec6:	0192      	lsls	r2, r2, #6
1004cec8:	4293      	cmp	r3, r2
1004ceca:	d900      	bls.n	1004cece <HAL_TIM_ConfigClockSource+0x66>
1004cecc:	e06e      	b.n	1004cfac <HAL_TIM_ConfigClockSource+0x144>
1004cece:	2280      	movs	r2, #128	@ 0x80
1004ced0:	0152      	lsls	r2, r2, #5
1004ced2:	4293      	cmp	r3, r2
1004ced4:	d100      	bne.n	1004ced8 <HAL_TIM_ConfigClockSource+0x70>
1004ced6:	e06e      	b.n	1004cfb6 <HAL_TIM_ConfigClockSource+0x14e>
1004ced8:	2280      	movs	r2, #128	@ 0x80
1004ceda:	0152      	lsls	r2, r2, #5
1004cedc:	4293      	cmp	r3, r2
1004cede:	d865      	bhi.n	1004cfac <HAL_TIM_ConfigClockSource+0x144>
1004cee0:	2b70      	cmp	r3, #112	@ 0x70
1004cee2:	d008      	beq.n	1004cef6 <HAL_TIM_ConfigClockSource+0x8e>
1004cee4:	d862      	bhi.n	1004cfac <HAL_TIM_ConfigClockSource+0x144>
1004cee6:	2b60      	cmp	r3, #96	@ 0x60
1004cee8:	d040      	beq.n	1004cf6c <HAL_TIM_ConfigClockSource+0x104>
1004ceea:	d85f      	bhi.n	1004cfac <HAL_TIM_ConfigClockSource+0x144>
1004ceec:	2b40      	cmp	r3, #64	@ 0x40
1004ceee:	d04d      	beq.n	1004cf8c <HAL_TIM_ConfigClockSource+0x124>
1004cef0:	2b50      	cmp	r3, #80	@ 0x50
1004cef2:	d02b      	beq.n	1004cf4c <HAL_TIM_ConfigClockSource+0xe4>
1004cef4:	e05a      	b.n	1004cfac <HAL_TIM_ConfigClockSource+0x144>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004cef6:	687b      	ldr	r3, [r7, #4]
1004cef8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004cefa:	683b      	ldr	r3, [r7, #0]
1004cefc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004cefe:	683b      	ldr	r3, [r7, #0]
1004cf00:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004cf02:	683b      	ldr	r3, [r7, #0]
1004cf04:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004cf06:	f000 f969 	bl	1004d1dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
1004cf0a:	687b      	ldr	r3, [r7, #4]
1004cf0c:	681b      	ldr	r3, [r3, #0]
1004cf0e:	689b      	ldr	r3, [r3, #8]
1004cf10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
1004cf12:	68bb      	ldr	r3, [r7, #8]
1004cf14:	2277      	movs	r2, #119	@ 0x77
1004cf16:	4313      	orrs	r3, r2
1004cf18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
1004cf1a:	687b      	ldr	r3, [r7, #4]
1004cf1c:	681b      	ldr	r3, [r3, #0]
1004cf1e:	68ba      	ldr	r2, [r7, #8]
1004cf20:	609a      	str	r2, [r3, #8]
      break;
1004cf22:	e049      	b.n	1004cfb8 <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
1004cf24:	687b      	ldr	r3, [r7, #4]
1004cf26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
1004cf28:	683b      	ldr	r3, [r7, #0]
1004cf2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
1004cf2c:	683b      	ldr	r3, [r7, #0]
1004cf2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
1004cf30:	683b      	ldr	r3, [r7, #0]
1004cf32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
1004cf34:	f000 f952 	bl	1004d1dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
1004cf38:	687b      	ldr	r3, [r7, #4]
1004cf3a:	681b      	ldr	r3, [r3, #0]
1004cf3c:	689a      	ldr	r2, [r3, #8]
1004cf3e:	687b      	ldr	r3, [r7, #4]
1004cf40:	681b      	ldr	r3, [r3, #0]
1004cf42:	2180      	movs	r1, #128	@ 0x80
1004cf44:	01c9      	lsls	r1, r1, #7
1004cf46:	430a      	orrs	r2, r1
1004cf48:	609a      	str	r2, [r3, #8]
      break;
1004cf4a:	e035      	b.n	1004cfb8 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004cf4c:	687b      	ldr	r3, [r7, #4]
1004cf4e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004cf50:	683b      	ldr	r3, [r7, #0]
1004cf52:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004cf54:	683b      	ldr	r3, [r7, #0]
1004cf56:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004cf58:	001a      	movs	r2, r3
1004cf5a:	f000 f8c5 	bl	1004d0e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
1004cf5e:	687b      	ldr	r3, [r7, #4]
1004cf60:	681b      	ldr	r3, [r3, #0]
1004cf62:	2150      	movs	r1, #80	@ 0x50
1004cf64:	0018      	movs	r0, r3
1004cf66:	f000 f91f 	bl	1004d1a8 <TIM_ITRx_SetConfig>
      break;
1004cf6a:	e025      	b.n	1004cfb8 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
1004cf6c:	687b      	ldr	r3, [r7, #4]
1004cf6e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004cf70:	683b      	ldr	r3, [r7, #0]
1004cf72:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004cf74:	683b      	ldr	r3, [r7, #0]
1004cf76:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
1004cf78:	001a      	movs	r2, r3
1004cf7a:	f000 f8e3 	bl	1004d144 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
1004cf7e:	687b      	ldr	r3, [r7, #4]
1004cf80:	681b      	ldr	r3, [r3, #0]
1004cf82:	2160      	movs	r1, #96	@ 0x60
1004cf84:	0018      	movs	r0, r3
1004cf86:	f000 f90f 	bl	1004d1a8 <TIM_ITRx_SetConfig>
      break;
1004cf8a:	e015      	b.n	1004cfb8 <HAL_TIM_ConfigClockSource+0x150>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
1004cf8c:	687b      	ldr	r3, [r7, #4]
1004cf8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
1004cf90:	683b      	ldr	r3, [r7, #0]
1004cf92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
1004cf94:	683b      	ldr	r3, [r7, #0]
1004cf96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
1004cf98:	001a      	movs	r2, r3
1004cf9a:	f000 f8a5 	bl	1004d0e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
1004cf9e:	687b      	ldr	r3, [r7, #4]
1004cfa0:	681b      	ldr	r3, [r3, #0]
1004cfa2:	2140      	movs	r1, #64	@ 0x40
1004cfa4:	0018      	movs	r0, r3
1004cfa6:	f000 f8ff 	bl	1004d1a8 <TIM_ITRx_SetConfig>
      break;
1004cfaa:	e005      	b.n	1004cfb8 <HAL_TIM_ConfigClockSource+0x150>
    }


    default:
      status = HAL_ERROR;
1004cfac:	230f      	movs	r3, #15
1004cfae:	18fb      	adds	r3, r7, r3
1004cfb0:	2201      	movs	r2, #1
1004cfb2:	701a      	strb	r2, [r3, #0]
      break;
1004cfb4:	e000      	b.n	1004cfb8 <HAL_TIM_ConfigClockSource+0x150>
      break;
1004cfb6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
1004cfb8:	687b      	ldr	r3, [r7, #4]
1004cfba:	2235      	movs	r2, #53	@ 0x35
1004cfbc:	2101      	movs	r1, #1
1004cfbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
1004cfc0:	687b      	ldr	r3, [r7, #4]
1004cfc2:	2234      	movs	r2, #52	@ 0x34
1004cfc4:	2100      	movs	r1, #0
1004cfc6:	5499      	strb	r1, [r3, r2]

  return status;
1004cfc8:	230f      	movs	r3, #15
1004cfca:	18fb      	adds	r3, r7, r3
1004cfcc:	781b      	ldrb	r3, [r3, #0]
}
1004cfce:	0018      	movs	r0, r3
1004cfd0:	46bd      	mov	sp, r7
1004cfd2:	b004      	add	sp, #16
1004cfd4:	bd80      	pop	{r7, pc}
1004cfd6:	46c0      	nop			@ (mov r8, r8)
1004cfd8:	fffeff88 	.word	0xfffeff88
1004cfdc:	ffff00ff 	.word	0xffff00ff

1004cfe0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
1004cfe0:	b580      	push	{r7, lr}
1004cfe2:	b082      	sub	sp, #8
1004cfe4:	af00      	add	r7, sp, #0
1004cfe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
1004cfe8:	46c0      	nop			@ (mov r8, r8)
1004cfea:	46bd      	mov	sp, r7
1004cfec:	b002      	add	sp, #8
1004cfee:	bd80      	pop	{r7, pc}

1004cff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
1004cff0:	b580      	push	{r7, lr}
1004cff2:	b082      	sub	sp, #8
1004cff4:	af00      	add	r7, sp, #0
1004cff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
1004cff8:	46c0      	nop			@ (mov r8, r8)
1004cffa:	46bd      	mov	sp, r7
1004cffc:	b002      	add	sp, #8
1004cffe:	bd80      	pop	{r7, pc}

1004d000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
1004d000:	b580      	push	{r7, lr}
1004d002:	b082      	sub	sp, #8
1004d004:	af00      	add	r7, sp, #0
1004d006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
1004d008:	46c0      	nop			@ (mov r8, r8)
1004d00a:	46bd      	mov	sp, r7
1004d00c:	b002      	add	sp, #8
1004d00e:	bd80      	pop	{r7, pc}

1004d010 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
1004d010:	b580      	push	{r7, lr}
1004d012:	b082      	sub	sp, #8
1004d014:	af00      	add	r7, sp, #0
1004d016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
1004d018:	46c0      	nop			@ (mov r8, r8)
1004d01a:	46bd      	mov	sp, r7
1004d01c:	b002      	add	sp, #8
1004d01e:	bd80      	pop	{r7, pc}

1004d020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
1004d020:	b580      	push	{r7, lr}
1004d022:	b082      	sub	sp, #8
1004d024:	af00      	add	r7, sp, #0
1004d026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
1004d028:	46c0      	nop			@ (mov r8, r8)
1004d02a:	46bd      	mov	sp, r7
1004d02c:	b002      	add	sp, #8
1004d02e:	bd80      	pop	{r7, pc}

1004d030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
1004d030:	b580      	push	{r7, lr}
1004d032:	b084      	sub	sp, #16
1004d034:	af00      	add	r7, sp, #0
1004d036:	6078      	str	r0, [r7, #4]
1004d038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
1004d03a:	687b      	ldr	r3, [r7, #4]
1004d03c:	681b      	ldr	r3, [r3, #0]
1004d03e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
1004d040:	687b      	ldr	r3, [r7, #4]
1004d042:	4a25      	ldr	r2, [pc, #148]	@ (1004d0d8 <TIM_Base_SetConfig+0xa8>)
1004d044:	4293      	cmp	r3, r2
1004d046:	d108      	bne.n	1004d05a <TIM_Base_SetConfig+0x2a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
1004d048:	68fb      	ldr	r3, [r7, #12]
1004d04a:	2270      	movs	r2, #112	@ 0x70
1004d04c:	4393      	bics	r3, r2
1004d04e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
1004d050:	683b      	ldr	r3, [r7, #0]
1004d052:	685b      	ldr	r3, [r3, #4]
1004d054:	68fa      	ldr	r2, [r7, #12]
1004d056:	4313      	orrs	r3, r2
1004d058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
1004d05a:	687b      	ldr	r3, [r7, #4]
1004d05c:	4a1e      	ldr	r2, [pc, #120]	@ (1004d0d8 <TIM_Base_SetConfig+0xa8>)
1004d05e:	4293      	cmp	r3, r2
1004d060:	d007      	beq.n	1004d072 <TIM_Base_SetConfig+0x42>
1004d062:	687b      	ldr	r3, [r7, #4]
1004d064:	4a1d      	ldr	r2, [pc, #116]	@ (1004d0dc <TIM_Base_SetConfig+0xac>)
1004d066:	4293      	cmp	r3, r2
1004d068:	d003      	beq.n	1004d072 <TIM_Base_SetConfig+0x42>
1004d06a:	687b      	ldr	r3, [r7, #4]
1004d06c:	4a1c      	ldr	r2, [pc, #112]	@ (1004d0e0 <TIM_Base_SetConfig+0xb0>)
1004d06e:	4293      	cmp	r3, r2
1004d070:	d108      	bne.n	1004d084 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
1004d072:	68fb      	ldr	r3, [r7, #12]
1004d074:	4a1b      	ldr	r2, [pc, #108]	@ (1004d0e4 <TIM_Base_SetConfig+0xb4>)
1004d076:	4013      	ands	r3, r2
1004d078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
1004d07a:	683b      	ldr	r3, [r7, #0]
1004d07c:	68db      	ldr	r3, [r3, #12]
1004d07e:	68fa      	ldr	r2, [r7, #12]
1004d080:	4313      	orrs	r3, r2
1004d082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
1004d084:	68fb      	ldr	r3, [r7, #12]
1004d086:	2280      	movs	r2, #128	@ 0x80
1004d088:	4393      	bics	r3, r2
1004d08a:	001a      	movs	r2, r3
1004d08c:	683b      	ldr	r3, [r7, #0]
1004d08e:	695b      	ldr	r3, [r3, #20]
1004d090:	4313      	orrs	r3, r2
1004d092:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
1004d094:	687b      	ldr	r3, [r7, #4]
1004d096:	68fa      	ldr	r2, [r7, #12]
1004d098:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
1004d09a:	683b      	ldr	r3, [r7, #0]
1004d09c:	689a      	ldr	r2, [r3, #8]
1004d09e:	687b      	ldr	r3, [r7, #4]
1004d0a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
1004d0a2:	683b      	ldr	r3, [r7, #0]
1004d0a4:	681a      	ldr	r2, [r3, #0]
1004d0a6:	687b      	ldr	r3, [r7, #4]
1004d0a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
1004d0aa:	687b      	ldr	r3, [r7, #4]
1004d0ac:	4a0a      	ldr	r2, [pc, #40]	@ (1004d0d8 <TIM_Base_SetConfig+0xa8>)
1004d0ae:	4293      	cmp	r3, r2
1004d0b0:	d007      	beq.n	1004d0c2 <TIM_Base_SetConfig+0x92>
1004d0b2:	687b      	ldr	r3, [r7, #4]
1004d0b4:	4a09      	ldr	r2, [pc, #36]	@ (1004d0dc <TIM_Base_SetConfig+0xac>)
1004d0b6:	4293      	cmp	r3, r2
1004d0b8:	d003      	beq.n	1004d0c2 <TIM_Base_SetConfig+0x92>
1004d0ba:	687b      	ldr	r3, [r7, #4]
1004d0bc:	4a08      	ldr	r2, [pc, #32]	@ (1004d0e0 <TIM_Base_SetConfig+0xb0>)
1004d0be:	4293      	cmp	r3, r2
1004d0c0:	d103      	bne.n	1004d0ca <TIM_Base_SetConfig+0x9a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
1004d0c2:	683b      	ldr	r3, [r7, #0]
1004d0c4:	691a      	ldr	r2, [r3, #16]
1004d0c6:	687b      	ldr	r3, [r7, #4]
1004d0c8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
1004d0ca:	687b      	ldr	r3, [r7, #4]
1004d0cc:	2201      	movs	r2, #1
1004d0ce:	615a      	str	r2, [r3, #20]
}
1004d0d0:	46c0      	nop			@ (mov r8, r8)
1004d0d2:	46bd      	mov	sp, r7
1004d0d4:	b004      	add	sp, #16
1004d0d6:	bd80      	pop	{r7, pc}
1004d0d8:	40002000 	.word	0x40002000
1004d0dc:	40005000 	.word	0x40005000
1004d0e0:	40006000 	.word	0x40006000
1004d0e4:	fffffcff 	.word	0xfffffcff

1004d0e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004d0e8:	b580      	push	{r7, lr}
1004d0ea:	b086      	sub	sp, #24
1004d0ec:	af00      	add	r7, sp, #0
1004d0ee:	60f8      	str	r0, [r7, #12]
1004d0f0:	60b9      	str	r1, [r7, #8]
1004d0f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
1004d0f4:	68fb      	ldr	r3, [r7, #12]
1004d0f6:	6a1b      	ldr	r3, [r3, #32]
1004d0f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
1004d0fa:	68fb      	ldr	r3, [r7, #12]
1004d0fc:	6a1b      	ldr	r3, [r3, #32]
1004d0fe:	2201      	movs	r2, #1
1004d100:	4393      	bics	r3, r2
1004d102:	001a      	movs	r2, r3
1004d104:	68fb      	ldr	r3, [r7, #12]
1004d106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004d108:	68fb      	ldr	r3, [r7, #12]
1004d10a:	699b      	ldr	r3, [r3, #24]
1004d10c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
1004d10e:	693b      	ldr	r3, [r7, #16]
1004d110:	22f0      	movs	r2, #240	@ 0xf0
1004d112:	4393      	bics	r3, r2
1004d114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
1004d116:	687b      	ldr	r3, [r7, #4]
1004d118:	011b      	lsls	r3, r3, #4
1004d11a:	693a      	ldr	r2, [r7, #16]
1004d11c:	4313      	orrs	r3, r2
1004d11e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
1004d120:	697b      	ldr	r3, [r7, #20]
1004d122:	220a      	movs	r2, #10
1004d124:	4393      	bics	r3, r2
1004d126:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
1004d128:	697a      	ldr	r2, [r7, #20]
1004d12a:	68bb      	ldr	r3, [r7, #8]
1004d12c:	4313      	orrs	r3, r2
1004d12e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
1004d130:	68fb      	ldr	r3, [r7, #12]
1004d132:	693a      	ldr	r2, [r7, #16]
1004d134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004d136:	68fb      	ldr	r3, [r7, #12]
1004d138:	697a      	ldr	r2, [r7, #20]
1004d13a:	621a      	str	r2, [r3, #32]
}
1004d13c:	46c0      	nop			@ (mov r8, r8)
1004d13e:	46bd      	mov	sp, r7
1004d140:	b006      	add	sp, #24
1004d142:	bd80      	pop	{r7, pc}

1004d144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
1004d144:	b580      	push	{r7, lr}
1004d146:	b086      	sub	sp, #24
1004d148:	af00      	add	r7, sp, #0
1004d14a:	60f8      	str	r0, [r7, #12]
1004d14c:	60b9      	str	r1, [r7, #8]
1004d14e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
1004d150:	68fb      	ldr	r3, [r7, #12]
1004d152:	6a1b      	ldr	r3, [r3, #32]
1004d154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
1004d156:	68fb      	ldr	r3, [r7, #12]
1004d158:	6a1b      	ldr	r3, [r3, #32]
1004d15a:	2210      	movs	r2, #16
1004d15c:	4393      	bics	r3, r2
1004d15e:	001a      	movs	r2, r3
1004d160:	68fb      	ldr	r3, [r7, #12]
1004d162:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
1004d164:	68fb      	ldr	r3, [r7, #12]
1004d166:	699b      	ldr	r3, [r3, #24]
1004d168:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
1004d16a:	693b      	ldr	r3, [r7, #16]
1004d16c:	4a0d      	ldr	r2, [pc, #52]	@ (1004d1a4 <TIM_TI2_ConfigInputStage+0x60>)
1004d16e:	4013      	ands	r3, r2
1004d170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
1004d172:	687b      	ldr	r3, [r7, #4]
1004d174:	031b      	lsls	r3, r3, #12
1004d176:	693a      	ldr	r2, [r7, #16]
1004d178:	4313      	orrs	r3, r2
1004d17a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
1004d17c:	697b      	ldr	r3, [r7, #20]
1004d17e:	22a0      	movs	r2, #160	@ 0xa0
1004d180:	4393      	bics	r3, r2
1004d182:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
1004d184:	68bb      	ldr	r3, [r7, #8]
1004d186:	011b      	lsls	r3, r3, #4
1004d188:	697a      	ldr	r2, [r7, #20]
1004d18a:	4313      	orrs	r3, r2
1004d18c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
1004d18e:	68fb      	ldr	r3, [r7, #12]
1004d190:	693a      	ldr	r2, [r7, #16]
1004d192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
1004d194:	68fb      	ldr	r3, [r7, #12]
1004d196:	697a      	ldr	r2, [r7, #20]
1004d198:	621a      	str	r2, [r3, #32]
}
1004d19a:	46c0      	nop			@ (mov r8, r8)
1004d19c:	46bd      	mov	sp, r7
1004d19e:	b006      	add	sp, #24
1004d1a0:	bd80      	pop	{r7, pc}
1004d1a2:	46c0      	nop			@ (mov r8, r8)
1004d1a4:	ffff0fff 	.word	0xffff0fff

1004d1a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
1004d1a8:	b580      	push	{r7, lr}
1004d1aa:	b084      	sub	sp, #16
1004d1ac:	af00      	add	r7, sp, #0
1004d1ae:	6078      	str	r0, [r7, #4]
1004d1b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
1004d1b2:	687b      	ldr	r3, [r7, #4]
1004d1b4:	689b      	ldr	r3, [r3, #8]
1004d1b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
1004d1b8:	68fb      	ldr	r3, [r7, #12]
1004d1ba:	2270      	movs	r2, #112	@ 0x70
1004d1bc:	4393      	bics	r3, r2
1004d1be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
1004d1c0:	683a      	ldr	r2, [r7, #0]
1004d1c2:	68fb      	ldr	r3, [r7, #12]
1004d1c4:	4313      	orrs	r3, r2
1004d1c6:	2207      	movs	r2, #7
1004d1c8:	4313      	orrs	r3, r2
1004d1ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004d1cc:	687b      	ldr	r3, [r7, #4]
1004d1ce:	68fa      	ldr	r2, [r7, #12]
1004d1d0:	609a      	str	r2, [r3, #8]
}
1004d1d2:	46c0      	nop			@ (mov r8, r8)
1004d1d4:	46bd      	mov	sp, r7
1004d1d6:	b004      	add	sp, #16
1004d1d8:	bd80      	pop	{r7, pc}
	...

1004d1dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
1004d1dc:	b580      	push	{r7, lr}
1004d1de:	b086      	sub	sp, #24
1004d1e0:	af00      	add	r7, sp, #0
1004d1e2:	60f8      	str	r0, [r7, #12]
1004d1e4:	60b9      	str	r1, [r7, #8]
1004d1e6:	607a      	str	r2, [r7, #4]
1004d1e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
1004d1ea:	68fb      	ldr	r3, [r7, #12]
1004d1ec:	689b      	ldr	r3, [r3, #8]
1004d1ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
1004d1f0:	697b      	ldr	r3, [r7, #20]
1004d1f2:	4a09      	ldr	r2, [pc, #36]	@ (1004d218 <TIM_ETR_SetConfig+0x3c>)
1004d1f4:	4013      	ands	r3, r2
1004d1f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
1004d1f8:	683b      	ldr	r3, [r7, #0]
1004d1fa:	021a      	lsls	r2, r3, #8
1004d1fc:	687b      	ldr	r3, [r7, #4]
1004d1fe:	431a      	orrs	r2, r3
1004d200:	68bb      	ldr	r3, [r7, #8]
1004d202:	4313      	orrs	r3, r2
1004d204:	697a      	ldr	r2, [r7, #20]
1004d206:	4313      	orrs	r3, r2
1004d208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
1004d20a:	68fb      	ldr	r3, [r7, #12]
1004d20c:	697a      	ldr	r2, [r7, #20]
1004d20e:	609a      	str	r2, [r3, #8]
}
1004d210:	46c0      	nop			@ (mov r8, r8)
1004d212:	46bd      	mov	sp, r7
1004d214:	b006      	add	sp, #24
1004d216:	bd80      	pop	{r7, pc}
1004d218:	ffff00ff 	.word	0xffff00ff

1004d21c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
1004d21c:	b580      	push	{r7, lr}
1004d21e:	b082      	sub	sp, #8
1004d220:	af00      	add	r7, sp, #0
1004d222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
1004d224:	46c0      	nop			@ (mov r8, r8)
1004d226:	46bd      	mov	sp, r7
1004d228:	b002      	add	sp, #8
1004d22a:	bd80      	pop	{r7, pc}

1004d22c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
1004d22c:	b580      	push	{r7, lr}
1004d22e:	b082      	sub	sp, #8
1004d230:	af00      	add	r7, sp, #0
1004d232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
1004d234:	46c0      	nop			@ (mov r8, r8)
1004d236:	46bd      	mov	sp, r7
1004d238:	b002      	add	sp, #8
1004d23a:	bd80      	pop	{r7, pc}

1004d23c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
1004d23c:	b580      	push	{r7, lr}
1004d23e:	b082      	sub	sp, #8
1004d240:	af00      	add	r7, sp, #0
1004d242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
1004d244:	687b      	ldr	r3, [r7, #4]
1004d246:	2b00      	cmp	r3, #0
1004d248:	d101      	bne.n	1004d24e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
1004d24a:	2301      	movs	r3, #1
1004d24c:	e055      	b.n	1004d2fa <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
1004d24e:	687b      	ldr	r3, [r7, #4]
1004d250:	2288      	movs	r2, #136	@ 0x88
1004d252:	589b      	ldr	r3, [r3, r2]
1004d254:	2b00      	cmp	r3, #0
1004d256:	d116      	bne.n	1004d286 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
1004d258:	687b      	ldr	r3, [r7, #4]
1004d25a:	2284      	movs	r2, #132	@ 0x84
1004d25c:	2100      	movs	r1, #0
1004d25e:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
1004d260:	687b      	ldr	r3, [r7, #4]
1004d262:	0018      	movs	r0, r3
1004d264:	f000 fca2 	bl	1004dbac <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
1004d268:	687b      	ldr	r3, [r7, #4]
1004d26a:	22c4      	movs	r2, #196	@ 0xc4
1004d26c:	589b      	ldr	r3, [r3, r2]
1004d26e:	2b00      	cmp	r3, #0
1004d270:	d103      	bne.n	1004d27a <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
1004d272:	687b      	ldr	r3, [r7, #4]
1004d274:	21c4      	movs	r1, #196	@ 0xc4
1004d276:	4a23      	ldr	r2, [pc, #140]	@ (1004d304 <HAL_UART_Init+0xc8>)
1004d278:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
1004d27a:	687b      	ldr	r3, [r7, #4]
1004d27c:	22c4      	movs	r2, #196	@ 0xc4
1004d27e:	589b      	ldr	r3, [r3, r2]
1004d280:	687a      	ldr	r2, [r7, #4]
1004d282:	0010      	movs	r0, r2
1004d284:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
1004d286:	687b      	ldr	r3, [r7, #4]
1004d288:	2288      	movs	r2, #136	@ 0x88
1004d28a:	2124      	movs	r1, #36	@ 0x24
1004d28c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
1004d28e:	687b      	ldr	r3, [r7, #4]
1004d290:	681b      	ldr	r3, [r3, #0]
1004d292:	681a      	ldr	r2, [r3, #0]
1004d294:	687b      	ldr	r3, [r7, #4]
1004d296:	681b      	ldr	r3, [r3, #0]
1004d298:	2101      	movs	r1, #1
1004d29a:	438a      	bics	r2, r1
1004d29c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
1004d29e:	687b      	ldr	r3, [r7, #4]
1004d2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004d2a2:	2b00      	cmp	r3, #0
1004d2a4:	d003      	beq.n	1004d2ae <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
1004d2a6:	687b      	ldr	r3, [r7, #4]
1004d2a8:	0018      	movs	r0, r3
1004d2aa:	f000 fe37 	bl	1004df1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
1004d2ae:	687b      	ldr	r3, [r7, #4]
1004d2b0:	0018      	movs	r0, r3
1004d2b2:	f000 fccb 	bl	1004dc4c <UART_SetConfig>
1004d2b6:	0003      	movs	r3, r0
1004d2b8:	2b01      	cmp	r3, #1
1004d2ba:	d101      	bne.n	1004d2c0 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
1004d2bc:	2301      	movs	r3, #1
1004d2be:	e01c      	b.n	1004d2fa <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1004d2c0:	687b      	ldr	r3, [r7, #4]
1004d2c2:	681b      	ldr	r3, [r3, #0]
1004d2c4:	685a      	ldr	r2, [r3, #4]
1004d2c6:	687b      	ldr	r3, [r7, #4]
1004d2c8:	681b      	ldr	r3, [r3, #0]
1004d2ca:	490f      	ldr	r1, [pc, #60]	@ (1004d308 <HAL_UART_Init+0xcc>)
1004d2cc:	400a      	ands	r2, r1
1004d2ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1004d2d0:	687b      	ldr	r3, [r7, #4]
1004d2d2:	681b      	ldr	r3, [r3, #0]
1004d2d4:	689a      	ldr	r2, [r3, #8]
1004d2d6:	687b      	ldr	r3, [r7, #4]
1004d2d8:	681b      	ldr	r3, [r3, #0]
1004d2da:	212a      	movs	r1, #42	@ 0x2a
1004d2dc:	438a      	bics	r2, r1
1004d2de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
1004d2e0:	687b      	ldr	r3, [r7, #4]
1004d2e2:	681b      	ldr	r3, [r3, #0]
1004d2e4:	681a      	ldr	r2, [r3, #0]
1004d2e6:	687b      	ldr	r3, [r7, #4]
1004d2e8:	681b      	ldr	r3, [r3, #0]
1004d2ea:	2101      	movs	r1, #1
1004d2ec:	430a      	orrs	r2, r1
1004d2ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
1004d2f0:	687b      	ldr	r3, [r7, #4]
1004d2f2:	0018      	movs	r0, r3
1004d2f4:	f000 fec6 	bl	1004e084 <UART_CheckIdleState>
1004d2f8:	0003      	movs	r3, r0
}
1004d2fa:	0018      	movs	r0, r3
1004d2fc:	46bd      	mov	sp, r7
1004d2fe:	b002      	add	sp, #8
1004d300:	bd80      	pop	{r7, pc}
1004d302:	46c0      	nop			@ (mov r8, r8)
1004d304:	10046341 	.word	0x10046341
1004d308:	ffffb7ff 	.word	0xffffb7ff

1004d30c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
1004d30c:	b580      	push	{r7, lr}
1004d30e:	b086      	sub	sp, #24
1004d310:	af00      	add	r7, sp, #0
1004d312:	60f8      	str	r0, [r7, #12]
1004d314:	607a      	str	r2, [r7, #4]
1004d316:	230b      	movs	r3, #11
1004d318:	18fb      	adds	r3, r7, r3
1004d31a:	1c0a      	adds	r2, r1, #0
1004d31c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
1004d31e:	2317      	movs	r3, #23
1004d320:	18fb      	adds	r3, r7, r3
1004d322:	2200      	movs	r2, #0
1004d324:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
1004d326:	687b      	ldr	r3, [r7, #4]
1004d328:	2b00      	cmp	r3, #0
1004d32a:	d109      	bne.n	1004d340 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1004d32c:	68fb      	ldr	r3, [r7, #12]
1004d32e:	2290      	movs	r2, #144	@ 0x90
1004d330:	589b      	ldr	r3, [r3, r2]
1004d332:	2240      	movs	r2, #64	@ 0x40
1004d334:	431a      	orrs	r2, r3
1004d336:	68fb      	ldr	r3, [r7, #12]
1004d338:	2190      	movs	r1, #144	@ 0x90
1004d33a:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
1004d33c:	2301      	movs	r3, #1
1004d33e:	e08f      	b.n	1004d460 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
1004d340:	68fb      	ldr	r3, [r7, #12]
1004d342:	2288      	movs	r2, #136	@ 0x88
1004d344:	589b      	ldr	r3, [r3, r2]
1004d346:	2b20      	cmp	r3, #32
1004d348:	d157      	bne.n	1004d3fa <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
1004d34a:	230b      	movs	r3, #11
1004d34c:	18fb      	adds	r3, r7, r3
1004d34e:	781b      	ldrb	r3, [r3, #0]
1004d350:	2b0c      	cmp	r3, #12
1004d352:	d845      	bhi.n	1004d3e0 <HAL_UART_RegisterCallback+0xd4>
1004d354:	009a      	lsls	r2, r3, #2
1004d356:	4b44      	ldr	r3, [pc, #272]	@ (1004d468 <HAL_UART_RegisterCallback+0x15c>)
1004d358:	18d3      	adds	r3, r2, r3
1004d35a:	681b      	ldr	r3, [r3, #0]
1004d35c:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
1004d35e:	68fb      	ldr	r3, [r7, #12]
1004d360:	2194      	movs	r1, #148	@ 0x94
1004d362:	687a      	ldr	r2, [r7, #4]
1004d364:	505a      	str	r2, [r3, r1]
        break;
1004d366:	e078      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
1004d368:	68fb      	ldr	r3, [r7, #12]
1004d36a:	2198      	movs	r1, #152	@ 0x98
1004d36c:	687a      	ldr	r2, [r7, #4]
1004d36e:	505a      	str	r2, [r3, r1]
        break;
1004d370:	e073      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
1004d372:	68fb      	ldr	r3, [r7, #12]
1004d374:	219c      	movs	r1, #156	@ 0x9c
1004d376:	687a      	ldr	r2, [r7, #4]
1004d378:	505a      	str	r2, [r3, r1]
        break;
1004d37a:	e06e      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
1004d37c:	68fb      	ldr	r3, [r7, #12]
1004d37e:	21a0      	movs	r1, #160	@ 0xa0
1004d380:	687a      	ldr	r2, [r7, #4]
1004d382:	505a      	str	r2, [r3, r1]
        break;
1004d384:	e069      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
1004d386:	68fb      	ldr	r3, [r7, #12]
1004d388:	21a4      	movs	r1, #164	@ 0xa4
1004d38a:	687a      	ldr	r2, [r7, #4]
1004d38c:	505a      	str	r2, [r3, r1]
        break;
1004d38e:	e064      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
1004d390:	68fb      	ldr	r3, [r7, #12]
1004d392:	21a8      	movs	r1, #168	@ 0xa8
1004d394:	687a      	ldr	r2, [r7, #4]
1004d396:	505a      	str	r2, [r3, r1]
        break;
1004d398:	e05f      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
1004d39a:	68fb      	ldr	r3, [r7, #12]
1004d39c:	21ac      	movs	r1, #172	@ 0xac
1004d39e:	687a      	ldr	r2, [r7, #4]
1004d3a0:	505a      	str	r2, [r3, r1]
        break;
1004d3a2:	e05a      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
1004d3a4:	68fb      	ldr	r3, [r7, #12]
1004d3a6:	21b0      	movs	r1, #176	@ 0xb0
1004d3a8:	687a      	ldr	r2, [r7, #4]
1004d3aa:	505a      	str	r2, [r3, r1]
        break;
1004d3ac:	e055      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
1004d3ae:	68fb      	ldr	r3, [r7, #12]
1004d3b0:	21b4      	movs	r1, #180	@ 0xb4
1004d3b2:	687a      	ldr	r2, [r7, #4]
1004d3b4:	505a      	str	r2, [r3, r1]
        break;
1004d3b6:	e050      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
1004d3b8:	68fb      	ldr	r3, [r7, #12]
1004d3ba:	21b8      	movs	r1, #184	@ 0xb8
1004d3bc:	687a      	ldr	r2, [r7, #4]
1004d3be:	505a      	str	r2, [r3, r1]
        break;
1004d3c0:	e04b      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
1004d3c2:	68fb      	ldr	r3, [r7, #12]
1004d3c4:	21bc      	movs	r1, #188	@ 0xbc
1004d3c6:	687a      	ldr	r2, [r7, #4]
1004d3c8:	505a      	str	r2, [r3, r1]
        break;
1004d3ca:	e046      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
1004d3cc:	68fb      	ldr	r3, [r7, #12]
1004d3ce:	21c4      	movs	r1, #196	@ 0xc4
1004d3d0:	687a      	ldr	r2, [r7, #4]
1004d3d2:	505a      	str	r2, [r3, r1]
        break;
1004d3d4:	e041      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
1004d3d6:	68fb      	ldr	r3, [r7, #12]
1004d3d8:	21c8      	movs	r1, #200	@ 0xc8
1004d3da:	687a      	ldr	r2, [r7, #4]
1004d3dc:	505a      	str	r2, [r3, r1]
        break;
1004d3de:	e03c      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1004d3e0:	68fb      	ldr	r3, [r7, #12]
1004d3e2:	2290      	movs	r2, #144	@ 0x90
1004d3e4:	589b      	ldr	r3, [r3, r2]
1004d3e6:	2240      	movs	r2, #64	@ 0x40
1004d3e8:	431a      	orrs	r2, r3
1004d3ea:	68fb      	ldr	r3, [r7, #12]
1004d3ec:	2190      	movs	r1, #144	@ 0x90
1004d3ee:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
1004d3f0:	2317      	movs	r3, #23
1004d3f2:	18fb      	adds	r3, r7, r3
1004d3f4:	2201      	movs	r2, #1
1004d3f6:	701a      	strb	r2, [r3, #0]
        break;
1004d3f8:	e02f      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
1004d3fa:	68fb      	ldr	r3, [r7, #12]
1004d3fc:	2288      	movs	r2, #136	@ 0x88
1004d3fe:	589b      	ldr	r3, [r3, r2]
1004d400:	2b00      	cmp	r3, #0
1004d402:	d11e      	bne.n	1004d442 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
1004d404:	230b      	movs	r3, #11
1004d406:	18fb      	adds	r3, r7, r3
1004d408:	781b      	ldrb	r3, [r3, #0]
1004d40a:	2b0b      	cmp	r3, #11
1004d40c:	d002      	beq.n	1004d414 <HAL_UART_RegisterCallback+0x108>
1004d40e:	2b0c      	cmp	r3, #12
1004d410:	d005      	beq.n	1004d41e <HAL_UART_RegisterCallback+0x112>
1004d412:	e009      	b.n	1004d428 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
1004d414:	68fb      	ldr	r3, [r7, #12]
1004d416:	21c4      	movs	r1, #196	@ 0xc4
1004d418:	687a      	ldr	r2, [r7, #4]
1004d41a:	505a      	str	r2, [r3, r1]
        break;
1004d41c:	e01d      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
1004d41e:	68fb      	ldr	r3, [r7, #12]
1004d420:	21c8      	movs	r1, #200	@ 0xc8
1004d422:	687a      	ldr	r2, [r7, #4]
1004d424:	505a      	str	r2, [r3, r1]
        break;
1004d426:	e018      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1004d428:	68fb      	ldr	r3, [r7, #12]
1004d42a:	2290      	movs	r2, #144	@ 0x90
1004d42c:	589b      	ldr	r3, [r3, r2]
1004d42e:	2240      	movs	r2, #64	@ 0x40
1004d430:	431a      	orrs	r2, r3
1004d432:	68fb      	ldr	r3, [r7, #12]
1004d434:	2190      	movs	r1, #144	@ 0x90
1004d436:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
1004d438:	2317      	movs	r3, #23
1004d43a:	18fb      	adds	r3, r7, r3
1004d43c:	2201      	movs	r2, #1
1004d43e:	701a      	strb	r2, [r3, #0]
        break;
1004d440:	e00b      	b.n	1004d45a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
1004d442:	68fb      	ldr	r3, [r7, #12]
1004d444:	2290      	movs	r2, #144	@ 0x90
1004d446:	589b      	ldr	r3, [r3, r2]
1004d448:	2240      	movs	r2, #64	@ 0x40
1004d44a:	431a      	orrs	r2, r3
1004d44c:	68fb      	ldr	r3, [r7, #12]
1004d44e:	2190      	movs	r1, #144	@ 0x90
1004d450:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
1004d452:	2317      	movs	r3, #23
1004d454:	18fb      	adds	r3, r7, r3
1004d456:	2201      	movs	r2, #1
1004d458:	701a      	strb	r2, [r3, #0]
  }

  return status;
1004d45a:	2317      	movs	r3, #23
1004d45c:	18fb      	adds	r3, r7, r3
1004d45e:	781b      	ldrb	r3, [r3, #0]
}
1004d460:	0018      	movs	r0, r3
1004d462:	46bd      	mov	sp, r7
1004d464:	b006      	add	sp, #24
1004d466:	bd80      	pop	{r7, pc}
1004d468:	10069448 	.word	0x10069448

1004d46c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
1004d46c:	b5b0      	push	{r4, r5, r7, lr}
1004d46e:	b0aa      	sub	sp, #168	@ 0xa8
1004d470:	af00      	add	r7, sp, #0
1004d472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
1004d474:	687b      	ldr	r3, [r7, #4]
1004d476:	681b      	ldr	r3, [r3, #0]
1004d478:	69db      	ldr	r3, [r3, #28]
1004d47a:	22a4      	movs	r2, #164	@ 0xa4
1004d47c:	18b9      	adds	r1, r7, r2
1004d47e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
1004d480:	687b      	ldr	r3, [r7, #4]
1004d482:	681b      	ldr	r3, [r3, #0]
1004d484:	681b      	ldr	r3, [r3, #0]
1004d486:	20a0      	movs	r0, #160	@ 0xa0
1004d488:	1839      	adds	r1, r7, r0
1004d48a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
1004d48c:	687b      	ldr	r3, [r7, #4]
1004d48e:	681b      	ldr	r3, [r3, #0]
1004d490:	689b      	ldr	r3, [r3, #8]
1004d492:	249c      	movs	r4, #156	@ 0x9c
1004d494:	1939      	adds	r1, r7, r4
1004d496:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
1004d498:	0011      	movs	r1, r2
1004d49a:	18bb      	adds	r3, r7, r2
1004d49c:	681b      	ldr	r3, [r3, #0]
1004d49e:	4aa5      	ldr	r2, [pc, #660]	@ (1004d734 <HAL_UART_IRQHandler+0x2c8>)
1004d4a0:	4013      	ands	r3, r2
1004d4a2:	2298      	movs	r2, #152	@ 0x98
1004d4a4:	18bd      	adds	r5, r7, r2
1004d4a6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
1004d4a8:	18bb      	adds	r3, r7, r2
1004d4aa:	681b      	ldr	r3, [r3, #0]
1004d4ac:	2b00      	cmp	r3, #0
1004d4ae:	d11a      	bne.n	1004d4e6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004d4b0:	187b      	adds	r3, r7, r1
1004d4b2:	681b      	ldr	r3, [r3, #0]
1004d4b4:	2220      	movs	r2, #32
1004d4b6:	4013      	ands	r3, r2
1004d4b8:	d015      	beq.n	1004d4e6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004d4ba:	183b      	adds	r3, r7, r0
1004d4bc:	681b      	ldr	r3, [r3, #0]
1004d4be:	2220      	movs	r2, #32
1004d4c0:	4013      	ands	r3, r2
1004d4c2:	d105      	bne.n	1004d4d0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004d4c4:	193b      	adds	r3, r7, r4
1004d4c6:	681a      	ldr	r2, [r3, #0]
1004d4c8:	2380      	movs	r3, #128	@ 0x80
1004d4ca:	055b      	lsls	r3, r3, #21
1004d4cc:	4013      	ands	r3, r2
1004d4ce:	d00a      	beq.n	1004d4e6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
1004d4d0:	687b      	ldr	r3, [r7, #4]
1004d4d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004d4d4:	2b00      	cmp	r3, #0
1004d4d6:	d100      	bne.n	1004d4da <HAL_UART_IRQHandler+0x6e>
1004d4d8:	e30a      	b.n	1004daf0 <HAL_UART_IRQHandler+0x684>
      {
        huart->RxISR(huart);
1004d4da:	687b      	ldr	r3, [r7, #4]
1004d4dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004d4de:	687a      	ldr	r2, [r7, #4]
1004d4e0:	0010      	movs	r0, r2
1004d4e2:	4798      	blx	r3
      }
      return;
1004d4e4:	e304      	b.n	1004daf0 <HAL_UART_IRQHandler+0x684>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
1004d4e6:	2398      	movs	r3, #152	@ 0x98
1004d4e8:	18fb      	adds	r3, r7, r3
1004d4ea:	681b      	ldr	r3, [r3, #0]
1004d4ec:	2b00      	cmp	r3, #0
1004d4ee:	d100      	bne.n	1004d4f2 <HAL_UART_IRQHandler+0x86>
1004d4f0:	e128      	b.n	1004d744 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004d4f2:	239c      	movs	r3, #156	@ 0x9c
1004d4f4:	18fb      	adds	r3, r7, r3
1004d4f6:	681b      	ldr	r3, [r3, #0]
1004d4f8:	4a8f      	ldr	r2, [pc, #572]	@ (1004d738 <HAL_UART_IRQHandler+0x2cc>)
1004d4fa:	4013      	ands	r3, r2
1004d4fc:	d106      	bne.n	1004d50c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
1004d4fe:	23a0      	movs	r3, #160	@ 0xa0
1004d500:	18fb      	adds	r3, r7, r3
1004d502:	681b      	ldr	r3, [r3, #0]
1004d504:	4a8d      	ldr	r2, [pc, #564]	@ (1004d73c <HAL_UART_IRQHandler+0x2d0>)
1004d506:	4013      	ands	r3, r2
1004d508:	d100      	bne.n	1004d50c <HAL_UART_IRQHandler+0xa0>
1004d50a:	e11b      	b.n	1004d744 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004d50c:	23a4      	movs	r3, #164	@ 0xa4
1004d50e:	18fb      	adds	r3, r7, r3
1004d510:	681b      	ldr	r3, [r3, #0]
1004d512:	2201      	movs	r2, #1
1004d514:	4013      	ands	r3, r2
1004d516:	d012      	beq.n	1004d53e <HAL_UART_IRQHandler+0xd2>
1004d518:	23a0      	movs	r3, #160	@ 0xa0
1004d51a:	18fb      	adds	r3, r7, r3
1004d51c:	681a      	ldr	r2, [r3, #0]
1004d51e:	2380      	movs	r3, #128	@ 0x80
1004d520:	005b      	lsls	r3, r3, #1
1004d522:	4013      	ands	r3, r2
1004d524:	d00b      	beq.n	1004d53e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
1004d526:	687b      	ldr	r3, [r7, #4]
1004d528:	681b      	ldr	r3, [r3, #0]
1004d52a:	2201      	movs	r2, #1
1004d52c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
1004d52e:	687b      	ldr	r3, [r7, #4]
1004d530:	2290      	movs	r2, #144	@ 0x90
1004d532:	589b      	ldr	r3, [r3, r2]
1004d534:	2201      	movs	r2, #1
1004d536:	431a      	orrs	r2, r3
1004d538:	687b      	ldr	r3, [r7, #4]
1004d53a:	2190      	movs	r1, #144	@ 0x90
1004d53c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004d53e:	23a4      	movs	r3, #164	@ 0xa4
1004d540:	18fb      	adds	r3, r7, r3
1004d542:	681b      	ldr	r3, [r3, #0]
1004d544:	2202      	movs	r2, #2
1004d546:	4013      	ands	r3, r2
1004d548:	d011      	beq.n	1004d56e <HAL_UART_IRQHandler+0x102>
1004d54a:	239c      	movs	r3, #156	@ 0x9c
1004d54c:	18fb      	adds	r3, r7, r3
1004d54e:	681b      	ldr	r3, [r3, #0]
1004d550:	2201      	movs	r2, #1
1004d552:	4013      	ands	r3, r2
1004d554:	d00b      	beq.n	1004d56e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
1004d556:	687b      	ldr	r3, [r7, #4]
1004d558:	681b      	ldr	r3, [r3, #0]
1004d55a:	2202      	movs	r2, #2
1004d55c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
1004d55e:	687b      	ldr	r3, [r7, #4]
1004d560:	2290      	movs	r2, #144	@ 0x90
1004d562:	589b      	ldr	r3, [r3, r2]
1004d564:	2204      	movs	r2, #4
1004d566:	431a      	orrs	r2, r3
1004d568:	687b      	ldr	r3, [r7, #4]
1004d56a:	2190      	movs	r1, #144	@ 0x90
1004d56c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004d56e:	23a4      	movs	r3, #164	@ 0xa4
1004d570:	18fb      	adds	r3, r7, r3
1004d572:	681b      	ldr	r3, [r3, #0]
1004d574:	2204      	movs	r2, #4
1004d576:	4013      	ands	r3, r2
1004d578:	d011      	beq.n	1004d59e <HAL_UART_IRQHandler+0x132>
1004d57a:	239c      	movs	r3, #156	@ 0x9c
1004d57c:	18fb      	adds	r3, r7, r3
1004d57e:	681b      	ldr	r3, [r3, #0]
1004d580:	2201      	movs	r2, #1
1004d582:	4013      	ands	r3, r2
1004d584:	d00b      	beq.n	1004d59e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
1004d586:	687b      	ldr	r3, [r7, #4]
1004d588:	681b      	ldr	r3, [r3, #0]
1004d58a:	2204      	movs	r2, #4
1004d58c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
1004d58e:	687b      	ldr	r3, [r7, #4]
1004d590:	2290      	movs	r2, #144	@ 0x90
1004d592:	589b      	ldr	r3, [r3, r2]
1004d594:	2202      	movs	r2, #2
1004d596:	431a      	orrs	r2, r3
1004d598:	687b      	ldr	r3, [r7, #4]
1004d59a:	2190      	movs	r1, #144	@ 0x90
1004d59c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004d59e:	23a4      	movs	r3, #164	@ 0xa4
1004d5a0:	18fb      	adds	r3, r7, r3
1004d5a2:	681b      	ldr	r3, [r3, #0]
1004d5a4:	2208      	movs	r2, #8
1004d5a6:	4013      	ands	r3, r2
1004d5a8:	d017      	beq.n	1004d5da <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004d5aa:	23a0      	movs	r3, #160	@ 0xa0
1004d5ac:	18fb      	adds	r3, r7, r3
1004d5ae:	681b      	ldr	r3, [r3, #0]
1004d5b0:	2220      	movs	r2, #32
1004d5b2:	4013      	ands	r3, r2
1004d5b4:	d105      	bne.n	1004d5c2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
1004d5b6:	239c      	movs	r3, #156	@ 0x9c
1004d5b8:	18fb      	adds	r3, r7, r3
1004d5ba:	681b      	ldr	r3, [r3, #0]
1004d5bc:	4a5e      	ldr	r2, [pc, #376]	@ (1004d738 <HAL_UART_IRQHandler+0x2cc>)
1004d5be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004d5c0:	d00b      	beq.n	1004d5da <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004d5c2:	687b      	ldr	r3, [r7, #4]
1004d5c4:	681b      	ldr	r3, [r3, #0]
1004d5c6:	2208      	movs	r2, #8
1004d5c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
1004d5ca:	687b      	ldr	r3, [r7, #4]
1004d5cc:	2290      	movs	r2, #144	@ 0x90
1004d5ce:	589b      	ldr	r3, [r3, r2]
1004d5d0:	2208      	movs	r2, #8
1004d5d2:	431a      	orrs	r2, r3
1004d5d4:	687b      	ldr	r3, [r7, #4]
1004d5d6:	2190      	movs	r1, #144	@ 0x90
1004d5d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
1004d5da:	23a4      	movs	r3, #164	@ 0xa4
1004d5dc:	18fb      	adds	r3, r7, r3
1004d5de:	681a      	ldr	r2, [r3, #0]
1004d5e0:	2380      	movs	r3, #128	@ 0x80
1004d5e2:	011b      	lsls	r3, r3, #4
1004d5e4:	4013      	ands	r3, r2
1004d5e6:	d013      	beq.n	1004d610 <HAL_UART_IRQHandler+0x1a4>
1004d5e8:	23a0      	movs	r3, #160	@ 0xa0
1004d5ea:	18fb      	adds	r3, r7, r3
1004d5ec:	681a      	ldr	r2, [r3, #0]
1004d5ee:	2380      	movs	r3, #128	@ 0x80
1004d5f0:	04db      	lsls	r3, r3, #19
1004d5f2:	4013      	ands	r3, r2
1004d5f4:	d00c      	beq.n	1004d610 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004d5f6:	687b      	ldr	r3, [r7, #4]
1004d5f8:	681b      	ldr	r3, [r3, #0]
1004d5fa:	2280      	movs	r2, #128	@ 0x80
1004d5fc:	0112      	lsls	r2, r2, #4
1004d5fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
1004d600:	687b      	ldr	r3, [r7, #4]
1004d602:	2290      	movs	r2, #144	@ 0x90
1004d604:	589b      	ldr	r3, [r3, r2]
1004d606:	2220      	movs	r2, #32
1004d608:	431a      	orrs	r2, r3
1004d60a:	687b      	ldr	r3, [r7, #4]
1004d60c:	2190      	movs	r1, #144	@ 0x90
1004d60e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
1004d610:	687b      	ldr	r3, [r7, #4]
1004d612:	2290      	movs	r2, #144	@ 0x90
1004d614:	589b      	ldr	r3, [r3, r2]
1004d616:	2b00      	cmp	r3, #0
1004d618:	d100      	bne.n	1004d61c <HAL_UART_IRQHandler+0x1b0>
1004d61a:	e26b      	b.n	1004daf4 <HAL_UART_IRQHandler+0x688>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004d61c:	23a4      	movs	r3, #164	@ 0xa4
1004d61e:	18fb      	adds	r3, r7, r3
1004d620:	681b      	ldr	r3, [r3, #0]
1004d622:	2220      	movs	r2, #32
1004d624:	4013      	ands	r3, r2
1004d626:	d015      	beq.n	1004d654 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004d628:	23a0      	movs	r3, #160	@ 0xa0
1004d62a:	18fb      	adds	r3, r7, r3
1004d62c:	681b      	ldr	r3, [r3, #0]
1004d62e:	2220      	movs	r2, #32
1004d630:	4013      	ands	r3, r2
1004d632:	d106      	bne.n	1004d642 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004d634:	239c      	movs	r3, #156	@ 0x9c
1004d636:	18fb      	adds	r3, r7, r3
1004d638:	681a      	ldr	r2, [r3, #0]
1004d63a:	2380      	movs	r3, #128	@ 0x80
1004d63c:	055b      	lsls	r3, r3, #21
1004d63e:	4013      	ands	r3, r2
1004d640:	d008      	beq.n	1004d654 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
1004d642:	687b      	ldr	r3, [r7, #4]
1004d644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004d646:	2b00      	cmp	r3, #0
1004d648:	d004      	beq.n	1004d654 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
1004d64a:	687b      	ldr	r3, [r7, #4]
1004d64c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
1004d64e:	687a      	ldr	r2, [r7, #4]
1004d650:	0010      	movs	r0, r2
1004d652:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
1004d654:	687b      	ldr	r3, [r7, #4]
1004d656:	2290      	movs	r2, #144	@ 0x90
1004d658:	589b      	ldr	r3, [r3, r2]
1004d65a:	2194      	movs	r1, #148	@ 0x94
1004d65c:	187a      	adds	r2, r7, r1
1004d65e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
1004d660:	687b      	ldr	r3, [r7, #4]
1004d662:	681b      	ldr	r3, [r3, #0]
1004d664:	689b      	ldr	r3, [r3, #8]
1004d666:	2240      	movs	r2, #64	@ 0x40
1004d668:	4013      	ands	r3, r2
1004d66a:	2b40      	cmp	r3, #64	@ 0x40
1004d66c:	d004      	beq.n	1004d678 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
1004d66e:	187b      	adds	r3, r7, r1
1004d670:	681b      	ldr	r3, [r3, #0]
1004d672:	2228      	movs	r2, #40	@ 0x28
1004d674:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
1004d676:	d050      	beq.n	1004d71a <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
1004d678:	687b      	ldr	r3, [r7, #4]
1004d67a:	0018      	movs	r0, r3
1004d67c:	f000 fe1c 	bl	1004e2b8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004d680:	687b      	ldr	r3, [r7, #4]
1004d682:	681b      	ldr	r3, [r3, #0]
1004d684:	689b      	ldr	r3, [r3, #8]
1004d686:	2240      	movs	r2, #64	@ 0x40
1004d688:	4013      	ands	r3, r2
1004d68a:	2b40      	cmp	r3, #64	@ 0x40
1004d68c:	d13e      	bne.n	1004d70c <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004d68e:	f3ef 8310 	mrs	r3, PRIMASK
1004d692:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
1004d694:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1004d696:	2090      	movs	r0, #144	@ 0x90
1004d698:	183a      	adds	r2, r7, r0
1004d69a:	6013      	str	r3, [r2, #0]
1004d69c:	2301      	movs	r3, #1
1004d69e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d6a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
1004d6a2:	f383 8810 	msr	PRIMASK, r3
}
1004d6a6:	46c0      	nop			@ (mov r8, r8)
1004d6a8:	687b      	ldr	r3, [r7, #4]
1004d6aa:	681b      	ldr	r3, [r3, #0]
1004d6ac:	689a      	ldr	r2, [r3, #8]
1004d6ae:	687b      	ldr	r3, [r7, #4]
1004d6b0:	681b      	ldr	r3, [r3, #0]
1004d6b2:	2140      	movs	r1, #64	@ 0x40
1004d6b4:	438a      	bics	r2, r1
1004d6b6:	609a      	str	r2, [r3, #8]
1004d6b8:	183b      	adds	r3, r7, r0
1004d6ba:	681b      	ldr	r3, [r3, #0]
1004d6bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d6be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
1004d6c0:	f383 8810 	msr	PRIMASK, r3
}
1004d6c4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
1004d6c6:	687b      	ldr	r3, [r7, #4]
1004d6c8:	2280      	movs	r2, #128	@ 0x80
1004d6ca:	589b      	ldr	r3, [r3, r2]
1004d6cc:	2b00      	cmp	r3, #0
1004d6ce:	d016      	beq.n	1004d6fe <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
1004d6d0:	687b      	ldr	r3, [r7, #4]
1004d6d2:	2280      	movs	r2, #128	@ 0x80
1004d6d4:	589b      	ldr	r3, [r3, r2]
1004d6d6:	4a1a      	ldr	r2, [pc, #104]	@ (1004d740 <HAL_UART_IRQHandler+0x2d4>)
1004d6d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1004d6da:	687b      	ldr	r3, [r7, #4]
1004d6dc:	2280      	movs	r2, #128	@ 0x80
1004d6de:	589b      	ldr	r3, [r3, r2]
1004d6e0:	0018      	movs	r0, r3
1004d6e2:	f7f9 fe40 	bl	10047366 <HAL_DMA_Abort_IT>
1004d6e6:	1e03      	subs	r3, r0, #0
1004d6e8:	d022      	beq.n	1004d730 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
1004d6ea:	687b      	ldr	r3, [r7, #4]
1004d6ec:	2280      	movs	r2, #128	@ 0x80
1004d6ee:	589b      	ldr	r3, [r3, r2]
1004d6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
1004d6f2:	687a      	ldr	r2, [r7, #4]
1004d6f4:	2180      	movs	r1, #128	@ 0x80
1004d6f6:	5852      	ldr	r2, [r2, r1]
1004d6f8:	0010      	movs	r0, r2
1004d6fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004d6fc:	e018      	b.n	1004d730 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
1004d6fe:	687b      	ldr	r3, [r7, #4]
1004d700:	22a4      	movs	r2, #164	@ 0xa4
1004d702:	589b      	ldr	r3, [r3, r2]
1004d704:	687a      	ldr	r2, [r7, #4]
1004d706:	0010      	movs	r0, r2
1004d708:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004d70a:	e011      	b.n	1004d730 <HAL_UART_IRQHandler+0x2c4>
#endif /* HAL_DMA_MODULE_ENABLED */
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
1004d70c:	687b      	ldr	r3, [r7, #4]
1004d70e:	22a4      	movs	r2, #164	@ 0xa4
1004d710:	589b      	ldr	r3, [r3, r2]
1004d712:	687a      	ldr	r2, [r7, #4]
1004d714:	0010      	movs	r0, r2
1004d716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004d718:	e00a      	b.n	1004d730 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
1004d71a:	687b      	ldr	r3, [r7, #4]
1004d71c:	22a4      	movs	r2, #164	@ 0xa4
1004d71e:	589b      	ldr	r3, [r3, r2]
1004d720:	687a      	ldr	r2, [r7, #4]
1004d722:	0010      	movs	r0, r2
1004d724:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
1004d726:	687b      	ldr	r3, [r7, #4]
1004d728:	2290      	movs	r2, #144	@ 0x90
1004d72a:	2100      	movs	r1, #0
1004d72c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
1004d72e:	e1e1      	b.n	1004daf4 <HAL_UART_IRQHandler+0x688>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004d730:	46c0      	nop			@ (mov r8, r8)
    return;
1004d732:	e1df      	b.n	1004daf4 <HAL_UART_IRQHandler+0x688>
1004d734:	0000080f 	.word	0x0000080f
1004d738:	10000001 	.word	0x10000001
1004d73c:	04000120 	.word	0x04000120
1004d740:	1004e385 	.word	0x1004e385

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004d744:	687b      	ldr	r3, [r7, #4]
1004d746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004d748:	2b01      	cmp	r3, #1
1004d74a:	d000      	beq.n	1004d74e <HAL_UART_IRQHandler+0x2e2>
1004d74c:	e160      	b.n	1004da10 <HAL_UART_IRQHandler+0x5a4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
1004d74e:	23a4      	movs	r3, #164	@ 0xa4
1004d750:	18fb      	adds	r3, r7, r3
1004d752:	681b      	ldr	r3, [r3, #0]
1004d754:	2210      	movs	r2, #16
1004d756:	4013      	ands	r3, r2
1004d758:	d100      	bne.n	1004d75c <HAL_UART_IRQHandler+0x2f0>
1004d75a:	e159      	b.n	1004da10 <HAL_UART_IRQHandler+0x5a4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
1004d75c:	23a0      	movs	r3, #160	@ 0xa0
1004d75e:	18fb      	adds	r3, r7, r3
1004d760:	681b      	ldr	r3, [r3, #0]
1004d762:	2210      	movs	r2, #16
1004d764:	4013      	ands	r3, r2
1004d766:	d100      	bne.n	1004d76a <HAL_UART_IRQHandler+0x2fe>
1004d768:	e152      	b.n	1004da10 <HAL_UART_IRQHandler+0x5a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
1004d76a:	687b      	ldr	r3, [r7, #4]
1004d76c:	681b      	ldr	r3, [r3, #0]
1004d76e:	2210      	movs	r2, #16
1004d770:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1004d772:	687b      	ldr	r3, [r7, #4]
1004d774:	681b      	ldr	r3, [r3, #0]
1004d776:	689b      	ldr	r3, [r3, #8]
1004d778:	2240      	movs	r2, #64	@ 0x40
1004d77a:	4013      	ands	r3, r2
1004d77c:	2b40      	cmp	r3, #64	@ 0x40
1004d77e:	d000      	beq.n	1004d782 <HAL_UART_IRQHandler+0x316>
1004d780:	e0c5      	b.n	1004d90e <HAL_UART_IRQHandler+0x4a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
1004d782:	687b      	ldr	r3, [r7, #4]
1004d784:	2280      	movs	r2, #128	@ 0x80
1004d786:	589b      	ldr	r3, [r3, r2]
1004d788:	681b      	ldr	r3, [r3, #0]
1004d78a:	685a      	ldr	r2, [r3, #4]
1004d78c:	217e      	movs	r1, #126	@ 0x7e
1004d78e:	187b      	adds	r3, r7, r1
1004d790:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
1004d792:	187b      	adds	r3, r7, r1
1004d794:	881b      	ldrh	r3, [r3, #0]
1004d796:	2b00      	cmp	r3, #0
1004d798:	d100      	bne.n	1004d79c <HAL_UART_IRQHandler+0x330>
1004d79a:	e098      	b.n	1004d8ce <HAL_UART_IRQHandler+0x462>
          && (nb_remaining_rx_data < huart->RxXferSize))
1004d79c:	687b      	ldr	r3, [r7, #4]
1004d79e:	225c      	movs	r2, #92	@ 0x5c
1004d7a0:	5a9b      	ldrh	r3, [r3, r2]
1004d7a2:	187a      	adds	r2, r7, r1
1004d7a4:	8812      	ldrh	r2, [r2, #0]
1004d7a6:	429a      	cmp	r2, r3
1004d7a8:	d300      	bcc.n	1004d7ac <HAL_UART_IRQHandler+0x340>
1004d7aa:	e090      	b.n	1004d8ce <HAL_UART_IRQHandler+0x462>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
1004d7ac:	687b      	ldr	r3, [r7, #4]
1004d7ae:	187a      	adds	r2, r7, r1
1004d7b0:	215e      	movs	r1, #94	@ 0x5e
1004d7b2:	8812      	ldrh	r2, [r2, #0]
1004d7b4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
1004d7b6:	687b      	ldr	r3, [r7, #4]
1004d7b8:	2280      	movs	r2, #128	@ 0x80
1004d7ba:	589b      	ldr	r3, [r3, r2]
1004d7bc:	681b      	ldr	r3, [r3, #0]
1004d7be:	681b      	ldr	r3, [r3, #0]
1004d7c0:	2220      	movs	r2, #32
1004d7c2:	4013      	ands	r3, r2
1004d7c4:	d170      	bne.n	1004d8a8 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004d7c6:	f3ef 8310 	mrs	r3, PRIMASK
1004d7ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
1004d7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1004d7ce:	67bb      	str	r3, [r7, #120]	@ 0x78
1004d7d0:	2301      	movs	r3, #1
1004d7d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004d7d6:	f383 8810 	msr	PRIMASK, r3
}
1004d7da:	46c0      	nop			@ (mov r8, r8)
1004d7dc:	687b      	ldr	r3, [r7, #4]
1004d7de:	681b      	ldr	r3, [r3, #0]
1004d7e0:	681a      	ldr	r2, [r3, #0]
1004d7e2:	687b      	ldr	r3, [r7, #4]
1004d7e4:	681b      	ldr	r3, [r3, #0]
1004d7e6:	49c8      	ldr	r1, [pc, #800]	@ (1004db08 <HAL_UART_IRQHandler+0x69c>)
1004d7e8:	400a      	ands	r2, r1
1004d7ea:	601a      	str	r2, [r3, #0]
1004d7ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
1004d7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004d7f2:	f383 8810 	msr	PRIMASK, r3
}
1004d7f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004d7f8:	f3ef 8310 	mrs	r3, PRIMASK
1004d7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
1004d7fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004d800:	677b      	str	r3, [r7, #116]	@ 0x74
1004d802:	2301      	movs	r3, #1
1004d804:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004d808:	f383 8810 	msr	PRIMASK, r3
}
1004d80c:	46c0      	nop			@ (mov r8, r8)
1004d80e:	687b      	ldr	r3, [r7, #4]
1004d810:	681b      	ldr	r3, [r3, #0]
1004d812:	689a      	ldr	r2, [r3, #8]
1004d814:	687b      	ldr	r3, [r7, #4]
1004d816:	681b      	ldr	r3, [r3, #0]
1004d818:	2101      	movs	r1, #1
1004d81a:	438a      	bics	r2, r1
1004d81c:	609a      	str	r2, [r3, #8]
1004d81e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
1004d820:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004d824:	f383 8810 	msr	PRIMASK, r3
}
1004d828:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004d82a:	f3ef 8310 	mrs	r3, PRIMASK
1004d82e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
1004d830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1004d832:	673b      	str	r3, [r7, #112]	@ 0x70
1004d834:	2301      	movs	r3, #1
1004d836:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004d83a:	f383 8810 	msr	PRIMASK, r3
}
1004d83e:	46c0      	nop			@ (mov r8, r8)
1004d840:	687b      	ldr	r3, [r7, #4]
1004d842:	681b      	ldr	r3, [r3, #0]
1004d844:	689a      	ldr	r2, [r3, #8]
1004d846:	687b      	ldr	r3, [r7, #4]
1004d848:	681b      	ldr	r3, [r3, #0]
1004d84a:	2140      	movs	r1, #64	@ 0x40
1004d84c:	438a      	bics	r2, r1
1004d84e:	609a      	str	r2, [r3, #8]
1004d850:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
1004d852:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d854:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
1004d856:	f383 8810 	msr	PRIMASK, r3
}
1004d85a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
1004d85c:	687b      	ldr	r3, [r7, #4]
1004d85e:	228c      	movs	r2, #140	@ 0x8c
1004d860:	2120      	movs	r1, #32
1004d862:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004d864:	687b      	ldr	r3, [r7, #4]
1004d866:	2200      	movs	r2, #0
1004d868:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004d86a:	f3ef 8310 	mrs	r3, PRIMASK
1004d86e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
1004d870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004d872:	66fb      	str	r3, [r7, #108]	@ 0x6c
1004d874:	2301      	movs	r3, #1
1004d876:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
1004d87a:	f383 8810 	msr	PRIMASK, r3
}
1004d87e:	46c0      	nop			@ (mov r8, r8)
1004d880:	687b      	ldr	r3, [r7, #4]
1004d882:	681b      	ldr	r3, [r3, #0]
1004d884:	681a      	ldr	r2, [r3, #0]
1004d886:	687b      	ldr	r3, [r7, #4]
1004d888:	681b      	ldr	r3, [r3, #0]
1004d88a:	2110      	movs	r1, #16
1004d88c:	438a      	bics	r2, r1
1004d88e:	601a      	str	r2, [r3, #0]
1004d890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
1004d892:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d894:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
1004d896:	f383 8810 	msr	PRIMASK, r3
}
1004d89a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
1004d89c:	687b      	ldr	r3, [r7, #4]
1004d89e:	2280      	movs	r2, #128	@ 0x80
1004d8a0:	589b      	ldr	r3, [r3, r2]
1004d8a2:	0018      	movs	r0, r3
1004d8a4:	f7f9 fd20 	bl	100472e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
1004d8a8:	687b      	ldr	r3, [r7, #4]
1004d8aa:	2202      	movs	r2, #2
1004d8ac:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
1004d8ae:	687b      	ldr	r3, [r7, #4]
1004d8b0:	22c0      	movs	r2, #192	@ 0xc0
1004d8b2:	589b      	ldr	r3, [r3, r2]
1004d8b4:	687a      	ldr	r2, [r7, #4]
1004d8b6:	215c      	movs	r1, #92	@ 0x5c
1004d8b8:	5a51      	ldrh	r1, [r2, r1]
1004d8ba:	687a      	ldr	r2, [r7, #4]
1004d8bc:	205e      	movs	r0, #94	@ 0x5e
1004d8be:	5a12      	ldrh	r2, [r2, r0]
1004d8c0:	b292      	uxth	r2, r2
1004d8c2:	1a8a      	subs	r2, r1, r2
1004d8c4:	b291      	uxth	r1, r2
1004d8c6:	687a      	ldr	r2, [r7, #4]
1004d8c8:	0010      	movs	r0, r2
1004d8ca:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
1004d8cc:	e114      	b.n	1004daf8 <HAL_UART_IRQHandler+0x68c>
        if (nb_remaining_rx_data == huart->RxXferSize)
1004d8ce:	687b      	ldr	r3, [r7, #4]
1004d8d0:	225c      	movs	r2, #92	@ 0x5c
1004d8d2:	5a9b      	ldrh	r3, [r3, r2]
1004d8d4:	227e      	movs	r2, #126	@ 0x7e
1004d8d6:	18ba      	adds	r2, r7, r2
1004d8d8:	8812      	ldrh	r2, [r2, #0]
1004d8da:	429a      	cmp	r2, r3
1004d8dc:	d000      	beq.n	1004d8e0 <HAL_UART_IRQHandler+0x474>
1004d8de:	e10b      	b.n	1004daf8 <HAL_UART_IRQHandler+0x68c>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
1004d8e0:	687b      	ldr	r3, [r7, #4]
1004d8e2:	2280      	movs	r2, #128	@ 0x80
1004d8e4:	589b      	ldr	r3, [r3, r2]
1004d8e6:	681b      	ldr	r3, [r3, #0]
1004d8e8:	681b      	ldr	r3, [r3, #0]
1004d8ea:	2220      	movs	r2, #32
1004d8ec:	4013      	ands	r3, r2
1004d8ee:	2b20      	cmp	r3, #32
1004d8f0:	d000      	beq.n	1004d8f4 <HAL_UART_IRQHandler+0x488>
1004d8f2:	e101      	b.n	1004daf8 <HAL_UART_IRQHandler+0x68c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
1004d8f4:	687b      	ldr	r3, [r7, #4]
1004d8f6:	2202      	movs	r2, #2
1004d8f8:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
1004d8fa:	687b      	ldr	r3, [r7, #4]
1004d8fc:	22c0      	movs	r2, #192	@ 0xc0
1004d8fe:	589b      	ldr	r3, [r3, r2]
1004d900:	687a      	ldr	r2, [r7, #4]
1004d902:	215c      	movs	r1, #92	@ 0x5c
1004d904:	5a51      	ldrh	r1, [r2, r1]
1004d906:	687a      	ldr	r2, [r7, #4]
1004d908:	0010      	movs	r0, r2
1004d90a:	4798      	blx	r3
      return;
1004d90c:	e0f4      	b.n	1004daf8 <HAL_UART_IRQHandler+0x68c>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
1004d90e:	687b      	ldr	r3, [r7, #4]
1004d910:	225c      	movs	r2, #92	@ 0x5c
1004d912:	5a99      	ldrh	r1, [r3, r2]
1004d914:	687b      	ldr	r3, [r7, #4]
1004d916:	225e      	movs	r2, #94	@ 0x5e
1004d918:	5a9b      	ldrh	r3, [r3, r2]
1004d91a:	b29a      	uxth	r2, r3
1004d91c:	208e      	movs	r0, #142	@ 0x8e
1004d91e:	183b      	adds	r3, r7, r0
1004d920:	1a8a      	subs	r2, r1, r2
1004d922:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
1004d924:	687b      	ldr	r3, [r7, #4]
1004d926:	225e      	movs	r2, #94	@ 0x5e
1004d928:	5a9b      	ldrh	r3, [r3, r2]
1004d92a:	b29b      	uxth	r3, r3
1004d92c:	2b00      	cmp	r3, #0
1004d92e:	d100      	bne.n	1004d932 <HAL_UART_IRQHandler+0x4c6>
1004d930:	e0e4      	b.n	1004dafc <HAL_UART_IRQHandler+0x690>
          && (nb_rx_data > 0U))
1004d932:	183b      	adds	r3, r7, r0
1004d934:	881b      	ldrh	r3, [r3, #0]
1004d936:	2b00      	cmp	r3, #0
1004d938:	d100      	bne.n	1004d93c <HAL_UART_IRQHandler+0x4d0>
1004d93a:	e0df      	b.n	1004dafc <HAL_UART_IRQHandler+0x690>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004d93c:	f3ef 8310 	mrs	r3, PRIMASK
1004d940:	60fb      	str	r3, [r7, #12]
  return(result);
1004d942:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004d944:	2488      	movs	r4, #136	@ 0x88
1004d946:	193a      	adds	r2, r7, r4
1004d948:	6013      	str	r3, [r2, #0]
1004d94a:	2301      	movs	r3, #1
1004d94c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d94e:	693b      	ldr	r3, [r7, #16]
1004d950:	f383 8810 	msr	PRIMASK, r3
}
1004d954:	46c0      	nop			@ (mov r8, r8)
1004d956:	687b      	ldr	r3, [r7, #4]
1004d958:	681b      	ldr	r3, [r3, #0]
1004d95a:	681a      	ldr	r2, [r3, #0]
1004d95c:	687b      	ldr	r3, [r7, #4]
1004d95e:	681b      	ldr	r3, [r3, #0]
1004d960:	496a      	ldr	r1, [pc, #424]	@ (1004db0c <HAL_UART_IRQHandler+0x6a0>)
1004d962:	400a      	ands	r2, r1
1004d964:	601a      	str	r2, [r3, #0]
1004d966:	193b      	adds	r3, r7, r4
1004d968:	681b      	ldr	r3, [r3, #0]
1004d96a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d96c:	697b      	ldr	r3, [r7, #20]
1004d96e:	f383 8810 	msr	PRIMASK, r3
}
1004d972:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004d974:	f3ef 8310 	mrs	r3, PRIMASK
1004d978:	61bb      	str	r3, [r7, #24]
  return(result);
1004d97a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004d97c:	2484      	movs	r4, #132	@ 0x84
1004d97e:	193a      	adds	r2, r7, r4
1004d980:	6013      	str	r3, [r2, #0]
1004d982:	2301      	movs	r3, #1
1004d984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d986:	69fb      	ldr	r3, [r7, #28]
1004d988:	f383 8810 	msr	PRIMASK, r3
}
1004d98c:	46c0      	nop			@ (mov r8, r8)
1004d98e:	687b      	ldr	r3, [r7, #4]
1004d990:	681b      	ldr	r3, [r3, #0]
1004d992:	689a      	ldr	r2, [r3, #8]
1004d994:	687b      	ldr	r3, [r7, #4]
1004d996:	681b      	ldr	r3, [r3, #0]
1004d998:	495d      	ldr	r1, [pc, #372]	@ (1004db10 <HAL_UART_IRQHandler+0x6a4>)
1004d99a:	400a      	ands	r2, r1
1004d99c:	609a      	str	r2, [r3, #8]
1004d99e:	193b      	adds	r3, r7, r4
1004d9a0:	681b      	ldr	r3, [r3, #0]
1004d9a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d9a4:	6a3b      	ldr	r3, [r7, #32]
1004d9a6:	f383 8810 	msr	PRIMASK, r3
}
1004d9aa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
1004d9ac:	687b      	ldr	r3, [r7, #4]
1004d9ae:	228c      	movs	r2, #140	@ 0x8c
1004d9b0:	2120      	movs	r1, #32
1004d9b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004d9b4:	687b      	ldr	r3, [r7, #4]
1004d9b6:	2200      	movs	r2, #0
1004d9b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
1004d9ba:	687b      	ldr	r3, [r7, #4]
1004d9bc:	2200      	movs	r2, #0
1004d9be:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004d9c0:	f3ef 8310 	mrs	r3, PRIMASK
1004d9c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004d9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004d9c8:	2480      	movs	r4, #128	@ 0x80
1004d9ca:	193a      	adds	r2, r7, r4
1004d9cc:	6013      	str	r3, [r2, #0]
1004d9ce:	2301      	movs	r3, #1
1004d9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004d9d4:	f383 8810 	msr	PRIMASK, r3
}
1004d9d8:	46c0      	nop			@ (mov r8, r8)
1004d9da:	687b      	ldr	r3, [r7, #4]
1004d9dc:	681b      	ldr	r3, [r3, #0]
1004d9de:	681a      	ldr	r2, [r3, #0]
1004d9e0:	687b      	ldr	r3, [r7, #4]
1004d9e2:	681b      	ldr	r3, [r3, #0]
1004d9e4:	2110      	movs	r1, #16
1004d9e6:	438a      	bics	r2, r1
1004d9e8:	601a      	str	r2, [r3, #0]
1004d9ea:	193b      	adds	r3, r7, r4
1004d9ec:	681b      	ldr	r3, [r3, #0]
1004d9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004d9f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004d9f2:	f383 8810 	msr	PRIMASK, r3
}
1004d9f6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
1004d9f8:	687b      	ldr	r3, [r7, #4]
1004d9fa:	2202      	movs	r2, #2
1004d9fc:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
1004d9fe:	687b      	ldr	r3, [r7, #4]
1004da00:	22c0      	movs	r2, #192	@ 0xc0
1004da02:	589b      	ldr	r3, [r3, r2]
1004da04:	183a      	adds	r2, r7, r0
1004da06:	8811      	ldrh	r1, [r2, #0]
1004da08:	687a      	ldr	r2, [r7, #4]
1004da0a:	0010      	movs	r0, r2
1004da0c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
1004da0e:	e075      	b.n	1004dafc <HAL_UART_IRQHandler+0x690>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
1004da10:	23a4      	movs	r3, #164	@ 0xa4
1004da12:	18fb      	adds	r3, r7, r3
1004da14:	681a      	ldr	r2, [r3, #0]
1004da16:	2380      	movs	r3, #128	@ 0x80
1004da18:	035b      	lsls	r3, r3, #13
1004da1a:	4013      	ands	r3, r2
1004da1c:	d012      	beq.n	1004da44 <HAL_UART_IRQHandler+0x5d8>
1004da1e:	239c      	movs	r3, #156	@ 0x9c
1004da20:	18fb      	adds	r3, r7, r3
1004da22:	681a      	ldr	r2, [r3, #0]
1004da24:	2380      	movs	r3, #128	@ 0x80
1004da26:	03db      	lsls	r3, r3, #15
1004da28:	4013      	ands	r3, r2
1004da2a:	d00b      	beq.n	1004da44 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
1004da2c:	687b      	ldr	r3, [r7, #4]
1004da2e:	681b      	ldr	r3, [r3, #0]
1004da30:	2280      	movs	r2, #128	@ 0x80
1004da32:	0352      	lsls	r2, r2, #13
1004da34:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
1004da36:	687b      	ldr	r3, [r7, #4]
1004da38:	22b4      	movs	r2, #180	@ 0xb4
1004da3a:	589b      	ldr	r3, [r3, r2]
1004da3c:	687a      	ldr	r2, [r7, #4]
1004da3e:	0010      	movs	r0, r2
1004da40:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
1004da42:	e05e      	b.n	1004db02 <HAL_UART_IRQHandler+0x696>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004da44:	23a4      	movs	r3, #164	@ 0xa4
1004da46:	18fb      	adds	r3, r7, r3
1004da48:	681b      	ldr	r3, [r3, #0]
1004da4a:	2280      	movs	r2, #128	@ 0x80
1004da4c:	4013      	ands	r3, r2
1004da4e:	d016      	beq.n	1004da7e <HAL_UART_IRQHandler+0x612>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
1004da50:	23a0      	movs	r3, #160	@ 0xa0
1004da52:	18fb      	adds	r3, r7, r3
1004da54:	681b      	ldr	r3, [r3, #0]
1004da56:	2280      	movs	r2, #128	@ 0x80
1004da58:	4013      	ands	r3, r2
1004da5a:	d106      	bne.n	1004da6a <HAL_UART_IRQHandler+0x5fe>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004da5c:	239c      	movs	r3, #156	@ 0x9c
1004da5e:	18fb      	adds	r3, r7, r3
1004da60:	681a      	ldr	r2, [r3, #0]
1004da62:	2380      	movs	r3, #128	@ 0x80
1004da64:	041b      	lsls	r3, r3, #16
1004da66:	4013      	ands	r3, r2
1004da68:	d009      	beq.n	1004da7e <HAL_UART_IRQHandler+0x612>
  {
    if (huart->TxISR != NULL)
1004da6a:	687b      	ldr	r3, [r7, #4]
1004da6c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1004da6e:	2b00      	cmp	r3, #0
1004da70:	d046      	beq.n	1004db00 <HAL_UART_IRQHandler+0x694>
    {
      huart->TxISR(huart);
1004da72:	687b      	ldr	r3, [r7, #4]
1004da74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
1004da76:	687a      	ldr	r2, [r7, #4]
1004da78:	0010      	movs	r0, r2
1004da7a:	4798      	blx	r3
    }
    return;
1004da7c:	e040      	b.n	1004db00 <HAL_UART_IRQHandler+0x694>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004da7e:	23a4      	movs	r3, #164	@ 0xa4
1004da80:	18fb      	adds	r3, r7, r3
1004da82:	681b      	ldr	r3, [r3, #0]
1004da84:	2240      	movs	r2, #64	@ 0x40
1004da86:	4013      	ands	r3, r2
1004da88:	d00a      	beq.n	1004daa0 <HAL_UART_IRQHandler+0x634>
1004da8a:	23a0      	movs	r3, #160	@ 0xa0
1004da8c:	18fb      	adds	r3, r7, r3
1004da8e:	681b      	ldr	r3, [r3, #0]
1004da90:	2240      	movs	r2, #64	@ 0x40
1004da92:	4013      	ands	r3, r2
1004da94:	d004      	beq.n	1004daa0 <HAL_UART_IRQHandler+0x634>
  {
    UART_EndTransmit_IT(huart);
1004da96:	687b      	ldr	r3, [r7, #4]
1004da98:	0018      	movs	r0, r3
1004da9a:	f000 fc88 	bl	1004e3ae <UART_EndTransmit_IT>
    return;
1004da9e:	e030      	b.n	1004db02 <HAL_UART_IRQHandler+0x696>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
1004daa0:	23a4      	movs	r3, #164	@ 0xa4
1004daa2:	18fb      	adds	r3, r7, r3
1004daa4:	681a      	ldr	r2, [r3, #0]
1004daa6:	2380      	movs	r3, #128	@ 0x80
1004daa8:	041b      	lsls	r3, r3, #16
1004daaa:	4013      	ands	r3, r2
1004daac:	d00d      	beq.n	1004daca <HAL_UART_IRQHandler+0x65e>
1004daae:	23a0      	movs	r3, #160	@ 0xa0
1004dab0:	18fb      	adds	r3, r7, r3
1004dab2:	681a      	ldr	r2, [r3, #0]
1004dab4:	2380      	movs	r3, #128	@ 0x80
1004dab6:	05db      	lsls	r3, r3, #23
1004dab8:	4013      	ands	r3, r2
1004daba:	d006      	beq.n	1004daca <HAL_UART_IRQHandler+0x65e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
1004dabc:	687b      	ldr	r3, [r7, #4]
1004dabe:	22bc      	movs	r2, #188	@ 0xbc
1004dac0:	589b      	ldr	r3, [r3, r2]
1004dac2:	687a      	ldr	r2, [r7, #4]
1004dac4:	0010      	movs	r0, r2
1004dac6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
1004dac8:	e01b      	b.n	1004db02 <HAL_UART_IRQHandler+0x696>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
1004daca:	23a4      	movs	r3, #164	@ 0xa4
1004dacc:	18fb      	adds	r3, r7, r3
1004dace:	681a      	ldr	r2, [r3, #0]
1004dad0:	2380      	movs	r3, #128	@ 0x80
1004dad2:	045b      	lsls	r3, r3, #17
1004dad4:	4013      	ands	r3, r2
1004dad6:	d014      	beq.n	1004db02 <HAL_UART_IRQHandler+0x696>
1004dad8:	23a0      	movs	r3, #160	@ 0xa0
1004dada:	18fb      	adds	r3, r7, r3
1004dadc:	681b      	ldr	r3, [r3, #0]
1004dade:	2b00      	cmp	r3, #0
1004dae0:	da0f      	bge.n	1004db02 <HAL_UART_IRQHandler+0x696>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
1004dae2:	687b      	ldr	r3, [r7, #4]
1004dae4:	22b8      	movs	r2, #184	@ 0xb8
1004dae6:	589b      	ldr	r3, [r3, r2]
1004dae8:	687a      	ldr	r2, [r7, #4]
1004daea:	0010      	movs	r0, r2
1004daec:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
1004daee:	e008      	b.n	1004db02 <HAL_UART_IRQHandler+0x696>
      return;
1004daf0:	46c0      	nop			@ (mov r8, r8)
1004daf2:	e006      	b.n	1004db02 <HAL_UART_IRQHandler+0x696>
    return;
1004daf4:	46c0      	nop			@ (mov r8, r8)
1004daf6:	e004      	b.n	1004db02 <HAL_UART_IRQHandler+0x696>
      return;
1004daf8:	46c0      	nop			@ (mov r8, r8)
1004dafa:	e002      	b.n	1004db02 <HAL_UART_IRQHandler+0x696>
      return;
1004dafc:	46c0      	nop			@ (mov r8, r8)
1004dafe:	e000      	b.n	1004db02 <HAL_UART_IRQHandler+0x696>
    return;
1004db00:	46c0      	nop			@ (mov r8, r8)
  }
}
1004db02:	46bd      	mov	sp, r7
1004db04:	b02a      	add	sp, #168	@ 0xa8
1004db06:	bdb0      	pop	{r4, r5, r7, pc}
1004db08:	fffffeff 	.word	0xfffffeff
1004db0c:	fffffedf 	.word	0xfffffedf
1004db10:	effffffe 	.word	0xeffffffe

1004db14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
1004db14:	b580      	push	{r7, lr}
1004db16:	b082      	sub	sp, #8
1004db18:	af00      	add	r7, sp, #0
1004db1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
1004db1c:	46c0      	nop			@ (mov r8, r8)
1004db1e:	46bd      	mov	sp, r7
1004db20:	b002      	add	sp, #8
1004db22:	bd80      	pop	{r7, pc}

1004db24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004db24:	b580      	push	{r7, lr}
1004db26:	b082      	sub	sp, #8
1004db28:	af00      	add	r7, sp, #0
1004db2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
1004db2c:	46c0      	nop			@ (mov r8, r8)
1004db2e:	46bd      	mov	sp, r7
1004db30:	b002      	add	sp, #8
1004db32:	bd80      	pop	{r7, pc}

1004db34 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
1004db34:	b580      	push	{r7, lr}
1004db36:	b082      	sub	sp, #8
1004db38:	af00      	add	r7, sp, #0
1004db3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
1004db3c:	46c0      	nop			@ (mov r8, r8)
1004db3e:	46bd      	mov	sp, r7
1004db40:	b002      	add	sp, #8
1004db42:	bd80      	pop	{r7, pc}

1004db44 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
1004db44:	b580      	push	{r7, lr}
1004db46:	b082      	sub	sp, #8
1004db48:	af00      	add	r7, sp, #0
1004db4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
1004db4c:	46c0      	nop			@ (mov r8, r8)
1004db4e:	46bd      	mov	sp, r7
1004db50:	b002      	add	sp, #8
1004db52:	bd80      	pop	{r7, pc}

1004db54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
1004db54:	b580      	push	{r7, lr}
1004db56:	b082      	sub	sp, #8
1004db58:	af00      	add	r7, sp, #0
1004db5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
1004db5c:	46c0      	nop			@ (mov r8, r8)
1004db5e:	46bd      	mov	sp, r7
1004db60:	b002      	add	sp, #8
1004db62:	bd80      	pop	{r7, pc}

1004db64 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
1004db64:	b580      	push	{r7, lr}
1004db66:	b082      	sub	sp, #8
1004db68:	af00      	add	r7, sp, #0
1004db6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
1004db6c:	46c0      	nop			@ (mov r8, r8)
1004db6e:	46bd      	mov	sp, r7
1004db70:	b002      	add	sp, #8
1004db72:	bd80      	pop	{r7, pc}

1004db74 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
1004db74:	b580      	push	{r7, lr}
1004db76:	b082      	sub	sp, #8
1004db78:	af00      	add	r7, sp, #0
1004db7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
1004db7c:	46c0      	nop			@ (mov r8, r8)
1004db7e:	46bd      	mov	sp, r7
1004db80:	b002      	add	sp, #8
1004db82:	bd80      	pop	{r7, pc}

1004db84 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
1004db84:	b580      	push	{r7, lr}
1004db86:	b082      	sub	sp, #8
1004db88:	af00      	add	r7, sp, #0
1004db8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
1004db8c:	46c0      	nop			@ (mov r8, r8)
1004db8e:	46bd      	mov	sp, r7
1004db90:	b002      	add	sp, #8
1004db92:	bd80      	pop	{r7, pc}

1004db94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
1004db94:	b580      	push	{r7, lr}
1004db96:	b082      	sub	sp, #8
1004db98:	af00      	add	r7, sp, #0
1004db9a:	6078      	str	r0, [r7, #4]
1004db9c:	000a      	movs	r2, r1
1004db9e:	1cbb      	adds	r3, r7, #2
1004dba0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
1004dba2:	46c0      	nop			@ (mov r8, r8)
1004dba4:	46bd      	mov	sp, r7
1004dba6:	b002      	add	sp, #8
1004dba8:	bd80      	pop	{r7, pc}
	...

1004dbac <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
1004dbac:	b580      	push	{r7, lr}
1004dbae:	b082      	sub	sp, #8
1004dbb0:	af00      	add	r7, sp, #0
1004dbb2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
1004dbb4:	687b      	ldr	r3, [r7, #4]
1004dbb6:	2194      	movs	r1, #148	@ 0x94
1004dbb8:	4a18      	ldr	r2, [pc, #96]	@ (1004dc1c <UART_InitCallbacksToDefault+0x70>)
1004dbba:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
1004dbbc:	687b      	ldr	r3, [r7, #4]
1004dbbe:	2198      	movs	r1, #152	@ 0x98
1004dbc0:	4a17      	ldr	r2, [pc, #92]	@ (1004dc20 <UART_InitCallbacksToDefault+0x74>)
1004dbc2:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
1004dbc4:	687b      	ldr	r3, [r7, #4]
1004dbc6:	219c      	movs	r1, #156	@ 0x9c
1004dbc8:	4a16      	ldr	r2, [pc, #88]	@ (1004dc24 <UART_InitCallbacksToDefault+0x78>)
1004dbca:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
1004dbcc:	687b      	ldr	r3, [r7, #4]
1004dbce:	21a0      	movs	r1, #160	@ 0xa0
1004dbd0:	4a15      	ldr	r2, [pc, #84]	@ (1004dc28 <UART_InitCallbacksToDefault+0x7c>)
1004dbd2:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
1004dbd4:	687b      	ldr	r3, [r7, #4]
1004dbd6:	21a4      	movs	r1, #164	@ 0xa4
1004dbd8:	4a14      	ldr	r2, [pc, #80]	@ (1004dc2c <UART_InitCallbacksToDefault+0x80>)
1004dbda:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
1004dbdc:	687b      	ldr	r3, [r7, #4]
1004dbde:	21a8      	movs	r1, #168	@ 0xa8
1004dbe0:	4a13      	ldr	r2, [pc, #76]	@ (1004dc30 <UART_InitCallbacksToDefault+0x84>)
1004dbe2:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
1004dbe4:	687b      	ldr	r3, [r7, #4]
1004dbe6:	21ac      	movs	r1, #172	@ 0xac
1004dbe8:	4a12      	ldr	r2, [pc, #72]	@ (1004dc34 <UART_InitCallbacksToDefault+0x88>)
1004dbea:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
1004dbec:	687b      	ldr	r3, [r7, #4]
1004dbee:	21b0      	movs	r1, #176	@ 0xb0
1004dbf0:	4a11      	ldr	r2, [pc, #68]	@ (1004dc38 <UART_InitCallbacksToDefault+0x8c>)
1004dbf2:	505a      	str	r2, [r3, r1]
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
1004dbf4:	687b      	ldr	r3, [r7, #4]
1004dbf6:	21b4      	movs	r1, #180	@ 0xb4
1004dbf8:	4a10      	ldr	r2, [pc, #64]	@ (1004dc3c <UART_InitCallbacksToDefault+0x90>)
1004dbfa:	505a      	str	r2, [r3, r1]
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
1004dbfc:	687b      	ldr	r3, [r7, #4]
1004dbfe:	21b8      	movs	r1, #184	@ 0xb8
1004dc00:	4a0f      	ldr	r2, [pc, #60]	@ (1004dc40 <UART_InitCallbacksToDefault+0x94>)
1004dc02:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
1004dc04:	687b      	ldr	r3, [r7, #4]
1004dc06:	21bc      	movs	r1, #188	@ 0xbc
1004dc08:	4a0e      	ldr	r2, [pc, #56]	@ (1004dc44 <UART_InitCallbacksToDefault+0x98>)
1004dc0a:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
1004dc0c:	687b      	ldr	r3, [r7, #4]
1004dc0e:	21c0      	movs	r1, #192	@ 0xc0
1004dc10:	4a0d      	ldr	r2, [pc, #52]	@ (1004dc48 <UART_InitCallbacksToDefault+0x9c>)
1004dc12:	505a      	str	r2, [r3, r1]

}
1004dc14:	46c0      	nop			@ (mov r8, r8)
1004dc16:	46bd      	mov	sp, r7
1004dc18:	b002      	add	sp, #8
1004dc1a:	bd80      	pop	{r7, pc}
1004dc1c:	1004db25 	.word	0x1004db25
1004dc20:	1004db15 	.word	0x1004db15
1004dc24:	1004db45 	.word	0x1004db45
1004dc28:	1004db35 	.word	0x1004db35
1004dc2c:	1004db55 	.word	0x1004db55
1004dc30:	1004db65 	.word	0x1004db65
1004dc34:	1004db75 	.word	0x1004db75
1004dc38:	1004db85 	.word	0x1004db85
1004dc3c:	1004e40b 	.word	0x1004e40b
1004dc40:	1004e41b 	.word	0x1004e41b
1004dc44:	1004e42b 	.word	0x1004e42b
1004dc48:	1004db95 	.word	0x1004db95

1004dc4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
1004dc4c:	b5b0      	push	{r4, r5, r7, lr}
1004dc4e:	b090      	sub	sp, #64	@ 0x40
1004dc50:	af00      	add	r7, sp, #0
1004dc52:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
1004dc54:	231b      	movs	r3, #27
1004dc56:	2220      	movs	r2, #32
1004dc58:	189b      	adds	r3, r3, r2
1004dc5a:	19db      	adds	r3, r3, r7
1004dc5c:	2200      	movs	r2, #0
1004dc5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
1004dc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc62:	689a      	ldr	r2, [r3, #8]
1004dc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc66:	691b      	ldr	r3, [r3, #16]
1004dc68:	431a      	orrs	r2, r3
1004dc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc6c:	695b      	ldr	r3, [r3, #20]
1004dc6e:	431a      	orrs	r2, r3
1004dc70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc72:	69db      	ldr	r3, [r3, #28]
1004dc74:	4313      	orrs	r3, r2
1004dc76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
1004dc78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc7a:	681b      	ldr	r3, [r3, #0]
1004dc7c:	681b      	ldr	r3, [r3, #0]
1004dc7e:	4aa1      	ldr	r2, [pc, #644]	@ (1004df04 <UART_SetConfig+0x2b8>)
1004dc80:	4013      	ands	r3, r2
1004dc82:	0019      	movs	r1, r3
1004dc84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc86:	681a      	ldr	r2, [r3, #0]
1004dc88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004dc8a:	430b      	orrs	r3, r1
1004dc8c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
1004dc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc90:	681b      	ldr	r3, [r3, #0]
1004dc92:	685b      	ldr	r3, [r3, #4]
1004dc94:	4a9c      	ldr	r2, [pc, #624]	@ (1004df08 <UART_SetConfig+0x2bc>)
1004dc96:	4013      	ands	r3, r2
1004dc98:	0018      	movs	r0, r3
1004dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dc9c:	68d9      	ldr	r1, [r3, #12]
1004dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dca0:	681a      	ldr	r2, [r3, #0]
1004dca2:	0003      	movs	r3, r0
1004dca4:	430b      	orrs	r3, r1
1004dca6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
1004dca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcaa:	699b      	ldr	r3, [r3, #24]
1004dcac:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
1004dcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcb0:	681b      	ldr	r3, [r3, #0]
1004dcb2:	4a96      	ldr	r2, [pc, #600]	@ (1004df0c <UART_SetConfig+0x2c0>)
1004dcb4:	4293      	cmp	r3, r2
1004dcb6:	d004      	beq.n	1004dcc2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
1004dcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcba:	6a1b      	ldr	r3, [r3, #32]
1004dcbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
1004dcbe:	4313      	orrs	r3, r2
1004dcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
1004dcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcc4:	681b      	ldr	r3, [r3, #0]
1004dcc6:	689b      	ldr	r3, [r3, #8]
1004dcc8:	4a91      	ldr	r2, [pc, #580]	@ (1004df10 <UART_SetConfig+0x2c4>)
1004dcca:	4013      	ands	r3, r2
1004dccc:	0019      	movs	r1, r3
1004dcce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcd0:	681a      	ldr	r2, [r3, #0]
1004dcd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004dcd4:	430b      	orrs	r3, r1
1004dcd6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
1004dcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcda:	681b      	ldr	r3, [r3, #0]
1004dcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
1004dcde:	220f      	movs	r2, #15
1004dce0:	4393      	bics	r3, r2
1004dce2:	0018      	movs	r0, r3
1004dce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dce6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
1004dce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcea:	681a      	ldr	r2, [r3, #0]
1004dcec:	0003      	movs	r3, r0
1004dcee:	430b      	orrs	r3, r1
1004dcf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
1004dcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dcf4:	681b      	ldr	r3, [r3, #0]
1004dcf6:	4a85      	ldr	r2, [pc, #532]	@ (1004df0c <UART_SetConfig+0x2c0>)
1004dcf8:	4293      	cmp	r3, r2
1004dcfa:	d16d      	bne.n	1004ddd8 <UART_SetConfig+0x18c>
  {
    /* Retrieve frequency clock */
#if defined(RCC_CFGR_LPUCLKSEL)
    pclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_LPUART1);
1004dcfc:	2010      	movs	r0, #16
1004dcfe:	f7fe fe63 	bl	1004c9c8 <HAL_RCCEx_GetPeriphCLKFreq>
1004dd02:	0003      	movs	r3, r0
1004dd04:	637b      	str	r3, [r7, #52]	@ 0x34
#else
    pclk = UART_PERIPHCLK;
#endif /* RCC_CFGR_LPUCLKSEL */

    /* If proper clock source reported */
    if (pclk != 0U)
1004dd06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004dd08:	2b00      	cmp	r3, #0
1004dd0a:	d100      	bne.n	1004dd0e <UART_SetConfig+0xc2>
1004dd0c:	e0e3      	b.n	1004ded6 <UART_SetConfig+0x28a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
1004dd0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004dd12:	4b80      	ldr	r3, [pc, #512]	@ (1004df14 <UART_SetConfig+0x2c8>)
1004dd14:	0052      	lsls	r2, r2, #1
1004dd16:	5ad3      	ldrh	r3, [r2, r3]
1004dd18:	0019      	movs	r1, r3
1004dd1a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004dd1c:	f7f2 fa90 	bl	10040240 <__udivsi3>
1004dd20:	0003      	movs	r3, r0
1004dd22:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004dd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd26:	685a      	ldr	r2, [r3, #4]
1004dd28:	0013      	movs	r3, r2
1004dd2a:	005b      	lsls	r3, r3, #1
1004dd2c:	189b      	adds	r3, r3, r2
1004dd2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004dd30:	429a      	cmp	r2, r3
1004dd32:	d305      	bcc.n	1004dd40 <UART_SetConfig+0xf4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
1004dd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd36:	685b      	ldr	r3, [r3, #4]
1004dd38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
1004dd3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1004dd3c:	429a      	cmp	r2, r3
1004dd3e:	d906      	bls.n	1004dd4e <UART_SetConfig+0x102>
      {
        ret = HAL_ERROR;
1004dd40:	231b      	movs	r3, #27
1004dd42:	2220      	movs	r2, #32
1004dd44:	189b      	adds	r3, r3, r2
1004dd46:	19db      	adds	r3, r3, r7
1004dd48:	2201      	movs	r2, #1
1004dd4a:	701a      	strb	r2, [r3, #0]
1004dd4c:	e0c3      	b.n	1004ded6 <UART_SetConfig+0x28a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004dd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004dd50:	61bb      	str	r3, [r7, #24]
1004dd52:	2300      	movs	r3, #0
1004dd54:	61fb      	str	r3, [r7, #28]
1004dd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004dd5a:	4b6e      	ldr	r3, [pc, #440]	@ (1004df14 <UART_SetConfig+0x2c8>)
1004dd5c:	0052      	lsls	r2, r2, #1
1004dd5e:	5ad3      	ldrh	r3, [r2, r3]
1004dd60:	613b      	str	r3, [r7, #16]
1004dd62:	2300      	movs	r3, #0
1004dd64:	617b      	str	r3, [r7, #20]
1004dd66:	693a      	ldr	r2, [r7, #16]
1004dd68:	697b      	ldr	r3, [r7, #20]
1004dd6a:	69b8      	ldr	r0, [r7, #24]
1004dd6c:	69f9      	ldr	r1, [r7, #28]
1004dd6e:	f7f2 fc41 	bl	100405f4 <__aeabi_uldivmod>
1004dd72:	0002      	movs	r2, r0
1004dd74:	000b      	movs	r3, r1
1004dd76:	0e11      	lsrs	r1, r2, #24
1004dd78:	021d      	lsls	r5, r3, #8
1004dd7a:	430d      	orrs	r5, r1
1004dd7c:	0214      	lsls	r4, r2, #8
1004dd7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd80:	685b      	ldr	r3, [r3, #4]
1004dd82:	085b      	lsrs	r3, r3, #1
1004dd84:	60bb      	str	r3, [r7, #8]
1004dd86:	2300      	movs	r3, #0
1004dd88:	60fb      	str	r3, [r7, #12]
1004dd8a:	68b8      	ldr	r0, [r7, #8]
1004dd8c:	68f9      	ldr	r1, [r7, #12]
1004dd8e:	1900      	adds	r0, r0, r4
1004dd90:	4169      	adcs	r1, r5
1004dd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dd94:	685b      	ldr	r3, [r3, #4]
1004dd96:	603b      	str	r3, [r7, #0]
1004dd98:	2300      	movs	r3, #0
1004dd9a:	607b      	str	r3, [r7, #4]
1004dd9c:	683a      	ldr	r2, [r7, #0]
1004dd9e:	687b      	ldr	r3, [r7, #4]
1004dda0:	f7f2 fc28 	bl	100405f4 <__aeabi_uldivmod>
1004dda4:	0002      	movs	r2, r0
1004dda6:	000b      	movs	r3, r1
1004dda8:	0013      	movs	r3, r2
1004ddaa:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
1004ddac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ddae:	23c0      	movs	r3, #192	@ 0xc0
1004ddb0:	009b      	lsls	r3, r3, #2
1004ddb2:	429a      	cmp	r2, r3
1004ddb4:	d309      	bcc.n	1004ddca <UART_SetConfig+0x17e>
1004ddb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ddb8:	2380      	movs	r3, #128	@ 0x80
1004ddba:	035b      	lsls	r3, r3, #13
1004ddbc:	429a      	cmp	r2, r3
1004ddbe:	d204      	bcs.n	1004ddca <UART_SetConfig+0x17e>
        {
          huart->Instance->BRR = usartdiv;
1004ddc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ddc2:	681b      	ldr	r3, [r3, #0]
1004ddc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004ddc6:	60da      	str	r2, [r3, #12]
1004ddc8:	e085      	b.n	1004ded6 <UART_SetConfig+0x28a>
        }
        else
        {
          ret = HAL_ERROR;
1004ddca:	231b      	movs	r3, #27
1004ddcc:	2220      	movs	r2, #32
1004ddce:	189b      	adds	r3, r3, r2
1004ddd0:	19db      	adds	r3, r3, r7
1004ddd2:	2201      	movs	r2, #1
1004ddd4:	701a      	strb	r2, [r3, #0]
1004ddd6:	e07e      	b.n	1004ded6 <UART_SetConfig+0x28a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
1004ddd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ddda:	69da      	ldr	r2, [r3, #28]
1004dddc:	2380      	movs	r3, #128	@ 0x80
1004ddde:	021b      	lsls	r3, r3, #8
1004dde0:	429a      	cmp	r2, r3
1004dde2:	d148      	bne.n	1004de76 <UART_SetConfig+0x22a>
  {
    pclk = UART_PERIPHCLK;
1004dde4:	4b4c      	ldr	r3, [pc, #304]	@ (1004df18 <UART_SetConfig+0x2cc>)
1004dde6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
1004dde8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004ddea:	2b00      	cmp	r3, #0
1004ddec:	d100      	bne.n	1004ddf0 <UART_SetConfig+0x1a4>
1004ddee:	e072      	b.n	1004ded6 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004ddf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ddf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004ddf4:	4b47      	ldr	r3, [pc, #284]	@ (1004df14 <UART_SetConfig+0x2c8>)
1004ddf6:	0052      	lsls	r2, r2, #1
1004ddf8:	5ad3      	ldrh	r3, [r2, r3]
1004ddfa:	0019      	movs	r1, r3
1004ddfc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004ddfe:	f7f2 fa1f 	bl	10040240 <__udivsi3>
1004de02:	0003      	movs	r3, r0
1004de04:	005a      	lsls	r2, r3, #1
1004de06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de08:	685b      	ldr	r3, [r3, #4]
1004de0a:	085b      	lsrs	r3, r3, #1
1004de0c:	18d2      	adds	r2, r2, r3
1004de0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de10:	685b      	ldr	r3, [r3, #4]
1004de12:	0019      	movs	r1, r3
1004de14:	0010      	movs	r0, r2
1004de16:	f7f2 fa13 	bl	10040240 <__udivsi3>
1004de1a:	0003      	movs	r3, r0
1004de1c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004de1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004de20:	2b0f      	cmp	r3, #15
1004de22:	d921      	bls.n	1004de68 <UART_SetConfig+0x21c>
1004de24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004de26:	2380      	movs	r3, #128	@ 0x80
1004de28:	025b      	lsls	r3, r3, #9
1004de2a:	429a      	cmp	r2, r3
1004de2c:	d21c      	bcs.n	1004de68 <UART_SetConfig+0x21c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
1004de2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004de30:	b29a      	uxth	r2, r3
1004de32:	200e      	movs	r0, #14
1004de34:	2420      	movs	r4, #32
1004de36:	1903      	adds	r3, r0, r4
1004de38:	19db      	adds	r3, r3, r7
1004de3a:	210f      	movs	r1, #15
1004de3c:	438a      	bics	r2, r1
1004de3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1004de40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004de42:	085b      	lsrs	r3, r3, #1
1004de44:	b29b      	uxth	r3, r3
1004de46:	2207      	movs	r2, #7
1004de48:	4013      	ands	r3, r2
1004de4a:	b299      	uxth	r1, r3
1004de4c:	1903      	adds	r3, r0, r4
1004de4e:	19db      	adds	r3, r3, r7
1004de50:	1902      	adds	r2, r0, r4
1004de52:	19d2      	adds	r2, r2, r7
1004de54:	8812      	ldrh	r2, [r2, #0]
1004de56:	430a      	orrs	r2, r1
1004de58:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
1004de5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de5c:	681b      	ldr	r3, [r3, #0]
1004de5e:	1902      	adds	r2, r0, r4
1004de60:	19d2      	adds	r2, r2, r7
1004de62:	8812      	ldrh	r2, [r2, #0]
1004de64:	60da      	str	r2, [r3, #12]
1004de66:	e036      	b.n	1004ded6 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004de68:	231b      	movs	r3, #27
1004de6a:	2220      	movs	r2, #32
1004de6c:	189b      	adds	r3, r3, r2
1004de6e:	19db      	adds	r3, r3, r7
1004de70:	2201      	movs	r2, #1
1004de72:	701a      	strb	r2, [r3, #0]
1004de74:	e02f      	b.n	1004ded6 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    pclk = UART_PERIPHCLK;
1004de76:	4b28      	ldr	r3, [pc, #160]	@ (1004df18 <UART_SetConfig+0x2cc>)
1004de78:	637b      	str	r3, [r7, #52]	@ 0x34

    if (pclk != 0U)
1004de7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004de7c:	2b00      	cmp	r3, #0
1004de7e:	d02a      	beq.n	1004ded6 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1004de80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
1004de84:	4b23      	ldr	r3, [pc, #140]	@ (1004df14 <UART_SetConfig+0x2c8>)
1004de86:	0052      	lsls	r2, r2, #1
1004de88:	5ad3      	ldrh	r3, [r2, r3]
1004de8a:	0019      	movs	r1, r3
1004de8c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
1004de8e:	f7f2 f9d7 	bl	10040240 <__udivsi3>
1004de92:	0003      	movs	r3, r0
1004de94:	001a      	movs	r2, r3
1004de96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004de98:	685b      	ldr	r3, [r3, #4]
1004de9a:	085b      	lsrs	r3, r3, #1
1004de9c:	18d2      	adds	r2, r2, r3
1004de9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dea0:	685b      	ldr	r3, [r3, #4]
1004dea2:	0019      	movs	r1, r3
1004dea4:	0010      	movs	r0, r2
1004dea6:	f7f2 f9cb 	bl	10040240 <__udivsi3>
1004deaa:	0003      	movs	r3, r0
1004deac:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
1004deae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004deb0:	2b0f      	cmp	r3, #15
1004deb2:	d90a      	bls.n	1004deca <UART_SetConfig+0x27e>
1004deb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
1004deb6:	2380      	movs	r3, #128	@ 0x80
1004deb8:	025b      	lsls	r3, r3, #9
1004deba:	429a      	cmp	r2, r3
1004debc:	d205      	bcs.n	1004deca <UART_SetConfig+0x27e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
1004debe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004dec0:	b29a      	uxth	r2, r3
1004dec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dec4:	681b      	ldr	r3, [r3, #0]
1004dec6:	60da      	str	r2, [r3, #12]
1004dec8:	e005      	b.n	1004ded6 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
1004deca:	231b      	movs	r3, #27
1004decc:	2220      	movs	r2, #32
1004dece:	189b      	adds	r3, r3, r2
1004ded0:	19db      	adds	r3, r3, r7
1004ded2:	2201      	movs	r2, #1
1004ded4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
1004ded6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004ded8:	226a      	movs	r2, #106	@ 0x6a
1004deda:	2101      	movs	r1, #1
1004dedc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
1004dede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dee0:	2268      	movs	r2, #104	@ 0x68
1004dee2:	2101      	movs	r1, #1
1004dee4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
1004dee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004dee8:	2200      	movs	r2, #0
1004deea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
1004deec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004deee:	2200      	movs	r2, #0
1004def0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
1004def2:	231b      	movs	r3, #27
1004def4:	2220      	movs	r2, #32
1004def6:	189b      	adds	r3, r3, r2
1004def8:	19db      	adds	r3, r3, r7
1004defa:	781b      	ldrb	r3, [r3, #0]
}
1004defc:	0018      	movs	r0, r3
1004defe:	46bd      	mov	sp, r7
1004df00:	b010      	add	sp, #64	@ 0x40
1004df02:	bdb0      	pop	{r4, r5, r7, pc}
1004df04:	cfff69f3 	.word	0xcfff69f3
1004df08:	ffffcfff 	.word	0xffffcfff
1004df0c:	41005000 	.word	0x41005000
1004df10:	11fff4ff 	.word	0x11fff4ff
1004df14:	10069430 	.word	0x10069430
1004df18:	00f42400 	.word	0x00f42400

1004df1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
1004df1c:	b580      	push	{r7, lr}
1004df1e:	b082      	sub	sp, #8
1004df20:	af00      	add	r7, sp, #0
1004df22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
1004df24:	687b      	ldr	r3, [r7, #4]
1004df26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df28:	2208      	movs	r2, #8
1004df2a:	4013      	ands	r3, r2
1004df2c:	d00b      	beq.n	1004df46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
1004df2e:	687b      	ldr	r3, [r7, #4]
1004df30:	681b      	ldr	r3, [r3, #0]
1004df32:	685b      	ldr	r3, [r3, #4]
1004df34:	4a4a      	ldr	r2, [pc, #296]	@ (1004e060 <UART_AdvFeatureConfig+0x144>)
1004df36:	4013      	ands	r3, r2
1004df38:	0019      	movs	r1, r3
1004df3a:	687b      	ldr	r3, [r7, #4]
1004df3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004df3e:	687b      	ldr	r3, [r7, #4]
1004df40:	681b      	ldr	r3, [r3, #0]
1004df42:	430a      	orrs	r2, r1
1004df44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
1004df46:	687b      	ldr	r3, [r7, #4]
1004df48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df4a:	2201      	movs	r2, #1
1004df4c:	4013      	ands	r3, r2
1004df4e:	d00b      	beq.n	1004df68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
1004df50:	687b      	ldr	r3, [r7, #4]
1004df52:	681b      	ldr	r3, [r3, #0]
1004df54:	685b      	ldr	r3, [r3, #4]
1004df56:	4a43      	ldr	r2, [pc, #268]	@ (1004e064 <UART_AdvFeatureConfig+0x148>)
1004df58:	4013      	ands	r3, r2
1004df5a:	0019      	movs	r1, r3
1004df5c:	687b      	ldr	r3, [r7, #4]
1004df5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1004df60:	687b      	ldr	r3, [r7, #4]
1004df62:	681b      	ldr	r3, [r3, #0]
1004df64:	430a      	orrs	r2, r1
1004df66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
1004df68:	687b      	ldr	r3, [r7, #4]
1004df6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df6c:	2202      	movs	r2, #2
1004df6e:	4013      	ands	r3, r2
1004df70:	d00b      	beq.n	1004df8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
1004df72:	687b      	ldr	r3, [r7, #4]
1004df74:	681b      	ldr	r3, [r3, #0]
1004df76:	685b      	ldr	r3, [r3, #4]
1004df78:	4a3b      	ldr	r2, [pc, #236]	@ (1004e068 <UART_AdvFeatureConfig+0x14c>)
1004df7a:	4013      	ands	r3, r2
1004df7c:	0019      	movs	r1, r3
1004df7e:	687b      	ldr	r3, [r7, #4]
1004df80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1004df82:	687b      	ldr	r3, [r7, #4]
1004df84:	681b      	ldr	r3, [r3, #0]
1004df86:	430a      	orrs	r2, r1
1004df88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
1004df8a:	687b      	ldr	r3, [r7, #4]
1004df8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004df8e:	2204      	movs	r2, #4
1004df90:	4013      	ands	r3, r2
1004df92:	d00b      	beq.n	1004dfac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
1004df94:	687b      	ldr	r3, [r7, #4]
1004df96:	681b      	ldr	r3, [r3, #0]
1004df98:	685b      	ldr	r3, [r3, #4]
1004df9a:	4a34      	ldr	r2, [pc, #208]	@ (1004e06c <UART_AdvFeatureConfig+0x150>)
1004df9c:	4013      	ands	r3, r2
1004df9e:	0019      	movs	r1, r3
1004dfa0:	687b      	ldr	r3, [r7, #4]
1004dfa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
1004dfa4:	687b      	ldr	r3, [r7, #4]
1004dfa6:	681b      	ldr	r3, [r3, #0]
1004dfa8:	430a      	orrs	r2, r1
1004dfaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
1004dfac:	687b      	ldr	r3, [r7, #4]
1004dfae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004dfb0:	2210      	movs	r2, #16
1004dfb2:	4013      	ands	r3, r2
1004dfb4:	d00b      	beq.n	1004dfce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
1004dfb6:	687b      	ldr	r3, [r7, #4]
1004dfb8:	681b      	ldr	r3, [r3, #0]
1004dfba:	689b      	ldr	r3, [r3, #8]
1004dfbc:	4a2c      	ldr	r2, [pc, #176]	@ (1004e070 <UART_AdvFeatureConfig+0x154>)
1004dfbe:	4013      	ands	r3, r2
1004dfc0:	0019      	movs	r1, r3
1004dfc2:	687b      	ldr	r3, [r7, #4]
1004dfc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
1004dfc6:	687b      	ldr	r3, [r7, #4]
1004dfc8:	681b      	ldr	r3, [r3, #0]
1004dfca:	430a      	orrs	r2, r1
1004dfcc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
1004dfce:	687b      	ldr	r3, [r7, #4]
1004dfd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004dfd2:	2220      	movs	r2, #32
1004dfd4:	4013      	ands	r3, r2
1004dfd6:	d00b      	beq.n	1004dff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
1004dfd8:	687b      	ldr	r3, [r7, #4]
1004dfda:	681b      	ldr	r3, [r3, #0]
1004dfdc:	689b      	ldr	r3, [r3, #8]
1004dfde:	4a25      	ldr	r2, [pc, #148]	@ (1004e074 <UART_AdvFeatureConfig+0x158>)
1004dfe0:	4013      	ands	r3, r2
1004dfe2:	0019      	movs	r1, r3
1004dfe4:	687b      	ldr	r3, [r7, #4]
1004dfe6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004dfe8:	687b      	ldr	r3, [r7, #4]
1004dfea:	681b      	ldr	r3, [r3, #0]
1004dfec:	430a      	orrs	r2, r1
1004dfee:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
1004dff0:	687b      	ldr	r3, [r7, #4]
1004dff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004dff4:	2240      	movs	r2, #64	@ 0x40
1004dff6:	4013      	ands	r3, r2
1004dff8:	d01d      	beq.n	1004e036 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
1004dffa:	687b      	ldr	r3, [r7, #4]
1004dffc:	681b      	ldr	r3, [r3, #0]
1004dffe:	685b      	ldr	r3, [r3, #4]
1004e000:	4a1d      	ldr	r2, [pc, #116]	@ (1004e078 <UART_AdvFeatureConfig+0x15c>)
1004e002:	4013      	ands	r3, r2
1004e004:	0019      	movs	r1, r3
1004e006:	687b      	ldr	r3, [r7, #4]
1004e008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004e00a:	687b      	ldr	r3, [r7, #4]
1004e00c:	681b      	ldr	r3, [r3, #0]
1004e00e:	430a      	orrs	r2, r1
1004e010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
1004e012:	687b      	ldr	r3, [r7, #4]
1004e014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
1004e016:	2380      	movs	r3, #128	@ 0x80
1004e018:	035b      	lsls	r3, r3, #13
1004e01a:	429a      	cmp	r2, r3
1004e01c:	d10b      	bne.n	1004e036 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
1004e01e:	687b      	ldr	r3, [r7, #4]
1004e020:	681b      	ldr	r3, [r3, #0]
1004e022:	685b      	ldr	r3, [r3, #4]
1004e024:	4a15      	ldr	r2, [pc, #84]	@ (1004e07c <UART_AdvFeatureConfig+0x160>)
1004e026:	4013      	ands	r3, r2
1004e028:	0019      	movs	r1, r3
1004e02a:	687b      	ldr	r3, [r7, #4]
1004e02c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004e02e:	687b      	ldr	r3, [r7, #4]
1004e030:	681b      	ldr	r3, [r3, #0]
1004e032:	430a      	orrs	r2, r1
1004e034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
1004e036:	687b      	ldr	r3, [r7, #4]
1004e038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e03a:	2280      	movs	r2, #128	@ 0x80
1004e03c:	4013      	ands	r3, r2
1004e03e:	d00b      	beq.n	1004e058 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
1004e040:	687b      	ldr	r3, [r7, #4]
1004e042:	681b      	ldr	r3, [r3, #0]
1004e044:	685b      	ldr	r3, [r3, #4]
1004e046:	4a0e      	ldr	r2, [pc, #56]	@ (1004e080 <UART_AdvFeatureConfig+0x164>)
1004e048:	4013      	ands	r3, r2
1004e04a:	0019      	movs	r1, r3
1004e04c:	687b      	ldr	r3, [r7, #4]
1004e04e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
1004e050:	687b      	ldr	r3, [r7, #4]
1004e052:	681b      	ldr	r3, [r3, #0]
1004e054:	430a      	orrs	r2, r1
1004e056:	605a      	str	r2, [r3, #4]
  }
}
1004e058:	46c0      	nop			@ (mov r8, r8)
1004e05a:	46bd      	mov	sp, r7
1004e05c:	b002      	add	sp, #8
1004e05e:	bd80      	pop	{r7, pc}
1004e060:	ffff7fff 	.word	0xffff7fff
1004e064:	fffdffff 	.word	0xfffdffff
1004e068:	fffeffff 	.word	0xfffeffff
1004e06c:	fffbffff 	.word	0xfffbffff
1004e070:	ffffefff 	.word	0xffffefff
1004e074:	ffffdfff 	.word	0xffffdfff
1004e078:	ffefffff 	.word	0xffefffff
1004e07c:	ff9fffff 	.word	0xff9fffff
1004e080:	fff7ffff 	.word	0xfff7ffff

1004e084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
1004e084:	b580      	push	{r7, lr}
1004e086:	b092      	sub	sp, #72	@ 0x48
1004e088:	af02      	add	r7, sp, #8
1004e08a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
1004e08c:	687b      	ldr	r3, [r7, #4]
1004e08e:	2290      	movs	r2, #144	@ 0x90
1004e090:	2100      	movs	r1, #0
1004e092:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
1004e094:	f7f9 f812 	bl	100470bc <HAL_GetTick>
1004e098:	0003      	movs	r3, r0
1004e09a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
1004e09c:	687b      	ldr	r3, [r7, #4]
1004e09e:	681b      	ldr	r3, [r3, #0]
1004e0a0:	681b      	ldr	r3, [r3, #0]
1004e0a2:	2208      	movs	r2, #8
1004e0a4:	4013      	ands	r3, r2
1004e0a6:	2b08      	cmp	r3, #8
1004e0a8:	d12d      	bne.n	1004e106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004e0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e0ac:	2280      	movs	r2, #128	@ 0x80
1004e0ae:	0391      	lsls	r1, r2, #14
1004e0b0:	6878      	ldr	r0, [r7, #4]
1004e0b2:	4a47      	ldr	r2, [pc, #284]	@ (1004e1d0 <UART_CheckIdleState+0x14c>)
1004e0b4:	9200      	str	r2, [sp, #0]
1004e0b6:	2200      	movs	r2, #0
1004e0b8:	f000 f88e 	bl	1004e1d8 <UART_WaitOnFlagUntilTimeout>
1004e0bc:	1e03      	subs	r3, r0, #0
1004e0be:	d022      	beq.n	1004e106 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e0c0:	f3ef 8310 	mrs	r3, PRIMASK
1004e0c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
1004e0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
1004e0c8:	63bb      	str	r3, [r7, #56]	@ 0x38
1004e0ca:	2301      	movs	r3, #1
1004e0cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e0d0:	f383 8810 	msr	PRIMASK, r3
}
1004e0d4:	46c0      	nop			@ (mov r8, r8)
1004e0d6:	687b      	ldr	r3, [r7, #4]
1004e0d8:	681b      	ldr	r3, [r3, #0]
1004e0da:	681a      	ldr	r2, [r3, #0]
1004e0dc:	687b      	ldr	r3, [r7, #4]
1004e0de:	681b      	ldr	r3, [r3, #0]
1004e0e0:	2180      	movs	r1, #128	@ 0x80
1004e0e2:	438a      	bics	r2, r1
1004e0e4:	601a      	str	r2, [r3, #0]
1004e0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004e0e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e0ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004e0ec:	f383 8810 	msr	PRIMASK, r3
}
1004e0f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
1004e0f2:	687b      	ldr	r3, [r7, #4]
1004e0f4:	2288      	movs	r2, #136	@ 0x88
1004e0f6:	2120      	movs	r1, #32
1004e0f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004e0fa:	687b      	ldr	r3, [r7, #4]
1004e0fc:	2284      	movs	r2, #132	@ 0x84
1004e0fe:	2100      	movs	r1, #0
1004e100:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004e102:	2303      	movs	r3, #3
1004e104:	e060      	b.n	1004e1c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
1004e106:	687b      	ldr	r3, [r7, #4]
1004e108:	681b      	ldr	r3, [r3, #0]
1004e10a:	681b      	ldr	r3, [r3, #0]
1004e10c:	2204      	movs	r2, #4
1004e10e:	4013      	ands	r3, r2
1004e110:	2b04      	cmp	r3, #4
1004e112:	d146      	bne.n	1004e1a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
1004e114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004e116:	2280      	movs	r2, #128	@ 0x80
1004e118:	03d1      	lsls	r1, r2, #15
1004e11a:	6878      	ldr	r0, [r7, #4]
1004e11c:	4a2c      	ldr	r2, [pc, #176]	@ (1004e1d0 <UART_CheckIdleState+0x14c>)
1004e11e:	9200      	str	r2, [sp, #0]
1004e120:	2200      	movs	r2, #0
1004e122:	f000 f859 	bl	1004e1d8 <UART_WaitOnFlagUntilTimeout>
1004e126:	1e03      	subs	r3, r0, #0
1004e128:	d03b      	beq.n	1004e1a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e12a:	f3ef 8310 	mrs	r3, PRIMASK
1004e12e:	60fb      	str	r3, [r7, #12]
  return(result);
1004e130:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004e132:	637b      	str	r3, [r7, #52]	@ 0x34
1004e134:	2301      	movs	r3, #1
1004e136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e138:	693b      	ldr	r3, [r7, #16]
1004e13a:	f383 8810 	msr	PRIMASK, r3
}
1004e13e:	46c0      	nop			@ (mov r8, r8)
1004e140:	687b      	ldr	r3, [r7, #4]
1004e142:	681b      	ldr	r3, [r3, #0]
1004e144:	681a      	ldr	r2, [r3, #0]
1004e146:	687b      	ldr	r3, [r7, #4]
1004e148:	681b      	ldr	r3, [r3, #0]
1004e14a:	4922      	ldr	r1, [pc, #136]	@ (1004e1d4 <UART_CheckIdleState+0x150>)
1004e14c:	400a      	ands	r2, r1
1004e14e:	601a      	str	r2, [r3, #0]
1004e150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e154:	697b      	ldr	r3, [r7, #20]
1004e156:	f383 8810 	msr	PRIMASK, r3
}
1004e15a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e15c:	f3ef 8310 	mrs	r3, PRIMASK
1004e160:	61bb      	str	r3, [r7, #24]
  return(result);
1004e162:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1004e164:	633b      	str	r3, [r7, #48]	@ 0x30
1004e166:	2301      	movs	r3, #1
1004e168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e16a:	69fb      	ldr	r3, [r7, #28]
1004e16c:	f383 8810 	msr	PRIMASK, r3
}
1004e170:	46c0      	nop			@ (mov r8, r8)
1004e172:	687b      	ldr	r3, [r7, #4]
1004e174:	681b      	ldr	r3, [r3, #0]
1004e176:	689a      	ldr	r2, [r3, #8]
1004e178:	687b      	ldr	r3, [r7, #4]
1004e17a:	681b      	ldr	r3, [r3, #0]
1004e17c:	2101      	movs	r1, #1
1004e17e:	438a      	bics	r2, r1
1004e180:	609a      	str	r2, [r3, #8]
1004e182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e184:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e186:	6a3b      	ldr	r3, [r7, #32]
1004e188:	f383 8810 	msr	PRIMASK, r3
}
1004e18c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
1004e18e:	687b      	ldr	r3, [r7, #4]
1004e190:	228c      	movs	r2, #140	@ 0x8c
1004e192:	2120      	movs	r1, #32
1004e194:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
1004e196:	687b      	ldr	r3, [r7, #4]
1004e198:	2284      	movs	r2, #132	@ 0x84
1004e19a:	2100      	movs	r1, #0
1004e19c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
1004e19e:	2303      	movs	r3, #3
1004e1a0:	e012      	b.n	1004e1c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
1004e1a2:	687b      	ldr	r3, [r7, #4]
1004e1a4:	2288      	movs	r2, #136	@ 0x88
1004e1a6:	2120      	movs	r1, #32
1004e1a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
1004e1aa:	687b      	ldr	r3, [r7, #4]
1004e1ac:	228c      	movs	r2, #140	@ 0x8c
1004e1ae:	2120      	movs	r1, #32
1004e1b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004e1b2:	687b      	ldr	r3, [r7, #4]
1004e1b4:	2200      	movs	r2, #0
1004e1b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
1004e1b8:	687b      	ldr	r3, [r7, #4]
1004e1ba:	2200      	movs	r2, #0
1004e1bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
1004e1be:	687b      	ldr	r3, [r7, #4]
1004e1c0:	2284      	movs	r2, #132	@ 0x84
1004e1c2:	2100      	movs	r1, #0
1004e1c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e1c6:	2300      	movs	r3, #0
}
1004e1c8:	0018      	movs	r0, r3
1004e1ca:	46bd      	mov	sp, r7
1004e1cc:	b010      	add	sp, #64	@ 0x40
1004e1ce:	bd80      	pop	{r7, pc}
1004e1d0:	01ffffff 	.word	0x01ffffff
1004e1d4:	fffffedf 	.word	0xfffffedf

1004e1d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
1004e1d8:	b580      	push	{r7, lr}
1004e1da:	b084      	sub	sp, #16
1004e1dc:	af00      	add	r7, sp, #0
1004e1de:	60f8      	str	r0, [r7, #12]
1004e1e0:	60b9      	str	r1, [r7, #8]
1004e1e2:	603b      	str	r3, [r7, #0]
1004e1e4:	1dfb      	adds	r3, r7, #7
1004e1e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004e1e8:	e051      	b.n	1004e28e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
1004e1ea:	69bb      	ldr	r3, [r7, #24]
1004e1ec:	3301      	adds	r3, #1
1004e1ee:	d04e      	beq.n	1004e28e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
1004e1f0:	f7f8 ff64 	bl	100470bc <HAL_GetTick>
1004e1f4:	0002      	movs	r2, r0
1004e1f6:	683b      	ldr	r3, [r7, #0]
1004e1f8:	1ad3      	subs	r3, r2, r3
1004e1fa:	69ba      	ldr	r2, [r7, #24]
1004e1fc:	429a      	cmp	r2, r3
1004e1fe:	d302      	bcc.n	1004e206 <UART_WaitOnFlagUntilTimeout+0x2e>
1004e200:	69bb      	ldr	r3, [r7, #24]
1004e202:	2b00      	cmp	r3, #0
1004e204:	d101      	bne.n	1004e20a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
1004e206:	2303      	movs	r3, #3
1004e208:	e051      	b.n	1004e2ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
1004e20a:	68fb      	ldr	r3, [r7, #12]
1004e20c:	681b      	ldr	r3, [r3, #0]
1004e20e:	681b      	ldr	r3, [r3, #0]
1004e210:	2204      	movs	r2, #4
1004e212:	4013      	ands	r3, r2
1004e214:	d03b      	beq.n	1004e28e <UART_WaitOnFlagUntilTimeout+0xb6>
1004e216:	68bb      	ldr	r3, [r7, #8]
1004e218:	2b80      	cmp	r3, #128	@ 0x80
1004e21a:	d038      	beq.n	1004e28e <UART_WaitOnFlagUntilTimeout+0xb6>
1004e21c:	68bb      	ldr	r3, [r7, #8]
1004e21e:	2b40      	cmp	r3, #64	@ 0x40
1004e220:	d035      	beq.n	1004e28e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
1004e222:	68fb      	ldr	r3, [r7, #12]
1004e224:	681b      	ldr	r3, [r3, #0]
1004e226:	69db      	ldr	r3, [r3, #28]
1004e228:	2208      	movs	r2, #8
1004e22a:	4013      	ands	r3, r2
1004e22c:	2b08      	cmp	r3, #8
1004e22e:	d111      	bne.n	1004e254 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1004e230:	68fb      	ldr	r3, [r7, #12]
1004e232:	681b      	ldr	r3, [r3, #0]
1004e234:	2208      	movs	r2, #8
1004e236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004e238:	68fb      	ldr	r3, [r7, #12]
1004e23a:	0018      	movs	r0, r3
1004e23c:	f000 f83c 	bl	1004e2b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
1004e240:	68fb      	ldr	r3, [r7, #12]
1004e242:	2290      	movs	r2, #144	@ 0x90
1004e244:	2108      	movs	r1, #8
1004e246:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004e248:	68fb      	ldr	r3, [r7, #12]
1004e24a:	2284      	movs	r2, #132	@ 0x84
1004e24c:	2100      	movs	r1, #0
1004e24e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
1004e250:	2301      	movs	r3, #1
1004e252:	e02c      	b.n	1004e2ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
1004e254:	68fb      	ldr	r3, [r7, #12]
1004e256:	681b      	ldr	r3, [r3, #0]
1004e258:	69da      	ldr	r2, [r3, #28]
1004e25a:	2380      	movs	r3, #128	@ 0x80
1004e25c:	011b      	lsls	r3, r3, #4
1004e25e:	401a      	ands	r2, r3
1004e260:	2380      	movs	r3, #128	@ 0x80
1004e262:	011b      	lsls	r3, r3, #4
1004e264:	429a      	cmp	r2, r3
1004e266:	d112      	bne.n	1004e28e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
1004e268:	68fb      	ldr	r3, [r7, #12]
1004e26a:	681b      	ldr	r3, [r3, #0]
1004e26c:	2280      	movs	r2, #128	@ 0x80
1004e26e:	0112      	lsls	r2, r2, #4
1004e270:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
1004e272:	68fb      	ldr	r3, [r7, #12]
1004e274:	0018      	movs	r0, r3
1004e276:	f000 f81f 	bl	1004e2b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
1004e27a:	68fb      	ldr	r3, [r7, #12]
1004e27c:	2290      	movs	r2, #144	@ 0x90
1004e27e:	2120      	movs	r1, #32
1004e280:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
1004e282:	68fb      	ldr	r3, [r7, #12]
1004e284:	2284      	movs	r2, #132	@ 0x84
1004e286:	2100      	movs	r1, #0
1004e288:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
1004e28a:	2303      	movs	r3, #3
1004e28c:	e00f      	b.n	1004e2ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1004e28e:	68fb      	ldr	r3, [r7, #12]
1004e290:	681b      	ldr	r3, [r3, #0]
1004e292:	69db      	ldr	r3, [r3, #28]
1004e294:	68ba      	ldr	r2, [r7, #8]
1004e296:	4013      	ands	r3, r2
1004e298:	68ba      	ldr	r2, [r7, #8]
1004e29a:	1ad3      	subs	r3, r2, r3
1004e29c:	425a      	negs	r2, r3
1004e29e:	4153      	adcs	r3, r2
1004e2a0:	b2db      	uxtb	r3, r3
1004e2a2:	001a      	movs	r2, r3
1004e2a4:	1dfb      	adds	r3, r7, #7
1004e2a6:	781b      	ldrb	r3, [r3, #0]
1004e2a8:	429a      	cmp	r2, r3
1004e2aa:	d09e      	beq.n	1004e1ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1004e2ac:	2300      	movs	r3, #0
}
1004e2ae:	0018      	movs	r0, r3
1004e2b0:	46bd      	mov	sp, r7
1004e2b2:	b004      	add	sp, #16
1004e2b4:	bd80      	pop	{r7, pc}
	...

1004e2b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
1004e2b8:	b580      	push	{r7, lr}
1004e2ba:	b08e      	sub	sp, #56	@ 0x38
1004e2bc:	af00      	add	r7, sp, #0
1004e2be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e2c0:	f3ef 8310 	mrs	r3, PRIMASK
1004e2c4:	617b      	str	r3, [r7, #20]
  return(result);
1004e2c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
1004e2c8:	637b      	str	r3, [r7, #52]	@ 0x34
1004e2ca:	2301      	movs	r3, #1
1004e2cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e2ce:	69bb      	ldr	r3, [r7, #24]
1004e2d0:	f383 8810 	msr	PRIMASK, r3
}
1004e2d4:	46c0      	nop			@ (mov r8, r8)
1004e2d6:	687b      	ldr	r3, [r7, #4]
1004e2d8:	681b      	ldr	r3, [r3, #0]
1004e2da:	681a      	ldr	r2, [r3, #0]
1004e2dc:	687b      	ldr	r3, [r7, #4]
1004e2de:	681b      	ldr	r3, [r3, #0]
1004e2e0:	4926      	ldr	r1, [pc, #152]	@ (1004e37c <UART_EndRxTransfer+0xc4>)
1004e2e2:	400a      	ands	r2, r1
1004e2e4:	601a      	str	r2, [r3, #0]
1004e2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
1004e2e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e2ea:	69fb      	ldr	r3, [r7, #28]
1004e2ec:	f383 8810 	msr	PRIMASK, r3
}
1004e2f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e2f2:	f3ef 8310 	mrs	r3, PRIMASK
1004e2f6:	623b      	str	r3, [r7, #32]
  return(result);
1004e2f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
1004e2fa:	633b      	str	r3, [r7, #48]	@ 0x30
1004e2fc:	2301      	movs	r3, #1
1004e2fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004e302:	f383 8810 	msr	PRIMASK, r3
}
1004e306:	46c0      	nop			@ (mov r8, r8)
1004e308:	687b      	ldr	r3, [r7, #4]
1004e30a:	681b      	ldr	r3, [r3, #0]
1004e30c:	689a      	ldr	r2, [r3, #8]
1004e30e:	687b      	ldr	r3, [r7, #4]
1004e310:	681b      	ldr	r3, [r3, #0]
1004e312:	491b      	ldr	r1, [pc, #108]	@ (1004e380 <UART_EndRxTransfer+0xc8>)
1004e314:	400a      	ands	r2, r1
1004e316:	609a      	str	r2, [r3, #8]
1004e318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1004e31a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004e31e:	f383 8810 	msr	PRIMASK, r3
}
1004e322:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
1004e324:	687b      	ldr	r3, [r7, #4]
1004e326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
1004e328:	2b01      	cmp	r3, #1
1004e32a:	d118      	bne.n	1004e35e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e32c:	f3ef 8310 	mrs	r3, PRIMASK
1004e330:	60bb      	str	r3, [r7, #8]
  return(result);
1004e332:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
1004e334:	62fb      	str	r3, [r7, #44]	@ 0x2c
1004e336:	2301      	movs	r3, #1
1004e338:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e33a:	68fb      	ldr	r3, [r7, #12]
1004e33c:	f383 8810 	msr	PRIMASK, r3
}
1004e340:	46c0      	nop			@ (mov r8, r8)
1004e342:	687b      	ldr	r3, [r7, #4]
1004e344:	681b      	ldr	r3, [r3, #0]
1004e346:	681a      	ldr	r2, [r3, #0]
1004e348:	687b      	ldr	r3, [r7, #4]
1004e34a:	681b      	ldr	r3, [r3, #0]
1004e34c:	2110      	movs	r1, #16
1004e34e:	438a      	bics	r2, r1
1004e350:	601a      	str	r2, [r3, #0]
1004e352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
1004e354:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e356:	693b      	ldr	r3, [r7, #16]
1004e358:	f383 8810 	msr	PRIMASK, r3
}
1004e35c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
1004e35e:	687b      	ldr	r3, [r7, #4]
1004e360:	228c      	movs	r2, #140	@ 0x8c
1004e362:	2120      	movs	r1, #32
1004e364:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
1004e366:	687b      	ldr	r3, [r7, #4]
1004e368:	2200      	movs	r2, #0
1004e36a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
1004e36c:	687b      	ldr	r3, [r7, #4]
1004e36e:	2200      	movs	r2, #0
1004e370:	675a      	str	r2, [r3, #116]	@ 0x74
}
1004e372:	46c0      	nop			@ (mov r8, r8)
1004e374:	46bd      	mov	sp, r7
1004e376:	b00e      	add	sp, #56	@ 0x38
1004e378:	bd80      	pop	{r7, pc}
1004e37a:	46c0      	nop			@ (mov r8, r8)
1004e37c:	fffffedf 	.word	0xfffffedf
1004e380:	effffffe 	.word	0xeffffffe

1004e384 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
1004e384:	b580      	push	{r7, lr}
1004e386:	b084      	sub	sp, #16
1004e388:	af00      	add	r7, sp, #0
1004e38a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
1004e38c:	687b      	ldr	r3, [r7, #4]
1004e38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
1004e392:	68fb      	ldr	r3, [r7, #12]
1004e394:	225e      	movs	r2, #94	@ 0x5e
1004e396:	2100      	movs	r1, #0
1004e398:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
1004e39a:	68fb      	ldr	r3, [r7, #12]
1004e39c:	22a4      	movs	r2, #164	@ 0xa4
1004e39e:	589b      	ldr	r3, [r3, r2]
1004e3a0:	68fa      	ldr	r2, [r7, #12]
1004e3a2:	0010      	movs	r0, r2
1004e3a4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
1004e3a6:	46c0      	nop			@ (mov r8, r8)
1004e3a8:	46bd      	mov	sp, r7
1004e3aa:	b004      	add	sp, #16
1004e3ac:	bd80      	pop	{r7, pc}

1004e3ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
1004e3ae:	b580      	push	{r7, lr}
1004e3b0:	b086      	sub	sp, #24
1004e3b2:	af00      	add	r7, sp, #0
1004e3b4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
1004e3b6:	f3ef 8310 	mrs	r3, PRIMASK
1004e3ba:	60bb      	str	r3, [r7, #8]
  return(result);
1004e3bc:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
1004e3be:	617b      	str	r3, [r7, #20]
1004e3c0:	2301      	movs	r3, #1
1004e3c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e3c4:	68fb      	ldr	r3, [r7, #12]
1004e3c6:	f383 8810 	msr	PRIMASK, r3
}
1004e3ca:	46c0      	nop			@ (mov r8, r8)
1004e3cc:	687b      	ldr	r3, [r7, #4]
1004e3ce:	681b      	ldr	r3, [r3, #0]
1004e3d0:	681a      	ldr	r2, [r3, #0]
1004e3d2:	687b      	ldr	r3, [r7, #4]
1004e3d4:	681b      	ldr	r3, [r3, #0]
1004e3d6:	2140      	movs	r1, #64	@ 0x40
1004e3d8:	438a      	bics	r2, r1
1004e3da:	601a      	str	r2, [r3, #0]
1004e3dc:	697b      	ldr	r3, [r7, #20]
1004e3de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1004e3e0:	693b      	ldr	r3, [r7, #16]
1004e3e2:	f383 8810 	msr	PRIMASK, r3
}
1004e3e6:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
1004e3e8:	687b      	ldr	r3, [r7, #4]
1004e3ea:	2288      	movs	r2, #136	@ 0x88
1004e3ec:	2120      	movs	r1, #32
1004e3ee:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
1004e3f0:	687b      	ldr	r3, [r7, #4]
1004e3f2:	2200      	movs	r2, #0
1004e3f4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
1004e3f6:	687b      	ldr	r3, [r7, #4]
1004e3f8:	2298      	movs	r2, #152	@ 0x98
1004e3fa:	589b      	ldr	r3, [r3, r2]
1004e3fc:	687a      	ldr	r2, [r7, #4]
1004e3fe:	0010      	movs	r0, r2
1004e400:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
1004e402:	46c0      	nop			@ (mov r8, r8)
1004e404:	46bd      	mov	sp, r7
1004e406:	b006      	add	sp, #24
1004e408:	bd80      	pop	{r7, pc}

1004e40a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
1004e40a:	b580      	push	{r7, lr}
1004e40c:	b082      	sub	sp, #8
1004e40e:	af00      	add	r7, sp, #0
1004e410:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
1004e412:	46c0      	nop			@ (mov r8, r8)
1004e414:	46bd      	mov	sp, r7
1004e416:	b002      	add	sp, #8
1004e418:	bd80      	pop	{r7, pc}

1004e41a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
1004e41a:	b580      	push	{r7, lr}
1004e41c:	b082      	sub	sp, #8
1004e41e:	af00      	add	r7, sp, #0
1004e420:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004e422:	46c0      	nop			@ (mov r8, r8)
1004e424:	46bd      	mov	sp, r7
1004e426:	b002      	add	sp, #8
1004e428:	bd80      	pop	{r7, pc}

1004e42a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
1004e42a:	b580      	push	{r7, lr}
1004e42c:	b082      	sub	sp, #8
1004e42e:	af00      	add	r7, sp, #0
1004e430:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004e432:	46c0      	nop			@ (mov r8, r8)
1004e434:	46bd      	mov	sp, r7
1004e436:	b002      	add	sp, #8
1004e438:	bd80      	pop	{r7, pc}

1004e43a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
1004e43a:	b580      	push	{r7, lr}
1004e43c:	b084      	sub	sp, #16
1004e43e:	af00      	add	r7, sp, #0
1004e440:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1004e442:	687b      	ldr	r3, [r7, #4]
1004e444:	2284      	movs	r2, #132	@ 0x84
1004e446:	5c9b      	ldrb	r3, [r3, r2]
1004e448:	2b01      	cmp	r3, #1
1004e44a:	d101      	bne.n	1004e450 <HAL_UARTEx_EnableFifoMode+0x16>
1004e44c:	2302      	movs	r3, #2
1004e44e:	e02d      	b.n	1004e4ac <HAL_UARTEx_EnableFifoMode+0x72>
1004e450:	687b      	ldr	r3, [r7, #4]
1004e452:	2284      	movs	r2, #132	@ 0x84
1004e454:	2101      	movs	r1, #1
1004e456:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004e458:	687b      	ldr	r3, [r7, #4]
1004e45a:	2288      	movs	r2, #136	@ 0x88
1004e45c:	2124      	movs	r1, #36	@ 0x24
1004e45e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004e460:	687b      	ldr	r3, [r7, #4]
1004e462:	681b      	ldr	r3, [r3, #0]
1004e464:	681b      	ldr	r3, [r3, #0]
1004e466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004e468:	687b      	ldr	r3, [r7, #4]
1004e46a:	681b      	ldr	r3, [r3, #0]
1004e46c:	681a      	ldr	r2, [r3, #0]
1004e46e:	687b      	ldr	r3, [r7, #4]
1004e470:	681b      	ldr	r3, [r3, #0]
1004e472:	2101      	movs	r1, #1
1004e474:	438a      	bics	r2, r1
1004e476:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
1004e478:	68fb      	ldr	r3, [r7, #12]
1004e47a:	2280      	movs	r2, #128	@ 0x80
1004e47c:	0592      	lsls	r2, r2, #22
1004e47e:	4313      	orrs	r3, r2
1004e480:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
1004e482:	687b      	ldr	r3, [r7, #4]
1004e484:	2280      	movs	r2, #128	@ 0x80
1004e486:	0592      	lsls	r2, r2, #22
1004e488:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004e48a:	687b      	ldr	r3, [r7, #4]
1004e48c:	681b      	ldr	r3, [r3, #0]
1004e48e:	68fa      	ldr	r2, [r7, #12]
1004e490:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004e492:	687b      	ldr	r3, [r7, #4]
1004e494:	0018      	movs	r0, r3
1004e496:	f000 f88f 	bl	1004e5b8 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
1004e49a:	687b      	ldr	r3, [r7, #4]
1004e49c:	2288      	movs	r2, #136	@ 0x88
1004e49e:	2120      	movs	r1, #32
1004e4a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004e4a2:	687b      	ldr	r3, [r7, #4]
1004e4a4:	2284      	movs	r2, #132	@ 0x84
1004e4a6:	2100      	movs	r1, #0
1004e4a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e4aa:	2300      	movs	r3, #0
}
1004e4ac:	0018      	movs	r0, r3
1004e4ae:	46bd      	mov	sp, r7
1004e4b0:	b004      	add	sp, #16
1004e4b2:	bd80      	pop	{r7, pc}

1004e4b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004e4b4:	b580      	push	{r7, lr}
1004e4b6:	b084      	sub	sp, #16
1004e4b8:	af00      	add	r7, sp, #0
1004e4ba:	6078      	str	r0, [r7, #4]
1004e4bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004e4be:	687b      	ldr	r3, [r7, #4]
1004e4c0:	2284      	movs	r2, #132	@ 0x84
1004e4c2:	5c9b      	ldrb	r3, [r3, r2]
1004e4c4:	2b01      	cmp	r3, #1
1004e4c6:	d101      	bne.n	1004e4cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
1004e4c8:	2302      	movs	r3, #2
1004e4ca:	e02e      	b.n	1004e52a <HAL_UARTEx_SetTxFifoThreshold+0x76>
1004e4cc:	687b      	ldr	r3, [r7, #4]
1004e4ce:	2284      	movs	r2, #132	@ 0x84
1004e4d0:	2101      	movs	r1, #1
1004e4d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004e4d4:	687b      	ldr	r3, [r7, #4]
1004e4d6:	2288      	movs	r2, #136	@ 0x88
1004e4d8:	2124      	movs	r1, #36	@ 0x24
1004e4da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004e4dc:	687b      	ldr	r3, [r7, #4]
1004e4de:	681b      	ldr	r3, [r3, #0]
1004e4e0:	681b      	ldr	r3, [r3, #0]
1004e4e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004e4e4:	687b      	ldr	r3, [r7, #4]
1004e4e6:	681b      	ldr	r3, [r3, #0]
1004e4e8:	681a      	ldr	r2, [r3, #0]
1004e4ea:	687b      	ldr	r3, [r7, #4]
1004e4ec:	681b      	ldr	r3, [r3, #0]
1004e4ee:	2101      	movs	r1, #1
1004e4f0:	438a      	bics	r2, r1
1004e4f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
1004e4f4:	687b      	ldr	r3, [r7, #4]
1004e4f6:	681b      	ldr	r3, [r3, #0]
1004e4f8:	689b      	ldr	r3, [r3, #8]
1004e4fa:	00db      	lsls	r3, r3, #3
1004e4fc:	08d9      	lsrs	r1, r3, #3
1004e4fe:	687b      	ldr	r3, [r7, #4]
1004e500:	681b      	ldr	r3, [r3, #0]
1004e502:	683a      	ldr	r2, [r7, #0]
1004e504:	430a      	orrs	r2, r1
1004e506:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004e508:	687b      	ldr	r3, [r7, #4]
1004e50a:	0018      	movs	r0, r3
1004e50c:	f000 f854 	bl	1004e5b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004e510:	687b      	ldr	r3, [r7, #4]
1004e512:	681b      	ldr	r3, [r3, #0]
1004e514:	68fa      	ldr	r2, [r7, #12]
1004e516:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004e518:	687b      	ldr	r3, [r7, #4]
1004e51a:	2288      	movs	r2, #136	@ 0x88
1004e51c:	2120      	movs	r1, #32
1004e51e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004e520:	687b      	ldr	r3, [r7, #4]
1004e522:	2284      	movs	r2, #132	@ 0x84
1004e524:	2100      	movs	r1, #0
1004e526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e528:	2300      	movs	r3, #0
}
1004e52a:	0018      	movs	r0, r3
1004e52c:	46bd      	mov	sp, r7
1004e52e:	b004      	add	sp, #16
1004e530:	bd80      	pop	{r7, pc}
	...

1004e534 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
1004e534:	b580      	push	{r7, lr}
1004e536:	b084      	sub	sp, #16
1004e538:	af00      	add	r7, sp, #0
1004e53a:	6078      	str	r0, [r7, #4]
1004e53c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1004e53e:	687b      	ldr	r3, [r7, #4]
1004e540:	2284      	movs	r2, #132	@ 0x84
1004e542:	5c9b      	ldrb	r3, [r3, r2]
1004e544:	2b01      	cmp	r3, #1
1004e546:	d101      	bne.n	1004e54c <HAL_UARTEx_SetRxFifoThreshold+0x18>
1004e548:	2302      	movs	r3, #2
1004e54a:	e02f      	b.n	1004e5ac <HAL_UARTEx_SetRxFifoThreshold+0x78>
1004e54c:	687b      	ldr	r3, [r7, #4]
1004e54e:	2284      	movs	r2, #132	@ 0x84
1004e550:	2101      	movs	r1, #1
1004e552:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
1004e554:	687b      	ldr	r3, [r7, #4]
1004e556:	2288      	movs	r2, #136	@ 0x88
1004e558:	2124      	movs	r1, #36	@ 0x24
1004e55a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1004e55c:	687b      	ldr	r3, [r7, #4]
1004e55e:	681b      	ldr	r3, [r3, #0]
1004e560:	681b      	ldr	r3, [r3, #0]
1004e562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
1004e564:	687b      	ldr	r3, [r7, #4]
1004e566:	681b      	ldr	r3, [r3, #0]
1004e568:	681a      	ldr	r2, [r3, #0]
1004e56a:	687b      	ldr	r3, [r7, #4]
1004e56c:	681b      	ldr	r3, [r3, #0]
1004e56e:	2101      	movs	r1, #1
1004e570:	438a      	bics	r2, r1
1004e572:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
1004e574:	687b      	ldr	r3, [r7, #4]
1004e576:	681b      	ldr	r3, [r3, #0]
1004e578:	689b      	ldr	r3, [r3, #8]
1004e57a:	4a0e      	ldr	r2, [pc, #56]	@ (1004e5b4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
1004e57c:	4013      	ands	r3, r2
1004e57e:	0019      	movs	r1, r3
1004e580:	687b      	ldr	r3, [r7, #4]
1004e582:	681b      	ldr	r3, [r3, #0]
1004e584:	683a      	ldr	r2, [r7, #0]
1004e586:	430a      	orrs	r2, r1
1004e588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1004e58a:	687b      	ldr	r3, [r7, #4]
1004e58c:	0018      	movs	r0, r3
1004e58e:	f000 f813 	bl	1004e5b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1004e592:	687b      	ldr	r3, [r7, #4]
1004e594:	681b      	ldr	r3, [r3, #0]
1004e596:	68fa      	ldr	r2, [r7, #12]
1004e598:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
1004e59a:	687b      	ldr	r3, [r7, #4]
1004e59c:	2288      	movs	r2, #136	@ 0x88
1004e59e:	2120      	movs	r1, #32
1004e5a0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1004e5a2:	687b      	ldr	r3, [r7, #4]
1004e5a4:	2284      	movs	r2, #132	@ 0x84
1004e5a6:	2100      	movs	r1, #0
1004e5a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
1004e5aa:	2300      	movs	r3, #0
}
1004e5ac:	0018      	movs	r0, r3
1004e5ae:	46bd      	mov	sp, r7
1004e5b0:	b004      	add	sp, #16
1004e5b2:	bd80      	pop	{r7, pc}
1004e5b4:	f1ffffff 	.word	0xf1ffffff

1004e5b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
1004e5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004e5ba:	b085      	sub	sp, #20
1004e5bc:	af00      	add	r7, sp, #0
1004e5be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
1004e5c0:	687b      	ldr	r3, [r7, #4]
1004e5c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
1004e5c4:	2b00      	cmp	r3, #0
1004e5c6:	d108      	bne.n	1004e5da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
1004e5c8:	687b      	ldr	r3, [r7, #4]
1004e5ca:	226a      	movs	r2, #106	@ 0x6a
1004e5cc:	2101      	movs	r1, #1
1004e5ce:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
1004e5d0:	687b      	ldr	r3, [r7, #4]
1004e5d2:	2268      	movs	r2, #104	@ 0x68
1004e5d4:	2101      	movs	r1, #1
1004e5d6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
1004e5d8:	e043      	b.n	1004e662 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
1004e5da:	260f      	movs	r6, #15
1004e5dc:	19bb      	adds	r3, r7, r6
1004e5de:	2208      	movs	r2, #8
1004e5e0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
1004e5e2:	200e      	movs	r0, #14
1004e5e4:	183b      	adds	r3, r7, r0
1004e5e6:	2208      	movs	r2, #8
1004e5e8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
1004e5ea:	687b      	ldr	r3, [r7, #4]
1004e5ec:	681b      	ldr	r3, [r3, #0]
1004e5ee:	689b      	ldr	r3, [r3, #8]
1004e5f0:	0e5b      	lsrs	r3, r3, #25
1004e5f2:	b2da      	uxtb	r2, r3
1004e5f4:	240d      	movs	r4, #13
1004e5f6:	193b      	adds	r3, r7, r4
1004e5f8:	2107      	movs	r1, #7
1004e5fa:	400a      	ands	r2, r1
1004e5fc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
1004e5fe:	687b      	ldr	r3, [r7, #4]
1004e600:	681b      	ldr	r3, [r3, #0]
1004e602:	689b      	ldr	r3, [r3, #8]
1004e604:	0f5b      	lsrs	r3, r3, #29
1004e606:	b2da      	uxtb	r2, r3
1004e608:	250c      	movs	r5, #12
1004e60a:	197b      	adds	r3, r7, r5
1004e60c:	2107      	movs	r1, #7
1004e60e:	400a      	ands	r2, r1
1004e610:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004e612:	183b      	adds	r3, r7, r0
1004e614:	781b      	ldrb	r3, [r3, #0]
1004e616:	197a      	adds	r2, r7, r5
1004e618:	7812      	ldrb	r2, [r2, #0]
1004e61a:	4914      	ldr	r1, [pc, #80]	@ (1004e66c <UARTEx_SetNbDataToProcess+0xb4>)
1004e61c:	5c8a      	ldrb	r2, [r1, r2]
1004e61e:	435a      	muls	r2, r3
1004e620:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
1004e622:	197b      	adds	r3, r7, r5
1004e624:	781b      	ldrb	r3, [r3, #0]
1004e626:	4a12      	ldr	r2, [pc, #72]	@ (1004e670 <UARTEx_SetNbDataToProcess+0xb8>)
1004e628:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
1004e62a:	0019      	movs	r1, r3
1004e62c:	f7f1 fe92 	bl	10040354 <__divsi3>
1004e630:	0003      	movs	r3, r0
1004e632:	b299      	uxth	r1, r3
1004e634:	687b      	ldr	r3, [r7, #4]
1004e636:	226a      	movs	r2, #106	@ 0x6a
1004e638:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004e63a:	19bb      	adds	r3, r7, r6
1004e63c:	781b      	ldrb	r3, [r3, #0]
1004e63e:	193a      	adds	r2, r7, r4
1004e640:	7812      	ldrb	r2, [r2, #0]
1004e642:	490a      	ldr	r1, [pc, #40]	@ (1004e66c <UARTEx_SetNbDataToProcess+0xb4>)
1004e644:	5c8a      	ldrb	r2, [r1, r2]
1004e646:	435a      	muls	r2, r3
1004e648:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
1004e64a:	193b      	adds	r3, r7, r4
1004e64c:	781b      	ldrb	r3, [r3, #0]
1004e64e:	4a08      	ldr	r2, [pc, #32]	@ (1004e670 <UARTEx_SetNbDataToProcess+0xb8>)
1004e650:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
1004e652:	0019      	movs	r1, r3
1004e654:	f7f1 fe7e 	bl	10040354 <__divsi3>
1004e658:	0003      	movs	r3, r0
1004e65a:	b299      	uxth	r1, r3
1004e65c:	687b      	ldr	r3, [r7, #4]
1004e65e:	2268      	movs	r2, #104	@ 0x68
1004e660:	5299      	strh	r1, [r3, r2]
}
1004e662:	46c0      	nop			@ (mov r8, r8)
1004e664:	46bd      	mov	sp, r7
1004e666:	b005      	add	sp, #20
1004e668:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004e66a:	46c0      	nop			@ (mov r8, r8)
1004e66c:	1006947c 	.word	0x1006947c
1004e670:	10069484 	.word	0x10069484

1004e674 <HAL_USART_IRQHandler>:
  * @brief  Handle USART interrupt request.
  * @param  husart USART handle.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
1004e674:	b580      	push	{r7, lr}
1004e676:	b088      	sub	sp, #32
1004e678:	af00      	add	r7, sp, #0
1004e67a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(husart->Instance->ISR);
1004e67c:	687b      	ldr	r3, [r7, #4]
1004e67e:	681b      	ldr	r3, [r3, #0]
1004e680:	69db      	ldr	r3, [r3, #28]
1004e682:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(husart->Instance->CR1);
1004e684:	687b      	ldr	r3, [r7, #4]
1004e686:	681b      	ldr	r3, [r3, #0]
1004e688:	681b      	ldr	r3, [r3, #0]
1004e68a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(husart->Instance->CR3);
1004e68c:	687b      	ldr	r3, [r7, #4]
1004e68e:	681b      	ldr	r3, [r3, #0]
1004e690:	689b      	ldr	r3, [r3, #8]
1004e692:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF |
1004e694:	69fb      	ldr	r3, [r7, #28]
1004e696:	4ab3      	ldr	r2, [pc, #716]	@ (1004e964 <HAL_USART_IRQHandler+0x2f0>)
1004e698:	4013      	ands	r3, r2
1004e69a:	613b      	str	r3, [r7, #16]
                                      USART_ISR_UDR));
  if (errorflags == 0U)
1004e69c:	693b      	ldr	r3, [r7, #16]
1004e69e:	2b00      	cmp	r3, #0
1004e6a0:	d117      	bne.n	1004e6d2 <HAL_USART_IRQHandler+0x5e>
  {
    /* USART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004e6a2:	69fb      	ldr	r3, [r7, #28]
1004e6a4:	2220      	movs	r2, #32
1004e6a6:	4013      	ands	r3, r2
1004e6a8:	d013      	beq.n	1004e6d2 <HAL_USART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004e6aa:	69bb      	ldr	r3, [r7, #24]
1004e6ac:	2220      	movs	r2, #32
1004e6ae:	4013      	ands	r3, r2
1004e6b0:	d104      	bne.n	1004e6bc <HAL_USART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004e6b2:	697a      	ldr	r2, [r7, #20]
1004e6b4:	2380      	movs	r3, #128	@ 0x80
1004e6b6:	055b      	lsls	r3, r3, #21
1004e6b8:	4013      	ands	r3, r2
1004e6ba:	d00a      	beq.n	1004e6d2 <HAL_USART_IRQHandler+0x5e>
    {
      if (husart->RxISR != NULL)
1004e6bc:	687b      	ldr	r3, [r7, #4]
1004e6be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e6c0:	2b00      	cmp	r3, #0
1004e6c2:	d100      	bne.n	1004e6c6 <HAL_USART_IRQHandler+0x52>
1004e6c4:	e14a      	b.n	1004e95c <HAL_USART_IRQHandler+0x2e8>
      {
        husart->RxISR(husart);
1004e6c6:	687b      	ldr	r3, [r7, #4]
1004e6c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e6ca:	687a      	ldr	r2, [r7, #4]
1004e6cc:	0010      	movs	r0, r2
1004e6ce:	4798      	blx	r3
      }
      return;
1004e6d0:	e144      	b.n	1004e95c <HAL_USART_IRQHandler+0x2e8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
1004e6d2:	693b      	ldr	r3, [r7, #16]
1004e6d4:	2b00      	cmp	r3, #0
1004e6d6:	d100      	bne.n	1004e6da <HAL_USART_IRQHandler+0x66>
1004e6d8:	e100      	b.n	1004e8dc <HAL_USART_IRQHandler+0x268>
      && (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
1004e6da:	697b      	ldr	r3, [r7, #20]
1004e6dc:	4aa2      	ldr	r2, [pc, #648]	@ (1004e968 <HAL_USART_IRQHandler+0x2f4>)
1004e6de:	4013      	ands	r3, r2
1004e6e0:	d105      	bne.n	1004e6ee <HAL_USART_IRQHandler+0x7a>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
1004e6e2:	69ba      	ldr	r2, [r7, #24]
1004e6e4:	2390      	movs	r3, #144	@ 0x90
1004e6e6:	005b      	lsls	r3, r3, #1
1004e6e8:	4013      	ands	r3, r2
1004e6ea:	d100      	bne.n	1004e6ee <HAL_USART_IRQHandler+0x7a>
1004e6ec:	e0f6      	b.n	1004e8dc <HAL_USART_IRQHandler+0x268>
  {
    /* USART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
1004e6ee:	69fb      	ldr	r3, [r7, #28]
1004e6f0:	2201      	movs	r2, #1
1004e6f2:	4013      	ands	r3, r2
1004e6f4:	d00e      	beq.n	1004e714 <HAL_USART_IRQHandler+0xa0>
1004e6f6:	69ba      	ldr	r2, [r7, #24]
1004e6f8:	2380      	movs	r3, #128	@ 0x80
1004e6fa:	005b      	lsls	r3, r3, #1
1004e6fc:	4013      	ands	r3, r2
1004e6fe:	d009      	beq.n	1004e714 <HAL_USART_IRQHandler+0xa0>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_PEF);
1004e700:	687b      	ldr	r3, [r7, #4]
1004e702:	681b      	ldr	r3, [r3, #0]
1004e704:	2201      	movs	r2, #1
1004e706:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_PE;
1004e708:	687b      	ldr	r3, [r7, #4]
1004e70a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e70c:	2201      	movs	r2, #1
1004e70e:	431a      	orrs	r2, r3
1004e710:	687b      	ldr	r3, [r7, #4]
1004e712:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004e714:	69fb      	ldr	r3, [r7, #28]
1004e716:	2202      	movs	r2, #2
1004e718:	4013      	ands	r3, r2
1004e71a:	d00d      	beq.n	1004e738 <HAL_USART_IRQHandler+0xc4>
1004e71c:	697b      	ldr	r3, [r7, #20]
1004e71e:	2201      	movs	r2, #1
1004e720:	4013      	ands	r3, r2
1004e722:	d009      	beq.n	1004e738 <HAL_USART_IRQHandler+0xc4>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_FEF);
1004e724:	687b      	ldr	r3, [r7, #4]
1004e726:	681b      	ldr	r3, [r3, #0]
1004e728:	2202      	movs	r2, #2
1004e72a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_FE;
1004e72c:	687b      	ldr	r3, [r7, #4]
1004e72e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e730:	2204      	movs	r2, #4
1004e732:	431a      	orrs	r2, r3
1004e734:	687b      	ldr	r3, [r7, #4]
1004e736:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004e738:	69fb      	ldr	r3, [r7, #28]
1004e73a:	2204      	movs	r2, #4
1004e73c:	4013      	ands	r3, r2
1004e73e:	d00d      	beq.n	1004e75c <HAL_USART_IRQHandler+0xe8>
1004e740:	697b      	ldr	r3, [r7, #20]
1004e742:	2201      	movs	r2, #1
1004e744:	4013      	ands	r3, r2
1004e746:	d009      	beq.n	1004e75c <HAL_USART_IRQHandler+0xe8>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_NEF);
1004e748:	687b      	ldr	r3, [r7, #4]
1004e74a:	681b      	ldr	r3, [r3, #0]
1004e74c:	2204      	movs	r2, #4
1004e74e:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_NE;
1004e750:	687b      	ldr	r3, [r7, #4]
1004e752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e754:	2202      	movs	r2, #2
1004e756:	431a      	orrs	r2, r3
1004e758:	687b      	ldr	r3, [r7, #4]
1004e75a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
1004e75c:	69fb      	ldr	r3, [r7, #28]
1004e75e:	2208      	movs	r2, #8
1004e760:	4013      	ands	r3, r2
1004e762:	d011      	beq.n	1004e788 <HAL_USART_IRQHandler+0x114>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004e764:	69bb      	ldr	r3, [r7, #24]
1004e766:	2220      	movs	r2, #32
1004e768:	4013      	ands	r3, r2
1004e76a:	d103      	bne.n	1004e774 <HAL_USART_IRQHandler+0x100>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
1004e76c:	697b      	ldr	r3, [r7, #20]
1004e76e:	4a7e      	ldr	r2, [pc, #504]	@ (1004e968 <HAL_USART_IRQHandler+0x2f4>)
1004e770:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
1004e772:	d009      	beq.n	1004e788 <HAL_USART_IRQHandler+0x114>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_OREF);
1004e774:	687b      	ldr	r3, [r7, #4]
1004e776:	681b      	ldr	r3, [r3, #0]
1004e778:	2208      	movs	r2, #8
1004e77a:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_ORE;
1004e77c:	687b      	ldr	r3, [r7, #4]
1004e77e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e780:	2208      	movs	r2, #8
1004e782:	431a      	orrs	r2, r3
1004e784:	687b      	ldr	r3, [r7, #4]
1004e786:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
1004e788:	69fa      	ldr	r2, [r7, #28]
1004e78a:	2380      	movs	r3, #128	@ 0x80
1004e78c:	011b      	lsls	r3, r3, #4
1004e78e:	4013      	ands	r3, r2
1004e790:	d00f      	beq.n	1004e7b2 <HAL_USART_IRQHandler+0x13e>
1004e792:	69ba      	ldr	r2, [r7, #24]
1004e794:	2380      	movs	r3, #128	@ 0x80
1004e796:	04db      	lsls	r3, r3, #19
1004e798:	4013      	ands	r3, r2
1004e79a:	d00a      	beq.n	1004e7b2 <HAL_USART_IRQHandler+0x13e>
    {
      __HAL_USART_CLEAR_IT(husart, USART_CLEAR_RTOF);
1004e79c:	687b      	ldr	r3, [r7, #4]
1004e79e:	681b      	ldr	r3, [r3, #0]
1004e7a0:	2280      	movs	r2, #128	@ 0x80
1004e7a2:	0112      	lsls	r2, r2, #4
1004e7a4:	621a      	str	r2, [r3, #32]

      husart->ErrorCode |= HAL_USART_ERROR_RTO;
1004e7a6:	687b      	ldr	r3, [r7, #4]
1004e7a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e7aa:	2280      	movs	r2, #128	@ 0x80
1004e7ac:	431a      	orrs	r2, r3
1004e7ae:	687b      	ldr	r3, [r7, #4]
1004e7b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* USART SPI slave underrun error interrupt occurred -------------------------*/
    if (((isrflags & USART_ISR_UDR) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
1004e7b2:	69fa      	ldr	r2, [r7, #28]
1004e7b4:	2380      	movs	r3, #128	@ 0x80
1004e7b6:	019b      	lsls	r3, r3, #6
1004e7b8:	4013      	ands	r3, r2
1004e7ba:	d01a      	beq.n	1004e7f2 <HAL_USART_IRQHandler+0x17e>
1004e7bc:	697b      	ldr	r3, [r7, #20]
1004e7be:	2201      	movs	r2, #1
1004e7c0:	4013      	ands	r3, r2
1004e7c2:	d016      	beq.n	1004e7f2 <HAL_USART_IRQHandler+0x17e>
    {
      /* Ignore SPI slave underrun errors when reception is going on */
      if (husart->State == HAL_USART_STATE_BUSY_RX)
1004e7c4:	687b      	ldr	r3, [r7, #4]
1004e7c6:	2259      	movs	r2, #89	@ 0x59
1004e7c8:	5c9b      	ldrb	r3, [r3, r2]
1004e7ca:	b2db      	uxtb	r3, r3
1004e7cc:	2b22      	cmp	r3, #34	@ 0x22
1004e7ce:	d105      	bne.n	1004e7dc <HAL_USART_IRQHandler+0x168>
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004e7d0:	687b      	ldr	r3, [r7, #4]
1004e7d2:	681b      	ldr	r3, [r3, #0]
1004e7d4:	2280      	movs	r2, #128	@ 0x80
1004e7d6:	0192      	lsls	r2, r2, #6
1004e7d8:	621a      	str	r2, [r3, #32]
        return;
1004e7da:	e0ca      	b.n	1004e972 <HAL_USART_IRQHandler+0x2fe>
      }
      else
      {
        __HAL_USART_CLEAR_UDRFLAG(husart);
1004e7dc:	687b      	ldr	r3, [r7, #4]
1004e7de:	681b      	ldr	r3, [r3, #0]
1004e7e0:	2280      	movs	r2, #128	@ 0x80
1004e7e2:	0192      	lsls	r2, r2, #6
1004e7e4:	621a      	str	r2, [r3, #32]
        husart->ErrorCode |= HAL_USART_ERROR_UDR;
1004e7e6:	687b      	ldr	r3, [r7, #4]
1004e7e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e7ea:	2220      	movs	r2, #32
1004e7ec:	431a      	orrs	r2, r3
1004e7ee:	687b      	ldr	r3, [r7, #4]
1004e7f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Call USART Error Call back function if need be --------------------------*/
    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
1004e7f2:	687b      	ldr	r3, [r7, #4]
1004e7f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e7f6:	2b00      	cmp	r3, #0
1004e7f8:	d100      	bne.n	1004e7fc <HAL_USART_IRQHandler+0x188>
1004e7fa:	e0b1      	b.n	1004e960 <HAL_USART_IRQHandler+0x2ec>
    {
      /* USART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
1004e7fc:	69fb      	ldr	r3, [r7, #28]
1004e7fe:	2220      	movs	r2, #32
1004e800:	4013      	ands	r3, r2
1004e802:	d011      	beq.n	1004e828 <HAL_USART_IRQHandler+0x1b4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
1004e804:	69bb      	ldr	r3, [r7, #24]
1004e806:	2220      	movs	r2, #32
1004e808:	4013      	ands	r3, r2
1004e80a:	d104      	bne.n	1004e816 <HAL_USART_IRQHandler+0x1a2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
1004e80c:	697a      	ldr	r2, [r7, #20]
1004e80e:	2380      	movs	r3, #128	@ 0x80
1004e810:	055b      	lsls	r3, r3, #21
1004e812:	4013      	ands	r3, r2
1004e814:	d008      	beq.n	1004e828 <HAL_USART_IRQHandler+0x1b4>
      {
        if (husart->RxISR != NULL)
1004e816:	687b      	ldr	r3, [r7, #4]
1004e818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e81a:	2b00      	cmp	r3, #0
1004e81c:	d004      	beq.n	1004e828 <HAL_USART_IRQHandler+0x1b4>
        {
          husart->RxISR(husart);
1004e81e:	687b      	ldr	r3, [r7, #4]
1004e820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
1004e822:	687a      	ldr	r2, [r7, #4]
1004e824:	0010      	movs	r0, r2
1004e826:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = husart->ErrorCode & HAL_USART_ERROR_ORE;
1004e828:	687b      	ldr	r3, [r7, #4]
1004e82a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004e82c:	2208      	movs	r2, #8
1004e82e:	4013      	ands	r3, r2
1004e830:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR)) ||
1004e832:	687b      	ldr	r3, [r7, #4]
1004e834:	681b      	ldr	r3, [r3, #0]
1004e836:	689b      	ldr	r3, [r3, #8]
1004e838:	2240      	movs	r2, #64	@ 0x40
1004e83a:	4013      	ands	r3, r2
1004e83c:	2b40      	cmp	r3, #64	@ 0x40
1004e83e:	d002      	beq.n	1004e846 <HAL_USART_IRQHandler+0x1d2>
1004e840:	68fb      	ldr	r3, [r7, #12]
1004e842:	2b00      	cmp	r3, #0
1004e844:	d040      	beq.n	1004e8c8 <HAL_USART_IRQHandler+0x254>
          (errorcode != 0U))
      {
        /* Blocking error : transfer is aborted
           Set the USART state ready to be able to start again the process,
           Disable Interrupts, and disable DMA requests, if ongoing */
        USART_EndTransfer(husart);
1004e846:	687b      	ldr	r3, [r7, #4]
1004e848:	0018      	movs	r0, r3
1004e84a:	f000 f8ad 	bl	1004e9a8 <USART_EndTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the USART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e84e:	687b      	ldr	r3, [r7, #4]
1004e850:	681b      	ldr	r3, [r3, #0]
1004e852:	689b      	ldr	r3, [r3, #8]
1004e854:	2240      	movs	r2, #64	@ 0x40
1004e856:	4013      	ands	r3, r2
1004e858:	2b40      	cmp	r3, #64	@ 0x40
1004e85a:	d130      	bne.n	1004e8be <HAL_USART_IRQHandler+0x24a>
        {
          /* Disable the USART DMA Rx request if enabled */
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR | USART_CR3_DMAR);
1004e85c:	687b      	ldr	r3, [r7, #4]
1004e85e:	681b      	ldr	r3, [r3, #0]
1004e860:	689a      	ldr	r2, [r3, #8]
1004e862:	687b      	ldr	r3, [r7, #4]
1004e864:	681b      	ldr	r3, [r3, #0]
1004e866:	2140      	movs	r1, #64	@ 0x40
1004e868:	438a      	bics	r2, r1
1004e86a:	609a      	str	r2, [r3, #8]

          /* Abort the USART DMA Tx channel */
          if (husart->hdmatx != NULL)
1004e86c:	687b      	ldr	r3, [r7, #4]
1004e86e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004e870:	2b00      	cmp	r3, #0
1004e872:	d008      	beq.n	1004e886 <HAL_USART_IRQHandler+0x212>
          {
            /* Set the USART Tx DMA Abort callback to NULL : no callback
               executed at end of DMA abort procedure */
            husart->hdmatx->XferAbortCallback = NULL;
1004e874:	687b      	ldr	r3, [r7, #4]
1004e876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004e878:	2200      	movs	r2, #0
1004e87a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA TX */
            (void)HAL_DMA_Abort_IT(husart->hdmatx);
1004e87c:	687b      	ldr	r3, [r7, #4]
1004e87e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004e880:	0018      	movs	r0, r3
1004e882:	f7f8 fd70 	bl	10047366 <HAL_DMA_Abort_IT>
          }

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
1004e886:	687b      	ldr	r3, [r7, #4]
1004e888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e88a:	2b00      	cmp	r3, #0
1004e88c:	d012      	beq.n	1004e8b4 <HAL_USART_IRQHandler+0x240>
          {
            /* Set the USART Rx DMA Abort callback :
               will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
1004e88e:	687b      	ldr	r3, [r7, #4]
1004e890:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e892:	4a36      	ldr	r2, [pc, #216]	@ (1004e96c <HAL_USART_IRQHandler+0x2f8>)
1004e894:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
1004e896:	687b      	ldr	r3, [r7, #4]
1004e898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e89a:	0018      	movs	r0, r3
1004e89c:	f7f8 fd63 	bl	10047366 <HAL_DMA_Abort_IT>
1004e8a0:	1e03      	subs	r3, r0, #0
1004e8a2:	d019      	beq.n	1004e8d8 <HAL_USART_IRQHandler+0x264>
            {
              /* Call Directly husart->hdmarx->XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
1004e8a4:	687b      	ldr	r3, [r7, #4]
1004e8a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e8a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1004e8aa:	687b      	ldr	r3, [r7, #4]
1004e8ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
1004e8ae:	0018      	movs	r0, r3
1004e8b0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e8b2:	e011      	b.n	1004e8d8 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
1004e8b4:	687b      	ldr	r3, [r7, #4]
1004e8b6:	0018      	movs	r0, r3
1004e8b8:	f000 f86e 	bl	1004e998 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e8bc:	e00c      	b.n	1004e8d8 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
1004e8be:	687b      	ldr	r3, [r7, #4]
1004e8c0:	0018      	movs	r0, r3
1004e8c2:	f000 f869 	bl	1004e998 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e8c6:	e007      	b.n	1004e8d8 <HAL_USART_IRQHandler+0x264>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
1004e8c8:	687b      	ldr	r3, [r7, #4]
1004e8ca:	0018      	movs	r0, r3
1004e8cc:	f000 f864 	bl	1004e998 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
1004e8d0:	687b      	ldr	r3, [r7, #4]
1004e8d2:	2200      	movs	r2, #0
1004e8d4:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }
    return;
1004e8d6:	e043      	b.n	1004e960 <HAL_USART_IRQHandler+0x2ec>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
1004e8d8:	46c0      	nop			@ (mov r8, r8)
    return;
1004e8da:	e041      	b.n	1004e960 <HAL_USART_IRQHandler+0x2ec>

  } /* End if some error occurs */


  /* USART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
1004e8dc:	69fb      	ldr	r3, [r7, #28]
1004e8de:	2280      	movs	r2, #128	@ 0x80
1004e8e0:	4013      	ands	r3, r2
1004e8e2:	d012      	beq.n	1004e90a <HAL_USART_IRQHandler+0x296>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
1004e8e4:	69bb      	ldr	r3, [r7, #24]
1004e8e6:	2280      	movs	r2, #128	@ 0x80
1004e8e8:	4013      	ands	r3, r2
1004e8ea:	d104      	bne.n	1004e8f6 <HAL_USART_IRQHandler+0x282>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
1004e8ec:	697a      	ldr	r2, [r7, #20]
1004e8ee:	2380      	movs	r3, #128	@ 0x80
1004e8f0:	041b      	lsls	r3, r3, #16
1004e8f2:	4013      	ands	r3, r2
1004e8f4:	d009      	beq.n	1004e90a <HAL_USART_IRQHandler+0x296>
  {
    if (husart->TxISR != NULL)
1004e8f6:	687b      	ldr	r3, [r7, #4]
1004e8f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004e8fa:	2b00      	cmp	r3, #0
1004e8fc:	d038      	beq.n	1004e970 <HAL_USART_IRQHandler+0x2fc>
    {
      husart->TxISR(husart);
1004e8fe:	687b      	ldr	r3, [r7, #4]
1004e900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
1004e902:	687a      	ldr	r2, [r7, #4]
1004e904:	0010      	movs	r0, r2
1004e906:	4798      	blx	r3
    }
    return;
1004e908:	e032      	b.n	1004e970 <HAL_USART_IRQHandler+0x2fc>
  }

  /* USART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
1004e90a:	69fb      	ldr	r3, [r7, #28]
1004e90c:	2240      	movs	r2, #64	@ 0x40
1004e90e:	4013      	ands	r3, r2
1004e910:	d008      	beq.n	1004e924 <HAL_USART_IRQHandler+0x2b0>
1004e912:	69bb      	ldr	r3, [r7, #24]
1004e914:	2240      	movs	r2, #64	@ 0x40
1004e916:	4013      	ands	r3, r2
1004e918:	d004      	beq.n	1004e924 <HAL_USART_IRQHandler+0x2b0>
  {
    USART_EndTransmit_IT(husart);
1004e91a:	687b      	ldr	r3, [r7, #4]
1004e91c:	0018      	movs	r0, r3
1004e91e:	f000 f878 	bl	1004ea12 <USART_EndTransmit_IT>
    return;
1004e922:	e026      	b.n	1004e972 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
1004e924:	69fa      	ldr	r2, [r7, #28]
1004e926:	2380      	movs	r3, #128	@ 0x80
1004e928:	041b      	lsls	r3, r3, #16
1004e92a:	4013      	ands	r3, r2
1004e92c:	d009      	beq.n	1004e942 <HAL_USART_IRQHandler+0x2ce>
1004e92e:	69ba      	ldr	r2, [r7, #24]
1004e930:	2380      	movs	r3, #128	@ 0x80
1004e932:	05db      	lsls	r3, r3, #23
1004e934:	4013      	ands	r3, r2
1004e936:	d004      	beq.n	1004e942 <HAL_USART_IRQHandler+0x2ce>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    husart->TxFifoEmptyCallback(husart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_USARTEx_TxFifoEmptyCallback(husart);
1004e938:	687b      	ldr	r3, [r7, #4]
1004e93a:	0018      	movs	r0, r3
1004e93c:	f000 f8b4 	bl	1004eaa8 <HAL_USARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004e940:	e017      	b.n	1004e972 <HAL_USART_IRQHandler+0x2fe>
  }

  /* USART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
1004e942:	69fa      	ldr	r2, [r7, #28]
1004e944:	2380      	movs	r3, #128	@ 0x80
1004e946:	045b      	lsls	r3, r3, #17
1004e948:	4013      	ands	r3, r2
1004e94a:	d012      	beq.n	1004e972 <HAL_USART_IRQHandler+0x2fe>
1004e94c:	69bb      	ldr	r3, [r7, #24]
1004e94e:	2b00      	cmp	r3, #0
1004e950:	da0f      	bge.n	1004e972 <HAL_USART_IRQHandler+0x2fe>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    husart->RxFifoFullCallback(husart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_USARTEx_RxFifoFullCallback(husart);
1004e952:	687b      	ldr	r3, [r7, #4]
1004e954:	0018      	movs	r0, r3
1004e956:	f000 f89f 	bl	1004ea98 <HAL_USARTEx_RxFifoFullCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
    return;
1004e95a:	e00a      	b.n	1004e972 <HAL_USART_IRQHandler+0x2fe>
      return;
1004e95c:	46c0      	nop			@ (mov r8, r8)
1004e95e:	e008      	b.n	1004e972 <HAL_USART_IRQHandler+0x2fe>
    return;
1004e960:	46c0      	nop			@ (mov r8, r8)
1004e962:	e006      	b.n	1004e972 <HAL_USART_IRQHandler+0x2fe>
1004e964:	0000280f 	.word	0x0000280f
1004e968:	10000001 	.word	0x10000001
1004e96c:	1004e9e9 	.word	0x1004e9e9
    return;
1004e970:	46c0      	nop			@ (mov r8, r8)
  }
}
1004e972:	46bd      	mov	sp, r7
1004e974:	b008      	add	sp, #32
1004e976:	bd80      	pop	{r7, pc}

1004e978 <HAL_USART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
1004e978:	b580      	push	{r7, lr}
1004e97a:	b082      	sub	sp, #8
1004e97c:	af00      	add	r7, sp, #0
1004e97e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxCpltCallback can be implemented in the user file.
   */
}
1004e980:	46c0      	nop			@ (mov r8, r8)
1004e982:	46bd      	mov	sp, r7
1004e984:	b002      	add	sp, #8
1004e986:	bd80      	pop	{r7, pc}

1004e988 <HAL_USART_TxRxCpltCallback>:
  * @brief Tx/Rx Transfers completed callback for the non-blocking process.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
1004e988:	b580      	push	{r7, lr}
1004e98a:	b082      	sub	sp, #8
1004e98c:	af00      	add	r7, sp, #0
1004e98e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_TxRxCpltCallback can be implemented in the user file
   */
}
1004e990:	46c0      	nop			@ (mov r8, r8)
1004e992:	46bd      	mov	sp, r7
1004e994:	b002      	add	sp, #8
1004e996:	bd80      	pop	{r7, pc}

1004e998 <HAL_USART_ErrorCallback>:
  * @brief USART error callback.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
1004e998:	b580      	push	{r7, lr}
1004e99a:	b082      	sub	sp, #8
1004e99c:	af00      	add	r7, sp, #0
1004e99e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_ErrorCallback can be implemented in the user file.
   */
}
1004e9a0:	46c0      	nop			@ (mov r8, r8)
1004e9a2:	46bd      	mov	sp, r7
1004e9a4:	b002      	add	sp, #8
1004e9a6:	bd80      	pop	{r7, pc}

1004e9a8 <USART_EndTransfer>:
  * @brief  End ongoing transfer on USART peripheral (following error detection or Transfer completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndTransfer(USART_HandleTypeDef *husart)
{
1004e9a8:	b580      	push	{r7, lr}
1004e9aa:	b082      	sub	sp, #8
1004e9ac:	af00      	add	r7, sp, #0
1004e9ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, RXFT, TXFT, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE |
1004e9b0:	687b      	ldr	r3, [r7, #4]
1004e9b2:	681b      	ldr	r3, [r3, #0]
1004e9b4:	681a      	ldr	r2, [r3, #0]
1004e9b6:	687b      	ldr	r3, [r7, #4]
1004e9b8:	681b      	ldr	r3, [r3, #0]
1004e9ba:	4909      	ldr	r1, [pc, #36]	@ (1004e9e0 <USART_EndTransfer+0x38>)
1004e9bc:	400a      	ands	r2, r1
1004e9be:	601a      	str	r2, [r3, #0]
                                    USART_CR1_TCIE));
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
1004e9c0:	687b      	ldr	r3, [r7, #4]
1004e9c2:	681b      	ldr	r3, [r3, #0]
1004e9c4:	689a      	ldr	r2, [r3, #8]
1004e9c6:	687b      	ldr	r3, [r7, #4]
1004e9c8:	681b      	ldr	r3, [r3, #0]
1004e9ca:	4906      	ldr	r1, [pc, #24]	@ (1004e9e4 <USART_EndTransfer+0x3c>)
1004e9cc:	400a      	ands	r2, r1
1004e9ce:	609a      	str	r2, [r3, #8]

  /* At end of process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
1004e9d0:	687b      	ldr	r3, [r7, #4]
1004e9d2:	2259      	movs	r2, #89	@ 0x59
1004e9d4:	2101      	movs	r1, #1
1004e9d6:	5499      	strb	r1, [r3, r2]
}
1004e9d8:	46c0      	nop			@ (mov r8, r8)
1004e9da:	46bd      	mov	sp, r7
1004e9dc:	b002      	add	sp, #8
1004e9de:	bd80      	pop	{r7, pc}
1004e9e0:	fffffe1f 	.word	0xfffffe1f
1004e9e4:	ef7ffffe 	.word	0xef7ffffe

1004e9e8 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
1004e9e8:	b580      	push	{r7, lr}
1004e9ea:	b084      	sub	sp, #16
1004e9ec:	af00      	add	r7, sp, #0
1004e9ee:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)(hdma->Parent);
1004e9f0:	687b      	ldr	r3, [r7, #4]
1004e9f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
1004e9f4:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0U;
1004e9f6:	68fb      	ldr	r3, [r7, #12]
1004e9f8:	2200      	movs	r2, #0
1004e9fa:	86da      	strh	r2, [r3, #54]	@ 0x36
  husart->TxXferCount = 0U;
1004e9fc:	68fb      	ldr	r3, [r7, #12]
1004e9fe:	2200      	movs	r2, #0
1004ea00:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
1004ea02:	68fb      	ldr	r3, [r7, #12]
1004ea04:	0018      	movs	r0, r3
1004ea06:	f7ff ffc7 	bl	1004e998 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
1004ea0a:	46c0      	nop			@ (mov r8, r8)
1004ea0c:	46bd      	mov	sp, r7
1004ea0e:	b004      	add	sp, #16
1004ea10:	bd80      	pop	{r7, pc}

1004ea12 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
1004ea12:	b580      	push	{r7, lr}
1004ea14:	b082      	sub	sp, #8
1004ea16:	af00      	add	r7, sp, #0
1004ea18:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  __HAL_USART_DISABLE_IT(husart, USART_IT_TC);
1004ea1a:	687b      	ldr	r3, [r7, #4]
1004ea1c:	681b      	ldr	r3, [r3, #0]
1004ea1e:	681a      	ldr	r2, [r3, #0]
1004ea20:	687b      	ldr	r3, [r7, #4]
1004ea22:	681b      	ldr	r3, [r3, #0]
1004ea24:	2140      	movs	r1, #64	@ 0x40
1004ea26:	438a      	bics	r2, r1
1004ea28:	601a      	str	r2, [r3, #0]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_USART_DISABLE_IT(husart, USART_IT_ERR);
1004ea2a:	687b      	ldr	r3, [r7, #4]
1004ea2c:	681b      	ldr	r3, [r3, #0]
1004ea2e:	689a      	ldr	r2, [r3, #8]
1004ea30:	687b      	ldr	r3, [r7, #4]
1004ea32:	681b      	ldr	r3, [r3, #0]
1004ea34:	2101      	movs	r1, #1
1004ea36:	438a      	bics	r2, r1
1004ea38:	609a      	str	r2, [r3, #8]

  /* Clear TxISR function pointer */
  husart->TxISR = NULL;
1004ea3a:	687b      	ldr	r3, [r7, #4]
1004ea3c:	2200      	movs	r2, #0
1004ea3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  if (husart->State == HAL_USART_STATE_BUSY_TX)
1004ea40:	687b      	ldr	r3, [r7, #4]
1004ea42:	2259      	movs	r2, #89	@ 0x59
1004ea44:	5c9b      	ldrb	r3, [r3, r2]
1004ea46:	b2db      	uxtb	r3, r3
1004ea48:	2b12      	cmp	r3, #18
1004ea4a:	d114      	bne.n	1004ea76 <USART_EndTransmit_IT+0x64>
  {
    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
1004ea4c:	687b      	ldr	r3, [r7, #4]
1004ea4e:	681b      	ldr	r3, [r3, #0]
1004ea50:	2208      	movs	r2, #8
1004ea52:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
1004ea54:	687b      	ldr	r3, [r7, #4]
1004ea56:	681b      	ldr	r3, [r3, #0]
1004ea58:	699a      	ldr	r2, [r3, #24]
1004ea5a:	687b      	ldr	r3, [r7, #4]
1004ea5c:	681b      	ldr	r3, [r3, #0]
1004ea5e:	2108      	movs	r1, #8
1004ea60:	430a      	orrs	r2, r1
1004ea62:	619a      	str	r2, [r3, #24]

    /* Tx process is completed, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
1004ea64:	687b      	ldr	r3, [r7, #4]
1004ea66:	2259      	movs	r2, #89	@ 0x59
1004ea68:	2101      	movs	r1, #1
1004ea6a:	5499      	strb	r1, [r3, r2]
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Complete Callback */
    husart->TxCpltCallback(husart);
#else
    /* Call legacy weak Tx Complete Callback */
    HAL_USART_TxCpltCallback(husart);
1004ea6c:	687b      	ldr	r3, [r7, #4]
1004ea6e:	0018      	movs	r0, r3
1004ea70:	f7ff ff82 	bl	1004e978 <HAL_USART_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
1004ea74:	e00c      	b.n	1004ea90 <USART_EndTransmit_IT+0x7e>
  else if (husart->RxXferCount == 0U)
1004ea76:	687b      	ldr	r3, [r7, #4]
1004ea78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
1004ea7a:	b29b      	uxth	r3, r3
1004ea7c:	2b00      	cmp	r3, #0
1004ea7e:	d107      	bne.n	1004ea90 <USART_EndTransmit_IT+0x7e>
    husart->State = HAL_USART_STATE_READY;
1004ea80:	687b      	ldr	r3, [r7, #4]
1004ea82:	2259      	movs	r2, #89	@ 0x59
1004ea84:	2101      	movs	r1, #1
1004ea86:	5499      	strb	r1, [r3, r2]
    HAL_USART_TxRxCpltCallback(husart);
1004ea88:	687b      	ldr	r3, [r7, #4]
1004ea8a:	0018      	movs	r0, r3
1004ea8c:	f7ff ff7c 	bl	1004e988 <HAL_USART_TxRxCpltCallback>
}
1004ea90:	46c0      	nop			@ (mov r8, r8)
1004ea92:	46bd      	mov	sp, r7
1004ea94:	b002      	add	sp, #8
1004ea96:	bd80      	pop	{r7, pc}

1004ea98 <HAL_USARTEx_RxFifoFullCallback>:
  * @brief  USART RX Fifo full callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_RxFifoFullCallback(USART_HandleTypeDef *husart)
{
1004ea98:	b580      	push	{r7, lr}
1004ea9a:	b082      	sub	sp, #8
1004ea9c:	af00      	add	r7, sp, #0
1004ea9e:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
1004eaa0:	46c0      	nop			@ (mov r8, r8)
1004eaa2:	46bd      	mov	sp, r7
1004eaa4:	b002      	add	sp, #8
1004eaa6:	bd80      	pop	{r7, pc}

1004eaa8 <HAL_USARTEx_TxFifoEmptyCallback>:
  * @brief  USART TX Fifo empty callback.
  * @param  husart USART handle.
  * @retval None
  */
__weak void HAL_USARTEx_TxFifoEmptyCallback(USART_HandleTypeDef *husart)
{
1004eaa8:	b580      	push	{r7, lr}
1004eaaa:	b082      	sub	sp, #8
1004eaac:	af00      	add	r7, sp, #0
1004eaae:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
1004eab0:	46c0      	nop			@ (mov r8, r8)
1004eab2:	46bd      	mov	sp, r7
1004eab4:	b002      	add	sp, #8
1004eab6:	bd80      	pop	{r7, pc}

1004eab8 <BLEEVT_RegisterGattEvtHandler>:

  return;
}

int BLEEVT_RegisterGattEvtHandler(BLEEVT_GattEvtHandlerFunc_t EvtHandlerFunc)
{
1004eab8:	b580      	push	{r7, lr}
1004eaba:	b082      	sub	sp, #8
1004eabc:	af00      	add	r7, sp, #0
1004eabe:	6078      	str	r0, [r7, #4]
  if(BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers == BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS)
1004eac0:	4b0c      	ldr	r3, [pc, #48]	@ (1004eaf4 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004eac2:	791b      	ldrb	r3, [r3, #4]
1004eac4:	2b01      	cmp	r3, #1
1004eac6:	d102      	bne.n	1004eace <BLEEVT_RegisterGattEvtHandler+0x16>
  {
    return -1;
1004eac8:	2301      	movs	r3, #1
1004eaca:	425b      	negs	r3, r3
1004eacc:	e00d      	b.n	1004eaea <BLEEVT_RegisterGattEvtHandler+0x32>
  }
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
  BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers] = EvtHandlerFunc;
1004eace:	4b09      	ldr	r3, [pc, #36]	@ (1004eaf4 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004ead0:	791b      	ldrb	r3, [r3, #4]
1004ead2:	001a      	movs	r2, r3
1004ead4:	4b07      	ldr	r3, [pc, #28]	@ (1004eaf4 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004ead6:	0092      	lsls	r2, r2, #2
1004ead8:	6879      	ldr	r1, [r7, #4]
1004eada:	50d1      	str	r1, [r2, r3]
  BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers++;
1004eadc:	4b05      	ldr	r3, [pc, #20]	@ (1004eaf4 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004eade:	791b      	ldrb	r3, [r3, #4]
1004eae0:	3301      	adds	r3, #1
1004eae2:	b2da      	uxtb	r2, r3
1004eae4:	4b03      	ldr	r3, [pc, #12]	@ (1004eaf4 <BLEEVT_RegisterGattEvtHandler+0x3c>)
1004eae6:	711a      	strb	r2, [r3, #4]
#else
  (void)(EvtHandlerFunc);
#endif

  return 0;
1004eae8:	2300      	movs	r3, #0
}
1004eaea:	0018      	movs	r0, r3
1004eaec:	46bd      	mov	sp, r7
1004eaee:	b002      	add	sp, #8
1004eaf0:	bd80      	pop	{r7, pc}
1004eaf2:	46c0      	nop			@ (mov r8, r8)
1004eaf4:	20002908 	.word	0x20002908

1004eaf8 <BLE_STACK_Event>:

  return 0;
}

void BLE_STACK_Event(hci_pckt *hci_pckt, uint16_t length)
{
1004eaf8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004eafa:	b089      	sub	sp, #36	@ 0x24
1004eafc:	af00      	add	r7, sp, #0
1004eafe:	6078      	str	r0, [r7, #4]
1004eb00:	000a      	movs	r2, r1
1004eb02:	1cbb      	adds	r3, r7, #2
1004eb04:	801a      	strh	r2, [r3, #0]
  BLEEVT_EvtAckStatus_t event_notification_status = BLEEVT_NoAck;
1004eb06:	231f      	movs	r3, #31
1004eb08:	18fb      	adds	r3, r7, r3
1004eb0a:	2200      	movs	r2, #0
1004eb0c:	701a      	strb	r2, [r3, #0]
  
  if(hci_pckt->type == HCI_EVENT_PKT_TYPE || hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE)
1004eb0e:	687b      	ldr	r3, [r7, #4]
1004eb10:	781b      	ldrb	r3, [r3, #0]
1004eb12:	2b04      	cmp	r3, #4
1004eb14:	d003      	beq.n	1004eb1e <BLE_STACK_Event+0x26>
1004eb16:	687b      	ldr	r3, [r7, #4]
1004eb18:	781b      	ldrb	r3, [r3, #0]
1004eb1a:	2b82      	cmp	r3, #130	@ 0x82
1004eb1c:	d148      	bne.n	1004ebb0 <BLE_STACK_Event+0xb8>
  {
    void *data;
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
1004eb1e:	687b      	ldr	r3, [r7, #4]
1004eb20:	3301      	adds	r3, #1
1004eb22:	613b      	str	r3, [r7, #16]
    
    if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
1004eb24:	687b      	ldr	r3, [r7, #4]
1004eb26:	781b      	ldrb	r3, [r3, #0]
1004eb28:	2b04      	cmp	r3, #4
1004eb2a:	d103      	bne.n	1004eb34 <BLE_STACK_Event+0x3c>
      data = event_pckt->data;
1004eb2c:	693b      	ldr	r3, [r7, #16]
1004eb2e:	3302      	adds	r3, #2
1004eb30:	61bb      	str	r3, [r7, #24]
1004eb32:	e005      	b.n	1004eb40 <BLE_STACK_Event+0x48>
    }
    else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
      hci_event_ext_pckt *event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
1004eb34:	687b      	ldr	r3, [r7, #4]
1004eb36:	3301      	adds	r3, #1
1004eb38:	60fb      	str	r3, [r7, #12]
      data = event_pckt->data;
1004eb3a:	68fb      	ldr	r3, [r7, #12]
1004eb3c:	3303      	adds	r3, #3
1004eb3e:	61bb      	str	r3, [r7, #24]
    }
    
    if(event_pckt->evt == HCI_VENDOR_EVT_CODE) /* evt fields is at same offset in hci_event_pckt and hci_event_ext_pckt */
1004eb40:	693b      	ldr	r3, [r7, #16]
1004eb42:	781b      	ldrb	r3, [r3, #0]
1004eb44:	2bff      	cmp	r3, #255	@ 0xff
1004eb46:	d133      	bne.n	1004ebb0 <BLE_STACK_Event+0xb8>
    {
      aci_blecore_event * blecore_evt = (aci_blecore_event*) data;
1004eb48:	69bb      	ldr	r3, [r7, #24]
1004eb4a:	60bb      	str	r3, [r7, #8]
      
      if((blecore_evt->ecode & BLEEVT_EGID_EVT_MASK) == BLEEVT_GATT_EVT_TYPE)
1004eb4c:	68bb      	ldr	r3, [r7, #8]
1004eb4e:	781a      	ldrb	r2, [r3, #0]
1004eb50:	785b      	ldrb	r3, [r3, #1]
1004eb52:	021b      	lsls	r3, r3, #8
1004eb54:	4313      	orrs	r3, r2
1004eb56:	b29b      	uxth	r3, r3
1004eb58:	001a      	movs	r2, r3
1004eb5a:	23fc      	movs	r3, #252	@ 0xfc
1004eb5c:	021b      	lsls	r3, r3, #8
1004eb5e:	401a      	ands	r2, r3
1004eb60:	23c0      	movs	r3, #192	@ 0xc0
1004eb62:	011b      	lsls	r3, r3, #4
1004eb64:	429a      	cmp	r2, r3
1004eb66:	d123      	bne.n	1004ebb0 <BLE_STACK_Event+0xb8>
      {
        /* GATT events */
        
#if (BLE_CFG_MAX_NBR_GATT_EVT_HANDLERS > 0)
        /* For GATT event handler */
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004eb68:	2317      	movs	r3, #23
1004eb6a:	18fb      	adds	r3, r7, r3
1004eb6c:	2200      	movs	r2, #0
1004eb6e:	701a      	strb	r2, [r3, #0]
1004eb70:	e015      	b.n	1004eb9e <BLE_STACK_Event+0xa6>
        {
          event_notification_status = BLEEVT_GattEvtHandler.BLEEVT_SvcHandlerTab[index](blecore_evt);
1004eb72:	2517      	movs	r5, #23
1004eb74:	197b      	adds	r3, r7, r5
1004eb76:	781a      	ldrb	r2, [r3, #0]
1004eb78:	4b14      	ldr	r3, [pc, #80]	@ (1004ebcc <BLE_STACK_Event+0xd4>)
1004eb7a:	0092      	lsls	r2, r2, #2
1004eb7c:	58d3      	ldr	r3, [r2, r3]
1004eb7e:	261f      	movs	r6, #31
1004eb80:	19bc      	adds	r4, r7, r6
1004eb82:	68ba      	ldr	r2, [r7, #8]
1004eb84:	0010      	movs	r0, r2
1004eb86:	4798      	blx	r3
1004eb88:	0003      	movs	r3, r0
1004eb8a:	7023      	strb	r3, [r4, #0]
          /**
          * When a GATT event has been acknowledged by application, do not call other registered handler.
          * a GATT event may be relevant for only one Service
          */
          if (event_notification_status == BLEEVT_Ack)
1004eb8c:	19bb      	adds	r3, r7, r6
1004eb8e:	781b      	ldrb	r3, [r3, #0]
1004eb90:	2b01      	cmp	r3, #1
1004eb92:	d00c      	beq.n	1004ebae <BLE_STACK_Event+0xb6>
        for (uint8_t index = 0; index < BLEEVT_GattEvtHandler.NbrOfRegisteredHandlers; index++)
1004eb94:	197b      	adds	r3, r7, r5
1004eb96:	781a      	ldrb	r2, [r3, #0]
1004eb98:	197b      	adds	r3, r7, r5
1004eb9a:	3201      	adds	r2, #1
1004eb9c:	701a      	strb	r2, [r3, #0]
1004eb9e:	4b0b      	ldr	r3, [pc, #44]	@ (1004ebcc <BLE_STACK_Event+0xd4>)
1004eba0:	791b      	ldrb	r3, [r3, #4]
1004eba2:	2217      	movs	r2, #23
1004eba4:	18ba      	adds	r2, r7, r2
1004eba6:	7812      	ldrb	r2, [r2, #0]
1004eba8:	429a      	cmp	r2, r3
1004ebaa:	d3e2      	bcc.n	1004eb72 <BLE_STACK_Event+0x7a>
1004ebac:	e000      	b.n	1004ebb0 <BLE_STACK_Event+0xb8>
          {
            /**
            *  The event has been managed. The Event processing should be stopped
            */
            break;
1004ebae:	46c0      	nop			@ (mov r8, r8)
  
  /**
   * When no registered handlers has acknowledged the event, it is reported to the application.
   */
  
  if(event_notification_status == BLEEVT_NoAck)
1004ebb0:	231f      	movs	r3, #31
1004ebb2:	18fb      	adds	r3, r7, r3
1004ebb4:	781b      	ldrb	r3, [r3, #0]
1004ebb6:	2b00      	cmp	r3, #0
1004ebb8:	d103      	bne.n	1004ebc2 <BLE_STACK_Event+0xca>
  {
    BLEEVT_App_Notification(hci_pckt);
1004ebba:	687b      	ldr	r3, [r7, #4]
1004ebbc:	0018      	movs	r0, r3
1004ebbe:	f003 f81d 	bl	10051bfc <BLEEVT_App_Notification>
  }
}
1004ebc2:	46c0      	nop			@ (mov r8, r8)
1004ebc4:	46bd      	mov	sp, r7
1004ebc6:	b009      	add	sp, #36	@ 0x24
1004ebc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1004ebca:	46c0      	nop			@ (mov r8, r8)
1004ebcc:	20002908 	.word	0x20002908

1004ebd0 <GAP_name_disc_proc_connected_check_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_name_disc_proc_connected_check_ucfg(uint16_t task_idx)
{
1004ebd0:	b580      	push	{r7, lr}
1004ebd2:	b082      	sub	sp, #8
1004ebd4:	af00      	add	r7, sp, #0
1004ebd6:	0002      	movs	r2, r0
1004ebd8:	1dbb      	adds	r3, r7, #6
1004ebda:	801a      	strh	r2, [r3, #0]
    GAP_name_disc_proc_connected_check(task_idx);
1004ebdc:	1dbb      	adds	r3, r7, #6
1004ebde:	881b      	ldrh	r3, [r3, #0]
1004ebe0:	0018      	movs	r0, r3
1004ebe2:	f007 f89f 	bl	10055d24 <GAP_name_disc_proc_connected_check>
}
1004ebe6:	46c0      	nop			@ (mov r8, r8)
1004ebe8:	46bd      	mov	sp, r7
1004ebea:	b002      	add	sp, #8
1004ebec:	bd80      	pop	{r7, pc}

1004ebee <GAP_LimDiscTimeoutcb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAP_LimDiscTimeoutcb_ucfg(uint8_t timer_id)
{
1004ebee:	b580      	push	{r7, lr}
1004ebf0:	b082      	sub	sp, #8
1004ebf2:	af00      	add	r7, sp, #0
1004ebf4:	0002      	movs	r2, r0
1004ebf6:	1dfb      	adds	r3, r7, #7
1004ebf8:	701a      	strb	r2, [r3, #0]
    GAP_LimDiscTimeoutcb(timer_id);
1004ebfa:	1dfb      	adds	r3, r7, #7
1004ebfc:	781b      	ldrb	r3, [r3, #0]
1004ebfe:	0018      	movs	r0, r3
1004ec00:	f007 fad4 	bl	100561ac <GAP_LimDiscTimeoutcb>
}
1004ec04:	46c0      	nop			@ (mov r8, r8)
1004ec06:	46bd      	mov	sp, r7
1004ec08:	b002      	add	sp, #8
1004ec0a:	bd80      	pop	{r7, pc}

1004ec0c <hci_acl_data_tx_cmpl_event_int_cb_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_tx_cmpl_event_int_cb_ucfg(void* header_p,
                                                  uint8_t* buff_p)
{
1004ec0c:	b580      	push	{r7, lr}
1004ec0e:	b082      	sub	sp, #8
1004ec10:	af00      	add	r7, sp, #0
1004ec12:	6078      	str	r0, [r7, #4]
1004ec14:	6039      	str	r1, [r7, #0]
    return hci_acl_data_tx_cmpl_event_int_cb(header_p,
1004ec16:	683a      	ldr	r2, [r7, #0]
1004ec18:	687b      	ldr	r3, [r7, #4]
1004ec1a:	0011      	movs	r1, r2
1004ec1c:	0018      	movs	r0, r3
1004ec1e:	f006 f8ab 	bl	10054d78 <hci_acl_data_tx_cmpl_event_int_cb>
1004ec22:	0003      	movs	r3, r0
                                             buff_p);
}
1004ec24:	0018      	movs	r0, r3
1004ec26:	46bd      	mov	sp, r7
1004ec28:	b002      	add	sp, #8
1004ec2a:	bd80      	pop	{r7, pc}

1004ec2c <hci_acl_data_ind_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_acl_data_ind_event_int_cb_ucfg(void* header_p,
                                              uint8_t* buff_p)
{
1004ec2c:	b580      	push	{r7, lr}
1004ec2e:	b082      	sub	sp, #8
1004ec30:	af00      	add	r7, sp, #0
1004ec32:	6078      	str	r0, [r7, #4]
1004ec34:	6039      	str	r1, [r7, #0]
    return hci_acl_data_ind_event_int_cb(header_p,
1004ec36:	683a      	ldr	r2, [r7, #0]
1004ec38:	687b      	ldr	r3, [r7, #4]
1004ec3a:	0011      	movs	r1, r2
1004ec3c:	0018      	movs	r0, r3
1004ec3e:	f006 f8c5 	bl	10054dcc <hci_acl_data_ind_event_int_cb>
1004ec42:	0003      	movs	r3, r0
                                         buff_p);
}
1004ec44:	0018      	movs	r0, r3
1004ec46:	46bd      	mov	sp, r7
1004ec48:	b002      	add	sp, #8
1004ec4a:	bd80      	pop	{r7, pc}

1004ec4c <Controller_Process_Q_ucfg>:
#endif /* ((CONTROLLER_CHAN_CLASS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void Controller_Process_Q_ucfg(uint16_t task_idx)
{
1004ec4c:	b580      	push	{r7, lr}
1004ec4e:	b082      	sub	sp, #8
1004ec50:	af00      	add	r7, sp, #0
1004ec52:	0002      	movs	r2, r0
1004ec54:	1dbb      	adds	r3, r7, #6
1004ec56:	801a      	strh	r2, [r3, #0]
    Controller_Process_Q(task_idx);
1004ec58:	1dbb      	adds	r3, r7, #6
1004ec5a:	881b      	ldrh	r3, [r3, #0]
1004ec5c:	0018      	movs	r0, r3
1004ec5e:	f00a fc03 	bl	10059468 <Controller_Process_Q>
}
1004ec62:	46c0      	nop			@ (mov r8, r8)
1004ec64:	46bd      	mov	sp, r7
1004ec66:	b002      	add	sp, #8
1004ec68:	bd80      	pop	{r7, pc}

1004ec6a <LLC_offline_control_procedures_processing_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_offline_control_procedures_processing_ucfg(uint16_t task_idx)
{
1004ec6a:	b580      	push	{r7, lr}
1004ec6c:	b082      	sub	sp, #8
1004ec6e:	af00      	add	r7, sp, #0
1004ec70:	0002      	movs	r2, r0
1004ec72:	1dbb      	adds	r3, r7, #6
1004ec74:	801a      	strh	r2, [r3, #0]
    LLC_offline_control_procedures_processing(task_idx);
1004ec76:	1dbb      	adds	r3, r7, #6
1004ec78:	881b      	ldrh	r3, [r3, #0]
1004ec7a:	0018      	movs	r0, r3
1004ec7c:	f00a fc44 	bl	10059508 <LLC_offline_control_procedures_processing>
}
1004ec80:	46c0      	nop			@ (mov r8, r8)
1004ec82:	46bd      	mov	sp, r7
1004ec84:	b002      	add	sp, #8
1004ec86:	bd80      	pop	{r7, pc}

1004ec88 <phy_upd_csr_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint32_t phy_upd_csr_ucfg(void)
{
1004ec88:	b580      	push	{r7, lr}
1004ec8a:	af00      	add	r7, sp, #0
    return phy_upd_csr();
1004ec8c:	f00a fd06 	bl	1005969c <phy_upd_csr>
1004ec90:	0003      	movs	r3, r0
}
1004ec92:	0018      	movs	r0, r3
1004ec94:	46bd      	mov	sp, r7
1004ec96:	bd80      	pop	{r7, pc}

1004ec98 <conn_supp_csr_ucfg>:
}
#endif /* (CONTROLLER_SCAN_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint32_t conn_supp_csr_ucfg(void)
{
1004ec98:	b580      	push	{r7, lr}
1004ec9a:	af00      	add	r7, sp, #0
    return conn_supp_csr();
1004ec9c:	f00a fd02 	bl	100596a4 <conn_supp_csr>
1004eca0:	0003      	movs	r3, r0
}
1004eca2:	0018      	movs	r0, r3
1004eca4:	46bd      	mov	sp, r7
1004eca6:	bd80      	pop	{r7, pc}

1004eca8 <ACL_pkt_init_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus ACL_pkt_init_ucfg(void)
{
1004eca8:	b580      	push	{r7, lr}
1004ecaa:	af00      	add	r7, sp, #0
    return ACL_pkt_init();
1004ecac:	f006 f8b0 	bl	10054e10 <ACL_pkt_init>
1004ecb0:	0003      	movs	r3, r0
}
1004ecb2:	0018      	movs	r0, r3
1004ecb4:	46bd      	mov	sp, r7
1004ecb6:	bd80      	pop	{r7, pc}

1004ecb8 <hci_disconnection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_disconnection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004ecb8:	b580      	push	{r7, lr}
1004ecba:	b082      	sub	sp, #8
1004ecbc:	af00      	add	r7, sp, #0
1004ecbe:	6078      	str	r0, [r7, #4]
1004ecc0:	6039      	str	r1, [r7, #0]
    return hci_disconnection_complete_event_int_cb(header_p,
1004ecc2:	683a      	ldr	r2, [r7, #0]
1004ecc4:	687b      	ldr	r3, [r7, #4]
1004ecc6:	0011      	movs	r1, r2
1004ecc8:	0018      	movs	r0, r3
1004ecca:	f006 fc53 	bl	10055574 <hci_disconnection_complete_event_int_cb>
1004ecce:	0003      	movs	r3, r0
                                                   buff_p);
}
1004ecd0:	0018      	movs	r0, r3
1004ecd2:	46bd      	mov	sp, r7
1004ecd4:	b002      	add	sp, #8
1004ecd6:	bd80      	pop	{r7, pc}

1004ecd8 <hci_encryption_change_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_change_event_int_cb_ucfg(void* header_p,
                                                   uint8_t* buff_p)
{
1004ecd8:	b580      	push	{r7, lr}
1004ecda:	b082      	sub	sp, #8
1004ecdc:	af00      	add	r7, sp, #0
1004ecde:	6078      	str	r0, [r7, #4]
1004ece0:	6039      	str	r1, [r7, #0]
    return hci_encryption_change_event_int_cb(header_p,
1004ece2:	683a      	ldr	r2, [r7, #0]
1004ece4:	687b      	ldr	r3, [r7, #4]
1004ece6:	0011      	movs	r1, r2
1004ece8:	0018      	movs	r0, r3
1004ecea:	f006 fc73 	bl	100555d4 <hci_encryption_change_event_int_cb>
1004ecee:	0003      	movs	r3, r0
                                              buff_p);
}
1004ecf0:	0018      	movs	r0, r3
1004ecf2:	46bd      	mov	sp, r7
1004ecf4:	b002      	add	sp, #8
1004ecf6:	bd80      	pop	{r7, pc}

1004ecf8 <hci_encryption_key_refresh_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_encryption_key_refresh_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004ecf8:	b580      	push	{r7, lr}
1004ecfa:	b082      	sub	sp, #8
1004ecfc:	af00      	add	r7, sp, #0
1004ecfe:	6078      	str	r0, [r7, #4]
1004ed00:	6039      	str	r1, [r7, #0]
    return hci_encryption_key_refresh_complete_event_int_cb(header_p,
1004ed02:	683a      	ldr	r2, [r7, #0]
1004ed04:	687b      	ldr	r3, [r7, #4]
1004ed06:	0011      	movs	r1, r2
1004ed08:	0018      	movs	r0, r3
1004ed0a:	f006 fc7f 	bl	1005560c <hci_encryption_key_refresh_complete_event_int_cb>
1004ed0e:	0003      	movs	r3, r0
                                                            buff_p);
}
1004ed10:	0018      	movs	r0, r3
1004ed12:	46bd      	mov	sp, r7
1004ed14:	b002      	add	sp, #8
1004ed16:	bd80      	pop	{r7, pc}

1004ed18 <hci_le_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_connection_complete_event_int_cb_ucfg(void* header_p,
                                                        uint8_t* buff_p)
{
1004ed18:	b580      	push	{r7, lr}
1004ed1a:	b082      	sub	sp, #8
1004ed1c:	af00      	add	r7, sp, #0
1004ed1e:	6078      	str	r0, [r7, #4]
1004ed20:	6039      	str	r1, [r7, #0]
    return hci_le_connection_complete_event_int_cb(header_p,
1004ed22:	683a      	ldr	r2, [r7, #0]
1004ed24:	687b      	ldr	r3, [r7, #4]
1004ed26:	0011      	movs	r1, r2
1004ed28:	0018      	movs	r0, r3
1004ed2a:	f006 fc8b 	bl	10055644 <hci_le_connection_complete_event_int_cb>
1004ed2e:	0003      	movs	r3, r0
                                                   buff_p);
}
1004ed30:	0018      	movs	r0, r3
1004ed32:	46bd      	mov	sp, r7
1004ed34:	b002      	add	sp, #8
1004ed36:	bd80      	pop	{r7, pc}

1004ed38 <hci_le_enhanced_connection_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_enhanced_connection_complete_event_int_cb_ucfg(void* header_p,
                                                                 uint8_t* buff_p)
{
1004ed38:	b580      	push	{r7, lr}
1004ed3a:	b082      	sub	sp, #8
1004ed3c:	af00      	add	r7, sp, #0
1004ed3e:	6078      	str	r0, [r7, #4]
1004ed40:	6039      	str	r1, [r7, #0]
    return hci_le_enhanced_connection_complete_event_int_cb(header_p,
1004ed42:	683a      	ldr	r2, [r7, #0]
1004ed44:	687b      	ldr	r3, [r7, #4]
1004ed46:	0011      	movs	r1, r2
1004ed48:	0018      	movs	r0, r3
1004ed4a:	f006 fcbb 	bl	100556c4 <hci_le_enhanced_connection_complete_event_int_cb>
1004ed4e:	0003      	movs	r3, r0
                                                            buff_p);
}
1004ed50:	0018      	movs	r0, r3
1004ed52:	46bd      	mov	sp, r7
1004ed54:	b002      	add	sp, #8
1004ed56:	bd80      	pop	{r7, pc}

1004ed58 <hci_le_long_term_key_request_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_long_term_key_request_event_int_cb_ucfg(void* header_p,
                                                          uint8_t* buff_p)
{
1004ed58:	b580      	push	{r7, lr}
1004ed5a:	b082      	sub	sp, #8
1004ed5c:	af00      	add	r7, sp, #0
1004ed5e:	6078      	str	r0, [r7, #4]
1004ed60:	6039      	str	r1, [r7, #0]
    return hci_le_long_term_key_request_event_int_cb(header_p,
1004ed62:	683a      	ldr	r2, [r7, #0]
1004ed64:	687b      	ldr	r3, [r7, #4]
1004ed66:	0011      	movs	r1, r2
1004ed68:	0018      	movs	r0, r3
1004ed6a:	f006 fcf1 	bl	10055750 <hci_le_long_term_key_request_event_int_cb>
1004ed6e:	0003      	movs	r3, r0
                                                     buff_p);
}
1004ed70:	0018      	movs	r0, r3
1004ed72:	46bd      	mov	sp, r7
1004ed74:	b002      	add	sp, #8
1004ed76:	bd80      	pop	{r7, pc}

1004ed78 <hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_read_local_p256_public_key_complete_event_int_cb_ucfg(void* header_p,
                                                                        uint8_t* buff_p)
{
1004ed78:	b580      	push	{r7, lr}
1004ed7a:	b082      	sub	sp, #8
1004ed7c:	af00      	add	r7, sp, #0
1004ed7e:	6078      	str	r0, [r7, #4]
1004ed80:	6039      	str	r1, [r7, #0]
    return hci_le_read_local_p256_public_key_complete_event_int_cb(header_p,
1004ed82:	683a      	ldr	r2, [r7, #0]
1004ed84:	687b      	ldr	r3, [r7, #4]
1004ed86:	0011      	movs	r1, r2
1004ed88:	0018      	movs	r0, r3
1004ed8a:	f006 fd11 	bl	100557b0 <hci_le_read_local_p256_public_key_complete_event_int_cb>
1004ed8e:	0003      	movs	r3, r0
                                                                   buff_p);
}
1004ed90:	0018      	movs	r0, r3
1004ed92:	46bd      	mov	sp, r7
1004ed94:	b002      	add	sp, #8
1004ed96:	bd80      	pop	{r7, pc}

1004ed98 <hci_le_generate_dhkey_complete_event_int_cb_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
tBleStatus hci_le_generate_dhkey_complete_event_int_cb_ucfg(void* header_p,
                                                            uint8_t* buff_p)
{
1004ed98:	b580      	push	{r7, lr}
1004ed9a:	b082      	sub	sp, #8
1004ed9c:	af00      	add	r7, sp, #0
1004ed9e:	6078      	str	r0, [r7, #4]
1004eda0:	6039      	str	r1, [r7, #0]
    return hci_le_generate_dhkey_complete_event_int_cb(header_p,
1004eda2:	683a      	ldr	r2, [r7, #0]
1004eda4:	687b      	ldr	r3, [r7, #4]
1004eda6:	0011      	movs	r1, r2
1004eda8:	0018      	movs	r0, r3
1004edaa:	f006 fd1f 	bl	100557ec <hci_le_generate_dhkey_complete_event_int_cb>
1004edae:	0003      	movs	r3, r0
                                                       buff_p);
}
1004edb0:	0018      	movs	r0, r3
1004edb2:	46bd      	mov	sp, r7
1004edb4:	b002      	add	sp, #8
1004edb6:	bd80      	pop	{r7, pc}

1004edb8 <MBM_init_ucfg>:
      (CONTROLLER_PERIODIC_ADV_ENABLED == 1) &&\
      (CONTROLLER_BIS_ENABLED == 1)\
     )\
    )
tBleStatus MBM_init_ucfg(void)
{
1004edb8:	b580      	push	{r7, lr}
1004edba:	af00      	add	r7, sp, #0
    return MBM_init();
1004edbc:	f011 fe20 	bl	10060a00 <MBM_init>
1004edc0:	0003      	movs	r3, r0
}
1004edc2:	0018      	movs	r0, r3
1004edc4:	46bd      	mov	sp, r7
1004edc6:	bd80      	pop	{r7, pc}

1004edc8 <smp_debug_trudy__set_config_ucfg>:
#endif

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_debug_trudy__set_config_ucfg(uint32_t config)
{
1004edc8:	b580      	push	{r7, lr}
1004edca:	b082      	sub	sp, #8
1004edcc:	af00      	add	r7, sp, #0
1004edce:	6078      	str	r0, [r7, #4]
    return smp_debug_trudy__set_config(config);
1004edd0:	687b      	ldr	r3, [r7, #4]
1004edd2:	0018      	movs	r0, r3
1004edd4:	f012 fe0b 	bl	100619ee <smp_debug_trudy__set_config>
1004edd8:	0003      	movs	r3, r0
}
1004edda:	0018      	movs	r0, r3
1004eddc:	46bd      	mov	sp, r7
1004edde:	b002      	add	sp, #8
1004ede0:	bd80      	pop	{r7, pc}

1004ede2 <smp_sap_scp_force_debug_key_usage_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus smp_sap_scp_force_debug_key_usage_ucfg(uint8_t config_val)
{
1004ede2:	b580      	push	{r7, lr}
1004ede4:	b082      	sub	sp, #8
1004ede6:	af00      	add	r7, sp, #0
1004ede8:	0002      	movs	r2, r0
1004edea:	1dfb      	adds	r3, r7, #7
1004edec:	701a      	strb	r2, [r3, #0]
    return smp_sap_scp_force_debug_key_usage(config_val);
1004edee:	1dfb      	adds	r3, r7, #7
1004edf0:	781b      	ldrb	r3, [r3, #0]
1004edf2:	0018      	movs	r0, r3
1004edf4:	f013 fafa 	bl	100623ec <smp_sap_scp_force_debug_key_usage>
1004edf8:	0003      	movs	r3, r0
}
1004edfa:	0018      	movs	r0, r3
1004edfc:	46bd      	mov	sp, r7
1004edfe:	b002      	add	sp, #8
1004ee00:	bd80      	pop	{r7, pc}

1004ee02 <L2C_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus L2C_init_ucfg(uint8_t cos_enabled)
{
1004ee02:	b580      	push	{r7, lr}
1004ee04:	b082      	sub	sp, #8
1004ee06:	af00      	add	r7, sp, #0
1004ee08:	0002      	movs	r2, r0
1004ee0a:	1dfb      	adds	r3, r7, #7
1004ee0c:	701a      	strb	r2, [r3, #0]
    return L2C_init(cos_enabled);
1004ee0e:	1dfb      	adds	r3, r7, #7
1004ee10:	781b      	ldrb	r3, [r3, #0]
1004ee12:	0018      	movs	r0, r3
1004ee14:	f00a fe26 	bl	10059a64 <L2C_init>
1004ee18:	0003      	movs	r3, r0
}
1004ee1a:	0018      	movs	r0, r3
1004ee1c:	46bd      	mov	sp, r7
1004ee1e:	b002      	add	sp, #8
1004ee20:	bd80      	pop	{r7, pc}

1004ee22 <llc_conn_multi_link_connection_ucfg>:
#endif /* ((CONNECTION_SUBRATING_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
tBleStatus llc_conn_multi_link_connection_ucfg(uint8_t enable)
{
1004ee22:	b580      	push	{r7, lr}
1004ee24:	b082      	sub	sp, #8
1004ee26:	af00      	add	r7, sp, #0
1004ee28:	0002      	movs	r2, r0
1004ee2a:	1dfb      	adds	r3, r7, #7
1004ee2c:	701a      	strb	r2, [r3, #0]
    return llc_conn_multi_link_connection(enable);
1004ee2e:	1dfb      	adds	r3, r7, #7
1004ee30:	781b      	ldrb	r3, [r3, #0]
1004ee32:	0018      	movs	r0, r3
1004ee34:	f00b fe75 	bl	1005ab22 <llc_conn_multi_link_connection>
1004ee38:	0003      	movs	r3, r0
}
1004ee3a:	0018      	movs	r0, r3
1004ee3c:	46bd      	mov	sp, r7
1004ee3e:	b002      	add	sp, #8
1004ee40:	bd80      	pop	{r7, pc}

1004ee42 <llc_conn_peripheral_roll_back_params_tsk_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void llc_conn_peripheral_roll_back_params_tsk_ucfg(uint16_t task_idx)
{
1004ee42:	b580      	push	{r7, lr}
1004ee44:	b082      	sub	sp, #8
1004ee46:	af00      	add	r7, sp, #0
1004ee48:	0002      	movs	r2, r0
1004ee4a:	1dbb      	adds	r3, r7, #6
1004ee4c:	801a      	strh	r2, [r3, #0]
    llc_conn_peripheral_roll_back_params_tsk(task_idx);
1004ee4e:	1dbb      	adds	r3, r7, #6
1004ee50:	881b      	ldrh	r3, [r3, #0]
1004ee52:	0018      	movs	r0, r3
1004ee54:	f00c fcb0 	bl	1005b7b8 <llc_conn_peripheral_roll_back_params_tsk>
}
1004ee58:	46c0      	nop			@ (mov r8, r8)
1004ee5a:	46bd      	mov	sp, r7
1004ee5c:	b002      	add	sp, #8
1004ee5e:	bd80      	pop	{r7, pc}

1004ee60 <LL_cpe_init_phy_update_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_cpe_init_phy_update_ucfg(void)
{
1004ee60:	b580      	push	{r7, lr}
1004ee62:	af00      	add	r7, sp, #0
    LL_cpe_init_phy_update();
1004ee64:	f00d fc82 	bl	1005c76c <LL_cpe_init_phy_update>
}
1004ee68:	46c0      	nop			@ (mov r8, r8)
1004ee6a:	46bd      	mov	sp, r7
1004ee6c:	bd80      	pop	{r7, pc}

1004ee6e <LL_cpe_init_conn_update_ucfg>:
#endif /* ((CONTROLLER_POWER_CONTROL_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_conn_update_ucfg(void)
{
1004ee6e:	b580      	push	{r7, lr}
1004ee70:	af00      	add	r7, sp, #0
    LL_cpe_init_conn_update();
1004ee72:	f00d fc83 	bl	1005c77c <LL_cpe_init_conn_update>
}
1004ee76:	46c0      	nop			@ (mov r8, r8)
1004ee78:	46bd      	mov	sp, r7
1004ee7a:	bd80      	pop	{r7, pc}

1004ee7c <LL_cpe_init_chmap_update_ucfg>:
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_chmap_update_ucfg(void)
{
1004ee7c:	b580      	push	{r7, lr}
1004ee7e:	af00      	add	r7, sp, #0
    LL_cpe_init_chmap_update();
1004ee80:	f00d fc84 	bl	1005c78c <LL_cpe_init_chmap_update>
}
1004ee84:	46c0      	nop			@ (mov r8, r8)
1004ee86:	46bd      	mov	sp, r7
1004ee88:	bd80      	pop	{r7, pc}

1004ee8a <LL_cpe_init_ucfg>:
#endif /* ((CONTROLLER_CIS_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1)) */

#if (CONNECTION_ENABLED == 1)
void LL_cpe_init_ucfg(void)
{
1004ee8a:	b580      	push	{r7, lr}
1004ee8c:	af00      	add	r7, sp, #0
    LL_cpe_init();
1004ee8e:	f00d fcc1 	bl	1005c814 <LL_cpe_init>
}
1004ee92:	46c0      	nop			@ (mov r8, r8)
1004ee94:	46bd      	mov	sp, r7
1004ee96:	bd80      	pop	{r7, pc}

1004ee98 <LL_conn_upd_max_tx_time_coded_ucfg>:
          (CONNECTION_ENABLED == 1)) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_max_tx_time_coded_ucfg(void* params)
{
1004ee98:	b580      	push	{r7, lr}
1004ee9a:	b082      	sub	sp, #8
1004ee9c:	af00      	add	r7, sp, #0
1004ee9e:	6078      	str	r0, [r7, #4]
    LL_conn_upd_max_tx_time_coded(params);
1004eea0:	687b      	ldr	r3, [r7, #4]
1004eea2:	0018      	movs	r0, r3
1004eea4:	f00e f8de 	bl	1005d064 <LL_conn_upd_max_tx_time_coded>
}
1004eea8:	46c0      	nop			@ (mov r8, r8)
1004eeaa:	46bd      	mov	sp, r7
1004eeac:	b002      	add	sp, #8
1004eeae:	bd80      	pop	{r7, pc}

1004eeb0 <LL_conn_upd_data_length_change_event_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_conn_upd_data_length_change_event_ucfg(void* params)
{
1004eeb0:	b580      	push	{r7, lr}
1004eeb2:	b082      	sub	sp, #8
1004eeb4:	af00      	add	r7, sp, #0
1004eeb6:	6078      	str	r0, [r7, #4]
    LL_conn_upd_data_length_change_event(params);
1004eeb8:	687b      	ldr	r3, [r7, #4]
1004eeba:	0018      	movs	r0, r3
1004eebc:	f00e f956 	bl	1005d16c <LL_conn_upd_data_length_change_event>
}
1004eec0:	46c0      	nop			@ (mov r8, r8)
1004eec2:	46bd      	mov	sp, r7
1004eec4:	b002      	add	sp, #8
1004eec6:	bd80      	pop	{r7, pc}

1004eec8 <LLC_authenticated_payload_timeout_processing_ucfg>:
}
#endif /* (CONTROLLER_CTE_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
void LLC_authenticated_payload_timeout_processing_ucfg(uint16_t task_idx)
{
1004eec8:	b580      	push	{r7, lr}
1004eeca:	b082      	sub	sp, #8
1004eecc:	af00      	add	r7, sp, #0
1004eece:	0002      	movs	r2, r0
1004eed0:	1dbb      	adds	r3, r7, #6
1004eed2:	801a      	strh	r2, [r3, #0]
    LLC_authenticated_payload_timeout_processing(task_idx);
1004eed4:	1dbb      	adds	r3, r7, #6
1004eed6:	881b      	ldrh	r3, [r3, #0]
1004eed8:	0018      	movs	r0, r3
1004eeda:	f00e ff47 	bl	1005dd6c <LLC_authenticated_payload_timeout_processing>
}
1004eede:	46c0      	nop			@ (mov r8, r8)
1004eee0:	46bd      	mov	sp, r7
1004eee2:	b002      	add	sp, #8
1004eee4:	bd80      	pop	{r7, pc}

1004eee6 <LL_phy_upd_pending_ucfg>:
          (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1)
uint8_t LL_phy_upd_pending_ucfg(uint8_t conn_idx)
{
1004eee6:	b580      	push	{r7, lr}
1004eee8:	b082      	sub	sp, #8
1004eeea:	af00      	add	r7, sp, #0
1004eeec:	0002      	movs	r2, r0
1004eeee:	1dfb      	adds	r3, r7, #7
1004eef0:	701a      	strb	r2, [r3, #0]
    return LL_phy_upd_pending(conn_idx);
1004eef2:	1dfb      	adds	r3, r7, #7
1004eef4:	781b      	ldrb	r3, [r3, #0]
1004eef6:	0018      	movs	r0, r3
1004eef8:	f00f f905 	bl	1005e106 <LL_phy_upd_pending>
1004eefc:	0003      	movs	r3, r0
}
1004eefe:	0018      	movs	r0, r3
1004ef00:	46bd      	mov	sp, r7
1004ef02:	b002      	add	sp, #8
1004ef04:	bd80      	pop	{r7, pc}

1004ef06 <LL_phy_update_init_ucfg>:
#endif /* (CONTROLLER_2M_CODED_PHY_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_ucfg(void)
{
1004ef06:	b580      	push	{r7, lr}
1004ef08:	af00      	add	r7, sp, #0
    return LL_phy_update_init();
1004ef0a:	f00f f8b7 	bl	1005e07c <LL_phy_update_init>
1004ef0e:	0003      	movs	r3, r0
}
1004ef10:	0018      	movs	r0, r3
1004ef12:	46bd      	mov	sp, r7
1004ef14:	bd80      	pop	{r7, pc}

1004ef16 <LL_phy_update_init_per_st_data_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
tBleStatus LL_phy_update_init_per_st_data_ucfg(uint8_t conn_idx)
{
1004ef16:	b580      	push	{r7, lr}
1004ef18:	b082      	sub	sp, #8
1004ef1a:	af00      	add	r7, sp, #0
1004ef1c:	0002      	movs	r2, r0
1004ef1e:	1dfb      	adds	r3, r7, #7
1004ef20:	701a      	strb	r2, [r3, #0]
    return LL_phy_update_init_per_st_data(conn_idx);
1004ef22:	1dfb      	adds	r3, r7, #7
1004ef24:	781b      	ldrb	r3, [r3, #0]
1004ef26:	0018      	movs	r0, r3
1004ef28:	f00f f8b2 	bl	1005e090 <LL_phy_update_init_per_st_data>
1004ef2c:	0003      	movs	r3, r0
}
1004ef2e:	0018      	movs	r0, r3
1004ef30:	46bd      	mov	sp, r7
1004ef32:	b002      	add	sp, #8
1004ef34:	bd80      	pop	{r7, pc}

1004ef36 <LL_phy_upd_evt_pending_check_isr_ucfg>:
          (CONNECTION_ENABLED == 1) */

#if (CONTROLLER_2M_CODED_PHY_ENABLED == 1) &&\
    (CONNECTION_ENABLED == 1)
void LL_phy_upd_evt_pending_check_isr_ucfg(uint8_t conn_idx)
{
1004ef36:	b580      	push	{r7, lr}
1004ef38:	b082      	sub	sp, #8
1004ef3a:	af00      	add	r7, sp, #0
1004ef3c:	0002      	movs	r2, r0
1004ef3e:	1dfb      	adds	r3, r7, #7
1004ef40:	701a      	strb	r2, [r3, #0]
    LL_phy_upd_evt_pending_check_isr(conn_idx);
1004ef42:	1dfb      	adds	r3, r7, #7
1004ef44:	781b      	ldrb	r3, [r3, #0]
1004ef46:	0018      	movs	r0, r3
1004ef48:	f00f fc8c 	bl	1005e864 <LL_phy_upd_evt_pending_check_isr>
}
1004ef4c:	46c0      	nop			@ (mov r8, r8)
1004ef4e:	46bd      	mov	sp, r7
1004ef50:	b002      	add	sp, #8
1004ef52:	bd80      	pop	{r7, pc}

1004ef54 <ADV_ISR_connect_request_received_ucfg>:

#if (CONNECTION_ENABLED == 1)
void ADV_ISR_connect_request_received_ucfg(void* pointer,
                                           uint8_t* packet,
                                           void* PeerIDAddress_p)
{
1004ef54:	b580      	push	{r7, lr}
1004ef56:	b084      	sub	sp, #16
1004ef58:	af00      	add	r7, sp, #0
1004ef5a:	60f8      	str	r0, [r7, #12]
1004ef5c:	60b9      	str	r1, [r7, #8]
1004ef5e:	607a      	str	r2, [r7, #4]
    ADV_ISR_connect_request_received(pointer,
1004ef60:	687a      	ldr	r2, [r7, #4]
1004ef62:	68b9      	ldr	r1, [r7, #8]
1004ef64:	68fb      	ldr	r3, [r7, #12]
1004ef66:	0018      	movs	r0, r3
1004ef68:	f010 fd4a 	bl	1005fa00 <ADV_ISR_connect_request_received>
                                     packet,
                                     PeerIDAddress_p);
}
1004ef6c:	46c0      	nop			@ (mov r8, r8)
1004ef6e:	46bd      	mov	sp, r7
1004ef70:	b004      	add	sp, #16
1004ef72:	bd80      	pop	{r7, pc}

1004ef74 <EADV_start_request_radio_tasks_ucfg>:
}
#endif /* (CONNECTION_ENABLED == 1) */

#if (CONNECTION_ENABLED == 1)
uint8_t EADV_start_request_radio_tasks_ucfg(void* pointer)
{
1004ef74:	b580      	push	{r7, lr}
1004ef76:	b082      	sub	sp, #8
1004ef78:	af00      	add	r7, sp, #0
1004ef7a:	6078      	str	r0, [r7, #4]
    return EADV_start_request_radio_tasks(pointer);
1004ef7c:	687b      	ldr	r3, [r7, #4]
1004ef7e:	0018      	movs	r0, r3
1004ef80:	f010 feca 	bl	1005fd18 <EADV_start_request_radio_tasks>
1004ef84:	0003      	movs	r3, r0
}
1004ef86:	0018      	movs	r0, r3
1004ef88:	46bd      	mov	sp, r7
1004ef8a:	b002      	add	sp, #8
1004ef8c:	bd80      	pop	{r7, pc}

1004ef8e <LL_init_ucfg>:
                  uint8_t PerAdvScanWr,
                  uint8_t Cte,
                  uint8_t Pcl,
                  uint8_t Cns,
                  uint8_t Chc)
{
1004ef8e:	b5b0      	push	{r4, r5, r7, lr}
1004ef90:	b08a      	sub	sp, #40	@ 0x28
1004ef92:	af08      	add	r7, sp, #32
1004ef94:	0005      	movs	r5, r0
1004ef96:	000c      	movs	r4, r1
1004ef98:	0010      	movs	r0, r2
1004ef9a:	0019      	movs	r1, r3
1004ef9c:	1dfb      	adds	r3, r7, #7
1004ef9e:	1c2a      	adds	r2, r5, #0
1004efa0:	701a      	strb	r2, [r3, #0]
1004efa2:	1dbb      	adds	r3, r7, #6
1004efa4:	1c22      	adds	r2, r4, #0
1004efa6:	701a      	strb	r2, [r3, #0]
1004efa8:	1d7b      	adds	r3, r7, #5
1004efaa:	1c02      	adds	r2, r0, #0
1004efac:	701a      	strb	r2, [r3, #0]
1004efae:	1d3b      	adds	r3, r7, #4
1004efb0:	1c0a      	adds	r2, r1, #0
1004efb2:	701a      	strb	r2, [r3, #0]
    LL_init(dataLenExt,
1004efb4:	1d3b      	adds	r3, r7, #4
1004efb6:	781c      	ldrb	r4, [r3, #0]
1004efb8:	1d7b      	adds	r3, r7, #5
1004efba:	781a      	ldrb	r2, [r3, #0]
1004efbc:	1dbb      	adds	r3, r7, #6
1004efbe:	7819      	ldrb	r1, [r3, #0]
1004efc0:	1dfb      	adds	r3, r7, #7
1004efc2:	7818      	ldrb	r0, [r3, #0]
1004efc4:	2330      	movs	r3, #48	@ 0x30
1004efc6:	18fb      	adds	r3, r7, r3
1004efc8:	781b      	ldrb	r3, [r3, #0]
1004efca:	9306      	str	r3, [sp, #24]
1004efcc:	232c      	movs	r3, #44	@ 0x2c
1004efce:	18fb      	adds	r3, r7, r3
1004efd0:	781b      	ldrb	r3, [r3, #0]
1004efd2:	9305      	str	r3, [sp, #20]
1004efd4:	2328      	movs	r3, #40	@ 0x28
1004efd6:	18fb      	adds	r3, r7, r3
1004efd8:	781b      	ldrb	r3, [r3, #0]
1004efda:	9304      	str	r3, [sp, #16]
1004efdc:	2324      	movs	r3, #36	@ 0x24
1004efde:	18fb      	adds	r3, r7, r3
1004efe0:	781b      	ldrb	r3, [r3, #0]
1004efe2:	9303      	str	r3, [sp, #12]
1004efe4:	2320      	movs	r3, #32
1004efe6:	18fb      	adds	r3, r7, r3
1004efe8:	781b      	ldrb	r3, [r3, #0]
1004efea:	9302      	str	r3, [sp, #8]
1004efec:	231c      	movs	r3, #28
1004efee:	18fb      	adds	r3, r7, r3
1004eff0:	781b      	ldrb	r3, [r3, #0]
1004eff2:	9301      	str	r3, [sp, #4]
1004eff4:	2318      	movs	r3, #24
1004eff6:	18fb      	adds	r3, r7, r3
1004eff8:	781b      	ldrb	r3, [r3, #0]
1004effa:	9300      	str	r3, [sp, #0]
1004effc:	0023      	movs	r3, r4
1004effe:	f011 f94f 	bl	100602a0 <LL_init>
            PerAdvScanWr,
            Cte,
            Pcl,
            Cns,
            Chc);
}
1004f002:	46c0      	nop			@ (mov r8, r8)
1004f004:	46bd      	mov	sp, r7
1004f006:	b002      	add	sp, #8
1004f008:	bdb0      	pop	{r4, r5, r7, pc}

1004f00a <smp_fsm_process_actions_wrt_state_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_fsm_process_actions_wrt_state_tsk_ucfg(uint16_t task_idx)
{
1004f00a:	b580      	push	{r7, lr}
1004f00c:	b082      	sub	sp, #8
1004f00e:	af00      	add	r7, sp, #0
1004f010:	0002      	movs	r2, r0
1004f012:	1dbb      	adds	r3, r7, #6
1004f014:	801a      	strh	r2, [r3, #0]
    smp_fsm_process_actions_wrt_state_tsk(task_idx);
1004f016:	1dbb      	adds	r3, r7, #6
1004f018:	881b      	ldrh	r3, [r3, #0]
1004f01a:	0018      	movs	r0, r3
1004f01c:	f012 fcea 	bl	100619f4 <smp_fsm_process_actions_wrt_state_tsk>
}
1004f020:	46c0      	nop			@ (mov r8, r8)
1004f022:	46bd      	mov	sp, r7
1004f024:	b002      	add	sp, #8
1004f026:	bd80      	pop	{r7, pc}

1004f028 <smp_rxp_process_rxed_packets_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_rxp_process_rxed_packets_tsk_ucfg(uint16_t task_idx)
{
1004f028:	b580      	push	{r7, lr}
1004f02a:	b082      	sub	sp, #8
1004f02c:	af00      	add	r7, sp, #0
1004f02e:	0002      	movs	r2, r0
1004f030:	1dbb      	adds	r3, r7, #6
1004f032:	801a      	strh	r2, [r3, #0]
    smp_rxp_process_rxed_packets_tsk(task_idx);
1004f034:	1dbb      	adds	r3, r7, #6
1004f036:	881b      	ldrh	r3, [r3, #0]
1004f038:	0018      	movs	r0, r3
1004f03a:	f012 fdbf 	bl	10061bbc <smp_rxp_process_rxed_packets_tsk>
}
1004f03e:	46c0      	nop			@ (mov r8, r8)
1004f040:	46bd      	mov	sp, r7
1004f042:	b002      	add	sp, #8
1004f044:	bd80      	pop	{r7, pc}

1004f046 <smp_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void smp_init_ucfg(void)
{
1004f046:	b580      	push	{r7, lr}
1004f048:	af00      	add	r7, sp, #0
    smp_init();
1004f04a:	f012 ff17 	bl	10061e7c <smp_init>
}
1004f04e:	46c0      	nop			@ (mov r8, r8)
1004f050:	46bd      	mov	sp, r7
1004f052:	bd80      	pop	{r7, pc}

1004f054 <GAT_att_cmn_init_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_init_ucfg(void)
{
1004f054:	b580      	push	{r7, lr}
1004f056:	af00      	add	r7, sp, #0
    GAT_att_cmn_init();
1004f058:	f007 fc66 	bl	10056928 <GAT_att_cmn_init>
}
1004f05c:	46c0      	nop			@ (mov r8, r8)
1004f05e:	46bd      	mov	sp, r7
1004f060:	bd80      	pop	{r7, pc}

1004f062 <GAT_att_cmn_timer_expire_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_timer_expire_tsk_ucfg(uint16_t task_idx)
{
1004f062:	b580      	push	{r7, lr}
1004f064:	b082      	sub	sp, #8
1004f066:	af00      	add	r7, sp, #0
1004f068:	0002      	movs	r2, r0
1004f06a:	1dbb      	adds	r3, r7, #6
1004f06c:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_timer_expire_tsk(task_idx);
1004f06e:	1dbb      	adds	r3, r7, #6
1004f070:	881b      	ldrh	r3, [r3, #0]
1004f072:	0018      	movs	r0, r3
1004f074:	f007 fcc4 	bl	10056a00 <GAT_att_cmn_timer_expire_tsk>
}
1004f078:	46c0      	nop			@ (mov r8, r8)
1004f07a:	46bd      	mov	sp, r7
1004f07c:	b002      	add	sp, #8
1004f07e:	bd80      	pop	{r7, pc}

1004f080 <GAT_att_cmn_tx_pool_evt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_cmn_tx_pool_evt_tsk_ucfg(uint16_t task_idx)
{
1004f080:	b580      	push	{r7, lr}
1004f082:	b082      	sub	sp, #8
1004f084:	af00      	add	r7, sp, #0
1004f086:	0002      	movs	r2, r0
1004f088:	1dbb      	adds	r3, r7, #6
1004f08a:	801a      	strh	r2, [r3, #0]
    GAT_att_cmn_tx_pool_evt_tsk(task_idx);
1004f08c:	1dbb      	adds	r3, r7, #6
1004f08e:	881b      	ldrh	r3, [r3, #0]
1004f090:	0018      	movs	r0, r3
1004f092:	f007 fd29 	bl	10056ae8 <GAT_att_cmn_tx_pool_evt_tsk>
}
1004f096:	46c0      	nop			@ (mov r8, r8)
1004f098:	46bd      	mov	sp, r7
1004f09a:	b002      	add	sp, #8
1004f09c:	bd80      	pop	{r7, pc}

1004f09e <GAT_att_srv_process_rx_pckt_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_att_srv_process_rx_pckt_tsk_ucfg(uint16_t task_idx)
{
1004f09e:	b580      	push	{r7, lr}
1004f0a0:	b082      	sub	sp, #8
1004f0a2:	af00      	add	r7, sp, #0
1004f0a4:	0002      	movs	r2, r0
1004f0a6:	1dbb      	adds	r3, r7, #6
1004f0a8:	801a      	strh	r2, [r3, #0]
    GAT_att_srv_process_rx_pckt_tsk(task_idx);
1004f0aa:	1dbb      	adds	r3, r7, #6
1004f0ac:	881b      	ldrh	r3, [r3, #0]
1004f0ae:	0018      	movs	r0, r3
1004f0b0:	f008 f846 	bl	10057140 <GAT_att_srv_process_rx_pckt_tsk>
}
1004f0b4:	46c0      	nop			@ (mov r8, r8)
1004f0b6:	46bd      	mov	sp, r7
1004f0b8:	b002      	add	sp, #8
1004f0ba:	bd80      	pop	{r7, pc}

1004f0bc <GAT_srv_db_hash_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_db_hash_tsk_ucfg(uint16_t task_idx)
{
1004f0bc:	b580      	push	{r7, lr}
1004f0be:	b082      	sub	sp, #8
1004f0c0:	af00      	add	r7, sp, #0
1004f0c2:	0002      	movs	r2, r0
1004f0c4:	1dbb      	adds	r3, r7, #6
1004f0c6:	801a      	strh	r2, [r3, #0]
    GAT_srv_db_hash_tsk(task_idx);
1004f0c8:	1dbb      	adds	r3, r7, #6
1004f0ca:	881b      	ldrh	r3, [r3, #0]
1004f0cc:	0018      	movs	r0, r3
1004f0ce:	f009 f921 	bl	10058314 <GAT_srv_db_hash_tsk>
}
1004f0d2:	46c0      	nop			@ (mov r8, r8)
1004f0d4:	46bd      	mov	sp, r7
1004f0d6:	b002      	add	sp, #8
1004f0d8:	bd80      	pop	{r7, pc}

1004f0da <GAT_srv_send_srv_change_tsk_ucfg>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
void GAT_srv_send_srv_change_tsk_ucfg(uint16_t task_idx)
{
1004f0da:	b580      	push	{r7, lr}
1004f0dc:	b082      	sub	sp, #8
1004f0de:	af00      	add	r7, sp, #0
1004f0e0:	0002      	movs	r2, r0
1004f0e2:	1dbb      	adds	r3, r7, #6
1004f0e4:	801a      	strh	r2, [r3, #0]
    GAT_srv_send_srv_change_tsk(task_idx);
1004f0e6:	1dbb      	adds	r3, r7, #6
1004f0e8:	881b      	ldrh	r3, [r3, #0]
1004f0ea:	0018      	movs	r0, r3
1004f0ec:	f009 f9cc 	bl	10058488 <GAT_srv_send_srv_change_tsk>
}
1004f0f0:	46c0      	nop			@ (mov r8, r8)
1004f0f2:	46bd      	mov	sp, r7
1004f0f4:	b002      	add	sp, #8
1004f0f6:	bd80      	pop	{r7, pc}

1004f0f8 <aci_gap_terminate>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_terminate(uint16_t Connection_Handle,
                             uint8_t Reason)
{
1004f0f8:	b580      	push	{r7, lr}
1004f0fa:	b082      	sub	sp, #8
1004f0fc:	af00      	add	r7, sp, #0
1004f0fe:	0002      	movs	r2, r0
1004f100:	1dbb      	adds	r3, r7, #6
1004f102:	801a      	strh	r2, [r3, #0]
1004f104:	1d7b      	adds	r3, r7, #5
1004f106:	1c0a      	adds	r2, r1, #0
1004f108:	701a      	strb	r2, [r3, #0]
    return aci_gap_terminate_api(Connection_Handle,
1004f10a:	1d7b      	adds	r3, r7, #5
1004f10c:	781a      	ldrb	r2, [r3, #0]
1004f10e:	1dbb      	adds	r3, r7, #6
1004f110:	881b      	ldrh	r3, [r3, #0]
1004f112:	0011      	movs	r1, r2
1004f114:	0018      	movs	r0, r3
1004f116:	f005 fb49 	bl	100547ac <aci_gap_terminate_api>
1004f11a:	0003      	movs	r3, r0
                                 Reason);
}
1004f11c:	0018      	movs	r0, r3
1004f11e:	46bd      	mov	sp, r7
1004f120:	b002      	add	sp, #8
1004f122:	bd80      	pop	{r7, pc}

1004f124 <aci_gap_set_io_capability>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
1004f124:	b580      	push	{r7, lr}
1004f126:	b082      	sub	sp, #8
1004f128:	af00      	add	r7, sp, #0
1004f12a:	0002      	movs	r2, r0
1004f12c:	1dfb      	adds	r3, r7, #7
1004f12e:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_io_capability_api(IO_Capability);
1004f130:	1dfb      	adds	r3, r7, #7
1004f132:	781b      	ldrb	r3, [r3, #0]
1004f134:	0018      	movs	r0, r3
1004f136:	f005 fbc4 	bl	100548c2 <aci_gap_set_io_capability_api>
1004f13a:	0003      	movs	r3, r0
}
1004f13c:	0018      	movs	r0, r3
1004f13e:	46bd      	mov	sp, r7
1004f140:	b002      	add	sp, #8
1004f142:	bd80      	pop	{r7, pc}

1004f144 <aci_gap_set_security_requirements>:
                                             uint8_t SC_Support,
                                             uint8_t KeyPress_Notification_Support,
                                             uint8_t Min_Encryption_Key_Size,
                                             uint8_t Max_Encryption_Key_Size,
                                             uint8_t Pairing_Response)
{
1004f144:	b5b0      	push	{r4, r5, r7, lr}
1004f146:	b086      	sub	sp, #24
1004f148:	af04      	add	r7, sp, #16
1004f14a:	0005      	movs	r5, r0
1004f14c:	000c      	movs	r4, r1
1004f14e:	0010      	movs	r0, r2
1004f150:	0019      	movs	r1, r3
1004f152:	1dfb      	adds	r3, r7, #7
1004f154:	1c2a      	adds	r2, r5, #0
1004f156:	701a      	strb	r2, [r3, #0]
1004f158:	1dbb      	adds	r3, r7, #6
1004f15a:	1c22      	adds	r2, r4, #0
1004f15c:	701a      	strb	r2, [r3, #0]
1004f15e:	1d7b      	adds	r3, r7, #5
1004f160:	1c02      	adds	r2, r0, #0
1004f162:	701a      	strb	r2, [r3, #0]
1004f164:	1d3b      	adds	r3, r7, #4
1004f166:	1c0a      	adds	r2, r1, #0
1004f168:	701a      	strb	r2, [r3, #0]
    return aci_gap_set_security_requirements_api(Bonding_Mode,
1004f16a:	1d3b      	adds	r3, r7, #4
1004f16c:	781c      	ldrb	r4, [r3, #0]
1004f16e:	1d7b      	adds	r3, r7, #5
1004f170:	781a      	ldrb	r2, [r3, #0]
1004f172:	1dbb      	adds	r3, r7, #6
1004f174:	7819      	ldrb	r1, [r3, #0]
1004f176:	1dfb      	adds	r3, r7, #7
1004f178:	7818      	ldrb	r0, [r3, #0]
1004f17a:	2320      	movs	r3, #32
1004f17c:	18fb      	adds	r3, r7, r3
1004f17e:	781b      	ldrb	r3, [r3, #0]
1004f180:	9302      	str	r3, [sp, #8]
1004f182:	231c      	movs	r3, #28
1004f184:	18fb      	adds	r3, r7, r3
1004f186:	781b      	ldrb	r3, [r3, #0]
1004f188:	9301      	str	r3, [sp, #4]
1004f18a:	2318      	movs	r3, #24
1004f18c:	18fb      	adds	r3, r7, r3
1004f18e:	781b      	ldrb	r3, [r3, #0]
1004f190:	9300      	str	r3, [sp, #0]
1004f192:	0023      	movs	r3, r4
1004f194:	f005 fb9e 	bl	100548d4 <aci_gap_set_security_requirements_api>
1004f198:	0003      	movs	r3, r0
                                                 SC_Support,
                                                 KeyPress_Notification_Support,
                                                 Min_Encryption_Key_Size,
                                                 Max_Encryption_Key_Size,
                                                 Pairing_Response);
}
1004f19a:	0018      	movs	r0, r3
1004f19c:	46bd      	mov	sp, r7
1004f19e:	b002      	add	sp, #8
1004f1a0:	bdb0      	pop	{r4, r5, r7, pc}

1004f1a2 <aci_gap_passkey_resp>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gap_passkey_resp(uint16_t Connection_Handle,
                                uint32_t Passkey)
{
1004f1a2:	b580      	push	{r7, lr}
1004f1a4:	b082      	sub	sp, #8
1004f1a6:	af00      	add	r7, sp, #0
1004f1a8:	0002      	movs	r2, r0
1004f1aa:	6039      	str	r1, [r7, #0]
1004f1ac:	1dbb      	adds	r3, r7, #6
1004f1ae:	801a      	strh	r2, [r3, #0]
    return aci_gap_passkey_resp_api(Connection_Handle,
1004f1b0:	683a      	ldr	r2, [r7, #0]
1004f1b2:	1dbb      	adds	r3, r7, #6
1004f1b4:	881b      	ldrh	r3, [r3, #0]
1004f1b6:	0011      	movs	r1, r2
1004f1b8:	0018      	movs	r0, r3
1004f1ba:	f005 fbcf 	bl	1005495c <aci_gap_passkey_resp_api>
1004f1be:	0003      	movs	r3, r0
                                    Passkey);
}
1004f1c0:	0018      	movs	r0, r3
1004f1c2:	46bd      	mov	sp, r7
1004f1c4:	b002      	add	sp, #8
1004f1c6:	bd80      	pop	{r7, pc}

1004f1c8 <aci_gatt_srv_add_service>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_service(ble_gatt_srv_def_t* Serv_p)
{
1004f1c8:	b580      	push	{r7, lr}
1004f1ca:	b082      	sub	sp, #8
1004f1cc:	af00      	add	r7, sp, #0
1004f1ce:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_add_service_api(Serv_p);
1004f1d0:	687b      	ldr	r3, [r7, #4]
1004f1d2:	0018      	movs	r0, r3
1004f1d4:	f005 fbce 	bl	10054974 <aci_gatt_srv_add_service_api>
1004f1d8:	0003      	movs	r3, r0
}
1004f1da:	0018      	movs	r0, r3
1004f1dc:	46bd      	mov	sp, r7
1004f1de:	b002      	add	sp, #8
1004f1e0:	bd80      	pop	{r7, pc}

1004f1e2 <aci_gatt_srv_get_service_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_service_handle(ble_gatt_srv_def_t* Serv_p)
{
1004f1e2:	b580      	push	{r7, lr}
1004f1e4:	b082      	sub	sp, #8
1004f1e6:	af00      	add	r7, sp, #0
1004f1e8:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_service_handle_api(Serv_p);
1004f1ea:	687b      	ldr	r3, [r7, #4]
1004f1ec:	0018      	movs	r0, r3
1004f1ee:	f005 fbc5 	bl	1005497c <aci_gatt_srv_get_service_handle_api>
1004f1f2:	0003      	movs	r3, r0
}
1004f1f4:	0018      	movs	r0, r3
1004f1f6:	46bd      	mov	sp, r7
1004f1f8:	b002      	add	sp, #8
1004f1fa:	bd80      	pop	{r7, pc}

1004f1fc <aci_gatt_srv_add_char>:

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
tBleStatus aci_gatt_srv_add_char(ble_gatt_chr_def_t* Char_p,
                                 uint16_t Serv_Attr_H)
{
1004f1fc:	b580      	push	{r7, lr}
1004f1fe:	b082      	sub	sp, #8
1004f200:	af00      	add	r7, sp, #0
1004f202:	6078      	str	r0, [r7, #4]
1004f204:	000a      	movs	r2, r1
1004f206:	1cbb      	adds	r3, r7, #2
1004f208:	801a      	strh	r2, [r3, #0]
    return aci_gatt_srv_add_char_api(Char_p,
1004f20a:	1cbb      	adds	r3, r7, #2
1004f20c:	881a      	ldrh	r2, [r3, #0]
1004f20e:	687b      	ldr	r3, [r7, #4]
1004f210:	0011      	movs	r1, r2
1004f212:	0018      	movs	r0, r3
1004f214:	f005 fbb6 	bl	10054984 <aci_gatt_srv_add_char_api>
1004f218:	0003      	movs	r3, r0
                                     Serv_Attr_H);
}
1004f21a:	0018      	movs	r0, r3
1004f21c:	46bd      	mov	sp, r7
1004f21e:	b002      	add	sp, #8
1004f220:	bd80      	pop	{r7, pc}

1004f222 <aci_gatt_srv_get_char_decl_handle>:
#endif /* (BLESTACK_CONTROLLER_ONLY == 0) */

#if (BLESTACK_CONTROLLER_ONLY == 0)
#if (CONNECTION_ENABLED == 1)
uint16_t aci_gatt_srv_get_char_decl_handle(ble_gatt_chr_def_t* Char_p)
{
1004f222:	b580      	push	{r7, lr}
1004f224:	b082      	sub	sp, #8
1004f226:	af00      	add	r7, sp, #0
1004f228:	6078      	str	r0, [r7, #4]
    return aci_gatt_srv_get_char_decl_handle_api(Char_p);
1004f22a:	687b      	ldr	r3, [r7, #4]
1004f22c:	0018      	movs	r0, r3
1004f22e:	f005 fbad 	bl	1005498c <aci_gatt_srv_get_char_decl_handle_api>
1004f232:	0003      	movs	r3, r0
}
1004f234:	0018      	movs	r0, r3
1004f236:	46bd      	mov	sp, r7
1004f238:	b002      	add	sp, #8
1004f23a:	bd80      	pop	{r7, pc}

1004f23c <aci_gatt_srv_resp>:
                             uint16_t CID,
                             uint16_t Attr_Handle,
                             uint8_t Error_Code,
                             uint16_t Data_Len,
                             uint8_t* Data_p)
{
1004f23c:	b5b0      	push	{r4, r5, r7, lr}
1004f23e:	b084      	sub	sp, #16
1004f240:	af02      	add	r7, sp, #8
1004f242:	0005      	movs	r5, r0
1004f244:	000c      	movs	r4, r1
1004f246:	0010      	movs	r0, r2
1004f248:	0019      	movs	r1, r3
1004f24a:	1dbb      	adds	r3, r7, #6
1004f24c:	1c2a      	adds	r2, r5, #0
1004f24e:	801a      	strh	r2, [r3, #0]
1004f250:	1d3b      	adds	r3, r7, #4
1004f252:	1c22      	adds	r2, r4, #0
1004f254:	801a      	strh	r2, [r3, #0]
1004f256:	1cbb      	adds	r3, r7, #2
1004f258:	1c02      	adds	r2, r0, #0
1004f25a:	801a      	strh	r2, [r3, #0]
1004f25c:	1c7b      	adds	r3, r7, #1
1004f25e:	1c0a      	adds	r2, r1, #0
1004f260:	701a      	strb	r2, [r3, #0]
    return aci_gatt_srv_resp_api(Connection_Handle,
1004f262:	1c7b      	adds	r3, r7, #1
1004f264:	781c      	ldrb	r4, [r3, #0]
1004f266:	1cbb      	adds	r3, r7, #2
1004f268:	881a      	ldrh	r2, [r3, #0]
1004f26a:	1d3b      	adds	r3, r7, #4
1004f26c:	8819      	ldrh	r1, [r3, #0]
1004f26e:	1dbb      	adds	r3, r7, #6
1004f270:	8818      	ldrh	r0, [r3, #0]
1004f272:	69fb      	ldr	r3, [r7, #28]
1004f274:	9301      	str	r3, [sp, #4]
1004f276:	2318      	movs	r3, #24
1004f278:	18fb      	adds	r3, r7, r3
1004f27a:	881b      	ldrh	r3, [r3, #0]
1004f27c:	9300      	str	r3, [sp, #0]
1004f27e:	0023      	movs	r3, r4
1004f280:	f005 fb88 	bl	10054994 <aci_gatt_srv_resp_api>
1004f284:	0003      	movs	r3, r0
                                 CID,
                                 Attr_Handle,
                                 Error_Code,
                                 Data_Len,
                                 Data_p);
}
1004f286:	0018      	movs	r0, r3
1004f288:	46bd      	mov	sp, r7
1004f28a:	b002      	add	sp, #8
1004f28c:	bdb0      	pop	{r4, r5, r7, pc}

1004f28e <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Connection_Interval_Min,
                                                     uint16_t Connection_Interval_Max,
                                                     uint16_t Peripheral_Latency,
                                                     uint16_t Timeout_Multiplier)
{
1004f28e:	b5b0      	push	{r4, r5, r7, lr}
1004f290:	b084      	sub	sp, #16
1004f292:	af02      	add	r7, sp, #8
1004f294:	0005      	movs	r5, r0
1004f296:	000c      	movs	r4, r1
1004f298:	0010      	movs	r0, r2
1004f29a:	0019      	movs	r1, r3
1004f29c:	1dbb      	adds	r3, r7, #6
1004f29e:	1c2a      	adds	r2, r5, #0
1004f2a0:	801a      	strh	r2, [r3, #0]
1004f2a2:	1d3b      	adds	r3, r7, #4
1004f2a4:	1c22      	adds	r2, r4, #0
1004f2a6:	801a      	strh	r2, [r3, #0]
1004f2a8:	1cbb      	adds	r3, r7, #2
1004f2aa:	1c02      	adds	r2, r0, #0
1004f2ac:	801a      	strh	r2, [r3, #0]
1004f2ae:	003b      	movs	r3, r7
1004f2b0:	1c0a      	adds	r2, r1, #0
1004f2b2:	801a      	strh	r2, [r3, #0]
    return aci_l2cap_connection_parameter_update_req_api(Connection_Handle,
1004f2b4:	003b      	movs	r3, r7
1004f2b6:	881c      	ldrh	r4, [r3, #0]
1004f2b8:	1cbb      	adds	r3, r7, #2
1004f2ba:	881a      	ldrh	r2, [r3, #0]
1004f2bc:	1d3b      	adds	r3, r7, #4
1004f2be:	8819      	ldrh	r1, [r3, #0]
1004f2c0:	1dbb      	adds	r3, r7, #6
1004f2c2:	8818      	ldrh	r0, [r3, #0]
1004f2c4:	2318      	movs	r3, #24
1004f2c6:	18fb      	adds	r3, r7, r3
1004f2c8:	881b      	ldrh	r3, [r3, #0]
1004f2ca:	9300      	str	r3, [sp, #0]
1004f2cc:	0023      	movs	r3, r4
1004f2ce:	f005 fcd7 	bl	10054c80 <aci_l2cap_connection_parameter_update_req_api>
1004f2d2:	0003      	movs	r3, r0
                                                         Connection_Interval_Min,
                                                         Connection_Interval_Max,
                                                         Peripheral_Latency,
                                                         Timeout_Multiplier);
}
1004f2d4:	0018      	movs	r0, r3
1004f2d6:	46bd      	mov	sp, r7
1004f2d8:	b002      	add	sp, #8
1004f2da:	bdb0      	pop	{r4, r5, r7, pc}

1004f2dc <AES_128_HW_enc>:

/* Implementation of the AES 128 required by the crypto library. */
void AES_128_HW_enc(const uint32_t *P_pInputBuffer,
                    uint32_t *P_pOutputBuffer,
                    const uint8_t *P_pKey)
{
1004f2dc:	b580      	push	{r7, lr}
1004f2de:	b094      	sub	sp, #80	@ 0x50
1004f2e0:	af00      	add	r7, sp, #0
1004f2e2:	60f8      	str	r0, [r7, #12]
1004f2e4:	60b9      	str	r1, [r7, #8]
1004f2e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp_key_32[4], input_32[4], output_32[4];
  uint8_t *tmp_key = (uint8_t *)tmp_key_32;
1004f2e8:	2330      	movs	r3, #48	@ 0x30
1004f2ea:	18fb      	adds	r3, r7, r3
1004f2ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *input = (uint8_t *)input_32;
1004f2ee:	2320      	movs	r3, #32
1004f2f0:	18fb      	adds	r3, r7, r3
1004f2f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *output = (uint8_t *)output_32;
1004f2f4:	2310      	movs	r3, #16
1004f2f6:	18fb      	adds	r3, r7, r3
1004f2f8:	643b      	str	r3, [r7, #64]	@ 0x40
  int32_t i;

  for (i = 0; i < 16; i++)
1004f2fa:	2300      	movs	r3, #0
1004f2fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f2fe:	e00d      	b.n	1004f31c <AES_128_HW_enc+0x40>
  {
    tmp_key[15 - i] =  P_pKey[i];
1004f300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f302:	687a      	ldr	r2, [r7, #4]
1004f304:	18d2      	adds	r2, r2, r3
1004f306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f308:	210f      	movs	r1, #15
1004f30a:	1acb      	subs	r3, r1, r3
1004f30c:	0019      	movs	r1, r3
1004f30e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
1004f310:	185b      	adds	r3, r3, r1
1004f312:	7812      	ldrb	r2, [r2, #0]
1004f314:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 16; i++)
1004f316:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f318:	3301      	adds	r3, #1
1004f31a:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f31e:	2b0f      	cmp	r3, #15
1004f320:	ddee      	ble.n	1004f300 <AES_128_HW_enc+0x24>
  }

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f322:	2300      	movs	r3, #0
1004f324:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f326:	e03d      	b.n	1004f3a4 <AES_128_HW_enc+0xc8>
  {
    LEW32_2_BUFFER(input, i * 4, P_pInputBuffer[3 - i]);
1004f328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f32a:	2203      	movs	r2, #3
1004f32c:	1ad3      	subs	r3, r2, r3
1004f32e:	009b      	lsls	r3, r3, #2
1004f330:	68fa      	ldr	r2, [r7, #12]
1004f332:	18d3      	adds	r3, r2, r3
1004f334:	681a      	ldr	r2, [r3, #0]
1004f336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f338:	009b      	lsls	r3, r3, #2
1004f33a:	0019      	movs	r1, r3
1004f33c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004f33e:	185b      	adds	r3, r3, r1
1004f340:	b2d2      	uxtb	r2, r2
1004f342:	701a      	strb	r2, [r3, #0]
1004f344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f346:	2203      	movs	r2, #3
1004f348:	1ad3      	subs	r3, r2, r3
1004f34a:	009b      	lsls	r3, r3, #2
1004f34c:	68fa      	ldr	r2, [r7, #12]
1004f34e:	18d3      	adds	r3, r2, r3
1004f350:	681b      	ldr	r3, [r3, #0]
1004f352:	0a19      	lsrs	r1, r3, #8
1004f354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f356:	009b      	lsls	r3, r3, #2
1004f358:	3301      	adds	r3, #1
1004f35a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f35c:	18d3      	adds	r3, r2, r3
1004f35e:	b2ca      	uxtb	r2, r1
1004f360:	701a      	strb	r2, [r3, #0]
1004f362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f364:	2203      	movs	r2, #3
1004f366:	1ad3      	subs	r3, r2, r3
1004f368:	009b      	lsls	r3, r3, #2
1004f36a:	68fa      	ldr	r2, [r7, #12]
1004f36c:	18d3      	adds	r3, r2, r3
1004f36e:	681b      	ldr	r3, [r3, #0]
1004f370:	0c19      	lsrs	r1, r3, #16
1004f372:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f374:	009b      	lsls	r3, r3, #2
1004f376:	3302      	adds	r3, #2
1004f378:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f37a:	18d3      	adds	r3, r2, r3
1004f37c:	b2ca      	uxtb	r2, r1
1004f37e:	701a      	strb	r2, [r3, #0]
1004f380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f382:	2203      	movs	r2, #3
1004f384:	1ad3      	subs	r3, r2, r3
1004f386:	009b      	lsls	r3, r3, #2
1004f388:	68fa      	ldr	r2, [r7, #12]
1004f38a:	18d3      	adds	r3, r2, r3
1004f38c:	681b      	ldr	r3, [r3, #0]
1004f38e:	0e19      	lsrs	r1, r3, #24
1004f390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f392:	009b      	lsls	r3, r3, #2
1004f394:	3303      	adds	r3, #3
1004f396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
1004f398:	18d3      	adds	r3, r2, r3
1004f39a:	b2ca      	uxtb	r2, r1
1004f39c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f39e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f3a0:	3301      	adds	r3, #1
1004f3a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f3a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f3a6:	2b03      	cmp	r3, #3
1004f3a8:	ddbe      	ble.n	1004f328 <AES_128_HW_enc+0x4c>
  }

  HW_AES_Encrypt(input_32, tmp_key_32, output_32);
1004f3aa:	2310      	movs	r3, #16
1004f3ac:	18fa      	adds	r2, r7, r3
1004f3ae:	2330      	movs	r3, #48	@ 0x30
1004f3b0:	18f9      	adds	r1, r7, r3
1004f3b2:	2320      	movs	r3, #32
1004f3b4:	18fb      	adds	r3, r7, r3
1004f3b6:	0018      	movs	r0, r3
1004f3b8:	f000 f894 	bl	1004f4e4 <HW_AES_Encrypt>

  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f3bc:	2300      	movs	r3, #0
1004f3be:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f3c0:	e028      	b.n	1004f414 <AES_128_HW_enc+0x138>
  {
    P_pOutputBuffer[3 - i] = BUFFER_2_LEW32(output, i * 4);
1004f3c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f3c4:	009b      	lsls	r3, r3, #2
1004f3c6:	3303      	adds	r3, #3
1004f3c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
1004f3ca:	18d3      	adds	r3, r2, r3
1004f3cc:	781b      	ldrb	r3, [r3, #0]
1004f3ce:	061a      	lsls	r2, r3, #24
1004f3d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f3d2:	009b      	lsls	r3, r3, #2
1004f3d4:	3302      	adds	r3, #2
1004f3d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004f3d8:	18cb      	adds	r3, r1, r3
1004f3da:	781b      	ldrb	r3, [r3, #0]
1004f3dc:	041b      	lsls	r3, r3, #16
1004f3de:	431a      	orrs	r2, r3
1004f3e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f3e2:	009b      	lsls	r3, r3, #2
1004f3e4:	3301      	adds	r3, #1
1004f3e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
1004f3e8:	18cb      	adds	r3, r1, r3
1004f3ea:	781b      	ldrb	r3, [r3, #0]
1004f3ec:	021b      	lsls	r3, r3, #8
1004f3ee:	431a      	orrs	r2, r3
1004f3f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f3f2:	009b      	lsls	r3, r3, #2
1004f3f4:	0019      	movs	r1, r3
1004f3f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
1004f3f8:	185b      	adds	r3, r3, r1
1004f3fa:	781b      	ldrb	r3, [r3, #0]
1004f3fc:	0018      	movs	r0, r3
1004f3fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f400:	2103      	movs	r1, #3
1004f402:	1acb      	subs	r3, r1, r3
1004f404:	009b      	lsls	r3, r3, #2
1004f406:	68b9      	ldr	r1, [r7, #8]
1004f408:	18cb      	adds	r3, r1, r3
1004f40a:	4302      	orrs	r2, r0
1004f40c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < AES_BLOCK_SIZE; i++)
1004f40e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f410:	3301      	adds	r3, #1
1004f412:	64fb      	str	r3, [r7, #76]	@ 0x4c
1004f414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
1004f416:	2b03      	cmp	r3, #3
1004f418:	ddd3      	ble.n	1004f3c2 <AES_128_HW_enc+0xe6>
  }
}
1004f41a:	46c0      	nop			@ (mov r8, r8)
1004f41c:	46c0      	nop			@ (mov r8, r8)
1004f41e:	46bd      	mov	sp, r7
1004f420:	b014      	add	sp, #80	@ 0x50
1004f422:	bd80      	pop	{r7, pc}

1004f424 <LL_APB2_GRP1_EnableClock>:
{
1004f424:	b580      	push	{r7, lr}
1004f426:	b084      	sub	sp, #16
1004f428:	af00      	add	r7, sp, #0
1004f42a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
1004f42c:	4b07      	ldr	r3, [pc, #28]	@ (1004f44c <LL_APB2_GRP1_EnableClock+0x28>)
1004f42e:	6e19      	ldr	r1, [r3, #96]	@ 0x60
1004f430:	4b06      	ldr	r3, [pc, #24]	@ (1004f44c <LL_APB2_GRP1_EnableClock+0x28>)
1004f432:	687a      	ldr	r2, [r7, #4]
1004f434:	430a      	orrs	r2, r1
1004f436:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
1004f438:	4b04      	ldr	r3, [pc, #16]	@ (1004f44c <LL_APB2_GRP1_EnableClock+0x28>)
1004f43a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004f43c:	687a      	ldr	r2, [r7, #4]
1004f43e:	4013      	ands	r3, r2
1004f440:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004f442:	68fb      	ldr	r3, [r7, #12]
}
1004f444:	46c0      	nop			@ (mov r8, r8)
1004f446:	46bd      	mov	sp, r7
1004f448:	b004      	add	sp, #16
1004f44a:	bd80      	pop	{r7, pc}
1004f44c:	48400000 	.word	0x48400000

1004f450 <LL_APB2_GRP1_IsEnabledClock>:
{
1004f450:	b580      	push	{r7, lr}
1004f452:	b082      	sub	sp, #8
1004f454:	af00      	add	r7, sp, #0
1004f456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB2ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
1004f458:	4b06      	ldr	r3, [pc, #24]	@ (1004f474 <LL_APB2_GRP1_IsEnabledClock+0x24>)
1004f45a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
1004f45c:	687a      	ldr	r2, [r7, #4]
1004f45e:	4013      	ands	r3, r2
1004f460:	687a      	ldr	r2, [r7, #4]
1004f462:	429a      	cmp	r2, r3
1004f464:	d101      	bne.n	1004f46a <LL_APB2_GRP1_IsEnabledClock+0x1a>
1004f466:	2301      	movs	r3, #1
1004f468:	e000      	b.n	1004f46c <LL_APB2_GRP1_IsEnabledClock+0x1c>
1004f46a:	2300      	movs	r3, #0
}
1004f46c:	0018      	movs	r0, r3
1004f46e:	46bd      	mov	sp, r7
1004f470:	b002      	add	sp, #8
1004f472:	bd80      	pop	{r7, pc}
1004f474:	48400000 	.word	0x48400000

1004f478 <LL_APB2_GRP1_ForceReset>:
{
1004f478:	b580      	push	{r7, lr}
1004f47a:	b082      	sub	sp, #8
1004f47c:	af00      	add	r7, sp, #0
1004f47e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
1004f480:	4b04      	ldr	r3, [pc, #16]	@ (1004f494 <LL_APB2_GRP1_ForceReset+0x1c>)
1004f482:	6c19      	ldr	r1, [r3, #64]	@ 0x40
1004f484:	4b03      	ldr	r3, [pc, #12]	@ (1004f494 <LL_APB2_GRP1_ForceReset+0x1c>)
1004f486:	687a      	ldr	r2, [r7, #4]
1004f488:	430a      	orrs	r2, r1
1004f48a:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004f48c:	46c0      	nop			@ (mov r8, r8)
1004f48e:	46bd      	mov	sp, r7
1004f490:	b002      	add	sp, #8
1004f492:	bd80      	pop	{r7, pc}
1004f494:	48400000 	.word	0x48400000

1004f498 <LL_APB2_GRP1_ReleaseReset>:
{
1004f498:	b580      	push	{r7, lr}
1004f49a:	b082      	sub	sp, #8
1004f49c:	af00      	add	r7, sp, #0
1004f49e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
1004f4a0:	4b05      	ldr	r3, [pc, #20]	@ (1004f4b8 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004f4a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
1004f4a4:	687b      	ldr	r3, [r7, #4]
1004f4a6:	43d9      	mvns	r1, r3
1004f4a8:	4b03      	ldr	r3, [pc, #12]	@ (1004f4b8 <LL_APB2_GRP1_ReleaseReset+0x20>)
1004f4aa:	400a      	ands	r2, r1
1004f4ac:	641a      	str	r2, [r3, #64]	@ 0x40
}
1004f4ae:	46c0      	nop			@ (mov r8, r8)
1004f4b0:	46bd      	mov	sp, r7
1004f4b2:	b002      	add	sp, #8
1004f4b4:	bd80      	pop	{r7, pc}
1004f4b6:	46c0      	nop			@ (mov r8, r8)
1004f4b8:	48400000 	.word	0x48400000

1004f4bc <HW_AES_Init>:
/** @defgroup AES_Manager_Public_Functions Public Functions
* @{
*/

HW_AES_ResultStatus HW_AES_Init(void)
{
1004f4bc:	b580      	push	{r7, lr}
1004f4be:	af00      	add	r7, sp, #0
  if(!LL_APB2_GRP1_IsEnabledClock(LL_APB2_GRP1_PERIPH_MRBLE))
1004f4c0:	2001      	movs	r0, #1
1004f4c2:	f7ff ffc5 	bl	1004f450 <LL_APB2_GRP1_IsEnabledClock>
1004f4c6:	1e03      	subs	r3, r0, #0
1004f4c8:	d108      	bne.n	1004f4dc <HW_AES_Init+0x20>
  {
    /* Peripheral reset */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004f4ca:	2001      	movs	r0, #1
1004f4cc:	f7ff ffd4 	bl	1004f478 <LL_APB2_GRP1_ForceReset>
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_MRBLE);
1004f4d0:	2001      	movs	r0, #1
1004f4d2:	f7ff ffe1 	bl	1004f498 <LL_APB2_GRP1_ReleaseReset>

    /* Enable MR_BLE's clock */
    LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_MRBLE);
1004f4d6:	2001      	movs	r0, #1
1004f4d8:	f7ff ffa4 	bl	1004f424 <LL_APB2_GRP1_EnableClock>
  }
  return HW_AES_SUCCESS;
1004f4dc:	2300      	movs	r3, #0
}
1004f4de:	0018      	movs	r0, r3
1004f4e0:	46bd      	mov	sp, r7
1004f4e2:	bd80      	pop	{r7, pc}

1004f4e4 <HW_AES_Encrypt>:
{
  return HW_AES_SUCCESS;
}

HW_AES_ResultStatus HW_AES_Encrypt(const uint32_t *plainTextData, const uint32_t *key, uint32_t *encryptedData)
{
1004f4e4:	b590      	push	{r4, r7, lr}
1004f4e6:	b087      	sub	sp, #28
1004f4e8:	af00      	add	r7, sp, #0
1004f4ea:	60f8      	str	r0, [r7, #12]
1004f4ec:	60b9      	str	r1, [r7, #8]
1004f4ee:	607a      	str	r2, [r7, #4]
  /* Counter to signal interruption by a higher priority routine. */
  static volatile uint8_t start_cnt;
  uint8_t priv_start_cnt;

  start_cnt++;
1004f4f0:	4b31      	ldr	r3, [pc, #196]	@ (1004f5b8 <HW_AES_Encrypt+0xd4>)
1004f4f2:	781b      	ldrb	r3, [r3, #0]
1004f4f4:	b2db      	uxtb	r3, r3
1004f4f6:	3301      	adds	r3, #1
1004f4f8:	b2da      	uxtb	r2, r3
1004f4fa:	4b2f      	ldr	r3, [pc, #188]	@ (1004f5b8 <HW_AES_Encrypt+0xd4>)
1004f4fc:	701a      	strb	r2, [r3, #0]

  do
  {
    priv_start_cnt = start_cnt;
1004f4fe:	2417      	movs	r4, #23
1004f500:	193b      	adds	r3, r7, r4
1004f502:	4a2d      	ldr	r2, [pc, #180]	@ (1004f5b8 <HW_AES_Encrypt+0xd4>)
1004f504:	7812      	ldrb	r2, [r2, #0]
1004f506:	701a      	strb	r2, [r3, #0]
    /* Starting from this point, any call to HW_AES_Encrypt will change start_cnt. */

    /* Write the Key in the BLE register */
    BLUE->MANAESKEY0REG = key[0];
1004f508:	23c0      	movs	r3, #192	@ 0xc0
1004f50a:	05db      	lsls	r3, r3, #23
1004f50c:	68ba      	ldr	r2, [r7, #8]
1004f50e:	6812      	ldr	r2, [r2, #0]
1004f510:	629a      	str	r2, [r3, #40]	@ 0x28
    BLUE->MANAESKEY1REG = key[1];
1004f512:	68bb      	ldr	r3, [r7, #8]
1004f514:	1d1a      	adds	r2, r3, #4
1004f516:	23c0      	movs	r3, #192	@ 0xc0
1004f518:	05db      	lsls	r3, r3, #23
1004f51a:	6812      	ldr	r2, [r2, #0]
1004f51c:	62da      	str	r2, [r3, #44]	@ 0x2c
    BLUE->MANAESKEY2REG = key[2];
1004f51e:	68bb      	ldr	r3, [r7, #8]
1004f520:	3308      	adds	r3, #8
1004f522:	001a      	movs	r2, r3
1004f524:	23c0      	movs	r3, #192	@ 0xc0
1004f526:	05db      	lsls	r3, r3, #23
1004f528:	6812      	ldr	r2, [r2, #0]
1004f52a:	631a      	str	r2, [r3, #48]	@ 0x30
    BLUE->MANAESKEY3REG = key[3];
1004f52c:	68bb      	ldr	r3, [r7, #8]
1004f52e:	330c      	adds	r3, #12
1004f530:	001a      	movs	r2, r3
1004f532:	23c0      	movs	r3, #192	@ 0xc0
1004f534:	05db      	lsls	r3, r3, #23
1004f536:	6812      	ldr	r2, [r2, #0]
1004f538:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Write the plain text data in the BLE register */
    BLUE->MANAESCLEARTEXT0REG = plainTextData[0];
1004f53a:	23c0      	movs	r3, #192	@ 0xc0
1004f53c:	05db      	lsls	r3, r3, #23
1004f53e:	68fa      	ldr	r2, [r7, #12]
1004f540:	6812      	ldr	r2, [r2, #0]
1004f542:	639a      	str	r2, [r3, #56]	@ 0x38
    BLUE->MANAESCLEARTEXT1REG = plainTextData[1];
1004f544:	68fb      	ldr	r3, [r7, #12]
1004f546:	1d1a      	adds	r2, r3, #4
1004f548:	23c0      	movs	r3, #192	@ 0xc0
1004f54a:	05db      	lsls	r3, r3, #23
1004f54c:	6812      	ldr	r2, [r2, #0]
1004f54e:	63da      	str	r2, [r3, #60]	@ 0x3c
    BLUE->MANAESCLEARTEXT2REG = plainTextData[2];
1004f550:	68fb      	ldr	r3, [r7, #12]
1004f552:	3308      	adds	r3, #8
1004f554:	001a      	movs	r2, r3
1004f556:	23c0      	movs	r3, #192	@ 0xc0
1004f558:	05db      	lsls	r3, r3, #23
1004f55a:	6812      	ldr	r2, [r2, #0]
1004f55c:	641a      	str	r2, [r3, #64]	@ 0x40
    BLUE->MANAESCLEARTEXT3REG = plainTextData[3];
1004f55e:	68fb      	ldr	r3, [r7, #12]
1004f560:	330c      	adds	r3, #12
1004f562:	001a      	movs	r2, r3
1004f564:	23c0      	movs	r3, #192	@ 0xc0
1004f566:	05db      	lsls	r3, r3, #23
1004f568:	6812      	ldr	r2, [r2, #0]
1004f56a:	645a      	str	r2, [r3, #68]	@ 0x44

    HW_AES_Start();
1004f56c:	f000 f826 	bl	1004f5bc <HW_AES_Start>

    /* Read the plain text data in the BLE register */
    encryptedData[0] = BLUE->MANAESCIPHERTEXT0REG;
1004f570:	23c0      	movs	r3, #192	@ 0xc0
1004f572:	05db      	lsls	r3, r3, #23
1004f574:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
1004f576:	687b      	ldr	r3, [r7, #4]
1004f578:	601a      	str	r2, [r3, #0]
    encryptedData[1] = BLUE->MANAESCIPHERTEXT1REG;
1004f57a:	23c0      	movs	r3, #192	@ 0xc0
1004f57c:	05da      	lsls	r2, r3, #23
1004f57e:	687b      	ldr	r3, [r7, #4]
1004f580:	3304      	adds	r3, #4
1004f582:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
1004f584:	601a      	str	r2, [r3, #0]
    encryptedData[2] = BLUE->MANAESCIPHERTEXT2REG;
1004f586:	23c0      	movs	r3, #192	@ 0xc0
1004f588:	05da      	lsls	r2, r3, #23
1004f58a:	687b      	ldr	r3, [r7, #4]
1004f58c:	3308      	adds	r3, #8
1004f58e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
1004f590:	601a      	str	r2, [r3, #0]
    encryptedData[3] = BLUE->MANAESCIPHERTEXT3REG;
1004f592:	23c0      	movs	r3, #192	@ 0xc0
1004f594:	05da      	lsls	r2, r3, #23
1004f596:	687b      	ldr	r3, [r7, #4]
1004f598:	330c      	adds	r3, #12
1004f59a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
1004f59c:	601a      	str	r2, [r3, #0]

  } while (priv_start_cnt != start_cnt);
1004f59e:	4b06      	ldr	r3, [pc, #24]	@ (1004f5b8 <HW_AES_Encrypt+0xd4>)
1004f5a0:	781b      	ldrb	r3, [r3, #0]
1004f5a2:	b2db      	uxtb	r3, r3
1004f5a4:	193a      	adds	r2, r7, r4
1004f5a6:	7812      	ldrb	r2, [r2, #0]
1004f5a8:	429a      	cmp	r2, r3
1004f5aa:	d1a8      	bne.n	1004f4fe <HW_AES_Encrypt+0x1a>

  return HW_AES_SUCCESS;
1004f5ac:	2300      	movs	r3, #0
}
1004f5ae:	0018      	movs	r0, r3
1004f5b0:	46bd      	mov	sp, r7
1004f5b2:	b007      	add	sp, #28
1004f5b4:	bd90      	pop	{r4, r7, pc}
1004f5b6:	46c0      	nop			@ (mov r8, r8)
1004f5b8:	20002910 	.word	0x20002910

1004f5bc <HW_AES_Start>:
 * @param  None
 *
 * @retval i
 */
__STATIC_INLINE uint8_t HW_AES_Start(void)
{
1004f5bc:	b580      	push	{r7, lr}
1004f5be:	b082      	sub	sp, #8
1004f5c0:	af00      	add	r7, sp, #0
    volatile uint8_t i = 100U;
1004f5c2:	1dfb      	adds	r3, r7, #7
1004f5c4:	2264      	movs	r2, #100	@ 0x64
1004f5c6:	701a      	strb	r2, [r3, #0]

    /* Start AES encryption */
    LL_AES_StartManualEncription(BLUE);
1004f5c8:	23c0      	movs	r3, #192	@ 0xc0
1004f5ca:	05db      	lsls	r3, r3, #23
1004f5cc:	0018      	movs	r0, r3
1004f5ce:	f000 f81c 	bl	1004f60a <LL_AES_StartManualEncription>
    do
    {
        i--;
1004f5d2:	1dfb      	adds	r3, r7, #7
1004f5d4:	781b      	ldrb	r3, [r3, #0]
1004f5d6:	b2db      	uxtb	r3, r3
1004f5d8:	3b01      	subs	r3, #1
1004f5da:	b2da      	uxtb	r2, r3
1004f5dc:	1dfb      	adds	r3, r7, #7
1004f5de:	701a      	strb	r2, [r3, #0]
        if( !LL_AES_IsBusy(BLUE) )
1004f5e0:	23c0      	movs	r3, #192	@ 0xc0
1004f5e2:	05db      	lsls	r3, r3, #23
1004f5e4:	0018      	movs	r0, r3
1004f5e6:	f000 f81e 	bl	1004f626 <LL_AES_IsBusy>
1004f5ea:	1e03      	subs	r3, r0, #0
1004f5ec:	d005      	beq.n	1004f5fa <HW_AES_Start+0x3e>
        {
            break;
        }
    } while (i != 0U);
1004f5ee:	1dfb      	adds	r3, r7, #7
1004f5f0:	781b      	ldrb	r3, [r3, #0]
1004f5f2:	b2db      	uxtb	r3, r3
1004f5f4:	2b00      	cmp	r3, #0
1004f5f6:	d1ec      	bne.n	1004f5d2 <HW_AES_Start+0x16>
1004f5f8:	e000      	b.n	1004f5fc <HW_AES_Start+0x40>
            break;
1004f5fa:	46c0      	nop			@ (mov r8, r8)

    return i;
1004f5fc:	1dfb      	adds	r3, r7, #7
1004f5fe:	781b      	ldrb	r3, [r3, #0]
1004f600:	b2db      	uxtb	r3, r3
}
1004f602:	0018      	movs	r0, r3
1004f604:	46bd      	mov	sp, r7
1004f606:	b002      	add	sp, #8
1004f608:	bd80      	pop	{r7, pc}

1004f60a <LL_AES_StartManualEncription>:
  * @rmtoll MANAESCMDREG          START         LL_AES_StartManualEncription
  * @param  BLUEx BLUE Instance
  * @retval None
  */
__STATIC_INLINE void LL_AES_StartManualEncription(BLUE_TypeDef *BLUEx)
{
1004f60a:	b580      	push	{r7, lr}
1004f60c:	b082      	sub	sp, #8
1004f60e:	af00      	add	r7, sp, #0
1004f610:	6078      	str	r0, [r7, #4]
  SET_BIT(BLUEx->MANAESCMDREG, BLUE_MANAESCMDREG_START);
1004f612:	687b      	ldr	r3, [r7, #4]
1004f614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
1004f616:	2201      	movs	r2, #1
1004f618:	431a      	orrs	r2, r3
1004f61a:	687b      	ldr	r3, [r7, #4]
1004f61c:	659a      	str	r2, [r3, #88]	@ 0x58
}
1004f61e:	46c0      	nop			@ (mov r8, r8)
1004f620:	46bd      	mov	sp, r7
1004f622:	b002      	add	sp, #8
1004f624:	bd80      	pop	{r7, pc}

1004f626 <LL_AES_IsBusy>:
  * @rmtoll MANAESSTATREG          BUSY         LL_AES_IsBusy
  * @param  BLUEx BLUE Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_AES_IsBusy(BLUE_TypeDef *BLUEx)
{
1004f626:	b580      	push	{r7, lr}
1004f628:	b082      	sub	sp, #8
1004f62a:	af00      	add	r7, sp, #0
1004f62c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(BLUEx->MANAESSTATREG, BLUE_MANAESSTATREG_BUSY) == (BLUE_MANAESSTATREG_BUSY)) ? 1U : 0U);
1004f62e:	687b      	ldr	r3, [r7, #4]
1004f630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
1004f632:	2201      	movs	r2, #1
1004f634:	4013      	ands	r3, r2
1004f636:	2b01      	cmp	r3, #1
1004f638:	d101      	bne.n	1004f63e <LL_AES_IsBusy+0x18>
1004f63a:	2301      	movs	r3, #1
1004f63c:	e000      	b.n	1004f640 <LL_AES_IsBusy+0x1a>
1004f63e:	2300      	movs	r3, #0
}
1004f640:	0018      	movs	r0, r3
1004f642:	46bd      	mov	sp, r7
1004f644:	b002      	add	sp, #8
1004f646:	bd80      	pop	{r7, pc}

1004f648 <LL_PKA_EnableIT_ADDRERR>:
  * @rmtoll CR           ADDRERRIE     LL_PKA_EnableIT_ADDRERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_ADDRERR(PKA_TypeDef *PKAx)
{
1004f648:	b580      	push	{r7, lr}
1004f64a:	b082      	sub	sp, #8
1004f64c:	af00      	add	r7, sp, #0
1004f64e:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_ADDRERRIE);
1004f650:	687b      	ldr	r3, [r7, #4]
1004f652:	681b      	ldr	r3, [r3, #0]
1004f654:	2280      	movs	r2, #128	@ 0x80
1004f656:	0352      	lsls	r2, r2, #13
1004f658:	431a      	orrs	r2, r3
1004f65a:	687b      	ldr	r3, [r7, #4]
1004f65c:	601a      	str	r2, [r3, #0]
}
1004f65e:	46c0      	nop			@ (mov r8, r8)
1004f660:	46bd      	mov	sp, r7
1004f662:	b002      	add	sp, #8
1004f664:	bd80      	pop	{r7, pc}

1004f666 <LL_PKA_EnableIT_RAMERR>:
  * @rmtoll CR           RAMERRIE      LL_PKA_EnableIT_RAMERR
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_RAMERR(PKA_TypeDef *PKAx)
{
1004f666:	b580      	push	{r7, lr}
1004f668:	b082      	sub	sp, #8
1004f66a:	af00      	add	r7, sp, #0
1004f66c:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_RAMERRIE);
1004f66e:	687b      	ldr	r3, [r7, #4]
1004f670:	681b      	ldr	r3, [r3, #0]
1004f672:	2280      	movs	r2, #128	@ 0x80
1004f674:	0312      	lsls	r2, r2, #12
1004f676:	431a      	orrs	r2, r3
1004f678:	687b      	ldr	r3, [r7, #4]
1004f67a:	601a      	str	r2, [r3, #0]
}
1004f67c:	46c0      	nop			@ (mov r8, r8)
1004f67e:	46bd      	mov	sp, r7
1004f680:	b002      	add	sp, #8
1004f682:	bd80      	pop	{r7, pc}

1004f684 <LL_PKA_EnableIT_PROCEND>:
  * @rmtoll CR           PROCENDIE     LL_PKA_EnableIT_PROCEND
  * @param  PKAx PKA Instance.
  * @retval None
  */
__STATIC_INLINE void LL_PKA_EnableIT_PROCEND(PKA_TypeDef *PKAx)
{
1004f684:	b580      	push	{r7, lr}
1004f686:	b082      	sub	sp, #8
1004f688:	af00      	add	r7, sp, #0
1004f68a:	6078      	str	r0, [r7, #4]
  SET_BIT(PKAx->CR, PKA_CR_PROCENDIE);
1004f68c:	687b      	ldr	r3, [r7, #4]
1004f68e:	681b      	ldr	r3, [r3, #0]
1004f690:	2280      	movs	r2, #128	@ 0x80
1004f692:	0292      	lsls	r2, r2, #10
1004f694:	431a      	orrs	r2, r3
1004f696:	687b      	ldr	r3, [r7, #4]
1004f698:	601a      	str	r2, [r3, #0]
}
1004f69a:	46c0      	nop			@ (mov r8, r8)
1004f69c:	46bd      	mov	sp, r7
1004f69e:	b002      	add	sp, #8
1004f6a0:	bd80      	pop	{r7, pc}
	...

1004f6a4 <HW_PKA_Init>:
}

#endif /* STM32WB06 STM32WB07 */

void HW_PKA_Init(void)
{
1004f6a4:	b580      	push	{r7, lr}
1004f6a6:	af00      	add	r7, sp, #0
  PKAMGR_Init();
1004f6a8:	f001 fc98 	bl	10050fdc <PKAMGR_Init>
  /* Activate interrupts */
  LL_PKA_EnableIT_ADDRERR(PKA);
1004f6ac:	4b07      	ldr	r3, [pc, #28]	@ (1004f6cc <HW_PKA_Init+0x28>)
1004f6ae:	0018      	movs	r0, r3
1004f6b0:	f7ff ffca 	bl	1004f648 <LL_PKA_EnableIT_ADDRERR>
  LL_PKA_EnableIT_RAMERR(PKA);
1004f6b4:	4b05      	ldr	r3, [pc, #20]	@ (1004f6cc <HW_PKA_Init+0x28>)
1004f6b6:	0018      	movs	r0, r3
1004f6b8:	f7ff ffd5 	bl	1004f666 <LL_PKA_EnableIT_RAMERR>
  LL_PKA_EnableIT_PROCEND(PKA);
1004f6bc:	4b03      	ldr	r3, [pc, #12]	@ (1004f6cc <HW_PKA_Init+0x28>)
1004f6be:	0018      	movs	r0, r3
1004f6c0:	f7ff ffe0 	bl	1004f684 <LL_PKA_EnableIT_PROCEND>
}
1004f6c4:	46c0      	nop			@ (mov r8, r8)
1004f6c6:	46bd      	mov	sp, r7
1004f6c8:	bd80      	pop	{r7, pc}
1004f6ca:	46c0      	nop			@ (mov r8, r8)
1004f6cc:	48300000 	.word	0x48300000

1004f6d0 <LL_AHB1_GRP1_EnableClock>:
{
1004f6d0:	b580      	push	{r7, lr}
1004f6d2:	b084      	sub	sp, #16
1004f6d4:	af00      	add	r7, sp, #0
1004f6d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
1004f6d8:	4b07      	ldr	r3, [pc, #28]	@ (1004f6f8 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f6da:	6d19      	ldr	r1, [r3, #80]	@ 0x50
1004f6dc:	4b06      	ldr	r3, [pc, #24]	@ (1004f6f8 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f6de:	687a      	ldr	r2, [r7, #4]
1004f6e0:	430a      	orrs	r2, r1
1004f6e2:	651a      	str	r2, [r3, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
1004f6e4:	4b04      	ldr	r3, [pc, #16]	@ (1004f6f8 <LL_AHB1_GRP1_EnableClock+0x28>)
1004f6e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
1004f6e8:	687a      	ldr	r2, [r7, #4]
1004f6ea:	4013      	ands	r3, r2
1004f6ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
1004f6ee:	68fb      	ldr	r3, [r7, #12]
}
1004f6f0:	46c0      	nop			@ (mov r8, r8)
1004f6f2:	46bd      	mov	sp, r7
1004f6f4:	b004      	add	sp, #16
1004f6f6:	bd80      	pop	{r7, pc}
1004f6f8:	48400000 	.word	0x48400000

1004f6fc <LL_RNG_Enable>:
  * @rmtoll CR           RNG_DIS         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
1004f6fc:	b580      	push	{r7, lr}
1004f6fe:	b082      	sub	sp, #8
1004f700:	af00      	add	r7, sp, #0
1004f702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RNGx->CR, RNG_CR_RNG_DIS);
1004f704:	687b      	ldr	r3, [r7, #4]
1004f706:	681b      	ldr	r3, [r3, #0]
1004f708:	2204      	movs	r2, #4
1004f70a:	4393      	bics	r3, r2
1004f70c:	001a      	movs	r2, r3
1004f70e:	687b      	ldr	r3, [r7, #4]
1004f710:	601a      	str	r2, [r3, #0]
}
1004f712:	46c0      	nop			@ (mov r8, r8)
1004f714:	46bd      	mov	sp, r7
1004f716:	b002      	add	sp, #8
1004f718:	bd80      	pop	{r7, pc}

1004f71a <LL_RNG_IsActiveFlag_RNGRDY>:
  * @rmtoll SR           RNGRDY          LL_RNG_IsActiveFlag_RNGRDY
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_RNGRDY(RNG_TypeDef *RNGx)
{
1004f71a:	b580      	push	{r7, lr}
1004f71c:	b082      	sub	sp, #8
1004f71e:	af00      	add	r7, sp, #0
1004f720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_RNGRDY) == (RNG_SR_RNGRDY)) ? 1UL : 0UL);
1004f722:	687b      	ldr	r3, [r7, #4]
1004f724:	685b      	ldr	r3, [r3, #4]
1004f726:	2201      	movs	r2, #1
1004f728:	4013      	ands	r3, r2
1004f72a:	2b01      	cmp	r3, #1
1004f72c:	d101      	bne.n	1004f732 <LL_RNG_IsActiveFlag_RNGRDY+0x18>
1004f72e:	2301      	movs	r3, #1
1004f730:	e000      	b.n	1004f734 <LL_RNG_IsActiveFlag_RNGRDY+0x1a>
1004f732:	2300      	movs	r3, #0
}
1004f734:	0018      	movs	r0, r3
1004f736:	46bd      	mov	sp, r7
1004f738:	b002      	add	sp, #8
1004f73a:	bd80      	pop	{r7, pc}

1004f73c <LL_RNG_IsActiveFlag_FAULT>:
  * @rmtoll SR           FAULT          LL_RNG_IsActiveFlag_FAULT
  * @param  RNGx RNG Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RNG_IsActiveFlag_FAULT(RNG_TypeDef *RNGx)
{
1004f73c:	b580      	push	{r7, lr}
1004f73e:	b082      	sub	sp, #8
1004f740:	af00      	add	r7, sp, #0
1004f742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RNGx->SR, RNG_SR_FAULT) == (RNG_SR_FAULT)) ? 1UL : 0UL);
1004f744:	687b      	ldr	r3, [r7, #4]
1004f746:	685b      	ldr	r3, [r3, #4]
1004f748:	2204      	movs	r2, #4
1004f74a:	4013      	ands	r3, r2
1004f74c:	2b04      	cmp	r3, #4
1004f74e:	d101      	bne.n	1004f754 <LL_RNG_IsActiveFlag_FAULT+0x18>
1004f750:	2301      	movs	r3, #1
1004f752:	e000      	b.n	1004f756 <LL_RNG_IsActiveFlag_FAULT+0x1a>
1004f754:	2300      	movs	r3, #0
}
1004f756:	0018      	movs	r0, r3
1004f758:	46bd      	mov	sp, r7
1004f75a:	b002      	add	sp, #8
1004f75c:	bd80      	pop	{r7, pc}

1004f75e <LL_RNG_ReadRandData16>:
  * @rmtoll DR           RNDATA        LL_RNG_ReadRandData16
  * @param  RNGx RNG Instance
  * @retval Generated 16-bit random value
  */
__STATIC_INLINE uint16_t LL_RNG_ReadRandData16(RNG_TypeDef *RNGx)
{
1004f75e:	b580      	push	{r7, lr}
1004f760:	b082      	sub	sp, #8
1004f762:	af00      	add	r7, sp, #0
1004f764:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_REG(RNGx->VAL));
1004f766:	687b      	ldr	r3, [r7, #4]
1004f768:	689b      	ldr	r3, [r3, #8]
1004f76a:	b29b      	uxth	r3, r3
}
1004f76c:	0018      	movs	r0, r3
1004f76e:	46bd      	mov	sp, r7
1004f770:	b002      	add	sp, #8
1004f772:	bd80      	pop	{r7, pc}

1004f774 <HW_RNG_Init>:
/** @defgroup RNG_Manager_Public_Functions Public Functions
* @{
*/

HW_RNG_ResultStatus HW_RNG_Init(void)
{
1004f774:	b580      	push	{r7, lr}
1004f776:	af00      	add	r7, sp, #0
  }
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_RNG);
1004f778:	2380      	movs	r3, #128	@ 0x80
1004f77a:	02db      	lsls	r3, r3, #11
1004f77c:	0018      	movs	r0, r3
1004f77e:	f7ff ffa7 	bl	1004f6d0 <LL_AHB1_GRP1_EnableClock>

  /* Initialize random numbers generation */
  LL_RNG_Enable(RNG);
1004f782:	4b0b      	ldr	r3, [pc, #44]	@ (1004f7b0 <HW_RNG_Init+0x3c>)
1004f784:	0018      	movs	r0, r3
1004f786:	f7ff ffb9 	bl	1004f6fc <LL_RNG_Enable>

  /* Wait for DRDY flag to be raised */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004f78a:	46c0      	nop			@ (mov r8, r8)
1004f78c:	4b08      	ldr	r3, [pc, #32]	@ (1004f7b0 <HW_RNG_Init+0x3c>)
1004f78e:	0018      	movs	r0, r3
1004f790:	f7ff ffc3 	bl	1004f71a <LL_RNG_IsActiveFlag_RNGRDY>
1004f794:	1e03      	subs	r3, r0, #0
1004f796:	d0f9      	beq.n	1004f78c <HW_RNG_Init+0x18>

  /* Check if error occurs */
  if (  LL_RNG_IsActiveFlag_FAULT(RNG)  )
1004f798:	4b05      	ldr	r3, [pc, #20]	@ (1004f7b0 <HW_RNG_Init+0x3c>)
1004f79a:	0018      	movs	r0, r3
1004f79c:	f7ff ffce 	bl	1004f73c <LL_RNG_IsActiveFlag_FAULT>
1004f7a0:	1e03      	subs	r3, r0, #0
1004f7a2:	d001      	beq.n	1004f7a8 <HW_RNG_Init+0x34>
  {
    /* Clock or Seed Error detected. Set LED to blinking mode (Error type)*/
    return HW_RNG_ERROR;
1004f7a4:	2301      	movs	r3, #1
1004f7a6:	e000      	b.n	1004f7aa <HW_RNG_Init+0x36>
  }

  /* Values of Generated Random numbers are now available in num array. */

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/
  return HW_RNG_SUCCESS;
1004f7a8:	2300      	movs	r3, #0
}
1004f7aa:	0018      	movs	r0, r3
1004f7ac:	46bd      	mov	sp, r7
1004f7ae:	bd80      	pop	{r7, pc}
1004f7b0:	48600000 	.word	0x48600000

1004f7b4 <HW_RNG_GetRandom16>:
 * @brief Provide a 16-bit true random number
 * @param num: pointer to the random value returned
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom16(uint16_t* num)
{
1004f7b4:	b580      	push	{r7, lr}
1004f7b6:	b082      	sub	sp, #8
1004f7b8:	af00      	add	r7, sp, #0
1004f7ba:	6078      	str	r0, [r7, #4]

#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004f7bc:	46c0      	nop			@ (mov r8, r8)
1004f7be:	4b09      	ldr	r3, [pc, #36]	@ (1004f7e4 <HW_RNG_GetRandom16+0x30>)
1004f7c0:	0018      	movs	r0, r3
1004f7c2:	f7ff ffaa 	bl	1004f71a <LL_RNG_IsActiveFlag_RNGRDY>
1004f7c6:	1e03      	subs	r3, r0, #0
1004f7c8:	d0f9      	beq.n	1004f7be <HW_RNG_GetRandom16+0xa>

  *num = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004f7ca:	4b06      	ldr	r3, [pc, #24]	@ (1004f7e4 <HW_RNG_GetRandom16+0x30>)
1004f7cc:	0018      	movs	r0, r3
1004f7ce:	f7ff ffc6 	bl	1004f75e <LL_RNG_ReadRandData16>
1004f7d2:	0003      	movs	r3, r0
1004f7d4:	001a      	movs	r2, r3
1004f7d6:	687b      	ldr	r3, [r7, #4]
1004f7d8:	801a      	strh	r2, [r3, #0]

#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004f7da:	2300      	movs	r3, #0
}
1004f7dc:	0018      	movs	r0, r3
1004f7de:	46bd      	mov	sp, r7
1004f7e0:	b002      	add	sp, #8
1004f7e2:	bd80      	pop	{r7, pc}
1004f7e4:	48600000 	.word	0x48600000

1004f7e8 <HW_RNG_GetRandom32>:
 * @param num: pointer to the random value returned
 *
 * @return error status: 0 = No error
 */
HW_RNG_ResultStatus HW_RNG_GetRandom32(uint32_t* num)
{
1004f7e8:	b590      	push	{r4, r7, lr}
1004f7ea:	b085      	sub	sp, #20
1004f7ec:	af00      	add	r7, sp, #0
1004f7ee:	6078      	str	r0, [r7, #4]

  *num = LL_RNG_READRANDDATA32(RNG);
#endif /* STM32WB09 */

#if defined (STM32WB07) || defined (STM32WB06) || defined(STM32WB05)
  uint16_t *num_16 = (uint16_t *) num;
1004f7f0:	687b      	ldr	r3, [r7, #4]
1004f7f2:	60fb      	str	r3, [r7, #12]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004f7f4:	46c0      	nop			@ (mov r8, r8)
1004f7f6:	4b11      	ldr	r3, [pc, #68]	@ (1004f83c <HW_RNG_GetRandom32+0x54>)
1004f7f8:	0018      	movs	r0, r3
1004f7fa:	f7ff ff8e 	bl	1004f71a <LL_RNG_IsActiveFlag_RNGRDY>
1004f7fe:	1e03      	subs	r3, r0, #0
1004f800:	d0f9      	beq.n	1004f7f6 <HW_RNG_GetRandom32+0xe>

  num_16[0] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004f802:	4b0e      	ldr	r3, [pc, #56]	@ (1004f83c <HW_RNG_GetRandom32+0x54>)
1004f804:	0018      	movs	r0, r3
1004f806:	f7ff ffaa 	bl	1004f75e <LL_RNG_ReadRandData16>
1004f80a:	0003      	movs	r3, r0
1004f80c:	001a      	movs	r2, r3
1004f80e:	68fb      	ldr	r3, [r7, #12]
1004f810:	801a      	strh	r2, [r3, #0]

  /* Wait for RNGRDY signal */
  while (!LL_RNG_IsActiveFlag_RNGRDY(RNG));
1004f812:	46c0      	nop			@ (mov r8, r8)
1004f814:	4b09      	ldr	r3, [pc, #36]	@ (1004f83c <HW_RNG_GetRandom32+0x54>)
1004f816:	0018      	movs	r0, r3
1004f818:	f7ff ff7f 	bl	1004f71a <LL_RNG_IsActiveFlag_RNGRDY>
1004f81c:	1e03      	subs	r3, r0, #0
1004f81e:	d0f9      	beq.n	1004f814 <HW_RNG_GetRandom32+0x2c>

  num_16[1] = (uint16_t)LL_RNG_ReadRandData16(RNG);
1004f820:	68fb      	ldr	r3, [r7, #12]
1004f822:	1c9c      	adds	r4, r3, #2
1004f824:	4b05      	ldr	r3, [pc, #20]	@ (1004f83c <HW_RNG_GetRandom32+0x54>)
1004f826:	0018      	movs	r0, r3
1004f828:	f7ff ff99 	bl	1004f75e <LL_RNG_ReadRandData16>
1004f82c:	0003      	movs	r3, r0
1004f82e:	8023      	strh	r3, [r4, #0]
#endif /* STM32WB07 || STM32WB06 || STM32WB05*/

  return HW_RNG_SUCCESS;
1004f830:	2300      	movs	r3, #0
}
1004f832:	0018      	movs	r0, r3
1004f834:	46bd      	mov	sp, r7
1004f836:	b005      	add	sp, #20
1004f838:	bd90      	pop	{r4, r7, pc}
1004f83a:	46c0      	nop			@ (mov r8, r8)
1004f83c:	48600000 	.word	0x48600000

1004f840 <NVMDB_get_info>:
}

#endif

static NVMDB_status_t NVMDB_get_info(NVMDB_info *info)
{
1004f840:	b580      	push	{r7, lr}
1004f842:	b084      	sub	sp, #16
1004f844:	af00      	add	r7, sp, #0
1004f846:	6078      	str	r0, [r7, #4]
  uint32_t address = info->start_address;
1004f848:	687b      	ldr	r3, [r7, #4]
1004f84a:	681b      	ldr	r3, [r3, #0]
1004f84c:	60fb      	str	r3, [r7, #12]
  NVMDB_RecordType_ptr record_p;

  info->valid_records = 0;
1004f84e:	687b      	ldr	r3, [r7, #4]
1004f850:	2200      	movs	r2, #0
1004f852:	811a      	strh	r2, [r3, #8]
  info->invalid_records = 0;
1004f854:	687b      	ldr	r3, [r7, #4]
1004f856:	2200      	movs	r2, #0
1004f858:	815a      	strh	r2, [r3, #10]
  info->free_space = 0;
1004f85a:	687b      	ldr	r3, [r7, #4]
1004f85c:	2200      	movs	r2, #0
1004f85e:	819a      	strh	r2, [r3, #12]
  info->locked = FALSE;
1004f860:	687b      	ldr	r3, [r7, #4]
1004f862:	2200      	movs	r2, #0
1004f864:	739a      	strb	r2, [r3, #14]

  while(1)
  {

    record_p = (NVMDB_RecordType_ptr)address;
1004f866:	68fb      	ldr	r3, [r7, #12]
1004f868:	60bb      	str	r3, [r7, #8]

    if(record_p->header.valid_flag == NO_RECORD)
1004f86a:	68bb      	ldr	r3, [r7, #8]
1004f86c:	781b      	ldrb	r3, [r3, #0]
1004f86e:	2bff      	cmp	r3, #255	@ 0xff
1004f870:	d10c      	bne.n	1004f88c <NVMDB_get_info+0x4c>
    {
      info->free_space = info->end_address - address - RECORD_HEADER_SIZE;
1004f872:	687b      	ldr	r3, [r7, #4]
1004f874:	685b      	ldr	r3, [r3, #4]
1004f876:	b29a      	uxth	r2, r3
1004f878:	68fb      	ldr	r3, [r7, #12]
1004f87a:	b29b      	uxth	r3, r3
1004f87c:	1ad3      	subs	r3, r2, r3
1004f87e:	b29b      	uxth	r3, r3
1004f880:	3b04      	subs	r3, #4
1004f882:	b29a      	uxth	r2, r3
1004f884:	687b      	ldr	r3, [r7, #4]
1004f886:	819a      	strh	r2, [r3, #12]
      return NVMDB_STATUS_OK;
1004f888:	2300      	movs	r3, #0
1004f88a:	e028      	b.n	1004f8de <NVMDB_get_info+0x9e>
    }
    else if(record_p->header.valid_flag == VALID_RECORD)
1004f88c:	68bb      	ldr	r3, [r7, #8]
1004f88e:	781b      	ldrb	r3, [r3, #0]
1004f890:	2bfe      	cmp	r3, #254	@ 0xfe
1004f892:	d106      	bne.n	1004f8a2 <NVMDB_get_info+0x62>
    {
      info->valid_records++;
1004f894:	687b      	ldr	r3, [r7, #4]
1004f896:	891b      	ldrh	r3, [r3, #8]
1004f898:	3301      	adds	r3, #1
1004f89a:	b29a      	uxth	r2, r3
1004f89c:	687b      	ldr	r3, [r7, #4]
1004f89e:	811a      	strh	r2, [r3, #8]
1004f8a0:	e00c      	b.n	1004f8bc <NVMDB_get_info+0x7c>
    }
    else if(record_p->header.valid_flag == INVALID_RECORD)
1004f8a2:	68bb      	ldr	r3, [r7, #8]
1004f8a4:	781b      	ldrb	r3, [r3, #0]
1004f8a6:	2b00      	cmp	r3, #0
1004f8a8:	d106      	bne.n	1004f8b8 <NVMDB_get_info+0x78>
    {
      info->invalid_records++;
1004f8aa:	687b      	ldr	r3, [r7, #4]
1004f8ac:	895b      	ldrh	r3, [r3, #10]
1004f8ae:	3301      	adds	r3, #1
1004f8b0:	b29a      	uxth	r2, r3
1004f8b2:	687b      	ldr	r3, [r7, #4]
1004f8b4:	815a      	strh	r2, [r3, #10]
1004f8b6:	e001      	b.n	1004f8bc <NVMDB_get_info+0x7c>
    }
    else
    {
      // Wrong flag
      return NVMDB_STATUS_CORRUPTED_DB;
1004f8b8:	2303      	movs	r3, #3
1004f8ba:	e010      	b.n	1004f8de <NVMDB_get_info+0x9e>
    }

    address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004f8bc:	68bb      	ldr	r3, [r7, #8]
1004f8be:	885b      	ldrh	r3, [r3, #2]
1004f8c0:	3303      	adds	r3, #3
1004f8c2:	2203      	movs	r2, #3
1004f8c4:	4313      	orrs	r3, r2
1004f8c6:	001a      	movs	r2, r3
1004f8c8:	68fb      	ldr	r3, [r7, #12]
1004f8ca:	18d3      	adds	r3, r2, r3
1004f8cc:	3301      	adds	r3, #1
1004f8ce:	60fb      	str	r3, [r7, #12]

    if(address + MIN_RECORD_SIZE >= info->end_address)  // End of DB reached
1004f8d0:	68fb      	ldr	r3, [r7, #12]
1004f8d2:	1d5a      	adds	r2, r3, #5
1004f8d4:	687b      	ldr	r3, [r7, #4]
1004f8d6:	685b      	ldr	r3, [r3, #4]
1004f8d8:	429a      	cmp	r2, r3
1004f8da:	d3c4      	bcc.n	1004f866 <NVMDB_get_info+0x26>
    {
      return NVMDB_STATUS_OK;
1004f8dc:	2300      	movs	r3, #0
    }
  }
}
1004f8de:	0018      	movs	r0, r3
1004f8e0:	46bd      	mov	sp, r7
1004f8e2:	b004      	add	sp, #16
1004f8e4:	bd80      	pop	{r7, pc}

1004f8e6 <NextRecordNoLock>:

/* Current_record_length is used to read the next record when the current record
   is no more present (because, for example, a clean operation has canceled it). */
static NVMDB_status_t NextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t type, uint8_t **data_p, NVMDB_RecordSizeType *data_len, NVMDB_RecordSizeType current_record_length, uint8_t *record_type)
{
1004f8e6:	b580      	push	{r7, lr}
1004f8e8:	b086      	sub	sp, #24
1004f8ea:	af00      	add	r7, sp, #0
1004f8ec:	60f8      	str	r0, [r7, #12]
1004f8ee:	607a      	str	r2, [r7, #4]
1004f8f0:	603b      	str	r3, [r7, #0]
1004f8f2:	230b      	movs	r3, #11
1004f8f4:	18fb      	adds	r3, r7, r3
1004f8f6:	1c0a      	adds	r2, r1, #0
1004f8f8:	701a      	strb	r2, [r3, #0]
      return NVMDB_STATUS_END_OF_DB;
    }
  }
#endif

  if(current_record_length)
1004f8fa:	2020      	movs	r0, #32
1004f8fc:	183b      	adds	r3, r7, r0
1004f8fe:	881b      	ldrh	r3, [r3, #0]
1004f900:	2b00      	cmp	r3, #0
1004f902:	d00a      	beq.n	1004f91a <NextRecordNoLock+0x34>
  {
    header.length = current_record_length;
1004f904:	2110      	movs	r1, #16
1004f906:	187a      	adds	r2, r7, r1
1004f908:	183b      	adds	r3, r7, r0
1004f90a:	881b      	ldrh	r3, [r3, #0]
1004f90c:	8053      	strh	r3, [r2, #2]
    header.valid_flag = VALID_RECORD;
1004f90e:	187b      	adds	r3, r7, r1
1004f910:	22fe      	movs	r2, #254	@ 0xfe
1004f912:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004f914:	187b      	adds	r3, r7, r1
1004f916:	617b      	str	r3, [r7, #20]
1004f918:	e002      	b.n	1004f920 <NextRecordNoLock+0x3a>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004f91a:	68fb      	ldr	r3, [r7, #12]
1004f91c:	685b      	ldr	r3, [r3, #4]
1004f91e:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004f920:	68fb      	ldr	r3, [r7, #12]
1004f922:	685a      	ldr	r2, [r3, #4]
1004f924:	68fb      	ldr	r3, [r7, #12]
1004f926:	689b      	ldr	r3, [r3, #8]
1004f928:	429a      	cmp	r2, r3
1004f92a:	d203      	bcs.n	1004f934 <NextRecordNoLock+0x4e>
1004f92c:	697b      	ldr	r3, [r7, #20]
1004f92e:	781b      	ldrb	r3, [r3, #0]
1004f930:	2bff      	cmp	r3, #255	@ 0xff
1004f932:	d101      	bne.n	1004f938 <NextRecordNoLock+0x52>
  {
    return NVMDB_STATUS_END_OF_DB;
1004f934:	2304      	movs	r3, #4
1004f936:	e04b      	b.n	1004f9d0 <NextRecordNoLock+0xea>
  while(1)
  {

    // If it is the first read, the pointer already points to first record.
    // If it is not the first read, advance the pointer to the next record (word aligned).
    if(handle_p->first_read)
1004f938:	68fb      	ldr	r3, [r7, #12]
1004f93a:	7b1b      	ldrb	r3, [r3, #12]
1004f93c:	2b00      	cmp	r3, #0
1004f93e:	d003      	beq.n	1004f948 <NextRecordNoLock+0x62>
    {
      handle_p->first_read = FALSE;
1004f940:	68fb      	ldr	r3, [r7, #12]
1004f942:	2200      	movs	r2, #0
1004f944:	731a      	strb	r2, [r3, #12]
1004f946:	e019      	b.n	1004f97c <NextRecordNoLock+0x96>
    }
    else
    {
      handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
1004f948:	68fb      	ldr	r3, [r7, #12]
1004f94a:	685b      	ldr	r3, [r3, #4]
1004f94c:	697a      	ldr	r2, [r7, #20]
1004f94e:	8852      	ldrh	r2, [r2, #2]
1004f950:	3203      	adds	r2, #3
1004f952:	2103      	movs	r1, #3
1004f954:	430a      	orrs	r2, r1
1004f956:	189b      	adds	r3, r3, r2
1004f958:	1c5a      	adds	r2, r3, #1
1004f95a:	68fb      	ldr	r3, [r7, #12]
1004f95c:	605a      	str	r2, [r3, #4]
      record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004f95e:	68fb      	ldr	r3, [r7, #12]
1004f960:	685b      	ldr	r3, [r3, #4]
1004f962:	617b      	str	r3, [r7, #20]

      if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004f964:	68fb      	ldr	r3, [r7, #12]
1004f966:	685a      	ldr	r2, [r3, #4]
1004f968:	68fb      	ldr	r3, [r7, #12]
1004f96a:	689b      	ldr	r3, [r3, #8]
1004f96c:	429a      	cmp	r2, r3
1004f96e:	d203      	bcs.n	1004f978 <NextRecordNoLock+0x92>
1004f970:	697b      	ldr	r3, [r7, #20]
1004f972:	781b      	ldrb	r3, [r3, #0]
1004f974:	2bff      	cmp	r3, #255	@ 0xff
1004f976:	d101      	bne.n	1004f97c <NextRecordNoLock+0x96>
        {
          // A record to be written has been found in cache
          return NVMDB_STATUS_OK;
        }
#endif
        return NVMDB_STATUS_END_OF_DB;
1004f978:	2304      	movs	r3, #4
1004f97a:	e029      	b.n	1004f9d0 <NextRecordNoLock+0xea>
      }
    }

    if(record_p->header.valid_flag == INVALID_RECORD)
1004f97c:	697b      	ldr	r3, [r7, #20]
1004f97e:	781b      	ldrb	r3, [r3, #0]
1004f980:	2b00      	cmp	r3, #0
1004f982:	d023      	beq.n	1004f9cc <NextRecordNoLock+0xe6>
    {
      // If record is invalidated, address is updated in next cycle.
      continue;
    }

    if(record_p->header.valid_flag != VALID_RECORD)
1004f984:	697b      	ldr	r3, [r7, #20]
1004f986:	781b      	ldrb	r3, [r3, #0]
1004f988:	2bfe      	cmp	r3, #254	@ 0xfe
1004f98a:	d001      	beq.n	1004f990 <NextRecordNoLock+0xaa>
    {
      return NVMDB_STATUS_CORRUPTED_DB;
1004f98c:	2303      	movs	r3, #3
1004f98e:	e01f      	b.n	1004f9d0 <NextRecordNoLock+0xea>
    }

    if(type == ALL_TYPES || record_p->header.record_id == type)
1004f990:	220b      	movs	r2, #11
1004f992:	18bb      	adds	r3, r7, r2
1004f994:	781b      	ldrb	r3, [r3, #0]
1004f996:	2bff      	cmp	r3, #255	@ 0xff
1004f998:	d005      	beq.n	1004f9a6 <NextRecordNoLock+0xc0>
1004f99a:	697b      	ldr	r3, [r7, #20]
1004f99c:	785b      	ldrb	r3, [r3, #1]
1004f99e:	18ba      	adds	r2, r7, r2
1004f9a0:	7812      	ldrb	r2, [r2, #0]
1004f9a2:	429a      	cmp	r2, r3
1004f9a4:	d1c8      	bne.n	1004f938 <NextRecordNoLock+0x52>
      {
        continue;
      }
#endif

      *data_p = (uint8_t *)handle_p->address + RECORD_HEADER_SIZE;
1004f9a6:	68fb      	ldr	r3, [r7, #12]
1004f9a8:	685b      	ldr	r3, [r3, #4]
1004f9aa:	3304      	adds	r3, #4
1004f9ac:	001a      	movs	r2, r3
1004f9ae:	687b      	ldr	r3, [r7, #4]
1004f9b0:	601a      	str	r2, [r3, #0]
      *data_len = record_p->header.length;
1004f9b2:	697b      	ldr	r3, [r7, #20]
1004f9b4:	885a      	ldrh	r2, [r3, #2]
1004f9b6:	683b      	ldr	r3, [r7, #0]
1004f9b8:	801a      	strh	r2, [r3, #0]

      if(record_type != NULL)
1004f9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f9bc:	2b00      	cmp	r3, #0
1004f9be:	d003      	beq.n	1004f9c8 <NextRecordNoLock+0xe2>
      {
        *record_type = record_p->header.record_id;
1004f9c0:	697b      	ldr	r3, [r7, #20]
1004f9c2:	785a      	ldrb	r2, [r3, #1]
1004f9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
1004f9c6:	701a      	strb	r2, [r3, #0]
      }

      //memcpy(data_p, (uint8_t*)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
      //*size_p = record_p->header.length;

      return NVMDB_STATUS_OK;
1004f9c8:	2300      	movs	r3, #0
1004f9ca:	e001      	b.n	1004f9d0 <NextRecordNoLock+0xea>
      continue;
1004f9cc:	46c0      	nop			@ (mov r8, r8)
    if(handle_p->first_read)
1004f9ce:	e7b3      	b.n	1004f938 <NextRecordNoLock+0x52>
    }
  }
}
1004f9d0:	0018      	movs	r0, r3
1004f9d2:	46bd      	mov	sp, r7
1004f9d4:	b006      	add	sp, #24
1004f9d6:	bd80      	pop	{r7, pc}

1004f9d8 <ReadNextRecordNoLock>:

static NVMDB_status_t ReadNextRecordNoLock(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length, uint8_t *record_type_out)
{
1004f9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1004f9da:	b08b      	sub	sp, #44	@ 0x2c
1004f9dc:	af02      	add	r7, sp, #8
1004f9de:	60f8      	str	r0, [r7, #12]
1004f9e0:	0008      	movs	r0, r1
1004f9e2:	0011      	movs	r1, r2
1004f9e4:	607b      	str	r3, [r7, #4]
1004f9e6:	230b      	movs	r3, #11
1004f9e8:	18fb      	adds	r3, r7, r3
1004f9ea:	1c02      	adds	r2, r0, #0
1004f9ec:	701a      	strb	r2, [r3, #0]
1004f9ee:	2208      	movs	r2, #8
1004f9f0:	0010      	movs	r0, r2
1004f9f2:	18bb      	adds	r3, r7, r2
1004f9f4:	1c0a      	adds	r2, r1, #0
1004f9f6:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;

  uint8_t *data;
  NVMDB_RecordSizeType data_len;

  *size_p = 0;
1004f9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004f9fa:	2200      	movs	r2, #0
1004f9fc:	801a      	strh	r2, [r3, #0]

  status = NextRecordNoLock(handle_p, record_type, &data, &data_len, current_record_length, record_type_out);
1004f9fe:	261f      	movs	r6, #31
1004fa00:	19bc      	adds	r4, r7, r6
1004fa02:	2216      	movs	r2, #22
1004fa04:	18bd      	adds	r5, r7, r2
1004fa06:	2218      	movs	r2, #24
1004fa08:	18ba      	adds	r2, r7, r2
1004fa0a:	230b      	movs	r3, #11
1004fa0c:	18fb      	adds	r3, r7, r3
1004fa0e:	7819      	ldrb	r1, [r3, #0]
1004fa10:	68fb      	ldr	r3, [r7, #12]
1004fa12:	469c      	mov	ip, r3
1004fa14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
1004fa16:	9301      	str	r3, [sp, #4]
1004fa18:	2338      	movs	r3, #56	@ 0x38
1004fa1a:	181b      	adds	r3, r3, r0
1004fa1c:	19db      	adds	r3, r3, r7
1004fa1e:	881b      	ldrh	r3, [r3, #0]
1004fa20:	9300      	str	r3, [sp, #0]
1004fa22:	002b      	movs	r3, r5
1004fa24:	4660      	mov	r0, ip
1004fa26:	f7ff ff5e 	bl	1004f8e6 <NextRecordNoLock>
1004fa2a:	0003      	movs	r3, r0
1004fa2c:	7023      	strb	r3, [r4, #0]

  if(status != NVMDB_STATUS_OK)
1004fa2e:	19bb      	adds	r3, r7, r6
1004fa30:	781b      	ldrb	r3, [r3, #0]
1004fa32:	2b00      	cmp	r3, #0
1004fa34:	d002      	beq.n	1004fa3c <ReadNextRecordNoLock+0x64>
  {
    return status;
1004fa36:	19bb      	adds	r3, r7, r6
1004fa38:	781b      	ldrb	r3, [r3, #0]
1004fa3a:	e027      	b.n	1004fa8c <ReadNextRecordNoLock+0xb4>
  }

  if(offset >= data_len)
1004fa3c:	2316      	movs	r3, #22
1004fa3e:	18fb      	adds	r3, r7, r3
1004fa40:	881b      	ldrh	r3, [r3, #0]
1004fa42:	2208      	movs	r2, #8
1004fa44:	18ba      	adds	r2, r7, r2
1004fa46:	8812      	ldrh	r2, [r2, #0]
1004fa48:	429a      	cmp	r2, r3
1004fa4a:	d301      	bcc.n	1004fa50 <ReadNextRecordNoLock+0x78>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004fa4c:	2306      	movs	r3, #6
1004fa4e:	e01d      	b.n	1004fa8c <ReadNextRecordNoLock+0xb4>
  }

  memcpy(data_p, data + offset, MIN(data_len - offset, max_size));
1004fa50:	69ba      	ldr	r2, [r7, #24]
1004fa52:	2408      	movs	r4, #8
1004fa54:	193b      	adds	r3, r7, r4
1004fa56:	881b      	ldrh	r3, [r3, #0]
1004fa58:	18d1      	adds	r1, r2, r3
1004fa5a:	2330      	movs	r3, #48	@ 0x30
1004fa5c:	2208      	movs	r2, #8
1004fa5e:	189b      	adds	r3, r3, r2
1004fa60:	19db      	adds	r3, r3, r7
1004fa62:	881a      	ldrh	r2, [r3, #0]
1004fa64:	2316      	movs	r3, #22
1004fa66:	18fb      	adds	r3, r7, r3
1004fa68:	881b      	ldrh	r3, [r3, #0]
1004fa6a:	0018      	movs	r0, r3
1004fa6c:	193b      	adds	r3, r7, r4
1004fa6e:	881b      	ldrh	r3, [r3, #0]
1004fa70:	1ac3      	subs	r3, r0, r3
1004fa72:	429a      	cmp	r2, r3
1004fa74:	dd00      	ble.n	1004fa78 <ReadNextRecordNoLock+0xa0>
1004fa76:	001a      	movs	r2, r3
1004fa78:	687b      	ldr	r3, [r7, #4]
1004fa7a:	0018      	movs	r0, r3
1004fa7c:	f018 f8e7 	bl	10067c4e <memcpy>
  *size_p = data_len;
1004fa80:	2316      	movs	r3, #22
1004fa82:	18fb      	adds	r3, r7, r3
1004fa84:	881a      	ldrh	r2, [r3, #0]
1004fa86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1004fa88:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004fa8a:	2300      	movs	r3, #0
}
1004fa8c:	0018      	movs	r0, r3
1004fa8e:	46bd      	mov	sp, r7
1004fa90:	b009      	add	sp, #36	@ 0x24
1004fa92:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004fa94 <write_data>:
  return TRUE;
}

/* flash_address must be word aligned. */
static void write_data(uint32_t flash_address, uint16_t data_length, const void *data)
{
1004fa94:	b590      	push	{r4, r7, lr}
1004fa96:	b089      	sub	sp, #36	@ 0x24
1004fa98:	af00      	add	r7, sp, #0
1004fa9a:	60f8      	str	r0, [r7, #12]
1004fa9c:	607a      	str	r2, [r7, #4]
1004fa9e:	200a      	movs	r0, #10
1004faa0:	183b      	adds	r3, r7, r0
1004faa2:	1c0a      	adds	r2, r1, #0
1004faa4:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  uint16_t length_word;
  uint8_t rest;
  const uint8_t *data_8 = data;
1004faa6:	687b      	ldr	r3, [r7, #4]
1004faa8:	61bb      	str	r3, [r7, #24]

  length_word = (data_length >> 2) << 2;
1004faaa:	0001      	movs	r1, r0
1004faac:	187b      	adds	r3, r7, r1
1004faae:	881b      	ldrh	r3, [r3, #0]
1004fab0:	089b      	lsrs	r3, r3, #2
1004fab2:	b29a      	uxth	r2, r3
1004fab4:	2016      	movs	r0, #22
1004fab6:	183b      	adds	r3, r7, r0
1004fab8:	0092      	lsls	r2, r2, #2
1004faba:	801a      	strh	r2, [r3, #0]
  rest = data_length - length_word;
1004fabc:	187b      	adds	r3, r7, r1
1004fabe:	881b      	ldrh	r3, [r3, #0]
1004fac0:	b2d9      	uxtb	r1, r3
1004fac2:	183b      	adds	r3, r7, r0
1004fac4:	881b      	ldrh	r3, [r3, #0]
1004fac6:	b2da      	uxtb	r2, r3
1004fac8:	2315      	movs	r3, #21
1004faca:	18fb      	adds	r3, r7, r3
1004facc:	1a8a      	subs	r2, r1, r2
1004face:	701a      	strb	r2, [r3, #0]

  for(int i = 0; i < length_word; i += 4)
1004fad0:	2300      	movs	r3, #0
1004fad2:	61fb      	str	r3, [r7, #28]
1004fad4:	e013      	b.n	1004fafe <write_data+0x6a>
  {
    memcpy(&word, data_8 + i, sizeof(word));
1004fad6:	69fb      	ldr	r3, [r7, #28]
1004fad8:	69ba      	ldr	r2, [r7, #24]
1004fada:	18d1      	adds	r1, r2, r3
1004fadc:	2310      	movs	r3, #16
1004fade:	18fb      	adds	r3, r7, r3
1004fae0:	2204      	movs	r2, #4
1004fae2:	0018      	movs	r0, r3
1004fae4:	f018 f8b3 	bl	10067c4e <memcpy>
    NVMDB_FLASH_WRITE(flash_address + i, word);
1004fae8:	69fa      	ldr	r2, [r7, #28]
1004faea:	68fb      	ldr	r3, [r7, #12]
1004faec:	18d3      	adds	r3, r2, r3
1004faee:	693a      	ldr	r2, [r7, #16]
1004faf0:	0019      	movs	r1, r3
1004faf2:	2000      	movs	r0, #0
1004faf4:	f7f7 fc8a 	bl	1004740c <HAL_FLASH_Program>
  for(int i = 0; i < length_word; i += 4)
1004faf8:	69fb      	ldr	r3, [r7, #28]
1004fafa:	3304      	adds	r3, #4
1004fafc:	61fb      	str	r3, [r7, #28]
1004fafe:	2416      	movs	r4, #22
1004fb00:	193b      	adds	r3, r7, r4
1004fb02:	881b      	ldrh	r3, [r3, #0]
1004fb04:	69fa      	ldr	r2, [r7, #28]
1004fb06:	429a      	cmp	r2, r3
1004fb08:	dbe5      	blt.n	1004fad6 <write_data+0x42>
  }
  word = 0xFFFFFFFF;
1004fb0a:	2301      	movs	r3, #1
1004fb0c:	425b      	negs	r3, r3
1004fb0e:	613b      	str	r3, [r7, #16]
  memcpy(&word, data_8 + length_word, rest);
1004fb10:	193b      	adds	r3, r7, r4
1004fb12:	881b      	ldrh	r3, [r3, #0]
1004fb14:	69ba      	ldr	r2, [r7, #24]
1004fb16:	18d1      	adds	r1, r2, r3
1004fb18:	2315      	movs	r3, #21
1004fb1a:	18fb      	adds	r3, r7, r3
1004fb1c:	781a      	ldrb	r2, [r3, #0]
1004fb1e:	2310      	movs	r3, #16
1004fb20:	18fb      	adds	r3, r7, r3
1004fb22:	0018      	movs	r0, r3
1004fb24:	f018 f893 	bl	10067c4e <memcpy>
  NVMDB_FLASH_WRITE(flash_address + length_word, word);
1004fb28:	193b      	adds	r3, r7, r4
1004fb2a:	881a      	ldrh	r2, [r3, #0]
1004fb2c:	68fb      	ldr	r3, [r7, #12]
1004fb2e:	18d3      	adds	r3, r2, r3
1004fb30:	693a      	ldr	r2, [r7, #16]
1004fb32:	0019      	movs	r1, r3
1004fb34:	2000      	movs	r0, #0
1004fb36:	f7f7 fc69 	bl	1004740c <HAL_FLASH_Program>
}
1004fb3a:	46c0      	nop			@ (mov r8, r8)
1004fb3c:	46bd      	mov	sp, r7
1004fb3e:	b009      	add	sp, #36	@ 0x24
1004fb40:	bd90      	pop	{r4, r7, pc}

1004fb42 <WriteRecord>:

static NVMDB_status_t WriteRecord(uint32_t flash_address, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
1004fb42:	b5f0      	push	{r4, r5, r6, r7, lr}
1004fb44:	b087      	sub	sp, #28
1004fb46:	af00      	add	r7, sp, #0
1004fb48:	60f8      	str	r0, [r7, #12]
1004fb4a:	0008      	movs	r0, r1
1004fb4c:	0011      	movs	r1, r2
1004fb4e:	607b      	str	r3, [r7, #4]
1004fb50:	250b      	movs	r5, #11
1004fb52:	197b      	adds	r3, r7, r5
1004fb54:	1c02      	adds	r2, r0, #0
1004fb56:	701a      	strb	r2, [r3, #0]
1004fb58:	2408      	movs	r4, #8
1004fb5a:	193b      	adds	r3, r7, r4
1004fb5c:	1c0a      	adds	r2, r1, #0
1004fb5e:	801a      	strh	r2, [r3, #0]
  uint32_t word;
  NVMDB_RecordHeaderType *header_p = (NVMDB_RecordHeaderType *)&word;
1004fb60:	2310      	movs	r3, #16
1004fb62:	18fb      	adds	r3, r7, r3
1004fb64:	617b      	str	r3, [r7, #20]
#if NVM_CACHE
  int32_t needed_time;
#endif

  data1_length = ROUND4_R(data1_length); // Make sure data1_length is multiple of 4.
1004fb66:	193b      	adds	r3, r7, r4
1004fb68:	881b      	ldrh	r3, [r3, #0]
1004fb6a:	3b01      	subs	r3, #1
1004fb6c:	b29b      	uxth	r3, r3
1004fb6e:	b21b      	sxth	r3, r3
1004fb70:	2203      	movs	r2, #3
1004fb72:	4313      	orrs	r3, r2
1004fb74:	b21b      	sxth	r3, r3
1004fb76:	b29a      	uxth	r2, r3
1004fb78:	193b      	adds	r3, r7, r4
1004fb7a:	3201      	adds	r2, #1
1004fb7c:	801a      	strh	r2, [r3, #0]

  header_p->valid_flag = VALID_RECORD;
1004fb7e:	697b      	ldr	r3, [r7, #20]
1004fb80:	22fe      	movs	r2, #254	@ 0xfe
1004fb82:	701a      	strb	r2, [r3, #0]
  header_p->record_id = record_id;
1004fb84:	697b      	ldr	r3, [r7, #20]
1004fb86:	197a      	adds	r2, r7, r5
1004fb88:	7812      	ldrb	r2, [r2, #0]
1004fb8a:	705a      	strb	r2, [r3, #1]
  header_p->length = data1_length + data2_length;
1004fb8c:	193a      	adds	r2, r7, r4
1004fb8e:	2520      	movs	r5, #32
1004fb90:	2608      	movs	r6, #8
1004fb92:	19ab      	adds	r3, r5, r6
1004fb94:	2108      	movs	r1, #8
1004fb96:	468c      	mov	ip, r1
1004fb98:	44bc      	add	ip, r7
1004fb9a:	4463      	add	r3, ip
1004fb9c:	8812      	ldrh	r2, [r2, #0]
1004fb9e:	881b      	ldrh	r3, [r3, #0]
1004fba0:	18d3      	adds	r3, r2, r3
1004fba2:	b29a      	uxth	r2, r3
1004fba4:	697b      	ldr	r3, [r7, #20]
1004fba6:	805a      	strh	r2, [r3, #2]
  }
#endif

  DEBUG_GPIO_HIGH();

  NVMDB_FLASH_WRITE(flash_address, word);
1004fba8:	693a      	ldr	r2, [r7, #16]
1004fbaa:	68fb      	ldr	r3, [r7, #12]
1004fbac:	0019      	movs	r1, r3
1004fbae:	2000      	movs	r0, #0
1004fbb0:	f7f7 fc2c 	bl	1004740c <HAL_FLASH_Program>

  write_data(flash_address + 4, data1_length, data1);
1004fbb4:	68fb      	ldr	r3, [r7, #12]
1004fbb6:	1d18      	adds	r0, r3, #4
1004fbb8:	687a      	ldr	r2, [r7, #4]
1004fbba:	193b      	adds	r3, r7, r4
1004fbbc:	881b      	ldrh	r3, [r3, #0]
1004fbbe:	0019      	movs	r1, r3
1004fbc0:	f7ff ff68 	bl	1004fa94 <write_data>
  write_data(flash_address + 4 + data1_length, data2_length, data2);
1004fbc4:	193b      	adds	r3, r7, r4
1004fbc6:	881a      	ldrh	r2, [r3, #0]
1004fbc8:	68fb      	ldr	r3, [r7, #12]
1004fbca:	18d3      	adds	r3, r2, r3
1004fbcc:	1d18      	adds	r0, r3, #4
1004fbce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
1004fbd0:	19ab      	adds	r3, r5, r6
1004fbd2:	2108      	movs	r1, #8
1004fbd4:	468c      	mov	ip, r1
1004fbd6:	44bc      	add	ip, r7
1004fbd8:	4463      	add	r3, ip
1004fbda:	881b      	ldrh	r3, [r3, #0]
1004fbdc:	0019      	movs	r1, r3
1004fbde:	f7ff ff59 	bl	1004fa94 <write_data>
  DEBUG_GPIO_LOW();
#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004fbe2:	2300      	movs	r3, #0
}
1004fbe4:	0018      	movs	r0, r3
1004fbe6:	46bd      	mov	sp, r7
1004fbe8:	b007      	add	sp, #28
1004fbea:	bdf0      	pop	{r4, r5, r6, r7, pc}

1004fbec <NVMDB_CompareCurrentRecord>:

int NVMDB_CompareCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, const uint8_t *data_p, NVMDB_RecordSizeType size)
{
1004fbec:	b580      	push	{r7, lr}
1004fbee:	b086      	sub	sp, #24
1004fbf0:	af00      	add	r7, sp, #0
1004fbf2:	60f8      	str	r0, [r7, #12]
1004fbf4:	0008      	movs	r0, r1
1004fbf6:	607a      	str	r2, [r7, #4]
1004fbf8:	0019      	movs	r1, r3
1004fbfa:	230a      	movs	r3, #10
1004fbfc:	18fb      	adds	r3, r7, r3
1004fbfe:	1c02      	adds	r2, r0, #0
1004fc00:	801a      	strh	r2, [r3, #0]
1004fc02:	2308      	movs	r3, #8
1004fc04:	18fb      	adds	r3, r7, r3
1004fc06:	1c0a      	adds	r2, r1, #0
1004fc08:	801a      	strh	r2, [r3, #0]
    }
  }

#endif

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fc0a:	68fb      	ldr	r3, [r7, #12]
1004fc0c:	685b      	ldr	r3, [r3, #4]
1004fc0e:	617b      	str	r3, [r7, #20]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fc10:	68fb      	ldr	r3, [r7, #12]
1004fc12:	685a      	ldr	r2, [r3, #4]
1004fc14:	68fb      	ldr	r3, [r7, #12]
1004fc16:	689b      	ldr	r3, [r3, #8]
1004fc18:	429a      	cmp	r2, r3
1004fc1a:	d203      	bcs.n	1004fc24 <NVMDB_CompareCurrentRecord+0x38>
1004fc1c:	697b      	ldr	r3, [r7, #20]
1004fc1e:	781b      	ldrb	r3, [r3, #0]
1004fc20:	2bff      	cmp	r3, #255	@ 0xff
1004fc22:	d101      	bne.n	1004fc28 <NVMDB_CompareCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_END_OF_DB;
1004fc24:	2304      	movs	r3, #4
1004fc26:	e02a      	b.n	1004fc7e <NVMDB_CompareCurrentRecord+0x92>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004fc28:	68fb      	ldr	r3, [r7, #12]
1004fc2a:	7b1b      	ldrb	r3, [r3, #12]
1004fc2c:	2b00      	cmp	r3, #0
1004fc2e:	d103      	bne.n	1004fc38 <NVMDB_CompareCurrentRecord+0x4c>
1004fc30:	697b      	ldr	r3, [r7, #20]
1004fc32:	781b      	ldrb	r3, [r3, #0]
1004fc34:	2bfe      	cmp	r3, #254	@ 0xfe
1004fc36:	d001      	beq.n	1004fc3c <NVMDB_CompareCurrentRecord+0x50>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004fc38:	2305      	movs	r3, #5
1004fc3a:	e020      	b.n	1004fc7e <NVMDB_CompareCurrentRecord+0x92>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004fc3c:	697b      	ldr	r3, [r7, #20]
1004fc3e:	885b      	ldrh	r3, [r3, #2]
1004fc40:	220a      	movs	r2, #10
1004fc42:	18ba      	adds	r2, r7, r2
1004fc44:	8812      	ldrh	r2, [r2, #0]
1004fc46:	429a      	cmp	r2, r3
1004fc48:	d301      	bcc.n	1004fc4e <NVMDB_CompareCurrentRecord+0x62>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004fc4a:	2306      	movs	r3, #6
1004fc4c:	e017      	b.n	1004fc7e <NVMDB_CompareCurrentRecord+0x92>
  }

  handle_p->first_read = FALSE;
1004fc4e:	68fb      	ldr	r3, [r7, #12]
1004fc50:	2200      	movs	r2, #0
1004fc52:	731a      	strb	r2, [r3, #12]

  if(memcmp(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, size) == 0)
1004fc54:	230a      	movs	r3, #10
1004fc56:	18fb      	adds	r3, r7, r3
1004fc58:	881a      	ldrh	r2, [r3, #0]
1004fc5a:	68fb      	ldr	r3, [r7, #12]
1004fc5c:	685b      	ldr	r3, [r3, #4]
1004fc5e:	18d3      	adds	r3, r2, r3
1004fc60:	3304      	adds	r3, #4
1004fc62:	0019      	movs	r1, r3
1004fc64:	2308      	movs	r3, #8
1004fc66:	18fb      	adds	r3, r7, r3
1004fc68:	881a      	ldrh	r2, [r3, #0]
1004fc6a:	687b      	ldr	r3, [r7, #4]
1004fc6c:	0018      	movs	r0, r3
1004fc6e:	f017 ff6b 	bl	10067b48 <memcmp>
1004fc72:	1e03      	subs	r3, r0, #0
1004fc74:	d101      	bne.n	1004fc7a <NVMDB_CompareCurrentRecord+0x8e>
  {
    return NVMDB_STATUS_OK;
1004fc76:	2300      	movs	r3, #0
1004fc78:	e001      	b.n	1004fc7e <NVMDB_CompareCurrentRecord+0x92>
  }
  else
  {
    return -1;
1004fc7a:	2301      	movs	r3, #1
1004fc7c:	425b      	negs	r3, r3
  }
}
1004fc7e:	0018      	movs	r0, r3
1004fc80:	46bd      	mov	sp, r7
1004fc82:	b006      	add	sp, #24
1004fc84:	bd80      	pop	{r7, pc}

1004fc86 <ReadCurrentRecordNoLock>:

static NVMDB_status_t ReadCurrentRecordNoLock(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p, NVMDB_RecordSizeType current_record_length)
{
1004fc86:	b590      	push	{r4, r7, lr}
1004fc88:	b087      	sub	sp, #28
1004fc8a:	af00      	add	r7, sp, #0
1004fc8c:	60f8      	str	r0, [r7, #12]
1004fc8e:	0008      	movs	r0, r1
1004fc90:	607a      	str	r2, [r7, #4]
1004fc92:	0019      	movs	r1, r3
1004fc94:	230a      	movs	r3, #10
1004fc96:	18fb      	adds	r3, r7, r3
1004fc98:	1c02      	adds	r2, r0, #0
1004fc9a:	801a      	strh	r2, [r3, #0]
1004fc9c:	2308      	movs	r3, #8
1004fc9e:	0018      	movs	r0, r3
1004fca0:	18fb      	adds	r3, r7, r3
1004fca2:	1c0a      	adds	r2, r1, #0
1004fca4:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordHeaderType header;
  NVMDB_RecordType_ptr record_p;

  *size_p = 0;
1004fca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004fca8:	2200      	movs	r2, #0
1004fcaa:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(current_record_length)
1004fcac:	2224      	movs	r2, #36	@ 0x24
1004fcae:	1813      	adds	r3, r2, r0
1004fcb0:	19db      	adds	r3, r3, r7
1004fcb2:	881b      	ldrh	r3, [r3, #0]
1004fcb4:	2b00      	cmp	r3, #0
1004fcb6:	d00b      	beq.n	1004fcd0 <ReadCurrentRecordNoLock+0x4a>
  {
    header.length = current_record_length;
1004fcb8:	2110      	movs	r1, #16
1004fcba:	187b      	adds	r3, r7, r1
1004fcbc:	1812      	adds	r2, r2, r0
1004fcbe:	19d2      	adds	r2, r2, r7
1004fcc0:	8812      	ldrh	r2, [r2, #0]
1004fcc2:	805a      	strh	r2, [r3, #2]
    header.valid_flag = VALID_RECORD;
1004fcc4:	187b      	adds	r3, r7, r1
1004fcc6:	22fe      	movs	r2, #254	@ 0xfe
1004fcc8:	701a      	strb	r2, [r3, #0]
    record_p = (NVMDB_RecordType_ptr) & header;
1004fcca:	187b      	adds	r3, r7, r1
1004fccc:	617b      	str	r3, [r7, #20]
1004fcce:	e002      	b.n	1004fcd6 <ReadCurrentRecordNoLock+0x50>
  }
  else
  {
    record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fcd0:	68fb      	ldr	r3, [r7, #12]
1004fcd2:	685b      	ldr	r3, [r3, #4]
1004fcd4:	617b      	str	r3, [r7, #20]
  }

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fcd6:	68fb      	ldr	r3, [r7, #12]
1004fcd8:	685a      	ldr	r2, [r3, #4]
1004fcda:	68fb      	ldr	r3, [r7, #12]
1004fcdc:	689b      	ldr	r3, [r3, #8]
1004fcde:	429a      	cmp	r2, r3
1004fce0:	d203      	bcs.n	1004fcea <ReadCurrentRecordNoLock+0x64>
1004fce2:	697b      	ldr	r3, [r7, #20]
1004fce4:	781b      	ldrb	r3, [r3, #0]
1004fce6:	2bff      	cmp	r3, #255	@ 0xff
1004fce8:	d101      	bne.n	1004fcee <ReadCurrentRecordNoLock+0x68>
  {
    return NVMDB_STATUS_END_OF_DB;
1004fcea:	2304      	movs	r3, #4
1004fcec:	e033      	b.n	1004fd56 <ReadCurrentRecordNoLock+0xd0>
  }

  if(handle_p->first_read || record_p->header.valid_flag != VALID_RECORD)
1004fcee:	68fb      	ldr	r3, [r7, #12]
1004fcf0:	7b1b      	ldrb	r3, [r3, #12]
1004fcf2:	2b00      	cmp	r3, #0
1004fcf4:	d103      	bne.n	1004fcfe <ReadCurrentRecordNoLock+0x78>
1004fcf6:	697b      	ldr	r3, [r7, #20]
1004fcf8:	781b      	ldrb	r3, [r3, #0]
1004fcfa:	2bfe      	cmp	r3, #254	@ 0xfe
1004fcfc:	d001      	beq.n	1004fd02 <ReadCurrentRecordNoLock+0x7c>
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004fcfe:	2305      	movs	r3, #5
1004fd00:	e029      	b.n	1004fd56 <ReadCurrentRecordNoLock+0xd0>
      return NVMDB_STATUS_INVALID_RECORD;
    }
  }
#endif

  if(offset >= record_p->header.length)
1004fd02:	697b      	ldr	r3, [r7, #20]
1004fd04:	885b      	ldrh	r3, [r3, #2]
1004fd06:	220a      	movs	r2, #10
1004fd08:	18ba      	adds	r2, r7, r2
1004fd0a:	8812      	ldrh	r2, [r2, #0]
1004fd0c:	429a      	cmp	r2, r3
1004fd0e:	d301      	bcc.n	1004fd14 <ReadCurrentRecordNoLock+0x8e>
  {
    return NVMDB_STATUS_INVALID_OFFSET;
1004fd10:	2306      	movs	r3, #6
1004fd12:	e020      	b.n	1004fd56 <ReadCurrentRecordNoLock+0xd0>
  }

  handle_p->first_read = FALSE;
1004fd14:	68fb      	ldr	r3, [r7, #12]
1004fd16:	2200      	movs	r2, #0
1004fd18:	731a      	strb	r2, [r3, #12]

  memcpy(data_p, (uint8_t *)handle_p->address + RECORD_HEADER_SIZE + offset, MIN(record_p->header.length - offset, max_size));
1004fd1a:	240a      	movs	r4, #10
1004fd1c:	193b      	adds	r3, r7, r4
1004fd1e:	881a      	ldrh	r2, [r3, #0]
1004fd20:	68fb      	ldr	r3, [r7, #12]
1004fd22:	685b      	ldr	r3, [r3, #4]
1004fd24:	18d3      	adds	r3, r2, r3
1004fd26:	3304      	adds	r3, #4
1004fd28:	0018      	movs	r0, r3
1004fd2a:	2308      	movs	r3, #8
1004fd2c:	18fb      	adds	r3, r7, r3
1004fd2e:	881a      	ldrh	r2, [r3, #0]
1004fd30:	697b      	ldr	r3, [r7, #20]
1004fd32:	885b      	ldrh	r3, [r3, #2]
1004fd34:	0019      	movs	r1, r3
1004fd36:	193b      	adds	r3, r7, r4
1004fd38:	881b      	ldrh	r3, [r3, #0]
1004fd3a:	1acb      	subs	r3, r1, r3
1004fd3c:	429a      	cmp	r2, r3
1004fd3e:	dd00      	ble.n	1004fd42 <ReadCurrentRecordNoLock+0xbc>
1004fd40:	001a      	movs	r2, r3
1004fd42:	687b      	ldr	r3, [r7, #4]
1004fd44:	0001      	movs	r1, r0
1004fd46:	0018      	movs	r0, r3
1004fd48:	f017 ff81 	bl	10067c4e <memcpy>
  *size_p = record_p->header.length;
1004fd4c:	697b      	ldr	r3, [r7, #20]
1004fd4e:	885a      	ldrh	r2, [r3, #2]
1004fd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
1004fd52:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
1004fd54:	2300      	movs	r3, #0
}
1004fd56:	0018      	movs	r0, r3
1004fd58:	46bd      	mov	sp, r7
1004fd5a:	b007      	add	sp, #28
1004fd5c:	bd90      	pop	{r4, r7, pc}
	...

1004fd60 <InvalidateRecord>:

static NVMDB_status_t InvalidateRecord(uint32_t address)
{
1004fd60:	b580      	push	{r7, lr}
1004fd62:	b084      	sub	sp, #16
1004fd64:	af00      	add	r7, sp, #0
1004fd66:	6078      	str	r0, [r7, #4]
  uint32_t word = 0xFFFFFF00;
1004fd68:	4b06      	ldr	r3, [pc, #24]	@ (1004fd84 <InvalidateRecord+0x24>)
1004fd6a:	60fb      	str	r3, [r7, #12]
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif
  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_WRITE(address, word);
1004fd6c:	68fa      	ldr	r2, [r7, #12]
1004fd6e:	687b      	ldr	r3, [r7, #4]
1004fd70:	0019      	movs	r1, r3
1004fd72:	2000      	movs	r0, #0
1004fd74:	f7f7 fb4a 	bl	1004740c <HAL_FLASH_Program>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
1004fd78:	2300      	movs	r3, #0
}
1004fd7a:	0018      	movs	r0, r3
1004fd7c:	46bd      	mov	sp, r7
1004fd7e:	b004      	add	sp, #16
1004fd80:	bd80      	pop	{r7, pc}
1004fd82:	46c0      	nop			@ (mov r8, r8)
1004fd84:	ffffff00 	.word	0xffffff00

1004fd88 <NVMDB_DeleteRecordNoCache>:

static NVMDB_status_t NVMDB_DeleteRecordNoCache(const NVMDB_HandleType *handle_p)
{
1004fd88:	b5b0      	push	{r4, r5, r7, lr}
1004fd8a:	b084      	sub	sp, #16
1004fd8c:	af00      	add	r7, sp, #0
1004fd8e:	6078      	str	r0, [r7, #4]
  NVMDB_RecordType *record_p;
  NVMDB_status_t status;

  record_p = (NVMDB_RecordType_ptr)handle_p->address;
1004fd90:	687b      	ldr	r3, [r7, #4]
1004fd92:	685b      	ldr	r3, [r3, #4]
1004fd94:	60fb      	str	r3, [r7, #12]

  if(handle_p->address >= handle_p->end_address || record_p->header.valid_flag == NO_RECORD)
1004fd96:	687b      	ldr	r3, [r7, #4]
1004fd98:	685a      	ldr	r2, [r3, #4]
1004fd9a:	687b      	ldr	r3, [r7, #4]
1004fd9c:	689b      	ldr	r3, [r3, #8]
1004fd9e:	429a      	cmp	r2, r3
1004fda0:	d203      	bcs.n	1004fdaa <NVMDB_DeleteRecordNoCache+0x22>
1004fda2:	68fb      	ldr	r3, [r7, #12]
1004fda4:	781b      	ldrb	r3, [r3, #0]
1004fda6:	2bff      	cmp	r3, #255	@ 0xff
1004fda8:	d101      	bne.n	1004fdae <NVMDB_DeleteRecordNoCache+0x26>
  {
    return NVMDB_STATUS_END_OF_DB;
1004fdaa:	2304      	movs	r3, #4
1004fdac:	e041      	b.n	1004fe32 <NVMDB_DeleteRecordNoCache+0xaa>
  }
  if(record_p->header.valid_flag == VALID_RECORD)
1004fdae:	68fb      	ldr	r3, [r7, #12]
1004fdb0:	781b      	ldrb	r3, [r3, #0]
1004fdb2:	2bfe      	cmp	r3, #254	@ 0xfe
1004fdb4:	d13c      	bne.n	1004fe30 <NVMDB_DeleteRecordNoCache+0xa8>
  {

    status = InvalidateRecord((uint32_t)record_p);
1004fdb6:	68fb      	ldr	r3, [r7, #12]
1004fdb8:	250b      	movs	r5, #11
1004fdba:	197c      	adds	r4, r7, r5
1004fdbc:	0018      	movs	r0, r3
1004fdbe:	f7ff ffcf 	bl	1004fd60 <InvalidateRecord>
1004fdc2:	0003      	movs	r3, r0
1004fdc4:	7023      	strb	r3, [r4, #0]
    if(status)
1004fdc6:	197b      	adds	r3, r7, r5
1004fdc8:	781b      	ldrb	r3, [r3, #0]
1004fdca:	2b00      	cmp	r3, #0
1004fdcc:	d002      	beq.n	1004fdd4 <NVMDB_DeleteRecordNoCache+0x4c>
    {
      return status;
1004fdce:	197b      	adds	r3, r7, r5
1004fdd0:	781b      	ldrb	r3, [r3, #0]
1004fdd2:	e02e      	b.n	1004fe32 <NVMDB_DeleteRecordNoCache+0xaa>
    }

    DBInfo[handle_p->id].valid_records--;
1004fdd4:	687b      	ldr	r3, [r7, #4]
1004fdd6:	781b      	ldrb	r3, [r3, #0]
1004fdd8:	001a      	movs	r2, r3
1004fdda:	4918      	ldr	r1, [pc, #96]	@ (1004fe3c <NVMDB_DeleteRecordNoCache+0xb4>)
1004fddc:	0013      	movs	r3, r2
1004fdde:	009b      	lsls	r3, r3, #2
1004fde0:	189b      	adds	r3, r3, r2
1004fde2:	009b      	lsls	r3, r3, #2
1004fde4:	18cb      	adds	r3, r1, r3
1004fde6:	3308      	adds	r3, #8
1004fde8:	881b      	ldrh	r3, [r3, #0]
1004fdea:	3b01      	subs	r3, #1
1004fdec:	b298      	uxth	r0, r3
1004fdee:	4913      	ldr	r1, [pc, #76]	@ (1004fe3c <NVMDB_DeleteRecordNoCache+0xb4>)
1004fdf0:	0013      	movs	r3, r2
1004fdf2:	009b      	lsls	r3, r3, #2
1004fdf4:	189b      	adds	r3, r3, r2
1004fdf6:	009b      	lsls	r3, r3, #2
1004fdf8:	18cb      	adds	r3, r1, r3
1004fdfa:	3308      	adds	r3, #8
1004fdfc:	1c02      	adds	r2, r0, #0
1004fdfe:	801a      	strh	r2, [r3, #0]
    DBInfo[handle_p->id].invalid_records++;
1004fe00:	687b      	ldr	r3, [r7, #4]
1004fe02:	781b      	ldrb	r3, [r3, #0]
1004fe04:	001a      	movs	r2, r3
1004fe06:	490d      	ldr	r1, [pc, #52]	@ (1004fe3c <NVMDB_DeleteRecordNoCache+0xb4>)
1004fe08:	0013      	movs	r3, r2
1004fe0a:	009b      	lsls	r3, r3, #2
1004fe0c:	189b      	adds	r3, r3, r2
1004fe0e:	009b      	lsls	r3, r3, #2
1004fe10:	18cb      	adds	r3, r1, r3
1004fe12:	330a      	adds	r3, #10
1004fe14:	881b      	ldrh	r3, [r3, #0]
1004fe16:	3301      	adds	r3, #1
1004fe18:	b298      	uxth	r0, r3
1004fe1a:	4908      	ldr	r1, [pc, #32]	@ (1004fe3c <NVMDB_DeleteRecordNoCache+0xb4>)
1004fe1c:	0013      	movs	r3, r2
1004fe1e:	009b      	lsls	r3, r3, #2
1004fe20:	189b      	adds	r3, r3, r2
1004fe22:	009b      	lsls	r3, r3, #2
1004fe24:	18cb      	adds	r3, r1, r3
1004fe26:	330a      	adds	r3, #10
1004fe28:	1c02      	adds	r2, r0, #0
1004fe2a:	801a      	strh	r2, [r3, #0]

    return NVMDB_STATUS_OK;
1004fe2c:	2300      	movs	r3, #0
1004fe2e:	e000      	b.n	1004fe32 <NVMDB_DeleteRecordNoCache+0xaa>
  }
  else
  {
    return NVMDB_STATUS_INVALID_RECORD;
1004fe30:	2305      	movs	r3, #5
  }
}
1004fe32:	0018      	movs	r0, r3
1004fe34:	46bd      	mov	sp, r7
1004fe36:	b004      	add	sp, #16
1004fe38:	bdb0      	pop	{r4, r5, r7, pc}
1004fe3a:	46c0      	nop			@ (mov r8, r8)
1004fe3c:	20002914 	.word	0x20002914

1004fe40 <ErasePage>:

static void ErasePage(uint32_t address, uint8_t num_pages)
{
1004fe40:	b580      	push	{r7, lr}
1004fe42:	b088      	sub	sp, #32
1004fe44:	af00      	add	r7, sp, #0
1004fe46:	6078      	str	r0, [r7, #4]
1004fe48:	000a      	movs	r2, r1
1004fe4a:	1cfb      	adds	r3, r7, #3
1004fe4c:	701a      	strb	r2, [r3, #0]
  int page_num = (address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1004fe4e:	687b      	ldr	r3, [r7, #4]
1004fe50:	4a0d      	ldr	r2, [pc, #52]	@ (1004fe88 <ErasePage+0x48>)
1004fe52:	4694      	mov	ip, r2
1004fe54:	4463      	add	r3, ip
1004fe56:	0adb      	lsrs	r3, r3, #11
1004fe58:	61fb      	str	r3, [r7, #28]

  DEBUG_GPIO_HIGH();
  NVMDB_FLASH_ERASE_PAGE(page_num, num_pages);
1004fe5a:	2110      	movs	r1, #16
1004fe5c:	187b      	adds	r3, r7, r1
1004fe5e:	2200      	movs	r2, #0
1004fe60:	601a      	str	r2, [r3, #0]
1004fe62:	69fa      	ldr	r2, [r7, #28]
1004fe64:	187b      	adds	r3, r7, r1
1004fe66:	605a      	str	r2, [r3, #4]
1004fe68:	1cfb      	adds	r3, r7, #3
1004fe6a:	781a      	ldrb	r2, [r3, #0]
1004fe6c:	187b      	adds	r3, r7, r1
1004fe6e:	609a      	str	r2, [r3, #8]
1004fe70:	230c      	movs	r3, #12
1004fe72:	18fa      	adds	r2, r7, r3
1004fe74:	187b      	adds	r3, r7, r1
1004fe76:	0011      	movs	r1, r2
1004fe78:	0018      	movs	r0, r3
1004fe7a:	f7f7 fba1 	bl	100475c0 <HAL_FLASHEx_Erase>
  DEBUG_GPIO_LOW();
}
1004fe7e:	46c0      	nop			@ (mov r8, r8)
1004fe80:	46bd      	mov	sp, r7
1004fe82:	b008      	add	sp, #32
1004fe84:	bd80      	pop	{r7, pc}
1004fe86:	46c0      	nop			@ (mov r8, r8)
1004fe88:	effc0000 	.word	0xeffc0000

1004fe8c <WriteBufferToFlash>:

/* Size of data must be multiple of 4. This function also erases the page if needed. */
static void WriteBufferToFlash(uint32_t address, uint32_t *data, uint32_t size)
{
1004fe8c:	b580      	push	{r7, lr}
1004fe8e:	b086      	sub	sp, #24
1004fe90:	af00      	add	r7, sp, #0
1004fe92:	60f8      	str	r0, [r7, #12]
1004fe94:	60b9      	str	r1, [r7, #8]
1004fe96:	607a      	str	r2, [r7, #4]
  /* Check if we are writing the same data in entire pages.
     If size is less than a page size, we need to erase the page to clean it. */
  if((size % PAGE_SIZE) == 0 && memcmp((uint8_t *)address, data, size) == 0)
1004fe98:	687b      	ldr	r3, [r7, #4]
1004fe9a:	055b      	lsls	r3, r3, #21
1004fe9c:	0d5b      	lsrs	r3, r3, #21
1004fe9e:	d107      	bne.n	1004feb0 <WriteBufferToFlash+0x24>
1004fea0:	68fb      	ldr	r3, [r7, #12]
1004fea2:	687a      	ldr	r2, [r7, #4]
1004fea4:	68b9      	ldr	r1, [r7, #8]
1004fea6:	0018      	movs	r0, r3
1004fea8:	f017 fe4e 	bl	10067b48 <memcmp>
1004feac:	1e03      	subs	r3, r0, #0
1004feae:	d026      	beq.n	1004fefe <WriteBufferToFlash+0x72>
  {
    return;
  }

  ErasePage(address, ROUNDPAGE_R(size) / PAGE_SIZE);
1004feb0:	687b      	ldr	r3, [r7, #4]
1004feb2:	3b01      	subs	r3, #1
1004feb4:	4a14      	ldr	r2, [pc, #80]	@ (1004ff08 <WriteBufferToFlash+0x7c>)
1004feb6:	4313      	orrs	r3, r2
1004feb8:	3301      	adds	r3, #1
1004feba:	0adb      	lsrs	r3, r3, #11
1004febc:	b2da      	uxtb	r2, r3
1004febe:	68fb      	ldr	r3, [r7, #12]
1004fec0:	0011      	movs	r1, r2
1004fec2:	0018      	movs	r0, r3
1004fec4:	f7ff ffbc 	bl	1004fe40 <ErasePage>

  DEBUG_GPIO_HIGH();
  for(int i = 0; i < size; i += 4)
1004fec8:	2300      	movs	r3, #0
1004feca:	617b      	str	r3, [r7, #20]
1004fecc:	e012      	b.n	1004fef4 <WriteBufferToFlash+0x68>
  {
    NVMDB_FLASH_WRITE(address + i, data[i / 4]);
1004fece:	697a      	ldr	r2, [r7, #20]
1004fed0:	68fb      	ldr	r3, [r7, #12]
1004fed2:	18d1      	adds	r1, r2, r3
1004fed4:	697b      	ldr	r3, [r7, #20]
1004fed6:	2b00      	cmp	r3, #0
1004fed8:	da00      	bge.n	1004fedc <WriteBufferToFlash+0x50>
1004feda:	3303      	adds	r3, #3
1004fedc:	109b      	asrs	r3, r3, #2
1004fede:	009b      	lsls	r3, r3, #2
1004fee0:	68ba      	ldr	r2, [r7, #8]
1004fee2:	18d3      	adds	r3, r2, r3
1004fee4:	681b      	ldr	r3, [r3, #0]
1004fee6:	001a      	movs	r2, r3
1004fee8:	2000      	movs	r0, #0
1004feea:	f7f7 fa8f 	bl	1004740c <HAL_FLASH_Program>
  for(int i = 0; i < size; i += 4)
1004feee:	697b      	ldr	r3, [r7, #20]
1004fef0:	3304      	adds	r3, #4
1004fef2:	617b      	str	r3, [r7, #20]
1004fef4:	697b      	ldr	r3, [r7, #20]
1004fef6:	687a      	ldr	r2, [r7, #4]
1004fef8:	429a      	cmp	r2, r3
1004fefa:	d8e8      	bhi.n	1004fece <WriteBufferToFlash+0x42>
1004fefc:	e000      	b.n	1004ff00 <WriteBufferToFlash+0x74>
    return;
1004fefe:	46c0      	nop			@ (mov r8, r8)
  }
  DEBUG_GPIO_LOW();
}
1004ff00:	46bd      	mov	sp, r7
1004ff02:	b006      	add	sp, #24
1004ff04:	bd80      	pop	{r7, pc}
1004ff06:	46c0      	nop			@ (mov r8, r8)
1004ff08:	000007ff 	.word	0x000007ff

1004ff0c <InitReadState>:

static void InitReadState(ReadStateType *state_p)
{
1004ff0c:	b580      	push	{r7, lr}
1004ff0e:	b082      	sub	sp, #8
1004ff10:	af00      	add	r7, sp, #0
1004ff12:	6078      	str	r0, [r7, #4]
  state_p->move_to_next_record = TRUE;
1004ff14:	687b      	ldr	r3, [r7, #4]
1004ff16:	2201      	movs	r2, #1
1004ff18:	701a      	strb	r2, [r3, #0]
  state_p->record_offset = 0;
1004ff1a:	687b      	ldr	r3, [r7, #4]
1004ff1c:	2200      	movs	r2, #0
1004ff1e:	805a      	strh	r2, [r3, #2]
  state_p->record_length = 0;
1004ff20:	687b      	ldr	r3, [r7, #4]
1004ff22:	2200      	movs	r2, #0
1004ff24:	809a      	strh	r2, [r3, #4]
}
1004ff26:	46c0      	nop			@ (mov r8, r8)
1004ff28:	46bd      	mov	sp, r7
1004ff2a:	b002      	add	sp, #8
1004ff2c:	bd80      	pop	{r7, pc}

1004ff2e <LoadDBToRAM>:
/* Call InitReadState() to initialize read_state before passing it to the function to start loading data from the database.
   This function returns NVMDB_STATUS_OK if other calls must be done to the same function to continue reading the database.
   Pass the same read_state variable to the function if calling it again to continue reading from the same database. */

static NVMDB_status_t LoadDBToRAM(NVMDB_HandleType *handle_p, uint8_t *buff, uint16_t buff_size, uint16_t *num_read_bytes_p, ReadStateType *read_state)
{
1004ff2e:	b5f0      	push	{r4, r5, r6, r7, lr}
1004ff30:	b08d      	sub	sp, #52	@ 0x34
1004ff32:	af04      	add	r7, sp, #16
1004ff34:	60f8      	str	r0, [r7, #12]
1004ff36:	60b9      	str	r1, [r7, #8]
1004ff38:	603b      	str	r3, [r7, #0]
1004ff3a:	1dbb      	adds	r3, r7, #6
1004ff3c:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t status;
  uint16_t free_buffer_size;
  NVMDB_RecordSizeType record_size, remaining_record_bytes;
  NVMDB_RecordHeaderType header;
  uint16_t index = 0;
1004ff3e:	231e      	movs	r3, #30
1004ff40:	18fb      	adds	r3, r7, r3
1004ff42:	2200      	movs	r2, #0
1004ff44:	801a      	strh	r2, [r3, #0]

  memset(buff, 0xFF, buff_size);
1004ff46:	1dbb      	adds	r3, r7, #6
1004ff48:	881a      	ldrh	r2, [r3, #0]
1004ff4a:	68bb      	ldr	r3, [r7, #8]
1004ff4c:	21ff      	movs	r1, #255	@ 0xff
1004ff4e:	0018      	movs	r0, r3
1004ff50:	f017 fe08 	bl	10067b64 <memset>

  header.valid_flag = VALID_RECORD;
1004ff54:	2310      	movs	r3, #16
1004ff56:	18fb      	adds	r3, r7, r3
1004ff58:	22fe      	movs	r2, #254	@ 0xfe
1004ff5a:	701a      	strb	r2, [r3, #0]

  while(1)
  {

    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
1004ff5c:	1dba      	adds	r2, r7, #6
1004ff5e:	251e      	movs	r5, #30
1004ff60:	197b      	adds	r3, r7, r5
1004ff62:	8812      	ldrh	r2, [r2, #0]
1004ff64:	881b      	ldrh	r3, [r3, #0]
1004ff66:	1ad3      	subs	r3, r2, r3
1004ff68:	b29a      	uxth	r2, r3
1004ff6a:	231c      	movs	r3, #28
1004ff6c:	18fb      	adds	r3, r7, r3
1004ff6e:	3a04      	subs	r2, #4
1004ff70:	801a      	strh	r2, [r3, #0]

    // Read the record
    if(read_state->move_to_next_record)
1004ff72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ff74:	781b      	ldrb	r3, [r3, #0]
1004ff76:	2b00      	cmp	r3, #0
1004ff78:	d04e      	beq.n	10050018 <LoadDBToRAM+0xea>
    {
      /* Passing read_state->record_length to the function because we do not want
         the function to retrieve the info from the header of the current record,
         since it may not be anymore in the same position in flash. */
      status = ReadNextRecordNoLock(handle_p, ALL_TYPES, 0, buff + index + RECORD_HEADER_SIZE, free_buffer_size, &record_size, read_state->record_length, &header.record_id);
1004ff7a:	197b      	adds	r3, r7, r5
1004ff7c:	881b      	ldrh	r3, [r3, #0]
1004ff7e:	3304      	adds	r3, #4
1004ff80:	68ba      	ldr	r2, [r7, #8]
1004ff82:	18d1      	adds	r1, r2, r3
1004ff84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ff86:	889b      	ldrh	r3, [r3, #4]
1004ff88:	261b      	movs	r6, #27
1004ff8a:	19bc      	adds	r4, r7, r6
1004ff8c:	68f8      	ldr	r0, [r7, #12]
1004ff8e:	2210      	movs	r2, #16
1004ff90:	18ba      	adds	r2, r7, r2
1004ff92:	3201      	adds	r2, #1
1004ff94:	9203      	str	r2, [sp, #12]
1004ff96:	9302      	str	r3, [sp, #8]
1004ff98:	2216      	movs	r2, #22
1004ff9a:	18bb      	adds	r3, r7, r2
1004ff9c:	9301      	str	r3, [sp, #4]
1004ff9e:	231c      	movs	r3, #28
1004ffa0:	18fb      	adds	r3, r7, r3
1004ffa2:	881b      	ldrh	r3, [r3, #0]
1004ffa4:	9300      	str	r3, [sp, #0]
1004ffa6:	000b      	movs	r3, r1
1004ffa8:	2200      	movs	r2, #0
1004ffaa:	21ff      	movs	r1, #255	@ 0xff
1004ffac:	f7ff fd14 	bl	1004f9d8 <ReadNextRecordNoLock>
1004ffb0:	0003      	movs	r3, r0
1004ffb2:	7023      	strb	r3, [r4, #0]
      read_state->record_length = record_size;
1004ffb4:	2216      	movs	r2, #22
1004ffb6:	18bb      	adds	r3, r7, r2
1004ffb8:	881a      	ldrh	r2, [r3, #0]
1004ffba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1004ffbc:	809a      	strh	r2, [r3, #4]

      if(status != NVMDB_STATUS_OK)
1004ffbe:	19bb      	adds	r3, r7, r6
1004ffc0:	781b      	ldrb	r3, [r3, #0]
1004ffc2:	2b00      	cmp	r3, #0
1004ffc4:	d006      	beq.n	1004ffd4 <LoadDBToRAM+0xa6>
      {
        *num_read_bytes_p = index;
1004ffc6:	683b      	ldr	r3, [r7, #0]
1004ffc8:	197a      	adds	r2, r7, r5
1004ffca:	8812      	ldrh	r2, [r2, #0]
1004ffcc:	801a      	strh	r2, [r3, #0]
        return status;
1004ffce:	19bb      	adds	r3, r7, r6
1004ffd0:	781b      	ldrb	r3, [r3, #0]
1004ffd2:	e0a1      	b.n	10050118 <LoadDBToRAM+0x1ea>
      }

      // Prepare the header and copy it to buffer
      header.length = record_size;
1004ffd4:	2316      	movs	r3, #22
1004ffd6:	18fb      	adds	r3, r7, r3
1004ffd8:	881a      	ldrh	r2, [r3, #0]
1004ffda:	2110      	movs	r1, #16
1004ffdc:	187b      	adds	r3, r7, r1
1004ffde:	805a      	strh	r2, [r3, #2]
      memcpy(buff + index, &header, RECORD_HEADER_SIZE);
1004ffe0:	251e      	movs	r5, #30
1004ffe2:	197b      	adds	r3, r7, r5
1004ffe4:	881b      	ldrh	r3, [r3, #0]
1004ffe6:	68ba      	ldr	r2, [r7, #8]
1004ffe8:	18d3      	adds	r3, r2, r3
1004ffea:	000c      	movs	r4, r1
1004ffec:	1879      	adds	r1, r7, r1
1004ffee:	2204      	movs	r2, #4
1004fff0:	0018      	movs	r0, r3
1004fff2:	f017 fe2c 	bl	10067c4e <memcpy>
      index += ROUND4_R(header.length + RECORD_HEADER_SIZE);
1004fff6:	193b      	adds	r3, r7, r4
1004fff8:	885b      	ldrh	r3, [r3, #2]
1004fffa:	3303      	adds	r3, #3
1004fffc:	b29b      	uxth	r3, r3
1004fffe:	b21b      	sxth	r3, r3
10050000:	2203      	movs	r2, #3
10050002:	4313      	orrs	r3, r2
10050004:	b21b      	sxth	r3, r3
10050006:	b29a      	uxth	r2, r3
10050008:	197b      	adds	r3, r7, r5
1005000a:	881b      	ldrh	r3, [r3, #0]
1005000c:	18d3      	adds	r3, r2, r3
1005000e:	b29a      	uxth	r2, r3
10050010:	197b      	adds	r3, r7, r5
10050012:	3201      	adds	r2, #1
10050014:	801a      	strh	r2, [r3, #0]
10050016:	e031      	b.n	1005007c <LoadDBToRAM+0x14e>
    }
    else
    {

      status = ReadCurrentRecordNoLock(handle_p, read_state->record_offset, buff + index, free_buffer_size, &record_size, read_state->record_length); // It will not read record in cache because this operation is not allowed if there are any.
10050018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005001a:	8859      	ldrh	r1, [r3, #2]
1005001c:	231e      	movs	r3, #30
1005001e:	18fb      	adds	r3, r7, r3
10050020:	881b      	ldrh	r3, [r3, #0]
10050022:	68ba      	ldr	r2, [r7, #8]
10050024:	18d5      	adds	r5, r2, r3
10050026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050028:	889b      	ldrh	r3, [r3, #4]
1005002a:	261b      	movs	r6, #27
1005002c:	19bc      	adds	r4, r7, r6
1005002e:	221c      	movs	r2, #28
10050030:	18ba      	adds	r2, r7, r2
10050032:	8812      	ldrh	r2, [r2, #0]
10050034:	68f8      	ldr	r0, [r7, #12]
10050036:	9301      	str	r3, [sp, #4]
10050038:	2316      	movs	r3, #22
1005003a:	18fb      	adds	r3, r7, r3
1005003c:	9300      	str	r3, [sp, #0]
1005003e:	0013      	movs	r3, r2
10050040:	002a      	movs	r2, r5
10050042:	f7ff fe20 	bl	1004fc86 <ReadCurrentRecordNoLock>
10050046:	0003      	movs	r3, r0
10050048:	7023      	strb	r3, [r4, #0]

      if(status != NVMDB_STATUS_OK)
1005004a:	19bb      	adds	r3, r7, r6
1005004c:	781b      	ldrb	r3, [r3, #0]
1005004e:	2b00      	cmp	r3, #0
10050050:	d002      	beq.n	10050058 <LoadDBToRAM+0x12a>
      {
        // This should not happen
        return status;
10050052:	19bb      	adds	r3, r7, r6
10050054:	781b      	ldrb	r3, [r3, #0]
10050056:	e05f      	b.n	10050118 <LoadDBToRAM+0x1ea>
      }
      index = ROUND4_R(record_size - read_state->record_offset);
10050058:	2316      	movs	r3, #22
1005005a:	18fb      	adds	r3, r7, r3
1005005c:	881a      	ldrh	r2, [r3, #0]
1005005e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050060:	885b      	ldrh	r3, [r3, #2]
10050062:	1ad3      	subs	r3, r2, r3
10050064:	b29b      	uxth	r3, r3
10050066:	3b01      	subs	r3, #1
10050068:	b29b      	uxth	r3, r3
1005006a:	b21b      	sxth	r3, r3
1005006c:	2203      	movs	r2, #3
1005006e:	4313      	orrs	r3, r2
10050070:	b21b      	sxth	r3, r3
10050072:	b29a      	uxth	r2, r3
10050074:	231e      	movs	r3, #30
10050076:	18fb      	adds	r3, r7, r3
10050078:	3201      	adds	r2, #1
1005007a:	801a      	strh	r2, [r3, #0]
    }

    // The number of remaining bytes for the current record that were to be read before calling last NVMDB_ReadNextRecord().
    // Rounded to the next multiple of 4 to find out if buffer can now be written inside the page or not.
    remaining_record_bytes = ROUND4_R(record_size - read_state->record_offset);
1005007c:	2316      	movs	r3, #22
1005007e:	18fb      	adds	r3, r7, r3
10050080:	881a      	ldrh	r2, [r3, #0]
10050082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050084:	885b      	ldrh	r3, [r3, #2]
10050086:	1ad3      	subs	r3, r2, r3
10050088:	b29b      	uxth	r3, r3
1005008a:	3b01      	subs	r3, #1
1005008c:	b29b      	uxth	r3, r3
1005008e:	b21b      	sxth	r3, r3
10050090:	2203      	movs	r2, #3
10050092:	4313      	orrs	r3, r2
10050094:	b21b      	sxth	r3, r3
10050096:	b29a      	uxth	r2, r3
10050098:	2118      	movs	r1, #24
1005009a:	187b      	adds	r3, r7, r1
1005009c:	3201      	adds	r2, #1
1005009e:	801a      	strh	r2, [r3, #0]

    if(remaining_record_bytes > free_buffer_size)
100500a0:	187a      	adds	r2, r7, r1
100500a2:	211c      	movs	r1, #28
100500a4:	187b      	adds	r3, r7, r1
100500a6:	8812      	ldrh	r2, [r2, #0]
100500a8:	881b      	ldrh	r3, [r3, #0]
100500aa:	429a      	cmp	r2, r3
100500ac:	d910      	bls.n	100500d0 <LoadDBToRAM+0x1a2>
    {
      // Not able to read the entire record.
      read_state->move_to_next_record = FALSE;
100500ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100500b0:	2200      	movs	r2, #0
100500b2:	701a      	strb	r2, [r3, #0]
      read_state->record_offset += free_buffer_size;
100500b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100500b6:	885a      	ldrh	r2, [r3, #2]
100500b8:	187b      	adds	r3, r7, r1
100500ba:	881b      	ldrh	r3, [r3, #0]
100500bc:	18d3      	adds	r3, r2, r3
100500be:	b29a      	uxth	r2, r3
100500c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100500c2:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100500c4:	683b      	ldr	r3, [r7, #0]
100500c6:	1dba      	adds	r2, r7, #6
100500c8:	8812      	ldrh	r2, [r2, #0]
100500ca:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
100500cc:	2300      	movs	r3, #0
100500ce:	e023      	b.n	10050118 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes == free_buffer_size)
100500d0:	2318      	movs	r3, #24
100500d2:	18fa      	adds	r2, r7, r3
100500d4:	231c      	movs	r3, #28
100500d6:	18fb      	adds	r3, r7, r3
100500d8:	8812      	ldrh	r2, [r2, #0]
100500da:	881b      	ldrh	r3, [r3, #0]
100500dc:	429a      	cmp	r2, r3
100500de:	d10b      	bne.n	100500f8 <LoadDBToRAM+0x1ca>
    {
      read_state->move_to_next_record = TRUE;
100500e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100500e2:	2201      	movs	r2, #1
100500e4:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
100500e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100500e8:	2200      	movs	r2, #0
100500ea:	805a      	strh	r2, [r3, #2]
      *num_read_bytes_p = buff_size;
100500ec:	683b      	ldr	r3, [r7, #0]
100500ee:	1dba      	adds	r2, r7, #6
100500f0:	8812      	ldrh	r2, [r2, #0]
100500f2:	801a      	strh	r2, [r3, #0]
      return NVMDB_STATUS_OK;
100500f4:	2300      	movs	r3, #0
100500f6:	e00f      	b.n	10050118 <LoadDBToRAM+0x1ea>
    }
    else if(remaining_record_bytes < free_buffer_size)
100500f8:	2318      	movs	r3, #24
100500fa:	18fa      	adds	r2, r7, r3
100500fc:	231c      	movs	r3, #28
100500fe:	18fb      	adds	r3, r7, r3
10050100:	8812      	ldrh	r2, [r2, #0]
10050102:	881b      	ldrh	r3, [r3, #0]
10050104:	429a      	cmp	r2, r3
10050106:	d300      	bcc.n	1005010a <LoadDBToRAM+0x1dc>
10050108:	e728      	b.n	1004ff5c <LoadDBToRAM+0x2e>
    {
      read_state->move_to_next_record = TRUE;
1005010a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005010c:	2201      	movs	r2, #1
1005010e:	701a      	strb	r2, [r3, #0]
      read_state->record_offset = 0;
10050110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10050112:	2200      	movs	r2, #0
10050114:	805a      	strh	r2, [r3, #2]
    free_buffer_size = buff_size - index - RECORD_HEADER_SIZE;
10050116:	e721      	b.n	1004ff5c <LoadDBToRAM+0x2e>
    }
  }
}
10050118:	0018      	movs	r0, r3
1005011a:	46bd      	mov	sp, r7
1005011c:	b009      	add	sp, #36	@ 0x24
1005011e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10050120 <CleanLargeDB>:
// No inline to avoid allocating NVM_buffer multiple times at the same time.
__NOINLINE static NVMDB_status_t CleanLargeDB(NVMDB_IdType NVMDB_id)
{
10050120:	b5f0      	push	{r4, r5, r6, r7, lr}
10050122:	4c60      	ldr	r4, [pc, #384]	@ (100502a4 <CleanLargeDB+0x184>)
10050124:	44a5      	add	sp, r4
10050126:	af02      	add	r7, sp, #8
10050128:	0002      	movs	r2, r0
1005012a:	4b5f      	ldr	r3, [pc, #380]	@ (100502a8 <CleanLargeDB+0x188>)
1005012c:	2184      	movs	r1, #132	@ 0x84
1005012e:	0109      	lsls	r1, r1, #4
10050130:	185b      	adds	r3, r3, r1
10050132:	19db      	adds	r3, r3, r7
10050134:	701a      	strb	r2, [r3, #0]
  ReadStateType previous_state;
  int32_t needed_time;
  uint8_t clean_started = FALSE;
#endif

  if(!DBInfo[NVMDB_id].invalid_records)
10050136:	4b5c      	ldr	r3, [pc, #368]	@ (100502a8 <CleanLargeDB+0x188>)
10050138:	185b      	adds	r3, r3, r1
1005013a:	19db      	adds	r3, r3, r7
1005013c:	781a      	ldrb	r2, [r3, #0]
1005013e:	495b      	ldr	r1, [pc, #364]	@ (100502ac <CleanLargeDB+0x18c>)
10050140:	0013      	movs	r3, r2
10050142:	009b      	lsls	r3, r3, #2
10050144:	189b      	adds	r3, r3, r2
10050146:	009b      	lsls	r3, r3, #2
10050148:	18cb      	adds	r3, r1, r3
1005014a:	330a      	adds	r3, #10
1005014c:	881b      	ldrh	r3, [r3, #0]
1005014e:	2b00      	cmp	r3, #0
10050150:	d101      	bne.n	10050156 <CleanLargeDB+0x36>
  {
    return NVMDB_STATUS_OK;
10050152:	2300      	movs	r3, #0
10050154:	e0a0      	b.n	10050298 <CleanLargeDB+0x178>
  {
    return NVMDB_STATUS_CACHE_FULL;
  }
#endif

  status = NVMDB_HandleInit(NVMDB_id, &handle);
10050156:	4b56      	ldr	r3, [pc, #344]	@ (100502b0 <CleanLargeDB+0x190>)
10050158:	18fc      	adds	r4, r7, r3
1005015a:	4d56      	ldr	r5, [pc, #344]	@ (100502b4 <CleanLargeDB+0x194>)
1005015c:	197a      	adds	r2, r7, r5
1005015e:	4b52      	ldr	r3, [pc, #328]	@ (100502a8 <CleanLargeDB+0x188>)
10050160:	2184      	movs	r1, #132	@ 0x84
10050162:	0109      	lsls	r1, r1, #4
10050164:	185b      	adds	r3, r3, r1
10050166:	19db      	adds	r3, r3, r7
10050168:	781b      	ldrb	r3, [r3, #0]
1005016a:	0011      	movs	r1, r2
1005016c:	0018      	movs	r0, r3
1005016e:	f000 fcd3 	bl	10050b18 <NVMDB_HandleInit>
10050172:	0003      	movs	r3, r0
10050174:	7023      	strb	r3, [r4, #0]
  flash_write_address = (uint32_t)handle.address;
10050176:	197b      	adds	r3, r7, r5
10050178:	685b      	ldr	r3, [r3, #4]
1005017a:	4a4f      	ldr	r2, [pc, #316]	@ (100502b8 <CleanLargeDB+0x198>)
1005017c:	18ba      	adds	r2, r7, r2
1005017e:	6013      	str	r3, [r2, #0]

  InitReadState(&state);
10050180:	4b4e      	ldr	r3, [pc, #312]	@ (100502bc <CleanLargeDB+0x19c>)
10050182:	18fb      	adds	r3, r7, r3
10050184:	0018      	movs	r0, r3
10050186:	f7ff fec1 	bl	1004ff0c <InitReadState>
#if NVM_CACHE
    previous_state = state;
    previous_handle = handle;
#endif

    status = LoadDBToRAM(&handle, NVM_buffer, sizeof(NVM_buffer), &num_read_bytes, &state);
1005018a:	4e49      	ldr	r6, [pc, #292]	@ (100502b0 <CleanLargeDB+0x190>)
1005018c:	19bc      	adds	r4, r7, r6
1005018e:	4b4c      	ldr	r3, [pc, #304]	@ (100502c0 <CleanLargeDB+0x1a0>)
10050190:	18fd      	adds	r5, r7, r3
10050192:	2380      	movs	r3, #128	@ 0x80
10050194:	011a      	lsls	r2, r3, #4
10050196:	230c      	movs	r3, #12
10050198:	18f9      	adds	r1, r7, r3
1005019a:	4b46      	ldr	r3, [pc, #280]	@ (100502b4 <CleanLargeDB+0x194>)
1005019c:	18f8      	adds	r0, r7, r3
1005019e:	4b47      	ldr	r3, [pc, #284]	@ (100502bc <CleanLargeDB+0x19c>)
100501a0:	18fb      	adds	r3, r7, r3
100501a2:	9300      	str	r3, [sp, #0]
100501a4:	002b      	movs	r3, r5
100501a6:	f7ff fec2 	bl	1004ff2e <LoadDBToRAM>
100501aa:	0003      	movs	r3, r0
100501ac:	7023      	strb	r3, [r4, #0]
    if(status != NVMDB_STATUS_END_OF_DB && status != NVMDB_STATUS_OK) // No other error codes are expected. This should not happen.
100501ae:	19bb      	adds	r3, r7, r6
100501b0:	781b      	ldrb	r3, [r3, #0]
100501b2:	2b04      	cmp	r3, #4
100501b4:	d006      	beq.n	100501c4 <CleanLargeDB+0xa4>
100501b6:	19bb      	adds	r3, r7, r6
100501b8:	781b      	ldrb	r3, [r3, #0]
100501ba:	2b00      	cmp	r3, #0
100501bc:	d002      	beq.n	100501c4 <CleanLargeDB+0xa4>
    {
      return status;
100501be:	19bb      	adds	r3, r7, r6
100501c0:	781b      	ldrb	r3, [r3, #0]
100501c2:	e069      	b.n	10050298 <CleanLargeDB+0x178>
    }

    if(num_read_bytes == sizeof(NVM_buffer) || status != NVMDB_STATUS_OK)
100501c4:	4b3e      	ldr	r3, [pc, #248]	@ (100502c0 <CleanLargeDB+0x1a0>)
100501c6:	18fb      	adds	r3, r7, r3
100501c8:	881a      	ldrh	r2, [r3, #0]
100501ca:	2380      	movs	r3, #128	@ 0x80
100501cc:	011b      	lsls	r3, r3, #4
100501ce:	429a      	cmp	r2, r3
100501d0:	d004      	beq.n	100501dc <CleanLargeDB+0xbc>
100501d2:	4b37      	ldr	r3, [pc, #220]	@ (100502b0 <CleanLargeDB+0x190>)
100501d4:	18fb      	adds	r3, r7, r3
100501d6:	781b      	ldrb	r3, [r3, #0]
100501d8:	2b00      	cmp	r3, #0
100501da:	d0d6      	beq.n	1005018a <CleanLargeDB+0x6a>
    {
      if(num_read_bytes == 0)
100501dc:	4a38      	ldr	r2, [pc, #224]	@ (100502c0 <CleanLargeDB+0x1a0>)
100501de:	18bb      	adds	r3, r7, r2
100501e0:	881b      	ldrh	r3, [r3, #0]
100501e2:	2b00      	cmp	r3, #0
100501e4:	d019      	beq.n	1005021a <CleanLargeDB+0xfa>
        }
      }
#endif

      // Write buffer to flash
      WriteBufferToFlash(flash_write_address, (uint32_t *)NVM_buffer, num_read_bytes);
100501e6:	18bb      	adds	r3, r7, r2
100501e8:	881b      	ldrh	r3, [r3, #0]
100501ea:	001a      	movs	r2, r3
100501ec:	230c      	movs	r3, #12
100501ee:	18f9      	adds	r1, r7, r3
100501f0:	4c31      	ldr	r4, [pc, #196]	@ (100502b8 <CleanLargeDB+0x198>)
100501f2:	193b      	adds	r3, r7, r4
100501f4:	681b      	ldr	r3, [r3, #0]
100501f6:	0018      	movs	r0, r3
100501f8:	f7ff fe48 	bl	1004fe8c <WriteBufferToFlash>
#if NVM_CACHE
      ATOMIC_SECTION_END();

      clean_started = TRUE;
#endif
      flash_write_address += sizeof(NVM_buffer);
100501fc:	0022      	movs	r2, r4
100501fe:	18bb      	adds	r3, r7, r2
10050200:	681b      	ldr	r3, [r3, #0]
10050202:	2180      	movs	r1, #128	@ 0x80
10050204:	0109      	lsls	r1, r1, #4
10050206:	468c      	mov	ip, r1
10050208:	4463      	add	r3, ip
1005020a:	18ba      	adds	r2, r7, r2
1005020c:	6013      	str	r3, [r2, #0]
      if(status != NVMDB_STATUS_OK)
1005020e:	4b28      	ldr	r3, [pc, #160]	@ (100502b0 <CleanLargeDB+0x190>)
10050210:	18fb      	adds	r3, r7, r3
10050212:	781b      	ldrb	r3, [r3, #0]
10050214:	2b00      	cmp	r3, #0
10050216:	d102      	bne.n	1005021e <CleanLargeDB+0xfe>
  {
10050218:	e7b7      	b.n	1005018a <CleanLargeDB+0x6a>
        break;
1005021a:	46c0      	nop			@ (mov r8, r8)
1005021c:	e000      	b.n	10050220 <CleanLargeDB+0x100>
      {
        break;
1005021e:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }
  // Erase remaining pages. A possible optimization could be to erase the page only if it is not already erased.
  uint8_t num_pages = (ROUNDPAGE_R(handle.end_address) - flash_write_address) / PAGE_SIZE;
10050220:	4b24      	ldr	r3, [pc, #144]	@ (100502b4 <CleanLargeDB+0x194>)
10050222:	18fb      	adds	r3, r7, r3
10050224:	689b      	ldr	r3, [r3, #8]
10050226:	3b01      	subs	r3, #1
10050228:	4a26      	ldr	r2, [pc, #152]	@ (100502c4 <CleanLargeDB+0x1a4>)
1005022a:	431a      	orrs	r2, r3
1005022c:	4922      	ldr	r1, [pc, #136]	@ (100502b8 <CleanLargeDB+0x198>)
1005022e:	187b      	adds	r3, r7, r1
10050230:	681b      	ldr	r3, [r3, #0]
10050232:	1ad3      	subs	r3, r2, r3
10050234:	3301      	adds	r3, #1
10050236:	0ada      	lsrs	r2, r3, #11
10050238:	4823      	ldr	r0, [pc, #140]	@ (100502c8 <CleanLargeDB+0x1a8>)
1005023a:	183b      	adds	r3, r7, r0
1005023c:	701a      	strb	r2, [r3, #0]
  uint8_t page_num_start = (flash_write_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
1005023e:	187b      	adds	r3, r7, r1
10050240:	681b      	ldr	r3, [r3, #0]
10050242:	4a22      	ldr	r2, [pc, #136]	@ (100502cc <CleanLargeDB+0x1ac>)
10050244:	4694      	mov	ip, r2
10050246:	4463      	add	r3, ip
10050248:	0ada      	lsrs	r2, r3, #11
1005024a:	4c21      	ldr	r4, [pc, #132]	@ (100502d0 <CleanLargeDB+0x1b0>)
1005024c:	193b      	adds	r3, r7, r4
1005024e:	701a      	strb	r2, [r3, #0]
  if(EraseWithTimeCheck(&page_num_start, &num_pages) == NVMDB_STATUS_NOT_ENOUGH_TIME)
  {
    return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
  }
#else
  NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10050250:	2181      	movs	r1, #129	@ 0x81
10050252:	0109      	lsls	r1, r1, #4
10050254:	187b      	adds	r3, r7, r1
10050256:	2200      	movs	r2, #0
10050258:	601a      	str	r2, [r3, #0]
1005025a:	193b      	adds	r3, r7, r4
1005025c:	781a      	ldrb	r2, [r3, #0]
1005025e:	187b      	adds	r3, r7, r1
10050260:	605a      	str	r2, [r3, #4]
10050262:	183b      	adds	r3, r7, r0
10050264:	781a      	ldrb	r2, [r3, #0]
10050266:	187b      	adds	r3, r7, r1
10050268:	609a      	str	r2, [r3, #8]
1005026a:	4b1a      	ldr	r3, [pc, #104]	@ (100502d4 <CleanLargeDB+0x1b4>)
1005026c:	18fa      	adds	r2, r7, r3
1005026e:	187b      	adds	r3, r7, r1
10050270:	0011      	movs	r1, r2
10050272:	0018      	movs	r0, r3
10050274:	f7f7 f9a4 	bl	100475c0 <HAL_FLASHEx_Erase>
#endif

  // Update free space.
  return NVMDB_get_info(&DBInfo[NVMDB_id]);
10050278:	4b0b      	ldr	r3, [pc, #44]	@ (100502a8 <CleanLargeDB+0x188>)
1005027a:	2284      	movs	r2, #132	@ 0x84
1005027c:	0112      	lsls	r2, r2, #4
1005027e:	189b      	adds	r3, r3, r2
10050280:	19db      	adds	r3, r3, r7
10050282:	781a      	ldrb	r2, [r3, #0]
10050284:	0013      	movs	r3, r2
10050286:	009b      	lsls	r3, r3, #2
10050288:	189b      	adds	r3, r3, r2
1005028a:	009b      	lsls	r3, r3, #2
1005028c:	4a07      	ldr	r2, [pc, #28]	@ (100502ac <CleanLargeDB+0x18c>)
1005028e:	189b      	adds	r3, r3, r2
10050290:	0018      	movs	r0, r3
10050292:	f7ff fad5 	bl	1004f840 <NVMDB_get_info>
10050296:	0003      	movs	r3, r0
}
10050298:	0018      	movs	r0, r3
1005029a:	46bd      	mov	sp, r7
1005029c:	4b0e      	ldr	r3, [pc, #56]	@ (100502d8 <CleanLargeDB+0x1b8>)
1005029e:	449d      	add	sp, r3
100502a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100502a2:	46c0      	nop			@ (mov r8, r8)
100502a4:	fffff7b4 	.word	0xfffff7b4
100502a8:	fffff7c7 	.word	0xfffff7c7
100502ac:	20002914 	.word	0x20002914
100502b0:	0000083b 	.word	0x0000083b
100502b4:	00000824 	.word	0x00000824
100502b8:	0000083c 	.word	0x0000083c
100502bc:	0000081c 	.word	0x0000081c
100502c0:	00000836 	.word	0x00000836
100502c4:	000007ff 	.word	0x000007ff
100502c8:	0000083a 	.word	0x0000083a
100502cc:	effc0000 	.word	0xeffc0000
100502d0:	00000839 	.word	0x00000839
100502d4:	0000080c 	.word	0x0000080c
100502d8:	00000844 	.word	0x00000844

100502dc <CleanPage>:
  return NVMDB_get_info(&DBInfo[op->handle.id]);
}
#endif

__NOINLINE static NVMDB_status_t CleanPage(const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100502dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100502de:	4c7a      	ldr	r4, [pc, #488]	@ (100504c8 <CleanPage+0x1ec>)
100502e0:	44a5      	add	sp, r4
100502e2:	af02      	add	r7, sp, #8
100502e4:	6078      	str	r0, [r7, #4]
  NVMDB_status_t status;
  NVMDB_status_t ret = NVMDB_STATUS_OK;
100502e6:	4b79      	ldr	r3, [pc, #484]	@ (100504cc <CleanPage+0x1f0>)
100502e8:	18fb      	adds	r3, r7, r3
100502ea:	2200      	movs	r2, #0
100502ec:	701a      	strb	r2, [r3, #0]
  NVMDB_HandleType handle;
  uint32_t page_offset;
  uint16_t num_bytes;
  ReadStateType state;
  int i;
  uint8_t found = FALSE;
100502ee:	4b78      	ldr	r3, [pc, #480]	@ (100504d0 <CleanPage+0x1f4>)
100502f0:	18fb      	adds	r3, r7, r3
100502f2:	2200      	movs	r2, #0
100502f4:	701a      	strb	r2, [r3, #0]
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  /* Check if there are invalids record in the page and if there are pending operations on the databases. */
  for(i = 0; i < smallDBContainer_p->num_db; i++)
100502f6:	2300      	movs	r3, #0
100502f8:	4a76      	ldr	r2, [pc, #472]	@ (100504d4 <CleanPage+0x1f8>)
100502fa:	18ba      	adds	r2, r7, r2
100502fc:	6013      	str	r3, [r2, #0]
100502fe:	e023      	b.n	10050348 <CleanPage+0x6c>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10050300:	687b      	ldr	r3, [r7, #4]
10050302:	6899      	ldr	r1, [r3, #8]
10050304:	4b73      	ldr	r3, [pc, #460]	@ (100504d4 <CleanPage+0x1f8>)
10050306:	18fb      	adds	r3, r7, r3
10050308:	681a      	ldr	r2, [r3, #0]
1005030a:	0013      	movs	r3, r2
1005030c:	005b      	lsls	r3, r3, #1
1005030e:	189b      	adds	r3, r3, r2
10050310:	009b      	lsls	r3, r3, #2
10050312:	18ca      	adds	r2, r1, r3
10050314:	4970      	ldr	r1, [pc, #448]	@ (100504d8 <CleanPage+0x1fc>)
10050316:	187b      	adds	r3, r7, r1
10050318:	7812      	ldrb	r2, [r2, #0]
1005031a:	701a      	strb	r2, [r3, #0]
    if(DBInfo[NVMDB_id].invalid_records)
1005031c:	187b      	adds	r3, r7, r1
1005031e:	781a      	ldrb	r2, [r3, #0]
10050320:	496e      	ldr	r1, [pc, #440]	@ (100504dc <CleanPage+0x200>)
10050322:	0013      	movs	r3, r2
10050324:	009b      	lsls	r3, r3, #2
10050326:	189b      	adds	r3, r3, r2
10050328:	009b      	lsls	r3, r3, #2
1005032a:	18cb      	adds	r3, r1, r3
1005032c:	330a      	adds	r3, #10
1005032e:	881b      	ldrh	r3, [r3, #0]
10050330:	2b00      	cmp	r3, #0
10050332:	d003      	beq.n	1005033c <CleanPage+0x60>
    {
      found = TRUE;
10050334:	4b66      	ldr	r3, [pc, #408]	@ (100504d0 <CleanPage+0x1f4>)
10050336:	18fb      	adds	r3, r7, r3
10050338:	2201      	movs	r2, #1
1005033a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1005033c:	4a65      	ldr	r2, [pc, #404]	@ (100504d4 <CleanPage+0x1f8>)
1005033e:	18bb      	adds	r3, r7, r2
10050340:	681b      	ldr	r3, [r3, #0]
10050342:	3301      	adds	r3, #1
10050344:	18ba      	adds	r2, r7, r2
10050346:	6013      	str	r3, [r2, #0]
10050348:	687b      	ldr	r3, [r7, #4]
1005034a:	791b      	ldrb	r3, [r3, #4]
1005034c:	001a      	movs	r2, r3
1005034e:	4b61      	ldr	r3, [pc, #388]	@ (100504d4 <CleanPage+0x1f8>)
10050350:	18fb      	adds	r3, r7, r3
10050352:	681b      	ldr	r3, [r3, #0]
10050354:	4293      	cmp	r3, r2
10050356:	dbd3      	blt.n	10050300 <CleanPage+0x24>
    {
      return NVMDB_STATUS_CACHE_OP_PENDING;
    }
#endif
  }
  if(!found)
10050358:	4b5d      	ldr	r3, [pc, #372]	@ (100504d0 <CleanPage+0x1f4>)
1005035a:	18fb      	adds	r3, r7, r3
1005035c:	781b      	ldrb	r3, [r3, #0]
1005035e:	2b00      	cmp	r3, #0
10050360:	d101      	bne.n	10050366 <CleanPage+0x8a>
  {
    /* No invalid records found. */
    return NVMDB_STATUS_OK;
10050362:	2300      	movs	r3, #0
10050364:	e0ab      	b.n	100504be <CleanPage+0x1e2>
  }

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
10050366:	2380      	movs	r3, #128	@ 0x80
10050368:	011a      	lsls	r2, r3, #4
1005036a:	2308      	movs	r3, #8
1005036c:	18fb      	adds	r3, r7, r3
1005036e:	21ff      	movs	r1, #255	@ 0xff
10050370:	0018      	movs	r0, r3
10050372:	f017 fbf7 	bl	10067b64 <memset>

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050376:	2300      	movs	r3, #0
10050378:	4a56      	ldr	r2, [pc, #344]	@ (100504d4 <CleanPage+0x1f8>)
1005037a:	18ba      	adds	r2, r7, r2
1005037c:	6013      	str	r3, [r2, #0]
1005037e:	e051      	b.n	10050424 <CleanPage+0x148>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
10050380:	687b      	ldr	r3, [r7, #4]
10050382:	6899      	ldr	r1, [r3, #8]
10050384:	4853      	ldr	r0, [pc, #332]	@ (100504d4 <CleanPage+0x1f8>)
10050386:	183b      	adds	r3, r7, r0
10050388:	681a      	ldr	r2, [r3, #0]
1005038a:	0013      	movs	r3, r2
1005038c:	005b      	lsls	r3, r3, #1
1005038e:	189b      	adds	r3, r3, r2
10050390:	009b      	lsls	r3, r3, #2
10050392:	18ca      	adds	r2, r1, r3
10050394:	4d50      	ldr	r5, [pc, #320]	@ (100504d8 <CleanPage+0x1fc>)
10050396:	197b      	adds	r3, r7, r5
10050398:	7812      	ldrb	r2, [r2, #0]
1005039a:	701a      	strb	r2, [r3, #0]
    page_offset = smallDBContainer_p->dbs[i].offset;
1005039c:	687b      	ldr	r3, [r7, #4]
1005039e:	6899      	ldr	r1, [r3, #8]
100503a0:	183b      	adds	r3, r7, r0
100503a2:	681a      	ldr	r2, [r3, #0]
100503a4:	0013      	movs	r3, r2
100503a6:	005b      	lsls	r3, r3, #1
100503a8:	189b      	adds	r3, r3, r2
100503aa:	009b      	lsls	r3, r3, #2
100503ac:	18cb      	adds	r3, r1, r3
100503ae:	685b      	ldr	r3, [r3, #4]
100503b0:	2282      	movs	r2, #130	@ 0x82
100503b2:	0112      	lsls	r2, r2, #4
100503b4:	18ba      	adds	r2, r7, r2
100503b6:	6013      	str	r3, [r2, #0]

    status = NVMDB_HandleInit(NVMDB_id, &handle);
100503b8:	4e49      	ldr	r6, [pc, #292]	@ (100504e0 <CleanPage+0x204>)
100503ba:	19bc      	adds	r4, r7, r6
100503bc:	2381      	movs	r3, #129	@ 0x81
100503be:	011b      	lsls	r3, r3, #4
100503c0:	18fa      	adds	r2, r7, r3
100503c2:	197b      	adds	r3, r7, r5
100503c4:	781b      	ldrb	r3, [r3, #0]
100503c6:	0011      	movs	r1, r2
100503c8:	0018      	movs	r0, r3
100503ca:	f000 fba5 	bl	10050b18 <NVMDB_HandleInit>
100503ce:	0003      	movs	r3, r0
100503d0:	7023      	strb	r3, [r4, #0]
    if(status) // This should not happen
100503d2:	19bb      	adds	r3, r7, r6
100503d4:	781b      	ldrb	r3, [r3, #0]
100503d6:	2b00      	cmp	r3, #0
100503d8:	d001      	beq.n	100503de <CleanPage+0x102>
    {
      return NVMDB_STATUS_OK;
100503da:	2300      	movs	r3, #0
100503dc:	e06f      	b.n	100504be <CleanPage+0x1e2>
    }

    InitReadState(&state);
100503de:	4d41      	ldr	r5, [pc, #260]	@ (100504e4 <CleanPage+0x208>)
100503e0:	197b      	adds	r3, r7, r5
100503e2:	0018      	movs	r0, r3
100503e4:	f7ff fd92 	bl	1004ff0c <InitReadState>
    // It cannot happen that the database does not fill inside the buffer. So we call LoadDBToRAM() just once for each db.
    LoadDBToRAM(&handle, NVM_buffer + page_offset, sizeof(NVM_buffer) - page_offset, &num_bytes, &state);
100503e8:	2308      	movs	r3, #8
100503ea:	18fa      	adds	r2, r7, r3
100503ec:	2082      	movs	r0, #130	@ 0x82
100503ee:	0100      	lsls	r0, r0, #4
100503f0:	183b      	adds	r3, r7, r0
100503f2:	681b      	ldr	r3, [r3, #0]
100503f4:	18d1      	adds	r1, r2, r3
100503f6:	183b      	adds	r3, r7, r0
100503f8:	681b      	ldr	r3, [r3, #0]
100503fa:	b29b      	uxth	r3, r3
100503fc:	2280      	movs	r2, #128	@ 0x80
100503fe:	0112      	lsls	r2, r2, #4
10050400:	1ad3      	subs	r3, r2, r3
10050402:	b29a      	uxth	r2, r3
10050404:	4b38      	ldr	r3, [pc, #224]	@ (100504e8 <CleanPage+0x20c>)
10050406:	18fc      	adds	r4, r7, r3
10050408:	2381      	movs	r3, #129	@ 0x81
1005040a:	011b      	lsls	r3, r3, #4
1005040c:	18f8      	adds	r0, r7, r3
1005040e:	197b      	adds	r3, r7, r5
10050410:	9300      	str	r3, [sp, #0]
10050412:	0023      	movs	r3, r4
10050414:	f7ff fd8b 	bl	1004ff2e <LoadDBToRAM>
  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050418:	4a2e      	ldr	r2, [pc, #184]	@ (100504d4 <CleanPage+0x1f8>)
1005041a:	18bb      	adds	r3, r7, r2
1005041c:	681b      	ldr	r3, [r3, #0]
1005041e:	3301      	adds	r3, #1
10050420:	18ba      	adds	r2, r7, r2
10050422:	6013      	str	r3, [r2, #0]
10050424:	687b      	ldr	r3, [r7, #4]
10050426:	791b      	ldrb	r3, [r3, #4]
10050428:	001a      	movs	r2, r3
1005042a:	4c2a      	ldr	r4, [pc, #168]	@ (100504d4 <CleanPage+0x1f8>)
1005042c:	193b      	adds	r3, r7, r4
1005042e:	681b      	ldr	r3, [r3, #0]
10050430:	4293      	cmp	r3, r2
10050432:	dba5      	blt.n	10050380 <CleanPage+0xa4>
    ATOMIC_SECTION_END();
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
10050434:	687b      	ldr	r3, [r7, #4]
10050436:	681b      	ldr	r3, [r3, #0]
10050438:	2280      	movs	r2, #128	@ 0x80
1005043a:	0112      	lsls	r2, r2, #4
1005043c:	2108      	movs	r1, #8
1005043e:	1879      	adds	r1, r7, r1
10050440:	0018      	movs	r0, r3
10050442:	f7ff fd23 	bl	1004fe8c <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  for(i = 0; i < smallDBContainer_p->num_db; i++)
10050446:	2300      	movs	r3, #0
10050448:	193a      	adds	r2, r7, r4
1005044a:	6013      	str	r3, [r2, #0]
1005044c:	e02c      	b.n	100504a8 <CleanPage+0x1cc>
  {
    NVMDB_id = smallDBContainer_p->dbs[i].id;
1005044e:	687b      	ldr	r3, [r7, #4]
10050450:	6899      	ldr	r1, [r3, #8]
10050452:	4b20      	ldr	r3, [pc, #128]	@ (100504d4 <CleanPage+0x1f8>)
10050454:	18fb      	adds	r3, r7, r3
10050456:	681a      	ldr	r2, [r3, #0]
10050458:	0013      	movs	r3, r2
1005045a:	005b      	lsls	r3, r3, #1
1005045c:	189b      	adds	r3, r3, r2
1005045e:	009b      	lsls	r3, r3, #2
10050460:	18ca      	adds	r2, r1, r3
10050462:	491d      	ldr	r1, [pc, #116]	@ (100504d8 <CleanPage+0x1fc>)
10050464:	187b      	adds	r3, r7, r1
10050466:	7812      	ldrb	r2, [r2, #0]
10050468:	701a      	strb	r2, [r3, #0]
    // Update free space.
    status = NVMDB_get_info(&DBInfo[NVMDB_id]);
1005046a:	187b      	adds	r3, r7, r1
1005046c:	781a      	ldrb	r2, [r3, #0]
1005046e:	0013      	movs	r3, r2
10050470:	009b      	lsls	r3, r3, #2
10050472:	189b      	adds	r3, r3, r2
10050474:	009b      	lsls	r3, r3, #2
10050476:	4a19      	ldr	r2, [pc, #100]	@ (100504dc <CleanPage+0x200>)
10050478:	189b      	adds	r3, r3, r2
1005047a:	4d19      	ldr	r5, [pc, #100]	@ (100504e0 <CleanPage+0x204>)
1005047c:	197c      	adds	r4, r7, r5
1005047e:	0018      	movs	r0, r3
10050480:	f7ff f9de 	bl	1004f840 <NVMDB_get_info>
10050484:	0003      	movs	r3, r0
10050486:	7023      	strb	r3, [r4, #0]
    if(status)
10050488:	002a      	movs	r2, r5
1005048a:	18bb      	adds	r3, r7, r2
1005048c:	781b      	ldrb	r3, [r3, #0]
1005048e:	2b00      	cmp	r3, #0
10050490:	d004      	beq.n	1005049c <CleanPage+0x1c0>
    {
      ret = status; // Return last error if any.
10050492:	4b0e      	ldr	r3, [pc, #56]	@ (100504cc <CleanPage+0x1f0>)
10050494:	18fb      	adds	r3, r7, r3
10050496:	18ba      	adds	r2, r7, r2
10050498:	7812      	ldrb	r2, [r2, #0]
1005049a:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < smallDBContainer_p->num_db; i++)
1005049c:	4a0d      	ldr	r2, [pc, #52]	@ (100504d4 <CleanPage+0x1f8>)
1005049e:	18bb      	adds	r3, r7, r2
100504a0:	681b      	ldr	r3, [r3, #0]
100504a2:	3301      	adds	r3, #1
100504a4:	18ba      	adds	r2, r7, r2
100504a6:	6013      	str	r3, [r2, #0]
100504a8:	687b      	ldr	r3, [r7, #4]
100504aa:	791b      	ldrb	r3, [r3, #4]
100504ac:	001a      	movs	r2, r3
100504ae:	4b09      	ldr	r3, [pc, #36]	@ (100504d4 <CleanPage+0x1f8>)
100504b0:	18fb      	adds	r3, r7, r3
100504b2:	681b      	ldr	r3, [r3, #0]
100504b4:	4293      	cmp	r3, r2
100504b6:	dbca      	blt.n	1005044e <CleanPage+0x172>
    }
  }

  return ret;
100504b8:	4b04      	ldr	r3, [pc, #16]	@ (100504cc <CleanPage+0x1f0>)
100504ba:	18fb      	adds	r3, r7, r3
100504bc:	781b      	ldrb	r3, [r3, #0]
}
100504be:	0018      	movs	r0, r3
100504c0:	46bd      	mov	sp, r7
100504c2:	4b0a      	ldr	r3, [pc, #40]	@ (100504ec <CleanPage+0x210>)
100504c4:	449d      	add	sp, r3
100504c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100504c8:	fffff7c4 	.word	0xfffff7c4
100504cc:	0000082f 	.word	0x0000082f
100504d0:	00000827 	.word	0x00000827
100504d4:	00000828 	.word	0x00000828
100504d8:	00000826 	.word	0x00000826
100504dc:	20002914 	.word	0x20002914
100504e0:	00000825 	.word	0x00000825
100504e4:	00000808 	.word	0x00000808
100504e8:	0000080e 	.word	0x0000080e
100504ec:	00000834 	.word	0x00000834

100504f0 <GetDBType>:

static uint8_t GetDBType(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType **smallDBContainer)
{
100504f0:	b590      	push	{r4, r7, lr}
100504f2:	b087      	sub	sp, #28
100504f4:	af00      	add	r7, sp, #0
100504f6:	0002      	movs	r2, r0
100504f8:	6039      	str	r1, [r7, #0]
100504fa:	1dfb      	adds	r3, r7, #7
100504fc:	701a      	strb	r2, [r3, #0]
  uint8_t id;

  /* Check if it is a large DB. */

  for(int i = 0; i < NUM_LARGE_DBS; i++)
100504fe:	2300      	movs	r3, #0
10050500:	617b      	str	r3, [r7, #20]
10050502:	e016      	b.n	10050532 <GetDBType+0x42>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10050504:	240b      	movs	r4, #11
10050506:	1939      	adds	r1, r7, r4
10050508:	482e      	ldr	r0, [pc, #184]	@ (100505c4 <GetDBType+0xd4>)
1005050a:	697a      	ldr	r2, [r7, #20]
1005050c:	0013      	movs	r3, r2
1005050e:	005b      	lsls	r3, r3, #1
10050510:	189b      	adds	r3, r3, r2
10050512:	009b      	lsls	r3, r3, #2
10050514:	18c3      	adds	r3, r0, r3
10050516:	3306      	adds	r3, #6
10050518:	781b      	ldrb	r3, [r3, #0]
1005051a:	700b      	strb	r3, [r1, #0]

    if(id == NVMDB_id)
1005051c:	193a      	adds	r2, r7, r4
1005051e:	1dfb      	adds	r3, r7, #7
10050520:	7812      	ldrb	r2, [r2, #0]
10050522:	781b      	ldrb	r3, [r3, #0]
10050524:	429a      	cmp	r2, r3
10050526:	d101      	bne.n	1005052c <GetDBType+0x3c>
    {
      return LARGE_DB;
10050528:	2302      	movs	r3, #2
1005052a:	e046      	b.n	100505ba <GetDBType+0xca>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
1005052c:	697b      	ldr	r3, [r7, #20]
1005052e:	3301      	adds	r3, #1
10050530:	617b      	str	r3, [r7, #20]
10050532:	697b      	ldr	r3, [r7, #20]
10050534:	2b01      	cmp	r3, #1
10050536:	dde5      	ble.n	10050504 <GetDBType+0x14>
    }
  }

  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10050538:	2300      	movs	r3, #0
1005053a:	613b      	str	r3, [r7, #16]
1005053c:	e039      	b.n	100505b2 <GetDBType+0xc2>
  {

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1005053e:	2300      	movs	r3, #0
10050540:	60fb      	str	r3, [r7, #12]
10050542:	e026      	b.n	10050592 <GetDBType+0xa2>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
10050544:	4920      	ldr	r1, [pc, #128]	@ (100505c8 <GetDBType+0xd8>)
10050546:	693a      	ldr	r2, [r7, #16]
10050548:	0013      	movs	r3, r2
1005054a:	005b      	lsls	r3, r3, #1
1005054c:	189b      	adds	r3, r3, r2
1005054e:	009b      	lsls	r3, r3, #2
10050550:	18cb      	adds	r3, r1, r3
10050552:	3308      	adds	r3, #8
10050554:	6819      	ldr	r1, [r3, #0]
10050556:	68fa      	ldr	r2, [r7, #12]
10050558:	0013      	movs	r3, r2
1005055a:	005b      	lsls	r3, r3, #1
1005055c:	189b      	adds	r3, r3, r2
1005055e:	009b      	lsls	r3, r3, #2
10050560:	18ca      	adds	r2, r1, r3
10050562:	210b      	movs	r1, #11
10050564:	187b      	adds	r3, r7, r1
10050566:	7812      	ldrb	r2, [r2, #0]
10050568:	701a      	strb	r2, [r3, #0]

      if(id == NVMDB_id)
1005056a:	187a      	adds	r2, r7, r1
1005056c:	1dfb      	adds	r3, r7, #7
1005056e:	7812      	ldrb	r2, [r2, #0]
10050570:	781b      	ldrb	r3, [r3, #0]
10050572:	429a      	cmp	r2, r3
10050574:	d10a      	bne.n	1005058c <GetDBType+0x9c>
      {
        // DB found inside this small db container.
        *smallDBContainer = &NVM_SMALL_DB_STATIC_INFO[i];
10050576:	693a      	ldr	r2, [r7, #16]
10050578:	0013      	movs	r3, r2
1005057a:	005b      	lsls	r3, r3, #1
1005057c:	189b      	adds	r3, r3, r2
1005057e:	009b      	lsls	r3, r3, #2
10050580:	4a11      	ldr	r2, [pc, #68]	@ (100505c8 <GetDBType+0xd8>)
10050582:	189a      	adds	r2, r3, r2
10050584:	683b      	ldr	r3, [r7, #0]
10050586:	601a      	str	r2, [r3, #0]
        return SMALL_DB;
10050588:	2301      	movs	r3, #1
1005058a:	e016      	b.n	100505ba <GetDBType+0xca>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
1005058c:	68fb      	ldr	r3, [r7, #12]
1005058e:	3301      	adds	r3, #1
10050590:	60fb      	str	r3, [r7, #12]
10050592:	490d      	ldr	r1, [pc, #52]	@ (100505c8 <GetDBType+0xd8>)
10050594:	693a      	ldr	r2, [r7, #16]
10050596:	0013      	movs	r3, r2
10050598:	005b      	lsls	r3, r3, #1
1005059a:	189b      	adds	r3, r3, r2
1005059c:	009b      	lsls	r3, r3, #2
1005059e:	18cb      	adds	r3, r1, r3
100505a0:	3304      	adds	r3, #4
100505a2:	781b      	ldrb	r3, [r3, #0]
100505a4:	001a      	movs	r2, r3
100505a6:	68fb      	ldr	r3, [r7, #12]
100505a8:	4293      	cmp	r3, r2
100505aa:	dbcb      	blt.n	10050544 <GetDBType+0x54>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
100505ac:	693b      	ldr	r3, [r7, #16]
100505ae:	3301      	adds	r3, #1
100505b0:	613b      	str	r3, [r7, #16]
100505b2:	693b      	ldr	r3, [r7, #16]
100505b4:	2b00      	cmp	r3, #0
100505b6:	dbc2      	blt.n	1005053e <GetDBType+0x4e>
      }
    }
  }

  return 0;
100505b8:	2300      	movs	r3, #0
}
100505ba:	0018      	movs	r0, r3
100505bc:	46bd      	mov	sp, r7
100505be:	b007      	add	sp, #28
100505c0:	bd90      	pop	{r4, r7, pc}
100505c2:	46c0      	nop			@ (mov r8, r8)
100505c4:	1006948c 	.word	0x1006948c
100505c8:	20002940 	.word	0x20002940

100505cc <EraseSmallDB>:
}

#endif

__NOINLINE static NVMDB_status_t EraseSmallDB(NVMDB_IdType NVMDB_id, const NVMDB_SmallDBContainerType *smallDBContainer_p)
{
100505cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100505ce:	4c3d      	ldr	r4, [pc, #244]	@ (100506c4 <EraseSmallDB+0xf8>)
100505d0:	44a5      	add	sp, r4
100505d2:	af02      	add	r7, sp, #8
100505d4:	0002      	movs	r2, r0
100505d6:	6039      	str	r1, [r7, #0]
100505d8:	4b3b      	ldr	r3, [pc, #236]	@ (100506c8 <EraseSmallDB+0xfc>)
100505da:	2183      	movs	r1, #131	@ 0x83
100505dc:	0109      	lsls	r1, r1, #4
100505de:	185b      	adds	r3, r3, r1
100505e0:	19db      	adds	r3, r3, r7
100505e2:	701a      	strb	r2, [r3, #0]
#endif
#if !NVMDB_STATIC_BUFF
  uint8_t NVM_buffer[PAGE_SIZE];
#endif

  memset(NVM_buffer, 0xFF, sizeof(NVM_buffer));
100505e4:	2380      	movs	r3, #128	@ 0x80
100505e6:	011a      	lsls	r2, r3, #4
100505e8:	2324      	movs	r3, #36	@ 0x24
100505ea:	18fb      	adds	r3, r7, r3
100505ec:	21ff      	movs	r1, #255	@ 0xff
100505ee:	0018      	movs	r0, r3
100505f0:	f017 fab8 	bl	10067b64 <memset>

  // Search other databases in the same page
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
100505f4:	2300      	movs	r3, #0
100505f6:	4a35      	ldr	r2, [pc, #212]	@ (100506cc <EraseSmallDB+0x100>)
100505f8:	18ba      	adds	r2, r7, r2
100505fa:	6013      	str	r3, [r2, #0]
100505fc:	e04b      	b.n	10050696 <EraseSmallDB+0xca>
  {
    NVMDB_HandleType handle;
    uint16_t num_read_bytes;
    ReadStateType state;
    NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
100505fe:	683b      	ldr	r3, [r7, #0]
10050600:	6899      	ldr	r1, [r3, #8]
10050602:	4c32      	ldr	r4, [pc, #200]	@ (100506cc <EraseSmallDB+0x100>)
10050604:	193b      	adds	r3, r7, r4
10050606:	681a      	ldr	r2, [r3, #0]
10050608:	0013      	movs	r3, r2
1005060a:	005b      	lsls	r3, r3, #1
1005060c:	189b      	adds	r3, r3, r2
1005060e:	009b      	lsls	r3, r3, #2
10050610:	18ca      	adds	r2, r1, r3
10050612:	492f      	ldr	r1, [pc, #188]	@ (100506d0 <EraseSmallDB+0x104>)
10050614:	187b      	adds	r3, r7, r1
10050616:	7812      	ldrb	r2, [r2, #0]
10050618:	701a      	strb	r2, [r3, #0]
    if(id != NVMDB_id)
1005061a:	187a      	adds	r2, r7, r1
1005061c:	4b2a      	ldr	r3, [pc, #168]	@ (100506c8 <EraseSmallDB+0xfc>)
1005061e:	2083      	movs	r0, #131	@ 0x83
10050620:	0100      	lsls	r0, r0, #4
10050622:	181b      	adds	r3, r3, r0
10050624:	19db      	adds	r3, r3, r7
10050626:	7812      	ldrb	r2, [r2, #0]
10050628:	781b      	ldrb	r3, [r3, #0]
1005062a:	429a      	cmp	r2, r3
1005062c:	d02d      	beq.n	1005068a <EraseSmallDB+0xbe>
    {
      // This is not the db to be erased. Save it.
      NVMDB_HandleInit(id, &handle);
1005062e:	2514      	movs	r5, #20
10050630:	197a      	adds	r2, r7, r5
10050632:	187b      	adds	r3, r7, r1
10050634:	781b      	ldrb	r3, [r3, #0]
10050636:	0011      	movs	r1, r2
10050638:	0018      	movs	r0, r3
1005063a:	f000 fa6d 	bl	10050b18 <NVMDB_HandleInit>
      uint32_t offset = smallDBContainer_p->dbs[i].offset;
1005063e:	683b      	ldr	r3, [r7, #0]
10050640:	6899      	ldr	r1, [r3, #8]
10050642:	193b      	adds	r3, r7, r4
10050644:	681a      	ldr	r2, [r3, #0]
10050646:	0013      	movs	r3, r2
10050648:	005b      	lsls	r3, r3, #1
1005064a:	189b      	adds	r3, r3, r2
1005064c:	009b      	lsls	r3, r3, #2
1005064e:	18cb      	adds	r3, r1, r3
10050650:	685b      	ldr	r3, [r3, #4]
10050652:	4c20      	ldr	r4, [pc, #128]	@ (100506d4 <EraseSmallDB+0x108>)
10050654:	193a      	adds	r2, r7, r4
10050656:	6013      	str	r3, [r2, #0]
      InitReadState(&state);
10050658:	260c      	movs	r6, #12
1005065a:	19bb      	adds	r3, r7, r6
1005065c:	0018      	movs	r0, r3
1005065e:	f7ff fc55 	bl	1004ff0c <InitReadState>
      LoadDBToRAM(&handle, NVM_buffer + offset, sizeof(NVM_buffer) - offset, &num_read_bytes, &state);
10050662:	2324      	movs	r3, #36	@ 0x24
10050664:	18fa      	adds	r2, r7, r3
10050666:	193b      	adds	r3, r7, r4
10050668:	681b      	ldr	r3, [r3, #0]
1005066a:	18d1      	adds	r1, r2, r3
1005066c:	193b      	adds	r3, r7, r4
1005066e:	681b      	ldr	r3, [r3, #0]
10050670:	b29b      	uxth	r3, r3
10050672:	2280      	movs	r2, #128	@ 0x80
10050674:	0112      	lsls	r2, r2, #4
10050676:	1ad3      	subs	r3, r2, r3
10050678:	b29a      	uxth	r2, r3
1005067a:	2312      	movs	r3, #18
1005067c:	18fc      	adds	r4, r7, r3
1005067e:	1978      	adds	r0, r7, r5
10050680:	19bb      	adds	r3, r7, r6
10050682:	9300      	str	r3, [sp, #0]
10050684:	0023      	movs	r3, r4
10050686:	f7ff fc52 	bl	1004ff2e <LoadDBToRAM>
  for(int i = 0; i < smallDBContainer_p->num_db; i++)
1005068a:	4a10      	ldr	r2, [pc, #64]	@ (100506cc <EraseSmallDB+0x100>)
1005068c:	18bb      	adds	r3, r7, r2
1005068e:	681b      	ldr	r3, [r3, #0]
10050690:	3301      	adds	r3, #1
10050692:	18ba      	adds	r2, r7, r2
10050694:	6013      	str	r3, [r2, #0]
10050696:	683b      	ldr	r3, [r7, #0]
10050698:	791b      	ldrb	r3, [r3, #4]
1005069a:	001a      	movs	r2, r3
1005069c:	4b0b      	ldr	r3, [pc, #44]	@ (100506cc <EraseSmallDB+0x100>)
1005069e:	18fb      	adds	r3, r7, r3
100506a0:	681b      	ldr	r3, [r3, #0]
100506a2:	4293      	cmp	r3, r2
100506a4:	dbab      	blt.n	100505fe <EraseSmallDB+0x32>
    return NVMDB_STATUS_NOT_ENOUGH_TIME;
  }
#endif

  // Write buffer to flash
  WriteBufferToFlash(smallDBContainer_p->page_address, (uint32_t *)NVM_buffer, sizeof(NVM_buffer));
100506a6:	683b      	ldr	r3, [r7, #0]
100506a8:	681b      	ldr	r3, [r3, #0]
100506aa:	2280      	movs	r2, #128	@ 0x80
100506ac:	0112      	lsls	r2, r2, #4
100506ae:	2124      	movs	r1, #36	@ 0x24
100506b0:	1879      	adds	r1, r7, r1
100506b2:	0018      	movs	r0, r3
100506b4:	f7ff fbea 	bl	1004fe8c <WriteBufferToFlash>

#if NVM_CACHE
  ATOMIC_SECTION_END();
#endif

  return NVMDB_STATUS_OK;
100506b8:	2300      	movs	r3, #0
}
100506ba:	0018      	movs	r0, r3
100506bc:	46bd      	mov	sp, r7
100506be:	4b06      	ldr	r3, [pc, #24]	@ (100506d8 <EraseSmallDB+0x10c>)
100506c0:	449d      	add	sp, r3
100506c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100506c4:	fffff7c4 	.word	0xfffff7c4
100506c8:	fffff7d7 	.word	0xfffff7d7
100506cc:	0000082c 	.word	0x0000082c
100506d0:	0000082b 	.word	0x0000082b
100506d4:	00000824 	.word	0x00000824
100506d8:	00000834 	.word	0x00000834

100506dc <NVMDB_AppendRecordNoCache>:

static NVMDB_status_t NVMDB_AppendRecordNoCache(NVMDB_HandleType *handle_p, uint8_t record_id, uint16_t data1_length, const void *data1, uint16_t data2_length, const void *data2)
{
100506dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100506de:	b089      	sub	sp, #36	@ 0x24
100506e0:	af02      	add	r7, sp, #8
100506e2:	60f8      	str	r0, [r7, #12]
100506e4:	0008      	movs	r0, r1
100506e6:	0011      	movs	r1, r2
100506e8:	607b      	str	r3, [r7, #4]
100506ea:	230b      	movs	r3, #11
100506ec:	18fb      	adds	r3, r7, r3
100506ee:	1c02      	adds	r2, r0, #0
100506f0:	701a      	strb	r2, [r3, #0]
100506f2:	2008      	movs	r0, #8
100506f4:	183b      	adds	r3, r7, r0
100506f6:	1c0a      	adds	r2, r1, #0
100506f8:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordType *record_p;
  NVMDB_RecordSizeType available_size;
  NVMDB_status_t status;

  data1_length = ROUND4_R(data1_length);
100506fa:	0001      	movs	r1, r0
100506fc:	187b      	adds	r3, r7, r1
100506fe:	881b      	ldrh	r3, [r3, #0]
10050700:	3b01      	subs	r3, #1
10050702:	b29b      	uxth	r3, r3
10050704:	b21b      	sxth	r3, r3
10050706:	2203      	movs	r2, #3
10050708:	4313      	orrs	r3, r2
1005070a:	b21b      	sxth	r3, r3
1005070c:	b29a      	uxth	r2, r3
1005070e:	187b      	adds	r3, r7, r1
10050710:	3201      	adds	r2, #1
10050712:	801a      	strh	r2, [r3, #0]
  /* Search for first available entry. */

  while(1)
  {

    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
10050714:	68fb      	ldr	r3, [r7, #12]
10050716:	685b      	ldr	r3, [r3, #4]
10050718:	1d5a      	adds	r2, r3, #5
1005071a:	68fb      	ldr	r3, [r7, #12]
1005071c:	689b      	ldr	r3, [r3, #8]
1005071e:	429a      	cmp	r2, r3
10050720:	d310      	bcc.n	10050744 <NVMDB_AppendRecordNoCache+0x68>
    {
      /* End of DB reached. This should not happen since the free space has been checked before.
         Should we remove this code or keep it to be safer?  */
      if(DBInfo[handle_p->id].invalid_records)
10050722:	68fb      	ldr	r3, [r7, #12]
10050724:	781b      	ldrb	r3, [r3, #0]
10050726:	0019      	movs	r1, r3
10050728:	4a4a      	ldr	r2, [pc, #296]	@ (10050854 <NVMDB_AppendRecordNoCache+0x178>)
1005072a:	000b      	movs	r3, r1
1005072c:	009b      	lsls	r3, r3, #2
1005072e:	185b      	adds	r3, r3, r1
10050730:	009b      	lsls	r3, r3, #2
10050732:	18d3      	adds	r3, r2, r3
10050734:	330a      	adds	r3, #10
10050736:	881b      	ldrh	r3, [r3, #0]
10050738:	2b00      	cmp	r3, #0
1005073a:	d001      	beq.n	10050740 <NVMDB_AppendRecordNoCache+0x64>
      {
        return NVMDB_STATUS_CLEAN_NEEDED;
1005073c:	230b      	movs	r3, #11
1005073e:	e084      	b.n	1005084a <NVMDB_AppendRecordNoCache+0x16e>
      }
      return NVMDB_STATUS_FULL_DB;
10050740:	2302      	movs	r3, #2
10050742:	e082      	b.n	1005084a <NVMDB_AppendRecordNoCache+0x16e>
    }

    record_p = (NVMDB_RecordType_ptr)handle_p->address;
10050744:	68fb      	ldr	r3, [r7, #12]
10050746:	685b      	ldr	r3, [r3, #4]
10050748:	617b      	str	r3, [r7, #20]

    if(record_p->header.valid_flag == NO_RECORD)
1005074a:	697b      	ldr	r3, [r7, #20]
1005074c:	781b      	ldrb	r3, [r3, #0]
1005074e:	2bff      	cmp	r3, #255	@ 0xff
10050750:	d11c      	bne.n	1005078c <NVMDB_AppendRecordNoCache+0xb0>
    {
      available_size = MIN(handle_p->end_address - handle_p->address, MAX_RECORD_SIZE);
10050752:	68fb      	ldr	r3, [r7, #12]
10050754:	689a      	ldr	r2, [r3, #8]
10050756:	68fb      	ldr	r3, [r7, #12]
10050758:	685b      	ldr	r3, [r3, #4]
1005075a:	1ad3      	subs	r3, r2, r3
1005075c:	2280      	movs	r2, #128	@ 0x80
1005075e:	0252      	lsls	r2, r2, #9
10050760:	4293      	cmp	r3, r2
10050762:	d300      	bcc.n	10050766 <NVMDB_AppendRecordNoCache+0x8a>
10050764:	4b3c      	ldr	r3, [pc, #240]	@ (10050858 <NVMDB_AppendRecordNoCache+0x17c>)
10050766:	2112      	movs	r1, #18
10050768:	187a      	adds	r2, r7, r1
1005076a:	8013      	strh	r3, [r2, #0]
      break;
1005076c:	46c0      	nop			@ (mov r8, r8)
    }

    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
  }

  if(available_size < data1_length + data2_length + RECORD_HEADER_SIZE)
1005076e:	2308      	movs	r3, #8
10050770:	0018      	movs	r0, r3
10050772:	18fb      	adds	r3, r7, r3
10050774:	881a      	ldrh	r2, [r3, #0]
10050776:	2328      	movs	r3, #40	@ 0x28
10050778:	181b      	adds	r3, r3, r0
1005077a:	19db      	adds	r3, r3, r7
1005077c:	881b      	ldrh	r3, [r3, #0]
1005077e:	18d3      	adds	r3, r2, r3
10050780:	1cda      	adds	r2, r3, #3
10050782:	187b      	adds	r3, r7, r1
10050784:	881b      	ldrh	r3, [r3, #0]
10050786:	429a      	cmp	r2, r3
10050788:	db27      	blt.n	100507da <NVMDB_AppendRecordNoCache+0xfe>
1005078a:	e015      	b.n	100507b8 <NVMDB_AppendRecordNoCache+0xdc>
    else if(record_p->header.valid_flag != VALID_RECORD && record_p->header.valid_flag != INVALID_RECORD)
1005078c:	697b      	ldr	r3, [r7, #20]
1005078e:	781b      	ldrb	r3, [r3, #0]
10050790:	2bfe      	cmp	r3, #254	@ 0xfe
10050792:	d005      	beq.n	100507a0 <NVMDB_AppendRecordNoCache+0xc4>
10050794:	697b      	ldr	r3, [r7, #20]
10050796:	781b      	ldrb	r3, [r3, #0]
10050798:	2b00      	cmp	r3, #0
1005079a:	d001      	beq.n	100507a0 <NVMDB_AppendRecordNoCache+0xc4>
      return NVMDB_STATUS_CORRUPTED_DB;
1005079c:	2303      	movs	r3, #3
1005079e:	e054      	b.n	1005084a <NVMDB_AppendRecordNoCache+0x16e>
    handle_p->address += ROUND4_R(record_p->header.length + RECORD_HEADER_SIZE);
100507a0:	68fb      	ldr	r3, [r7, #12]
100507a2:	685b      	ldr	r3, [r3, #4]
100507a4:	697a      	ldr	r2, [r7, #20]
100507a6:	8852      	ldrh	r2, [r2, #2]
100507a8:	3203      	adds	r2, #3
100507aa:	2103      	movs	r1, #3
100507ac:	430a      	orrs	r2, r1
100507ae:	189b      	adds	r3, r3, r2
100507b0:	1c5a      	adds	r2, r3, #1
100507b2:	68fb      	ldr	r3, [r7, #12]
100507b4:	605a      	str	r2, [r3, #4]
    if(handle_p->address + MIN_RECORD_SIZE >= handle_p->end_address)
100507b6:	e7ad      	b.n	10050714 <NVMDB_AppendRecordNoCache+0x38>
  {
    /* End of DB reached. This should not happen since the free space has been checked before.
       Should we remove this code or keep it to be safer?  */
    if(DBInfo[handle_p->id].invalid_records)
100507b8:	68fb      	ldr	r3, [r7, #12]
100507ba:	781b      	ldrb	r3, [r3, #0]
100507bc:	0019      	movs	r1, r3
100507be:	4a25      	ldr	r2, [pc, #148]	@ (10050854 <NVMDB_AppendRecordNoCache+0x178>)
100507c0:	000b      	movs	r3, r1
100507c2:	009b      	lsls	r3, r3, #2
100507c4:	185b      	adds	r3, r3, r1
100507c6:	009b      	lsls	r3, r3, #2
100507c8:	18d3      	adds	r3, r2, r3
100507ca:	330a      	adds	r3, #10
100507cc:	881b      	ldrh	r3, [r3, #0]
100507ce:	2b00      	cmp	r3, #0
100507d0:	d001      	beq.n	100507d6 <NVMDB_AppendRecordNoCache+0xfa>
    {
      return NVMDB_STATUS_CLEAN_NEEDED;
100507d2:	230b      	movs	r3, #11
100507d4:	e039      	b.n	1005084a <NVMDB_AppendRecordNoCache+0x16e>
    }
    return NVMDB_STATUS_FULL_DB;
100507d6:	2302      	movs	r3, #2
100507d8:	e037      	b.n	1005084a <NVMDB_AppendRecordNoCache+0x16e>
  }

  status = WriteRecord(handle_p->address, record_id, data1_length, data1, data2_length, data2);
100507da:	68fb      	ldr	r3, [r7, #12]
100507dc:	6858      	ldr	r0, [r3, #4]
100507de:	2611      	movs	r6, #17
100507e0:	19bc      	adds	r4, r7, r6
100507e2:	687d      	ldr	r5, [r7, #4]
100507e4:	2308      	movs	r3, #8
100507e6:	001a      	movs	r2, r3
100507e8:	18fb      	adds	r3, r7, r3
100507ea:	881b      	ldrh	r3, [r3, #0]
100507ec:	469c      	mov	ip, r3
100507ee:	230b      	movs	r3, #11
100507f0:	18fb      	adds	r3, r7, r3
100507f2:	7819      	ldrb	r1, [r3, #0]
100507f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100507f6:	9301      	str	r3, [sp, #4]
100507f8:	2328      	movs	r3, #40	@ 0x28
100507fa:	189b      	adds	r3, r3, r2
100507fc:	19db      	adds	r3, r3, r7
100507fe:	881b      	ldrh	r3, [r3, #0]
10050800:	9300      	str	r3, [sp, #0]
10050802:	002b      	movs	r3, r5
10050804:	4662      	mov	r2, ip
10050806:	f7ff f99c 	bl	1004fb42 <WriteRecord>
1005080a:	0003      	movs	r3, r0
1005080c:	7023      	strb	r3, [r4, #0]
  if(status)
1005080e:	19bb      	adds	r3, r7, r6
10050810:	781b      	ldrb	r3, [r3, #0]
10050812:	2b00      	cmp	r3, #0
10050814:	d002      	beq.n	1005081c <NVMDB_AppendRecordNoCache+0x140>
  {
    return status;
10050816:	19bb      	adds	r3, r7, r6
10050818:	781b      	ldrb	r3, [r3, #0]
1005081a:	e016      	b.n	1005084a <NVMDB_AppendRecordNoCache+0x16e>
  }

  DBInfo[handle_p->id].valid_records++;
1005081c:	68fb      	ldr	r3, [r7, #12]
1005081e:	781b      	ldrb	r3, [r3, #0]
10050820:	001a      	movs	r2, r3
10050822:	490c      	ldr	r1, [pc, #48]	@ (10050854 <NVMDB_AppendRecordNoCache+0x178>)
10050824:	0013      	movs	r3, r2
10050826:	009b      	lsls	r3, r3, #2
10050828:	189b      	adds	r3, r3, r2
1005082a:	009b      	lsls	r3, r3, #2
1005082c:	18cb      	adds	r3, r1, r3
1005082e:	3308      	adds	r3, #8
10050830:	881b      	ldrh	r3, [r3, #0]
10050832:	3301      	adds	r3, #1
10050834:	b298      	uxth	r0, r3
10050836:	4907      	ldr	r1, [pc, #28]	@ (10050854 <NVMDB_AppendRecordNoCache+0x178>)
10050838:	0013      	movs	r3, r2
1005083a:	009b      	lsls	r3, r3, #2
1005083c:	189b      	adds	r3, r3, r2
1005083e:	009b      	lsls	r3, r3, #2
10050840:	18cb      	adds	r3, r1, r3
10050842:	3308      	adds	r3, #8
10050844:	1c02      	adds	r2, r0, #0
10050846:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10050848:	2300      	movs	r3, #0
}
1005084a:	0018      	movs	r0, r3
1005084c:	46bd      	mov	sp, r7
1005084e:	b007      	add	sp, #28
10050850:	bdf0      	pop	{r4, r5, r6, r7, pc}
10050852:	46c0      	nop			@ (mov r8, r8)
10050854:	20002914 	.word	0x20002914
10050858:	0000ffff 	.word	0x0000ffff

1005085c <NVMDB_Init>:
 *
 * @param  None
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Init(void)
{
1005085c:	b5b0      	push	{r4, r5, r7, lr}
1005085e:	b088      	sub	sp, #32
10050860:	af00      	add	r7, sp, #0
  uint32_t page_address, offset;
  uint16_t clean_threshold;
  uint8_t id;

  /* Parse small DBs. */
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
10050862:	2300      	movs	r3, #0
10050864:	61fb      	str	r3, [r7, #28]
10050866:	e0cd      	b.n	10050a04 <NVMDB_Init+0x1a8>
  {

    page_address = NVM_SMALL_DB_STATIC_INFO[i].page_address;
10050868:	49a8      	ldr	r1, [pc, #672]	@ (10050b0c <NVMDB_Init+0x2b0>)
1005086a:	69fa      	ldr	r2, [r7, #28]
1005086c:	0013      	movs	r3, r2
1005086e:	005b      	lsls	r3, r3, #1
10050870:	189b      	adds	r3, r3, r2
10050872:	009b      	lsls	r3, r3, #2
10050874:	585b      	ldr	r3, [r3, r1]
10050876:	60fb      	str	r3, [r7, #12]

    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
10050878:	2300      	movs	r3, #0
1005087a:	61bb      	str	r3, [r7, #24]
1005087c:	e0b1      	b.n	100509e2 <NVMDB_Init+0x186>
    {
      id = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].id;
1005087e:	49a3      	ldr	r1, [pc, #652]	@ (10050b0c <NVMDB_Init+0x2b0>)
10050880:	69fa      	ldr	r2, [r7, #28]
10050882:	0013      	movs	r3, r2
10050884:	005b      	lsls	r3, r3, #1
10050886:	189b      	adds	r3, r3, r2
10050888:	009b      	lsls	r3, r3, #2
1005088a:	18cb      	adds	r3, r1, r3
1005088c:	3308      	adds	r3, #8
1005088e:	6819      	ldr	r1, [r3, #0]
10050890:	69ba      	ldr	r2, [r7, #24]
10050892:	0013      	movs	r3, r2
10050894:	005b      	lsls	r3, r3, #1
10050896:	189b      	adds	r3, r3, r2
10050898:	009b      	lsls	r3, r3, #2
1005089a:	18ca      	adds	r2, r1, r3
1005089c:	2013      	movs	r0, #19
1005089e:	183b      	adds	r3, r7, r0
100508a0:	7812      	ldrb	r2, [r2, #0]
100508a2:	701a      	strb	r2, [r3, #0]
      offset = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].offset;
100508a4:	4999      	ldr	r1, [pc, #612]	@ (10050b0c <NVMDB_Init+0x2b0>)
100508a6:	69fa      	ldr	r2, [r7, #28]
100508a8:	0013      	movs	r3, r2
100508aa:	005b      	lsls	r3, r3, #1
100508ac:	189b      	adds	r3, r3, r2
100508ae:	009b      	lsls	r3, r3, #2
100508b0:	18cb      	adds	r3, r1, r3
100508b2:	3308      	adds	r3, #8
100508b4:	6819      	ldr	r1, [r3, #0]
100508b6:	69ba      	ldr	r2, [r7, #24]
100508b8:	0013      	movs	r3, r2
100508ba:	005b      	lsls	r3, r3, #1
100508bc:	189b      	adds	r3, r3, r2
100508be:	009b      	lsls	r3, r3, #2
100508c0:	18cb      	adds	r3, r1, r3
100508c2:	685b      	ldr	r3, [r3, #4]
100508c4:	60bb      	str	r3, [r7, #8]
#if AUTO_CLEAN
      clean_threshold = NVM_SMALL_DB_STATIC_INFO[i].dbs[j].clean_threshold;
100508c6:	4991      	ldr	r1, [pc, #580]	@ (10050b0c <NVMDB_Init+0x2b0>)
100508c8:	69fa      	ldr	r2, [r7, #28]
100508ca:	0013      	movs	r3, r2
100508cc:	005b      	lsls	r3, r3, #1
100508ce:	189b      	adds	r3, r3, r2
100508d0:	009b      	lsls	r3, r3, #2
100508d2:	18cb      	adds	r3, r1, r3
100508d4:	3308      	adds	r3, #8
100508d6:	6819      	ldr	r1, [r3, #0]
100508d8:	69ba      	ldr	r2, [r7, #24]
100508da:	0013      	movs	r3, r2
100508dc:	005b      	lsls	r3, r3, #1
100508de:	189b      	adds	r3, r3, r2
100508e0:	009b      	lsls	r3, r3, #2
100508e2:	18ca      	adds	r2, r1, r3
100508e4:	1dbb      	adds	r3, r7, #6
100508e6:	8912      	ldrh	r2, [r2, #8]
100508e8:	801a      	strh	r2, [r3, #0]
#endif
      if(DBInfo[id].start_address || id >= NUM_DB)
100508ea:	183b      	adds	r3, r7, r0
100508ec:	781a      	ldrb	r2, [r3, #0]
100508ee:	4988      	ldr	r1, [pc, #544]	@ (10050b10 <NVMDB_Init+0x2b4>)
100508f0:	0013      	movs	r3, r2
100508f2:	009b      	lsls	r3, r3, #2
100508f4:	189b      	adds	r3, r3, r2
100508f6:	009b      	lsls	r3, r3, #2
100508f8:	585b      	ldr	r3, [r3, r1]
100508fa:	2b00      	cmp	r3, #0
100508fc:	d103      	bne.n	10050906 <NVMDB_Init+0xaa>
100508fe:	183b      	adds	r3, r7, r0
10050900:	781b      	ldrb	r3, [r3, #0]
10050902:	2b01      	cmp	r3, #1
10050904:	d901      	bls.n	1005090a <NVMDB_Init+0xae>
      {
        // ID already used.
        return NVMDB_STATUS_INVALID_ID;
10050906:	2301      	movs	r3, #1
10050908:	e0fc      	b.n	10050b04 <NVMDB_Init+0x2a8>
      }
      DBInfo[id].start_address = page_address + offset;
1005090a:	2413      	movs	r4, #19
1005090c:	193b      	adds	r3, r7, r4
1005090e:	781a      	ldrb	r2, [r3, #0]
10050910:	68f9      	ldr	r1, [r7, #12]
10050912:	68bb      	ldr	r3, [r7, #8]
10050914:	18c8      	adds	r0, r1, r3
10050916:	497e      	ldr	r1, [pc, #504]	@ (10050b10 <NVMDB_Init+0x2b4>)
10050918:	0013      	movs	r3, r2
1005091a:	009b      	lsls	r3, r3, #2
1005091c:	189b      	adds	r3, r3, r2
1005091e:	009b      	lsls	r3, r3, #2
10050920:	5058      	str	r0, [r3, r1]

      if(j == NVM_SMALL_DB_STATIC_INFO[i].num_db - 1)
10050922:	497a      	ldr	r1, [pc, #488]	@ (10050b0c <NVMDB_Init+0x2b0>)
10050924:	69fa      	ldr	r2, [r7, #28]
10050926:	0013      	movs	r3, r2
10050928:	005b      	lsls	r3, r3, #1
1005092a:	189b      	adds	r3, r3, r2
1005092c:	009b      	lsls	r3, r3, #2
1005092e:	18cb      	adds	r3, r1, r3
10050930:	3304      	adds	r3, #4
10050932:	781b      	ldrb	r3, [r3, #0]
10050934:	3b01      	subs	r3, #1
10050936:	69ba      	ldr	r2, [r7, #24]
10050938:	429a      	cmp	r2, r3
1005093a:	d10e      	bne.n	1005095a <NVMDB_Init+0xfe>
      {
        // If it is the last db of the page, end address is the last address of the page
        DBInfo[id].end_address = page_address + PAGE_SIZE;
1005093c:	193b      	adds	r3, r7, r4
1005093e:	781a      	ldrb	r2, [r3, #0]
10050940:	68fb      	ldr	r3, [r7, #12]
10050942:	2180      	movs	r1, #128	@ 0x80
10050944:	0109      	lsls	r1, r1, #4
10050946:	1859      	adds	r1, r3, r1
10050948:	4871      	ldr	r0, [pc, #452]	@ (10050b10 <NVMDB_Init+0x2b4>)
1005094a:	0013      	movs	r3, r2
1005094c:	009b      	lsls	r3, r3, #2
1005094e:	189b      	adds	r3, r3, r2
10050950:	009b      	lsls	r3, r3, #2
10050952:	18c3      	adds	r3, r0, r3
10050954:	3304      	adds	r3, #4
10050956:	6019      	str	r1, [r3, #0]
10050958:	e01d      	b.n	10050996 <NVMDB_Init+0x13a>
      }
      else
      {
        // If it is not the last db of the page, end address is the start address of the next db
        DBInfo[id].end_address = page_address + NVM_SMALL_DB_STATIC_INFO[i].dbs[j + 1].offset;
1005095a:	496c      	ldr	r1, [pc, #432]	@ (10050b0c <NVMDB_Init+0x2b0>)
1005095c:	69fa      	ldr	r2, [r7, #28]
1005095e:	0013      	movs	r3, r2
10050960:	005b      	lsls	r3, r3, #1
10050962:	189b      	adds	r3, r3, r2
10050964:	009b      	lsls	r3, r3, #2
10050966:	18cb      	adds	r3, r1, r3
10050968:	3308      	adds	r3, #8
1005096a:	6819      	ldr	r1, [r3, #0]
1005096c:	69bb      	ldr	r3, [r7, #24]
1005096e:	1c5a      	adds	r2, r3, #1
10050970:	0013      	movs	r3, r2
10050972:	005b      	lsls	r3, r3, #1
10050974:	189b      	adds	r3, r3, r2
10050976:	009b      	lsls	r3, r3, #2
10050978:	18cb      	adds	r3, r1, r3
1005097a:	6859      	ldr	r1, [r3, #4]
1005097c:	2313      	movs	r3, #19
1005097e:	18fb      	adds	r3, r7, r3
10050980:	781a      	ldrb	r2, [r3, #0]
10050982:	68fb      	ldr	r3, [r7, #12]
10050984:	18c9      	adds	r1, r1, r3
10050986:	4862      	ldr	r0, [pc, #392]	@ (10050b10 <NVMDB_Init+0x2b4>)
10050988:	0013      	movs	r3, r2
1005098a:	009b      	lsls	r3, r3, #2
1005098c:	189b      	adds	r3, r3, r2
1005098e:	009b      	lsls	r3, r3, #2
10050990:	18c3      	adds	r3, r0, r3
10050992:	3304      	adds	r3, #4
10050994:	6019      	str	r1, [r3, #0]
      }
      DBInfo[id].clean_threshold = clean_threshold;
10050996:	2013      	movs	r0, #19
10050998:	183b      	adds	r3, r7, r0
1005099a:	781a      	ldrb	r2, [r3, #0]
1005099c:	495c      	ldr	r1, [pc, #368]	@ (10050b10 <NVMDB_Init+0x2b4>)
1005099e:	0013      	movs	r3, r2
100509a0:	009b      	lsls	r3, r3, #2
100509a2:	189b      	adds	r3, r3, r2
100509a4:	009b      	lsls	r3, r3, #2
100509a6:	18cb      	adds	r3, r1, r3
100509a8:	3310      	adds	r3, #16
100509aa:	1dba      	adds	r2, r7, #6
100509ac:	8812      	ldrh	r2, [r2, #0]
100509ae:	801a      	strh	r2, [r3, #0]

      status = NVMDB_get_info(&DBInfo[id]);
100509b0:	183b      	adds	r3, r7, r0
100509b2:	781a      	ldrb	r2, [r3, #0]
100509b4:	0013      	movs	r3, r2
100509b6:	009b      	lsls	r3, r3, #2
100509b8:	189b      	adds	r3, r3, r2
100509ba:	009b      	lsls	r3, r3, #2
100509bc:	4a54      	ldr	r2, [pc, #336]	@ (10050b10 <NVMDB_Init+0x2b4>)
100509be:	189b      	adds	r3, r3, r2
100509c0:	2512      	movs	r5, #18
100509c2:	197c      	adds	r4, r7, r5
100509c4:	0018      	movs	r0, r3
100509c6:	f7fe ff3b 	bl	1004f840 <NVMDB_get_info>
100509ca:	0003      	movs	r3, r0
100509cc:	7023      	strb	r3, [r4, #0]
      if(status)
100509ce:	197b      	adds	r3, r7, r5
100509d0:	781b      	ldrb	r3, [r3, #0]
100509d2:	2b00      	cmp	r3, #0
100509d4:	d002      	beq.n	100509dc <NVMDB_Init+0x180>
      {
        return status;
100509d6:	197b      	adds	r3, r7, r5
100509d8:	781b      	ldrb	r3, [r3, #0]
100509da:	e093      	b.n	10050b04 <NVMDB_Init+0x2a8>
    for(int j = 0; j < NVM_SMALL_DB_STATIC_INFO[i].num_db; j++)
100509dc:	69bb      	ldr	r3, [r7, #24]
100509de:	3301      	adds	r3, #1
100509e0:	61bb      	str	r3, [r7, #24]
100509e2:	494a      	ldr	r1, [pc, #296]	@ (10050b0c <NVMDB_Init+0x2b0>)
100509e4:	69fa      	ldr	r2, [r7, #28]
100509e6:	0013      	movs	r3, r2
100509e8:	005b      	lsls	r3, r3, #1
100509ea:	189b      	adds	r3, r3, r2
100509ec:	009b      	lsls	r3, r3, #2
100509ee:	18cb      	adds	r3, r1, r3
100509f0:	3304      	adds	r3, #4
100509f2:	781b      	ldrb	r3, [r3, #0]
100509f4:	001a      	movs	r2, r3
100509f6:	69bb      	ldr	r3, [r7, #24]
100509f8:	4293      	cmp	r3, r2
100509fa:	da00      	bge.n	100509fe <NVMDB_Init+0x1a2>
100509fc:	e73f      	b.n	1005087e <NVMDB_Init+0x22>
  for(int i = 0; i < NUM_SMALL_DB_PAGES; i++)
100509fe:	69fb      	ldr	r3, [r7, #28]
10050a00:	3301      	adds	r3, #1
10050a02:	61fb      	str	r3, [r7, #28]
10050a04:	69fb      	ldr	r3, [r7, #28]
10050a06:	2b00      	cmp	r3, #0
10050a08:	da00      	bge.n	10050a0c <NVMDB_Init+0x1b0>
10050a0a:	e72d      	b.n	10050868 <NVMDB_Init+0xc>
      }
    }
  }

  /* Parse large DBs. */
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10050a0c:	2300      	movs	r3, #0
10050a0e:	617b      	str	r3, [r7, #20]
10050a10:	e074      	b.n	10050afc <NVMDB_Init+0x2a0>
  {

    id = NVM_LARGE_DB_STATIC_INFO[i].id;
10050a12:	2413      	movs	r4, #19
10050a14:	1939      	adds	r1, r7, r4
10050a16:	483f      	ldr	r0, [pc, #252]	@ (10050b14 <NVMDB_Init+0x2b8>)
10050a18:	697a      	ldr	r2, [r7, #20]
10050a1a:	0013      	movs	r3, r2
10050a1c:	005b      	lsls	r3, r3, #1
10050a1e:	189b      	adds	r3, r3, r2
10050a20:	009b      	lsls	r3, r3, #2
10050a22:	18c3      	adds	r3, r0, r3
10050a24:	3306      	adds	r3, #6
10050a26:	781b      	ldrb	r3, [r3, #0]
10050a28:	700b      	strb	r3, [r1, #0]

    if(DBInfo[id].start_address || id >= NUM_DB)
10050a2a:	193b      	adds	r3, r7, r4
10050a2c:	781a      	ldrb	r2, [r3, #0]
10050a2e:	4938      	ldr	r1, [pc, #224]	@ (10050b10 <NVMDB_Init+0x2b4>)
10050a30:	0013      	movs	r3, r2
10050a32:	009b      	lsls	r3, r3, #2
10050a34:	189b      	adds	r3, r3, r2
10050a36:	009b      	lsls	r3, r3, #2
10050a38:	585b      	ldr	r3, [r3, r1]
10050a3a:	2b00      	cmp	r3, #0
10050a3c:	d103      	bne.n	10050a46 <NVMDB_Init+0x1ea>
10050a3e:	193b      	adds	r3, r7, r4
10050a40:	781b      	ldrb	r3, [r3, #0]
10050a42:	2b01      	cmp	r3, #1
10050a44:	d901      	bls.n	10050a4a <NVMDB_Init+0x1ee>
    {
      // ID already used.
      return NVMDB_STATUS_INVALID_ID;
10050a46:	2301      	movs	r3, #1
10050a48:	e05c      	b.n	10050b04 <NVMDB_Init+0x2a8>
    }

    DBInfo[id].start_address = NVM_LARGE_DB_STATIC_INFO[i].address;
10050a4a:	2413      	movs	r4, #19
10050a4c:	193b      	adds	r3, r7, r4
10050a4e:	781a      	ldrb	r2, [r3, #0]
10050a50:	4830      	ldr	r0, [pc, #192]	@ (10050b14 <NVMDB_Init+0x2b8>)
10050a52:	6979      	ldr	r1, [r7, #20]
10050a54:	000b      	movs	r3, r1
10050a56:	005b      	lsls	r3, r3, #1
10050a58:	185b      	adds	r3, r3, r1
10050a5a:	009b      	lsls	r3, r3, #2
10050a5c:	5818      	ldr	r0, [r3, r0]
10050a5e:	492c      	ldr	r1, [pc, #176]	@ (10050b10 <NVMDB_Init+0x2b4>)
10050a60:	0013      	movs	r3, r2
10050a62:	009b      	lsls	r3, r3, #2
10050a64:	189b      	adds	r3, r3, r2
10050a66:	009b      	lsls	r3, r3, #2
10050a68:	5058      	str	r0, [r3, r1]
    DBInfo[id].end_address = NVM_LARGE_DB_STATIC_INFO[i].address + NVM_LARGE_DB_STATIC_INFO[i].size;
10050a6a:	492a      	ldr	r1, [pc, #168]	@ (10050b14 <NVMDB_Init+0x2b8>)
10050a6c:	697a      	ldr	r2, [r7, #20]
10050a6e:	0013      	movs	r3, r2
10050a70:	005b      	lsls	r3, r3, #1
10050a72:	189b      	adds	r3, r3, r2
10050a74:	009b      	lsls	r3, r3, #2
10050a76:	5859      	ldr	r1, [r3, r1]
10050a78:	4826      	ldr	r0, [pc, #152]	@ (10050b14 <NVMDB_Init+0x2b8>)
10050a7a:	697a      	ldr	r2, [r7, #20]
10050a7c:	0013      	movs	r3, r2
10050a7e:	005b      	lsls	r3, r3, #1
10050a80:	189b      	adds	r3, r3, r2
10050a82:	009b      	lsls	r3, r3, #2
10050a84:	18c3      	adds	r3, r0, r3
10050a86:	3304      	adds	r3, #4
10050a88:	881b      	ldrh	r3, [r3, #0]
10050a8a:	0018      	movs	r0, r3
10050a8c:	193b      	adds	r3, r7, r4
10050a8e:	781a      	ldrb	r2, [r3, #0]
10050a90:	1809      	adds	r1, r1, r0
10050a92:	481f      	ldr	r0, [pc, #124]	@ (10050b10 <NVMDB_Init+0x2b4>)
10050a94:	0013      	movs	r3, r2
10050a96:	009b      	lsls	r3, r3, #2
10050a98:	189b      	adds	r3, r3, r2
10050a9a:	009b      	lsls	r3, r3, #2
10050a9c:	18c3      	adds	r3, r0, r3
10050a9e:	3304      	adds	r3, #4
10050aa0:	6019      	str	r1, [r3, #0]
#if AUTO_CLEAN
    DBInfo[id].clean_threshold = NVM_LARGE_DB_STATIC_INFO[i].clean_threshold;
10050aa2:	193b      	adds	r3, r7, r4
10050aa4:	781a      	ldrb	r2, [r3, #0]
10050aa6:	481b      	ldr	r0, [pc, #108]	@ (10050b14 <NVMDB_Init+0x2b8>)
10050aa8:	6979      	ldr	r1, [r7, #20]
10050aaa:	000b      	movs	r3, r1
10050aac:	005b      	lsls	r3, r3, #1
10050aae:	185b      	adds	r3, r3, r1
10050ab0:	009b      	lsls	r3, r3, #2
10050ab2:	18c3      	adds	r3, r0, r3
10050ab4:	3308      	adds	r3, #8
10050ab6:	8818      	ldrh	r0, [r3, #0]
10050ab8:	4915      	ldr	r1, [pc, #84]	@ (10050b10 <NVMDB_Init+0x2b4>)
10050aba:	0013      	movs	r3, r2
10050abc:	009b      	lsls	r3, r3, #2
10050abe:	189b      	adds	r3, r3, r2
10050ac0:	009b      	lsls	r3, r3, #2
10050ac2:	18cb      	adds	r3, r1, r3
10050ac4:	3310      	adds	r3, #16
10050ac6:	1c02      	adds	r2, r0, #0
10050ac8:	801a      	strh	r2, [r3, #0]
#endif

    status = NVMDB_get_info(&DBInfo[id]);
10050aca:	193b      	adds	r3, r7, r4
10050acc:	781a      	ldrb	r2, [r3, #0]
10050ace:	0013      	movs	r3, r2
10050ad0:	009b      	lsls	r3, r3, #2
10050ad2:	189b      	adds	r3, r3, r2
10050ad4:	009b      	lsls	r3, r3, #2
10050ad6:	4a0e      	ldr	r2, [pc, #56]	@ (10050b10 <NVMDB_Init+0x2b4>)
10050ad8:	189b      	adds	r3, r3, r2
10050ada:	2512      	movs	r5, #18
10050adc:	197c      	adds	r4, r7, r5
10050ade:	0018      	movs	r0, r3
10050ae0:	f7fe feae 	bl	1004f840 <NVMDB_get_info>
10050ae4:	0003      	movs	r3, r0
10050ae6:	7023      	strb	r3, [r4, #0]
    if(status)
10050ae8:	197b      	adds	r3, r7, r5
10050aea:	781b      	ldrb	r3, [r3, #0]
10050aec:	2b00      	cmp	r3, #0
10050aee:	d002      	beq.n	10050af6 <NVMDB_Init+0x29a>
    {
      return status;
10050af0:	197b      	adds	r3, r7, r5
10050af2:	781b      	ldrb	r3, [r3, #0]
10050af4:	e006      	b.n	10050b04 <NVMDB_Init+0x2a8>
  for(int i = 0; i < NUM_LARGE_DBS; i++)
10050af6:	697b      	ldr	r3, [r7, #20]
10050af8:	3301      	adds	r3, #1
10050afa:	617b      	str	r3, [r7, #20]
10050afc:	697b      	ldr	r3, [r7, #20]
10050afe:	2b01      	cmp	r3, #1
10050b00:	dd87      	ble.n	10050a12 <NVMDB_Init+0x1b6>
    }
  }

  return NVMDB_STATUS_OK;
10050b02:	2300      	movs	r3, #0
}
10050b04:	0018      	movs	r0, r3
10050b06:	46bd      	mov	sp, r7
10050b08:	b008      	add	sp, #32
10050b0a:	bdb0      	pop	{r4, r5, r7, pc}
10050b0c:	20002940 	.word	0x20002940
10050b10:	20002914 	.word	0x20002914
10050b14:	1006948c 	.word	0x1006948c

10050b18 <NVMDB_HandleInit>:
 *             through NVM_SMALL_DB_STATIC_INFO and NVM_LARGE_DB_STATIC_INFO variables.
 * @param[out] handle_p Pointer to the handle to be initialized.
 * @retval Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_HandleInit(NVMDB_IdType NVMDB_id, NVMDB_HandleType *handle_p)
{
10050b18:	b580      	push	{r7, lr}
10050b1a:	b082      	sub	sp, #8
10050b1c:	af00      	add	r7, sp, #0
10050b1e:	0002      	movs	r2, r0
10050b20:	6039      	str	r1, [r7, #0]
10050b22:	1dfb      	adds	r3, r7, #7
10050b24:	701a      	strb	r2, [r3, #0]
  if(NVMDB_id >= NUM_DB)
10050b26:	1dfb      	adds	r3, r7, #7
10050b28:	781b      	ldrb	r3, [r3, #0]
10050b2a:	2b01      	cmp	r3, #1
10050b2c:	d901      	bls.n	10050b32 <NVMDB_HandleInit+0x1a>
  {
    return NVMDB_STATUS_INVALID_ID;
10050b2e:	2301      	movs	r3, #1
10050b30:	e020      	b.n	10050b74 <NVMDB_HandleInit+0x5c>
  }

  handle_p->address = DBInfo[NVMDB_id].start_address;
10050b32:	1dfb      	adds	r3, r7, #7
10050b34:	781a      	ldrb	r2, [r3, #0]
10050b36:	4911      	ldr	r1, [pc, #68]	@ (10050b7c <NVMDB_HandleInit+0x64>)
10050b38:	0013      	movs	r3, r2
10050b3a:	009b      	lsls	r3, r3, #2
10050b3c:	189b      	adds	r3, r3, r2
10050b3e:	009b      	lsls	r3, r3, #2
10050b40:	585a      	ldr	r2, [r3, r1]
10050b42:	683b      	ldr	r3, [r7, #0]
10050b44:	605a      	str	r2, [r3, #4]
  handle_p->end_address = DBInfo[NVMDB_id].end_address;
10050b46:	1dfb      	adds	r3, r7, #7
10050b48:	781a      	ldrb	r2, [r3, #0]
10050b4a:	490c      	ldr	r1, [pc, #48]	@ (10050b7c <NVMDB_HandleInit+0x64>)
10050b4c:	0013      	movs	r3, r2
10050b4e:	009b      	lsls	r3, r3, #2
10050b50:	189b      	adds	r3, r3, r2
10050b52:	009b      	lsls	r3, r3, #2
10050b54:	18cb      	adds	r3, r1, r3
10050b56:	3304      	adds	r3, #4
10050b58:	681a      	ldr	r2, [r3, #0]
10050b5a:	683b      	ldr	r3, [r7, #0]
10050b5c:	609a      	str	r2, [r3, #8]
  handle_p->first_read = TRUE;
10050b5e:	683b      	ldr	r3, [r7, #0]
10050b60:	2201      	movs	r2, #1
10050b62:	731a      	strb	r2, [r3, #12]
  handle_p->id = NVMDB_id;
10050b64:	683b      	ldr	r3, [r7, #0]
10050b66:	1dfa      	adds	r2, r7, #7
10050b68:	7812      	ldrb	r2, [r2, #0]
10050b6a:	701a      	strb	r2, [r3, #0]
  handle_p->cache = FALSE;
10050b6c:	683b      	ldr	r3, [r7, #0]
10050b6e:	2200      	movs	r2, #0
10050b70:	735a      	strb	r2, [r3, #13]

  return NVMDB_STATUS_OK;
10050b72:	2300      	movs	r3, #0
}
10050b74:	0018      	movs	r0, r3
10050b76:	46bd      	mov	sp, r7
10050b78:	b002      	add	sp, #8
10050b7a:	bd80      	pop	{r7, pc}
10050b7c:	20002914 	.word	0x20002914

10050b80 <NVMDB_ReadNextRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadNextRecord(NVMDB_HandleType *handle_p, uint8_t record_type, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10050b80:	b590      	push	{r4, r7, lr}
10050b82:	b089      	sub	sp, #36	@ 0x24
10050b84:	af04      	add	r7, sp, #16
10050b86:	60f8      	str	r0, [r7, #12]
10050b88:	0008      	movs	r0, r1
10050b8a:	0011      	movs	r1, r2
10050b8c:	607b      	str	r3, [r7, #4]
10050b8e:	230b      	movs	r3, #11
10050b90:	18fb      	adds	r3, r7, r3
10050b92:	1c02      	adds	r2, r0, #0
10050b94:	701a      	strb	r2, [r3, #0]
10050b96:	2308      	movs	r3, #8
10050b98:	18fb      	adds	r3, r7, r3
10050b9a:	1c0a      	adds	r2, r1, #0
10050b9c:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
10050b9e:	68fb      	ldr	r3, [r7, #12]
10050ba0:	781b      	ldrb	r3, [r3, #0]
10050ba2:	0019      	movs	r1, r3
10050ba4:	4a12      	ldr	r2, [pc, #72]	@ (10050bf0 <NVMDB_ReadNextRecord+0x70>)
10050ba6:	000b      	movs	r3, r1
10050ba8:	009b      	lsls	r3, r3, #2
10050baa:	185b      	adds	r3, r3, r1
10050bac:	009b      	lsls	r3, r3, #2
10050bae:	18d3      	adds	r3, r2, r3
10050bb0:	330e      	adds	r3, #14
10050bb2:	781b      	ldrb	r3, [r3, #0]
10050bb4:	2b00      	cmp	r3, #0
10050bb6:	d001      	beq.n	10050bbc <NVMDB_ReadNextRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10050bb8:	230a      	movs	r3, #10
10050bba:	e015      	b.n	10050be8 <NVMDB_ReadNextRecord+0x68>
  }

  return ReadNextRecordNoLock(handle_p, record_type, data_offset, data_p, max_size, size_p, 0, NULL);
10050bbc:	687c      	ldr	r4, [r7, #4]
10050bbe:	2308      	movs	r3, #8
10050bc0:	18fb      	adds	r3, r7, r3
10050bc2:	881a      	ldrh	r2, [r3, #0]
10050bc4:	230b      	movs	r3, #11
10050bc6:	18fb      	adds	r3, r7, r3
10050bc8:	7819      	ldrb	r1, [r3, #0]
10050bca:	68f8      	ldr	r0, [r7, #12]
10050bcc:	2300      	movs	r3, #0
10050bce:	9303      	str	r3, [sp, #12]
10050bd0:	2300      	movs	r3, #0
10050bd2:	9302      	str	r3, [sp, #8]
10050bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050bd6:	9301      	str	r3, [sp, #4]
10050bd8:	2320      	movs	r3, #32
10050bda:	18fb      	adds	r3, r7, r3
10050bdc:	881b      	ldrh	r3, [r3, #0]
10050bde:	9300      	str	r3, [sp, #0]
10050be0:	0023      	movs	r3, r4
10050be2:	f7fe fef9 	bl	1004f9d8 <ReadNextRecordNoLock>
10050be6:	0003      	movs	r3, r0
}
10050be8:	0018      	movs	r0, r3
10050bea:	46bd      	mov	sp, r7
10050bec:	b005      	add	sp, #20
10050bee:	bd90      	pop	{r4, r7, pc}
10050bf0:	20002914 	.word	0x20002914

10050bf4 <NVMDB_ReadCurrentRecord>:
 * @param      max_size Size of the buffer pointed by data_p.
 * @param[out] size_p Size of the read record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_ReadCurrentRecord(NVMDB_HandleType *handle_p, NVMDB_RecordSizeType data_offset, uint8_t *data_p, NVMDB_RecordSizeType max_size, NVMDB_RecordSizeType *size_p)
{
10050bf4:	b590      	push	{r4, r7, lr}
10050bf6:	b087      	sub	sp, #28
10050bf8:	af02      	add	r7, sp, #8
10050bfa:	60f8      	str	r0, [r7, #12]
10050bfc:	0008      	movs	r0, r1
10050bfe:	607a      	str	r2, [r7, #4]
10050c00:	0019      	movs	r1, r3
10050c02:	230a      	movs	r3, #10
10050c04:	18fb      	adds	r3, r7, r3
10050c06:	1c02      	adds	r2, r0, #0
10050c08:	801a      	strh	r2, [r3, #0]
10050c0a:	2308      	movs	r3, #8
10050c0c:	18fb      	adds	r3, r7, r3
10050c0e:	1c0a      	adds	r2, r1, #0
10050c10:	801a      	strh	r2, [r3, #0]
  if(DBInfo[handle_p->id].locked)
10050c12:	68fb      	ldr	r3, [r7, #12]
10050c14:	781b      	ldrb	r3, [r3, #0]
10050c16:	0019      	movs	r1, r3
10050c18:	4a0f      	ldr	r2, [pc, #60]	@ (10050c58 <NVMDB_ReadCurrentRecord+0x64>)
10050c1a:	000b      	movs	r3, r1
10050c1c:	009b      	lsls	r3, r3, #2
10050c1e:	185b      	adds	r3, r3, r1
10050c20:	009b      	lsls	r3, r3, #2
10050c22:	18d3      	adds	r3, r2, r3
10050c24:	330e      	adds	r3, #14
10050c26:	781b      	ldrb	r3, [r3, #0]
10050c28:	2b00      	cmp	r3, #0
10050c2a:	d001      	beq.n	10050c30 <NVMDB_ReadCurrentRecord+0x3c>
  {
    return NVMDB_STATUS_LOCKED;
10050c2c:	230a      	movs	r3, #10
10050c2e:	e00f      	b.n	10050c50 <NVMDB_ReadCurrentRecord+0x5c>
  }

  return ReadCurrentRecordNoLock(handle_p, data_offset, data_p, max_size, size_p, 0);
10050c30:	2308      	movs	r3, #8
10050c32:	18fb      	adds	r3, r7, r3
10050c34:	881c      	ldrh	r4, [r3, #0]
10050c36:	687a      	ldr	r2, [r7, #4]
10050c38:	230a      	movs	r3, #10
10050c3a:	18fb      	adds	r3, r7, r3
10050c3c:	8819      	ldrh	r1, [r3, #0]
10050c3e:	68f8      	ldr	r0, [r7, #12]
10050c40:	2300      	movs	r3, #0
10050c42:	9301      	str	r3, [sp, #4]
10050c44:	6a3b      	ldr	r3, [r7, #32]
10050c46:	9300      	str	r3, [sp, #0]
10050c48:	0023      	movs	r3, r4
10050c4a:	f7ff f81c 	bl	1004fc86 <ReadCurrentRecordNoLock>
10050c4e:	0003      	movs	r3, r0
}
10050c50:	0018      	movs	r0, r3
10050c52:	46bd      	mov	sp, r7
10050c54:	b005      	add	sp, #20
10050c56:	bd90      	pop	{r4, r7, pc}
10050c58:	20002914 	.word	0x20002914

10050c5c <NVMDB_AppendRecord>:
 * @param      header_length Length of bytes in data.
 * @param[in]  data Data to be stored inside the record.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_AppendRecord(NVMDB_HandleType *handle_p, uint8_t record_type, uint16_t header_length, const void *header, uint16_t data_length, const void *data)
{
10050c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10050c5e:	46c6      	mov	lr, r8
10050c60:	b500      	push	{lr}
10050c62:	b088      	sub	sp, #32
10050c64:	af02      	add	r7, sp, #8
10050c66:	60f8      	str	r0, [r7, #12]
10050c68:	0008      	movs	r0, r1
10050c6a:	0011      	movs	r1, r2
10050c6c:	607b      	str	r3, [r7, #4]
10050c6e:	230b      	movs	r3, #11
10050c70:	001c      	movs	r4, r3
10050c72:	18fb      	adds	r3, r7, r3
10050c74:	1c02      	adds	r2, r0, #0
10050c76:	701a      	strb	r2, [r3, #0]
10050c78:	2008      	movs	r0, #8
10050c7a:	183b      	adds	r3, r7, r0
10050c7c:	1c0a      	adds	r2, r1, #0
10050c7e:	801a      	strh	r2, [r3, #0]
  }

success:

#else /* NVM_CACHE */
  status = NVMDB_AppendRecordNoCache(handle_p, record_type, header_length, header, data_length, data);
10050c80:	2617      	movs	r6, #23
10050c82:	46b0      	mov	r8, r6
10050c84:	44b8      	add	r8, r7
10050c86:	687d      	ldr	r5, [r7, #4]
10050c88:	183b      	adds	r3, r7, r0
10050c8a:	881a      	ldrh	r2, [r3, #0]
10050c8c:	0023      	movs	r3, r4
10050c8e:	18fb      	adds	r3, r7, r3
10050c90:	7819      	ldrb	r1, [r3, #0]
10050c92:	68f8      	ldr	r0, [r7, #12]
10050c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
10050c96:	9301      	str	r3, [sp, #4]
10050c98:	2328      	movs	r3, #40	@ 0x28
10050c9a:	2408      	movs	r4, #8
10050c9c:	191b      	adds	r3, r3, r4
10050c9e:	19db      	adds	r3, r3, r7
10050ca0:	881b      	ldrh	r3, [r3, #0]
10050ca2:	9300      	str	r3, [sp, #0]
10050ca4:	002b      	movs	r3, r5
10050ca6:	f7ff fd19 	bl	100506dc <NVMDB_AppendRecordNoCache>
10050caa:	0003      	movs	r3, r0
10050cac:	4642      	mov	r2, r8
10050cae:	7013      	strb	r3, [r2, #0]

  if(status != NVMDB_STATUS_OK)
10050cb0:	19bb      	adds	r3, r7, r6
10050cb2:	781b      	ldrb	r3, [r3, #0]
10050cb4:	2b00      	cmp	r3, #0
10050cb6:	d002      	beq.n	10050cbe <NVMDB_AppendRecord+0x62>
  {
    return status;
10050cb8:	19bb      	adds	r3, r7, r6
10050cba:	781b      	ldrb	r3, [r3, #0]
10050cbc:	e02c      	b.n	10050d18 <NVMDB_AppendRecord+0xbc>
  }

#endif

  /* Take into account that the free space is reduced, even if the record is actually in cache.  */
  DBInfo[handle_p->id].free_space -= ROUND4_R(header_length + data_length) + RECORD_HEADER_SIZE;
10050cbe:	68fb      	ldr	r3, [r7, #12]
10050cc0:	781b      	ldrb	r3, [r3, #0]
10050cc2:	0019      	movs	r1, r3
10050cc4:	4a17      	ldr	r2, [pc, #92]	@ (10050d24 <NVMDB_AppendRecord+0xc8>)
10050cc6:	000b      	movs	r3, r1
10050cc8:	009b      	lsls	r3, r3, #2
10050cca:	185b      	adds	r3, r3, r1
10050ccc:	009b      	lsls	r3, r3, #2
10050cce:	18d3      	adds	r3, r2, r3
10050cd0:	330c      	adds	r3, #12
10050cd2:	881a      	ldrh	r2, [r3, #0]
10050cd4:	2308      	movs	r3, #8
10050cd6:	0018      	movs	r0, r3
10050cd8:	18f9      	adds	r1, r7, r3
10050cda:	2328      	movs	r3, #40	@ 0x28
10050cdc:	181b      	adds	r3, r3, r0
10050cde:	19db      	adds	r3, r3, r7
10050ce0:	8809      	ldrh	r1, [r1, #0]
10050ce2:	881b      	ldrh	r3, [r3, #0]
10050ce4:	18cb      	adds	r3, r1, r3
10050ce6:	b29b      	uxth	r3, r3
10050ce8:	3b01      	subs	r3, #1
10050cea:	b29b      	uxth	r3, r3
10050cec:	b21b      	sxth	r3, r3
10050cee:	2103      	movs	r1, #3
10050cf0:	430b      	orrs	r3, r1
10050cf2:	b21b      	sxth	r3, r3
10050cf4:	b29b      	uxth	r3, r3
10050cf6:	1ad3      	subs	r3, r2, r3
10050cf8:	b29b      	uxth	r3, r3
10050cfa:	68fa      	ldr	r2, [r7, #12]
10050cfc:	7812      	ldrb	r2, [r2, #0]
10050cfe:	0011      	movs	r1, r2
10050d00:	3b05      	subs	r3, #5
10050d02:	b298      	uxth	r0, r3
10050d04:	4a07      	ldr	r2, [pc, #28]	@ (10050d24 <NVMDB_AppendRecord+0xc8>)
10050d06:	000b      	movs	r3, r1
10050d08:	009b      	lsls	r3, r3, #2
10050d0a:	185b      	adds	r3, r3, r1
10050d0c:	009b      	lsls	r3, r3, #2
10050d0e:	18d3      	adds	r3, r2, r3
10050d10:	330c      	adds	r3, #12
10050d12:	1c02      	adds	r2, r0, #0
10050d14:	801a      	strh	r2, [r3, #0]

  return NVMDB_STATUS_OK;
10050d16:	2300      	movs	r3, #0
}
10050d18:	0018      	movs	r0, r3
10050d1a:	46bd      	mov	sp, r7
10050d1c:	b006      	add	sp, #24
10050d1e:	bc80      	pop	{r7}
10050d20:	46b8      	mov	r8, r7
10050d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10050d24:	20002914 	.word	0x20002914

10050d28 <NVMDB_DeleteRecord>:
 *
 * @param[in,out] handle_p Handle pointing to the record to be deleted.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_DeleteRecord(const NVMDB_HandleType *handle_p)
{
10050d28:	b580      	push	{r7, lr}
10050d2a:	b082      	sub	sp, #8
10050d2c:	af00      	add	r7, sp, #0
10050d2e:	6078      	str	r0, [r7, #4]
  /* No time to complete the operation immediately.  */
  return ScheduleDeleteOperation(handle_p->id, handle_p->address);

#else /* NVM_CACHE */

  return NVMDB_DeleteRecordNoCache(handle_p);
10050d30:	687b      	ldr	r3, [r7, #4]
10050d32:	0018      	movs	r0, r3
10050d34:	f7ff f828 	bl	1004fd88 <NVMDB_DeleteRecordNoCache>
10050d38:	0003      	movs	r3, r0

#endif
}
10050d3a:	0018      	movs	r0, r3
10050d3c:	46bd      	mov	sp, r7
10050d3e:	b002      	add	sp, #8
10050d40:	bd80      	pop	{r7, pc}
	...

10050d44 <NVMDB_Erase>:
 *
 * @param      NVMDB_id The ID of the record to be erased.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_Erase(NVMDB_IdType NVMDB_id)
{
10050d44:	b5b0      	push	{r4, r5, r7, lr}
10050d46:	b08c      	sub	sp, #48	@ 0x30
10050d48:	af00      	add	r7, sp, #0
10050d4a:	0002      	movs	r2, r0
10050d4c:	1dfb      	adds	r3, r7, #7
10050d4e:	701a      	strb	r2, [r3, #0]
  {
    return NVMDB_STATUS_CACHE_OP_PENDING;
  }
#endif

  type = GetDBType(NVMDB_id, &smallDBContainer_p);
10050d50:	252b      	movs	r5, #43	@ 0x2b
10050d52:	197c      	adds	r4, r7, r5
10050d54:	2318      	movs	r3, #24
10050d56:	18fa      	adds	r2, r7, r3
10050d58:	1dfb      	adds	r3, r7, #7
10050d5a:	781b      	ldrb	r3, [r3, #0]
10050d5c:	0011      	movs	r1, r2
10050d5e:	0018      	movs	r0, r3
10050d60:	f7ff fbc6 	bl	100504f0 <GetDBType>
10050d64:	0003      	movs	r3, r0
10050d66:	7023      	strb	r3, [r4, #0]

  if(type == LARGE_DB)
10050d68:	197b      	adds	r3, r7, r5
10050d6a:	781b      	ldrb	r3, [r3, #0]
10050d6c:	2b02      	cmp	r3, #2
10050d6e:	d146      	bne.n	10050dfe <NVMDB_Erase+0xba>
  {
    uint8_t page_num_start, num_pages;
    uint32_t start_address = DBInfo[NVMDB_id].start_address;
10050d70:	1dfb      	adds	r3, r7, #7
10050d72:	781a      	ldrb	r2, [r3, #0]
10050d74:	4942      	ldr	r1, [pc, #264]	@ (10050e80 <NVMDB_Erase+0x13c>)
10050d76:	0013      	movs	r3, r2
10050d78:	009b      	lsls	r3, r3, #2
10050d7a:	189b      	adds	r3, r3, r2
10050d7c:	009b      	lsls	r3, r3, #2
10050d7e:	585b      	ldr	r3, [r3, r1]
10050d80:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t end_address = DBInfo[NVMDB_id].end_address;
10050d82:	1dfb      	adds	r3, r7, #7
10050d84:	781a      	ldrb	r2, [r3, #0]
10050d86:	493e      	ldr	r1, [pc, #248]	@ (10050e80 <NVMDB_Erase+0x13c>)
10050d88:	0013      	movs	r3, r2
10050d8a:	009b      	lsls	r3, r3, #2
10050d8c:	189b      	adds	r3, r3, r2
10050d8e:	009b      	lsls	r3, r3, #2
10050d90:	18cb      	adds	r3, r1, r3
10050d92:	3304      	adds	r3, #4
10050d94:	681b      	ldr	r3, [r3, #0]
10050d96:	623b      	str	r3, [r7, #32]

    page_num_start = (start_address - _MEMORY_FLASH_BEGIN_) / PAGE_SIZE;
10050d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050d9a:	4a3a      	ldr	r2, [pc, #232]	@ (10050e84 <NVMDB_Erase+0x140>)
10050d9c:	4694      	mov	ip, r2
10050d9e:	4463      	add	r3, ip
10050da0:	0ada      	lsrs	r2, r3, #11
10050da2:	201f      	movs	r0, #31
10050da4:	183b      	adds	r3, r7, r0
10050da6:	701a      	strb	r2, [r3, #0]
    num_pages = (ROUNDPAGE_R(end_address) - start_address) / PAGE_SIZE;
10050da8:	6a3b      	ldr	r3, [r7, #32]
10050daa:	3b01      	subs	r3, #1
10050dac:	4a36      	ldr	r2, [pc, #216]	@ (10050e88 <NVMDB_Erase+0x144>)
10050dae:	431a      	orrs	r2, r3
10050db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10050db2:	1ad3      	subs	r3, r2, r3
10050db4:	3301      	adds	r3, #1
10050db6:	0ada      	lsrs	r2, r3, #11
10050db8:	241e      	movs	r4, #30
10050dba:	193b      	adds	r3, r7, r4
10050dbc:	701a      	strb	r2, [r3, #0]
      return SchedulePageEraseOperation(NVMDB_id, page_num_start, num_pages);
    }

#else

    NVMDB_FLASH_ERASE_PAGE(page_num_start, num_pages);
10050dbe:	210c      	movs	r1, #12
10050dc0:	187b      	adds	r3, r7, r1
10050dc2:	2200      	movs	r2, #0
10050dc4:	601a      	str	r2, [r3, #0]
10050dc6:	183b      	adds	r3, r7, r0
10050dc8:	781a      	ldrb	r2, [r3, #0]
10050dca:	187b      	adds	r3, r7, r1
10050dcc:	605a      	str	r2, [r3, #4]
10050dce:	193b      	adds	r3, r7, r4
10050dd0:	781a      	ldrb	r2, [r3, #0]
10050dd2:	187b      	adds	r3, r7, r1
10050dd4:	609a      	str	r2, [r3, #8]
10050dd6:	2308      	movs	r3, #8
10050dd8:	18fa      	adds	r2, r7, r3
10050dda:	187b      	adds	r3, r7, r1
10050ddc:	0011      	movs	r1, r2
10050dde:	0018      	movs	r0, r3
10050de0:	f7f6 fbee 	bl	100475c0 <HAL_FLASHEx_Erase>

#endif

    NVMDB_get_info(&DBInfo[NVMDB_id]);
10050de4:	1dfb      	adds	r3, r7, #7
10050de6:	781a      	ldrb	r2, [r3, #0]
10050de8:	0013      	movs	r3, r2
10050dea:	009b      	lsls	r3, r3, #2
10050dec:	189b      	adds	r3, r3, r2
10050dee:	009b      	lsls	r3, r3, #2
10050df0:	4a23      	ldr	r2, [pc, #140]	@ (10050e80 <NVMDB_Erase+0x13c>)
10050df2:	189b      	adds	r3, r3, r2
10050df4:	0018      	movs	r0, r3
10050df6:	f7fe fd23 	bl	1004f840 <NVMDB_get_info>

    return NVMDB_STATUS_OK;
10050dfa:	2300      	movs	r3, #0
10050dfc:	e03b      	b.n	10050e76 <NVMDB_Erase+0x132>
  }

  if(type == SMALL_DB)
10050dfe:	232b      	movs	r3, #43	@ 0x2b
10050e00:	18fb      	adds	r3, r7, r3
10050e02:	781b      	ldrb	r3, [r3, #0]
10050e04:	2b01      	cmp	r3, #1
10050e06:	d135      	bne.n	10050e74 <NVMDB_Erase+0x130>
  {

    status = EraseSmallDB(NVMDB_id, smallDBContainer_p);
10050e08:	69ba      	ldr	r2, [r7, #24]
10050e0a:	252a      	movs	r5, #42	@ 0x2a
10050e0c:	197c      	adds	r4, r7, r5
10050e0e:	1dfb      	adds	r3, r7, #7
10050e10:	781b      	ldrb	r3, [r3, #0]
10050e12:	0011      	movs	r1, r2
10050e14:	0018      	movs	r0, r3
10050e16:	f7ff fbd9 	bl	100505cc <EraseSmallDB>
10050e1a:	0003      	movs	r3, r0
10050e1c:	7023      	strb	r3, [r4, #0]

    if(status == NVMDB_STATUS_OK)
10050e1e:	197b      	adds	r3, r7, r5
10050e20:	781b      	ldrb	r3, [r3, #0]
10050e22:	2b00      	cmp	r3, #0
10050e24:	d122      	bne.n	10050e6c <NVMDB_Erase+0x128>
    {
      // Remove any operations in cache for all the DBs in the page. This means write and delete operations.
      // Cache operations for all the DBs in the same page have been executed by LoadDBToRAM().
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
10050e26:	2300      	movs	r3, #0
10050e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
10050e2a:	e019      	b.n	10050e60 <NVMDB_Erase+0x11c>
      {
        NVMDB_IdType id = smallDBContainer_p->dbs[i].id;
10050e2c:	69bb      	ldr	r3, [r7, #24]
10050e2e:	6899      	ldr	r1, [r3, #8]
10050e30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
10050e32:	0013      	movs	r3, r2
10050e34:	005b      	lsls	r3, r3, #1
10050e36:	189b      	adds	r3, r3, r2
10050e38:	009b      	lsls	r3, r3, #2
10050e3a:	18ca      	adds	r2, r1, r3
10050e3c:	2129      	movs	r1, #41	@ 0x29
10050e3e:	187b      	adds	r3, r7, r1
10050e40:	7812      	ldrb	r2, [r2, #0]
10050e42:	701a      	strb	r2, [r3, #0]
#if NVM_CACHE
        RemoveCacheOp(id);
#endif
        NVMDB_get_info(&DBInfo[id]);
10050e44:	187b      	adds	r3, r7, r1
10050e46:	781a      	ldrb	r2, [r3, #0]
10050e48:	0013      	movs	r3, r2
10050e4a:	009b      	lsls	r3, r3, #2
10050e4c:	189b      	adds	r3, r3, r2
10050e4e:	009b      	lsls	r3, r3, #2
10050e50:	4a0b      	ldr	r2, [pc, #44]	@ (10050e80 <NVMDB_Erase+0x13c>)
10050e52:	189b      	adds	r3, r3, r2
10050e54:	0018      	movs	r0, r3
10050e56:	f7fe fcf3 	bl	1004f840 <NVMDB_get_info>
      for(int i = 0; i < smallDBContainer_p->num_db; i++)
10050e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10050e5c:	3301      	adds	r3, #1
10050e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
10050e60:	69bb      	ldr	r3, [r7, #24]
10050e62:	791b      	ldrb	r3, [r3, #4]
10050e64:	001a      	movs	r2, r3
10050e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10050e68:	4293      	cmp	r3, r2
10050e6a:	dbdf      	blt.n	10050e2c <NVMDB_Erase+0xe8>
#if NVM_CACHE
      return ScheduleSmallDBEraseOperation(NVMDB_id, smallDBContainer_p);
#endif
    }

    return status;
10050e6c:	232a      	movs	r3, #42	@ 0x2a
10050e6e:	18fb      	adds	r3, r7, r3
10050e70:	781b      	ldrb	r3, [r3, #0]
10050e72:	e000      	b.n	10050e76 <NVMDB_Erase+0x132>
  }

  return NVMDB_STATUS_INVALID_ID;
10050e74:	2301      	movs	r3, #1
}
10050e76:	0018      	movs	r0, r3
10050e78:	46bd      	mov	sp, r7
10050e7a:	b00c      	add	sp, #48	@ 0x30
10050e7c:	bdb0      	pop	{r4, r5, r7, pc}
10050e7e:	46c0      	nop			@ (mov r8, r8)
10050e80:	20002914 	.word	0x20002914
10050e84:	effc0000 	.word	0xeffc0000
10050e88:	000007ff 	.word	0x000007ff

10050e8c <NVMDB_CleanDB>:
 *
 * @param      NVMDB_id The ID of the record to be cleaned.
 * @retval     Indicates if the function executed successfully.
 */
NVMDB_status_t NVMDB_CleanDB(NVMDB_IdType NVMDB_id)
{
10050e8c:	b5b0      	push	{r4, r5, r7, lr}
10050e8e:	b084      	sub	sp, #16
10050e90:	af00      	add	r7, sp, #0
10050e92:	0002      	movs	r2, r0
10050e94:	1dfb      	adds	r3, r7, #7
10050e96:	701a      	strb	r2, [r3, #0]
  const NVMDB_SmallDBContainerType *smallDBContainer;
  uint8_t type;

  type = GetDBType(NVMDB_id, &smallDBContainer);
10050e98:	250f      	movs	r5, #15
10050e9a:	197c      	adds	r4, r7, r5
10050e9c:	2308      	movs	r3, #8
10050e9e:	18fa      	adds	r2, r7, r3
10050ea0:	1dfb      	adds	r3, r7, #7
10050ea2:	781b      	ldrb	r3, [r3, #0]
10050ea4:	0011      	movs	r1, r2
10050ea6:	0018      	movs	r0, r3
10050ea8:	f7ff fb22 	bl	100504f0 <GetDBType>
10050eac:	0003      	movs	r3, r0
10050eae:	7023      	strb	r3, [r4, #0]
  if(type == LARGE_DB)
10050eb0:	197b      	adds	r3, r7, r5
10050eb2:	781b      	ldrb	r3, [r3, #0]
10050eb4:	2b02      	cmp	r3, #2
10050eb6:	d106      	bne.n	10050ec6 <NVMDB_CleanDB+0x3a>
  {
    return CleanLargeDB(NVMDB_id);
10050eb8:	1dfb      	adds	r3, r7, #7
10050eba:	781b      	ldrb	r3, [r3, #0]
10050ebc:	0018      	movs	r0, r3
10050ebe:	f7ff f92f 	bl	10050120 <CleanLargeDB>
10050ec2:	0003      	movs	r3, r0
10050ec4:	e00b      	b.n	10050ede <NVMDB_CleanDB+0x52>
  }
  if(type == SMALL_DB)
10050ec6:	230f      	movs	r3, #15
10050ec8:	18fb      	adds	r3, r7, r3
10050eca:	781b      	ldrb	r3, [r3, #0]
10050ecc:	2b01      	cmp	r3, #1
10050ece:	d105      	bne.n	10050edc <NVMDB_CleanDB+0x50>
  {
    return CleanPage(smallDBContainer);
10050ed0:	68bb      	ldr	r3, [r7, #8]
10050ed2:	0018      	movs	r0, r3
10050ed4:	f7ff fa02 	bl	100502dc <CleanPage>
10050ed8:	0003      	movs	r3, r0
10050eda:	e000      	b.n	10050ede <NVMDB_CleanDB+0x52>
  }

  return NVMDB_STATUS_INVALID_ID;
10050edc:	2301      	movs	r3, #1
}
10050ede:	0018      	movs	r0, r3
10050ee0:	46bd      	mov	sp, r7
10050ee2:	b004      	add	sp, #16
10050ee4:	bdb0      	pop	{r4, r5, r7, pc}
	...

10050ee8 <NVMDB_Tick>:
 *             The value NVMDB_STATUS_NOT_ENOUGH_TIME indicates that some operations
 *             cannot be performed because there is not enough time. Other values
 *             indicates unexpected conditions of the database.
 */
NVMDB_status_t NVMDB_Tick(void)
{
10050ee8:	b590      	push	{r4, r7, lr}
10050eea:	b083      	sub	sp, #12
10050eec:	af00      	add	r7, sp, #0
#endif

#endif /* NVM_CACHE */

#if AUTO_CLEAN
  dirty_db_id = NVMDB_CleanCheck();
10050eee:	1dfc      	adds	r4, r7, #7
10050ef0:	f000 f816 	bl	10050f20 <NVMDB_CleanCheck>
10050ef4:	0003      	movs	r3, r0
10050ef6:	7023      	strb	r3, [r4, #0]
  if(dirty_db_id >= 0)
10050ef8:	1dfb      	adds	r3, r7, #7
10050efa:	781b      	ldrb	r3, [r3, #0]
10050efc:	2b7f      	cmp	r3, #127	@ 0x7f
10050efe:	d808      	bhi.n	10050f12 <NVMDB_Tick+0x2a>
  {
    NVMDB_CleanDB((NVMDB_IdType)dirty_db_id);
10050f00:	1dfb      	adds	r3, r7, #7
10050f02:	781b      	ldrb	r3, [r3, #0]
10050f04:	0018      	movs	r0, r3
10050f06:	f7ff ffc1 	bl	10050e8c <NVMDB_CleanDB>
    PRINTF("Handle possibly not valid anymore!\r\n");
10050f0a:	4b04      	ldr	r3, [pc, #16]	@ (10050f1c <NVMDB_Tick+0x34>)
10050f0c:	0018      	movs	r0, r3
10050f0e:	f016 fd03 	bl	10067918 <puts>
  }
#endif

  return NVMDB_STATUS_OK;
10050f12:	2300      	movs	r3, #0
}
10050f14:	0018      	movs	r0, r3
10050f16:	46bd      	mov	sp, r7
10050f18:	b003      	add	sp, #12
10050f1a:	bd90      	pop	{r4, r7, pc}
10050f1c:	10068cb4 	.word	0x10068cb4

10050f20 <NVMDB_CleanCheck>:

#if AUTO_CLEAN
// Checks if it is a good time to perform a clean operation
static int8_t NVMDB_CleanCheck(void)
{
10050f20:	b580      	push	{r7, lr}
10050f22:	b082      	sub	sp, #8
10050f24:	af00      	add	r7, sp, #0
  static int8_t db_start_index = 0;
  uint8_t i = db_start_index;
10050f26:	4b2b      	ldr	r3, [pc, #172]	@ (10050fd4 <NVMDB_CleanCheck+0xb4>)
10050f28:	2200      	movs	r2, #0
10050f2a:	569a      	ldrsb	r2, [r3, r2]
10050f2c:	1dfb      	adds	r3, r7, #7
10050f2e:	701a      	strb	r2, [r3, #0]

  do
  {
    if(DBInfo[i].invalid_records)
10050f30:	1dfb      	adds	r3, r7, #7
10050f32:	781a      	ldrb	r2, [r3, #0]
10050f34:	4928      	ldr	r1, [pc, #160]	@ (10050fd8 <NVMDB_CleanCheck+0xb8>)
10050f36:	0013      	movs	r3, r2
10050f38:	009b      	lsls	r3, r3, #2
10050f3a:	189b      	adds	r3, r3, r2
10050f3c:	009b      	lsls	r3, r3, #2
10050f3e:	18cb      	adds	r3, r1, r3
10050f40:	330a      	adds	r3, #10
10050f42:	881b      	ldrh	r3, [r3, #0]
10050f44:	2b00      	cmp	r3, #0
10050f46:	d028      	beq.n	10050f9a <NVMDB_CleanCheck+0x7a>
    {
      if(DBInfo[i].free_space < DBInfo[i].clean_threshold)
10050f48:	1dfb      	adds	r3, r7, #7
10050f4a:	781a      	ldrb	r2, [r3, #0]
10050f4c:	4922      	ldr	r1, [pc, #136]	@ (10050fd8 <NVMDB_CleanCheck+0xb8>)
10050f4e:	0013      	movs	r3, r2
10050f50:	009b      	lsls	r3, r3, #2
10050f52:	189b      	adds	r3, r3, r2
10050f54:	009b      	lsls	r3, r3, #2
10050f56:	18cb      	adds	r3, r1, r3
10050f58:	330c      	adds	r3, #12
10050f5a:	8819      	ldrh	r1, [r3, #0]
10050f5c:	1dfb      	adds	r3, r7, #7
10050f5e:	781a      	ldrb	r2, [r3, #0]
10050f60:	481d      	ldr	r0, [pc, #116]	@ (10050fd8 <NVMDB_CleanCheck+0xb8>)
10050f62:	0013      	movs	r3, r2
10050f64:	009b      	lsls	r3, r3, #2
10050f66:	189b      	adds	r3, r3, r2
10050f68:	009b      	lsls	r3, r3, #2
10050f6a:	18c3      	adds	r3, r0, r3
10050f6c:	3310      	adds	r3, #16
10050f6e:	881b      	ldrh	r3, [r3, #0]
10050f70:	4299      	cmp	r1, r3
10050f72:	d212      	bcs.n	10050f9a <NVMDB_CleanCheck+0x7a>
      {
        // Next time do not start from this db.
        // There may be time to clean another one if this one has not been successfully cleaned.
        db_start_index = i + 1;
10050f74:	1dfb      	adds	r3, r7, #7
10050f76:	781b      	ldrb	r3, [r3, #0]
10050f78:	3301      	adds	r3, #1
10050f7a:	b2db      	uxtb	r3, r3
10050f7c:	b25a      	sxtb	r2, r3
10050f7e:	4b15      	ldr	r3, [pc, #84]	@ (10050fd4 <NVMDB_CleanCheck+0xb4>)
10050f80:	701a      	strb	r2, [r3, #0]
        if(db_start_index == NUM_DB)
10050f82:	4b14      	ldr	r3, [pc, #80]	@ (10050fd4 <NVMDB_CleanCheck+0xb4>)
10050f84:	781b      	ldrb	r3, [r3, #0]
10050f86:	b25b      	sxtb	r3, r3
10050f88:	2b02      	cmp	r3, #2
10050f8a:	d102      	bne.n	10050f92 <NVMDB_CleanCheck+0x72>
        {
          db_start_index = 0;
10050f8c:	4b11      	ldr	r3, [pc, #68]	@ (10050fd4 <NVMDB_CleanCheck+0xb4>)
10050f8e:	2200      	movs	r2, #0
10050f90:	701a      	strb	r2, [r3, #0]
        }
        return i;
10050f92:	1dfb      	adds	r3, r7, #7
10050f94:	781b      	ldrb	r3, [r3, #0]
10050f96:	b25b      	sxtb	r3, r3
10050f98:	e017      	b.n	10050fca <NVMDB_CleanCheck+0xaa>
      }
    }

    i++;
10050f9a:	1dfb      	adds	r3, r7, #7
10050f9c:	781a      	ldrb	r2, [r3, #0]
10050f9e:	1dfb      	adds	r3, r7, #7
10050fa0:	3201      	adds	r2, #1
10050fa2:	701a      	strb	r2, [r3, #0]
    if(i == NUM_DB)
10050fa4:	1dfb      	adds	r3, r7, #7
10050fa6:	781b      	ldrb	r3, [r3, #0]
10050fa8:	2b02      	cmp	r3, #2
10050faa:	d102      	bne.n	10050fb2 <NVMDB_CleanCheck+0x92>
    {
      i = 0;
10050fac:	1dfb      	adds	r3, r7, #7
10050fae:	2200      	movs	r2, #0
10050fb0:	701a      	strb	r2, [r3, #0]
    }
  }
  while(i != db_start_index);
10050fb2:	1dfb      	adds	r3, r7, #7
10050fb4:	781b      	ldrb	r3, [r3, #0]
10050fb6:	4a07      	ldr	r2, [pc, #28]	@ (10050fd4 <NVMDB_CleanCheck+0xb4>)
10050fb8:	7812      	ldrb	r2, [r2, #0]
10050fba:	b252      	sxtb	r2, r2
10050fbc:	4293      	cmp	r3, r2
10050fbe:	d1b7      	bne.n	10050f30 <NVMDB_CleanCheck+0x10>

  // All databases have been checked. We can start from first position next time (but not strictly needed).
  db_start_index = 0;
10050fc0:	4b04      	ldr	r3, [pc, #16]	@ (10050fd4 <NVMDB_CleanCheck+0xb4>)
10050fc2:	2200      	movs	r2, #0
10050fc4:	701a      	strb	r2, [r3, #0]

  return -1; // No db to clean
10050fc6:	2301      	movs	r3, #1
10050fc8:	425b      	negs	r3, r3
}
10050fca:	0018      	movs	r0, r3
10050fcc:	46bd      	mov	sp, r7
10050fce:	b002      	add	sp, #8
10050fd0:	bd80      	pop	{r7, pc}
10050fd2:	46c0      	nop			@ (mov r8, r8)
10050fd4:	2000293c 	.word	0x2000293c
10050fd8:	20002914 	.word	0x20002914

10050fdc <PKAMGR_Init>:

/** @defgroup PKA_Manager_Public_Functions Public Functions
* @{
*/
PKAMGR_ResultStatus PKAMGR_Init(void)
{
10050fdc:	b580      	push	{r7, lr}
10050fde:	af00      	add	r7, sp, #0
    internalState = PKAMGR_STATE_IDLE;
10050fe0:	4b03      	ldr	r3, [pc, #12]	@ (10050ff0 <PKAMGR_Init+0x14>)
10050fe2:	2201      	movs	r2, #1
10050fe4:	601a      	str	r2, [r3, #0]

  return PKAMGR_SUCCESS;
10050fe6:	2300      	movs	r3, #0
}
10050fe8:	0018      	movs	r0, r3
10050fea:	46bd      	mov	sp, r7
10050fec:	bd80      	pop	{r7, pc}
10050fee:	46c0      	nop			@ (mov r8, r8)
10050ff0:	20002ce0 	.word	0x20002ce0

10050ff4 <aci_gap_profile_init>:
tBleStatus aci_gap_profile_init(uint8_t Role,
                                uint8_t Privacy_Type,
                                uint16_t *Dev_Name_Char_Handle,
                                uint16_t *Appearance_Char_Handle,
                                uint16_t *Periph_Pref_Conn_Param_Char_Handle)
{
10050ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
10050ff6:	b087      	sub	sp, #28
10050ff8:	af00      	add	r7, sp, #0
10050ffa:	60ba      	str	r2, [r7, #8]
10050ffc:	607b      	str	r3, [r7, #4]
10050ffe:	240f      	movs	r4, #15
10051000:	193b      	adds	r3, r7, r4
10051002:	1c02      	adds	r2, r0, #0
10051004:	701a      	strb	r2, [r3, #0]
10051006:	230e      	movs	r3, #14
10051008:	18fb      	adds	r3, r7, r3
1005100a:	1c0a      	adds	r2, r1, #0
1005100c:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gap_srvc_handle;
  
  *Dev_Name_Char_Handle = 0x0000;
1005100e:	68bb      	ldr	r3, [r7, #8]
10051010:	2200      	movs	r2, #0
10051012:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle= 0x0000;
10051014:	687b      	ldr	r3, [r7, #4]
10051016:	2200      	movs	r2, #0
10051018:	801a      	strh	r2, [r3, #0]
  *Periph_Pref_Conn_Param_Char_Handle = 0x0000;
1005101a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1005101c:	2200      	movs	r2, #0
1005101e:	801a      	strh	r2, [r3, #0]
  
  if ((Role & (GAP_PERIPHERAL_ROLE | GAP_CENTRAL_ROLE)) != 0x0U)
10051020:	193b      	adds	r3, r7, r4
10051022:	781b      	ldrb	r3, [r3, #0]
10051024:	2205      	movs	r2, #5
10051026:	4013      	ands	r3, r2
10051028:	d046      	beq.n	100510b8 <aci_gap_profile_init+0xc4>
  {
    /**
    * Register GAP service.
    * Device Name and Appearance Characteristics will be also registered.
    */
    ret = aci_gatt_srv_add_service(&gap_srvc);
1005102a:	2517      	movs	r5, #23
1005102c:	197c      	adds	r4, r7, r5
1005102e:	4b25      	ldr	r3, [pc, #148]	@ (100510c4 <aci_gap_profile_init+0xd0>)
10051030:	0018      	movs	r0, r3
10051032:	f7fe f8c9 	bl	1004f1c8 <aci_gatt_srv_add_service>
10051036:	0003      	movs	r3, r0
10051038:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
1005103a:	197b      	adds	r3, r7, r5
1005103c:	781b      	ldrb	r3, [r3, #0]
1005103e:	2b00      	cmp	r3, #0
10051040:	d002      	beq.n	10051048 <aci_gap_profile_init+0x54>
    {
      return ret;
10051042:	197b      	adds	r3, r7, r5
10051044:	781b      	ldrb	r3, [r3, #0]
10051046:	e038      	b.n	100510ba <aci_gap_profile_init+0xc6>
    }
    
    *Dev_Name_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]);
10051048:	4b1f      	ldr	r3, [pc, #124]	@ (100510c8 <aci_gap_profile_init+0xd4>)
1005104a:	0018      	movs	r0, r3
1005104c:	f7fe f8e9 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
10051050:	0003      	movs	r3, r0
10051052:	001a      	movs	r2, r3
10051054:	68bb      	ldr	r3, [r7, #8]
10051056:	801a      	strh	r2, [r3, #0]
    *Appearance_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]);
10051058:	4b1c      	ldr	r3, [pc, #112]	@ (100510cc <aci_gap_profile_init+0xd8>)
1005105a:	0018      	movs	r0, r3
1005105c:	f7fe f8e1 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
10051060:	0003      	movs	r3, r0
10051062:	001a      	movs	r2, r3
10051064:	687b      	ldr	r3, [r7, #4]
10051066:	801a      	strh	r2, [r3, #0]
    
    gap_srvc_handle = aci_gatt_srv_get_service_handle(&gap_srvc);
10051068:	2614      	movs	r6, #20
1005106a:	19bc      	adds	r4, r7, r6
1005106c:	4b15      	ldr	r3, [pc, #84]	@ (100510c4 <aci_gap_profile_init+0xd0>)
1005106e:	0018      	movs	r0, r3
10051070:	f7fe f8b7 	bl	1004f1e2 <aci_gatt_srv_get_service_handle>
10051074:	0003      	movs	r3, r0
10051076:	8023      	strh	r3, [r4, #0]
      }
    }
    
    *Periph_Pref_Conn_Param_Char_Handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[2U]);
#else
    *Periph_Pref_Conn_Param_Char_Handle = 0;
10051078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1005107a:	2200      	movs	r2, #0
1005107c:	801a      	strh	r2, [r3, #0]
#endif    
    
    if (Privacy_Type == 2U)
1005107e:	230e      	movs	r3, #14
10051080:	18fb      	adds	r3, r7, r3
10051082:	781b      	ldrb	r3, [r3, #0]
10051084:	2b02      	cmp	r3, #2
10051086:	d111      	bne.n	100510ac <aci_gap_profile_init+0xb8>
    {
      /**
      * Register Central Address Resolution Characteristic.
      */
      ret = aci_gatt_srv_add_char(&gap_chrs[3U], gap_srvc_handle);
10051088:	2517      	movs	r5, #23
1005108a:	197c      	adds	r4, r7, r5
1005108c:	19bb      	adds	r3, r7, r6
1005108e:	881a      	ldrh	r2, [r3, #0]
10051090:	4b0f      	ldr	r3, [pc, #60]	@ (100510d0 <aci_gap_profile_init+0xdc>)
10051092:	0011      	movs	r1, r2
10051094:	0018      	movs	r0, r3
10051096:	f7fe f8b1 	bl	1004f1fc <aci_gatt_srv_add_char>
1005109a:	0003      	movs	r3, r0
1005109c:	7023      	strb	r3, [r4, #0]
      if (ret != BLE_STATUS_SUCCESS)
1005109e:	197b      	adds	r3, r7, r5
100510a0:	781b      	ldrb	r3, [r3, #0]
100510a2:	2b00      	cmp	r3, #0
100510a4:	d002      	beq.n	100510ac <aci_gap_profile_init+0xb8>
      {
        return ret;
100510a6:	197b      	adds	r3, r7, r5
100510a8:	781b      	ldrb	r3, [r3, #0]
100510aa:	e006      	b.n	100510ba <aci_gap_profile_init+0xc6>
#endif /* CFG_BLE_GAP_ENCRYPTED_KEY_MATERIAL_CHARACTERISTIC */
    
    /**
    * Set default device name.
    */
    Gap_profile_set_dev_name(0U, sizeof(default_dev_name),
100510ac:	4b09      	ldr	r3, [pc, #36]	@ (100510d4 <aci_gap_profile_init+0xe0>)
100510ae:	001a      	movs	r2, r3
100510b0:	2108      	movs	r1, #8
100510b2:	2000      	movs	r0, #0
100510b4:	f000 f810 	bl	100510d8 <Gap_profile_set_dev_name>
                             (uint8_t *)default_dev_name);
    
  }
  
  return BLE_STATUS_SUCCESS;
100510b8:	2300      	movs	r3, #0
}
100510ba:	0018      	movs	r0, r3
100510bc:	46bd      	mov	sp, r7
100510be:	b007      	add	sp, #28
100510c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100510c2:	46c0      	nop			@ (mov r8, r8)
100510c4:	20002db0 	.word	0x20002db0
100510c8:	20002cfc 	.word	0x20002cfc
100510cc:	20002d20 	.word	0x20002d20
100510d0:	20002d68 	.word	0x20002d68
100510d4:	100694a4 	.word	0x100694a4

100510d8 <Gap_profile_set_dev_name>:

tBleStatus Gap_profile_set_dev_name(uint16_t offset,
                                    uint16_t length,
                                    uint8_t *dev_name_p)
{
100510d8:	b590      	push	{r4, r7, lr}
100510da:	b085      	sub	sp, #20
100510dc:	af00      	add	r7, sp, #0
100510de:	603a      	str	r2, [r7, #0]
100510e0:	1dbb      	adds	r3, r7, #6
100510e2:	1c02      	adds	r2, r0, #0
100510e4:	801a      	strh	r2, [r3, #0]
100510e6:	1d3b      	adds	r3, r7, #4
100510e8:	1c0a      	adds	r2, r1, #0
100510ea:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[0U]) + 1U;
100510ec:	4b0c      	ldr	r3, [pc, #48]	@ (10051120 <Gap_profile_set_dev_name+0x48>)
100510ee:	0018      	movs	r0, r3
100510f0:	f7fe f897 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
100510f4:	0003      	movs	r3, r0
100510f6:	001a      	movs	r2, r3
100510f8:	200e      	movs	r0, #14
100510fa:	183b      	adds	r3, r7, r0
100510fc:	3201      	adds	r2, #1
100510fe:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, dev_name_p);
10051100:	683c      	ldr	r4, [r7, #0]
10051102:	1d3b      	adds	r3, r7, #4
10051104:	881a      	ldrh	r2, [r3, #0]
10051106:	1dbb      	adds	r3, r7, #6
10051108:	8819      	ldrh	r1, [r3, #0]
1005110a:	183b      	adds	r3, r7, r0
1005110c:	8818      	ldrh	r0, [r3, #0]
1005110e:	0023      	movs	r3, r4
10051110:	f000 f82e 	bl	10051170 <Gap_profile_set_char_value>
10051114:	0003      	movs	r3, r0
}
10051116:	0018      	movs	r0, r3
10051118:	46bd      	mov	sp, r7
1005111a:	b005      	add	sp, #20
1005111c:	bd90      	pop	{r4, r7, pc}
1005111e:	46c0      	nop			@ (mov r8, r8)
10051120:	20002cfc 	.word	0x20002cfc

10051124 <Gap_profile_set_appearance>:

tBleStatus Gap_profile_set_appearance(uint16_t offset,
                                      uint16_t length,
                                      uint8_t *appearance_p)
{
10051124:	b590      	push	{r4, r7, lr}
10051126:	b085      	sub	sp, #20
10051128:	af00      	add	r7, sp, #0
1005112a:	603a      	str	r2, [r7, #0]
1005112c:	1dbb      	adds	r3, r7, #6
1005112e:	1c02      	adds	r2, r0, #0
10051130:	801a      	strh	r2, [r3, #0]
10051132:	1d3b      	adds	r3, r7, #4
10051134:	1c0a      	adds	r2, r1, #0
10051136:	801a      	strh	r2, [r3, #0]
    uint16_t handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[1U]) + 1U;
10051138:	4b0c      	ldr	r3, [pc, #48]	@ (1005116c <Gap_profile_set_appearance+0x48>)
1005113a:	0018      	movs	r0, r3
1005113c:	f7fe f871 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
10051140:	0003      	movs	r3, r0
10051142:	001a      	movs	r2, r3
10051144:	200e      	movs	r0, #14
10051146:	183b      	adds	r3, r7, r0
10051148:	3201      	adds	r2, #1
1005114a:	801a      	strh	r2, [r3, #0]

    return Gap_profile_set_char_value(handle, offset, length, appearance_p);
1005114c:	683c      	ldr	r4, [r7, #0]
1005114e:	1d3b      	adds	r3, r7, #4
10051150:	881a      	ldrh	r2, [r3, #0]
10051152:	1dbb      	adds	r3, r7, #6
10051154:	8819      	ldrh	r1, [r3, #0]
10051156:	183b      	adds	r3, r7, r0
10051158:	8818      	ldrh	r0, [r3, #0]
1005115a:	0023      	movs	r3, r4
1005115c:	f000 f808 	bl	10051170 <Gap_profile_set_char_value>
10051160:	0003      	movs	r3, r0
}
10051162:	0018      	movs	r0, r3
10051164:	46bd      	mov	sp, r7
10051166:	b005      	add	sp, #20
10051168:	bd90      	pop	{r4, r7, pc}
1005116a:	46c0      	nop			@ (mov r8, r8)
1005116c:	20002d20 	.word	0x20002d20

10051170 <Gap_profile_set_char_value>:

tBleStatus Gap_profile_set_char_value(uint16_t attr_h,
                                      uint16_t val_offset,
                                      uint16_t val_length,
                                      uint8_t *val_p)
{
10051170:	b5b0      	push	{r4, r5, r7, lr}
10051172:	b086      	sub	sp, #24
10051174:	af00      	add	r7, sp, #0
10051176:	0004      	movs	r4, r0
10051178:	0008      	movs	r0, r1
1005117a:	0011      	movs	r1, r2
1005117c:	607b      	str	r3, [r7, #4]
1005117e:	230e      	movs	r3, #14
10051180:	18fb      	adds	r3, r7, r3
10051182:	1c22      	adds	r2, r4, #0
10051184:	801a      	strh	r2, [r3, #0]
10051186:	230c      	movs	r3, #12
10051188:	18fb      	adds	r3, r7, r3
1005118a:	1c02      	adds	r2, r0, #0
1005118c:	801a      	strh	r2, [r3, #0]
1005118e:	230a      	movs	r3, #10
10051190:	18fb      	adds	r3, r7, r3
10051192:	1c0a      	adds	r2, r1, #0
10051194:	801a      	strh	r2, [r3, #0]
    uint16_t handle;

    /**
     * Search for GAP characteristic.
     */
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
10051196:	2317      	movs	r3, #23
10051198:	18fb      	adds	r3, r7, r3
1005119a:	2200      	movs	r2, #0
1005119c:	701a      	strb	r2, [r3, #0]
1005119e:	e021      	b.n	100511e4 <Gap_profile_set_char_value+0x74>
    {
        handle = aci_gatt_srv_get_char_decl_handle(&gap_chrs[i]);
100511a0:	2317      	movs	r3, #23
100511a2:	18fb      	adds	r3, r7, r3
100511a4:	781a      	ldrb	r2, [r3, #0]
100511a6:	0013      	movs	r3, r2
100511a8:	00db      	lsls	r3, r3, #3
100511aa:	189b      	adds	r3, r3, r2
100511ac:	009b      	lsls	r3, r3, #2
100511ae:	4a43      	ldr	r2, [pc, #268]	@ (100512bc <Gap_profile_set_char_value+0x14c>)
100511b0:	189b      	adds	r3, r3, r2
100511b2:	2514      	movs	r5, #20
100511b4:	197c      	adds	r4, r7, r5
100511b6:	0018      	movs	r0, r3
100511b8:	f7fe f833 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
100511bc:	0003      	movs	r3, r0
100511be:	8023      	strh	r3, [r4, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
100511c0:	197b      	adds	r3, r7, r5
100511c2:	881b      	ldrh	r3, [r3, #0]
100511c4:	2b00      	cmp	r3, #0
100511c6:	d007      	beq.n	100511d8 <Gap_profile_set_char_value+0x68>
            ((handle + 1U) == attr_h))
100511c8:	197b      	adds	r3, r7, r5
100511ca:	881b      	ldrh	r3, [r3, #0]
100511cc:	1c5a      	adds	r2, r3, #1
100511ce:	230e      	movs	r3, #14
100511d0:	18fb      	adds	r3, r7, r3
100511d2:	881b      	ldrh	r3, [r3, #0]
        if ((handle != BLE_ATT_INVALID_ATTR_HANDLE) &&
100511d4:	429a      	cmp	r2, r3
100511d6:	d00b      	beq.n	100511f0 <Gap_profile_set_char_value+0x80>
    for (i = 0U; i < (sizeof(gap_chrs) / sizeof(gap_chrs[0U])); i++)
100511d8:	2117      	movs	r1, #23
100511da:	187b      	adds	r3, r7, r1
100511dc:	781a      	ldrb	r2, [r3, #0]
100511de:	187b      	adds	r3, r7, r1
100511e0:	3201      	adds	r2, #1
100511e2:	701a      	strb	r2, [r3, #0]
100511e4:	2317      	movs	r3, #23
100511e6:	18fb      	adds	r3, r7, r3
100511e8:	781b      	ldrb	r3, [r3, #0]
100511ea:	2b04      	cmp	r3, #4
100511ec:	d9d8      	bls.n	100511a0 <Gap_profile_set_char_value+0x30>
100511ee:	e000      	b.n	100511f2 <Gap_profile_set_char_value+0x82>
        {
            break;
100511f0:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (i == (sizeof(gap_chrs) / sizeof(gap_chrs[0U])))
100511f2:	2317      	movs	r3, #23
100511f4:	18fb      	adds	r3, r7, r3
100511f6:	781b      	ldrb	r3, [r3, #0]
100511f8:	2b05      	cmp	r3, #5
100511fa:	d101      	bne.n	10051200 <Gap_profile_set_char_value+0x90>
    {
        /**
         * The given attribute handle is not registered for GAP service.
         */
        return BLE_STATUS_INVALID_PARAMS;
100511fc:	2312      	movs	r3, #18
100511fe:	e059      	b.n	100512b4 <Gap_profile_set_char_value+0x144>
    }

    if ((val_offset + val_length) > gap_chrs[i].val_buffer_p->buffer_len)
10051200:	230c      	movs	r3, #12
10051202:	18fb      	adds	r3, r7, r3
10051204:	881a      	ldrh	r2, [r3, #0]
10051206:	230a      	movs	r3, #10
10051208:	18fb      	adds	r3, r7, r3
1005120a:	881b      	ldrh	r3, [r3, #0]
1005120c:	18d1      	adds	r1, r2, r3
1005120e:	2317      	movs	r3, #23
10051210:	18fb      	adds	r3, r7, r3
10051212:	781a      	ldrb	r2, [r3, #0]
10051214:	4829      	ldr	r0, [pc, #164]	@ (100512bc <Gap_profile_set_char_value+0x14c>)
10051216:	0013      	movs	r3, r2
10051218:	00db      	lsls	r3, r3, #3
1005121a:	189b      	adds	r3, r3, r2
1005121c:	009b      	lsls	r3, r3, #2
1005121e:	18c3      	adds	r3, r0, r3
10051220:	3320      	adds	r3, #32
10051222:	681b      	ldr	r3, [r3, #0]
10051224:	889b      	ldrh	r3, [r3, #4]
10051226:	4299      	cmp	r1, r3
10051228:	dd01      	ble.n	1005122e <Gap_profile_set_char_value+0xbe>
    {
        /**
         * Invalid value length.
         */
        return BLE_STATUS_INVALID_PARAMS;
1005122a:	2312      	movs	r3, #18
1005122c:	e042      	b.n	100512b4 <Gap_profile_set_char_value+0x144>
    }
    
    if(gap_chrs[i].val_buffer_p == NULL)
1005122e:	2317      	movs	r3, #23
10051230:	18fb      	adds	r3, r7, r3
10051232:	781a      	ldrb	r2, [r3, #0]
10051234:	4921      	ldr	r1, [pc, #132]	@ (100512bc <Gap_profile_set_char_value+0x14c>)
10051236:	0013      	movs	r3, r2
10051238:	00db      	lsls	r3, r3, #3
1005123a:	189b      	adds	r3, r3, r2
1005123c:	009b      	lsls	r3, r3, #2
1005123e:	18cb      	adds	r3, r1, r3
10051240:	3320      	adds	r3, #32
10051242:	681b      	ldr	r3, [r3, #0]
10051244:	2b00      	cmp	r3, #0
10051246:	d101      	bne.n	1005124c <Gap_profile_set_char_value+0xdc>
    {
      /**
       * The given attribute handle is not related to a buffered characteristic.
       */
      return BLE_STATUS_INVALID_PARAMS;
10051248:	2312      	movs	r3, #18
1005124a:	e033      	b.n	100512b4 <Gap_profile_set_char_value+0x144>
    }

    /**
     * Write characteristic value.
     */
    memcpy(&gap_chrs[i].val_buffer_p->buffer_p[val_offset], val_p, val_length);
1005124c:	2417      	movs	r4, #23
1005124e:	193b      	adds	r3, r7, r4
10051250:	781a      	ldrb	r2, [r3, #0]
10051252:	491a      	ldr	r1, [pc, #104]	@ (100512bc <Gap_profile_set_char_value+0x14c>)
10051254:	0013      	movs	r3, r2
10051256:	00db      	lsls	r3, r3, #3
10051258:	189b      	adds	r3, r3, r2
1005125a:	009b      	lsls	r3, r3, #2
1005125c:	18cb      	adds	r3, r1, r3
1005125e:	3320      	adds	r3, #32
10051260:	681b      	ldr	r3, [r3, #0]
10051262:	689a      	ldr	r2, [r3, #8]
10051264:	230c      	movs	r3, #12
10051266:	18fb      	adds	r3, r7, r3
10051268:	881b      	ldrh	r3, [r3, #0]
1005126a:	18d0      	adds	r0, r2, r3
1005126c:	250a      	movs	r5, #10
1005126e:	197b      	adds	r3, r7, r5
10051270:	881a      	ldrh	r2, [r3, #0]
10051272:	687b      	ldr	r3, [r7, #4]
10051274:	0019      	movs	r1, r3
10051276:	f016 fcea 	bl	10067c4e <memcpy>
    if ((gap_chrs[i].val_buffer_p->op_flags & BLE_GATT_SRV_OP_VALUE_VAR_LENGTH_FLAG) != 0U)
1005127a:	193b      	adds	r3, r7, r4
1005127c:	781a      	ldrb	r2, [r3, #0]
1005127e:	490f      	ldr	r1, [pc, #60]	@ (100512bc <Gap_profile_set_char_value+0x14c>)
10051280:	0013      	movs	r3, r2
10051282:	00db      	lsls	r3, r3, #3
10051284:	189b      	adds	r3, r3, r2
10051286:	009b      	lsls	r3, r3, #2
10051288:	18cb      	adds	r3, r1, r3
1005128a:	3320      	adds	r3, #32
1005128c:	681b      	ldr	r3, [r3, #0]
1005128e:	781b      	ldrb	r3, [r3, #0]
10051290:	001a      	movs	r2, r3
10051292:	2302      	movs	r3, #2
10051294:	4013      	ands	r3, r2
10051296:	d00c      	beq.n	100512b2 <Gap_profile_set_char_value+0x142>
    {
        gap_chrs[i].val_buffer_p->val_len = val_length;
10051298:	193b      	adds	r3, r7, r4
1005129a:	781a      	ldrb	r2, [r3, #0]
1005129c:	4907      	ldr	r1, [pc, #28]	@ (100512bc <Gap_profile_set_char_value+0x14c>)
1005129e:	0013      	movs	r3, r2
100512a0:	00db      	lsls	r3, r3, #3
100512a2:	189b      	adds	r3, r3, r2
100512a4:	009b      	lsls	r3, r3, #2
100512a6:	18cb      	adds	r3, r1, r3
100512a8:	3320      	adds	r3, #32
100512aa:	681b      	ldr	r3, [r3, #0]
100512ac:	197a      	adds	r2, r7, r5
100512ae:	8812      	ldrh	r2, [r2, #0]
100512b0:	805a      	strh	r2, [r3, #2]
    }

    return BLE_STATUS_SUCCESS;
100512b2:	2300      	movs	r3, #0
}
100512b4:	0018      	movs	r0, r3
100512b6:	46bd      	mov	sp, r7
100512b8:	b006      	add	sp, #24
100512ba:	bdb0      	pop	{r4, r5, r7, pc}
100512bc:	20002cfc 	.word	0x20002cfc

100512c0 <aci_gatt_srv_profile_init>:
    .chrs = {0, NULL},
};

tBleStatus aci_gatt_srv_profile_init(uint8_t Characteristics,
                                     uint16_t *Service_Changed_Handle)
{
100512c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100512c2:	b085      	sub	sp, #20
100512c4:	af00      	add	r7, sp, #0
100512c6:	0002      	movs	r2, r0
100512c8:	6039      	str	r1, [r7, #0]
100512ca:	1dfb      	adds	r3, r7, #7
100512cc:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_srvc_handle;

  *Service_Changed_Handle = 0x0000;
100512ce:	683b      	ldr	r3, [r7, #0]
100512d0:	2200      	movs	r2, #0
100512d2:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_service(&gatt_srvc);
100512d4:	250f      	movs	r5, #15
100512d6:	197c      	adds	r4, r7, r5
100512d8:	4b38      	ldr	r3, [pc, #224]	@ (100513bc <aci_gatt_srv_profile_init+0xfc>)
100512da:	0018      	movs	r0, r3
100512dc:	f7fd ff74 	bl	1004f1c8 <aci_gatt_srv_add_service>
100512e0:	0003      	movs	r3, r0
100512e2:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100512e4:	197b      	adds	r3, r7, r5
100512e6:	781b      	ldrb	r3, [r3, #0]
100512e8:	2b00      	cmp	r3, #0
100512ea:	d002      	beq.n	100512f2 <aci_gatt_srv_profile_init+0x32>
  {
    return ret;
100512ec:	197b      	adds	r3, r7, r5
100512ee:	781b      	ldrb	r3, [r3, #0]
100512f0:	e060      	b.n	100513b4 <aci_gatt_srv_profile_init+0xf4>
  }

  gatt_srvc_handle = aci_gatt_srv_get_service_handle(&gatt_srvc);
100512f2:	260c      	movs	r6, #12
100512f4:	19bc      	adds	r4, r7, r6
100512f6:	4b31      	ldr	r3, [pc, #196]	@ (100513bc <aci_gatt_srv_profile_init+0xfc>)
100512f8:	0018      	movs	r0, r3
100512fa:	f7fd ff72 	bl	1004f1e2 <aci_gatt_srv_get_service_handle>
100512fe:	0003      	movs	r3, r0
10051300:	8023      	strh	r3, [r4, #0]

  if(Characteristics & GATT_INIT_SERVICE_CHANGED_BIT)
10051302:	1dfb      	adds	r3, r7, #7
10051304:	781b      	ldrb	r3, [r3, #0]
10051306:	2201      	movs	r2, #1
10051308:	4013      	ands	r3, r2
1005130a:	d011      	beq.n	10051330 <aci_gatt_srv_profile_init+0x70>
  {
    ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr, gatt_srvc_handle);
1005130c:	250f      	movs	r5, #15
1005130e:	197c      	adds	r4, r7, r5
10051310:	19bb      	adds	r3, r7, r6
10051312:	881a      	ldrh	r2, [r3, #0]
10051314:	4b2a      	ldr	r3, [pc, #168]	@ (100513c0 <aci_gatt_srv_profile_init+0x100>)
10051316:	0011      	movs	r1, r2
10051318:	0018      	movs	r0, r3
1005131a:	f7fd ff6f 	bl	1004f1fc <aci_gatt_srv_add_char>
1005131e:	0003      	movs	r3, r0
10051320:	7023      	strb	r3, [r4, #0]
    if (ret != BLE_STATUS_SUCCESS)
10051322:	197b      	adds	r3, r7, r5
10051324:	781b      	ldrb	r3, [r3, #0]
10051326:	2b00      	cmp	r3, #0
10051328:	d002      	beq.n	10051330 <aci_gatt_srv_profile_init+0x70>
    {
      return ret;
1005132a:	197b      	adds	r3, r7, r5
1005132c:	781b      	ldrb	r3, [r3, #0]
1005132e:	e041      	b.n	100513b4 <aci_gatt_srv_profile_init+0xf4>
    }
  }
  *Service_Changed_Handle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t*)&gatt_srvc_changed_chr);
10051330:	4b23      	ldr	r3, [pc, #140]	@ (100513c0 <aci_gatt_srv_profile_init+0x100>)
10051332:	0018      	movs	r0, r3
10051334:	f7fd ff75 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
10051338:	0003      	movs	r3, r0
1005133a:	001a      	movs	r2, r3
1005133c:	683b      	ldr	r3, [r7, #0]
1005133e:	801a      	strh	r2, [r3, #0]

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_clt_supp_feat_chr, gatt_srvc_handle);
10051340:	250f      	movs	r5, #15
10051342:	197c      	adds	r4, r7, r5
10051344:	230c      	movs	r3, #12
10051346:	18fb      	adds	r3, r7, r3
10051348:	881a      	ldrh	r2, [r3, #0]
1005134a:	4b1e      	ldr	r3, [pc, #120]	@ (100513c4 <aci_gatt_srv_profile_init+0x104>)
1005134c:	0011      	movs	r1, r2
1005134e:	0018      	movs	r0, r3
10051350:	f7fd ff54 	bl	1004f1fc <aci_gatt_srv_add_char>
10051354:	0003      	movs	r3, r0
10051356:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
10051358:	197b      	adds	r3, r7, r5
1005135a:	781b      	ldrb	r3, [r3, #0]
1005135c:	2b00      	cmp	r3, #0
1005135e:	d002      	beq.n	10051366 <aci_gatt_srv_profile_init+0xa6>
  {
    return ret;
10051360:	197b      	adds	r3, r7, r5
10051362:	781b      	ldrb	r3, [r3, #0]
10051364:	e026      	b.n	100513b4 <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_db_hash_chr, gatt_srvc_handle);
10051366:	250f      	movs	r5, #15
10051368:	197c      	adds	r4, r7, r5
1005136a:	230c      	movs	r3, #12
1005136c:	18fb      	adds	r3, r7, r3
1005136e:	881a      	ldrh	r2, [r3, #0]
10051370:	4b15      	ldr	r3, [pc, #84]	@ (100513c8 <aci_gatt_srv_profile_init+0x108>)
10051372:	0011      	movs	r1, r2
10051374:	0018      	movs	r0, r3
10051376:	f7fd ff41 	bl	1004f1fc <aci_gatt_srv_add_char>
1005137a:	0003      	movs	r3, r0
1005137c:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
1005137e:	197b      	adds	r3, r7, r5
10051380:	781b      	ldrb	r3, [r3, #0]
10051382:	2b00      	cmp	r3, #0
10051384:	d002      	beq.n	1005138c <aci_gatt_srv_profile_init+0xcc>
  {
    return ret;
10051386:	197b      	adds	r3, r7, r5
10051388:	781b      	ldrb	r3, [r3, #0]
1005138a:	e013      	b.n	100513b4 <aci_gatt_srv_profile_init+0xf4>
  }

  ret = aci_gatt_srv_add_char((ble_gatt_chr_def_t*)&gatt_srv_supp_feat_chr, gatt_srvc_handle);
1005138c:	250f      	movs	r5, #15
1005138e:	197c      	adds	r4, r7, r5
10051390:	230c      	movs	r3, #12
10051392:	18fb      	adds	r3, r7, r3
10051394:	881a      	ldrh	r2, [r3, #0]
10051396:	4b0d      	ldr	r3, [pc, #52]	@ (100513cc <aci_gatt_srv_profile_init+0x10c>)
10051398:	0011      	movs	r1, r2
1005139a:	0018      	movs	r0, r3
1005139c:	f7fd ff2e 	bl	1004f1fc <aci_gatt_srv_add_char>
100513a0:	0003      	movs	r3, r0
100513a2:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS)
100513a4:	197b      	adds	r3, r7, r5
100513a6:	781b      	ldrb	r3, [r3, #0]
100513a8:	2b00      	cmp	r3, #0
100513aa:	d002      	beq.n	100513b2 <aci_gatt_srv_profile_init+0xf2>
  {
    return ret;
100513ac:	197b      	adds	r3, r7, r5
100513ae:	781b      	ldrb	r3, [r3, #0]
100513b0:	e000      	b.n	100513b4 <aci_gatt_srv_profile_init+0xf4>
  }

  return   BLE_STATUS_SUCCESS;
100513b2:	2300      	movs	r3, #0
}
100513b4:	0018      	movs	r0, r3
100513b6:	46bd      	mov	sp, r7
100513b8:	b005      	add	sp, #20
100513ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100513bc:	20002df4 	.word	0x20002df4
100513c0:	10069508 	.word	0x10069508
100513c4:	1006952c 	.word	0x1006952c
100513c8:	10069550 	.word	0x10069550
100513cc:	10069574 	.word	0x10069574

100513d0 <__NVIC_EnableIRQ>:
{
100513d0:	b580      	push	{r7, lr}
100513d2:	b082      	sub	sp, #8
100513d4:	af00      	add	r7, sp, #0
100513d6:	0002      	movs	r2, r0
100513d8:	1dfb      	adds	r3, r7, #7
100513da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
100513dc:	1dfb      	adds	r3, r7, #7
100513de:	781b      	ldrb	r3, [r3, #0]
100513e0:	2b7f      	cmp	r3, #127	@ 0x7f
100513e2:	d809      	bhi.n	100513f8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100513e4:	1dfb      	adds	r3, r7, #7
100513e6:	781b      	ldrb	r3, [r3, #0]
100513e8:	001a      	movs	r2, r3
100513ea:	231f      	movs	r3, #31
100513ec:	401a      	ands	r2, r3
100513ee:	4b04      	ldr	r3, [pc, #16]	@ (10051400 <__NVIC_EnableIRQ+0x30>)
100513f0:	2101      	movs	r1, #1
100513f2:	4091      	lsls	r1, r2
100513f4:	000a      	movs	r2, r1
100513f6:	601a      	str	r2, [r3, #0]
}
100513f8:	46c0      	nop			@ (mov r8, r8)
100513fa:	46bd      	mov	sp, r7
100513fc:	b002      	add	sp, #8
100513fe:	bd80      	pop	{r7, pc}
10051400:	e000e100 	.word	0xe000e100

10051404 <__NVIC_DisableIRQ>:
{
10051404:	b580      	push	{r7, lr}
10051406:	b082      	sub	sp, #8
10051408:	af00      	add	r7, sp, #0
1005140a:	0002      	movs	r2, r0
1005140c:	1dfb      	adds	r3, r7, #7
1005140e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
10051410:	1dfb      	adds	r3, r7, #7
10051412:	781b      	ldrb	r3, [r3, #0]
10051414:	2b7f      	cmp	r3, #127	@ 0x7f
10051416:	d810      	bhi.n	1005143a <__NVIC_DisableIRQ+0x36>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10051418:	1dfb      	adds	r3, r7, #7
1005141a:	781b      	ldrb	r3, [r3, #0]
1005141c:	001a      	movs	r2, r3
1005141e:	231f      	movs	r3, #31
10051420:	4013      	ands	r3, r2
10051422:	4908      	ldr	r1, [pc, #32]	@ (10051444 <__NVIC_DisableIRQ+0x40>)
10051424:	2201      	movs	r2, #1
10051426:	409a      	lsls	r2, r3
10051428:	0013      	movs	r3, r2
1005142a:	2280      	movs	r2, #128	@ 0x80
1005142c:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
1005142e:	f3bf 8f4f 	dsb	sy
}
10051432:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
10051434:	f3bf 8f6f 	isb	sy
}
10051438:	46c0      	nop			@ (mov r8, r8)
}
1005143a:	46c0      	nop			@ (mov r8, r8)
1005143c:	46bd      	mov	sp, r7
1005143e:	b002      	add	sp, #8
10051440:	bd80      	pop	{r7, pc}
10051442:	46c0      	nop			@ (mov r8, r8)
10051444:	e000e100 	.word	0xe000e100

10051448 <LL_PWR_IsSMPSReady>:
{
10051448:	b580      	push	{r7, lr}
1005144a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_SMPSRDY) == (PWR_SR2_SMPSRDY)) ? 1UL : 0UL);
1005144c:	4b05      	ldr	r3, [pc, #20]	@ (10051464 <LL_PWR_IsSMPSReady+0x1c>)
1005144e:	695b      	ldr	r3, [r3, #20]
10051450:	2204      	movs	r2, #4
10051452:	4013      	ands	r3, r2
10051454:	2b04      	cmp	r3, #4
10051456:	d101      	bne.n	1005145c <LL_PWR_IsSMPSReady+0x14>
10051458:	2301      	movs	r3, #1
1005145a:	e000      	b.n	1005145e <LL_PWR_IsSMPSReady+0x16>
1005145c:	2300      	movs	r3, #0
}
1005145e:	0018      	movs	r0, r3
10051460:	46bd      	mov	sp, r7
10051462:	bd80      	pop	{r7, pc}
10051464:	48500000 	.word	0x48500000

10051468 <LL_PWR_GetSMPSMode>:
{
10051468:	b580      	push	{r7, lr}
1005146a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(PWR->CR5, PWR_CR5_NOSMPS));
1005146c:	4b03      	ldr	r3, [pc, #12]	@ (1005147c <LL_PWR_GetSMPSMode+0x14>)
1005146e:	69da      	ldr	r2, [r3, #28]
10051470:	2380      	movs	r3, #128	@ 0x80
10051472:	00db      	lsls	r3, r3, #3
10051474:	4013      	ands	r3, r2
}
10051476:	0018      	movs	r0, r3
10051478:	46bd      	mov	sp, r7
1005147a:	bd80      	pop	{r7, pc}
1005147c:	48500000 	.word	0x48500000

10051480 <LL_PWR_SetSMPSPrechargeMode>:
{
10051480:	b580      	push	{r7, lr}
10051482:	b082      	sub	sp, #8
10051484:	af00      	add	r7, sp, #0
10051486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSFBYP, mode);
10051488:	4b06      	ldr	r3, [pc, #24]	@ (100514a4 <LL_PWR_SetSMPSPrechargeMode+0x24>)
1005148a:	69db      	ldr	r3, [r3, #28]
1005148c:	4a06      	ldr	r2, [pc, #24]	@ (100514a8 <LL_PWR_SetSMPSPrechargeMode+0x28>)
1005148e:	4013      	ands	r3, r2
10051490:	0019      	movs	r1, r3
10051492:	4b04      	ldr	r3, [pc, #16]	@ (100514a4 <LL_PWR_SetSMPSPrechargeMode+0x24>)
10051494:	687a      	ldr	r2, [r7, #4]
10051496:	430a      	orrs	r2, r1
10051498:	61da      	str	r2, [r3, #28]
}
1005149a:	46c0      	nop			@ (mov r8, r8)
1005149c:	46bd      	mov	sp, r7
1005149e:	b002      	add	sp, #8
100514a0:	bd80      	pop	{r7, pc}
100514a2:	46c0      	nop			@ (mov r8, r8)
100514a4:	48500000 	.word	0x48500000
100514a8:	fffffdff 	.word	0xfffffdff

100514ac <LL_PWR_IsEnabledSMPSPrechargeMode>:
{
100514ac:	b580      	push	{r7, lr}
100514ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR5, PWR_CR5_SMPSFBYP) == (PWR_CR5_SMPSFBYP)) ? 1UL : 0UL);
100514b0:	4b07      	ldr	r3, [pc, #28]	@ (100514d0 <LL_PWR_IsEnabledSMPSPrechargeMode+0x24>)
100514b2:	69da      	ldr	r2, [r3, #28]
100514b4:	2380      	movs	r3, #128	@ 0x80
100514b6:	009b      	lsls	r3, r3, #2
100514b8:	401a      	ands	r2, r3
100514ba:	2380      	movs	r3, #128	@ 0x80
100514bc:	009b      	lsls	r3, r3, #2
100514be:	429a      	cmp	r2, r3
100514c0:	d101      	bne.n	100514c6 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1a>
100514c2:	2301      	movs	r3, #1
100514c4:	e000      	b.n	100514c8 <LL_PWR_IsEnabledSMPSPrechargeMode+0x1c>
100514c6:	2300      	movs	r3, #0
}
100514c8:	0018      	movs	r0, r3
100514ca:	46bd      	mov	sp, r7
100514cc:	bd80      	pop	{r7, pc}
100514ce:	46c0      	nop			@ (mov r8, r8)
100514d0:	48500000 	.word	0x48500000

100514d4 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
100514d4:	b580      	push	{r7, lr}
100514d6:	b082      	sub	sp, #8
100514d8:	af00      	add	r7, sp, #0
100514da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSLVL, OutputVoltageLevel);
100514dc:	4b06      	ldr	r3, [pc, #24]	@ (100514f8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100514de:	69db      	ldr	r3, [r3, #28]
100514e0:	220f      	movs	r2, #15
100514e2:	4393      	bics	r3, r2
100514e4:	0019      	movs	r1, r3
100514e6:	4b04      	ldr	r3, [pc, #16]	@ (100514f8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x24>)
100514e8:	687a      	ldr	r2, [r7, #4]
100514ea:	430a      	orrs	r2, r1
100514ec:	61da      	str	r2, [r3, #28]
}
100514ee:	46c0      	nop			@ (mov r8, r8)
100514f0:	46bd      	mov	sp, r7
100514f2:	b002      	add	sp, #8
100514f4:	bd80      	pop	{r7, pc}
100514f6:	46c0      	nop			@ (mov r8, r8)
100514f8:	48500000 	.word	0x48500000

100514fc <LL_SYSCFG_BLERXTX_EnableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_EnableIT(uint32_t Signal)
{
100514fc:	b580      	push	{r7, lr}
100514fe:	b082      	sub	sp, #8
10051500:	af00      	add	r7, sp, #0
10051502:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->BLERXTX_IER, Signal);
10051504:	2380      	movs	r3, #128	@ 0x80
10051506:	05db      	lsls	r3, r3, #23
10051508:	6b99      	ldr	r1, [r3, #56]	@ 0x38
1005150a:	2380      	movs	r3, #128	@ 0x80
1005150c:	05db      	lsls	r3, r3, #23
1005150e:	687a      	ldr	r2, [r7, #4]
10051510:	430a      	orrs	r2, r1
10051512:	639a      	str	r2, [r3, #56]	@ 0x38
}
10051514:	46c0      	nop			@ (mov r8, r8)
10051516:	46bd      	mov	sp, r7
10051518:	b002      	add	sp, #8
1005151a:	bd80      	pop	{r7, pc}

1005151c <LL_SYSCFG_BLERXTX_DisableIT>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_DisableIT(uint32_t Signal)
{
1005151c:	b580      	push	{r7, lr}
1005151e:	b082      	sub	sp, #8
10051520:	af00      	add	r7, sp, #0
10051522:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SYSCFG->BLERXTX_IER, Signal);
10051524:	2380      	movs	r3, #128	@ 0x80
10051526:	05db      	lsls	r3, r3, #23
10051528:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
1005152a:	687b      	ldr	r3, [r7, #4]
1005152c:	43d9      	mvns	r1, r3
1005152e:	2380      	movs	r3, #128	@ 0x80
10051530:	05db      	lsls	r3, r3, #23
10051532:	400a      	ands	r2, r1
10051534:	639a      	str	r2, [r3, #56]	@ 0x38
}
10051536:	46c0      	nop			@ (mov r8, r8)
10051538:	46bd      	mov	sp, r7
1005153a:	b002      	add	sp, #8
1005153c:	bd80      	pop	{r7, pc}

1005153e <LL_SYSCFG_BLERXTX_SetType>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetType(uint8_t Type, uint32_t Signal)
{
1005153e:	b580      	push	{r7, lr}
10051540:	b082      	sub	sp, #8
10051542:	af00      	add	r7, sp, #0
10051544:	0002      	movs	r2, r0
10051546:	6039      	str	r1, [r7, #0]
10051548:	1dfb      	adds	r3, r7, #7
1005154a:	701a      	strb	r2, [r3, #0]
  if (Type == LL_SYSCFG_BLERXTX_DET_TYPE_EDGE)
1005154c:	1dfb      	adds	r3, r7, #7
1005154e:	781b      	ldrb	r3, [r3, #0]
10051550:	2b00      	cmp	r3, #0
10051552:	d109      	bne.n	10051568 <LL_SYSCFG_BLERXTX_SetType+0x2a>
  {
    CLEAR_BIT(SYSCFG->BLERXTX_DTR, Signal);
10051554:	2380      	movs	r3, #128	@ 0x80
10051556:	05db      	lsls	r3, r3, #23
10051558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
1005155a:	683b      	ldr	r3, [r7, #0]
1005155c:	43d9      	mvns	r1, r3
1005155e:	2380      	movs	r3, #128	@ 0x80
10051560:	05db      	lsls	r3, r3, #23
10051562:	400a      	ands	r2, r1
10051564:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
  }
}
10051566:	e007      	b.n	10051578 <LL_SYSCFG_BLERXTX_SetType+0x3a>
    SET_BIT(SYSCFG->BLERXTX_DTR, Signal);
10051568:	2380      	movs	r3, #128	@ 0x80
1005156a:	05db      	lsls	r3, r3, #23
1005156c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
1005156e:	2380      	movs	r3, #128	@ 0x80
10051570:	05db      	lsls	r3, r3, #23
10051572:	683a      	ldr	r2, [r7, #0]
10051574:	430a      	orrs	r2, r1
10051576:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10051578:	46c0      	nop			@ (mov r8, r8)
1005157a:	46bd      	mov	sp, r7
1005157c:	b002      	add	sp, #8
1005157e:	bd80      	pop	{r7, pc}

10051580 <LL_SYSCFG_BLERXTX_SetTrigger>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_SetTrigger(uint8_t Trigger, uint32_t Signal)
{
10051580:	b580      	push	{r7, lr}
10051582:	b082      	sub	sp, #8
10051584:	af00      	add	r7, sp, #0
10051586:	0002      	movs	r2, r0
10051588:	6039      	str	r1, [r7, #0]
1005158a:	1dfb      	adds	r3, r7, #7
1005158c:	701a      	strb	r2, [r3, #0]
  switch (Trigger)
1005158e:	1dfb      	adds	r3, r7, #7
10051590:	781b      	ldrb	r3, [r3, #0]
10051592:	2b04      	cmp	r3, #4
10051594:	d860      	bhi.n	10051658 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
10051596:	009a      	lsls	r2, r3, #2
10051598:	4b31      	ldr	r3, [pc, #196]	@ (10051660 <LL_SYSCFG_BLERXTX_SetTrigger+0xe0>)
1005159a:	18d3      	adds	r3, r2, r3
1005159c:	681b      	ldr	r3, [r3, #0]
1005159e:	469f      	mov	pc, r3
  {
    case LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE:
    {
      SET_BIT(SYSCFG->BLERXTX_IBER, Signal);
100515a0:	2380      	movs	r3, #128	@ 0x80
100515a2:	05db      	lsls	r3, r3, #23
100515a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
100515a6:	2380      	movs	r3, #128	@ 0x80
100515a8:	05db      	lsls	r3, r3, #23
100515aa:	683a      	ldr	r2, [r7, #0]
100515ac:	430a      	orrs	r2, r1
100515ae:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100515b0:	2380      	movs	r3, #128	@ 0x80
100515b2:	05db      	lsls	r3, r3, #23
100515b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
100515b6:	683b      	ldr	r3, [r7, #0]
100515b8:	43d9      	mvns	r1, r3
100515ba:	2380      	movs	r3, #128	@ 0x80
100515bc:	05db      	lsls	r3, r3, #23
100515be:	400a      	ands	r2, r1
100515c0:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100515c2:	e049      	b.n	10051658 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_RISING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100515c4:	2380      	movs	r3, #128	@ 0x80
100515c6:	05db      	lsls	r3, r3, #23
100515c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100515ca:	683b      	ldr	r3, [r7, #0]
100515cc:	43d9      	mvns	r1, r3
100515ce:	2380      	movs	r3, #128	@ 0x80
100515d0:	05db      	lsls	r3, r3, #23
100515d2:	400a      	ands	r2, r1
100515d4:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100515d6:	2380      	movs	r3, #128	@ 0x80
100515d8:	05db      	lsls	r3, r3, #23
100515da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
100515dc:	2380      	movs	r3, #128	@ 0x80
100515de:	05db      	lsls	r3, r3, #23
100515e0:	683a      	ldr	r2, [r7, #0]
100515e2:	430a      	orrs	r2, r1
100515e4:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
100515e6:	e037      	b.n	10051658 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_FALLING_EDGE:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
100515e8:	2380      	movs	r3, #128	@ 0x80
100515ea:	05db      	lsls	r3, r3, #23
100515ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
100515ee:	683b      	ldr	r3, [r7, #0]
100515f0:	43d9      	mvns	r1, r3
100515f2:	2380      	movs	r3, #128	@ 0x80
100515f4:	05db      	lsls	r3, r3, #23
100515f6:	400a      	ands	r2, r1
100515f8:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
100515fa:	2380      	movs	r3, #128	@ 0x80
100515fc:	05db      	lsls	r3, r3, #23
100515fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10051600:	683b      	ldr	r3, [r7, #0]
10051602:	43d9      	mvns	r1, r3
10051604:	2380      	movs	r3, #128	@ 0x80
10051606:	05db      	lsls	r3, r3, #23
10051608:	400a      	ands	r2, r1
1005160a:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
1005160c:	e024      	b.n	10051658 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_LOW_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
1005160e:	2380      	movs	r3, #128	@ 0x80
10051610:	05db      	lsls	r3, r3, #23
10051612:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
10051614:	683b      	ldr	r3, [r7, #0]
10051616:	43d9      	mvns	r1, r3
10051618:	2380      	movs	r3, #128	@ 0x80
1005161a:	05db      	lsls	r3, r3, #23
1005161c:	400a      	ands	r2, r1
1005161e:	631a      	str	r2, [r3, #48]	@ 0x30
      CLEAR_BIT(SYSCFG->BLERXTX_IEVR, Signal);
10051620:	2380      	movs	r3, #128	@ 0x80
10051622:	05db      	lsls	r3, r3, #23
10051624:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
10051626:	683b      	ldr	r3, [r7, #0]
10051628:	43d9      	mvns	r1, r3
1005162a:	2380      	movs	r3, #128	@ 0x80
1005162c:	05db      	lsls	r3, r3, #23
1005162e:	400a      	ands	r2, r1
10051630:	635a      	str	r2, [r3, #52]	@ 0x34
      break;
10051632:	e011      	b.n	10051658 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
    }
    case LL_SYSCFG_BLERXTX_TRIGGER_HIGH_LEVEL:
    {
      CLEAR_BIT(SYSCFG->BLERXTX_IBER, Signal);
10051634:	2380      	movs	r3, #128	@ 0x80
10051636:	05db      	lsls	r3, r3, #23
10051638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
1005163a:	683b      	ldr	r3, [r7, #0]
1005163c:	43d9      	mvns	r1, r3
1005163e:	2380      	movs	r3, #128	@ 0x80
10051640:	05db      	lsls	r3, r3, #23
10051642:	400a      	ands	r2, r1
10051644:	631a      	str	r2, [r3, #48]	@ 0x30
      SET_BIT(SYSCFG->BLERXTX_IEVR, Signal);
10051646:	2380      	movs	r3, #128	@ 0x80
10051648:	05db      	lsls	r3, r3, #23
1005164a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
1005164c:	2380      	movs	r3, #128	@ 0x80
1005164e:	05db      	lsls	r3, r3, #23
10051650:	683a      	ldr	r2, [r7, #0]
10051652:	430a      	orrs	r2, r1
10051654:	635a      	str	r2, [r3, #52]	@ 0x34
    }
  }
}
10051656:	e7ff      	b.n	10051658 <LL_SYSCFG_BLERXTX_SetTrigger+0xd8>
10051658:	46c0      	nop			@ (mov r8, r8)
1005165a:	46bd      	mov	sp, r7
1005165c:	b002      	add	sp, #8
1005165e:	bd80      	pop	{r7, pc}
10051660:	10069598 	.word	0x10069598

10051664 <LL_SYSCFG_BLERXTX_IsInterruptPending>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSCFG_BLERXTX_IsInterruptPending(uint32_t Signal)
{
10051664:	b580      	push	{r7, lr}
10051666:	b082      	sub	sp, #8
10051668:	af00      	add	r7, sp, #0
1005166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SYSCFG->BLERXTX_ISCR, Signal) == (Signal)) ? 1UL : 0UL);
1005166c:	2380      	movs	r3, #128	@ 0x80
1005166e:	05db      	lsls	r3, r3, #23
10051670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
10051672:	687a      	ldr	r2, [r7, #4]
10051674:	4013      	ands	r3, r2
10051676:	687a      	ldr	r2, [r7, #4]
10051678:	429a      	cmp	r2, r3
1005167a:	d101      	bne.n	10051680 <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1c>
1005167c:	2301      	movs	r3, #1
1005167e:	e000      	b.n	10051682 <LL_SYSCFG_BLERXTX_IsInterruptPending+0x1e>
10051680:	2300      	movs	r3, #0
}
10051682:	0018      	movs	r0, r3
10051684:	46bd      	mov	sp, r7
10051686:	b002      	add	sp, #8
10051688:	bd80      	pop	{r7, pc}

1005168a <LL_SYSCFG_BLERXTX_ClearInterrupt>:
  * @arg LL_SYSCFG_BLE_TX_EVENT
  * @arg LL_SYSCFG_BLE_RX_EVENT
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_BLERXTX_ClearInterrupt(uint32_t Signal)
{
1005168a:	b580      	push	{r7, lr}
1005168c:	b082      	sub	sp, #8
1005168e:	af00      	add	r7, sp, #0
10051690:	6078      	str	r0, [r7, #4]
  WRITE_REG(SYSCFG->BLERXTX_ISCR, Signal);
10051692:	2380      	movs	r3, #128	@ 0x80
10051694:	05db      	lsls	r3, r3, #23
10051696:	687a      	ldr	r2, [r7, #4]
10051698:	63da      	str	r2, [r3, #60]	@ 0x3c
}
1005169a:	46c0      	nop			@ (mov r8, r8)
1005169c:	46bd      	mov	sp, r7
1005169e:	b002      	add	sp, #8
100516a0:	bd80      	pop	{r7, pc}
	...

100516a4 <LL_APB0_GRP1_EnableClock>:
{
100516a4:	b580      	push	{r7, lr}
100516a6:	b084      	sub	sp, #16
100516a8:	af00      	add	r7, sp, #0
100516aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB0ENR, Periphs);
100516ac:	4b07      	ldr	r3, [pc, #28]	@ (100516cc <LL_APB0_GRP1_EnableClock+0x28>)
100516ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
100516b0:	4b06      	ldr	r3, [pc, #24]	@ (100516cc <LL_APB0_GRP1_EnableClock+0x28>)
100516b2:	687a      	ldr	r2, [r7, #4]
100516b4:	430a      	orrs	r2, r1
100516b6:	655a      	str	r2, [r3, #84]	@ 0x54
  tmpreg = READ_BIT(RCC->APB0ENR, Periphs);
100516b8:	4b04      	ldr	r3, [pc, #16]	@ (100516cc <LL_APB0_GRP1_EnableClock+0x28>)
100516ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
100516bc:	687a      	ldr	r2, [r7, #4]
100516be:	4013      	ands	r3, r2
100516c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
100516c2:	68fb      	ldr	r3, [r7, #12]
}
100516c4:	46c0      	nop			@ (mov r8, r8)
100516c6:	46bd      	mov	sp, r7
100516c8:	b004      	add	sp, #16
100516ca:	bd80      	pop	{r7, pc}
100516cc:	48400000 	.word	0x48400000

100516d0 <RADIO_GetMaxPALevel>:

  return pa_level_table[PA_Level];
}

uint8_t RADIO_GetMaxPALevel(void)
{
100516d0:	b580      	push	{r7, lr}
100516d2:	af00      	add	r7, sp, #0
  return HP_TX_POWER_LEVELS - 1;
100516d4:	231f      	movs	r3, #31
}
100516d6:	0018      	movs	r0, r3
100516d8:	46bd      	mov	sp, r7
100516da:	bd80      	pop	{r7, pc}

100516dc <RADIO_GetDefaultPALevel>:

uint8_t RADIO_GetDefaultPALevel(void)
{
100516dc:	b580      	push	{r7, lr}
100516de:	af00      	add	r7, sp, #0
  return DEFAULT_TX_PA_LEVEL;
100516e0:	231f      	movs	r3, #31
}
100516e2:	0018      	movs	r0, r3
100516e4:	46bd      	mov	sp, r7
100516e6:	bd80      	pop	{r7, pc}

100516e8 <RADIO_SetHighPower>:
        *Max_Tx_Power = MAX_TX_POWER_LOW;
    }
}

void RADIO_SetHighPower(FunctionalState state)
{
100516e8:	b580      	push	{r7, lr}
100516ea:	b082      	sub	sp, #8
100516ec:	af00      	add	r7, sp, #0
100516ee:	0002      	movs	r2, r0
100516f0:	1dfb      	adds	r3, r7, #7
100516f2:	701a      	strb	r2, [r3, #0]
  if(state != DISABLE)
100516f4:	1dfb      	adds	r3, r7, #7
100516f6:	781b      	ldrb	r3, [r3, #0]
100516f8:	2b00      	cmp	r3, #0
100516fa:	d01d      	beq.n	10051738 <RADIO_SetHighPower+0x50>
  {
    if(high_power == FALSE)
100516fc:	4b2d      	ldr	r3, [pc, #180]	@ (100517b4 <RADIO_SetHighPower+0xcc>)
100516fe:	781b      	ldrb	r3, [r3, #0]
10051700:	2b00      	cmp	r3, #0
10051702:	d129      	bne.n	10051758 <RADIO_SetHighPower+0x70>
    {
      high_power = TRUE;
10051704:	4b2b      	ldr	r3, [pc, #172]	@ (100517b4 <RADIO_SetHighPower+0xcc>)
10051706:	2201      	movs	r2, #1
10051708:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_APB0_GRP1_EnableClock(LL_APB0_GRP1_PERIPH_SYSCFG);
1005170a:	2380      	movs	r3, #128	@ 0x80
1005170c:	005b      	lsls	r3, r3, #1
1005170e:	0018      	movs	r0, r3
10051710:	f7ff ffc8 	bl	100516a4 <LL_APB0_GRP1_EnableClock>
      LL_SYSCFG_BLERXTX_SetTrigger(LL_SYSCFG_BLERXTX_TRIGGER_BOTH_EDGE, LL_SYSCFG_BLE_TX_EVENT);
10051714:	2101      	movs	r1, #1
10051716:	2002      	movs	r0, #2
10051718:	f7ff ff32 	bl	10051580 <LL_SYSCFG_BLERXTX_SetTrigger>
      LL_SYSCFG_BLERXTX_SetType(LL_SYSCFG_BLERXTX_DET_TYPE_EDGE, LL_SYSCFG_BLE_TX_EVENT);
1005171c:	2101      	movs	r1, #1
1005171e:	2000      	movs	r0, #0
10051720:	f7ff ff0d 	bl	1005153e <LL_SYSCFG_BLERXTX_SetType>
      LL_SYSCFG_BLERXTX_EnableIT(LL_SYSCFG_BLE_TX_EVENT);
10051724:	2001      	movs	r0, #1
10051726:	f7ff fee9 	bl	100514fc <LL_SYSCFG_BLERXTX_EnableIT>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
1005172a:	2001      	movs	r0, #1
1005172c:	f7ff ffad 	bl	1005168a <LL_SYSCFG_BLERXTX_ClearInterrupt>
      NVIC_EnableIRQ(RADIO_TXRX_SEQ_IRQn);
10051730:	2019      	movs	r0, #25
10051732:	f7ff fe4d 	bl	100513d0 <__NVIC_EnableIRQ>
10051736:	e00f      	b.n	10051758 <RADIO_SetHighPower+0x70>
#endif
    }
  }
  else
  {
    if(high_power == TRUE)
10051738:	4b1e      	ldr	r3, [pc, #120]	@ (100517b4 <RADIO_SetHighPower+0xcc>)
1005173a:	781b      	ldrb	r3, [r3, #0]
1005173c:	2b01      	cmp	r3, #1
1005173e:	d10b      	bne.n	10051758 <RADIO_SetHighPower+0x70>
    {
      high_power = FALSE;
10051740:	4b1c      	ldr	r3, [pc, #112]	@ (100517b4 <RADIO_SetHighPower+0xcc>)
10051742:	2200      	movs	r2, #0
10051744:	701a      	strb	r2, [r3, #0]
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
      LL_SYSCFG_BLERXTX_DisableIT(LL_SYSCFG_BLE_TX_EVENT);
10051746:	2001      	movs	r0, #1
10051748:	f7ff fee8 	bl	1005151c <LL_SYSCFG_BLERXTX_DisableIT>
      NVIC_DisableIRQ(RADIO_TXRX_SEQ_IRQn);
1005174c:	2019      	movs	r0, #25
1005174e:	f7ff fe59 	bl	10051404 <__NVIC_DisableIRQ>
      LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10051752:	2001      	movs	r0, #1
10051754:	f7ff ff99 	bl	1005168a <LL_SYSCFG_BLERXTX_ClearInterrupt>
#endif
    }
  }

  if (LL_PWR_IsEnabledSMPSPrechargeMode() || (LL_PWR_GetSMPSMode() == LL_PWR_NO_SMPS))
10051758:	f7ff fea8 	bl	100514ac <LL_PWR_IsEnabledSMPSPrechargeMode>
1005175c:	1e03      	subs	r3, r0, #0
1005175e:	d124      	bne.n	100517aa <RADIO_SetHighPower+0xc2>
10051760:	f7ff fe82 	bl	10051468 <LL_PWR_GetSMPSMode>
10051764:	0002      	movs	r2, r0
10051766:	2380      	movs	r3, #128	@ 0x80
10051768:	00db      	lsls	r3, r3, #3
1005176a:	429a      	cmp	r2, r3
1005176c:	d01d      	beq.n	100517aa <RADIO_SetHighPower+0xc2>
    return;

  /* Bypass SMPS */
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_SMPS_PRECHARGE);
1005176e:	2380      	movs	r3, #128	@ 0x80
10051770:	009b      	lsls	r3, r3, #2
10051772:	0018      	movs	r0, r3
10051774:	f7ff fe84 	bl	10051480 <LL_PWR_SetSMPSPrechargeMode>
  while(LL_PWR_IsSMPSReady());
10051778:	46c0      	nop			@ (mov r8, r8)
1005177a:	f7ff fe65 	bl	10051448 <LL_PWR_IsSMPSReady>
1005177e:	1e03      	subs	r3, r0, #0
10051780:	d1fb      	bne.n	1005177a <RADIO_SetHighPower+0x92>
  /* Change level */
  if(state != DISABLE)
10051782:	1dfb      	adds	r3, r7, #7
10051784:	781b      	ldrb	r3, [r3, #0]
10051786:	2b00      	cmp	r3, #0
10051788:	d003      	beq.n	10051792 <RADIO_SetHighPower+0xaa>
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V90);
1005178a:	200e      	movs	r0, #14
1005178c:	f7ff fea2 	bl	100514d4 <LL_PWR_SMPS_SetOutputVoltageLevel>
10051790:	e002      	b.n	10051798 <RADIO_SetHighPower+0xb0>
  }
  else
  {
    LL_PWR_SMPS_SetOutputVoltageLevel(PWR_SMPS_OUTPUT_VOLTAGE_1V40);
10051792:	2004      	movs	r0, #4
10051794:	f7ff fe9e 	bl	100514d4 <LL_PWR_SMPS_SetOutputVoltageLevel>
  }
  /* Disable bypass*/
  LL_PWR_SetSMPSPrechargeMode(LL_PWR_NO_SMPS_PRECHARGE);
10051798:	2000      	movs	r0, #0
1005179a:	f7ff fe71 	bl	10051480 <LL_PWR_SetSMPSPrechargeMode>
  while(!LL_PWR_IsSMPSReady());
1005179e:	46c0      	nop			@ (mov r8, r8)
100517a0:	f7ff fe52 	bl	10051448 <LL_PWR_IsSMPSReady>
100517a4:	1e03      	subs	r3, r0, #0
100517a6:	d0fb      	beq.n	100517a0 <RADIO_SetHighPower+0xb8>
100517a8:	e000      	b.n	100517ac <RADIO_SetHighPower+0xc4>
    return;
100517aa:	46c0      	nop			@ (mov r8, r8)
}
100517ac:	46bd      	mov	sp, r7
100517ae:	b002      	add	sp, #8
100517b0:	bd80      	pop	{r7, pc}
100517b2:	46c0      	nop			@ (mov r8, r8)
100517b4:	20002987 	.word	0x20002987

100517b8 <HAL_RADIO_TxRxSeqCallback>:

void HAL_RADIO_TxRxSeqCallback(void)
{
100517b8:	b580      	push	{r7, lr}
100517ba:	af00      	add	r7, sp, #0
#if defined(RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS)
  if(high_power == FALSE)
100517bc:	4b16      	ldr	r3, [pc, #88]	@ (10051818 <HAL_RADIO_TxRxSeqCallback+0x60>)
100517be:	781b      	ldrb	r3, [r3, #0]
100517c0:	2b00      	cmp	r3, #0
100517c2:	d025      	beq.n	10051810 <HAL_RADIO_TxRxSeqCallback+0x58>
    return;

  if(LL_SYSCFG_BLERXTX_IsInterruptPending(LL_SYSCFG_BLE_TX_EVENT)){
100517c4:	2001      	movs	r0, #1
100517c6:	f7ff ff4d 	bl	10051664 <LL_SYSCFG_BLERXTX_IsInterruptPending>
100517ca:	1e03      	subs	r3, r0, #0
100517cc:	d021      	beq.n	10051812 <HAL_RADIO_TxRxSeqCallback+0x5a>
    if(RRM->FSM_STATUS_DIG_OUT & RRM_FSM_STATUS_DIG_OUT_STATUS_4)
100517ce:	4a13      	ldr	r2, [pc, #76]	@ (1005181c <HAL_RADIO_TxRxSeqCallback+0x64>)
100517d0:	23a6      	movs	r3, #166	@ 0xa6
100517d2:	009b      	lsls	r3, r3, #2
100517d4:	58d3      	ldr	r3, [r2, r3]
100517d6:	2210      	movs	r2, #16
100517d8:	4013      	ands	r3, r2
100517da:	d00a      	beq.n	100517f2 <HAL_RADIO_TxRxSeqCallback+0x3a>
    {
      // Rising edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 1);
100517dc:	4a0f      	ldr	r2, [pc, #60]	@ (1005181c <HAL_RADIO_TxRxSeqCallback+0x64>)
100517de:	2395      	movs	r3, #149	@ 0x95
100517e0:	009b      	lsls	r3, r3, #2
100517e2:	58d3      	ldr	r3, [r2, r3]
100517e4:	490d      	ldr	r1, [pc, #52]	@ (1005181c <HAL_RADIO_TxRxSeqCallback+0x64>)
100517e6:	2202      	movs	r2, #2
100517e8:	431a      	orrs	r2, r3
100517ea:	2395      	movs	r3, #149	@ 0x95
100517ec:	009b      	lsls	r3, r3, #2
100517ee:	50ca      	str	r2, [r1, r3]
100517f0:	e00a      	b.n	10051808 <HAL_RADIO_TxRxSeqCallback+0x50>
    }
    else
    {
      // Falling edge
      MODIFY_REG_FIELD(RRM->LDO_ANA_ENG, RRM_LDO_ANA_ENG_RFD_LDO_TRANSFO_BYPASS, 0);
100517f2:	4a0a      	ldr	r2, [pc, #40]	@ (1005181c <HAL_RADIO_TxRxSeqCallback+0x64>)
100517f4:	2395      	movs	r3, #149	@ 0x95
100517f6:	009b      	lsls	r3, r3, #2
100517f8:	58d3      	ldr	r3, [r2, r3]
100517fa:	4908      	ldr	r1, [pc, #32]	@ (1005181c <HAL_RADIO_TxRxSeqCallback+0x64>)
100517fc:	2202      	movs	r2, #2
100517fe:	4393      	bics	r3, r2
10051800:	001a      	movs	r2, r3
10051802:	2395      	movs	r3, #149	@ 0x95
10051804:	009b      	lsls	r3, r3, #2
10051806:	50ca      	str	r2, [r1, r3]
    }
    LL_SYSCFG_BLERXTX_ClearInterrupt(LL_SYSCFG_BLE_TX_EVENT);
10051808:	2001      	movs	r0, #1
1005180a:	f7ff ff3e 	bl	1005168a <LL_SYSCFG_BLERXTX_ClearInterrupt>
1005180e:	e000      	b.n	10051812 <HAL_RADIO_TxRxSeqCallback+0x5a>
    return;
10051810:	46c0      	nop			@ (mov r8, r8)
  }
#endif
}
10051812:	46bd      	mov	sp, r7
10051814:	bd80      	pop	{r7, pc}
10051816:	46c0      	nop			@ (mov r8, r8)
10051818:	20002987 	.word	0x20002987
1005181c:	60001400 	.word	0x60001400

10051820 <LL_SYSCFG_GetDeviceRevision>:
{
10051820:	b580      	push	{r7, lr}
10051822:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_REVISION) >> SYSCFG_DIE_ID_REVISION_Pos);
10051824:	2380      	movs	r3, #128	@ 0x80
10051826:	05db      	lsls	r3, r3, #23
10051828:	681b      	ldr	r3, [r3, #0]
1005182a:	220f      	movs	r2, #15
1005182c:	4013      	ands	r3, r2
}
1005182e:	0018      	movs	r0, r3
10051830:	46bd      	mov	sp, r7
10051832:	bd80      	pop	{r7, pc}

10051834 <LL_SYSCFG_GetDeviceVersion>:
{
10051834:	b580      	push	{r7, lr}
10051836:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(SYSCFG->DIE_ID) & SYSCFG_DIE_ID_VERSION) >> SYSCFG_DIE_ID_VERSION_Pos);
10051838:	2380      	movs	r3, #128	@ 0x80
1005183a:	05db      	lsls	r3, r3, #23
1005183c:	681b      	ldr	r3, [r3, #0]
1005183e:	091b      	lsrs	r3, r3, #4
10051840:	220f      	movs	r2, #15
10051842:	4013      	ands	r3, r2
}
10051844:	0018      	movs	r0, r3
10051846:	46bd      	mov	sp, r7
10051848:	bd80      	pop	{r7, pc}

1005184a <LL_SYSCFG_GetDeviceJTAG_ID>:
{
1005184a:	b580      	push	{r7, lr}
1005184c:	af00      	add	r7, sp, #0
  return (uint32_t)READ_REG(SYSCFG->JTAG_ID);
1005184e:	2380      	movs	r3, #128	@ 0x80
10051850:	05db      	lsls	r3, r3, #23
10051852:	685b      	ldr	r3, [r3, #4]
}
10051854:	0018      	movs	r0, r3
10051856:	46bd      	mov	sp, r7
10051858:	bd80      	pop	{r7, pc}
	...

1005185c <LL_GetFlashSize>:
    * @note   This bitfield indicates the words number of the device Flash memory expressed.
    *         As an example, 0x7FFF corresponds to 128 Kbytes.
    * @retval FLASH_SIZE[15:0]: Flash memory size
    */
__STATIC_INLINE uint32_t LL_GetFlashSize(void)
{
1005185c:	b580      	push	{r7, lr}
1005185e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)FLASHSIZE_BASE_ADDRESS)) & 0x0000FFFFUL);
10051860:	4b03      	ldr	r3, [pc, #12]	@ (10051870 <LL_GetFlashSize+0x14>)
10051862:	681b      	ldr	r3, [r3, #0]
10051864:	041b      	lsls	r3, r3, #16
10051866:	0c1b      	lsrs	r3, r3, #16
}
10051868:	0018      	movs	r0, r3
1005186a:	46bd      	mov	sp, r7
1005186c:	bd80      	pop	{r7, pc}
1005186e:	46c0      	nop			@ (mov r8, r8)
10051870:	40001014 	.word	0x40001014

10051874 <LL_GetRAMSize>:
    * @arg LL_UTILS_RAMSIZE_32K
    * @arg LL_UTILS_RAMSIZE_48K
    * @arg LL_UTILS_RAMSIZE_64K
    */
  __STATIC_INLINE uint32_t LL_GetRAMSize(void)
  {
10051874:	b580      	push	{r7, lr}
10051876:	b082      	sub	sp, #8
10051878:	af00      	add	r7, sp, #0

    if (tmpreg == 0) {
      tmpreg = LL_UTILS_RAMSIZE_32K;
    }
#else
    tmpreg = LL_UTILS_RAMSIZE_24K;
1005187a:	2300      	movs	r3, #0
1005187c:	607b      	str	r3, [r7, #4]
#endif
    
    return tmpreg;
1005187e:	687b      	ldr	r3, [r7, #4]
  }
10051880:	0018      	movs	r0, r3
10051882:	46bd      	mov	sp, r7
10051884:	b002      	add	sp, #8
10051886:	bd80      	pop	{r7, pc}

10051888 <GetPartInfo>:
/* Private variables ---------------------------------------------------------*/

/*---------------------------------------------------------------------------*/

void GetPartInfo(PartInfoType *partInfo)
{
10051888:	b580      	push	{r7, lr}
1005188a:	b084      	sub	sp, #16
1005188c:	af00      	add	r7, sp, #0
1005188e:	6078      	str	r0, [r7, #4]
  uint32_t jtag_id;

  partInfo->die_id = DIE_SW_ID_UNKOWN;
10051890:	687b      	ldr	r3, [r7, #4]
10051892:	22ff      	movs	r2, #255	@ 0xff
10051894:	701a      	strb	r2, [r3, #0]

  jtag_id = LL_SYSCFG_GetDeviceJTAG_ID();
10051896:	f7ff ffd8 	bl	1005184a <LL_SYSCFG_GetDeviceJTAG_ID>
1005189a:	0003      	movs	r3, r0
1005189c:	60fb      	str	r3, [r7, #12]
  if(jtag_id == JTAG_ID_CODE_STM32WB07XX)
  {
    partInfo->die_id = DIE_SW_ID_STM32WB07XX;
  }
#elif defined(STM32WB05)
  if(jtag_id == JTAG_ID_CODE_STM32WB05XX)
1005189e:	68fb      	ldr	r3, [r7, #12]
100518a0:	4a18      	ldr	r2, [pc, #96]	@ (10051904 <GetPartInfo+0x7c>)
100518a2:	4293      	cmp	r3, r2
100518a4:	d102      	bne.n	100518ac <GetPartInfo+0x24>
  {
    partInfo->die_id = DIE_SW_ID_STM32WB05XX;
100518a6:	687b      	ldr	r3, [r7, #4]
100518a8:	2205      	movs	r2, #5
100518aa:	701a      	strb	r2, [r3, #0]
  }
#endif

  partInfo->die_major     =  LL_SYSCFG_GetDeviceVersion();
100518ac:	f7ff ffc2 	bl	10051834 <LL_SYSCFG_GetDeviceVersion>
100518b0:	0003      	movs	r3, r0
100518b2:	b2da      	uxtb	r2, r3
100518b4:	687b      	ldr	r3, [r7, #4]
100518b6:	705a      	strb	r2, [r3, #1]
  partInfo->die_cut       =  LL_SYSCFG_GetDeviceRevision();
100518b8:	f7ff ffb2 	bl	10051820 <LL_SYSCFG_GetDeviceRevision>
100518bc:	0003      	movs	r3, r0
100518be:	b2da      	uxtb	r2, r3
100518c0:	687b      	ldr	r3, [r7, #4]
100518c2:	709a      	strb	r2, [r3, #2]
  partInfo->jtag_id_code  =  LL_SYSCFG_GetDeviceJTAG_ID(); // Duplicated
100518c4:	f7ff ffc1 	bl	1005184a <LL_SYSCFG_GetDeviceJTAG_ID>
100518c8:	0002      	movs	r2, r0
100518ca:	687b      	ldr	r3, [r7, #4]
100518cc:	605a      	str	r2, [r3, #4]
  partInfo->flash_size    =  (LL_GetFlashSize() + 1) * 4;
100518ce:	f7ff ffc5 	bl	1005185c <LL_GetFlashSize>
100518d2:	0003      	movs	r3, r0
100518d4:	3301      	adds	r3, #1
100518d6:	009a      	lsls	r2, r3, #2
100518d8:	687b      	ldr	r3, [r7, #4]
100518da:	609a      	str	r2, [r3, #8]

  if (LL_GetRAMSize() != LL_UTILS_RAMSIZE_24K)
100518dc:	f7ff ffca 	bl	10051874 <LL_GetRAMSize>
100518e0:	1e03      	subs	r3, r0, #0
100518e2:	d007      	beq.n	100518f4 <GetPartInfo+0x6c>
  {
    partInfo->ram_size    =  (LL_GetRAMSize() + 1) * 16 * 1024;
100518e4:	f7ff ffc6 	bl	10051874 <LL_GetRAMSize>
100518e8:	0003      	movs	r3, r0
100518ea:	3301      	adds	r3, #1
100518ec:	039a      	lsls	r2, r3, #14
100518ee:	687b      	ldr	r3, [r7, #4]
100518f0:	60da      	str	r2, [r3, #12]
  else
  {
    partInfo->ram_size    =  24*1024;
  }

}
100518f2:	e003      	b.n	100518fc <GetPartInfo+0x74>
    partInfo->ram_size    =  24*1024;
100518f4:	687b      	ldr	r3, [r7, #4]
100518f6:	22c0      	movs	r2, #192	@ 0xc0
100518f8:	01d2      	lsls	r2, r2, #7
100518fa:	60da      	str	r2, [r3, #12]
}
100518fc:	46c0      	nop			@ (mov r8, r8)
100518fe:	46bd      	mov	sp, r7
10051900:	b004      	add	sp, #16
10051902:	bd80      	pop	{r7, pc}
10051904:	02028041 	.word	0x02028041

10051908 <__NVIC_SystemReset>:
{
10051908:	b580      	push	{r7, lr}
1005190a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
1005190c:	f3bf 8f4f 	dsb	sy
}
10051910:	46c0      	nop			@ (mov r8, r8)
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10051912:	4b04      	ldr	r3, [pc, #16]	@ (10051924 <__NVIC_SystemReset+0x1c>)
10051914:	4a04      	ldr	r2, [pc, #16]	@ (10051928 <__NVIC_SystemReset+0x20>)
10051916:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
10051918:	f3bf 8f4f 	dsb	sy
}
1005191c:	46c0      	nop			@ (mov r8, r8)
    __NOP();
1005191e:	46c0      	nop			@ (mov r8, r8)
10051920:	e7fd      	b.n	1005191e <__NVIC_SystemReset+0x16>
10051922:	46c0      	nop			@ (mov r8, r8)
10051924:	e000ed00 	.word	0xe000ed00
10051928:	05fa0004 	.word	0x05fa0004

1005192c <ModulesInit>:

/* USER CODE END PF */

/* Functions Definition ------------------------------------------------------*/
void ModulesInit(void)
{
1005192c:	b580      	push	{r7, lr}
1005192e:	af00      	add	r7, sp, #0
  BLENVM_Init();
10051930:	f000 fde4 	bl	100524fc <BLENVM_Init>
  if (PKAMGR_Init() == PKAMGR_ERROR)
10051934:	f7ff fb52 	bl	10050fdc <PKAMGR_Init>
10051938:	0003      	movs	r3, r0
1005193a:	3301      	adds	r3, #1
1005193c:	d101      	bne.n	10051942 <ModulesInit+0x16>
  {
    Error_Handler();
1005193e:	f7ef fe1d 	bl	1004157c <Error_Handler>
  }
}
10051942:	46c0      	nop			@ (mov r8, r8)
10051944:	46bd      	mov	sp, r7
10051946:	bd80      	pop	{r7, pc}

10051948 <BLE_Init>:

void BLE_Init(void)
{
10051948:	b5f0      	push	{r4, r5, r6, r7, lr}
1005194a:	b099      	sub	sp, #100	@ 0x64
1005194c:	af04      	add	r7, sp, #16
  uint8_t role;
  uint8_t privacy_type = 0;
1005194e:	234f      	movs	r3, #79	@ 0x4f
10051950:	18fb      	adds	r3, r7, r3
10051952:	2200      	movs	r2, #0
10051954:	701a      	strb	r2, [r3, #0]
  tBleStatus ret;
  uint16_t gatt_service_changed_handle;
  uint16_t gap_dev_name_char_handle;
  uint16_t gap_appearance_char_handle;
  uint16_t gap_periph_pref_conn_param_char_handle;
  uint8_t bd_address[6] = {0};
10051956:	233c      	movs	r3, #60	@ 0x3c
10051958:	18fb      	adds	r3, r7, r3
1005195a:	0018      	movs	r0, r3
1005195c:	2306      	movs	r3, #6
1005195e:	001a      	movs	r2, r3
10051960:	2100      	movs	r1, #0
10051962:	f016 f8ff 	bl	10067b64 <memset>
  uint8_t bd_address_len= 6;
10051966:	234e      	movs	r3, #78	@ 0x4e
10051968:	18fb      	adds	r3, r7, r3
1005196a:	2206      	movs	r2, #6
1005196c:	701a      	strb	r2, [r3, #0]
  uint16_t appearance = CFG_GAP_APPEARANCE;
1005196e:	233a      	movs	r3, #58	@ 0x3a
10051970:	18fb      	adds	r3, r7, r3
10051972:	22a0      	movs	r2, #160	@ 0xa0
10051974:	0092      	lsls	r2, r2, #2
10051976:	801a      	strh	r2, [r3, #0]

  BLE_STACK_InitTypeDef BLE_STACK_InitParams = {
10051978:	1d3a      	adds	r2, r7, #4
1005197a:	4b5b      	ldr	r3, [pc, #364]	@ (10051ae8 <BLE_Init+0x1a0>)
1005197c:	0010      	movs	r0, r2
1005197e:	0019      	movs	r1, r3
10051980:	2334      	movs	r3, #52	@ 0x34
10051982:	001a      	movs	r2, r3
10051984:	f016 f963 	bl	10067c4e <memcpy>
    .isr1_fifo_size = CFG_BLE_ISR1_FIFO_SIZE,
    .user_fifo_size = CFG_BLE_USER_FIFO_SIZE
  };

  /* Bluetooth LE stack init */
  ret = BLE_STACK_Init(&BLE_STACK_InitParams);
10051988:	254d      	movs	r5, #77	@ 0x4d
1005198a:	197c      	adds	r4, r7, r5
1005198c:	1d3b      	adds	r3, r7, #4
1005198e:	0018      	movs	r0, r3
10051990:	f003 fbf2 	bl	10055178 <BLE_STACK_Init>
10051994:	0003      	movs	r3, r0
10051996:	7023      	strb	r3, [r4, #0]
  if (ret != BLE_STATUS_SUCCESS) {
10051998:	197b      	adds	r3, r7, r5
1005199a:	781b      	ldrb	r3, [r3, #0]
1005199c:	2b00      	cmp	r3, #0
1005199e:	d001      	beq.n	100519a4 <BLE_Init+0x5c>
    APP_DBG_MSG("Error in BLE_STACK_Init() 0x%02x\r\n", ret);
    Error_Handler();
100519a0:	f7ef fdec 	bl	1004157c <Error_Handler>
  }

#if (CFG_BD_ADDRESS_TYPE == HCI_ADDR_PUBLIC)

  bd_address[0] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000000000FF));
100519a4:	213c      	movs	r1, #60	@ 0x3c
100519a6:	187b      	adds	r3, r7, r1
100519a8:	2234      	movs	r2, #52	@ 0x34
100519aa:	701a      	strb	r2, [r3, #0]
  bd_address[1] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00000000FF00) >> 8);
100519ac:	187b      	adds	r3, r7, r1
100519ae:	2212      	movs	r2, #18
100519b0:	705a      	strb	r2, [r3, #1]
  bd_address[2] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x000000FF0000) >> 16);
100519b2:	187b      	adds	r3, r7, r1
100519b4:	222a      	movs	r2, #42	@ 0x2a
100519b6:	709a      	strb	r2, [r3, #2]
  bd_address[3] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x0000FF000000) >> 24);
100519b8:	187b      	adds	r3, r7, r1
100519ba:	22e1      	movs	r2, #225	@ 0xe1
100519bc:	70da      	strb	r2, [r3, #3]
  bd_address[4] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0x00FF00000000) >> 32);
100519be:	187b      	adds	r3, r7, r1
100519c0:	2208      	movs	r2, #8
100519c2:	711a      	strb	r2, [r3, #4]
  bd_address[5] = (uint8_t)((CFG_PUBLIC_BD_ADDRESS & 0xFF0000000000) >> 40);
100519c4:	187b      	adds	r3, r7, r1
100519c6:	2200      	movs	r2, #0
100519c8:	715a      	strb	r2, [r3, #5]
  (void)bd_address_len;

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bd_address);
100519ca:	254d      	movs	r5, #77	@ 0x4d
100519cc:	197c      	adds	r4, r7, r5
100519ce:	187b      	adds	r3, r7, r1
100519d0:	001a      	movs	r2, r3
100519d2:	2106      	movs	r1, #6
100519d4:	2000      	movs	r0, #0
100519d6:	f003 f8c7 	bl	10054b68 <aci_hal_write_config_data>
100519da:	0003      	movs	r3, r0
100519dc:	7023      	strb	r3, [r4, #0]
#endif

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(0, CFG_TX_POWER);
100519de:	197c      	adds	r4, r7, r5
100519e0:	211f      	movs	r1, #31
100519e2:	2000      	movs	r0, #0
100519e4:	f003 f8c4 	bl	10054b70 <aci_hal_set_tx_power_level>
100519e8:	0003      	movs	r3, r0
100519ea:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_srv_profile_init(GATT_INIT_SERVICE_CHANGED_BIT, &gatt_service_changed_handle);
100519ec:	197c      	adds	r4, r7, r5
100519ee:	234a      	movs	r3, #74	@ 0x4a
100519f0:	18fb      	adds	r3, r7, r3
100519f2:	0019      	movs	r1, r3
100519f4:	2001      	movs	r0, #1
100519f6:	f7ff fc63 	bl	100512c0 <aci_gatt_srv_profile_init>
100519fa:	0003      	movs	r3, r0
100519fc:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize GAP interface
   */
  role = 0U;
100519fe:	214c      	movs	r1, #76	@ 0x4c
10051a00:	187b      	adds	r3, r7, r1
10051a02:	2200      	movs	r2, #0
10051a04:	701a      	strb	r2, [r3, #0]
  role |= GAP_PERIPHERAL_ROLE;
10051a06:	187b      	adds	r3, r7, r1
10051a08:	187a      	adds	r2, r7, r1
10051a0a:	7812      	ldrb	r2, [r2, #0]
10051a0c:	2101      	movs	r1, #1
10051a0e:	430a      	orrs	r2, r1
10051a10:	701a      	strb	r2, [r3, #0]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  ret = aci_gap_init(privacy_type, CFG_BD_ADDRESS_TYPE);
10051a12:	197c      	adds	r4, r7, r5
10051a14:	224f      	movs	r2, #79	@ 0x4f
10051a16:	18bb      	adds	r3, r7, r2
10051a18:	781b      	ldrb	r3, [r3, #0]
10051a1a:	2100      	movs	r1, #0
10051a1c:	0018      	movs	r0, r3
10051a1e:	f002 febd 	bl	1005479c <aci_gap_init>
10051a22:	0003      	movs	r3, r0
10051a24:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gap_init command\n");
  }

  ret = aci_gap_profile_init(role, privacy_type,
10051a26:	002e      	movs	r6, r5
10051a28:	197c      	adds	r4, r7, r5
10051a2a:	2546      	movs	r5, #70	@ 0x46
10051a2c:	197d      	adds	r5, r7, r5
10051a2e:	2348      	movs	r3, #72	@ 0x48
10051a30:	18fa      	adds	r2, r7, r3
10051a32:	204f      	movs	r0, #79	@ 0x4f
10051a34:	183b      	adds	r3, r7, r0
10051a36:	7819      	ldrb	r1, [r3, #0]
10051a38:	234c      	movs	r3, #76	@ 0x4c
10051a3a:	18fb      	adds	r3, r7, r3
10051a3c:	7818      	ldrb	r0, [r3, #0]
10051a3e:	2344      	movs	r3, #68	@ 0x44
10051a40:	18fb      	adds	r3, r7, r3
10051a42:	9300      	str	r3, [sp, #0]
10051a44:	002b      	movs	r3, r5
10051a46:	f7ff fad5 	bl	10050ff4 <aci_gap_profile_init>
10051a4a:	0003      	movs	r3, r0
10051a4c:	7023      	strb	r3, [r4, #0]
  APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",bd_address[5],bd_address[4],bd_address[3],bd_address[2],bd_address[1],bd_address[0]);
#else
#error "Invalid CFG_BD_ADDRESS_TYPE"
#endif

  ret = Gap_profile_set_dev_name(0, sizeof(a_GapDeviceName), (uint8_t*)a_GapDeviceName);
10051a4e:	0035      	movs	r5, r6
10051a50:	197c      	adds	r4, r7, r5
10051a52:	4b26      	ldr	r3, [pc, #152]	@ (10051aec <BLE_Init+0x1a4>)
10051a54:	001a      	movs	r2, r3
10051a56:	2119      	movs	r1, #25
10051a58:	2000      	movs	r0, #0
10051a5a:	f7ff fb3d 	bl	100510d8 <Gap_profile_set_dev_name>
10051a5e:	0003      	movs	r3, r0
10051a60:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: Gap_profile_set_dev_name - Device Name\n");
  }

  ret = Gap_profile_set_appearance(0, sizeof(appearance), (uint8_t*)&appearance);
10051a62:	197c      	adds	r4, r7, r5
10051a64:	233a      	movs	r3, #58	@ 0x3a
10051a66:	18fb      	adds	r3, r7, r3
10051a68:	001a      	movs	r2, r3
10051a6a:	2102      	movs	r1, #2
10051a6c:	2000      	movs	r0, #0
10051a6e:	f7ff fb59 	bl	10051124 <Gap_profile_set_appearance>
10051a72:	0003      	movs	r3, r0
10051a74:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize IO capability
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
10051a76:	4b1e      	ldr	r3, [pc, #120]	@ (10051af0 <BLE_Init+0x1a8>)
10051a78:	2201      	movs	r2, #1
10051a7a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
10051a7c:	4b1c      	ldr	r3, [pc, #112]	@ (10051af0 <BLE_Init+0x1a8>)
10051a7e:	781b      	ldrb	r3, [r3, #0]
10051a80:	197c      	adds	r4, r7, r5
10051a82:	0018      	movs	r0, r3
10051a84:	f7fd fb4e 	bl	1004f124 <aci_gap_set_io_capability>
10051a88:	0003      	movs	r3, r0
10051a8a:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize authentication
   */
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode             = CFG_MITM_PROTECTION;
10051a8c:	4b18      	ldr	r3, [pc, #96]	@ (10051af0 <BLE_Init+0x1a8>)
10051a8e:	2201      	movs	r2, #1
10051a90:	705a      	strb	r2, [r3, #1]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin  = CFG_ENCRYPTION_KEY_SIZE_MIN;
10051a92:	4b17      	ldr	r3, [pc, #92]	@ (10051af0 <BLE_Init+0x1a8>)
10051a94:	2208      	movs	r2, #8
10051a96:	70da      	strb	r2, [r3, #3]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax  = CFG_ENCRYPTION_KEY_SIZE_MAX;
10051a98:	4b15      	ldr	r3, [pc, #84]	@ (10051af0 <BLE_Init+0x1a8>)
10051a9a:	2210      	movs	r2, #16
10051a9c:	711a      	strb	r2, [r3, #4]
  bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode          = CFG_BONDING_MODE;
10051a9e:	4b14      	ldr	r3, [pc, #80]	@ (10051af0 <BLE_Init+0x1a8>)
10051aa0:	2201      	movs	r2, #1
10051aa2:	709a      	strb	r2, [r3, #2]

  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/
  ret = aci_gap_set_security_requirements(bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
10051aa4:	4b12      	ldr	r3, [pc, #72]	@ (10051af0 <BLE_Init+0x1a8>)
10051aa6:	7898      	ldrb	r0, [r3, #2]
10051aa8:	4b11      	ldr	r3, [pc, #68]	@ (10051af0 <BLE_Init+0x1a8>)
10051aaa:	7859      	ldrb	r1, [r3, #1]
10051aac:	4b10      	ldr	r3, [pc, #64]	@ (10051af0 <BLE_Init+0x1a8>)
10051aae:	78db      	ldrb	r3, [r3, #3]
10051ab0:	4a0f      	ldr	r2, [pc, #60]	@ (10051af0 <BLE_Init+0x1a8>)
10051ab2:	7912      	ldrb	r2, [r2, #4]
10051ab4:	002e      	movs	r6, r5
10051ab6:	197c      	adds	r4, r7, r5
10051ab8:	2500      	movs	r5, #0
10051aba:	9502      	str	r5, [sp, #8]
10051abc:	9201      	str	r2, [sp, #4]
10051abe:	9300      	str	r3, [sp, #0]
10051ac0:	2300      	movs	r3, #0
10051ac2:	2201      	movs	r2, #1
10051ac4:	f7fd fb3e 	bl	1004f144 <aci_gap_set_security_requirements>
10051ac8:	0003      	movs	r3, r0
10051aca:	7023      	strb	r3, [r4, #0]
  }

  /**
   * Initialize Filter Accept List
   */
  if (bleAppContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
10051acc:	4b08      	ldr	r3, [pc, #32]	@ (10051af0 <BLE_Init+0x1a8>)
10051ace:	789b      	ldrb	r3, [r3, #2]
10051ad0:	2b00      	cmp	r3, #0
10051ad2:	d005      	beq.n	10051ae0 <BLE_Init+0x198>
  {
    ret = aci_gap_configure_filter_accept_and_resolving_list(0x01);
10051ad4:	19bc      	adds	r4, r7, r6
10051ad6:	2001      	movs	r0, #1
10051ad8:	f002 fe8a 	bl	100547f0 <aci_gap_configure_filter_accept_and_resolving_list>
10051adc:	0003      	movs	r3, r0
10051ade:	7023      	strb	r3, [r4, #0]
      APP_DBG_MSG("  Success: aci_gap_configure_filter_accept_and_resolving_list command\n");
    }
  }
  APP_DBG_MSG("==>> End BLE_Init function\n");

}
10051ae0:	46c0      	nop			@ (mov r8, r8)
10051ae2:	46bd      	mov	sp, r7
10051ae4:	b015      	add	sp, #84	@ 0x54
10051ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051ae8:	10068cd8 	.word	0x10068cd8
10051aec:	100695ac 	.word	0x100695ac
10051af0:	20002988 	.word	0x20002988

10051af4 <BLEStack_Process_Schedule>:

void BLEStack_Process_Schedule(void)
{
10051af4:	b580      	push	{r7, lr}
10051af6:	af00      	add	r7, sp, #0
  /* Keep BLE Stack Process priority low, since there are limited cases
     where stack wants to be rescheduled for busy waiting.  */
  UTIL_SEQ_SetTask( 1U << CFG_TASK_BLE_STACK, CFG_SEQ_PRIO_1);
10051af8:	2101      	movs	r1, #1
10051afa:	2001      	movs	r0, #1
10051afc:	f002 fd60 	bl	100545c0 <UTIL_SEQ_SetTask>
}
10051b00:	46c0      	nop			@ (mov r8, r8)
10051b02:	46bd      	mov	sp, r7
10051b04:	bd80      	pop	{r7, pc}

10051b06 <BLEStack_Process>:
static void BLEStack_Process(void)
{
10051b06:	b580      	push	{r7, lr}
10051b08:	af00      	add	r7, sp, #0
  APP_DEBUG_SIGNAL_SET(APP_STACK_PROCESS);
10051b0a:	2001      	movs	r0, #1
10051b0c:	f002 fc1a 	bl	10054344 <APP_DEBUG_SIGNAL_SET>
  BLE_STACK_Tick();
10051b10:	f003 fa4e 	bl	10054fb0 <BLE_STACK_Tick>

  APP_DEBUG_SIGNAL_RESET(APP_STACK_PROCESS);
10051b14:	2001      	movs	r0, #1
10051b16:	f002 fc1f 	bl	10054358 <APP_DEBUG_SIGNAL_RESET>
}
10051b1a:	46c0      	nop			@ (mov r8, r8)
10051b1c:	46bd      	mov	sp, r7
10051b1e:	bd80      	pop	{r7, pc}

10051b20 <VTimer_Process>:

void VTimer_Process(void)
{
10051b20:	b580      	push	{r7, lr}
10051b22:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_Tick();
10051b24:	f7f9 f8c6 	bl	1004acb4 <HAL_RADIO_TIMER_Tick>
}
10051b28:	46c0      	nop			@ (mov r8, r8)
10051b2a:	46bd      	mov	sp, r7
10051b2c:	bd80      	pop	{r7, pc}

10051b2e <VTimer_Process_Schedule>:

void VTimer_Process_Schedule(void)
{
10051b2e:	b580      	push	{r7, lr}
10051b30:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_VTIMER, CFG_SEQ_PRIO_0);
10051b32:	2100      	movs	r1, #0
10051b34:	2002      	movs	r0, #2
10051b36:	f002 fd43 	bl	100545c0 <UTIL_SEQ_SetTask>
}
10051b3a:	46c0      	nop			@ (mov r8, r8)
10051b3c:	46bd      	mov	sp, r7
10051b3e:	bd80      	pop	{r7, pc}

10051b40 <NVM_Process>:
void NVM_Process(void)
{
10051b40:	b580      	push	{r7, lr}
10051b42:	af00      	add	r7, sp, #0
  NVMDB_Tick();
10051b44:	f7ff f9d0 	bl	10050ee8 <NVMDB_Tick>
}
10051b48:	46c0      	nop			@ (mov r8, r8)
10051b4a:	46bd      	mov	sp, r7
10051b4c:	bd80      	pop	{r7, pc}

10051b4e <NVM_Process_Schedule>:

void NVM_Process_Schedule(void)
{
10051b4e:	b580      	push	{r7, lr}
10051b50:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1U << CFG_TASK_NVM, CFG_SEQ_PRIO_1);
10051b52:	2101      	movs	r1, #1
10051b54:	2004      	movs	r0, #4
10051b56:	f002 fd33 	bl	100545c0 <UTIL_SEQ_SetTask>
}
10051b5a:	46c0      	nop			@ (mov r8, r8)
10051b5c:	46bd      	mov	sp, r7
10051b5e:	bd80      	pop	{r7, pc}

10051b60 <HAL_RADIO_TIMER_CpuWakeUpCallback>:
  VTimer_Process_Schedule();
}

/* Function called from RADIO_TIMER_CPU_WKUP_IRQHandler() context. */
void HAL_RADIO_TIMER_CpuWakeUpCallback(void)
{
10051b60:	b580      	push	{r7, lr}
10051b62:	af00      	add	r7, sp, #0
  VTimer_Process_Schedule();
10051b64:	f7ff ffe3 	bl	10051b2e <VTimer_Process_Schedule>
}
10051b68:	46c0      	nop			@ (mov r8, r8)
10051b6a:	46bd      	mov	sp, r7
10051b6c:	bd80      	pop	{r7, pc}

10051b6e <HAL_RADIO_TxRxCallback>:

/* Function called from RADIO_TXRX_IRQHandler() context. */
void HAL_RADIO_TxRxCallback(uint32_t flags)
{
10051b6e:	b580      	push	{r7, lr}
10051b70:	b082      	sub	sp, #8
10051b72:	af00      	add	r7, sp, #0
10051b74:	6078      	str	r0, [r7, #4]
  BLE_STACK_RadioHandler(flags);
10051b76:	687b      	ldr	r3, [r7, #4]
10051b78:	0018      	movs	r0, r3
10051b7a:	f00e f91b 	bl	1005fdb4 <BLE_STACK_RadioHandler>

  VTimer_Process_Schedule();
10051b7e:	f7ff ffd6 	bl	10051b2e <VTimer_Process_Schedule>
  NVM_Process_Schedule();
10051b82:	f7ff ffe4 	bl	10051b4e <NVM_Process_Schedule>
}
10051b86:	46c0      	nop			@ (mov r8, r8)
10051b88:	46bd      	mov	sp, r7
10051b8a:	b002      	add	sp, #8
10051b8c:	bd80      	pop	{r7, pc}

10051b8e <BLE_STACK_ProcessRequest>:

void BLE_STACK_ProcessRequest(void)
{
10051b8e:	b580      	push	{r7, lr}
10051b90:	af00      	add	r7, sp, #0
  BLEStack_Process_Schedule();
10051b92:	f7ff ffaf 	bl	10051af4 <BLEStack_Process_Schedule>
}
10051b96:	46c0      	nop			@ (mov r8, r8)
10051b98:	46bd      	mov	sp, r7
10051b9a:	bd80      	pop	{r7, pc}

10051b9c <APP_BLE_Init>:

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
10051b9c:	b580      	push	{r7, lr}
10051b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BLE_STACK, UTIL_SEQ_RFU, BLEStack_Process);
10051ba0:	4b12      	ldr	r3, [pc, #72]	@ (10051bec <APP_BLE_Init+0x50>)
10051ba2:	001a      	movs	r2, r3
10051ba4:	2100      	movs	r1, #0
10051ba6:	2001      	movs	r0, #1
10051ba8:	f002 fce6 	bl	10054578 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_VTIMER, UTIL_SEQ_RFU, VTimer_Process);
10051bac:	4b10      	ldr	r3, [pc, #64]	@ (10051bf0 <APP_BLE_Init+0x54>)
10051bae:	001a      	movs	r2, r3
10051bb0:	2100      	movs	r1, #0
10051bb2:	2002      	movs	r0, #2
10051bb4:	f002 fce0 	bl	10054578 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << CFG_TASK_NVM, UTIL_SEQ_RFU, NVM_Process);
10051bb8:	4b0e      	ldr	r3, [pc, #56]	@ (10051bf4 <APP_BLE_Init+0x58>)
10051bba:	001a      	movs	r2, r3
10051bbc:	2100      	movs	r1, #0
10051bbe:	2004      	movs	r0, #4
10051bc0:	f002 fcda 	bl	10054578 <UTIL_SEQ_RegTask>
  ModulesInit();
10051bc4:	f7ff feb2 	bl	1005192c <ModulesInit>

  /* Initialization of HCI & GATT & GAP layer */
  BLE_Init();
10051bc8:	f7ff febe 	bl	10051948 <BLE_Init>

  /**
  * Initialization of the BLE App Context
  */
  bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10051bcc:	4b0a      	ldr	r3, [pc, #40]	@ (10051bf8 <APP_BLE_Init+0x5c>)
10051bce:	2200      	movs	r2, #0
10051bd0:	739a      	strb	r2, [r3, #14]
  bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10051bd2:	4b09      	ldr	r3, [pc, #36]	@ (10051bf8 <APP_BLE_Init+0x5c>)
10051bd4:	2201      	movs	r2, #1
10051bd6:	4252      	negs	r2, r2
10051bd8:	819a      	strh	r2, [r3, #12]
  /**
  * Initialize Services and Characteristics.
  */
  APP_DBG_MSG("\n");
  APP_DBG_MSG("Services and Characteristics creation\n");
  USART_APP_Init();
10051bda:	f000 fc81 	bl	100524e0 <USART_APP_Init>
  APP_DBG_MSG("\n");

  /* USER CODE BEGIN APP_BLE_Init_3 */

    /* Start to Advertise to accept a connection */
    APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
10051bde:	2001      	movs	r0, #1
10051be0:	f000 f9ac 	bl	10051f3c <APP_BLE_Procedure_Gap_Peripheral>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
10051be4:	46c0      	nop			@ (mov r8, r8)
}
10051be6:	46bd      	mov	sp, r7
10051be8:	bd80      	pop	{r7, pc}
10051bea:	46c0      	nop			@ (mov r8, r8)
10051bec:	10051b07 	.word	0x10051b07
10051bf0:	10051b21 	.word	0x10051b21
10051bf4:	10051b41 	.word	0x10051b41
10051bf8:	20002988 	.word	0x20002988

10051bfc <BLEEVT_App_Notification>:

void BLEEVT_App_Notification(const hci_pckt *hci_pckt)
{
10051bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
10051bfe:	b099      	sub	sp, #100	@ 0x64
10051c00:	af04      	add	r7, sp, #16
10051c02:	6078      	str	r0, [r7, #4]
  tBleStatus ret = BLE_STATUS_ERROR;
10051c04:	234b      	movs	r3, #75	@ 0x4b
10051c06:	18fb      	adds	r3, r7, r3
10051c08:	2286      	movs	r2, #134	@ 0x86
10051c0a:	701a      	strb	r2, [r3, #0]
  UNUSED(ret);
  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  if(hci_pckt->type != HCI_EVENT_PKT_TYPE && hci_pckt->type != HCI_EVENT_EXT_PKT_TYPE)
10051c0c:	687b      	ldr	r3, [r7, #4]
10051c0e:	781b      	ldrb	r3, [r3, #0]
10051c10:	2b04      	cmp	r3, #4
10051c12:	d004      	beq.n	10051c1e <BLEEVT_App_Notification+0x22>
10051c14:	687b      	ldr	r3, [r7, #4]
10051c16:	781b      	ldrb	r3, [r3, #0]
10051c18:	2b82      	cmp	r3, #130	@ 0x82
10051c1a:	d000      	beq.n	10051c1e <BLEEVT_App_Notification+0x22>
10051c1c:	e132      	b.n	10051e84 <BLEEVT_App_Notification+0x288>
  {
    /* Not an event */
    return;
  }

  p_event_pckt = (hci_event_pckt*)hci_pckt->data;
10051c1e:	687b      	ldr	r3, [r7, #4]
10051c20:	3301      	adds	r3, #1
10051c22:	647b      	str	r3, [r7, #68]	@ 0x44

  if(hci_pckt->type == HCI_EVENT_PKT_TYPE){
10051c24:	687b      	ldr	r3, [r7, #4]
10051c26:	781b      	ldrb	r3, [r3, #0]
10051c28:	2b04      	cmp	r3, #4
10051c2a:	d103      	bne.n	10051c34 <BLEEVT_App_Notification+0x38>
    event_data = p_event_pckt->data;
10051c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051c2e:	3302      	adds	r3, #2
10051c30:	64fb      	str	r3, [r7, #76]	@ 0x4c
10051c32:	e005      	b.n	10051c40 <BLEEVT_App_Notification+0x44>
  }
  else { /* hci_pckt->type == HCI_EVENT_EXT_PKT_TYPE */
    hci_event_ext_pckt *p_event_pckt = (hci_event_ext_pckt*)hci_pckt->data;
10051c34:	687b      	ldr	r3, [r7, #4]
10051c36:	3301      	adds	r3, #1
10051c38:	643b      	str	r3, [r7, #64]	@ 0x40
    event_data = p_event_pckt->data;
10051c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
10051c3c:	3303      	adds	r3, #3
10051c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  switch (p_event_pckt->evt) /* evt field is at same offset in hci_event_pckt and hci_event_ext_pckt */
10051c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051c42:	781b      	ldrb	r3, [r3, #0]
10051c44:	2bff      	cmp	r3, #255	@ 0xff
10051c46:	d100      	bne.n	10051c4a <BLEEVT_App_Notification+0x4e>
10051c48:	e0a4      	b.n	10051d94 <BLEEVT_App_Notification+0x198>
10051c4a:	dd00      	ble.n	10051c4e <BLEEVT_App_Notification+0x52>
10051c4c:	e11c      	b.n	10051e88 <BLEEVT_App_Notification+0x28c>
10051c4e:	2b3e      	cmp	r3, #62	@ 0x3e
10051c50:	d02d      	beq.n	10051cae <BLEEVT_App_Notification+0xb2>
10051c52:	dd00      	ble.n	10051c56 <BLEEVT_App_Notification+0x5a>
10051c54:	e118      	b.n	10051e88 <BLEEVT_App_Notification+0x28c>
10051c56:	2b05      	cmp	r3, #5
10051c58:	d003      	beq.n	10051c62 <BLEEVT_App_Notification+0x66>
10051c5a:	2b10      	cmp	r3, #16
10051c5c:	d100      	bne.n	10051c60 <BLEEVT_App_Notification+0x64>
10051c5e:	e108      	b.n	10051e72 <BLEEVT_App_Notification+0x276>

  default:
    /* USER CODE BEGIN ECODE_DEFAULT*/

    /* USER CODE END ECODE_DEFAULT*/
    break;
10051c60:	e112      	b.n	10051e88 <BLEEVT_App_Notification+0x28c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
10051c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051c64:	3302      	adds	r3, #2
10051c66:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == bleAppContext.BleApplicationContext_legacy.connectionHandle)
10051c68:	68fb      	ldr	r3, [r7, #12]
10051c6a:	785a      	ldrb	r2, [r3, #1]
10051c6c:	789b      	ldrb	r3, [r3, #2]
10051c6e:	021b      	lsls	r3, r3, #8
10051c70:	4313      	orrs	r3, r2
10051c72:	b29a      	uxth	r2, r3
10051c74:	4b87      	ldr	r3, [pc, #540]	@ (10051e94 <BLEEVT_App_Notification+0x298>)
10051c76:	899b      	ldrh	r3, [r3, #12]
10051c78:	429a      	cmp	r2, r3
10051c7a:	d106      	bne.n	10051c8a <BLEEVT_App_Notification+0x8e>
        bleAppContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
10051c7c:	4b85      	ldr	r3, [pc, #532]	@ (10051e94 <BLEEVT_App_Notification+0x298>)
10051c7e:	2201      	movs	r2, #1
10051c80:	4252      	negs	r2, r2
10051c82:	819a      	strh	r2, [r3, #12]
        bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10051c84:	4b83      	ldr	r3, [pc, #524]	@ (10051e94 <BLEEVT_App_Notification+0x298>)
10051c86:	2200      	movs	r2, #0
10051c88:	739a      	strb	r2, [r3, #14]
      gap_cmd_resp_release();
10051c8a:	f000 fa2b 	bl	100520e4 <gap_cmd_resp_release>
      USARTHandleNotification.EvtOpcode = USART_DISCON_HANDLE_EVT;
10051c8e:	4b82      	ldr	r3, [pc, #520]	@ (10051e98 <BLEEVT_App_Notification+0x29c>)
10051c90:	2201      	movs	r2, #1
10051c92:	701a      	strb	r2, [r3, #0]
      USARTHandleNotification.ConnectionHandle = p_disconnection_complete_event->Connection_Handle;
10051c94:	68fb      	ldr	r3, [r7, #12]
10051c96:	785a      	ldrb	r2, [r3, #1]
10051c98:	789b      	ldrb	r3, [r3, #2]
10051c9a:	021b      	lsls	r3, r3, #8
10051c9c:	4313      	orrs	r3, r2
10051c9e:	b29a      	uxth	r2, r3
10051ca0:	4b7d      	ldr	r3, [pc, #500]	@ (10051e98 <BLEEVT_App_Notification+0x29c>)
10051ca2:	805a      	strh	r2, [r3, #2]
      USART_APP_EvtRx(&USARTHandleNotification);
10051ca4:	4b7c      	ldr	r3, [pc, #496]	@ (10051e98 <BLEEVT_App_Notification+0x29c>)
10051ca6:	0018      	movs	r0, r3
10051ca8:	f000 fbfc 	bl	100524a4 <USART_APP_EvtRx>
    break;
10051cac:	e0ef      	b.n	10051e8e <BLEEVT_App_Notification+0x292>
      p_meta_evt = (hci_le_meta_event*) p_event_pckt->data;
10051cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051cb0:	3302      	adds	r3, #2
10051cb2:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_meta_evt->subevent)
10051cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051cb6:	781b      	ldrb	r3, [r3, #0]
10051cb8:	2b0c      	cmp	r3, #12
10051cba:	d00b      	beq.n	10051cd4 <BLEEVT_App_Notification+0xd8>
10051cbc:	dc68      	bgt.n	10051d90 <BLEEVT_App_Notification+0x194>
10051cbe:	2b0a      	cmp	r3, #10
10051cc0:	d00e      	beq.n	10051ce0 <BLEEVT_App_Notification+0xe4>
10051cc2:	dc65      	bgt.n	10051d90 <BLEEVT_App_Notification+0x194>
10051cc4:	2b01      	cmp	r3, #1
10051cc6:	d037      	beq.n	10051d38 <BLEEVT_App_Notification+0x13c>
10051cc8:	2b03      	cmp	r3, #3
10051cca:	d161      	bne.n	10051d90 <BLEEVT_App_Notification+0x194>
          p_conn_update_complete = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
10051ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051cce:	3301      	adds	r3, #1
10051cd0:	61bb      	str	r3, [r7, #24]
        break;
10051cd2:	e05e      	b.n	10051d92 <BLEEVT_App_Notification+0x196>
          p_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
10051cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051cd6:	3301      	adds	r3, #1
10051cd8:	623b      	str	r3, [r7, #32]
          gap_cmd_resp_release();
10051cda:	f000 fa03 	bl	100520e4 <gap_cmd_resp_release>
        break;
10051cde:	e058      	b.n	10051d92 <BLEEVT_App_Notification+0x196>
          p_enhanced_conn_complete = (hci_le_enhanced_connection_complete_event_rp0 *) p_meta_evt->data;
10051ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051ce2:	3301      	adds	r3, #1
10051ce4:	61fb      	str	r3, [r7, #28]
          connection_complete_event(p_enhanced_conn_complete->Status,
10051ce6:	69fb      	ldr	r3, [r7, #28]
10051ce8:	781c      	ldrb	r4, [r3, #0]
10051cea:	69fb      	ldr	r3, [r7, #28]
10051cec:	785a      	ldrb	r2, [r3, #1]
10051cee:	789b      	ldrb	r3, [r3, #2]
10051cf0:	021b      	lsls	r3, r3, #8
10051cf2:	4313      	orrs	r3, r2
10051cf4:	b29d      	uxth	r5, r3
10051cf6:	69fb      	ldr	r3, [r7, #28]
10051cf8:	791e      	ldrb	r6, [r3, #4]
                                    p_enhanced_conn_complete->Peer_Address,
10051cfa:	69fb      	ldr	r3, [r7, #28]
10051cfc:	3305      	adds	r3, #5
10051cfe:	469c      	mov	ip, r3
          connection_complete_event(p_enhanced_conn_complete->Status,
10051d00:	69fb      	ldr	r3, [r7, #28]
10051d02:	7dda      	ldrb	r2, [r3, #23]
10051d04:	7e1b      	ldrb	r3, [r3, #24]
10051d06:	021b      	lsls	r3, r3, #8
10051d08:	4313      	orrs	r3, r2
10051d0a:	b29a      	uxth	r2, r3
10051d0c:	69fb      	ldr	r3, [r7, #28]
10051d0e:	7e59      	ldrb	r1, [r3, #25]
10051d10:	7e9b      	ldrb	r3, [r3, #26]
10051d12:	021b      	lsls	r3, r3, #8
10051d14:	430b      	orrs	r3, r1
10051d16:	b299      	uxth	r1, r3
10051d18:	69fb      	ldr	r3, [r7, #28]
10051d1a:	7ed8      	ldrb	r0, [r3, #27]
10051d1c:	7f1b      	ldrb	r3, [r3, #28]
10051d1e:	021b      	lsls	r3, r3, #8
10051d20:	4303      	orrs	r3, r0
10051d22:	b29b      	uxth	r3, r3
10051d24:	9302      	str	r3, [sp, #8]
10051d26:	9101      	str	r1, [sp, #4]
10051d28:	9200      	str	r2, [sp, #0]
10051d2a:	4663      	mov	r3, ip
10051d2c:	0032      	movs	r2, r6
10051d2e:	0029      	movs	r1, r5
10051d30:	0020      	movs	r0, r4
10051d32:	f000 f8bf 	bl	10051eb4 <connection_complete_event>
        break;
10051d36:	e02c      	b.n	10051d92 <BLEEVT_App_Notification+0x196>
          p_conn_complete = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
10051d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
10051d3a:	3301      	adds	r3, #1
10051d3c:	617b      	str	r3, [r7, #20]
          connection_complete_event(p_conn_complete->Status,
10051d3e:	697b      	ldr	r3, [r7, #20]
10051d40:	781c      	ldrb	r4, [r3, #0]
10051d42:	697b      	ldr	r3, [r7, #20]
10051d44:	785a      	ldrb	r2, [r3, #1]
10051d46:	789b      	ldrb	r3, [r3, #2]
10051d48:	021b      	lsls	r3, r3, #8
10051d4a:	4313      	orrs	r3, r2
10051d4c:	b29d      	uxth	r5, r3
10051d4e:	697b      	ldr	r3, [r7, #20]
10051d50:	791e      	ldrb	r6, [r3, #4]
                                    p_conn_complete->Peer_Address,
10051d52:	697b      	ldr	r3, [r7, #20]
10051d54:	3305      	adds	r3, #5
10051d56:	469c      	mov	ip, r3
          connection_complete_event(p_conn_complete->Status,
10051d58:	697b      	ldr	r3, [r7, #20]
10051d5a:	7ada      	ldrb	r2, [r3, #11]
10051d5c:	7b1b      	ldrb	r3, [r3, #12]
10051d5e:	021b      	lsls	r3, r3, #8
10051d60:	4313      	orrs	r3, r2
10051d62:	b29a      	uxth	r2, r3
10051d64:	697b      	ldr	r3, [r7, #20]
10051d66:	7b59      	ldrb	r1, [r3, #13]
10051d68:	7b9b      	ldrb	r3, [r3, #14]
10051d6a:	021b      	lsls	r3, r3, #8
10051d6c:	430b      	orrs	r3, r1
10051d6e:	b299      	uxth	r1, r3
10051d70:	697b      	ldr	r3, [r7, #20]
10051d72:	7bd8      	ldrb	r0, [r3, #15]
10051d74:	7c1b      	ldrb	r3, [r3, #16]
10051d76:	021b      	lsls	r3, r3, #8
10051d78:	4303      	orrs	r3, r0
10051d7a:	b29b      	uxth	r3, r3
10051d7c:	9302      	str	r3, [sp, #8]
10051d7e:	9101      	str	r1, [sp, #4]
10051d80:	9200      	str	r2, [sp, #0]
10051d82:	4663      	mov	r3, ip
10051d84:	0032      	movs	r2, r6
10051d86:	0029      	movs	r1, r5
10051d88:	0020      	movs	r0, r4
10051d8a:	f000 f893 	bl	10051eb4 <connection_complete_event>
        break;
10051d8e:	e000      	b.n	10051d92 <BLEEVT_App_Notification+0x196>
        break;
10051d90:	46c0      	nop			@ (mov r8, r8)
    break;
10051d92:	e07c      	b.n	10051e8e <BLEEVT_App_Notification+0x292>
      aci_blecore_event *p_blecore_evt = (aci_blecore_event*) event_data;
10051d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
10051d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      switch (p_blecore_evt->ecode)
10051d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051d9a:	781a      	ldrb	r2, [r3, #0]
10051d9c:	785b      	ldrb	r3, [r3, #1]
10051d9e:	021b      	lsls	r3, r3, #8
10051da0:	4313      	orrs	r3, r2
10051da2:	b29b      	uxth	r3, r3
10051da4:	4a3d      	ldr	r2, [pc, #244]	@ (10051e9c <BLEEVT_App_Notification+0x2a0>)
10051da6:	4293      	cmp	r3, r2
10051da8:	d03b      	beq.n	10051e22 <BLEEVT_App_Notification+0x226>
10051daa:	4a3c      	ldr	r2, [pc, #240]	@ (10051e9c <BLEEVT_App_Notification+0x2a0>)
10051dac:	4293      	cmp	r3, r2
10051dae:	dc5a      	bgt.n	10051e66 <BLEEVT_App_Notification+0x26a>
10051db0:	2280      	movs	r2, #128	@ 0x80
10051db2:	0112      	lsls	r2, r2, #4
10051db4:	4293      	cmp	r3, r2
10051db6:	d01c      	beq.n	10051df2 <BLEEVT_App_Notification+0x1f6>
10051db8:	2280      	movs	r2, #128	@ 0x80
10051dba:	0112      	lsls	r2, r2, #4
10051dbc:	4293      	cmp	r3, r2
10051dbe:	dc52      	bgt.n	10051e66 <BLEEVT_App_Notification+0x26a>
10051dc0:	4a37      	ldr	r2, [pc, #220]	@ (10051ea0 <BLEEVT_App_Notification+0x2a4>)
10051dc2:	4293      	cmp	r3, r2
10051dc4:	d051      	beq.n	10051e6a <BLEEVT_App_Notification+0x26e>
10051dc6:	4a36      	ldr	r2, [pc, #216]	@ (10051ea0 <BLEEVT_App_Notification+0x2a4>)
10051dc8:	4293      	cmp	r3, r2
10051dca:	dc4c      	bgt.n	10051e66 <BLEEVT_App_Notification+0x26a>
10051dcc:	4a35      	ldr	r2, [pc, #212]	@ (10051ea4 <BLEEVT_App_Notification+0x2a8>)
10051dce:	4293      	cmp	r3, r2
10051dd0:	d013      	beq.n	10051dfa <BLEEVT_App_Notification+0x1fe>
10051dd2:	2281      	movs	r2, #129	@ 0x81
10051dd4:	00d2      	lsls	r2, r2, #3
10051dd6:	4293      	cmp	r3, r2
10051dd8:	da45      	bge.n	10051e66 <BLEEVT_App_Notification+0x26a>
10051dda:	4a33      	ldr	r2, [pc, #204]	@ (10051ea8 <BLEEVT_App_Notification+0x2ac>)
10051ddc:	4293      	cmp	r3, r2
10051dde:	d010      	beq.n	10051e02 <BLEEVT_App_Notification+0x206>
10051de0:	4a31      	ldr	r2, [pc, #196]	@ (10051ea8 <BLEEVT_App_Notification+0x2ac>)
10051de2:	4293      	cmp	r3, r2
10051de4:	dc3f      	bgt.n	10051e66 <BLEEVT_App_Notification+0x26a>
10051de6:	2b04      	cmp	r3, #4
10051de8:	d041      	beq.n	10051e6e <BLEEVT_App_Notification+0x272>
10051dea:	4a30      	ldr	r2, [pc, #192]	@ (10051eac <BLEEVT_App_Notification+0x2b0>)
10051dec:	4293      	cmp	r3, r2
10051dee:	d014      	beq.n	10051e1a <BLEEVT_App_Notification+0x21e>
        break;
10051df0:	e039      	b.n	10051e66 <BLEEVT_App_Notification+0x26a>
          p_l2cap_conn_update_resp = (aci_l2cap_connection_update_resp_event_rp0 *) p_blecore_evt->data;
10051df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051df4:	3302      	adds	r3, #2
10051df6:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
10051df8:	e03a      	b.n	10051e70 <BLEEVT_App_Notification+0x274>
          p_gap_proc_complete = (aci_gap_proc_complete_event_rp0*) p_blecore_evt->data;
10051dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051dfc:	3302      	adds	r3, #2
10051dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
10051e00:	e036      	b.n	10051e70 <BLEEVT_App_Notification+0x274>
          ret = aci_gap_passkey_resp(bleAppContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
10051e02:	4b24      	ldr	r3, [pc, #144]	@ (10051e94 <BLEEVT_App_Notification+0x298>)
10051e04:	899b      	ldrh	r3, [r3, #12]
10051e06:	224b      	movs	r2, #75	@ 0x4b
10051e08:	18bc      	adds	r4, r7, r2
10051e0a:	4a29      	ldr	r2, [pc, #164]	@ (10051eb0 <BLEEVT_App_Notification+0x2b4>)
10051e0c:	0011      	movs	r1, r2
10051e0e:	0018      	movs	r0, r3
10051e10:	f7fd f9c7 	bl	1004f1a2 <aci_gap_passkey_resp>
10051e14:	0003      	movs	r3, r0
10051e16:	7023      	strb	r3, [r4, #0]
        break;
10051e18:	e02a      	b.n	10051e70 <BLEEVT_App_Notification+0x274>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
10051e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051e1c:	3302      	adds	r3, #2
10051e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
        break;
10051e20:	e026      	b.n	10051e70 <BLEEVT_App_Notification+0x274>
          p_read = (aci_gatt_srv_read_event_rp0*)p_blecore_evt->data;
10051e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10051e24:	3302      	adds	r3, #2
10051e26:	63bb      	str	r3, [r7, #56]	@ 0x38
          uint8_t error_code = BLE_ATT_ERR_INSUFF_AUTHORIZATION;
10051e28:	2437      	movs	r4, #55	@ 0x37
10051e2a:	193b      	adds	r3, r7, r4
10051e2c:	2208      	movs	r2, #8
10051e2e:	701a      	strb	r2, [r3, #0]
          aci_gatt_srv_resp(p_read->Connection_Handle,
10051e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10051e32:	781a      	ldrb	r2, [r3, #0]
10051e34:	785b      	ldrb	r3, [r3, #1]
10051e36:	021b      	lsls	r3, r3, #8
10051e38:	4313      	orrs	r3, r2
10051e3a:	b298      	uxth	r0, r3
10051e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10051e3e:	789a      	ldrb	r2, [r3, #2]
10051e40:	78db      	ldrb	r3, [r3, #3]
10051e42:	021b      	lsls	r3, r3, #8
10051e44:	4313      	orrs	r3, r2
10051e46:	b299      	uxth	r1, r3
10051e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
10051e4a:	791a      	ldrb	r2, [r3, #4]
10051e4c:	795b      	ldrb	r3, [r3, #5]
10051e4e:	021b      	lsls	r3, r3, #8
10051e50:	4313      	orrs	r3, r2
10051e52:	b29a      	uxth	r2, r3
10051e54:	193b      	adds	r3, r7, r4
10051e56:	781b      	ldrb	r3, [r3, #0]
10051e58:	2400      	movs	r4, #0
10051e5a:	9401      	str	r4, [sp, #4]
10051e5c:	2400      	movs	r4, #0
10051e5e:	9400      	str	r4, [sp, #0]
10051e60:	f7fd f9ec 	bl	1004f23c <aci_gatt_srv_resp>
          break;
10051e64:	e004      	b.n	10051e70 <BLEEVT_App_Notification+0x274>
        break;
10051e66:	46c0      	nop			@ (mov r8, r8)
10051e68:	e011      	b.n	10051e8e <BLEEVT_App_Notification+0x292>
        break;
10051e6a:	46c0      	nop			@ (mov r8, r8)
10051e6c:	e00f      	b.n	10051e8e <BLEEVT_App_Notification+0x292>
        break;
10051e6e:	46c0      	nop			@ (mov r8, r8)
    break;
10051e70:	e00d      	b.n	10051e8e <BLEEVT_App_Notification+0x292>
      p_hci_hardware_error_event = (hci_hardware_error_event_rp0*)p_event_pckt->data;
10051e72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
10051e74:	3302      	adds	r3, #2
10051e76:	613b      	str	r3, [r7, #16]
      if (p_hci_hardware_error_event->Hardware_Code <= 0x03)
10051e78:	693b      	ldr	r3, [r7, #16]
10051e7a:	781b      	ldrb	r3, [r3, #0]
10051e7c:	2b03      	cmp	r3, #3
10051e7e:	d805      	bhi.n	10051e8c <BLEEVT_App_Notification+0x290>
        NVIC_SystemReset();
10051e80:	f7ff fd42 	bl	10051908 <__NVIC_SystemReset>
    return;
10051e84:	46c0      	nop			@ (mov r8, r8)
10051e86:	e002      	b.n	10051e8e <BLEEVT_App_Notification+0x292>
    break;
10051e88:	46c0      	nop			@ (mov r8, r8)
10051e8a:	e000      	b.n	10051e8e <BLEEVT_App_Notification+0x292>
    break;
10051e8c:	46c0      	nop			@ (mov r8, r8)
  }
}
10051e8e:	46bd      	mov	sp, r7
10051e90:	b015      	add	sp, #84	@ 0x54
10051e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10051e94:	20002988 	.word	0x20002988
10051e98:	20002998 	.word	0x20002998
10051e9c:	00000c19 	.word	0x00000c19
10051ea0:	0000040a 	.word	0x0000040a
10051ea4:	00000407 	.word	0x00000407
10051ea8:	00000402 	.word	0x00000402
10051eac:	00000401 	.word	0x00000401
10051eb0:	0001b207 	.word	0x0001b207

10051eb4 <connection_complete_event>:
                                      uint8_t Peer_Address_Type,
                                      uint8_t Peer_Address[6],
                                      uint16_t Connection_Interval,
                                      uint16_t Peripheral_Latency,
                                      uint16_t Supervision_Timeout)
{
10051eb4:	b590      	push	{r4, r7, lr}
10051eb6:	b083      	sub	sp, #12
10051eb8:	af00      	add	r7, sp, #0
10051eba:	0004      	movs	r4, r0
10051ebc:	0008      	movs	r0, r1
10051ebe:	0011      	movs	r1, r2
10051ec0:	603b      	str	r3, [r7, #0]
10051ec2:	1dfb      	adds	r3, r7, #7
10051ec4:	1c22      	adds	r2, r4, #0
10051ec6:	701a      	strb	r2, [r3, #0]
10051ec8:	1d3b      	adds	r3, r7, #4
10051eca:	1c02      	adds	r2, r0, #0
10051ecc:	801a      	strh	r2, [r3, #0]
10051ece:	1dbb      	adds	r3, r7, #6
10051ed0:	1c0a      	adds	r2, r1, #0
10051ed2:	701a      	strb	r2, [r3, #0]
  if(Status != 0)
10051ed4:	1dfb      	adds	r3, r7, #7
10051ed6:	781b      	ldrb	r3, [r3, #0]
10051ed8:	2b00      	cmp	r3, #0
10051eda:	d003      	beq.n	10051ee4 <connection_complete_event+0x30>
  {
    APP_DBG_MSG("==>> connection_complete_event Fail, Status: 0x%02X\n", Status);
    bleAppContext.Device_Connection_Status = APP_BLE_IDLE;
10051edc:	4b10      	ldr	r3, [pc, #64]	@ (10051f20 <connection_complete_event+0x6c>)
10051ede:	2200      	movs	r2, #0
10051ee0:	739a      	strb	r2, [r3, #14]
    return;
10051ee2:	e019      	b.n	10051f18 <connection_complete_event+0x64>
              FRACTIONAL_2DIGITS(Connection_Interval*1.25),
              Peripheral_Latency,
              Supervision_Timeout * 10
              );

  if (bleAppContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
10051ee4:	4b0e      	ldr	r3, [pc, #56]	@ (10051f20 <connection_complete_event+0x6c>)
10051ee6:	7b9b      	ldrb	r3, [r3, #14]
10051ee8:	2b01      	cmp	r3, #1
10051eea:	d103      	bne.n	10051ef4 <connection_complete_event+0x40>
  {
    /* Connection as client */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
10051eec:	4b0c      	ldr	r3, [pc, #48]	@ (10051f20 <connection_complete_event+0x6c>)
10051eee:	2203      	movs	r2, #3
10051ef0:	739a      	strb	r2, [r3, #14]
10051ef2:	e002      	b.n	10051efa <connection_complete_event+0x46>
  }
  else
  {
    /* Connection as server */
    bleAppContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
10051ef4:	4b0a      	ldr	r3, [pc, #40]	@ (10051f20 <connection_complete_event+0x6c>)
10051ef6:	2202      	movs	r2, #2
10051ef8:	739a      	strb	r2, [r3, #14]
  }
  bleAppContext.BleApplicationContext_legacy.connectionHandle = Connection_Handle;
10051efa:	4b09      	ldr	r3, [pc, #36]	@ (10051f20 <connection_complete_event+0x6c>)
10051efc:	1d3a      	adds	r2, r7, #4
10051efe:	8812      	ldrh	r2, [r2, #0]
10051f00:	819a      	strh	r2, [r3, #12]

  USARTHandleNotification.EvtOpcode = USART_CONN_HANDLE_EVT;
10051f02:	4b08      	ldr	r3, [pc, #32]	@ (10051f24 <connection_complete_event+0x70>)
10051f04:	2200      	movs	r2, #0
10051f06:	701a      	strb	r2, [r3, #0]
  USARTHandleNotification.ConnectionHandle = Connection_Handle;
10051f08:	4b06      	ldr	r3, [pc, #24]	@ (10051f24 <connection_complete_event+0x70>)
10051f0a:	1d3a      	adds	r2, r7, #4
10051f0c:	8812      	ldrh	r2, [r2, #0]
10051f0e:	805a      	strh	r2, [r3, #2]
  USART_APP_EvtRx(&USARTHandleNotification);
10051f10:	4b04      	ldr	r3, [pc, #16]	@ (10051f24 <connection_complete_event+0x70>)
10051f12:	0018      	movs	r0, r3
10051f14:	f000 fac6 	bl	100524a4 <USART_APP_EvtRx>

  /* USER CODE BEGIN HCI_EVT_LE_CONN_COMPLETE */

  /* USER CODE END HCI_EVT_LE_CONN_COMPLETE */
}/* end hci_le_connection_complete_event() */
10051f18:	46bd      	mov	sp, r7
10051f1a:	b003      	add	sp, #12
10051f1c:	bd90      	pop	{r4, r7, pc}
10051f1e:	46c0      	nop			@ (mov r8, r8)
10051f20:	20002988 	.word	0x20002988
10051f24:	20002998 	.word	0x20002998

10051f28 <APP_BLE_Get_Server_Connection_Status>:
/* USER CODE BEGIN EVT_VENDOR_3 */

/* USER CODE END EVT_VENDOR_3 */

APP_BLE_ConnStatus_t APP_BLE_Get_Server_Connection_Status(void)
{
10051f28:	b580      	push	{r7, lr}
10051f2a:	af00      	add	r7, sp, #0
  return bleAppContext.Device_Connection_Status;
10051f2c:	4b02      	ldr	r3, [pc, #8]	@ (10051f38 <APP_BLE_Get_Server_Connection_Status+0x10>)
10051f2e:	7b9b      	ldrb	r3, [r3, #14]
}
10051f30:	0018      	movs	r0, r3
10051f32:	46bd      	mov	sp, r7
10051f34:	bd80      	pop	{r7, pc}
10051f36:	46c0      	nop			@ (mov r8, r8)
10051f38:	20002988 	.word	0x20002988

10051f3c <APP_BLE_Procedure_Gap_Peripheral>:
  }
  return;
}

void APP_BLE_Procedure_Gap_Peripheral(ProcGapPeripheralId_t ProcGapPeripheralId)
{
10051f3c:	b5b0      	push	{r4, r5, r7, lr}
10051f3e:	b094      	sub	sp, #80	@ 0x50
10051f40:	af0c      	add	r7, sp, #48	@ 0x30
10051f42:	0002      	movs	r2, r0
10051f44:	1dfb      	adds	r3, r7, #7
10051f46:	701a      	strb	r2, [r3, #0]
  tBleStatus status;
  uint32_t paramA = ADV_INTERVAL_MIN;
10051f48:	2380      	movs	r3, #128	@ 0x80
10051f4a:	61fb      	str	r3, [r7, #28]
  uint32_t paramB = ADV_INTERVAL_MAX;
10051f4c:	23a0      	movs	r3, #160	@ 0xa0
10051f4e:	61bb      	str	r3, [r7, #24]
  uint32_t paramC, paramD;

  /* First set parameters before calling ACI APIs, only if needed */
  switch(ProcGapPeripheralId)
10051f50:	1dfb      	adds	r3, r7, #7
10051f52:	781b      	ldrb	r3, [r3, #0]
10051f54:	2b05      	cmp	r3, #5
10051f56:	d834      	bhi.n	10051fc2 <APP_BLE_Procedure_Gap_Peripheral+0x86>
10051f58:	009a      	lsls	r2, r3, #2
10051f5a:	4b5f      	ldr	r3, [pc, #380]	@ (100520d8 <APP_BLE_Procedure_Gap_Peripheral+0x19c>)
10051f5c:	18d3      	adds	r3, r2, r3
10051f5e:	681b      	ldr	r3, [r3, #0]
10051f60:	469f      	mov	pc, r3
  {
    case PROC_GAP_PERIPH_ADVERTISE_START_FAST:
    {
      paramA = ADV_INTERVAL_MIN;
10051f62:	2380      	movs	r3, #128	@ 0x80
10051f64:	61fb      	str	r3, [r7, #28]
      paramB = ADV_INTERVAL_MAX;
10051f66:	23a0      	movs	r3, #160	@ 0xa0
10051f68:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_FAST;
10051f6a:	2304      	movs	r3, #4
10051f6c:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_FAST */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_FAST */
      break;
10051f6e:	e02b      	b.n	10051fc8 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_FAST */
    case PROC_GAP_PERIPH_ADVERTISE_START_LP:
    {
      paramA = ADV_LP_INTERVAL_MIN;
10051f70:	23c8      	movs	r3, #200	@ 0xc8
10051f72:	00db      	lsls	r3, r3, #3
10051f74:	61fb      	str	r3, [r7, #28]
      paramB = ADV_LP_INTERVAL_MAX;
10051f76:	23fa      	movs	r3, #250	@ 0xfa
10051f78:	011b      	lsls	r3, r3, #4
10051f7a:	61bb      	str	r3, [r7, #24]
      paramC = APP_BLE_ADV_LP;
10051f7c:	2305      	movs	r3, #5
10051f7e:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_START_LP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_START_LP */
      break;
10051f80:	e022      	b.n	10051fc8 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_START_LP */
    case PROC_GAP_PERIPH_ADVERTISE_STOP:
    {
      paramC = APP_BLE_IDLE;
10051f82:	2300      	movs	r3, #0
10051f84:	617b      	str	r3, [r7, #20]

      /* USER CODE BEGIN PROC_GAP_PERIPH_ADVERTISE_STOP */

      /* USER CODE END PROC_GAP_PERIPH_ADVERTISE_STOP */
      break;
10051f86:	e01f      	b.n	10051fc8 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_ADVERTISE_STOP */
    case PROC_GAP_PERIPH_CONN_PARAM_UPDATE:
    {
      paramA = CONN_INT_MS(1000);
10051f88:	23c8      	movs	r3, #200	@ 0xc8
10051f8a:	009b      	lsls	r3, r3, #2
10051f8c:	61fb      	str	r3, [r7, #28]
      paramB = CONN_INT_MS(1000);
10051f8e:	23c8      	movs	r3, #200	@ 0xc8
10051f90:	009b      	lsls	r3, r3, #2
10051f92:	61bb      	str	r3, [r7, #24]
      paramC = 0x0000;
10051f94:	2300      	movs	r3, #0
10051f96:	617b      	str	r3, [r7, #20]
      paramD = 0x01F4;
10051f98:	23fa      	movs	r3, #250	@ 0xfa
10051f9a:	005b      	lsls	r3, r3, #1
10051f9c:	613b      	str	r3, [r7, #16]

      /* USER CODE BEGIN CONN_PARAM_UPDATE */

      /* USER CODE END CONN_PARAM_UPDATE */
      break;
10051f9e:	e013      	b.n	10051fc8 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
    }/* PROC_GAP_PERIPH_CONN_PARAM_UPDATE */
    case PROC_GAP_PERIPH_CONN_TERMINATE:
    {
      status = aci_gap_terminate(bleAppContext.BleApplicationContext_legacy.connectionHandle, 0x13);
10051fa0:	4b4e      	ldr	r3, [pc, #312]	@ (100520dc <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
10051fa2:	899b      	ldrh	r3, [r3, #12]
10051fa4:	250f      	movs	r5, #15
10051fa6:	197c      	adds	r4, r7, r5
10051fa8:	2113      	movs	r1, #19
10051faa:	0018      	movs	r0, r3
10051fac:	f7fd f8a4 	bl	1004f0f8 <aci_gap_terminate>
10051fb0:	0003      	movs	r3, r0
10051fb2:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10051fb4:	197b      	adds	r3, r7, r5
10051fb6:	781b      	ldrb	r3, [r3, #0]
10051fb8:	2b00      	cmp	r3, #0
10051fba:	d104      	bne.n	10051fc6 <APP_BLE_Procedure_Gap_Peripheral+0x8a>
         APP_DBG_MSG("aci_gap_terminate failure: reason=0x%02X\n", status);
      }
      else
      {
        APP_DBG_MSG("==>> aci_gap_terminate : Success\n");
        gap_cmd_resp_wait();/* waiting for HCI_DISCONNECTION_COMPLETE_EVT_CODE */
10051fbc:	f000 f89a 	bl	100520f4 <gap_cmd_resp_wait>
      }
      break;
10051fc0:	e001      	b.n	10051fc6 <APP_BLE_Procedure_Gap_Peripheral+0x8a>
    /* PROC_GAP_PERIPH_CONN_TERMINATE */
    /* USER CODE BEGIN GAP_PERIPHERAL_1 */

    /* USER CODE END GAP_PERIPHERAL_1 */
    default:
      break;
10051fc2:	46c0      	nop			@ (mov r8, r8)
10051fc4:	e000      	b.n	10051fc8 <APP_BLE_Procedure_Gap_Peripheral+0x8c>
      break;
10051fc6:	46c0      	nop			@ (mov r8, r8)
  }

  /* Call ACI APIs */
  switch(ProcGapPeripheralId)
10051fc8:	1dfb      	adds	r3, r7, #7
10051fca:	781b      	ldrb	r3, [r3, #0]
10051fcc:	2b06      	cmp	r3, #6
10051fce:	d100      	bne.n	10051fd2 <APP_BLE_Procedure_Gap_Peripheral+0x96>
10051fd0:	e078      	b.n	100520c4 <APP_BLE_Procedure_Gap_Peripheral+0x188>
10051fd2:	dd00      	ble.n	10051fd6 <APP_BLE_Procedure_Gap_Peripheral+0x9a>
10051fd4:	e078      	b.n	100520c8 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
10051fd6:	2b04      	cmp	r3, #4
10051fd8:	d061      	beq.n	1005209e <APP_BLE_Procedure_Gap_Peripheral+0x162>
10051fda:	dd00      	ble.n	10051fde <APP_BLE_Procedure_Gap_Peripheral+0xa2>
10051fdc:	e074      	b.n	100520c8 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
10051fde:	2b01      	cmp	r3, #1
10051fe0:	dc02      	bgt.n	10051fe8 <APP_BLE_Procedure_Gap_Peripheral+0xac>
10051fe2:	2b00      	cmp	r3, #0
10051fe4:	da03      	bge.n	10051fee <APP_BLE_Procedure_Gap_Peripheral+0xb2>
    }/* PROC_GAP_PERIPH_SET_BROADCAST_MODE */
    /* USER CODE BEGIN GAP_PERIPHERAL_2 */

    /* USER CODE END GAP_PERIPHERAL_2 */
    default:
      break;
10051fe6:	e06f      	b.n	100520c8 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
  switch(ProcGapPeripheralId)
10051fe8:	2b02      	cmp	r3, #2
10051fea:	d046      	beq.n	1005207a <APP_BLE_Procedure_Gap_Peripheral+0x13e>
      break;
10051fec:	e06c      	b.n	100520c8 <APP_BLE_Procedure_Gap_Peripheral+0x18c>
      Advertising_Set_Parameters_t Advertising_Set_Parameters = {0};
10051fee:	2308      	movs	r3, #8
10051ff0:	18fb      	adds	r3, r7, r3
10051ff2:	0018      	movs	r0, r3
10051ff4:	2306      	movs	r3, #6
10051ff6:	001a      	movs	r2, r3
10051ff8:	2100      	movs	r1, #0
10051ffa:	f015 fdb3 	bl	10067b64 <memset>
      status = aci_gap_set_advertising_configuration(0,
10051ffe:	250f      	movs	r5, #15
10052000:	197c      	adds	r4, r7, r5
10052002:	69fa      	ldr	r2, [r7, #28]
10052004:	2300      	movs	r3, #0
10052006:	930a      	str	r3, [sp, #40]	@ 0x28
10052008:	2300      	movs	r3, #0
1005200a:	9309      	str	r3, [sp, #36]	@ 0x24
1005200c:	2301      	movs	r3, #1
1005200e:	9308      	str	r3, [sp, #32]
10052010:	2300      	movs	r3, #0
10052012:	9307      	str	r3, [sp, #28]
10052014:	2301      	movs	r3, #1
10052016:	9306      	str	r3, [sp, #24]
10052018:	2300      	movs	r3, #0
1005201a:	9305      	str	r3, [sp, #20]
1005201c:	2300      	movs	r3, #0
1005201e:	9304      	str	r3, [sp, #16]
10052020:	2300      	movs	r3, #0
10052022:	9303      	str	r3, [sp, #12]
10052024:	2300      	movs	r3, #0
10052026:	9302      	str	r3, [sp, #8]
10052028:	2307      	movs	r3, #7
1005202a:	9301      	str	r3, [sp, #4]
1005202c:	69bb      	ldr	r3, [r7, #24]
1005202e:	9300      	str	r3, [sp, #0]
10052030:	0013      	movs	r3, r2
10052032:	2213      	movs	r2, #19
10052034:	2102      	movs	r1, #2
10052036:	2000      	movs	r0, #0
10052038:	f002 fc06 	bl	10054848 <aci_gap_set_advertising_configuration>
1005203c:	0003      	movs	r3, r0
1005203e:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
10052040:	197b      	adds	r3, r7, r5
10052042:	781b      	ldrb	r3, [r3, #0]
10052044:	2b00      	cmp	r3, #0
10052046:	d103      	bne.n	10052050 <APP_BLE_Procedure_Gap_Peripheral+0x114>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10052048:	697b      	ldr	r3, [r7, #20]
1005204a:	b2da      	uxtb	r2, r3
1005204c:	4b23      	ldr	r3, [pc, #140]	@ (100520dc <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1005204e:	739a      	strb	r2, [r3, #14]
      status = aci_gap_set_advertising_data(0, ADV_COMPLETE_DATA, sizeof(a_AdvData), (uint8_t*) a_AdvData);
10052050:	250f      	movs	r5, #15
10052052:	197c      	adds	r4, r7, r5
10052054:	4b22      	ldr	r3, [pc, #136]	@ (100520e0 <APP_BLE_Procedure_Gap_Peripheral+0x1a4>)
10052056:	2210      	movs	r2, #16
10052058:	2103      	movs	r1, #3
1005205a:	2000      	movs	r0, #0
1005205c:	f002 fc29 	bl	100548b2 <aci_gap_set_advertising_data>
10052060:	0003      	movs	r3, r0
10052062:	7023      	strb	r3, [r4, #0]
      status = aci_gap_set_advertising_enable(ENABLE, 1, &Advertising_Set_Parameters);
10052064:	197c      	adds	r4, r7, r5
10052066:	2308      	movs	r3, #8
10052068:	18fb      	adds	r3, r7, r3
1005206a:	001a      	movs	r2, r3
1005206c:	2101      	movs	r1, #1
1005206e:	2001      	movs	r0, #1
10052070:	f002 fc23 	bl	100548ba <aci_gap_set_advertising_enable>
10052074:	0003      	movs	r3, r0
10052076:	7023      	strb	r3, [r4, #0]
      break;
10052078:	e029      	b.n	100520ce <APP_BLE_Procedure_Gap_Peripheral+0x192>
      status = aci_gap_set_advertising_enable(DISABLE, 0, NULL);
1005207a:	250f      	movs	r5, #15
1005207c:	197c      	adds	r4, r7, r5
1005207e:	2200      	movs	r2, #0
10052080:	2100      	movs	r1, #0
10052082:	2000      	movs	r0, #0
10052084:	f002 fc19 	bl	100548ba <aci_gap_set_advertising_enable>
10052088:	0003      	movs	r3, r0
1005208a:	7023      	strb	r3, [r4, #0]
      if (status != BLE_STATUS_SUCCESS)
1005208c:	197b      	adds	r3, r7, r5
1005208e:	781b      	ldrb	r3, [r3, #0]
10052090:	2b00      	cmp	r3, #0
10052092:	d11b      	bne.n	100520cc <APP_BLE_Procedure_Gap_Peripheral+0x190>
        bleAppContext.Device_Connection_Status = (APP_BLE_ConnStatus_t)paramC;
10052094:	697b      	ldr	r3, [r7, #20]
10052096:	b2da      	uxtb	r2, r3
10052098:	4b10      	ldr	r3, [pc, #64]	@ (100520dc <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
1005209a:	739a      	strb	r2, [r3, #14]
      break;
1005209c:	e016      	b.n	100520cc <APP_BLE_Procedure_Gap_Peripheral+0x190>
       status = aci_l2cap_connection_parameter_update_req(
1005209e:	4b0f      	ldr	r3, [pc, #60]	@ (100520dc <APP_BLE_Procedure_Gap_Peripheral+0x1a0>)
100520a0:	8998      	ldrh	r0, [r3, #12]
100520a2:	69fb      	ldr	r3, [r7, #28]
100520a4:	b299      	uxth	r1, r3
100520a6:	69bb      	ldr	r3, [r7, #24]
100520a8:	b29a      	uxth	r2, r3
100520aa:	697b      	ldr	r3, [r7, #20]
100520ac:	b29d      	uxth	r5, r3
100520ae:	693b      	ldr	r3, [r7, #16]
100520b0:	b29b      	uxth	r3, r3
100520b2:	240f      	movs	r4, #15
100520b4:	193c      	adds	r4, r7, r4
100520b6:	9300      	str	r3, [sp, #0]
100520b8:	002b      	movs	r3, r5
100520ba:	f7fd f8e8 	bl	1004f28e <aci_l2cap_connection_parameter_update_req>
100520be:	0003      	movs	r3, r0
100520c0:	7023      	strb	r3, [r4, #0]
      break;
100520c2:	e004      	b.n	100520ce <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
100520c4:	46c0      	nop			@ (mov r8, r8)
100520c6:	e002      	b.n	100520ce <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
100520c8:	46c0      	nop			@ (mov r8, r8)
100520ca:	e000      	b.n	100520ce <APP_BLE_Procedure_Gap_Peripheral+0x192>
      break;
100520cc:	46c0      	nop			@ (mov r8, r8)
  }
  return;
100520ce:	46c0      	nop			@ (mov r8, r8)
}
100520d0:	46bd      	mov	sp, r7
100520d2:	b008      	add	sp, #32
100520d4:	bdb0      	pop	{r4, r5, r7, pc}
100520d6:	46c0      	nop			@ (mov r8, r8)
100520d8:	100695c8 	.word	0x100695c8
100520dc:	20002988 	.word	0x20002988
100520e0:	20002e1c 	.word	0x20002e1c

100520e4 <gap_cmd_resp_release>:
/* USER CODE BEGIN FD*/

/* USER CODE END FD*/

static void gap_cmd_resp_release(void)
{
100520e4:	b580      	push	{r7, lr}
100520e6:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
100520e8:	2001      	movs	r0, #1
100520ea:	f002 fa95 	bl	10054618 <UTIL_SEQ_SetEvt>
  return;
100520ee:	46c0      	nop			@ (mov r8, r8)
}
100520f0:	46bd      	mov	sp, r7
100520f2:	bd80      	pop	{r7, pc}

100520f4 <gap_cmd_resp_wait>:

static void gap_cmd_resp_wait(void)
{
100520f4:	b580      	push	{r7, lr}
100520f6:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_PROC_GAP_COMPLETE);
100520f8:	2001      	movs	r0, #1
100520fa:	f002 faab 	bl	10054654 <UTIL_SEQ_WaitEvt>
  return;
100520fe:	46c0      	nop			@ (mov r8, r8)
}
10052100:	46bd      	mov	sp, r7
10052102:	bd80      	pop	{r7, pc}

10052104 <USART_EventHandler>:
 * @brief  Event handler
 * @param  p_Event: Address of the buffer holding the p_Event
 * @retval Ack: Return whether the p_Event has been managed or not
 */
static BLEEVT_EvtAckStatus_t USART_EventHandler(aci_blecore_event *p_evt)
{
10052104:	b580      	push	{r7, lr}
10052106:	b08e      	sub	sp, #56	@ 0x38
10052108:	af00      	add	r7, sp, #0
1005210a:	6078      	str	r0, [r7, #4]
  BLEEVT_EvtAckStatus_t return_value = BLEEVT_NoAck;
1005210c:	2337      	movs	r3, #55	@ 0x37
1005210e:	18fb      	adds	r3, r7, r3
10052110:	2200      	movs	r2, #0
10052112:	701a      	strb	r2, [r3, #0]
  USART_NotificationEvt_t notification;
  /* USER CODE BEGIN Service1_EventHandler_1 */

  /* USER CODE END Service1_EventHandler_1 */

  switch(p_evt->ecode)
10052114:	687b      	ldr	r3, [r7, #4]
10052116:	781a      	ldrb	r2, [r3, #0]
10052118:	785b      	ldrb	r3, [r3, #1]
1005211a:	021b      	lsls	r3, r3, #8
1005211c:	4313      	orrs	r3, r2
1005211e:	b29b      	uxth	r3, r3
10052120:	4a62      	ldr	r2, [pc, #392]	@ (100522ac <USART_EventHandler+0x1a8>)
10052122:	4694      	mov	ip, r2
10052124:	4463      	add	r3, ip
10052126:	2b19      	cmp	r3, #25
10052128:	d900      	bls.n	1005212c <USART_EventHandler+0x28>
1005212a:	e0b1      	b.n	10052290 <USART_EventHandler+0x18c>
1005212c:	009a      	lsls	r2, r3, #2
1005212e:	4b60      	ldr	r3, [pc, #384]	@ (100522b0 <USART_EventHandler+0x1ac>)
10052130:	18d3      	adds	r3, r2, r3
10052132:	681b      	ldr	r3, [r3, #0]
10052134:	469f      	mov	pc, r3
    case ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
      p_attribute_modified = (aci_gatt_srv_attribute_modified_event_rp0*)p_evt->data;
10052136:	687b      	ldr	r3, [r7, #4]
10052138:	3302      	adds	r3, #2
1005213a:	623b      	str	r3, [r7, #32]
      notification.ConnectionHandle         = p_attribute_modified->Connection_Handle;
1005213c:	6a3b      	ldr	r3, [r7, #32]
1005213e:	781a      	ldrb	r2, [r3, #0]
10052140:	785b      	ldrb	r3, [r3, #1]
10052142:	021b      	lsls	r3, r3, #8
10052144:	4313      	orrs	r3, r2
10052146:	b29a      	uxth	r2, r3
10052148:	210c      	movs	r1, #12
1005214a:	187b      	adds	r3, r7, r1
1005214c:	819a      	strh	r2, [r3, #12]
      notification.AttributeHandle          = p_attribute_modified->Attr_Handle;
1005214e:	6a3b      	ldr	r3, [r7, #32]
10052150:	791a      	ldrb	r2, [r3, #4]
10052152:	795b      	ldrb	r3, [r3, #5]
10052154:	021b      	lsls	r3, r3, #8
10052156:	4313      	orrs	r3, r2
10052158:	b29a      	uxth	r2, r3
1005215a:	187b      	adds	r3, r7, r1
1005215c:	81da      	strh	r2, [r3, #14]
      notification.DataTransfered.Length    = p_attribute_modified->Attr_Data_Length;
1005215e:	6a3b      	ldr	r3, [r7, #32]
10052160:	799a      	ldrb	r2, [r3, #6]
10052162:	79db      	ldrb	r3, [r3, #7]
10052164:	021b      	lsls	r3, r3, #8
10052166:	4313      	orrs	r3, r2
10052168:	b29b      	uxth	r3, r3
1005216a:	b2da      	uxtb	r2, r3
1005216c:	187b      	adds	r3, r7, r1
1005216e:	721a      	strb	r2, [r3, #8]
      notification.DataTransfered.p_Payload = p_attribute_modified->Attr_Data;
10052170:	6a3b      	ldr	r3, [r7, #32]
10052172:	3308      	adds	r3, #8
10052174:	001a      	movs	r2, r3
10052176:	187b      	adds	r3, r7, r1
10052178:	605a      	str	r2, [r3, #4]
      if(p_attribute_modified->Attr_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1005217a:	6a3b      	ldr	r3, [r7, #32]
1005217c:	791a      	ldrb	r2, [r3, #4]
1005217e:	795b      	ldrb	r3, [r3, #5]
10052180:	021b      	lsls	r3, r3, #8
10052182:	4313      	orrs	r3, r2
10052184:	b29b      	uxth	r3, r3
10052186:	001a      	movs	r2, r3
10052188:	4b4a      	ldr	r3, [pc, #296]	@ (100522b4 <USART_EventHandler+0x1b0>)
1005218a:	889b      	ldrh	r3, [r3, #4]
1005218c:	3301      	adds	r3, #1
1005218e:	429a      	cmp	r2, r3
10052190:	d10b      	bne.n	100521aa <USART_EventHandler+0xa6>
      {
        return_value = BLEEVT_Ack;
10052192:	2337      	movs	r3, #55	@ 0x37
10052194:	18fb      	adds	r3, r7, r3
10052196:	2201      	movs	r2, #1
10052198:	701a      	strb	r2, [r3, #0]

        notification.EvtOpcode = USART_RX_WRITE_NO_RESP_EVT;
1005219a:	187b      	adds	r3, r7, r1
1005219c:	2201      	movs	r2, #1
1005219e:	701a      	strb	r2, [r3, #0]
        /* USER CODE BEGIN Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

        /* USER CODE END Service1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
        USART_Notification(&notification);
100521a0:	187b      	adds	r3, r7, r1
100521a2:	0018      	movs	r0, r3
100521a4:	f000 f914 	bl	100523d0 <USART_Notification>
      } /* if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

      /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
100521a8:	e074      	b.n	10052294 <USART_EventHandler+0x190>
      else if(p_attribute_modified->Attr_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100521aa:	6a3b      	ldr	r3, [r7, #32]
100521ac:	791a      	ldrb	r2, [r3, #4]
100521ae:	795b      	ldrb	r3, [r3, #5]
100521b0:	021b      	lsls	r3, r3, #8
100521b2:	4313      	orrs	r3, r2
100521b4:	b29b      	uxth	r3, r3
100521b6:	001a      	movs	r2, r3
100521b8:	4b3e      	ldr	r3, [pc, #248]	@ (100522b4 <USART_EventHandler+0x1b0>)
100521ba:	88db      	ldrh	r3, [r3, #6]
100521bc:	3301      	adds	r3, #1
100521be:	429a      	cmp	r2, r3
100521c0:	d168      	bne.n	10052294 <USART_EventHandler+0x190>
        return_value = BLEEVT_Ack;
100521c2:	2337      	movs	r3, #55	@ 0x37
100521c4:	18fb      	adds	r3, r7, r3
100521c6:	2201      	movs	r2, #1
100521c8:	701a      	strb	r2, [r3, #0]
        notification.EvtOpcode = USART_REQ_TX_WRITE_EVT;
100521ca:	210c      	movs	r1, #12
100521cc:	187b      	adds	r3, r7, r1
100521ce:	2203      	movs	r2, #3
100521d0:	701a      	strb	r2, [r3, #0]
        USART_Notification(&notification);
100521d2:	187b      	adds	r3, r7, r1
100521d4:	0018      	movs	r0, r3
100521d6:	f000 f8fb 	bl	100523d0 <USART_Notification>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
100521da:	e05b      	b.n	10052294 <USART_EventHandler+0x190>
    case ACI_GATT_SRV_READ_VSEVT_CODE :
    {
      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_BEGIN */

      /* USER CODE END EVT_BLUE_GATT_SRV_READ_BEGIN */
      p_read = (aci_gatt_srv_read_event_rp0*)p_evt->data;
100521dc:	687b      	ldr	r3, [r7, #4]
100521de:	3302      	adds	r3, #2
100521e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if(p_read->Attribute_Handle == (USART_Context.TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
100521e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
100521e4:	791a      	ldrb	r2, [r3, #4]
100521e6:	795b      	ldrb	r3, [r3, #5]
100521e8:	021b      	lsls	r3, r3, #8
100521ea:	4313      	orrs	r3, r2
100521ec:	b29b      	uxth	r3, r3
100521ee:	001a      	movs	r2, r3
100521f0:	4b30      	ldr	r3, [pc, #192]	@ (100522b4 <USART_EventHandler+0x1b0>)
100521f2:	885b      	ldrh	r3, [r3, #2]
100521f4:	3301      	adds	r3, #1
100521f6:	429a      	cmp	r2, r3
100521f8:	d10c      	bne.n	10052214 <USART_EventHandler+0x110>
	  {
		return_value = BLEEVT_Ack;
100521fa:	2337      	movs	r3, #55	@ 0x37
100521fc:	18fb      	adds	r3, r7, r3
100521fe:	2201      	movs	r2, #1
10052200:	701a      	strb	r2, [r3, #0]
		/*USER CODE BEGIN Service1_Char_1_ACI_GATT_SRV_READ_VSEVT_CODE_1 */
		notification.EvtOpcode = USART_TX_READ_EVT;
10052202:	210c      	movs	r1, #12
10052204:	187b      	adds	r3, r7, r1
10052206:	2200      	movs	r2, #0
10052208:	701a      	strb	r2, [r3, #0]
		USART_Notification(&notification);
1005220a:	187b      	adds	r3, r7, r1
1005220c:	0018      	movs	r0, r3
1005220e:	f000 f8df 	bl	100523d0 <USART_Notification>
	  } /* if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_READ_END */

      /* USER CODE END EVT_EVT_BLUE_GATT_SRV_READ_END */
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052212:	e041      	b.n	10052298 <USART_EventHandler+0x194>
	  else if(p_read->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
10052214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
10052216:	791a      	ldrb	r2, [r3, #4]
10052218:	795b      	ldrb	r3, [r3, #5]
1005221a:	021b      	lsls	r3, r3, #8
1005221c:	4313      	orrs	r3, r2
1005221e:	b29b      	uxth	r3, r3
10052220:	001a      	movs	r2, r3
10052222:	4b24      	ldr	r3, [pc, #144]	@ (100522b4 <USART_EventHandler+0x1b0>)
10052224:	88db      	ldrh	r3, [r3, #6]
10052226:	3301      	adds	r3, #1
10052228:	429a      	cmp	r2, r3
1005222a:	d135      	bne.n	10052298 <USART_EventHandler+0x194>
		return_value = BLEEVT_Ack;
1005222c:	2337      	movs	r3, #55	@ 0x37
1005222e:	18fb      	adds	r3, r7, r3
10052230:	2201      	movs	r2, #1
10052232:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052234:	e030      	b.n	10052298 <USART_EventHandler+0x194>
    case ACI_GATT_SRV_WRITE_VSEVT_CODE:
    {
      /* USER CODE BEGIN EVT_BLUE_SRV_GATT_BEGIN */

      /* USER CODE END EVT_BLUE_SRV_GATT_BEGIN */
      p_write = (aci_gatt_srv_write_event_rp0*)p_evt->data;
10052236:	687b      	ldr	r3, [r7, #4]
10052238:	3302      	adds	r3, #2
1005223a:	633b      	str	r3, [r7, #48]	@ 0x30
      if(p_write->Attribute_Handle == (USART_Context.RxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1005223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
1005223e:	795a      	ldrb	r2, [r3, #5]
10052240:	799b      	ldrb	r3, [r3, #6]
10052242:	021b      	lsls	r3, r3, #8
10052244:	4313      	orrs	r3, r2
10052246:	b29b      	uxth	r3, r3
10052248:	001a      	movs	r2, r3
1005224a:	4b1a      	ldr	r3, [pc, #104]	@ (100522b4 <USART_EventHandler+0x1b0>)
1005224c:	889b      	ldrh	r3, [r3, #4]
1005224e:	3301      	adds	r3, #1
10052250:	429a      	cmp	r2, r3
10052252:	d104      	bne.n	1005225e <USART_EventHandler+0x15a>
      {
        return_value = BLEEVT_Ack;
10052254:	2337      	movs	r3, #55	@ 0x37
10052256:	18fb      	adds	r3, r7, r3
10052258:	2201      	movs	r2, #1
1005225a:	701a      	strb	r2, [r3, #0]
      } /*if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

      /* USER CODE BEGIN EVT_BLUE_GATT_SRV_WRITE_END */

      /* USER CODE END EVT_BLUE_GATT_SRV_WRITE_END */
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1005225c:	e01e      	b.n	1005229c <USART_EventHandler+0x198>
      else if(p_write->Attribute_Handle == (USART_Context.Req_TxCharHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
1005225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
10052260:	795a      	ldrb	r2, [r3, #5]
10052262:	799b      	ldrb	r3, [r3, #6]
10052264:	021b      	lsls	r3, r3, #8
10052266:	4313      	orrs	r3, r2
10052268:	b29b      	uxth	r3, r3
1005226a:	001a      	movs	r2, r3
1005226c:	4b11      	ldr	r3, [pc, #68]	@ (100522b4 <USART_EventHandler+0x1b0>)
1005226e:	88db      	ldrh	r3, [r3, #6]
10052270:	3301      	adds	r3, #1
10052272:	429a      	cmp	r2, r3
10052274:	d112      	bne.n	1005229c <USART_EventHandler+0x198>
        return_value = BLEEVT_Ack;
10052276:	2337      	movs	r3, #55	@ 0x37
10052278:	18fb      	adds	r3, r7, r3
1005227a:	2201      	movs	r2, #1
1005227c:	701a      	strb	r2, [r3, #0]
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1005227e:	e00d      	b.n	1005229c <USART_EventHandler+0x198>
    }
    case ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE:
    {
      aci_gatt_tx_pool_available_event_rp0 *p_tx_pool_available_event;
      p_tx_pool_available_event = (aci_gatt_tx_pool_available_event_rp0 *) p_evt->data;
10052280:	687b      	ldr	r3, [r7, #4]
10052282:	3302      	adds	r3, #2
10052284:	62bb      	str	r3, [r7, #40]	@ 0x28
      UNUSED(p_tx_pool_available_event);

      /* USER CODE BEGIN ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */

      /* USER CODE END ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE */
      break;/* ACI_GATT_TX_POOL_AVAILABLE_VSEVT_CODE*/
10052286:	e00a      	b.n	1005229e <USART_EventHandler+0x19a>
    }
    case ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE:
    {
      aci_att_exchange_mtu_resp_event_rp0 *p_exchange_mtu;
      p_exchange_mtu = (aci_att_exchange_mtu_resp_event_rp0 *)  p_evt->data;
10052288:	687b      	ldr	r3, [r7, #4]
1005228a:	3302      	adds	r3, #2
1005228c:	627b      	str	r3, [r7, #36]	@ 0x24
      UNUSED(p_exchange_mtu);

      /* USER CODE BEGIN ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */

      /* USER CODE END ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
      break;/* ACI_ATT_EXCHANGE_MTU_RESP_VSEVT_CODE */
1005228e:	e006      	b.n	1005229e <USART_EventHandler+0x19a>
    /* USER CODE END BLECORE_EVT */
  default:
    /* USER CODE BEGIN EVT_DEFAULT */

    /* USER CODE END EVT_DEFAULT */
    break;
10052290:	46c0      	nop			@ (mov r8, r8)
10052292:	e004      	b.n	1005229e <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_ATTRIBUTE_MODIFIED_VSEVT_CODE */
10052294:	46c0      	nop			@ (mov r8, r8)
10052296:	e002      	b.n	1005229e <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_READ_VSEVT_CODE */
10052298:	46c0      	nop			@ (mov r8, r8)
1005229a:	e000      	b.n	1005229e <USART_EventHandler+0x19a>
      break;/* ACI_GATT_SRV_WRITE_VSEVT_CODE */
1005229c:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_EventHandler_2 */

  /* USER CODE END Service1_EventHandler_2 */

  return(return_value);
1005229e:	2337      	movs	r3, #55	@ 0x37
100522a0:	18fb      	adds	r3, r7, r3
100522a2:	781b      	ldrb	r3, [r3, #0]
}/* end USART_EventHandler */
100522a4:	0018      	movs	r0, r3
100522a6:	46bd      	mov	sp, r7
100522a8:	b00e      	add	sp, #56	@ 0x38
100522aa:	bd80      	pop	{r7, pc}
100522ac:	fffff3ff 	.word	0xfffff3ff
100522b0:	10069674 	.word	0x10069674
100522b4:	2000299c 	.word	0x2000299c

100522b8 <USART_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void USART_Init(void)
{
100522b8:	b590      	push	{r4, r7, lr}
100522ba:	b083      	sub	sp, #12
100522bc:	af00      	add	r7, sp, #0
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
100522be:	1dfb      	adds	r3, r7, #7
100522c0:	2212      	movs	r2, #18
100522c2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END InitService1Svc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  BLEEVT_RegisterGattEvtHandler(USART_EventHandler);
100522c4:	4b17      	ldr	r3, [pc, #92]	@ (10052324 <USART_Init+0x6c>)
100522c6:	0018      	movs	r0, r3
100522c8:	f7fc fbf6 	bl	1004eab8 <BLEEVT_RegisterGattEvtHandler>

  ret = aci_gatt_srv_add_service((ble_gatt_srv_def_t *)&usart_service);
100522cc:	1dfc      	adds	r4, r7, #7
100522ce:	4b16      	ldr	r3, [pc, #88]	@ (10052328 <USART_Init+0x70>)
100522d0:	0018      	movs	r0, r3
100522d2:	f7fc ff79 	bl	1004f1c8 <aci_gatt_srv_add_service>
100522d6:	0003      	movs	r3, r0
100522d8:	7023      	strb	r3, [r4, #0]
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_srv_add_service command: USART \n");
  }

  USART_Context.UsartSvcHdle = aci_gatt_srv_get_service_handle((ble_gatt_srv_def_t *) &usart_service);
100522da:	4b13      	ldr	r3, [pc, #76]	@ (10052328 <USART_Init+0x70>)
100522dc:	0018      	movs	r0, r3
100522de:	f7fc ff80 	bl	1004f1e2 <aci_gatt_srv_get_service_handle>
100522e2:	0003      	movs	r3, r0
100522e4:	001a      	movs	r2, r3
100522e6:	4b11      	ldr	r3, [pc, #68]	@ (1005232c <USART_Init+0x74>)
100522e8:	801a      	strh	r2, [r3, #0]
  USART_Context.TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[0]);
100522ea:	4b11      	ldr	r3, [pc, #68]	@ (10052330 <USART_Init+0x78>)
100522ec:	0018      	movs	r0, r3
100522ee:	f7fc ff98 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
100522f2:	0003      	movs	r3, r0
100522f4:	001a      	movs	r2, r3
100522f6:	4b0d      	ldr	r3, [pc, #52]	@ (1005232c <USART_Init+0x74>)
100522f8:	805a      	strh	r2, [r3, #2]
  USART_Context.RxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[1]);
100522fa:	4b0e      	ldr	r3, [pc, #56]	@ (10052334 <USART_Init+0x7c>)
100522fc:	0018      	movs	r0, r3
100522fe:	f7fc ff90 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
10052302:	0003      	movs	r3, r0
10052304:	001a      	movs	r2, r3
10052306:	4b09      	ldr	r3, [pc, #36]	@ (1005232c <USART_Init+0x74>)
10052308:	809a      	strh	r2, [r3, #4]
  USART_Context.Req_TxCharHdle = aci_gatt_srv_get_char_decl_handle((ble_gatt_chr_def_t *)&usart_chars[2]);
1005230a:	4b0b      	ldr	r3, [pc, #44]	@ (10052338 <USART_Init+0x80>)
1005230c:	0018      	movs	r0, r3
1005230e:	f7fc ff88 	bl	1004f222 <aci_gatt_srv_get_char_decl_handle>
10052312:	0003      	movs	r3, r0
10052314:	001a      	movs	r2, r3
10052316:	4b05      	ldr	r3, [pc, #20]	@ (1005232c <USART_Init+0x74>)
10052318:	80da      	strh	r2, [r3, #6]
  if (ret != BLE_STATUS_SUCCESS)
  {
    APP_DBG_MSG("  Fail registering USART handlers\n");
  }

  return;
1005231a:	46c0      	nop			@ (mov r8, r8)
}
1005231c:	46bd      	mov	sp, r7
1005231e:	b003      	add	sp, #12
10052320:	bd90      	pop	{r4, r7, pc}
10052322:	46c0      	nop			@ (mov r8, r8)
10052324:	10052105 	.word	0x10052105
10052328:	1006964c 	.word	0x1006964c
1005232c:	2000299c 	.word	0x2000299c
10052330:	100695e0 	.word	0x100695e0
10052334:	10069604 	.word	0x10069604
10052338:	10069628 	.word	0x10069628

1005233c <USART_UpdateValue>:
 * @param  CharOpcode: Characteristic identifier
 * @param  pData: pointer to the new data to be written in the characteristic
 *
 */
tBleStatus USART_UpdateValue(USART_CharOpcode_t CharOpcode, USART_Data_t *pData)
{
1005233c:	b580      	push	{r7, lr}
1005233e:	b084      	sub	sp, #16
10052340:	af00      	add	r7, sp, #0
10052342:	0002      	movs	r2, r0
10052344:	6039      	str	r1, [r7, #0]
10052346:	1dfb      	adds	r3, r7, #7
10052348:	701a      	strb	r2, [r3, #0]
  tBleStatus ret = BLE_STATUS_SUCCESS;
1005234a:	230f      	movs	r3, #15
1005234c:	18fb      	adds	r3, r7, r3
1005234e:	2200      	movs	r2, #0
10052350:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Service1_App_Update_Char_1 */

  /* USER CODE END Service1_App_Update_Char_1 */

  switch(CharOpcode)
10052352:	1dfb      	adds	r3, r7, #7
10052354:	781b      	ldrb	r3, [r3, #0]
10052356:	2b02      	cmp	r3, #2
10052358:	d01f      	beq.n	1005239a <USART_UpdateValue+0x5e>
1005235a:	dc2b      	bgt.n	100523b4 <USART_UpdateValue+0x78>
1005235c:	2b00      	cmp	r3, #0
1005235e:	d002      	beq.n	10052366 <USART_UpdateValue+0x2a>
10052360:	2b01      	cmp	r3, #1
10052362:	d00d      	beq.n	10052380 <USART_UpdateValue+0x44>

      /* USER CODE END Service1_Char_Value_3*/
      break;

    default:
      break;
10052364:	e026      	b.n	100523b4 <USART_UpdateValue+0x78>
      memcpy(tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(tx_val_buffer)));
10052366:	683b      	ldr	r3, [r7, #0]
10052368:	6819      	ldr	r1, [r3, #0]
1005236a:	683b      	ldr	r3, [r7, #0]
1005236c:	791b      	ldrb	r3, [r3, #4]
1005236e:	1e5a      	subs	r2, r3, #1
10052370:	4193      	sbcs	r3, r2
10052372:	b2db      	uxtb	r3, r3
10052374:	001a      	movs	r2, r3
10052376:	4b13      	ldr	r3, [pc, #76]	@ (100523c4 <USART_UpdateValue+0x88>)
10052378:	0018      	movs	r0, r3
1005237a:	f015 fc68 	bl	10067c4e <memcpy>
      break;
1005237e:	e01a      	b.n	100523b6 <USART_UpdateValue+0x7a>
      memcpy(rx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(rx_val_buffer)));
10052380:	683b      	ldr	r3, [r7, #0]
10052382:	6819      	ldr	r1, [r3, #0]
10052384:	683b      	ldr	r3, [r7, #0]
10052386:	791b      	ldrb	r3, [r3, #4]
10052388:	1e5a      	subs	r2, r3, #1
1005238a:	4193      	sbcs	r3, r2
1005238c:	b2db      	uxtb	r3, r3
1005238e:	001a      	movs	r2, r3
10052390:	4b0d      	ldr	r3, [pc, #52]	@ (100523c8 <USART_UpdateValue+0x8c>)
10052392:	0018      	movs	r0, r3
10052394:	f015 fc5b 	bl	10067c4e <memcpy>
      break;
10052398:	e00d      	b.n	100523b6 <USART_UpdateValue+0x7a>
      memcpy(req_tx_val_buffer, pData->p_Payload, MIN(pData->Length, sizeof(req_tx_val_buffer)));
1005239a:	683b      	ldr	r3, [r7, #0]
1005239c:	6819      	ldr	r1, [r3, #0]
1005239e:	683b      	ldr	r3, [r7, #0]
100523a0:	791b      	ldrb	r3, [r3, #4]
100523a2:	1e5a      	subs	r2, r3, #1
100523a4:	4193      	sbcs	r3, r2
100523a6:	b2db      	uxtb	r3, r3
100523a8:	001a      	movs	r2, r3
100523aa:	4b08      	ldr	r3, [pc, #32]	@ (100523cc <USART_UpdateValue+0x90>)
100523ac:	0018      	movs	r0, r3
100523ae:	f015 fc4e 	bl	10067c4e <memcpy>
      break;
100523b2:	e000      	b.n	100523b6 <USART_UpdateValue+0x7a>
      break;
100523b4:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_App_Update_Char_2 */

  /* USER CODE END Service1_App_Update_Char_2 */

  return ret;
100523b6:	230f      	movs	r3, #15
100523b8:	18fb      	adds	r3, r7, r3
100523ba:	781b      	ldrb	r3, [r3, #0]
}
100523bc:	0018      	movs	r0, r3
100523be:	46bd      	mov	sp, r7
100523c0:	b004      	add	sp, #16
100523c2:	bd80      	pop	{r7, pc}
100523c4:	200029a4 	.word	0x200029a4
100523c8:	200029a8 	.word	0x200029a8
100523cc:	200029ac 	.word	0x200029ac

100523d0 <USART_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void USART_Notification(USART_NotificationEvt_t *p_Notification)
{
100523d0:	b5b0      	push	{r4, r5, r7, lr}
100523d2:	b08e      	sub	sp, #56	@ 0x38
100523d4:	af00      	add	r7, sp, #0
100523d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_Notification_1 */

  /* USER CODE END Service1_Notification_1 */
  switch(p_Notification->EvtOpcode)
100523d8:	687b      	ldr	r3, [r7, #4]
100523da:	781b      	ldrb	r3, [r3, #0]
100523dc:	2b03      	cmp	r3, #3
100523de:	d017      	beq.n	10052410 <USART_Notification+0x40>
100523e0:	dc56      	bgt.n	10052490 <USART_Notification+0xc0>
100523e2:	2b02      	cmp	r3, #2
100523e4:	d056      	beq.n	10052494 <USART_Notification+0xc4>
100523e6:	dc53      	bgt.n	10052490 <USART_Notification+0xc0>
100523e8:	2b00      	cmp	r3, #0
100523ea:	d055      	beq.n	10052498 <USART_Notification+0xc8>
100523ec:	2b01      	cmp	r3, #1
100523ee:	d000      	beq.n	100523f2 <USART_Notification+0x22>

    default:
      /* USER CODE BEGIN Service1_Notification_default */

      /* USER CODE END Service1_Notification_default */
      break;
100523f0:	e04e      	b.n	10052490 <USART_Notification+0xc0>
      Event_t recieved = {EVENT_USART, p_Notification->DataTransfered.p_Payload[0]};
100523f2:	2130      	movs	r1, #48	@ 0x30
100523f4:	187b      	adds	r3, r7, r1
100523f6:	2206      	movs	r2, #6
100523f8:	701a      	strb	r2, [r3, #0]
100523fa:	687b      	ldr	r3, [r7, #4]
100523fc:	685b      	ldr	r3, [r3, #4]
100523fe:	781b      	ldrb	r3, [r3, #0]
10052400:	001a      	movs	r2, r3
10052402:	187b      	adds	r3, r7, r1
10052404:	805a      	strh	r2, [r3, #2]
      COMM_Event_Post(recieved);
10052406:	187b      	adds	r3, r7, r1
10052408:	6818      	ldr	r0, [r3, #0]
1005240a:	f7f0 fdc7 	bl	10042f9c <COMM_Event_Post>
      break;
1005240e:	e044      	b.n	1005249a <USART_Notification+0xca>
        int16_t data = BLUETOOTH_ReadBuffer();
10052410:	2536      	movs	r5, #54	@ 0x36
10052412:	197c      	adds	r4, r7, r5
10052414:	f7ee ffc0 	bl	10041398 <BLUETOOTH_ReadBuffer>
10052418:	0003      	movs	r3, r0
1005241a:	8023      	strh	r3, [r4, #0]
        if(data != -1){
1005241c:	002a      	movs	r2, r5
1005241e:	18bb      	adds	r3, r7, r2
10052420:	2100      	movs	r1, #0
10052422:	5e5b      	ldrsh	r3, [r3, r1]
10052424:	3301      	adds	r3, #1
10052426:	d022      	beq.n	1005246e <USART_Notification+0x9e>
        	uint8_t data1 = (uint8_t)data;
10052428:	18bb      	adds	r3, r7, r2
1005242a:	881b      	ldrh	r3, [r3, #0]
1005242c:	b2da      	uxtb	r2, r3
1005242e:	202f      	movs	r0, #47	@ 0x2f
10052430:	183b      	adds	r3, r7, r0
10052432:	701a      	strb	r2, [r3, #0]
			USART_Data_t value1 = {&data1, 1};
10052434:	2124      	movs	r1, #36	@ 0x24
10052436:	187b      	adds	r3, r7, r1
10052438:	183a      	adds	r2, r7, r0
1005243a:	601a      	str	r2, [r3, #0]
1005243c:	187b      	adds	r3, r7, r1
1005243e:	2201      	movs	r2, #1
10052440:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_TX, &value1);
10052442:	187b      	adds	r3, r7, r1
10052444:	0019      	movs	r1, r3
10052446:	2000      	movs	r0, #0
10052448:	f7ff ff78 	bl	1005233c <USART_UpdateValue>
			uint8_t data2 = 0;
1005244c:	2023      	movs	r0, #35	@ 0x23
1005244e:	183b      	adds	r3, r7, r0
10052450:	2200      	movs	r2, #0
10052452:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
10052454:	2118      	movs	r1, #24
10052456:	187b      	adds	r3, r7, r1
10052458:	183a      	adds	r2, r7, r0
1005245a:	601a      	str	r2, [r3, #0]
1005245c:	187b      	adds	r3, r7, r1
1005245e:	2201      	movs	r2, #1
10052460:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
10052462:	187b      	adds	r3, r7, r1
10052464:	0019      	movs	r1, r3
10052466:	2002      	movs	r0, #2
10052468:	f7ff ff68 	bl	1005233c <USART_UpdateValue>
      break;
1005246c:	e015      	b.n	1005249a <USART_Notification+0xca>
			uint8_t data2 = 2;
1005246e:	2017      	movs	r0, #23
10052470:	183b      	adds	r3, r7, r0
10052472:	2202      	movs	r2, #2
10052474:	701a      	strb	r2, [r3, #0]
			USART_Data_t value2 = {&data2, 1};
10052476:	210c      	movs	r1, #12
10052478:	187b      	adds	r3, r7, r1
1005247a:	183a      	adds	r2, r7, r0
1005247c:	601a      	str	r2, [r3, #0]
1005247e:	187b      	adds	r3, r7, r1
10052480:	2201      	movs	r2, #1
10052482:	711a      	strb	r2, [r3, #4]
			USART_UpdateValue(USART_REQ_TX, &value2);
10052484:	187b      	adds	r3, r7, r1
10052486:	0019      	movs	r1, r3
10052488:	2002      	movs	r0, #2
1005248a:	f7ff ff57 	bl	1005233c <USART_UpdateValue>
      break;
1005248e:	e004      	b.n	1005249a <USART_Notification+0xca>
      break;
10052490:	46c0      	nop			@ (mov r8, r8)
10052492:	e002      	b.n	1005249a <USART_Notification+0xca>
      break;
10052494:	46c0      	nop			@ (mov r8, r8)
10052496:	e000      	b.n	1005249a <USART_Notification+0xca>
      break;
10052498:	46c0      	nop			@ (mov r8, r8)
  }
  /* USER CODE BEGIN Service1_Notification_2 */

  /* USER CODE END Service1_Notification_2 */
  return;
1005249a:	46c0      	nop			@ (mov r8, r8)
}
1005249c:	46bd      	mov	sp, r7
1005249e:	b00e      	add	sp, #56	@ 0x38
100524a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

100524a4 <USART_APP_EvtRx>:

void USART_APP_EvtRx(USART_APP_ConnHandleNotEvt_t *p_Notification)
{
100524a4:	b580      	push	{r7, lr}
100524a6:	b082      	sub	sp, #8
100524a8:	af00      	add	r7, sp, #0
100524aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Service1_APP_EvtRx_1 */

  /* USER CODE END Service1_APP_EvtRx_1 */

  switch(p_Notification->EvtOpcode)
100524ac:	687b      	ldr	r3, [r7, #4]
100524ae:	781b      	ldrb	r3, [r3, #0]
100524b0:	2b00      	cmp	r3, #0
100524b2:	d002      	beq.n	100524ba <USART_APP_EvtRx+0x16>
100524b4:	2b01      	cmp	r3, #1
100524b6:	d005      	beq.n	100524c4 <USART_APP_EvtRx+0x20>
      break;
    default:
      /* USER CODE BEGIN Service1_APP_EvtRx_default */

      /* USER CODE END Service1_APP_EvtRx_default */
      break;
100524b8:	e00c      	b.n	100524d4 <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = p_Notification->ConnectionHandle;
100524ba:	687b      	ldr	r3, [r7, #4]
100524bc:	885a      	ldrh	r2, [r3, #2]
100524be:	4b07      	ldr	r3, [pc, #28]	@ (100524dc <USART_APP_EvtRx+0x38>)
100524c0:	801a      	strh	r2, [r3, #0]
      break;
100524c2:	e007      	b.n	100524d4 <USART_APP_EvtRx+0x30>
      USART_APP_Context.ConnectionHandle = 0xFFFF;
100524c4:	4b05      	ldr	r3, [pc, #20]	@ (100524dc <USART_APP_EvtRx+0x38>)
100524c6:	2201      	movs	r2, #1
100524c8:	4252      	negs	r2, r2
100524ca:	801a      	strh	r2, [r3, #0]
            APP_BLE_Procedure_Gap_Peripheral(PROC_GAP_PERIPH_ADVERTISE_START_FAST);
100524cc:	2001      	movs	r0, #1
100524ce:	f7ff fd35 	bl	10051f3c <APP_BLE_Procedure_Gap_Peripheral>
      break;
100524d2:	46c0      	nop			@ (mov r8, r8)

  /* USER CODE BEGIN Service1_APP_EvtRx_2 */

  /* USER CODE END Service1_APP_EvtRx_2 */

  return;
100524d4:	46c0      	nop			@ (mov r8, r8)
}
100524d6:	46bd      	mov	sp, r7
100524d8:	b002      	add	sp, #8
100524da:	bd80      	pop	{r7, pc}
100524dc:	200029b0 	.word	0x200029b0

100524e0 <USART_APP_Init>:

void USART_APP_Init(void)
{
100524e0:	b580      	push	{r7, lr}
100524e2:	af00      	add	r7, sp, #0
  USART_APP_Context.ConnectionHandle = 0xFFFF;
100524e4:	4b04      	ldr	r3, [pc, #16]	@ (100524f8 <USART_APP_Init+0x18>)
100524e6:	2201      	movs	r2, #1
100524e8:	4252      	negs	r2, r2
100524ea:	801a      	strh	r2, [r3, #0]
  USART_Init();
100524ec:	f7ff fee4 	bl	100522b8 <USART_Init>

  /* USER CODE BEGIN Service1_APP_Init */

  /* USER CODE END Service1_APP_Init */
  return;
100524f0:	46c0      	nop			@ (mov r8, r8)
}
100524f2:	46bd      	mov	sp, r7
100524f4:	bd80      	pop	{r7, pc}
100524f6:	46c0      	nop			@ (mov r8, r8)
100524f8:	200029b0 	.word	0x200029b0

100524fc <BLENVM_Init>:
/** @defgroup NVM_UpperLayer_Public_Functions Public Functions
 * @{
 */

void BLENVM_Init(void)
{
100524fc:	b580      	push	{r7, lr}
100524fe:	af00      	add	r7, sp, #0
  NVMDB_Init();
10052500:	f7fe f9ac 	bl	1005085c <NVMDB_Init>

  NVMDB_HandleInit(SEC_GATT_BD, &sec_gatt_db_h);
10052504:	4b07      	ldr	r3, [pc, #28]	@ (10052524 <BLENVM_Init+0x28>)
10052506:	0019      	movs	r1, r3
10052508:	2000      	movs	r0, #0
1005250a:	f7fe fb05 	bl	10050b18 <NVMDB_HandleInit>
  NVMDB_HandleInit(DEVICE_ID_DB, &device_id_db_h);
1005250e:	4b06      	ldr	r3, [pc, #24]	@ (10052528 <BLENVM_Init+0x2c>)
10052510:	0019      	movs	r1, r3
10052512:	2001      	movs	r0, #1
10052514:	f7fe fb00 	bl	10050b18 <NVMDB_HandleInit>
  curr_handle_p = &sec_gatt_db_h;
10052518:	4b04      	ldr	r3, [pc, #16]	@ (1005252c <BLENVM_Init+0x30>)
1005251a:	4a02      	ldr	r2, [pc, #8]	@ (10052524 <BLENVM_Init+0x28>)
1005251c:	601a      	str	r2, [r3, #0]
}
1005251e:	46c0      	nop			@ (mov r8, r8)
10052520:	46bd      	mov	sp, r7
10052522:	bd80      	pop	{r7, pc}
10052524:	200029b4 	.word	0x200029b4
10052528:	200029c4 	.word	0x200029c4
1005252c:	200029d4 	.word	0x200029d4

10052530 <BLEPLAT_NvmAdd>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmAdd(BLEPLAT_NvmRecordTypeDef Type,
                                        const uint8_t* pData,
                                        uint16_t Size,
                                        const uint8_t* pExtraData,
                                        uint16_t ExtraSize)
{
10052530:	b5f0      	push	{r4, r5, r6, r7, lr}
10052532:	b089      	sub	sp, #36	@ 0x24
10052534:	af02      	add	r7, sp, #8
10052536:	60b9      	str	r1, [r7, #8]
10052538:	0011      	movs	r1, r2
1005253a:	607b      	str	r3, [r7, #4]
1005253c:	240f      	movs	r4, #15
1005253e:	193b      	adds	r3, r7, r4
10052540:	1c02      	adds	r2, r0, #0
10052542:	701a      	strb	r2, [r3, #0]
10052544:	230c      	movs	r3, #12
10052546:	18fb      	adds	r3, r7, r3
10052548:	1c0a      	adds	r2, r1, #0
1005254a:	801a      	strh	r2, [r3, #0]
  NVMDB_status_t ret;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
1005254c:	193b      	adds	r3, r7, r4
1005254e:	781b      	ldrb	r3, [r3, #0]
10052550:	2b02      	cmp	r3, #2
10052552:	d103      	bne.n	1005255c <BLEPLAT_NvmAdd+0x2c>
  {
    curr_handle_p = &device_id_db_h;
10052554:	4b1a      	ldr	r3, [pc, #104]	@ (100525c0 <BLEPLAT_NvmAdd+0x90>)
10052556:	4a1b      	ldr	r2, [pc, #108]	@ (100525c4 <BLEPLAT_NvmAdd+0x94>)
10052558:	601a      	str	r2, [r3, #0]
1005255a:	e002      	b.n	10052562 <BLEPLAT_NvmAdd+0x32>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
1005255c:	4b18      	ldr	r3, [pc, #96]	@ (100525c0 <BLEPLAT_NvmAdd+0x90>)
1005255e:	4a1a      	ldr	r2, [pc, #104]	@ (100525c8 <BLEPLAT_NvmAdd+0x98>)
10052560:	601a      	str	r2, [r3, #0]
  }

  DEBUG_GPIO2_HIGH();

  ret = NVMDB_AppendRecord(curr_handle_p, Type, Size, pData, ExtraSize, pExtraData);
10052562:	4b17      	ldr	r3, [pc, #92]	@ (100525c0 <BLEPLAT_NvmAdd+0x90>)
10052564:	6818      	ldr	r0, [r3, #0]
10052566:	2617      	movs	r6, #23
10052568:	19bc      	adds	r4, r7, r6
1005256a:	68bd      	ldr	r5, [r7, #8]
1005256c:	230c      	movs	r3, #12
1005256e:	18fb      	adds	r3, r7, r3
10052570:	881b      	ldrh	r3, [r3, #0]
10052572:	469c      	mov	ip, r3
10052574:	230f      	movs	r3, #15
10052576:	18fb      	adds	r3, r7, r3
10052578:	7819      	ldrb	r1, [r3, #0]
1005257a:	687b      	ldr	r3, [r7, #4]
1005257c:	9301      	str	r3, [sp, #4]
1005257e:	2328      	movs	r3, #40	@ 0x28
10052580:	2208      	movs	r2, #8
10052582:	189b      	adds	r3, r3, r2
10052584:	19db      	adds	r3, r3, r7
10052586:	881b      	ldrh	r3, [r3, #0]
10052588:	9300      	str	r3, [sp, #0]
1005258a:	002b      	movs	r3, r5
1005258c:	4662      	mov	r2, ip
1005258e:	f7fe fb65 	bl	10050c5c <NVMDB_AppendRecord>
10052592:	0003      	movs	r3, r0
10052594:	7023      	strb	r3, [r4, #0]

  DEBUG_GPIO2_LOW();

  if(ret == NVMDB_STATUS_OK)
10052596:	19bb      	adds	r3, r7, r6
10052598:	781b      	ldrb	r3, [r3, #0]
1005259a:	2b00      	cmp	r3, #0
1005259c:	d101      	bne.n	100525a2 <BLEPLAT_NvmAdd+0x72>
  {
    return BLEPLAT_OK;
1005259e:	2300      	movs	r3, #0
100525a0:	e009      	b.n	100525b6 <BLEPLAT_NvmAdd+0x86>
  }

  if(ret == NVMDB_STATUS_FULL_DB)
100525a2:	2317      	movs	r3, #23
100525a4:	18fb      	adds	r3, r7, r3
100525a6:	781b      	ldrb	r3, [r3, #0]
100525a8:	2b02      	cmp	r3, #2
100525aa:	d102      	bne.n	100525b2 <BLEPLAT_NvmAdd+0x82>
  {
    return BLEPLAT_FULL;
100525ac:	2301      	movs	r3, #1
100525ae:	425b      	negs	r3, r3
100525b0:	e001      	b.n	100525b6 <BLEPLAT_NvmAdd+0x86>
  }

  return BLEPLAT_BUSY;
100525b2:	2302      	movs	r3, #2
100525b4:	425b      	negs	r3, r3
}
100525b6:	0018      	movs	r0, r3
100525b8:	46bd      	mov	sp, r7
100525ba:	b007      	add	sp, #28
100525bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100525be:	46c0      	nop			@ (mov r8, r8)
100525c0:	200029d4 	.word	0x200029d4
100525c4:	200029c4 	.word	0x200029c4
100525c8:	200029b4 	.word	0x200029b4

100525cc <BLEPLAT_NvmGet>:
BLEPLAT_NvmStatusTypeDef BLEPLAT_NvmGet(BLEPLAT_NvmSeekModeTypeDef Mode,
                                        BLEPLAT_NvmRecordTypeDef Type,
                                        uint16_t Offset,
                                        uint8_t* pData,
                                        uint16_t Size)
{
100525cc:	b5b0      	push	{r4, r5, r7, lr}
100525ce:	b086      	sub	sp, #24
100525d0:	af02      	add	r7, sp, #8
100525d2:	0004      	movs	r4, r0
100525d4:	0008      	movs	r0, r1
100525d6:	0011      	movs	r1, r2
100525d8:	603b      	str	r3, [r7, #0]
100525da:	1dfb      	adds	r3, r7, #7
100525dc:	1c22      	adds	r2, r4, #0
100525de:	701a      	strb	r2, [r3, #0]
100525e0:	1dbb      	adds	r3, r7, #6
100525e2:	1c02      	adds	r2, r0, #0
100525e4:	701a      	strb	r2, [r3, #0]
100525e6:	1d3b      	adds	r3, r7, #4
100525e8:	1c0a      	adds	r2, r1, #0
100525ea:	801a      	strh	r2, [r3, #0]
  NVMDB_RecordSizeType size_out;
  NVMDB_status_t ret;
  NVMDB_IdType db_id;

  if(Type == BLEPLAT_NVM_REC_DEVICE_ID)
100525ec:	1dbb      	adds	r3, r7, #6
100525ee:	781b      	ldrb	r3, [r3, #0]
100525f0:	2b02      	cmp	r3, #2
100525f2:	d107      	bne.n	10052604 <BLEPLAT_NvmGet+0x38>
  {
    curr_handle_p = &device_id_db_h;
100525f4:	4b2e      	ldr	r3, [pc, #184]	@ (100526b0 <BLEPLAT_NvmGet+0xe4>)
100525f6:	4a2f      	ldr	r2, [pc, #188]	@ (100526b4 <BLEPLAT_NvmGet+0xe8>)
100525f8:	601a      	str	r2, [r3, #0]
    db_id = 1;
100525fa:	230e      	movs	r3, #14
100525fc:	18fb      	adds	r3, r7, r3
100525fe:	2201      	movs	r2, #1
10052600:	701a      	strb	r2, [r3, #0]
10052602:	e006      	b.n	10052612 <BLEPLAT_NvmGet+0x46>
  }
  else
  {
    curr_handle_p = &sec_gatt_db_h;
10052604:	4b2a      	ldr	r3, [pc, #168]	@ (100526b0 <BLEPLAT_NvmGet+0xe4>)
10052606:	4a2c      	ldr	r2, [pc, #176]	@ (100526b8 <BLEPLAT_NvmGet+0xec>)
10052608:	601a      	str	r2, [r3, #0]
    db_id = 0;
1005260a:	230e      	movs	r3, #14
1005260c:	18fb      	adds	r3, r7, r3
1005260e:	2200      	movs	r2, #0
10052610:	701a      	strb	r2, [r3, #0]
  }

  if(Mode == BLEPLAT_NVM_CURRENT)
10052612:	1dfb      	adds	r3, r7, #7
10052614:	781b      	ldrb	r3, [r3, #0]
10052616:	2b02      	cmp	r3, #2
10052618:	d112      	bne.n	10052640 <BLEPLAT_NvmGet+0x74>
  {
    ret = NVMDB_ReadCurrentRecord(curr_handle_p, Offset, pData, Size, &size_out);
1005261a:	4b25      	ldr	r3, [pc, #148]	@ (100526b0 <BLEPLAT_NvmGet+0xe4>)
1005261c:	6818      	ldr	r0, [r3, #0]
1005261e:	230f      	movs	r3, #15
10052620:	18fc      	adds	r4, r7, r3
10052622:	2320      	movs	r3, #32
10052624:	18fb      	adds	r3, r7, r3
10052626:	881d      	ldrh	r5, [r3, #0]
10052628:	683a      	ldr	r2, [r7, #0]
1005262a:	1d3b      	adds	r3, r7, #4
1005262c:	8819      	ldrh	r1, [r3, #0]
1005262e:	230c      	movs	r3, #12
10052630:	18fb      	adds	r3, r7, r3
10052632:	9300      	str	r3, [sp, #0]
10052634:	002b      	movs	r3, r5
10052636:	f7fe fadd 	bl	10050bf4 <NVMDB_ReadCurrentRecord>
1005263a:	0003      	movs	r3, r0
1005263c:	7023      	strb	r3, [r4, #0]
1005263e:	e021      	b.n	10052684 <BLEPLAT_NvmGet+0xb8>
  }
  else
  {
    if(Mode == BLEPLAT_NVM_FIRST)
10052640:	1dfb      	adds	r3, r7, #7
10052642:	781b      	ldrb	r3, [r3, #0]
10052644:	2b00      	cmp	r3, #0
10052646:	d108      	bne.n	1005265a <BLEPLAT_NvmGet+0x8e>
    {
      NVMDB_HandleInit(db_id, curr_handle_p);
10052648:	4b19      	ldr	r3, [pc, #100]	@ (100526b0 <BLEPLAT_NvmGet+0xe4>)
1005264a:	681a      	ldr	r2, [r3, #0]
1005264c:	230e      	movs	r3, #14
1005264e:	18fb      	adds	r3, r7, r3
10052650:	781b      	ldrb	r3, [r3, #0]
10052652:	0011      	movs	r1, r2
10052654:	0018      	movs	r0, r3
10052656:	f7fe fa5f 	bl	10050b18 <NVMDB_HandleInit>
    }
    ret = NVMDB_ReadNextRecord(curr_handle_p, Type, Offset, pData, Size, &size_out);
1005265a:	4b15      	ldr	r3, [pc, #84]	@ (100526b0 <BLEPLAT_NvmGet+0xe4>)
1005265c:	6818      	ldr	r0, [r3, #0]
1005265e:	230f      	movs	r3, #15
10052660:	18fc      	adds	r4, r7, r3
10052662:	683d      	ldr	r5, [r7, #0]
10052664:	1d3b      	adds	r3, r7, #4
10052666:	881a      	ldrh	r2, [r3, #0]
10052668:	1dbb      	adds	r3, r7, #6
1005266a:	7819      	ldrb	r1, [r3, #0]
1005266c:	230c      	movs	r3, #12
1005266e:	18fb      	adds	r3, r7, r3
10052670:	9301      	str	r3, [sp, #4]
10052672:	2320      	movs	r3, #32
10052674:	18fb      	adds	r3, r7, r3
10052676:	881b      	ldrh	r3, [r3, #0]
10052678:	9300      	str	r3, [sp, #0]
1005267a:	002b      	movs	r3, r5
1005267c:	f7fe fa80 	bl	10050b80 <NVMDB_ReadNextRecord>
10052680:	0003      	movs	r3, r0
10052682:	7023      	strb	r3, [r4, #0]
  }

  if(ret == NVMDB_STATUS_OK)
10052684:	230f      	movs	r3, #15
10052686:	18fb      	adds	r3, r7, r3
10052688:	781b      	ldrb	r3, [r3, #0]
1005268a:	2b00      	cmp	r3, #0
1005268c:	d101      	bne.n	10052692 <BLEPLAT_NvmGet+0xc6>
  {
    return BLEPLAT_OK;
1005268e:	2300      	movs	r3, #0
10052690:	e009      	b.n	100526a6 <BLEPLAT_NvmGet+0xda>
  }

  if(ret == NVMDB_STATUS_END_OF_DB)
10052692:	230f      	movs	r3, #15
10052694:	18fb      	adds	r3, r7, r3
10052696:	781b      	ldrb	r3, [r3, #0]
10052698:	2b04      	cmp	r3, #4
1005269a:	d102      	bne.n	100526a2 <BLEPLAT_NvmGet+0xd6>
  {
    return BLEPLAT_EOF;
1005269c:	2303      	movs	r3, #3
1005269e:	425b      	negs	r3, r3
100526a0:	e001      	b.n	100526a6 <BLEPLAT_NvmGet+0xda>
  }

  return BLEPLAT_BUSY;
100526a2:	2302      	movs	r3, #2
100526a4:	425b      	negs	r3, r3
}
100526a6:	0018      	movs	r0, r3
100526a8:	46bd      	mov	sp, r7
100526aa:	b004      	add	sp, #16
100526ac:	bdb0      	pop	{r4, r5, r7, pc}
100526ae:	46c0      	nop			@ (mov r8, r8)
100526b0:	200029d4 	.word	0x200029d4
100526b4:	200029c4 	.word	0x200029c4
100526b8:	200029b4 	.word	0x200029b4

100526bc <BLEPLAT_NvmCompare>:

int BLEPLAT_NvmCompare(uint16_t Offset, const uint8_t* pData, uint16_t Size)
{
100526bc:	b590      	push	{r4, r7, lr}
100526be:	b085      	sub	sp, #20
100526c0:	af00      	add	r7, sp, #0
100526c2:	6039      	str	r1, [r7, #0]
100526c4:	0011      	movs	r1, r2
100526c6:	1dbb      	adds	r3, r7, #6
100526c8:	1c02      	adds	r2, r0, #0
100526ca:	801a      	strh	r2, [r3, #0]
100526cc:	1d3b      	adds	r3, r7, #4
100526ce:	1c0a      	adds	r2, r1, #0
100526d0:	801a      	strh	r2, [r3, #0]
  int ret;

  ret = NVMDB_CompareCurrentRecord(curr_handle_p, Offset, pData, Size);
100526d2:	4b0e      	ldr	r3, [pc, #56]	@ (1005270c <BLEPLAT_NvmCompare+0x50>)
100526d4:	6818      	ldr	r0, [r3, #0]
100526d6:	1d3b      	adds	r3, r7, #4
100526d8:	881c      	ldrh	r4, [r3, #0]
100526da:	683a      	ldr	r2, [r7, #0]
100526dc:	1dbb      	adds	r3, r7, #6
100526de:	8819      	ldrh	r1, [r3, #0]
100526e0:	0023      	movs	r3, r4
100526e2:	f7fd fa83 	bl	1004fbec <NVMDB_CompareCurrentRecord>
100526e6:	0003      	movs	r3, r0
100526e8:	60fb      	str	r3, [r7, #12]

  if(ret == 0)
100526ea:	68fb      	ldr	r3, [r7, #12]
100526ec:	2b00      	cmp	r3, #0
100526ee:	d101      	bne.n	100526f4 <BLEPLAT_NvmCompare+0x38>
  {
    return BLEPLAT_OK;
100526f0:	2300      	movs	r3, #0
100526f2:	e007      	b.n	10052704 <BLEPLAT_NvmCompare+0x48>
  }
  else if(ret < 0)
100526f4:	68fb      	ldr	r3, [r7, #12]
100526f6:	2b00      	cmp	r3, #0
100526f8:	da02      	bge.n	10052700 <BLEPLAT_NvmCompare+0x44>
  {
    return Size;
100526fa:	1d3b      	adds	r3, r7, #4
100526fc:	881b      	ldrh	r3, [r3, #0]
100526fe:	e001      	b.n	10052704 <BLEPLAT_NvmCompare+0x48>
  }
  else
  {
    return BLEPLAT_EOF;
10052700:	2303      	movs	r3, #3
10052702:	425b      	negs	r3, r3
  }
}
10052704:	0018      	movs	r0, r3
10052706:	46bd      	mov	sp, r7
10052708:	b005      	add	sp, #20
1005270a:	bd90      	pop	{r4, r7, pc}
1005270c:	200029d4 	.word	0x200029d4

10052710 <BLEPLAT_NvmDiscard>:

void BLEPLAT_NvmDiscard(BLEPLAT_NvmSeekModeTypeDef Mode)
{
10052710:	b580      	push	{r7, lr}
10052712:	b082      	sub	sp, #8
10052714:	af00      	add	r7, sp, #0
10052716:	0002      	movs	r2, r0
10052718:	1dfb      	adds	r3, r7, #7
1005271a:	701a      	strb	r2, [r3, #0]
  DEBUG_GPIO2_HIGH();
  if(Mode == BLEPLAT_NVM_CURRENT)
1005271c:	1dfb      	adds	r3, r7, #7
1005271e:	781b      	ldrb	r3, [r3, #0]
10052720:	2b02      	cmp	r3, #2
10052722:	d10a      	bne.n	1005273a <BLEPLAT_NvmDiscard+0x2a>
  {
    if(curr_handle_p == &device_id_db_h) // Do not allow to erase device ID data.
10052724:	4b0b      	ldr	r3, [pc, #44]	@ (10052754 <BLEPLAT_NvmDiscard+0x44>)
10052726:	681a      	ldr	r2, [r3, #0]
10052728:	4b0b      	ldr	r3, [pc, #44]	@ (10052758 <BLEPLAT_NvmDiscard+0x48>)
1005272a:	429a      	cmp	r2, r3
1005272c:	d00d      	beq.n	1005274a <BLEPLAT_NvmDiscard+0x3a>
    {
      return;
    }
    NVMDB_DeleteRecord(curr_handle_p);
1005272e:	4b09      	ldr	r3, [pc, #36]	@ (10052754 <BLEPLAT_NvmDiscard+0x44>)
10052730:	681b      	ldr	r3, [r3, #0]
10052732:	0018      	movs	r0, r3
10052734:	f7fe faf8 	bl	10050d28 <NVMDB_DeleteRecord>
10052738:	e008      	b.n	1005274c <BLEPLAT_NvmDiscard+0x3c>
  }
  else if(Mode == BLEPLAT_NVM_ALL)
1005273a:	1dfb      	adds	r3, r7, #7
1005273c:	781b      	ldrb	r3, [r3, #0]
1005273e:	2b03      	cmp	r3, #3
10052740:	d104      	bne.n	1005274c <BLEPLAT_NvmDiscard+0x3c>
  {

    NVMDB_Erase(SEC_GATT_BD);
10052742:	2000      	movs	r0, #0
10052744:	f7fe fafe 	bl	10050d44 <NVMDB_Erase>
10052748:	e000      	b.n	1005274c <BLEPLAT_NvmDiscard+0x3c>
      return;
1005274a:	46c0      	nop			@ (mov r8, r8)
       else
        return;
       }*/
  }
  DEBUG_GPIO2_LOW();
}
1005274c:	46bd      	mov	sp, r7
1005274e:	b002      	add	sp, #8
10052750:	bd80      	pop	{r7, pc}
10052752:	46c0      	nop			@ (mov r8, r8)
10052754:	200029d4 	.word	0x200029d4
10052758:	200029c4 	.word	0x200029c4

1005275c <BLEPLAT_MemCpy>:
#if defined(STM32WB06) || defined(STM32WB07) || defined(STM32WB09)
uint32_t SYNTH0_ANA_ENG_bak, PWR_ENGTRIM_bak;
#endif

void BLEPLAT_MemCpy(void *Dest, const void *Src, unsigned int Size)
{
1005275c:	b580      	push	{r7, lr}
1005275e:	b084      	sub	sp, #16
10052760:	af00      	add	r7, sp, #0
10052762:	60f8      	str	r0, [r7, #12]
10052764:	60b9      	str	r1, [r7, #8]
10052766:	607a      	str	r2, [r7, #4]
  Osal_MemCpy(Dest, Src, Size);
10052768:	687a      	ldr	r2, [r7, #4]
1005276a:	68b9      	ldr	r1, [r7, #8]
1005276c:	68fb      	ldr	r3, [r7, #12]
1005276e:	0018      	movs	r0, r3
10052770:	f7ed fcc8 	bl	10040104 <Osal_MemCpy>
}
10052774:	46c0      	nop			@ (mov r8, r8)
10052776:	46bd      	mov	sp, r7
10052778:	b004      	add	sp, #16
1005277a:	bd80      	pop	{r7, pc}

1005277c <BLEPLAT_MemSet>:

void BLEPLAT_MemSet(void *Ptr, int Value, unsigned int Size)
{
1005277c:	b580      	push	{r7, lr}
1005277e:	b084      	sub	sp, #16
10052780:	af00      	add	r7, sp, #0
10052782:	60f8      	str	r0, [r7, #12]
10052784:	60b9      	str	r1, [r7, #8]
10052786:	607a      	str	r2, [r7, #4]
  memset(Ptr, Value, Size);
10052788:	687a      	ldr	r2, [r7, #4]
1005278a:	68b9      	ldr	r1, [r7, #8]
1005278c:	68fb      	ldr	r3, [r7, #12]
1005278e:	0018      	movs	r0, r3
10052790:	f015 f9e8 	bl	10067b64 <memset>
}
10052794:	46c0      	nop			@ (mov r8, r8)
10052796:	46bd      	mov	sp, r7
10052798:	b004      	add	sp, #16
1005279a:	bd80      	pop	{r7, pc}

1005279c <BLEPLAT_MemCmp>:

int BLEPLAT_MemCmp(void *S1, void *S2, unsigned int Size)
{
1005279c:	b580      	push	{r7, lr}
1005279e:	b084      	sub	sp, #16
100527a0:	af00      	add	r7, sp, #0
100527a2:	60f8      	str	r0, [r7, #12]
100527a4:	60b9      	str	r1, [r7, #8]
100527a6:	607a      	str	r2, [r7, #4]
  return memcmp(S1, S2, Size);
100527a8:	687a      	ldr	r2, [r7, #4]
100527aa:	68b9      	ldr	r1, [r7, #8]
100527ac:	68fb      	ldr	r3, [r7, #12]
100527ae:	0018      	movs	r0, r3
100527b0:	f015 f9ca 	bl	10067b48 <memcmp>
100527b4:	0003      	movs	r3, r0
}
100527b6:	0018      	movs	r0, r3
100527b8:	46bd      	mov	sp, r7
100527ba:	b004      	add	sp, #16
100527bc:	bd80      	pop	{r7, pc}

100527be <BLEPLAT_GetPartInfo>:

/**
 * @brief Get Device ID, Version and Revision numbers
 */
void BLEPLAT_GetPartInfo(uint8_t *pDeviceId, uint8_t *pMajorCut, uint8_t *pMinorCut)
{
100527be:	b590      	push	{r4, r7, lr}
100527c0:	b089      	sub	sp, #36	@ 0x24
100527c2:	af00      	add	r7, sp, #0
100527c4:	60f8      	str	r0, [r7, #12]
100527c6:	60b9      	str	r1, [r7, #8]
100527c8:	607a      	str	r2, [r7, #4]
   PartInfoType partInfo;

   /* get partInfo */
   GetPartInfo(&partInfo);
100527ca:	2410      	movs	r4, #16
100527cc:	193b      	adds	r3, r7, r4
100527ce:	0018      	movs	r0, r3
100527d0:	f7ff f85a 	bl	10051888 <GetPartInfo>

  /* Set device ID */
  *pDeviceId  = partInfo.die_id;
100527d4:	0021      	movs	r1, r4
100527d6:	187b      	adds	r3, r7, r1
100527d8:	781a      	ldrb	r2, [r3, #0]
100527da:	68fb      	ldr	r3, [r7, #12]
100527dc:	701a      	strb	r2, [r3, #0]

  /* Set major cut  */
  *pMajorCut = partInfo.die_major;
100527de:	187b      	adds	r3, r7, r1
100527e0:	785a      	ldrb	r2, [r3, #1]
100527e2:	68bb      	ldr	r3, [r7, #8]
100527e4:	701a      	strb	r2, [r3, #0]

  /* Set minor cut */
  *pMinorCut = partInfo.die_cut;
100527e6:	187b      	adds	r3, r7, r1
100527e8:	789a      	ldrb	r2, [r3, #2]
100527ea:	687b      	ldr	r3, [r7, #4]
100527ec:	701a      	strb	r2, [r3, #0]
}
100527ee:	46c0      	nop			@ (mov r8, r8)
100527f0:	46bd      	mov	sp, r7
100527f2:	b009      	add	sp, #36	@ 0x24
100527f4:	bd90      	pop	{r4, r7, pc}

100527f6 <BLEPLAT_AesEcbEncrypt>:
}

void BLEPLAT_AesEcbEncrypt(const uint32_t *plainTextData,
                           const uint32_t *key,
                           uint32_t *encryptedData)
{
100527f6:	b580      	push	{r7, lr}
100527f8:	b084      	sub	sp, #16
100527fa:	af00      	add	r7, sp, #0
100527fc:	60f8      	str	r0, [r7, #12]
100527fe:	60b9      	str	r1, [r7, #8]
10052800:	607a      	str	r2, [r7, #4]
  HW_AES_Encrypt(plainTextData, key, encryptedData);
10052802:	687a      	ldr	r2, [r7, #4]
10052804:	68b9      	ldr	r1, [r7, #8]
10052806:	68fb      	ldr	r3, [r7, #12]
10052808:	0018      	movs	r0, r3
1005280a:	f7fc fe6b 	bl	1004f4e4 <HW_AES_Encrypt>
}
1005280e:	46c0      	nop			@ (mov r8, r8)
10052810:	46bd      	mov	sp, r7
10052812:	b004      	add	sp, #16
10052814:	bd80      	pop	{r7, pc}

10052816 <BLEPLAT_AesCMACEncryptInit>:

int32_t BLEPLAT_AesCMACEncryptInit(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx)
{
10052816:	b580      	push	{r7, lr}
10052818:	b082      	sub	sp, #8
1005281a:	af00      	add	r7, sp, #0
1005281c:	6078      	str	r0, [r7, #4]
  return AES_CMAC_Encrypt_Init((AESCMACctx_stt*)pAESCMACctx);
1005281e:	687b      	ldr	r3, [r7, #4]
10052820:	0018      	movs	r0, r3
10052822:	f016 f843 	bl	100688ac <AES_CMAC_Encrypt_Init>
10052826:	0003      	movs	r3, r0
}
10052828:	0018      	movs	r0, r3
1005282a:	46bd      	mov	sp, r7
1005282c:	b002      	add	sp, #8
1005282e:	bd80      	pop	{r7, pc}

10052830 <BLEPLAT_AesCMACEncryptAppend>:

int32_t BLEPLAT_AesCMACEncryptAppend(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     const uint8_t  *pInputBuffer,
                                     int32_t InputSize)
{
10052830:	b580      	push	{r7, lr}
10052832:	b084      	sub	sp, #16
10052834:	af00      	add	r7, sp, #0
10052836:	60f8      	str	r0, [r7, #12]
10052838:	60b9      	str	r1, [r7, #8]
1005283a:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Append((AESCMACctx_stt*)pAESCMACctx, pInputBuffer, InputSize);
1005283c:	687a      	ldr	r2, [r7, #4]
1005283e:	68b9      	ldr	r1, [r7, #8]
10052840:	68fb      	ldr	r3, [r7, #12]
10052842:	0018      	movs	r0, r3
10052844:	f015 fec8 	bl	100685d8 <AES_CMAC_Encrypt_Append>
10052848:	0003      	movs	r3, r0
}
1005284a:	0018      	movs	r0, r3
1005284c:	46bd      	mov	sp, r7
1005284e:	b004      	add	sp, #16
10052850:	bd80      	pop	{r7, pc}

10052852 <BLEPLAT_AesCMACEncryptFinish>:

int32_t BLEPLAT_AesCMACEncryptFinish(BLEPLAT_AESCMACctxTypeDef *pAESCMACctx,
                                     uint8_t *pOutputBuffer,
                                     int32_t *pOutputSize)
{
10052852:	b580      	push	{r7, lr}
10052854:	b084      	sub	sp, #16
10052856:	af00      	add	r7, sp, #0
10052858:	60f8      	str	r0, [r7, #12]
1005285a:	60b9      	str	r1, [r7, #8]
1005285c:	607a      	str	r2, [r7, #4]
  return AES_CMAC_Encrypt_Finish((AESCMACctx_stt*)pAESCMACctx, pOutputBuffer, pOutputSize);
1005285e:	687a      	ldr	r2, [r7, #4]
10052860:	68b9      	ldr	r1, [r7, #8]
10052862:	68fb      	ldr	r3, [r7, #12]
10052864:	0018      	movs	r0, r3
10052866:	f015 ffeb 	bl	10068840 <AES_CMAC_Encrypt_Finish>
1005286a:	0003      	movs	r3, r0
}
1005286c:	0018      	movs	r0, r3
1005286e:	46bd      	mov	sp, r7
10052870:	b004      	add	sp, #16
10052872:	bd80      	pop	{r7, pc}

10052874 <BLEPLAT_RngGetRandom16>:

void BLEPLAT_RngGetRandom16(uint16_t* num)
{
10052874:	b580      	push	{r7, lr}
10052876:	b082      	sub	sp, #8
10052878:	af00      	add	r7, sp, #0
1005287a:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom16(num);
1005287c:	687b      	ldr	r3, [r7, #4]
1005287e:	0018      	movs	r0, r3
10052880:	f7fc ff98 	bl	1004f7b4 <HW_RNG_GetRandom16>
}
10052884:	46c0      	nop			@ (mov r8, r8)
10052886:	46bd      	mov	sp, r7
10052888:	b002      	add	sp, #8
1005288a:	bd80      	pop	{r7, pc}

1005288c <BLEPLAT_RngGetRandom32>:

void BLEPLAT_RngGetRandom32(uint32_t* num)
{
1005288c:	b580      	push	{r7, lr}
1005288e:	b082      	sub	sp, #8
10052890:	af00      	add	r7, sp, #0
10052892:	6078      	str	r0, [r7, #4]
  HW_RNG_GetRandom32(num);
10052894:	687b      	ldr	r3, [r7, #4]
10052896:	0018      	movs	r0, r3
10052898:	f7fc ffa6 	bl	1004f7e8 <HW_RNG_GetRandom32>
}
1005289c:	46c0      	nop			@ (mov r8, r8)
1005289e:	46bd      	mov	sp, r7
100528a0:	b002      	add	sp, #8
100528a2:	bd80      	pop	{r7, pc}

100528a4 <BLEPLAT_GetMaxPALevel>:
{
  RADIO_ReadTransmitPower(Min_Tx_Power, Max_Tx_Power);
}

uint8_t BLEPLAT_GetMaxPALevel(void)
{
100528a4:	b580      	push	{r7, lr}
100528a6:	af00      	add	r7, sp, #0
  return RADIO_GetMaxPALevel();
100528a8:	f7fe ff12 	bl	100516d0 <RADIO_GetMaxPALevel>
100528ac:	0003      	movs	r3, r0
}
100528ae:	0018      	movs	r0, r3
100528b0:	46bd      	mov	sp, r7
100528b2:	bd80      	pop	{r7, pc}

100528b4 <BLEPLAT_GetDefaultPALevel>:

uint8_t BLEPLAT_GetDefaultPALevel(void)
{
100528b4:	b580      	push	{r7, lr}
100528b6:	af00      	add	r7, sp, #0
  return RADIO_GetDefaultPALevel();
100528b8:	f7fe ff10 	bl	100516dc <RADIO_GetDefaultPALevel>
100528bc:	0003      	movs	r3, r0
}
100528be:	0018      	movs	r0, r3
100528c0:	46bd      	mov	sp, r7
100528c2:	bd80      	pop	{r7, pc}

100528c4 <BLEPLAT_SetHighPower>:

void BLEPLAT_SetHighPower(uint8_t enable)
{
100528c4:	b580      	push	{r7, lr}
100528c6:	b082      	sub	sp, #8
100528c8:	af00      	add	r7, sp, #0
100528ca:	0002      	movs	r2, r0
100528cc:	1dfb      	adds	r3, r7, #7
100528ce:	701a      	strb	r2, [r3, #0]
  RADIO_SetHighPower((FunctionalState)enable);
100528d0:	1dfb      	adds	r3, r7, #7
100528d2:	781b      	ldrb	r3, [r3, #0]
100528d4:	0018      	movs	r0, r3
100528d6:	f7fe ff07 	bl	100516e8 <RADIO_SetHighPower>
}
100528da:	46c0      	nop			@ (mov r8, r8)
100528dc:	46bd      	mov	sp, r7
100528de:	b002      	add	sp, #8
100528e0:	bd80      	pop	{r7, pc}

100528e2 <BLEPLAT_CalculateRSSI>:

int8_t BLEPLAT_CalculateRSSI(void)
{
100528e2:	b580      	push	{r7, lr}
100528e4:	af00      	add	r7, sp, #0
  return HAL_RADIO_ReadRSSI();
100528e6:	f7f7 ff0d 	bl	1004a704 <HAL_RADIO_ReadRSSI>
100528ea:	0003      	movs	r3, r0
}
100528ec:	0018      	movs	r0, r3
100528ee:	46bd      	mov	sp, r7
100528f0:	bd80      	pop	{r7, pc}

100528f2 <BLEPLAT_GetCurrentSysTime>:
{
  RADIO_AntIdxRemap(AntPattLen, pAntRamTable, pAntPatt);
}

uint64_t BLEPLAT_GetCurrentSysTime(void)
{
100528f2:	b580      	push	{r7, lr}
100528f4:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_GetCurrentSysTime();
100528f6:	f7f8 fc5b 	bl	1004b1b0 <HAL_RADIO_TIMER_GetCurrentSysTime>
100528fa:	0002      	movs	r2, r0
100528fc:	000b      	movs	r3, r1

}
100528fe:	0010      	movs	r0, r2
10052900:	0019      	movs	r1, r3
10052902:	46bd      	mov	sp, r7
10052904:	bd80      	pop	{r7, pc}

10052906 <BLEPLAT_StartTimer>:
{
  return HAL_RADIO_TIMER_GetFutureSysTime64(SysTime);
}

int BLEPLAT_StartTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle, uint64_t Time)
{
10052906:	b580      	push	{r7, lr}
10052908:	b084      	sub	sp, #16
1005290a:	af00      	add	r7, sp, #0
1005290c:	60f8      	str	r0, [r7, #12]
1005290e:	603a      	str	r2, [r7, #0]
10052910:	607b      	str	r3, [r7, #4]
  return HAL_RADIO_TIMER_StartVirtualTimerSysTime((VTIMER_HandleType*)TimerHandle, Time);
10052912:	683a      	ldr	r2, [r7, #0]
10052914:	687b      	ldr	r3, [r7, #4]
10052916:	68f9      	ldr	r1, [r7, #12]
10052918:	0008      	movs	r0, r1
1005291a:	f7f8 fc5b 	bl	1004b1d4 <HAL_RADIO_TIMER_StartVirtualTimerSysTime>
1005291e:	0003      	movs	r3, r0
}
10052920:	0018      	movs	r0, r3
10052922:	46bd      	mov	sp, r7
10052924:	b004      	add	sp, #16
10052926:	bd80      	pop	{r7, pc}

10052928 <BLEPLAT_StopTimer>:

void BLEPLAT_StopTimer(BLEPLAT_TimerHandleTypeDef *TimerHandle)
{
10052928:	b580      	push	{r7, lr}
1005292a:	b082      	sub	sp, #8
1005292c:	af00      	add	r7, sp, #0
1005292e:	6078      	str	r0, [r7, #4]
  HAL_RADIO_TIMER_StopVirtualTimer((VTIMER_HandleType*)TimerHandle);
10052930:	687b      	ldr	r3, [r7, #4]
10052932:	0018      	movs	r0, r3
10052934:	f7f8 fc68 	bl	1004b208 <HAL_RADIO_TIMER_StopVirtualTimer>
}
10052938:	46c0      	nop			@ (mov r8, r8)
1005293a:	46bd      	mov	sp, r7
1005293c:	b002      	add	sp, #8
1005293e:	bd80      	pop	{r7, pc}

10052940 <BLEPLAT_SetRadioTimerValue>:

uint8_t BLEPLAT_SetRadioTimerValue(uint32_t Time, uint8_t EventType, uint8_t CalReq)
{
10052940:	b580      	push	{r7, lr}
10052942:	b082      	sub	sp, #8
10052944:	af00      	add	r7, sp, #0
10052946:	6078      	str	r0, [r7, #4]
10052948:	0008      	movs	r0, r1
1005294a:	0011      	movs	r1, r2
1005294c:	1cfb      	adds	r3, r7, #3
1005294e:	1c02      	adds	r2, r0, #0
10052950:	701a      	strb	r2, [r3, #0]
10052952:	1cbb      	adds	r3, r7, #2
10052954:	1c0a      	adds	r2, r1, #0
10052956:	701a      	strb	r2, [r3, #0]
  return HAL_RADIO_TIMER_SetRadioTimerValue(Time, EventType, CalReq);
10052958:	1cbb      	adds	r3, r7, #2
1005295a:	781a      	ldrb	r2, [r3, #0]
1005295c:	1cfb      	adds	r3, r7, #3
1005295e:	7819      	ldrb	r1, [r3, #0]
10052960:	687b      	ldr	r3, [r7, #4]
10052962:	0018      	movs	r0, r3
10052964:	f7f8 fb0e 	bl	1004af84 <HAL_RADIO_TIMER_SetRadioTimerValue>
10052968:	0003      	movs	r3, r0
1005296a:	b2db      	uxtb	r3, r3
}
1005296c:	0018      	movs	r0, r3
1005296e:	46bd      	mov	sp, r7
10052970:	b002      	add	sp, #8
10052972:	bd80      	pop	{r7, pc}

10052974 <BLEPLAT_ClearRadioTimerValue>:

uint8_t BLEPLAT_ClearRadioTimerValue(void)
{
10052974:	b580      	push	{r7, lr}
10052976:	af00      	add	r7, sp, #0
  return HAL_RADIO_TIMER_ClearRadioTimerValue();
10052978:	f7f8 fb54 	bl	1004b024 <HAL_RADIO_TIMER_ClearRadioTimerValue>
1005297c:	0003      	movs	r3, r0
1005297e:	b2db      	uxtb	r3, r3
}
10052980:	0018      	movs	r0, r3
10052982:	46bd      	mov	sp, r7
10052984:	bd80      	pop	{r7, pc}

10052986 <BLEPLAT_GetAnchorPoint>:

uint64_t BLEPLAT_GetAnchorPoint(uint64_t *pCurrentSysTime)
{
10052986:	b580      	push	{r7, lr}
10052988:	b082      	sub	sp, #8
1005298a:	af00      	add	r7, sp, #0
1005298c:	6078      	str	r0, [r7, #4]
  return HAL_RADIO_TIMER_GetAnchorPoint(pCurrentSysTime);
1005298e:	687b      	ldr	r3, [r7, #4]
10052990:	0018      	movs	r0, r3
10052992:	f7f8 fae3 	bl	1004af5c <HAL_RADIO_TIMER_GetAnchorPoint>
10052996:	0002      	movs	r2, r0
10052998:	000b      	movs	r3, r1
}
1005299a:	0010      	movs	r0, r2
1005299c:	0019      	movs	r1, r3
1005299e:	46bd      	mov	sp, r7
100529a0:	b002      	add	sp, #8
100529a2:	bd80      	pop	{r7, pc}

100529a4 <BLEPLAT_SetRadioCloseTimeout>:

void BLEPLAT_SetRadioCloseTimeout(void)
{
100529a4:	b580      	push	{r7, lr}
100529a6:	af00      	add	r7, sp, #0
  HAL_RADIO_TIMER_SetRadioCloseTimeout();
100529a8:	f7f8 fbb0 	bl	1004b10c <HAL_RADIO_TIMER_SetRadioCloseTimeout>
}
100529ac:	46c0      	nop			@ (mov r8, r8)
100529ae:	46bd      	mov	sp, r7
100529b0:	bd80      	pop	{r7, pc}
	...

100529b4 <LL_RADIO_SetCurrentConnectionMachineNumber>:
{
100529b4:	b580      	push	{r7, lr}
100529b6:	b082      	sub	sp, #8
100529b8:	af00      	add	r7, sp, #0
100529ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_CURSTMACHNUM, value);
100529bc:	4b07      	ldr	r3, [pc, #28]	@ (100529dc <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
100529be:	685b      	ldr	r3, [r3, #4]
100529c0:	227f      	movs	r2, #127	@ 0x7f
100529c2:	4393      	bics	r3, r2
100529c4:	0019      	movs	r1, r3
100529c6:	687b      	ldr	r3, [r7, #4]
100529c8:	227f      	movs	r2, #127	@ 0x7f
100529ca:	401a      	ands	r2, r3
100529cc:	4b03      	ldr	r3, [pc, #12]	@ (100529dc <LL_RADIO_SetCurrentConnectionMachineNumber+0x28>)
100529ce:	430a      	orrs	r2, r1
100529d0:	605a      	str	r2, [r3, #4]
}
100529d2:	46c0      	nop			@ (mov r8, r8)
100529d4:	46bd      	mov	sp, r7
100529d6:	b002      	add	sp, #8
100529d8:	bd80      	pop	{r7, pc}
100529da:	46c0      	nop			@ (mov r8, r8)
100529dc:	200000c0 	.word	0x200000c0

100529e0 <LL_RADIO_GlobalEnableBlue>:
{
100529e0:	b580      	push	{r7, lr}
100529e2:	af00      	add	r7, sp, #0
  SET_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
100529e4:	4b04      	ldr	r3, [pc, #16]	@ (100529f8 <LL_RADIO_GlobalEnableBlue+0x18>)
100529e6:	685a      	ldr	r2, [r3, #4]
100529e8:	4b03      	ldr	r3, [pc, #12]	@ (100529f8 <LL_RADIO_GlobalEnableBlue+0x18>)
100529ea:	2180      	movs	r1, #128	@ 0x80
100529ec:	430a      	orrs	r2, r1
100529ee:	605a      	str	r2, [r3, #4]
}
100529f0:	46c0      	nop			@ (mov r8, r8)
100529f2:	46bd      	mov	sp, r7
100529f4:	bd80      	pop	{r7, pc}
100529f6:	46c0      	nop			@ (mov r8, r8)
100529f8:	200000c0 	.word	0x200000c0

100529fc <LL_RADIO_GlobalDisableBlue>:
{
100529fc:	b580      	push	{r7, lr}
100529fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(BLUEGLOBWORD->WORD1, GLOBAL_WORD1_ACTIVE);
10052a00:	4b04      	ldr	r3, [pc, #16]	@ (10052a14 <LL_RADIO_GlobalDisableBlue+0x18>)
10052a02:	685a      	ldr	r2, [r3, #4]
10052a04:	4b03      	ldr	r3, [pc, #12]	@ (10052a14 <LL_RADIO_GlobalDisableBlue+0x18>)
10052a06:	2180      	movs	r1, #128	@ 0x80
10052a08:	438a      	bics	r2, r1
10052a0a:	605a      	str	r2, [r3, #4]
}
10052a0c:	46c0      	nop			@ (mov r8, r8)
10052a0e:	46bd      	mov	sp, r7
10052a10:	bd80      	pop	{r7, pc}
10052a12:	46c0      	nop			@ (mov r8, r8)
10052a14:	200000c0 	.word	0x200000c0

10052a18 <LL_RADIO_SetReceiveWindowTimeout>:
{
10052a18:	b580      	push	{r7, lr}
10052a1a:	b082      	sub	sp, #8
10052a1c:	af00      	add	r7, sp, #0
10052a1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUEGLOBWORD->WORD4, GLOBAL_WORD4_RCVTIMEOUT, value);
10052a20:	4b07      	ldr	r3, [pc, #28]	@ (10052a40 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10052a22:	691b      	ldr	r3, [r3, #16]
10052a24:	4a07      	ldr	r2, [pc, #28]	@ (10052a44 <LL_RADIO_SetReceiveWindowTimeout+0x2c>)
10052a26:	4013      	ands	r3, r2
10052a28:	0019      	movs	r1, r3
10052a2a:	687b      	ldr	r3, [r7, #4]
10052a2c:	021b      	lsls	r3, r3, #8
10052a2e:	4a06      	ldr	r2, [pc, #24]	@ (10052a48 <LL_RADIO_SetReceiveWindowTimeout+0x30>)
10052a30:	401a      	ands	r2, r3
10052a32:	4b03      	ldr	r3, [pc, #12]	@ (10052a40 <LL_RADIO_SetReceiveWindowTimeout+0x28>)
10052a34:	430a      	orrs	r2, r1
10052a36:	611a      	str	r2, [r3, #16]
}
10052a38:	46c0      	nop			@ (mov r8, r8)
10052a3a:	46bd      	mov	sp, r7
10052a3c:	b002      	add	sp, #8
10052a3e:	bd80      	pop	{r7, pc}
10052a40:	200000c0 	.word	0x200000c0
10052a44:	f00000ff 	.word	0xf00000ff
10052a48:	0fffff00 	.word	0x0fffff00

10052a4c <LL_RADIO_SetUnmappedChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUnmappedChannel(uint8_t stateMachineNo, uint32_t value)
{
10052a4c:	b580      	push	{r7, lr}
10052a4e:	b082      	sub	sp, #8
10052a50:	af00      	add	r7, sp, #0
10052a52:	0002      	movs	r2, r0
10052a54:	6039      	str	r1, [r7, #0]
10052a56:	1dfb      	adds	r3, r7, #7
10052a58:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_UCHAN, value);
10052a5a:	1dfb      	adds	r3, r7, #7
10052a5c:	781b      	ldrb	r3, [r3, #0]
10052a5e:	225c      	movs	r2, #92	@ 0x5c
10052a60:	4353      	muls	r3, r2
10052a62:	4a0b      	ldr	r2, [pc, #44]	@ (10052a90 <LL_RADIO_SetUnmappedChannel+0x44>)
10052a64:	4694      	mov	ip, r2
10052a66:	4463      	add	r3, ip
10052a68:	681b      	ldr	r3, [r3, #0]
10052a6a:	223f      	movs	r2, #63	@ 0x3f
10052a6c:	4393      	bics	r3, r2
10052a6e:	0019      	movs	r1, r3
10052a70:	683b      	ldr	r3, [r7, #0]
10052a72:	223f      	movs	r2, #63	@ 0x3f
10052a74:	401a      	ands	r2, r3
10052a76:	1dfb      	adds	r3, r7, #7
10052a78:	781b      	ldrb	r3, [r3, #0]
10052a7a:	205c      	movs	r0, #92	@ 0x5c
10052a7c:	4343      	muls	r3, r0
10052a7e:	4804      	ldr	r0, [pc, #16]	@ (10052a90 <LL_RADIO_SetUnmappedChannel+0x44>)
10052a80:	4684      	mov	ip, r0
10052a82:	4463      	add	r3, ip
10052a84:	430a      	orrs	r2, r1
10052a86:	601a      	str	r2, [r3, #0]
}
10052a88:	46c0      	nop			@ (mov r8, r8)
10052a8a:	46bd      	mov	sp, r7
10052a8c:	b002      	add	sp, #8
10052a8e:	bd80      	pop	{r7, pc}
10052a90:	200000dc 	.word	0x200000dc

10052a94 <LL_RADIO_RadioCommandList_Enable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Enable(uint8_t stateMachineNo)
{
10052a94:	b580      	push	{r7, lr}
10052a96:	b082      	sub	sp, #8
10052a98:	af00      	add	r7, sp, #0
10052a9a:	0002      	movs	r2, r0
10052a9c:	1dfb      	adds	r3, r7, #7
10052a9e:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10052aa0:	1dfb      	adds	r3, r7, #7
10052aa2:	781b      	ldrb	r3, [r3, #0]
10052aa4:	225c      	movs	r2, #92	@ 0x5c
10052aa6:	4353      	muls	r3, r2
10052aa8:	4a08      	ldr	r2, [pc, #32]	@ (10052acc <LL_RADIO_RadioCommandList_Enable+0x38>)
10052aaa:	4694      	mov	ip, r2
10052aac:	4463      	add	r3, ip
10052aae:	681a      	ldr	r2, [r3, #0]
10052ab0:	1dfb      	adds	r3, r7, #7
10052ab2:	781b      	ldrb	r3, [r3, #0]
10052ab4:	215c      	movs	r1, #92	@ 0x5c
10052ab6:	434b      	muls	r3, r1
10052ab8:	4904      	ldr	r1, [pc, #16]	@ (10052acc <LL_RADIO_RadioCommandList_Enable+0x38>)
10052aba:	468c      	mov	ip, r1
10052abc:	4463      	add	r3, ip
10052abe:	2140      	movs	r1, #64	@ 0x40
10052ac0:	430a      	orrs	r2, r1
10052ac2:	601a      	str	r2, [r3, #0]
}
10052ac4:	46c0      	nop			@ (mov r8, r8)
10052ac6:	46bd      	mov	sp, r7
10052ac8:	b002      	add	sp, #8
10052aca:	bd80      	pop	{r7, pc}
10052acc:	200000dc 	.word	0x200000dc

10052ad0 <LL_RADIO_RadioCommandList_Disable>:
  * @rmtoll WORD0          RADIOCOMLISTENA            LL_RADIO_RadioCommandList_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_RadioCommandList_Disable(uint8_t stateMachineNo)
{
10052ad0:	b580      	push	{r7, lr}
10052ad2:	b082      	sub	sp, #8
10052ad4:	af00      	add	r7, sp, #0
10052ad6:	0002      	movs	r2, r0
10052ad8:	1dfb      	adds	r3, r7, #7
10052ada:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RADIOCOMLISTENA);
10052adc:	1dfb      	adds	r3, r7, #7
10052ade:	781b      	ldrb	r3, [r3, #0]
10052ae0:	225c      	movs	r2, #92	@ 0x5c
10052ae2:	4353      	muls	r3, r2
10052ae4:	4a08      	ldr	r2, [pc, #32]	@ (10052b08 <LL_RADIO_RadioCommandList_Disable+0x38>)
10052ae6:	4694      	mov	ip, r2
10052ae8:	4463      	add	r3, ip
10052aea:	681a      	ldr	r2, [r3, #0]
10052aec:	1dfb      	adds	r3, r7, #7
10052aee:	781b      	ldrb	r3, [r3, #0]
10052af0:	215c      	movs	r1, #92	@ 0x5c
10052af2:	434b      	muls	r3, r1
10052af4:	4904      	ldr	r1, [pc, #16]	@ (10052b08 <LL_RADIO_RadioCommandList_Disable+0x38>)
10052af6:	468c      	mov	ip, r1
10052af8:	4463      	add	r3, ip
10052afa:	2140      	movs	r1, #64	@ 0x40
10052afc:	438a      	bics	r2, r1
10052afe:	601a      	str	r2, [r3, #0]
}
10052b00:	46c0      	nop			@ (mov r8, r8)
10052b02:	46bd      	mov	sp, r7
10052b04:	b002      	add	sp, #8
10052b06:	bd80      	pop	{r7, pc}
10052b08:	200000dc 	.word	0x200000dc

10052b0c <LL_RADIO_TxMode_Enable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Enable(uint8_t stateMachineNo)
{
10052b0c:	b580      	push	{r7, lr}
10052b0e:	b082      	sub	sp, #8
10052b10:	af00      	add	r7, sp, #0
10052b12:	0002      	movs	r2, r0
10052b14:	1dfb      	adds	r3, r7, #7
10052b16:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10052b18:	1dfb      	adds	r3, r7, #7
10052b1a:	781b      	ldrb	r3, [r3, #0]
10052b1c:	225c      	movs	r2, #92	@ 0x5c
10052b1e:	4353      	muls	r3, r2
10052b20:	4a08      	ldr	r2, [pc, #32]	@ (10052b44 <LL_RADIO_TxMode_Enable+0x38>)
10052b22:	4694      	mov	ip, r2
10052b24:	4463      	add	r3, ip
10052b26:	681a      	ldr	r2, [r3, #0]
10052b28:	1dfb      	adds	r3, r7, #7
10052b2a:	781b      	ldrb	r3, [r3, #0]
10052b2c:	215c      	movs	r1, #92	@ 0x5c
10052b2e:	434b      	muls	r3, r1
10052b30:	4904      	ldr	r1, [pc, #16]	@ (10052b44 <LL_RADIO_TxMode_Enable+0x38>)
10052b32:	468c      	mov	ip, r1
10052b34:	4463      	add	r3, ip
10052b36:	2180      	movs	r1, #128	@ 0x80
10052b38:	430a      	orrs	r2, r1
10052b3a:	601a      	str	r2, [r3, #0]
}
10052b3c:	46c0      	nop			@ (mov r8, r8)
10052b3e:	46bd      	mov	sp, r7
10052b40:	b002      	add	sp, #8
10052b42:	bd80      	pop	{r7, pc}
10052b44:	200000dc 	.word	0x200000dc

10052b48 <LL_RADIO_TxMode_Disable>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_TxMode_Disable(uint8_t stateMachineNo)
{
10052b48:	b580      	push	{r7, lr}
10052b4a:	b082      	sub	sp, #8
10052b4c:	af00      	add	r7, sp, #0
10052b4e:	0002      	movs	r2, r0
10052b50:	1dfb      	adds	r3, r7, #7
10052b52:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE);
10052b54:	1dfb      	adds	r3, r7, #7
10052b56:	781b      	ldrb	r3, [r3, #0]
10052b58:	225c      	movs	r2, #92	@ 0x5c
10052b5a:	4353      	muls	r3, r2
10052b5c:	4a08      	ldr	r2, [pc, #32]	@ (10052b80 <LL_RADIO_TxMode_Disable+0x38>)
10052b5e:	4694      	mov	ip, r2
10052b60:	4463      	add	r3, ip
10052b62:	681a      	ldr	r2, [r3, #0]
10052b64:	1dfb      	adds	r3, r7, #7
10052b66:	781b      	ldrb	r3, [r3, #0]
10052b68:	215c      	movs	r1, #92	@ 0x5c
10052b6a:	434b      	muls	r3, r1
10052b6c:	4904      	ldr	r1, [pc, #16]	@ (10052b80 <LL_RADIO_TxMode_Disable+0x38>)
10052b6e:	468c      	mov	ip, r1
10052b70:	4463      	add	r3, ip
10052b72:	2180      	movs	r1, #128	@ 0x80
10052b74:	438a      	bics	r2, r1
10052b76:	601a      	str	r2, [r3, #0]
}
10052b78:	46c0      	nop			@ (mov r8, r8)
10052b7a:	46bd      	mov	sp, r7
10052b7c:	b002      	add	sp, #8
10052b7e:	bd80      	pop	{r7, pc}
10052b80:	200000dc 	.word	0x200000dc

10052b84 <LL_RADIO_TxMode_IsEnabled>:
  * @rmtoll WORD0          TXMODE            LL_RADIO_TxMode_IsEnabled
  * @param  stateMachineNo
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RADIO_TxMode_IsEnabled(uint8_t stateMachineNo)
{
10052b84:	b580      	push	{r7, lr}
10052b86:	b082      	sub	sp, #8
10052b88:	af00      	add	r7, sp, #0
10052b8a:	0002      	movs	r2, r0
10052b8c:	1dfb      	adds	r3, r7, #7
10052b8e:	701a      	strb	r2, [r3, #0]
  return ((READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXMODE) == (STATEMACH_WORD0_TXMODE)) ? 1U : 0U);
10052b90:	1dfb      	adds	r3, r7, #7
10052b92:	781b      	ldrb	r3, [r3, #0]
10052b94:	225c      	movs	r2, #92	@ 0x5c
10052b96:	4353      	muls	r3, r2
10052b98:	4a07      	ldr	r2, [pc, #28]	@ (10052bb8 <LL_RADIO_TxMode_IsEnabled+0x34>)
10052b9a:	4694      	mov	ip, r2
10052b9c:	4463      	add	r3, ip
10052b9e:	681b      	ldr	r3, [r3, #0]
10052ba0:	2280      	movs	r2, #128	@ 0x80
10052ba2:	4013      	ands	r3, r2
10052ba4:	2b80      	cmp	r3, #128	@ 0x80
10052ba6:	d101      	bne.n	10052bac <LL_RADIO_TxMode_IsEnabled+0x28>
10052ba8:	2301      	movs	r3, #1
10052baa:	e000      	b.n	10052bae <LL_RADIO_TxMode_IsEnabled+0x2a>
10052bac:	2300      	movs	r3, #0
}
10052bae:	0018      	movs	r0, r3
10052bb0:	46bd      	mov	sp, r7
10052bb2:	b002      	add	sp, #8
10052bb4:	bd80      	pop	{r7, pc}
10052bb6:	46c0      	nop			@ (mov r8, r8)
10052bb8:	200000dc 	.word	0x200000dc

10052bbc <LL_RADIO_SetRemapChannel>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRemapChannel(uint8_t stateMachineNo, uint32_t value)
{
10052bbc:	b580      	push	{r7, lr}
10052bbe:	b082      	sub	sp, #8
10052bc0:	af00      	add	r7, sp, #0
10052bc2:	0002      	movs	r2, r0
10052bc4:	6039      	str	r1, [r7, #0]
10052bc6:	1dfb      	adds	r3, r7, #7
10052bc8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_REMAP_CHAN, value);
10052bca:	1dfb      	adds	r3, r7, #7
10052bcc:	781b      	ldrb	r3, [r3, #0]
10052bce:	225c      	movs	r2, #92	@ 0x5c
10052bd0:	4353      	muls	r3, r2
10052bd2:	4a0c      	ldr	r2, [pc, #48]	@ (10052c04 <LL_RADIO_SetRemapChannel+0x48>)
10052bd4:	4694      	mov	ip, r2
10052bd6:	4463      	add	r3, ip
10052bd8:	681b      	ldr	r3, [r3, #0]
10052bda:	4a0b      	ldr	r2, [pc, #44]	@ (10052c08 <LL_RADIO_SetRemapChannel+0x4c>)
10052bdc:	4013      	ands	r3, r2
10052bde:	0019      	movs	r1, r3
10052be0:	683b      	ldr	r3, [r7, #0]
10052be2:	021a      	lsls	r2, r3, #8
10052be4:	23fc      	movs	r3, #252	@ 0xfc
10052be6:	019b      	lsls	r3, r3, #6
10052be8:	401a      	ands	r2, r3
10052bea:	1dfb      	adds	r3, r7, #7
10052bec:	781b      	ldrb	r3, [r3, #0]
10052bee:	205c      	movs	r0, #92	@ 0x5c
10052bf0:	4343      	muls	r3, r0
10052bf2:	4804      	ldr	r0, [pc, #16]	@ (10052c04 <LL_RADIO_SetRemapChannel+0x48>)
10052bf4:	4684      	mov	ip, r0
10052bf6:	4463      	add	r3, ip
10052bf8:	430a      	orrs	r2, r1
10052bfa:	601a      	str	r2, [r3, #0]
}
10052bfc:	46c0      	nop			@ (mov r8, r8)
10052bfe:	46bd      	mov	sp, r7
10052c00:	b002      	add	sp, #8
10052c02:	bd80      	pop	{r7, pc}
10052c04:	200000dc 	.word	0x200000dc
10052c08:	ffffc0ff 	.word	0xffffc0ff

10052c0c <LL_RADIO_GetRemapChannel>:
  * @rmtoll WORD0          REMAP_CHAN       LL_RADIO_GetRemapChannel
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetRemapChannel(uint8_t stateMachineNo)
{
10052c0c:	b580      	push	{r7, lr}
10052c0e:	b082      	sub	sp, #8
10052c10:	af00      	add	r7, sp, #0
10052c12:	0002      	movs	r2, r0
10052c14:	1dfb      	adds	r3, r7, #7
10052c16:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0,
10052c18:	1dfb      	adds	r3, r7, #7
10052c1a:	781b      	ldrb	r3, [r3, #0]
10052c1c:	225c      	movs	r2, #92	@ 0x5c
10052c1e:	4353      	muls	r3, r2
10052c20:	4a05      	ldr	r2, [pc, #20]	@ (10052c38 <LL_RADIO_GetRemapChannel+0x2c>)
10052c22:	4694      	mov	ip, r2
10052c24:	4463      	add	r3, ip
10052c26:	681b      	ldr	r3, [r3, #0]
10052c28:	0a1b      	lsrs	r3, r3, #8
10052c2a:	223f      	movs	r2, #63	@ 0x3f
10052c2c:	4013      	ands	r3, r2
                             STATEMACH_WORD0_REMAP_CHAN) >> STATEMACH_WORD0_REMAP_CHAN_Pos);
}
10052c2e:	0018      	movs	r0, r3
10052c30:	46bd      	mov	sp, r7
10052c32:	b002      	add	sp, #8
10052c34:	bd80      	pop	{r7, pc}
10052c36:	46c0      	nop			@ (mov r8, r8)
10052c38:	200000dc 	.word	0x200000dc

10052c3c <LL_RADIO_ToggleNextExpectedSequenceNumber>:
  * @rmtoll WORD0          NESN       LL_RADIO_ToggleNextExpectedSequenceNumber
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ToggleNextExpectedSequenceNumber(uint8_t stateMachineNo)
{
10052c3c:	b580      	push	{r7, lr}
10052c3e:	b082      	sub	sp, #8
10052c40:	af00      	add	r7, sp, #0
10052c42:	0002      	movs	r2, r0
10052c44:	1dfb      	adds	r3, r7, #7
10052c46:	701a      	strb	r2, [r3, #0]
  TOGGLE_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_NESN);
10052c48:	1dfb      	adds	r3, r7, #7
10052c4a:	781b      	ldrb	r3, [r3, #0]
10052c4c:	225c      	movs	r2, #92	@ 0x5c
10052c4e:	4353      	muls	r3, r2
10052c50:	4a09      	ldr	r2, [pc, #36]	@ (10052c78 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
10052c52:	4694      	mov	ip, r2
10052c54:	4463      	add	r3, ip
10052c56:	681a      	ldr	r2, [r3, #0]
10052c58:	1dfb      	adds	r3, r7, #7
10052c5a:	781b      	ldrb	r3, [r3, #0]
10052c5c:	215c      	movs	r1, #92	@ 0x5c
10052c5e:	434b      	muls	r3, r1
10052c60:	4905      	ldr	r1, [pc, #20]	@ (10052c78 <LL_RADIO_ToggleNextExpectedSequenceNumber+0x3c>)
10052c62:	468c      	mov	ip, r1
10052c64:	4463      	add	r3, ip
10052c66:	2180      	movs	r1, #128	@ 0x80
10052c68:	0209      	lsls	r1, r1, #8
10052c6a:	404a      	eors	r2, r1
10052c6c:	601a      	str	r2, [r3, #0]
}
10052c6e:	46c0      	nop			@ (mov r8, r8)
10052c70:	46bd      	mov	sp, r7
10052c72:	b002      	add	sp, #8
10052c74:	bd80      	pop	{r7, pc}
10052c76:	46c0      	nop			@ (mov r8, r8)
10052c78:	200000dc 	.word	0x200000dc

10052c7c <LL_RADIO_Encryption_Enable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Enable(uint8_t stateMachineNo)
{
10052c7c:	b580      	push	{r7, lr}
10052c7e:	b082      	sub	sp, #8
10052c80:	af00      	add	r7, sp, #0
10052c82:	0002      	movs	r2, r0
10052c84:	1dfb      	adds	r3, r7, #7
10052c86:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10052c88:	1dfb      	adds	r3, r7, #7
10052c8a:	781b      	ldrb	r3, [r3, #0]
10052c8c:	225c      	movs	r2, #92	@ 0x5c
10052c8e:	4353      	muls	r3, r2
10052c90:	4a09      	ldr	r2, [pc, #36]	@ (10052cb8 <LL_RADIO_Encryption_Enable+0x3c>)
10052c92:	4694      	mov	ip, r2
10052c94:	4463      	add	r3, ip
10052c96:	681a      	ldr	r2, [r3, #0]
10052c98:	1dfb      	adds	r3, r7, #7
10052c9a:	781b      	ldrb	r3, [r3, #0]
10052c9c:	215c      	movs	r1, #92	@ 0x5c
10052c9e:	434b      	muls	r3, r1
10052ca0:	4905      	ldr	r1, [pc, #20]	@ (10052cb8 <LL_RADIO_Encryption_Enable+0x3c>)
10052ca2:	468c      	mov	ip, r1
10052ca4:	4463      	add	r3, ip
10052ca6:	2180      	movs	r1, #128	@ 0x80
10052ca8:	0389      	lsls	r1, r1, #14
10052caa:	430a      	orrs	r2, r1
10052cac:	601a      	str	r2, [r3, #0]
}
10052cae:	46c0      	nop			@ (mov r8, r8)
10052cb0:	46bd      	mov	sp, r7
10052cb2:	b002      	add	sp, #8
10052cb4:	bd80      	pop	{r7, pc}
10052cb6:	46c0      	nop			@ (mov r8, r8)
10052cb8:	200000dc 	.word	0x200000dc

10052cbc <LL_RADIO_Encryption_Disable>:
  * @rmtoll WORD0          ENCRYPTON            LL_RADIO_Encryption_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Encryption_Disable(uint8_t stateMachineNo)
{
10052cbc:	b580      	push	{r7, lr}
10052cbe:	b082      	sub	sp, #8
10052cc0:	af00      	add	r7, sp, #0
10052cc2:	0002      	movs	r2, r0
10052cc4:	1dfb      	adds	r3, r7, #7
10052cc6:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_ENCRYPTON);
10052cc8:	1dfb      	adds	r3, r7, #7
10052cca:	781b      	ldrb	r3, [r3, #0]
10052ccc:	225c      	movs	r2, #92	@ 0x5c
10052cce:	4353      	muls	r3, r2
10052cd0:	4a08      	ldr	r2, [pc, #32]	@ (10052cf4 <LL_RADIO_Encryption_Disable+0x38>)
10052cd2:	4694      	mov	ip, r2
10052cd4:	4463      	add	r3, ip
10052cd6:	681a      	ldr	r2, [r3, #0]
10052cd8:	1dfb      	adds	r3, r7, #7
10052cda:	781b      	ldrb	r3, [r3, #0]
10052cdc:	215c      	movs	r1, #92	@ 0x5c
10052cde:	434b      	muls	r3, r1
10052ce0:	4904      	ldr	r1, [pc, #16]	@ (10052cf4 <LL_RADIO_Encryption_Disable+0x38>)
10052ce2:	468c      	mov	ip, r1
10052ce4:	4463      	add	r3, ip
10052ce6:	4904      	ldr	r1, [pc, #16]	@ (10052cf8 <LL_RADIO_Encryption_Disable+0x3c>)
10052ce8:	400a      	ands	r2, r1
10052cea:	601a      	str	r2, [r3, #0]
}
10052cec:	46c0      	nop			@ (mov r8, r8)
10052cee:	46bd      	mov	sp, r7
10052cf0:	b002      	add	sp, #8
10052cf2:	bd80      	pop	{r7, pc}
10052cf4:	200000dc 	.word	0x200000dc
10052cf8:	ffdfffff 	.word	0xffdfffff

10052cfc <LL_RADIO_SetTransmissionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionPhy(uint8_t stateMachineNo, uint32_t value)
{
10052cfc:	b580      	push	{r7, lr}
10052cfe:	b082      	sub	sp, #8
10052d00:	af00      	add	r7, sp, #0
10052d02:	0002      	movs	r2, r0
10052d04:	6039      	str	r1, [r7, #0]
10052d06:	1dfb      	adds	r3, r7, #7
10052d08:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY, value);
10052d0a:	1dfb      	adds	r3, r7, #7
10052d0c:	781b      	ldrb	r3, [r3, #0]
10052d0e:	225c      	movs	r2, #92	@ 0x5c
10052d10:	4353      	muls	r3, r2
10052d12:	4a0c      	ldr	r2, [pc, #48]	@ (10052d44 <LL_RADIO_SetTransmissionPhy+0x48>)
10052d14:	4694      	mov	ip, r2
10052d16:	4463      	add	r3, ip
10052d18:	681b      	ldr	r3, [r3, #0]
10052d1a:	4a0b      	ldr	r2, [pc, #44]	@ (10052d48 <LL_RADIO_SetTransmissionPhy+0x4c>)
10052d1c:	4013      	ands	r3, r2
10052d1e:	0019      	movs	r1, r3
10052d20:	683b      	ldr	r3, [r7, #0]
10052d22:	061a      	lsls	r2, r3, #24
10052d24:	23e0      	movs	r3, #224	@ 0xe0
10052d26:	04db      	lsls	r3, r3, #19
10052d28:	401a      	ands	r2, r3
10052d2a:	1dfb      	adds	r3, r7, #7
10052d2c:	781b      	ldrb	r3, [r3, #0]
10052d2e:	205c      	movs	r0, #92	@ 0x5c
10052d30:	4343      	muls	r3, r0
10052d32:	4804      	ldr	r0, [pc, #16]	@ (10052d44 <LL_RADIO_SetTransmissionPhy+0x48>)
10052d34:	4684      	mov	ip, r0
10052d36:	4463      	add	r3, ip
10052d38:	430a      	orrs	r2, r1
10052d3a:	601a      	str	r2, [r3, #0]
}
10052d3c:	46c0      	nop			@ (mov r8, r8)
10052d3e:	46bd      	mov	sp, r7
10052d40:	b002      	add	sp, #8
10052d42:	bd80      	pop	{r7, pc}
10052d44:	200000dc 	.word	0x200000dc
10052d48:	f8ffffff 	.word	0xf8ffffff

10052d4c <LL_RADIO_GetTransmissionPhy>:
  * @rmtoll WORD0          TXPHY       LL_RADIO_GetTransmissionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetTransmissionPhy(uint8_t stateMachineNo)
{
10052d4c:	b580      	push	{r7, lr}
10052d4e:	b082      	sub	sp, #8
10052d50:	af00      	add	r7, sp, #0
10052d52:	0002      	movs	r2, r0
10052d54:	1dfb      	adds	r3, r7, #7
10052d56:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_TXPHY) >> STATEMACH_WORD0_TXPHY_Pos);
10052d58:	1dfb      	adds	r3, r7, #7
10052d5a:	781b      	ldrb	r3, [r3, #0]
10052d5c:	225c      	movs	r2, #92	@ 0x5c
10052d5e:	4353      	muls	r3, r2
10052d60:	4a05      	ldr	r2, [pc, #20]	@ (10052d78 <LL_RADIO_GetTransmissionPhy+0x2c>)
10052d62:	4694      	mov	ip, r2
10052d64:	4463      	add	r3, ip
10052d66:	681b      	ldr	r3, [r3, #0]
10052d68:	0e1b      	lsrs	r3, r3, #24
10052d6a:	2207      	movs	r2, #7
10052d6c:	4013      	ands	r3, r2
}
10052d6e:	0018      	movs	r0, r3
10052d70:	46bd      	mov	sp, r7
10052d72:	b002      	add	sp, #8
10052d74:	bd80      	pop	{r7, pc}
10052d76:	46c0      	nop			@ (mov r8, r8)
10052d78:	200000dc 	.word	0x200000dc

10052d7c <LL_RADIO_SetCTEDisable>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEDisable(uint8_t stateMachineNo, uint32_t value)
{
10052d7c:	b580      	push	{r7, lr}
10052d7e:	b082      	sub	sp, #8
10052d80:	af00      	add	r7, sp, #0
10052d82:	0002      	movs	r2, r0
10052d84:	6039      	str	r1, [r7, #0]
10052d86:	1dfb      	adds	r3, r7, #7
10052d88:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_CTEDISABLE, value);
10052d8a:	1dfb      	adds	r3, r7, #7
10052d8c:	781b      	ldrb	r3, [r3, #0]
10052d8e:	225c      	movs	r2, #92	@ 0x5c
10052d90:	4353      	muls	r3, r2
10052d92:	4a0c      	ldr	r2, [pc, #48]	@ (10052dc4 <LL_RADIO_SetCTEDisable+0x48>)
10052d94:	4694      	mov	ip, r2
10052d96:	4463      	add	r3, ip
10052d98:	681b      	ldr	r3, [r3, #0]
10052d9a:	4a0b      	ldr	r2, [pc, #44]	@ (10052dc8 <LL_RADIO_SetCTEDisable+0x4c>)
10052d9c:	4013      	ands	r3, r2
10052d9e:	0019      	movs	r1, r3
10052da0:	683b      	ldr	r3, [r7, #0]
10052da2:	06da      	lsls	r2, r3, #27
10052da4:	2380      	movs	r3, #128	@ 0x80
10052da6:	051b      	lsls	r3, r3, #20
10052da8:	401a      	ands	r2, r3
10052daa:	1dfb      	adds	r3, r7, #7
10052dac:	781b      	ldrb	r3, [r3, #0]
10052dae:	205c      	movs	r0, #92	@ 0x5c
10052db0:	4343      	muls	r3, r0
10052db2:	4804      	ldr	r0, [pc, #16]	@ (10052dc4 <LL_RADIO_SetCTEDisable+0x48>)
10052db4:	4684      	mov	ip, r0
10052db6:	4463      	add	r3, ip
10052db8:	430a      	orrs	r2, r1
10052dba:	601a      	str	r2, [r3, #0]
}
10052dbc:	46c0      	nop			@ (mov r8, r8)
10052dbe:	46bd      	mov	sp, r7
10052dc0:	b002      	add	sp, #8
10052dc2:	bd80      	pop	{r7, pc}
10052dc4:	200000dc 	.word	0x200000dc
10052dc8:	f7ffffff 	.word	0xf7ffffff

10052dcc <LL_RADIO_SetReceptionPhy>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetReceptionPhy(uint8_t stateMachineNo, uint32_t value)
{
10052dcc:	b580      	push	{r7, lr}
10052dce:	b082      	sub	sp, #8
10052dd0:	af00      	add	r7, sp, #0
10052dd2:	0002      	movs	r2, r0
10052dd4:	6039      	str	r1, [r7, #0]
10052dd6:	1dfb      	adds	r3, r7, #7
10052dd8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY, value);
10052dda:	1dfb      	adds	r3, r7, #7
10052ddc:	781b      	ldrb	r3, [r3, #0]
10052dde:	225c      	movs	r2, #92	@ 0x5c
10052de0:	4353      	muls	r3, r2
10052de2:	4a0c      	ldr	r2, [pc, #48]	@ (10052e14 <LL_RADIO_SetReceptionPhy+0x48>)
10052de4:	4694      	mov	ip, r2
10052de6:	4463      	add	r3, ip
10052de8:	681b      	ldr	r3, [r3, #0]
10052dea:	4a0b      	ldr	r2, [pc, #44]	@ (10052e18 <LL_RADIO_SetReceptionPhy+0x4c>)
10052dec:	4013      	ands	r3, r2
10052dee:	0019      	movs	r1, r3
10052df0:	683b      	ldr	r3, [r7, #0]
10052df2:	071a      	lsls	r2, r3, #28
10052df4:	23e0      	movs	r3, #224	@ 0xe0
10052df6:	05db      	lsls	r3, r3, #23
10052df8:	401a      	ands	r2, r3
10052dfa:	1dfb      	adds	r3, r7, #7
10052dfc:	781b      	ldrb	r3, [r3, #0]
10052dfe:	205c      	movs	r0, #92	@ 0x5c
10052e00:	4343      	muls	r3, r0
10052e02:	4804      	ldr	r0, [pc, #16]	@ (10052e14 <LL_RADIO_SetReceptionPhy+0x48>)
10052e04:	4684      	mov	ip, r0
10052e06:	4463      	add	r3, ip
10052e08:	430a      	orrs	r2, r1
10052e0a:	601a      	str	r2, [r3, #0]
}
10052e0c:	46c0      	nop			@ (mov r8, r8)
10052e0e:	46bd      	mov	sp, r7
10052e10:	b002      	add	sp, #8
10052e12:	bd80      	pop	{r7, pc}
10052e14:	200000dc 	.word	0x200000dc
10052e18:	8fffffff 	.word	0x8fffffff

10052e1c <LL_RADIO_GetReceptionPhy>:
  * @rmtoll WORD0          RXPHY       LL_RADIO_GetReceptionPhy
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetReceptionPhy(uint8_t stateMachineNo)
{
10052e1c:	b580      	push	{r7, lr}
10052e1e:	b082      	sub	sp, #8
10052e20:	af00      	add	r7, sp, #0
10052e22:	0002      	movs	r2, r0
10052e24:	1dfb      	adds	r3, r7, #7
10052e26:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD0, STATEMACH_WORD0_RXPHY) >> STATEMACH_WORD0_RXPHY_Pos);
10052e28:	1dfb      	adds	r3, r7, #7
10052e2a:	781b      	ldrb	r3, [r3, #0]
10052e2c:	225c      	movs	r2, #92	@ 0x5c
10052e2e:	4353      	muls	r3, r2
10052e30:	4a05      	ldr	r2, [pc, #20]	@ (10052e48 <LL_RADIO_GetReceptionPhy+0x2c>)
10052e32:	4694      	mov	ip, r2
10052e34:	4463      	add	r3, ip
10052e36:	681b      	ldr	r3, [r3, #0]
10052e38:	0f1b      	lsrs	r3, r3, #28
10052e3a:	2207      	movs	r2, #7
10052e3c:	4013      	ands	r3, r2
}
10052e3e:	0018      	movs	r0, r3
10052e40:	46bd      	mov	sp, r7
10052e42:	b002      	add	sp, #8
10052e44:	bd80      	pop	{r7, pc}
10052e46:	46c0      	nop			@ (mov r8, r8)
10052e48:	200000dc 	.word	0x200000dc

10052e4c <LL_RADIO_SetTxPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTxPoint(uint8_t stateMachineNo, uint32_t value)
{
10052e4c:	b580      	push	{r7, lr}
10052e4e:	b082      	sub	sp, #8
10052e50:	af00      	add	r7, sp, #0
10052e52:	0002      	movs	r2, r0
10052e54:	6039      	str	r1, [r7, #0]
10052e56:	1dfb      	adds	r3, r7, #7
10052e58:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD1, STATEMACH_WORD1_TXPOINT, value);
10052e5a:	1dfb      	adds	r3, r7, #7
10052e5c:	781b      	ldrb	r3, [r3, #0]
10052e5e:	225c      	movs	r2, #92	@ 0x5c
10052e60:	4353      	muls	r3, r2
10052e62:	4a08      	ldr	r2, [pc, #32]	@ (10052e84 <LL_RADIO_SetTxPoint+0x38>)
10052e64:	4694      	mov	ip, r2
10052e66:	4463      	add	r3, ip
10052e68:	685b      	ldr	r3, [r3, #4]
10052e6a:	1dfb      	adds	r3, r7, #7
10052e6c:	781b      	ldrb	r3, [r3, #0]
10052e6e:	225c      	movs	r2, #92	@ 0x5c
10052e70:	4353      	muls	r3, r2
10052e72:	4a04      	ldr	r2, [pc, #16]	@ (10052e84 <LL_RADIO_SetTxPoint+0x38>)
10052e74:	4694      	mov	ip, r2
10052e76:	4463      	add	r3, ip
10052e78:	683a      	ldr	r2, [r7, #0]
10052e7a:	605a      	str	r2, [r3, #4]
}
10052e7c:	46c0      	nop			@ (mov r8, r8)
10052e7e:	46bd      	mov	sp, r7
10052e80:	b002      	add	sp, #8
10052e82:	bd80      	pop	{r7, pc}
10052e84:	200000dc 	.word	0x200000dc

10052e88 <LL_RADIO_SetRcvPoint>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetRcvPoint(uint8_t stateMachineNo, uint32_t value)
{
10052e88:	b580      	push	{r7, lr}
10052e8a:	b082      	sub	sp, #8
10052e8c:	af00      	add	r7, sp, #0
10052e8e:	0002      	movs	r2, r0
10052e90:	6039      	str	r1, [r7, #0]
10052e92:	1dfb      	adds	r3, r7, #7
10052e94:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD2, STATEMACH_WORD2_RCVPOINT, value);
10052e96:	1dfb      	adds	r3, r7, #7
10052e98:	781b      	ldrb	r3, [r3, #0]
10052e9a:	225c      	movs	r2, #92	@ 0x5c
10052e9c:	4353      	muls	r3, r2
10052e9e:	4a08      	ldr	r2, [pc, #32]	@ (10052ec0 <LL_RADIO_SetRcvPoint+0x38>)
10052ea0:	4694      	mov	ip, r2
10052ea2:	4463      	add	r3, ip
10052ea4:	689b      	ldr	r3, [r3, #8]
10052ea6:	1dfb      	adds	r3, r7, #7
10052ea8:	781b      	ldrb	r3, [r3, #0]
10052eaa:	225c      	movs	r2, #92	@ 0x5c
10052eac:	4353      	muls	r3, r2
10052eae:	4a04      	ldr	r2, [pc, #16]	@ (10052ec0 <LL_RADIO_SetRcvPoint+0x38>)
10052eb0:	4694      	mov	ip, r2
10052eb2:	4463      	add	r3, ip
10052eb4:	683a      	ldr	r2, [r7, #0]
10052eb6:	609a      	str	r2, [r3, #8]
}
10052eb8:	46c0      	nop			@ (mov r8, r8)
10052eba:	46bd      	mov	sp, r7
10052ebc:	b002      	add	sp, #8
10052ebe:	bd80      	pop	{r7, pc}
10052ec0:	200000dc 	.word	0x200000dc

10052ec4 <LL_RADIO_SetPacketCounterTx_31_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_31_0(uint8_t stateMachineNo, uint32_t value)
{
10052ec4:	b580      	push	{r7, lr}
10052ec6:	b082      	sub	sp, #8
10052ec8:	af00      	add	r7, sp, #0
10052eca:	0002      	movs	r2, r0
10052ecc:	6039      	str	r1, [r7, #0]
10052ece:	1dfb      	adds	r3, r7, #7
10052ed0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD6, STATEMACH_WORD6_PCNTTX_31_0, value);
10052ed2:	1dfb      	adds	r3, r7, #7
10052ed4:	781b      	ldrb	r3, [r3, #0]
10052ed6:	225c      	movs	r2, #92	@ 0x5c
10052ed8:	4353      	muls	r3, r2
10052eda:	4a08      	ldr	r2, [pc, #32]	@ (10052efc <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10052edc:	4694      	mov	ip, r2
10052ede:	4463      	add	r3, ip
10052ee0:	699b      	ldr	r3, [r3, #24]
10052ee2:	1dfb      	adds	r3, r7, #7
10052ee4:	781b      	ldrb	r3, [r3, #0]
10052ee6:	225c      	movs	r2, #92	@ 0x5c
10052ee8:	4353      	muls	r3, r2
10052eea:	4a04      	ldr	r2, [pc, #16]	@ (10052efc <LL_RADIO_SetPacketCounterTx_31_0+0x38>)
10052eec:	4694      	mov	ip, r2
10052eee:	4463      	add	r3, ip
10052ef0:	683a      	ldr	r2, [r7, #0]
10052ef2:	619a      	str	r2, [r3, #24]
}
10052ef4:	46c0      	nop			@ (mov r8, r8)
10052ef6:	46bd      	mov	sp, r7
10052ef8:	b002      	add	sp, #8
10052efa:	bd80      	pop	{r7, pc}
10052efc:	200000dc 	.word	0x200000dc

10052f00 <LL_RADIO_SetPacketCounterTx_39_32>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterTx_39_32(uint8_t stateMachineNo, uint32_t value)
{
10052f00:	b580      	push	{r7, lr}
10052f02:	b082      	sub	sp, #8
10052f04:	af00      	add	r7, sp, #0
10052f06:	0002      	movs	r2, r0
10052f08:	6039      	str	r1, [r7, #0]
10052f0a:	1dfb      	adds	r3, r7, #7
10052f0c:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTTX_39_32, value);
10052f0e:	1dfb      	adds	r3, r7, #7
10052f10:	781b      	ldrb	r3, [r3, #0]
10052f12:	225c      	movs	r2, #92	@ 0x5c
10052f14:	4353      	muls	r3, r2
10052f16:	4a0b      	ldr	r2, [pc, #44]	@ (10052f44 <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10052f18:	4694      	mov	ip, r2
10052f1a:	4463      	add	r3, ip
10052f1c:	69db      	ldr	r3, [r3, #28]
10052f1e:	22ff      	movs	r2, #255	@ 0xff
10052f20:	4393      	bics	r3, r2
10052f22:	0019      	movs	r1, r3
10052f24:	683b      	ldr	r3, [r7, #0]
10052f26:	22ff      	movs	r2, #255	@ 0xff
10052f28:	401a      	ands	r2, r3
10052f2a:	1dfb      	adds	r3, r7, #7
10052f2c:	781b      	ldrb	r3, [r3, #0]
10052f2e:	205c      	movs	r0, #92	@ 0x5c
10052f30:	4343      	muls	r3, r0
10052f32:	4804      	ldr	r0, [pc, #16]	@ (10052f44 <LL_RADIO_SetPacketCounterTx_39_32+0x44>)
10052f34:	4684      	mov	ip, r0
10052f36:	4463      	add	r3, ip
10052f38:	430a      	orrs	r2, r1
10052f3a:	61da      	str	r2, [r3, #28]
}
10052f3c:	46c0      	nop			@ (mov r8, r8)
10052f3e:	46bd      	mov	sp, r7
10052f40:	b002      	add	sp, #8
10052f42:	bd80      	pop	{r7, pc}
10052f44:	200000dc 	.word	0x200000dc

10052f48 <LL_RADIO_GetPacketCounterTx_39_32>:
  * @rmtoll WORD7          PCNTTX_39_32       LL_RADIO_GetPacketCounterTx_39_32
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterTx_39_32(uint8_t stateMachineNo)
{
10052f48:	b580      	push	{r7, lr}
10052f4a:	b082      	sub	sp, #8
10052f4c:	af00      	add	r7, sp, #0
10052f4e:	0002      	movs	r2, r0
10052f50:	1dfb      	adds	r3, r7, #7
10052f52:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10052f54:	1dfb      	adds	r3, r7, #7
10052f56:	781b      	ldrb	r3, [r3, #0]
10052f58:	225c      	movs	r2, #92	@ 0x5c
10052f5a:	4353      	muls	r3, r2
10052f5c:	4a04      	ldr	r2, [pc, #16]	@ (10052f70 <LL_RADIO_GetPacketCounterTx_39_32+0x28>)
10052f5e:	4694      	mov	ip, r2
10052f60:	4463      	add	r3, ip
10052f62:	69db      	ldr	r3, [r3, #28]
10052f64:	22ff      	movs	r2, #255	@ 0xff
10052f66:	4013      	ands	r3, r2
                             STATEMACH_WORD7_PCNTTX_39_32) >> STATEMACH_WORD7_PCNTTX_39_32_Pos);
}
10052f68:	0018      	movs	r0, r3
10052f6a:	46bd      	mov	sp, r7
10052f6c:	b002      	add	sp, #8
10052f6e:	bd80      	pop	{r7, pc}
10052f70:	200000dc 	.word	0x200000dc

10052f74 <LL_RADIO_SetPacketCounterRx_23_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_23_0(uint8_t stateMachineNo, uint32_t value)
{
10052f74:	b580      	push	{r7, lr}
10052f76:	b082      	sub	sp, #8
10052f78:	af00      	add	r7, sp, #0
10052f7a:	0002      	movs	r2, r0
10052f7c:	6039      	str	r1, [r7, #0]
10052f7e:	1dfb      	adds	r3, r7, #7
10052f80:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD7, STATEMACH_WORD7_PCNTRCV_23_0, value);
10052f82:	1dfb      	adds	r3, r7, #7
10052f84:	781b      	ldrb	r3, [r3, #0]
10052f86:	225c      	movs	r2, #92	@ 0x5c
10052f88:	4353      	muls	r3, r2
10052f8a:	4a0b      	ldr	r2, [pc, #44]	@ (10052fb8 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10052f8c:	4694      	mov	ip, r2
10052f8e:	4463      	add	r3, ip
10052f90:	69db      	ldr	r3, [r3, #28]
10052f92:	22ff      	movs	r2, #255	@ 0xff
10052f94:	4013      	ands	r3, r2
10052f96:	0019      	movs	r1, r3
10052f98:	683b      	ldr	r3, [r7, #0]
10052f9a:	021a      	lsls	r2, r3, #8
10052f9c:	1dfb      	adds	r3, r7, #7
10052f9e:	781b      	ldrb	r3, [r3, #0]
10052fa0:	205c      	movs	r0, #92	@ 0x5c
10052fa2:	4343      	muls	r3, r0
10052fa4:	4804      	ldr	r0, [pc, #16]	@ (10052fb8 <LL_RADIO_SetPacketCounterRx_23_0+0x44>)
10052fa6:	4684      	mov	ip, r0
10052fa8:	4463      	add	r3, ip
10052faa:	430a      	orrs	r2, r1
10052fac:	61da      	str	r2, [r3, #28]
}
10052fae:	46c0      	nop			@ (mov r8, r8)
10052fb0:	46bd      	mov	sp, r7
10052fb2:	b002      	add	sp, #8
10052fb4:	bd80      	pop	{r7, pc}
10052fb6:	46c0      	nop			@ (mov r8, r8)
10052fb8:	200000dc 	.word	0x200000dc

10052fbc <LL_RADIO_GetPacketCounterRx_23_0>:
  * @rmtoll WORD7          PCNTRCV_23_0       LL_RADIO_GetPacketCounterRx_23_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_23_0(uint8_t stateMachineNo)
{
10052fbc:	b580      	push	{r7, lr}
10052fbe:	b082      	sub	sp, #8
10052fc0:	af00      	add	r7, sp, #0
10052fc2:	0002      	movs	r2, r0
10052fc4:	1dfb      	adds	r3, r7, #7
10052fc6:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD7,
10052fc8:	1dfb      	adds	r3, r7, #7
10052fca:	781b      	ldrb	r3, [r3, #0]
10052fcc:	225c      	movs	r2, #92	@ 0x5c
10052fce:	4353      	muls	r3, r2
10052fd0:	4a05      	ldr	r2, [pc, #20]	@ (10052fe8 <LL_RADIO_GetPacketCounterRx_23_0+0x2c>)
10052fd2:	4694      	mov	ip, r2
10052fd4:	4463      	add	r3, ip
10052fd6:	69db      	ldr	r3, [r3, #28]
10052fd8:	0a1b      	lsrs	r3, r3, #8
10052fda:	021b      	lsls	r3, r3, #8
10052fdc:	0a1b      	lsrs	r3, r3, #8
                             STATEMACH_WORD7_PCNTRCV_23_0) >> STATEMACH_WORD7_PCNTRCV_23_0_Pos);
}
10052fde:	0018      	movs	r0, r3
10052fe0:	46bd      	mov	sp, r7
10052fe2:	b002      	add	sp, #8
10052fe4:	bd80      	pop	{r7, pc}
10052fe6:	46c0      	nop			@ (mov r8, r8)
10052fe8:	200000dc 	.word	0x200000dc

10052fec <LL_RADIO_SetPacketCounterRx_39_24>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPacketCounterRx_39_24(uint8_t stateMachineNo, uint32_t value)
{
10052fec:	b580      	push	{r7, lr}
10052fee:	b082      	sub	sp, #8
10052ff0:	af00      	add	r7, sp, #0
10052ff2:	0002      	movs	r2, r0
10052ff4:	6039      	str	r1, [r7, #0]
10052ff6:	1dfb      	adds	r3, r7, #7
10052ff8:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_PCNTRCV_39_24, value);
10052ffa:	1dfb      	adds	r3, r7, #7
10052ffc:	781b      	ldrb	r3, [r3, #0]
10052ffe:	225c      	movs	r2, #92	@ 0x5c
10053000:	4353      	muls	r3, r2
10053002:	4a0b      	ldr	r2, [pc, #44]	@ (10053030 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
10053004:	4694      	mov	ip, r2
10053006:	4463      	add	r3, ip
10053008:	6a1b      	ldr	r3, [r3, #32]
1005300a:	0c1b      	lsrs	r3, r3, #16
1005300c:	0419      	lsls	r1, r3, #16
1005300e:	683b      	ldr	r3, [r7, #0]
10053010:	041b      	lsls	r3, r3, #16
10053012:	0c1a      	lsrs	r2, r3, #16
10053014:	1dfb      	adds	r3, r7, #7
10053016:	781b      	ldrb	r3, [r3, #0]
10053018:	205c      	movs	r0, #92	@ 0x5c
1005301a:	4343      	muls	r3, r0
1005301c:	4804      	ldr	r0, [pc, #16]	@ (10053030 <LL_RADIO_SetPacketCounterRx_39_24+0x44>)
1005301e:	4684      	mov	ip, r0
10053020:	4463      	add	r3, ip
10053022:	430a      	orrs	r2, r1
10053024:	621a      	str	r2, [r3, #32]
}
10053026:	46c0      	nop			@ (mov r8, r8)
10053028:	46bd      	mov	sp, r7
1005302a:	b002      	add	sp, #8
1005302c:	bd80      	pop	{r7, pc}
1005302e:	46c0      	nop			@ (mov r8, r8)
10053030:	200000dc 	.word	0x200000dc

10053034 <LL_RADIO_GetPacketCounterRx_39_24>:
  * @rmtoll WORD8          PCNTRCV_39_24       LL_RADIO_GetPacketCounterRx_39_24
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPacketCounterRx_39_24(uint8_t stateMachineNo)
{
10053034:	b580      	push	{r7, lr}
10053036:	b082      	sub	sp, #8
10053038:	af00      	add	r7, sp, #0
1005303a:	0002      	movs	r2, r0
1005303c:	1dfb      	adds	r3, r7, #7
1005303e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD8,
10053040:	1dfb      	adds	r3, r7, #7
10053042:	781b      	ldrb	r3, [r3, #0]
10053044:	225c      	movs	r2, #92	@ 0x5c
10053046:	4353      	muls	r3, r2
10053048:	4a04      	ldr	r2, [pc, #16]	@ (1005305c <LL_RADIO_GetPacketCounterRx_39_24+0x28>)
1005304a:	4694      	mov	ip, r2
1005304c:	4463      	add	r3, ip
1005304e:	6a1b      	ldr	r3, [r3, #32]
10053050:	041b      	lsls	r3, r3, #16
10053052:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORD8_PCNTRCV_39_24) >> STATEMACH_WORD8_PCNTRCV_39_24_Pos);
}
10053054:	0018      	movs	r0, r3
10053056:	46bd      	mov	sp, r7
10053058:	b002      	add	sp, #8
1005305a:	bd80      	pop	{r7, pc}
1005305c:	200000dc 	.word	0x200000dc

10053060 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(uint8_t stateMachineNo)
{
10053060:	b580      	push	{r7, lr}
10053062:	b082      	sub	sp, #8
10053064:	af00      	add	r7, sp, #0
10053066:	0002      	movs	r2, r0
10053068:	1dfb      	adds	r3, r7, #7
1005306a:	701a      	strb	r2, [r3, #0]
  SET_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
1005306c:	1dfb      	adds	r3, r7, #7
1005306e:	781b      	ldrb	r3, [r3, #0]
10053070:	225c      	movs	r2, #92	@ 0x5c
10053072:	4353      	muls	r3, r2
10053074:	4a09      	ldr	r2, [pc, #36]	@ (1005309c <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
10053076:	4694      	mov	ip, r2
10053078:	4463      	add	r3, ip
1005307a:	6a1a      	ldr	r2, [r3, #32]
1005307c:	1dfb      	adds	r3, r7, #7
1005307e:	781b      	ldrb	r3, [r3, #0]
10053080:	215c      	movs	r1, #92	@ 0x5c
10053082:	434b      	muls	r3, r1
10053084:	4905      	ldr	r1, [pc, #20]	@ (1005309c <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable+0x3c>)
10053086:	468c      	mov	ip, r1
10053088:	4463      	add	r3, ip
1005308a:	2180      	movs	r1, #128	@ 0x80
1005308c:	0589      	lsls	r1, r1, #22
1005308e:	430a      	orrs	r2, r1
10053090:	621a      	str	r2, [r3, #32]
}
10053092:	46c0      	nop			@ (mov r8, r8)
10053094:	46bd      	mov	sp, r7
10053096:	b002      	add	sp, #8
10053098:	bd80      	pop	{r7, pc}
1005309a:	46c0      	nop			@ (mov r8, r8)
1005309c:	200000dc 	.word	0x200000dc

100530a0 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>:
  * @rmtoll WORD8          INTENCERROR            LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable
  * @param  stateMachineNo
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(uint8_t stateMachineNo)
{
100530a0:	b580      	push	{r7, lr}
100530a2:	b082      	sub	sp, #8
100530a4:	af00      	add	r7, sp, #0
100530a6:	0002      	movs	r2, r0
100530a8:	1dfb      	adds	r3, r7, #7
100530aa:	701a      	strb	r2, [r3, #0]
  CLEAR_BIT((BLUEDATAWORD + stateMachineNo)->WORD8, STATEMACH_WORD8_INTENCERROR);
100530ac:	1dfb      	adds	r3, r7, #7
100530ae:	781b      	ldrb	r3, [r3, #0]
100530b0:	225c      	movs	r2, #92	@ 0x5c
100530b2:	4353      	muls	r3, r2
100530b4:	4a08      	ldr	r2, [pc, #32]	@ (100530d8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
100530b6:	4694      	mov	ip, r2
100530b8:	4463      	add	r3, ip
100530ba:	6a1a      	ldr	r2, [r3, #32]
100530bc:	1dfb      	adds	r3, r7, #7
100530be:	781b      	ldrb	r3, [r3, #0]
100530c0:	215c      	movs	r1, #92	@ 0x5c
100530c2:	434b      	muls	r3, r1
100530c4:	4904      	ldr	r1, [pc, #16]	@ (100530d8 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x38>)
100530c6:	468c      	mov	ip, r1
100530c8:	4463      	add	r3, ip
100530ca:	4904      	ldr	r1, [pc, #16]	@ (100530dc <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable+0x3c>)
100530cc:	400a      	ands	r2, r1
100530ce:	621a      	str	r2, [r3, #32]
}
100530d0:	46c0      	nop			@ (mov r8, r8)
100530d2:	46bd      	mov	sp, r7
100530d4:	b002      	add	sp, #8
100530d6:	bd80      	pop	{r7, pc}
100530d8:	200000dc 	.word	0x200000dc
100530dc:	dfffffff 	.word	0xdfffffff

100530e0 <LL_RADIO_SetAccessAddress>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAccessAddress(uint8_t stateMachineNo, uint32_t value)
{
100530e0:	b580      	push	{r7, lr}
100530e2:	b082      	sub	sp, #8
100530e4:	af00      	add	r7, sp, #0
100530e6:	0002      	movs	r2, r0
100530e8:	6039      	str	r1, [r7, #0]
100530ea:	1dfb      	adds	r3, r7, #7
100530ec:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORD9, STATEMACH_WORD9_ACCADDR, value);
100530ee:	1dfb      	adds	r3, r7, #7
100530f0:	781b      	ldrb	r3, [r3, #0]
100530f2:	225c      	movs	r2, #92	@ 0x5c
100530f4:	4353      	muls	r3, r2
100530f6:	4a08      	ldr	r2, [pc, #32]	@ (10053118 <LL_RADIO_SetAccessAddress+0x38>)
100530f8:	4694      	mov	ip, r2
100530fa:	4463      	add	r3, ip
100530fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
100530fe:	1dfb      	adds	r3, r7, #7
10053100:	781b      	ldrb	r3, [r3, #0]
10053102:	225c      	movs	r2, #92	@ 0x5c
10053104:	4353      	muls	r3, r2
10053106:	4a04      	ldr	r2, [pc, #16]	@ (10053118 <LL_RADIO_SetAccessAddress+0x38>)
10053108:	4694      	mov	ip, r2
1005310a:	4463      	add	r3, ip
1005310c:	683a      	ldr	r2, [r7, #0]
1005310e:	625a      	str	r2, [r3, #36]	@ 0x24
}
10053110:	46c0      	nop			@ (mov r8, r8)
10053112:	46bd      	mov	sp, r7
10053114:	b002      	add	sp, #8
10053116:	bd80      	pop	{r7, pc}
10053118:	200000dc 	.word	0x200000dc

1005311c <LL_RADIO_GetAccessAddress>:
  * @rmtoll WORD9          ACCADDR       LL_RADIO_GetAccessAddress
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetAccessAddress(uint8_t stateMachineNo)
{
1005311c:	b580      	push	{r7, lr}
1005311e:	b082      	sub	sp, #8
10053120:	af00      	add	r7, sp, #0
10053122:	0002      	movs	r2, r0
10053124:	1dfb      	adds	r3, r7, #7
10053126:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORD9,
10053128:	1dfb      	adds	r3, r7, #7
1005312a:	781b      	ldrb	r3, [r3, #0]
1005312c:	225c      	movs	r2, #92	@ 0x5c
1005312e:	4353      	muls	r3, r2
10053130:	4a03      	ldr	r2, [pc, #12]	@ (10053140 <LL_RADIO_GetAccessAddress+0x24>)
10053132:	4694      	mov	ip, r2
10053134:	4463      	add	r3, ip
10053136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                             STATEMACH_WORD9_ACCADDR) >> STATEMACH_WORD9_ACCADDR_Pos);
}
10053138:	0018      	movs	r0, r3
1005313a:	46bd      	mov	sp, r7
1005313c:	b002      	add	sp, #8
1005313e:	bd80      	pop	{r7, pc}
10053140:	200000dc 	.word	0x200000dc

10053144 <LL_RADIO_SetCRCInitializationValue>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationValue(uint8_t stateMachineNo, uint32_t value)
{
10053144:	b580      	push	{r7, lr}
10053146:	b082      	sub	sp, #8
10053148:	af00      	add	r7, sp, #0
1005314a:	0002      	movs	r2, r0
1005314c:	6039      	str	r1, [r7, #0]
1005314e:	1dfb      	adds	r3, r7, #7
10053150:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_CRCINIT, value);
10053152:	1dfb      	adds	r3, r7, #7
10053154:	781b      	ldrb	r3, [r3, #0]
10053156:	225c      	movs	r2, #92	@ 0x5c
10053158:	4353      	muls	r3, r2
1005315a:	4a0b      	ldr	r2, [pc, #44]	@ (10053188 <LL_RADIO_SetCRCInitializationValue+0x44>)
1005315c:	4694      	mov	ip, r2
1005315e:	4463      	add	r3, ip
10053160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
10053162:	0e1b      	lsrs	r3, r3, #24
10053164:	0619      	lsls	r1, r3, #24
10053166:	683b      	ldr	r3, [r7, #0]
10053168:	021b      	lsls	r3, r3, #8
1005316a:	0a1a      	lsrs	r2, r3, #8
1005316c:	1dfb      	adds	r3, r7, #7
1005316e:	781b      	ldrb	r3, [r3, #0]
10053170:	205c      	movs	r0, #92	@ 0x5c
10053172:	4343      	muls	r3, r0
10053174:	4804      	ldr	r0, [pc, #16]	@ (10053188 <LL_RADIO_SetCRCInitializationValue+0x44>)
10053176:	4684      	mov	ip, r0
10053178:	4463      	add	r3, ip
1005317a:	430a      	orrs	r2, r1
1005317c:	629a      	str	r2, [r3, #40]	@ 0x28
}
1005317e:	46c0      	nop			@ (mov r8, r8)
10053180:	46bd      	mov	sp, r7
10053182:	b002      	add	sp, #8
10053184:	bd80      	pop	{r7, pc}
10053186:	46c0      	nop			@ (mov r8, r8)
10053188:	200000dc 	.word	0x200000dc

1005318c <LL_RADIO_SetMaximumReceiveLength>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetMaximumReceiveLength(uint8_t stateMachineNo, uint32_t value)
{
1005318c:	b580      	push	{r7, lr}
1005318e:	b082      	sub	sp, #8
10053190:	af00      	add	r7, sp, #0
10053192:	0002      	movs	r2, r0
10053194:	6039      	str	r1, [r7, #0]
10053196:	1dfb      	adds	r3, r7, #7
10053198:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDA, STATEMACH_WORDA_MAXRECEIVEDLENGTH, value);
1005319a:	1dfb      	adds	r3, r7, #7
1005319c:	781b      	ldrb	r3, [r3, #0]
1005319e:	225c      	movs	r2, #92	@ 0x5c
100531a0:	4353      	muls	r3, r2
100531a2:	4a0a      	ldr	r2, [pc, #40]	@ (100531cc <LL_RADIO_SetMaximumReceiveLength+0x40>)
100531a4:	4694      	mov	ip, r2
100531a6:	4463      	add	r3, ip
100531a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
100531aa:	021b      	lsls	r3, r3, #8
100531ac:	0a19      	lsrs	r1, r3, #8
100531ae:	683b      	ldr	r3, [r7, #0]
100531b0:	061a      	lsls	r2, r3, #24
100531b2:	1dfb      	adds	r3, r7, #7
100531b4:	781b      	ldrb	r3, [r3, #0]
100531b6:	205c      	movs	r0, #92	@ 0x5c
100531b8:	4343      	muls	r3, r0
100531ba:	4804      	ldr	r0, [pc, #16]	@ (100531cc <LL_RADIO_SetMaximumReceiveLength+0x40>)
100531bc:	4684      	mov	ip, r0
100531be:	4463      	add	r3, ip
100531c0:	430a      	orrs	r2, r1
100531c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
100531c4:	46c0      	nop			@ (mov r8, r8)
100531c6:	46bd      	mov	sp, r7
100531c8:	b002      	add	sp, #8
100531ca:	bd80      	pop	{r7, pc}
100531cc:	200000dc 	.word	0x200000dc

100531d0 <LL_RADIO_SetPAPower>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetPAPower(uint8_t stateMachineNo, uint32_t value)
{
100531d0:	b580      	push	{r7, lr}
100531d2:	b082      	sub	sp, #8
100531d4:	af00      	add	r7, sp, #0
100531d6:	0002      	movs	r2, r0
100531d8:	6039      	str	r1, [r7, #0]
100531da:	1dfb      	adds	r3, r7, #7
100531dc:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_PAPOWER, value);
100531de:	1dfb      	adds	r3, r7, #7
100531e0:	781b      	ldrb	r3, [r3, #0]
100531e2:	225c      	movs	r2, #92	@ 0x5c
100531e4:	4353      	muls	r3, r2
100531e6:	4a0b      	ldr	r2, [pc, #44]	@ (10053214 <LL_RADIO_SetPAPower+0x44>)
100531e8:	4694      	mov	ip, r2
100531ea:	4463      	add	r3, ip
100531ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100531ee:	221f      	movs	r2, #31
100531f0:	4393      	bics	r3, r2
100531f2:	0019      	movs	r1, r3
100531f4:	683b      	ldr	r3, [r7, #0]
100531f6:	221f      	movs	r2, #31
100531f8:	401a      	ands	r2, r3
100531fa:	1dfb      	adds	r3, r7, #7
100531fc:	781b      	ldrb	r3, [r3, #0]
100531fe:	205c      	movs	r0, #92	@ 0x5c
10053200:	4343      	muls	r3, r0
10053202:	4804      	ldr	r0, [pc, #16]	@ (10053214 <LL_RADIO_SetPAPower+0x44>)
10053204:	4684      	mov	ip, r0
10053206:	4463      	add	r3, ip
10053208:	430a      	orrs	r2, r1
1005320a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
1005320c:	46c0      	nop			@ (mov r8, r8)
1005320e:	46bd      	mov	sp, r7
10053210:	b002      	add	sp, #8
10053212:	bd80      	pop	{r7, pc}
10053214:	200000dc 	.word	0x200000dc

10053218 <LL_RADIO_GetPAPower>:
  * @rmtoll WORDB          PAPOWER       LL_RADIO_GetPAPower
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetPAPower(uint8_t stateMachineNo)
{
10053218:	b580      	push	{r7, lr}
1005321a:	b082      	sub	sp, #8
1005321c:	af00      	add	r7, sp, #0
1005321e:	0002      	movs	r2, r0
10053220:	1dfb      	adds	r3, r7, #7
10053222:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10053224:	1dfb      	adds	r3, r7, #7
10053226:	781b      	ldrb	r3, [r3, #0]
10053228:	225c      	movs	r2, #92	@ 0x5c
1005322a:	4353      	muls	r3, r2
1005322c:	4a04      	ldr	r2, [pc, #16]	@ (10053240 <LL_RADIO_GetPAPower+0x28>)
1005322e:	4694      	mov	ip, r2
10053230:	4463      	add	r3, ip
10053232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053234:	221f      	movs	r2, #31
10053236:	4013      	ands	r3, r2
                             STATEMACH_WORDB_PAPOWER) >> STATEMACH_WORDB_PAPOWER_Pos);
}
10053238:	0018      	movs	r0, r3
1005323a:	46bd      	mov	sp, r7
1005323c:	b002      	add	sp, #8
1005323e:	bd80      	pop	{r7, pc}
10053240:	200000dc 	.word	0x200000dc

10053244 <LL_RADIO_SetHopIncrement>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetHopIncrement(uint8_t stateMachineNo, uint32_t value)
{
10053244:	b580      	push	{r7, lr}
10053246:	b082      	sub	sp, #8
10053248:	af00      	add	r7, sp, #0
1005324a:	0002      	movs	r2, r0
1005324c:	6039      	str	r1, [r7, #0]
1005324e:	1dfb      	adds	r3, r7, #7
10053250:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_HOPINCR, value);
10053252:	1dfb      	adds	r3, r7, #7
10053254:	781b      	ldrb	r3, [r3, #0]
10053256:	225c      	movs	r2, #92	@ 0x5c
10053258:	4353      	muls	r3, r2
1005325a:	4a0c      	ldr	r2, [pc, #48]	@ (1005328c <LL_RADIO_SetHopIncrement+0x48>)
1005325c:	4694      	mov	ip, r2
1005325e:	4463      	add	r3, ip
10053260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053262:	4a0b      	ldr	r2, [pc, #44]	@ (10053290 <LL_RADIO_SetHopIncrement+0x4c>)
10053264:	4013      	ands	r3, r2
10053266:	0019      	movs	r1, r3
10053268:	683b      	ldr	r3, [r7, #0]
1005326a:	021a      	lsls	r2, r3, #8
1005326c:	23fc      	movs	r3, #252	@ 0xfc
1005326e:	019b      	lsls	r3, r3, #6
10053270:	401a      	ands	r2, r3
10053272:	1dfb      	adds	r3, r7, #7
10053274:	781b      	ldrb	r3, [r3, #0]
10053276:	205c      	movs	r0, #92	@ 0x5c
10053278:	4343      	muls	r3, r0
1005327a:	4804      	ldr	r0, [pc, #16]	@ (1005328c <LL_RADIO_SetHopIncrement+0x48>)
1005327c:	4684      	mov	ip, r0
1005327e:	4463      	add	r3, ip
10053280:	430a      	orrs	r2, r1
10053282:	62da      	str	r2, [r3, #44]	@ 0x2c
}
10053284:	46c0      	nop			@ (mov r8, r8)
10053286:	46bd      	mov	sp, r7
10053288:	b002      	add	sp, #8
1005328a:	bd80      	pop	{r7, pc}
1005328c:	200000dc 	.word	0x200000dc
10053290:	ffffc0ff 	.word	0xffffc0ff

10053294 <LL_RADIO_GetHopIncrement>:
  * @rmtoll WORDB          HOPINCR       LL_RADIO_GetHopIncrement
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetHopIncrement(uint8_t stateMachineNo)
{
10053294:	b580      	push	{r7, lr}
10053296:	b082      	sub	sp, #8
10053298:	af00      	add	r7, sp, #0
1005329a:	0002      	movs	r2, r0
1005329c:	1dfb      	adds	r3, r7, #7
1005329e:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
100532a0:	1dfb      	adds	r3, r7, #7
100532a2:	781b      	ldrb	r3, [r3, #0]
100532a4:	225c      	movs	r2, #92	@ 0x5c
100532a6:	4353      	muls	r3, r2
100532a8:	4a05      	ldr	r2, [pc, #20]	@ (100532c0 <LL_RADIO_GetHopIncrement+0x2c>)
100532aa:	4694      	mov	ip, r2
100532ac:	4463      	add	r3, ip
100532ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100532b0:	0a1b      	lsrs	r3, r3, #8
100532b2:	223f      	movs	r2, #63	@ 0x3f
100532b4:	4013      	ands	r3, r2
                             STATEMACH_WORDB_HOPINCR) >> STATEMACH_WORDB_HOPINCR_Pos);
}
100532b6:	0018      	movs	r0, r3
100532b8:	46bd      	mov	sp, r7
100532ba:	b002      	add	sp, #8
100532bc:	bd80      	pop	{r7, pc}
100532be:	46c0      	nop			@ (mov r8, r8)
100532c0:	200000dc 	.word	0x200000dc

100532c4 <LL_RADIO_SetUsedChannelFlags_15_0>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_15_0(uint8_t stateMachineNo, uint32_t value)
{
100532c4:	b580      	push	{r7, lr}
100532c6:	b082      	sub	sp, #8
100532c8:	af00      	add	r7, sp, #0
100532ca:	0002      	movs	r2, r0
100532cc:	6039      	str	r1, [r7, #0]
100532ce:	1dfb      	adds	r3, r7, #7
100532d0:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDB, STATEMACH_WORDB_USEDCHANNELFLAGS_15_0, value);
100532d2:	1dfb      	adds	r3, r7, #7
100532d4:	781b      	ldrb	r3, [r3, #0]
100532d6:	225c      	movs	r2, #92	@ 0x5c
100532d8:	4353      	muls	r3, r2
100532da:	4a0a      	ldr	r2, [pc, #40]	@ (10053304 <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
100532dc:	4694      	mov	ip, r2
100532de:	4463      	add	r3, ip
100532e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
100532e2:	041b      	lsls	r3, r3, #16
100532e4:	0c19      	lsrs	r1, r3, #16
100532e6:	683b      	ldr	r3, [r7, #0]
100532e8:	041a      	lsls	r2, r3, #16
100532ea:	1dfb      	adds	r3, r7, #7
100532ec:	781b      	ldrb	r3, [r3, #0]
100532ee:	205c      	movs	r0, #92	@ 0x5c
100532f0:	4343      	muls	r3, r0
100532f2:	4804      	ldr	r0, [pc, #16]	@ (10053304 <LL_RADIO_SetUsedChannelFlags_15_0+0x40>)
100532f4:	4684      	mov	ip, r0
100532f6:	4463      	add	r3, ip
100532f8:	430a      	orrs	r2, r1
100532fa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
100532fc:	46c0      	nop			@ (mov r8, r8)
100532fe:	46bd      	mov	sp, r7
10053300:	b002      	add	sp, #8
10053302:	bd80      	pop	{r7, pc}
10053304:	200000dc 	.word	0x200000dc

10053308 <LL_RADIO_GetUsedChannelFlags_15_0>:
  * @rmtoll WORDB          USEDCHANNELFLAGS_15_0       LL_RADIO_GetUsedChannelFlags_15_0
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_15_0(uint8_t stateMachineNo)
{
10053308:	b580      	push	{r7, lr}
1005330a:	b082      	sub	sp, #8
1005330c:	af00      	add	r7, sp, #0
1005330e:	0002      	movs	r2, r0
10053310:	1dfb      	adds	r3, r7, #7
10053312:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDB,
10053314:	1dfb      	adds	r3, r7, #7
10053316:	781b      	ldrb	r3, [r3, #0]
10053318:	225c      	movs	r2, #92	@ 0x5c
1005331a:	4353      	muls	r3, r2
1005331c:	4a05      	ldr	r2, [pc, #20]	@ (10053334 <LL_RADIO_GetUsedChannelFlags_15_0+0x2c>)
1005331e:	4694      	mov	ip, r2
10053320:	4463      	add	r3, ip
10053322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
10053324:	0c1b      	lsrs	r3, r3, #16
10053326:	041b      	lsls	r3, r3, #16
10053328:	0c1b      	lsrs	r3, r3, #16
                             STATEMACH_WORDB_USEDCHANNELFLAGS_15_0) >> STATEMACH_WORDB_USEDCHANNELFLAGS_15_0_Pos);
}
1005332a:	0018      	movs	r0, r3
1005332c:	46bd      	mov	sp, r7
1005332e:	b002      	add	sp, #8
10053330:	bd80      	pop	{r7, pc}
10053332:	46c0      	nop			@ (mov r8, r8)
10053334:	200000dc 	.word	0x200000dc

10053338 <LL_RADIO_SetUsedChannelFlags_36_16>:
  * @param  stateMachineNo
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetUsedChannelFlags_36_16(uint8_t stateMachineNo, uint32_t value)
{
10053338:	b580      	push	{r7, lr}
1005333a:	b082      	sub	sp, #8
1005333c:	af00      	add	r7, sp, #0
1005333e:	0002      	movs	r2, r0
10053340:	6039      	str	r1, [r7, #0]
10053342:	1dfb      	adds	r3, r7, #7
10053344:	701a      	strb	r2, [r3, #0]
  MODIFY_REG_FIELD((BLUEDATAWORD + stateMachineNo)->WORDC, STATEMACH_WORDC_USEDCHANNELFLAGS_36_16, value);
10053346:	1dfb      	adds	r3, r7, #7
10053348:	781b      	ldrb	r3, [r3, #0]
1005334a:	225c      	movs	r2, #92	@ 0x5c
1005334c:	4353      	muls	r3, r2
1005334e:	4a0b      	ldr	r2, [pc, #44]	@ (1005337c <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
10053350:	4694      	mov	ip, r2
10053352:	4463      	add	r3, ip
10053354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
10053356:	0d9b      	lsrs	r3, r3, #22
10053358:	0599      	lsls	r1, r3, #22
1005335a:	683b      	ldr	r3, [r7, #0]
1005335c:	029b      	lsls	r3, r3, #10
1005335e:	0a9a      	lsrs	r2, r3, #10
10053360:	1dfb      	adds	r3, r7, #7
10053362:	781b      	ldrb	r3, [r3, #0]
10053364:	205c      	movs	r0, #92	@ 0x5c
10053366:	4343      	muls	r3, r0
10053368:	4804      	ldr	r0, [pc, #16]	@ (1005337c <LL_RADIO_SetUsedChannelFlags_36_16+0x44>)
1005336a:	4684      	mov	ip, r0
1005336c:	4463      	add	r3, ip
1005336e:	430a      	orrs	r2, r1
10053370:	631a      	str	r2, [r3, #48]	@ 0x30
}
10053372:	46c0      	nop			@ (mov r8, r8)
10053374:	46bd      	mov	sp, r7
10053376:	b002      	add	sp, #8
10053378:	bd80      	pop	{r7, pc}
1005337a:	46c0      	nop			@ (mov r8, r8)
1005337c:	200000dc 	.word	0x200000dc

10053380 <LL_RADIO_GetUsedChannelFlags_36_16>:
  * @rmtoll WORDC          USEDCHANNELFLAGS_36_16       LL_RADIO_GetUsedChannelFlags_36_16
  * @param  stateMachineNo
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetUsedChannelFlags_36_16(uint8_t stateMachineNo)
{
10053380:	b580      	push	{r7, lr}
10053382:	b082      	sub	sp, #8
10053384:	af00      	add	r7, sp, #0
10053386:	0002      	movs	r2, r0
10053388:	1dfb      	adds	r3, r7, #7
1005338a:	701a      	strb	r2, [r3, #0]
  return (uint32_t)(READ_BIT((BLUEDATAWORD + stateMachineNo)->WORDC,
1005338c:	1dfb      	adds	r3, r7, #7
1005338e:	781b      	ldrb	r3, [r3, #0]
10053390:	225c      	movs	r2, #92	@ 0x5c
10053392:	4353      	muls	r3, r2
10053394:	4a04      	ldr	r2, [pc, #16]	@ (100533a8 <LL_RADIO_GetUsedChannelFlags_36_16+0x28>)
10053396:	4694      	mov	ip, r2
10053398:	4463      	add	r3, ip
1005339a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
1005339c:	029b      	lsls	r3, r3, #10
1005339e:	0a9b      	lsrs	r3, r3, #10
                             STATEMACH_WORDC_USEDCHANNELFLAGS_36_16) >> STATEMACH_WORDC_USEDCHANNELFLAGS_36_16_Pos);
}
100533a0:	0018      	movs	r0, r3
100533a2:	46bd      	mov	sp, r7
100533a4:	b002      	add	sp, #8
100533a6:	bd80      	pop	{r7, pc}
100533a8:	200000dc 	.word	0x200000dc

100533ac <LL_RADIO_SetNextPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
100533ac:	b580      	push	{r7, lr}
100533ae:	b082      	sub	sp, #8
100533b0:	af00      	add	r7, sp, #0
100533b2:	6078      	str	r0, [r7, #4]
100533b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD0, TXRXPACK_WORD0_NEXTPTR, value);
100533b6:	687b      	ldr	r3, [r7, #4]
100533b8:	681b      	ldr	r3, [r3, #0]
100533ba:	687b      	ldr	r3, [r7, #4]
100533bc:	683a      	ldr	r2, [r7, #0]
100533be:	601a      	str	r2, [r3, #0]
}
100533c0:	46c0      	nop			@ (mov r8, r8)
100533c2:	46bd      	mov	sp, r7
100533c4:	b002      	add	sp, #8
100533c6:	bd80      	pop	{r7, pc}

100533c8 <LL_RADIO_SetCalibrationRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCalibrationRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100533c8:	b580      	push	{r7, lr}
100533ca:	b082      	sub	sp, #8
100533cc:	af00      	add	r7, sp, #0
100533ce:	6078      	str	r0, [r7, #4]
100533d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CALREQ, value);
100533d2:	687b      	ldr	r3, [r7, #4]
100533d4:	685b      	ldr	r3, [r3, #4]
100533d6:	2201      	movs	r2, #1
100533d8:	4393      	bics	r3, r2
100533da:	001a      	movs	r2, r3
100533dc:	683b      	ldr	r3, [r7, #0]
100533de:	2101      	movs	r1, #1
100533e0:	400b      	ands	r3, r1
100533e2:	431a      	orrs	r2, r3
100533e4:	687b      	ldr	r3, [r7, #4]
100533e6:	605a      	str	r2, [r3, #4]
}
100533e8:	46c0      	nop			@ (mov r8, r8)
100533ea:	46bd      	mov	sp, r7
100533ec:	b002      	add	sp, #8
100533ee:	bd80      	pop	{r7, pc}

100533f0 <LL_RADIO_SetKeepSemaRequest>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetKeepSemaRequest(TXRXPACK_TypeDef *p, uint32_t value)
{
100533f0:	b580      	push	{r7, lr}
100533f2:	b082      	sub	sp, #8
100533f4:	af00      	add	r7, sp, #0
100533f6:	6078      	str	r0, [r7, #4]
100533f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_KEEPSEMAREQ, value);
100533fa:	687b      	ldr	r3, [r7, #4]
100533fc:	685b      	ldr	r3, [r3, #4]
100533fe:	2204      	movs	r2, #4
10053400:	4393      	bics	r3, r2
10053402:	001a      	movs	r2, r3
10053404:	683b      	ldr	r3, [r7, #0]
10053406:	009b      	lsls	r3, r3, #2
10053408:	2104      	movs	r1, #4
1005340a:	400b      	ands	r3, r1
1005340c:	431a      	orrs	r2, r3
1005340e:	687b      	ldr	r3, [r7, #4]
10053410:	605a      	str	r2, [r3, #4]
}
10053412:	46c0      	nop			@ (mov r8, r8)
10053414:	46bd      	mov	sp, r7
10053416:	b002      	add	sp, #8
10053418:	bd80      	pop	{r7, pc}

1005341a <LL_RADIO_SetCTEAndSamplingEnable>:
  * @rmtoll WORD1          CTEANDSAMPLINGENABLE        LL_RADIO_SetCTEAndSamplingEnable
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCTEAndSamplingEnable(TXRXPACK_TypeDef *p, uint32_t value)
{
1005341a:	b580      	push	{r7, lr}
1005341c:	b082      	sub	sp, #8
1005341e:	af00      	add	r7, sp, #0
10053420:	6078      	str	r0, [r7, #4]
10053422:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CTEANDSAMPLINGENABLE, value);
10053424:	687b      	ldr	r3, [r7, #4]
10053426:	685b      	ldr	r3, [r3, #4]
10053428:	2208      	movs	r2, #8
1005342a:	4393      	bics	r3, r2
1005342c:	001a      	movs	r2, r3
1005342e:	683b      	ldr	r3, [r7, #0]
10053430:	00db      	lsls	r3, r3, #3
10053432:	2108      	movs	r1, #8
10053434:	400b      	ands	r3, r1
10053436:	431a      	orrs	r2, r3
10053438:	687b      	ldr	r3, [r7, #4]
1005343a:	605a      	str	r2, [r3, #4]
}
1005343c:	46c0      	nop			@ (mov r8, r8)
1005343e:	46bd      	mov	sp, r7
10053440:	b002      	add	sp, #8
10053442:	bd80      	pop	{r7, pc}

10053444 <LL_RADIO_SetCRCInitializationSelector>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetCRCInitializationSelector(TXRXPACK_TypeDef *p, uint32_t value)
{
10053444:	b580      	push	{r7, lr}
10053446:	b082      	sub	sp, #8
10053448:	af00      	add	r7, sp, #0
1005344a:	6078      	str	r0, [r7, #4]
1005344c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_CRCINITSEL, value);
1005344e:	687b      	ldr	r3, [r7, #4]
10053450:	685b      	ldr	r3, [r3, #4]
10053452:	2210      	movs	r2, #16
10053454:	4393      	bics	r3, r2
10053456:	001a      	movs	r2, r3
10053458:	683b      	ldr	r3, [r7, #0]
1005345a:	011b      	lsls	r3, r3, #4
1005345c:	2110      	movs	r1, #16
1005345e:	400b      	ands	r3, r1
10053460:	431a      	orrs	r2, r3
10053462:	687b      	ldr	r3, [r7, #4]
10053464:	605a      	str	r2, [r3, #4]
}
10053466:	46c0      	nop			@ (mov r8, r8)
10053468:	46bd      	mov	sp, r7
1005346a:	b002      	add	sp, #8
1005346c:	bd80      	pop	{r7, pc}

1005346e <LL_RADIO_SetAdvertise>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAdvertise(TXRXPACK_TypeDef *p, uint32_t value)
{
1005346e:	b580      	push	{r7, lr}
10053470:	b082      	sub	sp, #8
10053472:	af00      	add	r7, sp, #0
10053474:	6078      	str	r0, [r7, #4]
10053476:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ADVERTISE, value);
10053478:	687b      	ldr	r3, [r7, #4]
1005347a:	685b      	ldr	r3, [r3, #4]
1005347c:	2220      	movs	r2, #32
1005347e:	4393      	bics	r3, r2
10053480:	001a      	movs	r2, r3
10053482:	683b      	ldr	r3, [r7, #0]
10053484:	015b      	lsls	r3, r3, #5
10053486:	2120      	movs	r1, #32
10053488:	400b      	ands	r3, r1
1005348a:	431a      	orrs	r2, r3
1005348c:	687b      	ldr	r3, [r7, #4]
1005348e:	605a      	str	r2, [r3, #4]
}
10053490:	46c0      	nop			@ (mov r8, r8)
10053492:	46bd      	mov	sp, r7
10053494:	b002      	add	sp, #8
10053496:	bd80      	pop	{r7, pc}

10053498 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>:
  * @rmtoll WORD1          SN_EN            LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable(TXRXPACK_TypeDef *p)
{
10053498:	b580      	push	{r7, lr}
1005349a:	b082      	sub	sp, #8
1005349c:	af00      	add	r7, sp, #0
1005349e:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_SN_EN);
100534a0:	687b      	ldr	r3, [r7, #4]
100534a2:	685b      	ldr	r3, [r3, #4]
100534a4:	2240      	movs	r2, #64	@ 0x40
100534a6:	431a      	orrs	r2, r3
100534a8:	687b      	ldr	r3, [r7, #4]
100534aa:	605a      	str	r2, [r3, #4]
}
100534ac:	46c0      	nop			@ (mov r8, r8)
100534ae:	46bd      	mov	sp, r7
100534b0:	b002      	add	sp, #8
100534b2:	bd80      	pop	{r7, pc}

100534b4 <LL_RADIO_IncrementerChannel_Enable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Enable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Enable(TXRXPACK_TypeDef *p)
{
100534b4:	b580      	push	{r7, lr}
100534b6:	b082      	sub	sp, #8
100534b8:	af00      	add	r7, sp, #0
100534ba:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100534bc:	687b      	ldr	r3, [r7, #4]
100534be:	685b      	ldr	r3, [r3, #4]
100534c0:	2280      	movs	r2, #128	@ 0x80
100534c2:	431a      	orrs	r2, r3
100534c4:	687b      	ldr	r3, [r7, #4]
100534c6:	605a      	str	r2, [r3, #4]
}
100534c8:	46c0      	nop			@ (mov r8, r8)
100534ca:	46bd      	mov	sp, r7
100534cc:	b002      	add	sp, #8
100534ce:	bd80      	pop	{r7, pc}

100534d0 <LL_RADIO_IncrementerChannel_Disable>:
  * @rmtoll WORD1          INCCHAN            LL_RADIO_IncrementerChannel_Disable
  * @param  p RADIO Instance
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IncrementerChannel_Disable(TXRXPACK_TypeDef *p)
{
100534d0:	b580      	push	{r7, lr}
100534d2:	b082      	sub	sp, #8
100534d4:	af00      	add	r7, sp, #0
100534d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_INCCHAN);
100534d8:	687b      	ldr	r3, [r7, #4]
100534da:	685b      	ldr	r3, [r3, #4]
100534dc:	2280      	movs	r2, #128	@ 0x80
100534de:	4393      	bics	r3, r2
100534e0:	001a      	movs	r2, r3
100534e2:	687b      	ldr	r3, [r7, #4]
100534e4:	605a      	str	r2, [r3, #4]
}
100534e6:	46c0      	nop			@ (mov r8, r8)
100534e8:	46bd      	mov	sp, r7
100534ea:	b002      	add	sp, #8
100534ec:	bd80      	pop	{r7, pc}
	...

100534f0 <LL_RADIO_SetNextTxMode>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetNextTxMode(TXRXPACK_TypeDef *p, uint32_t value)
{
100534f0:	b580      	push	{r7, lr}
100534f2:	b082      	sub	sp, #8
100534f4:	af00      	add	r7, sp, #0
100534f6:	6078      	str	r0, [r7, #4]
100534f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_NEXTTXMODE, value);
100534fa:	687b      	ldr	r3, [r7, #4]
100534fc:	685b      	ldr	r3, [r3, #4]
100534fe:	4a07      	ldr	r2, [pc, #28]	@ (1005351c <LL_RADIO_SetNextTxMode+0x2c>)
10053500:	401a      	ands	r2, r3
10053502:	683b      	ldr	r3, [r7, #0]
10053504:	0219      	lsls	r1, r3, #8
10053506:	2380      	movs	r3, #128	@ 0x80
10053508:	005b      	lsls	r3, r3, #1
1005350a:	400b      	ands	r3, r1
1005350c:	431a      	orrs	r2, r3
1005350e:	687b      	ldr	r3, [r7, #4]
10053510:	605a      	str	r2, [r3, #4]
}
10053512:	46c0      	nop			@ (mov r8, r8)
10053514:	46bd      	mov	sp, r7
10053516:	b002      	add	sp, #8
10053518:	bd80      	pop	{r7, pc}
1005351a:	46c0      	nop			@ (mov r8, r8)
1005351c:	fffffeff 	.word	0xfffffeff

10053520 <LL_RADIO_SetAllTableDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetAllTableDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10053520:	b580      	push	{r7, lr}
10053522:	b082      	sub	sp, #8
10053524:	af00      	add	r7, sp, #0
10053526:	6078      	str	r0, [r7, #4]
10053528:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_ALLTABLEREADY, value);
1005352a:	687b      	ldr	r3, [r7, #4]
1005352c:	685b      	ldr	r3, [r3, #4]
1005352e:	4a07      	ldr	r2, [pc, #28]	@ (1005354c <LL_RADIO_SetAllTableDataReady+0x2c>)
10053530:	401a      	ands	r2, r3
10053532:	683b      	ldr	r3, [r7, #0]
10053534:	0259      	lsls	r1, r3, #9
10053536:	2380      	movs	r3, #128	@ 0x80
10053538:	009b      	lsls	r3, r3, #2
1005353a:	400b      	ands	r3, r1
1005353c:	431a      	orrs	r2, r3
1005353e:	687b      	ldr	r3, [r7, #4]
10053540:	605a      	str	r2, [r3, #4]
}
10053542:	46c0      	nop			@ (mov r8, r8)
10053544:	46bd      	mov	sp, r7
10053546:	b002      	add	sp, #8
10053548:	bd80      	pop	{r7, pc}
1005354a:	46c0      	nop			@ (mov r8, r8)
1005354c:	fffffdff 	.word	0xfffffdff

10053550 <LL_RADIO_SetTransmissionDataReady>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTransmissionDataReady(TXRXPACK_TypeDef *p, uint32_t value)
{
10053550:	b580      	push	{r7, lr}
10053552:	b082      	sub	sp, #8
10053554:	af00      	add	r7, sp, #0
10053556:	6078      	str	r0, [r7, #4]
10053558:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD1, TXRXPACK_WORD1_TXDATAREADY, value);
1005355a:	687b      	ldr	r3, [r7, #4]
1005355c:	685b      	ldr	r3, [r3, #4]
1005355e:	4a07      	ldr	r2, [pc, #28]	@ (1005357c <LL_RADIO_SetTransmissionDataReady+0x2c>)
10053560:	401a      	ands	r2, r3
10053562:	683b      	ldr	r3, [r7, #0]
10053564:	0299      	lsls	r1, r3, #10
10053566:	2380      	movs	r3, #128	@ 0x80
10053568:	00db      	lsls	r3, r3, #3
1005356a:	400b      	ands	r3, r1
1005356c:	431a      	orrs	r2, r3
1005356e:	687b      	ldr	r3, [r7, #4]
10053570:	605a      	str	r2, [r3, #4]
}
10053572:	46c0      	nop			@ (mov r8, r8)
10053574:	46bd      	mov	sp, r7
10053576:	b002      	add	sp, #8
10053578:	bd80      	pop	{r7, pc}
1005357a:	46c0      	nop			@ (mov r8, r8)
1005357c:	fffffbff 	.word	0xfffffbff

10053580 <LL_RADIO_SetDataPointer>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetDataPointer(TXRXPACK_TypeDef *p, uint32_t value)
{
10053580:	b580      	push	{r7, lr}
10053582:	b082      	sub	sp, #8
10053584:	af00      	add	r7, sp, #0
10053586:	6078      	str	r0, [r7, #4]
10053588:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR, value);
1005358a:	687b      	ldr	r3, [r7, #4]
1005358c:	689b      	ldr	r3, [r3, #8]
1005358e:	687b      	ldr	r3, [r7, #4]
10053590:	683a      	ldr	r2, [r7, #0]
10053592:	609a      	str	r2, [r3, #8]
}
10053594:	46c0      	nop			@ (mov r8, r8)
10053596:	46bd      	mov	sp, r7
10053598:	b002      	add	sp, #8
1005359a:	bd80      	pop	{r7, pc}

1005359c <LL_RADIO_GetDataPointer>:
  * @rmtoll WORD2          DATAPTR       LL_RADIO_GetDataPointer
  * @param  p RADIO Instance
  * @retval uint32_t
  */
__STATIC_INLINE uint32_t LL_RADIO_GetDataPointer(TXRXPACK_TypeDef *p)
{
1005359c:	b580      	push	{r7, lr}
1005359e:	b082      	sub	sp, #8
100535a0:	af00      	add	r7, sp, #0
100535a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD2, TXRXPACK_WORD2_DATAPTR) >> TXRXPACK_WORD2_DATAPTR_Pos);
100535a4:	687b      	ldr	r3, [r7, #4]
100535a6:	689b      	ldr	r3, [r3, #8]
}
100535a8:	0018      	movs	r0, r3
100535aa:	46bd      	mov	sp, r7
100535ac:	b002      	add	sp, #8
100535ae:	bd80      	pop	{r7, pc}

100535b0 <LL_RADIO_SetTimer2Triggering>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTimer2Triggering(TXRXPACK_TypeDef *p, uint32_t value)
{
100535b0:	b580      	push	{r7, lr}
100535b2:	b082      	sub	sp, #8
100535b4:	af00      	add	r7, sp, #0
100535b6:	6078      	str	r0, [r7, #4]
100535b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2, value);
100535ba:	687b      	ldr	r3, [r7, #4]
100535bc:	68db      	ldr	r3, [r3, #12]
100535be:	0d1b      	lsrs	r3, r3, #20
100535c0:	051a      	lsls	r2, r3, #20
100535c2:	683b      	ldr	r3, [r7, #0]
100535c4:	031b      	lsls	r3, r3, #12
100535c6:	0b1b      	lsrs	r3, r3, #12
100535c8:	431a      	orrs	r2, r3
100535ca:	687b      	ldr	r3, [r7, #4]
100535cc:	60da      	str	r2, [r3, #12]
}
100535ce:	46c0      	nop			@ (mov r8, r8)
100535d0:	46bd      	mov	sp, r7
100535d2:	b002      	add	sp, #8
100535d4:	bd80      	pop	{r7, pc}

100535d6 <LL_RADIO_Timer2_Enable>:
  * @rmtoll WORD3          TIMER2EN            LL_RADIO_Timer2_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_Timer2_Enable(TXRXPACK_TypeDef *p)
{
100535d6:	b580      	push	{r7, lr}
100535d8:	b082      	sub	sp, #8
100535da:	af00      	add	r7, sp, #0
100535dc:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TIMER2EN);
100535de:	687b      	ldr	r3, [r7, #4]
100535e0:	68db      	ldr	r3, [r3, #12]
100535e2:	2280      	movs	r2, #128	@ 0x80
100535e4:	0352      	lsls	r2, r2, #13
100535e6:	431a      	orrs	r2, r3
100535e8:	687b      	ldr	r3, [r7, #4]
100535ea:	60da      	str	r2, [r3, #12]
}
100535ec:	46c0      	nop			@ (mov r8, r8)
100535ee:	46bd      	mov	sp, r7
100535f0:	b002      	add	sp, #8
100535f2:	bd80      	pop	{r7, pc}

100535f4 <LL_RADIO_SetTrigRcv>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigRcv(TXRXPACK_TypeDef *p, uint32_t value)
{
100535f4:	b580      	push	{r7, lr}
100535f6:	b082      	sub	sp, #8
100535f8:	af00      	add	r7, sp, #0
100535fa:	6078      	str	r0, [r7, #4]
100535fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGRCV, value);
100535fe:	687b      	ldr	r3, [r7, #4]
10053600:	68db      	ldr	r3, [r3, #12]
10053602:	4a07      	ldr	r2, [pc, #28]	@ (10053620 <LL_RADIO_SetTrigRcv+0x2c>)
10053604:	401a      	ands	r2, r3
10053606:	683b      	ldr	r3, [r7, #0]
10053608:	0599      	lsls	r1, r3, #22
1005360a:	2380      	movs	r3, #128	@ 0x80
1005360c:	03db      	lsls	r3, r3, #15
1005360e:	400b      	ands	r3, r1
10053610:	431a      	orrs	r2, r3
10053612:	687b      	ldr	r3, [r7, #4]
10053614:	60da      	str	r2, [r3, #12]
}
10053616:	46c0      	nop			@ (mov r8, r8)
10053618:	46bd      	mov	sp, r7
1005361a:	b002      	add	sp, #8
1005361c:	bd80      	pop	{r7, pc}
1005361e:	46c0      	nop			@ (mov r8, r8)
10053620:	ffbfffff 	.word	0xffbfffff

10053624 <LL_RADIO_SetTrigDone>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetTrigDone(TXRXPACK_TypeDef *p, uint32_t value)
{
10053624:	b580      	push	{r7, lr}
10053626:	b082      	sub	sp, #8
10053628:	af00      	add	r7, sp, #0
1005362a:	6078      	str	r0, [r7, #4]
1005362c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_TRIGDONE, value);
1005362e:	687b      	ldr	r3, [r7, #4]
10053630:	68db      	ldr	r3, [r3, #12]
10053632:	4a07      	ldr	r2, [pc, #28]	@ (10053650 <LL_RADIO_SetTrigDone+0x2c>)
10053634:	401a      	ands	r2, r3
10053636:	683b      	ldr	r3, [r7, #0]
10053638:	05d9      	lsls	r1, r3, #23
1005363a:	2380      	movs	r3, #128	@ 0x80
1005363c:	041b      	lsls	r3, r3, #16
1005363e:	400b      	ands	r3, r1
10053640:	431a      	orrs	r2, r3
10053642:	687b      	ldr	r3, [r7, #4]
10053644:	60da      	str	r2, [r3, #12]
}
10053646:	46c0      	nop			@ (mov r8, r8)
10053648:	46bd      	mov	sp, r7
1005364a:	b002      	add	sp, #8
1005364c:	bd80      	pop	{r7, pc}
1005364e:	46c0      	nop			@ (mov r8, r8)
10053650:	ff7fffff 	.word	0xff7fffff

10053654 <LL_RADIO_SetIntTxOk>:
  * @param  p RADIO Instance
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_SetIntTxOk(TXRXPACK_TypeDef *p, uint32_t value)
{
10053654:	b580      	push	{r7, lr}
10053656:	b082      	sub	sp, #8
10053658:	af00      	add	r7, sp, #0
1005365a:	6078      	str	r0, [r7, #4]
1005365c:	6039      	str	r1, [r7, #0]
  MODIFY_REG_FIELD(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTTXOK, value);
1005365e:	687b      	ldr	r3, [r7, #4]
10053660:	68db      	ldr	r3, [r3, #12]
10053662:	4a07      	ldr	r2, [pc, #28]	@ (10053680 <LL_RADIO_SetIntTxOk+0x2c>)
10053664:	401a      	ands	r2, r3
10053666:	683b      	ldr	r3, [r7, #0]
10053668:	0619      	lsls	r1, r3, #24
1005366a:	2380      	movs	r3, #128	@ 0x80
1005366c:	045b      	lsls	r3, r3, #17
1005366e:	400b      	ands	r3, r1
10053670:	431a      	orrs	r2, r3
10053672:	687b      	ldr	r3, [r7, #4]
10053674:	60da      	str	r2, [r3, #12]
}
10053676:	46c0      	nop			@ (mov r8, r8)
10053678:	46bd      	mov	sp, r7
1005367a:	b002      	add	sp, #8
1005367c:	bd80      	pop	{r7, pc}
1005367e:	46c0      	nop			@ (mov r8, r8)
10053680:	feffffff 	.word	0xfeffffff

10053684 <LL_RADIO_IntDone_Enable>:
  * @rmtoll WORD3          INTDONE            LL_RADIO_IntDone_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntDone_Enable(TXRXPACK_TypeDef *p)
{
10053684:	b580      	push	{r7, lr}
10053686:	b082      	sub	sp, #8
10053688:	af00      	add	r7, sp, #0
1005368a:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTDONE);
1005368c:	687b      	ldr	r3, [r7, #4]
1005368e:	68db      	ldr	r3, [r3, #12]
10053690:	2280      	movs	r2, #128	@ 0x80
10053692:	0492      	lsls	r2, r2, #18
10053694:	431a      	orrs	r2, r3
10053696:	687b      	ldr	r3, [r7, #4]
10053698:	60da      	str	r2, [r3, #12]
}
1005369a:	46c0      	nop			@ (mov r8, r8)
1005369c:	46bd      	mov	sp, r7
1005369e:	b002      	add	sp, #8
100536a0:	bd80      	pop	{r7, pc}

100536a2 <LL_RADIO_IntRcvTimeout_Enable>:
  * @rmtoll WORD3          INTRCVTIMEOUT            LL_RADIO_IntRcvTimeout_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvTimeout_Enable(TXRXPACK_TypeDef *p)
{
100536a2:	b580      	push	{r7, lr}
100536a4:	b082      	sub	sp, #8
100536a6:	af00      	add	r7, sp, #0
100536a8:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVTIMEOUT);
100536aa:	687b      	ldr	r3, [r7, #4]
100536ac:	68db      	ldr	r3, [r3, #12]
100536ae:	2280      	movs	r2, #128	@ 0x80
100536b0:	04d2      	lsls	r2, r2, #19
100536b2:	431a      	orrs	r2, r3
100536b4:	687b      	ldr	r3, [r7, #4]
100536b6:	60da      	str	r2, [r3, #12]
}
100536b8:	46c0      	nop			@ (mov r8, r8)
100536ba:	46bd      	mov	sp, r7
100536bc:	b002      	add	sp, #8
100536be:	bd80      	pop	{r7, pc}

100536c0 <LL_RADIO_IntRcvCRCErr_Enable>:
  * @rmtoll WORD3          INTRCVCRCERR            LL_RADIO_IntRcvCRCErr_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvCRCErr_Enable(TXRXPACK_TypeDef *p)
{
100536c0:	b580      	push	{r7, lr}
100536c2:	b082      	sub	sp, #8
100536c4:	af00      	add	r7, sp, #0
100536c6:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVCRCERR);
100536c8:	687b      	ldr	r3, [r7, #4]
100536ca:	68db      	ldr	r3, [r3, #12]
100536cc:	2280      	movs	r2, #128	@ 0x80
100536ce:	05d2      	lsls	r2, r2, #23
100536d0:	431a      	orrs	r2, r3
100536d2:	687b      	ldr	r3, [r7, #4]
100536d4:	60da      	str	r2, [r3, #12]
}
100536d6:	46c0      	nop			@ (mov r8, r8)
100536d8:	46bd      	mov	sp, r7
100536da:	b002      	add	sp, #8
100536dc:	bd80      	pop	{r7, pc}

100536de <LL_RADIO_IntRcvOk_Enable>:
  * @rmtoll WORD3          INTRCVOK            LL_RADIO_IntRcvOk_Enable
  * @param  p
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_IntRcvOk_Enable(TXRXPACK_TypeDef *p)
{
100536de:	b580      	push	{r7, lr}
100536e0:	b082      	sub	sp, #8
100536e2:	af00      	add	r7, sp, #0
100536e4:	6078      	str	r0, [r7, #4]
  SET_BIT(((TXRXPACK_WORD_TypeDef *)p)->WORD3, TXRXPACK_WORD3_INTRCVOK);
100536e6:	687b      	ldr	r3, [r7, #4]
100536e8:	68db      	ldr	r3, [r3, #12]
100536ea:	2280      	movs	r2, #128	@ 0x80
100536ec:	0612      	lsls	r2, r2, #24
100536ee:	431a      	orrs	r2, r3
100536f0:	687b      	ldr	r3, [r7, #4]
100536f2:	60da      	str	r2, [r3, #12]
}
100536f4:	46c0      	nop			@ (mov r8, r8)
100536f6:	46bd      	mov	sp, r7
100536f8:	b002      	add	sp, #8
100536fa:	bd80      	pop	{r7, pc}

100536fc <LL_RADIO_BlueSetInterrupt1RegRegister>:
  * @rmtoll INTERRUPT1REG          ALL       LL_RADIO_BlueSetInterrupt1RegRegister
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetInterrupt1RegRegister(uint32_t value)
{
100536fc:	b580      	push	{r7, lr}
100536fe:	b082      	sub	sp, #8
10053700:	af00      	add	r7, sp, #0
10053702:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->INTERRUPT1REG, BLUE_INTERRUPT1REG_ALL, value);
10053704:	23c0      	movs	r3, #192	@ 0xc0
10053706:	05db      	lsls	r3, r3, #23
10053708:	685b      	ldr	r3, [r3, #4]
1005370a:	4a07      	ldr	r2, [pc, #28]	@ (10053728 <LL_RADIO_BlueSetInterrupt1RegRegister+0x2c>)
1005370c:	4013      	ands	r3, r2
1005370e:	0019      	movs	r1, r3
10053710:	687b      	ldr	r3, [r7, #4]
10053712:	4a06      	ldr	r2, [pc, #24]	@ (1005372c <LL_RADIO_BlueSetInterrupt1RegRegister+0x30>)
10053714:	401a      	ands	r2, r3
10053716:	23c0      	movs	r3, #192	@ 0xc0
10053718:	05db      	lsls	r3, r3, #23
1005371a:	430a      	orrs	r2, r1
1005371c:	605a      	str	r2, [r3, #4]
}
1005371e:	46c0      	nop			@ (mov r8, r8)
10053720:	46bd      	mov	sp, r7
10053722:	b002      	add	sp, #8
10053724:	bd80      	pop	{r7, pc}
10053726:	46c0      	nop			@ (mov r8, r8)
10053728:	0002004f 	.word	0x0002004f
1005372c:	fffdffb0 	.word	0xfffdffb0

10053730 <LL_RADIO_BlueSetClearSemaphoreRequest>:
  * @rmtoll CMDREG          CLEARSEMAREQ       LL_RADIO_BlueSetClearSemaphoreRequest
  * @param  value
  * @retval None
  */
__STATIC_INLINE void LL_RADIO_BlueSetClearSemaphoreRequest(uint32_t value)
{
10053730:	b580      	push	{r7, lr}
10053732:	b082      	sub	sp, #8
10053734:	af00      	add	r7, sp, #0
10053736:	6078      	str	r0, [r7, #4]
  MODIFY_REG_FIELD(BLUE->CMDREG, BLUE_CMDREG_CLEARSEMAREQ, value);
10053738:	23c0      	movs	r3, #192	@ 0xc0
1005373a:	05db      	lsls	r3, r3, #23
1005373c:	699b      	ldr	r3, [r3, #24]
1005373e:	2208      	movs	r2, #8
10053740:	4393      	bics	r3, r2
10053742:	0019      	movs	r1, r3
10053744:	687b      	ldr	r3, [r7, #4]
10053746:	00db      	lsls	r3, r3, #3
10053748:	2208      	movs	r2, #8
1005374a:	401a      	ands	r2, r3
1005374c:	23c0      	movs	r3, #192	@ 0xc0
1005374e:	05db      	lsls	r3, r3, #23
10053750:	430a      	orrs	r2, r1
10053752:	619a      	str	r2, [r3, #24]
}
10053754:	46c0      	nop			@ (mov r8, r8)
10053756:	46bd      	mov	sp, r7
10053758:	b002      	add	sp, #8
1005375a:	bd80      	pop	{r7, pc}

1005375c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>:
 */
/* Calculate the Timeout to be programmed on Timer2 to obtain a give T_IFS
 * when the next packet is a transmit one
*/
uint32_t BLEPLAT_CNTR_GetTimer2TimeoutForIfs(uint32_t T_Ifs, BLEPLAT_CNTR_Transaction Transaction, uint8_t Cal_Enabled)
{
1005375c:	b580      	push	{r7, lr}
1005375e:	b088      	sub	sp, #32
10053760:	af00      	add	r7, sp, #0
10053762:	6078      	str	r0, [r7, #4]
10053764:	0008      	movs	r0, r1
10053766:	0011      	movs	r1, r2
10053768:	1cfb      	adds	r3, r7, #3
1005376a:	1c02      	adds	r2, r0, #0
1005376c:	701a      	strb	r2, [r3, #0]
1005376e:	1cbb      	adds	r3, r7, #2
10053770:	1c0a      	adds	r2, r1, #0
10053772:	701a      	strb	r2, [r3, #0]
    uint32_t Timeout = T_Ifs;
10053774:	687b      	ldr	r3, [r7, #4]
10053776:	617b      	str	r3, [r7, #20]
    uint32_t Tx_Delay_Comp;
    uint32_t Init_Delay;

    if(Transaction == BLEPLAT_CNTR_RxTx)
10053778:	1cfb      	adds	r3, r7, #3
1005377a:	781b      	ldrb	r3, [r3, #0]
1005377c:	2b01      	cmp	r3, #1
1005377e:	d105      	bne.n	1005378c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x30>
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in connection, initiating and active
         * scanning
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
10053780:	2304      	movs	r3, #4
10053782:	60bb      	str	r3, [r7, #8]
#else
        const int32_t Adjust_Value = 6;
#endif
        Tx_Delay_Comp = (TX_DELAY_START>>3) + Adjust_Value;
10053784:	68bb      	ldr	r3, [r7, #8]
10053786:	3302      	adds	r3, #2
10053788:	61fb      	str	r3, [r7, #28]
1005378a:	e015      	b.n	100537b8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxRx)
1005378c:	1cfb      	adds	r3, r7, #3
1005378e:	781b      	ldrb	r3, [r3, #0]
10053790:	2b00      	cmp	r3, #0
10053792:	d105      	bne.n	100537a0 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x44>
         * values used in prrevious versions of the stack.
         * They could be optimized after careful analysis of timing margins and
         * AGC behavior.
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 4;
10053794:	2304      	movs	r3, #4
10053796:	60fb      	str	r3, [r7, #12]
#else
        const int32_t Adjust_Value = 4;
#endif
        Tx_Delay_Comp = (TX_DELAY_END>>3) + Adjust_Value;
10053798:	68fb      	ldr	r3, [r7, #12]
1005379a:	3302      	adds	r3, #2
1005379c:	61fb      	str	r3, [r7, #28]
1005379e:	e00b      	b.n	100537b8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else if(Transaction == BLEPLAT_CNTR_TxTx)
100537a0:	1cfb      	adds	r3, r7, #3
100537a2:	781b      	ldrb	r3, [r3, #0]
100537a4:	2b02      	cmp	r3, #2
100537a6:	d105      	bne.n	100537b4 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x58>
    {
        /* The correction values below have been determined by sniffer
         * T_IFS measurements in extended advertising (AUX_CHAIN_IND)
         */
#ifdef STM32WB05
        const int32_t Adjust_Value = 1;
100537a8:	2301      	movs	r3, #1
100537aa:	613b      	str	r3, [r7, #16]
#else
        const int32_t Adjust_Value = 2;
#endif
        Tx_Delay_Comp = ((TX_DELAY_START + TX_DELAY_END)>>3) + Adjust_Value;
100537ac:	693b      	ldr	r3, [r7, #16]
100537ae:	3304      	adds	r3, #4
100537b0:	61fb      	str	r3, [r7, #28]
100537b2:	e001      	b.n	100537b8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x5c>
    }
    else
    {
        Tx_Delay_Comp = 0;
100537b4:	2300      	movs	r3, #0
100537b6:	61fb      	str	r3, [r7, #28]
    }

    if((Transaction == BLEPLAT_CNTR_RxTx) || (Transaction == BLEPLAT_CNTR_TxTx))
100537b8:	1cfb      	adds	r3, r7, #3
100537ba:	781b      	ldrb	r3, [r3, #0]
100537bc:	2b01      	cmp	r3, #1
100537be:	d003      	beq.n	100537c8 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x6c>
100537c0:	1cfb      	adds	r3, r7, #3
100537c2:	781b      	ldrb	r3, [r3, #0]
100537c4:	2b02      	cmp	r3, #2
100537c6:	d109      	bne.n	100537dc <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x80>
    {
        if(Cal_Enabled == TRUE)
100537c8:	1cbb      	adds	r3, r7, #2
100537ca:	781b      	ldrb	r3, [r3, #0]
100537cc:	2b01      	cmp	r3, #1
100537ce:	d102      	bne.n	100537d6 <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x7a>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_TX_DELAY_CAL;
100537d0:	239b      	movs	r3, #155	@ 0x9b
100537d2:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100537d4:	e013      	b.n	100537fe <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_TX_DELAY_NO_CAL;
100537d6:	233d      	movs	r3, #61	@ 0x3d
100537d8:	61bb      	str	r3, [r7, #24]
        if(Cal_Enabled == TRUE)
100537da:	e010      	b.n	100537fe <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
    }
    else if((Transaction == BLEPLAT_CNTR_TxRx) || (Transaction == BLEPLAT_CNTR_RxRx))
100537dc:	1cfb      	adds	r3, r7, #3
100537de:	781b      	ldrb	r3, [r3, #0]
100537e0:	2b00      	cmp	r3, #0
100537e2:	d003      	beq.n	100537ec <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x90>
100537e4:	1cfb      	adds	r3, r7, #3
100537e6:	781b      	ldrb	r3, [r3, #0]
100537e8:	2b03      	cmp	r3, #3
100537ea:	d108      	bne.n	100537fe <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
         * The current calculation of Timer2 for TX-RX events is slightly conservative
         * since it soes not consider the delay from digital modulator to antenna and from
         * antenna to digital demodulator. As a consequence the demodulator is turned on
         * a few microseconds earlier than stricty needed.
         */
        if(Cal_Enabled == TRUE)
100537ec:	1cbb      	adds	r3, r7, #2
100537ee:	781b      	ldrb	r3, [r3, #0]
100537f0:	2b01      	cmp	r3, #1
100537f2:	d102      	bne.n	100537fa <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0x9e>
        {
            Init_Delay = TIMER12_INIT_DELAY_CAL + RADIO_FSM_RX_DELAY_CAL;
100537f4:	2399      	movs	r3, #153	@ 0x99
100537f6:	61bb      	str	r3, [r7, #24]
100537f8:	e001      	b.n	100537fe <BLEPLAT_CNTR_GetTimer2TimeoutForIfs+0xa2>
        }
        else
        {
            Init_Delay = TIMER2_INIT_DELAY_NO_CAL + RADIO_FSM_RX_DELAY_NO_CAL;
100537fa:	233b      	movs	r3, #59	@ 0x3b
100537fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
    }

    Timeout -= (Init_Delay + Tx_Delay_Comp);
100537fe:	69ba      	ldr	r2, [r7, #24]
10053800:	69fb      	ldr	r3, [r7, #28]
10053802:	18d3      	adds	r3, r2, r3
10053804:	697a      	ldr	r2, [r7, #20]
10053806:	1ad3      	subs	r3, r2, r3
10053808:	617b      	str	r3, [r7, #20]

    return Timeout;
1005380a:	697b      	ldr	r3, [r7, #20]
}
1005380c:	0018      	movs	r0, r3
1005380e:	46bd      	mov	sp, r7
10053810:	b008      	add	sp, #32
10053812:	bd80      	pop	{r7, pc}

10053814 <BLEPLAT_CNTR_ClearInterrupt>:

void BLEPLAT_CNTR_ClearInterrupt(uint32_t x)
{
10053814:	b580      	push	{r7, lr}
10053816:	b082      	sub	sp, #8
10053818:	af00      	add	r7, sp, #0
1005381a:	6078      	str	r0, [r7, #4]
    LL_RADIO_BlueSetInterrupt1RegRegister(x);
1005381c:	687b      	ldr	r3, [r7, #4]
1005381e:	0018      	movs	r0, r3
10053820:	f7ff ff6c 	bl	100536fc <LL_RADIO_BlueSetInterrupt1RegRegister>
}
10053824:	46c0      	nop			@ (mov r8, r8)
10053826:	46bd      	mov	sp, r7
10053828:	b002      	add	sp, #8
1005382a:	bd80      	pop	{r7, pc}

1005382c <BLEPLAT_CNTR_ClearSemareq>:

void BLEPLAT_CNTR_ClearSemareq(void)
{
1005382c:	b580      	push	{r7, lr}
1005382e:	af00      	add	r7, sp, #0
    LL_RADIO_BlueSetClearSemaphoreRequest(0x1U);
10053830:	2001      	movs	r0, #1
10053832:	f7ff ff7d 	bl	10053730 <LL_RADIO_BlueSetClearSemaphoreRequest>
}
10053836:	46c0      	nop			@ (mov r8, r8)
10053838:	46bd      	mov	sp, r7
1005383a:	bd80      	pop	{r7, pc}

1005383c <BLEPLAT_CNTR_GlobDisableBlue>:
{
    return LL_RADIO_BlueGetTimerCapture();
}

void BLEPLAT_CNTR_GlobDisableBlue()
{
1005383c:	b580      	push	{r7, lr}
1005383e:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalDisableBlue();
10053840:	f7ff f8dc 	bl	100529fc <LL_RADIO_GlobalDisableBlue>
}
10053844:	46c0      	nop			@ (mov r8, r8)
10053846:	46bd      	mov	sp, r7
10053848:	bd80      	pop	{r7, pc}

1005384a <BLEPLAT_CNTR_GlobEnableBlue>:

void BLEPLAT_CNTR_GlobEnableBlue()
{
1005384a:	b580      	push	{r7, lr}
1005384c:	af00      	add	r7, sp, #0
    LL_RADIO_GlobalEnableBlue();
1005384e:	f7ff f8c7 	bl	100529e0 <LL_RADIO_GlobalEnableBlue>
}
10053852:	46c0      	nop			@ (mov r8, r8)
10053854:	46bd      	mov	sp, r7
10053856:	bd80      	pop	{r7, pc}

10053858 <BLEPLAT_CNTR_GlobWriteSlot>:
{
    LL_RADIO_SetReceivedNoCalDelayChk((uint32_t) x);
}

void BLEPLAT_CNTR_GlobWriteSlot(uint8_t slotNo)
{
10053858:	b580      	push	{r7, lr}
1005385a:	b082      	sub	sp, #8
1005385c:	af00      	add	r7, sp, #0
1005385e:	0002      	movs	r2, r0
10053860:	1dfb      	adds	r3, r7, #7
10053862:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetCurrentConnectionMachineNumber((uint32_t) slotNo);
10053864:	1dfb      	adds	r3, r7, #7
10053866:	781b      	ldrb	r3, [r3, #0]
10053868:	0018      	movs	r0, r3
1005386a:	f7ff f8a3 	bl	100529b4 <LL_RADIO_SetCurrentConnectionMachineNumber>
}
1005386e:	46c0      	nop			@ (mov r8, r8)
10053870:	46bd      	mov	sp, r7
10053872:	b002      	add	sp, #8
10053874:	bd80      	pop	{r7, pc}
	...

10053878 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>:
{
    LL_RADIO_SetTxDelayEnd((uint32_t) x);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusAnyHwError(uint32_t x)
{
10053878:	b580      	push	{r7, lr}
1005387a:	b082      	sub	sp, #8
1005387c:	af00      	add	r7, sp, #0
1005387e:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & ANY_HW_ERROR_INTERRUPT_Msk);
10053880:	687b      	ldr	r3, [r7, #4]
10053882:	4a03      	ldr	r2, [pc, #12]	@ (10053890 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError+0x18>)
10053884:	4013      	ands	r3, r2
}
10053886:	0018      	movs	r0, r3
10053888:	46bd      	mov	sp, r7
1005388a:	b002      	add	sp, #8
1005388c:	bd80      	pop	{r7, pc}
1005388e:	46c0      	nop			@ (mov r8, r8)
10053890:	00c9df30 	.word	0x00c9df30

10053894 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>:
{
    return (uint32_t)(x & BLUE_STATUSREG_RXOVERFLOWERROR_Msk);
}

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitAct2Error(uint32_t x)
{
10053894:	b580      	push	{r7, lr}
10053896:	b082      	sub	sp, #8
10053898:	af00      	add	r7, sp, #0
1005389a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ACTIVE2ERROR_Msk);
1005389c:	687a      	ldr	r2, [r7, #4]
1005389e:	2380      	movs	r3, #128	@ 0x80
100538a0:	03db      	lsls	r3, r3, #15
100538a2:	4013      	ands	r3, r2
}
100538a4:	0018      	movs	r0, r3
100538a6:	46bd      	mov	sp, r7
100538a8:	b002      	add	sp, #8
100538aa:	bd80      	pop	{r7, pc}

100538ac <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>:

uint32_t BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun(uint32_t x)
{
100538ac:	b580      	push	{r7, lr}
100538ae:	b082      	sub	sp, #8
100538b0:	af00      	add	r7, sp, #0
100538b2:	6078      	str	r0, [r7, #4]
    return 0;
100538b4:	2300      	movs	r3, #0
}
100538b6:	0018      	movs	r0, r3
100538b8:	46bd      	mov	sp, r7
100538ba:	b002      	add	sp, #8
100538bc:	bd80      	pop	{r7, pc}

100538be <BLEPLAT_CNTR_IntGetIntStatusCrcErr>:

#if defined(BLUE_STATUSREG_RCVCRCERR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusCrcErr(uint32_t x)
{
100538be:	b580      	push	{r7, lr}
100538c0:	b082      	sub	sp, #8
100538c2:	af00      	add	r7, sp, #0
100538c4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVCRCERR_Msk);
100538c6:	687a      	ldr	r2, [r7, #4]
100538c8:	2380      	movs	r3, #128	@ 0x80
100538ca:	05db      	lsls	r3, r3, #23
100538cc:	4013      	ands	r3, r2
}
100538ce:	0018      	movs	r0, r3
100538d0:	46bd      	mov	sp, r7
100538d2:	b002      	add	sp, #8
100538d4:	bd80      	pop	{r7, pc}

100538d6 <BLEPLAT_CNTR_IntGetIntStatusDone>:
#endif

#if defined(BLUE_STATUSREG_DONE_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusDone(uint32_t x)
{
100538d6:	b580      	push	{r7, lr}
100538d8:	b082      	sub	sp, #8
100538da:	af00      	add	r7, sp, #0
100538dc:	6078      	str	r0, [r7, #4]
	return (uint32_t)(x & BLUE_STATUSREG_DONE_Msk);
100538de:	687a      	ldr	r2, [r7, #4]
100538e0:	2380      	movs	r3, #128	@ 0x80
100538e2:	049b      	lsls	r3, r3, #18
100538e4:	4013      	ands	r3, r2
}
100538e6:	0018      	movs	r0, r3
100538e8:	46bd      	mov	sp, r7
100538ea:	b002      	add	sp, #8
100538ec:	bd80      	pop	{r7, pc}

100538ee <BLEPLAT_CNTR_IntGetIntStatusEncErr>:
#endif

#if defined(BLUE_STATUSREG_ENCERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusEncErr(uint32_t x)
{
100538ee:	b580      	push	{r7, lr}
100538f0:	b082      	sub	sp, #8
100538f2:	af00      	add	r7, sp, #0
100538f4:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_ENCERROR_Msk);
100538f6:	687a      	ldr	r2, [r7, #4]
100538f8:	2380      	movs	r3, #128	@ 0x80
100538fa:	019b      	lsls	r3, r3, #6
100538fc:	4013      	ands	r3, r2
}
100538fe:	0018      	movs	r0, r3
10053900:	46bd      	mov	sp, r7
10053902:	b002      	add	sp, #8
10053904:	bd80      	pop	{r7, pc}

10053906 <BLEPLAT_CNTR_IntGetIntStatusLenErr>:
#endif

#if defined(BLUE_STATUSREG_RCVLENGTHERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusLenErr(uint32_t x)
{
10053906:	b580      	push	{r7, lr}
10053908:	b082      	sub	sp, #8
1005390a:	af00      	add	r7, sp, #0
1005390c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVLENGTHERROR_Msk);
1005390e:	687a      	ldr	r2, [r7, #4]
10053910:	2380      	movs	r3, #128	@ 0x80
10053912:	02db      	lsls	r3, r3, #11
10053914:	4013      	ands	r3, r2
}
10053916:	0018      	movs	r0, r3
10053918:	46bd      	mov	sp, r7
1005391a:	b002      	add	sp, #8
1005391c:	bd80      	pop	{r7, pc}

1005391e <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>:
#endif

#if defined(BLUE_STATUSREG_NOACTIVELERROR_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusNoactiveError(uint32_t x)
{
1005391e:	b580      	push	{r7, lr}
10053920:	b082      	sub	sp, #8
10053922:	af00      	add	r7, sp, #0
10053924:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_NOACTIVELERROR_Msk);
10053926:	687a      	ldr	r2, [r7, #4]
10053928:	2380      	movs	r3, #128	@ 0x80
1005392a:	025b      	lsls	r3, r3, #9
1005392c:	4013      	ands	r3, r2
}
1005392e:	0018      	movs	r0, r3
10053930:	46bd      	mov	sp, r7
10053932:	b002      	add	sp, #8
10053934:	bd80      	pop	{r7, pc}

10053936 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>:
#endif

#if defined(BLUE_STATUSREG_TXRXSKIP_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxRxSkip(uint32_t x)
{
10053936:	b580      	push	{r7, lr}
10053938:	b082      	sub	sp, #8
1005393a:	af00      	add	r7, sp, #0
1005393c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXRXSKIP_Msk);
1005393e:	687a      	ldr	r2, [r7, #4]
10053940:	2380      	movs	r3, #128	@ 0x80
10053942:	039b      	lsls	r3, r3, #14
10053944:	4013      	ands	r3, r2
}
10053946:	0018      	movs	r0, r3
10053948:	46bd      	mov	sp, r7
1005394a:	b002      	add	sp, #8
1005394c:	bd80      	pop	{r7, pc}

1005394e <BLEPLAT_CNTR_IntGetIntStatusTxError1>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_1_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError1(uint32_t x)
{
1005394e:	b580      	push	{r7, lr}
10053950:	b082      	sub	sp, #8
10053952:	af00      	add	r7, sp, #0
10053954:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_1_Msk);
10053956:	687a      	ldr	r2, [r7, #4]
10053958:	2380      	movs	r3, #128	@ 0x80
1005395a:	009b      	lsls	r3, r3, #2
1005395c:	4013      	ands	r3, r2
}
1005395e:	0018      	movs	r0, r3
10053960:	46bd      	mov	sp, r7
10053962:	b002      	add	sp, #8
10053964:	bd80      	pop	{r7, pc}

10053966 <BLEPLAT_CNTR_IntGetIntStatusTxError3>:
#endif

#if defined(BLUE_STATUSREG_TXERROR_3_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxError3(uint32_t x)
{
10053966:	b580      	push	{r7, lr}
10053968:	b082      	sub	sp, #8
1005396a:	af00      	add	r7, sp, #0
1005396c:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXERROR_3_Msk);
1005396e:	687a      	ldr	r2, [r7, #4]
10053970:	2380      	movs	r3, #128	@ 0x80
10053972:	011b      	lsls	r3, r3, #4
10053974:	4013      	ands	r3, r2
}
10053976:	0018      	movs	r0, r3
10053978:	46bd      	mov	sp, r7
1005397a:	b002      	add	sp, #8
1005397c:	bd80      	pop	{r7, pc}

1005397e <BLEPLAT_CNTR_IntGetIntStatusRxOk>:
#endif

#if defined(BLUE_STATUSREG_RCVOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusRxOk(uint32_t x)
{
1005397e:	b580      	push	{r7, lr}
10053980:	b082      	sub	sp, #8
10053982:	af00      	add	r7, sp, #0
10053984:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVOK_Msk);
10053986:	687b      	ldr	r3, [r7, #4]
10053988:	0fdb      	lsrs	r3, r3, #31
1005398a:	07db      	lsls	r3, r3, #31
}
1005398c:	0018      	movs	r0, r3
1005398e:	46bd      	mov	sp, r7
10053990:	b002      	add	sp, #8
10053992:	bd80      	pop	{r7, pc}

10053994 <BLEPLAT_CNTR_IntGetIntStatusTimeout>:
#endif

#if defined(BLUE_STATUSREG_RCVTIMEOUT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTimeout(uint32_t x)
{
10053994:	b580      	push	{r7, lr}
10053996:	b082      	sub	sp, #8
10053998:	af00      	add	r7, sp, #0
1005399a:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_RCVTIMEOUT_Msk);
1005399c:	687a      	ldr	r2, [r7, #4]
1005399e:	2380      	movs	r3, #128	@ 0x80
100539a0:	04db      	lsls	r3, r3, #19
100539a2:	4013      	ands	r3, r2
}
100539a4:	0018      	movs	r0, r3
100539a6:	46bd      	mov	sp, r7
100539a8:	b002      	add	sp, #8
100539aa:	bd80      	pop	{r7, pc}

100539ac <BLEPLAT_CNTR_IntGetIntStatusTxDone>:
}
#endif

#if defined(BLUE_STATUSREG_PREVTRANSMIT_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxDone(uint32_t x)
{
100539ac:	b580      	push	{r7, lr}
100539ae:	b082      	sub	sp, #8
100539b0:	af00      	add	r7, sp, #0
100539b2:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_PREVTRANSMIT_Msk);
100539b4:	687b      	ldr	r3, [r7, #4]
100539b6:	2240      	movs	r2, #64	@ 0x40
100539b8:	4013      	ands	r3, r2
}
100539ba:	0018      	movs	r0, r3
100539bc:	46bd      	mov	sp, r7
100539be:	b002      	add	sp, #8
100539c0:	bd80      	pop	{r7, pc}

100539c2 <BLEPLAT_CNTR_IntGetIntStatusTxOk>:
#endif

#if defined(BLUE_STATUSREG_TXOK_Msk)
uint32_t BLEPLAT_CNTR_IntGetIntStatusTxOk(uint32_t x)
{
100539c2:	b580      	push	{r7, lr}
100539c4:	b082      	sub	sp, #8
100539c6:	af00      	add	r7, sp, #0
100539c8:	6078      	str	r0, [r7, #4]
    return (uint32_t)(x & BLUE_STATUSREG_TXOK_Msk);
100539ca:	687a      	ldr	r2, [r7, #4]
100539cc:	2380      	movs	r3, #128	@ 0x80
100539ce:	045b      	lsls	r3, r3, #17
100539d0:	4013      	ands	r3, r2
}
100539d2:	0018      	movs	r0, r3
100539d4:	46bd      	mov	sp, r7
100539d6:	b002      	add	sp, #8
100539d8:	bd80      	pop	{r7, pc}

100539da <BLEPLAT_CNTR_PacketClrCteSamplingEn>:
{
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketClrCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100539da:	b580      	push	{r7, lr}
100539dc:	b082      	sub	sp, #8
100539de:	af00      	add	r7, sp, #0
100539e0:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x0);
100539e2:	687b      	ldr	r3, [r7, #4]
100539e4:	2100      	movs	r1, #0
100539e6:	0018      	movs	r0, r3
100539e8:	f7ff fd17 	bl	1005341a <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
100539ec:	46c0      	nop			@ (mov r8, r8)
100539ee:	46bd      	mov	sp, r7
100539f0:	b002      	add	sp, #8
100539f2:	bd80      	pop	{r7, pc}

100539f4 <BLEPLAT_CNTR_PacketClrIncChan>:

void BLEPLAT_CNTR_PacketClrIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
100539f4:	b580      	push	{r7, lr}
100539f6:	b082      	sub	sp, #8
100539f8:	af00      	add	r7, sp, #0
100539fa:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Disable((TXRXPACK_TypeDef*)packetP);
100539fc:	687b      	ldr	r3, [r7, #4]
100539fe:	0018      	movs	r0, r3
10053a00:	f7ff fd66 	bl	100534d0 <LL_RADIO_IncrementerChannel_Disable>
}
10053a04:	46c0      	nop			@ (mov r8, r8)
10053a06:	46bd      	mov	sp, r7
10053a08:	b002      	add	sp, #8
10053a0a:	bd80      	pop	{r7, pc}

10053a0c <BLEPLAT_CNTR_PacketClrPllTrig>:

void BLEPLAT_CNTR_PacketClrPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a0c:	b580      	push	{r7, lr}
10053a0e:	b082      	sub	sp, #8
10053a10:	af00      	add	r7, sp, #0
10053a12:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10053a14:	687b      	ldr	r3, [r7, #4]
10053a16:	2100      	movs	r1, #0
10053a18:	0018      	movs	r0, r3
10053a1a:	f7ff fcd5 	bl	100533c8 <LL_RADIO_SetCalibrationRequest>
}
10053a1e:	46c0      	nop			@ (mov r8, r8)
10053a20:	46bd      	mov	sp, r7
10053a22:	b002      	add	sp, #8
10053a24:	bd80      	pop	{r7, pc}

10053a26 <BLEPLAT_CNTR_PacketGetDataPtr>:
#endif

}

uint8_t* BLEPLAT_CNTR_PacketGetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a26:	b580      	push	{r7, lr}
10053a28:	b082      	sub	sp, #8
10053a2a:	af00      	add	r7, sp, #0
10053a2c:	6078      	str	r0, [r7, #4]
    return (uint8_t*)CONV_ADR(LL_RADIO_GetDataPointer((TXRXPACK_TypeDef*)packetP));
10053a2e:	687b      	ldr	r3, [r7, #4]
10053a30:	0018      	movs	r0, r3
10053a32:	f7ff fdb3 	bl	1005359c <LL_RADIO_GetDataPointer>
10053a36:	0003      	movs	r3, r0
}
10053a38:	0018      	movs	r0, r3
10053a3a:	46bd      	mov	sp, r7
10053a3c:	b002      	add	sp, #8
10053a3e:	bd80      	pop	{r7, pc}

10053a40 <BLEPLAT_CNTR_PacketInitTo0>:

void BLEPLAT_CNTR_PacketInitTo0(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a40:	b580      	push	{r7, lr}
10053a42:	b082      	sub	sp, #8
10053a44:	af00      	add	r7, sp, #0
10053a46:	6078      	str	r0, [r7, #4]
    memset((void*)packetP, 0, sizeof(TXRXPACK_WORD_TypeDef));
10053a48:	687b      	ldr	r3, [r7, #4]
10053a4a:	2210      	movs	r2, #16
10053a4c:	2100      	movs	r1, #0
10053a4e:	0018      	movs	r0, r3
10053a50:	f014 f888 	bl	10067b64 <memset>
}
10053a54:	46c0      	nop			@ (mov r8, r8)
10053a56:	46bd      	mov	sp, r7
10053a58:	b002      	add	sp, #8
10053a5a:	bd80      	pop	{r7, pc}

10053a5c <BLEPLAT_CNTR_PacketSetAdvPduFormat>:

void BLEPLAT_CNTR_PacketSetAdvPduFormat(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a5c:	b580      	push	{r7, lr}
10053a5e:	b082      	sub	sp, #8
10053a60:	af00      	add	r7, sp, #0
10053a62:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053a64:	687b      	ldr	r3, [r7, #4]
10053a66:	2101      	movs	r1, #1
10053a68:	0018      	movs	r0, r3
10053a6a:	f7ff fd00 	bl	1005346e <LL_RADIO_SetAdvertise>
}
10053a6e:	46c0      	nop			@ (mov r8, r8)
10053a70:	46bd      	mov	sp, r7
10053a72:	b002      	add	sp, #8
10053a74:	bd80      	pop	{r7, pc}

10053a76 <BLEPLAT_CNTR_PacketSetCrcinitSel>:

void BLEPLAT_CNTR_PacketSetCrcinitSel(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a76:	b580      	push	{r7, lr}
10053a78:	b082      	sub	sp, #8
10053a7a:	af00      	add	r7, sp, #0
10053a7c:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCRCInitializationSelector((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053a7e:	687b      	ldr	r3, [r7, #4]
10053a80:	2101      	movs	r1, #1
10053a82:	0018      	movs	r0, r3
10053a84:	f7ff fcde 	bl	10053444 <LL_RADIO_SetCRCInitializationSelector>
}
10053a88:	46c0      	nop			@ (mov r8, r8)
10053a8a:	46bd      	mov	sp, r7
10053a8c:	b002      	add	sp, #8
10053a8e:	bd80      	pop	{r7, pc}

10053a90 <BLEPLAT_CNTR_PacketSetCteSamplingEn>:

void BLEPLAT_CNTR_PacketSetCteSamplingEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053a90:	b580      	push	{r7, lr}
10053a92:	b082      	sub	sp, #8
10053a94:	af00      	add	r7, sp, #0
10053a96:	6078      	str	r0, [r7, #4]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEAndSamplingEnable((TXRXPACK_TypeDef*)packetP, 0x01);
10053a98:	687b      	ldr	r3, [r7, #4]
10053a9a:	2101      	movs	r1, #1
10053a9c:	0018      	movs	r0, r3
10053a9e:	f7ff fcbc 	bl	1005341a <LL_RADIO_SetCTEAndSamplingEnable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10053aa2:	46c0      	nop			@ (mov r8, r8)
10053aa4:	46bd      	mov	sp, r7
10053aa6:	b002      	add	sp, #8
10053aa8:	bd80      	pop	{r7, pc}

10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>:
{
     LL_RADIO_SetAdvertise((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
}

void BLEPLAT_CNTR_PacketSetDataPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, void* dataP)
{
10053aaa:	b580      	push	{r7, lr}
10053aac:	b082      	sub	sp, #8
10053aae:	af00      	add	r7, sp, #0
10053ab0:	6078      	str	r0, [r7, #4]
10053ab2:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetDataPointer((TXRXPACK_TypeDef*)packetP, BLUE_DATA_PTR_CAST(dataP));
10053ab4:	683a      	ldr	r2, [r7, #0]
10053ab6:	687b      	ldr	r3, [r7, #4]
10053ab8:	0011      	movs	r1, r2
10053aba:	0018      	movs	r0, r3
10053abc:	f7ff fd60 	bl	10053580 <LL_RADIO_SetDataPointer>
}
10053ac0:	46c0      	nop			@ (mov r8, r8)
10053ac2:	46bd      	mov	sp, r7
10053ac4:	b002      	add	sp, #8
10053ac6:	bd80      	pop	{r7, pc}

10053ac8 <BLEPLAT_CNTR_PacketSetIncChan>:

void BLEPLAT_CNTR_PacketSetIncChan(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053ac8:	b580      	push	{r7, lr}
10053aca:	b082      	sub	sp, #8
10053acc:	af00      	add	r7, sp, #0
10053ace:	6078      	str	r0, [r7, #4]
    LL_RADIO_IncrementerChannel_Enable((TXRXPACK_TypeDef*)packetP);
10053ad0:	687b      	ldr	r3, [r7, #4]
10053ad2:	0018      	movs	r0, r3
10053ad4:	f7ff fcee 	bl	100534b4 <LL_RADIO_IncrementerChannel_Enable>
}
10053ad8:	46c0      	nop			@ (mov r8, r8)
10053ada:	46bd      	mov	sp, r7
10053adc:	b002      	add	sp, #8
10053ade:	bd80      	pop	{r7, pc}

10053ae0 <BLEPLAT_CNTR_PacketSetIntCrcErr>:

void BLEPLAT_CNTR_PacketSetIntCrcErr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053ae0:	b580      	push	{r7, lr}
10053ae2:	b082      	sub	sp, #8
10053ae4:	af00      	add	r7, sp, #0
10053ae6:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvCRCErr_Enable((TXRXPACK_TypeDef*)packetP);
10053ae8:	687b      	ldr	r3, [r7, #4]
10053aea:	0018      	movs	r0, r3
10053aec:	f7ff fde8 	bl	100536c0 <LL_RADIO_IntRcvCRCErr_Enable>
}
10053af0:	46c0      	nop			@ (mov r8, r8)
10053af2:	46bd      	mov	sp, r7
10053af4:	b002      	add	sp, #8
10053af6:	bd80      	pop	{r7, pc}

10053af8 <BLEPLAT_CNTR_PacketSetIntDone>:

void BLEPLAT_CNTR_PacketSetIntDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053af8:	b580      	push	{r7, lr}
10053afa:	b082      	sub	sp, #8
10053afc:	af00      	add	r7, sp, #0
10053afe:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntDone_Enable((TXRXPACK_TypeDef*)packetP);
10053b00:	687b      	ldr	r3, [r7, #4]
10053b02:	0018      	movs	r0, r3
10053b04:	f7ff fdbe 	bl	10053684 <LL_RADIO_IntDone_Enable>
}
10053b08:	46c0      	nop			@ (mov r8, r8)
10053b0a:	46bd      	mov	sp, r7
10053b0c:	b002      	add	sp, #8
10053b0e:	bd80      	pop	{r7, pc}

10053b10 <BLEPLAT_CNTR_PacketSetIntRcvOk>:

void BLEPLAT_CNTR_PacketSetIntRcvOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b10:	b580      	push	{r7, lr}
10053b12:	b082      	sub	sp, #8
10053b14:	af00      	add	r7, sp, #0
10053b16:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvOk_Enable((TXRXPACK_TypeDef*)packetP);
10053b18:	687b      	ldr	r3, [r7, #4]
10053b1a:	0018      	movs	r0, r3
10053b1c:	f7ff fddf 	bl	100536de <LL_RADIO_IntRcvOk_Enable>
}
10053b20:	46c0      	nop			@ (mov r8, r8)
10053b22:	46bd      	mov	sp, r7
10053b24:	b002      	add	sp, #8
10053b26:	bd80      	pop	{r7, pc}

10053b28 <BLEPLAT_CNTR_PacketSetIntTimeout>:

void BLEPLAT_CNTR_PacketSetIntTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b28:	b580      	push	{r7, lr}
10053b2a:	b082      	sub	sp, #8
10053b2c:	af00      	add	r7, sp, #0
10053b2e:	6078      	str	r0, [r7, #4]
    LL_RADIO_IntRcvTimeout_Enable((TXRXPACK_TypeDef*)packetP);
10053b30:	687b      	ldr	r3, [r7, #4]
10053b32:	0018      	movs	r0, r3
10053b34:	f7ff fdb5 	bl	100536a2 <LL_RADIO_IntRcvTimeout_Enable>
}
10053b38:	46c0      	nop			@ (mov r8, r8)
10053b3a:	46bd      	mov	sp, r7
10053b3c:	b002      	add	sp, #8
10053b3e:	bd80      	pop	{r7, pc}

10053b40 <BLEPLAT_CNTR_PacketSetIntTxOk>:
{
  LL_RADIO_SetIntTimeCapture((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1U);
}

void BLEPLAT_CNTR_PacketSetIntTxOk(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b40:	b580      	push	{r7, lr}
10053b42:	b082      	sub	sp, #8
10053b44:	af00      	add	r7, sp, #0
10053b46:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetIntTxOk((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053b48:	687b      	ldr	r3, [r7, #4]
10053b4a:	2101      	movs	r1, #1
10053b4c:	0018      	movs	r0, r3
10053b4e:	f7ff fd81 	bl	10053654 <LL_RADIO_SetIntTxOk>
}
10053b52:	46c0      	nop			@ (mov r8, r8)
10053b54:	46bd      	mov	sp, r7
10053b56:	b002      	add	sp, #8
10053b58:	bd80      	pop	{r7, pc}

10053b5a <BLEPLAT_CNTR_PacketSetKeepsemareq>:

void BLEPLAT_CNTR_PacketSetKeepsemareq(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b5a:	b580      	push	{r7, lr}
10053b5c:	b082      	sub	sp, #8
10053b5e:	af00      	add	r7, sp, #0
10053b60:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetKeepSemaRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053b62:	687b      	ldr	r3, [r7, #4]
10053b64:	2101      	movs	r1, #1
10053b66:	0018      	movs	r0, r3
10053b68:	f7ff fc42 	bl	100533f0 <LL_RADIO_SetKeepSemaRequest>
}
10053b6c:	46c0      	nop			@ (mov r8, r8)
10053b6e:	46bd      	mov	sp, r7
10053b70:	b002      	add	sp, #8
10053b72:	bd80      	pop	{r7, pc}

10053b74 <BLEPLAT_CNTR_PacketSetNextPtr>:

void BLEPLAT_CNTR_PacketSetNextPtr(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetNextP)
{
10053b74:	b580      	push	{r7, lr}
10053b76:	b082      	sub	sp, #8
10053b78:	af00      	add	r7, sp, #0
10053b7a:	6078      	str	r0, [r7, #4]
10053b7c:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetNextPointer((TXRXPACK_TypeDef*)packetP, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetNextP));
10053b7e:	683a      	ldr	r2, [r7, #0]
10053b80:	687b      	ldr	r3, [r7, #4]
10053b82:	0011      	movs	r1, r2
10053b84:	0018      	movs	r0, r3
10053b86:	f7ff fc11 	bl	100533ac <LL_RADIO_SetNextPointer>
}
10053b8a:	46c0      	nop			@ (mov r8, r8)
10053b8c:	46bd      	mov	sp, r7
10053b8e:	b002      	add	sp, #8
10053b90:	bd80      	pop	{r7, pc}

10053b92 <BLEPLAT_CNTR_PacketSetNextRxMode>:

void BLEPLAT_CNTR_PacketSetNextRxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053b92:	b580      	push	{r7, lr}
10053b94:	b082      	sub	sp, #8
10053b96:	af00      	add	r7, sp, #0
10053b98:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x0);
10053b9a:	687b      	ldr	r3, [r7, #4]
10053b9c:	2100      	movs	r1, #0
10053b9e:	0018      	movs	r0, r3
10053ba0:	f7ff fca6 	bl	100534f0 <LL_RADIO_SetNextTxMode>
}
10053ba4:	46c0      	nop			@ (mov r8, r8)
10053ba6:	46bd      	mov	sp, r7
10053ba8:	b002      	add	sp, #8
10053baa:	bd80      	pop	{r7, pc}

10053bac <BLEPLAT_CNTR_PacketSetNextSlot>:

void BLEPLAT_CNTR_PacketSetNextSlot(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint8_t slot)
{
10053bac:	b580      	push	{r7, lr}
10053bae:	b082      	sub	sp, #8
10053bb0:	af00      	add	r7, sp, #0
10053bb2:	6078      	str	r0, [r7, #4]
10053bb4:	000a      	movs	r2, r1
10053bb6:	1cfb      	adds	r3, r7, #3
10053bb8:	701a      	strb	r2, [r3, #0]
    /* nothing to do */
}
10053bba:	46c0      	nop			@ (mov r8, r8)
10053bbc:	46bd      	mov	sp, r7
10053bbe:	b002      	add	sp, #8
10053bc0:	bd80      	pop	{r7, pc}

10053bc2 <BLEPLAT_CNTR_PacketSetNextTxMode>:

void BLEPLAT_CNTR_PacketSetNextTxMode(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053bc2:	b580      	push	{r7, lr}
10053bc4:	b082      	sub	sp, #8
10053bc6:	af00      	add	r7, sp, #0
10053bc8:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetNextTxMode((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053bca:	687b      	ldr	r3, [r7, #4]
10053bcc:	2101      	movs	r1, #1
10053bce:	0018      	movs	r0, r3
10053bd0:	f7ff fc8e 	bl	100534f0 <LL_RADIO_SetNextTxMode>
}
10053bd4:	46c0      	nop			@ (mov r8, r8)
10053bd6:	46bd      	mov	sp, r7
10053bd8:	b002      	add	sp, #8
10053bda:	bd80      	pop	{r7, pc}

10053bdc <BLEPLAT_CNTR_PacketSetNsEn>:

void BLEPLAT_CNTR_PacketSetNsEn(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053bdc:	b580      	push	{r7, lr}
10053bde:	b082      	sub	sp, #8
10053be0:	af00      	add	r7, sp, #0
10053be2:	6078      	str	r0, [r7, #4]
    LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable((TXRXPACK_TypeDef*)packetP);
10053be4:	687b      	ldr	r3, [r7, #4]
10053be6:	0018      	movs	r0, r3
10053be8:	f7ff fc56 	bl	10053498 <LL_RADIO_AutomaticSnNesnHardwareMechanism_Enable>
}
10053bec:	46c0      	nop			@ (mov r8, r8)
10053bee:	46bd      	mov	sp, r7
10053bf0:	b002      	add	sp, #8
10053bf2:	bd80      	pop	{r7, pc}

10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>:

void BLEPLAT_CNTR_PacketSetPllTrig(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053bf4:	b580      	push	{r7, lr}
10053bf6:	b082      	sub	sp, #8
10053bf8:	af00      	add	r7, sp, #0
10053bfa:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetCalibrationRequest((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053bfc:	687b      	ldr	r3, [r7, #4]
10053bfe:	2101      	movs	r1, #1
10053c00:	0018      	movs	r0, r3
10053c02:	f7ff fbe1 	bl	100533c8 <LL_RADIO_SetCalibrationRequest>
}
10053c06:	46c0      	nop			@ (mov r8, r8)
10053c08:	46bd      	mov	sp, r7
10053c0a:	b002      	add	sp, #8
10053c0c:	bd80      	pop	{r7, pc}

10053c0e <BLEPLAT_CNTR_PacketSetRxReady>:

void BLEPLAT_CNTR_PacketSetRxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053c0e:	b580      	push	{r7, lr}
10053c10:	b082      	sub	sp, #8
10053c12:	af00      	add	r7, sp, #0
10053c14:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053c16:	687b      	ldr	r3, [r7, #4]
10053c18:	2101      	movs	r1, #1
10053c1a:	0018      	movs	r0, r3
10053c1c:	f7ff fc80 	bl	10053520 <LL_RADIO_SetAllTableDataReady>
}
10053c20:	46c0      	nop			@ (mov r8, r8)
10053c22:	46bd      	mov	sp, r7
10053c24:	b002      	add	sp, #8
10053c26:	bd80      	pop	{r7, pc}

10053c28 <BLEPLAT_CNTR_PacketSetTimeout>:

void BLEPLAT_CNTR_PacketSetTimeout(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t x)
{
10053c28:	b580      	push	{r7, lr}
10053c2a:	b082      	sub	sp, #8
10053c2c:	af00      	add	r7, sp, #0
10053c2e:	6078      	str	r0, [r7, #4]
10053c30:	6039      	str	r1, [r7, #0]
    LL_RADIO_SetTimer2Triggering((TXRXPACK_TypeDef*)packetP, x);
10053c32:	683a      	ldr	r2, [r7, #0]
10053c34:	687b      	ldr	r3, [r7, #4]
10053c36:	0011      	movs	r1, r2
10053c38:	0018      	movs	r0, r3
10053c3a:	f7ff fcb9 	bl	100535b0 <LL_RADIO_SetTimer2Triggering>
}
10053c3e:	46c0      	nop			@ (mov r8, r8)
10053c40:	46bd      	mov	sp, r7
10053c42:	b002      	add	sp, #8
10053c44:	bd80      	pop	{r7, pc}

10053c46 <BLEPLAT_CNTR_PacketSetTimer2Active>:

void BLEPLAT_CNTR_PacketSetTimer2Active(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053c46:	b580      	push	{r7, lr}
10053c48:	b082      	sub	sp, #8
10053c4a:	af00      	add	r7, sp, #0
10053c4c:	6078      	str	r0, [r7, #4]
    LL_RADIO_Timer2_Enable((TXRXPACK_TypeDef*)packetP);
10053c4e:	687b      	ldr	r3, [r7, #4]
10053c50:	0018      	movs	r0, r3
10053c52:	f7ff fcc0 	bl	100535d6 <LL_RADIO_Timer2_Enable>
}
10053c56:	46c0      	nop			@ (mov r8, r8)
10053c58:	46bd      	mov	sp, r7
10053c5a:	b002      	add	sp, #8
10053c5c:	bd80      	pop	{r7, pc}

10053c5e <BLEPLAT_CNTR_PacketSetTimerTrigDone>:

void BLEPLAT_CNTR_PacketSetTimerTrigDone(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053c5e:	b580      	push	{r7, lr}
10053c60:	b082      	sub	sp, #8
10053c62:	af00      	add	r7, sp, #0
10053c64:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigDone((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053c66:	687b      	ldr	r3, [r7, #4]
10053c68:	2101      	movs	r1, #1
10053c6a:	0018      	movs	r0, r3
10053c6c:	f7ff fcda 	bl	10053624 <LL_RADIO_SetTrigDone>
}
10053c70:	46c0      	nop			@ (mov r8, r8)
10053c72:	46bd      	mov	sp, r7
10053c74:	b002      	add	sp, #8
10053c76:	bd80      	pop	{r7, pc}

10053c78 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>:

void BLEPLAT_CNTR_PacketSetTimerTrigRcv(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053c78:	b580      	push	{r7, lr}
10053c7a:	b082      	sub	sp, #8
10053c7c:	af00      	add	r7, sp, #0
10053c7e:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTrigRcv((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053c80:	687b      	ldr	r3, [r7, #4]
10053c82:	2101      	movs	r1, #1
10053c84:	0018      	movs	r0, r3
10053c86:	f7ff fcb5 	bl	100535f4 <LL_RADIO_SetTrigRcv>
}
10053c8a:	46c0      	nop			@ (mov r8, r8)
10053c8c:	46bd      	mov	sp, r7
10053c8e:	b002      	add	sp, #8
10053c90:	bd80      	pop	{r7, pc}

10053c92 <BLEPLAT_CNTR_PacketSetTxReady>:

void BLEPLAT_CNTR_PacketSetTxReady(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10053c92:	b580      	push	{r7, lr}
10053c94:	b082      	sub	sp, #8
10053c96:	af00      	add	r7, sp, #0
10053c98:	6078      	str	r0, [r7, #4]
    LL_RADIO_SetTransmissionDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053c9a:	687b      	ldr	r3, [r7, #4]
10053c9c:	2101      	movs	r1, #1
10053c9e:	0018      	movs	r0, r3
10053ca0:	f7ff fc56 	bl	10053550 <LL_RADIO_SetTransmissionDataReady>
    LL_RADIO_SetAllTableDataReady((TXRXPACK_TypeDef*)packetP, (uint32_t) 0x1);
10053ca4:	687b      	ldr	r3, [r7, #4]
10053ca6:	2101      	movs	r1, #1
10053ca8:	0018      	movs	r0, r3
10053caa:	f7ff fc39 	bl	10053520 <LL_RADIO_SetAllTableDataReady>
}
10053cae:	46c0      	nop			@ (mov r8, r8)
10053cb0:	46bd      	mov	sp, r7
10053cb2:	b002      	add	sp, #8
10053cb4:	bd80      	pop	{r7, pc}

10053cb6 <BLEPLAT_CNTR_SetRcvLen>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SetRcvLen(BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP, uint32_t rcvLen)
{
10053cb6:	b580      	push	{r7, lr}
10053cb8:	b082      	sub	sp, #8
10053cba:	af00      	add	r7, sp, #0
10053cbc:	6078      	str	r0, [r7, #4]
10053cbe:	6039      	str	r1, [r7, #0]
  (void)packetP;
  LL_RADIO_SetReceiveWindowTimeout((uint32_t) (rcvLen & 0xFFFFFU));
10053cc0:	683b      	ldr	r3, [r7, #0]
10053cc2:	031b      	lsls	r3, r3, #12
10053cc4:	0b1b      	lsrs	r3, r3, #12
10053cc6:	0018      	movs	r0, r3
10053cc8:	f7fe fea6 	bl	10052a18 <LL_RADIO_SetReceiveWindowTimeout>
}
10053ccc:	46c0      	nop			@ (mov r8, r8)
10053cce:	46bd      	mov	sp, r7
10053cd0:	b002      	add	sp, #8
10053cd2:	bd80      	pop	{r7, pc}

10053cd4 <BLEPLAT_CNTR_SmCteOff>:

void BLEPLAT_CNTR_SmCteOff(uint8_t smNo)
{
10053cd4:	b580      	push	{r7, lr}
10053cd6:	b082      	sub	sp, #8
10053cd8:	af00      	add	r7, sp, #0
10053cda:	0002      	movs	r2, r0
10053cdc:	1dfb      	adds	r3, r7, #7
10053cde:	701a      	strb	r2, [r3, #0]
#if defined(STM32WB05) || defined(STM32WB09)
  LL_RADIO_SetCTEDisable(smNo, 0x01);
10053ce0:	1dfb      	adds	r3, r7, #7
10053ce2:	781b      	ldrb	r3, [r3, #0]
10053ce4:	2101      	movs	r1, #1
10053ce6:	0018      	movs	r0, r3
10053ce8:	f7ff f848 	bl	10052d7c <LL_RADIO_SetCTEDisable>
#elif defined(STM32WB06) || defined(STM32WB07)
  /* nothing to do */
#endif
}
10053cec:	46c0      	nop			@ (mov r8, r8)
10053cee:	46bd      	mov	sp, r7
10053cf0:	b002      	add	sp, #8
10053cf2:	bd80      	pop	{r7, pc}

10053cf4 <BLEPLAT_CNTR_SmEnRadioConfig>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmEnRadioConfig(uint8_t smNo, uint32_t enable)
{
10053cf4:	b580      	push	{r7, lr}
10053cf6:	b082      	sub	sp, #8
10053cf8:	af00      	add	r7, sp, #0
10053cfa:	0002      	movs	r2, r0
10053cfc:	6039      	str	r1, [r7, #0]
10053cfe:	1dfb      	adds	r3, r7, #7
10053d00:	701a      	strb	r2, [r3, #0]
    if(enable)
10053d02:	683b      	ldr	r3, [r7, #0]
10053d04:	2b00      	cmp	r3, #0
10053d06:	d005      	beq.n	10053d14 <BLEPLAT_CNTR_SmEnRadioConfig+0x20>
	    LL_RADIO_RadioCommandList_Enable(smNo);
10053d08:	1dfb      	adds	r3, r7, #7
10053d0a:	781b      	ldrb	r3, [r3, #0]
10053d0c:	0018      	movs	r0, r3
10053d0e:	f7fe fec1 	bl	10052a94 <LL_RADIO_RadioCommandList_Enable>
	else
	    LL_RADIO_RadioCommandList_Disable(smNo);
}
10053d12:	e004      	b.n	10053d1e <BLEPLAT_CNTR_SmEnRadioConfig+0x2a>
	    LL_RADIO_RadioCommandList_Disable(smNo);
10053d14:	1dfb      	adds	r3, r7, #7
10053d16:	781b      	ldrb	r3, [r3, #0]
10053d18:	0018      	movs	r0, r3
10053d1a:	f7fe fed9 	bl	10052ad0 <LL_RADIO_RadioCommandList_Disable>
}
10053d1e:	46c0      	nop			@ (mov r8, r8)
10053d20:	46bd      	mov	sp, r7
10053d22:	b002      	add	sp, #8
10053d24:	bd80      	pop	{r7, pc}

10053d26 <BLEPLAT_CNTR_SmEncOff>:

void BLEPLAT_CNTR_SmEncOff(uint8_t smNo)
{
10053d26:	b580      	push	{r7, lr}
10053d28:	b082      	sub	sp, #8
10053d2a:	af00      	add	r7, sp, #0
10053d2c:	0002      	movs	r2, r0
10053d2e:	1dfb      	adds	r3, r7, #7
10053d30:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Disable(smNo);
10053d32:	1dfb      	adds	r3, r7, #7
10053d34:	781b      	ldrb	r3, [r3, #0]
10053d36:	0018      	movs	r0, r3
10053d38:	f7fe ffc0 	bl	10052cbc <LL_RADIO_Encryption_Disable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable(smNo);
10053d3c:	1dfb      	adds	r3, r7, #7
10053d3e:	781b      	ldrb	r3, [r3, #0]
10053d40:	0018      	movs	r0, r3
10053d42:	f7ff f9ad 	bl	100530a0 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Disable>
}
10053d46:	46c0      	nop			@ (mov r8, r8)
10053d48:	46bd      	mov	sp, r7
10053d4a:	b002      	add	sp, #8
10053d4c:	bd80      	pop	{r7, pc}

10053d4e <BLEPLAT_CNTR_SmEncOn>:

void BLEPLAT_CNTR_SmEncOn(uint8_t smNo)
{
10053d4e:	b580      	push	{r7, lr}
10053d50:	b082      	sub	sp, #8
10053d52:	af00      	add	r7, sp, #0
10053d54:	0002      	movs	r2, r0
10053d56:	1dfb      	adds	r3, r7, #7
10053d58:	701a      	strb	r2, [r3, #0]
    LL_RADIO_Encryption_Enable(smNo);
10053d5a:	1dfb      	adds	r3, r7, #7
10053d5c:	781b      	ldrb	r3, [r3, #0]
10053d5e:	0018      	movs	r0, r3
10053d60:	f7fe ff8c 	bl	10052c7c <LL_RADIO_Encryption_Enable>
    LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable(smNo);
10053d64:	1dfb      	adds	r3, r7, #7
10053d66:	781b      	ldrb	r3, [r3, #0]
10053d68:	0018      	movs	r0, r3
10053d6a:	f7ff f979 	bl	10053060 <LL_RADIO_ReceiveEncryptionErrorInterrupt_Enable>
}
10053d6e:	46c0      	nop			@ (mov r8, r8)
10053d70:	46bd      	mov	sp, r7
10053d72:	b002      	add	sp, #8
10053d74:	bd80      	pop	{r7, pc}

10053d76 <BLEPLAT_CNTR_SmGetAccessAddr>:

uint32_t BLEPLAT_CNTR_SmGetAccessAddr(uint8_t smNo)
{
10053d76:	b580      	push	{r7, lr}
10053d78:	b082      	sub	sp, #8
10053d7a:	af00      	add	r7, sp, #0
10053d7c:	0002      	movs	r2, r0
10053d7e:	1dfb      	adds	r3, r7, #7
10053d80:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_GetAccessAddress(smNo);
10053d82:	1dfb      	adds	r3, r7, #7
10053d84:	781b      	ldrb	r3, [r3, #0]
10053d86:	0018      	movs	r0, r3
10053d88:	f7ff f9c8 	bl	1005311c <LL_RADIO_GetAccessAddress>
10053d8c:	0003      	movs	r3, r0
}
10053d8e:	0018      	movs	r0, r3
10053d90:	46bd      	mov	sp, r7
10053d92:	b002      	add	sp, #8
10053d94:	bd80      	pop	{r7, pc}

10053d96 <BLEPLAT_CNTR_SmGetChannelMap>:

void BLEPLAT_CNTR_SmGetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10053d96:	b580      	push	{r7, lr}
10053d98:	b082      	sub	sp, #8
10053d9a:	af00      	add	r7, sp, #0
10053d9c:	0002      	movs	r2, r0
10053d9e:	6039      	str	r1, [r7, #0]
10053da0:	1dfb      	adds	r3, r7, #7
10053da2:	701a      	strb	r2, [r3, #0]
    chanMap[0] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo));
10053da4:	1dfb      	adds	r3, r7, #7
10053da6:	781b      	ldrb	r3, [r3, #0]
10053da8:	0018      	movs	r0, r3
10053daa:	f7ff faad 	bl	10053308 <LL_RADIO_GetUsedChannelFlags_15_0>
10053dae:	0003      	movs	r3, r0
10053db0:	b2da      	uxtb	r2, r3
10053db2:	683b      	ldr	r3, [r7, #0]
10053db4:	701a      	strb	r2, [r3, #0]
    chanMap[1] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_15_0(smNo) >> 8U);
10053db6:	1dfb      	adds	r3, r7, #7
10053db8:	781b      	ldrb	r3, [r3, #0]
10053dba:	0018      	movs	r0, r3
10053dbc:	f7ff faa4 	bl	10053308 <LL_RADIO_GetUsedChannelFlags_15_0>
10053dc0:	0003      	movs	r3, r0
10053dc2:	0a1a      	lsrs	r2, r3, #8
10053dc4:	683b      	ldr	r3, [r7, #0]
10053dc6:	3301      	adds	r3, #1
10053dc8:	b2d2      	uxtb	r2, r2
10053dca:	701a      	strb	r2, [r3, #0]
    chanMap[2] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo));
10053dcc:	1dfb      	adds	r3, r7, #7
10053dce:	781b      	ldrb	r3, [r3, #0]
10053dd0:	0018      	movs	r0, r3
10053dd2:	f7ff fad5 	bl	10053380 <LL_RADIO_GetUsedChannelFlags_36_16>
10053dd6:	0002      	movs	r2, r0
10053dd8:	683b      	ldr	r3, [r7, #0]
10053dda:	3302      	adds	r3, #2
10053ddc:	b2d2      	uxtb	r2, r2
10053dde:	701a      	strb	r2, [r3, #0]
    chanMap[3] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 8U);
10053de0:	1dfb      	adds	r3, r7, #7
10053de2:	781b      	ldrb	r3, [r3, #0]
10053de4:	0018      	movs	r0, r3
10053de6:	f7ff facb 	bl	10053380 <LL_RADIO_GetUsedChannelFlags_36_16>
10053dea:	0003      	movs	r3, r0
10053dec:	0a1a      	lsrs	r2, r3, #8
10053dee:	683b      	ldr	r3, [r7, #0]
10053df0:	3303      	adds	r3, #3
10053df2:	b2d2      	uxtb	r2, r2
10053df4:	701a      	strb	r2, [r3, #0]
    chanMap[4] = (uint8_t)(LL_RADIO_GetUsedChannelFlags_36_16(smNo) >> 16U);
10053df6:	1dfb      	adds	r3, r7, #7
10053df8:	781b      	ldrb	r3, [r3, #0]
10053dfa:	0018      	movs	r0, r3
10053dfc:	f7ff fac0 	bl	10053380 <LL_RADIO_GetUsedChannelFlags_36_16>
10053e00:	0003      	movs	r3, r0
10053e02:	0c1a      	lsrs	r2, r3, #16
10053e04:	683b      	ldr	r3, [r7, #0]
10053e06:	3304      	adds	r3, #4
10053e08:	b2d2      	uxtb	r2, r2
10053e0a:	701a      	strb	r2, [r3, #0]
}
10053e0c:	46c0      	nop			@ (mov r8, r8)
10053e0e:	46bd      	mov	sp, r7
10053e10:	b002      	add	sp, #8
10053e12:	bd80      	pop	{r7, pc}

10053e14 <BLEPLAT_CNTR_SmGetEncIvPtr>:
  return (uint8_t)0;
#endif
}

uint32_t* BLEPLAT_CNTR_SmGetEncIvPtr(uint8_t smNo)
{
10053e14:	b580      	push	{r7, lr}
10053e16:	b082      	sub	sp, #8
10053e18:	af00      	add	r7, sp, #0
10053e1a:	0002      	movs	r2, r0
10053e1c:	1dfb      	adds	r3, r7, #7
10053e1e:	701a      	strb	r2, [r3, #0]
    return (uint32_t*)&(bluedata + smNo)->ENCRYPTIV[0];
10053e20:	1dfb      	adds	r3, r7, #7
10053e22:	781b      	ldrb	r3, [r3, #0]
10053e24:	225c      	movs	r2, #92	@ 0x5c
10053e26:	4353      	muls	r3, r2
10053e28:	4a03      	ldr	r2, [pc, #12]	@ (10053e38 <BLEPLAT_CNTR_SmGetEncIvPtr+0x24>)
10053e2a:	4694      	mov	ip, r2
10053e2c:	4463      	add	r3, ip
10053e2e:	3338      	adds	r3, #56	@ 0x38
}
10053e30:	0018      	movs	r0, r3
10053e32:	46bd      	mov	sp, r7
10053e34:	b002      	add	sp, #8
10053e36:	bd80      	pop	{r7, pc}
10053e38:	200000dc 	.word	0x200000dc

10053e3c <BLEPLAT_CNTR_SmGetEncKeyPtr>:

uint32_t* BLEPLAT_CNTR_SmGetEncKeyPtr(uint8_t smNo)
{
10053e3c:	b580      	push	{r7, lr}
10053e3e:	b082      	sub	sp, #8
10053e40:	af00      	add	r7, sp, #0
10053e42:	0002      	movs	r2, r0
10053e44:	1dfb      	adds	r3, r7, #7
10053e46:	701a      	strb	r2, [r3, #0]
	return (uint32_t*)&(bluedata + smNo)->ENCRYPTK[0];
10053e48:	1dfb      	adds	r3, r7, #7
10053e4a:	781b      	ldrb	r3, [r3, #0]
10053e4c:	225c      	movs	r2, #92	@ 0x5c
10053e4e:	4353      	muls	r3, r2
10053e50:	4a03      	ldr	r2, [pc, #12]	@ (10053e60 <BLEPLAT_CNTR_SmGetEncKeyPtr+0x24>)
10053e52:	4694      	mov	ip, r2
10053e54:	4463      	add	r3, ip
10053e56:	3340      	adds	r3, #64	@ 0x40
}
10053e58:	0018      	movs	r0, r3
10053e5a:	46bd      	mov	sp, r7
10053e5c:	b002      	add	sp, #8
10053e5e:	bd80      	pop	{r7, pc}
10053e60:	200000dc 	.word	0x200000dc

10053e64 <BLEPLAT_CNTR_SmGetHopIncr>:
{
    return (uint8_t)LL_RADIO_Encryption_IsEnabled(smNo);
}

uint8_t BLEPLAT_CNTR_SmGetHopIncr(uint8_t smNo)
{
10053e64:	b580      	push	{r7, lr}
10053e66:	b082      	sub	sp, #8
10053e68:	af00      	add	r7, sp, #0
10053e6a:	0002      	movs	r2, r0
10053e6c:	1dfb      	adds	r3, r7, #7
10053e6e:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetHopIncrement(smNo);
10053e70:	1dfb      	adds	r3, r7, #7
10053e72:	781b      	ldrb	r3, [r3, #0]
10053e74:	0018      	movs	r0, r3
10053e76:	f7ff fa0d 	bl	10053294 <LL_RADIO_GetHopIncrement>
10053e7a:	0003      	movs	r3, r0
10053e7c:	b2db      	uxtb	r3, r3
}
10053e7e:	0018      	movs	r0, r3
10053e80:	46bd      	mov	sp, r7
10053e82:	b002      	add	sp, #8
10053e84:	bd80      	pop	{r7, pc}

10053e86 <BLEPLAT_CNTR_SmGetMode>:

uint8_t BLEPLAT_CNTR_SmGetMode(uint8_t smNo)
{
10053e86:	b580      	push	{r7, lr}
10053e88:	b082      	sub	sp, #8
10053e8a:	af00      	add	r7, sp, #0
10053e8c:	0002      	movs	r2, r0
10053e8e:	1dfb      	adds	r3, r7, #7
10053e90:	701a      	strb	r2, [r3, #0]
    return LL_RADIO_TxMode_IsEnabled(smNo);
10053e92:	1dfb      	adds	r3, r7, #7
10053e94:	781b      	ldrb	r3, [r3, #0]
10053e96:	0018      	movs	r0, r3
10053e98:	f7fe fe74 	bl	10052b84 <LL_RADIO_TxMode_IsEnabled>
10053e9c:	0003      	movs	r3, r0
10053e9e:	b2db      	uxtb	r3, r3
}
10053ea0:	0018      	movs	r0, r3
10053ea2:	46bd      	mov	sp, r7
10053ea4:	b002      	add	sp, #8
10053ea6:	bd80      	pop	{r7, pc}

10053ea8 <BLEPLAT_CNTR_SmGetRemapChan>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPointPrevious(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetRemapChan(uint8_t smNo)
{
10053ea8:	b580      	push	{r7, lr}
10053eaa:	b082      	sub	sp, #8
10053eac:	af00      	add	r7, sp, #0
10053eae:	0002      	movs	r2, r0
10053eb0:	1dfb      	adds	r3, r7, #7
10053eb2:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetRemapChannel(smNo);
10053eb4:	1dfb      	adds	r3, r7, #7
10053eb6:	781b      	ldrb	r3, [r3, #0]
10053eb8:	0018      	movs	r0, r3
10053eba:	f7fe fea7 	bl	10052c0c <LL_RADIO_GetRemapChannel>
10053ebe:	0003      	movs	r3, r0
10053ec0:	b2db      	uxtb	r3, r3
}
10053ec2:	0018      	movs	r0, r3
10053ec4:	46bd      	mov	sp, r7
10053ec6:	b002      	add	sp, #8
10053ec8:	bd80      	pop	{r7, pc}

10053eca <BLEPLAT_CNTR_SmGetRxCount>:

void BLEPLAT_CNTR_SmGetRxCount(uint8_t smNo, uint32_t* packetCount)
{
10053eca:	b590      	push	{r4, r7, lr}
10053ecc:	b083      	sub	sp, #12
10053ece:	af00      	add	r7, sp, #0
10053ed0:	0002      	movs	r2, r0
10053ed2:	6039      	str	r1, [r7, #0]
10053ed4:	1dfb      	adds	r3, r7, #7
10053ed6:	701a      	strb	r2, [r3, #0]

    packetCount[0] = LL_RADIO_GetPacketCounterRx_23_0(smNo);
10053ed8:	1dfb      	adds	r3, r7, #7
10053eda:	781b      	ldrb	r3, [r3, #0]
10053edc:	0018      	movs	r0, r3
10053ede:	f7ff f86d 	bl	10052fbc <LL_RADIO_GetPacketCounterRx_23_0>
10053ee2:	0002      	movs	r2, r0
10053ee4:	683b      	ldr	r3, [r7, #0]
10053ee6:	601a      	str	r2, [r3, #0]
    packetCount[0] = packetCount[0] | ((uint32_t)LL_RADIO_GetPacketCounterRx_39_24(smNo) << 24U);
10053ee8:	683b      	ldr	r3, [r7, #0]
10053eea:	681c      	ldr	r4, [r3, #0]
10053eec:	1dfb      	adds	r3, r7, #7
10053eee:	781b      	ldrb	r3, [r3, #0]
10053ef0:	0018      	movs	r0, r3
10053ef2:	f7ff f89f 	bl	10053034 <LL_RADIO_GetPacketCounterRx_39_24>
10053ef6:	0003      	movs	r3, r0
10053ef8:	061b      	lsls	r3, r3, #24
10053efa:	0022      	movs	r2, r4
10053efc:	431a      	orrs	r2, r3
10053efe:	683b      	ldr	r3, [r7, #0]
10053f00:	601a      	str	r2, [r3, #0]
    packetCount[1] = LL_RADIO_GetPacketCounterRx_39_24(smNo) >> 8U;
10053f02:	1dfb      	adds	r3, r7, #7
10053f04:	781b      	ldrb	r3, [r3, #0]
10053f06:	0018      	movs	r0, r3
10053f08:	f7ff f894 	bl	10053034 <LL_RADIO_GetPacketCounterRx_39_24>
10053f0c:	0002      	movs	r2, r0
10053f0e:	683b      	ldr	r3, [r7, #0]
10053f10:	3304      	adds	r3, #4
10053f12:	0a12      	lsrs	r2, r2, #8
10053f14:	601a      	str	r2, [r3, #0]
}
10053f16:	46c0      	nop			@ (mov r8, r8)
10053f18:	46bd      	mov	sp, r7
10053f1a:	b003      	add	sp, #12
10053f1c:	bd90      	pop	{r4, r7, pc}

10053f1e <BLEPLAT_CNTR_SmGetRxPhy>:

uint8_t BLEPLAT_CNTR_SmGetRxPhy(uint8_t smNo)
{
10053f1e:	b580      	push	{r7, lr}
10053f20:	b082      	sub	sp, #8
10053f22:	af00      	add	r7, sp, #0
10053f24:	0002      	movs	r2, r0
10053f26:	1dfb      	adds	r3, r7, #7
10053f28:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetReceptionPhy(smNo);
10053f2a:	1dfb      	adds	r3, r7, #7
10053f2c:	781b      	ldrb	r3, [r3, #0]
10053f2e:	0018      	movs	r0, r3
10053f30:	f7fe ff74 	bl	10052e1c <LL_RADIO_GetReceptionPhy>
10053f34:	0003      	movs	r3, r0
10053f36:	b2db      	uxtb	r3, r3
}
10053f38:	0018      	movs	r0, r3
10053f3a:	46bd      	mov	sp, r7
10053f3c:	b002      	add	sp, #8
10053f3e:	bd80      	pop	{r7, pc}

10053f40 <BLEPLAT_CNTR_SmGetTxPhy>:
{
    return (BLEPLAT_CNTR_TXRXPACK_TypeDef*)BLUE_TRANS_STRUCT_PTR_CAST(CONV_ADR(LL_RADIO_GetTxPoint(smNo)));
}

uint8_t BLEPLAT_CNTR_SmGetTxPhy(uint8_t smNo)
{
10053f40:	b580      	push	{r7, lr}
10053f42:	b082      	sub	sp, #8
10053f44:	af00      	add	r7, sp, #0
10053f46:	0002      	movs	r2, r0
10053f48:	1dfb      	adds	r3, r7, #7
10053f4a:	701a      	strb	r2, [r3, #0]
    return (uint8_t)LL_RADIO_GetTransmissionPhy(smNo);
10053f4c:	1dfb      	adds	r3, r7, #7
10053f4e:	781b      	ldrb	r3, [r3, #0]
10053f50:	0018      	movs	r0, r3
10053f52:	f7fe fefb 	bl	10052d4c <LL_RADIO_GetTransmissionPhy>
10053f56:	0003      	movs	r3, r0
10053f58:	b2db      	uxtb	r3, r3
}
10053f5a:	0018      	movs	r0, r3
10053f5c:	46bd      	mov	sp, r7
10053f5e:	b002      	add	sp, #8
10053f60:	bd80      	pop	{r7, pc}

10053f62 <BLEPLAT_CNTR_SmGetTxPwr>:

uint8_t BLEPLAT_CNTR_SmGetTxPwr(uint8_t smNo)
{
10053f62:	b580      	push	{r7, lr}
10053f64:	b084      	sub	sp, #16
10053f66:	af00      	add	r7, sp, #0
10053f68:	0002      	movs	r2, r0
10053f6a:	1dfb      	adds	r3, r7, #7
10053f6c:	701a      	strb	r2, [r3, #0]
    uint8_t pa_level = LL_RADIO_GetPAPower(smNo);
10053f6e:	1dfb      	adds	r3, r7, #7
10053f70:	781b      	ldrb	r3, [r3, #0]
10053f72:	0018      	movs	r0, r3
10053f74:	f7ff f950 	bl	10053218 <LL_RADIO_GetPAPower>
10053f78:	0002      	movs	r2, r0
10053f7a:	210f      	movs	r1, #15
10053f7c:	187b      	adds	r3, r7, r1
10053f7e:	701a      	strb	r2, [r3, #0]
    if (LL_RADIO_TxHp_IsEnabled(smNo) && (pa_level == MAX_PA_LEVEL))
    {
        pa_level = HP_PA_LEVEL;
    }
#endif
    return pa_level;
10053f80:	187b      	adds	r3, r7, r1
10053f82:	781b      	ldrb	r3, [r3, #0]
}
10053f84:	0018      	movs	r0, r3
10053f86:	46bd      	mov	sp, r7
10053f88:	b004      	add	sp, #16
10053f8a:	bd80      	pop	{r7, pc}

10053f8c <BLEPLAT_CNTR_SmInitTo0>:
{
    return (uint8_t)LL_RADIO_GetUnmappedChannel(smNo);
}

void BLEPLAT_CNTR_SmInitTo0(uint8_t smNo)
{
10053f8c:	b580      	push	{r7, lr}
10053f8e:	b082      	sub	sp, #8
10053f90:	af00      	add	r7, sp, #0
10053f92:	0002      	movs	r2, r0
10053f94:	1dfb      	adds	r3, r7, #7
10053f96:	701a      	strb	r2, [r3, #0]
  memset((void*)&bluedata[smNo], 0, sizeof(STATMACH_TypeDef));
10053f98:	1dfb      	adds	r3, r7, #7
10053f9a:	781b      	ldrb	r3, [r3, #0]
10053f9c:	225c      	movs	r2, #92	@ 0x5c
10053f9e:	4353      	muls	r3, r2
10053fa0:	4a08      	ldr	r2, [pc, #32]	@ (10053fc4 <BLEPLAT_CNTR_SmInitTo0+0x38>)
10053fa2:	4694      	mov	ip, r2
10053fa4:	4463      	add	r3, ip
10053fa6:	225c      	movs	r2, #92	@ 0x5c
10053fa8:	2100      	movs	r1, #0
10053faa:	0018      	movs	r0, r3
10053fac:	f013 fdda 	bl	10067b64 <memset>
  BLEPLAT_CNTR_SmEnRadioConfig(smNo, 0x01);
10053fb0:	1dfb      	adds	r3, r7, #7
10053fb2:	781b      	ldrb	r3, [r3, #0]
10053fb4:	2101      	movs	r1, #1
10053fb6:	0018      	movs	r0, r3
10053fb8:	f7ff fe9c 	bl	10053cf4 <BLEPLAT_CNTR_SmEnRadioConfig>
}
10053fbc:	46c0      	nop			@ (mov r8, r8)
10053fbe:	46bd      	mov	sp, r7
10053fc0:	b002      	add	sp, #8
10053fc2:	bd80      	pop	{r7, pc}
10053fc4:	200000dc 	.word	0x200000dc

10053fc8 <BLEPLAT_CNTR_SmSetAccessAddr>:

void BLEPLAT_CNTR_SmSetAccessAddr(uint8_t smNo, uint32_t x)
{
10053fc8:	b580      	push	{r7, lr}
10053fca:	b082      	sub	sp, #8
10053fcc:	af00      	add	r7, sp, #0
10053fce:	0002      	movs	r2, r0
10053fd0:	6039      	str	r1, [r7, #0]
10053fd2:	1dfb      	adds	r3, r7, #7
10053fd4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetAccessAddress(smNo, x);
10053fd6:	683a      	ldr	r2, [r7, #0]
10053fd8:	1dfb      	adds	r3, r7, #7
10053fda:	781b      	ldrb	r3, [r3, #0]
10053fdc:	0011      	movs	r1, r2
10053fde:	0018      	movs	r0, r3
10053fe0:	f7ff f87e 	bl	100530e0 <LL_RADIO_SetAccessAddress>
}
10053fe4:	46c0      	nop			@ (mov r8, r8)
10053fe6:	46bd      	mov	sp, r7
10053fe8:	b002      	add	sp, #8
10053fea:	bd80      	pop	{r7, pc}

10053fec <BLEPLAT_CNTR_SmSetChannelMap>:

void BLEPLAT_CNTR_SmSetChannelMap(uint8_t smNo, uint8_t* chanMap)
{
10053fec:	b580      	push	{r7, lr}
10053fee:	b084      	sub	sp, #16
10053ff0:	af00      	add	r7, sp, #0
10053ff2:	0002      	movs	r2, r0
10053ff4:	6039      	str	r1, [r7, #0]
10053ff6:	1dfb      	adds	r3, r7, #7
10053ff8:	701a      	strb	r2, [r3, #0]
    uint32_t value = (uint32_t)chanMap[0] | ((uint32_t)chanMap[1] << 8U);
10053ffa:	683b      	ldr	r3, [r7, #0]
10053ffc:	781b      	ldrb	r3, [r3, #0]
10053ffe:	001a      	movs	r2, r3
10054000:	683b      	ldr	r3, [r7, #0]
10054002:	3301      	adds	r3, #1
10054004:	781b      	ldrb	r3, [r3, #0]
10054006:	021b      	lsls	r3, r3, #8
10054008:	4313      	orrs	r3, r2
1005400a:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_15_0(smNo, value);
1005400c:	68fa      	ldr	r2, [r7, #12]
1005400e:	1dfb      	adds	r3, r7, #7
10054010:	781b      	ldrb	r3, [r3, #0]
10054012:	0011      	movs	r1, r2
10054014:	0018      	movs	r0, r3
10054016:	f7ff f955 	bl	100532c4 <LL_RADIO_SetUsedChannelFlags_15_0>
    value = (uint32_t)chanMap[2] | ((uint32_t)chanMap[3] << 8U) | ((uint32_t)chanMap[4] << 16U);
1005401a:	683b      	ldr	r3, [r7, #0]
1005401c:	3302      	adds	r3, #2
1005401e:	781b      	ldrb	r3, [r3, #0]
10054020:	001a      	movs	r2, r3
10054022:	683b      	ldr	r3, [r7, #0]
10054024:	3303      	adds	r3, #3
10054026:	781b      	ldrb	r3, [r3, #0]
10054028:	021b      	lsls	r3, r3, #8
1005402a:	431a      	orrs	r2, r3
1005402c:	683b      	ldr	r3, [r7, #0]
1005402e:	3304      	adds	r3, #4
10054030:	781b      	ldrb	r3, [r3, #0]
10054032:	041b      	lsls	r3, r3, #16
10054034:	4313      	orrs	r3, r2
10054036:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetUsedChannelFlags_36_16(smNo, value);
10054038:	68fa      	ldr	r2, [r7, #12]
1005403a:	1dfb      	adds	r3, r7, #7
1005403c:	781b      	ldrb	r3, [r3, #0]
1005403e:	0011      	movs	r1, r2
10054040:	0018      	movs	r0, r3
10054042:	f7ff f979 	bl	10053338 <LL_RADIO_SetUsedChannelFlags_36_16>
}
10054046:	46c0      	nop			@ (mov r8, r8)
10054048:	46bd      	mov	sp, r7
1005404a:	b004      	add	sp, #16
1005404c:	bd80      	pop	{r7, pc}

1005404e <BLEPLAT_CNTR_SmSetCrcInit>:

void BLEPLAT_CNTR_SmSetCrcInit(uint8_t smNo, uint32_t x)
{
1005404e:	b580      	push	{r7, lr}
10054050:	b082      	sub	sp, #8
10054052:	af00      	add	r7, sp, #0
10054054:	0002      	movs	r2, r0
10054056:	6039      	str	r1, [r7, #0]
10054058:	1dfb      	adds	r3, r7, #7
1005405a:	701a      	strb	r2, [r3, #0]
  LL_RADIO_SetCRCInitializationValue(smNo, x);
1005405c:	683a      	ldr	r2, [r7, #0]
1005405e:	1dfb      	adds	r3, r7, #7
10054060:	781b      	ldrb	r3, [r3, #0]
10054062:	0011      	movs	r1, r2
10054064:	0018      	movs	r0, r3
10054066:	f7ff f86d 	bl	10053144 <LL_RADIO_SetCRCInitializationValue>
}
1005406a:	46c0      	nop			@ (mov r8, r8)
1005406c:	46bd      	mov	sp, r7
1005406e:	b002      	add	sp, #8
10054070:	bd80      	pop	{r7, pc}

10054072 <BLEPLAT_CNTR_SmSetDataLength>:
  /* nothing to do */
#endif
}

void BLEPLAT_CNTR_SmSetDataLength(uint8_t smNo, uint8_t length)
{
10054072:	b580      	push	{r7, lr}
10054074:	b082      	sub	sp, #8
10054076:	af00      	add	r7, sp, #0
10054078:	0002      	movs	r2, r0
1005407a:	1dfb      	adds	r3, r7, #7
1005407c:	701a      	strb	r2, [r3, #0]
1005407e:	1dbb      	adds	r3, r7, #6
10054080:	1c0a      	adds	r2, r1, #0
10054082:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetMaximumReceiveLength(smNo, (uint32_t) length);
10054084:	1dbb      	adds	r3, r7, #6
10054086:	781a      	ldrb	r2, [r3, #0]
10054088:	1dfb      	adds	r3, r7, #7
1005408a:	781b      	ldrb	r3, [r3, #0]
1005408c:	0011      	movs	r1, r2
1005408e:	0018      	movs	r0, r3
10054090:	f7ff f87c 	bl	1005318c <LL_RADIO_SetMaximumReceiveLength>
}
10054094:	46c0      	nop			@ (mov r8, r8)
10054096:	46bd      	mov	sp, r7
10054098:	b002      	add	sp, #8
1005409a:	bd80      	pop	{r7, pc}

1005409c <BLEPLAT_CNTR_SmSetHopIncr>:
{
    /* nothing to do */
}

void BLEPLAT_CNTR_SmSetHopIncr(uint8_t smNo, uint8_t x)
{
1005409c:	b580      	push	{r7, lr}
1005409e:	b082      	sub	sp, #8
100540a0:	af00      	add	r7, sp, #0
100540a2:	0002      	movs	r2, r0
100540a4:	1dfb      	adds	r3, r7, #7
100540a6:	701a      	strb	r2, [r3, #0]
100540a8:	1dbb      	adds	r3, r7, #6
100540aa:	1c0a      	adds	r2, r1, #0
100540ac:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetHopIncrement(smNo, (uint32_t) x);
100540ae:	1dbb      	adds	r3, r7, #6
100540b0:	781a      	ldrb	r2, [r3, #0]
100540b2:	1dfb      	adds	r3, r7, #7
100540b4:	781b      	ldrb	r3, [r3, #0]
100540b6:	0011      	movs	r1, r2
100540b8:	0018      	movs	r0, r3
100540ba:	f7ff f8c3 	bl	10053244 <LL_RADIO_SetHopIncrement>
}
100540be:	46c0      	nop			@ (mov r8, r8)
100540c0:	46bd      	mov	sp, r7
100540c2:	b002      	add	sp, #8
100540c4:	bd80      	pop	{r7, pc}

100540c6 <BLEPLAT_CNTR_SmSetRemapChan>:

void BLEPLAT_CNTR_SmSetRemapChan(uint8_t smNo, uint8_t chan)
{
100540c6:	b580      	push	{r7, lr}
100540c8:	b082      	sub	sp, #8
100540ca:	af00      	add	r7, sp, #0
100540cc:	0002      	movs	r2, r0
100540ce:	1dfb      	adds	r3, r7, #7
100540d0:	701a      	strb	r2, [r3, #0]
100540d2:	1dbb      	adds	r3, r7, #6
100540d4:	1c0a      	adds	r2, r1, #0
100540d6:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRemapChannel(smNo, chan);
100540d8:	1dbb      	adds	r3, r7, #6
100540da:	781a      	ldrb	r2, [r3, #0]
100540dc:	1dfb      	adds	r3, r7, #7
100540de:	781b      	ldrb	r3, [r3, #0]
100540e0:	0011      	movs	r1, r2
100540e2:	0018      	movs	r0, r3
100540e4:	f7fe fd6a 	bl	10052bbc <LL_RADIO_SetRemapChannel>
}
100540e8:	46c0      	nop			@ (mov r8, r8)
100540ea:	46bd      	mov	sp, r7
100540ec:	b002      	add	sp, #8
100540ee:	bd80      	pop	{r7, pc}

100540f0 <BLEPLAT_CNTR_SmSetRxCount>:

void BLEPLAT_CNTR_SmSetRxCount(uint8_t smNo, uint32_t* packetCount)
{
100540f0:	b580      	push	{r7, lr}
100540f2:	b084      	sub	sp, #16
100540f4:	af00      	add	r7, sp, #0
100540f6:	0002      	movs	r2, r0
100540f8:	6039      	str	r1, [r7, #0]
100540fa:	1dfb      	adds	r3, r7, #7
100540fc:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterRx_23_0(smNo, (uint32_t) packetCount[0]);
100540fe:	683b      	ldr	r3, [r7, #0]
10054100:	681a      	ldr	r2, [r3, #0]
10054102:	1dfb      	adds	r3, r7, #7
10054104:	781b      	ldrb	r3, [r3, #0]
10054106:	0011      	movs	r1, r2
10054108:	0018      	movs	r0, r3
1005410a:	f7fe ff33 	bl	10052f74 <LL_RADIO_SetPacketCounterRx_23_0>
    uint32_t value = (uint32_t)(packetCount[1] << 8U) | (uint32_t)(packetCount[0] >> 24U);
1005410e:	683b      	ldr	r3, [r7, #0]
10054110:	3304      	adds	r3, #4
10054112:	681b      	ldr	r3, [r3, #0]
10054114:	021a      	lsls	r2, r3, #8
10054116:	683b      	ldr	r3, [r7, #0]
10054118:	681b      	ldr	r3, [r3, #0]
1005411a:	0e1b      	lsrs	r3, r3, #24
1005411c:	4313      	orrs	r3, r2
1005411e:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10054120:	68fa      	ldr	r2, [r7, #12]
10054122:	1dfb      	adds	r3, r7, #7
10054124:	781b      	ldrb	r3, [r3, #0]
10054126:	0011      	movs	r1, r2
10054128:	0018      	movs	r0, r3
1005412a:	f7fe ff5f 	bl	10052fec <LL_RADIO_SetPacketCounterRx_39_24>
}
1005412e:	46c0      	nop			@ (mov r8, r8)
10054130:	46bd      	mov	sp, r7
10054132:	b004      	add	sp, #16
10054134:	bd80      	pop	{r7, pc}

10054136 <BLEPLAT_CNTR_SmSetRxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetRxCountDirectionBit(uint8_t smNo)
{
10054136:	b580      	push	{r7, lr}
10054138:	b084      	sub	sp, #16
1005413a:	af00      	add	r7, sp, #0
1005413c:	0002      	movs	r2, r0
1005413e:	1dfb      	adds	r3, r7, #7
10054140:	701a      	strb	r2, [r3, #0]
    uint32_t value = LL_RADIO_GetPacketCounterRx_39_24(smNo) | 0x8000U;
10054142:	1dfb      	adds	r3, r7, #7
10054144:	781b      	ldrb	r3, [r3, #0]
10054146:	0018      	movs	r0, r3
10054148:	f7fe ff74 	bl	10053034 <LL_RADIO_GetPacketCounterRx_39_24>
1005414c:	0002      	movs	r2, r0
1005414e:	2380      	movs	r3, #128	@ 0x80
10054150:	021b      	lsls	r3, r3, #8
10054152:	4313      	orrs	r3, r2
10054154:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterRx_39_24(smNo, value);
10054156:	68fa      	ldr	r2, [r7, #12]
10054158:	1dfb      	adds	r3, r7, #7
1005415a:	781b      	ldrb	r3, [r3, #0]
1005415c:	0011      	movs	r1, r2
1005415e:	0018      	movs	r0, r3
10054160:	f7fe ff44 	bl	10052fec <LL_RADIO_SetPacketCounterRx_39_24>
}
10054164:	46c0      	nop			@ (mov r8, r8)
10054166:	46bd      	mov	sp, r7
10054168:	b004      	add	sp, #16
1005416a:	bd80      	pop	{r7, pc}

1005416c <BLEPLAT_CNTR_SmSetRxMode>:

void BLEPLAT_CNTR_SmSetRxMode(uint8_t smNo)
{
1005416c:	b580      	push	{r7, lr}
1005416e:	b082      	sub	sp, #8
10054170:	af00      	add	r7, sp, #0
10054172:	0002      	movs	r2, r0
10054174:	1dfb      	adds	r3, r7, #7
10054176:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Disable(smNo);
10054178:	1dfb      	adds	r3, r7, #7
1005417a:	781b      	ldrb	r3, [r3, #0]
1005417c:	0018      	movs	r0, r3
1005417e:	f7fe fce3 	bl	10052b48 <LL_RADIO_TxMode_Disable>
}
10054182:	46c0      	nop			@ (mov r8, r8)
10054184:	46bd      	mov	sp, r7
10054186:	b002      	add	sp, #8
10054188:	bd80      	pop	{r7, pc}

1005418a <BLEPLAT_CNTR_SmSetRxPacketPtr>:

void BLEPLAT_CNTR_SmSetRxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
1005418a:	b580      	push	{r7, lr}
1005418c:	b082      	sub	sp, #8
1005418e:	af00      	add	r7, sp, #0
10054190:	0002      	movs	r2, r0
10054192:	6039      	str	r1, [r7, #0]
10054194:	1dfb      	adds	r3, r7, #7
10054196:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetRcvPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10054198:	683a      	ldr	r2, [r7, #0]
1005419a:	1dfb      	adds	r3, r7, #7
1005419c:	781b      	ldrb	r3, [r3, #0]
1005419e:	0011      	movs	r1, r2
100541a0:	0018      	movs	r0, r3
100541a2:	f7fe fe71 	bl	10052e88 <LL_RADIO_SetRcvPoint>
}
100541a6:	46c0      	nop			@ (mov r8, r8)
100541a8:	46bd      	mov	sp, r7
100541aa:	b002      	add	sp, #8
100541ac:	bd80      	pop	{r7, pc}

100541ae <BLEPLAT_CNTR_SmSetRxPhy>:

void BLEPLAT_CNTR_SmSetRxPhy(uint8_t smNo, uint8_t rxPhy)
{
100541ae:	b580      	push	{r7, lr}
100541b0:	b082      	sub	sp, #8
100541b2:	af00      	add	r7, sp, #0
100541b4:	0002      	movs	r2, r0
100541b6:	1dfb      	adds	r3, r7, #7
100541b8:	701a      	strb	r2, [r3, #0]
100541ba:	1dbb      	adds	r3, r7, #6
100541bc:	1c0a      	adds	r2, r1, #0
100541be:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetReceptionPhy(smNo, (uint32_t) rxPhy);
100541c0:	1dbb      	adds	r3, r7, #6
100541c2:	781a      	ldrb	r2, [r3, #0]
100541c4:	1dfb      	adds	r3, r7, #7
100541c6:	781b      	ldrb	r3, [r3, #0]
100541c8:	0011      	movs	r1, r2
100541ca:	0018      	movs	r0, r3
100541cc:	f7fe fdfe 	bl	10052dcc <LL_RADIO_SetReceptionPhy>
}
100541d0:	46c0      	nop			@ (mov r8, r8)
100541d2:	46bd      	mov	sp, r7
100541d4:	b002      	add	sp, #8
100541d6:	bd80      	pop	{r7, pc}

100541d8 <BLEPLAT_CNTR_SmSetTxCount>:

void BLEPLAT_CNTR_SmSetTxCount(uint8_t smNo, uint32_t* packetCount)
{
100541d8:	b580      	push	{r7, lr}
100541da:	b082      	sub	sp, #8
100541dc:	af00      	add	r7, sp, #0
100541de:	0002      	movs	r2, r0
100541e0:	6039      	str	r1, [r7, #0]
100541e2:	1dfb      	adds	r3, r7, #7
100541e4:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetPacketCounterTx_31_0(smNo, (uint32_t) packetCount[0]);
100541e6:	683b      	ldr	r3, [r7, #0]
100541e8:	681a      	ldr	r2, [r3, #0]
100541ea:	1dfb      	adds	r3, r7, #7
100541ec:	781b      	ldrb	r3, [r3, #0]
100541ee:	0011      	movs	r1, r2
100541f0:	0018      	movs	r0, r3
100541f2:	f7fe fe67 	bl	10052ec4 <LL_RADIO_SetPacketCounterTx_31_0>
    LL_RADIO_SetPacketCounterTx_39_32(smNo, (uint32_t) packetCount[1]);
100541f6:	683b      	ldr	r3, [r7, #0]
100541f8:	3304      	adds	r3, #4
100541fa:	681a      	ldr	r2, [r3, #0]
100541fc:	1dfb      	adds	r3, r7, #7
100541fe:	781b      	ldrb	r3, [r3, #0]
10054200:	0011      	movs	r1, r2
10054202:	0018      	movs	r0, r3
10054204:	f7fe fe7c 	bl	10052f00 <LL_RADIO_SetPacketCounterTx_39_32>
}
10054208:	46c0      	nop			@ (mov r8, r8)
1005420a:	46bd      	mov	sp, r7
1005420c:	b002      	add	sp, #8
1005420e:	bd80      	pop	{r7, pc}

10054210 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>:

void BLEPLAT_CNTR_SmSetTxCountDirectionBit(uint8_t smNo)
{
10054210:	b580      	push	{r7, lr}
10054212:	b084      	sub	sp, #16
10054214:	af00      	add	r7, sp, #0
10054216:	0002      	movs	r2, r0
10054218:	1dfb      	adds	r3, r7, #7
1005421a:	701a      	strb	r2, [r3, #0]
    uint32_t value =  (LL_RADIO_GetPacketCounterTx_39_32(smNo) | 0x00000080U);
1005421c:	1dfb      	adds	r3, r7, #7
1005421e:	781b      	ldrb	r3, [r3, #0]
10054220:	0018      	movs	r0, r3
10054222:	f7fe fe91 	bl	10052f48 <LL_RADIO_GetPacketCounterTx_39_32>
10054226:	0003      	movs	r3, r0
10054228:	2280      	movs	r2, #128	@ 0x80
1005422a:	4313      	orrs	r3, r2
1005422c:	60fb      	str	r3, [r7, #12]
    LL_RADIO_SetPacketCounterTx_39_32(smNo,  value);
1005422e:	68fa      	ldr	r2, [r7, #12]
10054230:	1dfb      	adds	r3, r7, #7
10054232:	781b      	ldrb	r3, [r3, #0]
10054234:	0011      	movs	r1, r2
10054236:	0018      	movs	r0, r3
10054238:	f7fe fe62 	bl	10052f00 <LL_RADIO_SetPacketCounterTx_39_32>
}
1005423c:	46c0      	nop			@ (mov r8, r8)
1005423e:	46bd      	mov	sp, r7
10054240:	b004      	add	sp, #16
10054242:	bd80      	pop	{r7, pc}

10054244 <BLEPLAT_CNTR_SmSetTxMode>:

void BLEPLAT_CNTR_SmSetTxMode(uint8_t smNo)
{
10054244:	b580      	push	{r7, lr}
10054246:	b082      	sub	sp, #8
10054248:	af00      	add	r7, sp, #0
1005424a:	0002      	movs	r2, r0
1005424c:	1dfb      	adds	r3, r7, #7
1005424e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_TxMode_Enable(smNo);
10054250:	1dfb      	adds	r3, r7, #7
10054252:	781b      	ldrb	r3, [r3, #0]
10054254:	0018      	movs	r0, r3
10054256:	f7fe fc59 	bl	10052b0c <LL_RADIO_TxMode_Enable>
}
1005425a:	46c0      	nop			@ (mov r8, r8)
1005425c:	46bd      	mov	sp, r7
1005425e:	b002      	add	sp, #8
10054260:	bd80      	pop	{r7, pc}

10054262 <BLEPLAT_CNTR_SmSetTxPacketPtr>:

void BLEPLAT_CNTR_SmSetTxPacketPtr(uint8_t smNo, BLEPLAT_CNTR_TXRXPACK_TypeDef* packetP)
{
10054262:	b580      	push	{r7, lr}
10054264:	b082      	sub	sp, #8
10054266:	af00      	add	r7, sp, #0
10054268:	0002      	movs	r2, r0
1005426a:	6039      	str	r1, [r7, #0]
1005426c:	1dfb      	adds	r3, r7, #7
1005426e:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTxPoint(smNo, (uint32_t) BLUE_STRUCT_PTR_CAST((TXRXPACK_TypeDef*)packetP));
10054270:	683a      	ldr	r2, [r7, #0]
10054272:	1dfb      	adds	r3, r7, #7
10054274:	781b      	ldrb	r3, [r3, #0]
10054276:	0011      	movs	r1, r2
10054278:	0018      	movs	r0, r3
1005427a:	f7fe fde7 	bl	10052e4c <LL_RADIO_SetTxPoint>
}
1005427e:	46c0      	nop			@ (mov r8, r8)
10054280:	46bd      	mov	sp, r7
10054282:	b002      	add	sp, #8
10054284:	bd80      	pop	{r7, pc}

10054286 <BLEPLAT_CNTR_SmSetTxPhy>:

void BLEPLAT_CNTR_SmSetTxPhy(uint8_t smNo, uint8_t txPhy)
{
10054286:	b580      	push	{r7, lr}
10054288:	b082      	sub	sp, #8
1005428a:	af00      	add	r7, sp, #0
1005428c:	0002      	movs	r2, r0
1005428e:	1dfb      	adds	r3, r7, #7
10054290:	701a      	strb	r2, [r3, #0]
10054292:	1dbb      	adds	r3, r7, #6
10054294:	1c0a      	adds	r2, r1, #0
10054296:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetTransmissionPhy(smNo, (uint32_t) txPhy);
10054298:	1dbb      	adds	r3, r7, #6
1005429a:	781a      	ldrb	r2, [r3, #0]
1005429c:	1dfb      	adds	r3, r7, #7
1005429e:	781b      	ldrb	r3, [r3, #0]
100542a0:	0011      	movs	r1, r2
100542a2:	0018      	movs	r0, r3
100542a4:	f7fe fd2a 	bl	10052cfc <LL_RADIO_SetTransmissionPhy>
}
100542a8:	46c0      	nop			@ (mov r8, r8)
100542aa:	46bd      	mov	sp, r7
100542ac:	b002      	add	sp, #8
100542ae:	bd80      	pop	{r7, pc}

100542b0 <BLEPLAT_CNTR_SmSetTxPwr>:
#endif
}

/* Consider PA Level 32 the one used to enable high power. */
void BLEPLAT_CNTR_SmSetTxPwr(uint8_t smNo, uint8_t paLevel)
{
100542b0:	b580      	push	{r7, lr}
100542b2:	b082      	sub	sp, #8
100542b4:	af00      	add	r7, sp, #0
100542b6:	0002      	movs	r2, r0
100542b8:	1dfb      	adds	r3, r7, #7
100542ba:	701a      	strb	r2, [r3, #0]
100542bc:	1dbb      	adds	r3, r7, #6
100542be:	1c0a      	adds	r2, r1, #0
100542c0:	701a      	strb	r2, [r3, #0]
  {
    LL_RADIO_TxHp_Disable(smNo);
  }
#endif

  LL_RADIO_SetPAPower(smNo, (uint32_t) paLevel);
100542c2:	1dbb      	adds	r3, r7, #6
100542c4:	781a      	ldrb	r2, [r3, #0]
100542c6:	1dfb      	adds	r3, r7, #7
100542c8:	781b      	ldrb	r3, [r3, #0]
100542ca:	0011      	movs	r1, r2
100542cc:	0018      	movs	r0, r3
100542ce:	f7fe ff7f 	bl	100531d0 <LL_RADIO_SetPAPower>
}
100542d2:	46c0      	nop			@ (mov r8, r8)
100542d4:	46bd      	mov	sp, r7
100542d6:	b002      	add	sp, #8
100542d8:	bd80      	pop	{r7, pc}

100542da <BLEPLAT_CNTR_SmSetUnmappedChan>:

void BLEPLAT_CNTR_SmSetUnmappedChan(uint8_t smNo, uint8_t chan)
{
100542da:	b580      	push	{r7, lr}
100542dc:	b082      	sub	sp, #8
100542de:	af00      	add	r7, sp, #0
100542e0:	0002      	movs	r2, r0
100542e2:	1dfb      	adds	r3, r7, #7
100542e4:	701a      	strb	r2, [r3, #0]
100542e6:	1dbb      	adds	r3, r7, #6
100542e8:	1c0a      	adds	r2, r1, #0
100542ea:	701a      	strb	r2, [r3, #0]
    LL_RADIO_SetUnmappedChannel(smNo, (uint32_t) chan);
100542ec:	1dbb      	adds	r3, r7, #6
100542ee:	781a      	ldrb	r2, [r3, #0]
100542f0:	1dfb      	adds	r3, r7, #7
100542f2:	781b      	ldrb	r3, [r3, #0]
100542f4:	0011      	movs	r1, r2
100542f6:	0018      	movs	r0, r3
100542f8:	f7fe fba8 	bl	10052a4c <LL_RADIO_SetUnmappedChannel>
}
100542fc:	46c0      	nop			@ (mov r8, r8)
100542fe:	46bd      	mov	sp, r7
10054300:	b002      	add	sp, #8
10054302:	bd80      	pop	{r7, pc}

10054304 <BLEPLAT_CNTR_SmToggleNesn>:

void BLEPLAT_CNTR_SmToggleNesn(uint8_t smNo)
{
10054304:	b580      	push	{r7, lr}
10054306:	b082      	sub	sp, #8
10054308:	af00      	add	r7, sp, #0
1005430a:	0002      	movs	r2, r0
1005430c:	1dfb      	adds	r3, r7, #7
1005430e:	701a      	strb	r2, [r3, #0]
  LL_RADIO_ToggleNextExpectedSequenceNumber(smNo);
10054310:	1dfb      	adds	r3, r7, #7
10054312:	781b      	ldrb	r3, [r3, #0]
10054314:	0018      	movs	r0, r3
10054316:	f7fe fc91 	bl	10052c3c <LL_RADIO_ToggleNextExpectedSequenceNumber>
}
1005431a:	46c0      	nop			@ (mov r8, r8)
1005431c:	46bd      	mov	sp, r7
1005431e:	b002      	add	sp, #8
10054320:	bd80      	pop	{r7, pc}

10054322 <BLEPLAT_CNTR_DemodDelaySt>:
{
    return (uint32_t)(x - y);
}

uint8_t BLEPLAT_CNTR_DemodDelaySt(uint8_t RxPHY)
{
10054322:	b580      	push	{r7, lr}
10054324:	b082      	sub	sp, #8
10054326:	af00      	add	r7, sp, #0
10054328:	0002      	movs	r2, r0
1005432a:	1dfb      	adds	r3, r7, #7
1005432c:	701a      	strb	r2, [r3, #0]
    return (uint8_t)((LL_PHY_CODED == RxPHY) ? 0x9DU : 0x12U);
1005432e:	1dfb      	adds	r3, r7, #7
10054330:	781b      	ldrb	r3, [r3, #0]
10054332:	2b04      	cmp	r3, #4
10054334:	d101      	bne.n	1005433a <BLEPLAT_CNTR_DemodDelaySt+0x18>
10054336:	239d      	movs	r3, #157	@ 0x9d
10054338:	e000      	b.n	1005433c <BLEPLAT_CNTR_DemodDelaySt+0x1a>
1005433a:	2312      	movs	r3, #18
}
1005433c:	0018      	movs	r0, r3
1005433e:	46bd      	mov	sp, r7
10054340:	b002      	add	sp, #8
10054342:	bd80      	pop	{r7, pc}

10054344 <APP_DEBUG_SIGNAL_SET>:
/****************************/
/** Application debug APIs **/
/****************************/

void APP_DEBUG_SIGNAL_SET(app_debug_signal_t signal)
{
10054344:	b580      	push	{r7, lr}
10054346:	b082      	sub	sp, #8
10054348:	af00      	add	r7, sp, #0
1005434a:	0002      	movs	r2, r0
1005434c:	1dfb      	adds	r3, r7, #7
1005434e:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_SET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054350:	46c0      	nop			@ (mov r8, r8)
10054352:	46bd      	mov	sp, r7
10054354:	b002      	add	sp, #8
10054356:	bd80      	pop	{r7, pc}

10054358 <APP_DEBUG_SIGNAL_RESET>:
void APP_DEBUG_SIGNAL_RESET(app_debug_signal_t signal)
{
10054358:	b580      	push	{r7, lr}
1005435a:	b082      	sub	sp, #8
1005435c:	af00      	add	r7, sp, #0
1005435e:	0002      	movs	r2, r0
10054360:	1dfb      	adds	r3, r7, #7
10054362:	701a      	strb	r2, [r3, #0]
#if(RT_DEBUG_GPIO_MODULE == 1)
  GENERIC_DEBUG_GPIO_RESET(signal, app_debug_table);
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054364:	46c0      	nop			@ (mov r8, r8)
10054366:	46bd      	mov	sp, r7
10054368:	b002      	add	sp, #8
1005436a:	bd80      	pop	{r7, pc}

1005436c <RT_DEBUG_GPIO_Init>:
/*******************************/
/** Debug GPIO Initialization **/
/*******************************/

void RT_DEBUG_GPIO_Init(void)
{
1005436c:	b580      	push	{r7, lr}
1005436e:	af00      	add	r7, sp, #0
      GPIO_InitStruct.Pin = general_debug_table[cpt].GPIO_pin;
      HAL_GPIO_Init(general_debug_table[cpt].GPIO_port, &GPIO_InitStruct);
    }
  }
#endif /* RT_DEBUG_GPIO_MODULE */
}
10054370:	46c0      	nop			@ (mov r8, r8)
10054372:	46bd      	mov	sp, r7
10054374:	bd80      	pop	{r7, pc}
	...

10054378 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
10054378:	b580      	push	{r7, lr}
1005437a:	b090      	sub	sp, #64	@ 0x40
1005437c:	af00      	add	r7, sp, #0
1005437e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
10054380:	4b75      	ldr	r3, [pc, #468]	@ (10054558 <UTIL_SEQ_Run+0x1e0>)
10054382:	681b      	ldr	r3, [r3, #0]
10054384:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
10054386:	4b74      	ldr	r3, [pc, #464]	@ (10054558 <UTIL_SEQ_Run+0x1e0>)
10054388:	681b      	ldr	r3, [r3, #0]
1005438a:	687a      	ldr	r2, [r7, #4]
1005438c:	401a      	ands	r2, r3
1005438e:	4b72      	ldr	r3, [pc, #456]	@ (10054558 <UTIL_SEQ_Run+0x1e0>)
10054390:	601a      	str	r2, [r3, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
10054392:	4b72      	ldr	r3, [pc, #456]	@ (1005455c <UTIL_SEQ_Run+0x1e4>)
10054394:	681b      	ldr	r3, [r3, #0]
10054396:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
10054398:	4b71      	ldr	r3, [pc, #452]	@ (10054560 <UTIL_SEQ_Run+0x1e8>)
1005439a:	681b      	ldr	r3, [r3, #0]
1005439c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
1005439e:	4b71      	ldr	r3, [pc, #452]	@ (10054564 <UTIL_SEQ_Run+0x1ec>)
100543a0:	681b      	ldr	r3, [r3, #0]
100543a2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
100543a4:	4b70      	ldr	r3, [pc, #448]	@ (10054568 <UTIL_SEQ_Run+0x1f0>)
100543a6:	681b      	ldr	r3, [r3, #0]
100543a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100543aa:	e090      	b.n	100544ce <UTIL_SEQ_Run+0x156>
  {
    counter = 0U;
100543ac:	2300      	movs	r3, #0
100543ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100543b0:	e002      	b.n	100543b8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
100543b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100543b4:	3301      	adds	r3, #1
100543b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
100543b8:	4b6c      	ldr	r3, [pc, #432]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
100543ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100543bc:	00d2      	lsls	r2, r2, #3
100543be:	58d3      	ldr	r3, [r2, r3]
100543c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100543c2:	401a      	ands	r2, r3
100543c4:	4b64      	ldr	r3, [pc, #400]	@ (10054558 <UTIL_SEQ_Run+0x1e0>)
100543c6:	681b      	ldr	r3, [r3, #0]
100543c8:	4013      	ands	r3, r2
100543ca:	d0f2      	beq.n	100543b2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
100543cc:	4b67      	ldr	r3, [pc, #412]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
100543ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
100543d0:	00d2      	lsls	r2, r2, #3
100543d2:	58d3      	ldr	r3, [r2, r3]
100543d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100543d6:	401a      	ands	r2, r3
100543d8:	4b5f      	ldr	r3, [pc, #380]	@ (10054558 <UTIL_SEQ_Run+0x1e0>)
100543da:	681b      	ldr	r3, [r3, #0]
100543dc:	4013      	ands	r3, r2
100543de:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
100543e0:	4a62      	ldr	r2, [pc, #392]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
100543e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100543e4:	00db      	lsls	r3, r3, #3
100543e6:	18d3      	adds	r3, r2, r3
100543e8:	3304      	adds	r3, #4
100543ea:	681b      	ldr	r3, [r3, #0]
100543ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
100543ee:	4013      	ands	r3, r2
100543f0:	d107      	bne.n	10054402 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
100543f2:	4a5e      	ldr	r2, [pc, #376]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
100543f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
100543f6:	00db      	lsls	r3, r3, #3
100543f8:	18d3      	adds	r3, r2, r3
100543fa:	3304      	adds	r3, #4
100543fc:	2201      	movs	r2, #1
100543fe:	4252      	negs	r2, r2
10054400:	601a      	str	r2, [r3, #0]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
10054402:	4a5a      	ldr	r2, [pc, #360]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
10054404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054406:	00db      	lsls	r3, r3, #3
10054408:	18d3      	adds	r3, r2, r3
1005440a:	3304      	adds	r3, #4
1005440c:	681b      	ldr	r3, [r3, #0]
1005440e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
10054410:	4013      	ands	r3, r2
10054412:	0018      	movs	r0, r3
10054414:	f000 f97c 	bl	10054710 <SEQ_BitPosition>
10054418:	0003      	movs	r3, r0
1005441a:	001a      	movs	r2, r3
1005441c:	4b54      	ldr	r3, [pc, #336]	@ (10054570 <UTIL_SEQ_Run+0x1f8>)
1005441e:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
10054420:	4a52      	ldr	r2, [pc, #328]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
10054422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054424:	00db      	lsls	r3, r3, #3
10054426:	18d3      	adds	r3, r2, r3
10054428:	3304      	adds	r3, #4
1005442a:	681a      	ldr	r2, [r3, #0]
1005442c:	4b50      	ldr	r3, [pc, #320]	@ (10054570 <UTIL_SEQ_Run+0x1f8>)
1005442e:	681b      	ldr	r3, [r3, #0]
10054430:	2101      	movs	r1, #1
10054432:	4099      	lsls	r1, r3
10054434:	000b      	movs	r3, r1
10054436:	43db      	mvns	r3, r3
10054438:	401a      	ands	r2, r3
1005443a:	494c      	ldr	r1, [pc, #304]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
1005443c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005443e:	00db      	lsls	r3, r3, #3
10054440:	18cb      	adds	r3, r1, r3
10054442:	3304      	adds	r3, #4
10054444:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10054446:	f3ef 8310 	mrs	r3, PRIMASK
1005444a:	61bb      	str	r3, [r7, #24]
  return(result);
1005444c:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
1005444e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
10054450:	b672      	cpsid	i
}
10054452:	46c0      	nop			@ (mov r8, r8)
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
10054454:	4b46      	ldr	r3, [pc, #280]	@ (10054570 <UTIL_SEQ_Run+0x1f8>)
10054456:	681b      	ldr	r3, [r3, #0]
10054458:	2201      	movs	r2, #1
1005445a:	409a      	lsls	r2, r3
1005445c:	0013      	movs	r3, r2
1005445e:	43da      	mvns	r2, r3
10054460:	4b3e      	ldr	r3, [pc, #248]	@ (1005455c <UTIL_SEQ_Run+0x1e4>)
10054462:	681b      	ldr	r3, [r3, #0]
10054464:	401a      	ands	r2, r3
10054466:	4b3d      	ldr	r3, [pc, #244]	@ (1005455c <UTIL_SEQ_Run+0x1e4>)
10054468:	601a      	str	r2, [r3, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
1005446a:	2302      	movs	r3, #2
1005446c:	63fb      	str	r3, [r7, #60]	@ 0x3c
1005446e:	e013      	b.n	10054498 <UTIL_SEQ_Run+0x120>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
10054470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054472:	1e5a      	subs	r2, r3, #1
10054474:	4b3d      	ldr	r3, [pc, #244]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
10054476:	00d2      	lsls	r2, r2, #3
10054478:	58d1      	ldr	r1, [r2, r3]
1005447a:	4b3d      	ldr	r3, [pc, #244]	@ (10054570 <UTIL_SEQ_Run+0x1f8>)
1005447c:	681b      	ldr	r3, [r3, #0]
1005447e:	2201      	movs	r2, #1
10054480:	409a      	lsls	r2, r3
10054482:	0013      	movs	r3, r2
10054484:	43db      	mvns	r3, r3
10054486:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
10054488:	3a01      	subs	r2, #1
1005448a:	4019      	ands	r1, r3
1005448c:	4b37      	ldr	r3, [pc, #220]	@ (1005456c <UTIL_SEQ_Run+0x1f4>)
1005448e:	00d2      	lsls	r2, r2, #3
10054490:	50d1      	str	r1, [r2, r3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
10054492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
10054494:	3b01      	subs	r3, #1
10054496:	63fb      	str	r3, [r7, #60]	@ 0x3c
10054498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
1005449a:	2b00      	cmp	r3, #0
1005449c:	d1e8      	bne.n	10054470 <UTIL_SEQ_Run+0xf8>
1005449e:	6a3b      	ldr	r3, [r7, #32]
100544a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100544a2:	697b      	ldr	r3, [r7, #20]
100544a4:	f383 8810 	msr	PRIMASK, r3
}
100544a8:	46c0      	nop			@ (mov r8, r8)
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
100544aa:	4b31      	ldr	r3, [pc, #196]	@ (10054570 <UTIL_SEQ_Run+0x1f8>)
100544ac:	681a      	ldr	r2, [r3, #0]
100544ae:	4b31      	ldr	r3, [pc, #196]	@ (10054574 <UTIL_SEQ_Run+0x1fc>)
100544b0:	0092      	lsls	r2, r2, #2
100544b2:	58d3      	ldr	r3, [r2, r3]
100544b4:	4798      	blx	r3

    local_taskset = TaskSet;
100544b6:	4b29      	ldr	r3, [pc, #164]	@ (1005455c <UTIL_SEQ_Run+0x1e4>)
100544b8:	681b      	ldr	r3, [r3, #0]
100544ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
100544bc:	4b28      	ldr	r3, [pc, #160]	@ (10054560 <UTIL_SEQ_Run+0x1e8>)
100544be:	681b      	ldr	r3, [r3, #0]
100544c0:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
100544c2:	4b28      	ldr	r3, [pc, #160]	@ (10054564 <UTIL_SEQ_Run+0x1ec>)
100544c4:	681b      	ldr	r3, [r3, #0]
100544c6:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
100544c8:	4b27      	ldr	r3, [pc, #156]	@ (10054568 <UTIL_SEQ_Run+0x1f0>)
100544ca:	681b      	ldr	r3, [r3, #0]
100544cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
100544ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
100544d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
100544d2:	401a      	ands	r2, r3
100544d4:	4b20      	ldr	r3, [pc, #128]	@ (10054558 <UTIL_SEQ_Run+0x1e0>)
100544d6:	681b      	ldr	r3, [r3, #0]
100544d8:	4013      	ands	r3, r2
100544da:	d004      	beq.n	100544e6 <UTIL_SEQ_Run+0x16e>
100544dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
100544de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
100544e0:	4013      	ands	r3, r2
100544e2:	d100      	bne.n	100544e6 <UTIL_SEQ_Run+0x16e>
100544e4:	e762      	b.n	100543ac <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
100544e6:	4b22      	ldr	r3, [pc, #136]	@ (10054570 <UTIL_SEQ_Run+0x1f8>)
100544e8:	2201      	movs	r2, #1
100544ea:	4252      	negs	r2, r2
100544ec:	601a      	str	r2, [r3, #0]
  /* if a waited event is present, ignore the IDLE sequence */
  if ((local_evtset & EvtWaited)== 0U)
100544ee:	4b1e      	ldr	r3, [pc, #120]	@ (10054568 <UTIL_SEQ_Run+0x1f0>)
100544f0:	681b      	ldr	r3, [r3, #0]
100544f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
100544f4:	4013      	ands	r3, r2
100544f6:	d127      	bne.n	10054548 <UTIL_SEQ_Run+0x1d0>
  {
    UTIL_SEQ_PreIdle( );
100544f8:	f7f1 fcbd 	bl	10045e76 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100544fc:	f3ef 8310 	mrs	r3, PRIMASK
10054500:	613b      	str	r3, [r7, #16]
  return(result);
10054502:	693b      	ldr	r3, [r7, #16]

    UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
10054504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
10054506:	b672      	cpsid	i
}
10054508:	46c0      	nop			@ (mov r8, r8)
    local_taskset = TaskSet;
1005450a:	4b14      	ldr	r3, [pc, #80]	@ (1005455c <UTIL_SEQ_Run+0x1e4>)
1005450c:	681b      	ldr	r3, [r3, #0]
1005450e:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
10054510:	4b13      	ldr	r3, [pc, #76]	@ (10054560 <UTIL_SEQ_Run+0x1e8>)
10054512:	681b      	ldr	r3, [r3, #0]
10054514:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
10054516:	4b13      	ldr	r3, [pc, #76]	@ (10054564 <UTIL_SEQ_Run+0x1ec>)
10054518:	681b      	ldr	r3, [r3, #0]
1005451a:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((local_taskset & local_taskmask & SuperMask) == 0U)
1005451c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
1005451e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
10054520:	401a      	ands	r2, r3
10054522:	4b0d      	ldr	r3, [pc, #52]	@ (10054558 <UTIL_SEQ_Run+0x1e0>)
10054524:	681b      	ldr	r3, [r3, #0]
10054526:	4013      	ands	r3, r2
10054528:	d106      	bne.n	10054538 <UTIL_SEQ_Run+0x1c0>
    {
      if ((local_evtset & EvtWaited)== 0U)
1005452a:	4b0f      	ldr	r3, [pc, #60]	@ (10054568 <UTIL_SEQ_Run+0x1f0>)
1005452c:	681b      	ldr	r3, [r3, #0]
1005452e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
10054530:	4013      	ands	r3, r2
10054532:	d101      	bne.n	10054538 <UTIL_SEQ_Run+0x1c0>
      {
        UTIL_SEQ_Idle( );
10054534:	f7f1 fca4 	bl	10045e80 <UTIL_SEQ_Idle>
10054538:	69fb      	ldr	r3, [r7, #28]
1005453a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005453c:	68fb      	ldr	r3, [r7, #12]
1005453e:	f383 8810 	msr	PRIMASK, r3
}
10054542:	46c0      	nop			@ (mov r8, r8)
      }
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

    UTIL_SEQ_PostIdle( );
10054544:	f000 f8de 	bl	10054704 <UTIL_SEQ_PostIdle>
  }

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
10054548:	4b03      	ldr	r3, [pc, #12]	@ (10054558 <UTIL_SEQ_Run+0x1e0>)
1005454a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
1005454c:	601a      	str	r2, [r3, #0]

  return;
1005454e:	46c0      	nop			@ (mov r8, r8)
}
10054550:	46bd      	mov	sp, r7
10054552:	b010      	add	sp, #64	@ 0x40
10054554:	bd80      	pop	{r7, pc}
10054556:	46c0      	nop			@ (mov r8, r8)
10054558:	20002e54 	.word	0x20002e54
1005455c:	200029d8 	.word	0x200029d8
10054560:	200029dc 	.word	0x200029dc
10054564:	20002e50 	.word	0x20002e50
10054568:	200029e0 	.word	0x200029e0
1005456c:	20002a68 	.word	0x20002a68
10054570:	200029e4 	.word	0x200029e4
10054574:	200029e8 	.word	0x200029e8

10054578 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
10054578:	b580      	push	{r7, lr}
1005457a:	b088      	sub	sp, #32
1005457c:	af00      	add	r7, sp, #0
1005457e:	60f8      	str	r0, [r7, #12]
10054580:	60b9      	str	r1, [r7, #8]
10054582:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10054584:	f3ef 8310 	mrs	r3, PRIMASK
10054588:	617b      	str	r3, [r7, #20]
  return(result);
1005458a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
1005458c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
1005458e:	b672      	cpsid	i
}
10054590:	46c0      	nop			@ (mov r8, r8)

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
10054592:	68fb      	ldr	r3, [r7, #12]
10054594:	0018      	movs	r0, r3
10054596:	f000 f8bb 	bl	10054710 <SEQ_BitPosition>
1005459a:	0003      	movs	r3, r0
1005459c:	001a      	movs	r2, r3
1005459e:	4b07      	ldr	r3, [pc, #28]	@ (100545bc <UTIL_SEQ_RegTask+0x44>)
100545a0:	0092      	lsls	r2, r2, #2
100545a2:	6879      	ldr	r1, [r7, #4]
100545a4:	50d1      	str	r1, [r2, r3]
100545a6:	69fb      	ldr	r3, [r7, #28]
100545a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100545aa:	69bb      	ldr	r3, [r7, #24]
100545ac:	f383 8810 	msr	PRIMASK, r3
}
100545b0:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
100545b2:	46c0      	nop			@ (mov r8, r8)
}
100545b4:	46bd      	mov	sp, r7
100545b6:	b008      	add	sp, #32
100545b8:	bd80      	pop	{r7, pc}
100545ba:	46c0      	nop			@ (mov r8, r8)
100545bc:	200029e8 	.word	0x200029e8

100545c0 <UTIL_SEQ_SetTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
100545c0:	b580      	push	{r7, lr}
100545c2:	b086      	sub	sp, #24
100545c4:	af00      	add	r7, sp, #0
100545c6:	6078      	str	r0, [r7, #4]
100545c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100545ca:	f3ef 8310 	mrs	r3, PRIMASK
100545ce:	60fb      	str	r3, [r7, #12]
  return(result);
100545d0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100545d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
100545d4:	b672      	cpsid	i
}
100545d6:	46c0      	nop			@ (mov r8, r8)

  TaskSet |= TaskId_bm;
100545d8:	4b0d      	ldr	r3, [pc, #52]	@ (10054610 <UTIL_SEQ_SetTask+0x50>)
100545da:	681a      	ldr	r2, [r3, #0]
100545dc:	687b      	ldr	r3, [r7, #4]
100545de:	431a      	orrs	r2, r3
100545e0:	4b0b      	ldr	r3, [pc, #44]	@ (10054610 <UTIL_SEQ_SetTask+0x50>)
100545e2:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
100545e4:	4b0b      	ldr	r3, [pc, #44]	@ (10054614 <UTIL_SEQ_SetTask+0x54>)
100545e6:	683a      	ldr	r2, [r7, #0]
100545e8:	00d2      	lsls	r2, r2, #3
100545ea:	58d2      	ldr	r2, [r2, r3]
100545ec:	687b      	ldr	r3, [r7, #4]
100545ee:	431a      	orrs	r2, r3
100545f0:	0011      	movs	r1, r2
100545f2:	4b08      	ldr	r3, [pc, #32]	@ (10054614 <UTIL_SEQ_SetTask+0x54>)
100545f4:	683a      	ldr	r2, [r7, #0]
100545f6:	00d2      	lsls	r2, r2, #3
100545f8:	50d1      	str	r1, [r2, r3]
100545fa:	697b      	ldr	r3, [r7, #20]
100545fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100545fe:	693b      	ldr	r3, [r7, #16]
10054600:	f383 8810 	msr	PRIMASK, r3
}
10054604:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
10054606:	46c0      	nop			@ (mov r8, r8)
}
10054608:	46bd      	mov	sp, r7
1005460a:	b006      	add	sp, #24
1005460c:	bd80      	pop	{r7, pc}
1005460e:	46c0      	nop			@ (mov r8, r8)
10054610:	200029d8 	.word	0x200029d8
10054614:	20002a68 	.word	0x20002a68

10054618 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
10054618:	b580      	push	{r7, lr}
1005461a:	b086      	sub	sp, #24
1005461c:	af00      	add	r7, sp, #0
1005461e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
10054620:	f3ef 8310 	mrs	r3, PRIMASK
10054624:	60fb      	str	r3, [r7, #12]
  return(result);
10054626:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
10054628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
1005462a:	b672      	cpsid	i
}
1005462c:	46c0      	nop			@ (mov r8, r8)

  EvtSet |= EvtId_bm;
1005462e:	4b08      	ldr	r3, [pc, #32]	@ (10054650 <UTIL_SEQ_SetEvt+0x38>)
10054630:	681a      	ldr	r2, [r3, #0]
10054632:	687b      	ldr	r3, [r7, #4]
10054634:	431a      	orrs	r2, r3
10054636:	4b06      	ldr	r3, [pc, #24]	@ (10054650 <UTIL_SEQ_SetEvt+0x38>)
10054638:	601a      	str	r2, [r3, #0]
1005463a:	697b      	ldr	r3, [r7, #20]
1005463c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
1005463e:	693b      	ldr	r3, [r7, #16]
10054640:	f383 8810 	msr	PRIMASK, r3
}
10054644:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
10054646:	46c0      	nop			@ (mov r8, r8)
}
10054648:	46bd      	mov	sp, r7
1005464a:	b006      	add	sp, #24
1005464c:	bd80      	pop	{r7, pc}
1005464e:	46c0      	nop			@ (mov r8, r8)
10054650:	200029dc 	.word	0x200029dc

10054654 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
10054654:	b580      	push	{r7, lr}
10054656:	b088      	sub	sp, #32
10054658:	af00      	add	r7, sp, #0
1005465a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
1005465c:	4b1f      	ldr	r3, [pc, #124]	@ (100546dc <UTIL_SEQ_WaitEvt+0x88>)
1005465e:	681b      	ldr	r3, [r3, #0]
10054660:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
10054662:	4b1e      	ldr	r3, [pc, #120]	@ (100546dc <UTIL_SEQ_WaitEvt+0x88>)
10054664:	681b      	ldr	r3, [r3, #0]
10054666:	3301      	adds	r3, #1
10054668:	d102      	bne.n	10054670 <UTIL_SEQ_WaitEvt+0x1c>
  {
    wait_task_idx = 0u;
1005466a:	2300      	movs	r3, #0
1005466c:	61fb      	str	r3, [r7, #28]
1005466e:	e005      	b.n	1005467c <UTIL_SEQ_WaitEvt+0x28>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
10054670:	4b1a      	ldr	r3, [pc, #104]	@ (100546dc <UTIL_SEQ_WaitEvt+0x88>)
10054672:	681b      	ldr	r3, [r3, #0]
10054674:	2201      	movs	r2, #1
10054676:	409a      	lsls	r2, r3
10054678:	0013      	movs	r3, r2
1005467a:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
1005467c:	4b18      	ldr	r3, [pc, #96]	@ (100546e0 <UTIL_SEQ_WaitEvt+0x8c>)
1005467e:	681b      	ldr	r3, [r3, #0]
10054680:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
10054682:	4b17      	ldr	r3, [pc, #92]	@ (100546e0 <UTIL_SEQ_WaitEvt+0x8c>)
10054684:	687a      	ldr	r2, [r7, #4]
10054686:	601a      	str	r2, [r3, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
10054688:	e005      	b.n	10054696 <UTIL_SEQ_WaitEvt+0x42>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
1005468a:	687a      	ldr	r2, [r7, #4]
1005468c:	69fb      	ldr	r3, [r7, #28]
1005468e:	0011      	movs	r1, r2
10054690:	0018      	movs	r0, r3
10054692:	f000 f829 	bl	100546e8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
10054696:	4b13      	ldr	r3, [pc, #76]	@ (100546e4 <UTIL_SEQ_WaitEvt+0x90>)
10054698:	681b      	ldr	r3, [r3, #0]
1005469a:	687a      	ldr	r2, [r7, #4]
1005469c:	4013      	ands	r3, r2
1005469e:	d0f4      	beq.n	1005468a <UTIL_SEQ_WaitEvt+0x36>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
100546a0:	4b0e      	ldr	r3, [pc, #56]	@ (100546dc <UTIL_SEQ_WaitEvt+0x88>)
100546a2:	69ba      	ldr	r2, [r7, #24]
100546a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
100546a6:	f3ef 8310 	mrs	r3, PRIMASK
100546aa:	60bb      	str	r3, [r7, #8]
  return(result);
100546ac:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
100546ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
100546b0:	b672      	cpsid	i
}
100546b2:	46c0      	nop			@ (mov r8, r8)

  EvtSet &= (~EvtId_bm);
100546b4:	687b      	ldr	r3, [r7, #4]
100546b6:	43da      	mvns	r2, r3
100546b8:	4b0a      	ldr	r3, [pc, #40]	@ (100546e4 <UTIL_SEQ_WaitEvt+0x90>)
100546ba:	681b      	ldr	r3, [r3, #0]
100546bc:	401a      	ands	r2, r3
100546be:	4b09      	ldr	r3, [pc, #36]	@ (100546e4 <UTIL_SEQ_WaitEvt+0x90>)
100546c0:	601a      	str	r2, [r3, #0]
100546c2:	693b      	ldr	r3, [r7, #16]
100546c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
100546c6:	68fb      	ldr	r3, [r7, #12]
100546c8:	f383 8810 	msr	PRIMASK, r3
}
100546cc:	46c0      	nop			@ (mov r8, r8)

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
100546ce:	4b04      	ldr	r3, [pc, #16]	@ (100546e0 <UTIL_SEQ_WaitEvt+0x8c>)
100546d0:	697a      	ldr	r2, [r7, #20]
100546d2:	601a      	str	r2, [r3, #0]
  return;
100546d4:	46c0      	nop			@ (mov r8, r8)
}
100546d6:	46bd      	mov	sp, r7
100546d8:	b008      	add	sp, #32
100546da:	bd80      	pop	{r7, pc}
100546dc:	200029e4 	.word	0x200029e4
100546e0:	200029e0 	.word	0x200029e0
100546e4:	200029dc 	.word	0x200029dc

100546e8 <UTIL_SEQ_EvtIdle>:
  UTIL_SEQ_bm_t local_evtwaited = EvtWaited;
  return (EvtSet & local_evtwaited);
}

__WEAK void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t TaskId_bm, UTIL_SEQ_bm_t EvtWaited_bm )
{
100546e8:	b580      	push	{r7, lr}
100546ea:	b082      	sub	sp, #8
100546ec:	af00      	add	r7, sp, #0
100546ee:	6078      	str	r0, [r7, #4]
100546f0:	6039      	str	r1, [r7, #0]
  (void)EvtWaited_bm;
  UTIL_SEQ_Run(~TaskId_bm);
100546f2:	687b      	ldr	r3, [r7, #4]
100546f4:	43db      	mvns	r3, r3
100546f6:	0018      	movs	r0, r3
100546f8:	f7ff fe3e 	bl	10054378 <UTIL_SEQ_Run>
  return;
100546fc:	46c0      	nop			@ (mov r8, r8)
}
100546fe:	46bd      	mov	sp, r7
10054700:	b002      	add	sp, #8
10054702:	bd80      	pop	{r7, pc}

10054704 <UTIL_SEQ_PostIdle>:
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
{
10054704:	b580      	push	{r7, lr}
10054706:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
10054708:	46c0      	nop			@ (mov r8, r8)
}
1005470a:	46bd      	mov	sp, r7
1005470c:	bd80      	pop	{r7, pc}
	...

10054710 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
10054710:	b580      	push	{r7, lr}
10054712:	b084      	sub	sp, #16
10054714:	af00      	add	r7, sp, #0
10054716:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
10054718:	210f      	movs	r1, #15
1005471a:	187b      	adds	r3, r7, r1
1005471c:	2200      	movs	r2, #0
1005471e:	701a      	strb	r2, [r3, #0]
uint32_t lvalue = Value;
10054720:	687b      	ldr	r3, [r7, #4]
10054722:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
10054724:	68ba      	ldr	r2, [r7, #8]
10054726:	2380      	movs	r3, #128	@ 0x80
10054728:	025b      	lsls	r3, r3, #9
1005472a:	429a      	cmp	r2, r3
1005472c:	d205      	bcs.n	1005473a <SEQ_BitPosition+0x2a>
1005472e:	187b      	adds	r3, r7, r1
10054730:	2210      	movs	r2, #16
10054732:	701a      	strb	r2, [r3, #0]
10054734:	68bb      	ldr	r3, [r7, #8]
10054736:	041b      	lsls	r3, r3, #16
10054738:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
1005473a:	68ba      	ldr	r2, [r7, #8]
1005473c:	2380      	movs	r3, #128	@ 0x80
1005473e:	045b      	lsls	r3, r3, #17
10054740:	429a      	cmp	r2, r3
10054742:	d208      	bcs.n	10054756 <SEQ_BitPosition+0x46>
10054744:	220f      	movs	r2, #15
10054746:	18bb      	adds	r3, r7, r2
10054748:	18ba      	adds	r2, r7, r2
1005474a:	7812      	ldrb	r2, [r2, #0]
1005474c:	3208      	adds	r2, #8
1005474e:	701a      	strb	r2, [r3, #0]
10054750:	68bb      	ldr	r3, [r7, #8]
10054752:	021b      	lsls	r3, r3, #8
10054754:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
10054756:	68ba      	ldr	r2, [r7, #8]
10054758:	2380      	movs	r3, #128	@ 0x80
1005475a:	055b      	lsls	r3, r3, #21
1005475c:	429a      	cmp	r2, r3
1005475e:	d208      	bcs.n	10054772 <SEQ_BitPosition+0x62>
10054760:	220f      	movs	r2, #15
10054762:	18bb      	adds	r3, r7, r2
10054764:	18ba      	adds	r2, r7, r2
10054766:	7812      	ldrb	r2, [r2, #0]
10054768:	3204      	adds	r2, #4
1005476a:	701a      	strb	r2, [r3, #0]
1005476c:	68bb      	ldr	r3, [r7, #8]
1005476e:	011b      	lsls	r3, r3, #4
10054770:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
10054772:	68bb      	ldr	r3, [r7, #8]
10054774:	0f1b      	lsrs	r3, r3, #28
10054776:	4a08      	ldr	r2, [pc, #32]	@ (10054798 <SEQ_BitPosition+0x88>)
10054778:	5cd1      	ldrb	r1, [r2, r3]
1005477a:	200f      	movs	r0, #15
1005477c:	183b      	adds	r3, r7, r0
1005477e:	183a      	adds	r2, r7, r0
10054780:	7812      	ldrb	r2, [r2, #0]
10054782:	188a      	adds	r2, r1, r2
10054784:	701a      	strb	r2, [r3, #0]

  return (uint8_t)(31U-n);
10054786:	183b      	adds	r3, r7, r0
10054788:	781b      	ldrb	r3, [r3, #0]
1005478a:	221f      	movs	r2, #31
1005478c:	1ad3      	subs	r3, r2, r3
1005478e:	b2db      	uxtb	r3, r3
}
10054790:	0018      	movs	r0, r3
10054792:	46bd      	mov	sp, r7
10054794:	b004      	add	sp, #16
10054796:	bd80      	pop	{r7, pc}
10054798:	100696dc 	.word	0x100696dc

1005479c <aci_gap_init>:
1005479c:	b580      	push	{r7, lr}
1005479e:	2802      	cmp	r0, #2
100547a0:	d901      	bls.n	100547a6 <aci_gap_init+0xa>
100547a2:	2012      	movs	r0, #18
100547a4:	bd80      	pop	{r7, pc}
100547a6:	f001 fc17 	bl	10055fd8 <GAP_Init>
100547aa:	bd80      	pop	{r7, pc}

100547ac <aci_gap_terminate_api>:
100547ac:	b580      	push	{r7, lr}
100547ae:	f001 fde9 	bl	10056384 <GAP_Terminate_Link>
100547b2:	bd80      	pop	{r7, pc}

100547b4 <_aci_gap_lists_check>:
100547b4:	b5b0      	push	{r4, r5, r7, lr}
100547b6:	4604      	mov	r4, r0
100547b8:	7800      	ldrb	r0, [r0, #0]
100547ba:	2800      	cmp	r0, #0
100547bc:	d001      	beq.n	100547c2 <_aci_gap_lists_check+0xe>
100547be:	2804      	cmp	r0, #4
100547c0:	d301      	bcc.n	100547c6 <_aci_gap_lists_check+0x12>
100547c2:	2012      	movs	r0, #18
100547c4:	e000      	b.n	100547c8 <_aci_gap_lists_check+0x14>
100547c6:	2000      	movs	r0, #0
100547c8:	2512      	movs	r5, #18
100547ca:	2a00      	cmp	r2, #0
100547cc:	462a      	mov	r2, r5
100547ce:	d000      	beq.n	100547d2 <_aci_gap_lists_check+0x1e>
100547d0:	4602      	mov	r2, r0
100547d2:	2901      	cmp	r1, #1
100547d4:	d800      	bhi.n	100547d8 <_aci_gap_lists_check+0x24>
100547d6:	4615      	mov	r5, r2
100547d8:	2d00      	cmp	r5, #0
100547da:	d107      	bne.n	100547ec <_aci_gap_lists_check+0x38>
100547dc:	f007 f9b1 	bl	1005bb42 <llc_priv_controller_privacy_csr_ucfg_weak>
100547e0:	2800      	cmp	r0, #0
100547e2:	d103      	bne.n	100547ec <_aci_gap_lists_check+0x38>
100547e4:	7820      	ldrb	r0, [r4, #0]
100547e6:	21fd      	movs	r1, #253	@ 0xfd
100547e8:	4001      	ands	r1, r0
100547ea:	7021      	strb	r1, [r4, #0]
100547ec:	4628      	mov	r0, r5
100547ee:	bdb0      	pop	{r4, r5, r7, pc}

100547f0 <aci_gap_configure_filter_accept_and_resolving_list>:
100547f0:	b5e0      	push	{r5, r6, r7, lr}
100547f2:	a901      	add	r1, sp, #4
100547f4:	7008      	strb	r0, [r1, #0]
100547f6:	2201      	movs	r2, #1
100547f8:	4608      	mov	r0, r1
100547fa:	4611      	mov	r1, r2
100547fc:	f7ff ffda 	bl	100547b4 <_aci_gap_lists_check>
10054800:	2800      	cmp	r0, #0
10054802:	d000      	beq.n	10054806 <aci_gap_configure_filter_accept_and_resolving_list+0x16>
10054804:	bd8c      	pop	{r2, r3, r7, pc}
10054806:	a801      	add	r0, sp, #4
10054808:	7800      	ldrb	r0, [r0, #0]
1005480a:	f001 fdd1 	bl	100563b0 <GAP_configure_filter_accept_and_resolving_list>
1005480e:	bd8c      	pop	{r2, r3, r7, pc}

10054810 <GAP_set_advertising_configuration_ucfg_weak>:
10054810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10054812:	461c      	mov	r4, r3
10054814:	4608      	mov	r0, r1
10054816:	990a      	ldr	r1, [sp, #40]	@ 0x28
10054818:	9103      	str	r1, [sp, #12]
1005481a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005481c:	9102      	str	r1, [sp, #8]
1005481e:	9908      	ldr	r1, [sp, #32]
10054820:	9101      	str	r1, [sp, #4]
10054822:	9907      	ldr	r1, [sp, #28]
10054824:	9100      	str	r1, [sp, #0]
10054826:	9b06      	ldr	r3, [sp, #24]
10054828:	4611      	mov	r1, r2
1005482a:	4622      	mov	r2, r4
1005482c:	f001 fea0 	bl	10056570 <GAP_set_legacy_advertising_configuration>
10054830:	b004      	add	sp, #16
10054832:	bd10      	pop	{r4, pc}

10054834 <GAP_set_advertising_data_ucfg_weak>:
10054834:	b580      	push	{r7, lr}
10054836:	4619      	mov	r1, r3
10054838:	4610      	mov	r0, r2
1005483a:	f002 f80d 	bl	10056858 <GAP_set_legacy_advertising_data>
1005483e:	bd80      	pop	{r7, pc}

10054840 <GAP_set_advertising_enable_ucfg_weak>:
10054840:	b580      	push	{r7, lr}
10054842:	f001 ff05 	bl	10056650 <GAP_set_legacy_advertising_enable>
10054846:	bd80      	pop	{r7, pc}

10054848 <aci_gap_set_advertising_configuration>:
10054848:	b5f0      	push	{r4, r5, r6, r7, lr}
1005484a:	b093      	sub	sp, #76	@ 0x4c
1005484c:	461f      	mov	r7, r3
1005484e:	4615      	mov	r5, r2
10054850:	460e      	mov	r6, r1
10054852:	9012      	str	r0, [sp, #72]	@ 0x48
10054854:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
10054856:	4608      	mov	r0, r1
10054858:	4611      	mov	r1, r2
1005485a:	4622      	mov	r2, r4
1005485c:	f001 fe5a 	bl	10056514 <GAP_check_discoverability_mode>
10054860:	2800      	cmp	r0, #0
10054862:	d124      	bne.n	100548ae <aci_gap_set_advertising_configuration+0x66>
10054864:	9822      	ldr	r0, [sp, #136]	@ 0x88
10054866:	900d      	str	r0, [sp, #52]	@ 0x34
10054868:	ab1f      	add	r3, sp, #124	@ 0x7c
1005486a:	cb0d      	ldmia	r3, {r0, r2, r3}
1005486c:	9011      	str	r0, [sp, #68]	@ 0x44
1005486e:	981e      	ldr	r0, [sp, #120]	@ 0x78
10054870:	900f      	str	r0, [sp, #60]	@ 0x3c
10054872:	981d      	ldr	r0, [sp, #116]	@ 0x74
10054874:	900e      	str	r0, [sp, #56]	@ 0x38
10054876:	981b      	ldr	r0, [sp, #108]	@ 0x6c
10054878:	900c      	str	r0, [sp, #48]	@ 0x30
1005487a:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005487c:	9819      	ldr	r0, [sp, #100]	@ 0x64
1005487e:	9710      	str	r7, [sp, #64]	@ 0x40
10054880:	9f18      	ldr	r7, [sp, #96]	@ 0x60
10054882:	9208      	str	r2, [sp, #32]
10054884:	9309      	str	r3, [sp, #36]	@ 0x24
10054886:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10054888:	920a      	str	r2, [sp, #40]	@ 0x28
1005488a:	9700      	str	r7, [sp, #0]
1005488c:	9001      	str	r0, [sp, #4]
1005488e:	9102      	str	r1, [sp, #8]
10054890:	980c      	ldr	r0, [sp, #48]	@ 0x30
10054892:	9003      	str	r0, [sp, #12]
10054894:	9404      	str	r4, [sp, #16]
10054896:	980e      	ldr	r0, [sp, #56]	@ 0x38
10054898:	9005      	str	r0, [sp, #20]
1005489a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
1005489c:	9006      	str	r0, [sp, #24]
1005489e:	9811      	ldr	r0, [sp, #68]	@ 0x44
100548a0:	9007      	str	r0, [sp, #28]
100548a2:	9812      	ldr	r0, [sp, #72]	@ 0x48
100548a4:	4631      	mov	r1, r6
100548a6:	462a      	mov	r2, r5
100548a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100548aa:	f7ff ffb1 	bl	10054810 <GAP_set_advertising_configuration_ucfg_weak>
100548ae:	b013      	add	sp, #76	@ 0x4c
100548b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

100548b2 <aci_gap_set_advertising_data>:
100548b2:	b580      	push	{r7, lr}
100548b4:	f7ff ffbe 	bl	10054834 <GAP_set_advertising_data_ucfg_weak>
100548b8:	bd80      	pop	{r7, pc}

100548ba <aci_gap_set_advertising_enable>:
100548ba:	b580      	push	{r7, lr}
100548bc:	f7ff ffc0 	bl	10054840 <GAP_set_advertising_enable_ucfg_weak>
100548c0:	bd80      	pop	{r7, pc}

100548c2 <aci_gap_set_io_capability_api>:
100548c2:	b580      	push	{r7, lr}
100548c4:	2804      	cmp	r0, #4
100548c6:	d901      	bls.n	100548cc <aci_gap_set_io_capability_api+0xa>
100548c8:	2012      	movs	r0, #18
100548ca:	bd80      	pop	{r7, pc}
100548cc:	f00d fb26 	bl	10061f1c <smp_sap_aci_set_io_capabilities>
100548d0:	bd80      	pop	{r7, pc}
	...

100548d4 <aci_gap_set_security_requirements_api>:
100548d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100548d6:	b089      	sub	sp, #36	@ 0x24
100548d8:	4605      	mov	r5, r0
100548da:	4608      	mov	r0, r1
100548dc:	4328      	orrs	r0, r5
100548de:	2412      	movs	r4, #18
100548e0:	2801      	cmp	r0, #1
100548e2:	d836      	bhi.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
100548e4:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
100548e6:	2f07      	cmp	r7, #7
100548e8:	d333      	bcc.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
100548ea:	2f10      	cmp	r7, #16
100548ec:	d831      	bhi.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
100548ee:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100548f0:	2810      	cmp	r0, #16
100548f2:	d82e      	bhi.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
100548f4:	42b8      	cmp	r0, r7
100548f6:	d32c      	bcc.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
100548f8:	460e      	mov	r6, r1
100548fa:	9910      	ldr	r1, [sp, #64]	@ 0x40
100548fc:	2902      	cmp	r1, #2
100548fe:	d828      	bhi.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
10054900:	9101      	str	r1, [sp, #4]
10054902:	9002      	str	r0, [sp, #8]
10054904:	9303      	str	r3, [sp, #12]
10054906:	9204      	str	r2, [sp, #16]
10054908:	f00d fd81 	bl	1006240e <secure_connections_csr_ucfg_weak>
1005490c:	2801      	cmp	r0, #1
1005490e:	d106      	bne.n	1005491e <aci_gap_set_security_requirements_api+0x4a>
10054910:	9904      	ldr	r1, [sp, #16]
10054912:	2902      	cmp	r1, #2
10054914:	d81d      	bhi.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
10054916:	9a03      	ldr	r2, [sp, #12]
10054918:	2a01      	cmp	r2, #1
1005491a:	d907      	bls.n	1005492c <aci_gap_set_security_requirements_api+0x58>
1005491c:	e019      	b.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
1005491e:	9a03      	ldr	r2, [sp, #12]
10054920:	4610      	mov	r0, r2
10054922:	9904      	ldr	r1, [sp, #16]
10054924:	4308      	orrs	r0, r1
10054926:	d001      	beq.n	1005492c <aci_gap_set_security_requirements_api+0x58>
10054928:	2411      	movs	r4, #17
1005492a:	e012      	b.n	10054952 <aci_gap_set_security_requirements_api+0x7e>
1005492c:	ac05      	add	r4, sp, #20
1005492e:	9801      	ldr	r0, [sp, #4]
10054930:	7320      	strb	r0, [r4, #12]
10054932:	4809      	ldr	r0, [pc, #36]	@ (10054958 <__arm_cp.1_0>)
10054934:	80e0      	strh	r0, [r4, #6]
10054936:	9802      	ldr	r0, [sp, #8]
10054938:	7160      	strb	r0, [r4, #5]
1005493a:	7127      	strb	r7, [r4, #4]
1005493c:	70e2      	strb	r2, [r4, #3]
1005493e:	70a1      	strb	r1, [r4, #2]
10054940:	7066      	strb	r6, [r4, #1]
10054942:	7025      	strb	r5, [r4, #0]
10054944:	f001 fcfe 	bl	10056344 <GAP_get_identity_address_type>
10054948:	7360      	strb	r0, [r4, #13]
1005494a:	4620      	mov	r0, r4
1005494c:	f00d fb1c 	bl	10061f88 <smp_sap_aci_set_authentication_req>
10054950:	4604      	mov	r4, r0
10054952:	4620      	mov	r0, r4
10054954:	b009      	add	sp, #36	@ 0x24
10054956:	bdf0      	pop	{r4, r5, r6, r7, pc}

10054958 <__arm_cp.1_0>:
10054958:	00000707 	.word	0x00000707

1005495c <aci_gap_passkey_resp_api>:
1005495c:	b580      	push	{r7, lr}
1005495e:	4a04      	ldr	r2, [pc, #16]	@ (10054970 <__arm_cp.4_0>)
10054960:	4291      	cmp	r1, r2
10054962:	d901      	bls.n	10054968 <aci_gap_passkey_resp_api+0xc>
10054964:	2012      	movs	r0, #18
10054966:	bd80      	pop	{r7, pc}
10054968:	f00d fb38 	bl	10061fdc <smp_sap_aci_passkey_response>
1005496c:	bd80      	pop	{r7, pc}
1005496e:	46c0      	nop			@ (mov r8, r8)

10054970 <__arm_cp.4_0>:
10054970:	000f423f 	.word	0x000f423f

10054974 <aci_gatt_srv_add_service_api>:
10054974:	b580      	push	{r7, lr}
10054976:	f004 fa37 	bl	10058de8 <GAT_srv_add_service>
1005497a:	bd80      	pop	{r7, pc}

1005497c <aci_gatt_srv_get_service_handle_api>:
1005497c:	b580      	push	{r7, lr}
1005497e:	f004 fc71 	bl	10059264 <GAT_srv_get_service_handle>
10054982:	bd80      	pop	{r7, pc}

10054984 <aci_gatt_srv_add_char_api>:
10054984:	b580      	push	{r7, lr}
10054986:	f004 fadf 	bl	10058f48 <GAT_srv_add_characteristic>
1005498a:	bd80      	pop	{r7, pc}

1005498c <aci_gatt_srv_get_char_decl_handle_api>:
1005498c:	b580      	push	{r7, lr}
1005498e:	f004 fc73 	bl	10059278 <GAT_srv_get_char_decl_handle>
10054992:	bd80      	pop	{r7, pc}

10054994 <aci_gatt_srv_resp_api>:
10054994:	b51c      	push	{r2, r3, r4, lr}
10054996:	9c05      	ldr	r4, [sp, #20]
10054998:	9401      	str	r4, [sp, #4]
1005499a:	9c04      	ldr	r4, [sp, #16]
1005499c:	9400      	str	r4, [sp, #0]
1005499e:	f004 fc59 	bl	10059254 <GAT_srv_resp>
100549a2:	2000      	movs	r0, #0
100549a4:	bd1c      	pop	{r2, r3, r4, pc}

100549a6 <configBitmapSet>:
100549a6:	2000      	movs	r0, #0
100549a8:	4770      	bx	lr
	...

100549ac <HAL_Write_ConfigData>:
100549ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100549ae:	b087      	sub	sp, #28
100549b0:	4614      	mov	r4, r2
100549b2:	460d      	mov	r5, r1
100549b4:	4606      	mov	r6, r0
100549b6:	4869      	ldr	r0, [pc, #420]	@ (10054b5c <__arm_cp.4_0>)
100549b8:	6800      	ldr	r0, [r0, #0]
100549ba:	2e00      	cmp	r6, #0
100549bc:	d101      	bne.n	100549c2 <HAL_Write_ConfigData+0x16>
100549be:	2d06      	cmp	r5, #6
100549c0:	d017      	beq.n	100549f2 <HAL_Write_ConfigData+0x46>
100549c2:	2e06      	cmp	r6, #6
100549c4:	d101      	bne.n	100549ca <HAL_Write_ConfigData+0x1e>
100549c6:	2d02      	cmp	r5, #2
100549c8:	d013      	beq.n	100549f2 <HAL_Write_ConfigData+0x46>
100549ca:	2e08      	cmp	r6, #8
100549cc:	d101      	bne.n	100549d2 <HAL_Write_ConfigData+0x26>
100549ce:	2d10      	cmp	r5, #16
100549d0:	d00f      	beq.n	100549f2 <HAL_Write_ConfigData+0x46>
100549d2:	2e18      	cmp	r6, #24
100549d4:	d101      	bne.n	100549da <HAL_Write_ConfigData+0x2e>
100549d6:	2d10      	cmp	r5, #16
100549d8:	d00b      	beq.n	100549f2 <HAL_Write_ConfigData+0x46>
100549da:	2e28      	cmp	r6, #40	@ 0x28
100549dc:	d101      	bne.n	100549e2 <HAL_Write_ConfigData+0x36>
100549de:	2d02      	cmp	r5, #2
100549e0:	d007      	beq.n	100549f2 <HAL_Write_ConfigData+0x46>
100549e2:	2e2a      	cmp	r6, #42	@ 0x2a
100549e4:	d101      	bne.n	100549ea <HAL_Write_ConfigData+0x3e>
100549e6:	2d02      	cmp	r5, #2
100549e8:	d003      	beq.n	100549f2 <HAL_Write_ConfigData+0x46>
100549ea:	2e2c      	cmp	r6, #44	@ 0x2c
100549ec:	d109      	bne.n	10054a02 <HAL_Write_ConfigData+0x56>
100549ee:	2d01      	cmp	r5, #1
100549f0:	d107      	bne.n	10054a02 <HAL_Write_ConfigData+0x56>
100549f2:	1980      	adds	r0, r0, r6
100549f4:	4621      	mov	r1, r4
100549f6:	462a      	mov	r2, r5
100549f8:	f7fd feb0 	bl	1005275c <BLEPLAT_MemCpy>
100549fc:	2000      	movs	r0, #0
100549fe:	b007      	add	sp, #28
10054a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
10054a02:	2e2e      	cmp	r6, #46	@ 0x2e
10054a04:	d107      	bne.n	10054a16 <HAL_Write_ConfigData+0x6a>
10054a06:	2d06      	cmp	r5, #6
10054a08:	d105      	bne.n	10054a16 <HAL_Write_ConfigData+0x6a>
10054a0a:	7961      	ldrb	r1, [r4, #5]
10054a0c:	0989      	lsrs	r1, r1, #6
10054a0e:	2903      	cmp	r1, #3
10054a10:	d2ef      	bcs.n	100549f2 <HAL_Write_ConfigData+0x46>
10054a12:	2012      	movs	r0, #18
10054a14:	e7f3      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054a16:	2ed0      	cmp	r6, #208	@ 0xd0
10054a18:	d105      	bne.n	10054a26 <HAL_Write_ConfigData+0x7a>
10054a1a:	2d01      	cmp	r5, #1
10054a1c:	d103      	bne.n	10054a26 <HAL_Write_ConfigData+0x7a>
10054a1e:	7820      	ldrb	r0, [r4, #0]
10054a20:	f7fa f9df 	bl	1004ede2 <smp_sap_scp_force_debug_key_usage_ucfg>
10054a24:	e7eb      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054a26:	2ed2      	cmp	r6, #210	@ 0xd2
10054a28:	d105      	bne.n	10054a36 <HAL_Write_ConfigData+0x8a>
10054a2a:	2d01      	cmp	r5, #1
10054a2c:	d103      	bne.n	10054a36 <HAL_Write_ConfigData+0x8a>
10054a2e:	7821      	ldrb	r1, [r4, #0]
10054a30:	2236      	movs	r2, #54	@ 0x36
10054a32:	5481      	strb	r1, [r0, r2]
10054a34:	e7e2      	b.n	100549fc <HAL_Write_ConfigData+0x50>
10054a36:	2ed5      	cmp	r6, #213	@ 0xd5
10054a38:	d10a      	bne.n	10054a50 <HAL_Write_ConfigData+0xa4>
10054a3a:	2d04      	cmp	r5, #4
10054a3c:	d108      	bne.n	10054a50 <HAL_Write_ConfigData+0xa4>
10054a3e:	a802      	add	r0, sp, #8
10054a40:	2204      	movs	r2, #4
10054a42:	4621      	mov	r1, r4
10054a44:	f7fd fe8a 	bl	1005275c <BLEPLAT_MemCpy>
10054a48:	9802      	ldr	r0, [sp, #8]
10054a4a:	f7fa f9bd 	bl	1004edc8 <smp_debug_trudy__set_config_ucfg>
10054a4e:	e7d6      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054a50:	f004 fe20 	bl	10059694 <data_length_extension_csr_ucfg_weak>
10054a54:	2d08      	cmp	r5, #8
10054a56:	d123      	bne.n	10054aa0 <HAL_Write_ConfigData+0xf4>
10054a58:	2ed1      	cmp	r6, #209	@ 0xd1
10054a5a:	d121      	bne.n	10054aa0 <HAL_Write_ConfigData+0xf4>
10054a5c:	2801      	cmp	r0, #1
10054a5e:	d11f      	bne.n	10054aa0 <HAL_Write_ConfigData+0xf4>
10054a60:	a802      	add	r0, sp, #8
10054a62:	9001      	str	r0, [sp, #4]
10054a64:	2602      	movs	r6, #2
10054a66:	4d3f      	ldr	r5, [pc, #252]	@ (10054b64 <__arm_cp.4_2>)
10054a68:	4621      	mov	r1, r4
10054a6a:	4632      	mov	r2, r6
10054a6c:	47a8      	blx	r5
10054a6e:	1ca1      	adds	r1, r4, #2
10054a70:	af06      	add	r7, sp, #24
10054a72:	4638      	mov	r0, r7
10054a74:	4632      	mov	r2, r6
10054a76:	47a8      	blx	r5
10054a78:	1d21      	adds	r1, r4, #4
10054a7a:	ad05      	add	r5, sp, #20
10054a7c:	4628      	mov	r0, r5
10054a7e:	4632      	mov	r2, r6
10054a80:	4b38      	ldr	r3, [pc, #224]	@ (10054b64 <__arm_cp.4_2>)
10054a82:	4798      	blx	r3
10054a84:	1da1      	adds	r1, r4, #6
10054a86:	ac04      	add	r4, sp, #16
10054a88:	4620      	mov	r0, r4
10054a8a:	4632      	mov	r2, r6
10054a8c:	4b35      	ldr	r3, [pc, #212]	@ (10054b64 <__arm_cp.4_2>)
10054a8e:	4798      	blx	r3
10054a90:	8823      	ldrh	r3, [r4, #0]
10054a92:	882a      	ldrh	r2, [r5, #0]
10054a94:	8839      	ldrh	r1, [r7, #0]
10054a96:	9801      	ldr	r0, [sp, #4]
10054a98:	8800      	ldrh	r0, [r0, #0]
10054a9a:	f00b fa6d 	bl	1005ff78 <ll_write_supported_data_ucfg_weak>
10054a9e:	e7ae      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054aa0:	2e30      	cmp	r6, #48	@ 0x30
10054aa2:	d105      	bne.n	10054ab0 <HAL_Write_ConfigData+0x104>
10054aa4:	2d01      	cmp	r5, #1
10054aa6:	d103      	bne.n	10054ab0 <HAL_Write_ConfigData+0x104>
10054aa8:	7820      	ldrb	r0, [r4, #0]
10054aaa:	f7fa f9ba 	bl	1004ee22 <llc_conn_multi_link_connection_ucfg>
10054aae:	e7a6      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054ab0:	2ed3      	cmp	r6, #211	@ 0xd3
10054ab2:	d105      	bne.n	10054ac0 <HAL_Write_ConfigData+0x114>
10054ab4:	2d01      	cmp	r5, #1
10054ab6:	d103      	bne.n	10054ac0 <HAL_Write_ConfigData+0x114>
10054ab8:	7820      	ldrb	r0, [r4, #0]
10054aba:	f00b f96b 	bl	1005fd94 <LL_force_chsel_1>
10054abe:	e79e      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054ac0:	2eff      	cmp	r6, #255	@ 0xff
10054ac2:	d10a      	bne.n	10054ada <HAL_Write_ConfigData+0x12e>
10054ac4:	2d04      	cmp	r5, #4
10054ac6:	d108      	bne.n	10054ada <HAL_Write_ConfigData+0x12e>
10054ac8:	a802      	add	r0, sp, #8
10054aca:	2204      	movs	r2, #4
10054acc:	4621      	mov	r1, r4
10054ace:	f7fd fe45 	bl	1005275c <BLEPLAT_MemCpy>
10054ad2:	9802      	ldr	r0, [sp, #8]
10054ad4:	f7ff ff67 	bl	100549a6 <configBitmapSet>
10054ad8:	e00c      	b.n	10054af4 <HAL_Write_ConfigData+0x148>
10054ada:	2efe      	cmp	r6, #254	@ 0xfe
10054adc:	d10d      	bne.n	10054afa <HAL_Write_ConfigData+0x14e>
10054ade:	2d05      	cmp	r5, #5
10054ae0:	d10b      	bne.n	10054afa <HAL_Write_ConfigData+0x14e>
10054ae2:	ad02      	add	r5, sp, #8
10054ae4:	2205      	movs	r2, #5
10054ae6:	4628      	mov	r0, r5
10054ae8:	4621      	mov	r1, r4
10054aea:	f7fd fe37 	bl	1005275c <BLEPLAT_MemCpy>
10054aee:	4628      	mov	r0, r5
10054af0:	f000 fb78 	bl	100551e4 <log_verbosity_set_ucfg_weak>
10054af4:	2800      	cmp	r0, #0
10054af6:	d181      	bne.n	100549fc <HAL_Write_ConfigData+0x50>
10054af8:	e78b      	b.n	10054a12 <HAL_Write_ConfigData+0x66>
10054afa:	2e2f      	cmp	r6, #47	@ 0x2f
10054afc:	d105      	bne.n	10054b0a <HAL_Write_ConfigData+0x15e>
10054afe:	2d01      	cmp	r5, #1
10054b00:	d103      	bne.n	10054b0a <HAL_Write_ConfigData+0x15e>
10054b02:	7820      	ldrb	r0, [r4, #0]
10054b04:	f007 f85c 	bl	1005bbc0 <llc_scan_set_scan_channel_bitmap>
10054b08:	e779      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054b0a:	2e32      	cmp	r6, #50	@ 0x32
10054b0c:	d112      	bne.n	10054b34 <HAL_Write_ConfigData+0x188>
10054b0e:	2d02      	cmp	r5, #2
10054b10:	d110      	bne.n	10054b34 <HAL_Write_ConfigData+0x188>
10054b12:	ad02      	add	r5, sp, #8
10054b14:	2202      	movs	r2, #2
10054b16:	4628      	mov	r0, r5
10054b18:	4621      	mov	r1, r4
10054b1a:	f7fd fe1f 	bl	1005275c <BLEPLAT_MemCpy>
10054b1e:	8828      	ldrh	r0, [r5, #0]
10054b20:	1e41      	subs	r1, r0, #1
10054b22:	08c9      	lsrs	r1, r1, #3
10054b24:	29e0      	cmp	r1, #224	@ 0xe0
10054b26:	d900      	bls.n	10054b2a <HAL_Write_ConfigData+0x17e>
10054b28:	e773      	b.n	10054a12 <HAL_Write_ConfigData+0x66>
10054b2a:	490d      	ldr	r1, [pc, #52]	@ (10054b60 <__arm_cp.4_1>)
10054b2c:	6809      	ldr	r1, [r1, #0]
10054b2e:	225a      	movs	r2, #90	@ 0x5a
10054b30:	5288      	strh	r0, [r1, r2]
10054b32:	e763      	b.n	100549fc <HAL_Write_ConfigData+0x50>
10054b34:	2012      	movs	r0, #18
10054b36:	2e33      	cmp	r6, #51	@ 0x33
10054b38:	d000      	beq.n	10054b3c <HAL_Write_ConfigData+0x190>
10054b3a:	e760      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054b3c:	2d01      	cmp	r5, #1
10054b3e:	d000      	beq.n	10054b42 <HAL_Write_ConfigData+0x196>
10054b40:	e75d      	b.n	100549fe <HAL_Write_ConfigData+0x52>
10054b42:	ad02      	add	r5, sp, #8
10054b44:	2201      	movs	r2, #1
10054b46:	4628      	mov	r0, r5
10054b48:	4621      	mov	r1, r4
10054b4a:	f7fd fe07 	bl	1005275c <BLEPLAT_MemCpy>
10054b4e:	7828      	ldrb	r0, [r5, #0]
10054b50:	f001 fcd8 	bl	10056504 <GAP_enable_rpa_change_at_timeout>
10054b54:	7828      	ldrb	r0, [r5, #0]
10054b56:	f006 fffb 	bl	1005bb50 <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>
10054b5a:	e74f      	b.n	100549fc <HAL_Write_ConfigData+0x50>

10054b5c <__arm_cp.4_0>:
10054b5c:	20002a7c 	.word	0x20002a7c

10054b60 <__arm_cp.4_1>:
10054b60:	20002a84 	.word	0x20002a84

10054b64 <__arm_cp.4_2>:
10054b64:	1005275d 	.word	0x1005275d

10054b68 <aci_hal_write_config_data>:
10054b68:	b580      	push	{r7, lr}
10054b6a:	f7ff ff1f 	bl	100549ac <HAL_Write_ConfigData>
10054b6e:	bd80      	pop	{r7, pc}

10054b70 <aci_hal_set_tx_power_level>:
10054b70:	b580      	push	{r7, lr}
10054b72:	f000 f801 	bl	10054b78 <HAL_Set_TX_Power_Level>
10054b76:	bd80      	pop	{r7, pc}

10054b78 <HAL_Set_TX_Power_Level>:
10054b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054b7a:	460e      	mov	r6, r1
10054b7c:	4605      	mov	r5, r0
10054b7e:	2412      	movs	r4, #18
10054b80:	f7fd fe90 	bl	100528a4 <BLEPLAT_GetMaxPALevel>
10054b84:	42b0      	cmp	r0, r6
10054b86:	d317      	bcc.n	10054bb8 <HAL_Set_TX_Power_Level+0x40>
10054b88:	2d01      	cmp	r5, #1
10054b8a:	d815      	bhi.n	10054bb8 <HAL_Set_TX_Power_Level+0x40>
10054b8c:	480b      	ldr	r0, [pc, #44]	@ (10054bbc <__arm_cp.11_0>)
10054b8e:	6800      	ldr	r0, [r0, #0]
10054b90:	7a81      	ldrb	r1, [r0, #10]
10054b92:	9100      	str	r1, [sp, #0]
10054b94:	7285      	strb	r5, [r0, #10]
10054b96:	7a47      	ldrb	r7, [r0, #9]
10054b98:	7246      	strb	r6, [r0, #9]
10054b9a:	4628      	mov	r0, r5
10054b9c:	f7fd fe92 	bl	100528c4 <BLEPLAT_SetHighPower>
10054ba0:	2400      	movs	r4, #0
10054ba2:	42b7      	cmp	r7, r6
10054ba4:	d102      	bne.n	10054bac <HAL_Set_TX_Power_Level+0x34>
10054ba6:	9800      	ldr	r0, [sp, #0]
10054ba8:	42a8      	cmp	r0, r5
10054baa:	d005      	beq.n	10054bb8 <HAL_Set_TX_Power_Level+0x40>
10054bac:	20ff      	movs	r0, #255	@ 0xff
10054bae:	227f      	movs	r2, #127	@ 0x7f
10054bb0:	2101      	movs	r1, #1
10054bb2:	460b      	mov	r3, r1
10054bb4:	f009 fa5e 	bl	1005e074 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
10054bb8:	4620      	mov	r0, r4
10054bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054bbc <__arm_cp.11_0>:
10054bbc:	20002ad0 	.word	0x20002ad0

10054bc0 <ble_HAL_Init>:
10054bc0:	b580      	push	{r7, lr}
10054bc2:	4804      	ldr	r0, [pc, #16]	@ (10054bd4 <__arm_cp.17_0>)
10054bc4:	6800      	ldr	r0, [r0, #0]
10054bc6:	3060      	adds	r0, #96	@ 0x60
10054bc8:	2100      	movs	r1, #0
10054bca:	2204      	movs	r2, #4
10054bcc:	f7fd fdd6 	bl	1005277c <BLEPLAT_MemSet>
10054bd0:	bd80      	pop	{r7, pc}
10054bd2:	46c0      	nop			@ (mov r8, r8)

10054bd4 <__arm_cp.17_0>:
10054bd4:	20002ad0 	.word	0x20002ad0

10054bd8 <hal_read_radio_activity_state>:
10054bd8:	b570      	push	{r4, r5, r6, lr}
10054bda:	4603      	mov	r3, r0
10054bdc:	480a      	ldr	r0, [pc, #40]	@ (10054c08 <__arm_cp.18_0>)
10054bde:	6804      	ldr	r4, [r0, #0]
10054be0:	f3ef 8010 	mrs	r0, PRIMASK
10054be4:	b672      	cpsid	i
10054be6:	7d20      	ldrb	r0, [r4, #20]
10054be8:	2500      	movs	r5, #0
10054bea:	7525      	strb	r5, [r4, #20]
10054bec:	7c25      	ldrb	r5, [r4, #16]
10054bee:	260f      	movs	r6, #15
10054bf0:	402e      	ands	r6, r5
10054bf2:	701e      	strb	r6, [r3, #0]
10054bf4:	7c23      	ldrb	r3, [r4, #16]
10054bf6:	091b      	lsrs	r3, r3, #4
10054bf8:	700b      	strb	r3, [r1, #0]
10054bfa:	68e1      	ldr	r1, [r4, #12]
10054bfc:	6011      	str	r1, [r2, #0]
10054bfe:	1e41      	subs	r1, r0, #1
10054c00:	4188      	sbcs	r0, r1
10054c02:	b662      	cpsie	i
10054c04:	bd70      	pop	{r4, r5, r6, pc}
10054c06:	46c0      	nop			@ (mov r8, r8)

10054c08 <__arm_cp.18_0>:
10054c08:	20002ad0 	.word	0x20002ad0

10054c0c <hal_radio_activity_state_init>:
10054c0c:	4803      	ldr	r0, [pc, #12]	@ (10054c1c <__arm_cp.20_0>)
10054c0e:	6800      	ldr	r0, [r0, #0]
10054c10:	2100      	movs	r1, #0
10054c12:	7501      	strb	r1, [r0, #20]
10054c14:	8241      	strh	r1, [r0, #18]
10054c16:	7401      	strb	r1, [r0, #16]
10054c18:	4770      	bx	lr
10054c1a:	46c0      	nop			@ (mov r8, r8)

10054c1c <__arm_cp.20_0>:
10054c1c:	20002ad0 	.word	0x20002ad0

10054c20 <hal_radio_activity_state_cb_check>:
10054c20:	b510      	push	{r4, lr}
10054c22:	b086      	sub	sp, #24
10054c24:	4815      	ldr	r0, [pc, #84]	@ (10054c7c <__arm_cp.22_0>)
10054c26:	6804      	ldr	r4, [r0, #0]
10054c28:	a802      	add	r0, sp, #8
10054c2a:	a901      	add	r1, sp, #4
10054c2c:	466a      	mov	r2, sp
10054c2e:	f7ff ffd3 	bl	10054bd8 <hal_read_radio_activity_state>
10054c32:	2800      	cmp	r0, #0
10054c34:	d01f      	beq.n	10054c76 <hal_radio_activity_state_cb_check+0x56>
10054c36:	a802      	add	r0, sp, #8
10054c38:	7801      	ldrb	r1, [r0, #0]
10054c3a:	8a60      	ldrh	r0, [r4, #18]
10054c3c:	40c8      	lsrs	r0, r1
10054c3e:	07c0      	lsls	r0, r0, #31
10054c40:	d019      	beq.n	10054c76 <hal_radio_activity_state_cb_check+0x56>
10054c42:	9a01      	ldr	r2, [sp, #4]
10054c44:	9b00      	ldr	r3, [sp, #0]
10054c46:	a803      	add	r0, sp, #12
10054c48:	2408      	movs	r4, #8
10054c4a:	7084      	strb	r4, [r0, #2]
10054c4c:	0e1c      	lsrs	r4, r3, #24
10054c4e:	72c4      	strb	r4, [r0, #11]
10054c50:	0c1c      	lsrs	r4, r3, #16
10054c52:	7284      	strb	r4, [r0, #10]
10054c54:	0a1c      	lsrs	r4, r3, #8
10054c56:	7244      	strb	r4, [r0, #9]
10054c58:	7203      	strb	r3, [r0, #8]
10054c5a:	71c2      	strb	r2, [r0, #7]
10054c5c:	7181      	strb	r1, [r0, #6]
10054c5e:	21ff      	movs	r1, #255	@ 0xff
10054c60:	7041      	strb	r1, [r0, #1]
10054c62:	2182      	movs	r1, #130	@ 0x82
10054c64:	7001      	strb	r1, [r0, #0]
10054c66:	2100      	movs	r1, #0
10054c68:	7141      	strb	r1, [r0, #5]
10054c6a:	2204      	movs	r2, #4
10054c6c:	7102      	strb	r2, [r0, #4]
10054c6e:	70c1      	strb	r1, [r0, #3]
10054c70:	210c      	movs	r1, #12
10054c72:	f7f9 ff41 	bl	1004eaf8 <BLE_STACK_Event>
10054c76:	b006      	add	sp, #24
10054c78:	bd10      	pop	{r4, pc}
10054c7a:	46c0      	nop			@ (mov r8, r8)

10054c7c <__arm_cp.22_0>:
10054c7c:	20002ad0 	.word	0x20002ad0

10054c80 <aci_l2cap_connection_parameter_update_req_api>:
10054c80:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10054c82:	ac01      	add	r4, sp, #4
10054c84:	9d08      	ldr	r5, [sp, #32]
10054c86:	8125      	strh	r5, [r4, #8]
10054c88:	80e3      	strh	r3, [r4, #6]
10054c8a:	80a2      	strh	r2, [r4, #4]
10054c8c:	8061      	strh	r1, [r4, #2]
10054c8e:	8020      	strh	r0, [r4, #0]
10054c90:	4620      	mov	r0, r4
10054c92:	f004 fd0b 	bl	100596ac <L2C_build_connect_update_request>
10054c96:	b004      	add	sp, #16
10054c98:	bdb0      	pop	{r4, r5, r7, pc}
	...

10054c9c <Acl_Init>:
10054c9c:	4803      	ldr	r0, [pc, #12]	@ (10054cac <__arm_cp.0_0>)
10054c9e:	6800      	ldr	r0, [r0, #0]
10054ca0:	2188      	movs	r1, #136	@ 0x88
10054ca2:	4a03      	ldr	r2, [pc, #12]	@ (10054cb0 <__arm_cp.0_1>)
10054ca4:	5042      	str	r2, [r0, r1]
10054ca6:	2000      	movs	r0, #0
10054ca8:	4770      	bx	lr
10054caa:	46c0      	nop			@ (mov r8, r8)

10054cac <__arm_cp.0_0>:
10054cac:	20002ad0 	.word	0x20002ad0

10054cb0 <__arm_cp.0_1>:
10054cb0:	03030000 	.word	0x03030000

10054cb4 <isr_Acl_Data_Indication_Queue_Full>:
10054cb4:	4805      	ldr	r0, [pc, #20]	@ (10054ccc <__arm_cp.1_0>)
10054cb6:	6800      	ldr	r0, [r0, #0]
10054cb8:	2188      	movs	r1, #136	@ 0x88
10054cba:	5c41      	ldrb	r1, [r0, r1]
10054cbc:	3088      	adds	r0, #136	@ 0x88
10054cbe:	7880      	ldrb	r0, [r0, #2]
10054cc0:	4281      	cmp	r1, r0
10054cc2:	d801      	bhi.n	10054cc8 <isr_Acl_Data_Indication_Queue_Full+0x14>
10054cc4:	2000      	movs	r0, #0
10054cc6:	4770      	bx	lr
10054cc8:	2001      	movs	r0, #1
10054cca:	4770      	bx	lr

10054ccc <__arm_cp.1_0>:
10054ccc:	20002ad0 	.word	0x20002ad0

10054cd0 <isr_Acl_Data_TX_Cmpl_Queue_Full>:
10054cd0:	4805      	ldr	r0, [pc, #20]	@ (10054ce8 <__arm_cp.2_0>)
10054cd2:	6800      	ldr	r0, [r0, #0]
10054cd4:	2189      	movs	r1, #137	@ 0x89
10054cd6:	5c41      	ldrb	r1, [r0, r1]
10054cd8:	3089      	adds	r0, #137	@ 0x89
10054cda:	7880      	ldrb	r0, [r0, #2]
10054cdc:	4281      	cmp	r1, r0
10054cde:	d801      	bhi.n	10054ce4 <isr_Acl_Data_TX_Cmpl_Queue_Full+0x14>
10054ce0:	2000      	movs	r0, #0
10054ce2:	4770      	bx	lr
10054ce4:	2001      	movs	r0, #1
10054ce6:	4770      	bx	lr

10054ce8 <__arm_cp.2_0>:
10054ce8:	20002ad0 	.word	0x20002ad0

10054cec <Acl_Rcv_Pkt_Handler>:
10054cec:	b510      	push	{r4, lr}
10054cee:	4604      	mov	r4, r0
10054cf0:	480a      	ldr	r0, [pc, #40]	@ (10054d1c <__arm_cp.5_0>)
10054cf2:	6800      	ldr	r0, [r0, #0]
10054cf4:	6900      	ldr	r0, [r0, #16]
10054cf6:	2190      	movs	r1, #144	@ 0x90
10054cf8:	2201      	movs	r2, #1
10054cfa:	4613      	mov	r3, r2
10054cfc:	f000 fa7a 	bl	100551f4 <aci_event_fifo_push_header>
10054d00:	2800      	cmp	r0, #0
10054d02:	d004      	beq.n	10054d0e <Acl_Rcv_Pkt_Handler+0x22>
10054d04:	4601      	mov	r1, r0
10054d06:	6044      	str	r4, [r0, #4]
10054d08:	2090      	movs	r0, #144	@ 0x90
10054d0a:	f000 fb10 	bl	1005532e <aci_event_fifo_push>
10054d0e:	4804      	ldr	r0, [pc, #16]	@ (10054d20 <__arm_cp.5_1>)
10054d10:	6800      	ldr	r0, [r0, #0]
10054d12:	2188      	movs	r1, #136	@ 0x88
10054d14:	5c42      	ldrb	r2, [r0, r1]
10054d16:	1c52      	adds	r2, r2, #1
10054d18:	5442      	strb	r2, [r0, r1]
10054d1a:	bd10      	pop	{r4, pc}

10054d1c <__arm_cp.5_0>:
10054d1c:	20002a80 	.word	0x20002a80

10054d20 <__arm_cp.5_1>:
10054d20:	20002ad0 	.word	0x20002ad0

10054d24 <Acl_Tx_Cmpl_Pkt_Handler>:
10054d24:	b510      	push	{r4, lr}
10054d26:	4604      	mov	r4, r0
10054d28:	7a00      	ldrb	r0, [r0, #8]
10054d2a:	21f7      	movs	r1, #247	@ 0xf7
10054d2c:	4001      	ands	r1, r0
10054d2e:	7221      	strb	r1, [r4, #8]
10054d30:	480a      	ldr	r0, [pc, #40]	@ (10054d5c <__arm_cp.6_0>)
10054d32:	6800      	ldr	r0, [r0, #0]
10054d34:	6900      	ldr	r0, [r0, #16]
10054d36:	2190      	movs	r1, #144	@ 0x90
10054d38:	2200      	movs	r2, #0
10054d3a:	2301      	movs	r3, #1
10054d3c:	f000 fa5a 	bl	100551f4 <aci_event_fifo_push_header>
10054d40:	2800      	cmp	r0, #0
10054d42:	d004      	beq.n	10054d4e <Acl_Tx_Cmpl_Pkt_Handler+0x2a>
10054d44:	4601      	mov	r1, r0
10054d46:	6044      	str	r4, [r0, #4]
10054d48:	2090      	movs	r0, #144	@ 0x90
10054d4a:	f000 faf0 	bl	1005532e <aci_event_fifo_push>
10054d4e:	4804      	ldr	r0, [pc, #16]	@ (10054d60 <__arm_cp.6_1>)
10054d50:	6800      	ldr	r0, [r0, #0]
10054d52:	2189      	movs	r1, #137	@ 0x89
10054d54:	5c42      	ldrb	r2, [r0, r1]
10054d56:	1c52      	adds	r2, r2, #1
10054d58:	5442      	strb	r2, [r0, r1]
10054d5a:	bd10      	pop	{r4, pc}

10054d5c <__arm_cp.6_0>:
10054d5c:	20002a80 	.word	0x20002a80

10054d60 <__arm_cp.6_1>:
10054d60:	20002ad0 	.word	0x20002ad0

10054d64 <Acl_Transmit_Data>:
10054d64:	b510      	push	{r4, lr}
10054d66:	2400      	movs	r4, #0
10054d68:	61c4      	str	r4, [r0, #28]
10054d6a:	f006 fc0f 	bl	1005b58c <llc_conn_send_acl_data>
10054d6e:	2884      	cmp	r0, #132	@ 0x84
10054d70:	d000      	beq.n	10054d74 <Acl_Transmit_Data+0x10>
10054d72:	2481      	movs	r4, #129	@ 0x81
10054d74:	4620      	mov	r0, r4
10054d76:	bd10      	pop	{r4, pc}

10054d78 <hci_acl_data_tx_cmpl_event_int_cb>:
10054d78:	b5b0      	push	{r4, r5, r7, lr}
10054d7a:	6809      	ldr	r1, [r1, #0]
10054d7c:	2483      	movs	r4, #131	@ 0x83
10054d7e:	2200      	movs	r2, #0
10054d80:	2900      	cmp	r1, #0
10054d82:	d012      	beq.n	10054daa <hci_acl_data_tx_cmpl_event_int_cb+0x32>
10054d84:	69cd      	ldr	r5, [r1, #28]
10054d86:	2400      	movs	r4, #0
10054d88:	61cc      	str	r4, [r1, #28]
10054d8a:	7a08      	ldrb	r0, [r1, #8]
10054d8c:	06c0      	lsls	r0, r0, #27
10054d8e:	d403      	bmi.n	10054d98 <hci_acl_data_tx_cmpl_event_int_cb+0x20>
10054d90:	2000      	movs	r0, #0
10054d92:	f004 ff87 	bl	10059ca4 <L2C_mux_acl_packet>
10054d96:	e002      	b.n	10054d9e <hci_acl_data_tx_cmpl_event_int_cb+0x26>
10054d98:	4608      	mov	r0, r1
10054d9a:	f004 faab 	bl	100592f4 <hci_tx_acl_data_done>
10054d9e:	2201      	movs	r2, #1
10054da0:	2800      	cmp	r0, #0
10054da2:	4629      	mov	r1, r5
10054da4:	d0ec      	beq.n	10054d80 <hci_acl_data_tx_cmpl_event_int_cb+0x8>
10054da6:	2483      	movs	r4, #131	@ 0x83
10054da8:	e00c      	b.n	10054dc4 <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10054daa:	07d0      	lsls	r0, r2, #31
10054dac:	d00a      	beq.n	10054dc4 <hci_acl_data_tx_cmpl_event_int_cb+0x4c>
10054dae:	f3ef 8010 	mrs	r0, PRIMASK
10054db2:	b672      	cpsid	i
10054db4:	4804      	ldr	r0, [pc, #16]	@ (10054dc8 <__arm_cp.9_0>)
10054db6:	6800      	ldr	r0, [r0, #0]
10054db8:	2189      	movs	r1, #137	@ 0x89
10054dba:	5c42      	ldrb	r2, [r0, r1]
10054dbc:	1e52      	subs	r2, r2, #1
10054dbe:	5442      	strb	r2, [r0, r1]
10054dc0:	b662      	cpsie	i
10054dc2:	2400      	movs	r4, #0
10054dc4:	b2e0      	uxtb	r0, r4
10054dc6:	bdb0      	pop	{r4, r5, r7, pc}

10054dc8 <__arm_cp.9_0>:
10054dc8:	20002ad0 	.word	0x20002ad0

10054dcc <hci_acl_data_ind_event_int_cb>:
10054dcc:	b580      	push	{r7, lr}
10054dce:	480e      	ldr	r0, [pc, #56]	@ (10054e08 <__arm_cp.11_0>)
10054dd0:	6800      	ldr	r0, [r0, #0]
10054dd2:	222c      	movs	r2, #44	@ 0x2c
10054dd4:	5c80      	ldrb	r0, [r0, r2]
10054dd6:	07c0      	lsls	r0, r0, #31
10054dd8:	6808      	ldr	r0, [r1, #0]
10054dda:	d102      	bne.n	10054de2 <hci_acl_data_ind_event_int_cb+0x16>
10054ddc:	f004 fed4 	bl	10059b88 <L2C_receive_data>
10054de0:	e001      	b.n	10054de6 <hci_acl_data_ind_event_int_cb+0x1a>
10054de2:	f004 fa53 	bl	1005928c <hci_rx_acl_data>
10054de6:	2800      	cmp	r0, #0
10054de8:	d001      	beq.n	10054dee <hci_acl_data_ind_event_int_cb+0x22>
10054dea:	2083      	movs	r0, #131	@ 0x83
10054dec:	bd80      	pop	{r7, pc}
10054dee:	f3ef 8010 	mrs	r0, PRIMASK
10054df2:	b672      	cpsid	i
10054df4:	4805      	ldr	r0, [pc, #20]	@ (10054e0c <__arm_cp.11_1>)
10054df6:	6800      	ldr	r0, [r0, #0]
10054df8:	2188      	movs	r1, #136	@ 0x88
10054dfa:	5c42      	ldrb	r2, [r0, r1]
10054dfc:	1e52      	subs	r2, r2, #1
10054dfe:	5442      	strb	r2, [r0, r1]
10054e00:	b662      	cpsie	i
10054e02:	2000      	movs	r0, #0
10054e04:	bd80      	pop	{r7, pc}
10054e06:	46c0      	nop			@ (mov r8, r8)

10054e08 <__arm_cp.11_0>:
10054e08:	20002a7c 	.word	0x20002a7c

10054e0c <__arm_cp.11_1>:
10054e0c:	20002ad0 	.word	0x20002ad0

10054e10 <ACL_pkt_init>:
10054e10:	b570      	push	{r4, r5, r6, lr}
10054e12:	4c0b      	ldr	r4, [pc, #44]	@ (10054e40 <__arm_cp.1_0>)
10054e14:	2501      	movs	r5, #1
10054e16:	2204      	movs	r2, #4
10054e18:	4620      	mov	r0, r4
10054e1a:	4629      	mov	r1, r5
10054e1c:	f00b ff4c 	bl	10060cb8 <csmem_mem_assign>
10054e20:	4e08      	ldr	r6, [pc, #32]	@ (10054e44 <__arm_cp.1_1>)
10054e22:	6030      	str	r0, [r6, #0]
10054e24:	2206      	movs	r2, #6
10054e26:	4620      	mov	r0, r4
10054e28:	4629      	mov	r1, r5
10054e2a:	f00b ff45 	bl	10060cb8 <csmem_mem_assign>
10054e2e:	6831      	ldr	r1, [r6, #0]
10054e30:	6008      	str	r0, [r1, #0]
10054e32:	6830      	ldr	r0, [r6, #0]
10054e34:	6801      	ldr	r1, [r0, #0]
10054e36:	2000      	movs	r0, #0
10054e38:	8088      	strh	r0, [r1, #4]
10054e3a:	8048      	strh	r0, [r1, #2]
10054e3c:	7008      	strb	r0, [r1, #0]
10054e3e:	bd70      	pop	{r4, r5, r6, pc}

10054e40 <__arm_cp.1_0>:
10054e40:	20002ae0 	.word	0x20002ae0

10054e44 <__arm_cp.1_1>:
10054e44:	20002a78 	.word	0x20002a78

10054e48 <ACL_pkt_get>:
10054e48:	b5b0      	push	{r4, r5, r7, lr}
10054e4a:	460d      	mov	r5, r1
10054e4c:	4604      	mov	r4, r0
10054e4e:	1e41      	subs	r1, r0, #1
10054e50:	4188      	sbcs	r0, r1
10054e52:	1e51      	subs	r1, r2, #1
10054e54:	221f      	movs	r2, #31
10054e56:	430a      	orrs	r2, r1
10054e58:	3221      	adds	r2, #33	@ 0x21
10054e5a:	b291      	uxth	r1, r2
10054e5c:	f00b fe0a 	bl	10060a74 <MBM_get>
10054e60:	2800      	cmp	r0, #0
10054e62:	d006      	beq.n	10054e72 <ACL_pkt_get+0x2a>
10054e64:	8085      	strh	r5, [r0, #4]
10054e66:	6801      	ldr	r1, [r0, #0]
10054e68:	6081      	str	r1, [r0, #8]
10054e6a:	2c00      	cmp	r4, #0
10054e6c:	d103      	bne.n	10054e76 <ACL_pkt_get+0x2e>
10054e6e:	2140      	movs	r1, #64	@ 0x40
10054e70:	e003      	b.n	10054e7a <ACL_pkt_get+0x32>
10054e72:	2000      	movs	r0, #0
10054e74:	bdb0      	pop	{r4, r5, r7, pc}
10054e76:	217f      	movs	r1, #127	@ 0x7f
10054e78:	43c9      	mvns	r1, r1
10054e7a:	7301      	strb	r1, [r0, #12]
10054e7c:	1d00      	adds	r0, r0, #4
10054e7e:	bdb0      	pop	{r4, r5, r7, pc}

10054e80 <ACL_pkt_get_available_mem_buffers>:
10054e80:	b580      	push	{r7, lr}
10054e82:	1e41      	subs	r1, r0, #1
10054e84:	4188      	sbcs	r0, r1
10054e86:	f00b fe5d 	bl	10060b44 <MBM_get_available_mem_buffers>
10054e8a:	bd80      	pop	{r7, pc}

10054e8c <ACL_pkt_release>:
10054e8c:	b580      	push	{r7, lr}
10054e8e:	7a01      	ldrb	r1, [r0, #8]
10054e90:	098a      	lsrs	r2, r1, #6
10054e92:	2101      	movs	r1, #1
10054e94:	4391      	bics	r1, r2
10054e96:	1f00      	subs	r0, r0, #4
10054e98:	f00b fe26 	bl	10060ae8 <MBM_release>
10054e9c:	bd80      	pop	{r7, pc}

10054e9e <ACL_pkt_resize>:
10054e9e:	b580      	push	{r7, lr}
10054ea0:	460a      	mov	r2, r1
10054ea2:	7a01      	ldrb	r1, [r0, #8]
10054ea4:	098b      	lsrs	r3, r1, #6
10054ea6:	2101      	movs	r1, #1
10054ea8:	4399      	bics	r1, r3
10054eaa:	6840      	ldr	r0, [r0, #4]
10054eac:	f00b fe5e 	bl	10060b6c <MBM_resize>
10054eb0:	bd80      	pop	{r7, pc}

10054eb2 <ACL_pkt_cmp>:
10054eb2:	b510      	push	{r4, lr}
10054eb4:	4614      	mov	r4, r2
10054eb6:	460a      	mov	r2, r1
10054eb8:	6840      	ldr	r0, [r0, #4]
10054eba:	4619      	mov	r1, r3
10054ebc:	4623      	mov	r3, r4
10054ebe:	f00c f82f 	bl	10060f20 <Mem_Buff_cmp>
10054ec2:	bd10      	pop	{r4, pc}

10054ec4 <ACL_pkt_read>:
10054ec4:	b510      	push	{r4, lr}
10054ec6:	4614      	mov	r4, r2
10054ec8:	460a      	mov	r2, r1
10054eca:	6840      	ldr	r0, [r0, #4]
10054ecc:	4619      	mov	r1, r3
10054ece:	4623      	mov	r3, r4
10054ed0:	f00b ffed 	bl	10060eae <Mem_Buff_read>
10054ed4:	bd10      	pop	{r4, pc}

10054ed6 <ACL_pkt_read_16b>:
10054ed6:	b5e0      	push	{r5, r6, r7, lr}
10054ed8:	2202      	movs	r2, #2
10054eda:	ab01      	add	r3, sp, #4
10054edc:	f7ff fff2 	bl	10054ec4 <ACL_pkt_read>
10054ee0:	2800      	cmp	r0, #0
10054ee2:	d001      	beq.n	10054ee8 <ACL_pkt_read_16b+0x12>
10054ee4:	2000      	movs	r0, #0
10054ee6:	e004      	b.n	10054ef2 <ACL_pkt_read_16b+0x1c>
10054ee8:	a801      	add	r0, sp, #4
10054eea:	7801      	ldrb	r1, [r0, #0]
10054eec:	7840      	ldrb	r0, [r0, #1]
10054eee:	0200      	lsls	r0, r0, #8
10054ef0:	1840      	adds	r0, r0, r1
10054ef2:	b280      	uxth	r0, r0
10054ef4:	bd8c      	pop	{r2, r3, r7, pc}

10054ef6 <ACL_pkt_write_16b>:
10054ef6:	b5e0      	push	{r5, r6, r7, lr}
10054ef8:	ab01      	add	r3, sp, #4
10054efa:	701a      	strb	r2, [r3, #0]
10054efc:	0a12      	lsrs	r2, r2, #8
10054efe:	705a      	strb	r2, [r3, #1]
10054f00:	2202      	movs	r2, #2
10054f02:	f000 f801 	bl	10054f08 <ACL_pkt_write>
10054f06:	bd8c      	pop	{r2, r3, r7, pc}

10054f08 <ACL_pkt_write>:
10054f08:	b510      	push	{r4, lr}
10054f0a:	4614      	mov	r4, r2
10054f0c:	460a      	mov	r2, r1
10054f0e:	6840      	ldr	r0, [r0, #4]
10054f10:	4619      	mov	r1, r3
10054f12:	4623      	mov	r3, r4
10054f14:	f00b ff91 	bl	10060e3a <Mem_Buff_write>
10054f18:	bd10      	pop	{r4, pc}

10054f1a <ACL_pkt_extract_pdu>:
10054f1a:	1f01      	subs	r1, r0, #4
10054f1c:	2200      	movs	r2, #0
10054f1e:	600a      	str	r2, [r1, #0]
10054f20:	6840      	ldr	r0, [r0, #4]
10054f22:	4770      	bx	lr

10054f24 <ACL_pkt_connection>:
10054f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054f26:	480f      	ldr	r0, [pc, #60]	@ (10054f64 <__arm_cp.14_0>)
10054f28:	6800      	ldr	r0, [r0, #0]
10054f2a:	6805      	ldr	r5, [r0, #0]
10054f2c:	7828      	ldrb	r0, [r5, #0]
10054f2e:	1c41      	adds	r1, r0, #1
10054f30:	7029      	strb	r1, [r5, #0]
10054f32:	4f0d      	ldr	r7, [pc, #52]	@ (10054f68 <__arm_cp.14_1>)
10054f34:	8a39      	ldrh	r1, [r7, #16]
10054f36:	3125      	adds	r1, #37	@ 0x25
10054f38:	094e      	lsrs	r6, r1, #5
10054f3a:	1c74      	adds	r4, r6, #1
10054f3c:	2800      	cmp	r0, #0
10054f3e:	d109      	bne.n	10054f54 <ACL_pkt_connection+0x30>
10054f40:	2000      	movs	r0, #0
10054f42:	4621      	mov	r1, r4
10054f44:	f00b fe4e 	bl	10060be4 <MBM_reserve>
10054f48:	8a38      	ldrh	r0, [r7, #16]
10054f4a:	3025      	adds	r0, #37	@ 0x25
10054f4c:	0940      	lsrs	r0, r0, #5
10054f4e:	1c40      	adds	r0, r0, #1
10054f50:	8068      	strh	r0, [r5, #2]
10054f52:	1cb4      	adds	r4, r6, #2
10054f54:	2001      	movs	r0, #1
10054f56:	4621      	mov	r1, r4
10054f58:	f00b fe44 	bl	10060be4 <MBM_reserve>
10054f5c:	88a8      	ldrh	r0, [r5, #4]
10054f5e:	1900      	adds	r0, r0, r4
10054f60:	80a8      	strh	r0, [r5, #4]
10054f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10054f64 <__arm_cp.14_0>:
10054f64:	20002a78 	.word	0x20002a78

10054f68 <__arm_cp.14_1>:
10054f68:	20002ae4 	.word	0x20002ae4

10054f6c <ACL_pkt_disconnection>:
10054f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10054f6e:	480e      	ldr	r0, [pc, #56]	@ (10054fa8 <__arm_cp.15_0>)
10054f70:	6800      	ldr	r0, [r0, #0]
10054f72:	6806      	ldr	r6, [r0, #0]
10054f74:	7830      	ldrb	r0, [r6, #0]
10054f76:	1e40      	subs	r0, r0, #1
10054f78:	7030      	strb	r0, [r6, #0]
10054f7a:	490c      	ldr	r1, [pc, #48]	@ (10054fac <__arm_cp.15_1>)
10054f7c:	8a09      	ldrh	r1, [r1, #16]
10054f7e:	3125      	adds	r1, #37	@ 0x25
10054f80:	094f      	lsrs	r7, r1, #5
10054f82:	1c7c      	adds	r4, r7, #1
10054f84:	0600      	lsls	r0, r0, #24
10054f86:	d106      	bne.n	10054f96 <ACL_pkt_disconnection+0x2a>
10054f88:	2500      	movs	r5, #0
10054f8a:	4628      	mov	r0, r5
10054f8c:	4621      	mov	r1, r4
10054f8e:	f00b fe7d 	bl	10060c8c <MBM_unreserve>
10054f92:	8075      	strh	r5, [r6, #2]
10054f94:	1cbc      	adds	r4, r7, #2
10054f96:	2001      	movs	r0, #1
10054f98:	4621      	mov	r1, r4
10054f9a:	f00b fe77 	bl	10060c8c <MBM_unreserve>
10054f9e:	88b0      	ldrh	r0, [r6, #4]
10054fa0:	1b00      	subs	r0, r0, r4
10054fa2:	80b0      	strh	r0, [r6, #4]
10054fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10054fa6:	46c0      	nop			@ (mov r8, r8)

10054fa8 <__arm_cp.15_0>:
10054fa8:	20002a78 	.word	0x20002a78

10054fac <__arm_cp.15_1>:
10054fac:	20002ae4 	.word	0x20002ae4

10054fb0 <BLE_STACK_Tick>:
10054fb0:	b580      	push	{r7, lr}
10054fb2:	f00d fc35 	bl	10062820 <tsk_scheduler>
10054fb6:	bd80      	pop	{r7, pc}

10054fb8 <BlueNRG_Stack_Initialize_Layers>:
10054fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10054fba:	b08f      	sub	sp, #60	@ 0x3c
10054fbc:	9309      	str	r3, [sp, #36]	@ 0x24
10054fbe:	920b      	str	r2, [sp, #44]	@ 0x2c
10054fc0:	910a      	str	r1, [sp, #40]	@ 0x28
10054fc2:	9008      	str	r0, [sp, #32]
10054fc4:	f00b fe72 	bl	10060cac <csmem_init>
10054fc8:	2401      	movs	r4, #1
10054fca:	2138      	movs	r1, #56	@ 0x38
10054fcc:	4620      	mov	r0, r4
10054fce:	f00b fe85 	bl	10060cdc <csmem_mem_0_assign>
10054fd2:	4933      	ldr	r1, [pc, #204]	@ (100550a0 <__arm_cp.1_0>)
10054fd4:	7ac9      	ldrb	r1, [r1, #11]
10054fd6:	2234      	movs	r2, #52	@ 0x34
10054fd8:	5481      	strb	r1, [r0, r2]
10054fda:	4e32      	ldr	r6, [pc, #200]	@ (100550a4 <__arm_cp.1_1>)
10054fdc:	6030      	str	r0, [r6, #0]
10054fde:	2700      	movs	r7, #0
10054fe0:	7007      	strb	r7, [r0, #0]
10054fe2:	6830      	ldr	r0, [r6, #0]
10054fe4:	7047      	strb	r7, [r0, #1]
10054fe6:	6830      	ldr	r0, [r6, #0]
10054fe8:	7087      	strb	r7, [r0, #2]
10054fea:	6830      	ldr	r0, [r6, #0]
10054fec:	21e1      	movs	r1, #225	@ 0xe1
10054fee:	70c1      	strb	r1, [r0, #3]
10054ff0:	2005      	movs	r0, #5
10054ff2:	01c0      	lsls	r0, r0, #7
10054ff4:	6831      	ldr	r1, [r6, #0]
10054ff6:	8088      	strh	r0, [r1, #4]
10054ff8:	2030      	movs	r0, #48	@ 0x30
10054ffa:	8508      	strh	r0, [r1, #40]	@ 0x28
10054ffc:	ad0e      	add	r5, sp, #56	@ 0x38
10054ffe:	a90d      	add	r1, sp, #52	@ 0x34
10055000:	aa0c      	add	r2, sp, #48	@ 0x30
10055002:	4628      	mov	r0, r5
10055004:	f7fd fbdb 	bl	100527be <BLEPLAT_GetPartInfo>
10055008:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005500a:	0200      	lsls	r0, r0, #8
1005500c:	7829      	ldrb	r1, [r5, #0]
1005500e:	0109      	lsls	r1, r1, #4
10055010:	4301      	orrs	r1, r0
10055012:	980d      	ldr	r0, [sp, #52]	@ 0x34
10055014:	0300      	lsls	r0, r0, #12
10055016:	4308      	orrs	r0, r1
10055018:	1d00      	adds	r0, r0, #4
1005501a:	6831      	ldr	r1, [r6, #0]
1005501c:	8548      	strh	r0, [r1, #42]	@ 0x2a
1005501e:	2118      	movs	r1, #24
10055020:	4620      	mov	r0, r4
10055022:	f00b fe5b 	bl	10060cdc <csmem_mem_0_assign>
10055026:	4920      	ldr	r1, [pc, #128]	@ (100550a8 <__arm_cp.1_2>)
10055028:	6008      	str	r0, [r1, #0]
1005502a:	7507      	strb	r7, [r0, #20]
1005502c:	f00d fbee 	bl	1006280c <tsk_init>
10055030:	981c      	ldr	r0, [sp, #112]	@ 0x70
10055032:	9006      	str	r0, [sp, #24]
10055034:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
10055036:	9405      	str	r4, [sp, #20]
10055038:	981a      	ldr	r0, [sp, #104]	@ 0x68
1005503a:	9004      	str	r0, [sp, #16]
1005503c:	9819      	ldr	r0, [sp, #100]	@ 0x64
1005503e:	9003      	str	r0, [sp, #12]
10055040:	9818      	ldr	r0, [sp, #96]	@ 0x60
10055042:	9002      	str	r0, [sp, #8]
10055044:	9817      	ldr	r0, [sp, #92]	@ 0x5c
10055046:	9001      	str	r0, [sp, #4]
10055048:	9d15      	ldr	r5, [sp, #84]	@ 0x54
1005504a:	9500      	str	r5, [sp, #0]
1005504c:	9808      	ldr	r0, [sp, #32]
1005504e:	990a      	ldr	r1, [sp, #40]	@ 0x28
10055050:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10055052:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10055054:	f7f9 ff9b 	bl	1004ef8e <LL_init_ucfg>
10055058:	f7f9 feae 	bl	1004edb8 <MBM_init_ucfg>
1005505c:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
1005505e:	2c01      	cmp	r4, #1
10055060:	d101      	bne.n	10055066 <BlueNRG_Stack_Initialize_Layers+0xae>
10055062:	f7f9 fe21 	bl	1004eca8 <ACL_pkt_init_ucfg>
10055066:	f000 f98b 	bl	10055380 <Events_Process_init>
1005506a:	2f01      	cmp	r7, #1
1005506c:	d101      	bne.n	10055072 <BlueNRG_Stack_Initialize_Layers+0xba>
1005506e:	f000 f8bb 	bl	100551e8 <log_init_ucfg_weak>
10055072:	6830      	ldr	r0, [r6, #0]
10055074:	212c      	movs	r1, #44	@ 0x2c
10055076:	5c40      	ldrb	r0, [r0, r1]
10055078:	07c0      	lsls	r0, r0, #31
1005507a:	d10e      	bne.n	1005509a <BlueNRG_Stack_Initialize_Layers+0xe2>
1005507c:	2c01      	cmp	r4, #1
1005507e:	d106      	bne.n	1005508e <BlueNRG_Stack_Initialize_Layers+0xd6>
10055080:	9816      	ldr	r0, [sp, #88]	@ 0x58
10055082:	f7f9 febe 	bl	1004ee02 <L2C_init_ucfg>
10055086:	f7f9 ffde 	bl	1004f046 <smp_init_ucfg>
1005508a:	f7f9 ffe3 	bl	1004f054 <GAT_att_cmn_init_ucfg>
1005508e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10055090:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10055092:	462a      	mov	r2, r5
10055094:	4623      	mov	r3, r4
10055096:	f000 ff03 	bl	10055ea0 <GAP_init_context>
1005509a:	b00f      	add	sp, #60	@ 0x3c
1005509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005509e:	46c0      	nop			@ (mov r8, r8)

100550a0 <__arm_cp.1_0>:
100550a0:	20002ae4 	.word	0x20002ae4

100550a4 <__arm_cp.1_1>:
100550a4:	20002a7c 	.word	0x20002a7c

100550a8 <__arm_cp.1_2>:
100550a8:	20002b24 	.word	0x20002b24

100550ac <_BlueNRG_Stack_Initialization>:
100550ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100550ae:	b095      	sub	sp, #84	@ 0x54
100550b0:	2001      	movs	r0, #1
100550b2:	0481      	lsls	r1, r0, #18
100550b4:	9114      	str	r1, [sp, #80]	@ 0x50
100550b6:	482e      	ldr	r0, [pc, #184]	@ (10055170 <__arm_cp.2_0>)
100550b8:	6001      	str	r1, [r0, #0]
100550ba:	f3bf 8f4f 	dsb	sy
100550be:	f3bf 8f6f 	isb	sy
100550c2:	f7fe fbbb 	bl	1005383c <BLEPLAT_CNTR_GlobDisableBlue>
100550c6:	f7fd fc55 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
100550ca:	2000      	movs	r0, #0
100550cc:	9012      	str	r0, [sp, #72]	@ 0x48
100550ce:	43c0      	mvns	r0, r0
100550d0:	f7fe fba0 	bl	10053814 <BLEPLAT_CNTR_ClearInterrupt>
100550d4:	f004 fade 	bl	10059694 <data_length_extension_csr_ucfg_weak>
100550d8:	9013      	str	r0, [sp, #76]	@ 0x4c
100550da:	f7f9 fdd5 	bl	1004ec88 <phy_upd_csr_ucfg>
100550de:	9011      	str	r0, [sp, #68]	@ 0x44
100550e0:	f00a fe64 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
100550e4:	9010      	str	r0, [sp, #64]	@ 0x40
100550e6:	f006 fd2c 	bl	1005bb42 <llc_priv_controller_privacy_csr_ucfg_weak>
100550ea:	900f      	str	r0, [sp, #60]	@ 0x3c
100550ec:	f00d f98f 	bl	1006240e <secure_connections_csr_ucfg_weak>
100550f0:	f004 fad6 	bl	100596a0 <scan_csr_ucfg_weak>
100550f4:	900e      	str	r0, [sp, #56]	@ 0x38
100550f6:	f004 fc99 	bl	10059a2c <l2c_cos_csr_ucfg_weak>
100550fa:	900d      	str	r0, [sp, #52]	@ 0x34
100550fc:	f006 fd18 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10055100:	900c      	str	r0, [sp, #48]	@ 0x30
10055102:	f006 fd17 	bl	1005bb34 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10055106:	900b      	str	r0, [sp, #44]	@ 0x2c
10055108:	f004 fa68 	bl	100595dc <cte_csr_ucfg_weak>
1005510c:	4604      	mov	r4, r0
1005510e:	f004 fac3 	bl	10059698 <pcl_csr_ucfg_weak>
10055112:	4605      	mov	r5, r0
10055114:	f7f9 fdc0 	bl	1004ec98 <conn_supp_csr_ucfg>
10055118:	4606      	mov	r6, r0
1005511a:	f004 f96a 	bl	100593f2 <chc_csr_ucfg_weak>
1005511e:	4607      	mov	r7, r0
10055120:	f000 f865 	bl	100551ee <log_csr_ucfg_weak>
10055124:	b2c0      	uxtb	r0, r0
10055126:	b2f9      	uxtb	r1, r7
10055128:	9108      	str	r1, [sp, #32]
1005512a:	9009      	str	r0, [sp, #36]	@ 0x24
1005512c:	b2f0      	uxtb	r0, r6
1005512e:	b2e9      	uxtb	r1, r5
10055130:	b2e2      	uxtb	r2, r4
10055132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
10055134:	b2db      	uxtb	r3, r3
10055136:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10055138:	b2e4      	uxtb	r4, r4
1005513a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005513c:	b2ed      	uxtb	r5, r5
1005513e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
10055140:	b2f6      	uxtb	r6, r6
10055142:	9f12      	ldr	r7, [sp, #72]	@ 0x48
10055144:	9700      	str	r7, [sp, #0]
10055146:	9601      	str	r6, [sp, #4]
10055148:	9502      	str	r5, [sp, #8]
1005514a:	9403      	str	r4, [sp, #12]
1005514c:	9304      	str	r3, [sp, #16]
1005514e:	9205      	str	r2, [sp, #20]
10055150:	9106      	str	r1, [sp, #24]
10055152:	9007      	str	r0, [sp, #28]
10055154:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10055156:	b2c0      	uxtb	r0, r0
10055158:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005515a:	b2c9      	uxtb	r1, r1
1005515c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005515e:	b2d3      	uxtb	r3, r2
10055160:	9a10      	ldr	r2, [sp, #64]	@ 0x40
10055162:	f7ff ff29 	bl	10054fb8 <BlueNRG_Stack_Initialize_Layers>
10055166:	4803      	ldr	r0, [pc, #12]	@ (10055174 <__arm_cp.2_1>)
10055168:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005516a:	6001      	str	r1, [r0, #0]
1005516c:	b015      	add	sp, #84	@ 0x54
1005516e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10055170 <__arm_cp.2_0>:
10055170:	e000e180 	.word	0xe000e180

10055174 <__arm_cp.2_1>:
10055174:	e000e100 	.word	0xe000e100

10055178 <BLE_STACK_Init>:
10055178:	b5b0      	push	{r4, r5, r7, lr}
1005517a:	4605      	mov	r5, r0
1005517c:	7ac0      	ldrb	r0, [r0, #11]
1005517e:	2412      	movs	r4, #18
10055180:	2880      	cmp	r0, #128	@ 0x80
10055182:	d829      	bhi.n	100551d8 <BLE_STACK_Init+0x60>
10055184:	8c29      	ldrh	r1, [r5, #32]
10055186:	2917      	cmp	r1, #23
10055188:	d326      	bcc.n	100551d8 <BLE_STACK_Init+0x60>
1005518a:	4814      	ldr	r0, [pc, #80]	@ (100551dc <__arm_cp.3_0>)
1005518c:	1d82      	adds	r2, r0, #6
1005518e:	4291      	cmp	r1, r2
10055190:	d822      	bhi.n	100551d8 <BLE_STACK_Init+0x60>
10055192:	8a29      	ldrh	r1, [r5, #16]
10055194:	2917      	cmp	r1, #23
10055196:	d31f      	bcc.n	100551d8 <BLE_STACK_Init+0x60>
10055198:	4281      	cmp	r1, r0
1005519a:	d81d      	bhi.n	100551d8 <BLE_STACK_Init+0x60>
1005519c:	7ea8      	ldrb	r0, [r5, #26]
1005519e:	2800      	cmp	r0, #0
100551a0:	d01a      	beq.n	100551d8 <BLE_STACK_Init+0x60>
100551a2:	f006 fcc7 	bl	1005bb34 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100551a6:	2800      	cmp	r0, #0
100551a8:	d008      	beq.n	100551bc <BLE_STACK_Init+0x44>
100551aa:	7ee8      	ldrb	r0, [r5, #27]
100551ac:	2800      	cmp	r0, #0
100551ae:	d013      	beq.n	100551d8 <BLE_STACK_Init+0x60>
100551b0:	2880      	cmp	r0, #128	@ 0x80
100551b2:	d811      	bhi.n	100551d8 <BLE_STACK_Init+0x60>
100551b4:	7f28      	ldrb	r0, [r5, #28]
100551b6:	1e40      	subs	r0, r0, #1
100551b8:	280e      	cmp	r0, #14
100551ba:	d80d      	bhi.n	100551d8 <BLE_STACK_Init+0x60>
100551bc:	4808      	ldr	r0, [pc, #32]	@ (100551e0 <__arm_cp.3_1>)
100551be:	2234      	movs	r2, #52	@ 0x34
100551c0:	4629      	mov	r1, r5
100551c2:	f7fd facb 	bl	1005275c <BLEPLAT_MemCpy>
100551c6:	f00b ff23 	bl	10061010 <BlueNRG_Stack_Initialize_RAM_check>
100551ca:	2800      	cmp	r0, #0
100551cc:	d403      	bmi.n	100551d6 <BLE_STACK_Init+0x5e>
100551ce:	f7ff ff6d 	bl	100550ac <_BlueNRG_Stack_Initialization>
100551d2:	2400      	movs	r4, #0
100551d4:	e000      	b.n	100551d8 <BLE_STACK_Init+0x60>
100551d6:	2487      	movs	r4, #135	@ 0x87
100551d8:	4620      	mov	r0, r4
100551da:	bdb0      	pop	{r4, r5, r7, pc}

100551dc <__arm_cp.3_0>:
100551dc:	000003fa 	.word	0x000003fa

100551e0 <__arm_cp.3_1>:
100551e0:	20002ae4 	.word	0x20002ae4

100551e4 <log_verbosity_set_ucfg_weak>:
100551e4:	2000      	movs	r0, #0
100551e6:	4770      	bx	lr

100551e8 <log_init_ucfg_weak>:
100551e8:	4770      	bx	lr

100551ea <log_notify_stu_ucfg_weak>:
100551ea:	4770      	bx	lr

100551ec <log_notify_us_flush_ucfg_weak>:
100551ec:	4770      	bx	lr

100551ee <log_csr_ucfg_weak>:
100551ee:	2000      	movs	r0, #0
100551f0:	4770      	bx	lr
	...

100551f4 <aci_event_fifo_push_header>:
100551f4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100551f6:	4615      	mov	r5, r2
100551f8:	460c      	mov	r4, r1
100551fa:	4606      	mov	r6, r0
100551fc:	0608      	lsls	r0, r1, #24
100551fe:	d414      	bmi.n	1005522a <aci_event_fifo_push_header+0x36>
10055200:	aa02      	add	r2, sp, #8
10055202:	af01      	add	r7, sp, #4
10055204:	4630      	mov	r0, r6
10055206:	4619      	mov	r1, r3
10055208:	463b      	mov	r3, r7
1005520a:	f000 f853 	bl	100552b4 <fifoBuf_getFreeHeader>
1005520e:	2800      	cmp	r0, #0
10055210:	d021      	beq.n	10055256 <aci_event_fifo_push_header+0x62>
10055212:	0660      	lsls	r0, r4, #25
10055214:	d438      	bmi.n	10055288 <aci_event_fifo_push_header+0x94>
10055216:	9802      	ldr	r0, [sp, #8]
10055218:	7881      	ldrb	r1, [r0, #2]
1005521a:	22fc      	movs	r2, #252	@ 0xfc
1005521c:	400a      	ands	r2, r1
1005521e:	7082      	strb	r2, [r0, #2]
10055220:	9901      	ldr	r1, [sp, #4]
10055222:	8001      	strh	r1, [r0, #0]
10055224:	8071      	strh	r1, [r6, #2]
10055226:	2701      	movs	r7, #1
10055228:	e02f      	b.n	1005528a <aci_event_fifo_push_header+0x96>
1005522a:	f3ef 8010 	mrs	r0, PRIMASK
1005522e:	b672      	cpsid	i
10055230:	aa02      	add	r2, sp, #8
10055232:	af01      	add	r7, sp, #4
10055234:	4630      	mov	r0, r6
10055236:	4619      	mov	r1, r3
10055238:	463b      	mov	r3, r7
1005523a:	f000 f83b 	bl	100552b4 <fifoBuf_getFreeHeader>
1005523e:	2800      	cmp	r0, #0
10055240:	d00b      	beq.n	1005525a <aci_event_fifo_push_header+0x66>
10055242:	9902      	ldr	r1, [sp, #8]
10055244:	788a      	ldrb	r2, [r1, #2]
10055246:	23fc      	movs	r3, #252	@ 0xfc
10055248:	4013      	ands	r3, r2
1005524a:	708b      	strb	r3, [r1, #2]
1005524c:	9a01      	ldr	r2, [sp, #4]
1005524e:	800a      	strh	r2, [r1, #0]
10055250:	8072      	strh	r2, [r6, #2]
10055252:	2701      	movs	r7, #1
10055254:	e002      	b.n	1005525c <aci_event_fifo_push_header+0x68>
10055256:	2700      	movs	r7, #0
10055258:	e003      	b.n	10055262 <aci_event_fifo_push_header+0x6e>
1005525a:	2700      	movs	r7, #0
1005525c:	b662      	cpsie	i
1005525e:	2800      	cmp	r0, #0
10055260:	d113      	bne.n	1005528a <aci_event_fifo_push_header+0x96>
10055262:	f3ef 8010 	mrs	r0, PRIMASK
10055266:	b672      	cpsid	i
10055268:	06a0      	lsls	r0, r4, #26
1005526a:	d40a      	bmi.n	10055282 <aci_event_fifo_push_header+0x8e>
1005526c:	4810      	ldr	r0, [pc, #64]	@ (100552b0 <__arm_cp.0_0>)
1005526e:	6800      	ldr	r0, [r0, #0]
10055270:	6801      	ldr	r1, [r0, #0]
10055272:	2208      	movs	r2, #8
10055274:	430a      	orrs	r2, r1
10055276:	6002      	str	r2, [r0, #0]
10055278:	2000      	movs	r0, #0
1005527a:	f00d fb05 	bl	10062888 <tsk_notify_idx>
1005527e:	f7fc fc86 	bl	10051b8e <BLE_STACK_ProcessRequest>
10055282:	b662      	cpsie	i
10055284:	2600      	movs	r6, #0
10055286:	e00a      	b.n	1005529e <aci_event_fifo_push_header+0xaa>
10055288:	2700      	movs	r7, #0
1005528a:	9e02      	ldr	r6, [sp, #8]
1005528c:	70f5      	strb	r5, [r6, #3]
1005528e:	00a0      	lsls	r0, r4, #2
10055290:	2160      	movs	r1, #96	@ 0x60
10055292:	4001      	ands	r1, r0
10055294:	78b0      	ldrb	r0, [r6, #2]
10055296:	2203      	movs	r2, #3
10055298:	4002      	ands	r2, r0
1005529a:	1850      	adds	r0, r2, r1
1005529c:	70b0      	strb	r0, [r6, #2]
1005529e:	2f00      	cmp	r7, #0
100552a0:	d004      	beq.n	100552ac <aci_event_fifo_push_header+0xb8>
100552a2:	2000      	movs	r0, #0
100552a4:	f00d faf0 	bl	10062888 <tsk_notify_idx>
100552a8:	f7fc fc71 	bl	10051b8e <BLE_STACK_ProcessRequest>
100552ac:	4630      	mov	r0, r6
100552ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100552b0 <__arm_cp.0_0>:
100552b0:	20002a80 	.word	0x20002a80

100552b4 <fifoBuf_getFreeHeader>:
100552b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100552b6:	9200      	str	r2, [sp, #0]
100552b8:	8845      	ldrh	r5, [r0, #2]
100552ba:	08ac      	lsrs	r4, r5, #2
100552bc:	801c      	strh	r4, [r3, #0]
100552be:	1c49      	adds	r1, r1, #1
100552c0:	b28a      	uxth	r2, r1
100552c2:	18a6      	adds	r6, r4, r2
100552c4:	8887      	ldrh	r7, [r0, #4]
100552c6:	42be      	cmp	r6, r7
100552c8:	d900      	bls.n	100552cc <fifoBuf_getFreeHeader+0x18>
100552ca:	1b09      	subs	r1, r1, r4
100552cc:	190a      	adds	r2, r1, r4
100552ce:	0092      	lsls	r2, r2, #2
100552d0:	42be      	cmp	r6, r7
100552d2:	d900      	bls.n	100552d6 <fifoBuf_getFreeHeader+0x22>
100552d4:	1c6d      	adds	r5, r5, #1
100552d6:	2603      	movs	r6, #3
100552d8:	4035      	ands	r5, r6
100552da:	1952      	adds	r2, r2, r5
100552dc:	801a      	strh	r2, [r3, #0]
100552de:	00a3      	lsls	r3, r4, #2
100552e0:	181b      	adds	r3, r3, r0
100552e2:	3308      	adds	r3, #8
100552e4:	9c00      	ldr	r4, [sp, #0]
100552e6:	6023      	str	r3, [r4, #0]
100552e8:	b292      	uxth	r2, r2
100552ea:	8805      	ldrh	r5, [r0, #0]
100552ec:	1b52      	subs	r2, r2, r5
100552ee:	4617      	mov	r7, r2
100552f0:	4037      	ands	r7, r6
100552f2:	8884      	ldrh	r4, [r0, #4]
100552f4:	4367      	muls	r7, r4
100552f6:	4035      	ands	r5, r6
100552f8:	1952      	adds	r2, r2, r5
100552fa:	0892      	lsrs	r2, r2, #2
100552fc:	19d2      	adds	r2, r2, r7
100552fe:	b295      	uxth	r5, r2
10055300:	88c6      	ldrh	r6, [r0, #6]
10055302:	42b5      	cmp	r5, r6
10055304:	d900      	bls.n	10055308 <fifoBuf_getFreeHeader+0x54>
10055306:	80c2      	strh	r2, [r0, #6]
10055308:	42a5      	cmp	r5, r4
1005530a:	d80a      	bhi.n	10055322 <fifoBuf_getFreeHeader+0x6e>
1005530c:	b209      	sxth	r1, r1
1005530e:	2900      	cmp	r1, #0
10055310:	d507      	bpl.n	10055322 <fifoBuf_getFreeHeader+0x6e>
10055312:	7899      	ldrb	r1, [r3, #2]
10055314:	22fc      	movs	r2, #252	@ 0xfc
10055316:	400a      	ands	r2, r1
10055318:	1c51      	adds	r1, r2, #1
1005531a:	7099      	strb	r1, [r3, #2]
1005531c:	3008      	adds	r0, #8
1005531e:	9900      	ldr	r1, [sp, #0]
10055320:	6008      	str	r0, [r1, #0]
10055322:	42a5      	cmp	r5, r4
10055324:	d901      	bls.n	1005532a <fifoBuf_getFreeHeader+0x76>
10055326:	2000      	movs	r0, #0
10055328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005532a:	2001      	movs	r0, #1
1005532c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005532e <aci_event_fifo_push>:
1005532e:	b580      	push	{r7, lr}
10055330:	0640      	lsls	r0, r0, #25
10055332:	d405      	bmi.n	10055340 <aci_event_fifo_push+0x12>
10055334:	7888      	ldrb	r0, [r1, #2]
10055336:	22fc      	movs	r2, #252	@ 0xfc
10055338:	4002      	ands	r2, r0
1005533a:	1c90      	adds	r0, r2, #2
1005533c:	7088      	strb	r0, [r1, #2]
1005533e:	bd80      	pop	{r7, pc}
10055340:	4608      	mov	r0, r1
10055342:	f000 f801 	bl	10055348 <event_notify_cb>
10055346:	bd80      	pop	{r7, pc}

10055348 <event_notify_cb>:
10055348:	b580      	push	{r7, lr}
1005534a:	1d01      	adds	r1, r0, #4
1005534c:	78c2      	ldrb	r2, [r0, #3]
1005534e:	2a14      	cmp	r2, #20
10055350:	d804      	bhi.n	1005535c <event_notify_cb+0x14>
10055352:	6842      	ldr	r2, [r0, #4]
10055354:	7880      	ldrb	r0, [r0, #2]
10055356:	0880      	lsrs	r0, r0, #2
10055358:	4790      	blx	r2
1005535a:	bd80      	pop	{r7, pc}
1005535c:	2a3d      	cmp	r2, #61	@ 0x3d
1005535e:	d803      	bhi.n	10055368 <event_notify_cb+0x20>
10055360:	2000      	movs	r0, #0
10055362:	f000 f8e9 	bl	10055538 <hci_event_notify_cb>
10055366:	bd80      	pop	{r7, pc}
10055368:	2a3f      	cmp	r2, #63	@ 0x3f
1005536a:	d803      	bhi.n	10055374 <event_notify_cb+0x2c>
1005536c:	2000      	movs	r0, #0
1005536e:	f000 f8f5 	bl	1005555c <hci_rx_data_notify_cb>
10055372:	bd80      	pop	{r7, pc}
10055374:	2a60      	cmp	r2, #96	@ 0x60
10055376:	d802      	bhi.n	1005537e <event_notify_cb+0x36>
10055378:	2000      	movs	r0, #0
1005537a:	f000 f8e4 	bl	10055546 <hci_aci_event_notify_cb>
1005537e:	bd80      	pop	{r7, pc}

10055380 <Events_Process_init>:
10055380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055382:	2001      	movs	r0, #1
10055384:	211c      	movs	r1, #28
10055386:	4a29      	ldr	r2, [pc, #164]	@ (1005542c <__arm_cp.7_0>)
10055388:	4790      	blx	r2
1005538a:	4f29      	ldr	r7, [pc, #164]	@ (10055430 <__arm_cp.7_1>)
1005538c:	6038      	str	r0, [r7, #0]
1005538e:	4d29      	ldr	r5, [pc, #164]	@ (10055434 <__arm_cp.7_2>)
10055390:	8da8      	ldrh	r0, [r5, #44]	@ 0x2c
10055392:	1e40      	subs	r0, r0, #1
10055394:	2603      	movs	r6, #3
10055396:	4330      	orrs	r0, r6
10055398:	1c40      	adds	r0, r0, #1
1005539a:	0880      	lsrs	r0, r0, #2
1005539c:	1cc0      	adds	r0, r0, #3
1005539e:	2404      	movs	r4, #4
100553a0:	4621      	mov	r1, r4
100553a2:	4a22      	ldr	r2, [pc, #136]	@ (1005542c <__arm_cp.7_0>)
100553a4:	4790      	blx	r2
100553a6:	6839      	ldr	r1, [r7, #0]
100553a8:	6048      	str	r0, [r1, #4]
100553aa:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
100553ac:	1e40      	subs	r0, r0, #1
100553ae:	4330      	orrs	r0, r6
100553b0:	1c40      	adds	r0, r0, #1
100553b2:	0880      	lsrs	r0, r0, #2
100553b4:	1cc0      	adds	r0, r0, #3
100553b6:	4621      	mov	r1, r4
100553b8:	4d1c      	ldr	r5, [pc, #112]	@ (1005542c <__arm_cp.7_0>)
100553ba:	47a8      	blx	r5
100553bc:	462a      	mov	r2, r5
100553be:	6839      	ldr	r1, [r7, #0]
100553c0:	6088      	str	r0, [r1, #8]
100553c2:	4d1c      	ldr	r5, [pc, #112]	@ (10055434 <__arm_cp.7_2>)
100553c4:	8e28      	ldrh	r0, [r5, #48]	@ 0x30
100553c6:	1e40      	subs	r0, r0, #1
100553c8:	4330      	orrs	r0, r6
100553ca:	1c40      	adds	r0, r0, #1
100553cc:	0880      	lsrs	r0, r0, #2
100553ce:	1cc0      	adds	r0, r0, #3
100553d0:	4621      	mov	r1, r4
100553d2:	4790      	blx	r2
100553d4:	6839      	ldr	r1, [r7, #0]
100553d6:	60c8      	str	r0, [r1, #12]
100553d8:	f7ff fc18 	bl	10054c0c <hal_radio_activity_state_init>
100553dc:	6838      	ldr	r0, [r7, #0]
100553de:	6842      	ldr	r2, [r0, #4]
100553e0:	2100      	movs	r1, #0
100553e2:	8011      	strh	r1, [r2, #0]
100553e4:	8051      	strh	r1, [r2, #2]
100553e6:	6883      	ldr	r3, [r0, #8]
100553e8:	8019      	strh	r1, [r3, #0]
100553ea:	80d1      	strh	r1, [r2, #6]
100553ec:	8daf      	ldrh	r7, [r5, #44]	@ 0x2c
100553ee:	1e7f      	subs	r7, r7, #1
100553f0:	4337      	orrs	r7, r6
100553f2:	1c7f      	adds	r7, r7, #1
100553f4:	08bf      	lsrs	r7, r7, #2
100553f6:	8097      	strh	r7, [r2, #4]
100553f8:	8059      	strh	r1, [r3, #2]
100553fa:	80d9      	strh	r1, [r3, #6]
100553fc:	8def      	ldrh	r7, [r5, #46]	@ 0x2e
100553fe:	1e7f      	subs	r7, r7, #1
10055400:	4337      	orrs	r7, r6
10055402:	1c7f      	adds	r7, r7, #1
10055404:	08bf      	lsrs	r7, r7, #2
10055406:	809f      	strh	r7, [r3, #4]
10055408:	68c7      	ldr	r7, [r0, #12]
1005540a:	8039      	strh	r1, [r7, #0]
1005540c:	6102      	str	r2, [r0, #16]
1005540e:	6143      	str	r3, [r0, #20]
10055410:	80f9      	strh	r1, [r7, #6]
10055412:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
10055414:	1e52      	subs	r2, r2, #1
10055416:	4332      	orrs	r2, r6
10055418:	1c52      	adds	r2, r2, #1
1005541a:	0892      	lsrs	r2, r2, #2
1005541c:	80ba      	strh	r2, [r7, #4]
1005541e:	8079      	strh	r1, [r7, #2]
10055420:	6187      	str	r7, [r0, #24]
10055422:	4622      	mov	r2, r4
10055424:	f7fd f9aa 	bl	1005277c <BLEPLAT_MemSet>
10055428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005542a:	46c0      	nop			@ (mov r8, r8)

1005542c <__arm_cp.7_0>:
1005542c:	10060cdd 	.word	0x10060cdd

10055430 <__arm_cp.7_1>:
10055430:	20002a80 	.word	0x20002a80

10055434 <__arm_cp.7_2>:
10055434:	20002ae4 	.word	0x20002ae4

10055438 <Events_Process_Q>:
10055438:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005543a:	4d3d      	ldr	r5, [pc, #244]	@ (10055530 <__arm_cp.8_0>)
1005543c:	6828      	ldr	r0, [r5, #0]
1005543e:	3010      	adds	r0, #16
10055440:	2100      	movs	r1, #0
10055442:	2906      	cmp	r1, #6
10055444:	d005      	beq.n	10055452 <Events_Process_Q+0x1a>
10055446:	c804      	ldmia	r0!, {r2}
10055448:	8852      	ldrh	r2, [r2, #2]
1005544a:	ab01      	add	r3, sp, #4
1005544c:	525a      	strh	r2, [r3, r1]
1005544e:	1c89      	adds	r1, r1, #2
10055450:	e7f7      	b.n	10055442 <Events_Process_Q+0xa>
10055452:	f3ef 8010 	mrs	r0, PRIMASK
10055456:	b672      	cpsid	i
10055458:	6828      	ldr	r0, [r5, #0]
1005545a:	6804      	ldr	r4, [r0, #0]
1005545c:	2700      	movs	r7, #0
1005545e:	6007      	str	r7, [r0, #0]
10055460:	b662      	cpsie	i
10055462:	07e0      	lsls	r0, r4, #31
10055464:	d002      	beq.n	1005546c <Events_Process_Q+0x34>
10055466:	2000      	movs	r0, #0
10055468:	f000 fc4a 	bl	10055d00 <hci_hardware_error_event_cb>
1005546c:	07a0      	lsls	r0, r4, #30
1005546e:	d502      	bpl.n	10055476 <Events_Process_Q+0x3e>
10055470:	2001      	movs	r0, #1
10055472:	f000 fc45 	bl	10055d00 <hci_hardware_error_event_cb>
10055476:	0760      	lsls	r0, r4, #29
10055478:	d502      	bpl.n	10055480 <Events_Process_Q+0x48>
1005547a:	2002      	movs	r0, #2
1005547c:	f000 fc40 	bl	10055d00 <hci_hardware_error_event_cb>
10055480:	0720      	lsls	r0, r4, #28
10055482:	d502      	bpl.n	1005548a <Events_Process_Q+0x52>
10055484:	2003      	movs	r0, #3
10055486:	f000 fc3b 	bl	10055d00 <hci_hardware_error_event_cb>
1005548a:	06e0      	lsls	r0, r4, #27
1005548c:	d54a      	bpl.n	10055524 <Events_Process_Q+0xec>
1005548e:	2004      	movs	r0, #4
10055490:	f000 fc36 	bl	10055d00 <hci_hardware_error_event_cb>
10055494:	e046      	b.n	10055524 <Events_Process_Q+0xec>
10055496:	0078      	lsls	r0, r7, #1
10055498:	a901      	add	r1, sp, #4
1005549a:	5a0e      	ldrh	r6, [r1, r0]
1005549c:	9700      	str	r7, [sp, #0]
1005549e:	00bf      	lsls	r7, r7, #2
100554a0:	6828      	ldr	r0, [r5, #0]
100554a2:	19c0      	adds	r0, r0, r7
100554a4:	6900      	ldr	r0, [r0, #16]
100554a6:	8801      	ldrh	r1, [r0, #0]
100554a8:	8802      	ldrh	r2, [r0, #0]
100554aa:	42b2      	cmp	r2, r6
100554ac:	d02a      	beq.n	10055504 <Events_Process_Q+0xcc>
100554ae:	0889      	lsrs	r1, r1, #2
100554b0:	1c89      	adds	r1, r1, #2
100554b2:	0089      	lsls	r1, r1, #2
100554b4:	1844      	adds	r4, r0, r1
100554b6:	78a1      	ldrb	r1, [r4, #2]
100554b8:	2203      	movs	r2, #3
100554ba:	400a      	ands	r2, r1
100554bc:	2a01      	cmp	r2, #1
100554be:	d002      	beq.n	100554c6 <Events_Process_Q+0x8e>
100554c0:	2a00      	cmp	r2, #0
100554c2:	d103      	bne.n	100554cc <Events_Process_Q+0x94>
100554c4:	e01e      	b.n	10055504 <Events_Process_Q+0xcc>
100554c6:	7a81      	ldrb	r1, [r0, #10]
100554c8:	3008      	adds	r0, #8
100554ca:	4604      	mov	r4, r0
100554cc:	0648      	lsls	r0, r1, #25
100554ce:	d403      	bmi.n	100554d8 <Events_Process_Q+0xa0>
100554d0:	4620      	mov	r0, r4
100554d2:	f7ff ff39 	bl	10055348 <event_notify_cb>
100554d6:	e00a      	b.n	100554ee <Events_Process_Q+0xb6>
100554d8:	78e0      	ldrb	r0, [r4, #3]
100554da:	2813      	cmp	r0, #19
100554dc:	d207      	bcs.n	100554ee <Events_Process_Q+0xb6>
100554de:	0080      	lsls	r0, r0, #2
100554e0:	4914      	ldr	r1, [pc, #80]	@ (10055534 <__arm_cp.8_1>)
100554e2:	580a      	ldr	r2, [r1, r0]
100554e4:	1d21      	adds	r1, r4, #4
100554e6:	4620      	mov	r0, r4
100554e8:	4790      	blx	r2
100554ea:	2800      	cmp	r0, #0
100554ec:	d105      	bne.n	100554fa <Events_Process_Q+0xc2>
100554ee:	6828      	ldr	r0, [r5, #0]
100554f0:	19c0      	adds	r0, r0, r7
100554f2:	6900      	ldr	r0, [r0, #16]
100554f4:	8821      	ldrh	r1, [r4, #0]
100554f6:	8001      	strh	r1, [r0, #0]
100554f8:	e7d5      	b.n	100554a6 <Events_Process_Q+0x6e>
100554fa:	2000      	movs	r0, #0
100554fc:	f00d f9c4 	bl	10062888 <tsk_notify_idx>
10055500:	f7fc fb45 	bl	10051b8e <BLE_STACK_ProcessRequest>
10055504:	f3ef 8010 	mrs	r0, PRIMASK
10055508:	b672      	cpsid	i
1005550a:	6828      	ldr	r0, [r5, #0]
1005550c:	19c0      	adds	r0, r0, r7
1005550e:	6900      	ldr	r0, [r0, #16]
10055510:	8841      	ldrh	r1, [r0, #2]
10055512:	8802      	ldrh	r2, [r0, #0]
10055514:	4291      	cmp	r1, r2
10055516:	d102      	bne.n	1005551e <Events_Process_Q+0xe6>
10055518:	2100      	movs	r1, #0
1005551a:	8001      	strh	r1, [r0, #0]
1005551c:	8041      	strh	r1, [r0, #2]
1005551e:	b662      	cpsie	i
10055520:	9f00      	ldr	r7, [sp, #0]
10055522:	1c7f      	adds	r7, r7, #1
10055524:	2f03      	cmp	r7, #3
10055526:	d1b6      	bne.n	10055496 <Events_Process_Q+0x5e>
10055528:	f7ff fb7a 	bl	10054c20 <hal_radio_activity_state_cb_check>
1005552c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005552e:	46c0      	nop			@ (mov r8, r8)

10055530 <__arm_cp.8_0>:
10055530:	20002a80 	.word	0x20002a80

10055534 <__arm_cp.8_1>:
10055534:	100696ec 	.word	0x100696ec

10055538 <hci_event_notify_cb>:
10055538:	b580      	push	{r7, lr}
1005553a:	4608      	mov	r0, r1
1005553c:	7889      	ldrb	r1, [r1, #2]
1005553e:	1cc9      	adds	r1, r1, #3
10055540:	f7f9 fada 	bl	1004eaf8 <BLE_STACK_Event>
10055544:	bd80      	pop	{r7, pc}

10055546 <hci_aci_event_notify_cb>:
10055546:	b580      	push	{r7, lr}
10055548:	4608      	mov	r0, r1
1005554a:	7889      	ldrb	r1, [r1, #2]
1005554c:	78c2      	ldrb	r2, [r0, #3]
1005554e:	0212      	lsls	r2, r2, #8
10055550:	1851      	adds	r1, r2, r1
10055552:	1d09      	adds	r1, r1, #4
10055554:	b289      	uxth	r1, r1
10055556:	f7f9 facf 	bl	1004eaf8 <BLE_STACK_Event>
1005555a:	bd80      	pop	{r7, pc}

1005555c <hci_rx_data_notify_cb>:
1005555c:	b580      	push	{r7, lr}
1005555e:	4608      	mov	r0, r1
10055560:	78c9      	ldrb	r1, [r1, #3]
10055562:	7902      	ldrb	r2, [r0, #4]
10055564:	0212      	lsls	r2, r2, #8
10055566:	1851      	adds	r1, r2, r1
10055568:	1d49      	adds	r1, r1, #5
1005556a:	b289      	uxth	r1, r1
1005556c:	f7f9 fac4 	bl	1004eaf8 <BLE_STACK_Event>
10055570:	bd80      	pop	{r7, pc}
	...

10055574 <hci_disconnection_complete_event_int_cb>:
10055574:	b5b0      	push	{r4, r5, r7, lr}
10055576:	460d      	mov	r5, r1
10055578:	4604      	mov	r4, r0
1005557a:	7908      	ldrb	r0, [r1, #4]
1005557c:	7949      	ldrb	r1, [r1, #5]
1005557e:	0209      	lsls	r1, r1, #8
10055580:	1808      	adds	r0, r1, r0
10055582:	f001 fb3f 	bl	10056c04 <GAT_att_cmn_disconnection>
10055586:	7928      	ldrb	r0, [r5, #4]
10055588:	7969      	ldrb	r1, [r5, #5]
1005558a:	0209      	lsls	r1, r1, #8
1005558c:	1808      	adds	r0, r1, r0
1005558e:	f00c feff 	bl	10062390 <smp_sap_hci_disconnection_complete_evt_hndl>
10055592:	7928      	ldrb	r0, [r5, #4]
10055594:	7969      	ldrb	r1, [r5, #5]
10055596:	0209      	lsls	r1, r1, #8
10055598:	1808      	adds	r0, r1, r0
1005559a:	f004 fd1b 	bl	10059fd4 <l2c_sap_hci_disconnection_complete_evt_hndl>
1005559e:	f000 feba 	bl	10056316 <GAP_hci_disconnection_complete_evt_hndl>
100555a2:	7928      	ldrb	r0, [r5, #4]
100555a4:	7969      	ldrb	r1, [r5, #5]
100555a6:	0209      	lsls	r1, r1, #8
100555a8:	1808      	adds	r0, r1, r0
100555aa:	f7ff fcdf 	bl	10054f6c <ACL_pkt_disconnection>
100555ae:	4808      	ldr	r0, [pc, #32]	@ (100555d0 <__arm_cp.14_0>)
100555b0:	6800      	ldr	r0, [r0, #0]
100555b2:	2136      	movs	r1, #54	@ 0x36
100555b4:	5c40      	ldrb	r0, [r0, r1]
100555b6:	06c0      	lsls	r0, r0, #27
100555b8:	d401      	bmi.n	100555be <hci_disconnection_complete_event_int_cb+0x4a>
100555ba:	2000      	movs	r0, #0
100555bc:	bdb0      	pop	{r4, r5, r7, pc}
100555be:	2015      	movs	r0, #21
100555c0:	70e0      	strb	r0, [r4, #3]
100555c2:	78a0      	ldrb	r0, [r4, #2]
100555c4:	21bf      	movs	r1, #191	@ 0xbf
100555c6:	4001      	ands	r1, r0
100555c8:	70a1      	strb	r1, [r4, #2]
100555ca:	2084      	movs	r0, #132	@ 0x84
100555cc:	bdb0      	pop	{r4, r5, r7, pc}
100555ce:	46c0      	nop			@ (mov r8, r8)

100555d0 <__arm_cp.14_0>:
100555d0:	20002ad0 	.word	0x20002ad0

100555d4 <hci_encryption_change_event_int_cb>:
100555d4:	b510      	push	{r4, lr}
100555d6:	4604      	mov	r4, r0
100555d8:	7908      	ldrb	r0, [r1, #4]
100555da:	794a      	ldrb	r2, [r1, #5]
100555dc:	0212      	lsls	r2, r2, #8
100555de:	1812      	adds	r2, r2, r0
100555e0:	78c9      	ldrb	r1, [r1, #3]
100555e2:	2006      	movs	r0, #6
100555e4:	f00c fe5a 	bl	1006229c <smp_sap_hci_encryption_change_evt_hndl>
100555e8:	4807      	ldr	r0, [pc, #28]	@ (10055608 <__arm_cp.16_0>)
100555ea:	6800      	ldr	r0, [r0, #0]
100555ec:	2136      	movs	r1, #54	@ 0x36
100555ee:	5640      	ldrsb	r0, [r0, r1]
100555f0:	2800      	cmp	r0, #0
100555f2:	d401      	bmi.n	100555f8 <hci_encryption_change_event_int_cb+0x24>
100555f4:	2000      	movs	r0, #0
100555f6:	bd10      	pop	{r4, pc}
100555f8:	2016      	movs	r0, #22
100555fa:	70e0      	strb	r0, [r4, #3]
100555fc:	78a0      	ldrb	r0, [r4, #2]
100555fe:	21bf      	movs	r1, #191	@ 0xbf
10055600:	4001      	ands	r1, r0
10055602:	70a1      	strb	r1, [r4, #2]
10055604:	2084      	movs	r0, #132	@ 0x84
10055606:	bd10      	pop	{r4, pc}

10055608 <__arm_cp.16_0>:
10055608:	20002ad0 	.word	0x20002ad0

1005560c <hci_encryption_key_refresh_complete_event_int_cb>:
1005560c:	b510      	push	{r4, lr}
1005560e:	4604      	mov	r4, r0
10055610:	7908      	ldrb	r0, [r1, #4]
10055612:	794a      	ldrb	r2, [r1, #5]
10055614:	0212      	lsls	r2, r2, #8
10055616:	1812      	adds	r2, r2, r0
10055618:	78c9      	ldrb	r1, [r1, #3]
1005561a:	2007      	movs	r0, #7
1005561c:	f00c fe3e 	bl	1006229c <smp_sap_hci_encryption_change_evt_hndl>
10055620:	4807      	ldr	r0, [pc, #28]	@ (10055640 <__arm_cp.18_0>)
10055622:	6800      	ldr	r0, [r0, #0]
10055624:	213b      	movs	r1, #59	@ 0x3b
10055626:	5640      	ldrsb	r0, [r0, r1]
10055628:	2800      	cmp	r0, #0
1005562a:	d401      	bmi.n	10055630 <hci_encryption_key_refresh_complete_event_int_cb+0x24>
1005562c:	2000      	movs	r0, #0
1005562e:	bd10      	pop	{r4, pc}
10055630:	2017      	movs	r0, #23
10055632:	70e0      	strb	r0, [r4, #3]
10055634:	78a0      	ldrb	r0, [r4, #2]
10055636:	21bf      	movs	r1, #191	@ 0xbf
10055638:	4001      	ands	r1, r0
1005563a:	70a1      	strb	r1, [r4, #2]
1005563c:	2084      	movs	r0, #132	@ 0x84
1005563e:	bd10      	pop	{r4, pc}

10055640 <__arm_cp.18_0>:
10055640:	20002ad0 	.word	0x20002ad0

10055644 <hci_le_connection_complete_event_int_cb>:
10055644:	b5b0      	push	{r4, r5, r7, lr}
10055646:	460d      	mov	r5, r1
10055648:	4604      	mov	r4, r0
1005564a:	7908      	ldrb	r0, [r1, #4]
1005564c:	2800      	cmp	r0, #0
1005564e:	d11d      	bne.n	1005568c <hci_le_connection_complete_event_int_cb+0x48>
10055650:	7968      	ldrb	r0, [r5, #5]
10055652:	79a9      	ldrb	r1, [r5, #6]
10055654:	0209      	lsls	r1, r1, #8
10055656:	1808      	adds	r0, r1, r0
10055658:	f7ff fc64 	bl	10054f24 <ACL_pkt_connection>
1005565c:	7968      	ldrb	r0, [r5, #5]
1005565e:	79a9      	ldrb	r1, [r5, #6]
10055660:	0209      	lsls	r1, r1, #8
10055662:	1808      	adds	r0, r1, r0
10055664:	7a2a      	ldrb	r2, [r5, #8]
10055666:	79e9      	ldrb	r1, [r5, #7]
10055668:	462b      	mov	r3, r5
1005566a:	3309      	adds	r3, #9
1005566c:	f00c fcd4 	bl	10062018 <smp_sap_hci_le_connection_complete_evt_hndl>
10055670:	7968      	ldrb	r0, [r5, #5]
10055672:	79a9      	ldrb	r1, [r5, #6]
10055674:	0209      	lsls	r1, r1, #8
10055676:	1808      	adds	r0, r1, r0
10055678:	f001 faa4 	bl	10056bc4 <GAT_att_cmn_connection>
1005567c:	7968      	ldrb	r0, [r5, #5]
1005567e:	79a9      	ldrb	r1, [r5, #6]
10055680:	0209      	lsls	r1, r1, #8
10055682:	1808      	adds	r0, r1, r0
10055684:	79e9      	ldrb	r1, [r5, #7]
10055686:	f004 fc95 	bl	10059fb4 <l2c_sap_hci_le_connection_complete_evt_hndl>
1005568a:	7928      	ldrb	r0, [r5, #4]
1005568c:	7969      	ldrb	r1, [r5, #5]
1005568e:	79aa      	ldrb	r2, [r5, #6]
10055690:	0212      	lsls	r2, r2, #8
10055692:	1851      	adds	r1, r2, r1
10055694:	79ea      	ldrb	r2, [r5, #7]
10055696:	f000 fe3f 	bl	10056318 <GAP_hci_le_connection_complete_evt_hndl>
1005569a:	4809      	ldr	r0, [pc, #36]	@ (100556c0 <__arm_cp.20_0>)
1005569c:	6801      	ldr	r1, [r0, #0]
1005569e:	203d      	movs	r0, #61	@ 0x3d
100556a0:	5c0a      	ldrb	r2, [r1, r0]
100556a2:	2000      	movs	r0, #0
100556a4:	0692      	lsls	r2, r2, #26
100556a6:	d50a      	bpl.n	100556be <hci_le_connection_complete_event_int_cb+0x7a>
100556a8:	313d      	adds	r1, #61	@ 0x3d
100556aa:	7a49      	ldrb	r1, [r1, #9]
100556ac:	07c9      	lsls	r1, r1, #31
100556ae:	d006      	beq.n	100556be <hci_le_connection_complete_event_int_cb+0x7a>
100556b0:	2018      	movs	r0, #24
100556b2:	70e0      	strb	r0, [r4, #3]
100556b4:	78a0      	ldrb	r0, [r4, #2]
100556b6:	21bf      	movs	r1, #191	@ 0xbf
100556b8:	4001      	ands	r1, r0
100556ba:	70a1      	strb	r1, [r4, #2]
100556bc:	2084      	movs	r0, #132	@ 0x84
100556be:	bdb0      	pop	{r4, r5, r7, pc}

100556c0 <__arm_cp.20_0>:
100556c0:	20002ad0 	.word	0x20002ad0

100556c4 <hci_le_enhanced_connection_complete_event_int_cb>:
100556c4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100556c6:	460d      	mov	r5, r1
100556c8:	4604      	mov	r4, r0
100556ca:	7908      	ldrb	r0, [r1, #4]
100556cc:	2800      	cmp	r0, #0
100556ce:	d123      	bne.n	10055718 <hci_le_enhanced_connection_complete_event_int_cb+0x54>
100556d0:	7968      	ldrb	r0, [r5, #5]
100556d2:	79a9      	ldrb	r1, [r5, #6]
100556d4:	0209      	lsls	r1, r1, #8
100556d6:	1808      	adds	r0, r1, r0
100556d8:	f7ff fc24 	bl	10054f24 <ACL_pkt_connection>
100556dc:	7a2a      	ldrb	r2, [r5, #8]
100556de:	79e9      	ldrb	r1, [r5, #7]
100556e0:	7968      	ldrb	r0, [r5, #5]
100556e2:	79ab      	ldrb	r3, [r5, #6]
100556e4:	462e      	mov	r6, r5
100556e6:	3615      	adds	r6, #21
100556e8:	462f      	mov	r7, r5
100556ea:	370f      	adds	r7, #15
100556ec:	9700      	str	r7, [sp, #0]
100556ee:	9601      	str	r6, [sp, #4]
100556f0:	021b      	lsls	r3, r3, #8
100556f2:	1818      	adds	r0, r3, r0
100556f4:	462b      	mov	r3, r5
100556f6:	3309      	adds	r3, #9
100556f8:	f00c fd28 	bl	1006214c <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>
100556fc:	7968      	ldrb	r0, [r5, #5]
100556fe:	79a9      	ldrb	r1, [r5, #6]
10055700:	0209      	lsls	r1, r1, #8
10055702:	1808      	adds	r0, r1, r0
10055704:	f001 fa5e 	bl	10056bc4 <GAT_att_cmn_connection>
10055708:	7968      	ldrb	r0, [r5, #5]
1005570a:	79a9      	ldrb	r1, [r5, #6]
1005570c:	0209      	lsls	r1, r1, #8
1005570e:	1808      	adds	r0, r1, r0
10055710:	79e9      	ldrb	r1, [r5, #7]
10055712:	f004 fc4f 	bl	10059fb4 <l2c_sap_hci_le_connection_complete_evt_hndl>
10055716:	7928      	ldrb	r0, [r5, #4]
10055718:	7969      	ldrb	r1, [r5, #5]
1005571a:	79aa      	ldrb	r2, [r5, #6]
1005571c:	0212      	lsls	r2, r2, #8
1005571e:	1851      	adds	r1, r2, r1
10055720:	79ea      	ldrb	r2, [r5, #7]
10055722:	f000 fdf9 	bl	10056318 <GAP_hci_le_connection_complete_evt_hndl>
10055726:	4809      	ldr	r0, [pc, #36]	@ (1005574c <__arm_cp.22_0>)
10055728:	6801      	ldr	r1, [r0, #0]
1005572a:	203d      	movs	r0, #61	@ 0x3d
1005572c:	5c0a      	ldrb	r2, [r1, r0]
1005572e:	2000      	movs	r0, #0
10055730:	0692      	lsls	r2, r2, #26
10055732:	d50a      	bpl.n	1005574a <hci_le_enhanced_connection_complete_event_int_cb+0x86>
10055734:	313d      	adds	r1, #61	@ 0x3d
10055736:	7a89      	ldrb	r1, [r1, #10]
10055738:	0789      	lsls	r1, r1, #30
1005573a:	d506      	bpl.n	1005574a <hci_le_enhanced_connection_complete_event_int_cb+0x86>
1005573c:	201c      	movs	r0, #28
1005573e:	70e0      	strb	r0, [r4, #3]
10055740:	78a0      	ldrb	r0, [r4, #2]
10055742:	21bf      	movs	r1, #191	@ 0xbf
10055744:	4001      	ands	r1, r0
10055746:	70a1      	strb	r1, [r4, #2]
10055748:	2084      	movs	r0, #132	@ 0x84
1005574a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005574c <__arm_cp.22_0>:
1005574c:	20002ad0 	.word	0x20002ad0

10055750 <hci_le_long_term_key_request_event_int_cb>:
10055750:	b570      	push	{r4, r5, r6, lr}
10055752:	4604      	mov	r4, r0
10055754:	4d14      	ldr	r5, [pc, #80]	@ (100557a8 <__arm_cp.24_0>)
10055756:	6828      	ldr	r0, [r5, #0]
10055758:	2636      	movs	r6, #54	@ 0x36
1005575a:	5d80      	ldrb	r0, [r0, r6]
1005575c:	2800      	cmp	r0, #0
1005575e:	d10e      	bne.n	1005577e <hci_le_long_term_key_request_event_int_cb+0x2e>
10055760:	7908      	ldrb	r0, [r1, #4]
10055762:	794a      	ldrb	r2, [r1, #5]
10055764:	0212      	lsls	r2, r2, #8
10055766:	1810      	adds	r0, r2, r0
10055768:	7b8a      	ldrb	r2, [r1, #14]
1005576a:	7bcb      	ldrb	r3, [r1, #15]
1005576c:	021b      	lsls	r3, r3, #8
1005576e:	189a      	adds	r2, r3, r2
10055770:	1d89      	adds	r1, r1, #6
10055772:	f00c fd13 	bl	1006219c <smp_sap_hci_le_long_term_key_request_evt_hndl>
10055776:	6828      	ldr	r0, [r5, #0]
10055778:	5d80      	ldrb	r0, [r0, r6]
1005577a:	2800      	cmp	r0, #0
1005577c:	d012      	beq.n	100557a4 <hci_le_long_term_key_request_event_int_cb+0x54>
1005577e:	480b      	ldr	r0, [pc, #44]	@ (100557ac <__arm_cp.24_1>)
10055780:	6801      	ldr	r1, [r0, #0]
10055782:	203d      	movs	r0, #61	@ 0x3d
10055784:	5c0a      	ldrb	r2, [r1, r0]
10055786:	2000      	movs	r0, #0
10055788:	0692      	lsls	r2, r2, #26
1005578a:	d50a      	bpl.n	100557a2 <hci_le_long_term_key_request_event_int_cb+0x52>
1005578c:	313d      	adds	r1, #61	@ 0x3d
1005578e:	7a49      	ldrb	r1, [r1, #9]
10055790:	06c9      	lsls	r1, r1, #27
10055792:	d506      	bpl.n	100557a2 <hci_le_long_term_key_request_event_int_cb+0x52>
10055794:	2019      	movs	r0, #25
10055796:	70e0      	strb	r0, [r4, #3]
10055798:	78a0      	ldrb	r0, [r4, #2]
1005579a:	21bf      	movs	r1, #191	@ 0xbf
1005579c:	4001      	ands	r1, r0
1005579e:	70a1      	strb	r1, [r4, #2]
100557a0:	2084      	movs	r0, #132	@ 0x84
100557a2:	bd70      	pop	{r4, r5, r6, pc}
100557a4:	2000      	movs	r0, #0
100557a6:	bd70      	pop	{r4, r5, r6, pc}

100557a8 <__arm_cp.24_0>:
100557a8:	20002a7c 	.word	0x20002a7c

100557ac <__arm_cp.24_1>:
100557ac:	20002ad0 	.word	0x20002ad0

100557b0 <hci_le_read_local_p256_public_key_complete_event_int_cb>:
100557b0:	b510      	push	{r4, lr}
100557b2:	4604      	mov	r4, r0
100557b4:	7908      	ldrb	r0, [r1, #4]
100557b6:	1d49      	adds	r1, r1, #5
100557b8:	f00c fe2b 	bl	10062412 <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>
100557bc:	480a      	ldr	r0, [pc, #40]	@ (100557e8 <__arm_cp.26_0>)
100557be:	6801      	ldr	r1, [r0, #0]
100557c0:	203d      	movs	r0, #61	@ 0x3d
100557c2:	5c0a      	ldrb	r2, [r1, r0]
100557c4:	2000      	movs	r0, #0
100557c6:	0692      	lsls	r2, r2, #26
100557c8:	d504      	bpl.n	100557d4 <hci_le_read_local_p256_public_key_complete_event_int_cb+0x24>
100557ca:	313d      	adds	r1, #61	@ 0x3d
100557cc:	2209      	movs	r2, #9
100557ce:	5689      	ldrsb	r1, [r1, r2]
100557d0:	2900      	cmp	r1, #0
100557d2:	d400      	bmi.n	100557d6 <hci_le_read_local_p256_public_key_complete_event_int_cb+0x26>
100557d4:	bd10      	pop	{r4, pc}
100557d6:	201a      	movs	r0, #26
100557d8:	70e0      	strb	r0, [r4, #3]
100557da:	78a0      	ldrb	r0, [r4, #2]
100557dc:	21bf      	movs	r1, #191	@ 0xbf
100557de:	4001      	ands	r1, r0
100557e0:	70a1      	strb	r1, [r4, #2]
100557e2:	2084      	movs	r0, #132	@ 0x84
100557e4:	bd10      	pop	{r4, pc}
100557e6:	46c0      	nop			@ (mov r8, r8)

100557e8 <__arm_cp.26_0>:
100557e8:	20002ad0 	.word	0x20002ad0

100557ec <hci_le_generate_dhkey_complete_event_int_cb>:
100557ec:	b510      	push	{r4, lr}
100557ee:	4604      	mov	r4, r0
100557f0:	7908      	ldrb	r0, [r1, #4]
100557f2:	1d49      	adds	r1, r1, #5
100557f4:	f00c fe0e 	bl	10062414 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>
100557f8:	4809      	ldr	r0, [pc, #36]	@ (10055820 <__arm_cp.28_0>)
100557fa:	6801      	ldr	r1, [r0, #0]
100557fc:	203d      	movs	r0, #61	@ 0x3d
100557fe:	5c0a      	ldrb	r2, [r1, r0]
10055800:	2000      	movs	r0, #0
10055802:	0692      	lsls	r2, r2, #26
10055804:	d50a      	bpl.n	1005581c <hci_le_generate_dhkey_complete_event_int_cb+0x30>
10055806:	313d      	adds	r1, #61	@ 0x3d
10055808:	7a89      	ldrb	r1, [r1, #10]
1005580a:	07c9      	lsls	r1, r1, #31
1005580c:	d006      	beq.n	1005581c <hci_le_generate_dhkey_complete_event_int_cb+0x30>
1005580e:	201b      	movs	r0, #27
10055810:	70e0      	strb	r0, [r4, #3]
10055812:	78a0      	ldrb	r0, [r4, #2]
10055814:	21bf      	movs	r1, #191	@ 0xbf
10055816:	4001      	ands	r1, r0
10055818:	70a1      	strb	r1, [r4, #2]
1005581a:	2084      	movs	r0, #132	@ 0x84
1005581c:	bd10      	pop	{r4, pc}
1005581e:	46c0      	nop			@ (mov r8, r8)

10055820 <__arm_cp.28_0>:
10055820:	20002ad0 	.word	0x20002ad0

10055824 <hci_le_advertising_report_event_int_cb_ucfg_weak>:
10055824:	2000      	movs	r0, #0
10055826:	4770      	bx	lr

10055828 <hci_le_directed_advertising_report_event_int_cb_ucfg_weak>:
10055828:	2000      	movs	r0, #0
1005582a:	4770      	bx	lr

1005582c <hci_le_extended_advertising_report_event_int_cb_ucfg_weak>:
1005582c:	2000      	movs	r0, #0
1005582e:	4770      	bx	lr

10055830 <hci_le_scan_timeout_event_int_cb_ucfg_weak>:
10055830:	2000      	movs	r0, #0
10055832:	4770      	bx	lr

10055834 <hci_le_advertising_set_terminated_event_int_cb_ucfg_weak>:
10055834:	2000      	movs	r0, #0
10055836:	4770      	bx	lr

10055838 <hci_read_remote_version_information_complete_event_copy>:
10055838:	7101      	strb	r1, [r0, #4]
1005583a:	2300      	movs	r3, #0
1005583c:	70c3      	strb	r3, [r0, #3]
1005583e:	0a09      	lsrs	r1, r1, #8
10055840:	7141      	strb	r1, [r0, #5]
10055842:	7811      	ldrb	r1, [r2, #0]
10055844:	7181      	strb	r1, [r0, #6]
10055846:	7851      	ldrb	r1, [r2, #1]
10055848:	7893      	ldrb	r3, [r2, #2]
1005584a:	7203      	strb	r3, [r0, #8]
1005584c:	71c1      	strb	r1, [r0, #7]
1005584e:	78d1      	ldrb	r1, [r2, #3]
10055850:	7912      	ldrb	r2, [r2, #4]
10055852:	7282      	strb	r2, [r0, #10]
10055854:	7241      	strb	r1, [r0, #9]
10055856:	4770      	bx	lr

10055858 <hci_number_of_completed_packets_event_copy>:
10055858:	2200      	movs	r2, #0
1005585a:	7102      	strb	r2, [r0, #4]
1005585c:	2201      	movs	r2, #1
1005585e:	70c2      	strb	r2, [r0, #3]
10055860:	7041      	strb	r1, [r0, #1]
10055862:	7002      	strb	r2, [r0, #0]
10055864:	0a09      	lsrs	r1, r1, #8
10055866:	7081      	strb	r1, [r0, #2]
10055868:	4770      	bx	lr

1005586a <aci_gap_proc_complete_event_copy>:
1005586a:	b510      	push	{r4, lr}
1005586c:	7813      	ldrb	r3, [r2, #0]
1005586e:	7183      	strb	r3, [r0, #6]
10055870:	7853      	ldrb	r3, [r2, #1]
10055872:	1e8c      	subs	r4, r1, #2
10055874:	7204      	strb	r4, [r0, #8]
10055876:	71c3      	strb	r3, [r0, #7]
10055878:	3009      	adds	r0, #9
1005587a:	1c91      	adds	r1, r2, #2
1005587c:	b2e2      	uxtb	r2, r4
1005587e:	f7fc ff6d 	bl	1005275c <BLEPLAT_MemCpy>
10055882:	bd10      	pop	{r4, pc}

10055884 <aci_l2cap_connection_update_req_event_copy>:
10055884:	b5f0      	push	{r4, r5, r6, r7, lr}
10055886:	b085      	sub	sp, #20
10055888:	4617      	mov	r7, r2
1005588a:	9103      	str	r1, [sp, #12]
1005588c:	4604      	mov	r4, r0
1005588e:	6850      	ldr	r0, [r2, #4]
10055890:	7a40      	ldrb	r0, [r0, #9]
10055892:	9004      	str	r0, [sp, #16]
10055894:	2106      	movs	r1, #6
10055896:	4d16      	ldr	r5, [pc, #88]	@ (100558f0 <__arm_cp.42_0>)
10055898:	4610      	mov	r0, r2
1005589a:	47a8      	blx	r5
1005589c:	9002      	str	r0, [sp, #8]
1005589e:	2108      	movs	r1, #8
100558a0:	4638      	mov	r0, r7
100558a2:	47a8      	blx	r5
100558a4:	9001      	str	r0, [sp, #4]
100558a6:	210a      	movs	r1, #10
100558a8:	4638      	mov	r0, r7
100558aa:	47a8      	blx	r5
100558ac:	4606      	mov	r6, r0
100558ae:	210c      	movs	r1, #12
100558b0:	4638      	mov	r0, r7
100558b2:	47a8      	blx	r5
100558b4:	462a      	mov	r2, r5
100558b6:	4605      	mov	r5, r0
100558b8:	210e      	movs	r1, #14
100558ba:	4638      	mov	r0, r7
100558bc:	4790      	blx	r2
100558be:	7460      	strb	r0, [r4, #17]
100558c0:	0a29      	lsrs	r1, r5, #8
100558c2:	7421      	strb	r1, [r4, #16]
100558c4:	73e5      	strb	r5, [r4, #15]
100558c6:	0a31      	lsrs	r1, r6, #8
100558c8:	73a1      	strb	r1, [r4, #14]
100558ca:	7366      	strb	r6, [r4, #13]
100558cc:	9a01      	ldr	r2, [sp, #4]
100558ce:	0a11      	lsrs	r1, r2, #8
100558d0:	7321      	strb	r1, [r4, #12]
100558d2:	72e2      	strb	r2, [r4, #11]
100558d4:	9a02      	ldr	r2, [sp, #8]
100558d6:	0a11      	lsrs	r1, r2, #8
100558d8:	72a1      	strb	r1, [r4, #10]
100558da:	7262      	strb	r2, [r4, #9]
100558dc:	9a03      	ldr	r2, [sp, #12]
100558de:	0a11      	lsrs	r1, r2, #8
100558e0:	71e1      	strb	r1, [r4, #7]
100558e2:	71a2      	strb	r2, [r4, #6]
100558e4:	9904      	ldr	r1, [sp, #16]
100558e6:	7221      	strb	r1, [r4, #8]
100558e8:	0a00      	lsrs	r0, r0, #8
100558ea:	74a0      	strb	r0, [r4, #18]
100558ec:	b005      	add	sp, #20
100558ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

100558f0 <__arm_cp.42_0>:
100558f0:	10054ed7 	.word	0x10054ed7

100558f4 <ACL_pkt_read_8b>:
100558f4:	b51c      	push	{r2, r3, r4, lr}
100558f6:	291f      	cmp	r1, #31
100558f8:	d803      	bhi.n	10055902 <ACL_pkt_read_8b+0xe>
100558fa:	aa01      	add	r2, sp, #4
100558fc:	8011      	strh	r1, [r2, #0]
100558fe:	6840      	ldr	r0, [r0, #4]
10055900:	e005      	b.n	1005590e <ACL_pkt_read_8b+0x1a>
10055902:	6840      	ldr	r0, [r0, #4]
10055904:	ac01      	add	r4, sp, #4
10055906:	4622      	mov	r2, r4
10055908:	f00b fa87 	bl	10060e1a <Mem_Buff_get_buff_off>
1005590c:	8821      	ldrh	r1, [r4, #0]
1005590e:	1840      	adds	r0, r0, r1
10055910:	7900      	ldrb	r0, [r0, #4]
10055912:	bd1c      	pop	{r2, r3, r4, pc}

10055914 <aci_l2cap_command_reject_event_copy>:
10055914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055916:	4615      	mov	r5, r2
10055918:	460e      	mov	r6, r1
1005591a:	4604      	mov	r4, r0
1005591c:	6850      	ldr	r0, [r2, #4]
1005591e:	7a40      	ldrb	r0, [r0, #9]
10055920:	9000      	str	r0, [sp, #0]
10055922:	2106      	movs	r1, #6
10055924:	4610      	mov	r0, r2
10055926:	f7ff fad6 	bl	10054ed6 <ACL_pkt_read_16b>
1005592a:	4607      	mov	r7, r0
1005592c:	2108      	movs	r1, #8
1005592e:	4628      	mov	r0, r5
10055930:	f7ff fad1 	bl	10054ed6 <ACL_pkt_read_16b>
10055934:	1eb9      	subs	r1, r7, #2
10055936:	72e1      	strb	r1, [r4, #11]
10055938:	7260      	strb	r0, [r4, #9]
1005593a:	9a00      	ldr	r2, [sp, #0]
1005593c:	7222      	strb	r2, [r4, #8]
1005593e:	0a32      	lsrs	r2, r6, #8
10055940:	71e2      	strb	r2, [r4, #7]
10055942:	71a6      	strb	r6, [r4, #6]
10055944:	0a00      	lsrs	r0, r0, #8
10055946:	72a0      	strb	r0, [r4, #10]
10055948:	b2ca      	uxtb	r2, r1
1005594a:	89a8      	ldrh	r0, [r5, #12]
1005594c:	340c      	adds	r4, #12
1005594e:	1d80      	adds	r0, r0, #6
10055950:	b281      	uxth	r1, r0
10055952:	4628      	mov	r0, r5
10055954:	4623      	mov	r3, r4
10055956:	f7ff fab5 	bl	10054ec4 <ACL_pkt_read>
1005595a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005595c <aci_att_clt_find_info_resp_event_copy>:
1005595c:	b570      	push	{r4, r5, r6, lr}
1005595e:	461c      	mov	r4, r3
10055960:	4605      	mov	r5, r0
10055962:	885e      	ldrh	r6, [r3, #2]
10055964:	0a10      	lsrs	r0, r2, #8
10055966:	70e8      	strb	r0, [r5, #3]
10055968:	70aa      	strb	r2, [r5, #2]
1005596a:	0a08      	lsrs	r0, r1, #8
1005596c:	7068      	strb	r0, [r5, #1]
1005596e:	7029      	strb	r1, [r5, #0]
10055970:	8998      	ldrh	r0, [r3, #12]
10055972:	1c40      	adds	r0, r0, #1
10055974:	b281      	uxth	r1, r0
10055976:	4618      	mov	r0, r3
10055978:	f7ff ffbc 	bl	100558f4 <ACL_pkt_read_8b>
1005597c:	1eb1      	subs	r1, r6, #2
1005597e:	0a0a      	lsrs	r2, r1, #8
10055980:	71aa      	strb	r2, [r5, #6]
10055982:	7169      	strb	r1, [r5, #5]
10055984:	7128      	strb	r0, [r5, #4]
10055986:	89a0      	ldrh	r0, [r4, #12]
10055988:	1deb      	adds	r3, r5, #7
1005598a:	b28a      	uxth	r2, r1
1005598c:	1c80      	adds	r0, r0, #2
1005598e:	b281      	uxth	r1, r0
10055990:	4620      	mov	r0, r4
10055992:	f7ff fa97 	bl	10054ec4 <ACL_pkt_read>
10055996:	bd70      	pop	{r4, r5, r6, pc}

10055998 <aci_att_clt_find_by_type_value_resp_event_copy>:
10055998:	b5b0      	push	{r4, r5, r7, lr}
1005599a:	461c      	mov	r4, r3
1005599c:	885b      	ldrh	r3, [r3, #2]
1005599e:	0a15      	lsrs	r5, r2, #8
100559a0:	70c5      	strb	r5, [r0, #3]
100559a2:	7082      	strb	r2, [r0, #2]
100559a4:	0a0a      	lsrs	r2, r1, #8
100559a6:	7042      	strb	r2, [r0, #1]
100559a8:	7001      	strb	r1, [r0, #0]
100559aa:	1e59      	subs	r1, r3, #1
100559ac:	088a      	lsrs	r2, r1, #2
100559ae:	7102      	strb	r2, [r0, #4]
100559b0:	89a5      	ldrh	r5, [r4, #12]
100559b2:	1d43      	adds	r3, r0, #5
100559b4:	b28a      	uxth	r2, r1
100559b6:	1c68      	adds	r0, r5, #1
100559b8:	b281      	uxth	r1, r0
100559ba:	4620      	mov	r0, r4
100559bc:	f7ff fa82 	bl	10054ec4 <ACL_pkt_read>
100559c0:	bdb0      	pop	{r4, r5, r7, pc}

100559c2 <aci_att_clt_read_by_type_resp_event_copy>:
100559c2:	b570      	push	{r4, r5, r6, lr}
100559c4:	461c      	mov	r4, r3
100559c6:	4605      	mov	r5, r0
100559c8:	885e      	ldrh	r6, [r3, #2]
100559ca:	0a10      	lsrs	r0, r2, #8
100559cc:	70e8      	strb	r0, [r5, #3]
100559ce:	70aa      	strb	r2, [r5, #2]
100559d0:	0a08      	lsrs	r0, r1, #8
100559d2:	7068      	strb	r0, [r5, #1]
100559d4:	7029      	strb	r1, [r5, #0]
100559d6:	8998      	ldrh	r0, [r3, #12]
100559d8:	1c40      	adds	r0, r0, #1
100559da:	b281      	uxth	r1, r0
100559dc:	4618      	mov	r0, r3
100559de:	f7ff ff89 	bl	100558f4 <ACL_pkt_read_8b>
100559e2:	1eb1      	subs	r1, r6, #2
100559e4:	0a0a      	lsrs	r2, r1, #8
100559e6:	71aa      	strb	r2, [r5, #6]
100559e8:	7169      	strb	r1, [r5, #5]
100559ea:	7128      	strb	r0, [r5, #4]
100559ec:	89a0      	ldrh	r0, [r4, #12]
100559ee:	1deb      	adds	r3, r5, #7
100559f0:	b28a      	uxth	r2, r1
100559f2:	1c80      	adds	r0, r0, #2
100559f4:	b281      	uxth	r1, r0
100559f6:	4620      	mov	r0, r4
100559f8:	f7ff fa64 	bl	10054ec4 <ACL_pkt_read>
100559fc:	bd70      	pop	{r4, r5, r6, pc}

100559fe <aci_att_clt_read_resp_event_copy>:
100559fe:	b5b0      	push	{r4, r5, r7, lr}
10055a00:	461c      	mov	r4, r3
10055a02:	885b      	ldrh	r3, [r3, #2]
10055a04:	0a15      	lsrs	r5, r2, #8
10055a06:	70c5      	strb	r5, [r0, #3]
10055a08:	7082      	strb	r2, [r0, #2]
10055a0a:	0a0a      	lsrs	r2, r1, #8
10055a0c:	7042      	strb	r2, [r0, #1]
10055a0e:	7001      	strb	r1, [r0, #0]
10055a10:	1e59      	subs	r1, r3, #1
10055a12:	7101      	strb	r1, [r0, #4]
10055a14:	0a0a      	lsrs	r2, r1, #8
10055a16:	7142      	strb	r2, [r0, #5]
10055a18:	89a5      	ldrh	r5, [r4, #12]
10055a1a:	1d83      	adds	r3, r0, #6
10055a1c:	b28a      	uxth	r2, r1
10055a1e:	1c68      	adds	r0, r5, #1
10055a20:	b281      	uxth	r1, r0
10055a22:	4620      	mov	r0, r4
10055a24:	f7ff fa4e 	bl	10054ec4 <ACL_pkt_read>
10055a28:	bdb0      	pop	{r4, r5, r7, pc}

10055a2a <aci_att_clt_read_blob_resp_event_copy>:
10055a2a:	b5b0      	push	{r4, r5, r7, lr}
10055a2c:	461c      	mov	r4, r3
10055a2e:	885b      	ldrh	r3, [r3, #2]
10055a30:	0a15      	lsrs	r5, r2, #8
10055a32:	70c5      	strb	r5, [r0, #3]
10055a34:	7082      	strb	r2, [r0, #2]
10055a36:	0a0a      	lsrs	r2, r1, #8
10055a38:	7042      	strb	r2, [r0, #1]
10055a3a:	7001      	strb	r1, [r0, #0]
10055a3c:	1e59      	subs	r1, r3, #1
10055a3e:	7101      	strb	r1, [r0, #4]
10055a40:	0a0a      	lsrs	r2, r1, #8
10055a42:	7142      	strb	r2, [r0, #5]
10055a44:	89a5      	ldrh	r5, [r4, #12]
10055a46:	1d83      	adds	r3, r0, #6
10055a48:	b28a      	uxth	r2, r1
10055a4a:	1c68      	adds	r0, r5, #1
10055a4c:	b281      	uxth	r1, r0
10055a4e:	4620      	mov	r0, r4
10055a50:	f7ff fa38 	bl	10054ec4 <ACL_pkt_read>
10055a54:	bdb0      	pop	{r4, r5, r7, pc}

10055a56 <aci_att_clt_read_multiple_resp_event_copy>:
10055a56:	b5b0      	push	{r4, r5, r7, lr}
10055a58:	461c      	mov	r4, r3
10055a5a:	885b      	ldrh	r3, [r3, #2]
10055a5c:	0a15      	lsrs	r5, r2, #8
10055a5e:	70c5      	strb	r5, [r0, #3]
10055a60:	7082      	strb	r2, [r0, #2]
10055a62:	0a0a      	lsrs	r2, r1, #8
10055a64:	7042      	strb	r2, [r0, #1]
10055a66:	7001      	strb	r1, [r0, #0]
10055a68:	1e59      	subs	r1, r3, #1
10055a6a:	7101      	strb	r1, [r0, #4]
10055a6c:	0a0a      	lsrs	r2, r1, #8
10055a6e:	7142      	strb	r2, [r0, #5]
10055a70:	89a5      	ldrh	r5, [r4, #12]
10055a72:	1d83      	adds	r3, r0, #6
10055a74:	b28a      	uxth	r2, r1
10055a76:	1c68      	adds	r0, r5, #1
10055a78:	b281      	uxth	r1, r0
10055a7a:	4620      	mov	r0, r4
10055a7c:	f7ff fa22 	bl	10054ec4 <ACL_pkt_read>
10055a80:	bdb0      	pop	{r4, r5, r7, pc}

10055a82 <aci_att_clt_read_by_group_type_resp_event_copy>:
10055a82:	b570      	push	{r4, r5, r6, lr}
10055a84:	461c      	mov	r4, r3
10055a86:	4605      	mov	r5, r0
10055a88:	885e      	ldrh	r6, [r3, #2]
10055a8a:	0a10      	lsrs	r0, r2, #8
10055a8c:	70e8      	strb	r0, [r5, #3]
10055a8e:	70aa      	strb	r2, [r5, #2]
10055a90:	0a08      	lsrs	r0, r1, #8
10055a92:	7068      	strb	r0, [r5, #1]
10055a94:	7029      	strb	r1, [r5, #0]
10055a96:	8998      	ldrh	r0, [r3, #12]
10055a98:	1c40      	adds	r0, r0, #1
10055a9a:	b281      	uxth	r1, r0
10055a9c:	4618      	mov	r0, r3
10055a9e:	f7ff ff29 	bl	100558f4 <ACL_pkt_read_8b>
10055aa2:	1eb1      	subs	r1, r6, #2
10055aa4:	0a0a      	lsrs	r2, r1, #8
10055aa6:	71aa      	strb	r2, [r5, #6]
10055aa8:	7169      	strb	r1, [r5, #5]
10055aaa:	7128      	strb	r0, [r5, #4]
10055aac:	89a0      	ldrh	r0, [r4, #12]
10055aae:	1deb      	adds	r3, r5, #7
10055ab0:	b28a      	uxth	r2, r1
10055ab2:	1c80      	adds	r0, r0, #2
10055ab4:	b281      	uxth	r1, r0
10055ab6:	4620      	mov	r0, r4
10055ab8:	f7ff fa04 	bl	10054ec4 <ACL_pkt_read>
10055abc:	bd70      	pop	{r4, r5, r6, pc}

10055abe <aci_att_clt_prepare_write_resp_event_copy>:
10055abe:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055ac0:	461c      	mov	r4, r3
10055ac2:	4617      	mov	r7, r2
10055ac4:	9102      	str	r1, [sp, #8]
10055ac6:	4605      	mov	r5, r0
10055ac8:	8858      	ldrh	r0, [r3, #2]
10055aca:	9001      	str	r0, [sp, #4]
10055acc:	8998      	ldrh	r0, [r3, #12]
10055ace:	1c40      	adds	r0, r0, #1
10055ad0:	b281      	uxth	r1, r0
10055ad2:	4618      	mov	r0, r3
10055ad4:	f7ff f9ff 	bl	10054ed6 <ACL_pkt_read_16b>
10055ad8:	4606      	mov	r6, r0
10055ada:	89a0      	ldrh	r0, [r4, #12]
10055adc:	1cc0      	adds	r0, r0, #3
10055ade:	b281      	uxth	r1, r0
10055ae0:	4620      	mov	r0, r4
10055ae2:	f7ff f9f8 	bl	10054ed6 <ACL_pkt_read_16b>
10055ae6:	9901      	ldr	r1, [sp, #4]
10055ae8:	1f49      	subs	r1, r1, #5
10055aea:	0a0a      	lsrs	r2, r1, #8
10055aec:	726a      	strb	r2, [r5, #9]
10055aee:	7229      	strb	r1, [r5, #8]
10055af0:	71a8      	strb	r0, [r5, #6]
10055af2:	0a32      	lsrs	r2, r6, #8
10055af4:	716a      	strb	r2, [r5, #5]
10055af6:	712e      	strb	r6, [r5, #4]
10055af8:	0a3a      	lsrs	r2, r7, #8
10055afa:	70ea      	strb	r2, [r5, #3]
10055afc:	70af      	strb	r7, [r5, #2]
10055afe:	9b02      	ldr	r3, [sp, #8]
10055b00:	0a1a      	lsrs	r2, r3, #8
10055b02:	706a      	strb	r2, [r5, #1]
10055b04:	702b      	strb	r3, [r5, #0]
10055b06:	0a00      	lsrs	r0, r0, #8
10055b08:	71e8      	strb	r0, [r5, #7]
10055b0a:	89a0      	ldrh	r0, [r4, #12]
10055b0c:	350a      	adds	r5, #10
10055b0e:	b28a      	uxth	r2, r1
10055b10:	1d40      	adds	r0, r0, #5
10055b12:	b281      	uxth	r1, r0
10055b14:	4620      	mov	r0, r4
10055b16:	462b      	mov	r3, r5
10055b18:	f7ff f9d4 	bl	10054ec4 <ACL_pkt_read>
10055b1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055b1e <aci_gatt_clt_indication_event_copy>:
10055b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055b20:	461c      	mov	r4, r3
10055b22:	4617      	mov	r7, r2
10055b24:	460e      	mov	r6, r1
10055b26:	4605      	mov	r5, r0
10055b28:	8858      	ldrh	r0, [r3, #2]
10055b2a:	9000      	str	r0, [sp, #0]
10055b2c:	8998      	ldrh	r0, [r3, #12]
10055b2e:	1c40      	adds	r0, r0, #1
10055b30:	b281      	uxth	r1, r0
10055b32:	4618      	mov	r0, r3
10055b34:	f7ff f9cf 	bl	10054ed6 <ACL_pkt_read_16b>
10055b38:	9900      	ldr	r1, [sp, #0]
10055b3a:	1ec9      	subs	r1, r1, #3
10055b3c:	0a0a      	lsrs	r2, r1, #8
10055b3e:	71ea      	strb	r2, [r5, #7]
10055b40:	71a9      	strb	r1, [r5, #6]
10055b42:	7128      	strb	r0, [r5, #4]
10055b44:	0a3a      	lsrs	r2, r7, #8
10055b46:	70ea      	strb	r2, [r5, #3]
10055b48:	70af      	strb	r7, [r5, #2]
10055b4a:	0a32      	lsrs	r2, r6, #8
10055b4c:	706a      	strb	r2, [r5, #1]
10055b4e:	702e      	strb	r6, [r5, #0]
10055b50:	0a00      	lsrs	r0, r0, #8
10055b52:	7168      	strb	r0, [r5, #5]
10055b54:	89a0      	ldrh	r0, [r4, #12]
10055b56:	3508      	adds	r5, #8
10055b58:	b28a      	uxth	r2, r1
10055b5a:	1cc0      	adds	r0, r0, #3
10055b5c:	b281      	uxth	r1, r0
10055b5e:	4620      	mov	r0, r4
10055b60:	462b      	mov	r3, r5
10055b62:	f7ff f9af 	bl	10054ec4 <ACL_pkt_read>
10055b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055b68 <aci_gatt_clt_notification_event_copy>:
10055b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10055b6a:	461c      	mov	r4, r3
10055b6c:	4617      	mov	r7, r2
10055b6e:	460e      	mov	r6, r1
10055b70:	4605      	mov	r5, r0
10055b72:	8858      	ldrh	r0, [r3, #2]
10055b74:	9000      	str	r0, [sp, #0]
10055b76:	8998      	ldrh	r0, [r3, #12]
10055b78:	1c40      	adds	r0, r0, #1
10055b7a:	b281      	uxth	r1, r0
10055b7c:	4618      	mov	r0, r3
10055b7e:	f7ff f9aa 	bl	10054ed6 <ACL_pkt_read_16b>
10055b82:	9900      	ldr	r1, [sp, #0]
10055b84:	1ec9      	subs	r1, r1, #3
10055b86:	0a0a      	lsrs	r2, r1, #8
10055b88:	71ea      	strb	r2, [r5, #7]
10055b8a:	71a9      	strb	r1, [r5, #6]
10055b8c:	7128      	strb	r0, [r5, #4]
10055b8e:	0a3a      	lsrs	r2, r7, #8
10055b90:	70ea      	strb	r2, [r5, #3]
10055b92:	70af      	strb	r7, [r5, #2]
10055b94:	0a32      	lsrs	r2, r6, #8
10055b96:	706a      	strb	r2, [r5, #1]
10055b98:	702e      	strb	r6, [r5, #0]
10055b9a:	0a00      	lsrs	r0, r0, #8
10055b9c:	7168      	strb	r0, [r5, #5]
10055b9e:	89a0      	ldrh	r0, [r4, #12]
10055ba0:	3508      	adds	r5, #8
10055ba2:	b28a      	uxth	r2, r1
10055ba4:	1cc0      	adds	r0, r0, #3
10055ba6:	b281      	uxth	r1, r0
10055ba8:	4620      	mov	r0, r4
10055baa:	462b      	mov	r3, r5
10055bac:	f7ff f98a 	bl	10054ec4 <ACL_pkt_read>
10055bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10055bb2 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>:
10055bb2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10055bb4:	461d      	mov	r5, r3
10055bb6:	4604      	mov	r4, r0
10055bb8:	7202      	strb	r2, [r0, #8]
10055bba:	7181      	strb	r1, [r0, #6]
10055bbc:	0a10      	lsrs	r0, r2, #8
10055bbe:	7260      	strb	r0, [r4, #9]
10055bc0:	0a08      	lsrs	r0, r1, #8
10055bc2:	71e0      	strb	r0, [r4, #7]
10055bc4:	9e07      	ldr	r6, [sp, #28]
10055bc6:	89b0      	ldrh	r0, [r6, #12]
10055bc8:	18c0      	adds	r0, r0, r3
10055bca:	b281      	uxth	r1, r0
10055bcc:	2202      	movs	r2, #2
10055bce:	ab01      	add	r3, sp, #4
10055bd0:	4630      	mov	r0, r6
10055bd2:	f7ff f977 	bl	10054ec4 <ACL_pkt_read>
10055bd6:	9806      	ldr	r0, [sp, #24]
10055bd8:	1e80      	subs	r0, r0, #2
10055bda:	7320      	strb	r0, [r4, #12]
10055bdc:	9901      	ldr	r1, [sp, #4]
10055bde:	72a1      	strb	r1, [r4, #10]
10055be0:	0a09      	lsrs	r1, r1, #8
10055be2:	72e1      	strb	r1, [r4, #11]
10055be4:	89b1      	ldrh	r1, [r6, #12]
10055be6:	1869      	adds	r1, r5, r1
10055be8:	1c89      	adds	r1, r1, #2
10055bea:	b289      	uxth	r1, r1
10055bec:	340d      	adds	r4, #13
10055bee:	b2c2      	uxtb	r2, r0
10055bf0:	4630      	mov	r0, r6
10055bf2:	4623      	mov	r3, r4
10055bf4:	f7ff f966 	bl	10054ec4 <ACL_pkt_read>
10055bf8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10055bfa <aci_gatt_srv_write_event_copy>:
10055bfa:	b5b0      	push	{r4, r5, r7, lr}
10055bfc:	4615      	mov	r5, r2
10055bfe:	4604      	mov	r4, r0
10055c00:	9a05      	ldr	r2, [sp, #20]
10055c02:	71c2      	strb	r2, [r0, #7]
10055c04:	9804      	ldr	r0, [sp, #16]
10055c06:	7160      	strb	r0, [r4, #5]
10055c08:	7123      	strb	r3, [r4, #4]
10055c0a:	70a5      	strb	r5, [r4, #2]
10055c0c:	7021      	strb	r1, [r4, #0]
10055c0e:	0a13      	lsrs	r3, r2, #8
10055c10:	7223      	strb	r3, [r4, #8]
10055c12:	0a00      	lsrs	r0, r0, #8
10055c14:	71a0      	strb	r0, [r4, #6]
10055c16:	0a28      	lsrs	r0, r5, #8
10055c18:	70e0      	strb	r0, [r4, #3]
10055c1a:	0a08      	lsrs	r0, r1, #8
10055c1c:	7060      	strb	r0, [r4, #1]
10055c1e:	9806      	ldr	r0, [sp, #24]
10055c20:	8981      	ldrh	r1, [r0, #12]
10055c22:	3409      	adds	r4, #9
10055c24:	1cc9      	adds	r1, r1, #3
10055c26:	b289      	uxth	r1, r1
10055c28:	4623      	mov	r3, r4
10055c2a:	f7ff f94b 	bl	10054ec4 <ACL_pkt_read>
10055c2e:	bdb0      	pop	{r4, r5, r7, pc}

10055c30 <aci_att_srv_prepare_write_req_event_copy>:
10055c30:	b570      	push	{r4, r5, r6, lr}
10055c32:	4615      	mov	r5, r2
10055c34:	4604      	mov	r4, r0
10055c36:	9a05      	ldr	r2, [sp, #20]
10055c38:	7202      	strb	r2, [r0, #8]
10055c3a:	9804      	ldr	r0, [sp, #16]
10055c3c:	71a0      	strb	r0, [r4, #6]
10055c3e:	7123      	strb	r3, [r4, #4]
10055c40:	70a5      	strb	r5, [r4, #2]
10055c42:	7021      	strb	r1, [r4, #0]
10055c44:	0a16      	lsrs	r6, r2, #8
10055c46:	7266      	strb	r6, [r4, #9]
10055c48:	0a00      	lsrs	r0, r0, #8
10055c4a:	71e0      	strb	r0, [r4, #7]
10055c4c:	0a18      	lsrs	r0, r3, #8
10055c4e:	7160      	strb	r0, [r4, #5]
10055c50:	0a28      	lsrs	r0, r5, #8
10055c52:	70e0      	strb	r0, [r4, #3]
10055c54:	0a08      	lsrs	r0, r1, #8
10055c56:	7060      	strb	r0, [r4, #1]
10055c58:	9806      	ldr	r0, [sp, #24]
10055c5a:	8981      	ldrh	r1, [r0, #12]
10055c5c:	340a      	adds	r4, #10
10055c5e:	1d49      	adds	r1, r1, #5
10055c60:	b289      	uxth	r1, r1
10055c62:	4623      	mov	r3, r4
10055c64:	f7ff f92e 	bl	10054ec4 <ACL_pkt_read>
10055c68:	bd70      	pop	{r4, r5, r6, pc}

10055c6a <aci_gatt_clt_multi_notification_int_event_copy>:
10055c6a:	b5b0      	push	{r4, r5, r7, lr}
10055c6c:	461c      	mov	r4, r3
10055c6e:	885b      	ldrh	r3, [r3, #2]
10055c70:	0a15      	lsrs	r5, r2, #8
10055c72:	70c5      	strb	r5, [r0, #3]
10055c74:	7082      	strb	r2, [r0, #2]
10055c76:	0a0a      	lsrs	r2, r1, #8
10055c78:	7042      	strb	r2, [r0, #1]
10055c7a:	7001      	strb	r1, [r0, #0]
10055c7c:	1e59      	subs	r1, r3, #1
10055c7e:	7101      	strb	r1, [r0, #4]
10055c80:	0a0a      	lsrs	r2, r1, #8
10055c82:	7142      	strb	r2, [r0, #5]
10055c84:	89a5      	ldrh	r5, [r4, #12]
10055c86:	1d83      	adds	r3, r0, #6
10055c88:	b28a      	uxth	r2, r1
10055c8a:	1c68      	adds	r0, r5, #1
10055c8c:	b281      	uxth	r1, r0
10055c8e:	4620      	mov	r0, r4
10055c90:	f7ff f918 	bl	10054ec4 <ACL_pkt_read>
10055c94:	bdb0      	pop	{r4, r5, r7, pc}

10055c96 <aci_att_clt_read_multiple_var_len_resp_event_copy>:
10055c96:	b5b0      	push	{r4, r5, r7, lr}
10055c98:	461c      	mov	r4, r3
10055c9a:	885b      	ldrh	r3, [r3, #2]
10055c9c:	0a15      	lsrs	r5, r2, #8
10055c9e:	70c5      	strb	r5, [r0, #3]
10055ca0:	7082      	strb	r2, [r0, #2]
10055ca2:	0a0a      	lsrs	r2, r1, #8
10055ca4:	7042      	strb	r2, [r0, #1]
10055ca6:	7001      	strb	r1, [r0, #0]
10055ca8:	1e59      	subs	r1, r3, #1
10055caa:	7101      	strb	r1, [r0, #4]
10055cac:	0a0a      	lsrs	r2, r1, #8
10055cae:	7142      	strb	r2, [r0, #5]
10055cb0:	89a5      	ldrh	r5, [r4, #12]
10055cb2:	1d83      	adds	r3, r0, #6
10055cb4:	b28a      	uxth	r2, r1
10055cb6:	1c68      	adds	r0, r5, #1
10055cb8:	b281      	uxth	r1, r0
10055cba:	4620      	mov	r0, r4
10055cbc:	f7ff f902 	bl	10054ec4 <ACL_pkt_read>
10055cc0:	bdb0      	pop	{r4, r5, r7, pc}

10055cc2 <hci_rx_acl_data_event_copy>:
10055cc2:	b5b0      	push	{r4, r5, r7, lr}
10055cc4:	4614      	mov	r4, r2
10055cc6:	9a04      	ldr	r2, [sp, #16]
10055cc8:	70c2      	strb	r2, [r0, #3]
10055cca:	7041      	strb	r1, [r0, #1]
10055ccc:	0a15      	lsrs	r5, r2, #8
10055cce:	7105      	strb	r5, [r0, #4]
10055cd0:	250f      	movs	r5, #15
10055cd2:	022d      	lsls	r5, r5, #8
10055cd4:	400d      	ands	r5, r1
10055cd6:	07a1      	lsls	r1, r4, #30
10055cd8:	0c89      	lsrs	r1, r1, #18
10055cda:	1949      	adds	r1, r1, r5
10055cdc:	039b      	lsls	r3, r3, #14
10055cde:	18c9      	adds	r1, r1, r3
10055ce0:	0a09      	lsrs	r1, r1, #8
10055ce2:	7081      	strb	r1, [r0, #2]
10055ce4:	1d43      	adds	r3, r0, #5
10055ce6:	9805      	ldr	r0, [sp, #20]
10055ce8:	2100      	movs	r1, #0
10055cea:	f7ff f8eb 	bl	10054ec4 <ACL_pkt_read>
10055cee:	bdb0      	pop	{r4, r5, r7, pc}

10055cf0 <aci_l2cap_proc_timeout_event_copy>:
10055cf0:	7001      	strb	r1, [r0, #0]
10055cf2:	2200      	movs	r2, #0
10055cf4:	7082      	strb	r2, [r0, #2]
10055cf6:	0a09      	lsrs	r1, r1, #8
10055cf8:	7041      	strb	r1, [r0, #1]
10055cfa:	4770      	bx	lr

10055cfc <hci_le_enhanced_connection_complete_v2_event_int_cb_ucfg_weak>:
10055cfc:	2000      	movs	r0, #0
10055cfe:	4770      	bx	lr

10055d00 <hci_hardware_error_event_cb>:
10055d00:	b5e0      	push	{r5, r6, r7, lr}
10055d02:	aa01      	add	r2, sp, #4
10055d04:	70d0      	strb	r0, [r2, #3]
10055d06:	2001      	movs	r0, #1
10055d08:	7090      	strb	r0, [r2, #2]
10055d0a:	2010      	movs	r0, #16
10055d0c:	7050      	strb	r0, [r2, #1]
10055d0e:	2104      	movs	r1, #4
10055d10:	7011      	strb	r1, [r2, #0]
10055d12:	4610      	mov	r0, r2
10055d14:	f7f8 fef0 	bl	1004eaf8 <BLE_STACK_Event>
10055d18:	bd8c      	pop	{r2, r3, r7, pc}

10055d1a <GAP_enable_disable_scan_ucfg_weak>:
10055d1a:	2000      	movs	r0, #0
10055d1c:	4770      	bx	lr

10055d1e <GAP_discover_peer_name_ucfg_weak>:
10055d1e:	2000      	movs	r0, #0
10055d20:	4770      	bx	lr
	...

10055d24 <GAP_name_disc_proc_connected_check>:
10055d24:	b51c      	push	{r2, r3, r4, lr}
10055d26:	4811      	ldr	r0, [pc, #68]	@ (10055d6c <__arm_cp.18_0>)
10055d28:	6804      	ldr	r4, [r0, #0]
10055d2a:	f7ff fff8 	bl	10055d1e <GAP_discover_peer_name_ucfg_weak>
10055d2e:	2888      	cmp	r0, #136	@ 0x88
10055d30:	d007      	beq.n	10055d42 <GAP_name_disc_proc_connected_check+0x1e>
10055d32:	280c      	cmp	r0, #12
10055d34:	d005      	beq.n	10055d42 <GAP_name_disc_proc_connected_check+0x1e>
10055d36:	345d      	adds	r4, #93	@ 0x5d
10055d38:	2800      	cmp	r0, #0
10055d3a:	d108      	bne.n	10055d4e <GAP_name_disc_proc_connected_check+0x2a>
10055d3c:	2002      	movs	r0, #2
10055d3e:	7060      	strb	r0, [r4, #1]
10055d40:	bd1c      	pop	{r2, r3, r4, pc}
10055d42:	2005      	movs	r0, #5
10055d44:	f00c fda0 	bl	10062888 <tsk_notify_idx>
10055d48:	f7fb ff21 	bl	10051b8e <BLE_STACK_ProcessRequest>
10055d4c:	bd1c      	pop	{r2, r3, r4, pc}
10055d4e:	2000      	movs	r0, #0
10055d50:	7060      	strb	r0, [r4, #1]
10055d52:	7820      	ldrb	r0, [r4, #0]
10055d54:	217f      	movs	r1, #127	@ 0x7f
10055d56:	4001      	ands	r1, r0
10055d58:	7021      	strb	r1, [r4, #0]
10055d5a:	a901      	add	r1, sp, #4
10055d5c:	2086      	movs	r0, #134	@ 0x86
10055d5e:	7048      	strb	r0, [r1, #1]
10055d60:	2080      	movs	r0, #128	@ 0x80
10055d62:	7008      	strb	r0, [r1, #0]
10055d64:	2002      	movs	r0, #2
10055d66:	f000 f9bf 	bl	100560e8 <aci_gap_proc_complete_event_wrapper>
10055d6a:	bd1c      	pop	{r2, r3, r4, pc}

10055d6c <__arm_cp.18_0>:
10055d6c:	20002a84 	.word	0x20002a84

10055d70 <GAP_central_connection_complete_handler_ucfg_weak>:
10055d70:	4770      	bx	lr

10055d72 <GAP_DiscProcTimeoutcb_ucfg_weak>:
10055d72:	4770      	bx	lr

10055d74 <GAP_started_gatt_proc>:
10055d74:	4907      	ldr	r1, [pc, #28]	@ (10055d94 <__arm_cp.28_0>)
10055d76:	6809      	ldr	r1, [r1, #0]
10055d78:	225d      	movs	r2, #93	@ 0x5d
10055d7a:	5c8a      	ldrb	r2, [r1, r2]
10055d7c:	2388      	movs	r3, #136	@ 0x88
10055d7e:	421a      	tst	r2, r3
10055d80:	d004      	beq.n	10055d8c <GAP_started_gatt_proc+0x18>
10055d82:	3172      	adds	r1, #114	@ 0x72
10055d84:	8809      	ldrh	r1, [r1, #0]
10055d86:	4041      	eors	r1, r0
10055d88:	0508      	lsls	r0, r1, #20
10055d8a:	d001      	beq.n	10055d90 <GAP_started_gatt_proc+0x1c>
10055d8c:	2000      	movs	r0, #0
10055d8e:	4770      	bx	lr
10055d90:	2001      	movs	r0, #1
10055d92:	4770      	bx	lr

10055d94 <__arm_cp.28_0>:
10055d94:	20002a84 	.word	0x20002a84

10055d98 <gap_timers_callback_wrapper>:
10055d98:	b580      	push	{r7, lr}
10055d9a:	6940      	ldr	r0, [r0, #20]
10055d9c:	4901      	ldr	r1, [pc, #4]	@ (10055da4 <__arm_cp.0_0>)
10055d9e:	f00c feaa 	bl	10062af6 <cst_sharedCallback>
10055da2:	bd80      	pop	{r7, pc}

10055da4 <__arm_cp.0_0>:
10055da4:	10055da9 	.word	0x10055da9

10055da8 <gap_timers_callback>:
10055da8:	b580      	push	{r7, lr}
10055daa:	2802      	cmp	r0, #2
10055dac:	d007      	beq.n	10055dbe <gap_timers_callback+0x16>
10055dae:	2801      	cmp	r0, #1
10055db0:	d009      	beq.n	10055dc6 <gap_timers_callback+0x1e>
10055db2:	2800      	cmp	r0, #0
10055db4:	d106      	bne.n	10055dc4 <gap_timers_callback+0x1c>
10055db6:	2000      	movs	r0, #0
10055db8:	f7f8 ff19 	bl	1004ebee <GAP_LimDiscTimeoutcb_ucfg>
10055dbc:	bd80      	pop	{r7, pc}
10055dbe:	2000      	movs	r0, #0
10055dc0:	f7ff ffd7 	bl	10055d72 <GAP_DiscProcTimeoutcb_ucfg_weak>
10055dc4:	bd80      	pop	{r7, pc}
10055dc6:	2000      	movs	r0, #0
10055dc8:	f000 f802 	bl	10055dd0 <GAP_PrivateAddrTimercb>
10055dcc:	bd80      	pop	{r7, pc}
	...

10055dd0 <GAP_PrivateAddrTimercb>:
10055dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10055dd2:	b087      	sub	sp, #28
10055dd4:	4831      	ldr	r0, [pc, #196]	@ (10055e9c <__arm_cp.2_0>)
10055dd6:	6804      	ldr	r4, [r0, #0]
10055dd8:	a906      	add	r1, sp, #24
10055dda:	9104      	str	r1, [sp, #16]
10055ddc:	2000      	movs	r0, #0
10055dde:	9001      	str	r0, [sp, #4]
10055de0:	7008      	strb	r0, [r1, #0]
10055de2:	ae05      	add	r6, sp, #20
10055de4:	2001      	movs	r0, #1
10055de6:	7030      	strb	r0, [r6, #0]
10055de8:	f000 f950 	bl	1005608c <GAP_reset_privacy_timer>
10055dec:	205d      	movs	r0, #93	@ 0x5d
10055dee:	9403      	str	r4, [sp, #12]
10055df0:	5c27      	ldrb	r7, [r4, r0]
10055df2:	1e78      	subs	r0, r7, #1
10055df4:	463d      	mov	r5, r7
10055df6:	4185      	sbcs	r5, r0
10055df8:	2020      	movs	r0, #32
10055dfa:	4038      	ands	r0, r7
10055dfc:	4244      	negs	r4, r0
10055dfe:	9002      	str	r0, [sp, #8]
10055e00:	4144      	adcs	r4, r0
10055e02:	9804      	ldr	r0, [sp, #16]
10055e04:	4631      	mov	r1, r6
10055e06:	f000 fd51 	bl	100568ac <GAP_check_adv_status>
10055e0a:	2f00      	cmp	r7, #0
10055e0c:	d101      	bne.n	10055e12 <GAP_PrivateAddrTimercb+0x42>
10055e0e:	2801      	cmp	r0, #1
10055e10:	d13e      	bne.n	10055e90 <GAP_PrivateAddrTimercb+0xc0>
10055e12:	402c      	ands	r4, r5
10055e14:	d138      	bne.n	10055e88 <GAP_PrivateAddrTimercb+0xb8>
10055e16:	a805      	add	r0, sp, #20
10055e18:	7800      	ldrb	r0, [r0, #0]
10055e1a:	2800      	cmp	r0, #0
10055e1c:	d034      	beq.n	10055e88 <GAP_PrivateAddrTimercb+0xb8>
10055e1e:	9c03      	ldr	r4, [sp, #12]
10055e20:	4620      	mov	r0, r4
10055e22:	305d      	adds	r0, #93	@ 0x5d
10055e24:	7bc0      	ldrb	r0, [r0, #15]
10055e26:	2800      	cmp	r0, #0
10055e28:	d034      	beq.n	10055e94 <GAP_PrivateAddrTimercb+0xc4>
10055e2a:	3428      	adds	r4, #40	@ 0x28
10055e2c:	9d02      	ldr	r5, [sp, #8]
10055e2e:	2d00      	cmp	r5, #0
10055e30:	d003      	beq.n	10055e3a <GAP_PrivateAddrTimercb+0x6a>
10055e32:	7821      	ldrb	r1, [r4, #0]
10055e34:	2000      	movs	r0, #0
10055e36:	f7ff ff70 	bl	10055d1a <GAP_enable_disable_scan_ucfg_weak>
10055e3a:	a806      	add	r0, sp, #24
10055e3c:	7800      	ldrb	r0, [r0, #0]
10055e3e:	2801      	cmp	r0, #1
10055e40:	d102      	bne.n	10055e48 <GAP_PrivateAddrTimercb+0x78>
10055e42:	2000      	movs	r0, #0
10055e44:	f000 fcf6 	bl	10056834 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>
10055e48:	f000 fafc 	bl	10056444 <GAP_generate_new_rpa>
10055e4c:	2800      	cmp	r0, #0
10055e4e:	d104      	bne.n	10055e5a <GAP_PrivateAddrTimercb+0x8a>
10055e50:	2000      	movs	r0, #0
10055e52:	2101      	movs	r1, #1
10055e54:	f000 face 	bl	100563f4 <GAP_start_privacy_timer>
10055e58:	9001      	str	r0, [sp, #4]
10055e5a:	2d00      	cmp	r5, #0
10055e5c:	d00a      	beq.n	10055e74 <GAP_PrivateAddrTimercb+0xa4>
10055e5e:	7821      	ldrb	r1, [r4, #0]
10055e60:	2001      	movs	r0, #1
10055e62:	f7ff ff5a 	bl	10055d1a <GAP_enable_disable_scan_ucfg_weak>
10055e66:	2800      	cmp	r0, #0
10055e68:	d004      	beq.n	10055e74 <GAP_PrivateAddrTimercb+0xa4>
10055e6a:	9801      	ldr	r0, [sp, #4]
10055e6c:	2800      	cmp	r0, #0
10055e6e:	d001      	beq.n	10055e74 <GAP_PrivateAddrTimercb+0xa4>
10055e70:	f000 fa2c 	bl	100562cc <GAP_stop_privacy_timer>
10055e74:	a806      	add	r0, sp, #24
10055e76:	7800      	ldrb	r0, [r0, #0]
10055e78:	2801      	cmp	r0, #1
10055e7a:	d109      	bne.n	10055e90 <GAP_PrivateAddrTimercb+0xc0>
10055e7c:	2006      	movs	r0, #6
10055e7e:	f00c fd03 	bl	10062888 <tsk_notify_idx>
10055e82:	f7fb fe84 	bl	10051b8e <BLE_STACK_ProcessRequest>
10055e86:	e003      	b.n	10055e90 <GAP_PrivateAddrTimercb+0xc0>
10055e88:	2001      	movs	r0, #1
10055e8a:	4601      	mov	r1, r0
10055e8c:	f000 fab2 	bl	100563f4 <GAP_start_privacy_timer>
10055e90:	b007      	add	sp, #28
10055e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10055e94:	2000      	movs	r0, #0
10055e96:	2101      	movs	r1, #1
10055e98:	e7f8      	b.n	10055e8c <GAP_PrivateAddrTimercb+0xbc>
10055e9a:	46c0      	nop			@ (mov r8, r8)

10055e9c <__arm_cp.2_0>:
10055e9c:	20002a84 	.word	0x20002a84

10055ea0 <GAP_init_context>:
10055ea0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10055ea2:	461f      	mov	r7, r3
10055ea4:	9201      	str	r2, [sp, #4]
10055ea6:	9102      	str	r1, [sp, #8]
10055ea8:	4605      	mov	r5, r0
10055eaa:	2401      	movs	r4, #1
10055eac:	2178      	movs	r1, #120	@ 0x78
10055eae:	4620      	mov	r0, r4
10055eb0:	f00a ff14 	bl	10060cdc <csmem_mem_0_assign>
10055eb4:	21e1      	movs	r1, #225	@ 0xe1
10055eb6:	0089      	lsls	r1, r1, #2
10055eb8:	225a      	movs	r2, #90	@ 0x5a
10055eba:	5281      	strh	r1, [r0, r2]
10055ebc:	4e24      	ldr	r6, [pc, #144]	@ (10055f50 <__arm_cp.3_0>)
10055ebe:	6030      	str	r0, [r6, #0]
10055ec0:	2d01      	cmp	r5, #1
10055ec2:	d117      	bne.n	10055ef4 <GAP_init_context+0x54>
10055ec4:	2001      	movs	r0, #1
10055ec6:	2106      	movs	r1, #6
10055ec8:	f00a ff08 	bl	10060cdc <csmem_mem_0_assign>
10055ecc:	4601      	mov	r1, r0
10055ece:	6830      	ldr	r0, [r6, #0]
10055ed0:	6381      	str	r1, [r0, #56]	@ 0x38
10055ed2:	2f01      	cmp	r7, #1
10055ed4:	d10e      	bne.n	10055ef4 <GAP_init_context+0x54>
10055ed6:	2501      	movs	r5, #1
10055ed8:	270e      	movs	r7, #14
10055eda:	4628      	mov	r0, r5
10055edc:	4639      	mov	r1, r7
10055ede:	f00a fefd 	bl	10060cdc <csmem_mem_0_assign>
10055ee2:	6831      	ldr	r1, [r6, #0]
10055ee4:	64c8      	str	r0, [r1, #76]	@ 0x4c
10055ee6:	4628      	mov	r0, r5
10055ee8:	4639      	mov	r1, r7
10055eea:	f00a fef7 	bl	10060cdc <csmem_mem_0_assign>
10055eee:	4601      	mov	r1, r0
10055ef0:	6830      	ldr	r0, [r6, #0]
10055ef2:	6501      	str	r1, [r0, #80]	@ 0x50
10055ef4:	9902      	ldr	r1, [sp, #8]
10055ef6:	2901      	cmp	r1, #1
10055ef8:	d10b      	bne.n	10055f12 <GAP_init_context+0x72>
10055efa:	9801      	ldr	r0, [sp, #4]
10055efc:	2801      	cmp	r0, #1
10055efe:	d105      	bne.n	10055f0c <GAP_init_context+0x6c>
10055f00:	201c      	movs	r0, #28
10055f02:	2101      	movs	r1, #1
10055f04:	f00a feea 	bl	10060cdc <csmem_mem_0_assign>
10055f08:	6831      	ldr	r1, [r6, #0]
10055f0a:	62c8      	str	r0, [r1, #44]	@ 0x2c
10055f0c:	4811      	ldr	r0, [pc, #68]	@ (10055f54 <__arm_cp.3_1>)
10055f0e:	7e84      	ldrb	r4, [r0, #26]
10055f10:	e001      	b.n	10055f16 <GAP_init_context+0x76>
10055f12:	2100      	movs	r1, #0
10055f14:	62c1      	str	r1, [r0, #44]	@ 0x2c
10055f16:	2114      	movs	r1, #20
10055f18:	4620      	mov	r0, r4
10055f1a:	f00a fedf 	bl	10060cdc <csmem_mem_0_assign>
10055f1e:	6831      	ldr	r1, [r6, #0]
10055f20:	6548      	str	r0, [r1, #84]	@ 0x54
10055f22:	4c0d      	ldr	r4, [pc, #52]	@ (10055f58 <__arm_cp.3_2>)
10055f24:	2104      	movs	r1, #4
10055f26:	2201      	movs	r2, #1
10055f28:	4620      	mov	r0, r4
10055f2a:	f00a fec5 	bl	10060cb8 <csmem_mem_assign>
10055f2e:	6831      	ldr	r1, [r6, #0]
10055f30:	6208      	str	r0, [r1, #32]
10055f32:	2503      	movs	r5, #3
10055f34:	2202      	movs	r2, #2
10055f36:	4620      	mov	r0, r4
10055f38:	4629      	mov	r1, r5
10055f3a:	f00a febd 	bl	10060cb8 <csmem_mem_assign>
10055f3e:	6831      	ldr	r1, [r6, #0]
10055f40:	6248      	str	r0, [r1, #36]	@ 0x24
10055f42:	4a06      	ldr	r2, [pc, #24]	@ (10055f5c <__arm_cp.3_3>)
10055f44:	2307      	movs	r3, #7
10055f46:	4608      	mov	r0, r1
10055f48:	4629      	mov	r1, r5
10055f4a:	f00c fcfb 	bl	10062944 <CST_init>
10055f4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10055f50 <__arm_cp.3_0>:
10055f50:	20002a84 	.word	0x20002a84

10055f54 <__arm_cp.3_1>:
10055f54:	20002ae4 	.word	0x20002ae4

10055f58 <__arm_cp.3_2>:
10055f58:	20002ae0 	.word	0x20002ae0

10055f5c <__arm_cp.3_3>:
10055f5c:	10055d99 	.word	0x10055d99

10055f60 <GAP_get_default_le_event_mask>:
10055f60:	b5b0      	push	{r4, r5, r7, lr}
10055f62:	4604      	mov	r4, r0
10055f64:	2100      	movs	r1, #0
10055f66:	2508      	movs	r5, #8
10055f68:	462a      	mov	r2, r5
10055f6a:	f7fc fc07 	bl	1005277c <BLEPLAT_MemSet>
10055f6e:	7820      	ldrb	r0, [r4, #0]
10055f70:	21df      	movs	r1, #223	@ 0xdf
10055f72:	4301      	orrs	r1, r0
10055f74:	7021      	strb	r1, [r4, #0]
10055f76:	7860      	ldrb	r0, [r4, #1]
10055f78:	2109      	movs	r1, #9
10055f7a:	4301      	orrs	r1, r0
10055f7c:	7061      	strb	r1, [r4, #1]
10055f7e:	78a1      	ldrb	r1, [r4, #2]
10055f80:	4329      	orrs	r1, r5
10055f82:	70a1      	strb	r1, [r4, #2]
10055f84:	4911      	ldr	r1, [pc, #68]	@ (10055fcc <__arm_cp.4_0>)
10055f86:	6809      	ldr	r1, [r1, #0]
10055f88:	225c      	movs	r2, #92	@ 0x5c
10055f8a:	5c89      	ldrb	r1, [r1, r2]
10055f8c:	0689      	lsls	r1, r1, #26
10055f8e:	d502      	bpl.n	10055f96 <GAP_get_default_le_event_mask+0x36>
10055f90:	210f      	movs	r1, #15
10055f92:	4308      	orrs	r0, r1
10055f94:	7060      	strb	r0, [r4, #1]
10055f96:	f009 ff09 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
10055f9a:	2801      	cmp	r0, #1
10055f9c:	d107      	bne.n	10055fae <GAP_get_default_le_event_mask+0x4e>
10055f9e:	7860      	ldrb	r0, [r4, #1]
10055fa0:	2112      	movs	r1, #18
10055fa2:	4301      	orrs	r1, r0
10055fa4:	7061      	strb	r1, [r4, #1]
10055fa6:	78a0      	ldrb	r0, [r4, #2]
10055fa8:	2107      	movs	r1, #7
10055faa:	4301      	orrs	r1, r0
10055fac:	70a1      	strb	r1, [r4, #2]
10055fae:	f005 fdbf 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10055fb2:	b2c0      	uxtb	r0, r0
10055fb4:	2801      	cmp	r0, #1
10055fb6:	d107      	bne.n	10055fc8 <GAP_get_default_le_event_mask+0x68>
10055fb8:	7860      	ldrb	r0, [r4, #1]
10055fba:	21e0      	movs	r1, #224	@ 0xe0
10055fbc:	4301      	orrs	r1, r0
10055fbe:	7061      	strb	r1, [r4, #1]
10055fc0:	78a0      	ldrb	r0, [r4, #2]
10055fc2:	2180      	movs	r1, #128	@ 0x80
10055fc4:	4301      	orrs	r1, r0
10055fc6:	70a1      	strb	r1, [r4, #2]
10055fc8:	bdb0      	pop	{r4, r5, r7, pc}
10055fca:	46c0      	nop			@ (mov r8, r8)

10055fcc <__arm_cp.4_0>:
10055fcc:	20002a84 	.word	0x20002a84

10055fd0 <gap_extended_adv_scan_supported>:
10055fd0:	b580      	push	{r7, lr}
10055fd2:	f009 feeb 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
10055fd6:	bd80      	pop	{r7, pc}

10055fd8 <GAP_Init>:
10055fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
10055fda:	b085      	sub	sp, #20
10055fdc:	4605      	mov	r5, r0
10055fde:	a804      	add	r0, sp, #16
10055fe0:	2700      	movs	r7, #0
10055fe2:	7007      	strb	r7, [r0, #0]
10055fe4:	2412      	movs	r4, #18
10055fe6:	2901      	cmp	r1, #1
10055fe8:	d901      	bls.n	10055fee <GAP_Init+0x16>
10055fea:	4620      	mov	r0, r4
10055fec:	e048      	b.n	10056080 <GAP_Init+0xa8>
10055fee:	460e      	mov	r6, r1
10055ff0:	4824      	ldr	r0, [pc, #144]	@ (10056084 <__arm_cp.7_0>)
10055ff2:	6800      	ldr	r0, [r0, #0]
10055ff4:	9000      	str	r0, [sp, #0]
10055ff6:	f00c ff85 	bl	10062f04 <IDD_Initialize_Device_IDs>
10055ffa:	2800      	cmp	r0, #0
10055ffc:	d140      	bne.n	10056080 <GAP_Init+0xa8>
10055ffe:	9900      	ldr	r1, [sp, #0]
10056000:	315c      	adds	r1, #92	@ 0x5c
10056002:	7808      	ldrb	r0, [r1, #0]
10056004:	07c0      	lsls	r0, r0, #31
10056006:	d111      	bne.n	1005602c <GAP_Init+0x54>
10056008:	78c8      	ldrb	r0, [r1, #3]
1005600a:	4330      	orrs	r0, r6
1005600c:	460e      	mov	r6, r1
1005600e:	70c8      	strb	r0, [r1, #3]
10056010:	a803      	add	r0, sp, #12
10056012:	2107      	movs	r1, #7
10056014:	7001      	strb	r1, [r0, #0]
10056016:	2d00      	cmp	r5, #0
10056018:	d012      	beq.n	10056040 <GAP_Init+0x68>
1005601a:	2d02      	cmp	r5, #2
1005601c:	d008      	beq.n	10056030 <GAP_Init+0x58>
1005601e:	2d01      	cmp	r5, #1
10056020:	4620      	mov	r0, r4
10056022:	d12d      	bne.n	10056080 <GAP_Init+0xa8>
10056024:	a804      	add	r0, sp, #16
10056026:	2110      	movs	r1, #16
10056028:	7001      	strb	r1, [r0, #0]
1005602a:	e009      	b.n	10056040 <GAP_Init+0x68>
1005602c:	200c      	movs	r0, #12
1005602e:	e027      	b.n	10056080 <GAP_Init+0xa8>
10056030:	a804      	add	r0, sp, #16
10056032:	2120      	movs	r1, #32
10056034:	7001      	strb	r1, [r0, #0]
10056036:	a903      	add	r1, sp, #12
10056038:	f000 f9a2 	bl	10056380 <GAP_enable_controller_privacy_ucfg_weak>
1005603c:	2800      	cmp	r0, #0
1005603e:	d11f      	bne.n	10056080 <GAP_Init+0xa8>
10056040:	f000 f9d6 	bl	100563f0 <GAP_init_advertising_sets_ucfg_weak>
10056044:	2800      	cmp	r0, #0
10056046:	d11b      	bne.n	10056080 <GAP_Init+0xa8>
10056048:	9800      	ldr	r0, [sp, #0]
1005604a:	3060      	adds	r0, #96	@ 0x60
1005604c:	f000 f9cc 	bl	100563e8 <GAP_set_controller_random_address_ucfg_weak>
10056050:	2800      	cmp	r0, #0
10056052:	d115      	bne.n	10056080 <GAP_Init+0xa8>
10056054:	9804      	ldr	r0, [sp, #16]
10056056:	2101      	movs	r1, #1
10056058:	7431      	strb	r1, [r6, #16]
1005605a:	4308      	orrs	r0, r1
1005605c:	7030      	strb	r0, [r6, #0]
1005605e:	f000 f815 	bl	1005608c <GAP_reset_privacy_timer>
10056062:	ac01      	add	r4, sp, #4
10056064:	4620      	mov	r0, r4
10056066:	f7ff ff7b 	bl	10055f60 <GAP_get_default_le_event_mask>
1005606a:	4620      	mov	r0, r4
1005606c:	f003 fa24 	bl	100594b8 <hci_le_set_event_mask>
10056070:	43f8      	mvns	r0, r7
10056072:	9001      	str	r0, [sp, #4]
10056074:	4804      	ldr	r0, [pc, #16]	@ (10056088 <__arm_cp.7_1>)
10056076:	9002      	str	r0, [sp, #8]
10056078:	4620      	mov	r0, r4
1005607a:	f003 fa0d 	bl	10059498 <hci_set_event_mask>
1005607e:	4638      	mov	r0, r7
10056080:	b005      	add	sp, #20
10056082:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056084 <__arm_cp.7_0>:
10056084:	20002a84 	.word	0x20002a84

10056088 <__arm_cp.7_1>:
10056088:	20009fff 	.word	0x20009fff

1005608c <GAP_reset_privacy_timer>:
1005608c:	4806      	ldr	r0, [pc, #24]	@ (100560a8 <__arm_cp.8_0>)
1005608e:	6800      	ldr	r0, [r0, #0]
10056090:	215c      	movs	r1, #92	@ 0x5c
10056092:	5c41      	ldrb	r1, [r0, r1]
10056094:	0689      	lsls	r1, r1, #26
10056096:	0f89      	lsrs	r1, r1, #30
10056098:	d004      	beq.n	100560a4 <GAP_reset_privacy_timer+0x18>
1005609a:	305c      	adds	r0, #92	@ 0x5c
1005609c:	78c1      	ldrb	r1, [r0, #3]
1005609e:	2202      	movs	r2, #2
100560a0:	430a      	orrs	r2, r1
100560a2:	70c2      	strb	r2, [r0, #3]
100560a4:	4770      	bx	lr
100560a6:	46c0      	nop			@ (mov r8, r8)

100560a8 <__arm_cp.8_0>:
100560a8:	20002a84 	.word	0x20002a84

100560ac <GAP_internal_evt_handler>:
100560ac:	b5b0      	push	{r4, r5, r7, lr}
100560ae:	285c      	cmp	r0, #92	@ 0x5c
100560b0:	d106      	bne.n	100560c0 <GAP_internal_evt_handler+0x14>
100560b2:	480c      	ldr	r0, [pc, #48]	@ (100560e4 <__arm_cp.12_0>)
100560b4:	6804      	ldr	r4, [r0, #0]
100560b6:	345d      	adds	r4, #93	@ 0x5d
100560b8:	2500      	movs	r5, #0
100560ba:	5760      	ldrsb	r0, [r4, r5]
100560bc:	2800      	cmp	r0, #0
100560be:	d400      	bmi.n	100560c2 <GAP_internal_evt_handler+0x16>
100560c0:	bdb0      	pop	{r4, r5, r7, pc}
100560c2:	7860      	ldrb	r0, [r4, #1]
100560c4:	2802      	cmp	r0, #2
100560c6:	d1fb      	bne.n	100560c0 <GAP_internal_evt_handler+0x14>
100560c8:	7055      	strb	r5, [r2, #1]
100560ca:	2080      	movs	r0, #128	@ 0x80
100560cc:	7010      	strb	r0, [r2, #0]
100560ce:	b2c8      	uxtb	r0, r1
100560d0:	4611      	mov	r1, r2
100560d2:	f000 f809 	bl	100560e8 <aci_gap_proc_complete_event_wrapper>
100560d6:	7065      	strb	r5, [r4, #1]
100560d8:	7820      	ldrb	r0, [r4, #0]
100560da:	217f      	movs	r1, #127	@ 0x7f
100560dc:	4001      	ands	r1, r0
100560de:	7021      	strb	r1, [r4, #0]
100560e0:	bdb0      	pop	{r4, r5, r7, pc}
100560e2:	46c0      	nop			@ (mov r8, r8)

100560e4 <__arm_cp.12_0>:
100560e4:	20002a84 	.word	0x20002a84

100560e8 <aci_gap_proc_complete_event_wrapper>:
100560e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100560ea:	2900      	cmp	r1, #0
100560ec:	d016      	beq.n	1005611c <aci_gap_proc_complete_event_wrapper+0x34>
100560ee:	460e      	mov	r6, r1
100560f0:	4605      	mov	r5, r0
100560f2:	7809      	ldrb	r1, [r1, #0]
100560f4:	2400      	movs	r4, #0
100560f6:	07c8      	lsls	r0, r1, #31
100560f8:	4620      	mov	r0, r4
100560fa:	d11f      	bne.n	1005613c <aci_gap_proc_complete_event_wrapper+0x54>
100560fc:	0788      	lsls	r0, r1, #30
100560fe:	d40f      	bmi.n	10056120 <aci_gap_proc_complete_event_wrapper+0x38>
10056100:	0748      	lsls	r0, r1, #29
10056102:	d40f      	bmi.n	10056124 <aci_gap_proc_complete_event_wrapper+0x3c>
10056104:	0708      	lsls	r0, r1, #28
10056106:	d40f      	bmi.n	10056128 <aci_gap_proc_complete_event_wrapper+0x40>
10056108:	06c8      	lsls	r0, r1, #27
1005610a:	d40f      	bmi.n	1005612c <aci_gap_proc_complete_event_wrapper+0x44>
1005610c:	0688      	lsls	r0, r1, #26
1005610e:	d40f      	bmi.n	10056130 <aci_gap_proc_complete_event_wrapper+0x48>
10056110:	0648      	lsls	r0, r1, #25
10056112:	d40f      	bmi.n	10056134 <aci_gap_proc_complete_event_wrapper+0x4c>
10056114:	0608      	lsls	r0, r1, #24
10056116:	d50f      	bpl.n	10056138 <aci_gap_proc_complete_event_wrapper+0x50>
10056118:	2007      	movs	r0, #7
1005611a:	e00f      	b.n	1005613c <aci_gap_proc_complete_event_wrapper+0x54>
1005611c:	2412      	movs	r4, #18
1005611e:	e03c      	b.n	1005619a <aci_gap_proc_complete_event_wrapper+0xb2>
10056120:	2001      	movs	r0, #1
10056122:	e00b      	b.n	1005613c <aci_gap_proc_complete_event_wrapper+0x54>
10056124:	2002      	movs	r0, #2
10056126:	e009      	b.n	1005613c <aci_gap_proc_complete_event_wrapper+0x54>
10056128:	2003      	movs	r0, #3
1005612a:	e007      	b.n	1005613c <aci_gap_proc_complete_event_wrapper+0x54>
1005612c:	2004      	movs	r0, #4
1005612e:	e005      	b.n	1005613c <aci_gap_proc_complete_event_wrapper+0x54>
10056130:	2005      	movs	r0, #5
10056132:	e003      	b.n	1005613c <aci_gap_proc_complete_event_wrapper+0x54>
10056134:	2006      	movs	r0, #6
10056136:	e001      	b.n	1005613c <aci_gap_proc_complete_event_wrapper+0x54>
10056138:	2000      	movs	r0, #0
1005613a:	43c0      	mvns	r0, r0
1005613c:	7030      	strb	r0, [r6, #0]
1005613e:	4818      	ldr	r0, [pc, #96]	@ (100561a0 <__arm_cp.13_0>)
10056140:	6800      	ldr	r0, [r0, #0]
10056142:	214e      	movs	r1, #78	@ 0x4e
10056144:	5640      	ldrsb	r0, [r0, r1]
10056146:	2800      	cmp	r0, #0
10056148:	d527      	bpl.n	1005619a <aci_gap_proc_complete_event_wrapper+0xb2>
1005614a:	4816      	ldr	r0, [pc, #88]	@ (100561a4 <__arm_cp.13_1>)
1005614c:	1828      	adds	r0, r5, r0
1005614e:	2103      	movs	r1, #3
10056150:	4301      	orrs	r1, r0
10056152:	310d      	adds	r1, #13
10056154:	0888      	lsrs	r0, r1, #2
10056156:	b283      	uxth	r3, r0
10056158:	4813      	ldr	r0, [pc, #76]	@ (100561a8 <__arm_cp.13_2>)
1005615a:	6800      	ldr	r0, [r0, #0]
1005615c:	6980      	ldr	r0, [r0, #24]
1005615e:	2102      	movs	r1, #2
10056160:	2247      	movs	r2, #71	@ 0x47
10056162:	f7ff f847 	bl	100551f4 <aci_event_fifo_push_header>
10056166:	2800      	cmp	r0, #0
10056168:	d016      	beq.n	10056198 <aci_gap_proc_complete_event_wrapper+0xb0>
1005616a:	4607      	mov	r7, r0
1005616c:	1d00      	adds	r0, r0, #4
1005616e:	4629      	mov	r1, r5
10056170:	4632      	mov	r2, r6
10056172:	f7ff fb7a 	bl	1005586a <aci_gap_proc_complete_event_copy>
10056176:	2004      	movs	r0, #4
10056178:	7278      	strb	r0, [r7, #9]
1005617a:	2007      	movs	r0, #7
1005617c:	7238      	strb	r0, [r7, #8]
1005617e:	1ce8      	adds	r0, r5, #3
10056180:	0a01      	lsrs	r1, r0, #8
10056182:	71f9      	strb	r1, [r7, #7]
10056184:	71b8      	strb	r0, [r7, #6]
10056186:	20ff      	movs	r0, #255	@ 0xff
10056188:	7178      	strb	r0, [r7, #5]
1005618a:	2082      	movs	r0, #130	@ 0x82
1005618c:	7138      	strb	r0, [r7, #4]
1005618e:	2002      	movs	r0, #2
10056190:	4639      	mov	r1, r7
10056192:	f7ff f8cc 	bl	1005532e <aci_event_fifo_push>
10056196:	e000      	b.n	1005619a <aci_gap_proc_complete_event_wrapper+0xb2>
10056198:	2407      	movs	r4, #7
1005619a:	4620      	mov	r0, r4
1005619c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005619e:	46c0      	nop			@ (mov r8, r8)

100561a0 <__arm_cp.13_0>:
100561a0:	20002ad0 	.word	0x20002ad0

100561a4 <__arm_cp.13_1>:
100561a4:	0003fffd 	.word	0x0003fffd

100561a8 <__arm_cp.13_2>:
100561a8:	20002a80 	.word	0x20002a80

100561ac <GAP_LimDiscTimeoutcb>:
100561ac:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100561ae:	4811      	ldr	r0, [pc, #68]	@ (100561f4 <__arm_cp.15_0>)
100561b0:	6800      	ldr	r0, [r0, #0]
100561b2:	6d44      	ldr	r4, [r0, #84]	@ 0x54
100561b4:	f009 fdfa 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
100561b8:	2800      	cmp	r0, #0
100561ba:	d002      	beq.n	100561c2 <GAP_LimDiscTimeoutcb+0x16>
100561bc:	480e      	ldr	r0, [pc, #56]	@ (100561f8 <__arm_cp.15_1>)
100561be:	7e80      	ldrb	r0, [r0, #26]
100561c0:	e000      	b.n	100561c4 <GAP_LimDiscTimeoutcb+0x18>
100561c2:	2001      	movs	r0, #1
100561c4:	b2c5      	uxtb	r5, r0
100561c6:	3411      	adds	r4, #17
100561c8:	2d00      	cmp	r5, #0
100561ca:	d011      	beq.n	100561f0 <GAP_LimDiscTimeoutcb+0x44>
100561cc:	7820      	ldrb	r0, [r4, #0]
100561ce:	2800      	cmp	r0, #0
100561d0:	d00b      	beq.n	100561ea <GAP_LimDiscTimeoutcb+0x3e>
100561d2:	4620      	mov	r0, r4
100561d4:	380f      	subs	r0, #15
100561d6:	7800      	ldrb	r0, [r0, #0]
100561d8:	0780      	lsls	r0, r0, #30
100561da:	d506      	bpl.n	100561ea <GAP_LimDiscTimeoutcb+0x3e>
100561dc:	7860      	ldrb	r0, [r4, #1]
100561de:	466a      	mov	r2, sp
100561e0:	7010      	strb	r0, [r2, #0]
100561e2:	2000      	movs	r0, #0
100561e4:	2101      	movs	r1, #1
100561e6:	f7fe fb2b 	bl	10054840 <GAP_set_advertising_enable_ucfg_weak>
100561ea:	3414      	adds	r4, #20
100561ec:	1e6d      	subs	r5, r5, #1
100561ee:	e7eb      	b.n	100561c8 <GAP_LimDiscTimeoutcb+0x1c>
100561f0:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
100561f2:	46c0      	nop			@ (mov r8, r8)

100561f4 <__arm_cp.15_0>:
100561f4:	20002a84 	.word	0x20002a84

100561f8 <__arm_cp.15_1>:
100561f8:	20002ae4 	.word	0x20002ae4

100561fc <GAP_stop_discoverability>:
100561fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100561fe:	4604      	mov	r4, r0
10056200:	4668      	mov	r0, sp
10056202:	2500      	movs	r5, #0
10056204:	7005      	strb	r5, [r0, #0]
10056206:	f009 fdd1 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
1005620a:	2800      	cmp	r0, #0
1005620c:	d005      	beq.n	1005621a <GAP_stop_discoverability+0x1e>
1005620e:	466d      	mov	r5, sp
10056210:	4620      	mov	r0, r4
10056212:	4629      	mov	r1, r5
10056214:	f000 f9fe 	bl	10056614 <GAP_get_advertising_set_index>
10056218:	782d      	ldrb	r5, [r5, #0]
1005621a:	f009 fdc7 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
1005621e:	2800      	cmp	r0, #0
10056220:	d002      	beq.n	10056228 <GAP_stop_discoverability+0x2c>
10056222:	4826      	ldr	r0, [pc, #152]	@ (100562bc <__arm_cp.18_0>)
10056224:	7e83      	ldrb	r3, [r0, #26]
10056226:	e000      	b.n	1005622a <GAP_stop_discoverability+0x2e>
10056228:	2301      	movs	r3, #1
1005622a:	2614      	movs	r6, #20
1005622c:	4375      	muls	r5, r6
1005622e:	4f24      	ldr	r7, [pc, #144]	@ (100562c0 <__arm_cp.18_1>)
10056230:	6838      	ldr	r0, [r7, #0]
10056232:	6d41      	ldr	r1, [r0, #84]	@ 0x54
10056234:	194c      	adds	r4, r1, r5
10056236:	78a5      	ldrb	r5, [r4, #2]
10056238:	2202      	movs	r2, #2
1005623a:	402a      	ands	r2, r5
1005623c:	d002      	beq.n	10056244 <GAP_stop_discoverability+0x48>
1005623e:	1ca4      	adds	r4, r4, #2
10056240:	2500      	movs	r5, #0
10056242:	7025      	strb	r5, [r4, #0]
10056244:	3111      	adds	r1, #17
10056246:	b2db      	uxtb	r3, r3
10056248:	2b00      	cmp	r3, #0
1005624a:	d00a      	beq.n	10056262 <GAP_stop_discoverability+0x66>
1005624c:	780c      	ldrb	r4, [r1, #0]
1005624e:	2c00      	cmp	r4, #0
10056250:	d004      	beq.n	1005625c <GAP_stop_discoverability+0x60>
10056252:	460c      	mov	r4, r1
10056254:	3c0f      	subs	r4, #15
10056256:	7824      	ldrb	r4, [r4, #0]
10056258:	07a4      	lsls	r4, r4, #30
1005625a:	d426      	bmi.n	100562aa <GAP_stop_discoverability+0xae>
1005625c:	1e5b      	subs	r3, r3, #1
1005625e:	3114      	adds	r1, #20
10056260:	e7f2      	b.n	10056248 <GAP_stop_discoverability+0x4c>
10056262:	2a00      	cmp	r2, #0
10056264:	d021      	beq.n	100562aa <GAP_stop_discoverability+0xae>
10056266:	2400      	movs	r4, #0
10056268:	4621      	mov	r1, r4
1005626a:	f00c fb80 	bl	1006296e <CST_stop>
1005626e:	4815      	ldr	r0, [pc, #84]	@ (100562c4 <__arm_cp.18_2>)
10056270:	6800      	ldr	r0, [r0, #0]
10056272:	214e      	movs	r1, #78	@ 0x4e
10056274:	5c40      	ldrb	r0, [r0, r1]
10056276:	07c0      	lsls	r0, r0, #31
10056278:	d017      	beq.n	100562aa <GAP_stop_discoverability+0xae>
1005627a:	4813      	ldr	r0, [pc, #76]	@ (100562c8 <__arm_cp.18_3>)
1005627c:	6800      	ldr	r0, [r0, #0]
1005627e:	6980      	ldr	r0, [r0, #24]
10056280:	2244      	movs	r2, #68	@ 0x44
10056282:	2502      	movs	r5, #2
10056284:	4629      	mov	r1, r5
10056286:	462b      	mov	r3, r5
10056288:	f7fe ffb4 	bl	100551f4 <aci_event_fifo_push_header>
1005628c:	2800      	cmp	r0, #0
1005628e:	d00c      	beq.n	100562aa <GAP_stop_discoverability+0xae>
10056290:	4601      	mov	r1, r0
10056292:	7185      	strb	r5, [r0, #6]
10056294:	71c4      	strb	r4, [r0, #7]
10056296:	7204      	strb	r4, [r0, #8]
10056298:	20ff      	movs	r0, #255	@ 0xff
1005629a:	7148      	strb	r0, [r1, #5]
1005629c:	2082      	movs	r0, #130	@ 0x82
1005629e:	7108      	strb	r0, [r1, #4]
100562a0:	2004      	movs	r0, #4
100562a2:	7248      	strb	r0, [r1, #9]
100562a4:	4628      	mov	r0, r5
100562a6:	f7ff f842 	bl	1005532e <aci_event_fifo_push>
100562aa:	4668      	mov	r0, sp
100562ac:	7800      	ldrb	r0, [r0, #0]
100562ae:	4346      	muls	r6, r0
100562b0:	6838      	ldr	r0, [r7, #0]
100562b2:	6d40      	ldr	r0, [r0, #84]	@ 0x54
100562b4:	1980      	adds	r0, r0, r6
100562b6:	2100      	movs	r1, #0
100562b8:	7441      	strb	r1, [r0, #17]
100562ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100562bc <__arm_cp.18_0>:
100562bc:	20002ae4 	.word	0x20002ae4

100562c0 <__arm_cp.18_1>:
100562c0:	20002a84 	.word	0x20002a84

100562c4 <__arm_cp.18_2>:
100562c4:	20002ad0 	.word	0x20002ad0

100562c8 <__arm_cp.18_3>:
100562c8:	20002a80 	.word	0x20002a80

100562cc <GAP_stop_privacy_timer>:
100562cc:	b57c      	push	{r2, r3, r4, r5, r6, lr}
100562ce:	4c0d      	ldr	r4, [pc, #52]	@ (10056304 <__arm_cp.19_0>)
100562d0:	6825      	ldr	r5, [r4, #0]
100562d2:	205c      	movs	r0, #92	@ 0x5c
100562d4:	5c28      	ldrb	r0, [r5, r0]
100562d6:	0680      	lsls	r0, r0, #26
100562d8:	0f80      	lsrs	r0, r0, #30
100562da:	d012      	beq.n	10056302 <GAP_stop_privacy_timer+0x36>
100562dc:	355c      	adds	r5, #92	@ 0x5c
100562de:	78e8      	ldrb	r0, [r5, #3]
100562e0:	2602      	movs	r6, #2
100562e2:	4030      	ands	r0, r6
100562e4:	d10d      	bne.n	10056302 <GAP_stop_privacy_timer+0x36>
100562e6:	a801      	add	r0, sp, #4
100562e8:	4669      	mov	r1, sp
100562ea:	f000 fadf 	bl	100568ac <GAP_check_adv_status>
100562ee:	7869      	ldrb	r1, [r5, #1]
100562f0:	4301      	orrs	r1, r0
100562f2:	d106      	bne.n	10056302 <GAP_stop_privacy_timer+0x36>
100562f4:	78e8      	ldrb	r0, [r5, #3]
100562f6:	4330      	orrs	r0, r6
100562f8:	70e8      	strb	r0, [r5, #3]
100562fa:	6820      	ldr	r0, [r4, #0]
100562fc:	2101      	movs	r1, #1
100562fe:	f00c fb36 	bl	1006296e <CST_stop>
10056302:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10056304 <__arm_cp.19_0>:
10056304:	20002a84 	.word	0x20002a84

10056308 <GAP_peripheral_connection_complete_handler_ucfg_weak>:
10056308:	b580      	push	{r7, lr}
1005630a:	2000      	movs	r0, #0
1005630c:	f7ff ff76 	bl	100561fc <GAP_stop_discoverability>
10056310:	f7ff ffdc 	bl	100562cc <GAP_stop_privacy_timer>
10056314:	bd80      	pop	{r7, pc}

10056316 <GAP_hci_disconnection_complete_evt_hndl>:
10056316:	4770      	bx	lr

10056318 <GAP_hci_le_connection_complete_evt_hndl>:
10056318:	b580      	push	{r7, lr}
1005631a:	2a00      	cmp	r2, #0
1005631c:	d003      	beq.n	10056326 <GAP_hci_le_connection_complete_evt_hndl+0xe>
1005631e:	4608      	mov	r0, r1
10056320:	f7ff fff2 	bl	10056308 <GAP_peripheral_connection_complete_handler_ucfg_weak>
10056324:	bd80      	pop	{r7, pc}
10056326:	f7ff fd23 	bl	10055d70 <GAP_central_connection_complete_handler_ucfg_weak>
1005632a:	bd80      	pop	{r7, pc}

1005632c <GapIsPrivacySupported>:
1005632c:	4804      	ldr	r0, [pc, #16]	@ (10056340 <__arm_cp.26_0>)
1005632e:	6800      	ldr	r0, [r0, #0]
10056330:	215c      	movs	r1, #92	@ 0x5c
10056332:	5c41      	ldrb	r1, [r0, r1]
10056334:	2030      	movs	r0, #48	@ 0x30
10056336:	4008      	ands	r0, r1
10056338:	1e41      	subs	r1, r0, #1
1005633a:	4188      	sbcs	r0, r1
1005633c:	4770      	bx	lr
1005633e:	46c0      	nop			@ (mov r8, r8)

10056340 <__arm_cp.26_0>:
10056340:	20002a84 	.word	0x20002a84

10056344 <GAP_get_identity_address_type>:
10056344:	4803      	ldr	r0, [pc, #12]	@ (10056354 <__arm_cp.28_0>)
10056346:	6800      	ldr	r0, [r0, #0]
10056348:	215f      	movs	r1, #95	@ 0x5f
1005634a:	5c41      	ldrb	r1, [r0, r1]
1005634c:	2001      	movs	r0, #1
1005634e:	4008      	ands	r0, r1
10056350:	4770      	bx	lr
10056352:	46c0      	nop			@ (mov r8, r8)

10056354 <__arm_cp.28_0>:
10056354:	20002a84 	.word	0x20002a84

10056358 <GAP_get_own_address_type>:
10056358:	4808      	ldr	r0, [pc, #32]	@ (1005637c <__arm_cp.29_0>)
1005635a:	6800      	ldr	r0, [r0, #0]
1005635c:	215c      	movs	r1, #92	@ 0x5c
1005635e:	5c41      	ldrb	r1, [r0, r1]
10056360:	06ca      	lsls	r2, r1, #27
10056362:	d406      	bmi.n	10056372 <GAP_get_own_address_type+0x1a>
10056364:	0689      	lsls	r1, r1, #26
10056366:	d406      	bmi.n	10056376 <GAP_get_own_address_type+0x1e>
10056368:	305c      	adds	r0, #92	@ 0x5c
1005636a:	78c1      	ldrb	r1, [r0, #3]
1005636c:	2001      	movs	r0, #1
1005636e:	4008      	ands	r0, r1
10056370:	4770      	bx	lr
10056372:	2001      	movs	r0, #1
10056374:	4770      	bx	lr
10056376:	2003      	movs	r0, #3
10056378:	4770      	bx	lr
1005637a:	46c0      	nop			@ (mov r8, r8)

1005637c <__arm_cp.29_0>:
1005637c:	20002a84 	.word	0x20002a84

10056380 <GAP_enable_controller_privacy_ucfg_weak>:
10056380:	2012      	movs	r0, #18
10056382:	4770      	bx	lr

10056384 <GAP_Terminate_Link>:
10056384:	b580      	push	{r7, lr}
10056386:	f004 fd17 	bl	1005adb8 <llc_conn_disconnect_link>
1005638a:	bd80      	pop	{r7, pc}

1005638c <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>:
1005638c:	b580      	push	{r7, lr}
1005638e:	07c0      	lsls	r0, r0, #31
10056390:	d101      	bne.n	10056396 <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak+0xa>
10056392:	2000      	movs	r0, #0
10056394:	bd80      	pop	{r7, pc}
10056396:	4608      	mov	r0, r1
10056398:	4611      	mov	r1, r2
1005639a:	f003 f966 	bl	1005966a <hci_le_add_device_to_filter_accept_list>
1005639e:	bd80      	pop	{r7, pc}

100563a0 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>:
100563a0:	b580      	push	{r7, lr}
100563a2:	07c0      	lsls	r0, r0, #31
100563a4:	d101      	bne.n	100563aa <GAP_clear_filter_accept_and_resolving_list_ucfg_weak+0xa>
100563a6:	2000      	movs	r0, #0
100563a8:	bd80      	pop	{r7, pc}
100563aa:	f003 f95a 	bl	10059662 <hci_le_clear_filter_accept_list>
100563ae:	bd80      	pop	{r7, pc}

100563b0 <GAP_configure_filter_accept_and_resolving_list>:
100563b0:	b570      	push	{r4, r5, r6, lr}
100563b2:	b094      	sub	sp, #80	@ 0x50
100563b4:	4604      	mov	r4, r0
100563b6:	f7ff fff3 	bl	100563a0 <GAP_clear_filter_accept_and_resolving_list_ucfg_weak>
100563ba:	4606      	mov	r6, r0
100563bc:	466d      	mov	r5, sp
100563be:	353e      	adds	r5, #62	@ 0x3e
100563c0:	4668      	mov	r0, sp
100563c2:	f00b f8d3 	bl	1006156c <sdb_sap_read_security_record_sequential>
100563c6:	2800      	cmp	r0, #0
100563c8:	d10b      	bne.n	100563e2 <GAP_configure_filter_accept_and_resolving_list+0x32>
100563ca:	2e00      	cmp	r6, #0
100563cc:	d109      	bne.n	100563e2 <GAP_configure_filter_accept_and_resolving_list+0x32>
100563ce:	4668      	mov	r0, sp
100563d0:	7840      	ldrb	r0, [r0, #1]
100563d2:	2101      	movs	r1, #1
100563d4:	4001      	ands	r1, r0
100563d6:	4620      	mov	r0, r4
100563d8:	462a      	mov	r2, r5
100563da:	f7ff ffd7 	bl	1005638c <GAP_add_device_to_filter_accept_and_resolving_list_ucfg_weak>
100563de:	4606      	mov	r6, r0
100563e0:	e7ee      	b.n	100563c0 <GAP_configure_filter_accept_and_resolving_list+0x10>
100563e2:	b2f0      	uxtb	r0, r6
100563e4:	b014      	add	sp, #80	@ 0x50
100563e6:	bd70      	pop	{r4, r5, r6, pc}

100563e8 <GAP_set_controller_random_address_ucfg_weak>:
100563e8:	b580      	push	{r7, lr}
100563ea:	f003 f851 	bl	10059490 <hci_le_set_random_address>
100563ee:	bd80      	pop	{r7, pc}

100563f0 <GAP_init_advertising_sets_ucfg_weak>:
100563f0:	2000      	movs	r0, #0
100563f2:	4770      	bx	lr

100563f4 <GAP_start_privacy_timer>:
100563f4:	b5b0      	push	{r4, r5, r7, lr}
100563f6:	4602      	mov	r2, r0
100563f8:	4810      	ldr	r0, [pc, #64]	@ (1005643c <__arm_cp.47_0>)
100563fa:	6800      	ldr	r0, [r0, #0]
100563fc:	4605      	mov	r5, r0
100563fe:	355a      	adds	r5, #90	@ 0x5a
10056400:	2900      	cmp	r1, #0
10056402:	d108      	bne.n	10056416 <GAP_start_privacy_timer+0x22>
10056404:	78a9      	ldrb	r1, [r5, #2]
10056406:	0689      	lsls	r1, r1, #26
10056408:	2400      	movs	r4, #0
1005640a:	0f89      	lsrs	r1, r1, #30
1005640c:	d014      	beq.n	10056438 <GAP_start_privacy_timer+0x44>
1005640e:	7969      	ldrb	r1, [r5, #5]
10056410:	2302      	movs	r3, #2
10056412:	400b      	ands	r3, r1
10056414:	d010      	beq.n	10056438 <GAP_start_privacy_timer+0x44>
10056416:	2a00      	cmp	r2, #0
10056418:	d001      	beq.n	1005641e <GAP_start_privacy_timer+0x2a>
1005641a:	4b09      	ldr	r3, [pc, #36]	@ (10056440 <__arm_cp.47_1>)
1005641c:	e003      	b.n	10056426 <GAP_start_privacy_timer+0x32>
1005641e:	217d      	movs	r1, #125	@ 0x7d
10056420:	00c9      	lsls	r1, r1, #3
10056422:	882b      	ldrh	r3, [r5, #0]
10056424:	434b      	muls	r3, r1
10056426:	2401      	movs	r4, #1
10056428:	4621      	mov	r1, r4
1005642a:	4622      	mov	r2, r4
1005642c:	f00c fad5 	bl	100629da <CST_start>
10056430:	7968      	ldrb	r0, [r5, #5]
10056432:	21fd      	movs	r1, #253	@ 0xfd
10056434:	4001      	ands	r1, r0
10056436:	7169      	strb	r1, [r5, #5]
10056438:	4620      	mov	r0, r4
1005643a:	bdb0      	pop	{r4, r5, r7, pc}

1005643c <__arm_cp.47_0>:
1005643c:	20002a84 	.word	0x20002a84

10056440 <__arm_cp.47_1>:
10056440:	00007530 	.word	0x00007530

10056444 <GAP_generate_new_rpa>:
10056444:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10056446:	4d0d      	ldr	r5, [pc, #52]	@ (1005647c <__arm_cp.48_0>)
10056448:	6828      	ldr	r0, [r5, #0]
1005644a:	215f      	movs	r1, #95	@ 0x5f
1005644c:	5c40      	ldrb	r0, [r0, r1]
1005644e:	0780      	lsls	r0, r0, #30
10056450:	d401      	bmi.n	10056456 <GAP_generate_new_rpa+0x12>
10056452:	240c      	movs	r4, #12
10056454:	e00f      	b.n	10056476 <GAP_generate_new_rpa+0x32>
10056456:	466c      	mov	r4, sp
10056458:	4620      	mov	r0, r4
1005645a:	f00b f997 	bl	1006178c <smp_sap_crt_generate_rpa>
1005645e:	4620      	mov	r0, r4
10056460:	f7ff ffc2 	bl	100563e8 <GAP_set_controller_random_address_ucfg_weak>
10056464:	4604      	mov	r4, r0
10056466:	2800      	cmp	r0, #0
10056468:	d105      	bne.n	10056476 <GAP_generate_new_rpa+0x32>
1005646a:	6828      	ldr	r0, [r5, #0]
1005646c:	3066      	adds	r0, #102	@ 0x66
1005646e:	4669      	mov	r1, sp
10056470:	2206      	movs	r2, #6
10056472:	f7fc f973 	bl	1005275c <BLEPLAT_MemCpy>
10056476:	4620      	mov	r0, r4
10056478:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005647a:	46c0      	nop			@ (mov r8, r8)

1005647c <__arm_cp.48_0>:
1005647c:	20002a84 	.word	0x20002a84

10056480 <GAP_get_current_address>:
10056480:	b5b0      	push	{r4, r5, r7, lr}
10056482:	460d      	mov	r5, r1
10056484:	4604      	mov	r4, r0
10056486:	480f      	ldr	r0, [pc, #60]	@ (100564c4 <__arm_cp.49_0>)
10056488:	6800      	ldr	r0, [r0, #0]
1005648a:	215c      	movs	r1, #92	@ 0x5c
1005648c:	5c40      	ldrb	r0, [r0, r1]
1005648e:	0680      	lsls	r0, r0, #26
10056490:	0f80      	lsrs	r0, r0, #30
10056492:	d005      	beq.n	100564a0 <GAP_get_current_address+0x20>
10056494:	2001      	movs	r0, #1
10056496:	7028      	strb	r0, [r5, #0]
10056498:	4620      	mov	r0, r4
1005649a:	f000 f815 	bl	100564c8 <GAP_get_rpa>
1005649e:	e00e      	b.n	100564be <GAP_get_current_address+0x3e>
100564a0:	f7ff ff5a 	bl	10056358 <GAP_get_own_address_type>
100564a4:	2800      	cmp	r0, #0
100564a6:	d005      	beq.n	100564b4 <GAP_get_current_address+0x34>
100564a8:	2001      	movs	r0, #1
100564aa:	7028      	strb	r0, [r5, #0]
100564ac:	4620      	mov	r0, r4
100564ae:	f000 f81f 	bl	100564f0 <GAP_get_static_random_address>
100564b2:	e004      	b.n	100564be <GAP_get_current_address+0x3e>
100564b4:	2000      	movs	r0, #0
100564b6:	7028      	strb	r0, [r5, #0]
100564b8:	4620      	mov	r0, r4
100564ba:	f000 f80f 	bl	100564dc <GAP_get_public_address>
100564be:	2000      	movs	r0, #0
100564c0:	bdb0      	pop	{r4, r5, r7, pc}
100564c2:	46c0      	nop			@ (mov r8, r8)

100564c4 <__arm_cp.49_0>:
100564c4:	20002a84 	.word	0x20002a84

100564c8 <GAP_get_rpa>:
100564c8:	b580      	push	{r7, lr}
100564ca:	4903      	ldr	r1, [pc, #12]	@ (100564d8 <__arm_cp.50_0>)
100564cc:	6809      	ldr	r1, [r1, #0]
100564ce:	3166      	adds	r1, #102	@ 0x66
100564d0:	2206      	movs	r2, #6
100564d2:	f7fc f943 	bl	1005275c <BLEPLAT_MemCpy>
100564d6:	bd80      	pop	{r7, pc}

100564d8 <__arm_cp.50_0>:
100564d8:	20002a84 	.word	0x20002a84

100564dc <GAP_get_public_address>:
100564dc:	b580      	push	{r7, lr}
100564de:	4903      	ldr	r1, [pc, #12]	@ (100564ec <__arm_cp.51_0>)
100564e0:	6809      	ldr	r1, [r1, #0]
100564e2:	2206      	movs	r2, #6
100564e4:	f7fc f93a 	bl	1005275c <BLEPLAT_MemCpy>
100564e8:	bd80      	pop	{r7, pc}
100564ea:	46c0      	nop			@ (mov r8, r8)

100564ec <__arm_cp.51_0>:
100564ec:	20002a7c 	.word	0x20002a7c

100564f0 <GAP_get_static_random_address>:
100564f0:	b580      	push	{r7, lr}
100564f2:	4903      	ldr	r1, [pc, #12]	@ (10056500 <__arm_cp.52_0>)
100564f4:	6809      	ldr	r1, [r1, #0]
100564f6:	3160      	adds	r1, #96	@ 0x60
100564f8:	2206      	movs	r2, #6
100564fa:	f7fc f92f 	bl	1005275c <BLEPLAT_MemCpy>
100564fe:	bd80      	pop	{r7, pc}

10056500 <__arm_cp.52_0>:
10056500:	20002a84 	.word	0x20002a84

10056504 <GAP_enable_rpa_change_at_timeout>:
10056504:	4902      	ldr	r1, [pc, #8]	@ (10056510 <__arm_cp.53_0>)
10056506:	6809      	ldr	r1, [r1, #0]
10056508:	226c      	movs	r2, #108	@ 0x6c
1005650a:	5488      	strb	r0, [r1, r2]
1005650c:	4770      	bx	lr
1005650e:	46c0      	nop			@ (mov r8, r8)

10056510 <__arm_cp.53_0>:
10056510:	20002a84 	.word	0x20002a84

10056514 <GAP_check_discoverability_mode>:
10056514:	1e43      	subs	r3, r0, #1
10056516:	2b02      	cmp	r3, #2
10056518:	d309      	bcc.n	1005652e <GAP_check_discoverability_mode+0x1a>
1005651a:	2800      	cmp	r0, #0
1005651c:	d00c      	beq.n	10056538 <GAP_check_discoverability_mode+0x24>
1005651e:	2803      	cmp	r0, #3
10056520:	d109      	bne.n	10056536 <GAP_check_discoverability_mode+0x22>
10056522:	2001      	movs	r0, #1
10056524:	4001      	ands	r1, r0
10056526:	4249      	negs	r1, r1
10056528:	2012      	movs	r0, #18
1005652a:	4008      	ands	r0, r1
1005652c:	4770      	bx	lr
1005652e:	2a00      	cmp	r2, #0
10056530:	d101      	bne.n	10056536 <GAP_check_discoverability_mode+0x22>
10056532:	4610      	mov	r0, r2
10056534:	4770      	bx	lr
10056536:	2012      	movs	r0, #18
10056538:	4770      	bx	lr
	...

1005653c <GAP_advEvtProp_to_advType>:
1005653c:	4601      	mov	r1, r0
1005653e:	3910      	subs	r1, #16
10056540:	2905      	cmp	r1, #5
10056542:	d80a      	bhi.n	1005655a <GAP_advEvtProp_to_advType+0x1e>
10056544:	2000      	movs	r0, #0
10056546:	46c0      	nop			@ (mov r8, r8)
10056548:	4479      	add	r1, pc
1005654a:	7909      	ldrb	r1, [r1, #4]
1005654c:	0049      	lsls	r1, r1, #1
1005654e:	448f      	add	pc, r1
10056550:	090a0802 	.word	0x090a0802
10056554:	0c08      	.short	0x0c08
10056556:	2003      	movs	r0, #3
10056558:	4770      	bx	lr
1005655a:	281d      	cmp	r0, #29
1005655c:	d101      	bne.n	10056562 <GAP_advEvtProp_to_advType+0x26>
1005655e:	2001      	movs	r0, #1
10056560:	4770      	bx	lr
10056562:	2005      	movs	r0, #5
10056564:	4770      	bx	lr
10056566:	2002      	movs	r0, #2
10056568:	4770      	bx	lr
1005656a:	2004      	movs	r0, #4
1005656c:	4770      	bx	lr
	...

10056570 <GAP_set_legacy_advertising_configuration>:
10056570:	b5f0      	push	{r4, r5, r6, r7, lr}
10056572:	b08b      	sub	sp, #44	@ 0x2c
10056574:	4615      	mov	r5, r2
10056576:	460f      	mov	r7, r1
10056578:	4601      	mov	r1, r0
1005657a:	06fa      	lsls	r2, r7, #27
1005657c:	2012      	movs	r0, #18
1005657e:	2a00      	cmp	r2, #0
10056580:	d53f      	bpl.n	10056602 <GAP_set_legacy_advertising_configuration+0x92>
10056582:	461c      	mov	r4, r3
10056584:	2301      	movs	r3, #1
10056586:	039a      	lsls	r2, r3, #14
10056588:	4295      	cmp	r5, r2
1005658a:	d83a      	bhi.n	10056602 <GAP_set_legacy_advertising_configuration+0x92>
1005658c:	4294      	cmp	r4, r2
1005658e:	d838      	bhi.n	10056602 <GAP_set_legacy_advertising_configuration+0x92>
10056590:	930a      	str	r3, [sp, #40]	@ 0x28
10056592:	9813      	ldr	r0, [sp, #76]	@ 0x4c
10056594:	9009      	str	r0, [sp, #36]	@ 0x24
10056596:	9812      	ldr	r0, [sp, #72]	@ 0x48
10056598:	9008      	str	r0, [sp, #32]
1005659a:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005659c:	9006      	str	r0, [sp, #24]
1005659e:	9810      	ldr	r0, [sp, #64]	@ 0x40
100565a0:	9007      	str	r0, [sp, #28]
100565a2:	4819      	ldr	r0, [pc, #100]	@ (10056608 <__arm_cp.2_0>)
100565a4:	6800      	ldr	r0, [r0, #0]
100565a6:	6d46      	ldr	r6, [r0, #84]	@ 0x54
100565a8:	2000      	movs	r0, #0
100565aa:	9004      	str	r0, [sp, #16]
100565ac:	7070      	strb	r0, [r6, #1]
100565ae:	7031      	strb	r1, [r6, #0]
100565b0:	f7ff fed2 	bl	10056358 <GAP_get_own_address_type>
100565b4:	9005      	str	r0, [sp, #20]
100565b6:	4638      	mov	r0, r7
100565b8:	f7ff ffc0 	bl	1005653c <GAP_advEvtProp_to_advType>
100565bc:	4602      	mov	r2, r0
100565be:	7870      	ldrb	r0, [r6, #1]
100565c0:	2120      	movs	r1, #32
100565c2:	4301      	orrs	r1, r0
100565c4:	7071      	strb	r1, [r6, #1]
100565c6:	2a04      	cmp	r2, #4
100565c8:	d808      	bhi.n	100565dc <GAP_set_legacy_advertising_configuration+0x6c>
100565ca:	2117      	movs	r1, #23
100565cc:	40d1      	lsrs	r1, r2
100565ce:	07c9      	lsls	r1, r1, #31
100565d0:	d004      	beq.n	100565dc <GAP_set_legacy_advertising_configuration+0x6c>
100565d2:	b251      	sxtb	r1, r2
100565d4:	a30d      	add	r3, pc, #52	@ (adr r3, 1005660c <__arm_cp.2_0+0x4>)
100565d6:	5c59      	ldrb	r1, [r3, r1]
100565d8:	4308      	orrs	r0, r1
100565da:	7070      	strb	r0, [r6, #1]
100565dc:	9806      	ldr	r0, [sp, #24]
100565de:	9000      	str	r0, [sp, #0]
100565e0:	9808      	ldr	r0, [sp, #32]
100565e2:	9001      	str	r0, [sp, #4]
100565e4:	9807      	ldr	r0, [sp, #28]
100565e6:	9002      	str	r0, [sp, #8]
100565e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
100565ea:	9003      	str	r0, [sp, #12]
100565ec:	b2a8      	uxth	r0, r5
100565ee:	b2a1      	uxth	r1, r4
100565f0:	9b05      	ldr	r3, [sp, #20]
100565f2:	f002 fe8d 	bl	10059310 <hci_le_set_advertising_parameters>
100565f6:	2800      	cmp	r0, #0
100565f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
100565fa:	d102      	bne.n	10056602 <GAP_set_legacy_advertising_configuration+0x92>
100565fc:	9804      	ldr	r0, [sp, #16]
100565fe:	74b0      	strb	r0, [r6, #18]
10056600:	7431      	strb	r1, [r6, #16]
10056602:	b00b      	add	sp, #44	@ 0x2c
10056604:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056606:	46c0      	nop			@ (mov r8, r8)

10056608 <__arm_cp.2_0>:
10056608:	20002a84 	.word	0x20002a84
1005660c:	70287028 	.word	0x70287028
10056610:	00000030 	.word	0x00000030

10056614 <GAP_get_advertising_set_index>:
10056614:	b570      	push	{r4, r5, r6, lr}
10056616:	4602      	mov	r2, r0
10056618:	480b      	ldr	r0, [pc, #44]	@ (10056648 <__arm_cp.4_0>)
1005661a:	7e84      	ldrb	r4, [r0, #26]
1005661c:	480b      	ldr	r0, [pc, #44]	@ (1005664c <__arm_cp.4_1>)
1005661e:	6800      	ldr	r0, [r0, #0]
10056620:	6d45      	ldr	r5, [r0, #84]	@ 0x54
10056622:	3510      	adds	r5, #16
10056624:	2000      	movs	r0, #0
10056626:	4603      	mov	r3, r0
10056628:	429c      	cmp	r4, r3
1005662a:	d008      	beq.n	1005663e <GAP_get_advertising_set_index+0x2a>
1005662c:	782e      	ldrb	r6, [r5, #0]
1005662e:	2e00      	cmp	r6, #0
10056630:	d008      	beq.n	10056644 <GAP_get_advertising_set_index+0x30>
10056632:	78ae      	ldrb	r6, [r5, #2]
10056634:	4296      	cmp	r6, r2
10056636:	d004      	beq.n	10056642 <GAP_get_advertising_set_index+0x2e>
10056638:	3514      	adds	r5, #20
1005663a:	1c5b      	adds	r3, r3, #1
1005663c:	e7f4      	b.n	10056628 <GAP_get_advertising_set_index+0x14>
1005663e:	4623      	mov	r3, r4
10056640:	e000      	b.n	10056644 <GAP_get_advertising_set_index+0x30>
10056642:	2001      	movs	r0, #1
10056644:	700b      	strb	r3, [r1, #0]
10056646:	bd70      	pop	{r4, r5, r6, pc}

10056648 <__arm_cp.4_0>:
10056648:	20002ae4 	.word	0x20002ae4

1005664c <__arm_cp.4_1>:
1005664c:	20002a84 	.word	0x20002a84

10056650 <GAP_set_legacy_advertising_enable>:
10056650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056652:	4604      	mov	r4, r0
10056654:	4819      	ldr	r0, [pc, #100]	@ (100566bc <__arm_cp.5_0>)
10056656:	6800      	ldr	r0, [r0, #0]
10056658:	6d47      	ldr	r7, [r0, #84]	@ 0x54
1005665a:	2c00      	cmp	r4, #0
1005665c:	d00d      	beq.n	1005667a <GAP_set_legacy_advertising_enable+0x2a>
1005665e:	7c38      	ldrb	r0, [r7, #16]
10056660:	2800      	cmp	r0, #0
10056662:	d023      	beq.n	100566ac <GAP_set_legacy_advertising_enable+0x5c>
10056664:	2000      	movs	r0, #0
10056666:	4601      	mov	r1, r0
10056668:	f000 f82a 	bl	100566c0 <GAP_check_flags>
1005666c:	4605      	mov	r5, r0
1005666e:	2800      	cmp	r0, #0
10056670:	d122      	bne.n	100566b8 <GAP_set_legacy_advertising_enable+0x68>
10056672:	f7ff fee7 	bl	10056444 <GAP_generate_new_rpa>
10056676:	4606      	mov	r6, r0
10056678:	e000      	b.n	1005667c <GAP_set_legacy_advertising_enable+0x2c>
1005667a:	260c      	movs	r6, #12
1005667c:	4620      	mov	r0, r4
1005667e:	f002 fea7 	bl	100593d0 <hci_le_set_advertising_enable>
10056682:	4605      	mov	r5, r0
10056684:	2800      	cmp	r0, #0
10056686:	d117      	bne.n	100566b8 <GAP_set_legacy_advertising_enable+0x68>
10056688:	2500      	movs	r5, #0
1005668a:	4620      	mov	r0, r4
1005668c:	4629      	mov	r1, r5
1005668e:	462a      	mov	r2, r5
10056690:	f000 f870 	bl	10056774 <GAP_set_discoverability_mode>
10056694:	2c00      	cmp	r4, #0
10056696:	d00b      	beq.n	100566b0 <GAP_set_legacy_advertising_enable+0x60>
10056698:	2001      	movs	r0, #1
1005669a:	7478      	strb	r0, [r7, #17]
1005669c:	2e00      	cmp	r6, #0
1005669e:	d10b      	bne.n	100566b8 <GAP_set_legacy_advertising_enable+0x68>
100566a0:	2500      	movs	r5, #0
100566a2:	4628      	mov	r0, r5
100566a4:	4629      	mov	r1, r5
100566a6:	f7ff fea5 	bl	100563f4 <GAP_start_privacy_timer>
100566aa:	e005      	b.n	100566b8 <GAP_set_legacy_advertising_enable+0x68>
100566ac:	25d3      	movs	r5, #211	@ 0xd3
100566ae:	e003      	b.n	100566b8 <GAP_set_legacy_advertising_enable+0x68>
100566b0:	2500      	movs	r5, #0
100566b2:	747d      	strb	r5, [r7, #17]
100566b4:	f7ff fe0a 	bl	100562cc <GAP_stop_privacy_timer>
100566b8:	4628      	mov	r0, r5
100566ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100566bc <__arm_cp.5_0>:
100566bc:	20002a84 	.word	0x20002a84

100566c0 <GAP_check_flags>:
100566c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100566c2:	4a28      	ldr	r2, [pc, #160]	@ (10056764 <__arm_cp.6_0>)
100566c4:	7e92      	ldrb	r2, [r2, #26]
100566c6:	2512      	movs	r5, #18
100566c8:	428a      	cmp	r2, r1
100566ca:	d925      	bls.n	10056718 <GAP_check_flags+0x58>
100566cc:	2800      	cmp	r0, #0
100566ce:	d100      	bne.n	100566d2 <GAP_check_flags+0x12>
100566d0:	4601      	mov	r1, r0
100566d2:	2214      	movs	r2, #20
100566d4:	434a      	muls	r2, r1
100566d6:	4824      	ldr	r0, [pc, #144]	@ (10056768 <__arm_cp.6_1>)
100566d8:	6800      	ldr	r0, [r0, #0]
100566da:	6d43      	ldr	r3, [r0, #84]	@ 0x54
100566dc:	1899      	adds	r1, r3, r2
100566de:	784c      	ldrb	r4, [r1, #1]
100566e0:	06a0      	lsls	r0, r4, #26
100566e2:	0fc6      	lsrs	r6, r0, #31
100566e4:	2000      	movs	r0, #0
100566e6:	2e00      	cmp	r6, #0
100566e8:	d002      	beq.n	100566f0 <GAP_check_flags+0x30>
100566ea:	2710      	movs	r7, #16
100566ec:	4027      	ands	r7, r4
100566ee:	d114      	bne.n	1005671a <GAP_check_flags+0x5a>
100566f0:	2e00      	cmp	r6, #0
100566f2:	d102      	bne.n	100566fa <GAP_check_flags+0x3a>
100566f4:	2608      	movs	r6, #8
100566f6:	4034      	ands	r4, r6
100566f8:	d10f      	bne.n	1005671a <GAP_check_flags+0x5a>
100566fa:	5c9e      	ldrb	r6, [r3, r2]
100566fc:	684c      	ldr	r4, [r1, #4]
100566fe:	8988      	ldrh	r0, [r1, #12]
10056700:	4621      	mov	r1, r4
10056702:	f000 f8bb 	bl	1005687c <GAP_search_flags_index>
10056706:	4919      	ldr	r1, [pc, #100]	@ (1005676c <__arm_cp.6_2>)
10056708:	4288      	cmp	r0, r1
1005670a:	d008      	beq.n	1005671e <GAP_check_flags+0x5e>
1005670c:	1900      	adds	r0, r0, r4
1005670e:	7881      	ldrb	r1, [r0, #2]
10056710:	0748      	lsls	r0, r1, #29
10056712:	d40b      	bmi.n	1005672c <GAP_check_flags+0x6c>
10056714:	20d4      	movs	r0, #212	@ 0xd4
10056716:	e000      	b.n	1005671a <GAP_check_flags+0x5a>
10056718:	4628      	mov	r0, r5
1005671a:	b2c0      	uxtb	r0, r0
1005671c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005671e:	2e03      	cmp	r6, #3
10056720:	4628      	mov	r0, r5
10056722:	d8fa      	bhi.n	1005671a <GAP_check_flags+0x5a>
10056724:	00f1      	lsls	r1, r6, #3
10056726:	4812      	ldr	r0, [pc, #72]	@ (10056770 <__arm_cp.6_3>)
10056728:	40c8      	lsrs	r0, r1
1005672a:	e7f6      	b.n	1005671a <GAP_check_flags+0x5a>
1005672c:	2e03      	cmp	r6, #3
1005672e:	4628      	mov	r0, r5
10056730:	d8f3      	bhi.n	1005671a <GAP_check_flags+0x5a>
10056732:	46c0      	nop			@ (mov r8, r8)
10056734:	447e      	add	r6, pc
10056736:	7936      	ldrb	r6, [r6, #4]
10056738:	0076      	lsls	r6, r6, #1
1005673a:	44b7      	add	pc, r6
1005673c:	010d0601 	.word	0x010d0601
10056740:	2003      	movs	r0, #3
10056742:	4001      	ands	r1, r0
10056744:	d105      	bne.n	10056752 <GAP_check_flags+0x92>
10056746:	4608      	mov	r0, r1
10056748:	e7e7      	b.n	1005671a <GAP_check_flags+0x5a>
1005674a:	2003      	movs	r0, #3
1005674c:	4001      	ands	r1, r0
1005674e:	2901      	cmp	r1, #1
10056750:	d006      	beq.n	10056760 <GAP_check_flags+0xa0>
10056752:	202b      	movs	r0, #43	@ 0x2b
10056754:	43c0      	mvns	r0, r0
10056756:	e7e0      	b.n	1005671a <GAP_check_flags+0x5a>
10056758:	2003      	movs	r0, #3
1005675a:	4001      	ands	r1, r0
1005675c:	2902      	cmp	r1, #2
1005675e:	d1f8      	bne.n	10056752 <GAP_check_flags+0x92>
10056760:	2000      	movs	r0, #0
10056762:	e7da      	b.n	1005671a <GAP_check_flags+0x5a>

10056764 <__arm_cp.6_0>:
10056764:	20002ae4 	.word	0x20002ae4

10056768 <__arm_cp.6_1>:
10056768:	20002a84 	.word	0x20002a84

1005676c <__arm_cp.6_2>:
1005676c:	0000ffff 	.word	0x0000ffff

10056770 <__arm_cp.6_3>:
10056770:	00d4d400 	.word	0x00d4d400

10056774 <GAP_set_discoverability_mode>:
10056774:	b570      	push	{r4, r5, r6, lr}
10056776:	4603      	mov	r3, r0
10056778:	2900      	cmp	r1, #0
1005677a:	d100      	bne.n	1005677e <GAP_set_discoverability_mode+0xa>
1005677c:	460a      	mov	r2, r1
1005677e:	4829      	ldr	r0, [pc, #164]	@ (10056824 <__arm_cp.7_0>)
10056780:	6800      	ldr	r0, [r0, #0]
10056782:	6d41      	ldr	r1, [r0, #84]	@ 0x54
10056784:	2b01      	cmp	r3, #1
10056786:	d10c      	bne.n	100567a2 <GAP_set_discoverability_mode+0x2e>
10056788:	2314      	movs	r3, #20
1005678a:	4353      	muls	r3, r2
1005678c:	5cca      	ldrb	r2, [r1, r3]
1005678e:	2a01      	cmp	r2, #1
10056790:	d033      	beq.n	100567fa <GAP_set_discoverability_mode+0x86>
10056792:	2a02      	cmp	r2, #2
10056794:	d13e      	bne.n	10056814 <GAP_set_discoverability_mode+0xa0>
10056796:	18ca      	adds	r2, r1, r3
10056798:	7894      	ldrb	r4, [r2, #2]
1005679a:	2004      	movs	r0, #4
1005679c:	4320      	orrs	r0, r4
1005679e:	7090      	strb	r0, [r2, #2]
100567a0:	e03a      	b.n	10056818 <GAP_set_discoverability_mode+0xa4>
100567a2:	2314      	movs	r3, #20
100567a4:	4353      	muls	r3, r2
100567a6:	18c9      	adds	r1, r1, r3
100567a8:	1c8e      	adds	r6, r1, #2
100567aa:	7889      	ldrb	r1, [r1, #2]
100567ac:	0789      	lsls	r1, r1, #30
100567ae:	d521      	bpl.n	100567f4 <GAP_set_discoverability_mode+0x80>
100567b0:	2400      	movs	r4, #0
100567b2:	4621      	mov	r1, r4
100567b4:	f00c f8db 	bl	1006296e <CST_stop>
100567b8:	481b      	ldr	r0, [pc, #108]	@ (10056828 <__arm_cp.7_1>)
100567ba:	6800      	ldr	r0, [r0, #0]
100567bc:	214e      	movs	r1, #78	@ 0x4e
100567be:	5c40      	ldrb	r0, [r0, r1]
100567c0:	07c0      	lsls	r0, r0, #31
100567c2:	d017      	beq.n	100567f4 <GAP_set_discoverability_mode+0x80>
100567c4:	4819      	ldr	r0, [pc, #100]	@ (1005682c <__arm_cp.7_2>)
100567c6:	6800      	ldr	r0, [r0, #0]
100567c8:	6980      	ldr	r0, [r0, #24]
100567ca:	2244      	movs	r2, #68	@ 0x44
100567cc:	2502      	movs	r5, #2
100567ce:	4629      	mov	r1, r5
100567d0:	462b      	mov	r3, r5
100567d2:	f7fe fd0f 	bl	100551f4 <aci_event_fifo_push_header>
100567d6:	2800      	cmp	r0, #0
100567d8:	d00c      	beq.n	100567f4 <GAP_set_discoverability_mode+0x80>
100567da:	4601      	mov	r1, r0
100567dc:	7185      	strb	r5, [r0, #6]
100567de:	71c4      	strb	r4, [r0, #7]
100567e0:	7204      	strb	r4, [r0, #8]
100567e2:	20ff      	movs	r0, #255	@ 0xff
100567e4:	7148      	strb	r0, [r1, #5]
100567e6:	2082      	movs	r0, #130	@ 0x82
100567e8:	7108      	strb	r0, [r1, #4]
100567ea:	2004      	movs	r0, #4
100567ec:	7248      	strb	r0, [r1, #9]
100567ee:	4628      	mov	r0, r5
100567f0:	f7fe fd9d 	bl	1005532e <aci_event_fifo_push>
100567f4:	2000      	movs	r0, #0
100567f6:	7030      	strb	r0, [r6, #0]
100567f8:	bd70      	pop	{r4, r5, r6, pc}
100567fa:	18c9      	adds	r1, r1, r3
100567fc:	784a      	ldrb	r2, [r1, #1]
100567fe:	788b      	ldrb	r3, [r1, #2]
10056800:	4313      	orrs	r3, r2
10056802:	2202      	movs	r2, #2
10056804:	431a      	orrs	r2, r3
10056806:	708a      	strb	r2, [r1, #2]
10056808:	2100      	movs	r1, #0
1005680a:	2201      	movs	r2, #1
1005680c:	4b08      	ldr	r3, [pc, #32]	@ (10056830 <__arm_cp.7_3>)
1005680e:	f00c f8e4 	bl	100629da <CST_start>
10056812:	bd70      	pop	{r4, r5, r6, pc}
10056814:	18c8      	adds	r0, r1, r3
10056816:	7880      	ldrb	r0, [r0, #2]
10056818:	18c9      	adds	r1, r1, r3
1005681a:	784a      	ldrb	r2, [r1, #1]
1005681c:	4302      	orrs	r2, r0
1005681e:	708a      	strb	r2, [r1, #2]
10056820:	bd70      	pop	{r4, r5, r6, pc}
10056822:	46c0      	nop			@ (mov r8, r8)

10056824 <__arm_cp.7_0>:
10056824:	20002a84 	.word	0x20002a84

10056828 <__arm_cp.7_1>:
10056828:	20002ad0 	.word	0x20002ad0

1005682c <__arm_cp.7_2>:
1005682c:	20002a80 	.word	0x20002a80

10056830 <__arm_cp.7_3>:
10056830:	0002bf20 	.word	0x0002bf20

10056834 <GAP_suspend_resume_active_advertising_sets_ucfg_weak>:
10056834:	b580      	push	{r7, lr}
10056836:	f000 f801 	bl	1005683c <GAP_suspend_resume_active_advertising_sets_legacy>
1005683a:	bd80      	pop	{r7, pc}

1005683c <GAP_suspend_resume_active_advertising_sets_legacy>:
1005683c:	b580      	push	{r7, lr}
1005683e:	4905      	ldr	r1, [pc, #20]	@ (10056854 <__arm_cp.11_0>)
10056840:	6809      	ldr	r1, [r1, #0]
10056842:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10056844:	7c49      	ldrb	r1, [r1, #17]
10056846:	2901      	cmp	r1, #1
10056848:	d102      	bne.n	10056850 <GAP_suspend_resume_active_advertising_sets_legacy+0x14>
1005684a:	f002 fdc1 	bl	100593d0 <hci_le_set_advertising_enable>
1005684e:	bd80      	pop	{r7, pc}
10056850:	2000      	movs	r0, #0
10056852:	bd80      	pop	{r7, pc}

10056854 <__arm_cp.11_0>:
10056854:	20002a84 	.word	0x20002a84

10056858 <GAP_set_legacy_advertising_data>:
10056858:	b5b0      	push	{r4, r5, r7, lr}
1005685a:	460c      	mov	r4, r1
1005685c:	4605      	mov	r5, r0
1005685e:	b2c0      	uxtb	r0, r0
10056860:	f008 fe9e 	bl	1005f5a0 <ll_set_legacy_advertising_data_ptr>
10056864:	2800      	cmp	r0, #0
10056866:	d000      	beq.n	1005686a <GAP_set_legacy_advertising_data+0x12>
10056868:	bdb0      	pop	{r4, r5, r7, pc}
1005686a:	4903      	ldr	r1, [pc, #12]	@ (10056878 <__arm_cp.12_0>)
1005686c:	6809      	ldr	r1, [r1, #0]
1005686e:	6d49      	ldr	r1, [r1, #84]	@ 0x54
10056870:	818d      	strh	r5, [r1, #12]
10056872:	604c      	str	r4, [r1, #4]
10056874:	bdb0      	pop	{r4, r5, r7, pc}
10056876:	46c0      	nop			@ (mov r8, r8)

10056878 <__arm_cp.12_0>:
10056878:	20002a84 	.word	0x20002a84

1005687c <GAP_search_flags_index>:
1005687c:	b5b0      	push	{r4, r5, r7, lr}
1005687e:	4a0a      	ldr	r2, [pc, #40]	@ (100568a8 <__arm_cp.16_0>)
10056880:	2803      	cmp	r0, #3
10056882:	d30f      	bcc.n	100568a4 <GAP_search_flags_index+0x28>
10056884:	2300      	movs	r3, #0
10056886:	b29d      	uxth	r5, r3
10056888:	5d4c      	ldrb	r4, [r1, r5]
1005688a:	2c02      	cmp	r4, #2
1005688c:	d103      	bne.n	10056896 <GAP_search_flags_index+0x1a>
1005688e:	186d      	adds	r5, r5, r1
10056890:	786d      	ldrb	r5, [r5, #1]
10056892:	2d01      	cmp	r5, #1
10056894:	d005      	beq.n	100568a2 <GAP_search_flags_index+0x26>
10056896:	191b      	adds	r3, r3, r4
10056898:	1c5b      	adds	r3, r3, #1
1005689a:	b29c      	uxth	r4, r3
1005689c:	4284      	cmp	r4, r0
1005689e:	d3f2      	bcc.n	10056886 <GAP_search_flags_index+0xa>
100568a0:	e000      	b.n	100568a4 <GAP_search_flags_index+0x28>
100568a2:	461a      	mov	r2, r3
100568a4:	b290      	uxth	r0, r2
100568a6:	bdb0      	pop	{r4, r5, r7, pc}

100568a8 <__arm_cp.16_0>:
100568a8:	0000ffff 	.word	0x0000ffff

100568ac <GAP_check_adv_status>:
100568ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100568ae:	4605      	mov	r5, r0
100568b0:	2600      	movs	r6, #0
100568b2:	7006      	strb	r6, [r0, #0]
100568b4:	2401      	movs	r4, #1
100568b6:	9100      	str	r1, [sp, #0]
100568b8:	700c      	strb	r4, [r1, #0]
100568ba:	4816      	ldr	r0, [pc, #88]	@ (10056914 <__arm_cp.17_0>)
100568bc:	6800      	ldr	r0, [r0, #0]
100568be:	6d47      	ldr	r7, [r0, #84]	@ 0x54
100568c0:	f7ff fb86 	bl	10055fd0 <gap_extended_adv_scan_supported>
100568c4:	2800      	cmp	r0, #0
100568c6:	d001      	beq.n	100568cc <GAP_check_adv_status+0x20>
100568c8:	4813      	ldr	r0, [pc, #76]	@ (10056918 <__arm_cp.17_1>)
100568ca:	7e84      	ldrb	r4, [r0, #26]
100568cc:	b2e1      	uxtb	r1, r4
100568ce:	3711      	adds	r7, #17
100568d0:	4630      	mov	r0, r6
100568d2:	4632      	mov	r2, r6
100568d4:	2900      	cmp	r1, #0
100568d6:	d00f      	beq.n	100568f8 <GAP_check_adv_status+0x4c>
100568d8:	783b      	ldrb	r3, [r7, #0]
100568da:	2b00      	cmp	r3, #0
100568dc:	d009      	beq.n	100568f2 <GAP_check_adv_status+0x46>
100568de:	2b02      	cmp	r3, #2
100568e0:	d100      	bne.n	100568e4 <GAP_check_adv_status+0x38>
100568e2:	2001      	movs	r0, #1
100568e4:	463a      	mov	r2, r7
100568e6:	3a0f      	subs	r2, #15
100568e8:	7813      	ldrb	r3, [r2, #0]
100568ea:	2201      	movs	r2, #1
100568ec:	079b      	lsls	r3, r3, #30
100568ee:	d500      	bpl.n	100568f2 <GAP_check_adv_status+0x46>
100568f0:	4616      	mov	r6, r2
100568f2:	3714      	adds	r7, #20
100568f4:	1e49      	subs	r1, r1, #1
100568f6:	e7ed      	b.n	100568d4 <GAP_check_adv_status+0x28>
100568f8:	2a01      	cmp	r2, #1
100568fa:	d101      	bne.n	10056900 <GAP_check_adv_status+0x54>
100568fc:	2101      	movs	r1, #1
100568fe:	7029      	strb	r1, [r5, #0]
10056900:	2801      	cmp	r0, #1
10056902:	d002      	beq.n	1005690a <GAP_check_adv_status+0x5e>
10056904:	b2f0      	uxtb	r0, r6
10056906:	2801      	cmp	r0, #1
10056908:	d102      	bne.n	10056910 <GAP_check_adv_status+0x64>
1005690a:	2000      	movs	r0, #0
1005690c:	9900      	ldr	r1, [sp, #0]
1005690e:	7008      	strb	r0, [r1, #0]
10056910:	b2d0      	uxtb	r0, r2
10056912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056914 <__arm_cp.17_0>:
10056914:	20002a84 	.word	0x20002a84

10056918 <__arm_cp.17_1>:
10056918:	20002ae4 	.word	0x20002ae4

1005691c <GAP_ResumeAdvertising_ucfg_weak>:
1005691c:	b580      	push	{r7, lr}
1005691e:	2001      	movs	r0, #1
10056920:	f7ff ff8c 	bl	1005683c <GAP_suspend_resume_active_advertising_sets_legacy>
10056924:	bd80      	pop	{r7, pc}
	...

10056928 <GAT_att_cmn_init>:
10056928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005692a:	2001      	movs	r0, #1
1005692c:	2198      	movs	r1, #152	@ 0x98
1005692e:	f00a f9d5 	bl	10060cdc <csmem_mem_0_assign>
10056932:	4e2b      	ldr	r6, [pc, #172]	@ (100569e0 <__arm_cp.1_0>)
10056934:	6030      	str	r0, [r6, #0]
10056936:	4f2b      	ldr	r7, [pc, #172]	@ (100569e4 <__arm_cp.1_1>)
10056938:	7af8      	ldrb	r0, [r7, #11]
1005693a:	7b39      	ldrb	r1, [r7, #12]
1005693c:	1808      	adds	r0, r1, r0
1005693e:	2414      	movs	r4, #20
10056940:	4621      	mov	r1, r4
10056942:	f00a f9cb 	bl	10060cdc <csmem_mem_0_assign>
10056946:	6832      	ldr	r2, [r6, #0]
10056948:	2500      	movs	r5, #0
1005694a:	6355      	str	r5, [r2, #52]	@ 0x34
1005694c:	62d5      	str	r5, [r2, #44]	@ 0x2c
1005694e:	7af9      	ldrb	r1, [r7, #11]
10056950:	4603      	mov	r3, r0
10056952:	462f      	mov	r7, r5
10056954:	42b9      	cmp	r1, r7
10056956:	d00a      	beq.n	1005696e <GAT_att_cmn_init+0x46>
10056958:	611d      	str	r5, [r3, #16]
1005695a:	705f      	strb	r7, [r3, #1]
1005695c:	701f      	strb	r7, [r3, #0]
1005695e:	6832      	ldr	r2, [r6, #0]
10056960:	62d3      	str	r3, [r2, #44]	@ 0x2c
10056962:	4625      	mov	r5, r4
10056964:	437d      	muls	r5, r7
10056966:	1945      	adds	r5, r0, r5
10056968:	3314      	adds	r3, #20
1005696a:	1c7f      	adds	r7, r7, #1
1005696c:	e7f2      	b.n	10056954 <GAT_att_cmn_init+0x2c>
1005696e:	2300      	movs	r3, #0
10056970:	6313      	str	r3, [r2, #48]	@ 0x30
10056972:	4a1c      	ldr	r2, [pc, #112]	@ (100569e4 <__arm_cp.1_1>)
10056974:	7b12      	ldrb	r2, [r2, #12]
10056976:	1852      	adds	r2, r2, r1
10056978:	b2cd      	uxtb	r5, r1
1005697a:	42aa      	cmp	r2, r5
1005697c:	d90a      	bls.n	10056994 <GAT_att_cmn_init+0x6c>
1005697e:	4365      	muls	r5, r4
10056980:	27ff      	movs	r7, #255	@ 0xff
10056982:	5547      	strb	r7, [r0, r5]
10056984:	1945      	adds	r5, r0, r5
10056986:	612b      	str	r3, [r5, #16]
10056988:	7069      	strb	r1, [r5, #1]
1005698a:	6833      	ldr	r3, [r6, #0]
1005698c:	631d      	str	r5, [r3, #48]	@ 0x30
1005698e:	1c49      	adds	r1, r1, #1
10056990:	462b      	mov	r3, r5
10056992:	e7f1      	b.n	10056978 <GAT_att_cmn_init+0x50>
10056994:	0690      	lsls	r0, r2, #26
10056996:	0e00      	lsrs	r0, r0, #24
10056998:	1c41      	adds	r1, r0, #1
1005699a:	4c13      	ldr	r4, [pc, #76]	@ (100569e8 <__arm_cp.1_2>)
1005699c:	2201      	movs	r2, #1
1005699e:	4620      	mov	r0, r4
100569a0:	f00a f98a 	bl	10060cb8 <csmem_mem_assign>
100569a4:	6831      	ldr	r1, [r6, #0]
100569a6:	6208      	str	r0, [r1, #32]
100569a8:	4d0e      	ldr	r5, [pc, #56]	@ (100569e4 <__arm_cp.1_1>)
100569aa:	7ae8      	ldrb	r0, [r5, #11]
100569ac:	7b29      	ldrb	r1, [r5, #12]
100569ae:	1808      	adds	r0, r1, r0
100569b0:	0680      	lsls	r0, r0, #26
100569b2:	0e01      	lsrs	r1, r0, #24
100569b4:	2202      	movs	r2, #2
100569b6:	4620      	mov	r0, r4
100569b8:	f00a f97e 	bl	10060cb8 <csmem_mem_assign>
100569bc:	6834      	ldr	r4, [r6, #0]
100569be:	6260      	str	r0, [r4, #36]	@ 0x24
100569c0:	7ae8      	ldrb	r0, [r5, #11]
100569c2:	7b29      	ldrb	r1, [r5, #12]
100569c4:	1808      	adds	r0, r1, r0
100569c6:	0680      	lsls	r0, r0, #26
100569c8:	0e01      	lsrs	r1, r0, #24
100569ca:	4a08      	ldr	r2, [pc, #32]	@ (100569ec <__arm_cp.1_3>)
100569cc:	2307      	movs	r3, #7
100569ce:	4620      	mov	r0, r4
100569d0:	f00b ffb8 	bl	10062944 <CST_init>
100569d4:	f000 f9f2 	bl	10056dbc <GAT_att_srv_init>
100569d8:	f00d fbfc 	bl	100641d4 <GAT_att_clt_init>
100569dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100569de:	46c0      	nop			@ (mov r8, r8)

100569e0 <__arm_cp.1_0>:
100569e0:	20002a88 	.word	0x20002a88

100569e4 <__arm_cp.1_1>:
100569e4:	20002ae4 	.word	0x20002ae4

100569e8 <__arm_cp.1_2>:
100569e8:	20002ae0 	.word	0x20002ae0

100569ec <__arm_cp.1_3>:
100569ec:	100569f1 	.word	0x100569f1

100569f0 <GAT_att_cmn_timeout_cb_wrapper>:
100569f0:	b580      	push	{r7, lr}
100569f2:	6940      	ldr	r0, [r0, #20]
100569f4:	4901      	ldr	r1, [pc, #4]	@ (100569fc <__arm_cp.2_0>)
100569f6:	f00c f87e 	bl	10062af6 <cst_sharedCallback>
100569fa:	bd80      	pop	{r7, pc}

100569fc <__arm_cp.2_0>:
100569fc:	10056d69 	.word	0x10056d69

10056a00 <GAT_att_cmn_timer_expire_tsk>:
10056a00:	b5e0      	push	{r5, r6, r7, lr}
10056a02:	2000      	movs	r0, #0
10056a04:	9000      	str	r0, [sp, #0]
10056a06:	4b06      	ldr	r3, [pc, #24]	@ (10056a20 <__arm_cp.4_0>)
10056a08:	4601      	mov	r1, r0
10056a0a:	4602      	mov	r2, r0
10056a0c:	f000 f80a 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
10056a10:	2800      	cmp	r0, #0
10056a12:	d004      	beq.n	10056a1e <GAT_att_cmn_timer_expire_tsk+0x1e>
10056a14:	2007      	movs	r0, #7
10056a16:	f00b ff37 	bl	10062888 <tsk_notify_idx>
10056a1a:	f7fb f8b8 	bl	10051b8e <BLE_STACK_ProcessRequest>
10056a1e:	bd8c      	pop	{r2, r3, r7, pc}

10056a20 <__arm_cp.4_0>:
10056a20:	10056a81 	.word	0x10056a81

10056a24 <GAT_att_cmn_for_each_ch_descr>:
10056a24:	b5f0      	push	{r4, r5, r6, r7, lr}
10056a26:	b085      	sub	sp, #20
10056a28:	9304      	str	r3, [sp, #16]
10056a2a:	9201      	str	r2, [sp, #4]
10056a2c:	9102      	str	r1, [sp, #8]
10056a2e:	4607      	mov	r7, r0
10056a30:	2002      	movs	r0, #2
10056a32:	4038      	ands	r0, r7
10056a34:	9003      	str	r0, [sp, #12]
10056a36:	2401      	movs	r4, #1
10056a38:	403c      	ands	r4, r7
10056a3a:	4810      	ldr	r0, [pc, #64]	@ (10056a7c <__arm_cp.5_0>)
10056a3c:	6805      	ldr	r5, [r0, #0]
10056a3e:	3534      	adds	r5, #52	@ 0x34
10056a40:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10056a42:	682d      	ldr	r5, [r5, #0]
10056a44:	2d00      	cmp	r5, #0
10056a46:	d016      	beq.n	10056a76 <GAT_att_cmn_for_each_ch_descr+0x52>
10056a48:	2f00      	cmp	r7, #0
10056a4a:	d00c      	beq.n	10056a66 <GAT_att_cmn_for_each_ch_descr+0x42>
10056a4c:	2c00      	cmp	r4, #0
10056a4e:	d003      	beq.n	10056a58 <GAT_att_cmn_for_each_ch_descr+0x34>
10056a50:	8928      	ldrh	r0, [r5, #8]
10056a52:	9902      	ldr	r1, [sp, #8]
10056a54:	4288      	cmp	r0, r1
10056a56:	d10c      	bne.n	10056a72 <GAT_att_cmn_for_each_ch_descr+0x4e>
10056a58:	9803      	ldr	r0, [sp, #12]
10056a5a:	2800      	cmp	r0, #0
10056a5c:	d003      	beq.n	10056a66 <GAT_att_cmn_for_each_ch_descr+0x42>
10056a5e:	8968      	ldrh	r0, [r5, #10]
10056a60:	9901      	ldr	r1, [sp, #4]
10056a62:	4288      	cmp	r0, r1
10056a64:	d105      	bne.n	10056a72 <GAT_att_cmn_for_each_ch_descr+0x4e>
10056a66:	4628      	mov	r0, r5
10056a68:	4631      	mov	r1, r6
10056a6a:	9a04      	ldr	r2, [sp, #16]
10056a6c:	4790      	blx	r2
10056a6e:	2800      	cmp	r0, #0
10056a70:	d102      	bne.n	10056a78 <GAT_att_cmn_for_each_ch_descr+0x54>
10056a72:	3510      	adds	r5, #16
10056a74:	e7e5      	b.n	10056a42 <GAT_att_cmn_for_each_ch_descr+0x1e>
10056a76:	2000      	movs	r0, #0
10056a78:	b005      	add	sp, #20
10056a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10056a7c <__arm_cp.5_0>:
10056a7c:	20002a88 	.word	0x20002a88

10056a80 <GAT_att_cmn_handle_disconnec_iterate_f>:
10056a80:	b5b0      	push	{r4, r5, r7, lr}
10056a82:	4604      	mov	r4, r0
10056a84:	8880      	ldrh	r0, [r0, #4]
10056a86:	2500      	movs	r5, #0
10056a88:	05c0      	lsls	r0, r0, #23
10056a8a:	d401      	bmi.n	10056a90 <GAT_att_cmn_handle_disconnec_iterate_f+0x10>
10056a8c:	4628      	mov	r0, r5
10056a8e:	e006      	b.n	10056a9e <GAT_att_cmn_handle_disconnec_iterate_f+0x1e>
10056a90:	8962      	ldrh	r2, [r4, #10]
10056a92:	8921      	ldrh	r1, [r4, #8]
10056a94:	2002      	movs	r0, #2
10056a96:	f00c fd83 	bl	100635a0 <aci_gatt_proc_timeout_event_push_noinline>
10056a9a:	2800      	cmp	r0, #0
10056a9c:	d000      	beq.n	10056aa0 <GAT_att_cmn_handle_disconnec_iterate_f+0x20>
10056a9e:	bdb0      	pop	{r4, r5, r7, pc}
10056aa0:	8920      	ldrh	r0, [r4, #8]
10056aa2:	8961      	ldrh	r1, [r4, #10]
10056aa4:	2904      	cmp	r1, #4
10056aa6:	d102      	bne.n	10056aae <GAT_att_cmn_handle_disconnec_iterate_f+0x2e>
10056aa8:	f000 f8ac 	bl	10056c04 <GAT_att_cmn_disconnection>
10056aac:	e7ee      	b.n	10056a8c <GAT_att_cmn_handle_disconnec_iterate_f+0xc>
10056aae:	f000 fb17 	bl	100570e0 <GAT_att_srv_bearer_close>
10056ab2:	8961      	ldrh	r1, [r4, #10]
10056ab4:	8920      	ldrh	r0, [r4, #8]
10056ab6:	f00d fc7e 	bl	100643b6 <GAT_att_clt_bearer_close>
10056aba:	2000      	movs	r0, #0
10056abc:	8120      	strh	r0, [r4, #8]
10056abe:	4909      	ldr	r1, [pc, #36]	@ (10056ae4 <__arm_cp.6_0>)
10056ac0:	6809      	ldr	r1, [r1, #0]
10056ac2:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
10056ac4:	42a3      	cmp	r3, r4
10056ac6:	d005      	beq.n	10056ad4 <GAT_att_cmn_handle_disconnec_iterate_f+0x54>
10056ac8:	461a      	mov	r2, r3
10056aca:	691b      	ldr	r3, [r3, #16]
10056acc:	42a3      	cmp	r3, r4
10056ace:	d1fb      	bne.n	10056ac8 <GAT_att_cmn_handle_disconnec_iterate_f+0x48>
10056ad0:	3210      	adds	r2, #16
10056ad2:	e001      	b.n	10056ad8 <GAT_att_cmn_handle_disconnec_iterate_f+0x58>
10056ad4:	460a      	mov	r2, r1
10056ad6:	3234      	adds	r2, #52	@ 0x34
10056ad8:	6923      	ldr	r3, [r4, #16]
10056ada:	6013      	str	r3, [r2, #0]
10056adc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
10056ade:	6122      	str	r2, [r4, #16]
10056ae0:	630c      	str	r4, [r1, #48]	@ 0x30
10056ae2:	bdb0      	pop	{r4, r5, r7, pc}

10056ae4 <__arm_cp.6_0>:
10056ae4:	20002a88 	.word	0x20002a88

10056ae8 <GAT_att_cmn_tx_pool_evt_tsk>:
10056ae8:	b580      	push	{r7, lr}
10056aea:	2000      	movs	r0, #0
10056aec:	f7fe f9c8 	bl	10054e80 <ACL_pkt_get_available_mem_buffers>
10056af0:	490d      	ldr	r1, [pc, #52]	@ (10056b28 <__arm_cp.8_0>)
10056af2:	8a09      	ldrh	r1, [r1, #16]
10056af4:	3125      	adds	r1, #37	@ 0x25
10056af6:	0949      	lsrs	r1, r1, #5
10056af8:	4288      	cmp	r0, r1
10056afa:	d90f      	bls.n	10056b1c <GAT_att_cmn_tx_pool_evt_tsk+0x34>
10056afc:	1c49      	adds	r1, r1, #1
10056afe:	f7e9 fb9f 	bl	10040240 <__udivsi3>
10056b02:	4602      	mov	r2, r0
10056b04:	2042      	movs	r0, #66	@ 0x42
10056b06:	2100      	movs	r1, #0
10056b08:	f00c fe86 	bl	10063818 <aci_gatt_tx_pool_available_event_push_noinline>
10056b0c:	2800      	cmp	r0, #0
10056b0e:	d004      	beq.n	10056b1a <GAT_att_cmn_tx_pool_evt_tsk+0x32>
10056b10:	2008      	movs	r0, #8
10056b12:	f00b feb9 	bl	10062888 <tsk_notify_idx>
10056b16:	f7fb f83a 	bl	10051b8e <BLE_STACK_ProcessRequest>
10056b1a:	bd80      	pop	{r7, pc}
10056b1c:	2008      	movs	r0, #8
10056b1e:	2100      	movs	r1, #0
10056b20:	f00b fec4 	bl	100628ac <tsk_wait_resource_idx>
10056b24:	bd80      	pop	{r7, pc}
10056b26:	46c0      	nop			@ (mov r8, r8)

10056b28 <__arm_cp.8_0>:
10056b28:	20002ae4 	.word	0x20002ae4

10056b2c <GAT_att_cmn_rcv>:
10056b2c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10056b2e:	460c      	mov	r4, r1
10056b30:	2800      	cmp	r0, #0
10056b32:	d013      	beq.n	10056b5c <GAT_att_cmn_rcv+0x30>
10056b34:	8825      	ldrh	r5, [r4, #0]
10056b36:	4620      	mov	r0, r4
10056b38:	f002 febf 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10056b3c:	4601      	mov	r1, r0
10056b3e:	4628      	mov	r0, r5
10056b40:	f000 f82e 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10056b44:	2800      	cmp	r0, #0
10056b46:	d009      	beq.n	10056b5c <GAT_att_cmn_rcv+0x30>
10056b48:	8860      	ldrh	r0, [r4, #2]
10056b4a:	2800      	cmp	r0, #0
10056b4c:	d006      	beq.n	10056b5c <GAT_att_cmn_rcv+0x30>
10056b4e:	89a1      	ldrh	r1, [r4, #12]
10056b50:	291f      	cmp	r1, #31
10056b52:	d808      	bhi.n	10056b66 <GAT_att_cmn_rcv+0x3a>
10056b54:	a801      	add	r0, sp, #4
10056b56:	8001      	strh	r1, [r0, #0]
10056b58:	6860      	ldr	r0, [r4, #4]
10056b5a:	e00a      	b.n	10056b72 <GAT_att_cmn_rcv+0x46>
10056b5c:	4620      	mov	r0, r4
10056b5e:	f7fe f995 	bl	10054e8c <ACL_pkt_release>
10056b62:	2000      	movs	r0, #0
10056b64:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056b66:	6860      	ldr	r0, [r4, #4]
10056b68:	ad01      	add	r5, sp, #4
10056b6a:	462a      	mov	r2, r5
10056b6c:	f00a f955 	bl	10060e1a <Mem_Buff_get_buff_off>
10056b70:	8829      	ldrh	r1, [r5, #0]
10056b72:	1840      	adds	r0, r0, r1
10056b74:	7900      	ldrb	r0, [r0, #4]
10056b76:	07c1      	lsls	r1, r0, #31
10056b78:	d104      	bne.n	10056b84 <GAT_att_cmn_rcv+0x58>
10056b7a:	281b      	cmp	r0, #27
10056b7c:	d008      	beq.n	10056b90 <GAT_att_cmn_rcv+0x64>
10056b7e:	281d      	cmp	r0, #29
10056b80:	d006      	beq.n	10056b90 <GAT_att_cmn_rcv+0x64>
10056b82:	e009      	b.n	10056b98 <GAT_att_cmn_rcv+0x6c>
10056b84:	281e      	cmp	r0, #30
10056b86:	d303      	bcc.n	10056b90 <GAT_att_cmn_rcv+0x64>
10056b88:	2102      	movs	r1, #2
10056b8a:	4308      	orrs	r0, r1
10056b8c:	2823      	cmp	r0, #35	@ 0x23
10056b8e:	d103      	bne.n	10056b98 <GAT_att_cmn_rcv+0x6c>
10056b90:	4620      	mov	r0, r4
10056b92:	f00d fb23 	bl	100641dc <GAT_att_clt_rcv>
10056b96:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10056b98:	4620      	mov	r0, r4
10056b9a:	f000 f927 	bl	10056dec <GAT_att_srv_rcv>
10056b9e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10056ba0 <GAT_att_cmn_get_channel_descr_p>:
10056ba0:	4a07      	ldr	r2, [pc, #28]	@ (10056bc0 <__arm_cp.10_0>)
10056ba2:	6812      	ldr	r2, [r2, #0]
10056ba4:	3234      	adds	r2, #52	@ 0x34
10056ba6:	6812      	ldr	r2, [r2, #0]
10056ba8:	2a00      	cmp	r2, #0
10056baa:	d007      	beq.n	10056bbc <GAT_att_cmn_get_channel_descr_p+0x1c>
10056bac:	8913      	ldrh	r3, [r2, #8]
10056bae:	4283      	cmp	r3, r0
10056bb0:	d102      	bne.n	10056bb8 <GAT_att_cmn_get_channel_descr_p+0x18>
10056bb2:	8953      	ldrh	r3, [r2, #10]
10056bb4:	428b      	cmp	r3, r1
10056bb6:	d001      	beq.n	10056bbc <GAT_att_cmn_get_channel_descr_p+0x1c>
10056bb8:	3210      	adds	r2, #16
10056bba:	e7f4      	b.n	10056ba6 <GAT_att_cmn_get_channel_descr_p+0x6>
10056bbc:	4610      	mov	r0, r2
10056bbe:	4770      	bx	lr

10056bc0 <__arm_cp.10_0>:
10056bc0:	20002a88 	.word	0x20002a88

10056bc4 <GAT_att_cmn_connection>:
10056bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056bc6:	4604      	mov	r4, r0
10056bc8:	4e0d      	ldr	r6, [pc, #52]	@ (10056c00 <__arm_cp.11_0>)
10056bca:	6830      	ldr	r0, [r6, #0]
10056bcc:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
10056bce:	6929      	ldr	r1, [r5, #16]
10056bd0:	62c1      	str	r1, [r0, #44]	@ 0x2c
10056bd2:	882f      	ldrh	r7, [r5, #0]
10056bd4:	2100      	movs	r1, #0
10056bd6:	2214      	movs	r2, #20
10056bd8:	4628      	mov	r0, r5
10056bda:	f7fb fdcf 	bl	1005277c <BLEPLAT_MemSet>
10056bde:	2004      	movs	r0, #4
10056be0:	8168      	strh	r0, [r5, #10]
10056be2:	2017      	movs	r0, #23
10056be4:	80e8      	strh	r0, [r5, #6]
10056be6:	812c      	strh	r4, [r5, #8]
10056be8:	802f      	strh	r7, [r5, #0]
10056bea:	6830      	ldr	r0, [r6, #0]
10056bec:	6b41      	ldr	r1, [r0, #52]	@ 0x34
10056bee:	6345      	str	r5, [r0, #52]	@ 0x34
10056bf0:	6129      	str	r1, [r5, #16]
10056bf2:	4620      	mov	r0, r4
10056bf4:	f000 fa70 	bl	100570d8 <GAT_att_srv_connection>
10056bf8:	4620      	mov	r0, r4
10056bfa:	f00d fbd8 	bl	100643ae <GAT_att_clt_connection>
10056bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10056c00 <__arm_cp.11_0>:
10056c00:	20002a88 	.word	0x20002a88

10056c04 <GAT_att_cmn_disconnection>:
10056c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10056c06:	4604      	mov	r4, r0
10056c08:	f00b fceb 	bl	100625e2 <smp_sap_forget_device_upon_disconnection>
10056c0c:	481c      	ldr	r0, [pc, #112]	@ (10056c80 <__arm_cp.12_0>)
10056c0e:	6800      	ldr	r0, [r0, #0]
10056c10:	6b46      	ldr	r6, [r0, #52]	@ 0x34
10056c12:	2e00      	cmp	r6, #0
10056c14:	d032      	beq.n	10056c7c <GAT_att_cmn_disconnection+0x78>
10056c16:	4637      	mov	r7, r6
10056c18:	6936      	ldr	r6, [r6, #16]
10056c1a:	8938      	ldrh	r0, [r7, #8]
10056c1c:	42a0      	cmp	r0, r4
10056c1e:	d1f8      	bne.n	10056c12 <GAT_att_cmn_disconnection+0xe>
10056c20:	2500      	movs	r5, #0
10056c22:	897a      	ldrh	r2, [r7, #10]
10056c24:	b2e8      	uxtb	r0, r5
10056c26:	2803      	cmp	r0, #3
10056c28:	d804      	bhi.n	10056c34 <GAT_att_cmn_disconnection+0x30>
10056c2a:	4621      	mov	r1, r4
10056c2c:	f000 f82a 	bl	10056c84 <GAT_att_cmn_stop_timer>
10056c30:	1c6d      	adds	r5, r5, #1
10056c32:	e7f6      	b.n	10056c22 <GAT_att_cmn_disconnection+0x1e>
10056c34:	4620      	mov	r0, r4
10056c36:	4611      	mov	r1, r2
10056c38:	f000 fa52 	bl	100570e0 <GAT_att_srv_bearer_close>
10056c3c:	8979      	ldrh	r1, [r7, #10]
10056c3e:	4620      	mov	r0, r4
10056c40:	f00d fbb9 	bl	100643b6 <GAT_att_clt_bearer_close>
10056c44:	2000      	movs	r0, #0
10056c46:	8138      	strh	r0, [r7, #8]
10056c48:	480d      	ldr	r0, [pc, #52]	@ (10056c80 <__arm_cp.12_0>)
10056c4a:	6800      	ldr	r0, [r0, #0]
10056c4c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
10056c4e:	42ba      	cmp	r2, r7
10056c50:	d005      	beq.n	10056c5e <GAT_att_cmn_disconnection+0x5a>
10056c52:	4611      	mov	r1, r2
10056c54:	6912      	ldr	r2, [r2, #16]
10056c56:	42ba      	cmp	r2, r7
10056c58:	d1fb      	bne.n	10056c52 <GAT_att_cmn_disconnection+0x4e>
10056c5a:	3110      	adds	r1, #16
10056c5c:	e001      	b.n	10056c62 <GAT_att_cmn_disconnection+0x5e>
10056c5e:	4601      	mov	r1, r0
10056c60:	3134      	adds	r1, #52	@ 0x34
10056c62:	693a      	ldr	r2, [r7, #16]
10056c64:	600a      	str	r2, [r1, #0]
10056c66:	8979      	ldrh	r1, [r7, #10]
10056c68:	2904      	cmp	r1, #4
10056c6a:	d103      	bne.n	10056c74 <GAT_att_cmn_disconnection+0x70>
10056c6c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
10056c6e:	6139      	str	r1, [r7, #16]
10056c70:	62c7      	str	r7, [r0, #44]	@ 0x2c
10056c72:	e7ce      	b.n	10056c12 <GAT_att_cmn_disconnection+0xe>
10056c74:	6b01      	ldr	r1, [r0, #48]	@ 0x30
10056c76:	6139      	str	r1, [r7, #16]
10056c78:	6307      	str	r7, [r0, #48]	@ 0x30
10056c7a:	e7ca      	b.n	10056c12 <GAT_att_cmn_disconnection+0xe>
10056c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10056c7e:	46c0      	nop			@ (mov r8, r8)

10056c80 <__arm_cp.12_0>:
10056c80:	20002a88 	.word	0x20002a88

10056c84 <GAT_att_cmn_stop_timer>:
10056c84:	b510      	push	{r4, lr}
10056c86:	4604      	mov	r4, r0
10056c88:	4608      	mov	r0, r1
10056c8a:	4611      	mov	r1, r2
10056c8c:	f000 f858 	bl	10056d40 <GAT_att_cmn_get_timer_index>
10056c90:	0080      	lsls	r0, r0, #2
10056c92:	1900      	adds	r0, r0, r4
10056c94:	b2c1      	uxtb	r1, r0
10056c96:	4802      	ldr	r0, [pc, #8]	@ (10056ca0 <__arm_cp.13_0>)
10056c98:	6800      	ldr	r0, [r0, #0]
10056c9a:	f00b fe68 	bl	1006296e <CST_stop>
10056c9e:	bd10      	pop	{r4, pc}

10056ca0 <__arm_cp.13_0>:
10056ca0:	20002a88 	.word	0x20002a88

10056ca4 <GAT_att_cmn_send>:
10056ca4:	b5b0      	push	{r4, r5, r7, lr}
10056ca6:	460c      	mov	r4, r1
10056ca8:	4605      	mov	r5, r0
10056caa:	8848      	ldrh	r0, [r1, #2]
10056cac:	1d00      	adds	r0, r0, #4
10056cae:	b281      	uxth	r1, r0
10056cb0:	4620      	mov	r0, r4
10056cb2:	f7fe f8f4 	bl	10054e9e <ACL_pkt_resize>
10056cb6:	4628      	mov	r0, r5
10056cb8:	4621      	mov	r1, r4
10056cba:	f002 ff29 	bl	10059b10 <L2C_send_frame>
10056cbe:	2800      	cmp	r0, #0
10056cc0:	d004      	beq.n	10056ccc <GAT_att_cmn_send+0x28>
10056cc2:	4620      	mov	r0, r4
10056cc4:	f7fe f8e2 	bl	10054e8c <ACL_pkt_release>
10056cc8:	2081      	movs	r0, #129	@ 0x81
10056cca:	bdb0      	pop	{r4, r5, r7, pc}
10056ccc:	2000      	movs	r0, #0
10056cce:	bdb0      	pop	{r4, r5, r7, pc}

10056cd0 <GAT_att_cmn_dscr_flag_check_is_not_set_f>:
10056cd0:	8809      	ldrh	r1, [r1, #0]
10056cd2:	8880      	ldrh	r0, [r0, #4]
10056cd4:	4008      	ands	r0, r1
10056cd6:	d000      	beq.n	10056cda <GAT_att_cmn_dscr_flag_check_is_not_set_f+0xa>
10056cd8:	2086      	movs	r0, #134	@ 0x86
10056cda:	4770      	bx	lr

10056cdc <GAT_att_cmn_dscr_flag_set_f>:
10056cdc:	8809      	ldrh	r1, [r1, #0]
10056cde:	8882      	ldrh	r2, [r0, #4]
10056ce0:	430a      	orrs	r2, r1
10056ce2:	8082      	strh	r2, [r0, #4]
10056ce4:	2000      	movs	r0, #0
10056ce6:	4770      	bx	lr

10056ce8 <GAT_att_cmn_dscr_flag_clear_f>:
10056ce8:	8809      	ldrh	r1, [r1, #0]
10056cea:	8882      	ldrh	r2, [r0, #4]
10056cec:	438a      	bics	r2, r1
10056cee:	8082      	strh	r2, [r0, #4]
10056cf0:	2000      	movs	r0, #0
10056cf2:	4770      	bx	lr

10056cf4 <GAT_att_cmn_get_conn_index>:
10056cf4:	4907      	ldr	r1, [pc, #28]	@ (10056d14 <__arm_cp.22_0>)
10056cf6:	6809      	ldr	r1, [r1, #0]
10056cf8:	3134      	adds	r1, #52	@ 0x34
10056cfa:	6809      	ldr	r1, [r1, #0]
10056cfc:	2900      	cmp	r1, #0
10056cfe:	d004      	beq.n	10056d0a <GAT_att_cmn_get_conn_index+0x16>
10056d00:	890a      	ldrh	r2, [r1, #8]
10056d02:	4282      	cmp	r2, r0
10056d04:	d003      	beq.n	10056d0e <GAT_att_cmn_get_conn_index+0x1a>
10056d06:	3110      	adds	r1, #16
10056d08:	e7f7      	b.n	10056cfa <GAT_att_cmn_get_conn_index+0x6>
10056d0a:	20ff      	movs	r0, #255	@ 0xff
10056d0c:	4770      	bx	lr
10056d0e:	7808      	ldrb	r0, [r1, #0]
10056d10:	4770      	bx	lr
10056d12:	46c0      	nop			@ (mov r8, r8)

10056d14 <__arm_cp.22_0>:
10056d14:	20002a88 	.word	0x20002a88

10056d18 <GAT_att_cmn_start_timer>:
10056d18:	b510      	push	{r4, lr}
10056d1a:	4604      	mov	r4, r0
10056d1c:	4608      	mov	r0, r1
10056d1e:	4611      	mov	r1, r2
10056d20:	f000 f80e 	bl	10056d40 <GAT_att_cmn_get_timer_index>
10056d24:	0080      	lsls	r0, r0, #2
10056d26:	1900      	adds	r0, r0, r4
10056d28:	b2c1      	uxtb	r1, r0
10056d2a:	4803      	ldr	r0, [pc, #12]	@ (10056d38 <__arm_cp.23_0>)
10056d2c:	6800      	ldr	r0, [r0, #0]
10056d2e:	2200      	movs	r2, #0
10056d30:	4b02      	ldr	r3, [pc, #8]	@ (10056d3c <__arm_cp.23_1>)
10056d32:	f00b fe52 	bl	100629da <CST_start>
10056d36:	bd10      	pop	{r4, pc}

10056d38 <__arm_cp.23_0>:
10056d38:	20002a88 	.word	0x20002a88

10056d3c <__arm_cp.23_1>:
10056d3c:	00007530 	.word	0x00007530

10056d40 <GAT_att_cmn_get_timer_index>:
10056d40:	4a08      	ldr	r2, [pc, #32]	@ (10056d64 <__arm_cp.24_0>)
10056d42:	6812      	ldr	r2, [r2, #0]
10056d44:	3234      	adds	r2, #52	@ 0x34
10056d46:	6812      	ldr	r2, [r2, #0]
10056d48:	2a00      	cmp	r2, #0
10056d4a:	d007      	beq.n	10056d5c <GAT_att_cmn_get_timer_index+0x1c>
10056d4c:	8913      	ldrh	r3, [r2, #8]
10056d4e:	4283      	cmp	r3, r0
10056d50:	d102      	bne.n	10056d58 <GAT_att_cmn_get_timer_index+0x18>
10056d52:	8953      	ldrh	r3, [r2, #10]
10056d54:	428b      	cmp	r3, r1
10056d56:	d003      	beq.n	10056d60 <GAT_att_cmn_get_timer_index+0x20>
10056d58:	3210      	adds	r2, #16
10056d5a:	e7f4      	b.n	10056d46 <GAT_att_cmn_get_timer_index+0x6>
10056d5c:	20ff      	movs	r0, #255	@ 0xff
10056d5e:	4770      	bx	lr
10056d60:	7850      	ldrb	r0, [r2, #1]
10056d62:	4770      	bx	lr

10056d64 <__arm_cp.24_0>:
10056d64:	20002a88 	.word	0x20002a88

10056d68 <GAT_att_cmn_timeout_cb>:
10056d68:	b580      	push	{r7, lr}
10056d6a:	0881      	lsrs	r1, r0, #2
10056d6c:	480a      	ldr	r0, [pc, #40]	@ (10056d98 <__arm_cp.25_0>)
10056d6e:	6800      	ldr	r0, [r0, #0]
10056d70:	3034      	adds	r0, #52	@ 0x34
10056d72:	6800      	ldr	r0, [r0, #0]
10056d74:	2800      	cmp	r0, #0
10056d76:	d00e      	beq.n	10056d96 <GAT_att_cmn_timeout_cb+0x2e>
10056d78:	7842      	ldrb	r2, [r0, #1]
10056d7a:	428a      	cmp	r2, r1
10056d7c:	d001      	beq.n	10056d82 <GAT_att_cmn_timeout_cb+0x1a>
10056d7e:	3010      	adds	r0, #16
10056d80:	e7f7      	b.n	10056d72 <GAT_att_cmn_timeout_cb+0xa>
10056d82:	2101      	movs	r1, #1
10056d84:	0209      	lsls	r1, r1, #8
10056d86:	8882      	ldrh	r2, [r0, #4]
10056d88:	430a      	orrs	r2, r1
10056d8a:	8082      	strh	r2, [r0, #4]
10056d8c:	2007      	movs	r0, #7
10056d8e:	f00b fd7b 	bl	10062888 <tsk_notify_idx>
10056d92:	f7fa fefc 	bl	10051b8e <BLE_STACK_ProcessRequest>
10056d96:	bd80      	pop	{r7, pc}

10056d98 <__arm_cp.25_0>:
10056d98:	20002a88 	.word	0x20002a88

10056d9c <GAT_att_cmn_get_pckt>:
10056d9c:	b510      	push	{r4, lr}
10056d9e:	8944      	ldrh	r4, [r0, #10]
10056da0:	2c04      	cmp	r4, #4
10056da2:	d000      	beq.n	10056da6 <GAT_att_cmn_get_pckt+0xa>
10056da4:	2406      	movs	r4, #6
10056da6:	1861      	adds	r1, r4, r1
10056da8:	b28a      	uxth	r2, r1
10056daa:	8901      	ldrh	r1, [r0, #8]
10056dac:	2000      	movs	r0, #0
10056dae:	f7fe f84b 	bl	10054e48 <ACL_pkt_get>
10056db2:	2800      	cmp	r0, #0
10056db4:	d000      	beq.n	10056db8 <GAT_att_cmn_get_pckt+0x1c>
10056db6:	8184      	strh	r4, [r0, #12]
10056db8:	bd10      	pop	{r4, pc}
	...

10056dbc <GAT_att_srv_init>:
10056dbc:	b510      	push	{r4, lr}
10056dbe:	4c08      	ldr	r4, [pc, #32]	@ (10056de0 <__arm_cp.0_0>)
10056dc0:	6820      	ldr	r0, [r4, #0]
10056dc2:	3040      	adds	r0, #64	@ 0x40
10056dc4:	f00b ff52 	bl	10062c6c <ACL_list_init>
10056dc8:	6820      	ldr	r0, [r4, #0]
10056dca:	3038      	adds	r0, #56	@ 0x38
10056dcc:	f00b ff4e 	bl	10062c6c <ACL_list_init>
10056dd0:	4804      	ldr	r0, [pc, #16]	@ (10056de4 <__arm_cp.0_1>)
10056dd2:	4905      	ldr	r1, [pc, #20]	@ (10056de8 <__arm_cp.0_2>)
10056dd4:	223c      	movs	r2, #60	@ 0x3c
10056dd6:	f7fb fcc1 	bl	1005275c <BLEPLAT_MemCpy>
10056dda:	f001 f8ef 	bl	10057fbc <GAT_srv_init>
10056dde:	bd10      	pop	{r4, pc}

10056de0 <__arm_cp.0_0>:
10056de0:	20002a88 	.word	0x20002a88

10056de4 <__arm_cp.0_1>:
10056de4:	20002a8c 	.word	0x20002a8c

10056de8 <__arm_cp.0_2>:
10056de8:	10069738 	.word	0x10069738

10056dec <GAT_att_srv_rcv>:
10056dec:	b5f0      	push	{r4, r5, r6, r7, lr}
10056dee:	b087      	sub	sp, #28
10056df0:	4604      	mov	r4, r0
10056df2:	8805      	ldrh	r5, [r0, #0]
10056df4:	f002 fd61 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10056df8:	4601      	mov	r1, r0
10056dfa:	4628      	mov	r0, r5
10056dfc:	f7ff fed0 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10056e00:	4605      	mov	r5, r0
10056e02:	4620      	mov	r0, r4
10056e04:	f000 f858 	bl	10056eb8 <GAT_att_cmn_get_opcode>
10056e08:	4606      	mov	r6, r0
10056e0a:	f000 f85b 	bl	10056ec4 <GAT_att_srv_get_exec_fn_id_by_op>
10056e0e:	280f      	cmp	r0, #15
10056e10:	d119      	bne.n	10056e46 <GAT_att_srv_rcv+0x5a>
10056e12:	2e1e      	cmp	r6, #30
10056e14:	d047      	beq.n	10056ea6 <GAT_att_srv_rcv+0xba>
10056e16:	2040      	movs	r0, #64	@ 0x40
10056e18:	4030      	ands	r0, r6
10056e1a:	d144      	bne.n	10056ea6 <GAT_att_srv_rcv+0xba>
10056e1c:	2105      	movs	r1, #5
10056e1e:	4628      	mov	r0, r5
10056e20:	f7ff ffbc 	bl	10056d9c <GAT_att_cmn_get_pckt>
10056e24:	2800      	cmp	r0, #0
10056e26:	d045      	beq.n	10056eb4 <GAT_att_srv_rcv+0xc8>
10056e28:	4607      	mov	r7, r0
10056e2a:	2100      	movs	r1, #0
10056e2c:	2206      	movs	r2, #6
10056e2e:	4630      	mov	r0, r6
10056e30:	463b      	mov	r3, r7
10056e32:	f000 fafd 	bl	10057430 <GAT_att_srv_write_err_packet>
10056e36:	8968      	ldrh	r0, [r5, #10]
10056e38:	4639      	mov	r1, r7
10056e3a:	f7ff ff33 	bl	10056ca4 <GAT_att_cmn_send>
10056e3e:	4607      	mov	r7, r0
10056e40:	2800      	cmp	r0, #0
10056e42:	d134      	bne.n	10056eae <GAT_att_srv_rcv+0xc2>
10056e44:	e02f      	b.n	10056ea6 <GAT_att_srv_rcv+0xba>
10056e46:	9501      	str	r5, [sp, #4]
10056e48:	2500      	movs	r5, #0
10056e4a:	2e1e      	cmp	r6, #30
10056e4c:	462f      	mov	r7, r5
10056e4e:	d016      	beq.n	10056e7e <GAT_att_srv_rcv+0x92>
10056e50:	2040      	movs	r0, #64	@ 0x40
10056e52:	4006      	ands	r6, r0
10056e54:	462f      	mov	r7, r5
10056e56:	d112      	bne.n	10056e7e <GAT_att_srv_rcv+0x92>
10056e58:	9b01      	ldr	r3, [sp, #4]
10056e5a:	8898      	ldrh	r0, [r3, #4]
10056e5c:	07c0      	lsls	r0, r0, #31
10056e5e:	d118      	bne.n	10056e92 <GAT_att_srv_rcv+0xa6>
10056e60:	895a      	ldrh	r2, [r3, #10]
10056e62:	8919      	ldrh	r1, [r3, #8]
10056e64:	2600      	movs	r6, #0
10056e66:	4630      	mov	r0, r6
10056e68:	f7ff ff56 	bl	10056d18 <GAT_att_cmn_start_timer>
10056e6c:	4607      	mov	r7, r0
10056e6e:	2800      	cmp	r0, #0
10056e70:	d105      	bne.n	10056e7e <GAT_att_srv_rcv+0x92>
10056e72:	9a01      	ldr	r2, [sp, #4]
10056e74:	8890      	ldrh	r0, [r2, #4]
10056e76:	2101      	movs	r1, #1
10056e78:	4301      	orrs	r1, r0
10056e7a:	8091      	strh	r1, [r2, #4]
10056e7c:	4637      	mov	r7, r6
10056e7e:	a802      	add	r0, sp, #8
10056e80:	8005      	strh	r5, [r0, #0]
10056e82:	9506      	str	r5, [sp, #24]
10056e84:	9505      	str	r5, [sp, #20]
10056e86:	9901      	ldr	r1, [sp, #4]
10056e88:	9104      	str	r1, [sp, #16]
10056e8a:	9403      	str	r4, [sp, #12]
10056e8c:	f000 f854 	bl	10056f38 <GAT_att_srv_run>
10056e90:	e00d      	b.n	10056eae <GAT_att_srv_rcv+0xc2>
10056e92:	3308      	adds	r3, #8
10056e94:	2042      	movs	r0, #66	@ 0x42
10056e96:	2103      	movs	r1, #3
10056e98:	2202      	movs	r2, #2
10056e9a:	f00d f8eb 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
10056e9e:	2800      	cmp	r0, #0
10056ea0:	d001      	beq.n	10056ea6 <GAT_att_srv_rcv+0xba>
10056ea2:	2784      	movs	r7, #132	@ 0x84
10056ea4:	e003      	b.n	10056eae <GAT_att_srv_rcv+0xc2>
10056ea6:	4620      	mov	r0, r4
10056ea8:	f7fd fff0 	bl	10054e8c <ACL_pkt_release>
10056eac:	2700      	movs	r7, #0
10056eae:	4638      	mov	r0, r7
10056eb0:	b007      	add	sp, #28
10056eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056eb4:	2788      	movs	r7, #136	@ 0x88
10056eb6:	e7fa      	b.n	10056eae <GAT_att_srv_rcv+0xc2>

10056eb8 <GAT_att_cmn_get_opcode>:
10056eb8:	b580      	push	{r7, lr}
10056eba:	8981      	ldrh	r1, [r0, #12]
10056ebc:	f001 f84d 	bl	10057f5a <ACL_pkt_read_8b>
10056ec0:	bd80      	pop	{r7, pc}
	...

10056ec4 <GAT_att_srv_get_exec_fn_id_by_op>:
10056ec4:	1e81      	subs	r1, r0, #2
10056ec6:	291e      	cmp	r1, #30
10056ec8:	d816      	bhi.n	10056ef8 <GAT_att_srv_get_exec_fn_id_by_op+0x34>
10056eca:	2000      	movs	r0, #0
10056ecc:	4479      	add	r1, pc
10056ece:	7909      	ldrb	r1, [r1, #4]
10056ed0:	0049      	lsls	r1, r1, #1
10056ed2:	448f      	add	pc, r1
10056ed4:	170f1718 	.word	0x170f1718
10056ed8:	171b1719 	.word	0x171b1719
10056edc:	171f171d 	.word	0x171f171d
10056ee0:	17231721 	.word	0x17231721
10056ee4:	17171725 	.word	0x17171725
10056ee8:	17291727 	.word	0x17291727
10056eec:	17171717 	.word	0x17171717
10056ef0:	002d172b 	.word	0x002d172b
10056ef4:	2001      	movs	r0, #1
10056ef6:	4770      	bx	lr
10056ef8:	2852      	cmp	r0, #82	@ 0x52
10056efa:	d01b      	beq.n	10056f34 <GAT_att_srv_get_exec_fn_id_by_op+0x70>
10056efc:	28d2      	cmp	r0, #210	@ 0xd2
10056efe:	d101      	bne.n	10056f04 <GAT_att_srv_get_exec_fn_id_by_op+0x40>
10056f00:	200a      	movs	r0, #10
10056f02:	4770      	bx	lr
10056f04:	200f      	movs	r0, #15
10056f06:	4770      	bx	lr
10056f08:	2002      	movs	r0, #2
10056f0a:	4770      	bx	lr
10056f0c:	2003      	movs	r0, #3
10056f0e:	4770      	bx	lr
10056f10:	2004      	movs	r0, #4
10056f12:	4770      	bx	lr
10056f14:	2005      	movs	r0, #5
10056f16:	4770      	bx	lr
10056f18:	2006      	movs	r0, #6
10056f1a:	4770      	bx	lr
10056f1c:	2007      	movs	r0, #7
10056f1e:	4770      	bx	lr
10056f20:	2008      	movs	r0, #8
10056f22:	4770      	bx	lr
10056f24:	200b      	movs	r0, #11
10056f26:	4770      	bx	lr
10056f28:	200c      	movs	r0, #12
10056f2a:	4770      	bx	lr
10056f2c:	200d      	movs	r0, #13
10056f2e:	4770      	bx	lr
10056f30:	200e      	movs	r0, #14
10056f32:	4770      	bx	lr
10056f34:	2009      	movs	r0, #9
10056f36:	4770      	bx	lr

10056f38 <GAT_att_srv_run>:
10056f38:	b5f0      	push	{r4, r5, r6, r7, lr}
10056f3a:	b085      	sub	sp, #20
10056f3c:	4604      	mov	r4, r0
10056f3e:	7800      	ldrb	r0, [r0, #0]
10056f40:	2800      	cmp	r0, #0
10056f42:	d107      	bne.n	10056f54 <GAT_att_srv_run+0x1c>
10056f44:	6860      	ldr	r0, [r4, #4]
10056f46:	f7ff ffb7 	bl	10056eb8 <GAT_att_cmn_get_opcode>
10056f4a:	7060      	strb	r0, [r4, #1]
10056f4c:	68a5      	ldr	r5, [r4, #8]
10056f4e:	68e8      	ldr	r0, [r5, #12]
10056f50:	2800      	cmp	r0, #0
10056f52:	d03c      	beq.n	10056fce <GAT_att_srv_run+0x96>
10056f54:	7865      	ldrb	r5, [r4, #1]
10056f56:	4628      	mov	r0, r5
10056f58:	f7ff ffb4 	bl	10056ec4 <GAT_att_srv_get_exec_fn_id_by_op>
10056f5c:	280e      	cmp	r0, #14
10056f5e:	d808      	bhi.n	10056f72 <GAT_att_srv_run+0x3a>
10056f60:	0080      	lsls	r0, r0, #2
10056f62:	495b      	ldr	r1, [pc, #364]	@ (100570d0 <__arm_cp.4_3>)
10056f64:	5809      	ldr	r1, [r1, r0]
10056f66:	2900      	cmp	r1, #0
10056f68:	d003      	beq.n	10056f72 <GAT_att_srv_run+0x3a>
10056f6a:	4620      	mov	r0, r4
10056f6c:	4788      	blx	r1
10056f6e:	4607      	mov	r7, r0
10056f70:	e007      	b.n	10056f82 <GAT_att_srv_run+0x4a>
10056f72:	68a0      	ldr	r0, [r4, #8]
10056f74:	68c3      	ldr	r3, [r0, #12]
10056f76:	2100      	movs	r1, #0
10056f78:	2206      	movs	r2, #6
10056f7a:	4628      	mov	r0, r5
10056f7c:	f000 fa58 	bl	10057430 <GAT_att_srv_write_err_packet>
10056f80:	2786      	movs	r7, #134	@ 0x86
10056f82:	6861      	ldr	r1, [r4, #4]
10056f84:	2900      	cmp	r1, #0
10056f86:	d019      	beq.n	10056fbc <GAT_att_srv_run+0x84>
10056f88:	2f88      	cmp	r7, #136	@ 0x88
10056f8a:	d003      	beq.n	10056f94 <GAT_att_srv_run+0x5c>
10056f8c:	2f84      	cmp	r7, #132	@ 0x84
10056f8e:	d00c      	beq.n	10056faa <GAT_att_srv_run+0x72>
10056f90:	2f07      	cmp	r7, #7
10056f92:	d110      	bne.n	10056fb6 <GAT_att_srv_run+0x7e>
10056f94:	484f      	ldr	r0, [pc, #316]	@ (100570d4 <__arm_cp.4_4>)
10056f96:	6800      	ldr	r0, [r0, #0]
10056f98:	3040      	adds	r0, #64	@ 0x40
10056f9a:	f00b fe6b 	bl	10062c74 <ACL_list_insert_tail>
10056f9e:	2009      	movs	r0, #9
10056fa0:	f00b fc72 	bl	10062888 <tsk_notify_idx>
10056fa4:	f7fa fdf3 	bl	10051b8e <BLE_STACK_ProcessRequest>
10056fa8:	e008      	b.n	10056fbc <GAT_att_srv_run+0x84>
10056faa:	484a      	ldr	r0, [pc, #296]	@ (100570d4 <__arm_cp.4_4>)
10056fac:	6800      	ldr	r0, [r0, #0]
10056fae:	3038      	adds	r0, #56	@ 0x38
10056fb0:	f00b fe60 	bl	10062c74 <ACL_list_insert_tail>
10056fb4:	e009      	b.n	10056fca <GAT_att_srv_run+0x92>
10056fb6:	4608      	mov	r0, r1
10056fb8:	f7fd ff68 	bl	10054e8c <ACL_pkt_release>
10056fbc:	2f86      	cmp	r7, #134	@ 0x86
10056fbe:	d001      	beq.n	10056fc4 <GAT_att_srv_run+0x8c>
10056fc0:	2f00      	cmp	r7, #0
10056fc2:	d102      	bne.n	10056fca <GAT_att_srv_run+0x92>
10056fc4:	68a0      	ldr	r0, [r4, #8]
10056fc6:	f000 fa47 	bl	10057458 <GAT_att_srv_send_response>
10056fca:	b005      	add	sp, #20
10056fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10056fce:	6867      	ldr	r7, [r4, #4]
10056fd0:	4638      	mov	r0, r7
10056fd2:	f7ff ff71 	bl	10056eb8 <GAT_att_cmn_get_opcode>
10056fd6:	4606      	mov	r6, r0
10056fd8:	f7ff ff74 	bl	10056ec4 <GAT_att_srv_get_exec_fn_id_by_op>
10056fdc:	8879      	ldrh	r1, [r7, #2]
10056fde:	88ea      	ldrh	r2, [r5, #6]
10056fe0:	2304      	movs	r3, #4
10056fe2:	9302      	str	r3, [sp, #8]
10056fe4:	2300      	movs	r3, #0
10056fe6:	4291      	cmp	r1, r2
10056fe8:	d83e      	bhi.n	10057068 <GAT_att_srv_run+0x130>
10056fea:	280e      	cmp	r0, #14
10056fec:	d83c      	bhi.n	10057068 <GAT_att_srv_run+0x130>
10056fee:	9301      	str	r3, [sp, #4]
10056ff0:	0042      	lsls	r2, r0, #1
10056ff2:	4b34      	ldr	r3, [pc, #208]	@ (100570c4 <__arm_cp.4_0>)
10056ff4:	5a9a      	ldrh	r2, [r3, r2]
10056ff6:	4b34      	ldr	r3, [pc, #208]	@ (100570c8 <__arm_cp.4_1>)
10056ff8:	40c3      	lsrs	r3, r0
10056ffa:	07db      	lsls	r3, r3, #31
10056ffc:	d105      	bne.n	1005700a <GAT_att_srv_run+0xd2>
10056ffe:	2380      	movs	r3, #128	@ 0x80
10057000:	439a      	bics	r2, r3
10057002:	4291      	cmp	r1, r2
10057004:	9b01      	ldr	r3, [sp, #4]
10057006:	d003      	beq.n	10057010 <GAT_att_srv_run+0xd8>
10057008:	e02e      	b.n	10057068 <GAT_att_srv_run+0x130>
1005700a:	4291      	cmp	r1, r2
1005700c:	9b01      	ldr	r3, [sp, #4]
1005700e:	d32b      	bcc.n	10057068 <GAT_att_srv_run+0x130>
10057010:	1e41      	subs	r1, r0, #1
10057012:	2903      	cmp	r1, #3
10057014:	d301      	bcc.n	1005701a <GAT_att_srv_run+0xe2>
10057016:	2807      	cmp	r0, #7
10057018:	d10d      	bne.n	10057036 <GAT_att_srv_run+0xfe>
1005701a:	a904      	add	r1, sp, #16
1005701c:	aa03      	add	r2, sp, #12
1005701e:	9202      	str	r2, [sp, #8]
10057020:	4638      	mov	r0, r7
10057022:	460f      	mov	r7, r1
10057024:	f000 ff49 	bl	10057eba <GAT_att_srv_get_handle_range>
10057028:	883b      	ldrh	r3, [r7, #0]
1005702a:	9802      	ldr	r0, [sp, #8]
1005702c:	8800      	ldrh	r0, [r0, #0]
1005702e:	4283      	cmp	r3, r0
10057030:	d818      	bhi.n	10057064 <GAT_att_srv_run+0x12c>
10057032:	2b00      	cmp	r3, #0
10057034:	d016      	beq.n	10057064 <GAT_att_srv_run+0x12c>
10057036:	6866      	ldr	r6, [r4, #4]
10057038:	4630      	mov	r0, r6
1005703a:	f7ff ff3d 	bl	10056eb8 <GAT_att_cmn_get_opcode>
1005703e:	4607      	mov	r7, r0
10057040:	8835      	ldrh	r5, [r6, #0]
10057042:	4630      	mov	r0, r6
10057044:	f002 fc39 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10057048:	4601      	mov	r1, r0
1005704a:	4628      	mov	r0, r5
1005704c:	f7ff fda8 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10057050:	4605      	mov	r5, r0
10057052:	2f1e      	cmp	r7, #30
10057054:	d01d      	beq.n	10057092 <GAT_att_srv_run+0x15a>
10057056:	2040      	movs	r0, #64	@ 0x40
10057058:	4038      	ands	r0, r7
1005705a:	d11a      	bne.n	10057092 <GAT_att_srv_run+0x15a>
1005705c:	2f16      	cmp	r7, #22
1005705e:	d11b      	bne.n	10057098 <GAT_att_srv_run+0x160>
10057060:	8871      	ldrh	r1, [r6, #2]
10057062:	e026      	b.n	100570b2 <GAT_att_srv_run+0x17a>
10057064:	2001      	movs	r0, #1
10057066:	9002      	str	r0, [sp, #8]
10057068:	2786      	movs	r7, #134	@ 0x86
1005706a:	2e1e      	cmp	r6, #30
1005706c:	d089      	beq.n	10056f82 <GAT_att_srv_run+0x4a>
1005706e:	2040      	movs	r0, #64	@ 0x40
10057070:	4030      	ands	r0, r6
10057072:	d186      	bne.n	10056f82 <GAT_att_srv_run+0x4a>
10057074:	9301      	str	r3, [sp, #4]
10057076:	2105      	movs	r1, #5
10057078:	4628      	mov	r0, r5
1005707a:	f7ff fe8f 	bl	10056d9c <GAT_att_cmn_get_pckt>
1005707e:	60e8      	str	r0, [r5, #12]
10057080:	2800      	cmp	r0, #0
10057082:	d01d      	beq.n	100570c0 <GAT_att_srv_run+0x188>
10057084:	4603      	mov	r3, r0
10057086:	4630      	mov	r0, r6
10057088:	9901      	ldr	r1, [sp, #4]
1005708a:	9a02      	ldr	r2, [sp, #8]
1005708c:	f000 f9d0 	bl	10057430 <GAT_att_srv_write_err_packet>
10057090:	e777      	b.n	10056f82 <GAT_att_srv_run+0x4a>
10057092:	2000      	movs	r0, #0
10057094:	60e8      	str	r0, [r5, #12]
10057096:	e75d      	b.n	10056f54 <GAT_att_srv_run+0x1c>
10057098:	4638      	mov	r0, r7
1005709a:	f7ff ff13 	bl	10056ec4 <GAT_att_srv_get_exec_fn_id_by_op>
1005709e:	280e      	cmp	r0, #14
100570a0:	d900      	bls.n	100570a4 <GAT_att_srv_run+0x16c>
100570a2:	e76d      	b.n	10056f80 <GAT_att_srv_run+0x48>
100570a4:	0040      	lsls	r0, r0, #1
100570a6:	4909      	ldr	r1, [pc, #36]	@ (100570cc <__arm_cp.4_2>)
100570a8:	5a09      	ldrh	r1, [r1, r0]
100570aa:	88e8      	ldrh	r0, [r5, #6]
100570ac:	4281      	cmp	r1, r0
100570ae:	d300      	bcc.n	100570b2 <GAT_att_srv_run+0x17a>
100570b0:	4601      	mov	r1, r0
100570b2:	4628      	mov	r0, r5
100570b4:	f7ff fe72 	bl	10056d9c <GAT_att_cmn_get_pckt>
100570b8:	60e8      	str	r0, [r5, #12]
100570ba:	2800      	cmp	r0, #0
100570bc:	d000      	beq.n	100570c0 <GAT_att_srv_run+0x188>
100570be:	e749      	b.n	10056f54 <GAT_att_srv_run+0x1c>
100570c0:	2788      	movs	r7, #136	@ 0x88
100570c2:	e75e      	b.n	10056f82 <GAT_att_srv_run+0x4a>

100570c4 <__arm_cp.4_0>:
100570c4:	10069774 	.word	0x10069774

100570c8 <__arm_cp.4_1>:
100570c8:	00004fcc 	.word	0x00004fcc

100570cc <__arm_cp.4_2>:
100570cc:	10069792 	.word	0x10069792

100570d0 <__arm_cp.4_3>:
100570d0:	20002a8c 	.word	0x20002a8c

100570d4 <__arm_cp.4_4>:
100570d4:	20002a88 	.word	0x20002a88

100570d8 <GAT_att_srv_connection>:
100570d8:	b580      	push	{r7, lr}
100570da:	f000 ff81 	bl	10057fe0 <GAT_srv_connection>
100570de:	bd80      	pop	{r7, pc}

100570e0 <GAT_att_srv_bearer_close>:
100570e0:	b570      	push	{r4, r5, r6, lr}
100570e2:	460c      	mov	r4, r1
100570e4:	4605      	mov	r5, r0
100570e6:	f001 f821 	bl	1005812c <GAT_srv_bearer_close>
100570ea:	4e07      	ldr	r6, [pc, #28]	@ (10057108 <__arm_cp.6_0>)
100570ec:	6832      	ldr	r2, [r6, #0]
100570ee:	3240      	adds	r2, #64	@ 0x40
100570f0:	4628      	mov	r0, r5
100570f2:	4621      	mov	r1, r4
100570f4:	f000 f80a 	bl	1005710c <GAT_att_srv_flush_rx_pckts>
100570f8:	6832      	ldr	r2, [r6, #0]
100570fa:	3238      	adds	r2, #56	@ 0x38
100570fc:	4628      	mov	r0, r5
100570fe:	4621      	mov	r1, r4
10057100:	f000 f804 	bl	1005710c <GAT_att_srv_flush_rx_pckts>
10057104:	bd70      	pop	{r4, r5, r6, pc}
10057106:	46c0      	nop			@ (mov r8, r8)

10057108 <__arm_cp.6_0>:
10057108:	20002a88 	.word	0x20002a88

1005710c <GAT_att_srv_flush_rx_pckts>:
1005710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005710e:	460d      	mov	r5, r1
10057110:	4606      	mov	r6, r0
10057112:	9200      	str	r2, [sp, #0]
10057114:	6814      	ldr	r4, [r2, #0]
10057116:	2c00      	cmp	r4, #0
10057118:	d011      	beq.n	1005713e <GAT_att_srv_flush_rx_pckts+0x32>
1005711a:	4627      	mov	r7, r4
1005711c:	69e4      	ldr	r4, [r4, #28]
1005711e:	8838      	ldrh	r0, [r7, #0]
10057120:	42b0      	cmp	r0, r6
10057122:	d1f8      	bne.n	10057116 <GAT_att_srv_flush_rx_pckts+0xa>
10057124:	4638      	mov	r0, r7
10057126:	f002 fbc8 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
1005712a:	42a8      	cmp	r0, r5
1005712c:	d1f3      	bne.n	10057116 <GAT_att_srv_flush_rx_pckts+0xa>
1005712e:	9800      	ldr	r0, [sp, #0]
10057130:	4639      	mov	r1, r7
10057132:	f00b fdaf 	bl	10062c94 <ACL_list_remove>
10057136:	4638      	mov	r0, r7
10057138:	f7fd fea8 	bl	10054e8c <ACL_pkt_release>
1005713c:	e7eb      	b.n	10057116 <GAT_att_srv_flush_rx_pckts+0xa>
1005713e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10057140 <GAT_att_srv_process_rx_pckt_tsk>:
10057140:	b5f0      	push	{r4, r5, r6, r7, lr}
10057142:	b085      	sub	sp, #20
10057144:	4f0f      	ldr	r7, [pc, #60]	@ (10057184 <__arm_cp.9_0>)
10057146:	6838      	ldr	r0, [r7, #0]
10057148:	3040      	adds	r0, #64	@ 0x40
1005714a:	f00b fdc3 	bl	10062cd4 <ACL_list_get_pckt_count>
1005714e:	4604      	mov	r4, r0
10057150:	0420      	lsls	r0, r4, #16
10057152:	d014      	beq.n	1005717e <GAT_att_srv_process_rx_pckt_tsk+0x3e>
10057154:	466d      	mov	r5, sp
10057156:	2000      	movs	r0, #0
10057158:	7028      	strb	r0, [r5, #0]
1005715a:	6838      	ldr	r0, [r7, #0]
1005715c:	3040      	adds	r0, #64	@ 0x40
1005715e:	f00b fdaf 	bl	10062cc0 <ACL_list_remove_head>
10057162:	9001      	str	r0, [sp, #4]
10057164:	8806      	ldrh	r6, [r0, #0]
10057166:	f002 fba8 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
1005716a:	4601      	mov	r1, r0
1005716c:	4630      	mov	r0, r6
1005716e:	f7ff fd17 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10057172:	9002      	str	r0, [sp, #8]
10057174:	4628      	mov	r0, r5
10057176:	f7ff fedf 	bl	10056f38 <GAT_att_srv_run>
1005717a:	1e64      	subs	r4, r4, #1
1005717c:	e7e8      	b.n	10057150 <GAT_att_srv_process_rx_pckt_tsk+0x10>
1005717e:	b005      	add	sp, #20
10057180:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057182:	46c0      	nop			@ (mov r8, r8)

10057184 <__arm_cp.9_0>:
10057184:	20002a88 	.word	0x20002a88

10057188 <GAT_att_srv_hvtx>:
10057188:	b5f0      	push	{r4, r5, r6, r7, lr}
1005718a:	b08b      	sub	sp, #44	@ 0x2c
1005718c:	930a      	str	r3, [sp, #40]	@ 0x28
1005718e:	4614      	mov	r4, r2
10057190:	460d      	mov	r5, r1
10057192:	4607      	mov	r7, r0
10057194:	f7ff fd04 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10057198:	2800      	cmp	r0, #0
1005719a:	d011      	beq.n	100571c0 <GAT_att_srv_hvtx+0x38>
1005719c:	4606      	mov	r6, r0
1005719e:	9704      	str	r7, [sp, #16]
100571a0:	8880      	ldrh	r0, [r0, #4]
100571a2:	270c      	movs	r7, #12
100571a4:	0741      	lsls	r1, r0, #29
100571a6:	d47f      	bmi.n	100572a8 <GAT_att_srv_hvtx+0x120>
100571a8:	2c02      	cmp	r4, #2
100571aa:	d101      	bne.n	100571b0 <GAT_att_srv_hvtx+0x28>
100571ac:	0780      	lsls	r0, r0, #30
100571ae:	d47b      	bmi.n	100572a8 <GAT_att_srv_hvtx+0x120>
100571b0:	9502      	str	r5, [sp, #8]
100571b2:	9403      	str	r4, [sp, #12]
100571b4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
100571b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
100571b8:	2b01      	cmp	r3, #1
100571ba:	d803      	bhi.n	100571c4 <GAT_att_srv_hvtx+0x3c>
100571bc:	2503      	movs	r5, #3
100571be:	e003      	b.n	100571c8 <GAT_att_srv_hvtx+0x40>
100571c0:	2712      	movs	r7, #18
100571c2:	e071      	b.n	100572a8 <GAT_att_srv_hvtx+0x120>
100571c4:	0098      	lsls	r0, r3, #2
100571c6:	1c45      	adds	r5, r0, #1
100571c8:	1ca0      	adds	r0, r4, #2
100571ca:	4619      	mov	r1, r3
100571cc:	2900      	cmp	r1, #0
100571ce:	d004      	beq.n	100571da <GAT_att_srv_hvtx+0x52>
100571d0:	8802      	ldrh	r2, [r0, #0]
100571d2:	1955      	adds	r5, r2, r5
100571d4:	3008      	adds	r0, #8
100571d6:	1e49      	subs	r1, r1, #1
100571d8:	e7f8      	b.n	100571cc <GAT_att_srv_hvtx+0x44>
100571da:	88f0      	ldrh	r0, [r6, #6]
100571dc:	2b02      	cmp	r3, #2
100571de:	d302      	bcc.n	100571e6 <GAT_att_srv_hvtx+0x5e>
100571e0:	b2a9      	uxth	r1, r5
100571e2:	4281      	cmp	r1, r0
100571e4:	d860      	bhi.n	100572a8 <GAT_att_srv_hvtx+0x120>
100571e6:	b2a9      	uxth	r1, r5
100571e8:	4281      	cmp	r1, r0
100571ea:	d300      	bcc.n	100571ee <GAT_att_srv_hvtx+0x66>
100571ec:	4605      	mov	r5, r0
100571ee:	b2a9      	uxth	r1, r5
100571f0:	4630      	mov	r0, r6
100571f2:	9106      	str	r1, [sp, #24]
100571f4:	f7ff fdd2 	bl	10056d9c <GAT_att_cmn_get_pckt>
100571f8:	2800      	cmp	r0, #0
100571fa:	d00e      	beq.n	1005721a <GAT_att_srv_hvtx+0x92>
100571fc:	4607      	mov	r7, r0
100571fe:	9803      	ldr	r0, [sp, #12]
10057200:	2802      	cmp	r0, #2
10057202:	9707      	str	r7, [sp, #28]
10057204:	9601      	str	r6, [sp, #4]
10057206:	d10f      	bne.n	10057228 <GAT_att_srv_hvtx+0xa0>
10057208:	89b9      	ldrh	r1, [r7, #12]
1005720a:	221d      	movs	r2, #29
1005720c:	4638      	mov	r0, r7
1005720e:	f000 f889 	bl	10057324 <ACL_pkt_write_8b>
10057212:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057214:	2801      	cmp	r0, #1
10057216:	d00f      	beq.n	10057238 <GAT_att_srv_hvtx+0xb0>
10057218:	e04e      	b.n	100572b8 <GAT_att_srv_hvtx+0x130>
1005721a:	2008      	movs	r0, #8
1005721c:	f00b fb34 	bl	10062888 <tsk_notify_idx>
10057220:	f7fa fcb5 	bl	10051b8e <BLE_STACK_ProcessRequest>
10057224:	2788      	movs	r7, #136	@ 0x88
10057226:	e03f      	b.n	100572a8 <GAT_att_srv_hvtx+0x120>
10057228:	89b9      	ldrh	r1, [r7, #12]
1005722a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005722c:	2801      	cmp	r0, #1
1005722e:	d13e      	bne.n	100572ae <GAT_att_srv_hvtx+0x126>
10057230:	221b      	movs	r2, #27
10057232:	4638      	mov	r0, r7
10057234:	f000 f876 	bl	10057324 <ACL_pkt_write_8b>
10057238:	8822      	ldrh	r2, [r4, #0]
1005723a:	89b8      	ldrh	r0, [r7, #12]
1005723c:	1c40      	adds	r0, r0, #1
1005723e:	b281      	uxth	r1, r0
10057240:	4638      	mov	r0, r7
10057242:	f7fd fe58 	bl	10054ef6 <ACL_pkt_write_16b>
10057246:	6863      	ldr	r3, [r4, #4]
10057248:	89b8      	ldrh	r0, [r7, #12]
1005724a:	1ee9      	subs	r1, r5, #3
1005724c:	b28a      	uxth	r2, r1
1005724e:	1cc0      	adds	r0, r0, #3
10057250:	b281      	uxth	r1, r0
10057252:	4638      	mov	r0, r7
10057254:	f7fd fe58 	bl	10054f08 <ACL_pkt_write>
10057258:	9807      	ldr	r0, [sp, #28]
1005725a:	8045      	strh	r5, [r0, #2]
1005725c:	9d03      	ldr	r5, [sp, #12]
1005725e:	2d02      	cmp	r5, #2
10057260:	d10c      	bne.n	1005727c <GAT_att_srv_hvtx+0xf4>
10057262:	2001      	movs	r0, #1
10057264:	9904      	ldr	r1, [sp, #16]
10057266:	9a02      	ldr	r2, [sp, #8]
10057268:	f7ff fd56 	bl	10056d18 <GAT_att_cmn_start_timer>
1005726c:	2800      	cmp	r0, #0
1005726e:	9c01      	ldr	r4, [sp, #4]
10057270:	d00c      	beq.n	1005728c <GAT_att_srv_hvtx+0x104>
10057272:	4607      	mov	r7, r0
10057274:	9807      	ldr	r0, [sp, #28]
10057276:	f7fd fe09 	bl	10054e8c <ACL_pkt_release>
1005727a:	e015      	b.n	100572a8 <GAT_att_srv_hvtx+0x120>
1005727c:	07e8      	lsls	r0, r5, #31
1005727e:	9c01      	ldr	r4, [sp, #4]
10057280:	d004      	beq.n	1005728c <GAT_att_srv_hvtx+0x104>
10057282:	9a07      	ldr	r2, [sp, #28]
10057284:	7a10      	ldrb	r0, [r2, #8]
10057286:	2108      	movs	r1, #8
10057288:	4301      	orrs	r1, r0
1005728a:	7211      	strb	r1, [r2, #8]
1005728c:	9802      	ldr	r0, [sp, #8]
1005728e:	9907      	ldr	r1, [sp, #28]
10057290:	f7ff fd08 	bl	10056ca4 <GAT_att_cmn_send>
10057294:	4607      	mov	r7, r0
10057296:	2d02      	cmp	r5, #2
10057298:	d106      	bne.n	100572a8 <GAT_att_srv_hvtx+0x120>
1005729a:	2f00      	cmp	r7, #0
1005729c:	d104      	bne.n	100572a8 <GAT_att_srv_hvtx+0x120>
1005729e:	88a0      	ldrh	r0, [r4, #4]
100572a0:	2102      	movs	r1, #2
100572a2:	4301      	orrs	r1, r0
100572a4:	80a1      	strh	r1, [r4, #4]
100572a6:	2700      	movs	r7, #0
100572a8:	4638      	mov	r0, r7
100572aa:	b00b      	add	sp, #44	@ 0x2c
100572ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100572ae:	2223      	movs	r2, #35	@ 0x23
100572b0:	4638      	mov	r0, r7
100572b2:	f000 f837 	bl	10057324 <ACL_pkt_write_8b>
100572b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
100572b8:	1ca7      	adds	r7, r4, #2
100572ba:	2101      	movs	r1, #1
100572bc:	9505      	str	r5, [sp, #20]
100572be:	2800      	cmp	r0, #0
100572c0:	d0ca      	beq.n	10057258 <GAT_att_srv_hvtx+0xd0>
100572c2:	900a      	str	r0, [sp, #40]	@ 0x28
100572c4:	9d07      	ldr	r5, [sp, #28]
100572c6:	89a8      	ldrh	r0, [r5, #12]
100572c8:	1840      	adds	r0, r0, r1
100572ca:	9108      	str	r1, [sp, #32]
100572cc:	b281      	uxth	r1, r0
100572ce:	1ebb      	subs	r3, r7, #2
100572d0:	2402      	movs	r4, #2
100572d2:	4628      	mov	r0, r5
100572d4:	4622      	mov	r2, r4
100572d6:	4e12      	ldr	r6, [pc, #72]	@ (10057320 <__arm_cp.10_0>)
100572d8:	47b0      	blx	r6
100572da:	89a8      	ldrh	r0, [r5, #12]
100572dc:	9e08      	ldr	r6, [sp, #32]
100572de:	1830      	adds	r0, r6, r0
100572e0:	1c80      	adds	r0, r0, #2
100572e2:	b281      	uxth	r1, r0
100572e4:	4628      	mov	r0, r5
100572e6:	9409      	str	r4, [sp, #36]	@ 0x24
100572e8:	4622      	mov	r2, r4
100572ea:	463b      	mov	r3, r7
100572ec:	4c0c      	ldr	r4, [pc, #48]	@ (10057320 <__arm_cp.10_0>)
100572ee:	47a0      	blx	r4
100572f0:	1d31      	adds	r1, r6, #4
100572f2:	89a8      	ldrh	r0, [r5, #12]
100572f4:	1840      	adds	r0, r0, r1
100572f6:	b28e      	uxth	r6, r1
100572f8:	9906      	ldr	r1, [sp, #24]
100572fa:	1b8a      	subs	r2, r1, r6
100572fc:	8839      	ldrh	r1, [r7, #0]
100572fe:	428a      	cmp	r2, r1
10057300:	db00      	blt.n	10057304 <GAT_att_srv_hvtx+0x17c>
10057302:	460a      	mov	r2, r1
10057304:	9909      	ldr	r1, [sp, #36]	@ 0x24
10057306:	587b      	ldr	r3, [r7, r1]
10057308:	b281      	uxth	r1, r0
1005730a:	b294      	uxth	r4, r2
1005730c:	4628      	mov	r0, r5
1005730e:	4622      	mov	r2, r4
10057310:	4d03      	ldr	r5, [pc, #12]	@ (10057320 <__arm_cp.10_0>)
10057312:	47a8      	blx	r5
10057314:	19a1      	adds	r1, r4, r6
10057316:	3708      	adds	r7, #8
10057318:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005731a:	1e40      	subs	r0, r0, #1
1005731c:	9d05      	ldr	r5, [sp, #20]
1005731e:	e7ce      	b.n	100572be <GAT_att_srv_hvtx+0x136>

10057320 <__arm_cp.10_0>:
10057320:	10054f09 	.word	0x10054f09

10057324 <ACL_pkt_write_8b>:
10057324:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10057326:	4614      	mov	r4, r2
10057328:	6840      	ldr	r0, [r0, #4]
1005732a:	2920      	cmp	r1, #32
1005732c:	d304      	bcc.n	10057338 <ACL_pkt_write_8b+0x14>
1005732e:	ad01      	add	r5, sp, #4
10057330:	462a      	mov	r2, r5
10057332:	f009 fd72 	bl	10060e1a <Mem_Buff_get_buff_off>
10057336:	8829      	ldrh	r1, [r5, #0]
10057338:	1840      	adds	r0, r0, r1
1005733a:	7104      	strb	r4, [r0, #4]
1005733c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005733e <GAT_att_srv_extract_write_packet_data>:
1005733e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10057340:	461d      	mov	r5, r3
10057342:	4614      	mov	r4, r2
10057344:	460f      	mov	r7, r1
10057346:	4606      	mov	r6, r0
10057348:	f7ff fdb6 	bl	10056eb8 <GAT_att_cmn_get_opcode>
1005734c:	210e      	movs	r1, #14
1005734e:	43c9      	mvns	r1, r1
10057350:	28d2      	cmp	r0, #210	@ 0xd2
10057352:	d000      	beq.n	10057356 <GAT_att_srv_extract_write_packet_data+0x18>
10057354:	310c      	adds	r1, #12
10057356:	8870      	ldrh	r0, [r6, #2]
10057358:	1808      	adds	r0, r1, r0
1005735a:	b282      	uxth	r2, r0
1005735c:	9906      	ldr	r1, [sp, #24]
1005735e:	42ba      	cmp	r2, r7
10057360:	d905      	bls.n	1005736e <GAT_att_srv_extract_write_packet_data+0x30>
10057362:	200d      	movs	r0, #13
10057364:	7008      	strb	r0, [r1, #0]
10057366:	2000      	movs	r0, #0
10057368:	8028      	strh	r0, [r5, #0]
1005736a:	2786      	movs	r7, #134	@ 0x86
1005736c:	e009      	b.n	10057382 <GAT_att_srv_extract_write_packet_data+0x44>
1005736e:	2700      	movs	r7, #0
10057370:	700f      	strb	r7, [r1, #0]
10057372:	8028      	strh	r0, [r5, #0]
10057374:	89b0      	ldrh	r0, [r6, #12]
10057376:	1cc0      	adds	r0, r0, #3
10057378:	b281      	uxth	r1, r0
1005737a:	4630      	mov	r0, r6
1005737c:	4623      	mov	r3, r4
1005737e:	f7fd fda1 	bl	10054ec4 <ACL_pkt_read>
10057382:	4638      	mov	r0, r7
10057384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10057388 <GAT_att_srv_resp>:
10057388:	b5f0      	push	{r4, r5, r6, r7, lr}
1005738a:	b089      	sub	sp, #36	@ 0x24
1005738c:	461f      	mov	r7, r3
1005738e:	9203      	str	r2, [sp, #12]
10057390:	460e      	mov	r6, r1
10057392:	4605      	mov	r5, r0
10057394:	f7ff fc04 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10057398:	2800      	cmp	r0, #0
1005739a:	d045      	beq.n	10057428 <GAT_att_srv_resp+0xa0>
1005739c:	4604      	mov	r4, r0
1005739e:	68c0      	ldr	r0, [r0, #12]
100573a0:	2800      	cmp	r0, #0
100573a2:	d041      	beq.n	10057428 <GAT_att_srv_resp+0xa0>
100573a4:	9702      	str	r7, [sp, #8]
100573a6:	980f      	ldr	r0, [sp, #60]	@ 0x3c
100573a8:	9001      	str	r0, [sp, #4]
100573aa:	980e      	ldr	r0, [sp, #56]	@ 0x38
100573ac:	9000      	str	r0, [sp, #0]
100573ae:	481f      	ldr	r0, [pc, #124]	@ (1005742c <__arm_cp.13_0>)
100573b0:	6807      	ldr	r7, [r0, #0]
100573b2:	3738      	adds	r7, #56	@ 0x38
100573b4:	683f      	ldr	r7, [r7, #0]
100573b6:	2f00      	cmp	r7, #0
100573b8:	d00f      	beq.n	100573da <GAT_att_srv_resp+0x52>
100573ba:	8838      	ldrh	r0, [r7, #0]
100573bc:	42a8      	cmp	r0, r5
100573be:	d104      	bne.n	100573ca <GAT_att_srv_resp+0x42>
100573c0:	4638      	mov	r0, r7
100573c2:	f002 fa7a 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
100573c6:	42b0      	cmp	r0, r6
100573c8:	d001      	beq.n	100573ce <GAT_att_srv_resp+0x46>
100573ca:	371c      	adds	r7, #28
100573cc:	e7f2      	b.n	100573b4 <GAT_att_srv_resp+0x2c>
100573ce:	4817      	ldr	r0, [pc, #92]	@ (1005742c <__arm_cp.13_0>)
100573d0:	6800      	ldr	r0, [r0, #0]
100573d2:	3038      	adds	r0, #56	@ 0x38
100573d4:	4639      	mov	r1, r7
100573d6:	f00b fc5d 	bl	10062c94 <ACL_list_remove>
100573da:	68e0      	ldr	r0, [r4, #12]
100573dc:	f7ff fd6c 	bl	10056eb8 <GAT_att_cmn_get_opcode>
100573e0:	1e41      	subs	r1, r0, #1
100573e2:	9802      	ldr	r0, [sp, #8]
100573e4:	2800      	cmp	r0, #0
100573e6:	d013      	beq.n	10057410 <GAT_att_srv_resp+0x88>
100573e8:	b2c8      	uxtb	r0, r1
100573ea:	281e      	cmp	r0, #30
100573ec:	d007      	beq.n	100573fe <GAT_att_srv_resp+0x76>
100573ee:	2240      	movs	r2, #64	@ 0x40
100573f0:	4011      	ands	r1, r2
100573f2:	d104      	bne.n	100573fe <GAT_att_srv_resp+0x76>
100573f4:	68e3      	ldr	r3, [r4, #12]
100573f6:	9903      	ldr	r1, [sp, #12]
100573f8:	9a02      	ldr	r2, [sp, #8]
100573fa:	f000 f819 	bl	10057430 <GAT_att_srv_write_err_packet>
100573fe:	4620      	mov	r0, r4
10057400:	f000 f82a 	bl	10057458 <GAT_att_srv_send_response>
10057404:	2f00      	cmp	r7, #0
10057406:	d00f      	beq.n	10057428 <GAT_att_srv_resp+0xa0>
10057408:	4638      	mov	r0, r7
1005740a:	f7fd fd3f 	bl	10054e8c <ACL_pkt_release>
1005740e:	e00b      	b.n	10057428 <GAT_att_srv_resp+0xa0>
10057410:	a804      	add	r0, sp, #16
10057412:	9a00      	ldr	r2, [sp, #0]
10057414:	8182      	strh	r2, [r0, #12]
10057416:	7041      	strb	r1, [r0, #1]
10057418:	2101      	movs	r1, #1
1005741a:	7001      	strb	r1, [r0, #0]
1005741c:	9901      	ldr	r1, [sp, #4]
1005741e:	9108      	str	r1, [sp, #32]
10057420:	9406      	str	r4, [sp, #24]
10057422:	9705      	str	r7, [sp, #20]
10057424:	f7ff fd88 	bl	10056f38 <GAT_att_srv_run>
10057428:	b009      	add	sp, #36	@ 0x24
1005742a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005742c <__arm_cp.13_0>:
1005742c:	20002a88 	.word	0x20002a88

10057430 <GAT_att_srv_write_err_packet>:
10057430:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10057432:	2b00      	cmp	r3, #0
10057434:	d00f      	beq.n	10057456 <GAT_att_srv_write_err_packet+0x26>
10057436:	461c      	mov	r4, r3
10057438:	466b      	mov	r3, sp
1005743a:	7099      	strb	r1, [r3, #2]
1005743c:	7058      	strb	r0, [r3, #1]
1005743e:	2001      	movs	r0, #1
10057440:	7018      	strb	r0, [r3, #0]
10057442:	711a      	strb	r2, [r3, #4]
10057444:	0a08      	lsrs	r0, r1, #8
10057446:	70d8      	strb	r0, [r3, #3]
10057448:	89a1      	ldrh	r1, [r4, #12]
1005744a:	2505      	movs	r5, #5
1005744c:	4620      	mov	r0, r4
1005744e:	462a      	mov	r2, r5
10057450:	f7fd fd5a 	bl	10054f08 <ACL_pkt_write>
10057454:	8065      	strh	r5, [r4, #2]
10057456:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10057458 <GAT_att_srv_send_response>:
10057458:	b510      	push	{r4, lr}
1005745a:	4604      	mov	r4, r0
1005745c:	68c0      	ldr	r0, [r0, #12]
1005745e:	2800      	cmp	r0, #0
10057460:	d015      	beq.n	1005748e <GAT_att_srv_send_response+0x36>
10057462:	8841      	ldrh	r1, [r0, #2]
10057464:	1d09      	adds	r1, r1, #4
10057466:	b289      	uxth	r1, r1
10057468:	f7fd fd19 	bl	10054e9e <ACL_pkt_resize>
1005746c:	68e1      	ldr	r1, [r4, #12]
1005746e:	8960      	ldrh	r0, [r4, #10]
10057470:	f7ff fc18 	bl	10056ca4 <GAT_att_cmn_send>
10057474:	2800      	cmp	r0, #0
10057476:	d108      	bne.n	1005748a <GAT_att_srv_send_response+0x32>
10057478:	8962      	ldrh	r2, [r4, #10]
1005747a:	8921      	ldrh	r1, [r4, #8]
1005747c:	2000      	movs	r0, #0
1005747e:	f7ff fc01 	bl	10056c84 <GAT_att_cmn_stop_timer>
10057482:	88a0      	ldrh	r0, [r4, #4]
10057484:	2101      	movs	r1, #1
10057486:	4388      	bics	r0, r1
10057488:	80a0      	strh	r0, [r4, #4]
1005748a:	2000      	movs	r0, #0
1005748c:	60e0      	str	r0, [r4, #12]
1005748e:	bd10      	pop	{r4, pc}

10057490 <GAT_att_srv_confirmation_pending>:
10057490:	b5e0      	push	{r5, r6, r7, lr}
10057492:	a801      	add	r0, sp, #4
10057494:	2102      	movs	r1, #2
10057496:	8001      	strh	r1, [r0, #0]
10057498:	9000      	str	r0, [sp, #0]
1005749a:	2000      	movs	r0, #0
1005749c:	4b04      	ldr	r3, [pc, #16]	@ (100574b0 <__arm_cp.16_0>)
1005749e:	4601      	mov	r1, r0
100574a0:	4602      	mov	r2, r0
100574a2:	f7ff fabf 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
100574a6:	3886      	subs	r0, #134	@ 0x86
100574a8:	4241      	negs	r1, r0
100574aa:	4148      	adcs	r0, r1
100574ac:	bd8c      	pop	{r2, r3, r7, pc}
100574ae:	46c0      	nop			@ (mov r8, r8)

100574b0 <__arm_cp.16_0>:
100574b0:	10056cd1 	.word	0x10056cd1

100574b4 <GAT_att_srv_request_user_pending>:
100574b4:	b510      	push	{r4, lr}
100574b6:	480a      	ldr	r0, [pc, #40]	@ (100574e0 <__arm_cp.17_0>)
100574b8:	6804      	ldr	r4, [r0, #0]
100574ba:	3438      	adds	r4, #56	@ 0x38
100574bc:	6824      	ldr	r4, [r4, #0]
100574be:	2c00      	cmp	r4, #0
100574c0:	d009      	beq.n	100574d6 <GAT_att_srv_request_user_pending+0x22>
100574c2:	4620      	mov	r0, r4
100574c4:	f7ff fcf8 	bl	10056eb8 <GAT_att_cmn_get_opcode>
100574c8:	281e      	cmp	r0, #30
100574ca:	d002      	beq.n	100574d2 <GAT_att_srv_request_user_pending+0x1e>
100574cc:	2140      	movs	r1, #64	@ 0x40
100574ce:	4008      	ands	r0, r1
100574d0:	d003      	beq.n	100574da <GAT_att_srv_request_user_pending+0x26>
100574d2:	341c      	adds	r4, #28
100574d4:	e7f2      	b.n	100574bc <GAT_att_srv_request_user_pending+0x8>
100574d6:	2000      	movs	r0, #0
100574d8:	bd10      	pop	{r4, pc}
100574da:	2001      	movs	r0, #1
100574dc:	bd10      	pop	{r4, pc}
100574de:	46c0      	nop			@ (mov r8, r8)

100574e0 <__arm_cp.17_0>:
100574e0:	20002a88 	.word	0x20002a88

100574e4 <GAT_att_srv_flush_user_pending_list>:
100574e4:	b570      	push	{r4, r5, r6, lr}
100574e6:	4d08      	ldr	r5, [pc, #32]	@ (10057508 <__arm_cp.18_0>)
100574e8:	6828      	ldr	r0, [r5, #0]
100574ea:	6b84      	ldr	r4, [r0, #56]	@ 0x38
100574ec:	2c00      	cmp	r4, #0
100574ee:	d00a      	beq.n	10057506 <GAT_att_srv_flush_user_pending_list+0x22>
100574f0:	69e6      	ldr	r6, [r4, #28]
100574f2:	6828      	ldr	r0, [r5, #0]
100574f4:	3038      	adds	r0, #56	@ 0x38
100574f6:	4621      	mov	r1, r4
100574f8:	f00b fbcc 	bl	10062c94 <ACL_list_remove>
100574fc:	4620      	mov	r0, r4
100574fe:	f7fd fcc5 	bl	10054e8c <ACL_pkt_release>
10057502:	4634      	mov	r4, r6
10057504:	e7f2      	b.n	100574ec <GAT_att_srv_flush_user_pending_list+0x8>
10057506:	bd70      	pop	{r4, r5, r6, pc}

10057508 <__arm_cp.18_0>:
10057508:	20002a88 	.word	0x20002a88

1005750c <GAT_att_srv_exchange_mtu_exc>:
1005750c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005750e:	4604      	mov	r4, r0
10057510:	6880      	ldr	r0, [r0, #8]
10057512:	8941      	ldrh	r1, [r0, #10]
10057514:	2904      	cmp	r1, #4
10057516:	d11a      	bne.n	1005754e <GAT_att_srv_exchange_mtu_exc+0x42>
10057518:	6860      	ldr	r0, [r4, #4]
1005751a:	8981      	ldrh	r1, [r0, #12]
1005751c:	1c49      	adds	r1, r1, #1
1005751e:	b289      	uxth	r1, r1
10057520:	f7fd fcd9 	bl	10054ed6 <ACL_pkt_read_16b>
10057524:	4605      	mov	r5, r0
10057526:	2817      	cmp	r0, #23
10057528:	d800      	bhi.n	1005752c <GAT_att_srv_exchange_mtu_exc+0x20>
1005752a:	2517      	movs	r5, #23
1005752c:	4e1d      	ldr	r6, [pc, #116]	@ (100575a4 <__arm_cp.19_0>)
1005752e:	8a30      	ldrh	r0, [r6, #16]
10057530:	4285      	cmp	r5, r0
10057532:	d300      	bcc.n	10057536 <GAT_att_srv_exchange_mtu_exc+0x2a>
10057534:	4605      	mov	r5, r0
10057536:	68a3      	ldr	r3, [r4, #8]
10057538:	8898      	ldrh	r0, [r3, #4]
1005753a:	0700      	lsls	r0, r0, #28
1005753c:	d40f      	bmi.n	1005755e <GAT_att_srv_exchange_mtu_exc+0x52>
1005753e:	8919      	ldrh	r1, [r3, #8]
10057540:	2002      	movs	r0, #2
10057542:	462a      	mov	r2, r5
10057544:	f00c fa66 	bl	10063a14 <aci_att_exchange_mtu_resp_event_push_noinline>
10057548:	2800      	cmp	r0, #0
1005754a:	d014      	beq.n	10057576 <GAT_att_srv_exchange_mtu_exc+0x6a>
1005754c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005754e:	68c3      	ldr	r3, [r0, #12]
10057550:	2002      	movs	r0, #2
10057552:	2100      	movs	r1, #0
10057554:	2206      	movs	r2, #6
10057556:	f7ff ff6b 	bl	10057430 <GAT_att_srv_write_err_packet>
1005755a:	2086      	movs	r0, #134	@ 0x86
1005755c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005755e:	88d8      	ldrh	r0, [r3, #6]
10057560:	42a8      	cmp	r0, r5
10057562:	d00e      	beq.n	10057582 <GAT_att_srv_exchange_mtu_exc+0x76>
10057564:	3308      	adds	r3, #8
10057566:	2042      	movs	r0, #66	@ 0x42
10057568:	2103      	movs	r1, #3
1005756a:	2202      	movs	r2, #2
1005756c:	f00c fd82 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
10057570:	2800      	cmp	r0, #0
10057572:	d1eb      	bne.n	1005754c <GAT_att_srv_exchange_mtu_exc+0x40>
10057574:	e005      	b.n	10057582 <GAT_att_srv_exchange_mtu_exc+0x76>
10057576:	68a0      	ldr	r0, [r4, #8]
10057578:	80c5      	strh	r5, [r0, #6]
1005757a:	8881      	ldrh	r1, [r0, #4]
1005757c:	2208      	movs	r2, #8
1005757e:	430a      	orrs	r2, r1
10057580:	8082      	strh	r2, [r0, #4]
10057582:	8a30      	ldrh	r0, [r6, #16]
10057584:	ab01      	add	r3, sp, #4
10057586:	7058      	strb	r0, [r3, #1]
10057588:	2503      	movs	r5, #3
1005758a:	701d      	strb	r5, [r3, #0]
1005758c:	0a00      	lsrs	r0, r0, #8
1005758e:	7098      	strb	r0, [r3, #2]
10057590:	68a0      	ldr	r0, [r4, #8]
10057592:	68c4      	ldr	r4, [r0, #12]
10057594:	89a1      	ldrh	r1, [r4, #12]
10057596:	4620      	mov	r0, r4
10057598:	462a      	mov	r2, r5
1005759a:	f7fd fcb5 	bl	10054f08 <ACL_pkt_write>
1005759e:	8065      	strh	r5, [r4, #2]
100575a0:	2000      	movs	r0, #0
100575a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100575a4 <__arm_cp.19_0>:
100575a4:	20002ae4 	.word	0x20002ae4

100575a8 <GAT_att_srv_find_info_exc>:
100575a8:	b5f0      	push	{r4, r5, r6, r7, lr}
100575aa:	b08f      	sub	sp, #60	@ 0x3c
100575ac:	4601      	mov	r1, r0
100575ae:	6840      	ldr	r0, [r0, #4]
100575b0:	9101      	str	r1, [sp, #4]
100575b2:	6889      	ldr	r1, [r1, #8]
100575b4:	68cf      	ldr	r7, [r1, #12]
100575b6:	ad0d      	add	r5, sp, #52	@ 0x34
100575b8:	ac0e      	add	r4, sp, #56	@ 0x38
100575ba:	4629      	mov	r1, r5
100575bc:	4622      	mov	r2, r4
100575be:	f000 fc7c 	bl	10057eba <GAT_att_srv_get_handle_range>
100575c2:	8828      	ldrh	r0, [r5, #0]
100575c4:	9007      	str	r0, [sp, #28]
100575c6:	f00d fa17 	bl	100649f8 <GAT_att_db_find_from_handle>
100575ca:	4602      	mov	r2, r0
100575cc:	8820      	ldrh	r0, [r4, #0]
100575ce:	9002      	str	r0, [sp, #8]
100575d0:	2500      	movs	r5, #0
100575d2:	462b      	mov	r3, r5
100575d4:	9500      	str	r5, [sp, #0]
100575d6:	9503      	str	r5, [sp, #12]
100575d8:	2a00      	cmp	r2, #0
100575da:	9506      	str	r5, [sp, #24]
100575dc:	d050      	beq.n	10057680 <GAT_att_srv_find_info_exc+0xd8>
100575de:	8850      	ldrh	r0, [r2, #2]
100575e0:	9007      	str	r0, [sp, #28]
100575e2:	9902      	ldr	r1, [sp, #8]
100575e4:	4288      	cmp	r0, r1
100575e6:	d84b      	bhi.n	10057680 <GAT_att_srv_find_info_exc+0xd8>
100575e8:	b2a8      	uxth	r0, r5
100575ea:	18c0      	adds	r0, r0, r3
100575ec:	9901      	ldr	r1, [sp, #4]
100575ee:	6889      	ldr	r1, [r1, #8]
100575f0:	88c9      	ldrh	r1, [r1, #6]
100575f2:	4288      	cmp	r0, r1
100575f4:	d844      	bhi.n	10057680 <GAT_att_srv_find_info_exc+0xd8>
100575f6:	461c      	mov	r4, r3
100575f8:	ad08      	add	r5, sp, #32
100575fa:	9205      	str	r2, [sp, #20]
100575fc:	4610      	mov	r0, r2
100575fe:	4629      	mov	r1, r5
10057600:	f000 ffba 	bl	10058578 <GAT_srv_get_attr_type>
10057604:	7c2e      	ldrb	r6, [r5, #16]
10057606:	9803      	ldr	r0, [sp, #12]
10057608:	0600      	lsls	r0, r0, #24
1005760a:	d006      	beq.n	1005761a <GAT_att_srv_find_info_exc+0x72>
1005760c:	9800      	ldr	r0, [sp, #0]
1005760e:	4286      	cmp	r6, r0
10057610:	d139      	bne.n	10057686 <GAT_att_srv_find_info_exc+0xde>
10057612:	08c0      	lsrs	r0, r0, #3
10057614:	9004      	str	r0, [sp, #16]
10057616:	9d06      	ldr	r5, [sp, #24]
10057618:	e016      	b.n	10057648 <GAT_att_srv_find_info_exc+0xa0>
1005761a:	89b9      	ldrh	r1, [r7, #12]
1005761c:	2205      	movs	r2, #5
1005761e:	4638      	mov	r0, r7
10057620:	f7ff fe80 	bl	10057324 <ACL_pkt_write_8b>
10057624:	2e10      	cmp	r6, #16
10057626:	d001      	beq.n	1005762c <GAT_att_srv_find_info_exc+0x84>
10057628:	2202      	movs	r2, #2
1005762a:	e000      	b.n	1005762e <GAT_att_srv_find_info_exc+0x86>
1005762c:	2201      	movs	r2, #1
1005762e:	9d06      	ldr	r5, [sp, #24]
10057630:	89b8      	ldrh	r0, [r7, #12]
10057632:	1c40      	adds	r0, r0, #1
10057634:	b281      	uxth	r1, r0
10057636:	4638      	mov	r0, r7
10057638:	9203      	str	r2, [sp, #12]
1005763a:	f7ff fe73 	bl	10057324 <ACL_pkt_write_8b>
1005763e:	1cad      	adds	r5, r5, #2
10057640:	08f0      	lsrs	r0, r6, #3
10057642:	9004      	str	r0, [sp, #16]
10057644:	1c84      	adds	r4, r0, #2
10057646:	9600      	str	r6, [sp, #0]
10057648:	89b8      	ldrh	r0, [r7, #12]
1005764a:	1940      	adds	r0, r0, r5
1005764c:	b281      	uxth	r1, r0
1005764e:	4638      	mov	r0, r7
10057650:	9a07      	ldr	r2, [sp, #28]
10057652:	f7fd fc50 	bl	10054ef6 <ACL_pkt_write_16b>
10057656:	89b8      	ldrh	r0, [r7, #12]
10057658:	1828      	adds	r0, r5, r0
1005765a:	1c86      	adds	r6, r0, #2
1005765c:	a808      	add	r0, sp, #32
1005765e:	f00b fb00 	bl	10062c62 <UUID_get_value_p>
10057662:	4603      	mov	r3, r0
10057664:	b2b1      	uxth	r1, r6
10057666:	9804      	ldr	r0, [sp, #16]
10057668:	b2c2      	uxtb	r2, r0
1005766a:	4638      	mov	r0, r7
1005766c:	f7fd fc4c 	bl	10054f08 <ACL_pkt_write>
10057670:	b2e0      	uxtb	r0, r4
10057672:	182d      	adds	r5, r5, r0
10057674:	9805      	ldr	r0, [sp, #20]
10057676:	f00d fa21 	bl	10064abc <GAT_att_db_get_next>
1005767a:	4602      	mov	r2, r0
1005767c:	4623      	mov	r3, r4
1005767e:	e7ab      	b.n	100575d8 <GAT_att_srv_find_info_exc+0x30>
10057680:	9803      	ldr	r0, [sp, #12]
10057682:	0600      	lsls	r0, r0, #24
10057684:	d003      	beq.n	1005768e <GAT_att_srv_find_info_exc+0xe6>
10057686:	9806      	ldr	r0, [sp, #24]
10057688:	8078      	strh	r0, [r7, #2]
1005768a:	2000      	movs	r0, #0
1005768c:	e007      	b.n	1005769e <GAT_att_srv_find_info_exc+0xf6>
1005768e:	9807      	ldr	r0, [sp, #28]
10057690:	b281      	uxth	r1, r0
10057692:	2004      	movs	r0, #4
10057694:	220a      	movs	r2, #10
10057696:	463b      	mov	r3, r7
10057698:	f7ff feca 	bl	10057430 <GAT_att_srv_write_err_packet>
1005769c:	2086      	movs	r0, #134	@ 0x86
1005769e:	b00f      	add	sp, #60	@ 0x3c
100576a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

100576a2 <GAT_att_srv_find_by_type_val_exc>:
100576a2:	b5f0      	push	{r4, r5, r6, r7, lr}
100576a4:	b091      	sub	sp, #68	@ 0x44
100576a6:	4607      	mov	r7, r0
100576a8:	ac09      	add	r4, sp, #36	@ 0x24
100576aa:	2010      	movs	r0, #16
100576ac:	7420      	strb	r0, [r4, #16]
100576ae:	6878      	ldr	r0, [r7, #4]
100576b0:	8981      	ldrh	r1, [r0, #12]
100576b2:	1d49      	adds	r1, r1, #5
100576b4:	b289      	uxth	r1, r1
100576b6:	f7fd fc0e 	bl	10054ed6 <ACL_pkt_read_16b>
100576ba:	81a0      	strh	r0, [r4, #12]
100576bc:	6878      	ldr	r0, [r7, #4]
100576be:	ae0f      	add	r6, sp, #60	@ 0x3c
100576c0:	ad0e      	add	r5, sp, #56	@ 0x38
100576c2:	4631      	mov	r1, r6
100576c4:	462a      	mov	r2, r5
100576c6:	f000 fbf8 	bl	10057eba <GAT_att_srv_get_handle_range>
100576ca:	8836      	ldrh	r6, [r6, #0]
100576cc:	6878      	ldr	r0, [r7, #4]
100576ce:	9706      	str	r7, [sp, #24]
100576d0:	68b9      	ldr	r1, [r7, #8]
100576d2:	8844      	ldrh	r4, [r0, #2]
100576d4:	68c8      	ldr	r0, [r1, #12]
100576d6:	8981      	ldrh	r1, [r0, #12]
100576d8:	2207      	movs	r2, #7
100576da:	9002      	str	r0, [sp, #8]
100576dc:	f7ff fe22 	bl	10057324 <ACL_pkt_write_8b>
100576e0:	1fe0      	subs	r0, r4, #7
100576e2:	8829      	ldrh	r1, [r5, #0]
100576e4:	9104      	str	r1, [sp, #16]
100576e6:	2101      	movs	r1, #1
100576e8:	9105      	str	r1, [sp, #20]
100576ea:	b280      	uxth	r0, r0
100576ec:	9003      	str	r0, [sp, #12]
100576ee:	9601      	str	r6, [sp, #4]
100576f0:	9805      	ldr	r0, [sp, #20]
100576f2:	b287      	uxth	r7, r0
100576f4:	1d3c      	adds	r4, r7, #4
100576f6:	9806      	ldr	r0, [sp, #24]
100576f8:	6880      	ldr	r0, [r0, #8]
100576fa:	88c0      	ldrh	r0, [r0, #6]
100576fc:	4284      	cmp	r4, r0
100576fe:	d83c      	bhi.n	1005777a <GAT_att_srv_find_by_type_val_exc+0xd8>
10057700:	b2b0      	uxth	r0, r6
10057702:	aa09      	add	r2, sp, #36	@ 0x24
10057704:	9904      	ldr	r1, [sp, #16]
10057706:	f001 faa7 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
1005770a:	2800      	cmp	r0, #0
1005770c:	d035      	beq.n	1005777a <GAT_att_srv_find_by_type_val_exc+0xd8>
1005770e:	4605      	mov	r5, r0
10057710:	a810      	add	r0, sp, #64	@ 0x40
10057712:	9000      	str	r0, [sp, #0]
10057714:	2200      	movs	r2, #0
10057716:	ab08      	add	r3, sp, #32
10057718:	9806      	ldr	r0, [sp, #24]
1005771a:	4629      	mov	r1, r5
1005771c:	f000 fbe0 	bl	10057ee0 <GAT_att_srv_value_read>
10057720:	2886      	cmp	r0, #134	@ 0x86
10057722:	d028      	beq.n	10057776 <GAT_att_srv_find_by_type_val_exc+0xd4>
10057724:	2800      	cmp	r0, #0
10057726:	d136      	bne.n	10057796 <GAT_att_srv_find_by_type_val_exc+0xf4>
10057728:	886e      	ldrh	r6, [r5, #2]
1005772a:	9808      	ldr	r0, [sp, #32]
1005772c:	6843      	ldr	r3, [r0, #4]
1005772e:	9806      	ldr	r0, [sp, #24]
10057730:	6840      	ldr	r0, [r0, #4]
10057732:	8981      	ldrh	r1, [r0, #12]
10057734:	1dc9      	adds	r1, r1, #7
10057736:	b289      	uxth	r1, r1
10057738:	9f03      	ldr	r7, [sp, #12]
1005773a:	463a      	mov	r2, r7
1005773c:	f7fd fbb9 	bl	10054eb2 <ACL_pkt_cmp>
10057740:	9908      	ldr	r1, [sp, #32]
10057742:	8809      	ldrh	r1, [r1, #0]
10057744:	42b9      	cmp	r1, r7
10057746:	d116      	bne.n	10057776 <GAT_att_srv_find_by_type_val_exc+0xd4>
10057748:	2800      	cmp	r0, #0
1005774a:	d114      	bne.n	10057776 <GAT_att_srv_find_by_type_val_exc+0xd4>
1005774c:	af07      	add	r7, sp, #28
1005774e:	703e      	strb	r6, [r7, #0]
10057750:	0a30      	lsrs	r0, r6, #8
10057752:	7078      	strb	r0, [r7, #1]
10057754:	4628      	mov	r0, r5
10057756:	f000 ff37 	bl	100585c8 <GAT_srv_get_att_group_end_handle>
1005775a:	4606      	mov	r6, r0
1005775c:	70b8      	strb	r0, [r7, #2]
1005775e:	0a00      	lsrs	r0, r0, #8
10057760:	70f8      	strb	r0, [r7, #3]
10057762:	9802      	ldr	r0, [sp, #8]
10057764:	8981      	ldrh	r1, [r0, #12]
10057766:	9a05      	ldr	r2, [sp, #20]
10057768:	1889      	adds	r1, r1, r2
1005776a:	b289      	uxth	r1, r1
1005776c:	2204      	movs	r2, #4
1005776e:	463b      	mov	r3, r7
10057770:	f7fd fbca 	bl	10054f08 <ACL_pkt_write>
10057774:	9405      	str	r4, [sp, #20]
10057776:	1c76      	adds	r6, r6, #1
10057778:	e7ba      	b.n	100576f0 <GAT_att_srv_find_by_type_val_exc+0x4e>
1005777a:	2f01      	cmp	r7, #1
1005777c:	d107      	bne.n	1005778e <GAT_att_srv_find_by_type_val_exc+0xec>
1005777e:	2006      	movs	r0, #6
10057780:	220a      	movs	r2, #10
10057782:	9901      	ldr	r1, [sp, #4]
10057784:	9b02      	ldr	r3, [sp, #8]
10057786:	f7ff fe53 	bl	10057430 <GAT_att_srv_write_err_packet>
1005778a:	2086      	movs	r0, #134	@ 0x86
1005778c:	e003      	b.n	10057796 <GAT_att_srv_find_by_type_val_exc+0xf4>
1005778e:	9802      	ldr	r0, [sp, #8]
10057790:	9905      	ldr	r1, [sp, #20]
10057792:	8041      	strh	r1, [r0, #2]
10057794:	2000      	movs	r0, #0
10057796:	b011      	add	sp, #68	@ 0x44
10057798:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005779a <GAT_att_srv_read_by_type_exc>:
1005779a:	b5f0      	push	{r4, r5, r6, r7, lr}
1005779c:	b097      	sub	sp, #92	@ 0x5c
1005779e:	4604      	mov	r4, r0
100577a0:	6840      	ldr	r0, [r0, #4]
100577a2:	a915      	add	r1, sp, #84	@ 0x54
100577a4:	aa14      	add	r2, sp, #80	@ 0x50
100577a6:	f000 fb88 	bl	10057eba <GAT_att_srv_get_handle_range>
100577aa:	940a      	str	r4, [sp, #40]	@ 0x28
100577ac:	6860      	ldr	r0, [r4, #4]
100577ae:	8981      	ldrh	r1, [r0, #12]
100577b0:	1d49      	adds	r1, r1, #5
100577b2:	8842      	ldrh	r2, [r0, #2]
100577b4:	b289      	uxth	r1, r1
100577b6:	2a07      	cmp	r2, #7
100577b8:	d105      	bne.n	100577c6 <GAT_att_srv_read_by_type_exc+0x2c>
100577ba:	f7fd fb8c 	bl	10054ed6 <ACL_pkt_read_16b>
100577be:	a90f      	add	r1, sp, #60	@ 0x3c
100577c0:	8188      	strh	r0, [r1, #12]
100577c2:	2010      	movs	r0, #16
100577c4:	e004      	b.n	100577d0 <GAT_att_srv_read_by_type_exc+0x36>
100577c6:	2210      	movs	r2, #16
100577c8:	ab0f      	add	r3, sp, #60	@ 0x3c
100577ca:	f7fd fb7b 	bl	10054ec4 <ACL_pkt_read>
100577ce:	2080      	movs	r0, #128	@ 0x80
100577d0:	a90f      	add	r1, sp, #60	@ 0x3c
100577d2:	7408      	strb	r0, [r1, #16]
100577d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
100577d6:	7840      	ldrb	r0, [r0, #1]
100577d8:	2810      	cmp	r0, #16
100577da:	d001      	beq.n	100577e0 <GAT_att_srv_read_by_type_exc+0x46>
100577dc:	2102      	movs	r1, #2
100577de:	e000      	b.n	100577e2 <GAT_att_srv_read_by_type_exc+0x48>
100577e0:	2104      	movs	r1, #4
100577e2:	9107      	str	r1, [sp, #28]
100577e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
100577e6:	6891      	ldr	r1, [r2, #8]
100577e8:	68cc      	ldr	r4, [r1, #12]
100577ea:	88cb      	ldrh	r3, [r1, #6]
100577ec:	9305      	str	r3, [sp, #20]
100577ee:	7812      	ldrb	r2, [r2, #0]
100577f0:	2a00      	cmp	r2, #0
100577f2:	9404      	str	r4, [sp, #16]
100577f4:	d00a      	beq.n	1005780c <GAT_att_srv_read_by_type_exc+0x72>
100577f6:	8865      	ldrh	r5, [r4, #2]
100577f8:	2d02      	cmp	r5, #2
100577fa:	d315      	bcc.n	10057828 <GAT_att_srv_read_by_type_exc+0x8e>
100577fc:	89a0      	ldrh	r0, [r4, #12]
100577fe:	1c40      	adds	r0, r0, #1
10057800:	b281      	uxth	r1, r0
10057802:	4620      	mov	r0, r4
10057804:	f000 fba9 	bl	10057f5a <ACL_pkt_read_8b>
10057808:	4606      	mov	r6, r0
1005780a:	e00e      	b.n	1005782a <GAT_att_srv_read_by_type_exc+0x90>
1005780c:	aa15      	add	r2, sp, #84	@ 0x54
1005780e:	8815      	ldrh	r5, [r2, #0]
10057810:	2810      	cmp	r0, #16
10057812:	d112      	bne.n	1005783a <GAT_att_srv_read_by_type_exc+0xa0>
10057814:	a80f      	add	r0, sp, #60	@ 0x3c
10057816:	f001 f981 	bl	10058b1c <GAT_srv_is_supported_grouping_type>
1005781a:	2800      	cmp	r0, #0
1005781c:	d100      	bne.n	10057820 <GAT_att_srv_read_by_type_exc+0x86>
1005781e:	e0b8      	b.n	10057992 <GAT_att_srv_read_by_type_exc+0x1f8>
10057820:	9508      	str	r5, [sp, #32]
10057822:	89a1      	ldrh	r1, [r4, #12]
10057824:	2211      	movs	r2, #17
10057826:	e01b      	b.n	10057860 <GAT_att_srv_read_by_type_exc+0xc6>
10057828:	2600      	movs	r6, #0
1005782a:	89a0      	ldrh	r0, [r4, #12]
1005782c:	1940      	adds	r0, r0, r5
1005782e:	b281      	uxth	r1, r0
10057830:	4620      	mov	r0, r4
10057832:	f7fd fb50 	bl	10054ed6 <ACL_pkt_read_16b>
10057836:	9008      	str	r0, [sp, #32]
10057838:	e018      	b.n	1005786c <GAT_att_srv_read_by_type_exc+0xd2>
1005783a:	a80b      	add	r0, sp, #44	@ 0x2c
1005783c:	8105      	strh	r5, [r0, #8]
1005783e:	2202      	movs	r2, #2
10057840:	7102      	strb	r2, [r0, #4]
10057842:	9a14      	ldr	r2, [sp, #80]	@ 0x50
10057844:	8142      	strh	r2, [r0, #10]
10057846:	910b      	str	r1, [sp, #44]	@ 0x2c
10057848:	a90f      	add	r1, sp, #60	@ 0x3c
1005784a:	910e      	str	r1, [sp, #56]	@ 0x38
1005784c:	f001 f9a8 	bl	10058ba0 <GAT_srv_check_change_aware>
10057850:	2886      	cmp	r0, #134	@ 0x86
10057852:	d102      	bne.n	1005785a <GAT_att_srv_read_by_type_exc+0xc0>
10057854:	a816      	add	r0, sp, #88	@ 0x58
10057856:	2212      	movs	r2, #18
10057858:	e09d      	b.n	10057996 <GAT_att_srv_read_by_type_exc+0x1fc>
1005785a:	9508      	str	r5, [sp, #32]
1005785c:	89a1      	ldrh	r1, [r4, #12]
1005785e:	2209      	movs	r2, #9
10057860:	4620      	mov	r0, r4
10057862:	f7ff fd5f 	bl	10057324 <ACL_pkt_write_8b>
10057866:	2501      	movs	r5, #1
10057868:	8065      	strh	r5, [r4, #2]
1005786a:	2600      	movs	r6, #0
1005786c:	9805      	ldr	r0, [sp, #20]
1005786e:	1e80      	subs	r0, r0, #2
10057870:	9001      	str	r0, [sp, #4]
10057872:	a814      	add	r0, sp, #80	@ 0x50
10057874:	8800      	ldrh	r0, [r0, #0]
10057876:	9003      	str	r0, [sp, #12]
10057878:	9609      	str	r6, [sp, #36]	@ 0x24
1005787a:	b2f6      	uxtb	r6, r6
1005787c:	9506      	str	r5, [sp, #24]
1005787e:	b2af      	uxth	r7, r5
10057880:	19b8      	adds	r0, r7, r6
10057882:	9905      	ldr	r1, [sp, #20]
10057884:	4288      	cmp	r0, r1
10057886:	d874      	bhi.n	10057972 <GAT_att_srv_read_by_type_exc+0x1d8>
10057888:	9808      	ldr	r0, [sp, #32]
1005788a:	b285      	uxth	r5, r0
1005788c:	aa0f      	add	r2, sp, #60	@ 0x3c
1005788e:	4628      	mov	r0, r5
10057890:	9903      	ldr	r1, [sp, #12]
10057892:	f001 f9e1 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
10057896:	2800      	cmp	r0, #0
10057898:	d06b      	beq.n	10057972 <GAT_att_srv_read_by_type_exc+0x1d8>
1005789a:	4604      	mov	r4, r0
1005789c:	9502      	str	r5, [sp, #8]
1005789e:	a816      	add	r0, sp, #88	@ 0x58
100578a0:	9000      	str	r0, [sp, #0]
100578a2:	2500      	movs	r5, #0
100578a4:	ab0b      	add	r3, sp, #44	@ 0x2c
100578a6:	980a      	ldr	r0, [sp, #40]	@ 0x28
100578a8:	4621      	mov	r1, r4
100578aa:	462a      	mov	r2, r5
100578ac:	f000 fb18 	bl	10057ee0 <GAT_att_srv_value_read>
100578b0:	2800      	cmp	r0, #0
100578b2:	d14f      	bne.n	10057954 <GAT_att_srv_read_by_type_exc+0x1ba>
100578b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100578b6:	8800      	ldrh	r0, [r0, #0]
100578b8:	9907      	ldr	r1, [sp, #28]
100578ba:	1809      	adds	r1, r1, r0
100578bc:	2f01      	cmp	r7, #1
100578be:	d111      	bne.n	100578e4 <GAT_att_srv_read_by_type_exc+0x14a>
100578c0:	29ff      	cmp	r1, #255	@ 0xff
100578c2:	d300      	bcc.n	100578c6 <GAT_att_srv_read_by_type_exc+0x12c>
100578c4:	21ff      	movs	r1, #255	@ 0xff
100578c6:	9801      	ldr	r0, [sp, #4]
100578c8:	4281      	cmp	r1, r0
100578ca:	d300      	bcc.n	100578ce <GAT_att_srv_read_by_type_exc+0x134>
100578cc:	9901      	ldr	r1, [sp, #4]
100578ce:	9109      	str	r1, [sp, #36]	@ 0x24
100578d0:	b2ca      	uxtb	r2, r1
100578d2:	9e04      	ldr	r6, [sp, #16]
100578d4:	89b0      	ldrh	r0, [r6, #12]
100578d6:	1c40      	adds	r0, r0, #1
100578d8:	b281      	uxth	r1, r0
100578da:	4630      	mov	r0, r6
100578dc:	f7ff fd22 	bl	10057324 <ACL_pkt_write_8b>
100578e0:	2702      	movs	r7, #2
100578e2:	e003      	b.n	100578ec <GAT_att_srv_read_by_type_exc+0x152>
100578e4:	42b1      	cmp	r1, r6
100578e6:	9e04      	ldr	r6, [sp, #16]
100578e8:	9f06      	ldr	r7, [sp, #24]
100578ea:	d15c      	bne.n	100579a6 <GAT_att_srv_read_by_type_exc+0x20c>
100578ec:	8865      	ldrh	r5, [r4, #2]
100578ee:	4620      	mov	r0, r4
100578f0:	f000 fe6a 	bl	100585c8 <GAT_srv_get_att_group_end_handle>
100578f4:	9008      	str	r0, [sp, #32]
100578f6:	89b0      	ldrh	r0, [r6, #12]
100578f8:	19c0      	adds	r0, r0, r7
100578fa:	b281      	uxth	r1, r0
100578fc:	4630      	mov	r0, r6
100578fe:	462a      	mov	r2, r5
10057900:	f7fd faf9 	bl	10054ef6 <ACL_pkt_write_16b>
10057904:	9807      	ldr	r0, [sp, #28]
10057906:	9909      	ldr	r1, [sp, #36]	@ 0x24
10057908:	1a0a      	subs	r2, r1, r0
1005790a:	463c      	mov	r4, r7
1005790c:	1cbf      	adds	r7, r7, #2
1005790e:	980a      	ldr	r0, [sp, #40]	@ 0x28
10057910:	7840      	ldrb	r0, [r0, #1]
10057912:	2810      	cmp	r0, #16
10057914:	d10a      	bne.n	1005792c <GAT_att_srv_read_by_type_exc+0x192>
10057916:	89b0      	ldrh	r0, [r6, #12]
10057918:	19c0      	adds	r0, r0, r7
1005791a:	b281      	uxth	r1, r0
1005791c:	4630      	mov	r0, r6
1005791e:	9d08      	ldr	r5, [sp, #32]
10057920:	4617      	mov	r7, r2
10057922:	462a      	mov	r2, r5
10057924:	f7fd fae7 	bl	10054ef6 <ACL_pkt_write_16b>
10057928:	463a      	mov	r2, r7
1005792a:	1d27      	adds	r7, r4, #4
1005792c:	462c      	mov	r4, r5
1005792e:	89b0      	ldrh	r0, [r6, #12]
10057930:	19c0      	adds	r0, r0, r7
10057932:	b281      	uxth	r1, r0
10057934:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10057936:	6843      	ldr	r3, [r0, #4]
10057938:	b2d5      	uxtb	r5, r2
1005793a:	4630      	mov	r0, r6
1005793c:	462a      	mov	r2, r5
1005793e:	f7fd fae3 	bl	10054f08 <ACL_pkt_write>
10057942:	197d      	adds	r5, r7, r5
10057944:	8075      	strh	r5, [r6, #2]
10057946:	2002      	movs	r0, #2
10057948:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005794a:	7008      	strb	r0, [r1, #0]
1005794c:	1c60      	adds	r0, r4, #1
1005794e:	9008      	str	r0, [sp, #32]
10057950:	9e09      	ldr	r6, [sp, #36]	@ 0x24
10057952:	e791      	b.n	10057878 <GAT_att_srv_read_by_type_exc+0xde>
10057954:	2886      	cmp	r0, #134	@ 0x86
10057956:	9a06      	ldr	r2, [sp, #24]
10057958:	d016      	beq.n	10057988 <GAT_att_srv_read_by_type_exc+0x1ee>
1005795a:	2884      	cmp	r0, #132	@ 0x84
1005795c:	4605      	mov	r5, r0
1005795e:	9804      	ldr	r0, [sp, #16]
10057960:	d121      	bne.n	100579a6 <GAT_att_srv_read_by_type_exc+0x20c>
10057962:	8981      	ldrh	r1, [r0, #12]
10057964:	1889      	adds	r1, r1, r2
10057966:	b289      	uxth	r1, r1
10057968:	9a02      	ldr	r2, [sp, #8]
1005796a:	f7fd fac4 	bl	10054ef6 <ACL_pkt_write_16b>
1005796e:	2584      	movs	r5, #132	@ 0x84
10057970:	e019      	b.n	100579a6 <GAT_att_srv_read_by_type_exc+0x20c>
10057972:	2f01      	cmp	r7, #1
10057974:	d106      	bne.n	10057984 <GAT_att_srv_read_by_type_exc+0x1ea>
10057976:	a816      	add	r0, sp, #88	@ 0x58
10057978:	220a      	movs	r2, #10
1005797a:	7002      	strb	r2, [r0, #0]
1005797c:	a815      	add	r0, sp, #84	@ 0x54
1005797e:	8805      	ldrh	r5, [r0, #0]
10057980:	9c04      	ldr	r4, [sp, #16]
10057982:	e009      	b.n	10057998 <GAT_att_srv_read_by_type_exc+0x1fe>
10057984:	2500      	movs	r5, #0
10057986:	e00e      	b.n	100579a6 <GAT_att_srv_read_by_type_exc+0x20c>
10057988:	a816      	add	r0, sp, #88	@ 0x58
1005798a:	7802      	ldrb	r2, [r0, #0]
1005798c:	9c04      	ldr	r4, [sp, #16]
1005798e:	9d08      	ldr	r5, [sp, #32]
10057990:	e002      	b.n	10057998 <GAT_att_srv_read_by_type_exc+0x1fe>
10057992:	a816      	add	r0, sp, #88	@ 0x58
10057994:	2210      	movs	r2, #16
10057996:	7002      	strb	r2, [r0, #0]
10057998:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005799a:	7840      	ldrb	r0, [r0, #1]
1005799c:	b2a9      	uxth	r1, r5
1005799e:	4623      	mov	r3, r4
100579a0:	f7ff fd46 	bl	10057430 <GAT_att_srv_write_err_packet>
100579a4:	2586      	movs	r5, #134	@ 0x86
100579a6:	4628      	mov	r0, r5
100579a8:	b017      	add	sp, #92	@ 0x5c
100579aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

100579ac <GAT_att_srv_read_exc>:
100579ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100579ae:	b08b      	sub	sp, #44	@ 0x2c
100579b0:	4605      	mov	r5, r0
100579b2:	6880      	ldr	r0, [r0, #8]
100579b4:	68c4      	ldr	r4, [r0, #12]
100579b6:	88c7      	ldrh	r7, [r0, #6]
100579b8:	7828      	ldrb	r0, [r5, #0]
100579ba:	2800      	cmp	r0, #0
100579bc:	d024      	beq.n	10057a08 <GAT_att_srv_read_exc+0x5c>
100579be:	462e      	mov	r6, r5
100579c0:	360c      	adds	r6, #12
100579c2:	9605      	str	r6, [sp, #20]
100579c4:	6868      	ldr	r0, [r5, #4]
100579c6:	8980      	ldrh	r0, [r0, #12]
100579c8:	1c40      	adds	r0, r0, #1
100579ca:	b281      	uxth	r1, r0
100579cc:	2204      	movs	r2, #4
100579ce:	ab04      	add	r3, sp, #16
100579d0:	4620      	mov	r0, r4
100579d2:	f7fd fa77 	bl	10054ec4 <ACL_pkt_read>
100579d6:	8830      	ldrh	r0, [r6, #0]
100579d8:	7869      	ldrb	r1, [r5, #1]
100579da:	1e7f      	subs	r7, r7, #1
100579dc:	290c      	cmp	r1, #12
100579de:	d103      	bne.n	100579e8 <GAT_att_srv_read_exc+0x3c>
100579e0:	4287      	cmp	r7, r0
100579e2:	d253      	bcs.n	10057a8c <GAT_att_srv_read_exc+0xe0>
100579e4:	9904      	ldr	r1, [sp, #16]
100579e6:	1a40      	subs	r0, r0, r1
100579e8:	b280      	uxth	r0, r0
100579ea:	4287      	cmp	r7, r0
100579ec:	d300      	bcc.n	100579f0 <GAT_att_srv_read_exc+0x44>
100579ee:	4607      	mov	r7, r0
100579f0:	b2ba      	uxth	r2, r7
100579f2:	6873      	ldr	r3, [r6, #4]
100579f4:	89a0      	ldrh	r0, [r4, #12]
100579f6:	1c40      	adds	r0, r0, #1
100579f8:	b281      	uxth	r1, r0
100579fa:	4620      	mov	r0, r4
100579fc:	f7fd fa84 	bl	10054f08 <ACL_pkt_write>
10057a00:	1c78      	adds	r0, r7, #1
10057a02:	8060      	strh	r0, [r4, #2]
10057a04:	2000      	movs	r0, #0
10057a06:	e04d      	b.n	10057aa4 <GAT_att_srv_read_exc+0xf8>
10057a08:	7868      	ldrb	r0, [r5, #1]
10057a0a:	280c      	cmp	r0, #12
10057a0c:	9702      	str	r7, [sp, #8]
10057a0e:	d107      	bne.n	10057a20 <GAT_att_srv_read_exc+0x74>
10057a10:	6868      	ldr	r0, [r5, #4]
10057a12:	8981      	ldrh	r1, [r0, #12]
10057a14:	1cc9      	adds	r1, r1, #3
10057a16:	b289      	uxth	r1, r1
10057a18:	f7fd fa5d 	bl	10054ed6 <ACL_pkt_read_16b>
10057a1c:	220d      	movs	r2, #13
10057a1e:	e001      	b.n	10057a24 <GAT_att_srv_read_exc+0x78>
10057a20:	220b      	movs	r2, #11
10057a22:	2000      	movs	r0, #0
10057a24:	af04      	add	r7, sp, #16
10057a26:	9003      	str	r0, [sp, #12]
10057a28:	8038      	strh	r0, [r7, #0]
10057a2a:	89a1      	ldrh	r1, [r4, #12]
10057a2c:	4620      	mov	r0, r4
10057a2e:	f7ff fc79 	bl	10057324 <ACL_pkt_write_8b>
10057a32:	6868      	ldr	r0, [r5, #4]
10057a34:	8981      	ldrh	r1, [r0, #12]
10057a36:	1c49      	adds	r1, r1, #1
10057a38:	b289      	uxth	r1, r1
10057a3a:	f7fd fa4c 	bl	10054ed6 <ACL_pkt_read_16b>
10057a3e:	4606      	mov	r6, r0
10057a40:	8078      	strh	r0, [r7, #2]
10057a42:	a807      	add	r0, sp, #28
10057a44:	8106      	strh	r6, [r0, #8]
10057a46:	2701      	movs	r7, #1
10057a48:	7107      	strb	r7, [r0, #4]
10057a4a:	68a9      	ldr	r1, [r5, #8]
10057a4c:	9107      	str	r1, [sp, #28]
10057a4e:	f001 f8a7 	bl	10058ba0 <GAT_srv_check_change_aware>
10057a52:	2886      	cmp	r0, #134	@ 0x86
10057a54:	d101      	bne.n	10057a5a <GAT_att_srv_read_exc+0xae>
10057a56:	2712      	movs	r7, #18
10057a58:	e015      	b.n	10057a86 <GAT_att_srv_read_exc+0xda>
10057a5a:	4630      	mov	r0, r6
10057a5c:	f00c ffa4 	bl	100649a8 <GAT_att_db_find_by_handle>
10057a60:	2800      	cmp	r0, #0
10057a62:	d010      	beq.n	10057a86 <GAT_att_srv_read_exc+0xda>
10057a64:	4601      	mov	r1, r0
10057a66:	a806      	add	r0, sp, #24
10057a68:	9000      	str	r0, [sp, #0]
10057a6a:	ab05      	add	r3, sp, #20
10057a6c:	4628      	mov	r0, r5
10057a6e:	9a03      	ldr	r2, [sp, #12]
10057a70:	f000 fa36 	bl	10057ee0 <GAT_att_srv_value_read>
10057a74:	2800      	cmp	r0, #0
10057a76:	d017      	beq.n	10057aa8 <GAT_att_srv_read_exc+0xfc>
10057a78:	2884      	cmp	r0, #132	@ 0x84
10057a7a:	d018      	beq.n	10057aae <GAT_att_srv_read_exc+0x102>
10057a7c:	2886      	cmp	r0, #134	@ 0x86
10057a7e:	d111      	bne.n	10057aa4 <GAT_att_srv_read_exc+0xf8>
10057a80:	a806      	add	r0, sp, #24
10057a82:	7807      	ldrb	r7, [r0, #0]
10057a84:	e007      	b.n	10057a96 <GAT_att_srv_read_exc+0xea>
10057a86:	a806      	add	r0, sp, #24
10057a88:	7007      	strb	r7, [r0, #0]
10057a8a:	e004      	b.n	10057a96 <GAT_att_srv_read_exc+0xea>
10057a8c:	a806      	add	r0, sp, #24
10057a8e:	270b      	movs	r7, #11
10057a90:	7007      	strb	r7, [r0, #0]
10057a92:	a804      	add	r0, sp, #16
10057a94:	8846      	ldrh	r6, [r0, #2]
10057a96:	7868      	ldrb	r0, [r5, #1]
10057a98:	4631      	mov	r1, r6
10057a9a:	463a      	mov	r2, r7
10057a9c:	4623      	mov	r3, r4
10057a9e:	f7ff fcc7 	bl	10057430 <GAT_att_srv_write_err_packet>
10057aa2:	2086      	movs	r0, #134	@ 0x86
10057aa4:	b00b      	add	sp, #44	@ 0x2c
10057aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057aa8:	9e05      	ldr	r6, [sp, #20]
10057aaa:	9f02      	ldr	r7, [sp, #8]
10057aac:	e793      	b.n	100579d6 <GAT_att_srv_read_exc+0x2a>
10057aae:	89a0      	ldrh	r0, [r4, #12]
10057ab0:	1c40      	adds	r0, r0, #1
10057ab2:	b281      	uxth	r1, r0
10057ab4:	2204      	movs	r2, #4
10057ab6:	ab04      	add	r3, sp, #16
10057ab8:	4620      	mov	r0, r4
10057aba:	f7fd fa25 	bl	10054f08 <ACL_pkt_write>
10057abe:	2084      	movs	r0, #132	@ 0x84
10057ac0:	e7f0      	b.n	10057aa4 <GAT_att_srv_read_exc+0xf8>

10057ac2 <GAT_att_srv_read_multi_exc>:
10057ac2:	b5f0      	push	{r4, r5, r6, r7, lr}
10057ac4:	b08d      	sub	sp, #52	@ 0x34
10057ac6:	6881      	ldr	r1, [r0, #8]
10057ac8:	68ce      	ldr	r6, [r1, #12]
10057aca:	88c9      	ldrh	r1, [r1, #6]
10057acc:	9106      	str	r1, [sp, #24]
10057ace:	7801      	ldrb	r1, [r0, #0]
10057ad0:	2900      	cmp	r1, #0
10057ad2:	9007      	str	r0, [sp, #28]
10057ad4:	d009      	beq.n	10057aea <GAT_att_srv_read_multi_exc+0x28>
10057ad6:	8877      	ldrh	r7, [r6, #2]
10057ad8:	89b0      	ldrh	r0, [r6, #12]
10057ada:	19c0      	adds	r0, r0, r7
10057adc:	b281      	uxth	r1, r0
10057ade:	4630      	mov	r0, r6
10057ae0:	f7fd f9f9 	bl	10054ed6 <ACL_pkt_read_16b>
10057ae4:	9907      	ldr	r1, [sp, #28]
10057ae6:	4602      	mov	r2, r0
10057ae8:	e00c      	b.n	10057b04 <GAT_att_srv_read_multi_exc+0x42>
10057aea:	7840      	ldrb	r0, [r0, #1]
10057aec:	280e      	cmp	r0, #14
10057aee:	d001      	beq.n	10057af4 <GAT_att_srv_read_multi_exc+0x32>
10057af0:	2221      	movs	r2, #33	@ 0x21
10057af2:	e000      	b.n	10057af6 <GAT_att_srv_read_multi_exc+0x34>
10057af4:	220f      	movs	r2, #15
10057af6:	89b1      	ldrh	r1, [r6, #12]
10057af8:	4630      	mov	r0, r6
10057afa:	f7ff fc13 	bl	10057324 <ACL_pkt_write_8b>
10057afe:	2201      	movs	r2, #1
10057b00:	4617      	mov	r7, r2
10057b02:	9907      	ldr	r1, [sp, #28]
10057b04:	6848      	ldr	r0, [r1, #4]
10057b06:	7880      	ldrb	r0, [r0, #2]
10057b08:	1a80      	subs	r0, r0, r2
10057b0a:	b2c0      	uxtb	r0, r0
10057b0c:	0845      	lsrs	r5, r0, #1
10057b0e:	7808      	ldrb	r0, [r1, #0]
10057b10:	2800      	cmp	r0, #0
10057b12:	9602      	str	r6, [sp, #8]
10057b14:	d066      	beq.n	10057be4 <GAT_att_srv_read_multi_exc+0x122>
10057b16:	9907      	ldr	r1, [sp, #28]
10057b18:	4608      	mov	r0, r1
10057b1a:	300c      	adds	r0, #12
10057b1c:	9001      	str	r0, [sp, #4]
10057b1e:	b2ed      	uxtb	r5, r5
10057b20:	35ff      	adds	r5, #255	@ 0xff
10057b22:	b2e8      	uxtb	r0, r5
10057b24:	2300      	movs	r3, #0
10057b26:	9303      	str	r3, [sp, #12]
10057b28:	42a8      	cmp	r0, r5
10057b2a:	d100      	bne.n	10057b2e <GAT_att_srv_read_multi_exc+0x6c>
10057b2c:	e0b3      	b.n	10057c96 <GAT_att_srv_read_multi_exc+0x1d4>
10057b2e:	b2bc      	uxth	r4, r7
10057b30:	9806      	ldr	r0, [sp, #24]
10057b32:	42a0      	cmp	r0, r4
10057b34:	d800      	bhi.n	10057b38 <GAT_att_srv_read_multi_exc+0x76>
10057b36:	e0ae      	b.n	10057c96 <GAT_att_srv_read_multi_exc+0x1d4>
10057b38:	6848      	ldr	r0, [r1, #4]
10057b3a:	8981      	ldrh	r1, [r0, #12]
10057b3c:	9205      	str	r2, [sp, #20]
10057b3e:	1889      	adds	r1, r1, r2
10057b40:	b289      	uxth	r1, r1
10057b42:	2202      	movs	r2, #2
10057b44:	ab0c      	add	r3, sp, #48	@ 0x30
10057b46:	9204      	str	r2, [sp, #16]
10057b48:	f7fd f9bc 	bl	10054ec4 <ACL_pkt_read>
10057b4c:	9907      	ldr	r1, [sp, #28]
10057b4e:	7808      	ldrb	r0, [r1, #0]
10057b50:	2801      	cmp	r0, #1
10057b52:	d102      	bne.n	10057b5a <GAT_att_srv_read_multi_exc+0x98>
10057b54:	9801      	ldr	r0, [sp, #4]
10057b56:	9008      	str	r0, [sp, #32]
10057b58:	e00d      	b.n	10057b76 <GAT_att_srv_read_multi_exc+0xb4>
10057b5a:	a80c      	add	r0, sp, #48	@ 0x30
10057b5c:	8800      	ldrh	r0, [r0, #0]
10057b5e:	f00c ff23 	bl	100649a8 <GAT_att_db_find_by_handle>
10057b62:	4601      	mov	r1, r0
10057b64:	9807      	ldr	r0, [sp, #28]
10057b66:	6880      	ldr	r0, [r0, #8]
10057b68:	8900      	ldrh	r0, [r0, #8]
10057b6a:	aa08      	add	r2, sp, #32
10057b6c:	f000 fdc6 	bl	100586fc <GAT_srv_get_attr_value>
10057b70:	9907      	ldr	r1, [sp, #28]
10057b72:	2884      	cmp	r0, #132	@ 0x84
10057b74:	d065      	beq.n	10057c42 <GAT_att_srv_read_multi_exc+0x180>
10057b76:	9806      	ldr	r0, [sp, #24]
10057b78:	1b04      	subs	r4, r0, r4
10057b7a:	7848      	ldrb	r0, [r1, #1]
10057b7c:	280e      	cmp	r0, #14
10057b7e:	d109      	bne.n	10057b94 <GAT_att_srv_read_multi_exc+0xd2>
10057b80:	89b0      	ldrh	r0, [r6, #12]
10057b82:	19c1      	adds	r1, r0, r7
10057b84:	9808      	ldr	r0, [sp, #32]
10057b86:	8802      	ldrh	r2, [r0, #0]
10057b88:	4294      	cmp	r4, r2
10057b8a:	db00      	blt.n	10057b8e <GAT_att_srv_read_multi_exc+0xcc>
10057b8c:	4614      	mov	r4, r2
10057b8e:	b289      	uxth	r1, r1
10057b90:	b2a2      	uxth	r2, r4
10057b92:	e013      	b.n	10057bbc <GAT_att_srv_read_multi_exc+0xfa>
10057b94:	89b0      	ldrh	r0, [r6, #12]
10057b96:	19c0      	adds	r0, r0, r7
10057b98:	b281      	uxth	r1, r0
10057b9a:	9a08      	ldr	r2, [sp, #32]
10057b9c:	4630      	mov	r0, r6
10057b9e:	8816      	ldrh	r6, [r2, #0]
10057ba0:	4632      	mov	r2, r6
10057ba2:	f7fd f9a8 	bl	10054ef6 <ACL_pkt_write_16b>
10057ba6:	1ea4      	subs	r4, r4, #2
10057ba8:	42b4      	cmp	r4, r6
10057baa:	d300      	bcc.n	10057bae <GAT_att_srv_read_multi_exc+0xec>
10057bac:	4634      	mov	r4, r6
10057bae:	b2a2      	uxth	r2, r4
10057bb0:	1cbf      	adds	r7, r7, #2
10057bb2:	9e02      	ldr	r6, [sp, #8]
10057bb4:	89b0      	ldrh	r0, [r6, #12]
10057bb6:	19c0      	adds	r0, r0, r7
10057bb8:	b281      	uxth	r1, r0
10057bba:	9808      	ldr	r0, [sp, #32]
10057bbc:	6843      	ldr	r3, [r0, #4]
10057bbe:	4630      	mov	r0, r6
10057bc0:	f7fd f9a2 	bl	10054f08 <ACL_pkt_write>
10057bc4:	193f      	adds	r7, r7, r4
10057bc6:	8077      	strh	r7, [r6, #2]
10057bc8:	9907      	ldr	r1, [sp, #28]
10057bca:	7848      	ldrb	r0, [r1, #1]
10057bcc:	2820      	cmp	r0, #32
10057bce:	9a05      	ldr	r2, [sp, #20]
10057bd0:	d104      	bne.n	10057bdc <GAT_att_srv_read_multi_exc+0x11a>
10057bd2:	9806      	ldr	r0, [sp, #24]
10057bd4:	1bc0      	subs	r0, r0, r7
10057bd6:	b280      	uxth	r0, r0
10057bd8:	2802      	cmp	r0, #2
10057bda:	d35c      	bcc.n	10057c96 <GAT_att_srv_read_multi_exc+0x1d4>
10057bdc:	9804      	ldr	r0, [sp, #16]
10057bde:	7008      	strb	r0, [r1, #0]
10057be0:	1c92      	adds	r2, r2, #2
10057be2:	e79c      	b.n	10057b1e <GAT_att_srv_read_multi_exc+0x5c>
10057be4:	2100      	movs	r1, #0
10057be6:	9205      	str	r2, [sp, #20]
10057be8:	9c07      	ldr	r4, [sp, #28]
10057bea:	b288      	uxth	r0, r1
10057bec:	42a8      	cmp	r0, r5
10057bee:	d292      	bcs.n	10057b16 <GAT_att_srv_read_multi_exc+0x54>
10057bf0:	9104      	str	r1, [sp, #16]
10057bf2:	0049      	lsls	r1, r1, #1
10057bf4:	6860      	ldr	r0, [r4, #4]
10057bf6:	8982      	ldrh	r2, [r0, #12]
10057bf8:	1851      	adds	r1, r2, r1
10057bfa:	1c49      	adds	r1, r1, #1
10057bfc:	b289      	uxth	r1, r1
10057bfe:	2202      	movs	r2, #2
10057c00:	ab0c      	add	r3, sp, #48	@ 0x30
10057c02:	f7fd f95f 	bl	10054ec4 <ACL_pkt_read>
10057c06:	a808      	add	r0, sp, #32
10057c08:	2601      	movs	r6, #1
10057c0a:	7106      	strb	r6, [r0, #4]
10057c0c:	990c      	ldr	r1, [sp, #48]	@ 0x30
10057c0e:	8101      	strh	r1, [r0, #8]
10057c10:	68a1      	ldr	r1, [r4, #8]
10057c12:	9108      	str	r1, [sp, #32]
10057c14:	f000 ffc4 	bl	10058ba0 <GAT_srv_check_change_aware>
10057c18:	2886      	cmp	r0, #134	@ 0x86
10057c1a:	d02a      	beq.n	10057c72 <GAT_att_srv_read_multi_exc+0x1b0>
10057c1c:	a80c      	add	r0, sp, #48	@ 0x30
10057c1e:	8800      	ldrh	r0, [r0, #0]
10057c20:	f00c fec2 	bl	100649a8 <GAT_att_db_find_by_handle>
10057c24:	2800      	cmp	r0, #0
10057c26:	d027      	beq.n	10057c78 <GAT_att_srv_read_multi_exc+0x1b6>
10057c28:	9907      	ldr	r1, [sp, #28]
10057c2a:	6889      	ldr	r1, [r1, #8]
10057c2c:	8909      	ldrh	r1, [r1, #8]
10057c2e:	2201      	movs	r2, #1
10057c30:	f000 fcee 	bl	10058610 <GAT_srv_check_perms>
10057c34:	2800      	cmp	r0, #0
10057c36:	d11e      	bne.n	10057c76 <GAT_att_srv_read_multi_exc+0x1b4>
10057c38:	9904      	ldr	r1, [sp, #16]
10057c3a:	1c49      	adds	r1, r1, #1
10057c3c:	9e02      	ldr	r6, [sp, #8]
10057c3e:	9a05      	ldr	r2, [sp, #20]
10057c40:	e7d3      	b.n	10057bea <GAT_att_srv_read_multi_exc+0x128>
10057c42:	a80c      	add	r0, sp, #48	@ 0x30
10057c44:	8803      	ldrh	r3, [r0, #0]
10057c46:	6888      	ldr	r0, [r1, #8]
10057c48:	8942      	ldrh	r2, [r0, #10]
10057c4a:	8901      	ldrh	r1, [r0, #8]
10057c4c:	2000      	movs	r0, #0
10057c4e:	9000      	str	r0, [sp, #0]
10057c50:	2002      	movs	r0, #2
10057c52:	f00b fe45 	bl	100638e0 <aci_gatt_srv_read_event_push_noinline>
10057c56:	9003      	str	r0, [sp, #12]
10057c58:	2800      	cmp	r0, #0
10057c5a:	9a05      	ldr	r2, [sp, #20]
10057c5c:	d11b      	bne.n	10057c96 <GAT_att_srv_read_multi_exc+0x1d4>
10057c5e:	8077      	strh	r7, [r6, #2]
10057c60:	89b0      	ldrh	r0, [r6, #12]
10057c62:	19c0      	adds	r0, r0, r7
10057c64:	b281      	uxth	r1, r0
10057c66:	b292      	uxth	r2, r2
10057c68:	4630      	mov	r0, r6
10057c6a:	f7fd f944 	bl	10054ef6 <ACL_pkt_write_16b>
10057c6e:	2084      	movs	r0, #132	@ 0x84
10057c70:	e010      	b.n	10057c94 <GAT_att_srv_read_multi_exc+0x1d2>
10057c72:	2612      	movs	r6, #18
10057c74:	e000      	b.n	10057c78 <GAT_att_srv_read_multi_exc+0x1b6>
10057c76:	4606      	mov	r6, r0
10057c78:	a80c      	add	r0, sp, #48	@ 0x30
10057c7a:	8801      	ldrh	r1, [r0, #0]
10057c7c:	9807      	ldr	r0, [sp, #28]
10057c7e:	7840      	ldrb	r0, [r0, #1]
10057c80:	280e      	cmp	r0, #14
10057c82:	d101      	bne.n	10057c88 <GAT_att_srv_read_multi_exc+0x1c6>
10057c84:	200e      	movs	r0, #14
10057c86:	e000      	b.n	10057c8a <GAT_att_srv_read_multi_exc+0x1c8>
10057c88:	2020      	movs	r0, #32
10057c8a:	4632      	mov	r2, r6
10057c8c:	9b02      	ldr	r3, [sp, #8]
10057c8e:	f7ff fbcf 	bl	10057430 <GAT_att_srv_write_err_packet>
10057c92:	2086      	movs	r0, #134	@ 0x86
10057c94:	9003      	str	r0, [sp, #12]
10057c96:	9803      	ldr	r0, [sp, #12]
10057c98:	b00d      	add	sp, #52	@ 0x34
10057c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10057c9c <GAT_att_srv_write_exc>:
10057c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10057c9e:	b089      	sub	sp, #36	@ 0x24
10057ca0:	4604      	mov	r4, r0
10057ca2:	7800      	ldrb	r0, [r0, #0]
10057ca4:	2800      	cmp	r0, #0
10057ca6:	d001      	beq.n	10057cac <GAT_att_srv_write_exc+0x10>
10057ca8:	2000      	movs	r0, #0
10057caa:	e03b      	b.n	10057d24 <GAT_att_srv_write_exc+0x88>
10057cac:	6860      	ldr	r0, [r4, #4]
10057cae:	68a1      	ldr	r1, [r4, #8]
10057cb0:	68c9      	ldr	r1, [r1, #12]
10057cb2:	9106      	str	r1, [sp, #24]
10057cb4:	8846      	ldrh	r6, [r0, #2]
10057cb6:	8981      	ldrh	r1, [r0, #12]
10057cb8:	1c49      	adds	r1, r1, #1
10057cba:	b289      	uxth	r1, r1
10057cbc:	f7fd f90b 	bl	10054ed6 <ACL_pkt_read_16b>
10057cc0:	4605      	mov	r5, r0
10057cc2:	1ef1      	subs	r1, r6, #3
10057cc4:	7860      	ldrb	r0, [r4, #1]
10057cc6:	2700      	movs	r7, #0
10057cc8:	2852      	cmp	r0, #82	@ 0x52
10057cca:	d00c      	beq.n	10057ce6 <GAT_att_srv_write_exc+0x4a>
10057ccc:	28d2      	cmp	r0, #210	@ 0xd2
10057cce:	d10e      	bne.n	10057cee <GAT_att_srv_write_exc+0x52>
10057cd0:	68a0      	ldr	r0, [r4, #8]
10057cd2:	8940      	ldrh	r0, [r0, #10]
10057cd4:	2804      	cmp	r0, #4
10057cd6:	d124      	bne.n	10057d22 <GAT_att_srv_write_exc+0x86>
10057cd8:	3e0f      	subs	r6, #15
10057cda:	2205      	movs	r2, #5
10057cdc:	2701      	movs	r7, #1
10057cde:	2000      	movs	r0, #0
10057ce0:	9004      	str	r0, [sp, #16]
10057ce2:	9605      	str	r6, [sp, #20]
10057ce4:	e00e      	b.n	10057d04 <GAT_att_srv_write_exc+0x68>
10057ce6:	9105      	str	r1, [sp, #20]
10057ce8:	2204      	movs	r2, #4
10057cea:	9704      	str	r7, [sp, #16]
10057cec:	e00a      	b.n	10057d04 <GAT_att_srv_write_exc+0x68>
10057cee:	9105      	str	r1, [sp, #20]
10057cf0:	9e06      	ldr	r6, [sp, #24]
10057cf2:	89b1      	ldrh	r1, [r6, #12]
10057cf4:	2213      	movs	r2, #19
10057cf6:	4630      	mov	r0, r6
10057cf8:	f7ff fb14 	bl	10057324 <ACL_pkt_write_8b>
10057cfc:	2001      	movs	r0, #1
10057cfe:	9004      	str	r0, [sp, #16]
10057d00:	8070      	strh	r0, [r6, #2]
10057d02:	2203      	movs	r2, #3
10057d04:	ab07      	add	r3, sp, #28
10057d06:	4620      	mov	r0, r4
10057d08:	4629      	mov	r1, r5
10057d0a:	f000 f936 	bl	10057f7a <GAT_att_srv_set_attr_value_check>
10057d0e:	4602      	mov	r2, r0
10057d10:	a808      	add	r0, sp, #32
10057d12:	7002      	strb	r2, [r0, #0]
10057d14:	2a00      	cmp	r2, #0
10057d16:	d007      	beq.n	10057d28 <GAT_att_srv_write_exc+0x8c>
10057d18:	7860      	ldrb	r0, [r4, #1]
10057d1a:	4629      	mov	r1, r5
10057d1c:	9b06      	ldr	r3, [sp, #24]
10057d1e:	f7ff fb87 	bl	10057430 <GAT_att_srv_write_err_packet>
10057d22:	2086      	movs	r0, #134	@ 0x86
10057d24:	b009      	add	sp, #36	@ 0x24
10057d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
10057d28:	2f00      	cmp	r7, #0
10057d2a:	d008      	beq.n	10057d3e <GAT_att_srv_write_exc+0xa2>
10057d2c:	6861      	ldr	r1, [r4, #4]
10057d2e:	68a0      	ldr	r0, [r4, #8]
10057d30:	8900      	ldrh	r0, [r0, #8]
10057d32:	f00a fc94 	bl	1006265e <smp_sap_sm2_packet_data_signing_validate>
10057d36:	2800      	cmp	r0, #0
10057d38:	d001      	beq.n	10057d3e <GAT_att_srv_write_exc+0xa2>
10057d3a:	2200      	movs	r2, #0
10057d3c:	e7ec      	b.n	10057d18 <GAT_att_srv_write_exc+0x7c>
10057d3e:	6861      	ldr	r1, [r4, #4]
10057d40:	9807      	ldr	r0, [sp, #28]
10057d42:	aa08      	add	r2, sp, #32
10057d44:	f000 fdda 	bl	100588fc <GAT_srv_attr_value_write>
10057d48:	2800      	cmp	r0, #0
10057d4a:	d0eb      	beq.n	10057d24 <GAT_att_srv_write_exc+0x88>
10057d4c:	2884      	cmp	r0, #132	@ 0x84
10057d4e:	d112      	bne.n	10057d76 <GAT_att_srv_write_exc+0xda>
10057d50:	6860      	ldr	r0, [r4, #4]
10057d52:	68a1      	ldr	r1, [r4, #8]
10057d54:	894a      	ldrh	r2, [r1, #10]
10057d56:	8909      	ldrh	r1, [r1, #8]
10057d58:	9b05      	ldr	r3, [sp, #20]
10057d5a:	b29b      	uxth	r3, r3
10057d5c:	9500      	str	r5, [sp, #0]
10057d5e:	9301      	str	r3, [sp, #4]
10057d60:	9002      	str	r0, [sp, #8]
10057d62:	200a      	movs	r0, #10
10057d64:	9b04      	ldr	r3, [sp, #16]
10057d66:	f00b fdf5 	bl	10063954 <aci_gatt_srv_write_event_push_noinline>
10057d6a:	2800      	cmp	r0, #0
10057d6c:	d1da      	bne.n	10057d24 <GAT_att_srv_write_exc+0x88>
10057d6e:	2000      	movs	r0, #0
10057d70:	6060      	str	r0, [r4, #4]
10057d72:	2084      	movs	r0, #132	@ 0x84
10057d74:	e7d6      	b.n	10057d24 <GAT_att_srv_write_exc+0x88>
10057d76:	a808      	add	r0, sp, #32
10057d78:	7802      	ldrb	r2, [r0, #0]
10057d7a:	e7cd      	b.n	10057d18 <GAT_att_srv_write_exc+0x7c>

10057d7c <GAT_att_srv_prep_wr_exc>:
10057d7c:	b570      	push	{r4, r5, r6, lr}
10057d7e:	b086      	sub	sp, #24
10057d80:	4604      	mov	r4, r0
10057d82:	7800      	ldrb	r0, [r0, #0]
10057d84:	2800      	cmp	r0, #0
10057d86:	d014      	beq.n	10057db2 <GAT_att_srv_prep_wr_exc+0x36>
10057d88:	89a5      	ldrh	r5, [r4, #12]
10057d8a:	68a0      	ldr	r0, [r4, #8]
10057d8c:	88c1      	ldrh	r1, [r0, #6]
10057d8e:	1f49      	subs	r1, r1, #5
10057d90:	42a9      	cmp	r1, r5
10057d92:	d800      	bhi.n	10057d96 <GAT_att_srv_prep_wr_exc+0x1a>
10057d94:	460d      	mov	r5, r1
10057d96:	b2aa      	uxth	r2, r5
10057d98:	6923      	ldr	r3, [r4, #16]
10057d9a:	68c0      	ldr	r0, [r0, #12]
10057d9c:	8981      	ldrh	r1, [r0, #12]
10057d9e:	1d49      	adds	r1, r1, #5
10057da0:	b289      	uxth	r1, r1
10057da2:	f7fd f8b1 	bl	10054f08 <ACL_pkt_write>
10057da6:	1d68      	adds	r0, r5, #5
10057da8:	68a1      	ldr	r1, [r4, #8]
10057daa:	68c9      	ldr	r1, [r1, #12]
10057dac:	8048      	strh	r0, [r1, #2]
10057dae:	2000      	movs	r0, #0
10057db0:	e040      	b.n	10057e34 <GAT_att_srv_prep_wr_exc+0xb8>
10057db2:	6860      	ldr	r0, [r4, #4]
10057db4:	8981      	ldrh	r1, [r0, #12]
10057db6:	1c49      	adds	r1, r1, #1
10057db8:	b289      	uxth	r1, r1
10057dba:	f7fd f88c 	bl	10054ed6 <ACL_pkt_read_16b>
10057dbe:	4605      	mov	r5, r0
10057dc0:	2203      	movs	r2, #3
10057dc2:	ab05      	add	r3, sp, #20
10057dc4:	4620      	mov	r0, r4
10057dc6:	4629      	mov	r1, r5
10057dc8:	f000 f8d7 	bl	10057f7a <GAT_att_srv_set_attr_value_check>
10057dcc:	2800      	cmp	r0, #0
10057dce:	d008      	beq.n	10057de2 <GAT_att_srv_prep_wr_exc+0x66>
10057dd0:	4602      	mov	r2, r0
10057dd2:	68a0      	ldr	r0, [r4, #8]
10057dd4:	68c3      	ldr	r3, [r0, #12]
10057dd6:	2016      	movs	r0, #22
10057dd8:	4629      	mov	r1, r5
10057dda:	f7ff fb29 	bl	10057430 <GAT_att_srv_write_err_packet>
10057dde:	2086      	movs	r0, #134	@ 0x86
10057de0:	e028      	b.n	10057e34 <GAT_att_srv_prep_wr_exc+0xb8>
10057de2:	6860      	ldr	r0, [r4, #4]
10057de4:	8981      	ldrh	r1, [r0, #12]
10057de6:	1cc9      	adds	r1, r1, #3
10057de8:	b289      	uxth	r1, r1
10057dea:	f7fd f874 	bl	10054ed6 <ACL_pkt_read_16b>
10057dee:	4606      	mov	r6, r0
10057df0:	6860      	ldr	r0, [r4, #4]
10057df2:	68a1      	ldr	r1, [r4, #8]
10057df4:	894a      	ldrh	r2, [r1, #10]
10057df6:	8909      	ldrh	r1, [r1, #8]
10057df8:	8843      	ldrh	r3, [r0, #2]
10057dfa:	1f5b      	subs	r3, r3, #5
10057dfc:	b29b      	uxth	r3, r3
10057dfe:	9600      	str	r6, [sp, #0]
10057e00:	9301      	str	r3, [sp, #4]
10057e02:	9002      	str	r0, [sp, #8]
10057e04:	200a      	movs	r0, #10
10057e06:	462b      	mov	r3, r5
10057e08:	f00c f80c 	bl	10063e24 <aci_att_srv_prepare_write_req_event_push_noinline>
10057e0c:	2800      	cmp	r0, #0
10057e0e:	d111      	bne.n	10057e34 <GAT_att_srv_prep_wr_exc+0xb8>
10057e10:	ab03      	add	r3, sp, #12
10057e12:	705d      	strb	r5, [r3, #1]
10057e14:	0a28      	lsrs	r0, r5, #8
10057e16:	7098      	strb	r0, [r3, #2]
10057e18:	70de      	strb	r6, [r3, #3]
10057e1a:	2017      	movs	r0, #23
10057e1c:	7018      	strb	r0, [r3, #0]
10057e1e:	0a30      	lsrs	r0, r6, #8
10057e20:	7118      	strb	r0, [r3, #4]
10057e22:	68a0      	ldr	r0, [r4, #8]
10057e24:	68c0      	ldr	r0, [r0, #12]
10057e26:	8981      	ldrh	r1, [r0, #12]
10057e28:	2205      	movs	r2, #5
10057e2a:	f7fd f86d 	bl	10054f08 <ACL_pkt_write>
10057e2e:	2000      	movs	r0, #0
10057e30:	6060      	str	r0, [r4, #4]
10057e32:	2084      	movs	r0, #132	@ 0x84
10057e34:	b006      	add	sp, #24
10057e36:	bd70      	pop	{r4, r5, r6, pc}

10057e38 <GAT_att_srv_exec_wr_exc>:
10057e38:	b510      	push	{r4, lr}
10057e3a:	4604      	mov	r4, r0
10057e3c:	7800      	ldrb	r0, [r0, #0]
10057e3e:	2800      	cmp	r0, #0
10057e40:	d001      	beq.n	10057e46 <GAT_att_srv_exec_wr_exc+0xe>
10057e42:	2000      	movs	r0, #0
10057e44:	bd10      	pop	{r4, pc}
10057e46:	6860      	ldr	r0, [r4, #4]
10057e48:	8981      	ldrh	r1, [r0, #12]
10057e4a:	1c49      	adds	r1, r1, #1
10057e4c:	b289      	uxth	r1, r1
10057e4e:	f000 f884 	bl	10057f5a <ACL_pkt_read_8b>
10057e52:	4603      	mov	r3, r0
10057e54:	68a0      	ldr	r0, [r4, #8]
10057e56:	8942      	ldrh	r2, [r0, #10]
10057e58:	8901      	ldrh	r1, [r0, #8]
10057e5a:	2002      	movs	r0, #2
10057e5c:	f00c f810 	bl	10063e80 <aci_att_srv_exec_write_req_event_push_noinline>
10057e60:	2800      	cmp	r0, #0
10057e62:	d000      	beq.n	10057e66 <GAT_att_srv_exec_wr_exc+0x2e>
10057e64:	bd10      	pop	{r4, pc}
10057e66:	68a0      	ldr	r0, [r4, #8]
10057e68:	68c0      	ldr	r0, [r0, #12]
10057e6a:	8981      	ldrh	r1, [r0, #12]
10057e6c:	2219      	movs	r2, #25
10057e6e:	f7ff fa59 	bl	10057324 <ACL_pkt_write_8b>
10057e72:	68a0      	ldr	r0, [r4, #8]
10057e74:	68c0      	ldr	r0, [r0, #12]
10057e76:	2101      	movs	r1, #1
10057e78:	8041      	strh	r1, [r0, #2]
10057e7a:	2084      	movs	r0, #132	@ 0x84
10057e7c:	bd10      	pop	{r4, pc}

10057e7e <GAT_att_srv_confirm_exc>:
10057e7e:	b5b0      	push	{r4, r5, r7, lr}
10057e80:	4605      	mov	r5, r0
10057e82:	6880      	ldr	r0, [r0, #8]
10057e84:	8942      	ldrh	r2, [r0, #10]
10057e86:	8901      	ldrh	r1, [r0, #8]
10057e88:	2042      	movs	r0, #66	@ 0x42
10057e8a:	f00b fcf7 	bl	1006387c <aci_gatt_srv_confirmation_event_push_noinline>
10057e8e:	4604      	mov	r4, r0
10057e90:	2800      	cmp	r0, #0
10057e92:	d110      	bne.n	10057eb6 <GAT_att_srv_confirm_exc+0x38>
10057e94:	68a8      	ldr	r0, [r5, #8]
10057e96:	8942      	ldrh	r2, [r0, #10]
10057e98:	8901      	ldrh	r1, [r0, #8]
10057e9a:	2001      	movs	r0, #1
10057e9c:	f7fe fef2 	bl	10056c84 <GAT_att_cmn_stop_timer>
10057ea0:	68a8      	ldr	r0, [r5, #8]
10057ea2:	8881      	ldrh	r1, [r0, #4]
10057ea4:	064a      	lsls	r2, r1, #25
10057ea6:	d503      	bpl.n	10057eb0 <GAT_att_srv_confirm_exc+0x32>
10057ea8:	f000 fe6c 	bl	10058b84 <GAT_srv_set_change_aware>
10057eac:	68a8      	ldr	r0, [r5, #8]
10057eae:	8881      	ldrh	r1, [r0, #4]
10057eb0:	2202      	movs	r2, #2
10057eb2:	4391      	bics	r1, r2
10057eb4:	8081      	strh	r1, [r0, #4]
10057eb6:	4620      	mov	r0, r4
10057eb8:	bdb0      	pop	{r4, r5, r7, pc}

10057eba <GAT_att_srv_get_handle_range>:
10057eba:	b570      	push	{r4, r5, r6, lr}
10057ebc:	4614      	mov	r4, r2
10057ebe:	460d      	mov	r5, r1
10057ec0:	4606      	mov	r6, r0
10057ec2:	8980      	ldrh	r0, [r0, #12]
10057ec4:	1c40      	adds	r0, r0, #1
10057ec6:	b281      	uxth	r1, r0
10057ec8:	4630      	mov	r0, r6
10057eca:	f7fd f804 	bl	10054ed6 <ACL_pkt_read_16b>
10057ece:	8028      	strh	r0, [r5, #0]
10057ed0:	89b0      	ldrh	r0, [r6, #12]
10057ed2:	1cc0      	adds	r0, r0, #3
10057ed4:	b281      	uxth	r1, r0
10057ed6:	4630      	mov	r0, r6
10057ed8:	f7fc fffd 	bl	10054ed6 <ACL_pkt_read_16b>
10057edc:	8020      	strh	r0, [r4, #0]
10057ede:	bd70      	pop	{r4, r5, r6, pc}

10057ee0 <GAT_att_srv_value_read>:
10057ee0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10057ee2:	461f      	mov	r7, r3
10057ee4:	4606      	mov	r6, r0
10057ee6:	9d08      	ldr	r5, [sp, #32]
10057ee8:	2400      	movs	r4, #0
10057eea:	702c      	strb	r4, [r5, #0]
10057eec:	7800      	ldrb	r0, [r0, #0]
10057eee:	2801      	cmp	r0, #1
10057ef0:	d107      	bne.n	10057f02 <GAT_att_srv_value_read+0x22>
10057ef2:	6930      	ldr	r0, [r6, #16]
10057ef4:	2800      	cmp	r0, #0
10057ef6:	d01f      	beq.n	10057f38 <GAT_att_srv_value_read+0x58>
10057ef8:	360c      	adds	r6, #12
10057efa:	603e      	str	r6, [r7, #0]
10057efc:	2000      	movs	r0, #0
10057efe:	7028      	strb	r0, [r5, #0]
10057f00:	e029      	b.n	10057f56 <GAT_att_srv_value_read+0x76>
10057f02:	9202      	str	r2, [sp, #8]
10057f04:	68b0      	ldr	r0, [r6, #8]
10057f06:	8900      	ldrh	r0, [r0, #8]
10057f08:	9101      	str	r1, [sp, #4]
10057f0a:	463a      	mov	r2, r7
10057f0c:	462b      	mov	r3, r5
10057f0e:	f000 fb66 	bl	100585de <GAT_srv_attr_value_read>
10057f12:	2800      	cmp	r0, #0
10057f14:	d012      	beq.n	10057f3c <GAT_att_srv_value_read+0x5c>
10057f16:	2884      	cmp	r0, #132	@ 0x84
10057f18:	d11d      	bne.n	10057f56 <GAT_att_srv_value_read+0x76>
10057f1a:	9801      	ldr	r0, [sp, #4]
10057f1c:	8843      	ldrh	r3, [r0, #2]
10057f1e:	68b0      	ldr	r0, [r6, #8]
10057f20:	8942      	ldrh	r2, [r0, #10]
10057f22:	8901      	ldrh	r1, [r0, #8]
10057f24:	9802      	ldr	r0, [sp, #8]
10057f26:	9000      	str	r0, [sp, #0]
10057f28:	2002      	movs	r0, #2
10057f2a:	f00b fcd9 	bl	100638e0 <aci_gatt_srv_read_event_push_noinline>
10057f2e:	2800      	cmp	r0, #0
10057f30:	d111      	bne.n	10057f56 <GAT_att_srv_value_read+0x76>
10057f32:	207b      	movs	r0, #123	@ 0x7b
10057f34:	43c0      	mvns	r0, r0
10057f36:	e00e      	b.n	10057f56 <GAT_att_srv_value_read+0x76>
10057f38:	200e      	movs	r0, #14
10057f3a:	e005      	b.n	10057f48 <GAT_att_srv_value_read+0x68>
10057f3c:	6838      	ldr	r0, [r7, #0]
10057f3e:	8801      	ldrh	r1, [r0, #0]
10057f40:	9a02      	ldr	r2, [sp, #8]
10057f42:	4291      	cmp	r1, r2
10057f44:	d203      	bcs.n	10057f4e <GAT_att_srv_value_read+0x6e>
10057f46:	2007      	movs	r0, #7
10057f48:	7028      	strb	r0, [r5, #0]
10057f4a:	2086      	movs	r0, #134	@ 0x86
10057f4c:	e003      	b.n	10057f56 <GAT_att_srv_value_read+0x76>
10057f4e:	6841      	ldr	r1, [r0, #4]
10057f50:	1889      	adds	r1, r1, r2
10057f52:	6041      	str	r1, [r0, #4]
10057f54:	4620      	mov	r0, r4
10057f56:	b2c0      	uxtb	r0, r0
10057f58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10057f5a <ACL_pkt_read_8b>:
10057f5a:	b51c      	push	{r2, r3, r4, lr}
10057f5c:	291f      	cmp	r1, #31
10057f5e:	d803      	bhi.n	10057f68 <ACL_pkt_read_8b+0xe>
10057f60:	aa01      	add	r2, sp, #4
10057f62:	8011      	strh	r1, [r2, #0]
10057f64:	6840      	ldr	r0, [r0, #4]
10057f66:	e005      	b.n	10057f74 <ACL_pkt_read_8b+0x1a>
10057f68:	6840      	ldr	r0, [r0, #4]
10057f6a:	ac01      	add	r4, sp, #4
10057f6c:	4622      	mov	r2, r4
10057f6e:	f008 ff54 	bl	10060e1a <Mem_Buff_get_buff_off>
10057f72:	8821      	ldrh	r1, [r4, #0]
10057f74:	1840      	adds	r0, r0, r1
10057f76:	7900      	ldrb	r0, [r0, #4]
10057f78:	bd1c      	pop	{r2, r3, r4, pc}

10057f7a <GAT_att_srv_set_attr_value_check>:
10057f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
10057f7c:	b085      	sub	sp, #20
10057f7e:	461e      	mov	r6, r3
10057f80:	4614      	mov	r4, r2
10057f82:	460f      	mov	r7, r1
10057f84:	4605      	mov	r5, r0
10057f86:	a801      	add	r0, sp, #4
10057f88:	8101      	strh	r1, [r0, #8]
10057f8a:	7102      	strb	r2, [r0, #4]
10057f8c:	68a9      	ldr	r1, [r5, #8]
10057f8e:	9101      	str	r1, [sp, #4]
10057f90:	f000 fe06 	bl	10058ba0 <GAT_srv_check_change_aware>
10057f94:	2886      	cmp	r0, #134	@ 0x86
10057f96:	d101      	bne.n	10057f9c <GAT_att_srv_set_attr_value_check+0x22>
10057f98:	2012      	movs	r0, #18
10057f9a:	e00c      	b.n	10057fb6 <GAT_att_srv_set_attr_value_check+0x3c>
10057f9c:	4638      	mov	r0, r7
10057f9e:	f00c fd03 	bl	100649a8 <GAT_att_db_find_by_handle>
10057fa2:	6030      	str	r0, [r6, #0]
10057fa4:	2800      	cmp	r0, #0
10057fa6:	d005      	beq.n	10057fb4 <GAT_att_srv_set_attr_value_check+0x3a>
10057fa8:	68a9      	ldr	r1, [r5, #8]
10057faa:	8909      	ldrh	r1, [r1, #8]
10057fac:	4622      	mov	r2, r4
10057fae:	f000 fb2f 	bl	10058610 <GAT_srv_check_perms>
10057fb2:	e000      	b.n	10057fb6 <GAT_att_srv_set_attr_value_check+0x3c>
10057fb4:	2001      	movs	r0, #1
10057fb6:	b005      	add	sp, #20
10057fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10057fbc <GAT_srv_init>:
10057fbc:	b580      	push	{r7, lr}
10057fbe:	4806      	ldr	r0, [pc, #24]	@ (10057fd8 <__arm_cp.0_0>)
10057fc0:	8900      	ldrh	r0, [r0, #8]
10057fc2:	3016      	adds	r0, #22
10057fc4:	b280      	uxth	r0, r0
10057fc6:	f00c fc8b 	bl	100648e0 <GAT_att_db_init>
10057fca:	4804      	ldr	r0, [pc, #16]	@ (10057fdc <__arm_cp.0_1>)
10057fcc:	6800      	ldr	r0, [r0, #0]
10057fce:	215c      	movs	r1, #92	@ 0x5c
10057fd0:	2201      	movs	r2, #1
10057fd2:	5442      	strb	r2, [r0, r1]
10057fd4:	bd80      	pop	{r7, pc}
10057fd6:	46c0      	nop			@ (mov r8, r8)

10057fd8 <__arm_cp.0_0>:
10057fd8:	20002ae4 	.word	0x20002ae4

10057fdc <__arm_cp.0_1>:
10057fdc:	20002a88 	.word	0x20002a88

10057fe0 <GAT_srv_connection>:
10057fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
10057fe2:	b0a1      	sub	sp, #132	@ 0x84
10057fe4:	4604      	mov	r4, r0
10057fe6:	f000 f89b 	bl	10058120 <GAT_srv_is_bonded>
10057fea:	2801      	cmp	r0, #1
10057fec:	d114      	bne.n	10058018 <GAT_srv_connection+0x38>
10057fee:	a807      	add	r0, sp, #28
10057ff0:	4945      	ldr	r1, [pc, #276]	@ (10058108 <__arm_cp.1_0>)
10057ff2:	2514      	movs	r5, #20
10057ff4:	462a      	mov	r2, r5
10057ff6:	f00f fe26 	bl	10067c46 <__aeabi_memcpy>
10057ffa:	a802      	add	r0, sp, #8
10057ffc:	4943      	ldr	r1, [pc, #268]	@ (1005810c <__arm_cp.1_1>)
10057ffe:	462a      	mov	r2, r5
10058000:	f00f fe21 	bl	10067c46 <__aeabi_memcpy>
10058004:	2044      	movs	r0, #68	@ 0x44
10058006:	900f      	str	r0, [sp, #60]	@ 0x3c
10058008:	2101      	movs	r1, #1
1005800a:	aa0d      	add	r2, sp, #52	@ 0x34
1005800c:	ab0c      	add	r3, sp, #48	@ 0x30
1005800e:	4620      	mov	r0, r4
10058010:	f00a fa87 	bl	10062522 <smp_sap_get_remote_address_check_addr_type>
10058014:	2800      	cmp	r0, #0
10058016:	d001      	beq.n	1005801c <GAT_srv_connection+0x3c>
10058018:	b021      	add	sp, #132	@ 0x84
1005801a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005801c:	a80c      	add	r0, sp, #48	@ 0x30
1005801e:	7801      	ldrb	r1, [r0, #0]
10058020:	a80d      	add	r0, sp, #52	@ 0x34
10058022:	aa0f      	add	r2, sp, #60	@ 0x3c
10058024:	ab10      	add	r3, sp, #64	@ 0x40
10058026:	f009 fb1a 	bl	1006165e <SDB_sap_read_peer_bonded_gatt_client_data>
1005802a:	2800      	cmp	r0, #0
1005802c:	d1f4      	bne.n	10058018 <GAT_srv_connection+0x38>
1005802e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10058030:	2844      	cmp	r0, #68	@ 0x44
10058032:	d8f1      	bhi.n	10058018 <GAT_srv_connection+0x38>
10058034:	2001      	movs	r0, #1
10058036:	4d36      	ldr	r5, [pc, #216]	@ (10058110 <__arm_cp.1_2>)
10058038:	aa02      	add	r2, sp, #8
1005803a:	4629      	mov	r1, r5
1005803c:	f000 fe0c 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
10058040:	2800      	cmp	r0, #0
10058042:	d010      	beq.n	10058066 <GAT_srv_connection+0x86>
10058044:	4606      	mov	r6, r0
10058046:	4620      	mov	r0, r4
10058048:	f7fe fe54 	bl	10056cf4 <GAT_att_cmn_get_conn_index>
1005804c:	a910      	add	r1, sp, #64	@ 0x40
1005804e:	7c0a      	ldrb	r2, [r1, #16]
10058050:	4930      	ldr	r1, [pc, #192]	@ (10058114 <__arm_cp.1_3>)
10058052:	7ac9      	ldrb	r1, [r1, #11]
10058054:	6873      	ldr	r3, [r6, #4]
10058056:	6a1b      	ldr	r3, [r3, #32]
10058058:	689b      	ldr	r3, [r3, #8]
1005805a:	9300      	str	r3, [sp, #0]
1005805c:	0849      	lsrs	r1, r1, #1
1005805e:	1c4b      	adds	r3, r1, #1
10058060:	2104      	movs	r1, #4
10058062:	f000 fd08 	bl	10058a76 <GAT_srv_set_zip_val>
10058066:	482c      	ldr	r0, [pc, #176]	@ (10058118 <__arm_cp.1_4>)
10058068:	6801      	ldr	r1, [r0, #0]
1005806a:	3183      	adds	r1, #131	@ 0x83
1005806c:	a810      	add	r0, sp, #64	@ 0x40
1005806e:	2210      	movs	r2, #16
10058070:	f7fa fb94 	bl	1005279c <BLEPLAT_MemCmp>
10058074:	2800      	cmp	r0, #0
10058076:	d01f      	beq.n	100580b8 <GAT_srv_connection+0xd8>
10058078:	2001      	movs	r0, #1
1005807a:	aa07      	add	r2, sp, #28
1005807c:	4629      	mov	r1, r5
1005807e:	f000 fdeb 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
10058082:	2800      	cmp	r0, #0
10058084:	d0c8      	beq.n	10058018 <GAT_srv_connection+0x38>
10058086:	f000 fe3f 	bl	10058d08 <GAT_srv_get_cccd_attr_p>
1005808a:	2800      	cmp	r0, #0
1005808c:	d0c4      	beq.n	10058018 <GAT_srv_connection+0x38>
1005808e:	4605      	mov	r5, r0
10058090:	2104      	movs	r1, #4
10058092:	4620      	mov	r0, r4
10058094:	f7fe fd84 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10058098:	8881      	ldrh	r1, [r0, #4]
1005809a:	2240      	movs	r2, #64	@ 0x40
1005809c:	430a      	orrs	r2, r1
1005809e:	8082      	strh	r2, [r0, #4]
100580a0:	a810      	add	r0, sp, #64	@ 0x40
100580a2:	7c42      	ldrb	r2, [r0, #17]
100580a4:	4620      	mov	r0, r4
100580a6:	4629      	mov	r1, r5
100580a8:	f000 fd26 	bl	10058af8 <GAT_srv_set_cccd_val>
100580ac:	200b      	movs	r0, #11
100580ae:	f00a fbeb 	bl	10062888 <tsk_notify_idx>
100580b2:	f7f9 fd6c 	bl	10051b8e <BLE_STACK_ProcessRequest>
100580b6:	e7af      	b.n	10058018 <GAT_srv_connection+0x38>
100580b8:	2001      	movs	r0, #1
100580ba:	f00c fc9d 	bl	100649f8 <GAT_att_db_find_from_handle>
100580be:	4606      	mov	r6, r0
100580c0:	ad10      	add	r5, sp, #64	@ 0x40
100580c2:	3512      	adds	r5, #18
100580c4:	2700      	movs	r7, #0
100580c6:	2e00      	cmp	r6, #0
100580c8:	d0a6      	beq.n	10058018 <GAT_srv_connection+0x38>
100580ca:	b2b8      	uxth	r0, r7
100580cc:	2863      	cmp	r0, #99	@ 0x63
100580ce:	d8a3      	bhi.n	10058018 <GAT_srv_connection+0x38>
100580d0:	7831      	ldrb	r1, [r6, #0]
100580d2:	2904      	cmp	r1, #4
100580d4:	d112      	bne.n	100580fc <GAT_srv_connection+0x11c>
100580d6:	6871      	ldr	r1, [r6, #4]
100580d8:	7d0a      	ldrb	r2, [r1, #20]
100580da:	2a10      	cmp	r2, #16
100580dc:	d10e      	bne.n	100580fc <GAT_srv_connection+0x11c>
100580de:	8a09      	ldrh	r1, [r1, #16]
100580e0:	4a0e      	ldr	r2, [pc, #56]	@ (1005811c <__arm_cp.1_5>)
100580e2:	4291      	cmp	r1, r2
100580e4:	d10a      	bne.n	100580fc <GAT_srv_connection+0x11c>
100580e6:	2102      	movs	r1, #2
100580e8:	2232      	movs	r2, #50	@ 0x32
100580ea:	462b      	mov	r3, r5
100580ec:	f000 fcb0 	bl	10058a50 <GAT_srv_get_zip_val>
100580f0:	4602      	mov	r2, r0
100580f2:	4620      	mov	r0, r4
100580f4:	4631      	mov	r1, r6
100580f6:	f000 fcff 	bl	10058af8 <GAT_srv_set_cccd_val>
100580fa:	1c7f      	adds	r7, r7, #1
100580fc:	4630      	mov	r0, r6
100580fe:	f00c fcdd 	bl	10064abc <GAT_att_db_get_next>
10058102:	4606      	mov	r6, r0
10058104:	e7df      	b.n	100580c6 <GAT_srv_connection+0xe6>
10058106:	46c0      	nop			@ (mov r8, r8)

10058108 <__arm_cp.1_0>:
10058108:	100697b0 	.word	0x100697b0

1005810c <__arm_cp.1_1>:
1005810c:	100697c4 	.word	0x100697c4

10058110 <__arm_cp.1_2>:
10058110:	0000ffff 	.word	0x0000ffff

10058114 <__arm_cp.1_3>:
10058114:	20002ae4 	.word	0x20002ae4

10058118 <__arm_cp.1_4>:
10058118:	20002a88 	.word	0x20002a88

1005811c <__arm_cp.1_5>:
1005811c:	00002902 	.word	0x00002902

10058120 <GAT_srv_is_bonded>:
10058120:	b580      	push	{r7, lr}
10058122:	f00a fa34 	bl	1006258e <smp_sap_check_is_peer_device_bonded>
10058126:	4241      	negs	r1, r0
10058128:	4148      	adcs	r0, r1
1005812a:	bd80      	pop	{r7, pc}

1005812c <GAT_srv_bearer_close>:
1005812c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005812e:	b0a1      	sub	sp, #132	@ 0x84
10058130:	2904      	cmp	r1, #4
10058132:	d000      	beq.n	10058136 <GAT_srv_bearer_close+0xa>
10058134:	e0de      	b.n	100582f4 <GAT_srv_bearer_close+0x1c8>
10058136:	4607      	mov	r7, r0
10058138:	f7ff fff2 	bl	10058120 <GAT_srv_is_bonded>
1005813c:	4c6e      	ldr	r4, [pc, #440]	@ (100582f8 <__arm_cp.3_0>)
1005813e:	4e6f      	ldr	r6, [pc, #444]	@ (100582fc <__arm_cp.3_1>)
10058140:	2801      	cmp	r0, #1
10058142:	d000      	beq.n	10058146 <GAT_srv_bearer_close+0x1a>
10058144:	e0a0      	b.n	10058288 <GAT_srv_bearer_close+0x15c>
10058146:	ad0b      	add	r5, sp, #44	@ 0x2c
10058148:	496d      	ldr	r1, [pc, #436]	@ (10058300 <__arm_cp.3_2>)
1005814a:	2214      	movs	r2, #20
1005814c:	4628      	mov	r0, r5
1005814e:	f00f fd7a 	bl	10067c46 <__aeabi_memcpy>
10058152:	a810      	add	r0, sp, #64	@ 0x40
10058154:	4634      	mov	r4, r6
10058156:	2600      	movs	r6, #0
10058158:	2244      	movs	r2, #68	@ 0x44
1005815a:	4631      	mov	r1, r6
1005815c:	f7fa fb0e 	bl	1005277c <BLEPLAT_MemSet>
10058160:	2001      	movs	r0, #1
10058162:	4621      	mov	r1, r4
10058164:	462a      	mov	r2, r5
10058166:	f000 fd77 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
1005816a:	2800      	cmp	r0, #0
1005816c:	d00f      	beq.n	1005818e <GAT_srv_bearer_close+0x62>
1005816e:	4604      	mov	r4, r0
10058170:	4638      	mov	r0, r7
10058172:	f7fe fdbf 	bl	10056cf4 <GAT_att_cmn_get_conn_index>
10058176:	6861      	ldr	r1, [r4, #4]
10058178:	6a09      	ldr	r1, [r1, #32]
1005817a:	688b      	ldr	r3, [r1, #8]
1005817c:	4961      	ldr	r1, [pc, #388]	@ (10058304 <__arm_cp.3_3>)
1005817e:	7ac9      	ldrb	r1, [r1, #11]
10058180:	0849      	lsrs	r1, r1, #1
10058182:	1c4a      	adds	r2, r1, #1
10058184:	2104      	movs	r1, #4
10058186:	f000 fc63 	bl	10058a50 <GAT_srv_get_zip_val>
1005818a:	a910      	add	r1, sp, #64	@ 0x40
1005818c:	7408      	strb	r0, [r1, #16]
1005818e:	2104      	movs	r1, #4
10058190:	9704      	str	r7, [sp, #16]
10058192:	4638      	mov	r0, r7
10058194:	f7fe fd04 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10058198:	a910      	add	r1, sp, #64	@ 0x40
1005819a:	7c09      	ldrb	r1, [r1, #16]
1005819c:	2901      	cmp	r1, #1
1005819e:	d103      	bne.n	100581a8 <GAT_srv_bearer_close+0x7c>
100581a0:	8880      	ldrh	r0, [r0, #4]
100581a2:	0600      	lsls	r0, r0, #24
100581a4:	0f80      	lsrs	r0, r0, #30
100581a6:	d106      	bne.n	100581b6 <GAT_srv_bearer_close+0x8a>
100581a8:	4857      	ldr	r0, [pc, #348]	@ (10058308 <__arm_cp.3_4>)
100581aa:	6801      	ldr	r1, [r0, #0]
100581ac:	3183      	adds	r1, #131	@ 0x83
100581ae:	a810      	add	r0, sp, #64	@ 0x40
100581b0:	2210      	movs	r2, #16
100581b2:	f7fa fad3 	bl	1005275c <BLEPLAT_MemCpy>
100581b6:	2001      	movs	r0, #1
100581b8:	9003      	str	r0, [sp, #12]
100581ba:	f00c fc1d 	bl	100649f8 <GAT_att_db_find_from_handle>
100581be:	4605      	mov	r5, r0
100581c0:	a810      	add	r0, sp, #64	@ 0x40
100581c2:	3012      	adds	r0, #18
100581c4:	9002      	str	r0, [sp, #8]
100581c6:	9605      	str	r6, [sp, #20]
100581c8:	4c4b      	ldr	r4, [pc, #300]	@ (100582f8 <__arm_cp.3_0>)
100581ca:	2d00      	cmp	r5, #0
100581cc:	d034      	beq.n	10058238 <GAT_srv_bearer_close+0x10c>
100581ce:	b2b7      	uxth	r7, r6
100581d0:	2f63      	cmp	r7, #99	@ 0x63
100581d2:	d831      	bhi.n	10058238 <GAT_srv_bearer_close+0x10c>
100581d4:	7828      	ldrb	r0, [r5, #0]
100581d6:	2804      	cmp	r0, #4
100581d8:	d00b      	beq.n	100581f2 <GAT_srv_bearer_close+0xc6>
100581da:	2802      	cmp	r0, #2
100581dc:	d127      	bne.n	1005822e <GAT_srv_bearer_close+0x102>
100581de:	6868      	ldr	r0, [r5, #4]
100581e0:	7d01      	ldrb	r1, [r0, #20]
100581e2:	2910      	cmp	r1, #16
100581e4:	d121      	bne.n	1005822a <GAT_srv_bearer_close+0xfe>
100581e6:	8a00      	ldrh	r0, [r0, #16]
100581e8:	4949      	ldr	r1, [pc, #292]	@ (10058310 <__arm_cp.3_6>)
100581ea:	4288      	cmp	r0, r1
100581ec:	d11d      	bne.n	1005822a <GAT_srv_bearer_close+0xfe>
100581ee:	9803      	ldr	r0, [sp, #12]
100581f0:	e01c      	b.n	1005822c <GAT_srv_bearer_close+0x100>
100581f2:	6868      	ldr	r0, [r5, #4]
100581f4:	7d01      	ldrb	r1, [r0, #20]
100581f6:	2910      	cmp	r1, #16
100581f8:	d119      	bne.n	1005822e <GAT_srv_bearer_close+0x102>
100581fa:	8a00      	ldrh	r0, [r0, #16]
100581fc:	42a0      	cmp	r0, r4
100581fe:	d116      	bne.n	1005822e <GAT_srv_bearer_close+0x102>
10058200:	9804      	ldr	r0, [sp, #16]
10058202:	4629      	mov	r1, r5
10058204:	f000 fdb0 	bl	10058d68 <GAT_srv_get_cccd_val>
10058208:	4604      	mov	r4, r0
1005820a:	9802      	ldr	r0, [sp, #8]
1005820c:	9000      	str	r0, [sp, #0]
1005820e:	b2e2      	uxtb	r2, r4
10058210:	2102      	movs	r1, #2
10058212:	2332      	movs	r3, #50	@ 0x32
10058214:	4638      	mov	r0, r7
10058216:	f000 fc2e 	bl	10058a76 <GAT_srv_set_zip_val>
1005821a:	9805      	ldr	r0, [sp, #20]
1005821c:	2801      	cmp	r0, #1
1005821e:	d101      	bne.n	10058224 <GAT_srv_bearer_close+0xf8>
10058220:	a810      	add	r0, sp, #64	@ 0x40
10058222:	7444      	strb	r4, [r0, #17]
10058224:	1c76      	adds	r6, r6, #1
10058226:	4c34      	ldr	r4, [pc, #208]	@ (100582f8 <__arm_cp.3_0>)
10058228:	e001      	b.n	1005822e <GAT_srv_bearer_close+0x102>
1005822a:	2000      	movs	r0, #0
1005822c:	9005      	str	r0, [sp, #20]
1005822e:	4628      	mov	r0, r5
10058230:	f00c fc44 	bl	10064abc <GAT_att_db_get_next>
10058234:	4605      	mov	r5, r0
10058236:	e7c8      	b.n	100581ca <GAT_srv_bearer_close+0x9e>
10058238:	2101      	movs	r1, #1
1005823a:	aa09      	add	r2, sp, #36	@ 0x24
1005823c:	ab08      	add	r3, sp, #32
1005823e:	9f04      	ldr	r7, [sp, #16]
10058240:	4638      	mov	r0, r7
10058242:	f00a f96e 	bl	10062522 <smp_sap_get_remote_address_check_addr_type>
10058246:	2800      	cmp	r0, #0
10058248:	d11c      	bne.n	10058284 <GAT_srv_bearer_close+0x158>
1005824a:	b2b0      	uxth	r0, r6
1005824c:	0040      	lsls	r0, r0, #1
1005824e:	492f      	ldr	r1, [pc, #188]	@ (1005830c <__arm_cp.3_5>)
10058250:	1840      	adds	r0, r0, r1
10058252:	0880      	lsrs	r0, r0, #2
10058254:	3013      	adds	r0, #19
10058256:	b282      	uxth	r2, r0
10058258:	a808      	add	r0, sp, #32
1005825a:	7801      	ldrb	r1, [r0, #0]
1005825c:	a809      	add	r0, sp, #36	@ 0x24
1005825e:	ab10      	add	r3, sp, #64	@ 0x40
10058260:	f009 f9cb 	bl	100615fa <SDB_sap_write_peer_bonded_gatt_client_data>
10058264:	2800      	cmp	r0, #0
10058266:	d00d      	beq.n	10058284 <GAT_srv_bearer_close+0x158>
10058268:	4604      	mov	r4, r0
1005826a:	ad06      	add	r5, sp, #24
1005826c:	a909      	add	r1, sp, #36	@ 0x24
1005826e:	2206      	movs	r2, #6
10058270:	4628      	mov	r0, r5
10058272:	f7fa fa73 	bl	1005275c <BLEPLAT_MemCpy>
10058276:	71ac      	strb	r4, [r5, #6]
10058278:	2042      	movs	r0, #66	@ 0x42
1005827a:	2104      	movs	r1, #4
1005827c:	2207      	movs	r2, #7
1005827e:	462b      	mov	r3, r5
10058280:	f00b fef8 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
10058284:	4e1d      	ldr	r6, [pc, #116]	@ (100582fc <__arm_cp.3_1>)
10058286:	4c1c      	ldr	r4, [pc, #112]	@ (100582f8 <__arm_cp.3_0>)
10058288:	2001      	movs	r0, #1
1005828a:	f00c fbb5 	bl	100649f8 <GAT_att_db_find_from_handle>
1005828e:	4605      	mov	r5, r0
10058290:	2800      	cmp	r0, #0
10058292:	d012      	beq.n	100582ba <GAT_srv_bearer_close+0x18e>
10058294:	7828      	ldrb	r0, [r5, #0]
10058296:	2804      	cmp	r0, #4
10058298:	d10b      	bne.n	100582b2 <GAT_srv_bearer_close+0x186>
1005829a:	6868      	ldr	r0, [r5, #4]
1005829c:	7d01      	ldrb	r1, [r0, #20]
1005829e:	2910      	cmp	r1, #16
100582a0:	d107      	bne.n	100582b2 <GAT_srv_bearer_close+0x186>
100582a2:	8a00      	ldrh	r0, [r0, #16]
100582a4:	42a0      	cmp	r0, r4
100582a6:	d104      	bne.n	100582b2 <GAT_srv_bearer_close+0x186>
100582a8:	2200      	movs	r2, #0
100582aa:	4638      	mov	r0, r7
100582ac:	4629      	mov	r1, r5
100582ae:	f000 fc23 	bl	10058af8 <GAT_srv_set_cccd_val>
100582b2:	4628      	mov	r0, r5
100582b4:	f00c fc02 	bl	10064abc <GAT_att_db_get_next>
100582b8:	e7e9      	b.n	1005828e <GAT_srv_bearer_close+0x162>
100582ba:	ac10      	add	r4, sp, #64	@ 0x40
100582bc:	4910      	ldr	r1, [pc, #64]	@ (10058300 <__arm_cp.3_2>)
100582be:	2214      	movs	r2, #20
100582c0:	4620      	mov	r0, r4
100582c2:	f00f fcc0 	bl	10067c46 <__aeabi_memcpy>
100582c6:	2001      	movs	r0, #1
100582c8:	4631      	mov	r1, r6
100582ca:	4622      	mov	r2, r4
100582cc:	f000 fcc4 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
100582d0:	2800      	cmp	r0, #0
100582d2:	d00f      	beq.n	100582f4 <GAT_srv_bearer_close+0x1c8>
100582d4:	4604      	mov	r4, r0
100582d6:	4638      	mov	r0, r7
100582d8:	f7fe fd0c 	bl	10056cf4 <GAT_att_cmn_get_conn_index>
100582dc:	4909      	ldr	r1, [pc, #36]	@ (10058304 <__arm_cp.3_3>)
100582de:	7ac9      	ldrb	r1, [r1, #11]
100582e0:	6862      	ldr	r2, [r4, #4]
100582e2:	6a12      	ldr	r2, [r2, #32]
100582e4:	6892      	ldr	r2, [r2, #8]
100582e6:	9200      	str	r2, [sp, #0]
100582e8:	0849      	lsrs	r1, r1, #1
100582ea:	1c4b      	adds	r3, r1, #1
100582ec:	2104      	movs	r1, #4
100582ee:	2200      	movs	r2, #0
100582f0:	f000 fbc1 	bl	10058a76 <GAT_srv_set_zip_val>
100582f4:	b021      	add	sp, #132	@ 0x84
100582f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100582f8 <__arm_cp.3_0>:
100582f8:	00002902 	.word	0x00002902

100582fc <__arm_cp.3_1>:
100582fc:	0000ffff 	.word	0x0000ffff

10058300 <__arm_cp.3_2>:
10058300:	100697c4 	.word	0x100697c4

10058304 <__arm_cp.3_3>:
10058304:	20002ae4 	.word	0x20002ae4

10058308 <__arm_cp.3_4>:
10058308:	20002a88 	.word	0x20002a88

1005830c <__arm_cp.3_5>:
1005830c:	0003fffe 	.word	0x0003fffe

10058310 <__arm_cp.3_6>:
10058310:	00002a05 	.word	0x00002a05

10058314 <GAT_srv_db_hash_tsk>:
10058314:	b5f0      	push	{r4, r5, r6, r7, lr}
10058316:	b0d3      	sub	sp, #332	@ 0x14c
10058318:	2500      	movs	r5, #0
1005831a:	950c      	str	r5, [sp, #48]	@ 0x30
1005831c:	950b      	str	r5, [sp, #44]	@ 0x2c
1005831e:	950a      	str	r5, [sp, #40]	@ 0x28
10058320:	9509      	str	r5, [sp, #36]	@ 0x24
10058322:	2041      	movs	r0, #65	@ 0x41
10058324:	0082      	lsls	r2, r0, #2
10058326:	ac0d      	add	r4, sp, #52	@ 0x34
10058328:	4620      	mov	r0, r4
1005832a:	4629      	mov	r1, r5
1005832c:	f7fa fa26 	bl	1005277c <BLEPLAT_MemSet>
10058330:	7125      	strb	r5, [r4, #4]
10058332:	2010      	movs	r0, #16
10058334:	9044      	str	r0, [sp, #272]	@ 0x110
10058336:	9016      	str	r0, [sp, #88]	@ 0x58
10058338:	a809      	add	r0, sp, #36	@ 0x24
1005833a:	900f      	str	r0, [sp, #60]	@ 0x3c
1005833c:	4620      	mov	r0, r4
1005833e:	f7fa fa6a 	bl	10052816 <BLEPLAT_AesCMACEncryptInit>
10058342:	34dc      	adds	r4, #220	@ 0xdc
10058344:	9401      	str	r4, [sp, #4]
10058346:	2001      	movs	r0, #1
10058348:	f00c fb56 	bl	100649f8 <GAT_att_db_find_from_handle>
1005834c:	4606      	mov	r6, r0
1005834e:	a84e      	add	r0, sp, #312	@ 0x138
10058350:	300c      	adds	r0, #12
10058352:	9002      	str	r0, [sp, #8]
10058354:	4d48      	ldr	r5, [pc, #288]	@ (10058478 <__arm_cp.5_2>)
10058356:	2e00      	cmp	r6, #0
10058358:	d041      	beq.n	100583de <GAT_srv_db_hash_tsk+0xca>
1005835a:	7830      	ldrb	r0, [r6, #0]
1005835c:	2803      	cmp	r0, #3
1005835e:	d039      	beq.n	100583d4 <GAT_srv_db_hash_tsk+0xc0>
10058360:	af4e      	add	r7, sp, #312	@ 0x138
10058362:	4630      	mov	r0, r6
10058364:	4639      	mov	r1, r7
10058366:	f000 f907 	bl	10058578 <GAT_srv_get_attr_type>
1005836a:	7c38      	ldrb	r0, [r7, #16]
1005836c:	2810      	cmp	r0, #16
1005836e:	d131      	bne.n	100583d4 <GAT_srv_db_hash_tsk+0xc0>
10058370:	8870      	ldrh	r0, [r6, #2]
10058372:	a904      	add	r1, sp, #16
10058374:	8008      	strh	r0, [r1, #0]
10058376:	a84e      	add	r0, sp, #312	@ 0x138
10058378:	8980      	ldrh	r0, [r0, #12]
1005837a:	493d      	ldr	r1, [pc, #244]	@ (10058470 <__arm_cp.5_0>)
1005837c:	1841      	adds	r1, r0, r1
1005837e:	2905      	cmp	r1, #5
10058380:	d31c      	bcc.n	100583bc <GAT_srv_db_hash_tsk+0xa8>
10058382:	493c      	ldr	r1, [pc, #240]	@ (10058474 <__arm_cp.5_1>)
10058384:	1841      	adds	r1, r0, r1
10058386:	2904      	cmp	r1, #4
10058388:	d303      	bcc.n	10058392 <GAT_srv_db_hash_tsk+0x7e>
1005838a:	2129      	movs	r1, #41	@ 0x29
1005838c:	0209      	lsls	r1, r1, #8
1005838e:	4288      	cmp	r0, r1
10058390:	d120      	bne.n	100583d4 <GAT_srv_db_hash_tsk+0xc0>
10058392:	af0d      	add	r7, sp, #52	@ 0x34
10058394:	2402      	movs	r4, #2
10058396:	aa04      	add	r2, sp, #16
10058398:	4638      	mov	r0, r7
1005839a:	4621      	mov	r1, r4
1005839c:	47a8      	blx	r5
1005839e:	4638      	mov	r0, r7
100583a0:	4621      	mov	r1, r4
100583a2:	9a02      	ldr	r2, [sp, #8]
100583a4:	47a8      	blx	r5
100583a6:	2000      	movs	r0, #0
100583a8:	aa05      	add	r2, sp, #20
100583aa:	4631      	mov	r1, r6
100583ac:	f000 f9a6 	bl	100586fc <GAT_srv_get_attr_value>
100583b0:	9805      	ldr	r0, [sp, #20]
100583b2:	6842      	ldr	r2, [r0, #4]
100583b4:	8801      	ldrh	r1, [r0, #0]
100583b6:	4638      	mov	r0, r7
100583b8:	47a8      	blx	r5
100583ba:	e00b      	b.n	100583d4 <GAT_srv_db_hash_tsk+0xc0>
100583bc:	ac0d      	add	r4, sp, #52	@ 0x34
100583be:	2702      	movs	r7, #2
100583c0:	aa04      	add	r2, sp, #16
100583c2:	4620      	mov	r0, r4
100583c4:	4639      	mov	r1, r7
100583c6:	f000 fcdb 	bl	10058d80 <GAT_srv_aes_cmac_append>
100583ca:	4620      	mov	r0, r4
100583cc:	4639      	mov	r1, r7
100583ce:	9a02      	ldr	r2, [sp, #8]
100583d0:	f000 fcd6 	bl	10058d80 <GAT_srv_aes_cmac_append>
100583d4:	4630      	mov	r0, r6
100583d6:	f00c fb71 	bl	10064abc <GAT_att_db_get_next>
100583da:	4606      	mov	r6, r0
100583dc:	e7bb      	b.n	10058356 <GAT_srv_db_hash_tsk+0x42>
100583de:	9801      	ldr	r0, [sp, #4]
100583e0:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
100583e2:	2a00      	cmp	r2, #0
100583e4:	d006      	beq.n	100583f4 <GAT_srv_db_hash_tsk+0xe0>
100583e6:	a80d      	add	r0, sp, #52	@ 0x34
100583e8:	2120      	movs	r1, #32
100583ea:	7101      	strb	r1, [r0, #4]
100583ec:	4601      	mov	r1, r0
100583ee:	31e0      	adds	r1, #224	@ 0xe0
100583f0:	f7fa fa1e 	bl	10052830 <BLEPLAT_AesCMACEncryptAppend>
100583f4:	a80d      	add	r0, sp, #52	@ 0x34
100583f6:	ac4e      	add	r4, sp, #312	@ 0x138
100583f8:	aa04      	add	r2, sp, #16
100583fa:	4621      	mov	r1, r4
100583fc:	f7fa fa29 	bl	10052852 <BLEPLAT_AesCMACEncryptFinish>
10058400:	ad05      	add	r5, sp, #20
10058402:	2610      	movs	r6, #16
10058404:	2301      	movs	r3, #1
10058406:	4628      	mov	r0, r5
10058408:	4621      	mov	r1, r4
1005840a:	4632      	mov	r2, r6
1005840c:	f00a fba2 	bl	10062b54 <copy_swap_buffer>
10058410:	4f1a      	ldr	r7, [pc, #104]	@ (1005847c <__arm_cp.5_3>)
10058412:	6839      	ldr	r1, [r7, #0]
10058414:	3183      	adds	r1, #131	@ 0x83
10058416:	4628      	mov	r0, r5
10058418:	4632      	mov	r2, r6
1005841a:	f7fa f9bf 	bl	1005279c <BLEPLAT_MemCmp>
1005841e:	2800      	cmp	r0, #0
10058420:	d019      	beq.n	10058456 <GAT_srv_db_hash_tsk+0x142>
10058422:	6838      	ldr	r0, [r7, #0]
10058424:	3083      	adds	r0, #131	@ 0x83
10058426:	a905      	add	r1, sp, #20
10058428:	2210      	movs	r2, #16
1005842a:	f7fa f997 	bl	1005275c <BLEPLAT_MemCpy>
1005842e:	ad03      	add	r5, sp, #12
10058430:	2082      	movs	r0, #130	@ 0x82
10058432:	8028      	strh	r0, [r5, #0]
10058434:	9500      	str	r5, [sp, #0]
10058436:	2400      	movs	r4, #0
10058438:	4b11      	ldr	r3, [pc, #68]	@ (10058480 <__arm_cp.5_4>)
1005843a:	4620      	mov	r0, r4
1005843c:	4621      	mov	r1, r4
1005843e:	4622      	mov	r2, r4
10058440:	f7fe faf0 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
10058444:	2040      	movs	r0, #64	@ 0x40
10058446:	8028      	strh	r0, [r5, #0]
10058448:	9500      	str	r5, [sp, #0]
1005844a:	4b0e      	ldr	r3, [pc, #56]	@ (10058484 <__arm_cp.5_5>)
1005844c:	4620      	mov	r0, r4
1005844e:	4621      	mov	r1, r4
10058450:	4622      	mov	r2, r4
10058452:	f7fe fae7 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
10058456:	6838      	ldr	r0, [r7, #0]
10058458:	215c      	movs	r1, #92	@ 0x5c
1005845a:	5c42      	ldrb	r2, [r0, r1]
1005845c:	23fd      	movs	r3, #253	@ 0xfd
1005845e:	4013      	ands	r3, r2
10058460:	5443      	strb	r3, [r0, r1]
10058462:	200b      	movs	r0, #11
10058464:	f00a fa10 	bl	10062888 <tsk_notify_idx>
10058468:	f7f9 fb91 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005846c:	b053      	add	sp, #332	@ 0x14c
1005846e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10058470 <__arm_cp.5_0>:
10058470:	ffffd6ff 	.word	0xffffd6ff

10058474 <__arm_cp.5_1>:
10058474:	ffffd800 	.word	0xffffd800

10058478 <__arm_cp.5_2>:
10058478:	10058d81 	.word	0x10058d81

1005847c <__arm_cp.5_3>:
1005847c:	20002a88 	.word	0x20002a88

10058480 <__arm_cp.5_4>:
10058480:	10056ce9 	.word	0x10056ce9

10058484 <__arm_cp.5_5>:
10058484:	10056cdd 	.word	0x10056cdd

10058488 <GAT_srv_send_srv_change_tsk>:
10058488:	b5e0      	push	{r5, r6, r7, lr}
1005848a:	2100      	movs	r1, #0
1005848c:	9100      	str	r1, [sp, #0]
1005848e:	2002      	movs	r0, #2
10058490:	2204      	movs	r2, #4
10058492:	4b07      	ldr	r3, [pc, #28]	@ (100584b0 <__arm_cp.7_0>)
10058494:	f7fe fac6 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
10058498:	2800      	cmp	r0, #0
1005849a:	d001      	beq.n	100584a0 <GAT_srv_send_srv_change_tsk+0x18>
1005849c:	2881      	cmp	r0, #129	@ 0x81
1005849e:	d100      	bne.n	100584a2 <GAT_srv_send_srv_change_tsk+0x1a>
100584a0:	bd8c      	pop	{r2, r3, r7, pc}
100584a2:	200b      	movs	r0, #11
100584a4:	f00a f9f0 	bl	10062888 <tsk_notify_idx>
100584a8:	f7f9 fb71 	bl	10051b8e <BLE_STACK_ProcessRequest>
100584ac:	bd8c      	pop	{r2, r3, r7, pc}
100584ae:	46c0      	nop			@ (mov r8, r8)

100584b0 <__arm_cp.7_0>:
100584b0:	100584b5 	.word	0x100584b5

100584b4 <GAT_srv_tx_service_change>:
100584b4:	b5b0      	push	{r4, r5, r7, lr}
100584b6:	b08a      	sub	sp, #40	@ 0x28
100584b8:	4604      	mov	r4, r0
100584ba:	8880      	ldrh	r0, [r0, #4]
100584bc:	0640      	lsls	r0, r0, #25
100584be:	d401      	bmi.n	100584c4 <GAT_srv_tx_service_change+0x10>
100584c0:	2500      	movs	r5, #0
100584c2:	e04b      	b.n	1005855c <GAT_srv_tx_service_change+0xa8>
100584c4:	a809      	add	r0, sp, #36	@ 0x24
100584c6:	2180      	movs	r1, #128	@ 0x80
100584c8:	8001      	strh	r1, [r0, #0]
100584ca:	8921      	ldrh	r1, [r4, #8]
100584cc:	9000      	str	r0, [sp, #0]
100584ce:	2001      	movs	r0, #1
100584d0:	2500      	movs	r5, #0
100584d2:	4b24      	ldr	r3, [pc, #144]	@ (10058564 <__arm_cp.8_0>)
100584d4:	462a      	mov	r2, r5
100584d6:	f7fe faa5 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
100584da:	88a1      	ldrh	r1, [r4, #4]
100584dc:	0789      	lsls	r1, r1, #30
100584de:	d43d      	bmi.n	1005855c <GAT_srv_tx_service_change+0xa8>
100584e0:	2800      	cmp	r0, #0
100584e2:	d13b      	bne.n	1005855c <GAT_srv_tx_service_change+0xa8>
100584e4:	ad04      	add	r5, sp, #16
100584e6:	4920      	ldr	r1, [pc, #128]	@ (10058568 <__arm_cp.8_1>)
100584e8:	2214      	movs	r2, #20
100584ea:	4628      	mov	r0, r5
100584ec:	f00f fbab 	bl	10067c46 <__aeabi_memcpy>
100584f0:	2001      	movs	r0, #1
100584f2:	491e      	ldr	r1, [pc, #120]	@ (1005856c <__arm_cp.8_2>)
100584f4:	462a      	mov	r2, r5
100584f6:	f000 fbaf 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
100584fa:	2800      	cmp	r0, #0
100584fc:	d012      	beq.n	10058524 <GAT_srv_tx_service_change+0x70>
100584fe:	4605      	mov	r5, r0
10058500:	f000 fc02 	bl	10058d08 <GAT_srv_get_cccd_attr_p>
10058504:	2800      	cmp	r0, #0
10058506:	d00d      	beq.n	10058524 <GAT_srv_tx_service_change+0x70>
10058508:	4601      	mov	r1, r0
1005850a:	8920      	ldrh	r0, [r4, #8]
1005850c:	f000 fc2c 	bl	10058d68 <GAT_srv_get_cccd_val>
10058510:	0780      	lsls	r0, r0, #30
10058512:	d412      	bmi.n	1005853a <GAT_srv_tx_service_change+0x86>
10058514:	8920      	ldrh	r0, [r4, #8]
10058516:	2100      	movs	r1, #0
10058518:	2201      	movs	r2, #1
1005851a:	f000 fbbd 	bl	10058c98 <GAT_srv_check_client_support_feature>
1005851e:	4605      	mov	r5, r0
10058520:	2881      	cmp	r0, #129	@ 0x81
10058522:	d11b      	bne.n	1005855c <GAT_srv_tx_service_change+0xa8>
10058524:	a809      	add	r0, sp, #36	@ 0x24
10058526:	2140      	movs	r1, #64	@ 0x40
10058528:	8001      	strh	r1, [r0, #0]
1005852a:	8921      	ldrh	r1, [r4, #8]
1005852c:	9000      	str	r0, [sp, #0]
1005852e:	2001      	movs	r0, #1
10058530:	2200      	movs	r2, #0
10058532:	4b10      	ldr	r3, [pc, #64]	@ (10058574 <__arm_cp.8_4>)
10058534:	f7fe fa76 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
10058538:	e00f      	b.n	1005855a <GAT_srv_tx_service_change+0xa6>
1005853a:	480d      	ldr	r0, [pc, #52]	@ (10058570 <__arm_cp.8_3>)
1005853c:	9003      	str	r0, [sp, #12]
1005853e:	aa01      	add	r2, sp, #4
10058540:	2004      	movs	r0, #4
10058542:	8050      	strh	r0, [r2, #2]
10058544:	8868      	ldrh	r0, [r5, #2]
10058546:	8010      	strh	r0, [r2, #0]
10058548:	a803      	add	r0, sp, #12
1005854a:	9002      	str	r0, [sp, #8]
1005854c:	8961      	ldrh	r1, [r4, #10]
1005854e:	8920      	ldrh	r0, [r4, #8]
10058550:	9200      	str	r2, [sp, #0]
10058552:	2202      	movs	r2, #2
10058554:	2301      	movs	r3, #1
10058556:	f7fe fe17 	bl	10057188 <GAT_att_srv_hvtx>
1005855a:	4605      	mov	r5, r0
1005855c:	4628      	mov	r0, r5
1005855e:	b00a      	add	sp, #40	@ 0x28
10058560:	bdb0      	pop	{r4, r5, r7, pc}
10058562:	46c0      	nop			@ (mov r8, r8)

10058564 <__arm_cp.8_0>:
10058564:	10056cd1 	.word	0x10056cd1

10058568 <__arm_cp.8_1>:
10058568:	100697b0 	.word	0x100697b0

1005856c <__arm_cp.8_2>:
1005856c:	0000ffff 	.word	0x0000ffff

10058570 <__arm_cp.8_3>:
10058570:	ffff0001 	.word	0xffff0001

10058574 <__arm_cp.8_4>:
10058574:	10056ce9 	.word	0x10056ce9

10058578 <GAT_srv_get_attr_type>:
10058578:	b580      	push	{r7, lr}
1005857a:	2210      	movs	r2, #16
1005857c:	740a      	strb	r2, [r1, #16]
1005857e:	7802      	ldrb	r2, [r0, #0]
10058580:	2a04      	cmp	r2, #4
10058582:	d80d      	bhi.n	100585a0 <GAT_srv_get_attr_type+0x28>
10058584:	447a      	add	r2, pc
10058586:	7912      	ldrb	r2, [r2, #4]
10058588:	0052      	lsls	r2, r2, #1
1005858a:	4497      	add	pc, r2
1005858c:	0212160a 	.word	0x0212160a
10058590:	0002      	.short	0x0002
10058592:	6840      	ldr	r0, [r0, #4]
10058594:	1d03      	adds	r3, r0, #4
10058596:	2214      	movs	r2, #20
10058598:	4608      	mov	r0, r1
1005859a:	4619      	mov	r1, r3
1005859c:	f7fa f8de 	bl	1005275c <BLEPLAT_MemCpy>
100585a0:	bd80      	pop	{r7, pc}
100585a2:	2205      	movs	r2, #5
100585a4:	02d2      	lsls	r2, r2, #11
100585a6:	6840      	ldr	r0, [r0, #4]
100585a8:	7d00      	ldrb	r0, [r0, #20]
100585aa:	2801      	cmp	r0, #1
100585ac:	d109      	bne.n	100585c2 <GAT_srv_get_attr_type+0x4a>
100585ae:	818a      	strh	r2, [r1, #12]
100585b0:	bd80      	pop	{r7, pc}
100585b2:	2005      	movs	r0, #5
100585b4:	02c0      	lsls	r0, r0, #11
100585b6:	1cc0      	adds	r0, r0, #3
100585b8:	e004      	b.n	100585c4 <GAT_srv_get_attr_type+0x4c>
100585ba:	2005      	movs	r0, #5
100585bc:	02c0      	lsls	r0, r0, #11
100585be:	1c80      	adds	r0, r0, #2
100585c0:	e000      	b.n	100585c4 <GAT_srv_get_attr_type+0x4c>
100585c2:	1c50      	adds	r0, r2, #1
100585c4:	8188      	strh	r0, [r1, #12]
100585c6:	bd80      	pop	{r7, pc}

100585c8 <GAT_srv_get_att_group_end_handle>:
100585c8:	b580      	push	{r7, lr}
100585ca:	7801      	ldrb	r1, [r0, #0]
100585cc:	2202      	movs	r2, #2
100585ce:	430a      	orrs	r2, r1
100585d0:	2a02      	cmp	r2, #2
100585d2:	d102      	bne.n	100585da <GAT_srv_get_att_group_end_handle+0x12>
100585d4:	f00c fa86 	bl	10064ae4 <GAT_att_db_get_last_group_handle>
100585d8:	bd80      	pop	{r7, pc}
100585da:	8840      	ldrh	r0, [r0, #2]
100585dc:	bd80      	pop	{r7, pc}

100585de <GAT_srv_attr_value_read>:
100585de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100585e0:	461c      	mov	r4, r3
100585e2:	9200      	str	r2, [sp, #0]
100585e4:	460e      	mov	r6, r1
100585e6:	4607      	mov	r7, r0
100585e8:	2201      	movs	r2, #1
100585ea:	4608      	mov	r0, r1
100585ec:	4639      	mov	r1, r7
100585ee:	f000 f80f 	bl	10058610 <GAT_srv_check_perms>
100585f2:	7020      	strb	r0, [r4, #0]
100585f4:	2586      	movs	r5, #134	@ 0x86
100585f6:	2800      	cmp	r0, #0
100585f8:	d108      	bne.n	1005860c <GAT_srv_attr_value_read+0x2e>
100585fa:	4638      	mov	r0, r7
100585fc:	4631      	mov	r1, r6
100585fe:	9a00      	ldr	r2, [sp, #0]
10058600:	f000 f87c 	bl	100586fc <GAT_srv_get_attr_value>
10058604:	2886      	cmp	r0, #134	@ 0x86
10058606:	d102      	bne.n	1005860e <GAT_srv_attr_value_read+0x30>
10058608:	200e      	movs	r0, #14
1005860a:	7020      	strb	r0, [r4, #0]
1005860c:	4628      	mov	r0, r5
1005860e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10058610 <GAT_srv_check_perms>:
10058610:	b5f0      	push	{r4, r5, r6, r7, lr}
10058612:	b085      	sub	sp, #20
10058614:	4615      	mov	r5, r2
10058616:	9101      	str	r1, [sp, #4]
10058618:	4601      	mov	r1, r0
1005861a:	7804      	ldrb	r4, [r0, #0]
1005861c:	2700      	movs	r7, #0
1005861e:	2302      	movs	r3, #2
10058620:	200e      	movs	r0, #14
10058622:	2c03      	cmp	r4, #3
10058624:	461a      	mov	r2, r3
10058626:	463e      	mov	r6, r7
10058628:	d312      	bcc.n	10058650 <GAT_srv_check_perms+0x40>
1005862a:	d00b      	beq.n	10058644 <GAT_srv_check_perms+0x34>
1005862c:	2c04      	cmp	r4, #4
1005862e:	d158      	bne.n	100586e2 <GAT_srv_check_perms+0xd2>
10058630:	6848      	ldr	r0, [r1, #4]
10058632:	7801      	ldrb	r1, [r0, #0]
10058634:	078c      	lsls	r4, r1, #30
10058636:	07c9      	lsls	r1, r1, #31
10058638:	0f8a      	lsrs	r2, r1, #30
1005863a:	2c00      	cmp	r4, #0
1005863c:	d500      	bpl.n	10058640 <GAT_srv_check_perms+0x30>
1005863e:	324c      	adds	r2, #76	@ 0x4c
10058640:	1c41      	adds	r1, r0, #1
10058642:	e002      	b.n	1005864a <GAT_srv_check_perms+0x3a>
10058644:	6848      	ldr	r0, [r1, #4]
10058646:	1c41      	adds	r1, r0, #1
10058648:	7802      	ldrb	r2, [r0, #0]
1005864a:	1c80      	adds	r0, r0, #2
1005864c:	780e      	ldrb	r6, [r1, #0]
1005864e:	7807      	ldrb	r7, [r0, #0]
10058650:	2d01      	cmp	r5, #1
10058652:	d103      	bne.n	1005865c <GAT_srv_check_perms+0x4c>
10058654:	4610      	mov	r0, r2
10058656:	4018      	ands	r0, r3
10058658:	4618      	mov	r0, r3
1005865a:	d042      	beq.n	100586e2 <GAT_srv_check_perms+0xd2>
1005865c:	2003      	movs	r0, #3
1005865e:	2d03      	cmp	r5, #3
10058660:	d102      	bne.n	10058668 <GAT_srv_check_perms+0x58>
10058662:	2108      	movs	r1, #8
10058664:	4011      	ands	r1, r2
10058666:	d03c      	beq.n	100586e2 <GAT_srv_check_perms+0xd2>
10058668:	2d04      	cmp	r5, #4
1005866a:	d102      	bne.n	10058672 <GAT_srv_check_perms+0x62>
1005866c:	2104      	movs	r1, #4
1005866e:	4011      	ands	r1, r2
10058670:	d037      	beq.n	100586e2 <GAT_srv_check_perms+0xd2>
10058672:	2d05      	cmp	r5, #5
10058674:	d102      	bne.n	1005867c <GAT_srv_check_perms+0x6c>
10058676:	2140      	movs	r1, #64	@ 0x40
10058678:	400a      	ands	r2, r1
1005867a:	d032      	beq.n	100586e2 <GAT_srv_check_perms+0xd2>
1005867c:	a904      	add	r1, sp, #16
1005867e:	aa03      	add	r2, sp, #12
10058680:	ab02      	add	r3, sp, #8
10058682:	9c01      	ldr	r4, [sp, #4]
10058684:	4620      	mov	r0, r4
10058686:	f009 ff26 	bl	100624d6 <smp_sap_get_security_level>
1005868a:	2802      	cmp	r0, #2
1005868c:	d102      	bne.n	10058694 <GAT_srv_check_perms+0x84>
1005868e:	2f00      	cmp	r7, #0
10058690:	d10f      	bne.n	100586b2 <GAT_srv_check_perms+0xa2>
10058692:	e025      	b.n	100586e0 <GAT_srv_check_perms+0xd0>
10058694:	2d01      	cmp	r5, #1
10058696:	d000      	beq.n	1005869a <GAT_srv_check_perms+0x8a>
10058698:	08ff      	lsrs	r7, r7, #3
1005869a:	2d05      	cmp	r5, #5
1005869c:	d10b      	bne.n	100586b6 <GAT_srv_check_perms+0xa6>
1005869e:	a804      	add	r0, sp, #16
100586a0:	7800      	ldrb	r0, [r0, #0]
100586a2:	2802      	cmp	r0, #2
100586a4:	d105      	bne.n	100586b2 <GAT_srv_check_perms+0xa2>
100586a6:	a802      	add	r0, sp, #8
100586a8:	7800      	ldrb	r0, [r0, #0]
100586aa:	2802      	cmp	r0, #2
100586ac:	d114      	bne.n	100586d8 <GAT_srv_check_perms+0xc8>
100586ae:	2000      	movs	r0, #0
100586b0:	e013      	b.n	100586da <GAT_srv_check_perms+0xca>
100586b2:	200e      	movs	r0, #14
100586b4:	e015      	b.n	100586e2 <GAT_srv_check_perms+0xd2>
100586b6:	2000      	movs	r0, #0
100586b8:	2f00      	cmp	r7, #0
100586ba:	d012      	beq.n	100586e2 <GAT_srv_check_perms+0xd2>
100586bc:	a903      	add	r1, sp, #12
100586be:	7809      	ldrb	r1, [r1, #0]
100586c0:	07fa      	lsls	r2, r7, #31
100586c2:	d003      	beq.n	100586cc <GAT_srv_check_perms+0xbc>
100586c4:	2903      	cmp	r1, #3
100586c6:	d201      	bcs.n	100586cc <GAT_srv_check_perms+0xbc>
100586c8:	2005      	movs	r0, #5
100586ca:	e00a      	b.n	100586e2 <GAT_srv_check_perms+0xd2>
100586cc:	077a      	lsls	r2, r7, #29
100586ce:	d508      	bpl.n	100586e2 <GAT_srv_check_perms+0xd2>
100586d0:	2902      	cmp	r1, #2
100586d2:	d208      	bcs.n	100586e6 <GAT_srv_check_perms+0xd6>
100586d4:	200f      	movs	r0, #15
100586d6:	e004      	b.n	100586e2 <GAT_srv_check_perms+0xd2>
100586d8:	2005      	movs	r0, #5
100586da:	2101      	movs	r1, #1
100586dc:	400f      	ands	r7, r1
100586de:	d100      	bne.n	100586e2 <GAT_srv_check_perms+0xd2>
100586e0:	4638      	mov	r0, r7
100586e2:	b005      	add	sp, #20
100586e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100586e6:	4620      	mov	r0, r4
100586e8:	4631      	mov	r1, r6
100586ea:	f009 ff6a 	bl	100625c2 <smp_sap_check_encryption_key_size>
100586ee:	28b6      	cmp	r0, #182	@ 0xb6
100586f0:	d001      	beq.n	100586f6 <GAT_srv_check_perms+0xe6>
100586f2:	2000      	movs	r0, #0
100586f4:	e7f5      	b.n	100586e2 <GAT_srv_check_perms+0xd2>
100586f6:	200c      	movs	r0, #12
100586f8:	e7f3      	b.n	100586e2 <GAT_srv_check_perms+0xd2>
	...

100586fc <GAT_srv_get_attr_value>:
100586fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100586fe:	b085      	sub	sp, #20
10058700:	460d      	mov	r5, r1
10058702:	7809      	ldrb	r1, [r1, #0]
10058704:	2904      	cmp	r1, #4
10058706:	d811      	bhi.n	1005872c <GAT_srv_get_attr_value+0x30>
10058708:	4614      	mov	r4, r2
1005870a:	46c0      	nop			@ (mov r8, r8)
1005870c:	4479      	add	r1, pc
1005870e:	7909      	ldrb	r1, [r1, #4]
10058710:	0049      	lsls	r1, r1, #1
10058712:	448f      	add	pc, r1
10058714:	694a0d02 	.word	0x694a0d02
10058718:	007e      	.short	0x007e
1005871a:	4e73      	ldr	r6, [pc, #460]	@ (100588e8 <__arm_cp.13_0>)
1005871c:	6830      	ldr	r0, [r6, #0]
1005871e:	4601      	mov	r1, r0
10058720:	3170      	adds	r1, #112	@ 0x70
10058722:	66c1      	str	r1, [r0, #108]	@ 0x6c
10058724:	6868      	ldr	r0, [r5, #4]
10058726:	f00a fa87 	bl	10062c38 <UUID_write_to_flat>
1005872a:	e057      	b.n	100587dc <GAT_srv_get_attr_value+0xe0>
1005872c:	2686      	movs	r6, #134	@ 0x86
1005872e:	e0d3      	b.n	100588d8 <GAT_srv_get_attr_value+0x1dc>
10058730:	4f6d      	ldr	r7, [pc, #436]	@ (100588e8 <__arm_cp.13_0>)
10058732:	6838      	ldr	r0, [r7, #0]
10058734:	4601      	mov	r1, r0
10058736:	3170      	adds	r1, #112	@ 0x70
10058738:	66c1      	str	r1, [r0, #108]	@ 0x6c
1005873a:	686b      	ldr	r3, [r5, #4]
1005873c:	2001      	movs	r0, #1
1005873e:	496e      	ldr	r1, [pc, #440]	@ (100588f8 <__arm_cp.13_4>)
10058740:	2600      	movs	r6, #0
10058742:	4632      	mov	r2, r6
10058744:	f000 fad6 	bl	10058cf4 <GAT_srv_get_attribute_handle>
10058748:	a901      	add	r1, sp, #4
1005874a:	8008      	strh	r0, [r1, #0]
1005874c:	2800      	cmp	r0, #0
1005874e:	d100      	bne.n	10058752 <GAT_srv_get_attr_value+0x56>
10058750:	e0ad      	b.n	100588ae <GAT_srv_get_attr_value+0x1b2>
10058752:	f00c f929 	bl	100649a8 <GAT_att_db_find_by_handle>
10058756:	f7ff ff37 	bl	100585c8 <GAT_srv_get_att_group_end_handle>
1005875a:	a902      	add	r1, sp, #8
1005875c:	9100      	str	r1, [sp, #0]
1005875e:	8008      	strh	r0, [r1, #0]
10058760:	6838      	ldr	r0, [r7, #0]
10058762:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10058764:	a901      	add	r1, sp, #4
10058766:	2702      	movs	r7, #2
10058768:	463a      	mov	r2, r7
1005876a:	f7f9 fff7 	bl	1005275c <BLEPLAT_MemCpy>
1005876e:	485e      	ldr	r0, [pc, #376]	@ (100588e8 <__arm_cp.13_0>)
10058770:	6800      	ldr	r0, [r0, #0]
10058772:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10058774:	1c80      	adds	r0, r0, #2
10058776:	9900      	ldr	r1, [sp, #0]
10058778:	463a      	mov	r2, r7
1005877a:	f7f9 ffef 	bl	1005275c <BLEPLAT_MemCpy>
1005877e:	485a      	ldr	r0, [pc, #360]	@ (100588e8 <__arm_cp.13_0>)
10058780:	6800      	ldr	r0, [r0, #0]
10058782:	2768      	movs	r7, #104	@ 0x68
10058784:	2104      	movs	r1, #4
10058786:	53c1      	strh	r1, [r0, r7]
10058788:	6869      	ldr	r1, [r5, #4]
1005878a:	7c0a      	ldrb	r2, [r1, #16]
1005878c:	2a10      	cmp	r2, #16
1005878e:	d000      	beq.n	10058792 <GAT_srv_get_attr_value+0x96>
10058790:	e091      	b.n	100588b6 <GAT_srv_get_attr_value+0x1ba>
10058792:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
10058794:	310c      	adds	r1, #12
10058796:	1d00      	adds	r0, r0, #4
10058798:	2202      	movs	r2, #2
1005879a:	f7f9 ffdf 	bl	1005275c <BLEPLAT_MemCpy>
1005879e:	4852      	ldr	r0, [pc, #328]	@ (100588e8 <__arm_cp.13_0>)
100587a0:	6800      	ldr	r0, [r0, #0]
100587a2:	5bc1      	ldrh	r1, [r0, r7]
100587a4:	1c89      	adds	r1, r1, #2
100587a6:	53c1      	strh	r1, [r0, r7]
100587a8:	e085      	b.n	100588b6 <GAT_srv_get_attr_value+0x1ba>
100587aa:	4e4f      	ldr	r6, [pc, #316]	@ (100588e8 <__arm_cp.13_0>)
100587ac:	6830      	ldr	r0, [r6, #0]
100587ae:	4601      	mov	r1, r0
100587b0:	3170      	adds	r1, #112	@ 0x70
100587b2:	66c1      	str	r1, [r0, #108]	@ 0x6c
100587b4:	6869      	ldr	r1, [r5, #4]
100587b6:	7809      	ldrb	r1, [r1, #0]
100587b8:	2270      	movs	r2, #112	@ 0x70
100587ba:	5481      	strb	r1, [r0, r2]
100587bc:	8869      	ldrh	r1, [r5, #2]
100587be:	1c4a      	adds	r2, r1, #1
100587c0:	a903      	add	r1, sp, #12
100587c2:	800a      	strh	r2, [r1, #0]
100587c4:	3071      	adds	r0, #113	@ 0x71
100587c6:	2202      	movs	r2, #2
100587c8:	f7f9 ffc8 	bl	1005275c <BLEPLAT_MemCpy>
100587cc:	6830      	ldr	r0, [r6, #0]
100587ce:	6ec1      	ldr	r1, [r0, #108]	@ 0x6c
100587d0:	6868      	ldr	r0, [r5, #4]
100587d2:	1d00      	adds	r0, r0, #4
100587d4:	1cc9      	adds	r1, r1, #3
100587d6:	f00a fa2f 	bl	10062c38 <UUID_write_to_flat>
100587da:	1cc0      	adds	r0, r0, #3
100587dc:	6831      	ldr	r1, [r6, #0]
100587de:	2268      	movs	r2, #104	@ 0x68
100587e0:	5288      	strh	r0, [r1, r2]
100587e2:	3168      	adds	r1, #104	@ 0x68
100587e4:	6021      	str	r1, [r4, #0]
100587e6:	e076      	b.n	100588d6 <GAT_srv_get_attr_value+0x1da>
100587e8:	6869      	ldr	r1, [r5, #4]
100587ea:	7d0a      	ldrb	r2, [r1, #20]
100587ec:	2a10      	cmp	r2, #16
100587ee:	d132      	bne.n	10058856 <GAT_srv_get_attr_value+0x15a>
100587f0:	4a3f      	ldr	r2, [pc, #252]	@ (100588f0 <__arm_cp.13_2>)
100587f2:	1c52      	adds	r2, r2, #1
100587f4:	8a0b      	ldrh	r3, [r1, #16]
100587f6:	4293      	cmp	r3, r2
100587f8:	d12d      	bne.n	10058856 <GAT_srv_get_attr_value+0x15a>
100587fa:	483b      	ldr	r0, [pc, #236]	@ (100588e8 <__arm_cp.13_0>)
100587fc:	6801      	ldr	r1, [r0, #0]
100587fe:	3168      	adds	r1, #104	@ 0x68
10058800:	6021      	str	r1, [r4, #0]
10058802:	6800      	ldr	r0, [r0, #0]
10058804:	2168      	movs	r1, #104	@ 0x68
10058806:	2210      	movs	r2, #16
10058808:	5242      	strh	r2, [r0, r1]
1005880a:	4601      	mov	r1, r0
1005880c:	3183      	adds	r1, #131	@ 0x83
1005880e:	66c1      	str	r1, [r0, #108]	@ 0x6c
10058810:	e061      	b.n	100588d6 <GAT_srv_get_attr_value+0x1da>
10058812:	6869      	ldr	r1, [r5, #4]
10058814:	6989      	ldr	r1, [r1, #24]
10058816:	2900      	cmp	r1, #0
10058818:	d045      	beq.n	100588a6 <GAT_srv_get_attr_value+0x1aa>
1005881a:	4e33      	ldr	r6, [pc, #204]	@ (100588e8 <__arm_cp.13_0>)
1005881c:	6831      	ldr	r1, [r6, #0]
1005881e:	3168      	adds	r1, #104	@ 0x68
10058820:	6021      	str	r1, [r4, #0]
10058822:	6869      	ldr	r1, [r5, #4]
10058824:	7d0a      	ldrb	r2, [r1, #20]
10058826:	2a10      	cmp	r2, #16
10058828:	d13f      	bne.n	100588aa <GAT_srv_get_attr_value+0x1ae>
1005882a:	8a0a      	ldrh	r2, [r1, #16]
1005882c:	4b2f      	ldr	r3, [pc, #188]	@ (100588ec <__arm_cp.13_1>)
1005882e:	429a      	cmp	r2, r3
10058830:	d13b      	bne.n	100588aa <GAT_srv_get_attr_value+0x1ae>
10058832:	6831      	ldr	r1, [r6, #0]
10058834:	2268      	movs	r2, #104	@ 0x68
10058836:	2402      	movs	r4, #2
10058838:	528c      	strh	r4, [r1, r2]
1005883a:	460a      	mov	r2, r1
1005883c:	3270      	adds	r2, #112	@ 0x70
1005883e:	66ca      	str	r2, [r1, #108]	@ 0x6c
10058840:	4629      	mov	r1, r5
10058842:	f000 fa91 	bl	10058d68 <GAT_srv_get_cccd_val>
10058846:	a904      	add	r1, sp, #16
10058848:	8008      	strh	r0, [r1, #0]
1005884a:	6830      	ldr	r0, [r6, #0]
1005884c:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
1005884e:	4622      	mov	r2, r4
10058850:	f7f9 ff84 	bl	1005275c <BLEPLAT_MemCpy>
10058854:	e03f      	b.n	100588d6 <GAT_srv_get_attr_value+0x1da>
10058856:	6a09      	ldr	r1, [r1, #32]
10058858:	2900      	cmp	r1, #0
1005885a:	d024      	beq.n	100588a6 <GAT_srv_get_attr_value+0x1aa>
1005885c:	4e22      	ldr	r6, [pc, #136]	@ (100588e8 <__arm_cp.13_0>)
1005885e:	6831      	ldr	r1, [r6, #0]
10058860:	3168      	adds	r1, #104	@ 0x68
10058862:	6021      	str	r1, [r4, #0]
10058864:	6869      	ldr	r1, [r5, #4]
10058866:	7d0a      	ldrb	r2, [r1, #20]
10058868:	2a10      	cmp	r2, #16
1005886a:	d127      	bne.n	100588bc <GAT_srv_get_attr_value+0x1c0>
1005886c:	8a0a      	ldrh	r2, [r1, #16]
1005886e:	4b20      	ldr	r3, [pc, #128]	@ (100588f0 <__arm_cp.13_2>)
10058870:	429a      	cmp	r2, r3
10058872:	d123      	bne.n	100588bc <GAT_srv_get_attr_value+0x1c0>
10058874:	6831      	ldr	r1, [r6, #0]
10058876:	2268      	movs	r2, #104	@ 0x68
10058878:	2301      	movs	r3, #1
1005887a:	528b      	strh	r3, [r1, r2]
1005887c:	460a      	mov	r2, r1
1005887e:	3270      	adds	r2, #112	@ 0x70
10058880:	66ca      	str	r2, [r1, #108]	@ 0x6c
10058882:	f7fe fa37 	bl	10056cf4 <GAT_att_cmn_get_conn_index>
10058886:	28ff      	cmp	r0, #255	@ 0xff
10058888:	d029      	beq.n	100588de <GAT_srv_get_attr_value+0x1e2>
1005888a:	6869      	ldr	r1, [r5, #4]
1005888c:	6a09      	ldr	r1, [r1, #32]
1005888e:	688b      	ldr	r3, [r1, #8]
10058890:	4918      	ldr	r1, [pc, #96]	@ (100588f4 <__arm_cp.13_3>)
10058892:	7ac9      	ldrb	r1, [r1, #11]
10058894:	0849      	lsrs	r1, r1, #1
10058896:	1c4a      	adds	r2, r1, #1
10058898:	2104      	movs	r1, #4
1005889a:	f000 f8d9 	bl	10058a50 <GAT_srv_get_zip_val>
1005889e:	6831      	ldr	r1, [r6, #0]
100588a0:	2270      	movs	r2, #112	@ 0x70
100588a2:	5488      	strb	r0, [r1, r2]
100588a4:	e017      	b.n	100588d6 <GAT_srv_get_attr_value+0x1da>
100588a6:	2684      	movs	r6, #132	@ 0x84
100588a8:	e016      	b.n	100588d8 <GAT_srv_get_attr_value+0x1dc>
100588aa:	6988      	ldr	r0, [r1, #24]
100588ac:	e007      	b.n	100588be <GAT_srv_get_attr_value+0x1c2>
100588ae:	6838      	ldr	r0, [r7, #0]
100588b0:	2168      	movs	r1, #104	@ 0x68
100588b2:	2200      	movs	r2, #0
100588b4:	5242      	strh	r2, [r0, r1]
100588b6:	3068      	adds	r0, #104	@ 0x68
100588b8:	6020      	str	r0, [r4, #0]
100588ba:	e00d      	b.n	100588d8 <GAT_srv_get_attr_value+0x1dc>
100588bc:	6a08      	ldr	r0, [r1, #32]
100588be:	7801      	ldrb	r1, [r0, #0]
100588c0:	0789      	lsls	r1, r1, #30
100588c2:	d501      	bpl.n	100588c8 <GAT_srv_get_attr_value+0x1cc>
100588c4:	2102      	movs	r1, #2
100588c6:	e000      	b.n	100588ca <GAT_srv_get_attr_value+0x1ce>
100588c8:	2104      	movs	r1, #4
100588ca:	5a41      	ldrh	r1, [r0, r1]
100588cc:	6880      	ldr	r0, [r0, #8]
100588ce:	6832      	ldr	r2, [r6, #0]
100588d0:	2368      	movs	r3, #104	@ 0x68
100588d2:	52d1      	strh	r1, [r2, r3]
100588d4:	66d0      	str	r0, [r2, #108]	@ 0x6c
100588d6:	2600      	movs	r6, #0
100588d8:	4630      	mov	r0, r6
100588da:	b005      	add	sp, #20
100588dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100588de:	6830      	ldr	r0, [r6, #0]
100588e0:	2170      	movs	r1, #112	@ 0x70
100588e2:	2600      	movs	r6, #0
100588e4:	5446      	strb	r6, [r0, r1]
100588e6:	e7f7      	b.n	100588d8 <GAT_srv_get_attr_value+0x1dc>

100588e8 <__arm_cp.13_0>:
100588e8:	20002a88 	.word	0x20002a88

100588ec <__arm_cp.13_1>:
100588ec:	00002902 	.word	0x00002902

100588f0 <__arm_cp.13_2>:
100588f0:	00002b29 	.word	0x00002b29

100588f4 <__arm_cp.13_3>:
100588f4:	20002ae4 	.word	0x20002ae4

100588f8 <__arm_cp.13_4>:
100588f8:	0000ffff 	.word	0x0000ffff

100588fc <GAT_srv_attr_value_write>:
100588fc:	b5f0      	push	{r4, r5, r6, r7, lr}
100588fe:	b089      	sub	sp, #36	@ 0x24
10058900:	4617      	mov	r7, r2
10058902:	460d      	mov	r5, r1
10058904:	4606      	mov	r6, r0
10058906:	7800      	ldrb	r0, [r0, #0]
10058908:	8874      	ldrh	r4, [r6, #2]
1005890a:	2804      	cmp	r0, #4
1005890c:	d045      	beq.n	1005899a <GAT_srv_attr_value_write+0x9e>
1005890e:	2803      	cmp	r0, #3
10058910:	d177      	bne.n	10058a02 <GAT_srv_attr_value_write+0x106>
10058912:	6871      	ldr	r1, [r6, #4]
10058914:	6a08      	ldr	r0, [r1, #32]
10058916:	2800      	cmp	r0, #0
10058918:	d07d      	beq.n	10058a16 <GAT_srv_attr_value_write+0x11a>
1005891a:	7d0a      	ldrb	r2, [r1, #20]
1005891c:	2a10      	cmp	r2, #16
1005891e:	d174      	bne.n	10058a0a <GAT_srv_attr_value_write+0x10e>
10058920:	8a09      	ldrh	r1, [r1, #16]
10058922:	4a49      	ldr	r2, [pc, #292]	@ (10058a48 <__arm_cp.14_1>)
10058924:	4291      	cmp	r1, r2
10058926:	d170      	bne.n	10058a0a <GAT_srv_attr_value_write+0x10e>
10058928:	9700      	str	r7, [sp, #0]
1005892a:	2101      	movs	r1, #1
1005892c:	aa07      	add	r2, sp, #28
1005892e:	ab08      	add	r3, sp, #32
10058930:	4628      	mov	r0, r5
10058932:	f7fe fd04 	bl	1005733e <GAT_att_srv_extract_write_packet_data>
10058936:	2800      	cmp	r0, #0
10058938:	d16e      	bne.n	10058a18 <GAT_srv_attr_value_write+0x11c>
1005893a:	8828      	ldrh	r0, [r5, #0]
1005893c:	f7fe f9da 	bl	10056cf4 <GAT_att_cmn_get_conn_index>
10058940:	aa07      	add	r2, sp, #28
10058942:	7811      	ldrb	r1, [r2, #0]
10058944:	2307      	movs	r3, #7
10058946:	400b      	ands	r3, r1
10058948:	9305      	str	r3, [sp, #20]
1005894a:	7013      	strb	r3, [r2, #0]
1005894c:	6871      	ldr	r1, [r6, #4]
1005894e:	6a09      	ldr	r1, [r1, #32]
10058950:	688b      	ldr	r3, [r1, #8]
10058952:	493e      	ldr	r1, [pc, #248]	@ (10058a4c <__arm_cp.14_2>)
10058954:	7ac9      	ldrb	r1, [r1, #11]
10058956:	0849      	lsrs	r1, r1, #1
10058958:	1c4a      	adds	r2, r1, #1
1005895a:	2104      	movs	r1, #4
1005895c:	9004      	str	r0, [sp, #16]
1005895e:	9203      	str	r2, [sp, #12]
10058960:	9302      	str	r3, [sp, #8]
10058962:	f000 f875 	bl	10058a50 <GAT_srv_get_zip_val>
10058966:	9a05      	ldr	r2, [sp, #20]
10058968:	4601      	mov	r1, r0
1005896a:	4011      	ands	r1, r2
1005896c:	4281      	cmp	r1, r0
1005896e:	d157      	bne.n	10058a20 <GAT_srv_attr_value_write+0x124>
10058970:	9802      	ldr	r0, [sp, #8]
10058972:	9000      	str	r0, [sp, #0]
10058974:	2104      	movs	r1, #4
10058976:	9804      	ldr	r0, [sp, #16]
10058978:	9b03      	ldr	r3, [sp, #12]
1005897a:	f000 f87c 	bl	10058a76 <GAT_srv_set_zip_val>
1005897e:	6870      	ldr	r0, [r6, #4]
10058980:	6a00      	ldr	r0, [r0, #32]
10058982:	7800      	ldrb	r0, [r0, #0]
10058984:	07c0      	lsls	r0, r0, #31
10058986:	d03a      	beq.n	100589fe <GAT_srv_attr_value_write+0x102>
10058988:	882e      	ldrh	r6, [r5, #0]
1005898a:	4628      	mov	r0, r5
1005898c:	f000 ff95 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10058990:	4602      	mov	r2, r0
10058992:	a808      	add	r0, sp, #32
10058994:	8800      	ldrh	r0, [r0, #0]
10058996:	a907      	add	r1, sp, #28
10058998:	e04c      	b.n	10058a34 <GAT_srv_attr_value_write+0x138>
1005899a:	6871      	ldr	r1, [r6, #4]
1005899c:	6988      	ldr	r0, [r1, #24]
1005899e:	2800      	cmp	r0, #0
100589a0:	d039      	beq.n	10058a16 <GAT_srv_attr_value_write+0x11a>
100589a2:	7d0a      	ldrb	r2, [r1, #20]
100589a4:	2a10      	cmp	r2, #16
100589a6:	d130      	bne.n	10058a0a <GAT_srv_attr_value_write+0x10e>
100589a8:	8a09      	ldrh	r1, [r1, #16]
100589aa:	4a26      	ldr	r2, [pc, #152]	@ (10058a44 <__arm_cp.14_0>)
100589ac:	4291      	cmp	r1, r2
100589ae:	d12c      	bne.n	10058a0a <GAT_srv_attr_value_write+0x10e>
100589b0:	9700      	str	r7, [sp, #0]
100589b2:	2102      	movs	r1, #2
100589b4:	aa06      	add	r2, sp, #24
100589b6:	ab08      	add	r3, sp, #32
100589b8:	4628      	mov	r0, r5
100589ba:	f7fe fcc0 	bl	1005733e <GAT_att_srv_extract_write_packet_data>
100589be:	2800      	cmp	r0, #0
100589c0:	d12a      	bne.n	10058a18 <GAT_srv_attr_value_write+0x11c>
100589c2:	a806      	add	r0, sp, #24
100589c4:	8800      	ldrh	r0, [r0, #0]
100589c6:	9005      	str	r0, [sp, #20]
100589c8:	8870      	ldrh	r0, [r6, #2]
100589ca:	1e80      	subs	r0, r0, #2
100589cc:	b281      	uxth	r1, r0
100589ce:	2002      	movs	r0, #2
100589d0:	f00c f920 	bl	10064c14 <GAT_att_db_reverse_find_attr_of_type>
100589d4:	2800      	cmp	r0, #0
100589d6:	d021      	beq.n	10058a1c <GAT_srv_attr_value_write+0x120>
100589d8:	9905      	ldr	r1, [sp, #20]
100589da:	0789      	lsls	r1, r1, #30
100589dc:	0e89      	lsrs	r1, r1, #26
100589de:	6840      	ldr	r0, [r0, #4]
100589e0:	7800      	ldrb	r0, [r0, #0]
100589e2:	4008      	ands	r0, r1
100589e4:	4288      	cmp	r0, r1
100589e6:	d119      	bne.n	10058a1c <GAT_srv_attr_value_write+0x120>
100589e8:	a806      	add	r0, sp, #24
100589ea:	8802      	ldrh	r2, [r0, #0]
100589ec:	8828      	ldrh	r0, [r5, #0]
100589ee:	4631      	mov	r1, r6
100589f0:	f000 f882 	bl	10058af8 <GAT_srv_set_cccd_val>
100589f4:	6870      	ldr	r0, [r6, #4]
100589f6:	6980      	ldr	r0, [r0, #24]
100589f8:	7800      	ldrb	r0, [r0, #0]
100589fa:	07c0      	lsls	r0, r0, #31
100589fc:	d112      	bne.n	10058a24 <GAT_srv_attr_value_write+0x128>
100589fe:	2000      	movs	r0, #0
10058a00:	e00a      	b.n	10058a18 <GAT_srv_attr_value_write+0x11c>
10058a02:	2003      	movs	r0, #3
10058a04:	7038      	strb	r0, [r7, #0]
10058a06:	2086      	movs	r0, #134	@ 0x86
10058a08:	e006      	b.n	10058a18 <GAT_srv_attr_value_write+0x11c>
10058a0a:	4621      	mov	r1, r4
10058a0c:	462a      	mov	r2, r5
10058a0e:	463b      	mov	r3, r7
10058a10:	f000 f847 	bl	10058aa2 <GAT_srv_attr_direct_value_write>
10058a14:	e000      	b.n	10058a18 <GAT_srv_attr_value_write+0x11c>
10058a16:	2084      	movs	r0, #132	@ 0x84
10058a18:	b009      	add	sp, #36	@ 0x24
10058a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058a1c:	20fd      	movs	r0, #253	@ 0xfd
10058a1e:	e7f1      	b.n	10058a04 <GAT_srv_attr_value_write+0x108>
10058a20:	2013      	movs	r0, #19
10058a22:	e7ef      	b.n	10058a04 <GAT_srv_attr_value_write+0x108>
10058a24:	882e      	ldrh	r6, [r5, #0]
10058a26:	4628      	mov	r0, r5
10058a28:	f000 ff47 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10058a2c:	4602      	mov	r2, r0
10058a2e:	a808      	add	r0, sp, #32
10058a30:	8800      	ldrh	r0, [r0, #0]
10058a32:	a906      	add	r1, sp, #24
10058a34:	9000      	str	r0, [sp, #0]
10058a36:	9101      	str	r1, [sp, #4]
10058a38:	2002      	movs	r0, #2
10058a3a:	4631      	mov	r1, r6
10058a3c:	4623      	mov	r3, r4
10058a3e:	f00a fd59 	bl	100634f4 <aci_gatt_srv_attribute_modified_event_push_noinline>
10058a42:	e7e9      	b.n	10058a18 <GAT_srv_attr_value_write+0x11c>

10058a44 <__arm_cp.14_0>:
10058a44:	00002902 	.word	0x00002902

10058a48 <__arm_cp.14_1>:
10058a48:	00002b29 	.word	0x00002b29

10058a4c <__arm_cp.14_2>:
10058a4c:	20002ae4 	.word	0x20002ae4

10058a50 <GAT_srv_get_zip_val>:
10058a50:	b510      	push	{r4, lr}
10058a52:	4348      	muls	r0, r1
10058a54:	08c4      	lsrs	r4, r0, #3
10058a56:	b2a4      	uxth	r4, r4
10058a58:	4294      	cmp	r4, r2
10058a5a:	d901      	bls.n	10058a60 <GAT_srv_get_zip_val+0x10>
10058a5c:	2000      	movs	r0, #0
10058a5e:	bd10      	pop	{r4, pc}
10058a60:	2207      	movs	r2, #7
10058a62:	4010      	ands	r0, r2
10058a64:	5d1a      	ldrb	r2, [r3, r4]
10058a66:	40c2      	lsrs	r2, r0
10058a68:	2020      	movs	r0, #32
10058a6a:	1a41      	subs	r1, r0, r1
10058a6c:	2000      	movs	r0, #0
10058a6e:	43c0      	mvns	r0, r0
10058a70:	40c8      	lsrs	r0, r1
10058a72:	4010      	ands	r0, r2
10058a74:	bd10      	pop	{r4, pc}

10058a76 <GAT_srv_set_zip_val>:
10058a76:	b5b0      	push	{r4, r5, r7, lr}
10058a78:	4348      	muls	r0, r1
10058a7a:	08c4      	lsrs	r4, r0, #3
10058a7c:	b2a4      	uxth	r4, r4
10058a7e:	429c      	cmp	r4, r3
10058a80:	d80e      	bhi.n	10058aa0 <GAT_srv_set_zip_val+0x2a>
10058a82:	9b04      	ldr	r3, [sp, #16]
10058a84:	2507      	movs	r5, #7
10058a86:	4028      	ands	r0, r5
10058a88:	2520      	movs	r5, #32
10058a8a:	1a69      	subs	r1, r5, r1
10058a8c:	2500      	movs	r5, #0
10058a8e:	43ed      	mvns	r5, r5
10058a90:	40cd      	lsrs	r5, r1
10058a92:	402a      	ands	r2, r5
10058a94:	4082      	lsls	r2, r0
10058a96:	4085      	lsls	r5, r0
10058a98:	5d18      	ldrb	r0, [r3, r4]
10058a9a:	43a8      	bics	r0, r5
10058a9c:	4310      	orrs	r0, r2
10058a9e:	5518      	strb	r0, [r3, r4]
10058aa0:	bdb0      	pop	{r4, r5, r7, pc}

10058aa2 <GAT_srv_attr_direct_value_write>:
10058aa2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058aa4:	4616      	mov	r6, r2
10058aa6:	460c      	mov	r4, r1
10058aa8:	4605      	mov	r5, r0
10058aaa:	6882      	ldr	r2, [r0, #8]
10058aac:	8881      	ldrh	r1, [r0, #4]
10058aae:	9300      	str	r3, [sp, #0]
10058ab0:	ab02      	add	r3, sp, #8
10058ab2:	4630      	mov	r0, r6
10058ab4:	f7fe fc43 	bl	1005733e <GAT_att_srv_extract_write_packet_data>
10058ab8:	2800      	cmp	r0, #0
10058aba:	d000      	beq.n	10058abe <GAT_srv_attr_direct_value_write+0x1c>
10058abc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058abe:	7828      	ldrb	r0, [r5, #0]
10058ac0:	0781      	lsls	r1, r0, #30
10058ac2:	d403      	bmi.n	10058acc <GAT_srv_attr_direct_value_write+0x2a>
10058ac4:	88a9      	ldrh	r1, [r5, #4]
10058ac6:	aa02      	add	r2, sp, #8
10058ac8:	8011      	strh	r1, [r2, #0]
10058aca:	e001      	b.n	10058ad0 <GAT_srv_attr_direct_value_write+0x2e>
10058acc:	9902      	ldr	r1, [sp, #8]
10058ace:	8069      	strh	r1, [r5, #2]
10058ad0:	07c0      	lsls	r0, r0, #31
10058ad2:	d101      	bne.n	10058ad8 <GAT_srv_attr_direct_value_write+0x36>
10058ad4:	2000      	movs	r0, #0
10058ad6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058ad8:	8837      	ldrh	r7, [r6, #0]
10058ada:	4630      	mov	r0, r6
10058adc:	f000 feed 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10058ae0:	4602      	mov	r2, r0
10058ae2:	a802      	add	r0, sp, #8
10058ae4:	8800      	ldrh	r0, [r0, #0]
10058ae6:	68a9      	ldr	r1, [r5, #8]
10058ae8:	9000      	str	r0, [sp, #0]
10058aea:	9101      	str	r1, [sp, #4]
10058aec:	2002      	movs	r0, #2
10058aee:	4639      	mov	r1, r7
10058af0:	4623      	mov	r3, r4
10058af2:	f00a fcff 	bl	100634f4 <aci_gatt_srv_attribute_modified_event_push_noinline>
10058af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10058af8 <GAT_srv_set_cccd_val>:
10058af8:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10058afa:	4614      	mov	r4, r2
10058afc:	460d      	mov	r5, r1
10058afe:	f7fe f8f9 	bl	10056cf4 <GAT_att_cmn_get_conn_index>
10058b02:	6869      	ldr	r1, [r5, #4]
10058b04:	6989      	ldr	r1, [r1, #24]
10058b06:	888b      	ldrh	r3, [r1, #4]
10058b08:	6889      	ldr	r1, [r1, #8]
10058b0a:	9100      	str	r1, [sp, #0]
10058b0c:	2103      	movs	r1, #3
10058b0e:	400c      	ands	r4, r1
10058b10:	2102      	movs	r1, #2
10058b12:	4622      	mov	r2, r4
10058b14:	f7ff ffaf 	bl	10058a76 <GAT_srv_set_zip_val>
10058b18:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
	...

10058b1c <GAT_srv_is_supported_grouping_type>:
10058b1c:	b570      	push	{r4, r5, r6, lr}
10058b1e:	b08a      	sub	sp, #40	@ 0x28
10058b20:	4604      	mov	r4, r0
10058b22:	ad05      	add	r5, sp, #20
10058b24:	a10d      	add	r1, pc, #52	@ (adr r1, 10058b5c <GAT_srv_is_supported_grouping_type+0x40>)
10058b26:	2614      	movs	r6, #20
10058b28:	4628      	mov	r0, r5
10058b2a:	4632      	mov	r2, r6
10058b2c:	f00f f88b 	bl	10067c46 <__aeabi_memcpy>
10058b30:	4668      	mov	r0, sp
10058b32:	a10f      	add	r1, pc, #60	@ (adr r1, 10058b70 <GAT_srv_is_supported_grouping_type+0x54>)
10058b34:	4632      	mov	r2, r6
10058b36:	f00f f886 	bl	10067c46 <__aeabi_memcpy>
10058b3a:	4620      	mov	r0, r4
10058b3c:	4629      	mov	r1, r5
10058b3e:	f00a f84b 	bl	10062bd8 <UUID_cmp_128bits>
10058b42:	2800      	cmp	r0, #0
10058b44:	d007      	beq.n	10058b56 <GAT_srv_is_supported_grouping_type+0x3a>
10058b46:	4669      	mov	r1, sp
10058b48:	4620      	mov	r0, r4
10058b4a:	f00a f845 	bl	10062bd8 <UUID_cmp_128bits>
10058b4e:	4601      	mov	r1, r0
10058b50:	4240      	negs	r0, r0
10058b52:	4148      	adcs	r0, r1
10058b54:	e000      	b.n	10058b58 <GAT_srv_is_supported_grouping_type+0x3c>
10058b56:	2001      	movs	r0, #1
10058b58:	b00a      	add	sp, #40	@ 0x28
10058b5a:	bd70      	pop	{r4, r5, r6, pc}
10058b5c:	5f9b34fb 	.word	0x5f9b34fb
10058b60:	80000080 	.word	0x80000080
10058b64:	00001000 	.word	0x00001000
10058b68:	00002800 	.word	0x00002800
10058b6c:	00000010 	.word	0x00000010
10058b70:	5f9b34fb 	.word	0x5f9b34fb
10058b74:	80000080 	.word	0x80000080
10058b78:	00001000 	.word	0x00001000
10058b7c:	00002801 	.word	0x00002801
10058b80:	00000010 	.word	0x00000010

10058b84 <GAT_srv_set_change_aware>:
10058b84:	b5e0      	push	{r5, r6, r7, lr}
10058b86:	aa01      	add	r2, sp, #4
10058b88:	21c2      	movs	r1, #194	@ 0xc2
10058b8a:	8011      	strh	r1, [r2, #0]
10058b8c:	8901      	ldrh	r1, [r0, #8]
10058b8e:	9200      	str	r2, [sp, #0]
10058b90:	2001      	movs	r0, #1
10058b92:	2200      	movs	r2, #0
10058b94:	4b01      	ldr	r3, [pc, #4]	@ (10058b9c <__arm_cp.21_0>)
10058b96:	f7fd ff45 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
10058b9a:	bd8c      	pop	{r2, r3, r7, pc}

10058b9c <__arm_cp.21_0>:
10058b9c:	10056ce9 	.word	0x10056ce9

10058ba0 <GAT_srv_check_change_aware>:
10058ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
10058ba2:	b087      	sub	sp, #28
10058ba4:	4605      	mov	r5, r0
10058ba6:	ac02      	add	r4, sp, #8
10058ba8:	4927      	ldr	r1, [pc, #156]	@ (10058c48 <__arm_cp.22_0>)
10058baa:	2214      	movs	r2, #20
10058bac:	4620      	mov	r0, r4
10058bae:	f00f f84a 	bl	10067c46 <__aeabi_memcpy>
10058bb2:	2001      	movs	r0, #1
10058bb4:	4e25      	ldr	r6, [pc, #148]	@ (10058c4c <__arm_cp.22_1>)
10058bb6:	4631      	mov	r1, r6
10058bb8:	4622      	mov	r2, r4
10058bba:	f000 f84d 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
10058bbe:	2700      	movs	r7, #0
10058bc0:	2800      	cmp	r0, #0
10058bc2:	d03c      	beq.n	10058c3e <GAT_srv_check_change_aware+0x9e>
10058bc4:	4601      	mov	r1, r0
10058bc6:	6828      	ldr	r0, [r5, #0]
10058bc8:	8882      	ldrh	r2, [r0, #4]
10058bca:	0652      	lsls	r2, r2, #25
10058bcc:	d537      	bpl.n	10058c3e <GAT_srv_check_change_aware+0x9e>
10058bce:	792a      	ldrb	r2, [r5, #4]
10058bd0:	23fe      	movs	r3, #254	@ 0xfe
10058bd2:	4013      	ands	r3, r2
10058bd4:	2486      	movs	r4, #134	@ 0x86
10058bd6:	2b04      	cmp	r3, #4
10058bd8:	d032      	beq.n	10058c40 <GAT_srv_check_change_aware+0xa0>
10058bda:	8900      	ldrh	r0, [r0, #8]
10058bdc:	2201      	movs	r2, #1
10058bde:	f000 f85b 	bl	10058c98 <GAT_srv_check_client_support_feature>
10058be2:	2881      	cmp	r0, #129	@ 0x81
10058be4:	d02b      	beq.n	10058c3e <GAT_srv_check_change_aware+0x9e>
10058be6:	6828      	ldr	r0, [r5, #0]
10058be8:	8881      	ldrh	r1, [r0, #4]
10058bea:	060a      	lsls	r2, r1, #24
10058bec:	d425      	bmi.n	10058c3a <GAT_srv_check_change_aware+0x9a>
10058bee:	2780      	movs	r7, #128	@ 0x80
10058bf0:	4339      	orrs	r1, r7
10058bf2:	8081      	strh	r1, [r0, #4]
10058bf4:	7928      	ldrb	r0, [r5, #4]
10058bf6:	2802      	cmp	r0, #2
10058bf8:	d122      	bne.n	10058c40 <GAT_srv_check_change_aware+0xa0>
10058bfa:	8928      	ldrh	r0, [r5, #8]
10058bfc:	2801      	cmp	r0, #1
10058bfe:	d11f      	bne.n	10058c40 <GAT_srv_check_change_aware+0xa0>
10058c00:	8968      	ldrh	r0, [r5, #10]
10058c02:	42b0      	cmp	r0, r6
10058c04:	d11c      	bne.n	10058c40 <GAT_srv_check_change_aware+0xa0>
10058c06:	68ea      	ldr	r2, [r5, #12]
10058c08:	7c10      	ldrb	r0, [r2, #16]
10058c0a:	2810      	cmp	r0, #16
10058c0c:	d118      	bne.n	10058c40 <GAT_srv_check_change_aware+0xa0>
10058c0e:	8990      	ldrh	r0, [r2, #12]
10058c10:	490f      	ldr	r1, [pc, #60]	@ (10058c50 <__arm_cp.22_2>)
10058c12:	4288      	cmp	r0, r1
10058c14:	d114      	bne.n	10058c40 <GAT_srv_check_change_aware+0xa0>
10058c16:	2001      	movs	r0, #1
10058c18:	4631      	mov	r1, r6
10058c1a:	f000 f81d 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
10058c1e:	2800      	cmp	r0, #0
10058c20:	d00e      	beq.n	10058c40 <GAT_srv_check_change_aware+0xa0>
10058c22:	a801      	add	r0, sp, #4
10058c24:	8007      	strh	r7, [r0, #0]
10058c26:	6829      	ldr	r1, [r5, #0]
10058c28:	8909      	ldrh	r1, [r1, #8]
10058c2a:	9000      	str	r0, [sp, #0]
10058c2c:	2001      	movs	r0, #1
10058c2e:	2400      	movs	r4, #0
10058c30:	4b08      	ldr	r3, [pc, #32]	@ (10058c54 <__arm_cp.22_3>)
10058c32:	4622      	mov	r2, r4
10058c34:	f7fd fef6 	bl	10056a24 <GAT_att_cmn_for_each_ch_descr>
10058c38:	e002      	b.n	10058c40 <GAT_srv_check_change_aware+0xa0>
10058c3a:	f7ff ffa3 	bl	10058b84 <GAT_srv_set_change_aware>
10058c3e:	463c      	mov	r4, r7
10058c40:	4620      	mov	r0, r4
10058c42:	b007      	add	sp, #28
10058c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10058c46:	46c0      	nop			@ (mov r8, r8)

10058c48 <__arm_cp.22_0>:
10058c48:	100697c4 	.word	0x100697c4

10058c4c <__arm_cp.22_1>:
10058c4c:	0000ffff 	.word	0x0000ffff

10058c50 <__arm_cp.22_2>:
10058c50:	00002b2a 	.word	0x00002b2a

10058c54 <__arm_cp.22_3>:
10058c54:	10056cdd 	.word	0x10056cdd

10058c58 <GAT_srv_find_by_type_attr_p>:
10058c58:	b5f0      	push	{r4, r5, r6, r7, lr}
10058c5a:	b085      	sub	sp, #20
10058c5c:	4614      	mov	r4, r2
10058c5e:	460d      	mov	r5, r1
10058c60:	f00b feca 	bl	100649f8 <GAT_att_db_find_from_handle>
10058c64:	4606      	mov	r6, r0
10058c66:	2000      	movs	r0, #0
10058c68:	2e00      	cmp	r6, #0
10058c6a:	d012      	beq.n	10058c92 <GAT_srv_find_by_type_attr_p+0x3a>
10058c6c:	8871      	ldrh	r1, [r6, #2]
10058c6e:	42a9      	cmp	r1, r5
10058c70:	d80f      	bhi.n	10058c92 <GAT_srv_find_by_type_attr_p+0x3a>
10058c72:	466f      	mov	r7, sp
10058c74:	4630      	mov	r0, r6
10058c76:	4639      	mov	r1, r7
10058c78:	f7ff fc7e 	bl	10058578 <GAT_srv_get_attr_type>
10058c7c:	4620      	mov	r0, r4
10058c7e:	4639      	mov	r1, r7
10058c80:	f009 ff93 	bl	10062baa <UUID_cmp>
10058c84:	2800      	cmp	r0, #0
10058c86:	d003      	beq.n	10058c90 <GAT_srv_find_by_type_attr_p+0x38>
10058c88:	4630      	mov	r0, r6
10058c8a:	f00b ff17 	bl	10064abc <GAT_att_db_get_next>
10058c8e:	e7e9      	b.n	10058c64 <GAT_srv_find_by_type_attr_p+0xc>
10058c90:	4630      	mov	r0, r6
10058c92:	b005      	add	sp, #20
10058c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10058c98 <GAT_srv_check_client_support_feature>:
10058c98:	b570      	push	{r4, r5, r6, lr}
10058c9a:	b086      	sub	sp, #24
10058c9c:	4614      	mov	r4, r2
10058c9e:	460e      	mov	r6, r1
10058ca0:	4605      	mov	r5, r0
10058ca2:	a801      	add	r0, sp, #4
10058ca4:	4910      	ldr	r1, [pc, #64]	@ (10058ce8 <__arm_cp.24_0>)
10058ca6:	2214      	movs	r2, #20
10058ca8:	f00e ffcd 	bl	10067c46 <__aeabi_memcpy>
10058cac:	2e00      	cmp	r6, #0
10058cae:	d107      	bne.n	10058cc0 <GAT_srv_check_client_support_feature+0x28>
10058cb0:	2001      	movs	r0, #1
10058cb2:	490e      	ldr	r1, [pc, #56]	@ (10058cec <__arm_cp.24_1>)
10058cb4:	aa01      	add	r2, sp, #4
10058cb6:	f7ff ffcf 	bl	10058c58 <GAT_srv_find_by_type_attr_p>
10058cba:	4606      	mov	r6, r0
10058cbc:	2800      	cmp	r0, #0
10058cbe:	d010      	beq.n	10058ce2 <GAT_srv_check_client_support_feature+0x4a>
10058cc0:	4628      	mov	r0, r5
10058cc2:	f7fe f817 	bl	10056cf4 <GAT_att_cmn_get_conn_index>
10058cc6:	6871      	ldr	r1, [r6, #4]
10058cc8:	6a09      	ldr	r1, [r1, #32]
10058cca:	688b      	ldr	r3, [r1, #8]
10058ccc:	4908      	ldr	r1, [pc, #32]	@ (10058cf0 <__arm_cp.24_2>)
10058cce:	7ac9      	ldrb	r1, [r1, #11]
10058cd0:	0849      	lsrs	r1, r1, #1
10058cd2:	1c4a      	adds	r2, r1, #1
10058cd4:	2104      	movs	r1, #4
10058cd6:	f7ff febb 	bl	10058a50 <GAT_srv_get_zip_val>
10058cda:	4220      	tst	r0, r4
10058cdc:	d001      	beq.n	10058ce2 <GAT_srv_check_client_support_feature+0x4a>
10058cde:	2000      	movs	r0, #0
10058ce0:	e000      	b.n	10058ce4 <GAT_srv_check_client_support_feature+0x4c>
10058ce2:	2081      	movs	r0, #129	@ 0x81
10058ce4:	b006      	add	sp, #24
10058ce6:	bd70      	pop	{r4, r5, r6, pc}

10058ce8 <__arm_cp.24_0>:
10058ce8:	100697c4 	.word	0x100697c4

10058cec <__arm_cp.24_1>:
10058cec:	0000ffff 	.word	0x0000ffff

10058cf0 <__arm_cp.24_2>:
10058cf0:	20002ae4 	.word	0x20002ae4

10058cf4 <GAT_srv_get_attribute_handle>:
10058cf4:	b580      	push	{r7, lr}
10058cf6:	f00b fea9 	bl	10064a4c <GAT_att_db_find_by_def>
10058cfa:	2800      	cmp	r0, #0
10058cfc:	d001      	beq.n	10058d02 <GAT_srv_get_attribute_handle+0xe>
10058cfe:	8840      	ldrh	r0, [r0, #2]
10058d00:	bd80      	pop	{r7, pc}
10058d02:	2000      	movs	r0, #0
10058d04:	bd80      	pop	{r7, pc}
	...

10058d08 <GAT_srv_get_cccd_attr_p>:
10058d08:	b570      	push	{r4, r5, r6, lr}
10058d0a:	b08a      	sub	sp, #40	@ 0x28
10058d0c:	4605      	mov	r5, r0
10058d0e:	a805      	add	r0, sp, #20
10058d10:	a110      	add	r1, pc, #64	@ (adr r1, 10058d54 <GAT_srv_get_cccd_attr_p+0x4c>)
10058d12:	2214      	movs	r2, #20
10058d14:	f00e ff97 	bl	10067c46 <__aeabi_memcpy>
10058d18:	7828      	ldrb	r0, [r5, #0]
10058d1a:	21fe      	movs	r1, #254	@ 0xfe
10058d1c:	4001      	ands	r1, r0
10058d1e:	2400      	movs	r4, #0
10058d20:	2902      	cmp	r1, #2
10058d22:	d114      	bne.n	10058d4e <GAT_srv_get_cccd_attr_p+0x46>
10058d24:	4628      	mov	r0, r5
10058d26:	f00b fec9 	bl	10064abc <GAT_att_db_get_next>
10058d2a:	4605      	mov	r5, r0
10058d2c:	2800      	cmp	r0, #0
10058d2e:	d00e      	beq.n	10058d4e <GAT_srv_get_cccd_attr_p+0x46>
10058d30:	7828      	ldrb	r0, [r5, #0]
10058d32:	2802      	cmp	r0, #2
10058d34:	d00b      	beq.n	10058d4e <GAT_srv_get_cccd_attr_p+0x46>
10058d36:	466e      	mov	r6, sp
10058d38:	4628      	mov	r0, r5
10058d3a:	4631      	mov	r1, r6
10058d3c:	f7ff fc1c 	bl	10058578 <GAT_srv_get_attr_type>
10058d40:	a805      	add	r0, sp, #20
10058d42:	4631      	mov	r1, r6
10058d44:	f009 ff31 	bl	10062baa <UUID_cmp>
10058d48:	2800      	cmp	r0, #0
10058d4a:	d1eb      	bne.n	10058d24 <GAT_srv_get_cccd_attr_p+0x1c>
10058d4c:	462c      	mov	r4, r5
10058d4e:	4620      	mov	r0, r4
10058d50:	b00a      	add	sp, #40	@ 0x28
10058d52:	bd70      	pop	{r4, r5, r6, pc}
10058d54:	5f9b34fb 	.word	0x5f9b34fb
10058d58:	80000080 	.word	0x80000080
10058d5c:	00001000 	.word	0x00001000
10058d60:	00002902 	.word	0x00002902
10058d64:	00000010 	.word	0x00000010

10058d68 <GAT_srv_get_cccd_val>:
10058d68:	b510      	push	{r4, lr}
10058d6a:	460c      	mov	r4, r1
10058d6c:	f7fd ffc2 	bl	10056cf4 <GAT_att_cmn_get_conn_index>
10058d70:	6861      	ldr	r1, [r4, #4]
10058d72:	6989      	ldr	r1, [r1, #24]
10058d74:	688b      	ldr	r3, [r1, #8]
10058d76:	888a      	ldrh	r2, [r1, #4]
10058d78:	2102      	movs	r1, #2
10058d7a:	f7ff fe69 	bl	10058a50 <GAT_srv_get_zip_val>
10058d7e:	bd10      	pop	{r4, pc}

10058d80 <GAT_srv_aes_cmac_append>:
10058d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10058d82:	b085      	sub	sp, #20
10058d84:	9203      	str	r2, [sp, #12]
10058d86:	460c      	mov	r4, r1
10058d88:	2101      	movs	r1, #1
10058d8a:	0209      	lsls	r1, r1, #8
10058d8c:	1841      	adds	r1, r0, r1
10058d8e:	9104      	str	r1, [sp, #16]
10058d90:	9002      	str	r0, [sp, #8]
10058d92:	30e0      	adds	r0, #224	@ 0xe0
10058d94:	9001      	str	r0, [sp, #4]
10058d96:	0420      	lsls	r0, r4, #16
10058d98:	d023      	beq.n	10058de2 <GAT_srv_aes_cmac_append+0x62>
10058d9a:	9804      	ldr	r0, [sp, #16]
10058d9c:	8800      	ldrh	r0, [r0, #0]
10058d9e:	2810      	cmp	r0, #16
10058da0:	d107      	bne.n	10058db2 <GAT_srv_aes_cmac_append+0x32>
10058da2:	2210      	movs	r2, #16
10058da4:	9802      	ldr	r0, [sp, #8]
10058da6:	9901      	ldr	r1, [sp, #4]
10058da8:	f7f9 fd42 	bl	10052830 <BLEPLAT_AesCMACEncryptAppend>
10058dac:	2000      	movs	r0, #0
10058dae:	9904      	ldr	r1, [sp, #16]
10058db0:	8008      	strh	r0, [r1, #0]
10058db2:	2110      	movs	r1, #16
10058db4:	1a0d      	subs	r5, r1, r0
10058db6:	b2a9      	uxth	r1, r5
10058db8:	b2a2      	uxth	r2, r4
10058dba:	4291      	cmp	r1, r2
10058dbc:	d300      	bcc.n	10058dc0 <GAT_srv_aes_cmac_append+0x40>
10058dbe:	4625      	mov	r5, r4
10058dc0:	b2af      	uxth	r7, r5
10058dc2:	9902      	ldr	r1, [sp, #8]
10058dc4:	1808      	adds	r0, r1, r0
10058dc6:	30e0      	adds	r0, #224	@ 0xe0
10058dc8:	9e03      	ldr	r6, [sp, #12]
10058dca:	4631      	mov	r1, r6
10058dcc:	463a      	mov	r2, r7
10058dce:	f7f9 fcc5 	bl	1005275c <BLEPLAT_MemCpy>
10058dd2:	9904      	ldr	r1, [sp, #16]
10058dd4:	8808      	ldrh	r0, [r1, #0]
10058dd6:	1828      	adds	r0, r5, r0
10058dd8:	8008      	strh	r0, [r1, #0]
10058dda:	1b64      	subs	r4, r4, r5
10058ddc:	19f6      	adds	r6, r6, r7
10058dde:	9603      	str	r6, [sp, #12]
10058de0:	e7d9      	b.n	10058d96 <GAT_srv_aes_cmac_append+0x16>
10058de2:	b005      	add	sp, #20
10058de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10058de8 <GAT_srv_add_service>:
10058de8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058dea:	4604      	mov	r4, r0
10058dec:	f000 f89c 	bl	10058f28 <GAT_srv_db_update_allowed>
10058df0:	250c      	movs	r5, #12
10058df2:	2800      	cmp	r0, #0
10058df4:	d025      	beq.n	10058e42 <GAT_srv_add_service+0x5a>
10058df6:	2612      	movs	r6, #18
10058df8:	2c00      	cmp	r4, #0
10058dfa:	d023      	beq.n	10058e44 <GAT_srv_add_service+0x5c>
10058dfc:	7d20      	ldrb	r0, [r4, #20]
10058dfe:	1e40      	subs	r0, r0, #1
10058e00:	2801      	cmp	r0, #1
10058e02:	d81f      	bhi.n	10058e44 <GAT_srv_add_service+0x5c>
10058e04:	7c20      	ldrb	r0, [r4, #16]
10058e06:	2880      	cmp	r0, #128	@ 0x80
10058e08:	d01e      	beq.n	10058e48 <GAT_srv_add_service+0x60>
10058e0a:	2810      	cmp	r0, #16
10058e0c:	d11a      	bne.n	10058e44 <GAT_srv_add_service+0x5c>
10058e0e:	89a0      	ldrh	r0, [r4, #12]
10058e10:	2101      	movs	r1, #1
10058e12:	4388      	bics	r0, r1
10058e14:	2103      	movs	r1, #3
10058e16:	02c9      	lsls	r1, r1, #11
10058e18:	4288      	cmp	r0, r1
10058e1a:	d115      	bne.n	10058e48 <GAT_srv_add_service+0x60>
10058e1c:	2001      	movs	r0, #1
10058e1e:	f00b fdeb 	bl	100649f8 <GAT_att_db_find_from_handle>
10058e22:	2800      	cmp	r0, #0
10058e24:	d010      	beq.n	10058e48 <GAT_srv_add_service+0x60>
10058e26:	7801      	ldrb	r1, [r0, #0]
10058e28:	2900      	cmp	r1, #0
10058e2a:	d107      	bne.n	10058e3c <GAT_srv_add_service+0x54>
10058e2c:	6841      	ldr	r1, [r0, #4]
10058e2e:	7c0a      	ldrb	r2, [r1, #16]
10058e30:	2a10      	cmp	r2, #16
10058e32:	d103      	bne.n	10058e3c <GAT_srv_add_service+0x54>
10058e34:	8989      	ldrh	r1, [r1, #12]
10058e36:	89a2      	ldrh	r2, [r4, #12]
10058e38:	428a      	cmp	r2, r1
10058e3a:	d002      	beq.n	10058e42 <GAT_srv_add_service+0x5a>
10058e3c:	f00b fe3e 	bl	10064abc <GAT_att_db_get_next>
10058e40:	e7ef      	b.n	10058e22 <GAT_srv_add_service+0x3a>
10058e42:	462e      	mov	r6, r5
10058e44:	4630      	mov	r0, r6
10058e46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10058e48:	2000      	movs	r0, #0
10058e4a:	f00b fecd 	bl	10064be8 <GAT_att_db_find_last_attr_of_type>
10058e4e:	2800      	cmp	r0, #0
10058e50:	d006      	beq.n	10058e60 <GAT_srv_add_service+0x78>
10058e52:	6841      	ldr	r1, [r0, #4]
10058e54:	8ac9      	ldrh	r1, [r1, #22]
10058e56:	2900      	cmp	r1, #0
10058e58:	d004      	beq.n	10058e64 <GAT_srv_add_service+0x7c>
10058e5a:	8840      	ldrh	r0, [r0, #2]
10058e5c:	1840      	adds	r0, r0, r1
10058e5e:	e004      	b.n	10058e6a <GAT_srv_add_service+0x82>
10058e60:	2001      	movs	r0, #1
10058e62:	e002      	b.n	10058e6a <GAT_srv_add_service+0x82>
10058e64:	f00b fe6e 	bl	10064b44 <GAT_att_db_get_last_handle>
10058e68:	1c40      	adds	r0, r0, #1
10058e6a:	b282      	uxth	r2, r0
10058e6c:	2600      	movs	r6, #0
10058e6e:	4630      	mov	r0, r6
10058e70:	4631      	mov	r1, r6
10058e72:	4623      	mov	r3, r4
10058e74:	f00b fd44 	bl	10064900 <GAT_att_db_insert>
10058e78:	2800      	cmp	r0, #0
10058e7a:	d020      	beq.n	10058ebe <GAT_srv_add_service+0xd6>
10058e7c:	43f7      	mvns	r7, r6
10058e7e:	8ae1      	ldrh	r1, [r4, #22]
10058e80:	1e49      	subs	r1, r1, #1
10058e82:	9102      	str	r1, [sp, #8]
10058e84:	9000      	str	r0, [sp, #0]
10058e86:	9401      	str	r4, [sp, #4]
10058e88:	1c7f      	adds	r7, r7, #1
10058e8a:	7e21      	ldrb	r1, [r4, #24]
10058e8c:	428f      	cmp	r7, r1
10058e8e:	d218      	bcs.n	10058ec2 <GAT_srv_add_service+0xda>
10058e90:	8ae1      	ldrh	r1, [r4, #22]
10058e92:	2900      	cmp	r1, #0
10058e94:	d004      	beq.n	10058ea0 <GAT_srv_add_service+0xb8>
10058e96:	9a02      	ldr	r2, [sp, #8]
10058e98:	0411      	lsls	r1, r2, #16
10058e9a:	d03a      	beq.n	10058f12 <GAT_srv_add_service+0x12a>
10058e9c:	1e52      	subs	r2, r2, #1
10058e9e:	9202      	str	r2, [sp, #8]
10058ea0:	1d35      	adds	r5, r6, #4
10058ea2:	1c40      	adds	r0, r0, #1
10058ea4:	9c01      	ldr	r4, [sp, #4]
10058ea6:	69e1      	ldr	r1, [r4, #28]
10058ea8:	598b      	ldr	r3, [r1, r6]
10058eaa:	b282      	uxth	r2, r0
10058eac:	2001      	movs	r0, #1
10058eae:	2100      	movs	r1, #0
10058eb0:	f00b fd26 	bl	10064900 <GAT_att_db_insert>
10058eb4:	2800      	cmp	r0, #0
10058eb6:	462e      	mov	r6, r5
10058eb8:	d1e6      	bne.n	10058e88 <GAT_srv_add_service+0xa0>
10058eba:	2687      	movs	r6, #135	@ 0x87
10058ebc:	e02e      	b.n	10058f1c <GAT_srv_add_service+0x134>
10058ebe:	2687      	movs	r6, #135	@ 0x87
10058ec0:	e7c0      	b.n	10058e44 <GAT_srv_add_service+0x5c>
10058ec2:	4818      	ldr	r0, [pc, #96]	@ (10058f24 <__arm_cp.0_0>)
10058ec4:	6800      	ldr	r0, [r0, #0]
10058ec6:	215c      	movs	r1, #92	@ 0x5c
10058ec8:	5c42      	ldrb	r2, [r0, r1]
10058eca:	2302      	movs	r3, #2
10058ecc:	4313      	orrs	r3, r2
10058ece:	5443      	strb	r3, [r0, r1]
10058ed0:	200a      	movs	r0, #10
10058ed2:	f009 fcd9 	bl	10062888 <tsk_notify_idx>
10058ed6:	f7f8 fe5a 	bl	10051b8e <BLE_STACK_ProcessRequest>
10058eda:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10058edc:	2600      	movs	r6, #0
10058ede:	2800      	cmp	r0, #0
10058ee0:	d0b0      	beq.n	10058e44 <GAT_srv_add_service+0x5c>
10058ee2:	2020      	movs	r0, #32
10058ee4:	5c20      	ldrb	r0, [r4, r0]
10058ee6:	2800      	cmp	r0, #0
10058ee8:	d0ac      	beq.n	10058e44 <GAT_srv_add_service+0x5c>
10058eea:	4621      	mov	r1, r4
10058eec:	3120      	adds	r1, #32
10058eee:	9102      	str	r1, [sp, #8]
10058ef0:	2500      	movs	r5, #0
10058ef2:	462f      	mov	r7, r5
10058ef4:	9501      	str	r5, [sp, #4]
10058ef6:	4285      	cmp	r5, r0
10058ef8:	9900      	ldr	r1, [sp, #0]
10058efa:	d20c      	bcs.n	10058f16 <GAT_srv_add_service+0x12e>
10058efc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
10058efe:	19c0      	adds	r0, r0, r7
10058f00:	f000 f822 	bl	10058f48 <GAT_srv_add_characteristic>
10058f04:	2800      	cmp	r0, #0
10058f06:	d108      	bne.n	10058f1a <GAT_srv_add_service+0x132>
10058f08:	3724      	adds	r7, #36	@ 0x24
10058f0a:	9802      	ldr	r0, [sp, #8]
10058f0c:	7800      	ldrb	r0, [r0, #0]
10058f0e:	1c6d      	adds	r5, r5, #1
10058f10:	e7f1      	b.n	10058ef6 <GAT_srv_add_service+0x10e>
10058f12:	2612      	movs	r6, #18
10058f14:	e002      	b.n	10058f1c <GAT_srv_add_service+0x134>
10058f16:	9e01      	ldr	r6, [sp, #4]
10058f18:	e794      	b.n	10058e44 <GAT_srv_add_service+0x5c>
10058f1a:	4606      	mov	r6, r0
10058f1c:	9800      	ldr	r0, [sp, #0]
10058f1e:	f000 f8a3 	bl	10059068 <GAT_srv_rm_service>
10058f22:	e78f      	b.n	10058e44 <GAT_srv_add_service+0x5c>

10058f24 <__arm_cp.0_0>:
10058f24:	20002a88 	.word	0x20002a88

10058f28 <GAT_srv_db_update_allowed>:
10058f28:	b510      	push	{r4, lr}
10058f2a:	f7fe fac3 	bl	100574b4 <GAT_att_srv_request_user_pending>
10058f2e:	2400      	movs	r4, #0
10058f30:	2800      	cmp	r0, #0
10058f32:	d106      	bne.n	10058f42 <GAT_srv_db_update_allowed+0x1a>
10058f34:	f7fe faac 	bl	10057490 <GAT_att_srv_confirmation_pending>
10058f38:	2800      	cmp	r0, #0
10058f3a:	d102      	bne.n	10058f42 <GAT_srv_db_update_allowed+0x1a>
10058f3c:	f7fe fad2 	bl	100574e4 <GAT_att_srv_flush_user_pending_list>
10058f40:	2401      	movs	r4, #1
10058f42:	4620      	mov	r0, r4
10058f44:	bd10      	pop	{r4, pc}
	...

10058f48 <GAT_srv_add_characteristic>:
10058f48:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10058f4a:	460e      	mov	r6, r1
10058f4c:	4604      	mov	r4, r0
10058f4e:	f7ff ffeb 	bl	10058f28 <GAT_srv_db_update_allowed>
10058f52:	2800      	cmp	r0, #0
10058f54:	d066      	beq.n	10059024 <GAT_srv_add_characteristic+0xdc>
10058f56:	2512      	movs	r5, #18
10058f58:	2c00      	cmp	r4, #0
10058f5a:	d064      	beq.n	10059026 <GAT_srv_add_characteristic+0xde>
10058f5c:	7d20      	ldrb	r0, [r4, #20]
10058f5e:	2880      	cmp	r0, #128	@ 0x80
10058f60:	d013      	beq.n	10058f8a <GAT_srv_add_characteristic+0x42>
10058f62:	2810      	cmp	r0, #16
10058f64:	d15f      	bne.n	10059026 <GAT_srv_add_characteristic+0xde>
10058f66:	8a20      	ldrh	r0, [r4, #16]
10058f68:	493c      	ldr	r1, [pc, #240]	@ (1005905c <__arm_cp.2_0>)
10058f6a:	4288      	cmp	r0, r1
10058f6c:	d10d      	bne.n	10058f8a <GAT_srv_add_characteristic+0x42>
10058f6e:	6a20      	ldr	r0, [r4, #32]
10058f70:	2800      	cmp	r0, #0
10058f72:	d058      	beq.n	10059026 <GAT_srv_add_characteristic+0xde>
10058f74:	8882      	ldrh	r2, [r0, #4]
10058f76:	493a      	ldr	r1, [pc, #232]	@ (10059060 <__arm_cp.2_1>)
10058f78:	7ac9      	ldrb	r1, [r1, #11]
10058f7a:	0849      	lsrs	r1, r1, #1
10058f7c:	1c49      	adds	r1, r1, #1
10058f7e:	428a      	cmp	r2, r1
10058f80:	d351      	bcc.n	10059026 <GAT_srv_add_characteristic+0xde>
10058f82:	6880      	ldr	r0, [r0, #8]
10058f84:	2100      	movs	r1, #0
10058f86:	f7f9 fbf9 	bl	1005277c <BLEPLAT_MemSet>
10058f8a:	78a0      	ldrb	r0, [r4, #2]
10058f8c:	2124      	movs	r1, #36	@ 0x24
10058f8e:	4208      	tst	r0, r1
10058f90:	d003      	beq.n	10058f9a <GAT_srv_add_characteristic+0x52>
10058f92:	7860      	ldrb	r0, [r4, #1]
10058f94:	1fc0      	subs	r0, r0, #7
10058f96:	2809      	cmp	r0, #9
10058f98:	d845      	bhi.n	10059026 <GAT_srv_add_characteristic+0xde>
10058f9a:	4630      	mov	r0, r6
10058f9c:	f00b fd04 	bl	100649a8 <GAT_att_db_find_by_handle>
10058fa0:	2800      	cmp	r0, #0
10058fa2:	d040      	beq.n	10059026 <GAT_srv_add_characteristic+0xde>
10058fa4:	4606      	mov	r6, r0
10058fa6:	7800      	ldrb	r0, [r0, #0]
10058fa8:	2800      	cmp	r0, #0
10058faa:	d13c      	bne.n	10059026 <GAT_srv_add_characteristic+0xde>
10058fac:	7e20      	ldrb	r0, [r4, #24]
10058fae:	1c81      	adds	r1, r0, #2
10058fb0:	4630      	mov	r0, r6
10058fb2:	f000 f883 	bl	100590bc <GAT_srv_check_group_size>
10058fb6:	4605      	mov	r5, r0
10058fb8:	2800      	cmp	r0, #0
10058fba:	d134      	bne.n	10059026 <GAT_srv_add_characteristic+0xde>
10058fbc:	4630      	mov	r0, r6
10058fbe:	f7ff fb03 	bl	100585c8 <GAT_srv_get_att_group_end_handle>
10058fc2:	4605      	mov	r5, r0
10058fc4:	f00b fcf0 	bl	100649a8 <GAT_att_db_find_by_handle>
10058fc8:	4601      	mov	r1, r0
10058fca:	1c68      	adds	r0, r5, #1
10058fcc:	b286      	uxth	r6, r0
10058fce:	2702      	movs	r7, #2
10058fd0:	4638      	mov	r0, r7
10058fd2:	4632      	mov	r2, r6
10058fd4:	4623      	mov	r3, r4
10058fd6:	f00b fc93 	bl	10064900 <GAT_att_db_insert>
10058fda:	42b0      	cmp	r0, r6
10058fdc:	d125      	bne.n	1005902a <GAT_srv_add_characteristic+0xe2>
10058fde:	4630      	mov	r0, r6
10058fe0:	f00b fce2 	bl	100649a8 <GAT_att_db_find_by_handle>
10058fe4:	4601      	mov	r1, r0
10058fe6:	1ca8      	adds	r0, r5, #2
10058fe8:	b282      	uxth	r2, r0
10058fea:	2003      	movs	r0, #3
10058fec:	4623      	mov	r3, r4
10058fee:	f00b fc87 	bl	10064900 <GAT_att_db_insert>
10058ff2:	2800      	cmp	r0, #0
10058ff4:	d029      	beq.n	1005904a <GAT_srv_add_characteristic+0x102>
10058ff6:	9701      	str	r7, [sp, #4]
10058ff8:	9602      	str	r6, [sp, #8]
10058ffa:	69e0      	ldr	r0, [r4, #28]
10058ffc:	2800      	cmp	r0, #0
10058ffe:	d016      	beq.n	1005902e <GAT_srv_add_characteristic+0xe6>
10059000:	7e20      	ldrb	r0, [r4, #24]
10059002:	2800      	cmp	r0, #0
10059004:	d013      	beq.n	1005902e <GAT_srv_add_characteristic+0xe6>
10059006:	2600      	movs	r6, #0
10059008:	4637      	mov	r7, r6
1005900a:	4287      	cmp	r7, r0
1005900c:	d20f      	bcs.n	1005902e <GAT_srv_add_characteristic+0xe6>
1005900e:	69e0      	ldr	r0, [r4, #28]
10059010:	1980      	adds	r0, r0, r6
10059012:	9902      	ldr	r1, [sp, #8]
10059014:	f000 f86c 	bl	100590f0 <GAT_srv_add_char_descriptor>
10059018:	2800      	cmp	r0, #0
1005901a:	d118      	bne.n	1005904e <GAT_srv_add_characteristic+0x106>
1005901c:	361c      	adds	r6, #28
1005901e:	7e20      	ldrb	r0, [r4, #24]
10059020:	1c7f      	adds	r7, r7, #1
10059022:	e7f2      	b.n	1005900a <GAT_srv_add_characteristic+0xc2>
10059024:	250c      	movs	r5, #12
10059026:	4628      	mov	r0, r5
10059028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005902a:	2587      	movs	r5, #135	@ 0x87
1005902c:	e7fb      	b.n	10059026 <GAT_srv_add_characteristic+0xde>
1005902e:	480d      	ldr	r0, [pc, #52]	@ (10059064 <__arm_cp.2_2>)
10059030:	6800      	ldr	r0, [r0, #0]
10059032:	215c      	movs	r1, #92	@ 0x5c
10059034:	5c42      	ldrb	r2, [r0, r1]
10059036:	9b01      	ldr	r3, [sp, #4]
10059038:	431a      	orrs	r2, r3
1005903a:	5442      	strb	r2, [r0, r1]
1005903c:	200a      	movs	r0, #10
1005903e:	f009 fc23 	bl	10062888 <tsk_notify_idx>
10059042:	f7f8 fda4 	bl	10051b8e <BLE_STACK_ProcessRequest>
10059046:	2500      	movs	r5, #0
10059048:	e7ed      	b.n	10059026 <GAT_srv_add_characteristic+0xde>
1005904a:	2587      	movs	r5, #135	@ 0x87
1005904c:	e001      	b.n	10059052 <GAT_srv_add_characteristic+0x10a>
1005904e:	4605      	mov	r5, r0
10059050:	9e02      	ldr	r6, [sp, #8]
10059052:	4630      	mov	r0, r6
10059054:	f000 f8d4 	bl	10059200 <GAT_srv_rm_characteristic>
10059058:	e7e5      	b.n	10059026 <GAT_srv_add_characteristic+0xde>
1005905a:	46c0      	nop			@ (mov r8, r8)

1005905c <__arm_cp.2_0>:
1005905c:	00002b29 	.word	0x00002b29

10059060 <__arm_cp.2_1>:
10059060:	20002ae4 	.word	0x20002ae4

10059064 <__arm_cp.2_2>:
10059064:	20002a88 	.word	0x20002a88

10059068 <GAT_srv_rm_service>:
10059068:	b510      	push	{r4, lr}
1005906a:	4604      	mov	r4, r0
1005906c:	f7ff ff5c 	bl	10058f28 <GAT_srv_db_update_allowed>
10059070:	2800      	cmp	r0, #0
10059072:	d00a      	beq.n	1005908a <GAT_srv_rm_service+0x22>
10059074:	4620      	mov	r0, r4
10059076:	f00b fc97 	bl	100649a8 <GAT_att_db_find_by_handle>
1005907a:	4601      	mov	r1, r0
1005907c:	2012      	movs	r0, #18
1005907e:	2900      	cmp	r1, #0
10059080:	d002      	beq.n	10059088 <GAT_srv_rm_service+0x20>
10059082:	780a      	ldrb	r2, [r1, #0]
10059084:	2a00      	cmp	r2, #0
10059086:	d002      	beq.n	1005908e <GAT_srv_rm_service+0x26>
10059088:	bd10      	pop	{r4, pc}
1005908a:	200c      	movs	r0, #12
1005908c:	bd10      	pop	{r4, pc}
1005908e:	4608      	mov	r0, r1
10059090:	f00b fd28 	bl	10064ae4 <GAT_att_db_get_last_group_handle>
10059094:	4601      	mov	r1, r0
10059096:	4620      	mov	r0, r4
10059098:	f00b fd64 	bl	10064b64 <GAT_att_db_rm_att_range>
1005909c:	4806      	ldr	r0, [pc, #24]	@ (100590b8 <__arm_cp.3_0>)
1005909e:	6800      	ldr	r0, [r0, #0]
100590a0:	215c      	movs	r1, #92	@ 0x5c
100590a2:	5c42      	ldrb	r2, [r0, r1]
100590a4:	2302      	movs	r3, #2
100590a6:	4313      	orrs	r3, r2
100590a8:	5443      	strb	r3, [r0, r1]
100590aa:	200a      	movs	r0, #10
100590ac:	f009 fbec 	bl	10062888 <tsk_notify_idx>
100590b0:	f7f8 fd6d 	bl	10051b8e <BLE_STACK_ProcessRequest>
100590b4:	2000      	movs	r0, #0
100590b6:	bd10      	pop	{r4, pc}

100590b8 <__arm_cp.3_0>:
100590b8:	20002a88 	.word	0x20002a88

100590bc <GAT_srv_check_group_size>:
100590bc:	b5b0      	push	{r4, r5, r7, lr}
100590be:	460d      	mov	r5, r1
100590c0:	4604      	mov	r4, r0
100590c2:	f7ff fa81 	bl	100585c8 <GAT_srv_get_att_group_end_handle>
100590c6:	6861      	ldr	r1, [r4, #4]
100590c8:	8ac9      	ldrh	r1, [r1, #22]
100590ca:	2900      	cmp	r1, #0
100590cc:	d008      	beq.n	100590e0 <GAT_srv_check_group_size+0x24>
100590ce:	43c0      	mvns	r0, r0
100590d0:	1808      	adds	r0, r1, r0
100590d2:	8861      	ldrh	r1, [r4, #2]
100590d4:	1840      	adds	r0, r0, r1
100590d6:	b280      	uxth	r0, r0
100590d8:	42a8      	cmp	r0, r5
100590da:	d306      	bcc.n	100590ea <GAT_srv_check_group_size+0x2e>
100590dc:	2000      	movs	r0, #0
100590de:	bdb0      	pop	{r4, r5, r7, pc}
100590e0:	2000      	movs	r0, #0
100590e2:	f00b fd81 	bl	10064be8 <GAT_att_db_find_last_attr_of_type>
100590e6:	42a0      	cmp	r0, r4
100590e8:	d0f8      	beq.n	100590dc <GAT_srv_check_group_size+0x20>
100590ea:	200c      	movs	r0, #12
100590ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

100590f0 <GAT_srv_add_char_descriptor>:
100590f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100590f2:	460e      	mov	r6, r1
100590f4:	4604      	mov	r4, r0
100590f6:	f7ff ff17 	bl	10058f28 <GAT_srv_db_update_allowed>
100590fa:	2800      	cmp	r0, #0
100590fc:	d075      	beq.n	100591ea <GAT_srv_add_char_descriptor+0xfa>
100590fe:	2512      	movs	r5, #18
10059100:	2c00      	cmp	r4, #0
10059102:	d073      	beq.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
10059104:	7d20      	ldrb	r0, [r4, #20]
10059106:	2880      	cmp	r0, #128	@ 0x80
10059108:	d001      	beq.n	1005910e <GAT_srv_add_char_descriptor+0x1e>
1005910a:	2810      	cmp	r0, #16
1005910c:	d16e      	bne.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
1005910e:	2810      	cmp	r0, #16
10059110:	d108      	bne.n	10059124 <GAT_srv_add_char_descriptor+0x34>
10059112:	8a21      	ldrh	r1, [r4, #16]
10059114:	2229      	movs	r2, #41	@ 0x29
10059116:	0212      	lsls	r2, r2, #8
10059118:	1c92      	adds	r2, r2, #2
1005911a:	4291      	cmp	r1, r2
1005911c:	d102      	bne.n	10059124 <GAT_srv_add_char_descriptor+0x34>
1005911e:	69a1      	ldr	r1, [r4, #24]
10059120:	2900      	cmp	r1, #0
10059122:	d063      	beq.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
10059124:	78a1      	ldrb	r1, [r4, #2]
10059126:	2224      	movs	r2, #36	@ 0x24
10059128:	4211      	tst	r1, r2
1005912a:	d003      	beq.n	10059134 <GAT_srv_add_char_descriptor+0x44>
1005912c:	7862      	ldrb	r2, [r4, #1]
1005912e:	1fd2      	subs	r2, r2, #7
10059130:	2a09      	cmp	r2, #9
10059132:	d85b      	bhi.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
10059134:	2810      	cmp	r0, #16
10059136:	d115      	bne.n	10059164 <GAT_srv_add_char_descriptor+0x74>
10059138:	8a20      	ldrh	r0, [r4, #16]
1005913a:	4a2f      	ldr	r2, [pc, #188]	@ (100591f8 <__arm_cp.7_0>)
1005913c:	1882      	adds	r2, r0, r2
1005913e:	2a05      	cmp	r2, #5
10059140:	d810      	bhi.n	10059164 <GAT_srv_add_char_descriptor+0x74>
10059142:	2301      	movs	r3, #1
10059144:	4093      	lsls	r3, r2
10059146:	2231      	movs	r2, #49	@ 0x31
10059148:	4213      	tst	r3, r2
1005914a:	d00b      	beq.n	10059164 <GAT_srv_add_char_descriptor+0x74>
1005914c:	7822      	ldrb	r2, [r4, #0]
1005914e:	2a01      	cmp	r2, #1
10059150:	d14c      	bne.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
10059152:	2900      	cmp	r1, #0
10059154:	d14a      	bne.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
10059156:	2129      	movs	r1, #41	@ 0x29
10059158:	0209      	lsls	r1, r1, #8
1005915a:	4288      	cmp	r0, r1
1005915c:	d102      	bne.n	10059164 <GAT_srv_add_char_descriptor+0x74>
1005915e:	69a0      	ldr	r0, [r4, #24]
10059160:	2800      	cmp	r0, #0
10059162:	d043      	beq.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
10059164:	4630      	mov	r0, r6
10059166:	f00b fc1f 	bl	100649a8 <GAT_att_db_find_by_handle>
1005916a:	2800      	cmp	r0, #0
1005916c:	d03e      	beq.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
1005916e:	4607      	mov	r7, r0
10059170:	7800      	ldrb	r0, [r0, #0]
10059172:	2802      	cmp	r0, #2
10059174:	d13a      	bne.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
10059176:	2500      	movs	r5, #0
10059178:	4628      	mov	r0, r5
1005917a:	4631      	mov	r1, r6
1005917c:	f00b fd4a 	bl	10064c14 <GAT_att_db_reverse_find_attr_of_type>
10059180:	2800      	cmp	r0, #0
10059182:	d035      	beq.n	100591f0 <GAT_srv_add_char_descriptor+0x100>
10059184:	462e      	mov	r6, r5
10059186:	2101      	movs	r1, #1
10059188:	f7ff ff98 	bl	100590bc <GAT_srv_check_group_size>
1005918c:	4605      	mov	r5, r0
1005918e:	2800      	cmp	r0, #0
10059190:	d12c      	bne.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
10059192:	4638      	mov	r0, r7
10059194:	f7ff fa18 	bl	100585c8 <GAT_srv_get_att_group_end_handle>
10059198:	4605      	mov	r5, r0
1005919a:	f00b fc05 	bl	100649a8 <GAT_att_db_find_by_handle>
1005919e:	4601      	mov	r1, r0
100591a0:	1c6d      	adds	r5, r5, #1
100591a2:	b2aa      	uxth	r2, r5
100591a4:	2004      	movs	r0, #4
100591a6:	4623      	mov	r3, r4
100591a8:	f00b fbaa 	bl	10064900 <GAT_att_db_insert>
100591ac:	4285      	cmp	r5, r0
100591ae:	d121      	bne.n	100591f4 <GAT_srv_add_char_descriptor+0x104>
100591b0:	7d20      	ldrb	r0, [r4, #20]
100591b2:	2810      	cmp	r0, #16
100591b4:	d10b      	bne.n	100591ce <GAT_srv_add_char_descriptor+0xde>
100591b6:	8a20      	ldrh	r0, [r4, #16]
100591b8:	2129      	movs	r1, #41	@ 0x29
100591ba:	0209      	lsls	r1, r1, #8
100591bc:	1c89      	adds	r1, r1, #2
100591be:	4288      	cmp	r0, r1
100591c0:	d105      	bne.n	100591ce <GAT_srv_add_char_descriptor+0xde>
100591c2:	69a0      	ldr	r0, [r4, #24]
100591c4:	8882      	ldrh	r2, [r0, #4]
100591c6:	6880      	ldr	r0, [r0, #8]
100591c8:	2100      	movs	r1, #0
100591ca:	f7f9 fad7 	bl	1005277c <BLEPLAT_MemSet>
100591ce:	480b      	ldr	r0, [pc, #44]	@ (100591fc <__arm_cp.7_1>)
100591d0:	6800      	ldr	r0, [r0, #0]
100591d2:	215c      	movs	r1, #92	@ 0x5c
100591d4:	5c42      	ldrb	r2, [r0, r1]
100591d6:	2302      	movs	r3, #2
100591d8:	4313      	orrs	r3, r2
100591da:	5443      	strb	r3, [r0, r1]
100591dc:	200a      	movs	r0, #10
100591de:	f009 fb53 	bl	10062888 <tsk_notify_idx>
100591e2:	f7f8 fcd4 	bl	10051b8e <BLE_STACK_ProcessRequest>
100591e6:	4635      	mov	r5, r6
100591e8:	e000      	b.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
100591ea:	250c      	movs	r5, #12
100591ec:	4628      	mov	r0, r5
100591ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100591f0:	2586      	movs	r5, #134	@ 0x86
100591f2:	e7fb      	b.n	100591ec <GAT_srv_add_char_descriptor+0xfc>
100591f4:	2587      	movs	r5, #135	@ 0x87
100591f6:	e7f9      	b.n	100591ec <GAT_srv_add_char_descriptor+0xfc>

100591f8 <__arm_cp.7_0>:
100591f8:	ffffd700 	.word	0xffffd700

100591fc <__arm_cp.7_1>:
100591fc:	20002a88 	.word	0x20002a88

10059200 <GAT_srv_rm_characteristic>:
10059200:	b510      	push	{r4, lr}
10059202:	4604      	mov	r4, r0
10059204:	f7ff fe90 	bl	10058f28 <GAT_srv_db_update_allowed>
10059208:	2800      	cmp	r0, #0
1005920a:	d01e      	beq.n	1005924a <GAT_srv_rm_characteristic+0x4a>
1005920c:	4620      	mov	r0, r4
1005920e:	f00b fbcb 	bl	100649a8 <GAT_att_db_find_by_handle>
10059212:	4601      	mov	r1, r0
10059214:	2012      	movs	r0, #18
10059216:	2900      	cmp	r1, #0
10059218:	d016      	beq.n	10059248 <GAT_srv_rm_characteristic+0x48>
1005921a:	780a      	ldrb	r2, [r1, #0]
1005921c:	2a02      	cmp	r2, #2
1005921e:	d113      	bne.n	10059248 <GAT_srv_rm_characteristic+0x48>
10059220:	4608      	mov	r0, r1
10059222:	f00b fc5f 	bl	10064ae4 <GAT_att_db_get_last_group_handle>
10059226:	4601      	mov	r1, r0
10059228:	4620      	mov	r0, r4
1005922a:	f00b fc9b 	bl	10064b64 <GAT_att_db_rm_att_range>
1005922e:	4808      	ldr	r0, [pc, #32]	@ (10059250 <__arm_cp.8_0>)
10059230:	6800      	ldr	r0, [r0, #0]
10059232:	215c      	movs	r1, #92	@ 0x5c
10059234:	5c42      	ldrb	r2, [r0, r1]
10059236:	2302      	movs	r3, #2
10059238:	4313      	orrs	r3, r2
1005923a:	5443      	strb	r3, [r0, r1]
1005923c:	200a      	movs	r0, #10
1005923e:	f009 fb23 	bl	10062888 <tsk_notify_idx>
10059242:	f7f8 fca4 	bl	10051b8e <BLE_STACK_ProcessRequest>
10059246:	2000      	movs	r0, #0
10059248:	bd10      	pop	{r4, pc}
1005924a:	200c      	movs	r0, #12
1005924c:	bd10      	pop	{r4, pc}
1005924e:	46c0      	nop			@ (mov r8, r8)

10059250 <__arm_cp.8_0>:
10059250:	20002a88 	.word	0x20002a88

10059254 <GAT_srv_resp>:
10059254:	b51c      	push	{r2, r3, r4, lr}
10059256:	9c05      	ldr	r4, [sp, #20]
10059258:	9401      	str	r4, [sp, #4]
1005925a:	9c04      	ldr	r4, [sp, #16]
1005925c:	9400      	str	r4, [sp, #0]
1005925e:	f7fe f893 	bl	10057388 <GAT_att_srv_resp>
10059262:	bd1c      	pop	{r2, r3, r4, pc}

10059264 <GAT_srv_get_service_handle>:
10059264:	b580      	push	{r7, lr}
10059266:	4603      	mov	r3, r0
10059268:	2001      	movs	r0, #1
1005926a:	4902      	ldr	r1, [pc, #8]	@ (10059274 <__arm_cp.14_0>)
1005926c:	2200      	movs	r2, #0
1005926e:	f7ff fd41 	bl	10058cf4 <GAT_srv_get_attribute_handle>
10059272:	bd80      	pop	{r7, pc}

10059274 <__arm_cp.14_0>:
10059274:	0000ffff 	.word	0x0000ffff

10059278 <GAT_srv_get_char_decl_handle>:
10059278:	b580      	push	{r7, lr}
1005927a:	4603      	mov	r3, r0
1005927c:	2001      	movs	r0, #1
1005927e:	4902      	ldr	r1, [pc, #8]	@ (10059288 <__arm_cp.16_0>)
10059280:	2202      	movs	r2, #2
10059282:	f7ff fd37 	bl	10058cf4 <GAT_srv_get_attribute_handle>
10059286:	bd80      	pop	{r7, pc}

10059288 <__arm_cp.16_0>:
10059288:	0000ffff 	.word	0x0000ffff

1005928c <hci_rx_acl_data>:
1005928c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005928e:	b085      	sub	sp, #20
10059290:	4604      	mov	r4, r0
10059292:	7887      	ldrb	r7, [r0, #2]
10059294:	1e78      	subs	r0, r7, #1
10059296:	2103      	movs	r1, #3
10059298:	9104      	str	r1, [sp, #16]
1005929a:	4308      	orrs	r0, r1
1005929c:	3009      	adds	r0, #9
1005929e:	0880      	lsrs	r0, r0, #2
100592a0:	b283      	uxth	r3, r0
100592a2:	7a20      	ldrb	r0, [r4, #8]
100592a4:	9003      	str	r0, [sp, #12]
100592a6:	8820      	ldrh	r0, [r4, #0]
100592a8:	9002      	str	r0, [sp, #8]
100592aa:	4811      	ldr	r0, [pc, #68]	@ (100592f0 <__arm_cp.2_0>)
100592ac:	6800      	ldr	r0, [r0, #0]
100592ae:	6980      	ldr	r0, [r0, #24]
100592b0:	2502      	movs	r5, #2
100592b2:	223e      	movs	r2, #62	@ 0x3e
100592b4:	4629      	mov	r1, r5
100592b6:	f7fb ff9d 	bl	100551f4 <aci_event_fifo_push_header>
100592ba:	2800      	cmp	r0, #0
100592bc:	d014      	beq.n	100592e8 <hci_rx_acl_data+0x5c>
100592be:	4606      	mov	r6, r0
100592c0:	9700      	str	r7, [sp, #0]
100592c2:	9401      	str	r4, [sp, #4]
100592c4:	9804      	ldr	r0, [sp, #16]
100592c6:	9a03      	ldr	r2, [sp, #12]
100592c8:	4002      	ands	r2, r0
100592ca:	1d30      	adds	r0, r6, #4
100592cc:	2700      	movs	r7, #0
100592ce:	9902      	ldr	r1, [sp, #8]
100592d0:	463b      	mov	r3, r7
100592d2:	f7fc fcf6 	bl	10055cc2 <hci_rx_acl_data_event_copy>
100592d6:	7135      	strb	r5, [r6, #4]
100592d8:	4628      	mov	r0, r5
100592da:	4631      	mov	r1, r6
100592dc:	f7fc f827 	bl	1005532e <aci_event_fifo_push>
100592e0:	4620      	mov	r0, r4
100592e2:	f7fb fdd3 	bl	10054e8c <ACL_pkt_release>
100592e6:	e000      	b.n	100592ea <hci_rx_acl_data+0x5e>
100592e8:	2707      	movs	r7, #7
100592ea:	4638      	mov	r0, r7
100592ec:	b005      	add	sp, #20
100592ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

100592f0 <__arm_cp.2_0>:
100592f0:	20002a80 	.word	0x20002a80

100592f4 <hci_tx_acl_data_done>:
100592f4:	b5b0      	push	{r4, r5, r7, lr}
100592f6:	4604      	mov	r4, r0
100592f8:	8801      	ldrh	r1, [r0, #0]
100592fa:	2002      	movs	r0, #2
100592fc:	f00a fe38 	bl	10063f70 <hci_number_of_completed_packets_event_push_noinline>
10059300:	4605      	mov	r5, r0
10059302:	2800      	cmp	r0, #0
10059304:	d102      	bne.n	1005930c <hci_tx_acl_data_done+0x18>
10059306:	4620      	mov	r0, r4
10059308:	f7fb fdc0 	bl	10054e8c <ACL_pkt_release>
1005930c:	4628      	mov	r0, r5
1005930e:	bdb0      	pop	{r4, r5, r7, pc}

10059310 <hci_le_set_advertising_parameters>:
10059310:	b5f0      	push	{r4, r5, r6, r7, lr}
10059312:	b089      	sub	sp, #36	@ 0x24
10059314:	461d      	mov	r5, r3
10059316:	4616      	mov	r6, r2
10059318:	460f      	mov	r7, r1
1005931a:	9004      	str	r0, [sp, #16]
1005931c:	2002      	movs	r0, #2
1005931e:	2401      	movs	r4, #1
10059320:	4621      	mov	r1, r4
10059322:	f000 f8d9 	bl	100594d8 <hci_get_set_legacy_ext_flag>
10059326:	2800      	cmp	r0, #0
10059328:	d150      	bne.n	100593cc <hci_le_set_advertising_parameters+0xbc>
1005932a:	9703      	str	r7, [sp, #12]
1005932c:	2012      	movs	r0, #18
1005932e:	2e04      	cmp	r6, #4
10059330:	d84c      	bhi.n	100593cc <hci_le_set_advertising_parameters+0xbc>
10059332:	9002      	str	r0, [sp, #8]
10059334:	f7f5 fcb0 	bl	1004ec98 <conn_supp_csr_ucfg>
10059338:	2e01      	cmp	r6, #1
1005933a:	d803      	bhi.n	10059344 <hci_le_set_advertising_parameters+0x34>
1005933c:	2800      	cmp	r0, #0
1005933e:	d101      	bne.n	10059344 <hci_le_set_advertising_parameters+0x34>
10059340:	2011      	movs	r0, #17
10059342:	e043      	b.n	100593cc <hci_le_set_advertising_parameters+0xbc>
10059344:	9811      	ldr	r0, [sp, #68]	@ 0x44
10059346:	9000      	str	r0, [sp, #0]
10059348:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005934a:	9001      	str	r0, [sp, #4]
1005934c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005934e:	980e      	ldr	r0, [sp, #56]	@ 0x38
10059350:	af05      	add	r7, sp, #20
10059352:	7238      	strb	r0, [r7, #8]
10059354:	71fd      	strb	r5, [r7, #7]
10059356:	713e      	strb	r6, [r7, #4]
10059358:	9803      	ldr	r0, [sp, #12]
1005935a:	8078      	strh	r0, [r7, #2]
1005935c:	9804      	ldr	r0, [sp, #16]
1005935e:	8038      	strh	r0, [r7, #0]
10059360:	4638      	mov	r0, r7
10059362:	3009      	adds	r0, #9
10059364:	2206      	movs	r2, #6
10059366:	f7f9 f9f9 	bl	1005275c <BLEPLAT_MemCpy>
1005936a:	9900      	ldr	r1, [sp, #0]
1005936c:	71b9      	strb	r1, [r7, #6]
1005936e:	9801      	ldr	r0, [sp, #4]
10059370:	7178      	strb	r0, [r7, #5]
10059372:	7938      	ldrb	r0, [r7, #4]
10059374:	2804      	cmp	r0, #4
10059376:	d001      	beq.n	1005937c <hci_le_set_advertising_parameters+0x6c>
10059378:	2801      	cmp	r0, #1
1005937a:	d104      	bne.n	10059386 <hci_le_set_advertising_parameters+0x76>
1005937c:	a905      	add	r1, sp, #20
1005937e:	7a09      	ldrb	r1, [r1, #8]
10059380:	2902      	cmp	r1, #2
10059382:	d302      	bcc.n	1005938a <hci_le_set_advertising_parameters+0x7a>
10059384:	e021      	b.n	100593ca <hci_le_set_advertising_parameters+0xba>
10059386:	2903      	cmp	r1, #3
10059388:	d81f      	bhi.n	100593ca <hci_le_set_advertising_parameters+0xba>
1005938a:	2801      	cmp	r0, #1
1005938c:	d10e      	bne.n	100593ac <hci_le_set_advertising_parameters+0x9c>
1005938e:	f000 f966 	bl	1005965e <hci_le_check_own_address_type_max_value_ucfg_weak>
10059392:	a905      	add	r1, sp, #20
10059394:	79c9      	ldrb	r1, [r1, #7]
10059396:	4281      	cmp	r1, r0
10059398:	d817      	bhi.n	100593ca <hci_le_set_advertising_parameters+0xba>
1005939a:	a805      	add	r0, sp, #20
1005939c:	7940      	ldrb	r0, [r0, #5]
1005939e:	0740      	lsls	r0, r0, #29
100593a0:	9802      	ldr	r0, [sp, #8]
100593a2:	d013      	beq.n	100593cc <hci_le_set_advertising_parameters+0xbc>
100593a4:	a805      	add	r0, sp, #20
100593a6:	f005 fde1 	bl	1005ef6c <LL_LE_Set_Advertising_Parameters>
100593aa:	e00f      	b.n	100593cc <hci_le_set_advertising_parameters+0xbc>
100593ac:	a805      	add	r0, sp, #20
100593ae:	8800      	ldrh	r0, [r0, #0]
100593b0:	2820      	cmp	r0, #32
100593b2:	d30a      	bcc.n	100593ca <hci_le_set_advertising_parameters+0xba>
100593b4:	03a1      	lsls	r1, r4, #14
100593b6:	4288      	cmp	r0, r1
100593b8:	d807      	bhi.n	100593ca <hci_le_set_advertising_parameters+0xba>
100593ba:	aa05      	add	r2, sp, #20
100593bc:	8852      	ldrh	r2, [r2, #2]
100593be:	2a20      	cmp	r2, #32
100593c0:	d303      	bcc.n	100593ca <hci_le_set_advertising_parameters+0xba>
100593c2:	428a      	cmp	r2, r1
100593c4:	d801      	bhi.n	100593ca <hci_le_set_advertising_parameters+0xba>
100593c6:	4290      	cmp	r0, r2
100593c8:	d9e1      	bls.n	1005938e <hci_le_set_advertising_parameters+0x7e>
100593ca:	9802      	ldr	r0, [sp, #8]
100593cc:	b009      	add	sp, #36	@ 0x24
100593ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

100593d0 <hci_le_set_advertising_enable>:
100593d0:	b510      	push	{r4, lr}
100593d2:	4604      	mov	r4, r0
100593d4:	2002      	movs	r0, #2
100593d6:	2101      	movs	r1, #1
100593d8:	f000 f87e 	bl	100594d8 <hci_get_set_legacy_ext_flag>
100593dc:	2800      	cmp	r0, #0
100593de:	d000      	beq.n	100593e2 <hci_le_set_advertising_enable+0x12>
100593e0:	bd10      	pop	{r4, pc}
100593e2:	2c01      	cmp	r4, #1
100593e4:	d803      	bhi.n	100593ee <hci_le_set_advertising_enable+0x1e>
100593e6:	4620      	mov	r0, r4
100593e8:	f005 fe44 	bl	1005f074 <LL_LE_Set_Advertise_Enable>
100593ec:	bd10      	pop	{r4, pc}
100593ee:	2012      	movs	r0, #18
100593f0:	bd10      	pop	{r4, pc}

100593f2 <chc_csr_ucfg_weak>:
100593f2:	2000      	movs	r0, #0
100593f4:	4770      	bx	lr
	...

100593f8 <HCI_Init>:
100593f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100593fa:	4917      	ldr	r1, [pc, #92]	@ (10059458 <__arm_cp.0_0>)
100593fc:	6808      	ldr	r0, [r1, #0]
100593fe:	460d      	mov	r5, r1
10059400:	2124      	movs	r1, #36	@ 0x24
10059402:	2400      	movs	r4, #0
10059404:	5444      	strb	r4, [r0, r1]
10059406:	3025      	adds	r0, #37	@ 0x25
10059408:	2211      	movs	r2, #17
1005940a:	4f14      	ldr	r7, [pc, #80]	@ (1005945c <__arm_cp.0_1>)
1005940c:	4621      	mov	r1, r4
1005940e:	47b8      	blx	r7
10059410:	6828      	ldr	r0, [r5, #0]
10059412:	3036      	adds	r0, #54	@ 0x36
10059414:	26ff      	movs	r6, #255	@ 0xff
10059416:	2205      	movs	r2, #5
10059418:	4631      	mov	r1, r6
1005941a:	47b8      	blx	r7
1005941c:	6829      	ldr	r1, [r5, #0]
1005941e:	203b      	movs	r0, #59	@ 0x3b
10059420:	231f      	movs	r3, #31
10059422:	540b      	strb	r3, [r1, r0]
10059424:	2201      	movs	r2, #1
10059426:	0355      	lsls	r5, r2, #13
10059428:	4608      	mov	r0, r1
1005942a:	303b      	adds	r0, #59	@ 0x3b
1005942c:	5285      	strh	r5, [r0, r2]
1005942e:	72c3      	strb	r3, [r0, #11]
10059430:	3147      	adds	r1, #71	@ 0x47
10059432:	2207      	movs	r2, #7
10059434:	4608      	mov	r0, r1
10059436:	4621      	mov	r1, r4
10059438:	47b8      	blx	r7
1005943a:	4d07      	ldr	r5, [pc, #28]	@ (10059458 <__arm_cp.0_0>)
1005943c:	6828      	ldr	r0, [r5, #0]
1005943e:	304e      	adds	r0, #78	@ 0x4e
10059440:	2208      	movs	r2, #8
10059442:	4631      	mov	r1, r6
10059444:	47b8      	blx	r7
10059446:	4806      	ldr	r0, [pc, #24]	@ (10059460 <__arm_cp.0_2>)
10059448:	6800      	ldr	r0, [r0, #0]
1005944a:	2135      	movs	r1, #53	@ 0x35
1005944c:	5444      	strb	r4, [r0, r1]
1005944e:	6828      	ldr	r0, [r5, #0]
10059450:	4904      	ldr	r1, [pc, #16]	@ (10059464 <__arm_cp.0_3>)
10059452:	6201      	str	r1, [r0, #32]
10059454:	65c4      	str	r4, [r0, #92]	@ 0x5c
10059456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10059458 <__arm_cp.0_0>:
10059458:	20002ad0 	.word	0x20002ad0

1005945c <__arm_cp.0_1>:
1005945c:	1005277d 	.word	0x1005277d

10059460 <__arm_cp.0_2>:
10059460:	20002a7c 	.word	0x20002a7c

10059464 <__arm_cp.0_3>:
10059464:	fffffdbe 	.word	0xfffffdbe

10059468 <Controller_Process_Q>:
10059468:	b570      	push	{r4, r5, r6, lr}
1005946a:	2500      	movs	r5, #0
1005946c:	4e07      	ldr	r6, [pc, #28]	@ (1005948c <__arm_cp.2_0>)
1005946e:	7af0      	ldrb	r0, [r6, #11]
10059470:	4285      	cmp	r5, r0
10059472:	d20a      	bcs.n	1005948a <Controller_Process_Q+0x22>
10059474:	b2ec      	uxtb	r4, r5
10059476:	4620      	mov	r0, r4
10059478:	f002 fcc6 	bl	1005be08 <LL_cpe_engine>
1005947c:	2800      	cmp	r0, #0
1005947e:	d002      	beq.n	10059486 <Controller_Process_Q+0x1e>
10059480:	4620      	mov	r0, r4
10059482:	f002 fcc1 	bl	1005be08 <LL_cpe_engine>
10059486:	1c6d      	adds	r5, r5, #1
10059488:	e7f1      	b.n	1005946e <Controller_Process_Q+0x6>
1005948a:	bd70      	pop	{r4, r5, r6, pc}

1005948c <__arm_cp.2_0>:
1005948c:	20002ae4 	.word	0x20002ae4

10059490 <hci_le_set_random_address>:
10059490:	b580      	push	{r7, lr}
10059492:	f005 ffff 	bl	1005f494 <LL_Set_Advertising_Set_Random_Address>
10059496:	bd80      	pop	{r7, pc}

10059498 <hci_set_event_mask>:
10059498:	b510      	push	{r4, lr}
1005949a:	2136      	movs	r1, #54	@ 0x36
1005949c:	4a05      	ldr	r2, [pc, #20]	@ (100594b4 <__arm_cp.14_0>)
1005949e:	293e      	cmp	r1, #62	@ 0x3e
100594a0:	d006      	beq.n	100594b0 <hci_set_event_mask+0x18>
100594a2:	1843      	adds	r3, r0, r1
100594a4:	3b36      	subs	r3, #54	@ 0x36
100594a6:	781b      	ldrb	r3, [r3, #0]
100594a8:	6814      	ldr	r4, [r2, #0]
100594aa:	5463      	strb	r3, [r4, r1]
100594ac:	1c49      	adds	r1, r1, #1
100594ae:	e7f6      	b.n	1005949e <hci_set_event_mask+0x6>
100594b0:	2000      	movs	r0, #0
100594b2:	bd10      	pop	{r4, pc}

100594b4 <__arm_cp.14_0>:
100594b4:	20002ad0 	.word	0x20002ad0

100594b8 <hci_le_set_event_mask>:
100594b8:	b510      	push	{r4, lr}
100594ba:	2146      	movs	r1, #70	@ 0x46
100594bc:	4a05      	ldr	r2, [pc, #20]	@ (100594d4 <__arm_cp.16_0>)
100594be:	294e      	cmp	r1, #78	@ 0x4e
100594c0:	d006      	beq.n	100594d0 <hci_le_set_event_mask+0x18>
100594c2:	1843      	adds	r3, r0, r1
100594c4:	3b46      	subs	r3, #70	@ 0x46
100594c6:	781b      	ldrb	r3, [r3, #0]
100594c8:	6814      	ldr	r4, [r2, #0]
100594ca:	5463      	strb	r3, [r4, r1]
100594cc:	1c49      	adds	r1, r1, #1
100594ce:	e7f6      	b.n	100594be <hci_le_set_event_mask+0x6>
100594d0:	2000      	movs	r0, #0
100594d2:	bd10      	pop	{r4, pc}

100594d4 <__arm_cp.16_0>:
100594d4:	20002ad0 	.word	0x20002ad0

100594d8 <hci_get_set_legacy_ext_flag>:
100594d8:	4a05      	ldr	r2, [pc, #20]	@ (100594f0 <__arm_cp.18_0>)
100594da:	6812      	ldr	r2, [r2, #0]
100594dc:	2335      	movs	r3, #53	@ 0x35
100594de:	5cd3      	ldrb	r3, [r2, r3]
100594e0:	4203      	tst	r3, r0
100594e2:	d001      	beq.n	100594e8 <hci_get_set_legacy_ext_flag+0x10>
100594e4:	200c      	movs	r0, #12
100594e6:	4770      	bx	lr
100594e8:	3235      	adds	r2, #53	@ 0x35
100594ea:	7011      	strb	r1, [r2, #0]
100594ec:	2000      	movs	r0, #0
100594ee:	4770      	bx	lr

100594f0 <__arm_cp.18_0>:
100594f0:	20002a7c 	.word	0x20002a7c

100594f4 <hci_check_legacy_ext_flag>:
100594f4:	4903      	ldr	r1, [pc, #12]	@ (10059504 <__arm_cp.25_0>)
100594f6:	6809      	ldr	r1, [r1, #0]
100594f8:	2235      	movs	r2, #53	@ 0x35
100594fa:	5c89      	ldrb	r1, [r1, r2]
100594fc:	4008      	ands	r0, r1
100594fe:	1e41      	subs	r1, r0, #1
10059500:	4188      	sbcs	r0, r1
10059502:	4770      	bx	lr

10059504 <__arm_cp.25_0>:
10059504:	20002a7c 	.word	0x20002a7c

10059508 <LLC_offline_control_procedures_processing>:
10059508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005950a:	2400      	movs	r4, #0
1005950c:	4620      	mov	r0, r4
1005950e:	f000 fd97 	bl	1005a040 <llc_conn_get_cntxt_per_p>
10059512:	4605      	mov	r5, r0
10059514:	2201      	movs	r2, #1
10059516:	4b30      	ldr	r3, [pc, #192]	@ (100595d8 <__arm_cp.27_0>)
10059518:	4627      	mov	r7, r4
1005951a:	9200      	str	r2, [sp, #0]
1005951c:	6818      	ldr	r0, [r3, #0]
1005951e:	2134      	movs	r1, #52	@ 0x34
10059520:	5c40      	ldrb	r0, [r0, r1]
10059522:	4284      	cmp	r4, r0
10059524:	d250      	bcs.n	100595c8 <LLC_offline_control_procedures_processing+0xc0>
10059526:	202c      	movs	r0, #44	@ 0x2c
10059528:	5c28      	ldrb	r0, [r5, r0]
1005952a:	21fe      	movs	r1, #254	@ 0xfe
1005952c:	4001      	ands	r1, r0
1005952e:	2902      	cmp	r1, #2
10059530:	d13e      	bne.n	100595b0 <LLC_offline_control_procedures_processing+0xa8>
10059532:	208c      	movs	r0, #140	@ 0x8c
10059534:	582e      	ldr	r6, [r5, r0]
10059536:	07f0      	lsls	r0, r6, #31
10059538:	d00d      	beq.n	10059556 <LLC_offline_control_procedures_processing+0x4e>
1005953a:	8f69      	ldrh	r1, [r5, #58]	@ 0x3a
1005953c:	2000      	movs	r0, #0
1005953e:	f004 fb93 	bl	1005dc68 <LL_Read_Remote_Used_Features>
10059542:	283a      	cmp	r0, #58	@ 0x3a
10059544:	9a00      	ldr	r2, [sp, #0]
10059546:	4610      	mov	r0, r2
10059548:	d030      	beq.n	100595ac <LLC_offline_control_procedures_processing+0xa4>
1005954a:	4628      	mov	r0, r5
1005954c:	308c      	adds	r0, #140	@ 0x8c
1005954e:	6801      	ldr	r1, [r0, #0]
10059550:	2201      	movs	r2, #1
10059552:	4391      	bics	r1, r2
10059554:	6001      	str	r1, [r0, #0]
10059556:	4628      	mov	r0, r5
10059558:	f002 fb7e 	bl	1005bc58 <llc_subrate_offline_processing_ucfg_weak>
1005955c:	2800      	cmp	r0, #0
1005955e:	9a00      	ldr	r2, [sp, #0]
10059560:	4610      	mov	r0, r2
10059562:	d123      	bne.n	100595ac <LLC_offline_control_procedures_processing+0xa4>
10059564:	4628      	mov	r0, r5
10059566:	4631      	mov	r1, r6
10059568:	f006 fd04 	bl	1005ff74 <Data_Len_Update_Offline_Processing_ucfg_weak>
1005956c:	9a00      	ldr	r2, [sp, #0]
1005956e:	2800      	cmp	r0, #0
10059570:	4610      	mov	r0, r2
10059572:	d11b      	bne.n	100595ac <LLC_offline_control_procedures_processing+0xa4>
10059574:	b2e6      	uxtb	r6, r4
10059576:	4630      	mov	r0, r6
10059578:	f003 fc0e 	bl	1005cd98 <LLC_channel_map_update_offline_processing_ucfg_weak>
1005957c:	9a00      	ldr	r2, [sp, #0]
1005957e:	2800      	cmp	r0, #0
10059580:	4610      	mov	r0, r2
10059582:	d113      	bne.n	100595ac <LLC_offline_control_procedures_processing+0xa4>
10059584:	4630      	mov	r0, r6
10059586:	f003 fc0b 	bl	1005cda0 <LLC_chc_reporting_offline_processing_ucfg_weak>
1005958a:	9a00      	ldr	r2, [sp, #0]
1005958c:	2800      	cmp	r0, #0
1005958e:	4610      	mov	r0, r2
10059590:	d10c      	bne.n	100595ac <LLC_offline_control_procedures_processing+0xa4>
10059592:	4628      	mov	r0, r5
10059594:	f003 fe45 	bl	1005d222 <LLC_cte_request_procedure_ucfg_weak>
10059598:	9a00      	ldr	r2, [sp, #0]
1005959a:	2800      	cmp	r0, #0
1005959c:	4610      	mov	r0, r2
1005959e:	d105      	bne.n	100595ac <LLC_offline_control_procedures_processing+0xa4>
100595a0:	4630      	mov	r0, r6
100595a2:	f004 fd68 	bl	1005e076 <LLC_pcl_offline_processing_ucfg_weak>
100595a6:	9a00      	ldr	r2, [sp, #0]
100595a8:	1e41      	subs	r1, r0, #1
100595aa:	4188      	sbcs	r0, r1
100595ac:	4b0a      	ldr	r3, [pc, #40]	@ (100595d8 <__arm_cp.27_0>)
100595ae:	e000      	b.n	100595b2 <LLC_offline_control_procedures_processing+0xaa>
100595b0:	2000      	movs	r0, #0
100595b2:	1e41      	subs	r1, r0, #1
100595b4:	4188      	sbcs	r0, r1
100595b6:	0639      	lsls	r1, r7, #24
100595b8:	4617      	mov	r7, r2
100595ba:	d100      	bne.n	100595be <LLC_offline_control_procedures_processing+0xb6>
100595bc:	4607      	mov	r7, r0
100595be:	204d      	movs	r0, #77	@ 0x4d
100595c0:	0080      	lsls	r0, r0, #2
100595c2:	182d      	adds	r5, r5, r0
100595c4:	1c64      	adds	r4, r4, #1
100595c6:	e7a9      	b.n	1005951c <LLC_offline_control_procedures_processing+0x14>
100595c8:	0638      	lsls	r0, r7, #24
100595ca:	d003      	beq.n	100595d4 <LLC_offline_control_procedures_processing+0xcc>
100595cc:	2011      	movs	r0, #17
100595ce:	2101      	movs	r1, #1
100595d0:	f009 f96c 	bl	100628ac <tsk_wait_resource_idx>
100595d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100595d6:	46c0      	nop			@ (mov r8, r8)

100595d8 <__arm_cp.27_0>:
100595d8:	20002a7c 	.word	0x20002a7c

100595dc <cte_csr_ucfg_weak>:
100595dc:	2000      	movs	r0, #0
100595de:	4770      	bx	lr

100595e0 <hci_le_encrypt>:
100595e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100595e2:	b08f      	sub	sp, #60	@ 0x3c
100595e4:	9202      	str	r2, [sp, #8]
100595e6:	4607      	mov	r7, r0
100595e8:	a807      	add	r0, sp, #28
100595ea:	9001      	str	r0, [sp, #4]
100595ec:	2510      	movs	r5, #16
100595ee:	4e0c      	ldr	r6, [pc, #48]	@ (10059620 <__arm_cp.0_0>)
100595f0:	462a      	mov	r2, r5
100595f2:	47b0      	blx	r6
100595f4:	ac0b      	add	r4, sp, #44	@ 0x2c
100595f6:	4620      	mov	r0, r4
100595f8:	4639      	mov	r1, r7
100595fa:	462a      	mov	r2, r5
100595fc:	47b0      	blx	r6
100595fe:	af03      	add	r7, sp, #12
10059600:	2600      	movs	r6, #0
10059602:	9801      	ldr	r0, [sp, #4]
10059604:	4621      	mov	r1, r4
10059606:	463a      	mov	r2, r7
10059608:	4633      	mov	r3, r6
1005960a:	f009 fc53 	bl	10062eb4 <BLEPLAT_aes128_encrypt>
1005960e:	9802      	ldr	r0, [sp, #8]
10059610:	4639      	mov	r1, r7
10059612:	462a      	mov	r2, r5
10059614:	4b02      	ldr	r3, [pc, #8]	@ (10059620 <__arm_cp.0_0>)
10059616:	4798      	blx	r3
10059618:	4630      	mov	r0, r6
1005961a:	b00f      	add	sp, #60	@ 0x3c
1005961c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005961e:	46c0      	nop			@ (mov r8, r8)

10059620 <__arm_cp.0_0>:
10059620:	1005275d 	.word	0x1005275d

10059624 <hci_le_long_term_key_request_reply_api>:
10059624:	b5b0      	push	{r4, r5, r7, lr}
10059626:	460c      	mov	r4, r1
10059628:	4605      	mov	r5, r0
1005962a:	f000 ff83 	bl	1005a534 <llc_conn_get_conn_idx>
1005962e:	28ff      	cmp	r0, #255	@ 0xff
10059630:	d005      	beq.n	1005963e <hci_le_long_term_key_request_reply_api+0x1a>
10059632:	2000      	movs	r0, #0
10059634:	4629      	mov	r1, r5
10059636:	4622      	mov	r2, r4
10059638:	f004 f9c3 	bl	1005d9c2 <LL_Get_LTK>
1005963c:	bdb0      	pop	{r4, r5, r7, pc}
1005963e:	2002      	movs	r0, #2
10059640:	bdb0      	pop	{r4, r5, r7, pc}

10059642 <hci_le_long_term_key_request_negative_reply_api>:
10059642:	b510      	push	{r4, lr}
10059644:	4604      	mov	r4, r0
10059646:	f000 ff75 	bl	1005a534 <llc_conn_get_conn_idx>
1005964a:	28ff      	cmp	r0, #255	@ 0xff
1005964c:	d005      	beq.n	1005965a <hci_le_long_term_key_request_negative_reply_api+0x18>
1005964e:	2081      	movs	r0, #129	@ 0x81
10059650:	2200      	movs	r2, #0
10059652:	4621      	mov	r1, r4
10059654:	f004 f9b5 	bl	1005d9c2 <LL_Get_LTK>
10059658:	bd10      	pop	{r4, pc}
1005965a:	2002      	movs	r0, #2
1005965c:	bd10      	pop	{r4, pc}

1005965e <hci_le_check_own_address_type_max_value_ucfg_weak>:
1005965e:	2001      	movs	r0, #1
10059660:	4770      	bx	lr

10059662 <hci_le_clear_filter_accept_list>:
10059662:	b580      	push	{r7, lr}
10059664:	f002 fa02 	bl	1005ba6c <llc_wl_clear_filter_accept_list>
10059668:	bd80      	pop	{r7, pc}

1005966a <hci_le_add_device_to_filter_accept_list>:
1005966a:	b5e0      	push	{r5, r6, r7, lr}
1005966c:	2802      	cmp	r0, #2
1005966e:	d301      	bcc.n	10059674 <hci_le_add_device_to_filter_accept_list+0xa>
10059670:	28ff      	cmp	r0, #255	@ 0xff
10059672:	d10d      	bne.n	10059690 <hci_le_add_device_to_filter_accept_list+0x26>
10059674:	2200      	movs	r2, #0
10059676:	9200      	str	r2, [sp, #0]
10059678:	466b      	mov	r3, sp
1005967a:	7018      	strb	r0, [r3, #0]
1005967c:	9201      	str	r2, [sp, #4]
1005967e:	1c58      	adds	r0, r3, #1
10059680:	2206      	movs	r2, #6
10059682:	f7f9 f86b 	bl	1005275c <BLEPLAT_MemCpy>
10059686:	9901      	ldr	r1, [sp, #4]
10059688:	9800      	ldr	r0, [sp, #0]
1005968a:	f002 fa09 	bl	1005baa0 <llc_wl_add_device_to_filter_accept_list>
1005968e:	bd8c      	pop	{r2, r3, r7, pc}
10059690:	2012      	movs	r0, #18
10059692:	bd8c      	pop	{r2, r3, r7, pc}

10059694 <data_length_extension_csr_ucfg_weak>:
10059694:	2000      	movs	r0, #0
10059696:	4770      	bx	lr

10059698 <pcl_csr_ucfg_weak>:
10059698:	2000      	movs	r0, #0
1005969a:	4770      	bx	lr

1005969c <phy_upd_csr>:
1005969c:	2001      	movs	r0, #1
1005969e:	4770      	bx	lr

100596a0 <scan_csr_ucfg_weak>:
100596a0:	2000      	movs	r0, #0
100596a2:	4770      	bx	lr

100596a4 <conn_supp_csr>:
100596a4:	2001      	movs	r0, #1
100596a6:	4770      	bx	lr

100596a8 <subrate_csr_ucfg_weak>:
100596a8:	2000      	movs	r0, #0
100596aa:	4770      	bx	lr

100596ac <L2C_build_connect_update_request>:
100596ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100596ae:	b087      	sub	sp, #28
100596b0:	8901      	ldrh	r1, [r0, #8]
100596b2:	9104      	str	r1, [sp, #16]
100596b4:	88c1      	ldrh	r1, [r0, #6]
100596b6:	9105      	str	r1, [sp, #20]
100596b8:	8884      	ldrh	r4, [r0, #4]
100596ba:	8846      	ldrh	r6, [r0, #2]
100596bc:	8807      	ldrh	r7, [r0, #0]
100596be:	2000      	movs	r0, #0
100596c0:	9006      	str	r0, [sp, #24]
100596c2:	a906      	add	r1, sp, #24
100596c4:	4638      	mov	r0, r7
100596c6:	f000 f89f 	bl	10059808 <l2c_get_check_link_status_on_request_sending>
100596ca:	4605      	mov	r5, r0
100596cc:	2800      	cmp	r0, #0
100596ce:	d15a      	bne.n	10059786 <L2C_build_connect_update_request+0xda>
100596d0:	9603      	str	r6, [sp, #12]
100596d2:	9402      	str	r4, [sp, #8]
100596d4:	9806      	ldr	r0, [sp, #24]
100596d6:	7880      	ldrb	r0, [r0, #2]
100596d8:	07c0      	lsls	r0, r0, #31
100596da:	d151      	bne.n	10059780 <L2C_build_connect_update_request+0xd4>
100596dc:	2400      	movs	r4, #0
100596de:	2210      	movs	r2, #16
100596e0:	4620      	mov	r0, r4
100596e2:	4639      	mov	r1, r7
100596e4:	f7fb fbb0 	bl	10054e48 <ACL_pkt_get>
100596e8:	2800      	cmp	r0, #0
100596ea:	d04b      	beq.n	10059784 <L2C_build_connect_update_request+0xd8>
100596ec:	4607      	mov	r7, r0
100596ee:	482a      	ldr	r0, [pc, #168]	@ (10059798 <__arm_cp.0_0>)
100596f0:	9a03      	ldr	r2, [sp, #12]
100596f2:	1f91      	subs	r1, r2, #6
100596f4:	b289      	uxth	r1, r1
100596f6:	2512      	movs	r5, #18
100596f8:	4281      	cmp	r1, r0
100596fa:	d23d      	bcs.n	10059778 <L2C_build_connect_update_request+0xcc>
100596fc:	9e02      	ldr	r6, [sp, #8]
100596fe:	2e06      	cmp	r6, #6
10059700:	d33a      	bcc.n	10059778 <L2C_build_connect_update_request+0xcc>
10059702:	1d80      	adds	r0, r0, #6
10059704:	4286      	cmp	r6, r0
10059706:	d237      	bcs.n	10059778 <L2C_build_connect_update_request+0xcc>
10059708:	42b2      	cmp	r2, r6
1005970a:	d835      	bhi.n	10059778 <L2C_build_connect_update_request+0xcc>
1005970c:	9a05      	ldr	r2, [sp, #20]
1005970e:	0891      	lsrs	r1, r2, #2
10059710:	297c      	cmp	r1, #124	@ 0x7c
10059712:	d831      	bhi.n	10059778 <L2C_build_connect_update_request+0xcc>
10059714:	1c51      	adds	r1, r2, #1
10059716:	4371      	muls	r1, r6
10059718:	9b04      	ldr	r3, [sp, #16]
1005971a:	009a      	lsls	r2, r3, #2
1005971c:	4291      	cmp	r1, r2
1005971e:	d82b      	bhi.n	10059778 <L2C_build_connect_update_request+0xcc>
10059720:	2b0a      	cmp	r3, #10
10059722:	d329      	bcc.n	10059778 <L2C_build_connect_update_request+0xcc>
10059724:	4283      	cmp	r3, r0
10059726:	d227      	bcs.n	10059778 <L2C_build_connect_update_request+0xcc>
10059728:	9401      	str	r4, [sp, #4]
1005972a:	6878      	ldr	r0, [r7, #4]
1005972c:	2112      	movs	r1, #18
1005972e:	7201      	strb	r1, [r0, #8]
10059730:	6878      	ldr	r0, [r7, #4]
10059732:	9906      	ldr	r1, [sp, #24]
10059734:	7909      	ldrb	r1, [r1, #4]
10059736:	7241      	strb	r1, [r0, #9]
10059738:	2106      	movs	r1, #6
1005973a:	2508      	movs	r5, #8
1005973c:	4c17      	ldr	r4, [pc, #92]	@ (1005979c <__arm_cp.0_1>)
1005973e:	4638      	mov	r0, r7
10059740:	462a      	mov	r2, r5
10059742:	47a0      	blx	r4
10059744:	4638      	mov	r0, r7
10059746:	4629      	mov	r1, r5
10059748:	9a03      	ldr	r2, [sp, #12]
1005974a:	47a0      	blx	r4
1005974c:	210a      	movs	r1, #10
1005974e:	4638      	mov	r0, r7
10059750:	4632      	mov	r2, r6
10059752:	4625      	mov	r5, r4
10059754:	47a0      	blx	r4
10059756:	240c      	movs	r4, #12
10059758:	4638      	mov	r0, r7
1005975a:	4621      	mov	r1, r4
1005975c:	9a05      	ldr	r2, [sp, #20]
1005975e:	47a8      	blx	r5
10059760:	210e      	movs	r1, #14
10059762:	4638      	mov	r0, r7
10059764:	9a04      	ldr	r2, [sp, #16]
10059766:	47a8      	blx	r5
10059768:	807c      	strh	r4, [r7, #2]
1005976a:	2005      	movs	r0, #5
1005976c:	4639      	mov	r1, r7
1005976e:	f000 f9cf 	bl	10059b10 <L2C_send_frame>
10059772:	2800      	cmp	r0, #0
10059774:	d00a      	beq.n	1005978c <L2C_build_connect_update_request+0xe0>
10059776:	2581      	movs	r5, #129	@ 0x81
10059778:	4638      	mov	r0, r7
1005977a:	f7fb fb87 	bl	10054e8c <ACL_pkt_release>
1005977e:	e002      	b.n	10059786 <L2C_build_connect_update_request+0xda>
10059780:	250c      	movs	r5, #12
10059782:	e000      	b.n	10059786 <L2C_build_connect_update_request+0xda>
10059784:	2588      	movs	r5, #136	@ 0x88
10059786:	4628      	mov	r0, r5
10059788:	b007      	add	sp, #28
1005978a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005978c:	9906      	ldr	r1, [sp, #24]
1005978e:	2012      	movs	r0, #18
10059790:	f000 f84f 	bl	10059832 <l2c_set_link_status_after_request_enqueued>
10059794:	9d01      	ldr	r5, [sp, #4]
10059796:	e7f6      	b.n	10059786 <L2C_build_connect_update_request+0xda>

10059798 <__arm_cp.0_0>:
10059798:	00000c7b 	.word	0x00000c7b

1005979c <__arm_cp.0_1>:
1005979c:	10054ef7 	.word	0x10054ef7

100597a0 <l2c_get_link_control_block_ref>:
100597a0:	b570      	push	{r4, r5, r6, lr}
100597a2:	490b      	ldr	r1, [pc, #44]	@ (100597d0 <__arm_cp.0_0>)
100597a4:	7ac9      	ldrb	r1, [r1, #11]
100597a6:	2214      	movs	r2, #20
100597a8:	434a      	muls	r2, r1
100597aa:	3214      	adds	r2, #20
100597ac:	4909      	ldr	r1, [pc, #36]	@ (100597d4 <__arm_cp.0_1>)
100597ae:	680b      	ldr	r3, [r1, #0]
100597b0:	2100      	movs	r1, #0
100597b2:	460d      	mov	r5, r1
100597b4:	460c      	mov	r4, r1
100597b6:	3414      	adds	r4, #20
100597b8:	42a2      	cmp	r2, r4
100597ba:	d006      	beq.n	100597ca <l2c_get_link_control_block_ref+0x2a>
100597bc:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
100597be:	5b75      	ldrh	r5, [r6, r5]
100597c0:	4285      	cmp	r5, r0
100597c2:	4625      	mov	r5, r4
100597c4:	d1f7      	bne.n	100597b6 <l2c_get_link_control_block_ref+0x16>
100597c6:	1931      	adds	r1, r6, r4
100597c8:	3914      	subs	r1, #20
100597ca:	4608      	mov	r0, r1
100597cc:	bd70      	pop	{r4, r5, r6, pc}
100597ce:	46c0      	nop			@ (mov r8, r8)

100597d0 <__arm_cp.0_0>:
100597d0:	20002ae4 	.word	0x20002ae4

100597d4 <__arm_cp.0_1>:
100597d4:	20002ac8 	.word	0x20002ac8

100597d8 <l2c_get_link_control_block_index>:
100597d8:	b5b0      	push	{r4, r5, r7, lr}
100597da:	4909      	ldr	r1, [pc, #36]	@ (10059800 <__arm_cp.1_0>)
100597dc:	7aca      	ldrb	r2, [r1, #11]
100597de:	4909      	ldr	r1, [pc, #36]	@ (10059804 <__arm_cp.1_1>)
100597e0:	680b      	ldr	r3, [r1, #0]
100597e2:	2400      	movs	r4, #0
100597e4:	4621      	mov	r1, r4
100597e6:	428a      	cmp	r2, r1
100597e8:	d006      	beq.n	100597f8 <l2c_get_link_control_block_index+0x20>
100597ea:	6add      	ldr	r5, [r3, #44]	@ 0x2c
100597ec:	5b2d      	ldrh	r5, [r5, r4]
100597ee:	4285      	cmp	r5, r0
100597f0:	d003      	beq.n	100597fa <l2c_get_link_control_block_index+0x22>
100597f2:	3414      	adds	r4, #20
100597f4:	1c49      	adds	r1, r1, #1
100597f6:	e7f6      	b.n	100597e6 <l2c_get_link_control_block_index+0xe>
100597f8:	4611      	mov	r1, r2
100597fa:	b2c8      	uxtb	r0, r1
100597fc:	bdb0      	pop	{r4, r5, r7, pc}
100597fe:	46c0      	nop			@ (mov r8, r8)

10059800 <__arm_cp.1_0>:
10059800:	20002ae4 	.word	0x20002ae4

10059804 <__arm_cp.1_1>:
10059804:	20002ac8 	.word	0x20002ac8

10059808 <l2c_get_check_link_status_on_request_sending>:
10059808:	b5b0      	push	{r4, r5, r7, lr}
1005980a:	460c      	mov	r4, r1
1005980c:	4605      	mov	r5, r0
1005980e:	f7ff ffc7 	bl	100597a0 <l2c_get_link_control_block_ref>
10059812:	4601      	mov	r1, r0
10059814:	6020      	str	r0, [r4, #0]
10059816:	2002      	movs	r0, #2
10059818:	2d00      	cmp	r5, #0
1005981a:	d009      	beq.n	10059830 <l2c_get_check_link_status_on_request_sending+0x28>
1005981c:	2900      	cmp	r1, #0
1005981e:	d007      	beq.n	10059830 <l2c_get_check_link_status_on_request_sending+0x28>
10059820:	7908      	ldrb	r0, [r1, #4]
10059822:	2800      	cmp	r0, #0
10059824:	d003      	beq.n	1005982e <l2c_get_check_link_status_on_request_sending+0x26>
10059826:	7889      	ldrb	r1, [r1, #2]
10059828:	2006      	movs	r0, #6
1005982a:	4008      	ands	r0, r1
1005982c:	d000      	beq.n	10059830 <l2c_get_check_link_status_on_request_sending+0x28>
1005982e:	200c      	movs	r0, #12
10059830:	bdb0      	pop	{r4, r5, r7, pc}

10059832 <l2c_set_link_status_after_request_enqueued>:
10059832:	7188      	strb	r0, [r1, #6]
10059834:	7908      	ldrb	r0, [r1, #4]
10059836:	71c8      	strb	r0, [r1, #7]
10059838:	7888      	ldrb	r0, [r1, #2]
1005983a:	2206      	movs	r2, #6
1005983c:	4302      	orrs	r2, r0
1005983e:	708a      	strb	r2, [r1, #2]
10059840:	4770      	bx	lr

10059842 <l2c_post_process_incoming_request_packet>:
10059842:	7190      	strb	r0, [r2, #6]
10059844:	7151      	strb	r1, [r2, #5]
10059846:	7890      	ldrb	r0, [r2, #2]
10059848:	2104      	movs	r1, #4
1005984a:	4301      	orrs	r1, r0
1005984c:	7091      	strb	r1, [r2, #2]
1005984e:	4770      	bx	lr

10059850 <l2c_pre_process_incoming_response_packet>:
10059850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059852:	4604      	mov	r4, r0
10059854:	2014      	movs	r0, #20
10059856:	4360      	muls	r0, r4
10059858:	4b14      	ldr	r3, [pc, #80]	@ (100598ac <__arm_cp.7_0>)
1005985a:	681b      	ldr	r3, [r3, #0]
1005985c:	6add      	ldr	r5, [r3, #44]	@ 0x2c
1005985e:	182d      	adds	r5, r5, r0
10059860:	78a8      	ldrb	r0, [r5, #2]
10059862:	0746      	lsls	r6, r0, #29
10059864:	2081      	movs	r0, #129	@ 0x81
10059866:	2e00      	cmp	r6, #0
10059868:	d51f      	bpl.n	100598aa <l2c_pre_process_incoming_response_packet+0x5a>
1005986a:	79ae      	ldrb	r6, [r5, #6]
1005986c:	1c76      	adds	r6, r6, #1
1005986e:	428e      	cmp	r6, r1
10059870:	d001      	beq.n	10059876 <l2c_pre_process_incoming_response_packet+0x26>
10059872:	2901      	cmp	r1, #1
10059874:	d119      	bne.n	100598aa <l2c_pre_process_incoming_response_packet+0x5a>
10059876:	79e9      	ldrb	r1, [r5, #7]
10059878:	4291      	cmp	r1, r2
1005987a:	d116      	bne.n	100598aa <l2c_pre_process_incoming_response_packet+0x5a>
1005987c:	1cae      	adds	r6, r5, #2
1005987e:	1daf      	adds	r7, r5, #6
10059880:	1de8      	adds	r0, r5, #7
10059882:	9000      	str	r0, [sp, #0]
10059884:	4618      	mov	r0, r3
10059886:	4621      	mov	r1, r4
10059888:	f009 f871 	bl	1006296e <CST_stop>
1005988c:	2000      	movs	r0, #0
1005988e:	7038      	strb	r0, [r7, #0]
10059890:	9900      	ldr	r1, [sp, #0]
10059892:	7008      	strb	r0, [r1, #0]
10059894:	7831      	ldrb	r1, [r6, #0]
10059896:	22fb      	movs	r2, #251	@ 0xfb
10059898:	400a      	ands	r2, r1
1005989a:	7032      	strb	r2, [r6, #0]
1005989c:	7929      	ldrb	r1, [r5, #4]
1005989e:	1c4a      	adds	r2, r1, #1
100598a0:	b2d1      	uxtb	r1, r2
100598a2:	4291      	cmp	r1, r2
100598a4:	d000      	beq.n	100598a8 <l2c_pre_process_incoming_response_packet+0x58>
100598a6:	2101      	movs	r1, #1
100598a8:	7129      	strb	r1, [r5, #4]
100598aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100598ac <__arm_cp.7_0>:
100598ac:	20002ac8 	.word	0x20002ac8

100598b0 <l2c_release_unexpected_acl_packet>:
100598b0:	b580      	push	{r7, lr}
100598b2:	4608      	mov	r0, r1
100598b4:	f7fb faea 	bl	10054e8c <ACL_pkt_release>
100598b8:	bd80      	pop	{r7, pc}

100598ba <L2C_get_cid_from_basic_packet_header>:
100598ba:	b580      	push	{r7, lr}
100598bc:	2102      	movs	r1, #2
100598be:	f7fb fb0a 	bl	10054ed6 <ACL_pkt_read_16b>
100598c2:	bd80      	pop	{r7, pc}

100598c4 <L2C_build_command_reject_pdu>:
100598c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100598c6:	b085      	sub	sp, #20
100598c8:	461e      	mov	r6, r3
100598ca:	9204      	str	r2, [sp, #16]
100598cc:	460d      	mov	r5, r1
100598ce:	4607      	mov	r7, r0
100598d0:	f7ff ff66 	bl	100597a0 <l2c_get_link_control_block_ref>
100598d4:	2800      	cmp	r0, #0
100598d6:	d00f      	beq.n	100598f8 <L2C_build_command_reject_pdu+0x34>
100598d8:	4604      	mov	r4, r0
100598da:	9603      	str	r6, [sp, #12]
100598dc:	7940      	ldrb	r0, [r0, #5]
100598de:	2612      	movs	r6, #18
100598e0:	42a8      	cmp	r0, r5
100598e2:	d10a      	bne.n	100598fa <L2C_build_command_reject_pdu+0x36>
100598e4:	9904      	ldr	r1, [sp, #16]
100598e6:	2902      	cmp	r1, #2
100598e8:	d807      	bhi.n	100598fa <L2C_build_command_reject_pdu+0x36>
100598ea:	78a0      	ldrb	r0, [r4, #2]
100598ec:	0780      	lsls	r0, r0, #30
100598ee:	d407      	bmi.n	10059900 <L2C_build_command_reject_pdu+0x3c>
100598f0:	2901      	cmp	r1, #1
100598f2:	d007      	beq.n	10059904 <L2C_build_command_reject_pdu+0x40>
100598f4:	2004      	movs	r0, #4
100598f6:	e006      	b.n	10059906 <L2C_build_command_reject_pdu+0x42>
100598f8:	2602      	movs	r6, #2
100598fa:	4630      	mov	r0, r6
100598fc:	b005      	add	sp, #20
100598fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059900:	260c      	movs	r6, #12
10059902:	e7fa      	b.n	100598fa <L2C_build_command_reject_pdu+0x36>
10059904:	2002      	movs	r0, #2
10059906:	2900      	cmp	r1, #0
10059908:	d100      	bne.n	1005990c <L2C_build_command_reject_pdu+0x48>
1005990a:	4608      	mov	r0, r1
1005990c:	9002      	str	r0, [sp, #8]
1005990e:	1d82      	adds	r2, r0, #6
10059910:	2600      	movs	r6, #0
10059912:	4630      	mov	r0, r6
10059914:	4639      	mov	r1, r7
10059916:	9201      	str	r2, [sp, #4]
10059918:	f7fb fa96 	bl	10054e48 <ACL_pkt_get>
1005991c:	2800      	cmp	r0, #0
1005991e:	d027      	beq.n	10059970 <L2C_build_command_reject_pdu+0xac>
10059920:	4607      	mov	r7, r0
10059922:	6840      	ldr	r0, [r0, #4]
10059924:	2101      	movs	r1, #1
10059926:	7201      	strb	r1, [r0, #8]
10059928:	6878      	ldr	r0, [r7, #4]
1005992a:	7245      	strb	r5, [r0, #9]
1005992c:	9802      	ldr	r0, [sp, #8]
1005992e:	1c80      	adds	r0, r0, #2
10059930:	b282      	uxth	r2, r0
10059932:	2106      	movs	r1, #6
10059934:	4638      	mov	r0, r7
10059936:	f7fb fade 	bl	10054ef6 <ACL_pkt_write_16b>
1005993a:	2108      	movs	r1, #8
1005993c:	4638      	mov	r0, r7
1005993e:	9d04      	ldr	r5, [sp, #16]
10059940:	462a      	mov	r2, r5
10059942:	f7fb fad8 	bl	10054ef6 <ACL_pkt_write_16b>
10059946:	2d00      	cmp	r5, #0
10059948:	d005      	beq.n	10059956 <L2C_build_command_reject_pdu+0x92>
1005994a:	210a      	movs	r1, #10
1005994c:	4638      	mov	r0, r7
1005994e:	9a02      	ldr	r2, [sp, #8]
10059950:	9b03      	ldr	r3, [sp, #12]
10059952:	f7fb fad9 	bl	10054f08 <ACL_pkt_write>
10059956:	9801      	ldr	r0, [sp, #4]
10059958:	8078      	strh	r0, [r7, #2]
1005995a:	2005      	movs	r0, #5
1005995c:	4639      	mov	r1, r7
1005995e:	f000 f8d7 	bl	10059b10 <L2C_send_frame>
10059962:	2800      	cmp	r0, #0
10059964:	d006      	beq.n	10059974 <L2C_build_command_reject_pdu+0xb0>
10059966:	4638      	mov	r0, r7
10059968:	f7fb fa90 	bl	10054e8c <ACL_pkt_release>
1005996c:	2681      	movs	r6, #129	@ 0x81
1005996e:	e7c4      	b.n	100598fa <L2C_build_command_reject_pdu+0x36>
10059970:	2688      	movs	r6, #136	@ 0x88
10059972:	e7c2      	b.n	100598fa <L2C_build_command_reject_pdu+0x36>
10059974:	71a6      	strb	r6, [r4, #6]
10059976:	78a0      	ldrb	r0, [r4, #2]
10059978:	21fb      	movs	r1, #251	@ 0xfb
1005997a:	4001      	ands	r1, r0
1005997c:	70a1      	strb	r1, [r4, #2]
1005997e:	e7bc      	b.n	100598fa <L2C_build_command_reject_pdu+0x36>

10059980 <l2c_cos_channel_descriptor_reset>:
10059980:	b570      	push	{r4, r5, r6, lr}
10059982:	4604      	mov	r4, r0
10059984:	2022      	movs	r0, #34	@ 0x22
10059986:	4910      	ldr	r1, [pc, #64]	@ (100599c8 <__arm_cp.4_0>)
10059988:	5c08      	ldrb	r0, [r1, r0]
1005998a:	42a0      	cmp	r0, r4
1005998c:	d91b      	bls.n	100599c6 <l2c_cos_channel_descriptor_reset+0x46>
1005998e:	4d0f      	ldr	r5, [pc, #60]	@ (100599cc <__arm_cp.4_1>)
10059990:	6829      	ldr	r1, [r5, #0]
10059992:	2030      	movs	r0, #48	@ 0x30
10059994:	5c0a      	ldrb	r2, [r1, r0]
10059996:	1c52      	adds	r2, r2, #1
10059998:	540a      	strb	r2, [r1, r0]
1005999a:	2234      	movs	r2, #52	@ 0x34
1005999c:	4354      	muls	r4, r2
1005999e:	3130      	adds	r1, #48	@ 0x30
100599a0:	6848      	ldr	r0, [r1, #4]
100599a2:	1900      	adds	r0, r0, r4
100599a4:	7883      	ldrb	r3, [r0, #2]
100599a6:	071b      	lsls	r3, r3, #28
100599a8:	d505      	bpl.n	100599b6 <l2c_cos_channel_descriptor_reset+0x36>
100599aa:	78c3      	ldrb	r3, [r0, #3]
100599ac:	2b11      	cmp	r3, #17
100599ae:	d302      	bcc.n	100599b6 <l2c_cos_channel_descriptor_reset+0x36>
100599b0:	784b      	ldrb	r3, [r1, #1]
100599b2:	1e5b      	subs	r3, r3, #1
100599b4:	704b      	strb	r3, [r1, #1]
100599b6:	8946      	ldrh	r6, [r0, #10]
100599b8:	2100      	movs	r1, #0
100599ba:	f7f8 fedf 	bl	1005277c <BLEPLAT_MemSet>
100599be:	6828      	ldr	r0, [r5, #0]
100599c0:	6b40      	ldr	r0, [r0, #52]	@ 0x34
100599c2:	1900      	adds	r0, r0, r4
100599c4:	8146      	strh	r6, [r0, #10]
100599c6:	bd70      	pop	{r4, r5, r6, pc}

100599c8 <__arm_cp.4_0>:
100599c8:	20002ae4 	.word	0x20002ae4

100599cc <__arm_cp.4_1>:
100599cc:	20002ac8 	.word	0x20002ac8

100599d0 <L2C_cos_channel_descriptors_reset_pending>:
100599d0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100599d2:	460c      	mov	r4, r1
100599d4:	4605      	mov	r5, r0
100599d6:	2022      	movs	r0, #34	@ 0x22
100599d8:	4912      	ldr	r1, [pc, #72]	@ (10059a24 <__arm_cp.5_0>)
100599da:	9002      	str	r0, [sp, #8]
100599dc:	5c08      	ldrb	r0, [r1, r0]
100599de:	2700      	movs	r7, #0
100599e0:	2603      	movs	r6, #3
100599e2:	4b11      	ldr	r3, [pc, #68]	@ (10059a28 <__arm_cp.5_1>)
100599e4:	9501      	str	r5, [sp, #4]
100599e6:	b2c1      	uxtb	r1, r0
100599e8:	428f      	cmp	r7, r1
100599ea:	d219      	bcs.n	10059a20 <L2C_cos_channel_descriptors_reset_pending+0x50>
100599ec:	6819      	ldr	r1, [r3, #0]
100599ee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
100599f0:	198a      	adds	r2, r1, r6
100599f2:	1ed2      	subs	r2, r2, #3
100599f4:	8812      	ldrh	r2, [r2, #0]
100599f6:	42aa      	cmp	r2, r5
100599f8:	d10f      	bne.n	10059a1a <L2C_cos_channel_descriptors_reset_pending+0x4a>
100599fa:	2cff      	cmp	r4, #255	@ 0xff
100599fc:	d002      	beq.n	10059a04 <L2C_cos_channel_descriptors_reset_pending+0x34>
100599fe:	5d89      	ldrb	r1, [r1, r6]
10059a00:	42a1      	cmp	r1, r4
10059a02:	d10a      	bne.n	10059a1a <L2C_cos_channel_descriptors_reset_pending+0x4a>
10059a04:	b2f8      	uxtb	r0, r7
10059a06:	4625      	mov	r5, r4
10059a08:	461c      	mov	r4, r3
10059a0a:	f7ff ffb9 	bl	10059980 <l2c_cos_channel_descriptor_reset>
10059a0e:	4623      	mov	r3, r4
10059a10:	462c      	mov	r4, r5
10059a12:	9d01      	ldr	r5, [sp, #4]
10059a14:	9802      	ldr	r0, [sp, #8]
10059a16:	4903      	ldr	r1, [pc, #12]	@ (10059a24 <__arm_cp.5_0>)
10059a18:	5c08      	ldrb	r0, [r1, r0]
10059a1a:	3634      	adds	r6, #52	@ 0x34
10059a1c:	1c7f      	adds	r7, r7, #1
10059a1e:	e7e2      	b.n	100599e6 <L2C_cos_channel_descriptors_reset_pending+0x16>
10059a20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10059a22:	46c0      	nop			@ (mov r8, r8)

10059a24 <__arm_cp.5_0>:
10059a24:	20002ae4 	.word	0x20002ae4

10059a28 <__arm_cp.5_1>:
10059a28:	20002ac8 	.word	0x20002ac8

10059a2c <l2c_cos_csr_ucfg_weak>:
10059a2c:	2000      	movs	r0, #0
10059a2e:	4770      	bx	lr

10059a30 <L2C_cos_cfc_init_ucfg_weak>:
10059a30:	2000      	movs	r0, #0
10059a32:	4770      	bx	lr

10059a34 <l2c_cos_process_pending_actions_tsk_ucfg_weak>:
10059a34:	4770      	bx	lr

10059a36 <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>:
10059a36:	4770      	bx	lr

10059a38 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>:
10059a38:	2000      	movs	r0, #0
10059a3a:	4770      	bx	lr

10059a3c <l2c_cos_sdu_segmentation_tsk_ucfg_weak>:
10059a3c:	4770      	bx	lr

10059a3e <l2c_cos_transmit_pdu_packets_tsk_ucfg_weak>:
10059a3e:	4770      	bx	lr

10059a40 <l2cap_timers_callback_wrapper>:
10059a40:	b580      	push	{r7, lr}
10059a42:	6940      	ldr	r0, [r0, #20]
10059a44:	4901      	ldr	r1, [pc, #4]	@ (10059a4c <__arm_cp.0_0>)
10059a46:	f009 f856 	bl	10062af6 <cst_sharedCallback>
10059a4a:	bd80      	pop	{r7, pc}

10059a4c <__arm_cp.0_0>:
10059a4c:	10059a51 	.word	0x10059a51

10059a50 <l2cap_timers_callback>:
10059a50:	b580      	push	{r7, lr}
10059a52:	4903      	ldr	r1, [pc, #12]	@ (10059a60 <__arm_cp.1_0>)
10059a54:	7ac9      	ldrb	r1, [r1, #11]
10059a56:	4281      	cmp	r1, r0
10059a58:	d301      	bcc.n	10059a5e <l2cap_timers_callback+0xe>
10059a5a:	f000 fa77 	bl	10059f4c <L2C_timeout_handler_signalling>
10059a5e:	bd80      	pop	{r7, pc}

10059a60 <__arm_cp.1_0>:
10059a60:	20002ae4 	.word	0x20002ae4

10059a64 <L2C_init>:
10059a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059a66:	4605      	mov	r5, r0
10059a68:	2001      	movs	r0, #1
10059a6a:	2168      	movs	r1, #104	@ 0x68
10059a6c:	f007 f936 	bl	10060cdc <csmem_mem_0_assign>
10059a70:	4f23      	ldr	r7, [pc, #140]	@ (10059b00 <__arm_cp.3_0>)
10059a72:	6038      	str	r0, [r7, #0]
10059a74:	4e23      	ldr	r6, [pc, #140]	@ (10059b04 <__arm_cp.3_1>)
10059a76:	7af0      	ldrb	r0, [r6, #11]
10059a78:	2414      	movs	r4, #20
10059a7a:	4621      	mov	r1, r4
10059a7c:	f007 f92e 	bl	10060cdc <csmem_mem_0_assign>
10059a80:	4601      	mov	r1, r0
10059a82:	6838      	ldr	r0, [r7, #0]
10059a84:	62c1      	str	r1, [r0, #44]	@ 0x2c
10059a86:	2d01      	cmp	r5, #1
10059a88:	d110      	bne.n	10059aac <L2C_init+0x48>
10059a8a:	305c      	adds	r0, #92	@ 0x5c
10059a8c:	f009 f8ee 	bl	10062c6c <ACL_list_init>
10059a90:	2522      	movs	r5, #34	@ 0x22
10059a92:	5d70      	ldrb	r0, [r6, r5]
10059a94:	2134      	movs	r1, #52	@ 0x34
10059a96:	f007 f921 	bl	10060cdc <csmem_mem_0_assign>
10059a9a:	6839      	ldr	r1, [r7, #0]
10059a9c:	6348      	str	r0, [r1, #52]	@ 0x34
10059a9e:	5d70      	ldrb	r0, [r6, r5]
10059aa0:	0040      	lsls	r0, r0, #1
10059aa2:	2110      	movs	r1, #16
10059aa4:	f007 f91a 	bl	10060cdc <csmem_mem_0_assign>
10059aa8:	6839      	ldr	r1, [r7, #0]
10059aaa:	6488      	str	r0, [r1, #72]	@ 0x48
10059aac:	7af0      	ldrb	r0, [r6, #11]
10059aae:	1c41      	adds	r1, r0, #1
10059ab0:	4d15      	ldr	r5, [pc, #84]	@ (10059b08 <__arm_cp.3_2>)
10059ab2:	2201      	movs	r2, #1
10059ab4:	4628      	mov	r0, r5
10059ab6:	f007 f8ff 	bl	10060cb8 <csmem_mem_assign>
10059aba:	6839      	ldr	r1, [r7, #0]
10059abc:	6208      	str	r0, [r1, #32]
10059abe:	7af1      	ldrb	r1, [r6, #11]
10059ac0:	2202      	movs	r2, #2
10059ac2:	4628      	mov	r0, r5
10059ac4:	f007 f8f8 	bl	10060cb8 <csmem_mem_assign>
10059ac8:	683d      	ldr	r5, [r7, #0]
10059aca:	6268      	str	r0, [r5, #36]	@ 0x24
10059acc:	7af1      	ldrb	r1, [r6, #11]
10059ace:	4a0f      	ldr	r2, [pc, #60]	@ (10059b0c <__arm_cp.3_3>)
10059ad0:	2307      	movs	r3, #7
10059ad2:	4628      	mov	r0, r5
10059ad4:	f008 ff36 	bl	10062944 <CST_init>
10059ad8:	6838      	ldr	r0, [r7, #0]
10059ada:	2117      	movs	r1, #23
10059adc:	8501      	strh	r1, [r0, #40]	@ 0x28
10059ade:	8c31      	ldrh	r1, [r6, #32]
10059ae0:	2917      	cmp	r1, #23
10059ae2:	d201      	bcs.n	10059ae8 <L2C_init+0x84>
10059ae4:	2086      	movs	r0, #134	@ 0x86
10059ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059ae8:	8541      	strh	r1, [r0, #42]	@ 0x2a
10059aea:	7af1      	ldrb	r1, [r6, #11]
10059aec:	434c      	muls	r4, r1
10059aee:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059af0:	2100      	movs	r1, #0
10059af2:	4622      	mov	r2, r4
10059af4:	f7f8 fe42 	bl	1005277c <BLEPLAT_MemSet>
10059af8:	f7ff ff9a 	bl	10059a30 <L2C_cos_cfc_init_ucfg_weak>
10059afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10059afe:	46c0      	nop			@ (mov r8, r8)

10059b00 <__arm_cp.3_0>:
10059b00:	20002ac8 	.word	0x20002ac8

10059b04 <__arm_cp.3_1>:
10059b04:	20002ae4 	.word	0x20002ae4

10059b08 <__arm_cp.3_2>:
10059b08:	20002ae0 	.word	0x20002ae0

10059b0c <__arm_cp.3_3>:
10059b0c:	10059a41 	.word	0x10059a41

10059b10 <L2C_send_frame>:
10059b10:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10059b12:	460c      	mov	r4, r1
10059b14:	1f01      	subs	r1, r0, #4
10059b16:	4606      	mov	r6, r0
10059b18:	2902      	cmp	r1, #2
10059b1a:	d821      	bhi.n	10059b60 <L2C_send_frame+0x50>
10059b1c:	8862      	ldrh	r2, [r4, #2]
10059b1e:	2500      	movs	r5, #0
10059b20:	4620      	mov	r0, r4
10059b22:	4629      	mov	r1, r5
10059b24:	f7fb f9e7 	bl	10054ef6 <ACL_pkt_write_16b>
10059b28:	2702      	movs	r7, #2
10059b2a:	4620      	mov	r0, r4
10059b2c:	4639      	mov	r1, r7
10059b2e:	4632      	mov	r2, r6
10059b30:	f7fb f9e1 	bl	10054ef6 <ACL_pkt_write_16b>
10059b34:	8225      	strh	r5, [r4, #16]
10059b36:	81e5      	strh	r5, [r4, #14]
10059b38:	7325      	strb	r5, [r4, #12]
10059b3a:	6860      	ldr	r0, [r4, #4]
10059b3c:	6160      	str	r0, [r4, #20]
10059b3e:	61a0      	str	r0, [r4, #24]
10059b40:	8860      	ldrh	r0, [r4, #2]
10059b42:	1d00      	adds	r0, r0, #4
10059b44:	8060      	strh	r0, [r4, #2]
10059b46:	7a20      	ldrb	r0, [r4, #8]
10059b48:	4338      	orrs	r0, r7
10059b4a:	7220      	strb	r0, [r4, #8]
10059b4c:	4620      	mov	r0, r4
10059b4e:	f7fb f909 	bl	10054d64 <Acl_Transmit_Data>
10059b52:	2800      	cmp	r0, #0
10059b54:	d014      	beq.n	10059b80 <L2C_send_frame+0x70>
10059b56:	8860      	ldrh	r0, [r4, #2]
10059b58:	1f00      	subs	r0, r0, #4
10059b5a:	8060      	strh	r0, [r4, #2]
10059b5c:	2581      	movs	r5, #129	@ 0x81
10059b5e:	e00f      	b.n	10059b80 <L2C_send_frame+0x70>
10059b60:	25a0      	movs	r5, #160	@ 0xa0
10059b62:	283f      	cmp	r0, #63	@ 0x3f
10059b64:	d00c      	beq.n	10059b80 <L2C_send_frame+0x70>
10059b66:	3820      	subs	r0, #32
10059b68:	285f      	cmp	r0, #95	@ 0x5f
10059b6a:	d809      	bhi.n	10059b80 <L2C_send_frame+0x70>
10059b6c:	a801      	add	r0, sp, #4
10059b6e:	8086      	strh	r6, [r0, #4]
10059b70:	2122      	movs	r1, #34	@ 0x22
10059b72:	4a04      	ldr	r2, [pc, #16]	@ (10059b84 <__arm_cp.4_0>)
10059b74:	5c51      	ldrb	r1, [r2, r1]
10059b76:	7181      	strb	r1, [r0, #6]
10059b78:	9401      	str	r4, [sp, #4]
10059b7a:	f7ff ff5d 	bl	10059a38 <l2c_cos_sdu_enqueue_for_segmentation_ucfg_weak>
10059b7e:	4605      	mov	r5, r0
10059b80:	4628      	mov	r0, r5
10059b82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10059b84 <__arm_cp.4_0>:
10059b84:	20002ae4 	.word	0x20002ae4

10059b88 <L2C_receive_data>:
10059b88:	b5f0      	push	{r4, r5, r6, r7, lr}
10059b8a:	b0c3      	sub	sp, #268	@ 0x10c
10059b8c:	4604      	mov	r4, r0
10059b8e:	8800      	ldrh	r0, [r0, #0]
10059b90:	f7ff fe06 	bl	100597a0 <l2c_get_link_control_block_ref>
10059b94:	2800      	cmp	r0, #0
10059b96:	d07c      	beq.n	10059c92 <L2C_receive_data+0x10a>
10059b98:	4605      	mov	r5, r0
10059b9a:	7a20      	ldrb	r0, [r4, #8]
10059b9c:	2703      	movs	r7, #3
10059b9e:	4007      	ands	r7, r0
10059ba0:	6928      	ldr	r0, [r5, #16]
10059ba2:	462a      	mov	r2, r5
10059ba4:	320c      	adds	r2, #12
10059ba6:	2f02      	cmp	r7, #2
10059ba8:	9203      	str	r2, [sp, #12]
10059baa:	d108      	bne.n	10059bbe <L2C_receive_data+0x36>
10059bac:	2800      	cmp	r0, #0
10059bae:	d02f      	beq.n	10059c10 <L2C_receive_data+0x88>
10059bb0:	8811      	ldrh	r1, [r2, #0]
10059bb2:	2684      	movs	r6, #132	@ 0x84
10059bb4:	2904      	cmp	r1, #4
10059bb6:	d354      	bcc.n	10059c62 <L2C_receive_data+0xda>
10059bb8:	2101      	movs	r1, #1
10059bba:	9102      	str	r1, [sp, #8]
10059bbc:	e031      	b.n	10059c22 <L2C_receive_data+0x9a>
10059bbe:	2800      	cmp	r0, #0
10059bc0:	d04a      	beq.n	10059c58 <L2C_receive_data+0xd0>
10059bc2:	8866      	ldrh	r6, [r4, #2]
10059bc4:	2e00      	cmp	r6, #0
10059bc6:	d026      	beq.n	10059c16 <L2C_receive_data+0x8e>
10059bc8:	2100      	movs	r1, #0
10059bca:	9101      	str	r1, [sp, #4]
10059bcc:	a804      	add	r0, sp, #16
10059bce:	9002      	str	r0, [sp, #8]
10059bd0:	4620      	mov	r0, r4
10059bd2:	4632      	mov	r2, r6
10059bd4:	9b02      	ldr	r3, [sp, #8]
10059bd6:	f7fb f975 	bl	10054ec4 <ACL_pkt_read>
10059bda:	6928      	ldr	r0, [r5, #16]
10059bdc:	6840      	ldr	r0, [r0, #4]
10059bde:	9000      	str	r0, [sp, #0]
10059be0:	4620      	mov	r0, r4
10059be2:	f7fb f99a 	bl	10054f1a <ACL_pkt_extract_pdu>
10059be6:	4601      	mov	r1, r0
10059be8:	9800      	ldr	r0, [sp, #0]
10059bea:	f007 fa0a 	bl	10061002 <Mem_Buff_append>
10059bee:	89a9      	ldrh	r1, [r5, #12]
10059bf0:	6928      	ldr	r0, [r5, #16]
10059bf2:	4632      	mov	r2, r6
10059bf4:	9b02      	ldr	r3, [sp, #8]
10059bf6:	f7fb f987 	bl	10054f08 <ACL_pkt_write>
10059bfa:	89a8      	ldrh	r0, [r5, #12]
10059bfc:	1980      	adds	r0, r0, r6
10059bfe:	81a8      	strh	r0, [r5, #12]
10059c00:	b281      	uxth	r1, r0
10059c02:	6928      	ldr	r0, [r5, #16]
10059c04:	f7fb f94b 	bl	10054e9e <ACL_pkt_resize>
10059c08:	9a03      	ldr	r2, [sp, #12]
10059c0a:	9801      	ldr	r0, [sp, #4]
10059c0c:	8060      	strh	r0, [r4, #2]
10059c0e:	e002      	b.n	10059c16 <L2C_receive_data+0x8e>
10059c10:	612c      	str	r4, [r5, #16]
10059c12:	8860      	ldrh	r0, [r4, #2]
10059c14:	81a8      	strh	r0, [r5, #12]
10059c16:	8810      	ldrh	r0, [r2, #0]
10059c18:	2804      	cmp	r0, #4
10059c1a:	d31b      	bcc.n	10059c54 <L2C_receive_data+0xcc>
10059c1c:	6928      	ldr	r0, [r5, #16]
10059c1e:	2600      	movs	r6, #0
10059c20:	9602      	str	r6, [sp, #8]
10059c22:	2100      	movs	r1, #0
10059c24:	9101      	str	r1, [sp, #4]
10059c26:	f7fb f956 	bl	10054ed6 <ACL_pkt_read_16b>
10059c2a:	1d00      	adds	r0, r0, #4
10059c2c:	b281      	uxth	r1, r0
10059c2e:	89aa      	ldrh	r2, [r5, #12]
10059c30:	428a      	cmp	r2, r1
10059c32:	d816      	bhi.n	10059c62 <L2C_receive_data+0xda>
10059c34:	d112      	bne.n	10059c5c <L2C_receive_data+0xd4>
10059c36:	6929      	ldr	r1, [r5, #16]
10059c38:	8048      	strh	r0, [r1, #2]
10059c3a:	2001      	movs	r0, #1
10059c3c:	f000 f832 	bl	10059ca4 <L2C_mux_acl_packet>
10059c40:	2800      	cmp	r0, #0
10059c42:	d02d      	beq.n	10059ca0 <L2C_receive_data+0x118>
10059c44:	6928      	ldr	r0, [r5, #16]
10059c46:	2684      	movs	r6, #132	@ 0x84
10059c48:	42a0      	cmp	r0, r4
10059c4a:	d126      	bne.n	10059c9a <L2C_receive_data+0x112>
10059c4c:	9801      	ldr	r0, [sp, #4]
10059c4e:	81a8      	strh	r0, [r5, #12]
10059c50:	6128      	str	r0, [r5, #16]
10059c52:	e022      	b.n	10059c9a <L2C_receive_data+0x112>
10059c54:	2600      	movs	r6, #0
10059c56:	e018      	b.n	10059c8a <L2C_receive_data+0x102>
10059c58:	2600      	movs	r6, #0
10059c5a:	e002      	b.n	10059c62 <L2C_receive_data+0xda>
10059c5c:	9802      	ldr	r0, [sp, #8]
10059c5e:	2800      	cmp	r0, #0
10059c60:	d013      	beq.n	10059c8a <L2C_receive_data+0x102>
10059c62:	78a8      	ldrb	r0, [r5, #2]
10059c64:	2110      	movs	r1, #16
10059c66:	4301      	orrs	r1, r0
10059c68:	70a9      	strb	r1, [r5, #2]
10059c6a:	2042      	movs	r0, #66	@ 0x42
10059c6c:	2101      	movs	r1, #1
10059c6e:	2202      	movs	r2, #2
10059c70:	462b      	mov	r3, r5
10059c72:	f00a f9ff 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
10059c76:	6928      	ldr	r0, [r5, #16]
10059c78:	2800      	cmp	r0, #0
10059c7a:	d006      	beq.n	10059c8a <L2C_receive_data+0x102>
10059c7c:	f7fb f906 	bl	10054e8c <ACL_pkt_release>
10059c80:	2000      	movs	r0, #0
10059c82:	6128      	str	r0, [r5, #16]
10059c84:	9903      	ldr	r1, [sp, #12]
10059c86:	2000      	movs	r0, #0
10059c88:	8008      	strh	r0, [r1, #0]
10059c8a:	2e00      	cmp	r6, #0
10059c8c:	d105      	bne.n	10059c9a <L2C_receive_data+0x112>
10059c8e:	2f01      	cmp	r7, #1
10059c90:	d103      	bne.n	10059c9a <L2C_receive_data+0x112>
10059c92:	4620      	mov	r0, r4
10059c94:	f7fb f8fa 	bl	10054e8c <ACL_pkt_release>
10059c98:	2600      	movs	r6, #0
10059c9a:	4630      	mov	r0, r6
10059c9c:	b043      	add	sp, #268	@ 0x10c
10059c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059ca0:	9801      	ldr	r0, [sp, #4]
10059ca2:	e7ee      	b.n	10059c82 <L2C_receive_data+0xfa>

10059ca4 <L2C_mux_acl_packet>:
10059ca4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10059ca6:	460c      	mov	r4, r1
10059ca8:	4605      	mov	r5, r0
10059caa:	8848      	ldrh	r0, [r1, #2]
10059cac:	1f00      	subs	r0, r0, #4
10059cae:	8048      	strh	r0, [r1, #2]
10059cb0:	4608      	mov	r0, r1
10059cb2:	f7ff fe02 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10059cb6:	1f01      	subs	r1, r0, #4
10059cb8:	2902      	cmp	r1, #2
10059cba:	d80c      	bhi.n	10059cd6 <L2C_mux_acl_packet+0x32>
10059cbc:	2806      	cmp	r0, #6
10059cbe:	d01a      	beq.n	10059cf6 <L2C_mux_acl_packet+0x52>
10059cc0:	2805      	cmp	r0, #5
10059cc2:	d01d      	beq.n	10059d00 <L2C_mux_acl_packet+0x5c>
10059cc4:	2804      	cmp	r0, #4
10059cc6:	d111      	bne.n	10059cec <L2C_mux_acl_packet+0x48>
10059cc8:	2004      	movs	r0, #4
10059cca:	81a0      	strh	r0, [r4, #12]
10059ccc:	4628      	mov	r0, r5
10059cce:	4621      	mov	r1, r4
10059cd0:	f7fc ff2c 	bl	10056b2c <GAT_att_cmn_rcv>
10059cd4:	e018      	b.n	10059d08 <L2C_mux_acl_packet+0x64>
10059cd6:	283f      	cmp	r0, #63	@ 0x3f
10059cd8:	d008      	beq.n	10059cec <L2C_mux_acl_packet+0x48>
10059cda:	3820      	subs	r0, #32
10059cdc:	285f      	cmp	r0, #95	@ 0x5f
10059cde:	d805      	bhi.n	10059cec <L2C_mux_acl_packet+0x48>
10059ce0:	4668      	mov	r0, sp
10059ce2:	7005      	strb	r5, [r0, #0]
10059ce4:	9401      	str	r4, [sp, #4]
10059ce6:	f00b fb8b 	bl	10065400 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>
10059cea:	e00d      	b.n	10059d08 <L2C_mux_acl_packet+0x64>
10059cec:	4628      	mov	r0, r5
10059cee:	4621      	mov	r1, r4
10059cf0:	f7ff fdde 	bl	100598b0 <l2c_release_unexpected_acl_packet>
10059cf4:	e00e      	b.n	10059d14 <L2C_mux_acl_packet+0x70>
10059cf6:	4628      	mov	r0, r5
10059cf8:	4621      	mov	r1, r4
10059cfa:	f008 fb8d 	bl	10062418 <smp_sap_l2c_acl_data_hndl>
10059cfe:	e003      	b.n	10059d08 <L2C_mux_acl_packet+0x64>
10059d00:	4628      	mov	r0, r5
10059d02:	4621      	mov	r1, r4
10059d04:	f000 f808 	bl	10059d18 <L2C_acl_cframe_signaling_hndl>
10059d08:	2800      	cmp	r0, #0
10059d0a:	d003      	beq.n	10059d14 <L2C_mux_acl_packet+0x70>
10059d0c:	8861      	ldrh	r1, [r4, #2]
10059d0e:	1d09      	adds	r1, r1, #4
10059d10:	8061      	strh	r1, [r4, #2]
10059d12:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10059d14:	2000      	movs	r0, #0
10059d16:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10059d18 <L2C_acl_cframe_signaling_hndl>:
10059d18:	b5f0      	push	{r4, r5, r6, r7, lr}
10059d1a:	b085      	sub	sp, #20
10059d1c:	460c      	mov	r4, r1
10059d1e:	4606      	mov	r6, r0
10059d20:	880f      	ldrh	r7, [r1, #0]
10059d22:	4638      	mov	r0, r7
10059d24:	f7ff fd58 	bl	100597d8 <l2c_get_link_control_block_index>
10059d28:	4605      	mov	r5, r0
10059d2a:	4880      	ldr	r0, [pc, #512]	@ (10059f2c <__arm_cp.7_0>)
10059d2c:	7ac1      	ldrb	r1, [r0, #11]
10059d2e:	428d      	cmp	r5, r1
10059d30:	d206      	bcs.n	10059d40 <L2C_acl_cframe_signaling_hndl+0x28>
10059d32:	2014      	movs	r0, #20
10059d34:	4368      	muls	r0, r5
10059d36:	4a7e      	ldr	r2, [pc, #504]	@ (10059f30 <__arm_cp.7_1>)
10059d38:	6812      	ldr	r2, [r2, #0]
10059d3a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10059d3c:	1810      	adds	r0, r2, r0
10059d3e:	9002      	str	r0, [sp, #8]
10059d40:	6862      	ldr	r2, [r4, #4]
10059d42:	7a10      	ldrb	r0, [r2, #8]
10059d44:	2300      	movs	r3, #0
10059d46:	2e01      	cmp	r6, #1
10059d48:	d01c      	beq.n	10059d84 <L2C_acl_cframe_signaling_hndl+0x6c>
10059d4a:	2e00      	cmp	r6, #0
10059d4c:	d13c      	bne.n	10059dc8 <L2C_acl_cframe_signaling_hndl+0xb0>
10059d4e:	461e      	mov	r6, r3
10059d50:	428d      	cmp	r5, r1
10059d52:	d212      	bcs.n	10059d7a <L2C_acl_cframe_signaling_hndl+0x62>
10059d54:	2819      	cmp	r0, #25
10059d56:	d80b      	bhi.n	10059d70 <L2C_acl_cframe_signaling_hndl+0x58>
10059d58:	2101      	movs	r1, #1
10059d5a:	4081      	lsls	r1, r0
10059d5c:	4879      	ldr	r0, [pc, #484]	@ (10059f44 <__arm_cp.7_6>)
10059d5e:	4201      	tst	r1, r0
10059d60:	d006      	beq.n	10059d70 <L2C_acl_cframe_signaling_hndl+0x58>
10059d62:	4873      	ldr	r0, [pc, #460]	@ (10059f30 <__arm_cp.7_1>)
10059d64:	6800      	ldr	r0, [r0, #0]
10059d66:	2201      	movs	r2, #1
10059d68:	4b77      	ldr	r3, [pc, #476]	@ (10059f48 <__arm_cp.7_7>)
10059d6a:	4629      	mov	r1, r5
10059d6c:	f008 fe35 	bl	100629da <CST_start>
10059d70:	9a02      	ldr	r2, [sp, #8]
10059d72:	7890      	ldrb	r0, [r2, #2]
10059d74:	21fd      	movs	r1, #253	@ 0xfd
10059d76:	4001      	ands	r1, r0
10059d78:	7091      	strb	r1, [r2, #2]
10059d7a:	4620      	mov	r0, r4
10059d7c:	f7fb f886 	bl	10054e8c <ACL_pkt_release>
10059d80:	4630      	mov	r0, r6
10059d82:	e0d0      	b.n	10059f26 <L2C_acl_cframe_signaling_hndl+0x20e>
10059d84:	428d      	cmp	r5, r1
10059d86:	d300      	bcc.n	10059d8a <L2C_acl_cframe_signaling_hndl+0x72>
10059d88:	e0c8      	b.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059d8a:	7a56      	ldrb	r6, [r2, #9]
10059d8c:	2813      	cmp	r0, #19
10059d8e:	d81d      	bhi.n	10059dcc <L2C_acl_cframe_signaling_hndl+0xb4>
10059d90:	2101      	movs	r1, #1
10059d92:	9100      	str	r1, [sp, #0]
10059d94:	4081      	lsls	r1, r0
10059d96:	4a67      	ldr	r2, [pc, #412]	@ (10059f34 <__arm_cp.7_2>)
10059d98:	4211      	tst	r1, r2
10059d9a:	d017      	beq.n	10059dcc <L2C_acl_cframe_signaling_hndl+0xb4>
10059d9c:	2801      	cmp	r0, #1
10059d9e:	d021      	beq.n	10059de4 <L2C_acl_cframe_signaling_hndl+0xcc>
10059da0:	2114      	movs	r1, #20
10059da2:	4a63      	ldr	r2, [pc, #396]	@ (10059f30 <__arm_cp.7_1>)
10059da4:	6812      	ldr	r2, [r2, #0]
10059da6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
10059da8:	2813      	cmp	r0, #19
10059daa:	d03e      	beq.n	10059e2a <L2C_acl_cframe_signaling_hndl+0x112>
10059dac:	2812      	cmp	r0, #18
10059dae:	d000      	beq.n	10059db2 <L2C_acl_cframe_signaling_hndl+0x9a>
10059db0:	e0b4      	b.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059db2:	9301      	str	r3, [sp, #4]
10059db4:	4608      	mov	r0, r1
10059db6:	4368      	muls	r0, r5
10059db8:	1810      	adds	r0, r2, r0
10059dba:	7883      	ldrb	r3, [r0, #2]
10059dbc:	07df      	lsls	r7, r3, #31
10059dbe:	d166      	bne.n	10059e8e <L2C_acl_cframe_signaling_hndl+0x176>
10059dc0:	7146      	strb	r6, [r0, #5]
10059dc2:	8820      	ldrh	r0, [r4, #0]
10059dc4:	2200      	movs	r2, #0
10059dc6:	e09d      	b.n	10059f04 <L2C_acl_cframe_signaling_hndl+0x1ec>
10059dc8:	4618      	mov	r0, r3
10059dca:	e0ac      	b.n	10059f26 <L2C_acl_cframe_signaling_hndl+0x20e>
10059dcc:	9301      	str	r3, [sp, #4]
10059dce:	f00b fb15 	bl	100653fc <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>
10059dd2:	2800      	cmp	r0, #0
10059dd4:	d100      	bne.n	10059dd8 <L2C_acl_cframe_signaling_hndl+0xc0>
10059dd6:	e091      	b.n	10059efc <L2C_acl_cframe_signaling_hndl+0x1e4>
10059dd8:	a803      	add	r0, sp, #12
10059dda:	7105      	strb	r5, [r0, #4]
10059ddc:	9403      	str	r4, [sp, #12]
10059dde:	f00b fb0b 	bl	100653f8 <L2C_cos_process_cfc_mode_command_ucfg_weak>
10059de2:	e093      	b.n	10059f0c <L2C_acl_cframe_signaling_hndl+0x1f4>
10059de4:	2701      	movs	r7, #1
10059de6:	4628      	mov	r0, r5
10059de8:	4639      	mov	r1, r7
10059dea:	4632      	mov	r2, r6
10059dec:	9301      	str	r3, [sp, #4]
10059dee:	f7ff fd2f 	bl	10059850 <l2c_pre_process_incoming_response_packet>
10059df2:	9b01      	ldr	r3, [sp, #4]
10059df4:	2800      	cmp	r0, #0
10059df6:	d000      	beq.n	10059dfa <L2C_acl_cframe_signaling_hndl+0xe2>
10059df8:	e090      	b.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059dfa:	8826      	ldrh	r6, [r4, #0]
10059dfc:	484e      	ldr	r0, [pc, #312]	@ (10059f38 <__arm_cp.7_3>)
10059dfe:	6800      	ldr	r0, [r0, #0]
10059e00:	6980      	ldr	r0, [r0, #24]
10059e02:	2142      	movs	r1, #66	@ 0x42
10059e04:	2252      	movs	r2, #82	@ 0x52
10059e06:	2303      	movs	r3, #3
10059e08:	f7fb f9f4 	bl	100551f4 <aci_event_fifo_push_header>
10059e0c:	9b01      	ldr	r3, [sp, #4]
10059e0e:	2800      	cmp	r0, #0
10059e10:	d100      	bne.n	10059e14 <L2C_acl_cframe_signaling_hndl+0xfc>
10059e12:	e083      	b.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059e14:	4605      	mov	r5, r0
10059e16:	4631      	mov	r1, r6
10059e18:	1d06      	adds	r6, r0, #4
10059e1a:	4630      	mov	r0, r6
10059e1c:	4622      	mov	r2, r4
10059e1e:	f7fb fd79 	bl	10055914 <aci_l2cap_command_reject_event_copy>
10059e22:	02f8      	lsls	r0, r7, #11
10059e24:	300a      	adds	r0, #10
10059e26:	2108      	movs	r1, #8
10059e28:	e058      	b.n	10059edc <L2C_acl_cframe_signaling_hndl+0x1c4>
10059e2a:	4369      	muls	r1, r5
10059e2c:	1850      	adds	r0, r2, r1
10059e2e:	7880      	ldrb	r0, [r0, #2]
10059e30:	07c0      	lsls	r0, r0, #31
10059e32:	d173      	bne.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059e34:	2113      	movs	r1, #19
10059e36:	4628      	mov	r0, r5
10059e38:	4632      	mov	r2, r6
10059e3a:	9301      	str	r3, [sp, #4]
10059e3c:	f7ff fd08 	bl	10059850 <l2c_pre_process_incoming_response_packet>
10059e40:	9b01      	ldr	r3, [sp, #4]
10059e42:	2800      	cmp	r0, #0
10059e44:	d16a      	bne.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059e46:	2108      	movs	r1, #8
10059e48:	4620      	mov	r0, r4
10059e4a:	f7fb f844 	bl	10054ed6 <ACL_pkt_read_16b>
10059e4e:	9b01      	ldr	r3, [sp, #4]
10059e50:	4606      	mov	r6, r0
10059e52:	483a      	ldr	r0, [pc, #232]	@ (10059f3c <__arm_cp.7_4>)
10059e54:	6800      	ldr	r0, [r0, #0]
10059e56:	214f      	movs	r1, #79	@ 0x4f
10059e58:	5c40      	ldrb	r0, [r0, r1]
10059e5a:	0780      	lsls	r0, r0, #30
10059e5c:	d55e      	bpl.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059e5e:	8827      	ldrh	r7, [r4, #0]
10059e60:	4835      	ldr	r0, [pc, #212]	@ (10059f38 <__arm_cp.7_3>)
10059e62:	6800      	ldr	r0, [r0, #0]
10059e64:	6980      	ldr	r0, [r0, #24]
10059e66:	2142      	movs	r1, #66	@ 0x42
10059e68:	224c      	movs	r2, #76	@ 0x4c
10059e6a:	2303      	movs	r3, #3
10059e6c:	f7fb f9c2 	bl	100551f4 <aci_event_fifo_push_header>
10059e70:	9b01      	ldr	r3, [sp, #4]
10059e72:	2800      	cmp	r0, #0
10059e74:	d052      	beq.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059e76:	4605      	mov	r5, r0
10059e78:	7306      	strb	r6, [r0, #12]
10059e7a:	7287      	strb	r7, [r0, #10]
10059e7c:	0a30      	lsrs	r0, r6, #8
10059e7e:	7368      	strb	r0, [r5, #13]
10059e80:	0a38      	lsrs	r0, r7, #8
10059e82:	72e8      	strb	r0, [r5, #11]
10059e84:	1d2e      	adds	r6, r5, #4
10059e86:	9800      	ldr	r0, [sp, #0]
10059e88:	02c0      	lsls	r0, r0, #11
10059e8a:	2106      	movs	r1, #6
10059e8c:	e026      	b.n	10059edc <L2C_acl_cframe_signaling_hndl+0x1c4>
10059e8e:	0758      	lsls	r0, r3, #29
10059e90:	9b01      	ldr	r3, [sp, #4]
10059e92:	d443      	bmi.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059e94:	4369      	muls	r1, r5
10059e96:	1852      	adds	r2, r2, r1
10059e98:	2012      	movs	r0, #18
10059e9a:	4631      	mov	r1, r6
10059e9c:	f7ff fcd1 	bl	10059842 <l2c_post_process_incoming_request_packet>
10059ea0:	9b01      	ldr	r3, [sp, #4]
10059ea2:	4826      	ldr	r0, [pc, #152]	@ (10059f3c <__arm_cp.7_4>)
10059ea4:	6800      	ldr	r0, [r0, #0]
10059ea6:	214f      	movs	r1, #79	@ 0x4f
10059ea8:	5c40      	ldrb	r0, [r0, r1]
10059eaa:	07c0      	lsls	r0, r0, #31
10059eac:	d036      	beq.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059eae:	8827      	ldrh	r7, [r4, #0]
10059eb0:	4821      	ldr	r0, [pc, #132]	@ (10059f38 <__arm_cp.7_3>)
10059eb2:	6800      	ldr	r0, [r0, #0]
10059eb4:	6980      	ldr	r0, [r0, #24]
10059eb6:	2142      	movs	r1, #66	@ 0x42
10059eb8:	224d      	movs	r2, #77	@ 0x4d
10059eba:	2305      	movs	r3, #5
10059ebc:	f7fb f99a 	bl	100551f4 <aci_event_fifo_push_header>
10059ec0:	9b01      	ldr	r3, [sp, #4]
10059ec2:	2800      	cmp	r0, #0
10059ec4:	d02a      	beq.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059ec6:	4605      	mov	r5, r0
10059ec8:	1d06      	adds	r6, r0, #4
10059eca:	4630      	mov	r0, r6
10059ecc:	4639      	mov	r1, r7
10059ece:	4622      	mov	r2, r4
10059ed0:	f7fb fcd8 	bl	10055884 <aci_l2cap_connection_update_req_event_copy>
10059ed4:	9800      	ldr	r0, [sp, #0]
10059ed6:	02c0      	lsls	r0, r0, #11
10059ed8:	1c80      	adds	r0, r0, #2
10059eda:	210f      	movs	r1, #15
10059edc:	22ff      	movs	r2, #255	@ 0xff
10059ede:	7072      	strb	r2, [r6, #1]
10059ee0:	2282      	movs	r2, #130	@ 0x82
10059ee2:	7032      	strb	r2, [r6, #0]
10059ee4:	0a02      	lsrs	r2, r0, #8
10059ee6:	726a      	strb	r2, [r5, #9]
10059ee8:	7228      	strb	r0, [r5, #8]
10059eea:	2000      	movs	r0, #0
10059eec:	71e8      	strb	r0, [r5, #7]
10059eee:	71a9      	strb	r1, [r5, #6]
10059ef0:	2042      	movs	r0, #66	@ 0x42
10059ef2:	4629      	mov	r1, r5
10059ef4:	f7fb fa1b 	bl	1005532e <aci_event_fifo_push>
10059ef8:	9b01      	ldr	r3, [sp, #4]
10059efa:	e00f      	b.n	10059f1c <L2C_acl_cframe_signaling_hndl+0x204>
10059efc:	9802      	ldr	r0, [sp, #8]
10059efe:	7146      	strb	r6, [r0, #5]
10059f00:	2200      	movs	r2, #0
10059f02:	4638      	mov	r0, r7
10059f04:	4631      	mov	r1, r6
10059f06:	4613      	mov	r3, r2
10059f08:	f7ff fcdc 	bl	100598c4 <L2C_build_command_reject_pdu>
10059f0c:	9b01      	ldr	r3, [sp, #4]
10059f0e:	2812      	cmp	r0, #18
10059f10:	d809      	bhi.n	10059f26 <L2C_acl_cframe_signaling_hndl+0x20e>
10059f12:	2101      	movs	r1, #1
10059f14:	4081      	lsls	r1, r0
10059f16:	4a0a      	ldr	r2, [pc, #40]	@ (10059f40 <__arm_cp.7_5>)
10059f18:	4211      	tst	r1, r2
10059f1a:	d004      	beq.n	10059f26 <L2C_acl_cframe_signaling_hndl+0x20e>
10059f1c:	4620      	mov	r0, r4
10059f1e:	461c      	mov	r4, r3
10059f20:	f7fa ffb4 	bl	10054e8c <ACL_pkt_release>
10059f24:	4620      	mov	r0, r4
10059f26:	b005      	add	sp, #20
10059f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
10059f2a:	46c0      	nop			@ (mov r8, r8)

10059f2c <__arm_cp.7_0>:
10059f2c:	20002ae4 	.word	0x20002ae4

10059f30 <__arm_cp.7_1>:
10059f30:	20002ac8 	.word	0x20002ac8

10059f34 <__arm_cp.7_2>:
10059f34:	000c0002 	.word	0x000c0002

10059f38 <__arm_cp.7_3>:
10059f38:	20002a80 	.word	0x20002a80

10059f3c <__arm_cp.7_4>:
10059f3c:	20002ad0 	.word	0x20002ad0

10059f40 <__arm_cp.7_5>:
10059f40:	00040005 	.word	0x00040005

10059f44 <__arm_cp.7_6>:
10059f44:	02940040 	.word	0x02940040

10059f48 <__arm_cp.7_7>:
10059f48:	00007530 	.word	0x00007530

10059f4c <L2C_timeout_handler_signalling>:
10059f4c:	b570      	push	{r4, r5, r6, lr}
10059f4e:	2414      	movs	r4, #20
10059f50:	4344      	muls	r4, r0
10059f52:	4d14      	ldr	r5, [pc, #80]	@ (10059fa4 <__arm_cp.8_0>)
10059f54:	4814      	ldr	r0, [pc, #80]	@ (10059fa8 <__arm_cp.8_1>)
10059f56:	6800      	ldr	r0, [r0, #0]
10059f58:	214f      	movs	r1, #79	@ 0x4f
10059f5a:	5c40      	ldrb	r0, [r0, r1]
10059f5c:	0700      	lsls	r0, r0, #28
10059f5e:	d513      	bpl.n	10059f88 <L2C_timeout_handler_signalling+0x3c>
10059f60:	6828      	ldr	r0, [r5, #0]
10059f62:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059f64:	5b06      	ldrh	r6, [r0, r4]
10059f66:	4811      	ldr	r0, [pc, #68]	@ (10059fac <__arm_cp.8_2>)
10059f68:	6800      	ldr	r0, [r0, #0]
10059f6a:	6980      	ldr	r0, [r0, #24]
10059f6c:	2206      	movs	r2, #6
10059f6e:	2102      	movs	r1, #2
10059f70:	460b      	mov	r3, r1
10059f72:	f7fb f93f 	bl	100551f4 <aci_event_fifo_push_header>
10059f76:	2800      	cmp	r0, #0
10059f78:	d006      	beq.n	10059f88 <L2C_timeout_handler_signalling+0x3c>
10059f7a:	4601      	mov	r1, r0
10059f7c:	480c      	ldr	r0, [pc, #48]	@ (10059fb0 <__arm_cp.8_3>)
10059f7e:	6048      	str	r0, [r1, #4]
10059f80:	810e      	strh	r6, [r1, #8]
10059f82:	2002      	movs	r0, #2
10059f84:	f7fb f9d3 	bl	1005532e <aci_event_fifo_push>
10059f88:	6828      	ldr	r0, [r5, #0]
10059f8a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059f8c:	1901      	adds	r1, r0, r4
10059f8e:	2200      	movs	r2, #0
10059f90:	718a      	strb	r2, [r1, #6]
10059f92:	788a      	ldrb	r2, [r1, #2]
10059f94:	23f9      	movs	r3, #249	@ 0xf9
10059f96:	4013      	ands	r3, r2
10059f98:	708b      	strb	r3, [r1, #2]
10059f9a:	5b00      	ldrh	r0, [r0, r4]
10059f9c:	21ff      	movs	r1, #255	@ 0xff
10059f9e:	f7ff fd17 	bl	100599d0 <L2C_cos_channel_descriptors_reset_pending>
10059fa2:	bd70      	pop	{r4, r5, r6, pc}

10059fa4 <__arm_cp.8_0>:
10059fa4:	20002ac8 	.word	0x20002ac8

10059fa8 <__arm_cp.8_1>:
10059fa8:	20002ad0 	.word	0x20002ad0

10059fac <__arm_cp.8_2>:
10059fac:	20002a80 	.word	0x20002a80

10059fb0 <__arm_cp.8_3>:
10059fb0:	1006403d 	.word	0x1006403d

10059fb4 <l2c_sap_hci_le_connection_complete_evt_hndl>:
10059fb4:	b5b0      	push	{r4, r5, r7, lr}
10059fb6:	460c      	mov	r4, r1
10059fb8:	4605      	mov	r5, r0
10059fba:	2000      	movs	r0, #0
10059fbc:	f7ff fbf0 	bl	100597a0 <l2c_get_link_control_block_ref>
10059fc0:	2800      	cmp	r0, #0
10059fc2:	d005      	beq.n	10059fd0 <l2c_sap_hci_le_connection_complete_evt_hndl+0x1c>
10059fc4:	2101      	movs	r1, #1
10059fc6:	8081      	strh	r1, [r0, #4]
10059fc8:	8005      	strh	r5, [r0, #0]
10059fca:	4261      	negs	r1, r4
10059fcc:	4161      	adcs	r1, r4
10059fce:	7081      	strb	r1, [r0, #2]
10059fd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

10059fd4 <l2c_sap_hci_disconnection_complete_evt_hndl>:
10059fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10059fd6:	4604      	mov	r4, r0
10059fd8:	f7ff fbfe 	bl	100597d8 <l2c_get_link_control_block_index>
10059fdc:	4605      	mov	r5, r0
10059fde:	4810      	ldr	r0, [pc, #64]	@ (1005a020 <__arm_cp.1_0>)
10059fe0:	7ac0      	ldrb	r0, [r0, #11]
10059fe2:	4285      	cmp	r5, r0
10059fe4:	d21b      	bcs.n	1005a01e <l2c_sap_hci_disconnection_complete_evt_hndl+0x4a>
10059fe6:	4e0f      	ldr	r6, [pc, #60]	@ (1005a024 <__arm_cp.1_1>)
10059fe8:	6830      	ldr	r0, [r6, #0]
10059fea:	4629      	mov	r1, r5
10059fec:	f008 fcbf 	bl	1006296e <CST_stop>
10059ff0:	2714      	movs	r7, #20
10059ff2:	436f      	muls	r7, r5
10059ff4:	6830      	ldr	r0, [r6, #0]
10059ff6:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
10059ff8:	2500      	movs	r5, #0
10059ffa:	53c5      	strh	r5, [r0, r7]
10059ffc:	19c0      	adds	r0, r0, r7
10059ffe:	6900      	ldr	r0, [r0, #16]
1005a000:	2800      	cmp	r0, #0
1005a002:	d009      	beq.n	1005a018 <l2c_sap_hci_disconnection_complete_evt_hndl+0x44>
1005a004:	f7fa ff42 	bl	10054e8c <ACL_pkt_release>
1005a008:	6830      	ldr	r0, [r6, #0]
1005a00a:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005a00c:	19c0      	adds	r0, r0, r7
1005a00e:	6105      	str	r5, [r0, #16]
1005a010:	6830      	ldr	r0, [r6, #0]
1005a012:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
1005a014:	19c0      	adds	r0, r0, r7
1005a016:	8185      	strh	r5, [r0, #12]
1005a018:	4620      	mov	r0, r4
1005a01a:	f7ff fd0c 	bl	10059a36 <L2C_cos_physical_link_disconnection_hndl_ucfg_weak>
1005a01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a020 <__arm_cp.1_0>:
1005a020:	20002ae4 	.word	0x20002ae4

1005a024 <__arm_cp.1_1>:
1005a024:	20002ac8 	.word	0x20002ac8

1005a028 <llc_cig_cmn_start_cis_ucfg_weak>:
1005a028:	4770      	bx	lr

1005a02a <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>:
1005a02a:	4770      	bx	lr

1005a02c <llc_conn_get_cntxt_p>:
1005a02c:	4803      	ldr	r0, [pc, #12]	@ (1005a03c <__arm_cp.0_0>)
1005a02e:	6800      	ldr	r0, [r0, #0]
1005a030:	219c      	movs	r1, #156	@ 0x9c
1005a032:	5840      	ldr	r0, [r0, r1]
1005a034:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a036:	6800      	ldr	r0, [r0, #0]
1005a038:	4770      	bx	lr
1005a03a:	46c0      	nop			@ (mov r8, r8)

1005a03c <__arm_cp.0_0>:
1005a03c:	20002ad0 	.word	0x20002ad0

1005a040 <llc_conn_get_cntxt_per_p>:
1005a040:	214d      	movs	r1, #77	@ 0x4d
1005a042:	0089      	lsls	r1, r1, #2
1005a044:	4341      	muls	r1, r0
1005a046:	4804      	ldr	r0, [pc, #16]	@ (1005a058 <__arm_cp.1_0>)
1005a048:	6800      	ldr	r0, [r0, #0]
1005a04a:	229c      	movs	r2, #156	@ 0x9c
1005a04c:	5880      	ldr	r0, [r0, r2]
1005a04e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a050:	6840      	ldr	r0, [r0, #4]
1005a052:	1840      	adds	r0, r0, r1
1005a054:	4770      	bx	lr
1005a056:	46c0      	nop			@ (mov r8, r8)

1005a058 <__arm_cp.1_0>:
1005a058:	20002ad0 	.word	0x20002ad0

1005a05c <llc_conn_get_cntxt_per_p_from_handle>:
1005a05c:	b510      	push	{r4, lr}
1005a05e:	4601      	mov	r1, r0
1005a060:	2000      	movs	r0, #0
1005a062:	4a0d      	ldr	r2, [pc, #52]	@ (1005a098 <__arm_cp.2_0>)
1005a064:	4291      	cmp	r1, r2
1005a066:	d015      	beq.n	1005a094 <llc_conn_get_cntxt_per_p_from_handle+0x38>
1005a068:	4a0c      	ldr	r2, [pc, #48]	@ (1005a09c <__arm_cp.2_1>)
1005a06a:	6812      	ldr	r2, [r2, #0]
1005a06c:	2334      	movs	r3, #52	@ 0x34
1005a06e:	5cd2      	ldrb	r2, [r2, r3]
1005a070:	1c52      	adds	r2, r2, #1
1005a072:	4b0b      	ldr	r3, [pc, #44]	@ (1005a0a0 <__arm_cp.2_2>)
1005a074:	681b      	ldr	r3, [r3, #0]
1005a076:	249c      	movs	r4, #156	@ 0x9c
1005a078:	591b      	ldr	r3, [r3, r4]
1005a07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
1005a07c:	685b      	ldr	r3, [r3, #4]
1005a07e:	1e52      	subs	r2, r2, #1
1005a080:	d008      	beq.n	1005a094 <llc_conn_get_cntxt_per_p_from_handle+0x38>
1005a082:	244d      	movs	r4, #77	@ 0x4d
1005a084:	00a4      	lsls	r4, r4, #2
1005a086:	191c      	adds	r4, r3, r4
1005a088:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
1005a08a:	428b      	cmp	r3, r1
1005a08c:	4623      	mov	r3, r4
1005a08e:	d1f6      	bne.n	1005a07e <llc_conn_get_cntxt_per_p_from_handle+0x22>
1005a090:	4804      	ldr	r0, [pc, #16]	@ (1005a0a4 <__arm_cp.2_3>)
1005a092:	1820      	adds	r0, r4, r0
1005a094:	bd10      	pop	{r4, pc}
1005a096:	46c0      	nop			@ (mov r8, r8)

1005a098 <__arm_cp.2_0>:
1005a098:	0000ffff 	.word	0x0000ffff

1005a09c <__arm_cp.2_1>:
1005a09c:	20002a7c 	.word	0x20002a7c

1005a0a0 <__arm_cp.2_2>:
1005a0a0:	20002ad0 	.word	0x20002ad0

1005a0a4 <__arm_cp.2_3>:
1005a0a4:	fffffecc 	.word	0xfffffecc

1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>:
1005a0a8:	b510      	push	{r4, lr}
1005a0aa:	4604      	mov	r4, r0
1005a0ac:	f7f4 fdec 	bl	1004ec88 <phy_upd_csr_ucfg>
1005a0b0:	2801      	cmp	r0, #1
1005a0b2:	d109      	bne.n	1005a0c8 <llc_conn_get_phy_upd_cntxt_per_p+0x20>
1005a0b4:	200e      	movs	r0, #14
1005a0b6:	4360      	muls	r0, r4
1005a0b8:	4904      	ldr	r1, [pc, #16]	@ (1005a0cc <__arm_cp.7_0>)
1005a0ba:	6809      	ldr	r1, [r1, #0]
1005a0bc:	229c      	movs	r2, #156	@ 0x9c
1005a0be:	5889      	ldr	r1, [r1, r2]
1005a0c0:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a0c2:	6949      	ldr	r1, [r1, #20]
1005a0c4:	1808      	adds	r0, r1, r0
1005a0c6:	bd10      	pop	{r4, pc}
1005a0c8:	2000      	movs	r0, #0
1005a0ca:	bd10      	pop	{r4, pc}

1005a0cc <__arm_cp.7_0>:
1005a0cc:	20002ad0 	.word	0x20002ad0

1005a0d0 <llc_conn_init>:
1005a0d0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a0d2:	4c3e      	ldr	r4, [pc, #248]	@ (1005a1cc <__arm_cp.8_0>)
1005a0d4:	6820      	ldr	r0, [r4, #0]
1005a0d6:	259c      	movs	r5, #156	@ 0x9c
1005a0d8:	5940      	ldr	r0, [r0, r5]
1005a0da:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a0dc:	6803      	ldr	r3, [r0, #0]
1005a0de:	2136      	movs	r1, #54	@ 0x36
1005a0e0:	2600      	movs	r6, #0
1005a0e2:	545e      	strb	r6, [r3, r1]
1005a0e4:	493a      	ldr	r1, [pc, #232]	@ (1005a1d0 <__arm_cp.8_1>)
1005a0e6:	6949      	ldr	r1, [r1, #20]
1005a0e8:	0c0a      	lsrs	r2, r1, #16
1005a0ea:	2a19      	cmp	r2, #25
1005a0ec:	d301      	bcc.n	1005a0f2 <llc_conn_init+0x22>
1005a0ee:	2119      	movs	r1, #25
1005a0f0:	0409      	lsls	r1, r1, #16
1005a0f2:	6059      	str	r1, [r3, #4]
1005a0f4:	6019      	str	r1, [r3, #0]
1005a0f6:	6900      	ldr	r0, [r0, #16]
1005a0f8:	9302      	str	r3, [sp, #8]
1005a0fa:	6098      	str	r0, [r3, #8]
1005a0fc:	f000 fad0 	bl	1005a6a0 <llc_conn_list_reset>
1005a100:	6820      	ldr	r0, [r4, #0]
1005a102:	5940      	ldr	r0, [r0, r5]
1005a104:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a106:	6807      	ldr	r7, [r0, #0]
1005a108:	f7ff fac4 	bl	10059694 <data_length_extension_csr_ucfg_weak>
1005a10c:	2801      	cmp	r0, #1
1005a10e:	d001      	beq.n	1005a114 <llc_conn_init+0x44>
1005a110:	201b      	movs	r0, #27
1005a112:	e000      	b.n	1005a116 <llc_conn_init+0x46>
1005a114:	20fb      	movs	r0, #251	@ 0xfb
1005a116:	82b8      	strh	r0, [r7, #20]
1005a118:	f7ff fabc 	bl	10059694 <data_length_extension_csr_ucfg_weak>
1005a11c:	4604      	mov	r4, r0
1005a11e:	2029      	movs	r0, #41	@ 0x29
1005a120:	00c0      	lsls	r0, r0, #3
1005a122:	9000      	str	r0, [sp, #0]
1005a124:	20a9      	movs	r0, #169	@ 0xa9
1005a126:	0105      	lsls	r5, r0, #4
1005a128:	f7f4 fdae 	bl	1004ec88 <phy_upd_csr_ucfg>
1005a12c:	2c01      	cmp	r4, #1
1005a12e:	9501      	str	r5, [sp, #4]
1005a130:	d107      	bne.n	1005a142 <llc_conn_init+0x72>
1005a132:	2801      	cmp	r0, #1
1005a134:	4d27      	ldr	r5, [pc, #156]	@ (1005a1d4 <__arm_cp.8_2>)
1005a136:	9c00      	ldr	r4, [sp, #0]
1005a138:	d00c      	beq.n	1005a154 <llc_conn_init+0x84>
1005a13a:	4d27      	ldr	r5, [pc, #156]	@ (1005a1d8 <__arm_cp.8_3>)
1005a13c:	f7ff fa4e 	bl	100595dc <cte_csr_ucfg_weak>
1005a140:	e005      	b.n	1005a14e <llc_conn_init+0x7e>
1005a142:	2801      	cmp	r0, #1
1005a144:	9c00      	ldr	r4, [sp, #0]
1005a146:	d005      	beq.n	1005a154 <llc_conn_init+0x84>
1005a148:	f7ff fa48 	bl	100595dc <cte_csr_ucfg_weak>
1005a14c:	4625      	mov	r5, r4
1005a14e:	2801      	cmp	r0, #1
1005a150:	d100      	bne.n	1005a154 <llc_conn_init+0x84>
1005a152:	3508      	adds	r5, #8
1005a154:	82fd      	strh	r5, [r7, #22]
1005a156:	f7ff fa9d 	bl	10059694 <data_length_extension_csr_ucfg_weak>
1005a15a:	2801      	cmp	r0, #1
1005a15c:	d001      	beq.n	1005a162 <llc_conn_init+0x92>
1005a15e:	201b      	movs	r0, #27
1005a160:	e000      	b.n	1005a164 <llc_conn_init+0x94>
1005a162:	20fb      	movs	r0, #251	@ 0xfb
1005a164:	8338      	strh	r0, [r7, #24]
1005a166:	f7ff fa95 	bl	10059694 <data_length_extension_csr_ucfg_weak>
1005a16a:	4605      	mov	r5, r0
1005a16c:	f7f4 fd8c 	bl	1004ec88 <phy_upd_csr_ucfg>
1005a170:	2d01      	cmp	r5, #1
1005a172:	d107      	bne.n	1005a184 <llc_conn_init+0xb4>
1005a174:	2801      	cmp	r0, #1
1005a176:	9d01      	ldr	r5, [sp, #4]
1005a178:	4916      	ldr	r1, [pc, #88]	@ (1005a1d4 <__arm_cp.8_2>)
1005a17a:	d00d      	beq.n	1005a198 <llc_conn_init+0xc8>
1005a17c:	f7ff fa2e 	bl	100595dc <cte_csr_ucfg_weak>
1005a180:	4915      	ldr	r1, [pc, #84]	@ (1005a1d8 <__arm_cp.8_3>)
1005a182:	e006      	b.n	1005a192 <llc_conn_init+0xc2>
1005a184:	2801      	cmp	r0, #1
1005a186:	9d01      	ldr	r5, [sp, #4]
1005a188:	4629      	mov	r1, r5
1005a18a:	d005      	beq.n	1005a198 <llc_conn_init+0xc8>
1005a18c:	f7ff fa26 	bl	100595dc <cte_csr_ucfg_weak>
1005a190:	4621      	mov	r1, r4
1005a192:	2801      	cmp	r0, #1
1005a194:	d100      	bne.n	1005a198 <llc_conn_init+0xc8>
1005a196:	3108      	adds	r1, #8
1005a198:	83fc      	strh	r4, [r7, #30]
1005a19a:	201b      	movs	r0, #27
1005a19c:	83b8      	strh	r0, [r7, #28]
1005a19e:	827d      	strh	r5, [r7, #18]
1005a1a0:	823c      	strh	r4, [r7, #16]
1005a1a2:	81fc      	strh	r4, [r7, #14]
1005a1a4:	81b8      	strh	r0, [r7, #12]
1005a1a6:	8379      	strh	r1, [r7, #26]
1005a1a8:	f7f4 fead 	bl	1004ef06 <LL_phy_update_init_ucfg>
1005a1ac:	9802      	ldr	r0, [sp, #8]
1005a1ae:	f001 fd33 	bl	1005bc18 <llc_subrate_init_acceptable>
1005a1b2:	4c0a      	ldr	r4, [pc, #40]	@ (1005a1dc <__arm_cp.8_4>)
1005a1b4:	6820      	ldr	r0, [r4, #0]
1005a1b6:	2134      	movs	r1, #52	@ 0x34
1005a1b8:	5c41      	ldrb	r1, [r0, r1]
1005a1ba:	b2f0      	uxtb	r0, r6
1005a1bc:	4288      	cmp	r0, r1
1005a1be:	d203      	bcs.n	1005a1c8 <llc_conn_init+0xf8>
1005a1c0:	f000 f80e 	bl	1005a1e0 <llc_conn_per_init>
1005a1c4:	1c76      	adds	r6, r6, #1
1005a1c6:	e7f5      	b.n	1005a1b4 <llc_conn_init+0xe4>
1005a1c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a1ca:	46c0      	nop			@ (mov r8, r8)

1005a1cc <__arm_cp.8_0>:
1005a1cc:	20002ad0 	.word	0x20002ad0

1005a1d0 <__arm_cp.8_1>:
1005a1d0:	20002ae4 	.word	0x20002ae4

1005a1d4 <__arm_cp.8_2>:
1005a1d4:	00004290 	.word	0x00004290

1005a1d8 <__arm_cp.8_3>:
1005a1d8:	00000848 	.word	0x00000848

1005a1dc <__arm_cp.8_4>:
1005a1dc:	20002a7c 	.word	0x20002a7c

1005a1e0 <llc_conn_per_init>:
1005a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a1e2:	4605      	mov	r5, r0
1005a1e4:	204d      	movs	r0, #77	@ 0x4d
1005a1e6:	0080      	lsls	r0, r0, #2
1005a1e8:	4368      	muls	r0, r5
1005a1ea:	492d      	ldr	r1, [pc, #180]	@ (1005a2a0 <__arm_cp.9_0>)
1005a1ec:	6809      	ldr	r1, [r1, #0]
1005a1ee:	279c      	movs	r7, #156	@ 0x9c
1005a1f0:	59c9      	ldr	r1, [r1, r7]
1005a1f2:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a1f4:	6849      	ldr	r1, [r1, #4]
1005a1f6:	180c      	adds	r4, r1, r0
1005a1f8:	f001 fc9a 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005a1fc:	4606      	mov	r6, r0
1005a1fe:	f001 fc8d 	bl	1005bb1c <cis_csr_ucfg_weak>
1005a202:	4330      	orrs	r0, r6
1005a204:	b2c0      	uxtb	r0, r0
1005a206:	f006 f8a3 	bl	10060350 <LL_get_control_pdu_size>
1005a20a:	2200      	movs	r2, #0
1005a20c:	51e2      	str	r2, [r4, r7]
1005a20e:	212e      	movs	r1, #46	@ 0x2e
1005a210:	231f      	movs	r3, #31
1005a212:	5463      	strb	r3, [r4, r1]
1005a214:	85a2      	strh	r2, [r4, #44]	@ 0x2c
1005a216:	0880      	lsrs	r0, r0, #2
1005a218:	4368      	muls	r0, r5
1005a21a:	0080      	lsls	r0, r0, #2
1005a21c:	4920      	ldr	r1, [pc, #128]	@ (1005a2a0 <__arm_cp.9_0>)
1005a21e:	6809      	ldr	r1, [r1, #0]
1005a220:	460b      	mov	r3, r1
1005a222:	3394      	adds	r3, #148	@ 0x94
1005a224:	685b      	ldr	r3, [r3, #4]
1005a226:	181b      	adds	r3, r3, r0
1005a228:	2690      	movs	r6, #144	@ 0x90
1005a22a:	51a3      	str	r3, [r4, r6]
1005a22c:	238c      	movs	r3, #140	@ 0x8c
1005a22e:	50e2      	str	r2, [r4, r3]
1005a230:	2388      	movs	r3, #136	@ 0x88
1005a232:	50e2      	str	r2, [r4, r3]
1005a234:	2330      	movs	r3, #48	@ 0x30
1005a236:	54e5      	strb	r5, [r4, r3]
1005a238:	239a      	movs	r3, #154	@ 0x9a
1005a23a:	52e2      	strh	r2, [r4, r3]
1005a23c:	23ff      	movs	r3, #255	@ 0xff
1005a23e:	461d      	mov	r5, r3
1005a240:	3508      	adds	r5, #8
1005a242:	5562      	strb	r2, [r4, r5]
1005a244:	2241      	movs	r2, #65	@ 0x41
1005a246:	54a3      	strb	r3, [r4, r2]
1005a248:	222f      	movs	r2, #47	@ 0x2f
1005a24a:	2307      	movs	r3, #7
1005a24c:	54a3      	strb	r3, [r4, r2]
1005a24e:	227d      	movs	r2, #125	@ 0x7d
1005a250:	0452      	lsls	r2, r2, #17
1005a252:	66e2      	str	r2, [r4, #108]	@ 0x6c
1005a254:	6722      	str	r2, [r4, #112]	@ 0x70
1005a256:	2201      	movs	r2, #1
1005a258:	8522      	strh	r2, [r4, #40]	@ 0x28
1005a25a:	4a12      	ldr	r2, [pc, #72]	@ (1005a2a4 <__arm_cp.9_1>)
1005a25c:	8762      	strh	r2, [r4, #58]	@ 0x3a
1005a25e:	2219      	movs	r2, #25
1005a260:	0412      	lsls	r2, r2, #16
1005a262:	65a2      	str	r2, [r4, #88]	@ 0x58
1005a264:	65e2      	str	r2, [r4, #92]	@ 0x5c
1005a266:	6622      	str	r2, [r4, #96]	@ 0x60
1005a268:	4622      	mov	r2, r4
1005a26a:	32b4      	adds	r2, #180	@ 0xb4
1005a26c:	2394      	movs	r3, #148	@ 0x94
1005a26e:	58c9      	ldr	r1, [r1, r3]
1005a270:	231b      	movs	r3, #27
1005a272:	8053      	strh	r3, [r2, #2]
1005a274:	1808      	adds	r0, r1, r0
1005a276:	4621      	mov	r1, r4
1005a278:	3190      	adds	r1, #144	@ 0x90
1005a27a:	6048      	str	r0, [r1, #4]
1005a27c:	20b4      	movs	r0, #180	@ 0xb4
1005a27e:	5223      	strh	r3, [r4, r0]
1005a280:	4809      	ldr	r0, [pc, #36]	@ (1005a2a8 <__arm_cp.9_2>)
1005a282:	490a      	ldr	r1, [pc, #40]	@ (1005a2ac <__arm_cp.9_3>)
1005a284:	6050      	str	r0, [r2, #4]
1005a286:	6091      	str	r1, [r2, #8]
1005a288:	2029      	movs	r0, #41	@ 0x29
1005a28a:	00c0      	lsls	r0, r0, #3
1005a28c:	8190      	strh	r0, [r2, #12]
1005a28e:	4620      	mov	r0, r4
1005a290:	f001 fcd7 	bl	1005bc42 <llc_subrate_reset_params>
1005a294:	3480      	adds	r4, #128	@ 0x80
1005a296:	4620      	mov	r0, r4
1005a298:	f008 fce8 	bl	10062c6c <ACL_list_init>
1005a29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005a29e:	46c0      	nop			@ (mov r8, r8)

1005a2a0 <__arm_cp.9_0>:
1005a2a0:	20002ad0 	.word	0x20002ad0

1005a2a4 <__arm_cp.9_1>:
1005a2a4:	0000ffff 	.word	0x0000ffff

1005a2a8 <__arm_cp.9_2>:
1005a2a8:	0148001b 	.word	0x0148001b

1005a2ac <__arm_cp.9_3>:
1005a2ac:	001b0148 	.word	0x001b0148

1005a2b0 <llc_conn_mem_allocate>:
1005a2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a2b2:	b085      	sub	sp, #20
1005a2b4:	2b01      	cmp	r3, #1
1005a2b6:	d000      	beq.n	1005a2ba <llc_conn_mem_allocate+0xa>
1005a2b8:	e082      	b.n	1005a3c0 <llc_conn_mem_allocate+0x110>
1005a2ba:	ab02      	add	r3, sp, #8
1005a2bc:	c307      	stmia	r3!, {r0, r1, r2}
1005a2be:	4841      	ldr	r0, [pc, #260]	@ (1005a3c4 <__arm_cp.10_0>)
1005a2c0:	7fc1      	ldrb	r1, [r0, #31]
1005a2c2:	9101      	str	r1, [sp, #4]
1005a2c4:	7ac4      	ldrb	r4, [r0, #11]
1005a2c6:	9400      	str	r4, [sp, #0]
1005a2c8:	2601      	movs	r6, #1
1005a2ca:	2124      	movs	r1, #36	@ 0x24
1005a2cc:	4a3e      	ldr	r2, [pc, #248]	@ (1005a3c8 <__arm_cp.10_1>)
1005a2ce:	4630      	mov	r0, r6
1005a2d0:	4790      	blx	r2
1005a2d2:	493e      	ldr	r1, [pc, #248]	@ (1005a3cc <__arm_cp.10_2>)
1005a2d4:	6809      	ldr	r1, [r1, #0]
1005a2d6:	279c      	movs	r7, #156	@ 0x9c
1005a2d8:	59c9      	ldr	r1, [r1, r7]
1005a2da:	63c8      	str	r0, [r1, #60]	@ 0x3c
1005a2dc:	2538      	movs	r5, #56	@ 0x38
1005a2de:	4630      	mov	r0, r6
1005a2e0:	4629      	mov	r1, r5
1005a2e2:	4a39      	ldr	r2, [pc, #228]	@ (1005a3c8 <__arm_cp.10_1>)
1005a2e4:	4790      	blx	r2
1005a2e6:	4939      	ldr	r1, [pc, #228]	@ (1005a3cc <__arm_cp.10_2>)
1005a2e8:	6809      	ldr	r1, [r1, #0]
1005a2ea:	59c9      	ldr	r1, [r1, r7]
1005a2ec:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a2ee:	6008      	str	r0, [r1, #0]
1005a2f0:	204d      	movs	r0, #77	@ 0x4d
1005a2f2:	0081      	lsls	r1, r0, #2
1005a2f4:	4620      	mov	r0, r4
1005a2f6:	4c34      	ldr	r4, [pc, #208]	@ (1005a3c8 <__arm_cp.10_1>)
1005a2f8:	47a0      	blx	r4
1005a2fa:	4934      	ldr	r1, [pc, #208]	@ (1005a3cc <__arm_cp.10_2>)
1005a2fc:	6809      	ldr	r1, [r1, #0]
1005a2fe:	59c9      	ldr	r1, [r1, r7]
1005a300:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a302:	6048      	str	r0, [r1, #4]
1005a304:	9801      	ldr	r0, [sp, #4]
1005a306:	4086      	lsls	r6, r0
1005a308:	b2f0      	uxtb	r0, r6
1005a30a:	2108      	movs	r1, #8
1005a30c:	47a0      	blx	r4
1005a30e:	492f      	ldr	r1, [pc, #188]	@ (1005a3cc <__arm_cp.10_2>)
1005a310:	6809      	ldr	r1, [r1, #0]
1005a312:	59c9      	ldr	r1, [r1, r7]
1005a314:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a316:	6809      	ldr	r1, [r1, #0]
1005a318:	2228      	movs	r2, #40	@ 0x28
1005a31a:	2300      	movs	r3, #0
1005a31c:	548b      	strb	r3, [r1, r2]
1005a31e:	6248      	str	r0, [r1, #36]	@ 0x24
1005a320:	3128      	adds	r1, #40	@ 0x28
1005a322:	704e      	strb	r6, [r1, #1]
1005a324:	9c00      	ldr	r4, [sp, #0]
1005a326:	2013      	movs	r0, #19
1005a328:	2104      	movs	r1, #4
1005a32a:	4e27      	ldr	r6, [pc, #156]	@ (1005a3c8 <__arm_cp.10_1>)
1005a32c:	47b0      	blx	r6
1005a32e:	4927      	ldr	r1, [pc, #156]	@ (1005a3cc <__arm_cp.10_2>)
1005a330:	6809      	ldr	r1, [r1, #0]
1005a332:	59c9      	ldr	r1, [r1, r7]
1005a334:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a336:	6108      	str	r0, [r1, #16]
1005a338:	4620      	mov	r0, r4
1005a33a:	4629      	mov	r1, r5
1005a33c:	47b0      	blx	r6
1005a33e:	4633      	mov	r3, r6
1005a340:	4a22      	ldr	r2, [pc, #136]	@ (1005a3cc <__arm_cp.10_2>)
1005a342:	6811      	ldr	r1, [r2, #0]
1005a344:	59c9      	ldr	r1, [r1, r7]
1005a346:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a348:	6088      	str	r0, [r1, #8]
1005a34a:	4626      	mov	r6, r4
1005a34c:	4620      	mov	r0, r4
1005a34e:	4629      	mov	r1, r5
1005a350:	4615      	mov	r5, r2
1005a352:	4798      	blx	r3
1005a354:	6829      	ldr	r1, [r5, #0]
1005a356:	59c9      	ldr	r1, [r1, r7]
1005a358:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a35a:	60c8      	str	r0, [r1, #12]
1005a35c:	9802      	ldr	r0, [sp, #8]
1005a35e:	2801      	cmp	r0, #1
1005a360:	d107      	bne.n	1005a372 <llc_conn_mem_allocate+0xc2>
1005a362:	210e      	movs	r1, #14
1005a364:	4630      	mov	r0, r6
1005a366:	f006 fcb9 	bl	10060cdc <csmem_mem_0_assign>
1005a36a:	6829      	ldr	r1, [r5, #0]
1005a36c:	59c9      	ldr	r1, [r1, r7]
1005a36e:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a370:	6148      	str	r0, [r1, #20]
1005a372:	9803      	ldr	r0, [sp, #12]
1005a374:	2801      	cmp	r0, #1
1005a376:	d107      	bne.n	1005a388 <llc_conn_mem_allocate+0xd8>
1005a378:	2108      	movs	r1, #8
1005a37a:	4630      	mov	r0, r6
1005a37c:	f006 fcae 	bl	10060cdc <csmem_mem_0_assign>
1005a380:	6829      	ldr	r1, [r5, #0]
1005a382:	59c9      	ldr	r1, [r1, r7]
1005a384:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a386:	6188      	str	r0, [r1, #24]
1005a388:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005a38a:	9804      	ldr	r0, [sp, #16]
1005a38c:	2801      	cmp	r0, #1
1005a38e:	d10d      	bne.n	1005a3ac <llc_conn_mem_allocate+0xfc>
1005a390:	2120      	movs	r1, #32
1005a392:	4630      	mov	r0, r6
1005a394:	f006 fca2 	bl	10060cdc <csmem_mem_0_assign>
1005a398:	6829      	ldr	r1, [r5, #0]
1005a39a:	59c9      	ldr	r1, [r1, r7]
1005a39c:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a39e:	61c8      	str	r0, [r1, #28]
1005a3a0:	2001      	movs	r0, #1
1005a3a2:	2111      	movs	r1, #17
1005a3a4:	f006 fc9a 	bl	10060cdc <csmem_mem_0_assign>
1005a3a8:	6829      	ldr	r1, [r5, #0]
1005a3aa:	6648      	str	r0, [r1, #100]	@ 0x64
1005a3ac:	2c01      	cmp	r4, #1
1005a3ae:	d107      	bne.n	1005a3c0 <llc_conn_mem_allocate+0x110>
1005a3b0:	211c      	movs	r1, #28
1005a3b2:	4630      	mov	r0, r6
1005a3b4:	f006 fc92 	bl	10060cdc <csmem_mem_0_assign>
1005a3b8:	6829      	ldr	r1, [r5, #0]
1005a3ba:	59c9      	ldr	r1, [r1, r7]
1005a3bc:	6bc9      	ldr	r1, [r1, #60]	@ 0x3c
1005a3be:	6208      	str	r0, [r1, #32]
1005a3c0:	b005      	add	sp, #20
1005a3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005a3c4 <__arm_cp.10_0>:
1005a3c4:	20002ae4 	.word	0x20002ae4

1005a3c8 <__arm_cp.10_1>:
1005a3c8:	10060cdd 	.word	0x10060cdd

1005a3cc <__arm_cp.10_2>:
1005a3cc:	20002ad0 	.word	0x20002ad0

1005a3d0 <llc_conn_clr_instant_reached_passed>:
1005a3d0:	219a      	movs	r1, #154	@ 0x9a
1005a3d2:	5a42      	ldrh	r2, [r0, r1]
1005a3d4:	2304      	movs	r3, #4
1005a3d6:	439a      	bics	r2, r3
1005a3d8:	5242      	strh	r2, [r0, r1]
1005a3da:	5a42      	ldrh	r2, [r0, r1]
1005a3dc:	2302      	movs	r3, #2
1005a3de:	439a      	bics	r2, r3
1005a3e0:	5242      	strh	r2, [r0, r1]
1005a3e2:	4770      	bx	lr

1005a3e4 <llc_conn_clr_rx_acl_blocked>:
1005a3e4:	2194      	movs	r1, #148	@ 0x94
1005a3e6:	5840      	ldr	r0, [r0, r1]
1005a3e8:	8801      	ldrh	r1, [r0, #0]
1005a3ea:	4a02      	ldr	r2, [pc, #8]	@ (1005a3f4 <__arm_cp.5_0>)
1005a3ec:	400a      	ands	r2, r1
1005a3ee:	8002      	strh	r2, [r0, #0]
1005a3f0:	4770      	bx	lr
1005a3f2:	46c0      	nop			@ (mov r8, r8)

1005a3f4 <__arm_cp.5_0>:
1005a3f4:	0000feff 	.word	0x0000feff

1005a3f8 <llc_conn_clr_rx_ctrl_pdu_full>:
1005a3f8:	2190      	movs	r1, #144	@ 0x90
1005a3fa:	5840      	ldr	r0, [r0, r1]
1005a3fc:	8801      	ldrh	r1, [r0, #0]
1005a3fe:	2201      	movs	r2, #1
1005a400:	4391      	bics	r1, r2
1005a402:	8001      	strh	r1, [r0, #0]
1005a404:	4770      	bx	lr

1005a406 <llc_conn_clr_tx_acl_blocked>:
1005a406:	2194      	movs	r1, #148	@ 0x94
1005a408:	5840      	ldr	r0, [r0, r1]
1005a40a:	8801      	ldrh	r1, [r0, #0]
1005a40c:	2280      	movs	r2, #128	@ 0x80
1005a40e:	4391      	bics	r1, r2
1005a410:	8001      	strh	r1, [r0, #0]
1005a412:	4770      	bx	lr

1005a414 <llc_conn_copy_tx_data_packet>:
1005a414:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a416:	460c      	mov	r4, r1
1005a418:	2188      	movs	r1, #136	@ 0x88
1005a41a:	5c41      	ldrb	r1, [r0, r1]
1005a41c:	0649      	lsls	r1, r1, #25
1005a41e:	d40c      	bmi.n	1005a43a <llc_conn_copy_tx_data_packet+0x26>
1005a420:	3088      	adds	r0, #136	@ 0x88
1005a422:	8a21      	ldrh	r1, [r4, #16]
1005a424:	8862      	ldrh	r2, [r4, #2]
1005a426:	1a52      	subs	r2, r2, r1
1005a428:	b293      	uxth	r3, r2
1005a42a:	8dc5      	ldrh	r5, [r0, #46]	@ 0x2e
1005a42c:	42ab      	cmp	r3, r5
1005a42e:	d909      	bls.n	1005a444 <llc_conn_copy_tx_data_packet+0x30>
1005a430:	7a20      	ldrb	r0, [r4, #8]
1005a432:	22f7      	movs	r2, #247	@ 0xf7
1005a434:	4002      	ands	r2, r0
1005a436:	7222      	strb	r2, [r4, #8]
1005a438:	e001      	b.n	1005a43e <llc_conn_copy_tx_data_packet+0x2a>
1005a43a:	8a21      	ldrh	r1, [r4, #16]
1005a43c:	7b25      	ldrb	r5, [r4, #12]
1005a43e:	2010      	movs	r0, #16
1005a440:	9001      	str	r0, [sp, #4]
1005a442:	e005      	b.n	1005a450 <llc_conn_copy_tx_data_packet+0x3c>
1005a444:	69e0      	ldr	r0, [r4, #28]
1005a446:	1e43      	subs	r3, r0, #1
1005a448:	4198      	sbcs	r0, r3
1005a44a:	0100      	lsls	r0, r0, #4
1005a44c:	9001      	str	r0, [sp, #4]
1005a44e:	4615      	mov	r5, r2
1005a450:	2900      	cmp	r1, #0
1005a452:	d102      	bne.n	1005a45a <llc_conn_copy_tx_data_packet+0x46>
1005a454:	7a20      	ldrb	r0, [r4, #8]
1005a456:	0780      	lsls	r0, r0, #30
1005a458:	d401      	bmi.n	1005a45e <llc_conn_copy_tx_data_packet+0x4a>
1005a45a:	2001      	movs	r0, #1
1005a45c:	e000      	b.n	1005a460 <llc_conn_copy_tx_data_packet+0x4c>
1005a45e:	2002      	movs	r0, #2
1005a460:	9002      	str	r0, [sp, #8]
1005a462:	480e      	ldr	r0, [pc, #56]	@ (1005a49c <__arm_cp.8_0>)
1005a464:	6800      	ldr	r0, [r0, #0]
1005a466:	278c      	movs	r7, #140	@ 0x8c
1005a468:	59c0      	ldr	r0, [r0, r7]
1005a46a:	1d00      	adds	r0, r0, #4
1005a46c:	89e2      	ldrh	r2, [r4, #14]
1005a46e:	1851      	adds	r1, r2, r1
1005a470:	261f      	movs	r6, #31
1005a472:	400e      	ands	r6, r1
1005a474:	19a9      	adds	r1, r5, r6
1005a476:	b28a      	uxth	r2, r1
1005a478:	69a1      	ldr	r1, [r4, #24]
1005a47a:	f006 fd90 	bl	10060f9e <Mem_Buff_block_copy>
1005a47e:	6160      	str	r0, [r4, #20]
1005a480:	7325      	strb	r5, [r4, #12]
1005a482:	4b06      	ldr	r3, [pc, #24]	@ (1005a49c <__arm_cp.8_0>)
1005a484:	6818      	ldr	r0, [r3, #0]
1005a486:	59c0      	ldr	r0, [r0, r7]
1005a488:	1830      	adds	r0, r6, r0
1005a48a:	9901      	ldr	r1, [sp, #4]
1005a48c:	9a02      	ldr	r2, [sp, #8]
1005a48e:	4311      	orrs	r1, r2
1005a490:	7081      	strb	r1, [r0, #2]
1005a492:	6818      	ldr	r0, [r3, #0]
1005a494:	59c0      	ldr	r0, [r0, r7]
1005a496:	1830      	adds	r0, r6, r0
1005a498:	70c5      	strb	r5, [r0, #3]
1005a49a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005a49c <__arm_cp.8_0>:
1005a49c:	20002ad0 	.word	0x20002ad0

1005a4a0 <llc_conn_enhanced_get_latency>:
1005a4a0:	b570      	push	{r4, r5, r6, lr}
1005a4a2:	4605      	mov	r5, r0
1005a4a4:	202c      	movs	r0, #44	@ 0x2c
1005a4a6:	5c28      	ldrb	r0, [r5, r0]
1005a4a8:	2401      	movs	r4, #1
1005a4aa:	2803      	cmp	r0, #3
1005a4ac:	d13f      	bne.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a4ae:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a4b0:	2800      	cmp	r0, #0
1005a4b2:	d03c      	beq.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a4b4:	4628      	mov	r0, r5
1005a4b6:	f7f9 fab6 	bl	10053a26 <BLEPLAT_CNTR_PacketGetDataPtr>
1005a4ba:	4629      	mov	r1, r5
1005a4bc:	3128      	adds	r1, #40	@ 0x28
1005a4be:	4288      	cmp	r0, r1
1005a4c0:	d135      	bne.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a4c2:	462e      	mov	r6, r5
1005a4c4:	362c      	adds	r6, #44	@ 0x2c
1005a4c6:	205c      	movs	r0, #92	@ 0x5c
1005a4c8:	5c30      	ldrb	r0, [r6, r0]
1005a4ca:	0600      	lsls	r0, r0, #24
1005a4cc:	0f80      	lsrs	r0, r0, #30
1005a4ce:	d12e      	bne.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a4d0:	20ff      	movs	r0, #255	@ 0xff
1005a4d2:	3008      	adds	r0, #8
1005a4d4:	1828      	adds	r0, r5, r0
1005a4d6:	7800      	ldrb	r0, [r0, #0]
1005a4d8:	0780      	lsls	r0, r0, #30
1005a4da:	d428      	bmi.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a4dc:	208f      	movs	r0, #143	@ 0x8f
1005a4de:	0040      	lsls	r0, r0, #1
1005a4e0:	1828      	adds	r0, r5, r0
1005a4e2:	8800      	ldrh	r0, [r0, #0]
1005a4e4:	2800      	cmp	r0, #0
1005a4e6:	d122      	bne.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a4e8:	7930      	ldrb	r0, [r6, #4]
1005a4ea:	2401      	movs	r4, #1
1005a4ec:	4621      	mov	r1, r4
1005a4ee:	f001 fbfc 	bl	1005bcea <LL_cpe_get_active_status>
1005a4f2:	2800      	cmp	r0, #0
1005a4f4:	d105      	bne.n	1005a502 <llc_conn_enhanced_get_latency+0x62>
1005a4f6:	7930      	ldrb	r0, [r6, #4]
1005a4f8:	2100      	movs	r1, #0
1005a4fa:	f001 fbf6 	bl	1005bcea <LL_cpe_get_active_status>
1005a4fe:	2800      	cmp	r0, #0
1005a500:	d013      	beq.n	1005a52a <llc_conn_enhanced_get_latency+0x8a>
1005a502:	4628      	mov	r0, r5
1005a504:	3098      	adds	r0, #152	@ 0x98
1005a506:	8841      	ldrh	r1, [r0, #2]
1005a508:	07c9      	lsls	r1, r1, #31
1005a50a:	d010      	beq.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a50c:	8af1      	ldrh	r1, [r6, #22]
1005a50e:	8800      	ldrh	r0, [r0, #0]
1005a510:	1a40      	subs	r0, r0, r1
1005a512:	b281      	uxth	r1, r0
1005a514:	2902      	cmp	r1, #2
1005a516:	d30a      	bcc.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a518:	1e44      	subs	r4, r0, #1
1005a51a:	b2a1      	uxth	r1, r4
1005a51c:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a51e:	1c40      	adds	r0, r0, #1
1005a520:	b282      	uxth	r2, r0
1005a522:	4291      	cmp	r1, r2
1005a524:	d303      	bcc.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a526:	4604      	mov	r4, r0
1005a528:	e001      	b.n	1005a52e <llc_conn_enhanced_get_latency+0x8e>
1005a52a:	8f28      	ldrh	r0, [r5, #56]	@ 0x38
1005a52c:	1c44      	adds	r4, r0, #1
1005a52e:	b2a0      	uxth	r0, r4
1005a530:	bd70      	pop	{r4, r5, r6, pc}
	...

1005a534 <llc_conn_get_conn_idx>:
1005a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a536:	4604      	mov	r4, r0
1005a538:	25ff      	movs	r5, #255	@ 0xff
1005a53a:	480a      	ldr	r0, [pc, #40]	@ (1005a564 <__arm_cp.13_0>)
1005a53c:	4284      	cmp	r4, r0
1005a53e:	d00f      	beq.n	1005a560 <llc_conn_get_conn_idx+0x2c>
1005a540:	2600      	movs	r6, #0
1005a542:	4f09      	ldr	r7, [pc, #36]	@ (1005a568 <__arm_cp.13_1>)
1005a544:	6838      	ldr	r0, [r7, #0]
1005a546:	2134      	movs	r1, #52	@ 0x34
1005a548:	5c41      	ldrb	r1, [r0, r1]
1005a54a:	b2f0      	uxtb	r0, r6
1005a54c:	4288      	cmp	r0, r1
1005a54e:	d207      	bcs.n	1005a560 <llc_conn_get_conn_idx+0x2c>
1005a550:	f7ff fd76 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005a554:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005a556:	42a0      	cmp	r0, r4
1005a558:	d001      	beq.n	1005a55e <llc_conn_get_conn_idx+0x2a>
1005a55a:	1c76      	adds	r6, r6, #1
1005a55c:	e7f2      	b.n	1005a544 <llc_conn_get_conn_idx+0x10>
1005a55e:	4635      	mov	r5, r6
1005a560:	b2e8      	uxtb	r0, r5
1005a562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005a564 <__arm_cp.13_0>:
1005a564:	0000ffff 	.word	0x0000ffff

1005a568 <__arm_cp.13_1>:
1005a568:	20002a7c 	.word	0x20002a7c

1005a56c <llc_conn_get_ctrl_pdu_data_p>:
1005a56c:	0089      	lsls	r1, r1, #2
1005a56e:	1840      	adds	r0, r0, r1
1005a570:	2190      	movs	r1, #144	@ 0x90
1005a572:	5840      	ldr	r0, [r0, r1]
1005a574:	1c80      	adds	r0, r0, #2
1005a576:	4770      	bx	lr

1005a578 <llc_conn_get_enc_on>:
1005a578:	2900      	cmp	r1, #0
1005a57a:	d001      	beq.n	1005a580 <llc_conn_get_enc_on+0x8>
1005a57c:	2102      	movs	r1, #2
1005a57e:	e000      	b.n	1005a582 <llc_conn_get_enc_on+0xa>
1005a580:	2103      	movs	r1, #3
1005a582:	2288      	movs	r2, #136	@ 0x88
1005a584:	5882      	ldr	r2, [r0, r2]
1005a586:	40ca      	lsrs	r2, r1
1005a588:	2001      	movs	r0, #1
1005a58a:	4010      	ands	r0, r2
1005a58c:	4770      	bx	lr

1005a58e <llc_conn_get_instant_passed>:
1005a58e:	219a      	movs	r1, #154	@ 0x9a
1005a590:	5a40      	ldrh	r0, [r0, r1]
1005a592:	0740      	lsls	r0, r0, #29
1005a594:	0fc0      	lsrs	r0, r0, #31
1005a596:	4770      	bx	lr

1005a598 <llc_conn_get_instant_reached>:
1005a598:	219a      	movs	r1, #154	@ 0x9a
1005a59a:	5a40      	ldrh	r0, [r0, r1]
1005a59c:	0780      	lsls	r0, r0, #30
1005a59e:	0fc0      	lsrs	r0, r0, #31
1005a5a0:	4770      	bx	lr

1005a5a2 <llc_conn_get_rx_ctrl_pdu_full>:
1005a5a2:	2190      	movs	r1, #144	@ 0x90
1005a5a4:	5840      	ldr	r0, [r0, r1]
1005a5a6:	8801      	ldrh	r1, [r0, #0]
1005a5a8:	2001      	movs	r0, #1
1005a5aa:	4008      	ands	r0, r1
1005a5ac:	4770      	bx	lr

1005a5ae <llc_conn_get_rx_acl_blocked>:
1005a5ae:	2194      	movs	r1, #148	@ 0x94
1005a5b0:	5840      	ldr	r0, [r0, r1]
1005a5b2:	8800      	ldrh	r0, [r0, #0]
1005a5b4:	05c0      	lsls	r0, r0, #23
1005a5b6:	0fc0      	lsrs	r0, r0, #31
1005a5b8:	4770      	bx	lr

1005a5ba <llc_conn_get_tx_acl_blocked>:
1005a5ba:	2194      	movs	r1, #148	@ 0x94
1005a5bc:	5840      	ldr	r0, [r0, r1]
1005a5be:	8800      	ldrh	r0, [r0, #0]
1005a5c0:	b2c0      	uxtb	r0, r0
1005a5c2:	09c0      	lsrs	r0, r0, #7
1005a5c4:	4770      	bx	lr

1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>:
1005a5c6:	2194      	movs	r1, #148	@ 0x94
1005a5c8:	5840      	ldr	r0, [r0, r1]
1005a5ca:	8801      	ldrh	r1, [r0, #0]
1005a5cc:	2003      	movs	r0, #3
1005a5ce:	4008      	ands	r0, r1
1005a5d0:	4770      	bx	lr
	...

1005a5d4 <llc_conn_guard_time_for_close_conn_event>:
1005a5d4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005a5d6:	4607      	mov	r7, r0
1005a5d8:	2441      	movs	r4, #65	@ 0x41
1005a5da:	5d00      	ldrb	r0, [r0, r4]
1005a5dc:	f7f9 fcb0 	bl	10053f40 <BLEPLAT_CNTR_SmGetTxPhy>
1005a5e0:	4605      	mov	r5, r0
1005a5e2:	5d38      	ldrb	r0, [r7, r4]
1005a5e4:	f7f9 fc9b 	bl	10053f1e <BLEPLAT_CNTR_SmGetRxPhy>
1005a5e8:	23b6      	movs	r3, #182	@ 0xb6
1005a5ea:	1e6c      	subs	r4, r5, #1
1005a5ec:	b2e1      	uxtb	r1, r4
1005a5ee:	9702      	str	r7, [sp, #8]
1005a5f0:	37b6      	adds	r7, #182	@ 0xb6
1005a5f2:	2570      	movs	r5, #112	@ 0x70
1005a5f4:	2603      	movs	r6, #3
1005a5f6:	2905      	cmp	r1, #5
1005a5f8:	4632      	mov	r2, r6
1005a5fa:	9501      	str	r5, [sp, #4]
1005a5fc:	4629      	mov	r1, r5
1005a5fe:	d805      	bhi.n	1005a60c <llc_conn_guard_time_for_close_conn_event+0x38>
1005a600:	b261      	sxtb	r1, r4
1005a602:	008a      	lsls	r2, r1, #2
1005a604:	4919      	ldr	r1, [pc, #100]	@ (1005a66c <__arm_cp.22_0>)
1005a606:	5889      	ldr	r1, [r1, r2]
1005a608:	4c19      	ldr	r4, [pc, #100]	@ (1005a670 <__arm_cp.22_1>)
1005a60a:	58a2      	ldr	r2, [r4, r2]
1005a60c:	9c02      	ldr	r4, [sp, #8]
1005a60e:	5ae3      	ldrh	r3, [r4, r3]
1005a610:	887c      	ldrh	r4, [r7, #2]
1005a612:	1e40      	subs	r0, r0, #1
1005a614:	b2c5      	uxtb	r5, r0
1005a616:	2d05      	cmp	r5, #5
1005a618:	d806      	bhi.n	1005a628 <llc_conn_guard_time_for_close_conn_event+0x54>
1005a61a:	b240      	sxtb	r0, r0
1005a61c:	0080      	lsls	r0, r0, #2
1005a61e:	4d13      	ldr	r5, [pc, #76]	@ (1005a66c <__arm_cp.22_0>)
1005a620:	582d      	ldr	r5, [r5, r0]
1005a622:	9501      	str	r5, [sp, #4]
1005a624:	4d12      	ldr	r5, [pc, #72]	@ (1005a670 <__arm_cp.22_1>)
1005a626:	582e      	ldr	r6, [r5, r0]
1005a628:	4093      	lsls	r3, r2
1005a62a:	1858      	adds	r0, r3, r1
1005a62c:	0200      	lsls	r0, r0, #8
1005a62e:	2147      	movs	r1, #71	@ 0x47
1005a630:	00cd      	lsls	r5, r1, #3
1005a632:	1940      	adds	r0, r0, r5
1005a634:	490f      	ldr	r1, [pc, #60]	@ (1005a674 <__arm_cp.22_2>)
1005a636:	f7e5 fe03 	bl	10040240 <__udivsi3>
1005a63a:	9000      	str	r0, [sp, #0]
1005a63c:	40b4      	lsls	r4, r6
1005a63e:	9801      	ldr	r0, [sp, #4]
1005a640:	1820      	adds	r0, r4, r0
1005a642:	0200      	lsls	r0, r0, #8
1005a644:	1940      	adds	r0, r0, r5
1005a646:	490b      	ldr	r1, [pc, #44]	@ (1005a674 <__arm_cp.22_2>)
1005a648:	f7e5 fdfa 	bl	10040240 <__udivsi3>
1005a64c:	4606      	mov	r6, r0
1005a64e:	88fc      	ldrh	r4, [r7, #6]
1005a650:	f005 fec2 	bl	100603d8 <LL_sched_engine_return_actual_scheduler_margin>
1005a654:	9900      	ldr	r1, [sp, #0]
1005a656:	1808      	adds	r0, r1, r0
1005a658:	b2b1      	uxth	r1, r6
1005a65a:	428c      	cmp	r4, r1
1005a65c:	d800      	bhi.n	1005a660 <llc_conn_guard_time_for_close_conn_event+0x8c>
1005a65e:	4621      	mov	r1, r4
1005a660:	1840      	adds	r0, r0, r1
1005a662:	30cd      	adds	r0, #205	@ 0xcd
1005a664:	9902      	ldr	r1, [sp, #8]
1005a666:	6748      	str	r0, [r1, #116]	@ 0x74
1005a668:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005a66a:	46c0      	nop			@ (mov r8, r8)

1005a66c <__arm_cp.22_0>:
1005a66c:	100697f0 	.word	0x100697f0

1005a670 <__arm_cp.22_1>:
1005a670:	100697d8 	.word	0x100697d8

1005a674 <__arm_cp.22_2>:
1005a674:	00000271 	.word	0x00000271

1005a678 <llc_conn_list_add_address>:
1005a678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a67a:	460a      	mov	r2, r1
1005a67c:	4601      	mov	r1, r0
1005a67e:	4807      	ldr	r0, [pc, #28]	@ (1005a69c <__arm_cp.23_0>)
1005a680:	6800      	ldr	r0, [r0, #0]
1005a682:	239c      	movs	r3, #156	@ 0x9c
1005a684:	58c0      	ldr	r0, [r0, r3]
1005a686:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a688:	6800      	ldr	r0, [r0, #0]
1005a68a:	ab02      	add	r3, sp, #8
1005a68c:	9301      	str	r3, [sp, #4]
1005a68e:	ab03      	add	r3, sp, #12
1005a690:	9300      	str	r3, [sp, #0]
1005a692:	3024      	adds	r0, #36	@ 0x24
1005a694:	2301      	movs	r3, #1
1005a696:	f008 fb8b 	bl	10062db0 <addr8_list_add>
1005a69a:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005a69c <__arm_cp.23_0>:
1005a69c:	20002ad0 	.word	0x20002ad0

1005a6a0 <llc_conn_list_reset>:
1005a6a0:	b580      	push	{r7, lr}
1005a6a2:	4805      	ldr	r0, [pc, #20]	@ (1005a6b8 <__arm_cp.24_0>)
1005a6a4:	6800      	ldr	r0, [r0, #0]
1005a6a6:	219c      	movs	r1, #156	@ 0x9c
1005a6a8:	5840      	ldr	r0, [r0, r1]
1005a6aa:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a6ac:	6800      	ldr	r0, [r0, #0]
1005a6ae:	3024      	adds	r0, #36	@ 0x24
1005a6b0:	f008 fbfd 	bl	10062eae <addr8_list_clear>
1005a6b4:	bd80      	pop	{r7, pc}
1005a6b6:	46c0      	nop			@ (mov r8, r8)

1005a6b8 <__arm_cp.24_0>:
1005a6b8:	20002ad0 	.word	0x20002ad0

1005a6bc <llc_conn_list_remove_address>:
1005a6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005a6be:	460a      	mov	r2, r1
1005a6c0:	4601      	mov	r1, r0
1005a6c2:	4807      	ldr	r0, [pc, #28]	@ (1005a6e0 <__arm_cp.25_0>)
1005a6c4:	6800      	ldr	r0, [r0, #0]
1005a6c6:	239c      	movs	r3, #156	@ 0x9c
1005a6c8:	58c0      	ldr	r0, [r0, r3]
1005a6ca:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a6cc:	6800      	ldr	r0, [r0, #0]
1005a6ce:	ab02      	add	r3, sp, #8
1005a6d0:	9301      	str	r3, [sp, #4]
1005a6d2:	ab03      	add	r3, sp, #12
1005a6d4:	9300      	str	r3, [sp, #0]
1005a6d6:	3024      	adds	r0, #36	@ 0x24
1005a6d8:	2301      	movs	r3, #1
1005a6da:	f008 fbac 	bl	10062e36 <addr8_list_remove_by_addr>
1005a6de:	bd8f      	pop	{r0, r1, r2, r3, r7, pc}

1005a6e0 <__arm_cp.25_0>:
1005a6e0:	20002ad0 	.word	0x20002ad0

1005a6e4 <llc_conn_list_search_address>:
1005a6e4:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1005a6e6:	460c      	mov	r4, r1
1005a6e8:	4605      	mov	r5, r0
1005a6ea:	f7ff fc9f 	bl	1005a02c <llc_conn_get_cntxt_p>
1005a6ee:	2136      	movs	r1, #54	@ 0x36
1005a6f0:	5c40      	ldrb	r0, [r0, r1]
1005a6f2:	2800      	cmp	r0, #0
1005a6f4:	d001      	beq.n	1005a6fa <llc_conn_list_search_address+0x16>
1005a6f6:	2000      	movs	r0, #0
1005a6f8:	e011      	b.n	1005a71e <llc_conn_list_search_address+0x3a>
1005a6fa:	480a      	ldr	r0, [pc, #40]	@ (1005a724 <__arm_cp.26_0>)
1005a6fc:	6800      	ldr	r0, [r0, #0]
1005a6fe:	219c      	movs	r1, #156	@ 0x9c
1005a700:	5840      	ldr	r0, [r0, r1]
1005a702:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005a704:	6801      	ldr	r1, [r0, #0]
1005a706:	6a48      	ldr	r0, [r1, #36]	@ 0x24
1005a708:	6a89      	ldr	r1, [r1, #40]	@ 0x28
1005a70a:	aa03      	add	r2, sp, #12
1005a70c:	2301      	movs	r3, #1
1005a70e:	9300      	str	r3, [sp, #0]
1005a710:	9201      	str	r2, [sp, #4]
1005a712:	22fe      	movs	r2, #254	@ 0xfe
1005a714:	4395      	bics	r5, r2
1005a716:	462a      	mov	r2, r5
1005a718:	4623      	mov	r3, r4
1005a71a:	f008 fae5 	bl	10062ce8 <addr8_list_search>
1005a71e:	b004      	add	sp, #16
1005a720:	bdb0      	pop	{r4, r5, r7, pc}
1005a722:	46c0      	nop			@ (mov r8, r8)

1005a724 <__arm_cp.26_0>:
1005a724:	20002ad0 	.word	0x20002ad0

1005a728 <llc_conn_push_adv_set_terminated_event>:
1005a728:	b570      	push	{r4, r5, r6, lr}
1005a72a:	460d      	mov	r5, r1
1005a72c:	4604      	mov	r4, r0
1005a72e:	481a      	ldr	r0, [pc, #104]	@ (1005a798 <__arm_cp.27_0>)
1005a730:	6800      	ldr	r0, [r0, #0]
1005a732:	212c      	movs	r1, #44	@ 0x2c
1005a734:	5c40      	ldrb	r0, [r0, r1]
1005a736:	07c0      	lsls	r0, r0, #31
1005a738:	0ec1      	lsrs	r1, r0, #27
1005a73a:	d101      	bne.n	1005a740 <llc_conn_push_adv_set_terminated_event+0x18>
1005a73c:	2211      	movs	r2, #17
1005a73e:	e00a      	b.n	1005a756 <llc_conn_push_adv_set_terminated_event+0x2e>
1005a740:	4816      	ldr	r0, [pc, #88]	@ (1005a79c <__arm_cp.27_1>)
1005a742:	6800      	ldr	r0, [r0, #0]
1005a744:	223d      	movs	r2, #61	@ 0x3d
1005a746:	5c82      	ldrb	r2, [r0, r2]
1005a748:	0692      	lsls	r2, r2, #26
1005a74a:	d524      	bpl.n	1005a796 <llc_conn_push_adv_set_terminated_event+0x6e>
1005a74c:	303d      	adds	r0, #61	@ 0x3d
1005a74e:	7ac0      	ldrb	r0, [r0, #11]
1005a750:	0780      	lsls	r0, r0, #30
1005a752:	d520      	bpl.n	1005a796 <llc_conn_push_adv_set_terminated_event+0x6e>
1005a754:	221f      	movs	r2, #31
1005a756:	204e      	movs	r0, #78	@ 0x4e
1005a758:	43c0      	mvns	r0, r0
1005a75a:	4041      	eors	r1, r0
1005a75c:	4810      	ldr	r0, [pc, #64]	@ (1005a7a0 <__arm_cp.27_2>)
1005a75e:	6800      	ldr	r0, [r0, #0]
1005a760:	6940      	ldr	r0, [r0, #20]
1005a762:	b2ce      	uxtb	r6, r1
1005a764:	2303      	movs	r3, #3
1005a766:	4631      	mov	r1, r6
1005a768:	f7fa fd44 	bl	100551f4 <aci_event_fifo_push_header>
1005a76c:	2800      	cmp	r0, #0
1005a76e:	d012      	beq.n	1005a796 <llc_conn_push_adv_set_terminated_event+0x6e>
1005a770:	4601      	mov	r1, r0
1005a772:	7284      	strb	r4, [r0, #10]
1005a774:	2000      	movs	r0, #0
1005a776:	7308      	strb	r0, [r1, #12]
1005a778:	724d      	strb	r5, [r1, #9]
1005a77a:	7208      	strb	r0, [r1, #8]
1005a77c:	2012      	movs	r0, #18
1005a77e:	71c8      	strb	r0, [r1, #7]
1005a780:	2006      	movs	r0, #6
1005a782:	7188      	strb	r0, [r1, #6]
1005a784:	203e      	movs	r0, #62	@ 0x3e
1005a786:	7148      	strb	r0, [r1, #5]
1005a788:	2004      	movs	r0, #4
1005a78a:	7108      	strb	r0, [r1, #4]
1005a78c:	0a20      	lsrs	r0, r4, #8
1005a78e:	72c8      	strb	r0, [r1, #11]
1005a790:	4630      	mov	r0, r6
1005a792:	f7fa fdcc 	bl	1005532e <aci_event_fifo_push>
1005a796:	bd70      	pop	{r4, r5, r6, pc}

1005a798 <__arm_cp.27_0>:
1005a798:	20002a7c 	.word	0x20002a7c

1005a79c <__arm_cp.27_1>:
1005a79c:	20002ad0 	.word	0x20002ad0

1005a7a0 <__arm_cp.27_2>:
1005a7a0:	20002a80 	.word	0x20002a80

1005a7a4 <llc_conn_push_connection_complete_event>:
1005a7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005a7a6:	b08d      	sub	sp, #52	@ 0x34
1005a7a8:	4604      	mov	r4, r0
1005a7aa:	4895      	ldr	r0, [pc, #596]	@ (1005aa00 <__arm_cp.28_0>)
1005a7ac:	6800      	ldr	r0, [r0, #0]
1005a7ae:	212c      	movs	r1, #44	@ 0x2c
1005a7b0:	5c40      	ldrb	r0, [r0, r1]
1005a7b2:	07c0      	lsls	r0, r0, #31
1005a7b4:	0ec5      	lsrs	r5, r0, #27
1005a7b6:	206f      	movs	r0, #111	@ 0x6f
1005a7b8:	43c6      	mvns	r6, r0
1005a7ba:	406e      	eors	r6, r5
1005a7bc:	f001 f9ba 	bl	1005bb34 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005a7c0:	4990      	ldr	r1, [pc, #576]	@ (1005aa04 <__arm_cp.28_1>)
1005a7c2:	6809      	ldr	r1, [r1, #0]
1005a7c4:	223d      	movs	r2, #61	@ 0x3d
1005a7c6:	5c8b      	ldrb	r3, [r1, r2]
1005a7c8:	2220      	movs	r2, #32
1005a7ca:	4013      	ands	r3, r2
1005a7cc:	313d      	adds	r1, #61	@ 0x3d
1005a7ce:	2800      	cmp	r0, #0
1005a7d0:	d066      	beq.n	1005a8a0 <llc_conn_push_connection_complete_event+0xfc>
1005a7d2:	2b00      	cmp	r3, #0
1005a7d4:	d100      	bne.n	1005a7d8 <llc_conn_push_connection_complete_event+0x34>
1005a7d6:	e110      	b.n	1005a9fa <llc_conn_push_connection_complete_event+0x256>
1005a7d8:	7b88      	ldrb	r0, [r1, #14]
1005a7da:	07c0      	lsls	r0, r0, #31
1005a7dc:	d063      	beq.n	1005a8a6 <llc_conn_push_connection_complete_event+0x102>
1005a7de:	2d00      	cmp	r5, #0
1005a7e0:	d100      	bne.n	1005a7e4 <llc_conn_push_connection_complete_event+0x40>
1005a7e2:	2212      	movs	r2, #18
1005a7e4:	8aa0      	ldrh	r0, [r4, #20]
1005a7e6:	900c      	str	r0, [sp, #48]	@ 0x30
1005a7e8:	7da7      	ldrb	r7, [r4, #22]
1005a7ea:	7de0      	ldrb	r0, [r4, #23]
1005a7ec:	9008      	str	r0, [sp, #32]
1005a7ee:	8a60      	ldrh	r0, [r4, #18]
1005a7f0:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a7f2:	8a20      	ldrh	r0, [r4, #16]
1005a7f4:	9009      	str	r0, [sp, #36]	@ 0x24
1005a7f6:	89a0      	ldrh	r0, [r4, #12]
1005a7f8:	900a      	str	r0, [sp, #40]	@ 0x28
1005a7fa:	6820      	ldr	r0, [r4, #0]
1005a7fc:	9005      	str	r0, [sp, #20]
1005a7fe:	6860      	ldr	r0, [r4, #4]
1005a800:	9007      	str	r0, [sp, #28]
1005a802:	68a0      	ldr	r0, [r4, #8]
1005a804:	9006      	str	r0, [sp, #24]
1005a806:	7e20      	ldrb	r0, [r4, #24]
1005a808:	9003      	str	r0, [sp, #12]
1005a80a:	7e60      	ldrb	r0, [r4, #25]
1005a80c:	9004      	str	r0, [sp, #16]
1005a80e:	89e5      	ldrh	r5, [r4, #14]
1005a810:	7ea0      	ldrb	r0, [r4, #26]
1005a812:	9002      	str	r0, [sp, #8]
1005a814:	487c      	ldr	r0, [pc, #496]	@ (1005aa08 <__arm_cp.28_2>)
1005a816:	6800      	ldr	r0, [r0, #0]
1005a818:	6900      	ldr	r0, [r0, #16]
1005a81a:	b2f1      	uxtb	r1, r6
1005a81c:	230a      	movs	r3, #10
1005a81e:	f7fa fce9 	bl	100551f4 <aci_event_fifo_push_header>
1005a822:	2800      	cmp	r0, #0
1005a824:	d100      	bne.n	1005a828 <llc_conn_push_connection_complete_event+0x84>
1005a826:	e0e8      	b.n	1005a9fa <llc_conn_push_connection_complete_event+0x256>
1005a828:	4604      	mov	r4, r0
1005a82a:	9701      	str	r7, [sp, #4]
1005a82c:	4607      	mov	r7, r0
1005a82e:	371f      	adds	r7, #31
1005a830:	7245      	strb	r5, [r0, #9]
1005a832:	9803      	ldr	r0, [sp, #12]
1005a834:	7320      	strb	r0, [r4, #12]
1005a836:	9804      	ldr	r0, [sp, #16]
1005a838:	72e0      	strb	r0, [r4, #11]
1005a83a:	9802      	ldr	r0, [sp, #8]
1005a83c:	7220      	strb	r0, [r4, #8]
1005a83e:	0a28      	lsrs	r0, r5, #8
1005a840:	72a0      	strb	r0, [r4, #10]
1005a842:	4620      	mov	r0, r4
1005a844:	300d      	adds	r0, #13
1005a846:	2506      	movs	r5, #6
1005a848:	9905      	ldr	r1, [sp, #20]
1005a84a:	462a      	mov	r2, r5
1005a84c:	4b6f      	ldr	r3, [pc, #444]	@ (1005aa0c <__arm_cp.28_3>)
1005a84e:	4798      	blx	r3
1005a850:	4620      	mov	r0, r4
1005a852:	3013      	adds	r0, #19
1005a854:	9906      	ldr	r1, [sp, #24]
1005a856:	462a      	mov	r2, r5
1005a858:	4b6c      	ldr	r3, [pc, #432]	@ (1005aa0c <__arm_cp.28_3>)
1005a85a:	4798      	blx	r3
1005a85c:	4b6b      	ldr	r3, [pc, #428]	@ (1005aa0c <__arm_cp.28_3>)
1005a85e:	4620      	mov	r0, r4
1005a860:	3019      	adds	r0, #25
1005a862:	9907      	ldr	r1, [sp, #28]
1005a864:	462a      	mov	r2, r5
1005a866:	4798      	blx	r3
1005a868:	2021      	movs	r0, #33	@ 0x21
1005a86a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a86c:	5421      	strb	r1, [r4, r0]
1005a86e:	2025      	movs	r0, #37	@ 0x25
1005a870:	9a08      	ldr	r2, [sp, #32]
1005a872:	5422      	strb	r2, [r4, r0]
1005a874:	4620      	mov	r0, r4
1005a876:	3021      	adds	r0, #33	@ 0x21
1005a878:	0a09      	lsrs	r1, r1, #8
1005a87a:	7041      	strb	r1, [r0, #1]
1005a87c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a87e:	0a08      	lsrs	r0, r1, #8
1005a880:	7078      	strb	r0, [r7, #1]
1005a882:	7039      	strb	r1, [r7, #0]
1005a884:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a886:	0a08      	lsrs	r0, r1, #8
1005a888:	7178      	strb	r0, [r7, #5]
1005a88a:	7139      	strb	r1, [r7, #4]
1005a88c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005a88e:	0a08      	lsrs	r0, r1, #8
1005a890:	7278      	strb	r0, [r7, #9]
1005a892:	7239      	strb	r1, [r7, #8]
1005a894:	9801      	ldr	r0, [sp, #4]
1005a896:	71f8      	strb	r0, [r7, #7]
1005a898:	1d20      	adds	r0, r4, #4
1005a89a:	2129      	movs	r1, #41	@ 0x29
1005a89c:	2222      	movs	r2, #34	@ 0x22
1005a89e:	e0a2      	b.n	1005a9e6 <llc_conn_push_connection_complete_event+0x242>
1005a8a0:	2b00      	cmp	r3, #0
1005a8a2:	d100      	bne.n	1005a8a6 <llc_conn_push_connection_complete_event+0x102>
1005a8a4:	e0a9      	b.n	1005a9fa <llc_conn_push_connection_complete_event+0x256>
1005a8a6:	7a88      	ldrb	r0, [r1, #10]
1005a8a8:	0780      	lsls	r0, r0, #30
1005a8aa:	d445      	bmi.n	1005a938 <llc_conn_push_connection_complete_event+0x194>
1005a8ac:	7a48      	ldrb	r0, [r1, #9]
1005a8ae:	07c0      	lsls	r0, r0, #31
1005a8b0:	d100      	bne.n	1005a8b4 <llc_conn_push_connection_complete_event+0x110>
1005a8b2:	e0a2      	b.n	1005a9fa <llc_conn_push_connection_complete_event+0x256>
1005a8b4:	2008      	movs	r0, #8
1005a8b6:	4305      	orrs	r5, r0
1005a8b8:	7de0      	ldrb	r0, [r4, #23]
1005a8ba:	900c      	str	r0, [sp, #48]	@ 0x30
1005a8bc:	8a60      	ldrh	r0, [r4, #18]
1005a8be:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a8c0:	8a20      	ldrh	r0, [r4, #16]
1005a8c2:	9009      	str	r0, [sp, #36]	@ 0x24
1005a8c4:	89a0      	ldrh	r0, [r4, #12]
1005a8c6:	900a      	str	r0, [sp, #40]	@ 0x28
1005a8c8:	6820      	ldr	r0, [r4, #0]
1005a8ca:	9008      	str	r0, [sp, #32]
1005a8cc:	7e20      	ldrb	r0, [r4, #24]
1005a8ce:	9006      	str	r0, [sp, #24]
1005a8d0:	7e60      	ldrb	r0, [r4, #25]
1005a8d2:	9007      	str	r0, [sp, #28]
1005a8d4:	89e7      	ldrh	r7, [r4, #14]
1005a8d6:	7ea0      	ldrb	r0, [r4, #26]
1005a8d8:	9005      	str	r0, [sp, #20]
1005a8da:	484b      	ldr	r0, [pc, #300]	@ (1005aa08 <__arm_cp.28_2>)
1005a8dc:	6800      	ldr	r0, [r0, #0]
1005a8de:	6900      	ldr	r0, [r0, #16]
1005a8e0:	b2f1      	uxtb	r1, r6
1005a8e2:	2306      	movs	r3, #6
1005a8e4:	462a      	mov	r2, r5
1005a8e6:	f7fa fc85 	bl	100551f4 <aci_event_fifo_push_header>
1005a8ea:	2800      	cmp	r0, #0
1005a8ec:	d100      	bne.n	1005a8f0 <llc_conn_push_connection_complete_event+0x14c>
1005a8ee:	e084      	b.n	1005a9fa <llc_conn_push_connection_complete_event+0x256>
1005a8f0:	4604      	mov	r4, r0
1005a8f2:	4605      	mov	r5, r0
1005a8f4:	3513      	adds	r5, #19
1005a8f6:	7247      	strb	r7, [r0, #9]
1005a8f8:	9806      	ldr	r0, [sp, #24]
1005a8fa:	7320      	strb	r0, [r4, #12]
1005a8fc:	9807      	ldr	r0, [sp, #28]
1005a8fe:	72e0      	strb	r0, [r4, #11]
1005a900:	9805      	ldr	r0, [sp, #20]
1005a902:	7220      	strb	r0, [r4, #8]
1005a904:	0a38      	lsrs	r0, r7, #8
1005a906:	72a0      	strb	r0, [r4, #10]
1005a908:	4620      	mov	r0, r4
1005a90a:	300d      	adds	r0, #13
1005a90c:	2206      	movs	r2, #6
1005a90e:	9908      	ldr	r1, [sp, #32]
1005a910:	f7f7 ff24 	bl	1005275c <BLEPLAT_MemCpy>
1005a914:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a916:	0a08      	lsrs	r0, r1, #8
1005a918:	75a0      	strb	r0, [r4, #22]
1005a91a:	7561      	strb	r1, [r4, #21]
1005a91c:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a91e:	0a08      	lsrs	r0, r1, #8
1005a920:	7068      	strb	r0, [r5, #1]
1005a922:	7029      	strb	r1, [r5, #0]
1005a924:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005a926:	0a08      	lsrs	r0, r1, #8
1005a928:	7168      	strb	r0, [r5, #5]
1005a92a:	7129      	strb	r1, [r5, #4]
1005a92c:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005a92e:	7660      	strb	r0, [r4, #25]
1005a930:	1d20      	adds	r0, r4, #4
1005a932:	2101      	movs	r1, #1
1005a934:	2213      	movs	r2, #19
1005a936:	e056      	b.n	1005a9e6 <llc_conn_push_connection_complete_event+0x242>
1005a938:	2d00      	cmp	r5, #0
1005a93a:	d001      	beq.n	1005a940 <llc_conn_push_connection_complete_event+0x19c>
1005a93c:	221c      	movs	r2, #28
1005a93e:	e000      	b.n	1005a942 <llc_conn_push_connection_complete_event+0x19e>
1005a940:	220d      	movs	r2, #13
1005a942:	7de0      	ldrb	r0, [r4, #23]
1005a944:	900a      	str	r0, [sp, #40]	@ 0x28
1005a946:	8a67      	ldrh	r7, [r4, #18]
1005a948:	8a20      	ldrh	r0, [r4, #16]
1005a94a:	900b      	str	r0, [sp, #44]	@ 0x2c
1005a94c:	89a0      	ldrh	r0, [r4, #12]
1005a94e:	900c      	str	r0, [sp, #48]	@ 0x30
1005a950:	6820      	ldr	r0, [r4, #0]
1005a952:	9007      	str	r0, [sp, #28]
1005a954:	6860      	ldr	r0, [r4, #4]
1005a956:	9009      	str	r0, [sp, #36]	@ 0x24
1005a958:	68a0      	ldr	r0, [r4, #8]
1005a95a:	9008      	str	r0, [sp, #32]
1005a95c:	7e20      	ldrb	r0, [r4, #24]
1005a95e:	9005      	str	r0, [sp, #20]
1005a960:	7e60      	ldrb	r0, [r4, #25]
1005a962:	9006      	str	r0, [sp, #24]
1005a964:	89e5      	ldrh	r5, [r4, #14]
1005a966:	7ea0      	ldrb	r0, [r4, #26]
1005a968:	9004      	str	r0, [sp, #16]
1005a96a:	4827      	ldr	r0, [pc, #156]	@ (1005aa08 <__arm_cp.28_2>)
1005a96c:	6800      	ldr	r0, [r0, #0]
1005a96e:	6900      	ldr	r0, [r0, #16]
1005a970:	b2f1      	uxtb	r1, r6
1005a972:	2309      	movs	r3, #9
1005a974:	f7fa fc3e 	bl	100551f4 <aci_event_fifo_push_header>
1005a978:	2800      	cmp	r0, #0
1005a97a:	d03e      	beq.n	1005a9fa <llc_conn_push_connection_complete_event+0x256>
1005a97c:	4604      	mov	r4, r0
1005a97e:	9703      	str	r7, [sp, #12]
1005a980:	4607      	mov	r7, r0
1005a982:	371f      	adds	r7, #31
1005a984:	7245      	strb	r5, [r0, #9]
1005a986:	9805      	ldr	r0, [sp, #20]
1005a988:	7320      	strb	r0, [r4, #12]
1005a98a:	9806      	ldr	r0, [sp, #24]
1005a98c:	72e0      	strb	r0, [r4, #11]
1005a98e:	9804      	ldr	r0, [sp, #16]
1005a990:	7220      	strb	r0, [r4, #8]
1005a992:	0a28      	lsrs	r0, r5, #8
1005a994:	72a0      	strb	r0, [r4, #10]
1005a996:	4620      	mov	r0, r4
1005a998:	300d      	adds	r0, #13
1005a99a:	2506      	movs	r5, #6
1005a99c:	9907      	ldr	r1, [sp, #28]
1005a99e:	462a      	mov	r2, r5
1005a9a0:	4b1a      	ldr	r3, [pc, #104]	@ (1005aa0c <__arm_cp.28_3>)
1005a9a2:	4798      	blx	r3
1005a9a4:	4620      	mov	r0, r4
1005a9a6:	3013      	adds	r0, #19
1005a9a8:	9908      	ldr	r1, [sp, #32]
1005a9aa:	462a      	mov	r2, r5
1005a9ac:	4b17      	ldr	r3, [pc, #92]	@ (1005aa0c <__arm_cp.28_3>)
1005a9ae:	4798      	blx	r3
1005a9b0:	4b16      	ldr	r3, [pc, #88]	@ (1005aa0c <__arm_cp.28_3>)
1005a9b2:	4620      	mov	r0, r4
1005a9b4:	3019      	adds	r0, #25
1005a9b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005a9b8:	462a      	mov	r2, r5
1005a9ba:	4798      	blx	r3
1005a9bc:	2021      	movs	r0, #33	@ 0x21
1005a9be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005a9c0:	5422      	strb	r2, [r4, r0]
1005a9c2:	2025      	movs	r0, #37	@ 0x25
1005a9c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005a9c6:	5421      	strb	r1, [r4, r0]
1005a9c8:	1d20      	adds	r0, r4, #4
1005a9ca:	4621      	mov	r1, r4
1005a9cc:	3121      	adds	r1, #33	@ 0x21
1005a9ce:	0a12      	lsrs	r2, r2, #8
1005a9d0:	704a      	strb	r2, [r1, #1]
1005a9d2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005a9d4:	0a11      	lsrs	r1, r2, #8
1005a9d6:	7079      	strb	r1, [r7, #1]
1005a9d8:	703a      	strb	r2, [r7, #0]
1005a9da:	9a03      	ldr	r2, [sp, #12]
1005a9dc:	0a11      	lsrs	r1, r2, #8
1005a9de:	7179      	strb	r1, [r7, #5]
1005a9e0:	713a      	strb	r2, [r7, #4]
1005a9e2:	210a      	movs	r1, #10
1005a9e4:	221f      	movs	r2, #31
1005a9e6:	2304      	movs	r3, #4
1005a9e8:	7123      	strb	r3, [r4, #4]
1005a9ea:	233e      	movs	r3, #62	@ 0x3e
1005a9ec:	7043      	strb	r3, [r0, #1]
1005a9ee:	71e1      	strb	r1, [r4, #7]
1005a9f0:	71a2      	strb	r2, [r4, #6]
1005a9f2:	b2f0      	uxtb	r0, r6
1005a9f4:	4621      	mov	r1, r4
1005a9f6:	f7fa fc9a 	bl	1005532e <aci_event_fifo_push>
1005a9fa:	b00d      	add	sp, #52	@ 0x34
1005a9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005a9fe:	46c0      	nop			@ (mov r8, r8)

1005aa00 <__arm_cp.28_0>:
1005aa00:	20002a7c 	.word	0x20002a7c

1005aa04 <__arm_cp.28_1>:
1005aa04:	20002ad0 	.word	0x20002ad0

1005aa08 <__arm_cp.28_2>:
1005aa08:	20002a80 	.word	0x20002a80

1005aa0c <__arm_cp.28_3>:
1005aa0c:	1005275d 	.word	0x1005275d

1005aa10 <llc_conn_push_csa_event>:
1005aa10:	b5b0      	push	{r4, r5, r7, lr}
1005aa12:	460d      	mov	r5, r1
1005aa14:	4604      	mov	r4, r0
1005aa16:	4812      	ldr	r0, [pc, #72]	@ (1005aa60 <__arm_cp.29_0>)
1005aa18:	6800      	ldr	r0, [r0, #0]
1005aa1a:	213d      	movs	r1, #61	@ 0x3d
1005aa1c:	5c41      	ldrb	r1, [r0, r1]
1005aa1e:	0689      	lsls	r1, r1, #26
1005aa20:	d51c      	bpl.n	1005aa5c <llc_conn_push_csa_event+0x4c>
1005aa22:	303d      	adds	r0, #61	@ 0x3d
1005aa24:	7ac0      	ldrb	r0, [r0, #11]
1005aa26:	0700      	lsls	r0, r0, #28
1005aa28:	d518      	bpl.n	1005aa5c <llc_conn_push_csa_event+0x4c>
1005aa2a:	480e      	ldr	r0, [pc, #56]	@ (1005aa64 <__arm_cp.29_1>)
1005aa2c:	6800      	ldr	r0, [r0, #0]
1005aa2e:	6940      	ldr	r0, [r0, #20]
1005aa30:	21a1      	movs	r1, #161	@ 0xa1
1005aa32:	222c      	movs	r2, #44	@ 0x2c
1005aa34:	2302      	movs	r3, #2
1005aa36:	f7fa fbdd 	bl	100551f4 <aci_event_fifo_push_header>
1005aa3a:	2800      	cmp	r0, #0
1005aa3c:	d00e      	beq.n	1005aa5c <llc_conn_push_csa_event+0x4c>
1005aa3e:	4601      	mov	r1, r0
1005aa40:	7204      	strb	r4, [r0, #8]
1005aa42:	7285      	strb	r5, [r0, #10]
1005aa44:	2014      	movs	r0, #20
1005aa46:	71c8      	strb	r0, [r1, #7]
1005aa48:	2004      	movs	r0, #4
1005aa4a:	7188      	strb	r0, [r1, #6]
1005aa4c:	223e      	movs	r2, #62	@ 0x3e
1005aa4e:	714a      	strb	r2, [r1, #5]
1005aa50:	7108      	strb	r0, [r1, #4]
1005aa52:	0a20      	lsrs	r0, r4, #8
1005aa54:	7248      	strb	r0, [r1, #9]
1005aa56:	20a1      	movs	r0, #161	@ 0xa1
1005aa58:	f7fa fc69 	bl	1005532e <aci_event_fifo_push>
1005aa5c:	bdb0      	pop	{r4, r5, r7, pc}
1005aa5e:	46c0      	nop			@ (mov r8, r8)

1005aa60 <__arm_cp.29_0>:
1005aa60:	20002ad0 	.word	0x20002ad0

1005aa64 <__arm_cp.29_1>:
1005aa64:	20002a80 	.word	0x20002a80

1005aa68 <llc_conn_set_chmap_params>:
1005aa68:	2398      	movs	r3, #152	@ 0x98
1005aa6a:	52c2      	strh	r2, [r0, r3]
1005aa6c:	3098      	adds	r0, #152	@ 0x98
1005aa6e:	6341      	str	r1, [r0, #52]	@ 0x34
1005aa70:	8841      	ldrh	r1, [r0, #2]
1005aa72:	2220      	movs	r2, #32
1005aa74:	430a      	orrs	r2, r1
1005aa76:	8042      	strh	r2, [r0, #2]
1005aa78:	4770      	bx	lr

1005aa7a <llc_conn_set_conn_update_params>:
1005aa7a:	2398      	movs	r3, #152	@ 0x98
1005aa7c:	52c2      	strh	r2, [r0, r3]
1005aa7e:	3098      	adds	r0, #152	@ 0x98
1005aa80:	6301      	str	r1, [r0, #48]	@ 0x30
1005aa82:	8841      	ldrh	r1, [r0, #2]
1005aa84:	2208      	movs	r2, #8
1005aa86:	430a      	orrs	r2, r1
1005aa88:	8042      	strh	r2, [r0, #2]
1005aa8a:	4770      	bx	lr

1005aa8c <llc_conn_set_rx_acl_blocked>:
1005aa8c:	2194      	movs	r1, #148	@ 0x94
1005aa8e:	5840      	ldr	r0, [r0, r1]
1005aa90:	8801      	ldrh	r1, [r0, #0]
1005aa92:	2201      	movs	r2, #1
1005aa94:	0212      	lsls	r2, r2, #8
1005aa96:	430a      	orrs	r2, r1
1005aa98:	8002      	strh	r2, [r0, #0]
1005aa9a:	4770      	bx	lr

1005aa9c <llc_conn_set_start_enc>:
1005aa9c:	2294      	movs	r2, #148	@ 0x94
1005aa9e:	5880      	ldr	r0, [r0, r2]
1005aaa0:	2900      	cmp	r1, #0
1005aaa2:	d007      	beq.n	1005aab4 <llc_conn_set_start_enc+0x18>
1005aaa4:	2901      	cmp	r1, #1
1005aaa6:	d003      	beq.n	1005aab0 <llc_conn_set_start_enc+0x14>
1005aaa8:	8801      	ldrh	r1, [r0, #0]
1005aaaa:	2210      	movs	r2, #16
1005aaac:	430a      	orrs	r2, r1
1005aaae:	8002      	strh	r2, [r0, #0]
1005aab0:	2108      	movs	r1, #8
1005aab2:	e000      	b.n	1005aab6 <llc_conn_set_start_enc+0x1a>
1005aab4:	2110      	movs	r1, #16
1005aab6:	8802      	ldrh	r2, [r0, #0]
1005aab8:	430a      	orrs	r2, r1
1005aaba:	8002      	strh	r2, [r0, #0]
1005aabc:	4770      	bx	lr

1005aabe <llc_conn_set_stop_enc>:
1005aabe:	2294      	movs	r2, #148	@ 0x94
1005aac0:	5880      	ldr	r0, [r0, r2]
1005aac2:	2900      	cmp	r1, #0
1005aac4:	d007      	beq.n	1005aad6 <llc_conn_set_stop_enc+0x18>
1005aac6:	2901      	cmp	r1, #1
1005aac8:	d003      	beq.n	1005aad2 <llc_conn_set_stop_enc+0x14>
1005aaca:	8801      	ldrh	r1, [r0, #0]
1005aacc:	2240      	movs	r2, #64	@ 0x40
1005aace:	430a      	orrs	r2, r1
1005aad0:	8002      	strh	r2, [r0, #0]
1005aad2:	2120      	movs	r1, #32
1005aad4:	e000      	b.n	1005aad8 <llc_conn_set_stop_enc+0x1a>
1005aad6:	2140      	movs	r1, #64	@ 0x40
1005aad8:	8802      	ldrh	r2, [r0, #0]
1005aada:	430a      	orrs	r2, r1
1005aadc:	8002      	strh	r2, [r0, #0]
1005aade:	4770      	bx	lr

1005aae0 <llc_conn_set_tx_acl_blocked>:
1005aae0:	2194      	movs	r1, #148	@ 0x94
1005aae2:	5840      	ldr	r0, [r0, r1]
1005aae4:	8801      	ldrh	r1, [r0, #0]
1005aae6:	2280      	movs	r2, #128	@ 0x80
1005aae8:	430a      	orrs	r2, r1
1005aaea:	8002      	strh	r2, [r0, #0]
1005aaec:	4770      	bx	lr

1005aaee <llc_conn_set_tx_ctrl_pdu_has_instant>:
1005aaee:	2194      	movs	r1, #148	@ 0x94
1005aaf0:	5840      	ldr	r0, [r0, r1]
1005aaf2:	8801      	ldrh	r1, [r0, #0]
1005aaf4:	2204      	movs	r2, #4
1005aaf6:	430a      	orrs	r2, r1
1005aaf8:	8002      	strh	r2, [r0, #0]
1005aafa:	4770      	bx	lr

1005aafc <llc_conn_set_tx_ctrl_pdu_state>:
1005aafc:	b580      	push	{r7, lr}
1005aafe:	2294      	movs	r2, #148	@ 0x94
1005ab00:	5880      	ldr	r0, [r0, r2]
1005ab02:	8802      	ldrh	r2, [r0, #0]
1005ab04:	2303      	movs	r3, #3
1005ab06:	439a      	bics	r2, r3
1005ab08:	8002      	strh	r2, [r0, #0]
1005ab0a:	4019      	ands	r1, r3
1005ab0c:	8802      	ldrh	r2, [r0, #0]
1005ab0e:	430a      	orrs	r2, r1
1005ab10:	8002      	strh	r2, [r0, #0]
1005ab12:	2015      	movs	r0, #21
1005ab14:	f007 feb8 	bl	10062888 <tsk_notify_idx>
1005ab18:	f7f7 f839 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005ab1c:	bd80      	pop	{r7, pc}

1005ab1e <llc_conn_calc_skip_ucfg_weak>:
1005ab1e:	4610      	mov	r0, r2
1005ab20:	4770      	bx	lr

1005ab22 <llc_conn_multi_link_connection>:
1005ab22:	b5b0      	push	{r4, r5, r7, lr}
1005ab24:	4604      	mov	r4, r0
1005ab26:	2536      	movs	r5, #54	@ 0x36
1005ab28:	f7ff fa80 	bl	1005a02c <llc_conn_get_cntxt_p>
1005ab2c:	5544      	strb	r4, [r0, r5]
1005ab2e:	2000      	movs	r0, #0
1005ab30:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005ab34 <llc_conn_check_connect_request_params>:
1005ab34:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ab36:	b087      	sub	sp, #28
1005ab38:	4604      	mov	r4, r0
1005ab3a:	7e00      	ldrb	r0, [r0, #24]
1005ab3c:	7e61      	ldrb	r1, [r4, #25]
1005ab3e:	0209      	lsls	r1, r1, #8
1005ab40:	180e      	adds	r6, r1, r0
1005ab42:	1e72      	subs	r2, r6, #1
1005ab44:	2a08      	cmp	r2, #8
1005ab46:	d300      	bcc.n	1005ab4a <llc_conn_check_connect_request_params+0x16>
1005ab48:	2208      	movs	r2, #8
1005ab4a:	7ea0      	ldrb	r0, [r4, #26]
1005ab4c:	9004      	str	r0, [sp, #16]
1005ab4e:	7ee0      	ldrb	r0, [r4, #27]
1005ab50:	9003      	str	r0, [sp, #12]
1005ab52:	7d60      	ldrb	r0, [r4, #21]
1005ab54:	2101      	movs	r1, #1
1005ab56:	4f27      	ldr	r7, [pc, #156]	@ (1005abf4 <__arm_cp.1_0>)
1005ab58:	9101      	str	r1, [sp, #4]
1005ab5a:	47b8      	blx	r7
1005ab5c:	4605      	mov	r5, r0
1005ab5e:	7da0      	ldrb	r0, [r4, #22]
1005ab60:	7de1      	ldrb	r1, [r4, #23]
1005ab62:	0209      	lsls	r1, r1, #8
1005ab64:	1808      	adds	r0, r1, r0
1005ab66:	2100      	movs	r1, #0
1005ab68:	9106      	str	r1, [sp, #24]
1005ab6a:	4632      	mov	r2, r6
1005ab6c:	47b8      	blx	r7
1005ab6e:	4633      	mov	r3, r6
1005ab70:	9602      	str	r6, [sp, #8]
1005ab72:	4606      	mov	r6, r0
1005ab74:	432e      	orrs	r6, r5
1005ab76:	2019      	movs	r0, #25
1005ab78:	01c2      	lsls	r2, r0, #7
1005ab7a:	2106      	movs	r1, #6
1005ab7c:	4618      	mov	r0, r3
1005ab7e:	9205      	str	r2, [sp, #20]
1005ab80:	47b8      	blx	r7
1005ab82:	463b      	mov	r3, r7
1005ab84:	4605      	mov	r5, r0
1005ab86:	4335      	orrs	r5, r6
1005ab88:	9803      	ldr	r0, [sp, #12]
1005ab8a:	0200      	lsls	r0, r0, #8
1005ab8c:	9904      	ldr	r1, [sp, #16]
1005ab8e:	1847      	adds	r7, r0, r1
1005ab90:	22ff      	movs	r2, #255	@ 0xff
1005ab92:	32f4      	adds	r2, #244	@ 0xf4
1005ab94:	4638      	mov	r0, r7
1005ab96:	9906      	ldr	r1, [sp, #24]
1005ab98:	4798      	blx	r3
1005ab9a:	4606      	mov	r6, r0
1005ab9c:	432e      	orrs	r6, r5
1005ab9e:	1c78      	adds	r0, r7, #1
1005aba0:	9902      	ldr	r1, [sp, #8]
1005aba2:	4348      	muls	r0, r1
1005aba4:	0880      	lsrs	r0, r0, #2
1005aba6:	b281      	uxth	r1, r0
1005aba8:	290a      	cmp	r1, #10
1005abaa:	d800      	bhi.n	1005abae <llc_conn_check_connect_request_params+0x7a>
1005abac:	210a      	movs	r1, #10
1005abae:	7f20      	ldrb	r0, [r4, #28]
1005abb0:	7f62      	ldrb	r2, [r4, #29]
1005abb2:	0212      	lsls	r2, r2, #8
1005abb4:	1810      	adds	r0, r2, r0
1005abb6:	9a05      	ldr	r2, [sp, #20]
1005abb8:	4d0e      	ldr	r5, [pc, #56]	@ (1005abf4 <__arm_cp.1_0>)
1005abba:	47a8      	blx	r5
1005abbc:	4306      	orrs	r6, r0
1005abbe:	2023      	movs	r0, #35	@ 0x23
1005abc0:	5c21      	ldrb	r1, [r4, r0]
1005abc2:	201f      	movs	r0, #31
1005abc4:	4008      	ands	r0, r1
1005abc6:	2105      	movs	r1, #5
1005abc8:	2210      	movs	r2, #16
1005abca:	47a8      	blx	r5
1005abcc:	4330      	orrs	r0, r6
1005abce:	d001      	beq.n	1005abd4 <llc_conn_check_connect_request_params+0xa0>
1005abd0:	9806      	ldr	r0, [sp, #24]
1005abd2:	e00c      	b.n	1005abee <llc_conn_check_connect_request_params+0xba>
1005abd4:	4620      	mov	r0, r4
1005abd6:	3022      	adds	r0, #34	@ 0x22
1005abd8:	7800      	ldrb	r0, [r0, #0]
1005abda:	06c0      	lsls	r0, r0, #27
1005abdc:	d106      	bne.n	1005abec <llc_conn_check_connect_request_params+0xb8>
1005abde:	201e      	movs	r0, #30
1005abe0:	2822      	cmp	r0, #34	@ 0x22
1005abe2:	d0f5      	beq.n	1005abd0 <llc_conn_check_connect_request_params+0x9c>
1005abe4:	5c21      	ldrb	r1, [r4, r0]
1005abe6:	1c40      	adds	r0, r0, #1
1005abe8:	2900      	cmp	r1, #0
1005abea:	d0f9      	beq.n	1005abe0 <llc_conn_check_connect_request_params+0xac>
1005abec:	9801      	ldr	r0, [sp, #4]
1005abee:	b007      	add	sp, #28
1005abf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005abf2:	46c0      	nop			@ (mov r8, r8)

1005abf4 <__arm_cp.1_0>:
1005abf4:	1005ff65 	.word	0x1005ff65

1005abf8 <llc_conn_check_ctrl_proc_rsp_timer>:
1005abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005abfa:	460d      	mov	r5, r1
1005abfc:	4604      	mov	r4, r0
1005abfe:	2030      	movs	r0, #48	@ 0x30
1005ac00:	5c20      	ldrb	r0, [r4, r0]
1005ac02:	2101      	movs	r1, #1
1005ac04:	f001 f871 	bl	1005bcea <LL_cpe_get_active_status>
1005ac08:	4627      	mov	r7, r4
1005ac0a:	3730      	adds	r7, #48	@ 0x30
1005ac0c:	2801      	cmp	r0, #1
1005ac0e:	d10e      	bne.n	1005ac2e <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005ac10:	7838      	ldrb	r0, [r7, #0]
1005ac12:	2101      	movs	r1, #1
1005ac14:	f001 fe8a 	bl	1005c92c <LL_cpe_conn_exception_opcode_from_sm>
1005ac18:	2800      	cmp	r0, #0
1005ac1a:	d108      	bne.n	1005ac2e <llc_conn_check_ctrl_proc_rsp_timer+0x36>
1005ac1c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
1005ac1e:	1e41      	subs	r1, r0, #1
1005ac20:	d41d      	bmi.n	1005ac5e <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005ac22:	217d      	movs	r1, #125	@ 0x7d
1005ac24:	0449      	lsls	r1, r1, #17
1005ac26:	4288      	cmp	r0, r1
1005ac28:	d800      	bhi.n	1005ac2c <llc_conn_check_ctrl_proc_rsp_timer+0x34>
1005ac2a:	1b41      	subs	r1, r0, r5
1005ac2c:	6721      	str	r1, [r4, #112]	@ 0x70
1005ac2e:	7838      	ldrb	r0, [r7, #0]
1005ac30:	2600      	movs	r6, #0
1005ac32:	4631      	mov	r1, r6
1005ac34:	f001 f859 	bl	1005bcea <LL_cpe_get_active_status>
1005ac38:	2801      	cmp	r0, #1
1005ac3a:	d111      	bne.n	1005ac60 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005ac3c:	7838      	ldrb	r0, [r7, #0]
1005ac3e:	2600      	movs	r6, #0
1005ac40:	4631      	mov	r1, r6
1005ac42:	f001 fe73 	bl	1005c92c <LL_cpe_conn_exception_opcode_from_sm>
1005ac46:	2800      	cmp	r0, #0
1005ac48:	d10a      	bne.n	1005ac60 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005ac4a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
1005ac4c:	1e41      	subs	r1, r0, #1
1005ac4e:	d406      	bmi.n	1005ac5e <llc_conn_check_ctrl_proc_rsp_timer+0x66>
1005ac50:	217d      	movs	r1, #125	@ 0x7d
1005ac52:	0449      	lsls	r1, r1, #17
1005ac54:	4288      	cmp	r0, r1
1005ac56:	d800      	bhi.n	1005ac5a <llc_conn_check_ctrl_proc_rsp_timer+0x62>
1005ac58:	1b41      	subs	r1, r0, r5
1005ac5a:	66e1      	str	r1, [r4, #108]	@ 0x6c
1005ac5c:	e000      	b.n	1005ac60 <llc_conn_check_ctrl_proc_rsp_timer+0x68>
1005ac5e:	2622      	movs	r6, #34	@ 0x22
1005ac60:	4630      	mov	r0, r6
1005ac62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ac64 <llc_conn_check_instant_and_set_params>:
1005ac64:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005ac66:	4604      	mov	r4, r0
1005ac68:	209a      	movs	r0, #154	@ 0x9a
1005ac6a:	5a20      	ldrh	r0, [r4, r0]
1005ac6c:	07c2      	lsls	r2, r0, #31
1005ac6e:	4625      	mov	r5, r4
1005ac70:	352c      	adds	r5, #44	@ 0x2c
1005ac72:	2a00      	cmp	r2, #0
1005ac74:	d100      	bne.n	1005ac78 <llc_conn_check_instant_and_set_params+0x14>
1005ac76:	e081      	b.n	1005ad7c <llc_conn_check_instant_and_set_params+0x118>
1005ac78:	4626      	mov	r6, r4
1005ac7a:	3698      	adds	r6, #152	@ 0x98
1005ac7c:	8832      	ldrh	r2, [r6, #0]
1005ac7e:	1a51      	subs	r1, r2, r1
1005ac80:	040b      	lsls	r3, r1, #16
1005ac82:	d004      	beq.n	1005ac8e <llc_conn_check_instant_and_set_params+0x2a>
1005ac84:	b208      	sxth	r0, r1
1005ac86:	2800      	cmp	r0, #0
1005ac88:	d578      	bpl.n	1005ad7c <llc_conn_check_instant_and_set_params+0x118>
1005ac8a:	2028      	movs	r0, #40	@ 0x28
1005ac8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ac8e:	0541      	lsls	r1, r0, #21
1005ac90:	d40f      	bmi.n	1005acb2 <llc_conn_check_instant_and_set_params+0x4e>
1005ac92:	0701      	lsls	r1, r0, #28
1005ac94:	d416      	bmi.n	1005acc4 <llc_conn_check_instant_and_set_params+0x60>
1005ac96:	0680      	lsls	r0, r0, #26
1005ac98:	d438      	bmi.n	1005ad0c <llc_conn_check_instant_and_set_params+0xa8>
1005ac9a:	7928      	ldrb	r0, [r5, #4]
1005ac9c:	f7f4 f923 	bl	1004eee6 <LL_phy_upd_pending_ucfg>
1005aca0:	2800      	cmp	r0, #0
1005aca2:	d060      	beq.n	1005ad66 <llc_conn_check_instant_and_set_params+0x102>
1005aca4:	7928      	ldrb	r0, [r5, #4]
1005aca6:	2101      	movs	r1, #1
1005aca8:	2200      	movs	r2, #0
1005acaa:	4613      	mov	r3, r2
1005acac:	f003 f9e2 	bl	1005e074 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>
1005acb0:	e059      	b.n	1005ad66 <llc_conn_check_instant_and_set_params+0x102>
1005acb2:	7928      	ldrb	r0, [r5, #4]
1005acb4:	4611      	mov	r1, r2
1005acb6:	f7ff f9b7 	bl	1005a028 <llc_cig_cmn_start_cis_ucfg_weak>
1005acba:	8870      	ldrh	r0, [r6, #2]
1005acbc:	4932      	ldr	r1, [pc, #200]	@ (1005ad88 <__arm_cp.3_0>)
1005acbe:	4001      	ands	r1, r0
1005acc0:	8071      	strh	r1, [r6, #2]
1005acc2:	e050      	b.n	1005ad66 <llc_conn_check_instant_and_set_params+0x102>
1005acc4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005acc6:	6b37      	ldr	r7, [r6, #48]	@ 0x30
1005acc8:	6879      	ldr	r1, [r7, #4]
1005acca:	1840      	adds	r0, r0, r1
1005accc:	6460      	str	r0, [r4, #68]	@ 0x44
1005acce:	68b9      	ldr	r1, [r7, #8]
1005acd0:	683a      	ldr	r2, [r7, #0]
1005acd2:	7828      	ldrb	r0, [r5, #0]
1005acd4:	2802      	cmp	r0, #2
1005acd6:	9102      	str	r1, [sp, #8]
1005acd8:	9201      	str	r2, [sp, #4]
1005acda:	d129      	bne.n	1005ad30 <llc_conn_check_instant_and_set_params+0xcc>
1005acdc:	7d68      	ldrb	r0, [r5, #21]
1005acde:	f7f9 f92f 	bl	10053f40 <BLEPLAT_CNTR_SmGetTxPhy>
1005ace2:	2804      	cmp	r0, #4
1005ace4:	d001      	beq.n	1005acea <llc_conn_check_instant_and_set_params+0x86>
1005ace6:	2806      	cmp	r0, #6
1005ace8:	d100      	bne.n	1005acec <llc_conn_check_instant_and_set_params+0x88>
1005acea:	2002      	movs	r0, #2
1005acec:	9b02      	ldr	r3, [sp, #8]
1005acee:	6979      	ldr	r1, [r7, #20]
1005acf0:	4299      	cmp	r1, r3
1005acf2:	460a      	mov	r2, r1
1005acf4:	d300      	bcc.n	1005acf8 <llc_conn_check_instant_and_set_params+0x94>
1005acf6:	461a      	mov	r2, r3
1005acf8:	6522      	str	r2, [r4, #80]	@ 0x50
1005acfa:	0080      	lsls	r0, r0, #2
1005acfc:	1820      	adds	r0, r4, r0
1005acfe:	6581      	str	r1, [r0, #88]	@ 0x58
1005ad00:	9801      	ldr	r0, [sp, #4]
1005ad02:	0840      	lsrs	r0, r0, #1
1005ad04:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1005ad06:	1808      	adds	r0, r1, r0
1005ad08:	6460      	str	r0, [r4, #68]	@ 0x44
1005ad0a:	e01b      	b.n	1005ad44 <llc_conn_check_instant_and_set_params+0xe0>
1005ad0c:	2083      	movs	r0, #131	@ 0x83
1005ad0e:	0040      	lsls	r0, r0, #1
1005ad10:	1827      	adds	r7, r4, r0
1005ad12:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005ad14:	7d68      	ldrb	r0, [r5, #21]
1005ad16:	f7f9 f969 	bl	10053fec <BLEPLAT_CNTR_SmSetChannelMap>
1005ad1a:	7838      	ldrb	r0, [r7, #0]
1005ad1c:	2801      	cmp	r0, #1
1005ad1e:	d104      	bne.n	1005ad2a <llc_conn_check_instant_and_set_params+0xc6>
1005ad20:	6b71      	ldr	r1, [r6, #52]	@ 0x34
1005ad22:	34e0      	adds	r4, #224	@ 0xe0
1005ad24:	4620      	mov	r0, r4
1005ad26:	f000 fdcf 	bl	1005b8c8 <llc_mngm_csa2_update_remapping_table>
1005ad2a:	8870      	ldrh	r0, [r6, #2]
1005ad2c:	2120      	movs	r1, #32
1005ad2e:	e018      	b.n	1005ad62 <llc_conn_check_instant_and_set_params+0xfe>
1005ad30:	f7ff f97c 	bl	1005a02c <llc_conn_get_cntxt_p>
1005ad34:	9b02      	ldr	r3, [sp, #8]
1005ad36:	9901      	ldr	r1, [sp, #4]
1005ad38:	6361      	str	r1, [r4, #52]	@ 0x34
1005ad3a:	6840      	ldr	r0, [r0, #4]
1005ad3c:	4298      	cmp	r0, r3
1005ad3e:	d300      	bcc.n	1005ad42 <llc_conn_check_instant_and_set_params+0xde>
1005ad40:	4618      	mov	r0, r3
1005ad42:	6520      	str	r0, [r4, #80]	@ 0x50
1005ad44:	68f8      	ldr	r0, [r7, #12]
1005ad46:	8720      	strh	r0, [r4, #56]	@ 0x38
1005ad48:	6938      	ldr	r0, [r7, #16]
1005ad4a:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005ad4c:	180a      	adds	r2, r1, r0
1005ad4e:	6662      	str	r2, [r4, #100]	@ 0x64
1005ad50:	66a0      	str	r0, [r4, #104]	@ 0x68
1005ad52:	4299      	cmp	r1, r3
1005ad54:	d003      	beq.n	1005ad5e <llc_conn_check_instant_and_set_params+0xfa>
1005ad56:	64e3      	str	r3, [r4, #76]	@ 0x4c
1005ad58:	4620      	mov	r0, r4
1005ad5a:	f000 ff72 	bl	1005bc42 <llc_subrate_reset_params>
1005ad5e:	8870      	ldrh	r0, [r6, #2]
1005ad60:	2108      	movs	r1, #8
1005ad62:	4388      	bics	r0, r1
1005ad64:	8070      	strh	r0, [r6, #2]
1005ad66:	8870      	ldrh	r0, [r6, #2]
1005ad68:	2102      	movs	r1, #2
1005ad6a:	4301      	orrs	r1, r0
1005ad6c:	2001      	movs	r0, #1
1005ad6e:	4381      	bics	r1, r0
1005ad70:	8071      	strh	r1, [r6, #2]
1005ad72:	2015      	movs	r0, #21
1005ad74:	f007 fd88 	bl	10062888 <tsk_notify_idx>
1005ad78:	f7f6 ff09 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005ad7c:	7928      	ldrb	r0, [r5, #4]
1005ad7e:	f7f4 f8da 	bl	1004ef36 <LL_phy_upd_evt_pending_check_isr_ucfg>
1005ad82:	2000      	movs	r0, #0
1005ad84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ad86:	46c0      	nop			@ (mov r8, r8)

1005ad88 <__arm_cp.3_0>:
1005ad88:	0000fbff 	.word	0x0000fbff

1005ad8c <llc_conn_check_supervision_timer>:
1005ad8c:	6e42      	ldr	r2, [r0, #100]	@ 0x64
1005ad8e:	1a51      	subs	r1, r2, r1
1005ad90:	6641      	str	r1, [r0, #100]	@ 0x64
1005ad92:	1e49      	subs	r1, r1, #1
1005ad94:	d401      	bmi.n	1005ad9a <llc_conn_check_supervision_timer+0xe>
1005ad96:	2000      	movs	r0, #0
1005ad98:	4770      	bx	lr
1005ad9a:	2188      	movs	r1, #136	@ 0x88
1005ad9c:	5c40      	ldrb	r0, [r0, r1]
1005ad9e:	0680      	lsls	r0, r0, #26
1005ada0:	d501      	bpl.n	1005ada6 <llc_conn_check_supervision_timer+0x1a>
1005ada2:	2008      	movs	r0, #8
1005ada4:	4770      	bx	lr
1005ada6:	203e      	movs	r0, #62	@ 0x3e
1005ada8:	4770      	bx	lr

1005adaa <llc_conn_release_conn_idx>:
1005adaa:	b580      	push	{r7, lr}
1005adac:	f7ff f948 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005adb0:	212c      	movs	r1, #44	@ 0x2c
1005adb2:	2200      	movs	r2, #0
1005adb4:	5442      	strb	r2, [r0, r1]
1005adb6:	bd80      	pop	{r7, pc}

1005adb8 <llc_conn_disconnect_link>:
1005adb8:	b5b0      	push	{r4, r5, r7, lr}
1005adba:	460c      	mov	r4, r1
1005adbc:	4601      	mov	r1, r0
1005adbe:	0a02      	lsrs	r2, r0, #8
1005adc0:	2012      	movs	r0, #18
1005adc2:	2a0e      	cmp	r2, #14
1005adc4:	d81c      	bhi.n	1005ae00 <llc_conn_disconnect_link+0x48>
1005adc6:	2c1a      	cmp	r4, #26
1005adc8:	d81a      	bhi.n	1005ae00 <llc_conn_disconnect_link+0x48>
1005adca:	2201      	movs	r2, #1
1005adcc:	40a2      	lsls	r2, r4
1005adce:	4b0d      	ldr	r3, [pc, #52]	@ (1005ae04 <__arm_cp.9_0>)
1005add0:	421a      	tst	r2, r3
1005add2:	d015      	beq.n	1005ae00 <llc_conn_disconnect_link+0x48>
1005add4:	4608      	mov	r0, r1
1005add6:	f7ff f941 	bl	1005a05c <llc_conn_get_cntxt_per_p_from_handle>
1005adda:	2800      	cmp	r0, #0
1005addc:	d008      	beq.n	1005adf0 <llc_conn_disconnect_link+0x38>
1005adde:	4605      	mov	r5, r0
1005ade0:	2030      	movs	r0, #48	@ 0x30
1005ade2:	5c28      	ldrb	r0, [r5, r0]
1005ade4:	f001 fd9b 	bl	1005c91e <LL_cpe_get_tx_terminate_in_progress>
1005ade8:	2801      	cmp	r0, #1
1005adea:	d103      	bne.n	1005adf4 <llc_conn_disconnect_link+0x3c>
1005adec:	203a      	movs	r0, #58	@ 0x3a
1005adee:	bdb0      	pop	{r4, r5, r7, pc}
1005adf0:	2002      	movs	r0, #2
1005adf2:	bdb0      	pop	{r4, r5, r7, pc}
1005adf4:	3530      	adds	r5, #48	@ 0x30
1005adf6:	7828      	ldrb	r0, [r5, #0]
1005adf8:	4621      	mov	r1, r4
1005adfa:	f001 fd83 	bl	1005c904 <LL_cpe_set_disconnect>
1005adfe:	2000      	movs	r0, #0
1005ae00:	bdb0      	pop	{r4, r5, r7, pc}
1005ae02:	46c0      	nop			@ (mov r8, r8)

1005ae04 <__arm_cp.9_0>:
1005ae04:	04080020 	.word	0x04080020

1005ae08 <llc_conn_disconnect_link_from_cpf>:
1005ae08:	b510      	push	{r4, lr}
1005ae0a:	4604      	mov	r4, r0
1005ae0c:	202d      	movs	r0, #45	@ 0x2d
1005ae0e:	5421      	strb	r1, [r4, r0]
1005ae10:	342d      	adds	r4, #45	@ 0x2d
1005ae12:	7d20      	ldrb	r0, [r4, #20]
1005ae14:	f005 fd72 	bl	100608fc <LL_sched_delete_taskslot>
1005ae18:	7d20      	ldrb	r0, [r4, #20]
1005ae1a:	f005 fdc1 	bl	100609a0 <LL_sched_check_and_wait_sched>
1005ae1e:	bd10      	pop	{r4, pc}

1005ae20 <llc_conn_go_to_connect>:
1005ae20:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ae22:	b0ad      	sub	sp, #180	@ 0xb4
1005ae24:	4605      	mov	r5, r0
1005ae26:	7ac0      	ldrb	r0, [r0, #11]
1005ae28:	f7ff f90a 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005ae2c:	4606      	mov	r6, r0
1005ae2e:	f7ff f8fd 	bl	1005a02c <llc_conn_get_cntxt_p>
1005ae32:	901f      	str	r0, [sp, #124]	@ 0x7c
1005ae34:	682c      	ldr	r4, [r5, #0]
1005ae36:	2022      	movs	r0, #34	@ 0x22
1005ae38:	5c21      	ldrb	r1, [r4, r0]
1005ae3a:	221f      	movs	r2, #31
1005ae3c:	9217      	str	r2, [sp, #92]	@ 0x5c
1005ae3e:	4011      	ands	r1, r2
1005ae40:	5421      	strb	r1, [r4, r0]
1005ae42:	7d60      	ldrb	r0, [r4, #21]
1005ae44:	9010      	str	r0, [sp, #64]	@ 0x40
1005ae46:	7ba0      	ldrb	r0, [r4, #14]
1005ae48:	9020      	str	r0, [sp, #128]	@ 0x80
1005ae4a:	7be0      	ldrb	r0, [r4, #15]
1005ae4c:	900c      	str	r0, [sp, #48]	@ 0x30
1005ae4e:	7c20      	ldrb	r0, [r4, #16]
1005ae50:	9018      	str	r0, [sp, #96]	@ 0x60
1005ae52:	7c60      	ldrb	r0, [r4, #17]
1005ae54:	901a      	str	r0, [sp, #104]	@ 0x68
1005ae56:	7ca0      	ldrb	r0, [r4, #18]
1005ae58:	901c      	str	r0, [sp, #112]	@ 0x70
1005ae5a:	7ce0      	ldrb	r0, [r4, #19]
1005ae5c:	9013      	str	r0, [sp, #76]	@ 0x4c
1005ae5e:	7d20      	ldrb	r0, [r4, #20]
1005ae60:	9016      	str	r0, [sp, #88]	@ 0x58
1005ae62:	7da0      	ldrb	r0, [r4, #22]
1005ae64:	9008      	str	r0, [sp, #32]
1005ae66:	7de0      	ldrb	r0, [r4, #23]
1005ae68:	900e      	str	r0, [sp, #56]	@ 0x38
1005ae6a:	7e20      	ldrb	r0, [r4, #24]
1005ae6c:	9015      	str	r0, [sp, #84]	@ 0x54
1005ae6e:	7e60      	ldrb	r0, [r4, #25]
1005ae70:	9009      	str	r0, [sp, #36]	@ 0x24
1005ae72:	7ea0      	ldrb	r0, [r4, #26]
1005ae74:	9011      	str	r0, [sp, #68]	@ 0x44
1005ae76:	7ee0      	ldrb	r0, [r4, #27]
1005ae78:	900a      	str	r0, [sp, #40]	@ 0x28
1005ae7a:	7f20      	ldrb	r0, [r4, #28]
1005ae7c:	9014      	str	r0, [sp, #80]	@ 0x50
1005ae7e:	7f60      	ldrb	r0, [r4, #29]
1005ae80:	900f      	str	r0, [sp, #60]	@ 0x3c
1005ae82:	7820      	ldrb	r0, [r4, #0]
1005ae84:	901d      	str	r0, [sp, #116]	@ 0x74
1005ae86:	4620      	mov	r0, r4
1005ae88:	3022      	adds	r0, #34	@ 0x22
1005ae8a:	7840      	ldrb	r0, [r0, #1]
1005ae8c:	9019      	str	r0, [sp, #100]	@ 0x64
1005ae8e:	7ba8      	ldrb	r0, [r5, #14]
1005ae90:	f7f9 f856 	bl	10053f40 <BLEPLAT_CNTR_SmGetTxPhy>
1005ae94:	9022      	str	r0, [sp, #136]	@ 0x88
1005ae96:	f004 ff77 	bl	1005fd88 <llc_get_channel_sel_algo2_enabled>
1005ae9a:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ae9c:	2094      	movs	r0, #148	@ 0x94
1005ae9e:	5830      	ldr	r0, [r6, r0]
1005aea0:	2300      	movs	r3, #0
1005aea2:	6003      	str	r3, [r0, #0]
1005aea4:	2090      	movs	r0, #144	@ 0x90
1005aea6:	5830      	ldr	r0, [r6, r0]
1005aea8:	6003      	str	r3, [r0, #0]
1005aeaa:	20a8      	movs	r0, #168	@ 0xa8
1005aeac:	5233      	strh	r3, [r6, r0]
1005aeae:	2042      	movs	r0, #66	@ 0x42
1005aeb0:	5233      	strh	r3, [r6, r0]
1005aeb2:	202d      	movs	r0, #45	@ 0x2d
1005aeb4:	5433      	strb	r3, [r6, r0]
1005aeb6:	2045      	movs	r0, #69	@ 0x45
1005aeb8:	0080      	lsls	r0, r0, #2
1005aeba:	5033      	str	r3, [r6, r0]
1005aebc:	2111      	movs	r1, #17
1005aebe:	0109      	lsls	r1, r1, #4
1005aec0:	5473      	strb	r3, [r6, r1]
1005aec2:	2121      	movs	r1, #33	@ 0x21
1005aec4:	00c9      	lsls	r1, r1, #3
1005aec6:	227f      	movs	r2, #127	@ 0x7f
1005aec8:	5472      	strb	r2, [r6, r1]
1005aeca:	212f      	movs	r1, #47	@ 0x2f
1005aecc:	2207      	movs	r2, #7
1005aece:	5472      	strb	r2, [r6, r1]
1005aed0:	2188      	movs	r1, #136	@ 0x88
1005aed2:	5073      	str	r3, [r6, r1]
1005aed4:	218c      	movs	r1, #140	@ 0x8c
1005aed6:	5073      	str	r3, [r6, r1]
1005aed8:	4631      	mov	r1, r6
1005aeda:	31a8      	adds	r1, #168	@ 0xa8
1005aedc:	810b      	strh	r3, [r1, #8]
1005aede:	9121      	str	r1, [sp, #132]	@ 0x84
1005aee0:	728b      	strb	r3, [r1, #10]
1005aee2:	1830      	adds	r0, r6, r0
1005aee4:	931e      	str	r3, [sp, #120]	@ 0x78
1005aee6:	900d      	str	r0, [sp, #52]	@ 0x34
1005aee8:	6043      	str	r3, [r0, #4]
1005aeea:	2701      	movs	r7, #1
1005aeec:	8537      	strh	r7, [r6, #40]	@ 0x28
1005aeee:	9523      	str	r5, [sp, #140]	@ 0x8c
1005aef0:	7ba8      	ldrb	r0, [r5, #14]
1005aef2:	2141      	movs	r1, #65	@ 0x41
1005aef4:	5470      	strb	r0, [r6, r1]
1005aef6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
1005aef8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005aefa:	4002      	ands	r2, r0
1005aefc:	7ae8      	ldrb	r0, [r5, #11]
1005aefe:	2131      	movs	r1, #49	@ 0x31
1005af00:	921b      	str	r2, [sp, #108]	@ 0x6c
1005af02:	5472      	strb	r2, [r6, r1]
1005af04:	2130      	movs	r1, #48	@ 0x30
1005af06:	9112      	str	r1, [sp, #72]	@ 0x48
1005af08:	5470      	strb	r0, [r6, r1]
1005af0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005af0c:	0200      	lsls	r0, r0, #8
1005af0e:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005af10:	1840      	adds	r0, r0, r1
1005af12:	9015      	str	r0, [sp, #84]	@ 0x54
1005af14:	b280      	uxth	r0, r0
1005af16:	0241      	lsls	r1, r0, #9
1005af18:	64f1      	str	r1, [r6, #76]	@ 0x4c
1005af1a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005af1c:	0209      	lsls	r1, r1, #8
1005af1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
1005af20:	1889      	adds	r1, r1, r2
1005af22:	9114      	str	r1, [sp, #80]	@ 0x50
1005af24:	b289      	uxth	r1, r1
1005af26:	0309      	lsls	r1, r1, #12
1005af28:	2203      	movs	r2, #3
1005af2a:	920f      	str	r2, [sp, #60]	@ 0x3c
1005af2c:	0292      	lsls	r2, r2, #10
1005af2e:	4342      	muls	r2, r0
1005af30:	6672      	str	r2, [r6, #100]	@ 0x64
1005af32:	66b1      	str	r1, [r6, #104]	@ 0x68
1005af34:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005af36:	0200      	lsls	r0, r0, #8
1005af38:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005af3a:	1840      	adds	r0, r0, r1
1005af3c:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005af3e:	0409      	lsls	r1, r1, #16
1005af40:	1840      	adds	r0, r0, r1
1005af42:	9016      	str	r0, [sp, #88]	@ 0x58
1005af44:	6570      	str	r0, [r6, #84]	@ 0x54
1005af46:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005af48:	0200      	lsls	r0, r0, #8
1005af4a:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005af4c:	1840      	adds	r0, r0, r1
1005af4e:	9011      	str	r0, [sp, #68]	@ 0x44
1005af50:	8730      	strh	r0, [r6, #56]	@ 0x38
1005af52:	25ff      	movs	r5, #255	@ 0xff
1005af54:	950a      	str	r5, [sp, #40]	@ 0x28
1005af56:	3512      	adds	r5, #18
1005af58:	f005 fa08 	bl	1006036c <llc_get_next_free_conn_handle>
1005af5c:	971c      	str	r7, [sp, #112]	@ 0x70
1005af5e:	5577      	strb	r7, [r6, r5]
1005af60:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005af62:	8770      	strh	r0, [r6, #58]	@ 0x3a
1005af64:	207d      	movs	r0, #125	@ 0x7d
1005af66:	0440      	lsls	r0, r0, #17
1005af68:	66f0      	str	r0, [r6, #108]	@ 0x6c
1005af6a:	6730      	str	r0, [r6, #112]	@ 0x70
1005af6c:	2083      	movs	r0, #131	@ 0x83
1005af6e:	0040      	lsls	r0, r0, #1
1005af70:	1833      	adds	r3, r6, r0
1005af72:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005af74:	0200      	lsls	r0, r0, #8
1005af76:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005af78:	1840      	adds	r0, r0, r1
1005af7a:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005af7c:	0409      	lsls	r1, r1, #16
1005af7e:	1840      	adds	r0, r0, r1
1005af80:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005af82:	0609      	lsls	r1, r1, #24
1005af84:	1840      	adds	r0, r0, r1
1005af86:	901a      	str	r0, [sp, #104]	@ 0x68
1005af88:	4632      	mov	r2, r6
1005af8a:	322c      	adds	r2, #44	@ 0x2c
1005af8c:	341e      	adds	r4, #30
1005af8e:	9418      	str	r4, [sp, #96]	@ 0x60
1005af90:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005af92:	2801      	cmp	r0, #1
1005af94:	9220      	str	r2, [sp, #128]	@ 0x80
1005af96:	9313      	str	r3, [sp, #76]	@ 0x4c
1005af98:	d106      	bne.n	1005afa8 <llc_conn_go_to_connect+0x188>
1005af9a:	7c38      	ldrb	r0, [r7, #16]
1005af9c:	2801      	cmp	r0, #1
1005af9e:	d103      	bne.n	1005afa8 <llc_conn_go_to_connect+0x188>
1005afa0:	2020      	movs	r0, #32
1005afa2:	991d      	ldr	r1, [sp, #116]	@ 0x74
1005afa4:	4008      	ands	r0, r1
1005afa6:	d104      	bne.n	1005afb2 <llc_conn_go_to_connect+0x192>
1005afa8:	7b38      	ldrb	r0, [r7, #12]
1005afaa:	21fe      	movs	r1, #254	@ 0xfe
1005afac:	4001      	ands	r1, r0
1005afae:	2902      	cmp	r1, #2
1005afb0:	d11b      	bne.n	1005afea <llc_conn_go_to_connect+0x1ca>
1005afb2:	2001      	movs	r0, #1
1005afb4:	7018      	strb	r0, [r3, #0]
1005afb6:	7bb8      	ldrb	r0, [r7, #14]
1005afb8:	9c18      	ldr	r4, [sp, #96]	@ 0x60
1005afba:	4621      	mov	r1, r4
1005afbc:	f7f9 f816 	bl	10053fec <BLEPLAT_CNTR_SmSetChannelMap>
1005afc0:	4635      	mov	r5, r6
1005afc2:	35e0      	adds	r5, #224	@ 0xe0
1005afc4:	4628      	mov	r0, r5
1005afc6:	4621      	mov	r1, r4
1005afc8:	f000 fc7e 	bl	1005b8c8 <llc_mngm_csa2_update_remapping_table>
1005afcc:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005afce:	7d40      	ldrb	r0, [r0, #21]
1005afd0:	2200      	movs	r2, #0
1005afd2:	9200      	str	r2, [sp, #0]
1005afd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005afd6:	9101      	str	r1, [sp, #4]
1005afd8:	9202      	str	r2, [sp, #8]
1005afda:	4629      	mov	r1, r5
1005afdc:	921b      	str	r2, [sp, #108]	@ 0x6c
1005afde:	4613      	mov	r3, r2
1005afe0:	f000 fc8d 	bl	1005b8fe <llc_mngm_csa2_select_channel_for_task>
1005afe4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005afe6:	901e      	str	r0, [sp, #120]	@ 0x78
1005afe8:	e001      	b.n	1005afee <llc_conn_go_to_connect+0x1ce>
1005afea:	981e      	ldr	r0, [sp, #120]	@ 0x78
1005afec:	7018      	strb	r0, [r3, #0]
1005afee:	209f      	movs	r0, #159	@ 0x9f
1005aff0:	990d      	ldr	r1, [sp, #52]	@ 0x34
1005aff2:	7788      	strb	r0, [r1, #30]
1005aff4:	48f8      	ldr	r0, [pc, #992]	@ (1005b3d8 <__arm_cp.11_0>)
1005aff6:	8388      	strh	r0, [r1, #28]
1005aff8:	48f8      	ldr	r0, [pc, #992]	@ (1005b3dc <__arm_cp.11_1>)
1005affa:	8348      	strh	r0, [r1, #26]
1005affc:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005affe:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005b000:	4388      	bics	r0, r1
1005b002:	6610      	str	r0, [r2, #96]	@ 0x60
1005b004:	7af8      	ldrb	r0, [r7, #11]
1005b006:	f7f3 ff86 	bl	1004ef16 <LL_phy_update_init_per_st_data_ucfg>
1005b00a:	2029      	movs	r0, #41	@ 0x29
1005b00c:	00c5      	lsls	r5, r0, #3
1005b00e:	20a9      	movs	r0, #169	@ 0xa9
1005b010:	0107      	lsls	r7, r0, #4
1005b012:	f7fe fb3f 	bl	10059694 <data_length_extension_csr_ucfg_weak>
1005b016:	2801      	cmp	r0, #1
1005b018:	d118      	bne.n	1005b04c <llc_conn_go_to_connect+0x22c>
1005b01a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005b01c:	8980      	ldrh	r0, [r0, #12]
1005b01e:	281b      	cmp	r0, #27
1005b020:	d10f      	bne.n	1005b042 <llc_conn_go_to_connect+0x222>
1005b022:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b024:	2804      	cmp	r0, #4
1005b026:	d108      	bne.n	1005b03a <llc_conn_go_to_connect+0x21a>
1005b028:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005b02a:	8a40      	ldrh	r0, [r0, #18]
1005b02c:	42b8      	cmp	r0, r7
1005b02e:	d108      	bne.n	1005b042 <llc_conn_go_to_connect+0x222>
1005b030:	201b      	movs	r0, #27
1005b032:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b034:	8208      	strh	r0, [r1, #16]
1005b036:	8188      	strh	r0, [r1, #12]
1005b038:	e010      	b.n	1005b05c <llc_conn_go_to_connect+0x23c>
1005b03a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
1005b03c:	8a00      	ldrh	r0, [r0, #16]
1005b03e:	42a8      	cmp	r0, r5
1005b040:	d004      	beq.n	1005b04c <llc_conn_go_to_connect+0x22c>
1005b042:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005b044:	6e10      	ldr	r0, [r2, #96]	@ 0x60
1005b046:	2104      	movs	r1, #4
1005b048:	4301      	orrs	r1, r0
1005b04a:	6611      	str	r1, [r2, #96]	@ 0x60
1005b04c:	201b      	movs	r0, #27
1005b04e:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b050:	8208      	strh	r0, [r1, #16]
1005b052:	8188      	strh	r0, [r1, #12]
1005b054:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b056:	2804      	cmp	r0, #4
1005b058:	d000      	beq.n	1005b05c <llc_conn_go_to_connect+0x23c>
1005b05a:	462f      	mov	r7, r5
1005b05c:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005b05e:	0200      	lsls	r0, r0, #8
1005b060:	900e      	str	r0, [sp, #56]	@ 0x38
1005b062:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b064:	828f      	strh	r7, [r1, #20]
1005b066:	824f      	strh	r7, [r1, #18]
1005b068:	830f      	strh	r7, [r1, #24]
1005b06a:	201b      	movs	r0, #27
1005b06c:	82c8      	strh	r0, [r1, #22]
1005b06e:	81c8      	strh	r0, [r1, #14]
1005b070:	83cf      	strh	r7, [r1, #30]
1005b072:	838f      	strh	r7, [r1, #28]
1005b074:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
1005b076:	8b68      	ldrh	r0, [r5, #26]
1005b078:	8348      	strh	r0, [r1, #26]
1005b07a:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b07c:	7af8      	ldrb	r0, [r7, #11]
1005b07e:	f002 f8cf 	bl	1005d220 <llc_conn_init_cte_ctxt_ucfg_weak>
1005b082:	7af8      	ldrb	r0, [r7, #11]
1005b084:	f002 ffe4 	bl	1005e050 <llc_conn_init_pcl_ctxt_ucfg_weak>
1005b088:	7af8      	ldrb	r0, [r7, #11]
1005b08a:	f001 fe87 	bl	1005cd9c <LLC_conn_init_chc_ctxt_ucfg_weak>
1005b08e:	4628      	mov	r0, r5
1005b090:	4631      	mov	r1, r6
1005b092:	f000 fdcb 	bl	1005bc2c <llc_subrate_init_acceptable_per>
1005b096:	7af8      	ldrb	r0, [r7, #11]
1005b098:	f002 ffde 	bl	1005e058 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>
1005b09c:	7af8      	ldrb	r0, [r7, #11]
1005b09e:	f000 fd4b 	bl	1005bb38 <llc_past_init_ucfg_weak>
1005b0a2:	4630      	mov	r0, r6
1005b0a4:	f002 fe44 	bl	1005dd30 <LLC_init_le_ping_params>
1005b0a8:	7af8      	ldrb	r0, [r7, #11]
1005b0aa:	f001 fc5b 	bl	1005c964 <llc_cpe_init_sm_ctxt>
1005b0ae:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b0b0:	f7f9 f937 	bl	10054322 <BLEPLAT_CNTR_DemodDelaySt>
1005b0b4:	7b39      	ldrb	r1, [r7, #12]
1005b0b6:	4aca      	ldr	r2, [pc, #808]	@ (1005b3e0 <__arm_cp.11_2>)
1005b0b8:	6812      	ldr	r2, [r2, #0]
1005b0ba:	6817      	ldr	r7, [r2, #0]
1005b0bc:	2903      	cmp	r1, #3
1005b0be:	d004      	beq.n	1005b0ca <llc_conn_go_to_connect+0x2aa>
1005b0c0:	2902      	cmp	r1, #2
1005b0c2:	d10b      	bne.n	1005b0dc <llc_conn_go_to_connect+0x2bc>
1005b0c4:	1a38      	subs	r0, r7, r0
1005b0c6:	383e      	subs	r0, #62	@ 0x3e
1005b0c8:	e012      	b.n	1005b0f0 <llc_conn_go_to_connect+0x2d0>
1005b0ca:	210e      	movs	r1, #14
1005b0cc:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005b0ce:	4628      	mov	r0, r5
1005b0d0:	f004 ff26 	bl	1005ff20 <LL_link_calc_packetlength>
1005b0d4:	1a38      	subs	r0, r7, r0
1005b0d6:	383e      	subs	r0, #62	@ 0x3e
1005b0d8:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b0da:	e00b      	b.n	1005b0f4 <llc_conn_go_to_connect+0x2d4>
1005b0dc:	9923      	ldr	r1, [sp, #140]	@ 0x8c
1005b0de:	7b49      	ldrb	r1, [r1, #13]
1005b0e0:	1a38      	subs	r0, r7, r0
1005b0e2:	2900      	cmp	r1, #0
1005b0e4:	d001      	beq.n	1005b0ea <llc_conn_go_to_connect+0x2ca>
1005b0e6:	3090      	adds	r0, #144	@ 0x90
1005b0e8:	e002      	b.n	1005b0f0 <llc_conn_go_to_connect+0x2d0>
1005b0ea:	2181      	movs	r1, #129	@ 0x81
1005b0ec:	0049      	lsls	r1, r1, #1
1005b0ee:	1840      	adds	r0, r0, r1
1005b0f0:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b0f2:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005b0f4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005b0f6:	9908      	ldr	r1, [sp, #32]
1005b0f8:	065a      	lsls	r2, r3, #25
1005b0fa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005b0fc:	1861      	adds	r1, r4, r1
1005b0fe:	2d04      	cmp	r5, #4
1005b100:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
1005b102:	d007      	beq.n	1005b114 <llc_conn_go_to_connect+0x2f4>
1005b104:	7b3d      	ldrb	r5, [r7, #12]
1005b106:	23fe      	movs	r3, #254	@ 0xfe
1005b108:	402b      	ands	r3, r5
1005b10a:	2b02      	cmp	r3, #2
1005b10c:	d100      	bne.n	1005b110 <llc_conn_go_to_connect+0x2f0>
1005b10e:	931c      	str	r3, [sp, #112]	@ 0x70
1005b110:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
1005b112:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
1005b114:	09db      	lsrs	r3, r3, #7
1005b116:	930e      	str	r3, [sp, #56]	@ 0x38
1005b118:	0fd2      	lsrs	r2, r2, #31
1005b11a:	920f      	str	r2, [sp, #60]	@ 0x3c
1005b11c:	1861      	adds	r1, r4, r1
1005b11e:	024d      	lsls	r5, r1, #9
1005b120:	1829      	adds	r1, r5, r0
1005b122:	683c      	ldr	r4, [r7, #0]
1005b124:	7b78      	ldrb	r0, [r7, #13]
1005b126:	2800      	cmp	r0, #0
1005b128:	d02a      	beq.n	1005b180 <llc_conn_go_to_connect+0x360>
1005b12a:	911d      	str	r1, [sp, #116]	@ 0x74
1005b12c:	9819      	ldr	r0, [sp, #100]	@ 0x64
1005b12e:	0947      	lsrs	r7, r0, #5
1005b130:	f004 ff12 	bl	1005ff58 <LL_link_get_own_sca_ppm>
1005b134:	9019      	str	r0, [sp, #100]	@ 0x64
1005b136:	971c      	str	r7, [sp, #112]	@ 0x70
1005b138:	4638      	mov	r0, r7
1005b13a:	f000 fd8f 	bl	1005bc5c <llc_convert_sca_to_ppm>
1005b13e:	2103      	movs	r1, #3
1005b140:	9a20      	ldr	r2, [sp, #128]	@ 0x80
1005b142:	7011      	strb	r1, [r2, #0]
1005b144:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005b146:	0249      	lsls	r1, r1, #9
1005b148:	6371      	str	r1, [r6, #52]	@ 0x34
1005b14a:	9919      	ldr	r1, [sp, #100]	@ 0x64
1005b14c:	1840      	adds	r0, r0, r1
1005b14e:	8570      	strh	r0, [r6, #42]	@ 0x2a
1005b150:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
1005b152:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005b154:	6852      	ldr	r2, [r2, #4]
1005b156:	4291      	cmp	r1, r2
1005b158:	d300      	bcc.n	1005b15c <llc_conn_go_to_connect+0x33c>
1005b15a:	4611      	mov	r1, r2
1005b15c:	6531      	str	r1, [r6, #80]	@ 0x50
1005b15e:	b280      	uxth	r0, r0
1005b160:	4629      	mov	r1, r5
1005b162:	f004 fed3 	bl	1005ff0c <LL_link_calculate_window_widening_from_ppm>
1005b166:	300d      	adds	r0, #13
1005b168:	0041      	lsls	r1, r0, #1
1005b16a:	6b72      	ldr	r2, [r6, #52]	@ 0x34
1005b16c:	188a      	adds	r2, r1, r2
1005b16e:	1ca4      	adds	r4, r4, #2
1005b170:	941f      	str	r4, [sp, #124]	@ 0x7c
1005b172:	2102      	movs	r1, #2
1005b174:	9110      	str	r1, [sp, #64]	@ 0x40
1005b176:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
1005b178:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b17a:	4b99      	ldr	r3, [pc, #612]	@ (1005b3e0 <__arm_cp.11_2>)
1005b17c:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
1005b17e:	e01b      	b.n	1005b1b8 <llc_conn_go_to_connect+0x398>
1005b180:	460d      	mov	r5, r1
1005b182:	2102      	movs	r1, #2
1005b184:	9820      	ldr	r0, [sp, #128]	@ 0x80
1005b186:	7001      	strb	r1, [r0, #0]
1005b188:	2000      	movs	r0, #0
1005b18a:	8570      	strh	r0, [r6, #42]	@ 0x2a
1005b18c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
1005b18e:	2a04      	cmp	r2, #4
1005b190:	d000      	beq.n	1005b194 <llc_conn_go_to_connect+0x374>
1005b192:	4611      	mov	r1, r2
1005b194:	0089      	lsls	r1, r1, #2
1005b196:	1871      	adds	r1, r6, r1
1005b198:	6d89      	ldr	r1, [r1, #88]	@ 0x58
1005b19a:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
1005b19c:	428a      	cmp	r2, r1
1005b19e:	4b90      	ldr	r3, [pc, #576]	@ (1005b3e0 <__arm_cp.11_2>)
1005b1a0:	d300      	bcc.n	1005b1a4 <llc_conn_go_to_connect+0x384>
1005b1a2:	460a      	mov	r2, r1
1005b1a4:	6532      	str	r2, [r6, #80]	@ 0x50
1005b1a6:	9910      	ldr	r1, [sp, #64]	@ 0x40
1005b1a8:	0209      	lsls	r1, r1, #8
1005b1aa:	186d      	adds	r5, r5, r1
1005b1ac:	3408      	adds	r4, #8
1005b1ae:	941f      	str	r4, [sp, #124]	@ 0x7c
1005b1b0:	2185      	movs	r1, #133	@ 0x85
1005b1b2:	9110      	str	r1, [sp, #64]	@ 0x40
1005b1b4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1005b1b6:	901c      	str	r0, [sp, #112]	@ 0x70
1005b1b8:	6475      	str	r5, [r6, #68]	@ 0x44
1005b1ba:	64b0      	str	r0, [r6, #72]	@ 0x48
1005b1bc:	a824      	add	r0, sp, #144	@ 0x90
1005b1be:	2100      	movs	r1, #0
1005b1c0:	8081      	strh	r1, [r0, #4]
1005b1c2:	911d      	str	r1, [sp, #116]	@ 0x74
1005b1c4:	9124      	str	r1, [sp, #144]	@ 0x90
1005b1c6:	6818      	ldr	r0, [r3, #0]
1005b1c8:	213d      	movs	r1, #61	@ 0x3d
1005b1ca:	5c41      	ldrb	r1, [r0, r1]
1005b1cc:	0689      	lsls	r1, r1, #26
1005b1ce:	9219      	str	r2, [sp, #100]	@ 0x64
1005b1d0:	d506      	bpl.n	1005b1e0 <llc_conn_go_to_connect+0x3c0>
1005b1d2:	303d      	adds	r0, #61	@ 0x3d
1005b1d4:	7b81      	ldrb	r1, [r0, #14]
1005b1d6:	07c9      	lsls	r1, r1, #31
1005b1d8:	d105      	bne.n	1005b1e6 <llc_conn_go_to_connect+0x3c6>
1005b1da:	7a80      	ldrb	r0, [r0, #10]
1005b1dc:	0780      	lsls	r0, r0, #30
1005b1de:	d402      	bmi.n	1005b1e6 <llc_conn_go_to_connect+0x3c6>
1005b1e0:	4627      	mov	r7, r4
1005b1e2:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
1005b1e4:	e036      	b.n	1005b254 <llc_conn_go_to_connect+0x434>
1005b1e6:	6878      	ldr	r0, [r7, #4]
1005b1e8:	6801      	ldr	r1, [r0, #0]
1005b1ea:	23fe      	movs	r3, #254	@ 0xfe
1005b1ec:	400b      	ands	r3, r1
1005b1ee:	aa24      	add	r2, sp, #144	@ 0x90
1005b1f0:	2b02      	cmp	r3, #2
1005b1f2:	d000      	beq.n	1005b1f6 <llc_conn_go_to_connect+0x3d6>
1005b1f4:	921f      	str	r2, [sp, #124]	@ 0x7c
1005b1f6:	b2cd      	uxtb	r5, r1
1005b1f8:	7b79      	ldrb	r1, [r7, #13]
1005b1fa:	2900      	cmp	r1, #0
1005b1fc:	d00c      	beq.n	1005b218 <llc_conn_go_to_connect+0x3f8>
1005b1fe:	a924      	add	r1, sp, #144	@ 0x90
1005b200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005b202:	2a00      	cmp	r2, #0
1005b204:	d016      	beq.n	1005b234 <llc_conn_go_to_connect+0x414>
1005b206:	6839      	ldr	r1, [r7, #0]
1005b208:	7b4a      	ldrb	r2, [r1, #13]
1005b20a:	23c0      	movs	r3, #192	@ 0xc0
1005b20c:	4013      	ands	r3, r2
1005b20e:	aa24      	add	r2, sp, #144	@ 0x90
1005b210:	2b40      	cmp	r3, #64	@ 0x40
1005b212:	d00e      	beq.n	1005b232 <llc_conn_go_to_connect+0x412>
1005b214:	4611      	mov	r1, r2
1005b216:	e00d      	b.n	1005b234 <llc_conn_go_to_connect+0x414>
1005b218:	a924      	add	r1, sp, #144	@ 0x90
1005b21a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
1005b21c:	2a00      	cmp	r2, #0
1005b21e:	d009      	beq.n	1005b234 <llc_conn_go_to_connect+0x414>
1005b220:	683a      	ldr	r2, [r7, #0]
1005b222:	79d1      	ldrb	r1, [r2, #7]
1005b224:	23c0      	movs	r3, #192	@ 0xc0
1005b226:	400b      	ands	r3, r1
1005b228:	a924      	add	r1, sp, #144	@ 0x90
1005b22a:	2b40      	cmp	r3, #64	@ 0x40
1005b22c:	d102      	bne.n	1005b234 <llc_conn_go_to_connect+0x414>
1005b22e:	1c91      	adds	r1, r2, #2
1005b230:	e000      	b.n	1005b234 <llc_conn_go_to_connect+0x414>
1005b232:	3108      	adds	r1, #8
1005b234:	7aba      	ldrb	r2, [r7, #10]
1005b236:	ab26      	add	r3, sp, #152	@ 0x98
1005b238:	759a      	strb	r2, [r3, #22]
1005b23a:	893a      	ldrh	r2, [r7, #8]
1005b23c:	829a      	strh	r2, [r3, #20]
1005b23e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1005b240:	9227      	str	r2, [sp, #156]	@ 0x9c
1005b242:	9128      	str	r1, [sp, #160]	@ 0xa0
1005b244:	2dfe      	cmp	r5, #254	@ 0xfe
1005b246:	d003      	beq.n	1005b250 <llc_conn_go_to_connect+0x430>
1005b248:	2103      	movs	r1, #3
1005b24a:	400d      	ands	r5, r1
1005b24c:	462f      	mov	r7, r5
1005b24e:	e000      	b.n	1005b252 <llc_conn_go_to_connect+0x432>
1005b250:	2701      	movs	r7, #1
1005b252:	1c44      	adds	r4, r0, #1
1005b254:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b256:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
1005b258:	630d      	str	r5, [r1, #48]	@ 0x30
1005b25a:	2001      	movs	r0, #1
1005b25c:	4038      	ands	r0, r7
1005b25e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
1005b260:	5488      	strb	r0, [r1, r2]
1005b262:	634d      	str	r5, [r1, #52]	@ 0x34
1005b264:	4608      	mov	r0, r1
1005b266:	3030      	adds	r0, #48	@ 0x30
1005b268:	1c40      	adds	r0, r0, #1
1005b26a:	2206      	movs	r2, #6
1005b26c:	4621      	mov	r1, r4
1005b26e:	f7f7 fa75 	bl	1005275c <BLEPLAT_MemCpy>
1005b272:	a826      	add	r0, sp, #152	@ 0x98
1005b274:	7685      	strb	r5, [r0, #26]
1005b276:	7607      	strb	r7, [r0, #24]
1005b278:	991c      	ldr	r1, [sp, #112]	@ 0x70
1005b27a:	75c1      	strb	r1, [r0, #23]
1005b27c:	9914      	ldr	r1, [sp, #80]	@ 0x50
1005b27e:	8241      	strh	r1, [r0, #18]
1005b280:	9911      	ldr	r1, [sp, #68]	@ 0x44
1005b282:	8201      	strh	r1, [r0, #16]
1005b284:	9915      	ldr	r1, [sp, #84]	@ 0x54
1005b286:	8181      	strh	r1, [r0, #12]
1005b288:	8f71      	ldrh	r1, [r6, #58]	@ 0x3a
1005b28a:	81c1      	strh	r1, [r0, #14]
1005b28c:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
1005b28e:	7b79      	ldrb	r1, [r7, #13]
1005b290:	7641      	strb	r1, [r0, #25]
1005b292:	9426      	str	r4, [sp, #152]	@ 0x98
1005b294:	f7ff fa86 	bl	1005a7a4 <llc_conn_push_connection_complete_event>
1005b298:	7bf8      	ldrb	r0, [r7, #15]
1005b29a:	2800      	cmp	r0, #0
1005b29c:	d003      	beq.n	1005b2a6 <llc_conn_go_to_connect+0x486>
1005b29e:	7ab9      	ldrb	r1, [r7, #10]
1005b2a0:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005b2a2:	f7ff fa41 	bl	1005a728 <llc_conn_push_adv_set_terminated_event>
1005b2a6:	9813      	ldr	r0, [sp, #76]	@ 0x4c
1005b2a8:	7801      	ldrb	r1, [r0, #0]
1005b2aa:	8f70      	ldrh	r0, [r6, #58]	@ 0x3a
1005b2ac:	f7ff fbb0 	bl	1005aa10 <llc_conn_push_csa_event>
1005b2b0:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b2b2:	6b08      	ldr	r0, [r1, #48]	@ 0x30
1005b2b4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1005b2b6:	f7ff f9df 	bl	1005a678 <llc_conn_list_add_address>
1005b2ba:	7b7c      	ldrb	r4, [r7, #13]
1005b2bc:	7bbf      	ldrb	r7, [r7, #14]
1005b2be:	4638      	mov	r0, r7
1005b2c0:	f7f8 fe4f 	bl	10053f62 <BLEPLAT_CNTR_SmGetTxPwr>
1005b2c4:	9021      	str	r0, [sp, #132]	@ 0x84
1005b2c6:	4638      	mov	r0, r7
1005b2c8:	f7f8 fe60 	bl	10053f8c <BLEPLAT_CNTR_SmInitTo0>
1005b2cc:	4638      	mov	r0, r7
1005b2ce:	9d22      	ldr	r5, [sp, #136]	@ 0x88
1005b2d0:	4629      	mov	r1, r5
1005b2d2:	f7f8 ffd8 	bl	10054286 <BLEPLAT_CNTR_SmSetTxPhy>
1005b2d6:	4638      	mov	r0, r7
1005b2d8:	4629      	mov	r1, r5
1005b2da:	f7f8 ff68 	bl	100541ae <BLEPLAT_CNTR_SmSetRxPhy>
1005b2de:	4638      	mov	r0, r7
1005b2e0:	9918      	ldr	r1, [sp, #96]	@ 0x60
1005b2e2:	f7f8 fe83 	bl	10053fec <BLEPLAT_CNTR_SmSetChannelMap>
1005b2e6:	4638      	mov	r0, r7
1005b2e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
1005b2ea:	f7f8 fe6d 	bl	10053fc8 <BLEPLAT_CNTR_SmSetAccessAddr>
1005b2ee:	4638      	mov	r0, r7
1005b2f0:	991e      	ldr	r1, [sp, #120]	@ 0x78
1005b2f2:	f7f8 fff2 	bl	100542da <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b2f6:	4638      	mov	r0, r7
1005b2f8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
1005b2fa:	f7f8 fecf 	bl	1005409c <BLEPLAT_CNTR_SmSetHopIncr>
1005b2fe:	4638      	mov	r0, r7
1005b300:	9916      	ldr	r1, [sp, #88]	@ 0x58
1005b302:	f7f8 fea4 	bl	1005404e <BLEPLAT_CNTR_SmSetCrcInit>
1005b306:	4638      	mov	r0, r7
1005b308:	4631      	mov	r1, r6
1005b30a:	f7f8 ffaa 	bl	10054262 <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005b30e:	4635      	mov	r5, r6
1005b310:	3514      	adds	r5, #20
1005b312:	4638      	mov	r0, r7
1005b314:	4629      	mov	r1, r5
1005b316:	f7f8 ff38 	bl	1005418a <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005b31a:	4638      	mov	r0, r7
1005b31c:	9921      	ldr	r1, [sp, #132]	@ 0x84
1005b31e:	f7f8 ffc7 	bl	100542b0 <BLEPLAT_CNTR_SmSetTxPwr>
1005b322:	f7fe f95b 	bl	100595dc <cte_csr_ucfg_weak>
1005b326:	2800      	cmp	r0, #0
1005b328:	d102      	bne.n	1005b330 <llc_conn_go_to_connect+0x510>
1005b32a:	4638      	mov	r0, r7
1005b32c:	f7f8 fcd2 	bl	10053cd4 <BLEPLAT_CNTR_SmCteOff>
1005b330:	4638      	mov	r0, r7
1005b332:	2c00      	cmp	r4, #0
1005b334:	d002      	beq.n	1005b33c <llc_conn_go_to_connect+0x51c>
1005b336:	f7f8 ff19 	bl	1005416c <BLEPLAT_CNTR_SmSetRxMode>
1005b33a:	e001      	b.n	1005b340 <llc_conn_go_to_connect+0x520>
1005b33c:	f7f8 ff82 	bl	10054244 <BLEPLAT_CNTR_SmSetTxMode>
1005b340:	4634      	mov	r4, r6
1005b342:	3428      	adds	r4, #40	@ 0x28
1005b344:	f7fe f9a6 	bl	10059694 <data_length_extension_csr_ucfg_weak>
1005b348:	2801      	cmp	r0, #1
1005b34a:	d101      	bne.n	1005b350 <llc_conn_go_to_connect+0x530>
1005b34c:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b34e:	e00c      	b.n	1005b36a <llc_conn_go_to_connect+0x54a>
1005b350:	f000 fbee 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005b354:	2801      	cmp	r0, #1
1005b356:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005b358:	d007      	beq.n	1005b36a <llc_conn_go_to_connect+0x54a>
1005b35a:	f000 fbdf 	bl	1005bb1c <cis_csr_ucfg_weak>
1005b35e:	2801      	cmp	r0, #1
1005b360:	d001      	beq.n	1005b366 <llc_conn_go_to_connect+0x546>
1005b362:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1005b364:	e001      	b.n	1005b36a <llc_conn_go_to_connect+0x54a>
1005b366:	981d      	ldr	r0, [sp, #116]	@ 0x74
1005b368:	43c0      	mvns	r0, r0
1005b36a:	b2c1      	uxtb	r1, r0
1005b36c:	4638      	mov	r0, r7
1005b36e:	f7f8 fe80 	bl	10054072 <BLEPLAT_CNTR_SmSetDataLength>
1005b372:	4630      	mov	r0, r6
1005b374:	4621      	mov	r1, r4
1005b376:	463a      	mov	r2, r7
1005b378:	f000 fa3c 	bl	1005b7f4 <llc_conn_set_blue_packets>
1005b37c:	2100      	movs	r1, #0
1005b37e:	4628      	mov	r0, r5
1005b380:	463a      	mov	r2, r7
1005b382:	f000 fa37 	bl	1005b7f4 <llc_conn_set_blue_packets>
1005b386:	4630      	mov	r0, r6
1005b388:	f7f8 fc83 	bl	10053c92 <BLEPLAT_CNTR_PacketSetTxReady>
1005b38c:	4628      	mov	r0, r5
1005b38e:	f7f8 fc3e 	bl	10053c0e <BLEPLAT_CNTR_PacketSetRxReady>
1005b392:	9823      	ldr	r0, [sp, #140]	@ 0x8c
1005b394:	7b81      	ldrb	r1, [r0, #14]
1005b396:	9122      	str	r1, [sp, #136]	@ 0x88
1005b398:	7c40      	ldrb	r0, [r0, #17]
1005b39a:	4634      	mov	r4, r6
1005b39c:	3444      	adds	r4, #68	@ 0x44
1005b39e:	cc1c      	ldmia	r4, {r2, r3, r4}
1005b3a0:	9920      	ldr	r1, [sp, #128]	@ 0x80
1005b3a2:	788d      	ldrb	r5, [r1, #2]
1005b3a4:	78cf      	ldrb	r7, [r1, #3]
1005b3a6:	490f      	ldr	r1, [pc, #60]	@ (1005b3e4 <__arm_cp.11_3>)
1005b3a8:	9107      	str	r1, [sp, #28]
1005b3aa:	490f      	ldr	r1, [pc, #60]	@ (1005b3e8 <__arm_cp.11_4>)
1005b3ac:	9106      	str	r1, [sp, #24]
1005b3ae:	490f      	ldr	r1, [pc, #60]	@ (1005b3ec <__arm_cp.11_5>)
1005b3b0:	9105      	str	r1, [sp, #20]
1005b3b2:	490f      	ldr	r1, [pc, #60]	@ (1005b3f0 <__arm_cp.11_6>)
1005b3b4:	9104      	str	r1, [sp, #16]
1005b3b6:	9703      	str	r7, [sp, #12]
1005b3b8:	9502      	str	r5, [sp, #8]
1005b3ba:	1ad1      	subs	r1, r2, r3
1005b3bc:	9101      	str	r1, [sp, #4]
1005b3be:	9400      	str	r4, [sp, #0]
1005b3c0:	2800      	cmp	r0, #0
1005b3c2:	d001      	beq.n	1005b3c8 <llc_conn_go_to_connect+0x5a8>
1005b3c4:	4c0c      	ldr	r4, [pc, #48]	@ (1005b3f8 <__arm_cp.11_8>)
1005b3c6:	e000      	b.n	1005b3ca <llc_conn_go_to_connect+0x5aa>
1005b3c8:	4c0a      	ldr	r4, [pc, #40]	@ (1005b3f4 <__arm_cp.11_7>)
1005b3ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
1005b3cc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
1005b3ce:	9822      	ldr	r0, [sp, #136]	@ 0x88
1005b3d0:	4631      	mov	r1, r6
1005b3d2:	47a0      	blx	r4
1005b3d4:	b02d      	add	sp, #180	@ 0xb4
1005b3d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b3d8 <__arm_cp.11_0>:
1005b3d8:	000004ff 	.word	0x000004ff

1005b3dc <__arm_cp.11_1>:
1005b3dc:	0000f7fb 	.word	0x0000f7fb

1005b3e0 <__arm_cp.11_2>:
1005b3e0:	20002ad0 	.word	0x20002ad0

1005b3e4 <__arm_cp.11_3>:
1005b3e4:	10065417 	.word	0x10065417

1005b3e8 <__arm_cp.11_4>:
1005b3e8:	100655a5 	.word	0x100655a5

1005b3ec <__arm_cp.11_5>:
1005b3ec:	1006544f 	.word	0x1006544f

1005b3f0 <__arm_cp.11_6>:
1005b3f0:	100654d9 	.word	0x100654d9

1005b3f4 <__arm_cp.11_7>:
1005b3f4:	100608c5 	.word	0x100608c5

1005b3f8 <__arm_cp.11_8>:
1005b3f8:	10060461 	.word	0x10060461

1005b3fc <llc_conn_peripheral_roll_back_params>:
1005b3fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b3fe:	b089      	sub	sp, #36	@ 0x24
1005b400:	4604      	mov	r4, r0
1005b402:	2091      	movs	r0, #145	@ 0x91
1005b404:	0040      	lsls	r0, r0, #1
1005b406:	5a25      	ldrh	r5, [r4, r0]
1005b408:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
1005b40a:	26ff      	movs	r6, #255	@ 0xff
1005b40c:	3608      	adds	r6, #8
1005b40e:	f7f7 fa70 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
1005b412:	5da1      	ldrb	r1, [r4, r6]
1005b414:	22fe      	movs	r2, #254	@ 0xfe
1005b416:	400a      	ands	r2, r1
1005b418:	55a2      	strb	r2, [r4, r6]
1005b41a:	2135      	movs	r1, #53	@ 0x35
1005b41c:	0109      	lsls	r1, r1, #4
1005b41e:	1846      	adds	r6, r0, r1
1005b420:	437d      	muls	r5, r7
1005b422:	0068      	lsls	r0, r5, #1
1005b424:	1830      	adds	r0, r6, r0
1005b426:	f3ef 8110 	mrs	r1, PRIMASK
1005b42a:	b672      	cpsid	i
1005b42c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
1005b42e:	43c9      	mvns	r1, r1
1005b430:	1840      	adds	r0, r0, r1
1005b432:	d400      	bmi.n	1005b436 <llc_conn_peripheral_roll_back_params+0x3a>
1005b434:	e089      	b.n	1005b54a <llc_conn_peripheral_roll_back_params+0x14e>
1005b436:	2083      	movs	r0, #131	@ 0x83
1005b438:	0040      	lsls	r0, r0, #1
1005b43a:	1820      	adds	r0, r4, r0
1005b43c:	9008      	str	r0, [sp, #32]
1005b43e:	4630      	mov	r0, r6
1005b440:	f005 f84a 	bl	100604d8 <LL_sched_is_scheduler_call_pending>
1005b444:	2800      	cmp	r0, #0
1005b446:	d004      	beq.n	1005b452 <llc_conn_peripheral_roll_back_params+0x56>
1005b448:	4941      	ldr	r1, [pc, #260]	@ (1005b550 <__arm_cp.14_0>)
1005b44a:	6809      	ldr	r1, [r1, #0]
1005b44c:	7bc9      	ldrb	r1, [r1, #15]
1005b44e:	2903      	cmp	r1, #3
1005b450:	d171      	bne.n	1005b536 <llc_conn_peripheral_roll_back_params+0x13a>
1005b452:	9706      	str	r7, [sp, #24]
1005b454:	9004      	str	r0, [sp, #16]
1005b456:	4620      	mov	r0, r4
1005b458:	3031      	adds	r0, #49	@ 0x31
1005b45a:	9007      	str	r0, [sp, #28]
1005b45c:	4620      	mov	r0, r4
1005b45e:	3042      	adds	r0, #66	@ 0x42
1005b460:	9005      	str	r0, [sp, #20]
1005b462:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b464:	1b80      	subs	r0, r0, r6
1005b466:	2700      	movs	r7, #0
1005b468:	2108      	movs	r1, #8
1005b46a:	b24a      	sxtb	r2, r1
1005b46c:	2a00      	cmp	r2, #0
1005b46e:	d40c      	bmi.n	1005b48a <llc_conn_peripheral_roll_back_params+0x8e>
1005b470:	b2cb      	uxtb	r3, r1
1005b472:	462a      	mov	r2, r5
1005b474:	409a      	lsls	r2, r3
1005b476:	4290      	cmp	r0, r2
1005b478:	d302      	bcc.n	1005b480 <llc_conn_peripheral_roll_back_params+0x84>
1005b47a:	2601      	movs	r6, #1
1005b47c:	409e      	lsls	r6, r3
1005b47e:	19bf      	adds	r7, r7, r6
1005b480:	1a82      	subs	r2, r0, r2
1005b482:	d300      	bcc.n	1005b486 <llc_conn_peripheral_roll_back_params+0x8a>
1005b484:	4610      	mov	r0, r2
1005b486:	1e49      	subs	r1, r1, #1
1005b488:	e7ef      	b.n	1005b46a <llc_conn_peripheral_roll_back_params+0x6e>
1005b48a:	9908      	ldr	r1, [sp, #32]
1005b48c:	8b88      	ldrh	r0, [r1, #28]
1005b48e:	4347      	muls	r7, r0
1005b490:	9a05      	ldr	r2, [sp, #20]
1005b492:	8810      	ldrh	r0, [r2, #0]
1005b494:	1bc0      	subs	r0, r0, r7
1005b496:	8010      	strh	r0, [r2, #0]
1005b498:	b2be      	uxth	r6, r7
1005b49a:	9d07      	ldr	r5, [sp, #28]
1005b49c:	7c28      	ldrb	r0, [r5, #16]
1005b49e:	7809      	ldrb	r1, [r1, #0]
1005b4a0:	2901      	cmp	r1, #1
1005b4a2:	d10f      	bne.n	1005b4c4 <llc_conn_peripheral_roll_back_params+0xc8>
1005b4a4:	4617      	mov	r7, r2
1005b4a6:	f7f8 fc66 	bl	10053d76 <BLEPLAT_CNTR_SmGetAccessAddr>
1005b4aa:	883f      	ldrh	r7, [r7, #0]
1005b4ac:	7c2a      	ldrb	r2, [r5, #16]
1005b4ae:	2300      	movs	r3, #0
1005b4b0:	9300      	str	r3, [sp, #0]
1005b4b2:	9001      	str	r0, [sp, #4]
1005b4b4:	9302      	str	r3, [sp, #8]
1005b4b6:	4621      	mov	r1, r4
1005b4b8:	31e0      	adds	r1, #224	@ 0xe0
1005b4ba:	4610      	mov	r0, r2
1005b4bc:	463a      	mov	r2, r7
1005b4be:	f000 fa1e 	bl	1005b8fe <llc_mngm_csa2_select_channel_for_task>
1005b4c2:	e010      	b.n	1005b4e6 <llc_conn_peripheral_roll_back_params+0xea>
1005b4c4:	f7f8 fcce 	bl	10053e64 <BLEPLAT_CNTR_SmGetHopIncr>
1005b4c8:	2125      	movs	r1, #37	@ 0x25
1005b4ca:	1a08      	subs	r0, r1, r0
1005b4cc:	9008      	str	r0, [sp, #32]
1005b4ce:	4347      	muls	r7, r0
1005b4d0:	7828      	ldrb	r0, [r5, #0]
1005b4d2:	1838      	adds	r0, r7, r0
1005b4d4:	b280      	uxth	r0, r0
1005b4d6:	f000 f9e7 	bl	1005b8a8 <llc_mngm_mod_37>
1005b4da:	7028      	strb	r0, [r5, #0]
1005b4dc:	9908      	ldr	r1, [sp, #32]
1005b4de:	1808      	adds	r0, r1, r0
1005b4e0:	b280      	uxth	r0, r0
1005b4e2:	f000 f9e1 	bl	1005b8a8 <llc_mngm_mod_37>
1005b4e6:	4601      	mov	r1, r0
1005b4e8:	462f      	mov	r7, r5
1005b4ea:	7c28      	ldrb	r0, [r5, #16]
1005b4ec:	f7f8 fef5 	bl	100542da <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b4f0:	9806      	ldr	r0, [sp, #24]
1005b4f2:	4346      	muls	r6, r0
1005b4f4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b4f6:	1b80      	subs	r0, r0, r6
1005b4f8:	6460      	str	r0, [r4, #68]	@ 0x44
1005b4fa:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005b4fc:	4631      	mov	r1, r6
1005b4fe:	f004 fd05 	bl	1005ff0c <LL_link_calculate_window_widening_from_ppm>
1005b502:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
1005b504:	4282      	cmp	r2, r0
1005b506:	d904      	bls.n	1005b512 <llc_conn_peripheral_roll_back_params+0x116>
1005b508:	1a12      	subs	r2, r2, r0
1005b50a:	2a0d      	cmp	r2, #13
1005b50c:	d800      	bhi.n	1005b510 <llc_conn_peripheral_roll_back_params+0x114>
1005b50e:	220d      	movs	r2, #13
1005b510:	64a2      	str	r2, [r4, #72]	@ 0x48
1005b512:	9d04      	ldr	r5, [sp, #16]
1005b514:	6e60      	ldr	r0, [r4, #100]	@ 0x64
1005b516:	1980      	adds	r0, r0, r6
1005b518:	6660      	str	r0, [r4, #100]	@ 0x64
1005b51a:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005b51c:	0051      	lsls	r1, r2, #1
1005b51e:	1809      	adds	r1, r1, r0
1005b520:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b522:	1a82      	subs	r2, r0, r2
1005b524:	7c38      	ldrb	r0, [r7, #16]
1005b526:	f004 ff7f 	bl	10060428 <LL_sched_set_taskslot_length_anchor>
1005b52a:	2d00      	cmp	r5, #0
1005b52c:	d10d      	bne.n	1005b54a <llc_conn_peripheral_roll_back_params+0x14e>
1005b52e:	7c38      	ldrb	r0, [r7, #16]
1005b530:	f004 fff4 	bl	1006051c <LL_sched_engine>
1005b534:	e009      	b.n	1005b54a <llc_conn_peripheral_roll_back_params+0x14e>
1005b536:	9a08      	ldr	r2, [sp, #32]
1005b538:	7850      	ldrb	r0, [r2, #1]
1005b53a:	2101      	movs	r1, #1
1005b53c:	4301      	orrs	r1, r0
1005b53e:	7051      	strb	r1, [r2, #1]
1005b540:	2013      	movs	r0, #19
1005b542:	f007 f9a1 	bl	10062888 <tsk_notify_idx>
1005b546:	f7f6 fb22 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005b54a:	b662      	cpsie	i
1005b54c:	b009      	add	sp, #36	@ 0x24
1005b54e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b550 <__arm_cp.14_0>:
1005b550:	20002ad4 	.word	0x20002ad4

1005b554 <llc_conn_reserve_conn_idx>:
1005b554:	b510      	push	{r4, lr}
1005b556:	2400      	movs	r4, #0
1005b558:	4620      	mov	r0, r4
1005b55a:	f7fe fd71 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005b55e:	490a      	ldr	r1, [pc, #40]	@ (1005b588 <__arm_cp.15_0>)
1005b560:	6809      	ldr	r1, [r1, #0]
1005b562:	2234      	movs	r2, #52	@ 0x34
1005b564:	5c89      	ldrb	r1, [r1, r2]
1005b566:	302c      	adds	r0, #44	@ 0x2c
1005b568:	42a1      	cmp	r1, r4
1005b56a:	d007      	beq.n	1005b57c <llc_conn_reserve_conn_idx+0x28>
1005b56c:	7802      	ldrb	r2, [r0, #0]
1005b56e:	2a00      	cmp	r2, #0
1005b570:	d006      	beq.n	1005b580 <llc_conn_reserve_conn_idx+0x2c>
1005b572:	224d      	movs	r2, #77	@ 0x4d
1005b574:	0092      	lsls	r2, r2, #2
1005b576:	1880      	adds	r0, r0, r2
1005b578:	1c64      	adds	r4, r4, #1
1005b57a:	e7f5      	b.n	1005b568 <llc_conn_reserve_conn_idx+0x14>
1005b57c:	24ff      	movs	r4, #255	@ 0xff
1005b57e:	e001      	b.n	1005b584 <llc_conn_reserve_conn_idx+0x30>
1005b580:	2101      	movs	r1, #1
1005b582:	7001      	strb	r1, [r0, #0]
1005b584:	b2e0      	uxtb	r0, r4
1005b586:	bd10      	pop	{r4, pc}

1005b588 <__arm_cp.15_0>:
1005b588:	20002a7c 	.word	0x20002a7c

1005b58c <llc_conn_send_acl_data>:
1005b58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005b58e:	4606      	mov	r6, r0
1005b590:	8800      	ldrh	r0, [r0, #0]
1005b592:	f7fe fd63 	bl	1005a05c <llc_conn_get_cntxt_per_p_from_handle>
1005b596:	2800      	cmp	r0, #0
1005b598:	d012      	beq.n	1005b5c0 <llc_conn_send_acl_data+0x34>
1005b59a:	4604      	mov	r4, r0
1005b59c:	4607      	mov	r7, r0
1005b59e:	372c      	adds	r7, #44	@ 0x2c
1005b5a0:	f3ef 8010 	mrs	r0, PRIMASK
1005b5a4:	b672      	cpsid	i
1005b5a6:	463d      	mov	r5, r7
1005b5a8:	3554      	adds	r5, #84	@ 0x54
1005b5aa:	4628      	mov	r0, r5
1005b5ac:	4631      	mov	r1, r6
1005b5ae:	f007 fb61 	bl	10062c74 <ACL_list_insert_tail>
1005b5b2:	7838      	ldrb	r0, [r7, #0]
1005b5b4:	2803      	cmp	r0, #3
1005b5b6:	d105      	bne.n	1005b5c4 <llc_conn_send_acl_data+0x38>
1005b5b8:	4620      	mov	r0, r4
1005b5ba:	f7ff ff1f 	bl	1005b3fc <llc_conn_peripheral_roll_back_params>
1005b5be:	e01a      	b.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b5c0:	2002      	movs	r0, #2
1005b5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b5c4:	7d78      	ldrb	r0, [r7, #21]
1005b5c6:	4e28      	ldr	r6, [pc, #160]	@ (1005b668 <__arm_cp.16_0>)
1005b5c8:	6831      	ldr	r1, [r6, #0]
1005b5ca:	7b49      	ldrb	r1, [r1, #13]
1005b5cc:	4288      	cmp	r0, r1
1005b5ce:	d112      	bne.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b5d0:	f7f7 f98f 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
1005b5d4:	6831      	ldr	r1, [r6, #0]
1005b5d6:	6809      	ldr	r1, [r1, #0]
1005b5d8:	43c9      	mvns	r1, r1
1005b5da:	1840      	adds	r0, r0, r1
1005b5dc:	2101      	movs	r1, #1
1005b5de:	0289      	lsls	r1, r1, #10
1005b5e0:	1840      	adds	r0, r0, r1
1005b5e2:	d508      	bpl.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b5e4:	205c      	movs	r0, #92	@ 0x5c
1005b5e6:	5c38      	ldrb	r0, [r7, r0]
1005b5e8:	0640      	lsls	r0, r0, #25
1005b5ea:	d404      	bmi.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b5ec:	4620      	mov	r0, r4
1005b5ee:	f7fe ffe4 	bl	1005a5ba <llc_conn_get_tx_acl_blocked>
1005b5f2:	2800      	cmp	r0, #0
1005b5f4:	d002      	beq.n	1005b5fc <llc_conn_send_acl_data+0x70>
1005b5f6:	b662      	cpsie	i
1005b5f8:	2084      	movs	r0, #132	@ 0x84
1005b5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005b5fc:	4620      	mov	r0, r4
1005b5fe:	f7f8 fa12 	bl	10053a26 <BLEPLAT_CNTR_PacketGetDataPtr>
1005b602:	4606      	mov	r6, r0
1005b604:	4620      	mov	r0, r4
1005b606:	3028      	adds	r0, #40	@ 0x28
1005b608:	4286      	cmp	r6, r0
1005b60a:	d00a      	beq.n	1005b622 <llc_conn_send_acl_data+0x96>
1005b60c:	2101      	movs	r1, #1
1005b60e:	4620      	mov	r0, r4
1005b610:	f7fe ffac 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005b614:	4286      	cmp	r6, r0
1005b616:	d0ee      	beq.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b618:	7830      	ldrb	r0, [r6, #0]
1005b61a:	2110      	movs	r1, #16
1005b61c:	4301      	orrs	r1, r0
1005b61e:	7031      	strb	r1, [r6, #0]
1005b620:	e7e9      	b.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b622:	4812      	ldr	r0, [pc, #72]	@ (1005b66c <__arm_cp.16_1>)
1005b624:	6800      	ldr	r0, [r0, #0]
1005b626:	218c      	movs	r1, #140	@ 0x8c
1005b628:	5840      	ldr	r0, [r0, r1]
1005b62a:	682e      	ldr	r6, [r5, #0]
1005b62c:	8a31      	ldrh	r1, [r6, #16]
1005b62e:	89f2      	ldrh	r2, [r6, #14]
1005b630:	1851      	adds	r1, r2, r1
1005b632:	221f      	movs	r2, #31
1005b634:	400a      	ands	r2, r1
1005b636:	1817      	adds	r7, r2, r0
1005b638:	1cbd      	adds	r5, r7, #2
1005b63a:	4620      	mov	r0, r4
1005b63c:	4629      	mov	r1, r5
1005b63e:	f7f8 fa34 	bl	10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>
1005b642:	4620      	mov	r0, r4
1005b644:	4631      	mov	r1, r6
1005b646:	f7fe fee5 	bl	1005a414 <llc_conn_copy_tx_data_packet>
1005b64a:	67e6      	str	r6, [r4, #124]	@ 0x7c
1005b64c:	78f8      	ldrb	r0, [r7, #3]
1005b64e:	2800      	cmp	r0, #0
1005b650:	d0d1      	beq.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b652:	2101      	movs	r1, #1
1005b654:	4620      	mov	r0, r4
1005b656:	f7fe ff8f 	bl	1005a578 <llc_conn_get_enc_on>
1005b65a:	2801      	cmp	r0, #1
1005b65c:	d1cb      	bne.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b65e:	7868      	ldrb	r0, [r5, #1]
1005b660:	1d00      	adds	r0, r0, #4
1005b662:	7068      	strb	r0, [r5, #1]
1005b664:	e7c7      	b.n	1005b5f6 <llc_conn_send_acl_data+0x6a>
1005b666:	46c0      	nop			@ (mov r8, r8)

1005b668 <__arm_cp.16_0>:
1005b668:	20002ad4 	.word	0x20002ad4

1005b66c <__arm_cp.16_1>:
1005b66c:	20002ad0 	.word	0x20002ad0

1005b670 <llc_conn_set_taskslot_params>:
1005b670:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b672:	b085      	sub	sp, #20
1005b674:	460f      	mov	r7, r1
1005b676:	4604      	mov	r4, r0
1005b678:	2041      	movs	r0, #65	@ 0x41
1005b67a:	5c20      	ldrb	r0, [r4, r0]
1005b67c:	2183      	movs	r1, #131	@ 0x83
1005b67e:	0049      	lsls	r1, r1, #1
1005b680:	5c61      	ldrb	r1, [r4, r1]
1005b682:	4625      	mov	r5, r4
1005b684:	352c      	adds	r5, #44	@ 0x2c
1005b686:	2901      	cmp	r1, #1
1005b688:	d10d      	bne.n	1005b6a6 <llc_conn_set_taskslot_params+0x36>
1005b68a:	f7f8 fb74 	bl	10053d76 <BLEPLAT_CNTR_SmGetAccessAddr>
1005b68e:	8aea      	ldrh	r2, [r5, #22]
1005b690:	7d6e      	ldrb	r6, [r5, #21]
1005b692:	2300      	movs	r3, #0
1005b694:	9300      	str	r3, [sp, #0]
1005b696:	9001      	str	r0, [sp, #4]
1005b698:	9302      	str	r3, [sp, #8]
1005b69a:	4621      	mov	r1, r4
1005b69c:	31e0      	adds	r1, #224	@ 0xe0
1005b69e:	4630      	mov	r0, r6
1005b6a0:	f000 f92d 	bl	1005b8fe <llc_mngm_csa2_select_channel_for_task>
1005b6a4:	e010      	b.n	1005b6c8 <llc_conn_set_taskslot_params+0x58>
1005b6a6:	4616      	mov	r6, r2
1005b6a8:	f7f8 fbdc 	bl	10053e64 <BLEPLAT_CNTR_SmGetHopIncr>
1005b6ac:	9704      	str	r7, [sp, #16]
1005b6ae:	4607      	mov	r7, r0
1005b6b0:	4346      	muls	r6, r0
1005b6b2:	7968      	ldrb	r0, [r5, #5]
1005b6b4:	1836      	adds	r6, r6, r0
1005b6b6:	b2b0      	uxth	r0, r6
1005b6b8:	f000 f8f6 	bl	1005b8a8 <llc_mngm_mod_37>
1005b6bc:	7168      	strb	r0, [r5, #5]
1005b6be:	1bf0      	subs	r0, r6, r7
1005b6c0:	9f04      	ldr	r7, [sp, #16]
1005b6c2:	b280      	uxth	r0, r0
1005b6c4:	f000 f8f0 	bl	1005b8a8 <llc_mngm_mod_37>
1005b6c8:	4601      	mov	r1, r0
1005b6ca:	7d68      	ldrb	r0, [r5, #21]
1005b6cc:	f7f8 fe05 	bl	100542da <BLEPLAT_CNTR_SmSetUnmappedChan>
1005b6d0:	7828      	ldrb	r0, [r5, #0]
1005b6d2:	2802      	cmp	r0, #2
1005b6d4:	d10c      	bne.n	1005b6f0 <llc_conn_set_taskslot_params+0x80>
1005b6d6:	4620      	mov	r0, r4
1005b6d8:	f7f8 fa8c 	bl	10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>
1005b6dc:	4620      	mov	r0, r4
1005b6de:	f7f8 f9f3 	bl	10053ac8 <BLEPLAT_CNTR_PacketSetIncChan>
1005b6e2:	7d68      	ldrb	r0, [r5, #21]
1005b6e4:	f7f8 fdae 	bl	10054244 <BLEPLAT_CNTR_SmSetTxMode>
1005b6e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
1005b6ea:	6d21      	ldr	r1, [r4, #80]	@ 0x50
1005b6ec:	7d68      	ldrb	r0, [r5, #21]
1005b6ee:	e02d      	b.n	1005b74c <llc_conn_set_taskslot_params+0xdc>
1005b6f0:	6ca6      	ldr	r6, [r4, #72]	@ 0x48
1005b6f2:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
1005b6f4:	4639      	mov	r1, r7
1005b6f6:	f004 fc09 	bl	1005ff0c <LL_link_calculate_window_widening_from_ppm>
1005b6fa:	1980      	adds	r0, r0, r6
1005b6fc:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005b6fe:	2900      	cmp	r1, #0
1005b700:	d100      	bne.n	1005b704 <llc_conn_set_taskslot_params+0x94>
1005b702:	300d      	adds	r0, #13
1005b704:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
1005b706:	0849      	lsrs	r1, r1, #1
1005b708:	393e      	subs	r1, #62	@ 0x3e
1005b70a:	4288      	cmp	r0, r1
1005b70c:	d901      	bls.n	1005b712 <llc_conn_set_taskslot_params+0xa2>
1005b70e:	2008      	movs	r0, #8
1005b710:	e022      	b.n	1005b758 <llc_conn_set_taskslot_params+0xe8>
1005b712:	64a0      	str	r0, [r4, #72]	@ 0x48
1005b714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1005b716:	0040      	lsls	r0, r0, #1
1005b718:	2900      	cmp	r1, #0
1005b71a:	d001      	beq.n	1005b720 <llc_conn_set_taskslot_params+0xb0>
1005b71c:	180f      	adds	r7, r1, r0
1005b71e:	e005      	b.n	1005b72c <llc_conn_set_taskslot_params+0xbc>
1005b720:	6f61      	ldr	r1, [r4, #116]	@ 0x74
1005b722:	1808      	adds	r0, r1, r0
1005b724:	6d27      	ldr	r7, [r4, #80]	@ 0x50
1005b726:	42b8      	cmp	r0, r7
1005b728:	d800      	bhi.n	1005b72c <llc_conn_set_taskslot_params+0xbc>
1005b72a:	4607      	mov	r7, r0
1005b72c:	4626      	mov	r6, r4
1005b72e:	3614      	adds	r6, #20
1005b730:	4630      	mov	r0, r6
1005b732:	f7f8 fa5f 	bl	10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>
1005b736:	4630      	mov	r0, r6
1005b738:	f7f8 f9c6 	bl	10053ac8 <BLEPLAT_CNTR_PacketSetIncChan>
1005b73c:	7d68      	ldrb	r0, [r5, #21]
1005b73e:	f7f8 fd15 	bl	1005416c <BLEPLAT_CNTR_SmSetRxMode>
1005b742:	6c60      	ldr	r0, [r4, #68]	@ 0x44
1005b744:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
1005b746:	1a42      	subs	r2, r0, r1
1005b748:	7d68      	ldrb	r0, [r5, #21]
1005b74a:	4639      	mov	r1, r7
1005b74c:	f004 fe6c 	bl	10060428 <LL_sched_set_taskslot_length_anchor>
1005b750:	8e60      	ldrh	r0, [r4, #50]	@ 0x32
1005b752:	1c40      	adds	r0, r0, #1
1005b754:	8660      	strh	r0, [r4, #50]	@ 0x32
1005b756:	2000      	movs	r0, #0
1005b758:	b005      	add	sp, #20
1005b75a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b75c <llc_conn_update_receive_window>:
1005b75c:	b570      	push	{r4, r5, r6, lr}
1005b75e:	4604      	mov	r4, r0
1005b760:	4606      	mov	r6, r0
1005b762:	362c      	adds	r6, #44	@ 0x2c
1005b764:	4605      	mov	r5, r0
1005b766:	35d0      	adds	r5, #208	@ 0xd0
1005b768:	f7f3 fa8e 	bl	1004ec88 <phy_upd_csr_ucfg>
1005b76c:	2801      	cmp	r0, #1
1005b76e:	d10b      	bne.n	1005b788 <llc_conn_update_receive_window+0x2c>
1005b770:	7930      	ldrb	r0, [r6, #4]
1005b772:	210e      	movs	r1, #14
1005b774:	4341      	muls	r1, r0
1005b776:	480e      	ldr	r0, [pc, #56]	@ (1005b7b0 <__arm_cp.18_0>)
1005b778:	6800      	ldr	r0, [r0, #0]
1005b77a:	229c      	movs	r2, #156	@ 0x9c
1005b77c:	5880      	ldr	r0, [r0, r2]
1005b77e:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005b780:	6940      	ldr	r0, [r0, #20]
1005b782:	1840      	adds	r0, r0, r1
1005b784:	79c0      	ldrb	r0, [r0, #7]
1005b786:	e000      	b.n	1005b78a <llc_conn_update_receive_window+0x2e>
1005b788:	2001      	movs	r0, #1
1005b78a:	f7f8 fdca 	bl	10054322 <BLEPLAT_CNTR_DemodDelaySt>
1005b78e:	4909      	ldr	r1, [pc, #36]	@ (1005b7b4 <__arm_cp.18_1>)
1005b790:	4348      	muls	r0, r1
1005b792:	0a00      	lsrs	r0, r0, #8
1005b794:	3010      	adds	r0, #16
1005b796:	6028      	str	r0, [r5, #0]
1005b798:	7832      	ldrb	r2, [r6, #0]
1005b79a:	2a03      	cmp	r2, #3
1005b79c:	d107      	bne.n	1005b7ae <llc_conn_update_receive_window+0x52>
1005b79e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
1005b7a0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
1005b7a2:	005b      	lsls	r3, r3, #1
1005b7a4:	189a      	adds	r2, r3, r2
1005b7a6:	4351      	muls	r1, r2
1005b7a8:	0a09      	lsrs	r1, r1, #8
1005b7aa:	1808      	adds	r0, r1, r0
1005b7ac:	6028      	str	r0, [r5, #0]
1005b7ae:	bd70      	pop	{r4, r5, r6, pc}

1005b7b0 <__arm_cp.18_0>:
1005b7b0:	20002ad0 	.word	0x20002ad0

1005b7b4 <__arm_cp.18_1>:
1005b7b4:	00000271 	.word	0x00000271

1005b7b8 <llc_conn_peripheral_roll_back_params_tsk>:
1005b7b8:	b570      	push	{r4, r5, r6, lr}
1005b7ba:	2400      	movs	r4, #0
1005b7bc:	4620      	mov	r0, r4
1005b7be:	f7fe fc3f 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005b7c2:	4605      	mov	r5, r0
1005b7c4:	4e0a      	ldr	r6, [pc, #40]	@ (1005b7f0 <__arm_cp.20_0>)
1005b7c6:	6830      	ldr	r0, [r6, #0]
1005b7c8:	2134      	movs	r1, #52	@ 0x34
1005b7ca:	5c41      	ldrb	r1, [r0, r1]
1005b7cc:	428c      	cmp	r4, r1
1005b7ce:	d20d      	bcs.n	1005b7ec <llc_conn_peripheral_roll_back_params_tsk+0x34>
1005b7d0:	21ff      	movs	r1, #255	@ 0xff
1005b7d2:	3108      	adds	r1, #8
1005b7d4:	5c69      	ldrb	r1, [r5, r1]
1005b7d6:	07c9      	lsls	r1, r1, #31
1005b7d8:	d003      	beq.n	1005b7e2 <llc_conn_peripheral_roll_back_params_tsk+0x2a>
1005b7da:	4628      	mov	r0, r5
1005b7dc:	f7ff fe0e 	bl	1005b3fc <llc_conn_peripheral_roll_back_params>
1005b7e0:	6830      	ldr	r0, [r6, #0]
1005b7e2:	214d      	movs	r1, #77	@ 0x4d
1005b7e4:	0089      	lsls	r1, r1, #2
1005b7e6:	186d      	adds	r5, r5, r1
1005b7e8:	1c64      	adds	r4, r4, #1
1005b7ea:	e7ed      	b.n	1005b7c8 <llc_conn_peripheral_roll_back_params_tsk+0x10>
1005b7ec:	bd70      	pop	{r4, r5, r6, pc}
1005b7ee:	46c0      	nop			@ (mov r8, r8)

1005b7f0 <__arm_cp.20_0>:
1005b7f0:	20002a7c 	.word	0x20002a7c

1005b7f4 <llc_conn_set_blue_packets>:
1005b7f4:	b570      	push	{r4, r5, r6, lr}
1005b7f6:	4616      	mov	r6, r2
1005b7f8:	460d      	mov	r5, r1
1005b7fa:	4604      	mov	r4, r0
1005b7fc:	f7f8 f920 	bl	10053a40 <BLEPLAT_CNTR_PacketInitTo0>
1005b800:	4620      	mov	r0, r4
1005b802:	f7f8 f938 	bl	10053a76 <BLEPLAT_CNTR_PacketSetCrcinitSel>
1005b806:	4620      	mov	r0, r4
1005b808:	f7f8 f976 	bl	10053af8 <BLEPLAT_CNTR_PacketSetIntDone>
1005b80c:	4620      	mov	r0, r4
1005b80e:	4621      	mov	r1, r4
1005b810:	f7f8 f9b0 	bl	10053b74 <BLEPLAT_CNTR_PacketSetNextPtr>
1005b814:	4620      	mov	r0, r4
1005b816:	f7f8 f9e1 	bl	10053bdc <BLEPLAT_CNTR_PacketSetNsEn>
1005b81a:	4620      	mov	r0, r4
1005b81c:	4631      	mov	r1, r6
1005b81e:	f7f8 f9c5 	bl	10053bac <BLEPLAT_CNTR_PacketSetNextSlot>
1005b822:	4620      	mov	r0, r4
1005b824:	f7f8 fa0f 	bl	10053c46 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005b828:	4620      	mov	r0, r4
1005b82a:	f7f8 f9e3 	bl	10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>
1005b82e:	4620      	mov	r0, r4
1005b830:	f7f8 f94a 	bl	10053ac8 <BLEPLAT_CNTR_PacketSetIncChan>
1005b834:	4620      	mov	r0, r4
1005b836:	f7f8 f990 	bl	10053b5a <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005b83a:	2d00      	cmp	r5, #0
1005b83c:	d00d      	beq.n	1005b85a <llc_conn_set_blue_packets+0x66>
1005b83e:	2094      	movs	r0, #148	@ 0x94
1005b840:	2100      	movs	r1, #0
1005b842:	460a      	mov	r2, r1
1005b844:	f7f7 ff8a 	bl	1005375c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005b848:	4601      	mov	r1, r0
1005b84a:	4620      	mov	r0, r4
1005b84c:	f7f8 f9ec 	bl	10053c28 <BLEPLAT_CNTR_PacketSetTimeout>
1005b850:	4620      	mov	r0, r4
1005b852:	4629      	mov	r1, r5
1005b854:	f7f8 f929 	bl	10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>
1005b858:	bd70      	pop	{r4, r5, r6, pc}
1005b85a:	4812      	ldr	r0, [pc, #72]	@ (1005b8a4 <__arm_cp.21_0>)
1005b85c:	6800      	ldr	r0, [r0, #0]
1005b85e:	2190      	movs	r1, #144	@ 0x90
1005b860:	5845      	ldr	r5, [r0, r1]
1005b862:	2096      	movs	r0, #150	@ 0x96
1005b864:	2101      	movs	r1, #1
1005b866:	2200      	movs	r2, #0
1005b868:	f7f7 ff78 	bl	1005375c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005b86c:	4601      	mov	r1, r0
1005b86e:	4620      	mov	r0, r4
1005b870:	f7f8 f9da 	bl	10053c28 <BLEPLAT_CNTR_PacketSetTimeout>
1005b874:	4620      	mov	r0, r4
1005b876:	f7f8 f94b 	bl	10053b10 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005b87a:	4620      	mov	r0, r4
1005b87c:	f7f8 f960 	bl	10053b40 <BLEPLAT_CNTR_PacketSetIntTxOk>
1005b880:	4620      	mov	r0, r4
1005b882:	f7f8 f951 	bl	10053b28 <BLEPLAT_CNTR_PacketSetIntTimeout>
1005b886:	4620      	mov	r0, r4
1005b888:	f7f8 f92a 	bl	10053ae0 <BLEPLAT_CNTR_PacketSetIntCrcErr>
1005b88c:	1ca9      	adds	r1, r5, #2
1005b88e:	4620      	mov	r0, r4
1005b890:	f7f8 f90b 	bl	10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>
1005b894:	4620      	mov	r0, r4
1005b896:	f7f8 f994 	bl	10053bc2 <BLEPLAT_CNTR_PacketSetNextTxMode>
1005b89a:	4620      	mov	r0, r4
1005b89c:	f7f8 f9ec 	bl	10053c78 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005b8a0:	bd70      	pop	{r4, r5, r6, pc}
1005b8a2:	46c0      	nop			@ (mov r8, r8)

1005b8a4 <__arm_cp.21_0>:
1005b8a4:	20002ad0 	.word	0x20002ad0

1005b8a8 <llc_mngm_mod_37>:
1005b8a8:	4906      	ldr	r1, [pc, #24]	@ (1005b8c4 <__arm_cp.0_0>)
1005b8aa:	4341      	muls	r1, r0
1005b8ac:	0c09      	lsrs	r1, r1, #16
1005b8ae:	2224      	movs	r2, #36	@ 0x24
1005b8b0:	43d2      	mvns	r2, r2
1005b8b2:	434a      	muls	r2, r1
1005b8b4:	1810      	adds	r0, r2, r0
1005b8b6:	b281      	uxth	r1, r0
1005b8b8:	2924      	cmp	r1, #36	@ 0x24
1005b8ba:	d900      	bls.n	1005b8be <llc_mngm_mod_37+0x16>
1005b8bc:	3825      	subs	r0, #37	@ 0x25
1005b8be:	b2c0      	uxtb	r0, r0
1005b8c0:	4770      	bx	lr
1005b8c2:	46c0      	nop			@ (mov r8, r8)

1005b8c4 <__arm_cp.0_0>:
1005b8c4:	000006eb 	.word	0x000006eb

1005b8c8 <llc_mngm_csa2_update_remapping_table>:
1005b8c8:	b570      	push	{r4, r5, r6, lr}
1005b8ca:	460d      	mov	r5, r1
1005b8cc:	4604      	mov	r4, r0
1005b8ce:	1c40      	adds	r0, r0, #1
1005b8d0:	2600      	movs	r6, #0
1005b8d2:	2225      	movs	r2, #37	@ 0x25
1005b8d4:	4631      	mov	r1, r6
1005b8d6:	f7f6 ff51 	bl	1005277c <BLEPLAT_MemSet>
1005b8da:	4630      	mov	r0, r6
1005b8dc:	2e25      	cmp	r6, #37	@ 0x25
1005b8de:	d20c      	bcs.n	1005b8fa <llc_mngm_csa2_update_remapping_table+0x32>
1005b8e0:	2107      	movs	r1, #7
1005b8e2:	4031      	ands	r1, r6
1005b8e4:	08f2      	lsrs	r2, r6, #3
1005b8e6:	5caa      	ldrb	r2, [r5, r2]
1005b8e8:	40ca      	lsrs	r2, r1
1005b8ea:	07d1      	lsls	r1, r2, #31
1005b8ec:	d003      	beq.n	1005b8f6 <llc_mngm_csa2_update_remapping_table+0x2e>
1005b8ee:	b2c1      	uxtb	r1, r0
1005b8f0:	1861      	adds	r1, r4, r1
1005b8f2:	704e      	strb	r6, [r1, #1]
1005b8f4:	1c40      	adds	r0, r0, #1
1005b8f6:	1c76      	adds	r6, r6, #1
1005b8f8:	e7f0      	b.n	1005b8dc <llc_mngm_csa2_update_remapping_table+0x14>
1005b8fa:	7020      	strb	r0, [r4, #0]
1005b8fc:	bd70      	pop	{r4, r5, r6, pc}

1005b8fe <llc_mngm_csa2_select_channel_for_task>:
1005b8fe:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b900:	b08b      	sub	sp, #44	@ 0x2c
1005b902:	9305      	str	r3, [sp, #20]
1005b904:	4617      	mov	r7, r2
1005b906:	460d      	mov	r5, r1
1005b908:	a909      	add	r1, sp, #36	@ 0x24
1005b90a:	f7f8 fa44 	bl	10053d96 <BLEPLAT_CNTR_SmGetChannelMap>
1005b90e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1005b910:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005b912:	9006      	str	r0, [sp, #24]
1005b914:	2800      	cmp	r0, #0
1005b916:	d018      	beq.n	1005b94a <llc_mngm_csa2_select_channel_for_task+0x4c>
1005b918:	9504      	str	r5, [sp, #16]
1005b91a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1005b91c:	2500      	movs	r5, #0
1005b91e:	9806      	ldr	r0, [sp, #24]
1005b920:	42a8      	cmp	r0, r5
1005b922:	d010      	beq.n	1005b946 <llc_mngm_csa2_select_channel_for_task+0x48>
1005b924:	9804      	ldr	r0, [sp, #16]
1005b926:	9003      	str	r0, [sp, #12]
1005b928:	a809      	add	r0, sp, #36	@ 0x24
1005b92a:	9002      	str	r0, [sp, #8]
1005b92c:	a808      	add	r0, sp, #32
1005b92e:	9001      	str	r0, [sp, #4]
1005b930:	a807      	add	r0, sp, #28
1005b932:	9000      	str	r0, [sp, #0]
1005b934:	b2eb      	uxtb	r3, r5
1005b936:	4620      	mov	r0, r4
1005b938:	4639      	mov	r1, r7
1005b93a:	9a05      	ldr	r2, [sp, #20]
1005b93c:	f000 f812 	bl	1005b964 <llc_mngm_csa2_select_channel>
1005b940:	5570      	strb	r0, [r6, r5]
1005b942:	1c6d      	adds	r5, r5, #1
1005b944:	e7eb      	b.n	1005b91e <llc_mngm_csa2_select_channel_for_task+0x20>
1005b946:	7830      	ldrb	r0, [r6, #0]
1005b948:	e00a      	b.n	1005b960 <llc_mngm_csa2_select_channel_for_task+0x62>
1005b94a:	9503      	str	r5, [sp, #12]
1005b94c:	a809      	add	r0, sp, #36	@ 0x24
1005b94e:	9002      	str	r0, [sp, #8]
1005b950:	2200      	movs	r2, #0
1005b952:	9201      	str	r2, [sp, #4]
1005b954:	9200      	str	r2, [sp, #0]
1005b956:	4620      	mov	r0, r4
1005b958:	4639      	mov	r1, r7
1005b95a:	4613      	mov	r3, r2
1005b95c:	f000 f802 	bl	1005b964 <llc_mngm_csa2_select_channel>
1005b960:	b00b      	add	sp, #44	@ 0x2c
1005b962:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005b964 <llc_mngm_csa2_select_channel>:
1005b964:	b5f0      	push	{r4, r5, r6, r7, lr}
1005b966:	b089      	sub	sp, #36	@ 0x24
1005b968:	4615      	mov	r5, r2
1005b96a:	aa08      	add	r2, sp, #32
1005b96c:	2600      	movs	r6, #0
1005b96e:	7016      	strb	r6, [r2, #0]
1005b970:	2d00      	cmp	r5, #0
1005b972:	9306      	str	r3, [sp, #24]
1005b974:	461a      	mov	r2, r3
1005b976:	d100      	bne.n	1005b97a <llc_mngm_csa2_select_channel+0x16>
1005b978:	462a      	mov	r2, r5
1005b97a:	0c07      	lsrs	r7, r0, #16
1005b97c:	4047      	eors	r7, r0
1005b97e:	9811      	ldr	r0, [sp, #68]	@ 0x44
1005b980:	9007      	str	r0, [sp, #28]
1005b982:	2d00      	cmp	r5, #0
1005b984:	d104      	bne.n	1005b990 <llc_mngm_csa2_select_channel+0x2c>
1005b986:	2300      	movs	r3, #0
1005b988:	9806      	ldr	r0, [sp, #24]
1005b98a:	2801      	cmp	r0, #1
1005b98c:	461c      	mov	r4, r3
1005b98e:	d838      	bhi.n	1005ba02 <llc_mngm_csa2_select_channel+0x9e>
1005b990:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005b992:	9005      	str	r0, [sp, #20]
1005b994:	4079      	eors	r1, r7
1005b996:	4051      	eors	r1, r2
1005b998:	460c      	mov	r4, r1
1005b99a:	2e02      	cmp	r6, #2
1005b99c:	d807      	bhi.n	1005b9ae <llc_mngm_csa2_select_channel+0x4a>
1005b99e:	b2a0      	uxth	r0, r4
1005b9a0:	f000 f842 	bl	1005ba28 <llc_mngm_csa2_permutation>
1005b9a4:	2111      	movs	r1, #17
1005b9a6:	4341      	muls	r1, r0
1005b9a8:	19cc      	adds	r4, r1, r7
1005b9aa:	1c76      	adds	r6, r6, #1
1005b9ac:	e7f5      	b.n	1005b99a <llc_mngm_csa2_select_channel+0x36>
1005b9ae:	4620      	mov	r0, r4
1005b9b0:	4078      	eors	r0, r7
1005b9b2:	b286      	uxth	r6, r0
1005b9b4:	4630      	mov	r0, r6
1005b9b6:	f7ff ff77 	bl	1005b8a8 <llc_mngm_mod_37>
1005b9ba:	2824      	cmp	r0, #36	@ 0x24
1005b9bc:	d815      	bhi.n	1005b9ea <llc_mngm_csa2_select_channel+0x86>
1005b9be:	08c1      	lsrs	r1, r0, #3
1005b9c0:	9a05      	ldr	r2, [sp, #20]
1005b9c2:	5c52      	ldrb	r2, [r2, r1]
1005b9c4:	00c9      	lsls	r1, r1, #3
1005b9c6:	1a41      	subs	r1, r0, r1
1005b9c8:	b2c9      	uxtb	r1, r1
1005b9ca:	40ca      	lsrs	r2, r1
1005b9cc:	07d1      	lsls	r1, r2, #31
1005b9ce:	d00c      	beq.n	1005b9ea <llc_mngm_csa2_select_channel+0x86>
1005b9d0:	a908      	add	r1, sp, #32
1005b9d2:	7008      	strb	r0, [r1, #0]
1005b9d4:	9a07      	ldr	r2, [sp, #28]
1005b9d6:	1c51      	adds	r1, r2, #1
1005b9d8:	7812      	ldrb	r2, [r2, #0]
1005b9da:	2300      	movs	r3, #0
1005b9dc:	429a      	cmp	r2, r3
1005b9de:	d00d      	beq.n	1005b9fc <llc_mngm_csa2_select_channel+0x98>
1005b9e0:	5cce      	ldrb	r6, [r1, r3]
1005b9e2:	4286      	cmp	r6, r0
1005b9e4:	d00b      	beq.n	1005b9fe <llc_mngm_csa2_select_channel+0x9a>
1005b9e6:	1c5b      	adds	r3, r3, #1
1005b9e8:	e7f8      	b.n	1005b9dc <llc_mngm_csa2_select_channel+0x78>
1005b9ea:	9907      	ldr	r1, [sp, #28]
1005b9ec:	7808      	ldrb	r0, [r1, #0]
1005b9ee:	4346      	muls	r6, r0
1005b9f0:	0c33      	lsrs	r3, r6, #16
1005b9f2:	18c8      	adds	r0, r1, r3
1005b9f4:	7840      	ldrb	r0, [r0, #1]
1005b9f6:	a908      	add	r1, sp, #32
1005b9f8:	7008      	strb	r0, [r1, #0]
1005b9fa:	e000      	b.n	1005b9fe <llc_mngm_csa2_select_channel+0x9a>
1005b9fc:	2325      	movs	r3, #37	@ 0x25
1005b9fe:	2d00      	cmp	r5, #0
1005ba00:	d10e      	bne.n	1005ba20 <llc_mngm_csa2_select_channel+0xbc>
1005ba02:	990f      	ldr	r1, [sp, #60]	@ 0x3c
1005ba04:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005ba06:	ad08      	add	r5, sp, #32
1005ba08:	b2ba      	uxth	r2, r7
1005ba0a:	9000      	str	r0, [sp, #0]
1005ba0c:	9201      	str	r2, [sp, #4]
1005ba0e:	9807      	ldr	r0, [sp, #28]
1005ba10:	9002      	str	r0, [sp, #8]
1005ba12:	9503      	str	r5, [sp, #12]
1005ba14:	b2a2      	uxth	r2, r4
1005ba16:	b2db      	uxtb	r3, r3
1005ba18:	9806      	ldr	r0, [sp, #24]
1005ba1a:	f000 f803 	bl	1005ba24 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>
1005ba1e:	7828      	ldrb	r0, [r5, #0]
1005ba20:	b009      	add	sp, #36	@ 0x24
1005ba22:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ba24 <llc_mngm_csa2_select_subevent_channel_ucfg_weak>:
1005ba24:	4770      	bx	lr
	...

1005ba28 <llc_mngm_csa2_permutation>:
1005ba28:	0041      	lsls	r1, r0, #1
1005ba2a:	4a0a      	ldr	r2, [pc, #40]	@ (1005ba54 <__arm_cp.7_0>)
1005ba2c:	400a      	ands	r2, r1
1005ba2e:	0840      	lsrs	r0, r0, #1
1005ba30:	4909      	ldr	r1, [pc, #36]	@ (1005ba58 <__arm_cp.7_1>)
1005ba32:	4001      	ands	r1, r0
1005ba34:	1888      	adds	r0, r1, r2
1005ba36:	0081      	lsls	r1, r0, #2
1005ba38:	4a08      	ldr	r2, [pc, #32]	@ (1005ba5c <__arm_cp.7_2>)
1005ba3a:	400a      	ands	r2, r1
1005ba3c:	0880      	lsrs	r0, r0, #2
1005ba3e:	4908      	ldr	r1, [pc, #32]	@ (1005ba60 <__arm_cp.7_3>)
1005ba40:	4001      	ands	r1, r0
1005ba42:	1888      	adds	r0, r1, r2
1005ba44:	0101      	lsls	r1, r0, #4
1005ba46:	4a07      	ldr	r2, [pc, #28]	@ (1005ba64 <__arm_cp.7_4>)
1005ba48:	400a      	ands	r2, r1
1005ba4a:	0900      	lsrs	r0, r0, #4
1005ba4c:	4906      	ldr	r1, [pc, #24]	@ (1005ba68 <__arm_cp.7_5>)
1005ba4e:	4001      	ands	r1, r0
1005ba50:	1888      	adds	r0, r1, r2
1005ba52:	4770      	bx	lr

1005ba54 <__arm_cp.7_0>:
1005ba54:	0001aaaa 	.word	0x0001aaaa

1005ba58 <__arm_cp.7_1>:
1005ba58:	00005555 	.word	0x00005555

1005ba5c <__arm_cp.7_2>:
1005ba5c:	0007cccc 	.word	0x0007cccc

1005ba60 <__arm_cp.7_3>:
1005ba60:	00003333 	.word	0x00003333

1005ba64 <__arm_cp.7_4>:
1005ba64:	0000f0f0 	.word	0x0000f0f0

1005ba68 <__arm_cp.7_5>:
1005ba68:	00000f0f 	.word	0x00000f0f

1005ba6c <llc_wl_clear_filter_accept_list>:
1005ba6c:	b5b0      	push	{r4, r5, r7, lr}
1005ba6e:	2401      	movs	r4, #1
1005ba70:	4620      	mov	r0, r4
1005ba72:	f003 f9f7 	bl	1005ee64 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005ba76:	4605      	mov	r5, r0
1005ba78:	4620      	mov	r0, r4
1005ba7a:	f000 f8b4 	bl	1005bbe6 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005ba7e:	4328      	orrs	r0, r5
1005ba80:	d10a      	bne.n	1005ba98 <llc_wl_clear_filter_accept_list+0x2c>
1005ba82:	4806      	ldr	r0, [pc, #24]	@ (1005ba9c <__arm_cp.1_0>)
1005ba84:	6800      	ldr	r0, [r0, #0]
1005ba86:	219c      	movs	r1, #156	@ 0x9c
1005ba88:	5840      	ldr	r0, [r0, r1]
1005ba8a:	300c      	adds	r0, #12
1005ba8c:	f007 fa0f 	bl	10062eae <addr8_list_clear>
1005ba90:	f000 f85a 	bl	1005bb48 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>
1005ba94:	2000      	movs	r0, #0
1005ba96:	bdb0      	pop	{r4, r5, r7, pc}
1005ba98:	200c      	movs	r0, #12
1005ba9a:	bdb0      	pop	{r4, r5, r7, pc}

1005ba9c <__arm_cp.1_0>:
1005ba9c:	20002ad0 	.word	0x20002ad0

1005baa0 <llc_wl_add_device_to_filter_accept_list>:
1005baa0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005baa2:	b087      	sub	sp, #28
1005baa4:	460c      	mov	r4, r1
1005baa6:	4605      	mov	r5, r0
1005baa8:	9106      	str	r1, [sp, #24]
1005baaa:	9005      	str	r0, [sp, #20]
1005baac:	2601      	movs	r6, #1
1005baae:	4630      	mov	r0, r6
1005bab0:	f003 f9d8 	bl	1005ee64 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>
1005bab4:	4607      	mov	r7, r0
1005bab6:	4630      	mov	r0, r6
1005bab8:	f000 f895 	bl	1005bbe6 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>
1005babc:	4338      	orrs	r0, r7
1005babe:	d11d      	bne.n	1005bafc <llc_wl_add_device_to_filter_accept_list+0x5c>
1005bac0:	b2e8      	uxtb	r0, r5
1005bac2:	28ff      	cmp	r0, #255	@ 0xff
1005bac4:	d105      	bne.n	1005bad2 <llc_wl_add_device_to_filter_accept_list+0x32>
1005bac6:	9005      	str	r0, [sp, #20]
1005bac8:	21ff      	movs	r1, #255	@ 0xff
1005baca:	0609      	lsls	r1, r1, #24
1005bacc:	400c      	ands	r4, r1
1005bace:	9406      	str	r4, [sp, #24]
1005bad0:	4605      	mov	r5, r0
1005bad2:	4810      	ldr	r0, [pc, #64]	@ (1005bb14 <__arm_cp.2_0>)
1005bad4:	6800      	ldr	r0, [r0, #0]
1005bad6:	219c      	movs	r1, #156	@ 0x9c
1005bad8:	5840      	ldr	r0, [r0, r1]
1005bada:	a903      	add	r1, sp, #12
1005badc:	9101      	str	r1, [sp, #4]
1005bade:	a904      	add	r1, sp, #16
1005bae0:	9100      	str	r1, [sp, #0]
1005bae2:	300c      	adds	r0, #12
1005bae4:	2301      	movs	r3, #1
1005bae6:	4629      	mov	r1, r5
1005bae8:	4622      	mov	r2, r4
1005baea:	f007 f961 	bl	10062db0 <addr8_list_add>
1005baee:	2800      	cmp	r0, #0
1005baf0:	d006      	beq.n	1005bb00 <llc_wl_add_device_to_filter_accept_list+0x60>
1005baf2:	a805      	add	r0, sp, #20
1005baf4:	2101      	movs	r1, #1
1005baf6:	f000 f826 	bl	1005bb46 <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>
1005bafa:	e005      	b.n	1005bb08 <llc_wl_add_device_to_filter_accept_list+0x68>
1005bafc:	200c      	movs	r0, #12
1005bafe:	e006      	b.n	1005bb0e <llc_wl_add_device_to_filter_accept_list+0x6e>
1005bb00:	a803      	add	r0, sp, #12
1005bb02:	7800      	ldrb	r0, [r0, #0]
1005bb04:	2800      	cmp	r0, #0
1005bb06:	d001      	beq.n	1005bb0c <llc_wl_add_device_to_filter_accept_list+0x6c>
1005bb08:	2000      	movs	r0, #0
1005bb0a:	e000      	b.n	1005bb0e <llc_wl_add_device_to_filter_accept_list+0x6e>
1005bb0c:	2007      	movs	r0, #7
1005bb0e:	b007      	add	sp, #28
1005bb10:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005bb12:	46c0      	nop			@ (mov r8, r8)

1005bb14 <__arm_cp.2_0>:
1005bb14:	20002ad0 	.word	0x20002ad0

1005bb18 <bis_csr_ucfg_weak>:
1005bb18:	2000      	movs	r0, #0
1005bb1a:	4770      	bx	lr

1005bb1c <cis_csr_ucfg_weak>:
1005bb1c:	2000      	movs	r0, #0
1005bb1e:	4770      	bx	lr

1005bb20 <llc_isoal_mem_alloc_ucfg_weak>:
1005bb20:	4770      	bx	lr

1005bb22 <iso_rx_bn_pdu_event_int_cb_ucfg_weak>:
1005bb22:	2000      	movs	r0, #0
1005bb24:	4770      	bx	lr

1005bb26 <iso_terminate_event_int_cb_ucfg_weak>:
1005bb26:	2000      	movs	r0, #0
1005bb28:	4770      	bx	lr

1005bb2a <iso_tx_bn_pdu_event_int_cb_ucfg_weak>:
1005bb2a:	2000      	movs	r0, #0
1005bb2c:	4770      	bx	lr

1005bb2e <llc_iso_cmn_mem_alloc_ucfg_weak>:
1005bb2e:	4770      	bx	lr

1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>:
1005bb30:	2000      	movs	r0, #0
1005bb32:	4770      	bx	lr

1005bb34 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>:
1005bb34:	2000      	movs	r0, #0
1005bb36:	4770      	bx	lr

1005bb38 <llc_past_init_ucfg_weak>:
1005bb38:	4770      	bx	lr

1005bb3a <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>:
1005bb3a:	4770      	bx	lr

1005bb3c <llc_priv_init_ucfg_weak>:
1005bb3c:	4770      	bx	lr

1005bb3e <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>:
1005bb3e:	4770      	bx	lr

1005bb40 <llc_priv_offline_rpa_resolution_ucfg_weak>:
1005bb40:	4770      	bx	lr

1005bb42 <llc_priv_controller_privacy_csr_ucfg_weak>:
1005bb42:	2000      	movs	r0, #0
1005bb44:	4770      	bx	lr

1005bb46 <llc_priv_set_filter_accept_list_flag_in_resolving_list_ucfg_weak>:
1005bb46:	4770      	bx	lr

1005bb48 <llc_priv_clr_all_filter_accept_list_flags_in_resolving_list_ucfg_weak>:
1005bb48:	4770      	bx	lr

1005bb4a <llc_priv_start_privacy_timer_ucfg_weak>:
1005bb4a:	4770      	bx	lr

1005bb4c <llc_priv_stop_privacy_timer_ucfg_weak>:
1005bb4c:	4770      	bx	lr

1005bb4e <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>:
1005bb4e:	4770      	bx	lr

1005bb50 <llc_priv_enable_rpa_change_at_timeout_ucfg_weak>:
1005bb50:	4770      	bx	lr
	...

1005bb54 <llc_pscan_get_cntxt_per_p>:
1005bb54:	218c      	movs	r1, #140	@ 0x8c
1005bb56:	4341      	muls	r1, r0
1005bb58:	4804      	ldr	r0, [pc, #16]	@ (1005bb6c <__arm_cp.1_0>)
1005bb5a:	6800      	ldr	r0, [r0, #0]
1005bb5c:	229c      	movs	r2, #156	@ 0x9c
1005bb5e:	5880      	ldr	r0, [r0, r2]
1005bb60:	6840      	ldr	r0, [r0, #4]
1005bb62:	6b80      	ldr	r0, [r0, #56]	@ 0x38
1005bb64:	6800      	ldr	r0, [r0, #0]
1005bb66:	6800      	ldr	r0, [r0, #0]
1005bb68:	1840      	adds	r0, r0, r1
1005bb6a:	4770      	bx	lr

1005bb6c <__arm_cp.1_0>:
1005bb6c:	20002ad0 	.word	0x20002ad0

1005bb70 <llc_pscan_init_ucfg_weak>:
1005bb70:	4770      	bx	lr

1005bb72 <llc_pscan_mem_allocate_ucfg_weak>:
1005bb72:	4770      	bx	lr

1005bb74 <llc_pscan_wr_init_ucfg_weak>:
1005bb74:	4770      	bx	lr
	...

1005bb78 <llc_pscan_wr_mem_allocate_ucfg_weak>:
1005bb78:	b510      	push	{r4, lr}
1005bb7a:	2801      	cmp	r0, #1
1005bb7c:	d110      	bne.n	1005bba0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005bb7e:	2901      	cmp	r1, #1
1005bb80:	d10e      	bne.n	1005bba0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005bb82:	2a01      	cmp	r2, #1
1005bb84:	d10c      	bne.n	1005bba0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005bb86:	2400      	movs	r4, #0
1005bb88:	4620      	mov	r0, r4
1005bb8a:	f7ff ffe3 	bl	1005bb54 <llc_pscan_get_cntxt_per_p>
1005bb8e:	3014      	adds	r0, #20
1005bb90:	4904      	ldr	r1, [pc, #16]	@ (1005bba4 <__arm_cp.5_0>)
1005bb92:	7f89      	ldrb	r1, [r1, #30]
1005bb94:	2900      	cmp	r1, #0
1005bb96:	d003      	beq.n	1005bba0 <llc_pscan_wr_mem_allocate_ucfg_weak+0x28>
1005bb98:	6004      	str	r4, [r0, #0]
1005bb9a:	308c      	adds	r0, #140	@ 0x8c
1005bb9c:	1e49      	subs	r1, r1, #1
1005bb9e:	e7f9      	b.n	1005bb94 <llc_pscan_wr_mem_allocate_ucfg_weak+0x1c>
1005bba0:	bd10      	pop	{r4, pc}
1005bba2:	46c0      	nop			@ (mov r8, r8)

1005bba4 <__arm_cp.5_0>:
1005bba4:	20002ae4 	.word	0x20002ae4

1005bba8 <llc_pscan_wr_check_pawr_active_ucfg_weak>:
1005bba8:	2000      	movs	r0, #0
1005bbaa:	4770      	bx	lr

1005bbac <llc_scan_get_cntxt_p>:
1005bbac:	4802      	ldr	r0, [pc, #8]	@ (1005bbb8 <__arm_cp.0_0>)
1005bbae:	6800      	ldr	r0, [r0, #0]
1005bbb0:	219c      	movs	r1, #156	@ 0x9c
1005bbb2:	5840      	ldr	r0, [r0, r1]
1005bbb4:	6840      	ldr	r0, [r0, #4]
1005bbb6:	4770      	bx	lr

1005bbb8 <__arm_cp.0_0>:
1005bbb8:	20002ad0 	.word	0x20002ad0

1005bbbc <llc_scan_init_ucfg_weak>:
1005bbbc:	4770      	bx	lr

1005bbbe <llc_scan_mem_allocate_ucfg_weak>:
1005bbbe:	4770      	bx	lr

1005bbc0 <llc_scan_set_scan_channel_bitmap>:
1005bbc0:	b510      	push	{r4, lr}
1005bbc2:	4604      	mov	r4, r0
1005bbc4:	f7fd fd6c 	bl	100596a0 <scan_csr_ucfg_weak>
1005bbc8:	2801      	cmp	r0, #1
1005bbca:	d108      	bne.n	1005bbde <llc_scan_set_scan_channel_bitmap+0x1e>
1005bbcc:	1e60      	subs	r0, r4, #1
1005bbce:	2806      	cmp	r0, #6
1005bbd0:	d807      	bhi.n	1005bbe2 <llc_scan_set_scan_channel_bitmap+0x22>
1005bbd2:	f7ff ffeb 	bl	1005bbac <llc_scan_get_cntxt_p>
1005bbd6:	21ef      	movs	r1, #239	@ 0xef
1005bbd8:	5444      	strb	r4, [r0, r1]
1005bbda:	2000      	movs	r0, #0
1005bbdc:	bd10      	pop	{r4, pc}
1005bbde:	2011      	movs	r0, #17
1005bbe0:	bd10      	pop	{r4, pc}
1005bbe2:	2012      	movs	r0, #18
1005bbe4:	bd10      	pop	{r4, pc}

1005bbe6 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list>:
1005bbe6:	b5b0      	push	{r4, r5, r7, lr}
1005bbe8:	4605      	mov	r5, r0
1005bbea:	2400      	movs	r4, #0
1005bbec:	f7fd fd58 	bl	100596a0 <scan_csr_ucfg_weak>
1005bbf0:	2801      	cmp	r0, #1
1005bbf2:	d10d      	bne.n	1005bc10 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005bbf4:	f7ff ffda 	bl	1005bbac <llc_scan_get_cntxt_p>
1005bbf8:	21eb      	movs	r1, #235	@ 0xeb
1005bbfa:	5c41      	ldrb	r1, [r0, r1]
1005bbfc:	07c9      	lsls	r1, r1, #31
1005bbfe:	d007      	beq.n	1005bc10 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005bc00:	2d00      	cmp	r5, #0
1005bc02:	d004      	beq.n	1005bc0e <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x28>
1005bc04:	30ea      	adds	r0, #234	@ 0xea
1005bc06:	7800      	ldrb	r0, [r0, #0]
1005bc08:	2401      	movs	r4, #1
1005bc0a:	4004      	ands	r4, r0
1005bc0c:	e000      	b.n	1005bc10 <llc_scan_any_scan_enabled_and_use_of_filter_accept_list+0x2a>
1005bc0e:	2401      	movs	r4, #1
1005bc10:	4620      	mov	r0, r4
1005bc12:	bdb0      	pop	{r4, r5, r7, pc}

1005bc14 <llc_scan_stop_ucfg_weak>:
1005bc14:	2000      	movs	r0, #0
1005bc16:	4770      	bx	lr

1005bc18 <llc_subrate_init_acceptable>:
1005bc18:	2100      	movs	r1, #0
1005bc1a:	4a03      	ldr	r2, [pc, #12]	@ (1005bc28 <__arm_cp.4_0>)
1005bc1c:	62c1      	str	r1, [r0, #44]	@ 0x2c
1005bc1e:	6302      	str	r2, [r0, #48]	@ 0x30
1005bc20:	2119      	movs	r1, #25
1005bc22:	01c9      	lsls	r1, r1, #7
1005bc24:	8681      	strh	r1, [r0, #52]	@ 0x34
1005bc26:	4770      	bx	lr

1005bc28 <__arm_cp.4_0>:
1005bc28:	00010001 	.word	0x00010001

1005bc2c <llc_subrate_init_acceptable_per>:
1005bc2c:	b580      	push	{r7, lr}
1005bc2e:	4603      	mov	r3, r0
1005bc30:	2049      	movs	r0, #73	@ 0x49
1005bc32:	0080      	lsls	r0, r0, #2
1005bc34:	1808      	adds	r0, r1, r0
1005bc36:	332c      	adds	r3, #44	@ 0x2c
1005bc38:	220a      	movs	r2, #10
1005bc3a:	4619      	mov	r1, r3
1005bc3c:	f7f6 fd8e 	bl	1005275c <BLEPLAT_MemCpy>
1005bc40:	bd80      	pop	{r7, pc}

1005bc42 <llc_subrate_reset_params>:
1005bc42:	2147      	movs	r1, #71	@ 0x47
1005bc44:	0089      	lsls	r1, r1, #2
1005bc46:	2200      	movs	r2, #0
1005bc48:	5042      	str	r2, [r0, r1]
1005bc4a:	1840      	adds	r0, r0, r1
1005bc4c:	2101      	movs	r1, #1
1005bc4e:	0409      	lsls	r1, r1, #16
1005bc50:	6041      	str	r1, [r0, #4]
1005bc52:	4770      	bx	lr

1005bc54 <llc_subrate_new_sr_base_event_ucfg_weak>:
1005bc54:	4770      	bx	lr

1005bc56 <llc_subrate_update_cont_counter_ucfg_weak>:
1005bc56:	4770      	bx	lr

1005bc58 <llc_subrate_offline_processing_ucfg_weak>:
1005bc58:	2000      	movs	r0, #0
1005bc5a:	4770      	bx	lr

1005bc5c <llc_convert_sca_to_ppm>:
1005bc5c:	0740      	lsls	r0, r0, #29
1005bc5e:	0f00      	lsrs	r0, r0, #28
1005bc60:	4901      	ldr	r1, [pc, #4]	@ (1005bc68 <__arm_cp.1_0>)
1005bc62:	5a08      	ldrh	r0, [r1, r0]
1005bc64:	4770      	bx	lr
1005bc66:	46c0      	nop			@ (mov r8, r8)

1005bc68 <__arm_cp.1_0>:
1005bc68:	10069808 	.word	0x10069808

1005bc6c <llc_convert_hci_phy_enum_to_hw_phy>:
1005bc6c:	1e80      	subs	r0, r0, #2
1005bc6e:	b2c0      	uxtb	r0, r0
1005bc70:	2803      	cmp	r0, #3
1005bc72:	d301      	bcc.n	1005bc78 <llc_convert_hci_phy_enum_to_hw_phy+0xc>
1005bc74:	2000      	movs	r0, #0
1005bc76:	e002      	b.n	1005bc7e <llc_convert_hci_phy_enum_to_hw_phy+0x12>
1005bc78:	00c1      	lsls	r1, r0, #3
1005bc7a:	4802      	ldr	r0, [pc, #8]	@ (1005bc84 <__arm_cp.4_0>)
1005bc7c:	40c8      	lsrs	r0, r1
1005bc7e:	b2c0      	uxtb	r0, r0
1005bc80:	4770      	bx	lr
1005bc82:	46c0      	nop			@ (mov r8, r8)

1005bc84 <__arm_cp.4_0>:
1005bc84:	00060401 	.word	0x00060401

1005bc88 <ll_cpe_get_cpid_from_opcode>:
1005bc88:	282a      	cmp	r0, #42	@ 0x2a
1005bc8a:	d804      	bhi.n	1005bc96 <ll_cpe_get_cpid_from_opcode+0xe>
1005bc8c:	2103      	movs	r1, #3
1005bc8e:	4341      	muls	r1, r0
1005bc90:	4802      	ldr	r0, [pc, #8]	@ (1005bc9c <__arm_cp.0_0>)
1005bc92:	5c40      	ldrb	r0, [r0, r1]
1005bc94:	4770      	bx	lr
1005bc96:	2016      	movs	r0, #22
1005bc98:	4770      	bx	lr
1005bc9a:	46c0      	nop			@ (mov r8, r8)

1005bc9c <__arm_cp.0_0>:
1005bc9c:	10069818 	.word	0x10069818

1005bca0 <ll_cpe_set_unknown_rsp_pending>:
1005bca0:	b5b0      	push	{r4, r5, r7, lr}
1005bca2:	4604      	mov	r4, r0
1005bca4:	f7fe f9cc 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bca8:	2100      	movs	r1, #0
1005bcaa:	f7fe fc5f 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005bcae:	4605      	mov	r5, r0
1005bcb0:	4620      	mov	r0, r4
1005bcb2:	f000 f80d 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005bcb6:	8801      	ldrh	r1, [r0, #0]
1005bcb8:	4a04      	ldr	r2, [pc, #16]	@ (1005bccc <__arm_cp.1_0>)
1005bcba:	400a      	ands	r2, r1
1005bcbc:	8869      	ldrh	r1, [r5, #2]
1005bcbe:	0609      	lsls	r1, r1, #24
1005bcc0:	0cc9      	lsrs	r1, r1, #19
1005bcc2:	1889      	adds	r1, r1, r2
1005bcc4:	3110      	adds	r1, #16
1005bcc6:	8001      	strh	r1, [r0, #0]
1005bcc8:	bdb0      	pop	{r4, r5, r7, pc}
1005bcca:	46c0      	nop			@ (mov r8, r8)

1005bccc <__arm_cp.1_0>:
1005bccc:	0000e00f 	.word	0x0000e00f

1005bcd0 <LL_cpe_get_ctrl_flds_common_p>:
1005bcd0:	b580      	push	{r7, lr}
1005bcd2:	f7fe f9b5 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bcd6:	30b0      	adds	r0, #176	@ 0xb0
1005bcd8:	bd80      	pop	{r7, pc}

1005bcda <LL_cpe_register_cpf>:
1005bcda:	b5b0      	push	{r4, r5, r7, lr}
1005bcdc:	460c      	mov	r4, r1
1005bcde:	0085      	lsls	r5, r0, #2
1005bce0:	f7fe f9a4 	bl	1005a02c <llc_conn_get_cntxt_p>
1005bce4:	6880      	ldr	r0, [r0, #8]
1005bce6:	5144      	str	r4, [r0, r5]
1005bce8:	bdb0      	pop	{r4, r5, r7, pc}

1005bcea <LL_cpe_get_active_status>:
1005bcea:	b580      	push	{r7, lr}
1005bcec:	f000 f804 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bcf0:	7801      	ldrb	r1, [r0, #0]
1005bcf2:	2001      	movs	r0, #1
1005bcf4:	4008      	ands	r0, r1
1005bcf6:	bd80      	pop	{r7, pc}

1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>:
1005bcf8:	b510      	push	{r4, lr}
1005bcfa:	460c      	mov	r4, r1
1005bcfc:	f7fe f9a0 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bd00:	1900      	adds	r0, r0, r4
1005bd02:	30a8      	adds	r0, #168	@ 0xa8
1005bd04:	bd10      	pop	{r4, pc}

1005bd06 <LL_cpe_set_active>:
1005bd06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005bd08:	461c      	mov	r4, r3
1005bd0a:	4615      	mov	r5, r2
1005bd0c:	460e      	mov	r6, r1
1005bd0e:	4607      	mov	r7, r0
1005bd10:	f7fe f996 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bd14:	1980      	adds	r0, r0, r6
1005bd16:	21ac      	movs	r1, #172	@ 0xac
1005bd18:	5445      	strb	r5, [r0, r1]
1005bd1a:	4638      	mov	r0, r7
1005bd1c:	4631      	mov	r1, r6
1005bd1e:	f7ff ffeb 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bd22:	7801      	ldrb	r1, [r0, #0]
1005bd24:	22de      	movs	r2, #222	@ 0xde
1005bd26:	400a      	ands	r2, r1
1005bd28:	07e1      	lsls	r1, r4, #31
1005bd2a:	0e89      	lsrs	r1, r1, #26
1005bd2c:	1889      	adds	r1, r1, r2
1005bd2e:	1c49      	adds	r1, r1, #1
1005bd30:	7001      	strb	r1, [r0, #0]
1005bd32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005bd34 <LL_cpe_clr_active>:
1005bd34:	b570      	push	{r4, r5, r6, lr}
1005bd36:	4616      	mov	r6, r2
1005bd38:	460d      	mov	r5, r1
1005bd3a:	4604      	mov	r4, r0
1005bd3c:	f000 f814 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005bd40:	42b0      	cmp	r0, r6
1005bd42:	d110      	bne.n	1005bd66 <LL_cpe_clr_active+0x32>
1005bd44:	4620      	mov	r0, r4
1005bd46:	4629      	mov	r1, r5
1005bd48:	f7ff ffd6 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bd4c:	2100      	movs	r1, #0
1005bd4e:	7001      	strb	r1, [r0, #0]
1005bd50:	2d01      	cmp	r5, #1
1005bd52:	d001      	beq.n	1005bd58 <LL_cpe_clr_active+0x24>
1005bd54:	256c      	movs	r5, #108	@ 0x6c
1005bd56:	e000      	b.n	1005bd5a <LL_cpe_clr_active+0x26>
1005bd58:	2570      	movs	r5, #112	@ 0x70
1005bd5a:	4620      	mov	r0, r4
1005bd5c:	f7fe f970 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bd60:	217d      	movs	r1, #125	@ 0x7d
1005bd62:	0449      	lsls	r1, r1, #17
1005bd64:	5141      	str	r1, [r0, r5]
1005bd66:	bd70      	pop	{r4, r5, r6, pc}

1005bd68 <ll_cpe_get_cpid_from_sm>:
1005bd68:	b510      	push	{r4, lr}
1005bd6a:	460c      	mov	r4, r1
1005bd6c:	f7fe f968 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bd70:	1900      	adds	r0, r0, r4
1005bd72:	21ac      	movs	r1, #172	@ 0xac
1005bd74:	5c40      	ldrb	r0, [r0, r1]
1005bd76:	bd10      	pop	{r4, pc}

1005bd78 <LL_cpe_set_blocked>:
1005bd78:	b510      	push	{r4, lr}
1005bd7a:	4614      	mov	r4, r2
1005bd7c:	f7ff ffbc 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bd80:	2c02      	cmp	r4, #2
1005bd82:	d805      	bhi.n	1005bd90 <LL_cpe_set_blocked+0x18>
1005bd84:	00e1      	lsls	r1, r4, #3
1005bd86:	4a03      	ldr	r2, [pc, #12]	@ (1005bd94 <__arm_cp.9_0>)
1005bd88:	40ca      	lsrs	r2, r1
1005bd8a:	7801      	ldrb	r1, [r0, #0]
1005bd8c:	4311      	orrs	r1, r2
1005bd8e:	7001      	strb	r1, [r0, #0]
1005bd90:	bd10      	pop	{r4, pc}
1005bd92:	46c0      	nop			@ (mov r8, r8)

1005bd94 <__arm_cp.9_0>:
1005bd94:	00080402 	.word	0x00080402

1005bd98 <LL_cpe_set_prepare_tx_pdu>:
1005bd98:	b580      	push	{r7, lr}
1005bd9a:	f7ff ffad 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bd9e:	7801      	ldrb	r1, [r0, #0]
1005bda0:	2210      	movs	r2, #16
1005bda2:	430a      	orrs	r2, r1
1005bda4:	7002      	strb	r2, [r0, #0]
1005bda6:	2015      	movs	r0, #21
1005bda8:	f006 fd6e 	bl	10062888 <tsk_notify_idx>
1005bdac:	f7f5 feef 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005bdb0:	bd80      	pop	{r7, pc}

1005bdb2 <LL_cpe_get_cntxt>:
1005bdb2:	b510      	push	{r4, lr}
1005bdb4:	460c      	mov	r4, r1
1005bdb6:	f7fe f943 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bdba:	00a1      	lsls	r1, r4, #2
1005bdbc:	1840      	adds	r0, r0, r1
1005bdbe:	21a0      	movs	r1, #160	@ 0xa0
1005bdc0:	5840      	ldr	r0, [r0, r1]
1005bdc2:	bd10      	pop	{r4, pc}

1005bdc4 <LL_cpe_set_tx_with_instant>:
1005bdc4:	b5b0      	push	{r4, r5, r7, lr}
1005bdc6:	4604      	mov	r4, r0
1005bdc8:	f7ff ff96 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bdcc:	4605      	mov	r5, r0
1005bdce:	4620      	mov	r0, r4
1005bdd0:	f7fe f936 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bdd4:	7829      	ldrb	r1, [r5, #0]
1005bdd6:	2240      	movs	r2, #64	@ 0x40
1005bdd8:	430a      	orrs	r2, r1
1005bdda:	702a      	strb	r2, [r5, #0]
1005bddc:	f7fe fe87 	bl	1005aaee <llc_conn_set_tx_ctrl_pdu_has_instant>
1005bde0:	bdb0      	pop	{r4, r5, r7, pc}

1005bde2 <LL_cpe_set_rx_with_instant>:
1005bde2:	b5b0      	push	{r4, r5, r7, lr}
1005bde4:	4604      	mov	r4, r0
1005bde6:	f7ff ff87 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005bdea:	4605      	mov	r5, r0
1005bdec:	4620      	mov	r0, r4
1005bdee:	f7fe f927 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bdf2:	7829      	ldrb	r1, [r5, #0]
1005bdf4:	2240      	movs	r2, #64	@ 0x40
1005bdf6:	430a      	orrs	r2, r1
1005bdf8:	702a      	strb	r2, [r5, #0]
1005bdfa:	219a      	movs	r1, #154	@ 0x9a
1005bdfc:	5a42      	ldrh	r2, [r0, r1]
1005bdfe:	2301      	movs	r3, #1
1005be00:	4313      	orrs	r3, r2
1005be02:	5243      	strh	r3, [r0, r1]
1005be04:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005be08 <LL_cpe_engine>:
1005be08:	b5f0      	push	{r4, r5, r6, r7, lr}
1005be0a:	b08d      	sub	sp, #52	@ 0x34
1005be0c:	4604      	mov	r4, r0
1005be0e:	a80c      	add	r0, sp, #48	@ 0x30
1005be10:	2700      	movs	r7, #0
1005be12:	8007      	strh	r7, [r0, #0]
1005be14:	4620      	mov	r0, r4
1005be16:	f7fe f913 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005be1a:	21ff      	movs	r1, #255	@ 0xff
1005be1c:	3112      	adds	r1, #18
1005be1e:	900b      	str	r0, [sp, #44]	@ 0x2c
1005be20:	5c40      	ldrb	r0, [r0, r1]
1005be22:	2800      	cmp	r0, #0
1005be24:	9406      	str	r4, [sp, #24]
1005be26:	d100      	bne.n	1005be2a <LL_cpe_engine+0x22>
1005be28:	e083      	b.n	1005bf32 <LL_cpe_engine+0x12a>
1005be2a:	4620      	mov	r0, r4
1005be2c:	f000 fbc2 	bl	1005c5b4 <ll_cpe_set_active>
1005be30:	4620      	mov	r0, r4
1005be32:	f7ff ff4d 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005be36:	4606      	mov	r6, r0
1005be38:	4620      	mov	r0, r4
1005be3a:	f7fe f901 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005be3e:	4604      	mov	r4, r0
1005be40:	8835      	ldrh	r5, [r6, #0]
1005be42:	f7fe fbc0 	bl	1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>
1005be46:	0729      	lsls	r1, r5, #28
1005be48:	d509      	bpl.n	1005be5e <LL_cpe_engine+0x56>
1005be4a:	2803      	cmp	r0, #3
1005be4c:	d107      	bne.n	1005be5e <LL_cpe_engine+0x56>
1005be4e:	2100      	movs	r1, #0
1005be50:	4620      	mov	r0, r4
1005be52:	f7fe fe53 	bl	1005aafc <llc_conn_set_tx_ctrl_pdu_state>
1005be56:	8830      	ldrh	r0, [r6, #0]
1005be58:	2108      	movs	r1, #8
1005be5a:	4388      	bics	r0, r1
1005be5c:	8030      	strh	r0, [r6, #0]
1005be5e:	9806      	ldr	r0, [sp, #24]
1005be60:	f000 fbb0 	bl	1005c5c4 <ll_cpe_check_rx_pdu_can_be_processed>
1005be64:	2800      	cmp	r0, #0
1005be66:	d100      	bne.n	1005be6a <LL_cpe_engine+0x62>
1005be68:	e12e      	b.n	1005c0c8 <LL_cpe_engine+0x2c0>
1005be6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005be6c:	4606      	mov	r6, r0
1005be6e:	362c      	adds	r6, #44	@ 0x2c
1005be70:	4639      	mov	r1, r7
1005be72:	f7fe fb7b 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005be76:	7885      	ldrb	r5, [r0, #2]
1005be78:	9005      	str	r0, [sp, #20]
1005be7a:	7840      	ldrb	r0, [r0, #1]
1005be7c:	9008      	str	r0, [sp, #32]
1005be7e:	2101      	movs	r1, #1
1005be80:	9c06      	ldr	r4, [sp, #24]
1005be82:	4620      	mov	r0, r4
1005be84:	9104      	str	r1, [sp, #16]
1005be86:	463a      	mov	r2, r7
1005be88:	f000 fbad 	bl	1005c5e6 <ll_cpe_get_blocked_status>
1005be8c:	9009      	str	r0, [sp, #36]	@ 0x24
1005be8e:	4620      	mov	r0, r4
1005be90:	4639      	mov	r1, r7
1005be92:	463a      	mov	r2, r7
1005be94:	f000 fba7 	bl	1005c5e6 <ll_cpe_get_blocked_status>
1005be98:	4603      	mov	r3, r0
1005be9a:	9607      	str	r6, [sp, #28]
1005be9c:	7830      	ldrb	r0, [r6, #0]
1005be9e:	1e84      	subs	r4, r0, #2
1005bea0:	1e61      	subs	r1, r4, #1
1005bea2:	4620      	mov	r0, r4
1005bea4:	4188      	sbcs	r0, r1
1005bea6:	950a      	str	r5, [sp, #40]	@ 0x28
1005bea8:	2d2a      	cmp	r5, #42	@ 0x2a
1005beaa:	d900      	bls.n	1005beae <LL_cpe_engine+0xa6>
1005beac:	e068      	b.n	1005bf80 <LL_cpe_engine+0x178>
1005beae:	2103      	movs	r1, #3
1005beb0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005beb2:	4351      	muls	r1, r2
1005beb4:	4aa1      	ldr	r2, [pc, #644]	@ (1005c13c <__arm_cp.14_7>)
1005beb6:	1851      	adds	r1, r2, r1
1005beb8:	7849      	ldrb	r1, [r1, #1]
1005beba:	9a08      	ldr	r2, [sp, #32]
1005bebc:	4291      	cmp	r1, r2
1005bebe:	d000      	beq.n	1005bec2 <LL_cpe_engine+0xba>
1005bec0:	e05e      	b.n	1005bf80 <LL_cpe_engine+0x178>
1005bec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005bec4:	292a      	cmp	r1, #42	@ 0x2a
1005bec6:	d900      	bls.n	1005beca <LL_cpe_engine+0xc2>
1005bec8:	e05a      	b.n	1005bf80 <LL_cpe_engine+0x178>
1005beca:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005becc:	0049      	lsls	r1, r1, #1
1005bece:	46c0      	nop			@ (mov r8, r8)
1005bed0:	4479      	add	r1, pc
1005bed2:	8889      	ldrh	r1, [r1, #4]
1005bed4:	0049      	lsls	r1, r1, #1
1005bed6:	448f      	add	pc, r1
1005bed8:	00540054 	.word	0x00540054
1005bedc:	0054002a 	.word	0x0054002a
1005bee0:	030e030e 	.word	0x030e030e
1005bee4:	002a002a 	.word	0x002a002a
1005bee8:	002a0054 	.word	0x002a0054
1005beec:	002a0054 	.word	0x002a0054
1005bef0:	002a002a 	.word	0x002a002a
1005bef4:	0053030e 	.word	0x0053030e
1005bef8:	002a0053 	.word	0x002a0053
1005befc:	002a002a 	.word	0x002a002a
1005bf00:	03150315 	.word	0x03150315
1005bf04:	03600321 	.word	0x03600321
1005bf08:	00530325 	.word	0x00530325
1005bf0c:	03190319 	.word	0x03190319
1005bf10:	002a0329 	.word	0x002a0329
1005bf14:	031d002a 	.word	0x031d002a
1005bf18:	031d032d 	.word	0x031d032d
1005bf1c:	03110333 	.word	0x03110333
1005bf20:	03110311 	.word	0x03110311
1005bf24:	033d0337 	.word	0x033d0337
1005bf28:	034c0341 	.word	0x034c0341
1005bf2c:	0352      	.short	0x0352
1005bf2e:	9804      	ldr	r0, [sp, #16]
1005bf30:	e027      	b.n	1005bf82 <LL_cpe_engine+0x17a>
1005bf32:	4620      	mov	r0, r4
1005bf34:	f7fe f884 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005bf38:	4605      	mov	r5, r0
1005bf3a:	202d      	movs	r0, #45	@ 0x2d
1005bf3c:	5c28      	ldrb	r0, [r5, r0]
1005bf3e:	2800      	cmp	r0, #0
1005bf40:	d100      	bne.n	1005bf44 <LL_cpe_engine+0x13c>
1005bf42:	e09b      	b.n	1005c07c <LL_cpe_engine+0x274>
1005bf44:	900a      	str	r0, [sp, #40]	@ 0x28
1005bf46:	462f      	mov	r7, r5
1005bf48:	372c      	adds	r7, #44	@ 0x2c
1005bf4a:	462e      	mov	r6, r5
1005bf4c:	36d8      	adds	r6, #216	@ 0xd8
1005bf4e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
1005bf50:	463c      	mov	r4, r7
1005bf52:	3454      	adds	r4, #84	@ 0x54
1005bf54:	7d79      	ldrb	r1, [r7, #21]
1005bf56:	910b      	str	r1, [sp, #44]	@ 0x2c
1005bf58:	2800      	cmp	r0, #0
1005bf5a:	d001      	beq.n	1005bf60 <LL_cpe_engine+0x158>
1005bf5c:	f7f8 fee2 	bl	10054d24 <Acl_Tx_Cmpl_Pkt_Handler>
1005bf60:	4620      	mov	r0, r4
1005bf62:	f006 fe83 	bl	10062c6c <ACL_list_init>
1005bf66:	ce03      	ldmia	r6!, {r0, r1}
1005bf68:	f7fe fba8 	bl	1005a6bc <llc_conn_list_remove_address>
1005bf6c:	4874      	ldr	r0, [pc, #464]	@ (1005c140 <__arm_cp.14_8>)
1005bf6e:	6800      	ldr	r0, [r0, #0]
1005bf70:	212c      	movs	r1, #44	@ 0x2c
1005bf72:	5c40      	ldrb	r0, [r0, r1]
1005bf74:	07c0      	lsls	r0, r0, #31
1005bf76:	0ec1      	lsrs	r1, r0, #27
1005bf78:	8f6c      	ldrh	r4, [r5, #58]	@ 0x3a
1005bf7a:	d148      	bne.n	1005c00e <LL_cpe_engine+0x206>
1005bf7c:	2205      	movs	r2, #5
1005bf7e:	e04d      	b.n	1005c01c <LL_cpe_engine+0x214>
1005bf80:	4638      	mov	r0, r7
1005bf82:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005bf84:	4319      	orrs	r1, r3
1005bf86:	d000      	beq.n	1005bf8a <LL_cpe_engine+0x182>
1005bf88:	e09e      	b.n	1005c0c8 <LL_cpe_engine+0x2c0>
1005bf8a:	2800      	cmp	r0, #0
1005bf8c:	d07d      	beq.n	1005c08a <LL_cpe_engine+0x282>
1005bf8e:	9805      	ldr	r0, [sp, #20]
1005bf90:	78c6      	ldrb	r6, [r0, #3]
1005bf92:	2401      	movs	r4, #1
1005bf94:	9f06      	ldr	r7, [sp, #24]
1005bf96:	4638      	mov	r0, r7
1005bf98:	4621      	mov	r1, r4
1005bf9a:	f000 fb3d 	bl	1005c618 <ll_cpe_get_expected_opcode>
1005bf9e:	9005      	str	r0, [sp, #20]
1005bfa0:	4638      	mov	r0, r7
1005bfa2:	4621      	mov	r1, r4
1005bfa4:	f000 fb40 	bl	1005c628 <ll_cpe_get_state>
1005bfa8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
1005bfaa:	9004      	str	r0, [sp, #16]
1005bfac:	4628      	mov	r0, r5
1005bfae:	9603      	str	r6, [sp, #12]
1005bfb0:	4631      	mov	r1, r6
1005bfb2:	463a      	mov	r2, r7
1005bfb4:	9409      	str	r4, [sp, #36]	@ 0x24
1005bfb6:	4623      	mov	r3, r4
1005bfb8:	f000 fb3e 	bl	1005c638 <LL_cpe_rxctrlpdu_checkreject>
1005bfbc:	1e41      	subs	r1, r0, #1
1005bfbe:	4188      	sbcs	r0, r1
1005bfc0:	9905      	ldr	r1, [sp, #20]
1005bfc2:	1b49      	subs	r1, r1, r5
1005bfc4:	424a      	negs	r2, r1
1005bfc6:	414a      	adcs	r2, r1
1005bfc8:	4302      	orrs	r2, r0
1005bfca:	9804      	ldr	r0, [sp, #16]
1005bfcc:	1f00      	subs	r0, r0, #4
1005bfce:	4245      	negs	r5, r0
1005bfd0:	4145      	adcs	r5, r0
1005bfd2:	4015      	ands	r5, r2
1005bfd4:	2400      	movs	r4, #0
1005bfd6:	4638      	mov	r0, r7
1005bfd8:	4621      	mov	r1, r4
1005bfda:	f000 fb1d 	bl	1005c618 <ll_cpe_get_expected_opcode>
1005bfde:	4606      	mov	r6, r0
1005bfe0:	9807      	ldr	r0, [sp, #28]
1005bfe2:	7800      	ldrb	r0, [r0, #0]
1005bfe4:	9007      	str	r0, [sp, #28]
1005bfe6:	4638      	mov	r0, r7
1005bfe8:	4621      	mov	r1, r4
1005bfea:	f000 fb1d 	bl	1005c628 <ll_cpe_get_state>
1005bfee:	4607      	mov	r7, r0
1005bff0:	2801      	cmp	r0, #1
1005bff2:	d14e      	bne.n	1005c092 <LL_cpe_engine+0x28a>
1005bff4:	9807      	ldr	r0, [sp, #28]
1005bff6:	1e81      	subs	r1, r0, #2
1005bff8:	1e48      	subs	r0, r1, #1
1005bffa:	4181      	sbcs	r1, r0
1005bffc:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005bffe:	4604      	mov	r4, r0
1005c000:	9a08      	ldr	r2, [sp, #32]
1005c002:	f000 fb41 	bl	1005c688 <valid_first_opcode>
1005c006:	2800      	cmp	r0, #0
1005c008:	d044      	beq.n	1005c094 <LL_cpe_engine+0x28c>
1005c00a:	2501      	movs	r5, #1
1005c00c:	e042      	b.n	1005c094 <LL_cpe_engine+0x28c>
1005c00e:	484d      	ldr	r0, [pc, #308]	@ (1005c144 <__arm_cp.14_9>)
1005c010:	6800      	ldr	r0, [r0, #0]
1005c012:	2236      	movs	r2, #54	@ 0x36
1005c014:	5c80      	ldrb	r0, [r0, r2]
1005c016:	06c0      	lsls	r0, r0, #27
1005c018:	d51d      	bpl.n	1005c056 <LL_cpe_engine+0x24e>
1005c01a:	2215      	movs	r2, #21
1005c01c:	206f      	movs	r0, #111	@ 0x6f
1005c01e:	43c0      	mvns	r0, r0
1005c020:	4041      	eors	r1, r0
1005c022:	4849      	ldr	r0, [pc, #292]	@ (1005c148 <__arm_cp.14_10>)
1005c024:	6800      	ldr	r0, [r0, #0]
1005c026:	6900      	ldr	r0, [r0, #16]
1005c028:	b2ce      	uxtb	r6, r1
1005c02a:	2302      	movs	r3, #2
1005c02c:	4631      	mov	r1, r6
1005c02e:	f7f9 f8e1 	bl	100551f4 <aci_event_fifo_push_header>
1005c032:	2800      	cmp	r0, #0
1005c034:	d00f      	beq.n	1005c056 <LL_cpe_engine+0x24e>
1005c036:	4601      	mov	r1, r0
1005c038:	7204      	strb	r4, [r0, #8]
1005c03a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005c03c:	7288      	strb	r0, [r1, #10]
1005c03e:	2000      	movs	r0, #0
1005c040:	71c8      	strb	r0, [r1, #7]
1005c042:	2004      	movs	r0, #4
1005c044:	7188      	strb	r0, [r1, #6]
1005c046:	2205      	movs	r2, #5
1005c048:	714a      	strb	r2, [r1, #5]
1005c04a:	7108      	strb	r0, [r1, #4]
1005c04c:	0a20      	lsrs	r0, r4, #8
1005c04e:	7248      	strb	r0, [r1, #9]
1005c050:	4630      	mov	r0, r6
1005c052:	f7f9 f96c 	bl	1005532e <aci_event_fifo_push>
1005c056:	4628      	mov	r0, r5
1005c058:	f001 ffa4 	bl	1005dfa4 <LLC_authenticated_payload_timeout_reset>
1005c05c:	9c06      	ldr	r4, [sp, #24]
1005c05e:	4620      	mov	r0, r4
1005c060:	f000 fc18 	bl	1005c894 <ll_cpe_reset_state_machines>
1005c064:	4620      	mov	r0, r4
1005c066:	f7fe f8bb 	bl	1005a1e0 <llc_conn_per_init>
1005c06a:	4620      	mov	r0, r4
1005c06c:	f7ff fd9c 	bl	1005bba8 <llc_pscan_wr_check_pawr_active_ucfg_weak>
1005c070:	2800      	cmp	r0, #0
1005c072:	d003      	beq.n	1005c07c <LL_cpe_engine+0x274>
1005c074:	2001      	movs	r0, #1
1005c076:	7038      	strb	r0, [r7, #0]
1005c078:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c07a:	7578      	strb	r0, [r7, #21]
1005c07c:	a80c      	add	r0, sp, #48	@ 0x30
1005c07e:	7841      	ldrb	r1, [r0, #1]
1005c080:	2902      	cmp	r1, #2
1005c082:	d000      	beq.n	1005c086 <LL_cpe_engine+0x27e>
1005c084:	e232      	b.n	1005c4ec <__arm_cp.14_10+0x3a4>
1005c086:	2001      	movs	r0, #1
1005c088:	e233      	b.n	1005c4f2 <__arm_cp.14_10+0x3aa>
1005c08a:	9806      	ldr	r0, [sp, #24]
1005c08c:	f7ff fe08 	bl	1005bca0 <ll_cpe_set_unknown_rsp_pending>
1005c090:	e017      	b.n	1005c0c2 <LL_cpe_engine+0x2ba>
1005c092:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005c094:	9903      	ldr	r1, [sp, #12]
1005c096:	2204      	movs	r2, #4
1005c098:	407a      	eors	r2, r7
1005c09a:	4620      	mov	r0, r4
1005c09c:	4066      	eors	r6, r4
1005c09e:	4316      	orrs	r6, r2
1005c0a0:	4274      	negs	r4, r6
1005c0a2:	4174      	adcs	r4, r6
1005c0a4:	2f04      	cmp	r7, #4
1005c0a6:	9e09      	ldr	r6, [sp, #36]	@ 0x24
1005c0a8:	d000      	beq.n	1005c0ac <LL_cpe_engine+0x2a4>
1005c0aa:	4626      	mov	r6, r4
1005c0ac:	2300      	movs	r3, #0
1005c0ae:	9a06      	ldr	r2, [sp, #24]
1005c0b0:	f000 fac2 	bl	1005c638 <LL_cpe_rxctrlpdu_checkreject>
1005c0b4:	2800      	cmp	r0, #0
1005c0b6:	d100      	bne.n	1005c0ba <LL_cpe_engine+0x2b2>
1005c0b8:	4626      	mov	r6, r4
1005c0ba:	2e01      	cmp	r6, #1
1005c0bc:	d004      	beq.n	1005c0c8 <LL_cpe_engine+0x2c0>
1005c0be:	2d00      	cmp	r5, #0
1005c0c0:	d102      	bne.n	1005c0c8 <LL_cpe_engine+0x2c0>
1005c0c2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c0c4:	f7fe f998 	bl	1005a3f8 <llc_conn_clr_rx_ctrl_pdu_full>
1005c0c8:	2000      	movs	r0, #0
1005c0ca:	9005      	str	r0, [sp, #20]
1005c0cc:	43c0      	mvns	r0, r0
1005c0ce:	9f06      	ldr	r7, [sp, #24]
1005c0d0:	2801      	cmp	r0, #1
1005c0d2:	d100      	bne.n	1005c0d6 <LL_cpe_engine+0x2ce>
1005c0d4:	e1ff      	b.n	1005c4d6 <__arm_cp.14_10+0x38e>
1005c0d6:	900a      	str	r0, [sp, #40]	@ 0x28
1005c0d8:	1c40      	adds	r0, r0, #1
1005c0da:	900b      	str	r0, [sp, #44]	@ 0x2c
1005c0dc:	4638      	mov	r0, r7
1005c0de:	f000 fc5a 	bl	1005c996 <ll_cpe_get_active>
1005c0e2:	2800      	cmp	r0, #0
1005c0e4:	d017      	beq.n	1005c116 <LL_cpe_engine+0x30e>
1005c0e6:	4638      	mov	r0, r7
1005c0e8:	f7ff fdf2 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005c0ec:	4605      	mov	r5, r0
1005c0ee:	8800      	ldrh	r0, [r0, #0]
1005c0f0:	0780      	lsls	r0, r0, #30
1005c0f2:	d500      	bpl.n	1005c0f6 <LL_cpe_engine+0x2ee>
1005c0f4:	e1ed      	b.n	1005c4d2 <__arm_cp.14_10+0x38a>
1005c0f6:	4638      	mov	r0, r7
1005c0f8:	f7fd ffa2 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c0fc:	24b2      	movs	r4, #178	@ 0xb2
1005c0fe:	5d06      	ldrb	r6, [r0, r4]
1005c100:	2e00      	cmp	r6, #0
1005c102:	d008      	beq.n	1005c116 <LL_cpe_engine+0x30e>
1005c104:	4638      	mov	r0, r7
1005c106:	f7fd ff9b 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c10a:	9009      	str	r0, [sp, #36]	@ 0x24
1005c10c:	f7fe fa5b 	bl	1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>
1005c110:	2800      	cmp	r0, #0
1005c112:	d100      	bne.n	1005c116 <LL_cpe_engine+0x30e>
1005c114:	e0e1      	b.n	1005c2da <__arm_cp.14_10+0x192>
1005c116:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c118:	b2c6      	uxtb	r6, r0
1005c11a:	4638      	mov	r0, r7
1005c11c:	4631      	mov	r1, r6
1005c11e:	f000 fa83 	bl	1005c628 <ll_cpe_get_state>
1005c122:	4605      	mov	r5, r0
1005c124:	2805      	cmp	r0, #5
1005c126:	9608      	str	r6, [sp, #32]
1005c128:	9009      	str	r0, [sp, #36]	@ 0x24
1005c12a:	d816      	bhi.n	1005c15a <__arm_cp.14_10+0x12>
1005c12c:	447d      	add	r5, pc
1005c12e:	792d      	ldrb	r5, [r5, #4]
1005c130:	006d      	lsls	r5, r5, #1
1005c132:	44af      	add	pc, r5
1005c134:	6544140b 	.word	0x6544140b
1005c138:	46c0b799 	.word	0x46c0b799

1005c13c <__arm_cp.14_7>:
1005c13c:	10069818 	.word	0x10069818

1005c140 <__arm_cp.14_8>:
1005c140:	20002a7c 	.word	0x20002a7c

1005c144 <__arm_cp.14_9>:
1005c144:	20002ad0 	.word	0x20002ad0

1005c148 <__arm_cp.14_10>:
1005c148:	20002a80 	.word	0x20002a80
1005c14c:	4638      	mov	r0, r7
1005c14e:	f000 fc22 	bl	1005c996 <ll_cpe_get_active>
1005c152:	4604      	mov	r4, r0
1005c154:	1e40      	subs	r0, r0, #1
1005c156:	4184      	sbcs	r4, r0
1005c158:	e180      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c15a:	462c      	mov	r4, r5
1005c15c:	e17e      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c15e:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005c160:	2800      	cmp	r0, #0
1005c162:	d100      	bne.n	1005c166 <__arm_cp.14_10+0x1e>
1005c164:	e0df      	b.n	1005c326 <__arm_cp.14_10+0x1de>
1005c166:	4638      	mov	r0, r7
1005c168:	f000 fa2c 	bl	1005c5c4 <ll_cpe_check_rx_pdu_can_be_processed>
1005c16c:	2800      	cmp	r0, #0
1005c16e:	d100      	bne.n	1005c172 <__arm_cp.14_10+0x2a>
1005c170:	e0d7      	b.n	1005c322 <__arm_cp.14_10+0x1da>
1005c172:	2501      	movs	r5, #1
1005c174:	4638      	mov	r0, r7
1005c176:	4629      	mov	r1, r5
1005c178:	f000 fa56 	bl	1005c628 <ll_cpe_get_state>
1005c17c:	4604      	mov	r4, r0
1005c17e:	4638      	mov	r0, r7
1005c180:	f000 fc10 	bl	1005c9a4 <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005c184:	2c04      	cmp	r4, #4
1005c186:	d103      	bne.n	1005c190 <__arm_cp.14_10+0x48>
1005c188:	462c      	mov	r4, r5
1005c18a:	2800      	cmp	r0, #0
1005c18c:	d100      	bne.n	1005c190 <__arm_cp.14_10+0x48>
1005c18e:	e165      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c190:	2100      	movs	r1, #0
1005c192:	2401      	movs	r4, #1
1005c194:	4638      	mov	r0, r7
1005c196:	4622      	mov	r2, r4
1005c198:	f000 fc0c 	bl	1005c9b4 <ll_cpe_process_rx_pdu>
1005c19c:	2800      	cmp	r0, #0
1005c19e:	d100      	bne.n	1005c1a2 <__arm_cp.14_10+0x5a>
1005c1a0:	e153      	b.n	1005c44a <__arm_cp.14_10+0x302>
1005c1a2:	2100      	movs	r1, #0
1005c1a4:	4638      	mov	r0, r7
1005c1a6:	f7ff fda0 	bl	1005bcea <LL_cpe_get_active_status>
1005c1aa:	2800      	cmp	r0, #0
1005c1ac:	d100      	bne.n	1005c1b0 <__arm_cp.14_10+0x68>
1005c1ae:	e152      	b.n	1005c456 <__arm_cp.14_10+0x30e>
1005c1b0:	2100      	movs	r1, #0
1005c1b2:	4638      	mov	r0, r7
1005c1b4:	f000 fcf4 	bl	1005cba0 <ll_cpe_get_instant_active>
1005c1b8:	2800      	cmp	r0, #0
1005c1ba:	d171      	bne.n	1005c2a0 <__arm_cp.14_10+0x158>
1005c1bc:	e143      	b.n	1005c446 <__arm_cp.14_10+0x2fe>
1005c1be:	4638      	mov	r0, r7
1005c1c0:	f7fd ff3e 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c1c4:	4604      	mov	r4, r0
1005c1c6:	4638      	mov	r0, r7
1005c1c8:	4631      	mov	r1, r6
1005c1ca:	f7ff fd95 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c1ce:	7800      	ldrb	r0, [r0, #0]
1005c1d0:	06c7      	lsls	r7, r0, #27
1005c1d2:	9407      	str	r4, [sp, #28]
1005c1d4:	4620      	mov	r0, r4
1005c1d6:	f7fe f9f6 	bl	1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>
1005c1da:	2402      	movs	r4, #2
1005c1dc:	2f00      	cmp	r7, #0
1005c1de:	d400      	bmi.n	1005c1e2 <__arm_cp.14_10+0x9a>
1005c1e0:	e09d      	b.n	1005c31e <__arm_cp.14_10+0x1d6>
1005c1e2:	2800      	cmp	r0, #0
1005c1e4:	d000      	beq.n	1005c1e8 <__arm_cp.14_10+0xa0>
1005c1e6:	e09a      	b.n	1005c31e <__arm_cp.14_10+0x1d6>
1005c1e8:	2701      	movs	r7, #1
1005c1ea:	9d06      	ldr	r5, [sp, #24]
1005c1ec:	4628      	mov	r0, r5
1005c1ee:	4631      	mov	r1, r6
1005c1f0:	463a      	mov	r2, r7
1005c1f2:	f000 f9f8 	bl	1005c5e6 <ll_cpe_get_blocked_status>
1005c1f6:	2800      	cmp	r0, #0
1005c1f8:	d100      	bne.n	1005c1fc <__arm_cp.14_10+0xb4>
1005c1fa:	e0b6      	b.n	1005c36a <__arm_cp.14_10+0x222>
1005c1fc:	462f      	mov	r7, r5
1005c1fe:	e12d      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c200:	4638      	mov	r0, r7
1005c202:	f7fd ff1d 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c206:	4605      	mov	r5, r0
1005c208:	f7fe f9dd 	bl	1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>
1005c20c:	2803      	cmp	r0, #3
1005c20e:	d000      	beq.n	1005c212 <__arm_cp.14_10+0xca>
1005c210:	e0ed      	b.n	1005c3ee <__arm_cp.14_10+0x2a6>
1005c212:	4638      	mov	r0, r7
1005c214:	4631      	mov	r1, r6
1005c216:	f7ff fda7 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005c21a:	f000 fcff 	bl	1005cc1c <LL_cpe_get_cpf>
1005c21e:	4604      	mov	r4, r0
1005c220:	2600      	movs	r6, #0
1005c222:	4638      	mov	r0, r7
1005c224:	9908      	ldr	r1, [sp, #32]
1005c226:	4632      	mov	r2, r6
1005c228:	4633      	mov	r3, r6
1005c22a:	47a0      	blx	r4
1005c22c:	4602      	mov	r2, r0
1005c22e:	4638      	mov	r0, r7
1005c230:	9908      	ldr	r1, [sp, #32]
1005c232:	f000 fd00 	bl	1005cc36 <ll_cpe_set_expected_opcode>
1005c236:	4628      	mov	r0, r5
1005c238:	4631      	mov	r1, r6
1005c23a:	9c08      	ldr	r4, [sp, #32]
1005c23c:	f7fe fc5e 	bl	1005aafc <llc_conn_set_tx_ctrl_pdu_state>
1005c240:	4638      	mov	r0, r7
1005c242:	4621      	mov	r1, r4
1005c244:	f7ff fd51 	bl	1005bcea <LL_cpe_get_active_status>
1005c248:	2800      	cmp	r0, #0
1005c24a:	d06a      	beq.n	1005c322 <__arm_cp.14_10+0x1da>
1005c24c:	4638      	mov	r0, r7
1005c24e:	4621      	mov	r1, r4
1005c250:	f000 fca6 	bl	1005cba0 <ll_cpe_get_instant_active>
1005c254:	2800      	cmp	r0, #0
1005c256:	d160      	bne.n	1005c31a <__arm_cp.14_10+0x1d2>
1005c258:	4638      	mov	r0, r7
1005c25a:	4621      	mov	r1, r4
1005c25c:	f000 f9dc 	bl	1005c618 <ll_cpe_get_expected_opcode>
1005c260:	28ff      	cmp	r0, #255	@ 0xff
1005c262:	d068      	beq.n	1005c336 <__arm_cp.14_10+0x1ee>
1005c264:	2404      	movs	r4, #4
1005c266:	e0f9      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c268:	4638      	mov	r0, r7
1005c26a:	f000 f9ab 	bl	1005c5c4 <ll_cpe_check_rx_pdu_can_be_processed>
1005c26e:	2404      	movs	r4, #4
1005c270:	2800      	cmp	r0, #0
1005c272:	d100      	bne.n	1005c276 <__arm_cp.14_10+0x12e>
1005c274:	e0f2      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c276:	2203      	movs	r2, #3
1005c278:	4638      	mov	r0, r7
1005c27a:	4631      	mov	r1, r6
1005c27c:	f000 fb9a 	bl	1005c9b4 <ll_cpe_process_rx_pdu>
1005c280:	2800      	cmp	r0, #0
1005c282:	d05a      	beq.n	1005c33a <__arm_cp.14_10+0x1f2>
1005c284:	4638      	mov	r0, r7
1005c286:	4631      	mov	r1, r6
1005c288:	f7ff fd2f 	bl	1005bcea <LL_cpe_get_active_status>
1005c28c:	2800      	cmp	r0, #0
1005c28e:	d100      	bne.n	1005c292 <__arm_cp.14_10+0x14a>
1005c290:	e0bb      	b.n	1005c40a <__arm_cp.14_10+0x2c2>
1005c292:	4638      	mov	r0, r7
1005c294:	4631      	mov	r1, r6
1005c296:	f000 fc83 	bl	1005cba0 <ll_cpe_get_instant_active>
1005c29a:	2800      	cmp	r0, #0
1005c29c:	d100      	bne.n	1005c2a0 <__arm_cp.14_10+0x158>
1005c29e:	e0b6      	b.n	1005c40e <__arm_cp.14_10+0x2c6>
1005c2a0:	2405      	movs	r4, #5
1005c2a2:	e0d8      	b.n	1005c456 <__arm_cp.14_10+0x30e>
1005c2a4:	4638      	mov	r0, r7
1005c2a6:	f7fd fecb 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c2aa:	4604      	mov	r4, r0
1005c2ac:	f7fe f974 	bl	1005a598 <llc_conn_get_instant_reached>
1005c2b0:	2801      	cmp	r0, #1
1005c2b2:	d132      	bne.n	1005c31a <__arm_cp.14_10+0x1d2>
1005c2b4:	4638      	mov	r0, r7
1005c2b6:	4631      	mov	r1, r6
1005c2b8:	f7ff fd56 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005c2bc:	f000 fcae 	bl	1005cc1c <LL_cpe_get_cpf>
1005c2c0:	2800      	cmp	r0, #0
1005c2c2:	9407      	str	r4, [sp, #28]
1005c2c4:	d100      	bne.n	1005c2c8 <__arm_cp.14_10+0x180>
1005c2c6:	e094      	b.n	1005c3f2 <__arm_cp.14_10+0x2aa>
1005c2c8:	4605      	mov	r5, r0
1005c2ca:	4620      	mov	r0, r4
1005c2cc:	f7fe f95f 	bl	1005a58e <llc_conn_get_instant_passed>
1005c2d0:	2801      	cmp	r0, #1
1005c2d2:	d100      	bne.n	1005c2d6 <__arm_cp.14_10+0x18e>
1005c2d4:	e08f      	b.n	1005c3f6 <__arm_cp.14_10+0x2ae>
1005c2d6:	2207      	movs	r2, #7
1005c2d8:	e08e      	b.n	1005c3f8 <__arm_cp.14_10+0x2b0>
1005c2da:	2101      	movs	r1, #1
1005c2dc:	910a      	str	r1, [sp, #40]	@ 0x28
1005c2de:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c2e0:	f7fe f944 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005c2e4:	49b2      	ldr	r1, [pc, #712]	@ (1005c5b0 <__arm_cp.14_1>)
1005c2e6:	8001      	strh	r1, [r0, #0]
1005c2e8:	0671      	lsls	r1, r6, #25
1005c2ea:	0c49      	lsrs	r1, r1, #17
1005c2ec:	1c89      	adds	r1, r1, #2
1005c2ee:	8041      	strh	r1, [r0, #2]
1005c2f0:	8828      	ldrh	r0, [r5, #0]
1005c2f2:	2102      	movs	r1, #2
1005c2f4:	4301      	orrs	r1, r0
1005c2f6:	8029      	strh	r1, [r5, #0]
1005c2f8:	4638      	mov	r0, r7
1005c2fa:	f7fd fea1 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c2fe:	9d05      	ldr	r5, [sp, #20]
1005c300:	5505      	strb	r5, [r0, r4]
1005c302:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c304:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
1005c306:	4621      	mov	r1, r4
1005c308:	f7fe fbf8 	bl	1005aafc <llc_conn_set_tx_ctrl_pdu_state>
1005c30c:	2204      	movs	r2, #4
1005c30e:	4638      	mov	r0, r7
1005c310:	4621      	mov	r1, r4
1005c312:	462b      	mov	r3, r5
1005c314:	f7ff fcf7 	bl	1005bd06 <LL_cpe_set_active>
1005c318:	e0db      	b.n	1005c4d2 <__arm_cp.14_10+0x38a>
1005c31a:	2405      	movs	r4, #5
1005c31c:	e09e      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c31e:	9f06      	ldr	r7, [sp, #24]
1005c320:	e09c      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c322:	2401      	movs	r4, #1
1005c324:	e09a      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c326:	2401      	movs	r4, #1
1005c328:	4638      	mov	r0, r7
1005c32a:	4621      	mov	r1, r4
1005c32c:	f7ff fcdd 	bl	1005bcea <LL_cpe_get_active_status>
1005c330:	2800      	cmp	r0, #0
1005c332:	d100      	bne.n	1005c336 <__arm_cp.14_10+0x1ee>
1005c334:	e092      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c336:	2402      	movs	r4, #2
1005c338:	e090      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c33a:	4626      	mov	r6, r4
1005c33c:	4638      	mov	r0, r7
1005c33e:	f000 fb31 	bl	1005c9a4 <ll_cpe_get_rx_pdu_discarded_by_one_sm>
1005c342:	4604      	mov	r4, r0
1005c344:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c346:	4241      	negs	r1, r0
1005c348:	4141      	adcs	r1, r0
1005c34a:	4638      	mov	r0, r7
1005c34c:	f000 f96c 	bl	1005c628 <ll_cpe_get_state>
1005c350:	2c00      	cmp	r4, #0
1005c352:	d064      	beq.n	1005c41e <__arm_cp.14_10+0x2d6>
1005c354:	4638      	mov	r0, r7
1005c356:	f7fd fe73 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c35a:	2100      	movs	r1, #0
1005c35c:	f7fe f906 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005c360:	4638      	mov	r0, r7
1005c362:	f000 fc24 	bl	1005cbae <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005c366:	4634      	mov	r4, r6
1005c368:	e078      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c36a:	9704      	str	r7, [sp, #16]
1005c36c:	22ff      	movs	r2, #255	@ 0xff
1005c36e:	4628      	mov	r0, r5
1005c370:	4631      	mov	r1, r6
1005c372:	f000 fc24 	bl	1005cbbe <ll_cpe_check_instant_blocked>
1005c376:	2800      	cmp	r0, #0
1005c378:	462f      	mov	r7, r5
1005c37a:	d16f      	bne.n	1005c45c <__arm_cp.14_10+0x314>
1005c37c:	4638      	mov	r0, r7
1005c37e:	4631      	mov	r1, r6
1005c380:	f7ff fcf2 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005c384:	f000 fc4a 	bl	1005cc1c <LL_cpe_get_cpf>
1005c388:	4604      	mov	r4, r0
1005c38a:	9807      	ldr	r0, [sp, #28]
1005c38c:	9d04      	ldr	r5, [sp, #16]
1005c38e:	4629      	mov	r1, r5
1005c390:	f7fe f8ec 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005c394:	4603      	mov	r3, r0
1005c396:	2206      	movs	r2, #6
1005c398:	4638      	mov	r0, r7
1005c39a:	4631      	mov	r1, r6
1005c39c:	9303      	str	r3, [sp, #12]
1005c39e:	47a0      	blx	r4
1005c3a0:	4638      	mov	r0, r7
1005c3a2:	4631      	mov	r1, r6
1005c3a4:	f7ff fca1 	bl	1005bcea <LL_cpe_get_active_status>
1005c3a8:	2800      	cmp	r0, #0
1005c3aa:	462c      	mov	r4, r5
1005c3ac:	d056      	beq.n	1005c45c <__arm_cp.14_10+0x314>
1005c3ae:	4638      	mov	r0, r7
1005c3b0:	4631      	mov	r1, r6
1005c3b2:	f7ff fca1 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c3b6:	7801      	ldrb	r1, [r0, #0]
1005c3b8:	22ef      	movs	r2, #239	@ 0xef
1005c3ba:	400a      	ands	r2, r1
1005c3bc:	7002      	strb	r2, [r0, #0]
1005c3be:	22ff      	movs	r2, #255	@ 0xff
1005c3c0:	4638      	mov	r0, r7
1005c3c2:	4631      	mov	r1, r6
1005c3c4:	f000 fc37 	bl	1005cc36 <ll_cpe_set_expected_opcode>
1005c3c8:	2401      	movs	r4, #1
1005c3ca:	9807      	ldr	r0, [sp, #28]
1005c3cc:	4621      	mov	r1, r4
1005c3ce:	f7fe fb95 	bl	1005aafc <llc_conn_set_tx_ctrl_pdu_state>
1005c3d2:	9a03      	ldr	r2, [sp, #12]
1005c3d4:	7850      	ldrb	r0, [r2, #1]
1005c3d6:	2108      	movs	r1, #8
1005c3d8:	1c80      	adds	r0, r0, #2
1005c3da:	b2c0      	uxtb	r0, r0
1005c3dc:	9100      	str	r1, [sp, #0]
1005c3de:	9001      	str	r0, [sp, #4]
1005c3e0:	9202      	str	r2, [sp, #8]
1005c3e2:	2000      	movs	r0, #0
1005c3e4:	4621      	mov	r1, r4
1005c3e6:	4622      	mov	r2, r4
1005c3e8:	4623      	mov	r3, r4
1005c3ea:	f7f8 fefe 	bl	100551ea <log_notify_stu_ucfg_weak>
1005c3ee:	2403      	movs	r4, #3
1005c3f0:	e034      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c3f2:	2405      	movs	r4, #5
1005c3f4:	e005      	b.n	1005c402 <__arm_cp.14_10+0x2ba>
1005c3f6:	2208      	movs	r2, #8
1005c3f8:	2300      	movs	r3, #0
1005c3fa:	4638      	mov	r0, r7
1005c3fc:	4631      	mov	r1, r6
1005c3fe:	47a8      	blx	r5
1005c400:	2401      	movs	r4, #1
1005c402:	9807      	ldr	r0, [sp, #28]
1005c404:	f7fd ffe4 	bl	1005a3d0 <llc_conn_clr_instant_reached_passed>
1005c408:	e028      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c40a:	2401      	movs	r4, #1
1005c40c:	e023      	b.n	1005c456 <__arm_cp.14_10+0x30e>
1005c40e:	4638      	mov	r0, r7
1005c410:	4631      	mov	r1, r6
1005c412:	f000 f901 	bl	1005c618 <ll_cpe_get_expected_opcode>
1005c416:	28ff      	cmp	r0, #255	@ 0xff
1005c418:	d015      	beq.n	1005c446 <__arm_cp.14_10+0x2fe>
1005c41a:	2404      	movs	r4, #4
1005c41c:	e01b      	b.n	1005c456 <__arm_cp.14_10+0x30e>
1005c41e:	2804      	cmp	r0, #4
1005c420:	d004      	beq.n	1005c42c <__arm_cp.14_10+0x2e4>
1005c422:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005c424:	2900      	cmp	r1, #0
1005c426:	d095      	beq.n	1005c354 <__arm_cp.14_10+0x20c>
1005c428:	2801      	cmp	r0, #1
1005c42a:	d193      	bne.n	1005c354 <__arm_cp.14_10+0x20c>
1005c42c:	4638      	mov	r0, r7
1005c42e:	f7ff fc4f 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005c432:	8801      	ldrh	r1, [r0, #0]
1005c434:	2404      	movs	r4, #4
1005c436:	4321      	orrs	r1, r4
1005c438:	8001      	strh	r1, [r0, #0]
1005c43a:	2015      	movs	r0, #21
1005c43c:	f006 fa24 	bl	10062888 <tsk_notify_idx>
1005c440:	f7f5 fba5 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005c444:	e00a      	b.n	1005c45c <__arm_cp.14_10+0x314>
1005c446:	2402      	movs	r4, #2
1005c448:	e005      	b.n	1005c456 <__arm_cp.14_10+0x30e>
1005c44a:	4638      	mov	r0, r7
1005c44c:	f7fd fdf8 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c450:	2100      	movs	r1, #0
1005c452:	f7fe f88b 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005c456:	4638      	mov	r0, r7
1005c458:	f000 fba9 	bl	1005cbae <ll_cpe_clr_rx_pdu_discarded_by_one_sm>
1005c45c:	4638      	mov	r0, r7
1005c45e:	f7ff fc37 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005c462:	4606      	mov	r6, r0
1005c464:	8800      	ldrh	r0, [r0, #0]
1005c466:	06c0      	lsls	r0, r0, #27
1005c468:	d527      	bpl.n	1005c4ba <__arm_cp.14_10+0x372>
1005c46a:	4638      	mov	r0, r7
1005c46c:	f7fd fde8 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c470:	4605      	mov	r5, r0
1005c472:	f7fe f8a8 	bl	1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>
1005c476:	9407      	str	r4, [sp, #28]
1005c478:	4604      	mov	r4, r0
1005c47a:	2100      	movs	r1, #0
1005c47c:	2201      	movs	r2, #1
1005c47e:	4638      	mov	r0, r7
1005c480:	f000 f8b1 	bl	1005c5e6 <ll_cpe_get_blocked_status>
1005c484:	4320      	orrs	r0, r4
1005c486:	9c07      	ldr	r4, [sp, #28]
1005c488:	d117      	bne.n	1005c4ba <__arm_cp.14_10+0x372>
1005c48a:	8837      	ldrh	r7, [r6, #0]
1005c48c:	2401      	movs	r4, #1
1005c48e:	4628      	mov	r0, r5
1005c490:	4621      	mov	r1, r4
1005c492:	f7fe f86b 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005c496:	4946      	ldr	r1, [pc, #280]	@ (1005c5b0 <__arm_cp.14_1>)
1005c498:	8001      	strh	r1, [r0, #0]
1005c49a:	0979      	lsrs	r1, r7, #5
1005c49c:	9f06      	ldr	r7, [sp, #24]
1005c49e:	0209      	lsls	r1, r1, #8
1005c4a0:	1dc9      	adds	r1, r1, #7
1005c4a2:	8041      	strh	r1, [r0, #2]
1005c4a4:	8830      	ldrh	r0, [r6, #0]
1005c4a6:	2108      	movs	r1, #8
1005c4a8:	4301      	orrs	r1, r0
1005c4aa:	2010      	movs	r0, #16
1005c4ac:	4381      	bics	r1, r0
1005c4ae:	8031      	strh	r1, [r6, #0]
1005c4b0:	4628      	mov	r0, r5
1005c4b2:	4621      	mov	r1, r4
1005c4b4:	9c07      	ldr	r4, [sp, #28]
1005c4b6:	f7fe fb21 	bl	1005aafc <llc_conn_set_tx_ctrl_pdu_state>
1005c4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005c4bc:	42a0      	cmp	r0, r4
1005c4be:	d004      	beq.n	1005c4ca <__arm_cp.14_10+0x382>
1005c4c0:	4638      	mov	r0, r7
1005c4c2:	9908      	ldr	r1, [sp, #32]
1005c4c4:	4622      	mov	r2, r4
1005c4c6:	f000 fa5d 	bl	1005c984 <ll_cpe_set_state>
1005c4ca:	a80c      	add	r0, sp, #48	@ 0x30
1005c4cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005c4ce:	1840      	adds	r0, r0, r1
1005c4d0:	7044      	strb	r4, [r0, #1]
1005c4d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005c4d4:	e5fc      	b.n	1005c0d0 <LL_cpe_engine+0x2c8>
1005c4d6:	a80c      	add	r0, sp, #48	@ 0x30
1005c4d8:	7802      	ldrb	r2, [r0, #0]
1005c4da:	2001      	movs	r0, #1
1005c4dc:	2a02      	cmp	r2, #2
1005c4de:	d008      	beq.n	1005c4f2 <__arm_cp.14_10+0x3aa>
1005c4e0:	a90c      	add	r1, sp, #48	@ 0x30
1005c4e2:	7849      	ldrb	r1, [r1, #1]
1005c4e4:	2902      	cmp	r1, #2
1005c4e6:	d004      	beq.n	1005c4f2 <__arm_cp.14_10+0x3aa>
1005c4e8:	2a03      	cmp	r2, #3
1005c4ea:	d002      	beq.n	1005c4f2 <__arm_cp.14_10+0x3aa>
1005c4ec:	1ec9      	subs	r1, r1, #3
1005c4ee:	4248      	negs	r0, r1
1005c4f0:	4148      	adcs	r0, r1
1005c4f2:	b00d      	add	sp, #52	@ 0x34
1005c4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005c4f6:	4260      	negs	r0, r4
1005c4f8:	4160      	adcs	r0, r4
1005c4fa:	e542      	b.n	1005bf82 <LL_cpe_engine+0x17a>
1005c4fc:	461c      	mov	r4, r3
1005c4fe:	f7fd f8cb 	bl	10059698 <pcl_csr_ucfg_weak>
1005c502:	e046      	b.n	1005c592 <__arm_cp.14_10+0x44a>
1005c504:	461c      	mov	r4, r3
1005c506:	f7fd f8c5 	bl	10059694 <data_length_extension_csr_ucfg_weak>
1005c50a:	e042      	b.n	1005c592 <__arm_cp.14_10+0x44a>
1005c50c:	461c      	mov	r4, r3
1005c50e:	f7fd f865 	bl	100595dc <cte_csr_ucfg_weak>
1005c512:	e03e      	b.n	1005c592 <__arm_cp.14_10+0x44a>
1005c514:	461d      	mov	r5, r3
1005c516:	f7ff fb01 	bl	1005bb1c <cis_csr_ucfg_weak>
1005c51a:	e022      	b.n	1005c562 <__arm_cp.14_10+0x41a>
1005c51c:	461c      	mov	r4, r3
1005c51e:	f7f2 fbb3 	bl	1004ec88 <phy_upd_csr_ucfg>
1005c522:	e036      	b.n	1005c592 <__arm_cp.14_10+0x44a>
1005c524:	461d      	mov	r5, r3
1005c526:	f7f2 fbaf 	bl	1004ec88 <phy_upd_csr_ucfg>
1005c52a:	e01a      	b.n	1005c562 <__arm_cp.14_10+0x41a>
1005c52c:	461c      	mov	r4, r3
1005c52e:	f7ff faff 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1005c532:	e027      	b.n	1005c584 <__arm_cp.14_10+0x43c>
1005c534:	4265      	negs	r5, r4
1005c536:	4165      	adcs	r5, r4
1005c538:	461c      	mov	r4, r3
1005c53a:	f7ff faef 	bl	1005bb1c <cis_csr_ucfg_weak>
1005c53e:	e031      	b.n	1005c5a4 <__arm_cp.14_10+0x45c>
1005c540:	461c      	mov	r4, r3
1005c542:	f7ff faeb 	bl	1005bb1c <cis_csr_ucfg_weak>
1005c546:	e024      	b.n	1005c592 <__arm_cp.14_10+0x44a>
1005c548:	4265      	negs	r5, r4
1005c54a:	4165      	adcs	r5, r4
1005c54c:	461c      	mov	r4, r3
1005c54e:	f7fd f8ab 	bl	100596a8 <subrate_csr_ucfg_weak>
1005c552:	e027      	b.n	1005c5a4 <__arm_cp.14_10+0x45c>
1005c554:	461d      	mov	r5, r3
1005c556:	f7fd f8a7 	bl	100596a8 <subrate_csr_ucfg_weak>
1005c55a:	e002      	b.n	1005c562 <__arm_cp.14_10+0x41a>
1005c55c:	461d      	mov	r5, r3
1005c55e:	f7fc ff48 	bl	100593f2 <chc_csr_ucfg_weak>
1005c562:	462b      	mov	r3, r5
1005c564:	1e41      	subs	r1, r0, #1
1005c566:	4188      	sbcs	r0, r1
1005c568:	1e61      	subs	r1, r4, #1
1005c56a:	418c      	sbcs	r4, r1
1005c56c:	4004      	ands	r4, r0
1005c56e:	4620      	mov	r0, r4
1005c570:	e507      	b.n	1005bf82 <LL_cpe_engine+0x17a>
1005c572:	4265      	negs	r5, r4
1005c574:	4165      	adcs	r5, r4
1005c576:	461c      	mov	r4, r3
1005c578:	f7fc ff3b 	bl	100593f2 <chc_csr_ucfg_weak>
1005c57c:	e012      	b.n	1005c5a4 <__arm_cp.14_10+0x45c>
1005c57e:	461c      	mov	r4, r3
1005c580:	f7ff fad8 	bl	1005bb34 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005c584:	4623      	mov	r3, r4
1005c586:	2800      	cmp	r0, #0
1005c588:	4638      	mov	r0, r7
1005c58a:	d100      	bne.n	1005c58e <__arm_cp.14_10+0x446>
1005c58c:	e4f9      	b.n	1005bf82 <LL_cpe_engine+0x17a>
1005c58e:	f7fd f887 	bl	100596a0 <scan_csr_ucfg_weak>
1005c592:	4623      	mov	r3, r4
1005c594:	1e41      	subs	r1, r0, #1
1005c596:	4188      	sbcs	r0, r1
1005c598:	e4f3      	b.n	1005bf82 <LL_cpe_engine+0x17a>
1005c59a:	4265      	negs	r5, r4
1005c59c:	4165      	adcs	r5, r4
1005c59e:	461c      	mov	r4, r3
1005c5a0:	f7f2 fb72 	bl	1004ec88 <phy_upd_csr_ucfg>
1005c5a4:	4623      	mov	r3, r4
1005c5a6:	1e41      	subs	r1, r0, #1
1005c5a8:	4188      	sbcs	r0, r1
1005c5aa:	4028      	ands	r0, r5
1005c5ac:	e4e9      	b.n	1005bf82 <LL_cpe_engine+0x17a>
1005c5ae:	46c0      	nop			@ (mov r8, r8)

1005c5b0 <__arm_cp.14_1>:
1005c5b0:	00000203 	.word	0x00000203

1005c5b4 <ll_cpe_set_active>:
1005c5b4:	b580      	push	{r7, lr}
1005c5b6:	f7ff fb8b 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005c5ba:	8801      	ldrh	r1, [r0, #0]
1005c5bc:	2201      	movs	r2, #1
1005c5be:	430a      	orrs	r2, r1
1005c5c0:	8002      	strh	r2, [r0, #0]
1005c5c2:	bd80      	pop	{r7, pc}

1005c5c4 <ll_cpe_check_rx_pdu_can_be_processed>:
1005c5c4:	b510      	push	{r4, lr}
1005c5c6:	f7fd fd3b 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c5ca:	4604      	mov	r4, r0
1005c5cc:	f7fd ffe9 	bl	1005a5a2 <llc_conn_get_rx_ctrl_pdu_full>
1005c5d0:	2800      	cmp	r0, #0
1005c5d2:	d006      	beq.n	1005c5e2 <ll_cpe_check_rx_pdu_can_be_processed+0x1e>
1005c5d4:	4620      	mov	r0, r4
1005c5d6:	f7fd fff6 	bl	1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>
1005c5da:	1ec0      	subs	r0, r0, #3
1005c5dc:	1e41      	subs	r1, r0, #1
1005c5de:	4188      	sbcs	r0, r1
1005c5e0:	bd10      	pop	{r4, pc}
1005c5e2:	2000      	movs	r0, #0
1005c5e4:	bd10      	pop	{r4, pc}

1005c5e6 <ll_cpe_get_blocked_status>:
1005c5e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c5e8:	4614      	mov	r4, r2
1005c5ea:	4607      	mov	r7, r0
1005c5ec:	424e      	negs	r6, r1
1005c5ee:	414e      	adcs	r6, r1
1005c5f0:	4631      	mov	r1, r6
1005c5f2:	f7ff fb7a 	bl	1005bcea <LL_cpe_get_active_status>
1005c5f6:	2500      	movs	r5, #0
1005c5f8:	2800      	cmp	r0, #0
1005c5fa:	d00b      	beq.n	1005c614 <ll_cpe_get_blocked_status+0x2e>
1005c5fc:	4638      	mov	r0, r7
1005c5fe:	4631      	mov	r1, r6
1005c600:	f7ff fb7a 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c604:	2c02      	cmp	r4, #2
1005c606:	d805      	bhi.n	1005c614 <ll_cpe_get_blocked_status+0x2e>
1005c608:	7800      	ldrb	r0, [r0, #0]
1005c60a:	1c61      	adds	r1, r4, #1
1005c60c:	b2c9      	uxtb	r1, r1
1005c60e:	40c8      	lsrs	r0, r1
1005c610:	2501      	movs	r5, #1
1005c612:	4005      	ands	r5, r0
1005c614:	4628      	mov	r0, r5
1005c616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005c618 <ll_cpe_get_expected_opcode>:
1005c618:	b510      	push	{r4, lr}
1005c61a:	460c      	mov	r4, r1
1005c61c:	f7fd fd10 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c620:	1900      	adds	r0, r0, r4
1005c622:	21ae      	movs	r1, #174	@ 0xae
1005c624:	5c40      	ldrb	r0, [r0, r1]
1005c626:	bd10      	pop	{r4, pc}

1005c628 <ll_cpe_get_state>:
1005c628:	b510      	push	{r4, lr}
1005c62a:	460c      	mov	r4, r1
1005c62c:	f7fd fd08 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c630:	1900      	adds	r0, r0, r4
1005c632:	21aa      	movs	r1, #170	@ 0xaa
1005c634:	5c40      	ldrb	r0, [r0, r1]
1005c636:	bd10      	pop	{r4, pc}

1005c638 <LL_cpe_rxctrlpdu_checkreject>:
1005c638:	b5b0      	push	{r4, r5, r7, lr}
1005c63a:	460c      	mov	r4, r1
1005c63c:	4605      	mov	r5, r0
1005c63e:	4610      	mov	r0, r2
1005c640:	4619      	mov	r1, r3
1005c642:	f7ff fb91 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005c646:	4601      	mov	r1, r0
1005c648:	2001      	movs	r0, #1
1005c64a:	2d0d      	cmp	r5, #13
1005c64c:	d102      	bne.n	1005c654 <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005c64e:	2901      	cmp	r1, #1
1005c650:	d100      	bne.n	1005c654 <LL_cpe_rxctrlpdu_checkreject+0x1c>
1005c652:	bdb0      	pop	{r4, r5, r7, pc}
1005c654:	2200      	movs	r2, #0
1005c656:	2d11      	cmp	r5, #17
1005c658:	d001      	beq.n	1005c65e <LL_cpe_rxctrlpdu_checkreject+0x26>
1005c65a:	2d07      	cmp	r5, #7
1005c65c:	d110      	bne.n	1005c680 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005c65e:	2c2a      	cmp	r4, #42	@ 0x2a
1005c660:	d804      	bhi.n	1005c66c <LL_cpe_rxctrlpdu_checkreject+0x34>
1005c662:	2303      	movs	r3, #3
1005c664:	4363      	muls	r3, r4
1005c666:	4d07      	ldr	r5, [pc, #28]	@ (1005c684 <__arm_cp.20_0>)
1005c668:	5ceb      	ldrb	r3, [r5, r3]
1005c66a:	e000      	b.n	1005c66e <LL_cpe_rxctrlpdu_checkreject+0x36>
1005c66c:	2316      	movs	r3, #22
1005c66e:	4299      	cmp	r1, r3
1005c670:	d106      	bne.n	1005c680 <LL_cpe_rxctrlpdu_checkreject+0x48>
1005c672:	2103      	movs	r1, #3
1005c674:	4361      	muls	r1, r4
1005c676:	4b03      	ldr	r3, [pc, #12]	@ (1005c684 <__arm_cp.20_0>)
1005c678:	1859      	adds	r1, r3, r1
1005c67a:	7889      	ldrb	r1, [r1, #2]
1005c67c:	2900      	cmp	r1, #0
1005c67e:	d1e8      	bne.n	1005c652 <LL_cpe_rxctrlpdu_checkreject+0x1a>
1005c680:	4610      	mov	r0, r2
1005c682:	bdb0      	pop	{r4, r5, r7, pc}

1005c684 <__arm_cp.20_0>:
1005c684:	10069818 	.word	0x10069818

1005c688 <valid_first_opcode>:
1005c688:	b5b0      	push	{r4, r5, r7, lr}
1005c68a:	2300      	movs	r3, #0
1005c68c:	282a      	cmp	r0, #42	@ 0x2a
1005c68e:	d863      	bhi.n	1005c758 <valid_first_opcode+0xd0>
1005c690:	2403      	movs	r4, #3
1005c692:	4344      	muls	r4, r0
1005c694:	4d34      	ldr	r5, [pc, #208]	@ (1005c768 <__arm_cp.21_0>)
1005c696:	192c      	adds	r4, r5, r4
1005c698:	7864      	ldrb	r4, [r4, #1]
1005c69a:	4294      	cmp	r4, r2
1005c69c:	d15c      	bne.n	1005c758 <valid_first_opcode+0xd0>
1005c69e:	282a      	cmp	r0, #42	@ 0x2a
1005c6a0:	d85a      	bhi.n	1005c758 <valid_first_opcode+0xd0>
1005c6a2:	0080      	lsls	r0, r0, #2
1005c6a4:	a201      	add	r2, pc, #4	@ (adr r2, 1005c6ac <valid_first_opcode+0x24>)
1005c6a6:	5810      	ldr	r0, [r2, r0]
1005c6a8:	4687      	mov	pc, r0
1005c6aa:	46c0      	nop			@ (mov r8, r8)
1005c6ac:	1005c75b 	.word	0x1005c75b
1005c6b0:	1005c75b 	.word	0x1005c75b
1005c6b4:	1005c759 	.word	0x1005c759
1005c6b8:	1005c75b 	.word	0x1005c75b
1005c6bc:	1005c759 	.word	0x1005c759
1005c6c0:	1005c759 	.word	0x1005c759
1005c6c4:	1005c759 	.word	0x1005c759
1005c6c8:	1005c759 	.word	0x1005c759
1005c6cc:	1005c75b 	.word	0x1005c75b
1005c6d0:	1005c759 	.word	0x1005c759
1005c6d4:	1005c75b 	.word	0x1005c75b
1005c6d8:	1005c759 	.word	0x1005c759
1005c6dc:	1005c75f 	.word	0x1005c75f
1005c6e0:	1005c759 	.word	0x1005c759
1005c6e4:	1005c763 	.word	0x1005c763
1005c6e8:	1005c759 	.word	0x1005c759
1005c6ec:	1005c759 	.word	0x1005c759
1005c6f0:	1005c759 	.word	0x1005c759
1005c6f4:	1005c75f 	.word	0x1005c75f
1005c6f8:	1005c759 	.word	0x1005c759
1005c6fc:	1005c75f 	.word	0x1005c75f
1005c700:	1005c759 	.word	0x1005c759
1005c704:	1005c75f 	.word	0x1005c75f
1005c708:	1005c759 	.word	0x1005c759
1005c70c:	1005c759 	.word	0x1005c759
1005c710:	1005c759 	.word	0x1005c759
1005c714:	1005c75f 	.word	0x1005c75f
1005c718:	1005c759 	.word	0x1005c759
1005c71c:	1005c75f 	.word	0x1005c75f
1005c720:	1005c75f 	.word	0x1005c75f
1005c724:	1005c759 	.word	0x1005c759
1005c728:	1005c75b 	.word	0x1005c75b
1005c72c:	1005c759 	.word	0x1005c759
1005c730:	1005c759 	.word	0x1005c759
1005c734:	1005c75f 	.word	0x1005c75f
1005c738:	1005c75f 	.word	0x1005c75f
1005c73c:	1005c759 	.word	0x1005c759
1005c740:	1005c75f 	.word	0x1005c75f
1005c744:	1005c75f 	.word	0x1005c75f
1005c748:	1005c75f 	.word	0x1005c75f
1005c74c:	1005c75f 	.word	0x1005c75f
1005c750:	1005c75f 	.word	0x1005c75f
1005c754:	1005c75f 	.word	0x1005c75f
1005c758:	4619      	mov	r1, r3
1005c75a:	4608      	mov	r0, r1
1005c75c:	bdb0      	pop	{r4, r5, r7, pc}
1005c75e:	2101      	movs	r1, #1
1005c760:	e7fb      	b.n	1005c75a <valid_first_opcode+0xd2>
1005c762:	4248      	negs	r0, r1
1005c764:	4141      	adcs	r1, r0
1005c766:	e7f8      	b.n	1005c75a <valid_first_opcode+0xd2>

1005c768 <__arm_cp.21_0>:
1005c768:	10069818 	.word	0x10069818

1005c76c <LL_cpe_init_phy_update>:
1005c76c:	b580      	push	{r7, lr}
1005c76e:	2007      	movs	r0, #7
1005c770:	4901      	ldr	r1, [pc, #4]	@ (1005c778 <__arm_cp.23_0>)
1005c772:	f7ff fab2 	bl	1005bcda <LL_cpe_register_cpf>
1005c776:	bd80      	pop	{r7, pc}

1005c778 <__arm_cp.23_0>:
1005c778:	1005e185 	.word	0x1005e185

1005c77c <LL_cpe_init_conn_update>:
1005c77c:	b580      	push	{r7, lr}
1005c77e:	2000      	movs	r0, #0
1005c780:	4901      	ldr	r1, [pc, #4]	@ (1005c788 <__arm_cp.28_0>)
1005c782:	f7ff faaa 	bl	1005bcda <LL_cpe_register_cpf>
1005c786:	bd80      	pop	{r7, pc}

1005c788 <__arm_cp.28_0>:
1005c788:	1005cda9 	.word	0x1005cda9

1005c78c <LL_cpe_init_chmap_update>:
1005c78c:	b580      	push	{r7, lr}
1005c78e:	2002      	movs	r0, #2
1005c790:	4901      	ldr	r1, [pc, #4]	@ (1005c798 <__arm_cp.29_0>)
1005c792:	f7ff faa2 	bl	1005bcda <LL_cpe_register_cpf>
1005c796:	bd80      	pop	{r7, pc}

1005c798 <__arm_cp.29_0>:
1005c798:	1005cc99 	.word	0x1005cc99

1005c79c <LL_cpe_init_length_update_ucfg_weak>:
1005c79c:	b580      	push	{r7, lr}
1005c79e:	2006      	movs	r0, #6
1005c7a0:	2100      	movs	r1, #0
1005c7a2:	f7ff fa9a 	bl	1005bcda <LL_cpe_register_cpf>
1005c7a6:	bd80      	pop	{r7, pc}

1005c7a8 <LL_cpe_init_cte_ucfg_weak>:
1005c7a8:	b580      	push	{r7, lr}
1005c7aa:	200a      	movs	r0, #10
1005c7ac:	2100      	movs	r1, #0
1005c7ae:	f7ff fa94 	bl	1005bcda <LL_cpe_register_cpf>
1005c7b2:	bd80      	pop	{r7, pc}

1005c7b4 <LL_cpe_init_past_ucfg_weak>:
1005c7b4:	b580      	push	{r7, lr}
1005c7b6:	2009      	movs	r0, #9
1005c7b8:	2100      	movs	r1, #0
1005c7ba:	f7ff fa8e 	bl	1005bcda <LL_cpe_register_cpf>
1005c7be:	bd80      	pop	{r7, pc}

1005c7c0 <LL_cpe_init_pcl_ucfg_weak>:
1005c7c0:	b580      	push	{r7, lr}
1005c7c2:	200b      	movs	r0, #11
1005c7c4:	2100      	movs	r1, #0
1005c7c6:	f7ff fa88 	bl	1005bcda <LL_cpe_register_cpf>
1005c7ca:	bd80      	pop	{r7, pc}

1005c7cc <LL_cpe_init_chc_enable_ucfg_weak>:
1005c7cc:	b580      	push	{r7, lr}
1005c7ce:	200c      	movs	r0, #12
1005c7d0:	2100      	movs	r1, #0
1005c7d2:	f7ff fa82 	bl	1005bcda <LL_cpe_register_cpf>
1005c7d6:	bd80      	pop	{r7, pc}

1005c7d8 <LL_cpe_init_chc_reporting_ucfg_weak>:
1005c7d8:	b580      	push	{r7, lr}
1005c7da:	200d      	movs	r0, #13
1005c7dc:	2100      	movs	r1, #0
1005c7de:	f7ff fa7c 	bl	1005bcda <LL_cpe_register_cpf>
1005c7e2:	bd80      	pop	{r7, pc}

1005c7e4 <LL_cpe_init_subrate_ucfg_weak>:
1005c7e4:	b580      	push	{r7, lr}
1005c7e6:	2011      	movs	r0, #17
1005c7e8:	2100      	movs	r1, #0
1005c7ea:	f7ff fa76 	bl	1005bcda <LL_cpe_register_cpf>
1005c7ee:	bd80      	pop	{r7, pc}

1005c7f0 <LL_cpe_init_sca_upd_ucfg_weak>:
1005c7f0:	b580      	push	{r7, lr}
1005c7f2:	2012      	movs	r0, #18
1005c7f4:	2100      	movs	r1, #0
1005c7f6:	f7ff fa70 	bl	1005bcda <LL_cpe_register_cpf>
1005c7fa:	bd80      	pop	{r7, pc}

1005c7fc <LL_cpe_init_cis_ucfg_weak>:
1005c7fc:	b510      	push	{r4, lr}
1005c7fe:	200e      	movs	r0, #14
1005c800:	2400      	movs	r4, #0
1005c802:	4621      	mov	r1, r4
1005c804:	f7ff fa69 	bl	1005bcda <LL_cpe_register_cpf>
1005c808:	2010      	movs	r0, #16
1005c80a:	4621      	mov	r1, r4
1005c80c:	f7ff fa65 	bl	1005bcda <LL_cpe_register_cpf>
1005c810:	bd10      	pop	{r4, pc}
	...

1005c814 <LL_cpe_init>:
1005c814:	b5b0      	push	{r4, r5, r7, lr}
1005c816:	2001      	movs	r0, #1
1005c818:	4918      	ldr	r1, [pc, #96]	@ (1005c87c <__arm_cp.47_0>)
1005c81a:	4c19      	ldr	r4, [pc, #100]	@ (1005c880 <__arm_cp.47_1>)
1005c81c:	47a0      	blx	r4
1005c81e:	2003      	movs	r0, #3
1005c820:	4918      	ldr	r1, [pc, #96]	@ (1005c884 <__arm_cp.47_2>)
1005c822:	47a0      	blx	r4
1005c824:	2005      	movs	r0, #5
1005c826:	4918      	ldr	r1, [pc, #96]	@ (1005c888 <__arm_cp.47_3>)
1005c828:	47a0      	blx	r4
1005c82a:	2008      	movs	r0, #8
1005c82c:	4917      	ldr	r1, [pc, #92]	@ (1005c88c <__arm_cp.47_4>)
1005c82e:	47a0      	blx	r4
1005c830:	f7f2 fb1d 	bl	1004ee6e <LL_cpe_init_conn_update_ucfg>
1005c834:	f7f2 fb22 	bl	1004ee7c <LL_cpe_init_chmap_update_ucfg>
1005c838:	f7ff ffb0 	bl	1005c79c <LL_cpe_init_length_update_ucfg_weak>
1005c83c:	f7f2 fb10 	bl	1004ee60 <LL_cpe_init_phy_update_ucfg>
1005c840:	f7ff ffb8 	bl	1005c7b4 <LL_cpe_init_past_ucfg_weak>
1005c844:	f7ff ffb0 	bl	1005c7a8 <LL_cpe_init_cte_ucfg_weak>
1005c848:	f7ff ffba 	bl	1005c7c0 <LL_cpe_init_pcl_ucfg_weak>
1005c84c:	f7ff ffbe 	bl	1005c7cc <LL_cpe_init_chc_enable_ucfg_weak>
1005c850:	f7ff ffc2 	bl	1005c7d8 <LL_cpe_init_chc_reporting_ucfg_weak>
1005c854:	f7ff ffd2 	bl	1005c7fc <LL_cpe_init_cis_ucfg_weak>
1005c858:	f7ff ffc4 	bl	1005c7e4 <LL_cpe_init_subrate_ucfg_weak>
1005c85c:	f7ff ffc8 	bl	1005c7f0 <LL_cpe_init_sca_upd_ucfg_weak>
1005c860:	2400      	movs	r4, #0
1005c862:	4d0b      	ldr	r5, [pc, #44]	@ (1005c890 <__arm_cp.47_5>)
1005c864:	6828      	ldr	r0, [r5, #0]
1005c866:	2134      	movs	r1, #52	@ 0x34
1005c868:	5c41      	ldrb	r1, [r0, r1]
1005c86a:	b2e0      	uxtb	r0, r4
1005c86c:	4288      	cmp	r0, r1
1005c86e:	d203      	bcs.n	1005c878 <LL_cpe_init+0x64>
1005c870:	f000 f810 	bl	1005c894 <ll_cpe_reset_state_machines>
1005c874:	1c64      	adds	r4, r4, #1
1005c876:	e7f5      	b.n	1005c864 <LL_cpe_init+0x50>
1005c878:	bdb0      	pop	{r4, r5, r7, pc}
1005c87a:	46c0      	nop			@ (mov r8, r8)

1005c87c <__arm_cp.47_0>:
1005c87c:	1005d22d 	.word	0x1005d22d

1005c880 <__arm_cp.47_1>:
1005c880:	1005bcdb 	.word	0x1005bcdb

1005c884 <__arm_cp.47_2>:
1005c884:	1005da19 	.word	0x1005da19

1005c888 <__arm_cp.47_3>:
1005c888:	1005ea4d 	.word	0x1005ea4d

1005c88c <__arm_cp.47_4>:
1005c88c:	1005dfd9 	.word	0x1005dfd9

1005c890 <__arm_cp.47_5>:
1005c890:	20002a7c 	.word	0x20002a7c

1005c894 <ll_cpe_reset_state_machines>:
1005c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005c896:	2638      	movs	r6, #56	@ 0x38
1005c898:	4346      	muls	r6, r0
1005c89a:	9000      	str	r0, [sp, #0]
1005c89c:	f7fd fbd0 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c8a0:	4605      	mov	r5, r0
1005c8a2:	4816      	ldr	r0, [pc, #88]	@ (1005c8fc <__arm_cp.48_0>)
1005c8a4:	6800      	ldr	r0, [r0, #0]
1005c8a6:	219c      	movs	r1, #156	@ 0x9c
1005c8a8:	5842      	ldr	r2, [r0, r1]
1005c8aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
1005c8ac:	6892      	ldr	r2, [r2, #8]
1005c8ae:	1992      	adds	r2, r2, r6
1005c8b0:	23a0      	movs	r3, #160	@ 0xa0
1005c8b2:	50ea      	str	r2, [r5, r3]
1005c8b4:	5840      	ldr	r0, [r0, r1]
1005c8b6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
1005c8b8:	68c0      	ldr	r0, [r0, #12]
1005c8ba:	1980      	adds	r0, r0, r6
1005c8bc:	462e      	mov	r6, r5
1005c8be:	36a0      	adds	r6, #160	@ 0xa0
1005c8c0:	6070      	str	r0, [r6, #4]
1005c8c2:	27ae      	movs	r7, #174	@ 0xae
1005c8c4:	2fb0      	cmp	r7, #176	@ 0xb0
1005c8c6:	d00f      	beq.n	1005c8e8 <ll_cpe_reset_state_machines+0x54>
1005c8c8:	4638      	mov	r0, r7
1005c8ca:	38ae      	subs	r0, #174	@ 0xae
1005c8cc:	19e9      	adds	r1, r5, r7
1005c8ce:	1f09      	subs	r1, r1, #4
1005c8d0:	2400      	movs	r4, #0
1005c8d2:	700c      	strb	r4, [r1, #0]
1005c8d4:	b2c1      	uxtb	r1, r0
1005c8d6:	9800      	ldr	r0, [sp, #0]
1005c8d8:	f7ff fa0e 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005c8dc:	7004      	strb	r4, [r0, #0]
1005c8de:	20ff      	movs	r0, #255	@ 0xff
1005c8e0:	55e8      	strb	r0, [r5, r7]
1005c8e2:	74f4      	strb	r4, [r6, #19]
1005c8e4:	1c7f      	adds	r7, r7, #1
1005c8e6:	e7ed      	b.n	1005c8c4 <ll_cpe_reset_state_machines+0x30>
1005c8e8:	2400      	movs	r4, #0
1005c8ea:	74b4      	strb	r4, [r6, #18]
1005c8ec:	9800      	ldr	r0, [sp, #0]
1005c8ee:	f7ff f9ef 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005c8f2:	8004      	strh	r4, [r0, #0]
1005c8f4:	4802      	ldr	r0, [pc, #8]	@ (1005c900 <__arm_cp.48_1>)
1005c8f6:	8768      	strh	r0, [r5, #58]	@ 0x3a
1005c8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005c8fa:	46c0      	nop			@ (mov r8, r8)

1005c8fc <__arm_cp.48_0>:
1005c8fc:	20002ad0 	.word	0x20002ad0

1005c900 <__arm_cp.48_1>:
1005c900:	0000ffff 	.word	0x0000ffff

1005c904 <LL_cpe_set_disconnect>:
1005c904:	b510      	push	{r4, lr}
1005c906:	2480      	movs	r4, #128	@ 0x80
1005c908:	430c      	orrs	r4, r1
1005c90a:	f7fd fb99 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c90e:	21b2      	movs	r1, #178	@ 0xb2
1005c910:	5444      	strb	r4, [r0, r1]
1005c912:	2015      	movs	r0, #21
1005c914:	f005 ffb8 	bl	10062888 <tsk_notify_idx>
1005c918:	f7f5 f939 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005c91c:	bd10      	pop	{r4, pc}

1005c91e <LL_cpe_get_tx_terminate_in_progress>:
1005c91e:	b580      	push	{r7, lr}
1005c920:	f7ff f9d6 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005c924:	7800      	ldrb	r0, [r0, #0]
1005c926:	0780      	lsls	r0, r0, #30
1005c928:	0fc0      	lsrs	r0, r0, #31
1005c92a:	bd80      	pop	{r7, pc}

1005c92c <LL_cpe_conn_exception_opcode_from_sm>:
1005c92c:	b580      	push	{r7, lr}
1005c92e:	f7ff fa1b 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005c932:	21fd      	movs	r1, #253	@ 0xfd
1005c934:	4008      	ands	r0, r1
1005c936:	4241      	negs	r1, r0
1005c938:	4148      	adcs	r0, r1
1005c93a:	bd80      	pop	{r7, pc}

1005c93c <LL_cpe_conn_get_proc_id_from_sm>:
1005c93c:	b580      	push	{r7, lr}
1005c93e:	f7ff fa13 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005c942:	bd80      	pop	{r7, pc}

1005c944 <llc_cpe_calc_instant>:
1005c944:	b580      	push	{r7, lr}
1005c946:	f7fd fb7b 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c94a:	2142      	movs	r1, #66	@ 0x42
1005c94c:	5a41      	ldrh	r1, [r0, r1]
1005c94e:	2291      	movs	r2, #145	@ 0x91
1005c950:	0052      	lsls	r2, r2, #1
1005c952:	5a82      	ldrh	r2, [r0, r2]
1005c954:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005c956:	1c40      	adds	r0, r0, #1
1005c958:	4350      	muls	r0, r2
1005c95a:	2206      	movs	r2, #6
1005c95c:	4342      	muls	r2, r0
1005c95e:	1850      	adds	r0, r2, r1
1005c960:	b280      	uxth	r0, r0
1005c962:	bd80      	pop	{r7, pc}

1005c964 <llc_cpe_init_sm_ctxt>:
1005c964:	b5b0      	push	{r4, r5, r7, lr}
1005c966:	4604      	mov	r4, r0
1005c968:	f7ff fe24 	bl	1005c5b4 <ll_cpe_set_active>
1005c96c:	4620      	mov	r0, r4
1005c96e:	f7fd fb67 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c972:	21aa      	movs	r1, #170	@ 0xaa
1005c974:	2501      	movs	r5, #1
1005c976:	5445      	strb	r5, [r0, r1]
1005c978:	4620      	mov	r0, r4
1005c97a:	f7fd fb61 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c97e:	21ab      	movs	r1, #171	@ 0xab
1005c980:	5445      	strb	r5, [r0, r1]
1005c982:	bdb0      	pop	{r4, r5, r7, pc}

1005c984 <ll_cpe_set_state>:
1005c984:	b5b0      	push	{r4, r5, r7, lr}
1005c986:	4614      	mov	r4, r2
1005c988:	460d      	mov	r5, r1
1005c98a:	f7fd fb59 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c98e:	1940      	adds	r0, r0, r5
1005c990:	21aa      	movs	r1, #170	@ 0xaa
1005c992:	5444      	strb	r4, [r0, r1]
1005c994:	bdb0      	pop	{r4, r5, r7, pc}

1005c996 <ll_cpe_get_active>:
1005c996:	b580      	push	{r7, lr}
1005c998:	f7ff f99a 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005c99c:	8801      	ldrh	r1, [r0, #0]
1005c99e:	2001      	movs	r0, #1
1005c9a0:	4008      	ands	r0, r1
1005c9a2:	bd80      	pop	{r7, pc}

1005c9a4 <ll_cpe_get_rx_pdu_discarded_by_one_sm>:
1005c9a4:	b580      	push	{r7, lr}
1005c9a6:	f7ff f993 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005c9aa:	7800      	ldrb	r0, [r0, #0]
1005c9ac:	0740      	lsls	r0, r0, #29
1005c9ae:	0fc0      	lsrs	r0, r0, #31
1005c9b0:	bd80      	pop	{r7, pc}
	...

1005c9b4 <ll_cpe_process_rx_pdu>:
1005c9b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005c9b6:	b08f      	sub	sp, #60	@ 0x3c
1005c9b8:	9206      	str	r2, [sp, #24]
1005c9ba:	460d      	mov	r5, r1
1005c9bc:	4606      	mov	r6, r0
1005c9be:	f7fd fb3f 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005c9c2:	212c      	movs	r1, #44	@ 0x2c
1005c9c4:	5c41      	ldrb	r1, [r0, r1]
1005c9c6:	1ec9      	subs	r1, r1, #3
1005c9c8:	424a      	negs	r2, r1
1005c9ca:	414a      	adcs	r2, r1
1005c9cc:	9205      	str	r2, [sp, #20]
1005c9ce:	2400      	movs	r4, #0
1005c9d0:	900a      	str	r0, [sp, #40]	@ 0x28
1005c9d2:	4621      	mov	r1, r4
1005c9d4:	f7fd fdca 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
1005c9d8:	7841      	ldrb	r1, [r0, #1]
1005c9da:	9104      	str	r1, [sp, #16]
1005c9dc:	9009      	str	r0, [sp, #36]	@ 0x24
1005c9de:	8847      	ldrh	r7, [r0, #2]
1005c9e0:	4630      	mov	r0, r6
1005c9e2:	4629      	mov	r1, r5
1005c9e4:	f7ff fe18 	bl	1005c618 <ll_cpe_get_expected_opcode>
1005c9e8:	9003      	str	r0, [sp, #12]
1005c9ea:	4630      	mov	r0, r6
1005c9ec:	4629      	mov	r1, r5
1005c9ee:	9407      	str	r4, [sp, #28]
1005c9f0:	4622      	mov	r2, r4
1005c9f2:	f7ff fdf8 	bl	1005c5e6 <ll_cpe_get_blocked_status>
1005c9f6:	900b      	str	r0, [sp, #44]	@ 0x2c
1005c9f8:	b2fa      	uxtb	r2, r7
1005c9fa:	4630      	mov	r0, r6
1005c9fc:	4629      	mov	r1, r5
1005c9fe:	920e      	str	r2, [sp, #56]	@ 0x38
1005ca00:	f000 f8dd 	bl	1005cbbe <ll_cpe_check_instant_blocked>
1005ca04:	900c      	str	r0, [sp, #48]	@ 0x30
1005ca06:	426c      	negs	r4, r5
1005ca08:	9508      	str	r5, [sp, #32]
1005ca0a:	416c      	adcs	r4, r5
1005ca0c:	4630      	mov	r0, r6
1005ca0e:	4621      	mov	r1, r4
1005ca10:	f7ff fe0a 	bl	1005c628 <ll_cpe_get_state>
1005ca14:	4605      	mov	r5, r0
1005ca16:	960d      	str	r6, [sp, #52]	@ 0x34
1005ca18:	4630      	mov	r0, r6
1005ca1a:	4621      	mov	r1, r4
1005ca1c:	f7ff fdfc 	bl	1005c618 <ll_cpe_get_expected_opcode>
1005ca20:	463a      	mov	r2, r7
1005ca22:	1ff9      	subs	r1, r7, #7
1005ca24:	b2cb      	uxtb	r3, r1
1005ca26:	2b0b      	cmp	r3, #11
1005ca28:	d302      	bcc.n	1005ca30 <ll_cpe_process_rx_pdu+0x7c>
1005ca2a:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005ca2c:	9f07      	ldr	r7, [sp, #28]
1005ca2e:	e001      	b.n	1005ca34 <ll_cpe_process_rx_pdu+0x80>
1005ca30:	2701      	movs	r7, #1
1005ca32:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005ca34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
1005ca36:	2e01      	cmp	r6, #1
1005ca38:	d103      	bne.n	1005ca42 <ll_cpe_process_rx_pdu+0x8e>
1005ca3a:	2d04      	cmp	r5, #4
1005ca3c:	d147      	bne.n	1005cace <ll_cpe_process_rx_pdu+0x11a>
1005ca3e:	4288      	cmp	r0, r1
1005ca40:	d145      	bne.n	1005cace <ll_cpe_process_rx_pdu+0x11a>
1005ca42:	4955      	ldr	r1, [pc, #340]	@ (1005cb98 <__arm_cp.58_0>)
1005ca44:	40d9      	lsrs	r1, r3
1005ca46:	400f      	ands	r7, r1
1005ca48:	0a16      	lsrs	r6, r2, #8
1005ca4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005ca4c:	2901      	cmp	r1, #1
1005ca4e:	d11d      	bne.n	1005ca8c <ll_cpe_process_rx_pdu+0xd8>
1005ca50:	900c      	str	r0, [sp, #48]	@ 0x30
1005ca52:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005ca54:	4631      	mov	r1, r6
1005ca56:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005ca58:	4632      	mov	r2, r6
1005ca5a:	4623      	mov	r3, r4
1005ca5c:	f7ff fdec 	bl	1005c638 <LL_cpe_rxctrlpdu_checkreject>
1005ca60:	2d04      	cmp	r5, #4
1005ca62:	d10c      	bne.n	1005ca7e <ll_cpe_process_rx_pdu+0xca>
1005ca64:	2101      	movs	r1, #1
1005ca66:	404f      	eors	r7, r1
1005ca68:	d101      	bne.n	1005ca6e <ll_cpe_process_rx_pdu+0xba>
1005ca6a:	2800      	cmp	r0, #0
1005ca6c:	d007      	beq.n	1005ca7e <ll_cpe_process_rx_pdu+0xca>
1005ca6e:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005ca70:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005ca72:	1a40      	subs	r0, r0, r1
1005ca74:	1e41      	subs	r1, r0, #1
1005ca76:	4188      	sbcs	r0, r1
1005ca78:	4007      	ands	r7, r0
1005ca7a:	2f01      	cmp	r7, #1
1005ca7c:	d16e      	bne.n	1005cb5c <ll_cpe_process_rx_pdu+0x1a8>
1005ca7e:	4630      	mov	r0, r6
1005ca80:	4621      	mov	r1, r4
1005ca82:	f7ff f971 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005ca86:	4605      	mov	r5, r0
1005ca88:	2605      	movs	r6, #5
1005ca8a:	e026      	b.n	1005cada <ll_cpe_process_rx_pdu+0x126>
1005ca8c:	2400      	movs	r4, #0
1005ca8e:	9806      	ldr	r0, [sp, #24]
1005ca90:	2803      	cmp	r0, #3
1005ca92:	d049      	beq.n	1005cb28 <ll_cpe_process_rx_pdu+0x174>
1005ca94:	2801      	cmp	r0, #1
1005ca96:	d144      	bne.n	1005cb22 <ll_cpe_process_rx_pdu+0x16e>
1005ca98:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
1005ca9a:	4630      	mov	r0, r6
1005ca9c:	9905      	ldr	r1, [sp, #20]
1005ca9e:	9a04      	ldr	r2, [sp, #16]
1005caa0:	f7ff fdf2 	bl	1005c688 <valid_first_opcode>
1005caa4:	2801      	cmp	r0, #1
1005caa6:	d13c      	bne.n	1005cb22 <ll_cpe_process_rx_pdu+0x16e>
1005caa8:	2401      	movs	r4, #1
1005caaa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
1005caac:	4628      	mov	r0, r5
1005caae:	4621      	mov	r1, r4
1005cab0:	f7ff f91b 	bl	1005bcea <LL_cpe_get_active_status>
1005cab4:	4607      	mov	r7, r0
1005cab6:	4628      	mov	r0, r5
1005cab8:	4621      	mov	r1, r4
1005caba:	f000 f897 	bl	1005cbec <ll_cpe_get_instant_supported>
1005cabe:	4605      	mov	r5, r0
1005cac0:	4630      	mov	r0, r6
1005cac2:	f000 f89b 	bl	1005cbfc <LL_cpe_is_opcode_supporting_instant>
1005cac6:	2801      	cmp	r0, #1
1005cac8:	d04a      	beq.n	1005cb60 <ll_cpe_process_rx_pdu+0x1ac>
1005caca:	4622      	mov	r2, r4
1005cacc:	e049      	b.n	1005cb62 <ll_cpe_process_rx_pdu+0x1ae>
1005cace:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005cad0:	4621      	mov	r1, r4
1005cad2:	f7ff f949 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005cad6:	4605      	mov	r5, r0
1005cad8:	2604      	movs	r6, #4
1005cada:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005cadc:	7878      	ldrb	r0, [r7, #1]
1005cade:	2110      	movs	r1, #16
1005cae0:	1c80      	adds	r0, r0, #2
1005cae2:	b2c0      	uxtb	r0, r0
1005cae4:	9100      	str	r1, [sp, #0]
1005cae6:	9001      	str	r0, [sp, #4]
1005cae8:	9702      	str	r7, [sp, #8]
1005caea:	2401      	movs	r4, #1
1005caec:	2000      	movs	r0, #0
1005caee:	4621      	mov	r1, r4
1005caf0:	4622      	mov	r2, r4
1005caf2:	4603      	mov	r3, r0
1005caf4:	f7f8 fb79 	bl	100551ea <log_notify_stu_ucfg_weak>
1005caf8:	4628      	mov	r0, r5
1005cafa:	f000 f88f 	bl	1005cc1c <LL_cpe_get_cpf>
1005cafe:	2800      	cmp	r0, #0
1005cb00:	d00c      	beq.n	1005cb1c <ll_cpe_process_rx_pdu+0x168>
1005cb02:	4605      	mov	r5, r0
1005cb04:	4632      	mov	r2, r6
1005cb06:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
1005cb08:	4630      	mov	r0, r6
1005cb0a:	463b      	mov	r3, r7
1005cb0c:	9f08      	ldr	r7, [sp, #32]
1005cb0e:	4639      	mov	r1, r7
1005cb10:	47a8      	blx	r5
1005cb12:	4602      	mov	r2, r0
1005cb14:	4630      	mov	r0, r6
1005cb16:	4639      	mov	r1, r7
1005cb18:	f000 f88d 	bl	1005cc36 <ll_cpe_set_expected_opcode>
1005cb1c:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005cb1e:	f7fd fc6b 	bl	1005a3f8 <llc_conn_clr_rx_ctrl_pdu_full>
1005cb22:	4620      	mov	r0, r4
1005cb24:	b00f      	add	sp, #60	@ 0x3c
1005cb26:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005cb28:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005cb2a:	9d08      	ldr	r5, [sp, #32]
1005cb2c:	4629      	mov	r1, r5
1005cb2e:	f7ff f91b 	bl	1005bd68 <ll_cpe_get_cpid_from_sm>
1005cb32:	900c      	str	r0, [sp, #48]	@ 0x30
1005cb34:	2f00      	cmp	r7, #0
1005cb36:	d009      	beq.n	1005cb4c <ll_cpe_process_rx_pdu+0x198>
1005cb38:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005cb3a:	4631      	mov	r1, r6
1005cb3c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005cb3e:	462b      	mov	r3, r5
1005cb40:	f7ff fd7a 	bl	1005c638 <LL_cpe_rxctrlpdu_checkreject>
1005cb44:	4604      	mov	r4, r0
1005cb46:	2801      	cmp	r0, #1
1005cb48:	d004      	beq.n	1005cb54 <ll_cpe_process_rx_pdu+0x1a0>
1005cb4a:	e7ea      	b.n	1005cb22 <ll_cpe_process_rx_pdu+0x16e>
1005cb4c:	9803      	ldr	r0, [sp, #12]
1005cb4e:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005cb50:	4288      	cmp	r0, r1
1005cb52:	d113      	bne.n	1005cb7c <ll_cpe_process_rx_pdu+0x1c8>
1005cb54:	2603      	movs	r6, #3
1005cb56:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005cb58:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1005cb5a:	e7bf      	b.n	1005cadc <ll_cpe_process_rx_pdu+0x128>
1005cb5c:	2400      	movs	r4, #0
1005cb5e:	e7e0      	b.n	1005cb22 <ll_cpe_process_rx_pdu+0x16e>
1005cb60:	2202      	movs	r2, #2
1005cb62:	4067      	eors	r7, r4
1005cb64:	4065      	eors	r5, r4
1005cb66:	433d      	orrs	r5, r7
1005cb68:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005cb6a:	d000      	beq.n	1005cb6e <ll_cpe_process_rx_pdu+0x1ba>
1005cb6c:	4622      	mov	r2, r4
1005cb6e:	2e2a      	cmp	r6, #42	@ 0x2a
1005cb70:	d80e      	bhi.n	1005cb90 <ll_cpe_process_rx_pdu+0x1dc>
1005cb72:	2003      	movs	r0, #3
1005cb74:	4370      	muls	r0, r6
1005cb76:	4909      	ldr	r1, [pc, #36]	@ (1005cb9c <__arm_cp.58_1>)
1005cb78:	5c0d      	ldrb	r5, [r1, r0]
1005cb7a:	e00a      	b.n	1005cb92 <ll_cpe_process_rx_pdu+0x1de>
1005cb7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005cb7e:	f7fd fd16 	bl	1005a5ae <llc_conn_get_rx_acl_blocked>
1005cb82:	2801      	cmp	r0, #1
1005cb84:	d1cd      	bne.n	1005cb22 <ll_cpe_process_rx_pdu+0x16e>
1005cb86:	980c      	ldr	r0, [sp, #48]	@ 0x30
1005cb88:	2801      	cmp	r0, #1
1005cb8a:	d1ca      	bne.n	1005cb22 <ll_cpe_process_rx_pdu+0x16e>
1005cb8c:	2501      	movs	r5, #1
1005cb8e:	e77b      	b.n	1005ca88 <ll_cpe_process_rx_pdu+0xd4>
1005cb90:	2516      	movs	r5, #22
1005cb92:	4616      	mov	r6, r2
1005cb94:	e7a2      	b.n	1005cadc <ll_cpe_process_rx_pdu+0x128>
1005cb96:	46c0      	nop			@ (mov r8, r8)

1005cb98 <__arm_cp.58_0>:
1005cb98:	00000441 	.word	0x00000441

1005cb9c <__arm_cp.58_1>:
1005cb9c:	10069818 	.word	0x10069818

1005cba0 <ll_cpe_get_instant_active>:
1005cba0:	b580      	push	{r7, lr}
1005cba2:	f7ff f8a9 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005cba6:	7800      	ldrb	r0, [r0, #0]
1005cba8:	0640      	lsls	r0, r0, #25
1005cbaa:	0fc0      	lsrs	r0, r0, #31
1005cbac:	bd80      	pop	{r7, pc}

1005cbae <ll_cpe_clr_rx_pdu_discarded_by_one_sm>:
1005cbae:	b580      	push	{r7, lr}
1005cbb0:	f7ff f88e 	bl	1005bcd0 <LL_cpe_get_ctrl_flds_common_p>
1005cbb4:	8801      	ldrh	r1, [r0, #0]
1005cbb6:	2204      	movs	r2, #4
1005cbb8:	4391      	bics	r1, r2
1005cbba:	8001      	strh	r1, [r0, #0]
1005cbbc:	bd80      	pop	{r7, pc}

1005cbbe <ll_cpe_check_instant_blocked>:
1005cbbe:	b5b0      	push	{r4, r5, r7, lr}
1005cbc0:	460c      	mov	r4, r1
1005cbc2:	4605      	mov	r5, r0
1005cbc4:	2aff      	cmp	r2, #255	@ 0xff
1005cbc6:	d003      	beq.n	1005cbd0 <ll_cpe_check_instant_blocked+0x12>
1005cbc8:	4610      	mov	r0, r2
1005cbca:	f000 f817 	bl	1005cbfc <LL_cpe_is_opcode_supporting_instant>
1005cbce:	e003      	b.n	1005cbd8 <ll_cpe_check_instant_blocked+0x1a>
1005cbd0:	4628      	mov	r0, r5
1005cbd2:	4621      	mov	r1, r4
1005cbd4:	f000 f80a 	bl	1005cbec <ll_cpe_get_instant_supported>
1005cbd8:	2800      	cmp	r0, #0
1005cbda:	d005      	beq.n	1005cbe8 <ll_cpe_check_instant_blocked+0x2a>
1005cbdc:	2202      	movs	r2, #2
1005cbde:	4628      	mov	r0, r5
1005cbe0:	4621      	mov	r1, r4
1005cbe2:	f7ff fd00 	bl	1005c5e6 <ll_cpe_get_blocked_status>
1005cbe6:	bdb0      	pop	{r4, r5, r7, pc}
1005cbe8:	2000      	movs	r0, #0
1005cbea:	bdb0      	pop	{r4, r5, r7, pc}

1005cbec <ll_cpe_get_instant_supported>:
1005cbec:	b580      	push	{r7, lr}
1005cbee:	f7ff f883 	bl	1005bcf8 <ll_cpe_get_ctrl_flds_per_sm_p>
1005cbf2:	7800      	ldrb	r0, [r0, #0]
1005cbf4:	0680      	lsls	r0, r0, #26
1005cbf6:	0fc0      	lsrs	r0, r0, #31
1005cbf8:	bd80      	pop	{r7, pc}
	...

1005cbfc <LL_cpe_is_opcode_supporting_instant>:
1005cbfc:	b510      	push	{r4, lr}
1005cbfe:	4601      	mov	r1, r0
1005cc00:	2000      	movs	r0, #0
1005cc02:	a205      	add	r2, pc, #20	@ (adr r2, 1005cc18 <LL_cpe_is_opcode_supporting_instant+0x1c>)
1005cc04:	4603      	mov	r3, r0
1005cc06:	2b04      	cmp	r3, #4
1005cc08:	d004      	beq.n	1005cc14 <LL_cpe_is_opcode_supporting_instant+0x18>
1005cc0a:	5cd4      	ldrb	r4, [r2, r3]
1005cc0c:	1c5b      	adds	r3, r3, #1
1005cc0e:	428c      	cmp	r4, r1
1005cc10:	d1f9      	bne.n	1005cc06 <LL_cpe_is_opcode_supporting_instant+0xa>
1005cc12:	2001      	movs	r0, #1
1005cc14:	bd10      	pop	{r4, pc}
1005cc16:	46c0      	nop			@ (mov r8, r8)
1005cc18:	1f160001 	.word	0x1f160001

1005cc1c <LL_cpe_get_cpf>:
1005cc1c:	b510      	push	{r4, lr}
1005cc1e:	4601      	mov	r1, r0
1005cc20:	3914      	subs	r1, #20
1005cc22:	2903      	cmp	r1, #3
1005cc24:	d201      	bcs.n	1005cc2a <LL_cpe_get_cpf+0xe>
1005cc26:	2000      	movs	r0, #0
1005cc28:	bd10      	pop	{r4, pc}
1005cc2a:	0084      	lsls	r4, r0, #2
1005cc2c:	f7fd f9fe 	bl	1005a02c <llc_conn_get_cntxt_p>
1005cc30:	6880      	ldr	r0, [r0, #8]
1005cc32:	5900      	ldr	r0, [r0, r4]
1005cc34:	bd10      	pop	{r4, pc}

1005cc36 <ll_cpe_set_expected_opcode>:
1005cc36:	b5b0      	push	{r4, r5, r7, lr}
1005cc38:	4614      	mov	r4, r2
1005cc3a:	460d      	mov	r5, r1
1005cc3c:	f7fd fa00 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005cc40:	1940      	adds	r0, r0, r5
1005cc42:	21ae      	movs	r1, #174	@ 0xae
1005cc44:	5444      	strb	r4, [r0, r1]
1005cc46:	bdb0      	pop	{r4, r5, r7, pc}

1005cc48 <LL_channel_map_update_param_check>:
1005cc48:	b5b0      	push	{r4, r5, r7, lr}
1005cc4a:	4601      	mov	r1, r0
1005cc4c:	7900      	ldrb	r0, [r0, #4]
1005cc4e:	281f      	cmp	r0, #31
1005cc50:	d811      	bhi.n	1005cc76 <LL_channel_map_update_param_check+0x2e>
1005cc52:	2000      	movs	r0, #0
1005cc54:	4602      	mov	r2, r0
1005cc56:	4603      	mov	r3, r0
1005cc58:	2a25      	cmp	r2, #37	@ 0x25
1005cc5a:	d00f      	beq.n	1005cc7c <LL_channel_map_update_param_check+0x34>
1005cc5c:	2407      	movs	r4, #7
1005cc5e:	4014      	ands	r4, r2
1005cc60:	08d5      	lsrs	r5, r2, #3
1005cc62:	5d4d      	ldrb	r5, [r1, r5]
1005cc64:	40e5      	lsrs	r5, r4
1005cc66:	07ec      	lsls	r4, r5, #31
1005cc68:	d003      	beq.n	1005cc72 <LL_channel_map_update_param_check+0x2a>
1005cc6a:	1c5b      	adds	r3, r3, #1
1005cc6c:	b2dc      	uxtb	r4, r3
1005cc6e:	2c02      	cmp	r4, #2
1005cc70:	d003      	beq.n	1005cc7a <LL_channel_map_update_param_check+0x32>
1005cc72:	1c52      	adds	r2, r2, #1
1005cc74:	e7f0      	b.n	1005cc58 <LL_channel_map_update_param_check+0x10>
1005cc76:	2000      	movs	r0, #0
1005cc78:	bdb0      	pop	{r4, r5, r7, pc}
1005cc7a:	2001      	movs	r0, #1
1005cc7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

1005cc80 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>:
1005cc80:	b580      	push	{r7, lr}
1005cc82:	4904      	ldr	r1, [pc, #16]	@ (1005cc94 <__arm_cp.1_0>)
1005cc84:	6809      	ldr	r1, [r1, #0]
1005cc86:	229c      	movs	r2, #156	@ 0x9c
1005cc88:	5889      	ldr	r1, [r1, r2]
1005cc8a:	3148      	adds	r1, #72	@ 0x48
1005cc8c:	2205      	movs	r2, #5
1005cc8e:	f7f5 fd65 	bl	1005275c <BLEPLAT_MemCpy>
1005cc92:	bd80      	pop	{r7, pc}

1005cc94 <__arm_cp.1_0>:
1005cc94:	20002ad0 	.word	0x20002ad0

1005cc98 <LL_channel_map_update>:
1005cc98:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cc9a:	b085      	sub	sp, #20
1005cc9c:	461e      	mov	r6, r3
1005cc9e:	4617      	mov	r7, r2
1005cca0:	4605      	mov	r5, r0
1005cca2:	9103      	str	r1, [sp, #12]
1005cca4:	f7ff f885 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005cca8:	4604      	mov	r4, r0
1005ccaa:	4628      	mov	r0, r5
1005ccac:	f7fd f9c8 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005ccb0:	4602      	mov	r2, r0
1005ccb2:	1e78      	subs	r0, r7, #1
1005ccb4:	2806      	cmp	r0, #6
1005ccb6:	d86c      	bhi.n	1005cd92 <LL_channel_map_update+0xfa>
1005ccb8:	4478      	add	r0, pc
1005ccba:	7900      	ldrb	r0, [r0, #4]
1005ccbc:	0040      	lsls	r0, r0, #1
1005ccbe:	4487      	add	pc, r0
1005ccc0:	30680303 	.word	0x30680303
1005ccc4:	005a3568 	.word	0x005a3568
1005ccc8:	202c      	movs	r0, #44	@ 0x2c
1005ccca:	5c10      	ldrb	r0, [r2, r0]
1005cccc:	2803      	cmp	r0, #3
1005ccce:	d160      	bne.n	1005cd92 <LL_channel_map_update+0xfa>
1005ccd0:	9202      	str	r2, [sp, #8]
1005ccd2:	1cf0      	adds	r0, r6, #3
1005ccd4:	4607      	mov	r7, r0
1005ccd6:	f7ff ffb7 	bl	1005cc48 <LL_channel_map_update_param_check>
1005ccda:	2801      	cmp	r0, #1
1005ccdc:	d151      	bne.n	1005cd82 <LL_channel_map_update+0xea>
1005ccde:	7a30      	ldrb	r0, [r6, #8]
1005cce0:	9001      	str	r0, [sp, #4]
1005cce2:	7a76      	ldrb	r6, [r6, #9]
1005cce4:	2205      	movs	r2, #5
1005cce6:	4638      	mov	r0, r7
1005cce8:	4621      	mov	r1, r4
1005ccea:	f005 ff55 	bl	10062b98 <char_copy>
1005ccee:	0230      	lsls	r0, r6, #8
1005ccf0:	9901      	ldr	r1, [sp, #4]
1005ccf2:	1840      	adds	r0, r0, r1
1005ccf4:	b282      	uxth	r2, r0
1005ccf6:	9802      	ldr	r0, [sp, #8]
1005ccf8:	4621      	mov	r1, r4
1005ccfa:	f7fd feb5 	bl	1005aa68 <llc_conn_set_chmap_params>
1005ccfe:	2600      	movs	r6, #0
1005cd00:	2702      	movs	r7, #2
1005cd02:	4628      	mov	r0, r5
1005cd04:	4631      	mov	r1, r6
1005cd06:	463a      	mov	r2, r7
1005cd08:	f7ff f836 	bl	1005bd78 <LL_cpe_set_blocked>
1005cd0c:	2301      	movs	r3, #1
1005cd0e:	4628      	mov	r0, r5
1005cd10:	4631      	mov	r1, r6
1005cd12:	463a      	mov	r2, r7
1005cd14:	f7fe fff7 	bl	1005bd06 <LL_cpe_set_active>
1005cd18:	4628      	mov	r0, r5
1005cd1a:	9903      	ldr	r1, [sp, #12]
1005cd1c:	f7ff f861 	bl	1005bde2 <LL_cpe_set_rx_with_instant>
1005cd20:	e037      	b.n	1005cd92 <LL_channel_map_update+0xfa>
1005cd22:	78b0      	ldrb	r0, [r6, #2]
1005cd24:	2801      	cmp	r0, #1
1005cd26:	d030      	beq.n	1005cd8a <LL_channel_map_update+0xf2>
1005cd28:	212a      	movs	r1, #42	@ 0x2a
1005cd2a:	e02f      	b.n	1005cd8c <LL_channel_map_update+0xf4>
1005cd2c:	4628      	mov	r0, r5
1005cd2e:	9202      	str	r2, [sp, #8]
1005cd30:	f7ff fe08 	bl	1005c944 <llc_cpe_calc_instant>
1005cd34:	af04      	add	r7, sp, #16
1005cd36:	8038      	strh	r0, [r7, #0]
1005cd38:	4620      	mov	r0, r4
1005cd3a:	4629      	mov	r1, r5
1005cd3c:	f7ff ffa0 	bl	1005cc80 <LLC_channel_map_copy_to_cpf_context_ucfg_weak>
1005cd40:	2001      	movs	r0, #1
1005cd42:	70b0      	strb	r0, [r6, #2]
1005cd44:	2008      	movs	r0, #8
1005cd46:	7070      	strb	r0, [r6, #1]
1005cd48:	2003      	movs	r0, #3
1005cd4a:	7030      	strb	r0, [r6, #0]
1005cd4c:	1cf1      	adds	r1, r6, #3
1005cd4e:	2205      	movs	r2, #5
1005cd50:	4620      	mov	r0, r4
1005cd52:	f005 ff21 	bl	10062b98 <char_copy>
1005cd56:	3608      	adds	r6, #8
1005cd58:	2202      	movs	r2, #2
1005cd5a:	4638      	mov	r0, r7
1005cd5c:	4631      	mov	r1, r6
1005cd5e:	f005 ff1b 	bl	10062b98 <char_copy>
1005cd62:	883a      	ldrh	r2, [r7, #0]
1005cd64:	9802      	ldr	r0, [sp, #8]
1005cd66:	4621      	mov	r1, r4
1005cd68:	f7fd fe7e 	bl	1005aa68 <llc_conn_set_chmap_params>
1005cd6c:	4628      	mov	r0, r5
1005cd6e:	9903      	ldr	r1, [sp, #12]
1005cd70:	f7ff f828 	bl	1005bdc4 <LL_cpe_set_tx_with_instant>
1005cd74:	e00d      	b.n	1005cd92 <LL_channel_map_update+0xfa>
1005cd76:	2202      	movs	r2, #2
1005cd78:	4628      	mov	r0, r5
1005cd7a:	9903      	ldr	r1, [sp, #12]
1005cd7c:	f7fe ffda 	bl	1005bd34 <LL_cpe_clr_active>
1005cd80:	e007      	b.n	1005cd92 <LL_channel_map_update+0xfa>
1005cd82:	4628      	mov	r0, r5
1005cd84:	f7fe ff8c 	bl	1005bca0 <ll_cpe_set_unknown_rsp_pending>
1005cd88:	e003      	b.n	1005cd92 <LL_channel_map_update+0xfa>
1005cd8a:	2123      	movs	r1, #35	@ 0x23
1005cd8c:	4610      	mov	r0, r2
1005cd8e:	f7fe f83b 	bl	1005ae08 <llc_conn_disconnect_link_from_cpf>
1005cd92:	20ff      	movs	r0, #255	@ 0xff
1005cd94:	b005      	add	sp, #20
1005cd96:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005cd98 <LLC_channel_map_update_offline_processing_ucfg_weak>:
1005cd98:	2000      	movs	r0, #0
1005cd9a:	4770      	bx	lr

1005cd9c <LLC_conn_init_chc_ctxt_ucfg_weak>:
1005cd9c:	4770      	bx	lr

1005cd9e <LLC_chc_ll_cntxt_init_ucfg_weak>:
1005cd9e:	4770      	bx	lr

1005cda0 <LLC_chc_reporting_offline_processing_ucfg_weak>:
1005cda0:	2000      	movs	r0, #0
1005cda2:	4770      	bx	lr

1005cda4 <LL_cpf_cis_processing_ucfg_weak>:
1005cda4:	4770      	bx	lr
	...

1005cda8 <LL_cpf_conn_upd>:
1005cda8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005cdaa:	b091      	sub	sp, #68	@ 0x44
1005cdac:	461e      	mov	r6, r3
1005cdae:	4614      	mov	r4, r2
1005cdb0:	4605      	mov	r5, r0
1005cdb2:	910c      	str	r1, [sp, #48]	@ 0x30
1005cdb4:	f7fe fffd 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005cdb8:	4607      	mov	r7, r0
1005cdba:	4628      	mov	r0, r5
1005cdbc:	f7fd f940 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005cdc0:	4603      	mov	r3, r0
1005cdc2:	1e60      	subs	r0, r4, #1
1005cdc4:	2807      	cmp	r0, #7
1005cdc6:	d900      	bls.n	1005cdca <LL_cpf_conn_upd+0x22>
1005cdc8:	e0ce      	b.n	1005cf68 <LL_cpf_conn_upd+0x1c0>
1005cdca:	46c0      	nop			@ (mov r8, r8)
1005cdcc:	4478      	add	r0, pc
1005cdce:	7900      	ldrb	r0, [r0, #4]
1005cdd0:	0040      	lsls	r0, r0, #1
1005cdd2:	4487      	add	pc, r0
1005cdd4:	22c90303 	.word	0x22c90303
1005cdd8:	c47c2fc9 	.word	0xc47c2fc9
1005cddc:	4618      	mov	r0, r3
1005cdde:	302c      	adds	r0, #44	@ 0x2c
1005cde0:	7800      	ldrb	r0, [r0, #0]
1005cde2:	2803      	cmp	r0, #3
1005cde4:	d000      	beq.n	1005cde8 <LL_cpf_conn_upd+0x40>
1005cde6:	e0bf      	b.n	1005cf68 <LL_cpf_conn_upd+0x1c0>
1005cde8:	2091      	movs	r0, #145	@ 0x91
1005cdea:	0040      	lsls	r0, r0, #1
1005cdec:	930b      	str	r3, [sp, #44]	@ 0x2c
1005cdee:	1819      	adds	r1, r3, r0
1005cdf0:	8973      	ldrh	r3, [r6, #10]
1005cdf2:	8932      	ldrh	r2, [r6, #8]
1005cdf4:	88f0      	ldrh	r0, [r6, #6]
1005cdf6:	880c      	ldrh	r4, [r1, #0]
1005cdf8:	2100      	movs	r1, #0
1005cdfa:	9100      	str	r1, [sp, #0]
1005cdfc:	9101      	str	r1, [sp, #4]
1005cdfe:	9402      	str	r4, [sp, #8]
1005ce00:	900a      	str	r0, [sp, #40]	@ 0x28
1005ce02:	4601      	mov	r1, r0
1005ce04:	9209      	str	r2, [sp, #36]	@ 0x24
1005ce06:	461c      	mov	r4, r3
1005ce08:	f000 f906 	bl	1005d018 <llc_conn_upd_params_check>
1005ce0c:	2800      	cmp	r0, #0
1005ce0e:	d100      	bne.n	1005ce12 <LL_cpf_conn_upd+0x6a>
1005ce10:	e0ad      	b.n	1005cf6e <LL_cpf_conn_upd+0x1c6>
1005ce12:	4628      	mov	r0, r5
1005ce14:	f7fe ff44 	bl	1005bca0 <ll_cpe_set_unknown_rsp_pending>
1005ce18:	e0a6      	b.n	1005cf68 <LL_cpf_conn_upd+0x1c0>
1005ce1a:	78b0      	ldrb	r0, [r6, #2]
1005ce1c:	2123      	movs	r1, #35	@ 0x23
1005ce1e:	280f      	cmp	r0, #15
1005ce20:	460a      	mov	r2, r1
1005ce22:	d000      	beq.n	1005ce26 <LL_cpf_conn_upd+0x7e>
1005ce24:	222a      	movs	r2, #42	@ 0x2a
1005ce26:	2800      	cmp	r0, #0
1005ce28:	d000      	beq.n	1005ce2c <LL_cpf_conn_upd+0x84>
1005ce2a:	4611      	mov	r1, r2
1005ce2c:	4618      	mov	r0, r3
1005ce2e:	f7fd ffeb 	bl	1005ae08 <llc_conn_disconnect_link_from_cpf>
1005ce32:	e099      	b.n	1005cf68 <LL_cpf_conn_upd+0x1c0>
1005ce34:	930b      	str	r3, [sp, #44]	@ 0x2c
1005ce36:	1cb0      	adds	r0, r6, #2
1005ce38:	9008      	str	r0, [sp, #32]
1005ce3a:	f7fd f8f7 	bl	1005a02c <llc_conn_get_cntxt_p>
1005ce3e:	9009      	str	r0, [sp, #36]	@ 0x24
1005ce40:	4628      	mov	r0, r5
1005ce42:	f7ff fd7f 	bl	1005c944 <llc_cpe_calc_instant>
1005ce46:	4604      	mov	r4, r0
1005ce48:	2028      	movs	r0, #40	@ 0x28
1005ce4a:	2101      	movs	r1, #1
1005ce4c:	9107      	str	r1, [sp, #28]
1005ce4e:	5439      	strb	r1, [r7, r0]
1005ce50:	8b38      	ldrh	r0, [r7, #24]
1005ce52:	8b79      	ldrh	r1, [r7, #26]
1005ce54:	1808      	adds	r0, r1, r0
1005ce56:	0840      	lsrs	r0, r0, #1
1005ce58:	9010      	str	r0, [sp, #64]	@ 0x40
1005ce5a:	8bb8      	ldrh	r0, [r7, #28]
1005ce5c:	9006      	str	r0, [sp, #24]
1005ce5e:	8bf8      	ldrh	r0, [r7, #30]
1005ce60:	9005      	str	r0, [sp, #20]
1005ce62:	a80d      	add	r0, sp, #52	@ 0x34
1005ce64:	7105      	strb	r5, [r0, #4]
1005ce66:	a910      	add	r1, sp, #64	@ 0x40
1005ce68:	910f      	str	r1, [sp, #60]	@ 0x3c
1005ce6a:	970d      	str	r7, [sp, #52]	@ 0x34
1005ce6c:	f7f2 f814 	bl	1004ee98 <LL_conn_upd_max_tx_time_coded_ucfg>
1005ce70:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005ce72:	8338      	strh	r0, [r7, #24]
1005ce74:	940a      	str	r4, [sp, #40]	@ 0x28
1005ce76:	0421      	lsls	r1, r4, #16
1005ce78:	9a05      	ldr	r2, [sp, #20]
1005ce7a:	1889      	adds	r1, r1, r2
1005ce7c:	9104      	str	r1, [sp, #16]
1005ce7e:	9c06      	ldr	r4, [sp, #24]
1005ce80:	0423      	lsls	r3, r4, #16
1005ce82:	4303      	orrs	r3, r0
1005ce84:	9808      	ldr	r0, [sp, #32]
1005ce86:	4962      	ldr	r1, [pc, #392]	@ (1005d010 <__arm_cp.0_2>)
1005ce88:	c00a      	stmia	r0!, {r1, r3}
1005ce8a:	9904      	ldr	r1, [sp, #16]
1005ce8c:	6001      	str	r1, [r0, #0]
1005ce8e:	4861      	ldr	r0, [pc, #388]	@ (1005d014 <__arm_cp.0_3>)
1005ce90:	8030      	strh	r0, [r6, #0]
1005ce92:	2003      	movs	r0, #3
1005ce94:	0240      	lsls	r0, r0, #9
1005ce96:	0311      	lsls	r1, r2, #12
1005ce98:	60fc      	str	r4, [r7, #12]
1005ce9a:	6139      	str	r1, [r7, #16]
1005ce9c:	9907      	ldr	r1, [sp, #28]
1005ce9e:	0249      	lsls	r1, r1, #9
1005cea0:	c703      	stmia	r7!, {r0, r1}
1005cea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005cea4:	6800      	ldr	r0, [r0, #0]
1005cea6:	8b79      	ldrh	r1, [r7, #26]
1005cea8:	0209      	lsls	r1, r1, #8
1005ceaa:	3f08      	subs	r7, #8
1005ceac:	4288      	cmp	r0, r1
1005ceae:	d300      	bcc.n	1005ceb2 <LL_cpf_conn_upd+0x10a>
1005ceb0:	4608      	mov	r0, r1
1005ceb2:	6178      	str	r0, [r7, #20]
1005ceb4:	9810      	ldr	r0, [sp, #64]	@ 0x40
1005ceb6:	0240      	lsls	r0, r0, #9
1005ceb8:	60b8      	str	r0, [r7, #8]
1005ceba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005cebc:	4639      	mov	r1, r7
1005cebe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005cec0:	f7fd fddb 	bl	1005aa7a <llc_conn_set_conn_update_params>
1005cec4:	4628      	mov	r0, r5
1005cec6:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005cec8:	f7fe ff7c 	bl	1005bdc4 <LL_cpe_set_tx_with_instant>
1005cecc:	e04c      	b.n	1005cf68 <LL_cpf_conn_upd+0x1c0>
1005cece:	2028      	movs	r0, #40	@ 0x28
1005ced0:	5c38      	ldrb	r0, [r7, r0]
1005ced2:	2801      	cmp	r0, #1
1005ced4:	d143      	bne.n	1005cf5e <LL_cpf_conn_upd+0x1b6>
1005ced6:	461c      	mov	r4, r3
1005ced8:	a80d      	add	r0, sp, #52	@ 0x34
1005ceda:	7105      	strb	r5, [r0, #4]
1005cedc:	970d      	str	r7, [sp, #52]	@ 0x34
1005cede:	f7f1 ffe7 	bl	1004eeb0 <LL_conn_upd_data_length_change_event_ucfg>
1005cee2:	4849      	ldr	r0, [pc, #292]	@ (1005d008 <__arm_cp.0_0>)
1005cee4:	6800      	ldr	r0, [r0, #0]
1005cee6:	213d      	movs	r1, #61	@ 0x3d
1005cee8:	5c41      	ldrb	r1, [r0, r1]
1005ceea:	0689      	lsls	r1, r1, #26
1005ceec:	d532      	bpl.n	1005cf54 <LL_cpf_conn_upd+0x1ac>
1005ceee:	303d      	adds	r0, #61	@ 0x3d
1005cef0:	7a40      	ldrb	r0, [r0, #9]
1005cef2:	0740      	lsls	r0, r0, #29
1005cef4:	d52e      	bpl.n	1005cf54 <LL_cpf_conn_upd+0x1ac>
1005cef6:	8bf8      	ldrh	r0, [r7, #30]
1005cef8:	900a      	str	r0, [sp, #40]	@ 0x28
1005cefa:	8bb8      	ldrh	r0, [r7, #28]
1005cefc:	9009      	str	r0, [sp, #36]	@ 0x24
1005cefe:	8b3f      	ldrh	r7, [r7, #24]
1005cf00:	8f64      	ldrh	r4, [r4, #58]	@ 0x3a
1005cf02:	4842      	ldr	r0, [pc, #264]	@ (1005d00c <__arm_cp.0_1>)
1005cf04:	6800      	ldr	r0, [r0, #0]
1005cf06:	6900      	ldr	r0, [r0, #16]
1005cf08:	2180      	movs	r1, #128	@ 0x80
1005cf0a:	2224      	movs	r2, #36	@ 0x24
1005cf0c:	2604      	movs	r6, #4
1005cf0e:	4633      	mov	r3, r6
1005cf10:	f7f8 f970 	bl	100551f4 <aci_event_fifo_push_header>
1005cf14:	2800      	cmp	r0, #0
1005cf16:	d01d      	beq.n	1005cf54 <LL_cpf_conn_upd+0x1ac>
1005cf18:	4601      	mov	r1, r0
1005cf1a:	300b      	adds	r0, #11
1005cf1c:	724c      	strb	r4, [r1, #9]
1005cf1e:	7007      	strb	r7, [r0, #0]
1005cf20:	970b      	str	r7, [sp, #44]	@ 0x2c
1005cf22:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005cf24:	734f      	strb	r7, [r1, #13]
1005cf26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005cf28:	7103      	strb	r3, [r0, #4]
1005cf2a:	2200      	movs	r2, #0
1005cf2c:	720a      	strb	r2, [r1, #8]
1005cf2e:	2203      	movs	r2, #3
1005cf30:	71ca      	strb	r2, [r1, #7]
1005cf32:	220a      	movs	r2, #10
1005cf34:	718a      	strb	r2, [r1, #6]
1005cf36:	223e      	movs	r2, #62	@ 0x3e
1005cf38:	714a      	strb	r2, [r1, #5]
1005cf3a:	710e      	strb	r6, [r1, #4]
1005cf3c:	0a22      	lsrs	r2, r4, #8
1005cf3e:	728a      	strb	r2, [r1, #10]
1005cf40:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1005cf42:	0a12      	lsrs	r2, r2, #8
1005cf44:	7042      	strb	r2, [r0, #1]
1005cf46:	0a3a      	lsrs	r2, r7, #8
1005cf48:	738a      	strb	r2, [r1, #14]
1005cf4a:	0a1a      	lsrs	r2, r3, #8
1005cf4c:	7142      	strb	r2, [r0, #5]
1005cf4e:	2080      	movs	r0, #128	@ 0x80
1005cf50:	f7f8 f9ed 	bl	1005532e <aci_event_fifo_push>
1005cf54:	2100      	movs	r1, #0
1005cf56:	4628      	mov	r0, r5
1005cf58:	460a      	mov	r2, r1
1005cf5a:	f000 fec0 	bl	1005dcde <LLC_update_le_ping_params>
1005cf5e:	2200      	movs	r2, #0
1005cf60:	4628      	mov	r0, r5
1005cf62:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005cf64:	f7fe fee6 	bl	1005bd34 <LL_cpe_clr_active>
1005cf68:	20ff      	movs	r0, #255	@ 0xff
1005cf6a:	b011      	add	sp, #68	@ 0x44
1005cf6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005cf6e:	78f0      	ldrb	r0, [r6, #3]
1005cf70:	2800      	cmp	r0, #0
1005cf72:	d100      	bne.n	1005cf76 <LL_cpf_conn_upd+0x1ce>
1005cf74:	e74d      	b.n	1005ce12 <LL_cpf_conn_upd+0x6a>
1005cf76:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005cf78:	1e49      	subs	r1, r1, #1
1005cf7a:	2908      	cmp	r1, #8
1005cf7c:	d300      	bcc.n	1005cf80 <LL_cpf_conn_upd+0x1d8>
1005cf7e:	2108      	movs	r1, #8
1005cf80:	4281      	cmp	r1, r0
1005cf82:	d200      	bcs.n	1005cf86 <LL_cpf_conn_upd+0x1de>
1005cf84:	e745      	b.n	1005ce12 <LL_cpf_conn_upd+0x6a>
1005cf86:	88b2      	ldrh	r2, [r6, #4]
1005cf88:	990a      	ldr	r1, [sp, #40]	@ 0x28
1005cf8a:	428a      	cmp	r2, r1
1005cf8c:	d900      	bls.n	1005cf90 <LL_cpf_conn_upd+0x1e8>
1005cf8e:	e740      	b.n	1005ce12 <LL_cpf_conn_upd+0x6a>
1005cf90:	83fc      	strh	r4, [r7, #30]
1005cf92:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005cf94:	83b9      	strh	r1, [r7, #28]
1005cf96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
1005cf98:	833b      	strh	r3, [r7, #24]
1005cf9a:	837b      	strh	r3, [r7, #26]
1005cf9c:	0324      	lsls	r4, r4, #12
1005cf9e:	025b      	lsls	r3, r3, #9
1005cfa0:	0252      	lsls	r2, r2, #9
1005cfa2:	0240      	lsls	r0, r0, #9
1005cfa4:	c70d      	stmia	r7!, {r0, r2, r3}
1005cfa6:	6039      	str	r1, [r7, #0]
1005cfa8:	607c      	str	r4, [r7, #4]
1005cfaa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1005cfac:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
1005cfae:	2001      	movs	r0, #1
1005cfb0:	3f0c      	subs	r7, #12
1005cfb2:	429a      	cmp	r2, r3
1005cfb4:	d107      	bne.n	1005cfc6 <LL_cpf_conn_upd+0x21e>
1005cfb6:	6e8a      	ldr	r2, [r1, #104]	@ 0x68
1005cfb8:	4294      	cmp	r4, r2
1005cfba:	d104      	bne.n	1005cfc6 <LL_cpf_conn_upd+0x21e>
1005cfbc:	8f08      	ldrh	r0, [r1, #56]	@ 0x38
1005cfbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005cfc0:	1a08      	subs	r0, r1, r0
1005cfc2:	1e41      	subs	r1, r0, #1
1005cfc4:	4188      	sbcs	r0, r1
1005cfc6:	2128      	movs	r1, #40	@ 0x28
1005cfc8:	5478      	strb	r0, [r7, r1]
1005cfca:	980a      	ldr	r0, [sp, #40]	@ 0x28
1005cfcc:	9010      	str	r0, [sp, #64]	@ 0x40
1005cfce:	a80d      	add	r0, sp, #52	@ 0x34
1005cfd0:	7105      	strb	r5, [r0, #4]
1005cfd2:	a910      	add	r1, sp, #64	@ 0x40
1005cfd4:	910f      	str	r1, [sp, #60]	@ 0x3c
1005cfd6:	970d      	str	r7, [sp, #52]	@ 0x34
1005cfd8:	f7f1 ff5e 	bl	1004ee98 <LL_conn_upd_max_tx_time_coded_ucfg>
1005cfdc:	2202      	movs	r2, #2
1005cfde:	4628      	mov	r0, r5
1005cfe0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
1005cfe2:	4621      	mov	r1, r4
1005cfe4:	f7fe fec8 	bl	1005bd78 <LL_cpe_set_blocked>
1005cfe8:	2200      	movs	r2, #0
1005cfea:	2301      	movs	r3, #1
1005cfec:	4628      	mov	r0, r5
1005cfee:	4621      	mov	r1, r4
1005cff0:	f7fe fe89 	bl	1005bd06 <LL_cpe_set_active>
1005cff4:	89b2      	ldrh	r2, [r6, #12]
1005cff6:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005cff8:	4639      	mov	r1, r7
1005cffa:	f7fd fd3e 	bl	1005aa7a <llc_conn_set_conn_update_params>
1005cffe:	4628      	mov	r0, r5
1005d000:	4621      	mov	r1, r4
1005d002:	f7fe feee 	bl	1005bde2 <LL_cpe_set_rx_with_instant>
1005d006:	e7af      	b.n	1005cf68 <LL_cpf_conn_upd+0x1c0>

1005d008 <__arm_cp.0_0>:
1005d008:	20002ad0 	.word	0x20002ad0

1005d00c <__arm_cp.0_1>:
1005d00c:	20002a80 	.word	0x20002a80

1005d010 <__arm_cp.0_2>:
1005d010:	00010300 	.word	0x00010300

1005d014 <__arm_cp.0_3>:
1005d014:	00000c03 	.word	0x00000c03

1005d018 <llc_conn_upd_params_check>:
1005d018:	b570      	push	{r4, r5, r6, lr}
1005d01a:	4604      	mov	r4, r0
1005d01c:	2012      	movs	r0, #18
1005d01e:	2c06      	cmp	r4, #6
1005d020:	d31c      	bcc.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d022:	2519      	movs	r5, #25
1005d024:	01ed      	lsls	r5, r5, #7
1005d026:	42ac      	cmp	r4, r5
1005d028:	d818      	bhi.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d02a:	2906      	cmp	r1, #6
1005d02c:	d316      	bcc.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d02e:	42a9      	cmp	r1, r5
1005d030:	d814      	bhi.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d032:	42a1      	cmp	r1, r4
1005d034:	d312      	bcc.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d036:	0894      	lsrs	r4, r2, #2
1005d038:	2c7c      	cmp	r4, #124	@ 0x7c
1005d03a:	d80f      	bhi.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d03c:	9c05      	ldr	r4, [sp, #20]
1005d03e:	9e04      	ldr	r6, [sp, #16]
1005d040:	42b4      	cmp	r4, r6
1005d042:	d30b      	bcc.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d044:	2b0a      	cmp	r3, #10
1005d046:	d309      	bcc.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d048:	42ab      	cmp	r3, r5
1005d04a:	d807      	bhi.n	1005d05c <llc_conn_upd_params_check+0x44>
1005d04c:	9806      	ldr	r0, [sp, #24]
1005d04e:	1c52      	adds	r2, r2, #1
1005d050:	434a      	muls	r2, r1
1005d052:	4342      	muls	r2, r0
1005d054:	0890      	lsrs	r0, r2, #2
1005d056:	4283      	cmp	r3, r0
1005d058:	d801      	bhi.n	1005d05e <llc_conn_upd_params_check+0x46>
1005d05a:	2012      	movs	r0, #18
1005d05c:	bd70      	pop	{r4, r5, r6, pc}
1005d05e:	2000      	movs	r0, #0
1005d060:	bd70      	pop	{r4, r5, r6, pc}
	...

1005d064 <LL_conn_upd_max_tx_time_coded>:
1005d064:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d066:	4606      	mov	r6, r0
1005d068:	6887      	ldr	r7, [r0, #8]
1005d06a:	7904      	ldrb	r4, [r0, #4]
1005d06c:	4620      	mov	r0, r4
1005d06e:	f7fc ffe7 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005d072:	4605      	mov	r5, r0
1005d074:	4620      	mov	r0, r4
1005d076:	f7fd f817 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005d07a:	2800      	cmp	r0, #0
1005d07c:	d044      	beq.n	1005d108 <LL_conn_upd_max_tx_time_coded+0xa4>
1005d07e:	7980      	ldrb	r0, [r0, #6]
1005d080:	2804      	cmp	r0, #4
1005d082:	d141      	bne.n	1005d108 <LL_conn_upd_max_tx_time_coded+0xa4>
1005d084:	0278      	lsls	r0, r7, #9
1005d086:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
1005d088:	4281      	cmp	r1, r0
1005d08a:	d03d      	beq.n	1005d108 <LL_conn_upd_max_tx_time_coded+0xa4>
1005d08c:	4628      	mov	r0, r5
1005d08e:	302c      	adds	r0, #44	@ 0x2c
1005d090:	9502      	str	r5, [sp, #8]
1005d092:	35b6      	adds	r5, #182	@ 0xb6
1005d094:	6839      	ldr	r1, [r7, #0]
1005d096:	223d      	movs	r2, #61	@ 0x3d
1005d098:	0112      	lsls	r2, r2, #4
1005d09a:	886b      	ldrh	r3, [r5, #2]
1005d09c:	019b      	lsls	r3, r3, #6
1005d09e:	189a      	adds	r2, r3, r2
1005d0a0:	88eb      	ldrh	r3, [r5, #6]
1005d0a2:	429a      	cmp	r2, r3
1005d0a4:	d800      	bhi.n	1005d0a8 <LL_conn_upd_max_tx_time_coded+0x44>
1005d0a6:	4613      	mov	r3, r2
1005d0a8:	4a18      	ldr	r2, [pc, #96]	@ (1005d10c <__arm_cp.3_0>)
1005d0aa:	434a      	muls	r2, r1
1005d0ac:	4611      	mov	r1, r2
1005d0ae:	6836      	ldr	r6, [r6, #0]
1005d0b0:	7800      	ldrb	r0, [r0, #0]
1005d0b2:	2802      	cmp	r0, #2
1005d0b4:	d10b      	bne.n	1005d0ce <LL_conn_upd_max_tx_time_coded+0x6a>
1005d0b6:	4816      	ldr	r0, [pc, #88]	@ (1005d110 <__arm_cp.3_1>)
1005d0b8:	1818      	adds	r0, r3, r0
1005d0ba:	4281      	cmp	r1, r0
1005d0bc:	d207      	bcs.n	1005d0ce <LL_conn_upd_max_tx_time_coded+0x6a>
1005d0be:	9101      	str	r1, [sp, #4]
1005d0c0:	4912      	ldr	r1, [pc, #72]	@ (1005d10c <__arm_cp.3_0>)
1005d0c2:	9300      	str	r3, [sp, #0]
1005d0c4:	f7e3 f8bc 	bl	10040240 <__udivsi3>
1005d0c8:	9b00      	ldr	r3, [sp, #0]
1005d0ca:	9901      	ldr	r1, [sp, #4]
1005d0cc:	6038      	str	r0, [r7, #0]
1005d0ce:	8828      	ldrh	r0, [r5, #0]
1005d0d0:	84f0      	strh	r0, [r6, #38]	@ 0x26
1005d0d2:	204b      	movs	r0, #75	@ 0x4b
1005d0d4:	0080      	lsls	r0, r0, #2
1005d0d6:	1818      	adds	r0, r3, r0
1005d0d8:	1a09      	subs	r1, r1, r0
1005d0da:	d200      	bcs.n	1005d0de <LL_conn_upd_max_tx_time_coded+0x7a>
1005d0dc:	2100      	movs	r1, #0
1005d0de:	8968      	ldrh	r0, [r5, #10]
1005d0e0:	8a2a      	ldrh	r2, [r5, #16]
1005d0e2:	4290      	cmp	r0, r2
1005d0e4:	d300      	bcc.n	1005d0e8 <LL_conn_upd_max_tx_time_coded+0x84>
1005d0e6:	4610      	mov	r0, r2
1005d0e8:	4281      	cmp	r1, r0
1005d0ea:	9b02      	ldr	r3, [sp, #8]
1005d0ec:	d800      	bhi.n	1005d0f0 <LL_conn_upd_max_tx_time_coded+0x8c>
1005d0ee:	4608      	mov	r0, r1
1005d0f0:	b282      	uxth	r2, r0
1005d0f2:	21a9      	movs	r1, #169	@ 0xa9
1005d0f4:	0109      	lsls	r1, r1, #4
1005d0f6:	428a      	cmp	r2, r1
1005d0f8:	d800      	bhi.n	1005d0fc <LL_conn_upd_max_tx_time_coded+0x98>
1005d0fa:	4608      	mov	r0, r1
1005d0fc:	84b0      	strh	r0, [r6, #36]	@ 0x24
1005d0fe:	2101      	movs	r1, #1
1005d100:	4620      	mov	r0, r4
1005d102:	4632      	mov	r2, r6
1005d104:	f000 f806 	bl	1005d114 <LL_adjust_max_tx_data_frag_coded>
1005d108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d10a:	46c0      	nop			@ (mov r8, r8)

1005d10c <__arm_cp.3_0>:
1005d10c:	000004e2 	.word	0x000004e2

1005d110 <__arm_cp.3_1>:
1005d110:	00000bbc 	.word	0x00000bbc

1005d114 <LL_adjust_max_tx_data_frag_coded>:
1005d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d116:	461c      	mov	r4, r3
1005d118:	4615      	mov	r5, r2
1005d11a:	460e      	mov	r6, r1
1005d11c:	461f      	mov	r7, r3
1005d11e:	37b4      	adds	r7, #180	@ 0xb4
1005d120:	f7fc ffc2 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005d124:	2800      	cmp	r0, #0
1005d126:	d002      	beq.n	1005d12e <LL_adjust_max_tx_data_frag_coded+0x1a>
1005d128:	8800      	ldrh	r0, [r0, #0]
1005d12a:	2802      	cmp	r0, #2
1005d12c:	d001      	beq.n	1005d132 <LL_adjust_max_tx_data_frag_coded+0x1e>
1005d12e:	2001      	movs	r0, #1
1005d130:	e000      	b.n	1005d134 <LL_adjust_max_tx_data_frag_coded+0x20>
1005d132:	2003      	movs	r0, #3
1005d134:	8ca9      	ldrh	r1, [r5, #36]	@ 0x24
1005d136:	4a0b      	ldr	r2, [pc, #44]	@ (1005d164 <__arm_cp.4_0>)
1005d138:	1889      	adds	r1, r1, r2
1005d13a:	40c1      	lsrs	r1, r0
1005d13c:	480a      	ldr	r0, [pc, #40]	@ (1005d168 <__arm_cp.4_1>)
1005d13e:	1808      	adds	r0, r1, r0
1005d140:	08c0      	lsrs	r0, r0, #3
1005d142:	b281      	uxth	r1, r0
1005d144:	8838      	ldrh	r0, [r7, #0]
1005d146:	4288      	cmp	r0, r1
1005d148:	d300      	bcc.n	1005d14c <LL_adjust_max_tx_data_frag_coded+0x38>
1005d14a:	4608      	mov	r0, r1
1005d14c:	2e00      	cmp	r6, #0
1005d14e:	d002      	beq.n	1005d156 <LL_adjust_max_tx_data_frag_coded+0x42>
1005d150:	8ce9      	ldrh	r1, [r5, #38]	@ 0x26
1005d152:	4281      	cmp	r1, r0
1005d154:	d300      	bcc.n	1005d158 <LL_adjust_max_tx_data_frag_coded+0x44>
1005d156:	4601      	mov	r1, r0
1005d158:	8079      	strh	r1, [r7, #2]
1005d15a:	4620      	mov	r0, r4
1005d15c:	f7fd fa3a 	bl	1005a5d4 <llc_conn_guard_time_for_close_conn_event>
1005d160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d162:	46c0      	nop			@ (mov r8, r8)

1005d164 <__arm_cp.4_0>:
1005d164:	fffffe88 	.word	0xfffffe88

1005d168 <__arm_cp.4_1>:
1005d168:	0007ffb5 	.word	0x0007ffb5

1005d16c <LL_conn_upd_data_length_change_event>:
1005d16c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005d16e:	6805      	ldr	r5, [r0, #0]
1005d170:	7906      	ldrb	r6, [r0, #4]
1005d172:	4630      	mov	r0, r6
1005d174:	f7fc ff64 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005d178:	4607      	mov	r7, r0
1005d17a:	4630      	mov	r0, r6
1005d17c:	f7fc ff94 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005d180:	2800      	cmp	r0, #0
1005d182:	d047      	beq.n	1005d214 <LL_conn_upd_data_length_change_event+0xa8>
1005d184:	7980      	ldrb	r0, [r0, #6]
1005d186:	2804      	cmp	r0, #4
1005d188:	d144      	bne.n	1005d214 <LL_conn_upd_data_length_change_event+0xa8>
1005d18a:	463c      	mov	r4, r7
1005d18c:	34b4      	adds	r4, #180	@ 0xb4
1005d18e:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
1005d190:	88e1      	ldrh	r1, [r4, #6]
1005d192:	4281      	cmp	r1, r0
1005d194:	d03e      	beq.n	1005d214 <LL_conn_upd_data_length_change_event+0xa8>
1005d196:	80e0      	strh	r0, [r4, #6]
1005d198:	2100      	movs	r1, #0
1005d19a:	4630      	mov	r0, r6
1005d19c:	462a      	mov	r2, r5
1005d19e:	463b      	mov	r3, r7
1005d1a0:	f7ff ffb8 	bl	1005d114 <LL_adjust_max_tx_data_frag_coded>
1005d1a4:	481c      	ldr	r0, [pc, #112]	@ (1005d218 <__arm_cp.6_0>)
1005d1a6:	6800      	ldr	r0, [r0, #0]
1005d1a8:	213d      	movs	r1, #61	@ 0x3d
1005d1aa:	5c41      	ldrb	r1, [r0, r1]
1005d1ac:	0689      	lsls	r1, r1, #26
1005d1ae:	d531      	bpl.n	1005d214 <LL_conn_upd_data_length_change_event+0xa8>
1005d1b0:	303d      	adds	r0, #61	@ 0x3d
1005d1b2:	7a40      	ldrb	r0, [r0, #9]
1005d1b4:	0640      	lsls	r0, r0, #25
1005d1b6:	d52d      	bpl.n	1005d214 <LL_conn_upd_data_length_change_event+0xa8>
1005d1b8:	8926      	ldrh	r6, [r4, #8]
1005d1ba:	88a5      	ldrh	r5, [r4, #4]
1005d1bc:	88e0      	ldrh	r0, [r4, #6]
1005d1be:	9001      	str	r0, [sp, #4]
1005d1c0:	8820      	ldrh	r0, [r4, #0]
1005d1c2:	9002      	str	r0, [sp, #8]
1005d1c4:	8f7f      	ldrh	r7, [r7, #58]	@ 0x3a
1005d1c6:	4815      	ldr	r0, [pc, #84]	@ (1005d21c <__arm_cp.6_1>)
1005d1c8:	6800      	ldr	r0, [r0, #0]
1005d1ca:	6900      	ldr	r0, [r0, #16]
1005d1cc:	2180      	movs	r1, #128	@ 0x80
1005d1ce:	2226      	movs	r2, #38	@ 0x26
1005d1d0:	2404      	movs	r4, #4
1005d1d2:	4623      	mov	r3, r4
1005d1d4:	f7f8 f80e 	bl	100551f4 <aci_event_fifo_push_header>
1005d1d8:	2800      	cmp	r0, #0
1005d1da:	d01b      	beq.n	1005d214 <LL_conn_upd_data_length_change_event+0xa8>
1005d1dc:	4601      	mov	r1, r0
1005d1de:	7406      	strb	r6, [r0, #16]
1005d1e0:	7385      	strb	r5, [r0, #14]
1005d1e2:	9b01      	ldr	r3, [sp, #4]
1005d1e4:	7303      	strb	r3, [r0, #12]
1005d1e6:	9a02      	ldr	r2, [sp, #8]
1005d1e8:	7282      	strb	r2, [r0, #10]
1005d1ea:	7207      	strb	r7, [r0, #8]
1005d1ec:	2007      	movs	r0, #7
1005d1ee:	71c8      	strb	r0, [r1, #7]
1005d1f0:	200b      	movs	r0, #11
1005d1f2:	7188      	strb	r0, [r1, #6]
1005d1f4:	203e      	movs	r0, #62	@ 0x3e
1005d1f6:	7148      	strb	r0, [r1, #5]
1005d1f8:	710c      	strb	r4, [r1, #4]
1005d1fa:	0a30      	lsrs	r0, r6, #8
1005d1fc:	7448      	strb	r0, [r1, #17]
1005d1fe:	0a28      	lsrs	r0, r5, #8
1005d200:	73c8      	strb	r0, [r1, #15]
1005d202:	0a18      	lsrs	r0, r3, #8
1005d204:	7348      	strb	r0, [r1, #13]
1005d206:	0a10      	lsrs	r0, r2, #8
1005d208:	72c8      	strb	r0, [r1, #11]
1005d20a:	0a38      	lsrs	r0, r7, #8
1005d20c:	7248      	strb	r0, [r1, #9]
1005d20e:	2080      	movs	r0, #128	@ 0x80
1005d210:	f7f8 f88d 	bl	1005532e <aci_event_fifo_push>
1005d214:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005d216:	46c0      	nop			@ (mov r8, r8)

1005d218 <__arm_cp.6_0>:
1005d218:	20002ad0 	.word	0x20002ad0

1005d21c <__arm_cp.6_1>:
1005d21c:	20002a80 	.word	0x20002a80

1005d220 <llc_conn_init_cte_ctxt_ucfg_weak>:
1005d220:	4770      	bx	lr

1005d222 <LLC_cte_request_procedure_ucfg_weak>:
1005d222:	2000      	movs	r0, #0
1005d224:	4770      	bx	lr

1005d226 <LLC_connection_cte_response_pause_resume_ucfg_weak>:
1005d226:	4770      	bx	lr

1005d228 <LLC_connection_cte_response_disable_ucfg_weak>:
1005d228:	4770      	bx	lr

1005d22a <llc_cte_process_rx_cte_ucfg_weak>:
1005d22a:	4770      	bx	lr

1005d22c <LL_encryption>:
1005d22c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005d22e:	b08d      	sub	sp, #52	@ 0x34
1005d230:	9309      	str	r3, [sp, #36]	@ 0x24
1005d232:	4617      	mov	r7, r2
1005d234:	460d      	mov	r5, r1
1005d236:	4606      	mov	r6, r0
1005d238:	f7fe fdbb 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005d23c:	4604      	mov	r4, r0
1005d23e:	9608      	str	r6, [sp, #32]
1005d240:	4630      	mov	r0, r6
1005d242:	f7fc fefd 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005d246:	4603      	mov	r3, r0
1005d248:	2f05      	cmp	r7, #5
1005d24a:	d107      	bne.n	1005d25c <LL_encryption+0x30>
1005d24c:	213d      	movs	r1, #61	@ 0x3d
1005d24e:	4618      	mov	r0, r3
1005d250:	f7fd fdda 	bl	1005ae08 <llc_conn_disconnect_link_from_cpf>
1005d254:	27ff      	movs	r7, #255	@ 0xff
1005d256:	4638      	mov	r0, r7
1005d258:	b00d      	add	sp, #52	@ 0x34
1005d25a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005d25c:	9407      	str	r4, [sp, #28]
1005d25e:	4622      	mov	r2, r4
1005d260:	3228      	adds	r2, #40	@ 0x28
1005d262:	461e      	mov	r6, r3
1005d264:	362c      	adds	r6, #44	@ 0x2c
1005d266:	7830      	ldrb	r0, [r6, #0]
1005d268:	2802      	cmp	r0, #2
1005d26a:	d129      	bne.n	1005d2c0 <LL_encryption+0x94>
1005d26c:	7810      	ldrb	r0, [r2, #0]
1005d26e:	1e40      	subs	r0, r0, #1
1005d270:	27ff      	movs	r7, #255	@ 0xff
1005d272:	280b      	cmp	r0, #11
1005d274:	d8ef      	bhi.n	1005d256 <LL_encryption+0x2a>
1005d276:	0040      	lsls	r0, r0, #1
1005d278:	4478      	add	r0, pc
1005d27a:	8880      	ldrh	r0, [r0, #4]
1005d27c:	0040      	lsls	r0, r0, #1
1005d27e:	4487      	add	pc, r0
1005d280:	00a4000b 	.word	0x00a4000b
1005d284:	00c200a7 	.word	0x00c200a7
1005d288:	00d000cc 	.word	0x00d000cc
1005d28c:	01370133 	.word	0x01370133
1005d290:	016f015f 	.word	0x016f015f
1005d294:	0181017e 	.word	0x0181017e
1005d298:	200a      	movs	r0, #10
1005d29a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d29c:	7088      	strb	r0, [r1, #2]
1005d29e:	27ff      	movs	r7, #255	@ 0xff
1005d2a0:	4638      	mov	r0, r7
1005d2a2:	3004      	adds	r0, #4
1005d2a4:	8008      	strh	r0, [r1, #0]
1005d2a6:	2101      	movs	r1, #1
1005d2a8:	9808      	ldr	r0, [sp, #32]
1005d2aa:	4615      	mov	r5, r2
1005d2ac:	460a      	mov	r2, r1
1005d2ae:	461c      	mov	r4, r3
1005d2b0:	f7fe fd62 	bl	1005bd78 <LL_cpe_set_blocked>
1005d2b4:	4620      	mov	r0, r4
1005d2b6:	f7fd fc13 	bl	1005aae0 <llc_conn_set_tx_acl_blocked>
1005d2ba:	2002      	movs	r0, #2
1005d2bc:	7028      	strb	r0, [r5, #0]
1005d2be:	e7ca      	b.n	1005d256 <LL_encryption+0x2a>
1005d2c0:	2f01      	cmp	r7, #1
1005d2c2:	d12e      	bne.n	1005d322 <LL_encryption+0xf6>
1005d2c4:	2000      	movs	r0, #0
1005d2c6:	7050      	strb	r0, [r2, #1]
1005d2c8:	9206      	str	r2, [sp, #24]
1005d2ca:	2500      	movs	r5, #0
1005d2cc:	461e      	mov	r6, r3
1005d2ce:	4618      	mov	r0, r3
1005d2d0:	4629      	mov	r1, r5
1005d2d2:	f7fd f951 	bl	1005a578 <llc_conn_get_enc_on>
1005d2d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d2d8:	7889      	ldrb	r1, [r1, #2]
1005d2da:	2903      	cmp	r1, #3
1005d2dc:	d157      	bne.n	1005d38e <LL_encryption+0x162>
1005d2de:	2800      	cmp	r0, #0
1005d2e0:	4633      	mov	r3, r6
1005d2e2:	9f07      	ldr	r7, [sp, #28]
1005d2e4:	d1b2      	bne.n	1005d24c <LL_encryption+0x20>
1005d2e6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d2e8:	1ce0      	adds	r0, r4, #3
1005d2ea:	4639      	mov	r1, r7
1005d2ec:	3130      	adds	r1, #48	@ 0x30
1005d2ee:	2208      	movs	r2, #8
1005d2f0:	9205      	str	r2, [sp, #20]
1005d2f2:	4b19      	ldr	r3, [pc, #100]	@ (1005d358 <LL_encryption+0x12c>)
1005d2f4:	4798      	blx	r3
1005d2f6:	4620      	mov	r0, r4
1005d2f8:	300b      	adds	r0, #11
1005d2fa:	4639      	mov	r1, r7
1005d2fc:	312e      	adds	r1, #46	@ 0x2e
1005d2fe:	2202      	movs	r2, #2
1005d300:	4b15      	ldr	r3, [pc, #84]	@ (1005d358 <LL_encryption+0x12c>)
1005d302:	4798      	blx	r3
1005d304:	4620      	mov	r0, r4
1005d306:	300d      	adds	r0, #13
1005d308:	4639      	mov	r1, r7
1005d30a:	9a05      	ldr	r2, [sp, #20]
1005d30c:	4b12      	ldr	r3, [pc, #72]	@ (1005d358 <LL_encryption+0x12c>)
1005d30e:	4798      	blx	r3
1005d310:	3415      	adds	r4, #21
1005d312:	3720      	adds	r7, #32
1005d314:	2204      	movs	r2, #4
1005d316:	4620      	mov	r0, r4
1005d318:	4639      	mov	r1, r7
1005d31a:	4b0f      	ldr	r3, [pc, #60]	@ (1005d358 <LL_encryption+0x12c>)
1005d31c:	4798      	blx	r3
1005d31e:	2005      	movs	r0, #5
1005d320:	e03b      	b.n	1005d39a <LL_encryption+0x16e>
1005d322:	7850      	ldrb	r0, [r2, #1]
1005d324:	27ff      	movs	r7, #255	@ 0xff
1005d326:	280d      	cmp	r0, #13
1005d328:	d895      	bhi.n	1005d256 <LL_encryption+0x2a>
1005d32a:	9705      	str	r7, [sp, #20]
1005d32c:	2111      	movs	r1, #17
1005d32e:	0109      	lsls	r1, r1, #4
1005d330:	185f      	adds	r7, r3, r1
1005d332:	0040      	lsls	r0, r0, #1
1005d334:	4478      	add	r0, pc
1005d336:	8880      	ldrh	r0, [r0, #4]
1005d338:	0040      	lsls	r0, r0, #1
1005d33a:	4487      	add	pc, r0
1005d33c:	0010000f 	.word	0x0010000f
1005d340:	016d0165 	.word	0x016d0165
1005d344:	019b0176 	.word	0x019b0176
1005d348:	022001d6 	.word	0x022001d6
1005d34c:	024001e9 	.word	0x024001e9
1005d350:	01fe01ed 	.word	0x01fe01ed
1005d354:	02340214 	.word	0x02340214
1005d358:	10062b99 	.word	0x10062b99
1005d35c:	e7b4      	b.n	1005d2c8 <LL_encryption+0x9c>
1005d35e:	200b      	movs	r0, #11
1005d360:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d362:	7088      	strb	r0, [r1, #2]
1005d364:	2002      	movs	r0, #2
1005d366:	7050      	strb	r0, [r2, #1]
1005d368:	27ff      	movs	r7, #255	@ 0xff
1005d36a:	4638      	mov	r0, r7
1005d36c:	3004      	adds	r0, #4
1005d36e:	8008      	strh	r0, [r1, #0]
1005d370:	2400      	movs	r4, #0
1005d372:	2201      	movs	r2, #1
1005d374:	9808      	ldr	r0, [sp, #32]
1005d376:	4621      	mov	r1, r4
1005d378:	461d      	mov	r5, r3
1005d37a:	f7fe fcfd 	bl	1005bd78 <LL_cpe_set_blocked>
1005d37e:	4628      	mov	r0, r5
1005d380:	f7fd fbae 	bl	1005aae0 <llc_conn_set_tx_acl_blocked>
1005d384:	4628      	mov	r0, r5
1005d386:	4621      	mov	r1, r4
1005d388:	f7fd fb99 	bl	1005aabe <llc_conn_set_stop_enc>
1005d38c:	e763      	b.n	1005d256 <LL_encryption+0x2a>
1005d38e:	2801      	cmp	r0, #1
1005d390:	4633      	mov	r3, r6
1005d392:	d000      	beq.n	1005d396 <LL_encryption+0x16a>
1005d394:	e75a      	b.n	1005d24c <LL_encryption+0x20>
1005d396:	2501      	movs	r5, #1
1005d398:	4628      	mov	r0, r5
1005d39a:	9f06      	ldr	r7, [sp, #24]
1005d39c:	7078      	strb	r0, [r7, #1]
1005d39e:	713d      	strb	r5, [r7, #4]
1005d3a0:	2400      	movs	r4, #0
1005d3a2:	9d08      	ldr	r5, [sp, #32]
1005d3a4:	4628      	mov	r0, r5
1005d3a6:	4621      	mov	r1, r4
1005d3a8:	4622      	mov	r2, r4
1005d3aa:	f7fe fce5 	bl	1005bd78 <LL_cpe_set_blocked>
1005d3ae:	4630      	mov	r0, r6
1005d3b0:	f7fd fb6c 	bl	1005aa8c <llc_conn_set_rx_acl_blocked>
1005d3b4:	4628      	mov	r0, r5
1005d3b6:	4621      	mov	r1, r4
1005d3b8:	f7fe fcee 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005d3bc:	2201      	movs	r2, #1
1005d3be:	4628      	mov	r0, r5
1005d3c0:	4621      	mov	r1, r4
1005d3c2:	4623      	mov	r3, r4
1005d3c4:	f7fe fc9f 	bl	1005bd06 <LL_cpe_set_active>
1005d3c8:	e744      	b.n	1005d254 <LL_encryption+0x28>
1005d3ca:	2003      	movs	r0, #3
1005d3cc:	7010      	strb	r0, [r2, #0]
1005d3ce:	e121      	b.n	1005d614 <LL_encryption+0x3e8>
1005d3d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d3d2:	7880      	ldrb	r0, [r0, #2]
1005d3d4:	280b      	cmp	r0, #11
1005d3d6:	d000      	beq.n	1005d3da <LL_encryption+0x1ae>
1005d3d8:	e738      	b.n	1005d24c <LL_encryption+0x20>
1005d3da:	2004      	movs	r0, #4
1005d3dc:	7010      	strb	r0, [r2, #0]
1005d3de:	2102      	movs	r1, #2
1005d3e0:	4618      	mov	r0, r3
1005d3e2:	461d      	mov	r5, r3
1005d3e4:	f7fd fb6b 	bl	1005aabe <llc_conn_set_stop_enc>
1005d3e8:	2401      	movs	r4, #1
1005d3ea:	9e08      	ldr	r6, [sp, #32]
1005d3ec:	4630      	mov	r0, r6
1005d3ee:	4621      	mov	r1, r4
1005d3f0:	f7fe fcd2 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005d3f4:	2200      	movs	r2, #0
1005d3f6:	4630      	mov	r0, r6
1005d3f8:	4621      	mov	r1, r4
1005d3fa:	f7fe fcbd 	bl	1005bd78 <LL_cpe_set_blocked>
1005d3fe:	4628      	mov	r0, r5
1005d400:	f7fd fb44 	bl	1005aa8c <llc_conn_set_rx_acl_blocked>
1005d404:	e727      	b.n	1005d256 <LL_encryption+0x2a>
1005d406:	200b      	movs	r0, #11
1005d408:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d40a:	7088      	strb	r0, [r1, #2]
1005d40c:	2005      	movs	r0, #5
1005d40e:	7010      	strb	r0, [r2, #0]
1005d410:	27ff      	movs	r7, #255	@ 0xff
1005d412:	4638      	mov	r0, r7
1005d414:	3004      	adds	r0, #4
1005d416:	8008      	strh	r0, [r1, #0]
1005d418:	e71d      	b.n	1005d256 <LL_encryption+0x2a>
1005d41a:	2006      	movs	r0, #6
1005d41c:	7010      	strb	r0, [r2, #0]
1005d41e:	2101      	movs	r1, #1
1005d420:	e1d6      	b.n	1005d7d0 <LL_encryption+0x5a4>
1005d422:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d424:	1ca0      	adds	r0, r4, #2
1005d426:	9001      	str	r0, [sp, #4]
1005d428:	9705      	str	r7, [sp, #20]
1005d42a:	2700      	movs	r7, #0
1005d42c:	4dfd      	ldr	r5, [pc, #1012]	@ (1005d824 <LL_encryption+0x5f8>)
1005d42e:	4638      	mov	r0, r7
1005d430:	9304      	str	r3, [sp, #16]
1005d432:	4616      	mov	r6, r2
1005d434:	47a8      	blx	r5
1005d436:	9002      	str	r0, [sp, #8]
1005d438:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d43a:	4638      	mov	r0, r7
1005d43c:	47a8      	blx	r5
1005d43e:	900c      	str	r0, [sp, #48]	@ 0x30
1005d440:	4638      	mov	r0, r7
1005d442:	9f05      	ldr	r7, [sp, #20]
1005d444:	47a8      	blx	r5
1005d446:	9003      	str	r0, [sp, #12]
1005d448:	49fc      	ldr	r1, [pc, #1008]	@ (1005d83c <__arm_cp.0_10>)
1005d44a:	8021      	strh	r1, [r4, #0]
1005d44c:	900a      	str	r0, [sp, #40]	@ 0x28
1005d44e:	4635      	mov	r5, r6
1005d450:	7a30      	ldrb	r0, [r6, #8]
1005d452:	0200      	lsls	r0, r0, #8
1005d454:	7a71      	ldrb	r1, [r6, #9]
1005d456:	0409      	lsls	r1, r1, #16
1005d458:	1840      	adds	r0, r0, r1
1005d45a:	7ab1      	ldrb	r1, [r6, #10]
1005d45c:	9606      	str	r6, [sp, #24]
1005d45e:	0609      	lsls	r1, r1, #24
1005d460:	1840      	adds	r0, r0, r1
1005d462:	1cc0      	adds	r0, r0, #3
1005d464:	9c01      	ldr	r4, [sp, #4]
1005d466:	6020      	str	r0, [r4, #0]
1005d468:	9e07      	ldr	r6, [sp, #28]
1005d46a:	4630      	mov	r0, r6
1005d46c:	3033      	adds	r0, #51	@ 0x33
1005d46e:	f000 fa25 	bl	1005d8bc <le4ByteToInt32>
1005d472:	6060      	str	r0, [r4, #4]
1005d474:	9802      	ldr	r0, [sp, #8]
1005d476:	0600      	lsls	r0, r0, #24
1005d478:	8df1      	ldrh	r1, [r6, #46]	@ 0x2e
1005d47a:	0209      	lsls	r1, r1, #8
1005d47c:	1808      	adds	r0, r1, r0
1005d47e:	7be9      	ldrb	r1, [r5, #15]
1005d480:	1840      	adds	r0, r0, r1
1005d482:	60a0      	str	r0, [r4, #8]
1005d484:	4625      	mov	r5, r4
1005d486:	ac0b      	add	r4, sp, #44	@ 0x2c
1005d488:	1c60      	adds	r0, r4, #1
1005d48a:	f000 fa17 	bl	1005d8bc <le4ByteToInt32>
1005d48e:	60e8      	str	r0, [r5, #12]
1005d490:	9803      	ldr	r0, [sp, #12]
1005d492:	0600      	lsls	r0, r0, #24
1005d494:	7961      	ldrb	r1, [r4, #5]
1005d496:	1840      	adds	r0, r0, r1
1005d498:	79a1      	ldrb	r1, [r4, #6]
1005d49a:	0209      	lsls	r1, r1, #8
1005d49c:	1840      	adds	r0, r0, r1
1005d49e:	79e1      	ldrb	r1, [r4, #7]
1005d4a0:	0409      	lsls	r1, r1, #16
1005d4a2:	1840      	adds	r0, r0, r1
1005d4a4:	6128      	str	r0, [r5, #16]
1005d4a6:	462a      	mov	r2, r5
1005d4a8:	ad0a      	add	r5, sp, #40	@ 0x28
1005d4aa:	7868      	ldrb	r0, [r5, #1]
1005d4ac:	78a9      	ldrb	r1, [r5, #2]
1005d4ae:	0209      	lsls	r1, r1, #8
1005d4b0:	1808      	adds	r0, r1, r0
1005d4b2:	78e9      	ldrb	r1, [r5, #3]
1005d4b4:	0409      	lsls	r1, r1, #16
1005d4b6:	1840      	adds	r0, r0, r1
1005d4b8:	6150      	str	r0, [r2, #20]
1005d4ba:	2208      	movs	r2, #8
1005d4bc:	4620      	mov	r0, r4
1005d4be:	4631      	mov	r1, r6
1005d4c0:	f005 fb6a 	bl	10062b98 <char_copy>
1005d4c4:	3620      	adds	r6, #32
1005d4c6:	2204      	movs	r2, #4
1005d4c8:	4628      	mov	r0, r5
1005d4ca:	4631      	mov	r1, r6
1005d4cc:	f005 fb64 	bl	10062b98 <char_copy>
1005d4d0:	2007      	movs	r0, #7
1005d4d2:	9906      	ldr	r1, [sp, #24]
1005d4d4:	7008      	strb	r0, [r1, #0]
1005d4d6:	2101      	movs	r1, #1
1005d4d8:	9808      	ldr	r0, [sp, #32]
1005d4da:	460a      	mov	r2, r1
1005d4dc:	f7fe fc4c 	bl	1005bd78 <LL_cpe_set_blocked>
1005d4e0:	9804      	ldr	r0, [sp, #16]
1005d4e2:	f7fd fafd 	bl	1005aae0 <llc_conn_set_tx_acl_blocked>
1005d4e6:	e6b6      	b.n	1005d256 <LL_encryption+0x2a>
1005d4e8:	2008      	movs	r0, #8
1005d4ea:	7010      	strb	r0, [r2, #0]
1005d4ec:	2704      	movs	r7, #4
1005d4ee:	e6b2      	b.n	1005d256 <LL_encryption+0x2a>
1005d4f0:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d4f2:	7880      	ldrb	r0, [r0, #2]
1005d4f4:	2811      	cmp	r0, #17
1005d4f6:	d061      	beq.n	1005d5bc <LL_encryption+0x390>
1005d4f8:	2807      	cmp	r0, #7
1005d4fa:	d05f      	beq.n	1005d5bc <LL_encryption+0x390>
1005d4fc:	280d      	cmp	r0, #13
1005d4fe:	d05d      	beq.n	1005d5bc <LL_encryption+0x390>
1005d500:	2804      	cmp	r0, #4
1005d502:	9c07      	ldr	r4, [sp, #28]
1005d504:	d000      	beq.n	1005d508 <LL_encryption+0x2dc>
1005d506:	e6a1      	b.n	1005d24c <LL_encryption+0x20>
1005d508:	2009      	movs	r0, #9
1005d50a:	7010      	strb	r0, [r2, #0]
1005d50c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
1005d50e:	1cf8      	adds	r0, r7, #3
1005d510:	4621      	mov	r1, r4
1005d512:	3108      	adds	r1, #8
1005d514:	2208      	movs	r2, #8
1005d516:	461d      	mov	r5, r3
1005d518:	f005 fb3e 	bl	10062b98 <char_copy>
1005d51c:	370b      	adds	r7, #11
1005d51e:	4621      	mov	r1, r4
1005d520:	3124      	adds	r1, #36	@ 0x24
1005d522:	2204      	movs	r2, #4
1005d524:	4638      	mov	r0, r7
1005d526:	f005 fb37 	bl	10062b98 <char_copy>
1005d52a:	6734      	str	r4, [r6, #112]	@ 0x70
1005d52c:	2101      	movs	r1, #1
1005d52e:	2200      	movs	r2, #0
1005d530:	9808      	ldr	r0, [sp, #32]
1005d532:	f7fe fc21 	bl	1005bd78 <LL_cpe_set_blocked>
1005d536:	4628      	mov	r0, r5
1005d538:	f7fd faa8 	bl	1005aa8c <llc_conn_set_rx_acl_blocked>
1005d53c:	2705      	movs	r7, #5
1005d53e:	e68a      	b.n	1005d256 <LL_encryption+0x2a>
1005d540:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d542:	7880      	ldrb	r0, [r0, #2]
1005d544:	2811      	cmp	r0, #17
1005d546:	d046      	beq.n	1005d5d6 <LL_encryption+0x3aa>
1005d548:	280d      	cmp	r0, #13
1005d54a:	d044      	beq.n	1005d5d6 <LL_encryption+0x3aa>
1005d54c:	2805      	cmp	r0, #5
1005d54e:	d000      	beq.n	1005d552 <LL_encryption+0x326>
1005d550:	e67c      	b.n	1005d24c <LL_encryption+0x20>
1005d552:	4614      	mov	r4, r2
1005d554:	2101      	movs	r1, #1
1005d556:	9808      	ldr	r0, [sp, #32]
1005d558:	f7fe fc1e 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005d55c:	200a      	movs	r0, #10
1005d55e:	e00c      	b.n	1005d57a <LL_encryption+0x34e>
1005d560:	2006      	movs	r0, #6
1005d562:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d564:	7088      	strb	r0, [r1, #2]
1005d566:	27ff      	movs	r7, #255	@ 0xff
1005d568:	4638      	mov	r0, r7
1005d56a:	3004      	adds	r0, #4
1005d56c:	8008      	strh	r0, [r1, #0]
1005d56e:	2102      	movs	r1, #2
1005d570:	4618      	mov	r0, r3
1005d572:	4614      	mov	r4, r2
1005d574:	f7fd fa92 	bl	1005aa9c <llc_conn_set_start_enc>
1005d578:	200b      	movs	r0, #11
1005d57a:	7020      	strb	r0, [r4, #0]
1005d57c:	e66b      	b.n	1005d256 <LL_encryption+0x2a>
1005d57e:	200c      	movs	r0, #12
1005d580:	7010      	strb	r0, [r2, #0]
1005d582:	e0c7      	b.n	1005d714 <LL_encryption+0x4e8>
1005d584:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d586:	7880      	ldrb	r0, [r0, #2]
1005d588:	2806      	cmp	r0, #6
1005d58a:	d000      	beq.n	1005d58e <LL_encryption+0x362>
1005d58c:	e65e      	b.n	1005d24c <LL_encryption+0x20>
1005d58e:	2000      	movs	r0, #0
1005d590:	4615      	mov	r5, r2
1005d592:	7010      	strb	r0, [r2, #0]
1005d594:	48c4      	ldr	r0, [pc, #784]	@ (1005d8a8 <__arm_cp.0_0>)
1005d596:	6800      	ldr	r0, [r0, #0]
1005d598:	212c      	movs	r1, #44	@ 0x2c
1005d59a:	5c40      	ldrb	r0, [r0, r1]
1005d59c:	07c0      	lsls	r0, r0, #31
1005d59e:	0ec1      	lsrs	r1, r0, #27
1005d5a0:	206f      	movs	r0, #111	@ 0x6f
1005d5a2:	43c0      	mvns	r0, r0
1005d5a4:	4048      	eors	r0, r1
1005d5a6:	461c      	mov	r4, r3
1005d5a8:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d5aa:	7929      	ldrb	r1, [r5, #4]
1005d5ac:	b2c0      	uxtb	r0, r0
1005d5ae:	2901      	cmp	r1, #1
1005d5b0:	d000      	beq.n	1005d5b4 <LL_encryption+0x388>
1005d5b2:	e111      	b.n	1005d7d8 <LL_encryption+0x5ac>
1005d5b4:	4611      	mov	r1, r2
1005d5b6:	f000 f9bf 	bl	1005d938 <hci_encryption_key_refresh_complete_event_push>
1005d5ba:	e111      	b.n	1005d7e0 <LL_encryption+0x5b4>
1005d5bc:	48ba      	ldr	r0, [pc, #744]	@ (1005d8a8 <__arm_cp.0_0>)
1005d5be:	6800      	ldr	r0, [r0, #0]
1005d5c0:	212c      	movs	r1, #44	@ 0x2c
1005d5c2:	5c40      	ldrb	r0, [r0, r1]
1005d5c4:	0100      	lsls	r0, r0, #4
1005d5c6:	43c0      	mvns	r0, r0
1005d5c8:	2180      	movs	r1, #128	@ 0x80
1005d5ca:	4301      	orrs	r1, r0
1005d5cc:	2090      	movs	r0, #144	@ 0x90
1005d5ce:	4008      	ands	r0, r1
1005d5d0:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d5d2:	211a      	movs	r1, #26
1005d5d4:	e00b      	b.n	1005d5ee <LL_encryption+0x3c2>
1005d5d6:	48b4      	ldr	r0, [pc, #720]	@ (1005d8a8 <__arm_cp.0_0>)
1005d5d8:	6800      	ldr	r0, [r0, #0]
1005d5da:	212c      	movs	r1, #44	@ 0x2c
1005d5dc:	5c40      	ldrb	r0, [r0, r1]
1005d5de:	0100      	lsls	r0, r0, #4
1005d5e0:	43c0      	mvns	r0, r0
1005d5e2:	2180      	movs	r1, #128	@ 0x80
1005d5e4:	4301      	orrs	r1, r0
1005d5e6:	2090      	movs	r0, #144	@ 0x90
1005d5e8:	4008      	ands	r0, r1
1005d5ea:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d5ec:	2106      	movs	r1, #6
1005d5ee:	461c      	mov	r4, r3
1005d5f0:	2300      	movs	r3, #0
1005d5f2:	f000 f96f 	bl	1005d8d4 <hci_encryption_change_event_push>
1005d5f6:	4620      	mov	r0, r4
1005d5f8:	f7fc ff05 	bl	1005a406 <llc_conn_clr_tx_acl_blocked>
1005d5fc:	4620      	mov	r0, r4
1005d5fe:	f7fc fef1 	bl	1005a3e4 <llc_conn_clr_rx_acl_blocked>
1005d602:	2101      	movs	r1, #1
1005d604:	9808      	ldr	r0, [sp, #32]
1005d606:	e0f4      	b.n	1005d7f2 <LL_encryption+0x5c6>
1005d608:	2003      	movs	r0, #3
1005d60a:	7050      	strb	r0, [r2, #1]
1005d60c:	2101      	movs	r1, #1
1005d60e:	4618      	mov	r0, r3
1005d610:	f7fd fa55 	bl	1005aabe <llc_conn_set_stop_enc>
1005d614:	270b      	movs	r7, #11
1005d616:	e61e      	b.n	1005d256 <LL_encryption+0x2a>
1005d618:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d61a:	7880      	ldrb	r0, [r0, #2]
1005d61c:	280b      	cmp	r0, #11
1005d61e:	d000      	beq.n	1005d622 <LL_encryption+0x3f6>
1005d620:	e614      	b.n	1005d24c <LL_encryption+0x20>
1005d622:	2004      	movs	r0, #4
1005d624:	7050      	strb	r0, [r2, #1]
1005d626:	2703      	movs	r7, #3
1005d628:	e615      	b.n	1005d256 <LL_encryption+0x2a>
1005d62a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d62c:	7880      	ldrb	r0, [r0, #2]
1005d62e:	2803      	cmp	r0, #3
1005d630:	9f05      	ldr	r7, [sp, #20]
1005d632:	9e07      	ldr	r6, [sp, #28]
1005d634:	d000      	beq.n	1005d638 <LL_encryption+0x40c>
1005d636:	e609      	b.n	1005d24c <LL_encryption+0x20>
1005d638:	2005      	movs	r0, #5
1005d63a:	7050      	strb	r0, [r2, #1]
1005d63c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d63e:	1ce0      	adds	r0, r4, #3
1005d640:	4631      	mov	r1, r6
1005d642:	3130      	adds	r1, #48	@ 0x30
1005d644:	2508      	movs	r5, #8
1005d646:	462a      	mov	r2, r5
1005d648:	4b9b      	ldr	r3, [pc, #620]	@ (1005d8b8 <__arm_cp.0_4>)
1005d64a:	4798      	blx	r3
1005d64c:	4620      	mov	r0, r4
1005d64e:	300b      	adds	r0, #11
1005d650:	4631      	mov	r1, r6
1005d652:	312e      	adds	r1, #46	@ 0x2e
1005d654:	2202      	movs	r2, #2
1005d656:	4b98      	ldr	r3, [pc, #608]	@ (1005d8b8 <__arm_cp.0_4>)
1005d658:	4798      	blx	r3
1005d65a:	4620      	mov	r0, r4
1005d65c:	300d      	adds	r0, #13
1005d65e:	4631      	mov	r1, r6
1005d660:	462a      	mov	r2, r5
1005d662:	4d95      	ldr	r5, [pc, #596]	@ (1005d8b8 <__arm_cp.0_4>)
1005d664:	47a8      	blx	r5
1005d666:	3415      	adds	r4, #21
1005d668:	3620      	adds	r6, #32
1005d66a:	2204      	movs	r2, #4
1005d66c:	4620      	mov	r0, r4
1005d66e:	4631      	mov	r1, r6
1005d670:	47a8      	blx	r5
1005d672:	e0ac      	b.n	1005d7ce <LL_encryption+0x5a2>
1005d674:	2400      	movs	r4, #0
1005d676:	9403      	str	r4, [sp, #12]
1005d678:	4d8e      	ldr	r5, [pc, #568]	@ (1005d8b4 <__arm_cp.0_3>)
1005d67a:	4620      	mov	r0, r4
1005d67c:	9304      	str	r3, [sp, #16]
1005d67e:	9206      	str	r2, [sp, #24]
1005d680:	47a8      	blx	r5
1005d682:	900b      	str	r0, [sp, #44]	@ 0x2c
1005d684:	4620      	mov	r0, r4
1005d686:	47a8      	blx	r5
1005d688:	900c      	str	r0, [sp, #48]	@ 0x30
1005d68a:	4620      	mov	r0, r4
1005d68c:	47a8      	blx	r5
1005d68e:	2604      	movs	r6, #4
1005d690:	9c09      	ldr	r4, [sp, #36]	@ 0x24
1005d692:	70a6      	strb	r6, [r4, #2]
1005d694:	210d      	movs	r1, #13
1005d696:	7061      	strb	r1, [r4, #1]
1005d698:	2103      	movs	r1, #3
1005d69a:	7021      	strb	r1, [r4, #0]
1005d69c:	900a      	str	r0, [sp, #40]	@ 0x28
1005d69e:	1ce1      	adds	r1, r4, #3
1005d6a0:	ad0b      	add	r5, sp, #44	@ 0x2c
1005d6a2:	2208      	movs	r2, #8
1005d6a4:	9202      	str	r2, [sp, #8]
1005d6a6:	4b84      	ldr	r3, [pc, #528]	@ (1005d8b8 <__arm_cp.0_4>)
1005d6a8:	4628      	mov	r0, r5
1005d6aa:	4798      	blx	r3
1005d6ac:	340b      	adds	r4, #11
1005d6ae:	af0a      	add	r7, sp, #40	@ 0x28
1005d6b0:	4638      	mov	r0, r7
1005d6b2:	4621      	mov	r1, r4
1005d6b4:	4632      	mov	r2, r6
1005d6b6:	4b80      	ldr	r3, [pc, #512]	@ (1005d8b8 <__arm_cp.0_4>)
1005d6b8:	4798      	blx	r3
1005d6ba:	9c07      	ldr	r4, [sp, #28]
1005d6bc:	4621      	mov	r1, r4
1005d6be:	3108      	adds	r1, #8
1005d6c0:	4628      	mov	r0, r5
1005d6c2:	9a02      	ldr	r2, [sp, #8]
1005d6c4:	4d7c      	ldr	r5, [pc, #496]	@ (1005d8b8 <__arm_cp.0_4>)
1005d6c6:	47a8      	blx	r5
1005d6c8:	3424      	adds	r4, #36	@ 0x24
1005d6ca:	4638      	mov	r0, r7
1005d6cc:	4621      	mov	r1, r4
1005d6ce:	4632      	mov	r2, r6
1005d6d0:	47a8      	blx	r5
1005d6d2:	2006      	movs	r0, #6
1005d6d4:	9906      	ldr	r1, [sp, #24]
1005d6d6:	7048      	strb	r0, [r1, #1]
1005d6d8:	2201      	movs	r2, #1
1005d6da:	9808      	ldr	r0, [sp, #32]
1005d6dc:	9903      	ldr	r1, [sp, #12]
1005d6de:	f7fe fb4b 	bl	1005bd78 <LL_cpe_set_blocked>
1005d6e2:	9804      	ldr	r0, [sp, #16]
1005d6e4:	f7fd f9fc 	bl	1005aae0 <llc_conn_set_tx_acl_blocked>
1005d6e8:	e0db      	b.n	1005d8a2 <__arm_cp.0_10+0x66>
1005d6ea:	4870      	ldr	r0, [pc, #448]	@ (1005d8ac <__arm_cp.0_1>)
1005d6ec:	6800      	ldr	r0, [r0, #0]
1005d6ee:	213d      	movs	r1, #61	@ 0x3d
1005d6f0:	5c41      	ldrb	r1, [r0, r1]
1005d6f2:	0689      	lsls	r1, r1, #26
1005d6f4:	d504      	bpl.n	1005d700 <LL_encryption+0x4d4>
1005d6f6:	303d      	adds	r0, #61	@ 0x3d
1005d6f8:	7a40      	ldrb	r0, [r0, #9]
1005d6fa:	06c0      	lsls	r0, r0, #27
1005d6fc:	d500      	bpl.n	1005d700 <LL_encryption+0x4d4>
1005d6fe:	e093      	b.n	1005d828 <LL_encryption+0x5fc>
1005d700:	2100      	movs	r1, #0
1005d702:	9808      	ldr	r0, [sp, #32]
1005d704:	4614      	mov	r4, r2
1005d706:	f7fe fb47 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005d70a:	4620      	mov	r0, r4
1005d70c:	270d      	movs	r7, #13
1005d70e:	e0c7      	b.n	1005d8a0 <__arm_cp.0_10+0x64>
1005d710:	2009      	movs	r0, #9
1005d712:	7050      	strb	r0, [r2, #1]
1005d714:	2706      	movs	r7, #6
1005d716:	e59e      	b.n	1005d256 <LL_encryption+0x2a>
1005d718:	2006      	movs	r0, #6
1005d71a:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d71c:	7088      	strb	r0, [r1, #2]
1005d71e:	200b      	movs	r0, #11
1005d720:	7050      	strb	r0, [r2, #1]
1005d722:	25ff      	movs	r5, #255	@ 0xff
1005d724:	4628      	mov	r0, r5
1005d726:	3004      	adds	r0, #4
1005d728:	8008      	strh	r0, [r1, #0]
1005d72a:	2401      	movs	r4, #1
1005d72c:	4618      	mov	r0, r3
1005d72e:	4621      	mov	r1, r4
1005d730:	f7fd f9b4 	bl	1005aa9c <llc_conn_set_start_enc>
1005d734:	703c      	strb	r4, [r7, #0]
1005d736:	462f      	mov	r7, r5
1005d738:	e58d      	b.n	1005d256 <LL_encryption+0x2a>
1005d73a:	2400      	movs	r4, #0
1005d73c:	7054      	strb	r4, [r2, #1]
1005d73e:	485a      	ldr	r0, [pc, #360]	@ (1005d8a8 <__arm_cp.0_0>)
1005d740:	6800      	ldr	r0, [r0, #0]
1005d742:	212c      	movs	r1, #44	@ 0x2c
1005d744:	5c40      	ldrb	r0, [r0, r1]
1005d746:	07c0      	lsls	r0, r0, #31
1005d748:	0ec1      	lsrs	r1, r0, #27
1005d74a:	206f      	movs	r0, #111	@ 0x6f
1005d74c:	43c0      	mvns	r0, r0
1005d74e:	4048      	eors	r0, r1
1005d750:	4611      	mov	r1, r2
1005d752:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
1005d754:	7909      	ldrb	r1, [r1, #4]
1005d756:	b2c0      	uxtb	r0, r0
1005d758:	2901      	cmp	r1, #1
1005d75a:	d14e      	bne.n	1005d7fa <LL_encryption+0x5ce>
1005d75c:	4611      	mov	r1, r2
1005d75e:	461e      	mov	r6, r3
1005d760:	f000 f8ea 	bl	1005d938 <hci_encryption_key_refresh_complete_event_push>
1005d764:	e04e      	b.n	1005d804 <LL_encryption+0x5d8>
1005d766:	4618      	mov	r0, r3
1005d768:	4615      	mov	r5, r2
1005d76a:	f7fc fe4c 	bl	1005a406 <llc_conn_clr_tx_acl_blocked>
1005d76e:	2400      	movs	r4, #0
1005d770:	2201      	movs	r2, #1
1005d772:	9808      	ldr	r0, [sp, #32]
1005d774:	4621      	mov	r1, r4
1005d776:	f7fe fadd 	bl	1005bd34 <LL_cpe_clr_active>
1005d77a:	706c      	strb	r4, [r5, #1]
1005d77c:	e091      	b.n	1005d8a2 <__arm_cp.0_10+0x66>
1005d77e:	78d0      	ldrb	r0, [r2, #3]
1005d780:	2801      	cmp	r0, #1
1005d782:	d110      	bne.n	1005d7a6 <LL_encryption+0x57a>
1005d784:	2005      	movs	r0, #5
1005d786:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005d788:	7088      	strb	r0, [r1, #2]
1005d78a:	9807      	ldr	r0, [sp, #28]
1005d78c:	6730      	str	r0, [r6, #112]	@ 0x70
1005d78e:	27ff      	movs	r7, #255	@ 0xff
1005d790:	4638      	mov	r0, r7
1005d792:	3004      	adds	r0, #4
1005d794:	8008      	strh	r0, [r1, #0]
1005d796:	2100      	movs	r1, #0
1005d798:	4618      	mov	r0, r3
1005d79a:	4614      	mov	r4, r2
1005d79c:	f7fd f97e 	bl	1005aa9c <llc_conn_set_start_enc>
1005d7a0:	2008      	movs	r0, #8
1005d7a2:	7060      	strb	r0, [r4, #1]
1005d7a4:	e557      	b.n	1005d256 <LL_encryption+0x2a>
1005d7a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d7a8:	4619      	mov	r1, r3
1005d7aa:	461c      	mov	r4, r3
1005d7ac:	4615      	mov	r5, r2
1005d7ae:	f000 f8f5 	bl	1005d99c <llc_enc_prepare_reject>
1005d7b2:	200c      	movs	r0, #12
1005d7b4:	7068      	strb	r0, [r5, #1]
1005d7b6:	4620      	mov	r0, r4
1005d7b8:	f7fc fe14 	bl	1005a3e4 <llc_conn_clr_rx_acl_blocked>
1005d7bc:	e071      	b.n	1005d8a2 <__arm_cp.0_10+0x66>
1005d7be:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d7c0:	7880      	ldrb	r0, [r0, #2]
1005d7c2:	2806      	cmp	r0, #6
1005d7c4:	9f05      	ldr	r7, [sp, #20]
1005d7c6:	d000      	beq.n	1005d7ca <LL_encryption+0x59e>
1005d7c8:	e540      	b.n	1005d24c <LL_encryption+0x20>
1005d7ca:	200a      	movs	r0, #10
1005d7cc:	7050      	strb	r0, [r2, #1]
1005d7ce:	2100      	movs	r1, #0
1005d7d0:	9808      	ldr	r0, [sp, #32]
1005d7d2:	f7fe fae1 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005d7d6:	e53e      	b.n	1005d256 <LL_encryption+0x2a>
1005d7d8:	2100      	movs	r1, #0
1005d7da:	2301      	movs	r3, #1
1005d7dc:	f000 f87a 	bl	1005d8d4 <hci_encryption_change_event_push>
1005d7e0:	9d08      	ldr	r5, [sp, #32]
1005d7e2:	4620      	mov	r0, r4
1005d7e4:	f7fc fe0f 	bl	1005a406 <llc_conn_clr_tx_acl_blocked>
1005d7e8:	4620      	mov	r0, r4
1005d7ea:	f7fc fdfb 	bl	1005a3e4 <llc_conn_clr_rx_acl_blocked>
1005d7ee:	2101      	movs	r1, #1
1005d7f0:	4628      	mov	r0, r5
1005d7f2:	460a      	mov	r2, r1
1005d7f4:	f7fe fa9e 	bl	1005bd34 <LL_cpe_clr_active>
1005d7f8:	e52d      	b.n	1005d256 <LL_encryption+0x2a>
1005d7fa:	2100      	movs	r1, #0
1005d7fc:	461e      	mov	r6, r3
1005d7fe:	2301      	movs	r3, #1
1005d800:	f000 f868 	bl	1005d8d4 <hci_encryption_change_event_push>
1005d804:	4630      	mov	r0, r6
1005d806:	9e08      	ldr	r6, [sp, #32]
1005d808:	703c      	strb	r4, [r7, #0]
1005d80a:	4604      	mov	r4, r0
1005d80c:	f7fc fdfb 	bl	1005a406 <llc_conn_clr_tx_acl_blocked>
1005d810:	4620      	mov	r0, r4
1005d812:	f7fc fde7 	bl	1005a3e4 <llc_conn_clr_rx_acl_blocked>
1005d816:	2201      	movs	r2, #1
1005d818:	4630      	mov	r0, r6
1005d81a:	4629      	mov	r1, r5
1005d81c:	f7fe fa8a 	bl	1005bd34 <LL_cpe_clr_active>
1005d820:	e03f      	b.n	1005d8a2 <__arm_cp.0_10+0x66>
1005d822:	46c0      	nop			@ (mov r8, r8)
1005d824:	10062ecb 	.word	0x10062ecb
1005d828:	481f      	ldr	r0, [pc, #124]	@ (1005d8a8 <__arm_cp.0_0>)
1005d82a:	6800      	ldr	r0, [r0, #0]
1005d82c:	212c      	movs	r1, #44	@ 0x2c
1005d82e:	5c40      	ldrb	r0, [r0, r1]
1005d830:	07c0      	lsls	r0, r0, #31
1005d832:	0ec0      	lsrs	r0, r0, #27
1005d834:	9206      	str	r2, [sp, #24]
1005d836:	d003      	beq.n	1005d840 <__arm_cp.0_10+0x4>
1005d838:	2219      	movs	r2, #25
1005d83a:	e002      	b.n	1005d842 <__arm_cp.0_10+0x6>

1005d83c <__arm_cp.0_10>:
1005d83c:	00001703 	.word	0x00001703
1005d840:	220a      	movs	r2, #10
1005d842:	9d07      	ldr	r5, [sp, #28]
1005d844:	216f      	movs	r1, #111	@ 0x6f
1005d846:	43c9      	mvns	r1, r1
1005d848:	4048      	eors	r0, r1
1005d84a:	b2c1      	uxtb	r1, r0
1005d84c:	8de8      	ldrh	r0, [r5, #46]	@ 0x2e
1005d84e:	9007      	str	r0, [sp, #28]
1005d850:	8f5c      	ldrh	r4, [r3, #58]	@ 0x3a
1005d852:	4817      	ldr	r0, [pc, #92]	@ (1005d8b0 <__arm_cp.0_2>)
1005d854:	6800      	ldr	r0, [r0, #0]
1005d856:	6900      	ldr	r0, [r0, #16]
1005d858:	2304      	movs	r3, #4
1005d85a:	9109      	str	r1, [sp, #36]	@ 0x24
1005d85c:	9308      	str	r3, [sp, #32]
1005d85e:	f7f7 fcc9 	bl	100551f4 <aci_event_fifo_push_header>
1005d862:	2707      	movs	r7, #7
1005d864:	2800      	cmp	r0, #0
1005d866:	d01a      	beq.n	1005d89e <__arm_cp.0_10+0x62>
1005d868:	4606      	mov	r6, r0
1005d86a:	7204      	strb	r4, [r0, #8]
1005d86c:	0a20      	lsrs	r0, r4, #8
1005d86e:	7270      	strb	r0, [r6, #9]
1005d870:	4630      	mov	r0, r6
1005d872:	300a      	adds	r0, #10
1005d874:	3530      	adds	r5, #48	@ 0x30
1005d876:	2208      	movs	r2, #8
1005d878:	4629      	mov	r1, r5
1005d87a:	f7f4 ff6f 	bl	1005275c <BLEPLAT_MemCpy>
1005d87e:	9907      	ldr	r1, [sp, #28]
1005d880:	0a08      	lsrs	r0, r1, #8
1005d882:	74f0      	strb	r0, [r6, #19]
1005d884:	74b1      	strb	r1, [r6, #18]
1005d886:	2005      	movs	r0, #5
1005d888:	71f0      	strb	r0, [r6, #7]
1005d88a:	200d      	movs	r0, #13
1005d88c:	71b0      	strb	r0, [r6, #6]
1005d88e:	203e      	movs	r0, #62	@ 0x3e
1005d890:	7170      	strb	r0, [r6, #5]
1005d892:	9808      	ldr	r0, [sp, #32]
1005d894:	7130      	strb	r0, [r6, #4]
1005d896:	9809      	ldr	r0, [sp, #36]	@ 0x24
1005d898:	4631      	mov	r1, r6
1005d89a:	f7f7 fd48 	bl	1005532e <aci_event_fifo_push>
1005d89e:	9806      	ldr	r0, [sp, #24]
1005d8a0:	7047      	strb	r7, [r0, #1]
1005d8a2:	9f05      	ldr	r7, [sp, #20]
1005d8a4:	e4d7      	b.n	1005d256 <LL_encryption+0x2a>
1005d8a6:	46c0      	nop			@ (mov r8, r8)

1005d8a8 <__arm_cp.0_0>:
1005d8a8:	20002a7c 	.word	0x20002a7c

1005d8ac <__arm_cp.0_1>:
1005d8ac:	20002ad0 	.word	0x20002ad0

1005d8b0 <__arm_cp.0_2>:
1005d8b0:	20002a80 	.word	0x20002a80

1005d8b4 <__arm_cp.0_3>:
1005d8b4:	10062ecb 	.word	0x10062ecb

1005d8b8 <__arm_cp.0_4>:
1005d8b8:	10062b99 	.word	0x10062b99

1005d8bc <le4ByteToInt32>:
1005d8bc:	7801      	ldrb	r1, [r0, #0]
1005d8be:	7842      	ldrb	r2, [r0, #1]
1005d8c0:	0212      	lsls	r2, r2, #8
1005d8c2:	1851      	adds	r1, r2, r1
1005d8c4:	7882      	ldrb	r2, [r0, #2]
1005d8c6:	0412      	lsls	r2, r2, #16
1005d8c8:	1889      	adds	r1, r1, r2
1005d8ca:	78c0      	ldrb	r0, [r0, #3]
1005d8cc:	0600      	lsls	r0, r0, #24
1005d8ce:	1808      	adds	r0, r1, r0
1005d8d0:	4770      	bx	lr
	...

1005d8d4 <hci_encryption_change_event_push>:
1005d8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d8d6:	461e      	mov	r6, r3
1005d8d8:	4615      	mov	r5, r2
1005d8da:	460f      	mov	r7, r1
1005d8dc:	4604      	mov	r4, r0
1005d8de:	06c0      	lsls	r0, r0, #27
1005d8e0:	d406      	bmi.n	1005d8f0 <hci_encryption_change_event_push+0x1c>
1005d8e2:	4813      	ldr	r0, [pc, #76]	@ (1005d930 <__arm_cp.2_0>)
1005d8e4:	6800      	ldr	r0, [r0, #0]
1005d8e6:	2136      	movs	r1, #54	@ 0x36
1005d8e8:	5640      	ldrsb	r0, [r0, r1]
1005d8ea:	2800      	cmp	r0, #0
1005d8ec:	d404      	bmi.n	1005d8f8 <hci_encryption_change_event_push+0x24>
1005d8ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005d8f0:	20bf      	movs	r0, #191	@ 0xbf
1005d8f2:	4004      	ands	r4, r0
1005d8f4:	2206      	movs	r2, #6
1005d8f6:	e000      	b.n	1005d8fa <hci_encryption_change_event_push+0x26>
1005d8f8:	2216      	movs	r2, #22
1005d8fa:	480e      	ldr	r0, [pc, #56]	@ (1005d934 <__arm_cp.2_1>)
1005d8fc:	6800      	ldr	r0, [r0, #0]
1005d8fe:	0761      	lsls	r1, r4, #29
1005d900:	0ec9      	lsrs	r1, r1, #27
1005d902:	1840      	adds	r0, r0, r1
1005d904:	6900      	ldr	r0, [r0, #16]
1005d906:	2302      	movs	r3, #2
1005d908:	4621      	mov	r1, r4
1005d90a:	f7f7 fc73 	bl	100551f4 <aci_event_fifo_push_header>
1005d90e:	2800      	cmp	r0, #0
1005d910:	d0ed      	beq.n	1005d8ee <hci_encryption_change_event_push+0x1a>
1005d912:	4601      	mov	r1, r0
1005d914:	7205      	strb	r5, [r0, #8]
1005d916:	7286      	strb	r6, [r0, #10]
1005d918:	71c7      	strb	r7, [r0, #7]
1005d91a:	2004      	movs	r0, #4
1005d91c:	7188      	strb	r0, [r1, #6]
1005d91e:	2208      	movs	r2, #8
1005d920:	714a      	strb	r2, [r1, #5]
1005d922:	7108      	strb	r0, [r1, #4]
1005d924:	0a28      	lsrs	r0, r5, #8
1005d926:	7248      	strb	r0, [r1, #9]
1005d928:	4620      	mov	r0, r4
1005d92a:	f7f7 fd00 	bl	1005532e <aci_event_fifo_push>
1005d92e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005d930 <__arm_cp.2_0>:
1005d930:	20002ad0 	.word	0x20002ad0

1005d934 <__arm_cp.2_1>:
1005d934:	20002a80 	.word	0x20002a80

1005d938 <hci_encryption_key_refresh_complete_event_push>:
1005d938:	b5b0      	push	{r4, r5, r7, lr}
1005d93a:	460d      	mov	r5, r1
1005d93c:	4604      	mov	r4, r0
1005d93e:	06c0      	lsls	r0, r0, #27
1005d940:	d406      	bmi.n	1005d950 <hci_encryption_key_refresh_complete_event_push+0x18>
1005d942:	4814      	ldr	r0, [pc, #80]	@ (1005d994 <__arm_cp.3_0>)
1005d944:	6800      	ldr	r0, [r0, #0]
1005d946:	213b      	movs	r1, #59	@ 0x3b
1005d948:	5640      	ldrsb	r0, [r0, r1]
1005d94a:	2800      	cmp	r0, #0
1005d94c:	d404      	bmi.n	1005d958 <hci_encryption_key_refresh_complete_event_push+0x20>
1005d94e:	bdb0      	pop	{r4, r5, r7, pc}
1005d950:	20bf      	movs	r0, #191	@ 0xbf
1005d952:	4004      	ands	r4, r0
1005d954:	2207      	movs	r2, #7
1005d956:	e000      	b.n	1005d95a <hci_encryption_key_refresh_complete_event_push+0x22>
1005d958:	2217      	movs	r2, #23
1005d95a:	480f      	ldr	r0, [pc, #60]	@ (1005d998 <__arm_cp.3_1>)
1005d95c:	6800      	ldr	r0, [r0, #0]
1005d95e:	0761      	lsls	r1, r4, #29
1005d960:	0ec9      	lsrs	r1, r1, #27
1005d962:	1840      	adds	r0, r0, r1
1005d964:	6900      	ldr	r0, [r0, #16]
1005d966:	2302      	movs	r3, #2
1005d968:	4621      	mov	r1, r4
1005d96a:	f7f7 fc43 	bl	100551f4 <aci_event_fifo_push_header>
1005d96e:	2800      	cmp	r0, #0
1005d970:	d0ed      	beq.n	1005d94e <hci_encryption_key_refresh_complete_event_push+0x16>
1005d972:	4601      	mov	r1, r0
1005d974:	7205      	strb	r5, [r0, #8]
1005d976:	2000      	movs	r0, #0
1005d978:	71c8      	strb	r0, [r1, #7]
1005d97a:	2003      	movs	r0, #3
1005d97c:	7188      	strb	r0, [r1, #6]
1005d97e:	2030      	movs	r0, #48	@ 0x30
1005d980:	7148      	strb	r0, [r1, #5]
1005d982:	2004      	movs	r0, #4
1005d984:	7108      	strb	r0, [r1, #4]
1005d986:	0a28      	lsrs	r0, r5, #8
1005d988:	7248      	strb	r0, [r1, #9]
1005d98a:	4620      	mov	r0, r4
1005d98c:	f7f7 fccf 	bl	1005532e <aci_event_fifo_push>
1005d990:	bdb0      	pop	{r4, r5, r7, pc}
1005d992:	46c0      	nop			@ (mov r8, r8)

1005d994 <__arm_cp.3_0>:
1005d994:	20002ad0 	.word	0x20002ad0

1005d998 <__arm_cp.3_1>:
1005d998:	20002a80 	.word	0x20002a80

1005d99c <llc_enc_prepare_reject>:
1005d99c:	2203      	movs	r2, #3
1005d99e:	7002      	strb	r2, [r0, #0]
1005d9a0:	2397      	movs	r3, #151	@ 0x97
1005d9a2:	005b      	lsls	r3, r3, #1
1005d9a4:	5cc9      	ldrb	r1, [r1, r3]
1005d9a6:	0749      	lsls	r1, r1, #29
1005d9a8:	d403      	bmi.n	1005d9b2 <llc_enc_prepare_reject+0x16>
1005d9aa:	2306      	movs	r3, #6
1005d9ac:	210d      	movs	r1, #13
1005d9ae:	2202      	movs	r2, #2
1005d9b0:	e003      	b.n	1005d9ba <llc_enc_prepare_reject+0x1e>
1005d9b2:	2106      	movs	r1, #6
1005d9b4:	7101      	strb	r1, [r0, #4]
1005d9b6:	2111      	movs	r1, #17
1005d9b8:	4613      	mov	r3, r2
1005d9ba:	70c3      	strb	r3, [r0, #3]
1005d9bc:	7081      	strb	r1, [r0, #2]
1005d9be:	7042      	strb	r2, [r0, #1]
1005d9c0:	4770      	bx	lr

1005d9c2 <LL_Get_LTK>:
1005d9c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005d9c4:	4614      	mov	r4, r2
1005d9c6:	4606      	mov	r6, r0
1005d9c8:	4608      	mov	r0, r1
1005d9ca:	f7fc fb47 	bl	1005a05c <llc_conn_get_cntxt_per_p_from_handle>
1005d9ce:	2130      	movs	r1, #48	@ 0x30
1005d9d0:	5641      	ldrsb	r1, [r0, r1]
1005d9d2:	2900      	cmp	r1, #0
1005d9d4:	d405      	bmi.n	1005d9e2 <LL_Get_LTK+0x20>
1005d9d6:	302c      	adds	r0, #44	@ 0x2c
1005d9d8:	7800      	ldrb	r0, [r0, #0]
1005d9da:	2802      	cmp	r0, #2
1005d9dc:	d103      	bne.n	1005d9e6 <LL_Get_LTK+0x24>
1005d9de:	2512      	movs	r5, #18
1005d9e0:	e018      	b.n	1005da14 <LL_Get_LTK+0x52>
1005d9e2:	2502      	movs	r5, #2
1005d9e4:	e016      	b.n	1005da14 <LL_Get_LTK+0x52>
1005d9e6:	b2cf      	uxtb	r7, r1
1005d9e8:	2500      	movs	r5, #0
1005d9ea:	4638      	mov	r0, r7
1005d9ec:	4629      	mov	r1, r5
1005d9ee:	f7fe f9d3 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005d9f2:	4638      	mov	r0, r7
1005d9f4:	4629      	mov	r1, r5
1005d9f6:	f7fe f9dc 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005d9fa:	4601      	mov	r1, r0
1005d9fc:	302b      	adds	r0, #43	@ 0x2b
1005d9fe:	2e00      	cmp	r6, #0
1005da00:	d001      	beq.n	1005da06 <LL_Get_LTK+0x44>
1005da02:	7005      	strb	r5, [r0, #0]
1005da04:	e006      	b.n	1005da14 <LL_Get_LTK+0x52>
1005da06:	2201      	movs	r2, #1
1005da08:	7002      	strb	r2, [r0, #0]
1005da0a:	3110      	adds	r1, #16
1005da0c:	2210      	movs	r2, #16
1005da0e:	4620      	mov	r0, r4
1005da10:	f005 f8c2 	bl	10062b98 <char_copy>
1005da14:	4628      	mov	r0, r5
1005da16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005da18 <LL_feature_exchange>:
1005da18:	b5f0      	push	{r4, r5, r6, r7, lr}
1005da1a:	b085      	sub	sp, #20
1005da1c:	461c      	mov	r4, r3
1005da1e:	4615      	mov	r5, r2
1005da20:	460e      	mov	r6, r1
1005da22:	4607      	mov	r7, r0
1005da24:	f7fe f9c5 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005da28:	9003      	str	r0, [sp, #12]
1005da2a:	9702      	str	r7, [sp, #8]
1005da2c:	4638      	mov	r0, r7
1005da2e:	f7fc fb07 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005da32:	4607      	mov	r7, r0
1005da34:	20ff      	movs	r0, #255	@ 0xff
1005da36:	2d06      	cmp	r5, #6
1005da38:	d900      	bls.n	1005da3c <LL_feature_exchange+0x24>
1005da3a:	e099      	b.n	1005db70 <LL_feature_exchange+0x158>
1005da3c:	9604      	str	r6, [sp, #16]
1005da3e:	2197      	movs	r1, #151	@ 0x97
1005da40:	0049      	lsls	r1, r1, #1
1005da42:	187b      	adds	r3, r7, r1
1005da44:	463e      	mov	r6, r7
1005da46:	362c      	adds	r6, #44	@ 0x2c
1005da48:	447d      	add	r5, pc
1005da4a:	792d      	ldrb	r5, [r5, #4]
1005da4c:	006d      	lsls	r5, r5, #1
1005da4e:	44af      	add	pc, r5
1005da50:	298f0803 	.word	0x298f0803
1005da54:	004a8f8f 	.word	0x004a8f8f
1005da58:	9904      	ldr	r1, [sp, #16]
1005da5a:	2901      	cmp	r1, #1
1005da5c:	d160      	bne.n	1005db20 <LL_feature_exchange+0x108>
1005da5e:	2009      	movs	r0, #9
1005da60:	e086      	b.n	1005db70 <LL_feature_exchange+0x158>
1005da62:	78a1      	ldrb	r1, [r4, #2]
1005da64:	290e      	cmp	r1, #14
1005da66:	d002      	beq.n	1005da6e <LL_feature_exchange+0x56>
1005da68:	2908      	cmp	r1, #8
1005da6a:	d000      	beq.n	1005da6e <LL_feature_exchange+0x56>
1005da6c:	e080      	b.n	1005db70 <LL_feature_exchange+0x158>
1005da6e:	1ce4      	adds	r4, r4, #3
1005da70:	9903      	ldr	r1, [sp, #12]
1005da72:	3108      	adds	r1, #8
1005da74:	4605      	mov	r5, r0
1005da76:	2208      	movs	r2, #8
1005da78:	4620      	mov	r0, r4
1005da7a:	461e      	mov	r6, r3
1005da7c:	f005 f88c 	bl	10062b98 <char_copy>
1005da80:	2205      	movs	r2, #5
1005da82:	4630      	mov	r0, r6
1005da84:	4621      	mov	r1, r4
1005da86:	f7f4 fe69 	bl	1005275c <BLEPLAT_MemCpy>
1005da8a:	9e02      	ldr	r6, [sp, #8]
1005da8c:	4630      	mov	r0, r6
1005da8e:	9c04      	ldr	r4, [sp, #16]
1005da90:	4621      	mov	r1, r4
1005da92:	f7fe f981 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005da96:	2203      	movs	r2, #3
1005da98:	2300      	movs	r3, #0
1005da9a:	4630      	mov	r0, r6
1005da9c:	4621      	mov	r1, r4
1005da9e:	f7fe f932 	bl	1005bd06 <LL_cpe_set_active>
1005daa2:	e01e      	b.n	1005dae2 <LL_feature_exchange+0xca>
1005daa4:	78a1      	ldrb	r1, [r4, #2]
1005daa6:	2907      	cmp	r1, #7
1005daa8:	d046      	beq.n	1005db38 <LL_feature_exchange+0x120>
1005daaa:	2909      	cmp	r1, #9
1005daac:	d160      	bne.n	1005db70 <LL_feature_exchange+0x158>
1005daae:	4605      	mov	r5, r0
1005dab0:	1ce4      	adds	r4, r4, #3
1005dab2:	2205      	movs	r2, #5
1005dab4:	4618      	mov	r0, r3
1005dab6:	4621      	mov	r1, r4
1005dab8:	f7f4 fe50 	bl	1005275c <BLEPLAT_MemCpy>
1005dabc:	9803      	ldr	r0, [sp, #12]
1005dabe:	7c40      	ldrb	r0, [r0, #17]
1005dac0:	2800      	cmp	r0, #0
1005dac2:	d005      	beq.n	1005dad0 <LL_feature_exchange+0xb8>
1005dac4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005dac6:	2080      	movs	r0, #128	@ 0x80
1005dac8:	2100      	movs	r1, #0
1005daca:	4623      	mov	r3, r4
1005dacc:	f006 fa74 	bl	10063fb8 <hci_le_read_remote_features_complete_event_push_noinline>
1005dad0:	6e30      	ldr	r0, [r6, #96]	@ 0x60
1005dad2:	2110      	movs	r1, #16
1005dad4:	4301      	orrs	r1, r0
1005dad6:	6631      	str	r1, [r6, #96]	@ 0x60
1005dad8:	2203      	movs	r2, #3
1005dada:	9802      	ldr	r0, [sp, #8]
1005dadc:	9904      	ldr	r1, [sp, #16]
1005dade:	f7fe f929 	bl	1005bd34 <LL_cpe_clr_active>
1005dae2:	4628      	mov	r0, r5
1005dae4:	e044      	b.n	1005db70 <LL_feature_exchange+0x158>
1005dae6:	9002      	str	r0, [sp, #8]
1005dae8:	2009      	movs	r0, #9
1005daea:	9001      	str	r0, [sp, #4]
1005daec:	7060      	strb	r0, [r4, #1]
1005daee:	2003      	movs	r0, #3
1005daf0:	7020      	strb	r0, [r4, #0]
1005daf2:	1ce7      	adds	r7, r4, #3
1005daf4:	4638      	mov	r0, r7
1005daf6:	f000 f83d 	bl	1005db74 <LL_Get_Supported_Features>
1005dafa:	79a0      	ldrb	r0, [r4, #6]
1005dafc:	21f7      	movs	r1, #247	@ 0xf7
1005dafe:	4001      	ands	r1, r0
1005db00:	71a1      	strb	r1, [r4, #6]
1005db02:	2508      	movs	r5, #8
1005db04:	4638      	mov	r0, r7
1005db06:	9f03      	ldr	r7, [sp, #12]
1005db08:	4639      	mov	r1, r7
1005db0a:	462a      	mov	r2, r5
1005db0c:	f005 f844 	bl	10062b98 <char_copy>
1005db10:	9804      	ldr	r0, [sp, #16]
1005db12:	2801      	cmp	r0, #1
1005db14:	d108      	bne.n	1005db28 <LL_feature_exchange+0x110>
1005db16:	7830      	ldrb	r0, [r6, #0]
1005db18:	2802      	cmp	r0, #2
1005db1a:	d126      	bne.n	1005db6a <LL_feature_exchange+0x152>
1005db1c:	70a5      	strb	r5, [r4, #2]
1005db1e:	e026      	b.n	1005db6e <LL_feature_exchange+0x156>
1005db20:	4604      	mov	r4, r0
1005db22:	2203      	movs	r2, #3
1005db24:	9802      	ldr	r0, [sp, #8]
1005db26:	e01c      	b.n	1005db62 <LL_feature_exchange+0x14a>
1005db28:	9801      	ldr	r0, [sp, #4]
1005db2a:	70a0      	strb	r0, [r4, #2]
1005db2c:	78e0      	ldrb	r0, [r4, #3]
1005db2e:	7a39      	ldrb	r1, [r7, #8]
1005db30:	4001      	ands	r1, r0
1005db32:	70e1      	strb	r1, [r4, #3]
1005db34:	7439      	strb	r1, [r7, #16]
1005db36:	e01a      	b.n	1005db6e <LL_feature_exchange+0x156>
1005db38:	7831      	ldrb	r1, [r6, #0]
1005db3a:	2903      	cmp	r1, #3
1005db3c:	d118      	bne.n	1005db70 <LL_feature_exchange+0x158>
1005db3e:	4604      	mov	r4, r0
1005db40:	7818      	ldrb	r0, [r3, #0]
1005db42:	21f7      	movs	r1, #247	@ 0xf7
1005db44:	4001      	ands	r1, r0
1005db46:	7019      	strb	r1, [r3, #0]
1005db48:	9b03      	ldr	r3, [sp, #12]
1005db4a:	7c58      	ldrb	r0, [r3, #17]
1005db4c:	2800      	cmp	r0, #0
1005db4e:	d005      	beq.n	1005db5c <LL_feature_exchange+0x144>
1005db50:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
1005db52:	3308      	adds	r3, #8
1005db54:	2080      	movs	r0, #128	@ 0x80
1005db56:	211a      	movs	r1, #26
1005db58:	f006 fa2e 	bl	10063fb8 <hci_le_read_remote_features_complete_event_push_noinline>
1005db5c:	2203      	movs	r2, #3
1005db5e:	9802      	ldr	r0, [sp, #8]
1005db60:	9904      	ldr	r1, [sp, #16]
1005db62:	f7fe f8e7 	bl	1005bd34 <LL_cpe_clr_active>
1005db66:	4620      	mov	r0, r4
1005db68:	e002      	b.n	1005db70 <LL_feature_exchange+0x158>
1005db6a:	200e      	movs	r0, #14
1005db6c:	70a0      	strb	r0, [r4, #2]
1005db6e:	9802      	ldr	r0, [sp, #8]
1005db70:	b005      	add	sp, #20
1005db72:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005db74 <LL_Get_Supported_Features>:
1005db74:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005db76:	9000      	str	r0, [sp, #0]
1005db78:	f7fb fd8c 	bl	10059694 <data_length_extension_csr_ucfg_weak>
1005db7c:	4605      	mov	r5, r0
1005db7e:	f7fd ffe0 	bl	1005bb42 <llc_priv_controller_privacy_csr_ucfg_weak>
1005db82:	b2c0      	uxtb	r0, r0
1005db84:	21c0      	movs	r1, #192	@ 0xc0
1005db86:	4341      	muls	r1, r0
1005db88:	0628      	lsls	r0, r5, #24
1005db8a:	0cc5      	lsrs	r5, r0, #19
1005db8c:	430d      	orrs	r5, r1
1005db8e:	2009      	movs	r0, #9
1005db90:	0206      	lsls	r6, r0, #8
1005db92:	f7f1 f879 	bl	1004ec88 <phy_upd_csr_ucfg>
1005db96:	b2c7      	uxtb	r7, r0
1005db98:	4377      	muls	r7, r6
1005db9a:	432f      	orrs	r7, r5
1005db9c:	f002 f906 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
1005dba0:	0305      	lsls	r5, r0, #12
1005dba2:	433d      	orrs	r5, r7
1005dba4:	4e2c      	ldr	r6, [pc, #176]	@ (1005dc58 <__arm_cp.1_0>)
1005dba6:	47b0      	blx	r6
1005dba8:	b2c0      	uxtb	r0, r0
1005dbaa:	4f2c      	ldr	r7, [pc, #176]	@ (1005dc5c <__arm_cp.1_1>)
1005dbac:	4347      	muls	r7, r0
1005dbae:	432f      	orrs	r7, r5
1005dbb0:	200d      	movs	r0, #13
1005dbb2:	0685      	lsls	r5, r0, #26
1005dbb4:	f7fd ffb2 	bl	1005bb1c <cis_csr_ucfg_weak>
1005dbb8:	b2c4      	uxtb	r4, r0
1005dbba:	436c      	muls	r4, r5
1005dbbc:	433c      	orrs	r4, r7
1005dbbe:	2073      	movs	r0, #115	@ 0x73
1005dbc0:	0445      	lsls	r5, r0, #17
1005dbc2:	f7fb fd0b 	bl	100595dc <cte_csr_ucfg_weak>
1005dbc6:	b2c7      	uxtb	r7, r0
1005dbc8:	436f      	muls	r7, r5
1005dbca:	4327      	orrs	r7, r4
1005dbcc:	f7fb fd06 	bl	100595dc <cte_csr_ucfg_weak>
1005dbd0:	4605      	mov	r5, r0
1005dbd2:	47b0      	blx	r6
1005dbd4:	4028      	ands	r0, r5
1005dbd6:	b2c0      	uxtb	r0, r0
1005dbd8:	2503      	movs	r5, #3
1005dbda:	04ec      	lsls	r4, r5, #19
1005dbdc:	4344      	muls	r4, r0
1005dbde:	433c      	orrs	r4, r7
1005dbe0:	f7fd ff9a 	bl	1005bb18 <bis_csr_ucfg_weak>
1005dbe4:	0780      	lsls	r0, r0, #30
1005dbe6:	4247      	negs	r7, r0
1005dbe8:	4327      	orrs	r7, r4
1005dbea:	f002 f8cd 	bl	1005fd88 <llc_get_channel_sel_algo2_enabled>
1005dbee:	0380      	lsls	r0, r0, #14
1005dbf0:	4338      	orrs	r0, r7
1005dbf2:	491b      	ldr	r1, [pc, #108]	@ (1005dc60 <__arm_cp.1_2>)
1005dbf4:	4301      	orrs	r1, r0
1005dbf6:	9101      	str	r1, [sp, #4]
1005dbf8:	f7fb fd4e 	bl	10059698 <pcl_csr_ucfg_weak>
1005dbfc:	b2c0      	uxtb	r0, r0
1005dbfe:	240e      	movs	r4, #14
1005dc00:	4344      	muls	r4, r0
1005dc02:	f7fb fbf6 	bl	100593f2 <chc_csr_ucfg_weak>
1005dc06:	0600      	lsls	r0, r0, #24
1005dc08:	0c47      	lsrs	r7, r0, #17
1005dc0a:	4327      	orrs	r7, r4
1005dc0c:	47b0      	blx	r6
1005dc0e:	21f9      	movs	r1, #249	@ 0xf9
1005dc10:	0109      	lsls	r1, r1, #4
1005dc12:	0104      	lsls	r4, r0, #4
1005dc14:	400c      	ands	r4, r1
1005dc16:	433c      	orrs	r4, r7
1005dc18:	022e      	lsls	r6, r5, #8
1005dc1a:	f002 f8c7 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
1005dc1e:	4605      	mov	r5, r0
1005dc20:	4375      	muls	r5, r6
1005dc22:	4325      	orrs	r5, r4
1005dc24:	2001      	movs	r0, #1
1005dc26:	02c4      	lsls	r4, r0, #11
1005dc28:	f7fb fd3a 	bl	100596a0 <scan_csr_ucfg_weak>
1005dc2c:	0600      	lsls	r0, r0, #24
1005dc2e:	0b00      	lsrs	r0, r0, #12
1005dc30:	1904      	adds	r4, r0, r4
1005dc32:	f7fd ff7f 	bl	1005bb34 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
1005dc36:	b2c0      	uxtb	r0, r0
1005dc38:	4360      	muls	r0, r4
1005dc3a:	4328      	orrs	r0, r5
1005dc3c:	2161      	movs	r1, #97	@ 0x61
1005dc3e:	4301      	orrs	r1, r0
1005dc40:	4808      	ldr	r0, [pc, #32]	@ (1005dc64 <__arm_cp.1_3>)
1005dc42:	6800      	ldr	r0, [r0, #0]
1005dc44:	6a00      	ldr	r0, [r0, #32]
1005dc46:	4008      	ands	r0, r1
1005dc48:	9002      	str	r0, [sp, #8]
1005dc4a:	a901      	add	r1, sp, #4
1005dc4c:	2208      	movs	r2, #8
1005dc4e:	9800      	ldr	r0, [sp, #0]
1005dc50:	f7f4 fd84 	bl	1005275c <BLEPLAT_MemCpy>
1005dc54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005dc56:	46c0      	nop			@ (mov r8, r8)

1005dc58 <__arm_cp.1_0>:
1005dc58:	1005bb31 	.word	0x1005bb31

1005dc5c <__arm_cp.1_1>:
1005dc5c:	03002000 	.word	0x03002000

1005dc60 <__arm_cp.1_2>:
1005dc60:	0800001d 	.word	0x0800001d

1005dc64 <__arm_cp.1_3>:
1005dc64:	20002ad0 	.word	0x20002ad0

1005dc68 <LL_Read_Remote_Used_Features>:
1005dc68:	b570      	push	{r4, r5, r6, lr}
1005dc6a:	4604      	mov	r4, r0
1005dc6c:	4608      	mov	r0, r1
1005dc6e:	f7fc f9f5 	bl	1005a05c <llc_conn_get_cntxt_per_p_from_handle>
1005dc72:	2800      	cmp	r0, #0
1005dc74:	d01c      	beq.n	1005dcb0 <LL_Read_Remote_Used_Features+0x48>
1005dc76:	4606      	mov	r6, r0
1005dc78:	362c      	adds	r6, #44	@ 0x2c
1005dc7a:	7831      	ldrb	r1, [r6, #0]
1005dc7c:	2903      	cmp	r1, #3
1005dc7e:	d107      	bne.n	1005dc90 <LL_Read_Remote_Used_Features+0x28>
1005dc80:	2197      	movs	r1, #151	@ 0x97
1005dc82:	0049      	lsls	r1, r1, #1
1005dc84:	1840      	adds	r0, r0, r1
1005dc86:	7800      	ldrb	r0, [r0, #0]
1005dc88:	0700      	lsls	r0, r0, #28
1005dc8a:	d401      	bmi.n	1005dc90 <LL_Read_Remote_Used_Features+0x28>
1005dc8c:	241a      	movs	r4, #26
1005dc8e:	e024      	b.n	1005dcda <LL_Read_Remote_Used_Features+0x72>
1005dc90:	7930      	ldrb	r0, [r6, #4]
1005dc92:	2101      	movs	r1, #1
1005dc94:	f7fe f829 	bl	1005bcea <LL_cpe_get_active_status>
1005dc98:	2800      	cmp	r0, #0
1005dc9a:	d00d      	beq.n	1005dcb8 <LL_Read_Remote_Used_Features+0x50>
1005dc9c:	2c00      	cmp	r4, #0
1005dc9e:	d109      	bne.n	1005dcb4 <LL_Read_Remote_Used_Features+0x4c>
1005dca0:	7930      	ldrb	r0, [r6, #4]
1005dca2:	2101      	movs	r1, #1
1005dca4:	f7fe fe4a 	bl	1005c93c <LL_cpe_conn_get_proc_id_from_sm>
1005dca8:	2803      	cmp	r0, #3
1005dcaa:	d103      	bne.n	1005dcb4 <LL_Read_Remote_Used_Features+0x4c>
1005dcac:	2400      	movs	r4, #0
1005dcae:	e014      	b.n	1005dcda <LL_Read_Remote_Used_Features+0x72>
1005dcb0:	2402      	movs	r4, #2
1005dcb2:	e012      	b.n	1005dcda <LL_Read_Remote_Used_Features+0x72>
1005dcb4:	243a      	movs	r4, #58	@ 0x3a
1005dcb6:	e010      	b.n	1005dcda <LL_Read_Remote_Used_Features+0x72>
1005dcb8:	7930      	ldrb	r0, [r6, #4]
1005dcba:	2501      	movs	r5, #1
1005dcbc:	4629      	mov	r1, r5
1005dcbe:	f7fe f878 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005dcc2:	7444      	strb	r4, [r0, #17]
1005dcc4:	7930      	ldrb	r0, [r6, #4]
1005dcc6:	4629      	mov	r1, r5
1005dcc8:	f7fe f866 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005dccc:	7930      	ldrb	r0, [r6, #4]
1005dcce:	2203      	movs	r2, #3
1005dcd0:	2400      	movs	r4, #0
1005dcd2:	4629      	mov	r1, r5
1005dcd4:	4623      	mov	r3, r4
1005dcd6:	f7fe f816 	bl	1005bd06 <LL_cpe_set_active>
1005dcda:	4620      	mov	r0, r4
1005dcdc:	bd70      	pop	{r4, r5, r6, pc}

1005dcde <LLC_update_le_ping_params>:
1005dcde:	b5b0      	push	{r4, r5, r7, lr}
1005dce0:	4615      	mov	r5, r2
1005dce2:	460c      	mov	r4, r1
1005dce4:	f7fc f9ac 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005dce8:	2185      	movs	r1, #133	@ 0x85
1005dcea:	0049      	lsls	r1, r1, #1
1005dcec:	5a43      	ldrh	r3, [r0, r1]
1005dcee:	2d00      	cmp	r5, #0
1005dcf0:	461a      	mov	r2, r3
1005dcf2:	d000      	beq.n	1005dcf6 <LLC_update_le_ping_params+0x18>
1005dcf4:	4622      	mov	r2, r4
1005dcf6:	1841      	adds	r1, r0, r1
1005dcf8:	8b0c      	ldrh	r4, [r1, #24]
1005dcfa:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
1005dcfc:	4365      	muls	r5, r4
1005dcfe:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
1005dd00:	300a      	adds	r0, #10
1005dd02:	4368      	muls	r0, r5
1005dd04:	0b00      	lsrs	r0, r0, #12
1005dd06:	b284      	uxth	r4, r0
1005dd08:	1d64      	adds	r4, r4, #5
1005dd0a:	4294      	cmp	r4, r2
1005dd0c:	d300      	bcc.n	1005dd10 <LLC_update_le_ping_params+0x32>
1005dd0e:	4622      	mov	r2, r4
1005dd10:	b294      	uxth	r4, r2
1005dd12:	42a3      	cmp	r3, r4
1005dd14:	d00b      	beq.n	1005dd2e <LLC_update_le_ping_params+0x50>
1005dd16:	8048      	strh	r0, [r1, #2]
1005dd18:	800a      	strh	r2, [r1, #0]
1005dd1a:	7908      	ldrb	r0, [r1, #4]
1005dd1c:	2801      	cmp	r0, #1
1005dd1e:	d006      	beq.n	1005dd2e <LLC_update_le_ping_params+0x50>
1005dd20:	2002      	movs	r0, #2
1005dd22:	7108      	strb	r0, [r1, #4]
1005dd24:	2012      	movs	r0, #18
1005dd26:	f004 fdaf 	bl	10062888 <tsk_notify_idx>
1005dd2a:	f7f3 ff30 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005dd2e:	bdb0      	pop	{r4, r5, r7, pc}

1005dd30 <LLC_init_le_ping_params>:
1005dd30:	b5b0      	push	{r4, r5, r7, lr}
1005dd32:	2185      	movs	r1, #133	@ 0x85
1005dd34:	004a      	lsls	r2, r1, #1
1005dd36:	1881      	adds	r1, r0, r2
1005dd38:	8b0b      	ldrh	r3, [r1, #24]
1005dd3a:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
1005dd3c:	435c      	muls	r4, r3
1005dd3e:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
1005dd40:	330a      	adds	r3, #10
1005dd42:	4363      	muls	r3, r4
1005dd44:	0b1b      	lsrs	r3, r3, #12
1005dd46:	b29c      	uxth	r4, r3
1005dd48:	4d07      	ldr	r5, [pc, #28]	@ (1005dd68 <__arm_cp.3_0>)
1005dd4a:	42ac      	cmp	r4, r5
1005dd4c:	d800      	bhi.n	1005dd50 <LLC_init_le_ping_params+0x20>
1005dd4e:	462c      	mov	r4, r5
1005dd50:	1d64      	adds	r4, r4, #5
1005dd52:	5284      	strh	r4, [r0, r2]
1005dd54:	2001      	movs	r0, #1
1005dd56:	7108      	strb	r0, [r1, #4]
1005dd58:	804b      	strh	r3, [r1, #2]
1005dd5a:	2012      	movs	r0, #18
1005dd5c:	f004 fd94 	bl	10062888 <tsk_notify_idx>
1005dd60:	f7f3 ff15 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005dd64:	bdb0      	pop	{r4, r5, r7, pc}
1005dd66:	46c0      	nop			@ (mov r8, r8)

1005dd68 <__arm_cp.3_0>:
1005dd68:	00000bb3 	.word	0x00000bb3

1005dd6c <LLC_authenticated_payload_timeout_processing>:
1005dd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005dd6e:	b089      	sub	sp, #36	@ 0x24
1005dd70:	2400      	movs	r4, #0
1005dd72:	4620      	mov	r0, r4
1005dd74:	f7fc f964 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005dd78:	9000      	str	r0, [sp, #0]
1005dd7a:	2001      	movs	r0, #1
1005dd7c:	9008      	str	r0, [sp, #32]
1005dd7e:	4843      	ldr	r0, [pc, #268]	@ (1005de8c <__arm_cp.5_0>)
1005dd80:	6800      	ldr	r0, [r0, #0]
1005dd82:	2134      	movs	r1, #52	@ 0x34
1005dd84:	5c40      	ldrb	r0, [r0, r1]
1005dd86:	4284      	cmp	r4, r0
1005dd88:	d300      	bcc.n	1005dd8c <LLC_authenticated_payload_timeout_processing+0x20>
1005dd8a:	e07d      	b.n	1005de88 <LLC_authenticated_payload_timeout_processing+0x11c>
1005dd8c:	204d      	movs	r0, #77	@ 0x4d
1005dd8e:	0080      	lsls	r0, r0, #2
1005dd90:	9405      	str	r4, [sp, #20]
1005dd92:	4360      	muls	r0, r4
1005dd94:	9900      	ldr	r1, [sp, #0]
1005dd96:	180c      	adds	r4, r1, r0
1005dd98:	202c      	movs	r0, #44	@ 0x2c
1005dd9a:	5c20      	ldrb	r0, [r4, r0]
1005dd9c:	21fe      	movs	r1, #254	@ 0xfe
1005dd9e:	4001      	ands	r1, r0
1005dda0:	2902      	cmp	r1, #2
1005dda2:	d16e      	bne.n	1005de82 <LLC_authenticated_payload_timeout_processing+0x116>
1005dda4:	2101      	movs	r1, #1
1005dda6:	9e00      	ldr	r6, [sp, #0]
1005dda8:	4630      	mov	r0, r6
1005ddaa:	9107      	str	r1, [sp, #28]
1005ddac:	f7fc fbe4 	bl	1005a578 <llc_conn_get_enc_on>
1005ddb0:	4605      	mov	r5, r0
1005ddb2:	2100      	movs	r1, #0
1005ddb4:	4630      	mov	r0, r6
1005ddb6:	9101      	str	r1, [sp, #4]
1005ddb8:	f7fc fbde 	bl	1005a578 <llc_conn_get_enc_on>
1005ddbc:	1e41      	subs	r1, r0, #1
1005ddbe:	4188      	sbcs	r0, r1
1005ddc0:	2d00      	cmp	r5, #0
1005ddc2:	9908      	ldr	r1, [sp, #32]
1005ddc4:	9104      	str	r1, [sp, #16]
1005ddc6:	d100      	bne.n	1005ddca <LLC_authenticated_payload_timeout_processing+0x5e>
1005ddc8:	9004      	str	r0, [sp, #16]
1005ddca:	2043      	movs	r0, #67	@ 0x43
1005ddcc:	0080      	lsls	r0, r0, #2
1005ddce:	1820      	adds	r0, r4, r0
1005ddd0:	9003      	str	r0, [sp, #12]
1005ddd2:	2085      	movs	r0, #133	@ 0x85
1005ddd4:	0040      	lsls	r0, r0, #1
1005ddd6:	1820      	adds	r0, r4, r0
1005ddd8:	9002      	str	r0, [sp, #8]
1005ddda:	2087      	movs	r0, #135	@ 0x87
1005dddc:	0040      	lsls	r0, r0, #1
1005ddde:	1823      	adds	r3, r4, r0
1005dde0:	9f08      	ldr	r7, [sp, #32]
1005dde2:	9306      	str	r3, [sp, #24]
1005dde4:	781c      	ldrb	r4, [r3, #0]
1005dde6:	26f0      	movs	r6, #240	@ 0xf0
1005dde8:	4026      	ands	r6, r4
1005ddea:	250f      	movs	r5, #15
1005ddec:	4025      	ands	r5, r4
1005ddee:	2d03      	cmp	r5, #3
1005ddf0:	d01f      	beq.n	1005de32 <LLC_authenticated_payload_timeout_processing+0xc6>
1005ddf2:	2d02      	cmp	r5, #2
1005ddf4:	d00b      	beq.n	1005de0e <LLC_authenticated_payload_timeout_processing+0xa2>
1005ddf6:	2d01      	cmp	r5, #1
1005ddf8:	d12b      	bne.n	1005de52 <LLC_authenticated_payload_timeout_processing+0xe6>
1005ddfa:	9804      	ldr	r0, [sp, #16]
1005ddfc:	2800      	cmp	r0, #0
1005ddfe:	d02c      	beq.n	1005de5a <LLC_authenticated_payload_timeout_processing+0xee>
1005de00:	2012      	movs	r0, #18
1005de02:	2101      	movs	r1, #1
1005de04:	f004 fd52 	bl	100628ac <tsk_wait_resource_idx>
1005de08:	9b06      	ldr	r3, [sp, #24]
1005de0a:	2502      	movs	r5, #2
1005de0c:	e025      	b.n	1005de5a <LLC_authenticated_payload_timeout_processing+0xee>
1005de0e:	9803      	ldr	r0, [sp, #12]
1005de10:	8800      	ldrh	r0, [r0, #0]
1005de12:	9902      	ldr	r1, [sp, #8]
1005de14:	8809      	ldrh	r1, [r1, #0]
1005de16:	1a08      	subs	r0, r1, r0
1005de18:	230a      	movs	r3, #10
1005de1a:	4343      	muls	r3, r0
1005de1c:	481c      	ldr	r0, [pc, #112]	@ (1005de90 <__arm_cp.5_1>)
1005de1e:	6800      	ldr	r0, [r0, #0]
1005de20:	9905      	ldr	r1, [sp, #20]
1005de22:	b2c9      	uxtb	r1, r1
1005de24:	30b0      	adds	r0, #176	@ 0xb0
1005de26:	2201      	movs	r2, #1
1005de28:	f004 fdd7 	bl	100629da <CST_start>
1005de2c:	9b06      	ldr	r3, [sp, #24]
1005de2e:	2503      	movs	r5, #3
1005de30:	e013      	b.n	1005de5a <LLC_authenticated_payload_timeout_processing+0xee>
1005de32:	06a0      	lsls	r0, r4, #26
1005de34:	d511      	bpl.n	1005de5a <LLC_authenticated_payload_timeout_processing+0xee>
1005de36:	9804      	ldr	r0, [sp, #16]
1005de38:	2800      	cmp	r0, #0
1005de3a:	d00c      	beq.n	1005de56 <LLC_authenticated_payload_timeout_processing+0xea>
1005de3c:	9805      	ldr	r0, [sp, #20]
1005de3e:	b2c0      	uxtb	r0, r0
1005de40:	f000 f828 	bl	1005de94 <LLC_authenticated_payload_timeout_start_le_ping>
1005de44:	2800      	cmp	r0, #0
1005de46:	d001      	beq.n	1005de4c <LLC_authenticated_payload_timeout_processing+0xe0>
1005de48:	26d0      	movs	r6, #208	@ 0xd0
1005de4a:	4026      	ands	r6, r4
1005de4c:	9808      	ldr	r0, [sp, #32]
1005de4e:	9b06      	ldr	r3, [sp, #24]
1005de50:	e004      	b.n	1005de5c <LLC_authenticated_payload_timeout_processing+0xf0>
1005de52:	9801      	ldr	r0, [sp, #4]
1005de54:	e002      	b.n	1005de5c <LLC_authenticated_payload_timeout_processing+0xf0>
1005de56:	26d0      	movs	r6, #208	@ 0xd0
1005de58:	4026      	ands	r6, r4
1005de5a:	9808      	ldr	r0, [sp, #32]
1005de5c:	f3ef 8110 	mrs	r1, PRIMASK
1005de60:	b672      	cpsid	i
1005de62:	7819      	ldrb	r1, [r3, #0]
1005de64:	428c      	cmp	r4, r1
1005de66:	d103      	bne.n	1005de70 <LLC_authenticated_payload_timeout_processing+0x104>
1005de68:	432e      	orrs	r6, r5
1005de6a:	701e      	strb	r6, [r3, #0]
1005de6c:	2100      	movs	r1, #0
1005de6e:	e002      	b.n	1005de76 <LLC_authenticated_payload_timeout_processing+0x10a>
1005de70:	9907      	ldr	r1, [sp, #28]
1005de72:	400f      	ands	r7, r1
1005de74:	4639      	mov	r1, r7
1005de76:	1e4a      	subs	r2, r1, #1
1005de78:	4191      	sbcs	r1, r2
1005de7a:	b662      	cpsie	i
1005de7c:	2700      	movs	r7, #0
1005de7e:	4208      	tst	r0, r1
1005de80:	d1b0      	bne.n	1005dde4 <LLC_authenticated_payload_timeout_processing+0x78>
1005de82:	9c05      	ldr	r4, [sp, #20]
1005de84:	1c64      	adds	r4, r4, #1
1005de86:	e77a      	b.n	1005dd7e <LLC_authenticated_payload_timeout_processing+0x12>
1005de88:	b009      	add	sp, #36	@ 0x24
1005de8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005de8c <__arm_cp.5_0>:
1005de8c:	20002a7c 	.word	0x20002a7c

1005de90 <__arm_cp.5_1>:
1005de90:	20002ad0 	.word	0x20002ad0

1005de94 <LLC_authenticated_payload_timeout_start_le_ping>:
1005de94:	b570      	push	{r4, r5, r6, lr}
1005de96:	4605      	mov	r5, r0
1005de98:	2101      	movs	r1, #1
1005de9a:	f7fd ff26 	bl	1005bcea <LL_cpe_get_active_status>
1005de9e:	4604      	mov	r4, r0
1005dea0:	2801      	cmp	r0, #1
1005dea2:	d104      	bne.n	1005deae <LLC_authenticated_payload_timeout_start_le_ping+0x1a>
1005dea4:	2012      	movs	r0, #18
1005dea6:	2101      	movs	r1, #1
1005dea8:	f004 fd00 	bl	100628ac <tsk_wait_resource_idx>
1005deac:	e00a      	b.n	1005dec4 <LLC_authenticated_payload_timeout_start_le_ping+0x30>
1005deae:	2601      	movs	r6, #1
1005deb0:	4628      	mov	r0, r5
1005deb2:	4631      	mov	r1, r6
1005deb4:	f7fd ff70 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005deb8:	2208      	movs	r2, #8
1005deba:	2300      	movs	r3, #0
1005debc:	4628      	mov	r0, r5
1005debe:	4631      	mov	r1, r6
1005dec0:	f7fd ff21 	bl	1005bd06 <LL_cpe_set_active>
1005dec4:	4260      	negs	r0, r4
1005dec6:	4160      	adcs	r0, r4
1005dec8:	bd70      	pop	{r4, r5, r6, pc}
	...

1005decc <LLC_authenticated_payload_timeout_cb>:
1005decc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005dece:	4604      	mov	r4, r0
1005ded0:	f7fc f8b6 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005ded4:	4605      	mov	r5, r0
1005ded6:	202c      	movs	r0, #44	@ 0x2c
1005ded8:	5c28      	ldrb	r0, [r5, r0]
1005deda:	21fe      	movs	r1, #254	@ 0xfe
1005dedc:	4001      	ands	r1, r0
1005dede:	2902      	cmp	r1, #2
1005dee0:	d15b      	bne.n	1005df9a <LLC_authenticated_payload_timeout_cb+0xce>
1005dee2:	9402      	str	r4, [sp, #8]
1005dee4:	2085      	movs	r0, #133	@ 0x85
1005dee6:	0040      	lsls	r0, r0, #1
1005dee8:	182f      	adds	r7, r5, r0
1005deea:	793a      	ldrb	r2, [r7, #4]
1005deec:	06d0      	lsls	r0, r2, #27
1005deee:	d419      	bmi.n	1005df24 <LLC_authenticated_payload_timeout_cb+0x58>
1005def0:	24f0      	movs	r4, #240	@ 0xf0
1005def2:	9201      	str	r2, [sp, #4]
1005def4:	4014      	ands	r4, r2
1005def6:	2101      	movs	r1, #1
1005def8:	4628      	mov	r0, r5
1005defa:	f7fc fb3d 	bl	1005a578 <llc_conn_get_enc_on>
1005defe:	4606      	mov	r6, r0
1005df00:	2100      	movs	r1, #0
1005df02:	4628      	mov	r0, r5
1005df04:	f7fc fb38 	bl	1005a578 <llc_conn_get_enc_on>
1005df08:	4330      	orrs	r0, r6
1005df0a:	d006      	beq.n	1005df1a <LLC_authenticated_payload_timeout_cb+0x4e>
1005df0c:	9802      	ldr	r0, [sp, #8]
1005df0e:	f7ff ffc1 	bl	1005de94 <LLC_authenticated_payload_timeout_start_le_ping>
1005df12:	2801      	cmp	r0, #1
1005df14:	d001      	beq.n	1005df1a <LLC_authenticated_payload_timeout_cb+0x4e>
1005df16:	2020      	movs	r0, #32
1005df18:	4304      	orrs	r4, r0
1005df1a:	9a01      	ldr	r2, [sp, #4]
1005df1c:	2610      	movs	r6, #16
1005df1e:	4326      	orrs	r6, r4
1005df20:	8878      	ldrh	r0, [r7, #2]
1005df22:	e027      	b.n	1005df74 <LLC_authenticated_payload_timeout_cb+0xa8>
1005df24:	26c0      	movs	r6, #192	@ 0xc0
1005df26:	481d      	ldr	r0, [pc, #116]	@ (1005df9c <__arm_cp.7_0>)
1005df28:	6800      	ldr	r0, [r0, #0]
1005df2a:	2140      	movs	r1, #64	@ 0x40
1005df2c:	5640      	ldrsb	r0, [r0, r1]
1005df2e:	2800      	cmp	r0, #0
1005df30:	d51c      	bpl.n	1005df6c <LLC_authenticated_payload_timeout_cb+0xa0>
1005df32:	8f68      	ldrh	r0, [r5, #58]	@ 0x3a
1005df34:	9001      	str	r0, [sp, #4]
1005df36:	481a      	ldr	r0, [pc, #104]	@ (1005dfa0 <__arm_cp.7_1>)
1005df38:	6800      	ldr	r0, [r0, #0]
1005df3a:	6980      	ldr	r0, [r0, #24]
1005df3c:	2142      	movs	r1, #66	@ 0x42
1005df3e:	4614      	mov	r4, r2
1005df40:	2223      	movs	r2, #35	@ 0x23
1005df42:	2502      	movs	r5, #2
1005df44:	462b      	mov	r3, r5
1005df46:	f7f7 f955 	bl	100551f4 <aci_event_fifo_push_header>
1005df4a:	4622      	mov	r2, r4
1005df4c:	2800      	cmp	r0, #0
1005df4e:	d00d      	beq.n	1005df6c <LLC_authenticated_payload_timeout_cb+0xa0>
1005df50:	4601      	mov	r1, r0
1005df52:	9a01      	ldr	r2, [sp, #4]
1005df54:	71c2      	strb	r2, [r0, #7]
1005df56:	7185      	strb	r5, [r0, #6]
1005df58:	2057      	movs	r0, #87	@ 0x57
1005df5a:	7148      	strb	r0, [r1, #5]
1005df5c:	2004      	movs	r0, #4
1005df5e:	7108      	strb	r0, [r1, #4]
1005df60:	0a10      	lsrs	r0, r2, #8
1005df62:	7208      	strb	r0, [r1, #8]
1005df64:	2042      	movs	r0, #66	@ 0x42
1005df66:	f7f7 f9e2 	bl	1005532e <aci_event_fifo_push>
1005df6a:	4622      	mov	r2, r4
1005df6c:	4016      	ands	r6, r2
1005df6e:	8878      	ldrh	r0, [r7, #2]
1005df70:	8839      	ldrh	r1, [r7, #0]
1005df72:	1a08      	subs	r0, r1, r0
1005df74:	230a      	movs	r3, #10
1005df76:	4343      	muls	r3, r0
1005df78:	f3ef 8010 	mrs	r0, PRIMASK
1005df7c:	b672      	cpsid	i
1005df7e:	7938      	ldrb	r0, [r7, #4]
1005df80:	4282      	cmp	r2, r0
1005df82:	9902      	ldr	r1, [sp, #8]
1005df84:	d102      	bne.n	1005df8c <LLC_authenticated_payload_timeout_cb+0xc0>
1005df86:	2003      	movs	r0, #3
1005df88:	4306      	orrs	r6, r0
1005df8a:	713e      	strb	r6, [r7, #4]
1005df8c:	b662      	cpsie	i
1005df8e:	4803      	ldr	r0, [pc, #12]	@ (1005df9c <__arm_cp.7_0>)
1005df90:	6800      	ldr	r0, [r0, #0]
1005df92:	30b0      	adds	r0, #176	@ 0xb0
1005df94:	2201      	movs	r2, #1
1005df96:	f004 fd20 	bl	100629da <CST_start>
1005df9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005df9c <__arm_cp.7_0>:
1005df9c:	20002ad0 	.word	0x20002ad0

1005dfa0 <__arm_cp.7_1>:
1005dfa0:	20002a80 	.word	0x20002a80

1005dfa4 <LLC_authenticated_payload_timeout_reset>:
1005dfa4:	b510      	push	{r4, lr}
1005dfa6:	4604      	mov	r4, r0
1005dfa8:	2087      	movs	r0, #135	@ 0x87
1005dfaa:	0040      	lsls	r0, r0, #1
1005dfac:	5c20      	ldrb	r0, [r4, r0]
1005dfae:	2801      	cmp	r0, #1
1005dfb0:	d00e      	beq.n	1005dfd0 <LLC_authenticated_payload_timeout_reset+0x2c>
1005dfb2:	4620      	mov	r0, r4
1005dfb4:	3030      	adds	r0, #48	@ 0x30
1005dfb6:	7801      	ldrb	r1, [r0, #0]
1005dfb8:	4806      	ldr	r0, [pc, #24]	@ (1005dfd4 <__arm_cp.8_0>)
1005dfba:	6800      	ldr	r0, [r0, #0]
1005dfbc:	30b0      	adds	r0, #176	@ 0xb0
1005dfbe:	f004 fcd6 	bl	1006296e <CST_stop>
1005dfc2:	2085      	movs	r0, #133	@ 0x85
1005dfc4:	0040      	lsls	r0, r0, #1
1005dfc6:	2100      	movs	r1, #0
1005dfc8:	5221      	strh	r1, [r4, r0]
1005dfca:	1820      	adds	r0, r4, r0
1005dfcc:	8041      	strh	r1, [r0, #2]
1005dfce:	7101      	strb	r1, [r0, #4]
1005dfd0:	bd10      	pop	{r4, pc}
1005dfd2:	46c0      	nop			@ (mov r8, r8)

1005dfd4 <__arm_cp.8_0>:
1005dfd4:	20002ad0 	.word	0x20002ad0

1005dfd8 <LLC_le_ping>:
1005dfd8:	b570      	push	{r4, r5, r6, lr}
1005dfda:	24ff      	movs	r4, #255	@ 0xff
1005dfdc:	2a06      	cmp	r2, #6
1005dfde:	d835      	bhi.n	1005e04c <LLC_le_ping+0x74>
1005dfe0:	4605      	mov	r5, r0
1005dfe2:	0090      	lsls	r0, r2, #2
1005dfe4:	a201      	add	r2, pc, #4	@ (adr r2, 1005dfec <LLC_le_ping+0x14>)
1005dfe6:	5810      	ldr	r0, [r2, r0]
1005dfe8:	4687      	mov	pc, r0
1005dfea:	46c0      	nop			@ (mov r8, r8)
1005dfec:	1005e009 	.word	0x1005e009
1005dff0:	1005e011 	.word	0x1005e011
1005dff4:	1005e04d 	.word	0x1005e04d
1005dff8:	1005e029 	.word	0x1005e029
1005dffc:	1005e04d 	.word	0x1005e04d
1005e000:	1005e04d 	.word	0x1005e04d
1005e004:	1005e02d 	.word	0x1005e02d
1005e008:	2901      	cmp	r1, #1
1005e00a:	d117      	bne.n	1005e03c <LLC_le_ping+0x64>
1005e00c:	2413      	movs	r4, #19
1005e00e:	e01d      	b.n	1005e04c <LLC_le_ping+0x74>
1005e010:	2600      	movs	r6, #0
1005e012:	4628      	mov	r0, r5
1005e014:	4631      	mov	r1, r6
1005e016:	f7fd febf 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005e01a:	2208      	movs	r2, #8
1005e01c:	4628      	mov	r0, r5
1005e01e:	4631      	mov	r1, r6
1005e020:	4633      	mov	r3, r6
1005e022:	f7fd fe70 	bl	1005bd06 <LL_cpe_set_active>
1005e026:	e011      	b.n	1005e04c <LLC_le_ping+0x74>
1005e028:	2101      	movs	r1, #1
1005e02a:	e008      	b.n	1005e03e <LLC_le_ping+0x66>
1005e02c:	2001      	movs	r0, #1
1005e02e:	7058      	strb	r0, [r3, #1]
1005e030:	2003      	movs	r0, #3
1005e032:	7018      	strb	r0, [r3, #0]
1005e034:	2901      	cmp	r1, #1
1005e036:	d007      	beq.n	1005e048 <LLC_le_ping+0x70>
1005e038:	2013      	movs	r0, #19
1005e03a:	e006      	b.n	1005e04a <LLC_le_ping+0x72>
1005e03c:	2100      	movs	r1, #0
1005e03e:	2208      	movs	r2, #8
1005e040:	4628      	mov	r0, r5
1005e042:	f7fd fe77 	bl	1005bd34 <LL_cpe_clr_active>
1005e046:	e001      	b.n	1005e04c <LLC_le_ping+0x74>
1005e048:	2012      	movs	r0, #18
1005e04a:	7098      	strb	r0, [r3, #2]
1005e04c:	4620      	mov	r0, r4
1005e04e:	bd70      	pop	{r4, r5, r6, pc}

1005e050 <llc_conn_init_pcl_ctxt_ucfg_weak>:
1005e050:	4770      	bx	lr

1005e052 <LLC_pcl_hal_cntxt_init_ucfg_weak>:
1005e052:	4770      	bx	lr

1005e054 <LLC_pcl_incr_rx_packets_ucfg_weak>:
1005e054:	4770      	bx	lr

1005e056 <LLC_pcl_update_avg_rssi_ucfg_weak>:
1005e056:	4770      	bx	lr

1005e058 <LLC_pcl_set_radio_tx_power_conn_start_ucfg_weak>:
1005e058:	b580      	push	{r7, lr}
1005e05a:	f7fb fff1 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e05e:	2141      	movs	r1, #65	@ 0x41
1005e060:	5c40      	ldrb	r0, [r0, r1]
1005e062:	4903      	ldr	r1, [pc, #12]	@ (1005e070 <__arm_cp.22_0>)
1005e064:	6809      	ldr	r1, [r1, #0]
1005e066:	7a49      	ldrb	r1, [r1, #9]
1005e068:	f7f6 f922 	bl	100542b0 <BLEPLAT_CNTR_SmSetTxPwr>
1005e06c:	bd80      	pop	{r7, pc}
1005e06e:	46c0      	nop			@ (mov r8, r8)

1005e070 <__arm_cp.22_0>:
1005e070:	20002ad0 	.word	0x20002ad0

1005e074 <LLC_pcl_set_radio_tx_power_and_eval_indication_ucfg_weak>:
1005e074:	4770      	bx	lr

1005e076 <LLC_pcl_offline_processing_ucfg_weak>:
1005e076:	2000      	movs	r0, #0
1005e078:	4770      	bx	lr
	...

1005e07c <LL_phy_update_init>:
1005e07c:	b580      	push	{r7, lr}
1005e07e:	f7fb ffd5 	bl	1005a02c <llc_conn_get_cntxt_p>
1005e082:	4902      	ldr	r1, [pc, #8]	@ (1005e08c <__arm_cp.3_0>)
1005e084:	6201      	str	r1, [r0, #32]
1005e086:	2000      	movs	r0, #0
1005e088:	bd80      	pop	{r7, pc}
1005e08a:	46c0      	nop			@ (mov r8, r8)

1005e08c <__arm_cp.3_0>:
1005e08c:	07070002 	.word	0x07070002

1005e090 <LL_phy_update_init_per_st_data>:
1005e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e092:	4605      	mov	r5, r0
1005e094:	f7fc f808 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e098:	2800      	cmp	r0, #0
1005e09a:	d027      	beq.n	1005e0ec <LL_phy_update_init_per_st_data+0x5c>
1005e09c:	4604      	mov	r4, r0
1005e09e:	f7fb ffc5 	bl	1005a02c <llc_conn_get_cntxt_p>
1005e0a2:	4606      	mov	r6, r0
1005e0a4:	4628      	mov	r0, r5
1005e0a6:	f7fb ffcb 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e0aa:	4605      	mov	r5, r0
1005e0ac:	2100      	movs	r1, #0
1005e0ae:	220e      	movs	r2, #14
1005e0b0:	4620      	mov	r0, r4
1005e0b2:	f7f4 fb63 	bl	1005277c <BLEPLAT_MemSet>
1005e0b6:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
1005e0b8:	8060      	strh	r0, [r4, #2]
1005e0ba:	8c30      	ldrh	r0, [r6, #32]
1005e0bc:	8020      	strh	r0, [r4, #0]
1005e0be:	2741      	movs	r7, #65	@ 0x41
1005e0c0:	9500      	str	r5, [sp, #0]
1005e0c2:	5de8      	ldrb	r0, [r5, r7]
1005e0c4:	f7f5 ff3c 	bl	10053f40 <BLEPLAT_CNTR_SmGetTxPhy>
1005e0c8:	2501      	movs	r5, #1
1005e0ca:	2804      	cmp	r0, #4
1005e0cc:	d101      	bne.n	1005e0d2 <LL_phy_update_init_per_st_data+0x42>
1005e0ce:	4606      	mov	r6, r0
1005e0d0:	e001      	b.n	1005e0d6 <LL_phy_update_init_per_st_data+0x46>
1005e0d2:	462e      	mov	r6, r5
1005e0d4:	4086      	lsls	r6, r0
1005e0d6:	9800      	ldr	r0, [sp, #0]
1005e0d8:	5dc0      	ldrb	r0, [r0, r7]
1005e0da:	f7f5 ff20 	bl	10053f1e <BLEPLAT_CNTR_SmGetRxPhy>
1005e0de:	71a6      	strb	r6, [r4, #6]
1005e0e0:	2804      	cmp	r0, #4
1005e0e2:	d101      	bne.n	1005e0e8 <LL_phy_update_init_per_st_data+0x58>
1005e0e4:	4605      	mov	r5, r0
1005e0e6:	e000      	b.n	1005e0ea <LL_phy_update_init_per_st_data+0x5a>
1005e0e8:	4085      	lsls	r5, r0
1005e0ea:	71e5      	strb	r5, [r4, #7]
1005e0ec:	2000      	movs	r0, #0
1005e0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e0f0 <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>:
1005e0f0:	6800      	ldr	r0, [r0, #0]
1005e0f2:	21a9      	movs	r1, #169	@ 0xa9
1005e0f4:	0109      	lsls	r1, r1, #4
1005e0f6:	8181      	strh	r1, [r0, #12]
1005e0f8:	2229      	movs	r2, #41	@ 0x29
1005e0fa:	00d2      	lsls	r2, r2, #3
1005e0fc:	80c2      	strh	r2, [r0, #6]
1005e0fe:	8141      	strh	r1, [r0, #10]
1005e100:	8101      	strh	r1, [r0, #8]
1005e102:	8082      	strh	r2, [r0, #4]
1005e104:	4770      	bx	lr

1005e106 <LL_phy_upd_pending>:
1005e106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e108:	4605      	mov	r5, r0
1005e10a:	f7fb ff99 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e10e:	4604      	mov	r4, r0
1005e110:	4628      	mov	r0, r5
1005e112:	f7fb ffc9 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e116:	219a      	movs	r1, #154	@ 0x9a
1005e118:	5a66      	ldrh	r6, [r4, r1]
1005e11a:	b271      	sxtb	r1, r6
1005e11c:	2900      	cmp	r1, #0
1005e11e:	d52e      	bpl.n	1005e17e <LL_phy_upd_pending+0x78>
1005e120:	4627      	mov	r7, r4
1005e122:	372c      	adds	r7, #44	@ 0x2c
1005e124:	7839      	ldrb	r1, [r7, #0]
1005e126:	2902      	cmp	r1, #2
1005e128:	d106      	bne.n	1005e138 <LL_phy_upd_pending+0x32>
1005e12a:	7a01      	ldrb	r1, [r0, #8]
1005e12c:	2900      	cmp	r1, #0
1005e12e:	d100      	bne.n	1005e132 <LL_phy_upd_pending+0x2c>
1005e130:	7981      	ldrb	r1, [r0, #6]
1005e132:	7181      	strb	r1, [r0, #6]
1005e134:	7a45      	ldrb	r5, [r0, #9]
1005e136:	e005      	b.n	1005e144 <LL_phy_upd_pending+0x3e>
1005e138:	7a41      	ldrb	r1, [r0, #9]
1005e13a:	2900      	cmp	r1, #0
1005e13c:	d100      	bne.n	1005e140 <LL_phy_upd_pending+0x3a>
1005e13e:	7981      	ldrb	r1, [r0, #6]
1005e140:	7181      	strb	r1, [r0, #6]
1005e142:	7a05      	ldrb	r5, [r0, #8]
1005e144:	2d00      	cmp	r5, #0
1005e146:	d100      	bne.n	1005e14a <LL_phy_upd_pending+0x44>
1005e148:	79c5      	ldrb	r5, [r0, #7]
1005e14a:	71c5      	strb	r5, [r0, #7]
1005e14c:	2904      	cmp	r1, #4
1005e14e:	d104      	bne.n	1005e15a <LL_phy_upd_pending+0x54>
1005e150:	8800      	ldrh	r0, [r0, #0]
1005e152:	2801      	cmp	r0, #1
1005e154:	d003      	beq.n	1005e15e <LL_phy_upd_pending+0x58>
1005e156:	2104      	movs	r1, #4
1005e158:	e002      	b.n	1005e160 <LL_phy_upd_pending+0x5a>
1005e15a:	0849      	lsrs	r1, r1, #1
1005e15c:	e000      	b.n	1005e160 <LL_phy_upd_pending+0x5a>
1005e15e:	2106      	movs	r1, #6
1005e160:	349a      	adds	r4, #154	@ 0x9a
1005e162:	7d78      	ldrb	r0, [r7, #21]
1005e164:	f7f6 f88f 	bl	10054286 <BLEPLAT_CNTR_SmSetTxPhy>
1005e168:	2d04      	cmp	r5, #4
1005e16a:	d000      	beq.n	1005e16e <LL_phy_upd_pending+0x68>
1005e16c:	086d      	lsrs	r5, r5, #1
1005e16e:	7d78      	ldrb	r0, [r7, #21]
1005e170:	4629      	mov	r1, r5
1005e172:	f7f6 f81c 	bl	100541ae <BLEPLAT_CNTR_SmSetRxPhy>
1005e176:	8820      	ldrh	r0, [r4, #0]
1005e178:	2180      	movs	r1, #128	@ 0x80
1005e17a:	4388      	bics	r0, r1
1005e17c:	8020      	strh	r0, [r4, #0]
1005e17e:	b2f0      	uxtb	r0, r6
1005e180:	09c0      	lsrs	r0, r0, #7
1005e182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e184 <LL_phy_update>:
1005e184:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e186:	b087      	sub	sp, #28
1005e188:	461e      	mov	r6, r3
1005e18a:	4617      	mov	r7, r2
1005e18c:	460d      	mov	r5, r1
1005e18e:	4604      	mov	r4, r0
1005e190:	f7fd fe0f 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005e194:	9003      	str	r0, [sp, #12]
1005e196:	9404      	str	r4, [sp, #16]
1005e198:	4620      	mov	r0, r4
1005e19a:	f7fb ff51 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e19e:	23ff      	movs	r3, #255	@ 0xff
1005e1a0:	2f07      	cmp	r7, #7
1005e1a2:	d900      	bls.n	1005e1a6 <LL_phy_update+0x22>
1005e1a4:	e18d      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e1a6:	9502      	str	r5, [sp, #8]
1005e1a8:	4605      	mov	r5, r0
1005e1aa:	352c      	adds	r5, #44	@ 0x2c
1005e1ac:	4604      	mov	r4, r0
1005e1ae:	3498      	adds	r4, #152	@ 0x98
1005e1b0:	007f      	lsls	r7, r7, #1
1005e1b2:	46c0      	nop			@ (mov r8, r8)
1005e1b4:	447f      	add	r7, pc
1005e1b6:	88bf      	ldrh	r7, [r7, #4]
1005e1b8:	007f      	lsls	r7, r7, #1
1005e1ba:	44bf      	add	pc, r7
1005e1bc:	001c0007 	.word	0x001c0007
1005e1c0:	004d0041 	.word	0x004d0041
1005e1c4:	01820067 	.word	0x01820067
1005e1c8:	006e0026 	.word	0x006e0026
1005e1cc:	7828      	ldrb	r0, [r5, #0]
1005e1ce:	9902      	ldr	r1, [sp, #8]
1005e1d0:	2901      	cmp	r1, #1
1005e1d2:	d000      	beq.n	1005e1d6 <LL_phy_update+0x52>
1005e1d4:	e0b5      	b.n	1005e342 <LL_phy_update+0x1be>
1005e1d6:	2802      	cmp	r0, #2
1005e1d8:	d000      	beq.n	1005e1dc <LL_phy_update+0x58>
1005e1da:	e103      	b.n	1005e3e4 <LL_phy_update+0x260>
1005e1dc:	9e03      	ldr	r6, [sp, #12]
1005e1de:	7c30      	ldrb	r0, [r6, #16]
1005e1e0:	2803      	cmp	r0, #3
1005e1e2:	d100      	bne.n	1005e1e6 <LL_phy_update+0x62>
1005e1e4:	e158      	b.n	1005e498 <LL_phy_update+0x314>
1005e1e6:	2801      	cmp	r0, #1
1005e1e8:	d000      	beq.n	1005e1ec <LL_phy_update+0x68>
1005e1ea:	e16a      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e1ec:	2002      	movs	r0, #2
1005e1ee:	9903      	ldr	r1, [sp, #12]
1005e1f0:	7408      	strb	r0, [r1, #16]
1005e1f2:	2317      	movs	r3, #23
1005e1f4:	e165      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e1f6:	78f0      	ldrb	r0, [r6, #3]
1005e1f8:	a905      	add	r1, sp, #20
1005e1fa:	7088      	strb	r0, [r1, #2]
1005e1fc:	7930      	ldrb	r0, [r6, #4]
1005e1fe:	70c8      	strb	r0, [r1, #3]
1005e200:	9804      	ldr	r0, [sp, #16]
1005e202:	461c      	mov	r4, r3
1005e204:	f000 fac8 	bl	1005e798 <LL_process_phy_req_rcpt>
1005e208:	e15a      	b.n	1005e4c0 <LL_phy_update+0x33c>
1005e20a:	7828      	ldrb	r0, [r5, #0]
1005e20c:	9902      	ldr	r1, [sp, #8]
1005e20e:	2901      	cmp	r1, #1
1005e210:	d171      	bne.n	1005e2f6 <LL_phy_update+0x172>
1005e212:	2802      	cmp	r0, #2
1005e214:	9903      	ldr	r1, [sp, #12]
1005e216:	d000      	beq.n	1005e21a <LL_phy_update+0x96>
1005e218:	e0ce      	b.n	1005e3b8 <LL_phy_update+0x234>
1005e21a:	7c08      	ldrb	r0, [r1, #16]
1005e21c:	2802      	cmp	r0, #2
1005e21e:	d100      	bne.n	1005e222 <LL_phy_update+0x9e>
1005e220:	e152      	b.n	1005e4c8 <LL_phy_update+0x344>
1005e222:	2800      	cmp	r0, #0
1005e224:	d000      	beq.n	1005e228 <LL_phy_update+0xa4>
1005e226:	e14c      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e228:	2016      	movs	r0, #22
1005e22a:	70b0      	strb	r0, [r6, #2]
1005e22c:	2003      	movs	r0, #3
1005e22e:	7070      	strb	r0, [r6, #1]
1005e230:	7030      	strb	r0, [r6, #0]
1005e232:	7cc8      	ldrb	r0, [r1, #19]
1005e234:	70f0      	strb	r0, [r6, #3]
1005e236:	7d08      	ldrb	r0, [r1, #20]
1005e238:	7130      	strb	r0, [r6, #4]
1005e23a:	2001      	movs	r0, #1
1005e23c:	7408      	strb	r0, [r1, #16]
1005e23e:	e140      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e240:	78f1      	ldrb	r1, [r6, #3]
1005e242:	a805      	add	r0, sp, #20
1005e244:	7081      	strb	r1, [r0, #2]
1005e246:	7931      	ldrb	r1, [r6, #4]
1005e248:	70c1      	strb	r1, [r0, #3]
1005e24a:	7d65      	ldrb	r5, [r4, #21]
1005e24c:	461e      	mov	r6, r3
1005e24e:	2d07      	cmp	r5, #7
1005e250:	d100      	bne.n	1005e254 <LL_phy_update+0xd0>
1005e252:	e090      	b.n	1005e376 <LL_phy_update+0x1f2>
1005e254:	2102      	movs	r1, #2
1005e256:	e08f      	b.n	1005e378 <LL_phy_update+0x1f4>
1005e258:	78b0      	ldrb	r0, [r6, #2]
1005e25a:	2807      	cmp	r0, #7
1005e25c:	d100      	bne.n	1005e260 <LL_phy_update+0xdc>
1005e25e:	e0d2      	b.n	1005e406 <LL_phy_update+0x282>
1005e260:	2811      	cmp	r0, #17
1005e262:	9f04      	ldr	r7, [sp, #16]
1005e264:	d100      	bne.n	1005e268 <LL_phy_update+0xe4>
1005e266:	e0e7      	b.n	1005e438 <LL_phy_update+0x2b4>
1005e268:	2818      	cmp	r0, #24
1005e26a:	d100      	bne.n	1005e26e <LL_phy_update+0xea>
1005e26c:	e0fa      	b.n	1005e464 <LL_phy_update+0x2e0>
1005e26e:	2817      	cmp	r0, #23
1005e270:	d000      	beq.n	1005e274 <LL_phy_update+0xf0>
1005e272:	e126      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e274:	a905      	add	r1, sp, #20
1005e276:	2000      	movs	r0, #0
1005e278:	7108      	strb	r0, [r1, #4]
1005e27a:	78f0      	ldrb	r0, [r6, #3]
1005e27c:	7088      	strb	r0, [r1, #2]
1005e27e:	7930      	ldrb	r0, [r6, #4]
1005e280:	70c8      	strb	r0, [r1, #3]
1005e282:	4638      	mov	r0, r7
1005e284:	461c      	mov	r4, r3
1005e286:	f000 f9cf 	bl	1005e628 <LL_compute_phy_upd_ind>
1005e28a:	e119      	b.n	1005e4c0 <LL_phy_update+0x33c>
1005e28c:	78b1      	ldrb	r1, [r6, #2]
1005e28e:	461c      	mov	r4, r3
1005e290:	2916      	cmp	r1, #22
1005e292:	d100      	bne.n	1005e296 <LL_phy_update+0x112>
1005e294:	e085      	b.n	1005e3a2 <LL_phy_update+0x21e>
1005e296:	212a      	movs	r1, #42	@ 0x2a
1005e298:	e084      	b.n	1005e3a4 <LL_phy_update+0x220>
1005e29a:	9301      	str	r3, [sp, #4]
1005e29c:	9f04      	ldr	r7, [sp, #16]
1005e29e:	4638      	mov	r0, r7
1005e2a0:	9e03      	ldr	r6, [sp, #12]
1005e2a2:	4631      	mov	r1, r6
1005e2a4:	f000 f9a3 	bl	1005e5ee <LL_reset_max_tx_data_frag>
1005e2a8:	7d69      	ldrb	r1, [r5, #21]
1005e2aa:	4638      	mov	r0, r7
1005e2ac:	f7fe ffbc 	bl	1005d228 <LLC_connection_cte_response_disable_ucfg_weak>
1005e2b0:	8871      	ldrh	r1, [r6, #2]
1005e2b2:	8830      	ldrh	r0, [r6, #0]
1005e2b4:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
1005e2b6:	4290      	cmp	r0, r2
1005e2b8:	d102      	bne.n	1005e2c0 <LL_phy_update+0x13c>
1005e2ba:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
1005e2bc:	4291      	cmp	r1, r2
1005e2be:	d00a      	beq.n	1005e2d6 <LL_phy_update+0x152>
1005e2c0:	84a1      	strh	r1, [r4, #36]	@ 0x24
1005e2c2:	8460      	strh	r0, [r4, #34]	@ 0x22
1005e2c4:	f3ef 8010 	mrs	r0, PRIMASK
1005e2c8:	b672      	cpsid	i
1005e2ca:	2001      	movs	r0, #1
1005e2cc:	0240      	lsls	r0, r0, #9
1005e2ce:	8861      	ldrh	r1, [r4, #2]
1005e2d0:	4301      	orrs	r1, r0
1005e2d2:	8061      	strh	r1, [r4, #2]
1005e2d4:	b662      	cpsie	i
1005e2d6:	f3ef 8010 	mrs	r0, PRIMASK
1005e2da:	b672      	cpsid	i
1005e2dc:	2001      	movs	r0, #1
1005e2de:	0200      	lsls	r0, r0, #8
1005e2e0:	8861      	ldrh	r1, [r4, #2]
1005e2e2:	4301      	orrs	r1, r0
1005e2e4:	8061      	strh	r1, [r4, #2]
1005e2e6:	b662      	cpsie	i
1005e2e8:	2207      	movs	r2, #7
1005e2ea:	4638      	mov	r0, r7
1005e2ec:	9902      	ldr	r1, [sp, #8]
1005e2ee:	f7fd fd21 	bl	1005bd34 <LL_cpe_clr_active>
1005e2f2:	9b01      	ldr	r3, [sp, #4]
1005e2f4:	e0e5      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e2f6:	2802      	cmp	r0, #2
1005e2f8:	9903      	ldr	r1, [sp, #12]
1005e2fa:	d166      	bne.n	1005e3ca <LL_phy_update+0x246>
1005e2fc:	7c08      	ldrb	r0, [r1, #16]
1005e2fe:	2805      	cmp	r0, #5
1005e300:	d100      	bne.n	1005e304 <LL_phy_update+0x180>
1005e302:	e100      	b.n	1005e506 <LL_phy_update+0x382>
1005e304:	2800      	cmp	r0, #0
1005e306:	d000      	beq.n	1005e30a <LL_phy_update+0x186>
1005e308:	e0db      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e30a:	9301      	str	r3, [sp, #4]
1005e30c:	9f04      	ldr	r7, [sp, #16]
1005e30e:	4638      	mov	r0, r7
1005e310:	f7fb feca 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e314:	2118      	movs	r1, #24
1005e316:	70b1      	strb	r1, [r6, #2]
1005e318:	2105      	movs	r1, #5
1005e31a:	7071      	strb	r1, [r6, #1]
1005e31c:	2503      	movs	r5, #3
1005e31e:	7035      	strb	r5, [r6, #0]
1005e320:	7a01      	ldrb	r1, [r0, #8]
1005e322:	70f1      	strb	r1, [r6, #3]
1005e324:	7a40      	ldrb	r0, [r0, #9]
1005e326:	7130      	strb	r0, [r6, #4]
1005e328:	1d71      	adds	r1, r6, #5
1005e32a:	2202      	movs	r2, #2
1005e32c:	4620      	mov	r0, r4
1005e32e:	f004 fc33 	bl	10062b98 <char_copy>
1005e332:	9803      	ldr	r0, [sp, #12]
1005e334:	7405      	strb	r5, [r0, #16]
1005e336:	8820      	ldrh	r0, [r4, #0]
1005e338:	2800      	cmp	r0, #0
1005e33a:	d0da      	beq.n	1005e2f2 <LL_phy_update+0x16e>
1005e33c:	4638      	mov	r0, r7
1005e33e:	9902      	ldr	r1, [sp, #8]
1005e340:	e0de      	b.n	1005e500 <LL_phy_update+0x37c>
1005e342:	2802      	cmp	r0, #2
1005e344:	d14a      	bne.n	1005e3dc <LL_phy_update+0x258>
1005e346:	9e03      	ldr	r6, [sp, #12]
1005e348:	7c30      	ldrb	r0, [r6, #16]
1005e34a:	2803      	cmp	r0, #3
1005e34c:	d000      	beq.n	1005e350 <LL_phy_update+0x1cc>
1005e34e:	e09f      	b.n	1005e490 <LL_phy_update+0x30c>
1005e350:	461c      	mov	r4, r3
1005e352:	7c70      	ldrb	r0, [r6, #17]
1005e354:	a905      	add	r1, sp, #20
1005e356:	7108      	strb	r0, [r1, #4]
1005e358:	9d04      	ldr	r5, [sp, #16]
1005e35a:	4628      	mov	r0, r5
1005e35c:	4632      	mov	r2, r6
1005e35e:	f000 f8f0 	bl	1005e542 <LL_process_phy_upd_ind>
1005e362:	2800      	cmp	r0, #0
1005e364:	d100      	bne.n	1005e368 <LL_phy_update+0x1e4>
1005e366:	e0ab      	b.n	1005e4c0 <LL_phy_update+0x33c>
1005e368:	4628      	mov	r0, r5
1005e36a:	4631      	mov	r1, r6
1005e36c:	f000 f93f 	bl	1005e5ee <LL_reset_max_tx_data_frag>
1005e370:	2207      	movs	r2, #7
1005e372:	4628      	mov	r0, r5
1005e374:	e074      	b.n	1005e460 <LL_phy_update+0x2dc>
1005e376:	2101      	movs	r1, #1
1005e378:	9f04      	ldr	r7, [sp, #16]
1005e37a:	7181      	strb	r1, [r0, #6]
1005e37c:	2100      	movs	r1, #0
1005e37e:	4638      	mov	r0, r7
1005e380:	f7fd fd17 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005e384:	4604      	mov	r4, r0
1005e386:	4638      	mov	r0, r7
1005e388:	f7fb fe5a 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e38c:	212c      	movs	r1, #44	@ 0x2c
1005e38e:	5c40      	ldrb	r0, [r0, r1]
1005e390:	2802      	cmp	r0, #2
1005e392:	d10a      	bne.n	1005e3aa <LL_phy_update+0x226>
1005e394:	20ff      	movs	r0, #255	@ 0xff
1005e396:	3006      	adds	r0, #6
1005e398:	8220      	strh	r0, [r4, #16]
1005e39a:	2d07      	cmp	r5, #7
1005e39c:	d024      	beq.n	1005e3e8 <LL_phy_update+0x264>
1005e39e:	202a      	movs	r0, #42	@ 0x2a
1005e3a0:	e023      	b.n	1005e3ea <LL_phy_update+0x266>
1005e3a2:	2123      	movs	r1, #35	@ 0x23
1005e3a4:	f7fc fd30 	bl	1005ae08 <llc_conn_disconnect_link_from_cpf>
1005e3a8:	e08a      	b.n	1005e4c0 <LL_phy_update+0x33c>
1005e3aa:	2d07      	cmp	r5, #7
1005e3ac:	d129      	bne.n	1005e402 <LL_phy_update+0x27e>
1005e3ae:	a905      	add	r1, sp, #20
1005e3b0:	4638      	mov	r0, r7
1005e3b2:	f000 f9f1 	bl	1005e798 <LL_process_phy_req_rcpt>
1005e3b6:	e024      	b.n	1005e402 <LL_phy_update+0x27e>
1005e3b8:	2016      	movs	r0, #22
1005e3ba:	70b0      	strb	r0, [r6, #2]
1005e3bc:	2003      	movs	r0, #3
1005e3be:	7070      	strb	r0, [r6, #1]
1005e3c0:	7030      	strb	r0, [r6, #0]
1005e3c2:	7cc8      	ldrb	r0, [r1, #19]
1005e3c4:	70f0      	strb	r0, [r6, #3]
1005e3c6:	7d08      	ldrb	r0, [r1, #20]
1005e3c8:	e0a5      	b.n	1005e516 <LL_phy_update+0x392>
1005e3ca:	2017      	movs	r0, #23
1005e3cc:	70b0      	strb	r0, [r6, #2]
1005e3ce:	2003      	movs	r0, #3
1005e3d0:	7070      	strb	r0, [r6, #1]
1005e3d2:	7030      	strb	r0, [r6, #0]
1005e3d4:	7d48      	ldrb	r0, [r1, #21]
1005e3d6:	70f0      	strb	r0, [r6, #3]
1005e3d8:	7d88      	ldrb	r0, [r1, #22]
1005e3da:	e09c      	b.n	1005e516 <LL_phy_update+0x392>
1005e3dc:	2202      	movs	r2, #2
1005e3de:	9804      	ldr	r0, [sp, #16]
1005e3e0:	f7fd fcca 	bl	1005bd78 <LL_cpe_set_blocked>
1005e3e4:	2318      	movs	r3, #24
1005e3e6:	e06c      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e3e8:	2023      	movs	r0, #35	@ 0x23
1005e3ea:	74a0      	strb	r0, [r4, #18]
1005e3ec:	2400      	movs	r4, #0
1005e3ee:	4638      	mov	r0, r7
1005e3f0:	4621      	mov	r1, r4
1005e3f2:	f7fd fcd1 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005e3f6:	2207      	movs	r2, #7
1005e3f8:	2301      	movs	r3, #1
1005e3fa:	4638      	mov	r0, r7
1005e3fc:	4621      	mov	r1, r4
1005e3fe:	f7fd fc82 	bl	1005bd06 <LL_cpe_set_active>
1005e402:	4633      	mov	r3, r6
1005e404:	e05d      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e406:	461c      	mov	r4, r3
1005e408:	a905      	add	r1, sp, #20
1005e40a:	2007      	movs	r0, #7
1005e40c:	7088      	strb	r0, [r1, #2]
1005e40e:	2000      	movs	r0, #0
1005e410:	7048      	strb	r0, [r1, #1]
1005e412:	78f0      	ldrb	r0, [r6, #3]
1005e414:	7008      	strb	r0, [r1, #0]
1005e416:	9f03      	ldr	r7, [sp, #12]
1005e418:	7c78      	ldrb	r0, [r7, #17]
1005e41a:	70c8      	strb	r0, [r1, #3]
1005e41c:	9e04      	ldr	r6, [sp, #16]
1005e41e:	4630      	mov	r0, r6
1005e420:	f000 f992 	bl	1005e748 <LL_process_unknown_rsp_reject_ind_rcpt>
1005e424:	7828      	ldrb	r0, [r5, #0]
1005e426:	2803      	cmp	r0, #3
1005e428:	d103      	bne.n	1005e432 <LL_phy_update+0x2ae>
1005e42a:	4630      	mov	r0, r6
1005e42c:	4639      	mov	r1, r7
1005e42e:	f000 f8de 	bl	1005e5ee <LL_reset_max_tx_data_frag>
1005e432:	2207      	movs	r2, #7
1005e434:	4630      	mov	r0, r6
1005e436:	e013      	b.n	1005e460 <LL_phy_update+0x2dc>
1005e438:	a905      	add	r1, sp, #20
1005e43a:	2011      	movs	r0, #17
1005e43c:	7088      	strb	r0, [r1, #2]
1005e43e:	78f0      	ldrb	r0, [r6, #3]
1005e440:	7008      	strb	r0, [r1, #0]
1005e442:	7930      	ldrb	r0, [r6, #4]
1005e444:	7048      	strb	r0, [r1, #1]
1005e446:	9d03      	ldr	r5, [sp, #12]
1005e448:	7c68      	ldrb	r0, [r5, #17]
1005e44a:	70c8      	strb	r0, [r1, #3]
1005e44c:	4638      	mov	r0, r7
1005e44e:	461c      	mov	r4, r3
1005e450:	f000 f97a 	bl	1005e748 <LL_process_unknown_rsp_reject_ind_rcpt>
1005e454:	4638      	mov	r0, r7
1005e456:	4629      	mov	r1, r5
1005e458:	f000 f8c9 	bl	1005e5ee <LL_reset_max_tx_data_frag>
1005e45c:	2207      	movs	r2, #7
1005e45e:	4638      	mov	r0, r7
1005e460:	9902      	ldr	r1, [sp, #8]
1005e462:	e02b      	b.n	1005e4bc <LL_phy_update+0x338>
1005e464:	9301      	str	r3, [sp, #4]
1005e466:	1cf0      	adds	r0, r6, #3
1005e468:	ae05      	add	r6, sp, #20
1005e46a:	2205      	movs	r2, #5
1005e46c:	4631      	mov	r1, r6
1005e46e:	f004 fb93 	bl	10062b98 <char_copy>
1005e472:	9d03      	ldr	r5, [sp, #12]
1005e474:	7c68      	ldrb	r0, [r5, #17]
1005e476:	7130      	strb	r0, [r6, #4]
1005e478:	4638      	mov	r0, r7
1005e47a:	4631      	mov	r1, r6
1005e47c:	462a      	mov	r2, r5
1005e47e:	f000 f860 	bl	1005e542 <LL_process_phy_upd_ind>
1005e482:	2800      	cmp	r0, #0
1005e484:	d049      	beq.n	1005e51a <LL_phy_update+0x396>
1005e486:	4638      	mov	r0, r7
1005e488:	4629      	mov	r1, r5
1005e48a:	f000 f8b0 	bl	1005e5ee <LL_reset_max_tx_data_frag>
1005e48e:	e72b      	b.n	1005e2e8 <LL_phy_update+0x164>
1005e490:	2207      	movs	r2, #7
1005e492:	9804      	ldr	r0, [sp, #16]
1005e494:	461c      	mov	r4, r3
1005e496:	e011      	b.n	1005e4bc <LL_phy_update+0x338>
1005e498:	461c      	mov	r4, r3
1005e49a:	7c70      	ldrb	r0, [r6, #17]
1005e49c:	a905      	add	r1, sp, #20
1005e49e:	7108      	strb	r0, [r1, #4]
1005e4a0:	9d04      	ldr	r5, [sp, #16]
1005e4a2:	4628      	mov	r0, r5
1005e4a4:	4632      	mov	r2, r6
1005e4a6:	f000 f84c 	bl	1005e542 <LL_process_phy_upd_ind>
1005e4aa:	2800      	cmp	r0, #0
1005e4ac:	d046      	beq.n	1005e53c <LL_phy_update+0x3b8>
1005e4ae:	4628      	mov	r0, r5
1005e4b0:	4631      	mov	r1, r6
1005e4b2:	f000 f89c 	bl	1005e5ee <LL_reset_max_tx_data_frag>
1005e4b6:	2101      	movs	r1, #1
1005e4b8:	2207      	movs	r2, #7
1005e4ba:	4628      	mov	r0, r5
1005e4bc:	f7fd fc3a 	bl	1005bd34 <LL_cpe_clr_active>
1005e4c0:	4623      	mov	r3, r4
1005e4c2:	4618      	mov	r0, r3
1005e4c4:	b007      	add	sp, #28
1005e4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005e4c8:	9301      	str	r3, [sp, #4]
1005e4ca:	9f04      	ldr	r7, [sp, #16]
1005e4cc:	4638      	mov	r0, r7
1005e4ce:	f7fb fdeb 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e4d2:	2118      	movs	r1, #24
1005e4d4:	70b1      	strb	r1, [r6, #2]
1005e4d6:	2105      	movs	r1, #5
1005e4d8:	7071      	strb	r1, [r6, #1]
1005e4da:	2503      	movs	r5, #3
1005e4dc:	7035      	strb	r5, [r6, #0]
1005e4de:	7a01      	ldrb	r1, [r0, #8]
1005e4e0:	70f1      	strb	r1, [r6, #3]
1005e4e2:	7a40      	ldrb	r0, [r0, #9]
1005e4e4:	7130      	strb	r0, [r6, #4]
1005e4e6:	1d71      	adds	r1, r6, #5
1005e4e8:	2202      	movs	r2, #2
1005e4ea:	4620      	mov	r0, r4
1005e4ec:	f004 fb54 	bl	10062b98 <char_copy>
1005e4f0:	9803      	ldr	r0, [sp, #12]
1005e4f2:	7405      	strb	r5, [r0, #16]
1005e4f4:	8820      	ldrh	r0, [r4, #0]
1005e4f6:	2800      	cmp	r0, #0
1005e4f8:	d100      	bne.n	1005e4fc <LL_phy_update+0x378>
1005e4fa:	e6fa      	b.n	1005e2f2 <LL_phy_update+0x16e>
1005e4fc:	2101      	movs	r1, #1
1005e4fe:	4638      	mov	r0, r7
1005e500:	f7fd fc60 	bl	1005bdc4 <LL_cpe_set_tx_with_instant>
1005e504:	e015      	b.n	1005e532 <LL_phy_update+0x3ae>
1005e506:	2016      	movs	r0, #22
1005e508:	70f0      	strb	r0, [r6, #3]
1005e50a:	2011      	movs	r0, #17
1005e50c:	70b0      	strb	r0, [r6, #2]
1005e50e:	2003      	movs	r0, #3
1005e510:	7070      	strb	r0, [r6, #1]
1005e512:	7030      	strb	r0, [r6, #0]
1005e514:	7c88      	ldrb	r0, [r1, #18]
1005e516:	7130      	strb	r0, [r6, #4]
1005e518:	e7d3      	b.n	1005e4c2 <LL_phy_update+0x33e>
1005e51a:	9d02      	ldr	r5, [sp, #8]
1005e51c:	2d01      	cmp	r5, #1
1005e51e:	d104      	bne.n	1005e52a <LL_phy_update+0x3a6>
1005e520:	2101      	movs	r1, #1
1005e522:	2202      	movs	r2, #2
1005e524:	4638      	mov	r0, r7
1005e526:	f7fd fc27 	bl	1005bd78 <LL_cpe_set_blocked>
1005e52a:	4638      	mov	r0, r7
1005e52c:	4629      	mov	r1, r5
1005e52e:	f7fd fc58 	bl	1005bde2 <LL_cpe_set_rx_with_instant>
1005e532:	8860      	ldrh	r0, [r4, #2]
1005e534:	2180      	movs	r1, #128	@ 0x80
1005e536:	4301      	orrs	r1, r0
1005e538:	8061      	strh	r1, [r4, #2]
1005e53a:	e6da      	b.n	1005e2f2 <LL_phy_update+0x16e>
1005e53c:	2004      	movs	r0, #4
1005e53e:	7430      	strb	r0, [r6, #16]
1005e540:	e7be      	b.n	1005e4c0 <LL_phy_update+0x33c>

1005e542 <LL_process_phy_upd_ind>:
1005e542:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e544:	9201      	str	r2, [sp, #4]
1005e546:	460c      	mov	r4, r1
1005e548:	4606      	mov	r6, r0
1005e54a:	f7fb fd79 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e54e:	4607      	mov	r7, r0
1005e550:	4630      	mov	r0, r6
1005e552:	f7fb fda9 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e556:	4605      	mov	r5, r0
1005e558:	202c      	movs	r0, #44	@ 0x2c
1005e55a:	9702      	str	r7, [sp, #8]
1005e55c:	5c39      	ldrb	r1, [r7, r0]
1005e55e:	2903      	cmp	r1, #3
1005e560:	d111      	bne.n	1005e586 <LL_process_phy_upd_ind+0x44>
1005e562:	7827      	ldrb	r7, [r4, #0]
1005e564:	2001      	movs	r0, #1
1005e566:	2f04      	cmp	r7, #4
1005e568:	d82e      	bhi.n	1005e5c8 <LL_process_phy_upd_ind+0x86>
1005e56a:	2f03      	cmp	r7, #3
1005e56c:	d02c      	beq.n	1005e5c8 <LL_process_phy_upd_ind+0x86>
1005e56e:	7862      	ldrb	r2, [r4, #1]
1005e570:	2a04      	cmp	r2, #4
1005e572:	d829      	bhi.n	1005e5c8 <LL_process_phy_upd_ind+0x86>
1005e574:	2a03      	cmp	r2, #3
1005e576:	d027      	beq.n	1005e5c8 <LL_process_phy_upd_ind+0x86>
1005e578:	9b02      	ldr	r3, [sp, #8]
1005e57a:	3398      	adds	r3, #152	@ 0x98
1005e57c:	726a      	strb	r2, [r5, #9]
1005e57e:	722f      	strb	r7, [r5, #8]
1005e580:	8862      	ldrh	r2, [r4, #2]
1005e582:	801a      	strh	r2, [r3, #0]
1005e584:	e000      	b.n	1005e588 <LL_process_phy_upd_ind+0x46>
1005e586:	7a2f      	ldrb	r7, [r5, #8]
1005e588:	2f00      	cmp	r7, #0
1005e58a:	d102      	bne.n	1005e592 <LL_process_phy_upd_ind+0x50>
1005e58c:	7a6a      	ldrb	r2, [r5, #9]
1005e58e:	2a00      	cmp	r2, #0
1005e590:	d016      	beq.n	1005e5c0 <LL_process_phy_upd_ind+0x7e>
1005e592:	2000      	movs	r0, #0
1005e594:	2903      	cmp	r1, #3
1005e596:	d117      	bne.n	1005e5c8 <LL_process_phy_upd_ind+0x86>
1005e598:	7a69      	ldrb	r1, [r5, #9]
1005e59a:	2900      	cmp	r1, #0
1005e59c:	d014      	beq.n	1005e5c8 <LL_process_phy_upd_ind+0x86>
1005e59e:	79ea      	ldrb	r2, [r5, #7]
1005e5a0:	9b01      	ldr	r3, [sp, #4]
1005e5a2:	9300      	str	r3, [sp, #0]
1005e5a4:	403a      	ands	r2, r7
1005e5a6:	0752      	lsls	r2, r2, #29
1005e5a8:	0fd2      	lsrs	r2, r2, #31
1005e5aa:	4604      	mov	r4, r0
1005e5ac:	2301      	movs	r3, #1
1005e5ae:	4630      	mov	r0, r6
1005e5b0:	f000 fa04 	bl	1005e9bc <LL_adjust_max_tx_data_frag>
1005e5b4:	7a69      	ldrb	r1, [r5, #9]
1005e5b6:	4630      	mov	r0, r6
1005e5b8:	f7fe fe35 	bl	1005d226 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005e5bc:	4620      	mov	r0, r4
1005e5be:	e003      	b.n	1005e5c8 <LL_process_phy_upd_ind+0x86>
1005e5c0:	7921      	ldrb	r1, [r4, #4]
1005e5c2:	2001      	movs	r0, #1
1005e5c4:	2900      	cmp	r1, #0
1005e5c6:	d000      	beq.n	1005e5ca <LL_process_phy_upd_ind+0x88>
1005e5c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005e5ca:	4604      	mov	r4, r0
1005e5cc:	79e9      	ldrb	r1, [r5, #7]
1005e5ce:	2003      	movs	r0, #3
1005e5d0:	074a      	lsls	r2, r1, #29
1005e5d2:	d500      	bpl.n	1005e5d6 <LL_process_phy_upd_ind+0x94>
1005e5d4:	4601      	mov	r1, r0
1005e5d6:	9a02      	ldr	r2, [sp, #8]
1005e5d8:	8f52      	ldrh	r2, [r2, #58]	@ 0x3a
1005e5da:	79ab      	ldrb	r3, [r5, #6]
1005e5dc:	9100      	str	r1, [sp, #0]
1005e5de:	0759      	lsls	r1, r3, #29
1005e5e0:	d500      	bpl.n	1005e5e4 <LL_process_phy_upd_ind+0xa2>
1005e5e2:	4603      	mov	r3, r0
1005e5e4:	2080      	movs	r0, #128	@ 0x80
1005e5e6:	2100      	movs	r1, #0
1005e5e8:	f000 f9b2 	bl	1005e950 <hci_le_phy_update_complete_event_push>
1005e5ec:	e7e6      	b.n	1005e5bc <LL_process_phy_upd_ind+0x7a>

1005e5ee <LL_reset_max_tx_data_frag>:
1005e5ee:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005e5f0:	460d      	mov	r5, r1
1005e5f2:	4604      	mov	r4, r0
1005e5f4:	f7fb fd58 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e5f8:	2800      	cmp	r0, #0
1005e5fa:	d007      	beq.n	1005e60c <LL_reset_max_tx_data_frag+0x1e>
1005e5fc:	7981      	ldrb	r1, [r0, #6]
1005e5fe:	79c0      	ldrb	r0, [r0, #7]
1005e600:	2804      	cmp	r0, #4
1005e602:	d107      	bne.n	1005e614 <LL_reset_max_tx_data_frag+0x26>
1005e604:	4628      	mov	r0, r5
1005e606:	300c      	adds	r0, #12
1005e608:	2201      	movs	r2, #1
1005e60a:	e005      	b.n	1005e618 <LL_reset_max_tx_data_frag+0x2a>
1005e60c:	1da8      	adds	r0, r5, #6
1005e60e:	2200      	movs	r2, #0
1005e610:	2101      	movs	r1, #1
1005e612:	e001      	b.n	1005e618 <LL_reset_max_tx_data_frag+0x2a>
1005e614:	1da8      	adds	r0, r5, #6
1005e616:	2200      	movs	r2, #0
1005e618:	8800      	ldrh	r0, [r0, #0]
1005e61a:	8068      	strh	r0, [r5, #2]
1005e61c:	9500      	str	r5, [sp, #0]
1005e61e:	2300      	movs	r3, #0
1005e620:	4620      	mov	r0, r4
1005e622:	f000 f9cb 	bl	1005e9bc <LL_adjust_max_tx_data_frag>
1005e626:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1005e628 <LL_compute_phy_upd_ind>:
1005e628:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e62a:	460d      	mov	r5, r1
1005e62c:	4604      	mov	r4, r0
1005e62e:	f7fb fd3b 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e632:	4606      	mov	r6, r0
1005e634:	7928      	ldrb	r0, [r5, #4]
1005e636:	2801      	cmp	r0, #1
1005e638:	9002      	str	r0, [sp, #8]
1005e63a:	d114      	bne.n	1005e666 <LL_compute_phy_upd_ind+0x3e>
1005e63c:	2500      	movs	r5, #0
1005e63e:	4620      	mov	r0, r4
1005e640:	4629      	mov	r1, r5
1005e642:	f7fd fbb6 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005e646:	4607      	mov	r7, r0
1005e648:	7d02      	ldrb	r2, [r0, #20]
1005e64a:	7cc3      	ldrb	r3, [r0, #19]
1005e64c:	4293      	cmp	r3, r2
1005e64e:	9501      	str	r5, [sp, #4]
1005e650:	d105      	bne.n	1005e65e <LL_compute_phy_upd_ind+0x36>
1005e652:	2b03      	cmp	r3, #3
1005e654:	d302      	bcc.n	1005e65c <LL_compute_phy_upd_ind+0x34>
1005e656:	2b04      	cmp	r3, #4
1005e658:	9d01      	ldr	r5, [sp, #4]
1005e65a:	d100      	bne.n	1005e65e <LL_compute_phy_upd_ind+0x36>
1005e65c:	2501      	movs	r5, #1
1005e65e:	78f0      	ldrb	r0, [r6, #3]
1005e660:	4018      	ands	r0, r3
1005e662:	78b3      	ldrb	r3, [r6, #2]
1005e664:	e014      	b.n	1005e690 <LL_compute_phy_upd_ind+0x68>
1005e666:	2101      	movs	r1, #1
1005e668:	4620      	mov	r0, r4
1005e66a:	9101      	str	r1, [sp, #4]
1005e66c:	f7fd fba1 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005e670:	4607      	mov	r7, r0
1005e672:	78ab      	ldrb	r3, [r5, #2]
1005e674:	7543      	strb	r3, [r0, #21]
1005e676:	78ea      	ldrb	r2, [r5, #3]
1005e678:	7582      	strb	r2, [r0, #22]
1005e67a:	2500      	movs	r5, #0
1005e67c:	4293      	cmp	r3, r2
1005e67e:	d104      	bne.n	1005e68a <LL_compute_phy_upd_ind+0x62>
1005e680:	2b03      	cmp	r3, #3
1005e682:	d301      	bcc.n	1005e688 <LL_compute_phy_upd_ind+0x60>
1005e684:	2b04      	cmp	r3, #4
1005e686:	d100      	bne.n	1005e68a <LL_compute_phy_upd_ind+0x62>
1005e688:	2501      	movs	r5, #1
1005e68a:	7d38      	ldrb	r0, [r7, #20]
1005e68c:	4018      	ands	r0, r3
1005e68e:	7cfb      	ldrb	r3, [r7, #19]
1005e690:	4013      	ands	r3, r2
1005e692:	2d00      	cmp	r5, #0
1005e694:	d002      	beq.n	1005e69c <LL_compute_phy_upd_ind+0x74>
1005e696:	4283      	cmp	r3, r0
1005e698:	4603      	mov	r3, r0
1005e69a:	d107      	bne.n	1005e6ac <LL_compute_phy_upd_ind+0x84>
1005e69c:	2100      	movs	r1, #0
1005e69e:	2b00      	cmp	r3, #0
1005e6a0:	460a      	mov	r2, r1
1005e6a2:	d00a      	beq.n	1005e6ba <LL_compute_phy_upd_ind+0x92>
1005e6a4:	07da      	lsls	r2, r3, #31
1005e6a6:	d004      	beq.n	1005e6b2 <LL_compute_phy_upd_ind+0x8a>
1005e6a8:	2201      	movs	r2, #1
1005e6aa:	e003      	b.n	1005e6b4 <LL_compute_phy_upd_ind+0x8c>
1005e6ac:	2200      	movs	r2, #0
1005e6ae:	4611      	mov	r1, r2
1005e6b0:	e00d      	b.n	1005e6ce <LL_compute_phy_upd_ind+0xa6>
1005e6b2:	2204      	movs	r2, #4
1005e6b4:	079b      	lsls	r3, r3, #30
1005e6b6:	d500      	bpl.n	1005e6ba <LL_compute_phy_upd_ind+0x92>
1005e6b8:	2202      	movs	r2, #2
1005e6ba:	2800      	cmp	r0, #0
1005e6bc:	d007      	beq.n	1005e6ce <LL_compute_phy_upd_ind+0xa6>
1005e6be:	07c1      	lsls	r1, r0, #31
1005e6c0:	d001      	beq.n	1005e6c6 <LL_compute_phy_upd_ind+0x9e>
1005e6c2:	2101      	movs	r1, #1
1005e6c4:	e000      	b.n	1005e6c8 <LL_compute_phy_upd_ind+0xa0>
1005e6c6:	2104      	movs	r1, #4
1005e6c8:	0780      	lsls	r0, r0, #30
1005e6ca:	d500      	bpl.n	1005e6ce <LL_compute_phy_upd_ind+0xa6>
1005e6cc:	2102      	movs	r1, #2
1005e6ce:	79b3      	ldrb	r3, [r6, #6]
1005e6d0:	2000      	movs	r0, #0
1005e6d2:	429a      	cmp	r2, r3
1005e6d4:	4603      	mov	r3, r0
1005e6d6:	d000      	beq.n	1005e6da <LL_compute_phy_upd_ind+0xb2>
1005e6d8:	4613      	mov	r3, r2
1005e6da:	7233      	strb	r3, [r6, #8]
1005e6dc:	79f2      	ldrb	r2, [r6, #7]
1005e6de:	4291      	cmp	r1, r2
1005e6e0:	d000      	beq.n	1005e6e4 <LL_compute_phy_upd_ind+0xbc>
1005e6e2:	4608      	mov	r0, r1
1005e6e4:	7270      	strb	r0, [r6, #9]
1005e6e6:	4620      	mov	r0, r4
1005e6e8:	f7fb fcaa 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e6ec:	4605      	mov	r5, r0
1005e6ee:	7a70      	ldrb	r0, [r6, #9]
1005e6f0:	2800      	cmp	r0, #0
1005e6f2:	d102      	bne.n	1005e6fa <LL_compute_phy_upd_ind+0xd2>
1005e6f4:	7a30      	ldrb	r0, [r6, #8]
1005e6f6:	2800      	cmp	r0, #0
1005e6f8:	d015      	beq.n	1005e726 <LL_compute_phy_upd_ind+0xfe>
1005e6fa:	4620      	mov	r0, r4
1005e6fc:	f7fe f922 	bl	1005c944 <llc_cpe_calc_instant>
1005e700:	2198      	movs	r1, #152	@ 0x98
1005e702:	5268      	strh	r0, [r5, r1]
1005e704:	7a31      	ldrb	r1, [r6, #8]
1005e706:	2900      	cmp	r1, #0
1005e708:	d010      	beq.n	1005e72c <LL_compute_phy_upd_ind+0x104>
1005e70a:	79f0      	ldrb	r0, [r6, #7]
1005e70c:	9700      	str	r7, [sp, #0]
1005e70e:	4008      	ands	r0, r1
1005e710:	0740      	lsls	r0, r0, #29
1005e712:	0fc2      	lsrs	r2, r0, #31
1005e714:	2301      	movs	r3, #1
1005e716:	4620      	mov	r0, r4
1005e718:	f000 f950 	bl	1005e9bc <LL_adjust_max_tx_data_frag>
1005e71c:	7a31      	ldrb	r1, [r6, #8]
1005e71e:	4620      	mov	r0, r4
1005e720:	f7fe fd81 	bl	1005d226 <LLC_connection_cte_response_pause_resume_ucfg_weak>
1005e724:	e002      	b.n	1005e72c <LL_compute_phy_upd_ind+0x104>
1005e726:	2098      	movs	r0, #152	@ 0x98
1005e728:	2100      	movs	r1, #0
1005e72a:	5229      	strh	r1, [r5, r0]
1005e72c:	9802      	ldr	r0, [sp, #8]
1005e72e:	2801      	cmp	r0, #1
1005e730:	d009      	beq.n	1005e746 <LL_compute_phy_upd_ind+0x11e>
1005e732:	4620      	mov	r0, r4
1005e734:	9d01      	ldr	r5, [sp, #4]
1005e736:	4629      	mov	r1, r5
1005e738:	f7fd fb2e 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005e73c:	2202      	movs	r2, #2
1005e73e:	4620      	mov	r0, r4
1005e740:	4629      	mov	r1, r5
1005e742:	f7fd fb19 	bl	1005bd78 <LL_cpe_set_blocked>
1005e746:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005e748 <LL_process_unknown_rsp_reject_ind_rcpt>:
1005e748:	b57c      	push	{r2, r3, r4, r5, r6, lr}
1005e74a:	460d      	mov	r5, r1
1005e74c:	4606      	mov	r6, r0
1005e74e:	f7fb fcab 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e752:	4604      	mov	r4, r0
1005e754:	4630      	mov	r0, r6
1005e756:	f7fb fc73 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e75a:	78a9      	ldrb	r1, [r5, #2]
1005e75c:	2907      	cmp	r1, #7
1005e75e:	d107      	bne.n	1005e770 <LL_process_unknown_rsp_reject_ind_rcpt+0x28>
1005e760:	21ff      	movs	r1, #255	@ 0xff
1005e762:	3130      	adds	r1, #48	@ 0x30
1005e764:	5c42      	ldrb	r2, [r0, r1]
1005e766:	23f6      	movs	r3, #246	@ 0xf6
1005e768:	4013      	ands	r3, r2
1005e76a:	5443      	strb	r3, [r0, r1]
1005e76c:	211a      	movs	r1, #26
1005e76e:	e000      	b.n	1005e772 <LL_process_unknown_rsp_reject_ind_rcpt+0x2a>
1005e770:	7869      	ldrb	r1, [r5, #1]
1005e772:	78ea      	ldrb	r2, [r5, #3]
1005e774:	2a00      	cmp	r2, #0
1005e776:	d000      	beq.n	1005e77a <LL_process_unknown_rsp_reject_ind_rcpt+0x32>
1005e778:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
1005e77a:	79e6      	ldrb	r6, [r4, #7]
1005e77c:	2503      	movs	r5, #3
1005e77e:	0772      	lsls	r2, r6, #29
1005e780:	d500      	bpl.n	1005e784 <LL_process_unknown_rsp_reject_ind_rcpt+0x3c>
1005e782:	462e      	mov	r6, r5
1005e784:	8f42      	ldrh	r2, [r0, #58]	@ 0x3a
1005e786:	79a3      	ldrb	r3, [r4, #6]
1005e788:	9600      	str	r6, [sp, #0]
1005e78a:	0758      	lsls	r0, r3, #29
1005e78c:	d500      	bpl.n	1005e790 <LL_process_unknown_rsp_reject_ind_rcpt+0x48>
1005e78e:	462b      	mov	r3, r5
1005e790:	2080      	movs	r0, #128	@ 0x80
1005e792:	f000 f8dd 	bl	1005e950 <hci_le_phy_update_complete_event_push>
1005e796:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

1005e798 <LL_process_phy_req_rcpt>:
1005e798:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e79a:	b085      	sub	sp, #20
1005e79c:	460f      	mov	r7, r1
1005e79e:	4604      	mov	r4, r0
1005e7a0:	f7fb fc4e 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e7a4:	4605      	mov	r5, r0
1005e7a6:	2100      	movs	r1, #0
1005e7a8:	4620      	mov	r0, r4
1005e7aa:	9102      	str	r1, [sp, #8]
1005e7ac:	f7fd fb01 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005e7b0:	4606      	mov	r6, r0
1005e7b2:	2001      	movs	r0, #1
1005e7b4:	9001      	str	r0, [sp, #4]
1005e7b6:	7470      	strb	r0, [r6, #17]
1005e7b8:	78b8      	ldrb	r0, [r7, #2]
1005e7ba:	74f0      	strb	r0, [r6, #19]
1005e7bc:	78f8      	ldrb	r0, [r7, #3]
1005e7be:	7530      	strb	r0, [r6, #20]
1005e7c0:	20b6      	movs	r0, #182	@ 0xb6
1005e7c2:	5a28      	ldrh	r0, [r5, r0]
1005e7c4:	81f0      	strh	r0, [r6, #14]
1005e7c6:	a803      	add	r0, sp, #12
1005e7c8:	7104      	strb	r4, [r0, #4]
1005e7ca:	9603      	str	r6, [sp, #12]
1005e7cc:	f7ff fc90 	bl	1005e0f0 <LL_phy_upd_compute_data_PDU_length_params_ucfg_weak>
1005e7d0:	202c      	movs	r0, #44	@ 0x2c
1005e7d2:	5c28      	ldrb	r0, [r5, r0]
1005e7d4:	352c      	adds	r5, #44	@ 0x2c
1005e7d6:	2802      	cmp	r0, #2
1005e7d8:	d108      	bne.n	1005e7ec <LL_process_phy_req_rcpt+0x54>
1005e7da:	7c70      	ldrb	r0, [r6, #17]
1005e7dc:	7138      	strb	r0, [r7, #4]
1005e7de:	4620      	mov	r0, r4
1005e7e0:	4639      	mov	r1, r7
1005e7e2:	f7ff ff21 	bl	1005e628 <LL_compute_phy_upd_ind>
1005e7e6:	9802      	ldr	r0, [sp, #8]
1005e7e8:	7430      	strb	r0, [r6, #16]
1005e7ea:	e025      	b.n	1005e838 <LL_process_phy_req_rcpt+0xa0>
1005e7ec:	4620      	mov	r0, r4
1005e7ee:	f7fb fc5b 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e7f2:	7881      	ldrb	r1, [r0, #2]
1005e7f4:	7571      	strb	r1, [r6, #21]
1005e7f6:	78c7      	ldrb	r7, [r0, #3]
1005e7f8:	75b7      	strb	r7, [r6, #22]
1005e7fa:	7d33      	ldrb	r3, [r6, #20]
1005e7fc:	400b      	ands	r3, r1
1005e7fe:	b2db      	uxtb	r3, r3
1005e800:	2b00      	cmp	r3, #0
1005e802:	d019      	beq.n	1005e838 <LL_process_phy_req_rcpt+0xa0>
1005e804:	7981      	ldrb	r1, [r0, #6]
1005e806:	428b      	cmp	r3, r1
1005e808:	d016      	beq.n	1005e838 <LL_process_phy_req_rcpt+0xa0>
1005e80a:	07d9      	lsls	r1, r3, #31
1005e80c:	d002      	beq.n	1005e814 <LL_process_phy_req_rcpt+0x7c>
1005e80e:	9a01      	ldr	r2, [sp, #4]
1005e810:	4611      	mov	r1, r2
1005e812:	e001      	b.n	1005e818 <LL_process_phy_req_rcpt+0x80>
1005e814:	2102      	movs	r1, #2
1005e816:	9a01      	ldr	r2, [sp, #4]
1005e818:	075b      	lsls	r3, r3, #29
1005e81a:	d500      	bpl.n	1005e81e <LL_process_phy_req_rcpt+0x86>
1005e81c:	2104      	movs	r1, #4
1005e81e:	7cf3      	ldrb	r3, [r6, #19]
1005e820:	401f      	ands	r7, r3
1005e822:	077b      	lsls	r3, r7, #29
1005e824:	d403      	bmi.n	1005e82e <LL_process_phy_req_rcpt+0x96>
1005e826:	79c0      	ldrb	r0, [r0, #7]
1005e828:	1f00      	subs	r0, r0, #4
1005e82a:	4242      	negs	r2, r0
1005e82c:	4142      	adcs	r2, r0
1005e82e:	9600      	str	r6, [sp, #0]
1005e830:	2301      	movs	r3, #1
1005e832:	4620      	mov	r0, r4
1005e834:	f000 f8c2 	bl	1005e9bc <LL_adjust_max_tx_data_frag>
1005e838:	2600      	movs	r6, #0
1005e83a:	4620      	mov	r0, r4
1005e83c:	4631      	mov	r1, r6
1005e83e:	f7fd faab 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005e842:	2207      	movs	r2, #7
1005e844:	2301      	movs	r3, #1
1005e846:	4620      	mov	r0, r4
1005e848:	4631      	mov	r1, r6
1005e84a:	f7fd fa5c 	bl	1005bd06 <LL_cpe_set_active>
1005e84e:	7828      	ldrb	r0, [r5, #0]
1005e850:	2802      	cmp	r0, #2
1005e852:	d104      	bne.n	1005e85e <LL_process_phy_req_rcpt+0xc6>
1005e854:	2100      	movs	r1, #0
1005e856:	2202      	movs	r2, #2
1005e858:	4620      	mov	r0, r4
1005e85a:	f7fd fa8d 	bl	1005bd78 <LL_cpe_set_blocked>
1005e85e:	b005      	add	sp, #20
1005e860:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1005e864 <LL_phy_upd_evt_pending_check_isr>:
1005e864:	b5f0      	push	{r4, r5, r6, r7, lr}
1005e866:	b087      	sub	sp, #28
1005e868:	4605      	mov	r5, r0
1005e86a:	f7fb fbe9 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e86e:	4604      	mov	r4, r0
1005e870:	4628      	mov	r0, r5
1005e872:	f7fb fc19 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e876:	4605      	mov	r5, r0
1005e878:	209a      	movs	r0, #154	@ 0x9a
1005e87a:	5a26      	ldrh	r6, [r4, r0]
1005e87c:	05b0      	lsls	r0, r6, #22
1005e87e:	4627      	mov	r7, r4
1005e880:	379a      	adds	r7, #154	@ 0x9a
1005e882:	2800      	cmp	r0, #0
1005e884:	d545      	bpl.n	1005e912 <LL_phy_upd_evt_pending_check_isr+0xae>
1005e886:	482e      	ldr	r0, [pc, #184]	@ (1005e940 <__arm_cp.15_0>)
1005e888:	6800      	ldr	r0, [r0, #0]
1005e88a:	213d      	movs	r1, #61	@ 0x3d
1005e88c:	5c41      	ldrb	r1, [r0, r1]
1005e88e:	0689      	lsls	r1, r1, #26
1005e890:	d53b      	bpl.n	1005e90a <LL_phy_upd_evt_pending_check_isr+0xa6>
1005e892:	303d      	adds	r0, #61	@ 0x3d
1005e894:	7a40      	ldrb	r0, [r0, #9]
1005e896:	0640      	lsls	r0, r0, #25
1005e898:	d537      	bpl.n	1005e90a <LL_phy_upd_evt_pending_check_isr+0xa6>
1005e89a:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
1005e89c:	9002      	str	r0, [sp, #8]
1005e89e:	8bf8      	ldrh	r0, [r7, #30]
1005e8a0:	9003      	str	r0, [sp, #12]
1005e8a2:	8c38      	ldrh	r0, [r7, #32]
1005e8a4:	9004      	str	r0, [sp, #16]
1005e8a6:	8b78      	ldrh	r0, [r7, #26]
1005e8a8:	9005      	str	r0, [sp, #20]
1005e8aa:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
1005e8ac:	9006      	str	r0, [sp, #24]
1005e8ae:	4825      	ldr	r0, [pc, #148]	@ (1005e944 <__arm_cp.15_1>)
1005e8b0:	6800      	ldr	r0, [r0, #0]
1005e8b2:	6900      	ldr	r0, [r0, #16]
1005e8b4:	2180      	movs	r1, #128	@ 0x80
1005e8b6:	2226      	movs	r2, #38	@ 0x26
1005e8b8:	2304      	movs	r3, #4
1005e8ba:	9301      	str	r3, [sp, #4]
1005e8bc:	f7f6 fc9a 	bl	100551f4 <aci_event_fifo_push_header>
1005e8c0:	2800      	cmp	r0, #0
1005e8c2:	d022      	beq.n	1005e90a <LL_phy_upd_evt_pending_check_isr+0xa6>
1005e8c4:	4601      	mov	r1, r0
1005e8c6:	9a02      	ldr	r2, [sp, #8]
1005e8c8:	7402      	strb	r2, [r0, #16]
1005e8ca:	9b03      	ldr	r3, [sp, #12]
1005e8cc:	7383      	strb	r3, [r0, #14]
1005e8ce:	9804      	ldr	r0, [sp, #16]
1005e8d0:	7308      	strb	r0, [r1, #12]
1005e8d2:	9805      	ldr	r0, [sp, #20]
1005e8d4:	7288      	strb	r0, [r1, #10]
1005e8d6:	9806      	ldr	r0, [sp, #24]
1005e8d8:	7208      	strb	r0, [r1, #8]
1005e8da:	2007      	movs	r0, #7
1005e8dc:	71c8      	strb	r0, [r1, #7]
1005e8de:	200b      	movs	r0, #11
1005e8e0:	7188      	strb	r0, [r1, #6]
1005e8e2:	203e      	movs	r0, #62	@ 0x3e
1005e8e4:	7148      	strb	r0, [r1, #5]
1005e8e6:	9801      	ldr	r0, [sp, #4]
1005e8e8:	7108      	strb	r0, [r1, #4]
1005e8ea:	0a10      	lsrs	r0, r2, #8
1005e8ec:	7448      	strb	r0, [r1, #17]
1005e8ee:	0a18      	lsrs	r0, r3, #8
1005e8f0:	73c8      	strb	r0, [r1, #15]
1005e8f2:	9804      	ldr	r0, [sp, #16]
1005e8f4:	0a00      	lsrs	r0, r0, #8
1005e8f6:	7348      	strb	r0, [r1, #13]
1005e8f8:	9805      	ldr	r0, [sp, #20]
1005e8fa:	0a00      	lsrs	r0, r0, #8
1005e8fc:	72c8      	strb	r0, [r1, #11]
1005e8fe:	9806      	ldr	r0, [sp, #24]
1005e900:	0a00      	lsrs	r0, r0, #8
1005e902:	7248      	strb	r0, [r1, #9]
1005e904:	2080      	movs	r0, #128	@ 0x80
1005e906:	f7f6 fd12 	bl	1005532e <aci_event_fifo_push>
1005e90a:	8838      	ldrh	r0, [r7, #0]
1005e90c:	490e      	ldr	r1, [pc, #56]	@ (1005e948 <__arm_cp.15_2>)
1005e90e:	4001      	ands	r1, r0
1005e910:	8039      	strh	r1, [r7, #0]
1005e912:	05f0      	lsls	r0, r6, #23
1005e914:	d512      	bpl.n	1005e93c <LL_phy_upd_evt_pending_check_isr+0xd8>
1005e916:	79e9      	ldrb	r1, [r5, #7]
1005e918:	2003      	movs	r0, #3
1005e91a:	074a      	lsls	r2, r1, #29
1005e91c:	d500      	bpl.n	1005e920 <LL_phy_upd_evt_pending_check_isr+0xbc>
1005e91e:	4601      	mov	r1, r0
1005e920:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
1005e922:	79ab      	ldrb	r3, [r5, #6]
1005e924:	9100      	str	r1, [sp, #0]
1005e926:	0759      	lsls	r1, r3, #29
1005e928:	d500      	bpl.n	1005e92c <LL_phy_upd_evt_pending_check_isr+0xc8>
1005e92a:	4603      	mov	r3, r0
1005e92c:	2080      	movs	r0, #128	@ 0x80
1005e92e:	2100      	movs	r1, #0
1005e930:	f000 f80e 	bl	1005e950 <hci_le_phy_update_complete_event_push>
1005e934:	8838      	ldrh	r0, [r7, #0]
1005e936:	4905      	ldr	r1, [pc, #20]	@ (1005e94c <__arm_cp.15_3>)
1005e938:	4001      	ands	r1, r0
1005e93a:	8039      	strh	r1, [r7, #0]
1005e93c:	b007      	add	sp, #28
1005e93e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005e940 <__arm_cp.15_0>:
1005e940:	20002ad0 	.word	0x20002ad0

1005e944 <__arm_cp.15_1>:
1005e944:	20002a80 	.word	0x20002a80

1005e948 <__arm_cp.15_2>:
1005e948:	0000fdff 	.word	0x0000fdff

1005e94c <__arm_cp.15_3>:
1005e94c:	0000feff 	.word	0x0000feff

1005e950 <hci_le_phy_update_complete_event_push>:
1005e950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005e952:	4604      	mov	r4, r0
1005e954:	06c0      	lsls	r0, r0, #27
1005e956:	d42c      	bmi.n	1005e9b2 <hci_le_phy_update_complete_event_push+0x62>
1005e958:	460f      	mov	r7, r1
1005e95a:	4816      	ldr	r0, [pc, #88]	@ (1005e9b4 <__arm_cp.16_0>)
1005e95c:	6800      	ldr	r0, [r0, #0]
1005e95e:	213d      	movs	r1, #61	@ 0x3d
1005e960:	5c41      	ldrb	r1, [r0, r1]
1005e962:	0689      	lsls	r1, r1, #26
1005e964:	d525      	bpl.n	1005e9b2 <hci_le_phy_update_complete_event_push+0x62>
1005e966:	303d      	adds	r0, #61	@ 0x3d
1005e968:	7a80      	ldrb	r0, [r0, #10]
1005e96a:	0700      	lsls	r0, r0, #28
1005e96c:	d521      	bpl.n	1005e9b2 <hci_le_phy_update_complete_event_push+0x62>
1005e96e:	461e      	mov	r6, r3
1005e970:	4615      	mov	r5, r2
1005e972:	4811      	ldr	r0, [pc, #68]	@ (1005e9b8 <__arm_cp.16_1>)
1005e974:	6800      	ldr	r0, [r0, #0]
1005e976:	0761      	lsls	r1, r4, #29
1005e978:	0ec9      	lsrs	r1, r1, #27
1005e97a:	1840      	adds	r0, r0, r1
1005e97c:	6900      	ldr	r0, [r0, #16]
1005e97e:	2227      	movs	r2, #39	@ 0x27
1005e980:	2303      	movs	r3, #3
1005e982:	4621      	mov	r1, r4
1005e984:	f7f6 fc36 	bl	100551f4 <aci_event_fifo_push_header>
1005e988:	2800      	cmp	r0, #0
1005e98a:	d012      	beq.n	1005e9b2 <hci_le_phy_update_complete_event_push+0x62>
1005e98c:	4601      	mov	r1, r0
1005e98e:	9806      	ldr	r0, [sp, #24]
1005e990:	724d      	strb	r5, [r1, #9]
1005e992:	7308      	strb	r0, [r1, #12]
1005e994:	72ce      	strb	r6, [r1, #11]
1005e996:	720f      	strb	r7, [r1, #8]
1005e998:	200c      	movs	r0, #12
1005e99a:	71c8      	strb	r0, [r1, #7]
1005e99c:	2006      	movs	r0, #6
1005e99e:	7188      	strb	r0, [r1, #6]
1005e9a0:	203e      	movs	r0, #62	@ 0x3e
1005e9a2:	7148      	strb	r0, [r1, #5]
1005e9a4:	2004      	movs	r0, #4
1005e9a6:	7108      	strb	r0, [r1, #4]
1005e9a8:	0a28      	lsrs	r0, r5, #8
1005e9aa:	7288      	strb	r0, [r1, #10]
1005e9ac:	4620      	mov	r0, r4
1005e9ae:	f7f6 fcbe 	bl	1005532e <aci_event_fifo_push>
1005e9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005e9b4 <__arm_cp.16_0>:
1005e9b4:	20002ad0 	.word	0x20002ad0

1005e9b8 <__arm_cp.16_1>:
1005e9b8:	20002a80 	.word	0x20002a80

1005e9bc <LL_adjust_max_tx_data_frag>:
1005e9bc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005e9be:	9302      	str	r3, [sp, #8]
1005e9c0:	9201      	str	r2, [sp, #4]
1005e9c2:	460e      	mov	r6, r1
1005e9c4:	4605      	mov	r5, r0
1005e9c6:	f7fb fb3b 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005e9ca:	4604      	mov	r4, r0
1005e9cc:	4607      	mov	r7, r0
1005e9ce:	34b4      	adds	r4, #180	@ 0xb4
1005e9d0:	4628      	mov	r0, r5
1005e9d2:	f7fb fb69 	bl	1005a0a8 <llc_conn_get_phy_upd_cntxt_per_p>
1005e9d6:	9908      	ldr	r1, [sp, #32]
1005e9d8:	2e04      	cmp	r6, #4
1005e9da:	d106      	bne.n	1005e9ea <LL_adjust_max_tx_data_frag+0x2e>
1005e9dc:	2800      	cmp	r0, #0
1005e9de:	d004      	beq.n	1005e9ea <LL_adjust_max_tx_data_frag+0x2e>
1005e9e0:	9a01      	ldr	r2, [sp, #4]
1005e9e2:	2a00      	cmp	r2, #0
1005e9e4:	d00c      	beq.n	1005ea00 <LL_adjust_max_tx_data_frag+0x44>
1005e9e6:	220a      	movs	r2, #10
1005e9e8:	e00b      	b.n	1005ea02 <LL_adjust_max_tx_data_frag+0x46>
1005e9ea:	8888      	ldrh	r0, [r1, #4]
1005e9ec:	8008      	strh	r0, [r1, #0]
1005e9ee:	2e01      	cmp	r6, #1
1005e9f0:	d102      	bne.n	1005e9f8 <LL_adjust_max_tx_data_frag+0x3c>
1005e9f2:	08c0      	lsrs	r0, r0, #3
1005e9f4:	380e      	subs	r0, #14
1005e9f6:	e001      	b.n	1005e9fc <LL_adjust_max_tx_data_frag+0x40>
1005e9f8:	0880      	lsrs	r0, r0, #2
1005e9fa:	380f      	subs	r0, #15
1005e9fc:	9e02      	ldr	r6, [sp, #8]
1005e9fe:	e00f      	b.n	1005ea20 <LL_adjust_max_tx_data_frag+0x64>
1005ea00:	2208      	movs	r2, #8
1005ea02:	9e02      	ldr	r6, [sp, #8]
1005ea04:	5a8a      	ldrh	r2, [r1, r2]
1005ea06:	800a      	strh	r2, [r1, #0]
1005ea08:	8800      	ldrh	r0, [r0, #0]
1005ea0a:	2802      	cmp	r0, #2
1005ea0c:	d001      	beq.n	1005ea12 <LL_adjust_max_tx_data_frag+0x56>
1005ea0e:	2001      	movs	r0, #1
1005ea10:	e000      	b.n	1005ea14 <LL_adjust_max_tx_data_frag+0x58>
1005ea12:	2003      	movs	r0, #3
1005ea14:	4b0b      	ldr	r3, [pc, #44]	@ (1005ea44 <__arm_cp.20_0>)
1005ea16:	18d2      	adds	r2, r2, r3
1005ea18:	40c2      	lsrs	r2, r0
1005ea1a:	480b      	ldr	r0, [pc, #44]	@ (1005ea48 <__arm_cp.20_1>)
1005ea1c:	1810      	adds	r0, r2, r0
1005ea1e:	08c0      	lsrs	r0, r0, #3
1005ea20:	b283      	uxth	r3, r0
1005ea22:	8822      	ldrh	r2, [r4, #0]
1005ea24:	429a      	cmp	r2, r3
1005ea26:	d300      	bcc.n	1005ea2a <LL_adjust_max_tx_data_frag+0x6e>
1005ea28:	4602      	mov	r2, r0
1005ea2a:	2e00      	cmp	r6, #0
1005ea2c:	d003      	beq.n	1005ea36 <LL_adjust_max_tx_data_frag+0x7a>
1005ea2e:	b293      	uxth	r3, r2
1005ea30:	89c8      	ldrh	r0, [r1, #14]
1005ea32:	4298      	cmp	r0, r3
1005ea34:	d300      	bcc.n	1005ea38 <LL_adjust_max_tx_data_frag+0x7c>
1005ea36:	4610      	mov	r0, r2
1005ea38:	8060      	strh	r0, [r4, #2]
1005ea3a:	4638      	mov	r0, r7
1005ea3c:	f7fb fdca 	bl	1005a5d4 <llc_conn_guard_time_for_close_conn_event>
1005ea40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005ea42:	46c0      	nop			@ (mov r8, r8)

1005ea44 <__arm_cp.20_0>:
1005ea44:	fffffe88 	.word	0xfffffe88

1005ea48 <__arm_cp.20_1>:
1005ea48:	0007ffb5 	.word	0x0007ffb5

1005ea4c <LL_version_exchange>:
1005ea4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ea4e:	b087      	sub	sp, #28
1005ea50:	461f      	mov	r7, r3
1005ea52:	4616      	mov	r6, r2
1005ea54:	460c      	mov	r4, r1
1005ea56:	4605      	mov	r5, r0
1005ea58:	f7fd f9ab 	bl	1005bdb2 <LL_cpe_get_cntxt>
1005ea5c:	9004      	str	r0, [sp, #16]
1005ea5e:	4628      	mov	r0, r5
1005ea60:	f7fb faee 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005ea64:	22ff      	movs	r2, #255	@ 0xff
1005ea66:	2e06      	cmp	r6, #6
1005ea68:	d900      	bls.n	1005ea6c <LL_version_exchange+0x20>
1005ea6a:	e0b2      	b.n	1005ebd2 <LL_version_exchange+0x186>
1005ea6c:	4603      	mov	r3, r0
1005ea6e:	46c0      	nop			@ (mov r8, r8)
1005ea70:	447e      	add	r6, pc
1005ea72:	7936      	ldrb	r6, [r6, #4]
1005ea74:	0076      	lsls	r6, r6, #1
1005ea76:	44b7      	add	pc, r6
1005ea78:	3aac0e03 	.word	0x3aac0e03
1005ea7c:	0053acac 	.word	0x0053acac
1005ea80:	2c01      	cmp	r4, #1
1005ea82:	d15c      	bne.n	1005eb3e <LL_version_exchange+0xf2>
1005ea84:	208c      	movs	r0, #140	@ 0x8c
1005ea86:	5818      	ldr	r0, [r3, r0]
1005ea88:	0601      	lsls	r1, r0, #24
1005ea8a:	338c      	adds	r3, #140	@ 0x8c
1005ea8c:	2900      	cmp	r1, #0
1005ea8e:	9904      	ldr	r1, [sp, #16]
1005ea90:	d460      	bmi.n	1005eb54 <LL_version_exchange+0x108>
1005ea92:	220c      	movs	r2, #12
1005ea94:	e06c      	b.n	1005eb70 <LL_version_exchange+0x124>
1005ea96:	9302      	str	r3, [sp, #8]
1005ea98:	9203      	str	r2, [sp, #12]
1005ea9a:	4628      	mov	r0, r5
1005ea9c:	f000 f8d4 	bl	1005ec48 <LL_conn_get_version_exchange_cached>
1005eaa0:	2800      	cmp	r0, #0
1005eaa2:	d000      	beq.n	1005eaa6 <LL_version_exchange+0x5a>
1005eaa4:	e094      	b.n	1005ebd0 <LL_version_exchange+0x184>
1005eaa6:	1cf8      	adds	r0, r7, #3
1005eaa8:	2205      	movs	r2, #5
1005eaaa:	9201      	str	r2, [sp, #4]
1005eaac:	9e04      	ldr	r6, [sp, #16]
1005eaae:	4631      	mov	r1, r6
1005eab0:	f004 f872 	bl	10062b98 <char_copy>
1005eab4:	9f02      	ldr	r7, [sp, #8]
1005eab6:	4639      	mov	r1, r7
1005eab8:	313c      	adds	r1, #60	@ 0x3c
1005eaba:	4630      	mov	r0, r6
1005eabc:	9a01      	ldr	r2, [sp, #4]
1005eabe:	f004 f86b 	bl	10062b98 <char_copy>
1005eac2:	208c      	movs	r0, #140	@ 0x8c
1005eac4:	5838      	ldr	r0, [r7, r0]
1005eac6:	0642      	lsls	r2, r0, #25
1005eac8:	4639      	mov	r1, r7
1005eaca:	318c      	adds	r1, #140	@ 0x8c
1005eacc:	2a00      	cmp	r2, #0
1005eace:	d46e      	bmi.n	1005ebae <LL_version_exchange+0x162>
1005ead0:	2201      	movs	r2, #1
1005ead2:	0212      	lsls	r2, r2, #8
1005ead4:	4310      	orrs	r0, r2
1005ead6:	6008      	str	r0, [r1, #0]
1005ead8:	4628      	mov	r0, r5
1005eada:	4621      	mov	r1, r4
1005eadc:	f7fd f95c 	bl	1005bd98 <LL_cpe_set_prepare_tx_pdu>
1005eae0:	2205      	movs	r2, #5
1005eae2:	2300      	movs	r3, #0
1005eae4:	4628      	mov	r0, r5
1005eae6:	4621      	mov	r1, r4
1005eae8:	f7fd f90d 	bl	1005bd06 <LL_cpe_set_active>
1005eaec:	e070      	b.n	1005ebd0 <LL_version_exchange+0x184>
1005eaee:	78b8      	ldrb	r0, [r7, #2]
1005eaf0:	280c      	cmp	r0, #12
1005eaf2:	d16e      	bne.n	1005ebd2 <LL_version_exchange+0x186>
1005eaf4:	1cf8      	adds	r0, r7, #3
1005eaf6:	2605      	movs	r6, #5
1005eaf8:	9f04      	ldr	r7, [sp, #16]
1005eafa:	4639      	mov	r1, r7
1005eafc:	9203      	str	r2, [sp, #12]
1005eafe:	4632      	mov	r2, r6
1005eb00:	9302      	str	r3, [sp, #8]
1005eb02:	f004 f849 	bl	10062b98 <char_copy>
1005eb06:	4628      	mov	r0, r5
1005eb08:	4621      	mov	r1, r4
1005eb0a:	4632      	mov	r2, r6
1005eb0c:	f7fd f912 	bl	1005bd34 <LL_cpe_clr_active>
1005eb10:	9802      	ldr	r0, [sp, #8]
1005eb12:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
1005eb14:	4639      	mov	r1, r7
1005eb16:	f000 f86f 	bl	1005ebf8 <hci_read_remote_version_information_complete_event_push>
1005eb1a:	4628      	mov	r0, r5
1005eb1c:	4639      	mov	r1, r7
1005eb1e:	e055      	b.n	1005ebcc <LL_version_exchange+0x180>
1005eb20:	4616      	mov	r6, r2
1005eb22:	a806      	add	r0, sp, #24
1005eb24:	2130      	movs	r1, #48	@ 0x30
1005eb26:	8001      	strh	r1, [r0, #0]
1005eb28:	2c01      	cmp	r4, #1
1005eb2a:	d12a      	bne.n	1005eb82 <LL_version_exchange+0x136>
1005eb2c:	208c      	movs	r0, #140	@ 0x8c
1005eb2e:	5818      	ldr	r0, [r3, r0]
1005eb30:	05c1      	lsls	r1, r0, #23
1005eb32:	d421      	bmi.n	1005eb78 <LL_version_exchange+0x12c>
1005eb34:	338c      	adds	r3, #140	@ 0x8c
1005eb36:	2140      	movs	r1, #64	@ 0x40
1005eb38:	4308      	orrs	r0, r1
1005eb3a:	6018      	str	r0, [r3, #0]
1005eb3c:	e021      	b.n	1005eb82 <LL_version_exchange+0x136>
1005eb3e:	4616      	mov	r6, r2
1005eb40:	2205      	movs	r2, #5
1005eb42:	4628      	mov	r0, r5
1005eb44:	4621      	mov	r1, r4
1005eb46:	f7fd f8f5 	bl	1005bd34 <LL_cpe_clr_active>
1005eb4a:	4628      	mov	r0, r5
1005eb4c:	9904      	ldr	r1, [sp, #16]
1005eb4e:	f000 f843 	bl	1005ebd8 <LL_conn_version_exchange_set_cached>
1005eb52:	e02a      	b.n	1005ebaa <LL_version_exchange+0x15e>
1005eb54:	4628      	mov	r0, r5
1005eb56:	461c      	mov	r4, r3
1005eb58:	f000 f83e 	bl	1005ebd8 <LL_conn_version_exchange_set_cached>
1005eb5c:	2101      	movs	r1, #1
1005eb5e:	2205      	movs	r2, #5
1005eb60:	4628      	mov	r0, r5
1005eb62:	f7fd f8e7 	bl	1005bd34 <LL_cpe_clr_active>
1005eb66:	4623      	mov	r3, r4
1005eb68:	6820      	ldr	r0, [r4, #0]
1005eb6a:	2180      	movs	r1, #128	@ 0x80
1005eb6c:	4388      	bics	r0, r1
1005eb6e:	22ff      	movs	r2, #255	@ 0xff
1005eb70:	2140      	movs	r1, #64	@ 0x40
1005eb72:	4388      	bics	r0, r1
1005eb74:	6018      	str	r0, [r3, #0]
1005eb76:	e02c      	b.n	1005ebd2 <LL_version_exchange+0x186>
1005eb78:	2101      	movs	r1, #1
1005eb7a:	2205      	movs	r2, #5
1005eb7c:	4628      	mov	r0, r5
1005eb7e:	f7fd f8d9 	bl	1005bd34 <LL_cpe_clr_active>
1005eb82:	200d      	movs	r0, #13
1005eb84:	70f8      	strb	r0, [r7, #3]
1005eb86:	200c      	movs	r0, #12
1005eb88:	70b8      	strb	r0, [r7, #2]
1005eb8a:	2006      	movs	r0, #6
1005eb8c:	7078      	strb	r0, [r7, #1]
1005eb8e:	2503      	movs	r5, #3
1005eb90:	703d      	strb	r5, [r7, #0]
1005eb92:	1d39      	adds	r1, r7, #4
1005eb94:	a806      	add	r0, sp, #24
1005eb96:	2402      	movs	r4, #2
1005eb98:	4622      	mov	r2, r4
1005eb9a:	f003 fffd 	bl	10062b98 <char_copy>
1005eb9e:	a805      	add	r0, sp, #20
1005eba0:	8005      	strh	r5, [r0, #0]
1005eba2:	1db9      	adds	r1, r7, #6
1005eba4:	4622      	mov	r2, r4
1005eba6:	f003 fff7 	bl	10062b98 <char_copy>
1005ebaa:	4632      	mov	r2, r6
1005ebac:	e011      	b.n	1005ebd2 <LL_version_exchange+0x186>
1005ebae:	2280      	movs	r2, #128	@ 0x80
1005ebb0:	4310      	orrs	r0, r2
1005ebb2:	6008      	str	r0, [r1, #0]
1005ebb4:	2205      	movs	r2, #5
1005ebb6:	4628      	mov	r0, r5
1005ebb8:	4621      	mov	r1, r4
1005ebba:	463c      	mov	r4, r7
1005ebbc:	f7fd f8ba 	bl	1005bd34 <LL_cpe_clr_active>
1005ebc0:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
1005ebc2:	4631      	mov	r1, r6
1005ebc4:	f000 f818 	bl	1005ebf8 <hci_read_remote_version_information_complete_event_push>
1005ebc8:	4628      	mov	r0, r5
1005ebca:	4631      	mov	r1, r6
1005ebcc:	f000 f804 	bl	1005ebd8 <LL_conn_version_exchange_set_cached>
1005ebd0:	9a03      	ldr	r2, [sp, #12]
1005ebd2:	4610      	mov	r0, r2
1005ebd4:	b007      	add	sp, #28
1005ebd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ebd8 <LL_conn_version_exchange_set_cached>:
1005ebd8:	b510      	push	{r4, lr}
1005ebda:	460c      	mov	r4, r1
1005ebdc:	f7fb fa30 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005ebe0:	4601      	mov	r1, r0
1005ebe2:	208c      	movs	r0, #140	@ 0x8c
1005ebe4:	580a      	ldr	r2, [r1, r0]
1005ebe6:	2308      	movs	r3, #8
1005ebe8:	4313      	orrs	r3, r2
1005ebea:	500b      	str	r3, [r1, r0]
1005ebec:	313c      	adds	r1, #60	@ 0x3c
1005ebee:	2205      	movs	r2, #5
1005ebf0:	4620      	mov	r0, r4
1005ebf2:	f003 ffd1 	bl	10062b98 <char_copy>
1005ebf6:	bd10      	pop	{r4, pc}

1005ebf8 <hci_read_remote_version_information_complete_event_push>:
1005ebf8:	b570      	push	{r4, r5, r6, lr}
1005ebfa:	460c      	mov	r4, r1
1005ebfc:	4605      	mov	r5, r0
1005ebfe:	4810      	ldr	r0, [pc, #64]	@ (1005ec40 <__arm_cp.2_0>)
1005ec00:	6800      	ldr	r0, [r0, #0]
1005ec02:	2137      	movs	r1, #55	@ 0x37
1005ec04:	5c40      	ldrb	r0, [r0, r1]
1005ec06:	0700      	lsls	r0, r0, #28
1005ec08:	d519      	bpl.n	1005ec3e <hci_read_remote_version_information_complete_event_push+0x46>
1005ec0a:	480e      	ldr	r0, [pc, #56]	@ (1005ec44 <__arm_cp.2_1>)
1005ec0c:	6800      	ldr	r0, [r0, #0]
1005ec0e:	6980      	ldr	r0, [r0, #24]
1005ec10:	2102      	movs	r1, #2
1005ec12:	2221      	movs	r2, #33	@ 0x21
1005ec14:	2303      	movs	r3, #3
1005ec16:	f7f6 faed 	bl	100551f4 <aci_event_fifo_push_header>
1005ec1a:	2800      	cmp	r0, #0
1005ec1c:	d00f      	beq.n	1005ec3e <hci_read_remote_version_information_complete_event_push+0x46>
1005ec1e:	4606      	mov	r6, r0
1005ec20:	1d00      	adds	r0, r0, #4
1005ec22:	4629      	mov	r1, r5
1005ec24:	4622      	mov	r2, r4
1005ec26:	f7f6 fe07 	bl	10055838 <hci_read_remote_version_information_complete_event_copy>
1005ec2a:	2008      	movs	r0, #8
1005ec2c:	71b0      	strb	r0, [r6, #6]
1005ec2e:	200c      	movs	r0, #12
1005ec30:	7170      	strb	r0, [r6, #5]
1005ec32:	2004      	movs	r0, #4
1005ec34:	7130      	strb	r0, [r6, #4]
1005ec36:	2002      	movs	r0, #2
1005ec38:	4631      	mov	r1, r6
1005ec3a:	f7f6 fb78 	bl	1005532e <aci_event_fifo_push>
1005ec3e:	bd70      	pop	{r4, r5, r6, pc}

1005ec40 <__arm_cp.2_0>:
1005ec40:	20002ad0 	.word	0x20002ad0

1005ec44 <__arm_cp.2_1>:
1005ec44:	20002a80 	.word	0x20002a80

1005ec48 <LL_conn_get_version_exchange_cached>:
1005ec48:	b580      	push	{r7, lr}
1005ec4a:	f7fb f9f9 	bl	1005a040 <llc_conn_get_cntxt_per_p>
1005ec4e:	218c      	movs	r1, #140	@ 0x8c
1005ec50:	5840      	ldr	r0, [r0, r1]
1005ec52:	0700      	lsls	r0, r0, #28
1005ec54:	0fc0      	lsrs	r0, r0, #31
1005ec56:	bd80      	pop	{r7, pc}

1005ec58 <llc_cte_get_ctxt>:
1005ec58:	4802      	ldr	r0, [pc, #8]	@ (1005ec64 <__arm_cp.2_0>)
1005ec5a:	6800      	ldr	r0, [r0, #0]
1005ec5c:	219c      	movs	r1, #156	@ 0x9c
1005ec5e:	5840      	ldr	r0, [r0, r1]
1005ec60:	6d00      	ldr	r0, [r0, #80]	@ 0x50
1005ec62:	4770      	bx	lr

1005ec64 <__arm_cp.2_0>:
1005ec64:	20002ad0 	.word	0x20002ad0

1005ec68 <llc_cte_init_ucfg_weak>:
1005ec68:	4770      	bx	lr

1005ec6a <llc_cte_mem_allocate_ucfg_weak>:
1005ec6a:	4770      	bx	lr

1005ec6c <llc_cte_timer_error_ucfg_weak>:
1005ec6c:	4770      	bx	lr

1005ec6e <llc_cte_timer_stop_ucfg_weak>:
1005ec6e:	2000      	movs	r0, #0
1005ec70:	4770      	bx	lr
	...

1005ec74 <LL_dtm_init>:
1005ec74:	b5b0      	push	{r4, r5, r7, lr}
1005ec76:	480e      	ldr	r0, [pc, #56]	@ (1005ecb0 <__arm_cp.0_0>)
1005ec78:	6800      	ldr	r0, [r0, #0]
1005ec7a:	21ac      	movs	r1, #172	@ 0xac
1005ec7c:	5844      	ldr	r4, [r0, r1]
1005ec7e:	20ff      	movs	r0, #255	@ 0xff
1005ec80:	77a0      	strb	r0, [r4, #30]
1005ec82:	2500      	movs	r5, #0
1005ec84:	77e5      	strb	r5, [r4, #31]
1005ec86:	f7fa fca9 	bl	100595dc <cte_csr_ucfg_weak>
1005ec8a:	2801      	cmp	r0, #1
1005ec8c:	d10f      	bne.n	1005ecae <LL_dtm_init+0x3a>
1005ec8e:	f7ff ffe3 	bl	1005ec58 <llc_cte_get_ctxt>
1005ec92:	2224      	movs	r2, #36	@ 0x24
1005ec94:	4907      	ldr	r1, [pc, #28]	@ (1005ecb4 <__arm_cp.0_1>)
1005ec96:	5c8a      	ldrb	r2, [r1, r2]
1005ec98:	2a00      	cmp	r2, #0
1005ec9a:	462a      	mov	r2, r5
1005ec9c:	d000      	beq.n	1005eca0 <LL_dtm_init+0x2c>
1005ec9e:	6802      	ldr	r2, [r0, #0]
1005eca0:	62a2      	str	r2, [r4, #40]	@ 0x28
1005eca2:	2223      	movs	r2, #35	@ 0x23
1005eca4:	5c89      	ldrb	r1, [r1, r2]
1005eca6:	2900      	cmp	r1, #0
1005eca8:	d000      	beq.n	1005ecac <LL_dtm_init+0x38>
1005ecaa:	6845      	ldr	r5, [r0, #4]
1005ecac:	62e5      	str	r5, [r4, #44]	@ 0x2c
1005ecae:	bdb0      	pop	{r4, r5, r7, pc}

1005ecb0 <__arm_cp.0_0>:
1005ecb0:	20002ad0 	.word	0x20002ad0

1005ecb4 <__arm_cp.0_1>:
1005ecb4:	20002ae4 	.word	0x20002ae4

1005ecb8 <LL_eadv_switchbackupdata_data_struc>:
1005ecb8:	b510      	push	{r4, lr}
1005ecba:	7c01      	ldrb	r1, [r0, #16]
1005ecbc:	2902      	cmp	r1, #2
1005ecbe:	d109      	bne.n	1005ecd4 <LL_eadv_switchbackupdata_data_struc+0x1c>
1005ecc0:	2401      	movs	r4, #1
1005ecc2:	7404      	strb	r4, [r0, #16]
1005ecc4:	6801      	ldr	r1, [r0, #0]
1005ecc6:	6882      	ldr	r2, [r0, #8]
1005ecc8:	68c3      	ldr	r3, [r0, #12]
1005ecca:	c00c      	stmia	r0!, {r2, r3}
1005eccc:	20a1      	movs	r0, #161	@ 0xa1
1005ecce:	f005 fa0b 	bl	100640e8 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005ecd2:	e000      	b.n	1005ecd6 <LL_eadv_switchbackupdata_data_struc+0x1e>
1005ecd4:	2400      	movs	r4, #0
1005ecd6:	4620      	mov	r0, r4
1005ecd8:	bd10      	pop	{r4, pc}

1005ecda <LL_eadv_Blue_Tx>:
1005ecda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ecdc:	461e      	mov	r6, r3
1005ecde:	4617      	mov	r7, r2
1005ece0:	460d      	mov	r5, r1
1005ece2:	4604      	mov	r4, r0
1005ece4:	f7f4 feac 	bl	10053a40 <BLEPLAT_CNTR_PacketInitTo0>
1005ece8:	4620      	mov	r0, r4
1005ecea:	f7f4 feb7 	bl	10053a5c <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005ecee:	4620      	mov	r0, r4
1005ecf0:	f7f4 ff33 	bl	10053b5a <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005ecf4:	4620      	mov	r0, r4
1005ecf6:	4621      	mov	r1, r4
1005ecf8:	f7f4 ff3c 	bl	10053b74 <BLEPLAT_CNTR_PacketSetNextPtr>
1005ecfc:	4620      	mov	r0, r4
1005ecfe:	4639      	mov	r1, r7
1005ed00:	f7f4 fed3 	bl	10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>
1005ed04:	4620      	mov	r0, r4
1005ed06:	4631      	mov	r1, r6
1005ed08:	f7f4 ff8e 	bl	10053c28 <BLEPLAT_CNTR_PacketSetTimeout>
1005ed0c:	9f06      	ldr	r7, [sp, #24]
1005ed0e:	2e00      	cmp	r6, #0
1005ed10:	d002      	beq.n	1005ed18 <LL_eadv_Blue_Tx+0x3e>
1005ed12:	4620      	mov	r0, r4
1005ed14:	f7f4 ff97 	bl	10053c46 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005ed18:	4620      	mov	r0, r4
1005ed1a:	f7f4 fe6b 	bl	100539f4 <BLEPLAT_CNTR_PacketClrIncChan>
1005ed1e:	4620      	mov	r0, r4
1005ed20:	f7f4 feea 	bl	10053af8 <BLEPLAT_CNTR_PacketSetIntDone>
1005ed24:	4620      	mov	r0, r4
1005ed26:	f7f4 ffb4 	bl	10053c92 <BLEPLAT_CNTR_PacketSetTxReady>
1005ed2a:	4620      	mov	r0, r4
1005ed2c:	2f81      	cmp	r7, #129	@ 0x81
1005ed2e:	d109      	bne.n	1005ed44 <LL_eadv_Blue_Tx+0x6a>
1005ed30:	4629      	mov	r1, r5
1005ed32:	f7f4 ff3b 	bl	10053bac <BLEPLAT_CNTR_PacketSetNextSlot>
1005ed36:	4620      	mov	r0, r4
1005ed38:	f7f4 ff5c 	bl	10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>
1005ed3c:	4620      	mov	r0, r4
1005ed3e:	f7f4 ff8e 	bl	10053c5e <BLEPLAT_CNTR_PacketSetTimerTrigDone>
1005ed42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005ed44:	f7f4 ff98 	bl	10053c78 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005ed48:	4620      	mov	r0, r4
1005ed4a:	f7f4 ff22 	bl	10053b92 <BLEPLAT_CNTR_PacketSetNextRxMode>
1005ed4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ed50 <LL_eadv_Blue_Rx>:
1005ed50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ed52:	461e      	mov	r6, r3
1005ed54:	4617      	mov	r7, r2
1005ed56:	460d      	mov	r5, r1
1005ed58:	4604      	mov	r4, r0
1005ed5a:	f7f4 fe71 	bl	10053a40 <BLEPLAT_CNTR_PacketInitTo0>
1005ed5e:	4620      	mov	r0, r4
1005ed60:	f7f4 fe7c 	bl	10053a5c <BLEPLAT_CNTR_PacketSetAdvPduFormat>
1005ed64:	4620      	mov	r0, r4
1005ed66:	f7f4 fef8 	bl	10053b5a <BLEPLAT_CNTR_PacketSetKeepsemareq>
1005ed6a:	4620      	mov	r0, r4
1005ed6c:	4621      	mov	r1, r4
1005ed6e:	f7f4 ff01 	bl	10053b74 <BLEPLAT_CNTR_PacketSetNextPtr>
1005ed72:	4620      	mov	r0, r4
1005ed74:	4639      	mov	r1, r7
1005ed76:	f7f4 fe98 	bl	10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>
1005ed7a:	4620      	mov	r0, r4
1005ed7c:	4631      	mov	r1, r6
1005ed7e:	f7f4 ff53 	bl	10053c28 <BLEPLAT_CNTR_PacketSetTimeout>
1005ed82:	9f07      	ldr	r7, [sp, #28]
1005ed84:	2e00      	cmp	r6, #0
1005ed86:	d002      	beq.n	1005ed8e <LL_eadv_Blue_Rx+0x3e>
1005ed88:	4620      	mov	r0, r4
1005ed8a:	f7f4 ff5c 	bl	10053c46 <BLEPLAT_CNTR_PacketSetTimer2Active>
1005ed8e:	4620      	mov	r0, r4
1005ed90:	f7f4 ff17 	bl	10053bc2 <BLEPLAT_CNTR_PacketSetNextTxMode>
1005ed94:	4620      	mov	r0, r4
1005ed96:	f7f4 fe2d 	bl	100539f4 <BLEPLAT_CNTR_PacketClrIncChan>
1005ed9a:	4620      	mov	r0, r4
1005ed9c:	f7f4 feac 	bl	10053af8 <BLEPLAT_CNTR_PacketSetIntDone>
1005eda0:	4620      	mov	r0, r4
1005eda2:	f7f4 ff69 	bl	10053c78 <BLEPLAT_CNTR_PacketSetTimerTrigRcv>
1005eda6:	4620      	mov	r0, r4
1005eda8:	f7f4 feb2 	bl	10053b10 <BLEPLAT_CNTR_PacketSetIntRcvOk>
1005edac:	4620      	mov	r0, r4
1005edae:	f7f4 ff2e 	bl	10053c0e <BLEPLAT_CNTR_PacketSetRxReady>
1005edb2:	2f81      	cmp	r7, #129	@ 0x81
1005edb4:	d107      	bne.n	1005edc6 <LL_eadv_Blue_Rx+0x76>
1005edb6:	4620      	mov	r0, r4
1005edb8:	4629      	mov	r1, r5
1005edba:	f7f4 fef7 	bl	10053bac <BLEPLAT_CNTR_PacketSetNextSlot>
1005edbe:	4620      	mov	r0, r4
1005edc0:	f7f4 fe24 	bl	10053a0c <BLEPLAT_CNTR_PacketClrPllTrig>
1005edc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005edc6:	4620      	mov	r0, r4
1005edc8:	f7f4 ff14 	bl	10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>
1005edcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005edd0 <LL_eadv_BLUE_SM>:
1005edd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005edd2:	461d      	mov	r5, r3
1005edd4:	4616      	mov	r6, r2
1005edd6:	460f      	mov	r7, r1
1005edd8:	4604      	mov	r4, r0
1005edda:	f7f5 f8d7 	bl	10053f8c <BLEPLAT_CNTR_SmInitTo0>
1005edde:	4911      	ldr	r1, [pc, #68]	@ (1005ee24 <__arm_cp.10_0>)
1005ede0:	4620      	mov	r0, r4
1005ede2:	f7f5 f8f1 	bl	10053fc8 <BLEPLAT_CNTR_SmSetAccessAddr>
1005ede6:	4910      	ldr	r1, [pc, #64]	@ (1005ee28 <__arm_cp.10_1>)
1005ede8:	4620      	mov	r0, r4
1005edea:	f7f5 f930 	bl	1005404e <BLEPLAT_CNTR_SmSetCrcInit>
1005edee:	4620      	mov	r0, r4
1005edf0:	4639      	mov	r1, r7
1005edf2:	f7f5 fa5d 	bl	100542b0 <BLEPLAT_CNTR_SmSetTxPwr>
1005edf6:	4620      	mov	r0, r4
1005edf8:	4631      	mov	r1, r6
1005edfa:	f7f5 fa32 	bl	10054262 <BLEPLAT_CNTR_SmSetTxPacketPtr>
1005edfe:	4620      	mov	r0, r4
1005ee00:	4629      	mov	r1, r5
1005ee02:	f7f5 f9c2 	bl	1005418a <BLEPLAT_CNTR_SmSetRxPacketPtr>
1005ee06:	9806      	ldr	r0, [sp, #24]
1005ee08:	2881      	cmp	r0, #129	@ 0x81
1005ee0a:	d103      	bne.n	1005ee14 <LL_eadv_BLUE_SM+0x44>
1005ee0c:	4620      	mov	r0, r4
1005ee0e:	f7f5 fa19 	bl	10054244 <BLEPLAT_CNTR_SmSetTxMode>
1005ee12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005ee14:	4620      	mov	r0, r4
1005ee16:	f7f5 f9a9 	bl	1005416c <BLEPLAT_CNTR_SmSetRxMode>
1005ee1a:	2101      	movs	r1, #1
1005ee1c:	4620      	mov	r0, r4
1005ee1e:	f7f5 f93d 	bl	1005409c <BLEPLAT_CNTR_SmSetHopIncr>
1005ee22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005ee24 <__arm_cp.10_0>:
1005ee24:	8e89bed6 	.word	0x8e89bed6

1005ee28 <__arm_cp.10_1>:
1005ee28:	00555555 	.word	0x00555555

1005ee2c <llc_get_advertising_set_index>:
1005ee2c:	b570      	push	{r4, r5, r6, lr}
1005ee2e:	4604      	mov	r4, r0
1005ee30:	f001 fa94 	bl	1006035c <llc_get_linkms_cntxt_p>
1005ee34:	214d      	movs	r1, #77	@ 0x4d
1005ee36:	5c41      	ldrb	r1, [r0, r1]
1005ee38:	4d09      	ldr	r5, [pc, #36]	@ (1005ee60 <__arm_cp.12_0>)
1005ee3a:	2200      	movs	r2, #0
1005ee3c:	23be      	movs	r3, #190	@ 0xbe
1005ee3e:	4291      	cmp	r1, r2
1005ee40:	d00b      	beq.n	1005ee5a <llc_get_advertising_set_index+0x2e>
1005ee42:	6806      	ldr	r6, [r0, #0]
1005ee44:	5af6      	ldrh	r6, [r6, r3]
1005ee46:	42a6      	cmp	r6, r4
1005ee48:	4616      	mov	r6, r2
1005ee4a:	d000      	beq.n	1005ee4e <llc_get_advertising_set_index+0x22>
1005ee4c:	462e      	mov	r6, r5
1005ee4e:	2501      	movs	r5, #1
1005ee50:	022d      	lsls	r5, r5, #8
1005ee52:	195b      	adds	r3, r3, r5
1005ee54:	1c52      	adds	r2, r2, #1
1005ee56:	4635      	mov	r5, r6
1005ee58:	e7f1      	b.n	1005ee3e <llc_get_advertising_set_index+0x12>
1005ee5a:	b2a8      	uxth	r0, r5
1005ee5c:	bd70      	pop	{r4, r5, r6, pc}
1005ee5e:	46c0      	nop			@ (mov r8, r8)

1005ee60 <__arm_cp.12_0>:
1005ee60:	0000ffff 	.word	0x0000ffff

1005ee64 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list>:
1005ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005ee66:	4604      	mov	r4, r0
1005ee68:	f001 fa78 	bl	1006035c <llc_get_linkms_cntxt_p>
1005ee6c:	4601      	mov	r1, r0
1005ee6e:	204d      	movs	r0, #77	@ 0x4d
1005ee70:	5c08      	ldrb	r0, [r1, r0]
1005ee72:	0202      	lsls	r2, r0, #8
1005ee74:	2000      	movs	r0, #0
1005ee76:	4b0d      	ldr	r3, [pc, #52]	@ (1005eeac <__arm_cp.17_0>)
1005ee78:	4605      	mov	r5, r0
1005ee7a:	42aa      	cmp	r2, r5
1005ee7c:	d013      	beq.n	1005eea6 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x42>
1005ee7e:	680e      	ldr	r6, [r1, #0]
1005ee80:	1976      	adds	r6, r6, r5
1005ee82:	27be      	movs	r7, #190	@ 0xbe
1005ee84:	5bf7      	ldrh	r7, [r6, r7]
1005ee86:	429f      	cmp	r7, r3
1005ee88:	d003      	beq.n	1005ee92 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x2e>
1005ee8a:	27ce      	movs	r7, #206	@ 0xce
1005ee8c:	5df7      	ldrb	r7, [r6, r7]
1005ee8e:	2f01      	cmp	r7, #1
1005ee90:	d003      	beq.n	1005ee9a <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x36>
1005ee92:	2601      	movs	r6, #1
1005ee94:	0236      	lsls	r6, r6, #8
1005ee96:	19ad      	adds	r5, r5, r6
1005ee98:	e7ef      	b.n	1005ee7a <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x16>
1005ee9a:	2c00      	cmp	r4, #0
1005ee9c:	d004      	beq.n	1005eea8 <llc_eadv_any_adv_enabled_and_use_of_filter_accept_list+0x44>
1005ee9e:	20c3      	movs	r0, #195	@ 0xc3
1005eea0:	5c30      	ldrb	r0, [r6, r0]
1005eea2:	1e41      	subs	r1, r0, #1
1005eea4:	4188      	sbcs	r0, r1
1005eea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005eea8:	2001      	movs	r0, #1
1005eeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005eeac <__arm_cp.17_0>:
1005eeac:	0000ffff 	.word	0x0000ffff

1005eeb0 <llc_eadv_generate_new_rpa_for_one_adv_set>:
1005eeb0:	b5b0      	push	{r4, r5, r7, lr}
1005eeb2:	4604      	mov	r4, r0
1005eeb4:	20d6      	movs	r0, #214	@ 0xd6
1005eeb6:	5c20      	ldrb	r0, [r4, r0]
1005eeb8:	0780      	lsls	r0, r0, #30
1005eeba:	d401      	bmi.n	1005eec0 <llc_eadv_generate_new_rpa_for_one_adv_set+0x10>
1005eebc:	2000      	movs	r0, #0
1005eebe:	bdb0      	pop	{r4, r5, r7, pc}
1005eec0:	4625      	mov	r5, r4
1005eec2:	3584      	adds	r5, #132	@ 0x84
1005eec4:	4628      	mov	r0, r5
1005eec6:	f7fc fe42 	bl	1005bb4e <llc_priv_init_random_part_of_one_local_rpa_ucfg_weak>
1005eeca:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005eecc:	4628      	mov	r0, r5
1005eece:	f7fc fe36 	bl	1005bb3e <llc_priv_generate_local_rpa_from_peer_id_ucfg_weak>
1005eed2:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
1005eed4:	3008      	adds	r0, #8
1005eed6:	2100      	movs	r1, #0
1005eed8:	f7fc fe2f 	bl	1005bb3a <llc_priv_generate_peer_rpa_from_peer_id_ucfg_weak>
1005eedc:	6f60      	ldr	r0, [r4, #116]	@ 0x74
1005eede:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
1005eee0:	6761      	str	r1, [r4, #116]	@ 0x74
1005eee2:	67a0      	str	r0, [r4, #120]	@ 0x78
1005eee4:	2001      	movs	r0, #1
1005eee6:	bdb0      	pop	{r4, r5, r7, pc}

1005eee8 <EADV_init>:
1005eee8:	b5f0      	push	{r4, r5, r6, r7, lr}
1005eeea:	b085      	sub	sp, #20
1005eeec:	9204      	str	r2, [sp, #16]
1005eeee:	460e      	mov	r6, r1
1005eef0:	4605      	mov	r5, r0
1005eef2:	244d      	movs	r4, #77	@ 0x4d
1005eef4:	f001 fa32 	bl	1006035c <llc_get_linkms_cntxt_p>
1005eef8:	5505      	strb	r5, [r0, r4]
1005eefa:	6006      	str	r6, [r0, #0]
1005eefc:	9003      	str	r0, [sp, #12]
1005eefe:	304d      	adds	r0, #77	@ 0x4d
1005ef00:	2101      	movs	r1, #1
1005ef02:	9002      	str	r0, [sp, #8]
1005ef04:	7041      	strb	r1, [r0, #1]
1005ef06:	9101      	str	r1, [sp, #4]
1005ef08:	04cb      	lsls	r3, r1, #19
1005ef0a:	2600      	movs	r6, #0
1005ef0c:	277c      	movs	r7, #124	@ 0x7c
1005ef0e:	9a04      	ldr	r2, [sp, #16]
1005ef10:	b2e8      	uxtb	r0, r5
1005ef12:	4286      	cmp	r6, r0
1005ef14:	d226      	bcs.n	1005ef64 <EADV_init+0x7c>
1005ef16:	9803      	ldr	r0, [sp, #12]
1005ef18:	6800      	ldr	r0, [r0, #0]
1005ef1a:	51c3      	str	r3, [r0, r7]
1005ef1c:	19c5      	adds	r5, r0, r7
1005ef1e:	2054      	movs	r0, #84	@ 0x54
1005ef20:	4911      	ldr	r1, [pc, #68]	@ (1005ef68 <__arm_cp.19_0>)
1005ef22:	5229      	strh	r1, [r5, r0]
1005ef24:	2452      	movs	r4, #82	@ 0x52
1005ef26:	2000      	movs	r0, #0
1005ef28:	5328      	strh	r0, [r5, r4]
1005ef2a:	2442      	movs	r4, #66	@ 0x42
1005ef2c:	5329      	strh	r1, [r5, r4]
1005ef2e:	245e      	movs	r4, #94	@ 0x5e
1005ef30:	5528      	strb	r0, [r5, r4]
1005ef32:	245c      	movs	r4, #92	@ 0x5c
1005ef34:	21ff      	movs	r1, #255	@ 0xff
1005ef36:	5529      	strb	r1, [r5, r4]
1005ef38:	215a      	movs	r1, #90	@ 0x5a
1005ef3a:	5468      	strb	r0, [r5, r1]
1005ef3c:	2146      	movs	r1, #70	@ 0x46
1005ef3e:	2407      	movs	r4, #7
1005ef40:	526c      	strh	r4, [r5, r1]
1005ef42:	6128      	str	r0, [r5, #16]
1005ef44:	6168      	str	r0, [r5, #20]
1005ef46:	606b      	str	r3, [r5, #4]
1005ef48:	9904      	ldr	r1, [sp, #16]
1005ef4a:	2900      	cmp	r1, #0
1005ef4c:	d002      	beq.n	1005ef54 <EADV_init+0x6c>
1005ef4e:	6550      	str	r0, [r2, #84]	@ 0x54
1005ef50:	3d2c      	subs	r5, #44	@ 0x2c
1005ef52:	602a      	str	r2, [r5, #0]
1005ef54:	9801      	ldr	r0, [sp, #4]
1005ef56:	0200      	lsls	r0, r0, #8
1005ef58:	183f      	adds	r7, r7, r0
1005ef5a:	325c      	adds	r2, #92	@ 0x5c
1005ef5c:	9802      	ldr	r0, [sp, #8]
1005ef5e:	7805      	ldrb	r5, [r0, #0]
1005ef60:	1c76      	adds	r6, r6, #1
1005ef62:	e7d5      	b.n	1005ef10 <EADV_init+0x28>
1005ef64:	b005      	add	sp, #20
1005ef66:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005ef68 <__arm_cp.19_0>:
1005ef68:	0000ffff 	.word	0x0000ffff

1005ef6c <LL_LE_Set_Advertising_Parameters>:
1005ef6c:	b570      	push	{r4, r5, r6, lr}
1005ef6e:	4604      	mov	r4, r0
1005ef70:	f001 f9f4 	bl	1006035c <llc_get_linkms_cntxt_p>
1005ef74:	4605      	mov	r5, r0
1005ef76:	4e30      	ldr	r6, [pc, #192]	@ (1005f038 <__arm_cp.20_0>)
1005ef78:	4630      	mov	r0, r6
1005ef7a:	f7ff ff57 	bl	1005ee2c <llc_get_advertising_set_index>
1005ef7e:	492f      	ldr	r1, [pc, #188]	@ (1005f03c <__arm_cp.20_1>)
1005ef80:	4288      	cmp	r0, r1
1005ef82:	d112      	bne.n	1005efaa <LL_LE_Set_Advertising_Parameters+0x3e>
1005ef84:	f000 f860 	bl	1005f048 <LL_Context_ReturnFree>
1005ef88:	28ff      	cmp	r0, #255	@ 0xff
1005ef8a:	d034      	beq.n	1005eff6 <LL_LE_Set_Advertising_Parameters+0x8a>
1005ef8c:	0200      	lsls	r0, r0, #8
1005ef8e:	6829      	ldr	r1, [r5, #0]
1005ef90:	1808      	adds	r0, r1, r0
1005ef92:	21be      	movs	r1, #190	@ 0xbe
1005ef94:	5246      	strh	r6, [r0, r1]
1005ef96:	214c      	movs	r1, #76	@ 0x4c
1005ef98:	2200      	movs	r2, #0
1005ef9a:	5442      	strb	r2, [r0, r1]
1005ef9c:	2138      	movs	r1, #56	@ 0x38
1005ef9e:	5442      	strb	r2, [r0, r1]
1005efa0:	63c2      	str	r2, [r0, #60]	@ 0x3c
1005efa2:	6402      	str	r2, [r0, #64]	@ 0x40
1005efa4:	6282      	str	r2, [r0, #40]	@ 0x28
1005efa6:	62c2      	str	r2, [r0, #44]	@ 0x2c
1005efa8:	e008      	b.n	1005efbc <LL_LE_Set_Advertising_Parameters+0x50>
1005efaa:	0200      	lsls	r0, r0, #8
1005efac:	6829      	ldr	r1, [r5, #0]
1005efae:	1808      	adds	r0, r1, r0
1005efb0:	21ce      	movs	r1, #206	@ 0xce
1005efb2:	5c41      	ldrb	r1, [r0, r1]
1005efb4:	2901      	cmp	r1, #1
1005efb6:	d101      	bne.n	1005efbc <LL_LE_Set_Advertising_Parameters+0x50>
1005efb8:	250c      	movs	r5, #12
1005efba:	e03a      	b.n	1005f032 <LL_LE_Set_Advertising_Parameters+0xc6>
1005efbc:	7961      	ldrb	r1, [r4, #5]
1005efbe:	22c2      	movs	r2, #194	@ 0xc2
1005efc0:	5481      	strb	r1, [r0, r2]
1005efc2:	4606      	mov	r6, r0
1005efc4:	36c2      	adds	r6, #194	@ 0xc2
1005efc6:	2500      	movs	r5, #0
1005efc8:	72f5      	strb	r5, [r6, #11]
1005efca:	2101      	movs	r1, #1
1005efcc:	70f1      	strb	r1, [r6, #3]
1005efce:	79a1      	ldrb	r1, [r4, #6]
1005efd0:	7071      	strb	r1, [r6, #1]
1005efd2:	8821      	ldrh	r1, [r4, #0]
1005efd4:	0209      	lsls	r1, r1, #8
1005efd6:	67c1      	str	r1, [r0, #124]	@ 0x7c
1005efd8:	4601      	mov	r1, r0
1005efda:	3184      	adds	r1, #132	@ 0x84
1005efdc:	7922      	ldrb	r2, [r4, #4]
1005efde:	2a04      	cmp	r2, #4
1005efe0:	d815      	bhi.n	1005f00e <LL_LE_Set_Advertising_Parameters+0xa2>
1005efe2:	46c0      	nop			@ (mov r8, r8)
1005efe4:	447a      	add	r2, pc
1005efe6:	7912      	ldrb	r2, [r2, #4]
1005efe8:	0052      	lsls	r2, r2, #1
1005efea:	4497      	add	pc, r2
1005efec:	0c0a0602 	.word	0x0c0a0602
1005eff0:	000e      	.short	0x000e
1005eff2:	20f3      	movs	r0, #243	@ 0xf3
1005eff4:	e00a      	b.n	1005f00c <LL_LE_Set_Advertising_Parameters+0xa0>
1005eff6:	2507      	movs	r5, #7
1005eff8:	e01b      	b.n	1005f032 <LL_LE_Set_Advertising_Parameters+0xc6>
1005effa:	4a11      	ldr	r2, [pc, #68]	@ (1005f040 <__arm_cp.20_2>)
1005effc:	67c2      	str	r2, [r0, #124]	@ 0x7c
1005effe:	20fd      	movs	r0, #253	@ 0xfd
1005f000:	e004      	b.n	1005f00c <LL_LE_Set_Advertising_Parameters+0xa0>
1005f002:	20f2      	movs	r0, #242	@ 0xf2
1005f004:	e002      	b.n	1005f00c <LL_LE_Set_Advertising_Parameters+0xa0>
1005f006:	20f0      	movs	r0, #240	@ 0xf0
1005f008:	e000      	b.n	1005f00c <LL_LE_Set_Advertising_Parameters+0xa0>
1005f00a:	20f5      	movs	r0, #245	@ 0xf5
1005f00c:	8688      	strh	r0, [r1, #52]	@ 0x34
1005f00e:	7a20      	ldrb	r0, [r4, #8]
1005f010:	79e2      	ldrb	r2, [r4, #7]
1005f012:	600d      	str	r5, [r1, #0]
1005f014:	604d      	str	r5, [r1, #4]
1005f016:	7532      	strb	r2, [r6, #20]
1005f018:	7570      	strb	r0, [r6, #21]
1005f01a:	7a20      	ldrb	r0, [r4, #8]
1005f01c:	7008      	strb	r0, [r1, #0]
1005f01e:	1c48      	adds	r0, r1, #1
1005f020:	3409      	adds	r4, #9
1005f022:	2206      	movs	r2, #6
1005f024:	4621      	mov	r1, r4
1005f026:	f7f3 fb99 	bl	1005275c <BLEPLAT_MemCpy>
1005f02a:	4806      	ldr	r0, [pc, #24]	@ (1005f044 <__arm_cp.20_3>)
1005f02c:	6800      	ldr	r0, [r0, #0]
1005f02e:	7a40      	ldrb	r0, [r0, #9]
1005f030:	70b0      	strb	r0, [r6, #2]
1005f032:	4628      	mov	r0, r5
1005f034:	bd70      	pop	{r4, r5, r6, pc}
1005f036:	46c0      	nop			@ (mov r8, r8)

1005f038 <__arm_cp.20_0>:
1005f038:	0000fffc 	.word	0x0000fffc

1005f03c <__arm_cp.20_1>:
1005f03c:	0000ffff 	.word	0x0000ffff

1005f040 <__arm_cp.20_2>:
1005f040:	000005dc 	.word	0x000005dc

1005f044 <__arm_cp.20_3>:
1005f044:	20002ad0 	.word	0x20002ad0

1005f048 <LL_Context_ReturnFree>:
1005f048:	b510      	push	{r4, lr}
1005f04a:	f001 f987 	bl	1006035c <llc_get_linkms_cntxt_p>
1005f04e:	214d      	movs	r1, #77	@ 0x4d
1005f050:	5c42      	ldrb	r2, [r0, r1]
1005f052:	2100      	movs	r1, #0
1005f054:	23be      	movs	r3, #190	@ 0xbe
1005f056:	428a      	cmp	r2, r1
1005f058:	d008      	beq.n	1005f06c <LL_Context_ReturnFree+0x24>
1005f05a:	6804      	ldr	r4, [r0, #0]
1005f05c:	5ae4      	ldrh	r4, [r4, r3]
1005f05e:	0b24      	lsrs	r4, r4, #12
1005f060:	d105      	bne.n	1005f06e <LL_Context_ReturnFree+0x26>
1005f062:	2401      	movs	r4, #1
1005f064:	0224      	lsls	r4, r4, #8
1005f066:	191b      	adds	r3, r3, r4
1005f068:	1c49      	adds	r1, r1, #1
1005f06a:	e7f4      	b.n	1005f056 <LL_Context_ReturnFree+0xe>
1005f06c:	21ff      	movs	r1, #255	@ 0xff
1005f06e:	b2c8      	uxtb	r0, r1
1005f070:	bd10      	pop	{r4, pc}
	...

1005f074 <LL_LE_Set_Advertise_Enable>:
1005f074:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1005f076:	4604      	mov	r4, r0
1005f078:	f000 f816 	bl	1005f0a8 <LL_LE_Set_Advertising_Parameters_Default>
1005f07c:	2300      	movs	r3, #0
1005f07e:	9300      	str	r3, [sp, #0]
1005f080:	2101      	movs	r1, #1
1005f082:	4d07      	ldr	r5, [pc, #28]	@ (1005f0a0 <__arm_cp.22_0>)
1005f084:	4620      	mov	r0, r4
1005f086:	462a      	mov	r2, r5
1005f088:	f000 f82c 	bl	1005f0e4 <LL_Set_Extented_Advertising_Enable>
1005f08c:	4604      	mov	r4, r0
1005f08e:	4805      	ldr	r0, [pc, #20]	@ (1005f0a4 <__arm_cp.22_1>)
1005f090:	6801      	ldr	r1, [r0, #0]
1005f092:	3156      	adds	r1, #86	@ 0x56
1005f094:	4628      	mov	r0, r5
1005f096:	f000 f98f 	bl	1005f3b8 <LL_Set_Extented_Advertising_Set_Random_Address>
1005f09a:	4620      	mov	r0, r4
1005f09c:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
1005f09e:	46c0      	nop			@ (mov r8, r8)

1005f0a0 <__arm_cp.22_0>:
1005f0a0:	0000fffc 	.word	0x0000fffc

1005f0a4 <__arm_cp.22_1>:
1005f0a4:	20002ad0 	.word	0x20002ad0

1005f0a8 <LL_LE_Set_Advertising_Parameters_Default>:
1005f0a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1005f0aa:	480c      	ldr	r0, [pc, #48]	@ (1005f0dc <__arm_cp.23_0>)
1005f0ac:	f7ff febe 	bl	1005ee2c <llc_get_advertising_set_index>
1005f0b0:	490b      	ldr	r1, [pc, #44]	@ (1005f0e0 <__arm_cp.23_1>)
1005f0b2:	4288      	cmp	r0, r1
1005f0b4:	d110      	bne.n	1005f0d8 <LL_LE_Set_Advertising_Parameters_Default+0x30>
1005f0b6:	466c      	mov	r4, sp
1005f0b8:	2100      	movs	r1, #0
1005f0ba:	7221      	strb	r1, [r4, #8]
1005f0bc:	2001      	movs	r0, #1
1005f0be:	02c0      	lsls	r0, r0, #11
1005f0c0:	8020      	strh	r0, [r4, #0]
1005f0c2:	2007      	movs	r0, #7
1005f0c4:	0200      	lsls	r0, r0, #8
1005f0c6:	9001      	str	r0, [sp, #4]
1005f0c8:	4620      	mov	r0, r4
1005f0ca:	3009      	adds	r0, #9
1005f0cc:	2206      	movs	r2, #6
1005f0ce:	f7f3 fb55 	bl	1005277c <BLEPLAT_MemSet>
1005f0d2:	4620      	mov	r0, r4
1005f0d4:	f7ff ff4a 	bl	1005ef6c <LL_LE_Set_Advertising_Parameters>
1005f0d8:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
1005f0da:	46c0      	nop			@ (mov r8, r8)

1005f0dc <__arm_cp.23_0>:
1005f0dc:	0000fffc 	.word	0x0000fffc

1005f0e0 <__arm_cp.23_1>:
1005f0e0:	0000ffff 	.word	0x0000ffff

1005f0e4 <LL_Set_Extented_Advertising_Enable>:
1005f0e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f0e6:	b08f      	sub	sp, #60	@ 0x3c
1005f0e8:	930e      	str	r3, [sp, #56]	@ 0x38
1005f0ea:	4617      	mov	r7, r2
1005f0ec:	460d      	mov	r5, r1
1005f0ee:	4606      	mov	r6, r0
1005f0f0:	4305      	orrs	r5, r0
1005f0f2:	f001 f933 	bl	1006035c <llc_get_linkms_cntxt_p>
1005f0f6:	4604      	mov	r4, r0
1005f0f8:	2d00      	cmp	r5, #0
1005f0fa:	d007      	beq.n	1005f10c <LL_Set_Extented_Advertising_Enable+0x28>
1005f0fc:	4638      	mov	r0, r7
1005f0fe:	f7ff fe95 	bl	1005ee2c <llc_get_advertising_set_index>
1005f102:	49a7      	ldr	r1, [pc, #668]	@ (1005f3a0 <__arm_cp.24_1>)
1005f104:	4288      	cmp	r0, r1
1005f106:	d118      	bne.n	1005f13a <LL_Set_Extented_Advertising_Enable+0x56>
1005f108:	2042      	movs	r0, #66	@ 0x42
1005f10a:	e04a      	b.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f10c:	4625      	mov	r5, r4
1005f10e:	354d      	adds	r5, #77	@ 0x4d
1005f110:	2600      	movs	r6, #0
1005f112:	4637      	mov	r7, r6
1005f114:	960e      	str	r6, [sp, #56]	@ 0x38
1005f116:	7828      	ldrb	r0, [r5, #0]
1005f118:	4286      	cmp	r6, r0
1005f11a:	d20c      	bcs.n	1005f136 <LL_Set_Extented_Advertising_Enable+0x52>
1005f11c:	6820      	ldr	r0, [r4, #0]
1005f11e:	19c0      	adds	r0, r0, r7
1005f120:	21ce      	movs	r1, #206	@ 0xce
1005f122:	5c41      	ldrb	r1, [r0, r1]
1005f124:	2901      	cmp	r1, #1
1005f126:	d101      	bne.n	1005f12c <LL_Set_Extented_Advertising_Enable+0x48>
1005f128:	f000 f992 	bl	1005f450 <EADV_stop>
1005f12c:	2001      	movs	r0, #1
1005f12e:	0200      	lsls	r0, r0, #8
1005f130:	183f      	adds	r7, r7, r0
1005f132:	1c76      	adds	r6, r6, #1
1005f134:	e7ef      	b.n	1005f116 <LL_Set_Extented_Advertising_Enable+0x32>
1005f136:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f138:	e033      	b.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f13a:	0201      	lsls	r1, r0, #8
1005f13c:	6822      	ldr	r2, [r4, #0]
1005f13e:	1854      	adds	r4, r2, r1
1005f140:	21ce      	movs	r1, #206	@ 0xce
1005f142:	5c61      	ldrb	r1, [r4, r1]
1005f144:	2e01      	cmp	r6, #1
1005f146:	d124      	bne.n	1005f192 <LL_Set_Extented_Advertising_Enable+0xae>
1005f148:	0200      	lsls	r0, r0, #8
1005f14a:	1815      	adds	r5, r2, r0
1005f14c:	20d6      	movs	r0, #214	@ 0xd6
1005f14e:	5c28      	ldrb	r0, [r5, r0]
1005f150:	2701      	movs	r7, #1
1005f152:	4038      	ands	r0, r7
1005f154:	2900      	cmp	r1, #0
1005f156:	d026      	beq.n	1005f1a6 <LL_Set_Extented_Advertising_Enable+0xc2>
1005f158:	2800      	cmp	r0, #0
1005f15a:	d00a      	beq.n	1005f172 <LL_Set_Extented_Advertising_Enable+0x8e>
1005f15c:	208c      	movs	r0, #140	@ 0x8c
1005f15e:	5828      	ldr	r0, [r5, r0]
1005f160:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005f162:	462a      	mov	r2, r5
1005f164:	328c      	adds	r2, #140	@ 0x8c
1005f166:	6852      	ldr	r2, [r2, #4]
1005f168:	c105      	stmia	r1!, {r0, r2}
1005f16a:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005f16c:	6fa9      	ldr	r1, [r5, #120]	@ 0x78
1005f16e:	6769      	str	r1, [r5, #116]	@ 0x74
1005f170:	67a8      	str	r0, [r5, #120]	@ 0x78
1005f172:	2094      	movs	r0, #148	@ 0x94
1005f174:	5828      	ldr	r0, [r5, r0]
1005f176:	2600      	movs	r6, #0
1005f178:	2800      	cmp	r0, #0
1005f17a:	d008      	beq.n	1005f18e <LL_Set_Extented_Advertising_Enable+0xaa>
1005f17c:	3594      	adds	r5, #148	@ 0x94
1005f17e:	207d      	movs	r0, #125	@ 0x7d
1005f180:	0144      	lsls	r4, r0, #5
1005f182:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f184:	4344      	muls	r4, r0
1005f186:	f7f3 fbb4 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
1005f18a:	1820      	adds	r0, r4, r0
1005f18c:	6028      	str	r0, [r5, #0]
1005f18e:	4630      	mov	r0, r6
1005f190:	e007      	b.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f192:	2000      	movs	r0, #0
1005f194:	2901      	cmp	r1, #1
1005f196:	d104      	bne.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f198:	4605      	mov	r5, r0
1005f19a:	4620      	mov	r0, r4
1005f19c:	f000 f958 	bl	1005f450 <EADV_stop>
1005f1a0:	4628      	mov	r0, r5
1005f1a2:	b00f      	add	sp, #60	@ 0x3c
1005f1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f1a6:	2800      	cmp	r0, #0
1005f1a8:	d007      	beq.n	1005f1ba <LL_Set_Extented_Advertising_Enable+0xd6>
1005f1aa:	208c      	movs	r0, #140	@ 0x8c
1005f1ac:	5828      	ldr	r0, [r5, r0]
1005f1ae:	2800      	cmp	r0, #0
1005f1b0:	d103      	bne.n	1005f1ba <LL_Set_Extented_Advertising_Enable+0xd6>
1005f1b2:	2090      	movs	r0, #144	@ 0x90
1005f1b4:	5828      	ldr	r0, [r5, r0]
1005f1b6:	2800      	cmp	r0, #0
1005f1b8:	d006      	beq.n	1005f1c8 <LL_Set_Extented_Advertising_Enable+0xe4>
1005f1ba:	20b8      	movs	r0, #184	@ 0xb8
1005f1bc:	5a28      	ldrh	r0, [r5, r0]
1005f1be:	07c1      	lsls	r1, r0, #31
1005f1c0:	d004      	beq.n	1005f1cc <LL_Set_Extented_Advertising_Enable+0xe8>
1005f1c2:	8de9      	ldrh	r1, [r5, #46]	@ 0x2e
1005f1c4:	29f5      	cmp	r1, #245	@ 0xf5
1005f1c6:	d901      	bls.n	1005f1cc <LL_Set_Extented_Advertising_Enable+0xe8>
1005f1c8:	2012      	movs	r0, #18
1005f1ca:	e7ea      	b.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f1cc:	2312      	movs	r3, #18
1005f1ce:	4601      	mov	r1, r0
1005f1d0:	461a      	mov	r2, r3
1005f1d2:	4019      	ands	r1, r3
1005f1d4:	2902      	cmp	r1, #2
1005f1d6:	d103      	bne.n	1005f1e0 <LL_Set_Extented_Advertising_Enable+0xfc>
1005f1d8:	2142      	movs	r1, #66	@ 0x42
1005f1da:	5a69      	ldrh	r1, [r5, r1]
1005f1dc:	2900      	cmp	r1, #0
1005f1de:	d040      	beq.n	1005f262 <LL_Set_Extented_Advertising_Enable+0x17e>
1005f1e0:	0700      	lsls	r0, r0, #28
1005f1e2:	d50f      	bpl.n	1005f204 <LL_Set_Extented_Advertising_Enable+0x120>
1005f1e4:	486d      	ldr	r0, [pc, #436]	@ (1005f39c <__arm_cp.24_0>)
1005f1e6:	21be      	movs	r1, #190	@ 0xbe
1005f1e8:	5a69      	ldrh	r1, [r5, r1]
1005f1ea:	4281      	cmp	r1, r0
1005f1ec:	d001      	beq.n	1005f1f2 <LL_Set_Extented_Advertising_Enable+0x10e>
1005f1ee:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f1f0:	e000      	b.n	1005f1f4 <LL_Set_Extented_Advertising_Enable+0x110>
1005f1f2:	2080      	movs	r0, #128	@ 0x80
1005f1f4:	2880      	cmp	r0, #128	@ 0x80
1005f1f6:	d901      	bls.n	1005f1fc <LL_Set_Extented_Advertising_Enable+0x118>
1005f1f8:	4610      	mov	r0, r2
1005f1fa:	e7d2      	b.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f1fc:	900e      	str	r0, [sp, #56]	@ 0x38
1005f1fe:	2800      	cmp	r0, #0
1005f200:	4610      	mov	r0, r2
1005f202:	d0ce      	beq.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f204:	9814      	ldr	r0, [sp, #80]	@ 0x50
1005f206:	21ba      	movs	r1, #186	@ 0xba
1005f208:	5268      	strh	r0, [r5, r1]
1005f20a:	267d      	movs	r6, #125	@ 0x7d
1005f20c:	0171      	lsls	r1, r6, #5
1005f20e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f210:	4351      	muls	r1, r2
1005f212:	2294      	movs	r2, #148	@ 0x94
1005f214:	50a9      	str	r1, [r5, r2]
1005f216:	2800      	cmp	r0, #0
1005f218:	d001      	beq.n	1005f21e <LL_Set_Extented_Advertising_Enable+0x13a>
1005f21a:	21cf      	movs	r1, #207	@ 0xcf
1005f21c:	546f      	strb	r7, [r5, r1]
1005f21e:	21bc      	movs	r1, #188	@ 0xbc
1005f220:	5268      	strh	r0, [r5, r1]
1005f222:	4620      	mov	r0, r4
1005f224:	f7ef fea6 	bl	1004ef74 <EADV_start_request_radio_tasks_ucfg>
1005f228:	2800      	cmp	r0, #0
1005f22a:	d1ba      	bne.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f22c:	4629      	mov	r1, r5
1005f22e:	31d6      	adds	r1, #214	@ 0xd6
1005f230:	4628      	mov	r0, r5
1005f232:	3064      	adds	r0, #100	@ 0x64
1005f234:	462a      	mov	r2, r5
1005f236:	3254      	adds	r2, #84	@ 0x54
1005f238:	676a      	str	r2, [r5, #116]	@ 0x74
1005f23a:	67a8      	str	r0, [r5, #120]	@ 0x78
1005f23c:	462b      	mov	r3, r5
1005f23e:	3378      	adds	r3, #120	@ 0x78
1005f240:	7809      	ldrb	r1, [r1, #0]
1005f242:	07c9      	lsls	r1, r1, #31
1005f244:	930d      	str	r3, [sp, #52]	@ 0x34
1005f246:	d10e      	bne.n	1005f266 <LL_Set_Extented_Advertising_Enable+0x182>
1005f248:	2100      	movs	r1, #0
1005f24a:	6001      	str	r1, [r0, #0]
1005f24c:	66a9      	str	r1, [r5, #104]	@ 0x68
1005f24e:	4855      	ldr	r0, [pc, #340]	@ (1005f3a4 <__arm_cp.24_2>)
1005f250:	6801      	ldr	r1, [r0, #0]
1005f252:	4620      	mov	r0, r4
1005f254:	3065      	adds	r0, #101	@ 0x65
1005f256:	2206      	movs	r2, #6
1005f258:	f7f3 fa80 	bl	1005275c <BLEPLAT_MemCpy>
1005f25c:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f25e:	6800      	ldr	r0, [r0, #0]
1005f260:	e008      	b.n	1005f274 <LL_Set_Extented_Advertising_Enable+0x190>
1005f262:	200c      	movs	r0, #12
1005f264:	e79d      	b.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f266:	218c      	movs	r1, #140	@ 0x8c
1005f268:	5869      	ldr	r1, [r5, r1]
1005f26a:	462a      	mov	r2, r5
1005f26c:	328c      	adds	r2, #140	@ 0x8c
1005f26e:	6852      	ldr	r2, [r2, #4]
1005f270:	c006      	stmia	r0!, {r1, r2}
1005f272:	3808      	subs	r0, #8
1005f274:	4629      	mov	r1, r5
1005f276:	3194      	adds	r1, #148	@ 0x94
1005f278:	910e      	str	r1, [sp, #56]	@ 0x38
1005f27a:	2184      	movs	r1, #132	@ 0x84
1005f27c:	5869      	ldr	r1, [r5, r1]
1005f27e:	462a      	mov	r2, r5
1005f280:	3284      	adds	r2, #132	@ 0x84
1005f282:	6852      	ldr	r2, [r2, #4]
1005f284:	6081      	str	r1, [r0, #8]
1005f286:	60c2      	str	r2, [r0, #12]
1005f288:	4620      	mov	r0, r4
1005f28a:	f7ff fe11 	bl	1005eeb0 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005f28e:	2800      	cmp	r0, #0
1005f290:	960c      	str	r6, [sp, #48]	@ 0x30
1005f292:	d002      	beq.n	1005f29a <LL_Set_Extented_Advertising_Enable+0x1b6>
1005f294:	f7fc fc59 	bl	1005bb4a <llc_priv_start_privacy_timer_ucfg_weak>
1005f298:	e006      	b.n	1005f2a8 <LL_Set_Extented_Advertising_Enable+0x1c4>
1005f29a:	4628      	mov	r0, r5
1005f29c:	3074      	adds	r0, #116	@ 0x74
1005f29e:	6801      	ldr	r1, [r0, #0]
1005f2a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1005f2a2:	681a      	ldr	r2, [r3, #0]
1005f2a4:	6002      	str	r2, [r0, #0]
1005f2a6:	6019      	str	r1, [r3, #0]
1005f2a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
1005f2aa:	4626      	mov	r6, r4
1005f2ac:	36ce      	adds	r6, #206	@ 0xce
1005f2ae:	4628      	mov	r0, r5
1005f2b0:	30b8      	adds	r0, #184	@ 0xb8
1005f2b2:	900d      	str	r0, [sp, #52]	@ 0x34
1005f2b4:	6808      	ldr	r0, [r1, #0]
1005f2b6:	2800      	cmp	r0, #0
1005f2b8:	d005      	beq.n	1005f2c6 <LL_Set_Extented_Advertising_Enable+0x1e2>
1005f2ba:	f7f3 fb1a 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
1005f2be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f2c0:	6811      	ldr	r1, [r2, #0]
1005f2c2:	1808      	adds	r0, r1, r0
1005f2c4:	6010      	str	r0, [r2, #0]
1005f2c6:	7037      	strb	r7, [r6, #0]
1005f2c8:	20c4      	movs	r0, #196	@ 0xc4
1005f2ca:	5c29      	ldrb	r1, [r5, r0]
1005f2cc:	27d0      	movs	r7, #208	@ 0xd0
1005f2ce:	5de8      	ldrb	r0, [r5, r7]
1005f2d0:	2281      	movs	r2, #129	@ 0x81
1005f2d2:	920e      	str	r2, [sp, #56]	@ 0x38
1005f2d4:	9200      	str	r2, [sp, #0]
1005f2d6:	462e      	mov	r6, r5
1005f2d8:	3614      	adds	r6, #20
1005f2da:	4622      	mov	r2, r4
1005f2dc:	4633      	mov	r3, r6
1005f2de:	f7ff fd77 	bl	1005edd0 <LL_eadv_BLUE_SM>
1005f2e2:	5de8      	ldrb	r0, [r5, r7]
1005f2e4:	2125      	movs	r1, #37	@ 0x25
1005f2e6:	f7f4 fec4 	bl	10054072 <BLEPLAT_CNTR_SmSetDataLength>
1005f2ea:	462f      	mov	r7, r5
1005f2ec:	37d0      	adds	r7, #208	@ 0xd0
1005f2ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f2f0:	8800      	ldrh	r0, [r0, #0]
1005f2f2:	06c0      	lsls	r0, r0, #27
1005f2f4:	d403      	bmi.n	1005f2fe <LL_Set_Extented_Advertising_Enable+0x21a>
1005f2f6:	4620      	mov	r0, r4
1005f2f8:	f000 fd57 	bl	1005fdaa <LL_eadv_start_extended_ucfg_weak>
1005f2fc:	e042      	b.n	1005f384 <LL_Set_Extented_Advertising_Enable+0x2a0>
1005f2fe:	f7f3 faf8 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
1005f302:	219c      	movs	r1, #156	@ 0x9c
1005f304:	910b      	str	r1, [sp, #44]	@ 0x2c
1005f306:	5068      	str	r0, [r5, r1]
1005f308:	f001 f812 	bl	10060330 <LL_get_tx_common_buffer_p>
1005f30c:	9009      	str	r0, [sp, #36]	@ 0x24
1005f30e:	f001 f817 	bl	10060340 <LL_get_rx_common_buffer_p>
1005f312:	900a      	str	r0, [sp, #40]	@ 0x28
1005f314:	7838      	ldrb	r0, [r7, #0]
1005f316:	9008      	str	r0, [sp, #32]
1005f318:	2094      	movs	r0, #148	@ 0x94
1005f31a:	2100      	movs	r1, #0
1005f31c:	910d      	str	r1, [sp, #52]	@ 0x34
1005f31e:	460a      	mov	r2, r1
1005f320:	f7f4 fa1c 	bl	1005375c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005f324:	4603      	mov	r3, r0
1005f326:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f328:	9000      	str	r0, [sp, #0]
1005f32a:	4620      	mov	r0, r4
1005f32c:	9908      	ldr	r1, [sp, #32]
1005f32e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
1005f330:	f7ff fcd3 	bl	1005ecda <LL_eadv_Blue_Tx>
1005f334:	7838      	ldrb	r0, [r7, #0]
1005f336:	9009      	str	r0, [sp, #36]	@ 0x24
1005f338:	2096      	movs	r0, #150	@ 0x96
1005f33a:	2101      	movs	r1, #1
1005f33c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1005f33e:	f7f4 fa0d 	bl	1005375c <BLEPLAT_CNTR_GetTimer2TimeoutForIfs>
1005f342:	4603      	mov	r3, r0
1005f344:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005f346:	9000      	str	r0, [sp, #0]
1005f348:	980e      	ldr	r0, [sp, #56]	@ 0x38
1005f34a:	9001      	str	r0, [sp, #4]
1005f34c:	4630      	mov	r0, r6
1005f34e:	9909      	ldr	r1, [sp, #36]	@ 0x24
1005f350:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
1005f352:	f7ff fcfd 	bl	1005ed50 <LL_eadv_Blue_Rx>
1005f356:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
1005f358:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1005f35a:	582a      	ldr	r2, [r5, r0]
1005f35c:	7838      	ldrb	r0, [r7, #0]
1005f35e:	4b12      	ldr	r3, [pc, #72]	@ (1005f3a8 <__arm_cp.24_3>)
1005f360:	9307      	str	r3, [sp, #28]
1005f362:	4b12      	ldr	r3, [pc, #72]	@ (1005f3ac <__arm_cp.24_4>)
1005f364:	9306      	str	r3, [sp, #24]
1005f366:	4b12      	ldr	r3, [pc, #72]	@ (1005f3b0 <__arm_cp.24_5>)
1005f368:	9305      	str	r3, [sp, #20]
1005f36a:	4b12      	ldr	r3, [pc, #72]	@ (1005f3b4 <__arm_cp.24_6>)
1005f36c:	9304      	str	r3, [sp, #16]
1005f36e:	2314      	movs	r3, #20
1005f370:	9303      	str	r3, [sp, #12]
1005f372:	231f      	movs	r3, #31
1005f374:	ae00      	add	r6, sp, #0
1005f376:	c60e      	stmia	r6!, {r1, r2, r3}
1005f378:	990c      	ldr	r1, [sp, #48]	@ 0x30
1005f37a:	00cb      	lsls	r3, r1, #3
1005f37c:	4621      	mov	r1, r4
1005f37e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
1005f380:	f001 f86e 	bl	10060460 <LL_sched_enable_taskslot>
1005f384:	249c      	movs	r4, #156	@ 0x9c
1005f386:	5929      	ldr	r1, [r5, r4]
1005f388:	7838      	ldrb	r0, [r7, #0]
1005f38a:	f001 f845 	bl	10060418 <LL_sched_set_anchor>
1005f38e:	5928      	ldr	r0, [r5, r4]
1005f390:	7839      	ldrb	r1, [r7, #0]
1005f392:	f001 faf5 	bl	10060980 <LL_sched_check_and_call_sched>
1005f396:	2000      	movs	r0, #0
1005f398:	e703      	b.n	1005f1a2 <LL_Set_Extented_Advertising_Enable+0xbe>
1005f39a:	46c0      	nop			@ (mov r8, r8)

1005f39c <__arm_cp.24_0>:
1005f39c:	0000fffc 	.word	0x0000fffc

1005f3a0 <__arm_cp.24_1>:
1005f3a0:	0000ffff 	.word	0x0000ffff

1005f3a4 <__arm_cp.24_2>:
1005f3a4:	20002a7c 	.word	0x20002a7c

1005f3a8 <__arm_cp.24_3>:
1005f3a8:	1005f5ed 	.word	0x1005f5ed

1005f3ac <__arm_cp.24_4>:
1005f3ac:	1005fa75 	.word	0x1005fa75

1005f3b0 <__arm_cp.24_5>:
1005f3b0:	1005f8e5 	.word	0x1005f8e5

1005f3b4 <__arm_cp.24_6>:
1005f3b4:	1005f5f5 	.word	0x1005f5f5

1005f3b8 <LL_Set_Extented_Advertising_Set_Random_Address>:
1005f3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f3ba:	460c      	mov	r4, r1
1005f3bc:	4606      	mov	r6, r0
1005f3be:	f7ff fd35 	bl	1005ee2c <llc_get_advertising_set_index>
1005f3c2:	4605      	mov	r5, r0
1005f3c4:	4818      	ldr	r0, [pc, #96]	@ (1005f428 <__arm_cp.25_0>)
1005f3c6:	4285      	cmp	r5, r0
1005f3c8:	d02b      	beq.n	1005f422 <LL_Set_Extented_Advertising_Set_Random_Address+0x6a>
1005f3ca:	9400      	str	r4, [sp, #0]
1005f3cc:	022c      	lsls	r4, r5, #8
1005f3ce:	f000 ffc5 	bl	1006035c <llc_get_linkms_cntxt_p>
1005f3d2:	6807      	ldr	r7, [r0, #0]
1005f3d4:	1938      	adds	r0, r7, r4
1005f3d6:	21be      	movs	r1, #190	@ 0xbe
1005f3d8:	5246      	strh	r6, [r0, r1]
1005f3da:	21b8      	movs	r1, #184	@ 0xb8
1005f3dc:	5c40      	ldrb	r0, [r0, r1]
1005f3de:	07c0      	lsls	r0, r0, #31
1005f3e0:	d007      	beq.n	1005f3f2 <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005f3e2:	0228      	lsls	r0, r5, #8
1005f3e4:	1838      	adds	r0, r7, r0
1005f3e6:	21ce      	movs	r1, #206	@ 0xce
1005f3e8:	5c40      	ldrb	r0, [r0, r1]
1005f3ea:	2801      	cmp	r0, #1
1005f3ec:	d101      	bne.n	1005f3f2 <LL_Set_Extented_Advertising_Set_Random_Address+0x3a>
1005f3ee:	250c      	movs	r5, #12
1005f3f0:	e018      	b.n	1005f424 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005f3f2:	480e      	ldr	r0, [pc, #56]	@ (1005f42c <__arm_cp.25_1>)
1005f3f4:	6800      	ldr	r0, [r0, #0]
1005f3f6:	3056      	adds	r0, #86	@ 0x56
1005f3f8:	2606      	movs	r6, #6
1005f3fa:	9c00      	ldr	r4, [sp, #0]
1005f3fc:	4621      	mov	r1, r4
1005f3fe:	4632      	mov	r2, r6
1005f400:	f7f3 f9ac 	bl	1005275c <BLEPLAT_MemCpy>
1005f404:	0228      	lsls	r0, r5, #8
1005f406:	1838      	adds	r0, r7, r0
1005f408:	218c      	movs	r1, #140	@ 0x8c
1005f40a:	2201      	movs	r2, #1
1005f40c:	5042      	str	r2, [r0, r1]
1005f40e:	4601      	mov	r1, r0
1005f410:	318c      	adds	r1, #140	@ 0x8c
1005f412:	2500      	movs	r5, #0
1005f414:	604d      	str	r5, [r1, #4]
1005f416:	308d      	adds	r0, #141	@ 0x8d
1005f418:	4621      	mov	r1, r4
1005f41a:	4632      	mov	r2, r6
1005f41c:	f7f3 f99e 	bl	1005275c <BLEPLAT_MemCpy>
1005f420:	e000      	b.n	1005f424 <LL_Set_Extented_Advertising_Set_Random_Address+0x6c>
1005f422:	2512      	movs	r5, #18
1005f424:	4628      	mov	r0, r5
1005f426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f428 <__arm_cp.25_0>:
1005f428:	0000ffff 	.word	0x0000ffff

1005f42c <__arm_cp.25_1>:
1005f42c:	20002ad0 	.word	0x20002ad0

1005f430 <LL_eadv_update_did>:
1005f430:	b510      	push	{r4, lr}
1005f432:	4604      	mov	r4, r0
1005f434:	2000      	movs	r0, #0
1005f436:	f003 fd41 	bl	10062ebc <Hal_Get_Random_Number>
1005f43a:	4904      	ldr	r1, [pc, #16]	@ (1005f44c <__arm_cp.27_0>)
1005f43c:	4001      	ands	r1, r0
1005f43e:	8820      	ldrh	r0, [r4, #0]
1005f440:	1a40      	subs	r0, r0, r1
1005f442:	4242      	negs	r2, r0
1005f444:	4142      	adcs	r2, r0
1005f446:	404a      	eors	r2, r1
1005f448:	8022      	strh	r2, [r4, #0]
1005f44a:	bd10      	pop	{r4, pc}

1005f44c <__arm_cp.27_0>:
1005f44c:	00000fff 	.word	0x00000fff

1005f450 <EADV_stop>:
1005f450:	b5b0      	push	{r4, r5, r7, lr}
1005f452:	4604      	mov	r4, r0
1005f454:	f3ef 8010 	mrs	r0, PRIMASK
1005f458:	b672      	cpsid	i
1005f45a:	4625      	mov	r5, r4
1005f45c:	35ce      	adds	r5, #206	@ 0xce
1005f45e:	78a8      	ldrb	r0, [r5, #2]
1005f460:	f000 ffec 	bl	1006043c <LL_sched_set_cancel_request>
1005f464:	20d1      	movs	r0, #209	@ 0xd1
1005f466:	5c20      	ldrb	r0, [r4, r0]
1005f468:	f000 ffe8 	bl	1006043c <LL_sched_set_cancel_request>
1005f46c:	b662      	cpsie	i
1005f46e:	78a8      	ldrb	r0, [r5, #2]
1005f470:	f001 fa96 	bl	100609a0 <LL_sched_check_and_wait_sched>
1005f474:	20ce      	movs	r0, #206	@ 0xce
1005f476:	2100      	movs	r1, #0
1005f478:	5221      	strh	r1, [r4, r0]
1005f47a:	7aa8      	ldrb	r0, [r5, #10]
1005f47c:	28ff      	cmp	r0, #255	@ 0xff
1005f47e:	d001      	beq.n	1005f484 <EADV_stop+0x34>
1005f480:	f7fb fc93 	bl	1005adaa <llc_conn_release_conn_idx>
1005f484:	20ff      	movs	r0, #255	@ 0xff
1005f486:	72a8      	strb	r0, [r5, #10]
1005f488:	7a28      	ldrb	r0, [r5, #8]
1005f48a:	0780      	lsls	r0, r0, #30
1005f48c:	d501      	bpl.n	1005f492 <EADV_stop+0x42>
1005f48e:	f7fc fb5d 	bl	1005bb4c <llc_priv_stop_privacy_timer_ucfg_weak>
1005f492:	bdb0      	pop	{r4, r5, r7, pc}

1005f494 <LL_Set_Advertising_Set_Random_Address>:
1005f494:	b510      	push	{r4, lr}
1005f496:	4604      	mov	r4, r0
1005f498:	f7fa f902 	bl	100596a0 <scan_csr_ucfg_weak>
1005f49c:	2801      	cmp	r0, #1
1005f49e:	d105      	bne.n	1005f4ac <LL_Set_Advertising_Set_Random_Address+0x18>
1005f4a0:	f7fc fb84 	bl	1005bbac <llc_scan_get_cntxt_p>
1005f4a4:	21eb      	movs	r1, #235	@ 0xeb
1005f4a6:	5c40      	ldrb	r0, [r0, r1]
1005f4a8:	07c0      	lsls	r0, r0, #31
1005f4aa:	d106      	bne.n	1005f4ba <LL_Set_Advertising_Set_Random_Address+0x26>
1005f4ac:	f7ff fdfc 	bl	1005f0a8 <LL_LE_Set_Advertising_Parameters_Default>
1005f4b0:	4803      	ldr	r0, [pc, #12]	@ (1005f4c0 <__arm_cp.29_0>)
1005f4b2:	4621      	mov	r1, r4
1005f4b4:	f7ff ff80 	bl	1005f3b8 <LL_Set_Extented_Advertising_Set_Random_Address>
1005f4b8:	bd10      	pop	{r4, pc}
1005f4ba:	200c      	movs	r0, #12
1005f4bc:	bd10      	pop	{r4, pc}
1005f4be:	46c0      	nop			@ (mov r8, r8)

1005f4c0 <__arm_cp.29_0>:
1005f4c0:	0000fffc 	.word	0x0000fffc

1005f4c4 <ll_set_advertising_data_ptr>:
1005f4c4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f4c6:	9302      	str	r3, [sp, #8]
1005f4c8:	4614      	mov	r4, r2
1005f4ca:	460f      	mov	r7, r1
1005f4cc:	4605      	mov	r5, r0
1005f4ce:	f000 ff45 	bl	1006035c <llc_get_linkms_cntxt_p>
1005f4d2:	4606      	mov	r6, r0
1005f4d4:	4830      	ldr	r0, [pc, #192]	@ (1005f598 <__arm_cp.33_0>)
1005f4d6:	4285      	cmp	r5, r0
1005f4d8:	d101      	bne.n	1005f4de <ll_set_advertising_data_ptr+0x1a>
1005f4da:	201f      	movs	r0, #31
1005f4dc:	e007      	b.n	1005f4ee <ll_set_advertising_data_ptr+0x2a>
1005f4de:	2001      	movs	r0, #1
1005f4e0:	2102      	movs	r1, #2
1005f4e2:	f7f9 fff9 	bl	100594d8 <hci_get_set_legacy_ext_flag>
1005f4e6:	2800      	cmp	r0, #0
1005f4e8:	d000      	beq.n	1005f4ec <ll_set_advertising_data_ptr+0x28>
1005f4ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f4ec:	482b      	ldr	r0, [pc, #172]	@ (1005f59c <__arm_cp.33_1>)
1005f4ee:	2112      	movs	r1, #18
1005f4f0:	42a0      	cmp	r0, r4
1005f4f2:	d201      	bcs.n	1005f4f8 <ll_set_advertising_data_ptr+0x34>
1005f4f4:	4608      	mov	r0, r1
1005f4f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f4f8:	9101      	str	r1, [sp, #4]
1005f4fa:	4628      	mov	r0, r5
1005f4fc:	f7ff fc96 	bl	1005ee2c <llc_get_advertising_set_index>
1005f500:	0200      	lsls	r0, r0, #8
1005f502:	6831      	ldr	r1, [r6, #0]
1005f504:	180e      	adds	r6, r1, r0
1005f506:	4620      	mov	r0, r4
1005f508:	4631      	mov	r1, r6
1005f50a:	f000 fc4c 	bl	1005fda6 <llc_eadv_max_supported_data_check_ucfg_weak>
1005f50e:	2800      	cmp	r0, #0
1005f510:	d1eb      	bne.n	1005f4ea <ll_set_advertising_data_ptr+0x26>
1005f512:	20ce      	movs	r0, #206	@ 0xce
1005f514:	5c31      	ldrb	r1, [r6, r0]
1005f516:	2038      	movs	r0, #56	@ 0x38
1005f518:	5c30      	ldrb	r0, [r6, r0]
1005f51a:	2f04      	cmp	r7, #4
1005f51c:	d112      	bne.n	1005f544 <ll_set_advertising_data_ptr+0x80>
1005f51e:	2900      	cmp	r1, #0
1005f520:	d038      	beq.n	1005f594 <ll_set_advertising_data_ptr+0xd0>
1005f522:	2800      	cmp	r0, #0
1005f524:	9a01      	ldr	r2, [sp, #4]
1005f526:	d01b      	beq.n	1005f560 <ll_set_advertising_data_ptr+0x9c>
1005f528:	481b      	ldr	r0, [pc, #108]	@ (1005f598 <__arm_cp.33_0>)
1005f52a:	4285      	cmp	r5, r0
1005f52c:	d118      	bne.n	1005f560 <ll_set_advertising_data_ptr+0x9c>
1005f52e:	8df0      	ldrh	r0, [r6, #46]	@ 0x2e
1005f530:	2800      	cmp	r0, #0
1005f532:	d015      	beq.n	1005f560 <ll_set_advertising_data_ptr+0x9c>
1005f534:	20b8      	movs	r0, #184	@ 0xb8
1005f536:	5a30      	ldrh	r0, [r6, r0]
1005f538:	2110      	movs	r1, #16
1005f53a:	4001      	ands	r1, r0
1005f53c:	4321      	orrs	r1, r4
1005f53e:	4610      	mov	r0, r2
1005f540:	d1d3      	bne.n	1005f4ea <ll_set_advertising_data_ptr+0x26>
1005f542:	e00f      	b.n	1005f564 <ll_set_advertising_data_ptr+0xa0>
1005f544:	4635      	mov	r5, r6
1005f546:	3538      	adds	r5, #56	@ 0x38
1005f548:	2900      	cmp	r1, #0
1005f54a:	d011      	beq.n	1005f570 <ll_set_advertising_data_ptr+0xac>
1005f54c:	2f03      	cmp	r7, #3
1005f54e:	d109      	bne.n	1005f564 <ll_set_advertising_data_ptr+0xa0>
1005f550:	2002      	movs	r0, #2
1005f552:	7028      	strb	r0, [r5, #0]
1005f554:	86f4      	strh	r4, [r6, #54]	@ 0x36
1005f556:	2000      	movs	r0, #0
1005f558:	86b0      	strh	r0, [r6, #52]	@ 0x34
1005f55a:	9902      	ldr	r1, [sp, #8]
1005f55c:	6331      	str	r1, [r6, #48]	@ 0x30
1005f55e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f560:	4610      	mov	r0, r2
1005f562:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f564:	36b6      	adds	r6, #182	@ 0xb6
1005f566:	4630      	mov	r0, r6
1005f568:	f7ff ff62 	bl	1005f430 <LL_eadv_update_did>
1005f56c:	2000      	movs	r0, #0
1005f56e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f570:	4637      	mov	r7, r6
1005f572:	3728      	adds	r7, #40	@ 0x28
1005f574:	2800      	cmp	r0, #0
1005f576:	9a02      	ldr	r2, [sp, #8]
1005f578:	d005      	beq.n	1005f586 <ll_set_advertising_data_ptr+0xc2>
1005f57a:	6839      	ldr	r1, [r7, #0]
1005f57c:	20a1      	movs	r0, #161	@ 0xa1
1005f57e:	9a02      	ldr	r2, [sp, #8]
1005f580:	f004 fdb2 	bl	100640e8 <aci_hal_adv_scan_resp_data_update_event_push_noinline>
1005f584:	9a02      	ldr	r2, [sp, #8]
1005f586:	603a      	str	r2, [r7, #0]
1005f588:	2001      	movs	r0, #1
1005f58a:	7028      	strb	r0, [r5, #0]
1005f58c:	85f4      	strh	r4, [r6, #46]	@ 0x2e
1005f58e:	2000      	movs	r0, #0
1005f590:	85b0      	strh	r0, [r6, #44]	@ 0x2c
1005f592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f594:	9801      	ldr	r0, [sp, #4]
1005f596:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1005f598 <__arm_cp.33_0>:
1005f598:	0000fffc 	.word	0x0000fffc

1005f59c <__arm_cp.33_1>:
1005f59c:	00000672 	.word	0x00000672

1005f5a0 <ll_set_legacy_advertising_data_ptr>:
1005f5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f5a2:	460c      	mov	r4, r1
1005f5a4:	4605      	mov	r5, r0
1005f5a6:	f000 fed9 	bl	1006035c <llc_get_linkms_cntxt_p>
1005f5aa:	4607      	mov	r7, r0
1005f5ac:	f7ff fd7c 	bl	1005f0a8 <LL_LE_Set_Advertising_Parameters_Default>
1005f5b0:	4e0c      	ldr	r6, [pc, #48]	@ (1005f5e4 <__arm_cp.36_0>)
1005f5b2:	4630      	mov	r0, r6
1005f5b4:	f7ff fc3a 	bl	1005ee2c <llc_get_advertising_set_index>
1005f5b8:	490b      	ldr	r1, [pc, #44]	@ (1005f5e8 <__arm_cp.36_1>)
1005f5ba:	4288      	cmp	r0, r1
1005f5bc:	d108      	bne.n	1005f5d0 <ll_set_legacy_advertising_data_ptr+0x30>
1005f5be:	f7ff fd43 	bl	1005f048 <LL_Context_ReturnFree>
1005f5c2:	28ff      	cmp	r0, #255	@ 0xff
1005f5c4:	d00b      	beq.n	1005f5de <ll_set_legacy_advertising_data_ptr+0x3e>
1005f5c6:	0200      	lsls	r0, r0, #8
1005f5c8:	6839      	ldr	r1, [r7, #0]
1005f5ca:	1808      	adds	r0, r1, r0
1005f5cc:	21be      	movs	r1, #190	@ 0xbe
1005f5ce:	5246      	strh	r6, [r0, r1]
1005f5d0:	2103      	movs	r1, #3
1005f5d2:	4630      	mov	r0, r6
1005f5d4:	462a      	mov	r2, r5
1005f5d6:	4623      	mov	r3, r4
1005f5d8:	f7ff ff74 	bl	1005f4c4 <ll_set_advertising_data_ptr>
1005f5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f5de:	2001      	movs	r0, #1
1005f5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005f5e2:	46c0      	nop			@ (mov r8, r8)

1005f5e4 <__arm_cp.36_0>:
1005f5e4:	0000fffc 	.word	0x0000fffc

1005f5e8 <__arm_cp.36_1>:
1005f5e8:	0000ffff 	.word	0x0000ffff

1005f5ec <ADV_cancelslot>:
1005f5ec:	21d0      	movs	r1, #208	@ 0xd0
1005f5ee:	22ff      	movs	r2, #255	@ 0xff
1005f5f0:	5442      	strb	r2, [r0, r1]
1005f5f2:	4770      	bx	lr

1005f5f4 <ADV_skiproutine>:
1005f5f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005f5f6:	b08f      	sub	sp, #60	@ 0x3c
1005f5f8:	4607      	mov	r7, r0
1005f5fa:	20d0      	movs	r0, #208	@ 0xd0
1005f5fc:	5c38      	ldrb	r0, [r7, r0]
1005f5fe:	232c      	movs	r3, #44	@ 0x2c
1005f600:	4358      	muls	r0, r3
1005f602:	4a68      	ldr	r2, [pc, #416]	@ (1005f7a4 <__arm_cp.40_0>)
1005f604:	6812      	ldr	r2, [r2, #0]
1005f606:	1810      	adds	r0, r2, r0
1005f608:	7d80      	ldrb	r0, [r0, #22]
1005f60a:	463c      	mov	r4, r7
1005f60c:	3494      	adds	r4, #148	@ 0x94
1005f60e:	463a      	mov	r2, r7
1005f610:	32b4      	adds	r2, #180	@ 0xb4
1005f612:	9205      	str	r2, [sp, #20]
1005f614:	463e      	mov	r6, r7
1005f616:	36d6      	adds	r6, #214	@ 0xd6
1005f618:	2814      	cmp	r0, #20
1005f61a:	9604      	str	r6, [sp, #16]
1005f61c:	9302      	str	r3, [sp, #8]
1005f61e:	d10a      	bne.n	1005f636 <ADV_skiproutine+0x42>
1005f620:	f7f3 f967 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
1005f624:	4605      	mov	r5, r0
1005f626:	f000 fed7 	bl	100603d8 <LL_sched_engine_return_actual_scheduler_margin>
1005f62a:	9b05      	ldr	r3, [sp, #20]
1005f62c:	1828      	adds	r0, r5, r0
1005f62e:	3032      	adds	r0, #50	@ 0x32
1005f630:	60a0      	str	r0, [r4, #8]
1005f632:	2501      	movs	r5, #1
1005f634:	e01b      	b.n	1005f66e <ADV_skiproutine+0x7a>
1005f636:	68a2      	ldr	r2, [r4, #8]
1005f638:	1856      	adds	r6, r2, r1
1005f63a:	2500      	movs	r5, #0
1005f63c:	4630      	mov	r0, r6
1005f63e:	4611      	mov	r1, r2
1005f640:	f000 fec6 	bl	100603d0 <LL_sched_time_t1_ge_t2>
1005f644:	2800      	cmp	r0, #0
1005f646:	d005      	beq.n	1005f654 <ADV_skiproutine+0x60>
1005f648:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
1005f64a:	68a1      	ldr	r1, [r4, #8]
1005f64c:	180a      	adds	r2, r1, r0
1005f64e:	60a2      	str	r2, [r4, #8]
1005f650:	1c6d      	adds	r5, r5, #1
1005f652:	e7f3      	b.n	1005f63c <ADV_skiproutine+0x48>
1005f654:	9b05      	ldr	r3, [sp, #20]
1005f656:	8898      	ldrh	r0, [r3, #4]
1005f658:	0700      	lsls	r0, r0, #28
1005f65a:	d408      	bmi.n	1005f66e <ADV_skiproutine+0x7a>
1005f65c:	2001      	movs	r0, #1
1005f65e:	f003 fc34 	bl	10062eca <Hal_Get_Random_Number32>
1005f662:	9b05      	ldr	r3, [sp, #20]
1005f664:	4950      	ldr	r1, [pc, #320]	@ (1005f7a8 <__arm_cp.40_1>)
1005f666:	4001      	ands	r1, r0
1005f668:	68a0      	ldr	r0, [r4, #8]
1005f66a:	1840      	adds	r0, r0, r1
1005f66c:	60a0      	str	r0, [r4, #8]
1005f66e:	8898      	ldrh	r0, [r3, #4]
1005f670:	2103      	movs	r1, #3
1005f672:	4001      	ands	r1, r0
1005f674:	1e48      	subs	r0, r1, #1
1005f676:	4181      	sbcs	r1, r0
1005f678:	0048      	lsls	r0, r1, #1
1005f67a:	8018      	strh	r0, [r3, #0]
1005f67c:	7b98      	ldrb	r0, [r3, #14]
1005f67e:	2201      	movs	r2, #1
1005f680:	4601      	mov	r1, r0
1005f682:	9201      	str	r2, [sp, #4]
1005f684:	4011      	ands	r1, r2
1005f686:	0782      	lsls	r2, r0, #30
1005f688:	0fd2      	lsrs	r2, r2, #31
1005f68a:	1889      	adds	r1, r1, r2
1005f68c:	0740      	lsls	r0, r0, #29
1005f68e:	0fc0      	lsrs	r0, r0, #31
1005f690:	1808      	adds	r0, r1, r0
1005f692:	1e40      	subs	r0, r0, #1
1005f694:	7798      	strb	r0, [r3, #30]
1005f696:	4638      	mov	r0, r7
1005f698:	461e      	mov	r6, r3
1005f69a:	f000 f88b 	bl	1005f7b4 <UTIL_u8GetNextAdvChannel>
1005f69e:	4601      	mov	r1, r0
1005f6a0:	7f30      	ldrb	r0, [r6, #28]
1005f6a2:	f7f4 fd10 	bl	100540c6 <BLEPLAT_CNTR_SmSetRemapChan>
1005f6a6:	7f30      	ldrb	r0, [r6, #28]
1005f6a8:	f7f4 fdcc 	bl	10054244 <BLEPLAT_CNTR_SmSetTxMode>
1005f6ac:	2000      	movs	r0, #0
1005f6ae:	9003      	str	r0, [sp, #12]
1005f6b0:	9904      	ldr	r1, [sp, #16]
1005f6b2:	7148      	strb	r0, [r1, #5]
1005f6b4:	4638      	mov	r0, r7
1005f6b6:	3028      	adds	r0, #40	@ 0x28
1005f6b8:	f7ff fafe 	bl	1005ecb8 <LL_eadv_switchbackupdata_data_struc>
1005f6bc:	4606      	mov	r6, r0
1005f6be:	4638      	mov	r0, r7
1005f6c0:	303c      	adds	r0, #60	@ 0x3c
1005f6c2:	f7ff faf9 	bl	1005ecb8 <LL_eadv_switchbackupdata_data_struc>
1005f6c6:	2e00      	cmp	r6, #0
1005f6c8:	9e04      	ldr	r6, [sp, #16]
1005f6ca:	d002      	beq.n	1005f6d2 <ADV_skiproutine+0xde>
1005f6cc:	7931      	ldrb	r1, [r6, #4]
1005f6ce:	07c9      	lsls	r1, r1, #31
1005f6d0:	d104      	bne.n	1005f6dc <ADV_skiproutine+0xe8>
1005f6d2:	2800      	cmp	r0, #0
1005f6d4:	d005      	beq.n	1005f6e2 <ADV_skiproutine+0xee>
1005f6d6:	7930      	ldrb	r0, [r6, #4]
1005f6d8:	0780      	lsls	r0, r0, #30
1005f6da:	d502      	bpl.n	1005f6e2 <ADV_skiproutine+0xee>
1005f6dc:	4638      	mov	r0, r7
1005f6de:	f7ff fbe7 	bl	1005eeb0 <llc_eadv_generate_new_rpa_for_one_adv_set>
1005f6e2:	68a1      	ldr	r1, [r4, #8]
1005f6e4:	6820      	ldr	r0, [r4, #0]
1005f6e6:	9b05      	ldr	r3, [sp, #20]
1005f6e8:	88da      	ldrh	r2, [r3, #6]
1005f6ea:	2a00      	cmp	r2, #0
1005f6ec:	d102      	bne.n	1005f6f4 <ADV_skiproutine+0x100>
1005f6ee:	7eda      	ldrb	r2, [r3, #27]
1005f6f0:	2a01      	cmp	r2, #1
1005f6f2:	d003      	beq.n	1005f6fc <ADV_skiproutine+0x108>
1005f6f4:	4288      	cmp	r0, r1
1005f6f6:	da4c      	bge.n	1005f792 <ADV_skiproutine+0x19e>
1005f6f8:	2800      	cmp	r0, #0
1005f6fa:	d04a      	beq.n	1005f792 <ADV_skiproutine+0x19e>
1005f6fc:	7e98      	ldrb	r0, [r3, #26]
1005f6fe:	2800      	cmp	r0, #0
1005f700:	d047      	beq.n	1005f792 <ADV_skiproutine+0x19e>
1005f702:	8898      	ldrh	r0, [r3, #4]
1005f704:	0700      	lsls	r0, r0, #28
1005f706:	d520      	bpl.n	1005f74a <ADV_skiproutine+0x156>
1005f708:	a80d      	add	r0, sp, #52	@ 0x34
1005f70a:	9000      	str	r0, [sp, #0]
1005f70c:	9903      	ldr	r1, [sp, #12]
1005f70e:	8081      	strh	r1, [r0, #4]
1005f710:	910d      	str	r1, [sp, #52]	@ 0x34
1005f712:	a806      	add	r0, sp, #24
1005f714:	9a01      	ldr	r2, [sp, #4]
1005f716:	7642      	strb	r2, [r0, #25]
1005f718:	223c      	movs	r2, #60	@ 0x3c
1005f71a:	7682      	strb	r2, [r0, #26]
1005f71c:	22ff      	movs	r2, #255	@ 0xff
1005f71e:	7582      	strb	r2, [r0, #22]
1005f720:	81c1      	strh	r1, [r0, #14]
1005f722:	4a22      	ldr	r2, [pc, #136]	@ (1005f7ac <__arm_cp.40_2>)
1005f724:	8282      	strh	r2, [r0, #20]
1005f726:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
1005f728:	7a13      	ldrb	r3, [r2, #8]
1005f72a:	7603      	strb	r3, [r0, #24]
1005f72c:	8181      	strh	r1, [r0, #12]
1005f72e:	75c1      	strb	r1, [r0, #23]
1005f730:	9b00      	ldr	r3, [sp, #0]
1005f732:	9307      	str	r3, [sp, #28]
1005f734:	3209      	adds	r2, #9
1005f736:	9206      	str	r2, [sp, #24]
1005f738:	910a      	str	r1, [sp, #40]	@ 0x28
1005f73a:	9308      	str	r3, [sp, #32]
1005f73c:	f7fb f832 	bl	1005a7a4 <llc_conn_push_connection_complete_event>
1005f740:	7830      	ldrb	r0, [r6, #0]
1005f742:	0780      	lsls	r0, r0, #30
1005f744:	d501      	bpl.n	1005f74a <ADV_skiproutine+0x156>
1005f746:	f7fc fa01 	bl	1005bb4c <llc_priv_stop_privacy_timer_ucfg_weak>
1005f74a:	2002      	movs	r0, #2
1005f74c:	f7f9 fed2 	bl	100594f4 <hci_check_legacy_ext_flag>
1005f750:	2801      	cmp	r0, #1
1005f752:	d119      	bne.n	1005f788 <ADV_skiproutine+0x194>
1005f754:	9b05      	ldr	r3, [sp, #20]
1005f756:	88da      	ldrh	r2, [r3, #6]
1005f758:	2a00      	cmp	r2, #0
1005f75a:	d001      	beq.n	1005f760 <ADV_skiproutine+0x16c>
1005f75c:	203c      	movs	r0, #60	@ 0x3c
1005f75e:	e000      	b.n	1005f762 <ADV_skiproutine+0x16e>
1005f760:	2043      	movs	r0, #67	@ 0x43
1005f762:	9001      	str	r0, [sp, #4]
1005f764:	4812      	ldr	r0, [pc, #72]	@ (1005f7b0 <__arm_cp.40_3>)
1005f766:	6800      	ldr	r0, [r0, #0]
1005f768:	9902      	ldr	r1, [sp, #8]
1005f76a:	5c40      	ldrb	r0, [r0, r1]
1005f76c:	0100      	lsls	r0, r0, #4
1005f76e:	43c0      	mvns	r0, r0
1005f770:	4619      	mov	r1, r3
1005f772:	23a1      	movs	r3, #161	@ 0xa1
1005f774:	4303      	orrs	r3, r0
1005f776:	20b1      	movs	r0, #177	@ 0xb1
1005f778:	4018      	ands	r0, r3
1005f77a:	7a0b      	ldrb	r3, [r1, #8]
1005f77c:	1a9a      	subs	r2, r3, r2
1005f77e:	b2d3      	uxtb	r3, r2
1005f780:	7a8a      	ldrb	r2, [r1, #10]
1005f782:	9901      	ldr	r1, [sp, #4]
1005f784:	f000 f85e 	bl	1005f844 <hci_le_advertising_set_terminated_event_push>
1005f788:	4638      	mov	r0, r7
1005f78a:	f000 f895 	bl	1005f8b8 <EADV_stop_isr>
1005f78e:	68a1      	ldr	r1, [r4, #8]
1005f790:	9b05      	ldr	r3, [sp, #20]
1005f792:	7f18      	ldrb	r0, [r3, #28]
1005f794:	f000 fe40 	bl	10060418 <LL_sched_set_anchor>
1005f798:	9803      	ldr	r0, [sp, #12]
1005f79a:	7170      	strb	r0, [r6, #5]
1005f79c:	4628      	mov	r0, r5
1005f79e:	b00f      	add	sp, #60	@ 0x3c
1005f7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005f7a2:	46c0      	nop			@ (mov r8, r8)

1005f7a4 <__arm_cp.40_0>:
1005f7a4:	20002ad8 	.word	0x20002ad8

1005f7a8 <__arm_cp.40_1>:
1005f7a8:	00000fff 	.word	0x00000fff

1005f7ac <__arm_cp.40_2>:
1005f7ac:	0000ffff 	.word	0x0000ffff

1005f7b0 <__arm_cp.40_3>:
1005f7b0:	20002a7c 	.word	0x20002a7c

1005f7b4 <UTIL_u8GetNextAdvChannel>:
1005f7b4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1005f7b6:	4604      	mov	r4, r0
1005f7b8:	20c2      	movs	r0, #194	@ 0xc2
1005f7ba:	5c27      	ldrb	r7, [r4, r0]
1005f7bc:	2501      	movs	r5, #1
1005f7be:	403d      	ands	r5, r7
1005f7c0:	07ba      	lsls	r2, r7, #30
1005f7c2:	0fd0      	lsrs	r0, r2, #31
1005f7c4:	1828      	adds	r0, r5, r0
1005f7c6:	0779      	lsls	r1, r7, #29
1005f7c8:	0fc9      	lsrs	r1, r1, #31
1005f7ca:	1840      	adds	r0, r0, r1
1005f7cc:	1e40      	subs	r0, r0, #1
1005f7ce:	b2c0      	uxtb	r0, r0
1005f7d0:	34c2      	adds	r4, #194	@ 0xc2
1005f7d2:	7c26      	ldrb	r6, [r4, #16]
1005f7d4:	42b0      	cmp	r0, r6
1005f7d6:	d10f      	bne.n	1005f7f8 <UTIL_u8GetNextAdvChannel+0x44>
1005f7d8:	9201      	str	r2, [sp, #4]
1005f7da:	2001      	movs	r0, #1
1005f7dc:	9002      	str	r0, [sp, #8]
1005f7de:	f003 fb6d 	bl	10062ebc <Hal_Get_Random_Number>
1005f7e2:	2e01      	cmp	r6, #1
1005f7e4:	d00a      	beq.n	1005f7fc <UTIL_u8GetNextAdvChannel+0x48>
1005f7e6:	2e02      	cmp	r6, #2
1005f7e8:	d10e      	bne.n	1005f808 <UTIL_u8GetNextAdvChannel+0x54>
1005f7ea:	b2c0      	uxtb	r0, r0
1005f7ec:	2106      	movs	r1, #6
1005f7ee:	f7e0 fdad 	bl	1004034c <__aeabi_uidivmod>
1005f7f2:	a012      	add	r0, pc, #72	@ (adr r0, 1005f83c <UTIL_u8GetNextAdvChannel+0x88>)
1005f7f4:	5c40      	ldrb	r0, [r0, r1]
1005f7f6:	e012      	b.n	1005f81e <UTIL_u8GetNextAdvChannel+0x6a>
1005f7f8:	7c60      	ldrb	r0, [r4, #17]
1005f7fa:	e011      	b.n	1005f820 <UTIL_u8GetNextAdvChannel+0x6c>
1005f7fc:	9902      	ldr	r1, [sp, #8]
1005f7fe:	4008      	ands	r0, r1
1005f800:	2d00      	cmp	r5, #0
1005f802:	d104      	bne.n	1005f80e <UTIL_u8GetNextAdvChannel+0x5a>
1005f804:	a10c      	add	r1, pc, #48	@ (adr r1, 1005f838 <UTIL_u8GetNextAdvChannel+0x84>)
1005f806:	e008      	b.n	1005f81a <UTIL_u8GetNextAdvChannel+0x66>
1005f808:	08b8      	lsrs	r0, r7, #2
1005f80a:	1a38      	subs	r0, r7, r0
1005f80c:	e007      	b.n	1005f81e <UTIL_u8GetNextAdvChannel+0x6a>
1005f80e:	9901      	ldr	r1, [sp, #4]
1005f810:	2900      	cmp	r1, #0
1005f812:	d401      	bmi.n	1005f818 <UTIL_u8GetNextAdvChannel+0x64>
1005f814:	a107      	add	r1, pc, #28	@ (adr r1, 1005f834 <UTIL_u8GetNextAdvChannel+0x80>)
1005f816:	e000      	b.n	1005f81a <UTIL_u8GetNextAdvChannel+0x66>
1005f818:	a105      	add	r1, pc, #20	@ (adr r1, 1005f830 <UTIL_u8GetNextAdvChannel+0x7c>)
1005f81a:	1808      	adds	r0, r1, r0
1005f81c:	7800      	ldrb	r0, [r0, #0]
1005f81e:	7460      	strb	r0, [r4, #17]
1005f820:	0071      	lsls	r1, r6, #1
1005f822:	b2c2      	uxtb	r2, r0
1005f824:	40ca      	lsrs	r2, r1
1005f826:	2003      	movs	r0, #3
1005f828:	4010      	ands	r0, r2
1005f82a:	3024      	adds	r0, #36	@ 0x24
1005f82c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1005f82e:	46c0      	nop			@ (mov r8, r8)
1005f830:	00000906 	.word	0x00000906
1005f834:	00000d07 	.word	0x00000d07
1005f838:	00000e0b 	.word	0x00000e0b
1005f83c:	2d271e1b 	.word	0x2d271e1b
1005f840:	00003936 	.word	0x00003936

1005f844 <hci_le_advertising_set_terminated_event_push>:
1005f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f846:	461f      	mov	r7, r3
1005f848:	4616      	mov	r6, r2
1005f84a:	460d      	mov	r5, r1
1005f84c:	4604      	mov	r4, r0
1005f84e:	06c0      	lsls	r0, r0, #27
1005f850:	d40b      	bmi.n	1005f86a <hci_le_advertising_set_terminated_event_push+0x26>
1005f852:	4817      	ldr	r0, [pc, #92]	@ (1005f8b0 <__arm_cp.42_0>)
1005f854:	6800      	ldr	r0, [r0, #0]
1005f856:	213d      	movs	r1, #61	@ 0x3d
1005f858:	5c41      	ldrb	r1, [r0, r1]
1005f85a:	0689      	lsls	r1, r1, #26
1005f85c:	d527      	bpl.n	1005f8ae <hci_le_advertising_set_terminated_event_push+0x6a>
1005f85e:	303d      	adds	r0, #61	@ 0x3d
1005f860:	7ac0      	ldrb	r0, [r0, #11]
1005f862:	0780      	lsls	r0, r0, #30
1005f864:	d523      	bpl.n	1005f8ae <hci_le_advertising_set_terminated_event_push+0x6a>
1005f866:	221f      	movs	r2, #31
1005f868:	e002      	b.n	1005f870 <hci_le_advertising_set_terminated_event_push+0x2c>
1005f86a:	20bf      	movs	r0, #191	@ 0xbf
1005f86c:	4004      	ands	r4, r0
1005f86e:	2211      	movs	r2, #17
1005f870:	4810      	ldr	r0, [pc, #64]	@ (1005f8b4 <__arm_cp.42_1>)
1005f872:	6800      	ldr	r0, [r0, #0]
1005f874:	0761      	lsls	r1, r4, #29
1005f876:	0ec9      	lsrs	r1, r1, #27
1005f878:	1840      	adds	r0, r0, r1
1005f87a:	6900      	ldr	r0, [r0, #16]
1005f87c:	2303      	movs	r3, #3
1005f87e:	4621      	mov	r1, r4
1005f880:	f7f5 fcb8 	bl	100551f4 <aci_event_fifo_push_header>
1005f884:	2800      	cmp	r0, #0
1005f886:	d012      	beq.n	1005f8ae <hci_le_advertising_set_terminated_event_push+0x6a>
1005f888:	4601      	mov	r1, r0
1005f88a:	200f      	movs	r0, #15
1005f88c:	72c8      	strb	r0, [r1, #11]
1005f88e:	20ff      	movs	r0, #255	@ 0xff
1005f890:	7288      	strb	r0, [r1, #10]
1005f892:	730f      	strb	r7, [r1, #12]
1005f894:	724e      	strb	r6, [r1, #9]
1005f896:	720d      	strb	r5, [r1, #8]
1005f898:	2012      	movs	r0, #18
1005f89a:	71c8      	strb	r0, [r1, #7]
1005f89c:	2006      	movs	r0, #6
1005f89e:	7188      	strb	r0, [r1, #6]
1005f8a0:	203e      	movs	r0, #62	@ 0x3e
1005f8a2:	7148      	strb	r0, [r1, #5]
1005f8a4:	2004      	movs	r0, #4
1005f8a6:	7108      	strb	r0, [r1, #4]
1005f8a8:	4620      	mov	r0, r4
1005f8aa:	f7f5 fd40 	bl	1005532e <aci_event_fifo_push>
1005f8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005f8b0 <__arm_cp.42_0>:
1005f8b0:	20002ad0 	.word	0x20002ad0

1005f8b4 <__arm_cp.42_1>:
1005f8b4:	20002a80 	.word	0x20002a80

1005f8b8 <EADV_stop_isr>:
1005f8b8:	b5b0      	push	{r4, r5, r7, lr}
1005f8ba:	4604      	mov	r4, r0
1005f8bc:	20d1      	movs	r0, #209	@ 0xd1
1005f8be:	5c20      	ldrb	r0, [r4, r0]
1005f8c0:	f000 fdbc 	bl	1006043c <LL_sched_set_cancel_request>
1005f8c4:	4625      	mov	r5, r4
1005f8c6:	35ce      	adds	r5, #206	@ 0xce
1005f8c8:	78a8      	ldrb	r0, [r5, #2]
1005f8ca:	f000 fdb7 	bl	1006043c <LL_sched_set_cancel_request>
1005f8ce:	20ce      	movs	r0, #206	@ 0xce
1005f8d0:	2100      	movs	r1, #0
1005f8d2:	5221      	strh	r1, [r4, r0]
1005f8d4:	7aa8      	ldrb	r0, [r5, #10]
1005f8d6:	28ff      	cmp	r0, #255	@ 0xff
1005f8d8:	d001      	beq.n	1005f8de <EADV_stop_isr+0x26>
1005f8da:	f7fb fa66 	bl	1005adaa <llc_conn_release_conn_idx>
1005f8de:	20ff      	movs	r0, #255	@ 0xff
1005f8e0:	72a8      	strb	r0, [r5, #10]
1005f8e2:	bdb0      	pop	{r4, r5, r7, pc}

1005f8e4 <ADV_createslot>:
1005f8e4:	b570      	push	{r4, r5, r6, lr}
1005f8e6:	4604      	mov	r4, r0
1005f8e8:	20c5      	movs	r0, #197	@ 0xc5
1005f8ea:	5c20      	ldrb	r0, [r4, r0]
1005f8ec:	f7fc f9be 	bl	1005bc6c <llc_convert_hci_phy_enum_to_hw_phy>
1005f8f0:	4605      	mov	r5, r0
1005f8f2:	4626      	mov	r6, r4
1005f8f4:	36c5      	adds	r6, #197	@ 0xc5
1005f8f6:	7af0      	ldrb	r0, [r6, #11]
1005f8f8:	4629      	mov	r1, r5
1005f8fa:	f7f4 fcc4 	bl	10054286 <BLEPLAT_CNTR_SmSetTxPhy>
1005f8fe:	7af0      	ldrb	r0, [r6, #11]
1005f900:	4629      	mov	r1, r5
1005f902:	f7f4 fc54 	bl	100541ae <BLEPLAT_CNTR_SmSetRxPhy>
1005f906:	f7f3 ffa0 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
1005f90a:	f000 fd11 	bl	10060330 <LL_get_tx_common_buffer_p>
1005f90e:	4602      	mov	r2, r0
1005f910:	7db0      	ldrb	r0, [r6, #22]
1005f912:	4621      	mov	r1, r4
1005f914:	f000 f801 	bl	1005f91a <EADV_vPrepareAdvOrRspLegacyPacket>
1005f918:	bd70      	pop	{r4, r5, r6, pc}

1005f91a <EADV_vPrepareAdvOrRspLegacyPacket>:
1005f91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005f91c:	4614      	mov	r4, r2
1005f91e:	460d      	mov	r5, r1
1005f920:	4606      	mov	r6, r0
1005f922:	460f      	mov	r7, r1
1005f924:	37b8      	adds	r7, #184	@ 0xb8
1005f926:	2004      	movs	r0, #4
1005f928:	2e00      	cmp	r6, #0
1005f92a:	4601      	mov	r1, r0
1005f92c:	d10d      	bne.n	1005f94a <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005f92e:	8839      	ldrh	r1, [r7, #0]
1005f930:	074a      	lsls	r2, r1, #29
1005f932:	d407      	bmi.n	1005f944 <EADV_vPrepareAdvOrRspLegacyPacket+0x2a>
1005f934:	2203      	movs	r2, #3
1005f936:	4011      	ands	r1, r2
1005f938:	424a      	negs	r2, r1
1005f93a:	414a      	adcs	r2, r1
1005f93c:	2902      	cmp	r1, #2
1005f93e:	d003      	beq.n	1005f948 <EADV_vPrepareAdvOrRspLegacyPacket+0x2e>
1005f940:	0051      	lsls	r1, r2, #1
1005f942:	e002      	b.n	1005f94a <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005f944:	2101      	movs	r1, #1
1005f946:	e000      	b.n	1005f94a <EADV_vPrepareAdvOrRspLegacyPacket+0x30>
1005f948:	2106      	movs	r1, #6
1005f94a:	7021      	strb	r1, [r4, #0]
1005f94c:	2e00      	cmp	r6, #0
1005f94e:	d107      	bne.n	1005f960 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005f950:	8839      	ldrh	r1, [r7, #0]
1005f952:	4001      	ands	r1, r0
1005f954:	d104      	bne.n	1005f960 <EADV_vPrepareAdvOrRspLegacyPacket+0x46>
1005f956:	202e      	movs	r0, #46	@ 0x2e
1005f958:	5c28      	ldrb	r0, [r5, r0]
1005f95a:	1d80      	adds	r0, r0, #6
1005f95c:	7060      	strb	r0, [r4, #1]
1005f95e:	e00f      	b.n	1005f980 <EADV_vPrepareAdvOrRspLegacyPacket+0x66>
1005f960:	2e00      	cmp	r6, #0
1005f962:	d004      	beq.n	1005f96e <EADV_vPrepareAdvOrRspLegacyPacket+0x54>
1005f964:	4628      	mov	r0, r5
1005f966:	3042      	adds	r0, #66	@ 0x42
1005f968:	7800      	ldrb	r0, [r0, #0]
1005f96a:	1d80      	adds	r0, r0, #6
1005f96c:	e000      	b.n	1005f970 <EADV_vPrepareAdvOrRspLegacyPacket+0x56>
1005f96e:	200c      	movs	r0, #12
1005f970:	7060      	strb	r0, [r4, #1]
1005f972:	4620      	mov	r0, r4
1005f974:	3008      	adds	r0, #8
1005f976:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005f978:	3109      	adds	r1, #9
1005f97a:	2206      	movs	r2, #6
1005f97c:	f7f2 feee 	bl	1005275c <BLEPLAT_MemCpy>
1005f980:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005f982:	1ca0      	adds	r0, r4, #2
1005f984:	1c49      	adds	r1, r1, #1
1005f986:	2206      	movs	r2, #6
1005f988:	f7f2 fee8 	bl	1005275c <BLEPLAT_MemCpy>
1005f98c:	7820      	ldrb	r0, [r4, #0]
1005f98e:	212f      	movs	r1, #47	@ 0x2f
1005f990:	4001      	ands	r1, r0
1005f992:	7021      	strb	r1, [r4, #0]
1005f994:	6f68      	ldr	r0, [r5, #116]	@ 0x74
1005f996:	7800      	ldrb	r0, [r0, #0]
1005f998:	07c0      	lsls	r0, r0, #31
1005f99a:	0e40      	lsrs	r0, r0, #25
1005f99c:	1840      	adds	r0, r0, r1
1005f99e:	7020      	strb	r0, [r4, #0]
1005f9a0:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005f9a2:	7a09      	ldrb	r1, [r1, #8]
1005f9a4:	01c9      	lsls	r1, r1, #7
1005f9a6:	1808      	adds	r0, r1, r0
1005f9a8:	7020      	strb	r0, [r4, #0]
1005f9aa:	f000 f9ed 	bl	1005fd88 <llc_get_channel_sel_algo2_enabled>
1005f9ae:	7821      	ldrb	r1, [r4, #0]
1005f9b0:	0140      	lsls	r0, r0, #5
1005f9b2:	4308      	orrs	r0, r1
1005f9b4:	7020      	strb	r0, [r4, #0]
1005f9b6:	4271      	negs	r1, r6
1005f9b8:	4171      	adcs	r1, r6
1005f9ba:	8838      	ldrh	r0, [r7, #0]
1005f9bc:	2204      	movs	r2, #4
1005f9be:	4002      	ands	r2, r0
1005f9c0:	0890      	lsrs	r0, r2, #2
1005f9c2:	4008      	ands	r0, r1
1005f9c4:	d101      	bne.n	1005f9ca <EADV_vPrepareAdvOrRspLegacyPacket+0xb0>
1005f9c6:	2708      	movs	r7, #8
1005f9c8:	e000      	b.n	1005f9cc <EADV_vPrepareAdvOrRspLegacyPacket+0xb2>
1005f9ca:	270e      	movs	r7, #14
1005f9cc:	2800      	cmp	r0, #0
1005f9ce:	d001      	beq.n	1005f9d4 <EADV_vPrepareAdvOrRspLegacyPacket+0xba>
1005f9d0:	200c      	movs	r0, #12
1005f9d2:	e011      	b.n	1005f9f8 <EADV_vPrepareAdvOrRspLegacyPacket+0xde>
1005f9d4:	2e00      	cmp	r6, #0
1005f9d6:	d001      	beq.n	1005f9dc <EADV_vPrepareAdvOrRspLegacyPacket+0xc2>
1005f9d8:	203c      	movs	r0, #60	@ 0x3c
1005f9da:	e000      	b.n	1005f9de <EADV_vPrepareAdvOrRspLegacyPacket+0xc4>
1005f9dc:	2028      	movs	r0, #40	@ 0x28
1005f9de:	5829      	ldr	r1, [r5, r0]
1005f9e0:	2e00      	cmp	r6, #0
1005f9e2:	d001      	beq.n	1005f9e8 <EADV_vPrepareAdvOrRspLegacyPacket+0xce>
1005f9e4:	2042      	movs	r0, #66	@ 0x42
1005f9e6:	e000      	b.n	1005f9ea <EADV_vPrepareAdvOrRspLegacyPacket+0xd0>
1005f9e8:	202e      	movs	r0, #46	@ 0x2e
1005f9ea:	5a2d      	ldrh	r5, [r5, r0]
1005f9ec:	19e0      	adds	r0, r4, r7
1005f9ee:	462a      	mov	r2, r5
1005f9f0:	f7f2 feb4 	bl	1005275c <BLEPLAT_MemCpy>
1005f9f4:	1978      	adds	r0, r7, r5
1005f9f6:	1e80      	subs	r0, r0, #2
1005f9f8:	7060      	strb	r0, [r4, #1]
1005f9fa:	2000      	movs	r0, #0
1005f9fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1005fa00 <ADV_ISR_connect_request_received>:
1005fa00:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fa02:	b085      	sub	sp, #20
1005fa04:	4616      	mov	r6, r2
1005fa06:	460d      	mov	r5, r1
1005fa08:	4604      	mov	r4, r0
1005fa0a:	f7f3 ffff 	bl	10053a0c <BLEPLAT_CNTR_PacketClrPllTrig>
1005fa0e:	f7f2 ffb1 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
1005fa12:	2003      	movs	r0, #3
1005fa14:	43c0      	mvns	r0, r0
1005fa16:	1cc1      	adds	r1, r0, #3
1005fa18:	4668      	mov	r0, sp
1005fa1a:	8101      	strh	r1, [r0, #8]
1005fa1c:	2101      	movs	r1, #1
1005fa1e:	8201      	strh	r1, [r0, #16]
1005fa20:	7341      	strb	r1, [r0, #13]
1005fa22:	21be      	movs	r1, #190	@ 0xbe
1005fa24:	5a61      	ldrh	r1, [r4, r1]
1005fa26:	7281      	strb	r1, [r0, #10]
1005fa28:	4627      	mov	r7, r4
1005fa2a:	37be      	adds	r7, #190	@ 0xbe
1005fa2c:	7eba      	ldrb	r2, [r7, #26]
1005fa2e:	72c2      	strb	r2, [r0, #11]
1005fa30:	7cba      	ldrb	r2, [r7, #18]
1005fa32:	7382      	strb	r2, [r0, #14]
1005fa34:	4a0e      	ldr	r2, [pc, #56]	@ (1005fa70 <__arm_cp.47_0>)
1005fa36:	1a89      	subs	r1, r1, r2
1005fa38:	1e4a      	subs	r2, r1, #1
1005fa3a:	4191      	sbcs	r1, r2
1005fa3c:	73c1      	strb	r1, [r0, #15]
1005fa3e:	7301      	strb	r1, [r0, #12]
1005fa40:	9601      	str	r6, [sp, #4]
1005fa42:	9500      	str	r5, [sp, #0]
1005fa44:	f7fb f9ec 	bl	1005ae20 <llc_conn_go_to_connect>
1005fa48:	4620      	mov	r0, r4
1005fa4a:	3028      	adds	r0, #40	@ 0x28
1005fa4c:	f7ff f934 	bl	1005ecb8 <LL_eadv_switchbackupdata_data_struc>
1005fa50:	343c      	adds	r4, #60	@ 0x3c
1005fa52:	4620      	mov	r0, r4
1005fa54:	f7ff f930 	bl	1005ecb8 <LL_eadv_switchbackupdata_data_struc>
1005fa58:	2000      	movs	r0, #0
1005fa5a:	7438      	strb	r0, [r7, #16]
1005fa5c:	7cb8      	ldrb	r0, [r7, #18]
1005fa5e:	f000 fd5d 	bl	1006051c <LL_sched_engine>
1005fa62:	7e38      	ldrb	r0, [r7, #24]
1005fa64:	0780      	lsls	r0, r0, #30
1005fa66:	d501      	bpl.n	1005fa6c <ADV_ISR_connect_request_received+0x6c>
1005fa68:	f7fc f870 	bl	1005bb4c <llc_priv_stop_privacy_timer_ucfg_weak>
1005fa6c:	b005      	add	sp, #20
1005fa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fa70 <__arm_cp.47_0>:
1005fa70:	0000fffc 	.word	0x0000fffc

1005fa74 <ADV_ISR>:
1005fa74:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fa76:	b08d      	sub	sp, #52	@ 0x34
1005fa78:	4605      	mov	r5, r0
1005fa7a:	f000 fc61 	bl	10060340 <LL_get_rx_common_buffer_p>
1005fa7e:	9006      	str	r0, [sp, #24]
1005fa80:	4c87      	ldr	r4, [pc, #540]	@ (1005fca0 <__arm_cp.48_0>)
1005fa82:	6820      	ldr	r0, [r4, #0]
1005fa84:	f7f3 ff7b 	bl	1005397e <BLEPLAT_CNTR_IntGetIntStatusRxOk>
1005fa88:	4606      	mov	r6, r0
1005fa8a:	6820      	ldr	r0, [r4, #0]
1005fa8c:	f7f3 ff8e 	bl	100539ac <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005fa90:	4607      	mov	r7, r0
1005fa92:	20d0      	movs	r0, #208	@ 0xd0
1005fa94:	5c28      	ldrb	r0, [r5, r0]
1005fa96:	212c      	movs	r1, #44	@ 0x2c
1005fa98:	4341      	muls	r1, r0
1005fa9a:	4a82      	ldr	r2, [pc, #520]	@ (1005fca4 <__arm_cp.48_1>)
1005fa9c:	6812      	ldr	r2, [r2, #0]
1005fa9e:	1851      	adds	r1, r2, r1
1005faa0:	7d89      	ldrb	r1, [r1, #22]
1005faa2:	2914      	cmp	r1, #20
1005faa4:	d103      	bne.n	1005faae <ADV_ISR+0x3a>
1005faa6:	210a      	movs	r1, #10
1005faa8:	2203      	movs	r2, #3
1005faaa:	f000 fefd 	bl	100608a8 <LL_sched_set_priority>
1005faae:	462c      	mov	r4, r5
1005fab0:	34b4      	adds	r4, #180	@ 0xb4
1005fab2:	4628      	mov	r0, r5
1005fab4:	30db      	adds	r0, #219	@ 0xdb
1005fab6:	9004      	str	r0, [sp, #16]
1005fab8:	2e00      	cmp	r6, #0
1005faba:	d038      	beq.n	1005fb2e <ADV_ISR+0xba>
1005fabc:	9505      	str	r5, [sp, #20]
1005fabe:	2700      	movs	r7, #0
1005fac0:	970c      	str	r7, [sp, #48]	@ 0x30
1005fac2:	970b      	str	r7, [sp, #44]	@ 0x2c
1005fac4:	9d06      	ldr	r5, [sp, #24]
1005fac6:	7828      	ldrb	r0, [r5, #0]
1005fac8:	09c0      	lsrs	r0, r0, #7
1005faca:	a90b      	add	r1, sp, #44	@ 0x2c
1005facc:	7008      	strb	r0, [r1, #0]
1005face:	4876      	ldr	r0, [pc, #472]	@ (1005fca8 <__arm_cp.48_2>)
1005fad0:	6800      	ldr	r0, [r0, #0]
1005fad2:	22d8      	movs	r2, #216	@ 0xd8
1005fad4:	5c80      	ldrb	r0, [r0, r2]
1005fad6:	9003      	str	r0, [sp, #12]
1005fad8:	1c48      	adds	r0, r1, #1
1005fada:	4629      	mov	r1, r5
1005fadc:	3108      	adds	r1, #8
1005fade:	2606      	movs	r6, #6
1005fae0:	4632      	mov	r2, r6
1005fae2:	f7f2 fe3b 	bl	1005275c <BLEPLAT_MemCpy>
1005fae6:	970a      	str	r7, [sp, #40]	@ 0x28
1005fae8:	9709      	str	r7, [sp, #36]	@ 0x24
1005faea:	7828      	ldrb	r0, [r5, #0]
1005faec:	0640      	lsls	r0, r0, #25
1005faee:	0fc0      	lsrs	r0, r0, #31
1005faf0:	a909      	add	r1, sp, #36	@ 0x24
1005faf2:	7008      	strb	r0, [r1, #0]
1005faf4:	1c48      	adds	r0, r1, #1
1005faf6:	1ca9      	adds	r1, r5, #2
1005faf8:	4632      	mov	r2, r6
1005fafa:	f7f2 fe2f 	bl	1005275c <BLEPLAT_MemCpy>
1005fafe:	7828      	ldrb	r0, [r5, #0]
1005fb00:	260f      	movs	r6, #15
1005fb02:	4006      	ands	r6, r0
1005fb04:	2e05      	cmp	r6, #5
1005fb06:	d101      	bne.n	1005fb0c <ADV_ISR+0x98>
1005fb08:	f7f2 ff34 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
1005fb0c:	7be3      	ldrb	r3, [r4, #15]
1005fb0e:	7922      	ldrb	r2, [r4, #4]
1005fb10:	9702      	str	r7, [sp, #8]
1005fb12:	ad07      	add	r5, sp, #28
1005fb14:	9501      	str	r5, [sp, #4]
1005fb16:	9805      	ldr	r0, [sp, #20]
1005fb18:	3084      	adds	r0, #132	@ 0x84
1005fb1a:	9000      	str	r0, [sp, #0]
1005fb1c:	a809      	add	r0, sp, #36	@ 0x24
1005fb1e:	4631      	mov	r1, r6
1005fb20:	f006 faee 	bl	10066100 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>
1005fb24:	0841      	lsrs	r1, r0, #1
1005fb26:	297e      	cmp	r1, #126	@ 0x7e
1005fb28:	d807      	bhi.n	1005fb3a <ADV_ISR+0xc6>
1005fb2a:	4601      	mov	r1, r0
1005fb2c:	e006      	b.n	1005fb3c <ADV_ISR+0xc8>
1005fb2e:	2601      	movs	r6, #1
1005fb30:	2f00      	cmp	r7, #0
1005fb32:	d154      	bne.n	1005fbde <ADV_ISR+0x16a>
1005fb34:	2700      	movs	r7, #0
1005fb36:	8027      	strh	r7, [r4, #0]
1005fb38:	e056      	b.n	1005fbe8 <ADV_ISR+0x174>
1005fb3a:	2101      	movs	r1, #1
1005fb3c:	7029      	strb	r1, [r5, #0]
1005fb3e:	9d05      	ldr	r5, [sp, #20]
1005fb40:	6f69      	ldr	r1, [r5, #116]	@ 0x74
1005fb42:	680a      	ldr	r2, [r1, #0]
1005fb44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1005fb46:	429a      	cmp	r2, r3
1005fb48:	d12d      	bne.n	1005fba6 <ADV_ISR+0x132>
1005fb4a:	6849      	ldr	r1, [r1, #4]
1005fb4c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1005fb4e:	4291      	cmp	r1, r2
1005fb50:	d129      	bne.n	1005fba6 <ADV_ISR+0x132>
1005fb52:	4607      	mov	r7, r0
1005fb54:	3fff      	subs	r7, #255	@ 0xff
1005fb56:	1e79      	subs	r1, r7, #1
1005fb58:	418f      	sbcs	r7, r1
1005fb5a:	2e03      	cmp	r6, #3
1005fb5c:	d123      	bne.n	1005fba6 <ADV_ISR+0x132>
1005fb5e:	28ff      	cmp	r0, #255	@ 0xff
1005fb60:	d021      	beq.n	1005fba6 <ADV_ISR+0x132>
1005fb62:	88a0      	ldrh	r0, [r4, #4]
1005fb64:	2701      	movs	r7, #1
1005fb66:	0780      	lsls	r0, r0, #30
1005fb68:	d51d      	bpl.n	1005fba6 <ADV_ISR+0x132>
1005fb6a:	9803      	ldr	r0, [sp, #12]
1005fb6c:	2801      	cmp	r0, #1
1005fb6e:	d11a      	bne.n	1005fba6 <ADV_ISR+0x132>
1005fb70:	4628      	mov	r0, r5
1005fb72:	f7f3 ff4b 	bl	10053a0c <BLEPLAT_CNTR_PacketClrPllTrig>
1005fb76:	7e60      	ldrb	r0, [r4, #25]
1005fb78:	2801      	cmp	r0, #1
1005fb7a:	d109      	bne.n	1005fb90 <ADV_ISR+0x11c>
1005fb7c:	8960      	ldrh	r0, [r4, #10]
1005fb7e:	494b      	ldr	r1, [pc, #300]	@ (1005fcac <__arm_cp.48_3>)
1005fb80:	4288      	cmp	r0, r1
1005fb82:	d005      	beq.n	1005fb90 <ADV_ISR+0x11c>
1005fb84:	aa07      	add	r2, sp, #28
1005fb86:	7811      	ldrb	r1, [r2, #0]
1005fb88:	b2c0      	uxtb	r0, r0
1005fb8a:	1c52      	adds	r2, r2, #1
1005fb8c:	f000 f892 	bl	1005fcb4 <hci_le_scan_request_received_event_push>
1005fb90:	7f20      	ldrb	r0, [r4, #28]
1005fb92:	f7f4 fb57 	bl	10054244 <BLEPLAT_CNTR_SmSetTxMode>
1005fb96:	2001      	movs	r0, #1
1005fb98:	9904      	ldr	r1, [sp, #16]
1005fb9a:	7008      	strb	r0, [r1, #0]
1005fb9c:	4628      	mov	r0, r5
1005fb9e:	f7ff fea1 	bl	1005f8e4 <ADV_createslot>
1005fba2:	2600      	movs	r6, #0
1005fba4:	e020      	b.n	1005fbe8 <ADV_ISR+0x174>
1005fba6:	88a0      	ldrh	r0, [r4, #4]
1005fba8:	07c0      	lsls	r0, r0, #31
1005fbaa:	d01a      	beq.n	1005fbe2 <ADV_ISR+0x16e>
1005fbac:	2e05      	cmp	r6, #5
1005fbae:	d118      	bne.n	1005fbe2 <ADV_ISR+0x16e>
1005fbb0:	9806      	ldr	r0, [sp, #24]
1005fbb2:	f7fa ffbf 	bl	1005ab34 <llc_conn_check_connect_request_params>
1005fbb6:	2801      	cmp	r0, #1
1005fbb8:	d113      	bne.n	1005fbe2 <ADV_ISR+0x16e>
1005fbba:	9908      	ldr	r1, [sp, #32]
1005fbbc:	9807      	ldr	r0, [sp, #28]
1005fbbe:	f7fa fd91 	bl	1005a6e4 <llc_conn_list_search_address>
1005fbc2:	4241      	negs	r1, r0
1005fbc4:	4141      	adcs	r1, r0
1005fbc6:	4039      	ands	r1, r7
1005fbc8:	2901      	cmp	r1, #1
1005fbca:	d10a      	bne.n	1005fbe2 <ADV_ISR+0x16e>
1005fbcc:	9803      	ldr	r0, [sp, #12]
1005fbce:	2801      	cmp	r0, #1
1005fbd0:	d107      	bne.n	1005fbe2 <ADV_ISR+0x16e>
1005fbd2:	aa07      	add	r2, sp, #28
1005fbd4:	4628      	mov	r0, r5
1005fbd6:	9906      	ldr	r1, [sp, #24]
1005fbd8:	f7ef f9bc 	bl	1004ef54 <ADV_ISR_connect_request_received_ucfg>
1005fbdc:	2601      	movs	r6, #1
1005fbde:	2700      	movs	r7, #0
1005fbe0:	e002      	b.n	1005fbe8 <ADV_ISR+0x174>
1005fbe2:	2700      	movs	r7, #0
1005fbe4:	8027      	strh	r7, [r4, #0]
1005fbe6:	2601      	movs	r6, #1
1005fbe8:	8821      	ldrh	r1, [r4, #0]
1005fbea:	7fa0      	ldrb	r0, [r4, #30]
1005fbec:	2800      	cmp	r0, #0
1005fbee:	d022      	beq.n	1005fc36 <ADV_ISR+0x1c2>
1005fbf0:	2900      	cmp	r1, #0
1005fbf2:	d122      	bne.n	1005fc3a <ADV_ISR+0x1c6>
1005fbf4:	1e40      	subs	r0, r0, #1
1005fbf6:	77a0      	strb	r0, [r4, #30]
1005fbf8:	88a0      	ldrh	r0, [r4, #4]
1005fbfa:	2103      	movs	r1, #3
1005fbfc:	4001      	ands	r1, r0
1005fbfe:	1e48      	subs	r0, r1, #1
1005fc00:	4181      	sbcs	r1, r0
1005fc02:	0048      	lsls	r0, r1, #1
1005fc04:	8020      	strh	r0, [r4, #0]
1005fc06:	4628      	mov	r0, r5
1005fc08:	f7ff fdd4 	bl	1005f7b4 <UTIL_u8GetNextAdvChannel>
1005fc0c:	4601      	mov	r1, r0
1005fc0e:	7f20      	ldrb	r0, [r4, #28]
1005fc10:	f7f4 fa59 	bl	100540c6 <BLEPLAT_CNTR_SmSetRemapChan>
1005fc14:	7f20      	ldrb	r0, [r4, #28]
1005fc16:	f7f4 fb15 	bl	10054244 <BLEPLAT_CNTR_SmSetTxMode>
1005fc1a:	4628      	mov	r0, r5
1005fc1c:	f7f3 ffea 	bl	10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>
1005fc20:	f7f2 fea8 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
1005fc24:	2000      	movs	r0, #0
1005fc26:	9904      	ldr	r1, [sp, #16]
1005fc28:	7008      	strb	r0, [r1, #0]
1005fc2a:	4628      	mov	r0, r5
1005fc2c:	f7ff fe5a 	bl	1005f8e4 <ADV_createslot>
1005fc30:	f7f2 feb8 	bl	100529a4 <BLEPLAT_SetRadioCloseTimeout>
1005fc34:	e02a      	b.n	1005fc8c <ADV_ISR+0x218>
1005fc36:	2900      	cmp	r1, #0
1005fc38:	d019      	beq.n	1005fc6e <ADV_ISR+0x1fa>
1005fc3a:	4819      	ldr	r0, [pc, #100]	@ (1005fca0 <__arm_cp.48_0>)
1005fc3c:	6800      	ldr	r0, [r0, #0]
1005fc3e:	f7f3 feb5 	bl	100539ac <BLEPLAT_CNTR_IntGetIntStatusTxDone>
1005fc42:	2800      	cmp	r0, #0
1005fc44:	d022      	beq.n	1005fc8c <ADV_ISR+0x218>
1005fc46:	4628      	mov	r0, r5
1005fc48:	f7f3 ffd4 	bl	10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>
1005fc4c:	7c60      	ldrb	r0, [r4, #17]
1005fc4e:	2801      	cmp	r0, #1
1005fc50:	d001      	beq.n	1005fc56 <ADV_ISR+0x1e2>
1005fc52:	4917      	ldr	r1, [pc, #92]	@ (1005fcb0 <__arm_cp.48_4>)
1005fc54:	e000      	b.n	1005fc58 <ADV_ISR+0x1e4>
1005fc56:	2146      	movs	r1, #70	@ 0x46
1005fc58:	3514      	adds	r5, #20
1005fc5a:	4628      	mov	r0, r5
1005fc5c:	f7f4 f82b 	bl	10053cb6 <BLEPLAT_CNTR_SetRcvLen>
1005fc60:	8820      	ldrh	r0, [r4, #0]
1005fc62:	1e40      	subs	r0, r0, #1
1005fc64:	8020      	strh	r0, [r4, #0]
1005fc66:	f7f3 fdf0 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
1005fc6a:	2600      	movs	r6, #0
1005fc6c:	e00e      	b.n	1005fc8c <ADV_ISR+0x218>
1005fc6e:	f7f2 fe81 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
1005fc72:	4628      	mov	r0, r5
1005fc74:	f7f3 ffbe 	bl	10053bf4 <BLEPLAT_CNTR_PacketSetPllTrig>
1005fc78:	88e0      	ldrh	r0, [r4, #6]
1005fc7a:	1e40      	subs	r0, r0, #1
1005fc7c:	80e0      	strh	r0, [r4, #6]
1005fc7e:	2100      	movs	r1, #0
1005fc80:	4628      	mov	r0, r5
1005fc82:	f7ff fcb7 	bl	1005f5f4 <ADV_skiproutine>
1005fc86:	7f20      	ldrb	r0, [r4, #28]
1005fc88:	f000 fc48 	bl	1006051c <LL_sched_engine>
1005fc8c:	2f00      	cmp	r7, #0
1005fc8e:	d002      	beq.n	1005fc96 <ADV_ISR+0x222>
1005fc90:	8820      	ldrh	r0, [r4, #0]
1005fc92:	1e40      	subs	r0, r0, #1
1005fc94:	8020      	strh	r0, [r4, #0]
1005fc96:	f7f5 faa9 	bl	100551ec <log_notify_us_flush_ucfg_weak>
1005fc9a:	4630      	mov	r0, r6
1005fc9c:	b00d      	add	sp, #52	@ 0x34
1005fc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1005fca0 <__arm_cp.48_0>:
1005fca0:	20002acc 	.word	0x20002acc

1005fca4 <__arm_cp.48_1>:
1005fca4:	20002ad8 	.word	0x20002ad8

1005fca8 <__arm_cp.48_2>:
1005fca8:	20002ad0 	.word	0x20002ad0

1005fcac <__arm_cp.48_3>:
1005fcac:	0000fffc 	.word	0x0000fffc

1005fcb0 <__arm_cp.48_4>:
1005fcb0:	000002ee 	.word	0x000002ee

1005fcb4 <hci_le_scan_request_received_event_push>:
1005fcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fcb6:	460e      	mov	r6, r1
1005fcb8:	4605      	mov	r5, r0
1005fcba:	4815      	ldr	r0, [pc, #84]	@ (1005fd10 <__arm_cp.49_0>)
1005fcbc:	6800      	ldr	r0, [r0, #0]
1005fcbe:	213d      	movs	r1, #61	@ 0x3d
1005fcc0:	5c41      	ldrb	r1, [r0, r1]
1005fcc2:	0689      	lsls	r1, r1, #26
1005fcc4:	d522      	bpl.n	1005fd0c <hci_le_scan_request_received_event_push+0x58>
1005fcc6:	303d      	adds	r0, #61	@ 0x3d
1005fcc8:	7ac0      	ldrb	r0, [r0, #11]
1005fcca:	0740      	lsls	r0, r0, #29
1005fccc:	d51e      	bpl.n	1005fd0c <hci_le_scan_request_received_event_push+0x58>
1005fcce:	4614      	mov	r4, r2
1005fcd0:	4810      	ldr	r0, [pc, #64]	@ (1005fd14 <__arm_cp.49_1>)
1005fcd2:	6800      	ldr	r0, [r0, #0]
1005fcd4:	6940      	ldr	r0, [r0, #20]
1005fcd6:	21a1      	movs	r1, #161	@ 0xa1
1005fcd8:	222b      	movs	r2, #43	@ 0x2b
1005fcda:	2303      	movs	r3, #3
1005fcdc:	f7f5 fa8a 	bl	100551f4 <aci_event_fifo_push_header>
1005fce0:	2800      	cmp	r0, #0
1005fce2:	d013      	beq.n	1005fd0c <hci_le_scan_request_received_event_push+0x58>
1005fce4:	4607      	mov	r7, r0
1005fce6:	7246      	strb	r6, [r0, #9]
1005fce8:	7205      	strb	r5, [r0, #8]
1005fcea:	300a      	adds	r0, #10
1005fcec:	2206      	movs	r2, #6
1005fcee:	4621      	mov	r1, r4
1005fcf0:	f7f2 fd34 	bl	1005275c <BLEPLAT_MemCpy>
1005fcf4:	2013      	movs	r0, #19
1005fcf6:	71f8      	strb	r0, [r7, #7]
1005fcf8:	2009      	movs	r0, #9
1005fcfa:	71b8      	strb	r0, [r7, #6]
1005fcfc:	203e      	movs	r0, #62	@ 0x3e
1005fcfe:	7178      	strb	r0, [r7, #5]
1005fd00:	2004      	movs	r0, #4
1005fd02:	7138      	strb	r0, [r7, #4]
1005fd04:	20a1      	movs	r0, #161	@ 0xa1
1005fd06:	4639      	mov	r1, r7
1005fd08:	f7f5 fb11 	bl	1005532e <aci_event_fifo_push>
1005fd0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1005fd0e:	46c0      	nop			@ (mov r8, r8)

1005fd10 <__arm_cp.49_0>:
1005fd10:	20002ad0 	.word	0x20002ad0

1005fd14 <__arm_cp.49_1>:
1005fd14:	20002a80 	.word	0x20002a80

1005fd18 <EADV_start_request_radio_tasks>:
1005fd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1005fd1a:	4604      	mov	r4, r0
1005fd1c:	20d8      	movs	r0, #216	@ 0xd8
1005fd1e:	21ff      	movs	r1, #255	@ 0xff
1005fd20:	5421      	strb	r1, [r4, r0]
1005fd22:	20b8      	movs	r0, #184	@ 0xb8
1005fd24:	5a25      	ldrh	r5, [r4, r0]
1005fd26:	2701      	movs	r7, #1
1005fd28:	402f      	ands	r7, r5
1005fd2a:	4626      	mov	r6, r4
1005fd2c:	36d8      	adds	r6, #216	@ 0xd8
1005fd2e:	2f00      	cmp	r7, #0
1005fd30:	d004      	beq.n	1005fd3c <EADV_start_request_radio_tasks+0x24>
1005fd32:	f7fb fc0f 	bl	1005b554 <llc_conn_reserve_conn_idx>
1005fd36:	7030      	strb	r0, [r6, #0]
1005fd38:	28ff      	cmp	r0, #255	@ 0xff
1005fd3a:	d022      	beq.n	1005fd82 <EADV_start_request_radio_tasks+0x6a>
1005fd3c:	34b8      	adds	r4, #184	@ 0xb8
1005fd3e:	f000 fdf1 	bl	10060924 <LL_sched_reserve_taskslot>
1005fd42:	7620      	strb	r0, [r4, #24]
1005fd44:	28ff      	cmp	r0, #255	@ 0xff
1005fd46:	d013      	beq.n	1005fd70 <EADV_start_request_radio_tasks+0x58>
1005fd48:	2100      	movs	r1, #0
1005fd4a:	06e8      	lsls	r0, r5, #27
1005fd4c:	d41a      	bmi.n	1005fd84 <EADV_start_request_radio_tasks+0x6c>
1005fd4e:	460d      	mov	r5, r1
1005fd50:	f000 fde8 	bl	10060924 <LL_sched_reserve_taskslot>
1005fd54:	4629      	mov	r1, r5
1005fd56:	7660      	strb	r0, [r4, #25]
1005fd58:	28ff      	cmp	r0, #255	@ 0xff
1005fd5a:	d113      	bne.n	1005fd84 <EADV_start_request_radio_tasks+0x6c>
1005fd5c:	2f00      	cmp	r7, #0
1005fd5e:	d002      	beq.n	1005fd66 <EADV_start_request_radio_tasks+0x4e>
1005fd60:	7830      	ldrb	r0, [r6, #0]
1005fd62:	f7fb f822 	bl	1005adaa <llc_conn_release_conn_idx>
1005fd66:	7e20      	ldrb	r0, [r4, #24]
1005fd68:	f000 fdfe 	bl	10060968 <LL_sched_release_taskslot>
1005fd6c:	2107      	movs	r1, #7
1005fd6e:	e009      	b.n	1005fd84 <EADV_start_request_radio_tasks+0x6c>
1005fd70:	2107      	movs	r1, #7
1005fd72:	2f00      	cmp	r7, #0
1005fd74:	d006      	beq.n	1005fd84 <EADV_start_request_radio_tasks+0x6c>
1005fd76:	7830      	ldrb	r0, [r6, #0]
1005fd78:	460c      	mov	r4, r1
1005fd7a:	f7fb f816 	bl	1005adaa <llc_conn_release_conn_idx>
1005fd7e:	4621      	mov	r1, r4
1005fd80:	e000      	b.n	1005fd84 <EADV_start_request_radio_tasks+0x6c>
1005fd82:	210c      	movs	r1, #12
1005fd84:	4608      	mov	r0, r1
1005fd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1005fd88 <llc_get_channel_sel_algo2_enabled>:
1005fd88:	b580      	push	{r7, lr}
1005fd8a:	f000 fae7 	bl	1006035c <llc_get_linkms_cntxt_p>
1005fd8e:	214e      	movs	r1, #78	@ 0x4e
1005fd90:	5c40      	ldrb	r0, [r0, r1]
1005fd92:	bd80      	pop	{r7, pc}

1005fd94 <LL_force_chsel_1>:
1005fd94:	b510      	push	{r4, lr}
1005fd96:	4244      	negs	r4, r0
1005fd98:	4144      	adcs	r4, r0
1005fd9a:	f000 fadf 	bl	1006035c <llc_get_linkms_cntxt_p>
1005fd9e:	214e      	movs	r1, #78	@ 0x4e
1005fda0:	5444      	strb	r4, [r0, r1]
1005fda2:	2000      	movs	r0, #0
1005fda4:	bd10      	pop	{r4, pc}

1005fda6 <llc_eadv_max_supported_data_check_ucfg_weak>:
1005fda6:	2000      	movs	r0, #0
1005fda8:	4770      	bx	lr

1005fdaa <LL_eadv_start_extended_ucfg_weak>:
1005fdaa:	4770      	bx	lr

1005fdac <ext_adv_scan_enabled_ucfg_weak>:
1005fdac:	2000      	movs	r0, #0
1005fdae:	4770      	bx	lr

1005fdb0 <BLE_STACK_EndOfRadioActivityCb>:
1005fdb0:	4770      	bx	lr
	...

1005fdb4 <BLE_STACK_RadioHandler>:
1005fdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
1005fdb6:	b083      	sub	sp, #12
1005fdb8:	4604      	mov	r4, r0
1005fdba:	484c      	ldr	r0, [pc, #304]	@ (1005feec <__arm_cp.1_0>)
1005fdbc:	6004      	str	r4, [r0, #0]
1005fdbe:	4620      	mov	r0, r4
1005fdc0:	f7f3 fdb9 	bl	10053936 <BLEPLAT_CNTR_IntGetIntStatusTxRxSkip>
1005fdc4:	4605      	mov	r5, r0
1005fdc6:	4620      	mov	r0, r4
1005fdc8:	f7f3 fd85 	bl	100538d6 <BLEPLAT_CNTR_IntGetIntStatusDone>
1005fdcc:	4606      	mov	r6, r0
1005fdce:	4668      	mov	r0, sp
1005fdd0:	f7f2 fdd9 	bl	10052986 <BLEPLAT_GetAnchorPoint>
1005fdd4:	9900      	ldr	r1, [sp, #0]
1005fdd6:	1a09      	subs	r1, r1, r0
1005fdd8:	0b4b      	lsrs	r3, r1, #13
1005fdda:	4945      	ldr	r1, [pc, #276]	@ (1005fef0 <__arm_cp.1_1>)
1005fddc:	680a      	ldr	r2, [r1, #0]
1005fdde:	4611      	mov	r1, r2
1005fde0:	31d8      	adds	r1, #216	@ 0xd8
1005fde2:	2b00      	cmp	r3, #0
1005fde4:	d102      	bne.n	1005fdec <BLE_STACK_RadioHandler+0x38>
1005fde6:	6010      	str	r0, [r2, #0]
1005fde8:	2001      	movs	r0, #1
1005fdea:	e000      	b.n	1005fdee <BLE_STACK_RadioHandler+0x3a>
1005fdec:	2000      	movs	r0, #0
1005fdee:	7008      	strb	r0, [r1, #0]
1005fdf0:	4840      	ldr	r0, [pc, #256]	@ (1005fef4 <__arm_cp.1_2>)
1005fdf2:	6800      	ldr	r0, [r0, #0]
1005fdf4:	7b44      	ldrb	r4, [r0, #13]
1005fdf6:	2100      	movs	r1, #0
1005fdf8:	2cff      	cmp	r4, #255	@ 0xff
1005fdfa:	d00a      	beq.n	1005fe12 <BLE_STACK_RadioHandler+0x5e>
1005fdfc:	202c      	movs	r0, #44	@ 0x2c
1005fdfe:	4360      	muls	r0, r4
1005fe00:	4a3d      	ldr	r2, [pc, #244]	@ (1005fef8 <__arm_cp.1_3>)
1005fe02:	6812      	ldr	r2, [r2, #0]
1005fe04:	1810      	adds	r0, r2, r0
1005fe06:	7c82      	ldrb	r2, [r0, #18]
1005fe08:	2a00      	cmp	r2, #0
1005fe0a:	d002      	beq.n	1005fe12 <BLE_STACK_RadioHandler+0x5e>
1005fe0c:	6a41      	ldr	r1, [r0, #36]	@ 0x24
1005fe0e:	68c0      	ldr	r0, [r0, #12]
1005fe10:	e7ff      	b.n	1005fe12 <BLE_STACK_RadioHandler+0x5e>
1005fe12:	2701      	movs	r7, #1
1005fe14:	2e00      	cmp	r6, #0
1005fe16:	d003      	beq.n	1005fe20 <BLE_STACK_RadioHandler+0x6c>
1005fe18:	2d00      	cmp	r5, #0
1005fe1a:	d101      	bne.n	1005fe20 <BLE_STACK_RadioHandler+0x6c>
1005fe1c:	2900      	cmp	r1, #0
1005fe1e:	e011      	b.n	1005fe44 <BLE_STACK_RadioHandler+0x90>
1005fe20:	2d00      	cmp	r5, #0
1005fe22:	d015      	beq.n	1005fe50 <BLE_STACK_RadioHandler+0x9c>
1005fe24:	4a35      	ldr	r2, [pc, #212]	@ (1005fefc <__arm_cp.1_4>)
1005fe26:	1a8b      	subs	r3, r1, r2
1005fe28:	425a      	negs	r2, r3
1005fe2a:	415a      	adcs	r2, r3
1005fe2c:	4b34      	ldr	r3, [pc, #208]	@ (1005ff00 <__arm_cp.1_5>)
1005fe2e:	1acd      	subs	r5, r1, r3
1005fe30:	426b      	negs	r3, r5
1005fe32:	416b      	adcs	r3, r5
1005fe34:	4d33      	ldr	r5, [pc, #204]	@ (1005ff04 <__arm_cp.1_6>)
1005fe36:	1b4e      	subs	r6, r1, r5
1005fe38:	4275      	negs	r5, r6
1005fe3a:	4175      	adcs	r5, r6
1005fe3c:	2900      	cmp	r1, #0
1005fe3e:	d007      	beq.n	1005fe50 <BLE_STACK_RadioHandler+0x9c>
1005fe40:	4313      	orrs	r3, r2
1005fe42:	431d      	orrs	r5, r3
1005fe44:	4e2a      	ldr	r6, [pc, #168]	@ (1005fef0 <__arm_cp.1_1>)
1005fe46:	4d29      	ldr	r5, [pc, #164]	@ (1005feec <__arm_cp.1_0>)
1005fe48:	d004      	beq.n	1005fe54 <BLE_STACK_RadioHandler+0xa0>
1005fe4a:	4788      	blx	r1
1005fe4c:	2700      	movs	r7, #0
1005fe4e:	e001      	b.n	1005fe54 <BLE_STACK_RadioHandler+0xa0>
1005fe50:	4e27      	ldr	r6, [pc, #156]	@ (1005fef0 <__arm_cp.1_1>)
1005fe52:	4d26      	ldr	r5, [pc, #152]	@ (1005feec <__arm_cp.1_0>)
1005fe54:	6828      	ldr	r0, [r5, #0]
1005fe56:	f7f3 fd62 	bl	1005391e <BLEPLAT_CNTR_IntGetIntStatusNoactiveError>
1005fe5a:	2800      	cmp	r0, #0
1005fe5c:	d001      	beq.n	1005fe62 <BLE_STACK_RadioHandler+0xae>
1005fe5e:	2504      	movs	r5, #4
1005fe60:	e020      	b.n	1005fea4 <BLE_STACK_RadioHandler+0xf0>
1005fe62:	6828      	ldr	r0, [r5, #0]
1005fe64:	f7f3 fd16 	bl	10053894 <BLEPLAT_CNTR_IntGetIntStatusBitAct2Error>
1005fe68:	2800      	cmp	r0, #0
1005fe6a:	d001      	beq.n	1005fe70 <BLE_STACK_RadioHandler+0xbc>
1005fe6c:	2501      	movs	r5, #1
1005fe6e:	e019      	b.n	1005fea4 <BLE_STACK_RadioHandler+0xf0>
1005fe70:	6828      	ldr	r0, [r5, #0]
1005fe72:	f7f3 fd1b 	bl	100538ac <BLEPLAT_CNTR_IntGetIntStatusBitTimerOverrun>
1005fe76:	2800      	cmp	r0, #0
1005fe78:	d001      	beq.n	1005fe7e <BLE_STACK_RadioHandler+0xca>
1005fe7a:	2502      	movs	r5, #2
1005fe7c:	e012      	b.n	1005fea4 <BLE_STACK_RadioHandler+0xf0>
1005fe7e:	6828      	ldr	r0, [r5, #0]
1005fe80:	f7f3 fd65 	bl	1005394e <BLEPLAT_CNTR_IntGetIntStatusTxError1>
1005fe84:	4629      	mov	r1, r5
1005fe86:	2505      	movs	r5, #5
1005fe88:	2800      	cmp	r0, #0
1005fe8a:	d10b      	bne.n	1005fea4 <BLE_STACK_RadioHandler+0xf0>
1005fe8c:	6808      	ldr	r0, [r1, #0]
1005fe8e:	f7f3 fd6a 	bl	10053966 <BLEPLAT_CNTR_IntGetIntStatusTxError3>
1005fe92:	2800      	cmp	r0, #0
1005fe94:	d106      	bne.n	1005fea4 <BLE_STACK_RadioHandler+0xf0>
1005fe96:	4815      	ldr	r0, [pc, #84]	@ (1005feec <__arm_cp.1_0>)
1005fe98:	6800      	ldr	r0, [r0, #0]
1005fe9a:	f7f3 fced 	bl	10053878 <BLEPLAT_CNTR_IntGetIntStatusAnyHwError>
1005fe9e:	2800      	cmp	r0, #0
1005fea0:	d020      	beq.n	1005fee4 <BLE_STACK_RadioHandler+0x130>
1005fea2:	2500      	movs	r5, #0
1005fea4:	2001      	movs	r0, #1
1005fea6:	40a8      	lsls	r0, r5
1005fea8:	4917      	ldr	r1, [pc, #92]	@ (1005ff08 <__arm_cp.1_7>)
1005feaa:	6809      	ldr	r1, [r1, #0]
1005feac:	680a      	ldr	r2, [r1, #0]
1005feae:	4302      	orrs	r2, r0
1005feb0:	600a      	str	r2, [r1, #0]
1005feb2:	2000      	movs	r0, #0
1005feb4:	f002 fce8 	bl	10062888 <tsk_notify_idx>
1005feb8:	f7f1 fe69 	bl	10051b8e <BLE_STACK_ProcessRequest>
1005febc:	f7f2 fd5a 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
1005fec0:	4620      	mov	r0, r4
1005fec2:	f000 fb2b 	bl	1006051c <LL_sched_engine>
1005fec6:	6834      	ldr	r4, [r6, #0]
1005fec8:	7d60      	ldrb	r0, [r4, #21]
1005feca:	2801      	cmp	r0, #1
1005fecc:	d108      	bne.n	1005fee0 <BLE_STACK_RadioHandler+0x12c>
1005fece:	7c21      	ldrb	r1, [r4, #16]
1005fed0:	200f      	movs	r0, #15
1005fed2:	4008      	ands	r0, r1
1005fed4:	68e2      	ldr	r2, [r4, #12]
1005fed6:	0909      	lsrs	r1, r1, #4
1005fed8:	f7ff ff6a 	bl	1005fdb0 <BLE_STACK_EndOfRadioActivityCb>
1005fedc:	2000      	movs	r0, #0
1005fede:	7560      	strb	r0, [r4, #21]
1005fee0:	b003      	add	sp, #12
1005fee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1005fee4:	2f00      	cmp	r7, #0
1005fee6:	d1e9      	bne.n	1005febc <BLE_STACK_RadioHandler+0x108>
1005fee8:	e7ed      	b.n	1005fec6 <BLE_STACK_RadioHandler+0x112>
1005feea:	46c0      	nop			@ (mov r8, r8)

1005feec <__arm_cp.1_0>:
1005feec:	20002acc 	.word	0x20002acc

1005fef0 <__arm_cp.1_1>:
1005fef0:	20002ad0 	.word	0x20002ad0

1005fef4 <__arm_cp.1_2>:
1005fef4:	20002ad4 	.word	0x20002ad4

1005fef8 <__arm_cp.1_3>:
1005fef8:	20002ad8 	.word	0x20002ad8

1005fefc <__arm_cp.1_4>:
1005fefc:	1006621d 	.word	0x1006621d

1005ff00 <__arm_cp.1_5>:
1005ff00:	10066219 	.word	0x10066219

1005ff04 <__arm_cp.1_6>:
1005ff04:	10066221 	.word	0x10066221

1005ff08 <__arm_cp.1_7>:
1005ff08:	20002a80 	.word	0x20002a80

1005ff0c <LL_link_calculate_window_widening_from_ppm>:
1005ff0c:	22ff      	movs	r2, #255	@ 0xff
1005ff0e:	320e      	adds	r2, #14
1005ff10:	4342      	muls	r2, r0
1005ff12:	0a10      	lsrs	r0, r2, #8
1005ff14:	0889      	lsrs	r1, r1, #2
1005ff16:	4341      	muls	r1, r0
1005ff18:	0c88      	lsrs	r0, r1, #18
1005ff1a:	1c40      	adds	r0, r0, #1
1005ff1c:	4770      	bx	lr
	...

1005ff20 <LL_link_calc_packetlength>:
1005ff20:	2804      	cmp	r0, #4
1005ff22:	d005      	beq.n	1005ff30 <LL_link_calc_packetlength+0x10>
1005ff24:	2801      	cmp	r0, #1
1005ff26:	d106      	bne.n	1005ff36 <LL_link_calc_packetlength+0x16>
1005ff28:	20ff      	movs	r0, #255	@ 0xff
1005ff2a:	30a4      	adds	r0, #164	@ 0xa4
1005ff2c:	4a07      	ldr	r2, [pc, #28]	@ (1005ff4c <__arm_cp.7_2>)
1005ff2e:	e004      	b.n	1005ff3a <LL_link_calc_packetlength+0x1a>
1005ff30:	4a04      	ldr	r2, [pc, #16]	@ (1005ff44 <__arm_cp.7_0>)
1005ff32:	4805      	ldr	r0, [pc, #20]	@ (1005ff48 <__arm_cp.7_1>)
1005ff34:	e001      	b.n	1005ff3a <LL_link_calc_packetlength+0x1a>
1005ff36:	4a06      	ldr	r2, [pc, #24]	@ (1005ff50 <__arm_cp.7_3>)
1005ff38:	4806      	ldr	r0, [pc, #24]	@ (1005ff54 <__arm_cp.7_4>)
1005ff3a:	4341      	muls	r1, r0
1005ff3c:	1888      	adds	r0, r1, r2
1005ff3e:	0a00      	lsrs	r0, r0, #8
1005ff40:	4770      	bx	lr
1005ff42:	46c0      	nop			@ (mov r8, r8)

1005ff44 <__arm_cp.7_0>:
1005ff44:	000126e9 	.word	0x000126e9

1005ff48 <__arm_cp.7_1>:
1005ff48:	00001a38 	.word	0x00001a38

1005ff4c <__arm_cp.7_2>:
1005ff4c:	00001206 	.word	0x00001206

1005ff50 <__arm_cp.7_3>:
1005ff50:	000020c6 	.word	0x000020c6

1005ff54 <__arm_cp.7_4>:
1005ff54:	00000347 	.word	0x00000347

1005ff58 <LL_link_get_own_sca_ppm>:
1005ff58:	4801      	ldr	r0, [pc, #4]	@ (1005ff60 <__arm_cp.8_0>)
1005ff5a:	6800      	ldr	r0, [r0, #0]
1005ff5c:	8b00      	ldrh	r0, [r0, #24]
1005ff5e:	4770      	bx	lr

1005ff60 <__arm_cp.8_0>:
1005ff60:	20002ad0 	.word	0x20002ad0

1005ff64 <LL_link_is_arg_in_range>:
1005ff64:	4290      	cmp	r0, r2
1005ff66:	d801      	bhi.n	1005ff6c <LL_link_is_arg_in_range+0x8>
1005ff68:	4288      	cmp	r0, r1
1005ff6a:	d201      	bcs.n	1005ff70 <LL_link_is_arg_in_range+0xc>
1005ff6c:	2012      	movs	r0, #18
1005ff6e:	4770      	bx	lr
1005ff70:	2000      	movs	r0, #0
1005ff72:	4770      	bx	lr

1005ff74 <Data_Len_Update_Offline_Processing_ucfg_weak>:
1005ff74:	2000      	movs	r0, #0
1005ff76:	4770      	bx	lr

1005ff78 <ll_write_supported_data_ucfg_weak>:
1005ff78:	2012      	movs	r0, #18
1005ff7a:	4770      	bx	lr

1005ff7c <llc_timers_callback_wrapper>:
1005ff7c:	b580      	push	{r7, lr}
1005ff7e:	6940      	ldr	r0, [r0, #20]
1005ff80:	4901      	ldr	r1, [pc, #4]	@ (1005ff88 <__arm_cp.4_0>)
1005ff82:	f002 fdb8 	bl	10062af6 <cst_sharedCallback>
1005ff86:	bd80      	pop	{r7, pc}

1005ff88 <__arm_cp.4_0>:
1005ff88:	1005ff8d 	.word	0x1005ff8d

1005ff8c <llc_timers_callback>:
1005ff8c:	b580      	push	{r7, lr}
1005ff8e:	4903      	ldr	r1, [pc, #12]	@ (1005ff9c <__arm_cp.5_0>)
1005ff90:	7ac9      	ldrb	r1, [r1, #11]
1005ff92:	4281      	cmp	r1, r0
1005ff94:	d901      	bls.n	1005ff9a <llc_timers_callback+0xe>
1005ff96:	f7fd ff99 	bl	1005decc <LLC_authenticated_payload_timeout_cb>
1005ff9a:	bd80      	pop	{r7, pc}

1005ff9c <__arm_cp.5_0>:
1005ff9c:	20002ae4 	.word	0x20002ae4

1005ffa0 <LL_init_ucfg_weak>:
1005ffa0:	b5f0      	push	{r4, r5, r6, r7, lr}
1005ffa2:	b091      	sub	sp, #68	@ 0x44
1005ffa4:	9306      	str	r3, [sp, #24]
1005ffa6:	4614      	mov	r4, r2
1005ffa8:	910d      	str	r1, [sp, #52]	@ 0x34
1005ffaa:	900b      	str	r0, [sp, #44]	@ 0x2c
1005ffac:	48b8      	ldr	r0, [pc, #736]	@ (10060290 <__arm_cp.6_0>)
1005ffae:	7ac1      	ldrb	r1, [r0, #11]
1005ffb0:	910c      	str	r1, [sp, #48]	@ 0x30
1005ffb2:	7f01      	ldrb	r1, [r0, #28]
1005ffb4:	9109      	str	r1, [sp, #36]	@ 0x24
1005ffb6:	7ec1      	ldrb	r1, [r0, #27]
1005ffb8:	910a      	str	r1, [sp, #40]	@ 0x28
1005ffba:	7e81      	ldrb	r1, [r0, #26]
1005ffbc:	9108      	str	r1, [sp, #32]
1005ffbe:	7fc7      	ldrb	r7, [r0, #31]
1005ffc0:	2501      	movs	r5, #1
1005ffc2:	21e8      	movs	r1, #232	@ 0xe8
1005ffc4:	4628      	mov	r0, r5
1005ffc6:	f000 fe89 	bl	10060cdc <csmem_mem_0_assign>
1005ffca:	4eb2      	ldr	r6, [pc, #712]	@ (10060294 <__arm_cp.6_1>)
1005ffcc:	6030      	str	r0, [r6, #0]
1005ffce:	2158      	movs	r1, #88	@ 0x58
1005ffd0:	4628      	mov	r0, r5
1005ffd2:	f000 fe83 	bl	10060cdc <csmem_mem_0_assign>
1005ffd6:	6831      	ldr	r1, [r6, #0]
1005ffd8:	229c      	movs	r2, #156	@ 0x9c
1005ffda:	9207      	str	r2, [sp, #28]
1005ffdc:	5088      	str	r0, [r1, r2]
1005ffde:	4638      	mov	r0, r7
1005ffe0:	f006 f8b6 	bl	10066150 <llc_wl_mem_allocate>
1005ffe4:	2107      	movs	r1, #7
1005ffe6:	4039      	ands	r1, r7
1005ffe8:	9806      	ldr	r0, [sp, #24]
1005ffea:	f006 f8c5 	bl	10066178 <llc_priv_mem_allocate>
1005ffee:	981c      	ldr	r0, [sp, #112]	@ 0x70
1005fff0:	9000      	str	r0, [sp, #0]
1005fff2:	ab19      	add	r3, sp, #100	@ 0x64
1005fff4:	cb0e      	ldmia	r3, {r1, r2, r3}
1005fff6:	980d      	ldr	r0, [sp, #52]	@ 0x34
1005fff8:	9106      	str	r1, [sp, #24]
1005fffa:	930d      	str	r3, [sp, #52]	@ 0x34
1005fffc:	f7fa f958 	bl	1005a2b0 <llc_conn_mem_allocate>
10060000:	2c01      	cmp	r4, #1
10060002:	d000      	beq.n	10060006 <LL_init_ucfg_weak+0x66>
10060004:	9508      	str	r5, [sp, #32]
10060006:	2000      	movs	r0, #0
10060008:	2c01      	cmp	r4, #1
1006000a:	d000      	beq.n	1006000e <LL_init_ucfg_weak+0x6e>
1006000c:	900a      	str	r0, [sp, #40]	@ 0x28
1006000e:	2c01      	cmp	r4, #1
10060010:	4fa0      	ldr	r7, [pc, #640]	@ (10060294 <__arm_cp.6_1>)
10060012:	d000      	beq.n	10060016 <LL_init_ucfg_weak+0x76>
10060014:	9009      	str	r0, [sp, #36]	@ 0x24
10060016:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
10060018:	980d      	ldr	r0, [sp, #52]	@ 0x34
1006001a:	2801      	cmp	r0, #1
1006001c:	9205      	str	r2, [sp, #20]
1006001e:	d118      	bne.n	10060052 <LL_init_ucfg_weak+0xb2>
10060020:	2029      	movs	r0, #41	@ 0x29
10060022:	499b      	ldr	r1, [pc, #620]	@ (10060290 <__arm_cp.6_0>)
10060024:	5c08      	ldrb	r0, [r1, r0]
10060026:	1e41      	subs	r1, r0, #1
10060028:	4188      	sbcs	r0, r1
1006002a:	4310      	orrs	r0, r2
1006002c:	d001      	beq.n	10060032 <LL_init_ucfg_weak+0x92>
1006002e:	2530      	movs	r5, #48	@ 0x30
10060030:	e000      	b.n	10060034 <LL_init_ucfg_weak+0x94>
10060032:	2520      	movs	r5, #32
10060034:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
10060036:	4630      	mov	r0, r6
10060038:	4629      	mov	r1, r5
1006003a:	f000 fe4f 	bl	10060cdc <csmem_mem_0_assign>
1006003e:	6839      	ldr	r1, [r7, #0]
10060040:	2294      	movs	r2, #148	@ 0x94
10060042:	5088      	str	r0, [r1, r2]
10060044:	4630      	mov	r0, r6
10060046:	4629      	mov	r1, r5
10060048:	f000 fe48 	bl	10060cdc <csmem_mem_0_assign>
1006004c:	6839      	ldr	r1, [r7, #0]
1006004e:	2298      	movs	r2, #152	@ 0x98
10060050:	5088      	str	r0, [r1, r2]
10060052:	262c      	movs	r6, #44	@ 0x2c
10060054:	980c      	ldr	r0, [sp, #48]	@ 0x30
10060056:	4631      	mov	r1, r6
10060058:	f000 fe40 	bl	10060cdc <csmem_mem_0_assign>
1006005c:	6839      	ldr	r1, [r7, #0]
1006005e:	22a4      	movs	r2, #164	@ 0xa4
10060060:	5088      	str	r0, [r1, r2]
10060062:	2041      	movs	r0, #65	@ 0x41
10060064:	0082      	lsls	r2, r0, #2
10060066:	2c01      	cmp	r4, #1
10060068:	9402      	str	r4, [sp, #8]
1006006a:	d10a      	bne.n	10060082 <LL_init_ucfg_weak+0xe2>
1006006c:	4611      	mov	r1, r2
1006006e:	3120      	adds	r1, #32
10060070:	2001      	movs	r0, #1
10060072:	4614      	mov	r4, r2
10060074:	f000 fe32 	bl	10060cdc <csmem_mem_0_assign>
10060078:	6839      	ldr	r1, [r7, #0]
1006007a:	228c      	movs	r2, #140	@ 0x8c
1006007c:	5088      	str	r0, [r1, r2]
1006007e:	4621      	mov	r1, r4
10060080:	e038      	b.n	100600f4 <LL_init_ucfg_weak+0x154>
10060082:	2125      	movs	r1, #37	@ 0x25
10060084:	4882      	ldr	r0, [pc, #520]	@ (10060290 <__arm_cp.6_0>)
10060086:	910c      	str	r1, [sp, #48]	@ 0x30
10060088:	5c41      	ldrb	r1, [r0, r1]
1006008a:	4610      	mov	r0, r2
1006008c:	3020      	adds	r0, #32
1006008e:	2900      	cmp	r1, #0
10060090:	9201      	str	r2, [sp, #4]
10060092:	d001      	beq.n	10060098 <LL_init_ucfg_weak+0xf8>
10060094:	4601      	mov	r1, r0
10060096:	e000      	b.n	1006009a <LL_init_ucfg_weak+0xfa>
10060098:	2144      	movs	r1, #68	@ 0x44
1006009a:	2726      	movs	r7, #38	@ 0x26
1006009c:	4a7c      	ldr	r2, [pc, #496]	@ (10060290 <__arm_cp.6_0>)
1006009e:	5dd2      	ldrb	r2, [r2, r7]
100600a0:	2a00      	cmp	r2, #0
100600a2:	d000      	beq.n	100600a6 <LL_init_ucfg_weak+0x106>
100600a4:	4601      	mov	r1, r0
100600a6:	2529      	movs	r5, #41	@ 0x29
100600a8:	4a79      	ldr	r2, [pc, #484]	@ (10060290 <__arm_cp.6_0>)
100600aa:	5d52      	ldrb	r2, [r2, r5]
100600ac:	2a00      	cmp	r2, #0
100600ae:	d000      	beq.n	100600b2 <LL_init_ucfg_weak+0x112>
100600b0:	4601      	mov	r1, r0
100600b2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
100600b4:	2a01      	cmp	r2, #1
100600b6:	d100      	bne.n	100600ba <LL_init_ucfg_weak+0x11a>
100600b8:	4601      	mov	r1, r0
100600ba:	2001      	movs	r0, #1
100600bc:	f000 fe0e 	bl	10060cdc <csmem_mem_0_assign>
100600c0:	4974      	ldr	r1, [pc, #464]	@ (10060294 <__arm_cp.6_1>)
100600c2:	6809      	ldr	r1, [r1, #0]
100600c4:	228c      	movs	r2, #140	@ 0x8c
100600c6:	5088      	str	r0, [r1, r2]
100600c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100600ca:	2801      	cmp	r0, #1
100600cc:	9c01      	ldr	r4, [sp, #4]
100600ce:	4621      	mov	r1, r4
100600d0:	d010      	beq.n	100600f4 <LL_init_ucfg_weak+0x154>
100600d2:	486f      	ldr	r0, [pc, #444]	@ (10060290 <__arm_cp.6_0>)
100600d4:	5d40      	ldrb	r0, [r0, r5]
100600d6:	2800      	cmp	r0, #0
100600d8:	4621      	mov	r1, r4
100600da:	d10b      	bne.n	100600f4 <LL_init_ucfg_weak+0x154>
100600dc:	486c      	ldr	r0, [pc, #432]	@ (10060290 <__arm_cp.6_0>)
100600de:	5dc0      	ldrb	r0, [r0, r7]
100600e0:	2800      	cmp	r0, #0
100600e2:	4621      	mov	r1, r4
100600e4:	d106      	bne.n	100600f4 <LL_init_ucfg_weak+0x154>
100600e6:	486a      	ldr	r0, [pc, #424]	@ (10060290 <__arm_cp.6_0>)
100600e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
100600ea:	5c40      	ldrb	r0, [r0, r1]
100600ec:	2800      	cmp	r0, #0
100600ee:	d000      	beq.n	100600f2 <LL_init_ucfg_weak+0x152>
100600f0:	4626      	mov	r6, r4
100600f2:	4631      	mov	r1, r6
100600f4:	9818      	ldr	r0, [sp, #96]	@ 0x60
100600f6:	900b      	str	r0, [sp, #44]	@ 0x2c
100600f8:	9816      	ldr	r0, [sp, #88]	@ 0x58
100600fa:	9003      	str	r0, [sp, #12]
100600fc:	2601      	movs	r6, #1
100600fe:	4d66      	ldr	r5, [pc, #408]	@ (10060298 <__arm_cp.6_2>)
10060100:	4630      	mov	r0, r6
10060102:	47a8      	blx	r5
10060104:	4f63      	ldr	r7, [pc, #396]	@ (10060294 <__arm_cp.6_1>)
10060106:	6839      	ldr	r1, [r7, #0]
10060108:	2290      	movs	r2, #144	@ 0x90
1006010a:	5088      	str	r0, [r1, r2]
1006010c:	2110      	movs	r1, #16
1006010e:	4630      	mov	r0, r6
10060110:	47a8      	blx	r5
10060112:	6839      	ldr	r1, [r7, #0]
10060114:	22a0      	movs	r2, #160	@ 0xa0
10060116:	9204      	str	r2, [sp, #16]
10060118:	5088      	str	r0, [r1, r2]
1006011a:	2104      	movs	r1, #4
1006011c:	4630      	mov	r0, r6
1006011e:	47a8      	blx	r5
10060120:	6839      	ldr	r1, [r7, #0]
10060122:	22a8      	movs	r2, #168	@ 0xa8
10060124:	5088      	str	r0, [r1, r2]
10060126:	2134      	movs	r1, #52	@ 0x34
10060128:	960c      	str	r6, [sp, #48]	@ 0x30
1006012a:	4630      	mov	r0, r6
1006012c:	47a8      	blx	r5
1006012e:	6839      	ldr	r1, [r7, #0]
10060130:	22ac      	movs	r2, #172	@ 0xac
10060132:	5088      	str	r0, [r1, r2]
10060134:	9808      	ldr	r0, [sp, #32]
10060136:	b2c7      	uxtb	r7, r0
10060138:	1f21      	subs	r1, r4, #4
1006013a:	4638      	mov	r0, r7
1006013c:	47a8      	blx	r5
1006013e:	4605      	mov	r5, r0
10060140:	9c02      	ldr	r4, [sp, #8]
10060142:	2c01      	cmp	r4, #1
10060144:	d105      	bne.n	10060152 <LL_init_ucfg_weak+0x1b2>
10060146:	215c      	movs	r1, #92	@ 0x5c
10060148:	4638      	mov	r0, r7
1006014a:	f000 fdc7 	bl	10060cdc <csmem_mem_0_assign>
1006014e:	4602      	mov	r2, r0
10060150:	e000      	b.n	10060154 <LL_init_ucfg_weak+0x1b4>
10060152:	2200      	movs	r2, #0
10060154:	4638      	mov	r0, r7
10060156:	4629      	mov	r1, r5
10060158:	f7fe fec6 	bl	1005eee8 <EADV_init>
1006015c:	ab10      	add	r3, sp, #64	@ 0x40
1006015e:	9809      	ldr	r0, [sp, #36]	@ 0x24
10060160:	70d8      	strb	r0, [r3, #3]
10060162:	980a      	ldr	r0, [sp, #40]	@ 0x28
10060164:	7098      	strb	r0, [r3, #2]
10060166:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10060168:	705e      	strb	r6, [r3, #1]
1006016a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006016c:	7018      	strb	r0, [r3, #0]
1006016e:	4620      	mov	r0, r4
10060170:	9d05      	ldr	r5, [sp, #20]
10060172:	4629      	mov	r1, r5
10060174:	463a      	mov	r2, r7
10060176:	f005 fffb 	bl	10066170 <llc_padv_mem_allocate_ucfg_weak>
1006017a:	9f03      	ldr	r7, [sp, #12]
1006017c:	4638      	mov	r0, r7
1006017e:	4621      	mov	r1, r4
10060180:	f7fb fd1d 	bl	1005bbbe <llc_scan_mem_allocate_ucfg_weak>
10060184:	4638      	mov	r0, r7
10060186:	4621      	mov	r1, r4
10060188:	462a      	mov	r2, r5
1006018a:	f7fb fcf2 	bl	1005bb72 <llc_pscan_mem_allocate_ucfg_weak>
1006018e:	4638      	mov	r0, r7
10060190:	4621      	mov	r1, r4
10060192:	462a      	mov	r2, r5
10060194:	4633      	mov	r3, r6
10060196:	f005 ffed 	bl	10066174 <llc_past_mem_allocate_ucfg_weak>
1006019a:	9600      	str	r6, [sp, #0]
1006019c:	463e      	mov	r6, r7
1006019e:	4638      	mov	r0, r7
100601a0:	4621      	mov	r1, r4
100601a2:	462a      	mov	r2, r5
100601a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100601a6:	f7fb fce7 	bl	1005bb78 <llc_pscan_wr_mem_allocate_ucfg_weak>
100601aa:	f7fb fcc0 	bl	1005bb2e <llc_iso_cmn_mem_alloc_ucfg_weak>
100601ae:	2c01      	cmp	r4, #1
100601b0:	d107      	bne.n	100601c2 <LL_init_ucfg_weak+0x222>
100601b2:	2d01      	cmp	r5, #1
100601b4:	d105      	bne.n	100601c2 <LL_init_ucfg_weak+0x222>
100601b6:	f005 f92b 	bl	10065410 <llc_big_brc_mem_alloc_ucfg_weak>
100601ba:	2e01      	cmp	r6, #1
100601bc:	d101      	bne.n	100601c2 <LL_init_ucfg_weak+0x222>
100601be:	f005 f928 	bl	10065412 <llc_big_sync_mem_alloc_ucfg_weak>
100601c2:	980d      	ldr	r0, [sp, #52]	@ 0x34
100601c4:	2801      	cmp	r0, #1
100601c6:	4f33      	ldr	r7, [pc, #204]	@ (10060294 <__arm_cp.6_1>)
100601c8:	d101      	bne.n	100601ce <LL_init_ucfg_weak+0x22e>
100601ca:	f005 f923 	bl	10065414 <llc_cig_cmn_mem_alloc_ucfg_weak>
100601ce:	f7fb fca7 	bl	1005bb20 <llc_isoal_mem_alloc_ucfg_weak>
100601d2:	9806      	ldr	r0, [sp, #24]
100601d4:	4631      	mov	r1, r6
100601d6:	4622      	mov	r2, r4
100601d8:	462b      	mov	r3, r5
100601da:	f7fe fd46 	bl	1005ec6a <llc_cte_mem_allocate_ucfg_weak>
100601de:	4e2c      	ldr	r6, [pc, #176]	@ (10060290 <__arm_cp.6_0>)
100601e0:	7af0      	ldrb	r0, [r6, #11]
100601e2:	1c41      	adds	r1, r0, #1
100601e4:	4d2d      	ldr	r5, [pc, #180]	@ (1006029c <__arm_cp.6_3>)
100601e6:	4628      	mov	r0, r5
100601e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100601ea:	f000 fd65 	bl	10060cb8 <csmem_mem_assign>
100601ee:	6839      	ldr	r1, [r7, #0]
100601f0:	22d0      	movs	r2, #208	@ 0xd0
100601f2:	5088      	str	r0, [r1, r2]
100601f4:	7af1      	ldrb	r1, [r6, #11]
100601f6:	2202      	movs	r2, #2
100601f8:	4628      	mov	r0, r5
100601fa:	f000 fd5d 	bl	10060cb8 <csmem_mem_assign>
100601fe:	6839      	ldr	r1, [r7, #0]
10060200:	460a      	mov	r2, r1
10060202:	32a0      	adds	r2, #160	@ 0xa0
10060204:	6350      	str	r0, [r2, #52]	@ 0x34
10060206:	9804      	ldr	r0, [sp, #16]
10060208:	5808      	ldr	r0, [r1, r0]
1006020a:	6078      	str	r0, [r7, #4]
1006020c:	6850      	ldr	r0, [r2, #4]
1006020e:	60b8      	str	r0, [r7, #8]
10060210:	4620      	mov	r0, r4
10060212:	f7fb fcd3 	bl	1005bbbc <llc_scan_init_ucfg_weak>
10060216:	f7fb fcab 	bl	1005bb70 <llc_pscan_init_ucfg_weak>
1006021a:	f000 f8e3 	bl	100603e4 <LL_sched_init>
1006021e:	f7fe fd29 	bl	1005ec74 <LL_dtm_init>
10060222:	f005 ffa6 	bl	10066172 <llc_padv_init_ucfg_weak>
10060226:	f7fe fd1f 	bl	1005ec68 <llc_cte_init_ucfg_weak>
1006022a:	f7f9 f8e5 	bl	100593f8 <HCI_Init>
1006022e:	f7f2 fb41 	bl	100528b4 <BLEPLAT_GetDefaultPALevel>
10060232:	6839      	ldr	r1, [r7, #0]
10060234:	2400      	movs	r4, #0
10060236:	728c      	strb	r4, [r1, #10]
10060238:	7248      	strb	r0, [r1, #9]
1006023a:	4620      	mov	r0, r4
1006023c:	f7f2 fb42 	bl	100528c4 <BLEPLAT_SetHighPower>
10060240:	f7f4 fcbe 	bl	10054bc0 <ble_HAL_Init>
10060244:	6838      	ldr	r0, [r7, #0]
10060246:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10060248:	f7fd ff03 	bl	1005e052 <LLC_pcl_hal_cntxt_init_ucfg_weak>
1006024c:	6838      	ldr	r0, [r7, #0]
1006024e:	9d07      	ldr	r5, [sp, #28]
10060250:	5940      	ldr	r0, [r0, r5]
10060252:	300c      	adds	r0, #12
10060254:	f002 fe2b 	bl	10062eae <addr8_list_clear>
10060258:	463e      	mov	r6, r7
1006025a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
1006025c:	4638      	mov	r0, r7
1006025e:	f7fb fc6d 	bl	1005bb3c <llc_priv_init_ucfg_weak>
10060262:	6830      	ldr	r0, [r6, #0]
10060264:	5941      	ldr	r1, [r0, r5]
10060266:	2240      	movs	r2, #64	@ 0x40
10060268:	548c      	strb	r4, [r1, r2]
1006026a:	4a09      	ldr	r2, [pc, #36]	@ (10060290 <__arm_cp.6_0>)
1006026c:	8b12      	ldrh	r2, [r2, #24]
1006026e:	8302      	strh	r2, [r0, #24]
10060270:	201f      	movs	r0, #31
10060272:	900f      	str	r0, [sp, #60]	@ 0x3c
10060274:	43e0      	mvns	r0, r4
10060276:	900e      	str	r0, [sp, #56]	@ 0x38
10060278:	3148      	adds	r1, #72	@ 0x48
1006027a:	a80e      	add	r0, sp, #56	@ 0x38
1006027c:	2205      	movs	r2, #5
1006027e:	f002 fc8b 	bl	10062b98 <char_copy>
10060282:	6830      	ldr	r0, [r6, #0]
10060284:	5940      	ldr	r0, [r0, r5]
10060286:	02f9      	lsls	r1, r7, #11
10060288:	2254      	movs	r2, #84	@ 0x54
1006028a:	5281      	strh	r1, [r0, r2]
1006028c:	b011      	add	sp, #68	@ 0x44
1006028e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060290 <__arm_cp.6_0>:
10060290:	20002ae4 	.word	0x20002ae4

10060294 <__arm_cp.6_1>:
10060294:	20002ad0 	.word	0x20002ad0

10060298 <__arm_cp.6_2>:
10060298:	10060cdd 	.word	0x10060cdd

1006029c <__arm_cp.6_3>:
1006029c:	20002ae0 	.word	0x20002ae0

100602a0 <LL_init>:
100602a0:	b5b0      	push	{r4, r5, r7, lr}
100602a2:	b088      	sub	sp, #32
100602a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
100602a6:	9406      	str	r4, [sp, #24]
100602a8:	9c11      	ldr	r4, [sp, #68]	@ 0x44
100602aa:	9405      	str	r4, [sp, #20]
100602ac:	9d10      	ldr	r5, [sp, #64]	@ 0x40
100602ae:	9504      	str	r5, [sp, #16]
100602b0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
100602b2:	9503      	str	r5, [sp, #12]
100602b4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
100602b6:	9502      	str	r5, [sp, #8]
100602b8:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100602ba:	9501      	str	r5, [sp, #4]
100602bc:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100602be:	9500      	str	r5, [sp, #0]
100602c0:	f7ff fe6e 	bl	1005ffa0 <LL_init_ucfg_weak>
100602c4:	2c01      	cmp	r4, #1
100602c6:	d112      	bne.n	100602ee <LL_init+0x4e>
100602c8:	f7fb fc54 	bl	1005bb74 <llc_pscan_wr_init_ucfg_weak>
100602cc:	f7f9 ff00 	bl	1005a0d0 <llc_conn_init>
100602d0:	f7ee fddb 	bl	1004ee8a <LL_cpe_init_ucfg>
100602d4:	4807      	ldr	r0, [pc, #28]	@ (100602f4 <__arm_cp.7_0>)
100602d6:	7ac1      	ldrb	r1, [r0, #11]
100602d8:	4807      	ldr	r0, [pc, #28]	@ (100602f8 <__arm_cp.7_1>)
100602da:	6800      	ldr	r0, [r0, #0]
100602dc:	30b0      	adds	r0, #176	@ 0xb0
100602de:	4a07      	ldr	r2, [pc, #28]	@ (100602fc <__arm_cp.7_2>)
100602e0:	2305      	movs	r3, #5
100602e2:	f002 fb2f 	bl	10062944 <CST_init>
100602e6:	f7f4 fcd9 	bl	10054c9c <Acl_Init>
100602ea:	f7fc fd58 	bl	1005cd9e <LLC_chc_ll_cntxt_init_ucfg_weak>
100602ee:	b008      	add	sp, #32
100602f0:	bdb0      	pop	{r4, r5, r7, pc}
100602f2:	46c0      	nop			@ (mov r8, r8)

100602f4 <__arm_cp.7_0>:
100602f4:	20002ae4 	.word	0x20002ae4

100602f8 <__arm_cp.7_1>:
100602f8:	20002ad0 	.word	0x20002ad0

100602fc <__arm_cp.7_2>:
100602fc:	1005ff7d 	.word	0x1005ff7d

10060300 <Is_Address_Initialized>:
10060300:	2100      	movs	r1, #0
10060302:	460a      	mov	r2, r1
10060304:	2906      	cmp	r1, #6
10060306:	d005      	beq.n	10060314 <Is_Address_Initialized+0x14>
10060308:	5c43      	ldrb	r3, [r0, r1]
1006030a:	2b00      	cmp	r3, #0
1006030c:	d000      	beq.n	10060310 <Is_Address_Initialized+0x10>
1006030e:	2201      	movs	r2, #1
10060310:	1c49      	adds	r1, r1, #1
10060312:	e7f7      	b.n	10060304 <Is_Address_Initialized+0x4>
10060314:	b2d0      	uxtb	r0, r2
10060316:	4770      	bx	lr

10060318 <get_rf_rx_path_compensation_db>:
10060318:	4804      	ldr	r0, [pc, #16]	@ (1006032c <__arm_cp.10_0>)
1006031a:	6800      	ldr	r0, [r0, #0]
1006031c:	215e      	movs	r1, #94	@ 0x5e
1006031e:	5e40      	ldrsh	r0, [r0, r1]
10060320:	210d      	movs	r1, #13
10060322:	4341      	muls	r1, r0
10060324:	3140      	adds	r1, #64	@ 0x40
10060326:	11c8      	asrs	r0, r1, #7
10060328:	4770      	bx	lr
1006032a:	46c0      	nop			@ (mov r8, r8)

1006032c <__arm_cp.10_0>:
1006032c:	20002ad0 	.word	0x20002ad0

10060330 <LL_get_tx_common_buffer_p>:
10060330:	4802      	ldr	r0, [pc, #8]	@ (1006033c <__arm_cp.11_0>)
10060332:	6800      	ldr	r0, [r0, #0]
10060334:	218c      	movs	r1, #140	@ 0x8c
10060336:	5840      	ldr	r0, [r0, r1]
10060338:	4770      	bx	lr
1006033a:	46c0      	nop			@ (mov r8, r8)

1006033c <__arm_cp.11_0>:
1006033c:	20002ad0 	.word	0x20002ad0

10060340 <LL_get_rx_common_buffer_p>:
10060340:	4802      	ldr	r0, [pc, #8]	@ (1006034c <__arm_cp.12_0>)
10060342:	6800      	ldr	r0, [r0, #0]
10060344:	2190      	movs	r1, #144	@ 0x90
10060346:	5840      	ldr	r0, [r0, r1]
10060348:	4770      	bx	lr
1006034a:	46c0      	nop			@ (mov r8, r8)

1006034c <__arm_cp.12_0>:
1006034c:	20002ad0 	.word	0x20002ad0

10060350 <LL_get_control_pdu_size>:
10060350:	2800      	cmp	r0, #0
10060352:	d001      	beq.n	10060358 <LL_get_control_pdu_size+0x8>
10060354:	2030      	movs	r0, #48	@ 0x30
10060356:	4770      	bx	lr
10060358:	2020      	movs	r0, #32
1006035a:	4770      	bx	lr

1006035c <llc_get_linkms_cntxt_p>:
1006035c:	4802      	ldr	r0, [pc, #8]	@ (10060368 <__arm_cp.15_0>)
1006035e:	6800      	ldr	r0, [r0, #0]
10060360:	219c      	movs	r1, #156	@ 0x9c
10060362:	5840      	ldr	r0, [r0, r1]
10060364:	4770      	bx	lr
10060366:	46c0      	nop			@ (mov r8, r8)

10060368 <__arm_cp.15_0>:
10060368:	20002ad0 	.word	0x20002ad0

1006036c <llc_get_next_free_conn_handle>:
1006036c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006036e:	4815      	ldr	r0, [pc, #84]	@ (100603c4 <__arm_cp.16_0>)
10060370:	6800      	ldr	r0, [r0, #0]
10060372:	219c      	movs	r1, #156	@ 0x9c
10060374:	9102      	str	r1, [sp, #8]
10060376:	5841      	ldr	r1, [r0, r1]
10060378:	2054      	movs	r0, #84	@ 0x54
1006037a:	9001      	str	r0, [sp, #4]
1006037c:	5a08      	ldrh	r0, [r1, r0]
1006037e:	6bcf      	ldr	r7, [r1, #60]	@ 0x3c
10060380:	4c12      	ldr	r4, [pc, #72]	@ (100603cc <__arm_cp.16_2>)
10060382:	1c45      	adds	r5, r0, #1
10060384:	b2a9      	uxth	r1, r5
10060386:	0a09      	lsrs	r1, r1, #8
10060388:	290e      	cmp	r1, #14
1006038a:	d901      	bls.n	10060390 <llc_get_next_free_conn_handle+0x24>
1006038c:	490e      	ldr	r1, [pc, #56]	@ (100603c8 <__arm_cp.16_1>)
1006038e:	1845      	adds	r5, r0, r1
10060390:	2f00      	cmp	r7, #0
10060392:	d00f      	beq.n	100603b4 <llc_get_next_free_conn_handle+0x48>
10060394:	2600      	movs	r6, #0
10060396:	6820      	ldr	r0, [r4, #0]
10060398:	2134      	movs	r1, #52	@ 0x34
1006039a:	5c41      	ldrb	r1, [r0, r1]
1006039c:	b2f0      	uxtb	r0, r6
1006039e:	4288      	cmp	r0, r1
100603a0:	d208      	bcs.n	100603b4 <llc_get_next_free_conn_handle+0x48>
100603a2:	f7f9 fe4d 	bl	1005a040 <llc_conn_get_cntxt_per_p>
100603a6:	1c76      	adds	r6, r6, #1
100603a8:	b2a9      	uxth	r1, r5
100603aa:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
100603ac:	4281      	cmp	r1, r0
100603ae:	d1f2      	bne.n	10060396 <llc_get_next_free_conn_handle+0x2a>
100603b0:	4628      	mov	r0, r5
100603b2:	e7e6      	b.n	10060382 <llc_get_next_free_conn_handle+0x16>
100603b4:	4803      	ldr	r0, [pc, #12]	@ (100603c4 <__arm_cp.16_0>)
100603b6:	6800      	ldr	r0, [r0, #0]
100603b8:	9902      	ldr	r1, [sp, #8]
100603ba:	5840      	ldr	r0, [r0, r1]
100603bc:	9901      	ldr	r1, [sp, #4]
100603be:	5245      	strh	r5, [r0, r1]
100603c0:	b2a8      	uxth	r0, r5
100603c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100603c4 <__arm_cp.16_0>:
100603c4:	20002ad0 	.word	0x20002ad0

100603c8 <__arm_cp.16_1>:
100603c8:	fffff102 	.word	0xfffff102

100603cc <__arm_cp.16_2>:
100603cc:	20002a7c 	.word	0x20002a7c

100603d0 <LL_sched_time_t1_ge_t2>:
100603d0:	43c0      	mvns	r0, r0
100603d2:	1840      	adds	r0, r0, r1
100603d4:	0fc0      	lsrs	r0, r0, #31
100603d6:	4770      	bx	lr

100603d8 <LL_sched_engine_return_actual_scheduler_margin>:
100603d8:	4801      	ldr	r0, [pc, #4]	@ (100603e0 <__arm_cp.2_0>)
100603da:	6800      	ldr	r0, [r0, #0]
100603dc:	6880      	ldr	r0, [r0, #8]
100603de:	4770      	bx	lr

100603e0 <__arm_cp.2_0>:
100603e0:	20002ad4 	.word	0x20002ad4

100603e4 <LL_sched_init>:
100603e4:	4809      	ldr	r0, [pc, #36]	@ (1006040c <__arm_cp.4_0>)
100603e6:	7ac0      	ldrb	r0, [r0, #11]
100603e8:	4909      	ldr	r1, [pc, #36]	@ (10060410 <__arm_cp.4_1>)
100603ea:	6809      	ldr	r1, [r1, #0]
100603ec:	3112      	adds	r1, #18
100603ee:	2800      	cmp	r0, #0
100603f0:	d004      	beq.n	100603fc <LL_sched_init+0x18>
100603f2:	2200      	movs	r2, #0
100603f4:	800a      	strh	r2, [r1, #0]
100603f6:	312c      	adds	r1, #44	@ 0x2c
100603f8:	1e40      	subs	r0, r0, #1
100603fa:	e7f8      	b.n	100603ee <LL_sched_init+0xa>
100603fc:	4805      	ldr	r0, [pc, #20]	@ (10060414 <__arm_cp.4_2>)
100603fe:	6800      	ldr	r0, [r0, #0]
10060400:	2100      	movs	r1, #0
10060402:	73c1      	strb	r1, [r0, #15]
10060404:	21ff      	movs	r1, #255	@ 0xff
10060406:	0209      	lsls	r1, r1, #8
10060408:	8181      	strh	r1, [r0, #12]
1006040a:	4770      	bx	lr

1006040c <__arm_cp.4_0>:
1006040c:	20002ae4 	.word	0x20002ae4

10060410 <__arm_cp.4_1>:
10060410:	20002ad8 	.word	0x20002ad8

10060414 <__arm_cp.4_2>:
10060414:	20002ad4 	.word	0x20002ad4

10060418 <LL_sched_set_anchor>:
10060418:	222c      	movs	r2, #44	@ 0x2c
1006041a:	4342      	muls	r2, r0
1006041c:	4801      	ldr	r0, [pc, #4]	@ (10060424 <__arm_cp.5_0>)
1006041e:	6800      	ldr	r0, [r0, #0]
10060420:	5081      	str	r1, [r0, r2]
10060422:	4770      	bx	lr

10060424 <__arm_cp.5_0>:
10060424:	20002ad8 	.word	0x20002ad8

10060428 <LL_sched_set_taskslot_length_anchor>:
10060428:	232c      	movs	r3, #44	@ 0x2c
1006042a:	4343      	muls	r3, r0
1006042c:	4802      	ldr	r0, [pc, #8]	@ (10060438 <__arm_cp.6_0>)
1006042e:	6800      	ldr	r0, [r0, #0]
10060430:	50c2      	str	r2, [r0, r3]
10060432:	18c0      	adds	r0, r0, r3
10060434:	6041      	str	r1, [r0, #4]
10060436:	4770      	bx	lr

10060438 <__arm_cp.6_0>:
10060438:	20002ad8 	.word	0x20002ad8

1006043c <LL_sched_set_cancel_request>:
1006043c:	28ff      	cmp	r0, #255	@ 0xff
1006043e:	d00b      	beq.n	10060458 <LL_sched_set_cancel_request+0x1c>
10060440:	212c      	movs	r1, #44	@ 0x2c
10060442:	4341      	muls	r1, r0
10060444:	4805      	ldr	r0, [pc, #20]	@ (1006045c <__arm_cp.9_0>)
10060446:	6800      	ldr	r0, [r0, #0]
10060448:	1840      	adds	r0, r0, r1
1006044a:	7c81      	ldrb	r1, [r0, #18]
1006044c:	2908      	cmp	r1, #8
1006044e:	d001      	beq.n	10060454 <LL_sched_set_cancel_request+0x18>
10060450:	2110      	movs	r1, #16
10060452:	e000      	b.n	10060456 <LL_sched_set_cancel_request+0x1a>
10060454:	2120      	movs	r1, #32
10060456:	7481      	strb	r1, [r0, #18]
10060458:	4770      	bx	lr
1006045a:	46c0      	nop			@ (mov r8, r8)

1006045c <__arm_cp.9_0>:
1006045c:	20002ad8 	.word	0x20002ad8

10060460 <LL_sched_enable_taskslot>:
10060460:	b5f0      	push	{r4, r5, r6, r7, lr}
10060462:	b088      	sub	sp, #32
10060464:	9307      	str	r3, [sp, #28]
10060466:	272c      	movs	r7, #44	@ 0x2c
10060468:	4347      	muls	r7, r0
1006046a:	481a      	ldr	r0, [pc, #104]	@ (100604d4 <__arm_cp.10_0>)
1006046c:	6806      	ldr	r6, [r0, #0]
1006046e:	19f0      	adds	r0, r6, r7
10060470:	7c84      	ldrb	r4, [r0, #18]
10060472:	2c01      	cmp	r4, #1
10060474:	d12b      	bne.n	100604ce <LL_sched_enable_taskslot+0x6e>
10060476:	4603      	mov	r3, r0
10060478:	3312      	adds	r3, #18
1006047a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
1006047c:	9506      	str	r5, [sp, #24]
1006047e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
10060480:	9505      	str	r5, [sp, #20]
10060482:	9d12      	ldr	r5, [sp, #72]	@ 0x48
10060484:	9503      	str	r5, [sp, #12]
10060486:	9d11      	ldr	r5, [sp, #68]	@ 0x44
10060488:	9502      	str	r5, [sp, #8]
1006048a:	9104      	str	r1, [sp, #16]
1006048c:	9910      	ldr	r1, [sp, #64]	@ 0x40
1006048e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060490:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
10060492:	9400      	str	r4, [sp, #0]
10060494:	9201      	str	r2, [sp, #4]
10060496:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10060498:	9c07      	ldr	r4, [sp, #28]
1006049a:	6044      	str	r4, [r0, #4]
1006049c:	6082      	str	r2, [r0, #8]
1006049e:	9a00      	ldr	r2, [sp, #0]
100604a0:	51f2      	str	r2, [r6, r7]
100604a2:	221f      	movs	r2, #31
100604a4:	4015      	ands	r5, r2
100604a6:	7545      	strb	r5, [r0, #21]
100604a8:	4011      	ands	r1, r2
100604aa:	7581      	strb	r1, [r0, #22]
100604ac:	2101      	movs	r1, #1
100604ae:	7501      	strb	r1, [r0, #20]
100604b0:	9a01      	ldr	r2, [sp, #4]
100604b2:	74c2      	strb	r2, [r0, #19]
100604b4:	8201      	strh	r1, [r0, #16]
100604b6:	9902      	ldr	r1, [sp, #8]
100604b8:	61c1      	str	r1, [r0, #28]
100604ba:	9903      	ldr	r1, [sp, #12]
100604bc:	6201      	str	r1, [r0, #32]
100604be:	9905      	ldr	r1, [sp, #20]
100604c0:	6241      	str	r1, [r0, #36]	@ 0x24
100604c2:	9906      	ldr	r1, [sp, #24]
100604c4:	6281      	str	r1, [r0, #40]	@ 0x28
100604c6:	9904      	ldr	r1, [sp, #16]
100604c8:	60c1      	str	r1, [r0, #12]
100604ca:	2002      	movs	r0, #2
100604cc:	7018      	strb	r0, [r3, #0]
100604ce:	b008      	add	sp, #32
100604d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100604d2:	46c0      	nop			@ (mov r8, r8)

100604d4 <__arm_cp.10_0>:
100604d4:	20002ad8 	.word	0x20002ad8

100604d8 <LL_sched_is_scheduler_call_pending>:
100604d8:	b580      	push	{r7, lr}
100604da:	490a      	ldr	r1, [pc, #40]	@ (10060504 <__arm_cp.11_0>)
100604dc:	6809      	ldr	r1, [r1, #0]
100604de:	7b0a      	ldrb	r2, [r1, #12]
100604e0:	2a01      	cmp	r2, #1
100604e2:	d106      	bne.n	100604f2 <LL_sched_is_scheduler_call_pending+0x1a>
100604e4:	7bca      	ldrb	r2, [r1, #15]
100604e6:	2a03      	cmp	r2, #3
100604e8:	d105      	bne.n	100604f6 <LL_sched_is_scheduler_call_pending+0x1e>
100604ea:	2000      	movs	r0, #0
100604ec:	f7fb fb92 	bl	1005bc14 <llc_scan_stop_ucfg_weak>
100604f0:	bd80      	pop	{r7, pc}
100604f2:	2000      	movs	r0, #0
100604f4:	bd80      	pop	{r7, pc}
100604f6:	6809      	ldr	r1, [r1, #0]
100604f8:	1a08      	subs	r0, r1, r0
100604fa:	4903      	ldr	r1, [pc, #12]	@ (10060508 <__arm_cp.11_1>)
100604fc:	1840      	adds	r0, r0, r1
100604fe:	0fc0      	lsrs	r0, r0, #31
10060500:	bd80      	pop	{r7, pc}
10060502:	46c0      	nop			@ (mov r8, r8)

10060504 <__arm_cp.11_0>:
10060504:	20002ad4 	.word	0x20002ad4

10060508 <__arm_cp.11_1>:
10060508:	fffffe0b 	.word	0xfffffe0b

1006050c <LL_sched_anchorstretch>:
1006050c:	4902      	ldr	r1, [pc, #8]	@ (10060518 <__arm_cp.12_0>)
1006050e:	6809      	ldr	r1, [r1, #0]
10060510:	684a      	ldr	r2, [r1, #4]
10060512:	6002      	str	r2, [r0, #0]
10060514:	7b88      	ldrb	r0, [r1, #14]
10060516:	4770      	bx	lr

10060518 <__arm_cp.12_0>:
10060518:	20002ad4 	.word	0x20002ad4

1006051c <LL_sched_engine>:
1006051c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006051e:	b0b3      	sub	sp, #204	@ 0xcc
10060520:	4607      	mov	r7, r0
10060522:	48dc      	ldr	r0, [pc, #880]	@ (10060894 <__arm_cp.13_0>)
10060524:	6800      	ldr	r0, [r0, #0]
10060526:	900b      	str	r0, [sp, #44]	@ 0x2c
10060528:	2001      	movs	r0, #1
1006052a:	9001      	str	r0, [sp, #4]
1006052c:	9009      	str	r0, [sp, #36]	@ 0x24
1006052e:	2100      	movs	r1, #0
10060530:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10060532:	7381      	strb	r1, [r0, #14]
10060534:	48d8      	ldr	r0, [pc, #864]	@ (10060898 <__arm_cp.13_1>)
10060536:	6803      	ldr	r3, [r0, #0]
10060538:	910a      	str	r1, [sp, #40]	@ 0x28
1006053a:	7219      	strb	r1, [r3, #8]
1006053c:	20ff      	movs	r0, #255	@ 0xff
1006053e:	9008      	str	r0, [sp, #32]
10060540:	3002      	adds	r0, #2
10060542:	8298      	strh	r0, [r3, #20]
10060544:	7c18      	ldrb	r0, [r3, #16]
10060546:	21f0      	movs	r1, #240	@ 0xf0
10060548:	4001      	ands	r1, r0
1006054a:	090a      	lsrs	r2, r1, #4
1006054c:	1888      	adds	r0, r1, r2
1006054e:	7418      	strb	r0, [r3, #16]
10060550:	8a59      	ldrh	r1, [r3, #18]
10060552:	40d1      	lsrs	r1, r2
10060554:	07c9      	lsls	r1, r1, #31
10060556:	49d1      	ldr	r1, [pc, #836]	@ (1006089c <__arm_cp.13_2>)
10060558:	6809      	ldr	r1, [r1, #0]
1006055a:	9107      	str	r1, [sp, #28]
1006055c:	9305      	str	r3, [sp, #20]
1006055e:	d006      	beq.n	1006056e <LL_sched_engine+0x52>
10060560:	2000      	movs	r0, #0
10060562:	f002 f991 	bl	10062888 <tsk_notify_idx>
10060566:	f7f1 fb12 	bl	10051b8e <BLE_STACK_ProcessRequest>
1006056a:	9b05      	ldr	r3, [sp, #20]
1006056c:	7c18      	ldrb	r0, [r3, #16]
1006056e:	210f      	movs	r1, #15
10060570:	9102      	str	r1, [sp, #8]
10060572:	4008      	ands	r0, r1
10060574:	7418      	strb	r0, [r3, #16]
10060576:	2196      	movs	r1, #150	@ 0x96
10060578:	9809      	ldr	r0, [sp, #36]	@ 0x24
1006057a:	4341      	muls	r1, r0
1006057c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006057e:	9112      	str	r1, [sp, #72]	@ 0x48
10060580:	6081      	str	r1, [r0, #8]
10060582:	2001      	movs	r0, #1
10060584:	9004      	str	r0, [sp, #16]
10060586:	43c0      	mvns	r0, r0
10060588:	b279      	sxtb	r1, r7
1006058a:	4281      	cmp	r1, r0
1006058c:	dc10      	bgt.n	100605b0 <LL_sched_engine+0x94>
1006058e:	207f      	movs	r0, #127	@ 0x7f
10060590:	4007      	ands	r7, r0
10060592:	252c      	movs	r5, #44	@ 0x2c
10060594:	437d      	muls	r5, r7
10060596:	9c07      	ldr	r4, [sp, #28]
10060598:	1960      	adds	r0, r4, r5
1006059a:	900a      	str	r0, [sp, #40]	@ 0x28
1006059c:	5966      	ldr	r6, [r4, r5]
1006059e:	f7f2 f9a8 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
100605a2:	1a30      	subs	r0, r6, r0
100605a4:	49be      	ldr	r1, [pc, #760]	@ (100608a0 <__arm_cp.13_3>)
100605a6:	1840      	adds	r0, r0, r1
100605a8:	d500      	bpl.n	100605ac <LL_sched_engine+0x90>
100605aa:	e0ef      	b.n	1006078c <LL_sched_engine+0x270>
100605ac:	4638      	mov	r0, r7
100605ae:	e004      	b.n	100605ba <LL_sched_engine+0x9e>
100605b0:	b2f8      	uxtb	r0, r7
100605b2:	28ff      	cmp	r0, #255	@ 0xff
100605b4:	d00e      	beq.n	100605d4 <LL_sched_engine+0xb8>
100605b6:	2100      	movs	r1, #0
100605b8:	910a      	str	r1, [sp, #40]	@ 0x28
100605ba:	212c      	movs	r1, #44	@ 0x2c
100605bc:	4341      	muls	r1, r0
100605be:	9807      	ldr	r0, [sp, #28]
100605c0:	1840      	adds	r0, r0, r1
100605c2:	2101      	movs	r1, #1
100605c4:	7501      	strb	r1, [r0, #20]
100605c6:	7c81      	ldrb	r1, [r0, #18]
100605c8:	2908      	cmp	r1, #8
100605ca:	d102      	bne.n	100605d2 <LL_sched_engine+0xb6>
100605cc:	3012      	adds	r0, #18
100605ce:	2104      	movs	r1, #4
100605d0:	7001      	strb	r1, [r0, #0]
100605d2:	9708      	str	r7, [sp, #32]
100605d4:	f7f2 f98d 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
100605d8:	9912      	ldr	r1, [sp, #72]	@ 0x48
100605da:	180c      	adds	r4, r1, r0
100605dc:	48af      	ldr	r0, [pc, #700]	@ (1006089c <__arm_cp.13_2>)
100605de:	6807      	ldr	r7, [r0, #0]
100605e0:	3728      	adds	r7, #40	@ 0x28
100605e2:	2500      	movs	r5, #0
100605e4:	4628      	mov	r0, r5
100605e6:	49af      	ldr	r1, [pc, #700]	@ (100608a4 <__arm_cp.13_4>)
100605e8:	7aca      	ldrb	r2, [r1, #11]
100605ea:	4295      	cmp	r5, r2
100605ec:	d23a      	bcs.n	10060664 <LL_sched_engine+0x148>
100605ee:	463e      	mov	r6, r7
100605f0:	3e16      	subs	r6, #22
100605f2:	7831      	ldrb	r1, [r6, #0]
100605f4:	070a      	lsls	r2, r1, #28
100605f6:	0f52      	lsrs	r2, r2, #29
100605f8:	d01e      	beq.n	10060638 <LL_sched_engine+0x11c>
100605fa:	2104      	movs	r1, #4
100605fc:	7031      	strb	r1, [r6, #0]
100605fe:	4639      	mov	r1, r7
10060600:	3928      	subs	r1, #40	@ 0x28
10060602:	6809      	ldr	r1, [r1, #0]
10060604:	43ca      	mvns	r2, r1
10060606:	18a2      	adds	r2, r4, r2
10060608:	d429      	bmi.n	1006065e <LL_sched_engine+0x142>
1006060a:	1a61      	subs	r1, r4, r1
1006060c:	4638      	mov	r0, r7
1006060e:	381c      	subs	r0, #28
10060610:	6800      	ldr	r0, [r0, #0]
10060612:	463a      	mov	r2, r7
10060614:	3a0c      	subs	r2, #12
10060616:	6812      	ldr	r2, [r2, #0]
10060618:	4790      	blx	r2
1006061a:	4639      	mov	r1, r7
1006061c:	3918      	subs	r1, #24
1006061e:	880a      	ldrh	r2, [r1, #0]
10060620:	1812      	adds	r2, r2, r0
10060622:	800a      	strh	r2, [r1, #0]
10060624:	4639      	mov	r1, r7
10060626:	3914      	subs	r1, #20
10060628:	780a      	ldrb	r2, [r1, #0]
1006062a:	1880      	adds	r0, r0, r2
1006062c:	287f      	cmp	r0, #127	@ 0x7f
1006062e:	d300      	bcc.n	10060632 <LL_sched_engine+0x116>
10060630:	207f      	movs	r0, #127	@ 0x7f
10060632:	7008      	strb	r0, [r1, #0]
10060634:	7831      	ldrb	r1, [r6, #0]
10060636:	2001      	movs	r0, #1
10060638:	0689      	lsls	r1, r1, #26
1006063a:	0f89      	lsrs	r1, r1, #30
1006063c:	d00f      	beq.n	1006065e <LL_sched_engine+0x142>
1006063e:	6839      	ldr	r1, [r7, #0]
10060640:	2900      	cmp	r1, #0
10060642:	d006      	beq.n	10060652 <LL_sched_engine+0x136>
10060644:	4638      	mov	r0, r7
10060646:	381c      	subs	r0, #28
10060648:	6800      	ldr	r0, [r0, #0]
1006064a:	4788      	blx	r1
1006064c:	7830      	ldrb	r0, [r6, #0]
1006064e:	2801      	cmp	r0, #1
10060650:	d004      	beq.n	1006065c <LL_sched_engine+0x140>
10060652:	2000      	movs	r0, #0
10060654:	7030      	strb	r0, [r6, #0]
10060656:	4639      	mov	r1, r7
10060658:	3915      	subs	r1, #21
1006065a:	7008      	strb	r0, [r1, #0]
1006065c:	2001      	movs	r0, #1
1006065e:	372c      	adds	r7, #44	@ 0x2c
10060660:	1c6d      	adds	r5, r5, #1
10060662:	e7c0      	b.n	100605e6 <LL_sched_engine+0xca>
10060664:	2800      	cmp	r0, #0
10060666:	d1b5      	bne.n	100605d4 <LL_sched_engine+0xb8>
10060668:	488c      	ldr	r0, [pc, #560]	@ (1006089c <__arm_cp.13_2>)
1006066a:	6800      	ldr	r0, [r0, #0]
1006066c:	4603      	mov	r3, r0
1006066e:	3312      	adds	r3, #18
10060670:	2400      	movs	r4, #0
10060672:	4621      	mov	r1, r4
10060674:	42a2      	cmp	r2, r4
10060676:	d009      	beq.n	1006068c <LL_sched_engine+0x170>
10060678:	781d      	ldrb	r5, [r3, #0]
1006067a:	2d04      	cmp	r5, #4
1006067c:	d103      	bne.n	10060686 <LL_sched_engine+0x16a>
1006067e:	b2cd      	uxtb	r5, r1
10060680:	ae13      	add	r6, sp, #76	@ 0x4c
10060682:	5574      	strb	r4, [r6, r5]
10060684:	1c49      	adds	r1, r1, #1
10060686:	332c      	adds	r3, #44	@ 0x2c
10060688:	1c64      	adds	r4, r4, #1
1006068a:	e7f3      	b.n	10060674 <LL_sched_engine+0x158>
1006068c:	060a      	lsls	r2, r1, #24
1006068e:	d074      	beq.n	1006077a <LL_sched_engine+0x25e>
10060690:	b2ca      	uxtb	r2, r1
10060692:	920e      	str	r2, [sp, #56]	@ 0x38
10060694:	2200      	movs	r2, #0
10060696:	9206      	str	r2, [sp, #24]
10060698:	460c      	mov	r4, r1
1006069a:	9203      	str	r2, [sp, #12]
1006069c:	4616      	mov	r6, r2
1006069e:	910d      	str	r1, [sp, #52]	@ 0x34
100606a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
100606a2:	4296      	cmp	r6, r2
100606a4:	d06e      	beq.n	10060784 <LL_sched_engine+0x268>
100606a6:	9612      	str	r6, [sp, #72]	@ 0x48
100606a8:	9410      	str	r4, [sp, #64]	@ 0x40
100606aa:	b2e3      	uxtb	r3, r4
100606ac:	2700      	movs	r7, #0
100606ae:	462c      	mov	r4, r5
100606b0:	463e      	mov	r6, r7
100606b2:	42bb      	cmp	r3, r7
100606b4:	d00d      	beq.n	100606d2 <LL_sched_engine+0x1b6>
100606b6:	aa13      	add	r2, sp, #76	@ 0x4c
100606b8:	5dd2      	ldrb	r2, [r2, r7]
100606ba:	252c      	movs	r5, #44	@ 0x2c
100606bc:	4355      	muls	r5, r2
100606be:	5945      	ldr	r5, [r0, r5]
100606c0:	2f00      	cmp	r7, #0
100606c2:	d002      	beq.n	100606ca <LL_sched_engine+0x1ae>
100606c4:	43f2      	mvns	r2, r6
100606c6:	18aa      	adds	r2, r5, r2
100606c8:	d501      	bpl.n	100606ce <LL_sched_engine+0x1b2>
100606ca:	463c      	mov	r4, r7
100606cc:	462e      	mov	r6, r5
100606ce:	1c7f      	adds	r7, r7, #1
100606d0:	e7ef      	b.n	100606b2 <LL_sched_engine+0x196>
100606d2:	9d12      	ldr	r5, [sp, #72]	@ 0x48
100606d4:	1b4a      	subs	r2, r1, r5
100606d6:	b2d2      	uxtb	r2, r2
100606d8:	1e51      	subs	r1, r2, #1
100606da:	aa13      	add	r2, sp, #76	@ 0x4c
100606dc:	5c53      	ldrb	r3, [r2, r1]
100606de:	b2e4      	uxtb	r4, r4
100606e0:	5d17      	ldrb	r7, [r2, r4]
100606e2:	5457      	strb	r7, [r2, r1]
100606e4:	5513      	strb	r3, [r2, r4]
100606e6:	910f      	str	r1, [sp, #60]	@ 0x3c
100606e8:	b2cb      	uxtb	r3, r1
100606ea:	5cd3      	ldrb	r3, [r2, r3]
100606ec:	2d00      	cmp	r5, #0
100606ee:	d02e      	beq.n	1006074e <LL_sched_engine+0x232>
100606f0:	461d      	mov	r5, r3
100606f2:	9911      	ldr	r1, [sp, #68]	@ 0x44
100606f4:	b2ca      	uxtb	r2, r1
100606f6:	ac13      	add	r4, sp, #76	@ 0x4c
100606f8:	5ca4      	ldrb	r4, [r4, r2]
100606fa:	272c      	movs	r7, #44	@ 0x2c
100606fc:	437c      	muls	r4, r7
100606fe:	5902      	ldr	r2, [r0, r4]
10060700:	1b91      	subs	r1, r2, r6
10060702:	1904      	adds	r4, r0, r4
10060704:	6863      	ldr	r3, [r4, #4]
10060706:	18c9      	adds	r1, r1, r3
10060708:	3195      	adds	r1, #149	@ 0x95
1006070a:	d44a      	bmi.n	100607a2 <LL_sched_engine+0x286>
1006070c:	43d1      	mvns	r1, r2
1006070e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
10060710:	1851      	adds	r1, r2, r1
10060712:	d449      	bmi.n	100607a8 <LL_sched_engine+0x28c>
10060714:	436f      	muls	r7, r5
10060716:	19c1      	adds	r1, r0, r7
10060718:	7d8a      	ldrb	r2, [r1, #22]
1006071a:	7d0b      	ldrb	r3, [r1, #20]
1006071c:	4093      	lsls	r3, r2
1006071e:	7d49      	ldrb	r1, [r1, #21]
10060720:	2601      	movs	r6, #1
10060722:	4632      	mov	r2, r6
10060724:	408a      	lsls	r2, r1
10060726:	429a      	cmp	r2, r3
10060728:	d800      	bhi.n	1006072c <LL_sched_engine+0x210>
1006072a:	4613      	mov	r3, r2
1006072c:	7da1      	ldrb	r1, [r4, #22]
1006072e:	7d27      	ldrb	r7, [r4, #20]
10060730:	408f      	lsls	r7, r1
10060732:	7d61      	ldrb	r1, [r4, #21]
10060734:	408e      	lsls	r6, r1
10060736:	42be      	cmp	r6, r7
10060738:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
1006073a:	d800      	bhi.n	1006073e <LL_sched_engine+0x222>
1006073c:	4637      	mov	r7, r6
1006073e:	429f      	cmp	r7, r3
10060740:	462b      	mov	r3, r5
10060742:	990d      	ldr	r1, [sp, #52]	@ 0x34
10060744:	9c10      	ldr	r4, [sp, #64]	@ 0x40
10060746:	d300      	bcc.n	1006074a <LL_sched_engine+0x22e>
10060748:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1006074a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1006074c:	e011      	b.n	10060772 <LL_sched_engine+0x256>
1006074e:	990d      	ldr	r1, [sp, #52]	@ 0x34
10060750:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10060752:	2a01      	cmp	r2, #1
10060754:	d101      	bne.n	1006075a <LL_sched_engine+0x23e>
10060756:	2202      	movs	r2, #2
10060758:	9206      	str	r2, [sp, #24]
1006075a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
1006075c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
1006075e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10060760:	222c      	movs	r2, #44	@ 0x2c
10060762:	435a      	muls	r2, r3
10060764:	5883      	ldr	r3, [r0, r2]
10060766:	1882      	adds	r2, r0, r2
10060768:	6852      	ldr	r2, [r2, #4]
1006076a:	189a      	adds	r2, r3, r2
1006076c:	3296      	adds	r2, #150	@ 0x96
1006076e:	920c      	str	r2, [sp, #48]	@ 0x30
10060770:	462b      	mov	r3, r5
10060772:	1e64      	subs	r4, r4, #1
10060774:	1c76      	adds	r6, r6, #1
10060776:	9311      	str	r3, [sp, #68]	@ 0x44
10060778:	e792      	b.n	100606a0 <LL_sched_engine+0x184>
1006077a:	2000      	movs	r0, #0
1006077c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
1006077e:	6048      	str	r0, [r1, #4]
10060780:	7388      	strb	r0, [r1, #14]
10060782:	e02d      	b.n	100607e0 <LL_sched_engine+0x2c4>
10060784:	9a03      	ldr	r2, [sp, #12]
10060786:	4616      	mov	r6, r2
10060788:	9b06      	ldr	r3, [sp, #24]
1006078a:	e013      	b.n	100607b4 <LL_sched_engine+0x298>
1006078c:	1960      	adds	r0, r4, r5
1006078e:	7c80      	ldrb	r0, [r0, #18]
10060790:	2810      	cmp	r0, #16
10060792:	d100      	bne.n	10060796 <LL_sched_engine+0x27a>
10060794:	e70a      	b.n	100605ac <LL_sched_engine+0x90>
10060796:	2820      	cmp	r0, #32
10060798:	d100      	bne.n	1006079c <LL_sched_engine+0x280>
1006079a:	e707      	b.n	100605ac <LL_sched_engine+0x90>
1006079c:	2400      	movs	r4, #0
1006079e:	463d      	mov	r5, r7
100607a0:	e021      	b.n	100607e6 <LL_sched_engine+0x2ca>
100607a2:	3e96      	subs	r6, #150	@ 0x96
100607a4:	9b04      	ldr	r3, [sp, #16]
100607a6:	e004      	b.n	100607b2 <LL_sched_engine+0x296>
100607a8:	980d      	ldr	r0, [sp, #52]	@ 0x34
100607aa:	1e40      	subs	r0, r0, #1
100607ac:	9011      	str	r0, [sp, #68]	@ 0x44
100607ae:	2600      	movs	r6, #0
100607b0:	4633      	mov	r3, r6
100607b2:	9a03      	ldr	r2, [sp, #12]
100607b4:	9811      	ldr	r0, [sp, #68]	@ 0x44
100607b6:	b2c0      	uxtb	r0, r0
100607b8:	a913      	add	r1, sp, #76	@ 0x4c
100607ba:	5c0d      	ldrb	r5, [r1, r0]
100607bc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100607be:	6042      	str	r2, [r0, #4]
100607c0:	7383      	strb	r3, [r0, #14]
100607c2:	2dff      	cmp	r5, #255	@ 0xff
100607c4:	d00c      	beq.n	100607e0 <LL_sched_engine+0x2c4>
100607c6:	202c      	movs	r0, #44	@ 0x2c
100607c8:	4368      	muls	r0, r5
100607ca:	9907      	ldr	r1, [sp, #28]
100607cc:	1809      	adds	r1, r1, r0
100607ce:	b2d8      	uxtb	r0, r3
100607d0:	2801      	cmp	r0, #1
100607d2:	910a      	str	r1, [sp, #40]	@ 0x28
100607d4:	d105      	bne.n	100607e2 <LL_sched_engine+0x2c6>
100607d6:	6808      	ldr	r0, [r1, #0]
100607d8:	1a30      	subs	r0, r6, r0
100607da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100607dc:	6048      	str	r0, [r1, #4]
100607de:	e000      	b.n	100607e2 <LL_sched_engine+0x2c6>
100607e0:	25ff      	movs	r5, #255	@ 0xff
100607e2:	9c01      	ldr	r4, [sp, #4]
100607e4:	9f08      	ldr	r7, [sp, #32]
100607e6:	f7f3 f821 	bl	1005382c <BLEPLAT_CNTR_ClearSemareq>
100607ea:	482a      	ldr	r0, [pc, #168]	@ (10060894 <__arm_cp.13_0>)
100607ec:	6800      	ldr	r0, [r0, #0]
100607ee:	2dff      	cmp	r5, #255	@ 0xff
100607f0:	d02f      	beq.n	10060852 <LL_sched_engine+0x336>
100607f2:	9711      	str	r7, [sp, #68]	@ 0x44
100607f4:	9412      	str	r4, [sp, #72]	@ 0x48
100607f6:	4604      	mov	r4, r0
100607f8:	2008      	movs	r0, #8
100607fa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
100607fc:	74b8      	strb	r0, [r7, #18]
100607fe:	f7fe fa36 	bl	1005ec6e <llc_cte_timer_stop_ucfg_weak>
10060802:	7365      	strb	r5, [r4, #13]
10060804:	6a3a      	ldr	r2, [r7, #32]
10060806:	68f8      	ldr	r0, [r7, #12]
10060808:	6879      	ldr	r1, [r7, #4]
1006080a:	4790      	blx	r2
1006080c:	683e      	ldr	r6, [r7, #0]
1006080e:	940b      	str	r4, [sp, #44]	@ 0x2c
10060810:	6026      	str	r6, [r4, #0]
10060812:	4628      	mov	r0, r5
10060814:	f7f3 f820 	bl	10053858 <BLEPLAT_CNTR_GlobWriteSlot>
10060818:	f7f3 f817 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
1006081c:	9812      	ldr	r0, [sp, #72]	@ 0x48
1006081e:	2800      	cmp	r0, #0
10060820:	d023      	beq.n	1006086a <LL_sched_engine+0x34e>
10060822:	7cf8      	ldrb	r0, [r7, #19]
10060824:	09c1      	lsrs	r1, r0, #7
10060826:	2201      	movs	r2, #1
10060828:	4630      	mov	r0, r6
1006082a:	f7f2 f889 	bl	10052940 <BLEPLAT_SetRadioTimerValue>
1006082e:	2800      	cmp	r0, #0
10060830:	d01d      	beq.n	1006086e <LL_sched_engine+0x352>
10060832:	9809      	ldr	r0, [sp, #36]	@ 0x24
10060834:	0040      	lsls	r0, r0, #1
10060836:	9009      	str	r0, [sp, #36]	@ 0x24
10060838:	2810      	cmp	r0, #16
1006083a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
1006083c:	d200      	bcs.n	10060840 <LL_sched_engine+0x324>
1006083e:	e676      	b.n	1006052e <LL_sched_engine+0x12>
10060840:	f7fe fa14 	bl	1005ec6c <llc_cte_timer_error_ucfg_weak>
10060844:	20a1      	movs	r0, #161	@ 0xa1
10060846:	2106      	movs	r1, #6
10060848:	2200      	movs	r2, #0
1006084a:	4613      	mov	r3, r2
1006084c:	f003 fc12 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
10060850:	e009      	b.n	10060866 <LL_sched_engine+0x34a>
10060852:	4604      	mov	r4, r0
10060854:	f7f2 f88e 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
10060858:	f7f2 fff0 	bl	1005383c <BLEPLAT_CNTR_GlobDisableBlue>
1006085c:	2000      	movs	r0, #0
1006085e:	73e0      	strb	r0, [r4, #15]
10060860:	20ff      	movs	r0, #255	@ 0xff
10060862:	0200      	lsls	r0, r0, #8
10060864:	81a0      	strh	r0, [r4, #12]
10060866:	9904      	ldr	r1, [sp, #16]
10060868:	e00f      	b.n	1006088a <LL_sched_engine+0x36e>
1006086a:	f7f2 f89b 	bl	100529a4 <BLEPLAT_SetRadioCloseTimeout>
1006086e:	9b04      	ldr	r3, [sp, #16]
10060870:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10060872:	730b      	strb	r3, [r1, #12]
10060874:	7cf8      	ldrb	r0, [r7, #19]
10060876:	73c8      	strb	r0, [r1, #15]
10060878:	9a05      	ldr	r2, [sp, #20]
1006087a:	60d6      	str	r6, [r2, #12]
1006087c:	7c11      	ldrb	r1, [r2, #16]
1006087e:	9c02      	ldr	r4, [sp, #8]
10060880:	4021      	ands	r1, r4
10060882:	0100      	lsls	r0, r0, #4
10060884:	1808      	adds	r0, r1, r0
10060886:	4619      	mov	r1, r3
10060888:	7410      	strb	r0, [r2, #16]
1006088a:	4803      	ldr	r0, [pc, #12]	@ (10060898 <__arm_cp.13_1>)
1006088c:	6800      	ldr	r0, [r0, #0]
1006088e:	7201      	strb	r1, [r0, #8]
10060890:	b033      	add	sp, #204	@ 0xcc
10060892:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060894 <__arm_cp.13_0>:
10060894:	20002ad4 	.word	0x20002ad4

10060898 <__arm_cp.13_1>:
10060898:	20002ad0 	.word	0x20002ad0

1006089c <__arm_cp.13_2>:
1006089c:	20002ad8 	.word	0x20002ad8

100608a0 <__arm_cp.13_3>:
100608a0:	fffffed4 	.word	0xfffffed4

100608a4 <__arm_cp.13_4>:
100608a4:	20002ae4 	.word	0x20002ae4

100608a8 <LL_sched_set_priority>:
100608a8:	b510      	push	{r4, lr}
100608aa:	231f      	movs	r3, #31
100608ac:	401a      	ands	r2, r3
100608ae:	242c      	movs	r4, #44	@ 0x2c
100608b0:	4344      	muls	r4, r0
100608b2:	4803      	ldr	r0, [pc, #12]	@ (100608c0 <__arm_cp.14_0>)
100608b4:	6800      	ldr	r0, [r0, #0]
100608b6:	1900      	adds	r0, r0, r4
100608b8:	7582      	strb	r2, [r0, #22]
100608ba:	4019      	ands	r1, r3
100608bc:	7541      	strb	r1, [r0, #21]
100608be:	bd10      	pop	{r4, pc}

100608c0 <__arm_cp.14_0>:
100608c0:	20002ad8 	.word	0x20002ad8

100608c4 <LL_sched_set_params>:
100608c4:	b5b0      	push	{r4, r5, r7, lr}
100608c6:	242c      	movs	r4, #44	@ 0x2c
100608c8:	4344      	muls	r4, r0
100608ca:	480b      	ldr	r0, [pc, #44]	@ (100608f8 <__arm_cp.15_0>)
100608cc:	6800      	ldr	r0, [r0, #0]
100608ce:	9d05      	ldr	r5, [sp, #20]
100608d0:	5105      	str	r5, [r0, r4]
100608d2:	1900      	adds	r0, r0, r4
100608d4:	9c04      	ldr	r4, [sp, #16]
100608d6:	6084      	str	r4, [r0, #8]
100608d8:	60c1      	str	r1, [r0, #12]
100608da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
100608dc:	6281      	str	r1, [r0, #40]	@ 0x28
100608de:	990a      	ldr	r1, [sp, #40]	@ 0x28
100608e0:	6241      	str	r1, [r0, #36]	@ 0x24
100608e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
100608e4:	6201      	str	r1, [r0, #32]
100608e6:	9908      	ldr	r1, [sp, #32]
100608e8:	61c1      	str	r1, [r0, #28]
100608ea:	9907      	ldr	r1, [sp, #28]
100608ec:	7581      	strb	r1, [r0, #22]
100608ee:	9906      	ldr	r1, [sp, #24]
100608f0:	7541      	strb	r1, [r0, #21]
100608f2:	74c2      	strb	r2, [r0, #19]
100608f4:	6043      	str	r3, [r0, #4]
100608f6:	bdb0      	pop	{r4, r5, r7, pc}

100608f8 <__arm_cp.15_0>:
100608f8:	20002ad8 	.word	0x20002ad8

100608fc <LL_sched_delete_taskslot>:
100608fc:	212c      	movs	r1, #44	@ 0x2c
100608fe:	4341      	muls	r1, r0
10060900:	4802      	ldr	r0, [pc, #8]	@ (1006090c <__arm_cp.19_0>)
10060902:	6800      	ldr	r0, [r0, #0]
10060904:	1840      	adds	r0, r0, r1
10060906:	2110      	movs	r1, #16
10060908:	8241      	strh	r1, [r0, #18]
1006090a:	4770      	bx	lr

1006090c <__arm_cp.19_0>:
1006090c:	20002ad8 	.word	0x20002ad8

10060910 <LL_sched_set_per_state>:
10060910:	222c      	movs	r2, #44	@ 0x2c
10060912:	4342      	muls	r2, r0
10060914:	4802      	ldr	r0, [pc, #8]	@ (10060920 <__arm_cp.21_0>)
10060916:	6800      	ldr	r0, [r0, #0]
10060918:	1880      	adds	r0, r0, r2
1006091a:	7481      	strb	r1, [r0, #18]
1006091c:	4770      	bx	lr
1006091e:	46c0      	nop			@ (mov r8, r8)

10060920 <__arm_cp.21_0>:
10060920:	20002ad8 	.word	0x20002ad8

10060924 <LL_sched_reserve_taskslot>:
10060924:	b510      	push	{r4, lr}
10060926:	480e      	ldr	r0, [pc, #56]	@ (10060960 <__arm_cp.22_0>)
10060928:	6801      	ldr	r1, [r0, #0]
1006092a:	3128      	adds	r1, #40	@ 0x28
1006092c:	2000      	movs	r0, #0
1006092e:	4a0d      	ldr	r2, [pc, #52]	@ (10060964 <__arm_cp.22_1>)
10060930:	7ad3      	ldrb	r3, [r2, #11]
10060932:	4298      	cmp	r0, r3
10060934:	d20b      	bcs.n	1006094e <LL_sched_reserve_taskslot+0x2a>
10060936:	f3ef 8310 	mrs	r3, PRIMASK
1006093a:	b672      	cpsid	i
1006093c:	460b      	mov	r3, r1
1006093e:	3b16      	subs	r3, #22
10060940:	781c      	ldrb	r4, [r3, #0]
10060942:	2c00      	cmp	r4, #0
10060944:	d005      	beq.n	10060952 <LL_sched_reserve_taskslot+0x2e>
10060946:	b662      	cpsie	i
10060948:	312c      	adds	r1, #44	@ 0x2c
1006094a:	1c40      	adds	r0, r0, #1
1006094c:	e7f0      	b.n	10060930 <LL_sched_reserve_taskslot+0xc>
1006094e:	20ff      	movs	r0, #255	@ 0xff
10060950:	e004      	b.n	1006095c <LL_sched_reserve_taskslot+0x38>
10060952:	2200      	movs	r2, #0
10060954:	600a      	str	r2, [r1, #0]
10060956:	2101      	movs	r1, #1
10060958:	7019      	strb	r1, [r3, #0]
1006095a:	b662      	cpsie	i
1006095c:	b2c0      	uxtb	r0, r0
1006095e:	bd10      	pop	{r4, pc}

10060960 <__arm_cp.22_0>:
10060960:	20002ad8 	.word	0x20002ad8

10060964 <__arm_cp.22_1>:
10060964:	20002ae4 	.word	0x20002ae4

10060968 <LL_sched_release_taskslot>:
10060968:	28ff      	cmp	r0, #255	@ 0xff
1006096a:	d006      	beq.n	1006097a <LL_sched_release_taskslot+0x12>
1006096c:	212c      	movs	r1, #44	@ 0x2c
1006096e:	4341      	muls	r1, r0
10060970:	4802      	ldr	r0, [pc, #8]	@ (1006097c <__arm_cp.23_0>)
10060972:	6800      	ldr	r0, [r0, #0]
10060974:	1840      	adds	r0, r0, r1
10060976:	2100      	movs	r1, #0
10060978:	8241      	strh	r1, [r0, #18]
1006097a:	4770      	bx	lr

1006097c <__arm_cp.23_0>:
1006097c:	20002ad8 	.word	0x20002ad8

10060980 <LL_sched_check_and_call_sched>:
10060980:	b510      	push	{r4, lr}
10060982:	460c      	mov	r4, r1
10060984:	f3ef 8110 	mrs	r1, PRIMASK
10060988:	b672      	cpsid	i
1006098a:	f7ff fda5 	bl	100604d8 <LL_sched_is_scheduler_call_pending>
1006098e:	b662      	cpsie	i
10060990:	2800      	cmp	r0, #0
10060992:	d000      	beq.n	10060996 <LL_sched_check_and_call_sched+0x16>
10060994:	bd10      	pop	{r4, pc}
10060996:	4620      	mov	r0, r4
10060998:	f7ff fdc0 	bl	1006051c <LL_sched_engine>
1006099c:	bd10      	pop	{r4, pc}
	...

100609a0 <LL_sched_check_and_wait_sched>:
100609a0:	b5b0      	push	{r4, r5, r7, lr}
100609a2:	4604      	mov	r4, r0
100609a4:	4813      	ldr	r0, [pc, #76]	@ (100609f4 <__arm_cp.25_0>)
100609a6:	7ac0      	ldrb	r0, [r0, #11]
100609a8:	42a0      	cmp	r0, r4
100609aa:	d922      	bls.n	100609f2 <LL_sched_check_and_wait_sched+0x52>
100609ac:	f3ef 8010 	mrs	r0, PRIMASK
100609b0:	b672      	cpsid	i
100609b2:	25ff      	movs	r5, #255	@ 0xff
100609b4:	35ec      	adds	r5, #236	@ 0xec
100609b6:	f7f1 ff9c 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
100609ba:	1940      	adds	r0, r0, r5
100609bc:	f7ff fd8c 	bl	100604d8 <LL_sched_is_scheduler_call_pending>
100609c0:	4a0d      	ldr	r2, [pc, #52]	@ (100609f8 <__arm_cp.25_1>)
100609c2:	6813      	ldr	r3, [r2, #0]
100609c4:	2100      	movs	r1, #0
100609c6:	7219      	strb	r1, [r3, #8]
100609c8:	b662      	cpsie	i
100609ca:	2801      	cmp	r0, #1
100609cc:	d10c      	bne.n	100609e8 <LL_sched_check_and_wait_sched+0x48>
100609ce:	6810      	ldr	r0, [r2, #0]
100609d0:	6041      	str	r1, [r0, #4]
100609d2:	4a0a      	ldr	r2, [pc, #40]	@ (100609fc <__arm_cp.25_2>)
100609d4:	6843      	ldr	r3, [r0, #4]
100609d6:	4293      	cmp	r3, r2
100609d8:	d80b      	bhi.n	100609f2 <LL_sched_check_and_wait_sched+0x52>
100609da:	7a03      	ldrb	r3, [r0, #8]
100609dc:	2b00      	cmp	r3, #0
100609de:	d107      	bne.n	100609f0 <LL_sched_check_and_wait_sched+0x50>
100609e0:	6843      	ldr	r3, [r0, #4]
100609e2:	1c5b      	adds	r3, r3, #1
100609e4:	6043      	str	r3, [r0, #4]
100609e6:	e7f5      	b.n	100609d4 <LL_sched_check_and_wait_sched+0x34>
100609e8:	4620      	mov	r0, r4
100609ea:	f7ff fd97 	bl	1006051c <LL_sched_engine>
100609ee:	bdb0      	pop	{r4, r5, r7, pc}
100609f0:	7201      	strb	r1, [r0, #8]
100609f2:	bdb0      	pop	{r4, r5, r7, pc}

100609f4 <__arm_cp.25_0>:
100609f4:	20002ae4 	.word	0x20002ae4

100609f8 <__arm_cp.25_1>:
100609f8:	20002ad0 	.word	0x20002ad0

100609fc <__arm_cp.25_2>:
100609fc:	0004e1ff 	.word	0x0004e1ff

10060a00 <MBM_init>:
10060a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10060a02:	4c18      	ldr	r4, [pc, #96]	@ (10060a64 <__arm_cp.1_0>)
10060a04:	2501      	movs	r5, #1
10060a06:	2204      	movs	r2, #4
10060a08:	4e17      	ldr	r6, [pc, #92]	@ (10060a68 <__arm_cp.1_1>)
10060a0a:	4620      	mov	r0, r4
10060a0c:	4629      	mov	r1, r5
10060a0e:	47b0      	blx	r6
10060a10:	4f16      	ldr	r7, [pc, #88]	@ (10060a6c <__arm_cp.1_2>)
10060a12:	6038      	str	r0, [r7, #0]
10060a14:	2210      	movs	r2, #16
10060a16:	4620      	mov	r0, r4
10060a18:	4629      	mov	r1, r5
10060a1a:	47b0      	blx	r6
10060a1c:	6839      	ldr	r1, [r7, #0]
10060a1e:	6008      	str	r0, [r1, #0]
10060a20:	220c      	movs	r2, #12
10060a22:	4620      	mov	r0, r4
10060a24:	4629      	mov	r1, r5
10060a26:	47b0      	blx	r6
10060a28:	6839      	ldr	r1, [r7, #0]
10060a2a:	6809      	ldr	r1, [r1, #0]
10060a2c:	60c8      	str	r0, [r1, #12]
10060a2e:	4d10      	ldr	r5, [pc, #64]	@ (10060a70 <__arm_cp.1_3>)
10060a30:	89e9      	ldrh	r1, [r5, #14]
10060a32:	2224      	movs	r2, #36	@ 0x24
10060a34:	4620      	mov	r0, r4
10060a36:	47b0      	blx	r6
10060a38:	4601      	mov	r1, r0
10060a3a:	6838      	ldr	r0, [r7, #0]
10060a3c:	6802      	ldr	r2, [r0, #0]
10060a3e:	68d0      	ldr	r0, [r2, #12]
10060a40:	6081      	str	r1, [r0, #8]
10060a42:	2100      	movs	r1, #0
10060a44:	2908      	cmp	r1, #8
10060a46:	d003      	beq.n	10060a50 <MBM_init+0x50>
10060a48:	2300      	movs	r3, #0
10060a4a:	5253      	strh	r3, [r2, r1]
10060a4c:	1c89      	adds	r1, r1, #2
10060a4e:	e7f9      	b.n	10060a44 <MBM_init+0x44>
10060a50:	89e9      	ldrh	r1, [r5, #14]
10060a52:	80d1      	strh	r1, [r2, #6]
10060a54:	2100      	movs	r1, #0
10060a56:	8111      	strh	r1, [r2, #8]
10060a58:	89e9      	ldrh	r1, [r5, #14]
10060a5a:	8041      	strh	r1, [r0, #2]
10060a5c:	f000 f948 	bl	10060cf0 <Mem_Buff_init>
10060a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10060a62:	46c0      	nop			@ (mov r8, r8)

10060a64 <__arm_cp.1_0>:
10060a64:	20002ae0 	.word	0x20002ae0

10060a68 <__arm_cp.1_1>:
10060a68:	10060cb9 	.word	0x10060cb9

10060a6c <__arm_cp.1_2>:
10060a6c:	20002adc 	.word	0x20002adc

10060a70 <__arm_cp.1_3>:
10060a70:	20002ae4 	.word	0x20002ae4

10060a74 <MBM_get>:
10060a74:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10060a76:	4a1a      	ldr	r2, [pc, #104]	@ (10060ae0 <__arm_cp.2_0>)
10060a78:	6812      	ldr	r2, [r2, #0]
10060a7a:	6813      	ldr	r3, [r2, #0]
10060a7c:	f3ef 8210 	mrs	r2, PRIMASK
10060a80:	b672      	cpsid	i
10060a82:	2206      	movs	r2, #6
10060a84:	5e9c      	ldrsh	r4, [r3, r2]
10060a86:	17e2      	asrs	r2, r4, #31
10060a88:	4627      	mov	r7, r4
10060a8a:	4397      	bics	r7, r2
10060a8c:	0040      	lsls	r0, r0, #1
10060a8e:	9000      	str	r0, [sp, #0]
10060a90:	5e18      	ldrsh	r0, [r3, r0]
10060a92:	4a14      	ldr	r2, [pc, #80]	@ (10060ae4 <__arm_cp.2_1>)
10060a94:	9102      	str	r1, [sp, #8]
10060a96:	1889      	adds	r1, r1, r2
10060a98:	0949      	lsrs	r1, r1, #5
10060a9a:	1c4d      	adds	r5, r1, #1
10060a9c:	2801      	cmp	r0, #1
10060a9e:	9501      	str	r5, [sp, #4]
10060aa0:	db05      	blt.n	10060aae <MBM_get+0x3a>
10060aa2:	1b42      	subs	r2, r0, r5
10060aa4:	4256      	negs	r6, r2
10060aa6:	b212      	sxth	r2, r2
10060aa8:	13d5      	asrs	r5, r2, #15
10060aaa:	4035      	ands	r5, r6
10060aac:	183f      	adds	r7, r7, r0
10060aae:	68d8      	ldr	r0, [r3, #12]
10060ab0:	2200      	movs	r2, #0
10060ab2:	5e86      	ldrsh	r6, [r0, r2]
10060ab4:	b209      	sxth	r1, r1
10060ab6:	428e      	cmp	r6, r1
10060ab8:	dd0e      	ble.n	10060ad8 <MBM_get+0x64>
10060aba:	b23e      	sxth	r6, r7
10060abc:	428e      	cmp	r6, r1
10060abe:	dd0b      	ble.n	10060ad8 <MBM_get+0x64>
10060ac0:	9900      	ldr	r1, [sp, #0]
10060ac2:	1859      	adds	r1, r3, r1
10060ac4:	1b62      	subs	r2, r4, r5
10060ac6:	80da      	strh	r2, [r3, #6]
10060ac8:	880a      	ldrh	r2, [r1, #0]
10060aca:	9b01      	ldr	r3, [sp, #4]
10060acc:	1ad2      	subs	r2, r2, r3
10060ace:	800a      	strh	r2, [r1, #0]
10060ad0:	9902      	ldr	r1, [sp, #8]
10060ad2:	f000 f943 	bl	10060d5c <Mem_Buff_get>
10060ad6:	4602      	mov	r2, r0
10060ad8:	b662      	cpsie	i
10060ada:	4610      	mov	r0, r2
10060adc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10060ade:	46c0      	nop			@ (mov r8, r8)

10060ae0 <__arm_cp.2_0>:
10060ae0:	20002adc 	.word	0x20002adc

10060ae4 <__arm_cp.2_1>:
10060ae4:	001fffff 	.word	0x001fffff

10060ae8 <MBM_release>:
10060ae8:	b5b0      	push	{r4, r5, r7, lr}
10060aea:	460d      	mov	r5, r1
10060aec:	4604      	mov	r4, r0
10060aee:	f000 f95b 	bl	10060da8 <Mem_Buff_get_chain_count>
10060af2:	4601      	mov	r1, r0
10060af4:	4628      	mov	r0, r5
10060af6:	f000 f80b 	bl	10060b10 <MBM_release_balance>
10060afa:	4804      	ldr	r0, [pc, #16]	@ (10060b0c <__arm_cp.3_0>)
10060afc:	6800      	ldr	r0, [r0, #0]
10060afe:	6800      	ldr	r0, [r0, #0]
10060b00:	68c0      	ldr	r0, [r0, #12]
10060b02:	4621      	mov	r1, r4
10060b04:	f000 f90f 	bl	10060d26 <Mem_Buff_release>
10060b08:	bdb0      	pop	{r4, r5, r7, pc}
10060b0a:	46c0      	nop			@ (mov r8, r8)

10060b0c <__arm_cp.3_0>:
10060b0c:	20002adc 	.word	0x20002adc

10060b10 <MBM_release_balance>:
10060b10:	b510      	push	{r4, lr}
10060b12:	4a0b      	ldr	r2, [pc, #44]	@ (10060b40 <__arm_cp.4_0>)
10060b14:	6812      	ldr	r2, [r2, #0]
10060b16:	6812      	ldr	r2, [r2, #0]
10060b18:	f3ef 8310 	mrs	r3, PRIMASK
10060b1c:	b672      	cpsid	i
10060b1e:	0043      	lsls	r3, r0, #1
10060b20:	5ed0      	ldrsh	r0, [r2, r3]
10060b22:	1844      	adds	r4, r0, r1
10060b24:	52d4      	strh	r4, [r2, r3]
10060b26:	b20b      	sxth	r3, r1
10060b28:	18c3      	adds	r3, r0, r3
10060b2a:	2b01      	cmp	r3, #1
10060b2c:	db02      	blt.n	10060b34 <MBM_release_balance+0x24>
10060b2e:	4243      	negs	r3, r0
10060b30:	0bc1      	lsrs	r1, r0, #15
10060b32:	4019      	ands	r1, r3
10060b34:	88d0      	ldrh	r0, [r2, #6]
10060b36:	1808      	adds	r0, r1, r0
10060b38:	80d0      	strh	r0, [r2, #6]
10060b3a:	b662      	cpsie	i
10060b3c:	bd10      	pop	{r4, pc}
10060b3e:	46c0      	nop			@ (mov r8, r8)

10060b40 <__arm_cp.4_0>:
10060b40:	20002adc 	.word	0x20002adc

10060b44 <MBM_get_available_mem_buffers>:
10060b44:	4908      	ldr	r1, [pc, #32]	@ (10060b68 <__arm_cp.5_0>)
10060b46:	6809      	ldr	r1, [r1, #0]
10060b48:	680a      	ldr	r2, [r1, #0]
10060b4a:	f3ef 8110 	mrs	r1, PRIMASK
10060b4e:	b672      	cpsid	i
10060b50:	2106      	movs	r1, #6
10060b52:	5e51      	ldrsh	r1, [r2, r1]
10060b54:	17cb      	asrs	r3, r1, #31
10060b56:	4399      	bics	r1, r3
10060b58:	0040      	lsls	r0, r0, #1
10060b5a:	5e10      	ldrsh	r0, [r2, r0]
10060b5c:	2800      	cmp	r0, #0
10060b5e:	dd00      	ble.n	10060b62 <MBM_get_available_mem_buffers+0x1e>
10060b60:	1809      	adds	r1, r1, r0
10060b62:	b288      	uxth	r0, r1
10060b64:	b662      	cpsie	i
10060b66:	4770      	bx	lr

10060b68 <__arm_cp.5_0>:
10060b68:	20002adc 	.word	0x20002adc

10060b6c <MBM_resize>:
10060b6c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10060b6e:	2481      	movs	r4, #129	@ 0x81
10060b70:	2800      	cmp	r0, #0
10060b72:	d032      	beq.n	10060bda <MBM_resize+0x6e>
10060b74:	4606      	mov	r6, r0
10060b76:	9102      	str	r1, [sp, #8]
10060b78:	9401      	str	r4, [sp, #4]
10060b7a:	4819      	ldr	r0, [pc, #100]	@ (10060be0 <__arm_cp.6_0>)
10060b7c:	6800      	ldr	r0, [r0, #0]
10060b7e:	6800      	ldr	r0, [r0, #0]
10060b80:	9000      	str	r0, [sp, #0]
10060b82:	1e50      	subs	r0, r2, #1
10060b84:	211f      	movs	r1, #31
10060b86:	4301      	orrs	r1, r0
10060b88:	1c4c      	adds	r4, r1, #1
10060b8a:	b2a7      	uxth	r7, r4
10060b8c:	4630      	mov	r0, r6
10060b8e:	f000 f913 	bl	10060db8 <Mem_Buff_get_chain_size>
10060b92:	4605      	mov	r5, r0
10060b94:	4287      	cmp	r7, r0
10060b96:	d90c      	bls.n	10060bb2 <MBM_resize+0x46>
10060b98:	1b60      	subs	r0, r4, r5
10060b9a:	b281      	uxth	r1, r0
10060b9c:	9802      	ldr	r0, [sp, #8]
10060b9e:	f7ff ff69 	bl	10060a74 <MBM_get>
10060ba2:	2800      	cmp	r0, #0
10060ba4:	9c01      	ldr	r4, [sp, #4]
10060ba6:	d018      	beq.n	10060bda <MBM_resize+0x6e>
10060ba8:	4601      	mov	r1, r0
10060baa:	4630      	mov	r0, r6
10060bac:	f000 fa29 	bl	10061002 <Mem_Buff_append>
10060bb0:	e012      	b.n	10060bd8 <MBM_resize+0x6c>
10060bb2:	42af      	cmp	r7, r5
10060bb4:	d210      	bcs.n	10060bd8 <MBM_resize+0x6c>
10060bb6:	9800      	ldr	r0, [sp, #0]
10060bb8:	68c0      	ldr	r0, [r0, #12]
10060bba:	4631      	mov	r1, r6
10060bbc:	463a      	mov	r2, r7
10060bbe:	f000 f907 	bl	10060dd0 <Mem_Buff_resize>
10060bc2:	4604      	mov	r4, r0
10060bc4:	1e78      	subs	r0, r7, #1
10060bc6:	0940      	lsrs	r0, r0, #5
10060bc8:	1e69      	subs	r1, r5, #1
10060bca:	0949      	lsrs	r1, r1, #5
10060bcc:	1a08      	subs	r0, r1, r0
10060bce:	b281      	uxth	r1, r0
10060bd0:	9802      	ldr	r0, [sp, #8]
10060bd2:	f7ff ff9d 	bl	10060b10 <MBM_release_balance>
10060bd6:	e000      	b.n	10060bda <MBM_resize+0x6e>
10060bd8:	2400      	movs	r4, #0
10060bda:	4620      	mov	r0, r4
10060bdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10060bde:	46c0      	nop			@ (mov r8, r8)

10060be0 <__arm_cp.6_0>:
10060be0:	20002adc 	.word	0x20002adc

10060be4 <MBM_reserve>:
10060be4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10060be6:	460c      	mov	r4, r1
10060be8:	4601      	mov	r1, r0
10060bea:	481c      	ldr	r0, [pc, #112]	@ (10060c5c <__arm_cp.7_0>)
10060bec:	6800      	ldr	r0, [r0, #0]
10060bee:	6805      	ldr	r5, [r0, #0]
10060bf0:	8928      	ldrh	r0, [r5, #8]
10060bf2:	68ea      	ldr	r2, [r5, #12]
10060bf4:	8852      	ldrh	r2, [r2, #2]
10060bf6:	1a13      	subs	r3, r2, r0
10060bf8:	42a3      	cmp	r3, r4
10060bfa:	da26      	bge.n	10060c4a <MBM_reserve+0x66>
10060bfc:	1aa1      	subs	r1, r4, r2
10060bfe:	1808      	adds	r0, r1, r0
10060c00:	a901      	add	r1, sp, #4
10060c02:	8008      	strh	r0, [r1, #0]
10060c04:	4816      	ldr	r0, [pc, #88]	@ (10060c60 <__arm_cp.7_1>)
10060c06:	6800      	ldr	r0, [r0, #0]
10060c08:	6980      	ldr	r0, [r0, #24]
10060c0a:	2142      	movs	r1, #66	@ 0x42
10060c0c:	2240      	movs	r2, #64	@ 0x40
10060c0e:	2303      	movs	r3, #3
10060c10:	f7f4 faf0 	bl	100551f4 <aci_event_fifo_push_header>
10060c14:	2800      	cmp	r0, #0
10060c16:	d017      	beq.n	10060c48 <MBM_reserve+0x64>
10060c18:	4604      	mov	r4, r0
10060c1a:	2202      	movs	r2, #2
10060c1c:	72c2      	strb	r2, [r0, #11]
10060c1e:	2009      	movs	r0, #9
10060c20:	72a0      	strb	r0, [r4, #10]
10060c22:	4620      	mov	r0, r4
10060c24:	300c      	adds	r0, #12
10060c26:	a901      	add	r1, sp, #4
10060c28:	f7f1 fd98 	bl	1005275c <BLEPLAT_MemCpy>
10060c2c:	2000      	movs	r0, #0
10060c2e:	7260      	strb	r0, [r4, #9]
10060c30:	2106      	movs	r1, #6
10060c32:	7221      	strb	r1, [r4, #8]
10060c34:	71e0      	strb	r0, [r4, #7]
10060c36:	71a1      	strb	r1, [r4, #6]
10060c38:	20ff      	movs	r0, #255	@ 0xff
10060c3a:	7160      	strb	r0, [r4, #5]
10060c3c:	2082      	movs	r0, #130	@ 0x82
10060c3e:	7120      	strb	r0, [r4, #4]
10060c40:	2042      	movs	r0, #66	@ 0x42
10060c42:	4621      	mov	r1, r4
10060c44:	f7f4 fb73 	bl	1005532e <aci_event_fifo_push>
10060c48:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10060c4a:	2003      	movs	r0, #3
10060c4c:	4622      	mov	r2, r4
10060c4e:	f000 f809 	bl	10060c64 <MBM_move_class>
10060c52:	8928      	ldrh	r0, [r5, #8]
10060c54:	1900      	adds	r0, r0, r4
10060c56:	8128      	strh	r0, [r5, #8]
10060c58:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10060c5a:	46c0      	nop			@ (mov r8, r8)

10060c5c <__arm_cp.7_0>:
10060c5c:	20002adc 	.word	0x20002adc

10060c60 <__arm_cp.7_1>:
10060c60:	20002a80 	.word	0x20002a80

10060c64 <MBM_move_class>:
10060c64:	b510      	push	{r4, lr}
10060c66:	4b08      	ldr	r3, [pc, #32]	@ (10060c88 <__arm_cp.8_0>)
10060c68:	681b      	ldr	r3, [r3, #0]
10060c6a:	681b      	ldr	r3, [r3, #0]
10060c6c:	f3ef 8410 	mrs	r4, PRIMASK
10060c70:	b672      	cpsid	i
10060c72:	0040      	lsls	r0, r0, #1
10060c74:	5a1c      	ldrh	r4, [r3, r0]
10060c76:	1aa4      	subs	r4, r4, r2
10060c78:	521c      	strh	r4, [r3, r0]
10060c7a:	0048      	lsls	r0, r1, #1
10060c7c:	5a19      	ldrh	r1, [r3, r0]
10060c7e:	1889      	adds	r1, r1, r2
10060c80:	5219      	strh	r1, [r3, r0]
10060c82:	b662      	cpsie	i
10060c84:	bd10      	pop	{r4, pc}
10060c86:	46c0      	nop			@ (mov r8, r8)

10060c88 <__arm_cp.8_0>:
10060c88:	20002adc 	.word	0x20002adc

10060c8c <MBM_unreserve>:
10060c8c:	b5b0      	push	{r4, r5, r7, lr}
10060c8e:	460c      	mov	r4, r1
10060c90:	4905      	ldr	r1, [pc, #20]	@ (10060ca8 <__arm_cp.9_0>)
10060c92:	6809      	ldr	r1, [r1, #0]
10060c94:	680d      	ldr	r5, [r1, #0]
10060c96:	2103      	movs	r1, #3
10060c98:	4622      	mov	r2, r4
10060c9a:	f7ff ffe3 	bl	10060c64 <MBM_move_class>
10060c9e:	8928      	ldrh	r0, [r5, #8]
10060ca0:	1b00      	subs	r0, r0, r4
10060ca2:	8128      	strh	r0, [r5, #8]
10060ca4:	bdb0      	pop	{r4, r5, r7, pc}
10060ca6:	46c0      	nop			@ (mov r8, r8)

10060ca8 <__arm_cp.9_0>:
10060ca8:	20002adc 	.word	0x20002adc

10060cac <csmem_init>:
10060cac:	4801      	ldr	r0, [pc, #4]	@ (10060cb4 <__arm_cp.0_0>)
10060cae:	6841      	ldr	r1, [r0, #4]
10060cb0:	6001      	str	r1, [r0, #0]
10060cb2:	4770      	bx	lr

10060cb4 <__arm_cp.0_0>:
10060cb4:	20002ae0 	.word	0x20002ae0

10060cb8 <csmem_mem_assign>:
10060cb8:	b570      	push	{r4, r5, r6, lr}
10060cba:	4614      	mov	r4, r2
10060cbc:	4605      	mov	r5, r0
10060cbe:	434c      	muls	r4, r1
10060cc0:	6800      	ldr	r0, [r0, #0]
10060cc2:	1e40      	subs	r0, r0, #1
10060cc4:	2103      	movs	r1, #3
10060cc6:	4301      	orrs	r1, r0
10060cc8:	1c4e      	adds	r6, r1, #1
10060cca:	2100      	movs	r1, #0
10060ccc:	4630      	mov	r0, r6
10060cce:	4622      	mov	r2, r4
10060cd0:	f7f1 fd54 	bl	1005277c <BLEPLAT_MemSet>
10060cd4:	1930      	adds	r0, r6, r4
10060cd6:	6028      	str	r0, [r5, #0]
10060cd8:	4630      	mov	r0, r6
10060cda:	bd70      	pop	{r4, r5, r6, pc}

10060cdc <csmem_mem_0_assign>:
10060cdc:	b580      	push	{r7, lr}
10060cde:	460a      	mov	r2, r1
10060ce0:	4601      	mov	r1, r0
10060ce2:	4802      	ldr	r0, [pc, #8]	@ (10060cec <__arm_cp.3_0>)
10060ce4:	f7ff ffe8 	bl	10060cb8 <csmem_mem_assign>
10060ce8:	bd80      	pop	{r7, pc}
10060cea:	46c0      	nop			@ (mov r8, r8)

10060cec <__arm_cp.3_0>:
10060cec:	20002ae0 	.word	0x20002ae0

10060cf0 <Mem_Buff_init>:
10060cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
10060cf2:	b081      	sub	sp, #4
10060cf4:	4605      	mov	r5, r0
10060cf6:	8840      	ldrh	r0, [r0, #2]
10060cf8:	2486      	movs	r4, #134	@ 0x86
10060cfa:	2800      	cmp	r0, #0
10060cfc:	d010      	beq.n	10060d20 <Mem_Buff_init+0x30>
10060cfe:	68ae      	ldr	r6, [r5, #8]
10060d00:	2e00      	cmp	r6, #0
10060d02:	d00d      	beq.n	10060d20 <Mem_Buff_init+0x30>
10060d04:	2400      	movs	r4, #0
10060d06:	606c      	str	r4, [r5, #4]
10060d08:	802c      	strh	r4, [r5, #0]
10060d0a:	4627      	mov	r7, r4
10060d0c:	6034      	str	r4, [r6, #0]
10060d0e:	4628      	mov	r0, r5
10060d10:	4631      	mov	r1, r6
10060d12:	f000 f808 	bl	10060d26 <Mem_Buff_release>
10060d16:	3624      	adds	r6, #36	@ 0x24
10060d18:	1c7f      	adds	r7, r7, #1
10060d1a:	8868      	ldrh	r0, [r5, #2]
10060d1c:	4287      	cmp	r7, r0
10060d1e:	d3f5      	bcc.n	10060d0c <Mem_Buff_init+0x1c>
10060d20:	4620      	mov	r0, r4
10060d22:	b001      	add	sp, #4
10060d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060d26 <Mem_Buff_release>:
10060d26:	b510      	push	{r4, lr}
10060d28:	2900      	cmp	r1, #0
10060d2a:	d015      	beq.n	10060d58 <Mem_Buff_release+0x32>
10060d2c:	2200      	movs	r2, #0
10060d2e:	460c      	mov	r4, r1
10060d30:	4623      	mov	r3, r4
10060d32:	1c52      	adds	r2, r2, #1
10060d34:	6824      	ldr	r4, [r4, #0]
10060d36:	2c00      	cmp	r4, #0
10060d38:	d1fa      	bne.n	10060d30 <Mem_Buff_release+0xa>
10060d3a:	f3ef 8410 	mrs	r4, PRIMASK
10060d3e:	b672      	cpsid	i
10060d40:	6844      	ldr	r4, [r0, #4]
10060d42:	6041      	str	r1, [r0, #4]
10060d44:	601c      	str	r4, [r3, #0]
10060d46:	8801      	ldrh	r1, [r0, #0]
10060d48:	1889      	adds	r1, r1, r2
10060d4a:	8001      	strh	r1, [r0, #0]
10060d4c:	b662      	cpsie	i
10060d4e:	2000      	movs	r0, #0
10060d50:	f001 fdc2 	bl	100628d8 <tsk_signal_resource_idx>
10060d54:	f7f0 ff1b 	bl	10051b8e <BLE_STACK_ProcessRequest>
10060d58:	bd10      	pop	{r4, pc}
	...

10060d5c <Mem_Buff_get>:
10060d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10060d5e:	4a11      	ldr	r2, [pc, #68]	@ (10060da4 <__arm_cp.2_0>)
10060d60:	1889      	adds	r1, r1, r2
10060d62:	0949      	lsrs	r1, r1, #5
10060d64:	1c4a      	adds	r2, r1, #1
10060d66:	b294      	uxth	r4, r2
10060d68:	f3ef 8110 	mrs	r1, PRIMASK
10060d6c:	b672      	cpsid	i
10060d6e:	2100      	movs	r1, #0
10060d70:	2c00      	cmp	r4, #0
10060d72:	d013      	beq.n	10060d9c <Mem_Buff_get+0x40>
10060d74:	8803      	ldrh	r3, [r0, #0]
10060d76:	429c      	cmp	r4, r3
10060d78:	d810      	bhi.n	10060d9c <Mem_Buff_get+0x40>
10060d7a:	1e64      	subs	r4, r4, #1
10060d7c:	6841      	ldr	r1, [r0, #4]
10060d7e:	460d      	mov	r5, r1
10060d80:	d006      	beq.n	10060d90 <Mem_Buff_get+0x34>
10060d82:	2600      	movs	r6, #0
10060d84:	460d      	mov	r5, r1
10060d86:	682d      	ldr	r5, [r5, #0]
10060d88:	1c76      	adds	r6, r6, #1
10060d8a:	b2b7      	uxth	r7, r6
10060d8c:	42bc      	cmp	r4, r7
10060d8e:	d8fa      	bhi.n	10060d86 <Mem_Buff_get+0x2a>
10060d90:	682c      	ldr	r4, [r5, #0]
10060d92:	6044      	str	r4, [r0, #4]
10060d94:	2400      	movs	r4, #0
10060d96:	602c      	str	r4, [r5, #0]
10060d98:	1a9a      	subs	r2, r3, r2
10060d9a:	8002      	strh	r2, [r0, #0]
10060d9c:	b662      	cpsie	i
10060d9e:	4608      	mov	r0, r1
10060da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10060da2:	46c0      	nop			@ (mov r8, r8)

10060da4 <__arm_cp.2_0>:
10060da4:	001fffff 	.word	0x001fffff

10060da8 <Mem_Buff_get_chain_count>:
10060da8:	2100      	movs	r1, #0
10060daa:	2800      	cmp	r0, #0
10060dac:	d002      	beq.n	10060db4 <Mem_Buff_get_chain_count+0xc>
10060dae:	6800      	ldr	r0, [r0, #0]
10060db0:	1c49      	adds	r1, r1, #1
10060db2:	e7fa      	b.n	10060daa <Mem_Buff_get_chain_count+0x2>
10060db4:	b288      	uxth	r0, r1
10060db6:	4770      	bx	lr

10060db8 <Mem_Buff_get_chain_size>:
10060db8:	2800      	cmp	r0, #0
10060dba:	d006      	beq.n	10060dca <Mem_Buff_get_chain_size+0x12>
10060dbc:	2100      	movs	r1, #0
10060dbe:	6800      	ldr	r0, [r0, #0]
10060dc0:	1c49      	adds	r1, r1, #1
10060dc2:	2800      	cmp	r0, #0
10060dc4:	d1fb      	bne.n	10060dbe <Mem_Buff_get_chain_size+0x6>
10060dc6:	0148      	lsls	r0, r1, #5
10060dc8:	e000      	b.n	10060dcc <Mem_Buff_get_chain_size+0x14>
10060dca:	2000      	movs	r0, #0
10060dcc:	b280      	uxth	r0, r0
10060dce:	4770      	bx	lr

10060dd0 <Mem_Buff_resize>:
10060dd0:	b570      	push	{r4, r5, r6, lr}
10060dd2:	2400      	movs	r4, #0
10060dd4:	2900      	cmp	r1, #0
10060dd6:	d00a      	beq.n	10060dee <Mem_Buff_resize+0x1e>
10060dd8:	2600      	movs	r6, #0
10060dda:	460d      	mov	r5, r1
10060ddc:	6809      	ldr	r1, [r1, #0]
10060dde:	4633      	mov	r3, r6
10060de0:	3320      	adds	r3, #32
10060de2:	b29e      	uxth	r6, r3
10060de4:	4296      	cmp	r6, r2
10060de6:	d20e      	bcs.n	10060e06 <Mem_Buff_resize+0x36>
10060de8:	2900      	cmp	r1, #0
10060dea:	d1f6      	bne.n	10060dda <Mem_Buff_resize+0xa>
10060dec:	e001      	b.n	10060df2 <Mem_Buff_resize+0x22>
10060dee:	4623      	mov	r3, r4
10060df0:	4625      	mov	r5, r4
10060df2:	1ad1      	subs	r1, r2, r3
10060df4:	b289      	uxth	r1, r1
10060df6:	f7ff ffb1 	bl	10060d5c <Mem_Buff_get>
10060dfa:	6028      	str	r0, [r5, #0]
10060dfc:	2800      	cmp	r0, #0
10060dfe:	d10a      	bne.n	10060e16 <Mem_Buff_resize+0x46>
10060e00:	2079      	movs	r0, #121	@ 0x79
10060e02:	43c4      	mvns	r4, r0
10060e04:	e007      	b.n	10060e16 <Mem_Buff_resize+0x46>
10060e06:	2900      	cmp	r1, #0
10060e08:	d004      	beq.n	10060e14 <Mem_Buff_resize+0x44>
10060e0a:	f7ff ff8c 	bl	10060d26 <Mem_Buff_release>
10060e0e:	2400      	movs	r4, #0
10060e10:	602c      	str	r4, [r5, #0]
10060e12:	e000      	b.n	10060e16 <Mem_Buff_resize+0x46>
10060e14:	2400      	movs	r4, #0
10060e16:	b2e0      	uxtb	r0, r4
10060e18:	bd70      	pop	{r4, r5, r6, pc}

10060e1a <Mem_Buff_get_buff_off>:
10060e1a:	2900      	cmp	r1, #0
10060e1c:	d008      	beq.n	10060e30 <Mem_Buff_get_buff_off+0x16>
10060e1e:	2800      	cmp	r0, #0
10060e20:	d009      	beq.n	10060e36 <Mem_Buff_get_buff_off+0x1c>
10060e22:	b28b      	uxth	r3, r1
10060e24:	2b20      	cmp	r3, #32
10060e26:	d304      	bcc.n	10060e32 <Mem_Buff_get_buff_off+0x18>
10060e28:	6800      	ldr	r0, [r0, #0]
10060e2a:	3920      	subs	r1, #32
10060e2c:	040b      	lsls	r3, r1, #16
10060e2e:	d1f6      	bne.n	10060e1e <Mem_Buff_get_buff_off+0x4>
10060e30:	2100      	movs	r1, #0
10060e32:	8011      	strh	r1, [r2, #0]
10060e34:	4770      	bx	lr
10060e36:	2000      	movs	r0, #0
10060e38:	4770      	bx	lr

10060e3a <Mem_Buff_write>:
10060e3a:	b5f0      	push	{r4, r5, r6, r7, lr}
10060e3c:	b081      	sub	sp, #4
10060e3e:	4606      	mov	r6, r0
10060e40:	0950      	lsrs	r0, r2, #5
10060e42:	0604      	lsls	r4, r0, #24
10060e44:	d004      	beq.n	10060e50 <Mem_Buff_write+0x16>
10060e46:	2e00      	cmp	r6, #0
10060e48:	d02d      	beq.n	10060ea6 <Mem_Buff_write+0x6c>
10060e4a:	6836      	ldr	r6, [r6, #0]
10060e4c:	1e40      	subs	r0, r0, #1
10060e4e:	e7f8      	b.n	10060e42 <Mem_Buff_write+0x8>
10060e50:	461c      	mov	r4, r3
10060e52:	1e5b      	subs	r3, r3, #1
10060e54:	4620      	mov	r0, r4
10060e56:	4198      	sbcs	r0, r3
10060e58:	2c00      	cmp	r4, #0
10060e5a:	d01f      	beq.n	10060e9c <Mem_Buff_write+0x62>
10060e5c:	2e00      	cmp	r6, #0
10060e5e:	d01d      	beq.n	10060e9c <Mem_Buff_write+0x62>
10060e60:	201f      	movs	r0, #31
10060e62:	4002      	ands	r2, r0
10060e64:	2020      	movs	r0, #32
10060e66:	1a85      	subs	r5, r0, r2
10060e68:	b2a8      	uxth	r0, r5
10060e6a:	b2a3      	uxth	r3, r4
10060e6c:	4298      	cmp	r0, r3
10060e6e:	d300      	bcc.n	10060e72 <Mem_Buff_write+0x38>
10060e70:	4625      	mov	r5, r4
10060e72:	9500      	str	r5, [sp, #0]
10060e74:	b2af      	uxth	r7, r5
10060e76:	18b0      	adds	r0, r6, r2
10060e78:	1d00      	adds	r0, r0, #4
10060e7a:	463a      	mov	r2, r7
10060e7c:	460d      	mov	r5, r1
10060e7e:	f7f1 fc6d 	bl	1005275c <BLEPLAT_MemCpy>
10060e82:	9800      	ldr	r0, [sp, #0]
10060e84:	1a24      	subs	r4, r4, r0
10060e86:	b2a1      	uxth	r1, r4
10060e88:	1e4a      	subs	r2, r1, #1
10060e8a:	4608      	mov	r0, r1
10060e8c:	4190      	sbcs	r0, r2
10060e8e:	2900      	cmp	r1, #0
10060e90:	d004      	beq.n	10060e9c <Mem_Buff_write+0x62>
10060e92:	19e9      	adds	r1, r5, r7
10060e94:	6836      	ldr	r6, [r6, #0]
10060e96:	2200      	movs	r2, #0
10060e98:	2e00      	cmp	r6, #0
10060e9a:	d1e3      	bne.n	10060e64 <Mem_Buff_write+0x2a>
10060e9c:	2800      	cmp	r0, #0
10060e9e:	d003      	beq.n	10060ea8 <Mem_Buff_write+0x6e>
10060ea0:	207e      	movs	r0, #126	@ 0x7e
10060ea2:	43c0      	mvns	r0, r0
10060ea4:	e000      	b.n	10060ea8 <Mem_Buff_write+0x6e>
10060ea6:	2081      	movs	r0, #129	@ 0x81
10060ea8:	b2c0      	uxtb	r0, r0
10060eaa:	b001      	add	sp, #4
10060eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060eae <Mem_Buff_read>:
10060eae:	b5f0      	push	{r4, r5, r6, r7, lr}
10060eb0:	b081      	sub	sp, #4
10060eb2:	460d      	mov	r5, r1
10060eb4:	4606      	mov	r6, r0
10060eb6:	2a00      	cmp	r2, #0
10060eb8:	d008      	beq.n	10060ecc <Mem_Buff_read+0x1e>
10060eba:	2e00      	cmp	r6, #0
10060ebc:	d02a      	beq.n	10060f14 <Mem_Buff_read+0x66>
10060ebe:	b290      	uxth	r0, r2
10060ec0:	2820      	cmp	r0, #32
10060ec2:	d306      	bcc.n	10060ed2 <Mem_Buff_read+0x24>
10060ec4:	6836      	ldr	r6, [r6, #0]
10060ec6:	3a20      	subs	r2, #32
10060ec8:	0410      	lsls	r0, r2, #16
10060eca:	d1f6      	bne.n	10060eba <Mem_Buff_read+0xc>
10060ecc:	2e00      	cmp	r6, #0
10060ece:	d021      	beq.n	10060f14 <Mem_Buff_read+0x66>
10060ed0:	2200      	movs	r2, #0
10060ed2:	2b00      	cmp	r3, #0
10060ed4:	d020      	beq.n	10060f18 <Mem_Buff_read+0x6a>
10060ed6:	2020      	movs	r0, #32
10060ed8:	1a84      	subs	r4, r0, r2
10060eda:	b2a0      	uxth	r0, r4
10060edc:	b299      	uxth	r1, r3
10060ede:	4288      	cmp	r0, r1
10060ee0:	d300      	bcc.n	10060ee4 <Mem_Buff_read+0x36>
10060ee2:	461c      	mov	r4, r3
10060ee4:	b2a7      	uxth	r7, r4
10060ee6:	b290      	uxth	r0, r2
10060ee8:	1830      	adds	r0, r6, r0
10060eea:	1d01      	adds	r1, r0, #4
10060eec:	4628      	mov	r0, r5
10060eee:	463a      	mov	r2, r7
10060ef0:	9300      	str	r3, [sp, #0]
10060ef2:	f7f1 fc33 	bl	1005275c <BLEPLAT_MemCpy>
10060ef6:	9b00      	ldr	r3, [sp, #0]
10060ef8:	1b1b      	subs	r3, r3, r4
10060efa:	0418      	lsls	r0, r3, #16
10060efc:	d004      	beq.n	10060f08 <Mem_Buff_read+0x5a>
10060efe:	19ed      	adds	r5, r5, r7
10060f00:	6836      	ldr	r6, [r6, #0]
10060f02:	2200      	movs	r2, #0
10060f04:	2e00      	cmp	r6, #0
10060f06:	d1e6      	bne.n	10060ed6 <Mem_Buff_read+0x28>
10060f08:	b298      	uxth	r0, r3
10060f0a:	2800      	cmp	r0, #0
10060f0c:	d005      	beq.n	10060f1a <Mem_Buff_read+0x6c>
10060f0e:	207e      	movs	r0, #126	@ 0x7e
10060f10:	43c0      	mvns	r0, r0
10060f12:	e002      	b.n	10060f1a <Mem_Buff_read+0x6c>
10060f14:	2081      	movs	r0, #129	@ 0x81
10060f16:	e000      	b.n	10060f1a <Mem_Buff_read+0x6c>
10060f18:	2000      	movs	r0, #0
10060f1a:	b2c0      	uxtb	r0, r0
10060f1c:	b001      	add	sp, #4
10060f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060f20 <Mem_Buff_cmp>:
10060f20:	b5f0      	push	{r4, r5, r6, r7, lr}
10060f22:	b083      	sub	sp, #12
10060f24:	9102      	str	r1, [sp, #8]
10060f26:	4606      	mov	r6, r0
10060f28:	2a00      	cmp	r2, #0
10060f2a:	d008      	beq.n	10060f3e <Mem_Buff_cmp+0x1e>
10060f2c:	2e00      	cmp	r6, #0
10060f2e:	d033      	beq.n	10060f98 <Mem_Buff_cmp+0x78>
10060f30:	b290      	uxth	r0, r2
10060f32:	2820      	cmp	r0, #32
10060f34:	d306      	bcc.n	10060f44 <Mem_Buff_cmp+0x24>
10060f36:	6836      	ldr	r6, [r6, #0]
10060f38:	3a20      	subs	r2, #32
10060f3a:	0410      	lsls	r0, r2, #16
10060f3c:	d1f6      	bne.n	10060f2c <Mem_Buff_cmp+0xc>
10060f3e:	2e00      	cmp	r6, #0
10060f40:	d02a      	beq.n	10060f98 <Mem_Buff_cmp+0x78>
10060f42:	2200      	movs	r2, #0
10060f44:	2b00      	cmp	r3, #0
10060f46:	9301      	str	r3, [sp, #4]
10060f48:	d020      	beq.n	10060f8c <Mem_Buff_cmp+0x6c>
10060f4a:	2700      	movs	r7, #0
10060f4c:	461d      	mov	r5, r3
10060f4e:	b290      	uxth	r0, r2
10060f50:	281f      	cmp	r0, #31
10060f52:	d814      	bhi.n	10060f7e <Mem_Buff_cmp+0x5e>
10060f54:	2120      	movs	r1, #32
10060f56:	1a8c      	subs	r4, r1, r2
10060f58:	b2a1      	uxth	r1, r4
10060f5a:	b2aa      	uxth	r2, r5
10060f5c:	4291      	cmp	r1, r2
10060f5e:	d300      	bcc.n	10060f62 <Mem_Buff_cmp+0x42>
10060f60:	462c      	mov	r4, r5
10060f62:	b2a2      	uxth	r2, r4
10060f64:	b2b9      	uxth	r1, r7
10060f66:	9b02      	ldr	r3, [sp, #8]
10060f68:	1859      	adds	r1, r3, r1
10060f6a:	1830      	adds	r0, r6, r0
10060f6c:	1d00      	adds	r0, r0, #4
10060f6e:	f7f1 fc15 	bl	1005279c <BLEPLAT_MemCmp>
10060f72:	2800      	cmp	r0, #0
10060f74:	d10f      	bne.n	10060f96 <Mem_Buff_cmp+0x76>
10060f76:	1b2d      	subs	r5, r5, r4
10060f78:	19e7      	adds	r7, r4, r7
10060f7a:	2200      	movs	r2, #0
10060f7c:	e000      	b.n	10060f80 <Mem_Buff_cmp+0x60>
10060f7e:	3a20      	subs	r2, #32
10060f80:	0428      	lsls	r0, r5, #16
10060f82:	d004      	beq.n	10060f8e <Mem_Buff_cmp+0x6e>
10060f84:	6836      	ldr	r6, [r6, #0]
10060f86:	2e00      	cmp	r6, #0
10060f88:	d1e1      	bne.n	10060f4e <Mem_Buff_cmp+0x2e>
10060f8a:	e000      	b.n	10060f8e <Mem_Buff_cmp+0x6e>
10060f8c:	2700      	movs	r7, #0
10060f8e:	b2b8      	uxth	r0, r7
10060f90:	9b01      	ldr	r3, [sp, #4]
10060f92:	1a1b      	subs	r3, r3, r0
10060f94:	e000      	b.n	10060f98 <Mem_Buff_cmp+0x78>
10060f96:	4603      	mov	r3, r0
10060f98:	4618      	mov	r0, r3
10060f9a:	b003      	add	sp, #12
10060f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

10060f9e <Mem_Buff_block_copy>:
10060f9e:	b510      	push	{r4, lr}
10060fa0:	1e52      	subs	r2, r2, #1
10060fa2:	231f      	movs	r3, #31
10060fa4:	4313      	orrs	r3, r2
10060fa6:	b29a      	uxth	r2, r3
10060fa8:	1c53      	adds	r3, r2, #1
10060faa:	b29a      	uxth	r2, r3
10060fac:	429a      	cmp	r2, r3
10060fae:	d001      	beq.n	10060fb4 <Mem_Buff_block_copy+0x16>
10060fb0:	2200      	movs	r2, #0
10060fb2:	e00d      	b.n	10060fd0 <Mem_Buff_block_copy+0x32>
10060fb4:	0953      	lsrs	r3, r2, #5
10060fb6:	460a      	mov	r2, r1
10060fb8:	2100      	movs	r1, #0
10060fba:	1854      	adds	r4, r2, r1
10060fbc:	6864      	ldr	r4, [r4, #4]
10060fbe:	5044      	str	r4, [r0, r1]
10060fc0:	1d09      	adds	r1, r1, #4
10060fc2:	2920      	cmp	r1, #32
10060fc4:	d1f9      	bne.n	10060fba <Mem_Buff_block_copy+0x1c>
10060fc6:	6811      	ldr	r1, [r2, #0]
10060fc8:	3020      	adds	r0, #32
10060fca:	1e5b      	subs	r3, r3, #1
10060fcc:	041c      	lsls	r4, r3, #16
10060fce:	d1f2      	bne.n	10060fb6 <Mem_Buff_block_copy+0x18>
10060fd0:	4610      	mov	r0, r2
10060fd2:	bd10      	pop	{r4, pc}

10060fd4 <Mem_Buff_block_write>:
10060fd4:	b5b0      	push	{r4, r5, r7, lr}
10060fd6:	1e52      	subs	r2, r2, #1
10060fd8:	231f      	movs	r3, #31
10060fda:	4313      	orrs	r3, r2
10060fdc:	b29a      	uxth	r2, r3
10060fde:	1c53      	adds	r3, r2, #1
10060fe0:	b29a      	uxth	r2, r3
10060fe2:	429a      	cmp	r2, r3
10060fe4:	d10c      	bne.n	10061000 <Mem_Buff_block_write+0x2c>
10060fe6:	0952      	lsrs	r2, r2, #5
10060fe8:	1d03      	adds	r3, r0, #4
10060fea:	2400      	movs	r4, #0
10060fec:	590d      	ldr	r5, [r1, r4]
10060fee:	511d      	str	r5, [r3, r4]
10060ff0:	1d24      	adds	r4, r4, #4
10060ff2:	2c20      	cmp	r4, #32
10060ff4:	d1fa      	bne.n	10060fec <Mem_Buff_block_write+0x18>
10060ff6:	6800      	ldr	r0, [r0, #0]
10060ff8:	3120      	adds	r1, #32
10060ffa:	1e52      	subs	r2, r2, #1
10060ffc:	0413      	lsls	r3, r2, #16
10060ffe:	d1f3      	bne.n	10060fe8 <Mem_Buff_block_write+0x14>
10061000:	bdb0      	pop	{r4, r5, r7, pc}

10061002 <Mem_Buff_append>:
10061002:	4602      	mov	r2, r0
10061004:	6800      	ldr	r0, [r0, #0]
10061006:	2800      	cmp	r0, #0
10061008:	d1fb      	bne.n	10061002 <Mem_Buff_append>
1006100a:	6011      	str	r1, [r2, #0]
1006100c:	4770      	bx	lr
	...

10061010 <BlueNRG_Stack_Initialize_RAM_check>:
10061010:	b5f0      	push	{r4, r5, r6, r7, lr}
10061012:	b097      	sub	sp, #92	@ 0x5c
10061014:	4ce5      	ldr	r4, [pc, #916]	@ (100613ac <__arm_cp.0_4>)
10061016:	2067      	movs	r0, #103	@ 0x67
10061018:	43c5      	mvns	r5, r0
1006101a:	f7ed fe3d 	bl	1004ec98 <conn_supp_csr_ucfg>
1006101e:	4ee4      	ldr	r6, [pc, #912]	@ (100613b0 <__arm_cp.0_5>)
10061020:	2801      	cmp	r0, #1
10061022:	d002      	beq.n	1006102a <BlueNRG_Stack_Initialize_RAM_check+0x1a>
10061024:	7af0      	ldrb	r0, [r6, #11]
10061026:	2800      	cmp	r0, #0
10061028:	d010      	beq.n	1006104c <BlueNRG_Stack_Initialize_RAM_check+0x3c>
1006102a:	4627      	mov	r7, r4
1006102c:	462c      	mov	r4, r5
1006102e:	3438      	adds	r4, #56	@ 0x38
10061030:	f7ed fe32 	bl	1004ec98 <conn_supp_csr_ucfg>
10061034:	7af1      	ldrb	r1, [r6, #11]
10061036:	4361      	muls	r1, r4
10061038:	4378      	muls	r0, r7
1006103a:	1838      	adds	r0, r7, r0
1006103c:	1844      	adds	r4, r0, r1
1006103e:	f7ed fe2b 	bl	1004ec98 <conn_supp_csr_ucfg>
10061042:	7af1      	ldrb	r1, [r6, #11]
10061044:	4341      	muls	r1, r0
10061046:	48db      	ldr	r0, [pc, #876]	@ (100613b4 <__arm_cp.0_6>)
10061048:	4348      	muls	r0, r1
1006104a:	1824      	adds	r4, r4, r0
1006104c:	342e      	adds	r4, #46	@ 0x2e
1006104e:	f7ed fe23 	bl	1004ec98 <conn_supp_csr_ucfg>
10061052:	2801      	cmp	r0, #1
10061054:	d10e      	bne.n	10061074 <BlueNRG_Stack_Initialize_RAM_check+0x64>
10061056:	4628      	mov	r0, r5
10061058:	3060      	adds	r0, #96	@ 0x60
1006105a:	8931      	ldrh	r1, [r6, #8]
1006105c:	4341      	muls	r1, r0
1006105e:	4628      	mov	r0, r5
10061060:	3044      	adds	r0, #68	@ 0x44
10061062:	7ab2      	ldrb	r2, [r6, #10]
10061064:	4342      	muls	r2, r0
10061066:	1850      	adds	r0, r2, r1
10061068:	4629      	mov	r1, r5
1006106a:	3148      	adds	r1, #72	@ 0x48
1006106c:	7b32      	ldrb	r2, [r6, #12]
1006106e:	434a      	muls	r2, r1
10061070:	1880      	adds	r0, r0, r2
10061072:	e000      	b.n	10061076 <BlueNRG_Stack_Initialize_RAM_check+0x66>
10061074:	2000      	movs	r0, #0
10061076:	9003      	str	r0, [sp, #12]
10061078:	89f0      	ldrh	r0, [r6, #14]
1006107a:	900a      	str	r0, [sp, #40]	@ 0x28
1006107c:	f7f8 fb0a 	bl	10059694 <data_length_extension_csr_ucfg_weak>
10061080:	2801      	cmp	r0, #1
10061082:	d001      	beq.n	10061088 <BlueNRG_Stack_Initialize_RAM_check+0x78>
10061084:	f7fe fe92 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
10061088:	f7ed fdfe 	bl	1004ec88 <phy_upd_csr_ucfg>
1006108c:	2801      	cmp	r0, #1
1006108e:	9411      	str	r4, [sp, #68]	@ 0x44
10061090:	d109      	bne.n	100610a6 <BlueNRG_Stack_Initialize_RAM_check+0x96>
10061092:	462c      	mov	r4, r5
10061094:	3438      	adds	r4, #56	@ 0x38
10061096:	f7ed fdff 	bl	1004ec98 <conn_supp_csr_ucfg>
1006109a:	4360      	muls	r0, r4
1006109c:	7af1      	ldrb	r1, [r6, #11]
1006109e:	4341      	muls	r1, r0
100610a0:	3908      	subs	r1, #8
100610a2:	9109      	str	r1, [sp, #36]	@ 0x24
100610a4:	e001      	b.n	100610aa <BlueNRG_Stack_Initialize_RAM_check+0x9a>
100610a6:	2000      	movs	r0, #0
100610a8:	9009      	str	r0, [sp, #36]	@ 0x24
100610aa:	48f2      	ldr	r0, [pc, #968]	@ (10061474 <__arm_cp.0_3>)
100610ac:	304c      	adds	r0, #76	@ 0x4c
100610ae:	9013      	str	r0, [sp, #76]	@ 0x4c
100610b0:	f7fe fe7c 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
100610b4:	2801      	cmp	r0, #1
100610b6:	d015      	beq.n	100610e4 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
100610b8:	f7f8 faec 	bl	10059694 <data_length_extension_csr_ucfg_weak>
100610bc:	2801      	cmp	r0, #1
100610be:	d011      	beq.n	100610e4 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
100610c0:	2029      	movs	r0, #41	@ 0x29
100610c2:	5c30      	ldrb	r0, [r6, r0]
100610c4:	2800      	cmp	r0, #0
100610c6:	d10d      	bne.n	100610e4 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
100610c8:	2025      	movs	r0, #37	@ 0x25
100610ca:	5c30      	ldrb	r0, [r6, r0]
100610cc:	2800      	cmp	r0, #0
100610ce:	d109      	bne.n	100610e4 <BlueNRG_Stack_Initialize_RAM_check+0xd4>
100610d0:	2026      	movs	r0, #38	@ 0x26
100610d2:	5c30      	ldrb	r0, [r6, r0]
100610d4:	2800      	cmp	r0, #0
100610d6:	d002      	beq.n	100610de <BlueNRG_Stack_Initialize_RAM_check+0xce>
100610d8:	48e6      	ldr	r0, [pc, #920]	@ (10061474 <__arm_cp.0_3>)
100610da:	304c      	adds	r0, #76	@ 0x4c
100610dc:	e001      	b.n	100610e2 <BlueNRG_Stack_Initialize_RAM_check+0xd2>
100610de:	4628      	mov	r0, r5
100610e0:	3024      	adds	r0, #36	@ 0x24
100610e2:	9013      	str	r0, [sp, #76]	@ 0x4c
100610e4:	48e3      	ldr	r0, [pc, #908]	@ (10061474 <__arm_cp.0_3>)
100610e6:	306c      	adds	r0, #108	@ 0x6c
100610e8:	9012      	str	r0, [sp, #72]	@ 0x48
100610ea:	f7fe fe5f 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
100610ee:	2801      	cmp	r0, #1
100610f0:	d015      	beq.n	1006111e <BlueNRG_Stack_Initialize_RAM_check+0x10e>
100610f2:	f7f8 facf 	bl	10059694 <data_length_extension_csr_ucfg_weak>
100610f6:	2801      	cmp	r0, #1
100610f8:	d011      	beq.n	1006111e <BlueNRG_Stack_Initialize_RAM_check+0x10e>
100610fa:	2029      	movs	r0, #41	@ 0x29
100610fc:	5c30      	ldrb	r0, [r6, r0]
100610fe:	2800      	cmp	r0, #0
10061100:	d10d      	bne.n	1006111e <BlueNRG_Stack_Initialize_RAM_check+0x10e>
10061102:	2025      	movs	r0, #37	@ 0x25
10061104:	5c30      	ldrb	r0, [r6, r0]
10061106:	2800      	cmp	r0, #0
10061108:	d109      	bne.n	1006111e <BlueNRG_Stack_Initialize_RAM_check+0x10e>
1006110a:	2026      	movs	r0, #38	@ 0x26
1006110c:	5c30      	ldrb	r0, [r6, r0]
1006110e:	2800      	cmp	r0, #0
10061110:	d002      	beq.n	10061118 <BlueNRG_Stack_Initialize_RAM_check+0x108>
10061112:	48d8      	ldr	r0, [pc, #864]	@ (10061474 <__arm_cp.0_3>)
10061114:	306c      	adds	r0, #108	@ 0x6c
10061116:	e001      	b.n	1006111c <BlueNRG_Stack_Initialize_RAM_check+0x10c>
10061118:	4628      	mov	r0, r5
1006111a:	303c      	adds	r0, #60	@ 0x3c
1006111c:	9012      	str	r0, [sp, #72]	@ 0x48
1006111e:	f7fe fe45 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
10061122:	9010      	str	r0, [sp, #64]	@ 0x40
10061124:	7eb0      	ldrb	r0, [r6, #26]
10061126:	9000      	str	r0, [sp, #0]
10061128:	7ff0      	ldrb	r0, [r6, #31]
1006112a:	900f      	str	r0, [sp, #60]	@ 0x3c
1006112c:	f7ed fdb4 	bl	1004ec98 <conn_supp_csr_ucfg>
10061130:	9007      	str	r0, [sp, #28]
10061132:	7ff0      	ldrb	r0, [r6, #31]
10061134:	9001      	str	r0, [sp, #4]
10061136:	f7fa fd04 	bl	1005bb42 <llc_priv_controller_privacy_csr_ucfg_weak>
1006113a:	9008      	str	r0, [sp, #32]
1006113c:	7ff0      	ldrb	r0, [r6, #31]
1006113e:	9002      	str	r0, [sp, #8]
10061140:	f001 f965 	bl	1006240e <secure_connections_csr_ucfg_weak>
10061144:	2700      	movs	r7, #0
10061146:	f7f8 faab 	bl	100596a0 <scan_csr_ucfg_weak>
1006114a:	2801      	cmp	r0, #1
1006114c:	4638      	mov	r0, r7
1006114e:	9515      	str	r5, [sp, #84]	@ 0x54
10061150:	9716      	str	r7, [sp, #88]	@ 0x58
10061152:	d14f      	bne.n	100611f4 <BlueNRG_Stack_Initialize_RAM_check+0x1e4>
10061154:	7f70      	ldrb	r0, [r6, #29]
10061156:	280a      	cmp	r0, #10
10061158:	d300      	bcc.n	1006115c <BlueNRG_Stack_Initialize_RAM_check+0x14c>
1006115a:	200a      	movs	r0, #10
1006115c:	462c      	mov	r4, r5
1006115e:	3438      	adds	r4, #56	@ 0x38
10061160:	4344      	muls	r4, r0
10061162:	3cc0      	subs	r4, #192	@ 0xc0
10061164:	2500      	movs	r5, #0
10061166:	f7fa fce3 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1006116a:	2801      	cmp	r0, #1
1006116c:	462f      	mov	r7, r5
1006116e:	d120      	bne.n	100611b2 <BlueNRG_Stack_Initialize_RAM_check+0x1a2>
10061170:	f7ed fd92 	bl	1004ec98 <conn_supp_csr_ucfg>
10061174:	2801      	cmp	r0, #1
10061176:	950e      	str	r5, [sp, #56]	@ 0x38
10061178:	d003      	beq.n	10061182 <BlueNRG_Stack_Initialize_RAM_check+0x172>
1006117a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
1006117c:	4618      	mov	r0, r3
1006117e:	3054      	adds	r0, #84	@ 0x54
10061180:	e002      	b.n	10061188 <BlueNRG_Stack_Initialize_RAM_check+0x178>
10061182:	9b15      	ldr	r3, [sp, #84]	@ 0x54
10061184:	4618      	mov	r0, r3
10061186:	3048      	adds	r0, #72	@ 0x48
10061188:	49ba      	ldr	r1, [pc, #744]	@ (10061474 <__arm_cp.0_3>)
1006118a:	31e4      	adds	r1, #228	@ 0xe4
1006118c:	7fb2      	ldrb	r2, [r6, #30]
1006118e:	434a      	muls	r2, r1
10061190:	1810      	adds	r0, r2, r0
10061192:	4635      	mov	r5, r6
10061194:	461e      	mov	r6, r3
10061196:	3660      	adds	r6, #96	@ 0x60
10061198:	7fe9      	ldrb	r1, [r5, #31]
1006119a:	4632      	mov	r2, r6
1006119c:	408a      	lsls	r2, r1
1006119e:	1887      	adds	r7, r0, r2
100611a0:	f7ed fd7a 	bl	1004ec98 <conn_supp_csr_ucfg>
100611a4:	2801      	cmp	r0, #1
100611a6:	d102      	bne.n	100611ae <BlueNRG_Stack_Initialize_RAM_check+0x19e>
100611a8:	7ae8      	ldrb	r0, [r5, #11]
100611aa:	4346      	muls	r6, r0
100611ac:	19bf      	adds	r7, r7, r6
100611ae:	462e      	mov	r6, r5
100611b0:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
100611b2:	19e0      	adds	r0, r4, r7
100611b4:	9014      	str	r0, [sp, #80]	@ 0x50
100611b6:	f7fa fcbd 	bl	1005bb34 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
100611ba:	4607      	mov	r7, r0
100611bc:	f7fa fcb8 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100611c0:	4604      	mov	r4, r0
100611c2:	403c      	ands	r4, r7
100611c4:	f7ed fd68 	bl	1004ec98 <conn_supp_csr_ucfg>
100611c8:	4020      	ands	r0, r4
100611ca:	2801      	cmp	r0, #1
100611cc:	d108      	bne.n	100611e0 <BlueNRG_Stack_Initialize_RAM_check+0x1d0>
100611ce:	7ef0      	ldrb	r0, [r6, #27]
100611d0:	1e40      	subs	r0, r0, #1
100611d2:	2103      	movs	r1, #3
100611d4:	4301      	orrs	r1, r0
100611d6:	7fb0      	ldrb	r0, [r6, #30]
100611d8:	22b0      	movs	r2, #176	@ 0xb0
100611da:	4342      	muls	r2, r0
100611dc:	43d0      	mvns	r0, r2
100611de:	1a45      	subs	r5, r0, r1
100611e0:	9814      	ldr	r0, [sp, #80]	@ 0x50
100611e2:	1944      	adds	r4, r0, r5
100611e4:	f7fe fde2 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
100611e8:	4360      	muls	r0, r4
100611ea:	49a2      	ldr	r1, [pc, #648]	@ (10061474 <__arm_cp.0_3>)
100611ec:	1808      	adds	r0, r1, r0
100611ee:	302c      	adds	r0, #44	@ 0x2c
100611f0:	9d15      	ldr	r5, [sp, #84]	@ 0x54
100611f2:	9f16      	ldr	r7, [sp, #88]	@ 0x58
100611f4:	9006      	str	r0, [sp, #24]
100611f6:	f7ed fd4f 	bl	1004ec98 <conn_supp_csr_ucfg>
100611fa:	2801      	cmp	r0, #1
100611fc:	4639      	mov	r1, r7
100611fe:	d109      	bne.n	10061214 <BlueNRG_Stack_Initialize_RAM_check+0x204>
10061200:	f7f8 fc14 	bl	10059a2c <l2c_cos_csr_ucfg_weak>
10061204:	2801      	cmp	r0, #1
10061206:	4639      	mov	r1, r7
10061208:	d104      	bne.n	10061214 <BlueNRG_Stack_Initialize_RAM_check+0x204>
1006120a:	2022      	movs	r0, #34	@ 0x22
1006120c:	5c30      	ldrb	r0, [r6, r0]
1006120e:	4629      	mov	r1, r5
10061210:	3114      	adds	r1, #20
10061212:	4341      	muls	r1, r0
10061214:	9105      	str	r1, [sp, #20]
10061216:	f7fa fc8b 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
1006121a:	2801      	cmp	r0, #1
1006121c:	4638      	mov	r0, r7
1006121e:	d121      	bne.n	10061264 <BlueNRG_Stack_Initialize_RAM_check+0x254>
10061220:	4894      	ldr	r0, [pc, #592]	@ (10061474 <__arm_cp.0_3>)
10061222:	30d4      	adds	r0, #212	@ 0xd4
10061224:	7eb1      	ldrb	r1, [r6, #26]
10061226:	4341      	muls	r1, r0
10061228:	4628      	mov	r0, r5
1006122a:	3048      	adds	r0, #72	@ 0x48
1006122c:	7af2      	ldrb	r2, [r6, #11]
1006122e:	4342      	muls	r2, r0
10061230:	1854      	adds	r4, r2, r1
10061232:	2700      	movs	r7, #0
10061234:	f7fa fc7e 	bl	1005bb34 <llc_padv_periodic_adv_sync_wr_csr_ucfg_weak>
10061238:	2801      	cmp	r0, #1
1006123a:	d110      	bne.n	1006125e <BlueNRG_Stack_Initialize_RAM_check+0x24e>
1006123c:	f7ed fd2c 	bl	1004ec98 <conn_supp_csr_ucfg>
10061240:	2801      	cmp	r0, #1
10061242:	d10c      	bne.n	1006125e <BlueNRG_Stack_Initialize_RAM_check+0x24e>
10061244:	9a15      	ldr	r2, [sp, #84]	@ 0x54
10061246:	4610      	mov	r0, r2
10061248:	3058      	adds	r0, #88	@ 0x58
1006124a:	7f31      	ldrb	r1, [r6, #28]
1006124c:	4341      	muls	r1, r0
1006124e:	4610      	mov	r0, r2
10061250:	3060      	adds	r0, #96	@ 0x60
10061252:	7ef2      	ldrb	r2, [r6, #27]
10061254:	4342      	muls	r2, r0
10061256:	1850      	adds	r0, r2, r1
10061258:	3884      	subs	r0, #132	@ 0x84
1006125a:	7eb7      	ldrb	r7, [r6, #26]
1006125c:	4347      	muls	r7, r0
1006125e:	19e0      	adds	r0, r4, r7
10061260:	9d15      	ldr	r5, [sp, #84]	@ 0x54
10061262:	9f16      	ldr	r7, [sp, #88]	@ 0x58
10061264:	900e      	str	r0, [sp, #56]	@ 0x38
10061266:	f7f8 f9b9 	bl	100595dc <cte_csr_ucfg_weak>
1006126a:	2801      	cmp	r0, #1
1006126c:	4638      	mov	r0, r7
1006126e:	d133      	bne.n	100612d8 <BlueNRG_Stack_Initialize_RAM_check+0x2c8>
10061270:	f7ed fd12 	bl	1004ec98 <conn_supp_csr_ucfg>
10061274:	2801      	cmp	r0, #1
10061276:	d002      	beq.n	1006127e <BlueNRG_Stack_Initialize_RAM_check+0x26e>
10061278:	462f      	mov	r7, r5
1006127a:	375c      	adds	r7, #92	@ 0x5c
1006127c:	e004      	b.n	10061288 <BlueNRG_Stack_Initialize_RAM_check+0x278>
1006127e:	4628      	mov	r0, r5
10061280:	3060      	adds	r0, #96	@ 0x60
10061282:	7af7      	ldrb	r7, [r6, #11]
10061284:	4347      	muls	r7, r0
10061286:	3f0c      	subs	r7, #12
10061288:	2523      	movs	r5, #35	@ 0x23
1006128a:	5d70      	ldrb	r0, [r6, r5]
1006128c:	2400      	movs	r4, #0
1006128e:	2800      	cmp	r0, #0
10061290:	4620      	mov	r0, r4
10061292:	d005      	beq.n	100612a0 <BlueNRG_Stack_Initialize_RAM_check+0x290>
10061294:	f7ed fd00 	bl	1004ec98 <conn_supp_csr_ucfg>
10061298:	5d70      	ldrb	r0, [r6, r5]
1006129a:	4240      	negs	r0, r0
1006129c:	2103      	movs	r1, #3
1006129e:	4388      	bics	r0, r1
100612a0:	19c0      	adds	r0, r0, r7
100612a2:	2724      	movs	r7, #36	@ 0x24
100612a4:	5df1      	ldrb	r1, [r6, r7]
100612a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
100612a8:	3264      	adds	r2, #100	@ 0x64
100612aa:	434a      	muls	r2, r1
100612ac:	1885      	adds	r5, r0, r2
100612ae:	f7f8 f9f7 	bl	100596a0 <scan_csr_ucfg_weak>
100612b2:	2801      	cmp	r0, #1
100612b4:	d10d      	bne.n	100612d2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100612b6:	f7fe fd79 	bl	1005fdac <ext_adv_scan_enabled_ucfg_weak>
100612ba:	2801      	cmp	r0, #1
100612bc:	d109      	bne.n	100612d2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100612be:	f7fa fc37 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
100612c2:	2801      	cmp	r0, #1
100612c4:	d105      	bne.n	100612d2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100612c6:	5df4      	ldrb	r4, [r6, r7]
100612c8:	2c00      	cmp	r4, #0
100612ca:	9815      	ldr	r0, [sp, #84]	@ 0x54
100612cc:	d001      	beq.n	100612d2 <BlueNRG_Stack_Initialize_RAM_check+0x2c2>
100612ce:	4604      	mov	r4, r0
100612d0:	3450      	adds	r4, #80	@ 0x50
100612d2:	1928      	adds	r0, r5, r4
100612d4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
100612d6:	9f16      	ldr	r7, [sp, #88]	@ 0x58
100612d8:	900d      	str	r0, [sp, #52]	@ 0x34
100612da:	f7ed fcdd 	bl	1004ec98 <conn_supp_csr_ucfg>
100612de:	2801      	cmp	r0, #1
100612e0:	4639      	mov	r1, r7
100612e2:	d109      	bne.n	100612f8 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
100612e4:	f7f8 f9d8 	bl	10059698 <pcl_csr_ucfg_weak>
100612e8:	2801      	cmp	r0, #1
100612ea:	4639      	mov	r1, r7
100612ec:	d104      	bne.n	100612f8 <BlueNRG_Stack_Initialize_RAM_check+0x2e8>
100612ee:	4628      	mov	r0, r5
100612f0:	3048      	adds	r0, #72	@ 0x48
100612f2:	7af1      	ldrb	r1, [r6, #11]
100612f4:	4341      	muls	r1, r0
100612f6:	3914      	subs	r1, #20
100612f8:	910c      	str	r1, [sp, #48]	@ 0x30
100612fa:	f7ed fccd 	bl	1004ec98 <conn_supp_csr_ucfg>
100612fe:	2801      	cmp	r0, #1
10061300:	463a      	mov	r2, r7
10061302:	d108      	bne.n	10061316 <BlueNRG_Stack_Initialize_RAM_check+0x306>
10061304:	f7f8 f875 	bl	100593f2 <chc_csr_ucfg_weak>
10061308:	2801      	cmp	r0, #1
1006130a:	463a      	mov	r2, r7
1006130c:	d103      	bne.n	10061316 <BlueNRG_Stack_Initialize_RAM_check+0x306>
1006130e:	4628      	mov	r0, r5
10061310:	304c      	adds	r0, #76	@ 0x4c
10061312:	7af2      	ldrb	r2, [r6, #11]
10061314:	4342      	muls	r2, r0
10061316:	2026      	movs	r0, #38	@ 0x26
10061318:	5c31      	ldrb	r1, [r6, r0]
1006131a:	2025      	movs	r0, #37	@ 0x25
1006131c:	5c34      	ldrb	r4, [r6, r0]
1006131e:	1863      	adds	r3, r4, r1
10061320:	2029      	movs	r0, #41	@ 0x29
10061322:	5c30      	ldrb	r0, [r6, r0]
10061324:	9304      	str	r3, [sp, #16]
10061326:	2b00      	cmp	r3, #0
10061328:	9014      	str	r0, [sp, #80]	@ 0x50
1006132a:	d010      	beq.n	1006134e <BlueNRG_Stack_Initialize_RAM_check+0x33e>
1006132c:	2028      	movs	r0, #40	@ 0x28
1006132e:	5c33      	ldrb	r3, [r6, r0]
10061330:	4628      	mov	r0, r5
10061332:	3060      	adds	r0, #96	@ 0x60
10061334:	4358      	muls	r0, r3
10061336:	38f8      	subs	r0, #248	@ 0xf8
10061338:	4348      	muls	r0, r1
1006133a:	2327      	movs	r3, #39	@ 0x27
1006133c:	5cf3      	ldrb	r3, [r6, r3]
1006133e:	3554      	adds	r5, #84	@ 0x54
10061340:	435d      	muls	r5, r3
10061342:	4b4c      	ldr	r3, [pc, #304]	@ (10061474 <__arm_cp.0_3>)
10061344:	195b      	adds	r3, r3, r5
10061346:	3348      	adds	r3, #72	@ 0x48
10061348:	4363      	muls	r3, r4
1006134a:	181f      	adds	r7, r3, r0
1006134c:	9814      	ldr	r0, [sp, #80]	@ 0x50
1006134e:	2800      	cmp	r0, #0
10061350:	9716      	str	r7, [sp, #88]	@ 0x58
10061352:	920b      	str	r2, [sp, #44]	@ 0x2c
10061354:	d00d      	beq.n	10061372 <BlueNRG_Stack_Initialize_RAM_check+0x362>
10061356:	4602      	mov	r2, r0
10061358:	202a      	movs	r0, #42	@ 0x2a
1006135a:	5c30      	ldrb	r0, [r6, r0]
1006135c:	4d45      	ldr	r5, [pc, #276]	@ (10061474 <__arm_cp.0_3>)
1006135e:	462b      	mov	r3, r5
10061360:	33b0      	adds	r3, #176	@ 0xb0
10061362:	4343      	muls	r3, r0
10061364:	4637      	mov	r7, r6
10061366:	462e      	mov	r6, r5
10061368:	36c8      	adds	r6, #200	@ 0xc8
1006136a:	4356      	muls	r6, r2
1006136c:	18f3      	adds	r3, r6, r3
1006136e:	3b48      	subs	r3, #72	@ 0x48
10061370:	e003      	b.n	1006137a <BlueNRG_Stack_Initialize_RAM_check+0x36a>
10061372:	202a      	movs	r0, #42	@ 0x2a
10061374:	5c30      	ldrb	r0, [r6, r0]
10061376:	2300      	movs	r3, #0
10061378:	4637      	mov	r7, r6
1006137a:	2628      	movs	r6, #40	@ 0x28
1006137c:	5dbe      	ldrb	r6, [r7, r6]
1006137e:	4371      	muls	r1, r6
10061380:	1809      	adds	r1, r1, r0
10061382:	2627      	movs	r6, #39	@ 0x27
10061384:	463d      	mov	r5, r7
10061386:	5dbe      	ldrb	r6, [r7, r6]
10061388:	4374      	muls	r4, r6
1006138a:	1824      	adds	r4, r4, r0
1006138c:	1860      	adds	r0, r4, r1
1006138e:	d013      	beq.n	100613b8 <__arm_cp.0_6+0x4>
10061390:	9f15      	ldr	r7, [sp, #84]	@ 0x54
10061392:	463e      	mov	r6, r7
10061394:	364c      	adds	r6, #76	@ 0x4c
10061396:	4366      	muls	r6, r4
10061398:	463c      	mov	r4, r7
1006139a:	3434      	adds	r4, #52	@ 0x34
1006139c:	434c      	muls	r4, r1
1006139e:	19a1      	adds	r1, r4, r6
100613a0:	463c      	mov	r4, r7
100613a2:	345c      	adds	r4, #92	@ 0x5c
100613a4:	4344      	muls	r4, r0
100613a6:	190c      	adds	r4, r1, r4
100613a8:	3c14      	subs	r4, #20
100613aa:	e007      	b.n	100613bc <__arm_cp.0_6+0x8>

100613ac <__arm_cp.0_4>:
100613ac:	fffffc00 	.word	0xfffffc00

100613b0 <__arm_cp.0_5>:
100613b0:	20002ae4 	.word	0x20002ae4

100613b4 <__arm_cp.0_6>:
100613b4:	fffffd70 	.word	0xfffffd70
100613b8:	2400      	movs	r4, #0
100613ba:	9f15      	ldr	r7, [sp, #84]	@ 0x54
100613bc:	9903      	ldr	r1, [sp, #12]
100613be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
100613c0:	9811      	ldr	r0, [sp, #68]	@ 0x44
100613c2:	1808      	adds	r0, r1, r0
100613c4:	4639      	mov	r1, r7
100613c6:	3144      	adds	r1, #68	@ 0x44
100613c8:	4371      	muls	r1, r6
100613ca:	1840      	adds	r0, r0, r1
100613cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
100613ce:	1840      	adds	r0, r0, r1
100613d0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
100613d2:	1840      	adds	r0, r0, r1
100613d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
100613d6:	1841      	adds	r1, r0, r1
100613d8:	4638      	mov	r0, r7
100613da:	3060      	adds	r0, #96	@ 0x60
100613dc:	4606      	mov	r6, r0
100613de:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
100613e0:	4096      	lsls	r6, r2
100613e2:	1989      	adds	r1, r1, r6
100613e4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
100613e6:	2a01      	cmp	r2, #1
100613e8:	d106      	bne.n	100613f8 <__arm_cp.0_6+0x44>
100613ea:	4e22      	ldr	r6, [pc, #136]	@ (10061474 <__arm_cp.0_3>)
100613ec:	9a00      	ldr	r2, [sp, #0]
100613ee:	4356      	muls	r6, r2
100613f0:	1871      	adds	r1, r6, r1
100613f2:	2645      	movs	r6, #69	@ 0x45
100613f4:	00b6      	lsls	r6, r6, #2
100613f6:	1989      	adds	r1, r1, r6
100613f8:	462e      	mov	r6, r5
100613fa:	9d07      	ldr	r5, [sp, #28]
100613fc:	9a05      	ldr	r2, [sp, #20]
100613fe:	2d01      	cmp	r5, #1
10061400:	d102      	bne.n	10061408 <__arm_cp.0_6+0x54>
10061402:	9d01      	ldr	r5, [sp, #4]
10061404:	40a8      	lsls	r0, r5
10061406:	1809      	adds	r1, r1, r0
10061408:	9808      	ldr	r0, [sp, #32]
1006140a:	2801      	cmp	r0, #1
1006140c:	d105      	bne.n	1006141a <__arm_cp.0_6+0x66>
1006140e:	4638      	mov	r0, r7
10061410:	3018      	adds	r0, #24
10061412:	9d02      	ldr	r5, [sp, #8]
10061414:	40a8      	lsls	r0, r5
10061416:	1841      	adds	r1, r0, r1
10061418:	3970      	subs	r1, #112	@ 0x70
1006141a:	9806      	ldr	r0, [sp, #24]
1006141c:	9d04      	ldr	r5, [sp, #16]
1006141e:	1808      	adds	r0, r1, r0
10061420:	1880      	adds	r0, r0, r2
10061422:	990e      	ldr	r1, [sp, #56]	@ 0x38
10061424:	1840      	adds	r0, r0, r1
10061426:	990d      	ldr	r1, [sp, #52]	@ 0x34
10061428:	1840      	adds	r0, r0, r1
1006142a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006142c:	1840      	adds	r0, r0, r1
1006142e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10061430:	1840      	adds	r0, r0, r1
10061432:	9914      	ldr	r1, [sp, #80]	@ 0x50
10061434:	42cd      	cmn	r5, r1
10061436:	d001      	beq.n	1006143c <__arm_cp.0_6+0x88>
10061438:	1838      	adds	r0, r7, r0
1006143a:	3058      	adds	r0, #88	@ 0x58
1006143c:	9916      	ldr	r1, [sp, #88]	@ 0x58
1006143e:	1840      	adds	r0, r0, r1
10061440:	18c0      	adds	r0, r0, r3
10061442:	1904      	adds	r4, r0, r4
10061444:	f7f3 fed3 	bl	100551ee <log_csr_ucfg_weak>
10061448:	2801      	cmp	r0, #1
1006144a:	d100      	bne.n	1006144e <__arm_cp.0_6+0x9a>
1006144c:	19e4      	adds	r4, r4, r7
1006144e:	6870      	ldr	r0, [r6, #4]
10061450:	1820      	adds	r0, r4, r0
10061452:	2103      	movs	r1, #3
10061454:	43c9      	mvns	r1, r1
10061456:	8df2      	ldrh	r2, [r6, #46]	@ 0x2e
10061458:	1cd2      	adds	r2, r2, #3
1006145a:	400a      	ands	r2, r1
1006145c:	8db3      	ldrh	r3, [r6, #44]	@ 0x2c
1006145e:	1cdb      	adds	r3, r3, #3
10061460:	400b      	ands	r3, r1
10061462:	189a      	adds	r2, r3, r2
10061464:	8e33      	ldrh	r3, [r6, #48]	@ 0x30
10061466:	1cdb      	adds	r3, r3, #3
10061468:	400b      	ands	r3, r1
1006146a:	18d1      	adds	r1, r2, r3
1006146c:	1a40      	subs	r0, r0, r1
1006146e:	b017      	add	sp, #92	@ 0x5c
10061470:	bdf0      	pop	{r4, r5, r6, r7, pc}
10061472:	46c0      	nop			@ (mov r8, r8)

10061474 <__arm_cp.0_3>:
10061474:	fffffe90 	.word	0xfffffe90

10061478 <sdb_sap_get_security_records_count>:
10061478:	b580      	push	{r7, lr}
1006147a:	f001 f996 	bl	100627aa <nvm_sec_db_get_record_count>
1006147e:	bd80      	pop	{r7, pc}

10061480 <sdb_sap_add_security_record>:
10061480:	b5b0      	push	{r4, r5, r7, lr}
10061482:	b094      	sub	sp, #80	@ 0x50
10061484:	4604      	mov	r4, r0
10061486:	7841      	ldrb	r1, [r0, #1]
10061488:	2501      	movs	r5, #1
1006148a:	4029      	ands	r1, r5
1006148c:	303e      	adds	r0, #62	@ 0x3e
1006148e:	466a      	mov	r2, sp
10061490:	f000 f819 	bl	100614c6 <sdb_sap_read_security_record>
10061494:	2800      	cmp	r0, #0
10061496:	d10c      	bne.n	100614b2 <sdb_sap_add_security_record+0x32>
10061498:	4669      	mov	r1, sp
1006149a:	2250      	movs	r2, #80	@ 0x50
1006149c:	4620      	mov	r0, r4
1006149e:	f7f1 f97d 	bl	1005279c <BLEPLAT_MemCmp>
100614a2:	2800      	cmp	r0, #0
100614a4:	d008      	beq.n	100614b8 <sdb_sap_add_security_record+0x38>
100614a6:	4669      	mov	r1, sp
100614a8:	7848      	ldrb	r0, [r1, #1]
100614aa:	4028      	ands	r0, r5
100614ac:	313e      	adds	r1, #62	@ 0x3e
100614ae:	f000 f83b 	bl	10061528 <sdb_remove_security_record_by_address>
100614b2:	7860      	ldrb	r0, [r4, #1]
100614b4:	2810      	cmp	r0, #16
100614b6:	d201      	bcs.n	100614bc <sdb_sap_add_security_record+0x3c>
100614b8:	2000      	movs	r0, #0
100614ba:	e002      	b.n	100614c2 <sdb_sap_add_security_record+0x42>
100614bc:	4620      	mov	r0, r4
100614be:	f001 f969 	bl	10062794 <nvm_sec_db_add_record>
100614c2:	b014      	add	sp, #80	@ 0x50
100614c4:	bdb0      	pop	{r4, r5, r7, pc}

100614c6 <sdb_sap_read_security_record>:
100614c6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100614c8:	4614      	mov	r4, r2
100614ca:	4606      	mov	r6, r0
100614cc:	2501      	movs	r5, #1
100614ce:	9102      	str	r1, [sp, #8]
100614d0:	2901      	cmp	r1, #1
100614d2:	d105      	bne.n	100614e0 <sdb_sap_read_security_record+0x1a>
100614d4:	7970      	ldrb	r0, [r6, #5]
100614d6:	21c0      	movs	r1, #192	@ 0xc0
100614d8:	4001      	ands	r1, r0
100614da:	2940      	cmp	r1, #64	@ 0x40
100614dc:	d100      	bne.n	100614e0 <sdb_sap_read_security_record+0x1a>
100614de:	2500      	movs	r5, #0
100614e0:	f001 f940 	bl	10062764 <nvm_sec_db_read_init>
100614e4:	4620      	mov	r0, r4
100614e6:	303e      	adds	r0, #62	@ 0x3e
100614e8:	9001      	str	r0, [sp, #4]
100614ea:	4627      	mov	r7, r4
100614ec:	371e      	adds	r7, #30
100614ee:	4620      	mov	r0, r4
100614f0:	f001 f93e 	bl	10062770 <nvm_sec_db_read_next_record>
100614f4:	2800      	cmp	r0, #0
100614f6:	d115      	bne.n	10061524 <sdb_sap_read_security_record+0x5e>
100614f8:	2d00      	cmp	r5, #0
100614fa:	d00b      	beq.n	10061514 <sdb_sap_read_security_record+0x4e>
100614fc:	7860      	ldrb	r0, [r4, #1]
100614fe:	2101      	movs	r1, #1
10061500:	4001      	ands	r1, r0
10061502:	9802      	ldr	r0, [sp, #8]
10061504:	4281      	cmp	r1, r0
10061506:	d1f2      	bne.n	100614ee <sdb_sap_read_security_record+0x28>
10061508:	2206      	movs	r2, #6
1006150a:	9801      	ldr	r0, [sp, #4]
1006150c:	4631      	mov	r1, r6
1006150e:	f7f1 f945 	bl	1005279c <BLEPLAT_MemCmp>
10061512:	e003      	b.n	1006151c <sdb_sap_read_security_record+0x56>
10061514:	4630      	mov	r0, r6
10061516:	4639      	mov	r1, r7
10061518:	f000 f980 	bl	1006181c <smp_sap_crt_resolve_rpa>
1006151c:	2800      	cmp	r0, #0
1006151e:	d1e6      	bne.n	100614ee <sdb_sap_read_security_record+0x28>
10061520:	2000      	movs	r0, #0
10061522:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10061524:	20b3      	movs	r0, #179	@ 0xb3
10061526:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061528 <sdb_remove_security_record_by_address>:
10061528:	b5f0      	push	{r4, r5, r6, r7, lr}
1006152a:	b095      	sub	sp, #84	@ 0x54
1006152c:	460c      	mov	r4, r1
1006152e:	4605      	mov	r5, r0
10061530:	f001 f918 	bl	10062764 <nvm_sec_db_read_init>
10061534:	ae01      	add	r6, sp, #4
10061536:	363e      	adds	r6, #62	@ 0x3e
10061538:	27b3      	movs	r7, #179	@ 0xb3
1006153a:	a801      	add	r0, sp, #4
1006153c:	f001 f918 	bl	10062770 <nvm_sec_db_read_next_record>
10061540:	2800      	cmp	r0, #0
10061542:	d110      	bne.n	10061566 <sdb_remove_security_record_by_address+0x3e>
10061544:	2206      	movs	r2, #6
10061546:	4630      	mov	r0, r6
10061548:	4621      	mov	r1, r4
1006154a:	f7f1 f927 	bl	1005279c <BLEPLAT_MemCmp>
1006154e:	a901      	add	r1, sp, #4
10061550:	7849      	ldrb	r1, [r1, #1]
10061552:	2201      	movs	r2, #1
10061554:	400a      	ands	r2, r1
10061556:	42aa      	cmp	r2, r5
10061558:	d1ef      	bne.n	1006153a <sdb_remove_security_record_by_address+0x12>
1006155a:	2800      	cmp	r0, #0
1006155c:	d1ed      	bne.n	1006153a <sdb_remove_security_record_by_address+0x12>
1006155e:	f001 f937 	bl	100627d0 <nvm_discard_current_record>
10061562:	2700      	movs	r7, #0
10061564:	e7e9      	b.n	1006153a <sdb_remove_security_record_by_address+0x12>
10061566:	b2f8      	uxtb	r0, r7
10061568:	b015      	add	sp, #84	@ 0x54
1006156a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006156c <sdb_sap_read_security_record_sequential>:
1006156c:	b5b0      	push	{r4, r5, r7, lr}
1006156e:	4604      	mov	r4, r0
10061570:	4d07      	ldr	r5, [pc, #28]	@ (10061590 <__arm_cp.5_0>)
10061572:	7828      	ldrb	r0, [r5, #0]
10061574:	2800      	cmp	r0, #0
10061576:	d103      	bne.n	10061580 <sdb_sap_read_security_record_sequential+0x14>
10061578:	f001 f8f4 	bl	10062764 <nvm_sec_db_read_init>
1006157c:	2001      	movs	r0, #1
1006157e:	7028      	strb	r0, [r5, #0]
10061580:	4620      	mov	r0, r4
10061582:	f001 f8f5 	bl	10062770 <nvm_sec_db_read_next_record>
10061586:	2800      	cmp	r0, #0
10061588:	d001      	beq.n	1006158e <sdb_sap_read_security_record_sequential+0x22>
1006158a:	2100      	movs	r1, #0
1006158c:	7029      	strb	r1, [r5, #0]
1006158e:	bdb0      	pop	{r4, r5, r7, pc}

10061590 <__arm_cp.5_0>:
10061590:	20002b18 	.word	0x20002b18

10061594 <sdb_sap_del_bonded_device>:
10061594:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10061596:	460d      	mov	r5, r1
10061598:	4604      	mov	r4, r0
1006159a:	aa01      	add	r2, sp, #4
1006159c:	4608      	mov	r0, r1
1006159e:	4621      	mov	r1, r4
100615a0:	f000 f87f 	bl	100616a2 <sdb_gatt_search_record>
100615a4:	2800      	cmp	r0, #0
100615a6:	d101      	bne.n	100615ac <sdb_sap_del_bonded_device+0x18>
100615a8:	f001 f912 	bl	100627d0 <nvm_discard_current_record>
100615ac:	4628      	mov	r0, r5
100615ae:	4621      	mov	r1, r4
100615b0:	f7ff ffba 	bl	10061528 <sdb_remove_security_record_by_address>
100615b4:	b004      	add	sp, #16
100615b6:	bdb0      	pop	{r4, r5, r7, pc}

100615b8 <sdb_sap_read_security_record_matching>:
100615b8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100615ba:	4614      	mov	r4, r2
100615bc:	9101      	str	r1, [sp, #4]
100615be:	4606      	mov	r6, r0
100615c0:	f001 f8d0 	bl	10062764 <nvm_sec_db_read_init>
100615c4:	4627      	mov	r7, r4
100615c6:	3744      	adds	r7, #68	@ 0x44
100615c8:	4620      	mov	r0, r4
100615ca:	f001 f8d1 	bl	10062770 <nvm_sec_db_read_next_record>
100615ce:	2800      	cmp	r0, #0
100615d0:	d111      	bne.n	100615f6 <sdb_sap_read_security_record_matching+0x3e>
100615d2:	7860      	ldrb	r0, [r4, #1]
100615d4:	06c0      	lsls	r0, r0, #27
100615d6:	d5f7      	bpl.n	100615c8 <sdb_sap_read_security_record_matching+0x10>
100615d8:	ad02      	add	r5, sp, #8
100615da:	4638      	mov	r0, r7
100615dc:	9901      	ldr	r1, [sp, #4]
100615de:	462a      	mov	r2, r5
100615e0:	f000 f87a 	bl	100616d8 <smp_sap_crt_generate_ediv>
100615e4:	2202      	movs	r2, #2
100615e6:	4628      	mov	r0, r5
100615e8:	4631      	mov	r1, r6
100615ea:	f7f1 f8d7 	bl	1005279c <BLEPLAT_MemCmp>
100615ee:	2800      	cmp	r0, #0
100615f0:	d1ea      	bne.n	100615c8 <sdb_sap_read_security_record_matching+0x10>
100615f2:	2000      	movs	r0, #0
100615f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100615f6:	2081      	movs	r0, #129	@ 0x81
100615f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100615fa <SDB_sap_write_peer_bonded_gatt_client_data>:
100615fa:	b5f0      	push	{r4, r5, r6, r7, lr}
100615fc:	b085      	sub	sp, #20
100615fe:	461e      	mov	r6, r3
10061600:	4617      	mov	r7, r2
10061602:	460d      	mov	r5, r1
10061604:	4604      	mov	r4, r0
10061606:	aa02      	add	r2, sp, #8
10061608:	4608      	mov	r0, r1
1006160a:	4621      	mov	r1, r4
1006160c:	f000 f849 	bl	100616a2 <sdb_gatt_search_record>
10061610:	2800      	cmp	r0, #0
10061612:	d10b      	bne.n	1006162c <SDB_sap_write_peer_bonded_gatt_client_data+0x32>
10061614:	9804      	ldr	r0, [sp, #16]
10061616:	42b8      	cmp	r0, r7
10061618:	d106      	bne.n	10061628 <SDB_sap_write_peer_bonded_gatt_client_data+0x2e>
1006161a:	b2ba      	uxth	r2, r7
1006161c:	200c      	movs	r0, #12
1006161e:	4631      	mov	r1, r6
10061620:	f7f1 f84c 	bl	100526bc <BLEPLAT_NvmCompare>
10061624:	2800      	cmp	r0, #0
10061626:	d016      	beq.n	10061656 <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
10061628:	f001 f8d2 	bl	100627d0 <nvm_discard_current_record>
1006162c:	9601      	str	r6, [sp, #4]
1006162e:	ae02      	add	r6, sp, #8
10061630:	7035      	strb	r5, [r6, #0]
10061632:	1c70      	adds	r0, r6, #1
10061634:	2206      	movs	r2, #6
10061636:	4621      	mov	r1, r4
10061638:	f7f1 f890 	bl	1005275c <BLEPLAT_MemCpy>
1006163c:	9704      	str	r7, [sp, #16]
1006163e:	4630      	mov	r0, r6
10061640:	9901      	ldr	r1, [sp, #4]
10061642:	f001 f882 	bl	1006274a <nvm_gatt_db_update_record>
10061646:	2800      	cmp	r0, #0
10061648:	d005      	beq.n	10061656 <SDB_sap_write_peer_bonded_gatt_client_data+0x5c>
1006164a:	4606      	mov	r6, r0
1006164c:	4628      	mov	r0, r5
1006164e:	4621      	mov	r1, r4
10061650:	f7ff ff6a 	bl	10061528 <sdb_remove_security_record_by_address>
10061654:	e000      	b.n	10061658 <SDB_sap_write_peer_bonded_gatt_client_data+0x5e>
10061656:	2600      	movs	r6, #0
10061658:	4630      	mov	r0, r6
1006165a:	b005      	add	sp, #20
1006165c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006165e <SDB_sap_read_peer_bonded_gatt_client_data>:
1006165e:	b5b0      	push	{r4, r5, r7, lr}
10061660:	b098      	sub	sp, #96	@ 0x60
10061662:	461c      	mov	r4, r3
10061664:	4615      	mov	r5, r2
10061666:	aa01      	add	r2, sp, #4
10061668:	f7ff ff2d 	bl	100614c6 <sdb_sap_read_security_record>
1006166c:	2800      	cmp	r0, #0
1006166e:	d116      	bne.n	1006169e <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10061670:	a901      	add	r1, sp, #4
10061672:	784a      	ldrb	r2, [r1, #1]
10061674:	2001      	movs	r0, #1
10061676:	4010      	ands	r0, r2
10061678:	313e      	adds	r1, #62	@ 0x3e
1006167a:	aa15      	add	r2, sp, #84	@ 0x54
1006167c:	f000 f811 	bl	100616a2 <sdb_gatt_search_record>
10061680:	2800      	cmp	r0, #0
10061682:	d001      	beq.n	10061688 <SDB_sap_read_peer_bonded_gatt_client_data+0x2a>
10061684:	20b3      	movs	r0, #179	@ 0xb3
10061686:	e00a      	b.n	1006169e <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10061688:	6829      	ldr	r1, [r5, #0]
1006168a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
1006168c:	4288      	cmp	r0, r1
1006168e:	d901      	bls.n	10061694 <SDB_sap_read_peer_bonded_gatt_client_data+0x36>
10061690:	2087      	movs	r0, #135	@ 0x87
10061692:	e004      	b.n	1006169e <SDB_sap_read_peer_bonded_gatt_client_data+0x40>
10061694:	6028      	str	r0, [r5, #0]
10061696:	b281      	uxth	r1, r0
10061698:	4620      	mov	r0, r4
1006169a:	f001 f84b 	bl	10062734 <nvm_gatt_db_read_full_current_record>
1006169e:	b018      	add	sp, #96	@ 0x60
100616a0:	bdb0      	pop	{r4, r5, r7, pc}

100616a2 <sdb_gatt_search_record>:
100616a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100616a4:	4614      	mov	r4, r2
100616a6:	460d      	mov	r5, r1
100616a8:	4606      	mov	r6, r0
100616aa:	f001 f81d 	bl	100626e8 <nvm_gatt_db_read_init>
100616ae:	1c67      	adds	r7, r4, #1
100616b0:	4620      	mov	r0, r4
100616b2:	f001 f81f 	bl	100626f4 <nvm_gatt_db_read_next_record>
100616b6:	2800      	cmp	r0, #0
100616b8:	d10b      	bne.n	100616d2 <sdb_gatt_search_record+0x30>
100616ba:	2206      	movs	r2, #6
100616bc:	4628      	mov	r0, r5
100616be:	4639      	mov	r1, r7
100616c0:	f7f1 f86c 	bl	1005279c <BLEPLAT_MemCmp>
100616c4:	2800      	cmp	r0, #0
100616c6:	d1f3      	bne.n	100616b0 <sdb_gatt_search_record+0xe>
100616c8:	7820      	ldrb	r0, [r4, #0]
100616ca:	42b0      	cmp	r0, r6
100616cc:	d1f0      	bne.n	100616b0 <sdb_gatt_search_record+0xe>
100616ce:	2000      	movs	r0, #0
100616d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100616d2:	20b3      	movs	r0, #179	@ 0xb3
100616d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100616d8 <smp_sap_crt_generate_ediv>:
100616d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100616da:	b091      	sub	sp, #68	@ 0x44
100616dc:	9201      	str	r2, [sp, #4]
100616de:	9100      	str	r1, [sp, #0]
100616e0:	4605      	mov	r5, r0
100616e2:	a908      	add	r1, sp, #32
100616e4:	2003      	movs	r0, #3
100616e6:	8008      	strh	r0, [r1, #0]
100616e8:	aa07      	add	r2, sp, #28
100616ea:	2400      	movs	r4, #0
100616ec:	8014      	strh	r4, [r2, #0]
100616ee:	4814      	ldr	r0, [pc, #80]	@ (10061740 <__arm_cp.0_0>)
100616f0:	6800      	ldr	r0, [r0, #0]
100616f2:	3018      	adds	r0, #24
100616f4:	af03      	add	r7, sp, #12
100616f6:	463b      	mov	r3, r7
100616f8:	f000 f824 	bl	10061744 <smp_crt_diversify>
100616fc:	ae0d      	add	r6, sp, #52	@ 0x34
100616fe:	2210      	movs	r2, #16
10061700:	4630      	mov	r0, r6
10061702:	4621      	mov	r1, r4
10061704:	f7f1 f83a 	bl	1005277c <BLEPLAT_MemSet>
10061708:	2208      	movs	r2, #8
1006170a:	4630      	mov	r0, r6
1006170c:	9900      	ldr	r1, [sp, #0]
1006170e:	f7f1 f825 	bl	1005275c <BLEPLAT_MemCpy>
10061712:	ac09      	add	r4, sp, #36	@ 0x24
10061714:	4638      	mov	r0, r7
10061716:	4631      	mov	r1, r6
10061718:	4622      	mov	r2, r4
1006171a:	f7f7 ff61 	bl	100595e0 <hci_le_encrypt>
1006171e:	ae02      	add	r6, sp, #8
10061720:	2202      	movs	r2, #2
10061722:	4630      	mov	r0, r6
10061724:	4621      	mov	r1, r4
10061726:	f7f1 f819 	bl	1005275c <BLEPLAT_MemCpy>
1006172a:	7828      	ldrb	r0, [r5, #0]
1006172c:	9902      	ldr	r1, [sp, #8]
1006172e:	4041      	eors	r1, r0
10061730:	9a01      	ldr	r2, [sp, #4]
10061732:	7011      	strb	r1, [r2, #0]
10061734:	7870      	ldrb	r0, [r6, #1]
10061736:	7869      	ldrb	r1, [r5, #1]
10061738:	4041      	eors	r1, r0
1006173a:	7051      	strb	r1, [r2, #1]
1006173c:	b011      	add	sp, #68	@ 0x44
1006173e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061740 <__arm_cp.0_0>:
10061740:	20002a7c 	.word	0x20002a7c

10061744 <smp_crt_diversify>:
10061744:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
10061746:	780d      	ldrb	r5, [r1, #0]
10061748:	466c      	mov	r4, sp
1006174a:	7025      	strb	r5, [r4, #0]
1006174c:	7849      	ldrb	r1, [r1, #1]
1006174e:	7061      	strb	r1, [r4, #1]
10061750:	7811      	ldrb	r1, [r2, #0]
10061752:	70a1      	strb	r1, [r4, #2]
10061754:	7851      	ldrb	r1, [r2, #1]
10061756:	70e1      	strb	r1, [r4, #3]
10061758:	2100      	movs	r1, #0
1006175a:	9103      	str	r1, [sp, #12]
1006175c:	9102      	str	r1, [sp, #8]
1006175e:	9101      	str	r1, [sp, #4]
10061760:	4621      	mov	r1, r4
10061762:	461a      	mov	r2, r3
10061764:	f7f7 ff3c 	bl	100595e0 <hci_le_encrypt>
10061768:	bdbf      	pop	{r0, r1, r2, r3, r4, r5, r7, pc}
	...

1006176c <smp_sap_crt_generate_local_irk>:
1006176c:	b5e0      	push	{r5, r6, r7, lr}
1006176e:	4603      	mov	r3, r0
10061770:	a901      	add	r1, sp, #4
10061772:	2001      	movs	r0, #1
10061774:	8008      	strh	r0, [r1, #0]
10061776:	466a      	mov	r2, sp
10061778:	2000      	movs	r0, #0
1006177a:	8010      	strh	r0, [r2, #0]
1006177c:	4802      	ldr	r0, [pc, #8]	@ (10061788 <__arm_cp.2_0>)
1006177e:	6800      	ldr	r0, [r0, #0]
10061780:	3018      	adds	r0, #24
10061782:	f7ff ffdf 	bl	10061744 <smp_crt_diversify>
10061786:	bd8c      	pop	{r2, r3, r7, pc}

10061788 <__arm_cp.2_0>:
10061788:	20002a7c 	.word	0x20002a7c

1006178c <smp_sap_crt_generate_rpa>:
1006178c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006178e:	b087      	sub	sp, #28
10061790:	9000      	str	r0, [sp, #0]
10061792:	ae03      	add	r6, sp, #12
10061794:	4630      	mov	r0, r6
10061796:	f7ff ffe9 	bl	1006176c <smp_sap_crt_generate_local_irk>
1006179a:	2700      	movs	r7, #0
1006179c:	4638      	mov	r0, r7
1006179e:	f001 fb8d 	bl	10062ebc <Hal_Get_Random_Number>
100617a2:	0a01      	lsrs	r1, r0, #8
100617a4:	ad02      	add	r5, sp, #8
100617a6:	7069      	strb	r1, [r5, #1]
100617a8:	243f      	movs	r4, #63	@ 0x3f
100617aa:	4004      	ands	r4, r0
100617ac:	3440      	adds	r4, #64	@ 0x40
100617ae:	4638      	mov	r0, r7
100617b0:	f001 fb84 	bl	10062ebc <Hal_Get_Random_Number>
100617b4:	70ac      	strb	r4, [r5, #2]
100617b6:	7028      	strb	r0, [r5, #0]
100617b8:	af01      	add	r7, sp, #4
100617ba:	4630      	mov	r0, r6
100617bc:	4629      	mov	r1, r5
100617be:	463a      	mov	r2, r7
100617c0:	f000 f80e 	bl	100617e0 <smp_crt_calculate_hash>
100617c4:	2603      	movs	r6, #3
100617c6:	9c00      	ldr	r4, [sp, #0]
100617c8:	4620      	mov	r0, r4
100617ca:	4639      	mov	r1, r7
100617cc:	4632      	mov	r2, r6
100617ce:	f7f0 ffc5 	bl	1005275c <BLEPLAT_MemCpy>
100617d2:	1ce0      	adds	r0, r4, #3
100617d4:	4629      	mov	r1, r5
100617d6:	4632      	mov	r2, r6
100617d8:	f7f0 ffc0 	bl	1005275c <BLEPLAT_MemCpy>
100617dc:	b007      	add	sp, #28
100617de:	bdf0      	pop	{r4, r5, r6, r7, pc}

100617e0 <smp_crt_calculate_hash>:
100617e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100617e2:	b089      	sub	sp, #36	@ 0x24
100617e4:	9200      	str	r2, [sp, #0]
100617e6:	460f      	mov	r7, r1
100617e8:	4605      	mov	r5, r0
100617ea:	ae05      	add	r6, sp, #20
100617ec:	2100      	movs	r1, #0
100617ee:	2210      	movs	r2, #16
100617f0:	4630      	mov	r0, r6
100617f2:	f7f0 ffc3 	bl	1005277c <BLEPLAT_MemSet>
100617f6:	2403      	movs	r4, #3
100617f8:	4630      	mov	r0, r6
100617fa:	4639      	mov	r1, r7
100617fc:	4622      	mov	r2, r4
100617fe:	f7f0 ffad 	bl	1005275c <BLEPLAT_MemCpy>
10061802:	af01      	add	r7, sp, #4
10061804:	4628      	mov	r0, r5
10061806:	4631      	mov	r1, r6
10061808:	463a      	mov	r2, r7
1006180a:	f7f7 fee9 	bl	100595e0 <hci_le_encrypt>
1006180e:	9800      	ldr	r0, [sp, #0]
10061810:	4639      	mov	r1, r7
10061812:	4622      	mov	r2, r4
10061814:	f7f0 ffa2 	bl	1005275c <BLEPLAT_MemCpy>
10061818:	b009      	add	sp, #36	@ 0x24
1006181a:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006181c <smp_sap_crt_resolve_rpa>:
1006181c:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006181e:	460a      	mov	r2, r1
10061820:	4604      	mov	r4, r0
10061822:	1cc1      	adds	r1, r0, #3
10061824:	ad01      	add	r5, sp, #4
10061826:	4610      	mov	r0, r2
10061828:	462a      	mov	r2, r5
1006182a:	f7ff ffd9 	bl	100617e0 <smp_crt_calculate_hash>
1006182e:	2203      	movs	r2, #3
10061830:	4628      	mov	r0, r5
10061832:	4621      	mov	r1, r4
10061834:	f7f0 ffb2 	bl	1005279c <BLEPLAT_MemCmp>
10061838:	2800      	cmp	r0, #0
1006183a:	d000      	beq.n	1006183e <smp_sap_crt_resolve_rpa+0x22>
1006183c:	2081      	movs	r0, #129	@ 0x81
1006183e:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10061840 <smp_crt_s1_generate_stk>:
10061840:	b5f0      	push	{r4, r5, r6, r7, lr}
10061842:	b085      	sub	sp, #20
10061844:	9300      	str	r3, [sp, #0]
10061846:	4617      	mov	r7, r2
10061848:	4605      	mov	r5, r0
1006184a:	ae01      	add	r6, sp, #4
1006184c:	4630      	mov	r0, r6
1006184e:	3008      	adds	r0, #8
10061850:	2408      	movs	r4, #8
10061852:	4622      	mov	r2, r4
10061854:	f7f0 ff82 	bl	1005275c <BLEPLAT_MemCpy>
10061858:	4630      	mov	r0, r6
1006185a:	4639      	mov	r1, r7
1006185c:	4622      	mov	r2, r4
1006185e:	f7f0 ff7d 	bl	1005275c <BLEPLAT_MemCpy>
10061862:	4628      	mov	r0, r5
10061864:	4631      	mov	r1, r6
10061866:	9a00      	ldr	r2, [sp, #0]
10061868:	f7f7 feba 	bl	100595e0 <hci_le_encrypt>
1006186c:	b005      	add	sp, #20
1006186e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10061870 <smp_crt_generate_csrk>:
10061870:	b5e0      	push	{r5, r6, r7, lr}
10061872:	460b      	mov	r3, r1
10061874:	4601      	mov	r1, r0
10061876:	aa01      	add	r2, sp, #4
10061878:	2001      	movs	r0, #1
1006187a:	8010      	strh	r0, [r2, #0]
1006187c:	4802      	ldr	r0, [pc, #8]	@ (10061888 <__arm_cp.7_0>)
1006187e:	6800      	ldr	r0, [r0, #0]
10061880:	3008      	adds	r0, #8
10061882:	f7ff ff5f 	bl	10061744 <smp_crt_diversify>
10061886:	bd8c      	pop	{r2, r3, r7, pc}

10061888 <__arm_cp.7_0>:
10061888:	20002a7c 	.word	0x20002a7c

1006188c <smp_crt_generate_cmac_tag>:
1006188c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006188e:	b095      	sub	sp, #84	@ 0x54
10061890:	9301      	str	r3, [sp, #4]
10061892:	4617      	mov	r7, r2
10061894:	9103      	str	r1, [sp, #12]
10061896:	2500      	movs	r5, #0
10061898:	9514      	str	r5, [sp, #80]	@ 0x50
1006189a:	9513      	str	r5, [sp, #76]	@ 0x4c
1006189c:	9512      	str	r5, [sp, #72]	@ 0x48
1006189e:	9511      	str	r5, [sp, #68]	@ 0x44
100618a0:	a911      	add	r1, sp, #68	@ 0x44
100618a2:	ac0d      	add	r4, sp, #52	@ 0x34
100618a4:	9004      	str	r0, [sp, #16]
100618a6:	4622      	mov	r2, r4
100618a8:	f7f7 fe9a 	bl	100595e0 <hci_le_encrypt>
100618ac:	200f      	movs	r0, #15
100618ae:	9002      	str	r0, [sp, #8]
100618b0:	5626      	ldrsb	r6, [r4, r0]
100618b2:	a909      	add	r1, sp, #36	@ 0x24
100618b4:	4620      	mov	r0, r4
100618b6:	f000 f885 	bl	100619c4 <smp_crt_left_shift>
100618ba:	2e00      	cmp	r6, #0
100618bc:	d467      	bmi.n	1006198e <smp_crt_generate_cmac_tag+0x102>
100618be:	a809      	add	r0, sp, #36	@ 0x24
100618c0:	9902      	ldr	r1, [sp, #8]
100618c2:	5644      	ldrsb	r4, [r0, r1]
100618c4:	a905      	add	r1, sp, #20
100618c6:	f000 f87d 	bl	100619c4 <smp_crt_left_shift>
100618ca:	2c00      	cmp	r4, #0
100618cc:	d46c      	bmi.n	100619a8 <smp_crt_generate_cmac_tag+0x11c>
100618ce:	a811      	add	r0, sp, #68	@ 0x44
100618d0:	2400      	movs	r4, #0
100618d2:	2210      	movs	r2, #16
100618d4:	4621      	mov	r1, r4
100618d6:	f7f0 ff51 	bl	1005277c <BLEPLAT_MemSet>
100618da:	b2fd      	uxtb	r5, r7
100618dc:	2d11      	cmp	r5, #17
100618de:	d321      	bcc.n	10061924 <smp_crt_generate_cmac_tag+0x98>
100618e0:	1d20      	adds	r0, r4, #4
100618e2:	b281      	uxth	r1, r0
100618e4:	2210      	movs	r2, #16
100618e6:	ab0d      	add	r3, sp, #52	@ 0x34
100618e8:	9803      	ldr	r0, [sp, #12]
100618ea:	f7f3 faeb 	bl	10054ec4 <ACL_pkt_read>
100618ee:	2000      	movs	r0, #0
100618f0:	2810      	cmp	r0, #16
100618f2:	d007      	beq.n	10061904 <smp_crt_generate_cmac_tag+0x78>
100618f4:	a90d      	add	r1, sp, #52	@ 0x34
100618f6:	5c09      	ldrb	r1, [r1, r0]
100618f8:	aa11      	add	r2, sp, #68	@ 0x44
100618fa:	5c13      	ldrb	r3, [r2, r0]
100618fc:	404b      	eors	r3, r1
100618fe:	5413      	strb	r3, [r2, r0]
10061900:	1c40      	adds	r0, r0, #1
10061902:	e7f5      	b.n	100618f0 <smp_crt_generate_cmac_tag+0x64>
10061904:	ad11      	add	r5, sp, #68	@ 0x44
10061906:	ae0d      	add	r6, sp, #52	@ 0x34
10061908:	9804      	ldr	r0, [sp, #16]
1006190a:	4629      	mov	r1, r5
1006190c:	4632      	mov	r2, r6
1006190e:	f7f7 fe67 	bl	100595e0 <hci_le_encrypt>
10061912:	2210      	movs	r2, #16
10061914:	4628      	mov	r0, r5
10061916:	4631      	mov	r1, r6
10061918:	f7f0 ff20 	bl	1005275c <BLEPLAT_MemCpy>
1006191c:	3f10      	subs	r7, #16
1006191e:	3410      	adds	r4, #16
10061920:	b2a4      	uxth	r4, r4
10061922:	e7da      	b.n	100618da <smp_crt_generate_cmac_tag+0x4e>
10061924:	2d10      	cmp	r5, #16
10061926:	d108      	bne.n	1006193a <smp_crt_generate_cmac_tag+0xae>
10061928:	1d20      	adds	r0, r4, #4
1006192a:	b281      	uxth	r1, r0
1006192c:	2210      	movs	r2, #16
1006192e:	ab0d      	add	r3, sp, #52	@ 0x34
10061930:	9803      	ldr	r0, [sp, #12]
10061932:	f7f3 fac7 	bl	10054ec4 <ACL_pkt_read>
10061936:	a809      	add	r0, sp, #36	@ 0x24
10061938:	e014      	b.n	10061964 <smp_crt_generate_cmac_tag+0xd8>
1006193a:	a80d      	add	r0, sp, #52	@ 0x34
1006193c:	2100      	movs	r1, #0
1006193e:	2210      	movs	r2, #16
10061940:	f7f0 ff1c 	bl	1005277c <BLEPLAT_MemSet>
10061944:	0638      	lsls	r0, r7, #24
10061946:	d008      	beq.n	1006195a <smp_crt_generate_cmac_tag+0xce>
10061948:	a80d      	add	r0, sp, #52	@ 0x34
1006194a:	1b43      	subs	r3, r0, r5
1006194c:	3310      	adds	r3, #16
1006194e:	1d20      	adds	r0, r4, #4
10061950:	b281      	uxth	r1, r0
10061952:	9803      	ldr	r0, [sp, #12]
10061954:	462a      	mov	r2, r5
10061956:	f7f3 fab5 	bl	10054ec4 <ACL_pkt_read>
1006195a:	a80d      	add	r0, sp, #52	@ 0x34
1006195c:	1b40      	subs	r0, r0, r5
1006195e:	2180      	movs	r1, #128	@ 0x80
10061960:	73c1      	strb	r1, [r0, #15]
10061962:	a805      	add	r0, sp, #20
10061964:	9a01      	ldr	r2, [sp, #4]
10061966:	2100      	movs	r1, #0
10061968:	2910      	cmp	r1, #16
1006196a:	d009      	beq.n	10061980 <smp_crt_generate_cmac_tag+0xf4>
1006196c:	ab0d      	add	r3, sp, #52	@ 0x34
1006196e:	5c5c      	ldrb	r4, [r3, r1]
10061970:	5c43      	ldrb	r3, [r0, r1]
10061972:	4063      	eors	r3, r4
10061974:	ad11      	add	r5, sp, #68	@ 0x44
10061976:	5c6c      	ldrb	r4, [r5, r1]
10061978:	405c      	eors	r4, r3
1006197a:	546c      	strb	r4, [r5, r1]
1006197c:	1c49      	adds	r1, r1, #1
1006197e:	e7f3      	b.n	10061968 <smp_crt_generate_cmac_tag+0xdc>
10061980:	a911      	add	r1, sp, #68	@ 0x44
10061982:	9804      	ldr	r0, [sp, #16]
10061984:	f7f7 fe2c 	bl	100595e0 <hci_le_encrypt>
10061988:	2000      	movs	r0, #0
1006198a:	b015      	add	sp, #84	@ 0x54
1006198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006198e:	a811      	add	r0, sp, #68	@ 0x44
10061990:	2187      	movs	r1, #135	@ 0x87
10061992:	7001      	strb	r1, [r0, #0]
10061994:	2d0f      	cmp	r5, #15
10061996:	d092      	beq.n	100618be <smp_crt_generate_cmac_tag+0x32>
10061998:	a809      	add	r0, sp, #36	@ 0x24
1006199a:	5d41      	ldrb	r1, [r0, r5]
1006199c:	aa11      	add	r2, sp, #68	@ 0x44
1006199e:	5d52      	ldrb	r2, [r2, r5]
100619a0:	404a      	eors	r2, r1
100619a2:	5542      	strb	r2, [r0, r5]
100619a4:	1c6d      	adds	r5, r5, #1
100619a6:	e7f5      	b.n	10061994 <smp_crt_generate_cmac_tag+0x108>
100619a8:	a811      	add	r0, sp, #68	@ 0x44
100619aa:	2187      	movs	r1, #135	@ 0x87
100619ac:	7001      	strb	r1, [r0, #0]
100619ae:	2000      	movs	r0, #0
100619b0:	280f      	cmp	r0, #15
100619b2:	d08c      	beq.n	100618ce <smp_crt_generate_cmac_tag+0x42>
100619b4:	a905      	add	r1, sp, #20
100619b6:	5c0a      	ldrb	r2, [r1, r0]
100619b8:	ab11      	add	r3, sp, #68	@ 0x44
100619ba:	5c1b      	ldrb	r3, [r3, r0]
100619bc:	4053      	eors	r3, r2
100619be:	540b      	strb	r3, [r1, r0]
100619c0:	1c40      	adds	r0, r0, #1
100619c2:	e7f5      	b.n	100619b0 <smp_crt_generate_cmac_tag+0x124>

100619c4 <smp_crt_left_shift>:
100619c4:	b510      	push	{r4, lr}
100619c6:	7802      	ldrb	r2, [r0, #0]
100619c8:	0052      	lsls	r2, r2, #1
100619ca:	700a      	strb	r2, [r1, #0]
100619cc:	1c49      	adds	r1, r1, #1
100619ce:	2200      	movs	r2, #0
100619d0:	2a0f      	cmp	r2, #15
100619d2:	d00b      	beq.n	100619ec <smp_crt_left_shift+0x28>
100619d4:	1883      	adds	r3, r0, r2
100619d6:	785b      	ldrb	r3, [r3, #1]
100619d8:	005b      	lsls	r3, r3, #1
100619da:	548b      	strb	r3, [r1, r2]
100619dc:	5684      	ldrsb	r4, [r0, r2]
100619de:	2c00      	cmp	r4, #0
100619e0:	d502      	bpl.n	100619e8 <smp_crt_left_shift+0x24>
100619e2:	2401      	movs	r4, #1
100619e4:	4323      	orrs	r3, r4
100619e6:	548b      	strb	r3, [r1, r2]
100619e8:	1c52      	adds	r2, r2, #1
100619ea:	e7f1      	b.n	100619d0 <smp_crt_left_shift+0xc>
100619ec:	bd10      	pop	{r4, pc}

100619ee <smp_debug_trudy__set_config>:
100619ee:	200c      	movs	r0, #12
100619f0:	4770      	bx	lr
	...

100619f4 <smp_fsm_process_actions_wrt_state_tsk>:
100619f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100619f6:	2700      	movs	r7, #0
100619f8:	4b6b      	ldr	r3, [pc, #428]	@ (10061ba8 <__arm_cp.0_0>)
100619fa:	4a6c      	ldr	r2, [pc, #432]	@ (10061bac <__arm_cp.0_1>)
100619fc:	463d      	mov	r5, r7
100619fe:	6818      	ldr	r0, [r3, #0]
10061a00:	2134      	movs	r1, #52	@ 0x34
10061a02:	5c40      	ldrb	r0, [r0, r1]
10061a04:	4285      	cmp	r5, r0
10061a06:	d300      	bcc.n	10061a0a <smp_fsm_process_actions_wrt_state_tsk+0x16>
10061a08:	e0cd      	b.n	10061ba6 <smp_fsm_process_actions_wrt_state_tsk+0x1b2>
10061a0a:	6810      	ldr	r0, [r2, #0]
10061a0c:	21a4      	movs	r1, #164	@ 0xa4
10061a0e:	5840      	ldr	r0, [r0, r1]
10061a10:	2800      	cmp	r0, #0
10061a12:	d100      	bne.n	10061a16 <smp_fsm_process_actions_wrt_state_tsk+0x22>
10061a14:	e0b2      	b.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a16:	19c4      	adds	r4, r0, r7
10061a18:	8920      	ldrh	r0, [r4, #8]
10061a1a:	2800      	cmp	r0, #0
10061a1c:	d100      	bne.n	10061a20 <smp_fsm_process_actions_wrt_state_tsk+0x2c>
10061a1e:	e0ad      	b.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a20:	7aa0      	ldrb	r0, [r4, #10]
10061a22:	4601      	mov	r1, r0
10061a24:	39d1      	subs	r1, #209	@ 0xd1
10061a26:	2905      	cmp	r1, #5
10061a28:	d35d      	bcc.n	10061ae6 <smp_fsm_process_actions_wrt_state_tsk+0xf2>
10061a2a:	2800      	cmp	r0, #0
10061a2c:	d100      	bne.n	10061a30 <smp_fsm_process_actions_wrt_state_tsk+0x3c>
10061a2e:	e0a5      	b.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a30:	28fe      	cmp	r0, #254	@ 0xfe
10061a32:	d100      	bne.n	10061a36 <smp_fsm_process_actions_wrt_state_tsk+0x42>
10061a34:	e08a      	b.n	10061b4c <smp_fsm_process_actions_wrt_state_tsk+0x158>
10061a36:	28a2      	cmp	r0, #162	@ 0xa2
10061a38:	d059      	beq.n	10061aee <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10061a3a:	28aa      	cmp	r0, #170	@ 0xaa
10061a3c:	d100      	bne.n	10061a40 <smp_fsm_process_actions_wrt_state_tsk+0x4c>
10061a3e:	e081      	b.n	10061b44 <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061a40:	28b2      	cmp	r0, #178	@ 0xb2
10061a42:	d054      	beq.n	10061aee <smp_fsm_process_actions_wrt_state_tsk+0xfa>
10061a44:	28b4      	cmp	r0, #180	@ 0xb4
10061a46:	d100      	bne.n	10061a4a <smp_fsm_process_actions_wrt_state_tsk+0x56>
10061a48:	e08a      	b.n	10061b60 <smp_fsm_process_actions_wrt_state_tsk+0x16c>
10061a4a:	28ba      	cmp	r0, #186	@ 0xba
10061a4c:	d07a      	beq.n	10061b44 <smp_fsm_process_actions_wrt_state_tsk+0x150>
10061a4e:	28bf      	cmp	r0, #191	@ 0xbf
10061a50:	d100      	bne.n	10061a54 <smp_fsm_process_actions_wrt_state_tsk+0x60>
10061a52:	e089      	b.n	10061b68 <smp_fsm_process_actions_wrt_state_tsk+0x174>
10061a54:	28f0      	cmp	r0, #240	@ 0xf0
10061a56:	d100      	bne.n	10061a5a <smp_fsm_process_actions_wrt_state_tsk+0x66>
10061a58:	e08b      	b.n	10061b72 <smp_fsm_process_actions_wrt_state_tsk+0x17e>
10061a5a:	2810      	cmp	r0, #16
10061a5c:	d000      	beq.n	10061a60 <smp_fsm_process_actions_wrt_state_tsk+0x6c>
10061a5e:	e090      	b.n	10061b82 <smp_fsm_process_actions_wrt_state_tsk+0x18e>
10061a60:	2101      	movs	r1, #1
10061a62:	4620      	mov	r0, r4
10061a64:	f004 fcb8 	bl	100663d8 <smp_dep_sdb_find_bonding_record_by_conn_addr>
10061a68:	2800      	cmp	r0, #0
10061a6a:	d100      	bne.n	10061a6e <smp_fsm_process_actions_wrt_state_tsk+0x7a>
10061a6c:	e096      	b.n	10061b9c <smp_fsm_process_actions_wrt_state_tsk+0x1a8>
10061a6e:	2600      	movs	r6, #0
10061a70:	72a6      	strb	r6, [r4, #10]
10061a72:	f7f4 fc5b 	bl	1005632c <GapIsPrivacySupported>
10061a76:	2800      	cmp	r0, #0
10061a78:	4b4b      	ldr	r3, [pc, #300]	@ (10061ba8 <__arm_cp.0_0>)
10061a7a:	4a4c      	ldr	r2, [pc, #304]	@ (10061bac <__arm_cp.0_1>)
10061a7c:	d07e      	beq.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a7e:	2060      	movs	r0, #96	@ 0x60
10061a80:	5c20      	ldrb	r0, [r4, r0]
10061a82:	07c0      	lsls	r0, r0, #31
10061a84:	d07a      	beq.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a86:	f004 fc18 	bl	100662ba <smp_dep_sdb_get_bonding_records_count>
10061a8a:	4a48      	ldr	r2, [pc, #288]	@ (10061bac <__arm_cp.0_1>)
10061a8c:	4b46      	ldr	r3, [pc, #280]	@ (10061ba8 <__arm_cp.0_0>)
10061a8e:	2800      	cmp	r0, #0
10061a90:	d074      	beq.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a92:	79e0      	ldrb	r0, [r4, #7]
10061a94:	21c0      	movs	r1, #192	@ 0xc0
10061a96:	4001      	ands	r1, r0
10061a98:	2940      	cmp	r1, #64	@ 0x40
10061a9a:	d16f      	bne.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061a9c:	4844      	ldr	r0, [pc, #272]	@ (10061bb0 <__arm_cp.0_2>)
10061a9e:	6800      	ldr	r0, [r0, #0]
10061aa0:	214f      	movs	r1, #79	@ 0x4f
10061aa2:	5c40      	ldrb	r0, [r0, r1]
10061aa4:	0700      	lsls	r0, r0, #28
10061aa6:	d569      	bpl.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061aa8:	8924      	ldrh	r4, [r4, #8]
10061aaa:	4842      	ldr	r0, [pc, #264]	@ (10061bb4 <__arm_cp.0_3>)
10061aac:	6800      	ldr	r0, [r0, #0]
10061aae:	6980      	ldr	r0, [r0, #24]
10061ab0:	2248      	movs	r2, #72	@ 0x48
10061ab2:	2102      	movs	r1, #2
10061ab4:	460b      	mov	r3, r1
10061ab6:	f7f3 fb9d 	bl	100551f4 <aci_event_fifo_push_header>
10061aba:	4a3c      	ldr	r2, [pc, #240]	@ (10061bac <__arm_cp.0_1>)
10061abc:	4b3a      	ldr	r3, [pc, #232]	@ (10061ba8 <__arm_cp.0_0>)
10061abe:	2800      	cmp	r0, #0
10061ac0:	d05c      	beq.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061ac2:	4601      	mov	r1, r0
10061ac4:	2004      	movs	r0, #4
10061ac6:	7248      	strb	r0, [r1, #9]
10061ac8:	2208      	movs	r2, #8
10061aca:	720a      	strb	r2, [r1, #8]
10061acc:	71ce      	strb	r6, [r1, #7]
10061ace:	7188      	strb	r0, [r1, #6]
10061ad0:	728c      	strb	r4, [r1, #10]
10061ad2:	20ff      	movs	r0, #255	@ 0xff
10061ad4:	7148      	strb	r0, [r1, #5]
10061ad6:	2082      	movs	r0, #130	@ 0x82
10061ad8:	7108      	strb	r0, [r1, #4]
10061ada:	0a20      	lsrs	r0, r4, #8
10061adc:	72c8      	strb	r0, [r1, #11]
10061ade:	2002      	movs	r0, #2
10061ae0:	f7f3 fc25 	bl	1005532e <aci_event_fifo_push>
10061ae4:	e048      	b.n	10061b78 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061ae6:	4620      	mov	r0, r4
10061ae8:	f005 fa2c 	bl	10066f44 <smp_pp3_keys_distribution_send>
10061aec:	e044      	b.n	10061b78 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061aee:	7de0      	ldrb	r0, [r4, #23]
10061af0:	2601      	movs	r6, #1
10061af2:	0700      	lsls	r0, r0, #28
10061af4:	4630      	mov	r0, r6
10061af6:	d513      	bpl.n	10061b20 <smp_fsm_process_actions_wrt_state_tsk+0x12c>
10061af8:	4620      	mov	r0, r4
10061afa:	f005 fd28 	bl	1006754e <smp_scp_public_key_prepare_and_exchange_ucfg_weak>
10061afe:	2800      	cmp	r0, #0
10061b00:	d006      	beq.n	10061b10 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
10061b02:	2812      	cmp	r0, #18
10061b04:	d004      	beq.n	10061b10 <smp_fsm_process_actions_wrt_state_tsk+0x11c>
10061b06:	200e      	movs	r0, #14
10061b08:	f000 febe 	bl	10062888 <tsk_notify_idx>
10061b0c:	f7f0 f83f 	bl	10051b8e <BLE_STACK_ProcessRequest>
10061b10:	7de0      	ldrb	r0, [r4, #23]
10061b12:	2160      	movs	r1, #96	@ 0x60
10061b14:	4001      	ands	r1, r0
10061b16:	3960      	subs	r1, #96	@ 0x60
10061b18:	4248      	negs	r0, r1
10061b1a:	4148      	adcs	r0, r1
10061b1c:	4b22      	ldr	r3, [pc, #136]	@ (10061ba8 <__arm_cp.0_0>)
10061b1e:	4a23      	ldr	r2, [pc, #140]	@ (10061bac <__arm_cp.0_1>)
10061b20:	7ce1      	ldrb	r1, [r4, #19]
10061b22:	2902      	cmp	r1, #2
10061b24:	d104      	bne.n	10061b30 <smp_fsm_process_actions_wrt_state_tsk+0x13c>
10061b26:	7be1      	ldrb	r1, [r4, #15]
10061b28:	2210      	movs	r2, #16
10061b2a:	400a      	ands	r2, r1
10061b2c:	0916      	lsrs	r6, r2, #4
10061b2e:	4a1f      	ldr	r2, [pc, #124]	@ (10061bac <__arm_cp.0_1>)
10061b30:	2800      	cmp	r0, #0
10061b32:	d023      	beq.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061b34:	2e00      	cmp	r6, #0
10061b36:	d021      	beq.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061b38:	2060      	movs	r0, #96	@ 0x60
10061b3a:	5c20      	ldrb	r0, [r4, r0]
10061b3c:	07c0      	lsls	r0, r0, #31
10061b3e:	d024      	beq.n	10061b8a <smp_fsm_process_actions_wrt_state_tsk+0x196>
10061b40:	204b      	movs	r0, #75	@ 0x4b
10061b42:	e023      	b.n	10061b8c <smp_fsm_process_actions_wrt_state_tsk+0x198>
10061b44:	4620      	mov	r0, r4
10061b46:	f000 f837 	bl	10061bb8 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>
10061b4a:	e015      	b.n	10061b78 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061b4c:	2060      	movs	r0, #96	@ 0x60
10061b4e:	5620      	ldrsb	r0, [r4, r0]
10061b50:	2800      	cmp	r0, #0
10061b52:	d513      	bpl.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061b54:	2100      	movs	r1, #0
10061b56:	2270      	movs	r2, #112	@ 0x70
10061b58:	4620      	mov	r0, r4
10061b5a:	f7f0 fe0f 	bl	1005277c <BLEPLAT_MemSet>
10061b5e:	e00b      	b.n	10061b78 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061b60:	4620      	mov	r0, r4
10061b62:	f005 f859 	bl	10066c18 <smp_pp2_per_auth_stage_1_start>
10061b66:	e007      	b.n	10061b78 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061b68:	2100      	movs	r1, #0
10061b6a:	4620      	mov	r0, r4
10061b6c:	f005 f9a1 	bl	10066eb2 <smp_pp3_keys_distribution_start>
10061b70:	e002      	b.n	10061b78 <smp_fsm_process_actions_wrt_state_tsk+0x184>
10061b72:	4620      	mov	r0, r4
10061b74:	f004 fcb2 	bl	100664dc <smp_pp3_pairing_completed_successful>
10061b78:	4a0c      	ldr	r2, [pc, #48]	@ (10061bac <__arm_cp.0_1>)
10061b7a:	4b0b      	ldr	r3, [pc, #44]	@ (10061ba8 <__arm_cp.0_0>)
10061b7c:	3770      	adds	r7, #112	@ 0x70
10061b7e:	1c6d      	adds	r5, r5, #1
10061b80:	e73d      	b.n	100619fe <smp_fsm_process_actions_wrt_state_tsk+0xa>
10061b82:	4620      	mov	r0, r4
10061b84:	f000 f819 	bl	10061bba <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>
10061b88:	e00a      	b.n	10061ba0 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10061b8a:	205b      	movs	r0, #91	@ 0x5b
10061b8c:	43c0      	mvns	r0, r0
10061b8e:	72a0      	strb	r0, [r4, #10]
10061b90:	200e      	movs	r0, #14
10061b92:	f000 fe79 	bl	10062888 <tsk_notify_idx>
10061b96:	f7ef fffa 	bl	10051b8e <BLE_STACK_ProcessRequest>
10061b9a:	e001      	b.n	10061ba0 <smp_fsm_process_actions_wrt_state_tsk+0x1ac>
10061b9c:	20f1      	movs	r0, #241	@ 0xf1
10061b9e:	72a0      	strb	r0, [r4, #10]
10061ba0:	4b01      	ldr	r3, [pc, #4]	@ (10061ba8 <__arm_cp.0_0>)
10061ba2:	4a02      	ldr	r2, [pc, #8]	@ (10061bac <__arm_cp.0_1>)
10061ba4:	e7ea      	b.n	10061b7c <smp_fsm_process_actions_wrt_state_tsk+0x188>
10061ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061ba8 <__arm_cp.0_0>:
10061ba8:	20002a7c 	.word	0x20002a7c

10061bac <__arm_cp.0_1>:
10061bac:	20002b1c 	.word	0x20002b1c

10061bb0 <__arm_cp.0_2>:
10061bb0:	20002ad0 	.word	0x20002ad0

10061bb4 <__arm_cp.0_3>:
10061bb4:	20002a80 	.word	0x20002a80

10061bb8 <smp_fsm_execute_actions_scp_phase2as2_ucfg_weak>:
10061bb8:	4770      	bx	lr

10061bba <smp_fsm_execute_actions_excerpt_cei_ucfg_weak>:
10061bba:	4770      	bx	lr

10061bbc <smp_rxp_process_rxed_packets_tsk>:
10061bbc:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061bbe:	4f60      	ldr	r7, [pc, #384]	@ (10061d40 <__arm_cp.0_0>)
10061bc0:	4c60      	ldr	r4, [pc, #384]	@ (10061d44 <__arm_cp.0_1>)
10061bc2:	6838      	ldr	r0, [r7, #0]
10061bc4:	6801      	ldr	r1, [r0, #0]
10061bc6:	2900      	cmp	r1, #0
10061bc8:	d100      	bne.n	10061bcc <smp_rxp_process_rxed_packets_tsk+0x10>
10061bca:	e0b8      	b.n	10061d3e <smp_rxp_process_rxed_packets_tsk+0x182>
10061bcc:	f001 f878 	bl	10062cc0 <ACL_list_remove_head>
10061bd0:	4605      	mov	r5, r0
10061bd2:	8800      	ldrh	r0, [r0, #0]
10061bd4:	f005 fc4c 	bl	10067470 <smp_get_remote_device_list_item>
10061bd8:	2800      	cmp	r0, #0
10061bda:	d0f2      	beq.n	10061bc2 <smp_rxp_process_rxed_packets_tsk+0x6>
10061bdc:	4606      	mov	r6, r0
10061bde:	6838      	ldr	r0, [r7, #0]
10061be0:	21b0      	movs	r1, #176	@ 0xb0
10061be2:	5c40      	ldrb	r0, [r0, r1]
10061be4:	2800      	cmp	r0, #0
10061be6:	d00e      	beq.n	10061c06 <smp_rxp_process_rxed_packets_tsk+0x4a>
10061be8:	2108      	movs	r1, #8
10061bea:	2200      	movs	r2, #0
10061bec:	2301      	movs	r3, #1
10061bee:	4630      	mov	r0, r6
10061bf0:	f004 fd2c 	bl	1006664c <smp_pp3_pairing_failed_send>
10061bf4:	2800      	cmp	r0, #0
10061bf6:	d00e      	beq.n	10061c16 <smp_rxp_process_rxed_packets_tsk+0x5a>
10061bf8:	28fd      	cmp	r0, #253	@ 0xfd
10061bfa:	d000      	beq.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061bfc:	e096      	b.n	10061d2c <smp_rxp_process_rxed_packets_tsk+0x170>
10061bfe:	4628      	mov	r0, r5
10061c00:	f7f3 f944 	bl	10054e8c <ACL_pkt_release>
10061c04:	e7dd      	b.n	10061bc2 <smp_rxp_process_rxed_packets_tsk+0x6>
10061c06:	6868      	ldr	r0, [r5, #4]
10061c08:	7a00      	ldrb	r0, [r0, #8]
10061c0a:	2805      	cmp	r0, #5
10061c0c:	d10c      	bne.n	10061c28 <smp_rxp_process_rxed_packets_tsk+0x6c>
10061c0e:	4628      	mov	r0, r5
10061c10:	4631      	mov	r1, r6
10061c12:	f004 fcef 	bl	100665f4 <smp_pp3_pairing_failed_receive>
10061c16:	4628      	mov	r0, r5
10061c18:	f7f3 f938 	bl	10054e8c <ACL_pkt_release>
10061c1c:	200e      	movs	r0, #14
10061c1e:	f000 fe33 	bl	10062888 <tsk_notify_idx>
10061c22:	f7ef ffb4 	bl	10051b8e <BLE_STACK_ProcessRequest>
10061c26:	e7cc      	b.n	10061bc2 <smp_rxp_process_rxed_packets_tsk+0x6>
10061c28:	7ab1      	ldrb	r1, [r6, #10]
10061c2a:	29f1      	cmp	r1, #241	@ 0xf1
10061c2c:	d001      	beq.n	10061c32 <smp_rxp_process_rxed_packets_tsk+0x76>
10061c2e:	2900      	cmp	r1, #0
10061c30:	d10a      	bne.n	10061c48 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061c32:	2160      	movs	r1, #96	@ 0x60
10061c34:	5c72      	ldrb	r2, [r6, r1]
10061c36:	2101      	movs	r1, #1
10061c38:	4011      	ands	r1, r2
10061c3a:	d101      	bne.n	10061c40 <smp_rxp_process_rxed_packets_tsk+0x84>
10061c3c:	280b      	cmp	r0, #11
10061c3e:	d1de      	bne.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061c40:	2900      	cmp	r1, #0
10061c42:	d001      	beq.n	10061c48 <smp_rxp_process_rxed_packets_tsk+0x8c>
10061c44:	2801      	cmp	r0, #1
10061c46:	d1da      	bne.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061c48:	7df0      	ldrb	r0, [r6, #23]
10061c4a:	0700      	lsls	r0, r0, #28
10061c4c:	d506      	bpl.n	10061c5c <smp_rxp_process_rxed_packets_tsk+0xa0>
10061c4e:	9602      	str	r6, [sp, #8]
10061c50:	9501      	str	r5, [sp, #4]
10061c52:	a801      	add	r0, sp, #4
10061c54:	f000 f894 	bl	10061d80 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>
10061c58:	28fc      	cmp	r0, #252	@ 0xfc
10061c5a:	d1cb      	bne.n	10061bf4 <smp_rxp_process_rxed_packets_tsk+0x38>
10061c5c:	2060      	movs	r0, #96	@ 0x60
10061c5e:	5c30      	ldrb	r0, [r6, r0]
10061c60:	07c0      	lsls	r0, r0, #31
10061c62:	d107      	bne.n	10061c74 <smp_rxp_process_rxed_packets_tsk+0xb8>
10061c64:	9602      	str	r6, [sp, #8]
10061c66:	9501      	str	r5, [sp, #4]
10061c68:	a801      	add	r0, sp, #4
10061c6a:	f000 f88b 	bl	10061d84 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>
10061c6e:	28fc      	cmp	r0, #252	@ 0xfc
10061c70:	d1c0      	bne.n	10061bf4 <smp_rxp_process_rxed_packets_tsk+0x38>
10061c72:	e022      	b.n	10061cba <smp_rxp_process_rxed_packets_tsk+0xfe>
10061c74:	6868      	ldr	r0, [r5, #4]
10061c76:	7a00      	ldrb	r0, [r0, #8]
10061c78:	2804      	cmp	r0, #4
10061c7a:	d031      	beq.n	10061ce0 <smp_rxp_process_rxed_packets_tsk+0x124>
10061c7c:	2803      	cmp	r0, #3
10061c7e:	d037      	beq.n	10061cf0 <smp_rxp_process_rxed_packets_tsk+0x134>
10061c80:	2801      	cmp	r0, #1
10061c82:	d11a      	bne.n	10061cba <smp_rxp_process_rxed_packets_tsk+0xfe>
10061c84:	7ab0      	ldrb	r0, [r6, #10]
10061c86:	2800      	cmp	r0, #0
10061c88:	d003      	beq.n	10061c92 <smp_rxp_process_rxed_packets_tsk+0xd6>
10061c8a:	28fb      	cmp	r0, #251	@ 0xfb
10061c8c:	d047      	beq.n	10061d1e <smp_rxp_process_rxed_packets_tsk+0x162>
10061c8e:	28f1      	cmp	r0, #241	@ 0xf1
10061c90:	d1b5      	bne.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061c92:	8930      	ldrh	r0, [r6, #8]
10061c94:	f005 fbcc 	bl	10067430 <smp_get_remote_device_list_index>
10061c98:	4602      	mov	r2, r0
10061c9a:	2000      	movs	r0, #0
10061c9c:	4601      	mov	r1, r0
10061c9e:	4623      	mov	r3, r4
10061ca0:	f000 f88e 	bl	10061dc0 <smp_timer_reset>
10061ca4:	7e30      	ldrb	r0, [r6, #24]
10061ca6:	0781      	lsls	r1, r0, #30
10061ca8:	d502      	bpl.n	10061cb0 <smp_rxp_process_rxed_packets_tsk+0xf4>
10061caa:	2103      	movs	r1, #3
10061cac:	4308      	orrs	r0, r1
10061cae:	7630      	strb	r0, [r6, #24]
10061cb0:	4628      	mov	r0, r5
10061cb2:	4631      	mov	r1, r6
10061cb4:	f004 fe9e 	bl	100669f4 <smp_pp1_per_rxp_pairing_request>
10061cb8:	e7d9      	b.n	10061c6e <smp_rxp_process_rxed_packets_tsk+0xb2>
10061cba:	4628      	mov	r0, r5
10061cbc:	4631      	mov	r1, r6
10061cbe:	f005 fa0f 	bl	100670e0 <smp_pp3_keys_distribution_receive>
10061cc2:	28fc      	cmp	r0, #252	@ 0xfc
10061cc4:	d003      	beq.n	10061cce <smp_rxp_process_rxed_packets_tsk+0x112>
10061cc6:	2886      	cmp	r0, #134	@ 0x86
10061cc8:	d099      	beq.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061cca:	2884      	cmp	r0, #132	@ 0x84
10061ccc:	d192      	bne.n	10061bf4 <smp_rxp_process_rxed_packets_tsk+0x38>
10061cce:	7df0      	ldrb	r0, [r6, #23]
10061cd0:	0700      	lsls	r0, r0, #28
10061cd2:	d594      	bpl.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061cd4:	9602      	str	r6, [sp, #8]
10061cd6:	9501      	str	r5, [sp, #4]
10061cd8:	a801      	add	r0, sp, #4
10061cda:	f000 f84f 	bl	10061d7c <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>
10061cde:	e789      	b.n	10061bf4 <smp_rxp_process_rxed_packets_tsk+0x38>
10061ce0:	7ab0      	ldrb	r0, [r6, #10]
10061ce2:	28b6      	cmp	r0, #182	@ 0xb6
10061ce4:	d18b      	bne.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061ce6:	4628      	mov	r0, r5
10061ce8:	4631      	mov	r1, r6
10061cea:	f005 f84d 	bl	10066d88 <smp_pp2_per_rx_process_pairing_random>
10061cee:	e7be      	b.n	10061c6e <smp_rxp_process_rxed_packets_tsk+0xb2>
10061cf0:	7ab0      	ldrb	r0, [r6, #10]
10061cf2:	28b2      	cmp	r0, #178	@ 0xb2
10061cf4:	d009      	beq.n	10061d0a <smp_rxp_process_rxed_packets_tsk+0x14e>
10061cf6:	28b4      	cmp	r0, #180	@ 0xb4
10061cf8:	d007      	beq.n	10061d0a <smp_rxp_process_rxed_packets_tsk+0x14e>
10061cfa:	28b5      	cmp	r0, #181	@ 0xb5
10061cfc:	d000      	beq.n	10061d00 <smp_rxp_process_rxed_packets_tsk+0x144>
10061cfe:	e77e      	b.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061d00:	4628      	mov	r0, r5
10061d02:	4631      	mov	r1, r6
10061d04:	f004 ff4a 	bl	10066b9c <smp_pp2_per_rx_process_pairing_confirm>
10061d08:	e7b1      	b.n	10061c6e <smp_rxp_process_rxed_packets_tsk+0xb2>
10061d0a:	7cf0      	ldrb	r0, [r6, #19]
10061d0c:	2802      	cmp	r0, #2
10061d0e:	d000      	beq.n	10061d12 <smp_rxp_process_rxed_packets_tsk+0x156>
10061d10:	e775      	b.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061d12:	6838      	ldr	r0, [r7, #0]
10061d14:	2140      	movs	r1, #64	@ 0x40
10061d16:	5c41      	ldrb	r1, [r0, r1]
10061d18:	2903      	cmp	r1, #3
10061d1a:	d108      	bne.n	10061d2e <smp_rxp_process_rxed_packets_tsk+0x172>
10061d1c:	e76f      	b.n	10061bfe <smp_rxp_process_rxed_packets_tsk+0x42>
10061d1e:	2109      	movs	r1, #9
10061d20:	2200      	movs	r2, #0
10061d22:	2301      	movs	r3, #1
10061d24:	4630      	mov	r0, r6
10061d26:	f004 fc91 	bl	1006664c <smp_pp3_pairing_failed_send>
10061d2a:	e7a0      	b.n	10061c6e <smp_rxp_process_rxed_packets_tsk+0xb2>
10061d2c:	6838      	ldr	r0, [r7, #0]
10061d2e:	4629      	mov	r1, r5
10061d30:	f000 ffa7 	bl	10062c82 <ACL_list_insert_head>
10061d34:	200f      	movs	r0, #15
10061d36:	f000 fda7 	bl	10062888 <tsk_notify_idx>
10061d3a:	f7ef ff28 	bl	10051b8e <BLE_STACK_ProcessRequest>
10061d3e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061d40 <__arm_cp.0_0>:
10061d40:	20002b1c 	.word	0x20002b1c

10061d44 <__arm_cp.0_1>:
10061d44:	00007530 	.word	0x00007530

10061d48 <smp_rxp_flush_packet_queues>:
10061d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061d4a:	4d0a      	ldr	r5, [pc, #40]	@ (10061d74 <__arm_cp.4_0>)
10061d4c:	4005      	ands	r5, r0
10061d4e:	4e0a      	ldr	r6, [pc, #40]	@ (10061d78 <__arm_cp.4_1>)
10061d50:	6830      	ldr	r0, [r6, #0]
10061d52:	6807      	ldr	r7, [r0, #0]
10061d54:	2f00      	cmp	r7, #0
10061d56:	d00c      	beq.n	10061d72 <smp_rxp_flush_packet_queues+0x2a>
10061d58:	463c      	mov	r4, r7
10061d5a:	69ff      	ldr	r7, [r7, #28]
10061d5c:	8820      	ldrh	r0, [r4, #0]
10061d5e:	42a8      	cmp	r0, r5
10061d60:	d1f8      	bne.n	10061d54 <smp_rxp_flush_packet_queues+0xc>
10061d62:	6830      	ldr	r0, [r6, #0]
10061d64:	4621      	mov	r1, r4
10061d66:	f000 ff95 	bl	10062c94 <ACL_list_remove>
10061d6a:	4620      	mov	r0, r4
10061d6c:	f7f3 f88e 	bl	10054e8c <ACL_pkt_release>
10061d70:	e7f0      	b.n	10061d54 <smp_rxp_flush_packet_queues+0xc>
10061d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10061d74 <__arm_cp.4_0>:
10061d74:	00000fff 	.word	0x00000fff

10061d78 <__arm_cp.4_1>:
10061d78:	20002b1c 	.word	0x20002b1c

10061d7c <smp_rxp_process_exception_cases_excerpt_scp_ucfg_weak>:
10061d7c:	201f      	movs	r0, #31
10061d7e:	4770      	bx	lr

10061d80 <smp_rxp_process_wrt_current_fsm_excerpt_scp_ucfg_weak>:
10061d80:	201f      	movs	r0, #31
10061d82:	4770      	bx	lr

10061d84 <smp_rxp_process_wrt_current_fsm_excerpt_cei_ucfg_weak>:
10061d84:	201f      	movs	r0, #31
10061d86:	4770      	bx	lr

10061d88 <smp_timer_init>:
10061d88:	b580      	push	{r7, lr}
10061d8a:	4806      	ldr	r0, [pc, #24]	@ (10061da4 <__arm_cp.0_0>)
10061d8c:	7ac1      	ldrb	r1, [r0, #11]
10061d8e:	4806      	ldr	r0, [pc, #24]	@ (10061da8 <__arm_cp.0_1>)
10061d90:	6800      	ldr	r0, [r0, #0]
10061d92:	3008      	adds	r0, #8
10061d94:	1cc9      	adds	r1, r1, #3
10061d96:	b2c9      	uxtb	r1, r1
10061d98:	4a04      	ldr	r2, [pc, #16]	@ (10061dac <__arm_cp.0_2>)
10061d9a:	2307      	movs	r3, #7
10061d9c:	f000 fdd2 	bl	10062944 <CST_init>
10061da0:	bd80      	pop	{r7, pc}
10061da2:	46c0      	nop			@ (mov r8, r8)

10061da4 <__arm_cp.0_0>:
10061da4:	20002ae4 	.word	0x20002ae4

10061da8 <__arm_cp.0_1>:
10061da8:	20002b1c 	.word	0x20002b1c

10061dac <__arm_cp.0_2>:
10061dac:	10061db1 	.word	0x10061db1

10061db0 <smp_timers_cb_wrapper>:
10061db0:	b580      	push	{r7, lr}
10061db2:	6940      	ldr	r0, [r0, #20]
10061db4:	4901      	ldr	r1, [pc, #4]	@ (10061dbc <__arm_cp.1_0>)
10061db6:	f000 fe9e 	bl	10062af6 <cst_sharedCallback>
10061dba:	bd80      	pop	{r7, pc}

10061dbc <__arm_cp.1_0>:
10061dbc:	10061e59 	.word	0x10061e59

10061dc0 <smp_timer_reset>:
10061dc0:	b510      	push	{r4, lr}
10061dc2:	2900      	cmp	r1, #0
10061dc4:	d006      	beq.n	10061dd4 <smp_timer_reset+0x14>
10061dc6:	2486      	movs	r4, #134	@ 0x86
10061dc8:	2901      	cmp	r1, #1
10061dca:	d11b      	bne.n	10061e04 <smp_timer_reset+0x44>
10061dcc:	2a02      	cmp	r2, #2
10061dce:	d819      	bhi.n	10061e04 <smp_timer_reset+0x44>
10061dd0:	2100      	movs	r1, #0
10061dd2:	e000      	b.n	10061dd6 <smp_timer_reset+0x16>
10061dd4:	2103      	movs	r1, #3
10061dd6:	2801      	cmp	r0, #1
10061dd8:	d00a      	beq.n	10061df0 <smp_timer_reset+0x30>
10061dda:	2800      	cmp	r0, #0
10061ddc:	d111      	bne.n	10061e02 <smp_timer_reset+0x42>
10061dde:	1888      	adds	r0, r1, r2
10061de0:	b2c1      	uxtb	r1, r0
10061de2:	4809      	ldr	r0, [pc, #36]	@ (10061e08 <__arm_cp.2_0>)
10061de4:	6800      	ldr	r0, [r0, #0]
10061de6:	3008      	adds	r0, #8
10061de8:	2201      	movs	r2, #1
10061dea:	f000 fdf6 	bl	100629da <CST_start>
10061dee:	e006      	b.n	10061dfe <smp_timer_reset+0x3e>
10061df0:	1888      	adds	r0, r1, r2
10061df2:	b2c1      	uxtb	r1, r0
10061df4:	4804      	ldr	r0, [pc, #16]	@ (10061e08 <__arm_cp.2_0>)
10061df6:	6800      	ldr	r0, [r0, #0]
10061df8:	3008      	adds	r0, #8
10061dfa:	f000 fdb8 	bl	1006296e <CST_stop>
10061dfe:	4604      	mov	r4, r0
10061e00:	e000      	b.n	10061e04 <smp_timer_reset+0x44>
10061e02:	2400      	movs	r4, #0
10061e04:	4620      	mov	r0, r4
10061e06:	bd10      	pop	{r4, pc}

10061e08 <__arm_cp.2_0>:
10061e08:	20002b1c 	.word	0x20002b1c

10061e0c <smp_timers_protocol_timeout_cb>:
10061e0c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10061e0e:	4605      	mov	r5, r0
10061e10:	2070      	movs	r0, #112	@ 0x70
10061e12:	9002      	str	r0, [sp, #8]
10061e14:	4345      	muls	r5, r0
10061e16:	480f      	ldr	r0, [pc, #60]	@ (10061e54 <__arm_cp.3_0>)
10061e18:	6800      	ldr	r0, [r0, #0]
10061e1a:	21a4      	movs	r1, #164	@ 0xa4
10061e1c:	9101      	str	r1, [sp, #4]
10061e1e:	5840      	ldr	r0, [r0, r1]
10061e20:	1947      	adds	r7, r0, r5
10061e22:	8939      	ldrh	r1, [r7, #8]
10061e24:	2002      	movs	r0, #2
10061e26:	2401      	movs	r4, #1
10061e28:	2600      	movs	r6, #0
10061e2a:	4622      	mov	r2, r4
10061e2c:	4633      	mov	r3, r6
10061e2e:	f002 f995 	bl	1006415c <aci_gap_pairing_complete_event_push_noinline>
10061e32:	4638      	mov	r0, r7
10061e34:	4621      	mov	r1, r4
10061e36:	f004 fbb9 	bl	100665ac <smp_pp3_pairing_completed_update_stats>
10061e3a:	8938      	ldrh	r0, [r7, #8]
10061e3c:	f7ff ff84 	bl	10061d48 <smp_rxp_flush_packet_queues>
10061e40:	4804      	ldr	r0, [pc, #16]	@ (10061e54 <__arm_cp.3_0>)
10061e42:	6800      	ldr	r0, [r0, #0]
10061e44:	9901      	ldr	r1, [sp, #4]
10061e46:	5840      	ldr	r0, [r0, r1]
10061e48:	1940      	adds	r0, r0, r5
10061e4a:	4631      	mov	r1, r6
10061e4c:	9a02      	ldr	r2, [sp, #8]
10061e4e:	f7f0 fc95 	bl	1005277c <BLEPLAT_MemSet>
10061e52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10061e54 <__arm_cp.3_0>:
10061e54:	20002b1c 	.word	0x20002b1c

10061e58 <smp_timers_cb>:
10061e58:	b580      	push	{r7, lr}
10061e5a:	2802      	cmp	r0, #2
10061e5c:	d802      	bhi.n	10061e64 <smp_timers_cb+0xc>
10061e5e:	f005 fa57 	bl	10067310 <smp_cmn_repeated_attacks_timer_cb>
10061e62:	bd80      	pop	{r7, pc}
10061e64:	4904      	ldr	r1, [pc, #16]	@ (10061e78 <__arm_cp.4_0>)
10061e66:	7ac9      	ldrb	r1, [r1, #11]
10061e68:	1cc9      	adds	r1, r1, #3
10061e6a:	4281      	cmp	r1, r0
10061e6c:	d903      	bls.n	10061e76 <smp_timers_cb+0x1e>
10061e6e:	1ec0      	subs	r0, r0, #3
10061e70:	b2c0      	uxtb	r0, r0
10061e72:	f7ff ffcb 	bl	10061e0c <smp_timers_protocol_timeout_cb>
10061e76:	bd80      	pop	{r7, pc}

10061e78 <__arm_cp.4_0>:
10061e78:	20002ae4 	.word	0x20002ae4

10061e7c <smp_init>:
10061e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10061e7e:	2029      	movs	r0, #41	@ 0x29
10061e80:	00c1      	lsls	r1, r0, #3
10061e82:	2401      	movs	r4, #1
10061e84:	4d20      	ldr	r5, [pc, #128]	@ (10061f08 <__arm_cp.0_0>)
10061e86:	4620      	mov	r0, r4
10061e88:	47a8      	blx	r5
10061e8a:	4e20      	ldr	r6, [pc, #128]	@ (10061f0c <__arm_cp.0_1>)
10061e8c:	6030      	str	r0, [r6, #0]
10061e8e:	4f20      	ldr	r7, [pc, #128]	@ (10061f10 <__arm_cp.0_2>)
10061e90:	7af8      	ldrb	r0, [r7, #11]
10061e92:	2170      	movs	r1, #112	@ 0x70
10061e94:	47a8      	blx	r5
10061e96:	6831      	ldr	r1, [r6, #0]
10061e98:	22a4      	movs	r2, #164	@ 0xa4
10061e9a:	5088      	str	r0, [r1, r2]
10061e9c:	f005 f9c0 	bl	10067220 <smp_cmn_rejectlist_init>
10061ea0:	2128      	movs	r1, #40	@ 0x28
10061ea2:	4620      	mov	r0, r4
10061ea4:	47a8      	blx	r5
10061ea6:	6831      	ldr	r1, [r6, #0]
10061ea8:	22ac      	movs	r2, #172	@ 0xac
10061eaa:	5088      	str	r0, [r1, r2]
10061eac:	7af8      	ldrb	r0, [r7, #11]
10061eae:	1cc0      	adds	r0, r0, #3
10061eb0:	b2c0      	uxtb	r0, r0
10061eb2:	1c41      	adds	r1, r0, #1
10061eb4:	4d17      	ldr	r5, [pc, #92]	@ (10061f14 <__arm_cp.0_3>)
10061eb6:	4628      	mov	r0, r5
10061eb8:	4622      	mov	r2, r4
10061eba:	f7fe fefd 	bl	10060cb8 <csmem_mem_assign>
10061ebe:	6831      	ldr	r1, [r6, #0]
10061ec0:	6288      	str	r0, [r1, #40]	@ 0x28
10061ec2:	7af8      	ldrb	r0, [r7, #11]
10061ec4:	1cc0      	adds	r0, r0, #3
10061ec6:	b2c1      	uxtb	r1, r0
10061ec8:	2202      	movs	r2, #2
10061eca:	4628      	mov	r0, r5
10061ecc:	f7fe fef4 	bl	10060cb8 <csmem_mem_assign>
10061ed0:	6831      	ldr	r1, [r6, #0]
10061ed2:	62c8      	str	r0, [r1, #44]	@ 0x2c
10061ed4:	4608      	mov	r0, r1
10061ed6:	f000 fec9 	bl	10062c6c <ACL_list_init>
10061eda:	f7ff ff55 	bl	10061d88 <smp_timer_init>
10061ede:	6830      	ldr	r0, [r6, #0]
10061ee0:	2142      	movs	r1, #66	@ 0x42
10061ee2:	2500      	movs	r5, #0
10061ee4:	5245      	strh	r5, [r0, r1]
10061ee6:	2140      	movs	r1, #64	@ 0x40
10061ee8:	2203      	movs	r2, #3
10061eea:	5442      	strb	r2, [r0, r1]
10061eec:	490a      	ldr	r1, [pc, #40]	@ (10061f18 <__arm_cp.0_4>)
10061eee:	6304      	str	r4, [r0, #48]	@ 0x30
10061ef0:	6341      	str	r1, [r0, #52]	@ 0x34
10061ef2:	6385      	str	r5, [r0, #56]	@ 0x38
10061ef4:	3044      	adds	r0, #68	@ 0x44
10061ef6:	2110      	movs	r1, #16
10061ef8:	462a      	mov	r2, r5
10061efa:	f000 ffec 	bl	10062ed6 <HAL_Generate_Random_Bytes_To>
10061efe:	4628      	mov	r0, r5
10061f00:	f005 fb22 	bl	10067548 <smp_scp_init_ucfg_weak>
10061f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10061f06:	46c0      	nop			@ (mov r8, r8)

10061f08 <__arm_cp.0_0>:
10061f08:	10060cdd 	.word	0x10060cdd

10061f0c <__arm_cp.0_1>:
10061f0c:	20002b1c 	.word	0x20002b1c

10061f10 <__arm_cp.0_2>:
10061f10:	20002ae4 	.word	0x20002ae4

10061f14 <__arm_cp.0_3>:
10061f14:	20002ae0 	.word	0x20002ae0

10061f18 <__arm_cp.0_4>:
10061f18:	07071007 	.word	0x07071007

10061f1c <smp_sap_aci_set_io_capabilities>:
10061f1c:	b510      	push	{r4, lr}
10061f1e:	4604      	mov	r4, r0
10061f20:	f000 f80c 	bl	10061f3c <smp_check_is_any_pairing_ongoing>
10061f24:	2800      	cmp	r0, #0
10061f26:	d001      	beq.n	10061f2c <smp_sap_aci_set_io_capabilities+0x10>
10061f28:	200c      	movs	r0, #12
10061f2a:	bd10      	pop	{r4, pc}
10061f2c:	4802      	ldr	r0, [pc, #8]	@ (10061f38 <__arm_cp.2_0>)
10061f2e:	6800      	ldr	r0, [r0, #0]
10061f30:	2140      	movs	r1, #64	@ 0x40
10061f32:	5444      	strb	r4, [r0, r1]
10061f34:	2000      	movs	r0, #0
10061f36:	bd10      	pop	{r4, pc}

10061f38 <__arm_cp.2_0>:
10061f38:	20002b1c 	.word	0x20002b1c

10061f3c <smp_check_is_any_pairing_ongoing>:
10061f3c:	b570      	push	{r4, r5, r6, lr}
10061f3e:	4810      	ldr	r0, [pc, #64]	@ (10061f80 <__arm_cp.3_0>)
10061f40:	6800      	ldr	r0, [r0, #0]
10061f42:	2134      	movs	r1, #52	@ 0x34
10061f44:	5c40      	ldrb	r0, [r0, r1]
10061f46:	2170      	movs	r1, #112	@ 0x70
10061f48:	4341      	muls	r1, r0
10061f4a:	480e      	ldr	r0, [pc, #56]	@ (10061f84 <__arm_cp.3_1>)
10061f4c:	6802      	ldr	r2, [r0, #0]
10061f4e:	32a4      	adds	r2, #164	@ 0xa4
10061f50:	2000      	movs	r0, #0
10061f52:	4603      	mov	r3, r0
10061f54:	4299      	cmp	r1, r3
10061f56:	d012      	beq.n	10061f7e <smp_check_is_any_pairing_ongoing+0x42>
10061f58:	6814      	ldr	r4, [r2, #0]
10061f5a:	18e5      	adds	r5, r4, r3
10061f5c:	7aac      	ldrb	r4, [r5, #10]
10061f5e:	2660      	movs	r6, #96	@ 0x60
10061f60:	5dad      	ldrb	r5, [r5, r6]
10061f62:	07ed      	lsls	r5, r5, #31
10061f64:	d104      	bne.n	10061f70 <smp_check_is_any_pairing_ongoing+0x34>
10061f66:	3460      	adds	r4, #96	@ 0x60
10061f68:	b2e4      	uxtb	r4, r4
10061f6a:	2c51      	cmp	r4, #81	@ 0x51
10061f6c:	d204      	bcs.n	10061f78 <smp_check_is_any_pairing_ongoing+0x3c>
10061f6e:	e005      	b.n	10061f7c <smp_check_is_any_pairing_ongoing+0x40>
10061f70:	3450      	adds	r4, #80	@ 0x50
10061f72:	b2e4      	uxtb	r4, r4
10061f74:	2c41      	cmp	r4, #65	@ 0x41
10061f76:	d301      	bcc.n	10061f7c <smp_check_is_any_pairing_ongoing+0x40>
10061f78:	3370      	adds	r3, #112	@ 0x70
10061f7a:	e7eb      	b.n	10061f54 <smp_check_is_any_pairing_ongoing+0x18>
10061f7c:	2001      	movs	r0, #1
10061f7e:	bd70      	pop	{r4, r5, r6, pc}

10061f80 <__arm_cp.3_0>:
10061f80:	20002a7c 	.word	0x20002a7c

10061f84 <__arm_cp.3_1>:
10061f84:	20002b1c 	.word	0x20002b1c

10061f88 <smp_sap_aci_set_authentication_req>:
10061f88:	b510      	push	{r4, lr}
10061f8a:	4604      	mov	r4, r0
10061f8c:	f7ff ffd6 	bl	10061f3c <smp_check_is_any_pairing_ongoing>
10061f90:	7861      	ldrb	r1, [r4, #1]
10061f92:	2901      	cmp	r1, #1
10061f94:	d103      	bne.n	10061f9e <smp_sap_aci_set_authentication_req+0x16>
10061f96:	2800      	cmp	r0, #0
10061f98:	d105      	bne.n	10061fa6 <smp_sap_aci_set_authentication_req+0x1e>
10061f9a:	4602      	mov	r2, r0
10061f9c:	e004      	b.n	10061fa8 <smp_sap_aci_set_authentication_req+0x20>
10061f9e:	2800      	cmp	r0, #0
10061fa0:	d00f      	beq.n	10061fc2 <smp_sap_aci_set_authentication_req+0x3a>
10061fa2:	220c      	movs	r2, #12
10061fa4:	e016      	b.n	10061fd4 <smp_sap_aci_set_authentication_req+0x4c>
10061fa6:	220c      	movs	r2, #12
10061fa8:	490b      	ldr	r1, [pc, #44]	@ (10061fd8 <__arm_cp.4_0>)
10061faa:	6809      	ldr	r1, [r1, #0]
10061fac:	2340      	movs	r3, #64	@ 0x40
10061fae:	5ccb      	ldrb	r3, [r1, r3]
10061fb0:	2b03      	cmp	r3, #3
10061fb2:	d101      	bne.n	10061fb8 <smp_sap_aci_set_authentication_req+0x30>
10061fb4:	226e      	movs	r2, #110	@ 0x6e
10061fb6:	43d2      	mvns	r2, r2
10061fb8:	2b03      	cmp	r3, #3
10061fba:	d00b      	beq.n	10061fd4 <smp_sap_aci_set_authentication_req+0x4c>
10061fbc:	2800      	cmp	r0, #0
10061fbe:	d002      	beq.n	10061fc6 <smp_sap_aci_set_authentication_req+0x3e>
10061fc0:	e008      	b.n	10061fd4 <smp_sap_aci_set_authentication_req+0x4c>
10061fc2:	4805      	ldr	r0, [pc, #20]	@ (10061fd8 <__arm_cp.4_0>)
10061fc4:	6801      	ldr	r1, [r0, #0]
10061fc6:	3130      	adds	r1, #48	@ 0x30
10061fc8:	2210      	movs	r2, #16
10061fca:	4608      	mov	r0, r1
10061fcc:	4621      	mov	r1, r4
10061fce:	f7f0 fbc5 	bl	1005275c <BLEPLAT_MemCpy>
10061fd2:	2200      	movs	r2, #0
10061fd4:	b2d0      	uxtb	r0, r2
10061fd6:	bd10      	pop	{r4, pc}

10061fd8 <__arm_cp.4_0>:
10061fd8:	20002b1c 	.word	0x20002b1c

10061fdc <smp_sap_aci_passkey_response>:
10061fdc:	b510      	push	{r4, lr}
10061fde:	460c      	mov	r4, r1
10061fe0:	f005 fa46 	bl	10067470 <smp_get_remote_device_list_item>
10061fe4:	2800      	cmp	r0, #0
10061fe6:	d010      	beq.n	1006200a <smp_sap_aci_passkey_response+0x2e>
10061fe8:	7cc1      	ldrb	r1, [r0, #19]
10061fea:	2902      	cmp	r1, #2
10061fec:	d10f      	bne.n	1006200e <smp_sap_aci_passkey_response+0x32>
10061fee:	4909      	ldr	r1, [pc, #36]	@ (10062014 <__arm_cp.5_0>)
10061ff0:	6809      	ldr	r1, [r1, #0]
10061ff2:	638c      	str	r4, [r1, #56]	@ 0x38
10061ff4:	7bc1      	ldrb	r1, [r0, #15]
10061ff6:	2210      	movs	r2, #16
10061ff8:	430a      	orrs	r2, r1
10061ffa:	73c2      	strb	r2, [r0, #15]
10061ffc:	200e      	movs	r0, #14
10061ffe:	f000 fc43 	bl	10062888 <tsk_notify_idx>
10062002:	f7ef fdc4 	bl	10051b8e <BLE_STACK_ProcessRequest>
10062006:	2000      	movs	r0, #0
10062008:	bd10      	pop	{r4, pc}
1006200a:	2002      	movs	r0, #2
1006200c:	bd10      	pop	{r4, pc}
1006200e:	200c      	movs	r0, #12
10062010:	bd10      	pop	{r4, pc}
10062012:	46c0      	nop			@ (mov r8, r8)

10062014 <__arm_cp.5_0>:
10062014:	20002b1c 	.word	0x20002b1c

10062018 <smp_sap_hci_le_connection_complete_evt_hndl>:
10062018:	b5f0      	push	{r4, r5, r6, r7, lr}
1006201a:	b089      	sub	sp, #36	@ 0x24
1006201c:	9304      	str	r3, [sp, #16]
1006201e:	4615      	mov	r5, r2
10062020:	9105      	str	r1, [sp, #20]
10062022:	4607      	mov	r7, r0
10062024:	ae06      	add	r6, sp, #24
10062026:	ac08      	add	r4, sp, #32
10062028:	4630      	mov	r0, r6
1006202a:	4621      	mov	r1, r4
1006202c:	f7f4 fa28 	bl	10056480 <GAP_get_current_address>
10062030:	7822      	ldrb	r2, [r4, #0]
10062032:	2000      	movs	r0, #0
10062034:	9500      	str	r5, [sp, #0]
10062036:	9904      	ldr	r1, [sp, #16]
10062038:	9101      	str	r1, [sp, #4]
1006203a:	9002      	str	r0, [sp, #8]
1006203c:	4638      	mov	r0, r7
1006203e:	9905      	ldr	r1, [sp, #20]
10062040:	4633      	mov	r3, r6
10062042:	f000 f803 	bl	1006204c <smp_connection_complete_handler>
10062046:	b009      	add	sp, #36	@ 0x24
10062048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1006204c <smp_connection_complete_handler>:
1006204c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006204e:	b087      	sub	sp, #28
10062050:	9302      	str	r3, [sp, #8]
10062052:	9200      	str	r2, [sp, #0]
10062054:	9101      	str	r1, [sp, #4]
10062056:	493a      	ldr	r1, [pc, #232]	@ (10062140 <__arm_cp.1_0>)
10062058:	6809      	ldr	r1, [r1, #0]
1006205a:	2334      	movs	r3, #52	@ 0x34
1006205c:	5cca      	ldrb	r2, [r1, r3]
1006205e:	2770      	movs	r7, #112	@ 0x70
10062060:	4357      	muls	r7, r2
10062062:	2500      	movs	r5, #0
10062064:	43ec      	mvns	r4, r5
10062066:	4b37      	ldr	r3, [pc, #220]	@ (10062144 <__arm_cp.1_1>)
10062068:	681e      	ldr	r6, [r3, #0]
1006206a:	36a4      	adds	r6, #164	@ 0xa4
1006206c:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006206e:	9106      	str	r1, [sp, #24]
10062070:	990e      	ldr	r1, [sp, #56]	@ 0x38
10062072:	9103      	str	r1, [sp, #12]
10062074:	990d      	ldr	r1, [sp, #52]	@ 0x34
10062076:	9105      	str	r1, [sp, #20]
10062078:	9404      	str	r4, [sp, #16]
1006207a:	42af      	cmp	r7, r5
1006207c:	d05e      	beq.n	1006213c <smp_connection_complete_handler+0xf0>
1006207e:	6833      	ldr	r3, [r6, #0]
10062080:	1959      	adds	r1, r3, r5
10062082:	8909      	ldrh	r1, [r1, #8]
10062084:	3570      	adds	r5, #112	@ 0x70
10062086:	1c64      	adds	r4, r4, #1
10062088:	2900      	cmp	r1, #0
1006208a:	d1f6      	bne.n	1006207a <smp_connection_complete_handler+0x2e>
1006208c:	4294      	cmp	r4, r2
1006208e:	d255      	bcs.n	1006213c <smp_connection_complete_handler+0xf0>
10062090:	195f      	adds	r7, r3, r5
10062092:	4639      	mov	r1, r7
10062094:	3968      	subs	r1, #104	@ 0x68
10062096:	8008      	strh	r0, [r1, #0]
10062098:	4638      	mov	r0, r7
1006209a:	3870      	subs	r0, #112	@ 0x70
1006209c:	2105      	movs	r1, #5
1006209e:	7001      	strb	r1, [r0, #0]
100620a0:	4638      	mov	r0, r7
100620a2:	380f      	subs	r0, #15
100620a4:	9900      	ldr	r1, [sp, #0]
100620a6:	7001      	strb	r1, [r0, #0]
100620a8:	4638      	mov	r0, r7
100620aa:	3810      	subs	r0, #16
100620ac:	9000      	str	r0, [sp, #0]
100620ae:	9901      	ldr	r1, [sp, #4]
100620b0:	7001      	strb	r1, [r0, #0]
100620b2:	4638      	mov	r0, r7
100620b4:	380e      	subs	r0, #14
100620b6:	2206      	movs	r2, #6
100620b8:	4b23      	ldr	r3, [pc, #140]	@ (10062148 <__arm_cp.1_2>)
100620ba:	9902      	ldr	r1, [sp, #8]
100620bc:	4616      	mov	r6, r2
100620be:	4798      	blx	r3
100620c0:	20fe      	movs	r0, #254	@ 0xfe
100620c2:	9a06      	ldr	r2, [sp, #24]
100620c4:	4010      	ands	r0, r2
100620c6:	2101      	movs	r1, #1
100620c8:	400a      	ands	r2, r1
100620ca:	2802      	cmp	r0, #2
100620cc:	d000      	beq.n	100620d0 <smp_connection_complete_handler+0x84>
100620ce:	4611      	mov	r1, r2
100620d0:	9206      	str	r2, [sp, #24]
100620d2:	463c      	mov	r4, r7
100620d4:	3c6f      	subs	r4, #111	@ 0x6f
100620d6:	7021      	strb	r1, [r4, #0]
100620d8:	2802      	cmp	r0, #2
100620da:	9805      	ldr	r0, [sp, #20]
100620dc:	9903      	ldr	r1, [sp, #12]
100620de:	d000      	beq.n	100620e2 <smp_connection_complete_handler+0x96>
100620e0:	4601      	mov	r1, r0
100620e2:	463d      	mov	r5, r7
100620e4:	3d6e      	subs	r5, #110	@ 0x6e
100620e6:	4628      	mov	r0, r5
100620e8:	4632      	mov	r2, r6
100620ea:	4b17      	ldr	r3, [pc, #92]	@ (10062148 <__arm_cp.1_2>)
100620ec:	4798      	blx	r3
100620ee:	4638      	mov	r0, r7
100620f0:	3817      	subs	r0, #23
100620f2:	9906      	ldr	r1, [sp, #24]
100620f4:	7001      	strb	r1, [r0, #0]
100620f6:	4638      	mov	r0, r7
100620f8:	3816      	subs	r0, #22
100620fa:	9905      	ldr	r1, [sp, #20]
100620fc:	4632      	mov	r2, r6
100620fe:	4b12      	ldr	r3, [pc, #72]	@ (10062148 <__arm_cp.1_2>)
10062100:	4798      	blx	r3
10062102:	4638      	mov	r0, r7
10062104:	3858      	subs	r0, #88	@ 0x58
10062106:	2100      	movs	r1, #0
10062108:	2204      	movs	r2, #4
1006210a:	f7f0 fb37 	bl	1005277c <BLEPLAT_MemSet>
1006210e:	1f38      	subs	r0, r7, #4
10062110:	3f66      	subs	r7, #102	@ 0x66
10062112:	2110      	movs	r1, #16
10062114:	7039      	strb	r1, [r7, #0]
10062116:	9904      	ldr	r1, [sp, #16]
10062118:	6001      	str	r1, [r0, #0]
1006211a:	7820      	ldrb	r0, [r4, #0]
1006211c:	4629      	mov	r1, r5
1006211e:	f005 f967 	bl	100673f0 <smp_cmn_is_peer_rejectlisted>
10062122:	2800      	cmp	r0, #0
10062124:	d005      	beq.n	10062132 <smp_connection_complete_handler+0xe6>
10062126:	9800      	ldr	r0, [sp, #0]
10062128:	7800      	ldrb	r0, [r0, #0]
1006212a:	07c0      	lsls	r0, r0, #31
1006212c:	d001      	beq.n	10062132 <smp_connection_complete_handler+0xe6>
1006212e:	20fb      	movs	r0, #251	@ 0xfb
10062130:	7038      	strb	r0, [r7, #0]
10062132:	200e      	movs	r0, #14
10062134:	f000 fba8 	bl	10062888 <tsk_notify_idx>
10062138:	f7ef fd29 	bl	10051b8e <BLE_STACK_ProcessRequest>
1006213c:	b007      	add	sp, #28
1006213e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062140 <__arm_cp.1_0>:
10062140:	20002a7c 	.word	0x20002a7c

10062144 <__arm_cp.1_1>:
10062144:	20002b1c 	.word	0x20002b1c

10062148 <__arm_cp.1_2>:
10062148:	1005275d 	.word	0x1005275d

1006214c <smp_sap_hci_le_enhanced_connection_complete_evt_hndl>:
1006214c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006214e:	b089      	sub	sp, #36	@ 0x24
10062150:	9304      	str	r3, [sp, #16]
10062152:	4617      	mov	r7, r2
10062154:	9105      	str	r1, [sp, #20]
10062156:	4606      	mov	r6, r0
10062158:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
1006215a:	4620      	mov	r0, r4
1006215c:	f7fe f8d0 	bl	10060300 <Is_Address_Initialized>
10062160:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
10062162:	2800      	cmp	r0, #0
10062164:	d008      	beq.n	10062178 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x2c>
10062166:	a807      	add	r0, sp, #28
10062168:	2206      	movs	r2, #6
1006216a:	4621      	mov	r1, r4
1006216c:	f7f0 faf6 	bl	1005275c <BLEPLAT_MemCpy>
10062170:	a806      	add	r0, sp, #24
10062172:	2201      	movs	r2, #1
10062174:	7002      	strb	r2, [r0, #0]
10062176:	e005      	b.n	10062184 <smp_sap_hci_le_enhanced_connection_complete_evt_hndl+0x38>
10062178:	a807      	add	r0, sp, #28
1006217a:	ac06      	add	r4, sp, #24
1006217c:	4621      	mov	r1, r4
1006217e:	f7f4 f97f 	bl	10056480 <GAP_get_current_address>
10062182:	7822      	ldrb	r2, [r4, #0]
10062184:	9700      	str	r7, [sp, #0]
10062186:	9804      	ldr	r0, [sp, #16]
10062188:	9001      	str	r0, [sp, #4]
1006218a:	9502      	str	r5, [sp, #8]
1006218c:	ab07      	add	r3, sp, #28
1006218e:	4630      	mov	r0, r6
10062190:	9905      	ldr	r1, [sp, #20]
10062192:	f7ff ff5b 	bl	1006204c <smp_connection_complete_handler>
10062196:	b009      	add	sp, #36	@ 0x24
10062198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

1006219c <smp_sap_hci_le_long_term_key_request_evt_hndl>:
1006219c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006219e:	b089      	sub	sp, #36	@ 0x24
100621a0:	4615      	mov	r5, r2
100621a2:	460e      	mov	r6, r1
100621a4:	f005 f964 	bl	10067470 <smp_get_remote_device_list_item>
100621a8:	2800      	cmp	r0, #0
100621aa:	d070      	beq.n	1006228e <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
100621ac:	4604      	mov	r4, r0
100621ae:	7a80      	ldrb	r0, [r0, #10]
100621b0:	28bc      	cmp	r0, #188	@ 0xbc
100621b2:	d106      	bne.n	100621c2 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x26>
100621b4:	8927      	ldrh	r7, [r4, #8]
100621b6:	a808      	add	r0, sp, #32
100621b8:	2100      	movs	r1, #0
100621ba:	8001      	strh	r1, [r0, #0]
100621bc:	4626      	mov	r6, r4
100621be:	3628      	adds	r6, #40	@ 0x28
100621c0:	e056      	b.n	10062270 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd4>
100621c2:	4627      	mov	r7, r4
100621c4:	3730      	adds	r7, #48	@ 0x30
100621c6:	7de1      	ldrb	r1, [r4, #23]
100621c8:	0709      	lsls	r1, r1, #28
100621ca:	d409      	bmi.n	100621e0 <smp_sap_hci_le_long_term_key_request_evt_hndl+0x44>
100621cc:	4620      	mov	r0, r4
100621ce:	3028      	adds	r0, #40	@ 0x28
100621d0:	2208      	movs	r2, #8
100621d2:	4631      	mov	r1, r6
100621d4:	f7f0 fac2 	bl	1005275c <BLEPLAT_MemCpy>
100621d8:	703d      	strb	r5, [r7, #0]
100621da:	0a28      	lsrs	r0, r5, #8
100621dc:	7078      	strb	r0, [r7, #1]
100621de:	7aa0      	ldrb	r0, [r4, #10]
100621e0:	8921      	ldrh	r1, [r4, #8]
100621e2:	9102      	str	r1, [sp, #8]
100621e4:	a908      	add	r1, sp, #32
100621e6:	2200      	movs	r2, #0
100621e8:	800a      	strh	r2, [r1, #0]
100621ea:	4626      	mov	r6, r4
100621ec:	3628      	adds	r6, #40	@ 0x28
100621ee:	28bc      	cmp	r0, #188	@ 0xbc
100621f0:	d03d      	beq.n	1006226e <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
100621f2:	4625      	mov	r5, r4
100621f4:	351c      	adds	r5, #28
100621f6:	28f1      	cmp	r0, #241	@ 0xf1
100621f8:	d10f      	bne.n	1006221a <smp_sap_hci_le_long_term_key_request_evt_hndl+0x7e>
100621fa:	7de0      	ldrb	r0, [r4, #23]
100621fc:	0700      	lsls	r0, r0, #28
100621fe:	d436      	bmi.n	1006226e <smp_sap_hci_le_long_term_key_request_evt_hndl+0xd2>
10062200:	aa07      	add	r2, sp, #28
10062202:	9201      	str	r2, [sp, #4]
10062204:	4628      	mov	r0, r5
10062206:	4631      	mov	r1, r6
10062208:	f7ff fa66 	bl	100616d8 <smp_sap_crt_generate_ediv>
1006220c:	2202      	movs	r2, #2
1006220e:	9801      	ldr	r0, [sp, #4]
10062210:	4639      	mov	r1, r7
10062212:	f7f0 fac3 	bl	1005279c <BLEPLAT_MemCmp>
10062216:	2800      	cmp	r0, #0
10062218:	d021      	beq.n	1006225e <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
1006221a:	4638      	mov	r0, r7
1006221c:	4631      	mov	r1, r6
1006221e:	4622      	mov	r2, r4
10062220:	f004 f949 	bl	100664b6 <smp_dep_sdb_find_matching_ltk_read_record>
10062224:	2800      	cmp	r0, #0
10062226:	d01a      	beq.n	1006225e <smp_sap_hci_le_long_term_key_request_evt_hndl+0xc2>
10062228:	9d02      	ldr	r5, [sp, #8]
1006222a:	4628      	mov	r0, r5
1006222c:	f7f7 fa09 	bl	10059642 <hci_le_long_term_key_request_negative_reply_api>
10062230:	7e20      	ldrb	r0, [r4, #24]
10062232:	0780      	lsls	r0, r0, #30
10062234:	d00c      	beq.n	10062250 <smp_sap_hci_le_long_term_key_request_evt_hndl+0xb4>
10062236:	4628      	mov	r0, r5
10062238:	f005 f8fa 	bl	10067430 <smp_get_remote_device_list_index>
1006223c:	4602      	mov	r2, r0
1006223e:	2001      	movs	r0, #1
10062240:	2100      	movs	r1, #0
10062242:	4b15      	ldr	r3, [pc, #84]	@ (10062298 <__arm_cp.3_1>)
10062244:	f7ff fdbc 	bl	10061dc0 <smp_timer_reset>
10062248:	7e20      	ldrb	r0, [r4, #24]
1006224a:	21fc      	movs	r1, #252	@ 0xfc
1006224c:	4001      	ands	r1, r0
1006224e:	7621      	strb	r1, [r4, #24]
10062250:	2002      	movs	r0, #2
10062252:	2203      	movs	r2, #3
10062254:	2300      	movs	r3, #0
10062256:	4629      	mov	r1, r5
10062258:	f001 ff80 	bl	1006415c <aci_gap_pairing_complete_event_push_noinline>
1006225c:	e017      	b.n	1006228e <smp_sap_hci_le_long_term_key_request_evt_hndl+0xf2>
1006225e:	480d      	ldr	r0, [pc, #52]	@ (10062294 <__arm_cp.3_0>)
10062260:	6800      	ldr	r0, [r0, #0]
10062262:	3008      	adds	r0, #8
10062264:	aa08      	add	r2, sp, #32
10062266:	4629      	mov	r1, r5
10062268:	4633      	mov	r3, r6
1006226a:	f7ff fa6b 	bl	10061744 <smp_crt_diversify>
1006226e:	9f02      	ldr	r7, [sp, #8]
10062270:	ad03      	add	r5, sp, #12
10062272:	2100      	movs	r1, #0
10062274:	2210      	movs	r2, #16
10062276:	4628      	mov	r0, r5
10062278:	f7f0 fa80 	bl	1005277c <BLEPLAT_MemSet>
1006227c:	7c22      	ldrb	r2, [r4, #16]
1006227e:	4628      	mov	r0, r5
10062280:	4631      	mov	r1, r6
10062282:	f7f0 fa6b 	bl	1005275c <BLEPLAT_MemCpy>
10062286:	4638      	mov	r0, r7
10062288:	4629      	mov	r1, r5
1006228a:	f7f7 f9cb 	bl	10059624 <hci_le_long_term_key_request_reply_api>
1006228e:	b009      	add	sp, #36	@ 0x24
10062290:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062292:	46c0      	nop			@ (mov r8, r8)

10062294 <__arm_cp.3_0>:
10062294:	20002a7c 	.word	0x20002a7c

10062298 <__arm_cp.3_1>:
10062298:	00007530 	.word	0x00007530

1006229c <smp_sap_hci_encryption_change_evt_hndl>:
1006229c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006229e:	460e      	mov	r6, r1
100622a0:	4605      	mov	r5, r0
100622a2:	4610      	mov	r0, r2
100622a4:	f005 f8e4 	bl	10067470 <smp_get_remote_device_list_item>
100622a8:	2800      	cmp	r0, #0
100622aa:	d056      	beq.n	1006235a <smp_sap_hci_encryption_change_evt_hndl+0xbe>
100622ac:	4604      	mov	r4, r0
100622ae:	4607      	mov	r7, r0
100622b0:	2e00      	cmp	r6, #0
100622b2:	d00b      	beq.n	100622cc <smp_sap_hci_encryption_change_evt_hndl+0x30>
100622b4:	2000      	movs	r0, #0
100622b6:	72b8      	strb	r0, [r7, #10]
100622b8:	3408      	adds	r4, #8
100622ba:	2201      	movs	r2, #1
100622bc:	2d06      	cmp	r5, #6
100622be:	d132      	bne.n	10062326 <smp_sap_hci_encryption_change_evt_hndl+0x8a>
100622c0:	8939      	ldrh	r1, [r7, #8]
100622c2:	4615      	mov	r5, r2
100622c4:	2e06      	cmp	r6, #6
100622c6:	d00e      	beq.n	100622e6 <smp_sap_hci_encryption_change_evt_hndl+0x4a>
100622c8:	2205      	movs	r2, #5
100622ca:	e00d      	b.n	100622e8 <smp_sap_hci_encryption_change_evt_hndl+0x4c>
100622cc:	7af9      	ldrb	r1, [r7, #11]
100622ce:	2001      	movs	r0, #1
100622d0:	4308      	orrs	r0, r1
100622d2:	72f8      	strb	r0, [r7, #11]
100622d4:	7cf9      	ldrb	r1, [r7, #19]
100622d6:	1e89      	subs	r1, r1, #2
100622d8:	2902      	cmp	r1, #2
100622da:	d810      	bhi.n	100622fe <smp_sap_hci_encryption_change_evt_hndl+0x62>
100622dc:	7df9      	ldrb	r1, [r7, #23]
100622de:	0709      	lsls	r1, r1, #28
100622e0:	d508      	bpl.n	100622f4 <smp_sap_hci_encryption_change_evt_hndl+0x58>
100622e2:	2104      	movs	r1, #4
100622e4:	e007      	b.n	100622f6 <smp_sap_hci_encryption_change_evt_hndl+0x5a>
100622e6:	2204      	movs	r2, #4
100622e8:	2002      	movs	r0, #2
100622ea:	2300      	movs	r3, #0
100622ec:	f001 ff36 	bl	1006415c <aci_gap_pairing_complete_event_push_noinline>
100622f0:	462a      	mov	r2, r5
100622f2:	e018      	b.n	10062326 <smp_sap_hci_encryption_change_evt_hndl+0x8a>
100622f4:	2102      	movs	r1, #2
100622f6:	22f9      	movs	r2, #249	@ 0xf9
100622f8:	4010      	ands	r0, r2
100622fa:	1840      	adds	r0, r0, r1
100622fc:	72f8      	strb	r0, [r7, #11]
100622fe:	7ab8      	ldrb	r0, [r7, #10]
10062300:	28ad      	cmp	r0, #173	@ 0xad
10062302:	d005      	beq.n	10062310 <smp_sap_hci_encryption_change_evt_hndl+0x74>
10062304:	28ae      	cmp	r0, #174	@ 0xae
10062306:	d005      	beq.n	10062314 <smp_sap_hci_encryption_change_evt_hndl+0x78>
10062308:	28bc      	cmp	r0, #188	@ 0xbc
1006230a:	d127      	bne.n	1006235c <smp_sap_hci_encryption_change_evt_hndl+0xc0>
1006230c:	20bf      	movs	r0, #191	@ 0xbf
1006230e:	e002      	b.n	10062316 <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10062310:	20af      	movs	r0, #175	@ 0xaf
10062312:	e000      	b.n	10062316 <smp_sap_hci_encryption_change_evt_hndl+0x7a>
10062314:	20f0      	movs	r0, #240	@ 0xf0
10062316:	72b8      	strb	r0, [r7, #10]
10062318:	3408      	adds	r4, #8
1006231a:	200e      	movs	r0, #14
1006231c:	f000 fab4 	bl	10062888 <tsk_notify_idx>
10062320:	f7ef fc35 	bl	10051b8e <BLE_STACK_ProcessRequest>
10062324:	2200      	movs	r2, #0
10062326:	2060      	movs	r0, #96	@ 0x60
10062328:	5c38      	ldrb	r0, [r7, r0]
1006232a:	07c0      	lsls	r0, r0, #31
1006232c:	d10b      	bne.n	10062346 <smp_sap_hci_encryption_change_evt_hndl+0xaa>
1006232e:	7eb8      	ldrb	r0, [r7, #26]
10062330:	06c1      	lsls	r1, r0, #27
10062332:	d505      	bpl.n	10062340 <smp_sap_hci_encryption_change_evt_hndl+0xa4>
10062334:	21ef      	movs	r1, #239	@ 0xef
10062336:	4001      	ands	r1, r0
10062338:	76b9      	strb	r1, [r7, #26]
1006233a:	b241      	sxtb	r1, r0
1006233c:	2900      	cmp	r1, #0
1006233e:	d418      	bmi.n	10062372 <smp_sap_hci_encryption_change_evt_hndl+0xd6>
10062340:	2a00      	cmp	r2, #0
10062342:	d119      	bne.n	10062378 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
10062344:	e009      	b.n	1006235a <smp_sap_hci_encryption_change_evt_hndl+0xbe>
10062346:	7e38      	ldrb	r0, [r7, #24]
10062348:	21fc      	movs	r1, #252	@ 0xfc
1006234a:	4001      	ands	r1, r0
1006234c:	7639      	strb	r1, [r7, #24]
1006234e:	2103      	movs	r1, #3
10062350:	4001      	ands	r1, r0
10062352:	1e48      	subs	r0, r1, #1
10062354:	4181      	sbcs	r1, r0
10062356:	430a      	orrs	r2, r1
10062358:	d10e      	bne.n	10062378 <smp_sap_hci_encryption_change_evt_hndl+0xdc>
1006235a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006235c:	2d06      	cmp	r5, #6
1006235e:	d1db      	bne.n	10062318 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10062360:	28f1      	cmp	r0, #241	@ 0xf1
10062362:	d1d9      	bne.n	10062318 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10062364:	8939      	ldrh	r1, [r7, #8]
10062366:	2002      	movs	r0, #2
10062368:	2200      	movs	r2, #0
1006236a:	4613      	mov	r3, r2
1006236c:	f001 fef6 	bl	1006415c <aci_gap_pairing_complete_event_push_noinline>
10062370:	e7d2      	b.n	10062318 <smp_sap_hci_encryption_change_evt_hndl+0x7c>
10062372:	216f      	movs	r1, #111	@ 0x6f
10062374:	4008      	ands	r0, r1
10062376:	76b8      	strb	r0, [r7, #26]
10062378:	8820      	ldrh	r0, [r4, #0]
1006237a:	f005 f859 	bl	10067430 <smp_get_remote_device_list_index>
1006237e:	4602      	mov	r2, r0
10062380:	2001      	movs	r0, #1
10062382:	2100      	movs	r1, #0
10062384:	4b01      	ldr	r3, [pc, #4]	@ (1006238c <__arm_cp.4_0>)
10062386:	f7ff fd1b 	bl	10061dc0 <smp_timer_reset>
1006238a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006238c <__arm_cp.4_0>:
1006238c:	00007530 	.word	0x00007530

10062390 <smp_sap_hci_disconnection_complete_evt_hndl>:
10062390:	b510      	push	{r4, lr}
10062392:	f005 f86d 	bl	10067470 <smp_get_remote_device_list_item>
10062396:	2800      	cmp	r0, #0
10062398:	d025      	beq.n	100623e6 <smp_sap_hci_disconnection_complete_evt_hndl+0x56>
1006239a:	4604      	mov	r4, r0
1006239c:	8900      	ldrh	r0, [r0, #8]
1006239e:	f005 f847 	bl	10067430 <smp_get_remote_device_list_index>
100623a2:	4602      	mov	r2, r0
100623a4:	2001      	movs	r0, #1
100623a6:	2100      	movs	r1, #0
100623a8:	4b0f      	ldr	r3, [pc, #60]	@ (100623e8 <__arm_cp.5_0>)
100623aa:	f7ff fd09 	bl	10061dc0 <smp_timer_reset>
100623ae:	8920      	ldrh	r0, [r4, #8]
100623b0:	f7ff fcca 	bl	10061d48 <smp_rxp_flush_packet_queues>
100623b4:	2060      	movs	r0, #96	@ 0x60
100623b6:	5c20      	ldrb	r0, [r4, r0]
100623b8:	07c0      	lsls	r0, r0, #31
100623ba:	7aa0      	ldrb	r0, [r4, #10]
100623bc:	d104      	bne.n	100623c8 <smp_sap_hci_disconnection_complete_evt_hndl+0x38>
100623be:	3060      	adds	r0, #96	@ 0x60
100623c0:	b2c0      	uxtb	r0, r0
100623c2:	2851      	cmp	r0, #81	@ 0x51
100623c4:	d304      	bcc.n	100623d0 <smp_sap_hci_disconnection_complete_evt_hndl+0x40>
100623c6:	e007      	b.n	100623d8 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
100623c8:	3050      	adds	r0, #80	@ 0x50
100623ca:	b2c0      	uxtb	r0, r0
100623cc:	2840      	cmp	r0, #64	@ 0x40
100623ce:	d803      	bhi.n	100623d8 <smp_sap_hci_disconnection_complete_evt_hndl+0x48>
100623d0:	2102      	movs	r1, #2
100623d2:	4620      	mov	r0, r4
100623d4:	f004 f8ea 	bl	100665ac <smp_pp3_pairing_completed_update_stats>
100623d8:	20fe      	movs	r0, #254	@ 0xfe
100623da:	72a0      	strb	r0, [r4, #10]
100623dc:	200e      	movs	r0, #14
100623de:	f000 fa53 	bl	10062888 <tsk_notify_idx>
100623e2:	f7ef fbd4 	bl	10051b8e <BLE_STACK_ProcessRequest>
100623e6:	bd10      	pop	{r4, pc}

100623e8 <__arm_cp.5_0>:
100623e8:	00007530 	.word	0x00007530

100623ec <smp_sap_scp_force_debug_key_usage>:
100623ec:	b5b0      	push	{r4, r5, r7, lr}
100623ee:	4605      	mov	r5, r0
100623f0:	2400      	movs	r4, #0
100623f2:	4620      	mov	r0, r4
100623f4:	f005 f888 	bl	10067508 <smp_scp_is_another_sc_pairing_ongoing>
100623f8:	2800      	cmp	r0, #0
100623fa:	d001      	beq.n	10062400 <smp_sap_scp_force_debug_key_usage+0x14>
100623fc:	240c      	movs	r4, #12
100623fe:	e004      	b.n	1006240a <smp_sap_scp_force_debug_key_usage+0x1e>
10062400:	2d01      	cmp	r5, #1
10062402:	d102      	bne.n	1006240a <smp_sap_scp_force_debug_key_usage+0x1e>
10062404:	2001      	movs	r0, #1
10062406:	f005 f89f 	bl	10067548 <smp_scp_init_ucfg_weak>
1006240a:	4620      	mov	r0, r4
1006240c:	bdb0      	pop	{r4, r5, r7, pc}

1006240e <secure_connections_csr_ucfg_weak>:
1006240e:	2000      	movs	r0, #0
10062410:	4770      	bx	lr

10062412 <smp_sap_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg_weak>:
10062412:	4770      	bx	lr

10062414 <smp_sap_hci_le_generate_dhkey_complete_evt_hndl_ucfg_weak>:
10062414:	4770      	bx	lr
	...

10062418 <smp_sap_l2c_acl_data_hndl>:
10062418:	b5b0      	push	{r4, r5, r7, lr}
1006241a:	460c      	mov	r4, r1
1006241c:	4605      	mov	r5, r0
1006241e:	8808      	ldrh	r0, [r1, #0]
10062420:	f005 f826 	bl	10067470 <smp_get_remote_device_list_item>
10062424:	2800      	cmp	r0, #0
10062426:	d025      	beq.n	10062474 <smp_sap_l2c_acl_data_hndl+0x5c>
10062428:	2d00      	cmp	r5, #0
1006242a:	d00f      	beq.n	1006244c <smp_sap_l2c_acl_data_hndl+0x34>
1006242c:	2d01      	cmp	r5, #1
1006242e:	d121      	bne.n	10062474 <smp_sap_l2c_acl_data_hndl+0x5c>
10062430:	8860      	ldrh	r0, [r4, #2]
10062432:	2841      	cmp	r0, #65	@ 0x41
10062434:	d81e      	bhi.n	10062474 <smp_sap_l2c_acl_data_hndl+0x5c>
10062436:	4812      	ldr	r0, [pc, #72]	@ (10062480 <__arm_cp.0_0>)
10062438:	6800      	ldr	r0, [r0, #0]
1006243a:	4621      	mov	r1, r4
1006243c:	f000 fc1a 	bl	10062c74 <ACL_list_insert_tail>
10062440:	200f      	movs	r0, #15
10062442:	f000 fa21 	bl	10062888 <tsk_notify_idx>
10062446:	f7ef fba2 	bl	10051b8e <BLE_STACK_ProcessRequest>
1006244a:	e016      	b.n	1006247a <smp_sap_l2c_acl_data_hndl+0x62>
1006244c:	6861      	ldr	r1, [r4, #4]
1006244e:	7a09      	ldrb	r1, [r1, #8]
10062450:	290b      	cmp	r1, #11
10062452:	d109      	bne.n	10062468 <smp_sap_l2c_acl_data_hndl+0x50>
10062454:	7e01      	ldrb	r1, [r0, #24]
10062456:	2203      	movs	r2, #3
10062458:	400a      	ands	r2, r1
1006245a:	2a01      	cmp	r2, #1
1006245c:	d10a      	bne.n	10062474 <smp_sap_l2c_acl_data_hndl+0x5c>
1006245e:	22fc      	movs	r2, #252	@ 0xfc
10062460:	4011      	ands	r1, r2
10062462:	1c89      	adds	r1, r1, #2
10062464:	7601      	strb	r1, [r0, #24]
10062466:	e005      	b.n	10062474 <smp_sap_l2c_acl_data_hndl+0x5c>
10062468:	1f8a      	subs	r2, r1, #6
1006246a:	b2d2      	uxtb	r2, r2
1006246c:	2a04      	cmp	r2, #4
1006246e:	d801      	bhi.n	10062474 <smp_sap_l2c_acl_data_hndl+0x5c>
10062470:	f004 fe0c 	bl	1006708c <smp_pp3_keys_distribution_signaling_ack>
10062474:	4620      	mov	r0, r4
10062476:	f7f2 fd09 	bl	10054e8c <ACL_pkt_release>
1006247a:	2000      	movs	r0, #0
1006247c:	bdb0      	pop	{r4, r5, r7, pc}
1006247e:	46c0      	nop			@ (mov r8, r8)

10062480 <__arm_cp.0_0>:
10062480:	20002b1c 	.word	0x20002b1c

10062484 <smp_get_sec_level_for_mode1>:
10062484:	b510      	push	{r4, lr}
10062486:	7ac3      	ldrb	r3, [r0, #11]
10062488:	075c      	lsls	r4, r3, #29
1006248a:	0fa2      	lsrs	r2, r4, #30
1006248c:	d009      	beq.n	100624a2 <smp_get_sec_level_for_mode1+0x1e>
1006248e:	2201      	movs	r2, #1
10062490:	4013      	ands	r3, r2
10062492:	425a      	negs	r2, r3
10062494:	415a      	adcs	r2, r3
10062496:	7c03      	ldrb	r3, [r0, #16]
10062498:	2003      	movs	r0, #3
1006249a:	2b10      	cmp	r3, #16
1006249c:	d009      	beq.n	100624b2 <smp_get_sec_level_for_mode1+0x2e>
1006249e:	4603      	mov	r3, r0
100624a0:	e008      	b.n	100624b4 <smp_get_sec_level_for_mode1+0x30>
100624a2:	07da      	lsls	r2, r3, #31
100624a4:	d10a      	bne.n	100624bc <smp_get_sec_level_for_mode1+0x38>
100624a6:	7a80      	ldrb	r0, [r0, #10]
100624a8:	2201      	movs	r2, #1
100624aa:	28f1      	cmp	r0, #241	@ 0xf1
100624ac:	d009      	beq.n	100624c2 <smp_get_sec_level_for_mode1+0x3e>
100624ae:	4613      	mov	r3, r2
100624b0:	e008      	b.n	100624c4 <smp_get_sec_level_for_mode1+0x40>
100624b2:	2304      	movs	r3, #4
100624b4:	2c00      	cmp	r4, #0
100624b6:	d405      	bmi.n	100624c4 <smp_get_sec_level_for_mode1+0x40>
100624b8:	4603      	mov	r3, r0
100624ba:	e003      	b.n	100624c4 <smp_get_sec_level_for_mode1+0x40>
100624bc:	2302      	movs	r3, #2
100624be:	2200      	movs	r2, #0
100624c0:	e000      	b.n	100624c4 <smp_get_sec_level_for_mode1+0x40>
100624c2:	2302      	movs	r3, #2
100624c4:	2a00      	cmp	r2, #0
100624c6:	d101      	bne.n	100624cc <smp_get_sec_level_for_mode1+0x48>
100624c8:	4618      	mov	r0, r3
100624ca:	e000      	b.n	100624ce <smp_get_sec_level_for_mode1+0x4a>
100624cc:	2001      	movs	r0, #1
100624ce:	2900      	cmp	r1, #0
100624d0:	d000      	beq.n	100624d4 <smp_get_sec_level_for_mode1+0x50>
100624d2:	4618      	mov	r0, r3
100624d4:	bd10      	pop	{r4, pc}

100624d6 <smp_sap_get_security_level>:
100624d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100624d8:	461c      	mov	r4, r3
100624da:	4616      	mov	r6, r2
100624dc:	460d      	mov	r5, r1
100624de:	2100      	movs	r1, #0
100624e0:	7029      	strb	r1, [r5, #0]
100624e2:	7011      	strb	r1, [r2, #0]
100624e4:	7019      	strb	r1, [r3, #0]
100624e6:	f004 ffc3 	bl	10067470 <smp_get_remote_device_list_item>
100624ea:	2800      	cmp	r0, #0
100624ec:	d017      	beq.n	1006251e <smp_sap_get_security_level+0x48>
100624ee:	4607      	mov	r7, r0
100624f0:	2101      	movs	r1, #1
100624f2:	7029      	strb	r1, [r5, #0]
100624f4:	7a80      	ldrb	r0, [r0, #10]
100624f6:	28f1      	cmp	r0, #241	@ 0xf1
100624f8:	d110      	bne.n	1006251c <smp_sap_get_security_level+0x46>
100624fa:	9100      	str	r1, [sp, #0]
100624fc:	2100      	movs	r1, #0
100624fe:	4638      	mov	r0, r7
10062500:	f7ff ffc0 	bl	10062484 <smp_get_sec_level_for_mode1>
10062504:	7030      	strb	r0, [r6, #0]
10062506:	2801      	cmp	r0, #1
10062508:	d109      	bne.n	1006251e <smp_sap_get_security_level+0x48>
1006250a:	2002      	movs	r0, #2
1006250c:	7028      	strb	r0, [r5, #0]
1006250e:	7af9      	ldrb	r1, [r7, #11]
10062510:	0749      	lsls	r1, r1, #29
10062512:	0f89      	lsrs	r1, r1, #30
10062514:	d100      	bne.n	10062518 <smp_sap_get_security_level+0x42>
10062516:	9800      	ldr	r0, [sp, #0]
10062518:	7020      	strb	r0, [r4, #0]
1006251a:	e000      	b.n	1006251e <smp_sap_get_security_level+0x48>
1006251c:	7031      	strb	r1, [r6, #0]
1006251e:	2000      	movs	r0, #0
10062520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10062522 <smp_sap_get_remote_address_check_addr_type>:
10062522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062524:	461c      	mov	r4, r3
10062526:	4615      	mov	r5, r2
10062528:	460f      	mov	r7, r1
1006252a:	f004 ffa1 	bl	10067470 <smp_get_remote_device_list_item>
1006252e:	2800      	cmp	r0, #0
10062530:	d016      	beq.n	10062560 <smp_sap_get_remote_address_check_addr_type+0x3e>
10062532:	4606      	mov	r6, r0
10062534:	1c81      	adds	r1, r0, #2
10062536:	2206      	movs	r2, #6
10062538:	4628      	mov	r0, r5
1006253a:	f7f0 f90f 	bl	1005275c <BLEPLAT_MemCpy>
1006253e:	7870      	ldrb	r0, [r6, #1]
10062540:	4669      	mov	r1, sp
10062542:	7008      	strb	r0, [r1, #0]
10062544:	2f00      	cmp	r7, #0
10062546:	d01f      	beq.n	10062588 <smp_sap_get_remote_address_check_addr_type+0x66>
10062548:	2800      	cmp	r0, #0
1006254a:	d01d      	beq.n	10062588 <smp_sap_get_remote_address_check_addr_type+0x66>
1006254c:	2801      	cmp	r0, #1
1006254e:	d109      	bne.n	10062564 <smp_sap_get_remote_address_check_addr_type+0x42>
10062550:	79f1      	ldrb	r1, [r6, #7]
10062552:	098a      	lsrs	r2, r1, #6
10062554:	2001      	movs	r0, #1
10062556:	2a02      	cmp	r2, #2
10062558:	d816      	bhi.n	10062588 <smp_sap_get_remote_address_check_addr_type+0x66>
1006255a:	2940      	cmp	r1, #64	@ 0x40
1006255c:	d203      	bcs.n	10062566 <smp_sap_get_remote_address_check_addr_type+0x44>
1006255e:	e013      	b.n	10062588 <smp_sap_get_remote_address_check_addr_type+0x66>
10062560:	2002      	movs	r0, #2
10062562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062564:	79f1      	ldrb	r1, [r6, #7]
10062566:	20c0      	movs	r0, #192	@ 0xc0
10062568:	4008      	ands	r0, r1
1006256a:	2840      	cmp	r0, #64	@ 0x40
1006256c:	d108      	bne.n	10062580 <smp_sap_get_remote_address_check_addr_type+0x5e>
1006256e:	4669      	mov	r1, sp
10062570:	4630      	mov	r0, r6
10062572:	462a      	mov	r2, r5
10062574:	f003 ff88 	bl	10066488 <smp_dep_sdb_find_bonding_record_read_address>
10062578:	2800      	cmp	r0, #0
1006257a:	d003      	beq.n	10062584 <smp_sap_get_remote_address_check_addr_type+0x62>
1006257c:	2081      	movs	r0, #129	@ 0x81
1006257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062580:	2086      	movs	r0, #134	@ 0x86
10062582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10062584:	4668      	mov	r0, sp
10062586:	7800      	ldrb	r0, [r0, #0]
10062588:	7020      	strb	r0, [r4, #0]
1006258a:	2000      	movs	r0, #0
1006258c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006258e <smp_sap_check_is_peer_device_bonded>:
1006258e:	b5b0      	push	{r4, r5, r7, lr}
10062590:	f004 ff6e 	bl	10067470 <smp_get_remote_device_list_item>
10062594:	2800      	cmp	r0, #0
10062596:	d011      	beq.n	100625bc <smp_sap_check_is_peer_device_bonded+0x2e>
10062598:	4604      	mov	r4, r0
1006259a:	2500      	movs	r5, #0
1006259c:	4629      	mov	r1, r5
1006259e:	f003 ff1b 	bl	100663d8 <smp_dep_sdb_find_bonding_record_by_conn_addr>
100625a2:	2800      	cmp	r0, #0
100625a4:	d00b      	beq.n	100625be <smp_sap_check_is_peer_device_bonded+0x30>
100625a6:	7aa1      	ldrb	r1, [r4, #10]
100625a8:	29f1      	cmp	r1, #241	@ 0xf1
100625aa:	d105      	bne.n	100625b8 <smp_sap_check_is_peer_device_bonded+0x2a>
100625ac:	7ba1      	ldrb	r1, [r4, #14]
100625ae:	07ca      	lsls	r2, r1, #31
100625b0:	d002      	beq.n	100625b8 <smp_sap_check_is_peer_device_bonded+0x2a>
100625b2:	0789      	lsls	r1, r1, #30
100625b4:	d500      	bpl.n	100625b8 <smp_sap_check_is_peer_device_bonded+0x2a>
100625b6:	2000      	movs	r0, #0
100625b8:	4605      	mov	r5, r0
100625ba:	e000      	b.n	100625be <smp_sap_check_is_peer_device_bonded+0x30>
100625bc:	2502      	movs	r5, #2
100625be:	4628      	mov	r0, r5
100625c0:	bdb0      	pop	{r4, r5, r7, pc}

100625c2 <smp_sap_check_encryption_key_size>:
100625c2:	b510      	push	{r4, lr}
100625c4:	460c      	mov	r4, r1
100625c6:	f004 ff53 	bl	10067470 <smp_get_remote_device_list_item>
100625ca:	2800      	cmp	r0, #0
100625cc:	d005      	beq.n	100625da <smp_sap_check_encryption_key_size+0x18>
100625ce:	7a81      	ldrb	r1, [r0, #10]
100625d0:	29f1      	cmp	r1, #241	@ 0xf1
100625d2:	d102      	bne.n	100625da <smp_sap_check_encryption_key_size+0x18>
100625d4:	7c00      	ldrb	r0, [r0, #16]
100625d6:	42a0      	cmp	r0, r4
100625d8:	d201      	bcs.n	100625de <smp_sap_check_encryption_key_size+0x1c>
100625da:	20b6      	movs	r0, #182	@ 0xb6
100625dc:	bd10      	pop	{r4, pc}
100625de:	2000      	movs	r0, #0
100625e0:	bd10      	pop	{r4, pc}

100625e2 <smp_sap_forget_device_upon_disconnection>:
100625e2:	b580      	push	{r7, lr}
100625e4:	f004 ff44 	bl	10067470 <smp_get_remote_device_list_item>
100625e8:	2800      	cmp	r0, #0
100625ea:	d006      	beq.n	100625fa <smp_sap_forget_device_upon_disconnection+0x18>
100625ec:	2160      	movs	r1, #96	@ 0x60
100625ee:	5c42      	ldrb	r2, [r0, r1]
100625f0:	2380      	movs	r3, #128	@ 0x80
100625f2:	4313      	orrs	r3, r2
100625f4:	5443      	strb	r3, [r0, r1]
100625f6:	2000      	movs	r0, #0
100625f8:	bd80      	pop	{r7, pc}
100625fa:	2081      	movs	r0, #129	@ 0x81
100625fc:	bd80      	pop	{r7, pc}

100625fe <smp_sap_sm2_packet_data_signing_compute>:
100625fe:	b5f0      	push	{r4, r5, r6, r7, lr}
10062600:	b089      	sub	sp, #36	@ 0x24
10062602:	460e      	mov	r6, r1
10062604:	f004 ff34 	bl	10067470 <smp_get_remote_device_list_item>
10062608:	2800      	cmp	r0, #0
1006260a:	d025      	beq.n	10062658 <smp_sap_sm2_packet_data_signing_compute+0x5a>
1006260c:	4605      	mov	r5, r0
1006260e:	301c      	adds	r0, #28
10062610:	a905      	add	r1, sp, #20
10062612:	9100      	str	r1, [sp, #0]
10062614:	f7ff f92c 	bl	10061870 <smp_crt_generate_csrk>
10062618:	8874      	ldrh	r4, [r6, #2]
1006261a:	462b      	mov	r3, r5
1006261c:	3368      	adds	r3, #104	@ 0x68
1006261e:	1d27      	adds	r7, r4, #4
10062620:	b2b9      	uxth	r1, r7
10062622:	2204      	movs	r2, #4
10062624:	4630      	mov	r0, r6
10062626:	f7f2 fc6f 	bl	10054f08 <ACL_pkt_write>
1006262a:	b2fa      	uxtb	r2, r7
1006262c:	af01      	add	r7, sp, #4
1006262e:	9800      	ldr	r0, [sp, #0]
10062630:	4631      	mov	r1, r6
10062632:	463b      	mov	r3, r7
10062634:	f7ff f92a 	bl	1006188c <smp_crt_generate_cmac_tag>
10062638:	3708      	adds	r7, #8
1006263a:	4620      	mov	r0, r4
1006263c:	3008      	adds	r0, #8
1006263e:	b281      	uxth	r1, r0
10062640:	2208      	movs	r2, #8
10062642:	4630      	mov	r0, r6
10062644:	463b      	mov	r3, r7
10062646:	f7f2 fc5f 	bl	10054f08 <ACL_pkt_write>
1006264a:	340c      	adds	r4, #12
1006264c:	8074      	strh	r4, [r6, #2]
1006264e:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
10062650:	1c40      	adds	r0, r0, #1
10062652:	66a8      	str	r0, [r5, #104]	@ 0x68
10062654:	2000      	movs	r0, #0
10062656:	e000      	b.n	1006265a <smp_sap_sm2_packet_data_signing_compute+0x5c>
10062658:	2002      	movs	r0, #2
1006265a:	b009      	add	sp, #36	@ 0x24
1006265c:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006265e <smp_sap_sm2_packet_data_signing_validate>:
1006265e:	b5f0      	push	{r4, r5, r6, r7, lr}
10062660:	b08d      	sub	sp, #52	@ 0x34
10062662:	460d      	mov	r5, r1
10062664:	884f      	ldrh	r7, [r1, #2]
10062666:	f004 ff03 	bl	10067470 <smp_get_remote_device_list_item>
1006266a:	2800      	cmp	r0, #0
1006266c:	d005      	beq.n	1006267a <smp_sap_sm2_packet_data_signing_validate+0x1c>
1006266e:	4604      	mov	r4, r0
10062670:	7c40      	ldrb	r0, [r0, #17]
10062672:	0640      	lsls	r0, r0, #25
10062674:	d403      	bmi.n	1006267e <smp_sap_sm2_packet_data_signing_validate+0x20>
10062676:	20b1      	movs	r0, #177	@ 0xb1
10062678:	e034      	b.n	100626e4 <smp_sap_sm2_packet_data_signing_validate+0x86>
1006267a:	2002      	movs	r0, #2
1006267c:	e032      	b.n	100626e4 <smp_sap_sm2_packet_data_signing_validate+0x86>
1006267e:	4621      	mov	r1, r4
10062680:	3148      	adds	r1, #72	@ 0x48
10062682:	a805      	add	r0, sp, #20
10062684:	2210      	movs	r2, #16
10062686:	f7f0 f869 	bl	1005275c <BLEPLAT_MemCpy>
1006268a:	3f08      	subs	r7, #8
1006268c:	b2b9      	uxth	r1, r7
1006268e:	220c      	movs	r2, #12
10062690:	ae02      	add	r6, sp, #8
10062692:	4628      	mov	r0, r5
10062694:	4633      	mov	r3, r6
10062696:	f7f2 fc15 	bl	10054ec4 <ACL_pkt_read>
1006269a:	7830      	ldrb	r0, [r6, #0]
1006269c:	7871      	ldrb	r1, [r6, #1]
1006269e:	0209      	lsls	r1, r1, #8
100626a0:	1808      	adds	r0, r1, r0
100626a2:	78b1      	ldrb	r1, [r6, #2]
100626a4:	0409      	lsls	r1, r1, #16
100626a6:	1840      	adds	r0, r0, r1
100626a8:	78f1      	ldrb	r1, [r6, #3]
100626aa:	0609      	lsls	r1, r1, #24
100626ac:	1841      	adds	r1, r0, r1
100626ae:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
100626b0:	4281      	cmp	r1, r0
100626b2:	d801      	bhi.n	100626b8 <smp_sap_sm2_packet_data_signing_validate+0x5a>
100626b4:	1c40      	adds	r0, r0, #1
100626b6:	d110      	bne.n	100626da <smp_sap_sm2_packet_data_signing_validate+0x7c>
100626b8:	9101      	str	r1, [sp, #4]
100626ba:	b2fa      	uxtb	r2, r7
100626bc:	a805      	add	r0, sp, #20
100626be:	ae09      	add	r6, sp, #36	@ 0x24
100626c0:	4629      	mov	r1, r5
100626c2:	4633      	mov	r3, r6
100626c4:	f7ff f8e2 	bl	1006188c <smp_crt_generate_cmac_tag>
100626c8:	a802      	add	r0, sp, #8
100626ca:	1d00      	adds	r0, r0, #4
100626cc:	3608      	adds	r6, #8
100626ce:	2208      	movs	r2, #8
100626d0:	4631      	mov	r1, r6
100626d2:	f7f0 f863 	bl	1005279c <BLEPLAT_MemCmp>
100626d6:	2800      	cmp	r0, #0
100626d8:	d001      	beq.n	100626de <smp_sap_sm2_packet_data_signing_validate+0x80>
100626da:	2005      	movs	r0, #5
100626dc:	e002      	b.n	100626e4 <smp_sap_sm2_packet_data_signing_validate+0x86>
100626de:	9801      	ldr	r0, [sp, #4]
100626e0:	66e0      	str	r0, [r4, #108]	@ 0x6c
100626e2:	2000      	movs	r0, #0
100626e4:	b00d      	add	sp, #52	@ 0x34
100626e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100626e8 <nvm_gatt_db_read_init>:
100626e8:	4801      	ldr	r0, [pc, #4]	@ (100626f0 <__arm_cp.0_0>)
100626ea:	2100      	movs	r1, #0
100626ec:	7001      	strb	r1, [r0, #0]
100626ee:	4770      	bx	lr

100626f0 <__arm_cp.0_0>:
100626f0:	20002b20 	.word	0x20002b20

100626f4 <nvm_gatt_db_read_next_record>:
100626f4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100626f6:	4603      	mov	r3, r0
100626f8:	4d06      	ldr	r5, [pc, #24]	@ (10062714 <__arm_cp.1_0>)
100626fa:	7828      	ldrb	r0, [r5, #0]
100626fc:	210c      	movs	r1, #12
100626fe:	9100      	str	r1, [sp, #0]
10062700:	2401      	movs	r4, #1
10062702:	2200      	movs	r2, #0
10062704:	4621      	mov	r1, r4
10062706:	f7ef ff61 	bl	100525cc <BLEPLAT_NvmGet>
1006270a:	702c      	strb	r4, [r5, #0]
1006270c:	f000 f804 	bl	10062718 <nvm_convert_bleplat_to_blestack_status>
10062710:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}
10062712:	46c0      	nop			@ (mov r8, r8)

10062714 <__arm_cp.1_0>:
10062714:	20002b20 	.word	0x20002b20

10062718 <nvm_convert_bleplat_to_blestack_status>:
10062718:	1cc0      	adds	r0, r0, #3
1006271a:	b2c0      	uxtb	r0, r0
1006271c:	2804      	cmp	r0, #4
1006271e:	d302      	bcc.n	10062726 <nvm_convert_bleplat_to_blestack_status+0xe>
10062720:	207e      	movs	r0, #126	@ 0x7e
10062722:	43c0      	mvns	r0, r0
10062724:	e002      	b.n	1006272c <nvm_convert_bleplat_to_blestack_status+0x14>
10062726:	00c1      	lsls	r1, r0, #3
10062728:	4801      	ldr	r0, [pc, #4]	@ (10062730 <__arm_cp.2_0>)
1006272a:	40c8      	lsrs	r0, r1
1006272c:	b2c0      	uxtb	r0, r0
1006272e:	4770      	bx	lr

10062730 <__arm_cp.2_0>:
10062730:	00b4b7b3 	.word	0x00b4b7b3

10062734 <nvm_gatt_db_read_full_current_record>:
10062734:	b5e0      	push	{r5, r6, r7, lr}
10062736:	4603      	mov	r3, r0
10062738:	9100      	str	r1, [sp, #0]
1006273a:	2002      	movs	r0, #2
1006273c:	2101      	movs	r1, #1
1006273e:	220c      	movs	r2, #12
10062740:	f7ef ff44 	bl	100525cc <BLEPLAT_NvmGet>
10062744:	f7ff ffe8 	bl	10062718 <nvm_convert_bleplat_to_blestack_status>
10062748:	bd8c      	pop	{r2, r3, r7, pc}

1006274a <nvm_gatt_db_update_record>:
1006274a:	b5e0      	push	{r5, r6, r7, lr}
1006274c:	460b      	mov	r3, r1
1006274e:	4601      	mov	r1, r0
10062750:	8900      	ldrh	r0, [r0, #8]
10062752:	9000      	str	r0, [sp, #0]
10062754:	2001      	movs	r0, #1
10062756:	220c      	movs	r2, #12
10062758:	f7ef feea 	bl	10052530 <BLEPLAT_NvmAdd>
1006275c:	f7ff ffdc 	bl	10062718 <nvm_convert_bleplat_to_blestack_status>
10062760:	bd8c      	pop	{r2, r3, r7, pc}
	...

10062764 <nvm_sec_db_read_init>:
10062764:	4801      	ldr	r0, [pc, #4]	@ (1006276c <__arm_cp.5_0>)
10062766:	2100      	movs	r1, #0
10062768:	7001      	strb	r1, [r0, #0]
1006276a:	4770      	bx	lr

1006276c <__arm_cp.5_0>:
1006276c:	20002b21 	.word	0x20002b21

10062770 <nvm_sec_db_read_next_record>:
10062770:	b51c      	push	{r2, r3, r4, lr}
10062772:	4603      	mov	r3, r0
10062774:	4c06      	ldr	r4, [pc, #24]	@ (10062790 <__arm_cp.6_0>)
10062776:	7820      	ldrb	r0, [r4, #0]
10062778:	2150      	movs	r1, #80	@ 0x50
1006277a:	9100      	str	r1, [sp, #0]
1006277c:	2100      	movs	r1, #0
1006277e:	460a      	mov	r2, r1
10062780:	f7ef ff24 	bl	100525cc <BLEPLAT_NvmGet>
10062784:	2101      	movs	r1, #1
10062786:	7021      	strb	r1, [r4, #0]
10062788:	f7ff ffc6 	bl	10062718 <nvm_convert_bleplat_to_blestack_status>
1006278c:	bd1c      	pop	{r2, r3, r4, pc}
1006278e:	46c0      	nop			@ (mov r8, r8)

10062790 <__arm_cp.6_0>:
10062790:	20002b21 	.word	0x20002b21

10062794 <nvm_sec_db_add_record>:
10062794:	b5e0      	push	{r5, r6, r7, lr}
10062796:	4601      	mov	r1, r0
10062798:	2000      	movs	r0, #0
1006279a:	9000      	str	r0, [sp, #0]
1006279c:	2250      	movs	r2, #80	@ 0x50
1006279e:	4603      	mov	r3, r0
100627a0:	f7ef fec6 	bl	10052530 <BLEPLAT_NvmAdd>
100627a4:	f7ff ffb8 	bl	10062718 <nvm_convert_bleplat_to_blestack_status>
100627a8:	bd8c      	pop	{r2, r3, r7, pc}

100627aa <nvm_sec_db_get_record_count>:
100627aa:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100627ac:	2400      	movs	r4, #0
100627ae:	4621      	mov	r1, r4
100627b0:	4620      	mov	r0, r4
100627b2:	460d      	mov	r5, r1
100627b4:	9400      	str	r4, [sp, #0]
100627b6:	b2c0      	uxtb	r0, r0
100627b8:	4621      	mov	r1, r4
100627ba:	4622      	mov	r2, r4
100627bc:	4623      	mov	r3, r4
100627be:	f7ef ff05 	bl	100525cc <BLEPLAT_NvmGet>
100627c2:	1cc2      	adds	r2, r0, #3
100627c4:	1c69      	adds	r1, r5, #1
100627c6:	2001      	movs	r0, #1
100627c8:	2a00      	cmp	r2, #0
100627ca:	d1f2      	bne.n	100627b2 <nvm_sec_db_get_record_count+0x8>
100627cc:	b2e8      	uxtb	r0, r5
100627ce:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100627d0 <nvm_discard_current_record>:
100627d0:	b580      	push	{r7, lr}
100627d2:	2002      	movs	r0, #2
100627d4:	f7ef ff9c 	bl	10052710 <BLEPLAT_NvmDiscard>
100627d8:	bd80      	pop	{r7, pc}

100627da <nvm_dev_id_data_get_record>:
100627da:	b5e0      	push	{r5, r6, r7, lr}
100627dc:	4603      	mov	r3, r0
100627de:	2026      	movs	r0, #38	@ 0x26
100627e0:	9000      	str	r0, [sp, #0]
100627e2:	2102      	movs	r1, #2
100627e4:	2000      	movs	r0, #0
100627e6:	4602      	mov	r2, r0
100627e8:	f7ef fef0 	bl	100525cc <BLEPLAT_NvmGet>
100627ec:	2800      	cmp	r0, #0
100627ee:	d000      	beq.n	100627f2 <nvm_dev_id_data_get_record+0x18>
100627f0:	2081      	movs	r0, #129	@ 0x81
100627f2:	bd8c      	pop	{r2, r3, r7, pc}

100627f4 <nvm_dev_id_data_add_record>:
100627f4:	b5e0      	push	{r5, r6, r7, lr}
100627f6:	4601      	mov	r1, r0
100627f8:	2300      	movs	r3, #0
100627fa:	9300      	str	r3, [sp, #0]
100627fc:	2002      	movs	r0, #2
100627fe:	2226      	movs	r2, #38	@ 0x26
10062800:	f7ef fe96 	bl	10052530 <BLEPLAT_NvmAdd>
10062804:	2800      	cmp	r0, #0
10062806:	d000      	beq.n	1006280a <nvm_dev_id_data_add_record+0x16>
10062808:	2081      	movs	r0, #129	@ 0x81
1006280a:	bd8c      	pop	{r2, r3, r7, pc}

1006280c <tsk_init>:
1006280c:	4803      	ldr	r0, [pc, #12]	@ (1006281c <__arm_cp.0_0>)
1006280e:	6800      	ldr	r0, [r0, #0]
10062810:	2100      	movs	r1, #0
10062812:	6081      	str	r1, [r0, #8]
10062814:	60c1      	str	r1, [r0, #12]
10062816:	6101      	str	r1, [r0, #16]
10062818:	6001      	str	r1, [r0, #0]
1006281a:	4770      	bx	lr

1006281c <__arm_cp.0_0>:
1006281c:	20002b24 	.word	0x20002b24

10062820 <tsk_scheduler>:
10062820:	b570      	push	{r4, r5, r6, lr}
10062822:	4d17      	ldr	r5, [pc, #92]	@ (10062880 <__arm_cp.1_0>)
10062824:	6828      	ldr	r0, [r5, #0]
10062826:	f3ef 8110 	mrs	r1, PRIMASK
1006282a:	b672      	cpsid	i
1006282c:	6801      	ldr	r1, [r0, #0]
1006282e:	2600      	movs	r6, #0
10062830:	6006      	str	r6, [r0, #0]
10062832:	6842      	ldr	r2, [r0, #4]
10062834:	430a      	orrs	r2, r1
10062836:	6042      	str	r2, [r0, #4]
10062838:	b662      	cpsie	i
1006283a:	682c      	ldr	r4, [r5, #0]
1006283c:	3410      	adds	r4, #16
1006283e:	6820      	ldr	r0, [r4, #0]
10062840:	2800      	cmp	r0, #0
10062842:	d00f      	beq.n	10062864 <tsk_scheduler+0x44>
10062844:	4620      	mov	r0, r4
10062846:	f000 f85b 	bl	10062900 <lsbit>
1006284a:	0080      	lsls	r0, r0, #2
1006284c:	6829      	ldr	r1, [r5, #0]
1006284e:	1808      	adds	r0, r1, r0
10062850:	f3ef 8210 	mrs	r2, PRIMASK
10062854:	b672      	cpsid	i
10062856:	6882      	ldr	r2, [r0, #8]
10062858:	6086      	str	r6, [r0, #8]
1006285a:	6848      	ldr	r0, [r1, #4]
1006285c:	4310      	orrs	r0, r2
1006285e:	6048      	str	r0, [r1, #4]
10062860:	b662      	cpsie	i
10062862:	e7ec      	b.n	1006283e <tsk_scheduler+0x1e>
10062864:	6828      	ldr	r0, [r5, #0]
10062866:	1d04      	adds	r4, r0, #4
10062868:	4d06      	ldr	r5, [pc, #24]	@ (10062884 <__arm_cp.1_1>)
1006286a:	6820      	ldr	r0, [r4, #0]
1006286c:	2800      	cmp	r0, #0
1006286e:	d006      	beq.n	1006287e <tsk_scheduler+0x5e>
10062870:	4620      	mov	r0, r4
10062872:	f000 f845 	bl	10062900 <lsbit>
10062876:	0081      	lsls	r1, r0, #2
10062878:	5869      	ldr	r1, [r5, r1]
1006287a:	4788      	blx	r1
1006287c:	e7f5      	b.n	1006286a <tsk_scheduler+0x4a>
1006287e:	bd70      	pop	{r4, r5, r6, pc}

10062880 <__arm_cp.1_0>:
10062880:	20002b24 	.word	0x20002b24

10062884 <__arm_cp.1_1>:
10062884:	1006989c 	.word	0x1006989c

10062888 <tsk_notify_idx>:
10062888:	211f      	movs	r1, #31
1006288a:	4001      	ands	r1, r0
1006288c:	2201      	movs	r2, #1
1006288e:	408a      	lsls	r2, r1
10062890:	f3ef 8110 	mrs	r1, PRIMASK
10062894:	b672      	cpsid	i
10062896:	4904      	ldr	r1, [pc, #16]	@ (100628a8 <__arm_cp.3_0>)
10062898:	6809      	ldr	r1, [r1, #0]
1006289a:	0940      	lsrs	r0, r0, #5
1006289c:	0080      	lsls	r0, r0, #2
1006289e:	580b      	ldr	r3, [r1, r0]
100628a0:	4313      	orrs	r3, r2
100628a2:	500b      	str	r3, [r1, r0]
100628a4:	b662      	cpsie	i
100628a6:	4770      	bx	lr

100628a8 <__arm_cp.3_0>:
100628a8:	20002b24 	.word	0x20002b24

100628ac <tsk_wait_resource_idx>:
100628ac:	221f      	movs	r2, #31
100628ae:	4002      	ands	r2, r0
100628b0:	2301      	movs	r3, #1
100628b2:	4093      	lsls	r3, r2
100628b4:	f3ef 8210 	mrs	r2, PRIMASK
100628b8:	b672      	cpsid	i
100628ba:	0089      	lsls	r1, r1, #2
100628bc:	4a05      	ldr	r2, [pc, #20]	@ (100628d4 <__arm_cp.4_0>)
100628be:	6812      	ldr	r2, [r2, #0]
100628c0:	1851      	adds	r1, r2, r1
100628c2:	0940      	lsrs	r0, r0, #5
100628c4:	0080      	lsls	r0, r0, #2
100628c6:	1808      	adds	r0, r1, r0
100628c8:	6881      	ldr	r1, [r0, #8]
100628ca:	4319      	orrs	r1, r3
100628cc:	6081      	str	r1, [r0, #8]
100628ce:	b662      	cpsie	i
100628d0:	4770      	bx	lr
100628d2:	46c0      	nop			@ (mov r8, r8)

100628d4 <__arm_cp.4_0>:
100628d4:	20002b24 	.word	0x20002b24

100628d8 <tsk_signal_resource_idx>:
100628d8:	211f      	movs	r1, #31
100628da:	4001      	ands	r1, r0
100628dc:	2201      	movs	r2, #1
100628de:	408a      	lsls	r2, r1
100628e0:	f3ef 8110 	mrs	r1, PRIMASK
100628e4:	b672      	cpsid	i
100628e6:	4905      	ldr	r1, [pc, #20]	@ (100628fc <__arm_cp.5_0>)
100628e8:	6809      	ldr	r1, [r1, #0]
100628ea:	0940      	lsrs	r0, r0, #5
100628ec:	0080      	lsls	r0, r0, #2
100628ee:	1808      	adds	r0, r1, r0
100628f0:	6901      	ldr	r1, [r0, #16]
100628f2:	4311      	orrs	r1, r2
100628f4:	6101      	str	r1, [r0, #16]
100628f6:	b662      	cpsie	i
100628f8:	4770      	bx	lr
100628fa:	46c0      	nop			@ (mov r8, r8)

100628fc <__arm_cp.5_0>:
100628fc:	20002b24 	.word	0x20002b24

10062900 <lsbit>:
10062900:	f3ef 8110 	mrs	r1, PRIMASK
10062904:	b672      	cpsid	i
10062906:	6801      	ldr	r1, [r0, #0]
10062908:	424a      	negs	r2, r1
1006290a:	400a      	ands	r2, r1
1006290c:	4051      	eors	r1, r2
1006290e:	6001      	str	r1, [r0, #0]
10062910:	4803      	ldr	r0, [pc, #12]	@ (10062920 <__arm_cp.7_0>)
10062912:	4350      	muls	r0, r2
10062914:	0ec0      	lsrs	r0, r0, #27
10062916:	a103      	add	r1, pc, #12	@ (adr r1, 10062924 <__arm_cp.7_0+0x4>)
10062918:	5c08      	ldrb	r0, [r1, r0]
1006291a:	b662      	cpsie	i
1006291c:	4770      	bx	lr
1006291e:	46c0      	nop			@ (mov r8, r8)

10062920 <__arm_cp.7_0>:
10062920:	04653adf 	.word	0x04653adf
10062924:	06020100 	.word	0x06020100
10062928:	10070b03 	.word	0x10070b03
1006292c:	150c0e04 	.word	0x150c0e04
10062930:	1a111708 	.word	0x1a111708
10062934:	0f0a051f 	.word	0x0f0a051f
10062938:	1916140d 	.word	0x1916140d
1006293c:	1813091e 	.word	0x1813091e
10062940:	1b1c121d 	.word	0x1b1c121d

10062944 <CST_init>:
10062944:	b510      	push	{r4, lr}
10062946:	2412      	movs	r4, #18
10062948:	2800      	cmp	r0, #0
1006294a:	d00e      	beq.n	1006296a <CST_init+0x26>
1006294c:	2a00      	cmp	r2, #0
1006294e:	d00c      	beq.n	1006296a <CST_init+0x26>
10062950:	2b0b      	cmp	r3, #11
10062952:	d80a      	bhi.n	1006296a <CST_init+0x26>
10062954:	7041      	strb	r1, [r0, #1]
10062956:	7003      	strb	r3, [r0, #0]
10062958:	6a03      	ldr	r3, [r0, #32]
1006295a:	5459      	strb	r1, [r3, r1]
1006295c:	1e49      	subs	r1, r1, #1
1006295e:	1c4b      	adds	r3, r1, #1
10062960:	d3fa      	bcc.n	10062958 <CST_init+0x14>
10062962:	6102      	str	r2, [r0, #16]
10062964:	2400      	movs	r4, #0
10062966:	7504      	strb	r4, [r0, #20]
10062968:	61c0      	str	r0, [r0, #28]
1006296a:	4620      	mov	r0, r4
1006296c:	bd10      	pop	{r4, pc}

1006296e <CST_stop>:
1006296e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10062970:	4605      	mov	r5, r0
10062972:	2012      	movs	r0, #18
10062974:	2d00      	cmp	r5, #0
10062976:	d01b      	beq.n	100629b0 <CST_stop+0x42>
10062978:	460c      	mov	r4, r1
1006297a:	786a      	ldrb	r2, [r5, #1]
1006297c:	428a      	cmp	r2, r1
1006297e:	d917      	bls.n	100629b0 <CST_stop+0x42>
10062980:	6a2b      	ldr	r3, [r5, #32]
10062982:	5d19      	ldrb	r1, [r3, r4]
10062984:	42a1      	cmp	r1, r4
10062986:	d101      	bne.n	1006298c <CST_stop+0x1e>
10062988:	2000      	movs	r0, #0
1006298a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006298c:	4617      	mov	r7, r2
1006298e:	463e      	mov	r6, r7
10062990:	5ddf      	ldrb	r7, [r3, r7]
10062992:	4297      	cmp	r7, r2
10062994:	d001      	beq.n	1006299a <CST_stop+0x2c>
10062996:	42a7      	cmp	r7, r4
10062998:	d1f9      	bne.n	1006298e <CST_stop+0x20>
1006299a:	2000      	movs	r0, #0
1006299c:	4297      	cmp	r7, r2
1006299e:	d005      	beq.n	100629ac <CST_stop+0x3e>
100629a0:	5599      	strb	r1, [r3, r6]
100629a2:	4296      	cmp	r6, r2
100629a4:	d102      	bne.n	100629ac <CST_stop+0x3e>
100629a6:	4628      	mov	r0, r5
100629a8:	f000 f803 	bl	100629b2 <Timer_TryStartFirstActive>
100629ac:	6a29      	ldr	r1, [r5, #32]
100629ae:	550c      	strb	r4, [r1, r4]
100629b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100629b2 <Timer_TryStartFirstActive>:
100629b2:	b510      	push	{r4, lr}
100629b4:	7842      	ldrb	r2, [r0, #1]
100629b6:	428a      	cmp	r2, r1
100629b8:	d107      	bne.n	100629ca <Timer_TryStartFirstActive+0x18>
100629ba:	7d01      	ldrb	r1, [r0, #20]
100629bc:	2400      	movs	r4, #0
100629be:	2900      	cmp	r1, #0
100629c0:	d009      	beq.n	100629d6 <Timer_TryStartFirstActive+0x24>
100629c2:	3008      	adds	r0, #8
100629c4:	f7ef ffb0 	bl	10052928 <BLEPLAT_StopTimer>
100629c8:	e005      	b.n	100629d6 <Timer_TryStartFirstActive+0x24>
100629ca:	0049      	lsls	r1, r1, #1
100629cc:	6a42      	ldr	r2, [r0, #36]	@ 0x24
100629ce:	5e51      	ldrsh	r1, [r2, r1]
100629d0:	f000 f86a 	bl	10062aa8 <Timer_StartFirstActive_sysT>
100629d4:	4604      	mov	r4, r0
100629d6:	4620      	mov	r0, r4
100629d8:	bd10      	pop	{r4, pc}

100629da <CST_start>:
100629da:	b5f0      	push	{r4, r5, r6, r7, lr}
100629dc:	b085      	sub	sp, #20
100629de:	2612      	movs	r6, #18
100629e0:	2800      	cmp	r0, #0
100629e2:	d05e      	beq.n	10062aa2 <CST_start+0xc8>
100629e4:	461f      	mov	r7, r3
100629e6:	460d      	mov	r5, r1
100629e8:	4604      	mov	r4, r0
100629ea:	7843      	ldrb	r3, [r0, #1]
100629ec:	428b      	cmp	r3, r1
100629ee:	d958      	bls.n	10062aa2 <CST_start+0xc8>
100629f0:	7820      	ldrb	r0, [r4, #0]
100629f2:	2105      	movs	r1, #5
100629f4:	0309      	lsls	r1, r1, #12
100629f6:	4081      	lsls	r1, r0
100629f8:	428f      	cmp	r7, r1
100629fa:	d852      	bhi.n	10062aa2 <CST_start+0xc8>
100629fc:	9204      	str	r2, [sp, #16]
100629fe:	9302      	str	r3, [sp, #8]
10062a00:	f7ef ff77 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
10062a04:	4602      	mov	r2, r0
10062a06:	7823      	ldrb	r3, [r4, #0]
10062a08:	6a20      	ldr	r0, [r4, #32]
10062a0a:	5d40      	ldrb	r0, [r0, r5]
10062a0c:	42a8      	cmp	r0, r5
10062a0e:	d00c      	beq.n	10062a2a <CST_start+0x50>
10062a10:	9804      	ldr	r0, [sp, #16]
10062a12:	2800      	cmp	r0, #0
10062a14:	d045      	beq.n	10062aa2 <CST_start+0xc8>
10062a16:	4620      	mov	r0, r4
10062a18:	9103      	str	r1, [sp, #12]
10062a1a:	4629      	mov	r1, r5
10062a1c:	9304      	str	r3, [sp, #16]
10062a1e:	4616      	mov	r6, r2
10062a20:	f7ff ffa5 	bl	1006296e <CST_stop>
10062a24:	9903      	ldr	r1, [sp, #12]
10062a26:	4632      	mov	r2, r6
10062a28:	9b04      	ldr	r3, [sp, #16]
10062a2a:	2033      	movs	r0, #51	@ 0x33
10062a2c:	4378      	muls	r0, r7
10062a2e:	460e      	mov	r6, r1
10062a30:	0a01      	lsrs	r1, r0, #8
10062a32:	1808      	adds	r0, r1, r0
10062a34:	0c01      	lsrs	r1, r0, #16
10062a36:	1808      	adds	r0, r1, r0
10062a38:	0771      	lsls	r1, r6, #29
10062a3a:	08d2      	lsrs	r2, r2, #3
10062a3c:	1851      	adds	r1, r2, r1
10062a3e:	1842      	adds	r2, r0, r1
10062a40:	1d58      	adds	r0, r3, #5
10062a42:	b2c0      	uxtb	r0, r0
10062a44:	40c2      	lsrs	r2, r0
10062a46:	9501      	str	r5, [sp, #4]
10062a48:	0068      	lsls	r0, r5, #1
10062a4a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
10062a4c:	9204      	str	r2, [sp, #16]
10062a4e:	520a      	strh	r2, [r1, r0]
10062a50:	f7ef ff4f 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
10062a54:	08c0      	lsrs	r0, r0, #3
10062a56:	9003      	str	r0, [sp, #12]
10062a58:	7862      	ldrb	r2, [r4, #1]
10062a5a:	6a20      	ldr	r0, [r4, #32]
10062a5c:	4617      	mov	r7, r2
10062a5e:	463b      	mov	r3, r7
10062a60:	5dc7      	ldrb	r7, [r0, r7]
10062a62:	4297      	cmp	r7, r2
10062a64:	d00d      	beq.n	10062a82 <CST_start+0xa8>
10062a66:	007d      	lsls	r5, r7, #1
10062a68:	6a66      	ldr	r6, [r4, #36]	@ 0x24
10062a6a:	5b75      	ldrh	r5, [r6, r5]
10062a6c:	7826      	ldrb	r6, [r4, #0]
10062a6e:	1d76      	adds	r6, r6, #5
10062a70:	9903      	ldr	r1, [sp, #12]
10062a72:	40f1      	lsrs	r1, r6
10062a74:	1a6d      	subs	r5, r5, r1
10062a76:	b22d      	sxth	r5, r5
10062a78:	9e04      	ldr	r6, [sp, #16]
10062a7a:	1a71      	subs	r1, r6, r1
10062a7c:	b209      	sxth	r1, r1
10062a7e:	428d      	cmp	r5, r1
10062a80:	dded      	ble.n	10062a5e <CST_start+0x84>
10062a82:	5cc1      	ldrb	r1, [r0, r3]
10062a84:	9a01      	ldr	r2, [sp, #4]
10062a86:	5481      	strb	r1, [r0, r2]
10062a88:	6a20      	ldr	r0, [r4, #32]
10062a8a:	54c2      	strb	r2, [r0, r3]
10062a8c:	9802      	ldr	r0, [sp, #8]
10062a8e:	4283      	cmp	r3, r0
10062a90:	d106      	bne.n	10062aa0 <CST_start+0xc6>
10062a92:	9804      	ldr	r0, [sp, #16]
10062a94:	b201      	sxth	r1, r0
10062a96:	4620      	mov	r0, r4
10062a98:	f000 f806 	bl	10062aa8 <Timer_StartFirstActive_sysT>
10062a9c:	4606      	mov	r6, r0
10062a9e:	e000      	b.n	10062aa2 <CST_start+0xc8>
10062aa0:	2600      	movs	r6, #0
10062aa2:	4630      	mov	r0, r6
10062aa4:	b005      	add	sp, #20
10062aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062aa8 <Timer_StartFirstActive_sysT>:
10062aa8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10062aaa:	9101      	str	r1, [sp, #4]
10062aac:	4604      	mov	r4, r0
10062aae:	4607      	mov	r7, r0
10062ab0:	3708      	adds	r7, #8
10062ab2:	f7ef ff1e 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
10062ab6:	9002      	str	r0, [sp, #8]
10062ab8:	460d      	mov	r5, r1
10062aba:	7826      	ldrb	r6, [r4, #0]
10062abc:	7d20      	ldrb	r0, [r4, #20]
10062abe:	2800      	cmp	r0, #0
10062ac0:	d004      	beq.n	10062acc <Timer_StartFirstActive_sysT+0x24>
10062ac2:	4638      	mov	r0, r7
10062ac4:	f7ef ff30 	bl	10052928 <BLEPLAT_StopTimer>
10062ac8:	7822      	ldrb	r2, [r4, #0]
10062aca:	e000      	b.n	10062ace <Timer_StartFirstActive_sysT+0x26>
10062acc:	4632      	mov	r2, r6
10062ace:	1d70      	adds	r0, r6, #5
10062ad0:	9c02      	ldr	r4, [sp, #8]
10062ad2:	08e1      	lsrs	r1, r4, #3
10062ad4:	40c1      	lsrs	r1, r0
10062ad6:	9801      	ldr	r0, [sp, #4]
10062ad8:	1a40      	subs	r0, r0, r1
10062ada:	b200      	sxth	r0, r0
10062adc:	1e40      	subs	r0, r0, #1
10062ade:	17c1      	asrs	r1, r0, #31
10062ae0:	3208      	adds	r2, #8
10062ae2:	f7dd fd23 	bl	1004052c <__aeabi_llsl>
10062ae6:	1902      	adds	r2, r0, r4
10062ae8:	414d      	adcs	r5, r1
10062aea:	4638      	mov	r0, r7
10062aec:	462b      	mov	r3, r5
10062aee:	f7ef ff0a 	bl	10052906 <BLEPLAT_StartTimer>
10062af2:	b2c0      	uxtb	r0, r0
10062af4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062af6 <cst_sharedCallback>:
10062af6:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10062af8:	9102      	str	r1, [sp, #8]
10062afa:	4605      	mov	r5, r0
10062afc:	7847      	ldrb	r7, [r0, #1]
10062afe:	6a00      	ldr	r0, [r0, #32]
10062b00:	5dc4      	ldrb	r4, [r0, r7]
10062b02:	f7ef fef6 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
10062b06:	08c0      	lsrs	r0, r0, #3
10062b08:	9001      	str	r0, [sp, #4]
10062b0a:	4620      	mov	r0, r4
10062b0c:	b2c2      	uxtb	r2, r0
10062b0e:	42ba      	cmp	r2, r7
10062b10:	d00d      	beq.n	10062b2e <cst_sharedCallback+0x38>
10062b12:	0053      	lsls	r3, r2, #1
10062b14:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
10062b16:	5af3      	ldrh	r3, [r6, r3]
10062b18:	782e      	ldrb	r6, [r5, #0]
10062b1a:	1d76      	adds	r6, r6, #5
10062b1c:	9901      	ldr	r1, [sp, #4]
10062b1e:	40f1      	lsrs	r1, r6
10062b20:	1a59      	subs	r1, r3, r1
10062b22:	b209      	sxth	r1, r1
10062b24:	2901      	cmp	r1, #1
10062b26:	dc03      	bgt.n	10062b30 <cst_sharedCallback+0x3a>
10062b28:	6a28      	ldr	r0, [r5, #32]
10062b2a:	5c80      	ldrb	r0, [r0, r2]
10062b2c:	e7ee      	b.n	10062b0c <cst_sharedCallback+0x16>
10062b2e:	4638      	mov	r0, r7
10062b30:	6a29      	ldr	r1, [r5, #32]
10062b32:	55c8      	strb	r0, [r1, r7]
10062b34:	b2c6      	uxtb	r6, r0
10062b36:	4628      	mov	r0, r5
10062b38:	4631      	mov	r1, r6
10062b3a:	f7ff ff3a 	bl	100629b2 <Timer_TryStartFirstActive>
10062b3e:	b2e0      	uxtb	r0, r4
10062b40:	42b0      	cmp	r0, r6
10062b42:	d006      	beq.n	10062b52 <cst_sharedCallback+0x5c>
10062b44:	6a29      	ldr	r1, [r5, #32]
10062b46:	5c0f      	ldrb	r7, [r1, r0]
10062b48:	540c      	strb	r4, [r1, r0]
10062b4a:	9902      	ldr	r1, [sp, #8]
10062b4c:	4788      	blx	r1
10062b4e:	463c      	mov	r4, r7
10062b50:	e7f5      	b.n	10062b3e <cst_sharedCallback+0x48>
10062b52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10062b54 <copy_swap_buffer>:
10062b54:	b5f0      	push	{r4, r5, r6, r7, lr}
10062b56:	2a00      	cmp	r2, #0
10062b58:	d00b      	beq.n	10062b72 <copy_swap_buffer+0x1e>
10062b5a:	2400      	movs	r4, #0
10062b5c:	43e5      	mvns	r5, r4
10062b5e:	2b00      	cmp	r3, #0
10062b60:	4626      	mov	r6, r4
10062b62:	d000      	beq.n	10062b66 <copy_swap_buffer+0x12>
10062b64:	1956      	adds	r6, r2, r5
10062b66:	5d0f      	ldrb	r7, [r1, r4]
10062b68:	5587      	strb	r7, [r0, r6]
10062b6a:	1e6d      	subs	r5, r5, #1
10062b6c:	1c64      	adds	r4, r4, #1
10062b6e:	42a2      	cmp	r2, r4
10062b70:	d1f5      	bne.n	10062b5e <copy_swap_buffer+0xa>
10062b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062b74 <is_Buffer_All_Set_To>:
10062b74:	b570      	push	{r4, r5, r6, lr}
10062b76:	4603      	mov	r3, r0
10062b78:	2001      	movs	r0, #1
10062b7a:	2900      	cmp	r1, #0
10062b7c:	d009      	beq.n	10062b92 <is_Buffer_All_Set_To+0x1e>
10062b7e:	2400      	movs	r4, #0
10062b80:	4626      	mov	r6, r4
10062b82:	4625      	mov	r5, r4
10062b84:	5d96      	ldrb	r6, [r2, r6]
10062b86:	429e      	cmp	r6, r3
10062b88:	d104      	bne.n	10062b94 <is_Buffer_All_Set_To+0x20>
10062b8a:	1c6d      	adds	r5, r5, #1
10062b8c:	b2ee      	uxtb	r6, r5
10062b8e:	428e      	cmp	r6, r1
10062b90:	d3f8      	bcc.n	10062b84 <is_Buffer_All_Set_To+0x10>
10062b92:	bd70      	pop	{r4, r5, r6, pc}
10062b94:	4620      	mov	r0, r4
10062b96:	bd70      	pop	{r4, r5, r6, pc}

10062b98 <char_copy>:
10062b98:	2a00      	cmp	r2, #0
10062b9a:	d005      	beq.n	10062ba8 <char_copy+0x10>
10062b9c:	7803      	ldrb	r3, [r0, #0]
10062b9e:	700b      	strb	r3, [r1, #0]
10062ba0:	1e52      	subs	r2, r2, #1
10062ba2:	1c49      	adds	r1, r1, #1
10062ba4:	1c40      	adds	r0, r0, #1
10062ba6:	e7f7      	b.n	10062b98 <char_copy>
10062ba8:	4770      	bx	lr

10062baa <UUID_cmp>:
10062baa:	b580      	push	{r7, lr}
10062bac:	7c02      	ldrb	r2, [r0, #16]
10062bae:	7c0b      	ldrb	r3, [r1, #16]
10062bb0:	429a      	cmp	r2, r3
10062bb2:	d106      	bne.n	10062bc2 <UUID_cmp+0x18>
10062bb4:	2a20      	cmp	r2, #32
10062bb6:	d007      	beq.n	10062bc8 <UUID_cmp+0x1e>
10062bb8:	2a10      	cmp	r2, #16
10062bba:	d109      	bne.n	10062bd0 <UUID_cmp+0x26>
10062bbc:	8989      	ldrh	r1, [r1, #12]
10062bbe:	8980      	ldrh	r0, [r0, #12]
10062bc0:	e008      	b.n	10062bd4 <UUID_cmp+0x2a>
10062bc2:	2000      	movs	r0, #0
10062bc4:	43c0      	mvns	r0, r0
10062bc6:	bd80      	pop	{r7, pc}
10062bc8:	2210      	movs	r2, #16
10062bca:	f7ef fde7 	bl	1005279c <BLEPLAT_MemCmp>
10062bce:	bd80      	pop	{r7, pc}
10062bd0:	68c9      	ldr	r1, [r1, #12]
10062bd2:	68c0      	ldr	r0, [r0, #12]
10062bd4:	1a40      	subs	r0, r0, r1
10062bd6:	bd80      	pop	{r7, pc}

10062bd8 <UUID_cmp_128bits>:
10062bd8:	b570      	push	{r4, r5, r6, lr}
10062bda:	b08a      	sub	sp, #40	@ 0x28
10062bdc:	460c      	mov	r4, r1
10062bde:	4601      	mov	r1, r0
10062be0:	ad05      	add	r5, sp, #20
10062be2:	2614      	movs	r6, #20
10062be4:	4628      	mov	r0, r5
10062be6:	4632      	mov	r2, r6
10062be8:	f7ef fdb8 	bl	1005275c <BLEPLAT_MemCpy>
10062bec:	4668      	mov	r0, sp
10062bee:	4621      	mov	r1, r4
10062bf0:	4632      	mov	r2, r6
10062bf2:	f7ef fdb3 	bl	1005275c <BLEPLAT_MemCpy>
10062bf6:	7c28      	ldrb	r0, [r5, #16]
10062bf8:	2880      	cmp	r0, #128	@ 0x80
10062bfa:	d007      	beq.n	10062c0c <UUID_cmp_128bits+0x34>
10062bfc:	ac05      	add	r4, sp, #20
10062bfe:	490d      	ldr	r1, [pc, #52]	@ (10062c34 <__arm_cp.1_0>)
10062c00:	220c      	movs	r2, #12
10062c02:	4620      	mov	r0, r4
10062c04:	f7ef fdaa 	bl	1005275c <BLEPLAT_MemCpy>
10062c08:	2000      	movs	r0, #0
10062c0a:	81e0      	strh	r0, [r4, #14]
10062c0c:	4668      	mov	r0, sp
10062c0e:	7c00      	ldrb	r0, [r0, #16]
10062c10:	2880      	cmp	r0, #128	@ 0x80
10062c12:	d007      	beq.n	10062c24 <UUID_cmp_128bits+0x4c>
10062c14:	466c      	mov	r4, sp
10062c16:	4907      	ldr	r1, [pc, #28]	@ (10062c34 <__arm_cp.1_0>)
10062c18:	220c      	movs	r2, #12
10062c1a:	4620      	mov	r0, r4
10062c1c:	f7ef fd9e 	bl	1005275c <BLEPLAT_MemCpy>
10062c20:	2000      	movs	r0, #0
10062c22:	81e0      	strh	r0, [r4, #14]
10062c24:	a805      	add	r0, sp, #20
10062c26:	4669      	mov	r1, sp
10062c28:	2210      	movs	r2, #16
10062c2a:	f7ef fdb7 	bl	1005279c <BLEPLAT_MemCmp>
10062c2e:	b00a      	add	sp, #40	@ 0x28
10062c30:	bd70      	pop	{r4, r5, r6, pc}
10062c32:	46c0      	nop			@ (mov r8, r8)

10062c34 <__arm_cp.1_0>:
10062c34:	100698f4 	.word	0x100698f4

10062c38 <UUID_write_to_flat>:
10062c38:	b510      	push	{r4, lr}
10062c3a:	460a      	mov	r2, r1
10062c3c:	4601      	mov	r1, r0
10062c3e:	7c00      	ldrb	r0, [r0, #16]
10062c40:	2820      	cmp	r0, #32
10062c42:	d004      	beq.n	10062c4e <UUID_write_to_flat+0x16>
10062c44:	2810      	cmp	r0, #16
10062c46:	d105      	bne.n	10062c54 <UUID_write_to_flat+0x1c>
10062c48:	310c      	adds	r1, #12
10062c4a:	2402      	movs	r4, #2
10062c4c:	e003      	b.n	10062c56 <UUID_write_to_flat+0x1e>
10062c4e:	310c      	adds	r1, #12
10062c50:	2404      	movs	r4, #4
10062c52:	e000      	b.n	10062c56 <UUID_write_to_flat+0x1e>
10062c54:	2410      	movs	r4, #16
10062c56:	4610      	mov	r0, r2
10062c58:	4622      	mov	r2, r4
10062c5a:	f7ef fd7f 	bl	1005275c <BLEPLAT_MemCpy>
10062c5e:	4620      	mov	r0, r4
10062c60:	bd10      	pop	{r4, pc}

10062c62 <UUID_get_value_p>:
10062c62:	7c01      	ldrb	r1, [r0, #16]
10062c64:	2980      	cmp	r1, #128	@ 0x80
10062c66:	d000      	beq.n	10062c6a <UUID_get_value_p+0x8>
10062c68:	300c      	adds	r0, #12
10062c6a:	4770      	bx	lr

10062c6c <ACL_list_init>:
10062c6c:	2100      	movs	r1, #0
10062c6e:	6001      	str	r1, [r0, #0]
10062c70:	6040      	str	r0, [r0, #4]
10062c72:	4770      	bx	lr

10062c74 <ACL_list_insert_tail>:
10062c74:	2200      	movs	r2, #0
10062c76:	61ca      	str	r2, [r1, #28]
10062c78:	6842      	ldr	r2, [r0, #4]
10062c7a:	6011      	str	r1, [r2, #0]
10062c7c:	311c      	adds	r1, #28
10062c7e:	6041      	str	r1, [r0, #4]
10062c80:	4770      	bx	lr

10062c82 <ACL_list_insert_head>:
10062c82:	6802      	ldr	r2, [r0, #0]
10062c84:	61ca      	str	r2, [r1, #28]
10062c86:	2a00      	cmp	r2, #0
10062c88:	d102      	bne.n	10062c90 <ACL_list_insert_head+0xe>
10062c8a:	460a      	mov	r2, r1
10062c8c:	321c      	adds	r2, #28
10062c8e:	6042      	str	r2, [r0, #4]
10062c90:	6001      	str	r1, [r0, #0]
10062c92:	4770      	bx	lr

10062c94 <ACL_list_remove>:
10062c94:	6803      	ldr	r3, [r0, #0]
10062c96:	428b      	cmp	r3, r1
10062c98:	d009      	beq.n	10062cae <ACL_list_remove+0x1a>
10062c9a:	461a      	mov	r2, r3
10062c9c:	69db      	ldr	r3, [r3, #28]
10062c9e:	428b      	cmp	r3, r1
10062ca0:	d1fb      	bne.n	10062c9a <ACL_list_remove+0x6>
10062ca2:	69cb      	ldr	r3, [r1, #28]
10062ca4:	61d3      	str	r3, [r2, #28]
10062ca6:	2b00      	cmp	r3, #0
10062ca8:	d107      	bne.n	10062cba <ACL_list_remove+0x26>
10062caa:	321c      	adds	r2, #28
10062cac:	e004      	b.n	10062cb8 <ACL_list_remove+0x24>
10062cae:	69ca      	ldr	r2, [r1, #28]
10062cb0:	6002      	str	r2, [r0, #0]
10062cb2:	2a00      	cmp	r2, #0
10062cb4:	d101      	bne.n	10062cba <ACL_list_remove+0x26>
10062cb6:	4602      	mov	r2, r0
10062cb8:	6042      	str	r2, [r0, #4]
10062cba:	2000      	movs	r0, #0
10062cbc:	61c8      	str	r0, [r1, #28]
10062cbe:	4770      	bx	lr

10062cc0 <ACL_list_remove_head>:
10062cc0:	4601      	mov	r1, r0
10062cc2:	6800      	ldr	r0, [r0, #0]
10062cc4:	69c2      	ldr	r2, [r0, #28]
10062cc6:	600a      	str	r2, [r1, #0]
10062cc8:	2a00      	cmp	r2, #0
10062cca:	d100      	bne.n	10062cce <ACL_list_remove_head+0xe>
10062ccc:	6049      	str	r1, [r1, #4]
10062cce:	2100      	movs	r1, #0
10062cd0:	61c1      	str	r1, [r0, #28]
10062cd2:	4770      	bx	lr

10062cd4 <ACL_list_get_pckt_count>:
10062cd4:	2100      	movs	r1, #0
10062cd6:	6800      	ldr	r0, [r0, #0]
10062cd8:	2800      	cmp	r0, #0
10062cda:	d002      	beq.n	10062ce2 <ACL_list_get_pckt_count+0xe>
10062cdc:	301c      	adds	r0, #28
10062cde:	1c49      	adds	r1, r1, #1
10062ce0:	e7f9      	b.n	10062cd6 <ACL_list_get_pckt_count+0x2>
10062ce2:	b288      	uxth	r0, r1
10062ce4:	4770      	bx	lr
	...

10062ce8 <addr8_list_search>:
10062ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
10062cea:	b087      	sub	sp, #28
10062cec:	4604      	mov	r4, r0
10062cee:	0608      	lsls	r0, r1, #24
10062cf0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
10062cf2:	d052      	beq.n	10062d9a <addr8_list_search+0xb2>
10062cf4:	9501      	str	r5, [sp, #4]
10062cf6:	20ff      	movs	r0, #255	@ 0xff
10062cf8:	4615      	mov	r5, r2
10062cfa:	4385      	bics	r5, r0
10062cfc:	2601      	movs	r6, #1
10062cfe:	9305      	str	r3, [sp, #20]
10062d00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
10062d02:	461f      	mov	r7, r3
10062d04:	9600      	str	r6, [sp, #0]
10062d06:	4037      	ands	r7, r6
10062d08:	9703      	str	r7, [sp, #12]
10062d0a:	427e      	negs	r6, r7
10062d0c:	4016      	ands	r6, r2
10062d0e:	b2f2      	uxtb	r2, r6
10062d10:	1952      	adds	r2, r2, r5
10062d12:	9206      	str	r2, [sp, #24]
10062d14:	4d25      	ldr	r5, [pc, #148]	@ (10062dac <__arm_cp.0_0>)
10062d16:	9f05      	ldr	r7, [sp, #20]
10062d18:	463a      	mov	r2, r7
10062d1a:	402a      	ands	r2, r5
10062d1c:	461e      	mov	r6, r3
10062d1e:	079d      	lsls	r5, r3, #30
10062d20:	17ed      	asrs	r5, r5, #31
10062d22:	403d      	ands	r5, r7
10062d24:	9004      	str	r0, [sp, #16]
10062d26:	0603      	lsls	r3, r0, #24
10062d28:	402b      	ands	r3, r5
10062d2a:	189b      	adds	r3, r3, r2
10062d2c:	2002      	movs	r0, #2
10062d2e:	4030      	ands	r0, r6
10062d30:	9002      	str	r0, [sp, #8]
10062d32:	1e48      	subs	r0, r1, #1
10062d34:	9005      	str	r0, [sp, #20]
10062d36:	b2c8      	uxtb	r0, r1
10062d38:	0841      	lsrs	r1, r0, #1
10062d3a:	2600      	movs	r6, #0
10062d3c:	b2c8      	uxtb	r0, r1
10062d3e:	00c2      	lsls	r2, r0, #3
10062d40:	18a0      	adds	r0, r4, r2
10062d42:	6845      	ldr	r5, [r0, #4]
10062d44:	9802      	ldr	r0, [sp, #8]
10062d46:	2800      	cmp	r0, #0
10062d48:	d101      	bne.n	10062d4e <addr8_list_search+0x66>
10062d4a:	4818      	ldr	r0, [pc, #96]	@ (10062dac <__arm_cp.0_0>)
10062d4c:	4005      	ands	r5, r0
10062d4e:	58a0      	ldr	r0, [r4, r2]
10062d50:	4602      	mov	r2, r0
10062d52:	9f04      	ldr	r7, [sp, #16]
10062d54:	43ba      	bics	r2, r7
10062d56:	9f03      	ldr	r7, [sp, #12]
10062d58:	2f00      	cmp	r7, #0
10062d5a:	d101      	bne.n	10062d60 <addr8_list_search+0x78>
10062d5c:	4638      	mov	r0, r7
10062d5e:	e000      	b.n	10062d62 <addr8_list_search+0x7a>
10062d60:	b2c0      	uxtb	r0, r0
10062d62:	1882      	adds	r2, r0, r2
10062d64:	9806      	ldr	r0, [sp, #24]
10062d66:	4290      	cmp	r0, r2
10062d68:	d101      	bne.n	10062d6e <addr8_list_search+0x86>
10062d6a:	42ab      	cmp	r3, r5
10062d6c:	d018      	beq.n	10062da0 <addr8_list_search+0xb8>
10062d6e:	42ab      	cmp	r3, r5
10062d70:	d803      	bhi.n	10062d7a <addr8_list_search+0x92>
10062d72:	d104      	bne.n	10062d7e <addr8_list_search+0x96>
10062d74:	9806      	ldr	r0, [sp, #24]
10062d76:	4290      	cmp	r0, r2
10062d78:	d901      	bls.n	10062d7e <addr8_list_search+0x96>
10062d7a:	1c4e      	adds	r6, r1, #1
10062d7c:	e001      	b.n	10062d82 <addr8_list_search+0x9a>
10062d7e:	1e48      	subs	r0, r1, #1
10062d80:	9005      	str	r0, [sp, #20]
10062d82:	9805      	ldr	r0, [sp, #20]
10062d84:	1b80      	subs	r0, r0, r6
10062d86:	b2c0      	uxtb	r0, r0
10062d88:	1c40      	adds	r0, r0, #1
10062d8a:	b2c2      	uxtb	r2, r0
10062d8c:	0851      	lsrs	r1, r2, #1
10062d8e:	1989      	adds	r1, r1, r6
10062d90:	4282      	cmp	r2, r0
10062d92:	d0d3      	beq.n	10062d3c <addr8_list_search+0x54>
10062d94:	2000      	movs	r0, #0
10062d96:	9d01      	ldr	r5, [sp, #4]
10062d98:	e004      	b.n	10062da4 <addr8_list_search+0xbc>
10062d9a:	2100      	movs	r1, #0
10062d9c:	4608      	mov	r0, r1
10062d9e:	e001      	b.n	10062da4 <addr8_list_search+0xbc>
10062da0:	9d01      	ldr	r5, [sp, #4]
10062da2:	9800      	ldr	r0, [sp, #0]
10062da4:	7029      	strb	r1, [r5, #0]
10062da6:	b007      	add	sp, #28
10062da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062daa:	46c0      	nop			@ (mov r8, r8)

10062dac <__arm_cp.0_0>:
10062dac:	00ffffff 	.word	0x00ffffff

10062db0 <addr8_list_add>:
10062db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10062db2:	b089      	sub	sp, #36	@ 0x24
10062db4:	4615      	mov	r5, r2
10062db6:	460f      	mov	r7, r1
10062db8:	4604      	mov	r4, r0
10062dba:	7906      	ldrb	r6, [r0, #4]
10062dbc:	6800      	ldr	r0, [r0, #0]
10062dbe:	6861      	ldr	r1, [r4, #4]
10062dc0:	aa08      	add	r2, sp, #32
10062dc2:	9300      	str	r3, [sp, #0]
10062dc4:	9201      	str	r2, [sp, #4]
10062dc6:	463a      	mov	r2, r7
10062dc8:	462b      	mov	r3, r5
10062dca:	f7ff ff8d 	bl	10062ce8 <addr8_list_search>
10062dce:	2100      	movs	r1, #0
10062dd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
10062dd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
10062dd4:	2800      	cmp	r0, #0
10062dd6:	9207      	str	r2, [sp, #28]
10062dd8:	d126      	bne.n	10062e28 <addr8_list_add+0x78>
10062dda:	9706      	str	r7, [sp, #24]
10062ddc:	7967      	ldrb	r7, [r4, #5]
10062dde:	42be      	cmp	r6, r7
10062de0:	d222      	bcs.n	10062e28 <addr8_list_add+0x78>
10062de2:	9302      	str	r3, [sp, #8]
10062de4:	9003      	str	r0, [sp, #12]
10062de6:	9504      	str	r5, [sp, #16]
10062de8:	a908      	add	r1, sp, #32
10062dea:	7808      	ldrb	r0, [r1, #0]
10062dec:	9605      	str	r6, [sp, #20]
10062dee:	4286      	cmp	r6, r0
10062df0:	d00d      	beq.n	10062e0e <addr8_list_add+0x5e>
10062df2:	9f05      	ldr	r7, [sp, #20]
10062df4:	6822      	ldr	r2, [r4, #0]
10062df6:	b2fd      	uxtb	r5, r7
10062df8:	00ed      	lsls	r5, r5, #3
10062dfa:	1956      	adds	r6, r2, r5
10062dfc:	4633      	mov	r3, r6
10062dfe:	3b08      	subs	r3, #8
10062e00:	cb0a      	ldmia	r3, {r1, r3}
10062e02:	5151      	str	r1, [r2, r5]
10062e04:	6073      	str	r3, [r6, #4]
10062e06:	1e7f      	subs	r7, r7, #1
10062e08:	b2f9      	uxtb	r1, r7
10062e0a:	4281      	cmp	r1, r0
10062e0c:	d1f2      	bne.n	10062df4 <addr8_list_add+0x44>
10062e0e:	6821      	ldr	r1, [r4, #0]
10062e10:	00c0      	lsls	r0, r0, #3
10062e12:	9a06      	ldr	r2, [sp, #24]
10062e14:	500a      	str	r2, [r1, r0]
10062e16:	1808      	adds	r0, r1, r0
10062e18:	9904      	ldr	r1, [sp, #16]
10062e1a:	6041      	str	r1, [r0, #4]
10062e1c:	9805      	ldr	r0, [sp, #20]
10062e1e:	1c40      	adds	r0, r0, #1
10062e20:	7120      	strb	r0, [r4, #4]
10062e22:	2101      	movs	r1, #1
10062e24:	9803      	ldr	r0, [sp, #12]
10062e26:	9b02      	ldr	r3, [sp, #8]
10062e28:	9a08      	ldr	r2, [sp, #32]
10062e2a:	9c07      	ldr	r4, [sp, #28]
10062e2c:	7022      	strb	r2, [r4, #0]
10062e2e:	7018      	strb	r0, [r3, #0]
10062e30:	4608      	mov	r0, r1
10062e32:	b009      	add	sp, #36	@ 0x24
10062e34:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062e36 <addr8_list_remove_by_addr>:
10062e36:	b5f0      	push	{r4, r5, r6, r7, lr}
10062e38:	b087      	sub	sp, #28
10062e3a:	460f      	mov	r7, r1
10062e3c:	4601      	mov	r1, r0
10062e3e:	7900      	ldrb	r0, [r0, #4]
10062e40:	2600      	movs	r6, #0
10062e42:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
10062e44:	2800      	cmp	r0, #0
10062e46:	d02f      	beq.n	10062ea8 <addr8_list_remove_by_addr+0x72>
10062e48:	9003      	str	r0, [sp, #12]
10062e4a:	6808      	ldr	r0, [r1, #0]
10062e4c:	9104      	str	r1, [sp, #16]
10062e4e:	6849      	ldr	r1, [r1, #4]
10062e50:	9205      	str	r2, [sp, #20]
10062e52:	ad06      	add	r5, sp, #24
10062e54:	9300      	str	r3, [sp, #0]
10062e56:	9501      	str	r5, [sp, #4]
10062e58:	463a      	mov	r2, r7
10062e5a:	9b05      	ldr	r3, [sp, #20]
10062e5c:	f7ff ff44 	bl	10062ce8 <addr8_list_search>
10062e60:	2800      	cmp	r0, #0
10062e62:	d021      	beq.n	10062ea8 <addr8_list_remove_by_addr+0x72>
10062e64:	9002      	str	r0, [sp, #8]
10062e66:	9405      	str	r4, [sp, #20]
10062e68:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
10062e6a:	9c04      	ldr	r4, [sp, #16]
10062e6c:	6823      	ldr	r3, [r4, #0]
10062e6e:	a906      	add	r1, sp, #24
10062e70:	7809      	ldrb	r1, [r1, #0]
10062e72:	00cd      	lsls	r5, r1, #3
10062e74:	195b      	adds	r3, r3, r5
10062e76:	79db      	ldrb	r3, [r3, #7]
10062e78:	7013      	strb	r3, [r2, #0]
10062e7a:	9803      	ldr	r0, [sp, #12]
10062e7c:	1e40      	subs	r0, r0, #1
10062e7e:	9003      	str	r0, [sp, #12]
10062e80:	b2c0      	uxtb	r0, r0
10062e82:	4281      	cmp	r1, r0
10062e84:	4623      	mov	r3, r4
10062e86:	d00b      	beq.n	10062ea0 <addr8_list_remove_by_addr+0x6a>
10062e88:	681d      	ldr	r5, [r3, #0]
10062e8a:	b2ce      	uxtb	r6, r1
10062e8c:	00f6      	lsls	r6, r6, #3
10062e8e:	19af      	adds	r7, r5, r6
10062e90:	68ba      	ldr	r2, [r7, #8]
10062e92:	68fc      	ldr	r4, [r7, #12]
10062e94:	51aa      	str	r2, [r5, r6]
10062e96:	607c      	str	r4, [r7, #4]
10062e98:	1c49      	adds	r1, r1, #1
10062e9a:	b2ca      	uxtb	r2, r1
10062e9c:	4282      	cmp	r2, r0
10062e9e:	d1f3      	bne.n	10062e88 <addr8_list_remove_by_addr+0x52>
10062ea0:	9803      	ldr	r0, [sp, #12]
10062ea2:	7118      	strb	r0, [r3, #4]
10062ea4:	9e02      	ldr	r6, [sp, #8]
10062ea6:	9c05      	ldr	r4, [sp, #20]
10062ea8:	7026      	strb	r6, [r4, #0]
10062eaa:	b007      	add	sp, #28
10062eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

10062eae <addr8_list_clear>:
10062eae:	2100      	movs	r1, #0
10062eb0:	7101      	strb	r1, [r0, #4]
10062eb2:	4770      	bx	lr

10062eb4 <BLEPLAT_aes128_encrypt>:
10062eb4:	b580      	push	{r7, lr}
10062eb6:	f7ef fc9e 	bl	100527f6 <BLEPLAT_AesEcbEncrypt>
10062eba:	bd80      	pop	{r7, pc}

10062ebc <Hal_Get_Random_Number>:
10062ebc:	b51c      	push	{r2, r3, r4, lr}
10062ebe:	ac01      	add	r4, sp, #4
10062ec0:	4620      	mov	r0, r4
10062ec2:	f7ef fcd7 	bl	10052874 <BLEPLAT_RngGetRandom16>
10062ec6:	8820      	ldrh	r0, [r4, #0]
10062ec8:	bd1c      	pop	{r2, r3, r4, pc}

10062eca <Hal_Get_Random_Number32>:
10062eca:	b5e0      	push	{r5, r6, r7, lr}
10062ecc:	a801      	add	r0, sp, #4
10062ece:	f7ef fcdd 	bl	1005288c <BLEPLAT_RngGetRandom32>
10062ed2:	9801      	ldr	r0, [sp, #4]
10062ed4:	bd8c      	pop	{r2, r3, r7, pc}

10062ed6 <HAL_Generate_Random_Bytes_To>:
10062ed6:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10062ed8:	460c      	mov	r4, r1
10062eda:	4605      	mov	r5, r0
10062edc:	2000      	movs	r0, #0
10062ede:	b2c6      	uxtb	r6, r0
10062ee0:	42a6      	cmp	r6, r4
10062ee2:	d20e      	bcs.n	10062f02 <HAL_Generate_Random_Bytes_To+0x2c>
10062ee4:	2000      	movs	r0, #0
10062ee6:	f7ff ffe9 	bl	10062ebc <Hal_Get_Random_Number>
10062eea:	55a8      	strb	r0, [r5, r6]
10062eec:	a901      	add	r1, sp, #4
10062eee:	7008      	strb	r0, [r1, #0]
10062ef0:	0a00      	lsrs	r0, r0, #8
10062ef2:	4669      	mov	r1, sp
10062ef4:	7008      	strb	r0, [r1, #0]
10062ef6:	1c71      	adds	r1, r6, #1
10062ef8:	42a1      	cmp	r1, r4
10062efa:	d200      	bcs.n	10062efe <HAL_Generate_Random_Bytes_To+0x28>
10062efc:	5468      	strb	r0, [r5, r1]
10062efe:	1cb0      	adds	r0, r6, #2
10062f00:	e7ed      	b.n	10062ede <HAL_Generate_Random_Bytes_To+0x8>
10062f02:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

10062f04 <IDD_Initialize_Device_IDs>:
10062f04:	b5f0      	push	{r4, r5, r6, r7, lr}
10062f06:	b095      	sub	sp, #84	@ 0x54
10062f08:	4839      	ldr	r0, [pc, #228]	@ (10062ff0 <__arm_cp.0_0>)
10062f0a:	6800      	ldr	r0, [r0, #0]
10062f0c:	9000      	str	r0, [sp, #0]
10062f0e:	a80b      	add	r0, sp, #44	@ 0x2c
10062f10:	f7ff fc63 	bl	100627da <nvm_dev_id_data_get_record>
10062f14:	2800      	cmp	r0, #0
10062f16:	d031      	beq.n	10062f7c <IDD_Initialize_Device_IDs+0x78>
10062f18:	af01      	add	r7, sp, #4
10062f1a:	2406      	movs	r4, #6
10062f1c:	2500      	movs	r5, #0
10062f1e:	4b35      	ldr	r3, [pc, #212]	@ (10062ff4 <__arm_cp.0_1>)
10062f20:	4638      	mov	r0, r7
10062f22:	4621      	mov	r1, r4
10062f24:	462a      	mov	r2, r5
10062f26:	4798      	blx	r3
10062f28:	7978      	ldrb	r0, [r7, #5]
10062f2a:	21c0      	movs	r1, #192	@ 0xc0
10062f2c:	4301      	orrs	r1, r0
10062f2e:	7179      	strb	r1, [r7, #5]
10062f30:	ae0b      	add	r6, sp, #44	@ 0x2c
10062f32:	4630      	mov	r0, r6
10062f34:	3020      	adds	r0, #32
10062f36:	4b30      	ldr	r3, [pc, #192]	@ (10062ff8 <__arm_cp.0_2>)
10062f38:	4639      	mov	r1, r7
10062f3a:	4622      	mov	r2, r4
10062f3c:	4798      	blx	r3
10062f3e:	ac07      	add	r4, sp, #28
10062f40:	2710      	movs	r7, #16
10062f42:	4620      	mov	r0, r4
10062f44:	4639      	mov	r1, r7
10062f46:	462a      	mov	r2, r5
10062f48:	4b2a      	ldr	r3, [pc, #168]	@ (10062ff4 <__arm_cp.0_1>)
10062f4a:	4798      	blx	r3
10062f4c:	4630      	mov	r0, r6
10062f4e:	4621      	mov	r1, r4
10062f50:	463a      	mov	r2, r7
10062f52:	4b29      	ldr	r3, [pc, #164]	@ (10062ff8 <__arm_cp.0_2>)
10062f54:	4798      	blx	r3
10062f56:	ac03      	add	r4, sp, #12
10062f58:	4620      	mov	r0, r4
10062f5a:	4639      	mov	r1, r7
10062f5c:	462a      	mov	r2, r5
10062f5e:	4b25      	ldr	r3, [pc, #148]	@ (10062ff4 <__arm_cp.0_1>)
10062f60:	4798      	blx	r3
10062f62:	4630      	mov	r0, r6
10062f64:	3010      	adds	r0, #16
10062f66:	4621      	mov	r1, r4
10062f68:	463a      	mov	r2, r7
10062f6a:	4b23      	ldr	r3, [pc, #140]	@ (10062ff8 <__arm_cp.0_2>)
10062f6c:	4798      	blx	r3
10062f6e:	4630      	mov	r0, r6
10062f70:	f7ff fc40 	bl	100627f4 <nvm_dev_id_data_add_record>
10062f74:	2800      	cmp	r0, #0
10062f76:	d103      	bne.n	10062f80 <IDD_Initialize_Device_IDs+0x7c>
10062f78:	4605      	mov	r5, r0
10062f7a:	e003      	b.n	10062f84 <IDD_Initialize_Device_IDs+0x80>
10062f7c:	2500      	movs	r5, #0
10062f7e:	e001      	b.n	10062f84 <IDD_Initialize_Device_IDs+0x80>
10062f80:	200e      	movs	r0, #14
10062f82:	43c5      	mvns	r5, r0
10062f84:	4c1d      	ldr	r4, [pc, #116]	@ (10062ffc <__arm_cp.0_3>)
10062f86:	6822      	ldr	r2, [r4, #0]
10062f88:	322e      	adds	r2, #46	@ 0x2e
10062f8a:	2600      	movs	r6, #0
10062f8c:	2706      	movs	r7, #6
10062f8e:	4630      	mov	r0, r6
10062f90:	4639      	mov	r1, r7
10062f92:	f7ff fdef 	bl	10062b74 <is_Buffer_All_Set_To>
10062f96:	a90b      	add	r1, sp, #44	@ 0x2c
10062f98:	2800      	cmp	r0, #0
10062f9a:	d001      	beq.n	10062fa0 <IDD_Initialize_Device_IDs+0x9c>
10062f9c:	3120      	adds	r1, #32
10062f9e:	e001      	b.n	10062fa4 <IDD_Initialize_Device_IDs+0xa0>
10062fa0:	6821      	ldr	r1, [r4, #0]
10062fa2:	312e      	adds	r1, #46	@ 0x2e
10062fa4:	9800      	ldr	r0, [sp, #0]
10062fa6:	3060      	adds	r0, #96	@ 0x60
10062fa8:	463a      	mov	r2, r7
10062faa:	f7ef fbd7 	bl	1005275c <BLEPLAT_MemCpy>
10062fae:	6822      	ldr	r2, [r4, #0]
10062fb0:	3208      	adds	r2, #8
10062fb2:	2110      	movs	r1, #16
10062fb4:	4630      	mov	r0, r6
10062fb6:	f7ff fddd 	bl	10062b74 <is_Buffer_All_Set_To>
10062fba:	2800      	cmp	r0, #0
10062fbc:	d005      	beq.n	10062fca <IDD_Initialize_Device_IDs+0xc6>
10062fbe:	6820      	ldr	r0, [r4, #0]
10062fc0:	3008      	adds	r0, #8
10062fc2:	a90b      	add	r1, sp, #44	@ 0x2c
10062fc4:	2210      	movs	r2, #16
10062fc6:	f7ef fbc9 	bl	1005275c <BLEPLAT_MemCpy>
10062fca:	6822      	ldr	r2, [r4, #0]
10062fcc:	3218      	adds	r2, #24
10062fce:	2000      	movs	r0, #0
10062fd0:	2110      	movs	r1, #16
10062fd2:	f7ff fdcf 	bl	10062b74 <is_Buffer_All_Set_To>
10062fd6:	2800      	cmp	r0, #0
10062fd8:	d006      	beq.n	10062fe8 <IDD_Initialize_Device_IDs+0xe4>
10062fda:	a90b      	add	r1, sp, #44	@ 0x2c
10062fdc:	3110      	adds	r1, #16
10062fde:	6820      	ldr	r0, [r4, #0]
10062fe0:	3018      	adds	r0, #24
10062fe2:	2210      	movs	r2, #16
10062fe4:	f7ef fbba 	bl	1005275c <BLEPLAT_MemCpy>
10062fe8:	b2e8      	uxtb	r0, r5
10062fea:	b015      	add	sp, #84	@ 0x54
10062fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10062fee:	46c0      	nop			@ (mov r8, r8)

10062ff0 <__arm_cp.0_0>:
10062ff0:	20002a84 	.word	0x20002a84

10062ff4 <__arm_cp.0_1>:
10062ff4:	10062ed7 	.word	0x10062ed7

10062ff8 <__arm_cp.0_2>:
10062ff8:	1005275d 	.word	0x1005275d

10062ffc <__arm_cp.0_3>:
10062ffc:	20002a7c 	.word	0x20002a7c

10063000 <aci_gatt_clt_notification_event_notify>:
10063000:	b5b0      	push	{r4, r5, r7, lr}
10063002:	b0ff      	sub	sp, #508	@ 0x1fc
10063004:	b083      	sub	sp, #12
10063006:	461c      	mov	r4, r3
10063008:	466d      	mov	r5, sp
1006300a:	732b      	strb	r3, [r5, #12]
1006300c:	72aa      	strb	r2, [r5, #10]
1006300e:	7229      	strb	r1, [r5, #8]
10063010:	71a8      	strb	r0, [r5, #6]
10063012:	0a1b      	lsrs	r3, r3, #8
10063014:	736b      	strb	r3, [r5, #13]
10063016:	0a12      	lsrs	r2, r2, #8
10063018:	72ea      	strb	r2, [r5, #11]
1006301a:	0a09      	lsrs	r1, r1, #8
1006301c:	7269      	strb	r1, [r5, #9]
1006301e:	0a00      	lsrs	r0, r0, #8
10063020:	71e8      	strb	r0, [r5, #7]
10063022:	4628      	mov	r0, r5
10063024:	300e      	adds	r0, #14
10063026:	9986      	ldr	r1, [sp, #536]	@ 0x218
10063028:	4622      	mov	r2, r4
1006302a:	f7ef fb97 	bl	1005275c <BLEPLAT_MemCpy>
1006302e:	4620      	mov	r0, r4
10063030:	300a      	adds	r0, #10
10063032:	70a8      	strb	r0, [r5, #2]
10063034:	0a00      	lsrs	r0, r0, #8
10063036:	70e8      	strb	r0, [r5, #3]
10063038:	200f      	movs	r0, #15
1006303a:	7128      	strb	r0, [r5, #4]
1006303c:	20ff      	movs	r0, #255	@ 0xff
1006303e:	7068      	strb	r0, [r5, #1]
10063040:	2082      	movs	r0, #130	@ 0x82
10063042:	7028      	strb	r0, [r5, #0]
10063044:	200c      	movs	r0, #12
10063046:	7168      	strb	r0, [r5, #5]
10063048:	340e      	adds	r4, #14
1006304a:	b2a1      	uxth	r1, r4
1006304c:	4628      	mov	r0, r5
1006304e:	f7eb fd53 	bl	1004eaf8 <BLE_STACK_Event>
10063052:	b07f      	add	sp, #508	@ 0x1fc
10063054:	b003      	add	sp, #12
10063056:	bdb0      	pop	{r4, r5, r7, pc}

10063058 <aci_gatt_clt_indication_event_cb>:
10063058:	b5b0      	push	{r4, r5, r7, lr}
1006305a:	b0ff      	sub	sp, #508	@ 0x1fc
1006305c:	b083      	sub	sp, #12
1006305e:	460c      	mov	r4, r1
10063060:	4605      	mov	r5, r0
10063062:	688b      	ldr	r3, [r1, #8]
10063064:	88ca      	ldrh	r2, [r1, #6]
10063066:	8889      	ldrh	r1, [r1, #4]
10063068:	4668      	mov	r0, sp
1006306a:	1d80      	adds	r0, r0, #6
1006306c:	f7f2 fd57 	bl	10055b1e <aci_gatt_clt_indication_event_copy>
10063070:	0728      	lsls	r0, r5, #28
10063072:	d502      	bpl.n	1006307a <aci_gatt_clt_indication_event_cb+0x22>
10063074:	68a0      	ldr	r0, [r4, #8]
10063076:	f7f1 ff09 	bl	10054e8c <ACL_pkt_release>
1006307a:	9903      	ldr	r1, [sp, #12]
1006307c:	460a      	mov	r2, r1
1006307e:	320a      	adds	r2, #10
10063080:	4668      	mov	r0, sp
10063082:	7082      	strb	r2, [r0, #2]
10063084:	0a12      	lsrs	r2, r2, #8
10063086:	70c2      	strb	r2, [r0, #3]
10063088:	220e      	movs	r2, #14
1006308a:	7102      	strb	r2, [r0, #4]
1006308c:	4a05      	ldr	r2, [pc, #20]	@ (100630a4 <__arm_cp.1_0>)
1006308e:	8002      	strh	r2, [r0, #0]
10063090:	220c      	movs	r2, #12
10063092:	7142      	strb	r2, [r0, #5]
10063094:	310e      	adds	r1, #14
10063096:	b289      	uxth	r1, r1
10063098:	f7eb fd2e 	bl	1004eaf8 <BLE_STACK_Event>
1006309c:	b07f      	add	sp, #508	@ 0x1fc
1006309e:	b003      	add	sp, #12
100630a0:	bdb0      	pop	{r4, r5, r7, pc}
100630a2:	46c0      	nop			@ (mov r8, r8)

100630a4 <__arm_cp.1_0>:
100630a4:	0000ff82 	.word	0x0000ff82

100630a8 <aci_gatt_clt_notification_event_cb>:
100630a8:	b5b0      	push	{r4, r5, r7, lr}
100630aa:	b0ff      	sub	sp, #508	@ 0x1fc
100630ac:	b085      	sub	sp, #20
100630ae:	460c      	mov	r4, r1
100630b0:	4605      	mov	r5, r0
100630b2:	688b      	ldr	r3, [r1, #8]
100630b4:	88ca      	ldrh	r2, [r1, #6]
100630b6:	8889      	ldrh	r1, [r1, #4]
100630b8:	a802      	add	r0, sp, #8
100630ba:	1d80      	adds	r0, r0, #6
100630bc:	f7f2 fd54 	bl	10055b68 <aci_gatt_clt_notification_event_copy>
100630c0:	0728      	lsls	r0, r5, #28
100630c2:	d502      	bpl.n	100630ca <aci_gatt_clt_notification_event_cb+0x22>
100630c4:	68a0      	ldr	r0, [r4, #8]
100630c6:	f7f1 fee1 	bl	10054e8c <ACL_pkt_release>
100630ca:	ac02      	add	r4, sp, #8
100630cc:	89a3      	ldrh	r3, [r4, #12]
100630ce:	8962      	ldrh	r2, [r4, #10]
100630d0:	8921      	ldrh	r1, [r4, #8]
100630d2:	88e0      	ldrh	r0, [r4, #6]
100630d4:	340e      	adds	r4, #14
100630d6:	9400      	str	r4, [sp, #0]
100630d8:	f7ff ff92 	bl	10063000 <aci_gatt_clt_notification_event_notify>
100630dc:	b07f      	add	sp, #508	@ 0x1fc
100630de:	b005      	add	sp, #20
100630e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

100630e4 <aci_gatt_srv_write_event_cb>:
100630e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100630e6:	b0ff      	sub	sp, #508	@ 0x1fc
100630e8:	b086      	sub	sp, #24
100630ea:	460c      	mov	r4, r1
100630ec:	4605      	mov	r5, r0
100630ee:	7a0b      	ldrb	r3, [r1, #8]
100630f0:	88ca      	ldrh	r2, [r1, #6]
100630f2:	8889      	ldrh	r1, [r1, #4]
100630f4:	8960      	ldrh	r0, [r4, #10]
100630f6:	89a6      	ldrh	r6, [r4, #12]
100630f8:	6927      	ldr	r7, [r4, #16]
100630fa:	9000      	str	r0, [sp, #0]
100630fc:	9601      	str	r6, [sp, #4]
100630fe:	9702      	str	r7, [sp, #8]
10063100:	a803      	add	r0, sp, #12
10063102:	1d80      	adds	r0, r0, #6
10063104:	f7f2 fd79 	bl	10055bfa <aci_gatt_srv_write_event_copy>
10063108:	0728      	lsls	r0, r5, #28
1006310a:	d502      	bpl.n	10063112 <aci_gatt_srv_write_event_cb+0x2e>
1006310c:	6920      	ldr	r0, [r4, #16]
1006310e:	f7f1 febd 	bl	10054e8c <ACL_pkt_release>
10063112:	a803      	add	r0, sp, #12
10063114:	7b41      	ldrb	r1, [r0, #13]
10063116:	7b82      	ldrb	r2, [r0, #14]
10063118:	0212      	lsls	r2, r2, #8
1006311a:	1851      	adds	r1, r2, r1
1006311c:	460a      	mov	r2, r1
1006311e:	320b      	adds	r2, #11
10063120:	7082      	strb	r2, [r0, #2]
10063122:	0a12      	lsrs	r2, r2, #8
10063124:	70c2      	strb	r2, [r0, #3]
10063126:	221a      	movs	r2, #26
10063128:	7102      	strb	r2, [r0, #4]
1006312a:	4a05      	ldr	r2, [pc, #20]	@ (10063140 <__arm_cp.3_0>)
1006312c:	8002      	strh	r2, [r0, #0]
1006312e:	220c      	movs	r2, #12
10063130:	7142      	strb	r2, [r0, #5]
10063132:	310f      	adds	r1, #15
10063134:	b289      	uxth	r1, r1
10063136:	f7eb fcdf 	bl	1004eaf8 <BLE_STACK_Event>
1006313a:	b07f      	add	sp, #508	@ 0x1fc
1006313c:	b006      	add	sp, #24
1006313e:	bdf0      	pop	{r4, r5, r6, r7, pc}

10063140 <__arm_cp.3_0>:
10063140:	0000ff82 	.word	0x0000ff82

10063144 <aci_gatt_clt_multi_notification_int_event_cb>:
10063144:	b5f0      	push	{r4, r5, r6, r7, lr}
10063146:	b0ff      	sub	sp, #508	@ 0x1fc
10063148:	b08c      	sub	sp, #48	@ 0x30
1006314a:	460c      	mov	r4, r1
1006314c:	4605      	mov	r5, r0
1006314e:	688b      	ldr	r3, [r1, #8]
10063150:	88ca      	ldrh	r2, [r1, #6]
10063152:	8889      	ldrh	r1, [r1, #4]
10063154:	a807      	add	r0, sp, #28
10063156:	1d80      	adds	r0, r0, #6
10063158:	f7f2 fd87 	bl	10055c6a <aci_gatt_clt_multi_notification_int_event_copy>
1006315c:	0728      	lsls	r0, r5, #28
1006315e:	d502      	bpl.n	10063166 <aci_gatt_clt_multi_notification_int_event_cb+0x22>
10063160:	68a0      	ldr	r0, [r4, #8]
10063162:	f7f1 fe93 	bl	10054e8c <ACL_pkt_release>
10063166:	a807      	add	r0, sp, #28
10063168:	8941      	ldrh	r1, [r0, #10]
1006316a:	9105      	str	r1, [sp, #20]
1006316c:	8901      	ldrh	r1, [r0, #8]
1006316e:	9103      	str	r1, [sp, #12]
10063170:	88c1      	ldrh	r1, [r0, #6]
10063172:	9102      	str	r1, [sp, #8]
10063174:	300c      	adds	r0, #12
10063176:	9004      	str	r0, [sp, #16]
10063178:	2500      	movs	r5, #0
1006317a:	9e04      	ldr	r6, [sp, #16]
1006317c:	b2a8      	uxth	r0, r5
1006317e:	9905      	ldr	r1, [sp, #20]
10063180:	4288      	cmp	r0, r1
10063182:	d21c      	bcs.n	100631be <aci_gatt_clt_multi_notification_int_event_cb+0x7a>
10063184:	1831      	adds	r1, r6, r0
10063186:	a88a      	add	r0, sp, #552	@ 0x228
10063188:	9006      	str	r0, [sp, #24]
1006318a:	2402      	movs	r4, #2
1006318c:	4622      	mov	r2, r4
1006318e:	f7ef fae5 	bl	1005275c <BLEPLAT_MemCpy>
10063192:	1ca8      	adds	r0, r5, #2
10063194:	b280      	uxth	r0, r0
10063196:	1831      	adds	r1, r6, r0
10063198:	af89      	add	r7, sp, #548	@ 0x224
1006319a:	4638      	mov	r0, r7
1006319c:	4622      	mov	r2, r4
1006319e:	f7ef fadd 	bl	1005275c <BLEPLAT_MemCpy>
100631a2:	1d28      	adds	r0, r5, #4
100631a4:	b284      	uxth	r4, r0
100631a6:	1930      	adds	r0, r6, r4
100631a8:	883b      	ldrh	r3, [r7, #0]
100631aa:	9906      	ldr	r1, [sp, #24]
100631ac:	880a      	ldrh	r2, [r1, #0]
100631ae:	9000      	str	r0, [sp, #0]
100631b0:	9802      	ldr	r0, [sp, #8]
100631b2:	9903      	ldr	r1, [sp, #12]
100631b4:	f7ff ff24 	bl	10063000 <aci_gatt_clt_notification_event_notify>
100631b8:	8838      	ldrh	r0, [r7, #0]
100631ba:	1825      	adds	r5, r4, r0
100631bc:	e7de      	b.n	1006317c <aci_gatt_clt_multi_notification_int_event_cb+0x38>
100631be:	b07f      	add	sp, #508	@ 0x1fc
100631c0:	b00c      	add	sp, #48	@ 0x30
100631c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100631c4 <aci_att_clt_find_info_resp_event_cb>:
100631c4:	b5b0      	push	{r4, r5, r7, lr}
100631c6:	b0ff      	sub	sp, #508	@ 0x1fc
100631c8:	b083      	sub	sp, #12
100631ca:	460c      	mov	r4, r1
100631cc:	4605      	mov	r5, r0
100631ce:	688b      	ldr	r3, [r1, #8]
100631d0:	88ca      	ldrh	r2, [r1, #6]
100631d2:	8889      	ldrh	r1, [r1, #4]
100631d4:	4668      	mov	r0, sp
100631d6:	1d80      	adds	r0, r0, #6
100631d8:	f7f2 fbc0 	bl	1005595c <aci_att_clt_find_info_resp_event_copy>
100631dc:	0728      	lsls	r0, r5, #28
100631de:	d502      	bpl.n	100631e6 <aci_att_clt_find_info_resp_event_cb+0x22>
100631e0:	68a0      	ldr	r0, [r4, #8]
100631e2:	f7f1 fe53 	bl	10054e8c <ACL_pkt_release>
100631e6:	4668      	mov	r0, sp
100631e8:	7ac1      	ldrb	r1, [r0, #11]
100631ea:	9a03      	ldr	r2, [sp, #12]
100631ec:	0212      	lsls	r2, r2, #8
100631ee:	1851      	adds	r1, r2, r1
100631f0:	460a      	mov	r2, r1
100631f2:	3209      	adds	r2, #9
100631f4:	7082      	strb	r2, [r0, #2]
100631f6:	0a12      	lsrs	r2, r2, #8
100631f8:	70c2      	strb	r2, [r0, #3]
100631fa:	2204      	movs	r2, #4
100631fc:	7102      	strb	r2, [r0, #4]
100631fe:	4a05      	ldr	r2, [pc, #20]	@ (10063214 <__arm_cp.5_0>)
10063200:	8002      	strh	r2, [r0, #0]
10063202:	220c      	movs	r2, #12
10063204:	7142      	strb	r2, [r0, #5]
10063206:	310d      	adds	r1, #13
10063208:	b289      	uxth	r1, r1
1006320a:	f7eb fc75 	bl	1004eaf8 <BLE_STACK_Event>
1006320e:	b07f      	add	sp, #508	@ 0x1fc
10063210:	b003      	add	sp, #12
10063212:	bdb0      	pop	{r4, r5, r7, pc}

10063214 <__arm_cp.5_0>:
10063214:	0000ff82 	.word	0x0000ff82

10063218 <aci_att_clt_find_by_type_value_resp_event_cb>:
10063218:	b5b0      	push	{r4, r5, r7, lr}
1006321a:	b0ff      	sub	sp, #508	@ 0x1fc
1006321c:	b083      	sub	sp, #12
1006321e:	460c      	mov	r4, r1
10063220:	4605      	mov	r5, r0
10063222:	688b      	ldr	r3, [r1, #8]
10063224:	88ca      	ldrh	r2, [r1, #6]
10063226:	8889      	ldrh	r1, [r1, #4]
10063228:	4668      	mov	r0, sp
1006322a:	1d80      	adds	r0, r0, #6
1006322c:	f7f2 fbb4 	bl	10055998 <aci_att_clt_find_by_type_value_resp_event_copy>
10063230:	0728      	lsls	r0, r5, #28
10063232:	d502      	bpl.n	1006323a <aci_att_clt_find_by_type_value_resp_event_cb+0x22>
10063234:	68a0      	ldr	r0, [r4, #8]
10063236:	f7f1 fe29 	bl	10054e8c <ACL_pkt_release>
1006323a:	4668      	mov	r0, sp
1006323c:	7a81      	ldrb	r1, [r0, #10]
1006323e:	0089      	lsls	r1, r1, #2
10063240:	1dca      	adds	r2, r1, #7
10063242:	7082      	strb	r2, [r0, #2]
10063244:	0a12      	lsrs	r2, r2, #8
10063246:	70c2      	strb	r2, [r0, #3]
10063248:	2205      	movs	r2, #5
1006324a:	7102      	strb	r2, [r0, #4]
1006324c:	4a04      	ldr	r2, [pc, #16]	@ (10063260 <__arm_cp.6_0>)
1006324e:	8002      	strh	r2, [r0, #0]
10063250:	220c      	movs	r2, #12
10063252:	7142      	strb	r2, [r0, #5]
10063254:	310b      	adds	r1, #11
10063256:	f7eb fc4f 	bl	1004eaf8 <BLE_STACK_Event>
1006325a:	b07f      	add	sp, #508	@ 0x1fc
1006325c:	b003      	add	sp, #12
1006325e:	bdb0      	pop	{r4, r5, r7, pc}

10063260 <__arm_cp.6_0>:
10063260:	0000ff82 	.word	0x0000ff82

10063264 <aci_att_clt_read_by_type_resp_event_cb>:
10063264:	b5b0      	push	{r4, r5, r7, lr}
10063266:	b0ff      	sub	sp, #508	@ 0x1fc
10063268:	b083      	sub	sp, #12
1006326a:	460c      	mov	r4, r1
1006326c:	4605      	mov	r5, r0
1006326e:	688b      	ldr	r3, [r1, #8]
10063270:	88ca      	ldrh	r2, [r1, #6]
10063272:	8889      	ldrh	r1, [r1, #4]
10063274:	4668      	mov	r0, sp
10063276:	1d80      	adds	r0, r0, #6
10063278:	f7f2 fba3 	bl	100559c2 <aci_att_clt_read_by_type_resp_event_copy>
1006327c:	0728      	lsls	r0, r5, #28
1006327e:	d502      	bpl.n	10063286 <aci_att_clt_read_by_type_resp_event_cb+0x22>
10063280:	68a0      	ldr	r0, [r4, #8]
10063282:	f7f1 fe03 	bl	10054e8c <ACL_pkt_release>
10063286:	4668      	mov	r0, sp
10063288:	7ac1      	ldrb	r1, [r0, #11]
1006328a:	9a03      	ldr	r2, [sp, #12]
1006328c:	0212      	lsls	r2, r2, #8
1006328e:	1851      	adds	r1, r2, r1
10063290:	460a      	mov	r2, r1
10063292:	3209      	adds	r2, #9
10063294:	7082      	strb	r2, [r0, #2]
10063296:	0a12      	lsrs	r2, r2, #8
10063298:	70c2      	strb	r2, [r0, #3]
1006329a:	2206      	movs	r2, #6
1006329c:	7102      	strb	r2, [r0, #4]
1006329e:	4a05      	ldr	r2, [pc, #20]	@ (100632b4 <__arm_cp.7_0>)
100632a0:	8002      	strh	r2, [r0, #0]
100632a2:	220c      	movs	r2, #12
100632a4:	7142      	strb	r2, [r0, #5]
100632a6:	310d      	adds	r1, #13
100632a8:	b289      	uxth	r1, r1
100632aa:	f7eb fc25 	bl	1004eaf8 <BLE_STACK_Event>
100632ae:	b07f      	add	sp, #508	@ 0x1fc
100632b0:	b003      	add	sp, #12
100632b2:	bdb0      	pop	{r4, r5, r7, pc}

100632b4 <__arm_cp.7_0>:
100632b4:	0000ff82 	.word	0x0000ff82

100632b8 <aci_att_clt_read_resp_event_cb>:
100632b8:	b5b0      	push	{r4, r5, r7, lr}
100632ba:	b0ff      	sub	sp, #508	@ 0x1fc
100632bc:	b083      	sub	sp, #12
100632be:	460c      	mov	r4, r1
100632c0:	4605      	mov	r5, r0
100632c2:	688b      	ldr	r3, [r1, #8]
100632c4:	88ca      	ldrh	r2, [r1, #6]
100632c6:	8889      	ldrh	r1, [r1, #4]
100632c8:	4668      	mov	r0, sp
100632ca:	1d80      	adds	r0, r0, #6
100632cc:	f7f2 fb97 	bl	100559fe <aci_att_clt_read_resp_event_copy>
100632d0:	0728      	lsls	r0, r5, #28
100632d2:	d502      	bpl.n	100632da <aci_att_clt_read_resp_event_cb+0x22>
100632d4:	68a0      	ldr	r0, [r4, #8]
100632d6:	f7f1 fdd9 	bl	10054e8c <ACL_pkt_release>
100632da:	4668      	mov	r0, sp
100632dc:	8941      	ldrh	r1, [r0, #10]
100632de:	460a      	mov	r2, r1
100632e0:	3208      	adds	r2, #8
100632e2:	7082      	strb	r2, [r0, #2]
100632e4:	0a12      	lsrs	r2, r2, #8
100632e6:	70c2      	strb	r2, [r0, #3]
100632e8:	2207      	movs	r2, #7
100632ea:	7102      	strb	r2, [r0, #4]
100632ec:	4a05      	ldr	r2, [pc, #20]	@ (10063304 <__arm_cp.8_0>)
100632ee:	8002      	strh	r2, [r0, #0]
100632f0:	220c      	movs	r2, #12
100632f2:	7142      	strb	r2, [r0, #5]
100632f4:	310c      	adds	r1, #12
100632f6:	b289      	uxth	r1, r1
100632f8:	f7eb fbfe 	bl	1004eaf8 <BLE_STACK_Event>
100632fc:	b07f      	add	sp, #508	@ 0x1fc
100632fe:	b003      	add	sp, #12
10063300:	bdb0      	pop	{r4, r5, r7, pc}
10063302:	46c0      	nop			@ (mov r8, r8)

10063304 <__arm_cp.8_0>:
10063304:	0000ff82 	.word	0x0000ff82

10063308 <aci_att_clt_read_blob_resp_event_cb>:
10063308:	b5b0      	push	{r4, r5, r7, lr}
1006330a:	b0ff      	sub	sp, #508	@ 0x1fc
1006330c:	b083      	sub	sp, #12
1006330e:	460c      	mov	r4, r1
10063310:	4605      	mov	r5, r0
10063312:	688b      	ldr	r3, [r1, #8]
10063314:	88ca      	ldrh	r2, [r1, #6]
10063316:	8889      	ldrh	r1, [r1, #4]
10063318:	4668      	mov	r0, sp
1006331a:	1d80      	adds	r0, r0, #6
1006331c:	f7f2 fb85 	bl	10055a2a <aci_att_clt_read_blob_resp_event_copy>
10063320:	0728      	lsls	r0, r5, #28
10063322:	d502      	bpl.n	1006332a <aci_att_clt_read_blob_resp_event_cb+0x22>
10063324:	68a0      	ldr	r0, [r4, #8]
10063326:	f7f1 fdb1 	bl	10054e8c <ACL_pkt_release>
1006332a:	4668      	mov	r0, sp
1006332c:	8941      	ldrh	r1, [r0, #10]
1006332e:	460a      	mov	r2, r1
10063330:	3208      	adds	r2, #8
10063332:	7082      	strb	r2, [r0, #2]
10063334:	0a12      	lsrs	r2, r2, #8
10063336:	70c2      	strb	r2, [r0, #3]
10063338:	2208      	movs	r2, #8
1006333a:	7102      	strb	r2, [r0, #4]
1006333c:	4a05      	ldr	r2, [pc, #20]	@ (10063354 <__arm_cp.9_0>)
1006333e:	8002      	strh	r2, [r0, #0]
10063340:	220c      	movs	r2, #12
10063342:	7142      	strb	r2, [r0, #5]
10063344:	310c      	adds	r1, #12
10063346:	b289      	uxth	r1, r1
10063348:	f7eb fbd6 	bl	1004eaf8 <BLE_STACK_Event>
1006334c:	b07f      	add	sp, #508	@ 0x1fc
1006334e:	b003      	add	sp, #12
10063350:	bdb0      	pop	{r4, r5, r7, pc}
10063352:	46c0      	nop			@ (mov r8, r8)

10063354 <__arm_cp.9_0>:
10063354:	0000ff82 	.word	0x0000ff82

10063358 <aci_att_clt_read_multiple_resp_event_cb>:
10063358:	b5b0      	push	{r4, r5, r7, lr}
1006335a:	b0ff      	sub	sp, #508	@ 0x1fc
1006335c:	b083      	sub	sp, #12
1006335e:	460c      	mov	r4, r1
10063360:	4605      	mov	r5, r0
10063362:	688b      	ldr	r3, [r1, #8]
10063364:	88ca      	ldrh	r2, [r1, #6]
10063366:	8889      	ldrh	r1, [r1, #4]
10063368:	4668      	mov	r0, sp
1006336a:	1d80      	adds	r0, r0, #6
1006336c:	f7f2 fb73 	bl	10055a56 <aci_att_clt_read_multiple_resp_event_copy>
10063370:	0728      	lsls	r0, r5, #28
10063372:	d502      	bpl.n	1006337a <aci_att_clt_read_multiple_resp_event_cb+0x22>
10063374:	68a0      	ldr	r0, [r4, #8]
10063376:	f7f1 fd89 	bl	10054e8c <ACL_pkt_release>
1006337a:	4668      	mov	r0, sp
1006337c:	8941      	ldrh	r1, [r0, #10]
1006337e:	460a      	mov	r2, r1
10063380:	3208      	adds	r2, #8
10063382:	7082      	strb	r2, [r0, #2]
10063384:	0a12      	lsrs	r2, r2, #8
10063386:	70c2      	strb	r2, [r0, #3]
10063388:	2209      	movs	r2, #9
1006338a:	7102      	strb	r2, [r0, #4]
1006338c:	4a05      	ldr	r2, [pc, #20]	@ (100633a4 <__arm_cp.10_0>)
1006338e:	8002      	strh	r2, [r0, #0]
10063390:	220c      	movs	r2, #12
10063392:	7142      	strb	r2, [r0, #5]
10063394:	310c      	adds	r1, #12
10063396:	b289      	uxth	r1, r1
10063398:	f7eb fbae 	bl	1004eaf8 <BLE_STACK_Event>
1006339c:	b07f      	add	sp, #508	@ 0x1fc
1006339e:	b003      	add	sp, #12
100633a0:	bdb0      	pop	{r4, r5, r7, pc}
100633a2:	46c0      	nop			@ (mov r8, r8)

100633a4 <__arm_cp.10_0>:
100633a4:	0000ff82 	.word	0x0000ff82

100633a8 <aci_att_clt_read_by_group_type_resp_event_cb>:
100633a8:	b5b0      	push	{r4, r5, r7, lr}
100633aa:	b0ff      	sub	sp, #508	@ 0x1fc
100633ac:	b083      	sub	sp, #12
100633ae:	460c      	mov	r4, r1
100633b0:	4605      	mov	r5, r0
100633b2:	688b      	ldr	r3, [r1, #8]
100633b4:	88ca      	ldrh	r2, [r1, #6]
100633b6:	8889      	ldrh	r1, [r1, #4]
100633b8:	4668      	mov	r0, sp
100633ba:	1d80      	adds	r0, r0, #6
100633bc:	f7f2 fb61 	bl	10055a82 <aci_att_clt_read_by_group_type_resp_event_copy>
100633c0:	0728      	lsls	r0, r5, #28
100633c2:	d502      	bpl.n	100633ca <aci_att_clt_read_by_group_type_resp_event_cb+0x22>
100633c4:	68a0      	ldr	r0, [r4, #8]
100633c6:	f7f1 fd61 	bl	10054e8c <ACL_pkt_release>
100633ca:	4668      	mov	r0, sp
100633cc:	7ac1      	ldrb	r1, [r0, #11]
100633ce:	9a03      	ldr	r2, [sp, #12]
100633d0:	0212      	lsls	r2, r2, #8
100633d2:	1851      	adds	r1, r2, r1
100633d4:	460a      	mov	r2, r1
100633d6:	3209      	adds	r2, #9
100633d8:	7082      	strb	r2, [r0, #2]
100633da:	0a12      	lsrs	r2, r2, #8
100633dc:	70c2      	strb	r2, [r0, #3]
100633de:	220a      	movs	r2, #10
100633e0:	7102      	strb	r2, [r0, #4]
100633e2:	4a05      	ldr	r2, [pc, #20]	@ (100633f8 <__arm_cp.11_0>)
100633e4:	8002      	strh	r2, [r0, #0]
100633e6:	220c      	movs	r2, #12
100633e8:	7142      	strb	r2, [r0, #5]
100633ea:	310d      	adds	r1, #13
100633ec:	b289      	uxth	r1, r1
100633ee:	f7eb fb83 	bl	1004eaf8 <BLE_STACK_Event>
100633f2:	b07f      	add	sp, #508	@ 0x1fc
100633f4:	b003      	add	sp, #12
100633f6:	bdb0      	pop	{r4, r5, r7, pc}

100633f8 <__arm_cp.11_0>:
100633f8:	0000ff82 	.word	0x0000ff82

100633fc <aci_att_clt_prepare_write_resp_event_cb>:
100633fc:	b5b0      	push	{r4, r5, r7, lr}
100633fe:	b0ff      	sub	sp, #508	@ 0x1fc
10063400:	b083      	sub	sp, #12
10063402:	460c      	mov	r4, r1
10063404:	4605      	mov	r5, r0
10063406:	688b      	ldr	r3, [r1, #8]
10063408:	88ca      	ldrh	r2, [r1, #6]
1006340a:	8889      	ldrh	r1, [r1, #4]
1006340c:	4668      	mov	r0, sp
1006340e:	1d80      	adds	r0, r0, #6
10063410:	f7f2 fb55 	bl	10055abe <aci_att_clt_prepare_write_resp_event_copy>
10063414:	0728      	lsls	r0, r5, #28
10063416:	d502      	bpl.n	1006341e <aci_att_clt_prepare_write_resp_event_cb+0x22>
10063418:	68a0      	ldr	r0, [r4, #8]
1006341a:	f7f1 fd37 	bl	10054e8c <ACL_pkt_release>
1006341e:	4668      	mov	r0, sp
10063420:	89c1      	ldrh	r1, [r0, #14]
10063422:	460a      	mov	r2, r1
10063424:	320c      	adds	r2, #12
10063426:	7082      	strb	r2, [r0, #2]
10063428:	0a12      	lsrs	r2, r2, #8
1006342a:	70c2      	strb	r2, [r0, #3]
1006342c:	220c      	movs	r2, #12
1006342e:	7102      	strb	r2, [r0, #4]
10063430:	4b04      	ldr	r3, [pc, #16]	@ (10063444 <__arm_cp.12_0>)
10063432:	8003      	strh	r3, [r0, #0]
10063434:	7142      	strb	r2, [r0, #5]
10063436:	3110      	adds	r1, #16
10063438:	b289      	uxth	r1, r1
1006343a:	f7eb fb5d 	bl	1004eaf8 <BLE_STACK_Event>
1006343e:	b07f      	add	sp, #508	@ 0x1fc
10063440:	b003      	add	sp, #12
10063442:	bdb0      	pop	{r4, r5, r7, pc}

10063444 <__arm_cp.12_0>:
10063444:	0000ff82 	.word	0x0000ff82

10063448 <aci_att_srv_prepare_write_req_event_cb>:
10063448:	b5f0      	push	{r4, r5, r6, r7, lr}
1006344a:	b0ff      	sub	sp, #508	@ 0x1fc
1006344c:	b086      	sub	sp, #24
1006344e:	460c      	mov	r4, r1
10063450:	4605      	mov	r5, r0
10063452:	890b      	ldrh	r3, [r1, #8]
10063454:	88ca      	ldrh	r2, [r1, #6]
10063456:	8889      	ldrh	r1, [r1, #4]
10063458:	8960      	ldrh	r0, [r4, #10]
1006345a:	89a6      	ldrh	r6, [r4, #12]
1006345c:	6927      	ldr	r7, [r4, #16]
1006345e:	9000      	str	r0, [sp, #0]
10063460:	9601      	str	r6, [sp, #4]
10063462:	9702      	str	r7, [sp, #8]
10063464:	a803      	add	r0, sp, #12
10063466:	1d80      	adds	r0, r0, #6
10063468:	f7f2 fbe2 	bl	10055c30 <aci_att_srv_prepare_write_req_event_copy>
1006346c:	0728      	lsls	r0, r5, #28
1006346e:	d502      	bpl.n	10063476 <aci_att_srv_prepare_write_req_event_cb+0x2e>
10063470:	6920      	ldr	r0, [r4, #16]
10063472:	f7f1 fd0b 	bl	10054e8c <ACL_pkt_release>
10063476:	a803      	add	r0, sp, #12
10063478:	89c1      	ldrh	r1, [r0, #14]
1006347a:	460a      	mov	r2, r1
1006347c:	320c      	adds	r2, #12
1006347e:	7082      	strb	r2, [r0, #2]
10063480:	0a12      	lsrs	r2, r2, #8
10063482:	70c2      	strb	r2, [r0, #3]
10063484:	221b      	movs	r2, #27
10063486:	7102      	strb	r2, [r0, #4]
10063488:	4a05      	ldr	r2, [pc, #20]	@ (100634a0 <__arm_cp.13_0>)
1006348a:	8002      	strh	r2, [r0, #0]
1006348c:	220c      	movs	r2, #12
1006348e:	7142      	strb	r2, [r0, #5]
10063490:	3110      	adds	r1, #16
10063492:	b289      	uxth	r1, r1
10063494:	f7eb fb30 	bl	1004eaf8 <BLE_STACK_Event>
10063498:	b07f      	add	sp, #508	@ 0x1fc
1006349a:	b006      	add	sp, #24
1006349c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006349e:	46c0      	nop			@ (mov r8, r8)

100634a0 <__arm_cp.13_0>:
100634a0:	0000ff82 	.word	0x0000ff82

100634a4 <aci_att_clt_read_multiple_var_len_resp_event_cb>:
100634a4:	b5b0      	push	{r4, r5, r7, lr}
100634a6:	b0ff      	sub	sp, #508	@ 0x1fc
100634a8:	b083      	sub	sp, #12
100634aa:	460c      	mov	r4, r1
100634ac:	4605      	mov	r5, r0
100634ae:	688b      	ldr	r3, [r1, #8]
100634b0:	88ca      	ldrh	r2, [r1, #6]
100634b2:	8889      	ldrh	r1, [r1, #4]
100634b4:	4668      	mov	r0, sp
100634b6:	1d80      	adds	r0, r0, #6
100634b8:	f7f2 fbed 	bl	10055c96 <aci_att_clt_read_multiple_var_len_resp_event_copy>
100634bc:	0728      	lsls	r0, r5, #28
100634be:	d502      	bpl.n	100634c6 <aci_att_clt_read_multiple_var_len_resp_event_cb+0x22>
100634c0:	68a0      	ldr	r0, [r4, #8]
100634c2:	f7f1 fce3 	bl	10054e8c <ACL_pkt_release>
100634c6:	4668      	mov	r0, sp
100634c8:	8941      	ldrh	r1, [r0, #10]
100634ca:	460a      	mov	r2, r1
100634cc:	3208      	adds	r2, #8
100634ce:	7082      	strb	r2, [r0, #2]
100634d0:	0a12      	lsrs	r2, r2, #8
100634d2:	70c2      	strb	r2, [r0, #3]
100634d4:	221e      	movs	r2, #30
100634d6:	7102      	strb	r2, [r0, #4]
100634d8:	4a05      	ldr	r2, [pc, #20]	@ (100634f0 <__arm_cp.14_0>)
100634da:	8002      	strh	r2, [r0, #0]
100634dc:	220c      	movs	r2, #12
100634de:	7142      	strb	r2, [r0, #5]
100634e0:	310c      	adds	r1, #12
100634e2:	b289      	uxth	r1, r1
100634e4:	f7eb fb08 	bl	1004eaf8 <BLE_STACK_Event>
100634e8:	b07f      	add	sp, #508	@ 0x1fc
100634ea:	b003      	add	sp, #12
100634ec:	bdb0      	pop	{r4, r5, r7, pc}
100634ee:	46c0      	nop			@ (mov r8, r8)

100634f0 <__arm_cp.14_0>:
100634f0:	0000ff82 	.word	0x0000ff82

100634f4 <aci_gatt_srv_attribute_modified_event_push_noinline>:
100634f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100634f6:	b085      	sub	sp, #20
100634f8:	4605      	mov	r5, r0
100634fa:	06c0      	lsls	r0, r0, #27
100634fc:	d445      	bmi.n	1006358a <aci_gatt_srv_attribute_modified_event_push_noinline+0x96>
100634fe:	4826      	ldr	r0, [pc, #152]	@ (10063598 <__arm_cp.15_0>)
10063500:	6800      	ldr	r0, [r0, #0]
10063502:	2450      	movs	r4, #80	@ 0x50
10063504:	5d00      	ldrb	r0, [r0, r4]
10063506:	2400      	movs	r4, #0
10063508:	07c0      	lsls	r0, r0, #31
1006350a:	d03f      	beq.n	1006358c <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
1006350c:	9302      	str	r3, [sp, #8]
1006350e:	9203      	str	r2, [sp, #12]
10063510:	9104      	str	r1, [sp, #16]
10063512:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10063514:	4821      	ldr	r0, [pc, #132]	@ (1006359c <__arm_cp.15_1>)
10063516:	6800      	ldr	r0, [r0, #0]
10063518:	0769      	lsls	r1, r5, #29
1006351a:	0ec9      	lsrs	r1, r1, #27
1006351c:	1840      	adds	r0, r0, r1
1006351e:	6900      	ldr	r0, [r0, #16]
10063520:	1e71      	subs	r1, r6, #1
10063522:	2203      	movs	r2, #3
10063524:	430a      	orrs	r2, r1
10063526:	3211      	adds	r2, #17
10063528:	0891      	lsrs	r1, r2, #2
1006352a:	b28b      	uxth	r3, r1
1006352c:	2256      	movs	r2, #86	@ 0x56
1006352e:	4629      	mov	r1, r5
10063530:	f7f1 fe60 	bl	100551f4 <aci_event_fifo_push_header>
10063534:	2800      	cmp	r0, #0
10063536:	d02c      	beq.n	10063592 <aci_gatt_srv_attribute_modified_event_push_noinline+0x9e>
10063538:	4607      	mov	r7, r0
1006353a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
1006353c:	9001      	str	r0, [sp, #4]
1006353e:	743e      	strb	r6, [r7, #16]
10063540:	9902      	ldr	r1, [sp, #8]
10063542:	73b9      	strb	r1, [r7, #14]
10063544:	9b03      	ldr	r3, [sp, #12]
10063546:	733b      	strb	r3, [r7, #12]
10063548:	9a04      	ldr	r2, [sp, #16]
1006354a:	72ba      	strb	r2, [r7, #10]
1006354c:	0a30      	lsrs	r0, r6, #8
1006354e:	7478      	strb	r0, [r7, #17]
10063550:	0a08      	lsrs	r0, r1, #8
10063552:	73f8      	strb	r0, [r7, #15]
10063554:	0a18      	lsrs	r0, r3, #8
10063556:	7378      	strb	r0, [r7, #13]
10063558:	0a10      	lsrs	r0, r2, #8
1006355a:	72f8      	strb	r0, [r7, #11]
1006355c:	4638      	mov	r0, r7
1006355e:	3012      	adds	r0, #18
10063560:	9901      	ldr	r1, [sp, #4]
10063562:	4632      	mov	r2, r6
10063564:	f7ef f8fa 	bl	1005275c <BLEPLAT_MemCpy>
10063568:	200c      	movs	r0, #12
1006356a:	7278      	strb	r0, [r7, #9]
1006356c:	2001      	movs	r0, #1
1006356e:	7238      	strb	r0, [r7, #8]
10063570:	360a      	adds	r6, #10
10063572:	0a30      	lsrs	r0, r6, #8
10063574:	71f8      	strb	r0, [r7, #7]
10063576:	71be      	strb	r6, [r7, #6]
10063578:	20ff      	movs	r0, #255	@ 0xff
1006357a:	7178      	strb	r0, [r7, #5]
1006357c:	2082      	movs	r0, #130	@ 0x82
1006357e:	7138      	strb	r0, [r7, #4]
10063580:	4628      	mov	r0, r5
10063582:	4639      	mov	r1, r7
10063584:	f7f1 fed3 	bl	1005532e <aci_event_fifo_push>
10063588:	e000      	b.n	1006358c <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
1006358a:	2486      	movs	r4, #134	@ 0x86
1006358c:	4620      	mov	r0, r4
1006358e:	b005      	add	sp, #20
10063590:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063592:	2407      	movs	r4, #7
10063594:	e7fa      	b.n	1006358c <aci_gatt_srv_attribute_modified_event_push_noinline+0x98>
10063596:	46c0      	nop			@ (mov r8, r8)

10063598 <__arm_cp.15_0>:
10063598:	20002ad0 	.word	0x20002ad0

1006359c <__arm_cp.15_1>:
1006359c:	20002a80 	.word	0x20002a80

100635a0 <aci_gatt_proc_timeout_event_push_noinline>:
100635a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100635a2:	4604      	mov	r4, r0
100635a4:	06c0      	lsls	r0, r0, #27
100635a6:	d408      	bmi.n	100635ba <aci_gatt_proc_timeout_event_push_noinline+0x1a>
100635a8:	460d      	mov	r5, r1
100635aa:	4819      	ldr	r0, [pc, #100]	@ (10063610 <__arm_cp.16_0>)
100635ac:	6800      	ldr	r0, [r0, #0]
100635ae:	2150      	movs	r1, #80	@ 0x50
100635b0:	5c40      	ldrb	r0, [r0, r1]
100635b2:	0780      	lsls	r0, r0, #30
100635b4:	d403      	bmi.n	100635be <aci_gatt_proc_timeout_event_push_noinline+0x1e>
100635b6:	2700      	movs	r7, #0
100635b8:	e027      	b.n	1006360a <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100635ba:	2786      	movs	r7, #134	@ 0x86
100635bc:	e025      	b.n	1006360a <aci_gatt_proc_timeout_event_push_noinline+0x6a>
100635be:	4616      	mov	r6, r2
100635c0:	4814      	ldr	r0, [pc, #80]	@ (10063614 <__arm_cp.16_1>)
100635c2:	6800      	ldr	r0, [r0, #0]
100635c4:	0761      	lsls	r1, r4, #29
100635c6:	0ec9      	lsrs	r1, r1, #27
100635c8:	1840      	adds	r0, r0, r1
100635ca:	6900      	ldr	r0, [r0, #16]
100635cc:	2257      	movs	r2, #87	@ 0x57
100635ce:	2303      	movs	r3, #3
100635d0:	4621      	mov	r1, r4
100635d2:	f7f1 fe0f 	bl	100551f4 <aci_event_fifo_push_header>
100635d6:	2800      	cmp	r0, #0
100635d8:	d016      	beq.n	10063608 <aci_gatt_proc_timeout_event_push_noinline+0x68>
100635da:	4601      	mov	r1, r0
100635dc:	7306      	strb	r6, [r0, #12]
100635de:	7285      	strb	r5, [r0, #10]
100635e0:	200c      	movs	r0, #12
100635e2:	7248      	strb	r0, [r1, #9]
100635e4:	2002      	movs	r0, #2
100635e6:	7208      	strb	r0, [r1, #8]
100635e8:	2700      	movs	r7, #0
100635ea:	71cf      	strb	r7, [r1, #7]
100635ec:	2006      	movs	r0, #6
100635ee:	7188      	strb	r0, [r1, #6]
100635f0:	20ff      	movs	r0, #255	@ 0xff
100635f2:	7148      	strb	r0, [r1, #5]
100635f4:	2082      	movs	r0, #130	@ 0x82
100635f6:	7108      	strb	r0, [r1, #4]
100635f8:	0a30      	lsrs	r0, r6, #8
100635fa:	7348      	strb	r0, [r1, #13]
100635fc:	0a28      	lsrs	r0, r5, #8
100635fe:	72c8      	strb	r0, [r1, #11]
10063600:	4620      	mov	r0, r4
10063602:	f7f1 fe94 	bl	1005532e <aci_event_fifo_push>
10063606:	e000      	b.n	1006360a <aci_gatt_proc_timeout_event_push_noinline+0x6a>
10063608:	2707      	movs	r7, #7
1006360a:	4638      	mov	r0, r7
1006360c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006360e:	46c0      	nop			@ (mov r8, r8)

10063610 <__arm_cp.16_0>:
10063610:	20002ad0 	.word	0x20002ad0

10063614 <__arm_cp.16_1>:
10063614:	20002a80 	.word	0x20002a80

10063618 <aci_gatt_clt_indication_event_push_noinline>:
10063618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006361a:	4605      	mov	r5, r0
1006361c:	06c0      	lsls	r0, r0, #27
1006361e:	d421      	bmi.n	10063664 <aci_gatt_clt_indication_event_push_noinline+0x4c>
10063620:	460e      	mov	r6, r1
10063622:	4813      	ldr	r0, [pc, #76]	@ (10063670 <__arm_cp.17_0>)
10063624:	6800      	ldr	r0, [r0, #0]
10063626:	2151      	movs	r1, #81	@ 0x51
10063628:	5c40      	ldrb	r0, [r0, r1]
1006362a:	2400      	movs	r4, #0
1006362c:	0680      	lsls	r0, r0, #26
1006362e:	d51a      	bpl.n	10063666 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10063630:	4617      	mov	r7, r2
10063632:	9300      	str	r3, [sp, #0]
10063634:	480f      	ldr	r0, [pc, #60]	@ (10063674 <__arm_cp.17_1>)
10063636:	6800      	ldr	r0, [r0, #0]
10063638:	0769      	lsls	r1, r5, #29
1006363a:	0ec9      	lsrs	r1, r1, #27
1006363c:	1840      	adds	r0, r0, r1
1006363e:	6900      	ldr	r0, [r0, #16]
10063640:	220f      	movs	r2, #15
10063642:	2303      	movs	r3, #3
10063644:	4629      	mov	r1, r5
10063646:	f7f1 fdd5 	bl	100551f4 <aci_event_fifo_push_header>
1006364a:	2800      	cmp	r0, #0
1006364c:	d00d      	beq.n	1006366a <aci_gatt_clt_indication_event_push_noinline+0x52>
1006364e:	4601      	mov	r1, r0
10063650:	9800      	ldr	r0, [sp, #0]
10063652:	60c8      	str	r0, [r1, #12]
10063654:	814f      	strh	r7, [r1, #10]
10063656:	810e      	strh	r6, [r1, #8]
10063658:	4807      	ldr	r0, [pc, #28]	@ (10063678 <__arm_cp.17_2>)
1006365a:	6048      	str	r0, [r1, #4]
1006365c:	4628      	mov	r0, r5
1006365e:	f7f1 fe66 	bl	1005532e <aci_event_fifo_push>
10063662:	e000      	b.n	10063666 <aci_gatt_clt_indication_event_push_noinline+0x4e>
10063664:	2486      	movs	r4, #134	@ 0x86
10063666:	4620      	mov	r0, r4
10063668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006366a:	2407      	movs	r4, #7
1006366c:	e7fb      	b.n	10063666 <aci_gatt_clt_indication_event_push_noinline+0x4e>
1006366e:	46c0      	nop			@ (mov r8, r8)

10063670 <__arm_cp.17_0>:
10063670:	20002ad0 	.word	0x20002ad0

10063674 <__arm_cp.17_1>:
10063674:	20002a80 	.word	0x20002a80

10063678 <__arm_cp.17_2>:
10063678:	10063059 	.word	0x10063059

1006367c <aci_gatt_clt_notification_event_push_noinline>:
1006367c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006367e:	4605      	mov	r5, r0
10063680:	06c0      	lsls	r0, r0, #27
10063682:	d421      	bmi.n	100636c8 <aci_gatt_clt_notification_event_push_noinline+0x4c>
10063684:	460e      	mov	r6, r1
10063686:	4813      	ldr	r0, [pc, #76]	@ (100636d4 <__arm_cp.18_0>)
10063688:	6800      	ldr	r0, [r0, #0]
1006368a:	2151      	movs	r1, #81	@ 0x51
1006368c:	5c40      	ldrb	r0, [r0, r1]
1006368e:	2400      	movs	r4, #0
10063690:	0640      	lsls	r0, r0, #25
10063692:	d51a      	bpl.n	100636ca <aci_gatt_clt_notification_event_push_noinline+0x4e>
10063694:	4617      	mov	r7, r2
10063696:	9300      	str	r3, [sp, #0]
10063698:	480f      	ldr	r0, [pc, #60]	@ (100636d8 <__arm_cp.18_1>)
1006369a:	6800      	ldr	r0, [r0, #0]
1006369c:	0769      	lsls	r1, r5, #29
1006369e:	0ec9      	lsrs	r1, r1, #27
100636a0:	1840      	adds	r0, r0, r1
100636a2:	6900      	ldr	r0, [r0, #16]
100636a4:	2210      	movs	r2, #16
100636a6:	2303      	movs	r3, #3
100636a8:	4629      	mov	r1, r5
100636aa:	f7f1 fda3 	bl	100551f4 <aci_event_fifo_push_header>
100636ae:	2800      	cmp	r0, #0
100636b0:	d00d      	beq.n	100636ce <aci_gatt_clt_notification_event_push_noinline+0x52>
100636b2:	4601      	mov	r1, r0
100636b4:	9800      	ldr	r0, [sp, #0]
100636b6:	60c8      	str	r0, [r1, #12]
100636b8:	814f      	strh	r7, [r1, #10]
100636ba:	810e      	strh	r6, [r1, #8]
100636bc:	4807      	ldr	r0, [pc, #28]	@ (100636dc <__arm_cp.18_2>)
100636be:	6048      	str	r0, [r1, #4]
100636c0:	4628      	mov	r0, r5
100636c2:	f7f1 fe34 	bl	1005532e <aci_event_fifo_push>
100636c6:	e000      	b.n	100636ca <aci_gatt_clt_notification_event_push_noinline+0x4e>
100636c8:	2486      	movs	r4, #134	@ 0x86
100636ca:	4620      	mov	r0, r4
100636cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100636ce:	2407      	movs	r4, #7
100636d0:	e7fb      	b.n	100636ca <aci_gatt_clt_notification_event_push_noinline+0x4e>
100636d2:	46c0      	nop			@ (mov r8, r8)

100636d4 <__arm_cp.18_0>:
100636d4:	20002ad0 	.word	0x20002ad0

100636d8 <__arm_cp.18_1>:
100636d8:	20002a80 	.word	0x20002a80

100636dc <__arm_cp.18_2>:
100636dc:	100630a9 	.word	0x100630a9

100636e0 <aci_gatt_clt_error_resp_event_push_noinline>:
100636e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100636e2:	4604      	mov	r4, r0
100636e4:	06c0      	lsls	r0, r0, #27
100636e6:	d408      	bmi.n	100636fa <aci_gatt_clt_error_resp_event_push_noinline+0x1a>
100636e8:	460d      	mov	r5, r1
100636ea:	481e      	ldr	r0, [pc, #120]	@ (10063764 <__arm_cp.20_0>)
100636ec:	6800      	ldr	r0, [r0, #0]
100636ee:	2151      	movs	r1, #81	@ 0x51
100636f0:	5640      	ldrsb	r0, [r0, r1]
100636f2:	2800      	cmp	r0, #0
100636f4:	d404      	bmi.n	10063700 <aci_gatt_clt_error_resp_event_push_noinline+0x20>
100636f6:	2700      	movs	r7, #0
100636f8:	e000      	b.n	100636fc <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
100636fa:	2786      	movs	r7, #134	@ 0x86
100636fc:	4638      	mov	r0, r7
100636fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063700:	461f      	mov	r7, r3
10063702:	4616      	mov	r6, r2
10063704:	4818      	ldr	r0, [pc, #96]	@ (10063768 <__arm_cp.20_1>)
10063706:	6800      	ldr	r0, [r0, #0]
10063708:	0761      	lsls	r1, r4, #29
1006370a:	0ec9      	lsrs	r1, r1, #27
1006370c:	1840      	adds	r0, r0, r1
1006370e:	6900      	ldr	r0, [r0, #16]
10063710:	225b      	movs	r2, #91	@ 0x5b
10063712:	2304      	movs	r3, #4
10063714:	4621      	mov	r1, r4
10063716:	f7f1 fd6d 	bl	100551f4 <aci_event_fifo_push_header>
1006371a:	2800      	cmp	r0, #0
1006371c:	d020      	beq.n	10063760 <aci_gatt_clt_error_resp_event_push_noinline+0x80>
1006371e:	4601      	mov	r1, r0
10063720:	9a07      	ldr	r2, [sp, #28]
10063722:	9806      	ldr	r0, [sp, #24]
10063724:	9000      	str	r0, [sp, #0]
10063726:	73c8      	strb	r0, [r1, #15]
10063728:	730e      	strb	r6, [r1, #12]
1006372a:	728d      	strb	r5, [r1, #10]
1006372c:	230c      	movs	r3, #12
1006372e:	724b      	strb	r3, [r1, #9]
10063730:	2311      	movs	r3, #17
10063732:	720b      	strb	r3, [r1, #8]
10063734:	4638      	mov	r0, r7
10063736:	2700      	movs	r7, #0
10063738:	71cf      	strb	r7, [r1, #7]
1006373a:	230a      	movs	r3, #10
1006373c:	718b      	strb	r3, [r1, #6]
1006373e:	744a      	strb	r2, [r1, #17]
10063740:	7388      	strb	r0, [r1, #14]
10063742:	22ff      	movs	r2, #255	@ 0xff
10063744:	714a      	strb	r2, [r1, #5]
10063746:	2282      	movs	r2, #130	@ 0x82
10063748:	710a      	strb	r2, [r1, #4]
1006374a:	9800      	ldr	r0, [sp, #0]
1006374c:	0a00      	lsrs	r0, r0, #8
1006374e:	7408      	strb	r0, [r1, #16]
10063750:	0a30      	lsrs	r0, r6, #8
10063752:	7348      	strb	r0, [r1, #13]
10063754:	0a28      	lsrs	r0, r5, #8
10063756:	72c8      	strb	r0, [r1, #11]
10063758:	4620      	mov	r0, r4
1006375a:	f7f1 fde8 	bl	1005532e <aci_event_fifo_push>
1006375e:	e7cd      	b.n	100636fc <aci_gatt_clt_error_resp_event_push_noinline+0x1c>
10063760:	2707      	movs	r7, #7
10063762:	e7cb      	b.n	100636fc <aci_gatt_clt_error_resp_event_push_noinline+0x1c>

10063764 <__arm_cp.20_0>:
10063764:	20002ad0 	.word	0x20002ad0

10063768 <__arm_cp.20_1>:
10063768:	20002a80 	.word	0x20002a80

1006376c <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>:
1006376c:	b5f0      	push	{r4, r5, r6, r7, lr}
1006376e:	b087      	sub	sp, #28
10063770:	4605      	mov	r5, r0
10063772:	06c0      	lsls	r0, r0, #27
10063774:	d443      	bmi.n	100637fe <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x92>
10063776:	460e      	mov	r6, r1
10063778:	4824      	ldr	r0, [pc, #144]	@ (1006380c <__arm_cp.21_0>)
1006377a:	6800      	ldr	r0, [r0, #0]
1006377c:	2152      	movs	r1, #82	@ 0x52
1006377e:	5c40      	ldrb	r0, [r0, r1]
10063780:	2400      	movs	r4, #0
10063782:	0780      	lsls	r0, r0, #30
10063784:	d53c      	bpl.n	10063800 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
10063786:	9204      	str	r2, [sp, #16]
10063788:	9305      	str	r3, [sp, #20]
1006378a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1006378c:	4820      	ldr	r0, [pc, #128]	@ (10063810 <__arm_cp.21_1>)
1006378e:	6800      	ldr	r0, [r0, #0]
10063790:	0769      	lsls	r1, r5, #29
10063792:	0ec9      	lsrs	r1, r1, #27
10063794:	1840      	adds	r0, r0, r1
10063796:	6900      	ldr	r0, [r0, #16]
10063798:	491e      	ldr	r1, [pc, #120]	@ (10063814 <__arm_cp.21_2>)
1006379a:	9206      	str	r2, [sp, #24]
1006379c:	1851      	adds	r1, r2, r1
1006379e:	2203      	movs	r2, #3
100637a0:	430a      	orrs	r2, r1
100637a2:	3211      	adds	r2, #17
100637a4:	0891      	lsrs	r1, r2, #2
100637a6:	b28b      	uxth	r3, r1
100637a8:	225c      	movs	r2, #92	@ 0x5c
100637aa:	4629      	mov	r1, r5
100637ac:	f7f1 fd22 	bl	100551f4 <aci_event_fifo_push_header>
100637b0:	2800      	cmp	r0, #0
100637b2:	d028      	beq.n	10063806 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x9a>
100637b4:	4607      	mov	r7, r0
100637b6:	990d      	ldr	r1, [sp, #52]	@ 0x34
100637b8:	9806      	ldr	r0, [sp, #24]
100637ba:	9000      	str	r0, [sp, #0]
100637bc:	9103      	str	r1, [sp, #12]
100637be:	9101      	str	r1, [sp, #4]
100637c0:	1d38      	adds	r0, r7, #4
100637c2:	4631      	mov	r1, r6
100637c4:	9a04      	ldr	r2, [sp, #16]
100637c6:	9b05      	ldr	r3, [sp, #20]
100637c8:	f7f2 f9f3 	bl	10055bb2 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_copy>
100637cc:	0728      	lsls	r0, r5, #28
100637ce:	d504      	bpl.n	100637da <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x6e>
100637d0:	9803      	ldr	r0, [sp, #12]
100637d2:	f7f1 fb5b 	bl	10054e8c <ACL_pkt_release>
100637d6:	20f7      	movs	r0, #247	@ 0xf7
100637d8:	4005      	ands	r5, r0
100637da:	200c      	movs	r0, #12
100637dc:	7278      	strb	r0, [r7, #9]
100637de:	2012      	movs	r0, #18
100637e0:	7238      	strb	r0, [r7, #8]
100637e2:	20ff      	movs	r0, #255	@ 0xff
100637e4:	7178      	strb	r0, [r7, #5]
100637e6:	2082      	movs	r0, #130	@ 0x82
100637e8:	7138      	strb	r0, [r7, #4]
100637ea:	9806      	ldr	r0, [sp, #24]
100637ec:	1dc0      	adds	r0, r0, #7
100637ee:	71b8      	strb	r0, [r7, #6]
100637f0:	0a00      	lsrs	r0, r0, #8
100637f2:	71f8      	strb	r0, [r7, #7]
100637f4:	4628      	mov	r0, r5
100637f6:	4639      	mov	r1, r7
100637f8:	f7f1 fd99 	bl	1005532e <aci_event_fifo_push>
100637fc:	e000      	b.n	10063800 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
100637fe:	2486      	movs	r4, #134	@ 0x86
10063800:	4620      	mov	r0, r4
10063802:	b007      	add	sp, #28
10063804:	bdf0      	pop	{r4, r5, r6, r7, pc}
10063806:	2407      	movs	r4, #7
10063808:	e7fa      	b.n	10063800 <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline+0x94>
1006380a:	46c0      	nop			@ (mov r8, r8)

1006380c <__arm_cp.21_0>:
1006380c:	20002ad0 	.word	0x20002ad0

10063810 <__arm_cp.21_1>:
10063810:	20002a80 	.word	0x20002a80

10063814 <__arm_cp.21_2>:
10063814:	0003fffd 	.word	0x0003fffd

10063818 <aci_gatt_tx_pool_available_event_push_noinline>:
10063818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006381a:	4604      	mov	r4, r0
1006381c:	06c0      	lsls	r0, r0, #27
1006381e:	d425      	bmi.n	1006386c <aci_gatt_tx_pool_available_event_push_noinline+0x54>
10063820:	4616      	mov	r6, r2
10063822:	460d      	mov	r5, r1
10063824:	4814      	ldr	r0, [pc, #80]	@ (10063878 <__arm_cp.22_0>)
10063826:	6800      	ldr	r0, [r0, #0]
10063828:	0761      	lsls	r1, r4, #29
1006382a:	0ec9      	lsrs	r1, r1, #27
1006382c:	1840      	adds	r0, r0, r1
1006382e:	6900      	ldr	r0, [r0, #16]
10063830:	225d      	movs	r2, #93	@ 0x5d
10063832:	2303      	movs	r3, #3
10063834:	4621      	mov	r1, r4
10063836:	f7f1 fcdd 	bl	100551f4 <aci_event_fifo_push_header>
1006383a:	2800      	cmp	r0, #0
1006383c:	d018      	beq.n	10063870 <aci_gatt_tx_pool_available_event_push_noinline+0x58>
1006383e:	4601      	mov	r1, r0
10063840:	7306      	strb	r6, [r0, #12]
10063842:	7285      	strb	r5, [r0, #10]
10063844:	200c      	movs	r0, #12
10063846:	7248      	strb	r0, [r1, #9]
10063848:	2016      	movs	r0, #22
1006384a:	7208      	strb	r0, [r1, #8]
1006384c:	2700      	movs	r7, #0
1006384e:	71cf      	strb	r7, [r1, #7]
10063850:	2006      	movs	r0, #6
10063852:	7188      	strb	r0, [r1, #6]
10063854:	20ff      	movs	r0, #255	@ 0xff
10063856:	7148      	strb	r0, [r1, #5]
10063858:	2082      	movs	r0, #130	@ 0x82
1006385a:	7108      	strb	r0, [r1, #4]
1006385c:	0a30      	lsrs	r0, r6, #8
1006385e:	7348      	strb	r0, [r1, #13]
10063860:	0a28      	lsrs	r0, r5, #8
10063862:	72c8      	strb	r0, [r1, #11]
10063864:	4620      	mov	r0, r4
10063866:	f7f1 fd62 	bl	1005532e <aci_event_fifo_push>
1006386a:	e002      	b.n	10063872 <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
1006386c:	2786      	movs	r7, #134	@ 0x86
1006386e:	e000      	b.n	10063872 <aci_gatt_tx_pool_available_event_push_noinline+0x5a>
10063870:	2707      	movs	r7, #7
10063872:	4638      	mov	r0, r7
10063874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063876:	46c0      	nop			@ (mov r8, r8)

10063878 <__arm_cp.22_0>:
10063878:	20002a80 	.word	0x20002a80

1006387c <aci_gatt_srv_confirmation_event_push_noinline>:
1006387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006387e:	4604      	mov	r4, r0
10063880:	06c0      	lsls	r0, r0, #27
10063882:	d425      	bmi.n	100638d0 <aci_gatt_srv_confirmation_event_push_noinline+0x54>
10063884:	4616      	mov	r6, r2
10063886:	460d      	mov	r5, r1
10063888:	4814      	ldr	r0, [pc, #80]	@ (100638dc <__arm_cp.23_0>)
1006388a:	6800      	ldr	r0, [r0, #0]
1006388c:	0761      	lsls	r1, r4, #29
1006388e:	0ec9      	lsrs	r1, r1, #27
10063890:	1840      	adds	r0, r0, r1
10063892:	6900      	ldr	r0, [r0, #16]
10063894:	225e      	movs	r2, #94	@ 0x5e
10063896:	2303      	movs	r3, #3
10063898:	4621      	mov	r1, r4
1006389a:	f7f1 fcab 	bl	100551f4 <aci_event_fifo_push_header>
1006389e:	2800      	cmp	r0, #0
100638a0:	d018      	beq.n	100638d4 <aci_gatt_srv_confirmation_event_push_noinline+0x58>
100638a2:	4601      	mov	r1, r0
100638a4:	7306      	strb	r6, [r0, #12]
100638a6:	7285      	strb	r5, [r0, #10]
100638a8:	200c      	movs	r0, #12
100638aa:	7248      	strb	r0, [r1, #9]
100638ac:	2017      	movs	r0, #23
100638ae:	7208      	strb	r0, [r1, #8]
100638b0:	2700      	movs	r7, #0
100638b2:	71cf      	strb	r7, [r1, #7]
100638b4:	2006      	movs	r0, #6
100638b6:	7188      	strb	r0, [r1, #6]
100638b8:	20ff      	movs	r0, #255	@ 0xff
100638ba:	7148      	strb	r0, [r1, #5]
100638bc:	2082      	movs	r0, #130	@ 0x82
100638be:	7108      	strb	r0, [r1, #4]
100638c0:	0a30      	lsrs	r0, r6, #8
100638c2:	7348      	strb	r0, [r1, #13]
100638c4:	0a28      	lsrs	r0, r5, #8
100638c6:	72c8      	strb	r0, [r1, #11]
100638c8:	4620      	mov	r0, r4
100638ca:	f7f1 fd30 	bl	1005532e <aci_event_fifo_push>
100638ce:	e002      	b.n	100638d6 <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
100638d0:	2786      	movs	r7, #134	@ 0x86
100638d2:	e000      	b.n	100638d6 <aci_gatt_srv_confirmation_event_push_noinline+0x5a>
100638d4:	2707      	movs	r7, #7
100638d6:	4638      	mov	r0, r7
100638d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100638da:	46c0      	nop			@ (mov r8, r8)

100638dc <__arm_cp.23_0>:
100638dc:	20002a80 	.word	0x20002a80

100638e0 <aci_gatt_srv_read_event_push_noinline>:
100638e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100638e2:	4604      	mov	r4, r0
100638e4:	06c0      	lsls	r0, r0, #27
100638e6:	d42e      	bmi.n	10063946 <aci_gatt_srv_read_event_push_noinline+0x66>
100638e8:	461f      	mov	r7, r3
100638ea:	4616      	mov	r6, r2
100638ec:	460d      	mov	r5, r1
100638ee:	4818      	ldr	r0, [pc, #96]	@ (10063950 <__arm_cp.24_0>)
100638f0:	6800      	ldr	r0, [r0, #0]
100638f2:	0761      	lsls	r1, r4, #29
100638f4:	0ec9      	lsrs	r1, r1, #27
100638f6:	1840      	adds	r0, r0, r1
100638f8:	6900      	ldr	r0, [r0, #16]
100638fa:	225f      	movs	r2, #95	@ 0x5f
100638fc:	2304      	movs	r3, #4
100638fe:	4621      	mov	r1, r4
10063900:	f7f1 fc78 	bl	100551f4 <aci_event_fifo_push_header>
10063904:	2800      	cmp	r0, #0
10063906:	d020      	beq.n	1006394a <aci_gatt_srv_read_event_push_noinline+0x6a>
10063908:	4601      	mov	r1, r0
1006390a:	9806      	ldr	r0, [sp, #24]
1006390c:	7408      	strb	r0, [r1, #16]
1006390e:	738f      	strb	r7, [r1, #14]
10063910:	730e      	strb	r6, [r1, #12]
10063912:	728d      	strb	r5, [r1, #10]
10063914:	220c      	movs	r2, #12
10063916:	724a      	strb	r2, [r1, #9]
10063918:	2219      	movs	r2, #25
1006391a:	720a      	strb	r2, [r1, #8]
1006391c:	462b      	mov	r3, r5
1006391e:	2500      	movs	r5, #0
10063920:	71cd      	strb	r5, [r1, #7]
10063922:	220a      	movs	r2, #10
10063924:	718a      	strb	r2, [r1, #6]
10063926:	22ff      	movs	r2, #255	@ 0xff
10063928:	714a      	strb	r2, [r1, #5]
1006392a:	2282      	movs	r2, #130	@ 0x82
1006392c:	710a      	strb	r2, [r1, #4]
1006392e:	0a00      	lsrs	r0, r0, #8
10063930:	7448      	strb	r0, [r1, #17]
10063932:	0a38      	lsrs	r0, r7, #8
10063934:	73c8      	strb	r0, [r1, #15]
10063936:	0a30      	lsrs	r0, r6, #8
10063938:	7348      	strb	r0, [r1, #13]
1006393a:	0a18      	lsrs	r0, r3, #8
1006393c:	72c8      	strb	r0, [r1, #11]
1006393e:	4620      	mov	r0, r4
10063940:	f7f1 fcf5 	bl	1005532e <aci_event_fifo_push>
10063944:	e002      	b.n	1006394c <aci_gatt_srv_read_event_push_noinline+0x6c>
10063946:	2586      	movs	r5, #134	@ 0x86
10063948:	e000      	b.n	1006394c <aci_gatt_srv_read_event_push_noinline+0x6c>
1006394a:	2507      	movs	r5, #7
1006394c:	4628      	mov	r0, r5
1006394e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063950 <__arm_cp.24_0>:
10063950:	20002a80 	.word	0x20002a80

10063954 <aci_gatt_srv_write_event_push_noinline>:
10063954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063956:	4604      	mov	r4, r0
10063958:	06c0      	lsls	r0, r0, #27
1006395a:	d420      	bmi.n	1006399e <aci_gatt_srv_write_event_push_noinline+0x4a>
1006395c:	461f      	mov	r7, r3
1006395e:	4616      	mov	r6, r2
10063960:	460d      	mov	r5, r1
10063962:	4811      	ldr	r0, [pc, #68]	@ (100639a8 <__arm_cp.25_0>)
10063964:	6800      	ldr	r0, [r0, #0]
10063966:	0761      	lsls	r1, r4, #29
10063968:	0ec9      	lsrs	r1, r1, #27
1006396a:	1840      	adds	r0, r0, r1
1006396c:	6900      	ldr	r0, [r0, #16]
1006396e:	2211      	movs	r2, #17
10063970:	2305      	movs	r3, #5
10063972:	4621      	mov	r1, r4
10063974:	f7f1 fc3e 	bl	100551f4 <aci_event_fifo_push_header>
10063978:	2800      	cmp	r0, #0
1006397a:	d012      	beq.n	100639a2 <aci_gatt_srv_write_event_push_noinline+0x4e>
1006397c:	4601      	mov	r1, r0
1006397e:	9808      	ldr	r0, [sp, #32]
10063980:	9a07      	ldr	r2, [sp, #28]
10063982:	9b06      	ldr	r3, [sp, #24]
10063984:	6148      	str	r0, [r1, #20]
10063986:	820a      	strh	r2, [r1, #16]
10063988:	81cb      	strh	r3, [r1, #14]
1006398a:	730f      	strb	r7, [r1, #12]
1006398c:	814e      	strh	r6, [r1, #10]
1006398e:	810d      	strh	r5, [r1, #8]
10063990:	4806      	ldr	r0, [pc, #24]	@ (100639ac <__arm_cp.25_1>)
10063992:	6048      	str	r0, [r1, #4]
10063994:	4620      	mov	r0, r4
10063996:	f7f1 fcca 	bl	1005532e <aci_event_fifo_push>
1006399a:	2000      	movs	r0, #0
1006399c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006399e:	2086      	movs	r0, #134	@ 0x86
100639a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100639a2:	2007      	movs	r0, #7
100639a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100639a6:	46c0      	nop			@ (mov r8, r8)

100639a8 <__arm_cp.25_0>:
100639a8:	20002a80 	.word	0x20002a80

100639ac <__arm_cp.25_1>:
100639ac:	100630e5 	.word	0x100630e5

100639b0 <aci_gatt_clt_multi_notification_int_event_push_noinline>:
100639b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100639b2:	4605      	mov	r5, r0
100639b4:	06c0      	lsls	r0, r0, #27
100639b6:	d421      	bmi.n	100639fc <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4c>
100639b8:	460e      	mov	r6, r1
100639ba:	4813      	ldr	r0, [pc, #76]	@ (10063a08 <__arm_cp.26_0>)
100639bc:	6800      	ldr	r0, [r0, #0]
100639be:	2152      	movs	r1, #82	@ 0x52
100639c0:	5c40      	ldrb	r0, [r0, r1]
100639c2:	2400      	movs	r4, #0
100639c4:	0700      	lsls	r0, r0, #28
100639c6:	d51a      	bpl.n	100639fe <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
100639c8:	4617      	mov	r7, r2
100639ca:	9300      	str	r3, [sp, #0]
100639cc:	480f      	ldr	r0, [pc, #60]	@ (10063a0c <__arm_cp.26_1>)
100639ce:	6800      	ldr	r0, [r0, #0]
100639d0:	0769      	lsls	r1, r5, #29
100639d2:	0ec9      	lsrs	r1, r1, #27
100639d4:	1840      	adds	r0, r0, r1
100639d6:	6900      	ldr	r0, [r0, #16]
100639d8:	2214      	movs	r2, #20
100639da:	2303      	movs	r3, #3
100639dc:	4629      	mov	r1, r5
100639de:	f7f1 fc09 	bl	100551f4 <aci_event_fifo_push_header>
100639e2:	2800      	cmp	r0, #0
100639e4:	d00d      	beq.n	10063a02 <aci_gatt_clt_multi_notification_int_event_push_noinline+0x52>
100639e6:	4601      	mov	r1, r0
100639e8:	9800      	ldr	r0, [sp, #0]
100639ea:	60c8      	str	r0, [r1, #12]
100639ec:	814f      	strh	r7, [r1, #10]
100639ee:	810e      	strh	r6, [r1, #8]
100639f0:	4807      	ldr	r0, [pc, #28]	@ (10063a10 <__arm_cp.26_2>)
100639f2:	6048      	str	r0, [r1, #4]
100639f4:	4628      	mov	r0, r5
100639f6:	f7f1 fc9a 	bl	1005532e <aci_event_fifo_push>
100639fa:	e000      	b.n	100639fe <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
100639fc:	2486      	movs	r4, #134	@ 0x86
100639fe:	4620      	mov	r0, r4
10063a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063a02:	2407      	movs	r4, #7
10063a04:	e7fb      	b.n	100639fe <aci_gatt_clt_multi_notification_int_event_push_noinline+0x4e>
10063a06:	46c0      	nop			@ (mov r8, r8)

10063a08 <__arm_cp.26_0>:
10063a08:	20002ad0 	.word	0x20002ad0

10063a0c <__arm_cp.26_1>:
10063a0c:	20002a80 	.word	0x20002a80

10063a10 <__arm_cp.26_2>:
10063a10:	10063145 	.word	0x10063145

10063a14 <aci_att_exchange_mtu_resp_event_push_noinline>:
10063a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063a16:	4604      	mov	r4, r0
10063a18:	06c0      	lsls	r0, r0, #27
10063a1a:	d408      	bmi.n	10063a2e <aci_att_exchange_mtu_resp_event_push_noinline+0x1a>
10063a1c:	460d      	mov	r5, r1
10063a1e:	4819      	ldr	r0, [pc, #100]	@ (10063a84 <__arm_cp.27_0>)
10063a20:	6800      	ldr	r0, [r0, #0]
10063a22:	2150      	movs	r1, #80	@ 0x50
10063a24:	5c40      	ldrb	r0, [r0, r1]
10063a26:	0740      	lsls	r0, r0, #29
10063a28:	d403      	bmi.n	10063a32 <aci_att_exchange_mtu_resp_event_push_noinline+0x1e>
10063a2a:	2700      	movs	r7, #0
10063a2c:	e027      	b.n	10063a7e <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063a2e:	2786      	movs	r7, #134	@ 0x86
10063a30:	e025      	b.n	10063a7e <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063a32:	4616      	mov	r6, r2
10063a34:	4814      	ldr	r0, [pc, #80]	@ (10063a88 <__arm_cp.27_1>)
10063a36:	6800      	ldr	r0, [r0, #0]
10063a38:	0761      	lsls	r1, r4, #29
10063a3a:	0ec9      	lsrs	r1, r1, #27
10063a3c:	1840      	adds	r0, r0, r1
10063a3e:	6900      	ldr	r0, [r0, #16]
10063a40:	2258      	movs	r2, #88	@ 0x58
10063a42:	2703      	movs	r7, #3
10063a44:	4621      	mov	r1, r4
10063a46:	463b      	mov	r3, r7
10063a48:	f7f1 fbd4 	bl	100551f4 <aci_event_fifo_push_header>
10063a4c:	2800      	cmp	r0, #0
10063a4e:	d015      	beq.n	10063a7c <aci_att_exchange_mtu_resp_event_push_noinline+0x68>
10063a50:	4601      	mov	r1, r0
10063a52:	7306      	strb	r6, [r0, #12]
10063a54:	7285      	strb	r5, [r0, #10]
10063a56:	200c      	movs	r0, #12
10063a58:	7248      	strb	r0, [r1, #9]
10063a5a:	720f      	strb	r7, [r1, #8]
10063a5c:	2700      	movs	r7, #0
10063a5e:	71cf      	strb	r7, [r1, #7]
10063a60:	2006      	movs	r0, #6
10063a62:	7188      	strb	r0, [r1, #6]
10063a64:	20ff      	movs	r0, #255	@ 0xff
10063a66:	7148      	strb	r0, [r1, #5]
10063a68:	2082      	movs	r0, #130	@ 0x82
10063a6a:	7108      	strb	r0, [r1, #4]
10063a6c:	0a30      	lsrs	r0, r6, #8
10063a6e:	7348      	strb	r0, [r1, #13]
10063a70:	0a28      	lsrs	r0, r5, #8
10063a72:	72c8      	strb	r0, [r1, #11]
10063a74:	4620      	mov	r0, r4
10063a76:	f7f1 fc5a 	bl	1005532e <aci_event_fifo_push>
10063a7a:	e000      	b.n	10063a7e <aci_att_exchange_mtu_resp_event_push_noinline+0x6a>
10063a7c:	2707      	movs	r7, #7
10063a7e:	4638      	mov	r0, r7
10063a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063a82:	46c0      	nop			@ (mov r8, r8)

10063a84 <__arm_cp.27_0>:
10063a84:	20002ad0 	.word	0x20002ad0

10063a88 <__arm_cp.27_1>:
10063a88:	20002a80 	.word	0x20002a80

10063a8c <aci_att_clt_find_info_resp_event_push_noinline>:
10063a8c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063a8e:	4604      	mov	r4, r0
10063a90:	06c0      	lsls	r0, r0, #27
10063a92:	d424      	bmi.n	10063ade <aci_att_clt_find_info_resp_event_push_noinline+0x52>
10063a94:	4616      	mov	r6, r2
10063a96:	4813      	ldr	r0, [pc, #76]	@ (10063ae4 <__arm_cp.28_0>)
10063a98:	6800      	ldr	r0, [r0, #0]
10063a9a:	2250      	movs	r2, #80	@ 0x50
10063a9c:	5c80      	ldrb	r0, [r0, r2]
10063a9e:	2500      	movs	r5, #0
10063aa0:	0700      	lsls	r0, r0, #28
10063aa2:	d51d      	bpl.n	10063ae0 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063aa4:	461f      	mov	r7, r3
10063aa6:	9101      	str	r1, [sp, #4]
10063aa8:	9502      	str	r5, [sp, #8]
10063aaa:	480f      	ldr	r0, [pc, #60]	@ (10063ae8 <__arm_cp.28_1>)
10063aac:	6800      	ldr	r0, [r0, #0]
10063aae:	0761      	lsls	r1, r4, #29
10063ab0:	0ec9      	lsrs	r1, r1, #27
10063ab2:	1840      	adds	r0, r0, r1
10063ab4:	6900      	ldr	r0, [r0, #16]
10063ab6:	2507      	movs	r5, #7
10063ab8:	2303      	movs	r3, #3
10063aba:	4621      	mov	r1, r4
10063abc:	462a      	mov	r2, r5
10063abe:	f7f1 fb99 	bl	100551f4 <aci_event_fifo_push_header>
10063ac2:	2800      	cmp	r0, #0
10063ac4:	d00c      	beq.n	10063ae0 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063ac6:	4601      	mov	r1, r0
10063ac8:	60c7      	str	r7, [r0, #12]
10063aca:	8146      	strh	r6, [r0, #10]
10063acc:	9801      	ldr	r0, [sp, #4]
10063ace:	8108      	strh	r0, [r1, #8]
10063ad0:	4806      	ldr	r0, [pc, #24]	@ (10063aec <__arm_cp.28_2>)
10063ad2:	6048      	str	r0, [r1, #4]
10063ad4:	4620      	mov	r0, r4
10063ad6:	f7f1 fc2a 	bl	1005532e <aci_event_fifo_push>
10063ada:	9d02      	ldr	r5, [sp, #8]
10063adc:	e000      	b.n	10063ae0 <aci_att_clt_find_info_resp_event_push_noinline+0x54>
10063ade:	2586      	movs	r5, #134	@ 0x86
10063ae0:	4628      	mov	r0, r5
10063ae2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10063ae4 <__arm_cp.28_0>:
10063ae4:	20002ad0 	.word	0x20002ad0

10063ae8 <__arm_cp.28_1>:
10063ae8:	20002a80 	.word	0x20002a80

10063aec <__arm_cp.28_2>:
10063aec:	100631c5 	.word	0x100631c5

10063af0 <aci_att_clt_find_by_type_value_resp_event_push_noinline>:
10063af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063af2:	4605      	mov	r5, r0
10063af4:	06c0      	lsls	r0, r0, #27
10063af6:	d421      	bmi.n	10063b3c <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4c>
10063af8:	460e      	mov	r6, r1
10063afa:	4813      	ldr	r0, [pc, #76]	@ (10063b48 <__arm_cp.29_0>)
10063afc:	6800      	ldr	r0, [r0, #0]
10063afe:	2150      	movs	r1, #80	@ 0x50
10063b00:	5c40      	ldrb	r0, [r0, r1]
10063b02:	2400      	movs	r4, #0
10063b04:	06c0      	lsls	r0, r0, #27
10063b06:	d51a      	bpl.n	10063b3e <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063b08:	4617      	mov	r7, r2
10063b0a:	9300      	str	r3, [sp, #0]
10063b0c:	480f      	ldr	r0, [pc, #60]	@ (10063b4c <__arm_cp.29_1>)
10063b0e:	6800      	ldr	r0, [r0, #0]
10063b10:	0769      	lsls	r1, r5, #29
10063b12:	0ec9      	lsrs	r1, r1, #27
10063b14:	1840      	adds	r0, r0, r1
10063b16:	6900      	ldr	r0, [r0, #16]
10063b18:	2208      	movs	r2, #8
10063b1a:	2303      	movs	r3, #3
10063b1c:	4629      	mov	r1, r5
10063b1e:	f7f1 fb69 	bl	100551f4 <aci_event_fifo_push_header>
10063b22:	2800      	cmp	r0, #0
10063b24:	d00d      	beq.n	10063b42 <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x52>
10063b26:	4601      	mov	r1, r0
10063b28:	9800      	ldr	r0, [sp, #0]
10063b2a:	60c8      	str	r0, [r1, #12]
10063b2c:	814f      	strh	r7, [r1, #10]
10063b2e:	810e      	strh	r6, [r1, #8]
10063b30:	4807      	ldr	r0, [pc, #28]	@ (10063b50 <__arm_cp.29_2>)
10063b32:	6048      	str	r0, [r1, #4]
10063b34:	4628      	mov	r0, r5
10063b36:	f7f1 fbfa 	bl	1005532e <aci_event_fifo_push>
10063b3a:	e000      	b.n	10063b3e <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063b3c:	2486      	movs	r4, #134	@ 0x86
10063b3e:	4620      	mov	r0, r4
10063b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063b42:	2407      	movs	r4, #7
10063b44:	e7fb      	b.n	10063b3e <aci_att_clt_find_by_type_value_resp_event_push_noinline+0x4e>
10063b46:	46c0      	nop			@ (mov r8, r8)

10063b48 <__arm_cp.29_0>:
10063b48:	20002ad0 	.word	0x20002ad0

10063b4c <__arm_cp.29_1>:
10063b4c:	20002a80 	.word	0x20002a80

10063b50 <__arm_cp.29_2>:
10063b50:	10063219 	.word	0x10063219

10063b54 <aci_att_clt_read_by_type_resp_event_push_noinline>:
10063b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063b56:	4605      	mov	r5, r0
10063b58:	06c0      	lsls	r0, r0, #27
10063b5a:	d421      	bmi.n	10063ba0 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4c>
10063b5c:	460e      	mov	r6, r1
10063b5e:	4813      	ldr	r0, [pc, #76]	@ (10063bac <__arm_cp.30_0>)
10063b60:	6800      	ldr	r0, [r0, #0]
10063b62:	2150      	movs	r1, #80	@ 0x50
10063b64:	5c40      	ldrb	r0, [r0, r1]
10063b66:	2400      	movs	r4, #0
10063b68:	0680      	lsls	r0, r0, #26
10063b6a:	d51a      	bpl.n	10063ba2 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063b6c:	4617      	mov	r7, r2
10063b6e:	9300      	str	r3, [sp, #0]
10063b70:	480f      	ldr	r0, [pc, #60]	@ (10063bb0 <__arm_cp.30_1>)
10063b72:	6800      	ldr	r0, [r0, #0]
10063b74:	0769      	lsls	r1, r5, #29
10063b76:	0ec9      	lsrs	r1, r1, #27
10063b78:	1840      	adds	r0, r0, r1
10063b7a:	6900      	ldr	r0, [r0, #16]
10063b7c:	2209      	movs	r2, #9
10063b7e:	2303      	movs	r3, #3
10063b80:	4629      	mov	r1, r5
10063b82:	f7f1 fb37 	bl	100551f4 <aci_event_fifo_push_header>
10063b86:	2800      	cmp	r0, #0
10063b88:	d00d      	beq.n	10063ba6 <aci_att_clt_read_by_type_resp_event_push_noinline+0x52>
10063b8a:	4601      	mov	r1, r0
10063b8c:	9800      	ldr	r0, [sp, #0]
10063b8e:	60c8      	str	r0, [r1, #12]
10063b90:	814f      	strh	r7, [r1, #10]
10063b92:	810e      	strh	r6, [r1, #8]
10063b94:	4807      	ldr	r0, [pc, #28]	@ (10063bb4 <__arm_cp.30_2>)
10063b96:	6048      	str	r0, [r1, #4]
10063b98:	4628      	mov	r0, r5
10063b9a:	f7f1 fbc8 	bl	1005532e <aci_event_fifo_push>
10063b9e:	e000      	b.n	10063ba2 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063ba0:	2486      	movs	r4, #134	@ 0x86
10063ba2:	4620      	mov	r0, r4
10063ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063ba6:	2407      	movs	r4, #7
10063ba8:	e7fb      	b.n	10063ba2 <aci_att_clt_read_by_type_resp_event_push_noinline+0x4e>
10063baa:	46c0      	nop			@ (mov r8, r8)

10063bac <__arm_cp.30_0>:
10063bac:	20002ad0 	.word	0x20002ad0

10063bb0 <__arm_cp.30_1>:
10063bb0:	20002a80 	.word	0x20002a80

10063bb4 <__arm_cp.30_2>:
10063bb4:	10063265 	.word	0x10063265

10063bb8 <aci_att_clt_read_resp_event_push_noinline>:
10063bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063bba:	4605      	mov	r5, r0
10063bbc:	06c0      	lsls	r0, r0, #27
10063bbe:	d421      	bmi.n	10063c04 <aci_att_clt_read_resp_event_push_noinline+0x4c>
10063bc0:	460e      	mov	r6, r1
10063bc2:	4813      	ldr	r0, [pc, #76]	@ (10063c10 <__arm_cp.31_0>)
10063bc4:	6800      	ldr	r0, [r0, #0]
10063bc6:	2150      	movs	r1, #80	@ 0x50
10063bc8:	5c40      	ldrb	r0, [r0, r1]
10063bca:	2400      	movs	r4, #0
10063bcc:	0640      	lsls	r0, r0, #25
10063bce:	d51a      	bpl.n	10063c06 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063bd0:	4617      	mov	r7, r2
10063bd2:	9300      	str	r3, [sp, #0]
10063bd4:	480f      	ldr	r0, [pc, #60]	@ (10063c14 <__arm_cp.31_1>)
10063bd6:	6800      	ldr	r0, [r0, #0]
10063bd8:	0769      	lsls	r1, r5, #29
10063bda:	0ec9      	lsrs	r1, r1, #27
10063bdc:	1840      	adds	r0, r0, r1
10063bde:	6900      	ldr	r0, [r0, #16]
10063be0:	220a      	movs	r2, #10
10063be2:	2303      	movs	r3, #3
10063be4:	4629      	mov	r1, r5
10063be6:	f7f1 fb05 	bl	100551f4 <aci_event_fifo_push_header>
10063bea:	2800      	cmp	r0, #0
10063bec:	d00d      	beq.n	10063c0a <aci_att_clt_read_resp_event_push_noinline+0x52>
10063bee:	4601      	mov	r1, r0
10063bf0:	9800      	ldr	r0, [sp, #0]
10063bf2:	60c8      	str	r0, [r1, #12]
10063bf4:	814f      	strh	r7, [r1, #10]
10063bf6:	810e      	strh	r6, [r1, #8]
10063bf8:	4807      	ldr	r0, [pc, #28]	@ (10063c18 <__arm_cp.31_2>)
10063bfa:	6048      	str	r0, [r1, #4]
10063bfc:	4628      	mov	r0, r5
10063bfe:	f7f1 fb96 	bl	1005532e <aci_event_fifo_push>
10063c02:	e000      	b.n	10063c06 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063c04:	2486      	movs	r4, #134	@ 0x86
10063c06:	4620      	mov	r0, r4
10063c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063c0a:	2407      	movs	r4, #7
10063c0c:	e7fb      	b.n	10063c06 <aci_att_clt_read_resp_event_push_noinline+0x4e>
10063c0e:	46c0      	nop			@ (mov r8, r8)

10063c10 <__arm_cp.31_0>:
10063c10:	20002ad0 	.word	0x20002ad0

10063c14 <__arm_cp.31_1>:
10063c14:	20002a80 	.word	0x20002a80

10063c18 <__arm_cp.31_2>:
10063c18:	100632b9 	.word	0x100632b9

10063c1c <aci_att_clt_read_blob_resp_event_push_noinline>:
10063c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063c1e:	4605      	mov	r5, r0
10063c20:	06c0      	lsls	r0, r0, #27
10063c22:	d421      	bmi.n	10063c68 <aci_att_clt_read_blob_resp_event_push_noinline+0x4c>
10063c24:	460e      	mov	r6, r1
10063c26:	4813      	ldr	r0, [pc, #76]	@ (10063c74 <__arm_cp.32_0>)
10063c28:	6800      	ldr	r0, [r0, #0]
10063c2a:	2150      	movs	r1, #80	@ 0x50
10063c2c:	5640      	ldrsb	r0, [r0, r1]
10063c2e:	2400      	movs	r4, #0
10063c30:	2800      	cmp	r0, #0
10063c32:	d51a      	bpl.n	10063c6a <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063c34:	4617      	mov	r7, r2
10063c36:	9300      	str	r3, [sp, #0]
10063c38:	480f      	ldr	r0, [pc, #60]	@ (10063c78 <__arm_cp.32_1>)
10063c3a:	6800      	ldr	r0, [r0, #0]
10063c3c:	0769      	lsls	r1, r5, #29
10063c3e:	0ec9      	lsrs	r1, r1, #27
10063c40:	1840      	adds	r0, r0, r1
10063c42:	6900      	ldr	r0, [r0, #16]
10063c44:	220b      	movs	r2, #11
10063c46:	2303      	movs	r3, #3
10063c48:	4629      	mov	r1, r5
10063c4a:	f7f1 fad3 	bl	100551f4 <aci_event_fifo_push_header>
10063c4e:	2800      	cmp	r0, #0
10063c50:	d00d      	beq.n	10063c6e <aci_att_clt_read_blob_resp_event_push_noinline+0x52>
10063c52:	4601      	mov	r1, r0
10063c54:	9800      	ldr	r0, [sp, #0]
10063c56:	60c8      	str	r0, [r1, #12]
10063c58:	814f      	strh	r7, [r1, #10]
10063c5a:	810e      	strh	r6, [r1, #8]
10063c5c:	4807      	ldr	r0, [pc, #28]	@ (10063c7c <__arm_cp.32_2>)
10063c5e:	6048      	str	r0, [r1, #4]
10063c60:	4628      	mov	r0, r5
10063c62:	f7f1 fb64 	bl	1005532e <aci_event_fifo_push>
10063c66:	e000      	b.n	10063c6a <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063c68:	2486      	movs	r4, #134	@ 0x86
10063c6a:	4620      	mov	r0, r4
10063c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063c6e:	2407      	movs	r4, #7
10063c70:	e7fb      	b.n	10063c6a <aci_att_clt_read_blob_resp_event_push_noinline+0x4e>
10063c72:	46c0      	nop			@ (mov r8, r8)

10063c74 <__arm_cp.32_0>:
10063c74:	20002ad0 	.word	0x20002ad0

10063c78 <__arm_cp.32_1>:
10063c78:	20002a80 	.word	0x20002a80

10063c7c <__arm_cp.32_2>:
10063c7c:	10063309 	.word	0x10063309

10063c80 <aci_att_clt_read_multiple_resp_event_push_noinline>:
10063c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063c82:	4605      	mov	r5, r0
10063c84:	06c0      	lsls	r0, r0, #27
10063c86:	d421      	bmi.n	10063ccc <aci_att_clt_read_multiple_resp_event_push_noinline+0x4c>
10063c88:	460e      	mov	r6, r1
10063c8a:	4813      	ldr	r0, [pc, #76]	@ (10063cd8 <__arm_cp.33_0>)
10063c8c:	6800      	ldr	r0, [r0, #0]
10063c8e:	2151      	movs	r1, #81	@ 0x51
10063c90:	5c40      	ldrb	r0, [r0, r1]
10063c92:	2400      	movs	r4, #0
10063c94:	07c0      	lsls	r0, r0, #31
10063c96:	d01a      	beq.n	10063cce <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063c98:	4617      	mov	r7, r2
10063c9a:	9300      	str	r3, [sp, #0]
10063c9c:	480f      	ldr	r0, [pc, #60]	@ (10063cdc <__arm_cp.33_1>)
10063c9e:	6800      	ldr	r0, [r0, #0]
10063ca0:	0769      	lsls	r1, r5, #29
10063ca2:	0ec9      	lsrs	r1, r1, #27
10063ca4:	1840      	adds	r0, r0, r1
10063ca6:	6900      	ldr	r0, [r0, #16]
10063ca8:	220c      	movs	r2, #12
10063caa:	2303      	movs	r3, #3
10063cac:	4629      	mov	r1, r5
10063cae:	f7f1 faa1 	bl	100551f4 <aci_event_fifo_push_header>
10063cb2:	2800      	cmp	r0, #0
10063cb4:	d00d      	beq.n	10063cd2 <aci_att_clt_read_multiple_resp_event_push_noinline+0x52>
10063cb6:	4601      	mov	r1, r0
10063cb8:	9800      	ldr	r0, [sp, #0]
10063cba:	60c8      	str	r0, [r1, #12]
10063cbc:	814f      	strh	r7, [r1, #10]
10063cbe:	810e      	strh	r6, [r1, #8]
10063cc0:	4807      	ldr	r0, [pc, #28]	@ (10063ce0 <__arm_cp.33_2>)
10063cc2:	6048      	str	r0, [r1, #4]
10063cc4:	4628      	mov	r0, r5
10063cc6:	f7f1 fb32 	bl	1005532e <aci_event_fifo_push>
10063cca:	e000      	b.n	10063cce <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063ccc:	2486      	movs	r4, #134	@ 0x86
10063cce:	4620      	mov	r0, r4
10063cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063cd2:	2407      	movs	r4, #7
10063cd4:	e7fb      	b.n	10063cce <aci_att_clt_read_multiple_resp_event_push_noinline+0x4e>
10063cd6:	46c0      	nop			@ (mov r8, r8)

10063cd8 <__arm_cp.33_0>:
10063cd8:	20002ad0 	.word	0x20002ad0

10063cdc <__arm_cp.33_1>:
10063cdc:	20002a80 	.word	0x20002a80

10063ce0 <__arm_cp.33_2>:
10063ce0:	10063359 	.word	0x10063359

10063ce4 <aci_att_clt_read_by_group_type_resp_event_push_noinline>:
10063ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063ce6:	4605      	mov	r5, r0
10063ce8:	06c0      	lsls	r0, r0, #27
10063cea:	d421      	bmi.n	10063d30 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4c>
10063cec:	460e      	mov	r6, r1
10063cee:	4813      	ldr	r0, [pc, #76]	@ (10063d3c <__arm_cp.34_0>)
10063cf0:	6800      	ldr	r0, [r0, #0]
10063cf2:	2151      	movs	r1, #81	@ 0x51
10063cf4:	5c40      	ldrb	r0, [r0, r1]
10063cf6:	2400      	movs	r4, #0
10063cf8:	0780      	lsls	r0, r0, #30
10063cfa:	d51a      	bpl.n	10063d32 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063cfc:	4617      	mov	r7, r2
10063cfe:	9300      	str	r3, [sp, #0]
10063d00:	480f      	ldr	r0, [pc, #60]	@ (10063d40 <__arm_cp.34_1>)
10063d02:	6800      	ldr	r0, [r0, #0]
10063d04:	0769      	lsls	r1, r5, #29
10063d06:	0ec9      	lsrs	r1, r1, #27
10063d08:	1840      	adds	r0, r0, r1
10063d0a:	6900      	ldr	r0, [r0, #16]
10063d0c:	220d      	movs	r2, #13
10063d0e:	2303      	movs	r3, #3
10063d10:	4629      	mov	r1, r5
10063d12:	f7f1 fa6f 	bl	100551f4 <aci_event_fifo_push_header>
10063d16:	2800      	cmp	r0, #0
10063d18:	d00d      	beq.n	10063d36 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x52>
10063d1a:	4601      	mov	r1, r0
10063d1c:	9800      	ldr	r0, [sp, #0]
10063d1e:	60c8      	str	r0, [r1, #12]
10063d20:	814f      	strh	r7, [r1, #10]
10063d22:	810e      	strh	r6, [r1, #8]
10063d24:	4807      	ldr	r0, [pc, #28]	@ (10063d44 <__arm_cp.34_2>)
10063d26:	6048      	str	r0, [r1, #4]
10063d28:	4628      	mov	r0, r5
10063d2a:	f7f1 fb00 	bl	1005532e <aci_event_fifo_push>
10063d2e:	e000      	b.n	10063d32 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063d30:	2486      	movs	r4, #134	@ 0x86
10063d32:	4620      	mov	r0, r4
10063d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063d36:	2407      	movs	r4, #7
10063d38:	e7fb      	b.n	10063d32 <aci_att_clt_read_by_group_type_resp_event_push_noinline+0x4e>
10063d3a:	46c0      	nop			@ (mov r8, r8)

10063d3c <__arm_cp.34_0>:
10063d3c:	20002ad0 	.word	0x20002ad0

10063d40 <__arm_cp.34_1>:
10063d40:	20002a80 	.word	0x20002a80

10063d44 <__arm_cp.34_2>:
10063d44:	100633a9 	.word	0x100633a9

10063d48 <aci_att_clt_prepare_write_resp_event_push_noinline>:
10063d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063d4a:	4605      	mov	r5, r0
10063d4c:	06c0      	lsls	r0, r0, #27
10063d4e:	d421      	bmi.n	10063d94 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4c>
10063d50:	460e      	mov	r6, r1
10063d52:	4813      	ldr	r0, [pc, #76]	@ (10063da0 <__arm_cp.35_0>)
10063d54:	6800      	ldr	r0, [r0, #0]
10063d56:	2151      	movs	r1, #81	@ 0x51
10063d58:	5c40      	ldrb	r0, [r0, r1]
10063d5a:	2400      	movs	r4, #0
10063d5c:	0700      	lsls	r0, r0, #28
10063d5e:	d51a      	bpl.n	10063d96 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10063d60:	4617      	mov	r7, r2
10063d62:	9300      	str	r3, [sp, #0]
10063d64:	480f      	ldr	r0, [pc, #60]	@ (10063da4 <__arm_cp.35_1>)
10063d66:	6800      	ldr	r0, [r0, #0]
10063d68:	0769      	lsls	r1, r5, #29
10063d6a:	0ec9      	lsrs	r1, r1, #27
10063d6c:	1840      	adds	r0, r0, r1
10063d6e:	6900      	ldr	r0, [r0, #16]
10063d70:	220e      	movs	r2, #14
10063d72:	2303      	movs	r3, #3
10063d74:	4629      	mov	r1, r5
10063d76:	f7f1 fa3d 	bl	100551f4 <aci_event_fifo_push_header>
10063d7a:	2800      	cmp	r0, #0
10063d7c:	d00d      	beq.n	10063d9a <aci_att_clt_prepare_write_resp_event_push_noinline+0x52>
10063d7e:	4601      	mov	r1, r0
10063d80:	9800      	ldr	r0, [sp, #0]
10063d82:	60c8      	str	r0, [r1, #12]
10063d84:	814f      	strh	r7, [r1, #10]
10063d86:	810e      	strh	r6, [r1, #8]
10063d88:	4807      	ldr	r0, [pc, #28]	@ (10063da8 <__arm_cp.35_2>)
10063d8a:	6048      	str	r0, [r1, #4]
10063d8c:	4628      	mov	r0, r5
10063d8e:	f7f1 face 	bl	1005532e <aci_event_fifo_push>
10063d92:	e000      	b.n	10063d96 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10063d94:	2486      	movs	r4, #134	@ 0x86
10063d96:	4620      	mov	r0, r4
10063d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063d9a:	2407      	movs	r4, #7
10063d9c:	e7fb      	b.n	10063d96 <aci_att_clt_prepare_write_resp_event_push_noinline+0x4e>
10063d9e:	46c0      	nop			@ (mov r8, r8)

10063da0 <__arm_cp.35_0>:
10063da0:	20002ad0 	.word	0x20002ad0

10063da4 <__arm_cp.35_1>:
10063da4:	20002a80 	.word	0x20002a80

10063da8 <__arm_cp.35_2>:
10063da8:	100633fd 	.word	0x100633fd

10063dac <aci_att_clt_exec_write_resp_event_push_noinline>:
10063dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063dae:	4604      	mov	r4, r0
10063db0:	06c0      	lsls	r0, r0, #27
10063db2:	d408      	bmi.n	10063dc6 <aci_att_clt_exec_write_resp_event_push_noinline+0x1a>
10063db4:	460d      	mov	r5, r1
10063db6:	4819      	ldr	r0, [pc, #100]	@ (10063e1c <__arm_cp.36_0>)
10063db8:	6800      	ldr	r0, [r0, #0]
10063dba:	2151      	movs	r1, #81	@ 0x51
10063dbc:	5c40      	ldrb	r0, [r0, r1]
10063dbe:	06c0      	lsls	r0, r0, #27
10063dc0:	d403      	bmi.n	10063dca <aci_att_clt_exec_write_resp_event_push_noinline+0x1e>
10063dc2:	2700      	movs	r7, #0
10063dc4:	e027      	b.n	10063e16 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063dc6:	2786      	movs	r7, #134	@ 0x86
10063dc8:	e025      	b.n	10063e16 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063dca:	4616      	mov	r6, r2
10063dcc:	4814      	ldr	r0, [pc, #80]	@ (10063e20 <__arm_cp.36_1>)
10063dce:	6800      	ldr	r0, [r0, #0]
10063dd0:	0761      	lsls	r1, r4, #29
10063dd2:	0ec9      	lsrs	r1, r1, #27
10063dd4:	1840      	adds	r0, r0, r1
10063dd6:	6900      	ldr	r0, [r0, #16]
10063dd8:	2259      	movs	r2, #89	@ 0x59
10063dda:	2303      	movs	r3, #3
10063ddc:	4621      	mov	r1, r4
10063dde:	f7f1 fa09 	bl	100551f4 <aci_event_fifo_push_header>
10063de2:	2800      	cmp	r0, #0
10063de4:	d016      	beq.n	10063e14 <aci_att_clt_exec_write_resp_event_push_noinline+0x68>
10063de6:	4601      	mov	r1, r0
10063de8:	7306      	strb	r6, [r0, #12]
10063dea:	7285      	strb	r5, [r0, #10]
10063dec:	200c      	movs	r0, #12
10063dee:	7248      	strb	r0, [r1, #9]
10063df0:	200d      	movs	r0, #13
10063df2:	7208      	strb	r0, [r1, #8]
10063df4:	2700      	movs	r7, #0
10063df6:	71cf      	strb	r7, [r1, #7]
10063df8:	2006      	movs	r0, #6
10063dfa:	7188      	strb	r0, [r1, #6]
10063dfc:	20ff      	movs	r0, #255	@ 0xff
10063dfe:	7148      	strb	r0, [r1, #5]
10063e00:	2082      	movs	r0, #130	@ 0x82
10063e02:	7108      	strb	r0, [r1, #4]
10063e04:	0a30      	lsrs	r0, r6, #8
10063e06:	7348      	strb	r0, [r1, #13]
10063e08:	0a28      	lsrs	r0, r5, #8
10063e0a:	72c8      	strb	r0, [r1, #11]
10063e0c:	4620      	mov	r0, r4
10063e0e:	f7f1 fa8e 	bl	1005532e <aci_event_fifo_push>
10063e12:	e000      	b.n	10063e16 <aci_att_clt_exec_write_resp_event_push_noinline+0x6a>
10063e14:	2707      	movs	r7, #7
10063e16:	4638      	mov	r0, r7
10063e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063e1a:	46c0      	nop			@ (mov r8, r8)

10063e1c <__arm_cp.36_0>:
10063e1c:	20002ad0 	.word	0x20002ad0

10063e20 <__arm_cp.36_1>:
10063e20:	20002a80 	.word	0x20002a80

10063e24 <aci_att_srv_prepare_write_req_event_push_noinline>:
10063e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063e26:	4604      	mov	r4, r0
10063e28:	06c0      	lsls	r0, r0, #27
10063e2a:	d420      	bmi.n	10063e6e <aci_att_srv_prepare_write_req_event_push_noinline+0x4a>
10063e2c:	461f      	mov	r7, r3
10063e2e:	4616      	mov	r6, r2
10063e30:	460d      	mov	r5, r1
10063e32:	4811      	ldr	r0, [pc, #68]	@ (10063e78 <__arm_cp.37_0>)
10063e34:	6800      	ldr	r0, [r0, #0]
10063e36:	0761      	lsls	r1, r4, #29
10063e38:	0ec9      	lsrs	r1, r1, #27
10063e3a:	1840      	adds	r0, r0, r1
10063e3c:	6900      	ldr	r0, [r0, #16]
10063e3e:	2212      	movs	r2, #18
10063e40:	2305      	movs	r3, #5
10063e42:	4621      	mov	r1, r4
10063e44:	f7f1 f9d6 	bl	100551f4 <aci_event_fifo_push_header>
10063e48:	2800      	cmp	r0, #0
10063e4a:	d012      	beq.n	10063e72 <aci_att_srv_prepare_write_req_event_push_noinline+0x4e>
10063e4c:	4601      	mov	r1, r0
10063e4e:	9808      	ldr	r0, [sp, #32]
10063e50:	9a07      	ldr	r2, [sp, #28]
10063e52:	9b06      	ldr	r3, [sp, #24]
10063e54:	6148      	str	r0, [r1, #20]
10063e56:	820a      	strh	r2, [r1, #16]
10063e58:	81cb      	strh	r3, [r1, #14]
10063e5a:	818f      	strh	r7, [r1, #12]
10063e5c:	814e      	strh	r6, [r1, #10]
10063e5e:	810d      	strh	r5, [r1, #8]
10063e60:	4806      	ldr	r0, [pc, #24]	@ (10063e7c <__arm_cp.37_1>)
10063e62:	6048      	str	r0, [r1, #4]
10063e64:	4620      	mov	r0, r4
10063e66:	f7f1 fa62 	bl	1005532e <aci_event_fifo_push>
10063e6a:	2000      	movs	r0, #0
10063e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063e6e:	2086      	movs	r0, #134	@ 0x86
10063e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063e72:	2007      	movs	r0, #7
10063e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063e76:	46c0      	nop			@ (mov r8, r8)

10063e78 <__arm_cp.37_0>:
10063e78:	20002a80 	.word	0x20002a80

10063e7c <__arm_cp.37_1>:
10063e7c:	10063449 	.word	0x10063449

10063e80 <aci_att_srv_exec_write_req_event_push_noinline>:
10063e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063e82:	4604      	mov	r4, r0
10063e84:	06c0      	lsls	r0, r0, #27
10063e86:	d428      	bmi.n	10063eda <aci_att_srv_exec_write_req_event_push_noinline+0x5a>
10063e88:	461f      	mov	r7, r3
10063e8a:	4616      	mov	r6, r2
10063e8c:	460d      	mov	r5, r1
10063e8e:	4815      	ldr	r0, [pc, #84]	@ (10063ee4 <__arm_cp.38_0>)
10063e90:	6800      	ldr	r0, [r0, #0]
10063e92:	0761      	lsls	r1, r4, #29
10063e94:	0ec9      	lsrs	r1, r1, #27
10063e96:	1840      	adds	r0, r0, r1
10063e98:	6900      	ldr	r0, [r0, #16]
10063e9a:	2260      	movs	r2, #96	@ 0x60
10063e9c:	2303      	movs	r3, #3
10063e9e:	4621      	mov	r1, r4
10063ea0:	f7f1 f9a8 	bl	100551f4 <aci_event_fifo_push_header>
10063ea4:	2800      	cmp	r0, #0
10063ea6:	d01a      	beq.n	10063ede <aci_att_srv_exec_write_req_event_push_noinline+0x5e>
10063ea8:	4601      	mov	r1, r0
10063eaa:	7306      	strb	r6, [r0, #12]
10063eac:	7285      	strb	r5, [r0, #10]
10063eae:	200c      	movs	r0, #12
10063eb0:	7248      	strb	r0, [r1, #9]
10063eb2:	201c      	movs	r0, #28
10063eb4:	7208      	strb	r0, [r1, #8]
10063eb6:	463a      	mov	r2, r7
10063eb8:	2700      	movs	r7, #0
10063eba:	71cf      	strb	r7, [r1, #7]
10063ebc:	2007      	movs	r0, #7
10063ebe:	7188      	strb	r0, [r1, #6]
10063ec0:	738a      	strb	r2, [r1, #14]
10063ec2:	20ff      	movs	r0, #255	@ 0xff
10063ec4:	7148      	strb	r0, [r1, #5]
10063ec6:	2082      	movs	r0, #130	@ 0x82
10063ec8:	7108      	strb	r0, [r1, #4]
10063eca:	0a30      	lsrs	r0, r6, #8
10063ecc:	7348      	strb	r0, [r1, #13]
10063ece:	0a28      	lsrs	r0, r5, #8
10063ed0:	72c8      	strb	r0, [r1, #11]
10063ed2:	4620      	mov	r0, r4
10063ed4:	f7f1 fa2b 	bl	1005532e <aci_event_fifo_push>
10063ed8:	e002      	b.n	10063ee0 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10063eda:	2786      	movs	r7, #134	@ 0x86
10063edc:	e000      	b.n	10063ee0 <aci_att_srv_exec_write_req_event_push_noinline+0x60>
10063ede:	2707      	movs	r7, #7
10063ee0:	4638      	mov	r0, r7
10063ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10063ee4 <__arm_cp.38_0>:
10063ee4:	20002a80 	.word	0x20002a80

10063ee8 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>:
10063ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10063eea:	4605      	mov	r5, r0
10063eec:	06c0      	lsls	r0, r0, #27
10063eee:	d421      	bmi.n	10063f34 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4c>
10063ef0:	460e      	mov	r6, r1
10063ef2:	4813      	ldr	r0, [pc, #76]	@ (10063f40 <__arm_cp.39_0>)
10063ef4:	6800      	ldr	r0, [r0, #0]
10063ef6:	2152      	movs	r1, #82	@ 0x52
10063ef8:	5c40      	ldrb	r0, [r0, r1]
10063efa:	2400      	movs	r4, #0
10063efc:	0740      	lsls	r0, r0, #29
10063efe:	d51a      	bpl.n	10063f36 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063f00:	4617      	mov	r7, r2
10063f02:	9300      	str	r3, [sp, #0]
10063f04:	480f      	ldr	r0, [pc, #60]	@ (10063f44 <__arm_cp.39_1>)
10063f06:	6800      	ldr	r0, [r0, #0]
10063f08:	0769      	lsls	r1, r5, #29
10063f0a:	0ec9      	lsrs	r1, r1, #27
10063f0c:	1840      	adds	r0, r0, r1
10063f0e:	6900      	ldr	r0, [r0, #16]
10063f10:	2213      	movs	r2, #19
10063f12:	2303      	movs	r3, #3
10063f14:	4629      	mov	r1, r5
10063f16:	f7f1 f96d 	bl	100551f4 <aci_event_fifo_push_header>
10063f1a:	2800      	cmp	r0, #0
10063f1c:	d00d      	beq.n	10063f3a <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x52>
10063f1e:	4601      	mov	r1, r0
10063f20:	9800      	ldr	r0, [sp, #0]
10063f22:	60c8      	str	r0, [r1, #12]
10063f24:	814f      	strh	r7, [r1, #10]
10063f26:	810e      	strh	r6, [r1, #8]
10063f28:	4807      	ldr	r0, [pc, #28]	@ (10063f48 <__arm_cp.39_2>)
10063f2a:	6048      	str	r0, [r1, #4]
10063f2c:	4628      	mov	r0, r5
10063f2e:	f7f1 f9fe 	bl	1005532e <aci_event_fifo_push>
10063f32:	e000      	b.n	10063f36 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063f34:	2486      	movs	r4, #134	@ 0x86
10063f36:	4620      	mov	r0, r4
10063f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10063f3a:	2407      	movs	r4, #7
10063f3c:	e7fb      	b.n	10063f36 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline+0x4e>
10063f3e:	46c0      	nop			@ (mov r8, r8)

10063f40 <__arm_cp.39_0>:
10063f40:	20002ad0 	.word	0x20002ad0

10063f44 <__arm_cp.39_1>:
10063f44:	20002a80 	.word	0x20002a80

10063f48 <__arm_cp.39_2>:
10063f48:	100634a5 	.word	0x100634a5

10063f4c <hci_number_of_completed_packets_event_cb>:
10063f4c:	b51c      	push	{r2, r3, r4, lr}
10063f4e:	8889      	ldrh	r1, [r1, #4]
10063f50:	466c      	mov	r4, sp
10063f52:	1ce0      	adds	r0, r4, #3
10063f54:	f7f1 fc80 	bl	10055858 <hci_number_of_completed_packets_event_copy>
10063f58:	2005      	movs	r0, #5
10063f5a:	70a0      	strb	r0, [r4, #2]
10063f5c:	2013      	movs	r0, #19
10063f5e:	7060      	strb	r0, [r4, #1]
10063f60:	2004      	movs	r0, #4
10063f62:	7020      	strb	r0, [r4, #0]
10063f64:	2108      	movs	r1, #8
10063f66:	4620      	mov	r0, r4
10063f68:	f7ea fdc6 	bl	1004eaf8 <BLE_STACK_Event>
10063f6c:	bd1c      	pop	{r2, r3, r4, pc}
	...

10063f70 <hci_number_of_completed_packets_event_push_noinline>:
10063f70:	b5b0      	push	{r4, r5, r7, lr}
10063f72:	4604      	mov	r4, r0
10063f74:	06c0      	lsls	r0, r0, #27
10063f76:	d416      	bmi.n	10063fa6 <hci_number_of_completed_packets_event_push_noinline+0x36>
10063f78:	460d      	mov	r5, r1
10063f7a:	480d      	ldr	r0, [pc, #52]	@ (10063fb0 <__arm_cp.22_0>)
10063f7c:	6800      	ldr	r0, [r0, #0]
10063f7e:	0761      	lsls	r1, r4, #29
10063f80:	0ec9      	lsrs	r1, r1, #27
10063f82:	1840      	adds	r0, r0, r1
10063f84:	6900      	ldr	r0, [r0, #16]
10063f86:	2202      	movs	r2, #2
10063f88:	4621      	mov	r1, r4
10063f8a:	4613      	mov	r3, r2
10063f8c:	f7f1 f932 	bl	100551f4 <aci_event_fifo_push_header>
10063f90:	2800      	cmp	r0, #0
10063f92:	d00a      	beq.n	10063faa <hci_number_of_completed_packets_event_push_noinline+0x3a>
10063f94:	4601      	mov	r1, r0
10063f96:	4807      	ldr	r0, [pc, #28]	@ (10063fb4 <__arm_cp.22_1>)
10063f98:	6048      	str	r0, [r1, #4]
10063f9a:	810d      	strh	r5, [r1, #8]
10063f9c:	4620      	mov	r0, r4
10063f9e:	f7f1 f9c6 	bl	1005532e <aci_event_fifo_push>
10063fa2:	2000      	movs	r0, #0
10063fa4:	bdb0      	pop	{r4, r5, r7, pc}
10063fa6:	2086      	movs	r0, #134	@ 0x86
10063fa8:	bdb0      	pop	{r4, r5, r7, pc}
10063faa:	2007      	movs	r0, #7
10063fac:	bdb0      	pop	{r4, r5, r7, pc}
10063fae:	46c0      	nop			@ (mov r8, r8)

10063fb0 <__arm_cp.22_0>:
10063fb0:	20002a80 	.word	0x20002a80

10063fb4 <__arm_cp.22_1>:
10063fb4:	10063f4d 	.word	0x10063f4d

10063fb8 <hci_le_read_remote_features_complete_event_push_noinline>:
10063fb8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10063fba:	4605      	mov	r5, r0
10063fbc:	06c0      	lsls	r0, r0, #27
10063fbe:	d433      	bmi.n	10064028 <hci_le_read_remote_features_complete_event_push_noinline+0x70>
10063fc0:	4617      	mov	r7, r2
10063fc2:	481c      	ldr	r0, [pc, #112]	@ (10064034 <__arm_cp.26_0>)
10063fc4:	6800      	ldr	r0, [r0, #0]
10063fc6:	223d      	movs	r2, #61	@ 0x3d
10063fc8:	5c82      	ldrb	r2, [r0, r2]
10063fca:	2400      	movs	r4, #0
10063fcc:	0692      	lsls	r2, r2, #26
10063fce:	d52c      	bpl.n	1006402a <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063fd0:	303d      	adds	r0, #61	@ 0x3d
10063fd2:	7a40      	ldrb	r0, [r0, #9]
10063fd4:	0700      	lsls	r0, r0, #28
10063fd6:	d528      	bpl.n	1006402a <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10063fd8:	9101      	str	r1, [sp, #4]
10063fda:	9302      	str	r3, [sp, #8]
10063fdc:	4816      	ldr	r0, [pc, #88]	@ (10064038 <__arm_cp.26_1>)
10063fde:	6800      	ldr	r0, [r0, #0]
10063fe0:	0769      	lsls	r1, r5, #29
10063fe2:	0ec9      	lsrs	r1, r1, #27
10063fe4:	1840      	adds	r0, r0, r1
10063fe6:	6900      	ldr	r0, [r0, #16]
10063fe8:	2225      	movs	r2, #37	@ 0x25
10063fea:	2304      	movs	r3, #4
10063fec:	4629      	mov	r1, r5
10063fee:	9300      	str	r3, [sp, #0]
10063ff0:	f7f1 f900 	bl	100551f4 <aci_event_fifo_push_header>
10063ff4:	2800      	cmp	r0, #0
10063ff6:	d01a      	beq.n	1006402e <hci_le_read_remote_features_complete_event_push_noinline+0x76>
10063ff8:	4606      	mov	r6, r0
10063ffa:	7247      	strb	r7, [r0, #9]
10063ffc:	9801      	ldr	r0, [sp, #4]
10063ffe:	7230      	strb	r0, [r6, #8]
10064000:	0a38      	lsrs	r0, r7, #8
10064002:	72b0      	strb	r0, [r6, #10]
10064004:	4630      	mov	r0, r6
10064006:	300b      	adds	r0, #11
10064008:	2208      	movs	r2, #8
1006400a:	9902      	ldr	r1, [sp, #8]
1006400c:	f7ee fba6 	bl	1005275c <BLEPLAT_MemCpy>
10064010:	9900      	ldr	r1, [sp, #0]
10064012:	71f1      	strb	r1, [r6, #7]
10064014:	200c      	movs	r0, #12
10064016:	71b0      	strb	r0, [r6, #6]
10064018:	203e      	movs	r0, #62	@ 0x3e
1006401a:	7170      	strb	r0, [r6, #5]
1006401c:	7131      	strb	r1, [r6, #4]
1006401e:	4628      	mov	r0, r5
10064020:	4631      	mov	r1, r6
10064022:	f7f1 f984 	bl	1005532e <aci_event_fifo_push>
10064026:	e000      	b.n	1006402a <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10064028:	2486      	movs	r4, #134	@ 0x86
1006402a:	4620      	mov	r0, r4
1006402c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006402e:	2407      	movs	r4, #7
10064030:	e7fb      	b.n	1006402a <hci_le_read_remote_features_complete_event_push_noinline+0x72>
10064032:	46c0      	nop			@ (mov r8, r8)

10064034 <__arm_cp.26_0>:
10064034:	20002ad0 	.word	0x20002ad0

10064038 <__arm_cp.26_1>:
10064038:	20002a80 	.word	0x20002a80

1006403c <aci_l2cap_proc_timeout_event_cb>:
1006403c:	b510      	push	{r4, lr}
1006403e:	b0ff      	sub	sp, #508	@ 0x1fc
10064040:	b083      	sub	sp, #12
10064042:	8889      	ldrh	r1, [r1, #4]
10064044:	466c      	mov	r4, sp
10064046:	1da0      	adds	r0, r4, #6
10064048:	f7f1 fe52 	bl	10055cf0 <aci_l2cap_proc_timeout_event_copy>
1006404c:	7a21      	ldrb	r1, [r4, #8]
1006404e:	1d48      	adds	r0, r1, #5
10064050:	70a0      	strb	r0, [r4, #2]
10064052:	0a00      	lsrs	r0, r0, #8
10064054:	70e0      	strb	r0, [r4, #3]
10064056:	2001      	movs	r0, #1
10064058:	7120      	strb	r0, [r4, #4]
1006405a:	20ff      	movs	r0, #255	@ 0xff
1006405c:	7060      	strb	r0, [r4, #1]
1006405e:	2082      	movs	r0, #130	@ 0x82
10064060:	7020      	strb	r0, [r4, #0]
10064062:	2008      	movs	r0, #8
10064064:	7160      	strb	r0, [r4, #5]
10064066:	3109      	adds	r1, #9
10064068:	4620      	mov	r0, r4
1006406a:	f7ea fd45 	bl	1004eaf8 <BLE_STACK_Event>
1006406e:	b07f      	add	sp, #508	@ 0x1fc
10064070:	b003      	add	sp, #12
10064072:	bd10      	pop	{r4, pc}

10064074 <aci_hal_fw_error_event_push_noinline>:
10064074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064076:	4604      	mov	r4, r0
10064078:	06c0      	lsls	r0, r0, #27
1006407a:	d42d      	bmi.n	100640d8 <aci_hal_fw_error_event_push_noinline+0x64>
1006407c:	4615      	mov	r5, r2
1006407e:	460f      	mov	r7, r1
10064080:	9300      	str	r3, [sp, #0]
10064082:	4818      	ldr	r0, [pc, #96]	@ (100640e4 <__arm_cp.0_0>)
10064084:	6800      	ldr	r0, [r0, #0]
10064086:	0761      	lsls	r1, r4, #29
10064088:	0ec9      	lsrs	r1, r1, #27
1006408a:	1840      	adds	r0, r0, r1
1006408c:	6900      	ldr	r0, [r0, #16]
1006408e:	1e51      	subs	r1, r2, #1
10064090:	2203      	movs	r2, #3
10064092:	430a      	orrs	r2, r1
10064094:	3209      	adds	r2, #9
10064096:	0891      	lsrs	r1, r2, #2
10064098:	b28b      	uxth	r3, r1
1006409a:	2240      	movs	r2, #64	@ 0x40
1006409c:	4621      	mov	r1, r4
1006409e:	f7f1 f8a9 	bl	100551f4 <aci_event_fifo_push_header>
100640a2:	2800      	cmp	r0, #0
100640a4:	d01a      	beq.n	100640dc <aci_hal_fw_error_event_push_noinline+0x68>
100640a6:	4606      	mov	r6, r0
100640a8:	72c5      	strb	r5, [r0, #11]
100640aa:	7287      	strb	r7, [r0, #10]
100640ac:	300c      	adds	r0, #12
100640ae:	9900      	ldr	r1, [sp, #0]
100640b0:	462a      	mov	r2, r5
100640b2:	f7ee fb53 	bl	1005275c <BLEPLAT_MemCpy>
100640b6:	2700      	movs	r7, #0
100640b8:	7277      	strb	r7, [r6, #9]
100640ba:	2006      	movs	r0, #6
100640bc:	7230      	strb	r0, [r6, #8]
100640be:	1d28      	adds	r0, r5, #4
100640c0:	0a01      	lsrs	r1, r0, #8
100640c2:	71f1      	strb	r1, [r6, #7]
100640c4:	71b0      	strb	r0, [r6, #6]
100640c6:	20ff      	movs	r0, #255	@ 0xff
100640c8:	7170      	strb	r0, [r6, #5]
100640ca:	2082      	movs	r0, #130	@ 0x82
100640cc:	7130      	strb	r0, [r6, #4]
100640ce:	4620      	mov	r0, r4
100640d0:	4631      	mov	r1, r6
100640d2:	f7f1 f92c 	bl	1005532e <aci_event_fifo_push>
100640d6:	e002      	b.n	100640de <aci_hal_fw_error_event_push_noinline+0x6a>
100640d8:	2786      	movs	r7, #134	@ 0x86
100640da:	e000      	b.n	100640de <aci_hal_fw_error_event_push_noinline+0x6a>
100640dc:	2707      	movs	r7, #7
100640de:	4638      	mov	r0, r7
100640e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100640e2:	46c0      	nop			@ (mov r8, r8)

100640e4 <__arm_cp.0_0>:
100640e4:	20002a80 	.word	0x20002a80

100640e8 <aci_hal_adv_scan_resp_data_update_event_push_noinline>:
100640e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100640ea:	4604      	mov	r4, r0
100640ec:	06c0      	lsls	r0, r0, #27
100640ee:	d42d      	bmi.n	1006414c <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x64>
100640f0:	4616      	mov	r6, r2
100640f2:	460d      	mov	r5, r1
100640f4:	4818      	ldr	r0, [pc, #96]	@ (10064158 <__arm_cp.1_0>)
100640f6:	6800      	ldr	r0, [r0, #0]
100640f8:	0761      	lsls	r1, r4, #29
100640fa:	0ec9      	lsrs	r1, r1, #27
100640fc:	1840      	adds	r0, r0, r1
100640fe:	6900      	ldr	r0, [r0, #16]
10064100:	2241      	movs	r2, #65	@ 0x41
10064102:	2304      	movs	r3, #4
10064104:	4621      	mov	r1, r4
10064106:	f7f1 f875 	bl	100551f4 <aci_event_fifo_push_header>
1006410a:	2800      	cmp	r0, #0
1006410c:	d020      	beq.n	10064150 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x68>
1006410e:	4601      	mov	r1, r0
10064110:	300a      	adds	r0, #10
10064112:	7106      	strb	r6, [r0, #4]
10064114:	7005      	strb	r5, [r0, #0]
10064116:	2700      	movs	r7, #0
10064118:	724f      	strb	r7, [r1, #9]
1006411a:	2210      	movs	r2, #16
1006411c:	720a      	strb	r2, [r1, #8]
1006411e:	71cf      	strb	r7, [r1, #7]
10064120:	220a      	movs	r2, #10
10064122:	718a      	strb	r2, [r1, #6]
10064124:	22ff      	movs	r2, #255	@ 0xff
10064126:	714a      	strb	r2, [r1, #5]
10064128:	2282      	movs	r2, #130	@ 0x82
1006412a:	710a      	strb	r2, [r1, #4]
1006412c:	0e32      	lsrs	r2, r6, #24
1006412e:	71c2      	strb	r2, [r0, #7]
10064130:	0c32      	lsrs	r2, r6, #16
10064132:	7182      	strb	r2, [r0, #6]
10064134:	0a32      	lsrs	r2, r6, #8
10064136:	7142      	strb	r2, [r0, #5]
10064138:	0e2a      	lsrs	r2, r5, #24
1006413a:	70c2      	strb	r2, [r0, #3]
1006413c:	0c2a      	lsrs	r2, r5, #16
1006413e:	7082      	strb	r2, [r0, #2]
10064140:	0a2a      	lsrs	r2, r5, #8
10064142:	7042      	strb	r2, [r0, #1]
10064144:	4620      	mov	r0, r4
10064146:	f7f1 f8f2 	bl	1005532e <aci_event_fifo_push>
1006414a:	e002      	b.n	10064152 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
1006414c:	2786      	movs	r7, #134	@ 0x86
1006414e:	e000      	b.n	10064152 <aci_hal_adv_scan_resp_data_update_event_push_noinline+0x6a>
10064150:	2707      	movs	r7, #7
10064152:	4638      	mov	r0, r7
10064154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064156:	46c0      	nop			@ (mov r8, r8)

10064158 <__arm_cp.1_0>:
10064158:	20002a80 	.word	0x20002a80

1006415c <aci_gap_pairing_complete_event_push_noinline>:
1006415c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006415e:	4604      	mov	r4, r0
10064160:	06c0      	lsls	r0, r0, #27
10064162:	d408      	bmi.n	10064176 <aci_gap_pairing_complete_event_push_noinline+0x1a>
10064164:	460d      	mov	r5, r1
10064166:	4819      	ldr	r0, [pc, #100]	@ (100641cc <__arm_cp.1_0>)
10064168:	6800      	ldr	r0, [r0, #0]
1006416a:	214e      	movs	r1, #78	@ 0x4e
1006416c:	5c40      	ldrb	r0, [r0, r1]
1006416e:	0780      	lsls	r0, r0, #30
10064170:	d403      	bmi.n	1006417a <aci_gap_pairing_complete_event_push_noinline+0x1e>
10064172:	2600      	movs	r6, #0
10064174:	e028      	b.n	100641c8 <aci_gap_pairing_complete_event_push_noinline+0x6c>
10064176:	2686      	movs	r6, #134	@ 0x86
10064178:	e026      	b.n	100641c8 <aci_gap_pairing_complete_event_push_noinline+0x6c>
1006417a:	461f      	mov	r7, r3
1006417c:	4616      	mov	r6, r2
1006417e:	4814      	ldr	r0, [pc, #80]	@ (100641d0 <__arm_cp.1_1>)
10064180:	6800      	ldr	r0, [r0, #0]
10064182:	0761      	lsls	r1, r4, #29
10064184:	0ec9      	lsrs	r1, r1, #27
10064186:	1840      	adds	r0, r0, r1
10064188:	6900      	ldr	r0, [r0, #16]
1006418a:	2245      	movs	r2, #69	@ 0x45
1006418c:	2303      	movs	r3, #3
1006418e:	4621      	mov	r1, r4
10064190:	f7f1 f830 	bl	100551f4 <aci_event_fifo_push_header>
10064194:	2800      	cmp	r0, #0
10064196:	d016      	beq.n	100641c6 <aci_gap_pairing_complete_event_push_noinline+0x6a>
10064198:	4601      	mov	r1, r0
1006419a:	7285      	strb	r5, [r0, #10]
1006419c:	2004      	movs	r0, #4
1006419e:	7248      	strb	r0, [r1, #9]
100641a0:	2001      	movs	r0, #1
100641a2:	7208      	strb	r0, [r1, #8]
100641a4:	4632      	mov	r2, r6
100641a6:	2600      	movs	r6, #0
100641a8:	71ce      	strb	r6, [r1, #7]
100641aa:	2006      	movs	r0, #6
100641ac:	7188      	strb	r0, [r1, #6]
100641ae:	734f      	strb	r7, [r1, #13]
100641b0:	730a      	strb	r2, [r1, #12]
100641b2:	20ff      	movs	r0, #255	@ 0xff
100641b4:	7148      	strb	r0, [r1, #5]
100641b6:	2082      	movs	r0, #130	@ 0x82
100641b8:	7108      	strb	r0, [r1, #4]
100641ba:	0a28      	lsrs	r0, r5, #8
100641bc:	72c8      	strb	r0, [r1, #11]
100641be:	4620      	mov	r0, r4
100641c0:	f7f1 f8b5 	bl	1005532e <aci_event_fifo_push>
100641c4:	e000      	b.n	100641c8 <aci_gap_pairing_complete_event_push_noinline+0x6c>
100641c6:	2607      	movs	r6, #7
100641c8:	4630      	mov	r0, r6
100641ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100641cc <__arm_cp.1_0>:
100641cc:	20002ad0 	.word	0x20002ad0

100641d0 <__arm_cp.1_1>:
100641d0:	20002a80 	.word	0x20002a80

100641d4 <GAT_att_clt_init>:
100641d4:	b580      	push	{r7, lr}
100641d6:	f000 fd35 	bl	10064c44 <GAT_clt_init>
100641da:	bd80      	pop	{r7, pc}

100641dc <GAT_att_clt_rcv>:
100641dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100641de:	4604      	mov	r4, r0
100641e0:	8805      	ldrh	r5, [r0, #0]
100641e2:	f7f5 fb6a 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
100641e6:	4601      	mov	r1, r0
100641e8:	4628      	mov	r0, r5
100641ea:	f7f2 fcd9 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
100641ee:	4605      	mov	r5, r0
100641f0:	4620      	mov	r0, r4
100641f2:	f000 f8d7 	bl	100643a4 <GAT_att_cmn_get_opcode>
100641f6:	281d      	cmp	r0, #29
100641f8:	d003      	beq.n	10064202 <GAT_att_clt_rcv+0x26>
100641fa:	2823      	cmp	r0, #35	@ 0x23
100641fc:	d001      	beq.n	10064202 <GAT_att_clt_rcv+0x26>
100641fe:	281b      	cmp	r0, #27
10064200:	d10e      	bne.n	10064220 <GAT_att_clt_rcv+0x44>
10064202:	8861      	ldrh	r1, [r4, #2]
10064204:	88ea      	ldrh	r2, [r5, #6]
10064206:	4291      	cmp	r1, r2
10064208:	d805      	bhi.n	10064216 <GAT_att_clt_rcv+0x3a>
1006420a:	2903      	cmp	r1, #3
1006420c:	d303      	bcc.n	10064216 <GAT_att_clt_rcv+0x3a>
1006420e:	2823      	cmp	r0, #35	@ 0x23
10064210:	d167      	bne.n	100642e2 <GAT_att_clt_rcv+0x106>
10064212:	2904      	cmp	r1, #4
10064214:	d865      	bhi.n	100642e2 <GAT_att_clt_rcv+0x106>
10064216:	4620      	mov	r0, r4
10064218:	f7f0 fe38 	bl	10054e8c <ACL_pkt_release>
1006421c:	2000      	movs	r0, #0
1006421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064220:	4620      	mov	r0, r4
10064222:	f000 f8bf 	bl	100643a4 <GAT_att_cmn_get_opcode>
10064226:	88a9      	ldrh	r1, [r5, #4]
10064228:	06ca      	lsls	r2, r1, #27
1006422a:	d56e      	bpl.n	1006430a <GAT_att_clt_rcv+0x12e>
1006422c:	2801      	cmp	r0, #1
1006422e:	d002      	beq.n	10064236 <GAT_att_clt_rcv+0x5a>
10064230:	78aa      	ldrb	r2, [r5, #2]
10064232:	4290      	cmp	r0, r2
10064234:	d169      	bne.n	1006430a <GAT_att_clt_rcv+0x12e>
10064236:	2010      	movs	r0, #16
10064238:	4381      	bics	r1, r0
1006423a:	80a9      	strh	r1, [r5, #4]
1006423c:	896a      	ldrh	r2, [r5, #10]
1006423e:	8929      	ldrh	r1, [r5, #8]
10064240:	2603      	movs	r6, #3
10064242:	4630      	mov	r0, r6
10064244:	f7f2 fd1e 	bl	10056c84 <GAT_att_cmn_stop_timer>
10064248:	8861      	ldrh	r1, [r4, #2]
1006424a:	88e8      	ldrh	r0, [r5, #6]
1006424c:	9100      	str	r1, [sp, #0]
1006424e:	4281      	cmp	r1, r0
10064250:	d900      	bls.n	10064254 <GAT_att_clt_rcv+0x78>
10064252:	e09a      	b.n	1006438a <GAT_att_clt_rcv+0x1ae>
10064254:	4620      	mov	r0, r4
10064256:	f000 f8a5 	bl	100643a4 <GAT_att_cmn_get_opcode>
1006425a:	1e42      	subs	r2, r0, #1
1006425c:	2101      	movs	r1, #1
1006425e:	41ca      	rors	r2, r1
10064260:	2300      	movs	r3, #0
10064262:	2a10      	cmp	r2, #16
10064264:	d900      	bls.n	10064268 <GAT_att_clt_rcv+0x8c>
10064266:	e088      	b.n	1006437a <GAT_att_clt_rcv+0x19e>
10064268:	0092      	lsls	r2, r2, #2
1006426a:	461f      	mov	r7, r3
1006426c:	a301      	add	r3, pc, #4	@ (adr r3, 10064274 <GAT_att_clt_rcv+0x98>)
1006426e:	589a      	ldr	r2, [r3, r2]
10064270:	463b      	mov	r3, r7
10064272:	4697      	mov	pc, r2
10064274:	1006432b 	.word	0x1006432b
10064278:	1006432f 	.word	0x1006432f
1006427c:	1006433b 	.word	0x1006433b
10064280:	10064359 	.word	0x10064359
10064284:	100642b9 	.word	0x100642b9
10064288:	10064381 	.word	0x10064381
1006428c:	10064381 	.word	0x10064381
10064290:	10064381 	.word	0x10064381
10064294:	100642b9 	.word	0x100642b9
10064298:	10064327 	.word	0x10064327
1006429c:	1006437b 	.word	0x1006437b
100642a0:	10064333 	.word	0x10064333
100642a4:	10064327 	.word	0x10064327
100642a8:	1006437b 	.word	0x1006437b
100642ac:	1006437b 	.word	0x1006437b
100642b0:	1006437b 	.word	0x1006437b
100642b4:	10064381 	.word	0x10064381
100642b8:	2809      	cmp	r0, #9
100642ba:	d102      	bne.n	100642c2 <GAT_att_clt_rcv+0xe6>
100642bc:	9900      	ldr	r1, [sp, #0]
100642be:	2904      	cmp	r1, #4
100642c0:	d35b      	bcc.n	1006437a <GAT_att_clt_rcv+0x19e>
100642c2:	2811      	cmp	r0, #17
100642c4:	d102      	bne.n	100642cc <GAT_att_clt_rcv+0xf0>
100642c6:	9800      	ldr	r0, [sp, #0]
100642c8:	2806      	cmp	r0, #6
100642ca:	d356      	bcc.n	1006437a <GAT_att_clt_rcv+0x19e>
100642cc:	89a0      	ldrh	r0, [r4, #12]
100642ce:	1c40      	adds	r0, r0, #1
100642d0:	b281      	uxth	r1, r0
100642d2:	4620      	mov	r0, r4
100642d4:	f000 fa47 	bl	10064766 <ACL_pkt_read_8b>
100642d8:	463b      	mov	r3, r7
100642da:	2800      	cmp	r0, #0
100642dc:	d04d      	beq.n	1006437a <GAT_att_clt_rcv+0x19e>
100642de:	4601      	mov	r1, r0
100642e0:	e043      	b.n	1006436a <GAT_att_clt_rcv+0x18e>
100642e2:	281d      	cmp	r0, #29
100642e4:	d10d      	bne.n	10064302 <GAT_att_clt_rcv+0x126>
100642e6:	88a8      	ldrh	r0, [r5, #4]
100642e8:	0680      	lsls	r0, r0, #26
100642ea:	d412      	bmi.n	10064312 <GAT_att_clt_rcv+0x136>
100642ec:	896a      	ldrh	r2, [r5, #10]
100642ee:	8929      	ldrh	r1, [r5, #8]
100642f0:	2002      	movs	r0, #2
100642f2:	f7f2 fd11 	bl	10056d18 <GAT_att_cmn_start_timer>
100642f6:	2800      	cmp	r0, #0
100642f8:	d14c      	bne.n	10064394 <GAT_att_clt_rcv+0x1b8>
100642fa:	88a8      	ldrh	r0, [r5, #4]
100642fc:	2120      	movs	r1, #32
100642fe:	4301      	orrs	r1, r0
10064300:	80a9      	strh	r1, [r5, #4]
10064302:	4620      	mov	r0, r4
10064304:	f000 ffb7 	bl	10065276 <GAT_clt_rcv_srv_initiated>
10064308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006430a:	4620      	mov	r0, r4
1006430c:	f000 fab7 	bl	1006487e <GAT_att_clt_unexpect_rx>
10064310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064312:	3508      	adds	r5, #8
10064314:	2042      	movs	r0, #66	@ 0x42
10064316:	2103      	movs	r1, #3
10064318:	2202      	movs	r2, #2
1006431a:	462b      	mov	r3, r5
1006431c:	f7ff feaa 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
10064320:	2800      	cmp	r0, #0
10064322:	d137      	bne.n	10064394 <GAT_att_clt_rcv+0x1b8>
10064324:	e777      	b.n	10064216 <GAT_att_clt_rcv+0x3a>
10064326:	460b      	mov	r3, r1
10064328:	e027      	b.n	1006437a <GAT_att_clt_rcv+0x19e>
1006432a:	2305      	movs	r3, #5
1006432c:	e025      	b.n	1006437a <GAT_att_clt_rcv+0x19e>
1006432e:	4633      	mov	r3, r6
10064330:	e023      	b.n	1006437a <GAT_att_clt_rcv+0x19e>
10064332:	9b00      	ldr	r3, [sp, #0]
10064334:	2b04      	cmp	r3, #4
10064336:	d91f      	bls.n	10064378 <GAT_att_clt_rcv+0x19c>
10064338:	e01f      	b.n	1006437a <GAT_att_clt_rcv+0x19e>
1006433a:	9800      	ldr	r0, [sp, #0]
1006433c:	2806      	cmp	r0, #6
1006433e:	d31c      	bcc.n	1006437a <GAT_att_clt_rcv+0x19e>
10064340:	89a0      	ldrh	r0, [r4, #12]
10064342:	1c40      	adds	r0, r0, #1
10064344:	b281      	uxth	r1, r0
10064346:	4620      	mov	r0, r4
10064348:	f000 fa0d 	bl	10064766 <ACL_pkt_read_8b>
1006434c:	2801      	cmp	r0, #1
1006434e:	d00b      	beq.n	10064368 <GAT_att_clt_rcv+0x18c>
10064350:	2802      	cmp	r0, #2
10064352:	d11a      	bne.n	1006438a <GAT_att_clt_rcv+0x1ae>
10064354:	2112      	movs	r1, #18
10064356:	e008      	b.n	1006436a <GAT_att_clt_rcv+0x18e>
10064358:	9800      	ldr	r0, [sp, #0]
1006435a:	2802      	cmp	r0, #2
1006435c:	d30d      	bcc.n	1006437a <GAT_att_clt_rcv+0x19e>
1006435e:	9b00      	ldr	r3, [sp, #0]
10064360:	1e58      	subs	r0, r3, #1
10064362:	0780      	lsls	r0, r0, #30
10064364:	d108      	bne.n	10064378 <GAT_att_clt_rcv+0x19c>
10064366:	e008      	b.n	1006437a <GAT_att_clt_rcv+0x19e>
10064368:	2104      	movs	r1, #4
1006436a:	9e00      	ldr	r6, [sp, #0]
1006436c:	1eb0      	subs	r0, r6, #2
1006436e:	f7db ffed 	bl	1004034c <__aeabi_uidivmod>
10064372:	2900      	cmp	r1, #0
10064374:	4633      	mov	r3, r6
10064376:	d000      	beq.n	1006437a <GAT_att_clt_rcv+0x19e>
10064378:	2300      	movs	r3, #0
1006437a:	9800      	ldr	r0, [sp, #0]
1006437c:	4298      	cmp	r0, r3
1006437e:	d104      	bne.n	1006438a <GAT_att_clt_rcv+0x1ae>
10064380:	4807      	ldr	r0, [pc, #28]	@ (100643a0 <__arm_cp.1_0>)
10064382:	6801      	ldr	r1, [r0, #0]
10064384:	4620      	mov	r0, r4
10064386:	4788      	blx	r1
10064388:	e002      	b.n	10064390 <GAT_att_clt_rcv+0x1b4>
1006438a:	4620      	mov	r0, r4
1006438c:	f000 ff5e 	bl	1006524c <GAT_clt_rcv_corrupted>
10064390:	2884      	cmp	r0, #132	@ 0x84
10064392:	d101      	bne.n	10064398 <GAT_att_clt_rcv+0x1bc>
10064394:	2084      	movs	r0, #132	@ 0x84
10064396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064398:	2000      	movs	r0, #0
1006439a:	70a8      	strb	r0, [r5, #2]
1006439c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006439e:	46c0      	nop			@ (mov r8, r8)

100643a0 <__arm_cp.1_0>:
100643a0:	20002e58 	.word	0x20002e58

100643a4 <GAT_att_cmn_get_opcode>:
100643a4:	b580      	push	{r7, lr}
100643a6:	8981      	ldrh	r1, [r0, #12]
100643a8:	f000 f9dd 	bl	10064766 <ACL_pkt_read_8b>
100643ac:	bd80      	pop	{r7, pc}

100643ae <GAT_att_clt_connection>:
100643ae:	b580      	push	{r7, lr}
100643b0:	f000 fc70 	bl	10064c94 <GAT_clt_connection>
100643b4:	bd80      	pop	{r7, pc}

100643b6 <GAT_att_clt_bearer_close>:
100643b6:	b580      	push	{r7, lr}
100643b8:	f000 fc6e 	bl	10064c98 <GAT_clt_bearer_close>
100643bc:	bd80      	pop	{r7, pc}
	...

100643c0 <GAT_att_clt_tx>:
100643c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100643c2:	4605      	mov	r5, r0
100643c4:	8881      	ldrh	r1, [r0, #4]
100643c6:	8840      	ldrh	r0, [r0, #2]
100643c8:	f7f2 fbea 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
100643cc:	2800      	cmp	r0, #0
100643ce:	d008      	beq.n	100643e2 <GAT_att_clt_tx+0x22>
100643d0:	4604      	mov	r4, r0
100643d2:	7829      	ldrb	r1, [r5, #0]
100643d4:	291e      	cmp	r1, #30
100643d6:	d106      	bne.n	100643e6 <GAT_att_clt_tx+0x26>
100643d8:	88a0      	ldrh	r0, [r4, #4]
100643da:	0680      	lsls	r0, r0, #26
100643dc:	d439      	bmi.n	10064452 <GAT_att_clt_tx+0x92>
100643de:	260c      	movs	r6, #12
100643e0:	e193      	b.n	1006470a <GAT_att_clt_tx+0x34a>
100643e2:	2612      	movs	r6, #18
100643e4:	e191      	b.n	1006470a <GAT_att_clt_tx+0x34a>
100643e6:	0648      	lsls	r0, r1, #25
100643e8:	d406      	bmi.n	100643f8 <GAT_att_clt_tx+0x38>
100643ea:	48ca      	ldr	r0, [pc, #808]	@ (10064714 <__arm_cp.5_0>)
100643ec:	4aca      	ldr	r2, [pc, #808]	@ (10064718 <__arm_cp.5_1>)
100643ee:	6002      	str	r2, [r0, #0]
100643f0:	88a0      	ldrh	r0, [r4, #4]
100643f2:	06c0      	lsls	r0, r0, #27
100643f4:	d500      	bpl.n	100643f8 <GAT_att_clt_tx+0x38>
100643f6:	e16d      	b.n	100646d4 <GAT_att_clt_tx+0x314>
100643f8:	88e0      	ldrh	r0, [r4, #6]
100643fa:	1e8a      	subs	r2, r1, #2
100643fc:	2686      	movs	r6, #134	@ 0x86
100643fe:	2a1e      	cmp	r2, #30
10064400:	d900      	bls.n	10064404 <GAT_att_clt_tx+0x44>
10064402:	e091      	b.n	10064528 <GAT_att_clt_tx+0x168>
10064404:	2703      	movs	r7, #3
10064406:	0052      	lsls	r2, r2, #1
10064408:	447a      	add	r2, pc
1006440a:	8892      	ldrh	r2, [r2, #4]
1006440c:	0052      	lsls	r2, r2, #1
1006440e:	4497      	add	pc, r2
10064410:	017c0022 	.word	0x017c0022
10064414:	017c001e 	.word	0x017c001e
10064418:	017c009f 	.word	0x017c009f
1006441c:	017c00a2 	.word	0x017c00a2
10064420:	017c0022 	.word	0x017c0022
10064424:	017c001e 	.word	0x017c001e
10064428:	017c0094 	.word	0x017c0094
1006442c:	017c012d 	.word	0x017c012d
10064430:	017c0090 	.word	0x017c0090
10064434:	017c017c 	.word	0x017c017c
10064438:	017c00a9 	.word	0x017c00a9
1006443c:	017c00ac 	.word	0x017c00ac
10064440:	017c017c 	.word	0x017c017c
10064444:	017c017c 	.word	0x017c017c
10064448:	017c0021 	.word	0x017c0021
1006444c:	0094      	.short	0x0094
1006444e:	2705      	movs	r7, #5
10064450:	e001      	b.n	10064456 <GAT_att_clt_tx+0x96>
10064452:	88e0      	ldrh	r0, [r4, #6]
10064454:	2701      	movs	r7, #1
10064456:	b2b9      	uxth	r1, r7
10064458:	4281      	cmp	r1, r0
1006445a:	d300      	bcc.n	1006445e <GAT_att_clt_tx+0x9e>
1006445c:	4607      	mov	r7, r0
1006445e:	9700      	str	r7, [sp, #0]
10064460:	b2bf      	uxth	r7, r7
10064462:	4620      	mov	r0, r4
10064464:	4639      	mov	r1, r7
10064466:	f7f2 fc99 	bl	10056d9c <GAT_att_cmn_get_pckt>
1006446a:	2800      	cmp	r0, #0
1006446c:	d02f      	beq.n	100644ce <GAT_att_clt_tx+0x10e>
1006446e:	4606      	mov	r6, r0
10064470:	782a      	ldrb	r2, [r5, #0]
10064472:	8981      	ldrh	r1, [r0, #12]
10064474:	f000 f954 	bl	10064720 <ACL_pkt_write_8b>
10064478:	7828      	ldrb	r0, [r5, #0]
1006447a:	1e81      	subs	r1, r0, #2
1006447c:	2916      	cmp	r1, #22
1006447e:	d82d      	bhi.n	100644dc <GAT_att_clt_tx+0x11c>
10064480:	0049      	lsls	r1, r1, #1
10064482:	46c0      	nop			@ (mov r8, r8)
10064484:	4479      	add	r1, pc
10064486:	8889      	ldrh	r1, [r1, #4]
10064488:	0049      	lsls	r1, r1, #1
1006448a:	448f      	add	pc, r1
1006448c:	010d0016 	.word	0x010d0016
10064490:	010d0070 	.word	0x010d0070
10064494:	010d0077 	.word	0x010d0077
10064498:	010d0093 	.word	0x010d0093
1006449c:	010d00a1 	.word	0x010d00a1
100644a0:	010d00aa 	.word	0x010d00aa
100644a4:	010d00ba 	.word	0x010d00ba
100644a8:	010d00c0 	.word	0x010d00c0
100644ac:	010d002f 	.word	0x010d002f
100644b0:	010d010d 	.word	0x010d010d
100644b4:	010d00ce 	.word	0x010d00ce
100644b8:	00e6      	.short	0x00e6
100644ba:	4898      	ldr	r0, [pc, #608]	@ (1006471c <__arm_cp.5_2>)
100644bc:	8a02      	ldrh	r2, [r0, #16]
100644be:	89b0      	ldrh	r0, [r6, #12]
100644c0:	1c40      	adds	r0, r0, #1
100644c2:	b281      	uxth	r1, r0
100644c4:	4630      	mov	r0, r6
100644c6:	f7f0 fd16 	bl	10054ef6 <ACL_pkt_write_16b>
100644ca:	2003      	movs	r0, #3
100644cc:	e0eb      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
100644ce:	2008      	movs	r0, #8
100644d0:	f7fe f9da 	bl	10062888 <tsk_notify_idx>
100644d4:	f7ed fb5b 	bl	10051b8e <BLE_STACK_ProcessRequest>
100644d8:	2688      	movs	r6, #136	@ 0x88
100644da:	e116      	b.n	1006470a <GAT_att_clt_tx+0x34a>
100644dc:	2820      	cmp	r0, #32
100644de:	d100      	bne.n	100644e2 <GAT_att_clt_tx+0x122>
100644e0:	e0ca      	b.n	10064678 <GAT_att_clt_tx+0x2b8>
100644e2:	2852      	cmp	r0, #82	@ 0x52
100644e4:	d002      	beq.n	100644ec <GAT_att_clt_tx+0x12c>
100644e6:	28d2      	cmp	r0, #210	@ 0xd2
100644e8:	d000      	beq.n	100644ec <GAT_att_clt_tx+0x12c>
100644ea:	e0dd      	b.n	100646a8 <GAT_att_clt_tx+0x2e8>
100644ec:	892a      	ldrh	r2, [r5, #8]
100644ee:	89b0      	ldrh	r0, [r6, #12]
100644f0:	1c40      	adds	r0, r0, #1
100644f2:	b281      	uxth	r1, r0
100644f4:	4630      	mov	r0, r6
100644f6:	f7f0 fcfe 	bl	10054ef6 <ACL_pkt_write_16b>
100644fa:	68eb      	ldr	r3, [r5, #12]
100644fc:	896a      	ldrh	r2, [r5, #10]
100644fe:	89b0      	ldrh	r0, [r6, #12]
10064500:	1cc0      	adds	r0, r0, #3
10064502:	b281      	uxth	r1, r0
10064504:	4630      	mov	r0, r6
10064506:	f7f0 fcff 	bl	10054f08 <ACL_pkt_write>
1006450a:	7828      	ldrb	r0, [r5, #0]
1006450c:	2812      	cmp	r0, #18
1006450e:	d100      	bne.n	10064512 <GAT_att_clt_tx+0x152>
10064510:	e0b8      	b.n	10064684 <GAT_att_clt_tx+0x2c4>
10064512:	28d2      	cmp	r0, #210	@ 0xd2
10064514:	d000      	beq.n	10064518 <GAT_att_clt_tx+0x158>
10064516:	e0c7      	b.n	100646a8 <GAT_att_clt_tx+0x2e8>
10064518:	9800      	ldr	r0, [sp, #0]
1006451a:	380c      	subs	r0, #12
1006451c:	8070      	strh	r0, [r6, #2]
1006451e:	8920      	ldrh	r0, [r4, #8]
10064520:	4631      	mov	r1, r6
10064522:	f7fe f86c 	bl	100625fe <smp_sap_sm2_packet_data_signing_compute>
10064526:	e0bf      	b.n	100646a8 <GAT_att_clt_tx+0x2e8>
10064528:	2952      	cmp	r1, #82	@ 0x52
1006452a:	d002      	beq.n	10064532 <GAT_att_clt_tx+0x172>
1006452c:	29d2      	cmp	r1, #210	@ 0xd2
1006452e:	d000      	beq.n	10064532 <GAT_att_clt_tx+0x172>
10064530:	e0eb      	b.n	1006470a <GAT_att_clt_tx+0x34a>
10064532:	29d2      	cmp	r1, #210	@ 0xd2
10064534:	d008      	beq.n	10064548 <GAT_att_clt_tx+0x188>
10064536:	2103      	movs	r1, #3
10064538:	e007      	b.n	1006454a <GAT_att_clt_tx+0x18a>
1006453a:	7a29      	ldrb	r1, [r5, #8]
1006453c:	0049      	lsls	r1, r1, #1
1006453e:	1c4f      	adds	r7, r1, #1
10064540:	4287      	cmp	r7, r0
10064542:	d800      	bhi.n	10064546 <GAT_att_clt_tx+0x186>
10064544:	e787      	b.n	10064456 <GAT_att_clt_tx+0x96>
10064546:	e0e0      	b.n	1006470a <GAT_att_clt_tx+0x34a>
10064548:	210f      	movs	r1, #15
1006454a:	896a      	ldrh	r2, [r5, #10]
1006454c:	1857      	adds	r7, r2, r1
1006454e:	e782      	b.n	10064456 <GAT_att_clt_tx+0x96>
10064550:	89e9      	ldrh	r1, [r5, #14]
10064552:	1dcf      	adds	r7, r1, #7
10064554:	e77f      	b.n	10064456 <GAT_att_clt_tx+0x96>
10064556:	68e9      	ldr	r1, [r5, #12]
10064558:	7c09      	ldrb	r1, [r1, #16]
1006455a:	2980      	cmp	r1, #128	@ 0x80
1006455c:	d000      	beq.n	10064560 <GAT_att_clt_tx+0x1a0>
1006455e:	e089      	b.n	10064674 <GAT_att_clt_tx+0x2b4>
10064560:	2715      	movs	r7, #21
10064562:	e778      	b.n	10064456 <GAT_att_clt_tx+0x96>
10064564:	89a9      	ldrh	r1, [r5, #12]
10064566:	1d4f      	adds	r7, r1, #5
10064568:	e775      	b.n	10064456 <GAT_att_clt_tx+0x96>
1006456a:	2702      	movs	r7, #2
1006456c:	e773      	b.n	10064456 <GAT_att_clt_tx+0x96>
1006456e:	896a      	ldrh	r2, [r5, #10]
10064570:	8929      	ldrh	r1, [r5, #8]
10064572:	4630      	mov	r0, r6
10064574:	f000 f9a2 	bl	100648bc <GAT_att_clt_fill_handle_range>
10064578:	2005      	movs	r0, #5
1006457a:	e094      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
1006457c:	896a      	ldrh	r2, [r5, #10]
1006457e:	8929      	ldrh	r1, [r5, #8]
10064580:	4630      	mov	r0, r6
10064582:	f000 f99b 	bl	100648bc <GAT_att_clt_fill_handle_range>
10064586:	89aa      	ldrh	r2, [r5, #12]
10064588:	89b0      	ldrh	r0, [r6, #12]
1006458a:	1d40      	adds	r0, r0, #5
1006458c:	b281      	uxth	r1, r0
1006458e:	4630      	mov	r0, r6
10064590:	f7f0 fcb1 	bl	10054ef6 <ACL_pkt_write_16b>
10064594:	89e8      	ldrh	r0, [r5, #14]
10064596:	1dc0      	adds	r0, r0, #7
10064598:	42b8      	cmp	r0, r7
1006459a:	d800      	bhi.n	1006459e <GAT_att_clt_tx+0x1de>
1006459c:	4607      	mov	r7, r0
1006459e:	1ff8      	subs	r0, r7, #7
100645a0:	b282      	uxth	r2, r0
100645a2:	692b      	ldr	r3, [r5, #16]
100645a4:	89b0      	ldrh	r0, [r6, #12]
100645a6:	1dc0      	adds	r0, r0, #7
100645a8:	b281      	uxth	r1, r0
100645aa:	4630      	mov	r0, r6
100645ac:	f7f0 fcac 	bl	10054f08 <ACL_pkt_write>
100645b0:	2007      	movs	r0, #7
100645b2:	e078      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
100645b4:	896a      	ldrh	r2, [r5, #10]
100645b6:	8929      	ldrh	r1, [r5, #8]
100645b8:	4630      	mov	r0, r6
100645ba:	f000 f97f 	bl	100648bc <GAT_att_clt_fill_handle_range>
100645be:	89b0      	ldrh	r0, [r6, #12]
100645c0:	1d40      	adds	r0, r0, #5
100645c2:	68eb      	ldr	r3, [r5, #12]
100645c4:	7c19      	ldrb	r1, [r3, #16]
100645c6:	2980      	cmp	r1, #128	@ 0x80
100645c8:	d15e      	bne.n	10064688 <GAT_att_clt_tx+0x2c8>
100645ca:	b281      	uxth	r1, r0
100645cc:	2210      	movs	r2, #16
100645ce:	e05e      	b.n	1006468e <GAT_att_clt_tx+0x2ce>
100645d0:	892a      	ldrh	r2, [r5, #8]
100645d2:	89b0      	ldrh	r0, [r6, #12]
100645d4:	1c40      	adds	r0, r0, #1
100645d6:	b281      	uxth	r1, r0
100645d8:	4630      	mov	r0, r6
100645da:	f7f0 fc8c 	bl	10054ef6 <ACL_pkt_write_16b>
100645de:	200b      	movs	r0, #11
100645e0:	e061      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
100645e2:	892a      	ldrh	r2, [r5, #8]
100645e4:	89b0      	ldrh	r0, [r6, #12]
100645e6:	1c40      	adds	r0, r0, #1
100645e8:	b281      	uxth	r1, r0
100645ea:	4630      	mov	r0, r6
100645ec:	f7f0 fc83 	bl	10054ef6 <ACL_pkt_write_16b>
100645f0:	896a      	ldrh	r2, [r5, #10]
100645f2:	89b0      	ldrh	r0, [r6, #12]
100645f4:	1cc0      	adds	r0, r0, #3
100645f6:	b281      	uxth	r1, r0
100645f8:	4630      	mov	r0, r6
100645fa:	f7f0 fc7c 	bl	10054ef6 <ACL_pkt_write_16b>
100645fe:	200d      	movs	r0, #13
10064600:	e051      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
10064602:	4628      	mov	r0, r5
10064604:	4631      	mov	r1, r6
10064606:	f000 f94d 	bl	100648a4 <GAT_att_clt_fill_read_multi_req>
1006460a:	200f      	movs	r0, #15
1006460c:	e04b      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
1006460e:	896a      	ldrh	r2, [r5, #10]
10064610:	8929      	ldrh	r1, [r5, #8]
10064612:	4630      	mov	r0, r6
10064614:	f000 f952 	bl	100648bc <GAT_att_clt_fill_handle_range>
10064618:	89b0      	ldrh	r0, [r6, #12]
1006461a:	1d40      	adds	r0, r0, #5
1006461c:	68eb      	ldr	r3, [r5, #12]
1006461e:	7c19      	ldrb	r1, [r3, #16]
10064620:	2980      	cmp	r1, #128	@ 0x80
10064622:	d139      	bne.n	10064698 <GAT_att_clt_tx+0x2d8>
10064624:	b281      	uxth	r1, r0
10064626:	2210      	movs	r2, #16
10064628:	e039      	b.n	1006469e <GAT_att_clt_tx+0x2de>
1006462a:	892a      	ldrh	r2, [r5, #8]
1006462c:	89b0      	ldrh	r0, [r6, #12]
1006462e:	1c40      	adds	r0, r0, #1
10064630:	b281      	uxth	r1, r0
10064632:	4630      	mov	r0, r6
10064634:	f7f0 fc5f 	bl	10054ef6 <ACL_pkt_write_16b>
10064638:	896a      	ldrh	r2, [r5, #10]
1006463a:	89b0      	ldrh	r0, [r6, #12]
1006463c:	1cc0      	adds	r0, r0, #3
1006463e:	b281      	uxth	r1, r0
10064640:	4630      	mov	r0, r6
10064642:	f7f0 fc58 	bl	10054ef6 <ACL_pkt_write_16b>
10064646:	692b      	ldr	r3, [r5, #16]
10064648:	89aa      	ldrh	r2, [r5, #12]
1006464a:	89b0      	ldrh	r0, [r6, #12]
1006464c:	1d40      	adds	r0, r0, #5
1006464e:	b281      	uxth	r1, r0
10064650:	4630      	mov	r0, r6
10064652:	f7f0 fc59 	bl	10054f08 <ACL_pkt_write>
10064656:	2017      	movs	r0, #23
10064658:	e025      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
1006465a:	7a2a      	ldrb	r2, [r5, #8]
1006465c:	89b0      	ldrh	r0, [r6, #12]
1006465e:	1c40      	adds	r0, r0, #1
10064660:	b281      	uxth	r1, r0
10064662:	4630      	mov	r0, r6
10064664:	f000 f85c 	bl	10064720 <ACL_pkt_write_8b>
10064668:	2019      	movs	r0, #25
1006466a:	e01c      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
1006466c:	68e9      	ldr	r1, [r5, #12]
1006466e:	7c09      	ldrb	r1, [r1, #16]
10064670:	2980      	cmp	r1, #128	@ 0x80
10064672:	d04c      	beq.n	1006470e <GAT_att_clt_tx+0x34e>
10064674:	2707      	movs	r7, #7
10064676:	e6ee      	b.n	10064456 <GAT_att_clt_tx+0x96>
10064678:	4628      	mov	r0, r5
1006467a:	4631      	mov	r1, r6
1006467c:	f000 f912 	bl	100648a4 <GAT_att_clt_fill_read_multi_req>
10064680:	2021      	movs	r0, #33	@ 0x21
10064682:	e010      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
10064684:	2013      	movs	r0, #19
10064686:	e00e      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
10064688:	b281      	uxth	r1, r0
1006468a:	330c      	adds	r3, #12
1006468c:	2202      	movs	r2, #2
1006468e:	4630      	mov	r0, r6
10064690:	f7f0 fc3a 	bl	10054f08 <ACL_pkt_write>
10064694:	2009      	movs	r0, #9
10064696:	e006      	b.n	100646a6 <GAT_att_clt_tx+0x2e6>
10064698:	b281      	uxth	r1, r0
1006469a:	330c      	adds	r3, #12
1006469c:	2202      	movs	r2, #2
1006469e:	4630      	mov	r0, r6
100646a0:	f7f0 fc32 	bl	10054f08 <ACL_pkt_write>
100646a4:	2011      	movs	r0, #17
100646a6:	70a0      	strb	r0, [r4, #2]
100646a8:	9800      	ldr	r0, [sp, #0]
100646aa:	8070      	strh	r0, [r6, #2]
100646ac:	782a      	ldrb	r2, [r5, #0]
100646ae:	89b1      	ldrh	r1, [r6, #12]
100646b0:	4630      	mov	r0, r6
100646b2:	f000 f835 	bl	10064720 <ACL_pkt_write_8b>
100646b6:	7828      	ldrb	r0, [r5, #0]
100646b8:	0641      	lsls	r1, r0, #25
100646ba:	d411      	bmi.n	100646e0 <GAT_att_clt_tx+0x320>
100646bc:	281e      	cmp	r0, #30
100646be:	d00f      	beq.n	100646e0 <GAT_att_clt_tx+0x320>
100646c0:	8962      	ldrh	r2, [r4, #10]
100646c2:	8921      	ldrh	r1, [r4, #8]
100646c4:	2003      	movs	r0, #3
100646c6:	f7f2 fb27 	bl	10056d18 <GAT_att_cmn_start_timer>
100646ca:	2800      	cmp	r0, #0
100646cc:	d004      	beq.n	100646d8 <GAT_att_clt_tx+0x318>
100646ce:	4630      	mov	r0, r6
100646d0:	f7f0 fbdc 	bl	10054e8c <ACL_pkt_release>
100646d4:	2684      	movs	r6, #132	@ 0x84
100646d6:	e018      	b.n	1006470a <GAT_att_clt_tx+0x34a>
100646d8:	88a0      	ldrh	r0, [r4, #4]
100646da:	2110      	movs	r1, #16
100646dc:	4301      	orrs	r1, r0
100646de:	80a1      	strh	r1, [r4, #4]
100646e0:	8960      	ldrh	r0, [r4, #10]
100646e2:	4631      	mov	r1, r6
100646e4:	f7f2 fade 	bl	10056ca4 <GAT_att_cmn_send>
100646e8:	2800      	cmp	r0, #0
100646ea:	d001      	beq.n	100646f0 <GAT_att_clt_tx+0x330>
100646ec:	2681      	movs	r6, #129	@ 0x81
100646ee:	e00c      	b.n	1006470a <GAT_att_clt_tx+0x34a>
100646f0:	7828      	ldrb	r0, [r5, #0]
100646f2:	2600      	movs	r6, #0
100646f4:	281e      	cmp	r0, #30
100646f6:	d108      	bne.n	1006470a <GAT_att_clt_tx+0x34a>
100646f8:	8962      	ldrh	r2, [r4, #10]
100646fa:	8921      	ldrh	r1, [r4, #8]
100646fc:	2002      	movs	r0, #2
100646fe:	f7f2 fac1 	bl	10056c84 <GAT_att_cmn_stop_timer>
10064702:	88a0      	ldrh	r0, [r4, #4]
10064704:	2120      	movs	r1, #32
10064706:	4388      	bics	r0, r1
10064708:	80a0      	strh	r0, [r4, #4]
1006470a:	4630      	mov	r0, r6
1006470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006470e:	2711      	movs	r7, #17
10064710:	e6a1      	b.n	10064456 <GAT_att_clt_tx+0x96>
10064712:	46c0      	nop			@ (mov r8, r8)

10064714 <__arm_cp.5_0>:
10064714:	20002e58 	.word	0x20002e58

10064718 <__arm_cp.5_1>:
10064718:	10064d19 	.word	0x10064d19

1006471c <__arm_cp.5_2>:
1006471c:	20002ae4 	.word	0x20002ae4

10064720 <ACL_pkt_write_8b>:
10064720:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064722:	4614      	mov	r4, r2
10064724:	6840      	ldr	r0, [r0, #4]
10064726:	2920      	cmp	r1, #32
10064728:	d304      	bcc.n	10064734 <ACL_pkt_write_8b+0x14>
1006472a:	ad01      	add	r5, sp, #4
1006472c:	462a      	mov	r2, r5
1006472e:	f7fc fb74 	bl	10060e1a <Mem_Buff_get_buff_off>
10064732:	8829      	ldrh	r1, [r5, #0]
10064734:	1840      	adds	r0, r0, r1
10064736:	7104      	strb	r4, [r0, #4]
10064738:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

1006473a <GAT_att_clt_read_grp_type_get_last_attr_h>:
1006473a:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
1006473c:	4604      	mov	r4, r0
1006473e:	8980      	ldrh	r0, [r0, #12]
10064740:	1c40      	adds	r0, r0, #1
10064742:	b281      	uxth	r1, r0
10064744:	4620      	mov	r0, r4
10064746:	f000 f80e 	bl	10064766 <ACL_pkt_read_8b>
1006474a:	8861      	ldrh	r1, [r4, #2]
1006474c:	1a08      	subs	r0, r1, r0
1006474e:	89a1      	ldrh	r1, [r4, #12]
10064750:	1840      	adds	r0, r0, r1
10064752:	1c80      	adds	r0, r0, #2
10064754:	b281      	uxth	r1, r0
10064756:	2202      	movs	r2, #2
10064758:	ad01      	add	r5, sp, #4
1006475a:	4620      	mov	r0, r4
1006475c:	462b      	mov	r3, r5
1006475e:	f7f0 fbb1 	bl	10054ec4 <ACL_pkt_read>
10064762:	8828      	ldrh	r0, [r5, #0]
10064764:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064766 <ACL_pkt_read_8b>:
10064766:	b51c      	push	{r2, r3, r4, lr}
10064768:	291f      	cmp	r1, #31
1006476a:	d803      	bhi.n	10064774 <ACL_pkt_read_8b+0xe>
1006476c:	aa01      	add	r2, sp, #4
1006476e:	8011      	strh	r1, [r2, #0]
10064770:	6840      	ldr	r0, [r0, #4]
10064772:	e005      	b.n	10064780 <ACL_pkt_read_8b+0x1a>
10064774:	6840      	ldr	r0, [r0, #4]
10064776:	ac01      	add	r4, sp, #4
10064778:	4622      	mov	r2, r4
1006477a:	f7fc fb4e 	bl	10060e1a <Mem_Buff_get_buff_off>
1006477e:	8821      	ldrh	r1, [r4, #0]
10064780:	1840      	adds	r0, r0, r1
10064782:	7900      	ldrb	r0, [r0, #4]
10064784:	bd1c      	pop	{r2, r3, r4, pc}

10064786 <GAT_att_clt_find_type_val_get_last_attr_h>:
10064786:	b51c      	push	{r2, r3, r4, lr}
10064788:	8981      	ldrh	r1, [r0, #12]
1006478a:	8842      	ldrh	r2, [r0, #2]
1006478c:	1851      	adds	r1, r2, r1
1006478e:	1e89      	subs	r1, r1, #2
10064790:	b289      	uxth	r1, r1
10064792:	2202      	movs	r2, #2
10064794:	ac01      	add	r4, sp, #4
10064796:	4623      	mov	r3, r4
10064798:	f7f0 fb94 	bl	10054ec4 <ACL_pkt_read>
1006479c:	8820      	ldrh	r0, [r4, #0]
1006479e:	bd1c      	pop	{r2, r3, r4, pc}

100647a0 <GAT_att_clt_parse_error_resp>:
100647a0:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
100647a2:	460e      	mov	r6, r1
100647a4:	8841      	ldrh	r1, [r0, #2]
100647a6:	2905      	cmp	r1, #5
100647a8:	d112      	bne.n	100647d0 <GAT_att_clt_parse_error_resp+0x30>
100647aa:	461c      	mov	r4, r3
100647ac:	4615      	mov	r5, r2
100647ae:	8981      	ldrh	r1, [r0, #12]
100647b0:	2205      	movs	r2, #5
100647b2:	af01      	add	r7, sp, #4
100647b4:	463b      	mov	r3, r7
100647b6:	f7f0 fb85 	bl	10054ec4 <ACL_pkt_read>
100647ba:	7878      	ldrb	r0, [r7, #1]
100647bc:	7030      	strb	r0, [r6, #0]
100647be:	78b8      	ldrb	r0, [r7, #2]
100647c0:	78f9      	ldrb	r1, [r7, #3]
100647c2:	0209      	lsls	r1, r1, #8
100647c4:	1808      	adds	r0, r1, r0
100647c6:	8028      	strh	r0, [r5, #0]
100647c8:	9802      	ldr	r0, [sp, #8]
100647ca:	7020      	strb	r0, [r4, #0]
100647cc:	2000      	movs	r0, #0
100647ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100647d0:	2086      	movs	r0, #134	@ 0x86
100647d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100647d4 <GAT_att_clt_read_type_get_last_attr_h>:
100647d4:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100647d6:	4604      	mov	r4, r0
100647d8:	8980      	ldrh	r0, [r0, #12]
100647da:	1c40      	adds	r0, r0, #1
100647dc:	b281      	uxth	r1, r0
100647de:	4620      	mov	r0, r4
100647e0:	f7ff ffc1 	bl	10064766 <ACL_pkt_read_8b>
100647e4:	8861      	ldrh	r1, [r4, #2]
100647e6:	1a08      	subs	r0, r1, r0
100647e8:	89a1      	ldrh	r1, [r4, #12]
100647ea:	1840      	adds	r0, r0, r1
100647ec:	b281      	uxth	r1, r0
100647ee:	2202      	movs	r2, #2
100647f0:	ad01      	add	r5, sp, #4
100647f2:	4620      	mov	r0, r4
100647f4:	462b      	mov	r3, r5
100647f6:	f7f0 fb65 	bl	10054ec4 <ACL_pkt_read>
100647fa:	8828      	ldrh	r0, [r5, #0]
100647fc:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100647fe <GAT_att_clt_read_type_get_data>:
100647fe:	b570      	push	{r4, r5, r6, lr}
10064800:	4614      	mov	r4, r2
10064802:	460e      	mov	r6, r1
10064804:	4605      	mov	r5, r0
10064806:	8980      	ldrh	r0, [r0, #12]
10064808:	1c40      	adds	r0, r0, #1
1006480a:	b281      	uxth	r1, r0
1006480c:	4628      	mov	r0, r5
1006480e:	f7ff ffaa 	bl	10064766 <ACL_pkt_read_8b>
10064812:	4602      	mov	r2, r0
10064814:	4346      	muls	r6, r0
10064816:	1cb0      	adds	r0, r6, #2
10064818:	8869      	ldrh	r1, [r5, #2]
1006481a:	4288      	cmp	r0, r1
1006481c:	d208      	bcs.n	10064830 <GAT_att_clt_read_type_get_data+0x32>
1006481e:	89a9      	ldrh	r1, [r5, #12]
10064820:	1808      	adds	r0, r1, r0
10064822:	b281      	uxth	r1, r0
10064824:	4628      	mov	r0, r5
10064826:	4623      	mov	r3, r4
10064828:	f7f0 fb4c 	bl	10054ec4 <ACL_pkt_read>
1006482c:	2000      	movs	r0, #0
1006482e:	bd70      	pop	{r4, r5, r6, pc}
10064830:	2086      	movs	r0, #134	@ 0x86
10064832:	bd70      	pop	{r4, r5, r6, pc}

10064834 <GAT_att_clt_find_info_get_last_attr_h>:
10064834:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
10064836:	4604      	mov	r4, r0
10064838:	8980      	ldrh	r0, [r0, #12]
1006483a:	1c40      	adds	r0, r0, #1
1006483c:	b281      	uxth	r1, r0
1006483e:	4620      	mov	r0, r4
10064840:	f7ff ff91 	bl	10064766 <ACL_pkt_read_8b>
10064844:	2111      	movs	r1, #17
10064846:	43c9      	mvns	r1, r1
10064848:	2801      	cmp	r0, #1
1006484a:	d100      	bne.n	1006484e <GAT_att_clt_find_info_get_last_attr_h+0x1a>
1006484c:	310e      	adds	r1, #14
1006484e:	8860      	ldrh	r0, [r4, #2]
10064850:	1840      	adds	r0, r0, r1
10064852:	89a1      	ldrh	r1, [r4, #12]
10064854:	1808      	adds	r0, r1, r0
10064856:	b281      	uxth	r1, r0
10064858:	2202      	movs	r2, #2
1006485a:	ad01      	add	r5, sp, #4
1006485c:	4620      	mov	r0, r4
1006485e:	462b      	mov	r3, r5
10064860:	f7f0 fb30 	bl	10054ec4 <ACL_pkt_read>
10064864:	8828      	ldrh	r0, [r5, #0]
10064866:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

10064868 <GAT_att_clt_prep_wr_cmp_data>:
10064868:	b580      	push	{r7, lr}
1006486a:	460b      	mov	r3, r1
1006486c:	8842      	ldrh	r2, [r0, #2]
1006486e:	8981      	ldrh	r1, [r0, #12]
10064870:	1d49      	adds	r1, r1, #5
10064872:	b289      	uxth	r1, r1
10064874:	1f52      	subs	r2, r2, #5
10064876:	b292      	uxth	r2, r2
10064878:	f7f0 fb1b 	bl	10054eb2 <ACL_pkt_cmp>
1006487c:	bd80      	pop	{r7, pc}

1006487e <GAT_att_clt_unexpect_rx>:
1006487e:	b51c      	push	{r2, r3, r4, lr}
10064880:	4604      	mov	r4, r0
10064882:	8800      	ldrh	r0, [r0, #0]
10064884:	ab01      	add	r3, sp, #4
10064886:	8018      	strh	r0, [r3, #0]
10064888:	2042      	movs	r0, #66	@ 0x42
1006488a:	2102      	movs	r1, #2
1006488c:	460a      	mov	r2, r1
1006488e:	f7ff fbf1 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
10064892:	2800      	cmp	r0, #0
10064894:	d001      	beq.n	1006489a <GAT_att_clt_unexpect_rx+0x1c>
10064896:	2084      	movs	r0, #132	@ 0x84
10064898:	bd1c      	pop	{r2, r3, r4, pc}
1006489a:	4620      	mov	r0, r4
1006489c:	f7f0 faf6 	bl	10054e8c <ACL_pkt_release>
100648a0:	2000      	movs	r0, #0
100648a2:	bd1c      	pop	{r2, r3, r4, pc}

100648a4 <GAT_att_clt_fill_read_multi_req>:
100648a4:	b510      	push	{r4, lr}
100648a6:	460c      	mov	r4, r1
100648a8:	68c3      	ldr	r3, [r0, #12]
100648aa:	8989      	ldrh	r1, [r1, #12]
100648ac:	7a00      	ldrb	r0, [r0, #8]
100648ae:	0042      	lsls	r2, r0, #1
100648b0:	1c48      	adds	r0, r1, #1
100648b2:	b281      	uxth	r1, r0
100648b4:	4620      	mov	r0, r4
100648b6:	f7f0 fb27 	bl	10054f08 <ACL_pkt_write>
100648ba:	bd10      	pop	{r4, pc}

100648bc <GAT_att_clt_fill_handle_range>:
100648bc:	b5b0      	push	{r4, r5, r7, lr}
100648be:	4614      	mov	r4, r2
100648c0:	460a      	mov	r2, r1
100648c2:	4605      	mov	r5, r0
100648c4:	8980      	ldrh	r0, [r0, #12]
100648c6:	1c40      	adds	r0, r0, #1
100648c8:	b281      	uxth	r1, r0
100648ca:	4628      	mov	r0, r5
100648cc:	f7f0 fb13 	bl	10054ef6 <ACL_pkt_write_16b>
100648d0:	89a8      	ldrh	r0, [r5, #12]
100648d2:	1cc0      	adds	r0, r0, #3
100648d4:	b281      	uxth	r1, r0
100648d6:	4628      	mov	r0, r5
100648d8:	4622      	mov	r2, r4
100648da:	f7f0 fb0c 	bl	10054ef6 <ACL_pkt_write_16b>
100648de:	bdb0      	pop	{r4, r5, r7, pc}

100648e0 <GAT_att_db_init>:
100648e0:	b510      	push	{r4, lr}
100648e2:	4604      	mov	r4, r0
100648e4:	2108      	movs	r1, #8
100648e6:	f7fc f9f9 	bl	10060cdc <csmem_mem_0_assign>
100648ea:	4904      	ldr	r1, [pc, #16]	@ (100648fc <__arm_cp.0_0>)
100648ec:	6809      	ldr	r1, [r1, #0]
100648ee:	2260      	movs	r2, #96	@ 0x60
100648f0:	2300      	movs	r3, #0
100648f2:	528b      	strh	r3, [r1, r2]
100648f4:	6648      	str	r0, [r1, #100]	@ 0x64
100648f6:	3160      	adds	r1, #96	@ 0x60
100648f8:	804c      	strh	r4, [r1, #2]
100648fa:	bd10      	pop	{r4, pc}

100648fc <__arm_cp.0_0>:
100648fc:	20002a88 	.word	0x20002a88

10064900 <GAT_att_db_insert>:
10064900:	b5f0      	push	{r4, r5, r6, r7, lr}
10064902:	b085      	sub	sp, #20
10064904:	4617      	mov	r7, r2
10064906:	9004      	str	r0, [sp, #16]
10064908:	4d1c      	ldr	r5, [pc, #112]	@ (1006497c <__arm_cp.1_0>)
1006490a:	6828      	ldr	r0, [r5, #0]
1006490c:	2460      	movs	r4, #96	@ 0x60
1006490e:	5b06      	ldrh	r6, [r0, r4]
10064910:	4602      	mov	r2, r0
10064912:	3260      	adds	r2, #96	@ 0x60
10064914:	8852      	ldrh	r2, [r2, #2]
10064916:	4296      	cmp	r6, r2
10064918:	d217      	bcs.n	1006494a <GAT_att_db_insert+0x4a>
1006491a:	9402      	str	r4, [sp, #8]
1006491c:	9303      	str	r3, [sp, #12]
1006491e:	2900      	cmp	r1, #0
10064920:	d017      	beq.n	10064952 <GAT_att_db_insert+0x52>
10064922:	9701      	str	r7, [sp, #4]
10064924:	4608      	mov	r0, r1
10064926:	f000 f82b 	bl	10064980 <GAT_att_db_get_att_idx>
1006492a:	1c44      	adds	r4, r0, #1
1006492c:	6828      	ldr	r0, [r5, #0]
1006492e:	b2b1      	uxth	r1, r6
10064930:	b2a2      	uxth	r2, r4
10064932:	4291      	cmp	r1, r2
10064934:	d30b      	bcc.n	1006494e <GAT_att_db_insert+0x4e>
10064936:	00c9      	lsls	r1, r1, #3
10064938:	6e40      	ldr	r0, [r0, #100]	@ 0x64
1006493a:	1840      	adds	r0, r0, r1
1006493c:	4601      	mov	r1, r0
1006493e:	3908      	subs	r1, #8
10064940:	2208      	movs	r2, #8
10064942:	f7ed ff0b 	bl	1005275c <BLEPLAT_MemCpy>
10064946:	1e76      	subs	r6, r6, #1
10064948:	e7f0      	b.n	1006492c <GAT_att_db_insert+0x2c>
1006494a:	2700      	movs	r7, #0
1006494c:	e012      	b.n	10064974 <GAT_att_db_insert+0x74>
1006494e:	9f01      	ldr	r7, [sp, #4]
10064950:	e000      	b.n	10064954 <GAT_att_db_insert+0x54>
10064952:	4634      	mov	r4, r6
10064954:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064956:	b2a1      	uxth	r1, r4
10064958:	00c9      	lsls	r1, r1, #3
1006495a:	9a04      	ldr	r2, [sp, #16]
1006495c:	5442      	strb	r2, [r0, r1]
1006495e:	1840      	adds	r0, r0, r1
10064960:	9a03      	ldr	r2, [sp, #12]
10064962:	6042      	str	r2, [r0, #4]
10064964:	6828      	ldr	r0, [r5, #0]
10064966:	9b02      	ldr	r3, [sp, #8]
10064968:	5ac2      	ldrh	r2, [r0, r3]
1006496a:	1c52      	adds	r2, r2, #1
1006496c:	52c2      	strh	r2, [r0, r3]
1006496e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064970:	1840      	adds	r0, r0, r1
10064972:	8047      	strh	r7, [r0, #2]
10064974:	4638      	mov	r0, r7
10064976:	b005      	add	sp, #20
10064978:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006497a:	46c0      	nop			@ (mov r8, r8)

1006497c <__arm_cp.1_0>:
1006497c:	20002a88 	.word	0x20002a88

10064980 <GAT_att_db_get_att_idx>:
10064980:	4908      	ldr	r1, [pc, #32]	@ (100649a4 <__arm_cp.2_0>)
10064982:	680a      	ldr	r2, [r1, #0]
10064984:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10064986:	2362      	movs	r3, #98	@ 0x62
10064988:	5ad2      	ldrh	r2, [r2, r3]
1006498a:	00d2      	lsls	r2, r2, #3
1006498c:	1852      	adds	r2, r2, r1
1006498e:	3a08      	subs	r2, #8
10064990:	4282      	cmp	r2, r0
10064992:	d302      	bcc.n	1006499a <GAT_att_db_get_att_idx+0x1a>
10064994:	1a40      	subs	r0, r0, r1
10064996:	08c0      	lsrs	r0, r0, #3
10064998:	e001      	b.n	1006499e <GAT_att_db_get_att_idx+0x1e>
1006499a:	2000      	movs	r0, #0
1006499c:	43c0      	mvns	r0, r0
1006499e:	b280      	uxth	r0, r0
100649a0:	4770      	bx	lr
100649a2:	46c0      	nop			@ (mov r8, r8)

100649a4 <__arm_cp.2_0>:
100649a4:	20002a88 	.word	0x20002a88

100649a8 <GAT_att_db_find_by_handle>:
100649a8:	b580      	push	{r7, lr}
100649aa:	f000 f80f 	bl	100649cc <GAT_att_db_find_attr_idx_with_handle>
100649ae:	4905      	ldr	r1, [pc, #20]	@ (100649c4 <__arm_cp.3_0>)
100649b0:	4288      	cmp	r0, r1
100649b2:	d005      	beq.n	100649c0 <GAT_att_db_find_by_handle+0x18>
100649b4:	00c0      	lsls	r0, r0, #3
100649b6:	4904      	ldr	r1, [pc, #16]	@ (100649c8 <__arm_cp.3_1>)
100649b8:	6809      	ldr	r1, [r1, #0]
100649ba:	6e49      	ldr	r1, [r1, #100]	@ 0x64
100649bc:	1808      	adds	r0, r1, r0
100649be:	bd80      	pop	{r7, pc}
100649c0:	2000      	movs	r0, #0
100649c2:	bd80      	pop	{r7, pc}

100649c4 <__arm_cp.3_0>:
100649c4:	0000ffff 	.word	0x0000ffff

100649c8 <__arm_cp.3_1>:
100649c8:	20002a88 	.word	0x20002a88

100649cc <GAT_att_db_find_attr_idx_with_handle>:
100649cc:	b510      	push	{r4, lr}
100649ce:	4604      	mov	r4, r0
100649d0:	f000 f824 	bl	10064a1c <GAT_att_db_find_attr_idx_from_handle>
100649d4:	4906      	ldr	r1, [pc, #24]	@ (100649f0 <__arm_cp.4_0>)
100649d6:	4288      	cmp	r0, r1
100649d8:	d007      	beq.n	100649ea <GAT_att_db_find_attr_idx_with_handle+0x1e>
100649da:	00c2      	lsls	r2, r0, #3
100649dc:	4b05      	ldr	r3, [pc, #20]	@ (100649f4 <__arm_cp.4_1>)
100649de:	681b      	ldr	r3, [r3, #0]
100649e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
100649e2:	189a      	adds	r2, r3, r2
100649e4:	8852      	ldrh	r2, [r2, #2]
100649e6:	42a2      	cmp	r2, r4
100649e8:	d000      	beq.n	100649ec <GAT_att_db_find_attr_idx_with_handle+0x20>
100649ea:	4608      	mov	r0, r1
100649ec:	bd10      	pop	{r4, pc}
100649ee:	46c0      	nop			@ (mov r8, r8)

100649f0 <__arm_cp.4_0>:
100649f0:	0000ffff 	.word	0x0000ffff

100649f4 <__arm_cp.4_1>:
100649f4:	20002a88 	.word	0x20002a88

100649f8 <GAT_att_db_find_from_handle>:
100649f8:	b580      	push	{r7, lr}
100649fa:	f000 f80f 	bl	10064a1c <GAT_att_db_find_attr_idx_from_handle>
100649fe:	4905      	ldr	r1, [pc, #20]	@ (10064a14 <__arm_cp.5_0>)
10064a00:	4288      	cmp	r0, r1
10064a02:	d005      	beq.n	10064a10 <GAT_att_db_find_from_handle+0x18>
10064a04:	00c0      	lsls	r0, r0, #3
10064a06:	4904      	ldr	r1, [pc, #16]	@ (10064a18 <__arm_cp.5_1>)
10064a08:	6809      	ldr	r1, [r1, #0]
10064a0a:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064a0c:	1808      	adds	r0, r1, r0
10064a0e:	bd80      	pop	{r7, pc}
10064a10:	2000      	movs	r0, #0
10064a12:	bd80      	pop	{r7, pc}

10064a14 <__arm_cp.5_0>:
10064a14:	0000ffff 	.word	0x0000ffff

10064a18 <__arm_cp.5_1>:
10064a18:	20002a88 	.word	0x20002a88

10064a1c <GAT_att_db_find_attr_idx_from_handle>:
10064a1c:	b570      	push	{r4, r5, r6, lr}
10064a1e:	4909      	ldr	r1, [pc, #36]	@ (10064a44 <__arm_cp.6_0>)
10064a20:	680a      	ldr	r2, [r1, #0]
10064a22:	2160      	movs	r1, #96	@ 0x60
10064a24:	5a53      	ldrh	r3, [r2, r1]
10064a26:	2100      	movs	r1, #0
10064a28:	2502      	movs	r5, #2
10064a2a:	4c07      	ldr	r4, [pc, #28]	@ (10064a48 <__arm_cp.6_1>)
10064a2c:	428b      	cmp	r3, r1
10064a2e:	d006      	beq.n	10064a3e <GAT_att_db_find_attr_idx_from_handle+0x22>
10064a30:	6e56      	ldr	r6, [r2, #100]	@ 0x64
10064a32:	5b76      	ldrh	r6, [r6, r5]
10064a34:	4286      	cmp	r6, r0
10064a36:	d203      	bcs.n	10064a40 <GAT_att_db_find_attr_idx_from_handle+0x24>
10064a38:	3508      	adds	r5, #8
10064a3a:	1c49      	adds	r1, r1, #1
10064a3c:	e7f6      	b.n	10064a2c <GAT_att_db_find_attr_idx_from_handle+0x10>
10064a3e:	4621      	mov	r1, r4
10064a40:	b288      	uxth	r0, r1
10064a42:	bd70      	pop	{r4, r5, r6, pc}

10064a44 <__arm_cp.6_0>:
10064a44:	20002a88 	.word	0x20002a88

10064a48 <__arm_cp.6_1>:
10064a48:	0000ffff 	.word	0x0000ffff

10064a4c <GAT_att_db_find_by_def>:
10064a4c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064a4e:	9302      	str	r3, [sp, #8]
10064a50:	4615      	mov	r5, r2
10064a52:	2200      	movs	r2, #0
10064a54:	4288      	cmp	r0, r1
10064a56:	d823      	bhi.n	10064aa0 <GAT_att_db_find_by_def+0x54>
10064a58:	460c      	mov	r4, r1
10064a5a:	4916      	ldr	r1, [pc, #88]	@ (10064ab4 <__arm_cp.8_0>)
10064a5c:	680f      	ldr	r7, [r1, #0]
10064a5e:	2160      	movs	r1, #96	@ 0x60
10064a60:	5a79      	ldrh	r1, [r7, r1]
10064a62:	2900      	cmp	r1, #0
10064a64:	d01c      	beq.n	10064aa0 <GAT_att_db_find_by_def+0x54>
10064a66:	9200      	str	r2, [sp, #0]
10064a68:	9101      	str	r1, [sp, #4]
10064a6a:	f7ff ffd7 	bl	10064a1c <GAT_att_db_find_attr_idx_from_handle>
10064a6e:	4606      	mov	r6, r0
10064a70:	4620      	mov	r0, r4
10064a72:	f7ff ffd3 	bl	10064a1c <GAT_att_db_find_attr_idx_from_handle>
10064a76:	9901      	ldr	r1, [sp, #4]
10064a78:	1e49      	subs	r1, r1, #1
10064a7a:	4281      	cmp	r1, r0
10064a7c:	d300      	bcc.n	10064a80 <GAT_att_db_find_by_def+0x34>
10064a7e:	4601      	mov	r1, r0
10064a80:	b289      	uxth	r1, r1
10064a82:	b2b2      	uxth	r2, r6
10064a84:	428a      	cmp	r2, r1
10064a86:	d80d      	bhi.n	10064aa4 <GAT_att_db_find_by_def+0x58>
10064a88:	6e78      	ldr	r0, [r7, #100]	@ 0x64
10064a8a:	00d3      	lsls	r3, r2, #3
10064a8c:	5cc4      	ldrb	r4, [r0, r3]
10064a8e:	42ac      	cmp	r4, r5
10064a90:	d104      	bne.n	10064a9c <GAT_att_db_find_by_def+0x50>
10064a92:	18c0      	adds	r0, r0, r3
10064a94:	6843      	ldr	r3, [r0, #4]
10064a96:	9c02      	ldr	r4, [sp, #8]
10064a98:	42a3      	cmp	r3, r4
10064a9a:	d005      	beq.n	10064aa8 <GAT_att_db_find_by_def+0x5c>
10064a9c:	1c76      	adds	r6, r6, #1
10064a9e:	e7f0      	b.n	10064a82 <GAT_att_db_find_by_def+0x36>
10064aa0:	4610      	mov	r0, r2
10064aa2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064aa4:	9800      	ldr	r0, [sp, #0]
10064aa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064aa8:	4903      	ldr	r1, [pc, #12]	@ (10064ab8 <__arm_cp.8_1>)
10064aaa:	428a      	cmp	r2, r1
10064aac:	d100      	bne.n	10064ab0 <GAT_att_db_find_by_def+0x64>
10064aae:	2000      	movs	r0, #0
10064ab0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064ab2:	46c0      	nop			@ (mov r8, r8)

10064ab4 <__arm_cp.8_0>:
10064ab4:	20002a88 	.word	0x20002a88

10064ab8 <__arm_cp.8_1>:
10064ab8:	0000ffff 	.word	0x0000ffff

10064abc <GAT_att_db_get_next>:
10064abc:	b580      	push	{r7, lr}
10064abe:	f7ff ff5f 	bl	10064980 <GAT_att_db_get_att_idx>
10064ac2:	4907      	ldr	r1, [pc, #28]	@ (10064ae0 <__arm_cp.10_0>)
10064ac4:	6809      	ldr	r1, [r1, #0]
10064ac6:	2260      	movs	r2, #96	@ 0x60
10064ac8:	5a8a      	ldrh	r2, [r1, r2]
10064aca:	1c40      	adds	r0, r0, #1
10064acc:	b280      	uxth	r0, r0
10064ace:	4290      	cmp	r0, r2
10064ad0:	d203      	bcs.n	10064ada <GAT_att_db_get_next+0x1e>
10064ad2:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064ad4:	00c0      	lsls	r0, r0, #3
10064ad6:	1808      	adds	r0, r1, r0
10064ad8:	bd80      	pop	{r7, pc}
10064ada:	2000      	movs	r0, #0
10064adc:	bd80      	pop	{r7, pc}
10064ade:	46c0      	nop			@ (mov r8, r8)

10064ae0 <__arm_cp.10_0>:
10064ae0:	20002a88 	.word	0x20002a88

10064ae4 <GAT_att_db_get_last_group_handle>:
10064ae4:	b580      	push	{r7, lr}
10064ae6:	f000 f803 	bl	10064af0 <GAT_att_db_get_last_group_attribute>
10064aea:	8840      	ldrh	r0, [r0, #2]
10064aec:	bd80      	pop	{r7, pc}
	...

10064af0 <GAT_att_db_get_last_group_attribute>:
10064af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064af2:	7804      	ldrb	r4, [r0, #0]
10064af4:	2502      	movs	r5, #2
10064af6:	4621      	mov	r1, r4
10064af8:	4329      	orrs	r1, r5
10064afa:	2902      	cmp	r1, #2
10064afc:	d11e      	bne.n	10064b3c <GAT_att_db_get_last_group_attribute+0x4c>
10064afe:	f7ff ff3f 	bl	10064980 <GAT_att_db_get_att_idx>
10064b02:	490f      	ldr	r1, [pc, #60]	@ (10064b40 <__arm_cp.12_0>)
10064b04:	6809      	ldr	r1, [r1, #0]
10064b06:	2260      	movs	r2, #96	@ 0x60
10064b08:	5a8b      	ldrh	r3, [r1, r2]
10064b0a:	1c40      	adds	r0, r0, #1
10064b0c:	b282      	uxth	r2, r0
10064b0e:	429a      	cmp	r2, r3
10064b10:	d210      	bcs.n	10064b34 <GAT_att_db_get_last_group_attribute+0x44>
10064b12:	2c00      	cmp	r4, #0
10064b14:	d008      	beq.n	10064b28 <GAT_att_db_get_last_group_attribute+0x38>
10064b16:	2c02      	cmp	r4, #2
10064b18:	d1f7      	bne.n	10064b0a <GAT_att_db_get_last_group_attribute+0x1a>
10064b1a:	00d7      	lsls	r7, r2, #3
10064b1c:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064b1e:	5df7      	ldrb	r7, [r6, r7]
10064b20:	432f      	orrs	r7, r5
10064b22:	2f02      	cmp	r7, #2
10064b24:	d1f1      	bne.n	10064b0a <GAT_att_db_get_last_group_attribute+0x1a>
10064b26:	e006      	b.n	10064b36 <GAT_att_db_get_last_group_attribute+0x46>
10064b28:	00d7      	lsls	r7, r2, #3
10064b2a:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064b2c:	5df7      	ldrb	r7, [r6, r7]
10064b2e:	2f00      	cmp	r7, #0
10064b30:	d1eb      	bne.n	10064b0a <GAT_att_db_get_last_group_attribute+0x1a>
10064b32:	e000      	b.n	10064b36 <GAT_att_db_get_last_group_attribute+0x46>
10064b34:	6e4e      	ldr	r6, [r1, #100]	@ 0x64
10064b36:	00d0      	lsls	r0, r2, #3
10064b38:	1980      	adds	r0, r0, r6
10064b3a:	3808      	subs	r0, #8
10064b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064b3e:	46c0      	nop			@ (mov r8, r8)

10064b40 <__arm_cp.12_0>:
10064b40:	20002a88 	.word	0x20002a88

10064b44 <GAT_att_db_get_last_handle>:
10064b44:	4806      	ldr	r0, [pc, #24]	@ (10064b60 <__arm_cp.14_0>)
10064b46:	6800      	ldr	r0, [r0, #0]
10064b48:	2160      	movs	r1, #96	@ 0x60
10064b4a:	5a41      	ldrh	r1, [r0, r1]
10064b4c:	2900      	cmp	r1, #0
10064b4e:	d005      	beq.n	10064b5c <GAT_att_db_get_last_handle+0x18>
10064b50:	6e40      	ldr	r0, [r0, #100]	@ 0x64
10064b52:	00c9      	lsls	r1, r1, #3
10064b54:	1808      	adds	r0, r1, r0
10064b56:	1f80      	subs	r0, r0, #6
10064b58:	8800      	ldrh	r0, [r0, #0]
10064b5a:	4770      	bx	lr
10064b5c:	2000      	movs	r0, #0
10064b5e:	4770      	bx	lr

10064b60 <__arm_cp.14_0>:
10064b60:	20002a88 	.word	0x20002a88

10064b64 <GAT_att_db_rm_att_range>:
10064b64:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
10064b66:	460d      	mov	r5, r1
10064b68:	4604      	mov	r4, r0
10064b6a:	f7ff ffeb 	bl	10064b44 <GAT_att_db_get_last_handle>
10064b6e:	2800      	cmp	r0, #0
10064b70:	d034      	beq.n	10064bdc <GAT_att_db_rm_att_range+0x78>
10064b72:	42ac      	cmp	r4, r5
10064b74:	d832      	bhi.n	10064bdc <GAT_att_db_rm_att_range+0x78>
10064b76:	4606      	mov	r6, r0
10064b78:	42a0      	cmp	r0, r4
10064b7a:	d32f      	bcc.n	10064bdc <GAT_att_db_rm_att_range+0x78>
10064b7c:	4620      	mov	r0, r4
10064b7e:	f7ff ff25 	bl	100649cc <GAT_att_db_find_attr_idx_with_handle>
10064b82:	4604      	mov	r4, r0
10064b84:	4816      	ldr	r0, [pc, #88]	@ (10064be0 <__arm_cp.16_0>)
10064b86:	4284      	cmp	r4, r0
10064b88:	d028      	beq.n	10064bdc <GAT_att_db_rm_att_range+0x78>
10064b8a:	42ae      	cmp	r6, r5
10064b8c:	d300      	bcc.n	10064b90 <GAT_att_db_rm_att_range+0x2c>
10064b8e:	462e      	mov	r6, r5
10064b90:	4630      	mov	r0, r6
10064b92:	f7ff ff1b 	bl	100649cc <GAT_att_db_find_attr_idx_with_handle>
10064b96:	4913      	ldr	r1, [pc, #76]	@ (10064be4 <__arm_cp.16_1>)
10064b98:	680f      	ldr	r7, [r1, #0]
10064b9a:	2660      	movs	r6, #96	@ 0x60
10064b9c:	5bb9      	ldrh	r1, [r7, r6]
10064b9e:	1e4a      	subs	r2, r1, #1
10064ba0:	4282      	cmp	r2, r0
10064ba2:	d917      	bls.n	10064bd4 <GAT_att_db_rm_att_range+0x70>
10064ba4:	9001      	str	r0, [sp, #4]
10064ba6:	4605      	mov	r5, r0
10064ba8:	9402      	str	r4, [sp, #8]
10064baa:	b28b      	uxth	r3, r1
10064bac:	1c6d      	adds	r5, r5, #1
10064bae:	b2aa      	uxth	r2, r5
10064bb0:	429a      	cmp	r2, r3
10064bb2:	d20d      	bcs.n	10064bd0 <GAT_att_db_rm_att_range+0x6c>
10064bb4:	6e79      	ldr	r1, [r7, #100]	@ 0x64
10064bb6:	b2a0      	uxth	r0, r4
10064bb8:	00c0      	lsls	r0, r0, #3
10064bba:	1808      	adds	r0, r1, r0
10064bbc:	00d2      	lsls	r2, r2, #3
10064bbe:	1889      	adds	r1, r1, r2
10064bc0:	2208      	movs	r2, #8
10064bc2:	f7ed fdcb 	bl	1005275c <BLEPLAT_MemCpy>
10064bc6:	4807      	ldr	r0, [pc, #28]	@ (10064be4 <__arm_cp.16_1>)
10064bc8:	6807      	ldr	r7, [r0, #0]
10064bca:	5bb9      	ldrh	r1, [r7, r6]
10064bcc:	1c64      	adds	r4, r4, #1
10064bce:	e7ec      	b.n	10064baa <GAT_att_db_rm_att_range+0x46>
10064bd0:	9c02      	ldr	r4, [sp, #8]
10064bd2:	9801      	ldr	r0, [sp, #4]
10064bd4:	43c2      	mvns	r2, r0
10064bd6:	18a2      	adds	r2, r4, r2
10064bd8:	1851      	adds	r1, r2, r1
10064bda:	53b9      	strh	r1, [r7, r6]
10064bdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10064bde:	46c0      	nop			@ (mov r8, r8)

10064be0 <__arm_cp.16_0>:
10064be0:	0000ffff 	.word	0x0000ffff

10064be4 <__arm_cp.16_1>:
10064be4:	20002a88 	.word	0x20002a88

10064be8 <GAT_att_db_find_last_attr_of_type>:
10064be8:	b510      	push	{r4, lr}
10064bea:	4909      	ldr	r1, [pc, #36]	@ (10064c10 <__arm_cp.17_0>)
10064bec:	680a      	ldr	r2, [r1, #0]
10064bee:	2160      	movs	r1, #96	@ 0x60
10064bf0:	5a53      	ldrh	r3, [r2, r1]
10064bf2:	0419      	lsls	r1, r3, #16
10064bf4:	d009      	beq.n	10064c0a <GAT_att_db_find_last_attr_of_type+0x22>
10064bf6:	6e51      	ldr	r1, [r2, #100]	@ 0x64
10064bf8:	b29c      	uxth	r4, r3
10064bfa:	00e4      	lsls	r4, r4, #3
10064bfc:	1861      	adds	r1, r4, r1
10064bfe:	3908      	subs	r1, #8
10064c00:	780c      	ldrb	r4, [r1, #0]
10064c02:	1e5b      	subs	r3, r3, #1
10064c04:	4284      	cmp	r4, r0
10064c06:	d1f4      	bne.n	10064bf2 <GAT_att_db_find_last_attr_of_type+0xa>
10064c08:	e000      	b.n	10064c0c <GAT_att_db_find_last_attr_of_type+0x24>
10064c0a:	2100      	movs	r1, #0
10064c0c:	4608      	mov	r0, r1
10064c0e:	bd10      	pop	{r4, pc}

10064c10 <__arm_cp.17_0>:
10064c10:	20002a88 	.word	0x20002a88

10064c14 <GAT_att_db_reverse_find_attr_of_type>:
10064c14:	b510      	push	{r4, lr}
10064c16:	4604      	mov	r4, r0
10064c18:	4608      	mov	r0, r1
10064c1a:	f7ff feff 	bl	10064a1c <GAT_att_db_find_attr_idx_from_handle>
10064c1e:	4908      	ldr	r1, [pc, #32]	@ (10064c40 <__arm_cp.18_0>)
10064c20:	6809      	ldr	r1, [r1, #0]
10064c22:	6e49      	ldr	r1, [r1, #100]	@ 0x64
10064c24:	b282      	uxth	r2, r0
10064c26:	00d2      	lsls	r2, r2, #3
10064c28:	5c8b      	ldrb	r3, [r1, r2]
10064c2a:	42a3      	cmp	r3, r4
10064c2c:	d005      	beq.n	10064c3a <GAT_att_db_reverse_find_attr_of_type+0x26>
10064c2e:	1e42      	subs	r2, r0, #1
10064c30:	0400      	lsls	r0, r0, #16
10064c32:	4610      	mov	r0, r2
10064c34:	d1f6      	bne.n	10064c24 <GAT_att_db_reverse_find_attr_of_type+0x10>
10064c36:	2000      	movs	r0, #0
10064c38:	bd10      	pop	{r4, pc}
10064c3a:	1888      	adds	r0, r1, r2
10064c3c:	bd10      	pop	{r4, pc}
10064c3e:	46c0      	nop			@ (mov r8, r8)

10064c40 <__arm_cp.18_0>:
10064c40:	20002a88 	.word	0x20002a88

10064c44 <GAT_clt_init>:
10064c44:	b570      	push	{r4, r5, r6, lr}
10064c46:	4c11      	ldr	r4, [pc, #68]	@ (10064c8c <__arm_cp.0_0>)
10064c48:	7aa0      	ldrb	r0, [r4, #10]
10064c4a:	2124      	movs	r1, #36	@ 0x24
10064c4c:	f7fc f846 	bl	10060cdc <csmem_mem_0_assign>
10064c50:	490f      	ldr	r1, [pc, #60]	@ (10064c90 <__arm_cp.0_1>)
10064c52:	680b      	ldr	r3, [r1, #0]
10064c54:	2200      	movs	r2, #0
10064c56:	461d      	mov	r5, r3
10064c58:	3550      	adds	r5, #80	@ 0x50
10064c5a:	461e      	mov	r6, r3
10064c5c:	3648      	adds	r6, #72	@ 0x48
10064c5e:	649a      	str	r2, [r3, #72]	@ 0x48
10064c60:	64de      	str	r6, [r3, #76]	@ 0x4c
10064c62:	651a      	str	r2, [r3, #80]	@ 0x50
10064c64:	655d      	str	r5, [r3, #84]	@ 0x54
10064c66:	7aa4      	ldrb	r4, [r4, #10]
10064c68:	2c00      	cmp	r4, #0
10064c6a:	d00c      	beq.n	10064c86 <GAT_clt_init+0x42>
10064c6c:	6202      	str	r2, [r0, #32]
10064c6e:	680b      	ldr	r3, [r1, #0]
10064c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
10064c72:	6018      	str	r0, [r3, #0]
10064c74:	2301      	movs	r3, #1
10064c76:	7003      	strb	r3, [r0, #0]
10064c78:	4605      	mov	r5, r0
10064c7a:	3520      	adds	r5, #32
10064c7c:	680b      	ldr	r3, [r1, #0]
10064c7e:	655d      	str	r5, [r3, #84]	@ 0x54
10064c80:	3024      	adds	r0, #36	@ 0x24
10064c82:	1e64      	subs	r4, r4, #1
10064c84:	e7f0      	b.n	10064c68 <GAT_clt_init+0x24>
10064c86:	659a      	str	r2, [r3, #88]	@ 0x58
10064c88:	bd70      	pop	{r4, r5, r6, pc}
10064c8a:	46c0      	nop			@ (mov r8, r8)

10064c8c <__arm_cp.0_0>:
10064c8c:	20002ae4 	.word	0x20002ae4

10064c90 <__arm_cp.0_1>:
10064c90:	20002a88 	.word	0x20002a88

10064c94 <GAT_clt_connection>:
10064c94:	4770      	bx	lr
	...

10064c98 <GAT_clt_bearer_close>:
10064c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10064c9a:	460d      	mov	r5, r1
10064c9c:	4604      	mov	r4, r0
10064c9e:	4e19      	ldr	r6, [pc, #100]	@ (10064d04 <__arm_cp.2_0>)
10064ca0:	6837      	ldr	r7, [r6, #0]
10064ca2:	3748      	adds	r7, #72	@ 0x48
10064ca4:	683f      	ldr	r7, [r7, #0]
10064ca6:	2f00      	cmp	r7, #0
10064ca8:	d010      	beq.n	10064ccc <GAT_clt_bearer_close+0x34>
10064caa:	8878      	ldrh	r0, [r7, #2]
10064cac:	42a0      	cmp	r0, r4
10064cae:	d10b      	bne.n	10064cc8 <GAT_clt_bearer_close+0x30>
10064cb0:	88b8      	ldrh	r0, [r7, #4]
10064cb2:	42a8      	cmp	r0, r5
10064cb4:	d108      	bne.n	10064cc8 <GAT_clt_bearer_close+0x30>
10064cb6:	7838      	ldrb	r0, [r7, #0]
10064cb8:	2118      	movs	r1, #24
10064cba:	4301      	orrs	r1, r0
10064cbc:	7039      	strb	r1, [r7, #0]
10064cbe:	200c      	movs	r0, #12
10064cc0:	f7fd fde2 	bl	10062888 <tsk_notify_idx>
10064cc4:	f7ec ff63 	bl	10051b8e <BLE_STACK_ProcessRequest>
10064cc8:	3720      	adds	r7, #32
10064cca:	e7eb      	b.n	10064ca4 <GAT_clt_bearer_close+0xc>
10064ccc:	2d04      	cmp	r5, #4
10064cce:	d117      	bne.n	10064d00 <GAT_clt_bearer_close+0x68>
10064cd0:	6830      	ldr	r0, [r6, #0]
10064cd2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
10064cd4:	460b      	mov	r3, r1
10064cd6:	2b00      	cmp	r3, #0
10064cd8:	d00b      	beq.n	10064cf2 <GAT_clt_bearer_close+0x5a>
10064cda:	461a      	mov	r2, r3
10064cdc:	689d      	ldr	r5, [r3, #8]
10064cde:	2300      	movs	r3, #0
10064ce0:	2d00      	cmp	r5, #0
10064ce2:	d0f8      	beq.n	10064cd6 <GAT_clt_bearer_close+0x3e>
10064ce4:	88ab      	ldrh	r3, [r5, #4]
10064ce6:	42a3      	cmp	r3, r4
10064ce8:	462b      	mov	r3, r5
10064cea:	d1f4      	bne.n	10064cd6 <GAT_clt_bearer_close+0x3e>
10064cec:	68ab      	ldr	r3, [r5, #8]
10064cee:	6093      	str	r3, [r2, #8]
10064cf0:	e7f1      	b.n	10064cd6 <GAT_clt_bearer_close+0x3e>
10064cf2:	2900      	cmp	r1, #0
10064cf4:	d004      	beq.n	10064d00 <GAT_clt_bearer_close+0x68>
10064cf6:	888a      	ldrh	r2, [r1, #4]
10064cf8:	42a2      	cmp	r2, r4
10064cfa:	d101      	bne.n	10064d00 <GAT_clt_bearer_close+0x68>
10064cfc:	6889      	ldr	r1, [r1, #8]
10064cfe:	6581      	str	r1, [r0, #88]	@ 0x58
10064d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10064d02:	46c0      	nop			@ (mov r8, r8)

10064d04 <__arm_cp.2_0>:
10064d04:	20002a88 	.word	0x20002a88

10064d08 <GAT_clt_proc_exec_tsk>:
10064d08:	b580      	push	{r7, lr}
10064d0a:	4802      	ldr	r0, [pc, #8]	@ (10064d14 <__arm_cp.3_0>)
10064d0c:	6800      	ldr	r0, [r0, #0]
10064d0e:	4780      	blx	r0
10064d10:	bd80      	pop	{r7, pc}
10064d12:	46c0      	nop			@ (mov r8, r8)

10064d14 <__arm_cp.3_0>:
10064d14:	20002e5c 	.word	0x20002e5c

10064d18 <GAT_clt_rcv>:
10064d18:	b5f0      	push	{r4, r5, r6, r7, lr}
10064d1a:	b095      	sub	sp, #84	@ 0x54
10064d1c:	4605      	mov	r5, r0
10064d1e:	8804      	ldrh	r4, [r0, #0]
10064d20:	f7f4 fdcb 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10064d24:	4601      	mov	r1, r0
10064d26:	4620      	mov	r0, r4
10064d28:	f000 fa6e 	bl	10065208 <GAT_clt_get_proc_per_channel>
10064d2c:	2686      	movs	r6, #134	@ 0x86
10064d2e:	2800      	cmp	r0, #0
10064d30:	d100      	bne.n	10064d34 <GAT_clt_rcv+0x1c>
10064d32:	e208      	b.n	10065146 <GAT_clt_rcv+0x42e>
10064d34:	4604      	mov	r4, r0
10064d36:	882f      	ldrh	r7, [r5, #0]
10064d38:	4628      	mov	r0, r5
10064d3a:	f7f4 fdbe 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10064d3e:	4601      	mov	r1, r0
10064d40:	4638      	mov	r0, r7
10064d42:	f7f1 ff2d 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10064d46:	9008      	str	r0, [sp, #32]
10064d48:	7820      	ldrb	r0, [r4, #0]
10064d4a:	21fb      	movs	r1, #251	@ 0xfb
10064d4c:	4001      	ands	r1, r0
10064d4e:	7021      	strb	r1, [r4, #0]
10064d50:	270c      	movs	r7, #12
10064d52:	4638      	mov	r0, r7
10064d54:	f7fd fd98 	bl	10062888 <tsk_notify_idx>
10064d58:	f7ec ff19 	bl	10051b8e <BLE_STACK_ProcessRequest>
10064d5c:	4628      	mov	r0, r5
10064d5e:	f000 fa65 	bl	1006522c <GAT_att_cmn_get_opcode>
10064d62:	2801      	cmp	r0, #1
10064d64:	d107      	bne.n	10064d76 <GAT_clt_rcv+0x5e>
10064d66:	8860      	ldrh	r0, [r4, #2]
10064d68:	f7f1 f804 	bl	10055d74 <GAP_started_gatt_proc>
10064d6c:	2800      	cmp	r0, #0
10064d6e:	d060      	beq.n	10064e32 <GAT_clt_rcv+0x11a>
10064d70:	4620      	mov	r0, r4
10064d72:	f000 fa60 	bl	10065236 <GAT_clt_stop_proc>
10064d76:	7820      	ldrb	r0, [r4, #0]
10064d78:	2200      	movs	r2, #0
10064d7a:	0701      	lsls	r1, r0, #28
10064d7c:	d457      	bmi.n	10064e2e <GAT_clt_rcv+0x116>
10064d7e:	79a3      	ldrb	r3, [r4, #6]
10064d80:	1e59      	subs	r1, r3, #1
10064d82:	2911      	cmp	r1, #17
10064d84:	d900      	bls.n	10064d88 <GAT_clt_rcv+0x70>
10064d86:	e1de      	b.n	10065146 <GAT_clt_rcv+0x42e>
10064d88:	9207      	str	r2, [sp, #28]
10064d8a:	0049      	lsls	r1, r1, #1
10064d8c:	4479      	add	r1, pc
10064d8e:	8889      	ldrh	r1, [r1, #4]
10064d90:	0049      	lsls	r1, r1, #1
10064d92:	448f      	add	pc, r1
10064d94:	010200c5 	.word	0x010200c5
10064d98:	0099010f 	.word	0x0099010f
10064d9c:	011f0099 	.word	0x011f0099
10064da0:	01750164 	.word	0x01750164
10064da4:	01b9017c 	.word	0x01b9017c
10064da8:	00a600a6 	.word	0x00a600a6
10064dac:	001100b8 	.word	0x001100b8
10064db0:	001100b0 	.word	0x001100b0
10064db4:	00b00011 	.word	0x00b00011
10064db8:	06c0      	lsls	r0, r0, #27
10064dba:	d500      	bpl.n	10064dbe <GAT_clt_rcv+0xa6>
10064dbc:	e0a7      	b.n	10064f0e <GAT_clt_rcv+0x1f6>
10064dbe:	88a2      	ldrh	r2, [r4, #4]
10064dc0:	8861      	ldrh	r1, [r4, #2]
10064dc2:	200a      	movs	r0, #10
10064dc4:	462b      	mov	r3, r5
10064dc6:	f7fe ffbf 	bl	10063d48 <aci_att_clt_prepare_write_resp_event_push_noinline>
10064dca:	2800      	cmp	r0, #0
10064dcc:	d000      	beq.n	10064dd0 <GAT_clt_rcv+0xb8>
10064dce:	e1b4      	b.n	1006513a <GAT_clt_rcv+0x422>
10064dd0:	79a0      	ldrb	r0, [r4, #6]
10064dd2:	2811      	cmp	r0, #17
10064dd4:	d100      	bne.n	10064dd8 <GAT_clt_rcv+0xc0>
10064dd6:	e1b2      	b.n	1006513e <GAT_clt_rcv+0x426>
10064dd8:	7a63      	ldrb	r3, [r4, #9]
10064dda:	6921      	ldr	r1, [r4, #16]
10064ddc:	9108      	str	r1, [sp, #32]
10064dde:	2810      	cmp	r0, #16
10064de0:	d000      	beq.n	10064de4 <GAT_clt_rcv+0xcc>
10064de2:	e1d0      	b.n	10065186 <GAT_clt_rcv+0x46e>
10064de4:	9306      	str	r3, [sp, #24]
10064de6:	89a8      	ldrh	r0, [r5, #12]
10064de8:	1c40      	adds	r0, r0, #1
10064dea:	b281      	uxth	r1, r0
10064dec:	4628      	mov	r0, r5
10064dee:	f7f0 f872 	bl	10054ed6 <ACL_pkt_read_16b>
10064df2:	9005      	str	r0, [sp, #20]
10064df4:	89a8      	ldrh	r0, [r5, #12]
10064df6:	1cc0      	adds	r0, r0, #3
10064df8:	b281      	uxth	r1, r0
10064dfa:	4628      	mov	r0, r5
10064dfc:	f7f0 f86b 	bl	10054ed6 <ACL_pkt_read_16b>
10064e00:	2600      	movs	r6, #0
10064e02:	89a2      	ldrh	r2, [r4, #12]
10064e04:	8869      	ldrh	r1, [r5, #2]
10064e06:	1f49      	subs	r1, r1, #5
10064e08:	4291      	cmp	r1, r2
10064e0a:	9004      	str	r0, [sp, #16]
10064e0c:	d000      	beq.n	10064e10 <GAT_clt_rcv+0xf8>
10064e0e:	e1cf      	b.n	100651b0 <GAT_clt_rcv+0x498>
10064e10:	4638      	mov	r0, r7
10064e12:	9906      	ldr	r1, [sp, #24]
10064e14:	4348      	muls	r0, r1
10064e16:	9a08      	ldr	r2, [sp, #32]
10064e18:	1810      	adds	r0, r2, r0
10064e1a:	6880      	ldr	r0, [r0, #8]
10064e1c:	8961      	ldrh	r1, [r4, #10]
10064e1e:	1841      	adds	r1, r0, r1
10064e20:	4628      	mov	r0, r5
10064e22:	4615      	mov	r5, r2
10064e24:	f7ff fd20 	bl	10064868 <GAT_att_clt_prep_wr_cmp_data>
10064e28:	9b06      	ldr	r3, [sp, #24]
10064e2a:	9003      	str	r0, [sp, #12]
10064e2c:	e1c4      	b.n	100651b8 <GAT_clt_rcv+0x4a0>
10064e2e:	4616      	mov	r6, r2
10064e30:	e189      	b.n	10065146 <GAT_clt_rcv+0x42e>
10064e32:	a909      	add	r1, sp, #36	@ 0x24
10064e34:	aa0f      	add	r2, sp, #60	@ 0x3c
10064e36:	ab0e      	add	r3, sp, #56	@ 0x38
10064e38:	4628      	mov	r0, r5
10064e3a:	f7ff fcb1 	bl	100647a0 <GAT_att_clt_parse_error_resp>
10064e3e:	2800      	cmp	r0, #0
10064e40:	d02b      	beq.n	10064e9a <GAT_clt_rcv+0x182>
10064e42:	4628      	mov	r0, r5
10064e44:	f7f0 f822 	bl	10054e8c <ACL_pkt_release>
10064e48:	a80e      	add	r0, sp, #56	@ 0x38
10064e4a:	7800      	ldrb	r0, [r0, #0]
10064e4c:	2812      	cmp	r0, #18
10064e4e:	d108      	bne.n	10064e62 <GAT_clt_rcv+0x14a>
10064e50:	8860      	ldrh	r0, [r4, #2]
10064e52:	2104      	movs	r1, #4
10064e54:	f7f1 fea4 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
10064e58:	8881      	ldrh	r1, [r0, #4]
10064e5a:	2201      	movs	r2, #1
10064e5c:	0252      	lsls	r2, r2, #9
10064e5e:	430a      	orrs	r2, r1
10064e60:	8082      	strh	r2, [r0, #4]
10064e62:	79a0      	ldrb	r0, [r4, #6]
10064e64:	2801      	cmp	r0, #1
10064e66:	d104      	bne.n	10064e72 <GAT_clt_rcv+0x15a>
10064e68:	9b08      	ldr	r3, [sp, #32]
10064e6a:	8899      	ldrh	r1, [r3, #4]
10064e6c:	2204      	movs	r2, #4
10064e6e:	4391      	bics	r1, r2
10064e70:	8099      	strh	r1, [r3, #4]
10064e72:	a90e      	add	r1, sp, #56	@ 0x38
10064e74:	7809      	ldrb	r1, [r1, #0]
10064e76:	290a      	cmp	r1, #10
10064e78:	d008      	beq.n	10064e8c <GAT_clt_rcv+0x174>
10064e7a:	2907      	cmp	r1, #7
10064e7c:	d102      	bne.n	10064e84 <GAT_clt_rcv+0x16c>
10064e7e:	280a      	cmp	r0, #10
10064e80:	d100      	bne.n	10064e84 <GAT_clt_rcv+0x16c>
10064e82:	e775      	b.n	10064d70 <GAT_clt_rcv+0x58>
10064e84:	7821      	ldrb	r1, [r4, #0]
10064e86:	2210      	movs	r2, #16
10064e88:	430a      	orrs	r2, r1
10064e8a:	7022      	strb	r2, [r4, #0]
10064e8c:	280e      	cmp	r0, #14
10064e8e:	d100      	bne.n	10064e92 <GAT_clt_rcv+0x17a>
10064e90:	e771      	b.n	10064d76 <GAT_clt_rcv+0x5e>
10064e92:	2810      	cmp	r0, #16
10064e94:	d100      	bne.n	10064e98 <GAT_clt_rcv+0x180>
10064e96:	e76e      	b.n	10064d76 <GAT_clt_rcv+0x5e>
10064e98:	e76a      	b.n	10064d70 <GAT_clt_rcv+0x58>
10064e9a:	a809      	add	r0, sp, #36	@ 0x24
10064e9c:	7800      	ldrb	r0, [r0, #0]
10064e9e:	9007      	str	r0, [sp, #28]
10064ea0:	88a3      	ldrh	r3, [r4, #4]
10064ea2:	8862      	ldrh	r2, [r4, #2]
10064ea4:	a80f      	add	r0, sp, #60	@ 0x3c
10064ea6:	8800      	ldrh	r0, [r0, #0]
10064ea8:	4621      	mov	r1, r4
10064eaa:	ac0e      	add	r4, sp, #56	@ 0x38
10064eac:	7824      	ldrb	r4, [r4, #0]
10064eae:	9000      	str	r0, [sp, #0]
10064eb0:	9401      	str	r4, [sp, #4]
10064eb2:	460c      	mov	r4, r1
10064eb4:	2002      	movs	r0, #2
10064eb6:	4611      	mov	r1, r2
10064eb8:	461a      	mov	r2, r3
10064eba:	9b07      	ldr	r3, [sp, #28]
10064ebc:	f7fe fc10 	bl	100636e0 <aci_gatt_clt_error_resp_event_push_noinline>
10064ec0:	2800      	cmp	r0, #0
10064ec2:	d0be      	beq.n	10064e42 <GAT_clt_rcv+0x12a>
10064ec4:	4606      	mov	r6, r0
10064ec6:	e13e      	b.n	10065146 <GAT_clt_rcv+0x42e>
10064ec8:	88a2      	ldrh	r2, [r4, #4]
10064eca:	8861      	ldrh	r1, [r4, #2]
10064ecc:	200a      	movs	r0, #10
10064ece:	462b      	mov	r3, r5
10064ed0:	f7fe fe40 	bl	10063b54 <aci_att_clt_read_by_type_resp_event_push_noinline>
10064ed4:	2800      	cmp	r0, #0
10064ed6:	d000      	beq.n	10064eda <GAT_clt_rcv+0x1c2>
10064ed8:	e12f      	b.n	1006513a <GAT_clt_rcv+0x422>
10064eda:	4628      	mov	r0, r5
10064edc:	f7ff fc7a 	bl	100647d4 <GAT_att_clt_read_type_get_last_attr_h>
10064ee0:	e0c8      	b.n	10065074 <GAT_clt_rcv+0x35c>
10064ee2:	88a2      	ldrh	r2, [r4, #4]
10064ee4:	8861      	ldrh	r1, [r4, #2]
10064ee6:	200a      	movs	r0, #10
10064ee8:	2b0b      	cmp	r3, #11
10064eea:	d000      	beq.n	10064eee <GAT_clt_rcv+0x1d6>
10064eec:	e120      	b.n	10065130 <GAT_clt_rcv+0x418>
10064eee:	462b      	mov	r3, r5
10064ef0:	f7fe fec6 	bl	10063c80 <aci_att_clt_read_multiple_resp_event_push_noinline>
10064ef4:	e11f      	b.n	10065136 <GAT_clt_rcv+0x41e>
10064ef6:	88a2      	ldrh	r2, [r4, #4]
10064ef8:	8861      	ldrh	r1, [r4, #2]
10064efa:	2002      	movs	r0, #2
10064efc:	f7fe ff56 	bl	10063dac <aci_att_clt_exec_write_resp_event_push_noinline>
10064f00:	2800      	cmp	r0, #0
10064f02:	d000      	beq.n	10064f06 <GAT_clt_rcv+0x1ee>
10064f04:	e119      	b.n	1006513a <GAT_clt_rcv+0x422>
10064f06:	4628      	mov	r0, r5
10064f08:	f7ef ffc0 	bl	10054e8c <ACL_pkt_release>
10064f0c:	e117      	b.n	1006513e <GAT_clt_rcv+0x426>
10064f0e:	8960      	ldrh	r0, [r4, #10]
10064f10:	2800      	cmp	r0, #0
10064f12:	d100      	bne.n	10064f16 <GAT_clt_rcv+0x1fe>
10064f14:	e113      	b.n	1006513e <GAT_clt_rcv+0x426>
10064f16:	2600      	movs	r6, #0
10064f18:	7226      	strb	r6, [r4, #8]
10064f1a:	200f      	movs	r0, #15
10064f1c:	71a0      	strb	r0, [r4, #6]
10064f1e:	e112      	b.n	10065146 <GAT_clt_rcv+0x42e>
10064f20:	89a8      	ldrh	r0, [r5, #12]
10064f22:	1c40      	adds	r0, r0, #1
10064f24:	b281      	uxth	r1, r0
10064f26:	4628      	mov	r0, r5
10064f28:	f7ef ffd5 	bl	10054ed6 <ACL_pkt_read_16b>
10064f2c:	4606      	mov	r6, r0
10064f2e:	2817      	cmp	r0, #23
10064f30:	d800      	bhi.n	10064f34 <GAT_clt_rcv+0x21c>
10064f32:	2617      	movs	r6, #23
10064f34:	48b3      	ldr	r0, [pc, #716]	@ (10065204 <__arm_cp.4_3>)
10064f36:	8a00      	ldrh	r0, [r0, #16]
10064f38:	4286      	cmp	r6, r0
10064f3a:	9f08      	ldr	r7, [sp, #32]
10064f3c:	d300      	bcc.n	10064f40 <GAT_clt_rcv+0x228>
10064f3e:	4606      	mov	r6, r0
10064f40:	88b8      	ldrh	r0, [r7, #4]
10064f42:	0700      	lsls	r0, r0, #28
10064f44:	d514      	bpl.n	10064f70 <GAT_clt_rcv+0x258>
10064f46:	88f8      	ldrh	r0, [r7, #6]
10064f48:	42b0      	cmp	r0, r6
10064f4a:	d011      	beq.n	10064f70 <GAT_clt_rcv+0x258>
10064f4c:	463b      	mov	r3, r7
10064f4e:	3308      	adds	r3, #8
10064f50:	2042      	movs	r0, #66	@ 0x42
10064f52:	2103      	movs	r1, #3
10064f54:	2202      	movs	r2, #2
10064f56:	f7ff f88d 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
10064f5a:	2800      	cmp	r0, #0
10064f5c:	d000      	beq.n	10064f60 <GAT_clt_rcv+0x248>
10064f5e:	e0ec      	b.n	1006513a <GAT_clt_rcv+0x422>
10064f60:	7820      	ldrb	r0, [r4, #0]
10064f62:	2110      	movs	r1, #16
10064f64:	4301      	orrs	r1, r0
10064f66:	7021      	strb	r1, [r4, #0]
10064f68:	88b8      	ldrh	r0, [r7, #4]
10064f6a:	2108      	movs	r1, #8
10064f6c:	4388      	bics	r0, r1
10064f6e:	80b8      	strh	r0, [r7, #4]
10064f70:	7820      	ldrb	r0, [r4, #0]
10064f72:	06c0      	lsls	r0, r0, #27
10064f74:	d500      	bpl.n	10064f78 <GAT_clt_rcv+0x260>
10064f76:	88fe      	ldrh	r6, [r7, #6]
10064f78:	8861      	ldrh	r1, [r4, #2]
10064f7a:	2002      	movs	r0, #2
10064f7c:	4632      	mov	r2, r6
10064f7e:	f7fe fd49 	bl	10063a14 <aci_att_exchange_mtu_resp_event_push_noinline>
10064f82:	2800      	cmp	r0, #0
10064f84:	d000      	beq.n	10064f88 <GAT_clt_rcv+0x270>
10064f86:	e0d8      	b.n	1006513a <GAT_clt_rcv+0x422>
10064f88:	80fe      	strh	r6, [r7, #6]
10064f8a:	88b8      	ldrh	r0, [r7, #4]
10064f8c:	2108      	movs	r1, #8
10064f8e:	4301      	orrs	r1, r0
10064f90:	2004      	movs	r0, #4
10064f92:	4381      	bics	r1, r0
10064f94:	80b9      	strh	r1, [r7, #4]
10064f96:	4620      	mov	r0, r4
10064f98:	e0dc      	b.n	10065154 <GAT_clt_rcv+0x43c>
10064f9a:	88a2      	ldrh	r2, [r4, #4]
10064f9c:	8861      	ldrh	r1, [r4, #2]
10064f9e:	200a      	movs	r0, #10
10064fa0:	462b      	mov	r3, r5
10064fa2:	f7fe fe9f 	bl	10063ce4 <aci_att_clt_read_by_group_type_resp_event_push_noinline>
10064fa6:	2800      	cmp	r0, #0
10064fa8:	d000      	beq.n	10064fac <GAT_clt_rcv+0x294>
10064faa:	e0c6      	b.n	1006513a <GAT_clt_rcv+0x422>
10064fac:	4628      	mov	r0, r5
10064fae:	f7ff fbc4 	bl	1006473a <GAT_att_clt_read_grp_type_get_last_attr_h>
10064fb2:	e00b      	b.n	10064fcc <GAT_clt_rcv+0x2b4>
10064fb4:	88a2      	ldrh	r2, [r4, #4]
10064fb6:	8861      	ldrh	r1, [r4, #2]
10064fb8:	200a      	movs	r0, #10
10064fba:	462b      	mov	r3, r5
10064fbc:	f7fe fd98 	bl	10063af0 <aci_att_clt_find_by_type_value_resp_event_push_noinline>
10064fc0:	2800      	cmp	r0, #0
10064fc2:	d000      	beq.n	10064fc6 <GAT_clt_rcv+0x2ae>
10064fc4:	e0b9      	b.n	1006513a <GAT_clt_rcv+0x422>
10064fc6:	4628      	mov	r0, r5
10064fc8:	f7ff fbdd 	bl	10064786 <GAT_att_clt_find_type_val_get_last_attr_h>
10064fcc:	498c      	ldr	r1, [pc, #560]	@ (10065200 <__arm_cp.4_2>)
10064fce:	4288      	cmp	r0, r1
10064fd0:	d153      	bne.n	1006507a <GAT_clt_rcv+0x362>
10064fd2:	e0b4      	b.n	1006513e <GAT_clt_rcv+0x426>
10064fd4:	4628      	mov	r0, r5
10064fd6:	f000 fa08 	bl	100653ea <GAT_att_clt_read_type_get_len>
10064fda:	9008      	str	r0, [sp, #32]
10064fdc:	8960      	ldrh	r0, [r4, #10]
10064fde:	a90e      	add	r1, sp, #56	@ 0x38
10064fe0:	8008      	strh	r0, [r1, #0]
10064fe2:	4620      	mov	r0, r4
10064fe4:	300c      	adds	r0, #12
10064fe6:	9007      	str	r0, [sp, #28]
10064fe8:	a809      	add	r0, sp, #36	@ 0x24
10064fea:	300c      	adds	r0, #12
10064fec:	9005      	str	r0, [sp, #20]
10064fee:	a80f      	add	r0, sp, #60	@ 0x3c
10064ff0:	1d40      	adds	r0, r0, #5
10064ff2:	9006      	str	r0, [sp, #24]
10064ff4:	2600      	movs	r6, #0
10064ff6:	b2f7      	uxtb	r7, r6
10064ff8:	aa0f      	add	r2, sp, #60	@ 0x3c
10064ffa:	4628      	mov	r0, r5
10064ffc:	4639      	mov	r1, r7
10064ffe:	f7ff fbfe 	bl	100647fe <GAT_att_clt_read_type_get_data>
10065002:	2800      	cmp	r0, #0
10065004:	d000      	beq.n	10065008 <GAT_clt_rcv+0x2f0>
10065006:	e0a1      	b.n	1006514c <GAT_clt_rcv+0x434>
10065008:	9808      	ldr	r0, [sp, #32]
1006500a:	2807      	cmp	r0, #7
1006500c:	d105      	bne.n	1006501a <GAT_clt_rcv+0x302>
1006500e:	a809      	add	r0, sp, #36	@ 0x24
10065010:	2110      	movs	r1, #16
10065012:	7401      	strb	r1, [r0, #16]
10065014:	2202      	movs	r2, #2
10065016:	9805      	ldr	r0, [sp, #20]
10065018:	e003      	b.n	10065022 <GAT_clt_rcv+0x30a>
1006501a:	a809      	add	r0, sp, #36	@ 0x24
1006501c:	2180      	movs	r1, #128	@ 0x80
1006501e:	7401      	strb	r1, [r0, #16]
10065020:	2210      	movs	r2, #16
10065022:	9906      	ldr	r1, [sp, #24]
10065024:	f7ed fb9a 	bl	1005275c <BLEPLAT_MemCpy>
10065028:	a80e      	add	r0, sp, #56	@ 0x38
1006502a:	a90f      	add	r1, sp, #60	@ 0x3c
1006502c:	2202      	movs	r2, #2
1006502e:	f7ed fb95 	bl	1005275c <BLEPLAT_MemCpy>
10065032:	a809      	add	r0, sp, #36	@ 0x24
10065034:	9907      	ldr	r1, [sp, #28]
10065036:	f7fd fdcf 	bl	10062bd8 <UUID_cmp_128bits>
1006503a:	2800      	cmp	r0, #0
1006503c:	d10d      	bne.n	1006505a <GAT_clt_rcv+0x342>
1006503e:	88a2      	ldrh	r2, [r4, #4]
10065040:	8861      	ldrh	r1, [r4, #2]
10065042:	9808      	ldr	r0, [sp, #32]
10065044:	9000      	str	r0, [sp, #0]
10065046:	9501      	str	r5, [sp, #4]
10065048:	4347      	muls	r7, r0
1006504a:	1cb8      	adds	r0, r7, #2
1006504c:	b283      	uxth	r3, r0
1006504e:	2002      	movs	r0, #2
10065050:	f7fe fb8c 	bl	1006376c <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
10065054:	2800      	cmp	r0, #0
10065056:	d000      	beq.n	1006505a <GAT_clt_rcv+0x342>
10065058:	e082      	b.n	10065160 <GAT_clt_rcv+0x448>
1006505a:	1c76      	adds	r6, r6, #1
1006505c:	e7cb      	b.n	10064ff6 <GAT_clt_rcv+0x2de>
1006505e:	88a2      	ldrh	r2, [r4, #4]
10065060:	8861      	ldrh	r1, [r4, #2]
10065062:	200a      	movs	r0, #10
10065064:	462b      	mov	r3, r5
10065066:	f7fe fd11 	bl	10063a8c <aci_att_clt_find_info_resp_event_push_noinline>
1006506a:	2800      	cmp	r0, #0
1006506c:	d165      	bne.n	1006513a <GAT_clt_rcv+0x422>
1006506e:	4628      	mov	r0, r5
10065070:	f7ff fbe0 	bl	10064834 <GAT_att_clt_find_info_get_last_attr_h>
10065074:	8961      	ldrh	r1, [r4, #10]
10065076:	4288      	cmp	r0, r1
10065078:	d261      	bcs.n	1006513e <GAT_clt_rcv+0x426>
1006507a:	1c40      	adds	r0, r0, #1
1006507c:	8120      	strh	r0, [r4, #8]
1006507e:	e061      	b.n	10065144 <GAT_clt_rcv+0x42c>
10065080:	88a2      	ldrh	r2, [r4, #4]
10065082:	8861      	ldrh	r1, [r4, #2]
10065084:	200a      	movs	r0, #10
10065086:	462b      	mov	r3, r5
10065088:	f7fe fd96 	bl	10063bb8 <aci_att_clt_read_resp_event_push_noinline>
1006508c:	e053      	b.n	10065136 <GAT_clt_rcv+0x41e>
1006508e:	4628      	mov	r0, r5
10065090:	f000 f9ab 	bl	100653ea <GAT_att_clt_read_type_get_len>
10065094:	4606      	mov	r6, r0
10065096:	9406      	str	r4, [sp, #24]
10065098:	8860      	ldrh	r0, [r4, #2]
1006509a:	f7f0 fe6b 	bl	10055d74 <GAP_started_gatt_proc>
1006509e:	9008      	str	r0, [sp, #32]
100650a0:	2402      	movs	r4, #2
100650a2:	8868      	ldrh	r0, [r5, #2]
100650a4:	b2a3      	uxth	r3, r4
100650a6:	4283      	cmp	r3, r0
100650a8:	d253      	bcs.n	10065152 <GAT_clt_rcv+0x43a>
100650aa:	9808      	ldr	r0, [sp, #32]
100650ac:	2801      	cmp	r0, #1
100650ae:	d10e      	bne.n	100650ce <GAT_clt_rcv+0x3b6>
100650b0:	89a8      	ldrh	r0, [r5, #12]
100650b2:	1900      	adds	r0, r0, r4
100650b4:	b281      	uxth	r1, r0
100650b6:	af0f      	add	r7, sp, #60	@ 0x3c
100650b8:	4628      	mov	r0, r5
100650ba:	4632      	mov	r2, r6
100650bc:	463b      	mov	r3, r7
100650be:	f7ef ff01 	bl	10054ec4 <ACL_pkt_read>
100650c2:	205c      	movs	r0, #92	@ 0x5c
100650c4:	4631      	mov	r1, r6
100650c6:	463a      	mov	r2, r7
100650c8:	f7f0 fff0 	bl	100560ac <GAP_internal_evt_handler>
100650cc:	e01a      	b.n	10065104 <GAT_clt_rcv+0x3ec>
100650ce:	9f06      	ldr	r7, [sp, #24]
100650d0:	88ba      	ldrh	r2, [r7, #4]
100650d2:	8879      	ldrh	r1, [r7, #2]
100650d4:	9600      	str	r6, [sp, #0]
100650d6:	9501      	str	r5, [sp, #4]
100650d8:	2002      	movs	r0, #2
100650da:	f7fe fb47 	bl	1006376c <aci_gatt_clt_disc_read_char_by_uuid_resp_event_push_noinline>
100650de:	2800      	cmp	r0, #0
100650e0:	d12b      	bne.n	1006513a <GAT_clt_rcv+0x422>
100650e2:	7f38      	ldrb	r0, [r7, #28]
100650e4:	2810      	cmp	r0, #16
100650e6:	d10d      	bne.n	10065104 <GAT_clt_rcv+0x3ec>
100650e8:	9806      	ldr	r0, [sp, #24]
100650ea:	8b00      	ldrh	r0, [r0, #24]
100650ec:	4942      	ldr	r1, [pc, #264]	@ (100651f8 <__arm_cp.4_0>)
100650ee:	4288      	cmp	r0, r1
100650f0:	d108      	bne.n	10065104 <GAT_clt_rcv+0x3ec>
100650f2:	9806      	ldr	r0, [sp, #24]
100650f4:	8840      	ldrh	r0, [r0, #2]
100650f6:	2104      	movs	r1, #4
100650f8:	f7f1 fd52 	bl	10056ba0 <GAT_att_cmn_get_channel_descr_p>
100650fc:	8881      	ldrh	r1, [r0, #4]
100650fe:	4a3f      	ldr	r2, [pc, #252]	@ (100651fc <__arm_cp.4_1>)
10065100:	4011      	ands	r1, r2
10065102:	8081      	strh	r1, [r0, #4]
10065104:	19a4      	adds	r4, r4, r6
10065106:	e7cc      	b.n	100650a2 <GAT_clt_rcv+0x38a>
10065108:	88a2      	ldrh	r2, [r4, #4]
1006510a:	8861      	ldrh	r1, [r4, #2]
1006510c:	200a      	movs	r0, #10
1006510e:	462b      	mov	r3, r5
10065110:	f7fe fd84 	bl	10063c1c <aci_att_clt_read_blob_resp_event_push_noinline>
10065114:	2800      	cmp	r0, #0
10065116:	d110      	bne.n	1006513a <GAT_clt_rcv+0x422>
10065118:	9808      	ldr	r0, [sp, #32]
1006511a:	88c0      	ldrh	r0, [r0, #6]
1006511c:	1e41      	subs	r1, r0, #1
1006511e:	8868      	ldrh	r0, [r5, #2]
10065120:	1e40      	subs	r0, r0, #1
10065122:	b282      	uxth	r2, r0
10065124:	4291      	cmp	r1, r2
10065126:	d80a      	bhi.n	1006513e <GAT_clt_rcv+0x426>
10065128:	8961      	ldrh	r1, [r4, #10]
1006512a:	1808      	adds	r0, r1, r0
1006512c:	8160      	strh	r0, [r4, #10]
1006512e:	e009      	b.n	10065144 <GAT_clt_rcv+0x42c>
10065130:	462b      	mov	r3, r5
10065132:	f7fe fed9 	bl	10063ee8 <aci_att_clt_read_multiple_var_len_resp_event_push_noinline>
10065136:	2800      	cmp	r0, #0
10065138:	d001      	beq.n	1006513e <GAT_clt_rcv+0x426>
1006513a:	2684      	movs	r6, #132	@ 0x84
1006513c:	e003      	b.n	10065146 <GAT_clt_rcv+0x42e>
1006513e:	4620      	mov	r0, r4
10065140:	f000 f879 	bl	10065236 <GAT_clt_stop_proc>
10065144:	9e07      	ldr	r6, [sp, #28]
10065146:	4630      	mov	r0, r6
10065148:	b015      	add	sp, #84	@ 0x54
1006514a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006514c:	a80e      	add	r0, sp, #56	@ 0x38
1006514e:	8800      	ldrh	r0, [r0, #0]
10065150:	e00a      	b.n	10065168 <GAT_clt_rcv+0x450>
10065152:	9806      	ldr	r0, [sp, #24]
10065154:	f000 f86f 	bl	10065236 <GAT_clt_stop_proc>
10065158:	4628      	mov	r0, r5
1006515a:	f7ef fe97 	bl	10054e8c <ACL_pkt_release>
1006515e:	e7f1      	b.n	10065144 <GAT_clt_rcv+0x42c>
10065160:	980e      	ldr	r0, [sp, #56]	@ 0x38
10065162:	1e40      	subs	r0, r0, #1
10065164:	a90e      	add	r1, sp, #56	@ 0x38
10065166:	8008      	strh	r0, [r1, #0]
10065168:	8961      	ldrh	r1, [r4, #10]
1006516a:	b282      	uxth	r2, r0
1006516c:	428a      	cmp	r2, r1
1006516e:	d202      	bcs.n	10065176 <GAT_clt_rcv+0x45e>
10065170:	1c40      	adds	r0, r0, #1
10065172:	8120      	strh	r0, [r4, #8]
10065174:	e002      	b.n	1006517c <GAT_clt_rcv+0x464>
10065176:	4620      	mov	r0, r4
10065178:	f000 f85d 	bl	10065236 <GAT_clt_stop_proc>
1006517c:	4628      	mov	r0, r5
1006517e:	f7ef fe85 	bl	10054e8c <ACL_pkt_release>
10065182:	2600      	movs	r6, #0
10065184:	e7df      	b.n	10065146 <GAT_clt_rcv+0x42e>
10065186:	8961      	ldrh	r1, [r4, #10]
10065188:	9a08      	ldr	r2, [sp, #32]
1006518a:	89a0      	ldrh	r0, [r4, #12]
1006518c:	1840      	adds	r0, r0, r1
1006518e:	8160      	strh	r0, [r4, #10]
10065190:	b280      	uxth	r0, r0
10065192:	435f      	muls	r7, r3
10065194:	19d1      	adds	r1, r2, r7
10065196:	8889      	ldrh	r1, [r1, #4]
10065198:	4288      	cmp	r0, r1
1006519a:	d1d3      	bne.n	10065144 <GAT_clt_rcv+0x42c>
1006519c:	7a20      	ldrb	r0, [r4, #8]
1006519e:	1e40      	subs	r0, r0, #1
100651a0:	4298      	cmp	r0, r3
100651a2:	d924      	bls.n	100651ee <GAT_clt_rcv+0x4d6>
100651a4:	2600      	movs	r6, #0
100651a6:	8166      	strh	r6, [r4, #10]
100651a8:	7a60      	ldrb	r0, [r4, #9]
100651aa:	1c40      	adds	r0, r0, #1
100651ac:	7260      	strb	r0, [r4, #9]
100651ae:	e7ca      	b.n	10065146 <GAT_clt_rcv+0x42e>
100651b0:	43f0      	mvns	r0, r6
100651b2:	9003      	str	r0, [sp, #12]
100651b4:	9b06      	ldr	r3, [sp, #24]
100651b6:	9d08      	ldr	r5, [sp, #32]
100651b8:	4639      	mov	r1, r7
100651ba:	4359      	muls	r1, r3
100651bc:	5a6a      	ldrh	r2, [r5, r1]
100651be:	4628      	mov	r0, r5
100651c0:	9d05      	ldr	r5, [sp, #20]
100651c2:	4295      	cmp	r5, r2
100651c4:	d10b      	bne.n	100651de <GAT_clt_rcv+0x4c6>
100651c6:	4602      	mov	r2, r0
100651c8:	1841      	adds	r1, r0, r1
100651ca:	884a      	ldrh	r2, [r1, #2]
100651cc:	8961      	ldrh	r1, [r4, #10]
100651ce:	188a      	adds	r2, r1, r2
100651d0:	9d04      	ldr	r5, [sp, #16]
100651d2:	42aa      	cmp	r2, r5
100651d4:	d103      	bne.n	100651de <GAT_clt_rcv+0x4c6>
100651d6:	4602      	mov	r2, r0
100651d8:	9803      	ldr	r0, [sp, #12]
100651da:	2800      	cmp	r0, #0
100651dc:	d0d5      	beq.n	1006518a <GAT_clt_rcv+0x472>
100651de:	7226      	strb	r6, [r4, #8]
100651e0:	200f      	movs	r0, #15
100651e2:	71a0      	strb	r0, [r4, #6]
100651e4:	7820      	ldrb	r0, [r4, #0]
100651e6:	2110      	movs	r1, #16
100651e8:	4301      	orrs	r1, r0
100651ea:	7021      	strb	r1, [r4, #0]
100651ec:	e7ab      	b.n	10065146 <GAT_clt_rcv+0x42e>
100651ee:	2001      	movs	r0, #1
100651f0:	7220      	strb	r0, [r4, #8]
100651f2:	200f      	movs	r0, #15
100651f4:	71a0      	strb	r0, [r4, #6]
100651f6:	e7a5      	b.n	10065144 <GAT_clt_rcv+0x42c>

100651f8 <__arm_cp.4_0>:
100651f8:	00002b2a 	.word	0x00002b2a

100651fc <__arm_cp.4_1>:
100651fc:	0000fdff 	.word	0x0000fdff

10065200 <__arm_cp.4_2>:
10065200:	0000ffff 	.word	0x0000ffff

10065204 <__arm_cp.4_3>:
10065204:	20002ae4 	.word	0x20002ae4

10065208 <GAT_clt_get_proc_per_channel>:
10065208:	4a07      	ldr	r2, [pc, #28]	@ (10065228 <__arm_cp.5_0>)
1006520a:	6812      	ldr	r2, [r2, #0]
1006520c:	3248      	adds	r2, #72	@ 0x48
1006520e:	6812      	ldr	r2, [r2, #0]
10065210:	2a00      	cmp	r2, #0
10065212:	d007      	beq.n	10065224 <GAT_clt_get_proc_per_channel+0x1c>
10065214:	8853      	ldrh	r3, [r2, #2]
10065216:	4283      	cmp	r3, r0
10065218:	d102      	bne.n	10065220 <GAT_clt_get_proc_per_channel+0x18>
1006521a:	8893      	ldrh	r3, [r2, #4]
1006521c:	428b      	cmp	r3, r1
1006521e:	d001      	beq.n	10065224 <GAT_clt_get_proc_per_channel+0x1c>
10065220:	3220      	adds	r2, #32
10065222:	e7f4      	b.n	1006520e <GAT_clt_get_proc_per_channel+0x6>
10065224:	4610      	mov	r0, r2
10065226:	4770      	bx	lr

10065228 <__arm_cp.5_0>:
10065228:	20002a88 	.word	0x20002a88

1006522c <GAT_att_cmn_get_opcode>:
1006522c:	b580      	push	{r7, lr}
1006522e:	8981      	ldrh	r1, [r0, #12]
10065230:	f000 f8cb 	bl	100653ca <ACL_pkt_read_8b>
10065234:	bd80      	pop	{r7, pc}

10065236 <GAT_clt_stop_proc>:
10065236:	b580      	push	{r7, lr}
10065238:	7801      	ldrb	r1, [r0, #0]
1006523a:	2208      	movs	r2, #8
1006523c:	430a      	orrs	r2, r1
1006523e:	7002      	strb	r2, [r0, #0]
10065240:	200c      	movs	r0, #12
10065242:	f7fd fb21 	bl	10062888 <tsk_notify_idx>
10065246:	f7ec fca2 	bl	10051b8e <BLE_STACK_ProcessRequest>
1006524a:	bd80      	pop	{r7, pc}

1006524c <GAT_clt_rcv_corrupted>:
1006524c:	b510      	push	{r4, lr}
1006524e:	8804      	ldrh	r4, [r0, #0]
10065250:	f7f4 fb33 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10065254:	4601      	mov	r1, r0
10065256:	4620      	mov	r0, r4
10065258:	f7ff ffd6 	bl	10065208 <GAT_clt_get_proc_per_channel>
1006525c:	2800      	cmp	r0, #0
1006525e:	d008      	beq.n	10065272 <GAT_clt_rcv_corrupted+0x26>
10065260:	7801      	ldrb	r1, [r0, #0]
10065262:	2218      	movs	r2, #24
10065264:	430a      	orrs	r2, r1
10065266:	7002      	strb	r2, [r0, #0]
10065268:	200c      	movs	r0, #12
1006526a:	f7fd fb0d 	bl	10062888 <tsk_notify_idx>
1006526e:	f7ec fc8e 	bl	10051b8e <BLE_STACK_ProcessRequest>
10065272:	2000      	movs	r0, #0
10065274:	bd10      	pop	{r4, pc}

10065276 <GAT_clt_rcv_srv_initiated>:
10065276:	b5f0      	push	{r4, r5, r6, r7, lr}
10065278:	b085      	sub	sp, #20
1006527a:	4604      	mov	r4, r0
1006527c:	8805      	ldrh	r5, [r0, #0]
1006527e:	8980      	ldrh	r0, [r0, #12]
10065280:	1c46      	adds	r6, r0, #1
10065282:	4620      	mov	r0, r4
10065284:	f7ff ffd2 	bl	1006522c <GAT_att_cmn_get_opcode>
10065288:	2823      	cmp	r0, #35	@ 0x23
1006528a:	d010      	beq.n	100652ae <GAT_clt_rcv_srv_initiated+0x38>
1006528c:	b2b1      	uxth	r1, r6
1006528e:	281b      	cmp	r0, #27
10065290:	d122      	bne.n	100652d8 <GAT_clt_rcv_srv_initiated+0x62>
10065292:	4620      	mov	r0, r4
10065294:	f7ef fe1f 	bl	10054ed6 <ACL_pkt_read_16b>
10065298:	4601      	mov	r1, r0
1006529a:	4628      	mov	r0, r5
1006529c:	f000 f85c 	bl	10065358 <GAT_clt_check_security>
100652a0:	2800      	cmp	r0, #0
100652a2:	d03d      	beq.n	10065320 <GAT_clt_rcv_srv_initiated+0xaa>
100652a4:	4620      	mov	r0, r4
100652a6:	f7ef fdf1 	bl	10054e8c <ACL_pkt_release>
100652aa:	2500      	movs	r5, #0
100652ac:	e050      	b.n	10065350 <GAT_clt_rcv_srv_initiated+0xda>
100652ae:	8867      	ldrh	r7, [r4, #2]
100652b0:	b2b1      	uxth	r1, r6
100652b2:	4620      	mov	r0, r4
100652b4:	42b9      	cmp	r1, r7
100652b6:	d22a      	bcs.n	1006530e <GAT_clt_rcv_srv_initiated+0x98>
100652b8:	f7ef fe0d 	bl	10054ed6 <ACL_pkt_read_16b>
100652bc:	4601      	mov	r1, r0
100652be:	4628      	mov	r0, r5
100652c0:	f000 f84a 	bl	10065358 <GAT_clt_check_security>
100652c4:	2800      	cmp	r0, #0
100652c6:	d1ed      	bne.n	100652a4 <GAT_clt_rcv_srv_initiated+0x2e>
100652c8:	1cb0      	adds	r0, r6, #2
100652ca:	b281      	uxth	r1, r0
100652cc:	4620      	mov	r0, r4
100652ce:	f7ef fe02 	bl	10054ed6 <ACL_pkt_read_16b>
100652d2:	1830      	adds	r0, r6, r0
100652d4:	1d06      	adds	r6, r0, #4
100652d6:	e7eb      	b.n	100652b0 <GAT_clt_rcv_srv_initiated+0x3a>
100652d8:	4620      	mov	r0, r4
100652da:	f7ef fdfc 	bl	10054ed6 <ACL_pkt_read_16b>
100652de:	4601      	mov	r1, r0
100652e0:	4628      	mov	r0, r5
100652e2:	f000 f839 	bl	10065358 <GAT_clt_check_security>
100652e6:	2800      	cmp	r0, #0
100652e8:	d024      	beq.n	10065334 <GAT_clt_rcv_srv_initiated+0xbe>
100652ea:	466e      	mov	r6, sp
100652ec:	8075      	strh	r5, [r6, #2]
100652ee:	4620      	mov	r0, r4
100652f0:	f7f4 fae3 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
100652f4:	80b0      	strh	r0, [r6, #4]
100652f6:	201e      	movs	r0, #30
100652f8:	7030      	strb	r0, [r6, #0]
100652fa:	4630      	mov	r0, r6
100652fc:	f7ff f860 	bl	100643c0 <GAT_att_clt_tx>
10065300:	4605      	mov	r5, r0
10065302:	2800      	cmp	r0, #0
10065304:	d120      	bne.n	10065348 <GAT_clt_rcv_srv_initiated+0xd2>
10065306:	4620      	mov	r0, r4
10065308:	f7ef fdc0 	bl	10054e8c <ACL_pkt_release>
1006530c:	e01c      	b.n	10065348 <GAT_clt_rcv_srv_initiated+0xd2>
1006530e:	f7f4 fad4 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10065312:	4602      	mov	r2, r0
10065314:	200a      	movs	r0, #10
10065316:	4629      	mov	r1, r5
10065318:	4623      	mov	r3, r4
1006531a:	f7fe fb49 	bl	100639b0 <aci_gatt_clt_multi_notification_int_event_push_noinline>
1006531e:	e012      	b.n	10065346 <GAT_clt_rcv_srv_initiated+0xd0>
10065320:	4620      	mov	r0, r4
10065322:	f7f4 faca 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
10065326:	4602      	mov	r2, r0
10065328:	200a      	movs	r0, #10
1006532a:	4629      	mov	r1, r5
1006532c:	4623      	mov	r3, r4
1006532e:	f7fe f9a5 	bl	1006367c <aci_gatt_clt_notification_event_push_noinline>
10065332:	e008      	b.n	10065346 <GAT_clt_rcv_srv_initiated+0xd0>
10065334:	4620      	mov	r0, r4
10065336:	f7f4 fac0 	bl	100598ba <L2C_get_cid_from_basic_packet_header>
1006533a:	4602      	mov	r2, r0
1006533c:	200a      	movs	r0, #10
1006533e:	4629      	mov	r1, r5
10065340:	4623      	mov	r3, r4
10065342:	f7fe f969 	bl	10063618 <aci_gatt_clt_indication_event_push_noinline>
10065346:	4605      	mov	r5, r0
10065348:	2d00      	cmp	r5, #0
1006534a:	d001      	beq.n	10065350 <GAT_clt_rcv_srv_initiated+0xda>
1006534c:	207b      	movs	r0, #123	@ 0x7b
1006534e:	43c5      	mvns	r5, r0
10065350:	b2e8      	uxtb	r0, r5
10065352:	b005      	add	sp, #20
10065354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10065358 <GAT_clt_check_security>:
10065358:	b5bf      	push	{r0, r1, r2, r3, r4, r5, r7, lr}
1006535a:	4604      	mov	r4, r0
1006535c:	f000 f822 	bl	100653a4 <GAT_clt_find_sec_level_entry_p>
10065360:	4605      	mov	r5, r0
10065362:	2800      	cmp	r0, #0
10065364:	d106      	bne.n	10065374 <GAT_clt_check_security+0x1c>
10065366:	480e      	ldr	r0, [pc, #56]	@ (100653a0 <__arm_cp.13_0>)
10065368:	4601      	mov	r1, r0
1006536a:	f000 f81b 	bl	100653a4 <GAT_clt_find_sec_level_entry_p>
1006536e:	4605      	mov	r5, r0
10065370:	2800      	cmp	r0, #0
10065372:	d002      	beq.n	1006537a <GAT_clt_check_security+0x22>
10065374:	7828      	ldrb	r0, [r5, #0]
10065376:	2802      	cmp	r0, #2
10065378:	d201      	bcs.n	1006537e <GAT_clt_check_security+0x26>
1006537a:	2000      	movs	r0, #0
1006537c:	e00d      	b.n	1006539a <GAT_clt_check_security+0x42>
1006537e:	a903      	add	r1, sp, #12
10065380:	aa02      	add	r2, sp, #8
10065382:	ab01      	add	r3, sp, #4
10065384:	4620      	mov	r0, r4
10065386:	f7fd f8a6 	bl	100624d6 <smp_sap_get_security_level>
1006538a:	2800      	cmp	r0, #0
1006538c:	d104      	bne.n	10065398 <GAT_clt_check_security+0x40>
1006538e:	7828      	ldrb	r0, [r5, #0]
10065390:	a902      	add	r1, sp, #8
10065392:	7809      	ldrb	r1, [r1, #0]
10065394:	4281      	cmp	r1, r0
10065396:	d2f0      	bcs.n	1006537a <GAT_clt_check_security+0x22>
10065398:	20c0      	movs	r0, #192	@ 0xc0
1006539a:	b004      	add	sp, #16
1006539c:	bdb0      	pop	{r4, r5, r7, pc}
1006539e:	46c0      	nop			@ (mov r8, r8)

100653a0 <__arm_cp.13_0>:
100653a0:	0000ffff 	.word	0x0000ffff

100653a4 <GAT_clt_find_sec_level_entry_p>:
100653a4:	4a07      	ldr	r2, [pc, #28]	@ (100653c4 <__arm_cp.15_0>)
100653a6:	6812      	ldr	r2, [r2, #0]
100653a8:	3258      	adds	r2, #88	@ 0x58
100653aa:	6812      	ldr	r2, [r2, #0]
100653ac:	2a00      	cmp	r2, #0
100653ae:	d007      	beq.n	100653c0 <GAT_clt_find_sec_level_entry_p+0x1c>
100653b0:	8893      	ldrh	r3, [r2, #4]
100653b2:	4283      	cmp	r3, r0
100653b4:	d102      	bne.n	100653bc <GAT_clt_find_sec_level_entry_p+0x18>
100653b6:	8853      	ldrh	r3, [r2, #2]
100653b8:	428b      	cmp	r3, r1
100653ba:	d001      	beq.n	100653c0 <GAT_clt_find_sec_level_entry_p+0x1c>
100653bc:	3208      	adds	r2, #8
100653be:	e7f4      	b.n	100653aa <GAT_clt_find_sec_level_entry_p+0x6>
100653c0:	4610      	mov	r0, r2
100653c2:	4770      	bx	lr

100653c4 <__arm_cp.15_0>:
100653c4:	20002a88 	.word	0x20002a88

100653c8 <GAT_clt_exec_empty>:
100653c8:	4770      	bx	lr

100653ca <ACL_pkt_read_8b>:
100653ca:	b51c      	push	{r2, r3, r4, lr}
100653cc:	291f      	cmp	r1, #31
100653ce:	d803      	bhi.n	100653d8 <ACL_pkt_read_8b+0xe>
100653d0:	aa01      	add	r2, sp, #4
100653d2:	8011      	strh	r1, [r2, #0]
100653d4:	6840      	ldr	r0, [r0, #4]
100653d6:	e005      	b.n	100653e4 <ACL_pkt_read_8b+0x1a>
100653d8:	6840      	ldr	r0, [r0, #4]
100653da:	ac01      	add	r4, sp, #4
100653dc:	4622      	mov	r2, r4
100653de:	f7fb fd1c 	bl	10060e1a <Mem_Buff_get_buff_off>
100653e2:	8821      	ldrh	r1, [r4, #0]
100653e4:	1840      	adds	r0, r0, r1
100653e6:	7900      	ldrb	r0, [r0, #4]
100653e8:	bd1c      	pop	{r2, r3, r4, pc}

100653ea <GAT_att_clt_read_type_get_len>:
100653ea:	b580      	push	{r7, lr}
100653ec:	8981      	ldrh	r1, [r0, #12]
100653ee:	1c49      	adds	r1, r1, #1
100653f0:	b289      	uxth	r1, r1
100653f2:	f7ff ffea 	bl	100653ca <ACL_pkt_read_8b>
100653f6:	bd80      	pop	{r7, pc}

100653f8 <L2C_cos_process_cfc_mode_command_ucfg_weak>:
100653f8:	2000      	movs	r0, #0
100653fa:	4770      	bx	lr

100653fc <L2C_cos_is_pdu_cframe_cfc_command_opcode_ucfg_weak>:
100653fc:	2000      	movs	r0, #0
100653fe:	4770      	bx	lr

10065400 <l2c_cos_hndl_incoming_le_frame_ucfg_weak>:
10065400:	b580      	push	{r7, lr}
10065402:	6841      	ldr	r1, [r0, #4]
10065404:	7800      	ldrb	r0, [r0, #0]
10065406:	f7f4 fa53 	bl	100598b0 <l2c_release_unexpected_acl_packet>
1006540a:	2000      	movs	r0, #0
1006540c:	bd80      	pop	{r7, pc}

1006540e <l2c_cos_sdu_reassembly_tsk_ucfg_weak>:
1006540e:	4770      	bx	lr

10065410 <llc_big_brc_mem_alloc_ucfg_weak>:
10065410:	4770      	bx	lr

10065412 <llc_big_sync_mem_alloc_ucfg_weak>:
10065412:	4770      	bx	lr

10065414 <llc_cig_cmn_mem_alloc_ucfg_weak>:
10065414:	4770      	bx	lr

10065416 <llc_conn_cancel_slot>:
10065416:	b570      	push	{r4, r5, r6, lr}
10065418:	4604      	mov	r4, r0
1006541a:	2030      	movs	r0, #48	@ 0x30
1006541c:	5c25      	ldrb	r5, [r4, r0]
1006541e:	8f60      	ldrh	r0, [r4, #58]	@ 0x3a
10065420:	f7f4 fe03 	bl	1005a02a <llc_cig_cmn_terminate_cises_on_acl_ucfg_weak>
10065424:	20ff      	movs	r0, #255	@ 0xff
10065426:	3012      	adds	r0, #18
10065428:	1826      	adds	r6, r4, r0
1006542a:	4628      	mov	r0, r5
1006542c:	f7f6 fbbc 	bl	1005bba8 <llc_pscan_wr_check_pawr_active_ucfg_weak>
10065430:	2800      	cmp	r0, #0
10065432:	d004      	beq.n	1006543e <llc_conn_cancel_slot+0x28>
10065434:	3430      	adds	r4, #48	@ 0x30
10065436:	7c60      	ldrb	r0, [r4, #17]
10065438:	2101      	movs	r1, #1
1006543a:	f7fb fa69 	bl	10060910 <LL_sched_set_per_state>
1006543e:	2000      	movs	r0, #0
10065440:	7030      	strb	r0, [r6, #0]
10065442:	2015      	movs	r0, #21
10065444:	f7fd fa20 	bl	10062888 <tsk_notify_idx>
10065448:	f7ec fba1 	bl	10051b8e <BLE_STACK_ProcessRequest>
1006544c:	bd70      	pop	{r4, r5, r6, pc}

1006544e <llc_conn_program_slot>:
1006544e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
10065450:	4604      	mov	r4, r0
10065452:	f7ee fae8 	bl	10053a26 <BLEPLAT_CNTR_PacketGetDataPtr>
10065456:	4605      	mov	r5, r0
10065458:	2101      	movs	r1, #1
1006545a:	4620      	mov	r0, r4
1006545c:	f7f5 f886 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
10065460:	4626      	mov	r6, r4
10065462:	362c      	adds	r6, #44	@ 0x2c
10065464:	4621      	mov	r1, r4
10065466:	3128      	adds	r1, #40	@ 0x28
10065468:	428d      	cmp	r5, r1
1006546a:	d010      	beq.n	1006548e <llc_conn_program_slot+0x40>
1006546c:	4285      	cmp	r5, r0
1006546e:	d00e      	beq.n	1006548e <llc_conn_program_slot+0x40>
10065470:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
10065472:	4620      	mov	r0, r4
10065474:	f7f4 ffce 	bl	1005a414 <llc_conn_copy_tx_data_packet>
10065478:	2101      	movs	r1, #1
1006547a:	4620      	mov	r0, r4
1006547c:	f7f5 f87c 	bl	1005a578 <llc_conn_get_enc_on>
10065480:	2801      	cmp	r0, #1
10065482:	d104      	bne.n	1006548e <llc_conn_program_slot+0x40>
10065484:	7868      	ldrb	r0, [r5, #1]
10065486:	2800      	cmp	r0, #0
10065488:	d001      	beq.n	1006548e <llc_conn_program_slot+0x40>
1006548a:	1d00      	adds	r0, r0, #4
1006548c:	7068      	strb	r0, [r5, #1]
1006548e:	4625      	mov	r5, r4
10065490:	35d0      	adds	r5, #208	@ 0xd0
10065492:	7830      	ldrb	r0, [r6, #0]
10065494:	2803      	cmp	r0, #3
10065496:	d113      	bne.n	100654c0 <llc_conn_program_slot+0x72>
10065498:	a801      	add	r0, sp, #4
1006549a:	f7fb f837 	bl	1006050c <LL_sched_anchorstretch>
1006549e:	2801      	cmp	r0, #1
100654a0:	d006      	beq.n	100654b0 <llc_conn_program_slot+0x62>
100654a2:	2800      	cmp	r0, #0
100654a4:	d10a      	bne.n	100654bc <llc_conn_program_slot+0x6e>
100654a6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
100654a8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
100654aa:	0049      	lsls	r1, r1, #1
100654ac:	1808      	adds	r0, r1, r0
100654ae:	e006      	b.n	100654be <llc_conn_program_slot+0x70>
100654b0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
100654b2:	9801      	ldr	r0, [sp, #4]
100654b4:	4288      	cmp	r0, r1
100654b6:	d302      	bcc.n	100654be <llc_conn_program_slot+0x70>
100654b8:	4608      	mov	r0, r1
100654ba:	e000      	b.n	100654be <llc_conn_program_slot+0x70>
100654bc:	6d20      	ldr	r0, [r4, #80]	@ 0x50
100654be:	6068      	str	r0, [r5, #4]
100654c0:	4620      	mov	r0, r4
100654c2:	f7f5 f887 	bl	1005a5d4 <llc_conn_guard_time_for_close_conn_event>
100654c6:	4620      	mov	r0, r4
100654c8:	f7f6 f948 	bl	1005b75c <llc_conn_update_receive_window>
100654cc:	6829      	ldr	r1, [r5, #0]
100654ce:	3414      	adds	r4, #20
100654d0:	4620      	mov	r0, r4
100654d2:	f7ee fbf0 	bl	10053cb6 <BLEPLAT_CNTR_SetRcvLen>
100654d6:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

100654d8 <llc_conn_skip_slot>:
100654d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100654da:	b089      	sub	sp, #36	@ 0x24
100654dc:	2242      	movs	r2, #66	@ 0x42
100654de:	5a85      	ldrh	r5, [r0, r2]
100654e0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
100654e2:	9201      	str	r2, [sp, #4]
100654e4:	1851      	adds	r1, r2, r1
100654e6:	9106      	str	r1, [sp, #24]
100654e8:	2191      	movs	r1, #145	@ 0x91
100654ea:	0049      	lsls	r1, r1, #1
100654ec:	1841      	adds	r1, r0, r1
100654ee:	9102      	str	r1, [sp, #8]
100654f0:	4601      	mov	r1, r0
100654f2:	3142      	adds	r1, #66	@ 0x42
100654f4:	9105      	str	r1, [sp, #20]
100654f6:	4601      	mov	r1, r0
100654f8:	312d      	adds	r1, #45	@ 0x2d
100654fa:	9103      	str	r1, [sp, #12]
100654fc:	9007      	str	r0, [sp, #28]
100654fe:	309a      	adds	r0, #154	@ 0x9a
10065500:	9004      	str	r0, [sp, #16]
10065502:	2000      	movs	r0, #0
10065504:	9008      	str	r0, [sp, #32]
10065506:	b2a9      	uxth	r1, r5
10065508:	2201      	movs	r2, #1
1006550a:	9e07      	ldr	r6, [sp, #28]
1006550c:	4630      	mov	r0, r6
1006550e:	f7f5 fb06 	bl	1005ab1e <llc_conn_calc_skip_ucfg_weak>
10065512:	6cf1      	ldr	r1, [r6, #76]	@ 0x4c
10065514:	4341      	muls	r1, r0
10065516:	6c72      	ldr	r2, [r6, #68]	@ 0x44
10065518:	1854      	adds	r4, r2, r1
1006551a:	6474      	str	r4, [r6, #68]	@ 0x44
1006551c:	9908      	ldr	r1, [sp, #32]
1006551e:	1841      	adds	r1, r0, r1
10065520:	9108      	str	r1, [sp, #32]
10065522:	182d      	adds	r5, r5, r0
10065524:	b2af      	uxth	r7, r5
10065526:	4630      	mov	r0, r6
10065528:	4639      	mov	r1, r7
1006552a:	f7f5 fb9b 	bl	1005ac64 <llc_conn_check_instant_and_set_params>
1006552e:	4606      	mov	r6, r0
10065530:	2800      	cmp	r0, #0
10065532:	d102      	bne.n	1006553a <llc_conn_skip_slot+0x62>
10065534:	9806      	ldr	r0, [sp, #24]
10065536:	1a20      	subs	r0, r4, r0
10065538:	d4e5      	bmi.n	10065506 <llc_conn_skip_slot+0x2e>
1006553a:	9c05      	ldr	r4, [sp, #20]
1006553c:	8820      	ldrh	r0, [r4, #0]
1006553e:	42b8      	cmp	r0, r7
10065540:	d907      	bls.n	10065552 <llc_conn_skip_slot+0x7a>
10065542:	2009      	movs	r0, #9
10065544:	0140      	lsls	r0, r0, #5
10065546:	9907      	ldr	r1, [sp, #28]
10065548:	1809      	adds	r1, r1, r0
1006554a:	9802      	ldr	r0, [sp, #8]
1006554c:	8800      	ldrh	r0, [r0, #0]
1006554e:	f7f6 fb81 	bl	1005bc54 <llc_subrate_new_sr_base_event_ucfg_weak>
10065552:	8025      	strh	r5, [r4, #0]
10065554:	2e00      	cmp	r6, #0
10065556:	9d08      	ldr	r5, [sp, #32]
10065558:	d118      	bne.n	1006558c <llc_conn_skip_slot+0xb4>
1006555a:	9807      	ldr	r0, [sp, #28]
1006555c:	6c41      	ldr	r1, [r0, #68]	@ 0x44
1006555e:	9a01      	ldr	r2, [sp, #4]
10065560:	1a8f      	subs	r7, r1, r2
10065562:	4639      	mov	r1, r7
10065564:	f7f5 fc12 	bl	1005ad8c <llc_conn_check_supervision_timer>
10065568:	4606      	mov	r6, r0
1006556a:	2800      	cmp	r0, #0
1006556c:	d10e      	bne.n	1006558c <llc_conn_skip_slot+0xb4>
1006556e:	9807      	ldr	r0, [sp, #28]
10065570:	4639      	mov	r1, r7
10065572:	f7f5 fb41 	bl	1005abf8 <llc_conn_check_ctrl_proc_rsp_timer>
10065576:	4606      	mov	r6, r0
10065578:	2800      	cmp	r0, #0
1006557a:	d107      	bne.n	1006558c <llc_conn_skip_slot+0xb4>
1006557c:	9807      	ldr	r0, [sp, #28]
1006557e:	4639      	mov	r1, r7
10065580:	462a      	mov	r2, r5
10065582:	f7f6 f875 	bl	1005b670 <llc_conn_set_taskslot_params>
10065586:	4606      	mov	r6, r0
10065588:	2800      	cmp	r0, #0
1006558a:	d007      	beq.n	1006559c <llc_conn_skip_slot+0xc4>
1006558c:	9c03      	ldr	r4, [sp, #12]
1006558e:	7d20      	ldrb	r0, [r4, #20]
10065590:	f7fb f9b4 	bl	100608fc <LL_sched_delete_taskslot>
10065594:	7026      	strb	r6, [r4, #0]
10065596:	2000      	movs	r0, #0
10065598:	9904      	ldr	r1, [sp, #16]
1006559a:	8008      	strh	r0, [r1, #0]
1006559c:	4628      	mov	r0, r5
1006559e:	b009      	add	sp, #36	@ 0x24
100655a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

100655a4 <llc_conn_isr>:
100655a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100655a6:	b099      	sub	sp, #100	@ 0x64
100655a8:	4607      	mov	r7, r0
100655aa:	8e40      	ldrh	r0, [r0, #50]	@ 0x32
100655ac:	1c40      	adds	r0, r0, #1
100655ae:	8678      	strh	r0, [r7, #50]	@ 0x32
100655b0:	2041      	movs	r0, #65	@ 0x41
100655b2:	5c3d      	ldrb	r5, [r7, r0]
100655b4:	202d      	movs	r0, #45	@ 0x2d
100655b6:	5c38      	ldrb	r0, [r7, r0]
100655b8:	2800      	cmp	r0, #0
100655ba:	d008      	beq.n	100655ce <llc_conn_isr+0x2a>
100655bc:	f7ed f9da 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
100655c0:	4628      	mov	r0, r5
100655c2:	f7fb f99b 	bl	100608fc <LL_sched_delete_taskslot>
100655c6:	4628      	mov	r0, r5
100655c8:	f7fa ffa8 	bl	1006051c <LL_sched_engine>
100655cc:	e2a5      	b.n	10065b1a <__arm_cp.0_5+0x182>
100655ce:	2021      	movs	r0, #33	@ 0x21
100655d0:	00c0      	lsls	r0, r0, #3
100655d2:	183e      	adds	r6, r7, r0
100655d4:	4638      	mov	r0, r7
100655d6:	302c      	adds	r0, #44	@ 0x2c
100655d8:	900d      	str	r0, [sp, #52]	@ 0x34
100655da:	463c      	mov	r4, r7
100655dc:	3480      	adds	r4, #128	@ 0x80
100655de:	4638      	mov	r0, r7
100655e0:	30d0      	adds	r0, #208	@ 0xd0
100655e2:	9007      	str	r0, [sp, #28]
100655e4:	48ea      	ldr	r0, [pc, #936]	@ (10065990 <__arm_cp.0_3>)
100655e6:	6800      	ldr	r0, [r0, #0]
100655e8:	f7ee f9e0 	bl	100539ac <BLEPLAT_CNTR_IntGetIntStatusTxDone>
100655ec:	9009      	str	r0, [sp, #36]	@ 0x24
100655ee:	2800      	cmp	r0, #0
100655f0:	940b      	str	r4, [sp, #44]	@ 0x2c
100655f2:	960a      	str	r6, [sp, #40]	@ 0x28
100655f4:	9508      	str	r5, [sp, #32]
100655f6:	d040      	beq.n	1006567a <llc_conn_isr+0xd6>
100655f8:	463e      	mov	r6, r7
100655fa:	3614      	adds	r6, #20
100655fc:	4630      	mov	r0, r6
100655fe:	f7ee fa05 	bl	10053a0c <BLEPLAT_CNTR_PacketClrPllTrig>
10065602:	4630      	mov	r0, r6
10065604:	f7ee f9f6 	bl	100539f4 <BLEPLAT_CNTR_PacketClrIncChan>
10065608:	4620      	mov	r0, r4
1006560a:	3008      	adds	r0, #8
1006560c:	900c      	str	r0, [sp, #48]	@ 0x30
1006560e:	7a20      	ldrb	r0, [r4, #8]
10065610:	0780      	lsls	r0, r0, #30
10065612:	d445      	bmi.n	100656a0 <llc_conn_isr+0xfc>
10065614:	4638      	mov	r0, r7
10065616:	f7ee fa06 	bl	10053a26 <BLEPLAT_CNTR_PacketGetDataPtr>
1006561a:	4605      	mov	r5, r0
1006561c:	463c      	mov	r4, r7
1006561e:	3428      	adds	r4, #40	@ 0x28
10065620:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065622:	7800      	ldrb	r0, [r0, #0]
10065624:	2100      	movs	r1, #0
10065626:	9106      	str	r1, [sp, #24]
10065628:	2803      	cmp	r0, #3
1006562a:	d000      	beq.n	1006562e <llc_conn_isr+0x8a>
1006562c:	e0a6      	b.n	1006577c <llc_conn_isr+0x1d8>
1006562e:	4630      	mov	r0, r6
10065630:	f7ee f9f9 	bl	10053a26 <BLEPLAT_CNTR_PacketGetDataPtr>
10065634:	4603      	mov	r3, r0
10065636:	42a5      	cmp	r5, r4
10065638:	d015      	beq.n	10065666 <llc_conn_isr+0xc2>
1006563a:	7829      	ldrb	r1, [r5, #0]
1006563c:	2003      	movs	r0, #3
1006563e:	460a      	mov	r2, r1
10065640:	4002      	ands	r2, r0
10065642:	2a03      	cmp	r2, #3
10065644:	d10a      	bne.n	1006565c <llc_conn_isr+0xb8>
10065646:	0689      	lsls	r1, r1, #26
10065648:	d400      	bmi.n	1006564c <llc_conn_isr+0xa8>
1006564a:	2002      	movs	r0, #2
1006564c:	5c28      	ldrb	r0, [r5, r0]
1006564e:	2806      	cmp	r0, #6
10065650:	d104      	bne.n	1006565c <llc_conn_isr+0xb8>
10065652:	4638      	mov	r0, r7
10065654:	9305      	str	r3, [sp, #20]
10065656:	f7f4 fec5 	bl	1005a3e4 <llc_conn_clr_rx_acl_blocked>
1006565a:	9b05      	ldr	r3, [sp, #20]
1006565c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1006565e:	6810      	ldr	r0, [r2, #0]
10065660:	2140      	movs	r1, #64	@ 0x40
10065662:	4301      	orrs	r1, r0
10065664:	6011      	str	r1, [r2, #0]
10065666:	7818      	ldrb	r0, [r3, #0]
10065668:	7829      	ldrb	r1, [r5, #0]
1006566a:	4301      	orrs	r1, r0
1006566c:	06c8      	lsls	r0, r1, #27
1006566e:	d474      	bmi.n	1006575a <llc_conn_isr+0x1b6>
10065670:	980c      	ldr	r0, [sp, #48]	@ 0x30
10065672:	7800      	ldrb	r0, [r0, #0]
10065674:	06c0      	lsls	r0, r0, #27
10065676:	d57d      	bpl.n	10065774 <llc_conn_isr+0x1d0>
10065678:	e080      	b.n	1006577c <llc_conn_isr+0x1d8>
1006567a:	4638      	mov	r0, r7
1006567c:	f7ee f9c6 	bl	10053a0c <BLEPLAT_CNTR_PacketClrPllTrig>
10065680:	4638      	mov	r0, r7
10065682:	f7ee f9b7 	bl	100539f4 <BLEPLAT_CNTR_PacketClrIncChan>
10065686:	a80e      	add	r0, sp, #56	@ 0x38
10065688:	2600      	movs	r6, #0
1006568a:	7786      	strb	r6, [r0, #30]
1006568c:	7606      	strb	r6, [r0, #24]
1006568e:	7746      	strb	r6, [r0, #29]
10065690:	4cbf      	ldr	r4, [pc, #764]	@ (10065990 <__arm_cp.0_3>)
10065692:	6820      	ldr	r0, [r4, #0]
10065694:	f7ee f97e 	bl	10053994 <BLEPLAT_CNTR_IntGetIntStatusTimeout>
10065698:	2800      	cmp	r0, #0
1006569a:	d010      	beq.n	100656be <llc_conn_isr+0x11a>
1006569c:	2501      	movs	r5, #1
1006569e:	e014      	b.n	100656ca <llc_conn_isr+0x126>
100656a0:	463d      	mov	r5, r7
100656a2:	35a8      	adds	r5, #168	@ 0xa8
100656a4:	f7ed f966 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
100656a8:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
100656aa:	7d70      	ldrb	r0, [r6, #21]
100656ac:	f7fb f926 	bl	100608fc <LL_sched_delete_taskslot>
100656b0:	2000      	movs	r0, #0
100656b2:	8028      	strh	r0, [r5, #0]
100656b4:	2113      	movs	r1, #19
100656b6:	7071      	strb	r1, [r6, #1]
100656b8:	8360      	strh	r0, [r4, #26]
100656ba:	4634      	mov	r4, r6
100656bc:	e1e5      	b.n	10065a8a <__arm_cp.0_5+0xf2>
100656be:	6820      	ldr	r0, [r4, #0]
100656c0:	f7ee f921 	bl	10053906 <BLEPLAT_CNTR_IntGetIntStatusLenErr>
100656c4:	4605      	mov	r5, r0
100656c6:	1e40      	subs	r0, r0, #1
100656c8:	4185      	sbcs	r5, r0
100656ca:	a80e      	add	r0, sp, #56	@ 0x38
100656cc:	76c5      	strb	r5, [r0, #27]
100656ce:	6820      	ldr	r0, [r4, #0]
100656d0:	f7ee f977 	bl	100539c2 <BLEPLAT_CNTR_IntGetIntStatusTxOk>
100656d4:	9006      	str	r0, [sp, #24]
100656d6:	900f      	str	r0, [sp, #60]	@ 0x3c
100656d8:	2d00      	cmp	r5, #0
100656da:	d01f      	beq.n	1006571c <llc_conn_isr+0x178>
100656dc:	f7ed f94a 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
100656e0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
100656e2:	68e8      	ldr	r0, [r5, #12]
100656e4:	2800      	cmp	r0, #0
100656e6:	d002      	beq.n	100656ee <llc_conn_isr+0x14a>
100656e8:	88c1      	ldrh	r1, [r0, #6]
100656ea:	1c49      	adds	r1, r1, #1
100656ec:	80c1      	strh	r1, [r0, #6]
100656ee:	6928      	ldr	r0, [r5, #16]
100656f0:	2800      	cmp	r0, #0
100656f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
100656f4:	9e06      	ldr	r6, [sp, #24]
100656f6:	d00a      	beq.n	1006570e <llc_conn_isr+0x16a>
100656f8:	980d      	ldr	r0, [sp, #52]	@ 0x34
100656fa:	7d40      	ldrb	r0, [r0, #21]
100656fc:	f7ee fbd4 	bl	10053ea8 <BLEPLAT_CNTR_SmGetRemapChan>
10065700:	0040      	lsls	r0, r0, #1
10065702:	6929      	ldr	r1, [r5, #16]
10065704:	1808      	adds	r0, r1, r0
10065706:	2194      	movs	r1, #148	@ 0x94
10065708:	5a42      	ldrh	r2, [r0, r1]
1006570a:	1c52      	adds	r2, r2, #1
1006570c:	5242      	strh	r2, [r0, r1]
1006570e:	a80e      	add	r0, sp, #56	@ 0x38
10065710:	2501      	movs	r5, #1
10065712:	7605      	strb	r5, [r0, #24]
10065714:	68a0      	ldr	r0, [r4, #8]
10065716:	3408      	adds	r4, #8
10065718:	2300      	movs	r3, #0
1006571a:	e0b9      	b.n	10065890 <llc_conn_isr+0x2ec>
1006571c:	6820      	ldr	r0, [r4, #0]
1006571e:	f7ee f92e 	bl	1005397e <BLEPLAT_CNTR_IntGetIntStatusRxOk>
10065722:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
10065724:	7a11      	ldrb	r1, [r2, #8]
10065726:	094b      	lsrs	r3, r1, #5
10065728:	2501      	movs	r5, #1
1006572a:	4629      	mov	r1, r5
1006572c:	4399      	bics	r1, r3
1006572e:	ab0e      	add	r3, sp, #56	@ 0x38
10065730:	7699      	strb	r1, [r3, #26]
10065732:	9005      	str	r0, [sp, #20]
10065734:	900e      	str	r0, [sp, #56]	@ 0x38
10065736:	6820      	ldr	r0, [r4, #0]
10065738:	4614      	mov	r4, r2
1006573a:	3408      	adds	r4, #8
1006573c:	f7ee f8bf 	bl	100538be <BLEPLAT_CNTR_IntGetIntStatusCrcErr>
10065740:	2800      	cmp	r0, #0
10065742:	d06e      	beq.n	10065822 <llc_conn_isr+0x27e>
10065744:	7820      	ldrb	r0, [r4, #0]
10065746:	06c0      	lsls	r0, r0, #27
10065748:	9704      	str	r7, [sp, #16]
1006574a:	d479      	bmi.n	10065840 <llc_conn_isr+0x29c>
1006574c:	f7ee f87d 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
10065750:	6820      	ldr	r0, [r4, #0]
10065752:	2110      	movs	r1, #16
10065754:	4301      	orrs	r1, r0
10065756:	6021      	str	r1, [r4, #0]
10065758:	e076      	b.n	10065848 <llc_conn_isr+0x2a4>
1006575a:	9807      	ldr	r0, [sp, #28]
1006575c:	6840      	ldr	r0, [r0, #4]
1006575e:	9005      	str	r0, [sp, #20]
10065760:	f7ed f8c7 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
10065764:	6c79      	ldr	r1, [r7, #68]	@ 0x44
10065766:	1a08      	subs	r0, r1, r0
10065768:	9905      	ldr	r1, [sp, #20]
1006576a:	1840      	adds	r0, r0, r1
1006576c:	d402      	bmi.n	10065774 <llc_conn_isr+0x1d0>
1006576e:	6f79      	ldr	r1, [r7, #116]	@ 0x74
10065770:	4288      	cmp	r0, r1
10065772:	d203      	bcs.n	1006577c <llc_conn_isr+0x1d8>
10065774:	f7ed f8fe 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
10065778:	2001      	movs	r0, #1
1006577a:	9006      	str	r0, [sp, #24]
1006577c:	4638      	mov	r0, r7
1006577e:	f7f4 ff22 	bl	1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>
10065782:	2802      	cmp	r0, #2
10065784:	d13d      	bne.n	10065802 <llc_conn_isr+0x25e>
10065786:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065788:	6940      	ldr	r0, [r0, #20]
1006578a:	6800      	ldr	r0, [r0, #0]
1006578c:	06c1      	lsls	r1, r0, #27
1006578e:	d415      	bmi.n	100657bc <llc_conn_isr+0x218>
10065790:	0640      	lsls	r0, r0, #25
10065792:	d536      	bpl.n	10065802 <llc_conn_isr+0x25e>
10065794:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065796:	7d40      	ldrb	r0, [r0, #21]
10065798:	f7ee fac5 	bl	10053d26 <BLEPLAT_CNTR_SmEncOff>
1006579c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1006579e:	6958      	ldr	r0, [r3, #20]
100657a0:	6801      	ldr	r1, [r0, #0]
100657a2:	2240      	movs	r2, #64	@ 0x40
100657a4:	4391      	bics	r1, r2
100657a6:	6001      	str	r1, [r0, #0]
100657a8:	6898      	ldr	r0, [r3, #8]
100657aa:	2108      	movs	r1, #8
100657ac:	4388      	bics	r0, r1
100657ae:	6098      	str	r0, [r3, #8]
100657b0:	2012      	movs	r0, #18
100657b2:	f7fd f869 	bl	10062888 <tsk_notify_idx>
100657b6:	f7ec f9ea 	bl	10051b8e <BLE_STACK_ProcessRequest>
100657ba:	e022      	b.n	10065802 <llc_conn_isr+0x25e>
100657bc:	9505      	str	r5, [sp, #20]
100657be:	2000      	movs	r0, #0
100657c0:	900f      	str	r0, [sp, #60]	@ 0x3c
100657c2:	900e      	str	r0, [sp, #56]	@ 0x38
100657c4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
100657c6:	7d68      	ldrb	r0, [r5, #21]
100657c8:	f7ee fac1 	bl	10053d4e <BLEPLAT_CNTR_SmEncOn>
100657cc:	7d68      	ldrb	r0, [r5, #21]
100657ce:	a90e      	add	r1, sp, #56	@ 0x38
100657d0:	f7ee fc8e 	bl	100540f0 <BLEPLAT_CNTR_SmSetRxCount>
100657d4:	7828      	ldrb	r0, [r5, #0]
100657d6:	2803      	cmp	r0, #3
100657d8:	d103      	bne.n	100657e2 <llc_conn_isr+0x23e>
100657da:	980d      	ldr	r0, [sp, #52]	@ 0x34
100657dc:	7d40      	ldrb	r0, [r0, #21]
100657de:	f7ee fcaa 	bl	10054136 <BLEPLAT_CNTR_SmSetRxCountDirectionBit>
100657e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
100657e4:	6958      	ldr	r0, [r3, #20]
100657e6:	6801      	ldr	r1, [r0, #0]
100657e8:	2210      	movs	r2, #16
100657ea:	4391      	bics	r1, r2
100657ec:	6001      	str	r1, [r0, #0]
100657ee:	6898      	ldr	r0, [r3, #8]
100657f0:	2108      	movs	r1, #8
100657f2:	4301      	orrs	r1, r0
100657f4:	6099      	str	r1, [r3, #8]
100657f6:	2012      	movs	r0, #18
100657f8:	f7fd f846 	bl	10062888 <tsk_notify_idx>
100657fc:	f7ec f9c7 	bl	10051b8e <BLE_STACK_ProcessRequest>
10065800:	9d05      	ldr	r5, [sp, #20]
10065802:	42a5      	cmp	r5, r4
10065804:	990a      	ldr	r1, [sp, #40]	@ 0x28
10065806:	d001      	beq.n	1006580c <llc_conn_isr+0x268>
10065808:	8a88      	ldrh	r0, [r1, #20]
1006580a:	82c8      	strh	r0, [r1, #22]
1006580c:	9806      	ldr	r0, [sp, #24]
1006580e:	2800      	cmp	r0, #0
10065810:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065812:	d000      	beq.n	10065816 <llc_conn_isr+0x272>
10065814:	e136      	b.n	10065a84 <__arm_cp.0_5+0xec>
10065816:	9807      	ldr	r0, [sp, #28]
10065818:	6801      	ldr	r1, [r0, #0]
1006581a:	4630      	mov	r0, r6
1006581c:	f7ee fa4b 	bl	10053cb6 <BLEPLAT_CNTR_SetRcvLen>
10065820:	e135      	b.n	10065a8e <__arm_cp.0_5+0xf6>
10065822:	485b      	ldr	r0, [pc, #364]	@ (10065990 <__arm_cp.0_3>)
10065824:	6800      	ldr	r0, [r0, #0]
10065826:	f7ee f862 	bl	100538ee <BLEPLAT_CNTR_IntGetIntStatusEncErr>
1006582a:	2800      	cmp	r0, #0
1006582c:	d026      	beq.n	1006587c <llc_conn_isr+0x2d8>
1006582e:	9805      	ldr	r0, [sp, #20]
10065830:	2800      	cmp	r0, #0
10065832:	d023      	beq.n	1006587c <llc_conn_isr+0x2d8>
10065834:	f7ed f89e 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
10065838:	a80e      	add	r0, sp, #56	@ 0x38
1006583a:	233d      	movs	r3, #61	@ 0x3d
1006583c:	7783      	strb	r3, [r0, #30]
1006583e:	e023      	b.n	10065888 <llc_conn_isr+0x2e4>
10065840:	f7ed f898 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
10065844:	a80e      	add	r0, sp, #56	@ 0x38
10065846:	7605      	strb	r5, [r0, #24]
10065848:	4637      	mov	r7, r6
1006584a:	980a      	ldr	r0, [sp, #40]	@ 0x28
1006584c:	68c0      	ldr	r0, [r0, #12]
1006584e:	2800      	cmp	r0, #0
10065850:	d002      	beq.n	10065858 <llc_conn_isr+0x2b4>
10065852:	8841      	ldrh	r1, [r0, #2]
10065854:	1c49      	adds	r1, r1, #1
10065856:	8041      	strh	r1, [r0, #2]
10065858:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
1006585a:	6930      	ldr	r0, [r6, #16]
1006585c:	2800      	cmp	r0, #0
1006585e:	d00a      	beq.n	10065876 <llc_conn_isr+0x2d2>
10065860:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065862:	7d40      	ldrb	r0, [r0, #21]
10065864:	f7ee fb20 	bl	10053ea8 <BLEPLAT_CNTR_SmGetRemapChan>
10065868:	0040      	lsls	r0, r0, #1
1006586a:	6931      	ldr	r1, [r6, #16]
1006586c:	1808      	adds	r0, r1, r0
1006586e:	214a      	movs	r1, #74	@ 0x4a
10065870:	5a42      	ldrh	r2, [r0, r1]
10065872:	1c52      	adds	r2, r2, #1
10065874:	5242      	strh	r2, [r0, r1]
10065876:	463b      	mov	r3, r7
10065878:	9f04      	ldr	r7, [sp, #16]
1006587a:	e005      	b.n	10065888 <llc_conn_isr+0x2e4>
1006587c:	6820      	ldr	r0, [r4, #0]
1006587e:	2110      	movs	r1, #16
10065880:	4388      	bics	r0, r1
10065882:	6020      	str	r0, [r4, #0]
10065884:	2300      	movs	r3, #0
10065886:	461d      	mov	r5, r3
10065888:	9e06      	ldr	r6, [sp, #24]
1006588a:	6821      	ldr	r1, [r4, #0]
1006588c:	2020      	movs	r0, #32
1006588e:	4308      	orrs	r0, r1
10065890:	4271      	negs	r1, r6
10065892:	4171      	adcs	r1, r6
10065894:	0189      	lsls	r1, r1, #6
10065896:	2240      	movs	r2, #64	@ 0x40
10065898:	4390      	bics	r0, r2
1006589a:	1840      	adds	r0, r0, r1
1006589c:	940c      	str	r4, [sp, #48]	@ 0x30
1006589e:	6020      	str	r0, [r4, #0]
100658a0:	2d00      	cmp	r5, #0
100658a2:	d025      	beq.n	100658f0 <llc_conn_isr+0x34c>
100658a4:	a80e      	add	r0, sp, #56	@ 0x38
100658a6:	7f80      	ldrb	r0, [r0, #30]
100658a8:	2800      	cmp	r0, #0
100658aa:	d169      	bne.n	10065980 <llc_conn_isr+0x3dc>
100658ac:	a80e      	add	r0, sp, #56	@ 0x38
100658ae:	7ec0      	ldrb	r0, [r0, #27]
100658b0:	2800      	cmp	r0, #0
100658b2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
100658b4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
100658b6:	d000      	beq.n	100658ba <llc_conn_isr+0x316>
100658b8:	e0dc      	b.n	10065a74 <__arm_cp.0_5+0xdc>
100658ba:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
100658bc:	2800      	cmp	r0, #0
100658be:	d100      	bne.n	100658c2 <llc_conn_isr+0x31e>
100658c0:	e0b6      	b.n	10065a30 <__arm_cp.0_5+0x98>
100658c2:	4e34      	ldr	r6, [pc, #208]	@ (10065994 <__arm_cp.0_3+0x4>)
100658c4:	6830      	ldr	r0, [r6, #0]
100658c6:	21d8      	movs	r1, #216	@ 0xd8
100658c8:	5c41      	ldrb	r1, [r0, r1]
100658ca:	2901      	cmp	r1, #1
100658cc:	d14b      	bne.n	10065966 <llc_conn_isr+0x3c2>
100658ce:	6805      	ldr	r5, [r0, #0]
100658d0:	f7e9 f9da 	bl	1004ec88 <phy_upd_csr_ucfg>
100658d4:	2801      	cmp	r0, #1
100658d6:	d000      	beq.n	100658da <llc_conn_isr+0x336>
100658d8:	e094      	b.n	10065a04 <__arm_cp.0_5+0x6c>
100658da:	7920      	ldrb	r0, [r4, #4]
100658dc:	210e      	movs	r1, #14
100658de:	4341      	muls	r1, r0
100658e0:	6830      	ldr	r0, [r6, #0]
100658e2:	229c      	movs	r2, #156	@ 0x9c
100658e4:	5880      	ldr	r0, [r0, r2]
100658e6:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
100658e8:	6940      	ldr	r0, [r0, #20]
100658ea:	1840      	adds	r0, r0, r1
100658ec:	79c0      	ldrb	r0, [r0, #7]
100658ee:	e08a      	b.n	10065a06 <__arm_cp.0_5+0x6e>
100658f0:	461c      	mov	r4, r3
100658f2:	9202      	str	r2, [sp, #8]
100658f4:	4638      	mov	r0, r7
100658f6:	3014      	adds	r0, #20
100658f8:	f7ee f895 	bl	10053a26 <BLEPLAT_CNTR_PacketGetDataPtr>
100658fc:	4605      	mov	r5, r0
100658fe:	9011      	str	r0, [sp, #68]	@ 0x44
10065900:	7801      	ldrb	r1, [r0, #0]
10065902:	2003      	movs	r0, #3
10065904:	4001      	ands	r1, r0
10065906:	ae0e      	add	r6, sp, #56	@ 0x38
10065908:	9103      	str	r1, [sp, #12]
1006590a:	7571      	strb	r1, [r6, #21]
1006590c:	7829      	ldrb	r1, [r5, #0]
1006590e:	0689      	lsls	r1, r1, #26
10065910:	d400      	bmi.n	10065914 <llc_conn_isr+0x370>
10065912:	2002      	movs	r0, #2
10065914:	5c28      	ldrb	r0, [r5, r0]
10065916:	75f0      	strb	r0, [r6, #23]
10065918:	f7f6 f9b6 	bl	1005bc88 <ll_cpe_get_cpid_from_opcode>
1006591c:	7530      	strb	r0, [r6, #20]
1006591e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
10065920:	6679      	str	r1, [r7, #100]	@ 0x64
10065922:	2301      	movs	r3, #1
10065924:	9906      	ldr	r1, [sp, #24]
10065926:	2900      	cmp	r1, #0
10065928:	d009      	beq.n	1006593e <llc_conn_isr+0x39a>
1006592a:	990c      	ldr	r1, [sp, #48]	@ 0x30
1006592c:	6809      	ldr	r1, [r1, #0]
1006592e:	4019      	ands	r1, r3
10065930:	d005      	beq.n	1006593e <llc_conn_isr+0x39a>
10065932:	2616      	movs	r6, #22
10065934:	f7ed f81e 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
10065938:	a80e      	add	r0, sp, #56	@ 0x38
1006593a:	7786      	strb	r6, [r0, #30]
1006593c:	e020      	b.n	10065980 <llc_conn_isr+0x3dc>
1006593e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
10065940:	6949      	ldr	r1, [r1, #20]
10065942:	7849      	ldrb	r1, [r1, #1]
10065944:	07c9      	lsls	r1, r1, #31
10065946:	9a05      	ldr	r2, [sp, #20]
10065948:	d018      	beq.n	1006597c <llc_conn_isr+0x3d8>
1006594a:	2a00      	cmp	r2, #0
1006594c:	d016      	beq.n	1006597c <llc_conn_isr+0x3d8>
1006594e:	9903      	ldr	r1, [sp, #12]
10065950:	2903      	cmp	r1, #3
10065952:	d10e      	bne.n	10065972 <llc_conn_isr+0x3ce>
10065954:	263d      	movs	r6, #61	@ 0x3d
10065956:	2814      	cmp	r0, #20
10065958:	d8ec      	bhi.n	10065934 <llc_conn_isr+0x390>
1006595a:	4619      	mov	r1, r3
1006595c:	4081      	lsls	r1, r0
1006595e:	480e      	ldr	r0, [pc, #56]	@ (10065998 <__arm_cp.0_5>)
10065960:	4201      	tst	r1, r0
10065962:	d10b      	bne.n	1006597c <llc_conn_isr+0x3d8>
10065964:	e7e6      	b.n	10065934 <llc_conn_isr+0x390>
10065966:	f7ed f805 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
1006596a:	a80e      	add	r0, sp, #56	@ 0x38
1006596c:	2101      	movs	r1, #1
1006596e:	7601      	strb	r1, [r0, #24]
10065970:	e05d      	b.n	10065a2e <__arm_cp.0_5+0x96>
10065972:	7868      	ldrb	r0, [r5, #1]
10065974:	2800      	cmp	r0, #0
10065976:	d001      	beq.n	1006597c <llc_conn_isr+0x3d8>
10065978:	263d      	movs	r6, #61	@ 0x3d
1006597a:	e7db      	b.n	10065934 <llc_conn_isr+0x390>
1006597c:	2c00      	cmp	r4, #0
1006597e:	d00d      	beq.n	1006599c <__arm_cp.0_5+0x4>
10065980:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065982:	7d60      	ldrb	r0, [r4, #21]
10065984:	f7fa ffba 	bl	100608fc <LL_sched_delete_taskslot>
10065988:	a80e      	add	r0, sp, #56	@ 0x38
1006598a:	7f80      	ldrb	r0, [r0, #30]
1006598c:	7060      	strb	r0, [r4, #1]
1006598e:	e07c      	b.n	10065a8a <__arm_cp.0_5+0xf2>

10065990 <__arm_cp.0_3>:
10065990:	20002acc 	.word	0x20002acc
10065994:	20002ad0 	.word	0x20002ad0

10065998 <__arm_cp.0_5>:
10065998:	00100012 	.word	0x00100012
1006599c:	9301      	str	r3, [sp, #4]
1006599e:	4638      	mov	r0, r7
100659a0:	4614      	mov	r4, r2
100659a2:	f7ee f840 	bl	10053a26 <BLEPLAT_CNTR_PacketGetDataPtr>
100659a6:	4606      	mov	r6, r0
100659a8:	a80e      	add	r0, sp, #56	@ 0x38
100659aa:	2100      	movs	r1, #0
100659ac:	7701      	strb	r1, [r0, #28]
100659ae:	7641      	strb	r1, [r0, #25]
100659b0:	9612      	str	r6, [sp, #72]	@ 0x48
100659b2:	9106      	str	r1, [sp, #24]
100659b4:	9110      	str	r1, [sp, #64]	@ 0x40
100659b6:	2c00      	cmp	r4, #0
100659b8:	980d      	ldr	r0, [sp, #52]	@ 0x34
100659ba:	d100      	bne.n	100659be <__arm_cp.0_5+0x26>
100659bc:	e147      	b.n	10065c4e <__arm_cp.0_5+0x2b6>
100659be:	7800      	ldrb	r0, [r0, #0]
100659c0:	2802      	cmp	r0, #2
100659c2:	d113      	bne.n	100659ec <__arm_cp.0_5+0x54>
100659c4:	7828      	ldrb	r0, [r5, #0]
100659c6:	7831      	ldrb	r1, [r6, #0]
100659c8:	4301      	orrs	r1, r0
100659ca:	06c8      	lsls	r0, r1, #27
100659cc:	d509      	bpl.n	100659e2 <__arm_cp.0_5+0x4a>
100659ce:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
100659d0:	f7ec ff8f 	bl	100528f2 <BLEPLAT_GetCurrentSysTime>
100659d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
100659d6:	1a08      	subs	r0, r1, r0
100659d8:	1900      	adds	r0, r0, r4
100659da:	d402      	bmi.n	100659e2 <__arm_cp.0_5+0x4a>
100659dc:	6f79      	ldr	r1, [r7, #116]	@ 0x74
100659de:	4288      	cmp	r0, r1
100659e0:	d204      	bcs.n	100659ec <__arm_cp.0_5+0x54>
100659e2:	f7ec ffc7 	bl	10052974 <BLEPLAT_ClearRadioTimerValue>
100659e6:	a80e      	add	r0, sp, #56	@ 0x38
100659e8:	2101      	movs	r1, #1
100659ea:	7601      	strb	r1, [r0, #24]
100659ec:	786c      	ldrb	r4, [r5, #1]
100659ee:	2c00      	cmp	r4, #0
100659f0:	d100      	bne.n	100659f4 <__arm_cp.0_5+0x5c>
100659f2:	e12c      	b.n	10065c4e <__arm_cp.0_5+0x2b6>
100659f4:	980c      	ldr	r0, [sp, #48]	@ 0x30
100659f6:	6800      	ldr	r0, [r0, #0]
100659f8:	2608      	movs	r6, #8
100659fa:	4006      	ands	r6, r0
100659fc:	d000      	beq.n	10065a00 <__arm_cp.0_5+0x68>
100659fe:	e095      	b.n	10065b2c <__arm_cp.0_5+0x194>
10065a00:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10065a02:	e0aa      	b.n	10065b5a <__arm_cp.0_5+0x1c2>
10065a04:	2001      	movs	r0, #1
10065a06:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
10065a08:	f7ee fc8b 	bl	10054322 <BLEPLAT_CNTR_DemodDelaySt>
10065a0c:	1a28      	subs	r0, r5, r0
10065a0e:	6478      	str	r0, [r7, #68]	@ 0x44
10065a10:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
10065a12:	1b89      	subs	r1, r1, r6
10065a14:	1808      	adds	r0, r1, r0
10065a16:	9a07      	ldr	r2, [sp, #28]
10065a18:	6851      	ldr	r1, [r2, #4]
10065a1a:	4281      	cmp	r1, r0
10065a1c:	d901      	bls.n	10065a22 <__arm_cp.0_5+0x8a>
10065a1e:	1a08      	subs	r0, r1, r0
10065a20:	6050      	str	r0, [r2, #4]
10065a22:	2000      	movs	r0, #0
10065a24:	64b8      	str	r0, [r7, #72]	@ 0x48
10065a26:	6378      	str	r0, [r7, #52]	@ 0x34
10065a28:	4638      	mov	r0, r7
10065a2a:	f7f5 fe97 	bl	1005b75c <llc_conn_update_receive_window>
10065a2e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065a30:	a80e      	add	r0, sp, #56	@ 0x38
10065a32:	7e80      	ldrb	r0, [r0, #26]
10065a34:	2801      	cmp	r0, #1
10065a36:	d102      	bne.n	10065a3e <__arm_cp.0_5+0xa6>
10065a38:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10065a3a:	6678      	str	r0, [r7, #100]	@ 0x64
10065a3c:	e004      	b.n	10065a48 <__arm_cp.0_5+0xb0>
10065a3e:	2011      	movs	r0, #17
10065a40:	f7fc ff22 	bl	10062888 <tsk_notify_idx>
10065a44:	f7ec f8a3 	bl	10051b8e <BLE_STACK_ProcessRequest>
10065a48:	980a      	ldr	r0, [sp, #40]	@ 0x28
10065a4a:	68c0      	ldr	r0, [r0, #12]
10065a4c:	2800      	cmp	r0, #0
10065a4e:	d002      	beq.n	10065a56 <__arm_cp.0_5+0xbe>
10065a50:	8801      	ldrh	r1, [r0, #0]
10065a52:	1c49      	adds	r1, r1, #1
10065a54:	8001      	strh	r1, [r0, #0]
10065a56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
10065a58:	6930      	ldr	r0, [r6, #16]
10065a5a:	2800      	cmp	r0, #0
10065a5c:	d007      	beq.n	10065a6e <__arm_cp.0_5+0xd6>
10065a5e:	7d60      	ldrb	r0, [r4, #21]
10065a60:	f7ee fa22 	bl	10053ea8 <BLEPLAT_CNTR_SmGetRemapChan>
10065a64:	0040      	lsls	r0, r0, #1
10065a66:	6931      	ldr	r1, [r6, #16]
10065a68:	5a0a      	ldrh	r2, [r1, r0]
10065a6a:	1c52      	adds	r2, r2, #1
10065a6c:	520a      	strh	r2, [r1, r0]
10065a6e:	7920      	ldrb	r0, [r4, #4]
10065a70:	f7f8 faf0 	bl	1005e054 <LLC_pcl_incr_rx_packets_ucfg_weak>
10065a74:	a80e      	add	r0, sp, #56	@ 0x38
10065a76:	7e00      	ldrb	r0, [r0, #24]
10065a78:	2801      	cmp	r0, #1
10065a7a:	d108      	bne.n	10065a8e <__arm_cp.0_5+0xf6>
10065a7c:	6828      	ldr	r0, [r5, #0]
10065a7e:	2110      	movs	r1, #16
10065a80:	4388      	bics	r0, r1
10065a82:	6028      	str	r0, [r5, #0]
10065a84:	4638      	mov	r0, r7
10065a86:	f000 fa82 	bl	10065f8e <llc_conn_close_event>
10065a8a:	2601      	movs	r6, #1
10065a8c:	e000      	b.n	10065a90 <__arm_cp.0_5+0xf8>
10065a8e:	2600      	movs	r6, #0
10065a90:	7d65      	ldrb	r5, [r4, #21]
10065a92:	4628      	mov	r0, r5
10065a94:	f7ee f9f7 	bl	10053e86 <BLEPLAT_CNTR_SmGetMode>
10065a98:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065a9a:	6809      	ldr	r1, [r1, #0]
10065a9c:	2800      	cmp	r0, #0
10065a9e:	d005      	beq.n	10065aac <__arm_cp.0_5+0x114>
10065aa0:	0748      	lsls	r0, r1, #29
10065aa2:	d405      	bmi.n	10065ab0 <__arm_cp.0_5+0x118>
10065aa4:	4628      	mov	r0, r5
10065aa6:	f7ee f93e 	bl	10053d26 <BLEPLAT_CNTR_SmEncOff>
10065aaa:	e004      	b.n	10065ab6 <__arm_cp.0_5+0x11e>
10065aac:	0708      	lsls	r0, r1, #28
10065aae:	d5f9      	bpl.n	10065aa4 <__arm_cp.0_5+0x10c>
10065ab0:	4628      	mov	r0, r5
10065ab2:	f7ee f94c 	bl	10053d4e <BLEPLAT_CNTR_SmEncOn>
10065ab6:	2e00      	cmp	r6, #0
10065ab8:	d01d      	beq.n	10065af6 <__arm_cp.0_5+0x15e>
10065aba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10065abc:	69e5      	ldr	r5, [r4, #28]
10065abe:	2d00      	cmp	r5, #0
10065ac0:	d015      	beq.n	10065aee <__arm_cp.0_5+0x156>
10065ac2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10065ac4:	7d70      	ldrb	r0, [r6, #21]
10065ac6:	f7ee f9b9 	bl	10053e3c <BLEPLAT_CNTR_SmGetEncKeyPtr>
10065aca:	4602      	mov	r2, r0
10065acc:	4629      	mov	r1, r5
10065ace:	3110      	adds	r1, #16
10065ad0:	2301      	movs	r3, #1
10065ad2:	4628      	mov	r0, r5
10065ad4:	f7fd f9ee 	bl	10062eb4 <BLEPLAT_aes128_encrypt>
10065ad8:	7d70      	ldrb	r0, [r6, #21]
10065ada:	f7ee f99b 	bl	10053e14 <BLEPLAT_CNTR_SmGetEncIvPtr>
10065ade:	4601      	mov	r1, r0
10065ae0:	3520      	adds	r5, #32
10065ae2:	2208      	movs	r2, #8
10065ae4:	4628      	mov	r0, r5
10065ae6:	f7fd f857 	bl	10062b98 <char_copy>
10065aea:	2000      	movs	r0, #0
10065aec:	61e0      	str	r0, [r4, #28]
10065aee:	9808      	ldr	r0, [sp, #32]
10065af0:	f7fa fd14 	bl	1006051c <LL_sched_engine>
10065af4:	e001      	b.n	10065afa <__arm_cp.0_5+0x162>
10065af6:	f7ed fea8 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
10065afa:	9809      	ldr	r0, [sp, #36]	@ 0x24
10065afc:	2800      	cmp	r0, #0
10065afe:	d10c      	bne.n	10065b1a <__arm_cp.0_5+0x182>
10065b00:	f7ec feef 	bl	100528e2 <BLEPLAT_CalculateRSSI>
10065b04:	287f      	cmp	r0, #127	@ 0x7f
10065b06:	d005      	beq.n	10065b14 <__arm_cp.0_5+0x17c>
10065b08:	4605      	mov	r5, r0
10065b0a:	f7fa fc05 	bl	10060318 <get_rf_rx_path_compensation_db>
10065b0e:	1828      	adds	r0, r5, r0
10065b10:	990a      	ldr	r1, [sp, #40]	@ 0x28
10065b12:	7008      	strb	r0, [r1, #0]
10065b14:	4638      	mov	r0, r7
10065b16:	f7f8 fa9e 	bl	1005e056 <LLC_pcl_update_avg_rssi_ucfg_weak>
10065b1a:	2401      	movs	r4, #1
10065b1c:	4620      	mov	r0, r4
10065b1e:	f7fc fedb 	bl	100628d8 <tsk_signal_resource_idx>
10065b22:	f7ec f834 	bl	10051b8e <BLE_STACK_ProcessRequest>
10065b26:	4620      	mov	r0, r4
10065b28:	b019      	add	sp, #100	@ 0x64
10065b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10065b2c:	f7f3 fdb2 	bl	10059694 <data_length_extension_csr_ucfg_weak>
10065b30:	2801      	cmp	r0, #1
10065b32:	d001      	beq.n	10065b38 <__arm_cp.0_5+0x1a0>
10065b34:	201c      	movs	r0, #28
10065b36:	e000      	b.n	10065b3a <__arm_cp.0_5+0x1a2>
10065b38:	20fc      	movs	r0, #252	@ 0xfc
10065b3a:	4220      	tst	r0, r4
10065b3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
10065b3e:	d00c      	beq.n	10065b5a <__arm_cp.0_5+0x1c2>
10065b40:	7868      	ldrb	r0, [r5, #1]
10065b42:	1f00      	subs	r0, r0, #4
10065b44:	7068      	strb	r0, [r5, #1]
10065b46:	2002      	movs	r0, #2
10065b48:	71a0      	strb	r0, [r4, #6]
10065b4a:	2012      	movs	r0, #18
10065b4c:	f7fc fe9c 	bl	10062888 <tsk_notify_idx>
10065b50:	f7ec f81d 	bl	10051b8e <BLE_STACK_ProcessRequest>
10065b54:	a80e      	add	r0, sp, #56	@ 0x38
10065b56:	7d40      	ldrb	r0, [r0, #21]
10065b58:	9003      	str	r0, [sp, #12]
10065b5a:	9803      	ldr	r0, [sp, #12]
10065b5c:	2803      	cmp	r0, #3
10065b5e:	d110      	bne.n	10065b82 <__arm_cp.0_5+0x1ea>
10065b60:	a80e      	add	r0, sp, #56	@ 0x38
10065b62:	7dc5      	ldrb	r5, [r0, #23]
10065b64:	2d02      	cmp	r5, #2
10065b66:	d117      	bne.n	10065b98 <__arm_cp.0_5+0x200>
10065b68:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065b6a:	7840      	ldrb	r0, [r0, #1]
10065b6c:	2802      	cmp	r0, #2
10065b6e:	d113      	bne.n	10065b98 <__arm_cp.0_5+0x200>
10065b70:	a80e      	add	r0, sp, #56	@ 0x38
10065b72:	2101      	movs	r1, #1
10065b74:	7701      	strb	r1, [r0, #28]
10065b76:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065b78:	6828      	ldr	r0, [r5, #0]
10065b7a:	2102      	movs	r1, #2
10065b7c:	4301      	orrs	r1, r0
10065b7e:	6029      	str	r1, [r5, #0]
10065b80:	e042      	b.n	10065c08 <__arm_cp.0_5+0x270>
10065b82:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065b84:	7800      	ldrb	r0, [r0, #0]
10065b86:	2803      	cmp	r0, #3
10065b88:	d117      	bne.n	10065bba <__arm_cp.0_5+0x222>
10065b8a:	7a20      	ldrb	r0, [r4, #8]
10065b8c:	2800      	cmp	r0, #0
10065b8e:	d014      	beq.n	10065bba <__arm_cp.0_5+0x222>
10065b90:	2002      	movs	r0, #2
10065b92:	9910      	ldr	r1, [sp, #64]	@ 0x40
10065b94:	4301      	orrs	r1, r0
10065b96:	e04a      	b.n	10065c2e <__arm_cp.0_5+0x296>
10065b98:	4638      	mov	r0, r7
10065b9a:	f7f4 fd02 	bl	1005a5a2 <llc_conn_get_rx_ctrl_pdu_full>
10065b9e:	2800      	cmp	r0, #0
10065ba0:	d021      	beq.n	10065be6 <__arm_cp.0_5+0x24e>
10065ba2:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065ba4:	7d40      	ldrb	r0, [r0, #21]
10065ba6:	f7ee fbad 	bl	10054304 <BLEPLAT_CNTR_SmToggleNesn>
10065baa:	2e00      	cmp	r6, #0
10065bac:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065bae:	d02b      	beq.n	10065c08 <__arm_cp.0_5+0x270>
10065bb0:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065bb2:	7d40      	ldrb	r0, [r0, #21]
10065bb4:	f000 fa61 	bl	1006607a <llc_conn_decrement_enc_count_rx>
10065bb8:	e026      	b.n	10065c08 <__arm_cp.0_5+0x270>
10065bba:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065bbc:	7846      	ldrb	r6, [r0, #1]
10065bbe:	f7f3 fd69 	bl	10059694 <data_length_extension_csr_ucfg_weak>
10065bc2:	2801      	cmp	r0, #1
10065bc4:	d001      	beq.n	10065bca <__arm_cp.0_5+0x232>
10065bc6:	251f      	movs	r5, #31
10065bc8:	e001      	b.n	10065bce <__arm_cp.0_5+0x236>
10065bca:	9806      	ldr	r0, [sp, #24]
10065bcc:	43c5      	mvns	r5, r0
10065bce:	4035      	ands	r5, r6
10065bd0:	0628      	lsls	r0, r5, #24
10065bd2:	d01e      	beq.n	10065c12 <__arm_cp.0_5+0x27a>
10065bd4:	9806      	ldr	r0, [sp, #24]
10065bd6:	67b8      	str	r0, [r7, #120]	@ 0x78
10065bd8:	f7ef f86c 	bl	10054cb4 <isr_Acl_Data_Indication_Queue_Full>
10065bdc:	2800      	cmp	r0, #0
10065bde:	d01b      	beq.n	10065c18 <__arm_cp.0_5+0x280>
10065be0:	2002      	movs	r0, #2
10065be2:	9010      	str	r0, [sp, #64]	@ 0x40
10065be4:	e026      	b.n	10065c34 <__arm_cp.0_5+0x29c>
10065be6:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065be8:	7800      	ldrb	r0, [r0, #0]
10065bea:	2803      	cmp	r0, #3
10065bec:	d108      	bne.n	10065c00 <__arm_cp.0_5+0x268>
10065bee:	2d27      	cmp	r5, #39	@ 0x27
10065bf0:	d106      	bne.n	10065c00 <__arm_cp.0_5+0x268>
10065bf2:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065bf4:	7840      	ldrb	r0, [r0, #1]
10065bf6:	280b      	cmp	r0, #11
10065bf8:	d102      	bne.n	10065c00 <__arm_cp.0_5+0x268>
10065bfa:	a80e      	add	r0, sp, #56	@ 0x38
10065bfc:	2101      	movs	r1, #1
10065bfe:	7741      	strb	r1, [r0, #29]
10065c00:	a80e      	add	r0, sp, #56	@ 0x38
10065c02:	2101      	movs	r1, #1
10065c04:	7641      	strb	r1, [r0, #25]
10065c06:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
10065c08:	6828      	ldr	r0, [r5, #0]
10065c0a:	2180      	movs	r1, #128	@ 0x80
10065c0c:	4301      	orrs	r1, r0
10065c0e:	6029      	str	r1, [r5, #0]
10065c10:	e014      	b.n	10065c3c <__arm_cp.0_5+0x2a4>
10065c12:	9806      	ldr	r0, [sp, #24]
10065c14:	9010      	str	r0, [sp, #64]	@ 0x40
10065c16:	e011      	b.n	10065c3c <__arm_cp.0_5+0x2a4>
10065c18:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
10065c1a:	b2ea      	uxtb	r2, r5
10065c1c:	9801      	ldr	r0, [sp, #4]
10065c1e:	f7ef f913 	bl	10054e48 <ACL_pkt_get>
10065c22:	67b8      	str	r0, [r7, #120]	@ 0x78
10065c24:	2800      	cmp	r0, #0
10065c26:	d001      	beq.n	10065c2c <__arm_cp.0_5+0x294>
10065c28:	9901      	ldr	r1, [sp, #4]
10065c2a:	e000      	b.n	10065c2e <__arm_cp.0_5+0x296>
10065c2c:	2102      	movs	r1, #2
10065c2e:	9110      	str	r1, [sp, #64]	@ 0x40
10065c30:	0788      	lsls	r0, r1, #30
10065c32:	d503      	bpl.n	10065c3c <__arm_cp.0_5+0x2a4>
10065c34:	980d      	ldr	r0, [sp, #52]	@ 0x34
10065c36:	7d40      	ldrb	r0, [r0, #21]
10065c38:	f7ee fb64 	bl	10054304 <BLEPLAT_CNTR_SmToggleNesn>
10065c3c:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065c3e:	7800      	ldrb	r0, [r0, #0]
10065c40:	8aa1      	ldrh	r1, [r4, #20]
10065c42:	82e1      	strh	r1, [r4, #22]
10065c44:	2120      	movs	r1, #32
10065c46:	4001      	ands	r1, r0
10065c48:	a80e      	add	r0, sp, #56	@ 0x38
10065c4a:	7581      	strb	r1, [r0, #22]
10065c4c:	9e12      	ldr	r6, [sp, #72]	@ 0x48
10065c4e:	2101      	movs	r1, #1
10065c50:	4638      	mov	r0, r7
10065c52:	9105      	str	r1, [sp, #20]
10065c54:	f7f4 fc8a 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
10065c58:	4605      	mov	r5, r0
10065c5a:	463b      	mov	r3, r7
10065c5c:	3328      	adds	r3, #40	@ 0x28
10065c5e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
10065c60:	6801      	ldr	r1, [r0, #0]
10065c62:	2900      	cmp	r1, #0
10065c64:	d011      	beq.n	10065c8a <__arm_cp.0_5+0x2f2>
10065c66:	7a08      	ldrb	r0, [r1, #8]
10065c68:	0700      	lsls	r0, r0, #28
10065c6a:	d50e      	bpl.n	10065c8a <__arm_cp.0_5+0x2f2>
10065c6c:	69c8      	ldr	r0, [r1, #28]
10065c6e:	2800      	cmp	r0, #0
10065c70:	d00b      	beq.n	10065c8a <__arm_cp.0_5+0x2f2>
10065c72:	42ae      	cmp	r6, r5
10065c74:	d009      	beq.n	10065c8a <__arm_cp.0_5+0x2f2>
10065c76:	429e      	cmp	r6, r3
10065c78:	d007      	beq.n	10065c8a <__arm_cp.0_5+0x2f2>
10065c7a:	460c      	mov	r4, r1
10065c7c:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065c7e:	6808      	ldr	r0, [r1, #0]
10065c80:	9a02      	ldr	r2, [sp, #8]
10065c82:	4390      	bics	r0, r2
10065c84:	6008      	str	r0, [r1, #0]
10065c86:	4621      	mov	r1, r4
10065c88:	e003      	b.n	10065c92 <__arm_cp.0_5+0x2fa>
10065c8a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
10065c8c:	2800      	cmp	r0, #0
10065c8e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065c90:	d017      	beq.n	10065cc2 <__arm_cp.0_5+0x32a>
10065c92:	42ae      	cmp	r6, r5
10065c94:	9303      	str	r3, [sp, #12]
10065c96:	d018      	beq.n	10065cca <__arm_cp.0_5+0x332>
10065c98:	429e      	cmp	r6, r3
10065c9a:	d025      	beq.n	10065ce8 <__arm_cp.0_5+0x350>
10065c9c:	6948      	ldr	r0, [r1, #20]
10065c9e:	6188      	str	r0, [r1, #24]
10065ca0:	460e      	mov	r6, r1
10065ca2:	7b09      	ldrb	r1, [r1, #12]
10065ca4:	9d06      	ldr	r5, [sp, #24]
10065ca6:	7335      	strb	r5, [r6, #12]
10065ca8:	8a32      	ldrh	r2, [r6, #16]
10065caa:	1851      	adds	r1, r2, r1
10065cac:	8231      	strh	r1, [r6, #16]
10065cae:	b28a      	uxth	r2, r1
10065cb0:	8873      	ldrh	r3, [r6, #2]
10065cb2:	429a      	cmp	r2, r3
10065cb4:	d21a      	bcs.n	10065cec <__arm_cp.0_5+0x354>
10065cb6:	89f2      	ldrh	r2, [r6, #14]
10065cb8:	1851      	adds	r1, r2, r1
10065cba:	06c9      	lsls	r1, r1, #27
10065cbc:	d019      	beq.n	10065cf2 <__arm_cp.0_5+0x35a>
10065cbe:	4634      	mov	r4, r6
10065cc0:	e01a      	b.n	10065cf8 <__arm_cp.0_5+0x360>
10065cc2:	f7ed fdc2 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
10065cc6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065cc8:	e0e3      	b.n	10065e92 <__arm_cp.0_5+0x4fa>
10065cca:	460c      	mov	r4, r1
10065ccc:	2103      	movs	r1, #3
10065cce:	4638      	mov	r0, r7
10065cd0:	f7f4 ff14 	bl	1005aafc <llc_conn_set_tx_ctrl_pdu_state>
10065cd4:	4638      	mov	r0, r7
10065cd6:	f7ed fe80 	bl	100539da <BLEPLAT_CNTR_PacketClrCteSamplingEn>
10065cda:	78a8      	ldrb	r0, [r5, #2]
10065cdc:	2827      	cmp	r0, #39	@ 0x27
10065cde:	d10e      	bne.n	10065cfe <__arm_cp.0_5+0x366>
10065ce0:	a80e      	add	r0, sp, #56	@ 0x38
10065ce2:	2101      	movs	r1, #1
10065ce4:	7741      	strb	r1, [r0, #29]
10065ce6:	e00a      	b.n	10065cfe <__arm_cp.0_5+0x366>
10065ce8:	460c      	mov	r4, r1
10065cea:	e008      	b.n	10065cfe <__arm_cp.0_5+0x366>
10065cec:	69f4      	ldr	r4, [r6, #28]
10065cee:	2504      	movs	r5, #4
10065cf0:	e002      	b.n	10065cf8 <__arm_cp.0_5+0x360>
10065cf2:	6800      	ldr	r0, [r0, #0]
10065cf4:	4634      	mov	r4, r6
10065cf6:	61b0      	str	r0, [r6, #24]
10065cf8:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065cfa:	4328      	orrs	r0, r5
10065cfc:	9010      	str	r0, [sp, #64]	@ 0x40
10065cfe:	4638      	mov	r0, r7
10065d00:	f7f4 fc5b 	bl	1005a5ba <llc_conn_get_tx_acl_blocked>
10065d04:	4605      	mov	r5, r0
10065d06:	4638      	mov	r0, r7
10065d08:	f7f4 fc5d 	bl	1005a5c6 <llc_conn_get_tx_ctrl_pdu_state>
10065d0c:	a90e      	add	r1, sp, #56	@ 0x38
10065d0e:	7f0e      	ldrb	r6, [r1, #28]
10065d10:	2e00      	cmp	r6, #0
10065d12:	d124      	bne.n	10065d5e <__arm_cp.0_5+0x3c6>
10065d14:	2801      	cmp	r0, #1
10065d16:	d122      	bne.n	10065d5e <__arm_cp.0_5+0x3c6>
10065d18:	2101      	movs	r1, #1
10065d1a:	4638      	mov	r0, r7
10065d1c:	9106      	str	r1, [sp, #24]
10065d1e:	f7f4 fc25 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
10065d22:	4606      	mov	r6, r0
10065d24:	4638      	mov	r0, r7
10065d26:	4631      	mov	r1, r6
10065d28:	f7ed febf 	bl	10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>
10065d2c:	4632      	mov	r2, r6
10065d2e:	7830      	ldrb	r0, [r6, #0]
10065d30:	0680      	lsls	r0, r0, #26
10065d32:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065d34:	d421      	bmi.n	10065d7a <__arm_cp.0_5+0x3e2>
10065d36:	7890      	ldrb	r0, [r2, #2]
10065d38:	2827      	cmp	r0, #39	@ 0x27
10065d3a:	d04c      	beq.n	10065dd6 <__arm_cp.0_5+0x43e>
10065d3c:	4615      	mov	r5, r2
10065d3e:	2802      	cmp	r0, #2
10065d40:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065d42:	d152      	bne.n	10065dea <__arm_cp.0_5+0x452>
10065d44:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065d46:	6808      	ldr	r0, [r1, #0]
10065d48:	9a06      	ldr	r2, [sp, #24]
10065d4a:	4310      	orrs	r0, r2
10065d4c:	6008      	str	r0, [r1, #0]
10065d4e:	7d60      	ldrb	r0, [r4, #21]
10065d50:	211f      	movs	r1, #31
10065d52:	460a      	mov	r2, r1
10065d54:	f7fa fda8 	bl	100608a8 <LL_sched_set_priority>
10065d58:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
10065d5a:	6738      	str	r0, [r7, #112]	@ 0x70
10065d5c:	e045      	b.n	10065dea <__arm_cp.0_5+0x452>
10065d5e:	f7ee ffb7 	bl	10054cd0 <isr_Acl_Data_TX_Cmpl_Queue_Full>
10065d62:	2800      	cmp	r0, #0
10065d64:	d018      	beq.n	10065d98 <__arm_cp.0_5+0x400>
10065d66:	f7ed fd70 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
10065d6a:	980e      	ldr	r0, [sp, #56]	@ 0x38
10065d6c:	2800      	cmp	r0, #0
10065d6e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065d70:	d009      	beq.n	10065d86 <__arm_cp.0_5+0x3ee>
10065d72:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065d74:	9903      	ldr	r1, [sp, #12]
10065d76:	9805      	ldr	r0, [sp, #20]
10065d78:	e008      	b.n	10065d8c <__arm_cp.0_5+0x3f4>
10065d7a:	4615      	mov	r5, r2
10065d7c:	4638      	mov	r0, r7
10065d7e:	f7ed fe87 	bl	10053a90 <BLEPLAT_CNTR_PacketSetCteSamplingEn>
10065d82:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065d84:	e031      	b.n	10065dea <__arm_cp.0_5+0x452>
10065d86:	2011      	movs	r0, #17
10065d88:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065d8a:	9903      	ldr	r1, [sp, #12]
10065d8c:	8538      	strh	r0, [r7, #40]	@ 0x28
10065d8e:	4638      	mov	r0, r7
10065d90:	460d      	mov	r5, r1
10065d92:	f7ed fe8a 	bl	10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>
10065d96:	e071      	b.n	10065e7c <__arm_cp.0_5+0x4e4>
10065d98:	2c00      	cmp	r4, #0
10065d9a:	d0e4      	beq.n	10065d66 <__arm_cp.0_5+0x3ce>
10065d9c:	2d01      	cmp	r5, #1
10065d9e:	d0e2      	beq.n	10065d66 <__arm_cp.0_5+0x3ce>
10065da0:	2e01      	cmp	r6, #1
10065da2:	d0e0      	beq.n	10065d66 <__arm_cp.0_5+0x3ce>
10065da4:	f7ed fd51 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
10065da8:	4877      	ldr	r0, [pc, #476]	@ (10065f88 <__arm_cp.0_2>)
10065daa:	6800      	ldr	r0, [r0, #0]
10065dac:	218c      	movs	r1, #140	@ 0x8c
10065dae:	5840      	ldr	r0, [r0, r1]
10065db0:	8a21      	ldrh	r1, [r4, #16]
10065db2:	89e2      	ldrh	r2, [r4, #14]
10065db4:	1851      	adds	r1, r2, r1
10065db6:	221f      	movs	r2, #31
10065db8:	400a      	ands	r2, r1
10065dba:	1810      	adds	r0, r2, r0
10065dbc:	1c81      	adds	r1, r0, #2
10065dbe:	4638      	mov	r0, r7
10065dc0:	460d      	mov	r5, r1
10065dc2:	f7ed fe72 	bl	10053aaa <BLEPLAT_CNTR_PacketSetDataPtr>
10065dc6:	4638      	mov	r0, r7
10065dc8:	4621      	mov	r1, r4
10065dca:	f7f4 fb23 	bl	1005a414 <llc_conn_copy_tx_data_packet>
10065dce:	67fc      	str	r4, [r7, #124]	@ 0x7c
10065dd0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
10065dd2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
10065dd4:	e052      	b.n	10065e7c <__arm_cp.0_5+0x4e4>
10065dd6:	990d      	ldr	r1, [sp, #52]	@ 0x34
10065dd8:	7d88      	ldrb	r0, [r1, #22]
10065dda:	7150      	strb	r0, [r2, #5]
10065ddc:	7dc8      	ldrb	r0, [r1, #23]
10065dde:	4615      	mov	r5, r2
10065de0:	7190      	strb	r0, [r2, #6]
10065de2:	2000      	movs	r0, #0
10065de4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
10065de6:	8290      	strh	r0, [r2, #20]
10065de8:	460c      	mov	r4, r1
10065dea:	6970      	ldr	r0, [r6, #20]
10065dec:	6800      	ldr	r0, [r0, #0]
10065dee:	0701      	lsls	r1, r0, #28
10065df0:	d415      	bmi.n	10065e1e <__arm_cp.0_5+0x486>
10065df2:	0680      	lsls	r0, r0, #26
10065df4:	d510      	bpl.n	10065e18 <__arm_cp.0_5+0x480>
10065df6:	7d60      	ldrb	r0, [r4, #21]
10065df8:	f7ed ff95 	bl	10053d26 <BLEPLAT_CNTR_SmEncOff>
10065dfc:	6970      	ldr	r0, [r6, #20]
10065dfe:	6801      	ldr	r1, [r0, #0]
10065e00:	2220      	movs	r2, #32
10065e02:	4391      	bics	r1, r2
10065e04:	6001      	str	r1, [r0, #0]
10065e06:	68b0      	ldr	r0, [r6, #8]
10065e08:	2104      	movs	r1, #4
10065e0a:	4388      	bics	r0, r1
10065e0c:	60b0      	str	r0, [r6, #8]
10065e0e:	2012      	movs	r0, #18
10065e10:	f7fc fd3a 	bl	10062888 <tsk_notify_idx>
10065e14:	f7eb febb 	bl	10051b8e <BLE_STACK_ProcessRequest>
10065e18:	f7ed fd17 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
10065e1c:	e01f      	b.n	10065e5e <__arm_cp.0_5+0x4c6>
10065e1e:	2000      	movs	r0, #0
10065e20:	9017      	str	r0, [sp, #92]	@ 0x5c
10065e22:	9016      	str	r0, [sp, #88]	@ 0x58
10065e24:	7d60      	ldrb	r0, [r4, #21]
10065e26:	f7ed ff92 	bl	10053d4e <BLEPLAT_CNTR_SmEncOn>
10065e2a:	7d60      	ldrb	r0, [r4, #21]
10065e2c:	a916      	add	r1, sp, #88	@ 0x58
10065e2e:	f7ee f9d3 	bl	100541d8 <BLEPLAT_CNTR_SmSetTxCount>
10065e32:	7820      	ldrb	r0, [r4, #0]
10065e34:	2802      	cmp	r0, #2
10065e36:	d102      	bne.n	10065e3e <__arm_cp.0_5+0x4a6>
10065e38:	7d60      	ldrb	r0, [r4, #21]
10065e3a:	f7ee f9e9 	bl	10054210 <BLEPLAT_CNTR_SmSetTxCountDirectionBit>
10065e3e:	f7ed fd04 	bl	1005384a <BLEPLAT_CNTR_GlobEnableBlue>
10065e42:	6970      	ldr	r0, [r6, #20]
10065e44:	6801      	ldr	r1, [r0, #0]
10065e46:	2208      	movs	r2, #8
10065e48:	4391      	bics	r1, r2
10065e4a:	6001      	str	r1, [r0, #0]
10065e4c:	68b0      	ldr	r0, [r6, #8]
10065e4e:	2104      	movs	r1, #4
10065e50:	4301      	orrs	r1, r0
10065e52:	60b1      	str	r1, [r6, #8]
10065e54:	2012      	movs	r0, #18
10065e56:	f7fc fd17 	bl	10062888 <tsk_notify_idx>
10065e5a:	f7eb fe98 	bl	10051b8e <BLE_STACK_ProcessRequest>
10065e5e:	2102      	movs	r1, #2
10065e60:	4638      	mov	r0, r7
10065e62:	f7f4 fe4b 	bl	1005aafc <llc_conn_set_tx_ctrl_pdu_state>
10065e66:	6970      	ldr	r0, [r6, #20]
10065e68:	6801      	ldr	r1, [r0, #0]
10065e6a:	074a      	lsls	r2, r1, #29
10065e6c:	d506      	bpl.n	10065e7c <__arm_cp.0_5+0x4e4>
10065e6e:	2204      	movs	r2, #4
10065e70:	4391      	bics	r1, r2
10065e72:	6001      	str	r1, [r0, #0]
10065e74:	8b70      	ldrh	r0, [r6, #26]
10065e76:	9906      	ldr	r1, [sp, #24]
10065e78:	4308      	orrs	r0, r1
10065e7a:	8370      	strh	r0, [r6, #26]
10065e7c:	2101      	movs	r1, #1
10065e7e:	4638      	mov	r0, r7
10065e80:	f7f4 fb7a 	bl	1005a578 <llc_conn_get_enc_on>
10065e84:	2801      	cmp	r0, #1
10065e86:	d104      	bne.n	10065e92 <__arm_cp.0_5+0x4fa>
10065e88:	7868      	ldrb	r0, [r5, #1]
10065e8a:	2800      	cmp	r0, #0
10065e8c:	d001      	beq.n	10065e92 <__arm_cp.0_5+0x4fa>
10065e8e:	1d00      	adds	r0, r0, #4
10065e90:	7068      	strb	r0, [r5, #1]
10065e92:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065e94:	0781      	lsls	r1, r0, #30
10065e96:	d507      	bpl.n	10065ea8 <__arm_cp.0_5+0x510>
10065e98:	990c      	ldr	r1, [sp, #48]	@ 0x30
10065e9a:	7809      	ldrb	r1, [r1, #0]
10065e9c:	0709      	lsls	r1, r1, #28
10065e9e:	d503      	bpl.n	10065ea8 <__arm_cp.0_5+0x510>
10065ea0:	7d60      	ldrb	r0, [r4, #21]
10065ea2:	f000 f8ea 	bl	1006607a <llc_conn_decrement_enc_count_rx>
10065ea6:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065ea8:	0741      	lsls	r1, r0, #29
10065eaa:	d505      	bpl.n	10065eb8 <__arm_cp.0_5+0x520>
10065eac:	4630      	mov	r0, r6
10065eae:	f7fc ff07 	bl	10062cc0 <ACL_list_remove_head>
10065eb2:	f7ee ff37 	bl	10054d24 <Acl_Tx_Cmpl_Pkt_Handler>
10065eb6:	9810      	ldr	r0, [sp, #64]	@ 0x40
10065eb8:	07c0      	lsls	r0, r0, #31
10065eba:	d01e      	beq.n	10065efa <__arm_cp.0_5+0x562>
10065ebc:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065ebe:	7844      	ldrb	r4, [r0, #1]
10065ec0:	2600      	movs	r6, #0
10065ec2:	f7f3 fbe7 	bl	10059694 <data_length_extension_csr_ucfg_weak>
10065ec6:	2801      	cmp	r0, #1
10065ec8:	d001      	beq.n	10065ece <__arm_cp.0_5+0x536>
10065eca:	251f      	movs	r5, #31
10065ecc:	e000      	b.n	10065ed0 <__arm_cp.0_5+0x538>
10065ece:	43f5      	mvns	r5, r6
10065ed0:	4025      	ands	r5, r4
10065ed2:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10065ed4:	6840      	ldr	r0, [r0, #4]
10065ed6:	9911      	ldr	r1, [sp, #68]	@ 0x44
10065ed8:	1c89      	adds	r1, r1, #2
10065eda:	462a      	mov	r2, r5
10065edc:	f7fb f87a 	bl	10060fd4 <Mem_Buff_block_write>
10065ee0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
10065ee2:	61c6      	str	r6, [r0, #28]
10065ee4:	8045      	strh	r5, [r0, #2]
10065ee6:	9911      	ldr	r1, [sp, #68]	@ 0x44
10065ee8:	7809      	ldrb	r1, [r1, #0]
10065eea:	2203      	movs	r2, #3
10065eec:	400a      	ands	r2, r1
10065eee:	7a01      	ldrb	r1, [r0, #8]
10065ef0:	4311      	orrs	r1, r2
10065ef2:	7201      	strb	r1, [r0, #8]
10065ef4:	f7ee fefa 	bl	10054cec <Acl_Rcv_Pkt_Handler>
10065ef8:	67be      	str	r6, [r7, #120]	@ 0x78
10065efa:	a80e      	add	r0, sp, #56	@ 0x38
10065efc:	7e40      	ldrb	r0, [r0, #25]
10065efe:	2801      	cmp	r0, #1
10065f00:	d131      	bne.n	10065f66 <__arm_cp.0_5+0x5ce>
10065f02:	2100      	movs	r1, #0
10065f04:	4638      	mov	r0, r7
10065f06:	f7f4 fb31 	bl	1005a56c <llc_conn_get_ctrl_pdu_data_p>
10065f0a:	4605      	mov	r5, r0
10065f0c:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065f0e:	7801      	ldrb	r1, [r0, #0]
10065f10:	7840      	ldrb	r0, [r0, #1]
10065f12:	0200      	lsls	r0, r0, #8
10065f14:	1840      	adds	r0, r0, r1
10065f16:	8028      	strh	r0, [r5, #0]
10065f18:	f7f5 fe0a 	bl	1005bb30 <llc_padv_periodic_adv_sync_csr_ucfg_weak>
10065f1c:	4606      	mov	r6, r0
10065f1e:	f7f5 fdfd 	bl	1005bb1c <cis_csr_ucfg_weak>
10065f22:	4330      	orrs	r0, r6
10065f24:	b2c0      	uxtb	r0, r0
10065f26:	f7fa fa13 	bl	10060350 <LL_get_control_pdu_size>
10065f2a:	a90e      	add	r1, sp, #56	@ 0x38
10065f2c:	7d89      	ldrb	r1, [r1, #22]
10065f2e:	2920      	cmp	r1, #32
10065f30:	d001      	beq.n	10065f36 <__arm_cp.0_5+0x59e>
10065f32:	2102      	movs	r1, #2
10065f34:	e000      	b.n	10065f38 <__arm_cp.0_5+0x5a0>
10065f36:	2103      	movs	r1, #3
10065f38:	9a11      	ldr	r2, [sp, #68]	@ 0x44
10065f3a:	1851      	adds	r1, r2, r1
10065f3c:	1f00      	subs	r0, r0, #4
10065f3e:	b2c3      	uxtb	r3, r0
10065f40:	7852      	ldrb	r2, [r2, #1]
10065f42:	429a      	cmp	r2, r3
10065f44:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
10065f46:	d300      	bcc.n	10065f4a <__arm_cp.0_5+0x5b2>
10065f48:	4602      	mov	r2, r0
10065f4a:	b2d2      	uxtb	r2, r2
10065f4c:	1ca8      	adds	r0, r5, #2
10065f4e:	f7ec fc05 	bl	1005275c <BLEPLAT_MemCpy>
10065f52:	6920      	ldr	r0, [r4, #16]
10065f54:	6801      	ldr	r1, [r0, #0]
10065f56:	2201      	movs	r2, #1
10065f58:	430a      	orrs	r2, r1
10065f5a:	6002      	str	r2, [r0, #0]
10065f5c:	2015      	movs	r0, #21
10065f5e:	f7fc fc93 	bl	10062888 <tsk_notify_idx>
10065f62:	f7eb fe14 	bl	10051b8e <BLE_STACK_ProcessRequest>
10065f66:	ad0e      	add	r5, sp, #56	@ 0x38
10065f68:	4638      	mov	r0, r7
10065f6a:	4629      	mov	r1, r5
10065f6c:	f000 f80e 	bl	10065f8c <llc_conn_check_subrate_and_set_params_ucfg_weak>
10065f70:	7da8      	ldrb	r0, [r5, #22]
10065f72:	2820      	cmp	r0, #32
10065f74:	d000      	beq.n	10065f78 <__arm_cp.0_5+0x5e0>
10065f76:	e495      	b.n	100658a4 <llc_conn_isr+0x300>
10065f78:	9811      	ldr	r0, [sp, #68]	@ 0x44
10065f7a:	7880      	ldrb	r0, [r0, #2]
10065f7c:	0981      	lsrs	r1, r0, #6
10065f7e:	4638      	mov	r0, r7
10065f80:	f7f7 f953 	bl	1005d22a <llc_cte_process_rx_cte_ucfg_weak>
10065f84:	e48e      	b.n	100658a4 <llc_conn_isr+0x300>
10065f86:	46c0      	nop			@ (mov r8, r8)

10065f88 <__arm_cp.0_2>:
10065f88:	20002ad0 	.word	0x20002ad0

10065f8c <llc_conn_check_subrate_and_set_params_ucfg_weak>:
10065f8c:	4770      	bx	lr

10065f8e <llc_conn_close_event>:
10065f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
10065f90:	b085      	sub	sp, #20
10065f92:	4605      	mov	r5, r0
10065f94:	2045      	movs	r0, #69	@ 0x45
10065f96:	0080      	lsls	r0, r0, #2
10065f98:	9003      	str	r0, [sp, #12]
10065f9a:	5828      	ldr	r0, [r5, r0]
10065f9c:	462e      	mov	r6, r5
10065f9e:	3642      	adds	r6, #66	@ 0x42
10065fa0:	2800      	cmp	r0, #0
10065fa2:	d002      	beq.n	10065faa <llc_conn_close_event+0x1c>
10065fa4:	8881      	ldrh	r1, [r0, #4]
10065fa6:	1c49      	adds	r1, r1, #1
10065fa8:	8081      	strh	r1, [r0, #4]
10065faa:	462c      	mov	r4, r5
10065fac:	3480      	adds	r4, #128	@ 0x80
10065fae:	4628      	mov	r0, r5
10065fb0:	f7f5 fe51 	bl	1005bc56 <llc_subrate_update_cont_counter_ucfg_weak>
10065fb4:	6c68      	ldr	r0, [r5, #68]	@ 0x44
10065fb6:	9002      	str	r0, [sp, #8]
10065fb8:	8837      	ldrh	r7, [r6, #0]
10065fba:	4628      	mov	r0, r5
10065fbc:	f7f4 fa70 	bl	1005a4a0 <llc_conn_enhanced_get_latency>
10065fc0:	4602      	mov	r2, r0
10065fc2:	4628      	mov	r0, r5
10065fc4:	4639      	mov	r1, r7
10065fc6:	f7f4 fdaa 	bl	1005ab1e <llc_conn_calc_skip_ucfg_weak>
10065fca:	6cea      	ldr	r2, [r5, #76]	@ 0x4c
10065fcc:	4342      	muls	r2, r0
10065fce:	6c69      	ldr	r1, [r5, #68]	@ 0x44
10065fd0:	1889      	adds	r1, r1, r2
10065fd2:	6469      	str	r1, [r5, #68]	@ 0x44
10065fd4:	9001      	str	r0, [sp, #4]
10065fd6:	1838      	adds	r0, r7, r0
10065fd8:	9004      	str	r0, [sp, #16]
10065fda:	b287      	uxth	r7, r0
10065fdc:	8830      	ldrh	r0, [r6, #0]
10065fde:	42b8      	cmp	r0, r7
10065fe0:	d907      	bls.n	10065ff2 <llc_conn_close_event+0x64>
10065fe2:	9803      	ldr	r0, [sp, #12]
10065fe4:	1828      	adds	r0, r5, r0
10065fe6:	2109      	movs	r1, #9
10065fe8:	0149      	lsls	r1, r1, #5
10065fea:	1869      	adds	r1, r5, r1
10065fec:	89c0      	ldrh	r0, [r0, #14]
10065fee:	f7f5 fe31 	bl	1005bc54 <llc_subrate_new_sr_base_event_ucfg_weak>
10065ff2:	68a0      	ldr	r0, [r4, #8]
10065ff4:	2180      	movs	r1, #128	@ 0x80
10065ff6:	4388      	bics	r0, r1
10065ff8:	60a0      	str	r0, [r4, #8]
10065ffa:	4628      	mov	r0, r5
10065ffc:	4639      	mov	r1, r7
10065ffe:	f7f4 fe31 	bl	1005ac64 <llc_conn_check_instant_and_set_params>
10066002:	4607      	mov	r7, r0
10066004:	9804      	ldr	r0, [sp, #16]
10066006:	8030      	strh	r0, [r6, #0]
10066008:	2f00      	cmp	r7, #0
1006600a:	d118      	bne.n	1006603e <llc_conn_close_event+0xb0>
1006600c:	6c68      	ldr	r0, [r5, #68]	@ 0x44
1006600e:	9902      	ldr	r1, [sp, #8]
10066010:	1a46      	subs	r6, r0, r1
10066012:	4628      	mov	r0, r5
10066014:	4631      	mov	r1, r6
10066016:	f7f4 feb9 	bl	1005ad8c <llc_conn_check_supervision_timer>
1006601a:	4607      	mov	r7, r0
1006601c:	2800      	cmp	r0, #0
1006601e:	d10e      	bne.n	1006603e <llc_conn_close_event+0xb0>
10066020:	4628      	mov	r0, r5
10066022:	4631      	mov	r1, r6
10066024:	f7f4 fde8 	bl	1005abf8 <llc_conn_check_ctrl_proc_rsp_timer>
10066028:	4607      	mov	r7, r0
1006602a:	2800      	cmp	r0, #0
1006602c:	d107      	bne.n	1006603e <llc_conn_close_event+0xb0>
1006602e:	4628      	mov	r0, r5
10066030:	4631      	mov	r1, r6
10066032:	9a01      	ldr	r2, [sp, #4]
10066034:	f7f5 fb1c 	bl	1005b670 <llc_conn_set_taskslot_params>
10066038:	4607      	mov	r7, r0
1006603a:	2800      	cmp	r0, #0
1006603c:	d006      	beq.n	1006604c <llc_conn_close_event+0xbe>
1006603e:	352d      	adds	r5, #45	@ 0x2d
10066040:	7d28      	ldrb	r0, [r5, #20]
10066042:	f7fa fc5b 	bl	100608fc <LL_sched_delete_taskslot>
10066046:	702f      	strb	r7, [r5, #0]
10066048:	2000      	movs	r0, #0
1006604a:	8360      	strh	r0, [r4, #26]
1006604c:	6820      	ldr	r0, [r4, #0]
1006604e:	2800      	cmp	r0, #0
10066050:	d001      	beq.n	10066056 <llc_conn_close_event+0xc8>
10066052:	69c6      	ldr	r6, [r0, #28]
10066054:	e00d      	b.n	10066072 <llc_conn_close_event+0xe4>
10066056:	2600      	movs	r6, #0
10066058:	e00b      	b.n	10066072 <llc_conn_close_event+0xe4>
1006605a:	4635      	mov	r5, r6
1006605c:	69f6      	ldr	r6, [r6, #28]
1006605e:	7a28      	ldrb	r0, [r5, #8]
10066060:	0700      	lsls	r0, r0, #28
10066062:	d506      	bpl.n	10066072 <llc_conn_close_event+0xe4>
10066064:	4620      	mov	r0, r4
10066066:	4629      	mov	r1, r5
10066068:	f7fc fe14 	bl	10062c94 <ACL_list_remove>
1006606c:	4628      	mov	r0, r5
1006606e:	f7ee ff0d 	bl	10054e8c <ACL_pkt_release>
10066072:	2e00      	cmp	r6, #0
10066074:	d1f1      	bne.n	1006605a <llc_conn_close_event+0xcc>
10066076:	b005      	add	sp, #20
10066078:	bdf0      	pop	{r4, r5, r6, r7, pc}

1006607a <llc_conn_decrement_enc_count_rx>:
1006607a:	b51c      	push	{r2, r3, r4, lr}
1006607c:	4604      	mov	r4, r0
1006607e:	4669      	mov	r1, sp
10066080:	f7ed ff23 	bl	10053eca <BLEPLAT_CNTR_SmGetRxCount>
10066084:	9800      	ldr	r0, [sp, #0]
10066086:	1e41      	subs	r1, r0, #1
10066088:	9100      	str	r1, [sp, #0]
1006608a:	2800      	cmp	r0, #0
1006608c:	d102      	bne.n	10066094 <llc_conn_decrement_enc_count_rx+0x1a>
1006608e:	9801      	ldr	r0, [sp, #4]
10066090:	1e40      	subs	r0, r0, #1
10066092:	9001      	str	r0, [sp, #4]
10066094:	4669      	mov	r1, sp
10066096:	4620      	mov	r0, r4
10066098:	f7ee f82a 	bl	100540f0 <BLEPLAT_CNTR_SmSetRxCount>
1006609c:	bd1c      	pop	{r2, r3, r4, pc}
	...

100660a0 <llc_check_sreq_or_creq_tx_addr_res_off>:
100660a0:	b570      	push	{r4, r5, r6, lr}
100660a2:	b084      	sub	sp, #16
100660a4:	4615      	mov	r5, r2
100660a6:	460a      	mov	r2, r1
100660a8:	4604      	mov	r4, r0
100660aa:	2b00      	cmp	r3, #0
100660ac:	d007      	beq.n	100660be <llc_check_sreq_or_creq_tx_addr_res_off+0x1e>
100660ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
100660b0:	4282      	cmp	r2, r0
100660b2:	d11f      	bne.n	100660f4 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
100660b4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
100660b6:	4068      	eors	r0, r5
100660b8:	0200      	lsls	r0, r0, #8
100660ba:	d11b      	bne.n	100660f4 <llc_check_sreq_or_creq_tx_addr_res_off+0x54>
100660bc:	e01b      	b.n	100660f6 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100660be:	9809      	ldr	r0, [sp, #36]	@ 0x24
100660c0:	9908      	ldr	r1, [sp, #32]
100660c2:	2301      	movs	r3, #1
100660c4:	2900      	cmp	r1, #0
100660c6:	d002      	beq.n	100660ce <llc_check_sreq_or_creq_tx_addr_res_off+0x2e>
100660c8:	4606      	mov	r6, r0
100660ca:	401e      	ands	r6, r3
100660cc:	d104      	bne.n	100660d8 <llc_check_sreq_or_creq_tx_addr_res_off+0x38>
100660ce:	2900      	cmp	r1, #0
100660d0:	d111      	bne.n	100660f6 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100660d2:	2102      	movs	r1, #2
100660d4:	4008      	ands	r0, r1
100660d6:	d00e      	beq.n	100660f6 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100660d8:	4808      	ldr	r0, [pc, #32]	@ (100660fc <__arm_cp.1_0>)
100660da:	6800      	ldr	r0, [r0, #0]
100660dc:	219c      	movs	r1, #156	@ 0x9c
100660de:	5841      	ldr	r1, [r0, r1]
100660e0:	68c8      	ldr	r0, [r1, #12]
100660e2:	6909      	ldr	r1, [r1, #16]
100660e4:	ae03      	add	r6, sp, #12
100660e6:	9300      	str	r3, [sp, #0]
100660e8:	9601      	str	r6, [sp, #4]
100660ea:	462b      	mov	r3, r5
100660ec:	f7fc fdfc 	bl	10062ce8 <addr8_list_search>
100660f0:	2800      	cmp	r0, #0
100660f2:	d100      	bne.n	100660f6 <llc_check_sreq_or_creq_tx_addr_res_off+0x56>
100660f4:	24ff      	movs	r4, #255	@ 0xff
100660f6:	4620      	mov	r0, r4
100660f8:	b004      	add	sp, #16
100660fa:	bd70      	pop	{r4, r5, r6, pc}

100660fc <__arm_cp.1_0>:
100660fc:	20002ad0 	.word	0x20002ad0

10066100 <llc_check_sreq_or_creq_tx_addr_ucfg_weak>:
10066100:	b5f0      	push	{r4, r5, r6, r7, lr}
10066102:	b087      	sub	sp, #28
10066104:	1ecd      	subs	r5, r1, #3
10066106:	21ff      	movs	r1, #255	@ 0xff
10066108:	24fd      	movs	r4, #253	@ 0xfd
1006610a:	4225      	tst	r5, r4
1006610c:	d11c      	bne.n	10066148 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
1006610e:	2a00      	cmp	r2, #0
10066110:	d01a      	beq.n	10066148 <llc_check_sreq_or_creq_tx_addr_ucfg_weak+0x48>
10066112:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
10066114:	990c      	ldr	r1, [sp, #48]	@ 0x30
10066116:	680c      	ldr	r4, [r1, #0]
10066118:	9405      	str	r4, [sp, #20]
1006611a:	9306      	str	r3, [sp, #24]
1006611c:	684b      	ldr	r3, [r1, #4]
1006611e:	c882      	ldmia	r0!, {r1, r7}
10066120:	20ff      	movs	r0, #255	@ 0xff
10066122:	0600      	lsls	r0, r0, #24
10066124:	463c      	mov	r4, r7
10066126:	4384      	bics	r4, r0
10066128:	c612      	stmia	r6!, {r1, r4}
1006612a:	9303      	str	r3, [sp, #12]
1006612c:	9805      	ldr	r0, [sp, #20]
1006612e:	9002      	str	r0, [sp, #8]
10066130:	9806      	ldr	r0, [sp, #24]
10066132:	9001      	str	r0, [sp, #4]
10066134:	4268      	negs	r0, r5
10066136:	4168      	adcs	r0, r5
10066138:	9000      	str	r0, [sp, #0]
1006613a:	b2c8      	uxtb	r0, r1
1006613c:	0752      	lsls	r2, r2, #29
1006613e:	0fd3      	lsrs	r3, r2, #31
10066140:	463a      	mov	r2, r7
10066142:	f7ff ffad 	bl	100660a0 <llc_check_sreq_or_creq_tx_addr_res_off>
10066146:	4601      	mov	r1, r0
10066148:	4608      	mov	r0, r1
1006614a:	b007      	add	sp, #28
1006614c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

10066150 <llc_wl_mem_allocate>:
10066150:	b510      	push	{r4, lr}
10066152:	2401      	movs	r4, #1
10066154:	4084      	lsls	r4, r0
10066156:	2108      	movs	r1, #8
10066158:	4620      	mov	r0, r4
1006615a:	f7fa fdbf 	bl	10060cdc <csmem_mem_0_assign>
1006615e:	4903      	ldr	r1, [pc, #12]	@ (1006616c <__arm_cp.0_0>)
10066160:	6809      	ldr	r1, [r1, #0]
10066162:	229c      	movs	r2, #156	@ 0x9c
10066164:	5889      	ldr	r1, [r1, r2]
10066166:	744c      	strb	r4, [r1, #17]
10066168:	60c8      	str	r0, [r1, #12]
1006616a:	bd10      	pop	{r4, pc}

1006616c <__arm_cp.0_0>:
1006616c:	20002ad0 	.word	0x20002ad0

10066170 <llc_padv_mem_allocate_ucfg_weak>:
10066170:	4770      	bx	lr

10066172 <llc_padv_init_ucfg_weak>:
10066172:	4770      	bx	lr

10066174 <llc_past_mem_allocate_ucfg_weak>:
10066174:	4770      	bx	lr
	...

10066178 <llc_priv_mem_allocate>:
10066178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006617a:	2800      	cmp	r0, #0
1006617c:	d046      	beq.n	1006620c <llc_priv_mem_allocate+0x94>
1006617e:	460e      	mov	r6, r1
10066180:	2501      	movs	r5, #1
10066182:	2168      	movs	r1, #104	@ 0x68
10066184:	4628      	mov	r0, r5
10066186:	f7fa fda9 	bl	10060cdc <csmem_mem_0_assign>
1006618a:	4f21      	ldr	r7, [pc, #132]	@ (10066210 <__arm_cp.0_0>)
1006618c:	6839      	ldr	r1, [r7, #0]
1006618e:	249c      	movs	r4, #156	@ 0x9c
10066190:	5909      	ldr	r1, [r1, r4]
10066192:	6088      	str	r0, [r1, #8]
10066194:	40b5      	lsls	r5, r6
10066196:	b2ee      	uxtb	r6, r5
10066198:	2108      	movs	r1, #8
1006619a:	4630      	mov	r0, r6
1006619c:	f7fa fd9e 	bl	10060cdc <csmem_mem_0_assign>
100661a0:	6839      	ldr	r1, [r7, #0]
100661a2:	5909      	ldr	r1, [r1, r4]
100661a4:	6889      	ldr	r1, [r1, #8]
100661a6:	724d      	strb	r5, [r1, #9]
100661a8:	6048      	str	r0, [r1, #4]
100661aa:	9600      	str	r6, [sp, #0]
100661ac:	0075      	lsls	r5, r6, #1
100661ae:	2611      	movs	r6, #17
100661b0:	2e21      	cmp	r6, #33	@ 0x21
100661b2:	d00f      	beq.n	100661d4 <llc_priv_mem_allocate+0x5c>
100661b4:	2108      	movs	r1, #8
100661b6:	4628      	mov	r0, r5
100661b8:	f7fa fd90 	bl	10060cdc <csmem_mem_0_assign>
100661bc:	6839      	ldr	r1, [r7, #0]
100661be:	5909      	ldr	r1, [r1, r4]
100661c0:	6889      	ldr	r1, [r1, #8]
100661c2:	1989      	adds	r1, r1, r6
100661c4:	1f49      	subs	r1, r1, #5
100661c6:	6008      	str	r0, [r1, #0]
100661c8:	6838      	ldr	r0, [r7, #0]
100661ca:	5900      	ldr	r0, [r0, r4]
100661cc:	6880      	ldr	r0, [r0, #8]
100661ce:	5585      	strb	r5, [r0, r6]
100661d0:	3608      	adds	r6, #8
100661d2:	e7ed      	b.n	100661b0 <llc_priv_mem_allocate+0x38>
100661d4:	2128      	movs	r1, #40	@ 0x28
100661d6:	9800      	ldr	r0, [sp, #0]
100661d8:	f7fa fd80 	bl	10060cdc <csmem_mem_0_assign>
100661dc:	6839      	ldr	r1, [r7, #0]
100661de:	5909      	ldr	r1, [r1, r4]
100661e0:	6889      	ldr	r1, [r1, #8]
100661e2:	6008      	str	r0, [r1, #0]
100661e4:	480b      	ldr	r0, [pc, #44]	@ (10066214 <__arm_cp.0_1>)
100661e6:	2502      	movs	r5, #2
100661e8:	2601      	movs	r6, #1
100661ea:	4629      	mov	r1, r5
100661ec:	4632      	mov	r2, r6
100661ee:	f7fa fd63 	bl	10060cb8 <csmem_mem_assign>
100661f2:	6839      	ldr	r1, [r7, #0]
100661f4:	5909      	ldr	r1, [r1, r4]
100661f6:	6889      	ldr	r1, [r1, #8]
100661f8:	6488      	str	r0, [r1, #72]	@ 0x48
100661fa:	4806      	ldr	r0, [pc, #24]	@ (10066214 <__arm_cp.0_1>)
100661fc:	4631      	mov	r1, r6
100661fe:	462a      	mov	r2, r5
10066200:	f7fa fd5a 	bl	10060cb8 <csmem_mem_assign>
10066204:	6839      	ldr	r1, [r7, #0]
10066206:	5909      	ldr	r1, [r1, r4]
10066208:	6889      	ldr	r1, [r1, #8]
1006620a:	64c8      	str	r0, [r1, #76]	@ 0x4c
1006620c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006620e:	46c0      	nop			@ (mov r8, r8)

10066210 <__arm_cp.0_0>:
10066210:	20002ad0 	.word	0x20002ad0

10066214 <__arm_cp.0_1>:
10066214:	20002ae0 	.word	0x20002ae0

10066218 <llc_pscan_isr_ucfg_weak>:
10066218:	2000      	movs	r0, #0
1006621a:	4770      	bx	lr

1006621c <llc_scan_isr_uncoded_ucfg_weak>:
1006621c:	2000      	movs	r0, #0
1006621e:	4770      	bx	lr

10066220 <llc_scan_isr_coded_ucfg_weak>:
10066220:	2000      	movs	r0, #0
10066222:	4770      	bx	lr

10066224 <smp_dep_gap_get_local_identity_address>:
10066224:	b580      	push	{r7, lr}
10066226:	4a0a      	ldr	r2, [pc, #40]	@ (10066250 <__arm_cp.0_0>)
10066228:	6812      	ldr	r2, [r2, #0]
1006622a:	233d      	movs	r3, #61	@ 0x3d
1006622c:	5cd2      	ldrb	r2, [r2, r3]
1006622e:	7002      	strb	r2, [r0, #0]
10066230:	2a01      	cmp	r2, #1
10066232:	d005      	beq.n	10066240 <smp_dep_gap_get_local_identity_address+0x1c>
10066234:	2a00      	cmp	r2, #0
10066236:	d108      	bne.n	1006624a <smp_dep_gap_get_local_identity_address+0x26>
10066238:	4608      	mov	r0, r1
1006623a:	f7f0 f94f 	bl	100564dc <GAP_get_public_address>
1006623e:	e002      	b.n	10066246 <smp_dep_gap_get_local_identity_address+0x22>
10066240:	4608      	mov	r0, r1
10066242:	f7f0 f955 	bl	100564f0 <GAP_get_static_random_address>
10066246:	2000      	movs	r0, #0
10066248:	bd80      	pop	{r7, pc}
1006624a:	2086      	movs	r0, #134	@ 0x86
1006624c:	bd80      	pop	{r7, pc}
1006624e:	46c0      	nop			@ (mov r8, r8)

10066250 <__arm_cp.0_0>:
10066250:	20002b1c 	.word	0x20002b1c

10066254 <smp_dep_l2c_send_acl_packet>:
10066254:	b570      	push	{r4, r5, r6, lr}
10066256:	460d      	mov	r5, r1
10066258:	4606      	mov	r6, r0
1006625a:	2006      	movs	r0, #6
1006625c:	f7f3 fc58 	bl	10059b10 <L2C_send_frame>
10066260:	4604      	mov	r4, r0
10066262:	2800      	cmp	r0, #0
10066264:	d003      	beq.n	1006626e <smp_dep_l2c_send_acl_packet+0x1a>
10066266:	4628      	mov	r0, r5
10066268:	f7ee fe10 	bl	10054e8c <ACL_pkt_release>
1006626c:	e008      	b.n	10066280 <smp_dep_l2c_send_acl_packet+0x2c>
1006626e:	8930      	ldrh	r0, [r6, #8]
10066270:	f001 f8de 	bl	10067430 <smp_get_remote_device_list_index>
10066274:	4602      	mov	r2, r0
10066276:	2000      	movs	r0, #0
10066278:	4b02      	ldr	r3, [pc, #8]	@ (10066284 <__arm_cp.0_0>)
1006627a:	4601      	mov	r1, r0
1006627c:	f7fb fda0 	bl	10061dc0 <smp_timer_reset>
10066280:	4620      	mov	r0, r4
10066282:	bd70      	pop	{r4, r5, r6, pc}

10066284 <__arm_cp.0_0>:
10066284:	00007530 	.word	0x00007530

10066288 <smp_dep_l2c_send_acl_short_pdu>:
10066288:	b5b0      	push	{r4, r5, r7, lr}
1006628a:	461c      	mov	r4, r3
1006628c:	4615      	mov	r5, r2
1006628e:	2900      	cmp	r1, #0
10066290:	d107      	bne.n	100662a2 <smp_dep_l2c_send_acl_short_pdu+0x1a>
10066292:	8901      	ldrh	r1, [r0, #8]
10066294:	2000      	movs	r0, #0
10066296:	2206      	movs	r2, #6
10066298:	f7ee fdd6 	bl	10054e48 <ACL_pkt_get>
1006629c:	4601      	mov	r1, r0
1006629e:	2800      	cmp	r0, #0
100662a0:	d009      	beq.n	100662b6 <smp_dep_l2c_send_acl_short_pdu+0x2e>
100662a2:	2002      	movs	r0, #2
100662a4:	8048      	strh	r0, [r1, #2]
100662a6:	6848      	ldr	r0, [r1, #4]
100662a8:	7205      	strb	r5, [r0, #8]
100662aa:	6848      	ldr	r0, [r1, #4]
100662ac:	7244      	strb	r4, [r0, #9]
100662ae:	2006      	movs	r0, #6
100662b0:	f7f3 fc2e 	bl	10059b10 <L2C_send_frame>
100662b4:	bdb0      	pop	{r4, r5, r7, pc}
100662b6:	2088      	movs	r0, #136	@ 0x88
100662b8:	bdb0      	pop	{r4, r5, r7, pc}

100662ba <smp_dep_sdb_get_bonding_records_count>:
100662ba:	b580      	push	{r7, lr}
100662bc:	f7fb f8dc 	bl	10061478 <sdb_sap_get_security_records_count>
100662c0:	bd80      	pop	{r7, pc}

100662c2 <smp_dep_sdb_add_bonding_record>:
100662c2:	b5f0      	push	{r4, r5, r6, r7, lr}
100662c4:	b097      	sub	sp, #92	@ 0x5c
100662c6:	4604      	mov	r4, r0
100662c8:	ae03      	add	r6, sp, #12
100662ca:	2100      	movs	r1, #0
100662cc:	2250      	movs	r2, #80	@ 0x50
100662ce:	4630      	mov	r0, r6
100662d0:	f7ec fa54 	bl	1005277c <BLEPLAT_MemSet>
100662d4:	2059      	movs	r0, #89	@ 0x59
100662d6:	5c20      	ldrb	r0, [r4, r0]
100662d8:	7871      	ldrb	r1, [r6, #1]
100662da:	4301      	orrs	r1, r0
100662dc:	7071      	strb	r1, [r6, #1]
100662de:	4630      	mov	r0, r6
100662e0:	303e      	adds	r0, #62	@ 0x3e
100662e2:	4621      	mov	r1, r4
100662e4:	315a      	adds	r1, #90	@ 0x5a
100662e6:	2506      	movs	r5, #6
100662e8:	462a      	mov	r2, r5
100662ea:	f7ec fa37 	bl	1005275c <BLEPLAT_MemCpy>
100662ee:	7c20      	ldrb	r0, [r4, #16]
100662f0:	70f0      	strb	r0, [r6, #3]
100662f2:	7de0      	ldrb	r0, [r4, #23]
100662f4:	0701      	lsls	r1, r0, #28
100662f6:	d416      	bmi.n	10066326 <smp_dep_sdb_add_bonding_record+0x64>
100662f8:	2011      	movs	r0, #17
100662fa:	5620      	ldrsb	r0, [r4, r0]
100662fc:	2800      	cmp	r0, #0
100662fe:	d504      	bpl.n	1006630a <smp_dep_sdb_add_bonding_record+0x48>
10066300:	a803      	add	r0, sp, #12
10066302:	7841      	ldrb	r1, [r0, #1]
10066304:	2280      	movs	r2, #128	@ 0x80
10066306:	430a      	orrs	r2, r1
10066308:	7042      	strb	r2, [r0, #1]
1006630a:	ae03      	add	r6, sp, #12
1006630c:	1d30      	adds	r0, r6, #4
1006630e:	4621      	mov	r1, r4
10066310:	311e      	adds	r1, #30
10066312:	2202      	movs	r2, #2
10066314:	f7ec fa22 	bl	1005275c <BLEPLAT_MemCpy>
10066318:	1db0      	adds	r0, r6, #6
1006631a:	4621      	mov	r1, r4
1006631c:	3120      	adds	r1, #32
1006631e:	2208      	movs	r2, #8
10066320:	f7ec fa1c 	bl	1005275c <BLEPLAT_MemCpy>
10066324:	e003      	b.n	1006632e <smp_dep_sdb_add_bonding_record+0x6c>
10066326:	21fe      	movs	r1, #254	@ 0xfe
10066328:	4008      	ands	r0, r1
1006632a:	a903      	add	r1, sp, #12
1006632c:	7088      	strb	r0, [r1, #2]
1006632e:	a803      	add	r0, sp, #12
10066330:	300e      	adds	r0, #14
10066332:	4621      	mov	r1, r4
10066334:	3128      	adds	r1, #40	@ 0x28
10066336:	2610      	movs	r6, #16
10066338:	4632      	mov	r2, r6
1006633a:	f7ec fa0f 	bl	1005275c <BLEPLAT_MemCpy>
1006633e:	7c60      	ldrb	r0, [r4, #17]
10066340:	0681      	lsls	r1, r0, #26
10066342:	d50c      	bpl.n	1006635e <smp_dep_sdb_add_bonding_record+0x9c>
10066344:	af03      	add	r7, sp, #12
10066346:	4638      	mov	r0, r7
10066348:	301e      	adds	r0, #30
1006634a:	4621      	mov	r1, r4
1006634c:	3138      	adds	r1, #56	@ 0x38
1006634e:	2210      	movs	r2, #16
10066350:	f7ec fa04 	bl	1005275c <BLEPLAT_MemCpy>
10066354:	7878      	ldrb	r0, [r7, #1]
10066356:	2120      	movs	r1, #32
10066358:	4301      	orrs	r1, r0
1006635a:	7079      	strb	r1, [r7, #1]
1006635c:	7c60      	ldrb	r0, [r4, #17]
1006635e:	0640      	lsls	r0, r0, #25
10066360:	d50b      	bpl.n	1006637a <smp_dep_sdb_add_bonding_record+0xb8>
10066362:	af03      	add	r7, sp, #12
10066364:	4638      	mov	r0, r7
10066366:	302e      	adds	r0, #46	@ 0x2e
10066368:	4621      	mov	r1, r4
1006636a:	3148      	adds	r1, #72	@ 0x48
1006636c:	2210      	movs	r2, #16
1006636e:	f7ec f9f5 	bl	1005275c <BLEPLAT_MemCpy>
10066372:	7878      	ldrb	r0, [r7, #1]
10066374:	2140      	movs	r1, #64	@ 0x40
10066376:	4301      	orrs	r1, r0
10066378:	7079      	strb	r1, [r7, #1]
1006637a:	7ca0      	ldrb	r0, [r4, #18]
1006637c:	2105      	movs	r1, #5
1006637e:	4208      	tst	r0, r1
10066380:	d00a      	beq.n	10066398 <smp_dep_sdb_add_bonding_record+0xd6>
10066382:	af03      	add	r7, sp, #12
10066384:	4638      	mov	r0, r7
10066386:	3044      	adds	r0, #68	@ 0x44
10066388:	4621      	mov	r1, r4
1006638a:	311c      	adds	r1, #28
1006638c:	2202      	movs	r2, #2
1006638e:	f7ec f9e5 	bl	1005275c <BLEPLAT_MemCpy>
10066392:	7878      	ldrb	r0, [r7, #1]
10066394:	4330      	orrs	r0, r6
10066396:	e001      	b.n	1006639c <smp_dep_sdb_add_bonding_record+0xda>
10066398:	a803      	add	r0, sp, #12
1006639a:	7840      	ldrb	r0, [r0, #1]
1006639c:	7ae1      	ldrb	r1, [r4, #11]
1006639e:	4029      	ands	r1, r5
100663a0:	4301      	orrs	r1, r0
100663a2:	a803      	add	r0, sp, #12
100663a4:	7041      	strb	r1, [r0, #1]
100663a6:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
100663a8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
100663aa:	9115      	str	r1, [sp, #84]	@ 0x54
100663ac:	9216      	str	r2, [sp, #88]	@ 0x58
100663ae:	f7fb f867 	bl	10061480 <sdb_sap_add_security_record>
100663b2:	4605      	mov	r5, r0
100663b4:	2800      	cmp	r0, #0
100663b6:	d00c      	beq.n	100663d2 <smp_dep_sdb_add_bonding_record+0x110>
100663b8:	1ca1      	adds	r1, r4, #2
100663ba:	ac01      	add	r4, sp, #4
100663bc:	2206      	movs	r2, #6
100663be:	4620      	mov	r0, r4
100663c0:	f7ec f9cc 	bl	1005275c <BLEPLAT_MemCpy>
100663c4:	71a5      	strb	r5, [r4, #6]
100663c6:	2042      	movs	r0, #66	@ 0x42
100663c8:	2105      	movs	r1, #5
100663ca:	2207      	movs	r2, #7
100663cc:	4623      	mov	r3, r4
100663ce:	f7fd fe51 	bl	10064074 <aci_hal_fw_error_event_push_noinline>
100663d2:	4628      	mov	r0, r5
100663d4:	b017      	add	sp, #92	@ 0x5c
100663d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

100663d8 <smp_dep_sdb_find_bonding_record_by_conn_addr>:
100663d8:	b570      	push	{r4, r5, r6, lr}
100663da:	b094      	sub	sp, #80	@ 0x50
100663dc:	460e      	mov	r6, r1
100663de:	4604      	mov	r4, r0
100663e0:	7841      	ldrb	r1, [r0, #1]
100663e2:	1c80      	adds	r0, r0, #2
100663e4:	466a      	mov	r2, sp
100663e6:	f7fb f86e 	bl	100614c6 <sdb_sap_read_security_record>
100663ea:	4605      	mov	r5, r0
100663ec:	2e00      	cmp	r6, #0
100663ee:	d005      	beq.n	100663fc <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100663f0:	2d00      	cmp	r5, #0
100663f2:	d103      	bne.n	100663fc <smp_dep_sdb_find_bonding_record_by_conn_addr+0x24>
100663f4:	4668      	mov	r0, sp
100663f6:	4621      	mov	r1, r4
100663f8:	f000 f804 	bl	10066404 <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100663fc:	4628      	mov	r0, r5
100663fe:	b014      	add	sp, #80	@ 0x50
10066400:	bd70      	pop	{r4, r5, r6, pc}
	...

10066404 <smp_dep_sdb_copy_bonding_record_data_to_remdev>:
10066404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10066406:	460c      	mov	r4, r1
10066408:	4605      	mov	r5, r0
1006640a:	2001      	movs	r0, #1
1006640c:	7388      	strb	r0, [r1, #14]
1006640e:	78e8      	ldrb	r0, [r5, #3]
10066410:	7408      	strb	r0, [r1, #16]
10066412:	4608      	mov	r0, r1
10066414:	301c      	adds	r0, #28
10066416:	4629      	mov	r1, r5
10066418:	3144      	adds	r1, #68	@ 0x44
1006641a:	2602      	movs	r6, #2
1006641c:	4f19      	ldr	r7, [pc, #100]	@ (10066484 <__arm_cp.3_0>)
1006641e:	4632      	mov	r2, r6
10066420:	47b8      	blx	r7
10066422:	4620      	mov	r0, r4
10066424:	301e      	adds	r0, #30
10066426:	1d29      	adds	r1, r5, #4
10066428:	4632      	mov	r2, r6
1006642a:	47b8      	blx	r7
1006642c:	4620      	mov	r0, r4
1006642e:	3020      	adds	r0, #32
10066430:	1da9      	adds	r1, r5, #6
10066432:	2208      	movs	r2, #8
10066434:	47b8      	blx	r7
10066436:	4620      	mov	r0, r4
10066438:	3028      	adds	r0, #40	@ 0x28
1006643a:	4629      	mov	r1, r5
1006643c:	310e      	adds	r1, #14
1006643e:	2610      	movs	r6, #16
10066440:	4632      	mov	r2, r6
10066442:	47b8      	blx	r7
10066444:	4620      	mov	r0, r4
10066446:	3038      	adds	r0, #56	@ 0x38
10066448:	4629      	mov	r1, r5
1006644a:	311e      	adds	r1, #30
1006644c:	4632      	mov	r2, r6
1006644e:	47b8      	blx	r7
10066450:	4620      	mov	r0, r4
10066452:	3048      	adds	r0, #72	@ 0x48
10066454:	4629      	mov	r1, r5
10066456:	312e      	adds	r1, #46	@ 0x2e
10066458:	4632      	mov	r2, r6
1006645a:	47b8      	blx	r7
1006645c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
1006645e:	66a0      	str	r0, [r4, #104]	@ 0x68
10066460:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
10066462:	66e0      	str	r0, [r4, #108]	@ 0x6c
10066464:	7868      	ldrb	r0, [r5, #1]
10066466:	2106      	movs	r1, #6
10066468:	4001      	ands	r1, r0
1006646a:	72e1      	strb	r1, [r4, #11]
1006646c:	21e0      	movs	r1, #224	@ 0xe0
1006646e:	4001      	ands	r1, r0
10066470:	7c60      	ldrb	r0, [r4, #17]
10066472:	4308      	orrs	r0, r1
10066474:	7460      	strb	r0, [r4, #17]
10066476:	78a8      	ldrb	r0, [r5, #2]
10066478:	0701      	lsls	r1, r0, #28
1006647a:	d502      	bpl.n	10066482 <smp_dep_sdb_copy_bonding_record_data_to_remdev+0x7e>
1006647c:	21fe      	movs	r1, #254	@ 0xfe
1006647e:	4008      	ands	r0, r1
10066480:	75e0      	strb	r0, [r4, #23]
10066482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066484 <__arm_cp.3_0>:
10066484:	1005275d 	.word	0x1005275d

10066488 <smp_dep_sdb_find_bonding_record_read_address>:
10066488:	b570      	push	{r4, r5, r6, lr}
1006648a:	b094      	sub	sp, #80	@ 0x50
1006648c:	4614      	mov	r4, r2
1006648e:	460e      	mov	r6, r1
10066490:	7841      	ldrb	r1, [r0, #1]
10066492:	1c80      	adds	r0, r0, #2
10066494:	466a      	mov	r2, sp
10066496:	f7fb f816 	bl	100614c6 <sdb_sap_read_security_record>
1006649a:	4605      	mov	r5, r0
1006649c:	2800      	cmp	r0, #0
1006649e:	d107      	bne.n	100664b0 <smp_dep_sdb_find_bonding_record_read_address+0x28>
100664a0:	2000      	movs	r0, #0
100664a2:	7030      	strb	r0, [r6, #0]
100664a4:	4669      	mov	r1, sp
100664a6:	313e      	adds	r1, #62	@ 0x3e
100664a8:	2206      	movs	r2, #6
100664aa:	4620      	mov	r0, r4
100664ac:	f7ec f956 	bl	1005275c <BLEPLAT_MemCpy>
100664b0:	4628      	mov	r0, r5
100664b2:	b014      	add	sp, #80	@ 0x50
100664b4:	bd70      	pop	{r4, r5, r6, pc}

100664b6 <smp_dep_sdb_find_matching_ltk_read_record>:
100664b6:	b5b0      	push	{r4, r5, r7, lr}
100664b8:	b094      	sub	sp, #80	@ 0x50
100664ba:	4614      	mov	r4, r2
100664bc:	466a      	mov	r2, sp
100664be:	f7fb f87b 	bl	100615b8 <sdb_sap_read_security_record_matching>
100664c2:	4605      	mov	r5, r0
100664c4:	2800      	cmp	r0, #0
100664c6:	d103      	bne.n	100664d0 <smp_dep_sdb_find_matching_ltk_read_record+0x1a>
100664c8:	4668      	mov	r0, sp
100664ca:	4621      	mov	r1, r4
100664cc:	f7ff ff9a 	bl	10066404 <smp_dep_sdb_copy_bonding_record_data_to_remdev>
100664d0:	4628      	mov	r0, r5
100664d2:	b014      	add	sp, #80	@ 0x50
100664d4:	bdb0      	pop	{r4, r5, r7, pc}

100664d6 <smp_start_encryption_ucfg_weak>:
100664d6:	201f      	movs	r0, #31
100664d8:	4770      	bx	lr
	...

100664dc <smp_pp3_pairing_completed_successful>:
100664dc:	b570      	push	{r4, r5, r6, lr}
100664de:	4604      	mov	r4, r0
100664e0:	7b80      	ldrb	r0, [r0, #14]
100664e2:	2103      	movs	r1, #3
100664e4:	4001      	ands	r1, r0
100664e6:	8925      	ldrh	r5, [r4, #8]
100664e8:	2903      	cmp	r1, #3
100664ea:	d10a      	bne.n	10066502 <smp_pp3_pairing_completed_successful+0x26>
100664ec:	4620      	mov	r0, r4
100664ee:	f7ff fee8 	bl	100662c2 <smp_dep_sdb_add_bonding_record>
100664f2:	2800      	cmp	r0, #0
100664f4:	d005      	beq.n	10066502 <smp_pp3_pairing_completed_successful+0x26>
100664f6:	2108      	movs	r1, #8
100664f8:	2200      	movs	r2, #0
100664fa:	4620      	mov	r0, r4
100664fc:	f000 f826 	bl	1006654c <smp_pp3_pairing_process_abort>
10066500:	bd70      	pop	{r4, r5, r6, pc}
10066502:	4628      	mov	r0, r5
10066504:	f000 ff94 	bl	10067430 <smp_get_remote_device_list_index>
10066508:	4602      	mov	r2, r0
1006650a:	2001      	movs	r0, #1
1006650c:	2100      	movs	r1, #0
1006650e:	4b0e      	ldr	r3, [pc, #56]	@ (10066548 <__arm_cp.0_0>)
10066510:	f7fb fc56 	bl	10061dc0 <smp_timer_reset>
10066514:	7ce0      	ldrb	r0, [r4, #19]
10066516:	2803      	cmp	r0, #3
10066518:	d102      	bne.n	10066520 <smp_pp3_pairing_completed_successful+0x44>
1006651a:	2000      	movs	r0, #0
1006651c:	f000 ffe6 	bl	100674ec <smp_oob_clear_remote_data_entry>
10066520:	4620      	mov	r0, r4
10066522:	3018      	adds	r0, #24
10066524:	2600      	movs	r6, #0
10066526:	2204      	movs	r2, #4
10066528:	4631      	mov	r1, r6
1006652a:	f7ec f927 	bl	1005277c <BLEPLAT_MemSet>
1006652e:	4620      	mov	r0, r4
10066530:	4631      	mov	r1, r6
10066532:	f000 f83b 	bl	100665ac <smp_pp3_pairing_completed_update_stats>
10066536:	20f1      	movs	r0, #241	@ 0xf1
10066538:	72a0      	strb	r0, [r4, #10]
1006653a:	2002      	movs	r0, #2
1006653c:	4629      	mov	r1, r5
1006653e:	4632      	mov	r2, r6
10066540:	4633      	mov	r3, r6
10066542:	f7fd fe0b 	bl	1006415c <aci_gap_pairing_complete_event_push_noinline>
10066546:	bd70      	pop	{r4, r5, r6, pc}

10066548 <__arm_cp.0_0>:
10066548:	00007530 	.word	0x00007530

1006654c <smp_pp3_pairing_process_abort>:
1006654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006654e:	4616      	mov	r6, r2
10066550:	460c      	mov	r4, r1
10066552:	4605      	mov	r5, r0
10066554:	8900      	ldrh	r0, [r0, #8]
10066556:	f000 ff6b 	bl	10067430 <smp_get_remote_device_list_index>
1006655a:	4602      	mov	r2, r0
1006655c:	2001      	movs	r0, #1
1006655e:	2700      	movs	r7, #0
10066560:	4b11      	ldr	r3, [pc, #68]	@ (100665a8 <__arm_cp.1_0>)
10066562:	4639      	mov	r1, r7
10066564:	f7fb fc2c 	bl	10061dc0 <smp_timer_reset>
10066568:	8928      	ldrh	r0, [r5, #8]
1006656a:	f7fb fbed 	bl	10061d48 <smp_rxp_flush_packet_queues>
1006656e:	2102      	movs	r1, #2
10066570:	4628      	mov	r0, r5
10066572:	f000 f81b 	bl	100665ac <smp_pp3_pairing_completed_update_stats>
10066576:	4628      	mov	r0, r5
10066578:	3018      	adds	r0, #24
1006657a:	2204      	movs	r2, #4
1006657c:	4639      	mov	r1, r7
1006657e:	f7ec f8fd 	bl	1005277c <BLEPLAT_MemSet>
10066582:	7be8      	ldrb	r0, [r5, #15]
10066584:	212f      	movs	r1, #47	@ 0x2f
10066586:	4001      	ands	r1, r0
10066588:	73e9      	strb	r1, [r5, #15]
1006658a:	2e00      	cmp	r6, #0
1006658c:	d004      	beq.n	10066598 <smp_pp3_pairing_process_abort+0x4c>
1006658e:	7868      	ldrb	r0, [r5, #1]
10066590:	1ca9      	adds	r1, r5, #2
10066592:	f000 fe51 	bl	10067238 <smp_cmn_repeated_attacks_protection_start>
10066596:	27fb      	movs	r7, #251	@ 0xfb
10066598:	72af      	strb	r7, [r5, #10]
1006659a:	8929      	ldrh	r1, [r5, #8]
1006659c:	2002      	movs	r0, #2
1006659e:	4602      	mov	r2, r0
100665a0:	4623      	mov	r3, r4
100665a2:	f7fd fddb 	bl	1006415c <aci_gap_pairing_complete_event_push_noinline>
100665a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

100665a8 <__arm_cp.1_0>:
100665a8:	00007530 	.word	0x00007530

100665ac <smp_pp3_pairing_completed_update_stats>:
100665ac:	b5bc      	push	{r2, r3, r4, r5, r7, lr}
100665ae:	2260      	movs	r2, #96	@ 0x60
100665b0:	5c82      	ldrb	r2, [r0, r2]
100665b2:	07d2      	lsls	r2, r2, #31
100665b4:	7a82      	ldrb	r2, [r0, #10]
100665b6:	d104      	bne.n	100665c2 <smp_pp3_pairing_completed_update_stats+0x16>
100665b8:	3260      	adds	r2, #96	@ 0x60
100665ba:	b2d2      	uxtb	r2, r2
100665bc:	2a51      	cmp	r2, #81	@ 0x51
100665be:	d304      	bcc.n	100665ca <smp_pp3_pairing_completed_update_stats+0x1e>
100665c0:	e00f      	b.n	100665e2 <smp_pp3_pairing_completed_update_stats+0x36>
100665c2:	3250      	adds	r2, #80	@ 0x50
100665c4:	b2d2      	uxtb	r2, r2
100665c6:	2a40      	cmp	r2, #64	@ 0x40
100665c8:	d80b      	bhi.n	100665e2 <smp_pp3_pairing_completed_update_stats+0x36>
100665ca:	4a09      	ldr	r2, [pc, #36]	@ (100665f0 <__arm_cp.2_0>)
100665cc:	6812      	ldr	r2, [r2, #0]
100665ce:	23b1      	movs	r3, #177	@ 0xb1
100665d0:	5cd3      	ldrb	r3, [r2, r3]
100665d2:	2b00      	cmp	r3, #0
100665d4:	d005      	beq.n	100665e2 <smp_pp3_pairing_completed_update_stats+0x36>
100665d6:	32b1      	adds	r2, #177	@ 0xb1
100665d8:	7d04      	ldrb	r4, [r0, #20]
100665da:	2501      	movs	r5, #1
100665dc:	40a5      	lsls	r5, r4
100665de:	43ab      	bics	r3, r5
100665e0:	7013      	strb	r3, [r2, #0]
100665e2:	466a      	mov	r2, sp
100665e4:	7111      	strb	r1, [r2, #4]
100665e6:	9000      	str	r0, [sp, #0]
100665e8:	4610      	mov	r0, r2
100665ea:	f000 ffb2 	bl	10067552 <smp_scp_stats_update_on_pairing_complete_ucfg_weak>
100665ee:	bdbc      	pop	{r2, r3, r4, r5, r7, pc}

100665f0 <__arm_cp.2_0>:
100665f0:	20002b1c 	.word	0x20002b1c

100665f4 <smp_pp3_pairing_failed_receive>:
100665f4:	b5b0      	push	{r4, r5, r7, lr}
100665f6:	460c      	mov	r4, r1
100665f8:	2160      	movs	r1, #96	@ 0x60
100665fa:	5c61      	ldrb	r1, [r4, r1]
100665fc:	2201      	movs	r2, #1
100665fe:	400a      	ands	r2, r1
10066600:	7aa3      	ldrb	r3, [r4, #10]
10066602:	6840      	ldr	r0, [r0, #4]
10066604:	7a41      	ldrb	r1, [r0, #9]
10066606:	d102      	bne.n	1006660e <smp_pp3_pairing_failed_receive+0x1a>
10066608:	2b9f      	cmp	r3, #159	@ 0x9f
1006660a:	d802      	bhi.n	10066612 <smp_pp3_pairing_failed_receive+0x1e>
1006660c:	bdb0      	pop	{r4, r5, r7, pc}
1006660e:	2bb0      	cmp	r3, #176	@ 0xb0
10066610:	d314      	bcc.n	1006663c <smp_pp3_pairing_failed_receive+0x48>
10066612:	2bf0      	cmp	r3, #240	@ 0xf0
10066614:	d915      	bls.n	10066642 <smp_pp3_pairing_failed_receive+0x4e>
10066616:	2bf1      	cmp	r3, #241	@ 0xf1
10066618:	d10e      	bne.n	10066638 <smp_pp3_pairing_failed_receive+0x44>
1006661a:	290f      	cmp	r1, #15
1006661c:	d10c      	bne.n	10066638 <smp_pp3_pairing_failed_receive+0x44>
1006661e:	4625      	mov	r5, r4
10066620:	3559      	adds	r5, #89	@ 0x59
10066622:	210f      	movs	r1, #15
10066624:	2201      	movs	r2, #1
10066626:	4620      	mov	r0, r4
10066628:	f7ff ff90 	bl	1006654c <smp_pp3_pairing_process_abort>
1006662c:	7829      	ldrb	r1, [r5, #0]
1006662e:	345a      	adds	r4, #90	@ 0x5a
10066630:	4620      	mov	r0, r4
10066632:	f7fa ffaf 	bl	10061594 <sdb_sap_del_bonded_device>
10066636:	bdb0      	pop	{r4, r5, r7, pc}
10066638:	2a00      	cmp	r2, #0
1006663a:	d0e7      	beq.n	1006660c <smp_pp3_pairing_failed_receive+0x18>
1006663c:	7e20      	ldrb	r0, [r4, #24]
1006663e:	0780      	lsls	r0, r0, #30
10066640:	d0e4      	beq.n	1006660c <smp_pp3_pairing_failed_receive+0x18>
10066642:	2201      	movs	r2, #1
10066644:	4620      	mov	r0, r4
10066646:	f7ff ff81 	bl	1006654c <smp_pp3_pairing_process_abort>
1006664a:	bdb0      	pop	{r4, r5, r7, pc}

1006664c <smp_pp3_pairing_failed_send>:
1006664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006664e:	461f      	mov	r7, r3
10066650:	4613      	mov	r3, r2
10066652:	460c      	mov	r4, r1
10066654:	4605      	mov	r5, r0
10066656:	2205      	movs	r2, #5
10066658:	4619      	mov	r1, r3
1006665a:	4623      	mov	r3, r4
1006665c:	f7ff fe14 	bl	10066288 <smp_dep_l2c_send_acl_short_pdu>
10066660:	4606      	mov	r6, r0
10066662:	2f00      	cmp	r7, #0
10066664:	d101      	bne.n	1006666a <smp_pp3_pairing_failed_send+0x1e>
10066666:	2e88      	cmp	r6, #136	@ 0x88
10066668:	d004      	beq.n	10066674 <smp_pp3_pairing_failed_send+0x28>
1006666a:	2201      	movs	r2, #1
1006666c:	4628      	mov	r0, r5
1006666e:	4621      	mov	r1, r4
10066670:	f7ff ff6c 	bl	1006654c <smp_pp3_pairing_process_abort>
10066674:	4630      	mov	r0, r6
10066676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

10066678 <smp_pp1_get_next_free_pairing_idx>:
10066678:	b510      	push	{r4, lr}
1006667a:	490b      	ldr	r1, [pc, #44]	@ (100666a8 <__arm_cp.0_0>)
1006667c:	680a      	ldr	r2, [r1, #0]
1006667e:	21b1      	movs	r1, #177	@ 0xb1
10066680:	5c53      	ldrb	r3, [r2, r1]
10066682:	32b1      	adds	r2, #177	@ 0xb1
10066684:	2100      	movs	r1, #0
10066686:	2903      	cmp	r1, #3
10066688:	d005      	beq.n	10066696 <smp_pp1_get_next_free_pairing_idx+0x1e>
1006668a:	2401      	movs	r4, #1
1006668c:	408c      	lsls	r4, r1
1006668e:	421c      	tst	r4, r3
10066690:	d003      	beq.n	1006669a <smp_pp1_get_next_free_pairing_idx+0x22>
10066692:	1c49      	adds	r1, r1, #1
10066694:	e7f7      	b.n	10066686 <smp_pp1_get_next_free_pairing_idx+0xe>
10066696:	2103      	movs	r1, #3
10066698:	e003      	b.n	100666a2 <smp_pp1_get_next_free_pairing_idx+0x2a>
1006669a:	2800      	cmp	r0, #0
1006669c:	d001      	beq.n	100666a2 <smp_pp1_get_next_free_pairing_idx+0x2a>
1006669e:	4323      	orrs	r3, r4
100666a0:	7013      	strb	r3, [r2, #0]
100666a2:	b2c8      	uxtb	r0, r1
100666a4:	bd10      	pop	{r4, pc}
100666a6:	46c0      	nop			@ (mov r8, r8)

100666a8 <__arm_cp.0_0>:
100666a8:	20002b1c 	.word	0x20002b1c

100666ac <smp_pp1_get_pairing_pdu_offset>:
100666ac:	0100      	lsls	r0, r0, #4
100666ae:	2900      	cmp	r1, #0
100666b0:	d000      	beq.n	100666b4 <smp_pp1_get_pairing_pdu_offset+0x8>
100666b2:	3008      	adds	r0, #8
100666b4:	b2c0      	uxtb	r0, r0
100666b6:	4770      	bx	lr

100666b8 <smp_pp1_reqrsp_pdu_params_check>:
100666b8:	b51c      	push	{r2, r3, r4, lr}
100666ba:	2104      	movs	r1, #4
100666bc:	2207      	movs	r2, #7
100666be:	466c      	mov	r4, sp
100666c0:	4623      	mov	r3, r4
100666c2:	f7ee fbff 	bl	10054ec4 <ACL_pkt_read>
100666c6:	7862      	ldrb	r2, [r4, #1]
100666c8:	210a      	movs	r1, #10
100666ca:	2a04      	cmp	r2, #4
100666cc:	d813      	bhi.n	100666f6 <smp_pp1_reqrsp_pdu_params_check+0x3e>
100666ce:	466a      	mov	r2, sp
100666d0:	7892      	ldrb	r2, [r2, #2]
100666d2:	2a01      	cmp	r2, #1
100666d4:	d80f      	bhi.n	100666f6 <smp_pp1_reqrsp_pdu_params_check+0x3e>
100666d6:	466a      	mov	r2, sp
100666d8:	78d2      	ldrb	r2, [r2, #3]
100666da:	0792      	lsls	r2, r2, #30
100666dc:	d40b      	bmi.n	100666f6 <smp_pp1_reqrsp_pdu_params_check+0x3e>
100666de:	4907      	ldr	r1, [pc, #28]	@ (100666fc <__arm_cp.2_0>)
100666e0:	6809      	ldr	r1, [r1, #0]
100666e2:	2234      	movs	r2, #52	@ 0x34
100666e4:	5c8a      	ldrb	r2, [r1, r2]
100666e6:	4669      	mov	r1, sp
100666e8:	7909      	ldrb	r1, [r1, #4]
100666ea:	4291      	cmp	r1, r2
100666ec:	d302      	bcc.n	100666f4 <smp_pp1_reqrsp_pdu_params_check+0x3c>
100666ee:	2911      	cmp	r1, #17
100666f0:	4601      	mov	r1, r0
100666f2:	d300      	bcc.n	100666f6 <smp_pp1_reqrsp_pdu_params_check+0x3e>
100666f4:	2106      	movs	r1, #6
100666f6:	4608      	mov	r0, r1
100666f8:	bd1c      	pop	{r2, r3, r4, pc}
100666fa:	46c0      	nop			@ (mov r8, r8)

100666fc <__arm_cp.2_0>:
100666fc:	20002b1c 	.word	0x20002b1c

10066700 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>:
10066700:	b580      	push	{r7, lr}
10066702:	7d12      	ldrb	r2, [r2, #20]
10066704:	0112      	lsls	r2, r2, #4
10066706:	2900      	cmp	r1, #0
10066708:	d000      	beq.n	1006670c <smp_pp1_reqrsp_pdu_copy_to_pairing_data+0xc>
1006670a:	3208      	adds	r2, #8
1006670c:	b2d1      	uxtb	r1, r2
1006670e:	4a04      	ldr	r2, [pc, #16]	@ (10066720 <__arm_cp.3_0>)
10066710:	6812      	ldr	r2, [r2, #0]
10066712:	1853      	adds	r3, r2, r1
10066714:	33b4      	adds	r3, #180	@ 0xb4
10066716:	2104      	movs	r1, #4
10066718:	2207      	movs	r2, #7
1006671a:	f7ee fbd3 	bl	10054ec4 <ACL_pkt_read>
1006671e:	bd80      	pop	{r7, pc}

10066720 <__arm_cp.3_0>:
10066720:	20002b1c 	.word	0x20002b1c

10066724 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>:
10066724:	b5f0      	push	{r4, r5, r6, r7, lr}
10066726:	4924      	ldr	r1, [pc, #144]	@ (100667b8 <__arm_cp.4_0>)
10066728:	6809      	ldr	r1, [r1, #0]
1006672a:	7d02      	ldrb	r2, [r0, #20]
1006672c:	0112      	lsls	r2, r2, #4
1006672e:	3208      	adds	r2, #8
10066730:	b2d2      	uxtb	r2, r2
10066732:	188b      	adds	r3, r1, r2
10066734:	24b5      	movs	r4, #181	@ 0xb5
10066736:	5d1c      	ldrb	r4, [r3, r4]
10066738:	7304      	strb	r4, [r0, #12]
1006673a:	24b6      	movs	r4, #182	@ 0xb6
1006673c:	5d1b      	ldrb	r3, [r3, r4]
1006673e:	2b01      	cmp	r3, #1
10066740:	d103      	bne.n	1006674a <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x26>
10066742:	7b43      	ldrb	r3, [r0, #13]
10066744:	2402      	movs	r4, #2
10066746:	431c      	orrs	r4, r3
10066748:	7344      	strb	r4, [r0, #13]
1006674a:	460b      	mov	r3, r1
1006674c:	3336      	adds	r3, #54	@ 0x36
1006674e:	2503      	movs	r5, #3
10066750:	4315      	orrs	r5, r2
10066752:	460c      	mov	r4, r1
10066754:	34b4      	adds	r4, #180	@ 0xb4
10066756:	5d65      	ldrb	r5, [r4, r5]
10066758:	2601      	movs	r6, #1
1006675a:	402e      	ands	r6, r5
1006675c:	7b87      	ldrb	r7, [r0, #14]
1006675e:	4337      	orrs	r7, r6
10066760:	7387      	strb	r7, [r0, #14]
10066762:	2604      	movs	r6, #4
10066764:	4035      	ands	r5, r6
10066766:	7bc7      	ldrb	r7, [r0, #15]
10066768:	432f      	orrs	r7, r5
1006676a:	73c7      	strb	r7, [r0, #15]
1006676c:	4316      	orrs	r6, r2
1006676e:	5da5      	ldrb	r5, [r4, r6]
10066770:	7405      	strb	r5, [r0, #16]
10066772:	2505      	movs	r5, #5
10066774:	4315      	orrs	r5, r2
10066776:	5d64      	ldrb	r4, [r4, r5]
10066778:	2560      	movs	r5, #96	@ 0x60
1006677a:	5d45      	ldrb	r5, [r0, r5]
1006677c:	07ed      	lsls	r5, r5, #31
1006677e:	d10e      	bne.n	1006679e <smp_pp1_reqrsp_pdu_extract_from_pairing_data+0x7a>
10066780:	781d      	ldrb	r5, [r3, #0]
10066782:	402c      	ands	r4, r5
10066784:	2507      	movs	r5, #7
10066786:	402c      	ands	r4, r5
10066788:	7484      	strb	r4, [r0, #18]
1006678a:	2406      	movs	r4, #6
1006678c:	4322      	orrs	r2, r4
1006678e:	1889      	adds	r1, r1, r2
10066790:	22b4      	movs	r2, #180	@ 0xb4
10066792:	5c89      	ldrb	r1, [r1, r2]
10066794:	785a      	ldrb	r2, [r3, #1]
10066796:	400a      	ands	r2, r1
10066798:	402a      	ands	r2, r5
1006679a:	7442      	strb	r2, [r0, #17]
1006679c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006679e:	785d      	ldrb	r5, [r3, #1]
100667a0:	4025      	ands	r5, r4
100667a2:	7445      	strb	r5, [r0, #17]
100667a4:	2406      	movs	r4, #6
100667a6:	4322      	orrs	r2, r4
100667a8:	1889      	adds	r1, r1, r2
100667aa:	22b4      	movs	r2, #180	@ 0xb4
100667ac:	5c89      	ldrb	r1, [r1, r2]
100667ae:	781a      	ldrb	r2, [r3, #0]
100667b0:	400a      	ands	r2, r1
100667b2:	7482      	strb	r2, [r0, #18]
100667b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100667b6:	46c0      	nop			@ (mov r8, r8)

100667b8 <__arm_cp.4_0>:
100667b8:	20002b1c 	.word	0x20002b1c

100667bc <smp_pp1_key_generation_method_selection>:
100667bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100667be:	7b01      	ldrb	r1, [r0, #12]
100667c0:	7b42      	ldrb	r2, [r0, #13]
100667c2:	07d3      	lsls	r3, r2, #31
100667c4:	d001      	beq.n	100667ca <smp_pp1_key_generation_method_selection+0xe>
100667c6:	0793      	lsls	r3, r2, #30
100667c8:	d405      	bmi.n	100667d6 <smp_pp1_key_generation_method_selection+0x1a>
100667ca:	7dc3      	ldrb	r3, [r0, #23]
100667cc:	2408      	movs	r4, #8
100667ce:	401c      	ands	r4, r3
100667d0:	d003      	beq.n	100667da <smp_pp1_key_generation_method_selection+0x1e>
100667d2:	0792      	lsls	r2, r2, #30
100667d4:	d001      	beq.n	100667da <smp_pp1_key_generation_method_selection+0x1e>
100667d6:	2203      	movs	r2, #3
100667d8:	e019      	b.n	1006680e <smp_pp1_key_generation_method_selection+0x52>
100667da:	7bc3      	ldrb	r3, [r0, #15]
100667dc:	2205      	movs	r2, #5
100667de:	4213      	tst	r3, r2
100667e0:	d014      	beq.n	1006680c <smp_pp1_key_generation_method_selection+0x50>
100667e2:	4b42      	ldr	r3, [pc, #264]	@ (100668ec <__arm_cp.5_0>)
100667e4:	681b      	ldr	r3, [r3, #0]
100667e6:	2540      	movs	r5, #64	@ 0x40
100667e8:	5d5d      	ldrb	r5, [r3, r5]
100667ea:	434a      	muls	r2, r1
100667ec:	4b40      	ldr	r3, [pc, #256]	@ (100668f0 <__arm_cp.5_1>)
100667ee:	189a      	adds	r2, r3, r2
100667f0:	5d52      	ldrb	r2, [r2, r5]
100667f2:	74c2      	strb	r2, [r0, #19]
100667f4:	4603      	mov	r3, r0
100667f6:	3313      	adds	r3, #19
100667f8:	2a00      	cmp	r2, #0
100667fa:	d10b      	bne.n	10066814 <smp_pp1_key_generation_method_selection+0x58>
100667fc:	2c00      	cmp	r4, #0
100667fe:	d13d      	bne.n	1006687c <smp_pp1_key_generation_method_selection+0xc0>
10066800:	2901      	cmp	r1, #1
10066802:	d16f      	bne.n	100668e4 <smp_pp1_key_generation_method_selection+0x128>
10066804:	2d01      	cmp	r5, #1
10066806:	d16d      	bne.n	100668e4 <smp_pp1_key_generation_method_selection+0x128>
10066808:	2201      	movs	r2, #1
1006680a:	e06c      	b.n	100668e6 <smp_pp1_key_generation_method_selection+0x12a>
1006680c:	2201      	movs	r2, #1
1006680e:	74c2      	strb	r2, [r0, #19]
10066810:	4603      	mov	r3, r0
10066812:	3313      	adds	r3, #19
10066814:	2460      	movs	r4, #96	@ 0x60
10066816:	5d05      	ldrb	r5, [r0, r4]
10066818:	2601      	movs	r6, #1
1006681a:	4035      	ands	r5, r6
1006681c:	d103      	bne.n	10066826 <smp_pp1_key_generation_method_selection+0x6a>
1006681e:	241a      	movs	r4, #26
10066820:	5704      	ldrsb	r4, [r0, r4]
10066822:	2c00      	cmp	r4, #0
10066824:	d426      	bmi.n	10066874 <smp_pp1_key_generation_method_selection+0xb8>
10066826:	4604      	mov	r4, r0
10066828:	340f      	adds	r4, #15
1006682a:	7824      	ldrb	r4, [r4, #0]
1006682c:	07e4      	lsls	r4, r4, #31
1006682e:	d004      	beq.n	1006683a <smp_pp1_key_generation_method_selection+0x7e>
10066830:	2a01      	cmp	r2, #1
10066832:	d102      	bne.n	1006683a <smp_pp1_key_generation_method_selection+0x7e>
10066834:	2403      	movs	r4, #3
10066836:	701c      	strb	r4, [r3, #0]
10066838:	e052      	b.n	100668e0 <smp_pp1_key_generation_method_selection+0x124>
1006683a:	7dc3      	ldrb	r3, [r0, #23]
1006683c:	071b      	lsls	r3, r3, #28
1006683e:	d503      	bpl.n	10066848 <smp_pp1_key_generation_method_selection+0x8c>
10066840:	2a02      	cmp	r2, #2
10066842:	d101      	bne.n	10066848 <smp_pp1_key_generation_method_selection+0x8c>
10066844:	2300      	movs	r3, #0
10066846:	76c3      	strb	r3, [r0, #27]
10066848:	2a02      	cmp	r2, #2
1006684a:	d111      	bne.n	10066870 <smp_pp1_key_generation_method_selection+0xb4>
1006684c:	7bc2      	ldrb	r2, [r0, #15]
1006684e:	23ef      	movs	r3, #239	@ 0xef
10066850:	4013      	ands	r3, r2
10066852:	73c3      	strb	r3, [r0, #15]
10066854:	4a25      	ldr	r2, [pc, #148]	@ (100668ec <__arm_cp.5_0>)
10066856:	6812      	ldr	r2, [r2, #0]
10066858:	2340      	movs	r3, #64	@ 0x40
1006685a:	5cd2      	ldrb	r2, [r2, r3]
1006685c:	2400      	movs	r4, #0
1006685e:	2a02      	cmp	r2, #2
10066860:	4627      	mov	r7, r4
10066862:	d318      	bcc.n	10066896 <smp_pp1_key_generation_method_selection+0xda>
10066864:	2a04      	cmp	r2, #4
10066866:	d00b      	beq.n	10066880 <smp_pp1_key_generation_method_selection+0xc4>
10066868:	2a02      	cmp	r2, #2
1006686a:	d113      	bne.n	10066894 <smp_pp1_key_generation_method_selection+0xd8>
1006686c:	4637      	mov	r7, r6
1006686e:	e012      	b.n	10066896 <smp_pp1_key_generation_method_selection+0xda>
10066870:	2400      	movs	r4, #0
10066872:	e035      	b.n	100668e0 <smp_pp1_key_generation_method_selection+0x124>
10066874:	4c1d      	ldr	r4, [pc, #116]	@ (100668ec <__arm_cp.5_0>)
10066876:	6824      	ldr	r4, [r4, #0]
10066878:	3431      	adds	r4, #49	@ 0x31
1006687a:	e7d6      	b.n	1006682a <smp_pp1_key_generation_method_selection+0x6e>
1006687c:	2204      	movs	r2, #4
1006687e:	e032      	b.n	100668e6 <smp_pp1_key_generation_method_selection+0x12a>
10066880:	2902      	cmp	r1, #2
10066882:	4637      	mov	r7, r6
10066884:	d307      	bcc.n	10066896 <smp_pp1_key_generation_method_selection+0xda>
10066886:	2904      	cmp	r1, #4
10066888:	462f      	mov	r7, r5
1006688a:	d004      	beq.n	10066896 <smp_pp1_key_generation_method_selection+0xda>
1006688c:	2902      	cmp	r1, #2
1006688e:	d101      	bne.n	10066894 <smp_pp1_key_generation_method_selection+0xd8>
10066890:	4627      	mov	r7, r4
10066892:	e000      	b.n	10066896 <smp_pp1_key_generation_method_selection+0xda>
10066894:	27ff      	movs	r7, #255	@ 0xff
10066896:	4917      	ldr	r1, [pc, #92]	@ (100668f4 <__arm_cp.5_2>)
10066898:	6809      	ldr	r1, [r1, #0]
1006689a:	224e      	movs	r2, #78	@ 0x4e
1006689c:	5c89      	ldrb	r1, [r1, r2]
1006689e:	0749      	lsls	r1, r1, #29
100668a0:	d51e      	bpl.n	100668e0 <smp_pp1_key_generation_method_selection+0x124>
100668a2:	8906      	ldrh	r6, [r0, #8]
100668a4:	4814      	ldr	r0, [pc, #80]	@ (100668f8 <__arm_cp.5_3>)
100668a6:	6800      	ldr	r0, [r0, #0]
100668a8:	6980      	ldr	r0, [r0, #24]
100668aa:	2502      	movs	r5, #2
100668ac:	2246      	movs	r2, #70	@ 0x46
100668ae:	2303      	movs	r3, #3
100668b0:	4629      	mov	r1, r5
100668b2:	f7ee fc9f 	bl	100551f4 <aci_event_fifo_push_header>
100668b6:	2800      	cmp	r0, #0
100668b8:	d012      	beq.n	100668e0 <smp_pp1_key_generation_method_selection+0x124>
100668ba:	4601      	mov	r1, r0
100668bc:	7286      	strb	r6, [r0, #10]
100668be:	2004      	movs	r0, #4
100668c0:	7248      	strb	r0, [r1, #9]
100668c2:	720d      	strb	r5, [r1, #8]
100668c4:	2400      	movs	r4, #0
100668c6:	71cc      	strb	r4, [r1, #7]
100668c8:	2005      	movs	r0, #5
100668ca:	7188      	strb	r0, [r1, #6]
100668cc:	730f      	strb	r7, [r1, #12]
100668ce:	20ff      	movs	r0, #255	@ 0xff
100668d0:	7148      	strb	r0, [r1, #5]
100668d2:	2082      	movs	r0, #130	@ 0x82
100668d4:	7108      	strb	r0, [r1, #4]
100668d6:	0a30      	lsrs	r0, r6, #8
100668d8:	72c8      	strb	r0, [r1, #11]
100668da:	4628      	mov	r0, r5
100668dc:	f7ee fd27 	bl	1005532e <aci_event_fifo_push>
100668e0:	4620      	mov	r0, r4
100668e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100668e4:	2202      	movs	r2, #2
100668e6:	701a      	strb	r2, [r3, #0]
100668e8:	e794      	b.n	10066814 <smp_pp1_key_generation_method_selection+0x58>
100668ea:	46c0      	nop			@ (mov r8, r8)

100668ec <__arm_cp.5_0>:
100668ec:	20002b1c 	.word	0x20002b1c

100668f0 <__arm_cp.5_1>:
100668f0:	10069900 	.word	0x10069900

100668f4 <__arm_cp.5_2>:
100668f4:	20002ad0 	.word	0x20002ad0

100668f8 <__arm_cp.5_3>:
100668f8:	20002a80 	.word	0x20002a80

100668fc <smp_pp1_auth_req_field_generate_from_device_config>:
100668fc:	490b      	ldr	r1, [pc, #44]	@ (1006692c <__arm_cp.6_0>)
100668fe:	6809      	ldr	r1, [r1, #0]
10066900:	2230      	movs	r2, #48	@ 0x30
10066902:	5c8a      	ldrb	r2, [r1, r2]
10066904:	2301      	movs	r3, #1
10066906:	4013      	ands	r3, r2
10066908:	3130      	adds	r1, #48	@ 0x30
1006690a:	784a      	ldrb	r2, [r1, #1]
1006690c:	07d2      	lsls	r2, r2, #31
1006690e:	0f52      	lsrs	r2, r2, #29
10066910:	18d2      	adds	r2, r2, r3
10066912:	78cb      	ldrb	r3, [r1, #3]
10066914:	07db      	lsls	r3, r3, #31
10066916:	0edb      	lsrs	r3, r3, #27
10066918:	18d2      	adds	r2, r2, r3
1006691a:	7889      	ldrb	r1, [r1, #2]
1006691c:	084b      	lsrs	r3, r1, #1
1006691e:	430b      	orrs	r3, r1
10066920:	07d9      	lsls	r1, r3, #31
10066922:	0f09      	lsrs	r1, r1, #28
10066924:	1851      	adds	r1, r2, r1
10066926:	7001      	strb	r1, [r0, #0]
10066928:	4770      	bx	lr
1006692a:	46c0      	nop			@ (mov r8, r8)

1006692c <__arm_cp.6_0>:
1006692c:	20002b1c 	.word	0x20002b1c

10066930 <smp_pp1_hndl_pairing_response_mode_through_event>:
10066930:	b570      	push	{r4, r5, r6, lr}
10066932:	4605      	mov	r5, r0
10066934:	8900      	ldrh	r0, [r0, #8]
10066936:	f7fb fe2a 	bl	1006258e <smp_sap_check_is_peer_device_bonded>
1006693a:	4246      	negs	r6, r0
1006693c:	4146      	adcs	r6, r0
1006693e:	491b      	ldr	r1, [pc, #108]	@ (100669ac <__arm_cp.8_0>)
10066940:	6809      	ldr	r1, [r1, #0]
10066942:	223c      	movs	r2, #60	@ 0x3c
10066944:	5c89      	ldrb	r1, [r1, r2]
10066946:	2902      	cmp	r1, #2
10066948:	d004      	beq.n	10066954 <smp_pp1_hndl_pairing_response_mode_through_event+0x24>
1006694a:	2400      	movs	r4, #0
1006694c:	2901      	cmp	r1, #1
1006694e:	d12a      	bne.n	100669a6 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066950:	2800      	cmp	r0, #0
10066952:	d128      	bne.n	100669a6 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066954:	2008      	movs	r0, #8
10066956:	4301      	orrs	r1, r0
10066958:	75a9      	strb	r1, [r5, #22]
1006695a:	4815      	ldr	r0, [pc, #84]	@ (100669b0 <__arm_cp.8_1>)
1006695c:	6800      	ldr	r0, [r0, #0]
1006695e:	214e      	movs	r1, #78	@ 0x4e
10066960:	5c40      	ldrb	r0, [r0, r1]
10066962:	2401      	movs	r4, #1
10066964:	0780      	lsls	r0, r0, #30
10066966:	d51e      	bpl.n	100669a6 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
10066968:	892d      	ldrh	r5, [r5, #8]
1006696a:	4812      	ldr	r0, [pc, #72]	@ (100669b4 <__arm_cp.8_2>)
1006696c:	6800      	ldr	r0, [r0, #0]
1006696e:	6980      	ldr	r0, [r0, #24]
10066970:	2102      	movs	r1, #2
10066972:	224b      	movs	r2, #75	@ 0x4b
10066974:	2303      	movs	r3, #3
10066976:	f7ee fc3d 	bl	100551f4 <aci_event_fifo_push_header>
1006697a:	2800      	cmp	r0, #0
1006697c:	d013      	beq.n	100669a6 <smp_pp1_hndl_pairing_response_mode_through_event+0x76>
1006697e:	4601      	mov	r1, r0
10066980:	7285      	strb	r5, [r0, #10]
10066982:	2004      	movs	r0, #4
10066984:	7248      	strb	r0, [r1, #9]
10066986:	200b      	movs	r0, #11
10066988:	7208      	strb	r0, [r1, #8]
1006698a:	2000      	movs	r0, #0
1006698c:	71c8      	strb	r0, [r1, #7]
1006698e:	2005      	movs	r0, #5
10066990:	7188      	strb	r0, [r1, #6]
10066992:	730e      	strb	r6, [r1, #12]
10066994:	20ff      	movs	r0, #255	@ 0xff
10066996:	7148      	strb	r0, [r1, #5]
10066998:	2082      	movs	r0, #130	@ 0x82
1006699a:	7108      	strb	r0, [r1, #4]
1006699c:	0a28      	lsrs	r0, r5, #8
1006699e:	72c8      	strb	r0, [r1, #11]
100669a0:	2002      	movs	r0, #2
100669a2:	f7ee fcc4 	bl	1005532e <aci_event_fifo_push>
100669a6:	4620      	mov	r0, r4
100669a8:	bd70      	pop	{r4, r5, r6, pc}
100669aa:	46c0      	nop			@ (mov r8, r8)

100669ac <__arm_cp.8_0>:
100669ac:	20002b1c 	.word	0x20002b1c

100669b0 <__arm_cp.8_1>:
100669b0:	20002ad0 	.word	0x20002ad0

100669b4 <__arm_cp.8_2>:
100669b4:	20002a80 	.word	0x20002a80

100669b8 <smp_pp1_pairing_packet_build>:
100669b8:	b510      	push	{r4, lr}
100669ba:	2407      	movs	r4, #7
100669bc:	8044      	strh	r4, [r0, #2]
100669be:	6844      	ldr	r4, [r0, #4]
100669c0:	7221      	strb	r1, [r4, #8]
100669c2:	490b      	ldr	r1, [pc, #44]	@ (100669f0 <__arm_cp.9_0>)
100669c4:	6809      	ldr	r1, [r1, #0]
100669c6:	2440      	movs	r4, #64	@ 0x40
100669c8:	5d09      	ldrb	r1, [r1, r4]
100669ca:	6844      	ldr	r4, [r0, #4]
100669cc:	7261      	strb	r1, [r4, #9]
100669ce:	2101      	movs	r1, #1
100669d0:	4011      	ands	r1, r2
100669d2:	6842      	ldr	r2, [r0, #4]
100669d4:	7291      	strb	r1, [r2, #10]
100669d6:	6841      	ldr	r1, [r0, #4]
100669d8:	72cb      	strb	r3, [r1, #11]
100669da:	6841      	ldr	r1, [r0, #4]
100669dc:	9a02      	ldr	r2, [sp, #8]
100669de:	730a      	strb	r2, [r1, #12]
100669e0:	6841      	ldr	r1, [r0, #4]
100669e2:	9a03      	ldr	r2, [sp, #12]
100669e4:	734a      	strb	r2, [r1, #13]
100669e6:	6840      	ldr	r0, [r0, #4]
100669e8:	9904      	ldr	r1, [sp, #16]
100669ea:	7381      	strb	r1, [r0, #14]
100669ec:	bd10      	pop	{r4, pc}
100669ee:	46c0      	nop			@ (mov r8, r8)

100669f0 <__arm_cp.9_0>:
100669f0:	20002b1c 	.word	0x20002b1c

100669f4 <smp_pp1_per_rxp_pairing_request>:
100669f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100669f6:	460c      	mov	r4, r1
100669f8:	4607      	mov	r7, r0
100669fa:	2501      	movs	r5, #1
100669fc:	4628      	mov	r0, r5
100669fe:	f7ff fe3b 	bl	10066678 <smp_pp1_get_next_free_pairing_idx>
10066a02:	2802      	cmp	r0, #2
10066a04:	d901      	bls.n	10066a0a <smp_pp1_per_rxp_pairing_request+0x16>
10066a06:	2038      	movs	r0, #56	@ 0x38
10066a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066a0a:	4606      	mov	r6, r0
10066a0c:	4638      	mov	r0, r7
10066a0e:	f7ff fe53 	bl	100666b8 <smp_pp1_reqrsp_pdu_params_check>
10066a12:	2800      	cmp	r0, #0
10066a14:	d010      	beq.n	10066a38 <smp_pp1_per_rxp_pairing_request+0x44>
10066a16:	4601      	mov	r1, r0
10066a18:	4810      	ldr	r0, [pc, #64]	@ (10066a5c <__arm_cp.1_0>)
10066a1a:	6800      	ldr	r0, [r0, #0]
10066a1c:	22b1      	movs	r2, #177	@ 0xb1
10066a1e:	5c82      	ldrb	r2, [r0, r2]
10066a20:	2a00      	cmp	r2, #0
10066a22:	d003      	beq.n	10066a2c <smp_pp1_per_rxp_pairing_request+0x38>
10066a24:	30b1      	adds	r0, #177	@ 0xb1
10066a26:	40b5      	lsls	r5, r6
10066a28:	43aa      	bics	r2, r5
10066a2a:	7002      	strb	r2, [r0, #0]
10066a2c:	2200      	movs	r2, #0
10066a2e:	2301      	movs	r3, #1
10066a30:	4620      	mov	r0, r4
10066a32:	f7ff fe0b 	bl	1006664c <smp_pp3_pairing_failed_send>
10066a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066a38:	7526      	strb	r6, [r4, #20]
10066a3a:	2101      	movs	r1, #1
10066a3c:	4638      	mov	r0, r7
10066a3e:	4622      	mov	r2, r4
10066a40:	f7ff fe5e 	bl	10066700 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10066a44:	4620      	mov	r0, r4
10066a46:	f7ff ff73 	bl	10066930 <smp_pp1_hndl_pairing_response_mode_through_event>
10066a4a:	2800      	cmp	r0, #0
10066a4c:	d001      	beq.n	10066a52 <smp_pp1_per_rxp_pairing_request+0x5e>
10066a4e:	2000      	movs	r0, #0
10066a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066a52:	4620      	mov	r0, r4
10066a54:	f000 f804 	bl	10066a60 <smp_pp1_per_send_pairing_response>
10066a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10066a5a:	46c0      	nop			@ (mov r8, r8)

10066a5c <__arm_cp.1_0>:
10066a5c:	20002b1c 	.word	0x20002b1c

10066a60 <smp_pp1_per_send_pairing_response>:
10066a60:	b5f0      	push	{r4, r5, r6, r7, lr}
10066a62:	b087      	sub	sp, #28
10066a64:	4604      	mov	r4, r0
10066a66:	a806      	add	r0, sp, #24
10066a68:	2600      	movs	r6, #0
10066a6a:	7006      	strb	r6, [r0, #0]
10066a6c:	8921      	ldrh	r1, [r4, #8]
10066a6e:	220b      	movs	r2, #11
10066a70:	4630      	mov	r0, r6
10066a72:	f7ee f9e9 	bl	10054e48 <ACL_pkt_get>
10066a76:	2800      	cmp	r0, #0
10066a78:	d01b      	beq.n	10066ab2 <smp_pp1_per_send_pairing_response+0x52>
10066a7a:	9005      	str	r0, [sp, #20]
10066a7c:	20b0      	movs	r0, #176	@ 0xb0
10066a7e:	72a0      	strb	r0, [r4, #10]
10066a80:	75e6      	strb	r6, [r4, #23]
10066a82:	7be0      	ldrb	r0, [r4, #15]
10066a84:	212f      	movs	r1, #47	@ 0x2f
10066a86:	4001      	ands	r1, r0
10066a88:	73e1      	strb	r1, [r4, #15]
10066a8a:	4f43      	ldr	r7, [pc, #268]	@ (10066b98 <__arm_cp.2_0>)
10066a8c:	683d      	ldr	r5, [r7, #0]
10066a8e:	7d20      	ldrb	r0, [r4, #20]
10066a90:	2101      	movs	r1, #1
10066a92:	9104      	str	r1, [sp, #16]
10066a94:	f7ff fe0a 	bl	100666ac <smp_pp1_get_pairing_pdu_offset>
10066a98:	1940      	adds	r0, r0, r5
10066a9a:	21b7      	movs	r1, #183	@ 0xb7
10066a9c:	5c45      	ldrb	r5, [r0, r1]
10066a9e:	6838      	ldr	r0, [r7, #0]
10066aa0:	2132      	movs	r1, #50	@ 0x32
10066aa2:	5c40      	ldrb	r0, [r0, r1]
10066aa4:	2802      	cmp	r0, #2
10066aa6:	d106      	bne.n	10066ab6 <smp_pp1_per_send_pairing_response+0x56>
10066aa8:	2008      	movs	r0, #8
10066aaa:	4028      	ands	r0, r5
10066aac:	d103      	bne.n	10066ab6 <smp_pp1_per_send_pairing_response+0x56>
10066aae:	2103      	movs	r1, #3
10066ab0:	e051      	b.n	10066b56 <smp_pp1_per_send_pairing_response+0xf6>
10066ab2:	2688      	movs	r6, #136	@ 0x88
10066ab4:	e061      	b.n	10066b7a <smp_pp1_per_send_pairing_response+0x11a>
10066ab6:	7e20      	ldrb	r0, [r4, #24]
10066ab8:	07c0      	lsls	r0, r0, #31
10066aba:	d105      	bne.n	10066ac8 <smp_pp1_per_send_pairing_response+0x68>
10066abc:	af06      	add	r7, sp, #24
10066abe:	4638      	mov	r0, r7
10066ac0:	f7ff ff1c 	bl	100668fc <smp_pp1_auth_req_field_generate_from_device_config>
10066ac4:	7838      	ldrb	r0, [r7, #0]
10066ac6:	e002      	b.n	10066ace <smp_pp1_per_send_pairing_response+0x6e>
10066ac8:	7d60      	ldrb	r0, [r4, #21]
10066aca:	a906      	add	r1, sp, #24
10066acc:	7008      	strb	r0, [r1, #0]
10066ace:	4005      	ands	r5, r0
10066ad0:	2018      	movs	r0, #24
10066ad2:	4028      	ands	r0, r5
10066ad4:	7de1      	ldrb	r1, [r4, #23]
10066ad6:	4301      	orrs	r1, r0
10066ad8:	75e1      	strb	r1, [r4, #23]
10066ada:	0708      	lsls	r0, r1, #28
10066adc:	d401      	bmi.n	10066ae2 <smp_pp1_per_send_pairing_response+0x82>
10066ade:	27b4      	movs	r7, #180	@ 0xb4
10066ae0:	e006      	b.n	10066af0 <smp_pp1_per_send_pairing_response+0x90>
10066ae2:	4620      	mov	r0, r4
10066ae4:	f000 fd31 	bl	1006754a <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>
10066ae8:	4601      	mov	r1, r0
10066aea:	2800      	cmp	r0, #0
10066aec:	d133      	bne.n	10066b56 <smp_pp1_per_send_pairing_response+0xf6>
10066aee:	27b2      	movs	r7, #178	@ 0xb2
10066af0:	4620      	mov	r0, r4
10066af2:	f000 fcdf 	bl	100674b4 <smp_oob_check_is_remote_data_present>
10066af6:	9806      	ldr	r0, [sp, #24]
10066af8:	0741      	lsls	r1, r0, #29
10066afa:	0fc9      	lsrs	r1, r1, #31
10066afc:	73e1      	strb	r1, [r4, #15]
10066afe:	07c0      	lsls	r0, r0, #31
10066b00:	0f80      	lsrs	r0, r0, #30
10066b02:	73a0      	strb	r0, [r4, #14]
10066b04:	4620      	mov	r0, r4
10066b06:	f7ff fe0d 	bl	10066724 <smp_pp1_reqrsp_pdu_extract_from_pairing_data>
10066b0a:	4620      	mov	r0, r4
10066b0c:	f7ff fe56 	bl	100667bc <smp_pp1_key_generation_method_selection>
10066b10:	4601      	mov	r1, r0
10066b12:	2800      	cmp	r0, #0
10066b14:	d11f      	bne.n	10066b56 <smp_pp1_per_send_pairing_response+0xf6>
10066b16:	7ce0      	ldrb	r0, [r4, #19]
10066b18:	2802      	cmp	r0, #2
10066b1a:	d104      	bne.n	10066b26 <smp_pp1_per_send_pairing_response+0xc6>
10066b1c:	7be0      	ldrb	r0, [r4, #15]
10066b1e:	06c0      	lsls	r0, r0, #27
10066b20:	d401      	bmi.n	10066b26 <smp_pp1_per_send_pairing_response+0xc6>
10066b22:	204d      	movs	r0, #77	@ 0x4d
10066b24:	43c7      	mvns	r7, r0
10066b26:	481c      	ldr	r0, [pc, #112]	@ (10066b98 <__arm_cp.2_0>)
10066b28:	6800      	ldr	r0, [r0, #0]
10066b2a:	2135      	movs	r1, #53	@ 0x35
10066b2c:	5c40      	ldrb	r0, [r0, r1]
10066b2e:	a906      	add	r1, sp, #24
10066b30:	780b      	ldrb	r3, [r1, #0]
10066b32:	7b62      	ldrb	r2, [r4, #13]
10066b34:	7c61      	ldrb	r1, [r4, #17]
10066b36:	7ca5      	ldrb	r5, [r4, #18]
10066b38:	9000      	str	r0, [sp, #0]
10066b3a:	9101      	str	r1, [sp, #4]
10066b3c:	9502      	str	r5, [sp, #8]
10066b3e:	2102      	movs	r1, #2
10066b40:	9d05      	ldr	r5, [sp, #20]
10066b42:	4628      	mov	r0, r5
10066b44:	f7ff ff38 	bl	100669b8 <smp_pp1_pairing_packet_build>
10066b48:	4620      	mov	r0, r4
10066b4a:	4629      	mov	r1, r5
10066b4c:	f7ff fb82 	bl	10066254 <smp_dep_l2c_send_acl_packet>
10066b50:	4601      	mov	r1, r0
10066b52:	2800      	cmp	r0, #0
10066b54:	d014      	beq.n	10066b80 <smp_pp1_per_send_pairing_response+0x120>
10066b56:	4810      	ldr	r0, [pc, #64]	@ (10066b98 <__arm_cp.2_0>)
10066b58:	6800      	ldr	r0, [r0, #0]
10066b5a:	22b1      	movs	r2, #177	@ 0xb1
10066b5c:	5c82      	ldrb	r2, [r0, r2]
10066b5e:	2a00      	cmp	r2, #0
10066b60:	d005      	beq.n	10066b6e <smp_pp1_per_send_pairing_response+0x10e>
10066b62:	30b1      	adds	r0, #177	@ 0xb1
10066b64:	7d23      	ldrb	r3, [r4, #20]
10066b66:	9d04      	ldr	r5, [sp, #16]
10066b68:	409d      	lsls	r5, r3
10066b6a:	43aa      	bics	r2, r5
10066b6c:	7002      	strb	r2, [r0, #0]
10066b6e:	2301      	movs	r3, #1
10066b70:	4620      	mov	r0, r4
10066b72:	9a05      	ldr	r2, [sp, #20]
10066b74:	f7ff fd6a 	bl	1006664c <smp_pp3_pairing_failed_send>
10066b78:	4606      	mov	r6, r0
10066b7a:	4630      	mov	r0, r6
10066b7c:	b007      	add	sp, #28
10066b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066b80:	7ae0      	ldrb	r0, [r4, #11]
10066b82:	21f8      	movs	r1, #248	@ 0xf8
10066b84:	4001      	ands	r1, r0
10066b86:	72e1      	strb	r1, [r4, #11]
10066b88:	9805      	ldr	r0, [sp, #20]
10066b8a:	4631      	mov	r1, r6
10066b8c:	4622      	mov	r2, r4
10066b8e:	f7ff fdb7 	bl	10066700 <smp_pp1_reqrsp_pdu_copy_to_pairing_data>
10066b92:	72a7      	strb	r7, [r4, #10]
10066b94:	e7f1      	b.n	10066b7a <smp_pp1_per_send_pairing_response+0x11a>
10066b96:	46c0      	nop			@ (mov r8, r8)

10066b98 <__arm_cp.2_0>:
10066b98:	20002b1c 	.word	0x20002b1c

10066b9c <smp_pp2_per_rx_process_pairing_confirm>:
10066b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
10066b9e:	b089      	sub	sp, #36	@ 0x24
10066ba0:	460c      	mov	r4, r1
10066ba2:	4607      	mov	r7, r0
10066ba4:	8909      	ldrh	r1, [r1, #8]
10066ba6:	2500      	movs	r5, #0
10066ba8:	2215      	movs	r2, #21
10066baa:	4628      	mov	r0, r5
10066bac:	f7ee f94c 	bl	10054e48 <ACL_pkt_get>
10066bb0:	2800      	cmp	r0, #0
10066bb2:	d013      	beq.n	10066bdc <smp_pp2_per_rx_process_pairing_confirm+0x40>
10066bb4:	4606      	mov	r6, r0
10066bb6:	2f00      	cmp	r7, #0
10066bb8:	d006      	beq.n	10066bc8 <smp_pp2_per_rx_process_pairing_confirm+0x2c>
10066bba:	4623      	mov	r3, r4
10066bbc:	3328      	adds	r3, #40	@ 0x28
10066bbe:	2105      	movs	r1, #5
10066bc0:	2210      	movs	r2, #16
10066bc2:	4638      	mov	r0, r7
10066bc4:	f7ee f97e 	bl	10054ec4 <ACL_pkt_read>
10066bc8:	7de0      	ldrb	r0, [r4, #23]
10066bca:	0700      	lsls	r0, r0, #28
10066bcc:	d408      	bmi.n	10066be0 <smp_pp2_per_rx_process_pairing_confirm+0x44>
10066bce:	4621      	mov	r1, r4
10066bd0:	3148      	adds	r1, #72	@ 0x48
10066bd2:	aa05      	add	r2, sp, #20
10066bd4:	4620      	mov	r0, r4
10066bd6:	f000 f831 	bl	10066c3c <smp_pp2_per_lep_confirm_value_compute>
10066bda:	e007      	b.n	10066bec <smp_pp2_per_rx_process_pairing_confirm+0x50>
10066bdc:	2088      	movs	r0, #136	@ 0x88
10066bde:	e019      	b.n	10066c14 <smp_pp2_per_rx_process_pairing_confirm+0x78>
10066be0:	a805      	add	r0, sp, #20
10066be2:	9002      	str	r0, [sp, #8]
10066be4:	9401      	str	r4, [sp, #4]
10066be6:	a801      	add	r0, sp, #4
10066be8:	f000 f961 	bl	10066eae <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>
10066bec:	2011      	movs	r0, #17
10066bee:	8070      	strh	r0, [r6, #2]
10066bf0:	6870      	ldr	r0, [r6, #4]
10066bf2:	2103      	movs	r1, #3
10066bf4:	7201      	strb	r1, [r0, #8]
10066bf6:	2105      	movs	r1, #5
10066bf8:	2210      	movs	r2, #16
10066bfa:	ab05      	add	r3, sp, #20
10066bfc:	4630      	mov	r0, r6
10066bfe:	f7ee f983 	bl	10054f08 <ACL_pkt_write>
10066c02:	4620      	mov	r0, r4
10066c04:	4631      	mov	r1, r6
10066c06:	f7ff fb25 	bl	10066254 <smp_dep_l2c_send_acl_packet>
10066c0a:	2800      	cmp	r0, #0
10066c0c:	d102      	bne.n	10066c14 <smp_pp2_per_rx_process_pairing_confirm+0x78>
10066c0e:	20b6      	movs	r0, #182	@ 0xb6
10066c10:	72a0      	strb	r0, [r4, #10]
10066c12:	4628      	mov	r0, r5
10066c14:	b009      	add	sp, #36	@ 0x24
10066c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

10066c18 <smp_pp2_per_auth_stage_1_start>:
10066c18:	b510      	push	{r4, lr}
10066c1a:	4604      	mov	r4, r0
10066c1c:	3048      	adds	r0, #72	@ 0x48
10066c1e:	2110      	movs	r1, #16
10066c20:	2200      	movs	r2, #0
10066c22:	f7fc f958 	bl	10062ed6 <HAL_Generate_Random_Bytes_To>
10066c26:	7de0      	ldrb	r0, [r4, #23]
10066c28:	0700      	lsls	r0, r0, #28
10066c2a:	d402      	bmi.n	10066c32 <smp_pp2_per_auth_stage_1_start+0x1a>
10066c2c:	20b5      	movs	r0, #181	@ 0xb5
10066c2e:	72a0      	strb	r0, [r4, #10]
10066c30:	bd10      	pop	{r4, pc}
10066c32:	4620      	mov	r0, r4
10066c34:	f000 f93a 	bl	10066eac <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>
10066c38:	bd10      	pop	{r4, pc}
	...

10066c3c <smp_pp2_per_lep_confirm_value_compute>:
10066c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
10066c3e:	b09b      	sub	sp, #108	@ 0x6c
10066c40:	4614      	mov	r4, r2
10066c42:	9106      	str	r1, [sp, #24]
10066c44:	4607      	mov	r7, r0
10066c46:	ae0f      	add	r6, sp, #60	@ 0x3c
10066c48:	2500      	movs	r5, #0
10066c4a:	222e      	movs	r2, #46	@ 0x2e
10066c4c:	4630      	mov	r0, r6
10066c4e:	4629      	mov	r1, r5
10066c50:	f7eb fd94 	bl	1005277c <BLEPLAT_MemSet>
10066c54:	4630      	mov	r0, r6
10066c56:	3010      	adds	r0, #16
10066c58:	2210      	movs	r2, #16
10066c5a:	9906      	ldr	r1, [sp, #24]
10066c5c:	f7eb fd7e 	bl	1005275c <BLEPLAT_MemCpy>
10066c60:	3620      	adds	r6, #32
10066c62:	7cf8      	ldrb	r0, [r7, #19]
10066c64:	2803      	cmp	r0, #3
10066c66:	d00d      	beq.n	10066c84 <smp_pp2_per_lep_confirm_value_compute+0x48>
10066c68:	2802      	cmp	r0, #2
10066c6a:	d112      	bne.n	10066c92 <smp_pp2_per_lep_confirm_value_compute+0x56>
10066c6c:	4844      	ldr	r0, [pc, #272]	@ (10066d80 <__arm_cp.16_0>)
10066c6e:	6800      	ldr	r0, [r0, #0]
10066c70:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10066c72:	a90f      	add	r1, sp, #60	@ 0x3c
10066c74:	7008      	strb	r0, [r1, #0]
10066c76:	0a02      	lsrs	r2, r0, #8
10066c78:	704a      	strb	r2, [r1, #1]
10066c7a:	0c02      	lsrs	r2, r0, #16
10066c7c:	708a      	strb	r2, [r1, #2]
10066c7e:	0e00      	lsrs	r0, r0, #24
10066c80:	70c8      	strb	r0, [r1, #3]
10066c82:	e006      	b.n	10066c92 <smp_pp2_per_lep_confirm_value_compute+0x56>
10066c84:	483e      	ldr	r0, [pc, #248]	@ (10066d80 <__arm_cp.16_0>)
10066c86:	6801      	ldr	r1, [r0, #0]
10066c88:	3144      	adds	r1, #68	@ 0x44
10066c8a:	a80f      	add	r0, sp, #60	@ 0x3c
10066c8c:	2210      	movs	r2, #16
10066c8e:	f7eb fd65 	bl	1005275c <BLEPLAT_MemCpy>
10066c92:	7d38      	ldrb	r0, [r7, #20]
10066c94:	2101      	movs	r1, #1
10066c96:	9105      	str	r1, [sp, #20]
10066c98:	f7ff fd08 	bl	100666ac <smp_pp1_get_pairing_pdu_offset>
10066c9c:	9002      	str	r0, [sp, #8]
10066c9e:	7d38      	ldrb	r0, [r7, #20]
10066ca0:	4629      	mov	r1, r5
10066ca2:	f7ff fd03 	bl	100666ac <smp_pp1_get_pairing_pdu_offset>
10066ca6:	9001      	str	r0, [sp, #4]
10066ca8:	2061      	movs	r0, #97	@ 0x61
10066caa:	5c38      	ldrb	r0, [r7, r0]
10066cac:	71f0      	strb	r0, [r6, #7]
10066cae:	9606      	str	r6, [sp, #24]
10066cb0:	ae0f      	add	r6, sp, #60	@ 0x3c
10066cb2:	4630      	mov	r0, r6
10066cb4:	3028      	adds	r0, #40	@ 0x28
10066cb6:	4639      	mov	r1, r7
10066cb8:	3162      	adds	r1, #98	@ 0x62
10066cba:	2206      	movs	r2, #6
10066cbc:	9200      	str	r2, [sp, #0]
10066cbe:	4b31      	ldr	r3, [pc, #196]	@ (10066d84 <__arm_cp.16_1>)
10066cc0:	9004      	str	r0, [sp, #16]
10066cc2:	4798      	blx	r3
10066cc4:	7878      	ldrb	r0, [r7, #1]
10066cc6:	9906      	ldr	r1, [sp, #24]
10066cc8:	7008      	strb	r0, [r1, #0]
10066cca:	4630      	mov	r0, r6
10066ccc:	3021      	adds	r0, #33	@ 0x21
10066cce:	1cb9      	adds	r1, r7, #2
10066cd0:	9003      	str	r0, [sp, #12]
10066cd2:	9a00      	ldr	r2, [sp, #0]
10066cd4:	4b2b      	ldr	r3, [pc, #172]	@ (10066d84 <__arm_cp.16_1>)
10066cd6:	4798      	blx	r3
10066cd8:	4829      	ldr	r0, [pc, #164]	@ (10066d80 <__arm_cp.16_0>)
10066cda:	6800      	ldr	r0, [r0, #0]
10066cdc:	9901      	ldr	r1, [sp, #4]
10066cde:	1841      	adds	r1, r0, r1
10066ce0:	31b4      	adds	r1, #180	@ 0xb4
10066ce2:	af0b      	add	r7, sp, #44	@ 0x2c
10066ce4:	4638      	mov	r0, r7
10066ce6:	3009      	adds	r0, #9
10066ce8:	2207      	movs	r2, #7
10066cea:	9201      	str	r2, [sp, #4]
10066cec:	4b25      	ldr	r3, [pc, #148]	@ (10066d84 <__arm_cp.16_1>)
10066cee:	4798      	blx	r3
10066cf0:	4823      	ldr	r0, [pc, #140]	@ (10066d80 <__arm_cp.16_0>)
10066cf2:	6800      	ldr	r0, [r0, #0]
10066cf4:	9902      	ldr	r1, [sp, #8]
10066cf6:	1841      	adds	r1, r0, r1
10066cf8:	31b4      	adds	r1, #180	@ 0xb4
10066cfa:	1cb8      	adds	r0, r7, #2
10066cfc:	9a01      	ldr	r2, [sp, #4]
10066cfe:	4b21      	ldr	r3, [pc, #132]	@ (10066d84 <__arm_cp.16_1>)
10066d00:	4798      	blx	r3
10066d02:	1c78      	adds	r0, r7, #1
10066d04:	9906      	ldr	r1, [sp, #24]
10066d06:	1dc9      	adds	r1, r1, #7
10066d08:	9a05      	ldr	r2, [sp, #20]
10066d0a:	4b1e      	ldr	r3, [pc, #120]	@ (10066d84 <__arm_cp.16_1>)
10066d0c:	4798      	blx	r3
10066d0e:	4b1d      	ldr	r3, [pc, #116]	@ (10066d84 <__arm_cp.16_1>)
10066d10:	4638      	mov	r0, r7
10066d12:	9906      	ldr	r1, [sp, #24]
10066d14:	9a05      	ldr	r2, [sp, #20]
10066d16:	4798      	blx	r3
10066d18:	3610      	adds	r6, #16
10066d1a:	2d10      	cmp	r5, #16
10066d1c:	d007      	beq.n	10066d2e <smp_pp2_per_lep_confirm_value_compute+0xf2>
10066d1e:	5d70      	ldrb	r0, [r6, r5]
10066d20:	a90b      	add	r1, sp, #44	@ 0x2c
10066d22:	5d49      	ldrb	r1, [r1, r5]
10066d24:	4041      	eors	r1, r0
10066d26:	a807      	add	r0, sp, #28
10066d28:	5541      	strb	r1, [r0, r5]
10066d2a:	1c6d      	adds	r5, r5, #1
10066d2c:	e7f5      	b.n	10066d1a <smp_pp2_per_lep_confirm_value_compute+0xde>
10066d2e:	a80f      	add	r0, sp, #60	@ 0x3c
10066d30:	a907      	add	r1, sp, #28
10066d32:	4622      	mov	r2, r4
10066d34:	f7f2 fc54 	bl	100595e0 <hci_le_encrypt>
10066d38:	ae0b      	add	r6, sp, #44	@ 0x2c
10066d3a:	2500      	movs	r5, #0
10066d3c:	2210      	movs	r2, #16
10066d3e:	4630      	mov	r0, r6
10066d40:	4629      	mov	r1, r5
10066d42:	f7eb fd1b 	bl	1005277c <BLEPLAT_MemSet>
10066d46:	2706      	movs	r7, #6
10066d48:	4630      	mov	r0, r6
10066d4a:	9904      	ldr	r1, [sp, #16]
10066d4c:	463a      	mov	r2, r7
10066d4e:	f7eb fd05 	bl	1005275c <BLEPLAT_MemCpy>
10066d52:	1db0      	adds	r0, r6, #6
10066d54:	9903      	ldr	r1, [sp, #12]
10066d56:	463a      	mov	r2, r7
10066d58:	f7eb fd00 	bl	1005275c <BLEPLAT_MemCpy>
10066d5c:	2d10      	cmp	r5, #16
10066d5e:	d007      	beq.n	10066d70 <smp_pp2_per_lep_confirm_value_compute+0x134>
10066d60:	5d60      	ldrb	r0, [r4, r5]
10066d62:	a90b      	add	r1, sp, #44	@ 0x2c
10066d64:	5d49      	ldrb	r1, [r1, r5]
10066d66:	4041      	eors	r1, r0
10066d68:	a807      	add	r0, sp, #28
10066d6a:	5541      	strb	r1, [r0, r5]
10066d6c:	1c6d      	adds	r5, r5, #1
10066d6e:	e7f5      	b.n	10066d5c <smp_pp2_per_lep_confirm_value_compute+0x120>
10066d70:	a80f      	add	r0, sp, #60	@ 0x3c
10066d72:	a907      	add	r1, sp, #28
10066d74:	4622      	mov	r2, r4
10066d76:	f7f2 fc33 	bl	100595e0 <hci_le_encrypt>
10066d7a:	b01b      	add	sp, #108	@ 0x6c
10066d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066d7e:	46c0      	nop			@ (mov r8, r8)

10066d80 <__arm_cp.16_0>:
10066d80:	20002b1c 	.word	0x20002b1c

10066d84 <__arm_cp.16_1>:
10066d84:	1005275d 	.word	0x1005275d

10066d88 <smp_pp2_per_rx_process_pairing_random>:
10066d88:	b5f0      	push	{r4, r5, r6, r7, lr}
10066d8a:	b08b      	sub	sp, #44	@ 0x2c
10066d8c:	460d      	mov	r5, r1
10066d8e:	4606      	mov	r6, r0
10066d90:	2400      	movs	r4, #0
10066d92:	9402      	str	r4, [sp, #8]
10066d94:	8909      	ldrh	r1, [r1, #8]
10066d96:	2215      	movs	r2, #21
10066d98:	4620      	mov	r0, r4
10066d9a:	f7ee f855 	bl	10054e48 <ACL_pkt_get>
10066d9e:	2800      	cmp	r0, #0
10066da0:	d020      	beq.n	10066de4 <smp_pp2_per_rx_process_pairing_random+0x5c>
10066da2:	4607      	mov	r7, r0
10066da4:	462b      	mov	r3, r5
10066da6:	3338      	adds	r3, #56	@ 0x38
10066da8:	2105      	movs	r1, #5
10066daa:	2210      	movs	r2, #16
10066dac:	4630      	mov	r0, r6
10066dae:	461e      	mov	r6, r3
10066db0:	f7ee f888 	bl	10054ec4 <ACL_pkt_read>
10066db4:	7de8      	ldrb	r0, [r5, #23]
10066db6:	0700      	lsls	r0, r0, #28
10066db8:	d416      	bmi.n	10066de8 <smp_pp2_per_rx_process_pairing_random+0x60>
10066dba:	9400      	str	r4, [sp, #0]
10066dbc:	4634      	mov	r4, r6
10066dbe:	ae03      	add	r6, sp, #12
10066dc0:	4628      	mov	r0, r5
10066dc2:	4621      	mov	r1, r4
10066dc4:	4632      	mov	r2, r6
10066dc6:	f7ff ff39 	bl	10066c3c <smp_pp2_per_lep_confirm_value_compute>
10066dca:	4629      	mov	r1, r5
10066dcc:	3128      	adds	r1, #40	@ 0x28
10066dce:	2210      	movs	r2, #16
10066dd0:	4630      	mov	r0, r6
10066dd2:	4626      	mov	r6, r4
10066dd4:	9c00      	ldr	r4, [sp, #0]
10066dd6:	f7eb fce1 	bl	1005279c <BLEPLAT_MemCmp>
10066dda:	a901      	add	r1, sp, #4
10066ddc:	22bc      	movs	r2, #188	@ 0xbc
10066dde:	700a      	strb	r2, [r1, #0]
10066de0:	9002      	str	r0, [sp, #8]
10066de2:	e00c      	b.n	10066dfe <smp_pp2_per_rx_process_pairing_random+0x76>
10066de4:	2488      	movs	r4, #136	@ 0x88
10066de6:	e05b      	b.n	10066ea0 <smp_pp2_per_rx_process_pairing_random+0x118>
10066de8:	a801      	add	r0, sp, #4
10066dea:	900a      	str	r0, [sp, #40]	@ 0x28
10066dec:	a802      	add	r0, sp, #8
10066dee:	9009      	str	r0, [sp, #36]	@ 0x24
10066df0:	a803      	add	r0, sp, #12
10066df2:	9008      	str	r0, [sp, #32]
10066df4:	9507      	str	r5, [sp, #28]
10066df6:	a807      	add	r0, sp, #28
10066df8:	f000 f85a 	bl	10066eb0 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>
10066dfc:	9802      	ldr	r0, [sp, #8]
10066dfe:	2800      	cmp	r0, #0
10066e00:	d006      	beq.n	10066e10 <smp_pp2_per_rx_process_pairing_random+0x88>
10066e02:	2104      	movs	r1, #4
10066e04:	2301      	movs	r3, #1
10066e06:	4628      	mov	r0, r5
10066e08:	463a      	mov	r2, r7
10066e0a:	f7ff fc1f 	bl	1006664c <smp_pp3_pairing_failed_send>
10066e0e:	e01b      	b.n	10066e48 <smp_pp2_per_rx_process_pairing_random+0xc0>
10066e10:	2011      	movs	r0, #17
10066e12:	8078      	strh	r0, [r7, #2]
10066e14:	6878      	ldr	r0, [r7, #4]
10066e16:	2104      	movs	r1, #4
10066e18:	7201      	strb	r1, [r0, #8]
10066e1a:	462b      	mov	r3, r5
10066e1c:	3348      	adds	r3, #72	@ 0x48
10066e1e:	2105      	movs	r1, #5
10066e20:	2210      	movs	r2, #16
10066e22:	4638      	mov	r0, r7
10066e24:	f7ee f870 	bl	10054f08 <ACL_pkt_write>
10066e28:	4628      	mov	r0, r5
10066e2a:	4639      	mov	r1, r7
10066e2c:	f7ff fa12 	bl	10066254 <smp_dep_l2c_send_acl_packet>
10066e30:	2800      	cmp	r0, #0
10066e32:	d109      	bne.n	10066e48 <smp_pp2_per_rx_process_pairing_random+0xc0>
10066e34:	9801      	ldr	r0, [sp, #4]
10066e36:	72a8      	strb	r0, [r5, #10]
10066e38:	481b      	ldr	r0, [pc, #108]	@ (10066ea8 <__arm_cp.17_0>)
10066e3a:	6800      	ldr	r0, [r0, #0]
10066e3c:	2135      	movs	r1, #53	@ 0x35
10066e3e:	5c40      	ldrb	r0, [r0, r1]
10066e40:	7c29      	ldrb	r1, [r5, #16]
10066e42:	4281      	cmp	r1, r0
10066e44:	d900      	bls.n	10066e48 <smp_pp2_per_rx_process_pairing_random+0xc0>
10066e46:	7428      	strb	r0, [r5, #16]
10066e48:	9802      	ldr	r0, [sp, #8]
10066e4a:	2800      	cmp	r0, #0
10066e4c:	d128      	bne.n	10066ea0 <smp_pp2_per_rx_process_pairing_random+0x118>
10066e4e:	7de8      	ldrb	r0, [r5, #23]
10066e50:	0700      	lsls	r0, r0, #28
10066e52:	d425      	bmi.n	10066ea0 <smp_pp2_per_rx_process_pairing_random+0x118>
10066e54:	a807      	add	r0, sp, #28
10066e56:	2400      	movs	r4, #0
10066e58:	2210      	movs	r2, #16
10066e5a:	4621      	mov	r1, r4
10066e5c:	f7eb fc8e 	bl	1005277c <BLEPLAT_MemSet>
10066e60:	7ce8      	ldrb	r0, [r5, #19]
10066e62:	2803      	cmp	r0, #3
10066e64:	d00d      	beq.n	10066e82 <smp_pp2_per_rx_process_pairing_random+0xfa>
10066e66:	2802      	cmp	r0, #2
10066e68:	d112      	bne.n	10066e90 <smp_pp2_per_rx_process_pairing_random+0x108>
10066e6a:	480f      	ldr	r0, [pc, #60]	@ (10066ea8 <__arm_cp.17_0>)
10066e6c:	6800      	ldr	r0, [r0, #0]
10066e6e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
10066e70:	a907      	add	r1, sp, #28
10066e72:	7008      	strb	r0, [r1, #0]
10066e74:	0a02      	lsrs	r2, r0, #8
10066e76:	704a      	strb	r2, [r1, #1]
10066e78:	0c02      	lsrs	r2, r0, #16
10066e7a:	708a      	strb	r2, [r1, #2]
10066e7c:	0e00      	lsrs	r0, r0, #24
10066e7e:	70c8      	strb	r0, [r1, #3]
10066e80:	e006      	b.n	10066e90 <smp_pp2_per_rx_process_pairing_random+0x108>
10066e82:	4809      	ldr	r0, [pc, #36]	@ (10066ea8 <__arm_cp.17_0>)
10066e84:	6801      	ldr	r1, [r0, #0]
10066e86:	3144      	adds	r1, #68	@ 0x44
10066e88:	a807      	add	r0, sp, #28
10066e8a:	2210      	movs	r2, #16
10066e8c:	f7eb fc66 	bl	1005275c <BLEPLAT_MemCpy>
10066e90:	4629      	mov	r1, r5
10066e92:	3148      	adds	r1, #72	@ 0x48
10066e94:	3528      	adds	r5, #40	@ 0x28
10066e96:	a807      	add	r0, sp, #28
10066e98:	4632      	mov	r2, r6
10066e9a:	462b      	mov	r3, r5
10066e9c:	f7fa fcd0 	bl	10061840 <smp_crt_s1_generate_stk>
10066ea0:	4620      	mov	r0, r4
10066ea2:	b00b      	add	sp, #44	@ 0x2c
10066ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10066ea6:	46c0      	nop			@ (mov r8, r8)

10066ea8 <__arm_cp.17_0>:
10066ea8:	20002b1c 	.word	0x20002b1c

10066eac <smp_pp2_per_auth_stage1_start_excerpt_scp_ucfg_weak>:
10066eac:	4770      	bx	lr

10066eae <smp_pp2_per_rx_process_pairing_confirm_excerpt_scp_ucfg_weak>:
10066eae:	4770      	bx	lr

10066eb0 <smp_pp2_per_rx_process_pairing_random_excerpt_scp_ucfg_weak>:
10066eb0:	4770      	bx	lr

10066eb2 <smp_pp3_keys_distribution_start>:
10066eb2:	b580      	push	{r7, lr}
10066eb4:	2901      	cmp	r1, #1
10066eb6:	d111      	bne.n	10066edc <smp_pp3_keys_distribution_start+0x2a>
10066eb8:	7c42      	ldrb	r2, [r0, #17]
10066eba:	0753      	lsls	r3, r2, #29
10066ebc:	d005      	beq.n	10066eca <smp_pp3_keys_distribution_start+0x18>
10066ebe:	7dc3      	ldrb	r3, [r0, #23]
10066ec0:	071b      	lsls	r3, r3, #28
10066ec2:	d51d      	bpl.n	10066f00 <smp_pp3_keys_distribution_start+0x4e>
10066ec4:	2306      	movs	r3, #6
10066ec6:	401a      	ands	r2, r3
10066ec8:	d11a      	bne.n	10066f00 <smp_pp3_keys_distribution_start+0x4e>
10066eca:	2260      	movs	r2, #96	@ 0x60
10066ecc:	5c83      	ldrb	r3, [r0, r2]
10066ece:	2201      	movs	r2, #1
10066ed0:	401a      	ands	r2, r3
10066ed2:	2900      	cmp	r1, #0
10066ed4:	d006      	beq.n	10066ee4 <smp_pp3_keys_distribution_start+0x32>
10066ed6:	2a00      	cmp	r2, #0
10066ed8:	d119      	bne.n	10066f0e <smp_pp3_keys_distribution_start+0x5c>
10066eda:	e003      	b.n	10066ee4 <smp_pp3_keys_distribution_start+0x32>
10066edc:	2900      	cmp	r1, #0
10066ede:	d000      	beq.n	10066ee2 <smp_pp3_keys_distribution_start+0x30>
10066ee0:	bd80      	pop	{r7, pc}
10066ee2:	2200      	movs	r2, #0
10066ee4:	7c81      	ldrb	r1, [r0, #18]
10066ee6:	07cb      	lsls	r3, r1, #31
10066ee8:	d004      	beq.n	10066ef4 <smp_pp3_keys_distribution_start+0x42>
10066eea:	7dc3      	ldrb	r3, [r0, #23]
10066eec:	071b      	lsls	r3, r3, #28
10066eee:	d401      	bmi.n	10066ef4 <smp_pp3_keys_distribution_start+0x42>
10066ef0:	21d1      	movs	r1, #209	@ 0xd1
10066ef2:	e009      	b.n	10066f08 <smp_pp3_keys_distribution_start+0x56>
10066ef4:	078b      	lsls	r3, r1, #30
10066ef6:	d406      	bmi.n	10066f06 <smp_pp3_keys_distribution_start+0x54>
10066ef8:	0749      	lsls	r1, r1, #29
10066efa:	d508      	bpl.n	10066f0e <smp_pp3_keys_distribution_start+0x5c>
10066efc:	21d5      	movs	r1, #213	@ 0xd5
10066efe:	e003      	b.n	10066f08 <smp_pp3_keys_distribution_start+0x56>
10066f00:	21d0      	movs	r1, #208	@ 0xd0
10066f02:	7281      	strb	r1, [r0, #10]
10066f04:	bd80      	pop	{r7, pc}
10066f06:	21d3      	movs	r1, #211	@ 0xd3
10066f08:	7281      	strb	r1, [r0, #10]
10066f0a:	2a00      	cmp	r2, #0
10066f0c:	d002      	beq.n	10066f14 <smp_pp3_keys_distribution_start+0x62>
10066f0e:	f000 f804 	bl	10066f1a <smp_pp3_keys_distribution_completed>
10066f12:	bd80      	pop	{r7, pc}
10066f14:	f000 f816 	bl	10066f44 <smp_pp3_keys_distribution_send>
10066f18:	bd80      	pop	{r7, pc}

10066f1a <smp_pp3_keys_distribution_completed>:
10066f1a:	b580      	push	{r7, lr}
10066f1c:	2160      	movs	r1, #96	@ 0x60
10066f1e:	5c41      	ldrb	r1, [r0, r1]
10066f20:	07c9      	lsls	r1, r1, #31
10066f22:	d106      	bne.n	10066f32 <smp_pp3_keys_distribution_completed+0x18>
10066f24:	2111      	movs	r1, #17
10066f26:	5641      	ldrsb	r1, [r0, r1]
10066f28:	2900      	cmp	r1, #0
10066f2a:	d502      	bpl.n	10066f32 <smp_pp3_keys_distribution_completed+0x18>
10066f2c:	7e81      	ldrb	r1, [r0, #26]
10066f2e:	068a      	lsls	r2, r1, #26
10066f30:	d402      	bmi.n	10066f38 <smp_pp3_keys_distribution_completed+0x1e>
10066f32:	f7ff fad3 	bl	100664dc <smp_pp3_pairing_completed_successful>
10066f36:	bd80      	pop	{r7, pc}
10066f38:	2204      	movs	r2, #4
10066f3a:	4311      	orrs	r1, r2
10066f3c:	7681      	strb	r1, [r0, #26]
10066f3e:	f7ff faca 	bl	100664d6 <smp_start_encryption_ucfg_weak>
10066f42:	bd80      	pop	{r7, pc}

10066f44 <smp_pp3_keys_distribution_send>:
10066f44:	b5f0      	push	{r4, r5, r6, r7, lr}
10066f46:	b089      	sub	sp, #36	@ 0x24
10066f48:	4604      	mov	r4, r0
10066f4a:	a808      	add	r0, sp, #32
10066f4c:	2600      	movs	r6, #0
10066f4e:	8006      	strh	r6, [r0, #0]
10066f50:	8921      	ldrh	r1, [r4, #8]
10066f52:	2215      	movs	r2, #21
10066f54:	4630      	mov	r0, r6
10066f56:	f7ed ff77 	bl	10054e48 <ACL_pkt_get>
10066f5a:	2800      	cmp	r0, #0
10066f5c:	d02d      	beq.n	10066fba <smp_pp3_keys_distribution_send+0x76>
10066f5e:	4605      	mov	r5, r0
10066f60:	2060      	movs	r0, #96	@ 0x60
10066f62:	5c20      	ldrb	r0, [r4, r0]
10066f64:	06c0      	lsls	r0, r0, #27
10066f66:	d40b      	bmi.n	10066f80 <smp_pp3_keys_distribution_send+0x3c>
10066f68:	4627      	mov	r7, r4
10066f6a:	3760      	adds	r7, #96	@ 0x60
10066f6c:	4620      	mov	r0, r4
10066f6e:	301c      	adds	r0, #28
10066f70:	2102      	movs	r1, #2
10066f72:	2200      	movs	r2, #0
10066f74:	f7fb ffaf 	bl	10062ed6 <HAL_Generate_Random_Bytes_To>
10066f78:	7838      	ldrb	r0, [r7, #0]
10066f7a:	2110      	movs	r1, #16
10066f7c:	4301      	orrs	r1, r0
10066f7e:	7039      	strb	r1, [r7, #0]
10066f80:	7aa0      	ldrb	r0, [r4, #10]
10066f82:	38d1      	subs	r0, #209	@ 0xd1
10066f84:	2804      	cmp	r0, #4
10066f86:	d875      	bhi.n	10067074 <smp_pp3_keys_distribution_send+0x130>
10066f88:	4478      	add	r0, pc
10066f8a:	7900      	ldrb	r0, [r0, #4]
10066f8c:	0040      	lsls	r0, r0, #1
10066f8e:	4487      	add	pc, r0
10066f90:	4e381902 	.word	0x4e381902
10066f94:	0060      	.short	0x0060
10066f96:	483c      	ldr	r0, [pc, #240]	@ (10067088 <__arm_cp.2_0>)
10066f98:	6800      	ldr	r0, [r0, #0]
10066f9a:	4621      	mov	r1, r4
10066f9c:	311c      	adds	r1, #28
10066f9e:	3008      	adds	r0, #8
10066fa0:	aa08      	add	r2, sp, #32
10066fa2:	ae04      	add	r6, sp, #16
10066fa4:	4633      	mov	r3, r6
10066fa6:	f7fa fbcd 	bl	10061744 <smp_crt_diversify>
10066faa:	6868      	ldr	r0, [r5, #4]
10066fac:	2106      	movs	r1, #6
10066fae:	7201      	strb	r1, [r0, #8]
10066fb0:	2011      	movs	r0, #17
10066fb2:	8068      	strh	r0, [r5, #2]
10066fb4:	7c22      	ldrb	r2, [r4, #16]
10066fb6:	2105      	movs	r1, #5
10066fb8:	e058      	b.n	1006706c <smp_pp3_keys_distribution_send+0x128>
10066fba:	200e      	movs	r0, #14
10066fbc:	2100      	movs	r1, #0
10066fbe:	f7fb fc75 	bl	100628ac <tsk_wait_resource_idx>
10066fc2:	e05f      	b.n	10067084 <smp_pp3_keys_distribution_send+0x140>
10066fc4:	ae04      	add	r6, sp, #16
10066fc6:	2108      	movs	r1, #8
10066fc8:	9102      	str	r1, [sp, #8]
10066fca:	2200      	movs	r2, #0
10066fcc:	4630      	mov	r0, r6
10066fce:	9601      	str	r6, [sp, #4]
10066fd0:	f7fb ff81 	bl	10062ed6 <HAL_Generate_Random_Bytes_To>
10066fd4:	4620      	mov	r0, r4
10066fd6:	301c      	adds	r0, #28
10066fd8:	af08      	add	r7, sp, #32
10066fda:	4631      	mov	r1, r6
10066fdc:	463a      	mov	r2, r7
10066fde:	f7fa fb7b 	bl	100616d8 <smp_sap_crt_generate_ediv>
10066fe2:	200b      	movs	r0, #11
10066fe4:	8068      	strh	r0, [r5, #2]
10066fe6:	6868      	ldr	r0, [r5, #4]
10066fe8:	2607      	movs	r6, #7
10066fea:	7206      	strb	r6, [r0, #8]
10066fec:	2105      	movs	r1, #5
10066fee:	2202      	movs	r2, #2
10066ff0:	4628      	mov	r0, r5
10066ff2:	463b      	mov	r3, r7
10066ff4:	f7ed ff88 	bl	10054f08 <ACL_pkt_write>
10066ff8:	4628      	mov	r0, r5
10066ffa:	4631      	mov	r1, r6
10066ffc:	9a02      	ldr	r2, [sp, #8]
10066ffe:	9b01      	ldr	r3, [sp, #4]
10067000:	e036      	b.n	10067070 <smp_pp3_keys_distribution_send+0x12c>
10067002:	2011      	movs	r0, #17
10067004:	8068      	strh	r0, [r5, #2]
10067006:	6868      	ldr	r0, [r5, #4]
10067008:	2108      	movs	r1, #8
1006700a:	7201      	strb	r1, [r0, #8]
1006700c:	a804      	add	r0, sp, #16
1006700e:	2100      	movs	r1, #0
10067010:	2210      	movs	r2, #16
10067012:	f7eb fbb3 	bl	1005277c <BLEPLAT_MemSet>
10067016:	f7ef f989 	bl	1005632c <GapIsPrivacySupported>
1006701a:	2800      	cmp	r0, #0
1006701c:	d002      	beq.n	10067024 <smp_pp3_keys_distribution_send+0xe0>
1006701e:	a804      	add	r0, sp, #16
10067020:	f7fa fba4 	bl	1006176c <smp_sap_crt_generate_local_irk>
10067024:	2105      	movs	r1, #5
10067026:	2210      	movs	r2, #16
10067028:	ab04      	add	r3, sp, #16
1006702a:	4628      	mov	r0, r5
1006702c:	e020      	b.n	10067070 <smp_pp3_keys_distribution_send+0x12c>
1006702e:	a803      	add	r0, sp, #12
10067030:	7006      	strb	r6, [r0, #0]
10067032:	ae04      	add	r6, sp, #16
10067034:	4631      	mov	r1, r6
10067036:	f7ff f8f5 	bl	10066224 <smp_dep_gap_get_local_identity_address>
1006703a:	2008      	movs	r0, #8
1006703c:	8068      	strh	r0, [r5, #2]
1006703e:	6868      	ldr	r0, [r5, #4]
10067040:	2109      	movs	r1, #9
10067042:	7201      	strb	r1, [r0, #8]
10067044:	6868      	ldr	r0, [r5, #4]
10067046:	9903      	ldr	r1, [sp, #12]
10067048:	7241      	strb	r1, [r0, #9]
1006704a:	2106      	movs	r1, #6
1006704c:	4628      	mov	r0, r5
1006704e:	460a      	mov	r2, r1
10067050:	e00d      	b.n	1006706e <smp_pp3_keys_distribution_send+0x12a>
10067052:	2011      	movs	r0, #17
10067054:	8068      	strh	r0, [r5, #2]
10067056:	6868      	ldr	r0, [r5, #4]
10067058:	210a      	movs	r1, #10
1006705a:	7201      	strb	r1, [r0, #8]
1006705c:	4620      	mov	r0, r4
1006705e:	301c      	adds	r0, #28
10067060:	ae04      	add	r6, sp, #16
10067062:	4631      	mov	r1, r6
10067064:	f7fa fc04 	bl	10061870 <smp_crt_generate_csrk>
10067068:	2105      	movs	r1, #5
1006706a:	2210      	movs	r2, #16
1006706c:	4628      	mov	r0, r5
1006706e:	4633      	mov	r3, r6
10067070:	f7ed ff4a 	bl	10054f08 <ACL_pkt_write>
10067074:	4620      	mov	r0, r4
10067076:	4629      	mov	r1, r5
10067078:	f7ff f8ec 	bl	10066254 <smp_dep_l2c_send_acl_packet>
1006707c:	2800      	cmp	r0, #0
1006707e:	d101      	bne.n	10067084 <smp_pp3_keys_distribution_send+0x140>
10067080:	20dd      	movs	r0, #221	@ 0xdd
10067082:	72a0      	strb	r0, [r4, #10]
10067084:	b009      	add	sp, #36	@ 0x24
10067086:	bdf0      	pop	{r4, r5, r6, r7, pc}

10067088 <__arm_cp.2_0>:
10067088:	20002a7c 	.word	0x20002a7c

1006708c <smp_pp3_keys_distribution_signaling_ack>:
1006708c:	b580      	push	{r7, lr}
1006708e:	7a82      	ldrb	r2, [r0, #10]
10067090:	2add      	cmp	r2, #221	@ 0xdd
10067092:	d123      	bne.n	100670dc <smp_pp3_keys_distribution_signaling_ack+0x50>
10067094:	1f8a      	subs	r2, r1, #6
10067096:	2a04      	cmp	r2, #4
10067098:	d81e      	bhi.n	100670d8 <smp_pp3_keys_distribution_signaling_ack+0x4c>
1006709a:	21d2      	movs	r1, #210	@ 0xd2
1006709c:	447a      	add	r2, pc
1006709e:	7912      	ldrb	r2, [r2, #4]
100670a0:	0052      	lsls	r2, r2, #1
100670a2:	4497      	add	pc, r2
100670a4:	07110218 	.word	0x07110218
100670a8:	000a      	.short	0x000a
100670aa:	7c81      	ldrb	r1, [r0, #18]
100670ac:	078a      	lsls	r2, r1, #30
100670ae:	d502      	bpl.n	100670b6 <smp_pp3_keys_distribution_signaling_ack+0x2a>
100670b0:	21d3      	movs	r1, #211	@ 0xd3
100670b2:	e010      	b.n	100670d6 <smp_pp3_keys_distribution_signaling_ack+0x4a>
100670b4:	7c81      	ldrb	r1, [r0, #18]
100670b6:	0749      	lsls	r1, r1, #29
100670b8:	d40c      	bmi.n	100670d4 <smp_pp3_keys_distribution_signaling_ack+0x48>
100670ba:	2160      	movs	r1, #96	@ 0x60
100670bc:	5c41      	ldrb	r1, [r0, r1]
100670be:	07c9      	lsls	r1, r1, #31
100670c0:	d104      	bne.n	100670cc <smp_pp3_keys_distribution_signaling_ack+0x40>
100670c2:	f7ff ff2a 	bl	10066f1a <smp_pp3_keys_distribution_completed>
100670c6:	bd80      	pop	{r7, pc}
100670c8:	21d4      	movs	r1, #212	@ 0xd4
100670ca:	e004      	b.n	100670d6 <smp_pp3_keys_distribution_signaling_ack+0x4a>
100670cc:	2101      	movs	r1, #1
100670ce:	f7ff fef0 	bl	10066eb2 <smp_pp3_keys_distribution_start>
100670d2:	bd80      	pop	{r7, pc}
100670d4:	21d5      	movs	r1, #213	@ 0xd5
100670d6:	7281      	strb	r1, [r0, #10]
100670d8:	f7ff ff34 	bl	10066f44 <smp_pp3_keys_distribution_send>
100670dc:	bd80      	pop	{r7, pc}
	...

100670e0 <smp_pp3_keys_distribution_receive>:
100670e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100670e2:	b085      	sub	sp, #20
100670e4:	4607      	mov	r7, r0
100670e6:	6840      	ldr	r0, [r0, #4]
100670e8:	7a05      	ldrb	r5, [r0, #8]
100670ea:	1fa8      	subs	r0, r5, #6
100670ec:	2804      	cmp	r0, #4
100670ee:	d823      	bhi.n	10067138 <smp_pp3_keys_distribution_receive+0x58>
100670f0:	460c      	mov	r4, r1
100670f2:	7a88      	ldrb	r0, [r1, #10]
100670f4:	2686      	movs	r6, #134	@ 0x86
100670f6:	28d0      	cmp	r0, #208	@ 0xd0
100670f8:	d11f      	bne.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
100670fa:	4620      	mov	r0, r4
100670fc:	3059      	adds	r0, #89	@ 0x59
100670fe:	9001      	str	r0, [sp, #4]
10067100:	8920      	ldrh	r0, [r4, #8]
10067102:	f000 f995 	bl	10067430 <smp_get_remote_device_list_index>
10067106:	4602      	mov	r2, r0
10067108:	2000      	movs	r0, #0
1006710a:	4b44      	ldr	r3, [pc, #272]	@ (1006721c <__arm_cp.4_0>)
1006710c:	9002      	str	r0, [sp, #8]
1006710e:	4601      	mov	r1, r0
10067110:	f7fa fe56 	bl	10061dc0 <smp_timer_reset>
10067114:	2d06      	cmp	r5, #6
10067116:	d005      	beq.n	10067124 <smp_pp3_keys_distribution_receive+0x44>
10067118:	2d09      	cmp	r5, #9
1006711a:	d011      	beq.n	10067140 <smp_pp3_keys_distribution_receive+0x60>
1006711c:	2d08      	cmp	r5, #8
1006711e:	d034      	beq.n	1006718a <smp_pp3_keys_distribution_receive+0xaa>
10067120:	2d07      	cmp	r5, #7
10067122:	d13d      	bne.n	100671a0 <smp_pp3_keys_distribution_receive+0xc0>
10067124:	7de0      	ldrb	r0, [r4, #23]
10067126:	0700      	lsls	r0, r0, #28
10067128:	d407      	bmi.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
1006712a:	7c60      	ldrb	r0, [r4, #17]
1006712c:	07c0      	lsls	r0, r0, #31
1006712e:	d004      	beq.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
10067130:	2d06      	cmp	r5, #6
10067132:	d144      	bne.n	100671be <smp_pp3_keys_distribution_receive+0xde>
10067134:	3428      	adds	r4, #40	@ 0x28
10067136:	e02c      	b.n	10067192 <smp_pp3_keys_distribution_receive+0xb2>
10067138:	2684      	movs	r6, #132	@ 0x84
1006713a:	4630      	mov	r0, r6
1006713c:	b005      	add	sp, #20
1006713e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067140:	7c60      	ldrb	r0, [r4, #17]
10067142:	0780      	lsls	r0, r0, #30
10067144:	d5f9      	bpl.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
10067146:	ab03      	add	r3, sp, #12
10067148:	2600      	movs	r6, #0
1006714a:	809e      	strh	r6, [r3, #4]
1006714c:	9603      	str	r6, [sp, #12]
1006714e:	2106      	movs	r1, #6
10067150:	4638      	mov	r0, r7
10067152:	460a      	mov	r2, r1
10067154:	f7ed fead 	bl	10054eb2 <ACL_pkt_cmp>
10067158:	2800      	cmp	r0, #0
1006715a:	d045      	beq.n	100671e8 <smp_pp3_keys_distribution_receive+0x108>
1006715c:	6878      	ldr	r0, [r7, #4]
1006715e:	7a40      	ldrb	r0, [r0, #9]
10067160:	9d01      	ldr	r5, [sp, #4]
10067162:	7028      	strb	r0, [r5, #0]
10067164:	4623      	mov	r3, r4
10067166:	335a      	adds	r3, #90	@ 0x5a
10067168:	2106      	movs	r1, #6
1006716a:	4638      	mov	r0, r7
1006716c:	460a      	mov	r2, r1
1006716e:	f7ed fea9 	bl	10054ec4 <ACL_pkt_read>
10067172:	7828      	ldrb	r0, [r5, #0]
10067174:	2801      	cmp	r0, #1
10067176:	d103      	bne.n	10067180 <smp_pp3_keys_distribution_receive+0xa0>
10067178:	79a8      	ldrb	r0, [r5, #6]
1006717a:	0980      	lsrs	r0, r0, #6
1006717c:	2803      	cmp	r0, #3
1006717e:	d345      	bcc.n	1006720c <smp_pp3_keys_distribution_receive+0x12c>
10067180:	7c61      	ldrb	r1, [r4, #17]
10067182:	2020      	movs	r0, #32
10067184:	4308      	orrs	r0, r1
10067186:	7460      	strb	r0, [r4, #17]
10067188:	e02f      	b.n	100671ea <smp_pp3_keys_distribution_receive+0x10a>
1006718a:	7c60      	ldrb	r0, [r4, #17]
1006718c:	0780      	lsls	r0, r0, #30
1006718e:	d5d4      	bpl.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
10067190:	3438      	adds	r4, #56	@ 0x38
10067192:	2105      	movs	r1, #5
10067194:	2210      	movs	r2, #16
10067196:	4638      	mov	r0, r7
10067198:	4623      	mov	r3, r4
1006719a:	f7ed fe93 	bl	10054ec4 <ACL_pkt_read>
1006719e:	e033      	b.n	10067208 <smp_pp3_keys_distribution_receive+0x128>
100671a0:	7c60      	ldrb	r0, [r4, #17]
100671a2:	0740      	lsls	r0, r0, #29
100671a4:	d5c9      	bpl.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
100671a6:	4623      	mov	r3, r4
100671a8:	3348      	adds	r3, #72	@ 0x48
100671aa:	2105      	movs	r1, #5
100671ac:	2210      	movs	r2, #16
100671ae:	4638      	mov	r0, r7
100671b0:	f7ed fe88 	bl	10054ec4 <ACL_pkt_read>
100671b4:	7c60      	ldrb	r0, [r4, #17]
100671b6:	2140      	movs	r1, #64	@ 0x40
100671b8:	4301      	orrs	r1, r0
100671ba:	7461      	strb	r1, [r4, #17]
100671bc:	e017      	b.n	100671ee <smp_pp3_keys_distribution_receive+0x10e>
100671be:	6878      	ldr	r0, [r7, #4]
100671c0:	7a40      	ldrb	r0, [r0, #9]
100671c2:	77a0      	strb	r0, [r4, #30]
100671c4:	6878      	ldr	r0, [r7, #4]
100671c6:	7a80      	ldrb	r0, [r0, #10]
100671c8:	77e0      	strb	r0, [r4, #31]
100671ca:	4623      	mov	r3, r4
100671cc:	3320      	adds	r3, #32
100671ce:	2107      	movs	r1, #7
100671d0:	2208      	movs	r2, #8
100671d2:	4638      	mov	r0, r7
100671d4:	f7ed fe76 	bl	10054ec4 <ACL_pkt_read>
100671d8:	7c60      	ldrb	r0, [r4, #17]
100671da:	2180      	movs	r1, #128	@ 0x80
100671dc:	4301      	orrs	r1, r0
100671de:	7461      	strb	r1, [r4, #17]
100671e0:	0740      	lsls	r0, r0, #29
100671e2:	0f80      	lsrs	r0, r0, #30
100671e4:	d110      	bne.n	10067208 <smp_pp3_keys_distribution_receive+0x128>
100671e6:	e002      	b.n	100671ee <smp_pp3_keys_distribution_receive+0x10e>
100671e8:	7c60      	ldrb	r0, [r4, #17]
100671ea:	0740      	lsls	r0, r0, #29
100671ec:	d4a5      	bmi.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
100671ee:	9801      	ldr	r0, [sp, #4]
100671f0:	79c0      	ldrb	r0, [r0, #7]
100671f2:	07c0      	lsls	r0, r0, #31
100671f4:	d105      	bne.n	10067202 <smp_pp3_keys_distribution_receive+0x122>
100671f6:	2600      	movs	r6, #0
100671f8:	4620      	mov	r0, r4
100671fa:	4631      	mov	r1, r6
100671fc:	f7ff fe59 	bl	10066eb2 <smp_pp3_keys_distribution_start>
10067200:	e79b      	b.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
10067202:	4620      	mov	r0, r4
10067204:	f7ff f96a 	bl	100664dc <smp_pp3_pairing_completed_successful>
10067208:	9e02      	ldr	r6, [sp, #8]
1006720a:	e796      	b.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>
1006720c:	2108      	movs	r1, #8
1006720e:	2200      	movs	r2, #0
10067210:	2301      	movs	r3, #1
10067212:	4620      	mov	r0, r4
10067214:	f7ff fa1a 	bl	1006664c <smp_pp3_pairing_failed_send>
10067218:	4606      	mov	r6, r0
1006721a:	e78e      	b.n	1006713a <smp_pp3_keys_distribution_receive+0x5a>

1006721c <__arm_cp.4_0>:
1006721c:	00007530 	.word	0x00007530

10067220 <smp_cmn_rejectlist_init>:
10067220:	b580      	push	{r7, lr}
10067222:	2003      	movs	r0, #3
10067224:	2108      	movs	r1, #8
10067226:	f7f9 fd59 	bl	10060cdc <csmem_mem_0_assign>
1006722a:	4902      	ldr	r1, [pc, #8]	@ (10067234 <__arm_cp.0_0>)
1006722c:	6809      	ldr	r1, [r1, #0]
1006722e:	22a8      	movs	r2, #168	@ 0xa8
10067230:	5088      	str	r0, [r1, r2]
10067232:	bd80      	pop	{r7, pc}

10067234 <__arm_cp.0_0>:
10067234:	20002b1c 	.word	0x20002b1c

10067238 <smp_cmn_repeated_attacks_protection_start>:
10067238:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
1006723a:	9101      	str	r1, [sp, #4]
1006723c:	2003      	movs	r0, #3
1006723e:	9002      	str	r0, [sp, #8]
10067240:	2700      	movs	r7, #0
10067242:	4a30      	ldr	r2, [pc, #192]	@ (10067304 <__arm_cp.1_0>)
10067244:	463d      	mov	r5, r7
10067246:	4616      	mov	r6, r2
10067248:	6810      	ldr	r0, [r2, #0]
1006724a:	24a8      	movs	r4, #168	@ 0xa8
1006724c:	5900      	ldr	r0, [r0, r4]
1006724e:	19c0      	adds	r0, r0, r7
10067250:	1c80      	adds	r0, r0, #2
10067252:	2206      	movs	r2, #6
10067254:	9901      	ldr	r1, [sp, #4]
10067256:	f7eb faa1 	bl	1005279c <BLEPLAT_MemCmp>
1006725a:	2800      	cmp	r0, #0
1006725c:	d031      	beq.n	100672c2 <smp_cmn_repeated_attacks_protection_start+0x8a>
1006725e:	9802      	ldr	r0, [sp, #8]
10067260:	2803      	cmp	r0, #3
10067262:	4632      	mov	r2, r6
10067264:	d109      	bne.n	1006727a <smp_cmn_repeated_attacks_protection_start+0x42>
10067266:	6810      	ldr	r0, [r2, #0]
10067268:	5900      	ldr	r0, [r0, r4]
1006726a:	5dc0      	ldrb	r0, [r0, r7]
1006726c:	0680      	lsls	r0, r0, #26
1006726e:	0f80      	lsrs	r0, r0, #30
10067270:	d001      	beq.n	10067276 <smp_cmn_repeated_attacks_protection_start+0x3e>
10067272:	2003      	movs	r0, #3
10067274:	e000      	b.n	10067278 <smp_cmn_repeated_attacks_protection_start+0x40>
10067276:	b2e8      	uxtb	r0, r5
10067278:	9002      	str	r0, [sp, #8]
1006727a:	3708      	adds	r7, #8
1006727c:	1c6d      	adds	r5, r5, #1
1006727e:	2d03      	cmp	r5, #3
10067280:	d1e1      	bne.n	10067246 <smp_cmn_repeated_attacks_protection_start+0xe>
10067282:	6810      	ldr	r0, [r2, #0]
10067284:	2541      	movs	r5, #65	@ 0x41
10067286:	5d41      	ldrb	r1, [r0, r5]
10067288:	30a8      	adds	r0, #168	@ 0xa8
1006728a:	2902      	cmp	r1, #2
1006728c:	d836      	bhi.n	100672fc <smp_cmn_repeated_attacks_protection_start+0xc4>
1006728e:	9902      	ldr	r1, [sp, #8]
10067290:	00cf      	lsls	r7, r1, #3
10067292:	6800      	ldr	r0, [r0, #0]
10067294:	19c0      	adds	r0, r0, r7
10067296:	1c80      	adds	r0, r0, #2
10067298:	4616      	mov	r6, r2
1006729a:	2206      	movs	r2, #6
1006729c:	9901      	ldr	r1, [sp, #4]
1006729e:	f7eb fa5d 	bl	1005275c <BLEPLAT_MemCpy>
100672a2:	6830      	ldr	r0, [r6, #0]
100672a4:	5900      	ldr	r0, [r0, r4]
100672a6:	2110      	movs	r1, #16
100672a8:	55c1      	strb	r1, [r0, r7]
100672aa:	9802      	ldr	r0, [sp, #8]
100672ac:	b2c2      	uxtb	r2, r0
100672ae:	2000      	movs	r0, #0
100672b0:	2101      	movs	r1, #1
100672b2:	4b15      	ldr	r3, [pc, #84]	@ (10067308 <__arm_cp.1_1>)
100672b4:	f7fa fd84 	bl	10061dc0 <smp_timer_reset>
100672b8:	6830      	ldr	r0, [r6, #0]
100672ba:	5d41      	ldrb	r1, [r0, r5]
100672bc:	1c49      	adds	r1, r1, #1
100672be:	5541      	strb	r1, [r0, r5]
100672c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100672c2:	6830      	ldr	r0, [r6, #0]
100672c4:	5900      	ldr	r0, [r0, r4]
100672c6:	5dc3      	ldrb	r3, [r0, r7]
100672c8:	21cf      	movs	r1, #207	@ 0xcf
100672ca:	4019      	ands	r1, r3
100672cc:	3110      	adds	r1, #16
100672ce:	2203      	movs	r2, #3
100672d0:	401a      	ands	r2, r3
100672d2:	1c53      	adds	r3, r2, #1
100672d4:	2a03      	cmp	r2, #3
100672d6:	d002      	beq.n	100672de <smp_cmn_repeated_attacks_protection_start+0xa6>
100672d8:	24dc      	movs	r4, #220	@ 0xdc
100672da:	4021      	ands	r1, r4
100672dc:	4319      	orrs	r1, r3
100672de:	55c1      	strb	r1, [r0, r7]
100672e0:	2a03      	cmp	r2, #3
100672e2:	d100      	bne.n	100672e6 <smp_cmn_repeated_attacks_protection_start+0xae>
100672e4:	4613      	mov	r3, r2
100672e6:	a009      	add	r0, pc, #36	@ (adr r0, 1006730c <__arm_cp.1_1+0x4>)
100672e8:	5cc0      	ldrb	r0, [r0, r3]
100672ea:	217d      	movs	r1, #125	@ 0x7d
100672ec:	00cb      	lsls	r3, r1, #3
100672ee:	4343      	muls	r3, r0
100672f0:	b2ea      	uxtb	r2, r5
100672f2:	2000      	movs	r0, #0
100672f4:	2101      	movs	r1, #1
100672f6:	f7fa fd63 	bl	10061dc0 <smp_timer_reset>
100672fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100672fc:	2101      	movs	r1, #1
100672fe:	7201      	strb	r1, [r0, #8]
10067300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067302:	46c0      	nop			@ (mov r8, r8)

10067304 <__arm_cp.1_0>:
10067304:	20002b1c 	.word	0x20002b1c

10067308 <__arm_cp.1_1>:
10067308:	00000bb8 	.word	0x00000bb8
1006730c:	140a0503 	.word	0x140a0503

10067310 <smp_cmn_repeated_attacks_timer_cb>:
10067310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067312:	4e29      	ldr	r6, [pc, #164]	@ (100673b8 <__arm_cp.2_0>)
10067314:	6831      	ldr	r1, [r6, #0]
10067316:	25a8      	movs	r5, #168	@ 0xa8
10067318:	5949      	ldr	r1, [r1, r5]
1006731a:	00c4      	lsls	r4, r0, #3
1006731c:	5d0a      	ldrb	r2, [r1, r4]
1006731e:	06d3      	lsls	r3, r2, #27
10067320:	d40e      	bmi.n	10067340 <smp_cmn_repeated_attacks_timer_cb+0x30>
10067322:	0693      	lsls	r3, r2, #26
10067324:	d546      	bpl.n	100673b4 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067326:	1909      	adds	r1, r1, r4
10067328:	0793      	lsls	r3, r2, #30
1006732a:	d035      	beq.n	10067398 <smp_cmn_repeated_attacks_timer_cb+0x88>
1006732c:	23fc      	movs	r3, #252	@ 0xfc
1006732e:	4013      	ands	r3, r2
10067330:	1e52      	subs	r2, r2, #1
10067332:	2403      	movs	r4, #3
10067334:	4014      	ands	r4, r2
10067336:	18e2      	adds	r2, r4, r3
10067338:	700a      	strb	r2, [r1, #0]
1006733a:	f000 f841 	bl	100673c0 <smp_cmn_rejectlist_start_probation_timer2>
1006733e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067340:	f000 f83e 	bl	100673c0 <smp_cmn_rejectlist_start_probation_timer2>
10067344:	6830      	ldr	r0, [r6, #0]
10067346:	5940      	ldr	r0, [r0, r5]
10067348:	1900      	adds	r0, r0, r4
1006734a:	1c84      	adds	r4, r0, #2
1006734c:	2065      	movs	r0, #101	@ 0x65
1006734e:	43c6      	mvns	r6, r0
10067350:	4637      	mov	r7, r6
10067352:	3765      	adds	r7, #101	@ 0x65
10067354:	4819      	ldr	r0, [pc, #100]	@ (100673bc <__arm_cp.2_1>)
10067356:	6800      	ldr	r0, [r0, #0]
10067358:	2134      	movs	r1, #52	@ 0x34
1006735a:	5c40      	ldrb	r0, [r0, r1]
1006735c:	1c7f      	adds	r7, r7, #1
1006735e:	4287      	cmp	r7, r0
10067360:	d228      	bcs.n	100673b4 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067362:	4815      	ldr	r0, [pc, #84]	@ (100673b8 <__arm_cp.2_0>)
10067364:	6800      	ldr	r0, [r0, #0]
10067366:	25a4      	movs	r5, #164	@ 0xa4
10067368:	5940      	ldr	r0, [r0, r5]
1006736a:	1980      	adds	r0, r0, r6
1006736c:	3670      	adds	r6, #112	@ 0x70
1006736e:	3068      	adds	r0, #104	@ 0x68
10067370:	2206      	movs	r2, #6
10067372:	4621      	mov	r1, r4
10067374:	f7eb fa12 	bl	1005279c <BLEPLAT_MemCmp>
10067378:	2800      	cmp	r0, #0
1006737a:	d1eb      	bne.n	10067354 <smp_cmn_repeated_attacks_timer_cb+0x44>
1006737c:	480e      	ldr	r0, [pc, #56]	@ (100673b8 <__arm_cp.2_0>)
1006737e:	6800      	ldr	r0, [r0, #0]
10067380:	5940      	ldr	r0, [r0, r5]
10067382:	5d81      	ldrb	r1, [r0, r6]
10067384:	29fb      	cmp	r1, #251	@ 0xfb
10067386:	d115      	bne.n	100673b4 <smp_cmn_repeated_attacks_timer_cb+0xa4>
10067388:	2110      	movs	r1, #16
1006738a:	5581      	strb	r1, [r0, r6]
1006738c:	200e      	movs	r0, #14
1006738e:	f7fb fa7b 	bl	10062888 <tsk_notify_idx>
10067392:	f7ea fbfc 	bl	10051b8e <BLE_STACK_ProcessRequest>
10067396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067398:	4635      	mov	r5, r6
1006739a:	2400      	movs	r4, #0
1006739c:	2208      	movs	r2, #8
1006739e:	4608      	mov	r0, r1
100673a0:	4621      	mov	r1, r4
100673a2:	f7eb f9eb 	bl	1005277c <BLEPLAT_MemSet>
100673a6:	6830      	ldr	r0, [r6, #0]
100673a8:	21b0      	movs	r1, #176	@ 0xb0
100673aa:	5444      	strb	r4, [r0, r1]
100673ac:	2141      	movs	r1, #65	@ 0x41
100673ae:	5c42      	ldrb	r2, [r0, r1]
100673b0:	1e52      	subs	r2, r2, #1
100673b2:	5442      	strb	r2, [r0, r1]
100673b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100673b6:	46c0      	nop			@ (mov r8, r8)

100673b8 <__arm_cp.2_0>:
100673b8:	20002b1c 	.word	0x20002b1c

100673bc <__arm_cp.2_1>:
100673bc:	20002a7c 	.word	0x20002a7c

100673c0 <smp_cmn_rejectlist_start_probation_timer2>:
100673c0:	b510      	push	{r4, lr}
100673c2:	4604      	mov	r4, r0
100673c4:	2000      	movs	r0, #0
100673c6:	2101      	movs	r1, #1
100673c8:	4b07      	ldr	r3, [pc, #28]	@ (100673e8 <__arm_cp.3_0>)
100673ca:	4622      	mov	r2, r4
100673cc:	f7fa fcf8 	bl	10061dc0 <smp_timer_reset>
100673d0:	4806      	ldr	r0, [pc, #24]	@ (100673ec <__arm_cp.3_1>)
100673d2:	6800      	ldr	r0, [r0, #0]
100673d4:	21a8      	movs	r1, #168	@ 0xa8
100673d6:	5840      	ldr	r0, [r0, r1]
100673d8:	00e1      	lsls	r1, r4, #3
100673da:	5c42      	ldrb	r2, [r0, r1]
100673dc:	23cf      	movs	r3, #207	@ 0xcf
100673de:	4013      	ands	r3, r2
100673e0:	3320      	adds	r3, #32
100673e2:	5443      	strb	r3, [r0, r1]
100673e4:	bd10      	pop	{r4, pc}
100673e6:	46c0      	nop			@ (mov r8, r8)

100673e8 <__arm_cp.3_0>:
100673e8:	00004e20 	.word	0x00004e20

100673ec <__arm_cp.3_1>:
100673ec:	20002b1c 	.word	0x20002b1c

100673f0 <smp_cmn_is_peer_rejectlisted>:
100673f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100673f2:	460c      	mov	r4, r1
100673f4:	2007      	movs	r0, #7
100673f6:	43c0      	mvns	r0, r0
100673f8:	4e0c      	ldr	r6, [pc, #48]	@ (1006742c <__arm_cp.4_0>)
100673fa:	4605      	mov	r5, r0
100673fc:	3508      	adds	r5, #8
100673fe:	2d18      	cmp	r5, #24
10067400:	d010      	beq.n	10067424 <smp_cmn_is_peer_rejectlisted+0x34>
10067402:	6831      	ldr	r1, [r6, #0]
10067404:	27a8      	movs	r7, #168	@ 0xa8
10067406:	59c9      	ldr	r1, [r1, r7]
10067408:	1808      	adds	r0, r1, r0
1006740a:	300a      	adds	r0, #10
1006740c:	2206      	movs	r2, #6
1006740e:	4621      	mov	r1, r4
10067410:	f7eb f9c4 	bl	1005279c <BLEPLAT_MemCmp>
10067414:	2800      	cmp	r0, #0
10067416:	4628      	mov	r0, r5
10067418:	d1f0      	bne.n	100673fc <smp_cmn_is_peer_rejectlisted+0xc>
1006741a:	6830      	ldr	r0, [r6, #0]
1006741c:	59c0      	ldr	r0, [r0, r7]
1006741e:	5d40      	ldrb	r0, [r0, r5]
10067420:	06c0      	lsls	r0, r0, #27
10067422:	d401      	bmi.n	10067428 <smp_cmn_is_peer_rejectlisted+0x38>
10067424:	2000      	movs	r0, #0
10067426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067428:	2001      	movs	r0, #1
1006742a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1006742c <__arm_cp.4_0>:
1006742c:	20002b1c 	.word	0x20002b1c

10067430 <smp_get_remote_device_list_index>:
10067430:	b5b0      	push	{r4, r5, r7, lr}
10067432:	490d      	ldr	r1, [pc, #52]	@ (10067468 <__arm_cp.0_0>)
10067434:	6809      	ldr	r1, [r1, #0]
10067436:	2234      	movs	r2, #52	@ 0x34
10067438:	5c89      	ldrb	r1, [r1, r2]
1006743a:	2800      	cmp	r0, #0
1006743c:	d011      	beq.n	10067462 <smp_get_remote_device_list_index+0x32>
1006743e:	4a0b      	ldr	r2, [pc, #44]	@ (1006746c <__arm_cp.0_1>)
10067440:	6812      	ldr	r2, [r2, #0]
10067442:	32a4      	adds	r2, #164	@ 0xa4
10067444:	2300      	movs	r3, #0
10067446:	b2dc      	uxtb	r4, r3
10067448:	428c      	cmp	r4, r1
1006744a:	d20a      	bcs.n	10067462 <smp_get_remote_device_list_index+0x32>
1006744c:	2570      	movs	r5, #112	@ 0x70
1006744e:	4365      	muls	r5, r4
10067450:	6814      	ldr	r4, [r2, #0]
10067452:	1964      	adds	r4, r4, r5
10067454:	8924      	ldrh	r4, [r4, #8]
10067456:	4044      	eors	r4, r0
10067458:	0524      	lsls	r4, r4, #20
1006745a:	d001      	beq.n	10067460 <smp_get_remote_device_list_index+0x30>
1006745c:	1c5b      	adds	r3, r3, #1
1006745e:	e7f2      	b.n	10067446 <smp_get_remote_device_list_index+0x16>
10067460:	4619      	mov	r1, r3
10067462:	b2c8      	uxtb	r0, r1
10067464:	bdb0      	pop	{r4, r5, r7, pc}
10067466:	46c0      	nop			@ (mov r8, r8)

10067468 <__arm_cp.0_0>:
10067468:	20002a7c 	.word	0x20002a7c

1006746c <__arm_cp.0_1>:
1006746c:	20002b1c 	.word	0x20002b1c

10067470 <smp_get_remote_device_list_item>:
10067470:	b5f0      	push	{r4, r5, r6, r7, lr}
10067472:	4601      	mov	r1, r0
10067474:	2000      	movs	r0, #0
10067476:	2900      	cmp	r1, #0
10067478:	d017      	beq.n	100674aa <smp_get_remote_device_list_item+0x3a>
1006747a:	4a0c      	ldr	r2, [pc, #48]	@ (100674ac <__arm_cp.1_0>)
1006747c:	6812      	ldr	r2, [r2, #0]
1006747e:	2334      	movs	r3, #52	@ 0x34
10067480:	5cd3      	ldrb	r3, [r2, r3]
10067482:	2270      	movs	r2, #112	@ 0x70
10067484:	435a      	muls	r2, r3
10067486:	236f      	movs	r3, #111	@ 0x6f
10067488:	43dd      	mvns	r5, r3
1006748a:	4b09      	ldr	r3, [pc, #36]	@ (100674b0 <__arm_cp.1_1>)
1006748c:	681b      	ldr	r3, [r3, #0]
1006748e:	33a4      	adds	r3, #164	@ 0xa4
10067490:	462c      	mov	r4, r5
10067492:	3470      	adds	r4, #112	@ 0x70
10067494:	42a2      	cmp	r2, r4
10067496:	d008      	beq.n	100674aa <smp_get_remote_device_list_item+0x3a>
10067498:	681e      	ldr	r6, [r3, #0]
1006749a:	1975      	adds	r5, r6, r5
1006749c:	2778      	movs	r7, #120	@ 0x78
1006749e:	5bed      	ldrh	r5, [r5, r7]
100674a0:	404d      	eors	r5, r1
100674a2:	052d      	lsls	r5, r5, #20
100674a4:	4625      	mov	r5, r4
100674a6:	d1f4      	bne.n	10067492 <smp_get_remote_device_list_item+0x22>
100674a8:	1930      	adds	r0, r6, r4
100674aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

100674ac <__arm_cp.1_0>:
100674ac:	20002a7c 	.word	0x20002a7c

100674b0 <__arm_cp.1_1>:
100674b0:	20002b1c 	.word	0x20002b1c

100674b4 <smp_oob_check_is_remote_data_present>:
100674b4:	b5b0      	push	{r4, r5, r7, lr}
100674b6:	4604      	mov	r4, r0
100674b8:	480b      	ldr	r0, [pc, #44]	@ (100674e8 <__arm_cp.2_0>)
100674ba:	6800      	ldr	r0, [r0, #0]
100674bc:	21ac      	movs	r1, #172	@ 0xac
100674be:	5840      	ldr	r0, [r0, r1]
100674c0:	7845      	ldrb	r5, [r0, #1]
100674c2:	1c80      	adds	r0, r0, #2
100674c4:	1ca1      	adds	r1, r4, #2
100674c6:	2206      	movs	r2, #6
100674c8:	f7eb f968 	bl	1005279c <BLEPLAT_MemCmp>
100674cc:	4601      	mov	r1, r0
100674ce:	2000      	movs	r0, #0
100674d0:	2900      	cmp	r1, #0
100674d2:	d000      	beq.n	100674d6 <smp_oob_check_is_remote_data_present+0x22>
100674d4:	bdb0      	pop	{r4, r5, r7, pc}
100674d6:	7861      	ldrb	r1, [r4, #1]
100674d8:	428d      	cmp	r5, r1
100674da:	d1fb      	bne.n	100674d4 <smp_oob_check_is_remote_data_present+0x20>
100674dc:	7b61      	ldrb	r1, [r4, #13]
100674de:	2001      	movs	r0, #1
100674e0:	4301      	orrs	r1, r0
100674e2:	7361      	strb	r1, [r4, #13]
100674e4:	bdb0      	pop	{r4, r5, r7, pc}
100674e6:	46c0      	nop			@ (mov r8, r8)

100674e8 <__arm_cp.2_0>:
100674e8:	20002b1c 	.word	0x20002b1c

100674ec <smp_oob_clear_remote_data_entry>:
100674ec:	b580      	push	{r7, lr}
100674ee:	2228      	movs	r2, #40	@ 0x28
100674f0:	4350      	muls	r0, r2
100674f2:	4904      	ldr	r1, [pc, #16]	@ (10067504 <__arm_cp.4_0>)
100674f4:	6809      	ldr	r1, [r1, #0]
100674f6:	23ac      	movs	r3, #172	@ 0xac
100674f8:	58c9      	ldr	r1, [r1, r3]
100674fa:	1808      	adds	r0, r1, r0
100674fc:	2100      	movs	r1, #0
100674fe:	f7eb f93d 	bl	1005277c <BLEPLAT_MemSet>
10067502:	bd80      	pop	{r7, pc}

10067504 <__arm_cp.4_0>:
10067504:	20002b1c 	.word	0x20002b1c

10067508 <smp_scp_is_another_sc_pairing_ongoing>:
10067508:	b570      	push	{r4, r5, r6, lr}
1006750a:	490d      	ldr	r1, [pc, #52]	@ (10067540 <__arm_cp.1_0>)
1006750c:	6809      	ldr	r1, [r1, #0]
1006750e:	2234      	movs	r2, #52	@ 0x34
10067510:	5c89      	ldrb	r1, [r1, r2]
10067512:	2270      	movs	r2, #112	@ 0x70
10067514:	434a      	muls	r2, r1
10067516:	490b      	ldr	r1, [pc, #44]	@ (10067544 <__arm_cp.1_1>)
10067518:	680b      	ldr	r3, [r1, #0]
1006751a:	33a4      	adds	r3, #164	@ 0xa4
1006751c:	2100      	movs	r1, #0
1006751e:	460c      	mov	r4, r1
10067520:	42a2      	cmp	r2, r4
10067522:	d00a      	beq.n	1006753a <smp_scp_is_another_sc_pairing_ongoing+0x32>
10067524:	681d      	ldr	r5, [r3, #0]
10067526:	192d      	adds	r5, r5, r4
10067528:	7dee      	ldrb	r6, [r5, #23]
1006752a:	07f6      	lsls	r6, r6, #31
1006752c:	d002      	beq.n	10067534 <smp_scp_is_another_sc_pairing_ongoing+0x2c>
1006752e:	892d      	ldrh	r5, [r5, #8]
10067530:	4285      	cmp	r5, r0
10067532:	d101      	bne.n	10067538 <smp_scp_is_another_sc_pairing_ongoing+0x30>
10067534:	3470      	adds	r4, #112	@ 0x70
10067536:	e7f3      	b.n	10067520 <smp_scp_is_another_sc_pairing_ongoing+0x18>
10067538:	2101      	movs	r1, #1
1006753a:	4608      	mov	r0, r1
1006753c:	bd70      	pop	{r4, r5, r6, pc}
1006753e:	46c0      	nop			@ (mov r8, r8)

10067540 <__arm_cp.1_0>:
10067540:	20002a7c 	.word	0x20002a7c

10067544 <__arm_cp.1_1>:
10067544:	20002b1c 	.word	0x20002b1c

10067548 <smp_scp_init_ucfg_weak>:
10067548:	4770      	bx	lr

1006754a <smp_scp_continue_on_exclusive_sc_pairing_ucfg_weak>:
1006754a:	201f      	movs	r0, #31
1006754c:	4770      	bx	lr

1006754e <smp_scp_public_key_prepare_and_exchange_ucfg_weak>:
1006754e:	201f      	movs	r0, #31
10067550:	4770      	bx	lr

10067552 <smp_scp_stats_update_on_pairing_complete_ucfg_weak>:
10067552:	4770      	bx	lr

10067554 <smp_pka_process_ecc_computation_tsk_ucfg_weak>:
10067554:	4770      	bx	lr
	...

10067558 <malloc>:
10067558:	b510      	push	{r4, lr}
1006755a:	4b03      	ldr	r3, [pc, #12]	@ (10067568 <malloc+0x10>)
1006755c:	0001      	movs	r1, r0
1006755e:	6818      	ldr	r0, [r3, #0]
10067560:	f000 f830 	bl	100675c4 <_malloc_r>
10067564:	bd10      	pop	{r4, pc}
10067566:	46c0      	nop			@ (mov r8, r8)
10067568:	20002e6c 	.word	0x20002e6c

1006756c <free>:
1006756c:	b510      	push	{r4, lr}
1006756e:	4b03      	ldr	r3, [pc, #12]	@ (1006757c <free+0x10>)
10067570:	0001      	movs	r1, r0
10067572:	6818      	ldr	r0, [r3, #0]
10067574:	f000 fb74 	bl	10067c60 <_free_r>
10067578:	bd10      	pop	{r4, pc}
1006757a:	46c0      	nop			@ (mov r8, r8)
1006757c:	20002e6c 	.word	0x20002e6c

10067580 <sbrk_aligned>:
10067580:	b570      	push	{r4, r5, r6, lr}
10067582:	4e0f      	ldr	r6, [pc, #60]	@ (100675c0 <sbrk_aligned+0x40>)
10067584:	000d      	movs	r5, r1
10067586:	6831      	ldr	r1, [r6, #0]
10067588:	0004      	movs	r4, r0
1006758a:	2900      	cmp	r1, #0
1006758c:	d102      	bne.n	10067594 <sbrk_aligned+0x14>
1006758e:	f000 fb2b 	bl	10067be8 <_sbrk_r>
10067592:	6030      	str	r0, [r6, #0]
10067594:	0029      	movs	r1, r5
10067596:	0020      	movs	r0, r4
10067598:	f000 fb26 	bl	10067be8 <_sbrk_r>
1006759c:	1c43      	adds	r3, r0, #1
1006759e:	d103      	bne.n	100675a8 <sbrk_aligned+0x28>
100675a0:	2501      	movs	r5, #1
100675a2:	426d      	negs	r5, r5
100675a4:	0028      	movs	r0, r5
100675a6:	bd70      	pop	{r4, r5, r6, pc}
100675a8:	2303      	movs	r3, #3
100675aa:	1cc5      	adds	r5, r0, #3
100675ac:	439d      	bics	r5, r3
100675ae:	42a8      	cmp	r0, r5
100675b0:	d0f8      	beq.n	100675a4 <sbrk_aligned+0x24>
100675b2:	1a29      	subs	r1, r5, r0
100675b4:	0020      	movs	r0, r4
100675b6:	f000 fb17 	bl	10067be8 <_sbrk_r>
100675ba:	3001      	adds	r0, #1
100675bc:	d1f2      	bne.n	100675a4 <sbrk_aligned+0x24>
100675be:	e7ef      	b.n	100675a0 <sbrk_aligned+0x20>
100675c0:	20002b28 	.word	0x20002b28

100675c4 <_malloc_r>:
100675c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100675c6:	2203      	movs	r2, #3
100675c8:	1ccb      	adds	r3, r1, #3
100675ca:	4393      	bics	r3, r2
100675cc:	3308      	adds	r3, #8
100675ce:	0005      	movs	r5, r0
100675d0:	001f      	movs	r7, r3
100675d2:	2b0c      	cmp	r3, #12
100675d4:	d234      	bcs.n	10067640 <_malloc_r+0x7c>
100675d6:	270c      	movs	r7, #12
100675d8:	42b9      	cmp	r1, r7
100675da:	d833      	bhi.n	10067644 <_malloc_r+0x80>
100675dc:	0028      	movs	r0, r5
100675de:	f000 f871 	bl	100676c4 <__malloc_lock>
100675e2:	4e37      	ldr	r6, [pc, #220]	@ (100676c0 <_malloc_r+0xfc>)
100675e4:	6833      	ldr	r3, [r6, #0]
100675e6:	001c      	movs	r4, r3
100675e8:	2c00      	cmp	r4, #0
100675ea:	d12f      	bne.n	1006764c <_malloc_r+0x88>
100675ec:	0039      	movs	r1, r7
100675ee:	0028      	movs	r0, r5
100675f0:	f7ff ffc6 	bl	10067580 <sbrk_aligned>
100675f4:	0004      	movs	r4, r0
100675f6:	1c43      	adds	r3, r0, #1
100675f8:	d15f      	bne.n	100676ba <_malloc_r+0xf6>
100675fa:	6834      	ldr	r4, [r6, #0]
100675fc:	9400      	str	r4, [sp, #0]
100675fe:	9b00      	ldr	r3, [sp, #0]
10067600:	2b00      	cmp	r3, #0
10067602:	d14a      	bne.n	1006769a <_malloc_r+0xd6>
10067604:	2c00      	cmp	r4, #0
10067606:	d052      	beq.n	100676ae <_malloc_r+0xea>
10067608:	6823      	ldr	r3, [r4, #0]
1006760a:	0028      	movs	r0, r5
1006760c:	18e3      	adds	r3, r4, r3
1006760e:	9900      	ldr	r1, [sp, #0]
10067610:	9301      	str	r3, [sp, #4]
10067612:	f000 fae9 	bl	10067be8 <_sbrk_r>
10067616:	9b01      	ldr	r3, [sp, #4]
10067618:	4283      	cmp	r3, r0
1006761a:	d148      	bne.n	100676ae <_malloc_r+0xea>
1006761c:	6823      	ldr	r3, [r4, #0]
1006761e:	0028      	movs	r0, r5
10067620:	1aff      	subs	r7, r7, r3
10067622:	0039      	movs	r1, r7
10067624:	f7ff ffac 	bl	10067580 <sbrk_aligned>
10067628:	3001      	adds	r0, #1
1006762a:	d040      	beq.n	100676ae <_malloc_r+0xea>
1006762c:	6823      	ldr	r3, [r4, #0]
1006762e:	19db      	adds	r3, r3, r7
10067630:	6023      	str	r3, [r4, #0]
10067632:	6833      	ldr	r3, [r6, #0]
10067634:	685a      	ldr	r2, [r3, #4]
10067636:	2a00      	cmp	r2, #0
10067638:	d133      	bne.n	100676a2 <_malloc_r+0xde>
1006763a:	9b00      	ldr	r3, [sp, #0]
1006763c:	6033      	str	r3, [r6, #0]
1006763e:	e019      	b.n	10067674 <_malloc_r+0xb0>
10067640:	2b00      	cmp	r3, #0
10067642:	dac9      	bge.n	100675d8 <_malloc_r+0x14>
10067644:	230c      	movs	r3, #12
10067646:	602b      	str	r3, [r5, #0]
10067648:	2000      	movs	r0, #0
1006764a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006764c:	6821      	ldr	r1, [r4, #0]
1006764e:	1bc9      	subs	r1, r1, r7
10067650:	d420      	bmi.n	10067694 <_malloc_r+0xd0>
10067652:	290b      	cmp	r1, #11
10067654:	d90a      	bls.n	1006766c <_malloc_r+0xa8>
10067656:	19e2      	adds	r2, r4, r7
10067658:	6027      	str	r7, [r4, #0]
1006765a:	42a3      	cmp	r3, r4
1006765c:	d104      	bne.n	10067668 <_malloc_r+0xa4>
1006765e:	6032      	str	r2, [r6, #0]
10067660:	6863      	ldr	r3, [r4, #4]
10067662:	6011      	str	r1, [r2, #0]
10067664:	6053      	str	r3, [r2, #4]
10067666:	e005      	b.n	10067674 <_malloc_r+0xb0>
10067668:	605a      	str	r2, [r3, #4]
1006766a:	e7f9      	b.n	10067660 <_malloc_r+0x9c>
1006766c:	6862      	ldr	r2, [r4, #4]
1006766e:	42a3      	cmp	r3, r4
10067670:	d10e      	bne.n	10067690 <_malloc_r+0xcc>
10067672:	6032      	str	r2, [r6, #0]
10067674:	0028      	movs	r0, r5
10067676:	f000 f82d 	bl	100676d4 <__malloc_unlock>
1006767a:	0020      	movs	r0, r4
1006767c:	2207      	movs	r2, #7
1006767e:	300b      	adds	r0, #11
10067680:	1d23      	adds	r3, r4, #4
10067682:	4390      	bics	r0, r2
10067684:	1ac2      	subs	r2, r0, r3
10067686:	4298      	cmp	r0, r3
10067688:	d0df      	beq.n	1006764a <_malloc_r+0x86>
1006768a:	1a1b      	subs	r3, r3, r0
1006768c:	50a3      	str	r3, [r4, r2]
1006768e:	e7dc      	b.n	1006764a <_malloc_r+0x86>
10067690:	605a      	str	r2, [r3, #4]
10067692:	e7ef      	b.n	10067674 <_malloc_r+0xb0>
10067694:	0023      	movs	r3, r4
10067696:	6864      	ldr	r4, [r4, #4]
10067698:	e7a6      	b.n	100675e8 <_malloc_r+0x24>
1006769a:	9c00      	ldr	r4, [sp, #0]
1006769c:	6863      	ldr	r3, [r4, #4]
1006769e:	9300      	str	r3, [sp, #0]
100676a0:	e7ad      	b.n	100675fe <_malloc_r+0x3a>
100676a2:	001a      	movs	r2, r3
100676a4:	685b      	ldr	r3, [r3, #4]
100676a6:	42a3      	cmp	r3, r4
100676a8:	d1fb      	bne.n	100676a2 <_malloc_r+0xde>
100676aa:	2300      	movs	r3, #0
100676ac:	e7da      	b.n	10067664 <_malloc_r+0xa0>
100676ae:	230c      	movs	r3, #12
100676b0:	0028      	movs	r0, r5
100676b2:	602b      	str	r3, [r5, #0]
100676b4:	f000 f80e 	bl	100676d4 <__malloc_unlock>
100676b8:	e7c6      	b.n	10067648 <_malloc_r+0x84>
100676ba:	6007      	str	r7, [r0, #0]
100676bc:	e7da      	b.n	10067674 <_malloc_r+0xb0>
100676be:	46c0      	nop			@ (mov r8, r8)
100676c0:	20002b2c 	.word	0x20002b2c

100676c4 <__malloc_lock>:
100676c4:	b510      	push	{r4, lr}
100676c6:	4802      	ldr	r0, [pc, #8]	@ (100676d0 <__malloc_lock+0xc>)
100676c8:	f000 fabb 	bl	10067c42 <__retarget_lock_acquire_recursive>
100676cc:	bd10      	pop	{r4, pc}
100676ce:	46c0      	nop			@ (mov r8, r8)
100676d0:	20002c70 	.word	0x20002c70

100676d4 <__malloc_unlock>:
100676d4:	b510      	push	{r4, lr}
100676d6:	4802      	ldr	r0, [pc, #8]	@ (100676e0 <__malloc_unlock+0xc>)
100676d8:	f000 fab4 	bl	10067c44 <__retarget_lock_release_recursive>
100676dc:	bd10      	pop	{r4, pc}
100676de:	46c0      	nop			@ (mov r8, r8)
100676e0:	20002c70 	.word	0x20002c70

100676e4 <std>:
100676e4:	2300      	movs	r3, #0
100676e6:	b510      	push	{r4, lr}
100676e8:	0004      	movs	r4, r0
100676ea:	6003      	str	r3, [r0, #0]
100676ec:	6043      	str	r3, [r0, #4]
100676ee:	6083      	str	r3, [r0, #8]
100676f0:	8181      	strh	r1, [r0, #12]
100676f2:	6643      	str	r3, [r0, #100]	@ 0x64
100676f4:	81c2      	strh	r2, [r0, #14]
100676f6:	6103      	str	r3, [r0, #16]
100676f8:	6143      	str	r3, [r0, #20]
100676fa:	6183      	str	r3, [r0, #24]
100676fc:	0019      	movs	r1, r3
100676fe:	2208      	movs	r2, #8
10067700:	305c      	adds	r0, #92	@ 0x5c
10067702:	f000 fa2f 	bl	10067b64 <memset>
10067706:	4b0b      	ldr	r3, [pc, #44]	@ (10067734 <std+0x50>)
10067708:	6224      	str	r4, [r4, #32]
1006770a:	6263      	str	r3, [r4, #36]	@ 0x24
1006770c:	4b0a      	ldr	r3, [pc, #40]	@ (10067738 <std+0x54>)
1006770e:	62a3      	str	r3, [r4, #40]	@ 0x28
10067710:	4b0a      	ldr	r3, [pc, #40]	@ (1006773c <std+0x58>)
10067712:	62e3      	str	r3, [r4, #44]	@ 0x2c
10067714:	4b0a      	ldr	r3, [pc, #40]	@ (10067740 <std+0x5c>)
10067716:	6323      	str	r3, [r4, #48]	@ 0x30
10067718:	4b0a      	ldr	r3, [pc, #40]	@ (10067744 <std+0x60>)
1006771a:	429c      	cmp	r4, r3
1006771c:	d005      	beq.n	1006772a <std+0x46>
1006771e:	4b0a      	ldr	r3, [pc, #40]	@ (10067748 <std+0x64>)
10067720:	429c      	cmp	r4, r3
10067722:	d002      	beq.n	1006772a <std+0x46>
10067724:	4b09      	ldr	r3, [pc, #36]	@ (1006774c <std+0x68>)
10067726:	429c      	cmp	r4, r3
10067728:	d103      	bne.n	10067732 <std+0x4e>
1006772a:	0020      	movs	r0, r4
1006772c:	3058      	adds	r0, #88	@ 0x58
1006772e:	f000 fa87 	bl	10067c40 <__retarget_lock_init_recursive>
10067732:	bd10      	pop	{r4, pc}
10067734:	10067971 	.word	0x10067971
10067738:	10067999 	.word	0x10067999
1006773c:	100679d1 	.word	0x100679d1
10067740:	100679fd 	.word	0x100679fd
10067744:	20002b30 	.word	0x20002b30
10067748:	20002b98 	.word	0x20002b98
1006774c:	20002c00 	.word	0x20002c00

10067750 <stdio_exit_handler>:
10067750:	b510      	push	{r4, lr}
10067752:	4a03      	ldr	r2, [pc, #12]	@ (10067760 <stdio_exit_handler+0x10>)
10067754:	4903      	ldr	r1, [pc, #12]	@ (10067764 <stdio_exit_handler+0x14>)
10067756:	4804      	ldr	r0, [pc, #16]	@ (10067768 <stdio_exit_handler+0x18>)
10067758:	f000 f86c 	bl	10067834 <_fwalk_sglue>
1006775c:	bd10      	pop	{r4, pc}
1006775e:	46c0      	nop			@ (mov r8, r8)
10067760:	20002e60 	.word	0x20002e60
10067764:	100683b5 	.word	0x100683b5
10067768:	20002e70 	.word	0x20002e70

1006776c <cleanup_stdio>:
1006776c:	6841      	ldr	r1, [r0, #4]
1006776e:	4b0b      	ldr	r3, [pc, #44]	@ (1006779c <cleanup_stdio+0x30>)
10067770:	b510      	push	{r4, lr}
10067772:	0004      	movs	r4, r0
10067774:	4299      	cmp	r1, r3
10067776:	d001      	beq.n	1006777c <cleanup_stdio+0x10>
10067778:	f000 fe1c 	bl	100683b4 <_fflush_r>
1006777c:	68a1      	ldr	r1, [r4, #8]
1006777e:	4b08      	ldr	r3, [pc, #32]	@ (100677a0 <cleanup_stdio+0x34>)
10067780:	4299      	cmp	r1, r3
10067782:	d002      	beq.n	1006778a <cleanup_stdio+0x1e>
10067784:	0020      	movs	r0, r4
10067786:	f000 fe15 	bl	100683b4 <_fflush_r>
1006778a:	68e1      	ldr	r1, [r4, #12]
1006778c:	4b05      	ldr	r3, [pc, #20]	@ (100677a4 <cleanup_stdio+0x38>)
1006778e:	4299      	cmp	r1, r3
10067790:	d002      	beq.n	10067798 <cleanup_stdio+0x2c>
10067792:	0020      	movs	r0, r4
10067794:	f000 fe0e 	bl	100683b4 <_fflush_r>
10067798:	bd10      	pop	{r4, pc}
1006779a:	46c0      	nop			@ (mov r8, r8)
1006779c:	20002b30 	.word	0x20002b30
100677a0:	20002b98 	.word	0x20002b98
100677a4:	20002c00 	.word	0x20002c00

100677a8 <global_stdio_init.part.0>:
100677a8:	b510      	push	{r4, lr}
100677aa:	4b09      	ldr	r3, [pc, #36]	@ (100677d0 <global_stdio_init.part.0+0x28>)
100677ac:	4a09      	ldr	r2, [pc, #36]	@ (100677d4 <global_stdio_init.part.0+0x2c>)
100677ae:	2104      	movs	r1, #4
100677b0:	601a      	str	r2, [r3, #0]
100677b2:	4809      	ldr	r0, [pc, #36]	@ (100677d8 <global_stdio_init.part.0+0x30>)
100677b4:	2200      	movs	r2, #0
100677b6:	f7ff ff95 	bl	100676e4 <std>
100677ba:	2201      	movs	r2, #1
100677bc:	2109      	movs	r1, #9
100677be:	4807      	ldr	r0, [pc, #28]	@ (100677dc <global_stdio_init.part.0+0x34>)
100677c0:	f7ff ff90 	bl	100676e4 <std>
100677c4:	2202      	movs	r2, #2
100677c6:	2112      	movs	r1, #18
100677c8:	4805      	ldr	r0, [pc, #20]	@ (100677e0 <global_stdio_init.part.0+0x38>)
100677ca:	f7ff ff8b 	bl	100676e4 <std>
100677ce:	bd10      	pop	{r4, pc}
100677d0:	20002c68 	.word	0x20002c68
100677d4:	10067751 	.word	0x10067751
100677d8:	20002b30 	.word	0x20002b30
100677dc:	20002b98 	.word	0x20002b98
100677e0:	20002c00 	.word	0x20002c00

100677e4 <__sfp_lock_acquire>:
100677e4:	b510      	push	{r4, lr}
100677e6:	4802      	ldr	r0, [pc, #8]	@ (100677f0 <__sfp_lock_acquire+0xc>)
100677e8:	f000 fa2b 	bl	10067c42 <__retarget_lock_acquire_recursive>
100677ec:	bd10      	pop	{r4, pc}
100677ee:	46c0      	nop			@ (mov r8, r8)
100677f0:	20002c71 	.word	0x20002c71

100677f4 <__sfp_lock_release>:
100677f4:	b510      	push	{r4, lr}
100677f6:	4802      	ldr	r0, [pc, #8]	@ (10067800 <__sfp_lock_release+0xc>)
100677f8:	f000 fa24 	bl	10067c44 <__retarget_lock_release_recursive>
100677fc:	bd10      	pop	{r4, pc}
100677fe:	46c0      	nop			@ (mov r8, r8)
10067800:	20002c71 	.word	0x20002c71

10067804 <__sinit>:
10067804:	b510      	push	{r4, lr}
10067806:	0004      	movs	r4, r0
10067808:	f7ff ffec 	bl	100677e4 <__sfp_lock_acquire>
1006780c:	6a23      	ldr	r3, [r4, #32]
1006780e:	2b00      	cmp	r3, #0
10067810:	d002      	beq.n	10067818 <__sinit+0x14>
10067812:	f7ff ffef 	bl	100677f4 <__sfp_lock_release>
10067816:	bd10      	pop	{r4, pc}
10067818:	4b04      	ldr	r3, [pc, #16]	@ (1006782c <__sinit+0x28>)
1006781a:	6223      	str	r3, [r4, #32]
1006781c:	4b04      	ldr	r3, [pc, #16]	@ (10067830 <__sinit+0x2c>)
1006781e:	681b      	ldr	r3, [r3, #0]
10067820:	2b00      	cmp	r3, #0
10067822:	d1f6      	bne.n	10067812 <__sinit+0xe>
10067824:	f7ff ffc0 	bl	100677a8 <global_stdio_init.part.0>
10067828:	e7f3      	b.n	10067812 <__sinit+0xe>
1006782a:	46c0      	nop			@ (mov r8, r8)
1006782c:	1006776d 	.word	0x1006776d
10067830:	20002c68 	.word	0x20002c68

10067834 <_fwalk_sglue>:
10067834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10067836:	0014      	movs	r4, r2
10067838:	2600      	movs	r6, #0
1006783a:	9000      	str	r0, [sp, #0]
1006783c:	9101      	str	r1, [sp, #4]
1006783e:	68a5      	ldr	r5, [r4, #8]
10067840:	6867      	ldr	r7, [r4, #4]
10067842:	3f01      	subs	r7, #1
10067844:	d504      	bpl.n	10067850 <_fwalk_sglue+0x1c>
10067846:	6824      	ldr	r4, [r4, #0]
10067848:	2c00      	cmp	r4, #0
1006784a:	d1f8      	bne.n	1006783e <_fwalk_sglue+0xa>
1006784c:	0030      	movs	r0, r6
1006784e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10067850:	89ab      	ldrh	r3, [r5, #12]
10067852:	2b01      	cmp	r3, #1
10067854:	d908      	bls.n	10067868 <_fwalk_sglue+0x34>
10067856:	220e      	movs	r2, #14
10067858:	5eab      	ldrsh	r3, [r5, r2]
1006785a:	3301      	adds	r3, #1
1006785c:	d004      	beq.n	10067868 <_fwalk_sglue+0x34>
1006785e:	0029      	movs	r1, r5
10067860:	9800      	ldr	r0, [sp, #0]
10067862:	9b01      	ldr	r3, [sp, #4]
10067864:	4798      	blx	r3
10067866:	4306      	orrs	r6, r0
10067868:	3568      	adds	r5, #104	@ 0x68
1006786a:	e7ea      	b.n	10067842 <_fwalk_sglue+0xe>

1006786c <_puts_r>:
1006786c:	6a03      	ldr	r3, [r0, #32]
1006786e:	b570      	push	{r4, r5, r6, lr}
10067870:	0005      	movs	r5, r0
10067872:	000e      	movs	r6, r1
10067874:	6884      	ldr	r4, [r0, #8]
10067876:	2b00      	cmp	r3, #0
10067878:	d101      	bne.n	1006787e <_puts_r+0x12>
1006787a:	f7ff ffc3 	bl	10067804 <__sinit>
1006787e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
10067880:	07db      	lsls	r3, r3, #31
10067882:	d405      	bmi.n	10067890 <_puts_r+0x24>
10067884:	89a3      	ldrh	r3, [r4, #12]
10067886:	059b      	lsls	r3, r3, #22
10067888:	d402      	bmi.n	10067890 <_puts_r+0x24>
1006788a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
1006788c:	f000 f9d9 	bl	10067c42 <__retarget_lock_acquire_recursive>
10067890:	89a3      	ldrh	r3, [r4, #12]
10067892:	071b      	lsls	r3, r3, #28
10067894:	d502      	bpl.n	1006789c <_puts_r+0x30>
10067896:	6923      	ldr	r3, [r4, #16]
10067898:	2b00      	cmp	r3, #0
1006789a:	d11f      	bne.n	100678dc <_puts_r+0x70>
1006789c:	0021      	movs	r1, r4
1006789e:	0028      	movs	r0, r5
100678a0:	f000 f8f4 	bl	10067a8c <__swsetup_r>
100678a4:	2800      	cmp	r0, #0
100678a6:	d019      	beq.n	100678dc <_puts_r+0x70>
100678a8:	2501      	movs	r5, #1
100678aa:	426d      	negs	r5, r5
100678ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100678ae:	07db      	lsls	r3, r3, #31
100678b0:	d405      	bmi.n	100678be <_puts_r+0x52>
100678b2:	89a3      	ldrh	r3, [r4, #12]
100678b4:	059b      	lsls	r3, r3, #22
100678b6:	d402      	bmi.n	100678be <_puts_r+0x52>
100678b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100678ba:	f000 f9c3 	bl	10067c44 <__retarget_lock_release_recursive>
100678be:	0028      	movs	r0, r5
100678c0:	bd70      	pop	{r4, r5, r6, pc}
100678c2:	3601      	adds	r6, #1
100678c4:	60a3      	str	r3, [r4, #8]
100678c6:	2b00      	cmp	r3, #0
100678c8:	da04      	bge.n	100678d4 <_puts_r+0x68>
100678ca:	69a2      	ldr	r2, [r4, #24]
100678cc:	429a      	cmp	r2, r3
100678ce:	dc16      	bgt.n	100678fe <_puts_r+0x92>
100678d0:	290a      	cmp	r1, #10
100678d2:	d014      	beq.n	100678fe <_puts_r+0x92>
100678d4:	6823      	ldr	r3, [r4, #0]
100678d6:	1c5a      	adds	r2, r3, #1
100678d8:	6022      	str	r2, [r4, #0]
100678da:	7019      	strb	r1, [r3, #0]
100678dc:	68a3      	ldr	r3, [r4, #8]
100678de:	7831      	ldrb	r1, [r6, #0]
100678e0:	3b01      	subs	r3, #1
100678e2:	2900      	cmp	r1, #0
100678e4:	d1ed      	bne.n	100678c2 <_puts_r+0x56>
100678e6:	60a3      	str	r3, [r4, #8]
100678e8:	2b00      	cmp	r3, #0
100678ea:	da0f      	bge.n	1006790c <_puts_r+0xa0>
100678ec:	0022      	movs	r2, r4
100678ee:	0028      	movs	r0, r5
100678f0:	310a      	adds	r1, #10
100678f2:	f000 f889 	bl	10067a08 <__swbuf_r>
100678f6:	3001      	adds	r0, #1
100678f8:	d0d6      	beq.n	100678a8 <_puts_r+0x3c>
100678fa:	250a      	movs	r5, #10
100678fc:	e7d6      	b.n	100678ac <_puts_r+0x40>
100678fe:	0022      	movs	r2, r4
10067900:	0028      	movs	r0, r5
10067902:	f000 f881 	bl	10067a08 <__swbuf_r>
10067906:	3001      	adds	r0, #1
10067908:	d1e8      	bne.n	100678dc <_puts_r+0x70>
1006790a:	e7cd      	b.n	100678a8 <_puts_r+0x3c>
1006790c:	6823      	ldr	r3, [r4, #0]
1006790e:	1c5a      	adds	r2, r3, #1
10067910:	6022      	str	r2, [r4, #0]
10067912:	220a      	movs	r2, #10
10067914:	701a      	strb	r2, [r3, #0]
10067916:	e7f0      	b.n	100678fa <_puts_r+0x8e>

10067918 <puts>:
10067918:	b510      	push	{r4, lr}
1006791a:	4b03      	ldr	r3, [pc, #12]	@ (10067928 <puts+0x10>)
1006791c:	0001      	movs	r1, r0
1006791e:	6818      	ldr	r0, [r3, #0]
10067920:	f7ff ffa4 	bl	1006786c <_puts_r>
10067924:	bd10      	pop	{r4, pc}
10067926:	46c0      	nop			@ (mov r8, r8)
10067928:	20002e6c 	.word	0x20002e6c

1006792c <siprintf>:
1006792c:	b40e      	push	{r1, r2, r3}
1006792e:	b510      	push	{r4, lr}
10067930:	2400      	movs	r4, #0
10067932:	490c      	ldr	r1, [pc, #48]	@ (10067964 <siprintf+0x38>)
10067934:	b09d      	sub	sp, #116	@ 0x74
10067936:	ab1f      	add	r3, sp, #124	@ 0x7c
10067938:	9002      	str	r0, [sp, #8]
1006793a:	9006      	str	r0, [sp, #24]
1006793c:	9107      	str	r1, [sp, #28]
1006793e:	9104      	str	r1, [sp, #16]
10067940:	4809      	ldr	r0, [pc, #36]	@ (10067968 <siprintf+0x3c>)
10067942:	490a      	ldr	r1, [pc, #40]	@ (1006796c <siprintf+0x40>)
10067944:	cb04      	ldmia	r3!, {r2}
10067946:	9105      	str	r1, [sp, #20]
10067948:	6800      	ldr	r0, [r0, #0]
1006794a:	a902      	add	r1, sp, #8
1006794c:	9301      	str	r3, [sp, #4]
1006794e:	941b      	str	r4, [sp, #108]	@ 0x6c
10067950:	f000 fa30 	bl	10067db4 <_svfiprintf_r>
10067954:	9b02      	ldr	r3, [sp, #8]
10067956:	701c      	strb	r4, [r3, #0]
10067958:	b01d      	add	sp, #116	@ 0x74
1006795a:	bc10      	pop	{r4}
1006795c:	bc08      	pop	{r3}
1006795e:	b003      	add	sp, #12
10067960:	4718      	bx	r3
10067962:	46c0      	nop			@ (mov r8, r8)
10067964:	7fffffff 	.word	0x7fffffff
10067968:	20002e6c 	.word	0x20002e6c
1006796c:	ffff0208 	.word	0xffff0208

10067970 <__sread>:
10067970:	b570      	push	{r4, r5, r6, lr}
10067972:	000c      	movs	r4, r1
10067974:	250e      	movs	r5, #14
10067976:	5f49      	ldrsh	r1, [r1, r5]
10067978:	f000 f922 	bl	10067bc0 <_read_r>
1006797c:	2800      	cmp	r0, #0
1006797e:	db03      	blt.n	10067988 <__sread+0x18>
10067980:	6d63      	ldr	r3, [r4, #84]	@ 0x54
10067982:	181b      	adds	r3, r3, r0
10067984:	6563      	str	r3, [r4, #84]	@ 0x54
10067986:	bd70      	pop	{r4, r5, r6, pc}
10067988:	89a3      	ldrh	r3, [r4, #12]
1006798a:	4a02      	ldr	r2, [pc, #8]	@ (10067994 <__sread+0x24>)
1006798c:	4013      	ands	r3, r2
1006798e:	81a3      	strh	r3, [r4, #12]
10067990:	e7f9      	b.n	10067986 <__sread+0x16>
10067992:	46c0      	nop			@ (mov r8, r8)
10067994:	ffffefff 	.word	0xffffefff

10067998 <__swrite>:
10067998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006799a:	001f      	movs	r7, r3
1006799c:	898b      	ldrh	r3, [r1, #12]
1006799e:	0005      	movs	r5, r0
100679a0:	000c      	movs	r4, r1
100679a2:	0016      	movs	r6, r2
100679a4:	05db      	lsls	r3, r3, #23
100679a6:	d505      	bpl.n	100679b4 <__swrite+0x1c>
100679a8:	230e      	movs	r3, #14
100679aa:	5ec9      	ldrsh	r1, [r1, r3]
100679ac:	2200      	movs	r2, #0
100679ae:	2302      	movs	r3, #2
100679b0:	f000 f8f2 	bl	10067b98 <_lseek_r>
100679b4:	89a3      	ldrh	r3, [r4, #12]
100679b6:	4a05      	ldr	r2, [pc, #20]	@ (100679cc <__swrite+0x34>)
100679b8:	0028      	movs	r0, r5
100679ba:	4013      	ands	r3, r2
100679bc:	81a3      	strh	r3, [r4, #12]
100679be:	0032      	movs	r2, r6
100679c0:	230e      	movs	r3, #14
100679c2:	5ee1      	ldrsh	r1, [r4, r3]
100679c4:	003b      	movs	r3, r7
100679c6:	f000 f921 	bl	10067c0c <_write_r>
100679ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100679cc:	ffffefff 	.word	0xffffefff

100679d0 <__sseek>:
100679d0:	b570      	push	{r4, r5, r6, lr}
100679d2:	000c      	movs	r4, r1
100679d4:	250e      	movs	r5, #14
100679d6:	5f49      	ldrsh	r1, [r1, r5]
100679d8:	f000 f8de 	bl	10067b98 <_lseek_r>
100679dc:	89a3      	ldrh	r3, [r4, #12]
100679de:	1c42      	adds	r2, r0, #1
100679e0:	d103      	bne.n	100679ea <__sseek+0x1a>
100679e2:	4a05      	ldr	r2, [pc, #20]	@ (100679f8 <__sseek+0x28>)
100679e4:	4013      	ands	r3, r2
100679e6:	81a3      	strh	r3, [r4, #12]
100679e8:	bd70      	pop	{r4, r5, r6, pc}
100679ea:	2280      	movs	r2, #128	@ 0x80
100679ec:	0152      	lsls	r2, r2, #5
100679ee:	4313      	orrs	r3, r2
100679f0:	81a3      	strh	r3, [r4, #12]
100679f2:	6560      	str	r0, [r4, #84]	@ 0x54
100679f4:	e7f8      	b.n	100679e8 <__sseek+0x18>
100679f6:	46c0      	nop			@ (mov r8, r8)
100679f8:	ffffefff 	.word	0xffffefff

100679fc <__sclose>:
100679fc:	b510      	push	{r4, lr}
100679fe:	230e      	movs	r3, #14
10067a00:	5ec9      	ldrsh	r1, [r1, r3]
10067a02:	f000 f8b7 	bl	10067b74 <_close_r>
10067a06:	bd10      	pop	{r4, pc}

10067a08 <__swbuf_r>:
10067a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10067a0a:	0006      	movs	r6, r0
10067a0c:	000d      	movs	r5, r1
10067a0e:	0014      	movs	r4, r2
10067a10:	2800      	cmp	r0, #0
10067a12:	d004      	beq.n	10067a1e <__swbuf_r+0x16>
10067a14:	6a03      	ldr	r3, [r0, #32]
10067a16:	2b00      	cmp	r3, #0
10067a18:	d101      	bne.n	10067a1e <__swbuf_r+0x16>
10067a1a:	f7ff fef3 	bl	10067804 <__sinit>
10067a1e:	69a3      	ldr	r3, [r4, #24]
10067a20:	60a3      	str	r3, [r4, #8]
10067a22:	89a3      	ldrh	r3, [r4, #12]
10067a24:	071b      	lsls	r3, r3, #28
10067a26:	d502      	bpl.n	10067a2e <__swbuf_r+0x26>
10067a28:	6923      	ldr	r3, [r4, #16]
10067a2a:	2b00      	cmp	r3, #0
10067a2c:	d109      	bne.n	10067a42 <__swbuf_r+0x3a>
10067a2e:	0021      	movs	r1, r4
10067a30:	0030      	movs	r0, r6
10067a32:	f000 f82b 	bl	10067a8c <__swsetup_r>
10067a36:	2800      	cmp	r0, #0
10067a38:	d003      	beq.n	10067a42 <__swbuf_r+0x3a>
10067a3a:	2501      	movs	r5, #1
10067a3c:	426d      	negs	r5, r5
10067a3e:	0028      	movs	r0, r5
10067a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10067a42:	6923      	ldr	r3, [r4, #16]
10067a44:	6820      	ldr	r0, [r4, #0]
10067a46:	b2ef      	uxtb	r7, r5
10067a48:	1ac0      	subs	r0, r0, r3
10067a4a:	6963      	ldr	r3, [r4, #20]
10067a4c:	b2ed      	uxtb	r5, r5
10067a4e:	4283      	cmp	r3, r0
10067a50:	dc05      	bgt.n	10067a5e <__swbuf_r+0x56>
10067a52:	0021      	movs	r1, r4
10067a54:	0030      	movs	r0, r6
10067a56:	f000 fcad 	bl	100683b4 <_fflush_r>
10067a5a:	2800      	cmp	r0, #0
10067a5c:	d1ed      	bne.n	10067a3a <__swbuf_r+0x32>
10067a5e:	68a3      	ldr	r3, [r4, #8]
10067a60:	3001      	adds	r0, #1
10067a62:	3b01      	subs	r3, #1
10067a64:	60a3      	str	r3, [r4, #8]
10067a66:	6823      	ldr	r3, [r4, #0]
10067a68:	1c5a      	adds	r2, r3, #1
10067a6a:	6022      	str	r2, [r4, #0]
10067a6c:	701f      	strb	r7, [r3, #0]
10067a6e:	6963      	ldr	r3, [r4, #20]
10067a70:	4283      	cmp	r3, r0
10067a72:	d004      	beq.n	10067a7e <__swbuf_r+0x76>
10067a74:	89a3      	ldrh	r3, [r4, #12]
10067a76:	07db      	lsls	r3, r3, #31
10067a78:	d5e1      	bpl.n	10067a3e <__swbuf_r+0x36>
10067a7a:	2d0a      	cmp	r5, #10
10067a7c:	d1df      	bne.n	10067a3e <__swbuf_r+0x36>
10067a7e:	0021      	movs	r1, r4
10067a80:	0030      	movs	r0, r6
10067a82:	f000 fc97 	bl	100683b4 <_fflush_r>
10067a86:	2800      	cmp	r0, #0
10067a88:	d0d9      	beq.n	10067a3e <__swbuf_r+0x36>
10067a8a:	e7d6      	b.n	10067a3a <__swbuf_r+0x32>

10067a8c <__swsetup_r>:
10067a8c:	4b2d      	ldr	r3, [pc, #180]	@ (10067b44 <__swsetup_r+0xb8>)
10067a8e:	b570      	push	{r4, r5, r6, lr}
10067a90:	0005      	movs	r5, r0
10067a92:	6818      	ldr	r0, [r3, #0]
10067a94:	000c      	movs	r4, r1
10067a96:	2800      	cmp	r0, #0
10067a98:	d004      	beq.n	10067aa4 <__swsetup_r+0x18>
10067a9a:	6a03      	ldr	r3, [r0, #32]
10067a9c:	2b00      	cmp	r3, #0
10067a9e:	d101      	bne.n	10067aa4 <__swsetup_r+0x18>
10067aa0:	f7ff feb0 	bl	10067804 <__sinit>
10067aa4:	220c      	movs	r2, #12
10067aa6:	5ea3      	ldrsh	r3, [r4, r2]
10067aa8:	071a      	lsls	r2, r3, #28
10067aaa:	d423      	bmi.n	10067af4 <__swsetup_r+0x68>
10067aac:	06da      	lsls	r2, r3, #27
10067aae:	d407      	bmi.n	10067ac0 <__swsetup_r+0x34>
10067ab0:	2209      	movs	r2, #9
10067ab2:	602a      	str	r2, [r5, #0]
10067ab4:	2240      	movs	r2, #64	@ 0x40
10067ab6:	2001      	movs	r0, #1
10067ab8:	4313      	orrs	r3, r2
10067aba:	81a3      	strh	r3, [r4, #12]
10067abc:	4240      	negs	r0, r0
10067abe:	e03a      	b.n	10067b36 <__swsetup_r+0xaa>
10067ac0:	075b      	lsls	r3, r3, #29
10067ac2:	d513      	bpl.n	10067aec <__swsetup_r+0x60>
10067ac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
10067ac6:	2900      	cmp	r1, #0
10067ac8:	d008      	beq.n	10067adc <__swsetup_r+0x50>
10067aca:	0023      	movs	r3, r4
10067acc:	3344      	adds	r3, #68	@ 0x44
10067ace:	4299      	cmp	r1, r3
10067ad0:	d002      	beq.n	10067ad8 <__swsetup_r+0x4c>
10067ad2:	0028      	movs	r0, r5
10067ad4:	f000 f8c4 	bl	10067c60 <_free_r>
10067ad8:	2300      	movs	r3, #0
10067ada:	6363      	str	r3, [r4, #52]	@ 0x34
10067adc:	2224      	movs	r2, #36	@ 0x24
10067ade:	89a3      	ldrh	r3, [r4, #12]
10067ae0:	4393      	bics	r3, r2
10067ae2:	81a3      	strh	r3, [r4, #12]
10067ae4:	2300      	movs	r3, #0
10067ae6:	6063      	str	r3, [r4, #4]
10067ae8:	6923      	ldr	r3, [r4, #16]
10067aea:	6023      	str	r3, [r4, #0]
10067aec:	2308      	movs	r3, #8
10067aee:	89a2      	ldrh	r2, [r4, #12]
10067af0:	4313      	orrs	r3, r2
10067af2:	81a3      	strh	r3, [r4, #12]
10067af4:	6923      	ldr	r3, [r4, #16]
10067af6:	2b00      	cmp	r3, #0
10067af8:	d10b      	bne.n	10067b12 <__swsetup_r+0x86>
10067afa:	21a0      	movs	r1, #160	@ 0xa0
10067afc:	2280      	movs	r2, #128	@ 0x80
10067afe:	89a3      	ldrh	r3, [r4, #12]
10067b00:	0089      	lsls	r1, r1, #2
10067b02:	0092      	lsls	r2, r2, #2
10067b04:	400b      	ands	r3, r1
10067b06:	4293      	cmp	r3, r2
10067b08:	d003      	beq.n	10067b12 <__swsetup_r+0x86>
10067b0a:	0021      	movs	r1, r4
10067b0c:	0028      	movs	r0, r5
10067b0e:	f000 fca7 	bl	10068460 <__smakebuf_r>
10067b12:	220c      	movs	r2, #12
10067b14:	5ea3      	ldrsh	r3, [r4, r2]
10067b16:	2101      	movs	r1, #1
10067b18:	001a      	movs	r2, r3
10067b1a:	400a      	ands	r2, r1
10067b1c:	420b      	tst	r3, r1
10067b1e:	d00b      	beq.n	10067b38 <__swsetup_r+0xac>
10067b20:	2200      	movs	r2, #0
10067b22:	60a2      	str	r2, [r4, #8]
10067b24:	6962      	ldr	r2, [r4, #20]
10067b26:	4252      	negs	r2, r2
10067b28:	61a2      	str	r2, [r4, #24]
10067b2a:	2000      	movs	r0, #0
10067b2c:	6922      	ldr	r2, [r4, #16]
10067b2e:	4282      	cmp	r2, r0
10067b30:	d101      	bne.n	10067b36 <__swsetup_r+0xaa>
10067b32:	061a      	lsls	r2, r3, #24
10067b34:	d4be      	bmi.n	10067ab4 <__swsetup_r+0x28>
10067b36:	bd70      	pop	{r4, r5, r6, pc}
10067b38:	0799      	lsls	r1, r3, #30
10067b3a:	d400      	bmi.n	10067b3e <__swsetup_r+0xb2>
10067b3c:	6962      	ldr	r2, [r4, #20]
10067b3e:	60a2      	str	r2, [r4, #8]
10067b40:	e7f3      	b.n	10067b2a <__swsetup_r+0x9e>
10067b42:	46c0      	nop			@ (mov r8, r8)
10067b44:	20002e6c 	.word	0x20002e6c

10067b48 <memcmp>:
10067b48:	b530      	push	{r4, r5, lr}
10067b4a:	2400      	movs	r4, #0
10067b4c:	3901      	subs	r1, #1
10067b4e:	42a2      	cmp	r2, r4
10067b50:	d101      	bne.n	10067b56 <memcmp+0xe>
10067b52:	2000      	movs	r0, #0
10067b54:	e005      	b.n	10067b62 <memcmp+0x1a>
10067b56:	5d03      	ldrb	r3, [r0, r4]
10067b58:	3401      	adds	r4, #1
10067b5a:	5d0d      	ldrb	r5, [r1, r4]
10067b5c:	42ab      	cmp	r3, r5
10067b5e:	d0f6      	beq.n	10067b4e <memcmp+0x6>
10067b60:	1b58      	subs	r0, r3, r5
10067b62:	bd30      	pop	{r4, r5, pc}

10067b64 <memset>:
10067b64:	0003      	movs	r3, r0
10067b66:	1882      	adds	r2, r0, r2
10067b68:	4293      	cmp	r3, r2
10067b6a:	d100      	bne.n	10067b6e <memset+0xa>
10067b6c:	4770      	bx	lr
10067b6e:	7019      	strb	r1, [r3, #0]
10067b70:	3301      	adds	r3, #1
10067b72:	e7f9      	b.n	10067b68 <memset+0x4>

10067b74 <_close_r>:
10067b74:	2300      	movs	r3, #0
10067b76:	b570      	push	{r4, r5, r6, lr}
10067b78:	4d06      	ldr	r5, [pc, #24]	@ (10067b94 <_close_r+0x20>)
10067b7a:	0004      	movs	r4, r0
10067b7c:	0008      	movs	r0, r1
10067b7e:	602b      	str	r3, [r5, #0]
10067b80:	f7de fd99 	bl	100466b6 <_close>
10067b84:	1c43      	adds	r3, r0, #1
10067b86:	d103      	bne.n	10067b90 <_close_r+0x1c>
10067b88:	682b      	ldr	r3, [r5, #0]
10067b8a:	2b00      	cmp	r3, #0
10067b8c:	d000      	beq.n	10067b90 <_close_r+0x1c>
10067b8e:	6023      	str	r3, [r4, #0]
10067b90:	bd70      	pop	{r4, r5, r6, pc}
10067b92:	46c0      	nop			@ (mov r8, r8)
10067b94:	20002c6c 	.word	0x20002c6c

10067b98 <_lseek_r>:
10067b98:	b570      	push	{r4, r5, r6, lr}
10067b9a:	0004      	movs	r4, r0
10067b9c:	0008      	movs	r0, r1
10067b9e:	0011      	movs	r1, r2
10067ba0:	001a      	movs	r2, r3
10067ba2:	2300      	movs	r3, #0
10067ba4:	4d05      	ldr	r5, [pc, #20]	@ (10067bbc <_lseek_r+0x24>)
10067ba6:	602b      	str	r3, [r5, #0]
10067ba8:	f7de fda6 	bl	100466f8 <_lseek>
10067bac:	1c43      	adds	r3, r0, #1
10067bae:	d103      	bne.n	10067bb8 <_lseek_r+0x20>
10067bb0:	682b      	ldr	r3, [r5, #0]
10067bb2:	2b00      	cmp	r3, #0
10067bb4:	d000      	beq.n	10067bb8 <_lseek_r+0x20>
10067bb6:	6023      	str	r3, [r4, #0]
10067bb8:	bd70      	pop	{r4, r5, r6, pc}
10067bba:	46c0      	nop			@ (mov r8, r8)
10067bbc:	20002c6c 	.word	0x20002c6c

10067bc0 <_read_r>:
10067bc0:	b570      	push	{r4, r5, r6, lr}
10067bc2:	0004      	movs	r4, r0
10067bc4:	0008      	movs	r0, r1
10067bc6:	0011      	movs	r1, r2
10067bc8:	001a      	movs	r2, r3
10067bca:	2300      	movs	r3, #0
10067bcc:	4d05      	ldr	r5, [pc, #20]	@ (10067be4 <_read_r+0x24>)
10067bce:	602b      	str	r3, [r5, #0]
10067bd0:	f7de fd38 	bl	10046644 <_read>
10067bd4:	1c43      	adds	r3, r0, #1
10067bd6:	d103      	bne.n	10067be0 <_read_r+0x20>
10067bd8:	682b      	ldr	r3, [r5, #0]
10067bda:	2b00      	cmp	r3, #0
10067bdc:	d000      	beq.n	10067be0 <_read_r+0x20>
10067bde:	6023      	str	r3, [r4, #0]
10067be0:	bd70      	pop	{r4, r5, r6, pc}
10067be2:	46c0      	nop			@ (mov r8, r8)
10067be4:	20002c6c 	.word	0x20002c6c

10067be8 <_sbrk_r>:
10067be8:	2300      	movs	r3, #0
10067bea:	b570      	push	{r4, r5, r6, lr}
10067bec:	4d06      	ldr	r5, [pc, #24]	@ (10067c08 <_sbrk_r+0x20>)
10067bee:	0004      	movs	r4, r0
10067bf0:	0008      	movs	r0, r1
10067bf2:	602b      	str	r3, [r5, #0]
10067bf4:	f7de fd8c 	bl	10046710 <_sbrk>
10067bf8:	1c43      	adds	r3, r0, #1
10067bfa:	d103      	bne.n	10067c04 <_sbrk_r+0x1c>
10067bfc:	682b      	ldr	r3, [r5, #0]
10067bfe:	2b00      	cmp	r3, #0
10067c00:	d000      	beq.n	10067c04 <_sbrk_r+0x1c>
10067c02:	6023      	str	r3, [r4, #0]
10067c04:	bd70      	pop	{r4, r5, r6, pc}
10067c06:	46c0      	nop			@ (mov r8, r8)
10067c08:	20002c6c 	.word	0x20002c6c

10067c0c <_write_r>:
10067c0c:	b570      	push	{r4, r5, r6, lr}
10067c0e:	0004      	movs	r4, r0
10067c10:	0008      	movs	r0, r1
10067c12:	0011      	movs	r1, r2
10067c14:	001a      	movs	r2, r3
10067c16:	2300      	movs	r3, #0
10067c18:	4d05      	ldr	r5, [pc, #20]	@ (10067c30 <_write_r+0x24>)
10067c1a:	602b      	str	r3, [r5, #0]
10067c1c:	f7de fd2f 	bl	1004667e <_write>
10067c20:	1c43      	adds	r3, r0, #1
10067c22:	d103      	bne.n	10067c2c <_write_r+0x20>
10067c24:	682b      	ldr	r3, [r5, #0]
10067c26:	2b00      	cmp	r3, #0
10067c28:	d000      	beq.n	10067c2c <_write_r+0x20>
10067c2a:	6023      	str	r3, [r4, #0]
10067c2c:	bd70      	pop	{r4, r5, r6, pc}
10067c2e:	46c0      	nop			@ (mov r8, r8)
10067c30:	20002c6c 	.word	0x20002c6c

10067c34 <__errno>:
10067c34:	4b01      	ldr	r3, [pc, #4]	@ (10067c3c <__errno+0x8>)
10067c36:	6818      	ldr	r0, [r3, #0]
10067c38:	4770      	bx	lr
10067c3a:	46c0      	nop			@ (mov r8, r8)
10067c3c:	20002e6c 	.word	0x20002e6c

10067c40 <__retarget_lock_init_recursive>:
10067c40:	4770      	bx	lr

10067c42 <__retarget_lock_acquire_recursive>:
10067c42:	4770      	bx	lr

10067c44 <__retarget_lock_release_recursive>:
10067c44:	4770      	bx	lr

10067c46 <__aeabi_memcpy>:
10067c46:	b510      	push	{r4, lr}
10067c48:	f000 f801 	bl	10067c4e <memcpy>
10067c4c:	bd10      	pop	{r4, pc}

10067c4e <memcpy>:
10067c4e:	2300      	movs	r3, #0
10067c50:	b510      	push	{r4, lr}
10067c52:	429a      	cmp	r2, r3
10067c54:	d100      	bne.n	10067c58 <memcpy+0xa>
10067c56:	bd10      	pop	{r4, pc}
10067c58:	5ccc      	ldrb	r4, [r1, r3]
10067c5a:	54c4      	strb	r4, [r0, r3]
10067c5c:	3301      	adds	r3, #1
10067c5e:	e7f8      	b.n	10067c52 <memcpy+0x4>

10067c60 <_free_r>:
10067c60:	b570      	push	{r4, r5, r6, lr}
10067c62:	0005      	movs	r5, r0
10067c64:	1e0c      	subs	r4, r1, #0
10067c66:	d010      	beq.n	10067c8a <_free_r+0x2a>
10067c68:	3c04      	subs	r4, #4
10067c6a:	6823      	ldr	r3, [r4, #0]
10067c6c:	2b00      	cmp	r3, #0
10067c6e:	da00      	bge.n	10067c72 <_free_r+0x12>
10067c70:	18e4      	adds	r4, r4, r3
10067c72:	0028      	movs	r0, r5
10067c74:	f7ff fd26 	bl	100676c4 <__malloc_lock>
10067c78:	4a1d      	ldr	r2, [pc, #116]	@ (10067cf0 <_free_r+0x90>)
10067c7a:	6813      	ldr	r3, [r2, #0]
10067c7c:	2b00      	cmp	r3, #0
10067c7e:	d105      	bne.n	10067c8c <_free_r+0x2c>
10067c80:	6063      	str	r3, [r4, #4]
10067c82:	6014      	str	r4, [r2, #0]
10067c84:	0028      	movs	r0, r5
10067c86:	f7ff fd25 	bl	100676d4 <__malloc_unlock>
10067c8a:	bd70      	pop	{r4, r5, r6, pc}
10067c8c:	42a3      	cmp	r3, r4
10067c8e:	d908      	bls.n	10067ca2 <_free_r+0x42>
10067c90:	6820      	ldr	r0, [r4, #0]
10067c92:	1821      	adds	r1, r4, r0
10067c94:	428b      	cmp	r3, r1
10067c96:	d1f3      	bne.n	10067c80 <_free_r+0x20>
10067c98:	6819      	ldr	r1, [r3, #0]
10067c9a:	685b      	ldr	r3, [r3, #4]
10067c9c:	1809      	adds	r1, r1, r0
10067c9e:	6021      	str	r1, [r4, #0]
10067ca0:	e7ee      	b.n	10067c80 <_free_r+0x20>
10067ca2:	001a      	movs	r2, r3
10067ca4:	685b      	ldr	r3, [r3, #4]
10067ca6:	2b00      	cmp	r3, #0
10067ca8:	d001      	beq.n	10067cae <_free_r+0x4e>
10067caa:	42a3      	cmp	r3, r4
10067cac:	d9f9      	bls.n	10067ca2 <_free_r+0x42>
10067cae:	6811      	ldr	r1, [r2, #0]
10067cb0:	1850      	adds	r0, r2, r1
10067cb2:	42a0      	cmp	r0, r4
10067cb4:	d10b      	bne.n	10067cce <_free_r+0x6e>
10067cb6:	6820      	ldr	r0, [r4, #0]
10067cb8:	1809      	adds	r1, r1, r0
10067cba:	1850      	adds	r0, r2, r1
10067cbc:	6011      	str	r1, [r2, #0]
10067cbe:	4283      	cmp	r3, r0
10067cc0:	d1e0      	bne.n	10067c84 <_free_r+0x24>
10067cc2:	6818      	ldr	r0, [r3, #0]
10067cc4:	685b      	ldr	r3, [r3, #4]
10067cc6:	1841      	adds	r1, r0, r1
10067cc8:	6011      	str	r1, [r2, #0]
10067cca:	6053      	str	r3, [r2, #4]
10067ccc:	e7da      	b.n	10067c84 <_free_r+0x24>
10067cce:	42a0      	cmp	r0, r4
10067cd0:	d902      	bls.n	10067cd8 <_free_r+0x78>
10067cd2:	230c      	movs	r3, #12
10067cd4:	602b      	str	r3, [r5, #0]
10067cd6:	e7d5      	b.n	10067c84 <_free_r+0x24>
10067cd8:	6820      	ldr	r0, [r4, #0]
10067cda:	1821      	adds	r1, r4, r0
10067cdc:	428b      	cmp	r3, r1
10067cde:	d103      	bne.n	10067ce8 <_free_r+0x88>
10067ce0:	6819      	ldr	r1, [r3, #0]
10067ce2:	685b      	ldr	r3, [r3, #4]
10067ce4:	1809      	adds	r1, r1, r0
10067ce6:	6021      	str	r1, [r4, #0]
10067ce8:	6063      	str	r3, [r4, #4]
10067cea:	6054      	str	r4, [r2, #4]
10067cec:	e7ca      	b.n	10067c84 <_free_r+0x24>
10067cee:	46c0      	nop			@ (mov r8, r8)
10067cf0:	20002b2c 	.word	0x20002b2c

10067cf4 <__ssputs_r>:
10067cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10067cf6:	688e      	ldr	r6, [r1, #8]
10067cf8:	b085      	sub	sp, #20
10067cfa:	001f      	movs	r7, r3
10067cfc:	000c      	movs	r4, r1
10067cfe:	680b      	ldr	r3, [r1, #0]
10067d00:	9002      	str	r0, [sp, #8]
10067d02:	9203      	str	r2, [sp, #12]
10067d04:	42be      	cmp	r6, r7
10067d06:	d830      	bhi.n	10067d6a <__ssputs_r+0x76>
10067d08:	210c      	movs	r1, #12
10067d0a:	5e62      	ldrsh	r2, [r4, r1]
10067d0c:	2190      	movs	r1, #144	@ 0x90
10067d0e:	00c9      	lsls	r1, r1, #3
10067d10:	420a      	tst	r2, r1
10067d12:	d028      	beq.n	10067d66 <__ssputs_r+0x72>
10067d14:	2003      	movs	r0, #3
10067d16:	6921      	ldr	r1, [r4, #16]
10067d18:	1a5b      	subs	r3, r3, r1
10067d1a:	9301      	str	r3, [sp, #4]
10067d1c:	6963      	ldr	r3, [r4, #20]
10067d1e:	4343      	muls	r3, r0
10067d20:	9801      	ldr	r0, [sp, #4]
10067d22:	0fdd      	lsrs	r5, r3, #31
10067d24:	18ed      	adds	r5, r5, r3
10067d26:	1c7b      	adds	r3, r7, #1
10067d28:	181b      	adds	r3, r3, r0
10067d2a:	106d      	asrs	r5, r5, #1
10067d2c:	42ab      	cmp	r3, r5
10067d2e:	d900      	bls.n	10067d32 <__ssputs_r+0x3e>
10067d30:	001d      	movs	r5, r3
10067d32:	0552      	lsls	r2, r2, #21
10067d34:	d528      	bpl.n	10067d88 <__ssputs_r+0x94>
10067d36:	0029      	movs	r1, r5
10067d38:	9802      	ldr	r0, [sp, #8]
10067d3a:	f7ff fc43 	bl	100675c4 <_malloc_r>
10067d3e:	1e06      	subs	r6, r0, #0
10067d40:	d02c      	beq.n	10067d9c <__ssputs_r+0xa8>
10067d42:	9a01      	ldr	r2, [sp, #4]
10067d44:	6921      	ldr	r1, [r4, #16]
10067d46:	f7ff ff82 	bl	10067c4e <memcpy>
10067d4a:	89a2      	ldrh	r2, [r4, #12]
10067d4c:	4b18      	ldr	r3, [pc, #96]	@ (10067db0 <__ssputs_r+0xbc>)
10067d4e:	401a      	ands	r2, r3
10067d50:	2380      	movs	r3, #128	@ 0x80
10067d52:	4313      	orrs	r3, r2
10067d54:	81a3      	strh	r3, [r4, #12]
10067d56:	9b01      	ldr	r3, [sp, #4]
10067d58:	6126      	str	r6, [r4, #16]
10067d5a:	18f6      	adds	r6, r6, r3
10067d5c:	6026      	str	r6, [r4, #0]
10067d5e:	003e      	movs	r6, r7
10067d60:	6165      	str	r5, [r4, #20]
10067d62:	1aed      	subs	r5, r5, r3
10067d64:	60a5      	str	r5, [r4, #8]
10067d66:	42be      	cmp	r6, r7
10067d68:	d900      	bls.n	10067d6c <__ssputs_r+0x78>
10067d6a:	003e      	movs	r6, r7
10067d6c:	0032      	movs	r2, r6
10067d6e:	9903      	ldr	r1, [sp, #12]
10067d70:	6820      	ldr	r0, [r4, #0]
10067d72:	f000 fbb6 	bl	100684e2 <memmove>
10067d76:	2000      	movs	r0, #0
10067d78:	68a3      	ldr	r3, [r4, #8]
10067d7a:	1b9b      	subs	r3, r3, r6
10067d7c:	60a3      	str	r3, [r4, #8]
10067d7e:	6823      	ldr	r3, [r4, #0]
10067d80:	199b      	adds	r3, r3, r6
10067d82:	6023      	str	r3, [r4, #0]
10067d84:	b005      	add	sp, #20
10067d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067d88:	002a      	movs	r2, r5
10067d8a:	9802      	ldr	r0, [sp, #8]
10067d8c:	f000 fbeb 	bl	10068566 <_realloc_r>
10067d90:	1e06      	subs	r6, r0, #0
10067d92:	d1e0      	bne.n	10067d56 <__ssputs_r+0x62>
10067d94:	6921      	ldr	r1, [r4, #16]
10067d96:	9802      	ldr	r0, [sp, #8]
10067d98:	f7ff ff62 	bl	10067c60 <_free_r>
10067d9c:	230c      	movs	r3, #12
10067d9e:	2001      	movs	r0, #1
10067da0:	9a02      	ldr	r2, [sp, #8]
10067da2:	4240      	negs	r0, r0
10067da4:	6013      	str	r3, [r2, #0]
10067da6:	89a2      	ldrh	r2, [r4, #12]
10067da8:	3334      	adds	r3, #52	@ 0x34
10067daa:	4313      	orrs	r3, r2
10067dac:	81a3      	strh	r3, [r4, #12]
10067dae:	e7e9      	b.n	10067d84 <__ssputs_r+0x90>
10067db0:	fffffb7f 	.word	0xfffffb7f

10067db4 <_svfiprintf_r>:
10067db4:	b5f0      	push	{r4, r5, r6, r7, lr}
10067db6:	b0a1      	sub	sp, #132	@ 0x84
10067db8:	9003      	str	r0, [sp, #12]
10067dba:	001d      	movs	r5, r3
10067dbc:	898b      	ldrh	r3, [r1, #12]
10067dbe:	000f      	movs	r7, r1
10067dc0:	0016      	movs	r6, r2
10067dc2:	061b      	lsls	r3, r3, #24
10067dc4:	d511      	bpl.n	10067dea <_svfiprintf_r+0x36>
10067dc6:	690b      	ldr	r3, [r1, #16]
10067dc8:	2b00      	cmp	r3, #0
10067dca:	d10e      	bne.n	10067dea <_svfiprintf_r+0x36>
10067dcc:	2140      	movs	r1, #64	@ 0x40
10067dce:	f7ff fbf9 	bl	100675c4 <_malloc_r>
10067dd2:	6038      	str	r0, [r7, #0]
10067dd4:	6138      	str	r0, [r7, #16]
10067dd6:	2800      	cmp	r0, #0
10067dd8:	d105      	bne.n	10067de6 <_svfiprintf_r+0x32>
10067dda:	230c      	movs	r3, #12
10067ddc:	9a03      	ldr	r2, [sp, #12]
10067dde:	6013      	str	r3, [r2, #0]
10067de0:	2001      	movs	r0, #1
10067de2:	4240      	negs	r0, r0
10067de4:	e0cf      	b.n	10067f86 <_svfiprintf_r+0x1d2>
10067de6:	2340      	movs	r3, #64	@ 0x40
10067de8:	617b      	str	r3, [r7, #20]
10067dea:	2300      	movs	r3, #0
10067dec:	ac08      	add	r4, sp, #32
10067dee:	6163      	str	r3, [r4, #20]
10067df0:	3320      	adds	r3, #32
10067df2:	7663      	strb	r3, [r4, #25]
10067df4:	3310      	adds	r3, #16
10067df6:	76a3      	strb	r3, [r4, #26]
10067df8:	9507      	str	r5, [sp, #28]
10067dfa:	0035      	movs	r5, r6
10067dfc:	782b      	ldrb	r3, [r5, #0]
10067dfe:	2b00      	cmp	r3, #0
10067e00:	d001      	beq.n	10067e06 <_svfiprintf_r+0x52>
10067e02:	2b25      	cmp	r3, #37	@ 0x25
10067e04:	d148      	bne.n	10067e98 <_svfiprintf_r+0xe4>
10067e06:	1bab      	subs	r3, r5, r6
10067e08:	9305      	str	r3, [sp, #20]
10067e0a:	42b5      	cmp	r5, r6
10067e0c:	d00b      	beq.n	10067e26 <_svfiprintf_r+0x72>
10067e0e:	0032      	movs	r2, r6
10067e10:	0039      	movs	r1, r7
10067e12:	9803      	ldr	r0, [sp, #12]
10067e14:	f7ff ff6e 	bl	10067cf4 <__ssputs_r>
10067e18:	3001      	adds	r0, #1
10067e1a:	d100      	bne.n	10067e1e <_svfiprintf_r+0x6a>
10067e1c:	e0ae      	b.n	10067f7c <_svfiprintf_r+0x1c8>
10067e1e:	6963      	ldr	r3, [r4, #20]
10067e20:	9a05      	ldr	r2, [sp, #20]
10067e22:	189b      	adds	r3, r3, r2
10067e24:	6163      	str	r3, [r4, #20]
10067e26:	782b      	ldrb	r3, [r5, #0]
10067e28:	2b00      	cmp	r3, #0
10067e2a:	d100      	bne.n	10067e2e <_svfiprintf_r+0x7a>
10067e2c:	e0a6      	b.n	10067f7c <_svfiprintf_r+0x1c8>
10067e2e:	2201      	movs	r2, #1
10067e30:	2300      	movs	r3, #0
10067e32:	4252      	negs	r2, r2
10067e34:	6062      	str	r2, [r4, #4]
10067e36:	a904      	add	r1, sp, #16
10067e38:	3254      	adds	r2, #84	@ 0x54
10067e3a:	1852      	adds	r2, r2, r1
10067e3c:	1c6e      	adds	r6, r5, #1
10067e3e:	6023      	str	r3, [r4, #0]
10067e40:	60e3      	str	r3, [r4, #12]
10067e42:	60a3      	str	r3, [r4, #8]
10067e44:	7013      	strb	r3, [r2, #0]
10067e46:	65a3      	str	r3, [r4, #88]	@ 0x58
10067e48:	4b54      	ldr	r3, [pc, #336]	@ (10067f9c <_svfiprintf_r+0x1e8>)
10067e4a:	2205      	movs	r2, #5
10067e4c:	0018      	movs	r0, r3
10067e4e:	7831      	ldrb	r1, [r6, #0]
10067e50:	9305      	str	r3, [sp, #20]
10067e52:	f000 fb7d 	bl	10068550 <memchr>
10067e56:	1c75      	adds	r5, r6, #1
10067e58:	2800      	cmp	r0, #0
10067e5a:	d11f      	bne.n	10067e9c <_svfiprintf_r+0xe8>
10067e5c:	6822      	ldr	r2, [r4, #0]
10067e5e:	06d3      	lsls	r3, r2, #27
10067e60:	d504      	bpl.n	10067e6c <_svfiprintf_r+0xb8>
10067e62:	2353      	movs	r3, #83	@ 0x53
10067e64:	a904      	add	r1, sp, #16
10067e66:	185b      	adds	r3, r3, r1
10067e68:	2120      	movs	r1, #32
10067e6a:	7019      	strb	r1, [r3, #0]
10067e6c:	0713      	lsls	r3, r2, #28
10067e6e:	d504      	bpl.n	10067e7a <_svfiprintf_r+0xc6>
10067e70:	2353      	movs	r3, #83	@ 0x53
10067e72:	a904      	add	r1, sp, #16
10067e74:	185b      	adds	r3, r3, r1
10067e76:	212b      	movs	r1, #43	@ 0x2b
10067e78:	7019      	strb	r1, [r3, #0]
10067e7a:	7833      	ldrb	r3, [r6, #0]
10067e7c:	2b2a      	cmp	r3, #42	@ 0x2a
10067e7e:	d016      	beq.n	10067eae <_svfiprintf_r+0xfa>
10067e80:	0035      	movs	r5, r6
10067e82:	2100      	movs	r1, #0
10067e84:	200a      	movs	r0, #10
10067e86:	68e3      	ldr	r3, [r4, #12]
10067e88:	782a      	ldrb	r2, [r5, #0]
10067e8a:	1c6e      	adds	r6, r5, #1
10067e8c:	3a30      	subs	r2, #48	@ 0x30
10067e8e:	2a09      	cmp	r2, #9
10067e90:	d950      	bls.n	10067f34 <_svfiprintf_r+0x180>
10067e92:	2900      	cmp	r1, #0
10067e94:	d111      	bne.n	10067eba <_svfiprintf_r+0x106>
10067e96:	e017      	b.n	10067ec8 <_svfiprintf_r+0x114>
10067e98:	3501      	adds	r5, #1
10067e9a:	e7af      	b.n	10067dfc <_svfiprintf_r+0x48>
10067e9c:	9b05      	ldr	r3, [sp, #20]
10067e9e:	6822      	ldr	r2, [r4, #0]
10067ea0:	1ac0      	subs	r0, r0, r3
10067ea2:	2301      	movs	r3, #1
10067ea4:	4083      	lsls	r3, r0
10067ea6:	4313      	orrs	r3, r2
10067ea8:	002e      	movs	r6, r5
10067eaa:	6023      	str	r3, [r4, #0]
10067eac:	e7cc      	b.n	10067e48 <_svfiprintf_r+0x94>
10067eae:	9b07      	ldr	r3, [sp, #28]
10067eb0:	1d19      	adds	r1, r3, #4
10067eb2:	681b      	ldr	r3, [r3, #0]
10067eb4:	9107      	str	r1, [sp, #28]
10067eb6:	2b00      	cmp	r3, #0
10067eb8:	db01      	blt.n	10067ebe <_svfiprintf_r+0x10a>
10067eba:	930b      	str	r3, [sp, #44]	@ 0x2c
10067ebc:	e004      	b.n	10067ec8 <_svfiprintf_r+0x114>
10067ebe:	425b      	negs	r3, r3
10067ec0:	60e3      	str	r3, [r4, #12]
10067ec2:	2302      	movs	r3, #2
10067ec4:	4313      	orrs	r3, r2
10067ec6:	6023      	str	r3, [r4, #0]
10067ec8:	782b      	ldrb	r3, [r5, #0]
10067eca:	2b2e      	cmp	r3, #46	@ 0x2e
10067ecc:	d10c      	bne.n	10067ee8 <_svfiprintf_r+0x134>
10067ece:	786b      	ldrb	r3, [r5, #1]
10067ed0:	2b2a      	cmp	r3, #42	@ 0x2a
10067ed2:	d134      	bne.n	10067f3e <_svfiprintf_r+0x18a>
10067ed4:	9b07      	ldr	r3, [sp, #28]
10067ed6:	3502      	adds	r5, #2
10067ed8:	1d1a      	adds	r2, r3, #4
10067eda:	681b      	ldr	r3, [r3, #0]
10067edc:	9207      	str	r2, [sp, #28]
10067ede:	2b00      	cmp	r3, #0
10067ee0:	da01      	bge.n	10067ee6 <_svfiprintf_r+0x132>
10067ee2:	2301      	movs	r3, #1
10067ee4:	425b      	negs	r3, r3
10067ee6:	9309      	str	r3, [sp, #36]	@ 0x24
10067ee8:	4e2d      	ldr	r6, [pc, #180]	@ (10067fa0 <_svfiprintf_r+0x1ec>)
10067eea:	2203      	movs	r2, #3
10067eec:	0030      	movs	r0, r6
10067eee:	7829      	ldrb	r1, [r5, #0]
10067ef0:	f000 fb2e 	bl	10068550 <memchr>
10067ef4:	2800      	cmp	r0, #0
10067ef6:	d006      	beq.n	10067f06 <_svfiprintf_r+0x152>
10067ef8:	2340      	movs	r3, #64	@ 0x40
10067efa:	1b80      	subs	r0, r0, r6
10067efc:	4083      	lsls	r3, r0
10067efe:	6822      	ldr	r2, [r4, #0]
10067f00:	3501      	adds	r5, #1
10067f02:	4313      	orrs	r3, r2
10067f04:	6023      	str	r3, [r4, #0]
10067f06:	7829      	ldrb	r1, [r5, #0]
10067f08:	2206      	movs	r2, #6
10067f0a:	4826      	ldr	r0, [pc, #152]	@ (10067fa4 <_svfiprintf_r+0x1f0>)
10067f0c:	1c6e      	adds	r6, r5, #1
10067f0e:	7621      	strb	r1, [r4, #24]
10067f10:	f000 fb1e 	bl	10068550 <memchr>
10067f14:	2800      	cmp	r0, #0
10067f16:	d038      	beq.n	10067f8a <_svfiprintf_r+0x1d6>
10067f18:	4b23      	ldr	r3, [pc, #140]	@ (10067fa8 <_svfiprintf_r+0x1f4>)
10067f1a:	2b00      	cmp	r3, #0
10067f1c:	d122      	bne.n	10067f64 <_svfiprintf_r+0x1b0>
10067f1e:	2207      	movs	r2, #7
10067f20:	9b07      	ldr	r3, [sp, #28]
10067f22:	3307      	adds	r3, #7
10067f24:	4393      	bics	r3, r2
10067f26:	3308      	adds	r3, #8
10067f28:	9307      	str	r3, [sp, #28]
10067f2a:	6963      	ldr	r3, [r4, #20]
10067f2c:	9a04      	ldr	r2, [sp, #16]
10067f2e:	189b      	adds	r3, r3, r2
10067f30:	6163      	str	r3, [r4, #20]
10067f32:	e762      	b.n	10067dfa <_svfiprintf_r+0x46>
10067f34:	4343      	muls	r3, r0
10067f36:	0035      	movs	r5, r6
10067f38:	2101      	movs	r1, #1
10067f3a:	189b      	adds	r3, r3, r2
10067f3c:	e7a4      	b.n	10067e88 <_svfiprintf_r+0xd4>
10067f3e:	2300      	movs	r3, #0
10067f40:	200a      	movs	r0, #10
10067f42:	0019      	movs	r1, r3
10067f44:	3501      	adds	r5, #1
10067f46:	6063      	str	r3, [r4, #4]
10067f48:	782a      	ldrb	r2, [r5, #0]
10067f4a:	1c6e      	adds	r6, r5, #1
10067f4c:	3a30      	subs	r2, #48	@ 0x30
10067f4e:	2a09      	cmp	r2, #9
10067f50:	d903      	bls.n	10067f5a <_svfiprintf_r+0x1a6>
10067f52:	2b00      	cmp	r3, #0
10067f54:	d0c8      	beq.n	10067ee8 <_svfiprintf_r+0x134>
10067f56:	9109      	str	r1, [sp, #36]	@ 0x24
10067f58:	e7c6      	b.n	10067ee8 <_svfiprintf_r+0x134>
10067f5a:	4341      	muls	r1, r0
10067f5c:	0035      	movs	r5, r6
10067f5e:	2301      	movs	r3, #1
10067f60:	1889      	adds	r1, r1, r2
10067f62:	e7f1      	b.n	10067f48 <_svfiprintf_r+0x194>
10067f64:	aa07      	add	r2, sp, #28
10067f66:	9200      	str	r2, [sp, #0]
10067f68:	0021      	movs	r1, r4
10067f6a:	003a      	movs	r2, r7
10067f6c:	4b0f      	ldr	r3, [pc, #60]	@ (10067fac <_svfiprintf_r+0x1f8>)
10067f6e:	9803      	ldr	r0, [sp, #12]
10067f70:	e000      	b.n	10067f74 <_svfiprintf_r+0x1c0>
10067f72:	bf00      	nop
10067f74:	9004      	str	r0, [sp, #16]
10067f76:	9b04      	ldr	r3, [sp, #16]
10067f78:	3301      	adds	r3, #1
10067f7a:	d1d6      	bne.n	10067f2a <_svfiprintf_r+0x176>
10067f7c:	89bb      	ldrh	r3, [r7, #12]
10067f7e:	980d      	ldr	r0, [sp, #52]	@ 0x34
10067f80:	065b      	lsls	r3, r3, #25
10067f82:	d500      	bpl.n	10067f86 <_svfiprintf_r+0x1d2>
10067f84:	e72c      	b.n	10067de0 <_svfiprintf_r+0x2c>
10067f86:	b021      	add	sp, #132	@ 0x84
10067f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
10067f8a:	aa07      	add	r2, sp, #28
10067f8c:	9200      	str	r2, [sp, #0]
10067f8e:	0021      	movs	r1, r4
10067f90:	003a      	movs	r2, r7
10067f92:	4b06      	ldr	r3, [pc, #24]	@ (10067fac <_svfiprintf_r+0x1f8>)
10067f94:	9803      	ldr	r0, [sp, #12]
10067f96:	f000 f87b 	bl	10068090 <_printf_i>
10067f9a:	e7eb      	b.n	10067f74 <_svfiprintf_r+0x1c0>
10067f9c:	10069919 	.word	0x10069919
10067fa0:	1006991f 	.word	0x1006991f
10067fa4:	10069923 	.word	0x10069923
10067fa8:	00000000 	.word	0x00000000
10067fac:	10067cf5 	.word	0x10067cf5

10067fb0 <_printf_common>:
10067fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10067fb2:	0016      	movs	r6, r2
10067fb4:	9301      	str	r3, [sp, #4]
10067fb6:	688a      	ldr	r2, [r1, #8]
10067fb8:	690b      	ldr	r3, [r1, #16]
10067fba:	000c      	movs	r4, r1
10067fbc:	9000      	str	r0, [sp, #0]
10067fbe:	4293      	cmp	r3, r2
10067fc0:	da00      	bge.n	10067fc4 <_printf_common+0x14>
10067fc2:	0013      	movs	r3, r2
10067fc4:	0022      	movs	r2, r4
10067fc6:	6033      	str	r3, [r6, #0]
10067fc8:	3243      	adds	r2, #67	@ 0x43
10067fca:	7812      	ldrb	r2, [r2, #0]
10067fcc:	2a00      	cmp	r2, #0
10067fce:	d001      	beq.n	10067fd4 <_printf_common+0x24>
10067fd0:	3301      	adds	r3, #1
10067fd2:	6033      	str	r3, [r6, #0]
10067fd4:	6823      	ldr	r3, [r4, #0]
10067fd6:	069b      	lsls	r3, r3, #26
10067fd8:	d502      	bpl.n	10067fe0 <_printf_common+0x30>
10067fda:	6833      	ldr	r3, [r6, #0]
10067fdc:	3302      	adds	r3, #2
10067fde:	6033      	str	r3, [r6, #0]
10067fe0:	6822      	ldr	r2, [r4, #0]
10067fe2:	2306      	movs	r3, #6
10067fe4:	0015      	movs	r5, r2
10067fe6:	401d      	ands	r5, r3
10067fe8:	421a      	tst	r2, r3
10067fea:	d027      	beq.n	1006803c <_printf_common+0x8c>
10067fec:	0023      	movs	r3, r4
10067fee:	3343      	adds	r3, #67	@ 0x43
10067ff0:	781b      	ldrb	r3, [r3, #0]
10067ff2:	1e5a      	subs	r2, r3, #1
10067ff4:	4193      	sbcs	r3, r2
10067ff6:	6822      	ldr	r2, [r4, #0]
10067ff8:	0692      	lsls	r2, r2, #26
10067ffa:	d430      	bmi.n	1006805e <_printf_common+0xae>
10067ffc:	0022      	movs	r2, r4
10067ffe:	9901      	ldr	r1, [sp, #4]
10068000:	9800      	ldr	r0, [sp, #0]
10068002:	9d08      	ldr	r5, [sp, #32]
10068004:	3243      	adds	r2, #67	@ 0x43
10068006:	47a8      	blx	r5
10068008:	3001      	adds	r0, #1
1006800a:	d025      	beq.n	10068058 <_printf_common+0xa8>
1006800c:	2206      	movs	r2, #6
1006800e:	6823      	ldr	r3, [r4, #0]
10068010:	2500      	movs	r5, #0
10068012:	4013      	ands	r3, r2
10068014:	2b04      	cmp	r3, #4
10068016:	d105      	bne.n	10068024 <_printf_common+0x74>
10068018:	6833      	ldr	r3, [r6, #0]
1006801a:	68e5      	ldr	r5, [r4, #12]
1006801c:	1aed      	subs	r5, r5, r3
1006801e:	43eb      	mvns	r3, r5
10068020:	17db      	asrs	r3, r3, #31
10068022:	401d      	ands	r5, r3
10068024:	68a3      	ldr	r3, [r4, #8]
10068026:	6922      	ldr	r2, [r4, #16]
10068028:	4293      	cmp	r3, r2
1006802a:	dd01      	ble.n	10068030 <_printf_common+0x80>
1006802c:	1a9b      	subs	r3, r3, r2
1006802e:	18ed      	adds	r5, r5, r3
10068030:	2600      	movs	r6, #0
10068032:	42b5      	cmp	r5, r6
10068034:	d120      	bne.n	10068078 <_printf_common+0xc8>
10068036:	2000      	movs	r0, #0
10068038:	e010      	b.n	1006805c <_printf_common+0xac>
1006803a:	3501      	adds	r5, #1
1006803c:	68e3      	ldr	r3, [r4, #12]
1006803e:	6832      	ldr	r2, [r6, #0]
10068040:	1a9b      	subs	r3, r3, r2
10068042:	42ab      	cmp	r3, r5
10068044:	ddd2      	ble.n	10067fec <_printf_common+0x3c>
10068046:	0022      	movs	r2, r4
10068048:	2301      	movs	r3, #1
1006804a:	9901      	ldr	r1, [sp, #4]
1006804c:	9800      	ldr	r0, [sp, #0]
1006804e:	9f08      	ldr	r7, [sp, #32]
10068050:	3219      	adds	r2, #25
10068052:	47b8      	blx	r7
10068054:	3001      	adds	r0, #1
10068056:	d1f0      	bne.n	1006803a <_printf_common+0x8a>
10068058:	2001      	movs	r0, #1
1006805a:	4240      	negs	r0, r0
1006805c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006805e:	2030      	movs	r0, #48	@ 0x30
10068060:	18e1      	adds	r1, r4, r3
10068062:	3143      	adds	r1, #67	@ 0x43
10068064:	7008      	strb	r0, [r1, #0]
10068066:	0021      	movs	r1, r4
10068068:	1c5a      	adds	r2, r3, #1
1006806a:	3145      	adds	r1, #69	@ 0x45
1006806c:	7809      	ldrb	r1, [r1, #0]
1006806e:	18a2      	adds	r2, r4, r2
10068070:	3243      	adds	r2, #67	@ 0x43
10068072:	3302      	adds	r3, #2
10068074:	7011      	strb	r1, [r2, #0]
10068076:	e7c1      	b.n	10067ffc <_printf_common+0x4c>
10068078:	0022      	movs	r2, r4
1006807a:	2301      	movs	r3, #1
1006807c:	9901      	ldr	r1, [sp, #4]
1006807e:	9800      	ldr	r0, [sp, #0]
10068080:	9f08      	ldr	r7, [sp, #32]
10068082:	321a      	adds	r2, #26
10068084:	47b8      	blx	r7
10068086:	3001      	adds	r0, #1
10068088:	d0e6      	beq.n	10068058 <_printf_common+0xa8>
1006808a:	3601      	adds	r6, #1
1006808c:	e7d1      	b.n	10068032 <_printf_common+0x82>
	...

10068090 <_printf_i>:
10068090:	b5f0      	push	{r4, r5, r6, r7, lr}
10068092:	b08b      	sub	sp, #44	@ 0x2c
10068094:	9206      	str	r2, [sp, #24]
10068096:	000a      	movs	r2, r1
10068098:	3243      	adds	r2, #67	@ 0x43
1006809a:	9307      	str	r3, [sp, #28]
1006809c:	9005      	str	r0, [sp, #20]
1006809e:	9203      	str	r2, [sp, #12]
100680a0:	7e0a      	ldrb	r2, [r1, #24]
100680a2:	000c      	movs	r4, r1
100680a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
100680a6:	2a78      	cmp	r2, #120	@ 0x78
100680a8:	d809      	bhi.n	100680be <_printf_i+0x2e>
100680aa:	2a62      	cmp	r2, #98	@ 0x62
100680ac:	d80b      	bhi.n	100680c6 <_printf_i+0x36>
100680ae:	2a00      	cmp	r2, #0
100680b0:	d100      	bne.n	100680b4 <_printf_i+0x24>
100680b2:	e0ba      	b.n	1006822a <_printf_i+0x19a>
100680b4:	497a      	ldr	r1, [pc, #488]	@ (100682a0 <_printf_i+0x210>)
100680b6:	9104      	str	r1, [sp, #16]
100680b8:	2a58      	cmp	r2, #88	@ 0x58
100680ba:	d100      	bne.n	100680be <_printf_i+0x2e>
100680bc:	e08e      	b.n	100681dc <_printf_i+0x14c>
100680be:	0025      	movs	r5, r4
100680c0:	3542      	adds	r5, #66	@ 0x42
100680c2:	702a      	strb	r2, [r5, #0]
100680c4:	e022      	b.n	1006810c <_printf_i+0x7c>
100680c6:	0010      	movs	r0, r2
100680c8:	3863      	subs	r0, #99	@ 0x63
100680ca:	2815      	cmp	r0, #21
100680cc:	d8f7      	bhi.n	100680be <_printf_i+0x2e>
100680ce:	f7d8 f8ad 	bl	1004022c <__gnu_thumb1_case_shi>
100680d2:	0016      	.short	0x0016
100680d4:	fff6001f 	.word	0xfff6001f
100680d8:	fff6fff6 	.word	0xfff6fff6
100680dc:	001ffff6 	.word	0x001ffff6
100680e0:	fff6fff6 	.word	0xfff6fff6
100680e4:	fff6fff6 	.word	0xfff6fff6
100680e8:	0036009f 	.word	0x0036009f
100680ec:	fff6007e 	.word	0xfff6007e
100680f0:	00b0fff6 	.word	0x00b0fff6
100680f4:	0036fff6 	.word	0x0036fff6
100680f8:	fff6fff6 	.word	0xfff6fff6
100680fc:	0082      	.short	0x0082
100680fe:	0025      	movs	r5, r4
10068100:	681a      	ldr	r2, [r3, #0]
10068102:	3542      	adds	r5, #66	@ 0x42
10068104:	1d11      	adds	r1, r2, #4
10068106:	6019      	str	r1, [r3, #0]
10068108:	6813      	ldr	r3, [r2, #0]
1006810a:	702b      	strb	r3, [r5, #0]
1006810c:	2301      	movs	r3, #1
1006810e:	e09e      	b.n	1006824e <_printf_i+0x1be>
10068110:	6818      	ldr	r0, [r3, #0]
10068112:	6809      	ldr	r1, [r1, #0]
10068114:	1d02      	adds	r2, r0, #4
10068116:	060d      	lsls	r5, r1, #24
10068118:	d50b      	bpl.n	10068132 <_printf_i+0xa2>
1006811a:	6806      	ldr	r6, [r0, #0]
1006811c:	601a      	str	r2, [r3, #0]
1006811e:	2e00      	cmp	r6, #0
10068120:	da03      	bge.n	1006812a <_printf_i+0x9a>
10068122:	232d      	movs	r3, #45	@ 0x2d
10068124:	9a03      	ldr	r2, [sp, #12]
10068126:	4276      	negs	r6, r6
10068128:	7013      	strb	r3, [r2, #0]
1006812a:	4b5d      	ldr	r3, [pc, #372]	@ (100682a0 <_printf_i+0x210>)
1006812c:	270a      	movs	r7, #10
1006812e:	9304      	str	r3, [sp, #16]
10068130:	e018      	b.n	10068164 <_printf_i+0xd4>
10068132:	6806      	ldr	r6, [r0, #0]
10068134:	601a      	str	r2, [r3, #0]
10068136:	0649      	lsls	r1, r1, #25
10068138:	d5f1      	bpl.n	1006811e <_printf_i+0x8e>
1006813a:	b236      	sxth	r6, r6
1006813c:	e7ef      	b.n	1006811e <_printf_i+0x8e>
1006813e:	6808      	ldr	r0, [r1, #0]
10068140:	6819      	ldr	r1, [r3, #0]
10068142:	c940      	ldmia	r1!, {r6}
10068144:	0605      	lsls	r5, r0, #24
10068146:	d402      	bmi.n	1006814e <_printf_i+0xbe>
10068148:	0640      	lsls	r0, r0, #25
1006814a:	d500      	bpl.n	1006814e <_printf_i+0xbe>
1006814c:	b2b6      	uxth	r6, r6
1006814e:	6019      	str	r1, [r3, #0]
10068150:	4b53      	ldr	r3, [pc, #332]	@ (100682a0 <_printf_i+0x210>)
10068152:	270a      	movs	r7, #10
10068154:	9304      	str	r3, [sp, #16]
10068156:	2a6f      	cmp	r2, #111	@ 0x6f
10068158:	d100      	bne.n	1006815c <_printf_i+0xcc>
1006815a:	3f02      	subs	r7, #2
1006815c:	0023      	movs	r3, r4
1006815e:	2200      	movs	r2, #0
10068160:	3343      	adds	r3, #67	@ 0x43
10068162:	701a      	strb	r2, [r3, #0]
10068164:	6863      	ldr	r3, [r4, #4]
10068166:	60a3      	str	r3, [r4, #8]
10068168:	2b00      	cmp	r3, #0
1006816a:	db06      	blt.n	1006817a <_printf_i+0xea>
1006816c:	2104      	movs	r1, #4
1006816e:	6822      	ldr	r2, [r4, #0]
10068170:	9d03      	ldr	r5, [sp, #12]
10068172:	438a      	bics	r2, r1
10068174:	6022      	str	r2, [r4, #0]
10068176:	4333      	orrs	r3, r6
10068178:	d00c      	beq.n	10068194 <_printf_i+0x104>
1006817a:	9d03      	ldr	r5, [sp, #12]
1006817c:	0030      	movs	r0, r6
1006817e:	0039      	movs	r1, r7
10068180:	f7d8 f8e4 	bl	1004034c <__aeabi_uidivmod>
10068184:	9b04      	ldr	r3, [sp, #16]
10068186:	3d01      	subs	r5, #1
10068188:	5c5b      	ldrb	r3, [r3, r1]
1006818a:	702b      	strb	r3, [r5, #0]
1006818c:	0033      	movs	r3, r6
1006818e:	0006      	movs	r6, r0
10068190:	429f      	cmp	r7, r3
10068192:	d9f3      	bls.n	1006817c <_printf_i+0xec>
10068194:	2f08      	cmp	r7, #8
10068196:	d109      	bne.n	100681ac <_printf_i+0x11c>
10068198:	6823      	ldr	r3, [r4, #0]
1006819a:	07db      	lsls	r3, r3, #31
1006819c:	d506      	bpl.n	100681ac <_printf_i+0x11c>
1006819e:	6862      	ldr	r2, [r4, #4]
100681a0:	6923      	ldr	r3, [r4, #16]
100681a2:	429a      	cmp	r2, r3
100681a4:	dc02      	bgt.n	100681ac <_printf_i+0x11c>
100681a6:	2330      	movs	r3, #48	@ 0x30
100681a8:	3d01      	subs	r5, #1
100681aa:	702b      	strb	r3, [r5, #0]
100681ac:	9b03      	ldr	r3, [sp, #12]
100681ae:	1b5b      	subs	r3, r3, r5
100681b0:	6123      	str	r3, [r4, #16]
100681b2:	9b07      	ldr	r3, [sp, #28]
100681b4:	0021      	movs	r1, r4
100681b6:	9300      	str	r3, [sp, #0]
100681b8:	9805      	ldr	r0, [sp, #20]
100681ba:	9b06      	ldr	r3, [sp, #24]
100681bc:	aa09      	add	r2, sp, #36	@ 0x24
100681be:	f7ff fef7 	bl	10067fb0 <_printf_common>
100681c2:	3001      	adds	r0, #1
100681c4:	d148      	bne.n	10068258 <_printf_i+0x1c8>
100681c6:	2001      	movs	r0, #1
100681c8:	4240      	negs	r0, r0
100681ca:	b00b      	add	sp, #44	@ 0x2c
100681cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100681ce:	2220      	movs	r2, #32
100681d0:	6809      	ldr	r1, [r1, #0]
100681d2:	430a      	orrs	r2, r1
100681d4:	6022      	str	r2, [r4, #0]
100681d6:	2278      	movs	r2, #120	@ 0x78
100681d8:	4932      	ldr	r1, [pc, #200]	@ (100682a4 <_printf_i+0x214>)
100681da:	9104      	str	r1, [sp, #16]
100681dc:	0021      	movs	r1, r4
100681de:	3145      	adds	r1, #69	@ 0x45
100681e0:	700a      	strb	r2, [r1, #0]
100681e2:	6819      	ldr	r1, [r3, #0]
100681e4:	6822      	ldr	r2, [r4, #0]
100681e6:	c940      	ldmia	r1!, {r6}
100681e8:	0610      	lsls	r0, r2, #24
100681ea:	d402      	bmi.n	100681f2 <_printf_i+0x162>
100681ec:	0650      	lsls	r0, r2, #25
100681ee:	d500      	bpl.n	100681f2 <_printf_i+0x162>
100681f0:	b2b6      	uxth	r6, r6
100681f2:	6019      	str	r1, [r3, #0]
100681f4:	07d3      	lsls	r3, r2, #31
100681f6:	d502      	bpl.n	100681fe <_printf_i+0x16e>
100681f8:	2320      	movs	r3, #32
100681fa:	4313      	orrs	r3, r2
100681fc:	6023      	str	r3, [r4, #0]
100681fe:	2e00      	cmp	r6, #0
10068200:	d001      	beq.n	10068206 <_printf_i+0x176>
10068202:	2710      	movs	r7, #16
10068204:	e7aa      	b.n	1006815c <_printf_i+0xcc>
10068206:	2220      	movs	r2, #32
10068208:	6823      	ldr	r3, [r4, #0]
1006820a:	4393      	bics	r3, r2
1006820c:	6023      	str	r3, [r4, #0]
1006820e:	e7f8      	b.n	10068202 <_printf_i+0x172>
10068210:	681a      	ldr	r2, [r3, #0]
10068212:	680d      	ldr	r5, [r1, #0]
10068214:	1d10      	adds	r0, r2, #4
10068216:	6949      	ldr	r1, [r1, #20]
10068218:	6018      	str	r0, [r3, #0]
1006821a:	6813      	ldr	r3, [r2, #0]
1006821c:	062e      	lsls	r6, r5, #24
1006821e:	d501      	bpl.n	10068224 <_printf_i+0x194>
10068220:	6019      	str	r1, [r3, #0]
10068222:	e002      	b.n	1006822a <_printf_i+0x19a>
10068224:	066d      	lsls	r5, r5, #25
10068226:	d5fb      	bpl.n	10068220 <_printf_i+0x190>
10068228:	8019      	strh	r1, [r3, #0]
1006822a:	2300      	movs	r3, #0
1006822c:	9d03      	ldr	r5, [sp, #12]
1006822e:	6123      	str	r3, [r4, #16]
10068230:	e7bf      	b.n	100681b2 <_printf_i+0x122>
10068232:	681a      	ldr	r2, [r3, #0]
10068234:	1d11      	adds	r1, r2, #4
10068236:	6019      	str	r1, [r3, #0]
10068238:	6815      	ldr	r5, [r2, #0]
1006823a:	2100      	movs	r1, #0
1006823c:	0028      	movs	r0, r5
1006823e:	6862      	ldr	r2, [r4, #4]
10068240:	f000 f986 	bl	10068550 <memchr>
10068244:	2800      	cmp	r0, #0
10068246:	d001      	beq.n	1006824c <_printf_i+0x1bc>
10068248:	1b40      	subs	r0, r0, r5
1006824a:	6060      	str	r0, [r4, #4]
1006824c:	6863      	ldr	r3, [r4, #4]
1006824e:	6123      	str	r3, [r4, #16]
10068250:	2300      	movs	r3, #0
10068252:	9a03      	ldr	r2, [sp, #12]
10068254:	7013      	strb	r3, [r2, #0]
10068256:	e7ac      	b.n	100681b2 <_printf_i+0x122>
10068258:	002a      	movs	r2, r5
1006825a:	6923      	ldr	r3, [r4, #16]
1006825c:	9906      	ldr	r1, [sp, #24]
1006825e:	9805      	ldr	r0, [sp, #20]
10068260:	9d07      	ldr	r5, [sp, #28]
10068262:	47a8      	blx	r5
10068264:	3001      	adds	r0, #1
10068266:	d0ae      	beq.n	100681c6 <_printf_i+0x136>
10068268:	6823      	ldr	r3, [r4, #0]
1006826a:	079b      	lsls	r3, r3, #30
1006826c:	d415      	bmi.n	1006829a <_printf_i+0x20a>
1006826e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
10068270:	68e0      	ldr	r0, [r4, #12]
10068272:	4298      	cmp	r0, r3
10068274:	daa9      	bge.n	100681ca <_printf_i+0x13a>
10068276:	0018      	movs	r0, r3
10068278:	e7a7      	b.n	100681ca <_printf_i+0x13a>
1006827a:	0022      	movs	r2, r4
1006827c:	2301      	movs	r3, #1
1006827e:	9906      	ldr	r1, [sp, #24]
10068280:	9805      	ldr	r0, [sp, #20]
10068282:	9e07      	ldr	r6, [sp, #28]
10068284:	3219      	adds	r2, #25
10068286:	47b0      	blx	r6
10068288:	3001      	adds	r0, #1
1006828a:	d09c      	beq.n	100681c6 <_printf_i+0x136>
1006828c:	3501      	adds	r5, #1
1006828e:	68e3      	ldr	r3, [r4, #12]
10068290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
10068292:	1a9b      	subs	r3, r3, r2
10068294:	42ab      	cmp	r3, r5
10068296:	dcf0      	bgt.n	1006827a <_printf_i+0x1ea>
10068298:	e7e9      	b.n	1006826e <_printf_i+0x1de>
1006829a:	2500      	movs	r5, #0
1006829c:	e7f7      	b.n	1006828e <_printf_i+0x1fe>
1006829e:	46c0      	nop			@ (mov r8, r8)
100682a0:	1006992a 	.word	0x1006992a
100682a4:	1006993b 	.word	0x1006993b

100682a8 <__sflush_r>:
100682a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100682aa:	220c      	movs	r2, #12
100682ac:	5e8b      	ldrsh	r3, [r1, r2]
100682ae:	0005      	movs	r5, r0
100682b0:	000c      	movs	r4, r1
100682b2:	071a      	lsls	r2, r3, #28
100682b4:	d456      	bmi.n	10068364 <__sflush_r+0xbc>
100682b6:	684a      	ldr	r2, [r1, #4]
100682b8:	2a00      	cmp	r2, #0
100682ba:	dc02      	bgt.n	100682c2 <__sflush_r+0x1a>
100682bc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
100682be:	2a00      	cmp	r2, #0
100682c0:	dd4e      	ble.n	10068360 <__sflush_r+0xb8>
100682c2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100682c4:	2f00      	cmp	r7, #0
100682c6:	d04b      	beq.n	10068360 <__sflush_r+0xb8>
100682c8:	2200      	movs	r2, #0
100682ca:	2080      	movs	r0, #128	@ 0x80
100682cc:	682e      	ldr	r6, [r5, #0]
100682ce:	602a      	str	r2, [r5, #0]
100682d0:	001a      	movs	r2, r3
100682d2:	0140      	lsls	r0, r0, #5
100682d4:	6a21      	ldr	r1, [r4, #32]
100682d6:	4002      	ands	r2, r0
100682d8:	4203      	tst	r3, r0
100682da:	d033      	beq.n	10068344 <__sflush_r+0x9c>
100682dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
100682de:	89a3      	ldrh	r3, [r4, #12]
100682e0:	075b      	lsls	r3, r3, #29
100682e2:	d506      	bpl.n	100682f2 <__sflush_r+0x4a>
100682e4:	6863      	ldr	r3, [r4, #4]
100682e6:	1ad2      	subs	r2, r2, r3
100682e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
100682ea:	2b00      	cmp	r3, #0
100682ec:	d001      	beq.n	100682f2 <__sflush_r+0x4a>
100682ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
100682f0:	1ad2      	subs	r2, r2, r3
100682f2:	2300      	movs	r3, #0
100682f4:	0028      	movs	r0, r5
100682f6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
100682f8:	6a21      	ldr	r1, [r4, #32]
100682fa:	47b8      	blx	r7
100682fc:	89a2      	ldrh	r2, [r4, #12]
100682fe:	1c43      	adds	r3, r0, #1
10068300:	d106      	bne.n	10068310 <__sflush_r+0x68>
10068302:	6829      	ldr	r1, [r5, #0]
10068304:	291d      	cmp	r1, #29
10068306:	d846      	bhi.n	10068396 <__sflush_r+0xee>
10068308:	4b29      	ldr	r3, [pc, #164]	@ (100683b0 <__sflush_r+0x108>)
1006830a:	40cb      	lsrs	r3, r1
1006830c:	07db      	lsls	r3, r3, #31
1006830e:	d542      	bpl.n	10068396 <__sflush_r+0xee>
10068310:	2300      	movs	r3, #0
10068312:	6063      	str	r3, [r4, #4]
10068314:	6923      	ldr	r3, [r4, #16]
10068316:	6023      	str	r3, [r4, #0]
10068318:	04d2      	lsls	r2, r2, #19
1006831a:	d505      	bpl.n	10068328 <__sflush_r+0x80>
1006831c:	1c43      	adds	r3, r0, #1
1006831e:	d102      	bne.n	10068326 <__sflush_r+0x7e>
10068320:	682b      	ldr	r3, [r5, #0]
10068322:	2b00      	cmp	r3, #0
10068324:	d100      	bne.n	10068328 <__sflush_r+0x80>
10068326:	6560      	str	r0, [r4, #84]	@ 0x54
10068328:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1006832a:	602e      	str	r6, [r5, #0]
1006832c:	2900      	cmp	r1, #0
1006832e:	d017      	beq.n	10068360 <__sflush_r+0xb8>
10068330:	0023      	movs	r3, r4
10068332:	3344      	adds	r3, #68	@ 0x44
10068334:	4299      	cmp	r1, r3
10068336:	d002      	beq.n	1006833e <__sflush_r+0x96>
10068338:	0028      	movs	r0, r5
1006833a:	f7ff fc91 	bl	10067c60 <_free_r>
1006833e:	2300      	movs	r3, #0
10068340:	6363      	str	r3, [r4, #52]	@ 0x34
10068342:	e00d      	b.n	10068360 <__sflush_r+0xb8>
10068344:	2301      	movs	r3, #1
10068346:	0028      	movs	r0, r5
10068348:	47b8      	blx	r7
1006834a:	0002      	movs	r2, r0
1006834c:	1c43      	adds	r3, r0, #1
1006834e:	d1c6      	bne.n	100682de <__sflush_r+0x36>
10068350:	682b      	ldr	r3, [r5, #0]
10068352:	2b00      	cmp	r3, #0
10068354:	d0c3      	beq.n	100682de <__sflush_r+0x36>
10068356:	2b1d      	cmp	r3, #29
10068358:	d001      	beq.n	1006835e <__sflush_r+0xb6>
1006835a:	2b16      	cmp	r3, #22
1006835c:	d11a      	bne.n	10068394 <__sflush_r+0xec>
1006835e:	602e      	str	r6, [r5, #0]
10068360:	2000      	movs	r0, #0
10068362:	e01e      	b.n	100683a2 <__sflush_r+0xfa>
10068364:	690e      	ldr	r6, [r1, #16]
10068366:	2e00      	cmp	r6, #0
10068368:	d0fa      	beq.n	10068360 <__sflush_r+0xb8>
1006836a:	680f      	ldr	r7, [r1, #0]
1006836c:	600e      	str	r6, [r1, #0]
1006836e:	1bba      	subs	r2, r7, r6
10068370:	9201      	str	r2, [sp, #4]
10068372:	2200      	movs	r2, #0
10068374:	079b      	lsls	r3, r3, #30
10068376:	d100      	bne.n	1006837a <__sflush_r+0xd2>
10068378:	694a      	ldr	r2, [r1, #20]
1006837a:	60a2      	str	r2, [r4, #8]
1006837c:	9b01      	ldr	r3, [sp, #4]
1006837e:	2b00      	cmp	r3, #0
10068380:	ddee      	ble.n	10068360 <__sflush_r+0xb8>
10068382:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
10068384:	0032      	movs	r2, r6
10068386:	001f      	movs	r7, r3
10068388:	0028      	movs	r0, r5
1006838a:	9b01      	ldr	r3, [sp, #4]
1006838c:	6a21      	ldr	r1, [r4, #32]
1006838e:	47b8      	blx	r7
10068390:	2800      	cmp	r0, #0
10068392:	dc07      	bgt.n	100683a4 <__sflush_r+0xfc>
10068394:	89a2      	ldrh	r2, [r4, #12]
10068396:	2340      	movs	r3, #64	@ 0x40
10068398:	2001      	movs	r0, #1
1006839a:	4313      	orrs	r3, r2
1006839c:	b21b      	sxth	r3, r3
1006839e:	81a3      	strh	r3, [r4, #12]
100683a0:	4240      	negs	r0, r0
100683a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100683a4:	9b01      	ldr	r3, [sp, #4]
100683a6:	1836      	adds	r6, r6, r0
100683a8:	1a1b      	subs	r3, r3, r0
100683aa:	9301      	str	r3, [sp, #4]
100683ac:	e7e6      	b.n	1006837c <__sflush_r+0xd4>
100683ae:	46c0      	nop			@ (mov r8, r8)
100683b0:	20400001 	.word	0x20400001

100683b4 <_fflush_r>:
100683b4:	690b      	ldr	r3, [r1, #16]
100683b6:	b570      	push	{r4, r5, r6, lr}
100683b8:	0005      	movs	r5, r0
100683ba:	000c      	movs	r4, r1
100683bc:	2b00      	cmp	r3, #0
100683be:	d102      	bne.n	100683c6 <_fflush_r+0x12>
100683c0:	2500      	movs	r5, #0
100683c2:	0028      	movs	r0, r5
100683c4:	bd70      	pop	{r4, r5, r6, pc}
100683c6:	2800      	cmp	r0, #0
100683c8:	d004      	beq.n	100683d4 <_fflush_r+0x20>
100683ca:	6a03      	ldr	r3, [r0, #32]
100683cc:	2b00      	cmp	r3, #0
100683ce:	d101      	bne.n	100683d4 <_fflush_r+0x20>
100683d0:	f7ff fa18 	bl	10067804 <__sinit>
100683d4:	220c      	movs	r2, #12
100683d6:	5ea3      	ldrsh	r3, [r4, r2]
100683d8:	2b00      	cmp	r3, #0
100683da:	d0f1      	beq.n	100683c0 <_fflush_r+0xc>
100683dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
100683de:	07d2      	lsls	r2, r2, #31
100683e0:	d404      	bmi.n	100683ec <_fflush_r+0x38>
100683e2:	059b      	lsls	r3, r3, #22
100683e4:	d402      	bmi.n	100683ec <_fflush_r+0x38>
100683e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
100683e8:	f7ff fc2b 	bl	10067c42 <__retarget_lock_acquire_recursive>
100683ec:	0028      	movs	r0, r5
100683ee:	0021      	movs	r1, r4
100683f0:	f7ff ff5a 	bl	100682a8 <__sflush_r>
100683f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
100683f6:	0005      	movs	r5, r0
100683f8:	07db      	lsls	r3, r3, #31
100683fa:	d4e2      	bmi.n	100683c2 <_fflush_r+0xe>
100683fc:	89a3      	ldrh	r3, [r4, #12]
100683fe:	059b      	lsls	r3, r3, #22
10068400:	d4df      	bmi.n	100683c2 <_fflush_r+0xe>
10068402:	6da0      	ldr	r0, [r4, #88]	@ 0x58
10068404:	f7ff fc1e 	bl	10067c44 <__retarget_lock_release_recursive>
10068408:	e7db      	b.n	100683c2 <_fflush_r+0xe>
	...

1006840c <__swhatbuf_r>:
1006840c:	b570      	push	{r4, r5, r6, lr}
1006840e:	000e      	movs	r6, r1
10068410:	001d      	movs	r5, r3
10068412:	230e      	movs	r3, #14
10068414:	5ec9      	ldrsh	r1, [r1, r3]
10068416:	0014      	movs	r4, r2
10068418:	b096      	sub	sp, #88	@ 0x58
1006841a:	2900      	cmp	r1, #0
1006841c:	da0c      	bge.n	10068438 <__swhatbuf_r+0x2c>
1006841e:	89b2      	ldrh	r2, [r6, #12]
10068420:	2380      	movs	r3, #128	@ 0x80
10068422:	0011      	movs	r1, r2
10068424:	4019      	ands	r1, r3
10068426:	421a      	tst	r2, r3
10068428:	d114      	bne.n	10068454 <__swhatbuf_r+0x48>
1006842a:	2380      	movs	r3, #128	@ 0x80
1006842c:	00db      	lsls	r3, r3, #3
1006842e:	2000      	movs	r0, #0
10068430:	6029      	str	r1, [r5, #0]
10068432:	6023      	str	r3, [r4, #0]
10068434:	b016      	add	sp, #88	@ 0x58
10068436:	bd70      	pop	{r4, r5, r6, pc}
10068438:	466a      	mov	r2, sp
1006843a:	f000 f865 	bl	10068508 <_fstat_r>
1006843e:	2800      	cmp	r0, #0
10068440:	dbed      	blt.n	1006841e <__swhatbuf_r+0x12>
10068442:	23f0      	movs	r3, #240	@ 0xf0
10068444:	9901      	ldr	r1, [sp, #4]
10068446:	021b      	lsls	r3, r3, #8
10068448:	4019      	ands	r1, r3
1006844a:	4b04      	ldr	r3, [pc, #16]	@ (1006845c <__swhatbuf_r+0x50>)
1006844c:	18c9      	adds	r1, r1, r3
1006844e:	424b      	negs	r3, r1
10068450:	4159      	adcs	r1, r3
10068452:	e7ea      	b.n	1006842a <__swhatbuf_r+0x1e>
10068454:	2100      	movs	r1, #0
10068456:	2340      	movs	r3, #64	@ 0x40
10068458:	e7e9      	b.n	1006842e <__swhatbuf_r+0x22>
1006845a:	46c0      	nop			@ (mov r8, r8)
1006845c:	ffffe000 	.word	0xffffe000

10068460 <__smakebuf_r>:
10068460:	b5f0      	push	{r4, r5, r6, r7, lr}
10068462:	2602      	movs	r6, #2
10068464:	898b      	ldrh	r3, [r1, #12]
10068466:	0005      	movs	r5, r0
10068468:	000c      	movs	r4, r1
1006846a:	b085      	sub	sp, #20
1006846c:	4233      	tst	r3, r6
1006846e:	d007      	beq.n	10068480 <__smakebuf_r+0x20>
10068470:	0023      	movs	r3, r4
10068472:	3347      	adds	r3, #71	@ 0x47
10068474:	6023      	str	r3, [r4, #0]
10068476:	6123      	str	r3, [r4, #16]
10068478:	2301      	movs	r3, #1
1006847a:	6163      	str	r3, [r4, #20]
1006847c:	b005      	add	sp, #20
1006847e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068480:	ab03      	add	r3, sp, #12
10068482:	aa02      	add	r2, sp, #8
10068484:	f7ff ffc2 	bl	1006840c <__swhatbuf_r>
10068488:	9f02      	ldr	r7, [sp, #8]
1006848a:	9001      	str	r0, [sp, #4]
1006848c:	0039      	movs	r1, r7
1006848e:	0028      	movs	r0, r5
10068490:	f7ff f898 	bl	100675c4 <_malloc_r>
10068494:	2800      	cmp	r0, #0
10068496:	d108      	bne.n	100684aa <__smakebuf_r+0x4a>
10068498:	220c      	movs	r2, #12
1006849a:	5ea3      	ldrsh	r3, [r4, r2]
1006849c:	059a      	lsls	r2, r3, #22
1006849e:	d4ed      	bmi.n	1006847c <__smakebuf_r+0x1c>
100684a0:	2203      	movs	r2, #3
100684a2:	4393      	bics	r3, r2
100684a4:	431e      	orrs	r6, r3
100684a6:	81a6      	strh	r6, [r4, #12]
100684a8:	e7e2      	b.n	10068470 <__smakebuf_r+0x10>
100684aa:	2380      	movs	r3, #128	@ 0x80
100684ac:	89a2      	ldrh	r2, [r4, #12]
100684ae:	6020      	str	r0, [r4, #0]
100684b0:	4313      	orrs	r3, r2
100684b2:	81a3      	strh	r3, [r4, #12]
100684b4:	9b03      	ldr	r3, [sp, #12]
100684b6:	6120      	str	r0, [r4, #16]
100684b8:	6167      	str	r7, [r4, #20]
100684ba:	2b00      	cmp	r3, #0
100684bc:	d00c      	beq.n	100684d8 <__smakebuf_r+0x78>
100684be:	0028      	movs	r0, r5
100684c0:	230e      	movs	r3, #14
100684c2:	5ee1      	ldrsh	r1, [r4, r3]
100684c4:	f000 f832 	bl	1006852c <_isatty_r>
100684c8:	2800      	cmp	r0, #0
100684ca:	d005      	beq.n	100684d8 <__smakebuf_r+0x78>
100684cc:	2303      	movs	r3, #3
100684ce:	89a2      	ldrh	r2, [r4, #12]
100684d0:	439a      	bics	r2, r3
100684d2:	3b02      	subs	r3, #2
100684d4:	4313      	orrs	r3, r2
100684d6:	81a3      	strh	r3, [r4, #12]
100684d8:	89a3      	ldrh	r3, [r4, #12]
100684da:	9a01      	ldr	r2, [sp, #4]
100684dc:	4313      	orrs	r3, r2
100684de:	81a3      	strh	r3, [r4, #12]
100684e0:	e7cc      	b.n	1006847c <__smakebuf_r+0x1c>

100684e2 <memmove>:
100684e2:	b510      	push	{r4, lr}
100684e4:	4288      	cmp	r0, r1
100684e6:	d902      	bls.n	100684ee <memmove+0xc>
100684e8:	188b      	adds	r3, r1, r2
100684ea:	4298      	cmp	r0, r3
100684ec:	d308      	bcc.n	10068500 <memmove+0x1e>
100684ee:	2300      	movs	r3, #0
100684f0:	429a      	cmp	r2, r3
100684f2:	d007      	beq.n	10068504 <memmove+0x22>
100684f4:	5ccc      	ldrb	r4, [r1, r3]
100684f6:	54c4      	strb	r4, [r0, r3]
100684f8:	3301      	adds	r3, #1
100684fa:	e7f9      	b.n	100684f0 <memmove+0xe>
100684fc:	5c8b      	ldrb	r3, [r1, r2]
100684fe:	5483      	strb	r3, [r0, r2]
10068500:	3a01      	subs	r2, #1
10068502:	d2fb      	bcs.n	100684fc <memmove+0x1a>
10068504:	bd10      	pop	{r4, pc}
	...

10068508 <_fstat_r>:
10068508:	2300      	movs	r3, #0
1006850a:	b570      	push	{r4, r5, r6, lr}
1006850c:	4d06      	ldr	r5, [pc, #24]	@ (10068528 <_fstat_r+0x20>)
1006850e:	0004      	movs	r4, r0
10068510:	0008      	movs	r0, r1
10068512:	0011      	movs	r1, r2
10068514:	602b      	str	r3, [r5, #0]
10068516:	f7de f8d8 	bl	100466ca <_fstat>
1006851a:	1c43      	adds	r3, r0, #1
1006851c:	d103      	bne.n	10068526 <_fstat_r+0x1e>
1006851e:	682b      	ldr	r3, [r5, #0]
10068520:	2b00      	cmp	r3, #0
10068522:	d000      	beq.n	10068526 <_fstat_r+0x1e>
10068524:	6023      	str	r3, [r4, #0]
10068526:	bd70      	pop	{r4, r5, r6, pc}
10068528:	20002c6c 	.word	0x20002c6c

1006852c <_isatty_r>:
1006852c:	2300      	movs	r3, #0
1006852e:	b570      	push	{r4, r5, r6, lr}
10068530:	4d06      	ldr	r5, [pc, #24]	@ (1006854c <_isatty_r+0x20>)
10068532:	0004      	movs	r4, r0
10068534:	0008      	movs	r0, r1
10068536:	602b      	str	r3, [r5, #0]
10068538:	f7de f8d5 	bl	100466e6 <_isatty>
1006853c:	1c43      	adds	r3, r0, #1
1006853e:	d103      	bne.n	10068548 <_isatty_r+0x1c>
10068540:	682b      	ldr	r3, [r5, #0]
10068542:	2b00      	cmp	r3, #0
10068544:	d000      	beq.n	10068548 <_isatty_r+0x1c>
10068546:	6023      	str	r3, [r4, #0]
10068548:	bd70      	pop	{r4, r5, r6, pc}
1006854a:	46c0      	nop			@ (mov r8, r8)
1006854c:	20002c6c 	.word	0x20002c6c

10068550 <memchr>:
10068550:	b2c9      	uxtb	r1, r1
10068552:	1882      	adds	r2, r0, r2
10068554:	4290      	cmp	r0, r2
10068556:	d101      	bne.n	1006855c <memchr+0xc>
10068558:	2000      	movs	r0, #0
1006855a:	4770      	bx	lr
1006855c:	7803      	ldrb	r3, [r0, #0]
1006855e:	428b      	cmp	r3, r1
10068560:	d0fb      	beq.n	1006855a <memchr+0xa>
10068562:	3001      	adds	r0, #1
10068564:	e7f6      	b.n	10068554 <memchr+0x4>

10068566 <_realloc_r>:
10068566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10068568:	0006      	movs	r6, r0
1006856a:	000c      	movs	r4, r1
1006856c:	0015      	movs	r5, r2
1006856e:	2900      	cmp	r1, #0
10068570:	d105      	bne.n	1006857e <_realloc_r+0x18>
10068572:	0011      	movs	r1, r2
10068574:	f7ff f826 	bl	100675c4 <_malloc_r>
10068578:	0004      	movs	r4, r0
1006857a:	0020      	movs	r0, r4
1006857c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1006857e:	2a00      	cmp	r2, #0
10068580:	d103      	bne.n	1006858a <_realloc_r+0x24>
10068582:	f7ff fb6d 	bl	10067c60 <_free_r>
10068586:	002c      	movs	r4, r5
10068588:	e7f7      	b.n	1006857a <_realloc_r+0x14>
1006858a:	f000 f81c 	bl	100685c6 <_malloc_usable_size_r>
1006858e:	0007      	movs	r7, r0
10068590:	4285      	cmp	r5, r0
10068592:	d802      	bhi.n	1006859a <_realloc_r+0x34>
10068594:	0843      	lsrs	r3, r0, #1
10068596:	42ab      	cmp	r3, r5
10068598:	d3ef      	bcc.n	1006857a <_realloc_r+0x14>
1006859a:	0029      	movs	r1, r5
1006859c:	0030      	movs	r0, r6
1006859e:	f7ff f811 	bl	100675c4 <_malloc_r>
100685a2:	9001      	str	r0, [sp, #4]
100685a4:	2800      	cmp	r0, #0
100685a6:	d101      	bne.n	100685ac <_realloc_r+0x46>
100685a8:	9c01      	ldr	r4, [sp, #4]
100685aa:	e7e6      	b.n	1006857a <_realloc_r+0x14>
100685ac:	002a      	movs	r2, r5
100685ae:	42bd      	cmp	r5, r7
100685b0:	d900      	bls.n	100685b4 <_realloc_r+0x4e>
100685b2:	003a      	movs	r2, r7
100685b4:	0021      	movs	r1, r4
100685b6:	9801      	ldr	r0, [sp, #4]
100685b8:	f7ff fb49 	bl	10067c4e <memcpy>
100685bc:	0021      	movs	r1, r4
100685be:	0030      	movs	r0, r6
100685c0:	f7ff fb4e 	bl	10067c60 <_free_r>
100685c4:	e7f0      	b.n	100685a8 <_realloc_r+0x42>

100685c6 <_malloc_usable_size_r>:
100685c6:	1f0b      	subs	r3, r1, #4
100685c8:	681b      	ldr	r3, [r3, #0]
100685ca:	1f18      	subs	r0, r3, #4
100685cc:	2b00      	cmp	r3, #0
100685ce:	da01      	bge.n	100685d4 <_malloc_usable_size_r+0xe>
100685d0:	580b      	ldr	r3, [r1, r0]
100685d2:	18c0      	adds	r0, r0, r3
100685d4:	4770      	bx	lr
	...

100685d8 <AES_CMAC_Encrypt_Append>:
100685d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100685da:	2500      	movs	r5, #0
100685dc:	b08a      	sub	sp, #40	@ 0x28
100685de:	460e      	mov	r6, r1
100685e0:	4604      	mov	r4, r0
100685e2:	2800      	cmp	r0, #0
100685e4:	d004      	beq.n	100685f0 <AES_CMAC_Encrypt_Append+0x18>
100685e6:	2e00      	cmp	r6, #0
100685e8:	d106      	bne.n	100685f8 <AES_CMAC_Encrypt_Append+0x20>
100685ea:	980c      	ldr	r0, [sp, #48]	@ 0x30
100685ec:	2800      	cmp	r0, #0
100685ee:	dd03      	ble.n	100685f8 <AES_CMAC_Encrypt_Append+0x20>
100685f0:	2061      	movs	r0, #97	@ 0x61
100685f2:	0140      	lsls	r0, r0, #5
100685f4:	b00d      	add	sp, #52	@ 0x34
100685f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100685f8:	980c      	ldr	r0, [sp, #48]	@ 0x30
100685fa:	2800      	cmp	r0, #0
100685fc:	db04      	blt.n	10068608 <AES_CMAC_Encrypt_Append+0x30>
100685fe:	2810      	cmp	r0, #16
10068600:	da04      	bge.n	1006860c <AES_CMAC_Encrypt_Append+0x34>
10068602:	7920      	ldrb	r0, [r4, #4]
10068604:	0680      	lsls	r0, r0, #26
10068606:	d401      	bmi.n	1006860c <AES_CMAC_Encrypt_Append+0x34>
10068608:	488c      	ldr	r0, [pc, #560]	@ (1006883c <AES_CMAC_Encrypt_Append+0x264>)
1006860a:	e7f3      	b.n	100685f4 <AES_CMAC_Encrypt_Append+0x1c>
1006860c:	7920      	ldrb	r0, [r4, #4]
1006860e:	0741      	lsls	r1, r0, #29
10068610:	d401      	bmi.n	10068616 <AES_CMAC_Encrypt_Append+0x3e>
10068612:	0781      	lsls	r1, r0, #30
10068614:	d502      	bpl.n	1006861c <AES_CMAC_Encrypt_Append+0x44>
10068616:	4889      	ldr	r0, [pc, #548]	@ (1006883c <AES_CMAC_Encrypt_Append+0x264>)
10068618:	1c40      	adds	r0, r0, #1
1006861a:	e7eb      	b.n	100685f4 <AES_CMAC_Encrypt_Append+0x1c>
1006861c:	2140      	movs	r1, #64	@ 0x40
1006861e:	4308      	orrs	r0, r1
10068620:	7120      	strb	r0, [r4, #4]
10068622:	4620      	mov	r0, r4
10068624:	3014      	adds	r0, #20
10068626:	9008      	str	r0, [sp, #32]
10068628:	e01c      	b.n	10068664 <AES_CMAC_Encrypt_Append+0x8c>
1006862a:	2000      	movs	r0, #0
1006862c:	0081      	lsls	r1, r0, #2
1006862e:	194a      	adds	r2, r1, r5
10068630:	1992      	adds	r2, r2, r6
10068632:	7853      	ldrb	r3, [r2, #1]
10068634:	7817      	ldrb	r7, [r2, #0]
10068636:	021b      	lsls	r3, r3, #8
10068638:	433b      	orrs	r3, r7
1006863a:	7897      	ldrb	r7, [r2, #2]
1006863c:	ba5b      	rev16	r3, r3
1006863e:	041b      	lsls	r3, r3, #16
10068640:	023f      	lsls	r7, r7, #8
10068642:	78d2      	ldrb	r2, [r2, #3]
10068644:	433b      	orrs	r3, r7
10068646:	4313      	orrs	r3, r2
10068648:	190a      	adds	r2, r1, r4
1006864a:	6952      	ldr	r2, [r2, #20]
1006864c:	1c40      	adds	r0, r0, #1
1006864e:	4053      	eors	r3, r2
10068650:	aa04      	add	r2, sp, #16
10068652:	5053      	str	r3, [r2, r1]
10068654:	2804      	cmp	r0, #4
10068656:	dbe9      	blt.n	1006862c <AES_CMAC_Encrypt_Append+0x54>
10068658:	68a2      	ldr	r2, [r4, #8]
1006865a:	a804      	add	r0, sp, #16
1006865c:	9908      	ldr	r1, [sp, #32]
1006865e:	f7e6 fe3d 	bl	1004f2dc <AES_128_HW_enc>
10068662:	9d00      	ldr	r5, [sp, #0]
10068664:	990c      	ldr	r1, [sp, #48]	@ 0x30
10068666:	4628      	mov	r0, r5
10068668:	3010      	adds	r0, #16
1006866a:	9000      	str	r0, [sp, #0]
1006866c:	4288      	cmp	r0, r1
1006866e:	dbdc      	blt.n	1006862a <AES_CMAC_Encrypt_Append+0x52>
10068670:	7920      	ldrb	r0, [r4, #4]
10068672:	0680      	lsls	r0, r0, #26
10068674:	d41e      	bmi.n	100686b4 <AES_CMAC_Encrypt_Append+0xdc>
10068676:	2900      	cmp	r1, #0
10068678:	dd1c      	ble.n	100686b4 <AES_CMAC_Encrypt_Append+0xdc>
1006867a:	2000      	movs	r0, #0
1006867c:	0081      	lsls	r1, r0, #2
1006867e:	194a      	adds	r2, r1, r5
10068680:	1992      	adds	r2, r2, r6
10068682:	7853      	ldrb	r3, [r2, #1]
10068684:	7817      	ldrb	r7, [r2, #0]
10068686:	021b      	lsls	r3, r3, #8
10068688:	433b      	orrs	r3, r7
1006868a:	7897      	ldrb	r7, [r2, #2]
1006868c:	ba5b      	rev16	r3, r3
1006868e:	041b      	lsls	r3, r3, #16
10068690:	023f      	lsls	r7, r7, #8
10068692:	78d2      	ldrb	r2, [r2, #3]
10068694:	433b      	orrs	r3, r7
10068696:	4313      	orrs	r3, r2
10068698:	190a      	adds	r2, r1, r4
1006869a:	6952      	ldr	r2, [r2, #20]
1006869c:	1c40      	adds	r0, r0, #1
1006869e:	4053      	eors	r3, r2
100686a0:	aa04      	add	r2, sp, #16
100686a2:	5053      	str	r3, [r2, r1]
100686a4:	2804      	cmp	r0, #4
100686a6:	dbe9      	blt.n	1006867c <AES_CMAC_Encrypt_Append+0xa4>
100686a8:	68a2      	ldr	r2, [r4, #8]
100686aa:	a804      	add	r0, sp, #16
100686ac:	9908      	ldr	r1, [sp, #32]
100686ae:	f7e6 fe15 	bl	1004f2dc <AES_128_HW_enc>
100686b2:	e0c0      	b.n	10068836 <AES_CMAC_Encrypt_Append+0x25e>
100686b4:	2000      	movs	r0, #0
100686b6:	9000      	str	r0, [sp, #0]
100686b8:	9001      	str	r0, [sp, #4]
100686ba:	9002      	str	r0, [sp, #8]
100686bc:	9003      	str	r0, [sp, #12]
100686be:	4669      	mov	r1, sp
100686c0:	4608      	mov	r0, r1
100686c2:	68a2      	ldr	r2, [r4, #8]
100686c4:	f7e6 fe0a 	bl	1004f2dc <AES_128_HW_enc>
100686c8:	9900      	ldr	r1, [sp, #0]
100686ca:	2287      	movs	r2, #135	@ 0x87
100686cc:	0fc8      	lsrs	r0, r1, #31
100686ce:	4350      	muls	r0, r2
100686d0:	9a01      	ldr	r2, [sp, #4]
100686d2:	0049      	lsls	r1, r1, #1
100686d4:	0fd2      	lsrs	r2, r2, #31
100686d6:	4311      	orrs	r1, r2
100686d8:	9100      	str	r1, [sp, #0]
100686da:	9901      	ldr	r1, [sp, #4]
100686dc:	9a02      	ldr	r2, [sp, #8]
100686de:	0049      	lsls	r1, r1, #1
100686e0:	0fd2      	lsrs	r2, r2, #31
100686e2:	4311      	orrs	r1, r2
100686e4:	9101      	str	r1, [sp, #4]
100686e6:	9902      	ldr	r1, [sp, #8]
100686e8:	9a03      	ldr	r2, [sp, #12]
100686ea:	0049      	lsls	r1, r1, #1
100686ec:	0fd2      	lsrs	r2, r2, #31
100686ee:	4311      	orrs	r1, r2
100686f0:	9102      	str	r1, [sp, #8]
100686f2:	9903      	ldr	r1, [sp, #12]
100686f4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
100686f6:	0049      	lsls	r1, r1, #1
100686f8:	4041      	eors	r1, r0
100686fa:	4628      	mov	r0, r5
100686fc:	3010      	adds	r0, #16
100686fe:	9103      	str	r1, [sp, #12]
10068700:	4290      	cmp	r0, r2
10068702:	d11a      	bne.n	1006873a <AES_CMAC_Encrypt_Append+0x162>
10068704:	2000      	movs	r0, #0
10068706:	0081      	lsls	r1, r0, #2
10068708:	194a      	adds	r2, r1, r5
1006870a:	1993      	adds	r3, r2, r6
1006870c:	785a      	ldrb	r2, [r3, #1]
1006870e:	781f      	ldrb	r7, [r3, #0]
10068710:	0212      	lsls	r2, r2, #8
10068712:	433a      	orrs	r2, r7
10068714:	789f      	ldrb	r7, [r3, #2]
10068716:	ba52      	rev16	r2, r2
10068718:	0412      	lsls	r2, r2, #16
1006871a:	023f      	lsls	r7, r7, #8
1006871c:	433a      	orrs	r2, r7
1006871e:	78db      	ldrb	r3, [r3, #3]
10068720:	466f      	mov	r7, sp
10068722:	431a      	orrs	r2, r3
10068724:	190b      	adds	r3, r1, r4
10068726:	695b      	ldr	r3, [r3, #20]
10068728:	587f      	ldr	r7, [r7, r1]
1006872a:	1c40      	adds	r0, r0, #1
1006872c:	407b      	eors	r3, r7
1006872e:	405a      	eors	r2, r3
10068730:	ab04      	add	r3, sp, #16
10068732:	505a      	str	r2, [r3, r1]
10068734:	2804      	cmp	r0, #4
10068736:	dbe6      	blt.n	10068706 <AES_CMAC_Encrypt_Append+0x12e>
10068738:	e074      	b.n	10068824 <AES_CMAC_Encrypt_Append+0x24c>
1006873a:	9a00      	ldr	r2, [sp, #0]
1006873c:	2387      	movs	r3, #135	@ 0x87
1006873e:	0fd0      	lsrs	r0, r2, #31
10068740:	4358      	muls	r0, r3
10068742:	9b01      	ldr	r3, [sp, #4]
10068744:	0052      	lsls	r2, r2, #1
10068746:	0fdb      	lsrs	r3, r3, #31
10068748:	431a      	orrs	r2, r3
1006874a:	9200      	str	r2, [sp, #0]
1006874c:	9a01      	ldr	r2, [sp, #4]
1006874e:	9b02      	ldr	r3, [sp, #8]
10068750:	0052      	lsls	r2, r2, #1
10068752:	0fdb      	lsrs	r3, r3, #31
10068754:	431a      	orrs	r2, r3
10068756:	9201      	str	r2, [sp, #4]
10068758:	9a02      	ldr	r2, [sp, #8]
1006875a:	0fcb      	lsrs	r3, r1, #31
1006875c:	0052      	lsls	r2, r2, #1
1006875e:	431a      	orrs	r2, r3
10068760:	9202      	str	r2, [sp, #8]
10068762:	004a      	lsls	r2, r1, #1
10068764:	4042      	eors	r2, r0
10068766:	9203      	str	r2, [sp, #12]
10068768:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1006876a:	2000      	movs	r0, #0
1006876c:	1b53      	subs	r3, r2, r5
1006876e:	17da      	asrs	r2, r3, #31
10068770:	469c      	mov	ip, r3
10068772:	0f92      	lsrs	r2, r2, #30
10068774:	4462      	add	r2, ip
10068776:	1092      	asrs	r2, r2, #2
10068778:	4696      	mov	lr, r2
1006877a:	e016      	b.n	100687aa <AES_CMAC_Encrypt_Append+0x1d2>
1006877c:	0081      	lsls	r1, r0, #2
1006877e:	194a      	adds	r2, r1, r5
10068780:	1993      	adds	r3, r2, r6
10068782:	785a      	ldrb	r2, [r3, #1]
10068784:	781f      	ldrb	r7, [r3, #0]
10068786:	0212      	lsls	r2, r2, #8
10068788:	433a      	orrs	r2, r7
1006878a:	789f      	ldrb	r7, [r3, #2]
1006878c:	ba52      	rev16	r2, r2
1006878e:	0412      	lsls	r2, r2, #16
10068790:	023f      	lsls	r7, r7, #8
10068792:	433a      	orrs	r2, r7
10068794:	78db      	ldrb	r3, [r3, #3]
10068796:	466f      	mov	r7, sp
10068798:	431a      	orrs	r2, r3
1006879a:	190b      	adds	r3, r1, r4
1006879c:	695b      	ldr	r3, [r3, #20]
1006879e:	587f      	ldr	r7, [r7, r1]
100687a0:	407b      	eors	r3, r7
100687a2:	405a      	eors	r2, r3
100687a4:	ab04      	add	r3, sp, #16
100687a6:	505a      	str	r2, [r3, r1]
100687a8:	1c40      	adds	r0, r0, #1
100687aa:	4586      	cmp	lr, r0
100687ac:	dce6      	bgt.n	1006877c <AES_CMAC_Encrypt_Append+0x1a4>
100687ae:	0081      	lsls	r1, r0, #2
100687b0:	190a      	adds	r2, r1, r4
100687b2:	466b      	mov	r3, sp
100687b4:	6952      	ldr	r2, [r2, #20]
100687b6:	585b      	ldr	r3, [r3, r1]
100687b8:	4667      	mov	r7, ip
100687ba:	405a      	eors	r2, r3
100687bc:	ab04      	add	r3, sp, #16
100687be:	505a      	str	r2, [r3, r1]
100687c0:	1a7f      	subs	r7, r7, r1
100687c2:	2200      	movs	r2, #0
100687c4:	194b      	adds	r3, r1, r5
100687c6:	46bc      	mov	ip, r7
100687c8:	469e      	mov	lr, r3
100687ca:	e00b      	b.n	100687e4 <AES_CMAC_Encrypt_Append+0x20c>
100687cc:	4673      	mov	r3, lr
100687ce:	189b      	adds	r3, r3, r2
100687d0:	5cf3      	ldrb	r3, [r6, r3]
100687d2:	00d7      	lsls	r7, r2, #3
100687d4:	2518      	movs	r5, #24
100687d6:	1bed      	subs	r5, r5, r7
100687d8:	40ab      	lsls	r3, r5
100687da:	ad04      	add	r5, sp, #16
100687dc:	586f      	ldr	r7, [r5, r1]
100687de:	407b      	eors	r3, r7
100687e0:	506b      	str	r3, [r5, r1]
100687e2:	1c52      	adds	r2, r2, #1
100687e4:	4594      	cmp	ip, r2
100687e6:	dcf1      	bgt.n	100687cc <AES_CMAC_Encrypt_Append+0x1f4>
100687e8:	2a00      	cmp	r2, #0
100687ea:	d009      	beq.n	10068800 <AES_CMAC_Encrypt_Append+0x228>
100687ec:	00d6      	lsls	r6, r2, #3
100687ee:	2218      	movs	r2, #24
100687f0:	ab04      	add	r3, sp, #16
100687f2:	1b96      	subs	r6, r2, r6
100687f4:	585d      	ldr	r5, [r3, r1]
100687f6:	2280      	movs	r2, #128	@ 0x80
100687f8:	40b2      	lsls	r2, r6
100687fa:	4055      	eors	r5, r2
100687fc:	505d      	str	r5, [r3, r1]
100687fe:	e005      	b.n	1006880c <AES_CMAC_Encrypt_Append+0x234>
10068800:	aa04      	add	r2, sp, #16
10068802:	5853      	ldr	r3, [r2, r1]
10068804:	2501      	movs	r5, #1
10068806:	07ed      	lsls	r5, r5, #31
10068808:	406b      	eors	r3, r5
1006880a:	5053      	str	r3, [r2, r1]
1006880c:	ab04      	add	r3, sp, #16
1006880e:	466a      	mov	r2, sp
10068810:	e005      	b.n	1006881e <AES_CMAC_Encrypt_Append+0x246>
10068812:	0081      	lsls	r1, r0, #2
10068814:	190d      	adds	r5, r1, r4
10068816:	696d      	ldr	r5, [r5, #20]
10068818:	5856      	ldr	r6, [r2, r1]
1006881a:	4075      	eors	r5, r6
1006881c:	505d      	str	r5, [r3, r1]
1006881e:	1c40      	adds	r0, r0, #1
10068820:	2804      	cmp	r0, #4
10068822:	dbf6      	blt.n	10068812 <AES_CMAC_Encrypt_Append+0x23a>
10068824:	68a2      	ldr	r2, [r4, #8]
10068826:	4618      	mov	r0, r3
10068828:	9908      	ldr	r1, [sp, #32]
1006882a:	f7e6 fd57 	bl	1004f2dc <AES_128_HW_enc>
1006882e:	7920      	ldrb	r0, [r4, #4]
10068830:	2104      	movs	r1, #4
10068832:	4308      	orrs	r0, r1
10068834:	7120      	strb	r0, [r4, #4]
10068836:	2000      	movs	r0, #0
10068838:	e6dc      	b.n	100685f4 <AES_CMAC_Encrypt_Append+0x1c>
1006883a:	0000      	.short	0x0000
1006883c:	00000c1d 	.word	0x00000c1d

10068840 <AES_CMAC_Encrypt_Finish>:
10068840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10068842:	4616      	mov	r6, r2
10068844:	460f      	mov	r7, r1
10068846:	0004      	movs	r4, r0
10068848:	d009      	beq.n	1006885e <AES_CMAC_Encrypt_Finish+0x1e>
1006884a:	2e00      	cmp	r6, #0
1006884c:	d007      	beq.n	1006885e <AES_CMAC_Encrypt_Finish+0x1e>
1006884e:	4625      	mov	r5, r4
10068850:	3580      	adds	r5, #128	@ 0x80
10068852:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
10068854:	1e40      	subs	r0, r0, #1
10068856:	2810      	cmp	r0, #16
10068858:	d304      	bcc.n	10068864 <AES_CMAC_Encrypt_Finish+0x24>
1006885a:	4813      	ldr	r0, [pc, #76]	@ (100688a8 <AES_CMAC_Encrypt_Finish+0x68>)
1006885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1006885e:	2061      	movs	r0, #97	@ 0x61
10068860:	0140      	lsls	r0, r0, #5
10068862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10068864:	7920      	ldrb	r0, [r4, #4]
10068866:	0640      	lsls	r0, r0, #25
10068868:	d404      	bmi.n	10068874 <AES_CMAC_Encrypt_Finish+0x34>
1006886a:	2200      	movs	r2, #0
1006886c:	4611      	mov	r1, r2
1006886e:	4620      	mov	r0, r4
10068870:	f7ff feb2 	bl	100685d8 <AES_CMAC_Encrypt_Append>
10068874:	7920      	ldrb	r0, [r4, #4]
10068876:	2102      	movs	r1, #2
10068878:	4308      	orrs	r0, r1
1006887a:	7120      	strb	r0, [r4, #4]
1006887c:	2000      	movs	r0, #0
1006887e:	2118      	movs	r1, #24
10068880:	e00c      	b.n	1006889c <AES_CMAC_Encrypt_Finish+0x5c>
10068882:	17c2      	asrs	r2, r0, #31
10068884:	0f92      	lsrs	r2, r2, #30
10068886:	1812      	adds	r2, r2, r0
10068888:	0892      	lsrs	r2, r2, #2
1006888a:	0092      	lsls	r2, r2, #2
1006888c:	1912      	adds	r2, r2, r4
1006888e:	0783      	lsls	r3, r0, #30
10068890:	6952      	ldr	r2, [r2, #20]
10068892:	0edb      	lsrs	r3, r3, #27
10068894:	1acb      	subs	r3, r1, r3
10068896:	40da      	lsrs	r2, r3
10068898:	543a      	strb	r2, [r7, r0]
1006889a:	1c40      	adds	r0, r0, #1
1006889c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
1006889e:	4282      	cmp	r2, r0
100688a0:	dcef      	bgt.n	10068882 <AES_CMAC_Encrypt_Finish+0x42>
100688a2:	2000      	movs	r0, #0
100688a4:	6032      	str	r2, [r6, #0]
100688a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100688a8:	00000c1f 	.word	0x00000c1f

100688ac <AES_CMAC_Encrypt_Init>:
100688ac:	b510      	push	{r4, lr}
100688ae:	0004      	movs	r4, r0
100688b0:	d007      	beq.n	100688c2 <AES_CMAC_Encrypt_Init+0x16>
100688b2:	2302      	movs	r3, #2
100688b4:	2200      	movs	r2, #0
100688b6:	68a1      	ldr	r1, [r4, #8]
100688b8:	f000 f81a 	bl	100688f0 <AESstdInitEnc>
100688bc:	0001      	movs	r1, r0
100688be:	d003      	beq.n	100688c8 <AES_CMAC_Encrypt_Init+0x1c>
100688c0:	e00c      	b.n	100688dc <AES_CMAC_Encrypt_Init+0x30>
100688c2:	2061      	movs	r0, #97	@ 0x61
100688c4:	0140      	lsls	r0, r0, #5
100688c6:	bd10      	pop	{r4, pc}
100688c8:	2000      	movs	r0, #0
100688ca:	2210      	movs	r2, #16
100688cc:	6122      	str	r2, [r4, #16]
100688ce:	4602      	mov	r2, r0
100688d0:	0083      	lsls	r3, r0, #2
100688d2:	191b      	adds	r3, r3, r4
100688d4:	1c40      	adds	r0, r0, #1
100688d6:	615a      	str	r2, [r3, #20]
100688d8:	2804      	cmp	r0, #4
100688da:	dbf9      	blt.n	100688d0 <AES_CMAC_Encrypt_Init+0x24>
100688dc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
100688de:	2810      	cmp	r0, #16
100688e0:	d001      	beq.n	100688e6 <AES_CMAC_Encrypt_Init+0x3a>
100688e2:	4802      	ldr	r0, [pc, #8]	@ (100688ec <AES_CMAC_Encrypt_Init+0x40>)
100688e4:	bd10      	pop	{r4, pc}
100688e6:	4608      	mov	r0, r1
100688e8:	bd10      	pop	{r4, pc}
100688ea:	0000      	.short	0x0000
100688ec:	00000c1d 	.word	0x00000c1d

100688f0 <AESstdInitEnc>:
100688f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100688f2:	2800      	cmp	r0, #0
100688f4:	d007      	beq.n	10068906 <AESstdInitEnc+0x16>
100688f6:	2900      	cmp	r1, #0
100688f8:	d005      	beq.n	10068906 <AESstdInitEnc+0x16>
100688fa:	075b      	lsls	r3, r3, #29
100688fc:	0f9c      	lsrs	r4, r3, #30
100688fe:	2a00      	cmp	r2, #0
10068900:	d104      	bne.n	1006890c <AESstdInitEnc+0x1c>
10068902:	2c01      	cmp	r4, #1
10068904:	d002      	beq.n	1006890c <AESstdInitEnc+0x1c>
10068906:	2061      	movs	r0, #97	@ 0x61
10068908:	0140      	lsls	r0, r0, #5
1006890a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006890c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
1006890e:	2b10      	cmp	r3, #16
10068910:	d003      	beq.n	1006891a <AESstdInitEnc+0x2a>
10068912:	2b18      	cmp	r3, #24
10068914:	d001      	beq.n	1006891a <AESstdInitEnc+0x2a>
10068916:	2b20      	cmp	r3, #32
10068918:	d105      	bne.n	10068926 <AESstdInitEnc+0x36>
1006891a:	2c01      	cmp	r4, #1
1006891c:	d005      	beq.n	1006892a <AESstdInitEnc+0x3a>
1006891e:	6905      	ldr	r5, [r0, #16]
10068920:	1e6d      	subs	r5, r5, #1
10068922:	2d10      	cmp	r5, #16
10068924:	d301      	bcc.n	1006892a <AESstdInitEnc+0x3a>
10068926:	481a      	ldr	r0, [pc, #104]	@ (10068990 <AESstdInitEnc+0xa0>)
10068928:	bdf0      	pop	{r4, r5, r6, r7, pc}
1006892a:	2b10      	cmp	r3, #16
1006892c:	d002      	beq.n	10068934 <AESstdInitEnc+0x44>
1006892e:	4818      	ldr	r0, [pc, #96]	@ (10068990 <AESstdInitEnc+0xa0>)
10068930:	1e80      	subs	r0, r0, #2
10068932:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068934:	60c2      	str	r2, [r0, #12]
10068936:	7903      	ldrb	r3, [r0, #4]
10068938:	25f9      	movs	r5, #249	@ 0xf9
1006893a:	402b      	ands	r3, r5
1006893c:	7103      	strb	r3, [r0, #4]
1006893e:	2c01      	cmp	r4, #1
10068940:	d020      	beq.n	10068984 <AESstdInitEnc+0x94>
10068942:	2300      	movs	r3, #0
10068944:	461c      	mov	r4, r3
10068946:	009d      	lsls	r5, r3, #2
10068948:	182d      	adds	r5, r5, r0
1006894a:	1c5b      	adds	r3, r3, #1
1006894c:	616c      	str	r4, [r5, #20]
1006894e:	2b04      	cmp	r3, #4
10068950:	dbf9      	blt.n	10068946 <AESstdInitEnc+0x56>
10068952:	2300      	movs	r3, #0
10068954:	e013      	b.n	1006897e <AESstdInitEnc+0x8e>
10068956:	17dc      	asrs	r4, r3, #31
10068958:	0fa4      	lsrs	r4, r4, #30
1006895a:	18e4      	adds	r4, r4, r3
1006895c:	08a4      	lsrs	r4, r4, #2
1006895e:	00a4      	lsls	r4, r4, #2
10068960:	1825      	adds	r5, r4, r0
10068962:	462e      	mov	r6, r5
10068964:	3614      	adds	r6, #20
10068966:	46b4      	mov	ip, r6
10068968:	1b1c      	subs	r4, r3, r4
1006896a:	5cd6      	ldrb	r6, [r2, r3]
1006896c:	00e4      	lsls	r4, r4, #3
1006896e:	2718      	movs	r7, #24
10068970:	696d      	ldr	r5, [r5, #20]
10068972:	1b3c      	subs	r4, r7, r4
10068974:	40a6      	lsls	r6, r4
10068976:	4335      	orrs	r5, r6
10068978:	4666      	mov	r6, ip
1006897a:	1c5b      	adds	r3, r3, #1
1006897c:	6035      	str	r5, [r6, #0]
1006897e:	6904      	ldr	r4, [r0, #16]
10068980:	429c      	cmp	r4, r3
10068982:	dce8      	bgt.n	10068956 <AESstdInitEnc+0x66>
10068984:	7902      	ldrb	r2, [r0, #4]
10068986:	07d2      	lsls	r2, r2, #31
10068988:	d100      	bne.n	1006898c <AESstdInitEnc+0x9c>
1006898a:	6081      	str	r1, [r0, #8]
1006898c:	2000      	movs	r0, #0
1006898e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10068990:	00000c1f 	.word	0x00000c1f

Disassembly of section .init:

10068994 <_init>:
10068994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10068996:	46c0      	nop			@ (mov r8, r8)

Disassembly of section .fini:

10068998 <_fini>:
10068998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1006899a:	46c0      	nop			@ (mov r8, r8)
